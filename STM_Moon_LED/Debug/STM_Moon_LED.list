
STM_Moon_LED.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000210bc  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000097a8  08021260  08021260  00031260  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0802aa08  0802aa08  00040074  2**0
                  CONTENTS
  4 .ARM          00000008  0802aa08  0802aa08  0003aa08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0802aa10  0802aa10  00040074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0802aa10  0802aa10  0003aa10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0802aa14  0802aa14  0003aa14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  0802aa18  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005008  20000074  0802aa8c  00040074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000507c  0802aa8c  0004507c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00040074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013c4e  00000000  00000000  000400a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002b09  00000000  00000000  00053cf2  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001028  00000000  00000000  00056800  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000f00  00000000  00000000  00057828  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00018c62  00000000  00000000  00058728  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001046b  00000000  00000000  0007138a  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00090422  00000000  00000000  000817f5  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00111c17  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004980  00000000  00000000  00111c94  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000074 	.word	0x20000074
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08021244 	.word	0x08021244

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000078 	.word	0x20000078
 80001dc:	08021244 	.word	0x08021244

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ce:	f1a4 0401 	sub.w	r4, r4, #1
 80003d2:	d1e9      	bne.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2uiz>:
 8000b68:	004a      	lsls	r2, r1, #1
 8000b6a:	d211      	bcs.n	8000b90 <__aeabi_d2uiz+0x28>
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d211      	bcs.n	8000b96 <__aeabi_d2uiz+0x2e>
 8000b72:	d50d      	bpl.n	8000b90 <__aeabi_d2uiz+0x28>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d40e      	bmi.n	8000b9c <__aeabi_d2uiz+0x34>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b8e:	4770      	bx	lr
 8000b90:	f04f 0000 	mov.w	r0, #0
 8000b94:	4770      	bx	lr
 8000b96:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_d2uiz+0x3a>
 8000b9c:	f04f 30ff 	mov.w	r0, #4294967295
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0000 	mov.w	r0, #0
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b972 	b.w	8000ea4 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9e08      	ldr	r6, [sp, #32]
 8000bde:	4604      	mov	r4, r0
 8000be0:	4688      	mov	r8, r1
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d14b      	bne.n	8000c7e <__udivmoddi4+0xa6>
 8000be6:	428a      	cmp	r2, r1
 8000be8:	4615      	mov	r5, r2
 8000bea:	d967      	bls.n	8000cbc <__udivmoddi4+0xe4>
 8000bec:	fab2 f282 	clz	r2, r2
 8000bf0:	b14a      	cbz	r2, 8000c06 <__udivmoddi4+0x2e>
 8000bf2:	f1c2 0720 	rsb	r7, r2, #32
 8000bf6:	fa01 f302 	lsl.w	r3, r1, r2
 8000bfa:	fa20 f707 	lsr.w	r7, r0, r7
 8000bfe:	4095      	lsls	r5, r2
 8000c00:	ea47 0803 	orr.w	r8, r7, r3
 8000c04:	4094      	lsls	r4, r2
 8000c06:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c0a:	0c23      	lsrs	r3, r4, #16
 8000c0c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000c10:	fa1f fc85 	uxth.w	ip, r5
 8000c14:	fb0e 8817 	mls	r8, lr, r7, r8
 8000c18:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c1c:	fb07 f10c 	mul.w	r1, r7, ip
 8000c20:	4299      	cmp	r1, r3
 8000c22:	d909      	bls.n	8000c38 <__udivmoddi4+0x60>
 8000c24:	18eb      	adds	r3, r5, r3
 8000c26:	f107 30ff 	add.w	r0, r7, #4294967295
 8000c2a:	f080 811b 	bcs.w	8000e64 <__udivmoddi4+0x28c>
 8000c2e:	4299      	cmp	r1, r3
 8000c30:	f240 8118 	bls.w	8000e64 <__udivmoddi4+0x28c>
 8000c34:	3f02      	subs	r7, #2
 8000c36:	442b      	add	r3, r5
 8000c38:	1a5b      	subs	r3, r3, r1
 8000c3a:	b2a4      	uxth	r4, r4
 8000c3c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c40:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c44:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c48:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c4c:	45a4      	cmp	ip, r4
 8000c4e:	d909      	bls.n	8000c64 <__udivmoddi4+0x8c>
 8000c50:	192c      	adds	r4, r5, r4
 8000c52:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c56:	f080 8107 	bcs.w	8000e68 <__udivmoddi4+0x290>
 8000c5a:	45a4      	cmp	ip, r4
 8000c5c:	f240 8104 	bls.w	8000e68 <__udivmoddi4+0x290>
 8000c60:	3802      	subs	r0, #2
 8000c62:	442c      	add	r4, r5
 8000c64:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000c68:	eba4 040c 	sub.w	r4, r4, ip
 8000c6c:	2700      	movs	r7, #0
 8000c6e:	b11e      	cbz	r6, 8000c78 <__udivmoddi4+0xa0>
 8000c70:	40d4      	lsrs	r4, r2
 8000c72:	2300      	movs	r3, #0
 8000c74:	e9c6 4300 	strd	r4, r3, [r6]
 8000c78:	4639      	mov	r1, r7
 8000c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7e:	428b      	cmp	r3, r1
 8000c80:	d909      	bls.n	8000c96 <__udivmoddi4+0xbe>
 8000c82:	2e00      	cmp	r6, #0
 8000c84:	f000 80eb 	beq.w	8000e5e <__udivmoddi4+0x286>
 8000c88:	2700      	movs	r7, #0
 8000c8a:	e9c6 0100 	strd	r0, r1, [r6]
 8000c8e:	4638      	mov	r0, r7
 8000c90:	4639      	mov	r1, r7
 8000c92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c96:	fab3 f783 	clz	r7, r3
 8000c9a:	2f00      	cmp	r7, #0
 8000c9c:	d147      	bne.n	8000d2e <__udivmoddi4+0x156>
 8000c9e:	428b      	cmp	r3, r1
 8000ca0:	d302      	bcc.n	8000ca8 <__udivmoddi4+0xd0>
 8000ca2:	4282      	cmp	r2, r0
 8000ca4:	f200 80fa 	bhi.w	8000e9c <__udivmoddi4+0x2c4>
 8000ca8:	1a84      	subs	r4, r0, r2
 8000caa:	eb61 0303 	sbc.w	r3, r1, r3
 8000cae:	2001      	movs	r0, #1
 8000cb0:	4698      	mov	r8, r3
 8000cb2:	2e00      	cmp	r6, #0
 8000cb4:	d0e0      	beq.n	8000c78 <__udivmoddi4+0xa0>
 8000cb6:	e9c6 4800 	strd	r4, r8, [r6]
 8000cba:	e7dd      	b.n	8000c78 <__udivmoddi4+0xa0>
 8000cbc:	b902      	cbnz	r2, 8000cc0 <__udivmoddi4+0xe8>
 8000cbe:	deff      	udf	#255	; 0xff
 8000cc0:	fab2 f282 	clz	r2, r2
 8000cc4:	2a00      	cmp	r2, #0
 8000cc6:	f040 808f 	bne.w	8000de8 <__udivmoddi4+0x210>
 8000cca:	1b49      	subs	r1, r1, r5
 8000ccc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cd0:	fa1f f885 	uxth.w	r8, r5
 8000cd4:	2701      	movs	r7, #1
 8000cd6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000cda:	0c23      	lsrs	r3, r4, #16
 8000cdc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000ce0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ce4:	fb08 f10c 	mul.w	r1, r8, ip
 8000ce8:	4299      	cmp	r1, r3
 8000cea:	d907      	bls.n	8000cfc <__udivmoddi4+0x124>
 8000cec:	18eb      	adds	r3, r5, r3
 8000cee:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000cf2:	d202      	bcs.n	8000cfa <__udivmoddi4+0x122>
 8000cf4:	4299      	cmp	r1, r3
 8000cf6:	f200 80cd 	bhi.w	8000e94 <__udivmoddi4+0x2bc>
 8000cfa:	4684      	mov	ip, r0
 8000cfc:	1a59      	subs	r1, r3, r1
 8000cfe:	b2a3      	uxth	r3, r4
 8000d00:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d04:	fb0e 1410 	mls	r4, lr, r0, r1
 8000d08:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000d0c:	fb08 f800 	mul.w	r8, r8, r0
 8000d10:	45a0      	cmp	r8, r4
 8000d12:	d907      	bls.n	8000d24 <__udivmoddi4+0x14c>
 8000d14:	192c      	adds	r4, r5, r4
 8000d16:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d1a:	d202      	bcs.n	8000d22 <__udivmoddi4+0x14a>
 8000d1c:	45a0      	cmp	r8, r4
 8000d1e:	f200 80b6 	bhi.w	8000e8e <__udivmoddi4+0x2b6>
 8000d22:	4618      	mov	r0, r3
 8000d24:	eba4 0408 	sub.w	r4, r4, r8
 8000d28:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d2c:	e79f      	b.n	8000c6e <__udivmoddi4+0x96>
 8000d2e:	f1c7 0c20 	rsb	ip, r7, #32
 8000d32:	40bb      	lsls	r3, r7
 8000d34:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000d38:	ea4e 0e03 	orr.w	lr, lr, r3
 8000d3c:	fa01 f407 	lsl.w	r4, r1, r7
 8000d40:	fa20 f50c 	lsr.w	r5, r0, ip
 8000d44:	fa21 f30c 	lsr.w	r3, r1, ip
 8000d48:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000d4c:	4325      	orrs	r5, r4
 8000d4e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000d52:	0c2c      	lsrs	r4, r5, #16
 8000d54:	fb08 3319 	mls	r3, r8, r9, r3
 8000d58:	fa1f fa8e 	uxth.w	sl, lr
 8000d5c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000d60:	fb09 f40a 	mul.w	r4, r9, sl
 8000d64:	429c      	cmp	r4, r3
 8000d66:	fa02 f207 	lsl.w	r2, r2, r7
 8000d6a:	fa00 f107 	lsl.w	r1, r0, r7
 8000d6e:	d90b      	bls.n	8000d88 <__udivmoddi4+0x1b0>
 8000d70:	eb1e 0303 	adds.w	r3, lr, r3
 8000d74:	f109 30ff 	add.w	r0, r9, #4294967295
 8000d78:	f080 8087 	bcs.w	8000e8a <__udivmoddi4+0x2b2>
 8000d7c:	429c      	cmp	r4, r3
 8000d7e:	f240 8084 	bls.w	8000e8a <__udivmoddi4+0x2b2>
 8000d82:	f1a9 0902 	sub.w	r9, r9, #2
 8000d86:	4473      	add	r3, lr
 8000d88:	1b1b      	subs	r3, r3, r4
 8000d8a:	b2ad      	uxth	r5, r5
 8000d8c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d90:	fb08 3310 	mls	r3, r8, r0, r3
 8000d94:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000d98:	fb00 fa0a 	mul.w	sl, r0, sl
 8000d9c:	45a2      	cmp	sl, r4
 8000d9e:	d908      	bls.n	8000db2 <__udivmoddi4+0x1da>
 8000da0:	eb1e 0404 	adds.w	r4, lr, r4
 8000da4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000da8:	d26b      	bcs.n	8000e82 <__udivmoddi4+0x2aa>
 8000daa:	45a2      	cmp	sl, r4
 8000dac:	d969      	bls.n	8000e82 <__udivmoddi4+0x2aa>
 8000dae:	3802      	subs	r0, #2
 8000db0:	4474      	add	r4, lr
 8000db2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000db6:	fba0 8902 	umull	r8, r9, r0, r2
 8000dba:	eba4 040a 	sub.w	r4, r4, sl
 8000dbe:	454c      	cmp	r4, r9
 8000dc0:	46c2      	mov	sl, r8
 8000dc2:	464b      	mov	r3, r9
 8000dc4:	d354      	bcc.n	8000e70 <__udivmoddi4+0x298>
 8000dc6:	d051      	beq.n	8000e6c <__udivmoddi4+0x294>
 8000dc8:	2e00      	cmp	r6, #0
 8000dca:	d069      	beq.n	8000ea0 <__udivmoddi4+0x2c8>
 8000dcc:	ebb1 050a 	subs.w	r5, r1, sl
 8000dd0:	eb64 0403 	sbc.w	r4, r4, r3
 8000dd4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000dd8:	40fd      	lsrs	r5, r7
 8000dda:	40fc      	lsrs	r4, r7
 8000ddc:	ea4c 0505 	orr.w	r5, ip, r5
 8000de0:	e9c6 5400 	strd	r5, r4, [r6]
 8000de4:	2700      	movs	r7, #0
 8000de6:	e747      	b.n	8000c78 <__udivmoddi4+0xa0>
 8000de8:	f1c2 0320 	rsb	r3, r2, #32
 8000dec:	fa20 f703 	lsr.w	r7, r0, r3
 8000df0:	4095      	lsls	r5, r2
 8000df2:	fa01 f002 	lsl.w	r0, r1, r2
 8000df6:	fa21 f303 	lsr.w	r3, r1, r3
 8000dfa:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000dfe:	4338      	orrs	r0, r7
 8000e00:	0c01      	lsrs	r1, r0, #16
 8000e02:	fbb3 f7fe 	udiv	r7, r3, lr
 8000e06:	fa1f f885 	uxth.w	r8, r5
 8000e0a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000e0e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e12:	fb07 f308 	mul.w	r3, r7, r8
 8000e16:	428b      	cmp	r3, r1
 8000e18:	fa04 f402 	lsl.w	r4, r4, r2
 8000e1c:	d907      	bls.n	8000e2e <__udivmoddi4+0x256>
 8000e1e:	1869      	adds	r1, r5, r1
 8000e20:	f107 3cff 	add.w	ip, r7, #4294967295
 8000e24:	d22f      	bcs.n	8000e86 <__udivmoddi4+0x2ae>
 8000e26:	428b      	cmp	r3, r1
 8000e28:	d92d      	bls.n	8000e86 <__udivmoddi4+0x2ae>
 8000e2a:	3f02      	subs	r7, #2
 8000e2c:	4429      	add	r1, r5
 8000e2e:	1acb      	subs	r3, r1, r3
 8000e30:	b281      	uxth	r1, r0
 8000e32:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e36:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e3a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e3e:	fb00 f308 	mul.w	r3, r0, r8
 8000e42:	428b      	cmp	r3, r1
 8000e44:	d907      	bls.n	8000e56 <__udivmoddi4+0x27e>
 8000e46:	1869      	adds	r1, r5, r1
 8000e48:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e4c:	d217      	bcs.n	8000e7e <__udivmoddi4+0x2a6>
 8000e4e:	428b      	cmp	r3, r1
 8000e50:	d915      	bls.n	8000e7e <__udivmoddi4+0x2a6>
 8000e52:	3802      	subs	r0, #2
 8000e54:	4429      	add	r1, r5
 8000e56:	1ac9      	subs	r1, r1, r3
 8000e58:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000e5c:	e73b      	b.n	8000cd6 <__udivmoddi4+0xfe>
 8000e5e:	4637      	mov	r7, r6
 8000e60:	4630      	mov	r0, r6
 8000e62:	e709      	b.n	8000c78 <__udivmoddi4+0xa0>
 8000e64:	4607      	mov	r7, r0
 8000e66:	e6e7      	b.n	8000c38 <__udivmoddi4+0x60>
 8000e68:	4618      	mov	r0, r3
 8000e6a:	e6fb      	b.n	8000c64 <__udivmoddi4+0x8c>
 8000e6c:	4541      	cmp	r1, r8
 8000e6e:	d2ab      	bcs.n	8000dc8 <__udivmoddi4+0x1f0>
 8000e70:	ebb8 0a02 	subs.w	sl, r8, r2
 8000e74:	eb69 020e 	sbc.w	r2, r9, lr
 8000e78:	3801      	subs	r0, #1
 8000e7a:	4613      	mov	r3, r2
 8000e7c:	e7a4      	b.n	8000dc8 <__udivmoddi4+0x1f0>
 8000e7e:	4660      	mov	r0, ip
 8000e80:	e7e9      	b.n	8000e56 <__udivmoddi4+0x27e>
 8000e82:	4618      	mov	r0, r3
 8000e84:	e795      	b.n	8000db2 <__udivmoddi4+0x1da>
 8000e86:	4667      	mov	r7, ip
 8000e88:	e7d1      	b.n	8000e2e <__udivmoddi4+0x256>
 8000e8a:	4681      	mov	r9, r0
 8000e8c:	e77c      	b.n	8000d88 <__udivmoddi4+0x1b0>
 8000e8e:	3802      	subs	r0, #2
 8000e90:	442c      	add	r4, r5
 8000e92:	e747      	b.n	8000d24 <__udivmoddi4+0x14c>
 8000e94:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e98:	442b      	add	r3, r5
 8000e9a:	e72f      	b.n	8000cfc <__udivmoddi4+0x124>
 8000e9c:	4638      	mov	r0, r7
 8000e9e:	e708      	b.n	8000cb2 <__udivmoddi4+0xda>
 8000ea0:	4637      	mov	r7, r6
 8000ea2:	e6e9      	b.n	8000c78 <__udivmoddi4+0xa0>

08000ea4 <__aeabi_idiv0>:
 8000ea4:	4770      	bx	lr
 8000ea6:	bf00      	nop

08000ea8 <LED_findPos>:
// *******************************************************************
// 					MANIPULATION OF THE LED MATRIX
// *******************************************************************


uint8_t LED_findPos(char letter, uint8_t number){
 8000ea8:	b480      	push	{r7}
 8000eaa:	b085      	sub	sp, #20
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	4603      	mov	r3, r0
 8000eb0:	460a      	mov	r2, r1
 8000eb2:	71fb      	strb	r3, [r7, #7]
 8000eb4:	4613      	mov	r3, r2
 8000eb6:	71bb      	strb	r3, [r7, #6]

	uint8_t position;


	switch(letter){
 8000eb8:	79fb      	ldrb	r3, [r7, #7]
 8000eba:	3b41      	subs	r3, #65	; 0x41
 8000ebc:	2b0a      	cmp	r3, #10
 8000ebe:	d84f      	bhi.n	8000f60 <LED_findPos+0xb8>
 8000ec0:	a201      	add	r2, pc, #4	; (adr r2, 8000ec8 <LED_findPos+0x20>)
 8000ec2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ec6:	bf00      	nop
 8000ec8:	08000ef5 	.word	0x08000ef5
 8000ecc:	08000efb 	.word	0x08000efb
 8000ed0:	08000f05 	.word	0x08000f05
 8000ed4:	08000f0d 	.word	0x08000f0d
 8000ed8:	08000f17 	.word	0x08000f17
 8000edc:	08000f1f 	.word	0x08000f1f
 8000ee0:	08000f29 	.word	0x08000f29
 8000ee4:	08000f31 	.word	0x08000f31
 8000ee8:	08000f41 	.word	0x08000f41
 8000eec:	08000f49 	.word	0x08000f49
 8000ef0:	08000f59 	.word	0x08000f59
	case('A'):
		position = number;
 8000ef4:	79bb      	ldrb	r3, [r7, #6]
 8000ef6:	73fb      	strb	r3, [r7, #15]
		break;
 8000ef8:	e032      	b.n	8000f60 <LED_findPos+0xb8>
	case('B'):
		position = (18*2)+1 -number;
 8000efa:	79bb      	ldrb	r3, [r7, #6]
 8000efc:	f1c3 0325 	rsb	r3, r3, #37	; 0x25
 8000f00:	73fb      	strb	r3, [r7, #15]
		break;
 8000f02:	e02d      	b.n	8000f60 <LED_findPos+0xb8>
	case('C'):
		position = (18*2)+number;
 8000f04:	79bb      	ldrb	r3, [r7, #6]
 8000f06:	3324      	adds	r3, #36	; 0x24
 8000f08:	73fb      	strb	r3, [r7, #15]
		break;
 8000f0a:	e029      	b.n	8000f60 <LED_findPos+0xb8>
	case('D'):
		position = (18*4)+1 -number;
 8000f0c:	79bb      	ldrb	r3, [r7, #6]
 8000f0e:	f1c3 0349 	rsb	r3, r3, #73	; 0x49
 8000f12:	73fb      	strb	r3, [r7, #15]
		break;
 8000f14:	e024      	b.n	8000f60 <LED_findPos+0xb8>
	case('E'):
		position = (18*4)+number;
 8000f16:	79bb      	ldrb	r3, [r7, #6]
 8000f18:	3348      	adds	r3, #72	; 0x48
 8000f1a:	73fb      	strb	r3, [r7, #15]
		break;
 8000f1c:	e020      	b.n	8000f60 <LED_findPos+0xb8>
	case('F'):
		position = (18*6)+1 -number;
 8000f1e:	79bb      	ldrb	r3, [r7, #6]
 8000f20:	f1c3 036d 	rsb	r3, r3, #109	; 0x6d
 8000f24:	73fb      	strb	r3, [r7, #15]
		break;
 8000f26:	e01b      	b.n	8000f60 <LED_findPos+0xb8>
	case('G'):
		position = (18*6)+number;
 8000f28:	79bb      	ldrb	r3, [r7, #6]
 8000f2a:	336c      	adds	r3, #108	; 0x6c
 8000f2c:	73fb      	strb	r3, [r7, #15]
		break;
 8000f2e:	e017      	b.n	8000f60 <LED_findPos+0xb8>
	case('H'):
		position = (18*8)+1 -number;
 8000f30:	79bb      	ldrb	r3, [r7, #6]
 8000f32:	f1c3 23ff 	rsb	r3, r3, #4278255360	; 0xff00ff00
 8000f36:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 8000f3a:	3391      	adds	r3, #145	; 0x91
 8000f3c:	73fb      	strb	r3, [r7, #15]
		break;
 8000f3e:	e00f      	b.n	8000f60 <LED_findPos+0xb8>
	case('I'):
		position = (18*8)+number;
 8000f40:	79bb      	ldrb	r3, [r7, #6]
 8000f42:	3b70      	subs	r3, #112	; 0x70
 8000f44:	73fb      	strb	r3, [r7, #15]
		break;
 8000f46:	e00b      	b.n	8000f60 <LED_findPos+0xb8>
	case('J'):
		position = (18*10)+1 -number;
 8000f48:	79bb      	ldrb	r3, [r7, #6]
 8000f4a:	f1c3 23ff 	rsb	r3, r3, #4278255360	; 0xff00ff00
 8000f4e:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 8000f52:	33b5      	adds	r3, #181	; 0xb5
 8000f54:	73fb      	strb	r3, [r7, #15]
		break;
 8000f56:	e003      	b.n	8000f60 <LED_findPos+0xb8>
	case('K'):
		position = (18*10)+number;
 8000f58:	79bb      	ldrb	r3, [r7, #6]
 8000f5a:	3b4c      	subs	r3, #76	; 0x4c
 8000f5c:	73fb      	strb	r3, [r7, #15]
		break;
 8000f5e:	bf00      	nop

	}

	return position;
 8000f60:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f62:	4618      	mov	r0, r3
 8000f64:	3714      	adds	r7, #20
 8000f66:	46bd      	mov	sp, r7
 8000f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6c:	4770      	bx	lr
 8000f6e:	bf00      	nop

08000f70 <problem_genArray>:


void problem_genArray(struct Problem *p, uint32_t id){
 8000f70:	b5b0      	push	{r4, r5, r7, lr}
 8000f72:	b08c      	sub	sp, #48	; 0x30
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
 8000f78:	6039      	str	r1, [r7, #0]
 8000f7a:	466b      	mov	r3, sp
 8000f7c:	461d      	mov	r5, r3

	uint16_t LedPos = 0;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	857b      	strh	r3, [r7, #42]	; 0x2a

	// put to 0 all the colors for each LED
	LED_setAllBlack();
 8000f82:	f000 f8fb 	bl	800117c <LED_setAllBlack>

	// create 3 arrays that contain letters and numbers and type
	char lettArr[p->moveSize];
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	6818      	ldr	r0, [r3, #0]
 8000f8a:	1e43      	subs	r3, r0, #1
 8000f8c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000f8e:	4603      	mov	r3, r0
 8000f90:	4619      	mov	r1, r3
 8000f92:	f04f 0200 	mov.w	r2, #0
 8000f96:	f04f 0300 	mov.w	r3, #0
 8000f9a:	f04f 0400 	mov.w	r4, #0
 8000f9e:	00d4      	lsls	r4, r2, #3
 8000fa0:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8000fa4:	00cb      	lsls	r3, r1, #3
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	4619      	mov	r1, r3
 8000faa:	f04f 0200 	mov.w	r2, #0
 8000fae:	f04f 0300 	mov.w	r3, #0
 8000fb2:	f04f 0400 	mov.w	r4, #0
 8000fb6:	00d4      	lsls	r4, r2, #3
 8000fb8:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8000fbc:	00cb      	lsls	r3, r1, #3
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	3307      	adds	r3, #7
 8000fc2:	08db      	lsrs	r3, r3, #3
 8000fc4:	00db      	lsls	r3, r3, #3
 8000fc6:	ebad 0d03 	sub.w	sp, sp, r3
 8000fca:	466b      	mov	r3, sp
 8000fcc:	3300      	adds	r3, #0
 8000fce:	61fb      	str	r3, [r7, #28]
	uint8_t numArr[p->moveSize];
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	6818      	ldr	r0, [r3, #0]
 8000fd4:	1e43      	subs	r3, r0, #1
 8000fd6:	61bb      	str	r3, [r7, #24]
 8000fd8:	4603      	mov	r3, r0
 8000fda:	4619      	mov	r1, r3
 8000fdc:	f04f 0200 	mov.w	r2, #0
 8000fe0:	f04f 0300 	mov.w	r3, #0
 8000fe4:	f04f 0400 	mov.w	r4, #0
 8000fe8:	00d4      	lsls	r4, r2, #3
 8000fea:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8000fee:	00cb      	lsls	r3, r1, #3
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	4619      	mov	r1, r3
 8000ff4:	f04f 0200 	mov.w	r2, #0
 8000ff8:	f04f 0300 	mov.w	r3, #0
 8000ffc:	f04f 0400 	mov.w	r4, #0
 8001000:	00d4      	lsls	r4, r2, #3
 8001002:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8001006:	00cb      	lsls	r3, r1, #3
 8001008:	4603      	mov	r3, r0
 800100a:	3307      	adds	r3, #7
 800100c:	08db      	lsrs	r3, r3, #3
 800100e:	00db      	lsls	r3, r3, #3
 8001010:	ebad 0d03 	sub.w	sp, sp, r3
 8001014:	466b      	mov	r3, sp
 8001016:	3300      	adds	r3, #0
 8001018:	617b      	str	r3, [r7, #20]
	uint8_t typeArr[p->moveSize];
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	6818      	ldr	r0, [r3, #0]
 800101e:	1e43      	subs	r3, r0, #1
 8001020:	613b      	str	r3, [r7, #16]
 8001022:	4603      	mov	r3, r0
 8001024:	4619      	mov	r1, r3
 8001026:	f04f 0200 	mov.w	r2, #0
 800102a:	f04f 0300 	mov.w	r3, #0
 800102e:	f04f 0400 	mov.w	r4, #0
 8001032:	00d4      	lsls	r4, r2, #3
 8001034:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8001038:	00cb      	lsls	r3, r1, #3
 800103a:	4603      	mov	r3, r0
 800103c:	4619      	mov	r1, r3
 800103e:	f04f 0200 	mov.w	r2, #0
 8001042:	f04f 0300 	mov.w	r3, #0
 8001046:	f04f 0400 	mov.w	r4, #0
 800104a:	00d4      	lsls	r4, r2, #3
 800104c:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8001050:	00cb      	lsls	r3, r1, #3
 8001052:	4603      	mov	r3, r0
 8001054:	3307      	adds	r3, #7
 8001056:	08db      	lsrs	r3, r3, #3
 8001058:	00db      	lsls	r3, r3, #3
 800105a:	ebad 0d03 	sub.w	sp, sp, r3
 800105e:	466b      	mov	r3, sp
 8001060:	3300      	adds	r3, #0
 8001062:	60fb      	str	r3, [r7, #12]

	for(int j=0; j<p->moveSize; j++){
 8001064:	2300      	movs	r3, #0
 8001066:	623b      	str	r3, [r7, #32]
 8001068:	e01a      	b.n	80010a0 <problem_genArray+0x130>
		lettArr[j] = p->moveLetters[j*2];
 800106a:	6a3b      	ldr	r3, [r7, #32]
 800106c:	005a      	lsls	r2, r3, #1
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	3210      	adds	r2, #16
 8001072:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001076:	b2d9      	uxtb	r1, r3
 8001078:	69fa      	ldr	r2, [r7, #28]
 800107a:	6a3b      	ldr	r3, [r7, #32]
 800107c:	4413      	add	r3, r2
 800107e:	460a      	mov	r2, r1
 8001080:	701a      	strb	r2, [r3, #0]
		typeArr[j] = p->startFinish[j*2];
 8001082:	6a3b      	ldr	r3, [r7, #32]
 8001084:	005a      	lsls	r2, r3, #1
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	3236      	adds	r2, #54	; 0x36
 800108a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800108e:	b2d9      	uxtb	r1, r3
 8001090:	68fa      	ldr	r2, [r7, #12]
 8001092:	6a3b      	ldr	r3, [r7, #32]
 8001094:	4413      	add	r3, r2
 8001096:	460a      	mov	r2, r1
 8001098:	701a      	strb	r2, [r3, #0]
	for(int j=0; j<p->moveSize; j++){
 800109a:	6a3b      	ldr	r3, [r7, #32]
 800109c:	3301      	adds	r3, #1
 800109e:	623b      	str	r3, [r7, #32]
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	6a3a      	ldr	r2, [r7, #32]
 80010a6:	429a      	cmp	r2, r3
 80010a8:	dbdf      	blt.n	800106a <problem_genArray+0xfa>
			//numArr[i]
	//	}
	}

	// for each move define the color of the corresponding LED
	for(int i=0; i<p->moveSize; i++){
 80010aa:	2300      	movs	r3, #0
 80010ac:	627b      	str	r3, [r7, #36]	; 0x24
 80010ae:	e059      	b.n	8001164 <problem_genArray+0x1f4>

		// transform letter and number in the led position
		LedPos = LED_findPos(lettArr[i], numArr[i]);
 80010b0:	69fa      	ldr	r2, [r7, #28]
 80010b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010b4:	4413      	add	r3, r2
 80010b6:	7818      	ldrb	r0, [r3, #0]
 80010b8:	697a      	ldr	r2, [r7, #20]
 80010ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010bc:	4413      	add	r3, r2
 80010be:	781b      	ldrb	r3, [r3, #0]
 80010c0:	4619      	mov	r1, r3
 80010c2:	f7ff fef1 	bl	8000ea8 <LED_findPos>
 80010c6:	4603      	mov	r3, r0
 80010c8:	857b      	strh	r3, [r7, #42]	; 0x2a

		// light the led depending if it's start, top or else
		if(typeArr[i]=='s'){			// START, color green
 80010ca:	68fa      	ldr	r2, [r7, #12]
 80010cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010ce:	4413      	add	r3, r2
 80010d0:	781b      	ldrb	r3, [r3, #0]
 80010d2:	2b73      	cmp	r3, #115	; 0x73
 80010d4:	d112      	bne.n	80010fc <problem_genArray+0x18c>
			LED_Data[LedPos][1] = 0;
 80010d6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80010d8:	4a27      	ldr	r2, [pc, #156]	; (8001178 <problem_genArray+0x208>)
 80010da:	009b      	lsls	r3, r3, #2
 80010dc:	4413      	add	r3, r2
 80010de:	2200      	movs	r2, #0
 80010e0:	705a      	strb	r2, [r3, #1]
			LED_Data[LedPos][2] = 0;
 80010e2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80010e4:	4a24      	ldr	r2, [pc, #144]	; (8001178 <problem_genArray+0x208>)
 80010e6:	009b      	lsls	r3, r3, #2
 80010e8:	4413      	add	r3, r2
 80010ea:	2200      	movs	r2, #0
 80010ec:	709a      	strb	r2, [r3, #2]
			LED_Data[LedPos][3] = 255;
 80010ee:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80010f0:	4a21      	ldr	r2, [pc, #132]	; (8001178 <problem_genArray+0x208>)
 80010f2:	009b      	lsls	r3, r3, #2
 80010f4:	4413      	add	r3, r2
 80010f6:	22ff      	movs	r2, #255	; 0xff
 80010f8:	70da      	strb	r2, [r3, #3]
 80010fa:	e030      	b.n	800115e <problem_genArray+0x1ee>
		}else if(typeArr[i]=='e'){		// TOP, color red
 80010fc:	68fa      	ldr	r2, [r7, #12]
 80010fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001100:	4413      	add	r3, r2
 8001102:	781b      	ldrb	r3, [r3, #0]
 8001104:	2b65      	cmp	r3, #101	; 0x65
 8001106:	d112      	bne.n	800112e <problem_genArray+0x1be>
			LED_Data[LedPos][1] = 255;
 8001108:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800110a:	4a1b      	ldr	r2, [pc, #108]	; (8001178 <problem_genArray+0x208>)
 800110c:	009b      	lsls	r3, r3, #2
 800110e:	4413      	add	r3, r2
 8001110:	22ff      	movs	r2, #255	; 0xff
 8001112:	705a      	strb	r2, [r3, #1]
			LED_Data[LedPos][2] = 0;
 8001114:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001116:	4a18      	ldr	r2, [pc, #96]	; (8001178 <problem_genArray+0x208>)
 8001118:	009b      	lsls	r3, r3, #2
 800111a:	4413      	add	r3, r2
 800111c:	2200      	movs	r2, #0
 800111e:	709a      	strb	r2, [r3, #2]
			LED_Data[LedPos][3] = 0;
 8001120:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001122:	4a15      	ldr	r2, [pc, #84]	; (8001178 <problem_genArray+0x208>)
 8001124:	009b      	lsls	r3, r3, #2
 8001126:	4413      	add	r3, r2
 8001128:	2200      	movs	r2, #0
 800112a:	70da      	strb	r2, [r3, #3]
 800112c:	e017      	b.n	800115e <problem_genArray+0x1ee>
		}else if(typeArr[i]=='d'){		// DEFAULT, color white
 800112e:	68fa      	ldr	r2, [r7, #12]
 8001130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001132:	4413      	add	r3, r2
 8001134:	781b      	ldrb	r3, [r3, #0]
 8001136:	2b64      	cmp	r3, #100	; 0x64
 8001138:	d111      	bne.n	800115e <problem_genArray+0x1ee>
			LED_Data[LedPos][1] = 255;
 800113a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800113c:	4a0e      	ldr	r2, [pc, #56]	; (8001178 <problem_genArray+0x208>)
 800113e:	009b      	lsls	r3, r3, #2
 8001140:	4413      	add	r3, r2
 8001142:	22ff      	movs	r2, #255	; 0xff
 8001144:	705a      	strb	r2, [r3, #1]
			LED_Data[LedPos][2] = 255;
 8001146:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001148:	4a0b      	ldr	r2, [pc, #44]	; (8001178 <problem_genArray+0x208>)
 800114a:	009b      	lsls	r3, r3, #2
 800114c:	4413      	add	r3, r2
 800114e:	22ff      	movs	r2, #255	; 0xff
 8001150:	709a      	strb	r2, [r3, #2]
			LED_Data[LedPos][3] = 255;
 8001152:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001154:	4a08      	ldr	r2, [pc, #32]	; (8001178 <problem_genArray+0x208>)
 8001156:	009b      	lsls	r3, r3, #2
 8001158:	4413      	add	r3, r2
 800115a:	22ff      	movs	r2, #255	; 0xff
 800115c:	70da      	strb	r2, [r3, #3]
	for(int i=0; i<p->moveSize; i++){
 800115e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001160:	3301      	adds	r3, #1
 8001162:	627b      	str	r3, [r7, #36]	; 0x24
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800116a:	429a      	cmp	r2, r3
 800116c:	dba0      	blt.n	80010b0 <problem_genArray+0x140>
 800116e:	46ad      	mov	sp, r5
		}

	}

}
 8001170:	bf00      	nop
 8001172:	3730      	adds	r7, #48	; 0x30
 8001174:	46bd      	mov	sp, r7
 8001176:	bdb0      	pop	{r4, r5, r7, pc}
 8001178:	200000a8 	.word	0x200000a8

0800117c <LED_setAllBlack>:



void LED_setAllBlack(){
 800117c:	b480      	push	{r7}
 800117e:	b083      	sub	sp, #12
 8001180:	af00      	add	r7, sp, #0

	for(int i=0; i<MAX_LED; i++){
 8001182:	2300      	movs	r3, #0
 8001184:	607b      	str	r3, [r7, #4]
 8001186:	e014      	b.n	80011b2 <LED_setAllBlack+0x36>
		LED_Data[i][1]=0;
 8001188:	4a0e      	ldr	r2, [pc, #56]	; (80011c4 <LED_setAllBlack+0x48>)
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	009b      	lsls	r3, r3, #2
 800118e:	4413      	add	r3, r2
 8001190:	2200      	movs	r2, #0
 8001192:	705a      	strb	r2, [r3, #1]
		LED_Data[i][2]=0;
 8001194:	4a0b      	ldr	r2, [pc, #44]	; (80011c4 <LED_setAllBlack+0x48>)
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	009b      	lsls	r3, r3, #2
 800119a:	4413      	add	r3, r2
 800119c:	2200      	movs	r2, #0
 800119e:	709a      	strb	r2, [r3, #2]
		LED_Data[i][3]=0;
 80011a0:	4a08      	ldr	r2, [pc, #32]	; (80011c4 <LED_setAllBlack+0x48>)
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	009b      	lsls	r3, r3, #2
 80011a6:	4413      	add	r3, r2
 80011a8:	2200      	movs	r2, #0
 80011aa:	70da      	strb	r2, [r3, #3]
	for(int i=0; i<MAX_LED; i++){
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	3301      	adds	r3, #1
 80011b0:	607b      	str	r3, [r7, #4]
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	2bc5      	cmp	r3, #197	; 0xc5
 80011b6:	dde7      	ble.n	8001188 <LED_setAllBlack+0xc>
	}

}
 80011b8:	bf00      	nop
 80011ba:	370c      	adds	r7, #12
 80011bc:	46bd      	mov	sp, r7
 80011be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c2:	4770      	bx	lr
 80011c4:	200000a8 	.word	0x200000a8

080011c8 <LED_setColor>:
// *******************************************************************



// sets the color of one specific LED
void LED_setColor(int LEDnum, int red, int green, int blue){
 80011c8:	b480      	push	{r7}
 80011ca:	b085      	sub	sp, #20
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	60f8      	str	r0, [r7, #12]
 80011d0:	60b9      	str	r1, [r7, #8]
 80011d2:	607a      	str	r2, [r7, #4]
 80011d4:	603b      	str	r3, [r7, #0]
	LED_Data[LEDnum][0] = LEDnum;
 80011d6:	68fb      	ldr	r3, [r7, #12]
 80011d8:	b2d9      	uxtb	r1, r3
 80011da:	4a11      	ldr	r2, [pc, #68]	; (8001220 <LED_setColor+0x58>)
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
	LED_Data[LEDnum][1] = red;
 80011e2:	68bb      	ldr	r3, [r7, #8]
 80011e4:	b2d9      	uxtb	r1, r3
 80011e6:	4a0e      	ldr	r2, [pc, #56]	; (8001220 <LED_setColor+0x58>)
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	009b      	lsls	r3, r3, #2
 80011ec:	4413      	add	r3, r2
 80011ee:	460a      	mov	r2, r1
 80011f0:	705a      	strb	r2, [r3, #1]
	LED_Data[LEDnum][2] = green;
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	b2d9      	uxtb	r1, r3
 80011f6:	4a0a      	ldr	r2, [pc, #40]	; (8001220 <LED_setColor+0x58>)
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	009b      	lsls	r3, r3, #2
 80011fc:	4413      	add	r3, r2
 80011fe:	460a      	mov	r2, r1
 8001200:	709a      	strb	r2, [r3, #2]
	LED_Data[LEDnum][3] = blue;
 8001202:	683b      	ldr	r3, [r7, #0]
 8001204:	b2d9      	uxtb	r1, r3
 8001206:	4a06      	ldr	r2, [pc, #24]	; (8001220 <LED_setColor+0x58>)
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	009b      	lsls	r3, r3, #2
 800120c:	4413      	add	r3, r2
 800120e:	460a      	mov	r2, r1
 8001210:	70da      	strb	r2, [r3, #3]
}
 8001212:	bf00      	nop
 8001214:	3714      	adds	r7, #20
 8001216:	46bd      	mov	sp, r7
 8001218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121c:	4770      	bx	lr
 800121e:	bf00      	nop
 8001220:	200000a8 	.word	0x200000a8

08001224 <WS2811_Send>:





void WS2811_Send(void){
 8001224:	b580      	push	{r7, lr}
 8001226:	b086      	sub	sp, #24
 8001228:	af00      	add	r7, sp, #0

	uint16_t indx = 0;
 800122a:	2300      	movs	r3, #0
 800122c:	82fb      	strh	r3, [r7, #22]
	uint32_t color;

	// wait 50 PWM pulses as a RESET before lighting all LED
	for(int i=0; i<40; i++){
 800122e:	2300      	movs	r3, #0
 8001230:	613b      	str	r3, [r7, #16]
 8001232:	e00a      	b.n	800124a <WS2811_Send+0x26>
		pwmData[indx] = 0;
 8001234:	8afb      	ldrh	r3, [r7, #22]
 8001236:	4a36      	ldr	r2, [pc, #216]	; (8001310 <WS2811_Send+0xec>)
 8001238:	2100      	movs	r1, #0
 800123a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		indx++;
 800123e:	8afb      	ldrh	r3, [r7, #22]
 8001240:	3301      	adds	r3, #1
 8001242:	82fb      	strh	r3, [r7, #22]
	for(int i=0; i<40; i++){
 8001244:	693b      	ldr	r3, [r7, #16]
 8001246:	3301      	adds	r3, #1
 8001248:	613b      	str	r3, [r7, #16]
 800124a:	693b      	ldr	r3, [r7, #16]
 800124c:	2b27      	cmp	r3, #39	; 0x27
 800124e:	ddf1      	ble.n	8001234 <WS2811_Send+0x10>
	}

	// read from the color matrix each RGB color for each LED
	for(int i=0; i<MAX_LED; i++){
 8001250:	2300      	movs	r3, #0
 8001252:	60fb      	str	r3, [r7, #12]
 8001254:	e036      	b.n	80012c4 <WS2811_Send+0xa0>
		color = ((LED_Data[i][1]<<16) | (LED_Data[i][2]<<8) | LED_Data[i][3]);
 8001256:	4a2f      	ldr	r2, [pc, #188]	; (8001314 <WS2811_Send+0xf0>)
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	009b      	lsls	r3, r3, #2
 800125c:	4413      	add	r3, r2
 800125e:	785b      	ldrb	r3, [r3, #1]
 8001260:	041a      	lsls	r2, r3, #16
 8001262:	492c      	ldr	r1, [pc, #176]	; (8001314 <WS2811_Send+0xf0>)
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	009b      	lsls	r3, r3, #2
 8001268:	440b      	add	r3, r1
 800126a:	789b      	ldrb	r3, [r3, #2]
 800126c:	021b      	lsls	r3, r3, #8
 800126e:	431a      	orrs	r2, r3
 8001270:	4928      	ldr	r1, [pc, #160]	; (8001314 <WS2811_Send+0xf0>)
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	009b      	lsls	r3, r3, #2
 8001276:	440b      	add	r3, r1
 8001278:	78db      	ldrb	r3, [r3, #3]
 800127a:	4313      	orrs	r3, r2
 800127c:	603b      	str	r3, [r7, #0]

		// check each bit of the color number and create corresponfing PWM
		for(int i=23; i>=0; i--){
 800127e:	2317      	movs	r3, #23
 8001280:	60bb      	str	r3, [r7, #8]
 8001282:	e019      	b.n	80012b8 <WS2811_Send+0x94>
			if(color & (1<<i)){
 8001284:	2201      	movs	r2, #1
 8001286:	68bb      	ldr	r3, [r7, #8]
 8001288:	fa02 f303 	lsl.w	r3, r2, r3
 800128c:	461a      	mov	r2, r3
 800128e:	683b      	ldr	r3, [r7, #0]
 8001290:	4013      	ands	r3, r2
 8001292:	2b00      	cmp	r3, #0
 8001294:	d005      	beq.n	80012a2 <WS2811_Send+0x7e>
				pwmData[indx]=43;
 8001296:	8afb      	ldrh	r3, [r7, #22]
 8001298:	4a1d      	ldr	r2, [pc, #116]	; (8001310 <WS2811_Send+0xec>)
 800129a:	212b      	movs	r1, #43	; 0x2b
 800129c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 80012a0:	e004      	b.n	80012ac <WS2811_Send+0x88>
			}else{
				pwmData[indx]=18;
 80012a2:	8afb      	ldrh	r3, [r7, #22]
 80012a4:	4a1a      	ldr	r2, [pc, #104]	; (8001310 <WS2811_Send+0xec>)
 80012a6:	2112      	movs	r1, #18
 80012a8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			}
			indx++;
 80012ac:	8afb      	ldrh	r3, [r7, #22]
 80012ae:	3301      	adds	r3, #1
 80012b0:	82fb      	strh	r3, [r7, #22]
		for(int i=23; i>=0; i--){
 80012b2:	68bb      	ldr	r3, [r7, #8]
 80012b4:	3b01      	subs	r3, #1
 80012b6:	60bb      	str	r3, [r7, #8]
 80012b8:	68bb      	ldr	r3, [r7, #8]
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	dae2      	bge.n	8001284 <WS2811_Send+0x60>
	for(int i=0; i<MAX_LED; i++){
 80012be:	68fb      	ldr	r3, [r7, #12]
 80012c0:	3301      	adds	r3, #1
 80012c2:	60fb      	str	r3, [r7, #12]
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	2bc5      	cmp	r3, #197	; 0xc5
 80012c8:	ddc5      	ble.n	8001256 <WS2811_Send+0x32>
		}
	}

	// wait 50 PWM pulses as a RESET after lighting all LED
	for(int i=0; i<40; i++){
 80012ca:	2300      	movs	r3, #0
 80012cc:	607b      	str	r3, [r7, #4]
 80012ce:	e00a      	b.n	80012e6 <WS2811_Send+0xc2>
		pwmData[indx] = 0;
 80012d0:	8afb      	ldrh	r3, [r7, #22]
 80012d2:	4a0f      	ldr	r2, [pc, #60]	; (8001310 <WS2811_Send+0xec>)
 80012d4:	2100      	movs	r1, #0
 80012d6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		indx++;
 80012da:	8afb      	ldrh	r3, [r7, #22]
 80012dc:	3301      	adds	r3, #1
 80012de:	82fb      	strh	r3, [r7, #22]
	for(int i=0; i<40; i++){
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	3301      	adds	r3, #1
 80012e4:	607b      	str	r3, [r7, #4]
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	2b27      	cmp	r3, #39	; 0x27
 80012ea:	ddf1      	ble.n	80012d0 <WS2811_Send+0xac>
	}

	// start the transmission of the data just created
	HAL_TIM_PWM_Start_DMA(&htim2, TIM_CHANNEL_1, (uint32_t *)pwmData, indx);
 80012ec:	8afb      	ldrh	r3, [r7, #22]
 80012ee:	4a08      	ldr	r2, [pc, #32]	; (8001310 <WS2811_Send+0xec>)
 80012f0:	2100      	movs	r1, #0
 80012f2:	4809      	ldr	r0, [pc, #36]	; (8001318 <WS2811_Send+0xf4>)
 80012f4:	f01c ff0e 	bl	801e114 <HAL_TIM_PWM_Start_DMA>


	while(!datasentflag){};
 80012f8:	bf00      	nop
 80012fa:	4b08      	ldr	r3, [pc, #32]	; (800131c <WS2811_Send+0xf8>)
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d0fb      	beq.n	80012fa <WS2811_Send+0xd6>
	datasentflag=0;
 8001302:	4b06      	ldr	r3, [pc, #24]	; (800131c <WS2811_Send+0xf8>)
 8001304:	2200      	movs	r2, #0
 8001306:	601a      	str	r2, [r3, #0]

}
 8001308:	bf00      	nop
 800130a:	3718      	adds	r7, #24
 800130c:	46bd      	mov	sp, r7
 800130e:	bd80      	pop	{r7, pc}
 8001310:	200003c0 	.word	0x200003c0
 8001314:	200000a8 	.word	0x200000a8
 8001318:	20004ff4 	.word	0x20004ff4
 800131c:	20000090 	.word	0x20000090

08001320 <problem_fetch>:
            break;
        default : break;
    }
}
*/
void problem_fetch(struct Problem* p, int id){
 8001320:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001322:	b083      	sub	sp, #12
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
 8001328:	6039      	str	r1, [r7, #0]
	switch(id){
 800132a:	683b      	ldr	r3, [r7, #0]
 800132c:	f240 3226 	movw	r2, #806	; 0x326
 8001330:	4293      	cmp	r3, r2
 8001332:	f219 853a 	bhi.w	801adaa <problem_fetch+0x19a8a>
 8001336:	a101      	add	r1, pc, #4	; (adr r1, 800133c <problem_fetch+0x1c>)
 8001338:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800133c:	08001fd9 	.word	0x08001fd9
 8001340:	08002055 	.word	0x08002055
 8001344:	08005671 	.word	0x08005671
 8001348:	08008d7b 	.word	0x08008d7b
 800134c:	0800c501 	.word	0x0800c501
 8001350:	0800faed 	.word	0x0800faed
 8001354:	080131df 	.word	0x080131df
 8001358:	080168a1 	.word	0x080168a1
 800135c:	08019fd1 	.word	0x08019fd1
 8001360:	0801a85d 	.word	0x0801a85d
 8001364:	080020c5 	.word	0x080020c5
 8001368:	080025c3 	.word	0x080025c3
 800136c:	08002b55 	.word	0x08002b55
 8001370:	080030d9 	.word	0x080030d9
 8001374:	080035fb 	.word	0x080035fb
 8001378:	08003b8f 	.word	0x08003b8f
 800137c:	08004149 	.word	0x08004149
 8001380:	08004657 	.word	0x08004657
 8001384:	08004be3 	.word	0x08004be3
 8001388:	080050fd 	.word	0x080050fd
 800138c:	080056e1 	.word	0x080056e1
 8001390:	08005c7d 	.word	0x08005c7d
 8001394:	0800619d 	.word	0x0800619d
 8001398:	0800671b 	.word	0x0800671b
 800139c:	08006c35 	.word	0x08006c35
 80013a0:	080071e9 	.word	0x080071e9
 80013a4:	080077a5 	.word	0x080077a5
 80013a8:	08007ced 	.word	0x08007ced
 80013ac:	080082f7 	.word	0x080082f7
 80013b0:	08008885 	.word	0x08008885
 80013b4:	08008def 	.word	0x08008def
 80013b8:	080093bd 	.word	0x080093bd
 80013bc:	08009971 	.word	0x08009971
 80013c0:	08009e87 	.word	0x08009e87
 80013c4:	0800a435 	.word	0x0800a435
 80013c8:	0800a9ff 	.word	0x0800a9ff
 80013cc:	0800af2f 	.word	0x0800af2f
 80013d0:	0800b4d1 	.word	0x0800b4d1
 80013d4:	0800b9dd 	.word	0x0800b9dd
 80013d8:	0800bf69 	.word	0x0800bf69
 80013dc:	0800c565 	.word	0x0800c565
 80013e0:	0800ca89 	.word	0x0800ca89
 80013e4:	0800d003 	.word	0x0800d003
 80013e8:	0800d57d 	.word	0x0800d57d
 80013ec:	0800da83 	.word	0x0800da83
 80013f0:	0800e017 	.word	0x0800e017
 80013f4:	0800e52f 	.word	0x0800e52f
 80013f8:	0800ead3 	.word	0x0800ead3
 80013fc:	0800eff9 	.word	0x0800eff9
 8001400:	0800f57f 	.word	0x0800f57f
 8001404:	0800fb61 	.word	0x0800fb61
 8001408:	0801003f 	.word	0x0801003f
 800140c:	080105df 	.word	0x080105df
 8001410:	08010b8d 	.word	0x08010b8d
 8001414:	080110b1 	.word	0x080110b1
 8001418:	08011657 	.word	0x08011657
 800141c:	08011b59 	.word	0x08011b59
 8001420:	08012121 	.word	0x08012121
 8001424:	080126cd 	.word	0x080126cd
 8001428:	08012c75 	.word	0x08012c75
 800142c:	08013253 	.word	0x08013253
 8001430:	080137b7 	.word	0x080137b7
 8001434:	08013d45 	.word	0x08013d45
 8001438:	0801423d 	.word	0x0801423d
 800143c:	0801480f 	.word	0x0801480f
 8001440:	08014d2b 	.word	0x08014d2b
 8001444:	080152e3 	.word	0x080152e3
 8001448:	0801586d 	.word	0x0801586d
 800144c:	08015d85 	.word	0x08015d85
 8001450:	08016359 	.word	0x08016359
 8001454:	08016985 	.word	0x08016985
 8001458:	08016e9f 	.word	0x08016e9f
 800145c:	08017441 	.word	0x08017441
 8001460:	08017981 	.word	0x08017981
 8001464:	08017f05 	.word	0x08017f05
 8001468:	080184ad 	.word	0x080184ad
 800146c:	080189b5 	.word	0x080189b5
 8001470:	08018f83 	.word	0x08018f83
 8001474:	080194bf 	.word	0x080194bf
 8001478:	08019a3d 	.word	0x08019a3d
 800147c:	0801a047 	.word	0x0801a047
 8001480:	0801a41f 	.word	0x0801a41f
 8001484:	0801a489 	.word	0x0801a489
 8001488:	0801a4f9 	.word	0x0801a4f9
 800148c:	0801a55d 	.word	0x0801a55d
 8001490:	0801a639 	.word	0x0801a639
 8001494:	0801a6a7 	.word	0x0801a6a7
 8001498:	0801a70d 	.word	0x0801a70d
 800149c:	0801a77f 	.word	0x0801a77f
 80014a0:	0801a7ed 	.word	0x0801a7ed
 80014a4:	0801a8bd 	.word	0x0801a8bd
 80014a8:	0801a9a5 	.word	0x0801a9a5
 80014ac:	0801aa0f 	.word	0x0801aa0f
 80014b0:	0801aa77 	.word	0x0801aa77
 80014b4:	0801aae5 	.word	0x0801aae5
 80014b8:	0801ab4d 	.word	0x0801ab4d
 80014bc:	0801abad 	.word	0x0801abad
 80014c0:	0801ac09 	.word	0x0801ac09
 80014c4:	0801ace5 	.word	0x0801ace5
 80014c8:	0801ad43 	.word	0x0801ad43
 80014cc:	0800212d 	.word	0x0800212d
 80014d0:	08002197 	.word	0x08002197
 80014d4:	080021f5 	.word	0x080021f5
 80014d8:	0800225f 	.word	0x0800225f
 80014dc:	08002355 	.word	0x08002355
 80014e0:	080023bf 	.word	0x080023bf
 80014e4:	0800242d 	.word	0x0800242d
 80014e8:	0800248b 	.word	0x0800248b
 80014ec:	080024f1 	.word	0x080024f1
 80014f0:	08002557 	.word	0x08002557
 80014f4:	080026a9 	.word	0x080026a9
 80014f8:	08002715 	.word	0x08002715
 80014fc:	08002789 	.word	0x08002789
 8001500:	080027ed 	.word	0x080027ed
 8001504:	08002857 	.word	0x08002857
 8001508:	080028c7 	.word	0x080028c7
 800150c:	0800293b 	.word	0x0800293b
 8001510:	08002a29 	.word	0x08002a29
 8001514:	08002a8f 	.word	0x08002a8f
 8001518:	08002af3 	.word	0x08002af3
 800151c:	08002bc7 	.word	0x08002bc7
 8001520:	08002c29 	.word	0x08002c29
 8001524:	08002c8d 	.word	0x08002c8d
 8001528:	08002d69 	.word	0x08002d69
 800152c:	08002dd1 	.word	0x08002dd1
 8001530:	08002e43 	.word	0x08002e43
 8001534:	08002eb1 	.word	0x08002eb1
 8001538:	08002f07 	.word	0x08002f07
 800153c:	08002f7d 	.word	0x08002f7d
 8001540:	08002ff3 	.word	0x08002ff3
 8001544:	08003149 	.word	0x08003149
 8001548:	080031b1 	.word	0x080031b1
 800154c:	0800321d 	.word	0x0800321d
 8001550:	0800328f 	.word	0x0800328f
 8001554:	08003303 	.word	0x08003303
 8001558:	08003371 	.word	0x08003371
 800155c:	08003451 	.word	0x08003451
 8001560:	080034b3 	.word	0x080034b3
 8001564:	0800351f 	.word	0x0800351f
 8001568:	08003587 	.word	0x08003587
 800156c:	08003659 	.word	0x08003659
 8001570:	080036c5 	.word	0x080036c5
 8001574:	080037ad 	.word	0x080037ad
 8001578:	08003817 	.word	0x08003817
 800157c:	08003881 	.word	0x08003881
 8001580:	080038f7 	.word	0x080038f7
 8001584:	08003961 	.word	0x08003961
 8001588:	080039cf 	.word	0x080039cf
 800158c:	08003ab9 	.word	0x08003ab9
 8001590:	08003b2b 	.word	0x08003b2b
 8001594:	08003c0b 	.word	0x08003c0b
 8001598:	08003c6f 	.word	0x08003c6f
 800159c:	08003cd9 	.word	0x08003cd9
 80015a0:	08003d49 	.word	0x08003d49
 80015a4:	08003e3d 	.word	0x08003e3d
 80015a8:	08003eb3 	.word	0x08003eb3
 80015ac:	08003f49 	.word	0x08003f49
 80015b0:	08003fb5 	.word	0x08003fb5
 80015b4:	08004019 	.word	0x08004019
 80015b8:	08004075 	.word	0x08004075
 80015bc:	080041db 	.word	0x080041db
 80015c0:	08004245 	.word	0x08004245
 80015c4:	080042a7 	.word	0x080042a7
 80015c8:	08004305 	.word	0x08004305
 80015cc:	0800436d 	.word	0x0800436d
 80015d0:	080043d3 	.word	0x080043d3
 80015d4:	080044b5 	.word	0x080044b5
 80015d8:	0800451b 	.word	0x0800451b
 80015dc:	08004583 	.word	0x08004583
 80015e0:	080045eb 	.word	0x080045eb
 80015e4:	080046cd 	.word	0x080046cd
 80015e8:	08004729 	.word	0x08004729
 80015ec:	08004811 	.word	0x08004811
 80015f0:	0800487b 	.word	0x0800487b
 80015f4:	080048f1 	.word	0x080048f1
 80015f8:	08004953 	.word	0x08004953
 80015fc:	080049bd 	.word	0x080049bd
 8001600:	08004a27 	.word	0x08004a27
 8001604:	08004a91 	.word	0x08004a91
 8001608:	08004b69 	.word	0x08004b69
 800160c:	08004c57 	.word	0x08004c57
 8001610:	08004cc3 	.word	0x08004cc3
 8001614:	08004d1d 	.word	0x08004d1d
 8001618:	08004d93 	.word	0x08004d93
 800161c:	08004e07 	.word	0x08004e07
 8001620:	08004ef1 	.word	0x08004ef1
 8001624:	08004f53 	.word	0x08004f53
 8001628:	08004fc1 	.word	0x08004fc1
 800162c:	0800502d 	.word	0x0800502d
 8001630:	08005093 	.word	0x08005093
 8001634:	08005167 	.word	0x08005167
 8001638:	0800523d 	.word	0x0800523d
 800163c:	080052b1 	.word	0x080052b1
 8001640:	08005319 	.word	0x08005319
 8001644:	0800537f 	.word	0x0800537f
 8001648:	080053eb 	.word	0x080053eb
 800164c:	08005453 	.word	0x08005453
 8001650:	080054bd 	.word	0x080054bd
 8001654:	080055a9 	.word	0x080055a9
 8001658:	08005603 	.word	0x08005603
 800165c:	0800574b 	.word	0x0800574b
 8001660:	080057bd 	.word	0x080057bd
 8001664:	0800581b 	.word	0x0800581b
 8001668:	08005901 	.word	0x08005901
 800166c:	08005963 	.word	0x08005963
 8001670:	080059df 	.word	0x080059df
 8001674:	08005a45 	.word	0x08005a45
 8001678:	08005ac5 	.word	0x08005ac5
 800167c:	08005b35 	.word	0x08005b35
 8001680:	08005b9f 	.word	0x08005b9f
 8001684:	08005cef 	.word	0x08005cef
 8001688:	08005d59 	.word	0x08005d59
 800168c:	08005dc1 	.word	0x08005dc1
 8001690:	08005e3f 	.word	0x08005e3f
 8001694:	08005ebf 	.word	0x08005ebf
 8001698:	08005f89 	.word	0x08005f89
 800169c:	08005ff7 	.word	0x08005ff7
 80016a0:	0800606b 	.word	0x0800606b
 80016a4:	080060c9 	.word	0x080060c9
 80016a8:	08006131 	.word	0x08006131
 80016ac:	080061f3 	.word	0x080061f3
 80016b0:	080062c5 	.word	0x080062c5
 80016b4:	08006345 	.word	0x08006345
 80016b8:	080063b7 	.word	0x080063b7
 80016bc:	0800641b 	.word	0x0800641b
 80016c0:	0800647b 	.word	0x0800647b
 80016c4:	080064df 	.word	0x080064df
 80016c8:	0800654f 	.word	0x0800654f
 80016cc:	08006639 	.word	0x08006639
 80016d0:	080066b7 	.word	0x080066b7
 80016d4:	08006783 	.word	0x08006783
 80016d8:	080067f3 	.word	0x080067f3
 80016dc:	0800685b 	.word	0x0800685b
 80016e0:	080068c7 	.word	0x080068c7
 80016e4:	080069b9 	.word	0x080069b9
 80016e8:	08006a21 	.word	0x08006a21
 80016ec:	08006a8d 	.word	0x08006a8d
 80016f0:	08006af5 	.word	0x08006af5
 80016f4:	08006b5b 	.word	0x08006b5b
 80016f8:	08006bc1 	.word	0x08006bc1
 80016fc:	08006d09 	.word	0x08006d09
 8001700:	08006d77 	.word	0x08006d77
 8001704:	08006e05 	.word	0x08006e05
 8001708:	08006e6b 	.word	0x08006e6b
 800170c:	08006ed3 	.word	0x08006ed3
 8001710:	08006f39 	.word	0x08006f39
 8001714:	08006fa9 	.word	0x08006fa9
 8001718:	08007099 	.word	0x08007099
 800171c:	0800710f 	.word	0x0800710f
 8001720:	08007177 	.word	0x08007177
 8001724:	08007249 	.word	0x08007249
 8001728:	080072bf 	.word	0x080072bf
 800172c:	0800732f 	.word	0x0800732f
 8001730:	0800741d 	.word	0x0800741d
 8001734:	0800749d 	.word	0x0800749d
 8001738:	0800750b 	.word	0x0800750b
 800173c:	0800758b 	.word	0x0800758b
 8001740:	080075fd 	.word	0x080075fd
 8001744:	08007667 	.word	0x08007667
 8001748:	0800773d 	.word	0x0800773d
 800174c:	0800780f 	.word	0x0800780f
 8001750:	08007889 	.word	0x08007889
 8001754:	080078fd 	.word	0x080078fd
 8001758:	0800796d 	.word	0x0800796d
 800175c:	080079d3 	.word	0x080079d3
 8001760:	08007ac9 	.word	0x08007ac9
 8001764:	08007b3b 	.word	0x08007b3b
 8001768:	08007ba7 	.word	0x08007ba7
 800176c:	08007c0f 	.word	0x08007c0f
 8001770:	08007c83 	.word	0x08007c83
 8001774:	08007d69 	.word	0x08007d69
 8001778:	08007e41 	.word	0x08007e41
 800177c:	08007eb1 	.word	0x08007eb1
 8001780:	08007f23 	.word	0x08007f23
 8001784:	08007f9f 	.word	0x08007f9f
 8001788:	08008015 	.word	0x08008015
 800178c:	08008079 	.word	0x08008079
 8001790:	0800817d 	.word	0x0800817d
 8001794:	0800820d 	.word	0x0800820d
 8001798:	08008279 	.word	0x08008279
 800179c:	08008357 	.word	0x08008357
 80017a0:	080083b7 	.word	0x080083b7
 80017a4:	08008423 	.word	0x08008423
 80017a8:	080084fd 	.word	0x080084fd
 80017ac:	08008567 	.word	0x08008567
 80017b0:	080085d9 	.word	0x080085d9
 80017b4:	08008647 	.word	0x08008647
 80017b8:	080086bb 	.word	0x080086bb
 80017bc:	0800872d 	.word	0x0800872d
 80017c0:	080087a3 	.word	0x080087a3
 80017c4:	080088eb 	.word	0x080088eb
 80017c8:	08008951 	.word	0x08008951
 80017cc:	080089ab 	.word	0x080089ab
 80017d0:	08008a1d 	.word	0x08008a1d
 80017d4:	08008a85 	.word	0x08008a85
 80017d8:	08008af5 	.word	0x08008af5
 80017dc:	08008bd9 	.word	0x08008bd9
 80017e0:	08008c41 	.word	0x08008c41
 80017e4:	08008ca5 	.word	0x08008ca5
 80017e8:	08008d15 	.word	0x08008d15
 80017ec:	08008e59 	.word	0x08008e59
 80017f0:	08008f3d 	.word	0x08008f3d
 80017f4:	08008fb1 	.word	0x08008fb1
 80017f8:	08009035 	.word	0x08009035
 80017fc:	080090a7 	.word	0x080090a7
 8001800:	0800910f 	.word	0x0800910f
 8001804:	08009179 	.word	0x08009179
 8001808:	08009251 	.word	0x08009251
 800180c:	080092bd 	.word	0x080092bd
 8001810:	08009337 	.word	0x08009337
 8001814:	08009423 	.word	0x08009423
 8001818:	0800949b 	.word	0x0800949b
 800181c:	08009575 	.word	0x08009575
 8001820:	080095dd 	.word	0x080095dd
 8001824:	08009647 	.word	0x08009647
 8001828:	080096ad 	.word	0x080096ad
 800182c:	08009717 	.word	0x08009717
 8001830:	0800978f 	.word	0x0800978f
 8001834:	080097fd 	.word	0x080097fd
 8001838:	080098f1 	.word	0x080098f1
 800183c:	080099dd 	.word	0x080099dd
 8001840:	08009a53 	.word	0x08009a53
 8001844:	08009ab5 	.word	0x08009ab5
 8001848:	08009b0f 	.word	0x08009b0f
 800184c:	08009b7d 	.word	0x08009b7d
 8001850:	08009c65 	.word	0x08009c65
 8001854:	08009ccf 	.word	0x08009ccf
 8001858:	08009d4b 	.word	0x08009d4b
 800185c:	08009db5 	.word	0x08009db5
 8001860:	08009e23 	.word	0x08009e23
 8001864:	08009ef7 	.word	0x08009ef7
 8001868:	08009fd9 	.word	0x08009fd9
 800186c:	0800a04d 	.word	0x0800a04d
 8001870:	0800a0b9 	.word	0x0800a0b9
 8001874:	0800a12f 	.word	0x0800a12f
 8001878:	0800a1a5 	.word	0x0800a1a5
 800187c:	0800a20f 	.word	0x0800a20f
 8001880:	0800a2e1 	.word	0x0800a2e1
 8001884:	0800a34d 	.word	0x0800a34d
 8001888:	0800a3cb 	.word	0x0800a3cb
 800188c:	0800a4a3 	.word	0x0800a4a3
 8001890:	0800a50d 	.word	0x0800a50d
 8001894:	0800a57b 	.word	0x0800a57b
 8001898:	0800a669 	.word	0x0800a669
 800189c:	0800a6f1 	.word	0x0800a6f1
 80018a0:	0800a765 	.word	0x0800a765
 80018a4:	0800a7e5 	.word	0x0800a7e5
 80018a8:	0800a855 	.word	0x0800a855
 80018ac:	0800a8cb 	.word	0x0800a8cb
 80018b0:	0800a995 	.word	0x0800a995
 80018b4:	0800aa5b 	.word	0x0800aa5b
 80018b8:	0800aacb 	.word	0x0800aacb
 80018bc:	0800ab4d 	.word	0x0800ab4d
 80018c0:	0800abbd 	.word	0x0800abbd
 80018c4:	0800ac2d 	.word	0x0800ac2d
 80018c8:	0800ad15 	.word	0x0800ad15
 80018cc:	0800ad7f 	.word	0x0800ad7f
 80018d0:	0800adeb 	.word	0x0800adeb
 80018d4:	0800ae53 	.word	0x0800ae53
 80018d8:	0800aec1 	.word	0x0800aec1
 80018dc:	0800af99 	.word	0x0800af99
 80018e0:	0800b07d 	.word	0x0800b07d
 80018e4:	0800b0e3 	.word	0x0800b0e3
 80018e8:	0800b153 	.word	0x0800b153
 80018ec:	0800b1c3 	.word	0x0800b1c3
 80018f0:	0800b231 	.word	0x0800b231
 80018f4:	0800b29d 	.word	0x0800b29d
 80018f8:	0800b2fd 	.word	0x0800b2fd
 80018fc:	0800b3ed 	.word	0x0800b3ed
 8001900:	0800b45b 	.word	0x0800b45b
 8001904:	0800b541 	.word	0x0800b541
 8001908:	0800b5b3 	.word	0x0800b5b3
 800190c:	0800b61f 	.word	0x0800b61f
 8001910:	0800b693 	.word	0x0800b693
 8001914:	0800b771 	.word	0x0800b771
 8001918:	0800b7d7 	.word	0x0800b7d7
 800191c:	0800b83b 	.word	0x0800b83b
 8001920:	0800b8a9 	.word	0x0800b8a9
 8001924:	0800b90f 	.word	0x0800b90f
 8001928:	0800b979 	.word	0x0800b979
 800192c:	0800bac1 	.word	0x0800bac1
 8001930:	0800bb31 	.word	0x0800bb31
 8001934:	0800bb99 	.word	0x0800bb99
 8001938:	0800bbff 	.word	0x0800bbff
 800193c:	0800bc6d 	.word	0x0800bc6d
 8001940:	0800bcd1 	.word	0x0800bcd1
 8001944:	0800bd47 	.word	0x0800bd47
 8001948:	0800be29 	.word	0x0800be29
 800194c:	0800be8d 	.word	0x0800be8d
 8001950:	0800beff 	.word	0x0800beff
 8001954:	0800bfc5 	.word	0x0800bfc5
 8001958:	0800c025 	.word	0x0800c025
 800195c:	0800c095 	.word	0x0800c095
 8001960:	0800c17d 	.word	0x0800c17d
 8001964:	0800c1f5 	.word	0x0800c1f5
 8001968:	0800c269 	.word	0x0800c269
 800196c:	0800c2d9 	.word	0x0800c2d9
 8001970:	0800c343 	.word	0x0800c343
 8001974:	0800c3bd 	.word	0x0800c3bd
 8001978:	0800c423 	.word	0x0800c423
 800197c:	0800c5cf 	.word	0x0800c5cf
 8001980:	0800c633 	.word	0x0800c633
 8001984:	0800c699 	.word	0x0800c699
 8001988:	0800c70b 	.word	0x0800c70b
 800198c:	0800c777 	.word	0x0800c777
 8001990:	0800c855 	.word	0x0800c855
 8001994:	0800c8c3 	.word	0x0800c8c3
 8001998:	0800c92f 	.word	0x0800c92f
 800199c:	0800c99f 	.word	0x0800c99f
 80019a0:	0800ca1b 	.word	0x0800ca1b
 80019a4:	0800cafd 	.word	0x0800cafd
 80019a8:	0800cbd9 	.word	0x0800cbd9
 80019ac:	0800cc47 	.word	0x0800cc47
 80019b0:	0800ccb5 	.word	0x0800ccb5
 80019b4:	0800cd29 	.word	0x0800cd29
 80019b8:	0800cd93 	.word	0x0800cd93
 80019bc:	0800cdf9 	.word	0x0800cdf9
 80019c0:	0800ce5b 	.word	0x0800ce5b
 80019c4:	0800cf45 	.word	0x0800cf45
 80019c8:	0800cf9f 	.word	0x0800cf9f
 80019cc:	0800d063 	.word	0x0800d063
 80019d0:	0800d0c3 	.word	0x0800d0c3
 80019d4:	0800d12d 	.word	0x0800d12d
 80019d8:	0800d18b 	.word	0x0800d18b
 80019dc:	0800d269 	.word	0x0800d269
 80019e0:	0800d2d1 	.word	0x0800d2d1
 80019e4:	0800d365 	.word	0x0800d365
 80019e8:	0800d3cf 	.word	0x0800d3cf
 80019ec:	0800d439 	.word	0x0800d439
 80019f0:	0800d4b3 	.word	0x0800d4b3
 80019f4:	0800d5db 	.word	0x0800d5db
 80019f8:	0800d645 	.word	0x0800d645
 80019fc:	0800d6ab 	.word	0x0800d6ab
 8001a00:	0800d70d 	.word	0x0800d70d
 8001a04:	0800d76b 	.word	0x0800d76b
 8001a08:	0800d7e7 	.word	0x0800d7e7
 8001a0c:	0800d8d1 	.word	0x0800d8d1
 8001a10:	0800d947 	.word	0x0800d947
 8001a14:	0800d9b5 	.word	0x0800d9b5
 8001a18:	0800da23 	.word	0x0800da23
 8001a1c:	0800dae9 	.word	0x0800dae9
 8001a20:	0800db47 	.word	0x0800db47
 8001a24:	0800dc35 	.word	0x0800dc35
 8001a28:	0800dca9 	.word	0x0800dca9
 8001a2c:	0800dd15 	.word	0x0800dd15
 8001a30:	0800dd75 	.word	0x0800dd75
 8001a34:	0800dde3 	.word	0x0800dde3
 8001a38:	0800de5b 	.word	0x0800de5b
 8001a3c:	0800dec3 	.word	0x0800dec3
 8001a40:	0800dfb1 	.word	0x0800dfb1
 8001a44:	0800e087 	.word	0x0800e087
 8001a48:	0800e0e9 	.word	0x0800e0e9
 8001a4c:	0800e151 	.word	0x0800e151
 8001a50:	0800e1b9 	.word	0x0800e1b9
 8001a54:	0800e217 	.word	0x0800e217
 8001a58:	0800e309 	.word	0x0800e309
 8001a5c:	0800e36d 	.word	0x0800e36d
 8001a60:	0800e3f3 	.word	0x0800e3f3
 8001a64:	0800e451 	.word	0x0800e451
 8001a68:	0800e4bd 	.word	0x0800e4bd
 8001a6c:	0800e5a1 	.word	0x0800e5a1
 8001a70:	0800e689 	.word	0x0800e689
 8001a74:	0800e6f1 	.word	0x0800e6f1
 8001a78:	0800e75d 	.word	0x0800e75d
 8001a7c:	0800e7c9 	.word	0x0800e7c9
 8001a80:	0800e835 	.word	0x0800e835
 8001a84:	0800e8a9 	.word	0x0800e8a9
 8001a88:	0800e91f 	.word	0x0800e91f
 8001a8c:	0800e9fd 	.word	0x0800e9fd
 8001a90:	0800ea6d 	.word	0x0800ea6d
 8001a94:	0800eb3d 	.word	0x0800eb3d
 8001a98:	0800ebb5 	.word	0x0800ebb5
 8001a9c:	0800ec1f 	.word	0x0800ec1f
 8001aa0:	0800ec8b 	.word	0x0800ec8b
 8001aa4:	0800ed7d 	.word	0x0800ed7d
 8001aa8:	0800edf7 	.word	0x0800edf7
 8001aac:	0800ee59 	.word	0x0800ee59
 8001ab0:	0800eeb7 	.word	0x0800eeb7
 8001ab4:	0800ef27 	.word	0x0800ef27
 8001ab8:	0800ef91 	.word	0x0800ef91
 8001abc:	0800f0ed 	.word	0x0800f0ed
 8001ac0:	0800f159 	.word	0x0800f159
 8001ac4:	0800f1bf 	.word	0x0800f1bf
 8001ac8:	0800f225 	.word	0x0800f225
 8001acc:	0800f289 	.word	0x0800f289
 8001ad0:	0800f2f7 	.word	0x0800f2f7
 8001ad4:	0800f361 	.word	0x0800f361
 8001ad8:	0800f441 	.word	0x0800f441
 8001adc:	0800f4ab 	.word	0x0800f4ab
 8001ae0:	0800f515 	.word	0x0800f515
 8001ae4:	0800f5ef 	.word	0x0800f5ef
 8001ae8:	0800f65f 	.word	0x0800f65f
 8001aec:	0800f6c5 	.word	0x0800f6c5
 8001af0:	0800f7a5 	.word	0x0800f7a5
 8001af4:	0800f805 	.word	0x0800f805
 8001af8:	0800f873 	.word	0x0800f873
 8001afc:	0800f8df 	.word	0x0800f8df
 8001b00:	0800f93f 	.word	0x0800f93f
 8001b04:	0800f99f 	.word	0x0800f99f
 8001b08:	0800fa05 	.word	0x0800fa05
 8001b0c:	0800fbcb 	.word	0x0800fbcb
 8001b10:	0800fc31 	.word	0x0800fc31
 8001b14:	0800fc9b 	.word	0x0800fc9b
 8001b18:	0800fd03 	.word	0x0800fd03
 8001b1c:	0800fd6d 	.word	0x0800fd6d
 8001b20:	0800fe41 	.word	0x0800fe41
 8001b24:	0800fe9d 	.word	0x0800fe9d
 8001b28:	0800ff0b 	.word	0x0800ff0b
 8001b2c:	0800ff75 	.word	0x0800ff75
 8001b30:	0800ffd5 	.word	0x0800ffd5
 8001b34:	080100b5 	.word	0x080100b5
 8001b38:	080101b1 	.word	0x080101b1
 8001b3c:	0801021d 	.word	0x0801021d
 8001b40:	08010287 	.word	0x08010287
 8001b44:	080102fb 	.word	0x080102fb
 8001b48:	0801034d 	.word	0x0801034d
 8001b4c:	080103ad 	.word	0x080103ad
 8001b50:	08010411 	.word	0x08010411
 8001b54:	08010505 	.word	0x08010505
 8001b58:	08010575 	.word	0x08010575
 8001b5c:	0801063f 	.word	0x0801063f
 8001b60:	080106b1 	.word	0x080106b1
 8001b64:	0801071f 	.word	0x0801071f
 8001b68:	08010797 	.word	0x08010797
 8001b6c:	08010879 	.word	0x08010879
 8001b70:	080108fb 	.word	0x080108fb
 8001b74:	08010973 	.word	0x08010973
 8001b78:	080109d7 	.word	0x080109d7
 8001b7c:	08010a39 	.word	0x08010a39
 8001b80:	08010aa7 	.word	0x08010aa7
 8001b84:	08010bf9 	.word	0x08010bf9
 8001b88:	08010c69 	.word	0x08010c69
 8001b8c:	08010cd1 	.word	0x08010cd1
 8001b90:	08010d3f 	.word	0x08010d3f
 8001b94:	08010dab 	.word	0x08010dab
 8001b98:	08010e15 	.word	0x08010e15
 8001b9c:	08010f05 	.word	0x08010f05
 8001ba0:	08010f6d 	.word	0x08010f6d
 8001ba4:	08010fd3 	.word	0x08010fd3
 8001ba8:	0801104b 	.word	0x0801104b
 8001bac:	08011111 	.word	0x08011111
 8001bb0:	08011179 	.word	0x08011179
 8001bb4:	08011259 	.word	0x08011259
 8001bb8:	080112bd 	.word	0x080112bd
 8001bbc:	08011337 	.word	0x08011337
 8001bc0:	080113b5 	.word	0x080113b5
 8001bc4:	08011433 	.word	0x08011433
 8001bc8:	0801149f 	.word	0x0801149f
 8001bcc:	0801157d 	.word	0x0801157d
 8001bd0:	080115eb 	.word	0x080115eb
 8001bd4:	080116c7 	.word	0x080116c7
 8001bd8:	08011731 	.word	0x08011731
 8001bdc:	08011795 	.word	0x08011795
 8001be0:	080117fb 	.word	0x080117fb
 8001be4:	080118d9 	.word	0x080118d9
 8001be8:	0801194d 	.word	0x0801194d
 8001bec:	080119b5 	.word	0x080119b5
 8001bf0:	08011a27 	.word	0x08011a27
 8001bf4:	08011a95 	.word	0x08011a95
 8001bf8:	08011af7 	.word	0x08011af7
 8001bfc:	08011c39 	.word	0x08011c39
 8001c00:	08011ca9 	.word	0x08011ca9
 8001c04:	08011d21 	.word	0x08011d21
 8001c08:	08011d97 	.word	0x08011d97
 8001c0c:	08011e05 	.word	0x08011e05
 8001c10:	08011e75 	.word	0x08011e75
 8001c14:	08011f5d 	.word	0x08011f5d
 8001c18:	08011fd7 	.word	0x08011fd7
 8001c1c:	08012047 	.word	0x08012047
 8001c20:	080120b5 	.word	0x080120b5
 8001c24:	0801217f 	.word	0x0801217f
 8001c28:	08012251 	.word	0x08012251
 8001c2c:	080122dd 	.word	0x080122dd
 8001c30:	0801234d 	.word	0x0801234d
 8001c34:	080123bf 	.word	0x080123bf
 8001c38:	0801243b 	.word	0x0801243b
 8001c3c:	080124a9 	.word	0x080124a9
 8001c40:	08012595 	.word	0x08012595
 8001c44:	080125fd 	.word	0x080125fd
 8001c48:	08012661 	.word	0x08012661
 8001c4c:	0801273b 	.word	0x0801273b
 8001c50:	080127ab 	.word	0x080127ab
 8001c54:	0801280f 	.word	0x0801280f
 8001c58:	080128fd 	.word	0x080128fd
 8001c5c:	0801296f 	.word	0x0801296f
 8001c60:	080129d7 	.word	0x080129d7
 8001c64:	08012a51 	.word	0x08012a51
 8001c68:	08012abb 	.word	0x08012abb
 8001c6c:	08012b1f 	.word	0x08012b1f
 8001c70:	08012b85 	.word	0x08012b85
 8001c74:	08012cdf 	.word	0x08012cdf
 8001c78:	08012d63 	.word	0x08012d63
 8001c7c:	08012deb 	.word	0x08012deb
 8001c80:	08012e6f 	.word	0x08012e6f
 8001c84:	08012ee5 	.word	0x08012ee5
 8001c88:	08012fb5 	.word	0x08012fb5
 8001c8c:	0801302b 	.word	0x0801302b
 8001c90:	08013099 	.word	0x08013099
 8001c94:	080130ff 	.word	0x080130ff
 8001c98:	0801316d 	.word	0x0801316d
 8001c9c:	0801332d 	.word	0x0801332d
 8001ca0:	08013393 	.word	0x08013393
 8001ca4:	080133fd 	.word	0x080133fd
 8001ca8:	08013465 	.word	0x08013465
 8001cac:	080134df 	.word	0x080134df
 8001cb0:	08013545 	.word	0x08013545
 8001cb4:	080135ab 	.word	0x080135ab
 8001cb8:	0801367d 	.word	0x0801367d
 8001cbc:	080136d7 	.word	0x080136d7
 8001cc0:	08013741 	.word	0x08013741
 8001cc4:	08013827 	.word	0x08013827
 8001cc8:	08013899 	.word	0x08013899
 8001ccc:	080138fb 	.word	0x080138fb
 8001cd0:	080139e5 	.word	0x080139e5
 8001cd4:	08013a59 	.word	0x08013a59
 8001cd8:	08013ab7 	.word	0x08013ab7
 8001cdc:	08013b11 	.word	0x08013b11
 8001ce0:	08013b75 	.word	0x08013b75
 8001ce4:	08013be3 	.word	0x08013be3
 8001ce8:	08013c55 	.word	0x08013c55
 8001cec:	08013db1 	.word	0x08013db1
 8001cf0:	08013e27 	.word	0x08013e27
 8001cf4:	08013e89 	.word	0x08013e89
 8001cf8:	08013eef 	.word	0x08013eef
 8001cfc:	08013f53 	.word	0x08013f53
 8001d00:	08013fb9 	.word	0x08013fb9
 8001d04:	08014091 	.word	0x08014091
 8001d08:	080140f3 	.word	0x080140f3
 8001d0c:	08014167 	.word	0x08014167
 8001d10:	080141d3 	.word	0x080141d3
 8001d14:	080142a1 	.word	0x080142a1
 8001d18:	0801431b 	.word	0x0801431b
 8001d1c:	08014409 	.word	0x08014409
 8001d20:	0801447d 	.word	0x0801447d
 8001d24:	080144e1 	.word	0x080144e1
 8001d28:	08014549 	.word	0x08014549
 8001d2c:	080145ad 	.word	0x080145ad
 8001d30:	08014635 	.word	0x08014635
 8001d34:	080146a3 	.word	0x080146a3
 8001d38:	08014795 	.word	0x08014795
 8001d3c:	0801487f 	.word	0x0801487f
 8001d40:	080148eb 	.word	0x080148eb
 8001d44:	08014953 	.word	0x08014953
 8001d48:	080149ad 	.word	0x080149ad
 8001d4c:	08014a19 	.word	0x08014a19
 8001d50:	08014b0d 	.word	0x08014b0d
 8001d54:	08014b71 	.word	0x08014b71
 8001d58:	08014bdb 	.word	0x08014bdb
 8001d5c:	08014c3f 	.word	0x08014c3f
 8001d60:	08014cab 	.word	0x08014cab
 8001d64:	08014d95 	.word	0x08014d95
 8001d68:	08014e85 	.word	0x08014e85
 8001d6c:	08014ef5 	.word	0x08014ef5
 8001d70:	08014f5b 	.word	0x08014f5b
 8001d74:	08014fcb 	.word	0x08014fcb
 8001d78:	08015041 	.word	0x08015041
 8001d7c:	080150a9 	.word	0x080150a9
 8001d80:	080151a1 	.word	0x080151a1
 8001d84:	0801520f 	.word	0x0801520f
 8001d88:	0801527d 	.word	0x0801527d
 8001d8c:	0801533f 	.word	0x0801533f
 8001d90:	080153b3 	.word	0x080153b3
 8001d94:	08015419 	.word	0x08015419
 8001d98:	08015501 	.word	0x08015501
 8001d9c:	08015579 	.word	0x08015579
 8001da0:	080155ed 	.word	0x080155ed
 8001da4:	0801564d 	.word	0x0801564d
 8001da8:	080156bb 	.word	0x080156bb
 8001dac:	0801571f 	.word	0x0801571f
 8001db0:	0801577f 	.word	0x0801577f
 8001db4:	080158db 	.word	0x080158db
 8001db8:	08015943 	.word	0x08015943
 8001dbc:	080159ad 	.word	0x080159ad
 8001dc0:	08015a1d 	.word	0x08015a1d
 8001dc4:	08015a89 	.word	0x08015a89
 8001dc8:	08015ae9 	.word	0x08015ae9
 8001dcc:	08015bd9 	.word	0x08015bd9
 8001dd0:	08015c4b 	.word	0x08015c4b
 8001dd4:	08015cbb 	.word	0x08015cbb
 8001dd8:	08015d1f 	.word	0x08015d1f
 8001ddc:	08015e07 	.word	0x08015e07
 8001de0:	08015e6d 	.word	0x08015e6d
 8001de4:	08015f5d 	.word	0x08015f5d
 8001de8:	08015fbd 	.word	0x08015fbd
 8001dec:	08016029 	.word	0x08016029
 8001df0:	08016097 	.word	0x08016097
 8001df4:	0801610b 	.word	0x0801610b
 8001df8:	08016189 	.word	0x08016189
 8001dfc:	080161f9 	.word	0x080161f9
 8001e00:	080162e5 	.word	0x080162e5
 8001e04:	080163c9 	.word	0x080163c9
 8001e08:	0801643f 	.word	0x0801643f
 8001e0c:	080164bb 	.word	0x080164bb
 8001e10:	08016527 	.word	0x08016527
 8001e14:	08016601 	.word	0x08016601
 8001e18:	0801666b 	.word	0x0801666b
 8001e1c:	080166d9 	.word	0x080166d9
 8001e20:	08016755 	.word	0x08016755
 8001e24:	080167c5 	.word	0x080167c5
 8001e28:	08016835 	.word	0x08016835
 8001e2c:	080169ed 	.word	0x080169ed
 8001e30:	08016a63 	.word	0x08016a63
 8001e34:	08016acf 	.word	0x08016acf
 8001e38:	08016b33 	.word	0x08016b33
 8001e3c:	08016b9b 	.word	0x08016b9b
 8001e40:	08016bfd 	.word	0x08016bfd
 8001e44:	08016cdd 	.word	0x08016cdd
 8001e48:	08016d49 	.word	0x08016d49
 8001e4c:	08016db5 	.word	0x08016db5
 8001e50:	08016e1b 	.word	0x08016e1b
 8001e54:	08016f07 	.word	0x08016f07
 8001e58:	08016f6d 	.word	0x08016f6d
 8001e5c:	0801704d 	.word	0x0801704d
 8001e60:	080170bd 	.word	0x080170bd
 8001e64:	08017135 	.word	0x08017135
 8001e68:	0801719f 	.word	0x0801719f
 8001e6c:	08017213 	.word	0x08017213
 8001e70:	08017273 	.word	0x08017273
 8001e74:	080172e1 	.word	0x080172e1
 8001e78:	080173d5 	.word	0x080173d5
 8001e7c:	080174a9 	.word	0x080174a9
 8001e80:	08017527 	.word	0x08017527
 8001e84:	0801758f 	.word	0x0801758f
 8001e88:	080175ff 	.word	0x080175ff
 8001e8c:	0801766f 	.word	0x0801766f
 8001e90:	08017759 	.word	0x08017759
 8001e94:	080177c3 	.word	0x080177c3
 8001e98:	08017839 	.word	0x08017839
 8001e9c:	080178a9 	.word	0x080178a9
 8001ea0:	0801791b 	.word	0x0801791b
 8001ea4:	08017a69 	.word	0x08017a69
 8001ea8:	08017ae3 	.word	0x08017ae3
 8001eac:	08017b4b 	.word	0x08017b4b
 8001eb0:	08017bad 	.word	0x08017bad
 8001eb4:	08017c23 	.word	0x08017c23
 8001eb8:	08017c81 	.word	0x08017c81
 8001ebc:	08017ce1 	.word	0x08017ce1
 8001ec0:	08017dcd 	.word	0x08017dcd
 8001ec4:	08017e2f 	.word	0x08017e2f
 8001ec8:	08017ea1 	.word	0x08017ea1
 8001ecc:	08017f6d 	.word	0x08017f6d
 8001ed0:	08017fe1 	.word	0x08017fe1
 8001ed4:	08018055 	.word	0x08018055
 8001ed8:	08018135 	.word	0x08018135
 8001edc:	080181a1 	.word	0x080181a1
 8001ee0:	08018209 	.word	0x08018209
 8001ee4:	08018275 	.word	0x08018275
 8001ee8:	080182d9 	.word	0x080182d9
 8001eec:	08018347 	.word	0x08018347
 8001ef0:	080183c3 	.word	0x080183c3
 8001ef4:	08018513 	.word	0x08018513
 8001ef8:	08018581 	.word	0x08018581
 8001efc:	080185eb 	.word	0x080185eb
 8001f00:	0801864d 	.word	0x0801864d
 8001f04:	080186bb 	.word	0x080186bb
 8001f08:	08018725 	.word	0x08018725
 8001f0c:	08018809 	.word	0x08018809
 8001f10:	08018871 	.word	0x08018871
 8001f14:	080188d5 	.word	0x080188d5
 8001f18:	08018941 	.word	0x08018941
 8001f1c:	08018a19 	.word	0x08018a19
 8001f20:	08018a91 	.word	0x08018a91
 8001f24:	08018b81 	.word	0x08018b81
 8001f28:	08018bf9 	.word	0x08018bf9
 8001f2c:	08018c5f 	.word	0x08018c5f
 8001f30:	08018cc5 	.word	0x08018cc5
 8001f34:	08018d31 	.word	0x08018d31
 8001f38:	08018d9f 	.word	0x08018d9f
 8001f3c:	08018e1b 	.word	0x08018e1b
 8001f40:	08018f0d 	.word	0x08018f0d
 8001f44:	08018fe9 	.word	0x08018fe9
 8001f48:	08019057 	.word	0x08019057
 8001f4c:	080190d5 	.word	0x080190d5
 8001f50:	0801913f 	.word	0x0801913f
 8001f54:	080191a5 	.word	0x080191a5
 8001f58:	08019295 	.word	0x08019295
 8001f5c:	08019311 	.word	0x08019311
 8001f60:	0801937f 	.word	0x0801937f
 8001f64:	080193e7 	.word	0x080193e7
 8001f68:	0801944d 	.word	0x0801944d
 8001f6c:	080195a5 	.word	0x080195a5
 8001f70:	08019615 	.word	0x08019615
 8001f74:	08019677 	.word	0x08019677
 8001f78:	080196e1 	.word	0x080196e1
 8001f7c:	0801974b 	.word	0x0801974b
 8001f80:	080197bb 	.word	0x080197bb
 8001f84:	08019829 	.word	0x08019829
 8001f88:	08019911 	.word	0x08019911
 8001f8c:	08019975 	.word	0x08019975
 8001f90:	080199d9 	.word	0x080199d9
 8001f94:	08019aa3 	.word	0x08019aa3
 8001f98:	08019b0b 	.word	0x08019b0b
 8001f9c:	08019b67 	.word	0x08019b67
 8001fa0:	08019c4d 	.word	0x08019c4d
 8001fa4:	08019cc3 	.word	0x08019cc3
 8001fa8:	08019d2f 	.word	0x08019d2f
 8001fac:	08019da5 	.word	0x08019da5
 8001fb0:	08019e19 	.word	0x08019e19
 8001fb4:	08019e83 	.word	0x08019e83
 8001fb8:	08019f65 	.word	0x08019f65
 8001fbc:	0801a0b1 	.word	0x0801a0b1
 8001fc0:	0801a10d 	.word	0x0801a10d
 8001fc4:	0801a175 	.word	0x0801a175
 8001fc8:	0801a1e9 	.word	0x0801a1e9
 8001fcc:	0801a2d5 	.word	0x0801a2d5
 8001fd0:	0801a34f 	.word	0x0801a34f
 8001fd4:	0801a3bf 	.word	0x0801a3bf
		case 0 :
			strcpy(p->name,"FAR FROM THE MADDING CROWD");
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	337c      	adds	r3, #124	; 0x7c
 8001fdc:	4abc      	ldr	r2, [pc, #752]	; (80022d0 <problem_fetch+0xfb0>)
 8001fde:	461d      	mov	r5, r3
 8001fe0:	4614      	mov	r4, r2
 8001fe2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001fe4:	6028      	str	r0, [r5, #0]
 8001fe6:	6069      	str	r1, [r5, #4]
 8001fe8:	60aa      	str	r2, [r5, #8]
 8001fea:	60eb      	str	r3, [r5, #12]
 8001fec:	cc03      	ldmia	r4!, {r0, r1}
 8001fee:	6128      	str	r0, [r5, #16]
 8001ff0:	6169      	str	r1, [r5, #20]
 8001ff2:	8823      	ldrh	r3, [r4, #0]
 8001ff4:	78a2      	ldrb	r2, [r4, #2]
 8001ff6:	832b      	strh	r3, [r5, #24]
 8001ff8:	4613      	mov	r3, r2
 8001ffa:	76ab      	strb	r3, [r5, #26]
			p->moveSize = 7;
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	2207      	movs	r2, #7
 8002000:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"E,C,E,F,C,D,D");
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	3340      	adds	r3, #64	; 0x40
 8002006:	4ab3      	ldr	r2, [pc, #716]	; (80022d4 <problem_fetch+0xfb4>)
 8002008:	461c      	mov	r4, r3
 800200a:	4613      	mov	r3, r2
 800200c:	cb07      	ldmia	r3!, {r0, r1, r2}
 800200e:	6020      	str	r0, [r4, #0]
 8002010:	6061      	str	r1, [r4, #4]
 8002012:	60a2      	str	r2, [r4, #8]
 8002014:	881b      	ldrh	r3, [r3, #0]
 8002016:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"6,5,8,11,13,15,18");
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	3304      	adds	r3, #4
 800201c:	4aae      	ldr	r2, [pc, #696]	; (80022d8 <problem_fetch+0xfb8>)
 800201e:	461d      	mov	r5, r3
 8002020:	4614      	mov	r4, r2
 8002022:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002024:	6028      	str	r0, [r5, #0]
 8002026:	6069      	str	r1, [r5, #4]
 8002028:	60aa      	str	r2, [r5, #8]
 800202a:	60eb      	str	r3, [r5, #12]
 800202c:	8823      	ldrh	r3, [r4, #0]
 800202e:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish, "s,s,d,d,d,d,e");
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	33d8      	adds	r3, #216	; 0xd8
 8002034:	4aa9      	ldr	r2, [pc, #676]	; (80022dc <problem_fetch+0xfbc>)
 8002036:	461c      	mov	r4, r3
 8002038:	4613      	mov	r3, r2
 800203a:	cb07      	ldmia	r3!, {r0, r1, r2}
 800203c:	6020      	str	r0, [r4, #0]
 800203e:	6061      	str	r1, [r4, #4]
 8002040:	60a2      	str	r2, [r4, #8]
 8002042:	881b      	ldrh	r3, [r3, #0]
 8002044:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade, "6B+");
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	33cc      	adds	r3, #204	; 0xcc
 800204a:	4aa5      	ldr	r2, [pc, #660]	; (80022e0 <problem_fetch+0xfc0>)
 800204c:	6810      	ldr	r0, [r2, #0]
 800204e:	6018      	str	r0, [r3, #0]
			break;
 8002050:	f018 beac 	b.w	801adac <problem_fetch+0x19a8c>
		case 1 :
			strcpy(p->name,"HARD TIMES");
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	337c      	adds	r3, #124	; 0x7c
 8002058:	49a2      	ldr	r1, [pc, #648]	; (80022e4 <problem_fetch+0xfc4>)
 800205a:	461a      	mov	r2, r3
 800205c:	460b      	mov	r3, r1
 800205e:	cb03      	ldmia	r3!, {r0, r1}
 8002060:	6010      	str	r0, [r2, #0]
 8002062:	6051      	str	r1, [r2, #4]
 8002064:	8819      	ldrh	r1, [r3, #0]
 8002066:	789b      	ldrb	r3, [r3, #2]
 8002068:	8111      	strh	r1, [r2, #8]
 800206a:	7293      	strb	r3, [r2, #10]
			p->moveSize = 8;
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	2208      	movs	r2, #8
 8002070:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"B,E,E,E,E,G,I,J");
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	3340      	adds	r3, #64	; 0x40
 8002076:	4a9c      	ldr	r2, [pc, #624]	; (80022e8 <problem_fetch+0xfc8>)
 8002078:	461c      	mov	r4, r3
 800207a:	4615      	mov	r5, r2
 800207c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800207e:	6020      	str	r0, [r4, #0]
 8002080:	6061      	str	r1, [r4, #4]
 8002082:	60a2      	str	r2, [r4, #8]
 8002084:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"10,6,8,12,16,4,18,5");
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	3304      	adds	r3, #4
 800208a:	4a98      	ldr	r2, [pc, #608]	; (80022ec <problem_fetch+0xfcc>)
 800208c:	461d      	mov	r5, r3
 800208e:	4614      	mov	r4, r2
 8002090:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002092:	6028      	str	r0, [r5, #0]
 8002094:	6069      	str	r1, [r5, #4]
 8002096:	60aa      	str	r2, [r5, #8]
 8002098:	60eb      	str	r3, [r5, #12]
 800209a:	6820      	ldr	r0, [r4, #0]
 800209c:	6128      	str	r0, [r5, #16]
			strcpy(p->startFinish, "d,d,d,d,d,s,e,s");
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	33d8      	adds	r3, #216	; 0xd8
 80020a2:	4a93      	ldr	r2, [pc, #588]	; (80022f0 <problem_fetch+0xfd0>)
 80020a4:	461c      	mov	r4, r3
 80020a6:	4615      	mov	r5, r2
 80020a8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80020aa:	6020      	str	r0, [r4, #0]
 80020ac:	6061      	str	r1, [r4, #4]
 80020ae:	60a2      	str	r2, [r4, #8]
 80020b0:	60e3      	str	r3, [r4, #12]
			strcpy(p->grade, "7A");
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	33cc      	adds	r3, #204	; 0xcc
 80020b6:	4a8f      	ldr	r2, [pc, #572]	; (80022f4 <problem_fetch+0xfd4>)
 80020b8:	8811      	ldrh	r1, [r2, #0]
 80020ba:	7892      	ldrb	r2, [r2, #2]
 80020bc:	8019      	strh	r1, [r3, #0]
 80020be:	709a      	strb	r2, [r3, #2]
			break;
 80020c0:	f018 be74 	b.w	801adac <problem_fetch+0x19a8c>
		case 10 :
			strcpy(p->name,"SINGLE DURA");
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	337c      	adds	r3, #124	; 0x7c
 80020c8:	4a8b      	ldr	r2, [pc, #556]	; (80022f8 <problem_fetch+0xfd8>)
 80020ca:	461c      	mov	r4, r3
 80020cc:	4613      	mov	r3, r2
 80020ce:	cb07      	ldmia	r3!, {r0, r1, r2}
 80020d0:	6020      	str	r0, [r4, #0]
 80020d2:	6061      	str	r1, [r4, #4]
 80020d4:	60a2      	str	r2, [r4, #8]
			p->moveSize = 5;
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	2205      	movs	r2, #5
 80020da:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"E,G,D,D,A");
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	3340      	adds	r3, #64	; 0x40
 80020e0:	4986      	ldr	r1, [pc, #536]	; (80022fc <problem_fetch+0xfdc>)
 80020e2:	461a      	mov	r2, r3
 80020e4:	460b      	mov	r3, r1
 80020e6:	cb03      	ldmia	r3!, {r0, r1}
 80020e8:	6010      	str	r0, [r2, #0]
 80020ea:	6051      	str	r1, [r2, #4]
 80020ec:	881b      	ldrh	r3, [r3, #0]
 80020ee:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"6,9,11,15,18");
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	3304      	adds	r3, #4
 80020f4:	4a82      	ldr	r2, [pc, #520]	; (8002300 <problem_fetch+0xfe0>)
 80020f6:	461c      	mov	r4, r3
 80020f8:	4613      	mov	r3, r2
 80020fa:	cb07      	ldmia	r3!, {r0, r1, r2}
 80020fc:	6020      	str	r0, [r4, #0]
 80020fe:	6061      	str	r1, [r4, #4]
 8002100:	60a2      	str	r2, [r4, #8]
 8002102:	781b      	ldrb	r3, [r3, #0]
 8002104:	7323      	strb	r3, [r4, #12]
			strcpy(p->startFinish, "s,d,d,d,e");
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	33d8      	adds	r3, #216	; 0xd8
 800210a:	497e      	ldr	r1, [pc, #504]	; (8002304 <problem_fetch+0xfe4>)
 800210c:	461a      	mov	r2, r3
 800210e:	460b      	mov	r3, r1
 8002110:	cb03      	ldmia	r3!, {r0, r1}
 8002112:	6010      	str	r0, [r2, #0]
 8002114:	6051      	str	r1, [r2, #4]
 8002116:	881b      	ldrh	r3, [r3, #0]
 8002118:	8113      	strh	r3, [r2, #8]
			strcpy(p->grade, "7B");
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	33cc      	adds	r3, #204	; 0xcc
 800211e:	4a7a      	ldr	r2, [pc, #488]	; (8002308 <problem_fetch+0xfe8>)
 8002120:	8811      	ldrh	r1, [r2, #0]
 8002122:	7892      	ldrb	r2, [r2, #2]
 8002124:	8019      	strh	r1, [r3, #0]
 8002126:	709a      	strb	r2, [r3, #2]
			break;
 8002128:	f018 be40 	b.w	801adac <problem_fetch+0x19a8c>
		case 100 :
			strcpy(p->name,"ACG30");
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	337c      	adds	r3, #124	; 0x7c
 8002130:	4a76      	ldr	r2, [pc, #472]	; (800230c <problem_fetch+0xfec>)
 8002132:	6810      	ldr	r0, [r2, #0]
 8002134:	6018      	str	r0, [r3, #0]
 8002136:	8892      	ldrh	r2, [r2, #4]
 8002138:	809a      	strh	r2, [r3, #4]
			p->moveSize = 8;
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	2208      	movs	r2, #8
 800213e:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"C,D,E,F,G,G,I,I");
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	3340      	adds	r3, #64	; 0x40
 8002144:	4a72      	ldr	r2, [pc, #456]	; (8002310 <problem_fetch+0xff0>)
 8002146:	461c      	mov	r4, r3
 8002148:	4615      	mov	r5, r2
 800214a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800214c:	6020      	str	r0, [r4, #0]
 800214e:	6061      	str	r1, [r4, #4]
 8002150:	60a2      	str	r2, [r4, #8]
 8002152:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,11,8,11,6,15,14,18");
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	3304      	adds	r3, #4
 8002158:	4a6e      	ldr	r2, [pc, #440]	; (8002314 <problem_fetch+0xff4>)
 800215a:	461d      	mov	r5, r3
 800215c:	4614      	mov	r4, r2
 800215e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002160:	6028      	str	r0, [r5, #0]
 8002162:	6069      	str	r1, [r5, #4]
 8002164:	60aa      	str	r2, [r5, #8]
 8002166:	60eb      	str	r3, [r5, #12]
 8002168:	6820      	ldr	r0, [r4, #0]
 800216a:	6128      	str	r0, [r5, #16]
 800216c:	7923      	ldrb	r3, [r4, #4]
 800216e:	752b      	strb	r3, [r5, #20]
			strcpy(p->startFinish, "s,d,d,d,s,d,d,e");
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	33d8      	adds	r3, #216	; 0xd8
 8002174:	4a68      	ldr	r2, [pc, #416]	; (8002318 <problem_fetch+0xff8>)
 8002176:	461c      	mov	r4, r3
 8002178:	4615      	mov	r5, r2
 800217a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800217c:	6020      	str	r0, [r4, #0]
 800217e:	6061      	str	r1, [r4, #4]
 8002180:	60a2      	str	r2, [r4, #8]
 8002182:	60e3      	str	r3, [r4, #12]
			strcpy(p->grade, "6C");
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	33cc      	adds	r3, #204	; 0xcc
 8002188:	4a64      	ldr	r2, [pc, #400]	; (800231c <problem_fetch+0xffc>)
 800218a:	8811      	ldrh	r1, [r2, #0]
 800218c:	7892      	ldrb	r2, [r2, #2]
 800218e:	8019      	strh	r1, [r3, #0]
 8002190:	709a      	strb	r2, [r3, #2]
			break;
 8002192:	f018 be0b 	b.w	801adac <problem_fetch+0x19a8c>
		case 101 :
			strcpy(p->name,"ACG31");
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	337c      	adds	r3, #124	; 0x7c
 800219a:	4a61      	ldr	r2, [pc, #388]	; (8002320 <problem_fetch+0x1000>)
 800219c:	6810      	ldr	r0, [r2, #0]
 800219e:	6018      	str	r0, [r3, #0]
 80021a0:	8892      	ldrh	r2, [r2, #4]
 80021a2:	809a      	strh	r2, [r3, #4]
			p->moveSize = 6;
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	2206      	movs	r2, #6
 80021a8:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"J,I,H,C,E,A");
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	3340      	adds	r3, #64	; 0x40
 80021ae:	4a5d      	ldr	r2, [pc, #372]	; (8002324 <problem_fetch+0x1004>)
 80021b0:	461c      	mov	r4, r3
 80021b2:	4613      	mov	r3, r2
 80021b4:	cb07      	ldmia	r3!, {r0, r1, r2}
 80021b6:	6020      	str	r0, [r4, #0]
 80021b8:	6061      	str	r1, [r4, #4]
 80021ba:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,10,13,13,16,18");
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	3304      	adds	r3, #4
 80021c0:	4a59      	ldr	r2, [pc, #356]	; (8002328 <problem_fetch+0x1008>)
 80021c2:	461d      	mov	r5, r3
 80021c4:	4614      	mov	r4, r2
 80021c6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80021c8:	6028      	str	r0, [r5, #0]
 80021ca:	6069      	str	r1, [r5, #4]
 80021cc:	60aa      	str	r2, [r5, #8]
 80021ce:	60eb      	str	r3, [r5, #12]
 80021d0:	7823      	ldrb	r3, [r4, #0]
 80021d2:	742b      	strb	r3, [r5, #16]
			strcpy(p->startFinish, "s,d,d,d,d,e");
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	33d8      	adds	r3, #216	; 0xd8
 80021d8:	4a54      	ldr	r2, [pc, #336]	; (800232c <problem_fetch+0x100c>)
 80021da:	461c      	mov	r4, r3
 80021dc:	4613      	mov	r3, r2
 80021de:	cb07      	ldmia	r3!, {r0, r1, r2}
 80021e0:	6020      	str	r0, [r4, #0]
 80021e2:	6061      	str	r1, [r4, #4]
 80021e4:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade, "6C+");
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	33cc      	adds	r3, #204	; 0xcc
 80021ea:	4a51      	ldr	r2, [pc, #324]	; (8002330 <problem_fetch+0x1010>)
 80021ec:	6810      	ldr	r0, [r2, #0]
 80021ee:	6018      	str	r0, [r3, #0]
			break;
 80021f0:	f018 bddc 	b.w	801adac <problem_fetch+0x19a8c>
		case 102 :
			strcpy(p->name,"THIS IS NOW...");
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	337c      	adds	r3, #124	; 0x7c
 80021f8:	4a4e      	ldr	r2, [pc, #312]	; (8002334 <problem_fetch+0x1014>)
 80021fa:	461c      	mov	r4, r3
 80021fc:	4613      	mov	r3, r2
 80021fe:	cb07      	ldmia	r3!, {r0, r1, r2}
 8002200:	6020      	str	r0, [r4, #0]
 8002202:	6061      	str	r1, [r4, #4]
 8002204:	60a2      	str	r2, [r4, #8]
 8002206:	881a      	ldrh	r2, [r3, #0]
 8002208:	789b      	ldrb	r3, [r3, #2]
 800220a:	81a2      	strh	r2, [r4, #12]
 800220c:	73a3      	strb	r3, [r4, #14]
			p->moveSize = 6;
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	2206      	movs	r2, #6
 8002212:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"H,I,E,D,B,D");
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	3340      	adds	r3, #64	; 0x40
 8002218:	4a47      	ldr	r2, [pc, #284]	; (8002338 <problem_fetch+0x1018>)
 800221a:	461c      	mov	r4, r3
 800221c:	4613      	mov	r3, r2
 800221e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8002220:	6020      	str	r0, [r4, #0]
 8002222:	6061      	str	r1, [r4, #4]
 8002224:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,10,12,15,15,18");
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	3304      	adds	r3, #4
 800222a:	4a44      	ldr	r2, [pc, #272]	; (800233c <problem_fetch+0x101c>)
 800222c:	461d      	mov	r5, r3
 800222e:	4614      	mov	r4, r2
 8002230:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002232:	6028      	str	r0, [r5, #0]
 8002234:	6069      	str	r1, [r5, #4]
 8002236:	60aa      	str	r2, [r5, #8]
 8002238:	60eb      	str	r3, [r5, #12]
 800223a:	7823      	ldrb	r3, [r4, #0]
 800223c:	742b      	strb	r3, [r5, #16]
			strcpy(p->startFinish, "s,d,d,d,d,e");
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	33d8      	adds	r3, #216	; 0xd8
 8002242:	4a3a      	ldr	r2, [pc, #232]	; (800232c <problem_fetch+0x100c>)
 8002244:	461c      	mov	r4, r3
 8002246:	4613      	mov	r3, r2
 8002248:	cb07      	ldmia	r3!, {r0, r1, r2}
 800224a:	6020      	str	r0, [r4, #0]
 800224c:	6061      	str	r1, [r4, #4]
 800224e:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade, "6C+");
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	33cc      	adds	r3, #204	; 0xcc
 8002254:	4a36      	ldr	r2, [pc, #216]	; (8002330 <problem_fetch+0x1010>)
 8002256:	6810      	ldr	r0, [r2, #0]
 8002258:	6018      	str	r0, [r3, #0]
			break;
 800225a:	f018 bda7 	b.w	801adac <problem_fetch+0x19a8c>
		case 103 :
			strcpy(p->name,"BATTLE OF THE PUDGE");
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	337c      	adds	r3, #124	; 0x7c
 8002262:	4a37      	ldr	r2, [pc, #220]	; (8002340 <problem_fetch+0x1020>)
 8002264:	461d      	mov	r5, r3
 8002266:	4614      	mov	r4, r2
 8002268:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800226a:	6028      	str	r0, [r5, #0]
 800226c:	6069      	str	r1, [r5, #4]
 800226e:	60aa      	str	r2, [r5, #8]
 8002270:	60eb      	str	r3, [r5, #12]
 8002272:	6820      	ldr	r0, [r4, #0]
 8002274:	6128      	str	r0, [r5, #16]
			p->moveSize = 7;
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	2207      	movs	r2, #7
 800227a:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"A,C,D,E,E,H,I");
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	3340      	adds	r3, #64	; 0x40
 8002280:	4a30      	ldr	r2, [pc, #192]	; (8002344 <problem_fetch+0x1024>)
 8002282:	461c      	mov	r4, r3
 8002284:	4613      	mov	r3, r2
 8002286:	cb07      	ldmia	r3!, {r0, r1, r2}
 8002288:	6020      	str	r0, [r4, #0]
 800228a:	6061      	str	r1, [r4, #4]
 800228c:	60a2      	str	r2, [r4, #8]
 800228e:	881b      	ldrh	r3, [r3, #0]
 8002290:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"18,5,11,8,16,5,10");
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	3304      	adds	r3, #4
 8002296:	4a2c      	ldr	r2, [pc, #176]	; (8002348 <problem_fetch+0x1028>)
 8002298:	461d      	mov	r5, r3
 800229a:	4614      	mov	r4, r2
 800229c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800229e:	6028      	str	r0, [r5, #0]
 80022a0:	6069      	str	r1, [r5, #4]
 80022a2:	60aa      	str	r2, [r5, #8]
 80022a4:	60eb      	str	r3, [r5, #12]
 80022a6:	8823      	ldrh	r3, [r4, #0]
 80022a8:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish, "e,s,d,d,d,s,d");
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	33d8      	adds	r3, #216	; 0xd8
 80022ae:	4a27      	ldr	r2, [pc, #156]	; (800234c <problem_fetch+0x102c>)
 80022b0:	461c      	mov	r4, r3
 80022b2:	4613      	mov	r3, r2
 80022b4:	cb07      	ldmia	r3!, {r0, r1, r2}
 80022b6:	6020      	str	r0, [r4, #0]
 80022b8:	6061      	str	r1, [r4, #4]
 80022ba:	60a2      	str	r2, [r4, #8]
 80022bc:	881b      	ldrh	r3, [r3, #0]
 80022be:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade, "7A+");
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	33cc      	adds	r3, #204	; 0xcc
 80022c4:	4a22      	ldr	r2, [pc, #136]	; (8002350 <problem_fetch+0x1030>)
 80022c6:	6810      	ldr	r0, [r2, #0]
 80022c8:	6018      	str	r0, [r3, #0]
			break;
 80022ca:	f018 bd6f 	b.w	801adac <problem_fetch+0x19a8c>
 80022ce:	bf00      	nop
 80022d0:	08021260 	.word	0x08021260
 80022d4:	0802127c 	.word	0x0802127c
 80022d8:	0802128c 	.word	0x0802128c
 80022dc:	080212a0 	.word	0x080212a0
 80022e0:	080212b0 	.word	0x080212b0
 80022e4:	080212b4 	.word	0x080212b4
 80022e8:	080212c0 	.word	0x080212c0
 80022ec:	080212d0 	.word	0x080212d0
 80022f0:	080212e4 	.word	0x080212e4
 80022f4:	080212f4 	.word	0x080212f4
 80022f8:	080212f8 	.word	0x080212f8
 80022fc:	08021304 	.word	0x08021304
 8002300:	08021310 	.word	0x08021310
 8002304:	08021320 	.word	0x08021320
 8002308:	0802132c 	.word	0x0802132c
 800230c:	08021330 	.word	0x08021330
 8002310:	08021338 	.word	0x08021338
 8002314:	08021348 	.word	0x08021348
 8002318:	08021360 	.word	0x08021360
 800231c:	08021370 	.word	0x08021370
 8002320:	08021374 	.word	0x08021374
 8002324:	0802137c 	.word	0x0802137c
 8002328:	08021388 	.word	0x08021388
 800232c:	0802139c 	.word	0x0802139c
 8002330:	080213a8 	.word	0x080213a8
 8002334:	080213ac 	.word	0x080213ac
 8002338:	080213bc 	.word	0x080213bc
 800233c:	080213c8 	.word	0x080213c8
 8002340:	080213dc 	.word	0x080213dc
 8002344:	080213f0 	.word	0x080213f0
 8002348:	08021400 	.word	0x08021400
 800234c:	08021414 	.word	0x08021414
 8002350:	08021424 	.word	0x08021424
		case 104 :
			strcpy(p->name,"ACG37");
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	337c      	adds	r3, #124	; 0x7c
 8002358:	4ab3      	ldr	r2, [pc, #716]	; (8002628 <problem_fetch+0x1308>)
 800235a:	6810      	ldr	r0, [r2, #0]
 800235c:	6018      	str	r0, [r3, #0]
 800235e:	8892      	ldrh	r2, [r2, #4]
 8002360:	809a      	strh	r2, [r3, #4]
			p->moveSize = 8;
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	2208      	movs	r2, #8
 8002366:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"H,J,I,J,G,C,C,A");
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	3340      	adds	r3, #64	; 0x40
 800236c:	4aaf      	ldr	r2, [pc, #700]	; (800262c <problem_fetch+0x130c>)
 800236e:	461c      	mov	r4, r3
 8002370:	4615      	mov	r5, r2
 8002372:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002374:	6020      	str	r0, [r4, #0]
 8002376:	6061      	str	r1, [r4, #4]
 8002378:	60a2      	str	r2, [r4, #8]
 800237a:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,7,10,13,14,16,13,18");
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	3304      	adds	r3, #4
 8002380:	4aab      	ldr	r2, [pc, #684]	; (8002630 <problem_fetch+0x1310>)
 8002382:	461d      	mov	r5, r3
 8002384:	4614      	mov	r4, r2
 8002386:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002388:	6028      	str	r0, [r5, #0]
 800238a:	6069      	str	r1, [r5, #4]
 800238c:	60aa      	str	r2, [r5, #8]
 800238e:	60eb      	str	r3, [r5, #12]
 8002390:	6820      	ldr	r0, [r4, #0]
 8002392:	6128      	str	r0, [r5, #16]
 8002394:	88a3      	ldrh	r3, [r4, #4]
 8002396:	82ab      	strh	r3, [r5, #20]
			strcpy(p->startFinish, "s,d,d,d,d,d,d,e");
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	33d8      	adds	r3, #216	; 0xd8
 800239c:	4aa5      	ldr	r2, [pc, #660]	; (8002634 <problem_fetch+0x1314>)
 800239e:	461c      	mov	r4, r3
 80023a0:	4615      	mov	r5, r2
 80023a2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80023a4:	6020      	str	r0, [r4, #0]
 80023a6:	6061      	str	r1, [r4, #4]
 80023a8:	60a2      	str	r2, [r4, #8]
 80023aa:	60e3      	str	r3, [r4, #12]
			strcpy(p->grade, "7A");
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	33cc      	adds	r3, #204	; 0xcc
 80023b0:	4aa1      	ldr	r2, [pc, #644]	; (8002638 <problem_fetch+0x1318>)
 80023b2:	8811      	ldrh	r1, [r2, #0]
 80023b4:	7892      	ldrb	r2, [r2, #2]
 80023b6:	8019      	strh	r1, [r3, #0]
 80023b8:	709a      	strb	r2, [r3, #2]
			break;
 80023ba:	f018 bcf7 	b.w	801adac <problem_fetch+0x19a8c>
		case 105 :
			strcpy(p->name,"CAROLYN");
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	337c      	adds	r3, #124	; 0x7c
 80023c2:	499e      	ldr	r1, [pc, #632]	; (800263c <problem_fetch+0x131c>)
 80023c4:	461a      	mov	r2, r3
 80023c6:	460b      	mov	r3, r1
 80023c8:	cb03      	ldmia	r3!, {r0, r1}
 80023ca:	6010      	str	r0, [r2, #0]
 80023cc:	6051      	str	r1, [r2, #4]
			p->moveSize = 7;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	2207      	movs	r2, #7
 80023d2:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"G,J,H,C,I,G,I");
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	3340      	adds	r3, #64	; 0x40
 80023d8:	4a99      	ldr	r2, [pc, #612]	; (8002640 <problem_fetch+0x1320>)
 80023da:	461c      	mov	r4, r3
 80023dc:	4613      	mov	r3, r2
 80023de:	cb07      	ldmia	r3!, {r0, r1, r2}
 80023e0:	6020      	str	r0, [r4, #0]
 80023e2:	6061      	str	r1, [r4, #4]
 80023e4:	60a2      	str	r2, [r4, #8]
 80023e6:	881b      	ldrh	r3, [r3, #0]
 80023e8:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,7,10,13,14,17,18");
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	3304      	adds	r3, #4
 80023ee:	4a95      	ldr	r2, [pc, #596]	; (8002644 <problem_fetch+0x1324>)
 80023f0:	461d      	mov	r5, r3
 80023f2:	4614      	mov	r4, r2
 80023f4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80023f6:	6028      	str	r0, [r5, #0]
 80023f8:	6069      	str	r1, [r5, #4]
 80023fa:	60aa      	str	r2, [r5, #8]
 80023fc:	60eb      	str	r3, [r5, #12]
 80023fe:	8823      	ldrh	r3, [r4, #0]
 8002400:	78a2      	ldrb	r2, [r4, #2]
 8002402:	822b      	strh	r3, [r5, #16]
 8002404:	4613      	mov	r3, r2
 8002406:	74ab      	strb	r3, [r5, #18]
			strcpy(p->startFinish, "s,d,d,d,d,d,e");
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	33d8      	adds	r3, #216	; 0xd8
 800240c:	4a8e      	ldr	r2, [pc, #568]	; (8002648 <problem_fetch+0x1328>)
 800240e:	461c      	mov	r4, r3
 8002410:	4613      	mov	r3, r2
 8002412:	cb07      	ldmia	r3!, {r0, r1, r2}
 8002414:	6020      	str	r0, [r4, #0]
 8002416:	6061      	str	r1, [r4, #4]
 8002418:	60a2      	str	r2, [r4, #8]
 800241a:	881b      	ldrh	r3, [r3, #0]
 800241c:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade, "6B+");
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	33cc      	adds	r3, #204	; 0xcc
 8002422:	4a8a      	ldr	r2, [pc, #552]	; (800264c <problem_fetch+0x132c>)
 8002424:	6810      	ldr	r0, [r2, #0]
 8002426:	6018      	str	r0, [r3, #0]
			break;
 8002428:	f018 bcc0 	b.w	801adac <problem_fetch+0x19a8c>
		case 106 :
			strcpy(p->name,"AB1");
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	337c      	adds	r3, #124	; 0x7c
 8002430:	4a87      	ldr	r2, [pc, #540]	; (8002650 <problem_fetch+0x1330>)
 8002432:	6810      	ldr	r0, [r2, #0]
 8002434:	6018      	str	r0, [r3, #0]
			p->moveSize = 8;
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	2208      	movs	r2, #8
 800243a:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"G,E,E,A,E,A,D,A");
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	3340      	adds	r3, #64	; 0x40
 8002440:	4a84      	ldr	r2, [pc, #528]	; (8002654 <problem_fetch+0x1334>)
 8002442:	461c      	mov	r4, r3
 8002444:	4615      	mov	r5, r2
 8002446:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002448:	6020      	str	r0, [r4, #0]
 800244a:	6061      	str	r1, [r4, #4]
 800244c:	60a2      	str	r2, [r4, #8]
 800244e:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,6,8,9,12,14,15,18");
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	3304      	adds	r3, #4
 8002454:	4a80      	ldr	r2, [pc, #512]	; (8002658 <problem_fetch+0x1338>)
 8002456:	461d      	mov	r5, r3
 8002458:	4614      	mov	r4, r2
 800245a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800245c:	6028      	str	r0, [r5, #0]
 800245e:	6069      	str	r1, [r5, #4]
 8002460:	60aa      	str	r2, [r5, #8]
 8002462:	60eb      	str	r3, [r5, #12]
 8002464:	6820      	ldr	r0, [r4, #0]
 8002466:	6128      	str	r0, [r5, #16]
			strcpy(p->startFinish, "s,s,d,d,d,d,d,e");
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	33d8      	adds	r3, #216	; 0xd8
 800246c:	4a7b      	ldr	r2, [pc, #492]	; (800265c <problem_fetch+0x133c>)
 800246e:	461c      	mov	r4, r3
 8002470:	4615      	mov	r5, r2
 8002472:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002474:	6020      	str	r0, [r4, #0]
 8002476:	6061      	str	r1, [r4, #4]
 8002478:	60a2      	str	r2, [r4, #8]
 800247a:	60e3      	str	r3, [r4, #12]
			strcpy(p->grade, "6B+");
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	33cc      	adds	r3, #204	; 0xcc
 8002480:	4a72      	ldr	r2, [pc, #456]	; (800264c <problem_fetch+0x132c>)
 8002482:	6810      	ldr	r0, [r2, #0]
 8002484:	6018      	str	r0, [r3, #0]
			break;
 8002486:	f018 bc91 	b.w	801adac <problem_fetch+0x19a8c>
		case 107 :
			strcpy(p->name,"ACG43");
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	337c      	adds	r3, #124	; 0x7c
 800248e:	4a74      	ldr	r2, [pc, #464]	; (8002660 <problem_fetch+0x1340>)
 8002490:	6810      	ldr	r0, [r2, #0]
 8002492:	6018      	str	r0, [r3, #0]
 8002494:	8892      	ldrh	r2, [r2, #4]
 8002496:	809a      	strh	r2, [r3, #4]
			p->moveSize = 8;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	2208      	movs	r2, #8
 800249c:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"J,I,D,E,A,A,B,D");
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	3340      	adds	r3, #64	; 0x40
 80024a2:	4a70      	ldr	r2, [pc, #448]	; (8002664 <problem_fetch+0x1344>)
 80024a4:	461c      	mov	r4, r3
 80024a6:	4615      	mov	r5, r2
 80024a8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80024aa:	6020      	str	r0, [r4, #0]
 80024ac:	6061      	str	r1, [r4, #4]
 80024ae:	60a2      	str	r2, [r4, #8]
 80024b0:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,10,11,14,14,9,6,18");
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	3304      	adds	r3, #4
 80024b6:	4a6c      	ldr	r2, [pc, #432]	; (8002668 <problem_fetch+0x1348>)
 80024b8:	461d      	mov	r5, r3
 80024ba:	4614      	mov	r4, r2
 80024bc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80024be:	6028      	str	r0, [r5, #0]
 80024c0:	6069      	str	r1, [r5, #4]
 80024c2:	60aa      	str	r2, [r5, #8]
 80024c4:	60eb      	str	r3, [r5, #12]
 80024c6:	6820      	ldr	r0, [r4, #0]
 80024c8:	6128      	str	r0, [r5, #16]
 80024ca:	7923      	ldrb	r3, [r4, #4]
 80024cc:	752b      	strb	r3, [r5, #20]
			strcpy(p->startFinish, "s,d,d,d,d,d,d,e");
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	33d8      	adds	r3, #216	; 0xd8
 80024d2:	4a58      	ldr	r2, [pc, #352]	; (8002634 <problem_fetch+0x1314>)
 80024d4:	461c      	mov	r4, r3
 80024d6:	4615      	mov	r5, r2
 80024d8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80024da:	6020      	str	r0, [r4, #0]
 80024dc:	6061      	str	r1, [r4, #4]
 80024de:	60a2      	str	r2, [r4, #8]
 80024e0:	60e3      	str	r3, [r4, #12]
			strcpy(p->grade, "6C+");
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	33cc      	adds	r3, #204	; 0xcc
 80024e6:	4a61      	ldr	r2, [pc, #388]	; (800266c <problem_fetch+0x134c>)
 80024e8:	6810      	ldr	r0, [r2, #0]
 80024ea:	6018      	str	r0, [r3, #0]
			break;
 80024ec:	f018 bc5e 	b.w	801adac <problem_fetch+0x19a8c>
		case 108 :
			strcpy(p->name,"LIP GRIP");
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	337c      	adds	r3, #124	; 0x7c
 80024f4:	495e      	ldr	r1, [pc, #376]	; (8002670 <problem_fetch+0x1350>)
 80024f6:	461a      	mov	r2, r3
 80024f8:	460b      	mov	r3, r1
 80024fa:	cb03      	ldmia	r3!, {r0, r1}
 80024fc:	6010      	str	r0, [r2, #0]
 80024fe:	6051      	str	r1, [r2, #4]
 8002500:	781b      	ldrb	r3, [r3, #0]
 8002502:	7213      	strb	r3, [r2, #8]
			p->moveSize = 6;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	2206      	movs	r2, #6
 8002508:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"J,G,K,H,K,I");
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	3340      	adds	r3, #64	; 0x40
 800250e:	4a59      	ldr	r2, [pc, #356]	; (8002674 <problem_fetch+0x1354>)
 8002510:	461c      	mov	r4, r3
 8002512:	4613      	mov	r3, r2
 8002514:	cb07      	ldmia	r3!, {r0, r1, r2}
 8002516:	6020      	str	r0, [r4, #0]
 8002518:	6061      	str	r1, [r4, #4]
 800251a:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,4,9,13,14,18");
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	3304      	adds	r3, #4
 8002520:	4a55      	ldr	r2, [pc, #340]	; (8002678 <problem_fetch+0x1358>)
 8002522:	461c      	mov	r4, r3
 8002524:	4613      	mov	r3, r2
 8002526:	cb07      	ldmia	r3!, {r0, r1, r2}
 8002528:	6020      	str	r0, [r4, #0]
 800252a:	6061      	str	r1, [r4, #4]
 800252c:	60a2      	str	r2, [r4, #8]
 800252e:	881a      	ldrh	r2, [r3, #0]
 8002530:	789b      	ldrb	r3, [r3, #2]
 8002532:	81a2      	strh	r2, [r4, #12]
 8002534:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish, "s,d,d,d,d,e");
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	33d8      	adds	r3, #216	; 0xd8
 800253a:	4a50      	ldr	r2, [pc, #320]	; (800267c <problem_fetch+0x135c>)
 800253c:	461c      	mov	r4, r3
 800253e:	4613      	mov	r3, r2
 8002540:	cb07      	ldmia	r3!, {r0, r1, r2}
 8002542:	6020      	str	r0, [r4, #0]
 8002544:	6061      	str	r1, [r4, #4]
 8002546:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade, "7A+");
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	33cc      	adds	r3, #204	; 0xcc
 800254c:	4a4c      	ldr	r2, [pc, #304]	; (8002680 <problem_fetch+0x1360>)
 800254e:	6810      	ldr	r0, [r2, #0]
 8002550:	6018      	str	r0, [r3, #0]
			break;
 8002552:	f018 bc2b 	b.w	801adac <problem_fetch+0x19a8c>
		case 109 :
			strcpy(p->name,"COLPA DEL NONNO");
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	337c      	adds	r3, #124	; 0x7c
 800255a:	4a4a      	ldr	r2, [pc, #296]	; (8002684 <problem_fetch+0x1364>)
 800255c:	461c      	mov	r4, r3
 800255e:	4615      	mov	r5, r2
 8002560:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002562:	6020      	str	r0, [r4, #0]
 8002564:	6061      	str	r1, [r4, #4]
 8002566:	60a2      	str	r2, [r4, #8]
 8002568:	60e3      	str	r3, [r4, #12]
			p->moveSize = 7;
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	2207      	movs	r2, #7
 800256e:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"B,C,E,B,E,B,D");
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	3340      	adds	r3, #64	; 0x40
 8002574:	4a44      	ldr	r2, [pc, #272]	; (8002688 <problem_fetch+0x1368>)
 8002576:	461c      	mov	r4, r3
 8002578:	4613      	mov	r3, r2
 800257a:	cb07      	ldmia	r3!, {r0, r1, r2}
 800257c:	6020      	str	r0, [r4, #0]
 800257e:	6061      	str	r1, [r4, #4]
 8002580:	60a2      	str	r2, [r4, #8]
 8002582:	881b      	ldrh	r3, [r3, #0]
 8002584:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"6,5,9,10,14,15,18");
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	3304      	adds	r3, #4
 800258a:	4a40      	ldr	r2, [pc, #256]	; (800268c <problem_fetch+0x136c>)
 800258c:	461d      	mov	r5, r3
 800258e:	4614      	mov	r4, r2
 8002590:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002592:	6028      	str	r0, [r5, #0]
 8002594:	6069      	str	r1, [r5, #4]
 8002596:	60aa      	str	r2, [r5, #8]
 8002598:	60eb      	str	r3, [r5, #12]
 800259a:	8823      	ldrh	r3, [r4, #0]
 800259c:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish, "s,s,d,d,d,d,e");
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	33d8      	adds	r3, #216	; 0xd8
 80025a2:	4a3b      	ldr	r2, [pc, #236]	; (8002690 <problem_fetch+0x1370>)
 80025a4:	461c      	mov	r4, r3
 80025a6:	4613      	mov	r3, r2
 80025a8:	cb07      	ldmia	r3!, {r0, r1, r2}
 80025aa:	6020      	str	r0, [r4, #0]
 80025ac:	6061      	str	r1, [r4, #4]
 80025ae:	60a2      	str	r2, [r4, #8]
 80025b0:	881b      	ldrh	r3, [r3, #0]
 80025b2:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade, "6B+");
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	33cc      	adds	r3, #204	; 0xcc
 80025b8:	4a24      	ldr	r2, [pc, #144]	; (800264c <problem_fetch+0x132c>)
 80025ba:	6810      	ldr	r0, [r2, #0]
 80025bc:	6018      	str	r0, [r3, #0]
			break;
 80025be:	f018 bbf5 	b.w	801adac <problem_fetch+0x19a8c>
		case 11 :
			strcpy(p->name,"HAN DUO");
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	337c      	adds	r3, #124	; 0x7c
 80025c6:	4933      	ldr	r1, [pc, #204]	; (8002694 <problem_fetch+0x1374>)
 80025c8:	461a      	mov	r2, r3
 80025ca:	460b      	mov	r3, r1
 80025cc:	cb03      	ldmia	r3!, {r0, r1}
 80025ce:	6010      	str	r0, [r2, #0]
 80025d0:	6051      	str	r1, [r2, #4]
			p->moveSize = 5;
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	2205      	movs	r2, #5
 80025d6:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"E,F,E,H,I");
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	3340      	adds	r3, #64	; 0x40
 80025dc:	492e      	ldr	r1, [pc, #184]	; (8002698 <problem_fetch+0x1378>)
 80025de:	461a      	mov	r2, r3
 80025e0:	460b      	mov	r3, r1
 80025e2:	cb03      	ldmia	r3!, {r0, r1}
 80025e4:	6010      	str	r0, [r2, #0]
 80025e6:	6051      	str	r1, [r2, #4]
 80025e8:	881b      	ldrh	r3, [r3, #0]
 80025ea:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"6,11,14,13,18");
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	3304      	adds	r3, #4
 80025f0:	4a2a      	ldr	r2, [pc, #168]	; (800269c <problem_fetch+0x137c>)
 80025f2:	461c      	mov	r4, r3
 80025f4:	4613      	mov	r3, r2
 80025f6:	cb07      	ldmia	r3!, {r0, r1, r2}
 80025f8:	6020      	str	r0, [r4, #0]
 80025fa:	6061      	str	r1, [r4, #4]
 80025fc:	60a2      	str	r2, [r4, #8]
 80025fe:	881b      	ldrh	r3, [r3, #0]
 8002600:	81a3      	strh	r3, [r4, #12]
			strcpy(p->startFinish, "s,d,d,d,e");
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	33d8      	adds	r3, #216	; 0xd8
 8002606:	4926      	ldr	r1, [pc, #152]	; (80026a0 <problem_fetch+0x1380>)
 8002608:	461a      	mov	r2, r3
 800260a:	460b      	mov	r3, r1
 800260c:	cb03      	ldmia	r3!, {r0, r1}
 800260e:	6010      	str	r0, [r2, #0]
 8002610:	6051      	str	r1, [r2, #4]
 8002612:	881b      	ldrh	r3, [r3, #0]
 8002614:	8113      	strh	r3, [r2, #8]
			strcpy(p->grade, "7C");
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	33cc      	adds	r3, #204	; 0xcc
 800261a:	4a22      	ldr	r2, [pc, #136]	; (80026a4 <problem_fetch+0x1384>)
 800261c:	8811      	ldrh	r1, [r2, #0]
 800261e:	7892      	ldrb	r2, [r2, #2]
 8002620:	8019      	strh	r1, [r3, #0]
 8002622:	709a      	strb	r2, [r3, #2]
			break;
 8002624:	f018 bbc2 	b.w	801adac <problem_fetch+0x19a8c>
 8002628:	08021428 	.word	0x08021428
 800262c:	08021430 	.word	0x08021430
 8002630:	08021440 	.word	0x08021440
 8002634:	08021458 	.word	0x08021458
 8002638:	080212f4 	.word	0x080212f4
 800263c:	08021468 	.word	0x08021468
 8002640:	08021470 	.word	0x08021470
 8002644:	08021480 	.word	0x08021480
 8002648:	08021494 	.word	0x08021494
 800264c:	080212b0 	.word	0x080212b0
 8002650:	080214a4 	.word	0x080214a4
 8002654:	080214a8 	.word	0x080214a8
 8002658:	080214b8 	.word	0x080214b8
 800265c:	080214cc 	.word	0x080214cc
 8002660:	080214dc 	.word	0x080214dc
 8002664:	080214e4 	.word	0x080214e4
 8002668:	080214f4 	.word	0x080214f4
 800266c:	080213a8 	.word	0x080213a8
 8002670:	0802150c 	.word	0x0802150c
 8002674:	08021518 	.word	0x08021518
 8002678:	08021524 	.word	0x08021524
 800267c:	0802139c 	.word	0x0802139c
 8002680:	08021424 	.word	0x08021424
 8002684:	08021534 	.word	0x08021534
 8002688:	08021544 	.word	0x08021544
 800268c:	08021554 	.word	0x08021554
 8002690:	080212a0 	.word	0x080212a0
 8002694:	08021568 	.word	0x08021568
 8002698:	08021570 	.word	0x08021570
 800269c:	0802157c 	.word	0x0802157c
 80026a0:	08021320 	.word	0x08021320
 80026a4:	0802158c 	.word	0x0802158c
		case 110 :
			strcpy(p->name,"GS VR #1");
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	337c      	adds	r3, #124	; 0x7c
 80026ac:	49c0      	ldr	r1, [pc, #768]	; (80029b0 <problem_fetch+0x1690>)
 80026ae:	461a      	mov	r2, r3
 80026b0:	460b      	mov	r3, r1
 80026b2:	cb03      	ldmia	r3!, {r0, r1}
 80026b4:	6010      	str	r0, [r2, #0]
 80026b6:	6051      	str	r1, [r2, #4]
 80026b8:	781b      	ldrb	r3, [r3, #0]
 80026ba:	7213      	strb	r3, [r2, #8]
			p->moveSize = 8;
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	2208      	movs	r2, #8
 80026c0:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"G,E,E,B,E,C,E,D");
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	3340      	adds	r3, #64	; 0x40
 80026c6:	4abb      	ldr	r2, [pc, #748]	; (80029b4 <problem_fetch+0x1694>)
 80026c8:	461c      	mov	r4, r3
 80026ca:	4615      	mov	r5, r2
 80026cc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80026ce:	6020      	str	r0, [r4, #0]
 80026d0:	6061      	str	r1, [r4, #4]
 80026d2:	60a2      	str	r2, [r4, #8]
 80026d4:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,6,8,10,12,13,16,18");
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	3304      	adds	r3, #4
 80026da:	4ab7      	ldr	r2, [pc, #732]	; (80029b8 <problem_fetch+0x1698>)
 80026dc:	461d      	mov	r5, r3
 80026de:	4614      	mov	r4, r2
 80026e0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80026e2:	6028      	str	r0, [r5, #0]
 80026e4:	6069      	str	r1, [r5, #4]
 80026e6:	60aa      	str	r2, [r5, #8]
 80026e8:	60eb      	str	r3, [r5, #12]
 80026ea:	6820      	ldr	r0, [r4, #0]
 80026ec:	6128      	str	r0, [r5, #16]
 80026ee:	7923      	ldrb	r3, [r4, #4]
 80026f0:	752b      	strb	r3, [r5, #20]
			strcpy(p->startFinish, "s,s,d,d,d,d,d,e");
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	33d8      	adds	r3, #216	; 0xd8
 80026f6:	4ab1      	ldr	r2, [pc, #708]	; (80029bc <problem_fetch+0x169c>)
 80026f8:	461c      	mov	r4, r3
 80026fa:	4615      	mov	r5, r2
 80026fc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80026fe:	6020      	str	r0, [r4, #0]
 8002700:	6061      	str	r1, [r4, #4]
 8002702:	60a2      	str	r2, [r4, #8]
 8002704:	60e3      	str	r3, [r4, #12]
			strcpy(p->grade, "6B+");
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	33cc      	adds	r3, #204	; 0xcc
 800270a:	4aad      	ldr	r2, [pc, #692]	; (80029c0 <problem_fetch+0x16a0>)
 800270c:	6810      	ldr	r0, [r2, #0]
 800270e:	6018      	str	r0, [r3, #0]
			break;
 8002710:	f018 bb4c 	b.w	801adac <problem_fetch+0x19a8c>
		case 111 :
			strcpy(p->name,"ACG46");
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	337c      	adds	r3, #124	; 0x7c
 8002718:	4aaa      	ldr	r2, [pc, #680]	; (80029c4 <problem_fetch+0x16a4>)
 800271a:	6810      	ldr	r0, [r2, #0]
 800271c:	6018      	str	r0, [r3, #0]
 800271e:	8892      	ldrh	r2, [r2, #4]
 8002720:	809a      	strh	r2, [r3, #4]
			p->moveSize = 10;
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	220a      	movs	r2, #10
 8002726:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"C,B,A,B,G,F,I,E,I,D");
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	3340      	adds	r3, #64	; 0x40
 800272c:	4aa6      	ldr	r2, [pc, #664]	; (80029c8 <problem_fetch+0x16a8>)
 800272e:	461d      	mov	r5, r3
 8002730:	4614      	mov	r4, r2
 8002732:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002734:	6028      	str	r0, [r5, #0]
 8002736:	6069      	str	r1, [r5, #4]
 8002738:	60aa      	str	r2, [r5, #8]
 800273a:	60eb      	str	r3, [r5, #12]
 800273c:	6820      	ldr	r0, [r4, #0]
 800273e:	6128      	str	r0, [r5, #16]
			strcpy(p->moveNumbers,"5,6,9,10,10,13,14,16,7,18");
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	3304      	adds	r3, #4
 8002744:	4aa1      	ldr	r2, [pc, #644]	; (80029cc <problem_fetch+0x16ac>)
 8002746:	461d      	mov	r5, r3
 8002748:	4614      	mov	r4, r2
 800274a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800274c:	6028      	str	r0, [r5, #0]
 800274e:	6069      	str	r1, [r5, #4]
 8002750:	60aa      	str	r2, [r5, #8]
 8002752:	60eb      	str	r3, [r5, #12]
 8002754:	cc03      	ldmia	r4!, {r0, r1}
 8002756:	6128      	str	r0, [r5, #16]
 8002758:	6169      	str	r1, [r5, #20]
 800275a:	8823      	ldrh	r3, [r4, #0]
 800275c:	832b      	strh	r3, [r5, #24]
			strcpy(p->startFinish, "s,s,d,d,d,d,d,d,d,e");
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	33d8      	adds	r3, #216	; 0xd8
 8002762:	4a9b      	ldr	r2, [pc, #620]	; (80029d0 <problem_fetch+0x16b0>)
 8002764:	461d      	mov	r5, r3
 8002766:	4614      	mov	r4, r2
 8002768:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800276a:	6028      	str	r0, [r5, #0]
 800276c:	6069      	str	r1, [r5, #4]
 800276e:	60aa      	str	r2, [r5, #8]
 8002770:	60eb      	str	r3, [r5, #12]
 8002772:	6820      	ldr	r0, [r4, #0]
 8002774:	6128      	str	r0, [r5, #16]
			strcpy(p->grade, "6C");
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	33cc      	adds	r3, #204	; 0xcc
 800277a:	4a96      	ldr	r2, [pc, #600]	; (80029d4 <problem_fetch+0x16b4>)
 800277c:	8811      	ldrh	r1, [r2, #0]
 800277e:	7892      	ldrb	r2, [r2, #2]
 8002780:	8019      	strh	r1, [r3, #0]
 8002782:	709a      	strb	r2, [r3, #2]
			break;
 8002784:	f018 bb12 	b.w	801adac <problem_fetch+0x19a8c>
		case 112 :
			strcpy(p->name,"UNKNOWN");
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	337c      	adds	r3, #124	; 0x7c
 800278c:	4992      	ldr	r1, [pc, #584]	; (80029d8 <problem_fetch+0x16b8>)
 800278e:	461a      	mov	r2, r3
 8002790:	460b      	mov	r3, r1
 8002792:	cb03      	ldmia	r3!, {r0, r1}
 8002794:	6010      	str	r0, [r2, #0]
 8002796:	6051      	str	r1, [r2, #4]
			p->moveSize = 8;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	2208      	movs	r2, #8
 800279c:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"G,D,H,J,E,I,D,I");
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	3340      	adds	r3, #64	; 0x40
 80027a2:	4a8e      	ldr	r2, [pc, #568]	; (80029dc <problem_fetch+0x16bc>)
 80027a4:	461c      	mov	r4, r3
 80027a6:	4615      	mov	r5, r2
 80027a8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80027aa:	6020      	str	r0, [r4, #0]
 80027ac:	6061      	str	r1, [r4, #4]
 80027ae:	60a2      	str	r2, [r4, #8]
 80027b0:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,7,8,7,12,15,18,18");
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	3304      	adds	r3, #4
 80027b6:	4a8a      	ldr	r2, [pc, #552]	; (80029e0 <problem_fetch+0x16c0>)
 80027b8:	461d      	mov	r5, r3
 80027ba:	4614      	mov	r4, r2
 80027bc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80027be:	6028      	str	r0, [r5, #0]
 80027c0:	6069      	str	r1, [r5, #4]
 80027c2:	60aa      	str	r2, [r5, #8]
 80027c4:	60eb      	str	r3, [r5, #12]
 80027c6:	6820      	ldr	r0, [r4, #0]
 80027c8:	6128      	str	r0, [r5, #16]
			strcpy(p->startFinish, "s,d,d,d,d,d,e,e");
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	33d8      	adds	r3, #216	; 0xd8
 80027ce:	4a85      	ldr	r2, [pc, #532]	; (80029e4 <problem_fetch+0x16c4>)
 80027d0:	461c      	mov	r4, r3
 80027d2:	4615      	mov	r5, r2
 80027d4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80027d6:	6020      	str	r0, [r4, #0]
 80027d8:	6061      	str	r1, [r4, #4]
 80027da:	60a2      	str	r2, [r4, #8]
 80027dc:	60e3      	str	r3, [r4, #12]
			strcpy(p->grade, "6C+");
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	33cc      	adds	r3, #204	; 0xcc
 80027e2:	4a81      	ldr	r2, [pc, #516]	; (80029e8 <problem_fetch+0x16c8>)
 80027e4:	6810      	ldr	r0, [r2, #0]
 80027e6:	6018      	str	r0, [r3, #0]
			break;
 80027e8:	f018 bae0 	b.w	801adac <problem_fetch+0x19a8c>
		case 113 :
			strcpy(p->name,"ROCK LOBSTER");
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	337c      	adds	r3, #124	; 0x7c
 80027f0:	4a7e      	ldr	r2, [pc, #504]	; (80029ec <problem_fetch+0x16cc>)
 80027f2:	461c      	mov	r4, r3
 80027f4:	4613      	mov	r3, r2
 80027f6:	cb07      	ldmia	r3!, {r0, r1, r2}
 80027f8:	6020      	str	r0, [r4, #0]
 80027fa:	6061      	str	r1, [r4, #4]
 80027fc:	60a2      	str	r2, [r4, #8]
 80027fe:	781b      	ldrb	r3, [r3, #0]
 8002800:	7323      	strb	r3, [r4, #12]
			p->moveSize = 8;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	2208      	movs	r2, #8
 8002806:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"H,E,E,A,E,A,E,I");
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	3340      	adds	r3, #64	; 0x40
 800280c:	4a78      	ldr	r2, [pc, #480]	; (80029f0 <problem_fetch+0x16d0>)
 800280e:	461c      	mov	r4, r3
 8002810:	4615      	mov	r5, r2
 8002812:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002814:	6020      	str	r0, [r4, #0]
 8002816:	6061      	str	r1, [r4, #4]
 8002818:	60a2      	str	r2, [r4, #8]
 800281a:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,6,8,9,12,14,16,18");
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	3304      	adds	r3, #4
 8002820:	4a74      	ldr	r2, [pc, #464]	; (80029f4 <problem_fetch+0x16d4>)
 8002822:	461d      	mov	r5, r3
 8002824:	4614      	mov	r4, r2
 8002826:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002828:	6028      	str	r0, [r5, #0]
 800282a:	6069      	str	r1, [r5, #4]
 800282c:	60aa      	str	r2, [r5, #8]
 800282e:	60eb      	str	r3, [r5, #12]
 8002830:	6820      	ldr	r0, [r4, #0]
 8002832:	6128      	str	r0, [r5, #16]
			strcpy(p->startFinish, "s,s,d,d,d,d,d,e");
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	33d8      	adds	r3, #216	; 0xd8
 8002838:	4a60      	ldr	r2, [pc, #384]	; (80029bc <problem_fetch+0x169c>)
 800283a:	461c      	mov	r4, r3
 800283c:	4615      	mov	r5, r2
 800283e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002840:	6020      	str	r0, [r4, #0]
 8002842:	6061      	str	r1, [r4, #4]
 8002844:	60a2      	str	r2, [r4, #8]
 8002846:	60e3      	str	r3, [r4, #12]
			strcpy(p->grade, "6C+");
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	33cc      	adds	r3, #204	; 0xcc
 800284c:	4a66      	ldr	r2, [pc, #408]	; (80029e8 <problem_fetch+0x16c8>)
 800284e:	6810      	ldr	r0, [r2, #0]
 8002850:	6018      	str	r0, [r3, #0]
			break;
 8002852:	f018 baab 	b.w	801adac <problem_fetch+0x19a8c>
		case 114 :
			strcpy(p->name,"ACG48");
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	337c      	adds	r3, #124	; 0x7c
 800285a:	4a67      	ldr	r2, [pc, #412]	; (80029f8 <problem_fetch+0x16d8>)
 800285c:	6810      	ldr	r0, [r2, #0]
 800285e:	6018      	str	r0, [r3, #0]
 8002860:	8892      	ldrh	r2, [r2, #4]
 8002862:	809a      	strh	r2, [r3, #4]
			p->moveSize = 7;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	2207      	movs	r2, #7
 8002868:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"J,K,H,F,B,D,A");
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	3340      	adds	r3, #64	; 0x40
 800286e:	4a63      	ldr	r2, [pc, #396]	; (80029fc <problem_fetch+0x16dc>)
 8002870:	461c      	mov	r4, r3
 8002872:	4613      	mov	r3, r2
 8002874:	cb07      	ldmia	r3!, {r0, r1, r2}
 8002876:	6020      	str	r0, [r4, #0]
 8002878:	6061      	str	r1, [r4, #4]
 800287a:	60a2      	str	r2, [r4, #8]
 800287c:	881b      	ldrh	r3, [r3, #0]
 800287e:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,9,10,11,12,15,18");
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	3304      	adds	r3, #4
 8002884:	4a5e      	ldr	r2, [pc, #376]	; (8002a00 <problem_fetch+0x16e0>)
 8002886:	461d      	mov	r5, r3
 8002888:	4614      	mov	r4, r2
 800288a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800288c:	6028      	str	r0, [r5, #0]
 800288e:	6069      	str	r1, [r5, #4]
 8002890:	60aa      	str	r2, [r5, #8]
 8002892:	60eb      	str	r3, [r5, #12]
 8002894:	8823      	ldrh	r3, [r4, #0]
 8002896:	78a2      	ldrb	r2, [r4, #2]
 8002898:	822b      	strh	r3, [r5, #16]
 800289a:	4613      	mov	r3, r2
 800289c:	74ab      	strb	r3, [r5, #18]
			strcpy(p->startFinish, "s,d,d,d,d,d,e");
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	33d8      	adds	r3, #216	; 0xd8
 80028a2:	4a58      	ldr	r2, [pc, #352]	; (8002a04 <problem_fetch+0x16e4>)
 80028a4:	461c      	mov	r4, r3
 80028a6:	4613      	mov	r3, r2
 80028a8:	cb07      	ldmia	r3!, {r0, r1, r2}
 80028aa:	6020      	str	r0, [r4, #0]
 80028ac:	6061      	str	r1, [r4, #4]
 80028ae:	60a2      	str	r2, [r4, #8]
 80028b0:	881b      	ldrh	r3, [r3, #0]
 80028b2:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade, "7A");
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	33cc      	adds	r3, #204	; 0xcc
 80028b8:	4a53      	ldr	r2, [pc, #332]	; (8002a08 <problem_fetch+0x16e8>)
 80028ba:	8811      	ldrh	r1, [r2, #0]
 80028bc:	7892      	ldrb	r2, [r2, #2]
 80028be:	8019      	strh	r1, [r3, #0]
 80028c0:	709a      	strb	r2, [r3, #2]
			break;
 80028c2:	f018 ba73 	b.w	801adac <problem_fetch+0x19a8c>
		case 115 :
			strcpy(p->name,"SNIFFING DOG");
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	337c      	adds	r3, #124	; 0x7c
 80028ca:	4a50      	ldr	r2, [pc, #320]	; (8002a0c <problem_fetch+0x16ec>)
 80028cc:	461c      	mov	r4, r3
 80028ce:	4613      	mov	r3, r2
 80028d0:	cb07      	ldmia	r3!, {r0, r1, r2}
 80028d2:	6020      	str	r0, [r4, #0]
 80028d4:	6061      	str	r1, [r4, #4]
 80028d6:	60a2      	str	r2, [r4, #8]
 80028d8:	781b      	ldrb	r3, [r3, #0]
 80028da:	7323      	strb	r3, [r4, #12]
			p->moveSize = 7;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	2207      	movs	r2, #7
 80028e0:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"H,J,I,J,I,J,I");
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	3340      	adds	r3, #64	; 0x40
 80028e6:	4a4a      	ldr	r2, [pc, #296]	; (8002a10 <problem_fetch+0x16f0>)
 80028e8:	461c      	mov	r4, r3
 80028ea:	4613      	mov	r3, r2
 80028ec:	cb07      	ldmia	r3!, {r0, r1, r2}
 80028ee:	6020      	str	r0, [r4, #0]
 80028f0:	6061      	str	r1, [r4, #4]
 80028f2:	60a2      	str	r2, [r4, #8]
 80028f4:	881b      	ldrh	r3, [r3, #0]
 80028f6:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,7,10,13,15,16,18");
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	3304      	adds	r3, #4
 80028fc:	4a45      	ldr	r2, [pc, #276]	; (8002a14 <problem_fetch+0x16f4>)
 80028fe:	461d      	mov	r5, r3
 8002900:	4614      	mov	r4, r2
 8002902:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002904:	6028      	str	r0, [r5, #0]
 8002906:	6069      	str	r1, [r5, #4]
 8002908:	60aa      	str	r2, [r5, #8]
 800290a:	60eb      	str	r3, [r5, #12]
 800290c:	8823      	ldrh	r3, [r4, #0]
 800290e:	78a2      	ldrb	r2, [r4, #2]
 8002910:	822b      	strh	r3, [r5, #16]
 8002912:	4613      	mov	r3, r2
 8002914:	74ab      	strb	r3, [r5, #18]
			strcpy(p->startFinish, "s,d,d,d,d,d,e");
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	33d8      	adds	r3, #216	; 0xd8
 800291a:	4a3a      	ldr	r2, [pc, #232]	; (8002a04 <problem_fetch+0x16e4>)
 800291c:	461c      	mov	r4, r3
 800291e:	4613      	mov	r3, r2
 8002920:	cb07      	ldmia	r3!, {r0, r1, r2}
 8002922:	6020      	str	r0, [r4, #0]
 8002924:	6061      	str	r1, [r4, #4]
 8002926:	60a2      	str	r2, [r4, #8]
 8002928:	881b      	ldrh	r3, [r3, #0]
 800292a:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade, "6B+");
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	33cc      	adds	r3, #204	; 0xcc
 8002930:	4a23      	ldr	r2, [pc, #140]	; (80029c0 <problem_fetch+0x16a0>)
 8002932:	6810      	ldr	r0, [r2, #0]
 8002934:	6018      	str	r0, [r3, #0]
			break;
 8002936:	f018 ba39 	b.w	801adac <problem_fetch+0x19a8c>
		case 116 :
			strcpy(p->name,"FUNKED JAM");
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	337c      	adds	r3, #124	; 0x7c
 800293e:	4936      	ldr	r1, [pc, #216]	; (8002a18 <problem_fetch+0x16f8>)
 8002940:	461a      	mov	r2, r3
 8002942:	460b      	mov	r3, r1
 8002944:	cb03      	ldmia	r3!, {r0, r1}
 8002946:	6010      	str	r0, [r2, #0]
 8002948:	6051      	str	r1, [r2, #4]
 800294a:	8819      	ldrh	r1, [r3, #0]
 800294c:	789b      	ldrb	r3, [r3, #2]
 800294e:	8111      	strh	r1, [r2, #8]
 8002950:	7293      	strb	r3, [r2, #10]
			p->moveSize = 8;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	2208      	movs	r2, #8
 8002956:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"B,C,D,B,G,H,C,D");
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	3340      	adds	r3, #64	; 0x40
 800295c:	4a2f      	ldr	r2, [pc, #188]	; (8002a1c <problem_fetch+0x16fc>)
 800295e:	461c      	mov	r4, r3
 8002960:	4615      	mov	r5, r2
 8002962:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002964:	6020      	str	r0, [r4, #0]
 8002966:	6061      	str	r1, [r4, #4]
 8002968:	60a2      	str	r2, [r4, #8]
 800296a:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"6,5,7,10,10,13,16,18");
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	3304      	adds	r3, #4
 8002970:	4a2b      	ldr	r2, [pc, #172]	; (8002a20 <problem_fetch+0x1700>)
 8002972:	461d      	mov	r5, r3
 8002974:	4614      	mov	r4, r2
 8002976:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002978:	6028      	str	r0, [r5, #0]
 800297a:	6069      	str	r1, [r5, #4]
 800297c:	60aa      	str	r2, [r5, #8]
 800297e:	60eb      	str	r3, [r5, #12]
 8002980:	6820      	ldr	r0, [r4, #0]
 8002982:	6128      	str	r0, [r5, #16]
 8002984:	7923      	ldrb	r3, [r4, #4]
 8002986:	752b      	strb	r3, [r5, #20]
			strcpy(p->startFinish, "s,s,d,d,d,d,d,e");
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	33d8      	adds	r3, #216	; 0xd8
 800298c:	4a0b      	ldr	r2, [pc, #44]	; (80029bc <problem_fetch+0x169c>)
 800298e:	461c      	mov	r4, r3
 8002990:	4615      	mov	r5, r2
 8002992:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002994:	6020      	str	r0, [r4, #0]
 8002996:	6061      	str	r1, [r4, #4]
 8002998:	60a2      	str	r2, [r4, #8]
 800299a:	60e3      	str	r3, [r4, #12]
			strcpy(p->grade, "8A");
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	33cc      	adds	r3, #204	; 0xcc
 80029a0:	4a20      	ldr	r2, [pc, #128]	; (8002a24 <problem_fetch+0x1704>)
 80029a2:	8811      	ldrh	r1, [r2, #0]
 80029a4:	7892      	ldrb	r2, [r2, #2]
 80029a6:	8019      	strh	r1, [r3, #0]
 80029a8:	709a      	strb	r2, [r3, #2]
			break;
 80029aa:	f018 b9ff 	b.w	801adac <problem_fetch+0x19a8c>
 80029ae:	bf00      	nop
 80029b0:	08021590 	.word	0x08021590
 80029b4:	0802159c 	.word	0x0802159c
 80029b8:	080215ac 	.word	0x080215ac
 80029bc:	080214cc 	.word	0x080214cc
 80029c0:	080212b0 	.word	0x080212b0
 80029c4:	080215c4 	.word	0x080215c4
 80029c8:	080215cc 	.word	0x080215cc
 80029cc:	080215e0 	.word	0x080215e0
 80029d0:	080215fc 	.word	0x080215fc
 80029d4:	08021370 	.word	0x08021370
 80029d8:	08021610 	.word	0x08021610
 80029dc:	08021618 	.word	0x08021618
 80029e0:	08021628 	.word	0x08021628
 80029e4:	0802163c 	.word	0x0802163c
 80029e8:	080213a8 	.word	0x080213a8
 80029ec:	0802164c 	.word	0x0802164c
 80029f0:	0802165c 	.word	0x0802165c
 80029f4:	0802166c 	.word	0x0802166c
 80029f8:	08021680 	.word	0x08021680
 80029fc:	08021688 	.word	0x08021688
 8002a00:	08021698 	.word	0x08021698
 8002a04:	08021494 	.word	0x08021494
 8002a08:	080212f4 	.word	0x080212f4
 8002a0c:	080216ac 	.word	0x080216ac
 8002a10:	080216bc 	.word	0x080216bc
 8002a14:	080216cc 	.word	0x080216cc
 8002a18:	080216e0 	.word	0x080216e0
 8002a1c:	080216ec 	.word	0x080216ec
 8002a20:	080216fc 	.word	0x080216fc
 8002a24:	08021714 	.word	0x08021714
		case 117 :
			strcpy(p->name,"ACG49");
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	337c      	adds	r3, #124	; 0x7c
 8002a2c:	4ab0      	ldr	r2, [pc, #704]	; (8002cf0 <problem_fetch+0x19d0>)
 8002a2e:	6810      	ldr	r0, [r2, #0]
 8002a30:	6018      	str	r0, [r3, #0]
 8002a32:	8892      	ldrh	r2, [r2, #4]
 8002a34:	809a      	strh	r2, [r3, #4]
			p->moveSize = 8;
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	2208      	movs	r2, #8
 8002a3a:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"J,G,D,E,I,D,B,I");
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	3340      	adds	r3, #64	; 0x40
 8002a40:	4aac      	ldr	r2, [pc, #688]	; (8002cf4 <problem_fetch+0x19d4>)
 8002a42:	461c      	mov	r4, r3
 8002a44:	4615      	mov	r5, r2
 8002a46:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002a48:	6020      	str	r0, [r4, #0]
 8002a4a:	6061      	str	r1, [r4, #4]
 8002a4c:	60a2      	str	r2, [r4, #8]
 8002a4e:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,6,15,16,10,11,6,18");
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	3304      	adds	r3, #4
 8002a54:	4aa8      	ldr	r2, [pc, #672]	; (8002cf8 <problem_fetch+0x19d8>)
 8002a56:	461d      	mov	r5, r3
 8002a58:	4614      	mov	r4, r2
 8002a5a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002a5c:	6028      	str	r0, [r5, #0]
 8002a5e:	6069      	str	r1, [r5, #4]
 8002a60:	60aa      	str	r2, [r5, #8]
 8002a62:	60eb      	str	r3, [r5, #12]
 8002a64:	6820      	ldr	r0, [r4, #0]
 8002a66:	6128      	str	r0, [r5, #16]
 8002a68:	7923      	ldrb	r3, [r4, #4]
 8002a6a:	752b      	strb	r3, [r5, #20]
			strcpy(p->startFinish, "s,s,d,d,d,d,d,e");
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	33d8      	adds	r3, #216	; 0xd8
 8002a70:	4aa2      	ldr	r2, [pc, #648]	; (8002cfc <problem_fetch+0x19dc>)
 8002a72:	461c      	mov	r4, r3
 8002a74:	4615      	mov	r5, r2
 8002a76:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002a78:	6020      	str	r0, [r4, #0]
 8002a7a:	6061      	str	r1, [r4, #4]
 8002a7c:	60a2      	str	r2, [r4, #8]
 8002a7e:	60e3      	str	r3, [r4, #12]
			strcpy(p->grade, "6C+");
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	33cc      	adds	r3, #204	; 0xcc
 8002a84:	4a9e      	ldr	r2, [pc, #632]	; (8002d00 <problem_fetch+0x19e0>)
 8002a86:	6810      	ldr	r0, [r2, #0]
 8002a88:	6018      	str	r0, [r3, #0]
			break;
 8002a8a:	f018 b98f 	b.w	801adac <problem_fetch+0x19a8c>
		case 118 :
			strcpy(p->name,"KEEP IT TIGHT, YO");
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	337c      	adds	r3, #124	; 0x7c
 8002a92:	4a9c      	ldr	r2, [pc, #624]	; (8002d04 <problem_fetch+0x19e4>)
 8002a94:	461d      	mov	r5, r3
 8002a96:	4614      	mov	r4, r2
 8002a98:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002a9a:	6028      	str	r0, [r5, #0]
 8002a9c:	6069      	str	r1, [r5, #4]
 8002a9e:	60aa      	str	r2, [r5, #8]
 8002aa0:	60eb      	str	r3, [r5, #12]
 8002aa2:	8823      	ldrh	r3, [r4, #0]
 8002aa4:	822b      	strh	r3, [r5, #16]
			p->moveSize = 6;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	2206      	movs	r2, #6
 8002aaa:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"G,E,G,F,G,D");
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	3340      	adds	r3, #64	; 0x40
 8002ab0:	4a95      	ldr	r2, [pc, #596]	; (8002d08 <problem_fetch+0x19e8>)
 8002ab2:	461c      	mov	r4, r3
 8002ab4:	4613      	mov	r3, r2
 8002ab6:	cb07      	ldmia	r3!, {r0, r1, r2}
 8002ab8:	6020      	str	r0, [r4, #0]
 8002aba:	6061      	str	r1, [r4, #4]
 8002abc:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,8,10,13,15,18");
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	3304      	adds	r3, #4
 8002ac2:	4a92      	ldr	r2, [pc, #584]	; (8002d0c <problem_fetch+0x19ec>)
 8002ac4:	461c      	mov	r4, r3
 8002ac6:	4615      	mov	r5, r2
 8002ac8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002aca:	6020      	str	r0, [r4, #0]
 8002acc:	6061      	str	r1, [r4, #4]
 8002ace:	60a2      	str	r2, [r4, #8]
 8002ad0:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish, "s,d,d,d,d,e");
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	33d8      	adds	r3, #216	; 0xd8
 8002ad6:	4a8e      	ldr	r2, [pc, #568]	; (8002d10 <problem_fetch+0x19f0>)
 8002ad8:	461c      	mov	r4, r3
 8002ada:	4613      	mov	r3, r2
 8002adc:	cb07      	ldmia	r3!, {r0, r1, r2}
 8002ade:	6020      	str	r0, [r4, #0]
 8002ae0:	6061      	str	r1, [r4, #4]
 8002ae2:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade, "7A+");
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	33cc      	adds	r3, #204	; 0xcc
 8002ae8:	4a8a      	ldr	r2, [pc, #552]	; (8002d14 <problem_fetch+0x19f4>)
 8002aea:	6810      	ldr	r0, [r2, #0]
 8002aec:	6018      	str	r0, [r3, #0]
			break;
 8002aee:	f018 b95d 	b.w	801adac <problem_fetch+0x19a8c>
		case 119 :
			strcpy(p->name,"SAREVOK");
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	337c      	adds	r3, #124	; 0x7c
 8002af6:	4988      	ldr	r1, [pc, #544]	; (8002d18 <problem_fetch+0x19f8>)
 8002af8:	461a      	mov	r2, r3
 8002afa:	460b      	mov	r3, r1
 8002afc:	cb03      	ldmia	r3!, {r0, r1}
 8002afe:	6010      	str	r0, [r2, #0]
 8002b00:	6051      	str	r1, [r2, #4]
			p->moveSize = 5;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	2205      	movs	r2, #5
 8002b06:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"G,C,I,G,I");
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	3340      	adds	r3, #64	; 0x40
 8002b0c:	4983      	ldr	r1, [pc, #524]	; (8002d1c <problem_fetch+0x19fc>)
 8002b0e:	461a      	mov	r2, r3
 8002b10:	460b      	mov	r3, r1
 8002b12:	cb03      	ldmia	r3!, {r0, r1}
 8002b14:	6010      	str	r0, [r2, #0]
 8002b16:	6051      	str	r1, [r2, #4]
 8002b18:	881b      	ldrh	r3, [r3, #0]
 8002b1a:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"4,8,9,14,18");
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	3304      	adds	r3, #4
 8002b20:	4a7f      	ldr	r2, [pc, #508]	; (8002d20 <problem_fetch+0x1a00>)
 8002b22:	461c      	mov	r4, r3
 8002b24:	4613      	mov	r3, r2
 8002b26:	cb07      	ldmia	r3!, {r0, r1, r2}
 8002b28:	6020      	str	r0, [r4, #0]
 8002b2a:	6061      	str	r1, [r4, #4]
 8002b2c:	60a2      	str	r2, [r4, #8]
			strcpy(p->startFinish, "s,d,d,d,e");
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	33d8      	adds	r3, #216	; 0xd8
 8002b32:	497c      	ldr	r1, [pc, #496]	; (8002d24 <problem_fetch+0x1a04>)
 8002b34:	461a      	mov	r2, r3
 8002b36:	460b      	mov	r3, r1
 8002b38:	cb03      	ldmia	r3!, {r0, r1}
 8002b3a:	6010      	str	r0, [r2, #0]
 8002b3c:	6051      	str	r1, [r2, #4]
 8002b3e:	881b      	ldrh	r3, [r3, #0]
 8002b40:	8113      	strh	r3, [r2, #8]
			strcpy(p->grade, "7C");
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	33cc      	adds	r3, #204	; 0xcc
 8002b46:	4a78      	ldr	r2, [pc, #480]	; (8002d28 <problem_fetch+0x1a08>)
 8002b48:	8811      	ldrh	r1, [r2, #0]
 8002b4a:	7892      	ldrb	r2, [r2, #2]
 8002b4c:	8019      	strh	r1, [r3, #0]
 8002b4e:	709a      	strb	r2, [r3, #2]
			break;
 8002b50:	f018 b92c 	b.w	801adac <problem_fetch+0x19a8c>
		case 12 :
			strcpy(p->name,"TODD, DARK AND HANDSOME");
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	337c      	adds	r3, #124	; 0x7c
 8002b58:	4a74      	ldr	r2, [pc, #464]	; (8002d2c <problem_fetch+0x1a0c>)
 8002b5a:	461d      	mov	r5, r3
 8002b5c:	4614      	mov	r4, r2
 8002b5e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002b60:	6028      	str	r0, [r5, #0]
 8002b62:	6069      	str	r1, [r5, #4]
 8002b64:	60aa      	str	r2, [r5, #8]
 8002b66:	60eb      	str	r3, [r5, #12]
 8002b68:	cc03      	ldmia	r4!, {r0, r1}
 8002b6a:	6128      	str	r0, [r5, #16]
 8002b6c:	6169      	str	r1, [r5, #20]
			p->moveSize = 8;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	2208      	movs	r2, #8
 8002b72:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"G,G,H,C,C,H,G,I");
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	3340      	adds	r3, #64	; 0x40
 8002b78:	4a6d      	ldr	r2, [pc, #436]	; (8002d30 <problem_fetch+0x1a10>)
 8002b7a:	461c      	mov	r4, r3
 8002b7c:	4615      	mov	r5, r2
 8002b7e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002b80:	6020      	str	r0, [r4, #0]
 8002b82:	6061      	str	r1, [r4, #4]
 8002b84:	60a2      	str	r2, [r4, #8]
 8002b86:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,6,8,8,13,16,17,18");
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	3304      	adds	r3, #4
 8002b8c:	4a69      	ldr	r2, [pc, #420]	; (8002d34 <problem_fetch+0x1a14>)
 8002b8e:	461d      	mov	r5, r3
 8002b90:	4614      	mov	r4, r2
 8002b92:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002b94:	6028      	str	r0, [r5, #0]
 8002b96:	6069      	str	r1, [r5, #4]
 8002b98:	60aa      	str	r2, [r5, #8]
 8002b9a:	60eb      	str	r3, [r5, #12]
 8002b9c:	6820      	ldr	r0, [r4, #0]
 8002b9e:	6128      	str	r0, [r5, #16]
			strcpy(p->startFinish, "s,s,d,d,d,d,d,e");
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	33d8      	adds	r3, #216	; 0xd8
 8002ba4:	4a55      	ldr	r2, [pc, #340]	; (8002cfc <problem_fetch+0x19dc>)
 8002ba6:	461c      	mov	r4, r3
 8002ba8:	4615      	mov	r5, r2
 8002baa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002bac:	6020      	str	r0, [r4, #0]
 8002bae:	6061      	str	r1, [r4, #4]
 8002bb0:	60a2      	str	r2, [r4, #8]
 8002bb2:	60e3      	str	r3, [r4, #12]
			strcpy(p->grade, "7C");
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	33cc      	adds	r3, #204	; 0xcc
 8002bb8:	4a5b      	ldr	r2, [pc, #364]	; (8002d28 <problem_fetch+0x1a08>)
 8002bba:	8811      	ldrh	r1, [r2, #0]
 8002bbc:	7892      	ldrb	r2, [r2, #2]
 8002bbe:	8019      	strh	r1, [r3, #0]
 8002bc0:	709a      	strb	r2, [r3, #2]
			break;
 8002bc2:	f018 b8f3 	b.w	801adac <problem_fetch+0x19a8c>
		case 120 :
			strcpy(p->name,"AB3");
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	337c      	adds	r3, #124	; 0x7c
 8002bca:	4a5b      	ldr	r2, [pc, #364]	; (8002d38 <problem_fetch+0x1a18>)
 8002bcc:	6810      	ldr	r0, [r2, #0]
 8002bce:	6018      	str	r0, [r3, #0]
			p->moveSize = 8;
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	2208      	movs	r2, #8
 8002bd4:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"C,E,E,H,F,G,E,I");
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	3340      	adds	r3, #64	; 0x40
 8002bda:	4a58      	ldr	r2, [pc, #352]	; (8002d3c <problem_fetch+0x1a1c>)
 8002bdc:	461c      	mov	r4, r3
 8002bde:	4615      	mov	r5, r2
 8002be0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002be2:	6020      	str	r0, [r4, #0]
 8002be4:	6061      	str	r1, [r4, #4]
 8002be6:	60a2      	str	r2, [r4, #8]
 8002be8:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,6,8,10,13,14,16,18");
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	3304      	adds	r3, #4
 8002bee:	4a54      	ldr	r2, [pc, #336]	; (8002d40 <problem_fetch+0x1a20>)
 8002bf0:	461d      	mov	r5, r3
 8002bf2:	4614      	mov	r4, r2
 8002bf4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002bf6:	6028      	str	r0, [r5, #0]
 8002bf8:	6069      	str	r1, [r5, #4]
 8002bfa:	60aa      	str	r2, [r5, #8]
 8002bfc:	60eb      	str	r3, [r5, #12]
 8002bfe:	6820      	ldr	r0, [r4, #0]
 8002c00:	6128      	str	r0, [r5, #16]
 8002c02:	7923      	ldrb	r3, [r4, #4]
 8002c04:	752b      	strb	r3, [r5, #20]
			strcpy(p->startFinish, "s,s,d,d,d,d,d,e");
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	33d8      	adds	r3, #216	; 0xd8
 8002c0a:	4a3c      	ldr	r2, [pc, #240]	; (8002cfc <problem_fetch+0x19dc>)
 8002c0c:	461c      	mov	r4, r3
 8002c0e:	4615      	mov	r5, r2
 8002c10:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002c12:	6020      	str	r0, [r4, #0]
 8002c14:	6061      	str	r1, [r4, #4]
 8002c16:	60a2      	str	r2, [r4, #8]
 8002c18:	60e3      	str	r3, [r4, #12]
			strcpy(p->grade, "6B+");
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	33cc      	adds	r3, #204	; 0xcc
 8002c1e:	4a49      	ldr	r2, [pc, #292]	; (8002d44 <problem_fetch+0x1a24>)
 8002c20:	6810      	ldr	r0, [r2, #0]
 8002c22:	6018      	str	r0, [r3, #0]
			break;
 8002c24:	f018 b8c2 	b.w	801adac <problem_fetch+0x19a8c>
		case 121 :
			strcpy(p->name,"ZEUS");
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	337c      	adds	r3, #124	; 0x7c
 8002c2c:	4a46      	ldr	r2, [pc, #280]	; (8002d48 <problem_fetch+0x1a28>)
 8002c2e:	6810      	ldr	r0, [r2, #0]
 8002c30:	6018      	str	r0, [r3, #0]
 8002c32:	7912      	ldrb	r2, [r2, #4]
 8002c34:	711a      	strb	r2, [r3, #4]
			p->moveSize = 5;
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	2205      	movs	r2, #5
 8002c3a:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"E,H,B,D,D");
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	3340      	adds	r3, #64	; 0x40
 8002c40:	4942      	ldr	r1, [pc, #264]	; (8002d4c <problem_fetch+0x1a2c>)
 8002c42:	461a      	mov	r2, r3
 8002c44:	460b      	mov	r3, r1
 8002c46:	cb03      	ldmia	r3!, {r0, r1}
 8002c48:	6010      	str	r0, [r2, #0]
 8002c4a:	6051      	str	r1, [r2, #4]
 8002c4c:	881b      	ldrh	r3, [r3, #0]
 8002c4e:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"6,10,10,15,18");
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	3304      	adds	r3, #4
 8002c54:	4a3e      	ldr	r2, [pc, #248]	; (8002d50 <problem_fetch+0x1a30>)
 8002c56:	461c      	mov	r4, r3
 8002c58:	4613      	mov	r3, r2
 8002c5a:	cb07      	ldmia	r3!, {r0, r1, r2}
 8002c5c:	6020      	str	r0, [r4, #0]
 8002c5e:	6061      	str	r1, [r4, #4]
 8002c60:	60a2      	str	r2, [r4, #8]
 8002c62:	881b      	ldrh	r3, [r3, #0]
 8002c64:	81a3      	strh	r3, [r4, #12]
			strcpy(p->startFinish, "s,d,d,d,e");
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	33d8      	adds	r3, #216	; 0xd8
 8002c6a:	492e      	ldr	r1, [pc, #184]	; (8002d24 <problem_fetch+0x1a04>)
 8002c6c:	461a      	mov	r2, r3
 8002c6e:	460b      	mov	r3, r1
 8002c70:	cb03      	ldmia	r3!, {r0, r1}
 8002c72:	6010      	str	r0, [r2, #0]
 8002c74:	6051      	str	r1, [r2, #4]
 8002c76:	881b      	ldrh	r3, [r3, #0]
 8002c78:	8113      	strh	r3, [r2, #8]
			strcpy(p->grade, "6C");
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	33cc      	adds	r3, #204	; 0xcc
 8002c7e:	4a35      	ldr	r2, [pc, #212]	; (8002d54 <problem_fetch+0x1a34>)
 8002c80:	8811      	ldrh	r1, [r2, #0]
 8002c82:	7892      	ldrb	r2, [r2, #2]
 8002c84:	8019      	strh	r1, [r3, #0]
 8002c86:	709a      	strb	r2, [r3, #2]
			break;
 8002c88:	f018 b890 	b.w	801adac <problem_fetch+0x19a8c>
		case 122 :
			strcpy(p->name,"LACERQUA");
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	337c      	adds	r3, #124	; 0x7c
 8002c90:	4931      	ldr	r1, [pc, #196]	; (8002d58 <problem_fetch+0x1a38>)
 8002c92:	461a      	mov	r2, r3
 8002c94:	460b      	mov	r3, r1
 8002c96:	cb03      	ldmia	r3!, {r0, r1}
 8002c98:	6010      	str	r0, [r2, #0]
 8002c9a:	6051      	str	r1, [r2, #4]
 8002c9c:	781b      	ldrb	r3, [r3, #0]
 8002c9e:	7213      	strb	r3, [r2, #8]
			p->moveSize = 5;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	2205      	movs	r2, #5
 8002ca4:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"J,H,E,G,D");
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	3340      	adds	r3, #64	; 0x40
 8002caa:	492c      	ldr	r1, [pc, #176]	; (8002d5c <problem_fetch+0x1a3c>)
 8002cac:	461a      	mov	r2, r3
 8002cae:	460b      	mov	r3, r1
 8002cb0:	cb03      	ldmia	r3!, {r0, r1}
 8002cb2:	6010      	str	r0, [r2, #0]
 8002cb4:	6051      	str	r1, [r2, #4]
 8002cb6:	881b      	ldrh	r3, [r3, #0]
 8002cb8:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"5,8,9,14,18");
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	3304      	adds	r3, #4
 8002cbe:	4a28      	ldr	r2, [pc, #160]	; (8002d60 <problem_fetch+0x1a40>)
 8002cc0:	461c      	mov	r4, r3
 8002cc2:	4613      	mov	r3, r2
 8002cc4:	cb07      	ldmia	r3!, {r0, r1, r2}
 8002cc6:	6020      	str	r0, [r4, #0]
 8002cc8:	6061      	str	r1, [r4, #4]
 8002cca:	60a2      	str	r2, [r4, #8]
			strcpy(p->startFinish, "s,d,d,d,e");
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	33d8      	adds	r3, #216	; 0xd8
 8002cd0:	4914      	ldr	r1, [pc, #80]	; (8002d24 <problem_fetch+0x1a04>)
 8002cd2:	461a      	mov	r2, r3
 8002cd4:	460b      	mov	r3, r1
 8002cd6:	cb03      	ldmia	r3!, {r0, r1}
 8002cd8:	6010      	str	r0, [r2, #0]
 8002cda:	6051      	str	r1, [r2, #4]
 8002cdc:	881b      	ldrh	r3, [r3, #0]
 8002cde:	8113      	strh	r3, [r2, #8]
			strcpy(p->grade, "7B+");
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	33cc      	adds	r3, #204	; 0xcc
 8002ce4:	4a1f      	ldr	r2, [pc, #124]	; (8002d64 <problem_fetch+0x1a44>)
 8002ce6:	6810      	ldr	r0, [r2, #0]
 8002ce8:	6018      	str	r0, [r3, #0]
			break;
 8002cea:	f018 b85f 	b.w	801adac <problem_fetch+0x19a8c>
 8002cee:	bf00      	nop
 8002cf0:	08021718 	.word	0x08021718
 8002cf4:	08021720 	.word	0x08021720
 8002cf8:	08021730 	.word	0x08021730
 8002cfc:	080214cc 	.word	0x080214cc
 8002d00:	080213a8 	.word	0x080213a8
 8002d04:	08021748 	.word	0x08021748
 8002d08:	0802175c 	.word	0x0802175c
 8002d0c:	08021768 	.word	0x08021768
 8002d10:	0802139c 	.word	0x0802139c
 8002d14:	08021424 	.word	0x08021424
 8002d18:	08021778 	.word	0x08021778
 8002d1c:	08021780 	.word	0x08021780
 8002d20:	0802178c 	.word	0x0802178c
 8002d24:	08021320 	.word	0x08021320
 8002d28:	0802158c 	.word	0x0802158c
 8002d2c:	08021798 	.word	0x08021798
 8002d30:	080217b0 	.word	0x080217b0
 8002d34:	080217c0 	.word	0x080217c0
 8002d38:	080217d4 	.word	0x080217d4
 8002d3c:	080217d8 	.word	0x080217d8
 8002d40:	080217e8 	.word	0x080217e8
 8002d44:	080212b0 	.word	0x080212b0
 8002d48:	08021800 	.word	0x08021800
 8002d4c:	08021808 	.word	0x08021808
 8002d50:	08021814 	.word	0x08021814
 8002d54:	08021370 	.word	0x08021370
 8002d58:	08021824 	.word	0x08021824
 8002d5c:	08021830 	.word	0x08021830
 8002d60:	0802183c 	.word	0x0802183c
 8002d64:	08021848 	.word	0x08021848
		case 123 :
			strcpy(p->name,"AB4");
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	337c      	adds	r3, #124	; 0x7c
 8002d6c:	4abb      	ldr	r2, [pc, #748]	; (800305c <problem_fetch+0x1d3c>)
 8002d6e:	6810      	ldr	r0, [r2, #0]
 8002d70:	6018      	str	r0, [r3, #0]
			p->moveSize = 9;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	2209      	movs	r2, #9
 8002d76:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"C,E,E,F,F,I,I,K,I");
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	3340      	adds	r3, #64	; 0x40
 8002d7c:	4ab8      	ldr	r2, [pc, #736]	; (8003060 <problem_fetch+0x1d40>)
 8002d7e:	461d      	mov	r5, r3
 8002d80:	4614      	mov	r4, r2
 8002d82:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002d84:	6028      	str	r0, [r5, #0]
 8002d86:	6069      	str	r1, [r5, #4]
 8002d88:	60aa      	str	r2, [r5, #8]
 8002d8a:	60eb      	str	r3, [r5, #12]
 8002d8c:	8823      	ldrh	r3, [r4, #0]
 8002d8e:	822b      	strh	r3, [r5, #16]
			strcpy(p->moveNumbers,"5,6,8,11,13,14,15,16,18");
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	3304      	adds	r3, #4
 8002d94:	4ab3      	ldr	r2, [pc, #716]	; (8003064 <problem_fetch+0x1d44>)
 8002d96:	461d      	mov	r5, r3
 8002d98:	4614      	mov	r4, r2
 8002d9a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002d9c:	6028      	str	r0, [r5, #0]
 8002d9e:	6069      	str	r1, [r5, #4]
 8002da0:	60aa      	str	r2, [r5, #8]
 8002da2:	60eb      	str	r3, [r5, #12]
 8002da4:	cc03      	ldmia	r4!, {r0, r1}
 8002da6:	6128      	str	r0, [r5, #16]
 8002da8:	6169      	str	r1, [r5, #20]
			strcpy(p->startFinish, "s,s,d,d,d,d,d,d,e");
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	33d8      	adds	r3, #216	; 0xd8
 8002dae:	4aae      	ldr	r2, [pc, #696]	; (8003068 <problem_fetch+0x1d48>)
 8002db0:	461d      	mov	r5, r3
 8002db2:	4614      	mov	r4, r2
 8002db4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002db6:	6028      	str	r0, [r5, #0]
 8002db8:	6069      	str	r1, [r5, #4]
 8002dba:	60aa      	str	r2, [r5, #8]
 8002dbc:	60eb      	str	r3, [r5, #12]
 8002dbe:	8823      	ldrh	r3, [r4, #0]
 8002dc0:	822b      	strh	r3, [r5, #16]
			strcpy(p->grade, "6B+");
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	33cc      	adds	r3, #204	; 0xcc
 8002dc6:	4aa9      	ldr	r2, [pc, #676]	; (800306c <problem_fetch+0x1d4c>)
 8002dc8:	6810      	ldr	r0, [r2, #0]
 8002dca:	6018      	str	r0, [r3, #0]
			break;
 8002dcc:	f017 bfee 	b.w	801adac <problem_fetch+0x19a8c>
		case 124 :
			strcpy(p->name,"LOUDREIGN");
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	337c      	adds	r3, #124	; 0x7c
 8002dd4:	49a6      	ldr	r1, [pc, #664]	; (8003070 <problem_fetch+0x1d50>)
 8002dd6:	461a      	mov	r2, r3
 8002dd8:	460b      	mov	r3, r1
 8002dda:	cb03      	ldmia	r3!, {r0, r1}
 8002ddc:	6010      	str	r0, [r2, #0]
 8002dde:	6051      	str	r1, [r2, #4]
 8002de0:	881b      	ldrh	r3, [r3, #0]
 8002de2:	8113      	strh	r3, [r2, #8]
			p->moveSize = 7;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	2207      	movs	r2, #7
 8002de8:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"G,H,I,J,E,E,A");
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	3340      	adds	r3, #64	; 0x40
 8002dee:	4aa1      	ldr	r2, [pc, #644]	; (8003074 <problem_fetch+0x1d54>)
 8002df0:	461c      	mov	r4, r3
 8002df2:	4613      	mov	r3, r2
 8002df4:	cb07      	ldmia	r3!, {r0, r1, r2}
 8002df6:	6020      	str	r0, [r4, #0]
 8002df8:	6061      	str	r1, [r4, #4]
 8002dfa:	60a2      	str	r2, [r4, #8]
 8002dfc:	881b      	ldrh	r3, [r3, #0]
 8002dfe:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,8,10,12,14,16,18");
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	3304      	adds	r3, #4
 8002e04:	4a9c      	ldr	r2, [pc, #624]	; (8003078 <problem_fetch+0x1d58>)
 8002e06:	461d      	mov	r5, r3
 8002e08:	4614      	mov	r4, r2
 8002e0a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002e0c:	6028      	str	r0, [r5, #0]
 8002e0e:	6069      	str	r1, [r5, #4]
 8002e10:	60aa      	str	r2, [r5, #8]
 8002e12:	60eb      	str	r3, [r5, #12]
 8002e14:	8823      	ldrh	r3, [r4, #0]
 8002e16:	78a2      	ldrb	r2, [r4, #2]
 8002e18:	822b      	strh	r3, [r5, #16]
 8002e1a:	4613      	mov	r3, r2
 8002e1c:	74ab      	strb	r3, [r5, #18]
			strcpy(p->startFinish, "s,d,d,d,d,d,e");
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	33d8      	adds	r3, #216	; 0xd8
 8002e22:	4a96      	ldr	r2, [pc, #600]	; (800307c <problem_fetch+0x1d5c>)
 8002e24:	461c      	mov	r4, r3
 8002e26:	4613      	mov	r3, r2
 8002e28:	cb07      	ldmia	r3!, {r0, r1, r2}
 8002e2a:	6020      	str	r0, [r4, #0]
 8002e2c:	6061      	str	r1, [r4, #4]
 8002e2e:	60a2      	str	r2, [r4, #8]
 8002e30:	881b      	ldrh	r3, [r3, #0]
 8002e32:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade, "6B+");
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	33cc      	adds	r3, #204	; 0xcc
 8002e38:	4a8c      	ldr	r2, [pc, #560]	; (800306c <problem_fetch+0x1d4c>)
 8002e3a:	6810      	ldr	r0, [r2, #0]
 8002e3c:	6018      	str	r0, [r3, #0]
			break;
 8002e3e:	f017 bfb5 	b.w	801adac <problem_fetch+0x19a8c>
		case 125 :
			strcpy(p->name,"ON OUR HEEL");
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	337c      	adds	r3, #124	; 0x7c
 8002e46:	4a8e      	ldr	r2, [pc, #568]	; (8003080 <problem_fetch+0x1d60>)
 8002e48:	461c      	mov	r4, r3
 8002e4a:	4613      	mov	r3, r2
 8002e4c:	cb07      	ldmia	r3!, {r0, r1, r2}
 8002e4e:	6020      	str	r0, [r4, #0]
 8002e50:	6061      	str	r1, [r4, #4]
 8002e52:	60a2      	str	r2, [r4, #8]
			p->moveSize = 7;
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	2207      	movs	r2, #7
 8002e58:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"J,G,K,H,C,E,D");
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	3340      	adds	r3, #64	; 0x40
 8002e5e:	4a89      	ldr	r2, [pc, #548]	; (8003084 <problem_fetch+0x1d64>)
 8002e60:	461c      	mov	r4, r3
 8002e62:	4613      	mov	r3, r2
 8002e64:	cb07      	ldmia	r3!, {r0, r1, r2}
 8002e66:	6020      	str	r0, [r4, #0]
 8002e68:	6061      	str	r1, [r4, #4]
 8002e6a:	60a2      	str	r2, [r4, #8]
 8002e6c:	881b      	ldrh	r3, [r3, #0]
 8002e6e:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,6,9,10,13,16,18");
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	3304      	adds	r3, #4
 8002e74:	4a84      	ldr	r2, [pc, #528]	; (8003088 <problem_fetch+0x1d68>)
 8002e76:	461d      	mov	r5, r3
 8002e78:	4614      	mov	r4, r2
 8002e7a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002e7c:	6028      	str	r0, [r5, #0]
 8002e7e:	6069      	str	r1, [r5, #4]
 8002e80:	60aa      	str	r2, [r5, #8]
 8002e82:	60eb      	str	r3, [r5, #12]
 8002e84:	8823      	ldrh	r3, [r4, #0]
 8002e86:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish, "s,s,d,d,d,d,e");
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	33d8      	adds	r3, #216	; 0xd8
 8002e8c:	4a7f      	ldr	r2, [pc, #508]	; (800308c <problem_fetch+0x1d6c>)
 8002e8e:	461c      	mov	r4, r3
 8002e90:	4613      	mov	r3, r2
 8002e92:	cb07      	ldmia	r3!, {r0, r1, r2}
 8002e94:	6020      	str	r0, [r4, #0]
 8002e96:	6061      	str	r1, [r4, #4]
 8002e98:	60a2      	str	r2, [r4, #8]
 8002e9a:	881b      	ldrh	r3, [r3, #0]
 8002e9c:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade, "6C");
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	33cc      	adds	r3, #204	; 0xcc
 8002ea2:	4a7b      	ldr	r2, [pc, #492]	; (8003090 <problem_fetch+0x1d70>)
 8002ea4:	8811      	ldrh	r1, [r2, #0]
 8002ea6:	7892      	ldrb	r2, [r2, #2]
 8002ea8:	8019      	strh	r1, [r3, #0]
 8002eaa:	709a      	strb	r2, [r3, #2]
			break;
 8002eac:	f017 bf7e 	b.w	801adac <problem_fetch+0x19a8c>
		case 126 :
			strcpy(p->name,"SUC");
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	337c      	adds	r3, #124	; 0x7c
 8002eb4:	4a77      	ldr	r2, [pc, #476]	; (8003094 <problem_fetch+0x1d74>)
 8002eb6:	6810      	ldr	r0, [r2, #0]
 8002eb8:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	2206      	movs	r2, #6
 8002ebe:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"E,J,F,B,G,I");
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	3340      	adds	r3, #64	; 0x40
 8002ec4:	4a74      	ldr	r2, [pc, #464]	; (8003098 <problem_fetch+0x1d78>)
 8002ec6:	461c      	mov	r4, r3
 8002ec8:	4613      	mov	r3, r2
 8002eca:	cb07      	ldmia	r3!, {r0, r1, r2}
 8002ecc:	6020      	str	r0, [r4, #0]
 8002ece:	6061      	str	r1, [r4, #4]
 8002ed0:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"6,5,11,15,17,18");
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	3304      	adds	r3, #4
 8002ed6:	4a71      	ldr	r2, [pc, #452]	; (800309c <problem_fetch+0x1d7c>)
 8002ed8:	461c      	mov	r4, r3
 8002eda:	4615      	mov	r5, r2
 8002edc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002ede:	6020      	str	r0, [r4, #0]
 8002ee0:	6061      	str	r1, [r4, #4]
 8002ee2:	60a2      	str	r2, [r4, #8]
 8002ee4:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish, "s,s,d,d,d,e");
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	33d8      	adds	r3, #216	; 0xd8
 8002eea:	4a6d      	ldr	r2, [pc, #436]	; (80030a0 <problem_fetch+0x1d80>)
 8002eec:	461c      	mov	r4, r3
 8002eee:	4613      	mov	r3, r2
 8002ef0:	cb07      	ldmia	r3!, {r0, r1, r2}
 8002ef2:	6020      	str	r0, [r4, #0]
 8002ef4:	6061      	str	r1, [r4, #4]
 8002ef6:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade, "7A+");
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	33cc      	adds	r3, #204	; 0xcc
 8002efc:	4a69      	ldr	r2, [pc, #420]	; (80030a4 <problem_fetch+0x1d84>)
 8002efe:	6810      	ldr	r0, [r2, #0]
 8002f00:	6018      	str	r0, [r3, #0]
			break;
 8002f02:	f017 bf53 	b.w	801adac <problem_fetch+0x19a8c>
		case 127 :
			strcpy(p->name,"MARK'S FAVORITE PROBLEM");
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	337c      	adds	r3, #124	; 0x7c
 8002f0a:	4a67      	ldr	r2, [pc, #412]	; (80030a8 <problem_fetch+0x1d88>)
 8002f0c:	461d      	mov	r5, r3
 8002f0e:	4614      	mov	r4, r2
 8002f10:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002f12:	6028      	str	r0, [r5, #0]
 8002f14:	6069      	str	r1, [r5, #4]
 8002f16:	60aa      	str	r2, [r5, #8]
 8002f18:	60eb      	str	r3, [r5, #12]
 8002f1a:	cc03      	ldmia	r4!, {r0, r1}
 8002f1c:	6128      	str	r0, [r5, #16]
 8002f1e:	6169      	str	r1, [r5, #20]
			p->moveSize = 7;
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	2207      	movs	r2, #7
 8002f24:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"A,C,D,E,F,F,G");
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	3340      	adds	r3, #64	; 0x40
 8002f2a:	4a60      	ldr	r2, [pc, #384]	; (80030ac <problem_fetch+0x1d8c>)
 8002f2c:	461c      	mov	r4, r3
 8002f2e:	4613      	mov	r3, r2
 8002f30:	cb07      	ldmia	r3!, {r0, r1, r2}
 8002f32:	6020      	str	r0, [r4, #0]
 8002f34:	6061      	str	r1, [r4, #4]
 8002f36:	60a2      	str	r2, [r4, #8]
 8002f38:	881b      	ldrh	r3, [r3, #0]
 8002f3a:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"9,5,18,6,13,11,15");
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	3304      	adds	r3, #4
 8002f40:	4a5b      	ldr	r2, [pc, #364]	; (80030b0 <problem_fetch+0x1d90>)
 8002f42:	461d      	mov	r5, r3
 8002f44:	4614      	mov	r4, r2
 8002f46:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002f48:	6028      	str	r0, [r5, #0]
 8002f4a:	6069      	str	r1, [r5, #4]
 8002f4c:	60aa      	str	r2, [r5, #8]
 8002f4e:	60eb      	str	r3, [r5, #12]
 8002f50:	8823      	ldrh	r3, [r4, #0]
 8002f52:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish, "d,s,e,s,d,d,d");
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	33d8      	adds	r3, #216	; 0xd8
 8002f58:	4a56      	ldr	r2, [pc, #344]	; (80030b4 <problem_fetch+0x1d94>)
 8002f5a:	461c      	mov	r4, r3
 8002f5c:	4613      	mov	r3, r2
 8002f5e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8002f60:	6020      	str	r0, [r4, #0]
 8002f62:	6061      	str	r1, [r4, #4]
 8002f64:	60a2      	str	r2, [r4, #8]
 8002f66:	881b      	ldrh	r3, [r3, #0]
 8002f68:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade, "7B");
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	33cc      	adds	r3, #204	; 0xcc
 8002f6e:	4a52      	ldr	r2, [pc, #328]	; (80030b8 <problem_fetch+0x1d98>)
 8002f70:	8811      	ldrh	r1, [r2, #0]
 8002f72:	7892      	ldrb	r2, [r2, #2]
 8002f74:	8019      	strh	r1, [r3, #0]
 8002f76:	709a      	strb	r2, [r3, #2]
			break;
 8002f78:	f017 bf18 	b.w	801adac <problem_fetch+0x19a8c>
		case 128 :
			strcpy(p->name,"SCHWERE LEITER");
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	337c      	adds	r3, #124	; 0x7c
 8002f80:	4a4e      	ldr	r2, [pc, #312]	; (80030bc <problem_fetch+0x1d9c>)
 8002f82:	461c      	mov	r4, r3
 8002f84:	4613      	mov	r3, r2
 8002f86:	cb07      	ldmia	r3!, {r0, r1, r2}
 8002f88:	6020      	str	r0, [r4, #0]
 8002f8a:	6061      	str	r1, [r4, #4]
 8002f8c:	60a2      	str	r2, [r4, #8]
 8002f8e:	881a      	ldrh	r2, [r3, #0]
 8002f90:	789b      	ldrb	r3, [r3, #2]
 8002f92:	81a2      	strh	r2, [r4, #12]
 8002f94:	73a3      	strb	r3, [r4, #14]
			p->moveSize = 7;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	2207      	movs	r2, #7
 8002f9a:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"E,E,E,E,E,E,D");
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	3340      	adds	r3, #64	; 0x40
 8002fa0:	4a47      	ldr	r2, [pc, #284]	; (80030c0 <problem_fetch+0x1da0>)
 8002fa2:	461c      	mov	r4, r3
 8002fa4:	4613      	mov	r3, r2
 8002fa6:	cb07      	ldmia	r3!, {r0, r1, r2}
 8002fa8:	6020      	str	r0, [r4, #0]
 8002faa:	6061      	str	r1, [r4, #4]
 8002fac:	60a2      	str	r2, [r4, #8]
 8002fae:	881b      	ldrh	r3, [r3, #0]
 8002fb0:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"6,8,9,12,14,16,18");
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	3304      	adds	r3, #4
 8002fb6:	4a43      	ldr	r2, [pc, #268]	; (80030c4 <problem_fetch+0x1da4>)
 8002fb8:	461d      	mov	r5, r3
 8002fba:	4614      	mov	r4, r2
 8002fbc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002fbe:	6028      	str	r0, [r5, #0]
 8002fc0:	6069      	str	r1, [r5, #4]
 8002fc2:	60aa      	str	r2, [r5, #8]
 8002fc4:	60eb      	str	r3, [r5, #12]
 8002fc6:	8823      	ldrh	r3, [r4, #0]
 8002fc8:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish, "s,d,d,d,d,d,e");
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	33d8      	adds	r3, #216	; 0xd8
 8002fce:	4a2b      	ldr	r2, [pc, #172]	; (800307c <problem_fetch+0x1d5c>)
 8002fd0:	461c      	mov	r4, r3
 8002fd2:	4613      	mov	r3, r2
 8002fd4:	cb07      	ldmia	r3!, {r0, r1, r2}
 8002fd6:	6020      	str	r0, [r4, #0]
 8002fd8:	6061      	str	r1, [r4, #4]
 8002fda:	60a2      	str	r2, [r4, #8]
 8002fdc:	881b      	ldrh	r3, [r3, #0]
 8002fde:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade, "7A");
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	33cc      	adds	r3, #204	; 0xcc
 8002fe4:	4a38      	ldr	r2, [pc, #224]	; (80030c8 <problem_fetch+0x1da8>)
 8002fe6:	8811      	ldrh	r1, [r2, #0]
 8002fe8:	7892      	ldrb	r2, [r2, #2]
 8002fea:	8019      	strh	r1, [r3, #0]
 8002fec:	709a      	strb	r2, [r3, #2]
			break;
 8002fee:	f017 bedd 	b.w	801adac <problem_fetch+0x19a8c>
		case 129 :
			strcpy(p->name,"TAMAS DYNOMITE");
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	337c      	adds	r3, #124	; 0x7c
 8002ff6:	4a35      	ldr	r2, [pc, #212]	; (80030cc <problem_fetch+0x1dac>)
 8002ff8:	461c      	mov	r4, r3
 8002ffa:	4613      	mov	r3, r2
 8002ffc:	cb07      	ldmia	r3!, {r0, r1, r2}
 8002ffe:	6020      	str	r0, [r4, #0]
 8003000:	6061      	str	r1, [r4, #4]
 8003002:	60a2      	str	r2, [r4, #8]
 8003004:	881a      	ldrh	r2, [r3, #0]
 8003006:	789b      	ldrb	r3, [r3, #2]
 8003008:	81a2      	strh	r2, [r4, #12]
 800300a:	73a3      	strb	r3, [r4, #14]
			p->moveSize = 6;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	2206      	movs	r2, #6
 8003010:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"G,J,H,C,D,D");
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	3340      	adds	r3, #64	; 0x40
 8003016:	4a2e      	ldr	r2, [pc, #184]	; (80030d0 <problem_fetch+0x1db0>)
 8003018:	461c      	mov	r4, r3
 800301a:	4613      	mov	r3, r2
 800301c:	cb07      	ldmia	r3!, {r0, r1, r2}
 800301e:	6020      	str	r0, [r4, #0]
 8003020:	6061      	str	r1, [r4, #4]
 8003022:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,5,10,13,15,18");
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	3304      	adds	r3, #4
 8003028:	4a2a      	ldr	r2, [pc, #168]	; (80030d4 <problem_fetch+0x1db4>)
 800302a:	461c      	mov	r4, r3
 800302c:	4615      	mov	r5, r2
 800302e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003030:	6020      	str	r0, [r4, #0]
 8003032:	6061      	str	r1, [r4, #4]
 8003034:	60a2      	str	r2, [r4, #8]
 8003036:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish, "s,s,d,d,d,e");
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	33d8      	adds	r3, #216	; 0xd8
 800303c:	4a18      	ldr	r2, [pc, #96]	; (80030a0 <problem_fetch+0x1d80>)
 800303e:	461c      	mov	r4, r3
 8003040:	4613      	mov	r3, r2
 8003042:	cb07      	ldmia	r3!, {r0, r1, r2}
 8003044:	6020      	str	r0, [r4, #0]
 8003046:	6061      	str	r1, [r4, #4]
 8003048:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade, "6C");
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	33cc      	adds	r3, #204	; 0xcc
 800304e:	4a10      	ldr	r2, [pc, #64]	; (8003090 <problem_fetch+0x1d70>)
 8003050:	8811      	ldrh	r1, [r2, #0]
 8003052:	7892      	ldrb	r2, [r2, #2]
 8003054:	8019      	strh	r1, [r3, #0]
 8003056:	709a      	strb	r2, [r3, #2]
			break;
 8003058:	f017 bea8 	b.w	801adac <problem_fetch+0x19a8c>
 800305c:	0802184c 	.word	0x0802184c
 8003060:	08021850 	.word	0x08021850
 8003064:	08021864 	.word	0x08021864
 8003068:	0802187c 	.word	0x0802187c
 800306c:	080212b0 	.word	0x080212b0
 8003070:	08021890 	.word	0x08021890
 8003074:	0802189c 	.word	0x0802189c
 8003078:	080218ac 	.word	0x080218ac
 800307c:	08021494 	.word	0x08021494
 8003080:	080218c0 	.word	0x080218c0
 8003084:	080218cc 	.word	0x080218cc
 8003088:	080218dc 	.word	0x080218dc
 800308c:	080212a0 	.word	0x080212a0
 8003090:	08021370 	.word	0x08021370
 8003094:	080218f0 	.word	0x080218f0
 8003098:	080218f4 	.word	0x080218f4
 800309c:	08021900 	.word	0x08021900
 80030a0:	08021910 	.word	0x08021910
 80030a4:	08021424 	.word	0x08021424
 80030a8:	0802191c 	.word	0x0802191c
 80030ac:	08021934 	.word	0x08021934
 80030b0:	08021944 	.word	0x08021944
 80030b4:	08021958 	.word	0x08021958
 80030b8:	0802132c 	.word	0x0802132c
 80030bc:	08021968 	.word	0x08021968
 80030c0:	08021978 	.word	0x08021978
 80030c4:	08021988 	.word	0x08021988
 80030c8:	080212f4 	.word	0x080212f4
 80030cc:	0802199c 	.word	0x0802199c
 80030d0:	080219ac 	.word	0x080219ac
 80030d4:	080219b8 	.word	0x080219b8
		case 13 :
			strcpy(p->name,"E-Z CHEESE");
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	337c      	adds	r3, #124	; 0x7c
 80030dc:	49be      	ldr	r1, [pc, #760]	; (80033d8 <problem_fetch+0x20b8>)
 80030de:	461a      	mov	r2, r3
 80030e0:	460b      	mov	r3, r1
 80030e2:	cb03      	ldmia	r3!, {r0, r1}
 80030e4:	6010      	str	r0, [r2, #0]
 80030e6:	6051      	str	r1, [r2, #4]
 80030e8:	8819      	ldrh	r1, [r3, #0]
 80030ea:	789b      	ldrb	r3, [r3, #2]
 80030ec:	8111      	strh	r1, [r2, #8]
 80030ee:	7293      	strb	r3, [r2, #10]
			p->moveSize = 8;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	2208      	movs	r2, #8
 80030f4:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"G,E,H,H,J,G,H,D");
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	3340      	adds	r3, #64	; 0x40
 80030fa:	4ab8      	ldr	r2, [pc, #736]	; (80033dc <problem_fetch+0x20bc>)
 80030fc:	461c      	mov	r4, r3
 80030fe:	4615      	mov	r5, r2
 8003100:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003102:	6020      	str	r0, [r4, #0]
 8003104:	6061      	str	r1, [r4, #4]
 8003106:	60a2      	str	r2, [r4, #8]
 8003108:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,8,10,12,13,15,16,18");
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	3304      	adds	r3, #4
 800310e:	4ab4      	ldr	r2, [pc, #720]	; (80033e0 <problem_fetch+0x20c0>)
 8003110:	461d      	mov	r5, r3
 8003112:	4614      	mov	r4, r2
 8003114:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003116:	6028      	str	r0, [r5, #0]
 8003118:	6069      	str	r1, [r5, #4]
 800311a:	60aa      	str	r2, [r5, #8]
 800311c:	60eb      	str	r3, [r5, #12]
 800311e:	6820      	ldr	r0, [r4, #0]
 8003120:	6128      	str	r0, [r5, #16]
 8003122:	88a3      	ldrh	r3, [r4, #4]
 8003124:	82ab      	strh	r3, [r5, #20]
			strcpy(p->startFinish, "s,d,d,d,d,d,d,e");
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	33d8      	adds	r3, #216	; 0xd8
 800312a:	4aae      	ldr	r2, [pc, #696]	; (80033e4 <problem_fetch+0x20c4>)
 800312c:	461c      	mov	r4, r3
 800312e:	4615      	mov	r5, r2
 8003130:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003132:	6020      	str	r0, [r4, #0]
 8003134:	6061      	str	r1, [r4, #4]
 8003136:	60a2      	str	r2, [r4, #8]
 8003138:	60e3      	str	r3, [r4, #12]
			strcpy(p->grade, "6B+");
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	33cc      	adds	r3, #204	; 0xcc
 800313e:	4aaa      	ldr	r2, [pc, #680]	; (80033e8 <problem_fetch+0x20c8>)
 8003140:	6810      	ldr	r0, [r2, #0]
 8003142:	6018      	str	r0, [r3, #0]
			break;
 8003144:	f017 be32 	b.w	801adac <problem_fetch+0x19a8c>
		case 130 :
			strcpy(p->name,"GRAYLING");
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	337c      	adds	r3, #124	; 0x7c
 800314c:	49a7      	ldr	r1, [pc, #668]	; (80033ec <problem_fetch+0x20cc>)
 800314e:	461a      	mov	r2, r3
 8003150:	460b      	mov	r3, r1
 8003152:	cb03      	ldmia	r3!, {r0, r1}
 8003154:	6010      	str	r0, [r2, #0]
 8003156:	6051      	str	r1, [r2, #4]
 8003158:	781b      	ldrb	r3, [r3, #0]
 800315a:	7213      	strb	r3, [r2, #8]
			p->moveSize = 8;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	2208      	movs	r2, #8
 8003160:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"J,I,H,G,F,E,D,D");
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	3340      	adds	r3, #64	; 0x40
 8003166:	4aa2      	ldr	r2, [pc, #648]	; (80033f0 <problem_fetch+0x20d0>)
 8003168:	461c      	mov	r4, r3
 800316a:	4615      	mov	r5, r2
 800316c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800316e:	6020      	str	r0, [r4, #0]
 8003170:	6061      	str	r1, [r4, #4]
 8003172:	60a2      	str	r2, [r4, #8]
 8003174:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,7,8,9,11,12,15,18");
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	3304      	adds	r3, #4
 800317a:	4a9e      	ldr	r2, [pc, #632]	; (80033f4 <problem_fetch+0x20d4>)
 800317c:	461d      	mov	r5, r3
 800317e:	4614      	mov	r4, r2
 8003180:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003182:	6028      	str	r0, [r5, #0]
 8003184:	6069      	str	r1, [r5, #4]
 8003186:	60aa      	str	r2, [r5, #8]
 8003188:	60eb      	str	r3, [r5, #12]
 800318a:	6820      	ldr	r0, [r4, #0]
 800318c:	6128      	str	r0, [r5, #16]
			strcpy(p->startFinish, "s,d,d,d,d,d,d,e");
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	33d8      	adds	r3, #216	; 0xd8
 8003192:	4a94      	ldr	r2, [pc, #592]	; (80033e4 <problem_fetch+0x20c4>)
 8003194:	461c      	mov	r4, r3
 8003196:	4615      	mov	r5, r2
 8003198:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800319a:	6020      	str	r0, [r4, #0]
 800319c:	6061      	str	r1, [r4, #4]
 800319e:	60a2      	str	r2, [r4, #8]
 80031a0:	60e3      	str	r3, [r4, #12]
			strcpy(p->grade, "6C+");
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	33cc      	adds	r3, #204	; 0xcc
 80031a6:	4a94      	ldr	r2, [pc, #592]	; (80033f8 <problem_fetch+0x20d8>)
 80031a8:	6810      	ldr	r0, [r2, #0]
 80031aa:	6018      	str	r0, [r3, #0]
			break;
 80031ac:	f017 bdfe 	b.w	801adac <problem_fetch+0x19a8c>
		case 131 :
			strcpy(p->name,"HAMPUS NEDERLAG");
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	337c      	adds	r3, #124	; 0x7c
 80031b4:	4a91      	ldr	r2, [pc, #580]	; (80033fc <problem_fetch+0x20dc>)
 80031b6:	461c      	mov	r4, r3
 80031b8:	4615      	mov	r5, r2
 80031ba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80031bc:	6020      	str	r0, [r4, #0]
 80031be:	6061      	str	r1, [r4, #4]
 80031c0:	60a2      	str	r2, [r4, #8]
 80031c2:	60e3      	str	r3, [r4, #12]
			p->moveSize = 7;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	2207      	movs	r2, #7
 80031c8:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"H,E,G,D,E,B,D");
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	3340      	adds	r3, #64	; 0x40
 80031ce:	4a8c      	ldr	r2, [pc, #560]	; (8003400 <problem_fetch+0x20e0>)
 80031d0:	461c      	mov	r4, r3
 80031d2:	4613      	mov	r3, r2
 80031d4:	cb07      	ldmia	r3!, {r0, r1, r2}
 80031d6:	6020      	str	r0, [r4, #0]
 80031d8:	6061      	str	r1, [r4, #4]
 80031da:	60a2      	str	r2, [r4, #8]
 80031dc:	881b      	ldrh	r3, [r3, #0]
 80031de:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,6,9,11,12,15,18");
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	3304      	adds	r3, #4
 80031e4:	4a87      	ldr	r2, [pc, #540]	; (8003404 <problem_fetch+0x20e4>)
 80031e6:	461d      	mov	r5, r3
 80031e8:	4614      	mov	r4, r2
 80031ea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80031ec:	6028      	str	r0, [r5, #0]
 80031ee:	6069      	str	r1, [r5, #4]
 80031f0:	60aa      	str	r2, [r5, #8]
 80031f2:	60eb      	str	r3, [r5, #12]
 80031f4:	8823      	ldrh	r3, [r4, #0]
 80031f6:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish, "s,s,d,d,d,d,e");
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	33d8      	adds	r3, #216	; 0xd8
 80031fc:	4a82      	ldr	r2, [pc, #520]	; (8003408 <problem_fetch+0x20e8>)
 80031fe:	461c      	mov	r4, r3
 8003200:	4613      	mov	r3, r2
 8003202:	cb07      	ldmia	r3!, {r0, r1, r2}
 8003204:	6020      	str	r0, [r4, #0]
 8003206:	6061      	str	r1, [r4, #4]
 8003208:	60a2      	str	r2, [r4, #8]
 800320a:	881b      	ldrh	r3, [r3, #0]
 800320c:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade, "6B+");
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	33cc      	adds	r3, #204	; 0xcc
 8003212:	4a75      	ldr	r2, [pc, #468]	; (80033e8 <problem_fetch+0x20c8>)
 8003214:	6810      	ldr	r0, [r2, #0]
 8003216:	6018      	str	r0, [r3, #0]
			break;
 8003218:	f017 bdc8 	b.w	801adac <problem_fetch+0x19a8c>
		case 132 :
			strcpy(p->name,"NITERÓI 01");
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	337c      	adds	r3, #124	; 0x7c
 8003220:	4a7a      	ldr	r2, [pc, #488]	; (800340c <problem_fetch+0x20ec>)
 8003222:	461c      	mov	r4, r3
 8003224:	4613      	mov	r3, r2
 8003226:	cb07      	ldmia	r3!, {r0, r1, r2}
 8003228:	6020      	str	r0, [r4, #0]
 800322a:	6061      	str	r1, [r4, #4]
 800322c:	60a2      	str	r2, [r4, #8]
			p->moveSize = 9;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	2209      	movs	r2, #9
 8003232:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"C,B,D,C,E,D,G,G,I");
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	3340      	adds	r3, #64	; 0x40
 8003238:	4a75      	ldr	r2, [pc, #468]	; (8003410 <problem_fetch+0x20f0>)
 800323a:	461d      	mov	r5, r3
 800323c:	4614      	mov	r4, r2
 800323e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003240:	6028      	str	r0, [r5, #0]
 8003242:	6069      	str	r1, [r5, #4]
 8003244:	60aa      	str	r2, [r5, #8]
 8003246:	60eb      	str	r3, [r5, #12]
 8003248:	8823      	ldrh	r3, [r4, #0]
 800324a:	822b      	strh	r3, [r5, #16]
			strcpy(p->moveNumbers,"5,6,7,8,9,11,14,15,18");
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	3304      	adds	r3, #4
 8003250:	4a70      	ldr	r2, [pc, #448]	; (8003414 <problem_fetch+0x20f4>)
 8003252:	461d      	mov	r5, r3
 8003254:	4614      	mov	r4, r2
 8003256:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003258:	6028      	str	r0, [r5, #0]
 800325a:	6069      	str	r1, [r5, #4]
 800325c:	60aa      	str	r2, [r5, #8]
 800325e:	60eb      	str	r3, [r5, #12]
 8003260:	6820      	ldr	r0, [r4, #0]
 8003262:	6128      	str	r0, [r5, #16]
 8003264:	88a3      	ldrh	r3, [r4, #4]
 8003266:	82ab      	strh	r3, [r5, #20]
			strcpy(p->startFinish, "s,s,d,d,d,d,d,d,e");
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	33d8      	adds	r3, #216	; 0xd8
 800326c:	4a6a      	ldr	r2, [pc, #424]	; (8003418 <problem_fetch+0x20f8>)
 800326e:	461d      	mov	r5, r3
 8003270:	4614      	mov	r4, r2
 8003272:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003274:	6028      	str	r0, [r5, #0]
 8003276:	6069      	str	r1, [r5, #4]
 8003278:	60aa      	str	r2, [r5, #8]
 800327a:	60eb      	str	r3, [r5, #12]
 800327c:	8823      	ldrh	r3, [r4, #0]
 800327e:	822b      	strh	r3, [r5, #16]
			strcpy(p->grade, "6C+");
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	33cc      	adds	r3, #204	; 0xcc
 8003284:	4a5c      	ldr	r2, [pc, #368]	; (80033f8 <problem_fetch+0x20d8>)
 8003286:	6810      	ldr	r0, [r2, #0]
 8003288:	6018      	str	r0, [r3, #0]
			break;
 800328a:	f017 bd8f 	b.w	801adac <problem_fetch+0x19a8c>
		case 133 :
			strcpy(p->name,"CEPPODE...");
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	337c      	adds	r3, #124	; 0x7c
 8003292:	4962      	ldr	r1, [pc, #392]	; (800341c <problem_fetch+0x20fc>)
 8003294:	461a      	mov	r2, r3
 8003296:	460b      	mov	r3, r1
 8003298:	cb03      	ldmia	r3!, {r0, r1}
 800329a:	6010      	str	r0, [r2, #0]
 800329c:	6051      	str	r1, [r2, #4]
 800329e:	8819      	ldrh	r1, [r3, #0]
 80032a0:	789b      	ldrb	r3, [r3, #2]
 80032a2:	8111      	strh	r1, [r2, #8]
 80032a4:	7293      	strb	r3, [r2, #10]
			p->moveSize = 7;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	2207      	movs	r2, #7
 80032aa:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"C,H,H,E,H,D,D");
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	3340      	adds	r3, #64	; 0x40
 80032b0:	4a5b      	ldr	r2, [pc, #364]	; (8003420 <problem_fetch+0x2100>)
 80032b2:	461c      	mov	r4, r3
 80032b4:	4613      	mov	r3, r2
 80032b6:	cb07      	ldmia	r3!, {r0, r1, r2}
 80032b8:	6020      	str	r0, [r4, #0]
 80032ba:	6061      	str	r1, [r4, #4]
 80032bc:	60a2      	str	r2, [r4, #8]
 80032be:	881b      	ldrh	r3, [r3, #0]
 80032c0:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,5,8,9,12,15,18");
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	3304      	adds	r3, #4
 80032c6:	4a57      	ldr	r2, [pc, #348]	; (8003424 <problem_fetch+0x2104>)
 80032c8:	461d      	mov	r5, r3
 80032ca:	4614      	mov	r4, r2
 80032cc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80032ce:	6028      	str	r0, [r5, #0]
 80032d0:	6069      	str	r1, [r5, #4]
 80032d2:	60aa      	str	r2, [r5, #8]
 80032d4:	60eb      	str	r3, [r5, #12]
 80032d6:	7823      	ldrb	r3, [r4, #0]
 80032d8:	742b      	strb	r3, [r5, #16]
			strcpy(p->startFinish, "s,s,d,d,d,d,e");
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	33d8      	adds	r3, #216	; 0xd8
 80032de:	4a4a      	ldr	r2, [pc, #296]	; (8003408 <problem_fetch+0x20e8>)
 80032e0:	461c      	mov	r4, r3
 80032e2:	4613      	mov	r3, r2
 80032e4:	cb07      	ldmia	r3!, {r0, r1, r2}
 80032e6:	6020      	str	r0, [r4, #0]
 80032e8:	6061      	str	r1, [r4, #4]
 80032ea:	60a2      	str	r2, [r4, #8]
 80032ec:	881b      	ldrh	r3, [r3, #0]
 80032ee:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade, "7A");
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	33cc      	adds	r3, #204	; 0xcc
 80032f4:	4a4c      	ldr	r2, [pc, #304]	; (8003428 <problem_fetch+0x2108>)
 80032f6:	8811      	ldrh	r1, [r2, #0]
 80032f8:	7892      	ldrb	r2, [r2, #2]
 80032fa:	8019      	strh	r1, [r3, #0]
 80032fc:	709a      	strb	r2, [r3, #2]
			break;
 80032fe:	f017 bd55 	b.w	801adac <problem_fetch+0x19a8c>
		case 134 :
			strcpy(p->name,"JAGUAR SHARK");
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	337c      	adds	r3, #124	; 0x7c
 8003306:	4a49      	ldr	r2, [pc, #292]	; (800342c <problem_fetch+0x210c>)
 8003308:	461c      	mov	r4, r3
 800330a:	4613      	mov	r3, r2
 800330c:	cb07      	ldmia	r3!, {r0, r1, r2}
 800330e:	6020      	str	r0, [r4, #0]
 8003310:	6061      	str	r1, [r4, #4]
 8003312:	60a2      	str	r2, [r4, #8]
 8003314:	781b      	ldrb	r3, [r3, #0]
 8003316:	7323      	strb	r3, [r4, #12]
			p->moveSize = 7;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	2207      	movs	r2, #7
 800331c:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"J,H,E,C,D,E,I");
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	3340      	adds	r3, #64	; 0x40
 8003322:	4a43      	ldr	r2, [pc, #268]	; (8003430 <problem_fetch+0x2110>)
 8003324:	461c      	mov	r4, r3
 8003326:	4613      	mov	r3, r2
 8003328:	cb07      	ldmia	r3!, {r0, r1, r2}
 800332a:	6020      	str	r0, [r4, #0]
 800332c:	6061      	str	r1, [r4, #4]
 800332e:	60a2      	str	r2, [r4, #8]
 8003330:	881b      	ldrh	r3, [r3, #0]
 8003332:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,10,12,13,15,16,18");
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	3304      	adds	r3, #4
 8003338:	4a3e      	ldr	r2, [pc, #248]	; (8003434 <problem_fetch+0x2114>)
 800333a:	461d      	mov	r5, r3
 800333c:	4614      	mov	r4, r2
 800333e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003340:	6028      	str	r0, [r5, #0]
 8003342:	6069      	str	r1, [r5, #4]
 8003344:	60aa      	str	r2, [r5, #8]
 8003346:	60eb      	str	r3, [r5, #12]
 8003348:	6820      	ldr	r0, [r4, #0]
 800334a:	6128      	str	r0, [r5, #16]
			strcpy(p->startFinish, "s,d,d,d,d,d,e");
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	33d8      	adds	r3, #216	; 0xd8
 8003350:	4a39      	ldr	r2, [pc, #228]	; (8003438 <problem_fetch+0x2118>)
 8003352:	461c      	mov	r4, r3
 8003354:	4613      	mov	r3, r2
 8003356:	cb07      	ldmia	r3!, {r0, r1, r2}
 8003358:	6020      	str	r0, [r4, #0]
 800335a:	6061      	str	r1, [r4, #4]
 800335c:	60a2      	str	r2, [r4, #8]
 800335e:	881b      	ldrh	r3, [r3, #0]
 8003360:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade, "7A+");
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	33cc      	adds	r3, #204	; 0xcc
 8003366:	4a35      	ldr	r2, [pc, #212]	; (800343c <problem_fetch+0x211c>)
 8003368:	6810      	ldr	r0, [r2, #0]
 800336a:	6018      	str	r0, [r3, #0]
			break;
 800336c:	f017 bd1e 	b.w	801adac <problem_fetch+0x19a8c>
		case 135 :
			strcpy(p->name,"CRAYON PONYFISH");
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	337c      	adds	r3, #124	; 0x7c
 8003374:	4a32      	ldr	r2, [pc, #200]	; (8003440 <problem_fetch+0x2120>)
 8003376:	461c      	mov	r4, r3
 8003378:	4615      	mov	r5, r2
 800337a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800337c:	6020      	str	r0, [r4, #0]
 800337e:	6061      	str	r1, [r4, #4]
 8003380:	60a2      	str	r2, [r4, #8]
 8003382:	60e3      	str	r3, [r4, #12]
			p->moveSize = 5;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	2205      	movs	r2, #5
 8003388:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"J,H,C,I,D");
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	3340      	adds	r3, #64	; 0x40
 800338e:	492d      	ldr	r1, [pc, #180]	; (8003444 <problem_fetch+0x2124>)
 8003390:	461a      	mov	r2, r3
 8003392:	460b      	mov	r3, r1
 8003394:	cb03      	ldmia	r3!, {r0, r1}
 8003396:	6010      	str	r0, [r2, #0]
 8003398:	6051      	str	r1, [r2, #4]
 800339a:	881b      	ldrh	r3, [r3, #0]
 800339c:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"5,10,13,14,18");
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	3304      	adds	r3, #4
 80033a2:	4a29      	ldr	r2, [pc, #164]	; (8003448 <problem_fetch+0x2128>)
 80033a4:	461c      	mov	r4, r3
 80033a6:	4613      	mov	r3, r2
 80033a8:	cb07      	ldmia	r3!, {r0, r1, r2}
 80033aa:	6020      	str	r0, [r4, #0]
 80033ac:	6061      	str	r1, [r4, #4]
 80033ae:	60a2      	str	r2, [r4, #8]
 80033b0:	881b      	ldrh	r3, [r3, #0]
 80033b2:	81a3      	strh	r3, [r4, #12]
			strcpy(p->startFinish, "s,d,d,d,e");
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	33d8      	adds	r3, #216	; 0xd8
 80033b8:	4924      	ldr	r1, [pc, #144]	; (800344c <problem_fetch+0x212c>)
 80033ba:	461a      	mov	r2, r3
 80033bc:	460b      	mov	r3, r1
 80033be:	cb03      	ldmia	r3!, {r0, r1}
 80033c0:	6010      	str	r0, [r2, #0]
 80033c2:	6051      	str	r1, [r2, #4]
 80033c4:	881b      	ldrh	r3, [r3, #0]
 80033c6:	8113      	strh	r3, [r2, #8]
			strcpy(p->grade, "7A+");
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	33cc      	adds	r3, #204	; 0xcc
 80033cc:	4a1b      	ldr	r2, [pc, #108]	; (800343c <problem_fetch+0x211c>)
 80033ce:	6810      	ldr	r0, [r2, #0]
 80033d0:	6018      	str	r0, [r3, #0]
			break;
 80033d2:	f017 bceb 	b.w	801adac <problem_fetch+0x19a8c>
 80033d6:	bf00      	nop
 80033d8:	080219c8 	.word	0x080219c8
 80033dc:	080219d4 	.word	0x080219d4
 80033e0:	080219e4 	.word	0x080219e4
 80033e4:	08021458 	.word	0x08021458
 80033e8:	080212b0 	.word	0x080212b0
 80033ec:	080219fc 	.word	0x080219fc
 80033f0:	08021a08 	.word	0x08021a08
 80033f4:	08021a18 	.word	0x08021a18
 80033f8:	080213a8 	.word	0x080213a8
 80033fc:	08021a2c 	.word	0x08021a2c
 8003400:	08021a3c 	.word	0x08021a3c
 8003404:	08021a4c 	.word	0x08021a4c
 8003408:	080212a0 	.word	0x080212a0
 800340c:	08021a60 	.word	0x08021a60
 8003410:	08021a6c 	.word	0x08021a6c
 8003414:	08021a80 	.word	0x08021a80
 8003418:	0802187c 	.word	0x0802187c
 800341c:	08021a98 	.word	0x08021a98
 8003420:	08021aa4 	.word	0x08021aa4
 8003424:	08021ab4 	.word	0x08021ab4
 8003428:	080212f4 	.word	0x080212f4
 800342c:	08021ac8 	.word	0x08021ac8
 8003430:	08021ad8 	.word	0x08021ad8
 8003434:	08021ae8 	.word	0x08021ae8
 8003438:	08021494 	.word	0x08021494
 800343c:	08021424 	.word	0x08021424
 8003440:	08021afc 	.word	0x08021afc
 8003444:	08021b0c 	.word	0x08021b0c
 8003448:	08021b18 	.word	0x08021b18
 800344c:	08021320 	.word	0x08021320
		case 136 :
			strcpy(p->name,"ROCK N LOCK");
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	337c      	adds	r3, #124	; 0x7c
 8003454:	4ab6      	ldr	r2, [pc, #728]	; (8003730 <problem_fetch+0x2410>)
 8003456:	461c      	mov	r4, r3
 8003458:	4613      	mov	r3, r2
 800345a:	cb07      	ldmia	r3!, {r0, r1, r2}
 800345c:	6020      	str	r0, [r4, #0]
 800345e:	6061      	str	r1, [r4, #4]
 8003460:	60a2      	str	r2, [r4, #8]
			p->moveSize = 6;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	2206      	movs	r2, #6
 8003466:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"G,J,H,I,G,I");
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	3340      	adds	r3, #64	; 0x40
 800346c:	4ab1      	ldr	r2, [pc, #708]	; (8003734 <problem_fetch+0x2414>)
 800346e:	461c      	mov	r4, r3
 8003470:	4613      	mov	r3, r2
 8003472:	cb07      	ldmia	r3!, {r0, r1, r2}
 8003474:	6020      	str	r0, [r4, #0]
 8003476:	6061      	str	r1, [r4, #4]
 8003478:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,7,10,14,17,18");
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	3304      	adds	r3, #4
 800347e:	4aae      	ldr	r2, [pc, #696]	; (8003738 <problem_fetch+0x2418>)
 8003480:	461c      	mov	r4, r3
 8003482:	4615      	mov	r5, r2
 8003484:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003486:	6020      	str	r0, [r4, #0]
 8003488:	6061      	str	r1, [r4, #4]
 800348a:	60a2      	str	r2, [r4, #8]
 800348c:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish, "s,d,d,d,d,e");
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	33d8      	adds	r3, #216	; 0xd8
 8003492:	4aaa      	ldr	r2, [pc, #680]	; (800373c <problem_fetch+0x241c>)
 8003494:	461c      	mov	r4, r3
 8003496:	4613      	mov	r3, r2
 8003498:	cb07      	ldmia	r3!, {r0, r1, r2}
 800349a:	6020      	str	r0, [r4, #0]
 800349c:	6061      	str	r1, [r4, #4]
 800349e:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade, "6C");
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	33cc      	adds	r3, #204	; 0xcc
 80034a4:	4aa6      	ldr	r2, [pc, #664]	; (8003740 <problem_fetch+0x2420>)
 80034a6:	8811      	ldrh	r1, [r2, #0]
 80034a8:	7892      	ldrb	r2, [r2, #2]
 80034aa:	8019      	strh	r1, [r3, #0]
 80034ac:	709a      	strb	r2, [r3, #2]
			break;
 80034ae:	f017 bc7d 	b.w	801adac <problem_fetch+0x19a8c>
		case 137 :
			strcpy(p->name,"IL MANFRUITO");
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	337c      	adds	r3, #124	; 0x7c
 80034b6:	4aa3      	ldr	r2, [pc, #652]	; (8003744 <problem_fetch+0x2424>)
 80034b8:	461c      	mov	r4, r3
 80034ba:	4613      	mov	r3, r2
 80034bc:	cb07      	ldmia	r3!, {r0, r1, r2}
 80034be:	6020      	str	r0, [r4, #0]
 80034c0:	6061      	str	r1, [r4, #4]
 80034c2:	60a2      	str	r2, [r4, #8]
 80034c4:	781b      	ldrb	r3, [r3, #0]
 80034c6:	7323      	strb	r3, [r4, #12]
			p->moveSize = 6;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	2206      	movs	r2, #6
 80034cc:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"A,E,E,F,G,G");
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	3340      	adds	r3, #64	; 0x40
 80034d2:	4a9d      	ldr	r2, [pc, #628]	; (8003748 <problem_fetch+0x2428>)
 80034d4:	461c      	mov	r4, r3
 80034d6:	4613      	mov	r3, r2
 80034d8:	cb07      	ldmia	r3!, {r0, r1, r2}
 80034da:	6020      	str	r0, [r4, #0]
 80034dc:	6061      	str	r1, [r4, #4]
 80034de:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"18,6,9,13,4,17");
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	3304      	adds	r3, #4
 80034e4:	4a99      	ldr	r2, [pc, #612]	; (800374c <problem_fetch+0x242c>)
 80034e6:	461c      	mov	r4, r3
 80034e8:	4613      	mov	r3, r2
 80034ea:	cb07      	ldmia	r3!, {r0, r1, r2}
 80034ec:	6020      	str	r0, [r4, #0]
 80034ee:	6061      	str	r1, [r4, #4]
 80034f0:	60a2      	str	r2, [r4, #8]
 80034f2:	881a      	ldrh	r2, [r3, #0]
 80034f4:	789b      	ldrb	r3, [r3, #2]
 80034f6:	81a2      	strh	r2, [r4, #12]
 80034f8:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish, "e,s,d,d,s,d");
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	33d8      	adds	r3, #216	; 0xd8
 80034fe:	4a94      	ldr	r2, [pc, #592]	; (8003750 <problem_fetch+0x2430>)
 8003500:	461c      	mov	r4, r3
 8003502:	4613      	mov	r3, r2
 8003504:	cb07      	ldmia	r3!, {r0, r1, r2}
 8003506:	6020      	str	r0, [r4, #0]
 8003508:	6061      	str	r1, [r4, #4]
 800350a:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade, "7C");
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	33cc      	adds	r3, #204	; 0xcc
 8003510:	4a90      	ldr	r2, [pc, #576]	; (8003754 <problem_fetch+0x2434>)
 8003512:	8811      	ldrh	r1, [r2, #0]
 8003514:	7892      	ldrb	r2, [r2, #2]
 8003516:	8019      	strh	r1, [r3, #0]
 8003518:	709a      	strb	r2, [r3, #2]
			break;
 800351a:	f017 bc47 	b.w	801adac <problem_fetch+0x19a8c>
		case 138 :
			strcpy(p->name,"JAGUAR SHARK HARD");
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	337c      	adds	r3, #124	; 0x7c
 8003522:	4a8d      	ldr	r2, [pc, #564]	; (8003758 <problem_fetch+0x2438>)
 8003524:	461d      	mov	r5, r3
 8003526:	4614      	mov	r4, r2
 8003528:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800352a:	6028      	str	r0, [r5, #0]
 800352c:	6069      	str	r1, [r5, #4]
 800352e:	60aa      	str	r2, [r5, #8]
 8003530:	60eb      	str	r3, [r5, #12]
 8003532:	8823      	ldrh	r3, [r4, #0]
 8003534:	822b      	strh	r3, [r5, #16]
			p->moveSize = 6;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	2206      	movs	r2, #6
 800353a:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"J,H,E,C,E,I");
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	3340      	adds	r3, #64	; 0x40
 8003540:	4a86      	ldr	r2, [pc, #536]	; (800375c <problem_fetch+0x243c>)
 8003542:	461c      	mov	r4, r3
 8003544:	4613      	mov	r3, r2
 8003546:	cb07      	ldmia	r3!, {r0, r1, r2}
 8003548:	6020      	str	r0, [r4, #0]
 800354a:	6061      	str	r1, [r4, #4]
 800354c:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,10,12,13,16,18");
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	3304      	adds	r3, #4
 8003552:	4a83      	ldr	r2, [pc, #524]	; (8003760 <problem_fetch+0x2440>)
 8003554:	461d      	mov	r5, r3
 8003556:	4614      	mov	r4, r2
 8003558:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800355a:	6028      	str	r0, [r5, #0]
 800355c:	6069      	str	r1, [r5, #4]
 800355e:	60aa      	str	r2, [r5, #8]
 8003560:	60eb      	str	r3, [r5, #12]
 8003562:	7823      	ldrb	r3, [r4, #0]
 8003564:	742b      	strb	r3, [r5, #16]
			strcpy(p->startFinish, "s,d,d,d,d,e");
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	33d8      	adds	r3, #216	; 0xd8
 800356a:	4a74      	ldr	r2, [pc, #464]	; (800373c <problem_fetch+0x241c>)
 800356c:	461c      	mov	r4, r3
 800356e:	4613      	mov	r3, r2
 8003570:	cb07      	ldmia	r3!, {r0, r1, r2}
 8003572:	6020      	str	r0, [r4, #0]
 8003574:	6061      	str	r1, [r4, #4]
 8003576:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade, "7B+");
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	33cc      	adds	r3, #204	; 0xcc
 800357c:	4a79      	ldr	r2, [pc, #484]	; (8003764 <problem_fetch+0x2444>)
 800357e:	6810      	ldr	r0, [r2, #0]
 8003580:	6018      	str	r0, [r3, #0]
			break;
 8003582:	f017 bc13 	b.w	801adac <problem_fetch+0x19a8c>
		case 139 :
			strcpy(p->name,"BP");
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	337c      	adds	r3, #124	; 0x7c
 800358a:	4a77      	ldr	r2, [pc, #476]	; (8003768 <problem_fetch+0x2448>)
 800358c:	8811      	ldrh	r1, [r2, #0]
 800358e:	7892      	ldrb	r2, [r2, #2]
 8003590:	8019      	strh	r1, [r3, #0]
 8003592:	709a      	strb	r2, [r3, #2]
			p->moveSize = 9;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	2209      	movs	r2, #9
 8003598:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"C,B,E,E,I,H,J,H,I");
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	3340      	adds	r3, #64	; 0x40
 800359e:	4a73      	ldr	r2, [pc, #460]	; (800376c <problem_fetch+0x244c>)
 80035a0:	461d      	mov	r5, r3
 80035a2:	4614      	mov	r4, r2
 80035a4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80035a6:	6028      	str	r0, [r5, #0]
 80035a8:	6069      	str	r1, [r5, #4]
 80035aa:	60aa      	str	r2, [r5, #8]
 80035ac:	60eb      	str	r3, [r5, #12]
 80035ae:	8823      	ldrh	r3, [r4, #0]
 80035b0:	822b      	strh	r3, [r5, #16]
			strcpy(p->moveNumbers,"5,6,9,8,10,12,13,16,18");
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	3304      	adds	r3, #4
 80035b6:	4a6e      	ldr	r2, [pc, #440]	; (8003770 <problem_fetch+0x2450>)
 80035b8:	461c      	mov	r4, r3
 80035ba:	4615      	mov	r5, r2
 80035bc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80035be:	6020      	str	r0, [r4, #0]
 80035c0:	6061      	str	r1, [r4, #4]
 80035c2:	60a2      	str	r2, [r4, #8]
 80035c4:	60e3      	str	r3, [r4, #12]
 80035c6:	6828      	ldr	r0, [r5, #0]
 80035c8:	6120      	str	r0, [r4, #16]
 80035ca:	88ab      	ldrh	r3, [r5, #4]
 80035cc:	79aa      	ldrb	r2, [r5, #6]
 80035ce:	82a3      	strh	r3, [r4, #20]
 80035d0:	4613      	mov	r3, r2
 80035d2:	75a3      	strb	r3, [r4, #22]
			strcpy(p->startFinish, "s,s,d,d,d,d,d,d,e");
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	33d8      	adds	r3, #216	; 0xd8
 80035d8:	4a66      	ldr	r2, [pc, #408]	; (8003774 <problem_fetch+0x2454>)
 80035da:	461d      	mov	r5, r3
 80035dc:	4614      	mov	r4, r2
 80035de:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80035e0:	6028      	str	r0, [r5, #0]
 80035e2:	6069      	str	r1, [r5, #4]
 80035e4:	60aa      	str	r2, [r5, #8]
 80035e6:	60eb      	str	r3, [r5, #12]
 80035e8:	8823      	ldrh	r3, [r4, #0]
 80035ea:	822b      	strh	r3, [r5, #16]
			strcpy(p->grade, "6B+");
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	33cc      	adds	r3, #204	; 0xcc
 80035f0:	4a61      	ldr	r2, [pc, #388]	; (8003778 <problem_fetch+0x2458>)
 80035f2:	6810      	ldr	r0, [r2, #0]
 80035f4:	6018      	str	r0, [r3, #0]
			break;
 80035f6:	f017 bbd9 	b.w	801adac <problem_fetch+0x19a8c>
		case 14 :
			strcpy(p->name,"SNAGGLEPUSS");
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	337c      	adds	r3, #124	; 0x7c
 80035fe:	4a5f      	ldr	r2, [pc, #380]	; (800377c <problem_fetch+0x245c>)
 8003600:	461c      	mov	r4, r3
 8003602:	4613      	mov	r3, r2
 8003604:	cb07      	ldmia	r3!, {r0, r1, r2}
 8003606:	6020      	str	r0, [r4, #0]
 8003608:	6061      	str	r1, [r4, #4]
 800360a:	60a2      	str	r2, [r4, #8]
			p->moveSize = 6;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	2206      	movs	r2, #6
 8003610:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"H,K,H,I,H,I");
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	3340      	adds	r3, #64	; 0x40
 8003616:	4a5a      	ldr	r2, [pc, #360]	; (8003780 <problem_fetch+0x2460>)
 8003618:	461c      	mov	r4, r3
 800361a:	4613      	mov	r3, r2
 800361c:	cb07      	ldmia	r3!, {r0, r1, r2}
 800361e:	6020      	str	r0, [r4, #0]
 8003620:	6061      	str	r1, [r4, #4]
 8003622:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,9,12,14,16,18");
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	3304      	adds	r3, #4
 8003628:	4a56      	ldr	r2, [pc, #344]	; (8003784 <problem_fetch+0x2464>)
 800362a:	461c      	mov	r4, r3
 800362c:	4615      	mov	r5, r2
 800362e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003630:	6020      	str	r0, [r4, #0]
 8003632:	6061      	str	r1, [r4, #4]
 8003634:	60a2      	str	r2, [r4, #8]
 8003636:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish, "s,d,d,d,d,e");
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	33d8      	adds	r3, #216	; 0xd8
 800363c:	4a3f      	ldr	r2, [pc, #252]	; (800373c <problem_fetch+0x241c>)
 800363e:	461c      	mov	r4, r3
 8003640:	4613      	mov	r3, r2
 8003642:	cb07      	ldmia	r3!, {r0, r1, r2}
 8003644:	6020      	str	r0, [r4, #0]
 8003646:	6061      	str	r1, [r4, #4]
 8003648:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade, "6B+");
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	33cc      	adds	r3, #204	; 0xcc
 800364e:	4a4a      	ldr	r2, [pc, #296]	; (8003778 <problem_fetch+0x2458>)
 8003650:	6810      	ldr	r0, [r2, #0]
 8003652:	6018      	str	r0, [r3, #0]
			break;
 8003654:	f017 bbaa 	b.w	801adac <problem_fetch+0x19a8c>
		case 140 :
			strcpy(p->name,"LAGO NERO");
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	337c      	adds	r3, #124	; 0x7c
 800365c:	494a      	ldr	r1, [pc, #296]	; (8003788 <problem_fetch+0x2468>)
 800365e:	461a      	mov	r2, r3
 8003660:	460b      	mov	r3, r1
 8003662:	cb03      	ldmia	r3!, {r0, r1}
 8003664:	6010      	str	r0, [r2, #0]
 8003666:	6051      	str	r1, [r2, #4]
 8003668:	881b      	ldrh	r3, [r3, #0]
 800366a:	8113      	strh	r3, [r2, #8]
			p->moveSize = 8;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	2208      	movs	r2, #8
 8003670:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"G,E,E,F,C,D,E,D");
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	3340      	adds	r3, #64	; 0x40
 8003676:	4a45      	ldr	r2, [pc, #276]	; (800378c <problem_fetch+0x246c>)
 8003678:	461c      	mov	r4, r3
 800367a:	4615      	mov	r5, r2
 800367c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800367e:	6020      	str	r0, [r4, #0]
 8003680:	6061      	str	r1, [r4, #4]
 8003682:	60a2      	str	r2, [r4, #8]
 8003684:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,6,8,11,13,15,16,18");
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	3304      	adds	r3, #4
 800368a:	4a41      	ldr	r2, [pc, #260]	; (8003790 <problem_fetch+0x2470>)
 800368c:	461d      	mov	r5, r3
 800368e:	4614      	mov	r4, r2
 8003690:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003692:	6028      	str	r0, [r5, #0]
 8003694:	6069      	str	r1, [r5, #4]
 8003696:	60aa      	str	r2, [r5, #8]
 8003698:	60eb      	str	r3, [r5, #12]
 800369a:	6820      	ldr	r0, [r4, #0]
 800369c:	6128      	str	r0, [r5, #16]
 800369e:	7923      	ldrb	r3, [r4, #4]
 80036a0:	752b      	strb	r3, [r5, #20]
			strcpy(p->startFinish, "s,s,d,d,d,d,d,e");
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	33d8      	adds	r3, #216	; 0xd8
 80036a6:	4a3b      	ldr	r2, [pc, #236]	; (8003794 <problem_fetch+0x2474>)
 80036a8:	461c      	mov	r4, r3
 80036aa:	4615      	mov	r5, r2
 80036ac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80036ae:	6020      	str	r0, [r4, #0]
 80036b0:	6061      	str	r1, [r4, #4]
 80036b2:	60a2      	str	r2, [r4, #8]
 80036b4:	60e3      	str	r3, [r4, #12]
			strcpy(p->grade, "6B+");
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	33cc      	adds	r3, #204	; 0xcc
 80036ba:	4a2f      	ldr	r2, [pc, #188]	; (8003778 <problem_fetch+0x2458>)
 80036bc:	6810      	ldr	r0, [r2, #0]
 80036be:	6018      	str	r0, [r3, #0]
			break;
 80036c0:	f017 bb74 	b.w	801adac <problem_fetch+0x19a8c>
		case 141 :
			strcpy(p->name,"ACG56");
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	337c      	adds	r3, #124	; 0x7c
 80036c8:	4a33      	ldr	r2, [pc, #204]	; (8003798 <problem_fetch+0x2478>)
 80036ca:	6810      	ldr	r0, [r2, #0]
 80036cc:	6018      	str	r0, [r3, #0]
 80036ce:	8892      	ldrh	r2, [r2, #4]
 80036d0:	809a      	strh	r2, [r3, #4]
			p->moveSize = 7;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	2207      	movs	r2, #7
 80036d6:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"J,I,H,E,C,B,A");
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	3340      	adds	r3, #64	; 0x40
 80036dc:	4a2f      	ldr	r2, [pc, #188]	; (800379c <problem_fetch+0x247c>)
 80036de:	461c      	mov	r4, r3
 80036e0:	4613      	mov	r3, r2
 80036e2:	cb07      	ldmia	r3!, {r0, r1, r2}
 80036e4:	6020      	str	r0, [r4, #0]
 80036e6:	6061      	str	r1, [r4, #4]
 80036e8:	60a2      	str	r2, [r4, #8]
 80036ea:	881b      	ldrh	r3, [r3, #0]
 80036ec:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,10,13,16,16,10,18");
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	3304      	adds	r3, #4
 80036f2:	4a2b      	ldr	r2, [pc, #172]	; (80037a0 <problem_fetch+0x2480>)
 80036f4:	461d      	mov	r5, r3
 80036f6:	4614      	mov	r4, r2
 80036f8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80036fa:	6028      	str	r0, [r5, #0]
 80036fc:	6069      	str	r1, [r5, #4]
 80036fe:	60aa      	str	r2, [r5, #8]
 8003700:	60eb      	str	r3, [r5, #12]
 8003702:	6820      	ldr	r0, [r4, #0]
 8003704:	6128      	str	r0, [r5, #16]
			strcpy(p->startFinish, "s,d,d,d,d,d,e");
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	33d8      	adds	r3, #216	; 0xd8
 800370a:	4a26      	ldr	r2, [pc, #152]	; (80037a4 <problem_fetch+0x2484>)
 800370c:	461c      	mov	r4, r3
 800370e:	4613      	mov	r3, r2
 8003710:	cb07      	ldmia	r3!, {r0, r1, r2}
 8003712:	6020      	str	r0, [r4, #0]
 8003714:	6061      	str	r1, [r4, #4]
 8003716:	60a2      	str	r2, [r4, #8]
 8003718:	881b      	ldrh	r3, [r3, #0]
 800371a:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade, "7A");
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	33cc      	adds	r3, #204	; 0xcc
 8003720:	4a21      	ldr	r2, [pc, #132]	; (80037a8 <problem_fetch+0x2488>)
 8003722:	8811      	ldrh	r1, [r2, #0]
 8003724:	7892      	ldrb	r2, [r2, #2]
 8003726:	8019      	strh	r1, [r3, #0]
 8003728:	709a      	strb	r2, [r3, #2]
			break;
 800372a:	f017 bb3f 	b.w	801adac <problem_fetch+0x19a8c>
 800372e:	bf00      	nop
 8003730:	08021b28 	.word	0x08021b28
 8003734:	08021b34 	.word	0x08021b34
 8003738:	08021b40 	.word	0x08021b40
 800373c:	0802139c 	.word	0x0802139c
 8003740:	08021370 	.word	0x08021370
 8003744:	08021b50 	.word	0x08021b50
 8003748:	08021b60 	.word	0x08021b60
 800374c:	08021b6c 	.word	0x08021b6c
 8003750:	08021b7c 	.word	0x08021b7c
 8003754:	0802158c 	.word	0x0802158c
 8003758:	08021b88 	.word	0x08021b88
 800375c:	08021b9c 	.word	0x08021b9c
 8003760:	08021ba8 	.word	0x08021ba8
 8003764:	08021848 	.word	0x08021848
 8003768:	08021bbc 	.word	0x08021bbc
 800376c:	08021bc0 	.word	0x08021bc0
 8003770:	08021bd4 	.word	0x08021bd4
 8003774:	0802187c 	.word	0x0802187c
 8003778:	080212b0 	.word	0x080212b0
 800377c:	08021bec 	.word	0x08021bec
 8003780:	08021bf8 	.word	0x08021bf8
 8003784:	08021c04 	.word	0x08021c04
 8003788:	08021c14 	.word	0x08021c14
 800378c:	08021c20 	.word	0x08021c20
 8003790:	08021c30 	.word	0x08021c30
 8003794:	080214cc 	.word	0x080214cc
 8003798:	08021c48 	.word	0x08021c48
 800379c:	08021c50 	.word	0x08021c50
 80037a0:	08021c60 	.word	0x08021c60
 80037a4:	08021494 	.word	0x08021494
 80037a8:	080212f4 	.word	0x080212f4
		case 142 :
			strcpy(p->name,"ACG59");
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	337c      	adds	r3, #124	; 0x7c
 80037b0:	4aa6      	ldr	r2, [pc, #664]	; (8003a4c <problem_fetch+0x272c>)
 80037b2:	6810      	ldr	r0, [r2, #0]
 80037b4:	6018      	str	r0, [r3, #0]
 80037b6:	8892      	ldrh	r2, [r2, #4]
 80037b8:	809a      	strh	r2, [r3, #4]
			p->moveSize = 8;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	2208      	movs	r2, #8
 80037be:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"H,C,E,B,D,E,F,I");
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	3340      	adds	r3, #64	; 0x40
 80037c4:	4aa2      	ldr	r2, [pc, #648]	; (8003a50 <problem_fetch+0x2730>)
 80037c6:	461c      	mov	r4, r3
 80037c8:	4615      	mov	r5, r2
 80037ca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80037cc:	6020      	str	r0, [r4, #0]
 80037ce:	6061      	str	r1, [r4, #4]
 80037d0:	60a2      	str	r2, [r4, #8]
 80037d2:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,5,8,10,15,16,11,18");
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	3304      	adds	r3, #4
 80037d8:	4a9e      	ldr	r2, [pc, #632]	; (8003a54 <problem_fetch+0x2734>)
 80037da:	461d      	mov	r5, r3
 80037dc:	4614      	mov	r4, r2
 80037de:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80037e0:	6028      	str	r0, [r5, #0]
 80037e2:	6069      	str	r1, [r5, #4]
 80037e4:	60aa      	str	r2, [r5, #8]
 80037e6:	60eb      	str	r3, [r5, #12]
 80037e8:	6820      	ldr	r0, [r4, #0]
 80037ea:	6128      	str	r0, [r5, #16]
 80037ec:	7923      	ldrb	r3, [r4, #4]
 80037ee:	752b      	strb	r3, [r5, #20]
			strcpy(p->startFinish, "s,s,d,d,d,d,d,e");
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	33d8      	adds	r3, #216	; 0xd8
 80037f4:	4a98      	ldr	r2, [pc, #608]	; (8003a58 <problem_fetch+0x2738>)
 80037f6:	461c      	mov	r4, r3
 80037f8:	4615      	mov	r5, r2
 80037fa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80037fc:	6020      	str	r0, [r4, #0]
 80037fe:	6061      	str	r1, [r4, #4]
 8003800:	60a2      	str	r2, [r4, #8]
 8003802:	60e3      	str	r3, [r4, #12]
			strcpy(p->grade, "6C");
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	33cc      	adds	r3, #204	; 0xcc
 8003808:	4a94      	ldr	r2, [pc, #592]	; (8003a5c <problem_fetch+0x273c>)
 800380a:	8811      	ldrh	r1, [r2, #0]
 800380c:	7892      	ldrb	r2, [r2, #2]
 800380e:	8019      	strh	r1, [r3, #0]
 8003810:	709a      	strb	r2, [r3, #2]
			break;
 8003812:	f017 bacb 	b.w	801adac <problem_fetch+0x19a8c>
		case 143 :
			strcpy(p->name,"DIAGONALE");
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	337c      	adds	r3, #124	; 0x7c
 800381a:	4991      	ldr	r1, [pc, #580]	; (8003a60 <problem_fetch+0x2740>)
 800381c:	461a      	mov	r2, r3
 800381e:	460b      	mov	r3, r1
 8003820:	cb03      	ldmia	r3!, {r0, r1}
 8003822:	6010      	str	r0, [r2, #0]
 8003824:	6051      	str	r1, [r2, #4]
 8003826:	881b      	ldrh	r3, [r3, #0]
 8003828:	8113      	strh	r3, [r2, #8]
			p->moveSize = 5;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	2205      	movs	r2, #5
 800382e:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"J,H,F,D,A");
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	3340      	adds	r3, #64	; 0x40
 8003834:	498b      	ldr	r1, [pc, #556]	; (8003a64 <problem_fetch+0x2744>)
 8003836:	461a      	mov	r2, r3
 8003838:	460b      	mov	r3, r1
 800383a:	cb03      	ldmia	r3!, {r0, r1}
 800383c:	6010      	str	r0, [r2, #0]
 800383e:	6051      	str	r1, [r2, #4]
 8003840:	881b      	ldrh	r3, [r3, #0]
 8003842:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"5,8,11,15,18");
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	3304      	adds	r3, #4
 8003848:	4a87      	ldr	r2, [pc, #540]	; (8003a68 <problem_fetch+0x2748>)
 800384a:	461c      	mov	r4, r3
 800384c:	4613      	mov	r3, r2
 800384e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8003850:	6020      	str	r0, [r4, #0]
 8003852:	6061      	str	r1, [r4, #4]
 8003854:	60a2      	str	r2, [r4, #8]
 8003856:	781b      	ldrb	r3, [r3, #0]
 8003858:	7323      	strb	r3, [r4, #12]
			strcpy(p->startFinish, "s,d,d,d,e");
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	33d8      	adds	r3, #216	; 0xd8
 800385e:	4983      	ldr	r1, [pc, #524]	; (8003a6c <problem_fetch+0x274c>)
 8003860:	461a      	mov	r2, r3
 8003862:	460b      	mov	r3, r1
 8003864:	cb03      	ldmia	r3!, {r0, r1}
 8003866:	6010      	str	r0, [r2, #0]
 8003868:	6051      	str	r1, [r2, #4]
 800386a:	881b      	ldrh	r3, [r3, #0]
 800386c:	8113      	strh	r3, [r2, #8]
			strcpy(p->grade, "7B");
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	33cc      	adds	r3, #204	; 0xcc
 8003872:	4a7f      	ldr	r2, [pc, #508]	; (8003a70 <problem_fetch+0x2750>)
 8003874:	8811      	ldrh	r1, [r2, #0]
 8003876:	7892      	ldrb	r2, [r2, #2]
 8003878:	8019      	strh	r1, [r3, #0]
 800387a:	709a      	strb	r2, [r3, #2]
			break;
 800387c:	f017 ba96 	b.w	801adac <problem_fetch+0x19a8c>
		case 144 :
			strcpy(p->name,"HOLD THE SWING");
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	337c      	adds	r3, #124	; 0x7c
 8003884:	4a7b      	ldr	r2, [pc, #492]	; (8003a74 <problem_fetch+0x2754>)
 8003886:	461c      	mov	r4, r3
 8003888:	4613      	mov	r3, r2
 800388a:	cb07      	ldmia	r3!, {r0, r1, r2}
 800388c:	6020      	str	r0, [r4, #0]
 800388e:	6061      	str	r1, [r4, #4]
 8003890:	60a2      	str	r2, [r4, #8]
 8003892:	881a      	ldrh	r2, [r3, #0]
 8003894:	789b      	ldrb	r3, [r3, #2]
 8003896:	81a2      	strh	r2, [r4, #12]
 8003898:	73a3      	strb	r3, [r4, #14]
			p->moveSize = 7;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	2207      	movs	r2, #7
 800389e:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"J,E,G,E,I,E,I");
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	3340      	adds	r3, #64	; 0x40
 80038a4:	4a74      	ldr	r2, [pc, #464]	; (8003a78 <problem_fetch+0x2758>)
 80038a6:	461c      	mov	r4, r3
 80038a8:	4613      	mov	r3, r2
 80038aa:	cb07      	ldmia	r3!, {r0, r1, r2}
 80038ac:	6020      	str	r0, [r4, #0]
 80038ae:	6061      	str	r1, [r4, #4]
 80038b0:	60a2      	str	r2, [r4, #8]
 80038b2:	881b      	ldrh	r3, [r3, #0]
 80038b4:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,6,9,12,14,14,18");
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	3304      	adds	r3, #4
 80038ba:	4a70      	ldr	r2, [pc, #448]	; (8003a7c <problem_fetch+0x275c>)
 80038bc:	461d      	mov	r5, r3
 80038be:	4614      	mov	r4, r2
 80038c0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80038c2:	6028      	str	r0, [r5, #0]
 80038c4:	6069      	str	r1, [r5, #4]
 80038c6:	60aa      	str	r2, [r5, #8]
 80038c8:	60eb      	str	r3, [r5, #12]
 80038ca:	8823      	ldrh	r3, [r4, #0]
 80038cc:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish, "s,s,d,d,d,d,e");
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	33d8      	adds	r3, #216	; 0xd8
 80038d2:	4a6b      	ldr	r2, [pc, #428]	; (8003a80 <problem_fetch+0x2760>)
 80038d4:	461c      	mov	r4, r3
 80038d6:	4613      	mov	r3, r2
 80038d8:	cb07      	ldmia	r3!, {r0, r1, r2}
 80038da:	6020      	str	r0, [r4, #0]
 80038dc:	6061      	str	r1, [r4, #4]
 80038de:	60a2      	str	r2, [r4, #8]
 80038e0:	881b      	ldrh	r3, [r3, #0]
 80038e2:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade, "6C");
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	33cc      	adds	r3, #204	; 0xcc
 80038e8:	4a5c      	ldr	r2, [pc, #368]	; (8003a5c <problem_fetch+0x273c>)
 80038ea:	8811      	ldrh	r1, [r2, #0]
 80038ec:	7892      	ldrb	r2, [r2, #2]
 80038ee:	8019      	strh	r1, [r3, #0]
 80038f0:	709a      	strb	r2, [r3, #2]
			break;
 80038f2:	f017 ba5b 	b.w	801adac <problem_fetch+0x19a8c>
		case 145 :
			strcpy(p->name,"AF EASY ONE");
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	337c      	adds	r3, #124	; 0x7c
 80038fa:	4a62      	ldr	r2, [pc, #392]	; (8003a84 <problem_fetch+0x2764>)
 80038fc:	461c      	mov	r4, r3
 80038fe:	4613      	mov	r3, r2
 8003900:	cb07      	ldmia	r3!, {r0, r1, r2}
 8003902:	6020      	str	r0, [r4, #0]
 8003904:	6061      	str	r1, [r4, #4]
 8003906:	60a2      	str	r2, [r4, #8]
			p->moveSize = 8;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	2208      	movs	r2, #8
 800390c:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"J,J,K,H,J,G,K,I");
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	3340      	adds	r3, #64	; 0x40
 8003912:	4a5d      	ldr	r2, [pc, #372]	; (8003a88 <problem_fetch+0x2768>)
 8003914:	461c      	mov	r4, r3
 8003916:	4615      	mov	r5, r2
 8003918:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800391a:	6020      	str	r0, [r4, #0]
 800391c:	6061      	str	r1, [r4, #4]
 800391e:	60a2      	str	r2, [r4, #8]
 8003920:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,7,9,10,12,14,16,18");
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	3304      	adds	r3, #4
 8003926:	4a59      	ldr	r2, [pc, #356]	; (8003a8c <problem_fetch+0x276c>)
 8003928:	461d      	mov	r5, r3
 800392a:	4614      	mov	r4, r2
 800392c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800392e:	6028      	str	r0, [r5, #0]
 8003930:	6069      	str	r1, [r5, #4]
 8003932:	60aa      	str	r2, [r5, #8]
 8003934:	60eb      	str	r3, [r5, #12]
 8003936:	6820      	ldr	r0, [r4, #0]
 8003938:	6128      	str	r0, [r5, #16]
 800393a:	7923      	ldrb	r3, [r4, #4]
 800393c:	752b      	strb	r3, [r5, #20]
			strcpy(p->startFinish, "s,d,d,d,d,d,d,e");
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	33d8      	adds	r3, #216	; 0xd8
 8003942:	4a53      	ldr	r2, [pc, #332]	; (8003a90 <problem_fetch+0x2770>)
 8003944:	461c      	mov	r4, r3
 8003946:	4615      	mov	r5, r2
 8003948:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800394a:	6020      	str	r0, [r4, #0]
 800394c:	6061      	str	r1, [r4, #4]
 800394e:	60a2      	str	r2, [r4, #8]
 8003950:	60e3      	str	r3, [r4, #12]
			strcpy(p->grade, "6B+");
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	33cc      	adds	r3, #204	; 0xcc
 8003956:	4a4f      	ldr	r2, [pc, #316]	; (8003a94 <problem_fetch+0x2774>)
 8003958:	6810      	ldr	r0, [r2, #0]
 800395a:	6018      	str	r0, [r3, #0]
			break;
 800395c:	f017 ba26 	b.w	801adac <problem_fetch+0x19a8c>
		case 146 :
			strcpy(p->name,"AF EASY FOUR");
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	337c      	adds	r3, #124	; 0x7c
 8003964:	4a4c      	ldr	r2, [pc, #304]	; (8003a98 <problem_fetch+0x2778>)
 8003966:	461c      	mov	r4, r3
 8003968:	4613      	mov	r3, r2
 800396a:	cb07      	ldmia	r3!, {r0, r1, r2}
 800396c:	6020      	str	r0, [r4, #0]
 800396e:	6061      	str	r1, [r4, #4]
 8003970:	60a2      	str	r2, [r4, #8]
 8003972:	781b      	ldrb	r3, [r3, #0]
 8003974:	7323      	strb	r3, [r4, #12]
			p->moveSize = 8;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	2208      	movs	r2, #8
 800397a:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"G,E,H,H,F,I,G,I");
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	3340      	adds	r3, #64	; 0x40
 8003980:	4a46      	ldr	r2, [pc, #280]	; (8003a9c <problem_fetch+0x277c>)
 8003982:	461c      	mov	r4, r3
 8003984:	4615      	mov	r5, r2
 8003986:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003988:	6020      	str	r0, [r4, #0]
 800398a:	6061      	str	r1, [r4, #4]
 800398c:	60a2      	str	r2, [r4, #8]
 800398e:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,6,8,10,13,14,15,18");
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	3304      	adds	r3, #4
 8003994:	4a42      	ldr	r2, [pc, #264]	; (8003aa0 <problem_fetch+0x2780>)
 8003996:	461d      	mov	r5, r3
 8003998:	4614      	mov	r4, r2
 800399a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800399c:	6028      	str	r0, [r5, #0]
 800399e:	6069      	str	r1, [r5, #4]
 80039a0:	60aa      	str	r2, [r5, #8]
 80039a2:	60eb      	str	r3, [r5, #12]
 80039a4:	6820      	ldr	r0, [r4, #0]
 80039a6:	6128      	str	r0, [r5, #16]
 80039a8:	7923      	ldrb	r3, [r4, #4]
 80039aa:	752b      	strb	r3, [r5, #20]
			strcpy(p->startFinish, "s,d,d,d,d,d,d,e");
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	33d8      	adds	r3, #216	; 0xd8
 80039b0:	4a37      	ldr	r2, [pc, #220]	; (8003a90 <problem_fetch+0x2770>)
 80039b2:	461c      	mov	r4, r3
 80039b4:	4615      	mov	r5, r2
 80039b6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80039b8:	6020      	str	r0, [r4, #0]
 80039ba:	6061      	str	r1, [r4, #4]
 80039bc:	60a2      	str	r2, [r4, #8]
 80039be:	60e3      	str	r3, [r4, #12]
			strcpy(p->grade, "6B+");
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	33cc      	adds	r3, #204	; 0xcc
 80039c4:	4a33      	ldr	r2, [pc, #204]	; (8003a94 <problem_fetch+0x2774>)
 80039c6:	6810      	ldr	r0, [r2, #0]
 80039c8:	6018      	str	r0, [r3, #0]
			break;
 80039ca:	f017 b9ef 	b.w	801adac <problem_fetch+0x19a8c>
		case 147 :
			strcpy(p->name,"AF CHRISTMAS TUBERCULOSIS");
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	337c      	adds	r3, #124	; 0x7c
 80039d2:	4a34      	ldr	r2, [pc, #208]	; (8003aa4 <problem_fetch+0x2784>)
 80039d4:	461d      	mov	r5, r3
 80039d6:	4614      	mov	r4, r2
 80039d8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80039da:	6028      	str	r0, [r5, #0]
 80039dc:	6069      	str	r1, [r5, #4]
 80039de:	60aa      	str	r2, [r5, #8]
 80039e0:	60eb      	str	r3, [r5, #12]
 80039e2:	cc03      	ldmia	r4!, {r0, r1}
 80039e4:	6128      	str	r0, [r5, #16]
 80039e6:	6169      	str	r1, [r5, #20]
 80039e8:	8823      	ldrh	r3, [r4, #0]
 80039ea:	832b      	strh	r3, [r5, #24]
			p->moveSize = 7;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	2207      	movs	r2, #7
 80039f0:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"G,J,H,F,I,I,I");
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	3340      	adds	r3, #64	; 0x40
 80039f6:	4a2c      	ldr	r2, [pc, #176]	; (8003aa8 <problem_fetch+0x2788>)
 80039f8:	461c      	mov	r4, r3
 80039fa:	4613      	mov	r3, r2
 80039fc:	cb07      	ldmia	r3!, {r0, r1, r2}
 80039fe:	6020      	str	r0, [r4, #0]
 8003a00:	6061      	str	r1, [r4, #4]
 8003a02:	60a2      	str	r2, [r4, #8]
 8003a04:	881b      	ldrh	r3, [r3, #0]
 8003a06:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"6,7,10,11,14,15,18");
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	3304      	adds	r3, #4
 8003a0c:	4a27      	ldr	r2, [pc, #156]	; (8003aac <problem_fetch+0x278c>)
 8003a0e:	461d      	mov	r5, r3
 8003a10:	4614      	mov	r4, r2
 8003a12:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003a14:	6028      	str	r0, [r5, #0]
 8003a16:	6069      	str	r1, [r5, #4]
 8003a18:	60aa      	str	r2, [r5, #8]
 8003a1a:	60eb      	str	r3, [r5, #12]
 8003a1c:	8823      	ldrh	r3, [r4, #0]
 8003a1e:	78a2      	ldrb	r2, [r4, #2]
 8003a20:	822b      	strh	r3, [r5, #16]
 8003a22:	4613      	mov	r3, r2
 8003a24:	74ab      	strb	r3, [r5, #18]
			strcpy(p->startFinish, "s,d,d,d,d,d,e");
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	33d8      	adds	r3, #216	; 0xd8
 8003a2a:	4a21      	ldr	r2, [pc, #132]	; (8003ab0 <problem_fetch+0x2790>)
 8003a2c:	461c      	mov	r4, r3
 8003a2e:	4613      	mov	r3, r2
 8003a30:	cb07      	ldmia	r3!, {r0, r1, r2}
 8003a32:	6020      	str	r0, [r4, #0]
 8003a34:	6061      	str	r1, [r4, #4]
 8003a36:	60a2      	str	r2, [r4, #8]
 8003a38:	881b      	ldrh	r3, [r3, #0]
 8003a3a:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade, "6C+");
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	33cc      	adds	r3, #204	; 0xcc
 8003a40:	4a1c      	ldr	r2, [pc, #112]	; (8003ab4 <problem_fetch+0x2794>)
 8003a42:	6810      	ldr	r0, [r2, #0]
 8003a44:	6018      	str	r0, [r3, #0]
			break;
 8003a46:	f017 b9b1 	b.w	801adac <problem_fetch+0x19a8c>
 8003a4a:	bf00      	nop
 8003a4c:	08021c74 	.word	0x08021c74
 8003a50:	08021c7c 	.word	0x08021c7c
 8003a54:	08021c8c 	.word	0x08021c8c
 8003a58:	080214cc 	.word	0x080214cc
 8003a5c:	08021370 	.word	0x08021370
 8003a60:	08021ca4 	.word	0x08021ca4
 8003a64:	08021cb0 	.word	0x08021cb0
 8003a68:	08021cbc 	.word	0x08021cbc
 8003a6c:	08021320 	.word	0x08021320
 8003a70:	0802132c 	.word	0x0802132c
 8003a74:	08021ccc 	.word	0x08021ccc
 8003a78:	08021cdc 	.word	0x08021cdc
 8003a7c:	08021cec 	.word	0x08021cec
 8003a80:	080212a0 	.word	0x080212a0
 8003a84:	08021d00 	.word	0x08021d00
 8003a88:	08021d0c 	.word	0x08021d0c
 8003a8c:	08021d1c 	.word	0x08021d1c
 8003a90:	08021458 	.word	0x08021458
 8003a94:	080212b0 	.word	0x080212b0
 8003a98:	08021d34 	.word	0x08021d34
 8003a9c:	08021d44 	.word	0x08021d44
 8003aa0:	08021d54 	.word	0x08021d54
 8003aa4:	08021d6c 	.word	0x08021d6c
 8003aa8:	08021d88 	.word	0x08021d88
 8003aac:	08021d98 	.word	0x08021d98
 8003ab0:	08021494 	.word	0x08021494
 8003ab4:	080213a8 	.word	0x080213a8
		case 148 :
			strcpy(p->name,"THE REAL DEAL");
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	337c      	adds	r3, #124	; 0x7c
 8003abc:	4abf      	ldr	r2, [pc, #764]	; (8003dbc <problem_fetch+0x2a9c>)
 8003abe:	461c      	mov	r4, r3
 8003ac0:	4613      	mov	r3, r2
 8003ac2:	cb07      	ldmia	r3!, {r0, r1, r2}
 8003ac4:	6020      	str	r0, [r4, #0]
 8003ac6:	6061      	str	r1, [r4, #4]
 8003ac8:	60a2      	str	r2, [r4, #8]
 8003aca:	881b      	ldrh	r3, [r3, #0]
 8003acc:	81a3      	strh	r3, [r4, #12]
			p->moveSize = 8;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	2208      	movs	r2, #8
 8003ad2:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"C,D,I,H,I,E,B,A");
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	3340      	adds	r3, #64	; 0x40
 8003ad8:	4ab9      	ldr	r2, [pc, #740]	; (8003dc0 <problem_fetch+0x2aa0>)
 8003ada:	461c      	mov	r4, r3
 8003adc:	4615      	mov	r5, r2
 8003ade:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003ae0:	6020      	str	r0, [r4, #0]
 8003ae2:	6061      	str	r1, [r4, #4]
 8003ae4:	60a2      	str	r2, [r4, #8]
 8003ae6:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,7,7,12,15,14,12,18");
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	3304      	adds	r3, #4
 8003aec:	4ab5      	ldr	r2, [pc, #724]	; (8003dc4 <problem_fetch+0x2aa4>)
 8003aee:	461d      	mov	r5, r3
 8003af0:	4614      	mov	r4, r2
 8003af2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003af4:	6028      	str	r0, [r5, #0]
 8003af6:	6069      	str	r1, [r5, #4]
 8003af8:	60aa      	str	r2, [r5, #8]
 8003afa:	60eb      	str	r3, [r5, #12]
 8003afc:	6820      	ldr	r0, [r4, #0]
 8003afe:	6128      	str	r0, [r5, #16]
 8003b00:	7923      	ldrb	r3, [r4, #4]
 8003b02:	752b      	strb	r3, [r5, #20]
			strcpy(p->startFinish, "s,d,d,d,d,d,d,e");
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	33d8      	adds	r3, #216	; 0xd8
 8003b08:	4aaf      	ldr	r2, [pc, #700]	; (8003dc8 <problem_fetch+0x2aa8>)
 8003b0a:	461c      	mov	r4, r3
 8003b0c:	4615      	mov	r5, r2
 8003b0e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003b10:	6020      	str	r0, [r4, #0]
 8003b12:	6061      	str	r1, [r4, #4]
 8003b14:	60a2      	str	r2, [r4, #8]
 8003b16:	60e3      	str	r3, [r4, #12]
			strcpy(p->grade, "8A");
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	33cc      	adds	r3, #204	; 0xcc
 8003b1c:	4aab      	ldr	r2, [pc, #684]	; (8003dcc <problem_fetch+0x2aac>)
 8003b1e:	8811      	ldrh	r1, [r2, #0]
 8003b20:	7892      	ldrb	r2, [r2, #2]
 8003b22:	8019      	strh	r1, [r3, #0]
 8003b24:	709a      	strb	r2, [r3, #2]
			break;
 8003b26:	f017 b941 	b.w	801adac <problem_fetch+0x19a8c>
		case 149 :
			strcpy(p->name,"TIRARONCHIE");
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	337c      	adds	r3, #124	; 0x7c
 8003b2e:	4aa8      	ldr	r2, [pc, #672]	; (8003dd0 <problem_fetch+0x2ab0>)
 8003b30:	461c      	mov	r4, r3
 8003b32:	4613      	mov	r3, r2
 8003b34:	cb07      	ldmia	r3!, {r0, r1, r2}
 8003b36:	6020      	str	r0, [r4, #0]
 8003b38:	6061      	str	r1, [r4, #4]
 8003b3a:	60a2      	str	r2, [r4, #8]
			p->moveSize = 6;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	2206      	movs	r2, #6
 8003b40:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"J,E,I,H,H,D");
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	3340      	adds	r3, #64	; 0x40
 8003b46:	4aa3      	ldr	r2, [pc, #652]	; (8003dd4 <problem_fetch+0x2ab4>)
 8003b48:	461c      	mov	r4, r3
 8003b4a:	4613      	mov	r3, r2
 8003b4c:	cb07      	ldmia	r3!, {r0, r1, r2}
 8003b4e:	6020      	str	r0, [r4, #0]
 8003b50:	6061      	str	r1, [r4, #4]
 8003b52:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,6,9,12,16,18");
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	3304      	adds	r3, #4
 8003b58:	4a9f      	ldr	r2, [pc, #636]	; (8003dd8 <problem_fetch+0x2ab8>)
 8003b5a:	461c      	mov	r4, r3
 8003b5c:	4613      	mov	r3, r2
 8003b5e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8003b60:	6020      	str	r0, [r4, #0]
 8003b62:	6061      	str	r1, [r4, #4]
 8003b64:	60a2      	str	r2, [r4, #8]
 8003b66:	881a      	ldrh	r2, [r3, #0]
 8003b68:	789b      	ldrb	r3, [r3, #2]
 8003b6a:	81a2      	strh	r2, [r4, #12]
 8003b6c:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish, "s,s,d,d,d,e");
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	33d8      	adds	r3, #216	; 0xd8
 8003b72:	4a9a      	ldr	r2, [pc, #616]	; (8003ddc <problem_fetch+0x2abc>)
 8003b74:	461c      	mov	r4, r3
 8003b76:	4613      	mov	r3, r2
 8003b78:	cb07      	ldmia	r3!, {r0, r1, r2}
 8003b7a:	6020      	str	r0, [r4, #0]
 8003b7c:	6061      	str	r1, [r4, #4]
 8003b7e:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade, "7A+");
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	33cc      	adds	r3, #204	; 0xcc
 8003b84:	4a96      	ldr	r2, [pc, #600]	; (8003de0 <problem_fetch+0x2ac0>)
 8003b86:	6810      	ldr	r0, [r2, #0]
 8003b88:	6018      	str	r0, [r3, #0]
			break;
 8003b8a:	f017 b90f 	b.w	801adac <problem_fetch+0x19a8c>
		case 15 :
			strcpy(p->name,"SHAKEN NOT STIRRED");
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	337c      	adds	r3, #124	; 0x7c
 8003b92:	4a94      	ldr	r2, [pc, #592]	; (8003de4 <problem_fetch+0x2ac4>)
 8003b94:	461d      	mov	r5, r3
 8003b96:	4614      	mov	r4, r2
 8003b98:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003b9a:	6028      	str	r0, [r5, #0]
 8003b9c:	6069      	str	r1, [r5, #4]
 8003b9e:	60aa      	str	r2, [r5, #8]
 8003ba0:	60eb      	str	r3, [r5, #12]
 8003ba2:	8823      	ldrh	r3, [r4, #0]
 8003ba4:	78a2      	ldrb	r2, [r4, #2]
 8003ba6:	822b      	strh	r3, [r5, #16]
 8003ba8:	4613      	mov	r3, r2
 8003baa:	74ab      	strb	r3, [r5, #18]
			p->moveSize = 7;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	2207      	movs	r2, #7
 8003bb0:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"H,H,F,E,A,D,A");
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	3340      	adds	r3, #64	; 0x40
 8003bb6:	4a8c      	ldr	r2, [pc, #560]	; (8003de8 <problem_fetch+0x2ac8>)
 8003bb8:	461c      	mov	r4, r3
 8003bba:	4613      	mov	r3, r2
 8003bbc:	cb07      	ldmia	r3!, {r0, r1, r2}
 8003bbe:	6020      	str	r0, [r4, #0]
 8003bc0:	6061      	str	r1, [r4, #4]
 8003bc2:	60a2      	str	r2, [r4, #8]
 8003bc4:	881b      	ldrh	r3, [r3, #0]
 8003bc6:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,8,11,12,14,15,18");
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	3304      	adds	r3, #4
 8003bcc:	4a87      	ldr	r2, [pc, #540]	; (8003dec <problem_fetch+0x2acc>)
 8003bce:	461d      	mov	r5, r3
 8003bd0:	4614      	mov	r4, r2
 8003bd2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003bd4:	6028      	str	r0, [r5, #0]
 8003bd6:	6069      	str	r1, [r5, #4]
 8003bd8:	60aa      	str	r2, [r5, #8]
 8003bda:	60eb      	str	r3, [r5, #12]
 8003bdc:	8823      	ldrh	r3, [r4, #0]
 8003bde:	78a2      	ldrb	r2, [r4, #2]
 8003be0:	822b      	strh	r3, [r5, #16]
 8003be2:	4613      	mov	r3, r2
 8003be4:	74ab      	strb	r3, [r5, #18]
			strcpy(p->startFinish, "s,d,d,d,d,d,e");
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	33d8      	adds	r3, #216	; 0xd8
 8003bea:	4a81      	ldr	r2, [pc, #516]	; (8003df0 <problem_fetch+0x2ad0>)
 8003bec:	461c      	mov	r4, r3
 8003bee:	4613      	mov	r3, r2
 8003bf0:	cb07      	ldmia	r3!, {r0, r1, r2}
 8003bf2:	6020      	str	r0, [r4, #0]
 8003bf4:	6061      	str	r1, [r4, #4]
 8003bf6:	60a2      	str	r2, [r4, #8]
 8003bf8:	881b      	ldrh	r3, [r3, #0]
 8003bfa:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade, "6B+");
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	33cc      	adds	r3, #204	; 0xcc
 8003c00:	4a7c      	ldr	r2, [pc, #496]	; (8003df4 <problem_fetch+0x2ad4>)
 8003c02:	6810      	ldr	r0, [r2, #0]
 8003c04:	6018      	str	r0, [r3, #0]
			break;
 8003c06:	f017 b8d1 	b.w	801adac <problem_fetch+0x19a8c>
		case 150 :
			strcpy(p->name,"EASY PINCH");
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	337c      	adds	r3, #124	; 0x7c
 8003c0e:	497a      	ldr	r1, [pc, #488]	; (8003df8 <problem_fetch+0x2ad8>)
 8003c10:	461a      	mov	r2, r3
 8003c12:	460b      	mov	r3, r1
 8003c14:	cb03      	ldmia	r3!, {r0, r1}
 8003c16:	6010      	str	r0, [r2, #0]
 8003c18:	6051      	str	r1, [r2, #4]
 8003c1a:	8819      	ldrh	r1, [r3, #0]
 8003c1c:	789b      	ldrb	r3, [r3, #2]
 8003c1e:	8111      	strh	r1, [r2, #8]
 8003c20:	7293      	strb	r3, [r2, #10]
			p->moveSize = 6;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	2206      	movs	r2, #6
 8003c26:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"J,D,G,F,E,I");
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	3340      	adds	r3, #64	; 0x40
 8003c2c:	4a73      	ldr	r2, [pc, #460]	; (8003dfc <problem_fetch+0x2adc>)
 8003c2e:	461c      	mov	r4, r3
 8003c30:	4613      	mov	r3, r2
 8003c32:	cb07      	ldmia	r3!, {r0, r1, r2}
 8003c34:	6020      	str	r0, [r4, #0]
 8003c36:	6061      	str	r1, [r4, #4]
 8003c38:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,7,10,13,14,18");
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	3304      	adds	r3, #4
 8003c3e:	4a70      	ldr	r2, [pc, #448]	; (8003e00 <problem_fetch+0x2ae0>)
 8003c40:	461c      	mov	r4, r3
 8003c42:	4615      	mov	r5, r2
 8003c44:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003c46:	6020      	str	r0, [r4, #0]
 8003c48:	6061      	str	r1, [r4, #4]
 8003c4a:	60a2      	str	r2, [r4, #8]
 8003c4c:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish, "s,d,d,d,d,e");
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	33d8      	adds	r3, #216	; 0xd8
 8003c52:	4a6c      	ldr	r2, [pc, #432]	; (8003e04 <problem_fetch+0x2ae4>)
 8003c54:	461c      	mov	r4, r3
 8003c56:	4613      	mov	r3, r2
 8003c58:	cb07      	ldmia	r3!, {r0, r1, r2}
 8003c5a:	6020      	str	r0, [r4, #0]
 8003c5c:	6061      	str	r1, [r4, #4]
 8003c5e:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade, "7A+");
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	33cc      	adds	r3, #204	; 0xcc
 8003c64:	4a5e      	ldr	r2, [pc, #376]	; (8003de0 <problem_fetch+0x2ac0>)
 8003c66:	6810      	ldr	r0, [r2, #0]
 8003c68:	6018      	str	r0, [r3, #0]
			break;
 8003c6a:	f017 b89f 	b.w	801adac <problem_fetch+0x19a8c>
		case 151 :
			strcpy(p->name,"HER COMES THE QUEEN");
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	337c      	adds	r3, #124	; 0x7c
 8003c72:	4a65      	ldr	r2, [pc, #404]	; (8003e08 <problem_fetch+0x2ae8>)
 8003c74:	461d      	mov	r5, r3
 8003c76:	4614      	mov	r4, r2
 8003c78:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003c7a:	6028      	str	r0, [r5, #0]
 8003c7c:	6069      	str	r1, [r5, #4]
 8003c7e:	60aa      	str	r2, [r5, #8]
 8003c80:	60eb      	str	r3, [r5, #12]
 8003c82:	6820      	ldr	r0, [r4, #0]
 8003c84:	6128      	str	r0, [r5, #16]
			p->moveSize = 5;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	2205      	movs	r2, #5
 8003c8a:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"G,E,F,A,D");
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	3340      	adds	r3, #64	; 0x40
 8003c90:	495e      	ldr	r1, [pc, #376]	; (8003e0c <problem_fetch+0x2aec>)
 8003c92:	461a      	mov	r2, r3
 8003c94:	460b      	mov	r3, r1
 8003c96:	cb03      	ldmia	r3!, {r0, r1}
 8003c98:	6010      	str	r0, [r2, #0]
 8003c9a:	6051      	str	r1, [r2, #4]
 8003c9c:	881b      	ldrh	r3, [r3, #0]
 8003c9e:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"4,8,11,14,18");
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	3304      	adds	r3, #4
 8003ca4:	4a5a      	ldr	r2, [pc, #360]	; (8003e10 <problem_fetch+0x2af0>)
 8003ca6:	461c      	mov	r4, r3
 8003ca8:	4613      	mov	r3, r2
 8003caa:	cb07      	ldmia	r3!, {r0, r1, r2}
 8003cac:	6020      	str	r0, [r4, #0]
 8003cae:	6061      	str	r1, [r4, #4]
 8003cb0:	60a2      	str	r2, [r4, #8]
 8003cb2:	781b      	ldrb	r3, [r3, #0]
 8003cb4:	7323      	strb	r3, [r4, #12]
			strcpy(p->startFinish, "s,d,d,d,e");
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	33d8      	adds	r3, #216	; 0xd8
 8003cba:	4956      	ldr	r1, [pc, #344]	; (8003e14 <problem_fetch+0x2af4>)
 8003cbc:	461a      	mov	r2, r3
 8003cbe:	460b      	mov	r3, r1
 8003cc0:	cb03      	ldmia	r3!, {r0, r1}
 8003cc2:	6010      	str	r0, [r2, #0]
 8003cc4:	6051      	str	r1, [r2, #4]
 8003cc6:	881b      	ldrh	r3, [r3, #0]
 8003cc8:	8113      	strh	r3, [r2, #8]
			strcpy(p->grade, "6C+");
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	33cc      	adds	r3, #204	; 0xcc
 8003cce:	4a52      	ldr	r2, [pc, #328]	; (8003e18 <problem_fetch+0x2af8>)
 8003cd0:	6810      	ldr	r0, [r2, #0]
 8003cd2:	6018      	str	r0, [r3, #0]
			break;
 8003cd4:	f017 b86a 	b.w	801adac <problem_fetch+0x19a8c>
		case 152 :
			strcpy(p->name,"THE WING");
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	337c      	adds	r3, #124	; 0x7c
 8003cdc:	494f      	ldr	r1, [pc, #316]	; (8003e1c <problem_fetch+0x2afc>)
 8003cde:	461a      	mov	r2, r3
 8003ce0:	460b      	mov	r3, r1
 8003ce2:	cb03      	ldmia	r3!, {r0, r1}
 8003ce4:	6010      	str	r0, [r2, #0]
 8003ce6:	6051      	str	r1, [r2, #4]
 8003ce8:	781b      	ldrb	r3, [r3, #0]
 8003cea:	7213      	strb	r3, [r2, #8]
			p->moveSize = 7;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	2207      	movs	r2, #7
 8003cf0:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"C,E,C,F,D,D,D");
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	3340      	adds	r3, #64	; 0x40
 8003cf6:	4a4a      	ldr	r2, [pc, #296]	; (8003e20 <problem_fetch+0x2b00>)
 8003cf8:	461c      	mov	r4, r3
 8003cfa:	4613      	mov	r3, r2
 8003cfc:	cb07      	ldmia	r3!, {r0, r1, r2}
 8003cfe:	6020      	str	r0, [r4, #0]
 8003d00:	6061      	str	r1, [r4, #4]
 8003d02:	60a2      	str	r2, [r4, #8]
 8003d04:	881b      	ldrh	r3, [r3, #0]
 8003d06:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,6,8,11,11,15,18");
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	3304      	adds	r3, #4
 8003d0c:	4a45      	ldr	r2, [pc, #276]	; (8003e24 <problem_fetch+0x2b04>)
 8003d0e:	461d      	mov	r5, r3
 8003d10:	4614      	mov	r4, r2
 8003d12:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003d14:	6028      	str	r0, [r5, #0]
 8003d16:	6069      	str	r1, [r5, #4]
 8003d18:	60aa      	str	r2, [r5, #8]
 8003d1a:	60eb      	str	r3, [r5, #12]
 8003d1c:	8823      	ldrh	r3, [r4, #0]
 8003d1e:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish, "s,s,d,d,d,d,e");
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	33d8      	adds	r3, #216	; 0xd8
 8003d24:	4a40      	ldr	r2, [pc, #256]	; (8003e28 <problem_fetch+0x2b08>)
 8003d26:	461c      	mov	r4, r3
 8003d28:	4613      	mov	r3, r2
 8003d2a:	cb07      	ldmia	r3!, {r0, r1, r2}
 8003d2c:	6020      	str	r0, [r4, #0]
 8003d2e:	6061      	str	r1, [r4, #4]
 8003d30:	60a2      	str	r2, [r4, #8]
 8003d32:	881b      	ldrh	r3, [r3, #0]
 8003d34:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade, "6C");
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	33cc      	adds	r3, #204	; 0xcc
 8003d3a:	4a3c      	ldr	r2, [pc, #240]	; (8003e2c <problem_fetch+0x2b0c>)
 8003d3c:	8811      	ldrh	r1, [r2, #0]
 8003d3e:	7892      	ldrb	r2, [r2, #2]
 8003d40:	8019      	strh	r1, [r3, #0]
 8003d42:	709a      	strb	r2, [r3, #2]
			break;
 8003d44:	f017 b832 	b.w	801adac <problem_fetch+0x19a8c>
		case 153 :
			strcpy(p->name,"TB SAGA");
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	337c      	adds	r3, #124	; 0x7c
 8003d4c:	4938      	ldr	r1, [pc, #224]	; (8003e30 <problem_fetch+0x2b10>)
 8003d4e:	461a      	mov	r2, r3
 8003d50:	460b      	mov	r3, r1
 8003d52:	cb03      	ldmia	r3!, {r0, r1}
 8003d54:	6010      	str	r0, [r2, #0]
 8003d56:	6051      	str	r1, [r2, #4]
			p->moveSize = 7;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	2207      	movs	r2, #7
 8003d5c:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"G,J,H,J,G,H,D");
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	3340      	adds	r3, #64	; 0x40
 8003d62:	4a34      	ldr	r2, [pc, #208]	; (8003e34 <problem_fetch+0x2b14>)
 8003d64:	461c      	mov	r4, r3
 8003d66:	4613      	mov	r3, r2
 8003d68:	cb07      	ldmia	r3!, {r0, r1, r2}
 8003d6a:	6020      	str	r0, [r4, #0]
 8003d6c:	6061      	str	r1, [r4, #4]
 8003d6e:	60a2      	str	r2, [r4, #8]
 8003d70:	881b      	ldrh	r3, [r3, #0]
 8003d72:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,7,10,13,15,16,18");
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	3304      	adds	r3, #4
 8003d78:	4a2f      	ldr	r2, [pc, #188]	; (8003e38 <problem_fetch+0x2b18>)
 8003d7a:	461d      	mov	r5, r3
 8003d7c:	4614      	mov	r4, r2
 8003d7e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003d80:	6028      	str	r0, [r5, #0]
 8003d82:	6069      	str	r1, [r5, #4]
 8003d84:	60aa      	str	r2, [r5, #8]
 8003d86:	60eb      	str	r3, [r5, #12]
 8003d88:	8823      	ldrh	r3, [r4, #0]
 8003d8a:	78a2      	ldrb	r2, [r4, #2]
 8003d8c:	822b      	strh	r3, [r5, #16]
 8003d8e:	4613      	mov	r3, r2
 8003d90:	74ab      	strb	r3, [r5, #18]
			strcpy(p->startFinish, "s,d,d,d,d,d,e");
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	33d8      	adds	r3, #216	; 0xd8
 8003d96:	4a16      	ldr	r2, [pc, #88]	; (8003df0 <problem_fetch+0x2ad0>)
 8003d98:	461c      	mov	r4, r3
 8003d9a:	4613      	mov	r3, r2
 8003d9c:	cb07      	ldmia	r3!, {r0, r1, r2}
 8003d9e:	6020      	str	r0, [r4, #0]
 8003da0:	6061      	str	r1, [r4, #4]
 8003da2:	60a2      	str	r2, [r4, #8]
 8003da4:	881b      	ldrh	r3, [r3, #0]
 8003da6:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade, "6C");
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	33cc      	adds	r3, #204	; 0xcc
 8003dac:	4a1f      	ldr	r2, [pc, #124]	; (8003e2c <problem_fetch+0x2b0c>)
 8003dae:	8811      	ldrh	r1, [r2, #0]
 8003db0:	7892      	ldrb	r2, [r2, #2]
 8003db2:	8019      	strh	r1, [r3, #0]
 8003db4:	709a      	strb	r2, [r3, #2]
			break;
 8003db6:	f016 bff9 	b.w	801adac <problem_fetch+0x19a8c>
 8003dba:	bf00      	nop
 8003dbc:	08021dac 	.word	0x08021dac
 8003dc0:	08021dbc 	.word	0x08021dbc
 8003dc4:	08021dcc 	.word	0x08021dcc
 8003dc8:	08021458 	.word	0x08021458
 8003dcc:	08021714 	.word	0x08021714
 8003dd0:	08021de4 	.word	0x08021de4
 8003dd4:	08021df0 	.word	0x08021df0
 8003dd8:	08021dfc 	.word	0x08021dfc
 8003ddc:	08021910 	.word	0x08021910
 8003de0:	08021424 	.word	0x08021424
 8003de4:	08021e0c 	.word	0x08021e0c
 8003de8:	08021e20 	.word	0x08021e20
 8003dec:	08021e30 	.word	0x08021e30
 8003df0:	08021494 	.word	0x08021494
 8003df4:	080212b0 	.word	0x080212b0
 8003df8:	08021e44 	.word	0x08021e44
 8003dfc:	08021e50 	.word	0x08021e50
 8003e00:	08021e5c 	.word	0x08021e5c
 8003e04:	0802139c 	.word	0x0802139c
 8003e08:	08021e6c 	.word	0x08021e6c
 8003e0c:	08021e80 	.word	0x08021e80
 8003e10:	08021e8c 	.word	0x08021e8c
 8003e14:	08021320 	.word	0x08021320
 8003e18:	080213a8 	.word	0x080213a8
 8003e1c:	08021e9c 	.word	0x08021e9c
 8003e20:	08021ea8 	.word	0x08021ea8
 8003e24:	08021eb8 	.word	0x08021eb8
 8003e28:	080212a0 	.word	0x080212a0
 8003e2c:	08021370 	.word	0x08021370
 8003e30:	08021ecc 	.word	0x08021ecc
 8003e34:	08021ed4 	.word	0x08021ed4
 8003e38:	08021ee4 	.word	0x08021ee4
		case 154 :
			strcpy(p->name,"OLDENBOAD4");
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	337c      	adds	r3, #124	; 0x7c
 8003e40:	49a5      	ldr	r1, [pc, #660]	; (80040d8 <problem_fetch+0x2db8>)
 8003e42:	461a      	mov	r2, r3
 8003e44:	460b      	mov	r3, r1
 8003e46:	cb03      	ldmia	r3!, {r0, r1}
 8003e48:	6010      	str	r0, [r2, #0]
 8003e4a:	6051      	str	r1, [r2, #4]
 8003e4c:	8819      	ldrh	r1, [r3, #0]
 8003e4e:	789b      	ldrb	r3, [r3, #2]
 8003e50:	8111      	strh	r1, [r2, #8]
 8003e52:	7293      	strb	r3, [r2, #10]
			p->moveSize = 7;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	2207      	movs	r2, #7
 8003e58:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"J,G,F,C,E,H,D");
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	3340      	adds	r3, #64	; 0x40
 8003e5e:	4a9f      	ldr	r2, [pc, #636]	; (80040dc <problem_fetch+0x2dbc>)
 8003e60:	461c      	mov	r4, r3
 8003e62:	4613      	mov	r3, r2
 8003e64:	cb07      	ldmia	r3!, {r0, r1, r2}
 8003e66:	6020      	str	r0, [r4, #0]
 8003e68:	6061      	str	r1, [r4, #4]
 8003e6a:	60a2      	str	r2, [r4, #8]
 8003e6c:	881b      	ldrh	r3, [r3, #0]
 8003e6e:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,6,11,13,16,10,18");
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	3304      	adds	r3, #4
 8003e74:	4a9a      	ldr	r2, [pc, #616]	; (80040e0 <problem_fetch+0x2dc0>)
 8003e76:	461d      	mov	r5, r3
 8003e78:	4614      	mov	r4, r2
 8003e7a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003e7c:	6028      	str	r0, [r5, #0]
 8003e7e:	6069      	str	r1, [r5, #4]
 8003e80:	60aa      	str	r2, [r5, #8]
 8003e82:	60eb      	str	r3, [r5, #12]
 8003e84:	8823      	ldrh	r3, [r4, #0]
 8003e86:	78a2      	ldrb	r2, [r4, #2]
 8003e88:	822b      	strh	r3, [r5, #16]
 8003e8a:	4613      	mov	r3, r2
 8003e8c:	74ab      	strb	r3, [r5, #18]
			strcpy(p->startFinish, "s,s,d,d,d,d,e");
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	33d8      	adds	r3, #216	; 0xd8
 8003e92:	4a94      	ldr	r2, [pc, #592]	; (80040e4 <problem_fetch+0x2dc4>)
 8003e94:	461c      	mov	r4, r3
 8003e96:	4613      	mov	r3, r2
 8003e98:	cb07      	ldmia	r3!, {r0, r1, r2}
 8003e9a:	6020      	str	r0, [r4, #0]
 8003e9c:	6061      	str	r1, [r4, #4]
 8003e9e:	60a2      	str	r2, [r4, #8]
 8003ea0:	881b      	ldrh	r3, [r3, #0]
 8003ea2:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade, "6C+");
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	33cc      	adds	r3, #204	; 0xcc
 8003ea8:	4a8f      	ldr	r2, [pc, #572]	; (80040e8 <problem_fetch+0x2dc8>)
 8003eaa:	6810      	ldr	r0, [r2, #0]
 8003eac:	6018      	str	r0, [r3, #0]
			break;
 8003eae:	f016 bf7d 	b.w	801adac <problem_fetch+0x19a8c>
		case 155 :
			strcpy(p->name,"ENDUROV6");
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	337c      	adds	r3, #124	; 0x7c
 8003eb6:	498d      	ldr	r1, [pc, #564]	; (80040ec <problem_fetch+0x2dcc>)
 8003eb8:	461a      	mov	r2, r3
 8003eba:	460b      	mov	r3, r1
 8003ebc:	cb03      	ldmia	r3!, {r0, r1}
 8003ebe:	6010      	str	r0, [r2, #0]
 8003ec0:	6051      	str	r1, [r2, #4]
 8003ec2:	781b      	ldrb	r3, [r3, #0]
 8003ec4:	7213      	strb	r3, [r2, #8]
			p->moveSize = 13;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	220d      	movs	r2, #13
 8003eca:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"J,J,H,G,F,A,D,E,G,C,B,E,I");
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	3340      	adds	r3, #64	; 0x40
 8003ed0:	4a87      	ldr	r2, [pc, #540]	; (80040f0 <problem_fetch+0x2dd0>)
 8003ed2:	461d      	mov	r5, r3
 8003ed4:	4614      	mov	r4, r2
 8003ed6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003ed8:	6028      	str	r0, [r5, #0]
 8003eda:	6069      	str	r1, [r5, #4]
 8003edc:	60aa      	str	r2, [r5, #8]
 8003ede:	60eb      	str	r3, [r5, #12]
 8003ee0:	cc03      	ldmia	r4!, {r0, r1}
 8003ee2:	6128      	str	r0, [r5, #16]
 8003ee4:	6169      	str	r1, [r5, #20]
 8003ee6:	8823      	ldrh	r3, [r4, #0]
 8003ee8:	832b      	strh	r3, [r5, #24]
			strcpy(p->moveNumbers,"5,7,8,9,11,14,15,16,17,5,10,8,18");
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	3304      	adds	r3, #4
 8003eee:	4a81      	ldr	r2, [pc, #516]	; (80040f4 <problem_fetch+0x2dd4>)
 8003ef0:	4614      	mov	r4, r2
 8003ef2:	469c      	mov	ip, r3
 8003ef4:	f104 0e20 	add.w	lr, r4, #32
 8003ef8:	4665      	mov	r5, ip
 8003efa:	4626      	mov	r6, r4
 8003efc:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8003efe:	6028      	str	r0, [r5, #0]
 8003f00:	6069      	str	r1, [r5, #4]
 8003f02:	60aa      	str	r2, [r5, #8]
 8003f04:	60eb      	str	r3, [r5, #12]
 8003f06:	3410      	adds	r4, #16
 8003f08:	f10c 0c10 	add.w	ip, ip, #16
 8003f0c:	4574      	cmp	r4, lr
 8003f0e:	d1f3      	bne.n	8003ef8 <problem_fetch+0x2bd8>
 8003f10:	4663      	mov	r3, ip
 8003f12:	4622      	mov	r2, r4
 8003f14:	7812      	ldrb	r2, [r2, #0]
 8003f16:	701a      	strb	r2, [r3, #0]
			strcpy(p->startFinish, "s,d,d,d,d,d,d,d,d,d,d,d,e");
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	33d8      	adds	r3, #216	; 0xd8
 8003f1c:	4a76      	ldr	r2, [pc, #472]	; (80040f8 <problem_fetch+0x2dd8>)
 8003f1e:	461d      	mov	r5, r3
 8003f20:	4614      	mov	r4, r2
 8003f22:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003f24:	6028      	str	r0, [r5, #0]
 8003f26:	6069      	str	r1, [r5, #4]
 8003f28:	60aa      	str	r2, [r5, #8]
 8003f2a:	60eb      	str	r3, [r5, #12]
 8003f2c:	cc03      	ldmia	r4!, {r0, r1}
 8003f2e:	6128      	str	r0, [r5, #16]
 8003f30:	6169      	str	r1, [r5, #20]
 8003f32:	8823      	ldrh	r3, [r4, #0]
 8003f34:	832b      	strh	r3, [r5, #24]
			strcpy(p->grade, "7A");
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	33cc      	adds	r3, #204	; 0xcc
 8003f3a:	4a70      	ldr	r2, [pc, #448]	; (80040fc <problem_fetch+0x2ddc>)
 8003f3c:	8811      	ldrh	r1, [r2, #0]
 8003f3e:	7892      	ldrb	r2, [r2, #2]
 8003f40:	8019      	strh	r1, [r3, #0]
 8003f42:	709a      	strb	r2, [r3, #2]
			break;
 8003f44:	f016 bf32 	b.w	801adac <problem_fetch+0x19a8c>
		case 156 :
			strcpy(p->name,"VARIATION 2 6B+");
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	337c      	adds	r3, #124	; 0x7c
 8003f4c:	4a6c      	ldr	r2, [pc, #432]	; (8004100 <problem_fetch+0x2de0>)
 8003f4e:	461c      	mov	r4, r3
 8003f50:	4615      	mov	r5, r2
 8003f52:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003f54:	6020      	str	r0, [r4, #0]
 8003f56:	6061      	str	r1, [r4, #4]
 8003f58:	60a2      	str	r2, [r4, #8]
 8003f5a:	60e3      	str	r3, [r4, #12]
			p->moveSize = 7;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	2207      	movs	r2, #7
 8003f60:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"E,G,E,B,C,A,A");
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	3340      	adds	r3, #64	; 0x40
 8003f66:	4a67      	ldr	r2, [pc, #412]	; (8004104 <problem_fetch+0x2de4>)
 8003f68:	461c      	mov	r4, r3
 8003f6a:	4613      	mov	r3, r2
 8003f6c:	cb07      	ldmia	r3!, {r0, r1, r2}
 8003f6e:	6020      	str	r0, [r4, #0]
 8003f70:	6061      	str	r1, [r4, #4]
 8003f72:	60a2      	str	r2, [r4, #8]
 8003f74:	881b      	ldrh	r3, [r3, #0]
 8003f76:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"6,6,8,10,13,14,18");
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	3304      	adds	r3, #4
 8003f7c:	4a62      	ldr	r2, [pc, #392]	; (8004108 <problem_fetch+0x2de8>)
 8003f7e:	461d      	mov	r5, r3
 8003f80:	4614      	mov	r4, r2
 8003f82:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003f84:	6028      	str	r0, [r5, #0]
 8003f86:	6069      	str	r1, [r5, #4]
 8003f88:	60aa      	str	r2, [r5, #8]
 8003f8a:	60eb      	str	r3, [r5, #12]
 8003f8c:	8823      	ldrh	r3, [r4, #0]
 8003f8e:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish, "s,s,d,d,d,d,e");
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	33d8      	adds	r3, #216	; 0xd8
 8003f94:	4a53      	ldr	r2, [pc, #332]	; (80040e4 <problem_fetch+0x2dc4>)
 8003f96:	461c      	mov	r4, r3
 8003f98:	4613      	mov	r3, r2
 8003f9a:	cb07      	ldmia	r3!, {r0, r1, r2}
 8003f9c:	6020      	str	r0, [r4, #0]
 8003f9e:	6061      	str	r1, [r4, #4]
 8003fa0:	60a2      	str	r2, [r4, #8]
 8003fa2:	881b      	ldrh	r3, [r3, #0]
 8003fa4:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade, "6B+");
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	33cc      	adds	r3, #204	; 0xcc
 8003faa:	4a58      	ldr	r2, [pc, #352]	; (800410c <problem_fetch+0x2dec>)
 8003fac:	6810      	ldr	r0, [r2, #0]
 8003fae:	6018      	str	r0, [r3, #0]
			break;
 8003fb0:	f016 befc 	b.w	801adac <problem_fetch+0x19a8c>
		case 157 :
			strcpy(p->name,"GO BIG");
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	337c      	adds	r3, #124	; 0x7c
 8003fb8:	4a55      	ldr	r2, [pc, #340]	; (8004110 <problem_fetch+0x2df0>)
 8003fba:	6810      	ldr	r0, [r2, #0]
 8003fbc:	6018      	str	r0, [r3, #0]
 8003fbe:	8891      	ldrh	r1, [r2, #4]
 8003fc0:	7992      	ldrb	r2, [r2, #6]
 8003fc2:	8099      	strh	r1, [r3, #4]
 8003fc4:	719a      	strb	r2, [r3, #6]
			p->moveSize = 5;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	2205      	movs	r2, #5
 8003fca:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"G,K,G,A,A");
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	3340      	adds	r3, #64	; 0x40
 8003fd0:	4950      	ldr	r1, [pc, #320]	; (8004114 <problem_fetch+0x2df4>)
 8003fd2:	461a      	mov	r2, r3
 8003fd4:	460b      	mov	r3, r1
 8003fd6:	cb03      	ldmia	r3!, {r0, r1}
 8003fd8:	6010      	str	r0, [r2, #0]
 8003fda:	6051      	str	r1, [r2, #4]
 8003fdc:	881b      	ldrh	r3, [r3, #0]
 8003fde:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"6,9,14,14,18");
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	3304      	adds	r3, #4
 8003fe4:	4a4c      	ldr	r2, [pc, #304]	; (8004118 <problem_fetch+0x2df8>)
 8003fe6:	461c      	mov	r4, r3
 8003fe8:	4613      	mov	r3, r2
 8003fea:	cb07      	ldmia	r3!, {r0, r1, r2}
 8003fec:	6020      	str	r0, [r4, #0]
 8003fee:	6061      	str	r1, [r4, #4]
 8003ff0:	60a2      	str	r2, [r4, #8]
 8003ff2:	781b      	ldrb	r3, [r3, #0]
 8003ff4:	7323      	strb	r3, [r4, #12]
			strcpy(p->startFinish, "s,d,d,d,e");
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	33d8      	adds	r3, #216	; 0xd8
 8003ffa:	4948      	ldr	r1, [pc, #288]	; (800411c <problem_fetch+0x2dfc>)
 8003ffc:	461a      	mov	r2, r3
 8003ffe:	460b      	mov	r3, r1
 8004000:	cb03      	ldmia	r3!, {r0, r1}
 8004002:	6010      	str	r0, [r2, #0]
 8004004:	6051      	str	r1, [r2, #4]
 8004006:	881b      	ldrh	r3, [r3, #0]
 8004008:	8113      	strh	r3, [r2, #8]
			strcpy(p->grade, "7B+");
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	33cc      	adds	r3, #204	; 0xcc
 800400e:	4a44      	ldr	r2, [pc, #272]	; (8004120 <problem_fetch+0x2e00>)
 8004010:	6810      	ldr	r0, [r2, #0]
 8004012:	6018      	str	r0, [r3, #0]
			break;
 8004014:	f016 beca 	b.w	801adac <problem_fetch+0x19a8c>
		case 158 :
			strcpy(p->name,"OFD");
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	337c      	adds	r3, #124	; 0x7c
 800401c:	4a41      	ldr	r2, [pc, #260]	; (8004124 <problem_fetch+0x2e04>)
 800401e:	6810      	ldr	r0, [r2, #0]
 8004020:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	2206      	movs	r2, #6
 8004026:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"G,C,E,E,I,I");
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	3340      	adds	r3, #64	; 0x40
 800402c:	4a3e      	ldr	r2, [pc, #248]	; (8004128 <problem_fetch+0x2e08>)
 800402e:	461c      	mov	r4, r3
 8004030:	4613      	mov	r3, r2
 8004032:	cb07      	ldmia	r3!, {r0, r1, r2}
 8004034:	6020      	str	r0, [r4, #0]
 8004036:	6061      	str	r1, [r4, #4]
 8004038:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,8,9,12,14,18");
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	3304      	adds	r3, #4
 800403e:	4a3b      	ldr	r2, [pc, #236]	; (800412c <problem_fetch+0x2e0c>)
 8004040:	461c      	mov	r4, r3
 8004042:	4613      	mov	r3, r2
 8004044:	cb07      	ldmia	r3!, {r0, r1, r2}
 8004046:	6020      	str	r0, [r4, #0]
 8004048:	6061      	str	r1, [r4, #4]
 800404a:	60a2      	str	r2, [r4, #8]
 800404c:	881a      	ldrh	r2, [r3, #0]
 800404e:	789b      	ldrb	r3, [r3, #2]
 8004050:	81a2      	strh	r2, [r4, #12]
 8004052:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish, "s,d,d,d,d,e");
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	33d8      	adds	r3, #216	; 0xd8
 8004058:	4a35      	ldr	r2, [pc, #212]	; (8004130 <problem_fetch+0x2e10>)
 800405a:	461c      	mov	r4, r3
 800405c:	4613      	mov	r3, r2
 800405e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8004060:	6020      	str	r0, [r4, #0]
 8004062:	6061      	str	r1, [r4, #4]
 8004064:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade, "7A+");
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	33cc      	adds	r3, #204	; 0xcc
 800406a:	4a32      	ldr	r2, [pc, #200]	; (8004134 <problem_fetch+0x2e14>)
 800406c:	6810      	ldr	r0, [r2, #0]
 800406e:	6018      	str	r0, [r3, #0]
			break;
 8004070:	f016 be9c 	b.w	801adac <problem_fetch+0x19a8c>
		case 159 :
			strcpy(p->name,"YEEEEAHHH");
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	337c      	adds	r3, #124	; 0x7c
 8004078:	492f      	ldr	r1, [pc, #188]	; (8004138 <problem_fetch+0x2e18>)
 800407a:	461a      	mov	r2, r3
 800407c:	460b      	mov	r3, r1
 800407e:	cb03      	ldmia	r3!, {r0, r1}
 8004080:	6010      	str	r0, [r2, #0]
 8004082:	6051      	str	r1, [r2, #4]
 8004084:	881b      	ldrh	r3, [r3, #0]
 8004086:	8113      	strh	r3, [r2, #8]
			p->moveSize = 4;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	2204      	movs	r2, #4
 800408c:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"G,I,G,I");
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	3340      	adds	r3, #64	; 0x40
 8004092:	492a      	ldr	r1, [pc, #168]	; (800413c <problem_fetch+0x2e1c>)
 8004094:	461a      	mov	r2, r3
 8004096:	460b      	mov	r3, r1
 8004098:	cb03      	ldmia	r3!, {r0, r1}
 800409a:	6010      	str	r0, [r2, #0]
 800409c:	6051      	str	r1, [r2, #4]
			strcpy(p->moveNumbers,"4,10,14,18");
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	3304      	adds	r3, #4
 80040a2:	4927      	ldr	r1, [pc, #156]	; (8004140 <problem_fetch+0x2e20>)
 80040a4:	461a      	mov	r2, r3
 80040a6:	460b      	mov	r3, r1
 80040a8:	cb03      	ldmia	r3!, {r0, r1}
 80040aa:	6010      	str	r0, [r2, #0]
 80040ac:	6051      	str	r1, [r2, #4]
 80040ae:	8819      	ldrh	r1, [r3, #0]
 80040b0:	789b      	ldrb	r3, [r3, #2]
 80040b2:	8111      	strh	r1, [r2, #8]
 80040b4:	7293      	strb	r3, [r2, #10]
			strcpy(p->startFinish, "s,d,d,e");
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	33d8      	adds	r3, #216	; 0xd8
 80040ba:	4922      	ldr	r1, [pc, #136]	; (8004144 <problem_fetch+0x2e24>)
 80040bc:	461a      	mov	r2, r3
 80040be:	460b      	mov	r3, r1
 80040c0:	cb03      	ldmia	r3!, {r0, r1}
 80040c2:	6010      	str	r0, [r2, #0]
 80040c4:	6051      	str	r1, [r2, #4]
			strcpy(p->grade, "7A");
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	33cc      	adds	r3, #204	; 0xcc
 80040ca:	4a0c      	ldr	r2, [pc, #48]	; (80040fc <problem_fetch+0x2ddc>)
 80040cc:	8811      	ldrh	r1, [r2, #0]
 80040ce:	7892      	ldrb	r2, [r2, #2]
 80040d0:	8019      	strh	r1, [r3, #0]
 80040d2:	709a      	strb	r2, [r3, #2]
			break;
 80040d4:	f016 be6a 	b.w	801adac <problem_fetch+0x19a8c>
 80040d8:	08021ef8 	.word	0x08021ef8
 80040dc:	08021f04 	.word	0x08021f04
 80040e0:	08021f14 	.word	0x08021f14
 80040e4:	080212a0 	.word	0x080212a0
 80040e8:	080213a8 	.word	0x080213a8
 80040ec:	08021f28 	.word	0x08021f28
 80040f0:	08021f34 	.word	0x08021f34
 80040f4:	08021f50 	.word	0x08021f50
 80040f8:	08021f74 	.word	0x08021f74
 80040fc:	080212f4 	.word	0x080212f4
 8004100:	08021f90 	.word	0x08021f90
 8004104:	08021fa0 	.word	0x08021fa0
 8004108:	08021fb0 	.word	0x08021fb0
 800410c:	080212b0 	.word	0x080212b0
 8004110:	08021fc4 	.word	0x08021fc4
 8004114:	08021fcc 	.word	0x08021fcc
 8004118:	08021fd8 	.word	0x08021fd8
 800411c:	08021320 	.word	0x08021320
 8004120:	08021848 	.word	0x08021848
 8004124:	08021fe8 	.word	0x08021fe8
 8004128:	08021fec 	.word	0x08021fec
 800412c:	08021ff8 	.word	0x08021ff8
 8004130:	0802139c 	.word	0x0802139c
 8004134:	08021424 	.word	0x08021424
 8004138:	08022008 	.word	0x08022008
 800413c:	08022014 	.word	0x08022014
 8004140:	0802201c 	.word	0x0802201c
 8004144:	08022028 	.word	0x08022028
		case 16 :
			strcpy(p->name,"SALAD DAYS");
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	337c      	adds	r3, #124	; 0x7c
 800414c:	49bb      	ldr	r1, [pc, #748]	; (800443c <problem_fetch+0x311c>)
 800414e:	461a      	mov	r2, r3
 8004150:	460b      	mov	r3, r1
 8004152:	cb03      	ldmia	r3!, {r0, r1}
 8004154:	6010      	str	r0, [r2, #0]
 8004156:	6051      	str	r1, [r2, #4]
 8004158:	8819      	ldrh	r1, [r3, #0]
 800415a:	789b      	ldrb	r3, [r3, #2]
 800415c:	8111      	strh	r1, [r2, #8]
 800415e:	7293      	strb	r3, [r2, #10]
			p->moveSize = 12;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	220c      	movs	r2, #12
 8004164:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"C,B,E,I,H,K,B,D,H,G,G,A");
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	3340      	adds	r3, #64	; 0x40
 800416a:	4ab5      	ldr	r2, [pc, #724]	; (8004440 <problem_fetch+0x3120>)
 800416c:	461d      	mov	r5, r3
 800416e:	4614      	mov	r4, r2
 8004170:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004172:	6028      	str	r0, [r5, #0]
 8004174:	6069      	str	r1, [r5, #4]
 8004176:	60aa      	str	r2, [r5, #8]
 8004178:	60eb      	str	r3, [r5, #12]
 800417a:	cc03      	ldmia	r4!, {r0, r1}
 800417c:	6128      	str	r0, [r5, #16]
 800417e:	6169      	str	r1, [r5, #20]
			strcpy(p->moveNumbers,"5,6,8,10,12,14,15,15,16,17,17,18");
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	3304      	adds	r3, #4
 8004184:	4aaf      	ldr	r2, [pc, #700]	; (8004444 <problem_fetch+0x3124>)
 8004186:	4614      	mov	r4, r2
 8004188:	469c      	mov	ip, r3
 800418a:	f104 0e20 	add.w	lr, r4, #32
 800418e:	4665      	mov	r5, ip
 8004190:	4626      	mov	r6, r4
 8004192:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8004194:	6028      	str	r0, [r5, #0]
 8004196:	6069      	str	r1, [r5, #4]
 8004198:	60aa      	str	r2, [r5, #8]
 800419a:	60eb      	str	r3, [r5, #12]
 800419c:	3410      	adds	r4, #16
 800419e:	f10c 0c10 	add.w	ip, ip, #16
 80041a2:	4574      	cmp	r4, lr
 80041a4:	d1f3      	bne.n	800418e <problem_fetch+0x2e6e>
 80041a6:	4663      	mov	r3, ip
 80041a8:	4622      	mov	r2, r4
 80041aa:	7812      	ldrb	r2, [r2, #0]
 80041ac:	701a      	strb	r2, [r3, #0]
			strcpy(p->startFinish, "s,s,d,d,d,d,d,d,d,d,d,e");
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	33d8      	adds	r3, #216	; 0xd8
 80041b2:	4aa5      	ldr	r2, [pc, #660]	; (8004448 <problem_fetch+0x3128>)
 80041b4:	461d      	mov	r5, r3
 80041b6:	4614      	mov	r4, r2
 80041b8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80041ba:	6028      	str	r0, [r5, #0]
 80041bc:	6069      	str	r1, [r5, #4]
 80041be:	60aa      	str	r2, [r5, #8]
 80041c0:	60eb      	str	r3, [r5, #12]
 80041c2:	cc03      	ldmia	r4!, {r0, r1}
 80041c4:	6128      	str	r0, [r5, #16]
 80041c6:	6169      	str	r1, [r5, #20]
			strcpy(p->grade, "7A");
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	33cc      	adds	r3, #204	; 0xcc
 80041cc:	4a9f      	ldr	r2, [pc, #636]	; (800444c <problem_fetch+0x312c>)
 80041ce:	8811      	ldrh	r1, [r2, #0]
 80041d0:	7892      	ldrb	r2, [r2, #2]
 80041d2:	8019      	strh	r1, [r3, #0]
 80041d4:	709a      	strb	r2, [r3, #2]
			break;
 80041d6:	f016 bde9 	b.w	801adac <problem_fetch+0x19a8c>
		case 160 :
			strcpy(p->name,"FRENCH INDUCED COMA");
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	337c      	adds	r3, #124	; 0x7c
 80041de:	4a9c      	ldr	r2, [pc, #624]	; (8004450 <problem_fetch+0x3130>)
 80041e0:	461d      	mov	r5, r3
 80041e2:	4614      	mov	r4, r2
 80041e4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80041e6:	6028      	str	r0, [r5, #0]
 80041e8:	6069      	str	r1, [r5, #4]
 80041ea:	60aa      	str	r2, [r5, #8]
 80041ec:	60eb      	str	r3, [r5, #12]
 80041ee:	6820      	ldr	r0, [r4, #0]
 80041f0:	6128      	str	r0, [r5, #16]
			p->moveSize = 5;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	2205      	movs	r2, #5
 80041f6:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"E,H,D,D,A");
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	3340      	adds	r3, #64	; 0x40
 80041fc:	4995      	ldr	r1, [pc, #596]	; (8004454 <problem_fetch+0x3134>)
 80041fe:	461a      	mov	r2, r3
 8004200:	460b      	mov	r3, r1
 8004202:	cb03      	ldmia	r3!, {r0, r1}
 8004204:	6010      	str	r0, [r2, #0]
 8004206:	6051      	str	r1, [r2, #4]
 8004208:	881b      	ldrh	r3, [r3, #0]
 800420a:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"6,10,11,15,18");
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	3304      	adds	r3, #4
 8004210:	4a91      	ldr	r2, [pc, #580]	; (8004458 <problem_fetch+0x3138>)
 8004212:	461c      	mov	r4, r3
 8004214:	4613      	mov	r3, r2
 8004216:	cb07      	ldmia	r3!, {r0, r1, r2}
 8004218:	6020      	str	r0, [r4, #0]
 800421a:	6061      	str	r1, [r4, #4]
 800421c:	60a2      	str	r2, [r4, #8]
 800421e:	881b      	ldrh	r3, [r3, #0]
 8004220:	81a3      	strh	r3, [r4, #12]
			strcpy(p->startFinish, "s,d,d,d,e");
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	33d8      	adds	r3, #216	; 0xd8
 8004226:	498d      	ldr	r1, [pc, #564]	; (800445c <problem_fetch+0x313c>)
 8004228:	461a      	mov	r2, r3
 800422a:	460b      	mov	r3, r1
 800422c:	cb03      	ldmia	r3!, {r0, r1}
 800422e:	6010      	str	r0, [r2, #0]
 8004230:	6051      	str	r1, [r2, #4]
 8004232:	881b      	ldrh	r3, [r3, #0]
 8004234:	8113      	strh	r3, [r2, #8]
			strcpy(p->grade, "6B+");
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	33cc      	adds	r3, #204	; 0xcc
 800423a:	4a89      	ldr	r2, [pc, #548]	; (8004460 <problem_fetch+0x3140>)
 800423c:	6810      	ldr	r0, [r2, #0]
 800423e:	6018      	str	r0, [r3, #0]
			break;
 8004240:	f016 bdb4 	b.w	801adac <problem_fetch+0x19a8c>
		case 161 :
			strcpy(p->name,"HIEROGRIPIC");
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	337c      	adds	r3, #124	; 0x7c
 8004248:	4a86      	ldr	r2, [pc, #536]	; (8004464 <problem_fetch+0x3144>)
 800424a:	461c      	mov	r4, r3
 800424c:	4613      	mov	r3, r2
 800424e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8004250:	6020      	str	r0, [r4, #0]
 8004252:	6061      	str	r1, [r4, #4]
 8004254:	60a2      	str	r2, [r4, #8]
			p->moveSize = 6;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	2206      	movs	r2, #6
 800425a:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"J,G,F,C,A,A");
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	3340      	adds	r3, #64	; 0x40
 8004260:	4a81      	ldr	r2, [pc, #516]	; (8004468 <problem_fetch+0x3148>)
 8004262:	461c      	mov	r4, r3
 8004264:	4613      	mov	r3, r2
 8004266:	cb07      	ldmia	r3!, {r0, r1, r2}
 8004268:	6020      	str	r0, [r4, #0]
 800426a:	6061      	str	r1, [r4, #4]
 800426c:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,6,11,13,14,18");
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	3304      	adds	r3, #4
 8004272:	4a7e      	ldr	r2, [pc, #504]	; (800446c <problem_fetch+0x314c>)
 8004274:	461c      	mov	r4, r3
 8004276:	4615      	mov	r5, r2
 8004278:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800427a:	6020      	str	r0, [r4, #0]
 800427c:	6061      	str	r1, [r4, #4]
 800427e:	60a2      	str	r2, [r4, #8]
 8004280:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish, "s,s,d,d,d,e");
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	33d8      	adds	r3, #216	; 0xd8
 8004286:	4a7a      	ldr	r2, [pc, #488]	; (8004470 <problem_fetch+0x3150>)
 8004288:	461c      	mov	r4, r3
 800428a:	4613      	mov	r3, r2
 800428c:	cb07      	ldmia	r3!, {r0, r1, r2}
 800428e:	6020      	str	r0, [r4, #0]
 8004290:	6061      	str	r1, [r4, #4]
 8004292:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade, "7A");
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	33cc      	adds	r3, #204	; 0xcc
 8004298:	4a6c      	ldr	r2, [pc, #432]	; (800444c <problem_fetch+0x312c>)
 800429a:	8811      	ldrh	r1, [r2, #0]
 800429c:	7892      	ldrb	r2, [r2, #2]
 800429e:	8019      	strh	r1, [r3, #0]
 80042a0:	709a      	strb	r2, [r3, #2]
			break;
 80042a2:	f016 bd83 	b.w	801adac <problem_fetch+0x19a8c>
		case 162 :
			strcpy(p->name,"WLF46");
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	337c      	adds	r3, #124	; 0x7c
 80042aa:	4a72      	ldr	r2, [pc, #456]	; (8004474 <problem_fetch+0x3154>)
 80042ac:	6810      	ldr	r0, [r2, #0]
 80042ae:	6018      	str	r0, [r3, #0]
 80042b0:	8892      	ldrh	r2, [r2, #4]
 80042b2:	809a      	strh	r2, [r3, #4]
			p->moveSize = 6;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	2206      	movs	r2, #6
 80042b8:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"G,J,I,H,G,I");
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	3340      	adds	r3, #64	; 0x40
 80042be:	4a6e      	ldr	r2, [pc, #440]	; (8004478 <problem_fetch+0x3158>)
 80042c0:	461c      	mov	r4, r3
 80042c2:	4613      	mov	r3, r2
 80042c4:	cb07      	ldmia	r3!, {r0, r1, r2}
 80042c6:	6020      	str	r0, [r4, #0]
 80042c8:	6061      	str	r1, [r4, #4]
 80042ca:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,7,10,13,17,18");
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	3304      	adds	r3, #4
 80042d0:	4a6a      	ldr	r2, [pc, #424]	; (800447c <problem_fetch+0x315c>)
 80042d2:	461c      	mov	r4, r3
 80042d4:	4615      	mov	r5, r2
 80042d6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80042d8:	6020      	str	r0, [r4, #0]
 80042da:	6061      	str	r1, [r4, #4]
 80042dc:	60a2      	str	r2, [r4, #8]
 80042de:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish, "s,d,d,d,d,e");
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	33d8      	adds	r3, #216	; 0xd8
 80042e4:	4a66      	ldr	r2, [pc, #408]	; (8004480 <problem_fetch+0x3160>)
 80042e6:	461c      	mov	r4, r3
 80042e8:	4613      	mov	r3, r2
 80042ea:	cb07      	ldmia	r3!, {r0, r1, r2}
 80042ec:	6020      	str	r0, [r4, #0]
 80042ee:	6061      	str	r1, [r4, #4]
 80042f0:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade, "7A");
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	33cc      	adds	r3, #204	; 0xcc
 80042f6:	4a55      	ldr	r2, [pc, #340]	; (800444c <problem_fetch+0x312c>)
 80042f8:	8811      	ldrh	r1, [r2, #0]
 80042fa:	7892      	ldrb	r2, [r2, #2]
 80042fc:	8019      	strh	r1, [r3, #0]
 80042fe:	709a      	strb	r2, [r3, #2]
			break;
 8004300:	f016 bd54 	b.w	801adac <problem_fetch+0x19a8c>
		case 163 :
			strcpy(p->name,"POCKETLAND");
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	337c      	adds	r3, #124	; 0x7c
 8004308:	495e      	ldr	r1, [pc, #376]	; (8004484 <problem_fetch+0x3164>)
 800430a:	461a      	mov	r2, r3
 800430c:	460b      	mov	r3, r1
 800430e:	cb03      	ldmia	r3!, {r0, r1}
 8004310:	6010      	str	r0, [r2, #0]
 8004312:	6051      	str	r1, [r2, #4]
 8004314:	8819      	ldrh	r1, [r3, #0]
 8004316:	789b      	ldrb	r3, [r3, #2]
 8004318:	8111      	strh	r1, [r2, #8]
 800431a:	7293      	strb	r3, [r2, #10]
			p->moveSize = 6;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	2206      	movs	r2, #6
 8004320:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"G,D,G,G,G,A");
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	3340      	adds	r3, #64	; 0x40
 8004326:	4a58      	ldr	r2, [pc, #352]	; (8004488 <problem_fetch+0x3168>)
 8004328:	461c      	mov	r4, r3
 800432a:	4613      	mov	r3, r2
 800432c:	cb07      	ldmia	r3!, {r0, r1, r2}
 800432e:	6020      	str	r0, [r4, #0]
 8004330:	6061      	str	r1, [r4, #4]
 8004332:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,7,10,14,17,18");
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	3304      	adds	r3, #4
 8004338:	4a54      	ldr	r2, [pc, #336]	; (800448c <problem_fetch+0x316c>)
 800433a:	461c      	mov	r4, r3
 800433c:	4615      	mov	r5, r2
 800433e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004340:	6020      	str	r0, [r4, #0]
 8004342:	6061      	str	r1, [r4, #4]
 8004344:	60a2      	str	r2, [r4, #8]
 8004346:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish, "s,d,d,d,d,e");
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	33d8      	adds	r3, #216	; 0xd8
 800434c:	4a4c      	ldr	r2, [pc, #304]	; (8004480 <problem_fetch+0x3160>)
 800434e:	461c      	mov	r4, r3
 8004350:	4613      	mov	r3, r2
 8004352:	cb07      	ldmia	r3!, {r0, r1, r2}
 8004354:	6020      	str	r0, [r4, #0]
 8004356:	6061      	str	r1, [r4, #4]
 8004358:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade, "7B");
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	33cc      	adds	r3, #204	; 0xcc
 800435e:	4a4c      	ldr	r2, [pc, #304]	; (8004490 <problem_fetch+0x3170>)
 8004360:	8811      	ldrh	r1, [r2, #0]
 8004362:	7892      	ldrb	r2, [r2, #2]
 8004364:	8019      	strh	r1, [r3, #0]
 8004366:	709a      	strb	r2, [r3, #2]
			break;
 8004368:	f016 bd20 	b.w	801adac <problem_fetch+0x19a8c>
		case 164 :
			strcpy(p->name,"POCKETLAND 2");
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	337c      	adds	r3, #124	; 0x7c
 8004370:	4a48      	ldr	r2, [pc, #288]	; (8004494 <problem_fetch+0x3174>)
 8004372:	461c      	mov	r4, r3
 8004374:	4613      	mov	r3, r2
 8004376:	cb07      	ldmia	r3!, {r0, r1, r2}
 8004378:	6020      	str	r0, [r4, #0]
 800437a:	6061      	str	r1, [r4, #4]
 800437c:	60a2      	str	r2, [r4, #8]
 800437e:	781b      	ldrb	r3, [r3, #0]
 8004380:	7323      	strb	r3, [r4, #12]
			p->moveSize = 6;
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	2206      	movs	r2, #6
 8004386:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"H,D,G,H,E,I");
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	3340      	adds	r3, #64	; 0x40
 800438c:	4a42      	ldr	r2, [pc, #264]	; (8004498 <problem_fetch+0x3178>)
 800438e:	461c      	mov	r4, r3
 8004390:	4613      	mov	r3, r2
 8004392:	cb07      	ldmia	r3!, {r0, r1, r2}
 8004394:	6020      	str	r0, [r4, #0]
 8004396:	6061      	str	r1, [r4, #4]
 8004398:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,7,10,13,16,18");
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	3304      	adds	r3, #4
 800439e:	4a3f      	ldr	r2, [pc, #252]	; (800449c <problem_fetch+0x317c>)
 80043a0:	461c      	mov	r4, r3
 80043a2:	4615      	mov	r5, r2
 80043a4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80043a6:	6020      	str	r0, [r4, #0]
 80043a8:	6061      	str	r1, [r4, #4]
 80043aa:	60a2      	str	r2, [r4, #8]
 80043ac:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish, "s,d,d,d,d,e");
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	33d8      	adds	r3, #216	; 0xd8
 80043b2:	4a33      	ldr	r2, [pc, #204]	; (8004480 <problem_fetch+0x3160>)
 80043b4:	461c      	mov	r4, r3
 80043b6:	4613      	mov	r3, r2
 80043b8:	cb07      	ldmia	r3!, {r0, r1, r2}
 80043ba:	6020      	str	r0, [r4, #0]
 80043bc:	6061      	str	r1, [r4, #4]
 80043be:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade, "7C");
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	33cc      	adds	r3, #204	; 0xcc
 80043c4:	4a36      	ldr	r2, [pc, #216]	; (80044a0 <problem_fetch+0x3180>)
 80043c6:	8811      	ldrh	r1, [r2, #0]
 80043c8:	7892      	ldrb	r2, [r2, #2]
 80043ca:	8019      	strh	r1, [r3, #0]
 80043cc:	709a      	strb	r2, [r3, #2]
			break;
 80043ce:	f016 bced 	b.w	801adac <problem_fetch+0x19a8c>
		case 165 :
			strcpy(p->name,"FIRST WORLD PROBLEM");
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	337c      	adds	r3, #124	; 0x7c
 80043d6:	4a33      	ldr	r2, [pc, #204]	; (80044a4 <problem_fetch+0x3184>)
 80043d8:	461d      	mov	r5, r3
 80043da:	4614      	mov	r4, r2
 80043dc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80043de:	6028      	str	r0, [r5, #0]
 80043e0:	6069      	str	r1, [r5, #4]
 80043e2:	60aa      	str	r2, [r5, #8]
 80043e4:	60eb      	str	r3, [r5, #12]
 80043e6:	6820      	ldr	r0, [r4, #0]
 80043e8:	6128      	str	r0, [r5, #16]
			p->moveSize = 6;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	2206      	movs	r2, #6
 80043ee:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"E,E,C,E,C,D");
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	3340      	adds	r3, #64	; 0x40
 80043f4:	4a2c      	ldr	r2, [pc, #176]	; (80044a8 <problem_fetch+0x3188>)
 80043f6:	461c      	mov	r4, r3
 80043f8:	4613      	mov	r3, r2
 80043fa:	cb07      	ldmia	r3!, {r0, r1, r2}
 80043fc:	6020      	str	r0, [r4, #0]
 80043fe:	6061      	str	r1, [r4, #4]
 8004400:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"6,9,8,14,13,18");
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	3304      	adds	r3, #4
 8004406:	4a29      	ldr	r2, [pc, #164]	; (80044ac <problem_fetch+0x318c>)
 8004408:	461c      	mov	r4, r3
 800440a:	4613      	mov	r3, r2
 800440c:	cb07      	ldmia	r3!, {r0, r1, r2}
 800440e:	6020      	str	r0, [r4, #0]
 8004410:	6061      	str	r1, [r4, #4]
 8004412:	60a2      	str	r2, [r4, #8]
 8004414:	881a      	ldrh	r2, [r3, #0]
 8004416:	789b      	ldrb	r3, [r3, #2]
 8004418:	81a2      	strh	r2, [r4, #12]
 800441a:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish, "s,d,d,d,d,e");
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	33d8      	adds	r3, #216	; 0xd8
 8004420:	4a17      	ldr	r2, [pc, #92]	; (8004480 <problem_fetch+0x3160>)
 8004422:	461c      	mov	r4, r3
 8004424:	4613      	mov	r3, r2
 8004426:	cb07      	ldmia	r3!, {r0, r1, r2}
 8004428:	6020      	str	r0, [r4, #0]
 800442a:	6061      	str	r1, [r4, #4]
 800442c:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade, "6C+");
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	33cc      	adds	r3, #204	; 0xcc
 8004432:	4a1f      	ldr	r2, [pc, #124]	; (80044b0 <problem_fetch+0x3190>)
 8004434:	6810      	ldr	r0, [r2, #0]
 8004436:	6018      	str	r0, [r3, #0]
			break;
 8004438:	f016 bcb8 	b.w	801adac <problem_fetch+0x19a8c>
 800443c:	08022030 	.word	0x08022030
 8004440:	0802203c 	.word	0x0802203c
 8004444:	08022054 	.word	0x08022054
 8004448:	08022078 	.word	0x08022078
 800444c:	080212f4 	.word	0x080212f4
 8004450:	08022090 	.word	0x08022090
 8004454:	080220a4 	.word	0x080220a4
 8004458:	080220b0 	.word	0x080220b0
 800445c:	08021320 	.word	0x08021320
 8004460:	080212b0 	.word	0x080212b0
 8004464:	080220c0 	.word	0x080220c0
 8004468:	080220cc 	.word	0x080220cc
 800446c:	080220d8 	.word	0x080220d8
 8004470:	08021910 	.word	0x08021910
 8004474:	080220e8 	.word	0x080220e8
 8004478:	080220f0 	.word	0x080220f0
 800447c:	080220fc 	.word	0x080220fc
 8004480:	0802139c 	.word	0x0802139c
 8004484:	0802210c 	.word	0x0802210c
 8004488:	08022118 	.word	0x08022118
 800448c:	08021b40 	.word	0x08021b40
 8004490:	0802132c 	.word	0x0802132c
 8004494:	08022124 	.word	0x08022124
 8004498:	08022134 	.word	0x08022134
 800449c:	08022140 	.word	0x08022140
 80044a0:	0802158c 	.word	0x0802158c
 80044a4:	08022150 	.word	0x08022150
 80044a8:	08022164 	.word	0x08022164
 80044ac:	08022170 	.word	0x08022170
 80044b0:	080213a8 	.word	0x080213a8
		case 166 :
			strcpy(p->name,"GAMBERO");
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	337c      	adds	r3, #124	; 0x7c
 80044b8:	49b8      	ldr	r1, [pc, #736]	; (800479c <problem_fetch+0x347c>)
 80044ba:	461a      	mov	r2, r3
 80044bc:	460b      	mov	r3, r1
 80044be:	cb03      	ldmia	r3!, {r0, r1}
 80044c0:	6010      	str	r0, [r2, #0]
 80044c2:	6051      	str	r1, [r2, #4]
			p->moveSize = 6;
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	2206      	movs	r2, #6
 80044c8:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"J,G,E,B,E,A");
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	3340      	adds	r3, #64	; 0x40
 80044ce:	4ab4      	ldr	r2, [pc, #720]	; (80047a0 <problem_fetch+0x3480>)
 80044d0:	461c      	mov	r4, r3
 80044d2:	4613      	mov	r3, r2
 80044d4:	cb07      	ldmia	r3!, {r0, r1, r2}
 80044d6:	6020      	str	r0, [r4, #0]
 80044d8:	6061      	str	r1, [r4, #4]
 80044da:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,6,9,12,14,18");
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	3304      	adds	r3, #4
 80044e0:	4ab0      	ldr	r2, [pc, #704]	; (80047a4 <problem_fetch+0x3484>)
 80044e2:	461c      	mov	r4, r3
 80044e4:	4613      	mov	r3, r2
 80044e6:	cb07      	ldmia	r3!, {r0, r1, r2}
 80044e8:	6020      	str	r0, [r4, #0]
 80044ea:	6061      	str	r1, [r4, #4]
 80044ec:	60a2      	str	r2, [r4, #8]
 80044ee:	881a      	ldrh	r2, [r3, #0]
 80044f0:	789b      	ldrb	r3, [r3, #2]
 80044f2:	81a2      	strh	r2, [r4, #12]
 80044f4:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish, "s,d,d,d,d,e");
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	33d8      	adds	r3, #216	; 0xd8
 80044fa:	4aab      	ldr	r2, [pc, #684]	; (80047a8 <problem_fetch+0x3488>)
 80044fc:	461c      	mov	r4, r3
 80044fe:	4613      	mov	r3, r2
 8004500:	cb07      	ldmia	r3!, {r0, r1, r2}
 8004502:	6020      	str	r0, [r4, #0]
 8004504:	6061      	str	r1, [r4, #4]
 8004506:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade, "7C");
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	33cc      	adds	r3, #204	; 0xcc
 800450c:	4aa7      	ldr	r2, [pc, #668]	; (80047ac <problem_fetch+0x348c>)
 800450e:	8811      	ldrh	r1, [r2, #0]
 8004510:	7892      	ldrb	r2, [r2, #2]
 8004512:	8019      	strh	r1, [r3, #0]
 8004514:	709a      	strb	r2, [r3, #2]
			break;
 8004516:	f016 bc49 	b.w	801adac <problem_fetch+0x19a8c>
		case 167 :
			strcpy(p->name,"ROCKET");
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	337c      	adds	r3, #124	; 0x7c
 800451e:	4aa4      	ldr	r2, [pc, #656]	; (80047b0 <problem_fetch+0x3490>)
 8004520:	6810      	ldr	r0, [r2, #0]
 8004522:	6018      	str	r0, [r3, #0]
 8004524:	8891      	ldrh	r1, [r2, #4]
 8004526:	7992      	ldrb	r2, [r2, #6]
 8004528:	8099      	strh	r1, [r3, #4]
 800452a:	719a      	strb	r2, [r3, #6]
			p->moveSize = 5;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	2205      	movs	r2, #5
 8004530:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"B,E,H,F,I");
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	3340      	adds	r3, #64	; 0x40
 8004536:	499f      	ldr	r1, [pc, #636]	; (80047b4 <problem_fetch+0x3494>)
 8004538:	461a      	mov	r2, r3
 800453a:	460b      	mov	r3, r1
 800453c:	cb03      	ldmia	r3!, {r0, r1}
 800453e:	6010      	str	r0, [r2, #0]
 8004540:	6051      	str	r1, [r2, #4]
 8004542:	881b      	ldrh	r3, [r3, #0]
 8004544:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"6,6,10,13,18");
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	3304      	adds	r3, #4
 800454a:	4a9b      	ldr	r2, [pc, #620]	; (80047b8 <problem_fetch+0x3498>)
 800454c:	461c      	mov	r4, r3
 800454e:	4613      	mov	r3, r2
 8004550:	cb07      	ldmia	r3!, {r0, r1, r2}
 8004552:	6020      	str	r0, [r4, #0]
 8004554:	6061      	str	r1, [r4, #4]
 8004556:	60a2      	str	r2, [r4, #8]
 8004558:	781b      	ldrb	r3, [r3, #0]
 800455a:	7323      	strb	r3, [r4, #12]
			strcpy(p->startFinish, "s,s,d,d,e");
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	33d8      	adds	r3, #216	; 0xd8
 8004560:	4996      	ldr	r1, [pc, #600]	; (80047bc <problem_fetch+0x349c>)
 8004562:	461a      	mov	r2, r3
 8004564:	460b      	mov	r3, r1
 8004566:	cb03      	ldmia	r3!, {r0, r1}
 8004568:	6010      	str	r0, [r2, #0]
 800456a:	6051      	str	r1, [r2, #4]
 800456c:	881b      	ldrh	r3, [r3, #0]
 800456e:	8113      	strh	r3, [r2, #8]
			strcpy(p->grade, "7A");
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	33cc      	adds	r3, #204	; 0xcc
 8004574:	4a92      	ldr	r2, [pc, #584]	; (80047c0 <problem_fetch+0x34a0>)
 8004576:	8811      	ldrh	r1, [r2, #0]
 8004578:	7892      	ldrb	r2, [r2, #2]
 800457a:	8019      	strh	r1, [r3, #0]
 800457c:	709a      	strb	r2, [r3, #2]
			break;
 800457e:	f016 bc15 	b.w	801adac <problem_fetch+0x19a8c>
		case 168 :
			strcpy(p->name,"ACG6 PLUS");
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	337c      	adds	r3, #124	; 0x7c
 8004586:	498f      	ldr	r1, [pc, #572]	; (80047c4 <problem_fetch+0x34a4>)
 8004588:	461a      	mov	r2, r3
 800458a:	460b      	mov	r3, r1
 800458c:	cb03      	ldmia	r3!, {r0, r1}
 800458e:	6010      	str	r0, [r2, #0]
 8004590:	6051      	str	r1, [r2, #4]
 8004592:	881b      	ldrh	r3, [r3, #0]
 8004594:	8113      	strh	r3, [r2, #8]
			p->moveSize = 6;
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	2206      	movs	r2, #6
 800459a:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"J,H,C,E,C,I");
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	3340      	adds	r3, #64	; 0x40
 80045a0:	4a89      	ldr	r2, [pc, #548]	; (80047c8 <problem_fetch+0x34a8>)
 80045a2:	461c      	mov	r4, r3
 80045a4:	4613      	mov	r3, r2
 80045a6:	cb07      	ldmia	r3!, {r0, r1, r2}
 80045a8:	6020      	str	r0, [r4, #0]
 80045aa:	6061      	str	r1, [r4, #4]
 80045ac:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,10,13,16,16,18");
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	3304      	adds	r3, #4
 80045b2:	4a86      	ldr	r2, [pc, #536]	; (80047cc <problem_fetch+0x34ac>)
 80045b4:	461d      	mov	r5, r3
 80045b6:	4614      	mov	r4, r2
 80045b8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80045ba:	6028      	str	r0, [r5, #0]
 80045bc:	6069      	str	r1, [r5, #4]
 80045be:	60aa      	str	r2, [r5, #8]
 80045c0:	60eb      	str	r3, [r5, #12]
 80045c2:	7823      	ldrb	r3, [r4, #0]
 80045c4:	742b      	strb	r3, [r5, #16]
			strcpy(p->startFinish, "s,d,d,d,d,e");
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	33d8      	adds	r3, #216	; 0xd8
 80045ca:	4a77      	ldr	r2, [pc, #476]	; (80047a8 <problem_fetch+0x3488>)
 80045cc:	461c      	mov	r4, r3
 80045ce:	4613      	mov	r3, r2
 80045d0:	cb07      	ldmia	r3!, {r0, r1, r2}
 80045d2:	6020      	str	r0, [r4, #0]
 80045d4:	6061      	str	r1, [r4, #4]
 80045d6:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade, "7A");
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	33cc      	adds	r3, #204	; 0xcc
 80045dc:	4a78      	ldr	r2, [pc, #480]	; (80047c0 <problem_fetch+0x34a0>)
 80045de:	8811      	ldrh	r1, [r2, #0]
 80045e0:	7892      	ldrb	r2, [r2, #2]
 80045e2:	8019      	strh	r1, [r3, #0]
 80045e4:	709a      	strb	r2, [r3, #2]
			break;
 80045e6:	f016 bbe1 	b.w	801adac <problem_fetch+0x19a8c>
		case 169 :
			strcpy(p->name,"SQUINCHER");
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	337c      	adds	r3, #124	; 0x7c
 80045ee:	4978      	ldr	r1, [pc, #480]	; (80047d0 <problem_fetch+0x34b0>)
 80045f0:	461a      	mov	r2, r3
 80045f2:	460b      	mov	r3, r1
 80045f4:	cb03      	ldmia	r3!, {r0, r1}
 80045f6:	6010      	str	r0, [r2, #0]
 80045f8:	6051      	str	r1, [r2, #4]
 80045fa:	881b      	ldrh	r3, [r3, #0]
 80045fc:	8113      	strh	r3, [r2, #8]
			p->moveSize = 7;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	2207      	movs	r2, #7
 8004602:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"J,H,G,F,C,D,D");
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	3340      	adds	r3, #64	; 0x40
 8004608:	4a72      	ldr	r2, [pc, #456]	; (80047d4 <problem_fetch+0x34b4>)
 800460a:	461c      	mov	r4, r3
 800460c:	4613      	mov	r3, r2
 800460e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8004610:	6020      	str	r0, [r4, #0]
 8004612:	6061      	str	r1, [r4, #4]
 8004614:	60a2      	str	r2, [r4, #8]
 8004616:	881b      	ldrh	r3, [r3, #0]
 8004618:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,8,9,11,13,15,18");
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	3304      	adds	r3, #4
 800461e:	4a6e      	ldr	r2, [pc, #440]	; (80047d8 <problem_fetch+0x34b8>)
 8004620:	461d      	mov	r5, r3
 8004622:	4614      	mov	r4, r2
 8004624:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004626:	6028      	str	r0, [r5, #0]
 8004628:	6069      	str	r1, [r5, #4]
 800462a:	60aa      	str	r2, [r5, #8]
 800462c:	60eb      	str	r3, [r5, #12]
 800462e:	8823      	ldrh	r3, [r4, #0]
 8004630:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish, "s,d,d,d,d,d,e");
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	33d8      	adds	r3, #216	; 0xd8
 8004636:	4a69      	ldr	r2, [pc, #420]	; (80047dc <problem_fetch+0x34bc>)
 8004638:	461c      	mov	r4, r3
 800463a:	4613      	mov	r3, r2
 800463c:	cb07      	ldmia	r3!, {r0, r1, r2}
 800463e:	6020      	str	r0, [r4, #0]
 8004640:	6061      	str	r1, [r4, #4]
 8004642:	60a2      	str	r2, [r4, #8]
 8004644:	881b      	ldrh	r3, [r3, #0]
 8004646:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade, "6B+");
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	33cc      	adds	r3, #204	; 0xcc
 800464c:	4a64      	ldr	r2, [pc, #400]	; (80047e0 <problem_fetch+0x34c0>)
 800464e:	6810      	ldr	r0, [r2, #0]
 8004650:	6018      	str	r0, [r3, #0]
			break;
 8004652:	f016 bbab 	b.w	801adac <problem_fetch+0x19a8c>
		case 17 :
			strcpy(p->name,"THE LADDER");
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	337c      	adds	r3, #124	; 0x7c
 800465a:	4962      	ldr	r1, [pc, #392]	; (80047e4 <problem_fetch+0x34c4>)
 800465c:	461a      	mov	r2, r3
 800465e:	460b      	mov	r3, r1
 8004660:	cb03      	ldmia	r3!, {r0, r1}
 8004662:	6010      	str	r0, [r2, #0]
 8004664:	6051      	str	r1, [r2, #4]
 8004666:	8819      	ldrh	r1, [r3, #0]
 8004668:	789b      	ldrb	r3, [r3, #2]
 800466a:	8111      	strh	r1, [r2, #8]
 800466c:	7293      	strb	r3, [r2, #10]
			p->moveSize = 7;
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	2207      	movs	r2, #7
 8004672:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"H,J,I,J,I,K,I");
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	3340      	adds	r3, #64	; 0x40
 8004678:	4a5b      	ldr	r2, [pc, #364]	; (80047e8 <problem_fetch+0x34c8>)
 800467a:	461c      	mov	r4, r3
 800467c:	4613      	mov	r3, r2
 800467e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8004680:	6020      	str	r0, [r4, #0]
 8004682:	6061      	str	r1, [r4, #4]
 8004684:	60a2      	str	r2, [r4, #8]
 8004686:	881b      	ldrh	r3, [r3, #0]
 8004688:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,7,10,13,15,16,18");
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	3304      	adds	r3, #4
 800468e:	4a57      	ldr	r2, [pc, #348]	; (80047ec <problem_fetch+0x34cc>)
 8004690:	461d      	mov	r5, r3
 8004692:	4614      	mov	r4, r2
 8004694:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004696:	6028      	str	r0, [r5, #0]
 8004698:	6069      	str	r1, [r5, #4]
 800469a:	60aa      	str	r2, [r5, #8]
 800469c:	60eb      	str	r3, [r5, #12]
 800469e:	8823      	ldrh	r3, [r4, #0]
 80046a0:	78a2      	ldrb	r2, [r4, #2]
 80046a2:	822b      	strh	r3, [r5, #16]
 80046a4:	4613      	mov	r3, r2
 80046a6:	74ab      	strb	r3, [r5, #18]
			strcpy(p->startFinish, "s,d,d,d,d,d,e");
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	33d8      	adds	r3, #216	; 0xd8
 80046ac:	4a4b      	ldr	r2, [pc, #300]	; (80047dc <problem_fetch+0x34bc>)
 80046ae:	461c      	mov	r4, r3
 80046b0:	4613      	mov	r3, r2
 80046b2:	cb07      	ldmia	r3!, {r0, r1, r2}
 80046b4:	6020      	str	r0, [r4, #0]
 80046b6:	6061      	str	r1, [r4, #4]
 80046b8:	60a2      	str	r2, [r4, #8]
 80046ba:	881b      	ldrh	r3, [r3, #0]
 80046bc:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade, "6B+");
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	33cc      	adds	r3, #204	; 0xcc
 80046c2:	4a47      	ldr	r2, [pc, #284]	; (80047e0 <problem_fetch+0x34c0>)
 80046c4:	6810      	ldr	r0, [r2, #0]
 80046c6:	6018      	str	r0, [r3, #0]
			break;
 80046c8:	f016 bb70 	b.w	801adac <problem_fetch+0x19a8c>
		case 170 :
			strcpy(p->name,"SHRINE1");
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	337c      	adds	r3, #124	; 0x7c
 80046d0:	4947      	ldr	r1, [pc, #284]	; (80047f0 <problem_fetch+0x34d0>)
 80046d2:	461a      	mov	r2, r3
 80046d4:	460b      	mov	r3, r1
 80046d6:	cb03      	ldmia	r3!, {r0, r1}
 80046d8:	6010      	str	r0, [r2, #0]
 80046da:	6051      	str	r1, [r2, #4]
			p->moveSize = 6;
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	2206      	movs	r2, #6
 80046e0:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"C,C,F,F,J,I");
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	3340      	adds	r3, #64	; 0x40
 80046e6:	4a43      	ldr	r2, [pc, #268]	; (80047f4 <problem_fetch+0x34d4>)
 80046e8:	461c      	mov	r4, r3
 80046ea:	4613      	mov	r3, r2
 80046ec:	cb07      	ldmia	r3!, {r0, r1, r2}
 80046ee:	6020      	str	r0, [r4, #0]
 80046f0:	6061      	str	r1, [r4, #4]
 80046f2:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,8,11,13,16,18");
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	3304      	adds	r3, #4
 80046f8:	4a3f      	ldr	r2, [pc, #252]	; (80047f8 <problem_fetch+0x34d8>)
 80046fa:	461c      	mov	r4, r3
 80046fc:	4615      	mov	r5, r2
 80046fe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004700:	6020      	str	r0, [r4, #0]
 8004702:	6061      	str	r1, [r4, #4]
 8004704:	60a2      	str	r2, [r4, #8]
 8004706:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish, "s,d,d,d,d,e");
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	33d8      	adds	r3, #216	; 0xd8
 800470c:	4a26      	ldr	r2, [pc, #152]	; (80047a8 <problem_fetch+0x3488>)
 800470e:	461c      	mov	r4, r3
 8004710:	4613      	mov	r3, r2
 8004712:	cb07      	ldmia	r3!, {r0, r1, r2}
 8004714:	6020      	str	r0, [r4, #0]
 8004716:	6061      	str	r1, [r4, #4]
 8004718:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade, "7B+");
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	33cc      	adds	r3, #204	; 0xcc
 800471e:	4a37      	ldr	r2, [pc, #220]	; (80047fc <problem_fetch+0x34dc>)
 8004720:	6810      	ldr	r0, [r2, #0]
 8004722:	6018      	str	r0, [r3, #0]
			break;
 8004724:	f016 bb42 	b.w	801adac <problem_fetch+0x19a8c>
		case 171 :
			strcpy(p->name,"VISUALIZZA STOC......");
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	337c      	adds	r3, #124	; 0x7c
 800472c:	4a34      	ldr	r2, [pc, #208]	; (8004800 <problem_fetch+0x34e0>)
 800472e:	461d      	mov	r5, r3
 8004730:	4614      	mov	r4, r2
 8004732:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004734:	6028      	str	r0, [r5, #0]
 8004736:	6069      	str	r1, [r5, #4]
 8004738:	60aa      	str	r2, [r5, #8]
 800473a:	60eb      	str	r3, [r5, #12]
 800473c:	6820      	ldr	r0, [r4, #0]
 800473e:	6128      	str	r0, [r5, #16]
 8004740:	88a3      	ldrh	r3, [r4, #4]
 8004742:	82ab      	strh	r3, [r5, #20]
			p->moveSize = 6;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	2206      	movs	r2, #6
 8004748:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"J,H,E,H,F,I");
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	3340      	adds	r3, #64	; 0x40
 800474e:	4a2d      	ldr	r2, [pc, #180]	; (8004804 <problem_fetch+0x34e4>)
 8004750:	461c      	mov	r4, r3
 8004752:	4613      	mov	r3, r2
 8004754:	cb07      	ldmia	r3!, {r0, r1, r2}
 8004756:	6020      	str	r0, [r4, #0]
 8004758:	6061      	str	r1, [r4, #4]
 800475a:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,8,9,12,13,18");
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	3304      	adds	r3, #4
 8004760:	4a29      	ldr	r2, [pc, #164]	; (8004808 <problem_fetch+0x34e8>)
 8004762:	461c      	mov	r4, r3
 8004764:	4613      	mov	r3, r2
 8004766:	cb07      	ldmia	r3!, {r0, r1, r2}
 8004768:	6020      	str	r0, [r4, #0]
 800476a:	6061      	str	r1, [r4, #4]
 800476c:	60a2      	str	r2, [r4, #8]
 800476e:	881a      	ldrh	r2, [r3, #0]
 8004770:	789b      	ldrb	r3, [r3, #2]
 8004772:	81a2      	strh	r2, [r4, #12]
 8004774:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish, "s,d,d,d,d,e");
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	33d8      	adds	r3, #216	; 0xd8
 800477a:	4a0b      	ldr	r2, [pc, #44]	; (80047a8 <problem_fetch+0x3488>)
 800477c:	461c      	mov	r4, r3
 800477e:	4613      	mov	r3, r2
 8004780:	cb07      	ldmia	r3!, {r0, r1, r2}
 8004782:	6020      	str	r0, [r4, #0]
 8004784:	6061      	str	r1, [r4, #4]
 8004786:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade, "7B");
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	33cc      	adds	r3, #204	; 0xcc
 800478c:	4a1f      	ldr	r2, [pc, #124]	; (800480c <problem_fetch+0x34ec>)
 800478e:	8811      	ldrh	r1, [r2, #0]
 8004790:	7892      	ldrb	r2, [r2, #2]
 8004792:	8019      	strh	r1, [r3, #0]
 8004794:	709a      	strb	r2, [r3, #2]
			break;
 8004796:	f016 bb09 	b.w	801adac <problem_fetch+0x19a8c>
 800479a:	bf00      	nop
 800479c:	08022180 	.word	0x08022180
 80047a0:	08022188 	.word	0x08022188
 80047a4:	08022194 	.word	0x08022194
 80047a8:	0802139c 	.word	0x0802139c
 80047ac:	0802158c 	.word	0x0802158c
 80047b0:	080221a4 	.word	0x080221a4
 80047b4:	080221ac 	.word	0x080221ac
 80047b8:	080221b8 	.word	0x080221b8
 80047bc:	080221c8 	.word	0x080221c8
 80047c0:	080212f4 	.word	0x080212f4
 80047c4:	080221d4 	.word	0x080221d4
 80047c8:	080221e0 	.word	0x080221e0
 80047cc:	080221ec 	.word	0x080221ec
 80047d0:	08022200 	.word	0x08022200
 80047d4:	0802220c 	.word	0x0802220c
 80047d8:	0802221c 	.word	0x0802221c
 80047dc:	08021494 	.word	0x08021494
 80047e0:	080212b0 	.word	0x080212b0
 80047e4:	08022230 	.word	0x08022230
 80047e8:	0802223c 	.word	0x0802223c
 80047ec:	080216cc 	.word	0x080216cc
 80047f0:	0802224c 	.word	0x0802224c
 80047f4:	08022254 	.word	0x08022254
 80047f8:	08022260 	.word	0x08022260
 80047fc:	08021848 	.word	0x08021848
 8004800:	08022270 	.word	0x08022270
 8004804:	08022288 	.word	0x08022288
 8004808:	08022294 	.word	0x08022294
 800480c:	0802132c 	.word	0x0802132c
		case 172 :
			strcpy(p->name,"DEATH EATER");
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	337c      	adds	r3, #124	; 0x7c
 8004814:	4ab8      	ldr	r2, [pc, #736]	; (8004af8 <problem_fetch+0x37d8>)
 8004816:	461c      	mov	r4, r3
 8004818:	4613      	mov	r3, r2
 800481a:	cb07      	ldmia	r3!, {r0, r1, r2}
 800481c:	6020      	str	r0, [r4, #0]
 800481e:	6061      	str	r1, [r4, #4]
 8004820:	60a2      	str	r2, [r4, #8]
			p->moveSize = 7;
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	2207      	movs	r2, #7
 8004826:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"G,E,H,I,J,G,I");
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	3340      	adds	r3, #64	; 0x40
 800482c:	4ab3      	ldr	r2, [pc, #716]	; (8004afc <problem_fetch+0x37dc>)
 800482e:	461c      	mov	r4, r3
 8004830:	4613      	mov	r3, r2
 8004832:	cb07      	ldmia	r3!, {r0, r1, r2}
 8004834:	6020      	str	r0, [r4, #0]
 8004836:	6061      	str	r1, [r4, #4]
 8004838:	60a2      	str	r2, [r4, #8]
 800483a:	881b      	ldrh	r3, [r3, #0]
 800483c:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,6,8,10,13,15,18");
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	3304      	adds	r3, #4
 8004842:	4aaf      	ldr	r2, [pc, #700]	; (8004b00 <problem_fetch+0x37e0>)
 8004844:	461d      	mov	r5, r3
 8004846:	4614      	mov	r4, r2
 8004848:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800484a:	6028      	str	r0, [r5, #0]
 800484c:	6069      	str	r1, [r5, #4]
 800484e:	60aa      	str	r2, [r5, #8]
 8004850:	60eb      	str	r3, [r5, #12]
 8004852:	8823      	ldrh	r3, [r4, #0]
 8004854:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish, "s,s,d,d,d,d,e");
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	33d8      	adds	r3, #216	; 0xd8
 800485a:	4aaa      	ldr	r2, [pc, #680]	; (8004b04 <problem_fetch+0x37e4>)
 800485c:	461c      	mov	r4, r3
 800485e:	4613      	mov	r3, r2
 8004860:	cb07      	ldmia	r3!, {r0, r1, r2}
 8004862:	6020      	str	r0, [r4, #0]
 8004864:	6061      	str	r1, [r4, #4]
 8004866:	60a2      	str	r2, [r4, #8]
 8004868:	881b      	ldrh	r3, [r3, #0]
 800486a:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade, "6B+");
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	33cc      	adds	r3, #204	; 0xcc
 8004870:	4aa5      	ldr	r2, [pc, #660]	; (8004b08 <problem_fetch+0x37e8>)
 8004872:	6810      	ldr	r0, [r2, #0]
 8004874:	6018      	str	r0, [r3, #0]
			break;
 8004876:	f016 ba99 	b.w	801adac <problem_fetch+0x19a8c>
		case 173 :
			strcpy(p->name,"ROBERTDS#1");
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	337c      	adds	r3, #124	; 0x7c
 800487e:	49a3      	ldr	r1, [pc, #652]	; (8004b0c <problem_fetch+0x37ec>)
 8004880:	461a      	mov	r2, r3
 8004882:	460b      	mov	r3, r1
 8004884:	cb03      	ldmia	r3!, {r0, r1}
 8004886:	6010      	str	r0, [r2, #0]
 8004888:	6051      	str	r1, [r2, #4]
 800488a:	8819      	ldrh	r1, [r3, #0]
 800488c:	789b      	ldrb	r3, [r3, #2]
 800488e:	8111      	strh	r1, [r2, #8]
 8004890:	7293      	strb	r3, [r2, #10]
			p->moveSize = 7;
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	2207      	movs	r2, #7
 8004896:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"B,E,B,D,B,D,D");
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	3340      	adds	r3, #64	; 0x40
 800489c:	4a9c      	ldr	r2, [pc, #624]	; (8004b10 <problem_fetch+0x37f0>)
 800489e:	461c      	mov	r4, r3
 80048a0:	4613      	mov	r3, r2
 80048a2:	cb07      	ldmia	r3!, {r0, r1, r2}
 80048a4:	6020      	str	r0, [r4, #0]
 80048a6:	6061      	str	r1, [r4, #4]
 80048a8:	60a2      	str	r2, [r4, #8]
 80048aa:	881b      	ldrh	r3, [r3, #0]
 80048ac:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"6,8,10,11,12,15,18");
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	3304      	adds	r3, #4
 80048b2:	4a98      	ldr	r2, [pc, #608]	; (8004b14 <problem_fetch+0x37f4>)
 80048b4:	461d      	mov	r5, r3
 80048b6:	4614      	mov	r4, r2
 80048b8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80048ba:	6028      	str	r0, [r5, #0]
 80048bc:	6069      	str	r1, [r5, #4]
 80048be:	60aa      	str	r2, [r5, #8]
 80048c0:	60eb      	str	r3, [r5, #12]
 80048c2:	8823      	ldrh	r3, [r4, #0]
 80048c4:	78a2      	ldrb	r2, [r4, #2]
 80048c6:	822b      	strh	r3, [r5, #16]
 80048c8:	4613      	mov	r3, r2
 80048ca:	74ab      	strb	r3, [r5, #18]
			strcpy(p->startFinish, "s,d,d,d,d,d,e");
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	33d8      	adds	r3, #216	; 0xd8
 80048d0:	4a91      	ldr	r2, [pc, #580]	; (8004b18 <problem_fetch+0x37f8>)
 80048d2:	461c      	mov	r4, r3
 80048d4:	4613      	mov	r3, r2
 80048d6:	cb07      	ldmia	r3!, {r0, r1, r2}
 80048d8:	6020      	str	r0, [r4, #0]
 80048da:	6061      	str	r1, [r4, #4]
 80048dc:	60a2      	str	r2, [r4, #8]
 80048de:	881b      	ldrh	r3, [r3, #0]
 80048e0:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade, "6B+");
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	33cc      	adds	r3, #204	; 0xcc
 80048e6:	4a88      	ldr	r2, [pc, #544]	; (8004b08 <problem_fetch+0x37e8>)
 80048e8:	6810      	ldr	r0, [r2, #0]
 80048ea:	6018      	str	r0, [r3, #0]
			break;
 80048ec:	f016 ba5e 	b.w	801adac <problem_fetch+0x19a8c>
		case 174 :
			strcpy(p->name,"ACG68");
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	337c      	adds	r3, #124	; 0x7c
 80048f4:	4a89      	ldr	r2, [pc, #548]	; (8004b1c <problem_fetch+0x37fc>)
 80048f6:	6810      	ldr	r0, [r2, #0]
 80048f8:	6018      	str	r0, [r3, #0]
 80048fa:	8892      	ldrh	r2, [r2, #4]
 80048fc:	809a      	strh	r2, [r3, #4]
			p->moveSize = 8;
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	2208      	movs	r2, #8
 8004902:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"J,G,E,F,D,B,E,A");
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	3340      	adds	r3, #64	; 0x40
 8004908:	4a85      	ldr	r2, [pc, #532]	; (8004b20 <problem_fetch+0x3800>)
 800490a:	461c      	mov	r4, r3
 800490c:	4615      	mov	r5, r2
 800490e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004910:	6020      	str	r0, [r4, #0]
 8004912:	6061      	str	r1, [r4, #4]
 8004914:	60a2      	str	r2, [r4, #8]
 8004916:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,6,8,11,11,6,16,18");
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	3304      	adds	r3, #4
 800491c:	4a81      	ldr	r2, [pc, #516]	; (8004b24 <problem_fetch+0x3804>)
 800491e:	461d      	mov	r5, r3
 8004920:	4614      	mov	r4, r2
 8004922:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004924:	6028      	str	r0, [r5, #0]
 8004926:	6069      	str	r1, [r5, #4]
 8004928:	60aa      	str	r2, [r5, #8]
 800492a:	60eb      	str	r3, [r5, #12]
 800492c:	6820      	ldr	r0, [r4, #0]
 800492e:	6128      	str	r0, [r5, #16]
			strcpy(p->startFinish, "s,s,d,d,d,d,d,e");
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	33d8      	adds	r3, #216	; 0xd8
 8004934:	4a7c      	ldr	r2, [pc, #496]	; (8004b28 <problem_fetch+0x3808>)
 8004936:	461c      	mov	r4, r3
 8004938:	4615      	mov	r5, r2
 800493a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800493c:	6020      	str	r0, [r4, #0]
 800493e:	6061      	str	r1, [r4, #4]
 8004940:	60a2      	str	r2, [r4, #8]
 8004942:	60e3      	str	r3, [r4, #12]
			strcpy(p->grade, "6C+");
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	33cc      	adds	r3, #204	; 0xcc
 8004948:	4a78      	ldr	r2, [pc, #480]	; (8004b2c <problem_fetch+0x380c>)
 800494a:	6810      	ldr	r0, [r2, #0]
 800494c:	6018      	str	r0, [r3, #0]
			break;
 800494e:	f016 ba2d 	b.w	801adac <problem_fetch+0x19a8c>
		case 175 :
			strcpy(p->name,"DAS SCHNITZEL ALT");
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	337c      	adds	r3, #124	; 0x7c
 8004956:	4a76      	ldr	r2, [pc, #472]	; (8004b30 <problem_fetch+0x3810>)
 8004958:	461d      	mov	r5, r3
 800495a:	4614      	mov	r4, r2
 800495c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800495e:	6028      	str	r0, [r5, #0]
 8004960:	6069      	str	r1, [r5, #4]
 8004962:	60aa      	str	r2, [r5, #8]
 8004964:	60eb      	str	r3, [r5, #12]
 8004966:	8823      	ldrh	r3, [r4, #0]
 8004968:	822b      	strh	r3, [r5, #16]
			p->moveSize = 6;
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	2206      	movs	r2, #6
 800496e:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"J,G,I,F,G,D");
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	3340      	adds	r3, #64	; 0x40
 8004974:	4a6f      	ldr	r2, [pc, #444]	; (8004b34 <problem_fetch+0x3814>)
 8004976:	461c      	mov	r4, r3
 8004978:	4613      	mov	r3, r2
 800497a:	cb07      	ldmia	r3!, {r0, r1, r2}
 800497c:	6020      	str	r0, [r4, #0]
 800497e:	6061      	str	r1, [r4, #4]
 8004980:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,6,9,13,14,18");
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	3304      	adds	r3, #4
 8004986:	4a6c      	ldr	r2, [pc, #432]	; (8004b38 <problem_fetch+0x3818>)
 8004988:	461c      	mov	r4, r3
 800498a:	4613      	mov	r3, r2
 800498c:	cb07      	ldmia	r3!, {r0, r1, r2}
 800498e:	6020      	str	r0, [r4, #0]
 8004990:	6061      	str	r1, [r4, #4]
 8004992:	60a2      	str	r2, [r4, #8]
 8004994:	881a      	ldrh	r2, [r3, #0]
 8004996:	789b      	ldrb	r3, [r3, #2]
 8004998:	81a2      	strh	r2, [r4, #12]
 800499a:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish, "s,s,d,d,d,e");
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	33d8      	adds	r3, #216	; 0xd8
 80049a0:	4a66      	ldr	r2, [pc, #408]	; (8004b3c <problem_fetch+0x381c>)
 80049a2:	461c      	mov	r4, r3
 80049a4:	4613      	mov	r3, r2
 80049a6:	cb07      	ldmia	r3!, {r0, r1, r2}
 80049a8:	6020      	str	r0, [r4, #0]
 80049aa:	6061      	str	r1, [r4, #4]
 80049ac:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade, "7B+");
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	33cc      	adds	r3, #204	; 0xcc
 80049b2:	4a63      	ldr	r2, [pc, #396]	; (8004b40 <problem_fetch+0x3820>)
 80049b4:	6810      	ldr	r0, [r2, #0]
 80049b6:	6018      	str	r0, [r3, #0]
			break;
 80049b8:	f016 b9f8 	b.w	801adac <problem_fetch+0x19a8c>
		case 176 :
			strcpy(p->name,"MOON SHADOW");
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	337c      	adds	r3, #124	; 0x7c
 80049c0:	4a60      	ldr	r2, [pc, #384]	; (8004b44 <problem_fetch+0x3824>)
 80049c2:	461c      	mov	r4, r3
 80049c4:	4613      	mov	r3, r2
 80049c6:	cb07      	ldmia	r3!, {r0, r1, r2}
 80049c8:	6020      	str	r0, [r4, #0]
 80049ca:	6061      	str	r1, [r4, #4]
 80049cc:	60a2      	str	r2, [r4, #8]
			p->moveSize = 8;
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	2208      	movs	r2, #8
 80049d2:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"C,E,C,F,I,D,G,I");
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	3340      	adds	r3, #64	; 0x40
 80049d8:	4a5b      	ldr	r2, [pc, #364]	; (8004b48 <problem_fetch+0x3828>)
 80049da:	461c      	mov	r4, r3
 80049dc:	4615      	mov	r5, r2
 80049de:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80049e0:	6020      	str	r0, [r4, #0]
 80049e2:	6061      	str	r1, [r4, #4]
 80049e4:	60a2      	str	r2, [r4, #8]
 80049e6:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,6,8,11,14,11,15,18");
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	3304      	adds	r3, #4
 80049ec:	4a57      	ldr	r2, [pc, #348]	; (8004b4c <problem_fetch+0x382c>)
 80049ee:	461d      	mov	r5, r3
 80049f0:	4614      	mov	r4, r2
 80049f2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80049f4:	6028      	str	r0, [r5, #0]
 80049f6:	6069      	str	r1, [r5, #4]
 80049f8:	60aa      	str	r2, [r5, #8]
 80049fa:	60eb      	str	r3, [r5, #12]
 80049fc:	6820      	ldr	r0, [r4, #0]
 80049fe:	6128      	str	r0, [r5, #16]
 8004a00:	7923      	ldrb	r3, [r4, #4]
 8004a02:	752b      	strb	r3, [r5, #20]
			strcpy(p->startFinish, "s,s,d,d,d,d,d,e");
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	33d8      	adds	r3, #216	; 0xd8
 8004a08:	4a47      	ldr	r2, [pc, #284]	; (8004b28 <problem_fetch+0x3808>)
 8004a0a:	461c      	mov	r4, r3
 8004a0c:	4615      	mov	r5, r2
 8004a0e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004a10:	6020      	str	r0, [r4, #0]
 8004a12:	6061      	str	r1, [r4, #4]
 8004a14:	60a2      	str	r2, [r4, #8]
 8004a16:	60e3      	str	r3, [r4, #12]
			strcpy(p->grade, "6C+");
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	33cc      	adds	r3, #204	; 0xcc
 8004a1c:	4a43      	ldr	r2, [pc, #268]	; (8004b2c <problem_fetch+0x380c>)
 8004a1e:	6810      	ldr	r0, [r2, #0]
 8004a20:	6018      	str	r0, [r3, #0]
			break;
 8004a22:	f016 b9c3 	b.w	801adac <problem_fetch+0x19a8c>
		case 177 :
			strcpy(p->name,"TIAMAT");
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	337c      	adds	r3, #124	; 0x7c
 8004a2a:	4a49      	ldr	r2, [pc, #292]	; (8004b50 <problem_fetch+0x3830>)
 8004a2c:	6810      	ldr	r0, [r2, #0]
 8004a2e:	6018      	str	r0, [r3, #0]
 8004a30:	8891      	ldrh	r1, [r2, #4]
 8004a32:	7992      	ldrb	r2, [r2, #6]
 8004a34:	8099      	strh	r1, [r3, #4]
 8004a36:	719a      	strb	r2, [r3, #6]
			p->moveSize = 7;
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	2207      	movs	r2, #7
 8004a3c:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"H,E,G,E,I,G,I");
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	3340      	adds	r3, #64	; 0x40
 8004a42:	4a44      	ldr	r2, [pc, #272]	; (8004b54 <problem_fetch+0x3834>)
 8004a44:	461c      	mov	r4, r3
 8004a46:	4613      	mov	r3, r2
 8004a48:	cb07      	ldmia	r3!, {r0, r1, r2}
 8004a4a:	6020      	str	r0, [r4, #0]
 8004a4c:	6061      	str	r1, [r4, #4]
 8004a4e:	60a2      	str	r2, [r4, #8]
 8004a50:	881b      	ldrh	r3, [r3, #0]
 8004a52:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,6,9,12,14,15,18");
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	3304      	adds	r3, #4
 8004a58:	4a3f      	ldr	r2, [pc, #252]	; (8004b58 <problem_fetch+0x3838>)
 8004a5a:	461d      	mov	r5, r3
 8004a5c:	4614      	mov	r4, r2
 8004a5e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004a60:	6028      	str	r0, [r5, #0]
 8004a62:	6069      	str	r1, [r5, #4]
 8004a64:	60aa      	str	r2, [r5, #8]
 8004a66:	60eb      	str	r3, [r5, #12]
 8004a68:	8823      	ldrh	r3, [r4, #0]
 8004a6a:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish, "s,s,d,d,d,d,e");
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	33d8      	adds	r3, #216	; 0xd8
 8004a70:	4a24      	ldr	r2, [pc, #144]	; (8004b04 <problem_fetch+0x37e4>)
 8004a72:	461c      	mov	r4, r3
 8004a74:	4613      	mov	r3, r2
 8004a76:	cb07      	ldmia	r3!, {r0, r1, r2}
 8004a78:	6020      	str	r0, [r4, #0]
 8004a7a:	6061      	str	r1, [r4, #4]
 8004a7c:	60a2      	str	r2, [r4, #8]
 8004a7e:	881b      	ldrh	r3, [r3, #0]
 8004a80:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade, "6B+");
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	33cc      	adds	r3, #204	; 0xcc
 8004a86:	4a20      	ldr	r2, [pc, #128]	; (8004b08 <problem_fetch+0x37e8>)
 8004a88:	6810      	ldr	r0, [r2, #0]
 8004a8a:	6018      	str	r0, [r3, #0]
			break;
 8004a8c:	f016 b98e 	b.w	801adac <problem_fetch+0x19a8c>
		case 178 :
			strcpy(p->name,"NEIL1");
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	337c      	adds	r3, #124	; 0x7c
 8004a94:	4a31      	ldr	r2, [pc, #196]	; (8004b5c <problem_fetch+0x383c>)
 8004a96:	6810      	ldr	r0, [r2, #0]
 8004a98:	6018      	str	r0, [r3, #0]
 8004a9a:	8892      	ldrh	r2, [r2, #4]
 8004a9c:	809a      	strh	r2, [r3, #4]
			p->moveSize = 8;
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	2208      	movs	r2, #8
 8004aa2:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"G,E,C,B,C,D,C,A");
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	3340      	adds	r3, #64	; 0x40
 8004aa8:	4a2d      	ldr	r2, [pc, #180]	; (8004b60 <problem_fetch+0x3840>)
 8004aaa:	461c      	mov	r4, r3
 8004aac:	4615      	mov	r5, r2
 8004aae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004ab0:	6020      	str	r0, [r4, #0]
 8004ab2:	6061      	str	r1, [r4, #4]
 8004ab4:	60a2      	str	r2, [r4, #8]
 8004ab6:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"6,6,8,10,13,11,16,18");
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	3304      	adds	r3, #4
 8004abc:	4a29      	ldr	r2, [pc, #164]	; (8004b64 <problem_fetch+0x3844>)
 8004abe:	461d      	mov	r5, r3
 8004ac0:	4614      	mov	r4, r2
 8004ac2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004ac4:	6028      	str	r0, [r5, #0]
 8004ac6:	6069      	str	r1, [r5, #4]
 8004ac8:	60aa      	str	r2, [r5, #8]
 8004aca:	60eb      	str	r3, [r5, #12]
 8004acc:	6820      	ldr	r0, [r4, #0]
 8004ace:	6128      	str	r0, [r5, #16]
 8004ad0:	7923      	ldrb	r3, [r4, #4]
 8004ad2:	752b      	strb	r3, [r5, #20]
			strcpy(p->startFinish, "s,s,d,d,d,d,d,e");
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	33d8      	adds	r3, #216	; 0xd8
 8004ad8:	4a13      	ldr	r2, [pc, #76]	; (8004b28 <problem_fetch+0x3808>)
 8004ada:	461c      	mov	r4, r3
 8004adc:	4615      	mov	r5, r2
 8004ade:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004ae0:	6020      	str	r0, [r4, #0]
 8004ae2:	6061      	str	r1, [r4, #4]
 8004ae4:	60a2      	str	r2, [r4, #8]
 8004ae6:	60e3      	str	r3, [r4, #12]
			strcpy(p->grade, "6B+");
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	33cc      	adds	r3, #204	; 0xcc
 8004aec:	4a06      	ldr	r2, [pc, #24]	; (8004b08 <problem_fetch+0x37e8>)
 8004aee:	6810      	ldr	r0, [r2, #0]
 8004af0:	6018      	str	r0, [r3, #0]
			break;
 8004af2:	f016 b95b 	b.w	801adac <problem_fetch+0x19a8c>
 8004af6:	bf00      	nop
 8004af8:	080222a4 	.word	0x080222a4
 8004afc:	080222b0 	.word	0x080222b0
 8004b00:	080222c0 	.word	0x080222c0
 8004b04:	080212a0 	.word	0x080212a0
 8004b08:	080212b0 	.word	0x080212b0
 8004b0c:	080222d4 	.word	0x080222d4
 8004b10:	080222e0 	.word	0x080222e0
 8004b14:	080222f0 	.word	0x080222f0
 8004b18:	08021494 	.word	0x08021494
 8004b1c:	08022304 	.word	0x08022304
 8004b20:	0802230c 	.word	0x0802230c
 8004b24:	0802231c 	.word	0x0802231c
 8004b28:	080214cc 	.word	0x080214cc
 8004b2c:	080213a8 	.word	0x080213a8
 8004b30:	08022330 	.word	0x08022330
 8004b34:	08022344 	.word	0x08022344
 8004b38:	08022350 	.word	0x08022350
 8004b3c:	08021910 	.word	0x08021910
 8004b40:	08021848 	.word	0x08021848
 8004b44:	08022360 	.word	0x08022360
 8004b48:	0802236c 	.word	0x0802236c
 8004b4c:	0802237c 	.word	0x0802237c
 8004b50:	08022394 	.word	0x08022394
 8004b54:	0802239c 	.word	0x0802239c
 8004b58:	080223ac 	.word	0x080223ac
 8004b5c:	080223c0 	.word	0x080223c0
 8004b60:	080223c8 	.word	0x080223c8
 8004b64:	080223d8 	.word	0x080223d8
		case 179 :
			strcpy(p->name,"サミシクナイト");
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	337c      	adds	r3, #124	; 0x7c
 8004b6c:	4ac1      	ldr	r2, [pc, #772]	; (8004e74 <problem_fetch+0x3b54>)
 8004b6e:	461d      	mov	r5, r3
 8004b70:	4614      	mov	r4, r2
 8004b72:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004b74:	6028      	str	r0, [r5, #0]
 8004b76:	6069      	str	r1, [r5, #4]
 8004b78:	60aa      	str	r2, [r5, #8]
 8004b7a:	60eb      	str	r3, [r5, #12]
 8004b7c:	6820      	ldr	r0, [r4, #0]
 8004b7e:	6128      	str	r0, [r5, #16]
 8004b80:	88a3      	ldrh	r3, [r4, #4]
 8004b82:	82ab      	strh	r3, [r5, #20]
			p->moveSize = 9;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	2209      	movs	r2, #9
 8004b88:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"E,H,G,B,E,C,G,G,I");
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	3340      	adds	r3, #64	; 0x40
 8004b8e:	4aba      	ldr	r2, [pc, #744]	; (8004e78 <problem_fetch+0x3b58>)
 8004b90:	461d      	mov	r5, r3
 8004b92:	4614      	mov	r4, r2
 8004b94:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004b96:	6028      	str	r0, [r5, #0]
 8004b98:	6069      	str	r1, [r5, #4]
 8004b9a:	60aa      	str	r2, [r5, #8]
 8004b9c:	60eb      	str	r3, [r5, #12]
 8004b9e:	8823      	ldrh	r3, [r4, #0]
 8004ba0:	822b      	strh	r3, [r5, #16]
			strcpy(p->moveNumbers,"6,5,9,10,12,13,15,17,18");
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	3304      	adds	r3, #4
 8004ba6:	4ab5      	ldr	r2, [pc, #724]	; (8004e7c <problem_fetch+0x3b5c>)
 8004ba8:	461d      	mov	r5, r3
 8004baa:	4614      	mov	r4, r2
 8004bac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004bae:	6028      	str	r0, [r5, #0]
 8004bb0:	6069      	str	r1, [r5, #4]
 8004bb2:	60aa      	str	r2, [r5, #8]
 8004bb4:	60eb      	str	r3, [r5, #12]
 8004bb6:	cc03      	ldmia	r4!, {r0, r1}
 8004bb8:	6128      	str	r0, [r5, #16]
 8004bba:	6169      	str	r1, [r5, #20]
			strcpy(p->startFinish, "s,s,d,d,d,d,d,d,e");
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	33d8      	adds	r3, #216	; 0xd8
 8004bc0:	4aaf      	ldr	r2, [pc, #700]	; (8004e80 <problem_fetch+0x3b60>)
 8004bc2:	461d      	mov	r5, r3
 8004bc4:	4614      	mov	r4, r2
 8004bc6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004bc8:	6028      	str	r0, [r5, #0]
 8004bca:	6069      	str	r1, [r5, #4]
 8004bcc:	60aa      	str	r2, [r5, #8]
 8004bce:	60eb      	str	r3, [r5, #12]
 8004bd0:	8823      	ldrh	r3, [r4, #0]
 8004bd2:	822b      	strh	r3, [r5, #16]
			strcpy(p->grade, "6B+");
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	33cc      	adds	r3, #204	; 0xcc
 8004bd8:	4aaa      	ldr	r2, [pc, #680]	; (8004e84 <problem_fetch+0x3b64>)
 8004bda:	6810      	ldr	r0, [r2, #0]
 8004bdc:	6018      	str	r0, [r3, #0]
			break;
 8004bde:	f016 b8e5 	b.w	801adac <problem_fetch+0x19a8c>
		case 18 :
			strcpy(p->name,"CRANKSHAFT");
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	337c      	adds	r3, #124	; 0x7c
 8004be6:	49a8      	ldr	r1, [pc, #672]	; (8004e88 <problem_fetch+0x3b68>)
 8004be8:	461a      	mov	r2, r3
 8004bea:	460b      	mov	r3, r1
 8004bec:	cb03      	ldmia	r3!, {r0, r1}
 8004bee:	6010      	str	r0, [r2, #0]
 8004bf0:	6051      	str	r1, [r2, #4]
 8004bf2:	8819      	ldrh	r1, [r3, #0]
 8004bf4:	789b      	ldrb	r3, [r3, #2]
 8004bf6:	8111      	strh	r1, [r2, #8]
 8004bf8:	7293      	strb	r3, [r2, #10]
			p->moveSize = 7;
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	2207      	movs	r2, #7
 8004bfe:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"C,H,G,F,E,B,D");
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	3340      	adds	r3, #64	; 0x40
 8004c04:	4aa1      	ldr	r2, [pc, #644]	; (8004e8c <problem_fetch+0x3b6c>)
 8004c06:	461c      	mov	r4, r3
 8004c08:	4613      	mov	r3, r2
 8004c0a:	cb07      	ldmia	r3!, {r0, r1, r2}
 8004c0c:	6020      	str	r0, [r4, #0]
 8004c0e:	6061      	str	r1, [r4, #4]
 8004c10:	60a2      	str	r2, [r4, #8]
 8004c12:	881b      	ldrh	r3, [r3, #0]
 8004c14:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,5,9,11,12,15,18");
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	3304      	adds	r3, #4
 8004c1a:	4a9d      	ldr	r2, [pc, #628]	; (8004e90 <problem_fetch+0x3b70>)
 8004c1c:	461d      	mov	r5, r3
 8004c1e:	4614      	mov	r4, r2
 8004c20:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004c22:	6028      	str	r0, [r5, #0]
 8004c24:	6069      	str	r1, [r5, #4]
 8004c26:	60aa      	str	r2, [r5, #8]
 8004c28:	60eb      	str	r3, [r5, #12]
 8004c2a:	8823      	ldrh	r3, [r4, #0]
 8004c2c:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish, "s,s,d,d,d,d,e");
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	33d8      	adds	r3, #216	; 0xd8
 8004c32:	4a98      	ldr	r2, [pc, #608]	; (8004e94 <problem_fetch+0x3b74>)
 8004c34:	461c      	mov	r4, r3
 8004c36:	4613      	mov	r3, r2
 8004c38:	cb07      	ldmia	r3!, {r0, r1, r2}
 8004c3a:	6020      	str	r0, [r4, #0]
 8004c3c:	6061      	str	r1, [r4, #4]
 8004c3e:	60a2      	str	r2, [r4, #8]
 8004c40:	881b      	ldrh	r3, [r3, #0]
 8004c42:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade, "6C");
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	33cc      	adds	r3, #204	; 0xcc
 8004c48:	4a93      	ldr	r2, [pc, #588]	; (8004e98 <problem_fetch+0x3b78>)
 8004c4a:	8811      	ldrh	r1, [r2, #0]
 8004c4c:	7892      	ldrb	r2, [r2, #2]
 8004c4e:	8019      	strh	r1, [r3, #0]
 8004c50:	709a      	strb	r2, [r3, #2]
			break;
 8004c52:	f016 b8ab 	b.w	801adac <problem_fetch+0x19a8c>
		case 180 :
			strcpy(p->name,"FISHIN FOR A COMPLIMENT");
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	337c      	adds	r3, #124	; 0x7c
 8004c5a:	4a90      	ldr	r2, [pc, #576]	; (8004e9c <problem_fetch+0x3b7c>)
 8004c5c:	461d      	mov	r5, r3
 8004c5e:	4614      	mov	r4, r2
 8004c60:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004c62:	6028      	str	r0, [r5, #0]
 8004c64:	6069      	str	r1, [r5, #4]
 8004c66:	60aa      	str	r2, [r5, #8]
 8004c68:	60eb      	str	r3, [r5, #12]
 8004c6a:	cc03      	ldmia	r4!, {r0, r1}
 8004c6c:	6128      	str	r0, [r5, #16]
 8004c6e:	6169      	str	r1, [r5, #20]
			p->moveSize = 5;
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	2205      	movs	r2, #5
 8004c74:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"G,E,E,C,D");
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	3340      	adds	r3, #64	; 0x40
 8004c7a:	4989      	ldr	r1, [pc, #548]	; (8004ea0 <problem_fetch+0x3b80>)
 8004c7c:	461a      	mov	r2, r3
 8004c7e:	460b      	mov	r3, r1
 8004c80:	cb03      	ldmia	r3!, {r0, r1}
 8004c82:	6010      	str	r0, [r2, #0]
 8004c84:	6051      	str	r1, [r2, #4]
 8004c86:	881b      	ldrh	r3, [r3, #0]
 8004c88:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"4,8,12,13,18");
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	3304      	adds	r3, #4
 8004c8e:	4a85      	ldr	r2, [pc, #532]	; (8004ea4 <problem_fetch+0x3b84>)
 8004c90:	461c      	mov	r4, r3
 8004c92:	4613      	mov	r3, r2
 8004c94:	cb07      	ldmia	r3!, {r0, r1, r2}
 8004c96:	6020      	str	r0, [r4, #0]
 8004c98:	6061      	str	r1, [r4, #4]
 8004c9a:	60a2      	str	r2, [r4, #8]
 8004c9c:	781b      	ldrb	r3, [r3, #0]
 8004c9e:	7323      	strb	r3, [r4, #12]
			strcpy(p->startFinish, "s,d,d,d,e");
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	33d8      	adds	r3, #216	; 0xd8
 8004ca4:	4980      	ldr	r1, [pc, #512]	; (8004ea8 <problem_fetch+0x3b88>)
 8004ca6:	461a      	mov	r2, r3
 8004ca8:	460b      	mov	r3, r1
 8004caa:	cb03      	ldmia	r3!, {r0, r1}
 8004cac:	6010      	str	r0, [r2, #0]
 8004cae:	6051      	str	r1, [r2, #4]
 8004cb0:	881b      	ldrh	r3, [r3, #0]
 8004cb2:	8113      	strh	r3, [r2, #8]
			strcpy(p->grade, "6C+");
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	33cc      	adds	r3, #204	; 0xcc
 8004cb8:	4a7c      	ldr	r2, [pc, #496]	; (8004eac <problem_fetch+0x3b8c>)
 8004cba:	6810      	ldr	r0, [r2, #0]
 8004cbc:	6018      	str	r0, [r3, #0]
			break;
 8004cbe:	f016 b875 	b.w	801adac <problem_fetch+0x19a8c>
		case 181 :
			strcpy(p->name,"ZLATI");
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	337c      	adds	r3, #124	; 0x7c
 8004cc6:	4a7a      	ldr	r2, [pc, #488]	; (8004eb0 <problem_fetch+0x3b90>)
 8004cc8:	6810      	ldr	r0, [r2, #0]
 8004cca:	6018      	str	r0, [r3, #0]
 8004ccc:	8892      	ldrh	r2, [r2, #4]
 8004cce:	809a      	strh	r2, [r3, #4]
			p->moveSize = 6;
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	2206      	movs	r2, #6
 8004cd4:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"J,G,H,C,E,D");
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	3340      	adds	r3, #64	; 0x40
 8004cda:	4a76      	ldr	r2, [pc, #472]	; (8004eb4 <problem_fetch+0x3b94>)
 8004cdc:	461c      	mov	r4, r3
 8004cde:	4613      	mov	r3, r2
 8004ce0:	cb07      	ldmia	r3!, {r0, r1, r2}
 8004ce2:	6020      	str	r0, [r4, #0]
 8004ce4:	6061      	str	r1, [r4, #4]
 8004ce6:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,9,10,13,12,18");
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	3304      	adds	r3, #4
 8004cec:	4a72      	ldr	r2, [pc, #456]	; (8004eb8 <problem_fetch+0x3b98>)
 8004cee:	461c      	mov	r4, r3
 8004cf0:	4615      	mov	r5, r2
 8004cf2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004cf4:	6020      	str	r0, [r4, #0]
 8004cf6:	6061      	str	r1, [r4, #4]
 8004cf8:	60a2      	str	r2, [r4, #8]
 8004cfa:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish, "s,d,d,d,d,e");
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	33d8      	adds	r3, #216	; 0xd8
 8004d00:	4a6e      	ldr	r2, [pc, #440]	; (8004ebc <problem_fetch+0x3b9c>)
 8004d02:	461c      	mov	r4, r3
 8004d04:	4613      	mov	r3, r2
 8004d06:	cb07      	ldmia	r3!, {r0, r1, r2}
 8004d08:	6020      	str	r0, [r4, #0]
 8004d0a:	6061      	str	r1, [r4, #4]
 8004d0c:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade, "6C+");
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	33cc      	adds	r3, #204	; 0xcc
 8004d12:	4a66      	ldr	r2, [pc, #408]	; (8004eac <problem_fetch+0x3b8c>)
 8004d14:	6810      	ldr	r0, [r2, #0]
 8004d16:	6018      	str	r0, [r3, #0]
			break;
 8004d18:	f016 b848 	b.w	801adac <problem_fetch+0x19a8c>
		case 182 :
			strcpy(p->name,"THE DAILY RATION");
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	337c      	adds	r3, #124	; 0x7c
 8004d20:	4a67      	ldr	r2, [pc, #412]	; (8004ec0 <problem_fetch+0x3ba0>)
 8004d22:	461d      	mov	r5, r3
 8004d24:	4614      	mov	r4, r2
 8004d26:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004d28:	6028      	str	r0, [r5, #0]
 8004d2a:	6069      	str	r1, [r5, #4]
 8004d2c:	60aa      	str	r2, [r5, #8]
 8004d2e:	60eb      	str	r3, [r5, #12]
 8004d30:	7823      	ldrb	r3, [r4, #0]
 8004d32:	742b      	strb	r3, [r5, #16]
			p->moveSize = 7;
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	2207      	movs	r2, #7
 8004d38:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"G,K,G,G,H,J,D");
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	3340      	adds	r3, #64	; 0x40
 8004d3e:	4a61      	ldr	r2, [pc, #388]	; (8004ec4 <problem_fetch+0x3ba4>)
 8004d40:	461c      	mov	r4, r3
 8004d42:	4613      	mov	r3, r2
 8004d44:	cb07      	ldmia	r3!, {r0, r1, r2}
 8004d46:	6020      	str	r0, [r4, #0]
 8004d48:	6061      	str	r1, [r4, #4]
 8004d4a:	60a2      	str	r2, [r4, #8]
 8004d4c:	881b      	ldrh	r3, [r3, #0]
 8004d4e:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,14,17,15,10,7,18");
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	3304      	adds	r3, #4
 8004d54:	4a5c      	ldr	r2, [pc, #368]	; (8004ec8 <problem_fetch+0x3ba8>)
 8004d56:	461d      	mov	r5, r3
 8004d58:	4614      	mov	r4, r2
 8004d5a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004d5c:	6028      	str	r0, [r5, #0]
 8004d5e:	6069      	str	r1, [r5, #4]
 8004d60:	60aa      	str	r2, [r5, #8]
 8004d62:	60eb      	str	r3, [r5, #12]
 8004d64:	8823      	ldrh	r3, [r4, #0]
 8004d66:	78a2      	ldrb	r2, [r4, #2]
 8004d68:	822b      	strh	r3, [r5, #16]
 8004d6a:	4613      	mov	r3, r2
 8004d6c:	74ab      	strb	r3, [r5, #18]
			strcpy(p->startFinish, "s,d,d,d,d,d,e");
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	33d8      	adds	r3, #216	; 0xd8
 8004d72:	4a56      	ldr	r2, [pc, #344]	; (8004ecc <problem_fetch+0x3bac>)
 8004d74:	461c      	mov	r4, r3
 8004d76:	4613      	mov	r3, r2
 8004d78:	cb07      	ldmia	r3!, {r0, r1, r2}
 8004d7a:	6020      	str	r0, [r4, #0]
 8004d7c:	6061      	str	r1, [r4, #4]
 8004d7e:	60a2      	str	r2, [r4, #8]
 8004d80:	881b      	ldrh	r3, [r3, #0]
 8004d82:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade, "6C+");
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	33cc      	adds	r3, #204	; 0xcc
 8004d88:	4a48      	ldr	r2, [pc, #288]	; (8004eac <problem_fetch+0x3b8c>)
 8004d8a:	6810      	ldr	r0, [r2, #0]
 8004d8c:	6018      	str	r0, [r3, #0]
			break;
 8004d8e:	f016 b80d 	b.w	801adac <problem_fetch+0x19a8c>
		case 183 :
			strcpy(p->name,"I LOVE ROCK AND ROLL");
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	337c      	adds	r3, #124	; 0x7c
 8004d96:	4a4e      	ldr	r2, [pc, #312]	; (8004ed0 <problem_fetch+0x3bb0>)
 8004d98:	461d      	mov	r5, r3
 8004d9a:	4614      	mov	r4, r2
 8004d9c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004d9e:	6028      	str	r0, [r5, #0]
 8004da0:	6069      	str	r1, [r5, #4]
 8004da2:	60aa      	str	r2, [r5, #8]
 8004da4:	60eb      	str	r3, [r5, #12]
 8004da6:	6820      	ldr	r0, [r4, #0]
 8004da8:	6128      	str	r0, [r5, #16]
 8004daa:	7923      	ldrb	r3, [r4, #4]
 8004dac:	752b      	strb	r3, [r5, #20]
			p->moveSize = 7;
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	2207      	movs	r2, #7
 8004db2:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"E,E,F,G,I,I,J");
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	3340      	adds	r3, #64	; 0x40
 8004db8:	4a46      	ldr	r2, [pc, #280]	; (8004ed4 <problem_fetch+0x3bb4>)
 8004dba:	461c      	mov	r4, r3
 8004dbc:	4613      	mov	r3, r2
 8004dbe:	cb07      	ldmia	r3!, {r0, r1, r2}
 8004dc0:	6020      	str	r0, [r4, #0]
 8004dc2:	6061      	str	r1, [r4, #4]
 8004dc4:	60a2      	str	r2, [r4, #8]
 8004dc6:	881b      	ldrh	r3, [r3, #0]
 8004dc8:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"8,16,11,9,14,18,5");
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	3304      	adds	r3, #4
 8004dce:	4a42      	ldr	r2, [pc, #264]	; (8004ed8 <problem_fetch+0x3bb8>)
 8004dd0:	461d      	mov	r5, r3
 8004dd2:	4614      	mov	r4, r2
 8004dd4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004dd6:	6028      	str	r0, [r5, #0]
 8004dd8:	6069      	str	r1, [r5, #4]
 8004dda:	60aa      	str	r2, [r5, #8]
 8004ddc:	60eb      	str	r3, [r5, #12]
 8004dde:	8823      	ldrh	r3, [r4, #0]
 8004de0:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish, "d,d,d,d,d,e,s");
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	33d8      	adds	r3, #216	; 0xd8
 8004de6:	4a3d      	ldr	r2, [pc, #244]	; (8004edc <problem_fetch+0x3bbc>)
 8004de8:	461c      	mov	r4, r3
 8004dea:	4613      	mov	r3, r2
 8004dec:	cb07      	ldmia	r3!, {r0, r1, r2}
 8004dee:	6020      	str	r0, [r4, #0]
 8004df0:	6061      	str	r1, [r4, #4]
 8004df2:	60a2      	str	r2, [r4, #8]
 8004df4:	881b      	ldrh	r3, [r3, #0]
 8004df6:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade, "6C+");
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	33cc      	adds	r3, #204	; 0xcc
 8004dfc:	4a2b      	ldr	r2, [pc, #172]	; (8004eac <problem_fetch+0x3b8c>)
 8004dfe:	6810      	ldr	r0, [r2, #0]
 8004e00:	6018      	str	r0, [r3, #0]
			break;
 8004e02:	f015 bfd3 	b.w	801adac <problem_fetch+0x19a8c>
		case 184 :
			strcpy(p->name,"WPOLOGIM 2");
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	337c      	adds	r3, #124	; 0x7c
 8004e0a:	4935      	ldr	r1, [pc, #212]	; (8004ee0 <problem_fetch+0x3bc0>)
 8004e0c:	461a      	mov	r2, r3
 8004e0e:	460b      	mov	r3, r1
 8004e10:	cb03      	ldmia	r3!, {r0, r1}
 8004e12:	6010      	str	r0, [r2, #0]
 8004e14:	6051      	str	r1, [r2, #4]
 8004e16:	8819      	ldrh	r1, [r3, #0]
 8004e18:	789b      	ldrb	r3, [r3, #2]
 8004e1a:	8111      	strh	r1, [r2, #8]
 8004e1c:	7293      	strb	r3, [r2, #10]
			p->moveSize = 6;
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	2206      	movs	r2, #6
 8004e22:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"J,E,I,H,I,D");
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	3340      	adds	r3, #64	; 0x40
 8004e28:	4a2e      	ldr	r2, [pc, #184]	; (8004ee4 <problem_fetch+0x3bc4>)
 8004e2a:	461c      	mov	r4, r3
 8004e2c:	4613      	mov	r3, r2
 8004e2e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8004e30:	6020      	str	r0, [r4, #0]
 8004e32:	6061      	str	r1, [r4, #4]
 8004e34:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,8,9,12,15,18");
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	3304      	adds	r3, #4
 8004e3a:	4a2b      	ldr	r2, [pc, #172]	; (8004ee8 <problem_fetch+0x3bc8>)
 8004e3c:	461c      	mov	r4, r3
 8004e3e:	4613      	mov	r3, r2
 8004e40:	cb07      	ldmia	r3!, {r0, r1, r2}
 8004e42:	6020      	str	r0, [r4, #0]
 8004e44:	6061      	str	r1, [r4, #4]
 8004e46:	60a2      	str	r2, [r4, #8]
 8004e48:	881a      	ldrh	r2, [r3, #0]
 8004e4a:	789b      	ldrb	r3, [r3, #2]
 8004e4c:	81a2      	strh	r2, [r4, #12]
 8004e4e:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish, "s,d,d,d,d,e");
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	33d8      	adds	r3, #216	; 0xd8
 8004e54:	4a19      	ldr	r2, [pc, #100]	; (8004ebc <problem_fetch+0x3b9c>)
 8004e56:	461c      	mov	r4, r3
 8004e58:	4613      	mov	r3, r2
 8004e5a:	cb07      	ldmia	r3!, {r0, r1, r2}
 8004e5c:	6020      	str	r0, [r4, #0]
 8004e5e:	6061      	str	r1, [r4, #4]
 8004e60:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade, "7B");
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	33cc      	adds	r3, #204	; 0xcc
 8004e66:	4a21      	ldr	r2, [pc, #132]	; (8004eec <problem_fetch+0x3bcc>)
 8004e68:	8811      	ldrh	r1, [r2, #0]
 8004e6a:	7892      	ldrb	r2, [r2, #2]
 8004e6c:	8019      	strh	r1, [r3, #0]
 8004e6e:	709a      	strb	r2, [r3, #2]
			break;
 8004e70:	f015 bf9c 	b.w	801adac <problem_fetch+0x19a8c>
 8004e74:	080223f0 	.word	0x080223f0
 8004e78:	08022408 	.word	0x08022408
 8004e7c:	0802241c 	.word	0x0802241c
 8004e80:	0802187c 	.word	0x0802187c
 8004e84:	080212b0 	.word	0x080212b0
 8004e88:	08022434 	.word	0x08022434
 8004e8c:	08022440 	.word	0x08022440
 8004e90:	08022450 	.word	0x08022450
 8004e94:	080212a0 	.word	0x080212a0
 8004e98:	08021370 	.word	0x08021370
 8004e9c:	08022464 	.word	0x08022464
 8004ea0:	0802247c 	.word	0x0802247c
 8004ea4:	08022488 	.word	0x08022488
 8004ea8:	08021320 	.word	0x08021320
 8004eac:	080213a8 	.word	0x080213a8
 8004eb0:	08022498 	.word	0x08022498
 8004eb4:	080224a0 	.word	0x080224a0
 8004eb8:	080224ac 	.word	0x080224ac
 8004ebc:	0802139c 	.word	0x0802139c
 8004ec0:	080224bc 	.word	0x080224bc
 8004ec4:	080224d0 	.word	0x080224d0
 8004ec8:	080224e0 	.word	0x080224e0
 8004ecc:	08021494 	.word	0x08021494
 8004ed0:	080224f4 	.word	0x080224f4
 8004ed4:	0802250c 	.word	0x0802250c
 8004ed8:	0802251c 	.word	0x0802251c
 8004edc:	08022530 	.word	0x08022530
 8004ee0:	08022540 	.word	0x08022540
 8004ee4:	0802254c 	.word	0x0802254c
 8004ee8:	08022558 	.word	0x08022558
 8004eec:	0802132c 	.word	0x0802132c
		case 185 :
			strcpy(p->name,"CAPTAIN RILEY");
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	337c      	adds	r3, #124	; 0x7c
 8004ef4:	4ab4      	ldr	r2, [pc, #720]	; (80051c8 <problem_fetch+0x3ea8>)
 8004ef6:	461c      	mov	r4, r3
 8004ef8:	4613      	mov	r3, r2
 8004efa:	cb07      	ldmia	r3!, {r0, r1, r2}
 8004efc:	6020      	str	r0, [r4, #0]
 8004efe:	6061      	str	r1, [r4, #4]
 8004f00:	60a2      	str	r2, [r4, #8]
 8004f02:	881b      	ldrh	r3, [r3, #0]
 8004f04:	81a3      	strh	r3, [r4, #12]
			p->moveSize = 6;
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	2206      	movs	r2, #6
 8004f0a:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"G,E,F,C,E,A");
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	3340      	adds	r3, #64	; 0x40
 8004f10:	4aae      	ldr	r2, [pc, #696]	; (80051cc <problem_fetch+0x3eac>)
 8004f12:	461c      	mov	r4, r3
 8004f14:	4613      	mov	r3, r2
 8004f16:	cb07      	ldmia	r3!, {r0, r1, r2}
 8004f18:	6020      	str	r0, [r4, #0]
 8004f1a:	6061      	str	r1, [r4, #4]
 8004f1c:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,8,11,13,16,18");
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	3304      	adds	r3, #4
 8004f22:	4aab      	ldr	r2, [pc, #684]	; (80051d0 <problem_fetch+0x3eb0>)
 8004f24:	461c      	mov	r4, r3
 8004f26:	4615      	mov	r5, r2
 8004f28:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004f2a:	6020      	str	r0, [r4, #0]
 8004f2c:	6061      	str	r1, [r4, #4]
 8004f2e:	60a2      	str	r2, [r4, #8]
 8004f30:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish, "s,d,d,d,d,e");
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	33d8      	adds	r3, #216	; 0xd8
 8004f36:	4aa7      	ldr	r2, [pc, #668]	; (80051d4 <problem_fetch+0x3eb4>)
 8004f38:	461c      	mov	r4, r3
 8004f3a:	4613      	mov	r3, r2
 8004f3c:	cb07      	ldmia	r3!, {r0, r1, r2}
 8004f3e:	6020      	str	r0, [r4, #0]
 8004f40:	6061      	str	r1, [r4, #4]
 8004f42:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade, "6B+");
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	33cc      	adds	r3, #204	; 0xcc
 8004f48:	4aa3      	ldr	r2, [pc, #652]	; (80051d8 <problem_fetch+0x3eb8>)
 8004f4a:	6810      	ldr	r0, [r2, #0]
 8004f4c:	6018      	str	r0, [r3, #0]
			break;
 8004f4e:	f015 bf2d 	b.w	801adac <problem_fetch+0x19a8c>
		case 186 :
			strcpy(p->name,"BLACK IS BACK");
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	337c      	adds	r3, #124	; 0x7c
 8004f56:	4aa1      	ldr	r2, [pc, #644]	; (80051dc <problem_fetch+0x3ebc>)
 8004f58:	461c      	mov	r4, r3
 8004f5a:	4613      	mov	r3, r2
 8004f5c:	cb07      	ldmia	r3!, {r0, r1, r2}
 8004f5e:	6020      	str	r0, [r4, #0]
 8004f60:	6061      	str	r1, [r4, #4]
 8004f62:	60a2      	str	r2, [r4, #8]
 8004f64:	881b      	ldrh	r3, [r3, #0]
 8004f66:	81a3      	strh	r3, [r4, #12]
			p->moveSize = 7;
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	2207      	movs	r2, #7
 8004f6c:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"J,H,G,B,C,I,D");
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	3340      	adds	r3, #64	; 0x40
 8004f72:	4a9b      	ldr	r2, [pc, #620]	; (80051e0 <problem_fetch+0x3ec0>)
 8004f74:	461c      	mov	r4, r3
 8004f76:	4613      	mov	r3, r2
 8004f78:	cb07      	ldmia	r3!, {r0, r1, r2}
 8004f7a:	6020      	str	r0, [r4, #0]
 8004f7c:	6061      	str	r1, [r4, #4]
 8004f7e:	60a2      	str	r2, [r4, #8]
 8004f80:	881b      	ldrh	r3, [r3, #0]
 8004f82:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,8,9,10,13,14,18");
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	3304      	adds	r3, #4
 8004f88:	4a96      	ldr	r2, [pc, #600]	; (80051e4 <problem_fetch+0x3ec4>)
 8004f8a:	461d      	mov	r5, r3
 8004f8c:	4614      	mov	r4, r2
 8004f8e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004f90:	6028      	str	r0, [r5, #0]
 8004f92:	6069      	str	r1, [r5, #4]
 8004f94:	60aa      	str	r2, [r5, #8]
 8004f96:	60eb      	str	r3, [r5, #12]
 8004f98:	8823      	ldrh	r3, [r4, #0]
 8004f9a:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish, "s,d,d,d,d,d,e");
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	33d8      	adds	r3, #216	; 0xd8
 8004fa0:	4a91      	ldr	r2, [pc, #580]	; (80051e8 <problem_fetch+0x3ec8>)
 8004fa2:	461c      	mov	r4, r3
 8004fa4:	4613      	mov	r3, r2
 8004fa6:	cb07      	ldmia	r3!, {r0, r1, r2}
 8004fa8:	6020      	str	r0, [r4, #0]
 8004faa:	6061      	str	r1, [r4, #4]
 8004fac:	60a2      	str	r2, [r4, #8]
 8004fae:	881b      	ldrh	r3, [r3, #0]
 8004fb0:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade, "6C+");
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	33cc      	adds	r3, #204	; 0xcc
 8004fb6:	4a8d      	ldr	r2, [pc, #564]	; (80051ec <problem_fetch+0x3ecc>)
 8004fb8:	6810      	ldr	r0, [r2, #0]
 8004fba:	6018      	str	r0, [r3, #0]
			break;
 8004fbc:	f015 bef6 	b.w	801adac <problem_fetch+0x19a8c>
		case 187 :
			strcpy(p->name,"CALCIUM20");
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	337c      	adds	r3, #124	; 0x7c
 8004fc4:	498a      	ldr	r1, [pc, #552]	; (80051f0 <problem_fetch+0x3ed0>)
 8004fc6:	461a      	mov	r2, r3
 8004fc8:	460b      	mov	r3, r1
 8004fca:	cb03      	ldmia	r3!, {r0, r1}
 8004fcc:	6010      	str	r0, [r2, #0]
 8004fce:	6051      	str	r1, [r2, #4]
 8004fd0:	881b      	ldrh	r3, [r3, #0]
 8004fd2:	8113      	strh	r3, [r2, #8]
			p->moveSize = 7;
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	2207      	movs	r2, #7
 8004fd8:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"B,G,G,B,D,B,D");
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	3340      	adds	r3, #64	; 0x40
 8004fde:	4a85      	ldr	r2, [pc, #532]	; (80051f4 <problem_fetch+0x3ed4>)
 8004fe0:	461c      	mov	r4, r3
 8004fe2:	4613      	mov	r3, r2
 8004fe4:	cb07      	ldmia	r3!, {r0, r1, r2}
 8004fe6:	6020      	str	r0, [r4, #0]
 8004fe8:	6061      	str	r1, [r4, #4]
 8004fea:	60a2      	str	r2, [r4, #8]
 8004fec:	881b      	ldrh	r3, [r3, #0]
 8004fee:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"6,4,9,10,15,15,18");
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	3304      	adds	r3, #4
 8004ff4:	4a80      	ldr	r2, [pc, #512]	; (80051f8 <problem_fetch+0x3ed8>)
 8004ff6:	461d      	mov	r5, r3
 8004ff8:	4614      	mov	r4, r2
 8004ffa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004ffc:	6028      	str	r0, [r5, #0]
 8004ffe:	6069      	str	r1, [r5, #4]
 8005000:	60aa      	str	r2, [r5, #8]
 8005002:	60eb      	str	r3, [r5, #12]
 8005004:	8823      	ldrh	r3, [r4, #0]
 8005006:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish, "s,s,d,d,d,d,e");
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	33d8      	adds	r3, #216	; 0xd8
 800500c:	4a7b      	ldr	r2, [pc, #492]	; (80051fc <problem_fetch+0x3edc>)
 800500e:	461c      	mov	r4, r3
 8005010:	4613      	mov	r3, r2
 8005012:	cb07      	ldmia	r3!, {r0, r1, r2}
 8005014:	6020      	str	r0, [r4, #0]
 8005016:	6061      	str	r1, [r4, #4]
 8005018:	60a2      	str	r2, [r4, #8]
 800501a:	881b      	ldrh	r3, [r3, #0]
 800501c:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade, "6C+");
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	33cc      	adds	r3, #204	; 0xcc
 8005022:	4a72      	ldr	r2, [pc, #456]	; (80051ec <problem_fetch+0x3ecc>)
 8005024:	6810      	ldr	r0, [r2, #0]
 8005026:	6018      	str	r0, [r3, #0]
			break;
 8005028:	f015 bec0 	b.w	801adac <problem_fetch+0x19a8c>
		case 188 :
			strcpy(p->name,"GOOD LIFE");
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	337c      	adds	r3, #124	; 0x7c
 8005030:	4973      	ldr	r1, [pc, #460]	; (8005200 <problem_fetch+0x3ee0>)
 8005032:	461a      	mov	r2, r3
 8005034:	460b      	mov	r3, r1
 8005036:	cb03      	ldmia	r3!, {r0, r1}
 8005038:	6010      	str	r0, [r2, #0]
 800503a:	6051      	str	r1, [r2, #4]
 800503c:	881b      	ldrh	r3, [r3, #0]
 800503e:	8113      	strh	r3, [r2, #8]
			p->moveSize = 6;
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	2206      	movs	r2, #6
 8005044:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"J,H,C,D,F,A");
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	3340      	adds	r3, #64	; 0x40
 800504a:	4a6e      	ldr	r2, [pc, #440]	; (8005204 <problem_fetch+0x3ee4>)
 800504c:	461c      	mov	r4, r3
 800504e:	4613      	mov	r3, r2
 8005050:	cb07      	ldmia	r3!, {r0, r1, r2}
 8005052:	6020      	str	r0, [r4, #0]
 8005054:	6061      	str	r1, [r4, #4]
 8005056:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,8,8,15,11,18");
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	3304      	adds	r3, #4
 800505c:	4a6a      	ldr	r2, [pc, #424]	; (8005208 <problem_fetch+0x3ee8>)
 800505e:	461c      	mov	r4, r3
 8005060:	4613      	mov	r3, r2
 8005062:	cb07      	ldmia	r3!, {r0, r1, r2}
 8005064:	6020      	str	r0, [r4, #0]
 8005066:	6061      	str	r1, [r4, #4]
 8005068:	60a2      	str	r2, [r4, #8]
 800506a:	881a      	ldrh	r2, [r3, #0]
 800506c:	789b      	ldrb	r3, [r3, #2]
 800506e:	81a2      	strh	r2, [r4, #12]
 8005070:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish, "s,d,d,d,d,e");
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	33d8      	adds	r3, #216	; 0xd8
 8005076:	4a57      	ldr	r2, [pc, #348]	; (80051d4 <problem_fetch+0x3eb4>)
 8005078:	461c      	mov	r4, r3
 800507a:	4613      	mov	r3, r2
 800507c:	cb07      	ldmia	r3!, {r0, r1, r2}
 800507e:	6020      	str	r0, [r4, #0]
 8005080:	6061      	str	r1, [r4, #4]
 8005082:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade, "7A+");
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	33cc      	adds	r3, #204	; 0xcc
 8005088:	4a60      	ldr	r2, [pc, #384]	; (800520c <problem_fetch+0x3eec>)
 800508a:	6810      	ldr	r0, [r2, #0]
 800508c:	6018      	str	r0, [r3, #0]
			break;
 800508e:	f015 be8d 	b.w	801adac <problem_fetch+0x19a8c>
		case 189 :
			strcpy(p->name,"BLACK MAGIC");
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	337c      	adds	r3, #124	; 0x7c
 8005096:	4a5e      	ldr	r2, [pc, #376]	; (8005210 <problem_fetch+0x3ef0>)
 8005098:	461c      	mov	r4, r3
 800509a:	4613      	mov	r3, r2
 800509c:	cb07      	ldmia	r3!, {r0, r1, r2}
 800509e:	6020      	str	r0, [r4, #0]
 80050a0:	6061      	str	r1, [r4, #4]
 80050a2:	60a2      	str	r2, [r4, #8]
			p->moveSize = 7;
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	2207      	movs	r2, #7
 80050a8:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"C,G,C,H,F,H,I");
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	3340      	adds	r3, #64	; 0x40
 80050ae:	4a59      	ldr	r2, [pc, #356]	; (8005214 <problem_fetch+0x3ef4>)
 80050b0:	461c      	mov	r4, r3
 80050b2:	4613      	mov	r3, r2
 80050b4:	cb07      	ldmia	r3!, {r0, r1, r2}
 80050b6:	6020      	str	r0, [r4, #0]
 80050b8:	6061      	str	r1, [r4, #4]
 80050ba:	60a2      	str	r2, [r4, #8]
 80050bc:	881b      	ldrh	r3, [r3, #0]
 80050be:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,4,8,10,13,16,18");
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	3304      	adds	r3, #4
 80050c4:	4a54      	ldr	r2, [pc, #336]	; (8005218 <problem_fetch+0x3ef8>)
 80050c6:	461d      	mov	r5, r3
 80050c8:	4614      	mov	r4, r2
 80050ca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80050cc:	6028      	str	r0, [r5, #0]
 80050ce:	6069      	str	r1, [r5, #4]
 80050d0:	60aa      	str	r2, [r5, #8]
 80050d2:	60eb      	str	r3, [r5, #12]
 80050d4:	8823      	ldrh	r3, [r4, #0]
 80050d6:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish, "s,d,d,d,d,d,e");
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	33d8      	adds	r3, #216	; 0xd8
 80050dc:	4a42      	ldr	r2, [pc, #264]	; (80051e8 <problem_fetch+0x3ec8>)
 80050de:	461c      	mov	r4, r3
 80050e0:	4613      	mov	r3, r2
 80050e2:	cb07      	ldmia	r3!, {r0, r1, r2}
 80050e4:	6020      	str	r0, [r4, #0]
 80050e6:	6061      	str	r1, [r4, #4]
 80050e8:	60a2      	str	r2, [r4, #8]
 80050ea:	881b      	ldrh	r3, [r3, #0]
 80050ec:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade, "7A+");
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	33cc      	adds	r3, #204	; 0xcc
 80050f2:	4a46      	ldr	r2, [pc, #280]	; (800520c <problem_fetch+0x3eec>)
 80050f4:	6810      	ldr	r0, [r2, #0]
 80050f6:	6018      	str	r0, [r3, #0]
			break;
 80050f8:	f015 be58 	b.w	801adac <problem_fetch+0x19a8c>
		case 19 :
			strcpy(p->name,"AMIT 1.1");
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	337c      	adds	r3, #124	; 0x7c
 8005100:	4946      	ldr	r1, [pc, #280]	; (800521c <problem_fetch+0x3efc>)
 8005102:	461a      	mov	r2, r3
 8005104:	460b      	mov	r3, r1
 8005106:	cb03      	ldmia	r3!, {r0, r1}
 8005108:	6010      	str	r0, [r2, #0]
 800510a:	6051      	str	r1, [r2, #4]
 800510c:	781b      	ldrb	r3, [r3, #0]
 800510e:	7213      	strb	r3, [r2, #8]
			p->moveSize = 6;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	2206      	movs	r2, #6
 8005114:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"G,H,C,E,D,D");
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	3340      	adds	r3, #64	; 0x40
 800511a:	4a41      	ldr	r2, [pc, #260]	; (8005220 <problem_fetch+0x3f00>)
 800511c:	461c      	mov	r4, r3
 800511e:	4613      	mov	r3, r2
 8005120:	cb07      	ldmia	r3!, {r0, r1, r2}
 8005122:	6020      	str	r0, [r4, #0]
 8005124:	6061      	str	r1, [r4, #4]
 8005126:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,8,8,12,15,18");
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	3304      	adds	r3, #4
 800512c:	4a3d      	ldr	r2, [pc, #244]	; (8005224 <problem_fetch+0x3f04>)
 800512e:	461c      	mov	r4, r3
 8005130:	4613      	mov	r3, r2
 8005132:	cb07      	ldmia	r3!, {r0, r1, r2}
 8005134:	6020      	str	r0, [r4, #0]
 8005136:	6061      	str	r1, [r4, #4]
 8005138:	60a2      	str	r2, [r4, #8]
 800513a:	881a      	ldrh	r2, [r3, #0]
 800513c:	789b      	ldrb	r3, [r3, #2]
 800513e:	81a2      	strh	r2, [r4, #12]
 8005140:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish, "s,d,d,d,d,e");
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	33d8      	adds	r3, #216	; 0xd8
 8005146:	4a23      	ldr	r2, [pc, #140]	; (80051d4 <problem_fetch+0x3eb4>)
 8005148:	461c      	mov	r4, r3
 800514a:	4613      	mov	r3, r2
 800514c:	cb07      	ldmia	r3!, {r0, r1, r2}
 800514e:	6020      	str	r0, [r4, #0]
 8005150:	6061      	str	r1, [r4, #4]
 8005152:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade, "6C");
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	33cc      	adds	r3, #204	; 0xcc
 8005158:	4a33      	ldr	r2, [pc, #204]	; (8005228 <problem_fetch+0x3f08>)
 800515a:	8811      	ldrh	r1, [r2, #0]
 800515c:	7892      	ldrb	r2, [r2, #2]
 800515e:	8019      	strh	r1, [r3, #0]
 8005160:	709a      	strb	r2, [r3, #2]
			break;
 8005162:	f015 be23 	b.w	801adac <problem_fetch+0x19a8c>
		case 190 :
			strcpy(p->name,"GORILLA NR.2");
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	337c      	adds	r3, #124	; 0x7c
 800516a:	4a30      	ldr	r2, [pc, #192]	; (800522c <problem_fetch+0x3f0c>)
 800516c:	461c      	mov	r4, r3
 800516e:	4613      	mov	r3, r2
 8005170:	cb07      	ldmia	r3!, {r0, r1, r2}
 8005172:	6020      	str	r0, [r4, #0]
 8005174:	6061      	str	r1, [r4, #4]
 8005176:	60a2      	str	r2, [r4, #8]
 8005178:	781b      	ldrb	r3, [r3, #0]
 800517a:	7323      	strb	r3, [r4, #12]
			p->moveSize = 4;
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	2204      	movs	r2, #4
 8005180:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"E,I,G,D");
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	3340      	adds	r3, #64	; 0x40
 8005186:	492a      	ldr	r1, [pc, #168]	; (8005230 <problem_fetch+0x3f10>)
 8005188:	461a      	mov	r2, r3
 800518a:	460b      	mov	r3, r1
 800518c:	cb03      	ldmia	r3!, {r0, r1}
 800518e:	6010      	str	r0, [r2, #0]
 8005190:	6051      	str	r1, [r2, #4]
			strcpy(p->moveNumbers,"6,10,14,18");
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	3304      	adds	r3, #4
 8005196:	4927      	ldr	r1, [pc, #156]	; (8005234 <problem_fetch+0x3f14>)
 8005198:	461a      	mov	r2, r3
 800519a:	460b      	mov	r3, r1
 800519c:	cb03      	ldmia	r3!, {r0, r1}
 800519e:	6010      	str	r0, [r2, #0]
 80051a0:	6051      	str	r1, [r2, #4]
 80051a2:	8819      	ldrh	r1, [r3, #0]
 80051a4:	789b      	ldrb	r3, [r3, #2]
 80051a6:	8111      	strh	r1, [r2, #8]
 80051a8:	7293      	strb	r3, [r2, #10]
			strcpy(p->startFinish, "s,d,d,e");
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	33d8      	adds	r3, #216	; 0xd8
 80051ae:	4922      	ldr	r1, [pc, #136]	; (8005238 <problem_fetch+0x3f18>)
 80051b0:	461a      	mov	r2, r3
 80051b2:	460b      	mov	r3, r1
 80051b4:	cb03      	ldmia	r3!, {r0, r1}
 80051b6:	6010      	str	r0, [r2, #0]
 80051b8:	6051      	str	r1, [r2, #4]
			strcpy(p->grade, "7A+");
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	33cc      	adds	r3, #204	; 0xcc
 80051be:	4a13      	ldr	r2, [pc, #76]	; (800520c <problem_fetch+0x3eec>)
 80051c0:	6810      	ldr	r0, [r2, #0]
 80051c2:	6018      	str	r0, [r3, #0]
			break;
 80051c4:	f015 bdf2 	b.w	801adac <problem_fetch+0x19a8c>
 80051c8:	08022568 	.word	0x08022568
 80051cc:	08022578 	.word	0x08022578
 80051d0:	08022584 	.word	0x08022584
 80051d4:	0802139c 	.word	0x0802139c
 80051d8:	080212b0 	.word	0x080212b0
 80051dc:	08022594 	.word	0x08022594
 80051e0:	080225a4 	.word	0x080225a4
 80051e4:	080225b4 	.word	0x080225b4
 80051e8:	08021494 	.word	0x08021494
 80051ec:	080213a8 	.word	0x080213a8
 80051f0:	080225c8 	.word	0x080225c8
 80051f4:	080225d4 	.word	0x080225d4
 80051f8:	080225e4 	.word	0x080225e4
 80051fc:	080212a0 	.word	0x080212a0
 8005200:	080225f8 	.word	0x080225f8
 8005204:	08022604 	.word	0x08022604
 8005208:	08022610 	.word	0x08022610
 800520c:	08021424 	.word	0x08021424
 8005210:	08022620 	.word	0x08022620
 8005214:	0802262c 	.word	0x0802262c
 8005218:	0802263c 	.word	0x0802263c
 800521c:	08022650 	.word	0x08022650
 8005220:	0802265c 	.word	0x0802265c
 8005224:	08022668 	.word	0x08022668
 8005228:	08021370 	.word	0x08021370
 800522c:	08022678 	.word	0x08022678
 8005230:	08022688 	.word	0x08022688
 8005234:	08022690 	.word	0x08022690
 8005238:	08022028 	.word	0x08022028
		case 191 :
			strcpy(p->name,"BLACK KISS BLACK");
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	337c      	adds	r3, #124	; 0x7c
 8005240:	4aba      	ldr	r2, [pc, #744]	; (800552c <problem_fetch+0x420c>)
 8005242:	461d      	mov	r5, r3
 8005244:	4614      	mov	r4, r2
 8005246:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005248:	6028      	str	r0, [r5, #0]
 800524a:	6069      	str	r1, [r5, #4]
 800524c:	60aa      	str	r2, [r5, #8]
 800524e:	60eb      	str	r3, [r5, #12]
 8005250:	7823      	ldrb	r3, [r4, #0]
 8005252:	742b      	strb	r3, [r5, #16]
			p->moveSize = 8;
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	2208      	movs	r2, #8
 8005258:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"G,H,C,H,C,G,E,I");
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	3340      	adds	r3, #64	; 0x40
 800525e:	4ab4      	ldr	r2, [pc, #720]	; (8005530 <problem_fetch+0x4210>)
 8005260:	461c      	mov	r4, r3
 8005262:	4615      	mov	r5, r2
 8005264:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005266:	6020      	str	r0, [r4, #0]
 8005268:	6061      	str	r1, [r4, #4]
 800526a:	60a2      	str	r2, [r4, #8]
 800526c:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,8,8,10,13,14,16,18");
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	3304      	adds	r3, #4
 8005272:	4ab0      	ldr	r2, [pc, #704]	; (8005534 <problem_fetch+0x4214>)
 8005274:	461d      	mov	r5, r3
 8005276:	4614      	mov	r4, r2
 8005278:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800527a:	6028      	str	r0, [r5, #0]
 800527c:	6069      	str	r1, [r5, #4]
 800527e:	60aa      	str	r2, [r5, #8]
 8005280:	60eb      	str	r3, [r5, #12]
 8005282:	6820      	ldr	r0, [r4, #0]
 8005284:	6128      	str	r0, [r5, #16]
 8005286:	7923      	ldrb	r3, [r4, #4]
 8005288:	752b      	strb	r3, [r5, #20]
			strcpy(p->startFinish, "s,d,d,d,d,d,d,e");
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	33d8      	adds	r3, #216	; 0xd8
 800528e:	4aaa      	ldr	r2, [pc, #680]	; (8005538 <problem_fetch+0x4218>)
 8005290:	461c      	mov	r4, r3
 8005292:	4615      	mov	r5, r2
 8005294:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005296:	6020      	str	r0, [r4, #0]
 8005298:	6061      	str	r1, [r4, #4]
 800529a:	60a2      	str	r2, [r4, #8]
 800529c:	60e3      	str	r3, [r4, #12]
			strcpy(p->grade, "6C");
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	33cc      	adds	r3, #204	; 0xcc
 80052a2:	4aa6      	ldr	r2, [pc, #664]	; (800553c <problem_fetch+0x421c>)
 80052a4:	8811      	ldrh	r1, [r2, #0]
 80052a6:	7892      	ldrb	r2, [r2, #2]
 80052a8:	8019      	strh	r1, [r3, #0]
 80052aa:	709a      	strb	r2, [r3, #2]
			break;
 80052ac:	f015 bd7e 	b.w	801adac <problem_fetch+0x19a8c>
		case 192 :
			strcpy(p->name,"BLACK CRAPPIE");
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	337c      	adds	r3, #124	; 0x7c
 80052b4:	4aa2      	ldr	r2, [pc, #648]	; (8005540 <problem_fetch+0x4220>)
 80052b6:	461c      	mov	r4, r3
 80052b8:	4613      	mov	r3, r2
 80052ba:	cb07      	ldmia	r3!, {r0, r1, r2}
 80052bc:	6020      	str	r0, [r4, #0]
 80052be:	6061      	str	r1, [r4, #4]
 80052c0:	60a2      	str	r2, [r4, #8]
 80052c2:	881b      	ldrh	r3, [r3, #0]
 80052c4:	81a3      	strh	r3, [r4, #12]
			p->moveSize = 6;
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	2206      	movs	r2, #6
 80052ca:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"G,G,A,E,A,D");
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	3340      	adds	r3, #64	; 0x40
 80052d0:	4a9c      	ldr	r2, [pc, #624]	; (8005544 <problem_fetch+0x4224>)
 80052d2:	461c      	mov	r4, r3
 80052d4:	4613      	mov	r3, r2
 80052d6:	cb07      	ldmia	r3!, {r0, r1, r2}
 80052d8:	6020      	str	r0, [r4, #0]
 80052da:	6061      	str	r1, [r4, #4]
 80052dc:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,9,9,12,14,18");
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	3304      	adds	r3, #4
 80052e2:	4a99      	ldr	r2, [pc, #612]	; (8005548 <problem_fetch+0x4228>)
 80052e4:	461c      	mov	r4, r3
 80052e6:	4613      	mov	r3, r2
 80052e8:	cb07      	ldmia	r3!, {r0, r1, r2}
 80052ea:	6020      	str	r0, [r4, #0]
 80052ec:	6061      	str	r1, [r4, #4]
 80052ee:	60a2      	str	r2, [r4, #8]
 80052f0:	881a      	ldrh	r2, [r3, #0]
 80052f2:	789b      	ldrb	r3, [r3, #2]
 80052f4:	81a2      	strh	r2, [r4, #12]
 80052f6:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish, "s,d,d,d,d,e");
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	33d8      	adds	r3, #216	; 0xd8
 80052fc:	4a93      	ldr	r2, [pc, #588]	; (800554c <problem_fetch+0x422c>)
 80052fe:	461c      	mov	r4, r3
 8005300:	4613      	mov	r3, r2
 8005302:	cb07      	ldmia	r3!, {r0, r1, r2}
 8005304:	6020      	str	r0, [r4, #0]
 8005306:	6061      	str	r1, [r4, #4]
 8005308:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade, "6C+");
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	33cc      	adds	r3, #204	; 0xcc
 800530e:	4a90      	ldr	r2, [pc, #576]	; (8005550 <problem_fetch+0x4230>)
 8005310:	6810      	ldr	r0, [r2, #0]
 8005312:	6018      	str	r0, [r3, #0]
			break;
 8005314:	f015 bd4a 	b.w	801adac <problem_fetch+0x19a8c>
		case 193 :
			strcpy(p->name,"JET-BLACK HAIR");
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	337c      	adds	r3, #124	; 0x7c
 800531c:	4a8d      	ldr	r2, [pc, #564]	; (8005554 <problem_fetch+0x4234>)
 800531e:	461c      	mov	r4, r3
 8005320:	4613      	mov	r3, r2
 8005322:	cb07      	ldmia	r3!, {r0, r1, r2}
 8005324:	6020      	str	r0, [r4, #0]
 8005326:	6061      	str	r1, [r4, #4]
 8005328:	60a2      	str	r2, [r4, #8]
 800532a:	881a      	ldrh	r2, [r3, #0]
 800532c:	789b      	ldrb	r3, [r3, #2]
 800532e:	81a2      	strh	r2, [r4, #12]
 8005330:	73a3      	strb	r3, [r4, #14]
			p->moveSize = 6;
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	2206      	movs	r2, #6
 8005336:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"J,I,H,G,D,A");
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	3340      	adds	r3, #64	; 0x40
 800533c:	4a86      	ldr	r2, [pc, #536]	; (8005558 <problem_fetch+0x4238>)
 800533e:	461c      	mov	r4, r3
 8005340:	4613      	mov	r3, r2
 8005342:	cb07      	ldmia	r3!, {r0, r1, r2}
 8005344:	6020      	str	r0, [r4, #0]
 8005346:	6061      	str	r1, [r4, #4]
 8005348:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,9,12,14,15,18");
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	3304      	adds	r3, #4
 800534e:	4a83      	ldr	r2, [pc, #524]	; (800555c <problem_fetch+0x423c>)
 8005350:	461c      	mov	r4, r3
 8005352:	4615      	mov	r5, r2
 8005354:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005356:	6020      	str	r0, [r4, #0]
 8005358:	6061      	str	r1, [r4, #4]
 800535a:	60a2      	str	r2, [r4, #8]
 800535c:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish, "s,d,d,d,d,e");
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	33d8      	adds	r3, #216	; 0xd8
 8005362:	4a7a      	ldr	r2, [pc, #488]	; (800554c <problem_fetch+0x422c>)
 8005364:	461c      	mov	r4, r3
 8005366:	4613      	mov	r3, r2
 8005368:	cb07      	ldmia	r3!, {r0, r1, r2}
 800536a:	6020      	str	r0, [r4, #0]
 800536c:	6061      	str	r1, [r4, #4]
 800536e:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade, "7B+");
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	33cc      	adds	r3, #204	; 0xcc
 8005374:	4a7a      	ldr	r2, [pc, #488]	; (8005560 <problem_fetch+0x4240>)
 8005376:	6810      	ldr	r0, [r2, #0]
 8005378:	6018      	str	r0, [r3, #0]
			break;
 800537a:	f015 bd17 	b.w	801adac <problem_fetch+0x19a8c>
		case 194 :
			strcpy(p->name,"GOT A LICENSE TO KILL");
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	337c      	adds	r3, #124	; 0x7c
 8005382:	4a78      	ldr	r2, [pc, #480]	; (8005564 <problem_fetch+0x4244>)
 8005384:	461d      	mov	r5, r3
 8005386:	4614      	mov	r4, r2
 8005388:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800538a:	6028      	str	r0, [r5, #0]
 800538c:	6069      	str	r1, [r5, #4]
 800538e:	60aa      	str	r2, [r5, #8]
 8005390:	60eb      	str	r3, [r5, #12]
 8005392:	6820      	ldr	r0, [r4, #0]
 8005394:	6128      	str	r0, [r5, #16]
 8005396:	88a3      	ldrh	r3, [r4, #4]
 8005398:	82ab      	strh	r3, [r5, #20]
			p->moveSize = 6;
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	2206      	movs	r2, #6
 800539e:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"J,I,G,B,F,A");
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	3340      	adds	r3, #64	; 0x40
 80053a4:	4a70      	ldr	r2, [pc, #448]	; (8005568 <problem_fetch+0x4248>)
 80053a6:	461c      	mov	r4, r3
 80053a8:	4613      	mov	r3, r2
 80053aa:	cb07      	ldmia	r3!, {r0, r1, r2}
 80053ac:	6020      	str	r0, [r4, #0]
 80053ae:	6061      	str	r1, [r4, #4]
 80053b0:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,9,14,15,11,18");
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	3304      	adds	r3, #4
 80053b6:	4a6d      	ldr	r2, [pc, #436]	; (800556c <problem_fetch+0x424c>)
 80053b8:	461c      	mov	r4, r3
 80053ba:	4615      	mov	r5, r2
 80053bc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80053be:	6020      	str	r0, [r4, #0]
 80053c0:	6061      	str	r1, [r4, #4]
 80053c2:	60a2      	str	r2, [r4, #8]
 80053c4:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish, "s,d,d,d,d,e");
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	33d8      	adds	r3, #216	; 0xd8
 80053ca:	4a60      	ldr	r2, [pc, #384]	; (800554c <problem_fetch+0x422c>)
 80053cc:	461c      	mov	r4, r3
 80053ce:	4613      	mov	r3, r2
 80053d0:	cb07      	ldmia	r3!, {r0, r1, r2}
 80053d2:	6020      	str	r0, [r4, #0]
 80053d4:	6061      	str	r1, [r4, #4]
 80053d6:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade, "7C");
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	33cc      	adds	r3, #204	; 0xcc
 80053dc:	4a64      	ldr	r2, [pc, #400]	; (8005570 <problem_fetch+0x4250>)
 80053de:	8811      	ldrh	r1, [r2, #0]
 80053e0:	7892      	ldrb	r2, [r2, #2]
 80053e2:	8019      	strh	r1, [r3, #0]
 80053e4:	709a      	strb	r2, [r3, #2]
			break;
 80053e6:	f015 bce1 	b.w	801adac <problem_fetch+0x19a8c>
		case 195 :
			strcpy(p->name,"FOX AND JAX");
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	337c      	adds	r3, #124	; 0x7c
 80053ee:	4a61      	ldr	r2, [pc, #388]	; (8005574 <problem_fetch+0x4254>)
 80053f0:	461c      	mov	r4, r3
 80053f2:	4613      	mov	r3, r2
 80053f4:	cb07      	ldmia	r3!, {r0, r1, r2}
 80053f6:	6020      	str	r0, [r4, #0]
 80053f8:	6061      	str	r1, [r4, #4]
 80053fa:	60a2      	str	r2, [r4, #8]
			p->moveSize = 5;
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	2205      	movs	r2, #5
 8005400:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"G,H,F,I,I");
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	3340      	adds	r3, #64	; 0x40
 8005406:	495c      	ldr	r1, [pc, #368]	; (8005578 <problem_fetch+0x4258>)
 8005408:	461a      	mov	r2, r3
 800540a:	460b      	mov	r3, r1
 800540c:	cb03      	ldmia	r3!, {r0, r1}
 800540e:	6010      	str	r0, [r2, #0]
 8005410:	6051      	str	r1, [r2, #4]
 8005412:	881b      	ldrh	r3, [r3, #0]
 8005414:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"4,8,11,14,18");
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	3304      	adds	r3, #4
 800541a:	4a58      	ldr	r2, [pc, #352]	; (800557c <problem_fetch+0x425c>)
 800541c:	461c      	mov	r4, r3
 800541e:	4613      	mov	r3, r2
 8005420:	cb07      	ldmia	r3!, {r0, r1, r2}
 8005422:	6020      	str	r0, [r4, #0]
 8005424:	6061      	str	r1, [r4, #4]
 8005426:	60a2      	str	r2, [r4, #8]
 8005428:	781b      	ldrb	r3, [r3, #0]
 800542a:	7323      	strb	r3, [r4, #12]
			strcpy(p->startFinish, "s,d,d,d,e");
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	33d8      	adds	r3, #216	; 0xd8
 8005430:	4953      	ldr	r1, [pc, #332]	; (8005580 <problem_fetch+0x4260>)
 8005432:	461a      	mov	r2, r3
 8005434:	460b      	mov	r3, r1
 8005436:	cb03      	ldmia	r3!, {r0, r1}
 8005438:	6010      	str	r0, [r2, #0]
 800543a:	6051      	str	r1, [r2, #4]
 800543c:	881b      	ldrh	r3, [r3, #0]
 800543e:	8113      	strh	r3, [r2, #8]
			strcpy(p->grade, "6C");
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	33cc      	adds	r3, #204	; 0xcc
 8005444:	4a3d      	ldr	r2, [pc, #244]	; (800553c <problem_fetch+0x421c>)
 8005446:	8811      	ldrh	r1, [r2, #0]
 8005448:	7892      	ldrb	r2, [r2, #2]
 800544a:	8019      	strh	r1, [r3, #0]
 800544c:	709a      	strb	r2, [r3, #2]
			break;
 800544e:	f015 bcad 	b.w	801adac <problem_fetch+0x19a8c>
		case 196 :
			strcpy(p->name,"BOTTLE SERVICE");
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	337c      	adds	r3, #124	; 0x7c
 8005456:	4a4b      	ldr	r2, [pc, #300]	; (8005584 <problem_fetch+0x4264>)
 8005458:	461c      	mov	r4, r3
 800545a:	4613      	mov	r3, r2
 800545c:	cb07      	ldmia	r3!, {r0, r1, r2}
 800545e:	6020      	str	r0, [r4, #0]
 8005460:	6061      	str	r1, [r4, #4]
 8005462:	60a2      	str	r2, [r4, #8]
 8005464:	881a      	ldrh	r2, [r3, #0]
 8005466:	789b      	ldrb	r3, [r3, #2]
 8005468:	81a2      	strh	r2, [r4, #12]
 800546a:	73a3      	strb	r3, [r4, #14]
			p->moveSize = 6;
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	2206      	movs	r2, #6
 8005470:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"G,J,I,K,G,I");
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	3340      	adds	r3, #64	; 0x40
 8005476:	4a44      	ldr	r2, [pc, #272]	; (8005588 <problem_fetch+0x4268>)
 8005478:	461c      	mov	r4, r3
 800547a:	4613      	mov	r3, r2
 800547c:	cb07      	ldmia	r3!, {r0, r1, r2}
 800547e:	6020      	str	r0, [r4, #0]
 8005480:	6061      	str	r1, [r4, #4]
 8005482:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,5,10,14,15,18");
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	3304      	adds	r3, #4
 8005488:	4a40      	ldr	r2, [pc, #256]	; (800558c <problem_fetch+0x426c>)
 800548a:	461c      	mov	r4, r3
 800548c:	4615      	mov	r5, r2
 800548e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005490:	6020      	str	r0, [r4, #0]
 8005492:	6061      	str	r1, [r4, #4]
 8005494:	60a2      	str	r2, [r4, #8]
 8005496:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish, "s,s,d,d,d,e");
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	33d8      	adds	r3, #216	; 0xd8
 800549c:	4a3c      	ldr	r2, [pc, #240]	; (8005590 <problem_fetch+0x4270>)
 800549e:	461c      	mov	r4, r3
 80054a0:	4613      	mov	r3, r2
 80054a2:	cb07      	ldmia	r3!, {r0, r1, r2}
 80054a4:	6020      	str	r0, [r4, #0]
 80054a6:	6061      	str	r1, [r4, #4]
 80054a8:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade, "7A");
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	33cc      	adds	r3, #204	; 0xcc
 80054ae:	4a39      	ldr	r2, [pc, #228]	; (8005594 <problem_fetch+0x4274>)
 80054b0:	8811      	ldrh	r1, [r2, #0]
 80054b2:	7892      	ldrb	r2, [r2, #2]
 80054b4:	8019      	strh	r1, [r3, #0]
 80054b6:	709a      	strb	r2, [r3, #2]
			break;
 80054b8:	f015 bc78 	b.w	801adac <problem_fetch+0x19a8c>
		case 197 :
			strcpy(p->name,"HUNTED BY GUSTAV");
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	337c      	adds	r3, #124	; 0x7c
 80054c0:	4a35      	ldr	r2, [pc, #212]	; (8005598 <problem_fetch+0x4278>)
 80054c2:	461d      	mov	r5, r3
 80054c4:	4614      	mov	r4, r2
 80054c6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80054c8:	6028      	str	r0, [r5, #0]
 80054ca:	6069      	str	r1, [r5, #4]
 80054cc:	60aa      	str	r2, [r5, #8]
 80054ce:	60eb      	str	r3, [r5, #12]
 80054d0:	7823      	ldrb	r3, [r4, #0]
 80054d2:	742b      	strb	r3, [r5, #16]
			p->moveSize = 7;
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	2207      	movs	r2, #7
 80054d8:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"G,H,C,F,A,D,A");
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	3340      	adds	r3, #64	; 0x40
 80054de:	4a2f      	ldr	r2, [pc, #188]	; (800559c <problem_fetch+0x427c>)
 80054e0:	461c      	mov	r4, r3
 80054e2:	4613      	mov	r3, r2
 80054e4:	cb07      	ldmia	r3!, {r0, r1, r2}
 80054e6:	6020      	str	r0, [r4, #0]
 80054e8:	6061      	str	r1, [r4, #4]
 80054ea:	60a2      	str	r2, [r4, #8]
 80054ec:	881b      	ldrh	r3, [r3, #0]
 80054ee:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,8,8,11,14,15,18");
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	3304      	adds	r3, #4
 80054f4:	4a2a      	ldr	r2, [pc, #168]	; (80055a0 <problem_fetch+0x4280>)
 80054f6:	461d      	mov	r5, r3
 80054f8:	4614      	mov	r4, r2
 80054fa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80054fc:	6028      	str	r0, [r5, #0]
 80054fe:	6069      	str	r1, [r5, #4]
 8005500:	60aa      	str	r2, [r5, #8]
 8005502:	60eb      	str	r3, [r5, #12]
 8005504:	8823      	ldrh	r3, [r4, #0]
 8005506:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish, "s,d,d,d,d,d,e");
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	33d8      	adds	r3, #216	; 0xd8
 800550c:	4a25      	ldr	r2, [pc, #148]	; (80055a4 <problem_fetch+0x4284>)
 800550e:	461c      	mov	r4, r3
 8005510:	4613      	mov	r3, r2
 8005512:	cb07      	ldmia	r3!, {r0, r1, r2}
 8005514:	6020      	str	r0, [r4, #0]
 8005516:	6061      	str	r1, [r4, #4]
 8005518:	60a2      	str	r2, [r4, #8]
 800551a:	881b      	ldrh	r3, [r3, #0]
 800551c:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade, "6C+");
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	33cc      	adds	r3, #204	; 0xcc
 8005522:	4a0b      	ldr	r2, [pc, #44]	; (8005550 <problem_fetch+0x4230>)
 8005524:	6810      	ldr	r0, [r2, #0]
 8005526:	6018      	str	r0, [r3, #0]
			break;
 8005528:	f015 bc40 	b.w	801adac <problem_fetch+0x19a8c>
 800552c:	0802269c 	.word	0x0802269c
 8005530:	080226b0 	.word	0x080226b0
 8005534:	080226c0 	.word	0x080226c0
 8005538:	08021458 	.word	0x08021458
 800553c:	08021370 	.word	0x08021370
 8005540:	080226d8 	.word	0x080226d8
 8005544:	080226e8 	.word	0x080226e8
 8005548:	080226f4 	.word	0x080226f4
 800554c:	0802139c 	.word	0x0802139c
 8005550:	080213a8 	.word	0x080213a8
 8005554:	08022704 	.word	0x08022704
 8005558:	08022714 	.word	0x08022714
 800555c:	08022720 	.word	0x08022720
 8005560:	08021848 	.word	0x08021848
 8005564:	08022730 	.word	0x08022730
 8005568:	08022748 	.word	0x08022748
 800556c:	08022754 	.word	0x08022754
 8005570:	0802158c 	.word	0x0802158c
 8005574:	08022764 	.word	0x08022764
 8005578:	08022770 	.word	0x08022770
 800557c:	08021e8c 	.word	0x08021e8c
 8005580:	08021320 	.word	0x08021320
 8005584:	0802277c 	.word	0x0802277c
 8005588:	0802278c 	.word	0x0802278c
 800558c:	08022798 	.word	0x08022798
 8005590:	08021910 	.word	0x08021910
 8005594:	080212f4 	.word	0x080212f4
 8005598:	080227a8 	.word	0x080227a8
 800559c:	080227bc 	.word	0x080227bc
 80055a0:	080227cc 	.word	0x080227cc
 80055a4:	08021494 	.word	0x08021494
		case 198 :
			strcpy(p->name,"UFO@5");
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	337c      	adds	r3, #124	; 0x7c
 80055ac:	4ab7      	ldr	r2, [pc, #732]	; (800588c <problem_fetch+0x456c>)
 80055ae:	6810      	ldr	r0, [r2, #0]
 80055b0:	6018      	str	r0, [r3, #0]
 80055b2:	8892      	ldrh	r2, [r2, #4]
 80055b4:	809a      	strh	r2, [r3, #4]
			p->moveSize = 6;
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	2206      	movs	r2, #6
 80055ba:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"J,K,I,I,E,D");
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	3340      	adds	r3, #64	; 0x40
 80055c0:	4ab3      	ldr	r2, [pc, #716]	; (8005890 <problem_fetch+0x4570>)
 80055c2:	461c      	mov	r4, r3
 80055c4:	4613      	mov	r3, r2
 80055c6:	cb07      	ldmia	r3!, {r0, r1, r2}
 80055c8:	6020      	str	r0, [r4, #0]
 80055ca:	6061      	str	r1, [r4, #4]
 80055cc:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,9,10,14,16,18");
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	3304      	adds	r3, #4
 80055d2:	4ab0      	ldr	r2, [pc, #704]	; (8005894 <problem_fetch+0x4574>)
 80055d4:	461c      	mov	r4, r3
 80055d6:	4615      	mov	r5, r2
 80055d8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80055da:	6020      	str	r0, [r4, #0]
 80055dc:	6061      	str	r1, [r4, #4]
 80055de:	60a2      	str	r2, [r4, #8]
 80055e0:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish, "s,d,d,d,d,e");
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	33d8      	adds	r3, #216	; 0xd8
 80055e6:	4aac      	ldr	r2, [pc, #688]	; (8005898 <problem_fetch+0x4578>)
 80055e8:	461c      	mov	r4, r3
 80055ea:	4613      	mov	r3, r2
 80055ec:	cb07      	ldmia	r3!, {r0, r1, r2}
 80055ee:	6020      	str	r0, [r4, #0]
 80055f0:	6061      	str	r1, [r4, #4]
 80055f2:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade, "6B+");
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	33cc      	adds	r3, #204	; 0xcc
 80055f8:	4aa8      	ldr	r2, [pc, #672]	; (800589c <problem_fetch+0x457c>)
 80055fa:	6810      	ldr	r0, [r2, #0]
 80055fc:	6018      	str	r0, [r3, #0]
			break;
 80055fe:	f015 bbd5 	b.w	801adac <problem_fetch+0x19a8c>
		case 199 :
			strcpy(p->name,"PEACHY");
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	337c      	adds	r3, #124	; 0x7c
 8005606:	4aa6      	ldr	r2, [pc, #664]	; (80058a0 <problem_fetch+0x4580>)
 8005608:	6810      	ldr	r0, [r2, #0]
 800560a:	6018      	str	r0, [r3, #0]
 800560c:	8891      	ldrh	r1, [r2, #4]
 800560e:	7992      	ldrb	r2, [r2, #6]
 8005610:	8099      	strh	r1, [r3, #4]
 8005612:	719a      	strb	r2, [r3, #6]
			p->moveSize = 7;
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	2207      	movs	r2, #7
 8005618:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"H,H,C,F,C,D,A");
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	3340      	adds	r3, #64	; 0x40
 800561e:	4aa1      	ldr	r2, [pc, #644]	; (80058a4 <problem_fetch+0x4584>)
 8005620:	461c      	mov	r4, r3
 8005622:	4613      	mov	r3, r2
 8005624:	cb07      	ldmia	r3!, {r0, r1, r2}
 8005626:	6020      	str	r0, [r4, #0]
 8005628:	6061      	str	r1, [r4, #4]
 800562a:	60a2      	str	r2, [r4, #8]
 800562c:	881b      	ldrh	r3, [r3, #0]
 800562e:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,8,8,11,13,15,18");
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	3304      	adds	r3, #4
 8005634:	4a9c      	ldr	r2, [pc, #624]	; (80058a8 <problem_fetch+0x4588>)
 8005636:	461d      	mov	r5, r3
 8005638:	4614      	mov	r4, r2
 800563a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800563c:	6028      	str	r0, [r5, #0]
 800563e:	6069      	str	r1, [r5, #4]
 8005640:	60aa      	str	r2, [r5, #8]
 8005642:	60eb      	str	r3, [r5, #12]
 8005644:	8823      	ldrh	r3, [r4, #0]
 8005646:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish, "s,d,d,d,d,d,e");
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	33d8      	adds	r3, #216	; 0xd8
 800564c:	4a97      	ldr	r2, [pc, #604]	; (80058ac <problem_fetch+0x458c>)
 800564e:	461c      	mov	r4, r3
 8005650:	4613      	mov	r3, r2
 8005652:	cb07      	ldmia	r3!, {r0, r1, r2}
 8005654:	6020      	str	r0, [r4, #0]
 8005656:	6061      	str	r1, [r4, #4]
 8005658:	60a2      	str	r2, [r4, #8]
 800565a:	881b      	ldrh	r3, [r3, #0]
 800565c:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade, "6C");
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	33cc      	adds	r3, #204	; 0xcc
 8005662:	4a93      	ldr	r2, [pc, #588]	; (80058b0 <problem_fetch+0x4590>)
 8005664:	8811      	ldrh	r1, [r2, #0]
 8005666:	7892      	ldrb	r2, [r2, #2]
 8005668:	8019      	strh	r1, [r3, #0]
 800566a:	709a      	strb	r2, [r3, #2]
			break;
 800566c:	f015 bb9e 	b.w	801adac <problem_fetch+0x19a8c>
		case 2 :
			strcpy(p->name,"PROBLEM 5");
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	337c      	adds	r3, #124	; 0x7c
 8005674:	498f      	ldr	r1, [pc, #572]	; (80058b4 <problem_fetch+0x4594>)
 8005676:	461a      	mov	r2, r3
 8005678:	460b      	mov	r3, r1
 800567a:	cb03      	ldmia	r3!, {r0, r1}
 800567c:	6010      	str	r0, [r2, #0]
 800567e:	6051      	str	r1, [r2, #4]
 8005680:	881b      	ldrh	r3, [r3, #0]
 8005682:	8113      	strh	r3, [r2, #8]
			p->moveSize = 8;
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	2208      	movs	r2, #8
 8005688:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"C,D,A,F,F,I,E,D");
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	3340      	adds	r3, #64	; 0x40
 800568e:	4a8a      	ldr	r2, [pc, #552]	; (80058b8 <problem_fetch+0x4598>)
 8005690:	461c      	mov	r4, r3
 8005692:	4615      	mov	r5, r2
 8005694:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005696:	6020      	str	r0, [r4, #0]
 8005698:	6061      	str	r1, [r4, #4]
 800569a:	60a2      	str	r2, [r4, #8]
 800569c:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,7,9,11,13,14,16,18");
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	3304      	adds	r3, #4
 80056a2:	4a86      	ldr	r2, [pc, #536]	; (80058bc <problem_fetch+0x459c>)
 80056a4:	461d      	mov	r5, r3
 80056a6:	4614      	mov	r4, r2
 80056a8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80056aa:	6028      	str	r0, [r5, #0]
 80056ac:	6069      	str	r1, [r5, #4]
 80056ae:	60aa      	str	r2, [r5, #8]
 80056b0:	60eb      	str	r3, [r5, #12]
 80056b2:	6820      	ldr	r0, [r4, #0]
 80056b4:	6128      	str	r0, [r5, #16]
 80056b6:	7923      	ldrb	r3, [r4, #4]
 80056b8:	752b      	strb	r3, [r5, #20]
			strcpy(p->startFinish, "s,d,d,d,d,d,d,e");
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	33d8      	adds	r3, #216	; 0xd8
 80056be:	4a80      	ldr	r2, [pc, #512]	; (80058c0 <problem_fetch+0x45a0>)
 80056c0:	461c      	mov	r4, r3
 80056c2:	4615      	mov	r5, r2
 80056c4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80056c6:	6020      	str	r0, [r4, #0]
 80056c8:	6061      	str	r1, [r4, #4]
 80056ca:	60a2      	str	r2, [r4, #8]
 80056cc:	60e3      	str	r3, [r4, #12]
			strcpy(p->grade, "7A");
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	33cc      	adds	r3, #204	; 0xcc
 80056d2:	4a7c      	ldr	r2, [pc, #496]	; (80058c4 <problem_fetch+0x45a4>)
 80056d4:	8811      	ldrh	r1, [r2, #0]
 80056d6:	7892      	ldrb	r2, [r2, #2]
 80056d8:	8019      	strh	r1, [r3, #0]
 80056da:	709a      	strb	r2, [r3, #2]
			break;
 80056dc:	f015 bb66 	b.w	801adac <problem_fetch+0x19a8c>
		case 20 :
			strcpy(p->name,"WAR OF THE TODDS");
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	337c      	adds	r3, #124	; 0x7c
 80056e4:	4a78      	ldr	r2, [pc, #480]	; (80058c8 <problem_fetch+0x45a8>)
 80056e6:	461d      	mov	r5, r3
 80056e8:	4614      	mov	r4, r2
 80056ea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80056ec:	6028      	str	r0, [r5, #0]
 80056ee:	6069      	str	r1, [r5, #4]
 80056f0:	60aa      	str	r2, [r5, #8]
 80056f2:	60eb      	str	r3, [r5, #12]
 80056f4:	7823      	ldrb	r3, [r4, #0]
 80056f6:	742b      	strb	r3, [r5, #16]
			p->moveSize = 6;
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	2206      	movs	r2, #6
 80056fc:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"J,G,I,I,H,D");
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	3340      	adds	r3, #64	; 0x40
 8005702:	4a72      	ldr	r2, [pc, #456]	; (80058cc <problem_fetch+0x45ac>)
 8005704:	461c      	mov	r4, r3
 8005706:	4613      	mov	r3, r2
 8005708:	cb07      	ldmia	r3!, {r0, r1, r2}
 800570a:	6020      	str	r0, [r4, #0]
 800570c:	6061      	str	r1, [r4, #4]
 800570e:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,9,9,15,16,18");
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	3304      	adds	r3, #4
 8005714:	4a6e      	ldr	r2, [pc, #440]	; (80058d0 <problem_fetch+0x45b0>)
 8005716:	461c      	mov	r4, r3
 8005718:	4613      	mov	r3, r2
 800571a:	cb07      	ldmia	r3!, {r0, r1, r2}
 800571c:	6020      	str	r0, [r4, #0]
 800571e:	6061      	str	r1, [r4, #4]
 8005720:	60a2      	str	r2, [r4, #8]
 8005722:	881a      	ldrh	r2, [r3, #0]
 8005724:	789b      	ldrb	r3, [r3, #2]
 8005726:	81a2      	strh	r2, [r4, #12]
 8005728:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish, "s,d,d,d,d,e");
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	33d8      	adds	r3, #216	; 0xd8
 800572e:	4a5a      	ldr	r2, [pc, #360]	; (8005898 <problem_fetch+0x4578>)
 8005730:	461c      	mov	r4, r3
 8005732:	4613      	mov	r3, r2
 8005734:	cb07      	ldmia	r3!, {r0, r1, r2}
 8005736:	6020      	str	r0, [r4, #0]
 8005738:	6061      	str	r1, [r4, #4]
 800573a:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade, "7B+");
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	33cc      	adds	r3, #204	; 0xcc
 8005740:	4a64      	ldr	r2, [pc, #400]	; (80058d4 <problem_fetch+0x45b4>)
 8005742:	6810      	ldr	r0, [r2, #0]
 8005744:	6018      	str	r0, [r3, #0]
			break;
 8005746:	f015 bb31 	b.w	801adac <problem_fetch+0x19a8c>
		case 200 :
			strcpy(p->name,"THE YEAR OF THE ROOSTER");
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	337c      	adds	r3, #124	; 0x7c
 800574e:	4a62      	ldr	r2, [pc, #392]	; (80058d8 <problem_fetch+0x45b8>)
 8005750:	461d      	mov	r5, r3
 8005752:	4614      	mov	r4, r2
 8005754:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005756:	6028      	str	r0, [r5, #0]
 8005758:	6069      	str	r1, [r5, #4]
 800575a:	60aa      	str	r2, [r5, #8]
 800575c:	60eb      	str	r3, [r5, #12]
 800575e:	cc03      	ldmia	r4!, {r0, r1}
 8005760:	6128      	str	r0, [r5, #16]
 8005762:	6169      	str	r1, [r5, #20]
			p->moveSize = 7;
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	2207      	movs	r2, #7
 8005768:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"B,C,E,E,F,G,I");
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	3340      	adds	r3, #64	; 0x40
 800576e:	4a5b      	ldr	r2, [pc, #364]	; (80058dc <problem_fetch+0x45bc>)
 8005770:	461c      	mov	r4, r3
 8005772:	4613      	mov	r3, r2
 8005774:	cb07      	ldmia	r3!, {r0, r1, r2}
 8005776:	6020      	str	r0, [r4, #0]
 8005778:	6061      	str	r1, [r4, #4]
 800577a:	60a2      	str	r2, [r4, #8]
 800577c:	881b      	ldrh	r3, [r3, #0]
 800577e:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"12,5,9,14,13,6,18");
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	3304      	adds	r3, #4
 8005784:	4a56      	ldr	r2, [pc, #344]	; (80058e0 <problem_fetch+0x45c0>)
 8005786:	461d      	mov	r5, r3
 8005788:	4614      	mov	r4, r2
 800578a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800578c:	6028      	str	r0, [r5, #0]
 800578e:	6069      	str	r1, [r5, #4]
 8005790:	60aa      	str	r2, [r5, #8]
 8005792:	60eb      	str	r3, [r5, #12]
 8005794:	8823      	ldrh	r3, [r4, #0]
 8005796:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish, "d,d,d,d,d,s,e");
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	33d8      	adds	r3, #216	; 0xd8
 800579c:	4a51      	ldr	r2, [pc, #324]	; (80058e4 <problem_fetch+0x45c4>)
 800579e:	461c      	mov	r4, r3
 80057a0:	4613      	mov	r3, r2
 80057a2:	cb07      	ldmia	r3!, {r0, r1, r2}
 80057a4:	6020      	str	r0, [r4, #0]
 80057a6:	6061      	str	r1, [r4, #4]
 80057a8:	60a2      	str	r2, [r4, #8]
 80057aa:	881b      	ldrh	r3, [r3, #0]
 80057ac:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade, "7B+");
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	33cc      	adds	r3, #204	; 0xcc
 80057b2:	4a48      	ldr	r2, [pc, #288]	; (80058d4 <problem_fetch+0x45b4>)
 80057b4:	6810      	ldr	r0, [r2, #0]
 80057b6:	6018      	str	r0, [r3, #0]
			break;
 80057b8:	f015 baf8 	b.w	801adac <problem_fetch+0x19a8c>
		case 201 :
			strcpy(p->name,"EAZEEPEAZEE");
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	337c      	adds	r3, #124	; 0x7c
 80057c0:	4a49      	ldr	r2, [pc, #292]	; (80058e8 <problem_fetch+0x45c8>)
 80057c2:	461c      	mov	r4, r3
 80057c4:	4613      	mov	r3, r2
 80057c6:	cb07      	ldmia	r3!, {r0, r1, r2}
 80057c8:	6020      	str	r0, [r4, #0]
 80057ca:	6061      	str	r1, [r4, #4]
 80057cc:	60a2      	str	r2, [r4, #8]
			p->moveSize = 6;
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	2206      	movs	r2, #6
 80057d2:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"G,J,I,J,H,I");
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	3340      	adds	r3, #64	; 0x40
 80057d8:	4a44      	ldr	r2, [pc, #272]	; (80058ec <problem_fetch+0x45cc>)
 80057da:	461c      	mov	r4, r3
 80057dc:	4613      	mov	r3, r2
 80057de:	cb07      	ldmia	r3!, {r0, r1, r2}
 80057e0:	6020      	str	r0, [r4, #0]
 80057e2:	6061      	str	r1, [r4, #4]
 80057e4:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,7,10,13,16,18");
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	3304      	adds	r3, #4
 80057ea:	4a41      	ldr	r2, [pc, #260]	; (80058f0 <problem_fetch+0x45d0>)
 80057ec:	461c      	mov	r4, r3
 80057ee:	4615      	mov	r5, r2
 80057f0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80057f2:	6020      	str	r0, [r4, #0]
 80057f4:	6061      	str	r1, [r4, #4]
 80057f6:	60a2      	str	r2, [r4, #8]
 80057f8:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish, "s,d,d,d,d,e");
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	33d8      	adds	r3, #216	; 0xd8
 80057fe:	4a26      	ldr	r2, [pc, #152]	; (8005898 <problem_fetch+0x4578>)
 8005800:	461c      	mov	r4, r3
 8005802:	4613      	mov	r3, r2
 8005804:	cb07      	ldmia	r3!, {r0, r1, r2}
 8005806:	6020      	str	r0, [r4, #0]
 8005808:	6061      	str	r1, [r4, #4]
 800580a:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade, "6B+");
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	33cc      	adds	r3, #204	; 0xcc
 8005810:	4a22      	ldr	r2, [pc, #136]	; (800589c <problem_fetch+0x457c>)
 8005812:	6810      	ldr	r0, [r2, #0]
 8005814:	6018      	str	r0, [r3, #0]
			break;
 8005816:	f015 bac9 	b.w	801adac <problem_fetch+0x19a8c>
		case 202 :
			strcpy(p->name,"NEW YEARS DELUSIONS");
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	337c      	adds	r3, #124	; 0x7c
 800581e:	4a35      	ldr	r2, [pc, #212]	; (80058f4 <problem_fetch+0x45d4>)
 8005820:	461d      	mov	r5, r3
 8005822:	4614      	mov	r4, r2
 8005824:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005826:	6028      	str	r0, [r5, #0]
 8005828:	6069      	str	r1, [r5, #4]
 800582a:	60aa      	str	r2, [r5, #8]
 800582c:	60eb      	str	r3, [r5, #12]
 800582e:	6820      	ldr	r0, [r4, #0]
 8005830:	6128      	str	r0, [r5, #16]
			p->moveSize = 8;
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	2208      	movs	r2, #8
 8005836:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"G,J,F,G,A,H,D,A");
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	3340      	adds	r3, #64	; 0x40
 800583c:	4a2e      	ldr	r2, [pc, #184]	; (80058f8 <problem_fetch+0x45d8>)
 800583e:	461c      	mov	r4, r3
 8005840:	4615      	mov	r5, r2
 8005842:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005844:	6020      	str	r0, [r4, #0]
 8005846:	6061      	str	r1, [r4, #4]
 8005848:	60a2      	str	r2, [r4, #8]
 800584a:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,7,11,15,14,8,15,18");
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	3304      	adds	r3, #4
 8005850:	4a2a      	ldr	r2, [pc, #168]	; (80058fc <problem_fetch+0x45dc>)
 8005852:	461d      	mov	r5, r3
 8005854:	4614      	mov	r4, r2
 8005856:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005858:	6028      	str	r0, [r5, #0]
 800585a:	6069      	str	r1, [r5, #4]
 800585c:	60aa      	str	r2, [r5, #8]
 800585e:	60eb      	str	r3, [r5, #12]
 8005860:	6820      	ldr	r0, [r4, #0]
 8005862:	6128      	str	r0, [r5, #16]
 8005864:	7923      	ldrb	r3, [r4, #4]
 8005866:	752b      	strb	r3, [r5, #20]
			strcpy(p->startFinish, "s,d,d,d,d,d,d,e");
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	33d8      	adds	r3, #216	; 0xd8
 800586c:	4a14      	ldr	r2, [pc, #80]	; (80058c0 <problem_fetch+0x45a0>)
 800586e:	461c      	mov	r4, r3
 8005870:	4615      	mov	r5, r2
 8005872:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005874:	6020      	str	r0, [r4, #0]
 8005876:	6061      	str	r1, [r4, #4]
 8005878:	60a2      	str	r2, [r4, #8]
 800587a:	60e3      	str	r3, [r4, #12]
			strcpy(p->grade, "7B+");
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	33cc      	adds	r3, #204	; 0xcc
 8005880:	4a14      	ldr	r2, [pc, #80]	; (80058d4 <problem_fetch+0x45b4>)
 8005882:	6810      	ldr	r0, [r2, #0]
 8005884:	6018      	str	r0, [r3, #0]
			break;
 8005886:	f015 ba91 	b.w	801adac <problem_fetch+0x19a8c>
 800588a:	bf00      	nop
 800588c:	080227e0 	.word	0x080227e0
 8005890:	080227e8 	.word	0x080227e8
 8005894:	080227f4 	.word	0x080227f4
 8005898:	0802139c 	.word	0x0802139c
 800589c:	080212b0 	.word	0x080212b0
 80058a0:	08022804 	.word	0x08022804
 80058a4:	0802280c 	.word	0x0802280c
 80058a8:	0802281c 	.word	0x0802281c
 80058ac:	08021494 	.word	0x08021494
 80058b0:	08021370 	.word	0x08021370
 80058b4:	08022830 	.word	0x08022830
 80058b8:	0802283c 	.word	0x0802283c
 80058bc:	0802284c 	.word	0x0802284c
 80058c0:	08021458 	.word	0x08021458
 80058c4:	080212f4 	.word	0x080212f4
 80058c8:	08022864 	.word	0x08022864
 80058cc:	08022878 	.word	0x08022878
 80058d0:	08022884 	.word	0x08022884
 80058d4:	08021848 	.word	0x08021848
 80058d8:	08022894 	.word	0x08022894
 80058dc:	080228ac 	.word	0x080228ac
 80058e0:	080228bc 	.word	0x080228bc
 80058e4:	080228d0 	.word	0x080228d0
 80058e8:	080228e0 	.word	0x080228e0
 80058ec:	080228ec 	.word	0x080228ec
 80058f0:	080228f8 	.word	0x080228f8
 80058f4:	08022908 	.word	0x08022908
 80058f8:	0802291c 	.word	0x0802291c
 80058fc:	0802292c 	.word	0x0802292c
		case 203 :
			strcpy(p->name,"ALLIE WARM UP");
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	337c      	adds	r3, #124	; 0x7c
 8005904:	4ac0      	ldr	r2, [pc, #768]	; (8005c08 <problem_fetch+0x48e8>)
 8005906:	461c      	mov	r4, r3
 8005908:	4613      	mov	r3, r2
 800590a:	cb07      	ldmia	r3!, {r0, r1, r2}
 800590c:	6020      	str	r0, [r4, #0]
 800590e:	6061      	str	r1, [r4, #4]
 8005910:	60a2      	str	r2, [r4, #8]
 8005912:	881b      	ldrh	r3, [r3, #0]
 8005914:	81a3      	strh	r3, [r4, #12]
			p->moveSize = 6;
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	2206      	movs	r2, #6
 800591a:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"C,E,D,G,J,I");
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	3340      	adds	r3, #64	; 0x40
 8005920:	4aba      	ldr	r2, [pc, #744]	; (8005c0c <problem_fetch+0x48ec>)
 8005922:	461c      	mov	r4, r3
 8005924:	4613      	mov	r3, r2
 8005926:	cb07      	ldmia	r3!, {r0, r1, r2}
 8005928:	6020      	str	r0, [r4, #0]
 800592a:	6061      	str	r1, [r4, #4]
 800592c:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,8,11,14,16,18");
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	3304      	adds	r3, #4
 8005932:	4ab7      	ldr	r2, [pc, #732]	; (8005c10 <problem_fetch+0x48f0>)
 8005934:	461c      	mov	r4, r3
 8005936:	4615      	mov	r5, r2
 8005938:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800593a:	6020      	str	r0, [r4, #0]
 800593c:	6061      	str	r1, [r4, #4]
 800593e:	60a2      	str	r2, [r4, #8]
 8005940:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish, "s,d,d,d,d,e");
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	33d8      	adds	r3, #216	; 0xd8
 8005946:	4ab3      	ldr	r2, [pc, #716]	; (8005c14 <problem_fetch+0x48f4>)
 8005948:	461c      	mov	r4, r3
 800594a:	4613      	mov	r3, r2
 800594c:	cb07      	ldmia	r3!, {r0, r1, r2}
 800594e:	6020      	str	r0, [r4, #0]
 8005950:	6061      	str	r1, [r4, #4]
 8005952:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade, "6B+");
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	33cc      	adds	r3, #204	; 0xcc
 8005958:	4aaf      	ldr	r2, [pc, #700]	; (8005c18 <problem_fetch+0x48f8>)
 800595a:	6810      	ldr	r0, [r2, #0]
 800595c:	6018      	str	r0, [r3, #0]
			break;
 800595e:	f015 ba25 	b.w	801adac <problem_fetch+0x19a8c>
		case 204 :
			strcpy(p->name,"A SPY WHO LOVED ME");
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	337c      	adds	r3, #124	; 0x7c
 8005966:	4aad      	ldr	r2, [pc, #692]	; (8005c1c <problem_fetch+0x48fc>)
 8005968:	461d      	mov	r5, r3
 800596a:	4614      	mov	r4, r2
 800596c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800596e:	6028      	str	r0, [r5, #0]
 8005970:	6069      	str	r1, [r5, #4]
 8005972:	60aa      	str	r2, [r5, #8]
 8005974:	60eb      	str	r3, [r5, #12]
 8005976:	8823      	ldrh	r3, [r4, #0]
 8005978:	78a2      	ldrb	r2, [r4, #2]
 800597a:	822b      	strh	r3, [r5, #16]
 800597c:	4613      	mov	r3, r2
 800597e:	74ab      	strb	r3, [r5, #18]
			p->moveSize = 7;
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	2207      	movs	r2, #7
 8005984:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"C,C,F,D,G,I,I");
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	3340      	adds	r3, #64	; 0x40
 800598a:	4aa5      	ldr	r2, [pc, #660]	; (8005c20 <problem_fetch+0x4900>)
 800598c:	461c      	mov	r4, r3
 800598e:	4613      	mov	r3, r2
 8005990:	cb07      	ldmia	r3!, {r0, r1, r2}
 8005992:	6020      	str	r0, [r4, #0]
 8005994:	6061      	str	r1, [r4, #4]
 8005996:	60a2      	str	r2, [r4, #8]
 8005998:	881b      	ldrh	r3, [r3, #0]
 800599a:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,8,11,15,15,10,18");
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	3304      	adds	r3, #4
 80059a0:	4aa0      	ldr	r2, [pc, #640]	; (8005c24 <problem_fetch+0x4904>)
 80059a2:	461d      	mov	r5, r3
 80059a4:	4614      	mov	r4, r2
 80059a6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80059a8:	6028      	str	r0, [r5, #0]
 80059aa:	6069      	str	r1, [r5, #4]
 80059ac:	60aa      	str	r2, [r5, #8]
 80059ae:	60eb      	str	r3, [r5, #12]
 80059b0:	8823      	ldrh	r3, [r4, #0]
 80059b2:	78a2      	ldrb	r2, [r4, #2]
 80059b4:	822b      	strh	r3, [r5, #16]
 80059b6:	4613      	mov	r3, r2
 80059b8:	74ab      	strb	r3, [r5, #18]
			strcpy(p->startFinish, "s,d,d,d,d,d,e");
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	33d8      	adds	r3, #216	; 0xd8
 80059be:	4a9a      	ldr	r2, [pc, #616]	; (8005c28 <problem_fetch+0x4908>)
 80059c0:	461c      	mov	r4, r3
 80059c2:	4613      	mov	r3, r2
 80059c4:	cb07      	ldmia	r3!, {r0, r1, r2}
 80059c6:	6020      	str	r0, [r4, #0]
 80059c8:	6061      	str	r1, [r4, #4]
 80059ca:	60a2      	str	r2, [r4, #8]
 80059cc:	881b      	ldrh	r3, [r3, #0]
 80059ce:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade, "7A+");
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	33cc      	adds	r3, #204	; 0xcc
 80059d4:	4a95      	ldr	r2, [pc, #596]	; (8005c2c <problem_fetch+0x490c>)
 80059d6:	6810      	ldr	r0, [r2, #0]
 80059d8:	6018      	str	r0, [r3, #0]
			break;
 80059da:	f015 b9e7 	b.w	801adac <problem_fetch+0x19a8c>
		case 205 :
			strcpy(p->name,"BOBBI'S STRETCH");
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	337c      	adds	r3, #124	; 0x7c
 80059e2:	4a93      	ldr	r2, [pc, #588]	; (8005c30 <problem_fetch+0x4910>)
 80059e4:	461c      	mov	r4, r3
 80059e6:	4615      	mov	r5, r2
 80059e8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80059ea:	6020      	str	r0, [r4, #0]
 80059ec:	6061      	str	r1, [r4, #4]
 80059ee:	60a2      	str	r2, [r4, #8]
 80059f0:	60e3      	str	r3, [r4, #12]
			p->moveSize = 5;
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	2205      	movs	r2, #5
 80059f6:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"E,F,D,E,A");
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	3340      	adds	r3, #64	; 0x40
 80059fc:	498d      	ldr	r1, [pc, #564]	; (8005c34 <problem_fetch+0x4914>)
 80059fe:	461a      	mov	r2, r3
 8005a00:	460b      	mov	r3, r1
 8005a02:	cb03      	ldmia	r3!, {r0, r1}
 8005a04:	6010      	str	r0, [r2, #0]
 8005a06:	6051      	str	r1, [r2, #4]
 8005a08:	881b      	ldrh	r3, [r3, #0]
 8005a0a:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"6,11,15,16,18");
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	3304      	adds	r3, #4
 8005a10:	4a89      	ldr	r2, [pc, #548]	; (8005c38 <problem_fetch+0x4918>)
 8005a12:	461c      	mov	r4, r3
 8005a14:	4613      	mov	r3, r2
 8005a16:	cb07      	ldmia	r3!, {r0, r1, r2}
 8005a18:	6020      	str	r0, [r4, #0]
 8005a1a:	6061      	str	r1, [r4, #4]
 8005a1c:	60a2      	str	r2, [r4, #8]
 8005a1e:	881b      	ldrh	r3, [r3, #0]
 8005a20:	81a3      	strh	r3, [r4, #12]
			strcpy(p->startFinish, "s,d,d,d,e");
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	33d8      	adds	r3, #216	; 0xd8
 8005a26:	4985      	ldr	r1, [pc, #532]	; (8005c3c <problem_fetch+0x491c>)
 8005a28:	461a      	mov	r2, r3
 8005a2a:	460b      	mov	r3, r1
 8005a2c:	cb03      	ldmia	r3!, {r0, r1}
 8005a2e:	6010      	str	r0, [r2, #0]
 8005a30:	6051      	str	r1, [r2, #4]
 8005a32:	881b      	ldrh	r3, [r3, #0]
 8005a34:	8113      	strh	r3, [r2, #8]
			strcpy(p->grade, "7A+");
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	33cc      	adds	r3, #204	; 0xcc
 8005a3a:	4a7c      	ldr	r2, [pc, #496]	; (8005c2c <problem_fetch+0x490c>)
 8005a3c:	6810      	ldr	r0, [r2, #0]
 8005a3e:	6018      	str	r0, [r3, #0]
			break;
 8005a40:	f015 b9b4 	b.w	801adac <problem_fetch+0x19a8c>
		case 206 :
			strcpy(p->name,"NINO LA RONCHIA");
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	337c      	adds	r3, #124	; 0x7c
 8005a48:	4a7d      	ldr	r2, [pc, #500]	; (8005c40 <problem_fetch+0x4920>)
 8005a4a:	461c      	mov	r4, r3
 8005a4c:	4615      	mov	r5, r2
 8005a4e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005a50:	6020      	str	r0, [r4, #0]
 8005a52:	6061      	str	r1, [r4, #4]
 8005a54:	60a2      	str	r2, [r4, #8]
 8005a56:	60e3      	str	r3, [r4, #12]
			p->moveSize = 11;
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	220b      	movs	r2, #11
 8005a5c:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"B,C,K,H,H,D,B,G,H,J,I");
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	3340      	adds	r3, #64	; 0x40
 8005a62:	4a78      	ldr	r2, [pc, #480]	; (8005c44 <problem_fetch+0x4924>)
 8005a64:	461d      	mov	r5, r3
 8005a66:	4614      	mov	r4, r2
 8005a68:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005a6a:	6028      	str	r0, [r5, #0]
 8005a6c:	6069      	str	r1, [r5, #4]
 8005a6e:	60aa      	str	r2, [r5, #8]
 8005a70:	60eb      	str	r3, [r5, #12]
 8005a72:	6820      	ldr	r0, [r4, #0]
 8005a74:	6128      	str	r0, [r5, #16]
 8005a76:	88a3      	ldrh	r3, [r4, #4]
 8005a78:	82ab      	strh	r3, [r5, #20]
			strcpy(p->moveNumbers,"6,5,9,13,16,7,10,10,10,5,18");
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	3304      	adds	r3, #4
 8005a7e:	4a72      	ldr	r2, [pc, #456]	; (8005c48 <problem_fetch+0x4928>)
 8005a80:	461d      	mov	r5, r3
 8005a82:	4614      	mov	r4, r2
 8005a84:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005a86:	6028      	str	r0, [r5, #0]
 8005a88:	6069      	str	r1, [r5, #4]
 8005a8a:	60aa      	str	r2, [r5, #8]
 8005a8c:	60eb      	str	r3, [r5, #12]
 8005a8e:	cc07      	ldmia	r4!, {r0, r1, r2}
 8005a90:	6128      	str	r0, [r5, #16]
 8005a92:	6169      	str	r1, [r5, #20]
 8005a94:	61aa      	str	r2, [r5, #24]
			strcpy(p->startFinish, "s,s,d,d,d,d,d,d,d,d,e");
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	33d8      	adds	r3, #216	; 0xd8
 8005a9a:	4a6c      	ldr	r2, [pc, #432]	; (8005c4c <problem_fetch+0x492c>)
 8005a9c:	461d      	mov	r5, r3
 8005a9e:	4614      	mov	r4, r2
 8005aa0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005aa2:	6028      	str	r0, [r5, #0]
 8005aa4:	6069      	str	r1, [r5, #4]
 8005aa6:	60aa      	str	r2, [r5, #8]
 8005aa8:	60eb      	str	r3, [r5, #12]
 8005aaa:	6820      	ldr	r0, [r4, #0]
 8005aac:	6128      	str	r0, [r5, #16]
 8005aae:	88a3      	ldrh	r3, [r4, #4]
 8005ab0:	82ab      	strh	r3, [r5, #20]
			strcpy(p->grade, "7A");
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	33cc      	adds	r3, #204	; 0xcc
 8005ab6:	4a66      	ldr	r2, [pc, #408]	; (8005c50 <problem_fetch+0x4930>)
 8005ab8:	8811      	ldrh	r1, [r2, #0]
 8005aba:	7892      	ldrb	r2, [r2, #2]
 8005abc:	8019      	strh	r1, [r3, #0]
 8005abe:	709a      	strb	r2, [r3, #2]
			break;
 8005ac0:	f015 b974 	b.w	801adac <problem_fetch+0x19a8c>
		case 207 :
			strcpy(p->name,"WORLDSTAR");
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	337c      	adds	r3, #124	; 0x7c
 8005ac8:	4962      	ldr	r1, [pc, #392]	; (8005c54 <problem_fetch+0x4934>)
 8005aca:	461a      	mov	r2, r3
 8005acc:	460b      	mov	r3, r1
 8005ace:	cb03      	ldmia	r3!, {r0, r1}
 8005ad0:	6010      	str	r0, [r2, #0]
 8005ad2:	6051      	str	r1, [r2, #4]
 8005ad4:	881b      	ldrh	r3, [r3, #0]
 8005ad6:	8113      	strh	r3, [r2, #8]
			p->moveSize = 7;
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	2207      	movs	r2, #7
 8005adc:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"G,H,A,E,A,D,A");
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	3340      	adds	r3, #64	; 0x40
 8005ae2:	4a5d      	ldr	r2, [pc, #372]	; (8005c58 <problem_fetch+0x4938>)
 8005ae4:	461c      	mov	r4, r3
 8005ae6:	4613      	mov	r3, r2
 8005ae8:	cb07      	ldmia	r3!, {r0, r1, r2}
 8005aea:	6020      	str	r0, [r4, #0]
 8005aec:	6061      	str	r1, [r4, #4]
 8005aee:	60a2      	str	r2, [r4, #8]
 8005af0:	881b      	ldrh	r3, [r3, #0]
 8005af2:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,8,9,12,14,15,18");
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	3304      	adds	r3, #4
 8005af8:	4a58      	ldr	r2, [pc, #352]	; (8005c5c <problem_fetch+0x493c>)
 8005afa:	461d      	mov	r5, r3
 8005afc:	4614      	mov	r4, r2
 8005afe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005b00:	6028      	str	r0, [r5, #0]
 8005b02:	6069      	str	r1, [r5, #4]
 8005b04:	60aa      	str	r2, [r5, #8]
 8005b06:	60eb      	str	r3, [r5, #12]
 8005b08:	8823      	ldrh	r3, [r4, #0]
 8005b0a:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish, "s,d,d,d,d,d,e");
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	33d8      	adds	r3, #216	; 0xd8
 8005b10:	4a45      	ldr	r2, [pc, #276]	; (8005c28 <problem_fetch+0x4908>)
 8005b12:	461c      	mov	r4, r3
 8005b14:	4613      	mov	r3, r2
 8005b16:	cb07      	ldmia	r3!, {r0, r1, r2}
 8005b18:	6020      	str	r0, [r4, #0]
 8005b1a:	6061      	str	r1, [r4, #4]
 8005b1c:	60a2      	str	r2, [r4, #8]
 8005b1e:	881b      	ldrh	r3, [r3, #0]
 8005b20:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade, "7A");
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	33cc      	adds	r3, #204	; 0xcc
 8005b26:	4a4a      	ldr	r2, [pc, #296]	; (8005c50 <problem_fetch+0x4930>)
 8005b28:	8811      	ldrh	r1, [r2, #0]
 8005b2a:	7892      	ldrb	r2, [r2, #2]
 8005b2c:	8019      	strh	r1, [r3, #0]
 8005b2e:	709a      	strb	r2, [r3, #2]
			break;
 8005b30:	f015 b93c 	b.w	801adac <problem_fetch+0x19a8c>
		case 208 :
			strcpy(p->name,"SLASHSLASH");
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	337c      	adds	r3, #124	; 0x7c
 8005b38:	4949      	ldr	r1, [pc, #292]	; (8005c60 <problem_fetch+0x4940>)
 8005b3a:	461a      	mov	r2, r3
 8005b3c:	460b      	mov	r3, r1
 8005b3e:	cb03      	ldmia	r3!, {r0, r1}
 8005b40:	6010      	str	r0, [r2, #0]
 8005b42:	6051      	str	r1, [r2, #4]
 8005b44:	8819      	ldrh	r1, [r3, #0]
 8005b46:	789b      	ldrb	r3, [r3, #2]
 8005b48:	8111      	strh	r1, [r2, #8]
 8005b4a:	7293      	strb	r3, [r2, #10]
			p->moveSize = 5;
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	2205      	movs	r2, #5
 8005b50:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"E,A,C,A,A");
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	3340      	adds	r3, #64	; 0x40
 8005b56:	4943      	ldr	r1, [pc, #268]	; (8005c64 <problem_fetch+0x4944>)
 8005b58:	461a      	mov	r2, r3
 8005b5a:	460b      	mov	r3, r1
 8005b5c:	cb03      	ldmia	r3!, {r0, r1}
 8005b5e:	6010      	str	r0, [r2, #0]
 8005b60:	6051      	str	r1, [r2, #4]
 8005b62:	881b      	ldrh	r3, [r3, #0]
 8005b64:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"6,9,13,14,18");
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	3304      	adds	r3, #4
 8005b6a:	4a3f      	ldr	r2, [pc, #252]	; (8005c68 <problem_fetch+0x4948>)
 8005b6c:	461c      	mov	r4, r3
 8005b6e:	4613      	mov	r3, r2
 8005b70:	cb07      	ldmia	r3!, {r0, r1, r2}
 8005b72:	6020      	str	r0, [r4, #0]
 8005b74:	6061      	str	r1, [r4, #4]
 8005b76:	60a2      	str	r2, [r4, #8]
 8005b78:	781b      	ldrb	r3, [r3, #0]
 8005b7a:	7323      	strb	r3, [r4, #12]
			strcpy(p->startFinish, "s,d,d,d,e");
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	33d8      	adds	r3, #216	; 0xd8
 8005b80:	492e      	ldr	r1, [pc, #184]	; (8005c3c <problem_fetch+0x491c>)
 8005b82:	461a      	mov	r2, r3
 8005b84:	460b      	mov	r3, r1
 8005b86:	cb03      	ldmia	r3!, {r0, r1}
 8005b88:	6010      	str	r0, [r2, #0]
 8005b8a:	6051      	str	r1, [r2, #4]
 8005b8c:	881b      	ldrh	r3, [r3, #0]
 8005b8e:	8113      	strh	r3, [r2, #8]
			strcpy(p->grade, "7B+");
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	33cc      	adds	r3, #204	; 0xcc
 8005b94:	4a35      	ldr	r2, [pc, #212]	; (8005c6c <problem_fetch+0x494c>)
 8005b96:	6810      	ldr	r0, [r2, #0]
 8005b98:	6018      	str	r0, [r3, #0]
			break;
 8005b9a:	f015 b907 	b.w	801adac <problem_fetch+0x19a8c>
		case 209 :
			strcpy(p->name,"BACKSLASH");
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	337c      	adds	r3, #124	; 0x7c
 8005ba2:	4933      	ldr	r1, [pc, #204]	; (8005c70 <problem_fetch+0x4950>)
 8005ba4:	461a      	mov	r2, r3
 8005ba6:	460b      	mov	r3, r1
 8005ba8:	cb03      	ldmia	r3!, {r0, r1}
 8005baa:	6010      	str	r0, [r2, #0]
 8005bac:	6051      	str	r1, [r2, #4]
 8005bae:	881b      	ldrh	r3, [r3, #0]
 8005bb0:	8113      	strh	r3, [r2, #8]
			p->moveSize = 6;
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	2206      	movs	r2, #6
 8005bb6:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"G,H,G,J,I,I");
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	3340      	adds	r3, #64	; 0x40
 8005bbc:	4a2d      	ldr	r2, [pc, #180]	; (8005c74 <problem_fetch+0x4954>)
 8005bbe:	461c      	mov	r4, r3
 8005bc0:	4613      	mov	r3, r2
 8005bc2:	cb07      	ldmia	r3!, {r0, r1, r2}
 8005bc4:	6020      	str	r0, [r4, #0]
 8005bc6:	6061      	str	r1, [r4, #4]
 8005bc8:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,8,9,12,14,18");
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	3304      	adds	r3, #4
 8005bce:	4a2a      	ldr	r2, [pc, #168]	; (8005c78 <problem_fetch+0x4958>)
 8005bd0:	461c      	mov	r4, r3
 8005bd2:	4613      	mov	r3, r2
 8005bd4:	cb07      	ldmia	r3!, {r0, r1, r2}
 8005bd6:	6020      	str	r0, [r4, #0]
 8005bd8:	6061      	str	r1, [r4, #4]
 8005bda:	60a2      	str	r2, [r4, #8]
 8005bdc:	881a      	ldrh	r2, [r3, #0]
 8005bde:	789b      	ldrb	r3, [r3, #2]
 8005be0:	81a2      	strh	r2, [r4, #12]
 8005be2:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish, "s,d,d,d,d,e");
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	33d8      	adds	r3, #216	; 0xd8
 8005be8:	4a0a      	ldr	r2, [pc, #40]	; (8005c14 <problem_fetch+0x48f4>)
 8005bea:	461c      	mov	r4, r3
 8005bec:	4613      	mov	r3, r2
 8005bee:	cb07      	ldmia	r3!, {r0, r1, r2}
 8005bf0:	6020      	str	r0, [r4, #0]
 8005bf2:	6061      	str	r1, [r4, #4]
 8005bf4:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade, "7A");
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	33cc      	adds	r3, #204	; 0xcc
 8005bfa:	4a15      	ldr	r2, [pc, #84]	; (8005c50 <problem_fetch+0x4930>)
 8005bfc:	8811      	ldrh	r1, [r2, #0]
 8005bfe:	7892      	ldrb	r2, [r2, #2]
 8005c00:	8019      	strh	r1, [r3, #0]
 8005c02:	709a      	strb	r2, [r3, #2]
			break;
 8005c04:	f015 b8d2 	b.w	801adac <problem_fetch+0x19a8c>
 8005c08:	08022944 	.word	0x08022944
 8005c0c:	08022954 	.word	0x08022954
 8005c10:	08022960 	.word	0x08022960
 8005c14:	0802139c 	.word	0x0802139c
 8005c18:	080212b0 	.word	0x080212b0
 8005c1c:	08022970 	.word	0x08022970
 8005c20:	08022984 	.word	0x08022984
 8005c24:	08022994 	.word	0x08022994
 8005c28:	08021494 	.word	0x08021494
 8005c2c:	08021424 	.word	0x08021424
 8005c30:	080229a8 	.word	0x080229a8
 8005c34:	080229b8 	.word	0x080229b8
 8005c38:	080229c4 	.word	0x080229c4
 8005c3c:	08021320 	.word	0x08021320
 8005c40:	080229d4 	.word	0x080229d4
 8005c44:	080229e4 	.word	0x080229e4
 8005c48:	080229fc 	.word	0x080229fc
 8005c4c:	08022a18 	.word	0x08022a18
 8005c50:	080212f4 	.word	0x080212f4
 8005c54:	08022a30 	.word	0x08022a30
 8005c58:	08022a3c 	.word	0x08022a3c
 8005c5c:	08022a4c 	.word	0x08022a4c
 8005c60:	08022a60 	.word	0x08022a60
 8005c64:	08022a6c 	.word	0x08022a6c
 8005c68:	08022a78 	.word	0x08022a78
 8005c6c:	08021848 	.word	0x08021848
 8005c70:	08022a88 	.word	0x08022a88
 8005c74:	08022a94 	.word	0x08022a94
 8005c78:	08021ff8 	.word	0x08021ff8
		case 21 :
			strcpy(p->name,"CHEETAHSAURUS");
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	337c      	adds	r3, #124	; 0x7c
 8005c80:	4aa6      	ldr	r2, [pc, #664]	; (8005f1c <problem_fetch+0x4bfc>)
 8005c82:	461c      	mov	r4, r3
 8005c84:	4613      	mov	r3, r2
 8005c86:	cb07      	ldmia	r3!, {r0, r1, r2}
 8005c88:	6020      	str	r0, [r4, #0]
 8005c8a:	6061      	str	r1, [r4, #4]
 8005c8c:	60a2      	str	r2, [r4, #8]
 8005c8e:	881b      	ldrh	r3, [r3, #0]
 8005c90:	81a3      	strh	r3, [r4, #12]
			p->moveSize = 8;
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	2208      	movs	r2, #8
 8005c96:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"H,H,E,H,G,I,G,I");
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	3340      	adds	r3, #64	; 0x40
 8005c9c:	4aa0      	ldr	r2, [pc, #640]	; (8005f20 <problem_fetch+0x4c00>)
 8005c9e:	461c      	mov	r4, r3
 8005ca0:	4615      	mov	r5, r2
 8005ca2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005ca4:	6020      	str	r0, [r4, #0]
 8005ca6:	6061      	str	r1, [r4, #4]
 8005ca8:	60a2      	str	r2, [r4, #8]
 8005caa:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,8,9,12,14,15,17,18");
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	3304      	adds	r3, #4
 8005cb0:	4a9c      	ldr	r2, [pc, #624]	; (8005f24 <problem_fetch+0x4c04>)
 8005cb2:	461d      	mov	r5, r3
 8005cb4:	4614      	mov	r4, r2
 8005cb6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005cb8:	6028      	str	r0, [r5, #0]
 8005cba:	6069      	str	r1, [r5, #4]
 8005cbc:	60aa      	str	r2, [r5, #8]
 8005cbe:	60eb      	str	r3, [r5, #12]
 8005cc0:	6820      	ldr	r0, [r4, #0]
 8005cc2:	6128      	str	r0, [r5, #16]
 8005cc4:	7923      	ldrb	r3, [r4, #4]
 8005cc6:	752b      	strb	r3, [r5, #20]
			strcpy(p->startFinish, "s,d,d,d,d,d,d,e");
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	33d8      	adds	r3, #216	; 0xd8
 8005ccc:	4a96      	ldr	r2, [pc, #600]	; (8005f28 <problem_fetch+0x4c08>)
 8005cce:	461c      	mov	r4, r3
 8005cd0:	4615      	mov	r5, r2
 8005cd2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005cd4:	6020      	str	r0, [r4, #0]
 8005cd6:	6061      	str	r1, [r4, #4]
 8005cd8:	60a2      	str	r2, [r4, #8]
 8005cda:	60e3      	str	r3, [r4, #12]
			strcpy(p->grade, "6C");
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	33cc      	adds	r3, #204	; 0xcc
 8005ce0:	4a92      	ldr	r2, [pc, #584]	; (8005f2c <problem_fetch+0x4c0c>)
 8005ce2:	8811      	ldrh	r1, [r2, #0]
 8005ce4:	7892      	ldrb	r2, [r2, #2]
 8005ce6:	8019      	strh	r1, [r3, #0]
 8005ce8:	709a      	strb	r2, [r3, #2]
			break;
 8005cea:	f015 b85f 	b.w	801adac <problem_fetch+0x19a8c>
		case 210 :
			strcpy(p->name,"SPORGASSE, GRAZ");
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	337c      	adds	r3, #124	; 0x7c
 8005cf2:	4a8f      	ldr	r2, [pc, #572]	; (8005f30 <problem_fetch+0x4c10>)
 8005cf4:	461c      	mov	r4, r3
 8005cf6:	4615      	mov	r5, r2
 8005cf8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005cfa:	6020      	str	r0, [r4, #0]
 8005cfc:	6061      	str	r1, [r4, #4]
 8005cfe:	60a2      	str	r2, [r4, #8]
 8005d00:	60e3      	str	r3, [r4, #12]
			p->moveSize = 5;
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	2205      	movs	r2, #5
 8005d06:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"E,H,F,E,D");
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	3340      	adds	r3, #64	; 0x40
 8005d0c:	4989      	ldr	r1, [pc, #548]	; (8005f34 <problem_fetch+0x4c14>)
 8005d0e:	461a      	mov	r2, r3
 8005d10:	460b      	mov	r3, r1
 8005d12:	cb03      	ldmia	r3!, {r0, r1}
 8005d14:	6010      	str	r0, [r2, #0]
 8005d16:	6051      	str	r1, [r2, #4]
 8005d18:	881b      	ldrh	r3, [r3, #0]
 8005d1a:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"6,5,11,16,18");
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	3304      	adds	r3, #4
 8005d20:	4a85      	ldr	r2, [pc, #532]	; (8005f38 <problem_fetch+0x4c18>)
 8005d22:	461c      	mov	r4, r3
 8005d24:	4613      	mov	r3, r2
 8005d26:	cb07      	ldmia	r3!, {r0, r1, r2}
 8005d28:	6020      	str	r0, [r4, #0]
 8005d2a:	6061      	str	r1, [r4, #4]
 8005d2c:	60a2      	str	r2, [r4, #8]
 8005d2e:	781b      	ldrb	r3, [r3, #0]
 8005d30:	7323      	strb	r3, [r4, #12]
			strcpy(p->startFinish, "s,s,d,d,e");
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	33d8      	adds	r3, #216	; 0xd8
 8005d36:	4981      	ldr	r1, [pc, #516]	; (8005f3c <problem_fetch+0x4c1c>)
 8005d38:	461a      	mov	r2, r3
 8005d3a:	460b      	mov	r3, r1
 8005d3c:	cb03      	ldmia	r3!, {r0, r1}
 8005d3e:	6010      	str	r0, [r2, #0]
 8005d40:	6051      	str	r1, [r2, #4]
 8005d42:	881b      	ldrh	r3, [r3, #0]
 8005d44:	8113      	strh	r3, [r2, #8]
			strcpy(p->grade, "7B");
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	33cc      	adds	r3, #204	; 0xcc
 8005d4a:	4a7d      	ldr	r2, [pc, #500]	; (8005f40 <problem_fetch+0x4c20>)
 8005d4c:	8811      	ldrh	r1, [r2, #0]
 8005d4e:	7892      	ldrb	r2, [r2, #2]
 8005d50:	8019      	strh	r1, [r3, #0]
 8005d52:	709a      	strb	r2, [r3, #2]
			break;
 8005d54:	f015 b82a 	b.w	801adac <problem_fetch+0x19a8c>
		case 211 :
			strcpy(p->name,"YAYABLACK");
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	337c      	adds	r3, #124	; 0x7c
 8005d5c:	4979      	ldr	r1, [pc, #484]	; (8005f44 <problem_fetch+0x4c24>)
 8005d5e:	461a      	mov	r2, r3
 8005d60:	460b      	mov	r3, r1
 8005d62:	cb03      	ldmia	r3!, {r0, r1}
 8005d64:	6010      	str	r0, [r2, #0]
 8005d66:	6051      	str	r1, [r2, #4]
 8005d68:	881b      	ldrh	r3, [r3, #0]
 8005d6a:	8113      	strh	r3, [r2, #8]
			p->moveSize = 8;
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	2208      	movs	r2, #8
 8005d70:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"H,J,J,E,H,C,D,D");
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	3340      	adds	r3, #64	; 0x40
 8005d76:	4a74      	ldr	r2, [pc, #464]	; (8005f48 <problem_fetch+0x4c28>)
 8005d78:	461c      	mov	r4, r3
 8005d7a:	4615      	mov	r5, r2
 8005d7c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005d7e:	6020      	str	r0, [r4, #0]
 8005d80:	6061      	str	r1, [r4, #4]
 8005d82:	60a2      	str	r2, [r4, #8]
 8005d84:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,5,7,8,10,13,15,18");
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	3304      	adds	r3, #4
 8005d8a:	4a70      	ldr	r2, [pc, #448]	; (8005f4c <problem_fetch+0x4c2c>)
 8005d8c:	461d      	mov	r5, r3
 8005d8e:	4614      	mov	r4, r2
 8005d90:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005d92:	6028      	str	r0, [r5, #0]
 8005d94:	6069      	str	r1, [r5, #4]
 8005d96:	60aa      	str	r2, [r5, #8]
 8005d98:	60eb      	str	r3, [r5, #12]
 8005d9a:	6820      	ldr	r0, [r4, #0]
 8005d9c:	6128      	str	r0, [r5, #16]
			strcpy(p->startFinish, "s,s,d,d,d,d,d,e");
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	33d8      	adds	r3, #216	; 0xd8
 8005da2:	4a6b      	ldr	r2, [pc, #428]	; (8005f50 <problem_fetch+0x4c30>)
 8005da4:	461c      	mov	r4, r3
 8005da6:	4615      	mov	r5, r2
 8005da8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005daa:	6020      	str	r0, [r4, #0]
 8005dac:	6061      	str	r1, [r4, #4]
 8005dae:	60a2      	str	r2, [r4, #8]
 8005db0:	60e3      	str	r3, [r4, #12]
			strcpy(p->grade, "6B+");
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	33cc      	adds	r3, #204	; 0xcc
 8005db6:	4a67      	ldr	r2, [pc, #412]	; (8005f54 <problem_fetch+0x4c34>)
 8005db8:	6810      	ldr	r0, [r2, #0]
 8005dba:	6018      	str	r0, [r3, #0]
			break;
 8005dbc:	f014 bff6 	b.w	801adac <problem_fetch+0x19a8c>
		case 212 :
			strcpy(p->name,"TRAVEQUE");
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	337c      	adds	r3, #124	; 0x7c
 8005dc4:	4964      	ldr	r1, [pc, #400]	; (8005f58 <problem_fetch+0x4c38>)
 8005dc6:	461a      	mov	r2, r3
 8005dc8:	460b      	mov	r3, r1
 8005dca:	cb03      	ldmia	r3!, {r0, r1}
 8005dcc:	6010      	str	r0, [r2, #0]
 8005dce:	6051      	str	r1, [r2, #4]
 8005dd0:	781b      	ldrb	r3, [r3, #0]
 8005dd2:	7213      	strb	r3, [r2, #8]
			p->moveSize = 10;
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	220a      	movs	r2, #10
 8005dd8:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"B,C,J,H,H,H,G,E,H,I");
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	3340      	adds	r3, #64	; 0x40
 8005dde:	4a5f      	ldr	r2, [pc, #380]	; (8005f5c <problem_fetch+0x4c3c>)
 8005de0:	461d      	mov	r5, r3
 8005de2:	4614      	mov	r4, r2
 8005de4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005de6:	6028      	str	r0, [r5, #0]
 8005de8:	6069      	str	r1, [r5, #4]
 8005dea:	60aa      	str	r2, [r5, #8]
 8005dec:	60eb      	str	r3, [r5, #12]
 8005dee:	6820      	ldr	r0, [r4, #0]
 8005df0:	6128      	str	r0, [r5, #16]
			strcpy(p->moveNumbers,"6,5,7,16,12,8,4,6,5,18");
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	3304      	adds	r3, #4
 8005df6:	4a5a      	ldr	r2, [pc, #360]	; (8005f60 <problem_fetch+0x4c40>)
 8005df8:	461c      	mov	r4, r3
 8005dfa:	4615      	mov	r5, r2
 8005dfc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005dfe:	6020      	str	r0, [r4, #0]
 8005e00:	6061      	str	r1, [r4, #4]
 8005e02:	60a2      	str	r2, [r4, #8]
 8005e04:	60e3      	str	r3, [r4, #12]
 8005e06:	6828      	ldr	r0, [r5, #0]
 8005e08:	6120      	str	r0, [r4, #16]
 8005e0a:	88ab      	ldrh	r3, [r5, #4]
 8005e0c:	79aa      	ldrb	r2, [r5, #6]
 8005e0e:	82a3      	strh	r3, [r4, #20]
 8005e10:	4613      	mov	r3, r2
 8005e12:	75a3      	strb	r3, [r4, #22]
			strcpy(p->startFinish, "s,s,d,d,d,d,d,d,d,e");
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	33d8      	adds	r3, #216	; 0xd8
 8005e18:	4a52      	ldr	r2, [pc, #328]	; (8005f64 <problem_fetch+0x4c44>)
 8005e1a:	461d      	mov	r5, r3
 8005e1c:	4614      	mov	r4, r2
 8005e1e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005e20:	6028      	str	r0, [r5, #0]
 8005e22:	6069      	str	r1, [r5, #4]
 8005e24:	60aa      	str	r2, [r5, #8]
 8005e26:	60eb      	str	r3, [r5, #12]
 8005e28:	6820      	ldr	r0, [r4, #0]
 8005e2a:	6128      	str	r0, [r5, #16]
			strcpy(p->grade, "6C");
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	33cc      	adds	r3, #204	; 0xcc
 8005e30:	4a3e      	ldr	r2, [pc, #248]	; (8005f2c <problem_fetch+0x4c0c>)
 8005e32:	8811      	ldrh	r1, [r2, #0]
 8005e34:	7892      	ldrb	r2, [r2, #2]
 8005e36:	8019      	strh	r1, [r3, #0]
 8005e38:	709a      	strb	r2, [r3, #2]
			break;
 8005e3a:	f014 bfb7 	b.w	801adac <problem_fetch+0x19a8c>
		case 213 :
			strcpy(p->name,"TRAVEQUE II");
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	337c      	adds	r3, #124	; 0x7c
 8005e42:	4a49      	ldr	r2, [pc, #292]	; (8005f68 <problem_fetch+0x4c48>)
 8005e44:	461c      	mov	r4, r3
 8005e46:	4613      	mov	r3, r2
 8005e48:	cb07      	ldmia	r3!, {r0, r1, r2}
 8005e4a:	6020      	str	r0, [r4, #0]
 8005e4c:	6061      	str	r1, [r4, #4]
 8005e4e:	60a2      	str	r2, [r4, #8]
			p->moveSize = 11;
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	220b      	movs	r2, #11
 8005e54:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"C,B,G,C,D,K,H,H,K,G,I");
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	3340      	adds	r3, #64	; 0x40
 8005e5a:	4a44      	ldr	r2, [pc, #272]	; (8005f6c <problem_fetch+0x4c4c>)
 8005e5c:	461d      	mov	r5, r3
 8005e5e:	4614      	mov	r4, r2
 8005e60:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005e62:	6028      	str	r0, [r5, #0]
 8005e64:	6069      	str	r1, [r5, #4]
 8005e66:	60aa      	str	r2, [r5, #8]
 8005e68:	60eb      	str	r3, [r5, #12]
 8005e6a:	6820      	ldr	r0, [r4, #0]
 8005e6c:	6128      	str	r0, [r5, #16]
 8005e6e:	88a3      	ldrh	r3, [r4, #4]
 8005e70:	82ab      	strh	r3, [r5, #20]
			strcpy(p->moveNumbers,"5,6,4,8,7,9,8,12,14,15,18");
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	3304      	adds	r3, #4
 8005e76:	4a3e      	ldr	r2, [pc, #248]	; (8005f70 <problem_fetch+0x4c50>)
 8005e78:	461d      	mov	r5, r3
 8005e7a:	4614      	mov	r4, r2
 8005e7c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005e7e:	6028      	str	r0, [r5, #0]
 8005e80:	6069      	str	r1, [r5, #4]
 8005e82:	60aa      	str	r2, [r5, #8]
 8005e84:	60eb      	str	r3, [r5, #12]
 8005e86:	cc03      	ldmia	r4!, {r0, r1}
 8005e88:	6128      	str	r0, [r5, #16]
 8005e8a:	6169      	str	r1, [r5, #20]
 8005e8c:	8823      	ldrh	r3, [r4, #0]
 8005e8e:	832b      	strh	r3, [r5, #24]
			strcpy(p->startFinish, "s,s,d,d,d,d,d,d,d,d,e");
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	33d8      	adds	r3, #216	; 0xd8
 8005e94:	4a37      	ldr	r2, [pc, #220]	; (8005f74 <problem_fetch+0x4c54>)
 8005e96:	461d      	mov	r5, r3
 8005e98:	4614      	mov	r4, r2
 8005e9a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005e9c:	6028      	str	r0, [r5, #0]
 8005e9e:	6069      	str	r1, [r5, #4]
 8005ea0:	60aa      	str	r2, [r5, #8]
 8005ea2:	60eb      	str	r3, [r5, #12]
 8005ea4:	6820      	ldr	r0, [r4, #0]
 8005ea6:	6128      	str	r0, [r5, #16]
 8005ea8:	88a3      	ldrh	r3, [r4, #4]
 8005eaa:	82ab      	strh	r3, [r5, #20]
			strcpy(p->grade, "6C");
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	33cc      	adds	r3, #204	; 0xcc
 8005eb0:	4a1e      	ldr	r2, [pc, #120]	; (8005f2c <problem_fetch+0x4c0c>)
 8005eb2:	8811      	ldrh	r1, [r2, #0]
 8005eb4:	7892      	ldrb	r2, [r2, #2]
 8005eb6:	8019      	strh	r1, [r3, #0]
 8005eb8:	709a      	strb	r2, [r3, #2]
			break;
 8005eba:	f014 bf77 	b.w	801adac <problem_fetch+0x19a8c>
		case 214 :
			strcpy(p->name,"BAMBINI");
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	337c      	adds	r3, #124	; 0x7c
 8005ec2:	492d      	ldr	r1, [pc, #180]	; (8005f78 <problem_fetch+0x4c58>)
 8005ec4:	461a      	mov	r2, r3
 8005ec6:	460b      	mov	r3, r1
 8005ec8:	cb03      	ldmia	r3!, {r0, r1}
 8005eca:	6010      	str	r0, [r2, #0]
 8005ecc:	6051      	str	r1, [r2, #4]
			p->moveSize = 6;
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	2206      	movs	r2, #6
 8005ed2:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"G,E,F,C,D,D");
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	3340      	adds	r3, #64	; 0x40
 8005ed8:	4a28      	ldr	r2, [pc, #160]	; (8005f7c <problem_fetch+0x4c5c>)
 8005eda:	461c      	mov	r4, r3
 8005edc:	4613      	mov	r3, r2
 8005ede:	cb07      	ldmia	r3!, {r0, r1, r2}
 8005ee0:	6020      	str	r0, [r4, #0]
 8005ee2:	6061      	str	r1, [r4, #4]
 8005ee4:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,8,11,13,15,18");
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	3304      	adds	r3, #4
 8005eea:	4a25      	ldr	r2, [pc, #148]	; (8005f80 <problem_fetch+0x4c60>)
 8005eec:	461c      	mov	r4, r3
 8005eee:	4615      	mov	r5, r2
 8005ef0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005ef2:	6020      	str	r0, [r4, #0]
 8005ef4:	6061      	str	r1, [r4, #4]
 8005ef6:	60a2      	str	r2, [r4, #8]
 8005ef8:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish, "s,d,d,d,d,e");
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	33d8      	adds	r3, #216	; 0xd8
 8005efe:	4a21      	ldr	r2, [pc, #132]	; (8005f84 <problem_fetch+0x4c64>)
 8005f00:	461c      	mov	r4, r3
 8005f02:	4613      	mov	r3, r2
 8005f04:	cb07      	ldmia	r3!, {r0, r1, r2}
 8005f06:	6020      	str	r0, [r4, #0]
 8005f08:	6061      	str	r1, [r4, #4]
 8005f0a:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade, "6B+");
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	33cc      	adds	r3, #204	; 0xcc
 8005f10:	4a10      	ldr	r2, [pc, #64]	; (8005f54 <problem_fetch+0x4c34>)
 8005f12:	6810      	ldr	r0, [r2, #0]
 8005f14:	6018      	str	r0, [r3, #0]
			break;
 8005f16:	f014 bf49 	b.w	801adac <problem_fetch+0x19a8c>
 8005f1a:	bf00      	nop
 8005f1c:	08022aa0 	.word	0x08022aa0
 8005f20:	08022ab0 	.word	0x08022ab0
 8005f24:	08022ac0 	.word	0x08022ac0
 8005f28:	08021458 	.word	0x08021458
 8005f2c:	08021370 	.word	0x08021370
 8005f30:	08022ad8 	.word	0x08022ad8
 8005f34:	08022ae8 	.word	0x08022ae8
 8005f38:	08022af4 	.word	0x08022af4
 8005f3c:	080221c8 	.word	0x080221c8
 8005f40:	0802132c 	.word	0x0802132c
 8005f44:	08022b04 	.word	0x08022b04
 8005f48:	08022b10 	.word	0x08022b10
 8005f4c:	08022b20 	.word	0x08022b20
 8005f50:	080214cc 	.word	0x080214cc
 8005f54:	080212b0 	.word	0x080212b0
 8005f58:	08022b34 	.word	0x08022b34
 8005f5c:	08022b40 	.word	0x08022b40
 8005f60:	08022b54 	.word	0x08022b54
 8005f64:	080215fc 	.word	0x080215fc
 8005f68:	08022b6c 	.word	0x08022b6c
 8005f6c:	08022b78 	.word	0x08022b78
 8005f70:	08022b90 	.word	0x08022b90
 8005f74:	08022a18 	.word	0x08022a18
 8005f78:	08022bac 	.word	0x08022bac
 8005f7c:	08022bb4 	.word	0x08022bb4
 8005f80:	08022bc0 	.word	0x08022bc0
 8005f84:	0802139c 	.word	0x0802139c
		case 215 :
			strcpy(p->name,"BLACK ON RICE");
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	337c      	adds	r3, #124	; 0x7c
 8005f8c:	4ab0      	ldr	r2, [pc, #704]	; (8006250 <problem_fetch+0x4f30>)
 8005f8e:	461c      	mov	r4, r3
 8005f90:	4613      	mov	r3, r2
 8005f92:	cb07      	ldmia	r3!, {r0, r1, r2}
 8005f94:	6020      	str	r0, [r4, #0]
 8005f96:	6061      	str	r1, [r4, #4]
 8005f98:	60a2      	str	r2, [r4, #8]
 8005f9a:	881b      	ldrh	r3, [r3, #0]
 8005f9c:	81a3      	strh	r3, [r4, #12]
			p->moveSize = 7;
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	2207      	movs	r2, #7
 8005fa2:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"J,G,E,H,E,C,A");
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	3340      	adds	r3, #64	; 0x40
 8005fa8:	4aaa      	ldr	r2, [pc, #680]	; (8006254 <problem_fetch+0x4f34>)
 8005faa:	461c      	mov	r4, r3
 8005fac:	4613      	mov	r3, r2
 8005fae:	cb07      	ldmia	r3!, {r0, r1, r2}
 8005fb0:	6020      	str	r0, [r4, #0]
 8005fb2:	6061      	str	r1, [r4, #4]
 8005fb4:	60a2      	str	r2, [r4, #8]
 8005fb6:	881b      	ldrh	r3, [r3, #0]
 8005fb8:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,4,8,10,16,13,18");
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	3304      	adds	r3, #4
 8005fbe:	4aa6      	ldr	r2, [pc, #664]	; (8006258 <problem_fetch+0x4f38>)
 8005fc0:	461d      	mov	r5, r3
 8005fc2:	4614      	mov	r4, r2
 8005fc4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005fc6:	6028      	str	r0, [r5, #0]
 8005fc8:	6069      	str	r1, [r5, #4]
 8005fca:	60aa      	str	r2, [r5, #8]
 8005fcc:	60eb      	str	r3, [r5, #12]
 8005fce:	8823      	ldrh	r3, [r4, #0]
 8005fd0:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish, "s,s,d,d,d,d,e");
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	33d8      	adds	r3, #216	; 0xd8
 8005fd6:	4aa1      	ldr	r2, [pc, #644]	; (800625c <problem_fetch+0x4f3c>)
 8005fd8:	461c      	mov	r4, r3
 8005fda:	4613      	mov	r3, r2
 8005fdc:	cb07      	ldmia	r3!, {r0, r1, r2}
 8005fde:	6020      	str	r0, [r4, #0]
 8005fe0:	6061      	str	r1, [r4, #4]
 8005fe2:	60a2      	str	r2, [r4, #8]
 8005fe4:	881b      	ldrh	r3, [r3, #0]
 8005fe6:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade, "6C+");
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	33cc      	adds	r3, #204	; 0xcc
 8005fec:	4a9c      	ldr	r2, [pc, #624]	; (8006260 <problem_fetch+0x4f40>)
 8005fee:	6810      	ldr	r0, [r2, #0]
 8005ff0:	6018      	str	r0, [r3, #0]
			break;
 8005ff2:	f014 bedb 	b.w	801adac <problem_fetch+0x19a8c>
		case 216 :
			strcpy(p->name,"ALL BLACK ERRTHANG");
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	337c      	adds	r3, #124	; 0x7c
 8005ffa:	4a9a      	ldr	r2, [pc, #616]	; (8006264 <problem_fetch+0x4f44>)
 8005ffc:	461d      	mov	r5, r3
 8005ffe:	4614      	mov	r4, r2
 8006000:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006002:	6028      	str	r0, [r5, #0]
 8006004:	6069      	str	r1, [r5, #4]
 8006006:	60aa      	str	r2, [r5, #8]
 8006008:	60eb      	str	r3, [r5, #12]
 800600a:	8823      	ldrh	r3, [r4, #0]
 800600c:	78a2      	ldrb	r2, [r4, #2]
 800600e:	822b      	strh	r3, [r5, #16]
 8006010:	4613      	mov	r3, r2
 8006012:	74ab      	strb	r3, [r5, #18]
			p->moveSize = 5;
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	2205      	movs	r2, #5
 8006018:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"J,I,E,G,A");
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	3340      	adds	r3, #64	; 0x40
 800601e:	4992      	ldr	r1, [pc, #584]	; (8006268 <problem_fetch+0x4f48>)
 8006020:	461a      	mov	r2, r3
 8006022:	460b      	mov	r3, r1
 8006024:	cb03      	ldmia	r3!, {r0, r1}
 8006026:	6010      	str	r0, [r2, #0]
 8006028:	6051      	str	r1, [r2, #4]
 800602a:	881b      	ldrh	r3, [r3, #0]
 800602c:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"5,10,14,17,18");
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	3304      	adds	r3, #4
 8006032:	4a8e      	ldr	r2, [pc, #568]	; (800626c <problem_fetch+0x4f4c>)
 8006034:	461c      	mov	r4, r3
 8006036:	4613      	mov	r3, r2
 8006038:	cb07      	ldmia	r3!, {r0, r1, r2}
 800603a:	6020      	str	r0, [r4, #0]
 800603c:	6061      	str	r1, [r4, #4]
 800603e:	60a2      	str	r2, [r4, #8]
 8006040:	881b      	ldrh	r3, [r3, #0]
 8006042:	81a3      	strh	r3, [r4, #12]
			strcpy(p->startFinish, "s,d,d,d,e");
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	33d8      	adds	r3, #216	; 0xd8
 8006048:	4989      	ldr	r1, [pc, #548]	; (8006270 <problem_fetch+0x4f50>)
 800604a:	461a      	mov	r2, r3
 800604c:	460b      	mov	r3, r1
 800604e:	cb03      	ldmia	r3!, {r0, r1}
 8006050:	6010      	str	r0, [r2, #0]
 8006052:	6051      	str	r1, [r2, #4]
 8006054:	881b      	ldrh	r3, [r3, #0]
 8006056:	8113      	strh	r3, [r2, #8]
			strcpy(p->grade, "7C");
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	33cc      	adds	r3, #204	; 0xcc
 800605c:	4a85      	ldr	r2, [pc, #532]	; (8006274 <problem_fetch+0x4f54>)
 800605e:	8811      	ldrh	r1, [r2, #0]
 8006060:	7892      	ldrb	r2, [r2, #2]
 8006062:	8019      	strh	r1, [r3, #0]
 8006064:	709a      	strb	r2, [r3, #2]
			break;
 8006066:	f014 bea1 	b.w	801adac <problem_fetch+0x19a8c>
		case 217 :
			strcpy(p->name,"MO6.1");
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	337c      	adds	r3, #124	; 0x7c
 800606e:	4a82      	ldr	r2, [pc, #520]	; (8006278 <problem_fetch+0x4f58>)
 8006070:	6810      	ldr	r0, [r2, #0]
 8006072:	6018      	str	r0, [r3, #0]
 8006074:	8892      	ldrh	r2, [r2, #4]
 8006076:	809a      	strh	r2, [r3, #4]
			p->moveSize = 6;
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	2206      	movs	r2, #6
 800607c:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"J,H,H,D,D,D");
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	3340      	adds	r3, #64	; 0x40
 8006082:	4a7e      	ldr	r2, [pc, #504]	; (800627c <problem_fetch+0x4f5c>)
 8006084:	461c      	mov	r4, r3
 8006086:	4613      	mov	r3, r2
 8006088:	cb07      	ldmia	r3!, {r0, r1, r2}
 800608a:	6020      	str	r0, [r4, #0]
 800608c:	6061      	str	r1, [r4, #4]
 800608e:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,5,10,15,11,18");
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	3304      	adds	r3, #4
 8006094:	4a7a      	ldr	r2, [pc, #488]	; (8006280 <problem_fetch+0x4f60>)
 8006096:	461c      	mov	r4, r3
 8006098:	4615      	mov	r5, r2
 800609a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800609c:	6020      	str	r0, [r4, #0]
 800609e:	6061      	str	r1, [r4, #4]
 80060a0:	60a2      	str	r2, [r4, #8]
 80060a2:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish, "s,d,d,d,d,e");
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	33d8      	adds	r3, #216	; 0xd8
 80060a8:	4a76      	ldr	r2, [pc, #472]	; (8006284 <problem_fetch+0x4f64>)
 80060aa:	461c      	mov	r4, r3
 80060ac:	4613      	mov	r3, r2
 80060ae:	cb07      	ldmia	r3!, {r0, r1, r2}
 80060b0:	6020      	str	r0, [r4, #0]
 80060b2:	6061      	str	r1, [r4, #4]
 80060b4:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade, "7A");
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	33cc      	adds	r3, #204	; 0xcc
 80060ba:	4a73      	ldr	r2, [pc, #460]	; (8006288 <problem_fetch+0x4f68>)
 80060bc:	8811      	ldrh	r1, [r2, #0]
 80060be:	7892      	ldrb	r2, [r2, #2]
 80060c0:	8019      	strh	r1, [r3, #0]
 80060c2:	709a      	strb	r2, [r3, #2]
			break;
 80060c4:	f014 be72 	b.w	801adac <problem_fetch+0x19a8c>
		case 218 :
			strcpy(p->name,"LONDON FROG");
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	337c      	adds	r3, #124	; 0x7c
 80060cc:	4a6f      	ldr	r2, [pc, #444]	; (800628c <problem_fetch+0x4f6c>)
 80060ce:	461c      	mov	r4, r3
 80060d0:	4613      	mov	r3, r2
 80060d2:	cb07      	ldmia	r3!, {r0, r1, r2}
 80060d4:	6020      	str	r0, [r4, #0]
 80060d6:	6061      	str	r1, [r4, #4]
 80060d8:	60a2      	str	r2, [r4, #8]
			p->moveSize = 6;
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	2206      	movs	r2, #6
 80060de:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"G,J,G,F,I,I");
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	3340      	adds	r3, #64	; 0x40
 80060e4:	4a6a      	ldr	r2, [pc, #424]	; (8006290 <problem_fetch+0x4f70>)
 80060e6:	461c      	mov	r4, r3
 80060e8:	4613      	mov	r3, r2
 80060ea:	cb07      	ldmia	r3!, {r0, r1, r2}
 80060ec:	6020      	str	r0, [r4, #0]
 80060ee:	6061      	str	r1, [r4, #4]
 80060f0:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,7,9,11,14,18");
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	3304      	adds	r3, #4
 80060f6:	4a67      	ldr	r2, [pc, #412]	; (8006294 <problem_fetch+0x4f74>)
 80060f8:	461c      	mov	r4, r3
 80060fa:	4613      	mov	r3, r2
 80060fc:	cb07      	ldmia	r3!, {r0, r1, r2}
 80060fe:	6020      	str	r0, [r4, #0]
 8006100:	6061      	str	r1, [r4, #4]
 8006102:	60a2      	str	r2, [r4, #8]
 8006104:	881a      	ldrh	r2, [r3, #0]
 8006106:	789b      	ldrb	r3, [r3, #2]
 8006108:	81a2      	strh	r2, [r4, #12]
 800610a:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish, "s,d,d,d,d,e");
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	33d8      	adds	r3, #216	; 0xd8
 8006110:	4a5c      	ldr	r2, [pc, #368]	; (8006284 <problem_fetch+0x4f64>)
 8006112:	461c      	mov	r4, r3
 8006114:	4613      	mov	r3, r2
 8006116:	cb07      	ldmia	r3!, {r0, r1, r2}
 8006118:	6020      	str	r0, [r4, #0]
 800611a:	6061      	str	r1, [r4, #4]
 800611c:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade, "7A");
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	33cc      	adds	r3, #204	; 0xcc
 8006122:	4a59      	ldr	r2, [pc, #356]	; (8006288 <problem_fetch+0x4f68>)
 8006124:	8811      	ldrh	r1, [r2, #0]
 8006126:	7892      	ldrb	r2, [r2, #2]
 8006128:	8019      	strh	r1, [r3, #0]
 800612a:	709a      	strb	r2, [r3, #2]
			break;
 800612c:	f014 be3e 	b.w	801adac <problem_fetch+0x19a8c>
		case 219 :
			strcpy(p->name,"CAPTAIN AUBREY");
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	337c      	adds	r3, #124	; 0x7c
 8006134:	4a58      	ldr	r2, [pc, #352]	; (8006298 <problem_fetch+0x4f78>)
 8006136:	461c      	mov	r4, r3
 8006138:	4613      	mov	r3, r2
 800613a:	cb07      	ldmia	r3!, {r0, r1, r2}
 800613c:	6020      	str	r0, [r4, #0]
 800613e:	6061      	str	r1, [r4, #4]
 8006140:	60a2      	str	r2, [r4, #8]
 8006142:	881a      	ldrh	r2, [r3, #0]
 8006144:	789b      	ldrb	r3, [r3, #2]
 8006146:	81a2      	strh	r2, [r4, #12]
 8006148:	73a3      	strb	r3, [r4, #14]
			p->moveSize = 5;
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	2205      	movs	r2, #5
 800614e:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"J,H,F,I,I");
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	3340      	adds	r3, #64	; 0x40
 8006154:	4951      	ldr	r1, [pc, #324]	; (800629c <problem_fetch+0x4f7c>)
 8006156:	461a      	mov	r2, r3
 8006158:	460b      	mov	r3, r1
 800615a:	cb03      	ldmia	r3!, {r0, r1}
 800615c:	6010      	str	r0, [r2, #0]
 800615e:	6051      	str	r1, [r2, #4]
 8006160:	881b      	ldrh	r3, [r3, #0]
 8006162:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"5,8,11,14,18");
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	3304      	adds	r3, #4
 8006168:	4a4d      	ldr	r2, [pc, #308]	; (80062a0 <problem_fetch+0x4f80>)
 800616a:	461c      	mov	r4, r3
 800616c:	4613      	mov	r3, r2
 800616e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8006170:	6020      	str	r0, [r4, #0]
 8006172:	6061      	str	r1, [r4, #4]
 8006174:	60a2      	str	r2, [r4, #8]
 8006176:	781b      	ldrb	r3, [r3, #0]
 8006178:	7323      	strb	r3, [r4, #12]
			strcpy(p->startFinish, "s,d,d,d,e");
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	33d8      	adds	r3, #216	; 0xd8
 800617e:	493c      	ldr	r1, [pc, #240]	; (8006270 <problem_fetch+0x4f50>)
 8006180:	461a      	mov	r2, r3
 8006182:	460b      	mov	r3, r1
 8006184:	cb03      	ldmia	r3!, {r0, r1}
 8006186:	6010      	str	r0, [r2, #0]
 8006188:	6051      	str	r1, [r2, #4]
 800618a:	881b      	ldrh	r3, [r3, #0]
 800618c:	8113      	strh	r3, [r2, #8]
			strcpy(p->grade, "7A+");
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	33cc      	adds	r3, #204	; 0xcc
 8006192:	4a44      	ldr	r2, [pc, #272]	; (80062a4 <problem_fetch+0x4f84>)
 8006194:	6810      	ldr	r0, [r2, #0]
 8006196:	6018      	str	r0, [r3, #0]
			break;
 8006198:	f014 be08 	b.w	801adac <problem_fetch+0x19a8c>
		case 22 :
			strcpy(p->name,"ANA");
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	337c      	adds	r3, #124	; 0x7c
 80061a0:	4a41      	ldr	r2, [pc, #260]	; (80062a8 <problem_fetch+0x4f88>)
 80061a2:	6810      	ldr	r0, [r2, #0]
 80061a4:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	2206      	movs	r2, #6
 80061aa:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"H,J,I,H,E,D");
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	3340      	adds	r3, #64	; 0x40
 80061b0:	4a3e      	ldr	r2, [pc, #248]	; (80062ac <problem_fetch+0x4f8c>)
 80061b2:	461c      	mov	r4, r3
 80061b4:	4613      	mov	r3, r2
 80061b6:	cb07      	ldmia	r3!, {r0, r1, r2}
 80061b8:	6020      	str	r0, [r4, #0]
 80061ba:	6061      	str	r1, [r4, #4]
 80061bc:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,7,10,13,16,18");
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	3304      	adds	r3, #4
 80061c2:	4a3b      	ldr	r2, [pc, #236]	; (80062b0 <problem_fetch+0x4f90>)
 80061c4:	461c      	mov	r4, r3
 80061c6:	4615      	mov	r5, r2
 80061c8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80061ca:	6020      	str	r0, [r4, #0]
 80061cc:	6061      	str	r1, [r4, #4]
 80061ce:	60a2      	str	r2, [r4, #8]
 80061d0:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish, "s,d,d,d,d,e");
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	33d8      	adds	r3, #216	; 0xd8
 80061d6:	4a2b      	ldr	r2, [pc, #172]	; (8006284 <problem_fetch+0x4f64>)
 80061d8:	461c      	mov	r4, r3
 80061da:	4613      	mov	r3, r2
 80061dc:	cb07      	ldmia	r3!, {r0, r1, r2}
 80061de:	6020      	str	r0, [r4, #0]
 80061e0:	6061      	str	r1, [r4, #4]
 80061e2:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade, "6B+");
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	33cc      	adds	r3, #204	; 0xcc
 80061e8:	4a32      	ldr	r2, [pc, #200]	; (80062b4 <problem_fetch+0x4f94>)
 80061ea:	6810      	ldr	r0, [r2, #0]
 80061ec:	6018      	str	r0, [r3, #0]
			break;
 80061ee:	f014 bddd 	b.w	801adac <problem_fetch+0x19a8c>
		case 220 :
			strcpy(p->name,"BOUJEE");
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	337c      	adds	r3, #124	; 0x7c
 80061f6:	4a30      	ldr	r2, [pc, #192]	; (80062b8 <problem_fetch+0x4f98>)
 80061f8:	6810      	ldr	r0, [r2, #0]
 80061fa:	6018      	str	r0, [r3, #0]
 80061fc:	8891      	ldrh	r1, [r2, #4]
 80061fe:	7992      	ldrb	r2, [r2, #6]
 8006200:	8099      	strh	r1, [r3, #4]
 8006202:	719a      	strb	r2, [r3, #6]
			p->moveSize = 6;
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	2206      	movs	r2, #6
 8006208:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"G,C,D,H,C,D");
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	3340      	adds	r3, #64	; 0x40
 800620e:	4a2b      	ldr	r2, [pc, #172]	; (80062bc <problem_fetch+0x4f9c>)
 8006210:	461c      	mov	r4, r3
 8006212:	4613      	mov	r3, r2
 8006214:	cb07      	ldmia	r3!, {r0, r1, r2}
 8006216:	6020      	str	r0, [r4, #0]
 8006218:	6061      	str	r1, [r4, #4]
 800621a:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,13,15,10,8,18");
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	3304      	adds	r3, #4
 8006220:	4a27      	ldr	r2, [pc, #156]	; (80062c0 <problem_fetch+0x4fa0>)
 8006222:	461c      	mov	r4, r3
 8006224:	4615      	mov	r5, r2
 8006226:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006228:	6020      	str	r0, [r4, #0]
 800622a:	6061      	str	r1, [r4, #4]
 800622c:	60a2      	str	r2, [r4, #8]
 800622e:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish, "s,d,d,d,d,e");
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	33d8      	adds	r3, #216	; 0xd8
 8006234:	4a13      	ldr	r2, [pc, #76]	; (8006284 <problem_fetch+0x4f64>)
 8006236:	461c      	mov	r4, r3
 8006238:	4613      	mov	r3, r2
 800623a:	cb07      	ldmia	r3!, {r0, r1, r2}
 800623c:	6020      	str	r0, [r4, #0]
 800623e:	6061      	str	r1, [r4, #4]
 8006240:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade, "7A+");
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	33cc      	adds	r3, #204	; 0xcc
 8006246:	4a17      	ldr	r2, [pc, #92]	; (80062a4 <problem_fetch+0x4f84>)
 8006248:	6810      	ldr	r0, [r2, #0]
 800624a:	6018      	str	r0, [r3, #0]
			break;
 800624c:	f014 bdae 	b.w	801adac <problem_fetch+0x19a8c>
 8006250:	08022bd0 	.word	0x08022bd0
 8006254:	08022be0 	.word	0x08022be0
 8006258:	08022bf0 	.word	0x08022bf0
 800625c:	080212a0 	.word	0x080212a0
 8006260:	080213a8 	.word	0x080213a8
 8006264:	08022c04 	.word	0x08022c04
 8006268:	08022c18 	.word	0x08022c18
 800626c:	08022c24 	.word	0x08022c24
 8006270:	08021320 	.word	0x08021320
 8006274:	0802158c 	.word	0x0802158c
 8006278:	08022c34 	.word	0x08022c34
 800627c:	08022c3c 	.word	0x08022c3c
 8006280:	08022c48 	.word	0x08022c48
 8006284:	0802139c 	.word	0x0802139c
 8006288:	080212f4 	.word	0x080212f4
 800628c:	08022c58 	.word	0x08022c58
 8006290:	08022c64 	.word	0x08022c64
 8006294:	08022c70 	.word	0x08022c70
 8006298:	08022c80 	.word	0x08022c80
 800629c:	08022c90 	.word	0x08022c90
 80062a0:	08022c9c 	.word	0x08022c9c
 80062a4:	08021424 	.word	0x08021424
 80062a8:	08022cac 	.word	0x08022cac
 80062ac:	08022cb0 	.word	0x08022cb0
 80062b0:	08022140 	.word	0x08022140
 80062b4:	080212b0 	.word	0x080212b0
 80062b8:	08022cbc 	.word	0x08022cbc
 80062bc:	08022cc4 	.word	0x08022cc4
 80062c0:	08022cd0 	.word	0x08022cd0
		case 221 :
			strcpy(p->name,"PURPLE IN THE OPEN");
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	337c      	adds	r3, #124	; 0x7c
 80062c8:	4abd      	ldr	r2, [pc, #756]	; (80065c0 <problem_fetch+0x52a0>)
 80062ca:	461d      	mov	r5, r3
 80062cc:	4614      	mov	r4, r2
 80062ce:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80062d0:	6028      	str	r0, [r5, #0]
 80062d2:	6069      	str	r1, [r5, #4]
 80062d4:	60aa      	str	r2, [r5, #8]
 80062d6:	60eb      	str	r3, [r5, #12]
 80062d8:	8823      	ldrh	r3, [r4, #0]
 80062da:	78a2      	ldrb	r2, [r4, #2]
 80062dc:	822b      	strh	r3, [r5, #16]
 80062de:	4613      	mov	r3, r2
 80062e0:	74ab      	strb	r3, [r5, #18]
			p->moveSize = 7;
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	2207      	movs	r2, #7
 80062e6:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"E,C,E,D,I,H,I");
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	3340      	adds	r3, #64	; 0x40
 80062ec:	4ab5      	ldr	r2, [pc, #724]	; (80065c4 <problem_fetch+0x52a4>)
 80062ee:	461c      	mov	r4, r3
 80062f0:	4613      	mov	r3, r2
 80062f2:	cb07      	ldmia	r3!, {r0, r1, r2}
 80062f4:	6020      	str	r0, [r4, #0]
 80062f6:	6061      	str	r1, [r4, #4]
 80062f8:	60a2      	str	r2, [r4, #8]
 80062fa:	881b      	ldrh	r3, [r3, #0]
 80062fc:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"6,8,12,11,14,16,18");
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	3304      	adds	r3, #4
 8006302:	4ab1      	ldr	r2, [pc, #708]	; (80065c8 <problem_fetch+0x52a8>)
 8006304:	461d      	mov	r5, r3
 8006306:	4614      	mov	r4, r2
 8006308:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800630a:	6028      	str	r0, [r5, #0]
 800630c:	6069      	str	r1, [r5, #4]
 800630e:	60aa      	str	r2, [r5, #8]
 8006310:	60eb      	str	r3, [r5, #12]
 8006312:	8823      	ldrh	r3, [r4, #0]
 8006314:	78a2      	ldrb	r2, [r4, #2]
 8006316:	822b      	strh	r3, [r5, #16]
 8006318:	4613      	mov	r3, r2
 800631a:	74ab      	strb	r3, [r5, #18]
			strcpy(p->startFinish, "s,d,d,d,d,d,e");
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	33d8      	adds	r3, #216	; 0xd8
 8006320:	4aaa      	ldr	r2, [pc, #680]	; (80065cc <problem_fetch+0x52ac>)
 8006322:	461c      	mov	r4, r3
 8006324:	4613      	mov	r3, r2
 8006326:	cb07      	ldmia	r3!, {r0, r1, r2}
 8006328:	6020      	str	r0, [r4, #0]
 800632a:	6061      	str	r1, [r4, #4]
 800632c:	60a2      	str	r2, [r4, #8]
 800632e:	881b      	ldrh	r3, [r3, #0]
 8006330:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade, "7B");
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	33cc      	adds	r3, #204	; 0xcc
 8006336:	4aa6      	ldr	r2, [pc, #664]	; (80065d0 <problem_fetch+0x52b0>)
 8006338:	8811      	ldrh	r1, [r2, #0]
 800633a:	7892      	ldrb	r2, [r2, #2]
 800633c:	8019      	strh	r1, [r3, #0]
 800633e:	709a      	strb	r2, [r3, #2]
			break;
 8006340:	f014 bd34 	b.w	801adac <problem_fetch+0x19a8c>
		case 222 :
			strcpy(p->name,"THE REAL \"ONE\"");
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	337c      	adds	r3, #124	; 0x7c
 8006348:	4aa2      	ldr	r2, [pc, #648]	; (80065d4 <problem_fetch+0x52b4>)
 800634a:	461c      	mov	r4, r3
 800634c:	4613      	mov	r3, r2
 800634e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8006350:	6020      	str	r0, [r4, #0]
 8006352:	6061      	str	r1, [r4, #4]
 8006354:	60a2      	str	r2, [r4, #8]
 8006356:	881a      	ldrh	r2, [r3, #0]
 8006358:	789b      	ldrb	r3, [r3, #2]
 800635a:	81a2      	strh	r2, [r4, #12]
 800635c:	73a3      	strb	r3, [r4, #14]
			p->moveSize = 7;
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	2207      	movs	r2, #7
 8006362:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"G,E,E,C,E,E,I");
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	3340      	adds	r3, #64	; 0x40
 8006368:	4a9b      	ldr	r2, [pc, #620]	; (80065d8 <problem_fetch+0x52b8>)
 800636a:	461c      	mov	r4, r3
 800636c:	4613      	mov	r3, r2
 800636e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8006370:	6020      	str	r0, [r4, #0]
 8006372:	6061      	str	r1, [r4, #4]
 8006374:	60a2      	str	r2, [r4, #8]
 8006376:	881b      	ldrh	r3, [r3, #0]
 8006378:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,8,9,13,14,16,18");
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	3304      	adds	r3, #4
 800637e:	4a97      	ldr	r2, [pc, #604]	; (80065dc <problem_fetch+0x52bc>)
 8006380:	461d      	mov	r5, r3
 8006382:	4614      	mov	r4, r2
 8006384:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006386:	6028      	str	r0, [r5, #0]
 8006388:	6069      	str	r1, [r5, #4]
 800638a:	60aa      	str	r2, [r5, #8]
 800638c:	60eb      	str	r3, [r5, #12]
 800638e:	8823      	ldrh	r3, [r4, #0]
 8006390:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish, "s,d,d,d,d,d,e");
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	33d8      	adds	r3, #216	; 0xd8
 8006396:	4a8d      	ldr	r2, [pc, #564]	; (80065cc <problem_fetch+0x52ac>)
 8006398:	461c      	mov	r4, r3
 800639a:	4613      	mov	r3, r2
 800639c:	cb07      	ldmia	r3!, {r0, r1, r2}
 800639e:	6020      	str	r0, [r4, #0]
 80063a0:	6061      	str	r1, [r4, #4]
 80063a2:	60a2      	str	r2, [r4, #8]
 80063a4:	881b      	ldrh	r3, [r3, #0]
 80063a6:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade, "6B+");
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	33cc      	adds	r3, #204	; 0xcc
 80063ac:	4a8c      	ldr	r2, [pc, #560]	; (80065e0 <problem_fetch+0x52c0>)
 80063ae:	6810      	ldr	r0, [r2, #0]
 80063b0:	6018      	str	r0, [r3, #0]
			break;
 80063b2:	f014 bcfb 	b.w	801adac <problem_fetch+0x19a8c>
		case 223 :
			strcpy(p->name,"BLACK TIGER");
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	337c      	adds	r3, #124	; 0x7c
 80063ba:	4a8a      	ldr	r2, [pc, #552]	; (80065e4 <problem_fetch+0x52c4>)
 80063bc:	461c      	mov	r4, r3
 80063be:	4613      	mov	r3, r2
 80063c0:	cb07      	ldmia	r3!, {r0, r1, r2}
 80063c2:	6020      	str	r0, [r4, #0]
 80063c4:	6061      	str	r1, [r4, #4]
 80063c6:	60a2      	str	r2, [r4, #8]
			p->moveSize = 5;
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	2205      	movs	r2, #5
 80063cc:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"H,K,H,K,I");
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	3340      	adds	r3, #64	; 0x40
 80063d2:	4985      	ldr	r1, [pc, #532]	; (80065e8 <problem_fetch+0x52c8>)
 80063d4:	461a      	mov	r2, r3
 80063d6:	460b      	mov	r3, r1
 80063d8:	cb03      	ldmia	r3!, {r0, r1}
 80063da:	6010      	str	r0, [r2, #0]
 80063dc:	6051      	str	r1, [r2, #4]
 80063de:	881b      	ldrh	r3, [r3, #0]
 80063e0:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"5,9,12,14,18");
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	3304      	adds	r3, #4
 80063e6:	4a81      	ldr	r2, [pc, #516]	; (80065ec <problem_fetch+0x52cc>)
 80063e8:	461c      	mov	r4, r3
 80063ea:	4613      	mov	r3, r2
 80063ec:	cb07      	ldmia	r3!, {r0, r1, r2}
 80063ee:	6020      	str	r0, [r4, #0]
 80063f0:	6061      	str	r1, [r4, #4]
 80063f2:	60a2      	str	r2, [r4, #8]
 80063f4:	781b      	ldrb	r3, [r3, #0]
 80063f6:	7323      	strb	r3, [r4, #12]
			strcpy(p->startFinish, "s,d,d,d,e");
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	33d8      	adds	r3, #216	; 0xd8
 80063fc:	497c      	ldr	r1, [pc, #496]	; (80065f0 <problem_fetch+0x52d0>)
 80063fe:	461a      	mov	r2, r3
 8006400:	460b      	mov	r3, r1
 8006402:	cb03      	ldmia	r3!, {r0, r1}
 8006404:	6010      	str	r0, [r2, #0]
 8006406:	6051      	str	r1, [r2, #4]
 8006408:	881b      	ldrh	r3, [r3, #0]
 800640a:	8113      	strh	r3, [r2, #8]
			strcpy(p->grade, "6C+");
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	33cc      	adds	r3, #204	; 0xcc
 8006410:	4a78      	ldr	r2, [pc, #480]	; (80065f4 <problem_fetch+0x52d4>)
 8006412:	6810      	ldr	r0, [r2, #0]
 8006414:	6018      	str	r0, [r3, #0]
			break;
 8006416:	f014 bcc9 	b.w	801adac <problem_fetch+0x19a8c>
		case 224 :
			strcpy(p->name,"STREETS OF GOLD");
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	337c      	adds	r3, #124	; 0x7c
 800641e:	4a76      	ldr	r2, [pc, #472]	; (80065f8 <problem_fetch+0x52d8>)
 8006420:	461c      	mov	r4, r3
 8006422:	4615      	mov	r5, r2
 8006424:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006426:	6020      	str	r0, [r4, #0]
 8006428:	6061      	str	r1, [r4, #4]
 800642a:	60a2      	str	r2, [r4, #8]
 800642c:	60e3      	str	r3, [r4, #12]
			p->moveSize = 6;
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	2206      	movs	r2, #6
 8006432:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"H,C,K,F,B,A");
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	3340      	adds	r3, #64	; 0x40
 8006438:	4a70      	ldr	r2, [pc, #448]	; (80065fc <problem_fetch+0x52dc>)
 800643a:	461c      	mov	r4, r3
 800643c:	4613      	mov	r3, r2
 800643e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8006440:	6020      	str	r0, [r4, #0]
 8006442:	6061      	str	r1, [r4, #4]
 8006444:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,16,9,11,15,18");
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	3304      	adds	r3, #4
 800644a:	4a6d      	ldr	r2, [pc, #436]	; (8006600 <problem_fetch+0x52e0>)
 800644c:	461c      	mov	r4, r3
 800644e:	4615      	mov	r5, r2
 8006450:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006452:	6020      	str	r0, [r4, #0]
 8006454:	6061      	str	r1, [r4, #4]
 8006456:	60a2      	str	r2, [r4, #8]
 8006458:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish, "s,d,d,d,d,e");
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	33d8      	adds	r3, #216	; 0xd8
 800645e:	4a69      	ldr	r2, [pc, #420]	; (8006604 <problem_fetch+0x52e4>)
 8006460:	461c      	mov	r4, r3
 8006462:	4613      	mov	r3, r2
 8006464:	cb07      	ldmia	r3!, {r0, r1, r2}
 8006466:	6020      	str	r0, [r4, #0]
 8006468:	6061      	str	r1, [r4, #4]
 800646a:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade, "7B+");
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	33cc      	adds	r3, #204	; 0xcc
 8006470:	4a65      	ldr	r2, [pc, #404]	; (8006608 <problem_fetch+0x52e8>)
 8006472:	6810      	ldr	r0, [r2, #0]
 8006474:	6018      	str	r0, [r3, #0]
			break;
 8006476:	f014 bc99 	b.w	801adac <problem_fetch+0x19a8c>
		case 225 :
			strcpy(p->name,"BISCUITS RETURNS");
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	337c      	adds	r3, #124	; 0x7c
 800647e:	4a63      	ldr	r2, [pc, #396]	; (800660c <problem_fetch+0x52ec>)
 8006480:	461d      	mov	r5, r3
 8006482:	4614      	mov	r4, r2
 8006484:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006486:	6028      	str	r0, [r5, #0]
 8006488:	6069      	str	r1, [r5, #4]
 800648a:	60aa      	str	r2, [r5, #8]
 800648c:	60eb      	str	r3, [r5, #12]
 800648e:	7823      	ldrb	r3, [r4, #0]
 8006490:	742b      	strb	r3, [r5, #16]
			p->moveSize = 6;
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	2206      	movs	r2, #6
 8006496:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"J,G,H,C,D,D");
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	3340      	adds	r3, #64	; 0x40
 800649c:	4a5c      	ldr	r2, [pc, #368]	; (8006610 <problem_fetch+0x52f0>)
 800649e:	461c      	mov	r4, r3
 80064a0:	4613      	mov	r3, r2
 80064a2:	cb07      	ldmia	r3!, {r0, r1, r2}
 80064a4:	6020      	str	r0, [r4, #0]
 80064a6:	6061      	str	r1, [r4, #4]
 80064a8:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,6,10,13,15,18");
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	3304      	adds	r3, #4
 80064ae:	4a59      	ldr	r2, [pc, #356]	; (8006614 <problem_fetch+0x52f4>)
 80064b0:	461c      	mov	r4, r3
 80064b2:	4615      	mov	r5, r2
 80064b4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80064b6:	6020      	str	r0, [r4, #0]
 80064b8:	6061      	str	r1, [r4, #4]
 80064ba:	60a2      	str	r2, [r4, #8]
 80064bc:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish, "s,s,d,d,d,e");
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	33d8      	adds	r3, #216	; 0xd8
 80064c2:	4a55      	ldr	r2, [pc, #340]	; (8006618 <problem_fetch+0x52f8>)
 80064c4:	461c      	mov	r4, r3
 80064c6:	4613      	mov	r3, r2
 80064c8:	cb07      	ldmia	r3!, {r0, r1, r2}
 80064ca:	6020      	str	r0, [r4, #0]
 80064cc:	6061      	str	r1, [r4, #4]
 80064ce:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade, "6B+");
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	33cc      	adds	r3, #204	; 0xcc
 80064d4:	4a42      	ldr	r2, [pc, #264]	; (80065e0 <problem_fetch+0x52c0>)
 80064d6:	6810      	ldr	r0, [r2, #0]
 80064d8:	6018      	str	r0, [r3, #0]
			break;
 80064da:	f014 bc67 	b.w	801adac <problem_fetch+0x19a8c>
		case 226 :
			strcpy(p->name,"OPPOSITES");
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	337c      	adds	r3, #124	; 0x7c
 80064e2:	494e      	ldr	r1, [pc, #312]	; (800661c <problem_fetch+0x52fc>)
 80064e4:	461a      	mov	r2, r3
 80064e6:	460b      	mov	r3, r1
 80064e8:	cb03      	ldmia	r3!, {r0, r1}
 80064ea:	6010      	str	r0, [r2, #0]
 80064ec:	6051      	str	r1, [r2, #4]
 80064ee:	881b      	ldrh	r3, [r3, #0]
 80064f0:	8113      	strh	r3, [r2, #8]
			p->moveSize = 7;
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	2207      	movs	r2, #7
 80064f6:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"J,G,H,J,F,G,D");
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	3340      	adds	r3, #64	; 0x40
 80064fc:	4a48      	ldr	r2, [pc, #288]	; (8006620 <problem_fetch+0x5300>)
 80064fe:	461c      	mov	r4, r3
 8006500:	4613      	mov	r3, r2
 8006502:	cb07      	ldmia	r3!, {r0, r1, r2}
 8006504:	6020      	str	r0, [r4, #0]
 8006506:	6061      	str	r1, [r4, #4]
 8006508:	60a2      	str	r2, [r4, #8]
 800650a:	881b      	ldrh	r3, [r3, #0]
 800650c:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,9,8,12,13,15,18");
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	3304      	adds	r3, #4
 8006512:	4a44      	ldr	r2, [pc, #272]	; (8006624 <problem_fetch+0x5304>)
 8006514:	461d      	mov	r5, r3
 8006516:	4614      	mov	r4, r2
 8006518:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800651a:	6028      	str	r0, [r5, #0]
 800651c:	6069      	str	r1, [r5, #4]
 800651e:	60aa      	str	r2, [r5, #8]
 8006520:	60eb      	str	r3, [r5, #12]
 8006522:	8823      	ldrh	r3, [r4, #0]
 8006524:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish, "s,d,d,d,d,d,e");
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	33d8      	adds	r3, #216	; 0xd8
 800652a:	4a28      	ldr	r2, [pc, #160]	; (80065cc <problem_fetch+0x52ac>)
 800652c:	461c      	mov	r4, r3
 800652e:	4613      	mov	r3, r2
 8006530:	cb07      	ldmia	r3!, {r0, r1, r2}
 8006532:	6020      	str	r0, [r4, #0]
 8006534:	6061      	str	r1, [r4, #4]
 8006536:	60a2      	str	r2, [r4, #8]
 8006538:	881b      	ldrh	r3, [r3, #0]
 800653a:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade, "7B");
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	33cc      	adds	r3, #204	; 0xcc
 8006540:	4a23      	ldr	r2, [pc, #140]	; (80065d0 <problem_fetch+0x52b0>)
 8006542:	8811      	ldrh	r1, [r2, #0]
 8006544:	7892      	ldrb	r2, [r2, #2]
 8006546:	8019      	strh	r1, [r3, #0]
 8006548:	709a      	strb	r2, [r3, #2]
			break;
 800654a:	f014 bc2f 	b.w	801adac <problem_fetch+0x19a8c>
		case 227 :
			strcpy(p->name,"OUT THERE");
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	337c      	adds	r3, #124	; 0x7c
 8006552:	4935      	ldr	r1, [pc, #212]	; (8006628 <problem_fetch+0x5308>)
 8006554:	461a      	mov	r2, r3
 8006556:	460b      	mov	r3, r1
 8006558:	cb03      	ldmia	r3!, {r0, r1}
 800655a:	6010      	str	r0, [r2, #0]
 800655c:	6051      	str	r1, [r2, #4]
 800655e:	881b      	ldrh	r3, [r3, #0]
 8006560:	8113      	strh	r3, [r2, #8]
			p->moveSize = 7;
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	2207      	movs	r2, #7
 8006566:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"J,G,H,C,D,B,D");
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	3340      	adds	r3, #64	; 0x40
 800656c:	4a2f      	ldr	r2, [pc, #188]	; (800662c <problem_fetch+0x530c>)
 800656e:	461c      	mov	r4, r3
 8006570:	4613      	mov	r3, r2
 8006572:	cb07      	ldmia	r3!, {r0, r1, r2}
 8006574:	6020      	str	r0, [r4, #0]
 8006576:	6061      	str	r1, [r4, #4]
 8006578:	60a2      	str	r2, [r4, #8]
 800657a:	881b      	ldrh	r3, [r3, #0]
 800657c:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,6,10,13,15,15,18");
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	3304      	adds	r3, #4
 8006582:	4a2b      	ldr	r2, [pc, #172]	; (8006630 <problem_fetch+0x5310>)
 8006584:	461d      	mov	r5, r3
 8006586:	4614      	mov	r4, r2
 8006588:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800658a:	6028      	str	r0, [r5, #0]
 800658c:	6069      	str	r1, [r5, #4]
 800658e:	60aa      	str	r2, [r5, #8]
 8006590:	60eb      	str	r3, [r5, #12]
 8006592:	8823      	ldrh	r3, [r4, #0]
 8006594:	78a2      	ldrb	r2, [r4, #2]
 8006596:	822b      	strh	r3, [r5, #16]
 8006598:	4613      	mov	r3, r2
 800659a:	74ab      	strb	r3, [r5, #18]
			strcpy(p->startFinish, "s,s,d,d,d,d,e");
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	33d8      	adds	r3, #216	; 0xd8
 80065a0:	4a24      	ldr	r2, [pc, #144]	; (8006634 <problem_fetch+0x5314>)
 80065a2:	461c      	mov	r4, r3
 80065a4:	4613      	mov	r3, r2
 80065a6:	cb07      	ldmia	r3!, {r0, r1, r2}
 80065a8:	6020      	str	r0, [r4, #0]
 80065aa:	6061      	str	r1, [r4, #4]
 80065ac:	60a2      	str	r2, [r4, #8]
 80065ae:	881b      	ldrh	r3, [r3, #0]
 80065b0:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade, "6B+");
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	33cc      	adds	r3, #204	; 0xcc
 80065b6:	4a0a      	ldr	r2, [pc, #40]	; (80065e0 <problem_fetch+0x52c0>)
 80065b8:	6810      	ldr	r0, [r2, #0]
 80065ba:	6018      	str	r0, [r3, #0]
			break;
 80065bc:	f014 bbf6 	b.w	801adac <problem_fetch+0x19a8c>
 80065c0:	08022ce0 	.word	0x08022ce0
 80065c4:	08022cf4 	.word	0x08022cf4
 80065c8:	08022d04 	.word	0x08022d04
 80065cc:	08021494 	.word	0x08021494
 80065d0:	0802132c 	.word	0x0802132c
 80065d4:	08022d18 	.word	0x08022d18
 80065d8:	08022d28 	.word	0x08022d28
 80065dc:	08022d38 	.word	0x08022d38
 80065e0:	080212b0 	.word	0x080212b0
 80065e4:	08022d4c 	.word	0x08022d4c
 80065e8:	08022d58 	.word	0x08022d58
 80065ec:	08022d64 	.word	0x08022d64
 80065f0:	08021320 	.word	0x08021320
 80065f4:	080213a8 	.word	0x080213a8
 80065f8:	08022d74 	.word	0x08022d74
 80065fc:	08022d84 	.word	0x08022d84
 8006600:	08022d90 	.word	0x08022d90
 8006604:	0802139c 	.word	0x0802139c
 8006608:	08021848 	.word	0x08021848
 800660c:	08022da0 	.word	0x08022da0
 8006610:	08022db4 	.word	0x08022db4
 8006614:	08022dc0 	.word	0x08022dc0
 8006618:	08021910 	.word	0x08021910
 800661c:	08022dd0 	.word	0x08022dd0
 8006620:	08022ddc 	.word	0x08022ddc
 8006624:	08022dec 	.word	0x08022dec
 8006628:	08022e00 	.word	0x08022e00
 800662c:	08022e0c 	.word	0x08022e0c
 8006630:	08022e1c 	.word	0x08022e1c
 8006634:	080212a0 	.word	0x080212a0
		case 228 :
			strcpy(p->name,"THE GREAT HAMBINO");
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	337c      	adds	r3, #124	; 0x7c
 800663c:	4abf      	ldr	r2, [pc, #764]	; (800693c <problem_fetch+0x561c>)
 800663e:	461d      	mov	r5, r3
 8006640:	4614      	mov	r4, r2
 8006642:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006644:	6028      	str	r0, [r5, #0]
 8006646:	6069      	str	r1, [r5, #4]
 8006648:	60aa      	str	r2, [r5, #8]
 800664a:	60eb      	str	r3, [r5, #12]
 800664c:	8823      	ldrh	r3, [r4, #0]
 800664e:	822b      	strh	r3, [r5, #16]
			p->moveSize = 9;
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	2209      	movs	r2, #9
 8006654:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"G,E,H,C,F,E,G,G,I");
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	3340      	adds	r3, #64	; 0x40
 800665a:	4ab9      	ldr	r2, [pc, #740]	; (8006940 <problem_fetch+0x5620>)
 800665c:	461d      	mov	r5, r3
 800665e:	4614      	mov	r4, r2
 8006660:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006662:	6028      	str	r0, [r5, #0]
 8006664:	6069      	str	r1, [r5, #4]
 8006666:	60aa      	str	r2, [r5, #8]
 8006668:	60eb      	str	r3, [r5, #12]
 800666a:	8823      	ldrh	r3, [r4, #0]
 800666c:	822b      	strh	r3, [r5, #16]
			strcpy(p->moveNumbers,"4,6,8,8,11,12,14,15,18");
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	3304      	adds	r3, #4
 8006672:	4ab4      	ldr	r2, [pc, #720]	; (8006944 <problem_fetch+0x5624>)
 8006674:	461c      	mov	r4, r3
 8006676:	4615      	mov	r5, r2
 8006678:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800667a:	6020      	str	r0, [r4, #0]
 800667c:	6061      	str	r1, [r4, #4]
 800667e:	60a2      	str	r2, [r4, #8]
 8006680:	60e3      	str	r3, [r4, #12]
 8006682:	6828      	ldr	r0, [r5, #0]
 8006684:	6120      	str	r0, [r4, #16]
 8006686:	88ab      	ldrh	r3, [r5, #4]
 8006688:	79aa      	ldrb	r2, [r5, #6]
 800668a:	82a3      	strh	r3, [r4, #20]
 800668c:	4613      	mov	r3, r2
 800668e:	75a3      	strb	r3, [r4, #22]
			strcpy(p->startFinish, "s,s,d,d,d,d,d,d,e");
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	33d8      	adds	r3, #216	; 0xd8
 8006694:	4aac      	ldr	r2, [pc, #688]	; (8006948 <problem_fetch+0x5628>)
 8006696:	461d      	mov	r5, r3
 8006698:	4614      	mov	r4, r2
 800669a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800669c:	6028      	str	r0, [r5, #0]
 800669e:	6069      	str	r1, [r5, #4]
 80066a0:	60aa      	str	r2, [r5, #8]
 80066a2:	60eb      	str	r3, [r5, #12]
 80066a4:	8823      	ldrh	r3, [r4, #0]
 80066a6:	822b      	strh	r3, [r5, #16]
			strcpy(p->grade, "6B+");
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	33cc      	adds	r3, #204	; 0xcc
 80066ac:	4aa7      	ldr	r2, [pc, #668]	; (800694c <problem_fetch+0x562c>)
 80066ae:	6810      	ldr	r0, [r2, #0]
 80066b0:	6018      	str	r0, [r3, #0]
			break;
 80066b2:	f014 bb7b 	b.w	801adac <problem_fetch+0x19a8c>
		case 229 :
			strcpy(p->name,"TOMTOM");
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	337c      	adds	r3, #124	; 0x7c
 80066ba:	4aa5      	ldr	r2, [pc, #660]	; (8006950 <problem_fetch+0x5630>)
 80066bc:	6810      	ldr	r0, [r2, #0]
 80066be:	6018      	str	r0, [r3, #0]
 80066c0:	8891      	ldrh	r1, [r2, #4]
 80066c2:	7992      	ldrb	r2, [r2, #6]
 80066c4:	8099      	strh	r1, [r3, #4]
 80066c6:	719a      	strb	r2, [r3, #6]
			p->moveSize = 5;
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	2205      	movs	r2, #5
 80066cc:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"J,H,C,D,A");
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	3340      	adds	r3, #64	; 0x40
 80066d2:	49a0      	ldr	r1, [pc, #640]	; (8006954 <problem_fetch+0x5634>)
 80066d4:	461a      	mov	r2, r3
 80066d6:	460b      	mov	r3, r1
 80066d8:	cb03      	ldmia	r3!, {r0, r1}
 80066da:	6010      	str	r0, [r2, #0]
 80066dc:	6051      	str	r1, [r2, #4]
 80066de:	881b      	ldrh	r3, [r3, #0]
 80066e0:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"5,10,13,15,18");
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	3304      	adds	r3, #4
 80066e6:	4a9c      	ldr	r2, [pc, #624]	; (8006958 <problem_fetch+0x5638>)
 80066e8:	461c      	mov	r4, r3
 80066ea:	4613      	mov	r3, r2
 80066ec:	cb07      	ldmia	r3!, {r0, r1, r2}
 80066ee:	6020      	str	r0, [r4, #0]
 80066f0:	6061      	str	r1, [r4, #4]
 80066f2:	60a2      	str	r2, [r4, #8]
 80066f4:	881b      	ldrh	r3, [r3, #0]
 80066f6:	81a3      	strh	r3, [r4, #12]
			strcpy(p->startFinish, "s,d,d,d,e");
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	33d8      	adds	r3, #216	; 0xd8
 80066fc:	4997      	ldr	r1, [pc, #604]	; (800695c <problem_fetch+0x563c>)
 80066fe:	461a      	mov	r2, r3
 8006700:	460b      	mov	r3, r1
 8006702:	cb03      	ldmia	r3!, {r0, r1}
 8006704:	6010      	str	r0, [r2, #0]
 8006706:	6051      	str	r1, [r2, #4]
 8006708:	881b      	ldrh	r3, [r3, #0]
 800670a:	8113      	strh	r3, [r2, #8]
			strcpy(p->grade, "6C+");
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	33cc      	adds	r3, #204	; 0xcc
 8006710:	4a93      	ldr	r2, [pc, #588]	; (8006960 <problem_fetch+0x5640>)
 8006712:	6810      	ldr	r0, [r2, #0]
 8006714:	6018      	str	r0, [r3, #0]
			break;
 8006716:	f014 bb49 	b.w	801adac <problem_fetch+0x19a8c>
		case 23 :
			strcpy(p->name,"LADYBUG");
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	337c      	adds	r3, #124	; 0x7c
 800671e:	4991      	ldr	r1, [pc, #580]	; (8006964 <problem_fetch+0x5644>)
 8006720:	461a      	mov	r2, r3
 8006722:	460b      	mov	r3, r1
 8006724:	cb03      	ldmia	r3!, {r0, r1}
 8006726:	6010      	str	r0, [r2, #0]
 8006728:	6051      	str	r1, [r2, #4]
			p->moveSize = 8;
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	2208      	movs	r2, #8
 800672e:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"A,A,C,D,F,G,H,J");
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	3340      	adds	r3, #64	; 0x40
 8006734:	4a8c      	ldr	r2, [pc, #560]	; (8006968 <problem_fetch+0x5648>)
 8006736:	461c      	mov	r4, r3
 8006738:	4615      	mov	r5, r2
 800673a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800673c:	6020      	str	r0, [r4, #0]
 800673e:	6061      	str	r1, [r4, #4]
 8006740:	60a2      	str	r2, [r4, #8]
 8006742:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"9,14,13,18,11,6,10,5");
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	3304      	adds	r3, #4
 8006748:	4a88      	ldr	r2, [pc, #544]	; (800696c <problem_fetch+0x564c>)
 800674a:	461d      	mov	r5, r3
 800674c:	4614      	mov	r4, r2
 800674e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006750:	6028      	str	r0, [r5, #0]
 8006752:	6069      	str	r1, [r5, #4]
 8006754:	60aa      	str	r2, [r5, #8]
 8006756:	60eb      	str	r3, [r5, #12]
 8006758:	6820      	ldr	r0, [r4, #0]
 800675a:	6128      	str	r0, [r5, #16]
 800675c:	7923      	ldrb	r3, [r4, #4]
 800675e:	752b      	strb	r3, [r5, #20]
			strcpy(p->startFinish, "d,d,d,e,d,s,d,s");
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	33d8      	adds	r3, #216	; 0xd8
 8006764:	4a82      	ldr	r2, [pc, #520]	; (8006970 <problem_fetch+0x5650>)
 8006766:	461c      	mov	r4, r3
 8006768:	4615      	mov	r5, r2
 800676a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800676c:	6020      	str	r0, [r4, #0]
 800676e:	6061      	str	r1, [r4, #4]
 8006770:	60a2      	str	r2, [r4, #8]
 8006772:	60e3      	str	r3, [r4, #12]
			strcpy(p->grade, "7A+");
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	33cc      	adds	r3, #204	; 0xcc
 8006778:	4a7e      	ldr	r2, [pc, #504]	; (8006974 <problem_fetch+0x5654>)
 800677a:	6810      	ldr	r0, [r2, #0]
 800677c:	6018      	str	r0, [r3, #0]
			break;
 800677e:	f014 bb15 	b.w	801adac <problem_fetch+0x19a8c>
		case 230 :
			strcpy(p->name,"カラス");
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	337c      	adds	r3, #124	; 0x7c
 8006786:	497c      	ldr	r1, [pc, #496]	; (8006978 <problem_fetch+0x5658>)
 8006788:	461a      	mov	r2, r3
 800678a:	460b      	mov	r3, r1
 800678c:	cb03      	ldmia	r3!, {r0, r1}
 800678e:	6010      	str	r0, [r2, #0]
 8006790:	6051      	str	r1, [r2, #4]
 8006792:	881b      	ldrh	r3, [r3, #0]
 8006794:	8113      	strh	r3, [r2, #8]
			p->moveSize = 7;
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	2207      	movs	r2, #7
 800679a:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"H,J,K,H,I,E,D");
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	3340      	adds	r3, #64	; 0x40
 80067a0:	4a76      	ldr	r2, [pc, #472]	; (800697c <problem_fetch+0x565c>)
 80067a2:	461c      	mov	r4, r3
 80067a4:	4613      	mov	r3, r2
 80067a6:	cb07      	ldmia	r3!, {r0, r1, r2}
 80067a8:	6020      	str	r0, [r4, #0]
 80067aa:	6061      	str	r1, [r4, #4]
 80067ac:	60a2      	str	r2, [r4, #8]
 80067ae:	881b      	ldrh	r3, [r3, #0]
 80067b0:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,7,9,12,14,16,18");
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	3304      	adds	r3, #4
 80067b6:	4a72      	ldr	r2, [pc, #456]	; (8006980 <problem_fetch+0x5660>)
 80067b8:	461d      	mov	r5, r3
 80067ba:	4614      	mov	r4, r2
 80067bc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80067be:	6028      	str	r0, [r5, #0]
 80067c0:	6069      	str	r1, [r5, #4]
 80067c2:	60aa      	str	r2, [r5, #8]
 80067c4:	60eb      	str	r3, [r5, #12]
 80067c6:	8823      	ldrh	r3, [r4, #0]
 80067c8:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish, "s,d,d,d,d,d,e");
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	33d8      	adds	r3, #216	; 0xd8
 80067ce:	4a6d      	ldr	r2, [pc, #436]	; (8006984 <problem_fetch+0x5664>)
 80067d0:	461c      	mov	r4, r3
 80067d2:	4613      	mov	r3, r2
 80067d4:	cb07      	ldmia	r3!, {r0, r1, r2}
 80067d6:	6020      	str	r0, [r4, #0]
 80067d8:	6061      	str	r1, [r4, #4]
 80067da:	60a2      	str	r2, [r4, #8]
 80067dc:	881b      	ldrh	r3, [r3, #0]
 80067de:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade, "7A");
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	33cc      	adds	r3, #204	; 0xcc
 80067e4:	4a68      	ldr	r2, [pc, #416]	; (8006988 <problem_fetch+0x5668>)
 80067e6:	8811      	ldrh	r1, [r2, #0]
 80067e8:	7892      	ldrb	r2, [r2, #2]
 80067ea:	8019      	strh	r1, [r3, #0]
 80067ec:	709a      	strb	r2, [r3, #2]
			break;
 80067ee:	f014 badd 	b.w	801adac <problem_fetch+0x19a8c>
		case 231 :
			strcpy(p->name,"2 BLACK 2 HARD");
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	337c      	adds	r3, #124	; 0x7c
 80067f6:	4a65      	ldr	r2, [pc, #404]	; (800698c <problem_fetch+0x566c>)
 80067f8:	461c      	mov	r4, r3
 80067fa:	4613      	mov	r3, r2
 80067fc:	cb07      	ldmia	r3!, {r0, r1, r2}
 80067fe:	6020      	str	r0, [r4, #0]
 8006800:	6061      	str	r1, [r4, #4]
 8006802:	60a2      	str	r2, [r4, #8]
 8006804:	881a      	ldrh	r2, [r3, #0]
 8006806:	789b      	ldrb	r3, [r3, #2]
 8006808:	81a2      	strh	r2, [r4, #12]
 800680a:	73a3      	strb	r3, [r4, #14]
			p->moveSize = 5;
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	2205      	movs	r2, #5
 8006810:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"J,H,E,D,A");
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	3340      	adds	r3, #64	; 0x40
 8006816:	495e      	ldr	r1, [pc, #376]	; (8006990 <problem_fetch+0x5670>)
 8006818:	461a      	mov	r2, r3
 800681a:	460b      	mov	r3, r1
 800681c:	cb03      	ldmia	r3!, {r0, r1}
 800681e:	6010      	str	r0, [r2, #0]
 8006820:	6051      	str	r1, [r2, #4]
 8006822:	881b      	ldrh	r3, [r3, #0]
 8006824:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"5,5,9,15,18");
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	3304      	adds	r3, #4
 800682a:	4a5a      	ldr	r2, [pc, #360]	; (8006994 <problem_fetch+0x5674>)
 800682c:	461c      	mov	r4, r3
 800682e:	4613      	mov	r3, r2
 8006830:	cb07      	ldmia	r3!, {r0, r1, r2}
 8006832:	6020      	str	r0, [r4, #0]
 8006834:	6061      	str	r1, [r4, #4]
 8006836:	60a2      	str	r2, [r4, #8]
			strcpy(p->startFinish, "s,s,d,d,e");
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	33d8      	adds	r3, #216	; 0xd8
 800683c:	4956      	ldr	r1, [pc, #344]	; (8006998 <problem_fetch+0x5678>)
 800683e:	461a      	mov	r2, r3
 8006840:	460b      	mov	r3, r1
 8006842:	cb03      	ldmia	r3!, {r0, r1}
 8006844:	6010      	str	r0, [r2, #0]
 8006846:	6051      	str	r1, [r2, #4]
 8006848:	881b      	ldrh	r3, [r3, #0]
 800684a:	8113      	strh	r3, [r2, #8]
			strcpy(p->grade, "8A+");
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	33cc      	adds	r3, #204	; 0xcc
 8006850:	4a52      	ldr	r2, [pc, #328]	; (800699c <problem_fetch+0x567c>)
 8006852:	6810      	ldr	r0, [r2, #0]
 8006854:	6018      	str	r0, [r3, #0]
			break;
 8006856:	f014 baa9 	b.w	801adac <problem_fetch+0x19a8c>
		case 232 :
			strcpy(p->name,"BLACK HAWK DOWN");
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	337c      	adds	r3, #124	; 0x7c
 800685e:	4a50      	ldr	r2, [pc, #320]	; (80069a0 <problem_fetch+0x5680>)
 8006860:	461c      	mov	r4, r3
 8006862:	4615      	mov	r5, r2
 8006864:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006866:	6020      	str	r0, [r4, #0]
 8006868:	6061      	str	r1, [r4, #4]
 800686a:	60a2      	str	r2, [r4, #8]
 800686c:	60e3      	str	r3, [r4, #12]
			p->moveSize = 7;
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	2207      	movs	r2, #7
 8006872:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"J,H,D,G,D,E,D");
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	3340      	adds	r3, #64	; 0x40
 8006878:	4a4a      	ldr	r2, [pc, #296]	; (80069a4 <problem_fetch+0x5684>)
 800687a:	461c      	mov	r4, r3
 800687c:	4613      	mov	r3, r2
 800687e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8006880:	6020      	str	r0, [r4, #0]
 8006882:	6061      	str	r1, [r4, #4]
 8006884:	60a2      	str	r2, [r4, #8]
 8006886:	881b      	ldrh	r3, [r3, #0]
 8006888:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,8,15,9,11,14,18");
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	3304      	adds	r3, #4
 800688e:	4a46      	ldr	r2, [pc, #280]	; (80069a8 <problem_fetch+0x5688>)
 8006890:	461d      	mov	r5, r3
 8006892:	4614      	mov	r4, r2
 8006894:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006896:	6028      	str	r0, [r5, #0]
 8006898:	6069      	str	r1, [r5, #4]
 800689a:	60aa      	str	r2, [r5, #8]
 800689c:	60eb      	str	r3, [r5, #12]
 800689e:	8823      	ldrh	r3, [r4, #0]
 80068a0:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish, "s,d,d,d,d,d,e");
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	33d8      	adds	r3, #216	; 0xd8
 80068a6:	4a37      	ldr	r2, [pc, #220]	; (8006984 <problem_fetch+0x5664>)
 80068a8:	461c      	mov	r4, r3
 80068aa:	4613      	mov	r3, r2
 80068ac:	cb07      	ldmia	r3!, {r0, r1, r2}
 80068ae:	6020      	str	r0, [r4, #0]
 80068b0:	6061      	str	r1, [r4, #4]
 80068b2:	60a2      	str	r2, [r4, #8]
 80068b4:	881b      	ldrh	r3, [r3, #0]
 80068b6:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade, "6C+");
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	33cc      	adds	r3, #204	; 0xcc
 80068bc:	4a28      	ldr	r2, [pc, #160]	; (8006960 <problem_fetch+0x5640>)
 80068be:	6810      	ldr	r0, [r2, #0]
 80068c0:	6018      	str	r0, [r3, #0]
			break;
 80068c2:	f014 ba73 	b.w	801adac <problem_fetch+0x19a8c>
		case 233 :
			strcpy(p->name,"FOUL LANGUAGE");
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	337c      	adds	r3, #124	; 0x7c
 80068ca:	4a38      	ldr	r2, [pc, #224]	; (80069ac <problem_fetch+0x568c>)
 80068cc:	461c      	mov	r4, r3
 80068ce:	4613      	mov	r3, r2
 80068d0:	cb07      	ldmia	r3!, {r0, r1, r2}
 80068d2:	6020      	str	r0, [r4, #0]
 80068d4:	6061      	str	r1, [r4, #4]
 80068d6:	60a2      	str	r2, [r4, #8]
 80068d8:	881b      	ldrh	r3, [r3, #0]
 80068da:	81a3      	strh	r3, [r4, #12]
			p->moveSize = 9;
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	2209      	movs	r2, #9
 80068e0:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"G,H,K,H,K,G,G,B,D");
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	3340      	adds	r3, #64	; 0x40
 80068e6:	4a32      	ldr	r2, [pc, #200]	; (80069b0 <problem_fetch+0x5690>)
 80068e8:	461d      	mov	r5, r3
 80068ea:	4614      	mov	r4, r2
 80068ec:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80068ee:	6028      	str	r0, [r5, #0]
 80068f0:	6069      	str	r1, [r5, #4]
 80068f2:	60aa      	str	r2, [r5, #8]
 80068f4:	60eb      	str	r3, [r5, #12]
 80068f6:	8823      	ldrh	r3, [r4, #0]
 80068f8:	822b      	strh	r3, [r5, #16]
			strcpy(p->moveNumbers,"4,5,9,12,14,14,17,12,18");
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	3304      	adds	r3, #4
 80068fe:	4a2d      	ldr	r2, [pc, #180]	; (80069b4 <problem_fetch+0x5694>)
 8006900:	461d      	mov	r5, r3
 8006902:	4614      	mov	r4, r2
 8006904:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006906:	6028      	str	r0, [r5, #0]
 8006908:	6069      	str	r1, [r5, #4]
 800690a:	60aa      	str	r2, [r5, #8]
 800690c:	60eb      	str	r3, [r5, #12]
 800690e:	cc03      	ldmia	r4!, {r0, r1}
 8006910:	6128      	str	r0, [r5, #16]
 8006912:	6169      	str	r1, [r5, #20]
			strcpy(p->startFinish, "s,s,d,d,d,d,d,d,e");
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	33d8      	adds	r3, #216	; 0xd8
 8006918:	4a0b      	ldr	r2, [pc, #44]	; (8006948 <problem_fetch+0x5628>)
 800691a:	461d      	mov	r5, r3
 800691c:	4614      	mov	r4, r2
 800691e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006920:	6028      	str	r0, [r5, #0]
 8006922:	6069      	str	r1, [r5, #4]
 8006924:	60aa      	str	r2, [r5, #8]
 8006926:	60eb      	str	r3, [r5, #12]
 8006928:	8823      	ldrh	r3, [r4, #0]
 800692a:	822b      	strh	r3, [r5, #16]
			strcpy(p->grade, "6C+");
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	33cc      	adds	r3, #204	; 0xcc
 8006930:	4a0b      	ldr	r2, [pc, #44]	; (8006960 <problem_fetch+0x5640>)
 8006932:	6810      	ldr	r0, [r2, #0]
 8006934:	6018      	str	r0, [r3, #0]
			break;
 8006936:	f014 ba39 	b.w	801adac <problem_fetch+0x19a8c>
 800693a:	bf00      	nop
 800693c:	08022e30 	.word	0x08022e30
 8006940:	08022e44 	.word	0x08022e44
 8006944:	08022e58 	.word	0x08022e58
 8006948:	0802187c 	.word	0x0802187c
 800694c:	080212b0 	.word	0x080212b0
 8006950:	08022e70 	.word	0x08022e70
 8006954:	08022e78 	.word	0x08022e78
 8006958:	08022e84 	.word	0x08022e84
 800695c:	08021320 	.word	0x08021320
 8006960:	080213a8 	.word	0x080213a8
 8006964:	08022e94 	.word	0x08022e94
 8006968:	08022e9c 	.word	0x08022e9c
 800696c:	08022eac 	.word	0x08022eac
 8006970:	08022ec4 	.word	0x08022ec4
 8006974:	08021424 	.word	0x08021424
 8006978:	08022ed4 	.word	0x08022ed4
 800697c:	08022ee0 	.word	0x08022ee0
 8006980:	08022ef0 	.word	0x08022ef0
 8006984:	08021494 	.word	0x08021494
 8006988:	080212f4 	.word	0x080212f4
 800698c:	08022f04 	.word	0x08022f04
 8006990:	08022f14 	.word	0x08022f14
 8006994:	08022f20 	.word	0x08022f20
 8006998:	080221c8 	.word	0x080221c8
 800699c:	08022f2c 	.word	0x08022f2c
 80069a0:	08022f30 	.word	0x08022f30
 80069a4:	08022f40 	.word	0x08022f40
 80069a8:	08022f50 	.word	0x08022f50
 80069ac:	08022f64 	.word	0x08022f64
 80069b0:	08022f74 	.word	0x08022f74
 80069b4:	08022f88 	.word	0x08022f88
		case 234 :
			strcpy(p->name,"V1.");
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	337c      	adds	r3, #124	; 0x7c
 80069bc:	4ab8      	ldr	r2, [pc, #736]	; (8006ca0 <problem_fetch+0x5980>)
 80069be:	6810      	ldr	r0, [r2, #0]
 80069c0:	6018      	str	r0, [r3, #0]
			p->moveSize = 9;
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	2209      	movs	r2, #9
 80069c6:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"E,H,C,G,C,E,A,C,A");
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	3340      	adds	r3, #64	; 0x40
 80069cc:	4ab5      	ldr	r2, [pc, #724]	; (8006ca4 <problem_fetch+0x5984>)
 80069ce:	461d      	mov	r5, r3
 80069d0:	4614      	mov	r4, r2
 80069d2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80069d4:	6028      	str	r0, [r5, #0]
 80069d6:	6069      	str	r1, [r5, #4]
 80069d8:	60aa      	str	r2, [r5, #8]
 80069da:	60eb      	str	r3, [r5, #12]
 80069dc:	8823      	ldrh	r3, [r4, #0]
 80069de:	822b      	strh	r3, [r5, #16]
			strcpy(p->moveNumbers,"6,5,8,10,13,14,14,16,18");
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	3304      	adds	r3, #4
 80069e4:	4ab0      	ldr	r2, [pc, #704]	; (8006ca8 <problem_fetch+0x5988>)
 80069e6:	461d      	mov	r5, r3
 80069e8:	4614      	mov	r4, r2
 80069ea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80069ec:	6028      	str	r0, [r5, #0]
 80069ee:	6069      	str	r1, [r5, #4]
 80069f0:	60aa      	str	r2, [r5, #8]
 80069f2:	60eb      	str	r3, [r5, #12]
 80069f4:	cc03      	ldmia	r4!, {r0, r1}
 80069f6:	6128      	str	r0, [r5, #16]
 80069f8:	6169      	str	r1, [r5, #20]
			strcpy(p->startFinish, "s,s,d,d,d,d,d,d,e");
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	33d8      	adds	r3, #216	; 0xd8
 80069fe:	4aab      	ldr	r2, [pc, #684]	; (8006cac <problem_fetch+0x598c>)
 8006a00:	461d      	mov	r5, r3
 8006a02:	4614      	mov	r4, r2
 8006a04:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006a06:	6028      	str	r0, [r5, #0]
 8006a08:	6069      	str	r1, [r5, #4]
 8006a0a:	60aa      	str	r2, [r5, #8]
 8006a0c:	60eb      	str	r3, [r5, #12]
 8006a0e:	8823      	ldrh	r3, [r4, #0]
 8006a10:	822b      	strh	r3, [r5, #16]
			strcpy(p->grade, "6B+");
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	33cc      	adds	r3, #204	; 0xcc
 8006a16:	4aa6      	ldr	r2, [pc, #664]	; (8006cb0 <problem_fetch+0x5990>)
 8006a18:	6810      	ldr	r0, [r2, #0]
 8006a1a:	6018      	str	r0, [r3, #0]
			break;
 8006a1c:	f014 b9c6 	b.w	801adac <problem_fetch+0x19a8c>
		case 235 :
			strcpy(p->name,"TIGER");
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	337c      	adds	r3, #124	; 0x7c
 8006a24:	4aa3      	ldr	r2, [pc, #652]	; (8006cb4 <problem_fetch+0x5994>)
 8006a26:	6810      	ldr	r0, [r2, #0]
 8006a28:	6018      	str	r0, [r3, #0]
 8006a2a:	8892      	ldrh	r2, [r2, #4]
 8006a2c:	809a      	strh	r2, [r3, #4]
			p->moveSize = 7;
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	2207      	movs	r2, #7
 8006a32:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"B,D,G,H,C,C,A");
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	3340      	adds	r3, #64	; 0x40
 8006a38:	4a9f      	ldr	r2, [pc, #636]	; (8006cb8 <problem_fetch+0x5998>)
 8006a3a:	461c      	mov	r4, r3
 8006a3c:	4613      	mov	r3, r2
 8006a3e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8006a40:	6020      	str	r0, [r4, #0]
 8006a42:	6061      	str	r1, [r4, #4]
 8006a44:	60a2      	str	r2, [r4, #8]
 8006a46:	881b      	ldrh	r3, [r3, #0]
 8006a48:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"6,7,10,13,16,13,18");
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	3304      	adds	r3, #4
 8006a4e:	4a9b      	ldr	r2, [pc, #620]	; (8006cbc <problem_fetch+0x599c>)
 8006a50:	461d      	mov	r5, r3
 8006a52:	4614      	mov	r4, r2
 8006a54:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006a56:	6028      	str	r0, [r5, #0]
 8006a58:	6069      	str	r1, [r5, #4]
 8006a5a:	60aa      	str	r2, [r5, #8]
 8006a5c:	60eb      	str	r3, [r5, #12]
 8006a5e:	8823      	ldrh	r3, [r4, #0]
 8006a60:	78a2      	ldrb	r2, [r4, #2]
 8006a62:	822b      	strh	r3, [r5, #16]
 8006a64:	4613      	mov	r3, r2
 8006a66:	74ab      	strb	r3, [r5, #18]
			strcpy(p->startFinish, "s,d,d,d,d,d,e");
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	33d8      	adds	r3, #216	; 0xd8
 8006a6c:	4a94      	ldr	r2, [pc, #592]	; (8006cc0 <problem_fetch+0x59a0>)
 8006a6e:	461c      	mov	r4, r3
 8006a70:	4613      	mov	r3, r2
 8006a72:	cb07      	ldmia	r3!, {r0, r1, r2}
 8006a74:	6020      	str	r0, [r4, #0]
 8006a76:	6061      	str	r1, [r4, #4]
 8006a78:	60a2      	str	r2, [r4, #8]
 8006a7a:	881b      	ldrh	r3, [r3, #0]
 8006a7c:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade, "6C+");
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	33cc      	adds	r3, #204	; 0xcc
 8006a82:	4a90      	ldr	r2, [pc, #576]	; (8006cc4 <problem_fetch+0x59a4>)
 8006a84:	6810      	ldr	r0, [r2, #0]
 8006a86:	6018      	str	r0, [r3, #0]
			break;
 8006a88:	f014 b990 	b.w	801adac <problem_fetch+0x19a8c>
		case 236 :
			strcpy(p->name,"TIGHT BOX");
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	337c      	adds	r3, #124	; 0x7c
 8006a90:	498d      	ldr	r1, [pc, #564]	; (8006cc8 <problem_fetch+0x59a8>)
 8006a92:	461a      	mov	r2, r3
 8006a94:	460b      	mov	r3, r1
 8006a96:	cb03      	ldmia	r3!, {r0, r1}
 8006a98:	6010      	str	r0, [r2, #0]
 8006a9a:	6051      	str	r1, [r2, #4]
 8006a9c:	881b      	ldrh	r3, [r3, #0]
 8006a9e:	8113      	strh	r3, [r2, #8]
			p->moveSize = 8;
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	2208      	movs	r2, #8
 8006aa4:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"C,B,D,A,D,E,G,D");
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	3340      	adds	r3, #64	; 0x40
 8006aaa:	4a88      	ldr	r2, [pc, #544]	; (8006ccc <problem_fetch+0x59ac>)
 8006aac:	461c      	mov	r4, r3
 8006aae:	4615      	mov	r5, r2
 8006ab0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006ab2:	6020      	str	r0, [r4, #0]
 8006ab4:	6061      	str	r1, [r4, #4]
 8006ab6:	60a2      	str	r2, [r4, #8]
 8006ab8:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,6,7,9,11,12,17,18");
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	3304      	adds	r3, #4
 8006abe:	4a84      	ldr	r2, [pc, #528]	; (8006cd0 <problem_fetch+0x59b0>)
 8006ac0:	461d      	mov	r5, r3
 8006ac2:	4614      	mov	r4, r2
 8006ac4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006ac6:	6028      	str	r0, [r5, #0]
 8006ac8:	6069      	str	r1, [r5, #4]
 8006aca:	60aa      	str	r2, [r5, #8]
 8006acc:	60eb      	str	r3, [r5, #12]
 8006ace:	6820      	ldr	r0, [r4, #0]
 8006ad0:	6128      	str	r0, [r5, #16]
			strcpy(p->startFinish, "s,s,d,d,d,d,d,e");
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	33d8      	adds	r3, #216	; 0xd8
 8006ad6:	4a7f      	ldr	r2, [pc, #508]	; (8006cd4 <problem_fetch+0x59b4>)
 8006ad8:	461c      	mov	r4, r3
 8006ada:	4615      	mov	r5, r2
 8006adc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006ade:	6020      	str	r0, [r4, #0]
 8006ae0:	6061      	str	r1, [r4, #4]
 8006ae2:	60a2      	str	r2, [r4, #8]
 8006ae4:	60e3      	str	r3, [r4, #12]
			strcpy(p->grade, "6C+");
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	33cc      	adds	r3, #204	; 0xcc
 8006aea:	4a76      	ldr	r2, [pc, #472]	; (8006cc4 <problem_fetch+0x59a4>)
 8006aec:	6810      	ldr	r0, [r2, #0]
 8006aee:	6018      	str	r0, [r3, #0]
			break;
 8006af0:	f014 b95c 	b.w	801adac <problem_fetch+0x19a8c>
		case 237 :
			strcpy(p->name,"CAD");
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	337c      	adds	r3, #124	; 0x7c
 8006af8:	4a77      	ldr	r2, [pc, #476]	; (8006cd8 <problem_fetch+0x59b8>)
 8006afa:	6810      	ldr	r0, [r2, #0]
 8006afc:	6018      	str	r0, [r3, #0]
			p->moveSize = 8;
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	2208      	movs	r2, #8
 8006b02:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"J,H,K,J,H,E,G,D");
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	3340      	adds	r3, #64	; 0x40
 8006b08:	4a74      	ldr	r2, [pc, #464]	; (8006cdc <problem_fetch+0x59bc>)
 8006b0a:	461c      	mov	r4, r3
 8006b0c:	4615      	mov	r5, r2
 8006b0e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006b10:	6020      	str	r0, [r4, #0]
 8006b12:	6061      	str	r1, [r4, #4]
 8006b14:	60a2      	str	r2, [r4, #8]
 8006b16:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,5,9,12,12,14,17,18");
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	3304      	adds	r3, #4
 8006b1c:	4a70      	ldr	r2, [pc, #448]	; (8006ce0 <problem_fetch+0x59c0>)
 8006b1e:	461d      	mov	r5, r3
 8006b20:	4614      	mov	r4, r2
 8006b22:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006b24:	6028      	str	r0, [r5, #0]
 8006b26:	6069      	str	r1, [r5, #4]
 8006b28:	60aa      	str	r2, [r5, #8]
 8006b2a:	60eb      	str	r3, [r5, #12]
 8006b2c:	6820      	ldr	r0, [r4, #0]
 8006b2e:	6128      	str	r0, [r5, #16]
 8006b30:	7923      	ldrb	r3, [r4, #4]
 8006b32:	752b      	strb	r3, [r5, #20]
			strcpy(p->startFinish, "s,s,d,d,d,d,d,e");
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	33d8      	adds	r3, #216	; 0xd8
 8006b38:	4a66      	ldr	r2, [pc, #408]	; (8006cd4 <problem_fetch+0x59b4>)
 8006b3a:	461c      	mov	r4, r3
 8006b3c:	4615      	mov	r5, r2
 8006b3e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006b40:	6020      	str	r0, [r4, #0]
 8006b42:	6061      	str	r1, [r4, #4]
 8006b44:	60a2      	str	r2, [r4, #8]
 8006b46:	60e3      	str	r3, [r4, #12]
			strcpy(p->grade, "7A");
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	33cc      	adds	r3, #204	; 0xcc
 8006b4c:	4a65      	ldr	r2, [pc, #404]	; (8006ce4 <problem_fetch+0x59c4>)
 8006b4e:	8811      	ldrh	r1, [r2, #0]
 8006b50:	7892      	ldrb	r2, [r2, #2]
 8006b52:	8019      	strh	r1, [r3, #0]
 8006b54:	709a      	strb	r2, [r3, #2]
			break;
 8006b56:	f014 b929 	b.w	801adac <problem_fetch+0x19a8c>
		case 238 :
			strcpy(p->name,"CAD");
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	337c      	adds	r3, #124	; 0x7c
 8006b5e:	4a5e      	ldr	r2, [pc, #376]	; (8006cd8 <problem_fetch+0x59b8>)
 8006b60:	6810      	ldr	r0, [r2, #0]
 8006b62:	6018      	str	r0, [r3, #0]
			p->moveSize = 8;
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	2208      	movs	r2, #8
 8006b68:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"J,H,K,J,H,E,G,D");
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	3340      	adds	r3, #64	; 0x40
 8006b6e:	4a5b      	ldr	r2, [pc, #364]	; (8006cdc <problem_fetch+0x59bc>)
 8006b70:	461c      	mov	r4, r3
 8006b72:	4615      	mov	r5, r2
 8006b74:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006b76:	6020      	str	r0, [r4, #0]
 8006b78:	6061      	str	r1, [r4, #4]
 8006b7a:	60a2      	str	r2, [r4, #8]
 8006b7c:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,5,9,12,12,14,17,18");
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	3304      	adds	r3, #4
 8006b82:	4a57      	ldr	r2, [pc, #348]	; (8006ce0 <problem_fetch+0x59c0>)
 8006b84:	461d      	mov	r5, r3
 8006b86:	4614      	mov	r4, r2
 8006b88:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006b8a:	6028      	str	r0, [r5, #0]
 8006b8c:	6069      	str	r1, [r5, #4]
 8006b8e:	60aa      	str	r2, [r5, #8]
 8006b90:	60eb      	str	r3, [r5, #12]
 8006b92:	6820      	ldr	r0, [r4, #0]
 8006b94:	6128      	str	r0, [r5, #16]
 8006b96:	7923      	ldrb	r3, [r4, #4]
 8006b98:	752b      	strb	r3, [r5, #20]
			strcpy(p->startFinish, "s,s,d,d,d,d,d,e");
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	33d8      	adds	r3, #216	; 0xd8
 8006b9e:	4a4d      	ldr	r2, [pc, #308]	; (8006cd4 <problem_fetch+0x59b4>)
 8006ba0:	461c      	mov	r4, r3
 8006ba2:	4615      	mov	r5, r2
 8006ba4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006ba6:	6020      	str	r0, [r4, #0]
 8006ba8:	6061      	str	r1, [r4, #4]
 8006baa:	60a2      	str	r2, [r4, #8]
 8006bac:	60e3      	str	r3, [r4, #12]
			strcpy(p->grade, "7A");
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	33cc      	adds	r3, #204	; 0xcc
 8006bb2:	4a4c      	ldr	r2, [pc, #304]	; (8006ce4 <problem_fetch+0x59c4>)
 8006bb4:	8811      	ldrh	r1, [r2, #0]
 8006bb6:	7892      	ldrb	r2, [r2, #2]
 8006bb8:	8019      	strh	r1, [r3, #0]
 8006bba:	709a      	strb	r2, [r3, #2]
			break;
 8006bbc:	f014 b8f6 	b.w	801adac <problem_fetch+0x19a8c>
		case 239 :
			strcpy(p->name,"BLACK POCKETS MATTER");
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	337c      	adds	r3, #124	; 0x7c
 8006bc4:	4a48      	ldr	r2, [pc, #288]	; (8006ce8 <problem_fetch+0x59c8>)
 8006bc6:	461d      	mov	r5, r3
 8006bc8:	4614      	mov	r4, r2
 8006bca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006bcc:	6028      	str	r0, [r5, #0]
 8006bce:	6069      	str	r1, [r5, #4]
 8006bd0:	60aa      	str	r2, [r5, #8]
 8006bd2:	60eb      	str	r3, [r5, #12]
 8006bd4:	6820      	ldr	r0, [r4, #0]
 8006bd6:	6128      	str	r0, [r5, #16]
 8006bd8:	7923      	ldrb	r3, [r4, #4]
 8006bda:	752b      	strb	r3, [r5, #20]
			p->moveSize = 8;
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	2208      	movs	r2, #8
 8006be0:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"C,B,D,B,G,H,C,D");
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	3340      	adds	r3, #64	; 0x40
 8006be6:	4a41      	ldr	r2, [pc, #260]	; (8006cec <problem_fetch+0x59cc>)
 8006be8:	461c      	mov	r4, r3
 8006bea:	4615      	mov	r5, r2
 8006bec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006bee:	6020      	str	r0, [r4, #0]
 8006bf0:	6061      	str	r1, [r4, #4]
 8006bf2:	60a2      	str	r2, [r4, #8]
 8006bf4:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,6,7,10,10,13,16,18");
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	3304      	adds	r3, #4
 8006bfa:	4a3d      	ldr	r2, [pc, #244]	; (8006cf0 <problem_fetch+0x59d0>)
 8006bfc:	461d      	mov	r5, r3
 8006bfe:	4614      	mov	r4, r2
 8006c00:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006c02:	6028      	str	r0, [r5, #0]
 8006c04:	6069      	str	r1, [r5, #4]
 8006c06:	60aa      	str	r2, [r5, #8]
 8006c08:	60eb      	str	r3, [r5, #12]
 8006c0a:	6820      	ldr	r0, [r4, #0]
 8006c0c:	6128      	str	r0, [r5, #16]
 8006c0e:	7923      	ldrb	r3, [r4, #4]
 8006c10:	752b      	strb	r3, [r5, #20]
			strcpy(p->startFinish, "s,s,d,d,d,d,d,e");
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	33d8      	adds	r3, #216	; 0xd8
 8006c16:	4a2f      	ldr	r2, [pc, #188]	; (8006cd4 <problem_fetch+0x59b4>)
 8006c18:	461c      	mov	r4, r3
 8006c1a:	4615      	mov	r5, r2
 8006c1c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006c1e:	6020      	str	r0, [r4, #0]
 8006c20:	6061      	str	r1, [r4, #4]
 8006c22:	60a2      	str	r2, [r4, #8]
 8006c24:	60e3      	str	r3, [r4, #12]
			strcpy(p->grade, "7A+");
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	33cc      	adds	r3, #204	; 0xcc
 8006c2a:	4a32      	ldr	r2, [pc, #200]	; (8006cf4 <problem_fetch+0x59d4>)
 8006c2c:	6810      	ldr	r0, [r2, #0]
 8006c2e:	6018      	str	r0, [r3, #0]
			break;
 8006c30:	f014 b8bc 	b.w	801adac <problem_fetch+0x19a8c>
		case 24 :
			strcpy(p->name,"LADYBUG'S HEEL");
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	337c      	adds	r3, #124	; 0x7c
 8006c38:	4a2f      	ldr	r2, [pc, #188]	; (8006cf8 <problem_fetch+0x59d8>)
 8006c3a:	461c      	mov	r4, r3
 8006c3c:	4613      	mov	r3, r2
 8006c3e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8006c40:	6020      	str	r0, [r4, #0]
 8006c42:	6061      	str	r1, [r4, #4]
 8006c44:	60a2      	str	r2, [r4, #8]
 8006c46:	881a      	ldrh	r2, [r3, #0]
 8006c48:	789b      	ldrb	r3, [r3, #2]
 8006c4a:	81a2      	strh	r2, [r4, #12]
 8006c4c:	73a3      	strb	r3, [r4, #14]
			p->moveSize = 6;
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	2206      	movs	r2, #6
 8006c52:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"J,G,H,C,H,D");
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	3340      	adds	r3, #64	; 0x40
 8006c58:	4a28      	ldr	r2, [pc, #160]	; (8006cfc <problem_fetch+0x59dc>)
 8006c5a:	461c      	mov	r4, r3
 8006c5c:	4613      	mov	r3, r2
 8006c5e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8006c60:	6020      	str	r0, [r4, #0]
 8006c62:	6061      	str	r1, [r4, #4]
 8006c64:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,6,10,13,16,18");
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	3304      	adds	r3, #4
 8006c6a:	4a25      	ldr	r2, [pc, #148]	; (8006d00 <problem_fetch+0x59e0>)
 8006c6c:	461c      	mov	r4, r3
 8006c6e:	4615      	mov	r5, r2
 8006c70:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006c72:	6020      	str	r0, [r4, #0]
 8006c74:	6061      	str	r1, [r4, #4]
 8006c76:	60a2      	str	r2, [r4, #8]
 8006c78:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish, "s,s,d,d,d,e");
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	33d8      	adds	r3, #216	; 0xd8
 8006c7e:	4a21      	ldr	r2, [pc, #132]	; (8006d04 <problem_fetch+0x59e4>)
 8006c80:	461c      	mov	r4, r3
 8006c82:	4613      	mov	r3, r2
 8006c84:	cb07      	ldmia	r3!, {r0, r1, r2}
 8006c86:	6020      	str	r0, [r4, #0]
 8006c88:	6061      	str	r1, [r4, #4]
 8006c8a:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade, "7A");
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	33cc      	adds	r3, #204	; 0xcc
 8006c90:	4a14      	ldr	r2, [pc, #80]	; (8006ce4 <problem_fetch+0x59c4>)
 8006c92:	8811      	ldrh	r1, [r2, #0]
 8006c94:	7892      	ldrb	r2, [r2, #2]
 8006c96:	8019      	strh	r1, [r3, #0]
 8006c98:	709a      	strb	r2, [r3, #2]
			break;
 8006c9a:	f014 b887 	b.w	801adac <problem_fetch+0x19a8c>
 8006c9e:	bf00      	nop
 8006ca0:	08022fa0 	.word	0x08022fa0
 8006ca4:	08022fa4 	.word	0x08022fa4
 8006ca8:	08022fb8 	.word	0x08022fb8
 8006cac:	0802187c 	.word	0x0802187c
 8006cb0:	080212b0 	.word	0x080212b0
 8006cb4:	08022fd0 	.word	0x08022fd0
 8006cb8:	08022fd8 	.word	0x08022fd8
 8006cbc:	08022fe8 	.word	0x08022fe8
 8006cc0:	08021494 	.word	0x08021494
 8006cc4:	080213a8 	.word	0x080213a8
 8006cc8:	08022ffc 	.word	0x08022ffc
 8006ccc:	08023008 	.word	0x08023008
 8006cd0:	08023018 	.word	0x08023018
 8006cd4:	080214cc 	.word	0x080214cc
 8006cd8:	0802302c 	.word	0x0802302c
 8006cdc:	08023030 	.word	0x08023030
 8006ce0:	08023040 	.word	0x08023040
 8006ce4:	080212f4 	.word	0x080212f4
 8006ce8:	08023058 	.word	0x08023058
 8006cec:	08023070 	.word	0x08023070
 8006cf0:	08023080 	.word	0x08023080
 8006cf4:	08021424 	.word	0x08021424
 8006cf8:	08023098 	.word	0x08023098
 8006cfc:	080230a8 	.word	0x080230a8
 8006d00:	080230b4 	.word	0x080230b4
 8006d04:	08021910 	.word	0x08021910
		case 240 :
			strcpy(p->name,"SEANN'S START");
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	337c      	adds	r3, #124	; 0x7c
 8006d0c:	4ac1      	ldr	r2, [pc, #772]	; (8007014 <problem_fetch+0x5cf4>)
 8006d0e:	461c      	mov	r4, r3
 8006d10:	4613      	mov	r3, r2
 8006d12:	cb07      	ldmia	r3!, {r0, r1, r2}
 8006d14:	6020      	str	r0, [r4, #0]
 8006d16:	6061      	str	r1, [r4, #4]
 8006d18:	60a2      	str	r2, [r4, #8]
 8006d1a:	881b      	ldrh	r3, [r3, #0]
 8006d1c:	81a3      	strh	r3, [r4, #12]
			p->moveSize = 7;
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	2207      	movs	r2, #7
 8006d22:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"G,E,C,E,E,G,D");
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	3340      	adds	r3, #64	; 0x40
 8006d28:	4abb      	ldr	r2, [pc, #748]	; (8007018 <problem_fetch+0x5cf8>)
 8006d2a:	461c      	mov	r4, r3
 8006d2c:	4613      	mov	r3, r2
 8006d2e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8006d30:	6020      	str	r0, [r4, #0]
 8006d32:	6061      	str	r1, [r4, #4]
 8006d34:	60a2      	str	r2, [r4, #8]
 8006d36:	881b      	ldrh	r3, [r3, #0]
 8006d38:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,8,13,12,16,9,18");
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	3304      	adds	r3, #4
 8006d3e:	4ab7      	ldr	r2, [pc, #732]	; (800701c <problem_fetch+0x5cfc>)
 8006d40:	461d      	mov	r5, r3
 8006d42:	4614      	mov	r4, r2
 8006d44:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006d46:	6028      	str	r0, [r5, #0]
 8006d48:	6069      	str	r1, [r5, #4]
 8006d4a:	60aa      	str	r2, [r5, #8]
 8006d4c:	60eb      	str	r3, [r5, #12]
 8006d4e:	8823      	ldrh	r3, [r4, #0]
 8006d50:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish, "s,d,d,d,d,d,e");
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	33d8      	adds	r3, #216	; 0xd8
 8006d56:	4ab2      	ldr	r2, [pc, #712]	; (8007020 <problem_fetch+0x5d00>)
 8006d58:	461c      	mov	r4, r3
 8006d5a:	4613      	mov	r3, r2
 8006d5c:	cb07      	ldmia	r3!, {r0, r1, r2}
 8006d5e:	6020      	str	r0, [r4, #0]
 8006d60:	6061      	str	r1, [r4, #4]
 8006d62:	60a2      	str	r2, [r4, #8]
 8006d64:	881b      	ldrh	r3, [r3, #0]
 8006d66:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade, "6B+");
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	33cc      	adds	r3, #204	; 0xcc
 8006d6c:	4aad      	ldr	r2, [pc, #692]	; (8007024 <problem_fetch+0x5d04>)
 8006d6e:	6810      	ldr	r0, [r2, #0]
 8006d70:	6018      	str	r0, [r3, #0]
			break;
 8006d72:	f014 b81b 	b.w	801adac <problem_fetch+0x19a8c>
		case 241 :
			strcpy(p->name,"BLACK HOLDS MATTER");
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	337c      	adds	r3, #124	; 0x7c
 8006d7a:	4aab      	ldr	r2, [pc, #684]	; (8007028 <problem_fetch+0x5d08>)
 8006d7c:	461d      	mov	r5, r3
 8006d7e:	4614      	mov	r4, r2
 8006d80:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006d82:	6028      	str	r0, [r5, #0]
 8006d84:	6069      	str	r1, [r5, #4]
 8006d86:	60aa      	str	r2, [r5, #8]
 8006d88:	60eb      	str	r3, [r5, #12]
 8006d8a:	8823      	ldrh	r3, [r4, #0]
 8006d8c:	78a2      	ldrb	r2, [r4, #2]
 8006d8e:	822b      	strh	r3, [r5, #16]
 8006d90:	4613      	mov	r3, r2
 8006d92:	74ab      	strb	r3, [r5, #18]
			p->moveSize = 11;
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	220b      	movs	r2, #11
 8006d98:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"G,J,J,H,H,F,J,K,G,G,I");
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	3340      	adds	r3, #64	; 0x40
 8006d9e:	4aa3      	ldr	r2, [pc, #652]	; (800702c <problem_fetch+0x5d0c>)
 8006da0:	461d      	mov	r5, r3
 8006da2:	4614      	mov	r4, r2
 8006da4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006da6:	6028      	str	r0, [r5, #0]
 8006da8:	6069      	str	r1, [r5, #4]
 8006daa:	60aa      	str	r2, [r5, #8]
 8006dac:	60eb      	str	r3, [r5, #12]
 8006dae:	6820      	ldr	r0, [r4, #0]
 8006db0:	6128      	str	r0, [r5, #16]
 8006db2:	88a3      	ldrh	r3, [r4, #4]
 8006db4:	82ab      	strh	r3, [r5, #20]
			strcpy(p->moveNumbers,"4,5,7,8,10,11,12,14,17,15,18");
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	3304      	adds	r3, #4
 8006dba:	4a9d      	ldr	r2, [pc, #628]	; (8007030 <problem_fetch+0x5d10>)
 8006dbc:	461d      	mov	r5, r3
 8006dbe:	4614      	mov	r4, r2
 8006dc0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006dc2:	6028      	str	r0, [r5, #0]
 8006dc4:	6069      	str	r1, [r5, #4]
 8006dc6:	60aa      	str	r2, [r5, #8]
 8006dc8:	60eb      	str	r3, [r5, #12]
 8006dca:	cc07      	ldmia	r4!, {r0, r1, r2}
 8006dcc:	6128      	str	r0, [r5, #16]
 8006dce:	6169      	str	r1, [r5, #20]
 8006dd0:	61aa      	str	r2, [r5, #24]
 8006dd2:	7823      	ldrb	r3, [r4, #0]
 8006dd4:	772b      	strb	r3, [r5, #28]
			strcpy(p->startFinish, "s,s,d,d,d,d,d,d,d,d,e");
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	33d8      	adds	r3, #216	; 0xd8
 8006dda:	4a96      	ldr	r2, [pc, #600]	; (8007034 <problem_fetch+0x5d14>)
 8006ddc:	461d      	mov	r5, r3
 8006dde:	4614      	mov	r4, r2
 8006de0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006de2:	6028      	str	r0, [r5, #0]
 8006de4:	6069      	str	r1, [r5, #4]
 8006de6:	60aa      	str	r2, [r5, #8]
 8006de8:	60eb      	str	r3, [r5, #12]
 8006dea:	6820      	ldr	r0, [r4, #0]
 8006dec:	6128      	str	r0, [r5, #16]
 8006dee:	88a3      	ldrh	r3, [r4, #4]
 8006df0:	82ab      	strh	r3, [r5, #20]
			strcpy(p->grade, "6C");
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	33cc      	adds	r3, #204	; 0xcc
 8006df6:	4a90      	ldr	r2, [pc, #576]	; (8007038 <problem_fetch+0x5d18>)
 8006df8:	8811      	ldrh	r1, [r2, #0]
 8006dfa:	7892      	ldrb	r2, [r2, #2]
 8006dfc:	8019      	strh	r1, [r3, #0]
 8006dfe:	709a      	strb	r2, [r3, #2]
			break;
 8006e00:	f013 bfd4 	b.w	801adac <problem_fetch+0x19a8c>
		case 242 :
			strcpy(p->name,"SIMON");
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	337c      	adds	r3, #124	; 0x7c
 8006e08:	4a8c      	ldr	r2, [pc, #560]	; (800703c <problem_fetch+0x5d1c>)
 8006e0a:	6810      	ldr	r0, [r2, #0]
 8006e0c:	6018      	str	r0, [r3, #0]
 8006e0e:	8892      	ldrh	r2, [r2, #4]
 8006e10:	809a      	strh	r2, [r3, #4]
			p->moveSize = 7;
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	2207      	movs	r2, #7
 8006e16:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"B,C,I,F,B,G,A");
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	3340      	adds	r3, #64	; 0x40
 8006e1c:	4a88      	ldr	r2, [pc, #544]	; (8007040 <problem_fetch+0x5d20>)
 8006e1e:	461c      	mov	r4, r3
 8006e20:	4613      	mov	r3, r2
 8006e22:	cb07      	ldmia	r3!, {r0, r1, r2}
 8006e24:	6020      	str	r0, [r4, #0]
 8006e26:	6061      	str	r1, [r4, #4]
 8006e28:	60a2      	str	r2, [r4, #8]
 8006e2a:	881b      	ldrh	r3, [r3, #0]
 8006e2c:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"6,5,7,11,12,17,18");
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	3304      	adds	r3, #4
 8006e32:	4a84      	ldr	r2, [pc, #528]	; (8007044 <problem_fetch+0x5d24>)
 8006e34:	461d      	mov	r5, r3
 8006e36:	4614      	mov	r4, r2
 8006e38:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006e3a:	6028      	str	r0, [r5, #0]
 8006e3c:	6069      	str	r1, [r5, #4]
 8006e3e:	60aa      	str	r2, [r5, #8]
 8006e40:	60eb      	str	r3, [r5, #12]
 8006e42:	8823      	ldrh	r3, [r4, #0]
 8006e44:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish, "s,s,d,d,d,d,e");
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	33d8      	adds	r3, #216	; 0xd8
 8006e4a:	4a7f      	ldr	r2, [pc, #508]	; (8007048 <problem_fetch+0x5d28>)
 8006e4c:	461c      	mov	r4, r3
 8006e4e:	4613      	mov	r3, r2
 8006e50:	cb07      	ldmia	r3!, {r0, r1, r2}
 8006e52:	6020      	str	r0, [r4, #0]
 8006e54:	6061      	str	r1, [r4, #4]
 8006e56:	60a2      	str	r2, [r4, #8]
 8006e58:	881b      	ldrh	r3, [r3, #0]
 8006e5a:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade, "7C+");
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	33cc      	adds	r3, #204	; 0xcc
 8006e60:	4a7a      	ldr	r2, [pc, #488]	; (800704c <problem_fetch+0x5d2c>)
 8006e62:	6810      	ldr	r0, [r2, #0]
 8006e64:	6018      	str	r0, [r3, #0]
			break;
 8006e66:	f013 bfa1 	b.w	801adac <problem_fetch+0x19a8c>
		case 243 :
			strcpy(p->name,"BLACK DOJO");
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	337c      	adds	r3, #124	; 0x7c
 8006e6e:	4978      	ldr	r1, [pc, #480]	; (8007050 <problem_fetch+0x5d30>)
 8006e70:	461a      	mov	r2, r3
 8006e72:	460b      	mov	r3, r1
 8006e74:	cb03      	ldmia	r3!, {r0, r1}
 8006e76:	6010      	str	r0, [r2, #0]
 8006e78:	6051      	str	r1, [r2, #4]
 8006e7a:	8819      	ldrh	r1, [r3, #0]
 8006e7c:	789b      	ldrb	r3, [r3, #2]
 8006e7e:	8111      	strh	r1, [r2, #8]
 8006e80:	7293      	strb	r3, [r2, #10]
			p->moveSize = 6;
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	2206      	movs	r2, #6
 8006e86:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"G,J,E,F,B,A");
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	3340      	adds	r3, #64	; 0x40
 8006e8c:	4a71      	ldr	r2, [pc, #452]	; (8007054 <problem_fetch+0x5d34>)
 8006e8e:	461c      	mov	r4, r3
 8006e90:	4613      	mov	r3, r2
 8006e92:	cb07      	ldmia	r3!, {r0, r1, r2}
 8006e94:	6020      	str	r0, [r4, #0]
 8006e96:	6061      	str	r1, [r4, #4]
 8006e98:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"6,5,16,11,10,18");
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	3304      	adds	r3, #4
 8006e9e:	4a6e      	ldr	r2, [pc, #440]	; (8007058 <problem_fetch+0x5d38>)
 8006ea0:	461c      	mov	r4, r3
 8006ea2:	4615      	mov	r5, r2
 8006ea4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006ea6:	6020      	str	r0, [r4, #0]
 8006ea8:	6061      	str	r1, [r4, #4]
 8006eaa:	60a2      	str	r2, [r4, #8]
 8006eac:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish, "s,s,d,d,d,e");
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	33d8      	adds	r3, #216	; 0xd8
 8006eb2:	4a6a      	ldr	r2, [pc, #424]	; (800705c <problem_fetch+0x5d3c>)
 8006eb4:	461c      	mov	r4, r3
 8006eb6:	4613      	mov	r3, r2
 8006eb8:	cb07      	ldmia	r3!, {r0, r1, r2}
 8006eba:	6020      	str	r0, [r4, #0]
 8006ebc:	6061      	str	r1, [r4, #4]
 8006ebe:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade, "7B");
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	33cc      	adds	r3, #204	; 0xcc
 8006ec4:	4a66      	ldr	r2, [pc, #408]	; (8007060 <problem_fetch+0x5d40>)
 8006ec6:	8811      	ldrh	r1, [r2, #0]
 8006ec8:	7892      	ldrb	r2, [r2, #2]
 8006eca:	8019      	strh	r1, [r3, #0]
 8006ecc:	709a      	strb	r2, [r3, #2]
			break;
 8006ece:	f013 bf6d 	b.w	801adac <problem_fetch+0x19a8c>
		case 244 :
			strcpy(p->name,"DAN1");
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	337c      	adds	r3, #124	; 0x7c
 8006ed6:	4a63      	ldr	r2, [pc, #396]	; (8007064 <problem_fetch+0x5d44>)
 8006ed8:	6810      	ldr	r0, [r2, #0]
 8006eda:	6018      	str	r0, [r3, #0]
 8006edc:	7912      	ldrb	r2, [r2, #4]
 8006ede:	711a      	strb	r2, [r3, #4]
			p->moveSize = 8;
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	2208      	movs	r2, #8
 8006ee4:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"J,H,G,F,E,C,D,D");
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	3340      	adds	r3, #64	; 0x40
 8006eea:	4a5f      	ldr	r2, [pc, #380]	; (8007068 <problem_fetch+0x5d48>)
 8006eec:	461c      	mov	r4, r3
 8006eee:	4615      	mov	r5, r2
 8006ef0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006ef2:	6020      	str	r0, [r4, #0]
 8006ef4:	6061      	str	r1, [r4, #4]
 8006ef6:	60a2      	str	r2, [r4, #8]
 8006ef8:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,8,9,11,12,13,15,18");
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	3304      	adds	r3, #4
 8006efe:	4a5b      	ldr	r2, [pc, #364]	; (800706c <problem_fetch+0x5d4c>)
 8006f00:	461d      	mov	r5, r3
 8006f02:	4614      	mov	r4, r2
 8006f04:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006f06:	6028      	str	r0, [r5, #0]
 8006f08:	6069      	str	r1, [r5, #4]
 8006f0a:	60aa      	str	r2, [r5, #8]
 8006f0c:	60eb      	str	r3, [r5, #12]
 8006f0e:	6820      	ldr	r0, [r4, #0]
 8006f10:	6128      	str	r0, [r5, #16]
 8006f12:	7923      	ldrb	r3, [r4, #4]
 8006f14:	752b      	strb	r3, [r5, #20]
			strcpy(p->startFinish, "s,d,d,d,d,d,d,e");
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	33d8      	adds	r3, #216	; 0xd8
 8006f1a:	4a55      	ldr	r2, [pc, #340]	; (8007070 <problem_fetch+0x5d50>)
 8006f1c:	461c      	mov	r4, r3
 8006f1e:	4615      	mov	r5, r2
 8006f20:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006f22:	6020      	str	r0, [r4, #0]
 8006f24:	6061      	str	r1, [r4, #4]
 8006f26:	60a2      	str	r2, [r4, #8]
 8006f28:	60e3      	str	r3, [r4, #12]
			strcpy(p->grade, "6C+");
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	33cc      	adds	r3, #204	; 0xcc
 8006f2e:	4a51      	ldr	r2, [pc, #324]	; (8007074 <problem_fetch+0x5d54>)
 8006f30:	6810      	ldr	r0, [r2, #0]
 8006f32:	6018      	str	r0, [r3, #0]
			break;
 8006f34:	f013 bf3a 	b.w	801adac <problem_fetch+0x19a8c>
		case 245 :
			strcpy(p->name,"모리");
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	337c      	adds	r3, #124	; 0x7c
 8006f3c:	4a4e      	ldr	r2, [pc, #312]	; (8007078 <problem_fetch+0x5d58>)
 8006f3e:	6810      	ldr	r0, [r2, #0]
 8006f40:	6018      	str	r0, [r3, #0]
 8006f42:	8891      	ldrh	r1, [r2, #4]
 8006f44:	7992      	ldrb	r2, [r2, #6]
 8006f46:	8099      	strh	r1, [r3, #4]
 8006f48:	719a      	strb	r2, [r3, #6]
			p->moveSize = 7;
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	2207      	movs	r2, #7
 8006f4e:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"G,E,F,B,D,E,I");
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	3340      	adds	r3, #64	; 0x40
 8006f54:	4a49      	ldr	r2, [pc, #292]	; (800707c <problem_fetch+0x5d5c>)
 8006f56:	461c      	mov	r4, r3
 8006f58:	4613      	mov	r3, r2
 8006f5a:	cb07      	ldmia	r3!, {r0, r1, r2}
 8006f5c:	6020      	str	r0, [r4, #0]
 8006f5e:	6061      	str	r1, [r4, #4]
 8006f60:	60a2      	str	r2, [r4, #8]
 8006f62:	881b      	ldrh	r3, [r3, #0]
 8006f64:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,8,11,12,15,16,18");
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	3304      	adds	r3, #4
 8006f6a:	4a45      	ldr	r2, [pc, #276]	; (8007080 <problem_fetch+0x5d60>)
 8006f6c:	461d      	mov	r5, r3
 8006f6e:	4614      	mov	r4, r2
 8006f70:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006f72:	6028      	str	r0, [r5, #0]
 8006f74:	6069      	str	r1, [r5, #4]
 8006f76:	60aa      	str	r2, [r5, #8]
 8006f78:	60eb      	str	r3, [r5, #12]
 8006f7a:	8823      	ldrh	r3, [r4, #0]
 8006f7c:	78a2      	ldrb	r2, [r4, #2]
 8006f7e:	822b      	strh	r3, [r5, #16]
 8006f80:	4613      	mov	r3, r2
 8006f82:	74ab      	strb	r3, [r5, #18]
			strcpy(p->startFinish, "s,d,d,d,d,d,e");
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	33d8      	adds	r3, #216	; 0xd8
 8006f88:	4a25      	ldr	r2, [pc, #148]	; (8007020 <problem_fetch+0x5d00>)
 8006f8a:	461c      	mov	r4, r3
 8006f8c:	4613      	mov	r3, r2
 8006f8e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8006f90:	6020      	str	r0, [r4, #0]
 8006f92:	6061      	str	r1, [r4, #4]
 8006f94:	60a2      	str	r2, [r4, #8]
 8006f96:	881b      	ldrh	r3, [r3, #0]
 8006f98:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade, "6C+");
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	33cc      	adds	r3, #204	; 0xcc
 8006f9e:	4a35      	ldr	r2, [pc, #212]	; (8007074 <problem_fetch+0x5d54>)
 8006fa0:	6810      	ldr	r0, [r2, #0]
 8006fa2:	6018      	str	r0, [r3, #0]
			break;
 8006fa4:	f013 bf02 	b.w	801adac <problem_fetch+0x19a8c>
		case 246 :
			strcpy(p->name,"BLACK HOLE SUN");
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	337c      	adds	r3, #124	; 0x7c
 8006fac:	4a35      	ldr	r2, [pc, #212]	; (8007084 <problem_fetch+0x5d64>)
 8006fae:	461c      	mov	r4, r3
 8006fb0:	4613      	mov	r3, r2
 8006fb2:	cb07      	ldmia	r3!, {r0, r1, r2}
 8006fb4:	6020      	str	r0, [r4, #0]
 8006fb6:	6061      	str	r1, [r4, #4]
 8006fb8:	60a2      	str	r2, [r4, #8]
 8006fba:	881a      	ldrh	r2, [r3, #0]
 8006fbc:	789b      	ldrb	r3, [r3, #2]
 8006fbe:	81a2      	strh	r2, [r4, #12]
 8006fc0:	73a3      	strb	r3, [r4, #14]
			p->moveSize = 6;
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	2206      	movs	r2, #6
 8006fc6:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"G,D,G,C,B,A");
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	3340      	adds	r3, #64	; 0x40
 8006fcc:	4a2e      	ldr	r2, [pc, #184]	; (8007088 <problem_fetch+0x5d68>)
 8006fce:	461c      	mov	r4, r3
 8006fd0:	4613      	mov	r3, r2
 8006fd2:	cb07      	ldmia	r3!, {r0, r1, r2}
 8006fd4:	6020      	str	r0, [r4, #0]
 8006fd6:	6061      	str	r1, [r4, #4]
 8006fd8:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,7,10,13,15,18");
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	3304      	adds	r3, #4
 8006fde:	4a2b      	ldr	r2, [pc, #172]	; (800708c <problem_fetch+0x5d6c>)
 8006fe0:	461c      	mov	r4, r3
 8006fe2:	4615      	mov	r5, r2
 8006fe4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006fe6:	6020      	str	r0, [r4, #0]
 8006fe8:	6061      	str	r1, [r4, #4]
 8006fea:	60a2      	str	r2, [r4, #8]
 8006fec:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish, "s,d,d,d,d,e");
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	33d8      	adds	r3, #216	; 0xd8
 8006ff2:	4a27      	ldr	r2, [pc, #156]	; (8007090 <problem_fetch+0x5d70>)
 8006ff4:	461c      	mov	r4, r3
 8006ff6:	4613      	mov	r3, r2
 8006ff8:	cb07      	ldmia	r3!, {r0, r1, r2}
 8006ffa:	6020      	str	r0, [r4, #0]
 8006ffc:	6061      	str	r1, [r4, #4]
 8006ffe:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade, "7A");
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	33cc      	adds	r3, #204	; 0xcc
 8007004:	4a23      	ldr	r2, [pc, #140]	; (8007094 <problem_fetch+0x5d74>)
 8007006:	8811      	ldrh	r1, [r2, #0]
 8007008:	7892      	ldrb	r2, [r2, #2]
 800700a:	8019      	strh	r1, [r3, #0]
 800700c:	709a      	strb	r2, [r3, #2]
			break;
 800700e:	f013 becd 	b.w	801adac <problem_fetch+0x19a8c>
 8007012:	bf00      	nop
 8007014:	080230c4 	.word	0x080230c4
 8007018:	080230d4 	.word	0x080230d4
 800701c:	080230e4 	.word	0x080230e4
 8007020:	08021494 	.word	0x08021494
 8007024:	080212b0 	.word	0x080212b0
 8007028:	080230f8 	.word	0x080230f8
 800702c:	0802310c 	.word	0x0802310c
 8007030:	08023124 	.word	0x08023124
 8007034:	08022a18 	.word	0x08022a18
 8007038:	08021370 	.word	0x08021370
 800703c:	08023144 	.word	0x08023144
 8007040:	0802314c 	.word	0x0802314c
 8007044:	0802315c 	.word	0x0802315c
 8007048:	080212a0 	.word	0x080212a0
 800704c:	08023170 	.word	0x08023170
 8007050:	08023174 	.word	0x08023174
 8007054:	08023180 	.word	0x08023180
 8007058:	0802318c 	.word	0x0802318c
 800705c:	08021910 	.word	0x08021910
 8007060:	0802132c 	.word	0x0802132c
 8007064:	0802319c 	.word	0x0802319c
 8007068:	080231a4 	.word	0x080231a4
 800706c:	080231b4 	.word	0x080231b4
 8007070:	08021458 	.word	0x08021458
 8007074:	080213a8 	.word	0x080213a8
 8007078:	080231cc 	.word	0x080231cc
 800707c:	080231d4 	.word	0x080231d4
 8007080:	080231e4 	.word	0x080231e4
 8007084:	080231f8 	.word	0x080231f8
 8007088:	08023208 	.word	0x08023208
 800708c:	08023214 	.word	0x08023214
 8007090:	0802139c 	.word	0x0802139c
 8007094:	080212f4 	.word	0x080212f4
		case 247 :
			strcpy(p->name,"HOLY IWAN");
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	337c      	adds	r3, #124	; 0x7c
 800709c:	49be      	ldr	r1, [pc, #760]	; (8007398 <problem_fetch+0x6078>)
 800709e:	461a      	mov	r2, r3
 80070a0:	460b      	mov	r3, r1
 80070a2:	cb03      	ldmia	r3!, {r0, r1}
 80070a4:	6010      	str	r0, [r2, #0]
 80070a6:	6051      	str	r1, [r2, #4]
 80070a8:	881b      	ldrh	r3, [r3, #0]
 80070aa:	8113      	strh	r3, [r2, #8]
			p->moveSize = 10;
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	220a      	movs	r2, #10
 80070b0:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"B,E,E,C,B,E,C,D,C,D");
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	3340      	adds	r3, #64	; 0x40
 80070b6:	4ab9      	ldr	r2, [pc, #740]	; (800739c <problem_fetch+0x607c>)
 80070b8:	461d      	mov	r5, r3
 80070ba:	4614      	mov	r4, r2
 80070bc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80070be:	6028      	str	r0, [r5, #0]
 80070c0:	6069      	str	r1, [r5, #4]
 80070c2:	60aa      	str	r2, [r5, #8]
 80070c4:	60eb      	str	r3, [r5, #12]
 80070c6:	6820      	ldr	r0, [r4, #0]
 80070c8:	6128      	str	r0, [r5, #16]
			strcpy(p->moveNumbers,"6,6,8,8,10,12,13,15,16,18");
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	3304      	adds	r3, #4
 80070ce:	4ab4      	ldr	r2, [pc, #720]	; (80073a0 <problem_fetch+0x6080>)
 80070d0:	461d      	mov	r5, r3
 80070d2:	4614      	mov	r4, r2
 80070d4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80070d6:	6028      	str	r0, [r5, #0]
 80070d8:	6069      	str	r1, [r5, #4]
 80070da:	60aa      	str	r2, [r5, #8]
 80070dc:	60eb      	str	r3, [r5, #12]
 80070de:	cc03      	ldmia	r4!, {r0, r1}
 80070e0:	6128      	str	r0, [r5, #16]
 80070e2:	6169      	str	r1, [r5, #20]
 80070e4:	8823      	ldrh	r3, [r4, #0]
 80070e6:	832b      	strh	r3, [r5, #24]
			strcpy(p->startFinish, "s,s,d,d,d,d,d,d,d,e");
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	33d8      	adds	r3, #216	; 0xd8
 80070ec:	4aad      	ldr	r2, [pc, #692]	; (80073a4 <problem_fetch+0x6084>)
 80070ee:	461d      	mov	r5, r3
 80070f0:	4614      	mov	r4, r2
 80070f2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80070f4:	6028      	str	r0, [r5, #0]
 80070f6:	6069      	str	r1, [r5, #4]
 80070f8:	60aa      	str	r2, [r5, #8]
 80070fa:	60eb      	str	r3, [r5, #12]
 80070fc:	6820      	ldr	r0, [r4, #0]
 80070fe:	6128      	str	r0, [r5, #16]
			strcpy(p->grade, "6B+");
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	33cc      	adds	r3, #204	; 0xcc
 8007104:	4aa8      	ldr	r2, [pc, #672]	; (80073a8 <problem_fetch+0x6088>)
 8007106:	6810      	ldr	r0, [r2, #0]
 8007108:	6018      	str	r0, [r3, #0]
			break;
 800710a:	f013 be4f 	b.w	801adac <problem_fetch+0x19a8c>
		case 248 :
			strcpy(p->name,"CRANK IT UP A NOTCH!");
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	337c      	adds	r3, #124	; 0x7c
 8007112:	4aa6      	ldr	r2, [pc, #664]	; (80073ac <problem_fetch+0x608c>)
 8007114:	461d      	mov	r5, r3
 8007116:	4614      	mov	r4, r2
 8007118:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800711a:	6028      	str	r0, [r5, #0]
 800711c:	6069      	str	r1, [r5, #4]
 800711e:	60aa      	str	r2, [r5, #8]
 8007120:	60eb      	str	r3, [r5, #12]
 8007122:	6820      	ldr	r0, [r4, #0]
 8007124:	6128      	str	r0, [r5, #16]
 8007126:	7923      	ldrb	r3, [r4, #4]
 8007128:	752b      	strb	r3, [r5, #20]
			p->moveSize = 4;
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	2204      	movs	r2, #4
 800712e:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"G,F,C,D");
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	3340      	adds	r3, #64	; 0x40
 8007134:	499e      	ldr	r1, [pc, #632]	; (80073b0 <problem_fetch+0x6090>)
 8007136:	461a      	mov	r2, r3
 8007138:	460b      	mov	r3, r1
 800713a:	cb03      	ldmia	r3!, {r0, r1}
 800713c:	6010      	str	r0, [r2, #0]
 800713e:	6051      	str	r1, [r2, #4]
			strcpy(p->moveNumbers,"6,11,13,18");
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	3304      	adds	r3, #4
 8007144:	499b      	ldr	r1, [pc, #620]	; (80073b4 <problem_fetch+0x6094>)
 8007146:	461a      	mov	r2, r3
 8007148:	460b      	mov	r3, r1
 800714a:	cb03      	ldmia	r3!, {r0, r1}
 800714c:	6010      	str	r0, [r2, #0]
 800714e:	6051      	str	r1, [r2, #4]
 8007150:	8819      	ldrh	r1, [r3, #0]
 8007152:	789b      	ldrb	r3, [r3, #2]
 8007154:	8111      	strh	r1, [r2, #8]
 8007156:	7293      	strb	r3, [r2, #10]
			strcpy(p->startFinish, "s,d,d,e");
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	33d8      	adds	r3, #216	; 0xd8
 800715c:	4996      	ldr	r1, [pc, #600]	; (80073b8 <problem_fetch+0x6098>)
 800715e:	461a      	mov	r2, r3
 8007160:	460b      	mov	r3, r1
 8007162:	cb03      	ldmia	r3!, {r0, r1}
 8007164:	6010      	str	r0, [r2, #0]
 8007166:	6051      	str	r1, [r2, #4]
			strcpy(p->grade, "7A+");
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	33cc      	adds	r3, #204	; 0xcc
 800716c:	4a93      	ldr	r2, [pc, #588]	; (80073bc <problem_fetch+0x609c>)
 800716e:	6810      	ldr	r0, [r2, #0]
 8007170:	6018      	str	r0, [r3, #0]
			break;
 8007172:	f013 be1b 	b.w	801adac <problem_fetch+0x19a8c>
		case 249 :
			strcpy(p->name,"BLABLUB");
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	337c      	adds	r3, #124	; 0x7c
 800717a:	4991      	ldr	r1, [pc, #580]	; (80073c0 <problem_fetch+0x60a0>)
 800717c:	461a      	mov	r2, r3
 800717e:	460b      	mov	r3, r1
 8007180:	cb03      	ldmia	r3!, {r0, r1}
 8007182:	6010      	str	r0, [r2, #0]
 8007184:	6051      	str	r1, [r2, #4]
			p->moveSize = 7;
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	2207      	movs	r2, #7
 800718a:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"B,E,B,E,A,D,D");
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	3340      	adds	r3, #64	; 0x40
 8007190:	4a8c      	ldr	r2, [pc, #560]	; (80073c4 <problem_fetch+0x60a4>)
 8007192:	461c      	mov	r4, r3
 8007194:	4613      	mov	r3, r2
 8007196:	cb07      	ldmia	r3!, {r0, r1, r2}
 8007198:	6020      	str	r0, [r4, #0]
 800719a:	6061      	str	r1, [r4, #4]
 800719c:	60a2      	str	r2, [r4, #8]
 800719e:	881b      	ldrh	r3, [r3, #0]
 80071a0:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"6,6,10,12,14,15,18");
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	3304      	adds	r3, #4
 80071a6:	4a88      	ldr	r2, [pc, #544]	; (80073c8 <problem_fetch+0x60a8>)
 80071a8:	461d      	mov	r5, r3
 80071aa:	4614      	mov	r4, r2
 80071ac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80071ae:	6028      	str	r0, [r5, #0]
 80071b0:	6069      	str	r1, [r5, #4]
 80071b2:	60aa      	str	r2, [r5, #8]
 80071b4:	60eb      	str	r3, [r5, #12]
 80071b6:	8823      	ldrh	r3, [r4, #0]
 80071b8:	78a2      	ldrb	r2, [r4, #2]
 80071ba:	822b      	strh	r3, [r5, #16]
 80071bc:	4613      	mov	r3, r2
 80071be:	74ab      	strb	r3, [r5, #18]
			strcpy(p->startFinish, "s,s,d,d,d,d,e");
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	33d8      	adds	r3, #216	; 0xd8
 80071c4:	4a81      	ldr	r2, [pc, #516]	; (80073cc <problem_fetch+0x60ac>)
 80071c6:	461c      	mov	r4, r3
 80071c8:	4613      	mov	r3, r2
 80071ca:	cb07      	ldmia	r3!, {r0, r1, r2}
 80071cc:	6020      	str	r0, [r4, #0]
 80071ce:	6061      	str	r1, [r4, #4]
 80071d0:	60a2      	str	r2, [r4, #8]
 80071d2:	881b      	ldrh	r3, [r3, #0]
 80071d4:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade, "6C");
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	33cc      	adds	r3, #204	; 0xcc
 80071da:	4a7d      	ldr	r2, [pc, #500]	; (80073d0 <problem_fetch+0x60b0>)
 80071dc:	8811      	ldrh	r1, [r2, #0]
 80071de:	7892      	ldrb	r2, [r2, #2]
 80071e0:	8019      	strh	r1, [r3, #0]
 80071e2:	709a      	strb	r2, [r3, #2]
			break;
 80071e4:	f013 bde2 	b.w	801adac <problem_fetch+0x19a8c>
		case 25 :
			strcpy(p->name,"MELET");
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	337c      	adds	r3, #124	; 0x7c
 80071ec:	4a79      	ldr	r2, [pc, #484]	; (80073d4 <problem_fetch+0x60b4>)
 80071ee:	6810      	ldr	r0, [r2, #0]
 80071f0:	6018      	str	r0, [r3, #0]
 80071f2:	8892      	ldrh	r2, [r2, #4]
 80071f4:	809a      	strh	r2, [r3, #4]
			p->moveSize = 5;
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	2205      	movs	r2, #5
 80071fa:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"C,H,H,I,J");
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	3340      	adds	r3, #64	; 0x40
 8007200:	4975      	ldr	r1, [pc, #468]	; (80073d8 <problem_fetch+0x60b8>)
 8007202:	461a      	mov	r2, r3
 8007204:	460b      	mov	r3, r1
 8007206:	cb03      	ldmia	r3!, {r0, r1}
 8007208:	6010      	str	r0, [r2, #0]
 800720a:	6051      	str	r1, [r2, #4]
 800720c:	881b      	ldrh	r3, [r3, #0]
 800720e:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"13,16,10,18,5");
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	3304      	adds	r3, #4
 8007214:	4a71      	ldr	r2, [pc, #452]	; (80073dc <problem_fetch+0x60bc>)
 8007216:	461c      	mov	r4, r3
 8007218:	4613      	mov	r3, r2
 800721a:	cb07      	ldmia	r3!, {r0, r1, r2}
 800721c:	6020      	str	r0, [r4, #0]
 800721e:	6061      	str	r1, [r4, #4]
 8007220:	60a2      	str	r2, [r4, #8]
 8007222:	881b      	ldrh	r3, [r3, #0]
 8007224:	81a3      	strh	r3, [r4, #12]
			strcpy(p->startFinish, "d,d,d,e,s");
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	33d8      	adds	r3, #216	; 0xd8
 800722a:	496d      	ldr	r1, [pc, #436]	; (80073e0 <problem_fetch+0x60c0>)
 800722c:	461a      	mov	r2, r3
 800722e:	460b      	mov	r3, r1
 8007230:	cb03      	ldmia	r3!, {r0, r1}
 8007232:	6010      	str	r0, [r2, #0]
 8007234:	6051      	str	r1, [r2, #4]
 8007236:	881b      	ldrh	r3, [r3, #0]
 8007238:	8113      	strh	r3, [r2, #8]
			strcpy(p->grade, "7A+");
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	33cc      	adds	r3, #204	; 0xcc
 800723e:	4a5f      	ldr	r2, [pc, #380]	; (80073bc <problem_fetch+0x609c>)
 8007240:	6810      	ldr	r0, [r2, #0]
 8007242:	6018      	str	r0, [r3, #0]
			break;
 8007244:	f013 bdb2 	b.w	801adac <problem_fetch+0x19a8c>
		case 250 :
			strcpy(p->name,"ALEXS PROBLEM NUMBER ONE");
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	337c      	adds	r3, #124	; 0x7c
 800724c:	4a65      	ldr	r2, [pc, #404]	; (80073e4 <problem_fetch+0x60c4>)
 800724e:	461d      	mov	r5, r3
 8007250:	4614      	mov	r4, r2
 8007252:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007254:	6028      	str	r0, [r5, #0]
 8007256:	6069      	str	r1, [r5, #4]
 8007258:	60aa      	str	r2, [r5, #8]
 800725a:	60eb      	str	r3, [r5, #12]
 800725c:	cc03      	ldmia	r4!, {r0, r1}
 800725e:	6128      	str	r0, [r5, #16]
 8007260:	6169      	str	r1, [r5, #20]
 8007262:	7823      	ldrb	r3, [r4, #0]
 8007264:	762b      	strb	r3, [r5, #24]
			p->moveSize = 8;
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	2208      	movs	r2, #8
 800726a:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"B,E,E,B,E,A,D,D");
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	3340      	adds	r3, #64	; 0x40
 8007270:	4a5d      	ldr	r2, [pc, #372]	; (80073e8 <problem_fetch+0x60c8>)
 8007272:	461c      	mov	r4, r3
 8007274:	4615      	mov	r5, r2
 8007276:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007278:	6020      	str	r0, [r4, #0]
 800727a:	6061      	str	r1, [r4, #4]
 800727c:	60a2      	str	r2, [r4, #8]
 800727e:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"6,6,8,10,12,14,15,18");
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	3304      	adds	r3, #4
 8007284:	4a59      	ldr	r2, [pc, #356]	; (80073ec <problem_fetch+0x60cc>)
 8007286:	461d      	mov	r5, r3
 8007288:	4614      	mov	r4, r2
 800728a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800728c:	6028      	str	r0, [r5, #0]
 800728e:	6069      	str	r1, [r5, #4]
 8007290:	60aa      	str	r2, [r5, #8]
 8007292:	60eb      	str	r3, [r5, #12]
 8007294:	6820      	ldr	r0, [r4, #0]
 8007296:	6128      	str	r0, [r5, #16]
 8007298:	7923      	ldrb	r3, [r4, #4]
 800729a:	752b      	strb	r3, [r5, #20]
			strcpy(p->startFinish, "s,s,d,d,d,d,d,e");
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	33d8      	adds	r3, #216	; 0xd8
 80072a0:	4a53      	ldr	r2, [pc, #332]	; (80073f0 <problem_fetch+0x60d0>)
 80072a2:	461c      	mov	r4, r3
 80072a4:	4615      	mov	r5, r2
 80072a6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80072a8:	6020      	str	r0, [r4, #0]
 80072aa:	6061      	str	r1, [r4, #4]
 80072ac:	60a2      	str	r2, [r4, #8]
 80072ae:	60e3      	str	r3, [r4, #12]
			strcpy(p->grade, "6B+");
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	33cc      	adds	r3, #204	; 0xcc
 80072b4:	4a3c      	ldr	r2, [pc, #240]	; (80073a8 <problem_fetch+0x6088>)
 80072b6:	6810      	ldr	r0, [r2, #0]
 80072b8:	6018      	str	r0, [r3, #0]
			break;
 80072ba:	f013 bd77 	b.w	801adac <problem_fetch+0x19a8c>
		case 251 :
			strcpy(p->name,"FORSØK 15");
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	337c      	adds	r3, #124	; 0x7c
 80072c2:	494c      	ldr	r1, [pc, #304]	; (80073f4 <problem_fetch+0x60d4>)
 80072c4:	461a      	mov	r2, r3
 80072c6:	460b      	mov	r3, r1
 80072c8:	cb03      	ldmia	r3!, {r0, r1}
 80072ca:	6010      	str	r0, [r2, #0]
 80072cc:	6051      	str	r1, [r2, #4]
 80072ce:	8819      	ldrh	r1, [r3, #0]
 80072d0:	789b      	ldrb	r3, [r3, #2]
 80072d2:	8111      	strh	r1, [r2, #8]
 80072d4:	7293      	strb	r3, [r2, #10]
			p->moveSize = 7;
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	2207      	movs	r2, #7
 80072da:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"H,H,C,F,C,D,A");
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	3340      	adds	r3, #64	; 0x40
 80072e0:	4a45      	ldr	r2, [pc, #276]	; (80073f8 <problem_fetch+0x60d8>)
 80072e2:	461c      	mov	r4, r3
 80072e4:	4613      	mov	r3, r2
 80072e6:	cb07      	ldmia	r3!, {r0, r1, r2}
 80072e8:	6020      	str	r0, [r4, #0]
 80072ea:	6061      	str	r1, [r4, #4]
 80072ec:	60a2      	str	r2, [r4, #8]
 80072ee:	881b      	ldrh	r3, [r3, #0]
 80072f0:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,8,8,11,13,15,18");
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	3304      	adds	r3, #4
 80072f6:	4a41      	ldr	r2, [pc, #260]	; (80073fc <problem_fetch+0x60dc>)
 80072f8:	461d      	mov	r5, r3
 80072fa:	4614      	mov	r4, r2
 80072fc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80072fe:	6028      	str	r0, [r5, #0]
 8007300:	6069      	str	r1, [r5, #4]
 8007302:	60aa      	str	r2, [r5, #8]
 8007304:	60eb      	str	r3, [r5, #12]
 8007306:	8823      	ldrh	r3, [r4, #0]
 8007308:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish, "s,d,d,d,d,d,e");
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	33d8      	adds	r3, #216	; 0xd8
 800730e:	4a3c      	ldr	r2, [pc, #240]	; (8007400 <problem_fetch+0x60e0>)
 8007310:	461c      	mov	r4, r3
 8007312:	4613      	mov	r3, r2
 8007314:	cb07      	ldmia	r3!, {r0, r1, r2}
 8007316:	6020      	str	r0, [r4, #0]
 8007318:	6061      	str	r1, [r4, #4]
 800731a:	60a2      	str	r2, [r4, #8]
 800731c:	881b      	ldrh	r3, [r3, #0]
 800731e:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade, "6C+");
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	33cc      	adds	r3, #204	; 0xcc
 8007324:	4a37      	ldr	r2, [pc, #220]	; (8007404 <problem_fetch+0x60e4>)
 8007326:	6810      	ldr	r0, [r2, #0]
 8007328:	6018      	str	r0, [r3, #0]
			break;
 800732a:	f013 bd3f 	b.w	801adac <problem_fetch+0x19a8c>
		case 252 :
			strcpy(p->name,"FULCRO HARD");
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	337c      	adds	r3, #124	; 0x7c
 8007332:	4a35      	ldr	r2, [pc, #212]	; (8007408 <problem_fetch+0x60e8>)
 8007334:	461c      	mov	r4, r3
 8007336:	4613      	mov	r3, r2
 8007338:	cb07      	ldmia	r3!, {r0, r1, r2}
 800733a:	6020      	str	r0, [r4, #0]
 800733c:	6061      	str	r1, [r4, #4]
 800733e:	60a2      	str	r2, [r4, #8]
			p->moveSize = 6;
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	2206      	movs	r2, #6
 8007344:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"G,G,I,D,E,D");
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	3340      	adds	r3, #64	; 0x40
 800734a:	4a30      	ldr	r2, [pc, #192]	; (800740c <problem_fetch+0x60ec>)
 800734c:	461c      	mov	r4, r3
 800734e:	4613      	mov	r3, r2
 8007350:	cb07      	ldmia	r3!, {r0, r1, r2}
 8007352:	6020      	str	r0, [r4, #0]
 8007354:	6061      	str	r1, [r4, #4]
 8007356:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,6,9,11,16,18");
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	3304      	adds	r3, #4
 800735c:	4a2c      	ldr	r2, [pc, #176]	; (8007410 <problem_fetch+0x60f0>)
 800735e:	461c      	mov	r4, r3
 8007360:	4613      	mov	r3, r2
 8007362:	cb07      	ldmia	r3!, {r0, r1, r2}
 8007364:	6020      	str	r0, [r4, #0]
 8007366:	6061      	str	r1, [r4, #4]
 8007368:	60a2      	str	r2, [r4, #8]
 800736a:	881a      	ldrh	r2, [r3, #0]
 800736c:	789b      	ldrb	r3, [r3, #2]
 800736e:	81a2      	strh	r2, [r4, #12]
 8007370:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish, "s,s,d,d,d,e");
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	33d8      	adds	r3, #216	; 0xd8
 8007376:	4a27      	ldr	r2, [pc, #156]	; (8007414 <problem_fetch+0x60f4>)
 8007378:	461c      	mov	r4, r3
 800737a:	4613      	mov	r3, r2
 800737c:	cb07      	ldmia	r3!, {r0, r1, r2}
 800737e:	6020      	str	r0, [r4, #0]
 8007380:	6061      	str	r1, [r4, #4]
 8007382:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade, "7C");
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	33cc      	adds	r3, #204	; 0xcc
 8007388:	4a23      	ldr	r2, [pc, #140]	; (8007418 <problem_fetch+0x60f8>)
 800738a:	8811      	ldrh	r1, [r2, #0]
 800738c:	7892      	ldrb	r2, [r2, #2]
 800738e:	8019      	strh	r1, [r3, #0]
 8007390:	709a      	strb	r2, [r3, #2]
			break;
 8007392:	f013 bd0b 	b.w	801adac <problem_fetch+0x19a8c>
 8007396:	bf00      	nop
 8007398:	08023224 	.word	0x08023224
 800739c:	08023230 	.word	0x08023230
 80073a0:	08023244 	.word	0x08023244
 80073a4:	080215fc 	.word	0x080215fc
 80073a8:	080212b0 	.word	0x080212b0
 80073ac:	08023260 	.word	0x08023260
 80073b0:	08023278 	.word	0x08023278
 80073b4:	08023280 	.word	0x08023280
 80073b8:	08022028 	.word	0x08022028
 80073bc:	08021424 	.word	0x08021424
 80073c0:	0802328c 	.word	0x0802328c
 80073c4:	08023294 	.word	0x08023294
 80073c8:	080232a4 	.word	0x080232a4
 80073cc:	080212a0 	.word	0x080212a0
 80073d0:	08021370 	.word	0x08021370
 80073d4:	080232b8 	.word	0x080232b8
 80073d8:	080232c0 	.word	0x080232c0
 80073dc:	080232cc 	.word	0x080232cc
 80073e0:	080232dc 	.word	0x080232dc
 80073e4:	080232e8 	.word	0x080232e8
 80073e8:	08023304 	.word	0x08023304
 80073ec:	08023314 	.word	0x08023314
 80073f0:	080214cc 	.word	0x080214cc
 80073f4:	0802332c 	.word	0x0802332c
 80073f8:	0802280c 	.word	0x0802280c
 80073fc:	0802281c 	.word	0x0802281c
 8007400:	08021494 	.word	0x08021494
 8007404:	080213a8 	.word	0x080213a8
 8007408:	08023338 	.word	0x08023338
 800740c:	08023344 	.word	0x08023344
 8007410:	08023350 	.word	0x08023350
 8007414:	08021910 	.word	0x08021910
 8007418:	0802158c 	.word	0x0802158c
		case 253 :
			strcpy(p->name,"JOHNNY REHAB 4");
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	337c      	adds	r3, #124	; 0x7c
 8007420:	4aab      	ldr	r2, [pc, #684]	; (80076d0 <problem_fetch+0x63b0>)
 8007422:	461c      	mov	r4, r3
 8007424:	4613      	mov	r3, r2
 8007426:	cb07      	ldmia	r3!, {r0, r1, r2}
 8007428:	6020      	str	r0, [r4, #0]
 800742a:	6061      	str	r1, [r4, #4]
 800742c:	60a2      	str	r2, [r4, #8]
 800742e:	881a      	ldrh	r2, [r3, #0]
 8007430:	789b      	ldrb	r3, [r3, #2]
 8007432:	81a2      	strh	r2, [r4, #12]
 8007434:	73a3      	strb	r3, [r4, #14]
			p->moveSize = 9;
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	2209      	movs	r2, #9
 800743a:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"G,J,H,K,J,I,E,J,D");
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	3340      	adds	r3, #64	; 0x40
 8007440:	4aa4      	ldr	r2, [pc, #656]	; (80076d4 <problem_fetch+0x63b4>)
 8007442:	461d      	mov	r5, r3
 8007444:	4614      	mov	r4, r2
 8007446:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007448:	6028      	str	r0, [r5, #0]
 800744a:	6069      	str	r1, [r5, #4]
 800744c:	60aa      	str	r2, [r5, #8]
 800744e:	60eb      	str	r3, [r5, #12]
 8007450:	8823      	ldrh	r3, [r4, #0]
 8007452:	822b      	strh	r3, [r5, #16]
			strcpy(p->moveNumbers,"4,5,10,9,12,14,8,16,18");
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	3304      	adds	r3, #4
 8007458:	4a9f      	ldr	r2, [pc, #636]	; (80076d8 <problem_fetch+0x63b8>)
 800745a:	461c      	mov	r4, r3
 800745c:	4615      	mov	r5, r2
 800745e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007460:	6020      	str	r0, [r4, #0]
 8007462:	6061      	str	r1, [r4, #4]
 8007464:	60a2      	str	r2, [r4, #8]
 8007466:	60e3      	str	r3, [r4, #12]
 8007468:	6828      	ldr	r0, [r5, #0]
 800746a:	6120      	str	r0, [r4, #16]
 800746c:	88ab      	ldrh	r3, [r5, #4]
 800746e:	79aa      	ldrb	r2, [r5, #6]
 8007470:	82a3      	strh	r3, [r4, #20]
 8007472:	4613      	mov	r3, r2
 8007474:	75a3      	strb	r3, [r4, #22]
			strcpy(p->startFinish, "s,s,d,d,d,d,d,d,e");
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	33d8      	adds	r3, #216	; 0xd8
 800747a:	4a98      	ldr	r2, [pc, #608]	; (80076dc <problem_fetch+0x63bc>)
 800747c:	461d      	mov	r5, r3
 800747e:	4614      	mov	r4, r2
 8007480:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007482:	6028      	str	r0, [r5, #0]
 8007484:	6069      	str	r1, [r5, #4]
 8007486:	60aa      	str	r2, [r5, #8]
 8007488:	60eb      	str	r3, [r5, #12]
 800748a:	8823      	ldrh	r3, [r4, #0]
 800748c:	822b      	strh	r3, [r5, #16]
			strcpy(p->grade, "6C+");
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	33cc      	adds	r3, #204	; 0xcc
 8007492:	4a93      	ldr	r2, [pc, #588]	; (80076e0 <problem_fetch+0x63c0>)
 8007494:	6810      	ldr	r0, [r2, #0]
 8007496:	6018      	str	r0, [r3, #0]
			break;
 8007498:	f013 bc88 	b.w	801adac <problem_fetch+0x19a8c>
		case 254 :
			strcpy(p->name,"180 CAMPUS");
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	337c      	adds	r3, #124	; 0x7c
 80074a0:	4990      	ldr	r1, [pc, #576]	; (80076e4 <problem_fetch+0x63c4>)
 80074a2:	461a      	mov	r2, r3
 80074a4:	460b      	mov	r3, r1
 80074a6:	cb03      	ldmia	r3!, {r0, r1}
 80074a8:	6010      	str	r0, [r2, #0]
 80074aa:	6051      	str	r1, [r2, #4]
 80074ac:	8819      	ldrh	r1, [r3, #0]
 80074ae:	789b      	ldrb	r3, [r3, #2]
 80074b0:	8111      	strh	r1, [r2, #8]
 80074b2:	7293      	strb	r3, [r2, #10]
			p->moveSize = 5;
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	2205      	movs	r2, #5
 80074b8:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"J,K,H,I,D");
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	3340      	adds	r3, #64	; 0x40
 80074be:	498a      	ldr	r1, [pc, #552]	; (80076e8 <problem_fetch+0x63c8>)
 80074c0:	461a      	mov	r2, r3
 80074c2:	460b      	mov	r3, r1
 80074c4:	cb03      	ldmia	r3!, {r0, r1}
 80074c6:	6010      	str	r0, [r2, #0]
 80074c8:	6051      	str	r1, [r2, #4]
 80074ca:	881b      	ldrh	r3, [r3, #0]
 80074cc:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"5,9,13,14,18");
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	3304      	adds	r3, #4
 80074d2:	4a86      	ldr	r2, [pc, #536]	; (80076ec <problem_fetch+0x63cc>)
 80074d4:	461c      	mov	r4, r3
 80074d6:	4613      	mov	r3, r2
 80074d8:	cb07      	ldmia	r3!, {r0, r1, r2}
 80074da:	6020      	str	r0, [r4, #0]
 80074dc:	6061      	str	r1, [r4, #4]
 80074de:	60a2      	str	r2, [r4, #8]
 80074e0:	781b      	ldrb	r3, [r3, #0]
 80074e2:	7323      	strb	r3, [r4, #12]
			strcpy(p->startFinish, "s,d,d,d,e");
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	33d8      	adds	r3, #216	; 0xd8
 80074e8:	4981      	ldr	r1, [pc, #516]	; (80076f0 <problem_fetch+0x63d0>)
 80074ea:	461a      	mov	r2, r3
 80074ec:	460b      	mov	r3, r1
 80074ee:	cb03      	ldmia	r3!, {r0, r1}
 80074f0:	6010      	str	r0, [r2, #0]
 80074f2:	6051      	str	r1, [r2, #4]
 80074f4:	881b      	ldrh	r3, [r3, #0]
 80074f6:	8113      	strh	r3, [r2, #8]
			strcpy(p->grade, "7A");
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	33cc      	adds	r3, #204	; 0xcc
 80074fc:	4a7d      	ldr	r2, [pc, #500]	; (80076f4 <problem_fetch+0x63d4>)
 80074fe:	8811      	ldrh	r1, [r2, #0]
 8007500:	7892      	ldrb	r2, [r2, #2]
 8007502:	8019      	strh	r1, [r3, #0]
 8007504:	709a      	strb	r2, [r3, #2]
			break;
 8007506:	f013 bc51 	b.w	801adac <problem_fetch+0x19a8c>
		case 255 :
			strcpy(p->name,"EVERY WHICH WAY BUT RIGHT");
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	337c      	adds	r3, #124	; 0x7c
 800750e:	4a7a      	ldr	r2, [pc, #488]	; (80076f8 <problem_fetch+0x63d8>)
 8007510:	461d      	mov	r5, r3
 8007512:	4614      	mov	r4, r2
 8007514:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007516:	6028      	str	r0, [r5, #0]
 8007518:	6069      	str	r1, [r5, #4]
 800751a:	60aa      	str	r2, [r5, #8]
 800751c:	60eb      	str	r3, [r5, #12]
 800751e:	cc03      	ldmia	r4!, {r0, r1}
 8007520:	6128      	str	r0, [r5, #16]
 8007522:	6169      	str	r1, [r5, #20]
 8007524:	8823      	ldrh	r3, [r4, #0]
 8007526:	832b      	strh	r3, [r5, #24]
			p->moveSize = 10;
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	220a      	movs	r2, #10
 800752c:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"G,B,C,A,C,B,I,G,G,I");
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	3340      	adds	r3, #64	; 0x40
 8007532:	4a72      	ldr	r2, [pc, #456]	; (80076fc <problem_fetch+0x63dc>)
 8007534:	461d      	mov	r5, r3
 8007536:	4614      	mov	r4, r2
 8007538:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800753a:	6028      	str	r0, [r5, #0]
 800753c:	6069      	str	r1, [r5, #4]
 800753e:	60aa      	str	r2, [r5, #8]
 8007540:	60eb      	str	r3, [r5, #12]
 8007542:	6820      	ldr	r0, [r4, #0]
 8007544:	6128      	str	r0, [r5, #16]
			strcpy(p->moveNumbers,"4,6,8,9,13,15,10,15,17,18");
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	3304      	adds	r3, #4
 800754a:	4a6d      	ldr	r2, [pc, #436]	; (8007700 <problem_fetch+0x63e0>)
 800754c:	461d      	mov	r5, r3
 800754e:	4614      	mov	r4, r2
 8007550:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007552:	6028      	str	r0, [r5, #0]
 8007554:	6069      	str	r1, [r5, #4]
 8007556:	60aa      	str	r2, [r5, #8]
 8007558:	60eb      	str	r3, [r5, #12]
 800755a:	cc03      	ldmia	r4!, {r0, r1}
 800755c:	6128      	str	r0, [r5, #16]
 800755e:	6169      	str	r1, [r5, #20]
 8007560:	8823      	ldrh	r3, [r4, #0]
 8007562:	832b      	strh	r3, [r5, #24]
			strcpy(p->startFinish, "s,d,d,d,d,d,d,d,d,e");
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	33d8      	adds	r3, #216	; 0xd8
 8007568:	4a66      	ldr	r2, [pc, #408]	; (8007704 <problem_fetch+0x63e4>)
 800756a:	461d      	mov	r5, r3
 800756c:	4614      	mov	r4, r2
 800756e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007570:	6028      	str	r0, [r5, #0]
 8007572:	6069      	str	r1, [r5, #4]
 8007574:	60aa      	str	r2, [r5, #8]
 8007576:	60eb      	str	r3, [r5, #12]
 8007578:	6820      	ldr	r0, [r4, #0]
 800757a:	6128      	str	r0, [r5, #16]
			strcpy(p->grade, "7A+");
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	33cc      	adds	r3, #204	; 0xcc
 8007580:	4a61      	ldr	r2, [pc, #388]	; (8007708 <problem_fetch+0x63e8>)
 8007582:	6810      	ldr	r0, [r2, #0]
 8007584:	6018      	str	r0, [r3, #0]
			break;
 8007586:	f013 bc11 	b.w	801adac <problem_fetch+0x19a8c>
		case 256 :
			strcpy(p->name,"IL LADRO DI POLLI");
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	337c      	adds	r3, #124	; 0x7c
 800758e:	4a5f      	ldr	r2, [pc, #380]	; (800770c <problem_fetch+0x63ec>)
 8007590:	461d      	mov	r5, r3
 8007592:	4614      	mov	r4, r2
 8007594:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007596:	6028      	str	r0, [r5, #0]
 8007598:	6069      	str	r1, [r5, #4]
 800759a:	60aa      	str	r2, [r5, #8]
 800759c:	60eb      	str	r3, [r5, #12]
 800759e:	8823      	ldrh	r3, [r4, #0]
 80075a0:	822b      	strh	r3, [r5, #16]
			p->moveSize = 8;
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	2208      	movs	r2, #8
 80075a6:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"C,B,E,E,J,E,E,D");
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	3340      	adds	r3, #64	; 0x40
 80075ac:	4a58      	ldr	r2, [pc, #352]	; (8007710 <problem_fetch+0x63f0>)
 80075ae:	461c      	mov	r4, r3
 80075b0:	4615      	mov	r5, r2
 80075b2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80075b4:	6020      	str	r0, [r4, #0]
 80075b6:	6061      	str	r1, [r4, #4]
 80075b8:	60a2      	str	r2, [r4, #8]
 80075ba:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,6,8,9,7,12,16,18");
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	3304      	adds	r3, #4
 80075c0:	4a54      	ldr	r2, [pc, #336]	; (8007714 <problem_fetch+0x63f4>)
 80075c2:	461d      	mov	r5, r3
 80075c4:	4614      	mov	r4, r2
 80075c6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80075c8:	6028      	str	r0, [r5, #0]
 80075ca:	6069      	str	r1, [r5, #4]
 80075cc:	60aa      	str	r2, [r5, #8]
 80075ce:	60eb      	str	r3, [r5, #12]
 80075d0:	8823      	ldrh	r3, [r4, #0]
 80075d2:	78a2      	ldrb	r2, [r4, #2]
 80075d4:	822b      	strh	r3, [r5, #16]
 80075d6:	4613      	mov	r3, r2
 80075d8:	74ab      	strb	r3, [r5, #18]
			strcpy(p->startFinish, "s,s,d,d,d,d,d,e");
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	33d8      	adds	r3, #216	; 0xd8
 80075de:	4a4e      	ldr	r2, [pc, #312]	; (8007718 <problem_fetch+0x63f8>)
 80075e0:	461c      	mov	r4, r3
 80075e2:	4615      	mov	r5, r2
 80075e4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80075e6:	6020      	str	r0, [r4, #0]
 80075e8:	6061      	str	r1, [r4, #4]
 80075ea:	60a2      	str	r2, [r4, #8]
 80075ec:	60e3      	str	r3, [r4, #12]
			strcpy(p->grade, "6C+");
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	33cc      	adds	r3, #204	; 0xcc
 80075f2:	4a3b      	ldr	r2, [pc, #236]	; (80076e0 <problem_fetch+0x63c0>)
 80075f4:	6810      	ldr	r0, [r2, #0]
 80075f6:	6018      	str	r0, [r3, #0]
			break;
 80075f8:	f013 bbd8 	b.w	801adac <problem_fetch+0x19a8c>
		case 257 :
			strcpy(p->name,"HAY IS FOR HORSES");
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	337c      	adds	r3, #124	; 0x7c
 8007600:	4a46      	ldr	r2, [pc, #280]	; (800771c <problem_fetch+0x63fc>)
 8007602:	461d      	mov	r5, r3
 8007604:	4614      	mov	r4, r2
 8007606:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007608:	6028      	str	r0, [r5, #0]
 800760a:	6069      	str	r1, [r5, #4]
 800760c:	60aa      	str	r2, [r5, #8]
 800760e:	60eb      	str	r3, [r5, #12]
 8007610:	8823      	ldrh	r3, [r4, #0]
 8007612:	822b      	strh	r3, [r5, #16]
			p->moveSize = 5;
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	2205      	movs	r2, #5
 8007618:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"J,H,G,D,D");
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	3340      	adds	r3, #64	; 0x40
 800761e:	4940      	ldr	r1, [pc, #256]	; (8007720 <problem_fetch+0x6400>)
 8007620:	461a      	mov	r2, r3
 8007622:	460b      	mov	r3, r1
 8007624:	cb03      	ldmia	r3!, {r0, r1}
 8007626:	6010      	str	r0, [r2, #0]
 8007628:	6051      	str	r1, [r2, #4]
 800762a:	881b      	ldrh	r3, [r3, #0]
 800762c:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"5,10,14,15,18");
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	3304      	adds	r3, #4
 8007632:	4a3c      	ldr	r2, [pc, #240]	; (8007724 <problem_fetch+0x6404>)
 8007634:	461c      	mov	r4, r3
 8007636:	4613      	mov	r3, r2
 8007638:	cb07      	ldmia	r3!, {r0, r1, r2}
 800763a:	6020      	str	r0, [r4, #0]
 800763c:	6061      	str	r1, [r4, #4]
 800763e:	60a2      	str	r2, [r4, #8]
 8007640:	881b      	ldrh	r3, [r3, #0]
 8007642:	81a3      	strh	r3, [r4, #12]
			strcpy(p->startFinish, "s,d,d,d,e");
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	33d8      	adds	r3, #216	; 0xd8
 8007648:	4929      	ldr	r1, [pc, #164]	; (80076f0 <problem_fetch+0x63d0>)
 800764a:	461a      	mov	r2, r3
 800764c:	460b      	mov	r3, r1
 800764e:	cb03      	ldmia	r3!, {r0, r1}
 8007650:	6010      	str	r0, [r2, #0]
 8007652:	6051      	str	r1, [r2, #4]
 8007654:	881b      	ldrh	r3, [r3, #0]
 8007656:	8113      	strh	r3, [r2, #8]
			strcpy(p->grade, "6C+");
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	33cc      	adds	r3, #204	; 0xcc
 800765c:	4a20      	ldr	r2, [pc, #128]	; (80076e0 <problem_fetch+0x63c0>)
 800765e:	6810      	ldr	r0, [r2, #0]
 8007660:	6018      	str	r0, [r3, #0]
			break;
 8007662:	f013 bba3 	b.w	801adac <problem_fetch+0x19a8c>
		case 258 :
			strcpy(p->name,"BIFFOSMEG");
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	337c      	adds	r3, #124	; 0x7c
 800766a:	492f      	ldr	r1, [pc, #188]	; (8007728 <problem_fetch+0x6408>)
 800766c:	461a      	mov	r2, r3
 800766e:	460b      	mov	r3, r1
 8007670:	cb03      	ldmia	r3!, {r0, r1}
 8007672:	6010      	str	r0, [r2, #0]
 8007674:	6051      	str	r1, [r2, #4]
 8007676:	881b      	ldrh	r3, [r3, #0]
 8007678:	8113      	strh	r3, [r2, #8]
			p->moveSize = 6;
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	2206      	movs	r2, #6
 800767e:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"G,D,G,C,E,A");
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	3340      	adds	r3, #64	; 0x40
 8007684:	4a29      	ldr	r2, [pc, #164]	; (800772c <problem_fetch+0x640c>)
 8007686:	461c      	mov	r4, r3
 8007688:	4613      	mov	r3, r2
 800768a:	cb07      	ldmia	r3!, {r0, r1, r2}
 800768c:	6020      	str	r0, [r4, #0]
 800768e:	6061      	str	r1, [r4, #4]
 8007690:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,7,9,13,16,18");
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	3304      	adds	r3, #4
 8007696:	4a26      	ldr	r2, [pc, #152]	; (8007730 <problem_fetch+0x6410>)
 8007698:	461c      	mov	r4, r3
 800769a:	4613      	mov	r3, r2
 800769c:	cb07      	ldmia	r3!, {r0, r1, r2}
 800769e:	6020      	str	r0, [r4, #0]
 80076a0:	6061      	str	r1, [r4, #4]
 80076a2:	60a2      	str	r2, [r4, #8]
 80076a4:	881a      	ldrh	r2, [r3, #0]
 80076a6:	789b      	ldrb	r3, [r3, #2]
 80076a8:	81a2      	strh	r2, [r4, #12]
 80076aa:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish, "s,d,d,d,d,e");
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	33d8      	adds	r3, #216	; 0xd8
 80076b0:	4a20      	ldr	r2, [pc, #128]	; (8007734 <problem_fetch+0x6414>)
 80076b2:	461c      	mov	r4, r3
 80076b4:	4613      	mov	r3, r2
 80076b6:	cb07      	ldmia	r3!, {r0, r1, r2}
 80076b8:	6020      	str	r0, [r4, #0]
 80076ba:	6061      	str	r1, [r4, #4]
 80076bc:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade, "6C");
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	33cc      	adds	r3, #204	; 0xcc
 80076c2:	4a1d      	ldr	r2, [pc, #116]	; (8007738 <problem_fetch+0x6418>)
 80076c4:	8811      	ldrh	r1, [r2, #0]
 80076c6:	7892      	ldrb	r2, [r2, #2]
 80076c8:	8019      	strh	r1, [r3, #0]
 80076ca:	709a      	strb	r2, [r3, #2]
			break;
 80076cc:	f013 bb6e 	b.w	801adac <problem_fetch+0x19a8c>
 80076d0:	08023360 	.word	0x08023360
 80076d4:	08023370 	.word	0x08023370
 80076d8:	08023384 	.word	0x08023384
 80076dc:	0802187c 	.word	0x0802187c
 80076e0:	080213a8 	.word	0x080213a8
 80076e4:	0802339c 	.word	0x0802339c
 80076e8:	080233a8 	.word	0x080233a8
 80076ec:	080233b4 	.word	0x080233b4
 80076f0:	08021320 	.word	0x08021320
 80076f4:	080212f4 	.word	0x080212f4
 80076f8:	080233c4 	.word	0x080233c4
 80076fc:	080233e0 	.word	0x080233e0
 8007700:	080233f4 	.word	0x080233f4
 8007704:	08023410 	.word	0x08023410
 8007708:	08021424 	.word	0x08021424
 800770c:	08023424 	.word	0x08023424
 8007710:	08023438 	.word	0x08023438
 8007714:	08023448 	.word	0x08023448
 8007718:	080214cc 	.word	0x080214cc
 800771c:	0802345c 	.word	0x0802345c
 8007720:	08023470 	.word	0x08023470
 8007724:	0802347c 	.word	0x0802347c
 8007728:	0802348c 	.word	0x0802348c
 800772c:	08023498 	.word	0x08023498
 8007730:	080234a4 	.word	0x080234a4
 8007734:	0802139c 	.word	0x0802139c
 8007738:	08021370 	.word	0x08021370
		case 259 :
			strcpy(p->name,"CHIAPPO");
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	337c      	adds	r3, #124	; 0x7c
 8007740:	49c0      	ldr	r1, [pc, #768]	; (8007a44 <problem_fetch+0x6724>)
 8007742:	461a      	mov	r2, r3
 8007744:	460b      	mov	r3, r1
 8007746:	cb03      	ldmia	r3!, {r0, r1}
 8007748:	6010      	str	r0, [r2, #0]
 800774a:	6051      	str	r1, [r2, #4]
			p->moveSize = 7;
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	2207      	movs	r2, #7
 8007750:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"G,H,C,F,C,E,D");
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	3340      	adds	r3, #64	; 0x40
 8007756:	4abc      	ldr	r2, [pc, #752]	; (8007a48 <problem_fetch+0x6728>)
 8007758:	461c      	mov	r4, r3
 800775a:	4613      	mov	r3, r2
 800775c:	cb07      	ldmia	r3!, {r0, r1, r2}
 800775e:	6020      	str	r0, [r4, #0]
 8007760:	6061      	str	r1, [r4, #4]
 8007762:	60a2      	str	r2, [r4, #8]
 8007764:	881b      	ldrh	r3, [r3, #0]
 8007766:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,8,8,11,13,16,18");
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	3304      	adds	r3, #4
 800776c:	4ab7      	ldr	r2, [pc, #732]	; (8007a4c <problem_fetch+0x672c>)
 800776e:	461d      	mov	r5, r3
 8007770:	4614      	mov	r4, r2
 8007772:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007774:	6028      	str	r0, [r5, #0]
 8007776:	6069      	str	r1, [r5, #4]
 8007778:	60aa      	str	r2, [r5, #8]
 800777a:	60eb      	str	r3, [r5, #12]
 800777c:	8823      	ldrh	r3, [r4, #0]
 800777e:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish, "s,d,d,d,d,d,e");
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	33d8      	adds	r3, #216	; 0xd8
 8007784:	4ab2      	ldr	r2, [pc, #712]	; (8007a50 <problem_fetch+0x6730>)
 8007786:	461c      	mov	r4, r3
 8007788:	4613      	mov	r3, r2
 800778a:	cb07      	ldmia	r3!, {r0, r1, r2}
 800778c:	6020      	str	r0, [r4, #0]
 800778e:	6061      	str	r1, [r4, #4]
 8007790:	60a2      	str	r2, [r4, #8]
 8007792:	881b      	ldrh	r3, [r3, #0]
 8007794:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade, "6B+");
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	33cc      	adds	r3, #204	; 0xcc
 800779a:	4aae      	ldr	r2, [pc, #696]	; (8007a54 <problem_fetch+0x6734>)
 800779c:	6810      	ldr	r0, [r2, #0]
 800779e:	6018      	str	r0, [r3, #0]
			break;
 80077a0:	f013 bb04 	b.w	801adac <problem_fetch+0x19a8c>
		case 26 :
			strcpy(p->name,"MELET VAR");
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	337c      	adds	r3, #124	; 0x7c
 80077a8:	49ab      	ldr	r1, [pc, #684]	; (8007a58 <problem_fetch+0x6738>)
 80077aa:	461a      	mov	r2, r3
 80077ac:	460b      	mov	r3, r1
 80077ae:	cb03      	ldmia	r3!, {r0, r1}
 80077b0:	6010      	str	r0, [r2, #0]
 80077b2:	6051      	str	r1, [r2, #4]
 80077b4:	881b      	ldrh	r3, [r3, #0]
 80077b6:	8113      	strh	r3, [r2, #8]
			p->moveSize = 5;
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	2205      	movs	r2, #5
 80077bc:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"J,H,C,G,A");
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	3340      	adds	r3, #64	; 0x40
 80077c2:	49a6      	ldr	r1, [pc, #664]	; (8007a5c <problem_fetch+0x673c>)
 80077c4:	461a      	mov	r2, r3
 80077c6:	460b      	mov	r3, r1
 80077c8:	cb03      	ldmia	r3!, {r0, r1}
 80077ca:	6010      	str	r0, [r2, #0]
 80077cc:	6051      	str	r1, [r2, #4]
 80077ce:	881b      	ldrh	r3, [r3, #0]
 80077d0:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"5,10,13,17,18");
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	3304      	adds	r3, #4
 80077d6:	4aa2      	ldr	r2, [pc, #648]	; (8007a60 <problem_fetch+0x6740>)
 80077d8:	461c      	mov	r4, r3
 80077da:	4613      	mov	r3, r2
 80077dc:	cb07      	ldmia	r3!, {r0, r1, r2}
 80077de:	6020      	str	r0, [r4, #0]
 80077e0:	6061      	str	r1, [r4, #4]
 80077e2:	60a2      	str	r2, [r4, #8]
 80077e4:	881b      	ldrh	r3, [r3, #0]
 80077e6:	81a3      	strh	r3, [r4, #12]
			strcpy(p->startFinish, "s,d,d,d,e");
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	33d8      	adds	r3, #216	; 0xd8
 80077ec:	499d      	ldr	r1, [pc, #628]	; (8007a64 <problem_fetch+0x6744>)
 80077ee:	461a      	mov	r2, r3
 80077f0:	460b      	mov	r3, r1
 80077f2:	cb03      	ldmia	r3!, {r0, r1}
 80077f4:	6010      	str	r0, [r2, #0]
 80077f6:	6051      	str	r1, [r2, #4]
 80077f8:	881b      	ldrh	r3, [r3, #0]
 80077fa:	8113      	strh	r3, [r2, #8]
			strcpy(p->grade, "7B");
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	33cc      	adds	r3, #204	; 0xcc
 8007800:	4a99      	ldr	r2, [pc, #612]	; (8007a68 <problem_fetch+0x6748>)
 8007802:	8811      	ldrh	r1, [r2, #0]
 8007804:	7892      	ldrb	r2, [r2, #2]
 8007806:	8019      	strh	r1, [r3, #0]
 8007808:	709a      	strb	r2, [r3, #2]
			break;
 800780a:	f013 bacf 	b.w	801adac <problem_fetch+0x19a8c>
		case 260 :
			strcpy(p->name,"DDD");
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	337c      	adds	r3, #124	; 0x7c
 8007812:	4a96      	ldr	r2, [pc, #600]	; (8007a6c <problem_fetch+0x674c>)
 8007814:	6810      	ldr	r0, [r2, #0]
 8007816:	6018      	str	r0, [r3, #0]
			p->moveSize = 11;
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	220b      	movs	r2, #11
 800781c:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"G,G,H,H,G,H,G,G,H,G,I");
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	3340      	adds	r3, #64	; 0x40
 8007822:	4a93      	ldr	r2, [pc, #588]	; (8007a70 <problem_fetch+0x6750>)
 8007824:	461d      	mov	r5, r3
 8007826:	4614      	mov	r4, r2
 8007828:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800782a:	6028      	str	r0, [r5, #0]
 800782c:	6069      	str	r1, [r5, #4]
 800782e:	60aa      	str	r2, [r5, #8]
 8007830:	60eb      	str	r3, [r5, #12]
 8007832:	6820      	ldr	r0, [r4, #0]
 8007834:	6128      	str	r0, [r5, #16]
 8007836:	88a3      	ldrh	r3, [r4, #4]
 8007838:	82ab      	strh	r3, [r5, #20]
			strcpy(p->moveNumbers,"4,6,8,10,10,13,14,15,16,17,18");
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	3304      	adds	r3, #4
 800783e:	4a8d      	ldr	r2, [pc, #564]	; (8007a74 <problem_fetch+0x6754>)
 8007840:	461d      	mov	r5, r3
 8007842:	4614      	mov	r4, r2
 8007844:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007846:	6028      	str	r0, [r5, #0]
 8007848:	6069      	str	r1, [r5, #4]
 800784a:	60aa      	str	r2, [r5, #8]
 800784c:	60eb      	str	r3, [r5, #12]
 800784e:	cc07      	ldmia	r4!, {r0, r1, r2}
 8007850:	6128      	str	r0, [r5, #16]
 8007852:	6169      	str	r1, [r5, #20]
 8007854:	61aa      	str	r2, [r5, #24]
 8007856:	8823      	ldrh	r3, [r4, #0]
 8007858:	83ab      	strh	r3, [r5, #28]
			strcpy(p->startFinish, "s,s,d,d,d,d,d,d,d,d,e");
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	33d8      	adds	r3, #216	; 0xd8
 800785e:	4a86      	ldr	r2, [pc, #536]	; (8007a78 <problem_fetch+0x6758>)
 8007860:	461d      	mov	r5, r3
 8007862:	4614      	mov	r4, r2
 8007864:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007866:	6028      	str	r0, [r5, #0]
 8007868:	6069      	str	r1, [r5, #4]
 800786a:	60aa      	str	r2, [r5, #8]
 800786c:	60eb      	str	r3, [r5, #12]
 800786e:	6820      	ldr	r0, [r4, #0]
 8007870:	6128      	str	r0, [r5, #16]
 8007872:	88a3      	ldrh	r3, [r4, #4]
 8007874:	82ab      	strh	r3, [r5, #20]
			strcpy(p->grade, "6C");
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	33cc      	adds	r3, #204	; 0xcc
 800787a:	4a80      	ldr	r2, [pc, #512]	; (8007a7c <problem_fetch+0x675c>)
 800787c:	8811      	ldrh	r1, [r2, #0]
 800787e:	7892      	ldrb	r2, [r2, #2]
 8007880:	8019      	strh	r1, [r3, #0]
 8007882:	709a      	strb	r2, [r3, #2]
			break;
 8007884:	f013 ba92 	b.w	801adac <problem_fetch+0x19a8c>
		case 261 :
			strcpy(p->name,"WOKE UP FEELIN FROGGY");
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	337c      	adds	r3, #124	; 0x7c
 800788c:	4a7c      	ldr	r2, [pc, #496]	; (8007a80 <problem_fetch+0x6760>)
 800788e:	461d      	mov	r5, r3
 8007890:	4614      	mov	r4, r2
 8007892:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007894:	6028      	str	r0, [r5, #0]
 8007896:	6069      	str	r1, [r5, #4]
 8007898:	60aa      	str	r2, [r5, #8]
 800789a:	60eb      	str	r3, [r5, #12]
 800789c:	6820      	ldr	r0, [r4, #0]
 800789e:	6128      	str	r0, [r5, #16]
 80078a0:	88a3      	ldrh	r3, [r4, #4]
 80078a2:	82ab      	strh	r3, [r5, #20]
			p->moveSize = 8;
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	2208      	movs	r2, #8
 80078a8:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"J,E,F,E,J,K,I,I");
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	3340      	adds	r3, #64	; 0x40
 80078ae:	4a75      	ldr	r2, [pc, #468]	; (8007a84 <problem_fetch+0x6764>)
 80078b0:	461c      	mov	r4, r3
 80078b2:	4615      	mov	r5, r2
 80078b4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80078b6:	6020      	str	r0, [r4, #0]
 80078b8:	6061      	str	r1, [r4, #4]
 80078ba:	60a2      	str	r2, [r4, #8]
 80078bc:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,6,11,12,13,14,7,18");
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	3304      	adds	r3, #4
 80078c2:	4a71      	ldr	r2, [pc, #452]	; (8007a88 <problem_fetch+0x6768>)
 80078c4:	461d      	mov	r5, r3
 80078c6:	4614      	mov	r4, r2
 80078c8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80078ca:	6028      	str	r0, [r5, #0]
 80078cc:	6069      	str	r1, [r5, #4]
 80078ce:	60aa      	str	r2, [r5, #8]
 80078d0:	60eb      	str	r3, [r5, #12]
 80078d2:	6820      	ldr	r0, [r4, #0]
 80078d4:	6128      	str	r0, [r5, #16]
 80078d6:	7923      	ldrb	r3, [r4, #4]
 80078d8:	752b      	strb	r3, [r5, #20]
			strcpy(p->startFinish, "s,d,d,d,d,d,d,e");
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	33d8      	adds	r3, #216	; 0xd8
 80078de:	4a6b      	ldr	r2, [pc, #428]	; (8007a8c <problem_fetch+0x676c>)
 80078e0:	461c      	mov	r4, r3
 80078e2:	4615      	mov	r5, r2
 80078e4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80078e6:	6020      	str	r0, [r4, #0]
 80078e8:	6061      	str	r1, [r4, #4]
 80078ea:	60a2      	str	r2, [r4, #8]
 80078ec:	60e3      	str	r3, [r4, #12]
			strcpy(p->grade, "7B+");
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	33cc      	adds	r3, #204	; 0xcc
 80078f2:	4a67      	ldr	r2, [pc, #412]	; (8007a90 <problem_fetch+0x6770>)
 80078f4:	6810      	ldr	r0, [r2, #0]
 80078f6:	6018      	str	r0, [r3, #0]
			break;
 80078f8:	f013 ba58 	b.w	801adac <problem_fetch+0x19a8c>
		case 262 :
			strcpy(p->name,"DOJO BLACK");
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	337c      	adds	r3, #124	; 0x7c
 8007900:	4964      	ldr	r1, [pc, #400]	; (8007a94 <problem_fetch+0x6774>)
 8007902:	461a      	mov	r2, r3
 8007904:	460b      	mov	r3, r1
 8007906:	cb03      	ldmia	r3!, {r0, r1}
 8007908:	6010      	str	r0, [r2, #0]
 800790a:	6051      	str	r1, [r2, #4]
 800790c:	8819      	ldrh	r1, [r3, #0]
 800790e:	789b      	ldrb	r3, [r3, #2]
 8007910:	8111      	strh	r1, [r2, #8]
 8007912:	7293      	strb	r3, [r2, #10]
			p->moveSize = 8;
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	2208      	movs	r2, #8
 8007918:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"H,K,I,J,D,G,C,D");
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	3340      	adds	r3, #64	; 0x40
 800791e:	4a5e      	ldr	r2, [pc, #376]	; (8007a98 <problem_fetch+0x6778>)
 8007920:	461c      	mov	r4, r3
 8007922:	4615      	mov	r5, r2
 8007924:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007926:	6020      	str	r0, [r4, #0]
 8007928:	6061      	str	r1, [r4, #4]
 800792a:	60a2      	str	r2, [r4, #8]
 800792c:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,9,10,13,11,17,5,18");
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	3304      	adds	r3, #4
 8007932:	4a5a      	ldr	r2, [pc, #360]	; (8007a9c <problem_fetch+0x677c>)
 8007934:	461d      	mov	r5, r3
 8007936:	4614      	mov	r4, r2
 8007938:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800793a:	6028      	str	r0, [r5, #0]
 800793c:	6069      	str	r1, [r5, #4]
 800793e:	60aa      	str	r2, [r5, #8]
 8007940:	60eb      	str	r3, [r5, #12]
 8007942:	6820      	ldr	r0, [r4, #0]
 8007944:	6128      	str	r0, [r5, #16]
 8007946:	7923      	ldrb	r3, [r4, #4]
 8007948:	752b      	strb	r3, [r5, #20]
			strcpy(p->startFinish, "s,d,d,d,d,d,d,e");
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	33d8      	adds	r3, #216	; 0xd8
 800794e:	4a4f      	ldr	r2, [pc, #316]	; (8007a8c <problem_fetch+0x676c>)
 8007950:	461c      	mov	r4, r3
 8007952:	4615      	mov	r5, r2
 8007954:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007956:	6020      	str	r0, [r4, #0]
 8007958:	6061      	str	r1, [r4, #4]
 800795a:	60a2      	str	r2, [r4, #8]
 800795c:	60e3      	str	r3, [r4, #12]
			strcpy(p->grade, "7A+");
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	33cc      	adds	r3, #204	; 0xcc
 8007962:	4a4f      	ldr	r2, [pc, #316]	; (8007aa0 <problem_fetch+0x6780>)
 8007964:	6810      	ldr	r0, [r2, #0]
 8007966:	6018      	str	r0, [r3, #0]
			break;
 8007968:	f013 ba20 	b.w	801adac <problem_fetch+0x19a8c>
		case 263 :
			strcpy(p->name,"CICCIOSPRUZZO");
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	337c      	adds	r3, #124	; 0x7c
 8007970:	4a4c      	ldr	r2, [pc, #304]	; (8007aa4 <problem_fetch+0x6784>)
 8007972:	461c      	mov	r4, r3
 8007974:	4613      	mov	r3, r2
 8007976:	cb07      	ldmia	r3!, {r0, r1, r2}
 8007978:	6020      	str	r0, [r4, #0]
 800797a:	6061      	str	r1, [r4, #4]
 800797c:	60a2      	str	r2, [r4, #8]
 800797e:	881b      	ldrh	r3, [r3, #0]
 8007980:	81a3      	strh	r3, [r4, #12]
			p->moveSize = 6;
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	2206      	movs	r2, #6
 8007986:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"C,A,F,A,E,D");
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	3340      	adds	r3, #64	; 0x40
 800798c:	4a46      	ldr	r2, [pc, #280]	; (8007aa8 <problem_fetch+0x6788>)
 800798e:	461c      	mov	r4, r3
 8007990:	4613      	mov	r3, r2
 8007992:	cb07      	ldmia	r3!, {r0, r1, r2}
 8007994:	6020      	str	r0, [r4, #0]
 8007996:	6061      	str	r1, [r4, #4]
 8007998:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,9,11,14,16,18");
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	3304      	adds	r3, #4
 800799e:	4a43      	ldr	r2, [pc, #268]	; (8007aac <problem_fetch+0x678c>)
 80079a0:	461c      	mov	r4, r3
 80079a2:	4615      	mov	r5, r2
 80079a4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80079a6:	6020      	str	r0, [r4, #0]
 80079a8:	6061      	str	r1, [r4, #4]
 80079aa:	60a2      	str	r2, [r4, #8]
 80079ac:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish, "s,d,d,d,d,e");
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	33d8      	adds	r3, #216	; 0xd8
 80079b2:	4a3f      	ldr	r2, [pc, #252]	; (8007ab0 <problem_fetch+0x6790>)
 80079b4:	461c      	mov	r4, r3
 80079b6:	4613      	mov	r3, r2
 80079b8:	cb07      	ldmia	r3!, {r0, r1, r2}
 80079ba:	6020      	str	r0, [r4, #0]
 80079bc:	6061      	str	r1, [r4, #4]
 80079be:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade, "7A");
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	33cc      	adds	r3, #204	; 0xcc
 80079c4:	4a3b      	ldr	r2, [pc, #236]	; (8007ab4 <problem_fetch+0x6794>)
 80079c6:	8811      	ldrh	r1, [r2, #0]
 80079c8:	7892      	ldrb	r2, [r2, #2]
 80079ca:	8019      	strh	r1, [r3, #0]
 80079cc:	709a      	strb	r2, [r3, #2]
			break;
 80079ce:	f013 b9ed 	b.w	801adac <problem_fetch+0x19a8c>
		case 264 :
			strcpy(p->name,"STRATIFICAZIONI SOCIALI");
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	337c      	adds	r3, #124	; 0x7c
 80079d6:	4a38      	ldr	r2, [pc, #224]	; (8007ab8 <problem_fetch+0x6798>)
 80079d8:	461d      	mov	r5, r3
 80079da:	4614      	mov	r4, r2
 80079dc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80079de:	6028      	str	r0, [r5, #0]
 80079e0:	6069      	str	r1, [r5, #4]
 80079e2:	60aa      	str	r2, [r5, #8]
 80079e4:	60eb      	str	r3, [r5, #12]
 80079e6:	cc03      	ldmia	r4!, {r0, r1}
 80079e8:	6128      	str	r0, [r5, #16]
 80079ea:	6169      	str	r1, [r5, #20]
			p->moveSize = 7;
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	2207      	movs	r2, #7
 80079f0:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"J,K,H,G,C,C,D");
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	3340      	adds	r3, #64	; 0x40
 80079f6:	4a31      	ldr	r2, [pc, #196]	; (8007abc <problem_fetch+0x679c>)
 80079f8:	461c      	mov	r4, r3
 80079fa:	4613      	mov	r3, r2
 80079fc:	cb07      	ldmia	r3!, {r0, r1, r2}
 80079fe:	6020      	str	r0, [r4, #0]
 8007a00:	6061      	str	r1, [r4, #4]
 8007a02:	60a2      	str	r2, [r4, #8]
 8007a04:	881b      	ldrh	r3, [r3, #0]
 8007a06:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,9,12,14,8,16,18");
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	3304      	adds	r3, #4
 8007a0c:	4a2c      	ldr	r2, [pc, #176]	; (8007ac0 <problem_fetch+0x67a0>)
 8007a0e:	461d      	mov	r5, r3
 8007a10:	4614      	mov	r4, r2
 8007a12:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007a14:	6028      	str	r0, [r5, #0]
 8007a16:	6069      	str	r1, [r5, #4]
 8007a18:	60aa      	str	r2, [r5, #8]
 8007a1a:	60eb      	str	r3, [r5, #12]
 8007a1c:	8823      	ldrh	r3, [r4, #0]
 8007a1e:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish, "s,d,d,d,d,d,e");
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	33d8      	adds	r3, #216	; 0xd8
 8007a24:	4a0a      	ldr	r2, [pc, #40]	; (8007a50 <problem_fetch+0x6730>)
 8007a26:	461c      	mov	r4, r3
 8007a28:	4613      	mov	r3, r2
 8007a2a:	cb07      	ldmia	r3!, {r0, r1, r2}
 8007a2c:	6020      	str	r0, [r4, #0]
 8007a2e:	6061      	str	r1, [r4, #4]
 8007a30:	60a2      	str	r2, [r4, #8]
 8007a32:	881b      	ldrh	r3, [r3, #0]
 8007a34:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade, "6C+");
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	33cc      	adds	r3, #204	; 0xcc
 8007a3a:	4a22      	ldr	r2, [pc, #136]	; (8007ac4 <problem_fetch+0x67a4>)
 8007a3c:	6810      	ldr	r0, [r2, #0]
 8007a3e:	6018      	str	r0, [r3, #0]
			break;
 8007a40:	f013 b9b4 	b.w	801adac <problem_fetch+0x19a8c>
 8007a44:	080234b4 	.word	0x080234b4
 8007a48:	080234bc 	.word	0x080234bc
 8007a4c:	080234cc 	.word	0x080234cc
 8007a50:	08021494 	.word	0x08021494
 8007a54:	080212b0 	.word	0x080212b0
 8007a58:	080234e0 	.word	0x080234e0
 8007a5c:	080234ec 	.word	0x080234ec
 8007a60:	080234f8 	.word	0x080234f8
 8007a64:	08021320 	.word	0x08021320
 8007a68:	0802132c 	.word	0x0802132c
 8007a6c:	08023508 	.word	0x08023508
 8007a70:	0802350c 	.word	0x0802350c
 8007a74:	08023524 	.word	0x08023524
 8007a78:	08022a18 	.word	0x08022a18
 8007a7c:	08021370 	.word	0x08021370
 8007a80:	08023544 	.word	0x08023544
 8007a84:	0802355c 	.word	0x0802355c
 8007a88:	0802356c 	.word	0x0802356c
 8007a8c:	08021458 	.word	0x08021458
 8007a90:	08021848 	.word	0x08021848
 8007a94:	08023584 	.word	0x08023584
 8007a98:	08023590 	.word	0x08023590
 8007a9c:	080235a0 	.word	0x080235a0
 8007aa0:	08021424 	.word	0x08021424
 8007aa4:	080235b8 	.word	0x080235b8
 8007aa8:	080235c8 	.word	0x080235c8
 8007aac:	080235d4 	.word	0x080235d4
 8007ab0:	0802139c 	.word	0x0802139c
 8007ab4:	080212f4 	.word	0x080212f4
 8007ab8:	080235e4 	.word	0x080235e4
 8007abc:	080235fc 	.word	0x080235fc
 8007ac0:	0802360c 	.word	0x0802360c
 8007ac4:	080213a8 	.word	0x080213a8
		case 265 :
			strcpy(p->name,"ZANZARE, NEBBIA E VIN");
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	337c      	adds	r3, #124	; 0x7c
 8007acc:	4abe      	ldr	r2, [pc, #760]	; (8007dc8 <problem_fetch+0x6aa8>)
 8007ace:	461d      	mov	r5, r3
 8007ad0:	4614      	mov	r4, r2
 8007ad2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007ad4:	6028      	str	r0, [r5, #0]
 8007ad6:	6069      	str	r1, [r5, #4]
 8007ad8:	60aa      	str	r2, [r5, #8]
 8007ada:	60eb      	str	r3, [r5, #12]
 8007adc:	6820      	ldr	r0, [r4, #0]
 8007ade:	6128      	str	r0, [r5, #16]
 8007ae0:	88a3      	ldrh	r3, [r4, #4]
 8007ae2:	82ab      	strh	r3, [r5, #20]
			p->moveSize = 5;
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	2205      	movs	r2, #5
 8007ae8:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"G,I,F,H,D");
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	3340      	adds	r3, #64	; 0x40
 8007aee:	49b7      	ldr	r1, [pc, #732]	; (8007dcc <problem_fetch+0x6aac>)
 8007af0:	461a      	mov	r2, r3
 8007af2:	460b      	mov	r3, r1
 8007af4:	cb03      	ldmia	r3!, {r0, r1}
 8007af6:	6010      	str	r0, [r2, #0]
 8007af8:	6051      	str	r1, [r2, #4]
 8007afa:	881b      	ldrh	r3, [r3, #0]
 8007afc:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"6,10,13,16,18");
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	3304      	adds	r3, #4
 8007b02:	4ab3      	ldr	r2, [pc, #716]	; (8007dd0 <problem_fetch+0x6ab0>)
 8007b04:	461c      	mov	r4, r3
 8007b06:	4613      	mov	r3, r2
 8007b08:	cb07      	ldmia	r3!, {r0, r1, r2}
 8007b0a:	6020      	str	r0, [r4, #0]
 8007b0c:	6061      	str	r1, [r4, #4]
 8007b0e:	60a2      	str	r2, [r4, #8]
 8007b10:	881b      	ldrh	r3, [r3, #0]
 8007b12:	81a3      	strh	r3, [r4, #12]
			strcpy(p->startFinish, "s,d,d,d,e");
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	33d8      	adds	r3, #216	; 0xd8
 8007b18:	49ae      	ldr	r1, [pc, #696]	; (8007dd4 <problem_fetch+0x6ab4>)
 8007b1a:	461a      	mov	r2, r3
 8007b1c:	460b      	mov	r3, r1
 8007b1e:	cb03      	ldmia	r3!, {r0, r1}
 8007b20:	6010      	str	r0, [r2, #0]
 8007b22:	6051      	str	r1, [r2, #4]
 8007b24:	881b      	ldrh	r3, [r3, #0]
 8007b26:	8113      	strh	r3, [r2, #8]
			strcpy(p->grade, "6C");
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	33cc      	adds	r3, #204	; 0xcc
 8007b2c:	4aaa      	ldr	r2, [pc, #680]	; (8007dd8 <problem_fetch+0x6ab8>)
 8007b2e:	8811      	ldrh	r1, [r2, #0]
 8007b30:	7892      	ldrb	r2, [r2, #2]
 8007b32:	8019      	strh	r1, [r3, #0]
 8007b34:	709a      	strb	r2, [r3, #2]
			break;
 8007b36:	f013 b939 	b.w	801adac <problem_fetch+0x19a8c>
		case 266 :
			strcpy(p->name,"A LITTLE CROSSING");
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	337c      	adds	r3, #124	; 0x7c
 8007b3e:	4aa7      	ldr	r2, [pc, #668]	; (8007ddc <problem_fetch+0x6abc>)
 8007b40:	461d      	mov	r5, r3
 8007b42:	4614      	mov	r4, r2
 8007b44:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007b46:	6028      	str	r0, [r5, #0]
 8007b48:	6069      	str	r1, [r5, #4]
 8007b4a:	60aa      	str	r2, [r5, #8]
 8007b4c:	60eb      	str	r3, [r5, #12]
 8007b4e:	8823      	ldrh	r3, [r4, #0]
 8007b50:	822b      	strh	r3, [r5, #16]
			p->moveSize = 8;
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	2208      	movs	r2, #8
 8007b56:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"J,G,E,G,H,K,H,I");
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	3340      	adds	r3, #64	; 0x40
 8007b5c:	4aa0      	ldr	r2, [pc, #640]	; (8007de0 <problem_fetch+0x6ac0>)
 8007b5e:	461c      	mov	r4, r3
 8007b60:	4615      	mov	r5, r2
 8007b62:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007b64:	6020      	str	r0, [r4, #0]
 8007b66:	6061      	str	r1, [r4, #4]
 8007b68:	60a2      	str	r2, [r4, #8]
 8007b6a:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,4,8,9,12,14,16,18");
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	3304      	adds	r3, #4
 8007b70:	4a9c      	ldr	r2, [pc, #624]	; (8007de4 <problem_fetch+0x6ac4>)
 8007b72:	461d      	mov	r5, r3
 8007b74:	4614      	mov	r4, r2
 8007b76:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007b78:	6028      	str	r0, [r5, #0]
 8007b7a:	6069      	str	r1, [r5, #4]
 8007b7c:	60aa      	str	r2, [r5, #8]
 8007b7e:	60eb      	str	r3, [r5, #12]
 8007b80:	6820      	ldr	r0, [r4, #0]
 8007b82:	6128      	str	r0, [r5, #16]
			strcpy(p->startFinish, "s,s,d,d,d,d,d,e");
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	33d8      	adds	r3, #216	; 0xd8
 8007b88:	4a97      	ldr	r2, [pc, #604]	; (8007de8 <problem_fetch+0x6ac8>)
 8007b8a:	461c      	mov	r4, r3
 8007b8c:	4615      	mov	r5, r2
 8007b8e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007b90:	6020      	str	r0, [r4, #0]
 8007b92:	6061      	str	r1, [r4, #4]
 8007b94:	60a2      	str	r2, [r4, #8]
 8007b96:	60e3      	str	r3, [r4, #12]
			strcpy(p->grade, "6C+");
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	33cc      	adds	r3, #204	; 0xcc
 8007b9c:	4a93      	ldr	r2, [pc, #588]	; (8007dec <problem_fetch+0x6acc>)
 8007b9e:	6810      	ldr	r0, [r2, #0]
 8007ba0:	6018      	str	r0, [r3, #0]
			break;
 8007ba2:	f013 b903 	b.w	801adac <problem_fetch+0x19a8c>
		case 267 :
			strcpy(p->name,"GYUUUUUN");
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	337c      	adds	r3, #124	; 0x7c
 8007baa:	4991      	ldr	r1, [pc, #580]	; (8007df0 <problem_fetch+0x6ad0>)
 8007bac:	461a      	mov	r2, r3
 8007bae:	460b      	mov	r3, r1
 8007bb0:	cb03      	ldmia	r3!, {r0, r1}
 8007bb2:	6010      	str	r0, [r2, #0]
 8007bb4:	6051      	str	r1, [r2, #4]
 8007bb6:	781b      	ldrb	r3, [r3, #0]
 8007bb8:	7213      	strb	r3, [r2, #8]
			p->moveSize = 6;
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	2206      	movs	r2, #6
 8007bbe:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"E,H,D,E,E,I");
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	3340      	adds	r3, #64	; 0x40
 8007bc4:	4a8b      	ldr	r2, [pc, #556]	; (8007df4 <problem_fetch+0x6ad4>)
 8007bc6:	461c      	mov	r4, r3
 8007bc8:	4613      	mov	r3, r2
 8007bca:	cb07      	ldmia	r3!, {r0, r1, r2}
 8007bcc:	6020      	str	r0, [r4, #0]
 8007bce:	6061      	str	r1, [r4, #4]
 8007bd0:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"6,10,11,14,16,18");
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	3304      	adds	r3, #4
 8007bd6:	4a88      	ldr	r2, [pc, #544]	; (8007df8 <problem_fetch+0x6ad8>)
 8007bd8:	461d      	mov	r5, r3
 8007bda:	4614      	mov	r4, r2
 8007bdc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007bde:	6028      	str	r0, [r5, #0]
 8007be0:	6069      	str	r1, [r5, #4]
 8007be2:	60aa      	str	r2, [r5, #8]
 8007be4:	60eb      	str	r3, [r5, #12]
 8007be6:	7823      	ldrb	r3, [r4, #0]
 8007be8:	742b      	strb	r3, [r5, #16]
			strcpy(p->startFinish, "s,d,d,d,d,e");
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	33d8      	adds	r3, #216	; 0xd8
 8007bee:	4a83      	ldr	r2, [pc, #524]	; (8007dfc <problem_fetch+0x6adc>)
 8007bf0:	461c      	mov	r4, r3
 8007bf2:	4613      	mov	r3, r2
 8007bf4:	cb07      	ldmia	r3!, {r0, r1, r2}
 8007bf6:	6020      	str	r0, [r4, #0]
 8007bf8:	6061      	str	r1, [r4, #4]
 8007bfa:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade, "6C");
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	33cc      	adds	r3, #204	; 0xcc
 8007c00:	4a75      	ldr	r2, [pc, #468]	; (8007dd8 <problem_fetch+0x6ab8>)
 8007c02:	8811      	ldrh	r1, [r2, #0]
 8007c04:	7892      	ldrb	r2, [r2, #2]
 8007c06:	8019      	strh	r1, [r3, #0]
 8007c08:	709a      	strb	r2, [r3, #2]
			break;
 8007c0a:	f013 b8cf 	b.w	801adac <problem_fetch+0x19a8c>
		case 268 :
			strcpy(p->name,"THE WIZARD");
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	337c      	adds	r3, #124	; 0x7c
 8007c12:	497b      	ldr	r1, [pc, #492]	; (8007e00 <problem_fetch+0x6ae0>)
 8007c14:	461a      	mov	r2, r3
 8007c16:	460b      	mov	r3, r1
 8007c18:	cb03      	ldmia	r3!, {r0, r1}
 8007c1a:	6010      	str	r0, [r2, #0]
 8007c1c:	6051      	str	r1, [r2, #4]
 8007c1e:	8819      	ldrh	r1, [r3, #0]
 8007c20:	789b      	ldrb	r3, [r3, #2]
 8007c22:	8111      	strh	r1, [r2, #8]
 8007c24:	7293      	strb	r3, [r2, #10]
			p->moveSize = 8;
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	2208      	movs	r2, #8
 8007c2a:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"G,J,E,H,F,H,E,I");
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	3340      	adds	r3, #64	; 0x40
 8007c30:	4a74      	ldr	r2, [pc, #464]	; (8007e04 <problem_fetch+0x6ae4>)
 8007c32:	461c      	mov	r4, r3
 8007c34:	4615      	mov	r5, r2
 8007c36:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007c38:	6020      	str	r0, [r4, #0]
 8007c3a:	6061      	str	r1, [r4, #4]
 8007c3c:	60a2      	str	r2, [r4, #8]
 8007c3e:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,7,8,10,11,13,16,18");
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	3304      	adds	r3, #4
 8007c44:	4a70      	ldr	r2, [pc, #448]	; (8007e08 <problem_fetch+0x6ae8>)
 8007c46:	461d      	mov	r5, r3
 8007c48:	4614      	mov	r4, r2
 8007c4a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007c4c:	6028      	str	r0, [r5, #0]
 8007c4e:	6069      	str	r1, [r5, #4]
 8007c50:	60aa      	str	r2, [r5, #8]
 8007c52:	60eb      	str	r3, [r5, #12]
 8007c54:	6820      	ldr	r0, [r4, #0]
 8007c56:	6128      	str	r0, [r5, #16]
 8007c58:	7923      	ldrb	r3, [r4, #4]
 8007c5a:	752b      	strb	r3, [r5, #20]
			strcpy(p->startFinish, "s,d,d,d,d,d,d,e");
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	33d8      	adds	r3, #216	; 0xd8
 8007c60:	4a6a      	ldr	r2, [pc, #424]	; (8007e0c <problem_fetch+0x6aec>)
 8007c62:	461c      	mov	r4, r3
 8007c64:	4615      	mov	r5, r2
 8007c66:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007c68:	6020      	str	r0, [r4, #0]
 8007c6a:	6061      	str	r1, [r4, #4]
 8007c6c:	60a2      	str	r2, [r4, #8]
 8007c6e:	60e3      	str	r3, [r4, #12]
			strcpy(p->grade, "6C");
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	33cc      	adds	r3, #204	; 0xcc
 8007c74:	4a58      	ldr	r2, [pc, #352]	; (8007dd8 <problem_fetch+0x6ab8>)
 8007c76:	8811      	ldrh	r1, [r2, #0]
 8007c78:	7892      	ldrb	r2, [r2, #2]
 8007c7a:	8019      	strh	r1, [r3, #0]
 8007c7c:	709a      	strb	r2, [r3, #2]
			break;
 8007c7e:	f013 b895 	b.w	801adac <problem_fetch+0x19a8c>
		case 269 :
			strcpy(p->name,"SMOKING AREA HARD");
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	337c      	adds	r3, #124	; 0x7c
 8007c86:	4a62      	ldr	r2, [pc, #392]	; (8007e10 <problem_fetch+0x6af0>)
 8007c88:	461d      	mov	r5, r3
 8007c8a:	4614      	mov	r4, r2
 8007c8c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007c8e:	6028      	str	r0, [r5, #0]
 8007c90:	6069      	str	r1, [r5, #4]
 8007c92:	60aa      	str	r2, [r5, #8]
 8007c94:	60eb      	str	r3, [r5, #12]
 8007c96:	8823      	ldrh	r3, [r4, #0]
 8007c98:	822b      	strh	r3, [r5, #16]
			p->moveSize = 5;
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	2205      	movs	r2, #5
 8007c9e:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"G,C,E,E,I");
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	3340      	adds	r3, #64	; 0x40
 8007ca4:	495b      	ldr	r1, [pc, #364]	; (8007e14 <problem_fetch+0x6af4>)
 8007ca6:	461a      	mov	r2, r3
 8007ca8:	460b      	mov	r3, r1
 8007caa:	cb03      	ldmia	r3!, {r0, r1}
 8007cac:	6010      	str	r0, [r2, #0]
 8007cae:	6051      	str	r1, [r2, #4]
 8007cb0:	881b      	ldrh	r3, [r3, #0]
 8007cb2:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"4,8,12,16,18");
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	3304      	adds	r3, #4
 8007cb8:	4a57      	ldr	r2, [pc, #348]	; (8007e18 <problem_fetch+0x6af8>)
 8007cba:	461c      	mov	r4, r3
 8007cbc:	4613      	mov	r3, r2
 8007cbe:	cb07      	ldmia	r3!, {r0, r1, r2}
 8007cc0:	6020      	str	r0, [r4, #0]
 8007cc2:	6061      	str	r1, [r4, #4]
 8007cc4:	60a2      	str	r2, [r4, #8]
 8007cc6:	781b      	ldrb	r3, [r3, #0]
 8007cc8:	7323      	strb	r3, [r4, #12]
			strcpy(p->startFinish, "s,d,d,d,e");
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	33d8      	adds	r3, #216	; 0xd8
 8007cce:	4941      	ldr	r1, [pc, #260]	; (8007dd4 <problem_fetch+0x6ab4>)
 8007cd0:	461a      	mov	r2, r3
 8007cd2:	460b      	mov	r3, r1
 8007cd4:	cb03      	ldmia	r3!, {r0, r1}
 8007cd6:	6010      	str	r0, [r2, #0]
 8007cd8:	6051      	str	r1, [r2, #4]
 8007cda:	881b      	ldrh	r3, [r3, #0]
 8007cdc:	8113      	strh	r3, [r2, #8]
			strcpy(p->grade, "7A+");
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	33cc      	adds	r3, #204	; 0xcc
 8007ce2:	4a4e      	ldr	r2, [pc, #312]	; (8007e1c <problem_fetch+0x6afc>)
 8007ce4:	6810      	ldr	r0, [r2, #0]
 8007ce6:	6018      	str	r0, [r3, #0]
			break;
 8007ce8:	f013 b860 	b.w	801adac <problem_fetch+0x19a8c>
		case 27 :
			strcpy(p->name,"SCHWARTZ SCHNEIDER");
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	337c      	adds	r3, #124	; 0x7c
 8007cf0:	4a4b      	ldr	r2, [pc, #300]	; (8007e20 <problem_fetch+0x6b00>)
 8007cf2:	461d      	mov	r5, r3
 8007cf4:	4614      	mov	r4, r2
 8007cf6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007cf8:	6028      	str	r0, [r5, #0]
 8007cfa:	6069      	str	r1, [r5, #4]
 8007cfc:	60aa      	str	r2, [r5, #8]
 8007cfe:	60eb      	str	r3, [r5, #12]
 8007d00:	8823      	ldrh	r3, [r4, #0]
 8007d02:	78a2      	ldrb	r2, [r4, #2]
 8007d04:	822b      	strh	r3, [r5, #16]
 8007d06:	4613      	mov	r3, r2
 8007d08:	74ab      	strb	r3, [r5, #18]
			p->moveSize = 7;
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	2207      	movs	r2, #7
 8007d0e:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"J,H,D,B,D,E,I");
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	3340      	adds	r3, #64	; 0x40
 8007d14:	4a43      	ldr	r2, [pc, #268]	; (8007e24 <problem_fetch+0x6b04>)
 8007d16:	461c      	mov	r4, r3
 8007d18:	4613      	mov	r3, r2
 8007d1a:	cb07      	ldmia	r3!, {r0, r1, r2}
 8007d1c:	6020      	str	r0, [r4, #0]
 8007d1e:	6061      	str	r1, [r4, #4]
 8007d20:	60a2      	str	r2, [r4, #8]
 8007d22:	881b      	ldrh	r3, [r3, #0]
 8007d24:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,10,11,6,15,16,18");
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	3304      	adds	r3, #4
 8007d2a:	4a3f      	ldr	r2, [pc, #252]	; (8007e28 <problem_fetch+0x6b08>)
 8007d2c:	461d      	mov	r5, r3
 8007d2e:	4614      	mov	r4, r2
 8007d30:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007d32:	6028      	str	r0, [r5, #0]
 8007d34:	6069      	str	r1, [r5, #4]
 8007d36:	60aa      	str	r2, [r5, #8]
 8007d38:	60eb      	str	r3, [r5, #12]
 8007d3a:	8823      	ldrh	r3, [r4, #0]
 8007d3c:	78a2      	ldrb	r2, [r4, #2]
 8007d3e:	822b      	strh	r3, [r5, #16]
 8007d40:	4613      	mov	r3, r2
 8007d42:	74ab      	strb	r3, [r5, #18]
			strcpy(p->startFinish, "s,d,d,d,d,d,e");
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	33d8      	adds	r3, #216	; 0xd8
 8007d48:	4a38      	ldr	r2, [pc, #224]	; (8007e2c <problem_fetch+0x6b0c>)
 8007d4a:	461c      	mov	r4, r3
 8007d4c:	4613      	mov	r3, r2
 8007d4e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8007d50:	6020      	str	r0, [r4, #0]
 8007d52:	6061      	str	r1, [r4, #4]
 8007d54:	60a2      	str	r2, [r4, #8]
 8007d56:	881b      	ldrh	r3, [r3, #0]
 8007d58:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade, "7A+");
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	33cc      	adds	r3, #204	; 0xcc
 8007d5e:	4a2f      	ldr	r2, [pc, #188]	; (8007e1c <problem_fetch+0x6afc>)
 8007d60:	6810      	ldr	r0, [r2, #0]
 8007d62:	6018      	str	r0, [r3, #0]
			break;
 8007d64:	f013 b822 	b.w	801adac <problem_fetch+0x19a8c>
		case 270 :
			strcpy(p->name,"ON BLACK");
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	337c      	adds	r3, #124	; 0x7c
 8007d6c:	4930      	ldr	r1, [pc, #192]	; (8007e30 <problem_fetch+0x6b10>)
 8007d6e:	461a      	mov	r2, r3
 8007d70:	460b      	mov	r3, r1
 8007d72:	cb03      	ldmia	r3!, {r0, r1}
 8007d74:	6010      	str	r0, [r2, #0]
 8007d76:	6051      	str	r1, [r2, #4]
 8007d78:	781b      	ldrb	r3, [r3, #0]
 8007d7a:	7213      	strb	r3, [r2, #8]
			p->moveSize = 6;
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	2206      	movs	r2, #6
 8007d80:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"G,E,F,C,D,A");
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	3340      	adds	r3, #64	; 0x40
 8007d86:	4a2b      	ldr	r2, [pc, #172]	; (8007e34 <problem_fetch+0x6b14>)
 8007d88:	461c      	mov	r4, r3
 8007d8a:	4613      	mov	r3, r2
 8007d8c:	cb07      	ldmia	r3!, {r0, r1, r2}
 8007d8e:	6020      	str	r0, [r4, #0]
 8007d90:	6061      	str	r1, [r4, #4]
 8007d92:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,8,11,13,15,18");
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	3304      	adds	r3, #4
 8007d98:	4a27      	ldr	r2, [pc, #156]	; (8007e38 <problem_fetch+0x6b18>)
 8007d9a:	461c      	mov	r4, r3
 8007d9c:	4615      	mov	r5, r2
 8007d9e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007da0:	6020      	str	r0, [r4, #0]
 8007da2:	6061      	str	r1, [r4, #4]
 8007da4:	60a2      	str	r2, [r4, #8]
 8007da6:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish, "s,d,d,d,d,e");
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	33d8      	adds	r3, #216	; 0xd8
 8007dac:	4a13      	ldr	r2, [pc, #76]	; (8007dfc <problem_fetch+0x6adc>)
 8007dae:	461c      	mov	r4, r3
 8007db0:	4613      	mov	r3, r2
 8007db2:	cb07      	ldmia	r3!, {r0, r1, r2}
 8007db4:	6020      	str	r0, [r4, #0]
 8007db6:	6061      	str	r1, [r4, #4]
 8007db8:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade, "6B+");
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	33cc      	adds	r3, #204	; 0xcc
 8007dbe:	4a1f      	ldr	r2, [pc, #124]	; (8007e3c <problem_fetch+0x6b1c>)
 8007dc0:	6810      	ldr	r0, [r2, #0]
 8007dc2:	6018      	str	r0, [r3, #0]
			break;
 8007dc4:	f012 bff2 	b.w	801adac <problem_fetch+0x19a8c>
 8007dc8:	08023620 	.word	0x08023620
 8007dcc:	08023638 	.word	0x08023638
 8007dd0:	08023644 	.word	0x08023644
 8007dd4:	08021320 	.word	0x08021320
 8007dd8:	08021370 	.word	0x08021370
 8007ddc:	08023654 	.word	0x08023654
 8007de0:	08023668 	.word	0x08023668
 8007de4:	08023678 	.word	0x08023678
 8007de8:	080214cc 	.word	0x080214cc
 8007dec:	080213a8 	.word	0x080213a8
 8007df0:	0802368c 	.word	0x0802368c
 8007df4:	08023698 	.word	0x08023698
 8007df8:	080236a4 	.word	0x080236a4
 8007dfc:	0802139c 	.word	0x0802139c
 8007e00:	080236b8 	.word	0x080236b8
 8007e04:	080236c4 	.word	0x080236c4
 8007e08:	080236d4 	.word	0x080236d4
 8007e0c:	08021458 	.word	0x08021458
 8007e10:	080236ec 	.word	0x080236ec
 8007e14:	08023700 	.word	0x08023700
 8007e18:	0802370c 	.word	0x0802370c
 8007e1c:	08021424 	.word	0x08021424
 8007e20:	0802371c 	.word	0x0802371c
 8007e24:	08023730 	.word	0x08023730
 8007e28:	08023740 	.word	0x08023740
 8007e2c:	08021494 	.word	0x08021494
 8007e30:	08023754 	.word	0x08023754
 8007e34:	08023760 	.word	0x08023760
 8007e38:	08022bc0 	.word	0x08022bc0
 8007e3c:	080212b0 	.word	0x080212b0
		case 271 :
			strcpy(p->name,"TAMOA NARASAKI BOMB");
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	337c      	adds	r3, #124	; 0x7c
 8007e44:	4ab1      	ldr	r2, [pc, #708]	; (800810c <problem_fetch+0x6dec>)
 8007e46:	461d      	mov	r5, r3
 8007e48:	4614      	mov	r4, r2
 8007e4a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007e4c:	6028      	str	r0, [r5, #0]
 8007e4e:	6069      	str	r1, [r5, #4]
 8007e50:	60aa      	str	r2, [r5, #8]
 8007e52:	60eb      	str	r3, [r5, #12]
 8007e54:	6820      	ldr	r0, [r4, #0]
 8007e56:	6128      	str	r0, [r5, #16]
			p->moveSize = 7;
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	2207      	movs	r2, #7
 8007e5c:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"J,H,C,I,E,C,A");
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	3340      	adds	r3, #64	; 0x40
 8007e62:	4aab      	ldr	r2, [pc, #684]	; (8008110 <problem_fetch+0x6df0>)
 8007e64:	461c      	mov	r4, r3
 8007e66:	4613      	mov	r3, r2
 8007e68:	cb07      	ldmia	r3!, {r0, r1, r2}
 8007e6a:	6020      	str	r0, [r4, #0]
 8007e6c:	6061      	str	r1, [r4, #4]
 8007e6e:	60a2      	str	r2, [r4, #8]
 8007e70:	881b      	ldrh	r3, [r3, #0]
 8007e72:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,8,8,9,16,13,18");
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	3304      	adds	r3, #4
 8007e78:	4aa6      	ldr	r2, [pc, #664]	; (8008114 <problem_fetch+0x6df4>)
 8007e7a:	461d      	mov	r5, r3
 8007e7c:	4614      	mov	r4, r2
 8007e7e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007e80:	6028      	str	r0, [r5, #0]
 8007e82:	6069      	str	r1, [r5, #4]
 8007e84:	60aa      	str	r2, [r5, #8]
 8007e86:	60eb      	str	r3, [r5, #12]
 8007e88:	7823      	ldrb	r3, [r4, #0]
 8007e8a:	742b      	strb	r3, [r5, #16]
			strcpy(p->startFinish, "s,d,d,d,d,d,e");
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	33d8      	adds	r3, #216	; 0xd8
 8007e90:	4aa1      	ldr	r2, [pc, #644]	; (8008118 <problem_fetch+0x6df8>)
 8007e92:	461c      	mov	r4, r3
 8007e94:	4613      	mov	r3, r2
 8007e96:	cb07      	ldmia	r3!, {r0, r1, r2}
 8007e98:	6020      	str	r0, [r4, #0]
 8007e9a:	6061      	str	r1, [r4, #4]
 8007e9c:	60a2      	str	r2, [r4, #8]
 8007e9e:	881b      	ldrh	r3, [r3, #0]
 8007ea0:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade, "7B+");
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	33cc      	adds	r3, #204	; 0xcc
 8007ea6:	4a9d      	ldr	r2, [pc, #628]	; (800811c <problem_fetch+0x6dfc>)
 8007ea8:	6810      	ldr	r0, [r2, #0]
 8007eaa:	6018      	str	r0, [r3, #0]
			break;
 8007eac:	f012 bf7e 	b.w	801adac <problem_fetch+0x19a8c>
		case 272 :
			strcpy(p->name,"POOP TWISTER");
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	337c      	adds	r3, #124	; 0x7c
 8007eb4:	4a9a      	ldr	r2, [pc, #616]	; (8008120 <problem_fetch+0x6e00>)
 8007eb6:	461c      	mov	r4, r3
 8007eb8:	4613      	mov	r3, r2
 8007eba:	cb07      	ldmia	r3!, {r0, r1, r2}
 8007ebc:	6020      	str	r0, [r4, #0]
 8007ebe:	6061      	str	r1, [r4, #4]
 8007ec0:	60a2      	str	r2, [r4, #8]
 8007ec2:	781b      	ldrb	r3, [r3, #0]
 8007ec4:	7323      	strb	r3, [r4, #12]
			p->moveSize = 7;
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	2207      	movs	r2, #7
 8007eca:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"E,J,G,D,G,E,I");
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	3340      	adds	r3, #64	; 0x40
 8007ed0:	4a94      	ldr	r2, [pc, #592]	; (8008124 <problem_fetch+0x6e04>)
 8007ed2:	461c      	mov	r4, r3
 8007ed4:	4613      	mov	r3, r2
 8007ed6:	cb07      	ldmia	r3!, {r0, r1, r2}
 8007ed8:	6020      	str	r0, [r4, #0]
 8007eda:	6061      	str	r1, [r4, #4]
 8007edc:	60a2      	str	r2, [r4, #8]
 8007ede:	881b      	ldrh	r3, [r3, #0]
 8007ee0:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"6,5,9,11,14,16,18");
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	3304      	adds	r3, #4
 8007ee6:	4a90      	ldr	r2, [pc, #576]	; (8008128 <problem_fetch+0x6e08>)
 8007ee8:	461d      	mov	r5, r3
 8007eea:	4614      	mov	r4, r2
 8007eec:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007eee:	6028      	str	r0, [r5, #0]
 8007ef0:	6069      	str	r1, [r5, #4]
 8007ef2:	60aa      	str	r2, [r5, #8]
 8007ef4:	60eb      	str	r3, [r5, #12]
 8007ef6:	8823      	ldrh	r3, [r4, #0]
 8007ef8:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish, "s,s,d,d,d,d,e");
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	33d8      	adds	r3, #216	; 0xd8
 8007efe:	4a8b      	ldr	r2, [pc, #556]	; (800812c <problem_fetch+0x6e0c>)
 8007f00:	461c      	mov	r4, r3
 8007f02:	4613      	mov	r3, r2
 8007f04:	cb07      	ldmia	r3!, {r0, r1, r2}
 8007f06:	6020      	str	r0, [r4, #0]
 8007f08:	6061      	str	r1, [r4, #4]
 8007f0a:	60a2      	str	r2, [r4, #8]
 8007f0c:	881b      	ldrh	r3, [r3, #0]
 8007f0e:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade, "6C");
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	33cc      	adds	r3, #204	; 0xcc
 8007f14:	4a86      	ldr	r2, [pc, #536]	; (8008130 <problem_fetch+0x6e10>)
 8007f16:	8811      	ldrh	r1, [r2, #0]
 8007f18:	7892      	ldrb	r2, [r2, #2]
 8007f1a:	8019      	strh	r1, [r3, #0]
 8007f1c:	709a      	strb	r2, [r3, #2]
			break;
 8007f1e:	f012 bf45 	b.w	801adac <problem_fetch+0x19a8c>
		case 273 :
			strcpy(p->name,"GIVE ME SOMETHING BETTER");
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	337c      	adds	r3, #124	; 0x7c
 8007f26:	4a83      	ldr	r2, [pc, #524]	; (8008134 <problem_fetch+0x6e14>)
 8007f28:	461d      	mov	r5, r3
 8007f2a:	4614      	mov	r4, r2
 8007f2c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007f2e:	6028      	str	r0, [r5, #0]
 8007f30:	6069      	str	r1, [r5, #4]
 8007f32:	60aa      	str	r2, [r5, #8]
 8007f34:	60eb      	str	r3, [r5, #12]
 8007f36:	cc03      	ldmia	r4!, {r0, r1}
 8007f38:	6128      	str	r0, [r5, #16]
 8007f3a:	6169      	str	r1, [r5, #20]
 8007f3c:	7823      	ldrb	r3, [r4, #0]
 8007f3e:	762b      	strb	r3, [r5, #24]
			p->moveSize = 9;
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	2209      	movs	r2, #9
 8007f44:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"E,G,K,H,I,C,D,B,A");
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	3340      	adds	r3, #64	; 0x40
 8007f4a:	4a7b      	ldr	r2, [pc, #492]	; (8008138 <problem_fetch+0x6e18>)
 8007f4c:	461d      	mov	r5, r3
 8007f4e:	4614      	mov	r4, r2
 8007f50:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007f52:	6028      	str	r0, [r5, #0]
 8007f54:	6069      	str	r1, [r5, #4]
 8007f56:	60aa      	str	r2, [r5, #8]
 8007f58:	60eb      	str	r3, [r5, #12]
 8007f5a:	8823      	ldrh	r3, [r4, #0]
 8007f5c:	822b      	strh	r3, [r5, #16]
			strcpy(p->moveNumbers,"6,4,9,13,14,13,15,12,18");
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	3304      	adds	r3, #4
 8007f62:	4a76      	ldr	r2, [pc, #472]	; (800813c <problem_fetch+0x6e1c>)
 8007f64:	461d      	mov	r5, r3
 8007f66:	4614      	mov	r4, r2
 8007f68:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007f6a:	6028      	str	r0, [r5, #0]
 8007f6c:	6069      	str	r1, [r5, #4]
 8007f6e:	60aa      	str	r2, [r5, #8]
 8007f70:	60eb      	str	r3, [r5, #12]
 8007f72:	cc03      	ldmia	r4!, {r0, r1}
 8007f74:	6128      	str	r0, [r5, #16]
 8007f76:	6169      	str	r1, [r5, #20]
			strcpy(p->startFinish, "s,s,d,d,d,d,d,d,e");
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	33d8      	adds	r3, #216	; 0xd8
 8007f7c:	4a70      	ldr	r2, [pc, #448]	; (8008140 <problem_fetch+0x6e20>)
 8007f7e:	461d      	mov	r5, r3
 8007f80:	4614      	mov	r4, r2
 8007f82:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007f84:	6028      	str	r0, [r5, #0]
 8007f86:	6069      	str	r1, [r5, #4]
 8007f88:	60aa      	str	r2, [r5, #8]
 8007f8a:	60eb      	str	r3, [r5, #12]
 8007f8c:	8823      	ldrh	r3, [r4, #0]
 8007f8e:	822b      	strh	r3, [r5, #16]
			strcpy(p->grade, "6C+");
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	33cc      	adds	r3, #204	; 0xcc
 8007f94:	4a6b      	ldr	r2, [pc, #428]	; (8008144 <problem_fetch+0x6e24>)
 8007f96:	6810      	ldr	r0, [r2, #0]
 8007f98:	6018      	str	r0, [r3, #0]
			break;
 8007f9a:	f012 bf07 	b.w	801adac <problem_fetch+0x19a8c>
		case 274 :
			strcpy(p->name,"MONOTHEISM");
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	337c      	adds	r3, #124	; 0x7c
 8007fa2:	4969      	ldr	r1, [pc, #420]	; (8008148 <problem_fetch+0x6e28>)
 8007fa4:	461a      	mov	r2, r3
 8007fa6:	460b      	mov	r3, r1
 8007fa8:	cb03      	ldmia	r3!, {r0, r1}
 8007faa:	6010      	str	r0, [r2, #0]
 8007fac:	6051      	str	r1, [r2, #4]
 8007fae:	8819      	ldrh	r1, [r3, #0]
 8007fb0:	789b      	ldrb	r3, [r3, #2]
 8007fb2:	8111      	strh	r1, [r2, #8]
 8007fb4:	7293      	strb	r3, [r2, #10]
			p->moveSize = 9;
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	2209      	movs	r2, #9
 8007fba:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"E,G,K,H,C,C,I,D,A");
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	3340      	adds	r3, #64	; 0x40
 8007fc0:	4a62      	ldr	r2, [pc, #392]	; (800814c <problem_fetch+0x6e2c>)
 8007fc2:	461d      	mov	r5, r3
 8007fc4:	4614      	mov	r4, r2
 8007fc6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007fc8:	6028      	str	r0, [r5, #0]
 8007fca:	6069      	str	r1, [r5, #4]
 8007fcc:	60aa      	str	r2, [r5, #8]
 8007fce:	60eb      	str	r3, [r5, #12]
 8007fd0:	8823      	ldrh	r3, [r4, #0]
 8007fd2:	822b      	strh	r3, [r5, #16]
			strcpy(p->moveNumbers,"6,4,9,13,13,16,14,11,18");
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	3304      	adds	r3, #4
 8007fd8:	4a5d      	ldr	r2, [pc, #372]	; (8008150 <problem_fetch+0x6e30>)
 8007fda:	461d      	mov	r5, r3
 8007fdc:	4614      	mov	r4, r2
 8007fde:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007fe0:	6028      	str	r0, [r5, #0]
 8007fe2:	6069      	str	r1, [r5, #4]
 8007fe4:	60aa      	str	r2, [r5, #8]
 8007fe6:	60eb      	str	r3, [r5, #12]
 8007fe8:	cc03      	ldmia	r4!, {r0, r1}
 8007fea:	6128      	str	r0, [r5, #16]
 8007fec:	6169      	str	r1, [r5, #20]
			strcpy(p->startFinish, "s,s,d,d,d,d,d,d,e");
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	33d8      	adds	r3, #216	; 0xd8
 8007ff2:	4a53      	ldr	r2, [pc, #332]	; (8008140 <problem_fetch+0x6e20>)
 8007ff4:	461d      	mov	r5, r3
 8007ff6:	4614      	mov	r4, r2
 8007ff8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007ffa:	6028      	str	r0, [r5, #0]
 8007ffc:	6069      	str	r1, [r5, #4]
 8007ffe:	60aa      	str	r2, [r5, #8]
 8008000:	60eb      	str	r3, [r5, #12]
 8008002:	8823      	ldrh	r3, [r4, #0]
 8008004:	822b      	strh	r3, [r5, #16]
			strcpy(p->grade, "7A+");
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	33cc      	adds	r3, #204	; 0xcc
 800800a:	4a52      	ldr	r2, [pc, #328]	; (8008154 <problem_fetch+0x6e34>)
 800800c:	6810      	ldr	r0, [r2, #0]
 800800e:	6018      	str	r0, [r3, #0]
			break;
 8008010:	f012 becc 	b.w	801adac <problem_fetch+0x19a8c>
		case 275 :
			strcpy(p->name,"BLACK HEART");
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	337c      	adds	r3, #124	; 0x7c
 8008018:	4a4f      	ldr	r2, [pc, #316]	; (8008158 <problem_fetch+0x6e38>)
 800801a:	461c      	mov	r4, r3
 800801c:	4613      	mov	r3, r2
 800801e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8008020:	6020      	str	r0, [r4, #0]
 8008022:	6061      	str	r1, [r4, #4]
 8008024:	60a2      	str	r2, [r4, #8]
			p->moveSize = 5;
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	2205      	movs	r2, #5
 800802a:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"J,I,I,G,I");
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	3340      	adds	r3, #64	; 0x40
 8008030:	494a      	ldr	r1, [pc, #296]	; (800815c <problem_fetch+0x6e3c>)
 8008032:	461a      	mov	r2, r3
 8008034:	460b      	mov	r3, r1
 8008036:	cb03      	ldmia	r3!, {r0, r1}
 8008038:	6010      	str	r0, [r2, #0]
 800803a:	6051      	str	r1, [r2, #4]
 800803c:	881b      	ldrh	r3, [r3, #0]
 800803e:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"5,10,14,17,18");
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	3304      	adds	r3, #4
 8008044:	4a46      	ldr	r2, [pc, #280]	; (8008160 <problem_fetch+0x6e40>)
 8008046:	461c      	mov	r4, r3
 8008048:	4613      	mov	r3, r2
 800804a:	cb07      	ldmia	r3!, {r0, r1, r2}
 800804c:	6020      	str	r0, [r4, #0]
 800804e:	6061      	str	r1, [r4, #4]
 8008050:	60a2      	str	r2, [r4, #8]
 8008052:	881b      	ldrh	r3, [r3, #0]
 8008054:	81a3      	strh	r3, [r4, #12]
			strcpy(p->startFinish, "s,d,d,d,e");
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	33d8      	adds	r3, #216	; 0xd8
 800805a:	4942      	ldr	r1, [pc, #264]	; (8008164 <problem_fetch+0x6e44>)
 800805c:	461a      	mov	r2, r3
 800805e:	460b      	mov	r3, r1
 8008060:	cb03      	ldmia	r3!, {r0, r1}
 8008062:	6010      	str	r0, [r2, #0]
 8008064:	6051      	str	r1, [r2, #4]
 8008066:	881b      	ldrh	r3, [r3, #0]
 8008068:	8113      	strh	r3, [r2, #8]
			strcpy(p->grade, "6C+");
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	33cc      	adds	r3, #204	; 0xcc
 800806e:	4a35      	ldr	r2, [pc, #212]	; (8008144 <problem_fetch+0x6e24>)
 8008070:	6810      	ldr	r0, [r2, #0]
 8008072:	6018      	str	r0, [r3, #0]
			break;
 8008074:	f012 be9a 	b.w	801adac <problem_fetch+0x19a8c>
		case 276 :
			strcpy(p->name,"NEW PROB");
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	337c      	adds	r3, #124	; 0x7c
 800807c:	493a      	ldr	r1, [pc, #232]	; (8008168 <problem_fetch+0x6e48>)
 800807e:	461a      	mov	r2, r3
 8008080:	460b      	mov	r3, r1
 8008082:	cb03      	ldmia	r3!, {r0, r1}
 8008084:	6010      	str	r0, [r2, #0]
 8008086:	6051      	str	r1, [r2, #4]
 8008088:	781b      	ldrb	r3, [r3, #0]
 800808a:	7213      	strb	r3, [r2, #8]
			p->moveSize = 13;
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	220d      	movs	r2, #13
 8008090:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"G,C,C,A,B,C,B,A,D,C,E,D,A");
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	3340      	adds	r3, #64	; 0x40
 8008096:	4a35      	ldr	r2, [pc, #212]	; (800816c <problem_fetch+0x6e4c>)
 8008098:	461d      	mov	r5, r3
 800809a:	4614      	mov	r4, r2
 800809c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800809e:	6028      	str	r0, [r5, #0]
 80080a0:	6069      	str	r1, [r5, #4]
 80080a2:	60aa      	str	r2, [r5, #8]
 80080a4:	60eb      	str	r3, [r5, #12]
 80080a6:	cc03      	ldmia	r4!, {r0, r1}
 80080a8:	6128      	str	r0, [r5, #16]
 80080aa:	6169      	str	r1, [r5, #20]
 80080ac:	8823      	ldrh	r3, [r4, #0]
 80080ae:	832b      	strh	r3, [r5, #24]
			strcpy(p->moveNumbers,"4,5,16,14,15,13,10,9,7,8,8,11,18");
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	3304      	adds	r3, #4
 80080b4:	4a2e      	ldr	r2, [pc, #184]	; (8008170 <problem_fetch+0x6e50>)
 80080b6:	4614      	mov	r4, r2
 80080b8:	469c      	mov	ip, r3
 80080ba:	f104 0e20 	add.w	lr, r4, #32
 80080be:	4665      	mov	r5, ip
 80080c0:	4626      	mov	r6, r4
 80080c2:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80080c4:	6028      	str	r0, [r5, #0]
 80080c6:	6069      	str	r1, [r5, #4]
 80080c8:	60aa      	str	r2, [r5, #8]
 80080ca:	60eb      	str	r3, [r5, #12]
 80080cc:	3410      	adds	r4, #16
 80080ce:	f10c 0c10 	add.w	ip, ip, #16
 80080d2:	4574      	cmp	r4, lr
 80080d4:	d1f3      	bne.n	80080be <problem_fetch+0x6d9e>
 80080d6:	4663      	mov	r3, ip
 80080d8:	4622      	mov	r2, r4
 80080da:	7812      	ldrb	r2, [r2, #0]
 80080dc:	701a      	strb	r2, [r3, #0]
			strcpy(p->startFinish, "s,s,d,d,d,d,d,d,d,d,d,d,e");
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	33d8      	adds	r3, #216	; 0xd8
 80080e2:	4a24      	ldr	r2, [pc, #144]	; (8008174 <problem_fetch+0x6e54>)
 80080e4:	461d      	mov	r5, r3
 80080e6:	4614      	mov	r4, r2
 80080e8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80080ea:	6028      	str	r0, [r5, #0]
 80080ec:	6069      	str	r1, [r5, #4]
 80080ee:	60aa      	str	r2, [r5, #8]
 80080f0:	60eb      	str	r3, [r5, #12]
 80080f2:	cc03      	ldmia	r4!, {r0, r1}
 80080f4:	6128      	str	r0, [r5, #16]
 80080f6:	6169      	str	r1, [r5, #20]
 80080f8:	8823      	ldrh	r3, [r4, #0]
 80080fa:	832b      	strh	r3, [r5, #24]
			strcpy(p->grade, "6B+");
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	33cc      	adds	r3, #204	; 0xcc
 8008100:	4a1d      	ldr	r2, [pc, #116]	; (8008178 <problem_fetch+0x6e58>)
 8008102:	6810      	ldr	r0, [r2, #0]
 8008104:	6018      	str	r0, [r3, #0]
			break;
 8008106:	f012 be51 	b.w	801adac <problem_fetch+0x19a8c>
 800810a:	bf00      	nop
 800810c:	0802376c 	.word	0x0802376c
 8008110:	08023780 	.word	0x08023780
 8008114:	08023790 	.word	0x08023790
 8008118:	08021494 	.word	0x08021494
 800811c:	08021848 	.word	0x08021848
 8008120:	080237a4 	.word	0x080237a4
 8008124:	080237b4 	.word	0x080237b4
 8008128:	080237c4 	.word	0x080237c4
 800812c:	080212a0 	.word	0x080212a0
 8008130:	08021370 	.word	0x08021370
 8008134:	080237d8 	.word	0x080237d8
 8008138:	080237f4 	.word	0x080237f4
 800813c:	08023808 	.word	0x08023808
 8008140:	0802187c 	.word	0x0802187c
 8008144:	080213a8 	.word	0x080213a8
 8008148:	08023820 	.word	0x08023820
 800814c:	0802382c 	.word	0x0802382c
 8008150:	08023840 	.word	0x08023840
 8008154:	08021424 	.word	0x08021424
 8008158:	08023858 	.word	0x08023858
 800815c:	08023864 	.word	0x08023864
 8008160:	08022c24 	.word	0x08022c24
 8008164:	08021320 	.word	0x08021320
 8008168:	08023870 	.word	0x08023870
 800816c:	0802387c 	.word	0x0802387c
 8008170:	08023898 	.word	0x08023898
 8008174:	080238bc 	.word	0x080238bc
 8008178:	080212b0 	.word	0x080212b0
		case 277 :
			strcpy(p->name,"FIRST PROB.");
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	337c      	adds	r3, #124	; 0x7c
 8008180:	4abf      	ldr	r2, [pc, #764]	; (8008480 <problem_fetch+0x7160>)
 8008182:	461c      	mov	r4, r3
 8008184:	4613      	mov	r3, r2
 8008186:	cb07      	ldmia	r3!, {r0, r1, r2}
 8008188:	6020      	str	r0, [r4, #0]
 800818a:	6061      	str	r1, [r4, #4]
 800818c:	60a2      	str	r2, [r4, #8]
			p->moveSize = 13;
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	220d      	movs	r2, #13
 8008192:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"G,C,C,E,G,G,D,C,A,D,C,E,A");
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	3340      	adds	r3, #64	; 0x40
 8008198:	4aba      	ldr	r2, [pc, #744]	; (8008484 <problem_fetch+0x7164>)
 800819a:	461d      	mov	r5, r3
 800819c:	4614      	mov	r4, r2
 800819e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80081a0:	6028      	str	r0, [r5, #0]
 80081a2:	6069      	str	r1, [r5, #4]
 80081a4:	60aa      	str	r2, [r5, #8]
 80081a6:	60eb      	str	r3, [r5, #12]
 80081a8:	cc03      	ldmia	r4!, {r0, r1}
 80081aa:	6128      	str	r0, [r5, #16]
 80081ac:	6169      	str	r1, [r5, #20]
 80081ae:	8823      	ldrh	r3, [r4, #0]
 80081b0:	832b      	strh	r3, [r5, #24]
			strcpy(p->moveNumbers,"4,5,8,9,9,10,11,16,14,15,13,12,18");
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	3304      	adds	r3, #4
 80081b6:	4ab4      	ldr	r2, [pc, #720]	; (8008488 <problem_fetch+0x7168>)
 80081b8:	4614      	mov	r4, r2
 80081ba:	469c      	mov	ip, r3
 80081bc:	f104 0e20 	add.w	lr, r4, #32
 80081c0:	4665      	mov	r5, ip
 80081c2:	4626      	mov	r6, r4
 80081c4:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80081c6:	6028      	str	r0, [r5, #0]
 80081c8:	6069      	str	r1, [r5, #4]
 80081ca:	60aa      	str	r2, [r5, #8]
 80081cc:	60eb      	str	r3, [r5, #12]
 80081ce:	3410      	adds	r4, #16
 80081d0:	f10c 0c10 	add.w	ip, ip, #16
 80081d4:	4574      	cmp	r4, lr
 80081d6:	d1f3      	bne.n	80081c0 <problem_fetch+0x6ea0>
 80081d8:	4662      	mov	r2, ip
 80081da:	4623      	mov	r3, r4
 80081dc:	881b      	ldrh	r3, [r3, #0]
 80081de:	8013      	strh	r3, [r2, #0]
			strcpy(p->startFinish, "s,s,d,d,d,d,d,d,d,d,d,d,e");
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	33d8      	adds	r3, #216	; 0xd8
 80081e4:	4aa9      	ldr	r2, [pc, #676]	; (800848c <problem_fetch+0x716c>)
 80081e6:	461d      	mov	r5, r3
 80081e8:	4614      	mov	r4, r2
 80081ea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80081ec:	6028      	str	r0, [r5, #0]
 80081ee:	6069      	str	r1, [r5, #4]
 80081f0:	60aa      	str	r2, [r5, #8]
 80081f2:	60eb      	str	r3, [r5, #12]
 80081f4:	cc03      	ldmia	r4!, {r0, r1}
 80081f6:	6128      	str	r0, [r5, #16]
 80081f8:	6169      	str	r1, [r5, #20]
 80081fa:	8823      	ldrh	r3, [r4, #0]
 80081fc:	832b      	strh	r3, [r5, #24]
			strcpy(p->grade, "6B+");
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	33cc      	adds	r3, #204	; 0xcc
 8008202:	4aa3      	ldr	r2, [pc, #652]	; (8008490 <problem_fetch+0x7170>)
 8008204:	6810      	ldr	r0, [r2, #0]
 8008206:	6018      	str	r0, [r3, #0]
			break;
 8008208:	f012 bdd0 	b.w	801adac <problem_fetch+0x19a8c>
		case 278 :
			strcpy(p->name,"TECH");
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	337c      	adds	r3, #124	; 0x7c
 8008210:	4aa0      	ldr	r2, [pc, #640]	; (8008494 <problem_fetch+0x7174>)
 8008212:	6810      	ldr	r0, [r2, #0]
 8008214:	6018      	str	r0, [r3, #0]
 8008216:	7912      	ldrb	r2, [r2, #4]
 8008218:	711a      	strb	r2, [r3, #4]
			p->moveSize = 7;
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	2207      	movs	r2, #7
 800821e:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"G,E,F,E,H,G,I");
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	3340      	adds	r3, #64	; 0x40
 8008224:	4a9c      	ldr	r2, [pc, #624]	; (8008498 <problem_fetch+0x7178>)
 8008226:	461c      	mov	r4, r3
 8008228:	4613      	mov	r3, r2
 800822a:	cb07      	ldmia	r3!, {r0, r1, r2}
 800822c:	6020      	str	r0, [r4, #0]
 800822e:	6061      	str	r1, [r4, #4]
 8008230:	60a2      	str	r2, [r4, #8]
 8008232:	881b      	ldrh	r3, [r3, #0]
 8008234:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,8,11,12,12,15,18");
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	3304      	adds	r3, #4
 800823a:	4a98      	ldr	r2, [pc, #608]	; (800849c <problem_fetch+0x717c>)
 800823c:	461d      	mov	r5, r3
 800823e:	4614      	mov	r4, r2
 8008240:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008242:	6028      	str	r0, [r5, #0]
 8008244:	6069      	str	r1, [r5, #4]
 8008246:	60aa      	str	r2, [r5, #8]
 8008248:	60eb      	str	r3, [r5, #12]
 800824a:	8823      	ldrh	r3, [r4, #0]
 800824c:	78a2      	ldrb	r2, [r4, #2]
 800824e:	822b      	strh	r3, [r5, #16]
 8008250:	4613      	mov	r3, r2
 8008252:	74ab      	strb	r3, [r5, #18]
			strcpy(p->startFinish, "s,d,d,d,d,d,e");
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	33d8      	adds	r3, #216	; 0xd8
 8008258:	4a91      	ldr	r2, [pc, #580]	; (80084a0 <problem_fetch+0x7180>)
 800825a:	461c      	mov	r4, r3
 800825c:	4613      	mov	r3, r2
 800825e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8008260:	6020      	str	r0, [r4, #0]
 8008262:	6061      	str	r1, [r4, #4]
 8008264:	60a2      	str	r2, [r4, #8]
 8008266:	881b      	ldrh	r3, [r3, #0]
 8008268:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade, "7A+");
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	33cc      	adds	r3, #204	; 0xcc
 800826e:	4a8d      	ldr	r2, [pc, #564]	; (80084a4 <problem_fetch+0x7184>)
 8008270:	6810      	ldr	r0, [r2, #0]
 8008272:	6018      	str	r0, [r3, #0]
			break;
 8008274:	f012 bd9a 	b.w	801adac <problem_fetch+0x19a8c>
		case 279 :
			strcpy(p->name,"AKAHN N LIL CEASY");
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	337c      	adds	r3, #124	; 0x7c
 800827c:	4a8a      	ldr	r2, [pc, #552]	; (80084a8 <problem_fetch+0x7188>)
 800827e:	461d      	mov	r5, r3
 8008280:	4614      	mov	r4, r2
 8008282:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008284:	6028      	str	r0, [r5, #0]
 8008286:	6069      	str	r1, [r5, #4]
 8008288:	60aa      	str	r2, [r5, #8]
 800828a:	60eb      	str	r3, [r5, #12]
 800828c:	8823      	ldrh	r3, [r4, #0]
 800828e:	822b      	strh	r3, [r5, #16]
			p->moveSize = 9;
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	2209      	movs	r2, #9
 8008294:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"G,H,E,F,E,J,I,E,D");
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	3340      	adds	r3, #64	; 0x40
 800829a:	4a84      	ldr	r2, [pc, #528]	; (80084ac <problem_fetch+0x718c>)
 800829c:	461d      	mov	r5, r3
 800829e:	4614      	mov	r4, r2
 80082a0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80082a2:	6028      	str	r0, [r5, #0]
 80082a4:	6069      	str	r1, [r5, #4]
 80082a6:	60aa      	str	r2, [r5, #8]
 80082a8:	60eb      	str	r3, [r5, #12]
 80082aa:	8823      	ldrh	r3, [r4, #0]
 80082ac:	822b      	strh	r3, [r5, #16]
			strcpy(p->moveNumbers,"4,8,8,11,12,7,14,16,18");
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	3304      	adds	r3, #4
 80082b2:	4a7f      	ldr	r2, [pc, #508]	; (80084b0 <problem_fetch+0x7190>)
 80082b4:	461c      	mov	r4, r3
 80082b6:	4615      	mov	r5, r2
 80082b8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80082ba:	6020      	str	r0, [r4, #0]
 80082bc:	6061      	str	r1, [r4, #4]
 80082be:	60a2      	str	r2, [r4, #8]
 80082c0:	60e3      	str	r3, [r4, #12]
 80082c2:	6828      	ldr	r0, [r5, #0]
 80082c4:	6120      	str	r0, [r4, #16]
 80082c6:	88ab      	ldrh	r3, [r5, #4]
 80082c8:	79aa      	ldrb	r2, [r5, #6]
 80082ca:	82a3      	strh	r3, [r4, #20]
 80082cc:	4613      	mov	r3, r2
 80082ce:	75a3      	strb	r3, [r4, #22]
			strcpy(p->startFinish, "s,d,d,d,d,d,d,d,e");
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	33d8      	adds	r3, #216	; 0xd8
 80082d4:	4a77      	ldr	r2, [pc, #476]	; (80084b4 <problem_fetch+0x7194>)
 80082d6:	461d      	mov	r5, r3
 80082d8:	4614      	mov	r4, r2
 80082da:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80082dc:	6028      	str	r0, [r5, #0]
 80082de:	6069      	str	r1, [r5, #4]
 80082e0:	60aa      	str	r2, [r5, #8]
 80082e2:	60eb      	str	r3, [r5, #12]
 80082e4:	8823      	ldrh	r3, [r4, #0]
 80082e6:	822b      	strh	r3, [r5, #16]
			strcpy(p->grade, "6B+");
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	33cc      	adds	r3, #204	; 0xcc
 80082ec:	4a68      	ldr	r2, [pc, #416]	; (8008490 <problem_fetch+0x7170>)
 80082ee:	6810      	ldr	r0, [r2, #0]
 80082f0:	6018      	str	r0, [r3, #0]
			break;
 80082f2:	f012 bd5b 	b.w	801adac <problem_fetch+0x19a8c>
		case 28 :
			strcpy(p->name,"E-16");
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	337c      	adds	r3, #124	; 0x7c
 80082fa:	4a6f      	ldr	r2, [pc, #444]	; (80084b8 <problem_fetch+0x7198>)
 80082fc:	6810      	ldr	r0, [r2, #0]
 80082fe:	6018      	str	r0, [r3, #0]
 8008300:	7912      	ldrb	r2, [r2, #4]
 8008302:	711a      	strb	r2, [r3, #4]
			p->moveSize = 6;
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	2206      	movs	r2, #6
 8008308:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"G,C,E,C,E,A");
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	3340      	adds	r3, #64	; 0x40
 800830e:	4a6b      	ldr	r2, [pc, #428]	; (80084bc <problem_fetch+0x719c>)
 8008310:	461c      	mov	r4, r3
 8008312:	4613      	mov	r3, r2
 8008314:	cb07      	ldmia	r3!, {r0, r1, r2}
 8008316:	6020      	str	r0, [r4, #0]
 8008318:	6061      	str	r1, [r4, #4]
 800831a:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"6,8,9,13,16,18");
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	3304      	adds	r3, #4
 8008320:	4a67      	ldr	r2, [pc, #412]	; (80084c0 <problem_fetch+0x71a0>)
 8008322:	461c      	mov	r4, r3
 8008324:	4613      	mov	r3, r2
 8008326:	cb07      	ldmia	r3!, {r0, r1, r2}
 8008328:	6020      	str	r0, [r4, #0]
 800832a:	6061      	str	r1, [r4, #4]
 800832c:	60a2      	str	r2, [r4, #8]
 800832e:	881a      	ldrh	r2, [r3, #0]
 8008330:	789b      	ldrb	r3, [r3, #2]
 8008332:	81a2      	strh	r2, [r4, #12]
 8008334:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish, "s,d,d,d,d,e");
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	33d8      	adds	r3, #216	; 0xd8
 800833a:	4a62      	ldr	r2, [pc, #392]	; (80084c4 <problem_fetch+0x71a4>)
 800833c:	461c      	mov	r4, r3
 800833e:	4613      	mov	r3, r2
 8008340:	cb07      	ldmia	r3!, {r0, r1, r2}
 8008342:	6020      	str	r0, [r4, #0]
 8008344:	6061      	str	r1, [r4, #4]
 8008346:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade, "6B+");
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	33cc      	adds	r3, #204	; 0xcc
 800834c:	4a50      	ldr	r2, [pc, #320]	; (8008490 <problem_fetch+0x7170>)
 800834e:	6810      	ldr	r0, [r2, #0]
 8008350:	6018      	str	r0, [r3, #0]
			break;
 8008352:	f012 bd2b 	b.w	801adac <problem_fetch+0x19a8c>
		case 280 :
			strcpy(p->name,"EXIT");
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	337c      	adds	r3, #124	; 0x7c
 800835a:	4a5b      	ldr	r2, [pc, #364]	; (80084c8 <problem_fetch+0x71a8>)
 800835c:	6810      	ldr	r0, [r2, #0]
 800835e:	6018      	str	r0, [r3, #0]
 8008360:	7912      	ldrb	r2, [r2, #4]
 8008362:	711a      	strb	r2, [r3, #4]
			p->moveSize = 5;
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	2205      	movs	r2, #5
 8008368:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"J,E,E,A,A");
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	3340      	adds	r3, #64	; 0x40
 800836e:	4957      	ldr	r1, [pc, #348]	; (80084cc <problem_fetch+0x71ac>)
 8008370:	461a      	mov	r2, r3
 8008372:	460b      	mov	r3, r1
 8008374:	cb03      	ldmia	r3!, {r0, r1}
 8008376:	6010      	str	r0, [r2, #0]
 8008378:	6051      	str	r1, [r2, #4]
 800837a:	881b      	ldrh	r3, [r3, #0]
 800837c:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"5,8,12,14,18");
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	3304      	adds	r3, #4
 8008382:	4a53      	ldr	r2, [pc, #332]	; (80084d0 <problem_fetch+0x71b0>)
 8008384:	461c      	mov	r4, r3
 8008386:	4613      	mov	r3, r2
 8008388:	cb07      	ldmia	r3!, {r0, r1, r2}
 800838a:	6020      	str	r0, [r4, #0]
 800838c:	6061      	str	r1, [r4, #4]
 800838e:	60a2      	str	r2, [r4, #8]
 8008390:	781b      	ldrb	r3, [r3, #0]
 8008392:	7323      	strb	r3, [r4, #12]
			strcpy(p->startFinish, "s,d,d,d,e");
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	33d8      	adds	r3, #216	; 0xd8
 8008398:	494e      	ldr	r1, [pc, #312]	; (80084d4 <problem_fetch+0x71b4>)
 800839a:	461a      	mov	r2, r3
 800839c:	460b      	mov	r3, r1
 800839e:	cb03      	ldmia	r3!, {r0, r1}
 80083a0:	6010      	str	r0, [r2, #0]
 80083a2:	6051      	str	r1, [r2, #4]
 80083a4:	881b      	ldrh	r3, [r3, #0]
 80083a6:	8113      	strh	r3, [r2, #8]
			strcpy(p->grade, "7A+");
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	33cc      	adds	r3, #204	; 0xcc
 80083ac:	4a3d      	ldr	r2, [pc, #244]	; (80084a4 <problem_fetch+0x7184>)
 80083ae:	6810      	ldr	r0, [r2, #0]
 80083b0:	6018      	str	r0, [r3, #0]
			break;
 80083b2:	f012 bcfb 	b.w	801adac <problem_fetch+0x19a8c>
		case 281 :
			strcpy(p->name,"PLAYING TINDER");
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	337c      	adds	r3, #124	; 0x7c
 80083ba:	4a47      	ldr	r2, [pc, #284]	; (80084d8 <problem_fetch+0x71b8>)
 80083bc:	461c      	mov	r4, r3
 80083be:	4613      	mov	r3, r2
 80083c0:	cb07      	ldmia	r3!, {r0, r1, r2}
 80083c2:	6020      	str	r0, [r4, #0]
 80083c4:	6061      	str	r1, [r4, #4]
 80083c6:	60a2      	str	r2, [r4, #8]
 80083c8:	881a      	ldrh	r2, [r3, #0]
 80083ca:	789b      	ldrb	r3, [r3, #2]
 80083cc:	81a2      	strh	r2, [r4, #12]
 80083ce:	73a3      	strb	r3, [r4, #14]
			p->moveSize = 5;
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	2205      	movs	r2, #5
 80083d4:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"C,E,B,B,A");
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	3340      	adds	r3, #64	; 0x40
 80083da:	4940      	ldr	r1, [pc, #256]	; (80084dc <problem_fetch+0x71bc>)
 80083dc:	461a      	mov	r2, r3
 80083de:	460b      	mov	r3, r1
 80083e0:	cb03      	ldmia	r3!, {r0, r1}
 80083e2:	6010      	str	r0, [r2, #0]
 80083e4:	6051      	str	r1, [r2, #4]
 80083e6:	881b      	ldrh	r3, [r3, #0]
 80083e8:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"5,9,10,15,18");
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	3304      	adds	r3, #4
 80083ee:	4a3c      	ldr	r2, [pc, #240]	; (80084e0 <problem_fetch+0x71c0>)
 80083f0:	461c      	mov	r4, r3
 80083f2:	4613      	mov	r3, r2
 80083f4:	cb07      	ldmia	r3!, {r0, r1, r2}
 80083f6:	6020      	str	r0, [r4, #0]
 80083f8:	6061      	str	r1, [r4, #4]
 80083fa:	60a2      	str	r2, [r4, #8]
 80083fc:	781b      	ldrb	r3, [r3, #0]
 80083fe:	7323      	strb	r3, [r4, #12]
			strcpy(p->startFinish, "s,d,d,d,e");
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	33d8      	adds	r3, #216	; 0xd8
 8008404:	4933      	ldr	r1, [pc, #204]	; (80084d4 <problem_fetch+0x71b4>)
 8008406:	461a      	mov	r2, r3
 8008408:	460b      	mov	r3, r1
 800840a:	cb03      	ldmia	r3!, {r0, r1}
 800840c:	6010      	str	r0, [r2, #0]
 800840e:	6051      	str	r1, [r2, #4]
 8008410:	881b      	ldrh	r3, [r3, #0]
 8008412:	8113      	strh	r3, [r2, #8]
			strcpy(p->grade, "7B+");
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	33cc      	adds	r3, #204	; 0xcc
 8008418:	4a32      	ldr	r2, [pc, #200]	; (80084e4 <problem_fetch+0x71c4>)
 800841a:	6810      	ldr	r0, [r2, #0]
 800841c:	6018      	str	r0, [r3, #0]
			break;
 800841e:	f012 bcc5 	b.w	801adac <problem_fetch+0x19a8c>
		case 282 :
			strcpy(p->name,"YE BOI");
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	337c      	adds	r3, #124	; 0x7c
 8008426:	4a30      	ldr	r2, [pc, #192]	; (80084e8 <problem_fetch+0x71c8>)
 8008428:	6810      	ldr	r0, [r2, #0]
 800842a:	6018      	str	r0, [r3, #0]
 800842c:	8891      	ldrh	r1, [r2, #4]
 800842e:	7992      	ldrb	r2, [r2, #6]
 8008430:	8099      	strh	r1, [r3, #4]
 8008432:	719a      	strb	r2, [r3, #6]
			p->moveSize = 4;
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	2204      	movs	r2, #4
 8008438:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"G,H,C,D");
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	3340      	adds	r3, #64	; 0x40
 800843e:	492b      	ldr	r1, [pc, #172]	; (80084ec <problem_fetch+0x71cc>)
 8008440:	461a      	mov	r2, r3
 8008442:	460b      	mov	r3, r1
 8008444:	cb03      	ldmia	r3!, {r0, r1}
 8008446:	6010      	str	r0, [r2, #0]
 8008448:	6051      	str	r1, [r2, #4]
			strcpy(p->moveNumbers,"4,10,13,18");
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	3304      	adds	r3, #4
 800844e:	4928      	ldr	r1, [pc, #160]	; (80084f0 <problem_fetch+0x71d0>)
 8008450:	461a      	mov	r2, r3
 8008452:	460b      	mov	r3, r1
 8008454:	cb03      	ldmia	r3!, {r0, r1}
 8008456:	6010      	str	r0, [r2, #0]
 8008458:	6051      	str	r1, [r2, #4]
 800845a:	8819      	ldrh	r1, [r3, #0]
 800845c:	789b      	ldrb	r3, [r3, #2]
 800845e:	8111      	strh	r1, [r2, #8]
 8008460:	7293      	strb	r3, [r2, #10]
			strcpy(p->startFinish, "s,d,d,e");
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	33d8      	adds	r3, #216	; 0xd8
 8008466:	4923      	ldr	r1, [pc, #140]	; (80084f4 <problem_fetch+0x71d4>)
 8008468:	461a      	mov	r2, r3
 800846a:	460b      	mov	r3, r1
 800846c:	cb03      	ldmia	r3!, {r0, r1}
 800846e:	6010      	str	r0, [r2, #0]
 8008470:	6051      	str	r1, [r2, #4]
			strcpy(p->grade, "6C+");
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	33cc      	adds	r3, #204	; 0xcc
 8008476:	4a20      	ldr	r2, [pc, #128]	; (80084f8 <problem_fetch+0x71d8>)
 8008478:	6810      	ldr	r0, [r2, #0]
 800847a:	6018      	str	r0, [r3, #0]
			break;
 800847c:	f012 bc96 	b.w	801adac <problem_fetch+0x19a8c>
 8008480:	080238d8 	.word	0x080238d8
 8008484:	080238e4 	.word	0x080238e4
 8008488:	08023900 	.word	0x08023900
 800848c:	080238bc 	.word	0x080238bc
 8008490:	080212b0 	.word	0x080212b0
 8008494:	08023924 	.word	0x08023924
 8008498:	0802392c 	.word	0x0802392c
 800849c:	0802393c 	.word	0x0802393c
 80084a0:	08021494 	.word	0x08021494
 80084a4:	08021424 	.word	0x08021424
 80084a8:	08023950 	.word	0x08023950
 80084ac:	08023964 	.word	0x08023964
 80084b0:	08023978 	.word	0x08023978
 80084b4:	08023990 	.word	0x08023990
 80084b8:	080239a4 	.word	0x080239a4
 80084bc:	080239ac 	.word	0x080239ac
 80084c0:	080239b8 	.word	0x080239b8
 80084c4:	0802139c 	.word	0x0802139c
 80084c8:	080239c8 	.word	0x080239c8
 80084cc:	080239d0 	.word	0x080239d0
 80084d0:	080239dc 	.word	0x080239dc
 80084d4:	08021320 	.word	0x08021320
 80084d8:	080239ec 	.word	0x080239ec
 80084dc:	080239fc 	.word	0x080239fc
 80084e0:	08023a08 	.word	0x08023a08
 80084e4:	08021848 	.word	0x08021848
 80084e8:	08023a18 	.word	0x08023a18
 80084ec:	08023a20 	.word	0x08023a20
 80084f0:	08023a28 	.word	0x08023a28
 80084f4:	08022028 	.word	0x08022028
 80084f8:	080213a8 	.word	0x080213a8
		case 283 :
			strcpy(p->name,"S1");
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	337c      	adds	r3, #124	; 0x7c
 8008500:	4ac2      	ldr	r2, [pc, #776]	; (800880c <problem_fetch+0x74ec>)
 8008502:	8811      	ldrh	r1, [r2, #0]
 8008504:	7892      	ldrb	r2, [r2, #2]
 8008506:	8019      	strh	r1, [r3, #0]
 8008508:	709a      	strb	r2, [r3, #2]
			p->moveSize = 7;
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	2207      	movs	r2, #7
 800850e:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"G,J,H,D,D,B,A");
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	3340      	adds	r3, #64	; 0x40
 8008514:	4abe      	ldr	r2, [pc, #760]	; (8008810 <problem_fetch+0x74f0>)
 8008516:	461c      	mov	r4, r3
 8008518:	4613      	mov	r3, r2
 800851a:	cb07      	ldmia	r3!, {r0, r1, r2}
 800851c:	6020      	str	r0, [r4, #0]
 800851e:	6061      	str	r1, [r4, #4]
 8008520:	60a2      	str	r2, [r4, #8]
 8008522:	881b      	ldrh	r3, [r3, #0]
 8008524:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"6,5,8,11,15,6,18");
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	3304      	adds	r3, #4
 800852a:	4aba      	ldr	r2, [pc, #744]	; (8008814 <problem_fetch+0x74f4>)
 800852c:	461d      	mov	r5, r3
 800852e:	4614      	mov	r4, r2
 8008530:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008532:	6028      	str	r0, [r5, #0]
 8008534:	6069      	str	r1, [r5, #4]
 8008536:	60aa      	str	r2, [r5, #8]
 8008538:	60eb      	str	r3, [r5, #12]
 800853a:	7823      	ldrb	r3, [r4, #0]
 800853c:	742b      	strb	r3, [r5, #16]
			strcpy(p->startFinish, "s,s,d,d,d,d,e");
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	33d8      	adds	r3, #216	; 0xd8
 8008542:	4ab5      	ldr	r2, [pc, #724]	; (8008818 <problem_fetch+0x74f8>)
 8008544:	461c      	mov	r4, r3
 8008546:	4613      	mov	r3, r2
 8008548:	cb07      	ldmia	r3!, {r0, r1, r2}
 800854a:	6020      	str	r0, [r4, #0]
 800854c:	6061      	str	r1, [r4, #4]
 800854e:	60a2      	str	r2, [r4, #8]
 8008550:	881b      	ldrh	r3, [r3, #0]
 8008552:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade, "7B");
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	33cc      	adds	r3, #204	; 0xcc
 8008558:	4ab0      	ldr	r2, [pc, #704]	; (800881c <problem_fetch+0x74fc>)
 800855a:	8811      	ldrh	r1, [r2, #0]
 800855c:	7892      	ldrb	r2, [r2, #2]
 800855e:	8019      	strh	r1, [r3, #0]
 8008560:	709a      	strb	r2, [r3, #2]
			break;
 8008562:	f012 bc23 	b.w	801adac <problem_fetch+0x19a8c>
		case 284 :
			strcpy(p->name,"FORSØK 25");
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	337c      	adds	r3, #124	; 0x7c
 800856a:	49ad      	ldr	r1, [pc, #692]	; (8008820 <problem_fetch+0x7500>)
 800856c:	461a      	mov	r2, r3
 800856e:	460b      	mov	r3, r1
 8008570:	cb03      	ldmia	r3!, {r0, r1}
 8008572:	6010      	str	r0, [r2, #0]
 8008574:	6051      	str	r1, [r2, #4]
 8008576:	8819      	ldrh	r1, [r3, #0]
 8008578:	789b      	ldrb	r3, [r3, #2]
 800857a:	8111      	strh	r1, [r2, #8]
 800857c:	7293      	strb	r3, [r2, #10]
			p->moveSize = 8;
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	2208      	movs	r2, #8
 8008582:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"A,C,D,E,E,E,H,J");
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	3340      	adds	r3, #64	; 0x40
 8008588:	4aa6      	ldr	r2, [pc, #664]	; (8008824 <problem_fetch+0x7504>)
 800858a:	461c      	mov	r4, r3
 800858c:	4615      	mov	r5, r2
 800858e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008590:	6020      	str	r0, [r4, #0]
 8008592:	6061      	str	r1, [r4, #4]
 8008594:	60a2      	str	r2, [r4, #8]
 8008596:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"14,5,18,6,8,12,8,5");
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	3304      	adds	r3, #4
 800859c:	4aa2      	ldr	r2, [pc, #648]	; (8008828 <problem_fetch+0x7508>)
 800859e:	461d      	mov	r5, r3
 80085a0:	4614      	mov	r4, r2
 80085a2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80085a4:	6028      	str	r0, [r5, #0]
 80085a6:	6069      	str	r1, [r5, #4]
 80085a8:	60aa      	str	r2, [r5, #8]
 80085aa:	60eb      	str	r3, [r5, #12]
 80085ac:	8823      	ldrh	r3, [r4, #0]
 80085ae:	78a2      	ldrb	r2, [r4, #2]
 80085b0:	822b      	strh	r3, [r5, #16]
 80085b2:	4613      	mov	r3, r2
 80085b4:	74ab      	strb	r3, [r5, #18]
			strcpy(p->startFinish, "d,s,e,s,d,d,d,d");
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	33d8      	adds	r3, #216	; 0xd8
 80085ba:	4a9c      	ldr	r2, [pc, #624]	; (800882c <problem_fetch+0x750c>)
 80085bc:	461c      	mov	r4, r3
 80085be:	4615      	mov	r5, r2
 80085c0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80085c2:	6020      	str	r0, [r4, #0]
 80085c4:	6061      	str	r1, [r4, #4]
 80085c6:	60a2      	str	r2, [r4, #8]
 80085c8:	60e3      	str	r3, [r4, #12]
			strcpy(p->grade, "6B+");
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	33cc      	adds	r3, #204	; 0xcc
 80085ce:	4a98      	ldr	r2, [pc, #608]	; (8008830 <problem_fetch+0x7510>)
 80085d0:	6810      	ldr	r0, [r2, #0]
 80085d2:	6018      	str	r0, [r3, #0]
			break;
 80085d4:	f012 bbea 	b.w	801adac <problem_fetch+0x19a8c>
		case 285 :
			strcpy(p->name,"PONTUSBADET");
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	337c      	adds	r3, #124	; 0x7c
 80085dc:	4a95      	ldr	r2, [pc, #596]	; (8008834 <problem_fetch+0x7514>)
 80085de:	461c      	mov	r4, r3
 80085e0:	4613      	mov	r3, r2
 80085e2:	cb07      	ldmia	r3!, {r0, r1, r2}
 80085e4:	6020      	str	r0, [r4, #0]
 80085e6:	6061      	str	r1, [r4, #4]
 80085e8:	60a2      	str	r2, [r4, #8]
			p->moveSize = 7;
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	2207      	movs	r2, #7
 80085ee:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"J,E,I,H,J,H,I");
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	3340      	adds	r3, #64	; 0x40
 80085f4:	4a90      	ldr	r2, [pc, #576]	; (8008838 <problem_fetch+0x7518>)
 80085f6:	461c      	mov	r4, r3
 80085f8:	4613      	mov	r3, r2
 80085fa:	cb07      	ldmia	r3!, {r0, r1, r2}
 80085fc:	6020      	str	r0, [r4, #0]
 80085fe:	6061      	str	r1, [r4, #4]
 8008600:	60a2      	str	r2, [r4, #8]
 8008602:	881b      	ldrh	r3, [r3, #0]
 8008604:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,8,9,12,12,16,18");
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	3304      	adds	r3, #4
 800860a:	4a8c      	ldr	r2, [pc, #560]	; (800883c <problem_fetch+0x751c>)
 800860c:	461d      	mov	r5, r3
 800860e:	4614      	mov	r4, r2
 8008610:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008612:	6028      	str	r0, [r5, #0]
 8008614:	6069      	str	r1, [r5, #4]
 8008616:	60aa      	str	r2, [r5, #8]
 8008618:	60eb      	str	r3, [r5, #12]
 800861a:	8823      	ldrh	r3, [r4, #0]
 800861c:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish, "s,d,d,d,d,d,e");
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	33d8      	adds	r3, #216	; 0xd8
 8008622:	4a87      	ldr	r2, [pc, #540]	; (8008840 <problem_fetch+0x7520>)
 8008624:	461c      	mov	r4, r3
 8008626:	4613      	mov	r3, r2
 8008628:	cb07      	ldmia	r3!, {r0, r1, r2}
 800862a:	6020      	str	r0, [r4, #0]
 800862c:	6061      	str	r1, [r4, #4]
 800862e:	60a2      	str	r2, [r4, #8]
 8008630:	881b      	ldrh	r3, [r3, #0]
 8008632:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade, "7A");
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	33cc      	adds	r3, #204	; 0xcc
 8008638:	4a82      	ldr	r2, [pc, #520]	; (8008844 <problem_fetch+0x7524>)
 800863a:	8811      	ldrh	r1, [r2, #0]
 800863c:	7892      	ldrb	r2, [r2, #2]
 800863e:	8019      	strh	r1, [r3, #0]
 8008640:	709a      	strb	r2, [r3, #2]
			break;
 8008642:	f012 bbb3 	b.w	801adac <problem_fetch+0x19a8c>
		case 286 :
			strcpy(p->name,"ROSA PARKS");
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	337c      	adds	r3, #124	; 0x7c
 800864a:	497f      	ldr	r1, [pc, #508]	; (8008848 <problem_fetch+0x7528>)
 800864c:	461a      	mov	r2, r3
 800864e:	460b      	mov	r3, r1
 8008650:	cb03      	ldmia	r3!, {r0, r1}
 8008652:	6010      	str	r0, [r2, #0]
 8008654:	6051      	str	r1, [r2, #4]
 8008656:	8819      	ldrh	r1, [r3, #0]
 8008658:	789b      	ldrb	r3, [r3, #2]
 800865a:	8111      	strh	r1, [r2, #8]
 800865c:	7293      	strb	r3, [r2, #10]
			p->moveSize = 7;
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	2207      	movs	r2, #7
 8008662:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"G,J,D,C,H,G,A");
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	3340      	adds	r3, #64	; 0x40
 8008668:	4a78      	ldr	r2, [pc, #480]	; (800884c <problem_fetch+0x752c>)
 800866a:	461c      	mov	r4, r3
 800866c:	4613      	mov	r3, r2
 800866e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8008670:	6020      	str	r0, [r4, #0]
 8008672:	6061      	str	r1, [r4, #4]
 8008674:	60a2      	str	r2, [r4, #8]
 8008676:	881b      	ldrh	r3, [r3, #0]
 8008678:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,7,15,13,10,9,18");
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	3304      	adds	r3, #4
 800867e:	4a74      	ldr	r2, [pc, #464]	; (8008850 <problem_fetch+0x7530>)
 8008680:	461d      	mov	r5, r3
 8008682:	4614      	mov	r4, r2
 8008684:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008686:	6028      	str	r0, [r5, #0]
 8008688:	6069      	str	r1, [r5, #4]
 800868a:	60aa      	str	r2, [r5, #8]
 800868c:	60eb      	str	r3, [r5, #12]
 800868e:	8823      	ldrh	r3, [r4, #0]
 8008690:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish, "s,d,d,d,d,d,e");
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	33d8      	adds	r3, #216	; 0xd8
 8008696:	4a6a      	ldr	r2, [pc, #424]	; (8008840 <problem_fetch+0x7520>)
 8008698:	461c      	mov	r4, r3
 800869a:	4613      	mov	r3, r2
 800869c:	cb07      	ldmia	r3!, {r0, r1, r2}
 800869e:	6020      	str	r0, [r4, #0]
 80086a0:	6061      	str	r1, [r4, #4]
 80086a2:	60a2      	str	r2, [r4, #8]
 80086a4:	881b      	ldrh	r3, [r3, #0]
 80086a6:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade, "6C");
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	33cc      	adds	r3, #204	; 0xcc
 80086ac:	4a69      	ldr	r2, [pc, #420]	; (8008854 <problem_fetch+0x7534>)
 80086ae:	8811      	ldrh	r1, [r2, #0]
 80086b0:	7892      	ldrb	r2, [r2, #2]
 80086b2:	8019      	strh	r1, [r3, #0]
 80086b4:	709a      	strb	r2, [r3, #2]
			break;
 80086b6:	f012 bb79 	b.w	801adac <problem_fetch+0x19a8c>
		case 287 :
			strcpy(p->name,"PONTUSBADET 2");
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	337c      	adds	r3, #124	; 0x7c
 80086be:	4a66      	ldr	r2, [pc, #408]	; (8008858 <problem_fetch+0x7538>)
 80086c0:	461c      	mov	r4, r3
 80086c2:	4613      	mov	r3, r2
 80086c4:	cb07      	ldmia	r3!, {r0, r1, r2}
 80086c6:	6020      	str	r0, [r4, #0]
 80086c8:	6061      	str	r1, [r4, #4]
 80086ca:	60a2      	str	r2, [r4, #8]
 80086cc:	881b      	ldrh	r3, [r3, #0]
 80086ce:	81a3      	strh	r3, [r4, #12]
			p->moveSize = 8;
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	2208      	movs	r2, #8
 80086d4:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"J,E,E,C,I,G,G,D");
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	3340      	adds	r3, #64	; 0x40
 80086da:	4a60      	ldr	r2, [pc, #384]	; (800885c <problem_fetch+0x753c>)
 80086dc:	461c      	mov	r4, r3
 80086de:	4615      	mov	r5, r2
 80086e0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80086e2:	6020      	str	r0, [r4, #0]
 80086e4:	6061      	str	r1, [r4, #4]
 80086e6:	60a2      	str	r2, [r4, #8]
 80086e8:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,8,12,13,14,15,17,18");
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	3304      	adds	r3, #4
 80086ee:	4a5c      	ldr	r2, [pc, #368]	; (8008860 <problem_fetch+0x7540>)
 80086f0:	461d      	mov	r5, r3
 80086f2:	4614      	mov	r4, r2
 80086f4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80086f6:	6028      	str	r0, [r5, #0]
 80086f8:	6069      	str	r1, [r5, #4]
 80086fa:	60aa      	str	r2, [r5, #8]
 80086fc:	60eb      	str	r3, [r5, #12]
 80086fe:	6820      	ldr	r0, [r4, #0]
 8008700:	6128      	str	r0, [r5, #16]
 8008702:	88a3      	ldrh	r3, [r4, #4]
 8008704:	82ab      	strh	r3, [r5, #20]
			strcpy(p->startFinish, "s,d,d,d,d,d,d,e");
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	33d8      	adds	r3, #216	; 0xd8
 800870a:	4a56      	ldr	r2, [pc, #344]	; (8008864 <problem_fetch+0x7544>)
 800870c:	461c      	mov	r4, r3
 800870e:	4615      	mov	r5, r2
 8008710:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008712:	6020      	str	r0, [r4, #0]
 8008714:	6061      	str	r1, [r4, #4]
 8008716:	60a2      	str	r2, [r4, #8]
 8008718:	60e3      	str	r3, [r4, #12]
			strcpy(p->grade, "6C");
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	33cc      	adds	r3, #204	; 0xcc
 800871e:	4a4d      	ldr	r2, [pc, #308]	; (8008854 <problem_fetch+0x7534>)
 8008720:	8811      	ldrh	r1, [r2, #0]
 8008722:	7892      	ldrb	r2, [r2, #2]
 8008724:	8019      	strh	r1, [r3, #0]
 8008726:	709a      	strb	r2, [r3, #2]
			break;
 8008728:	f012 bb40 	b.w	801adac <problem_fetch+0x19a8c>
		case 288 :
			strcpy(p->name,"L'UOMO BISATTA");
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	337c      	adds	r3, #124	; 0x7c
 8008730:	4a4d      	ldr	r2, [pc, #308]	; (8008868 <problem_fetch+0x7548>)
 8008732:	461c      	mov	r4, r3
 8008734:	4613      	mov	r3, r2
 8008736:	cb07      	ldmia	r3!, {r0, r1, r2}
 8008738:	6020      	str	r0, [r4, #0]
 800873a:	6061      	str	r1, [r4, #4]
 800873c:	60a2      	str	r2, [r4, #8]
 800873e:	881a      	ldrh	r2, [r3, #0]
 8008740:	789b      	ldrb	r3, [r3, #2]
 8008742:	81a2      	strh	r2, [r4, #12]
 8008744:	73a3      	strb	r3, [r4, #14]
			p->moveSize = 7;
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	2207      	movs	r2, #7
 800874a:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"J,G,G,H,C,H,D");
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	3340      	adds	r3, #64	; 0x40
 8008750:	4a46      	ldr	r2, [pc, #280]	; (800886c <problem_fetch+0x754c>)
 8008752:	461c      	mov	r4, r3
 8008754:	4613      	mov	r3, r2
 8008756:	cb07      	ldmia	r3!, {r0, r1, r2}
 8008758:	6020      	str	r0, [r4, #0]
 800875a:	6061      	str	r1, [r4, #4]
 800875c:	60a2      	str	r2, [r4, #8]
 800875e:	881b      	ldrh	r3, [r3, #0]
 8008760:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,6,9,12,8,16,18");
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	3304      	adds	r3, #4
 8008766:	4a42      	ldr	r2, [pc, #264]	; (8008870 <problem_fetch+0x7550>)
 8008768:	461d      	mov	r5, r3
 800876a:	4614      	mov	r4, r2
 800876c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800876e:	6028      	str	r0, [r5, #0]
 8008770:	6069      	str	r1, [r5, #4]
 8008772:	60aa      	str	r2, [r5, #8]
 8008774:	60eb      	str	r3, [r5, #12]
 8008776:	7823      	ldrb	r3, [r4, #0]
 8008778:	742b      	strb	r3, [r5, #16]
			strcpy(p->startFinish, "s,s,d,d,d,d,e");
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	33d8      	adds	r3, #216	; 0xd8
 800877e:	4a26      	ldr	r2, [pc, #152]	; (8008818 <problem_fetch+0x74f8>)
 8008780:	461c      	mov	r4, r3
 8008782:	4613      	mov	r3, r2
 8008784:	cb07      	ldmia	r3!, {r0, r1, r2}
 8008786:	6020      	str	r0, [r4, #0]
 8008788:	6061      	str	r1, [r4, #4]
 800878a:	60a2      	str	r2, [r4, #8]
 800878c:	881b      	ldrh	r3, [r3, #0]
 800878e:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade, "7B");
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	33cc      	adds	r3, #204	; 0xcc
 8008794:	4a21      	ldr	r2, [pc, #132]	; (800881c <problem_fetch+0x74fc>)
 8008796:	8811      	ldrh	r1, [r2, #0]
 8008798:	7892      	ldrb	r2, [r2, #2]
 800879a:	8019      	strh	r1, [r3, #0]
 800879c:	709a      	strb	r2, [r3, #2]
			break;
 800879e:	f012 bb05 	b.w	801adac <problem_fetch+0x19a8c>
		case 289 :
			strcpy(p->name,"WARM UP A6");
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	337c      	adds	r3, #124	; 0x7c
 80087a6:	4933      	ldr	r1, [pc, #204]	; (8008874 <problem_fetch+0x7554>)
 80087a8:	461a      	mov	r2, r3
 80087aa:	460b      	mov	r3, r1
 80087ac:	cb03      	ldmia	r3!, {r0, r1}
 80087ae:	6010      	str	r0, [r2, #0]
 80087b0:	6051      	str	r1, [r2, #4]
 80087b2:	8819      	ldrh	r1, [r3, #0]
 80087b4:	789b      	ldrb	r3, [r3, #2]
 80087b6:	8111      	strh	r1, [r2, #8]
 80087b8:	7293      	strb	r3, [r2, #10]
			p->moveSize = 5;
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	2205      	movs	r2, #5
 80087be:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"G,J,I,I,I");
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	3340      	adds	r3, #64	; 0x40
 80087c4:	492c      	ldr	r1, [pc, #176]	; (8008878 <problem_fetch+0x7558>)
 80087c6:	461a      	mov	r2, r3
 80087c8:	460b      	mov	r3, r1
 80087ca:	cb03      	ldmia	r3!, {r0, r1}
 80087cc:	6010      	str	r0, [r2, #0]
 80087ce:	6051      	str	r1, [r2, #4]
 80087d0:	881b      	ldrh	r3, [r3, #0]
 80087d2:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"4,7,10,14,18");
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	3304      	adds	r3, #4
 80087d8:	4a28      	ldr	r2, [pc, #160]	; (800887c <problem_fetch+0x755c>)
 80087da:	461c      	mov	r4, r3
 80087dc:	4613      	mov	r3, r2
 80087de:	cb07      	ldmia	r3!, {r0, r1, r2}
 80087e0:	6020      	str	r0, [r4, #0]
 80087e2:	6061      	str	r1, [r4, #4]
 80087e4:	60a2      	str	r2, [r4, #8]
 80087e6:	781b      	ldrb	r3, [r3, #0]
 80087e8:	7323      	strb	r3, [r4, #12]
			strcpy(p->startFinish, "s,d,d,d,e");
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	33d8      	adds	r3, #216	; 0xd8
 80087ee:	4924      	ldr	r1, [pc, #144]	; (8008880 <problem_fetch+0x7560>)
 80087f0:	461a      	mov	r2, r3
 80087f2:	460b      	mov	r3, r1
 80087f4:	cb03      	ldmia	r3!, {r0, r1}
 80087f6:	6010      	str	r0, [r2, #0]
 80087f8:	6051      	str	r1, [r2, #4]
 80087fa:	881b      	ldrh	r3, [r3, #0]
 80087fc:	8113      	strh	r3, [r2, #8]
			strcpy(p->grade, "6B+");
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	33cc      	adds	r3, #204	; 0xcc
 8008802:	4a0b      	ldr	r2, [pc, #44]	; (8008830 <problem_fetch+0x7510>)
 8008804:	6810      	ldr	r0, [r2, #0]
 8008806:	6018      	str	r0, [r3, #0]
			break;
 8008808:	f012 bad0 	b.w	801adac <problem_fetch+0x19a8c>
 800880c:	08023a34 	.word	0x08023a34
 8008810:	08023a38 	.word	0x08023a38
 8008814:	08023a48 	.word	0x08023a48
 8008818:	080212a0 	.word	0x080212a0
 800881c:	0802132c 	.word	0x0802132c
 8008820:	08023a5c 	.word	0x08023a5c
 8008824:	08023a68 	.word	0x08023a68
 8008828:	08023a78 	.word	0x08023a78
 800882c:	08023a8c 	.word	0x08023a8c
 8008830:	080212b0 	.word	0x080212b0
 8008834:	08023a9c 	.word	0x08023a9c
 8008838:	08023aa8 	.word	0x08023aa8
 800883c:	08023ab8 	.word	0x08023ab8
 8008840:	08021494 	.word	0x08021494
 8008844:	080212f4 	.word	0x080212f4
 8008848:	08023acc 	.word	0x08023acc
 800884c:	08023ad8 	.word	0x08023ad8
 8008850:	08023ae8 	.word	0x08023ae8
 8008854:	08021370 	.word	0x08021370
 8008858:	08023afc 	.word	0x08023afc
 800885c:	08023b0c 	.word	0x08023b0c
 8008860:	08023b1c 	.word	0x08023b1c
 8008864:	08021458 	.word	0x08021458
 8008868:	08023b34 	.word	0x08023b34
 800886c:	08023b44 	.word	0x08023b44
 8008870:	08023b54 	.word	0x08023b54
 8008874:	08023b68 	.word	0x08023b68
 8008878:	08023b74 	.word	0x08023b74
 800887c:	08023b80 	.word	0x08023b80
 8008880:	08021320 	.word	0x08021320
		case 29 :
			strcpy(p->name,"ACG5");
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	337c      	adds	r3, #124	; 0x7c
 8008888:	4ab4      	ldr	r2, [pc, #720]	; (8008b5c <problem_fetch+0x783c>)
 800888a:	6810      	ldr	r0, [r2, #0]
 800888c:	6018      	str	r0, [r3, #0]
 800888e:	7912      	ldrb	r2, [r2, #4]
 8008890:	711a      	strb	r2, [r3, #4]
			p->moveSize = 8;
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	2208      	movs	r2, #8
 8008896:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"H,C,E,B,E,E,H,D");
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	3340      	adds	r3, #64	; 0x40
 800889c:	4ab0      	ldr	r2, [pc, #704]	; (8008b60 <problem_fetch+0x7840>)
 800889e:	461c      	mov	r4, r3
 80088a0:	4615      	mov	r5, r2
 80088a2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80088a4:	6020      	str	r0, [r4, #0]
 80088a6:	6061      	str	r1, [r4, #4]
 80088a8:	60a2      	str	r2, [r4, #8]
 80088aa:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,5,8,10,12,14,16,18");
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	3304      	adds	r3, #4
 80088b0:	4aac      	ldr	r2, [pc, #688]	; (8008b64 <problem_fetch+0x7844>)
 80088b2:	461d      	mov	r5, r3
 80088b4:	4614      	mov	r4, r2
 80088b6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80088b8:	6028      	str	r0, [r5, #0]
 80088ba:	6069      	str	r1, [r5, #4]
 80088bc:	60aa      	str	r2, [r5, #8]
 80088be:	60eb      	str	r3, [r5, #12]
 80088c0:	6820      	ldr	r0, [r4, #0]
 80088c2:	6128      	str	r0, [r5, #16]
 80088c4:	7923      	ldrb	r3, [r4, #4]
 80088c6:	752b      	strb	r3, [r5, #20]
			strcpy(p->startFinish, "s,s,d,d,d,d,d,e");
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	33d8      	adds	r3, #216	; 0xd8
 80088cc:	4aa6      	ldr	r2, [pc, #664]	; (8008b68 <problem_fetch+0x7848>)
 80088ce:	461c      	mov	r4, r3
 80088d0:	4615      	mov	r5, r2
 80088d2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80088d4:	6020      	str	r0, [r4, #0]
 80088d6:	6061      	str	r1, [r4, #4]
 80088d8:	60a2      	str	r2, [r4, #8]
 80088da:	60e3      	str	r3, [r4, #12]
			strcpy(p->grade, "6B+");
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	33cc      	adds	r3, #204	; 0xcc
 80088e0:	4aa2      	ldr	r2, [pc, #648]	; (8008b6c <problem_fetch+0x784c>)
 80088e2:	6810      	ldr	r0, [r2, #0]
 80088e4:	6018      	str	r0, [r3, #0]
			break;
 80088e6:	f012 ba61 	b.w	801adac <problem_fetch+0x19a8c>
		case 290 :
			strcpy(p->name,"BOUNCE EZ");
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	337c      	adds	r3, #124	; 0x7c
 80088ee:	49a0      	ldr	r1, [pc, #640]	; (8008b70 <problem_fetch+0x7850>)
 80088f0:	461a      	mov	r2, r3
 80088f2:	460b      	mov	r3, r1
 80088f4:	cb03      	ldmia	r3!, {r0, r1}
 80088f6:	6010      	str	r0, [r2, #0]
 80088f8:	6051      	str	r1, [r2, #4]
 80088fa:	881b      	ldrh	r3, [r3, #0]
 80088fc:	8113      	strh	r3, [r2, #8]
			p->moveSize = 5;
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	2205      	movs	r2, #5
 8008902:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"E,J,H,C,D");
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	3340      	adds	r3, #64	; 0x40
 8008908:	499a      	ldr	r1, [pc, #616]	; (8008b74 <problem_fetch+0x7854>)
 800890a:	461a      	mov	r2, r3
 800890c:	460b      	mov	r3, r1
 800890e:	cb03      	ldmia	r3!, {r0, r1}
 8008910:	6010      	str	r0, [r2, #0]
 8008912:	6051      	str	r1, [r2, #4]
 8008914:	881b      	ldrh	r3, [r3, #0]
 8008916:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"6,5,10,13,18");
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	3304      	adds	r3, #4
 800891c:	4a96      	ldr	r2, [pc, #600]	; (8008b78 <problem_fetch+0x7858>)
 800891e:	461c      	mov	r4, r3
 8008920:	4613      	mov	r3, r2
 8008922:	cb07      	ldmia	r3!, {r0, r1, r2}
 8008924:	6020      	str	r0, [r4, #0]
 8008926:	6061      	str	r1, [r4, #4]
 8008928:	60a2      	str	r2, [r4, #8]
 800892a:	781b      	ldrb	r3, [r3, #0]
 800892c:	7323      	strb	r3, [r4, #12]
			strcpy(p->startFinish, "s,s,d,d,e");
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	33d8      	adds	r3, #216	; 0xd8
 8008932:	4992      	ldr	r1, [pc, #584]	; (8008b7c <problem_fetch+0x785c>)
 8008934:	461a      	mov	r2, r3
 8008936:	460b      	mov	r3, r1
 8008938:	cb03      	ldmia	r3!, {r0, r1}
 800893a:	6010      	str	r0, [r2, #0]
 800893c:	6051      	str	r1, [r2, #4]
 800893e:	881b      	ldrh	r3, [r3, #0]
 8008940:	8113      	strh	r3, [r2, #8]
			strcpy(p->grade, "6C+");
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	33cc      	adds	r3, #204	; 0xcc
 8008946:	4a8e      	ldr	r2, [pc, #568]	; (8008b80 <problem_fetch+0x7860>)
 8008948:	6810      	ldr	r0, [r2, #0]
 800894a:	6018      	str	r0, [r3, #0]
			break;
 800894c:	f012 ba2e 	b.w	801adac <problem_fetch+0x19a8c>
		case 291 :
			strcpy(p->name,"SEX LANCHEZ");
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	337c      	adds	r3, #124	; 0x7c
 8008954:	4a8b      	ldr	r2, [pc, #556]	; (8008b84 <problem_fetch+0x7864>)
 8008956:	461c      	mov	r4, r3
 8008958:	4613      	mov	r3, r2
 800895a:	cb07      	ldmia	r3!, {r0, r1, r2}
 800895c:	6020      	str	r0, [r4, #0]
 800895e:	6061      	str	r1, [r4, #4]
 8008960:	60a2      	str	r2, [r4, #8]
			p->moveSize = 4;
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	2204      	movs	r2, #4
 8008966:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"G,E,G,D");
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	3340      	adds	r3, #64	; 0x40
 800896c:	4986      	ldr	r1, [pc, #536]	; (8008b88 <problem_fetch+0x7868>)
 800896e:	461a      	mov	r2, r3
 8008970:	460b      	mov	r3, r1
 8008972:	cb03      	ldmia	r3!, {r0, r1}
 8008974:	6010      	str	r0, [r2, #0]
 8008976:	6051      	str	r1, [r2, #4]
			strcpy(p->moveNumbers,"4,8,14,18");
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	3304      	adds	r3, #4
 800897c:	4983      	ldr	r1, [pc, #524]	; (8008b8c <problem_fetch+0x786c>)
 800897e:	461a      	mov	r2, r3
 8008980:	460b      	mov	r3, r1
 8008982:	cb03      	ldmia	r3!, {r0, r1}
 8008984:	6010      	str	r0, [r2, #0]
 8008986:	6051      	str	r1, [r2, #4]
 8008988:	881b      	ldrh	r3, [r3, #0]
 800898a:	8113      	strh	r3, [r2, #8]
			strcpy(p->startFinish, "s,d,d,e");
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	33d8      	adds	r3, #216	; 0xd8
 8008990:	497f      	ldr	r1, [pc, #508]	; (8008b90 <problem_fetch+0x7870>)
 8008992:	461a      	mov	r2, r3
 8008994:	460b      	mov	r3, r1
 8008996:	cb03      	ldmia	r3!, {r0, r1}
 8008998:	6010      	str	r0, [r2, #0]
 800899a:	6051      	str	r1, [r2, #4]
			strcpy(p->grade, "7C+");
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	33cc      	adds	r3, #204	; 0xcc
 80089a0:	4a7c      	ldr	r2, [pc, #496]	; (8008b94 <problem_fetch+0x7874>)
 80089a2:	6810      	ldr	r0, [r2, #0]
 80089a4:	6018      	str	r0, [r3, #0]
			break;
 80089a6:	f012 ba01 	b.w	801adac <problem_fetch+0x19a8c>
		case 292 :
			strcpy(p->name,"YAY POCKETS!");
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	337c      	adds	r3, #124	; 0x7c
 80089ae:	4a7a      	ldr	r2, [pc, #488]	; (8008b98 <problem_fetch+0x7878>)
 80089b0:	461c      	mov	r4, r3
 80089b2:	4613      	mov	r3, r2
 80089b4:	cb07      	ldmia	r3!, {r0, r1, r2}
 80089b6:	6020      	str	r0, [r4, #0]
 80089b8:	6061      	str	r1, [r4, #4]
 80089ba:	60a2      	str	r2, [r4, #8]
 80089bc:	781b      	ldrb	r3, [r3, #0]
 80089be:	7323      	strb	r3, [r4, #12]
			p->moveSize = 7;
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	2207      	movs	r2, #7
 80089c4:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"B,C,E,B,E,B,D");
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	3340      	adds	r3, #64	; 0x40
 80089ca:	4a74      	ldr	r2, [pc, #464]	; (8008b9c <problem_fetch+0x787c>)
 80089cc:	461c      	mov	r4, r3
 80089ce:	4613      	mov	r3, r2
 80089d0:	cb07      	ldmia	r3!, {r0, r1, r2}
 80089d2:	6020      	str	r0, [r4, #0]
 80089d4:	6061      	str	r1, [r4, #4]
 80089d6:	60a2      	str	r2, [r4, #8]
 80089d8:	881b      	ldrh	r3, [r3, #0]
 80089da:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"6,5,8,10,12,15,18");
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	3304      	adds	r3, #4
 80089e0:	4a6f      	ldr	r2, [pc, #444]	; (8008ba0 <problem_fetch+0x7880>)
 80089e2:	461d      	mov	r5, r3
 80089e4:	4614      	mov	r4, r2
 80089e6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80089e8:	6028      	str	r0, [r5, #0]
 80089ea:	6069      	str	r1, [r5, #4]
 80089ec:	60aa      	str	r2, [r5, #8]
 80089ee:	60eb      	str	r3, [r5, #12]
 80089f0:	8823      	ldrh	r3, [r4, #0]
 80089f2:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish, "s,s,d,d,d,d,e");
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	33d8      	adds	r3, #216	; 0xd8
 80089f8:	4a6a      	ldr	r2, [pc, #424]	; (8008ba4 <problem_fetch+0x7884>)
 80089fa:	461c      	mov	r4, r3
 80089fc:	4613      	mov	r3, r2
 80089fe:	cb07      	ldmia	r3!, {r0, r1, r2}
 8008a00:	6020      	str	r0, [r4, #0]
 8008a02:	6061      	str	r1, [r4, #4]
 8008a04:	60a2      	str	r2, [r4, #8]
 8008a06:	881b      	ldrh	r3, [r3, #0]
 8008a08:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade, "6C");
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	33cc      	adds	r3, #204	; 0xcc
 8008a0e:	4a66      	ldr	r2, [pc, #408]	; (8008ba8 <problem_fetch+0x7888>)
 8008a10:	8811      	ldrh	r1, [r2, #0]
 8008a12:	7892      	ldrb	r2, [r2, #2]
 8008a14:	8019      	strh	r1, [r3, #0]
 8008a16:	709a      	strb	r2, [r3, #2]
			break;
 8008a18:	f012 b9c8 	b.w	801adac <problem_fetch+0x19a8c>
		case 293 :
			strcpy(p->name,"MORNING SHAKE");
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	337c      	adds	r3, #124	; 0x7c
 8008a20:	4a62      	ldr	r2, [pc, #392]	; (8008bac <problem_fetch+0x788c>)
 8008a22:	461c      	mov	r4, r3
 8008a24:	4613      	mov	r3, r2
 8008a26:	cb07      	ldmia	r3!, {r0, r1, r2}
 8008a28:	6020      	str	r0, [r4, #0]
 8008a2a:	6061      	str	r1, [r4, #4]
 8008a2c:	60a2      	str	r2, [r4, #8]
 8008a2e:	881b      	ldrh	r3, [r3, #0]
 8008a30:	81a3      	strh	r3, [r4, #12]
			p->moveSize = 6;
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	2206      	movs	r2, #6
 8008a36:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"G,E,E,B,D,D");
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	3340      	adds	r3, #64	; 0x40
 8008a3c:	4a5c      	ldr	r2, [pc, #368]	; (8008bb0 <problem_fetch+0x7890>)
 8008a3e:	461c      	mov	r4, r3
 8008a40:	4613      	mov	r3, r2
 8008a42:	cb07      	ldmia	r3!, {r0, r1, r2}
 8008a44:	6020      	str	r0, [r4, #0]
 8008a46:	6061      	str	r1, [r4, #4]
 8008a48:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,8,9,12,15,18");
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	3304      	adds	r3, #4
 8008a4e:	4a59      	ldr	r2, [pc, #356]	; (8008bb4 <problem_fetch+0x7894>)
 8008a50:	461c      	mov	r4, r3
 8008a52:	4613      	mov	r3, r2
 8008a54:	cb07      	ldmia	r3!, {r0, r1, r2}
 8008a56:	6020      	str	r0, [r4, #0]
 8008a58:	6061      	str	r1, [r4, #4]
 8008a5a:	60a2      	str	r2, [r4, #8]
 8008a5c:	881a      	ldrh	r2, [r3, #0]
 8008a5e:	789b      	ldrb	r3, [r3, #2]
 8008a60:	81a2      	strh	r2, [r4, #12]
 8008a62:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish, "s,d,d,d,d,e");
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	33d8      	adds	r3, #216	; 0xd8
 8008a68:	4a53      	ldr	r2, [pc, #332]	; (8008bb8 <problem_fetch+0x7898>)
 8008a6a:	461c      	mov	r4, r3
 8008a6c:	4613      	mov	r3, r2
 8008a6e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8008a70:	6020      	str	r0, [r4, #0]
 8008a72:	6061      	str	r1, [r4, #4]
 8008a74:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade, "6C+");
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	33cc      	adds	r3, #204	; 0xcc
 8008a7a:	4a41      	ldr	r2, [pc, #260]	; (8008b80 <problem_fetch+0x7860>)
 8008a7c:	6810      	ldr	r0, [r2, #0]
 8008a7e:	6018      	str	r0, [r3, #0]
			break;
 8008a80:	f012 b994 	b.w	801adac <problem_fetch+0x19a8c>
		case 294 :
			strcpy(p->name,"BOULDER AND EMIKO");
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	337c      	adds	r3, #124	; 0x7c
 8008a88:	4a4c      	ldr	r2, [pc, #304]	; (8008bbc <problem_fetch+0x789c>)
 8008a8a:	461d      	mov	r5, r3
 8008a8c:	4614      	mov	r4, r2
 8008a8e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008a90:	6028      	str	r0, [r5, #0]
 8008a92:	6069      	str	r1, [r5, #4]
 8008a94:	60aa      	str	r2, [r5, #8]
 8008a96:	60eb      	str	r3, [r5, #12]
 8008a98:	8823      	ldrh	r3, [r4, #0]
 8008a9a:	822b      	strh	r3, [r5, #16]
			p->moveSize = 8;
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	2208      	movs	r2, #8
 8008aa0:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"J,G,E,F,D,I,E,I");
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	3340      	adds	r3, #64	; 0x40
 8008aa6:	4a46      	ldr	r2, [pc, #280]	; (8008bc0 <problem_fetch+0x78a0>)
 8008aa8:	461c      	mov	r4, r3
 8008aaa:	4615      	mov	r5, r2
 8008aac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008aae:	6020      	str	r0, [r4, #0]
 8008ab0:	6061      	str	r1, [r4, #4]
 8008ab2:	60a2      	str	r2, [r4, #8]
 8008ab4:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,4,8,11,11,14,14,18");
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	3304      	adds	r3, #4
 8008aba:	4a42      	ldr	r2, [pc, #264]	; (8008bc4 <problem_fetch+0x78a4>)
 8008abc:	461d      	mov	r5, r3
 8008abe:	4614      	mov	r4, r2
 8008ac0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008ac2:	6028      	str	r0, [r5, #0]
 8008ac4:	6069      	str	r1, [r5, #4]
 8008ac6:	60aa      	str	r2, [r5, #8]
 8008ac8:	60eb      	str	r3, [r5, #12]
 8008aca:	6820      	ldr	r0, [r4, #0]
 8008acc:	6128      	str	r0, [r5, #16]
 8008ace:	7923      	ldrb	r3, [r4, #4]
 8008ad0:	752b      	strb	r3, [r5, #20]
			strcpy(p->startFinish, "s,s,d,d,d,d,d,e");
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	33d8      	adds	r3, #216	; 0xd8
 8008ad6:	4a24      	ldr	r2, [pc, #144]	; (8008b68 <problem_fetch+0x7848>)
 8008ad8:	461c      	mov	r4, r3
 8008ada:	4615      	mov	r5, r2
 8008adc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008ade:	6020      	str	r0, [r4, #0]
 8008ae0:	6061      	str	r1, [r4, #4]
 8008ae2:	60a2      	str	r2, [r4, #8]
 8008ae4:	60e3      	str	r3, [r4, #12]
			strcpy(p->grade, "6C+");
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	33cc      	adds	r3, #204	; 0xcc
 8008aea:	4a25      	ldr	r2, [pc, #148]	; (8008b80 <problem_fetch+0x7860>)
 8008aec:	6810      	ldr	r0, [r2, #0]
 8008aee:	6018      	str	r0, [r3, #0]
			break;
 8008af0:	f012 b95c 	b.w	801adac <problem_fetch+0x19a8c>
		case 295 :
			strcpy(p->name,"GREAT DANE ZANE");
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	337c      	adds	r3, #124	; 0x7c
 8008af8:	4a33      	ldr	r2, [pc, #204]	; (8008bc8 <problem_fetch+0x78a8>)
 8008afa:	461c      	mov	r4, r3
 8008afc:	4615      	mov	r5, r2
 8008afe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008b00:	6020      	str	r0, [r4, #0]
 8008b02:	6061      	str	r1, [r4, #4]
 8008b04:	60a2      	str	r2, [r4, #8]
 8008b06:	60e3      	str	r3, [r4, #12]
			p->moveSize = 8;
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	2208      	movs	r2, #8
 8008b0c:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"C,B,F,G,E,B,G,I");
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	3340      	adds	r3, #64	; 0x40
 8008b12:	4a2e      	ldr	r2, [pc, #184]	; (8008bcc <problem_fetch+0x78ac>)
 8008b14:	461c      	mov	r4, r3
 8008b16:	4615      	mov	r5, r2
 8008b18:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008b1a:	6020      	str	r0, [r4, #0]
 8008b1c:	6061      	str	r1, [r4, #4]
 8008b1e:	60a2      	str	r2, [r4, #8]
 8008b20:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,6,13,15,9,12,4,18");
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	3304      	adds	r3, #4
 8008b26:	4a2a      	ldr	r2, [pc, #168]	; (8008bd0 <problem_fetch+0x78b0>)
 8008b28:	461d      	mov	r5, r3
 8008b2a:	4614      	mov	r4, r2
 8008b2c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008b2e:	6028      	str	r0, [r5, #0]
 8008b30:	6069      	str	r1, [r5, #4]
 8008b32:	60aa      	str	r2, [r5, #8]
 8008b34:	60eb      	str	r3, [r5, #12]
 8008b36:	6820      	ldr	r0, [r4, #0]
 8008b38:	6128      	str	r0, [r5, #16]
			strcpy(p->startFinish, "s,s,d,d,d,d,d,e");
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	33d8      	adds	r3, #216	; 0xd8
 8008b3e:	4a0a      	ldr	r2, [pc, #40]	; (8008b68 <problem_fetch+0x7848>)
 8008b40:	461c      	mov	r4, r3
 8008b42:	4615      	mov	r5, r2
 8008b44:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008b46:	6020      	str	r0, [r4, #0]
 8008b48:	6061      	str	r1, [r4, #4]
 8008b4a:	60a2      	str	r2, [r4, #8]
 8008b4c:	60e3      	str	r3, [r4, #12]
			strcpy(p->grade, "7A+");
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	33cc      	adds	r3, #204	; 0xcc
 8008b52:	4a20      	ldr	r2, [pc, #128]	; (8008bd4 <problem_fetch+0x78b4>)
 8008b54:	6810      	ldr	r0, [r2, #0]
 8008b56:	6018      	str	r0, [r3, #0]
			break;
 8008b58:	f012 b928 	b.w	801adac <problem_fetch+0x19a8c>
 8008b5c:	08023b90 	.word	0x08023b90
 8008b60:	08023b98 	.word	0x08023b98
 8008b64:	08023ba8 	.word	0x08023ba8
 8008b68:	080214cc 	.word	0x080214cc
 8008b6c:	080212b0 	.word	0x080212b0
 8008b70:	08023bc0 	.word	0x08023bc0
 8008b74:	08023bcc 	.word	0x08023bcc
 8008b78:	08023bd8 	.word	0x08023bd8
 8008b7c:	080221c8 	.word	0x080221c8
 8008b80:	080213a8 	.word	0x080213a8
 8008b84:	08023be8 	.word	0x08023be8
 8008b88:	08023bf4 	.word	0x08023bf4
 8008b8c:	08023bfc 	.word	0x08023bfc
 8008b90:	08022028 	.word	0x08022028
 8008b94:	08023170 	.word	0x08023170
 8008b98:	08023c08 	.word	0x08023c08
 8008b9c:	08021544 	.word	0x08021544
 8008ba0:	08023c18 	.word	0x08023c18
 8008ba4:	080212a0 	.word	0x080212a0
 8008ba8:	08021370 	.word	0x08021370
 8008bac:	08023c2c 	.word	0x08023c2c
 8008bb0:	08023c3c 	.word	0x08023c3c
 8008bb4:	08023c48 	.word	0x08023c48
 8008bb8:	0802139c 	.word	0x0802139c
 8008bbc:	08023c58 	.word	0x08023c58
 8008bc0:	08023c6c 	.word	0x08023c6c
 8008bc4:	08023c7c 	.word	0x08023c7c
 8008bc8:	08023c94 	.word	0x08023c94
 8008bcc:	08023ca4 	.word	0x08023ca4
 8008bd0:	08023cb4 	.word	0x08023cb4
 8008bd4:	08021424 	.word	0x08021424
		case 296 :
			strcpy(p->name,"ANACONDA MALT LIQUOR");
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	337c      	adds	r3, #124	; 0x7c
 8008bdc:	4aba      	ldr	r2, [pc, #744]	; (8008ec8 <problem_fetch+0x7ba8>)
 8008bde:	461d      	mov	r5, r3
 8008be0:	4614      	mov	r4, r2
 8008be2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008be4:	6028      	str	r0, [r5, #0]
 8008be6:	6069      	str	r1, [r5, #4]
 8008be8:	60aa      	str	r2, [r5, #8]
 8008bea:	60eb      	str	r3, [r5, #12]
 8008bec:	6820      	ldr	r0, [r4, #0]
 8008bee:	6128      	str	r0, [r5, #16]
 8008bf0:	7923      	ldrb	r3, [r4, #4]
 8008bf2:	752b      	strb	r3, [r5, #20]
			p->moveSize = 6;
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	2206      	movs	r2, #6
 8008bf8:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"G,J,I,H,E,D");
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	3340      	adds	r3, #64	; 0x40
 8008bfe:	4ab3      	ldr	r2, [pc, #716]	; (8008ecc <problem_fetch+0x7bac>)
 8008c00:	461c      	mov	r4, r3
 8008c02:	4613      	mov	r3, r2
 8008c04:	cb07      	ldmia	r3!, {r0, r1, r2}
 8008c06:	6020      	str	r0, [r4, #0]
 8008c08:	6061      	str	r1, [r4, #4]
 8008c0a:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,5,14,10,16,18");
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	3304      	adds	r3, #4
 8008c10:	4aaf      	ldr	r2, [pc, #700]	; (8008ed0 <problem_fetch+0x7bb0>)
 8008c12:	461c      	mov	r4, r3
 8008c14:	4615      	mov	r5, r2
 8008c16:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008c18:	6020      	str	r0, [r4, #0]
 8008c1a:	6061      	str	r1, [r4, #4]
 8008c1c:	60a2      	str	r2, [r4, #8]
 8008c1e:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish, "s,s,d,d,d,e");
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	33d8      	adds	r3, #216	; 0xd8
 8008c24:	4aab      	ldr	r2, [pc, #684]	; (8008ed4 <problem_fetch+0x7bb4>)
 8008c26:	461c      	mov	r4, r3
 8008c28:	4613      	mov	r3, r2
 8008c2a:	cb07      	ldmia	r3!, {r0, r1, r2}
 8008c2c:	6020      	str	r0, [r4, #0]
 8008c2e:	6061      	str	r1, [r4, #4]
 8008c30:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade, "6B+");
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	33cc      	adds	r3, #204	; 0xcc
 8008c36:	4aa8      	ldr	r2, [pc, #672]	; (8008ed8 <problem_fetch+0x7bb8>)
 8008c38:	6810      	ldr	r0, [r2, #0]
 8008c3a:	6018      	str	r0, [r3, #0]
			break;
 8008c3c:	f012 b8b6 	b.w	801adac <problem_fetch+0x19a8c>
		case 297 :
			strcpy(p->name,"BLACK DOJO MINI");
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	337c      	adds	r3, #124	; 0x7c
 8008c44:	4aa5      	ldr	r2, [pc, #660]	; (8008edc <problem_fetch+0x7bbc>)
 8008c46:	461c      	mov	r4, r3
 8008c48:	4615      	mov	r5, r2
 8008c4a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008c4c:	6020      	str	r0, [r4, #0]
 8008c4e:	6061      	str	r1, [r4, #4]
 8008c50:	60a2      	str	r2, [r4, #8]
 8008c52:	60e3      	str	r3, [r4, #12]
			p->moveSize = 6;
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	2206      	movs	r2, #6
 8008c58:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"G,J,F,C,E,A");
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	3340      	adds	r3, #64	; 0x40
 8008c5e:	4aa0      	ldr	r2, [pc, #640]	; (8008ee0 <problem_fetch+0x7bc0>)
 8008c60:	461c      	mov	r4, r3
 8008c62:	4613      	mov	r3, r2
 8008c64:	cb07      	ldmia	r3!, {r0, r1, r2}
 8008c66:	6020      	str	r0, [r4, #0]
 8008c68:	6061      	str	r1, [r4, #4]
 8008c6a:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"6,5,11,13,16,18");
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	3304      	adds	r3, #4
 8008c70:	4a9c      	ldr	r2, [pc, #624]	; (8008ee4 <problem_fetch+0x7bc4>)
 8008c72:	461c      	mov	r4, r3
 8008c74:	4615      	mov	r5, r2
 8008c76:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008c78:	6020      	str	r0, [r4, #0]
 8008c7a:	6061      	str	r1, [r4, #4]
 8008c7c:	60a2      	str	r2, [r4, #8]
 8008c7e:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish, "s,s,d,d,d,e");
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	33d8      	adds	r3, #216	; 0xd8
 8008c84:	4a93      	ldr	r2, [pc, #588]	; (8008ed4 <problem_fetch+0x7bb4>)
 8008c86:	461c      	mov	r4, r3
 8008c88:	4613      	mov	r3, r2
 8008c8a:	cb07      	ldmia	r3!, {r0, r1, r2}
 8008c8c:	6020      	str	r0, [r4, #0]
 8008c8e:	6061      	str	r1, [r4, #4]
 8008c90:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade, "7A");
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	33cc      	adds	r3, #204	; 0xcc
 8008c96:	4a94      	ldr	r2, [pc, #592]	; (8008ee8 <problem_fetch+0x7bc8>)
 8008c98:	8811      	ldrh	r1, [r2, #0]
 8008c9a:	7892      	ldrb	r2, [r2, #2]
 8008c9c:	8019      	strh	r1, [r3, #0]
 8008c9e:	709a      	strb	r2, [r3, #2]
			break;
 8008ca0:	f012 b884 	b.w	801adac <problem_fetch+0x19a8c>
		case 298 :
			strcpy(p->name,"MASTERFUL GAP 2.0");
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	337c      	adds	r3, #124	; 0x7c
 8008ca8:	4a90      	ldr	r2, [pc, #576]	; (8008eec <problem_fetch+0x7bcc>)
 8008caa:	461d      	mov	r5, r3
 8008cac:	4614      	mov	r4, r2
 8008cae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008cb0:	6028      	str	r0, [r5, #0]
 8008cb2:	6069      	str	r1, [r5, #4]
 8008cb4:	60aa      	str	r2, [r5, #8]
 8008cb6:	60eb      	str	r3, [r5, #12]
 8008cb8:	8823      	ldrh	r3, [r4, #0]
 8008cba:	822b      	strh	r3, [r5, #16]
			p->moveSize = 7;
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	2207      	movs	r2, #7
 8008cc0:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"C,B,A,F,E,A,I");
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	3340      	adds	r3, #64	; 0x40
 8008cc6:	4a8a      	ldr	r2, [pc, #552]	; (8008ef0 <problem_fetch+0x7bd0>)
 8008cc8:	461c      	mov	r4, r3
 8008cca:	4613      	mov	r3, r2
 8008ccc:	cb07      	ldmia	r3!, {r0, r1, r2}
 8008cce:	6020      	str	r0, [r4, #0]
 8008cd0:	6061      	str	r1, [r4, #4]
 8008cd2:	60a2      	str	r2, [r4, #8]
 8008cd4:	881b      	ldrh	r3, [r3, #0]
 8008cd6:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,6,9,11,16,14,18");
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	3304      	adds	r3, #4
 8008cdc:	4a85      	ldr	r2, [pc, #532]	; (8008ef4 <problem_fetch+0x7bd4>)
 8008cde:	461d      	mov	r5, r3
 8008ce0:	4614      	mov	r4, r2
 8008ce2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008ce4:	6028      	str	r0, [r5, #0]
 8008ce6:	6069      	str	r1, [r5, #4]
 8008ce8:	60aa      	str	r2, [r5, #8]
 8008cea:	60eb      	str	r3, [r5, #12]
 8008cec:	8823      	ldrh	r3, [r4, #0]
 8008cee:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish, "s,s,d,d,d,d,e");
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	33d8      	adds	r3, #216	; 0xd8
 8008cf4:	4a80      	ldr	r2, [pc, #512]	; (8008ef8 <problem_fetch+0x7bd8>)
 8008cf6:	461c      	mov	r4, r3
 8008cf8:	4613      	mov	r3, r2
 8008cfa:	cb07      	ldmia	r3!, {r0, r1, r2}
 8008cfc:	6020      	str	r0, [r4, #0]
 8008cfe:	6061      	str	r1, [r4, #4]
 8008d00:	60a2      	str	r2, [r4, #8]
 8008d02:	881b      	ldrh	r3, [r3, #0]
 8008d04:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade, "7B+");
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	33cc      	adds	r3, #204	; 0xcc
 8008d0a:	4a7c      	ldr	r2, [pc, #496]	; (8008efc <problem_fetch+0x7bdc>)
 8008d0c:	6810      	ldr	r0, [r2, #0]
 8008d0e:	6018      	str	r0, [r3, #0]
			break;
 8008d10:	f012 b84c 	b.w	801adac <problem_fetch+0x19a8c>
		case 299 :
			strcpy(p->name,"CHICKUGA");
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	337c      	adds	r3, #124	; 0x7c
 8008d18:	4979      	ldr	r1, [pc, #484]	; (8008f00 <problem_fetch+0x7be0>)
 8008d1a:	461a      	mov	r2, r3
 8008d1c:	460b      	mov	r3, r1
 8008d1e:	cb03      	ldmia	r3!, {r0, r1}
 8008d20:	6010      	str	r0, [r2, #0]
 8008d22:	6051      	str	r1, [r2, #4]
 8008d24:	781b      	ldrb	r3, [r3, #0]
 8008d26:	7213      	strb	r3, [r2, #8]
			p->moveSize = 6;
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	2206      	movs	r2, #6
 8008d2c:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"G,C,E,C,E,D");
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	3340      	adds	r3, #64	; 0x40
 8008d32:	4a74      	ldr	r2, [pc, #464]	; (8008f04 <problem_fetch+0x7be4>)
 8008d34:	461c      	mov	r4, r3
 8008d36:	4613      	mov	r3, r2
 8008d38:	cb07      	ldmia	r3!, {r0, r1, r2}
 8008d3a:	6020      	str	r0, [r4, #0]
 8008d3c:	6061      	str	r1, [r4, #4]
 8008d3e:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,8,9,13,14,18");
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	3304      	adds	r3, #4
 8008d44:	4a70      	ldr	r2, [pc, #448]	; (8008f08 <problem_fetch+0x7be8>)
 8008d46:	461c      	mov	r4, r3
 8008d48:	4613      	mov	r3, r2
 8008d4a:	cb07      	ldmia	r3!, {r0, r1, r2}
 8008d4c:	6020      	str	r0, [r4, #0]
 8008d4e:	6061      	str	r1, [r4, #4]
 8008d50:	60a2      	str	r2, [r4, #8]
 8008d52:	881a      	ldrh	r2, [r3, #0]
 8008d54:	789b      	ldrb	r3, [r3, #2]
 8008d56:	81a2      	strh	r2, [r4, #12]
 8008d58:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish, "s,d,d,d,d,e");
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	33d8      	adds	r3, #216	; 0xd8
 8008d5e:	4a6b      	ldr	r2, [pc, #428]	; (8008f0c <problem_fetch+0x7bec>)
 8008d60:	461c      	mov	r4, r3
 8008d62:	4613      	mov	r3, r2
 8008d64:	cb07      	ldmia	r3!, {r0, r1, r2}
 8008d66:	6020      	str	r0, [r4, #0]
 8008d68:	6061      	str	r1, [r4, #4]
 8008d6a:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade, "7B+");
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	33cc      	adds	r3, #204	; 0xcc
 8008d70:	4a62      	ldr	r2, [pc, #392]	; (8008efc <problem_fetch+0x7bdc>)
 8008d72:	6810      	ldr	r0, [r2, #0]
 8008d74:	6018      	str	r0, [r3, #0]
			break;
 8008d76:	f012 b819 	b.w	801adac <problem_fetch+0x19a8c>
		case 3 :
			strcpy(p->name,"PROBLEM 11");
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	337c      	adds	r3, #124	; 0x7c
 8008d7e:	4964      	ldr	r1, [pc, #400]	; (8008f10 <problem_fetch+0x7bf0>)
 8008d80:	461a      	mov	r2, r3
 8008d82:	460b      	mov	r3, r1
 8008d84:	cb03      	ldmia	r3!, {r0, r1}
 8008d86:	6010      	str	r0, [r2, #0]
 8008d88:	6051      	str	r1, [r2, #4]
 8008d8a:	8819      	ldrh	r1, [r3, #0]
 8008d8c:	789b      	ldrb	r3, [r3, #2]
 8008d8e:	8111      	strh	r1, [r2, #8]
 8008d90:	7293      	strb	r3, [r2, #10]
			p->moveSize = 7;
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	2207      	movs	r2, #7
 8008d96:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"C,B,E,B,E,E,I");
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	3340      	adds	r3, #64	; 0x40
 8008d9c:	4a5d      	ldr	r2, [pc, #372]	; (8008f14 <problem_fetch+0x7bf4>)
 8008d9e:	461c      	mov	r4, r3
 8008da0:	4613      	mov	r3, r2
 8008da2:	cb07      	ldmia	r3!, {r0, r1, r2}
 8008da4:	6020      	str	r0, [r4, #0]
 8008da6:	6061      	str	r1, [r4, #4]
 8008da8:	60a2      	str	r2, [r4, #8]
 8008daa:	881b      	ldrh	r3, [r3, #0]
 8008dac:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,6,8,10,14,16,18");
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	3304      	adds	r3, #4
 8008db2:	4a59      	ldr	r2, [pc, #356]	; (8008f18 <problem_fetch+0x7bf8>)
 8008db4:	461d      	mov	r5, r3
 8008db6:	4614      	mov	r4, r2
 8008db8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008dba:	6028      	str	r0, [r5, #0]
 8008dbc:	6069      	str	r1, [r5, #4]
 8008dbe:	60aa      	str	r2, [r5, #8]
 8008dc0:	60eb      	str	r3, [r5, #12]
 8008dc2:	8823      	ldrh	r3, [r4, #0]
 8008dc4:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish, "s,s,d,d,d,d,e");
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	33d8      	adds	r3, #216	; 0xd8
 8008dca:	4a4b      	ldr	r2, [pc, #300]	; (8008ef8 <problem_fetch+0x7bd8>)
 8008dcc:	461c      	mov	r4, r3
 8008dce:	4613      	mov	r3, r2
 8008dd0:	cb07      	ldmia	r3!, {r0, r1, r2}
 8008dd2:	6020      	str	r0, [r4, #0]
 8008dd4:	6061      	str	r1, [r4, #4]
 8008dd6:	60a2      	str	r2, [r4, #8]
 8008dd8:	881b      	ldrh	r3, [r3, #0]
 8008dda:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade, "7A");
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	33cc      	adds	r3, #204	; 0xcc
 8008de0:	4a41      	ldr	r2, [pc, #260]	; (8008ee8 <problem_fetch+0x7bc8>)
 8008de2:	8811      	ldrh	r1, [r2, #0]
 8008de4:	7892      	ldrb	r2, [r2, #2]
 8008de6:	8019      	strh	r1, [r3, #0]
 8008de8:	709a      	strb	r2, [r3, #2]
			break;
 8008dea:	f011 bfdf 	b.w	801adac <problem_fetch+0x19a8c>
		case 30 :
			strcpy(p->name,"ACG6");
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	337c      	adds	r3, #124	; 0x7c
 8008df2:	4a4a      	ldr	r2, [pc, #296]	; (8008f1c <problem_fetch+0x7bfc>)
 8008df4:	6810      	ldr	r0, [r2, #0]
 8008df6:	6018      	str	r0, [r3, #0]
 8008df8:	7912      	ldrb	r2, [r2, #4]
 8008dfa:	711a      	strb	r2, [r3, #4]
			p->moveSize = 8;
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	2208      	movs	r2, #8
 8008e00:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"J,H,G,C,C,C,E,I");
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	3340      	adds	r3, #64	; 0x40
 8008e06:	4a46      	ldr	r2, [pc, #280]	; (8008f20 <problem_fetch+0x7c00>)
 8008e08:	461c      	mov	r4, r3
 8008e0a:	4615      	mov	r5, r2
 8008e0c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008e0e:	6020      	str	r0, [r4, #0]
 8008e10:	6061      	str	r1, [r4, #4]
 8008e12:	60a2      	str	r2, [r4, #8]
 8008e14:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,10,10,8,13,16,16,18");
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	3304      	adds	r3, #4
 8008e1a:	4a42      	ldr	r2, [pc, #264]	; (8008f24 <problem_fetch+0x7c04>)
 8008e1c:	461d      	mov	r5, r3
 8008e1e:	4614      	mov	r4, r2
 8008e20:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008e22:	6028      	str	r0, [r5, #0]
 8008e24:	6069      	str	r1, [r5, #4]
 8008e26:	60aa      	str	r2, [r5, #8]
 8008e28:	60eb      	str	r3, [r5, #12]
 8008e2a:	6820      	ldr	r0, [r4, #0]
 8008e2c:	6128      	str	r0, [r5, #16]
 8008e2e:	88a3      	ldrh	r3, [r4, #4]
 8008e30:	82ab      	strh	r3, [r5, #20]
			strcpy(p->startFinish, "s,d,d,d,d,d,d,e");
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	33d8      	adds	r3, #216	; 0xd8
 8008e36:	4a3c      	ldr	r2, [pc, #240]	; (8008f28 <problem_fetch+0x7c08>)
 8008e38:	461c      	mov	r4, r3
 8008e3a:	4615      	mov	r5, r2
 8008e3c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008e3e:	6020      	str	r0, [r4, #0]
 8008e40:	6061      	str	r1, [r4, #4]
 8008e42:	60a2      	str	r2, [r4, #8]
 8008e44:	60e3      	str	r3, [r4, #12]
			strcpy(p->grade, "7A");
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	33cc      	adds	r3, #204	; 0xcc
 8008e4a:	4a27      	ldr	r2, [pc, #156]	; (8008ee8 <problem_fetch+0x7bc8>)
 8008e4c:	8811      	ldrh	r1, [r2, #0]
 8008e4e:	7892      	ldrb	r2, [r2, #2]
 8008e50:	8019      	strh	r1, [r3, #0]
 8008e52:	709a      	strb	r2, [r3, #2]
			break;
 8008e54:	f011 bfaa 	b.w	801adac <problem_fetch+0x19a8c>
		case 300 :
			strcpy(p->name,"BULA 3");
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	337c      	adds	r3, #124	; 0x7c
 8008e5c:	4a33      	ldr	r2, [pc, #204]	; (8008f2c <problem_fetch+0x7c0c>)
 8008e5e:	6810      	ldr	r0, [r2, #0]
 8008e60:	6018      	str	r0, [r3, #0]
 8008e62:	8891      	ldrh	r1, [r2, #4]
 8008e64:	7992      	ldrb	r2, [r2, #6]
 8008e66:	8099      	strh	r1, [r3, #4]
 8008e68:	719a      	strb	r2, [r3, #6]
			p->moveSize = 7;
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	2207      	movs	r2, #7
 8008e6e:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"G,E,H,F,I,E,I");
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	3340      	adds	r3, #64	; 0x40
 8008e74:	4a2e      	ldr	r2, [pc, #184]	; (8008f30 <problem_fetch+0x7c10>)
 8008e76:	461c      	mov	r4, r3
 8008e78:	4613      	mov	r3, r2
 8008e7a:	cb07      	ldmia	r3!, {r0, r1, r2}
 8008e7c:	6020      	str	r0, [r4, #0]
 8008e7e:	6061      	str	r1, [r4, #4]
 8008e80:	60a2      	str	r2, [r4, #8]
 8008e82:	881b      	ldrh	r3, [r3, #0]
 8008e84:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,8,10,13,14,16,18");
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	3304      	adds	r3, #4
 8008e8a:	4a2a      	ldr	r2, [pc, #168]	; (8008f34 <problem_fetch+0x7c14>)
 8008e8c:	461d      	mov	r5, r3
 8008e8e:	4614      	mov	r4, r2
 8008e90:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008e92:	6028      	str	r0, [r5, #0]
 8008e94:	6069      	str	r1, [r5, #4]
 8008e96:	60aa      	str	r2, [r5, #8]
 8008e98:	60eb      	str	r3, [r5, #12]
 8008e9a:	8823      	ldrh	r3, [r4, #0]
 8008e9c:	78a2      	ldrb	r2, [r4, #2]
 8008e9e:	822b      	strh	r3, [r5, #16]
 8008ea0:	4613      	mov	r3, r2
 8008ea2:	74ab      	strb	r3, [r5, #18]
			strcpy(p->startFinish, "s,d,d,d,d,d,e");
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	33d8      	adds	r3, #216	; 0xd8
 8008ea8:	4a23      	ldr	r2, [pc, #140]	; (8008f38 <problem_fetch+0x7c18>)
 8008eaa:	461c      	mov	r4, r3
 8008eac:	4613      	mov	r3, r2
 8008eae:	cb07      	ldmia	r3!, {r0, r1, r2}
 8008eb0:	6020      	str	r0, [r4, #0]
 8008eb2:	6061      	str	r1, [r4, #4]
 8008eb4:	60a2      	str	r2, [r4, #8]
 8008eb6:	881b      	ldrh	r3, [r3, #0]
 8008eb8:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade, "6B+");
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	33cc      	adds	r3, #204	; 0xcc
 8008ebe:	4a06      	ldr	r2, [pc, #24]	; (8008ed8 <problem_fetch+0x7bb8>)
 8008ec0:	6810      	ldr	r0, [r2, #0]
 8008ec2:	6018      	str	r0, [r3, #0]
			break;
 8008ec4:	f011 bf72 	b.w	801adac <problem_fetch+0x19a8c>
 8008ec8:	08023cc8 	.word	0x08023cc8
 8008ecc:	08023ce0 	.word	0x08023ce0
 8008ed0:	08023cec 	.word	0x08023cec
 8008ed4:	08021910 	.word	0x08021910
 8008ed8:	080212b0 	.word	0x080212b0
 8008edc:	08023cfc 	.word	0x08023cfc
 8008ee0:	08023d0c 	.word	0x08023d0c
 8008ee4:	08023d18 	.word	0x08023d18
 8008ee8:	080212f4 	.word	0x080212f4
 8008eec:	08023d28 	.word	0x08023d28
 8008ef0:	08023d3c 	.word	0x08023d3c
 8008ef4:	08023d4c 	.word	0x08023d4c
 8008ef8:	080212a0 	.word	0x080212a0
 8008efc:	08021848 	.word	0x08021848
 8008f00:	08023d60 	.word	0x08023d60
 8008f04:	08023d6c 	.word	0x08023d6c
 8008f08:	08023d78 	.word	0x08023d78
 8008f0c:	0802139c 	.word	0x0802139c
 8008f10:	08023d88 	.word	0x08023d88
 8008f14:	08023d94 	.word	0x08023d94
 8008f18:	08023da4 	.word	0x08023da4
 8008f1c:	08023db8 	.word	0x08023db8
 8008f20:	08023dc0 	.word	0x08023dc0
 8008f24:	08023dd0 	.word	0x08023dd0
 8008f28:	08021458 	.word	0x08021458
 8008f2c:	08023de8 	.word	0x08023de8
 8008f30:	08023df0 	.word	0x08023df0
 8008f34:	08023e00 	.word	0x08023e00
 8008f38:	08021494 	.word	0x08021494
		case 301 :
			strcpy(p->name,"SALUHALLEN 11");
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	337c      	adds	r3, #124	; 0x7c
 8008f40:	4aa9      	ldr	r2, [pc, #676]	; (80091e8 <problem_fetch+0x7ec8>)
 8008f42:	461c      	mov	r4, r3
 8008f44:	4613      	mov	r3, r2
 8008f46:	cb07      	ldmia	r3!, {r0, r1, r2}
 8008f48:	6020      	str	r0, [r4, #0]
 8008f4a:	6061      	str	r1, [r4, #4]
 8008f4c:	60a2      	str	r2, [r4, #8]
 8008f4e:	881b      	ldrh	r3, [r3, #0]
 8008f50:	81a3      	strh	r3, [r4, #12]
			p->moveSize = 7;
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	2207      	movs	r2, #7
 8008f56:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"G,J,H,J,G,G,D");
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	3340      	adds	r3, #64	; 0x40
 8008f5c:	4aa3      	ldr	r2, [pc, #652]	; (80091ec <problem_fetch+0x7ecc>)
 8008f5e:	461c      	mov	r4, r3
 8008f60:	4613      	mov	r3, r2
 8008f62:	cb07      	ldmia	r3!, {r0, r1, r2}
 8008f64:	6020      	str	r0, [r4, #0]
 8008f66:	6061      	str	r1, [r4, #4]
 8008f68:	60a2      	str	r2, [r4, #8]
 8008f6a:	881b      	ldrh	r3, [r3, #0]
 8008f6c:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,7,10,12,14,15,18");
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	3304      	adds	r3, #4
 8008f72:	4a9f      	ldr	r2, [pc, #636]	; (80091f0 <problem_fetch+0x7ed0>)
 8008f74:	461d      	mov	r5, r3
 8008f76:	4614      	mov	r4, r2
 8008f78:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008f7a:	6028      	str	r0, [r5, #0]
 8008f7c:	6069      	str	r1, [r5, #4]
 8008f7e:	60aa      	str	r2, [r5, #8]
 8008f80:	60eb      	str	r3, [r5, #12]
 8008f82:	8823      	ldrh	r3, [r4, #0]
 8008f84:	78a2      	ldrb	r2, [r4, #2]
 8008f86:	822b      	strh	r3, [r5, #16]
 8008f88:	4613      	mov	r3, r2
 8008f8a:	74ab      	strb	r3, [r5, #18]
			strcpy(p->startFinish, "s,d,d,d,d,d,e");
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	33d8      	adds	r3, #216	; 0xd8
 8008f90:	4a98      	ldr	r2, [pc, #608]	; (80091f4 <problem_fetch+0x7ed4>)
 8008f92:	461c      	mov	r4, r3
 8008f94:	4613      	mov	r3, r2
 8008f96:	cb07      	ldmia	r3!, {r0, r1, r2}
 8008f98:	6020      	str	r0, [r4, #0]
 8008f9a:	6061      	str	r1, [r4, #4]
 8008f9c:	60a2      	str	r2, [r4, #8]
 8008f9e:	881b      	ldrh	r3, [r3, #0]
 8008fa0:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade, "6B+");
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	33cc      	adds	r3, #204	; 0xcc
 8008fa6:	4a94      	ldr	r2, [pc, #592]	; (80091f8 <problem_fetch+0x7ed8>)
 8008fa8:	6810      	ldr	r0, [r2, #0]
 8008faa:	6018      	str	r0, [r3, #0]
			break;
 8008fac:	f011 befe 	b.w	801adac <problem_fetch+0x19a8c>
		case 302 :
			strcpy(p->name,"GASTON GRADE PLEASE");
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	337c      	adds	r3, #124	; 0x7c
 8008fb4:	4a91      	ldr	r2, [pc, #580]	; (80091fc <problem_fetch+0x7edc>)
 8008fb6:	461d      	mov	r5, r3
 8008fb8:	4614      	mov	r4, r2
 8008fba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008fbc:	6028      	str	r0, [r5, #0]
 8008fbe:	6069      	str	r1, [r5, #4]
 8008fc0:	60aa      	str	r2, [r5, #8]
 8008fc2:	60eb      	str	r3, [r5, #12]
 8008fc4:	6820      	ldr	r0, [r4, #0]
 8008fc6:	6128      	str	r0, [r5, #16]
			p->moveSize = 11;
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	220b      	movs	r2, #11
 8008fcc:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"H,E,E,G,F,H,G,I,E,G,D");
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	3340      	adds	r3, #64	; 0x40
 8008fd2:	4a8b      	ldr	r2, [pc, #556]	; (8009200 <problem_fetch+0x7ee0>)
 8008fd4:	461d      	mov	r5, r3
 8008fd6:	4614      	mov	r4, r2
 8008fd8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008fda:	6028      	str	r0, [r5, #0]
 8008fdc:	6069      	str	r1, [r5, #4]
 8008fde:	60aa      	str	r2, [r5, #8]
 8008fe0:	60eb      	str	r3, [r5, #12]
 8008fe2:	6820      	ldr	r0, [r4, #0]
 8008fe4:	6128      	str	r0, [r5, #16]
 8008fe6:	88a3      	ldrh	r3, [r4, #4]
 8008fe8:	82ab      	strh	r3, [r5, #20]
			strcpy(p->moveNumbers,"5,6,8,9,11,12,14,14,16,17,18");
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	3304      	adds	r3, #4
 8008fee:	4a85      	ldr	r2, [pc, #532]	; (8009204 <problem_fetch+0x7ee4>)
 8008ff0:	461d      	mov	r5, r3
 8008ff2:	4614      	mov	r4, r2
 8008ff4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008ff6:	6028      	str	r0, [r5, #0]
 8008ff8:	6069      	str	r1, [r5, #4]
 8008ffa:	60aa      	str	r2, [r5, #8]
 8008ffc:	60eb      	str	r3, [r5, #12]
 8008ffe:	cc07      	ldmia	r4!, {r0, r1, r2}
 8009000:	6128      	str	r0, [r5, #16]
 8009002:	6169      	str	r1, [r5, #20]
 8009004:	61aa      	str	r2, [r5, #24]
 8009006:	7823      	ldrb	r3, [r4, #0]
 8009008:	772b      	strb	r3, [r5, #28]
			strcpy(p->startFinish, "s,s,d,d,d,d,d,d,d,d,e");
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	33d8      	adds	r3, #216	; 0xd8
 800900e:	4a7e      	ldr	r2, [pc, #504]	; (8009208 <problem_fetch+0x7ee8>)
 8009010:	461d      	mov	r5, r3
 8009012:	4614      	mov	r4, r2
 8009014:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009016:	6028      	str	r0, [r5, #0]
 8009018:	6069      	str	r1, [r5, #4]
 800901a:	60aa      	str	r2, [r5, #8]
 800901c:	60eb      	str	r3, [r5, #12]
 800901e:	6820      	ldr	r0, [r4, #0]
 8009020:	6128      	str	r0, [r5, #16]
 8009022:	88a3      	ldrh	r3, [r4, #4]
 8009024:	82ab      	strh	r3, [r5, #20]
			strcpy(p->grade, "6C+");
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	33cc      	adds	r3, #204	; 0xcc
 800902a:	4a78      	ldr	r2, [pc, #480]	; (800920c <problem_fetch+0x7eec>)
 800902c:	6810      	ldr	r0, [r2, #0]
 800902e:	6018      	str	r0, [r3, #0]
			break;
 8009030:	f011 bebc 	b.w	801adac <problem_fetch+0x19a8c>
		case 303 :
			strcpy(p->name,"BLACK PEPPER");
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	337c      	adds	r3, #124	; 0x7c
 8009038:	4a75      	ldr	r2, [pc, #468]	; (8009210 <problem_fetch+0x7ef0>)
 800903a:	461c      	mov	r4, r3
 800903c:	4613      	mov	r3, r2
 800903e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8009040:	6020      	str	r0, [r4, #0]
 8009042:	6061      	str	r1, [r4, #4]
 8009044:	60a2      	str	r2, [r4, #8]
 8009046:	781b      	ldrb	r3, [r3, #0]
 8009048:	7323      	strb	r3, [r4, #12]
			p->moveSize = 7;
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	2207      	movs	r2, #7
 800904e:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"H,E,E,A,C,D,D");
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	3340      	adds	r3, #64	; 0x40
 8009054:	4a6f      	ldr	r2, [pc, #444]	; (8009214 <problem_fetch+0x7ef4>)
 8009056:	461c      	mov	r4, r3
 8009058:	4613      	mov	r3, r2
 800905a:	cb07      	ldmia	r3!, {r0, r1, r2}
 800905c:	6020      	str	r0, [r4, #0]
 800905e:	6061      	str	r1, [r4, #4]
 8009060:	60a2      	str	r2, [r4, #8]
 8009062:	881b      	ldrh	r3, [r3, #0]
 8009064:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,8,9,9,13,15,18");
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	3304      	adds	r3, #4
 800906a:	4a6b      	ldr	r2, [pc, #428]	; (8009218 <problem_fetch+0x7ef8>)
 800906c:	461d      	mov	r5, r3
 800906e:	4614      	mov	r4, r2
 8009070:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009072:	6028      	str	r0, [r5, #0]
 8009074:	6069      	str	r1, [r5, #4]
 8009076:	60aa      	str	r2, [r5, #8]
 8009078:	60eb      	str	r3, [r5, #12]
 800907a:	7823      	ldrb	r3, [r4, #0]
 800907c:	742b      	strb	r3, [r5, #16]
			strcpy(p->startFinish, "s,d,d,d,d,d,e");
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	33d8      	adds	r3, #216	; 0xd8
 8009082:	4a5c      	ldr	r2, [pc, #368]	; (80091f4 <problem_fetch+0x7ed4>)
 8009084:	461c      	mov	r4, r3
 8009086:	4613      	mov	r3, r2
 8009088:	cb07      	ldmia	r3!, {r0, r1, r2}
 800908a:	6020      	str	r0, [r4, #0]
 800908c:	6061      	str	r1, [r4, #4]
 800908e:	60a2      	str	r2, [r4, #8]
 8009090:	881b      	ldrh	r3, [r3, #0]
 8009092:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade, "7A");
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	33cc      	adds	r3, #204	; 0xcc
 8009098:	4a60      	ldr	r2, [pc, #384]	; (800921c <problem_fetch+0x7efc>)
 800909a:	8811      	ldrh	r1, [r2, #0]
 800909c:	7892      	ldrb	r2, [r2, #2]
 800909e:	8019      	strh	r1, [r3, #0]
 80090a0:	709a      	strb	r2, [r3, #2]
			break;
 80090a2:	f011 be83 	b.w	801adac <problem_fetch+0x19a8c>
		case 304 :
			strcpy(p->name,"TONE'S THROW");
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	337c      	adds	r3, #124	; 0x7c
 80090aa:	4a5d      	ldr	r2, [pc, #372]	; (8009220 <problem_fetch+0x7f00>)
 80090ac:	461c      	mov	r4, r3
 80090ae:	4613      	mov	r3, r2
 80090b0:	cb07      	ldmia	r3!, {r0, r1, r2}
 80090b2:	6020      	str	r0, [r4, #0]
 80090b4:	6061      	str	r1, [r4, #4]
 80090b6:	60a2      	str	r2, [r4, #8]
 80090b8:	781b      	ldrb	r3, [r3, #0]
 80090ba:	7323      	strb	r3, [r4, #12]
			p->moveSize = 5;
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	2205      	movs	r2, #5
 80090c0:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"C,A,E,A,D");
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	3340      	adds	r3, #64	; 0x40
 80090c6:	4957      	ldr	r1, [pc, #348]	; (8009224 <problem_fetch+0x7f04>)
 80090c8:	461a      	mov	r2, r3
 80090ca:	460b      	mov	r3, r1
 80090cc:	cb03      	ldmia	r3!, {r0, r1}
 80090ce:	6010      	str	r0, [r2, #0]
 80090d0:	6051      	str	r1, [r2, #4]
 80090d2:	881b      	ldrh	r3, [r3, #0]
 80090d4:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"5,9,12,14,18");
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	3304      	adds	r3, #4
 80090da:	4a53      	ldr	r2, [pc, #332]	; (8009228 <problem_fetch+0x7f08>)
 80090dc:	461c      	mov	r4, r3
 80090de:	4613      	mov	r3, r2
 80090e0:	cb07      	ldmia	r3!, {r0, r1, r2}
 80090e2:	6020      	str	r0, [r4, #0]
 80090e4:	6061      	str	r1, [r4, #4]
 80090e6:	60a2      	str	r2, [r4, #8]
 80090e8:	781b      	ldrb	r3, [r3, #0]
 80090ea:	7323      	strb	r3, [r4, #12]
			strcpy(p->startFinish, "s,d,d,d,e");
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	33d8      	adds	r3, #216	; 0xd8
 80090f0:	494e      	ldr	r1, [pc, #312]	; (800922c <problem_fetch+0x7f0c>)
 80090f2:	461a      	mov	r2, r3
 80090f4:	460b      	mov	r3, r1
 80090f6:	cb03      	ldmia	r3!, {r0, r1}
 80090f8:	6010      	str	r0, [r2, #0]
 80090fa:	6051      	str	r1, [r2, #4]
 80090fc:	881b      	ldrh	r3, [r3, #0]
 80090fe:	8113      	strh	r3, [r2, #8]
			strcpy(p->grade, "6C+");
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	33cc      	adds	r3, #204	; 0xcc
 8009104:	4a41      	ldr	r2, [pc, #260]	; (800920c <problem_fetch+0x7eec>)
 8009106:	6810      	ldr	r0, [r2, #0]
 8009108:	6018      	str	r0, [r3, #0]
			break;
 800910a:	f011 be4f 	b.w	801adac <problem_fetch+0x19a8c>
		case 305 :
			strcpy(p->name,"AGRO-VATED");
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	337c      	adds	r3, #124	; 0x7c
 8009112:	4947      	ldr	r1, [pc, #284]	; (8009230 <problem_fetch+0x7f10>)
 8009114:	461a      	mov	r2, r3
 8009116:	460b      	mov	r3, r1
 8009118:	cb03      	ldmia	r3!, {r0, r1}
 800911a:	6010      	str	r0, [r2, #0]
 800911c:	6051      	str	r1, [r2, #4]
 800911e:	8819      	ldrh	r1, [r3, #0]
 8009120:	789b      	ldrb	r3, [r3, #2]
 8009122:	8111      	strh	r1, [r2, #8]
 8009124:	7293      	strb	r3, [r2, #10]
			p->moveSize = 6;
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	2206      	movs	r2, #6
 800912a:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"J,I,E,E,G,I");
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	3340      	adds	r3, #64	; 0x40
 8009130:	4a40      	ldr	r2, [pc, #256]	; (8009234 <problem_fetch+0x7f14>)
 8009132:	461c      	mov	r4, r3
 8009134:	4613      	mov	r3, r2
 8009136:	cb07      	ldmia	r3!, {r0, r1, r2}
 8009138:	6020      	str	r0, [r4, #0]
 800913a:	6061      	str	r1, [r4, #4]
 800913c:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,7,8,12,14,18");
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	3304      	adds	r3, #4
 8009142:	4a3d      	ldr	r2, [pc, #244]	; (8009238 <problem_fetch+0x7f18>)
 8009144:	461c      	mov	r4, r3
 8009146:	4613      	mov	r3, r2
 8009148:	cb07      	ldmia	r3!, {r0, r1, r2}
 800914a:	6020      	str	r0, [r4, #0]
 800914c:	6061      	str	r1, [r4, #4]
 800914e:	60a2      	str	r2, [r4, #8]
 8009150:	881a      	ldrh	r2, [r3, #0]
 8009152:	789b      	ldrb	r3, [r3, #2]
 8009154:	81a2      	strh	r2, [r4, #12]
 8009156:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish, "s,d,d,d,d,e");
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	33d8      	adds	r3, #216	; 0xd8
 800915c:	4a37      	ldr	r2, [pc, #220]	; (800923c <problem_fetch+0x7f1c>)
 800915e:	461c      	mov	r4, r3
 8009160:	4613      	mov	r3, r2
 8009162:	cb07      	ldmia	r3!, {r0, r1, r2}
 8009164:	6020      	str	r0, [r4, #0]
 8009166:	6061      	str	r1, [r4, #4]
 8009168:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade, "7A+");
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	33cc      	adds	r3, #204	; 0xcc
 800916e:	4a34      	ldr	r2, [pc, #208]	; (8009240 <problem_fetch+0x7f20>)
 8009170:	6810      	ldr	r0, [r2, #0]
 8009172:	6018      	str	r0, [r3, #0]
			break;
 8009174:	f011 be1a 	b.w	801adac <problem_fetch+0x19a8c>
		case 306 :
			strcpy(p->name,"TIGELLA OF DREAM");
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	337c      	adds	r3, #124	; 0x7c
 800917c:	4a31      	ldr	r2, [pc, #196]	; (8009244 <problem_fetch+0x7f24>)
 800917e:	461d      	mov	r5, r3
 8009180:	4614      	mov	r4, r2
 8009182:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009184:	6028      	str	r0, [r5, #0]
 8009186:	6069      	str	r1, [r5, #4]
 8009188:	60aa      	str	r2, [r5, #8]
 800918a:	60eb      	str	r3, [r5, #12]
 800918c:	7823      	ldrb	r3, [r4, #0]
 800918e:	742b      	strb	r3, [r5, #16]
			p->moveSize = 5;
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	2205      	movs	r2, #5
 8009194:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"H,F,C,E,D");
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	3340      	adds	r3, #64	; 0x40
 800919a:	492b      	ldr	r1, [pc, #172]	; (8009248 <problem_fetch+0x7f28>)
 800919c:	461a      	mov	r2, r3
 800919e:	460b      	mov	r3, r1
 80091a0:	cb03      	ldmia	r3!, {r0, r1}
 80091a2:	6010      	str	r0, [r2, #0]
 80091a4:	6051      	str	r1, [r2, #4]
 80091a6:	881b      	ldrh	r3, [r3, #0]
 80091a8:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"5,11,13,6,18");
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	3304      	adds	r3, #4
 80091ae:	4a27      	ldr	r2, [pc, #156]	; (800924c <problem_fetch+0x7f2c>)
 80091b0:	461c      	mov	r4, r3
 80091b2:	4613      	mov	r3, r2
 80091b4:	cb07      	ldmia	r3!, {r0, r1, r2}
 80091b6:	6020      	str	r0, [r4, #0]
 80091b8:	6061      	str	r1, [r4, #4]
 80091ba:	60a2      	str	r2, [r4, #8]
 80091bc:	781b      	ldrb	r3, [r3, #0]
 80091be:	7323      	strb	r3, [r4, #12]
			strcpy(p->startFinish, "s,d,d,d,e");
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	33d8      	adds	r3, #216	; 0xd8
 80091c4:	4919      	ldr	r1, [pc, #100]	; (800922c <problem_fetch+0x7f0c>)
 80091c6:	461a      	mov	r2, r3
 80091c8:	460b      	mov	r3, r1
 80091ca:	cb03      	ldmia	r3!, {r0, r1}
 80091cc:	6010      	str	r0, [r2, #0]
 80091ce:	6051      	str	r1, [r2, #4]
 80091d0:	881b      	ldrh	r3, [r3, #0]
 80091d2:	8113      	strh	r3, [r2, #8]
			strcpy(p->grade, "7A");
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	33cc      	adds	r3, #204	; 0xcc
 80091d8:	4a10      	ldr	r2, [pc, #64]	; (800921c <problem_fetch+0x7efc>)
 80091da:	8811      	ldrh	r1, [r2, #0]
 80091dc:	7892      	ldrb	r2, [r2, #2]
 80091de:	8019      	strh	r1, [r3, #0]
 80091e0:	709a      	strb	r2, [r3, #2]
			break;
 80091e2:	f011 bde3 	b.w	801adac <problem_fetch+0x19a8c>
 80091e6:	bf00      	nop
 80091e8:	08023e14 	.word	0x08023e14
 80091ec:	08023e24 	.word	0x08023e24
 80091f0:	08023e34 	.word	0x08023e34
 80091f4:	08021494 	.word	0x08021494
 80091f8:	080212b0 	.word	0x080212b0
 80091fc:	08023e48 	.word	0x08023e48
 8009200:	08023e5c 	.word	0x08023e5c
 8009204:	08023e74 	.word	0x08023e74
 8009208:	08022a18 	.word	0x08022a18
 800920c:	080213a8 	.word	0x080213a8
 8009210:	08023e94 	.word	0x08023e94
 8009214:	08023ea4 	.word	0x08023ea4
 8009218:	08023eb4 	.word	0x08023eb4
 800921c:	080212f4 	.word	0x080212f4
 8009220:	08023ec8 	.word	0x08023ec8
 8009224:	08023ed8 	.word	0x08023ed8
 8009228:	08022d64 	.word	0x08022d64
 800922c:	08021320 	.word	0x08021320
 8009230:	08023ee4 	.word	0x08023ee4
 8009234:	08023ef0 	.word	0x08023ef0
 8009238:	08023efc 	.word	0x08023efc
 800923c:	0802139c 	.word	0x0802139c
 8009240:	08021424 	.word	0x08021424
 8009244:	08023f0c 	.word	0x08023f0c
 8009248:	08023f20 	.word	0x08023f20
 800924c:	08023f2c 	.word	0x08023f2c
		case 307 :
			strcpy(p->name,"BLACK SHEEP");
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	337c      	adds	r3, #124	; 0x7c
 8009254:	4aad      	ldr	r2, [pc, #692]	; (800950c <problem_fetch+0x81ec>)
 8009256:	461c      	mov	r4, r3
 8009258:	4613      	mov	r3, r2
 800925a:	cb07      	ldmia	r3!, {r0, r1, r2}
 800925c:	6020      	str	r0, [r4, #0]
 800925e:	6061      	str	r1, [r4, #4]
 8009260:	60a2      	str	r2, [r4, #8]
			p->moveSize = 8;
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	2208      	movs	r2, #8
 8009266:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"G,C,H,G,H,I,C,I");
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	3340      	adds	r3, #64	; 0x40
 800926c:	4aa8      	ldr	r2, [pc, #672]	; (8009510 <problem_fetch+0x81f0>)
 800926e:	461c      	mov	r4, r3
 8009270:	4615      	mov	r5, r2
 8009272:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009274:	6020      	str	r0, [r4, #0]
 8009276:	6061      	str	r1, [r4, #4]
 8009278:	60a2      	str	r2, [r4, #8]
 800927a:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,13,10,9,8,7,8,18");
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	3304      	adds	r3, #4
 8009280:	4aa4      	ldr	r2, [pc, #656]	; (8009514 <problem_fetch+0x81f4>)
 8009282:	461d      	mov	r5, r3
 8009284:	4614      	mov	r4, r2
 8009286:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009288:	6028      	str	r0, [r5, #0]
 800928a:	6069      	str	r1, [r5, #4]
 800928c:	60aa      	str	r2, [r5, #8]
 800928e:	60eb      	str	r3, [r5, #12]
 8009290:	8823      	ldrh	r3, [r4, #0]
 8009292:	78a2      	ldrb	r2, [r4, #2]
 8009294:	822b      	strh	r3, [r5, #16]
 8009296:	4613      	mov	r3, r2
 8009298:	74ab      	strb	r3, [r5, #18]
			strcpy(p->startFinish, "s,d,d,d,d,d,d,e");
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	33d8      	adds	r3, #216	; 0xd8
 800929e:	4a9e      	ldr	r2, [pc, #632]	; (8009518 <problem_fetch+0x81f8>)
 80092a0:	461c      	mov	r4, r3
 80092a2:	4615      	mov	r5, r2
 80092a4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80092a6:	6020      	str	r0, [r4, #0]
 80092a8:	6061      	str	r1, [r4, #4]
 80092aa:	60a2      	str	r2, [r4, #8]
 80092ac:	60e3      	str	r3, [r4, #12]
			strcpy(p->grade, "6B+");
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	33cc      	adds	r3, #204	; 0xcc
 80092b2:	4a9a      	ldr	r2, [pc, #616]	; (800951c <problem_fetch+0x81fc>)
 80092b4:	6810      	ldr	r0, [r2, #0]
 80092b6:	6018      	str	r0, [r3, #0]
			break;
 80092b8:	f011 bd78 	b.w	801adac <problem_fetch+0x19a8c>
		case 308 :
			strcpy(p->name,"BABA BLACK SHEEP");
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	337c      	adds	r3, #124	; 0x7c
 80092c0:	4a97      	ldr	r2, [pc, #604]	; (8009520 <problem_fetch+0x8200>)
 80092c2:	461d      	mov	r5, r3
 80092c4:	4614      	mov	r4, r2
 80092c6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80092c8:	6028      	str	r0, [r5, #0]
 80092ca:	6069      	str	r1, [r5, #4]
 80092cc:	60aa      	str	r2, [r5, #8]
 80092ce:	60eb      	str	r3, [r5, #12]
 80092d0:	7823      	ldrb	r3, [r4, #0]
 80092d2:	742b      	strb	r3, [r5, #16]
			p->moveSize = 10;
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	220a      	movs	r2, #10
 80092d8:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"E,G,C,I,H,G,H,I,C,I");
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	3340      	adds	r3, #64	; 0x40
 80092de:	4a91      	ldr	r2, [pc, #580]	; (8009524 <problem_fetch+0x8204>)
 80092e0:	461d      	mov	r5, r3
 80092e2:	4614      	mov	r4, r2
 80092e4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80092e6:	6028      	str	r0, [r5, #0]
 80092e8:	6069      	str	r1, [r5, #4]
 80092ea:	60aa      	str	r2, [r5, #8]
 80092ec:	60eb      	str	r3, [r5, #12]
 80092ee:	6820      	ldr	r0, [r4, #0]
 80092f0:	6128      	str	r0, [r5, #16]
			strcpy(p->moveNumbers,"6,4,13,14,10,9,8,7,8,18");
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	3304      	adds	r3, #4
 80092f6:	4a8c      	ldr	r2, [pc, #560]	; (8009528 <problem_fetch+0x8208>)
 80092f8:	461d      	mov	r5, r3
 80092fa:	4614      	mov	r4, r2
 80092fc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80092fe:	6028      	str	r0, [r5, #0]
 8009300:	6069      	str	r1, [r5, #4]
 8009302:	60aa      	str	r2, [r5, #8]
 8009304:	60eb      	str	r3, [r5, #12]
 8009306:	cc03      	ldmia	r4!, {r0, r1}
 8009308:	6128      	str	r0, [r5, #16]
 800930a:	6169      	str	r1, [r5, #20]
			strcpy(p->startFinish, "s,s,d,d,d,d,d,d,d,e");
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	33d8      	adds	r3, #216	; 0xd8
 8009310:	4a86      	ldr	r2, [pc, #536]	; (800952c <problem_fetch+0x820c>)
 8009312:	461d      	mov	r5, r3
 8009314:	4614      	mov	r4, r2
 8009316:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009318:	6028      	str	r0, [r5, #0]
 800931a:	6069      	str	r1, [r5, #4]
 800931c:	60aa      	str	r2, [r5, #8]
 800931e:	60eb      	str	r3, [r5, #12]
 8009320:	6820      	ldr	r0, [r4, #0]
 8009322:	6128      	str	r0, [r5, #16]
			strcpy(p->grade, "7A");
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	33cc      	adds	r3, #204	; 0xcc
 8009328:	4a81      	ldr	r2, [pc, #516]	; (8009530 <problem_fetch+0x8210>)
 800932a:	8811      	ldrh	r1, [r2, #0]
 800932c:	7892      	ldrb	r2, [r2, #2]
 800932e:	8019      	strh	r1, [r3, #0]
 8009330:	709a      	strb	r2, [r3, #2]
			break;
 8009332:	f011 bd3b 	b.w	801adac <problem_fetch+0x19a8c>
		case 309 :
			strcpy(p->name,"SACRED COW");
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	337c      	adds	r3, #124	; 0x7c
 800933a:	497e      	ldr	r1, [pc, #504]	; (8009534 <problem_fetch+0x8214>)
 800933c:	461a      	mov	r2, r3
 800933e:	460b      	mov	r3, r1
 8009340:	cb03      	ldmia	r3!, {r0, r1}
 8009342:	6010      	str	r0, [r2, #0]
 8009344:	6051      	str	r1, [r2, #4]
 8009346:	8819      	ldrh	r1, [r3, #0]
 8009348:	789b      	ldrb	r3, [r3, #2]
 800934a:	8111      	strh	r1, [r2, #8]
 800934c:	7293      	strb	r3, [r2, #10]
			p->moveSize = 11;
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	220b      	movs	r2, #11
 8009352:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"E,G,I,C,A,C,H,G,H,I,I");
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	3340      	adds	r3, #64	; 0x40
 8009358:	4a77      	ldr	r2, [pc, #476]	; (8009538 <problem_fetch+0x8218>)
 800935a:	461d      	mov	r5, r3
 800935c:	4614      	mov	r4, r2
 800935e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009360:	6028      	str	r0, [r5, #0]
 8009362:	6069      	str	r1, [r5, #4]
 8009364:	60aa      	str	r2, [r5, #8]
 8009366:	60eb      	str	r3, [r5, #12]
 8009368:	6820      	ldr	r0, [r4, #0]
 800936a:	6128      	str	r0, [r5, #16]
 800936c:	88a3      	ldrh	r3, [r4, #4]
 800936e:	82ab      	strh	r3, [r5, #20]
			strcpy(p->moveNumbers,"6,4,14,13,9,8,10,9,8,7,18");
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	3304      	adds	r3, #4
 8009374:	4a71      	ldr	r2, [pc, #452]	; (800953c <problem_fetch+0x821c>)
 8009376:	461d      	mov	r5, r3
 8009378:	4614      	mov	r4, r2
 800937a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800937c:	6028      	str	r0, [r5, #0]
 800937e:	6069      	str	r1, [r5, #4]
 8009380:	60aa      	str	r2, [r5, #8]
 8009382:	60eb      	str	r3, [r5, #12]
 8009384:	cc03      	ldmia	r4!, {r0, r1}
 8009386:	6128      	str	r0, [r5, #16]
 8009388:	6169      	str	r1, [r5, #20]
 800938a:	8823      	ldrh	r3, [r4, #0]
 800938c:	832b      	strh	r3, [r5, #24]
			strcpy(p->startFinish, "s,s,d,d,d,d,d,d,d,d,e");
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	33d8      	adds	r3, #216	; 0xd8
 8009392:	4a6b      	ldr	r2, [pc, #428]	; (8009540 <problem_fetch+0x8220>)
 8009394:	461d      	mov	r5, r3
 8009396:	4614      	mov	r4, r2
 8009398:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800939a:	6028      	str	r0, [r5, #0]
 800939c:	6069      	str	r1, [r5, #4]
 800939e:	60aa      	str	r2, [r5, #8]
 80093a0:	60eb      	str	r3, [r5, #12]
 80093a2:	6820      	ldr	r0, [r4, #0]
 80093a4:	6128      	str	r0, [r5, #16]
 80093a6:	88a3      	ldrh	r3, [r4, #4]
 80093a8:	82ab      	strh	r3, [r5, #20]
			strcpy(p->grade, "7A");
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	33cc      	adds	r3, #204	; 0xcc
 80093ae:	4a60      	ldr	r2, [pc, #384]	; (8009530 <problem_fetch+0x8210>)
 80093b0:	8811      	ldrh	r1, [r2, #0]
 80093b2:	7892      	ldrb	r2, [r2, #2]
 80093b4:	8019      	strh	r1, [r3, #0]
 80093b6:	709a      	strb	r2, [r3, #2]
			break;
 80093b8:	f011 bcf8 	b.w	801adac <problem_fetch+0x19a8c>
		case 31 :
			strcpy(p->name,"ACG8");
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	337c      	adds	r3, #124	; 0x7c
 80093c0:	4a60      	ldr	r2, [pc, #384]	; (8009544 <problem_fetch+0x8224>)
 80093c2:	6810      	ldr	r0, [r2, #0]
 80093c4:	6018      	str	r0, [r3, #0]
 80093c6:	7912      	ldrb	r2, [r2, #4]
 80093c8:	711a      	strb	r2, [r3, #4]
			p->moveSize = 7;
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	2207      	movs	r2, #7
 80093ce:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"J,H,E,E,A,E,D");
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	3340      	adds	r3, #64	; 0x40
 80093d4:	4a5c      	ldr	r2, [pc, #368]	; (8009548 <problem_fetch+0x8228>)
 80093d6:	461c      	mov	r4, r3
 80093d8:	4613      	mov	r3, r2
 80093da:	cb07      	ldmia	r3!, {r0, r1, r2}
 80093dc:	6020      	str	r0, [r4, #0]
 80093de:	6061      	str	r1, [r4, #4]
 80093e0:	60a2      	str	r2, [r4, #8]
 80093e2:	881b      	ldrh	r3, [r3, #0]
 80093e4:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,5,8,12,14,14,18");
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	3304      	adds	r3, #4
 80093ea:	4a58      	ldr	r2, [pc, #352]	; (800954c <problem_fetch+0x822c>)
 80093ec:	461d      	mov	r5, r3
 80093ee:	4614      	mov	r4, r2
 80093f0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80093f2:	6028      	str	r0, [r5, #0]
 80093f4:	6069      	str	r1, [r5, #4]
 80093f6:	60aa      	str	r2, [r5, #8]
 80093f8:	60eb      	str	r3, [r5, #12]
 80093fa:	8823      	ldrh	r3, [r4, #0]
 80093fc:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish, "s,s,d,d,d,d,e");
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	33d8      	adds	r3, #216	; 0xd8
 8009402:	4a53      	ldr	r2, [pc, #332]	; (8009550 <problem_fetch+0x8230>)
 8009404:	461c      	mov	r4, r3
 8009406:	4613      	mov	r3, r2
 8009408:	cb07      	ldmia	r3!, {r0, r1, r2}
 800940a:	6020      	str	r0, [r4, #0]
 800940c:	6061      	str	r1, [r4, #4]
 800940e:	60a2      	str	r2, [r4, #8]
 8009410:	881b      	ldrh	r3, [r3, #0]
 8009412:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade, "6B+");
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	33cc      	adds	r3, #204	; 0xcc
 8009418:	4a40      	ldr	r2, [pc, #256]	; (800951c <problem_fetch+0x81fc>)
 800941a:	6810      	ldr	r0, [r2, #0]
 800941c:	6018      	str	r0, [r3, #0]
			break;
 800941e:	f011 bcc5 	b.w	801adac <problem_fetch+0x19a8c>
		case 310 :
			strcpy(p->name,"MARCUS IS THE PROBLEM");
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	337c      	adds	r3, #124	; 0x7c
 8009426:	4a4b      	ldr	r2, [pc, #300]	; (8009554 <problem_fetch+0x8234>)
 8009428:	461d      	mov	r5, r3
 800942a:	4614      	mov	r4, r2
 800942c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800942e:	6028      	str	r0, [r5, #0]
 8009430:	6069      	str	r1, [r5, #4]
 8009432:	60aa      	str	r2, [r5, #8]
 8009434:	60eb      	str	r3, [r5, #12]
 8009436:	6820      	ldr	r0, [r4, #0]
 8009438:	6128      	str	r0, [r5, #16]
 800943a:	88a3      	ldrh	r3, [r4, #4]
 800943c:	82ab      	strh	r3, [r5, #20]
			p->moveSize = 8;
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	2208      	movs	r2, #8
 8009442:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"E,H,G,D,E,A,E,D");
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	3340      	adds	r3, #64	; 0x40
 8009448:	4a43      	ldr	r2, [pc, #268]	; (8009558 <problem_fetch+0x8238>)
 800944a:	461c      	mov	r4, r3
 800944c:	4615      	mov	r5, r2
 800944e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009450:	6020      	str	r0, [r4, #0]
 8009452:	6061      	str	r1, [r4, #4]
 8009454:	60a2      	str	r2, [r4, #8]
 8009456:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"6,5,9,11,12,14,16,18");
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	3304      	adds	r3, #4
 800945c:	4a3f      	ldr	r2, [pc, #252]	; (800955c <problem_fetch+0x823c>)
 800945e:	461d      	mov	r5, r3
 8009460:	4614      	mov	r4, r2
 8009462:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009464:	6028      	str	r0, [r5, #0]
 8009466:	6069      	str	r1, [r5, #4]
 8009468:	60aa      	str	r2, [r5, #8]
 800946a:	60eb      	str	r3, [r5, #12]
 800946c:	6820      	ldr	r0, [r4, #0]
 800946e:	6128      	str	r0, [r5, #16]
 8009470:	7923      	ldrb	r3, [r4, #4]
 8009472:	752b      	strb	r3, [r5, #20]
			strcpy(p->startFinish, "s,s,d,d,d,d,d,e");
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	33d8      	adds	r3, #216	; 0xd8
 8009478:	4a39      	ldr	r2, [pc, #228]	; (8009560 <problem_fetch+0x8240>)
 800947a:	461c      	mov	r4, r3
 800947c:	4615      	mov	r5, r2
 800947e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009480:	6020      	str	r0, [r4, #0]
 8009482:	6061      	str	r1, [r4, #4]
 8009484:	60a2      	str	r2, [r4, #8]
 8009486:	60e3      	str	r3, [r4, #12]
			strcpy(p->grade, "6C");
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	33cc      	adds	r3, #204	; 0xcc
 800948c:	4a35      	ldr	r2, [pc, #212]	; (8009564 <problem_fetch+0x8244>)
 800948e:	8811      	ldrh	r1, [r2, #0]
 8009490:	7892      	ldrb	r2, [r2, #2]
 8009492:	8019      	strh	r1, [r3, #0]
 8009494:	709a      	strb	r2, [r3, #2]
			break;
 8009496:	f011 bc89 	b.w	801adac <problem_fetch+0x19a8c>
		case 311 :
			strcpy(p->name,"INSANE IN THE BRAIN");
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	337c      	adds	r3, #124	; 0x7c
 800949e:	4a32      	ldr	r2, [pc, #200]	; (8009568 <problem_fetch+0x8248>)
 80094a0:	461d      	mov	r5, r3
 80094a2:	4614      	mov	r4, r2
 80094a4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80094a6:	6028      	str	r0, [r5, #0]
 80094a8:	6069      	str	r1, [r5, #4]
 80094aa:	60aa      	str	r2, [r5, #8]
 80094ac:	60eb      	str	r3, [r5, #12]
 80094ae:	6820      	ldr	r0, [r4, #0]
 80094b0:	6128      	str	r0, [r5, #16]
			p->moveSize = 7;
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	2207      	movs	r2, #7
 80094b6:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"G,E,E,E,B,A,D");
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	3340      	adds	r3, #64	; 0x40
 80094bc:	4a2b      	ldr	r2, [pc, #172]	; (800956c <problem_fetch+0x824c>)
 80094be:	461c      	mov	r4, r3
 80094c0:	4613      	mov	r3, r2
 80094c2:	cb07      	ldmia	r3!, {r0, r1, r2}
 80094c4:	6020      	str	r0, [r4, #0]
 80094c6:	6061      	str	r1, [r4, #4]
 80094c8:	60a2      	str	r2, [r4, #8]
 80094ca:	881b      	ldrh	r3, [r3, #0]
 80094cc:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,6,12,8,10,14,18");
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	3304      	adds	r3, #4
 80094d2:	4a27      	ldr	r2, [pc, #156]	; (8009570 <problem_fetch+0x8250>)
 80094d4:	461d      	mov	r5, r3
 80094d6:	4614      	mov	r4, r2
 80094d8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80094da:	6028      	str	r0, [r5, #0]
 80094dc:	6069      	str	r1, [r5, #4]
 80094de:	60aa      	str	r2, [r5, #8]
 80094e0:	60eb      	str	r3, [r5, #12]
 80094e2:	8823      	ldrh	r3, [r4, #0]
 80094e4:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish, "s,s,d,d,d,d,e");
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	33d8      	adds	r3, #216	; 0xd8
 80094ea:	4a19      	ldr	r2, [pc, #100]	; (8009550 <problem_fetch+0x8230>)
 80094ec:	461c      	mov	r4, r3
 80094ee:	4613      	mov	r3, r2
 80094f0:	cb07      	ldmia	r3!, {r0, r1, r2}
 80094f2:	6020      	str	r0, [r4, #0]
 80094f4:	6061      	str	r1, [r4, #4]
 80094f6:	60a2      	str	r2, [r4, #8]
 80094f8:	881b      	ldrh	r3, [r3, #0]
 80094fa:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade, "6B+");
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	33cc      	adds	r3, #204	; 0xcc
 8009500:	4a06      	ldr	r2, [pc, #24]	; (800951c <problem_fetch+0x81fc>)
 8009502:	6810      	ldr	r0, [r2, #0]
 8009504:	6018      	str	r0, [r3, #0]
			break;
 8009506:	f011 bc51 	b.w	801adac <problem_fetch+0x19a8c>
 800950a:	bf00      	nop
 800950c:	08023f3c 	.word	0x08023f3c
 8009510:	08023f48 	.word	0x08023f48
 8009514:	08023f58 	.word	0x08023f58
 8009518:	08021458 	.word	0x08021458
 800951c:	080212b0 	.word	0x080212b0
 8009520:	08023f6c 	.word	0x08023f6c
 8009524:	08023f80 	.word	0x08023f80
 8009528:	08023f94 	.word	0x08023f94
 800952c:	080215fc 	.word	0x080215fc
 8009530:	080212f4 	.word	0x080212f4
 8009534:	08023fac 	.word	0x08023fac
 8009538:	08023fb8 	.word	0x08023fb8
 800953c:	08023fd0 	.word	0x08023fd0
 8009540:	08022a18 	.word	0x08022a18
 8009544:	08023fec 	.word	0x08023fec
 8009548:	08023ff4 	.word	0x08023ff4
 800954c:	08024004 	.word	0x08024004
 8009550:	080212a0 	.word	0x080212a0
 8009554:	08024018 	.word	0x08024018
 8009558:	08024030 	.word	0x08024030
 800955c:	08024040 	.word	0x08024040
 8009560:	080214cc 	.word	0x080214cc
 8009564:	08021370 	.word	0x08021370
 8009568:	08024058 	.word	0x08024058
 800956c:	0802406c 	.word	0x0802406c
 8009570:	0802407c 	.word	0x0802407c
		case 312 :
			strcpy(p->name,"VORPAL SWORD");
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	337c      	adds	r3, #124	; 0x7c
 8009578:	4abf      	ldr	r2, [pc, #764]	; (8009878 <problem_fetch+0x8558>)
 800957a:	461c      	mov	r4, r3
 800957c:	4613      	mov	r3, r2
 800957e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8009580:	6020      	str	r0, [r4, #0]
 8009582:	6061      	str	r1, [r4, #4]
 8009584:	60a2      	str	r2, [r4, #8]
 8009586:	781b      	ldrb	r3, [r3, #0]
 8009588:	7323      	strb	r3, [r4, #12]
			p->moveSize = 6;
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	2206      	movs	r2, #6
 800958e:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"J,E,G,H,H,I");
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	3340      	adds	r3, #64	; 0x40
 8009594:	4ab9      	ldr	r2, [pc, #740]	; (800987c <problem_fetch+0x855c>)
 8009596:	461c      	mov	r4, r3
 8009598:	4613      	mov	r3, r2
 800959a:	cb07      	ldmia	r3!, {r0, r1, r2}
 800959c:	6020      	str	r0, [r4, #0]
 800959e:	6061      	str	r1, [r4, #4]
 80095a0:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,8,9,12,16,18");
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	3304      	adds	r3, #4
 80095a6:	4ab6      	ldr	r2, [pc, #728]	; (8009880 <problem_fetch+0x8560>)
 80095a8:	461c      	mov	r4, r3
 80095aa:	4613      	mov	r3, r2
 80095ac:	cb07      	ldmia	r3!, {r0, r1, r2}
 80095ae:	6020      	str	r0, [r4, #0]
 80095b0:	6061      	str	r1, [r4, #4]
 80095b2:	60a2      	str	r2, [r4, #8]
 80095b4:	881a      	ldrh	r2, [r3, #0]
 80095b6:	789b      	ldrb	r3, [r3, #2]
 80095b8:	81a2      	strh	r2, [r4, #12]
 80095ba:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish, "s,d,d,d,d,e");
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	33d8      	adds	r3, #216	; 0xd8
 80095c0:	4ab0      	ldr	r2, [pc, #704]	; (8009884 <problem_fetch+0x8564>)
 80095c2:	461c      	mov	r4, r3
 80095c4:	4613      	mov	r3, r2
 80095c6:	cb07      	ldmia	r3!, {r0, r1, r2}
 80095c8:	6020      	str	r0, [r4, #0]
 80095ca:	6061      	str	r1, [r4, #4]
 80095cc:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade, "7A+");
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	33cc      	adds	r3, #204	; 0xcc
 80095d2:	4aad      	ldr	r2, [pc, #692]	; (8009888 <problem_fetch+0x8568>)
 80095d4:	6810      	ldr	r0, [r2, #0]
 80095d6:	6018      	str	r0, [r3, #0]
			break;
 80095d8:	f011 bbe8 	b.w	801adac <problem_fetch+0x19a8c>
		case 313 :
			strcpy(p->name,"BELLE NOIRE");
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	337c      	adds	r3, #124	; 0x7c
 80095e0:	4aaa      	ldr	r2, [pc, #680]	; (800988c <problem_fetch+0x856c>)
 80095e2:	461c      	mov	r4, r3
 80095e4:	4613      	mov	r3, r2
 80095e6:	cb07      	ldmia	r3!, {r0, r1, r2}
 80095e8:	6020      	str	r0, [r4, #0]
 80095ea:	6061      	str	r1, [r4, #4]
 80095ec:	60a2      	str	r2, [r4, #8]
			p->moveSize = 7;
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	2207      	movs	r2, #7
 80095f2:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"G,E,E,E,J,I,I");
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	3340      	adds	r3, #64	; 0x40
 80095f8:	4aa5      	ldr	r2, [pc, #660]	; (8009890 <problem_fetch+0x8570>)
 80095fa:	461c      	mov	r4, r3
 80095fc:	4613      	mov	r3, r2
 80095fe:	cb07      	ldmia	r3!, {r0, r1, r2}
 8009600:	6020      	str	r0, [r4, #0]
 8009602:	6061      	str	r1, [r4, #4]
 8009604:	60a2      	str	r2, [r4, #8]
 8009606:	881b      	ldrh	r3, [r3, #0]
 8009608:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,8,9,12,13,15,18");
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	3304      	adds	r3, #4
 800960e:	4aa1      	ldr	r2, [pc, #644]	; (8009894 <problem_fetch+0x8574>)
 8009610:	461d      	mov	r5, r3
 8009612:	4614      	mov	r4, r2
 8009614:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009616:	6028      	str	r0, [r5, #0]
 8009618:	6069      	str	r1, [r5, #4]
 800961a:	60aa      	str	r2, [r5, #8]
 800961c:	60eb      	str	r3, [r5, #12]
 800961e:	8823      	ldrh	r3, [r4, #0]
 8009620:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish, "s,d,d,d,d,d,e");
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	33d8      	adds	r3, #216	; 0xd8
 8009626:	4a9c      	ldr	r2, [pc, #624]	; (8009898 <problem_fetch+0x8578>)
 8009628:	461c      	mov	r4, r3
 800962a:	4613      	mov	r3, r2
 800962c:	cb07      	ldmia	r3!, {r0, r1, r2}
 800962e:	6020      	str	r0, [r4, #0]
 8009630:	6061      	str	r1, [r4, #4]
 8009632:	60a2      	str	r2, [r4, #8]
 8009634:	881b      	ldrh	r3, [r3, #0]
 8009636:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade, "7A+");
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	33cc      	adds	r3, #204	; 0xcc
 800963c:	4a92      	ldr	r2, [pc, #584]	; (8009888 <problem_fetch+0x8568>)
 800963e:	6810      	ldr	r0, [r2, #0]
 8009640:	6018      	str	r0, [r3, #0]
			break;
 8009642:	f011 bbb3 	b.w	801adac <problem_fetch+0x19a8c>
		case 314 :
			strcpy(p->name,"WINGSPAN");
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	337c      	adds	r3, #124	; 0x7c
 800964a:	4994      	ldr	r1, [pc, #592]	; (800989c <problem_fetch+0x857c>)
 800964c:	461a      	mov	r2, r3
 800964e:	460b      	mov	r3, r1
 8009650:	cb03      	ldmia	r3!, {r0, r1}
 8009652:	6010      	str	r0, [r2, #0]
 8009654:	6051      	str	r1, [r2, #4]
 8009656:	781b      	ldrb	r3, [r3, #0]
 8009658:	7213      	strb	r3, [r2, #8]
			p->moveSize = 5;
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	2205      	movs	r2, #5
 800965e:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"C,C,F,A,D");
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	3340      	adds	r3, #64	; 0x40
 8009664:	498e      	ldr	r1, [pc, #568]	; (80098a0 <problem_fetch+0x8580>)
 8009666:	461a      	mov	r2, r3
 8009668:	460b      	mov	r3, r1
 800966a:	cb03      	ldmia	r3!, {r0, r1}
 800966c:	6010      	str	r0, [r2, #0]
 800966e:	6051      	str	r1, [r2, #4]
 8009670:	881b      	ldrh	r3, [r3, #0]
 8009672:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"5,8,11,14,18");
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	3304      	adds	r3, #4
 8009678:	4a8a      	ldr	r2, [pc, #552]	; (80098a4 <problem_fetch+0x8584>)
 800967a:	461c      	mov	r4, r3
 800967c:	4613      	mov	r3, r2
 800967e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8009680:	6020      	str	r0, [r4, #0]
 8009682:	6061      	str	r1, [r4, #4]
 8009684:	60a2      	str	r2, [r4, #8]
 8009686:	781b      	ldrb	r3, [r3, #0]
 8009688:	7323      	strb	r3, [r4, #12]
			strcpy(p->startFinish, "s,d,d,d,e");
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	33d8      	adds	r3, #216	; 0xd8
 800968e:	4986      	ldr	r1, [pc, #536]	; (80098a8 <problem_fetch+0x8588>)
 8009690:	461a      	mov	r2, r3
 8009692:	460b      	mov	r3, r1
 8009694:	cb03      	ldmia	r3!, {r0, r1}
 8009696:	6010      	str	r0, [r2, #0]
 8009698:	6051      	str	r1, [r2, #4]
 800969a:	881b      	ldrh	r3, [r3, #0]
 800969c:	8113      	strh	r3, [r2, #8]
			strcpy(p->grade, "7A+");
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	33cc      	adds	r3, #204	; 0xcc
 80096a2:	4a79      	ldr	r2, [pc, #484]	; (8009888 <problem_fetch+0x8568>)
 80096a4:	6810      	ldr	r0, [r2, #0]
 80096a6:	6018      	str	r0, [r3, #0]
			break;
 80096a8:	f011 bb80 	b.w	801adac <problem_fetch+0x19a8c>
		case 315 :
			strcpy(p->name,"THE HUMAN FLAG");
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	337c      	adds	r3, #124	; 0x7c
 80096b0:	4a7e      	ldr	r2, [pc, #504]	; (80098ac <problem_fetch+0x858c>)
 80096b2:	461c      	mov	r4, r3
 80096b4:	4613      	mov	r3, r2
 80096b6:	cb07      	ldmia	r3!, {r0, r1, r2}
 80096b8:	6020      	str	r0, [r4, #0]
 80096ba:	6061      	str	r1, [r4, #4]
 80096bc:	60a2      	str	r2, [r4, #8]
 80096be:	881a      	ldrh	r2, [r3, #0]
 80096c0:	789b      	ldrb	r3, [r3, #2]
 80096c2:	81a2      	strh	r2, [r4, #12]
 80096c4:	73a3      	strb	r3, [r4, #14]
			p->moveSize = 4;
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	2204      	movs	r2, #4
 80096ca:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"G,H,C,D");
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	3340      	adds	r3, #64	; 0x40
 80096d0:	4977      	ldr	r1, [pc, #476]	; (80098b0 <problem_fetch+0x8590>)
 80096d2:	461a      	mov	r2, r3
 80096d4:	460b      	mov	r3, r1
 80096d6:	cb03      	ldmia	r3!, {r0, r1}
 80096d8:	6010      	str	r0, [r2, #0]
 80096da:	6051      	str	r1, [r2, #4]
			strcpy(p->moveNumbers,"6,10,13,18");
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	3304      	adds	r3, #4
 80096e0:	4974      	ldr	r1, [pc, #464]	; (80098b4 <problem_fetch+0x8594>)
 80096e2:	461a      	mov	r2, r3
 80096e4:	460b      	mov	r3, r1
 80096e6:	cb03      	ldmia	r3!, {r0, r1}
 80096e8:	6010      	str	r0, [r2, #0]
 80096ea:	6051      	str	r1, [r2, #4]
 80096ec:	8819      	ldrh	r1, [r3, #0]
 80096ee:	789b      	ldrb	r3, [r3, #2]
 80096f0:	8111      	strh	r1, [r2, #8]
 80096f2:	7293      	strb	r3, [r2, #10]
			strcpy(p->startFinish, "s,d,d,e");
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	33d8      	adds	r3, #216	; 0xd8
 80096f8:	496f      	ldr	r1, [pc, #444]	; (80098b8 <problem_fetch+0x8598>)
 80096fa:	461a      	mov	r2, r3
 80096fc:	460b      	mov	r3, r1
 80096fe:	cb03      	ldmia	r3!, {r0, r1}
 8009700:	6010      	str	r0, [r2, #0]
 8009702:	6051      	str	r1, [r2, #4]
			strcpy(p->grade, "7A");
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	33cc      	adds	r3, #204	; 0xcc
 8009708:	4a6c      	ldr	r2, [pc, #432]	; (80098bc <problem_fetch+0x859c>)
 800970a:	8811      	ldrh	r1, [r2, #0]
 800970c:	7892      	ldrb	r2, [r2, #2]
 800970e:	8019      	strh	r1, [r3, #0]
 8009710:	709a      	strb	r2, [r3, #2]
			break;
 8009712:	f011 bb4b 	b.w	801adac <problem_fetch+0x19a8c>
		case 316 :
			strcpy(p->name,"BIG TIME BRUH");
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	337c      	adds	r3, #124	; 0x7c
 800971a:	4a69      	ldr	r2, [pc, #420]	; (80098c0 <problem_fetch+0x85a0>)
 800971c:	461c      	mov	r4, r3
 800971e:	4613      	mov	r3, r2
 8009720:	cb07      	ldmia	r3!, {r0, r1, r2}
 8009722:	6020      	str	r0, [r4, #0]
 8009724:	6061      	str	r1, [r4, #4]
 8009726:	60a2      	str	r2, [r4, #8]
 8009728:	881b      	ldrh	r3, [r3, #0]
 800972a:	81a3      	strh	r3, [r4, #12]
			p->moveSize = 7;
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	2207      	movs	r2, #7
 8009730:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"G,E,H,C,I,E,I");
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	3340      	adds	r3, #64	; 0x40
 8009736:	4a63      	ldr	r2, [pc, #396]	; (80098c4 <problem_fetch+0x85a4>)
 8009738:	461c      	mov	r4, r3
 800973a:	4613      	mov	r3, r2
 800973c:	cb07      	ldmia	r3!, {r0, r1, r2}
 800973e:	6020      	str	r0, [r4, #0]
 8009740:	6061      	str	r1, [r4, #4]
 8009742:	60a2      	str	r2, [r4, #8]
 8009744:	881b      	ldrh	r3, [r3, #0]
 8009746:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,6,10,13,14,16,18");
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	3304      	adds	r3, #4
 800974c:	4a5e      	ldr	r2, [pc, #376]	; (80098c8 <problem_fetch+0x85a8>)
 800974e:	461d      	mov	r5, r3
 8009750:	4614      	mov	r4, r2
 8009752:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009754:	6028      	str	r0, [r5, #0]
 8009756:	6069      	str	r1, [r5, #4]
 8009758:	60aa      	str	r2, [r5, #8]
 800975a:	60eb      	str	r3, [r5, #12]
 800975c:	8823      	ldrh	r3, [r4, #0]
 800975e:	78a2      	ldrb	r2, [r4, #2]
 8009760:	822b      	strh	r3, [r5, #16]
 8009762:	4613      	mov	r3, r2
 8009764:	74ab      	strb	r3, [r5, #18]
			strcpy(p->startFinish, "s,d,d,d,d,d,e");
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	33d8      	adds	r3, #216	; 0xd8
 800976a:	4a4b      	ldr	r2, [pc, #300]	; (8009898 <problem_fetch+0x8578>)
 800976c:	461c      	mov	r4, r3
 800976e:	4613      	mov	r3, r2
 8009770:	cb07      	ldmia	r3!, {r0, r1, r2}
 8009772:	6020      	str	r0, [r4, #0]
 8009774:	6061      	str	r1, [r4, #4]
 8009776:	60a2      	str	r2, [r4, #8]
 8009778:	881b      	ldrh	r3, [r3, #0]
 800977a:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade, "6C");
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	33cc      	adds	r3, #204	; 0xcc
 8009780:	4a52      	ldr	r2, [pc, #328]	; (80098cc <problem_fetch+0x85ac>)
 8009782:	8811      	ldrh	r1, [r2, #0]
 8009784:	7892      	ldrb	r2, [r2, #2]
 8009786:	8019      	strh	r1, [r3, #0]
 8009788:	709a      	strb	r2, [r3, #2]
			break;
 800978a:	f011 bb0f 	b.w	801adac <problem_fetch+0x19a8c>
		case 317 :
			strcpy(p->name,"SHOULDER 'SPLODER");
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	337c      	adds	r3, #124	; 0x7c
 8009792:	4a4f      	ldr	r2, [pc, #316]	; (80098d0 <problem_fetch+0x85b0>)
 8009794:	461d      	mov	r5, r3
 8009796:	4614      	mov	r4, r2
 8009798:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800979a:	6028      	str	r0, [r5, #0]
 800979c:	6069      	str	r1, [r5, #4]
 800979e:	60aa      	str	r2, [r5, #8]
 80097a0:	60eb      	str	r3, [r5, #12]
 80097a2:	8823      	ldrh	r3, [r4, #0]
 80097a4:	822b      	strh	r3, [r5, #16]
			p->moveSize = 6;
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	2206      	movs	r2, #6
 80097aa:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"J,J,E,J,E,D");
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	3340      	adds	r3, #64	; 0x40
 80097b0:	4a48      	ldr	r2, [pc, #288]	; (80098d4 <problem_fetch+0x85b4>)
 80097b2:	461c      	mov	r4, r3
 80097b4:	4613      	mov	r3, r2
 80097b6:	cb07      	ldmia	r3!, {r0, r1, r2}
 80097b8:	6020      	str	r0, [r4, #0]
 80097ba:	6061      	str	r1, [r4, #4]
 80097bc:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,7,9,12,14,18");
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	3304      	adds	r3, #4
 80097c2:	4a45      	ldr	r2, [pc, #276]	; (80098d8 <problem_fetch+0x85b8>)
 80097c4:	461c      	mov	r4, r3
 80097c6:	4613      	mov	r3, r2
 80097c8:	cb07      	ldmia	r3!, {r0, r1, r2}
 80097ca:	6020      	str	r0, [r4, #0]
 80097cc:	6061      	str	r1, [r4, #4]
 80097ce:	60a2      	str	r2, [r4, #8]
 80097d0:	881a      	ldrh	r2, [r3, #0]
 80097d2:	789b      	ldrb	r3, [r3, #2]
 80097d4:	81a2      	strh	r2, [r4, #12]
 80097d6:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish, "s,d,d,d,d,e");
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	33d8      	adds	r3, #216	; 0xd8
 80097dc:	4a29      	ldr	r2, [pc, #164]	; (8009884 <problem_fetch+0x8564>)
 80097de:	461c      	mov	r4, r3
 80097e0:	4613      	mov	r3, r2
 80097e2:	cb07      	ldmia	r3!, {r0, r1, r2}
 80097e4:	6020      	str	r0, [r4, #0]
 80097e6:	6061      	str	r1, [r4, #4]
 80097e8:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade, "7C");
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	33cc      	adds	r3, #204	; 0xcc
 80097ee:	4a3b      	ldr	r2, [pc, #236]	; (80098dc <problem_fetch+0x85bc>)
 80097f0:	8811      	ldrh	r1, [r2, #0]
 80097f2:	7892      	ldrb	r2, [r2, #2]
 80097f4:	8019      	strh	r1, [r3, #0]
 80097f6:	709a      	strb	r2, [r3, #2]
			break;
 80097f8:	f011 bad8 	b.w	801adac <problem_fetch+0x19a8c>
		case 318 :
			strcpy(p->name,"CHAKA MAKA");
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	337c      	adds	r3, #124	; 0x7c
 8009800:	4937      	ldr	r1, [pc, #220]	; (80098e0 <problem_fetch+0x85c0>)
 8009802:	461a      	mov	r2, r3
 8009804:	460b      	mov	r3, r1
 8009806:	cb03      	ldmia	r3!, {r0, r1}
 8009808:	6010      	str	r0, [r2, #0]
 800980a:	6051      	str	r1, [r2, #4]
 800980c:	8819      	ldrh	r1, [r3, #0]
 800980e:	789b      	ldrb	r3, [r3, #2]
 8009810:	8111      	strh	r1, [r2, #8]
 8009812:	7293      	strb	r3, [r2, #10]
			p->moveSize = 7;
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	2207      	movs	r2, #7
 8009818:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"C,B,G,H,I,G,I");
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	3340      	adds	r3, #64	; 0x40
 800981e:	4a31      	ldr	r2, [pc, #196]	; (80098e4 <problem_fetch+0x85c4>)
 8009820:	461c      	mov	r4, r3
 8009822:	4613      	mov	r3, r2
 8009824:	cb07      	ldmia	r3!, {r0, r1, r2}
 8009826:	6020      	str	r0, [r4, #0]
 8009828:	6061      	str	r1, [r4, #4]
 800982a:	60a2      	str	r2, [r4, #8]
 800982c:	881b      	ldrh	r3, [r3, #0]
 800982e:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,10,10,13,7,17,18");
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	3304      	adds	r3, #4
 8009834:	4a2c      	ldr	r2, [pc, #176]	; (80098e8 <problem_fetch+0x85c8>)
 8009836:	461d      	mov	r5, r3
 8009838:	4614      	mov	r4, r2
 800983a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800983c:	6028      	str	r0, [r5, #0]
 800983e:	6069      	str	r1, [r5, #4]
 8009840:	60aa      	str	r2, [r5, #8]
 8009842:	60eb      	str	r3, [r5, #12]
 8009844:	8823      	ldrh	r3, [r4, #0]
 8009846:	78a2      	ldrb	r2, [r4, #2]
 8009848:	822b      	strh	r3, [r5, #16]
 800984a:	4613      	mov	r3, r2
 800984c:	74ab      	strb	r3, [r5, #18]
			strcpy(p->startFinish, "s,d,d,d,d,d,e");
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	33d8      	adds	r3, #216	; 0xd8
 8009852:	4a11      	ldr	r2, [pc, #68]	; (8009898 <problem_fetch+0x8578>)
 8009854:	461c      	mov	r4, r3
 8009856:	4613      	mov	r3, r2
 8009858:	cb07      	ldmia	r3!, {r0, r1, r2}
 800985a:	6020      	str	r0, [r4, #0]
 800985c:	6061      	str	r1, [r4, #4]
 800985e:	60a2      	str	r2, [r4, #8]
 8009860:	881b      	ldrh	r3, [r3, #0]
 8009862:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade, "7B");
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	33cc      	adds	r3, #204	; 0xcc
 8009868:	4a20      	ldr	r2, [pc, #128]	; (80098ec <problem_fetch+0x85cc>)
 800986a:	8811      	ldrh	r1, [r2, #0]
 800986c:	7892      	ldrb	r2, [r2, #2]
 800986e:	8019      	strh	r1, [r3, #0]
 8009870:	709a      	strb	r2, [r3, #2]
			break;
 8009872:	f011 ba9b 	b.w	801adac <problem_fetch+0x19a8c>
 8009876:	bf00      	nop
 8009878:	08024090 	.word	0x08024090
 800987c:	080240a0 	.word	0x080240a0
 8009880:	080240ac 	.word	0x080240ac
 8009884:	0802139c 	.word	0x0802139c
 8009888:	08021424 	.word	0x08021424
 800988c:	080240bc 	.word	0x080240bc
 8009890:	080240c8 	.word	0x080240c8
 8009894:	080240d8 	.word	0x080240d8
 8009898:	08021494 	.word	0x08021494
 800989c:	080240ec 	.word	0x080240ec
 80098a0:	080240f8 	.word	0x080240f8
 80098a4:	08022c9c 	.word	0x08022c9c
 80098a8:	08021320 	.word	0x08021320
 80098ac:	08024104 	.word	0x08024104
 80098b0:	08023a20 	.word	0x08023a20
 80098b4:	08024114 	.word	0x08024114
 80098b8:	08022028 	.word	0x08022028
 80098bc:	080212f4 	.word	0x080212f4
 80098c0:	08024120 	.word	0x08024120
 80098c4:	08024130 	.word	0x08024130
 80098c8:	08024140 	.word	0x08024140
 80098cc:	08021370 	.word	0x08021370
 80098d0:	08024154 	.word	0x08024154
 80098d4:	08024168 	.word	0x08024168
 80098d8:	08024174 	.word	0x08024174
 80098dc:	0802158c 	.word	0x0802158c
 80098e0:	08024184 	.word	0x08024184
 80098e4:	08024190 	.word	0x08024190
 80098e8:	080241a0 	.word	0x080241a0
 80098ec:	0802132c 	.word	0x0802132c
		case 319 :
			strcpy(p->name,"PAUNCH PINCHER");
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	337c      	adds	r3, #124	; 0x7c
 80098f4:	4abb      	ldr	r2, [pc, #748]	; (8009be4 <problem_fetch+0x88c4>)
 80098f6:	461c      	mov	r4, r3
 80098f8:	4613      	mov	r3, r2
 80098fa:	cb07      	ldmia	r3!, {r0, r1, r2}
 80098fc:	6020      	str	r0, [r4, #0]
 80098fe:	6061      	str	r1, [r4, #4]
 8009900:	60a2      	str	r2, [r4, #8]
 8009902:	881a      	ldrh	r2, [r3, #0]
 8009904:	789b      	ldrb	r3, [r3, #2]
 8009906:	81a2      	strh	r2, [r4, #12]
 8009908:	73a3      	strb	r3, [r4, #14]
			p->moveSize = 10;
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	220a      	movs	r2, #10
 800990e:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"J,H,H,F,C,F,G,C,K,I");
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	3340      	adds	r3, #64	; 0x40
 8009914:	4ab4      	ldr	r2, [pc, #720]	; (8009be8 <problem_fetch+0x88c8>)
 8009916:	461d      	mov	r5, r3
 8009918:	4614      	mov	r4, r2
 800991a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800991c:	6028      	str	r0, [r5, #0]
 800991e:	6069      	str	r1, [r5, #4]
 8009920:	60aa      	str	r2, [r5, #8]
 8009922:	60eb      	str	r3, [r5, #12]
 8009924:	6820      	ldr	r0, [r4, #0]
 8009926:	6128      	str	r0, [r5, #16]
			strcpy(p->moveNumbers,"5,5,8,11,8,13,15,5,14,18");
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	3304      	adds	r3, #4
 800992c:	4aaf      	ldr	r2, [pc, #700]	; (8009bec <problem_fetch+0x88cc>)
 800992e:	461d      	mov	r5, r3
 8009930:	4614      	mov	r4, r2
 8009932:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009934:	6028      	str	r0, [r5, #0]
 8009936:	6069      	str	r1, [r5, #4]
 8009938:	60aa      	str	r2, [r5, #8]
 800993a:	60eb      	str	r3, [r5, #12]
 800993c:	cc03      	ldmia	r4!, {r0, r1}
 800993e:	6128      	str	r0, [r5, #16]
 8009940:	6169      	str	r1, [r5, #20]
 8009942:	7823      	ldrb	r3, [r4, #0]
 8009944:	762b      	strb	r3, [r5, #24]
			strcpy(p->startFinish, "s,s,d,d,d,d,d,d,d,e");
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	33d8      	adds	r3, #216	; 0xd8
 800994a:	4aa9      	ldr	r2, [pc, #676]	; (8009bf0 <problem_fetch+0x88d0>)
 800994c:	461d      	mov	r5, r3
 800994e:	4614      	mov	r4, r2
 8009950:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009952:	6028      	str	r0, [r5, #0]
 8009954:	6069      	str	r1, [r5, #4]
 8009956:	60aa      	str	r2, [r5, #8]
 8009958:	60eb      	str	r3, [r5, #12]
 800995a:	6820      	ldr	r0, [r4, #0]
 800995c:	6128      	str	r0, [r5, #16]
			strcpy(p->grade, "6C");
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	33cc      	adds	r3, #204	; 0xcc
 8009962:	4aa4      	ldr	r2, [pc, #656]	; (8009bf4 <problem_fetch+0x88d4>)
 8009964:	8811      	ldrh	r1, [r2, #0]
 8009966:	7892      	ldrb	r2, [r2, #2]
 8009968:	8019      	strh	r1, [r3, #0]
 800996a:	709a      	strb	r2, [r3, #2]
			break;
 800996c:	f011 ba1e 	b.w	801adac <problem_fetch+0x19a8c>
		case 32 :
			strcpy(p->name,"ACG10");
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	337c      	adds	r3, #124	; 0x7c
 8009974:	4aa0      	ldr	r2, [pc, #640]	; (8009bf8 <problem_fetch+0x88d8>)
 8009976:	6810      	ldr	r0, [r2, #0]
 8009978:	6018      	str	r0, [r3, #0]
 800997a:	8892      	ldrh	r2, [r2, #4]
 800997c:	809a      	strh	r2, [r3, #4]
			p->moveSize = 7;
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	2207      	movs	r2, #7
 8009982:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"G,E,G,G,E,B,I");
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	3340      	adds	r3, #64	; 0x40
 8009988:	4a9c      	ldr	r2, [pc, #624]	; (8009bfc <problem_fetch+0x88dc>)
 800998a:	461c      	mov	r4, r3
 800998c:	4613      	mov	r3, r2
 800998e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8009990:	6020      	str	r0, [r4, #0]
 8009992:	6061      	str	r1, [r4, #4]
 8009994:	60a2      	str	r2, [r4, #8]
 8009996:	881b      	ldrh	r3, [r3, #0]
 8009998:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,8,15,14,12,10,18");
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	3304      	adds	r3, #4
 800999e:	4a98      	ldr	r2, [pc, #608]	; (8009c00 <problem_fetch+0x88e0>)
 80099a0:	461d      	mov	r5, r3
 80099a2:	4614      	mov	r4, r2
 80099a4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80099a6:	6028      	str	r0, [r5, #0]
 80099a8:	6069      	str	r1, [r5, #4]
 80099aa:	60aa      	str	r2, [r5, #8]
 80099ac:	60eb      	str	r3, [r5, #12]
 80099ae:	8823      	ldrh	r3, [r4, #0]
 80099b0:	78a2      	ldrb	r2, [r4, #2]
 80099b2:	822b      	strh	r3, [r5, #16]
 80099b4:	4613      	mov	r3, r2
 80099b6:	74ab      	strb	r3, [r5, #18]
			strcpy(p->startFinish, "s,d,d,d,d,d,e");
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	33d8      	adds	r3, #216	; 0xd8
 80099bc:	4a91      	ldr	r2, [pc, #580]	; (8009c04 <problem_fetch+0x88e4>)
 80099be:	461c      	mov	r4, r3
 80099c0:	4613      	mov	r3, r2
 80099c2:	cb07      	ldmia	r3!, {r0, r1, r2}
 80099c4:	6020      	str	r0, [r4, #0]
 80099c6:	6061      	str	r1, [r4, #4]
 80099c8:	60a2      	str	r2, [r4, #8]
 80099ca:	881b      	ldrh	r3, [r3, #0]
 80099cc:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade, "6B+");
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	33cc      	adds	r3, #204	; 0xcc
 80099d2:	4a8d      	ldr	r2, [pc, #564]	; (8009c08 <problem_fetch+0x88e8>)
 80099d4:	6810      	ldr	r0, [r2, #0]
 80099d6:	6018      	str	r0, [r3, #0]
			break;
 80099d8:	f011 b9e8 	b.w	801adac <problem_fetch+0x19a8c>
		case 320 :
			strcpy(p->name,"PROJECT V1");
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	337c      	adds	r3, #124	; 0x7c
 80099e0:	498a      	ldr	r1, [pc, #552]	; (8009c0c <problem_fetch+0x88ec>)
 80099e2:	461a      	mov	r2, r3
 80099e4:	460b      	mov	r3, r1
 80099e6:	cb03      	ldmia	r3!, {r0, r1}
 80099e8:	6010      	str	r0, [r2, #0]
 80099ea:	6051      	str	r1, [r2, #4]
 80099ec:	8819      	ldrh	r1, [r3, #0]
 80099ee:	789b      	ldrb	r3, [r3, #2]
 80099f0:	8111      	strh	r1, [r2, #8]
 80099f2:	7293      	strb	r3, [r2, #10]
			p->moveSize = 7;
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	2207      	movs	r2, #7
 80099f8:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"G,C,F,F,I,G,D");
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	3340      	adds	r3, #64	; 0x40
 80099fe:	4a84      	ldr	r2, [pc, #528]	; (8009c10 <problem_fetch+0x88f0>)
 8009a00:	461c      	mov	r4, r3
 8009a02:	4613      	mov	r3, r2
 8009a04:	cb07      	ldmia	r3!, {r0, r1, r2}
 8009a06:	6020      	str	r0, [r4, #0]
 8009a08:	6061      	str	r1, [r4, #4]
 8009a0a:	60a2      	str	r2, [r4, #8]
 8009a0c:	881b      	ldrh	r3, [r3, #0]
 8009a0e:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,8,11,13,14,17,18");
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	3304      	adds	r3, #4
 8009a14:	4a7f      	ldr	r2, [pc, #508]	; (8009c14 <problem_fetch+0x88f4>)
 8009a16:	461d      	mov	r5, r3
 8009a18:	4614      	mov	r4, r2
 8009a1a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009a1c:	6028      	str	r0, [r5, #0]
 8009a1e:	6069      	str	r1, [r5, #4]
 8009a20:	60aa      	str	r2, [r5, #8]
 8009a22:	60eb      	str	r3, [r5, #12]
 8009a24:	8823      	ldrh	r3, [r4, #0]
 8009a26:	78a2      	ldrb	r2, [r4, #2]
 8009a28:	822b      	strh	r3, [r5, #16]
 8009a2a:	4613      	mov	r3, r2
 8009a2c:	74ab      	strb	r3, [r5, #18]
			strcpy(p->startFinish, "s,d,d,d,d,d,e");
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	33d8      	adds	r3, #216	; 0xd8
 8009a32:	4a74      	ldr	r2, [pc, #464]	; (8009c04 <problem_fetch+0x88e4>)
 8009a34:	461c      	mov	r4, r3
 8009a36:	4613      	mov	r3, r2
 8009a38:	cb07      	ldmia	r3!, {r0, r1, r2}
 8009a3a:	6020      	str	r0, [r4, #0]
 8009a3c:	6061      	str	r1, [r4, #4]
 8009a3e:	60a2      	str	r2, [r4, #8]
 8009a40:	881b      	ldrh	r3, [r3, #0]
 8009a42:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade, "7B+");
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	33cc      	adds	r3, #204	; 0xcc
 8009a48:	4a73      	ldr	r2, [pc, #460]	; (8009c18 <problem_fetch+0x88f8>)
 8009a4a:	6810      	ldr	r0, [r2, #0]
 8009a4c:	6018      	str	r0, [r3, #0]
			break;
 8009a4e:	f011 b9ad 	b.w	801adac <problem_fetch+0x19a8c>
		case 321 :
			strcpy(p->name,"MR PINCH");
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	337c      	adds	r3, #124	; 0x7c
 8009a56:	4971      	ldr	r1, [pc, #452]	; (8009c1c <problem_fetch+0x88fc>)
 8009a58:	461a      	mov	r2, r3
 8009a5a:	460b      	mov	r3, r1
 8009a5c:	cb03      	ldmia	r3!, {r0, r1}
 8009a5e:	6010      	str	r0, [r2, #0]
 8009a60:	6051      	str	r1, [r2, #4]
 8009a62:	781b      	ldrb	r3, [r3, #0]
 8009a64:	7213      	strb	r3, [r2, #8]
			p->moveSize = 5;
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	2205      	movs	r2, #5
 8009a6a:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"G,C,G,E,D");
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	3340      	adds	r3, #64	; 0x40
 8009a70:	496b      	ldr	r1, [pc, #428]	; (8009c20 <problem_fetch+0x8900>)
 8009a72:	461a      	mov	r2, r3
 8009a74:	460b      	mov	r3, r1
 8009a76:	cb03      	ldmia	r3!, {r0, r1}
 8009a78:	6010      	str	r0, [r2, #0]
 8009a7a:	6051      	str	r1, [r2, #4]
 8009a7c:	881b      	ldrh	r3, [r3, #0]
 8009a7e:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"4,8,9,14,18");
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	3304      	adds	r3, #4
 8009a84:	4a67      	ldr	r2, [pc, #412]	; (8009c24 <problem_fetch+0x8904>)
 8009a86:	461c      	mov	r4, r3
 8009a88:	4613      	mov	r3, r2
 8009a8a:	cb07      	ldmia	r3!, {r0, r1, r2}
 8009a8c:	6020      	str	r0, [r4, #0]
 8009a8e:	6061      	str	r1, [r4, #4]
 8009a90:	60a2      	str	r2, [r4, #8]
			strcpy(p->startFinish, "s,d,d,d,e");
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	33d8      	adds	r3, #216	; 0xd8
 8009a96:	4964      	ldr	r1, [pc, #400]	; (8009c28 <problem_fetch+0x8908>)
 8009a98:	461a      	mov	r2, r3
 8009a9a:	460b      	mov	r3, r1
 8009a9c:	cb03      	ldmia	r3!, {r0, r1}
 8009a9e:	6010      	str	r0, [r2, #0]
 8009aa0:	6051      	str	r1, [r2, #4]
 8009aa2:	881b      	ldrh	r3, [r3, #0]
 8009aa4:	8113      	strh	r3, [r2, #8]
			strcpy(p->grade, "7B+");
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	33cc      	adds	r3, #204	; 0xcc
 8009aaa:	4a5b      	ldr	r2, [pc, #364]	; (8009c18 <problem_fetch+0x88f8>)
 8009aac:	6810      	ldr	r0, [r2, #0]
 8009aae:	6018      	str	r0, [r3, #0]
			break;
 8009ab0:	f011 b97c 	b.w	801adac <problem_fetch+0x19a8c>
		case 322 :
			strcpy(p->name,"MUCCA");
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	337c      	adds	r3, #124	; 0x7c
 8009ab8:	4a5c      	ldr	r2, [pc, #368]	; (8009c2c <problem_fetch+0x890c>)
 8009aba:	6810      	ldr	r0, [r2, #0]
 8009abc:	6018      	str	r0, [r3, #0]
 8009abe:	8892      	ldrh	r2, [r2, #4]
 8009ac0:	809a      	strh	r2, [r3, #4]
			p->moveSize = 4;
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	2204      	movs	r2, #4
 8009ac6:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"G,H,G,I");
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	3340      	adds	r3, #64	; 0x40
 8009acc:	4958      	ldr	r1, [pc, #352]	; (8009c30 <problem_fetch+0x8910>)
 8009ace:	461a      	mov	r2, r3
 8009ad0:	460b      	mov	r3, r1
 8009ad2:	cb03      	ldmia	r3!, {r0, r1}
 8009ad4:	6010      	str	r0, [r2, #0]
 8009ad6:	6051      	str	r1, [r2, #4]
			strcpy(p->moveNumbers,"4,10,14,18");
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	3304      	adds	r3, #4
 8009adc:	4955      	ldr	r1, [pc, #340]	; (8009c34 <problem_fetch+0x8914>)
 8009ade:	461a      	mov	r2, r3
 8009ae0:	460b      	mov	r3, r1
 8009ae2:	cb03      	ldmia	r3!, {r0, r1}
 8009ae4:	6010      	str	r0, [r2, #0]
 8009ae6:	6051      	str	r1, [r2, #4]
 8009ae8:	8819      	ldrh	r1, [r3, #0]
 8009aea:	789b      	ldrb	r3, [r3, #2]
 8009aec:	8111      	strh	r1, [r2, #8]
 8009aee:	7293      	strb	r3, [r2, #10]
			strcpy(p->startFinish, "s,d,d,e");
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	33d8      	adds	r3, #216	; 0xd8
 8009af4:	4950      	ldr	r1, [pc, #320]	; (8009c38 <problem_fetch+0x8918>)
 8009af6:	461a      	mov	r2, r3
 8009af8:	460b      	mov	r3, r1
 8009afa:	cb03      	ldmia	r3!, {r0, r1}
 8009afc:	6010      	str	r0, [r2, #0]
 8009afe:	6051      	str	r1, [r2, #4]
			strcpy(p->grade, "7A+");
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	33cc      	adds	r3, #204	; 0xcc
 8009b04:	4a4d      	ldr	r2, [pc, #308]	; (8009c3c <problem_fetch+0x891c>)
 8009b06:	6810      	ldr	r0, [r2, #0]
 8009b08:	6018      	str	r0, [r3, #0]
			break;
 8009b0a:	f011 b94f 	b.w	801adac <problem_fetch+0x19a8c>
		case 323 :
			strcpy(p->name,"COMEBACK 3.5");
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	337c      	adds	r3, #124	; 0x7c
 8009b12:	4a4b      	ldr	r2, [pc, #300]	; (8009c40 <problem_fetch+0x8920>)
 8009b14:	461c      	mov	r4, r3
 8009b16:	4613      	mov	r3, r2
 8009b18:	cb07      	ldmia	r3!, {r0, r1, r2}
 8009b1a:	6020      	str	r0, [r4, #0]
 8009b1c:	6061      	str	r1, [r4, #4]
 8009b1e:	60a2      	str	r2, [r4, #8]
 8009b20:	781b      	ldrb	r3, [r3, #0]
 8009b22:	7323      	strb	r3, [r4, #12]
			p->moveSize = 8;
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	2208      	movs	r2, #8
 8009b28:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"G,J,G,G,C,D,E,I");
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	3340      	adds	r3, #64	; 0x40
 8009b2e:	4a45      	ldr	r2, [pc, #276]	; (8009c44 <problem_fetch+0x8924>)
 8009b30:	461c      	mov	r4, r3
 8009b32:	4615      	mov	r5, r2
 8009b34:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009b36:	6020      	str	r0, [r4, #0]
 8009b38:	6061      	str	r1, [r4, #4]
 8009b3a:	60a2      	str	r2, [r4, #8]
 8009b3c:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,7,9,10,13,15,16,18");
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	3304      	adds	r3, #4
 8009b42:	4a41      	ldr	r2, [pc, #260]	; (8009c48 <problem_fetch+0x8928>)
 8009b44:	461d      	mov	r5, r3
 8009b46:	4614      	mov	r4, r2
 8009b48:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009b4a:	6028      	str	r0, [r5, #0]
 8009b4c:	6069      	str	r1, [r5, #4]
 8009b4e:	60aa      	str	r2, [r5, #8]
 8009b50:	60eb      	str	r3, [r5, #12]
 8009b52:	6820      	ldr	r0, [r4, #0]
 8009b54:	6128      	str	r0, [r5, #16]
 8009b56:	7923      	ldrb	r3, [r4, #4]
 8009b58:	752b      	strb	r3, [r5, #20]
			strcpy(p->startFinish, "s,d,d,d,d,d,d,e");
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	33d8      	adds	r3, #216	; 0xd8
 8009b5e:	4a3b      	ldr	r2, [pc, #236]	; (8009c4c <problem_fetch+0x892c>)
 8009b60:	461c      	mov	r4, r3
 8009b62:	4615      	mov	r5, r2
 8009b64:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009b66:	6020      	str	r0, [r4, #0]
 8009b68:	6061      	str	r1, [r4, #4]
 8009b6a:	60a2      	str	r2, [r4, #8]
 8009b6c:	60e3      	str	r3, [r4, #12]
			strcpy(p->grade, "6B+");
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	33cc      	adds	r3, #204	; 0xcc
 8009b72:	4a25      	ldr	r2, [pc, #148]	; (8009c08 <problem_fetch+0x88e8>)
 8009b74:	6810      	ldr	r0, [r2, #0]
 8009b76:	6018      	str	r0, [r3, #0]
			break;
 8009b78:	f011 b918 	b.w	801adac <problem_fetch+0x19a8c>
		case 324 :
			strcpy(p->name,"COMEBACK 4.0");
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	337c      	adds	r3, #124	; 0x7c
 8009b80:	4a33      	ldr	r2, [pc, #204]	; (8009c50 <problem_fetch+0x8930>)
 8009b82:	461c      	mov	r4, r3
 8009b84:	4613      	mov	r3, r2
 8009b86:	cb07      	ldmia	r3!, {r0, r1, r2}
 8009b88:	6020      	str	r0, [r4, #0]
 8009b8a:	6061      	str	r1, [r4, #4]
 8009b8c:	60a2      	str	r2, [r4, #8]
 8009b8e:	781b      	ldrb	r3, [r3, #0]
 8009b90:	7323      	strb	r3, [r4, #12]
			p->moveSize = 6;
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	2206      	movs	r2, #6
 8009b96:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"G,D,E,B,D,D");
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	3340      	adds	r3, #64	; 0x40
 8009b9c:	4a2d      	ldr	r2, [pc, #180]	; (8009c54 <problem_fetch+0x8934>)
 8009b9e:	461c      	mov	r4, r3
 8009ba0:	4613      	mov	r3, r2
 8009ba2:	cb07      	ldmia	r3!, {r0, r1, r2}
 8009ba4:	6020      	str	r0, [r4, #0]
 8009ba6:	6061      	str	r1, [r4, #4]
 8009ba8:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,7,9,12,15,18");
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	3304      	adds	r3, #4
 8009bae:	4a2a      	ldr	r2, [pc, #168]	; (8009c58 <problem_fetch+0x8938>)
 8009bb0:	461c      	mov	r4, r3
 8009bb2:	4613      	mov	r3, r2
 8009bb4:	cb07      	ldmia	r3!, {r0, r1, r2}
 8009bb6:	6020      	str	r0, [r4, #0]
 8009bb8:	6061      	str	r1, [r4, #4]
 8009bba:	60a2      	str	r2, [r4, #8]
 8009bbc:	881a      	ldrh	r2, [r3, #0]
 8009bbe:	789b      	ldrb	r3, [r3, #2]
 8009bc0:	81a2      	strh	r2, [r4, #12]
 8009bc2:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish, "s,d,d,d,d,e");
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	33d8      	adds	r3, #216	; 0xd8
 8009bc8:	4a24      	ldr	r2, [pc, #144]	; (8009c5c <problem_fetch+0x893c>)
 8009bca:	461c      	mov	r4, r3
 8009bcc:	4613      	mov	r3, r2
 8009bce:	cb07      	ldmia	r3!, {r0, r1, r2}
 8009bd0:	6020      	str	r0, [r4, #0]
 8009bd2:	6061      	str	r1, [r4, #4]
 8009bd4:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade, "6C+");
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	33cc      	adds	r3, #204	; 0xcc
 8009bda:	4a21      	ldr	r2, [pc, #132]	; (8009c60 <problem_fetch+0x8940>)
 8009bdc:	6810      	ldr	r0, [r2, #0]
 8009bde:	6018      	str	r0, [r3, #0]
			break;
 8009be0:	f011 b8e4 	b.w	801adac <problem_fetch+0x19a8c>
 8009be4:	080241b4 	.word	0x080241b4
 8009be8:	080241c4 	.word	0x080241c4
 8009bec:	080241d8 	.word	0x080241d8
 8009bf0:	080215fc 	.word	0x080215fc
 8009bf4:	08021370 	.word	0x08021370
 8009bf8:	080241f4 	.word	0x080241f4
 8009bfc:	080241fc 	.word	0x080241fc
 8009c00:	0802420c 	.word	0x0802420c
 8009c04:	08021494 	.word	0x08021494
 8009c08:	080212b0 	.word	0x080212b0
 8009c0c:	08024220 	.word	0x08024220
 8009c10:	0802422c 	.word	0x0802422c
 8009c14:	0802423c 	.word	0x0802423c
 8009c18:	08021848 	.word	0x08021848
 8009c1c:	08024250 	.word	0x08024250
 8009c20:	0802425c 	.word	0x0802425c
 8009c24:	0802178c 	.word	0x0802178c
 8009c28:	08021320 	.word	0x08021320
 8009c2c:	08024268 	.word	0x08024268
 8009c30:	08024270 	.word	0x08024270
 8009c34:	0802201c 	.word	0x0802201c
 8009c38:	08022028 	.word	0x08022028
 8009c3c:	08021424 	.word	0x08021424
 8009c40:	08024278 	.word	0x08024278
 8009c44:	08024288 	.word	0x08024288
 8009c48:	08024298 	.word	0x08024298
 8009c4c:	08021458 	.word	0x08021458
 8009c50:	080242b0 	.word	0x080242b0
 8009c54:	080242c0 	.word	0x080242c0
 8009c58:	080242cc 	.word	0x080242cc
 8009c5c:	0802139c 	.word	0x0802139c
 8009c60:	080213a8 	.word	0x080213a8
		case 325 :
			strcpy(p->name,"ACG79");
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	337c      	adds	r3, #124	; 0x7c
 8009c68:	4abe      	ldr	r2, [pc, #760]	; (8009f64 <problem_fetch+0x8c44>)
 8009c6a:	6810      	ldr	r0, [r2, #0]
 8009c6c:	6018      	str	r0, [r3, #0]
 8009c6e:	8892      	ldrh	r2, [r2, #4]
 8009c70:	809a      	strh	r2, [r3, #4]
			p->moveSize = 7;
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	2207      	movs	r2, #7
 8009c76:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"J,G,E,I,F,H,D");
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	3340      	adds	r3, #64	; 0x40
 8009c7c:	4aba      	ldr	r2, [pc, #744]	; (8009f68 <problem_fetch+0x8c48>)
 8009c7e:	461c      	mov	r4, r3
 8009c80:	4613      	mov	r3, r2
 8009c82:	cb07      	ldmia	r3!, {r0, r1, r2}
 8009c84:	6020      	str	r0, [r4, #0]
 8009c86:	6061      	str	r1, [r4, #4]
 8009c88:	60a2      	str	r2, [r4, #8]
 8009c8a:	881b      	ldrh	r3, [r3, #0]
 8009c8c:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,4,8,9,13,16,18");
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	3304      	adds	r3, #4
 8009c92:	4ab6      	ldr	r2, [pc, #728]	; (8009f6c <problem_fetch+0x8c4c>)
 8009c94:	461d      	mov	r5, r3
 8009c96:	4614      	mov	r4, r2
 8009c98:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009c9a:	6028      	str	r0, [r5, #0]
 8009c9c:	6069      	str	r1, [r5, #4]
 8009c9e:	60aa      	str	r2, [r5, #8]
 8009ca0:	60eb      	str	r3, [r5, #12]
 8009ca2:	7823      	ldrb	r3, [r4, #0]
 8009ca4:	742b      	strb	r3, [r5, #16]
			strcpy(p->startFinish, "s,s,d,d,d,d,e");
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	33d8      	adds	r3, #216	; 0xd8
 8009caa:	4ab1      	ldr	r2, [pc, #708]	; (8009f70 <problem_fetch+0x8c50>)
 8009cac:	461c      	mov	r4, r3
 8009cae:	4613      	mov	r3, r2
 8009cb0:	cb07      	ldmia	r3!, {r0, r1, r2}
 8009cb2:	6020      	str	r0, [r4, #0]
 8009cb4:	6061      	str	r1, [r4, #4]
 8009cb6:	60a2      	str	r2, [r4, #8]
 8009cb8:	881b      	ldrh	r3, [r3, #0]
 8009cba:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade, "7A");
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	33cc      	adds	r3, #204	; 0xcc
 8009cc0:	4aac      	ldr	r2, [pc, #688]	; (8009f74 <problem_fetch+0x8c54>)
 8009cc2:	8811      	ldrh	r1, [r2, #0]
 8009cc4:	7892      	ldrb	r2, [r2, #2]
 8009cc6:	8019      	strh	r1, [r3, #0]
 8009cc8:	709a      	strb	r2, [r3, #2]
			break;
 8009cca:	f011 b86f 	b.w	801adac <problem_fetch+0x19a8c>
		case 326 :
			strcpy(p->name,"BADMOTORFINGER");
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	337c      	adds	r3, #124	; 0x7c
 8009cd2:	4aa9      	ldr	r2, [pc, #676]	; (8009f78 <problem_fetch+0x8c58>)
 8009cd4:	461c      	mov	r4, r3
 8009cd6:	4613      	mov	r3, r2
 8009cd8:	cb07      	ldmia	r3!, {r0, r1, r2}
 8009cda:	6020      	str	r0, [r4, #0]
 8009cdc:	6061      	str	r1, [r4, #4]
 8009cde:	60a2      	str	r2, [r4, #8]
 8009ce0:	881a      	ldrh	r2, [r3, #0]
 8009ce2:	789b      	ldrb	r3, [r3, #2]
 8009ce4:	81a2      	strh	r2, [r4, #12]
 8009ce6:	73a3      	strb	r3, [r4, #14]
			p->moveSize = 7;
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	2207      	movs	r2, #7
 8009cec:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"E,C,F,F,J,E,D");
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	3340      	adds	r3, #64	; 0x40
 8009cf2:	4aa2      	ldr	r2, [pc, #648]	; (8009f7c <problem_fetch+0x8c5c>)
 8009cf4:	461c      	mov	r4, r3
 8009cf6:	4613      	mov	r3, r2
 8009cf8:	cb07      	ldmia	r3!, {r0, r1, r2}
 8009cfa:	6020      	str	r0, [r4, #0]
 8009cfc:	6061      	str	r1, [r4, #4]
 8009cfe:	60a2      	str	r2, [r4, #8]
 8009d00:	881b      	ldrh	r3, [r3, #0]
 8009d02:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"6,8,11,13,13,16,18");
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	3304      	adds	r3, #4
 8009d08:	4a9d      	ldr	r2, [pc, #628]	; (8009f80 <problem_fetch+0x8c60>)
 8009d0a:	461d      	mov	r5, r3
 8009d0c:	4614      	mov	r4, r2
 8009d0e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009d10:	6028      	str	r0, [r5, #0]
 8009d12:	6069      	str	r1, [r5, #4]
 8009d14:	60aa      	str	r2, [r5, #8]
 8009d16:	60eb      	str	r3, [r5, #12]
 8009d18:	8823      	ldrh	r3, [r4, #0]
 8009d1a:	78a2      	ldrb	r2, [r4, #2]
 8009d1c:	822b      	strh	r3, [r5, #16]
 8009d1e:	4613      	mov	r3, r2
 8009d20:	74ab      	strb	r3, [r5, #18]
			strcpy(p->startFinish, "s,d,d,d,d,d,e");
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	33d8      	adds	r3, #216	; 0xd8
 8009d26:	4a97      	ldr	r2, [pc, #604]	; (8009f84 <problem_fetch+0x8c64>)
 8009d28:	461c      	mov	r4, r3
 8009d2a:	4613      	mov	r3, r2
 8009d2c:	cb07      	ldmia	r3!, {r0, r1, r2}
 8009d2e:	6020      	str	r0, [r4, #0]
 8009d30:	6061      	str	r1, [r4, #4]
 8009d32:	60a2      	str	r2, [r4, #8]
 8009d34:	881b      	ldrh	r3, [r3, #0]
 8009d36:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade, "7A");
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	33cc      	adds	r3, #204	; 0xcc
 8009d3c:	4a8d      	ldr	r2, [pc, #564]	; (8009f74 <problem_fetch+0x8c54>)
 8009d3e:	8811      	ldrh	r1, [r2, #0]
 8009d40:	7892      	ldrb	r2, [r2, #2]
 8009d42:	8019      	strh	r1, [r3, #0]
 8009d44:	709a      	strb	r2, [r3, #2]
			break;
 8009d46:	f011 b831 	b.w	801adac <problem_fetch+0x19a8c>
		case 327 :
			strcpy(p->name,"JAB 2017");
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	337c      	adds	r3, #124	; 0x7c
 8009d4e:	498e      	ldr	r1, [pc, #568]	; (8009f88 <problem_fetch+0x8c68>)
 8009d50:	461a      	mov	r2, r3
 8009d52:	460b      	mov	r3, r1
 8009d54:	cb03      	ldmia	r3!, {r0, r1}
 8009d56:	6010      	str	r0, [r2, #0]
 8009d58:	6051      	str	r1, [r2, #4]
 8009d5a:	781b      	ldrb	r3, [r3, #0]
 8009d5c:	7213      	strb	r3, [r2, #8]
			p->moveSize = 5;
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	2205      	movs	r2, #5
 8009d62:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"G,E,G,G,I");
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	3340      	adds	r3, #64	; 0x40
 8009d68:	4988      	ldr	r1, [pc, #544]	; (8009f8c <problem_fetch+0x8c6c>)
 8009d6a:	461a      	mov	r2, r3
 8009d6c:	460b      	mov	r3, r1
 8009d6e:	cb03      	ldmia	r3!, {r0, r1}
 8009d70:	6010      	str	r0, [r2, #0]
 8009d72:	6051      	str	r1, [r2, #4]
 8009d74:	881b      	ldrh	r3, [r3, #0]
 8009d76:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"4,8,10,15,18");
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	3304      	adds	r3, #4
 8009d7c:	4a84      	ldr	r2, [pc, #528]	; (8009f90 <problem_fetch+0x8c70>)
 8009d7e:	461c      	mov	r4, r3
 8009d80:	4613      	mov	r3, r2
 8009d82:	cb07      	ldmia	r3!, {r0, r1, r2}
 8009d84:	6020      	str	r0, [r4, #0]
 8009d86:	6061      	str	r1, [r4, #4]
 8009d88:	60a2      	str	r2, [r4, #8]
 8009d8a:	781b      	ldrb	r3, [r3, #0]
 8009d8c:	7323      	strb	r3, [r4, #12]
			strcpy(p->startFinish, "s,d,d,d,e");
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	33d8      	adds	r3, #216	; 0xd8
 8009d92:	4980      	ldr	r1, [pc, #512]	; (8009f94 <problem_fetch+0x8c74>)
 8009d94:	461a      	mov	r2, r3
 8009d96:	460b      	mov	r3, r1
 8009d98:	cb03      	ldmia	r3!, {r0, r1}
 8009d9a:	6010      	str	r0, [r2, #0]
 8009d9c:	6051      	str	r1, [r2, #4]
 8009d9e:	881b      	ldrh	r3, [r3, #0]
 8009da0:	8113      	strh	r3, [r2, #8]
			strcpy(p->grade, "7B");
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	33cc      	adds	r3, #204	; 0xcc
 8009da6:	4a7c      	ldr	r2, [pc, #496]	; (8009f98 <problem_fetch+0x8c78>)
 8009da8:	8811      	ldrh	r1, [r2, #0]
 8009daa:	7892      	ldrb	r2, [r2, #2]
 8009dac:	8019      	strh	r1, [r3, #0]
 8009dae:	709a      	strb	r2, [r3, #2]
			break;
 8009db0:	f010 bffc 	b.w	801adac <problem_fetch+0x19a8c>
		case 328 :
			strcpy(p->name,"SCRUMPY MCBUTTERBALLS");
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	337c      	adds	r3, #124	; 0x7c
 8009db8:	4a78      	ldr	r2, [pc, #480]	; (8009f9c <problem_fetch+0x8c7c>)
 8009dba:	461d      	mov	r5, r3
 8009dbc:	4614      	mov	r4, r2
 8009dbe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009dc0:	6028      	str	r0, [r5, #0]
 8009dc2:	6069      	str	r1, [r5, #4]
 8009dc4:	60aa      	str	r2, [r5, #8]
 8009dc6:	60eb      	str	r3, [r5, #12]
 8009dc8:	6820      	ldr	r0, [r4, #0]
 8009dca:	6128      	str	r0, [r5, #16]
 8009dcc:	88a3      	ldrh	r3, [r4, #4]
 8009dce:	82ab      	strh	r3, [r5, #20]
			p->moveSize = 5;
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	2205      	movs	r2, #5
 8009dd4:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"C,C,H,G,D");
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	3340      	adds	r3, #64	; 0x40
 8009dda:	4971      	ldr	r1, [pc, #452]	; (8009fa0 <problem_fetch+0x8c80>)
 8009ddc:	461a      	mov	r2, r3
 8009dde:	460b      	mov	r3, r1
 8009de0:	cb03      	ldmia	r3!, {r0, r1}
 8009de2:	6010      	str	r0, [r2, #0]
 8009de4:	6051      	str	r1, [r2, #4]
 8009de6:	881b      	ldrh	r3, [r3, #0]
 8009de8:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"5,8,10,14,18");
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	3304      	adds	r3, #4
 8009dee:	4a6d      	ldr	r2, [pc, #436]	; (8009fa4 <problem_fetch+0x8c84>)
 8009df0:	461c      	mov	r4, r3
 8009df2:	4613      	mov	r3, r2
 8009df4:	cb07      	ldmia	r3!, {r0, r1, r2}
 8009df6:	6020      	str	r0, [r4, #0]
 8009df8:	6061      	str	r1, [r4, #4]
 8009dfa:	60a2      	str	r2, [r4, #8]
 8009dfc:	781b      	ldrb	r3, [r3, #0]
 8009dfe:	7323      	strb	r3, [r4, #12]
			strcpy(p->startFinish, "s,d,d,d,e");
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	33d8      	adds	r3, #216	; 0xd8
 8009e04:	4963      	ldr	r1, [pc, #396]	; (8009f94 <problem_fetch+0x8c74>)
 8009e06:	461a      	mov	r2, r3
 8009e08:	460b      	mov	r3, r1
 8009e0a:	cb03      	ldmia	r3!, {r0, r1}
 8009e0c:	6010      	str	r0, [r2, #0]
 8009e0e:	6051      	str	r1, [r2, #4]
 8009e10:	881b      	ldrh	r3, [r3, #0]
 8009e12:	8113      	strh	r3, [r2, #8]
			strcpy(p->grade, "7A+");
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	33cc      	adds	r3, #204	; 0xcc
 8009e18:	4a63      	ldr	r2, [pc, #396]	; (8009fa8 <problem_fetch+0x8c88>)
 8009e1a:	6810      	ldr	r0, [r2, #0]
 8009e1c:	6018      	str	r0, [r3, #0]
			break;
 8009e1e:	f010 bfc5 	b.w	801adac <problem_fetch+0x19a8c>
		case 329 :
			strcpy(p->name,"SOFT SERVE");
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	337c      	adds	r3, #124	; 0x7c
 8009e26:	4961      	ldr	r1, [pc, #388]	; (8009fac <problem_fetch+0x8c8c>)
 8009e28:	461a      	mov	r2, r3
 8009e2a:	460b      	mov	r3, r1
 8009e2c:	cb03      	ldmia	r3!, {r0, r1}
 8009e2e:	6010      	str	r0, [r2, #0]
 8009e30:	6051      	str	r1, [r2, #4]
 8009e32:	8819      	ldrh	r1, [r3, #0]
 8009e34:	789b      	ldrb	r3, [r3, #2]
 8009e36:	8111      	strh	r1, [r2, #8]
 8009e38:	7293      	strb	r3, [r2, #10]
			p->moveSize = 6;
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	2206      	movs	r2, #6
 8009e3e:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"G,H,D,D,E,I");
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	3340      	adds	r3, #64	; 0x40
 8009e44:	4a5a      	ldr	r2, [pc, #360]	; (8009fb0 <problem_fetch+0x8c90>)
 8009e46:	461c      	mov	r4, r3
 8009e48:	4613      	mov	r3, r2
 8009e4a:	cb07      	ldmia	r3!, {r0, r1, r2}
 8009e4c:	6020      	str	r0, [r4, #0]
 8009e4e:	6061      	str	r1, [r4, #4]
 8009e50:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"6,8,11,15,16,18");
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	3304      	adds	r3, #4
 8009e56:	4a57      	ldr	r2, [pc, #348]	; (8009fb4 <problem_fetch+0x8c94>)
 8009e58:	461c      	mov	r4, r3
 8009e5a:	4615      	mov	r5, r2
 8009e5c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009e5e:	6020      	str	r0, [r4, #0]
 8009e60:	6061      	str	r1, [r4, #4]
 8009e62:	60a2      	str	r2, [r4, #8]
 8009e64:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish, "s,d,d,d,d,e");
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	33d8      	adds	r3, #216	; 0xd8
 8009e6a:	4a53      	ldr	r2, [pc, #332]	; (8009fb8 <problem_fetch+0x8c98>)
 8009e6c:	461c      	mov	r4, r3
 8009e6e:	4613      	mov	r3, r2
 8009e70:	cb07      	ldmia	r3!, {r0, r1, r2}
 8009e72:	6020      	str	r0, [r4, #0]
 8009e74:	6061      	str	r1, [r4, #4]
 8009e76:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade, "7A+");
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	33cc      	adds	r3, #204	; 0xcc
 8009e7c:	4a4a      	ldr	r2, [pc, #296]	; (8009fa8 <problem_fetch+0x8c88>)
 8009e7e:	6810      	ldr	r0, [r2, #0]
 8009e80:	6018      	str	r0, [r3, #0]
			break;
 8009e82:	f010 bf93 	b.w	801adac <problem_fetch+0x19a8c>
		case 33 :
			strcpy(p->name,"SUPERNOVA");
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	337c      	adds	r3, #124	; 0x7c
 8009e8a:	494c      	ldr	r1, [pc, #304]	; (8009fbc <problem_fetch+0x8c9c>)
 8009e8c:	461a      	mov	r2, r3
 8009e8e:	460b      	mov	r3, r1
 8009e90:	cb03      	ldmia	r3!, {r0, r1}
 8009e92:	6010      	str	r0, [r2, #0]
 8009e94:	6051      	str	r1, [r2, #4]
 8009e96:	881b      	ldrh	r3, [r3, #0]
 8009e98:	8113      	strh	r3, [r2, #8]
			p->moveSize = 7;
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	2207      	movs	r2, #7
 8009e9e:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"J,H,C,F,F,H,D");
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	3340      	adds	r3, #64	; 0x40
 8009ea4:	4a46      	ldr	r2, [pc, #280]	; (8009fc0 <problem_fetch+0x8ca0>)
 8009ea6:	461c      	mov	r4, r3
 8009ea8:	4613      	mov	r3, r2
 8009eaa:	cb07      	ldmia	r3!, {r0, r1, r2}
 8009eac:	6020      	str	r0, [r4, #0]
 8009eae:	6061      	str	r1, [r4, #4]
 8009eb0:	60a2      	str	r2, [r4, #8]
 8009eb2:	881b      	ldrh	r3, [r3, #0]
 8009eb4:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,8,8,11,13,16,18");
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	3304      	adds	r3, #4
 8009eba:	4a42      	ldr	r2, [pc, #264]	; (8009fc4 <problem_fetch+0x8ca4>)
 8009ebc:	461d      	mov	r5, r3
 8009ebe:	4614      	mov	r4, r2
 8009ec0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009ec2:	6028      	str	r0, [r5, #0]
 8009ec4:	6069      	str	r1, [r5, #4]
 8009ec6:	60aa      	str	r2, [r5, #8]
 8009ec8:	60eb      	str	r3, [r5, #12]
 8009eca:	8823      	ldrh	r3, [r4, #0]
 8009ecc:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish, "s,d,d,d,d,d,e");
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	33d8      	adds	r3, #216	; 0xd8
 8009ed2:	4a2c      	ldr	r2, [pc, #176]	; (8009f84 <problem_fetch+0x8c64>)
 8009ed4:	461c      	mov	r4, r3
 8009ed6:	4613      	mov	r3, r2
 8009ed8:	cb07      	ldmia	r3!, {r0, r1, r2}
 8009eda:	6020      	str	r0, [r4, #0]
 8009edc:	6061      	str	r1, [r4, #4]
 8009ede:	60a2      	str	r2, [r4, #8]
 8009ee0:	881b      	ldrh	r3, [r3, #0]
 8009ee2:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade, "7A");
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	33cc      	adds	r3, #204	; 0xcc
 8009ee8:	4a22      	ldr	r2, [pc, #136]	; (8009f74 <problem_fetch+0x8c54>)
 8009eea:	8811      	ldrh	r1, [r2, #0]
 8009eec:	7892      	ldrb	r2, [r2, #2]
 8009eee:	8019      	strh	r1, [r3, #0]
 8009ef0:	709a      	strb	r2, [r3, #2]
			break;
 8009ef2:	f010 bf5b 	b.w	801adac <problem_fetch+0x19a8c>
		case 330 :
			strcpy(p->name,"OH MY FAT FINGERS...");
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	337c      	adds	r3, #124	; 0x7c
 8009efa:	4a33      	ldr	r2, [pc, #204]	; (8009fc8 <problem_fetch+0x8ca8>)
 8009efc:	461d      	mov	r5, r3
 8009efe:	4614      	mov	r4, r2
 8009f00:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009f02:	6028      	str	r0, [r5, #0]
 8009f04:	6069      	str	r1, [r5, #4]
 8009f06:	60aa      	str	r2, [r5, #8]
 8009f08:	60eb      	str	r3, [r5, #12]
 8009f0a:	6820      	ldr	r0, [r4, #0]
 8009f0c:	6128      	str	r0, [r5, #16]
 8009f0e:	7923      	ldrb	r3, [r4, #4]
 8009f10:	752b      	strb	r3, [r5, #20]
			p->moveSize = 6;
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	2206      	movs	r2, #6
 8009f16:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"G,G,F,K,E,I");
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	3340      	adds	r3, #64	; 0x40
 8009f1c:	4a2b      	ldr	r2, [pc, #172]	; (8009fcc <problem_fetch+0x8cac>)
 8009f1e:	461c      	mov	r4, r3
 8009f20:	4613      	mov	r3, r2
 8009f22:	cb07      	ldmia	r3!, {r0, r1, r2}
 8009f24:	6020      	str	r0, [r4, #0]
 8009f26:	6061      	str	r1, [r4, #4]
 8009f28:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,10,13,14,8,18");
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	3304      	adds	r3, #4
 8009f2e:	4a28      	ldr	r2, [pc, #160]	; (8009fd0 <problem_fetch+0x8cb0>)
 8009f30:	461c      	mov	r4, r3
 8009f32:	4615      	mov	r5, r2
 8009f34:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009f36:	6020      	str	r0, [r4, #0]
 8009f38:	6061      	str	r1, [r4, #4]
 8009f3a:	60a2      	str	r2, [r4, #8]
 8009f3c:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish, "s,d,d,d,d,e");
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	33d8      	adds	r3, #216	; 0xd8
 8009f42:	4a1d      	ldr	r2, [pc, #116]	; (8009fb8 <problem_fetch+0x8c98>)
 8009f44:	461c      	mov	r4, r3
 8009f46:	4613      	mov	r3, r2
 8009f48:	cb07      	ldmia	r3!, {r0, r1, r2}
 8009f4a:	6020      	str	r0, [r4, #0]
 8009f4c:	6061      	str	r1, [r4, #4]
 8009f4e:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade, "6C");
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	33cc      	adds	r3, #204	; 0xcc
 8009f54:	4a1f      	ldr	r2, [pc, #124]	; (8009fd4 <problem_fetch+0x8cb4>)
 8009f56:	8811      	ldrh	r1, [r2, #0]
 8009f58:	7892      	ldrb	r2, [r2, #2]
 8009f5a:	8019      	strh	r1, [r3, #0]
 8009f5c:	709a      	strb	r2, [r3, #2]
			break;
 8009f5e:	f010 bf25 	b.w	801adac <problem_fetch+0x19a8c>
 8009f62:	bf00      	nop
 8009f64:	080242dc 	.word	0x080242dc
 8009f68:	080242e4 	.word	0x080242e4
 8009f6c:	080242f4 	.word	0x080242f4
 8009f70:	080212a0 	.word	0x080212a0
 8009f74:	080212f4 	.word	0x080212f4
 8009f78:	08024308 	.word	0x08024308
 8009f7c:	08024318 	.word	0x08024318
 8009f80:	08024328 	.word	0x08024328
 8009f84:	08021494 	.word	0x08021494
 8009f88:	0802433c 	.word	0x0802433c
 8009f8c:	08024348 	.word	0x08024348
 8009f90:	08024354 	.word	0x08024354
 8009f94:	08021320 	.word	0x08021320
 8009f98:	0802132c 	.word	0x0802132c
 8009f9c:	08024364 	.word	0x08024364
 8009fa0:	0802437c 	.word	0x0802437c
 8009fa4:	08024388 	.word	0x08024388
 8009fa8:	08021424 	.word	0x08021424
 8009fac:	08024398 	.word	0x08024398
 8009fb0:	080243a4 	.word	0x080243a4
 8009fb4:	080243b0 	.word	0x080243b0
 8009fb8:	0802139c 	.word	0x0802139c
 8009fbc:	080243c0 	.word	0x080243c0
 8009fc0:	080243cc 	.word	0x080243cc
 8009fc4:	080243dc 	.word	0x080243dc
 8009fc8:	080243f0 	.word	0x080243f0
 8009fcc:	08024408 	.word	0x08024408
 8009fd0:	08024414 	.word	0x08024414
 8009fd4:	08021370 	.word	0x08021370
		case 331 :
			strcpy(p->name,"HUMPA");
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	337c      	adds	r3, #124	; 0x7c
 8009fdc:	4aa7      	ldr	r2, [pc, #668]	; (800a27c <problem_fetch+0x8f5c>)
 8009fde:	6810      	ldr	r0, [r2, #0]
 8009fe0:	6018      	str	r0, [r3, #0]
 8009fe2:	8892      	ldrh	r2, [r2, #4]
 8009fe4:	809a      	strh	r2, [r3, #4]
			p->moveSize = 9;
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	2209      	movs	r2, #9
 8009fea:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"G,J,H,F,I,G,E,H,I");
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	3340      	adds	r3, #64	; 0x40
 8009ff0:	4aa3      	ldr	r2, [pc, #652]	; (800a280 <problem_fetch+0x8f60>)
 8009ff2:	461d      	mov	r5, r3
 8009ff4:	4614      	mov	r4, r2
 8009ff6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009ff8:	6028      	str	r0, [r5, #0]
 8009ffa:	6069      	str	r1, [r5, #4]
 8009ffc:	60aa      	str	r2, [r5, #8]
 8009ffe:	60eb      	str	r3, [r5, #12]
 800a000:	8823      	ldrh	r3, [r4, #0]
 800a002:	822b      	strh	r3, [r5, #16]
			strcpy(p->moveNumbers,"4,5,8,11,14,15,8,10,18");
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	3304      	adds	r3, #4
 800a008:	4a9e      	ldr	r2, [pc, #632]	; (800a284 <problem_fetch+0x8f64>)
 800a00a:	461c      	mov	r4, r3
 800a00c:	4615      	mov	r5, r2
 800a00e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a010:	6020      	str	r0, [r4, #0]
 800a012:	6061      	str	r1, [r4, #4]
 800a014:	60a2      	str	r2, [r4, #8]
 800a016:	60e3      	str	r3, [r4, #12]
 800a018:	6828      	ldr	r0, [r5, #0]
 800a01a:	6120      	str	r0, [r4, #16]
 800a01c:	88ab      	ldrh	r3, [r5, #4]
 800a01e:	79aa      	ldrb	r2, [r5, #6]
 800a020:	82a3      	strh	r3, [r4, #20]
 800a022:	4613      	mov	r3, r2
 800a024:	75a3      	strb	r3, [r4, #22]
			strcpy(p->startFinish, "s,s,d,d,d,d,d,d,e");
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	33d8      	adds	r3, #216	; 0xd8
 800a02a:	4a97      	ldr	r2, [pc, #604]	; (800a288 <problem_fetch+0x8f68>)
 800a02c:	461d      	mov	r5, r3
 800a02e:	4614      	mov	r4, r2
 800a030:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a032:	6028      	str	r0, [r5, #0]
 800a034:	6069      	str	r1, [r5, #4]
 800a036:	60aa      	str	r2, [r5, #8]
 800a038:	60eb      	str	r3, [r5, #12]
 800a03a:	8823      	ldrh	r3, [r4, #0]
 800a03c:	822b      	strh	r3, [r5, #16]
			strcpy(p->grade, "6B+");
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	33cc      	adds	r3, #204	; 0xcc
 800a042:	4a92      	ldr	r2, [pc, #584]	; (800a28c <problem_fetch+0x8f6c>)
 800a044:	6810      	ldr	r0, [r2, #0]
 800a046:	6018      	str	r0, [r3, #0]
			break;
 800a048:	f010 beb0 	b.w	801adac <problem_fetch+0x19a8c>
		case 332 :
			strcpy(p->name,"GOT PINCH?");
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	337c      	adds	r3, #124	; 0x7c
 800a050:	498f      	ldr	r1, [pc, #572]	; (800a290 <problem_fetch+0x8f70>)
 800a052:	461a      	mov	r2, r3
 800a054:	460b      	mov	r3, r1
 800a056:	cb03      	ldmia	r3!, {r0, r1}
 800a058:	6010      	str	r0, [r2, #0]
 800a05a:	6051      	str	r1, [r2, #4]
 800a05c:	8819      	ldrh	r1, [r3, #0]
 800a05e:	789b      	ldrb	r3, [r3, #2]
 800a060:	8111      	strh	r1, [r2, #8]
 800a062:	7293      	strb	r3, [r2, #10]
			p->moveSize = 8;
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	2208      	movs	r2, #8
 800a068:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"J,H,H,C,F,C,D,A");
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	3340      	adds	r3, #64	; 0x40
 800a06e:	4a89      	ldr	r2, [pc, #548]	; (800a294 <problem_fetch+0x8f74>)
 800a070:	461c      	mov	r4, r3
 800a072:	4615      	mov	r5, r2
 800a074:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a076:	6020      	str	r0, [r4, #0]
 800a078:	6061      	str	r1, [r4, #4]
 800a07a:	60a2      	str	r2, [r4, #8]
 800a07c:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,5,8,8,11,13,15,18");
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	3304      	adds	r3, #4
 800a082:	4a85      	ldr	r2, [pc, #532]	; (800a298 <problem_fetch+0x8f78>)
 800a084:	461d      	mov	r5, r3
 800a086:	4614      	mov	r4, r2
 800a088:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a08a:	6028      	str	r0, [r5, #0]
 800a08c:	6069      	str	r1, [r5, #4]
 800a08e:	60aa      	str	r2, [r5, #8]
 800a090:	60eb      	str	r3, [r5, #12]
 800a092:	6820      	ldr	r0, [r4, #0]
 800a094:	6128      	str	r0, [r5, #16]
			strcpy(p->startFinish, "s,s,d,d,d,d,d,e");
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	33d8      	adds	r3, #216	; 0xd8
 800a09a:	4a80      	ldr	r2, [pc, #512]	; (800a29c <problem_fetch+0x8f7c>)
 800a09c:	461c      	mov	r4, r3
 800a09e:	4615      	mov	r5, r2
 800a0a0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a0a2:	6020      	str	r0, [r4, #0]
 800a0a4:	6061      	str	r1, [r4, #4]
 800a0a6:	60a2      	str	r2, [r4, #8]
 800a0a8:	60e3      	str	r3, [r4, #12]
			strcpy(p->grade, "6B+");
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	33cc      	adds	r3, #204	; 0xcc
 800a0ae:	4a77      	ldr	r2, [pc, #476]	; (800a28c <problem_fetch+0x8f6c>)
 800a0b0:	6810      	ldr	r0, [r2, #0]
 800a0b2:	6018      	str	r0, [r3, #0]
			break;
 800a0b4:	f010 be7a 	b.w	801adac <problem_fetch+0x19a8c>
		case 333 :
			strcpy(p->name,"PINCHINGPANDA");
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	337c      	adds	r3, #124	; 0x7c
 800a0bc:	4a78      	ldr	r2, [pc, #480]	; (800a2a0 <problem_fetch+0x8f80>)
 800a0be:	461c      	mov	r4, r3
 800a0c0:	4613      	mov	r3, r2
 800a0c2:	cb07      	ldmia	r3!, {r0, r1, r2}
 800a0c4:	6020      	str	r0, [r4, #0]
 800a0c6:	6061      	str	r1, [r4, #4]
 800a0c8:	60a2      	str	r2, [r4, #8]
 800a0ca:	881b      	ldrh	r3, [r3, #0]
 800a0cc:	81a3      	strh	r3, [r4, #12]
			p->moveSize = 9;
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	2209      	movs	r2, #9
 800a0d2:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"J,H,H,C,F,C,D,G,A");
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	3340      	adds	r3, #64	; 0x40
 800a0d8:	4a72      	ldr	r2, [pc, #456]	; (800a2a4 <problem_fetch+0x8f84>)
 800a0da:	461d      	mov	r5, r3
 800a0dc:	4614      	mov	r4, r2
 800a0de:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a0e0:	6028      	str	r0, [r5, #0]
 800a0e2:	6069      	str	r1, [r5, #4]
 800a0e4:	60aa      	str	r2, [r5, #8]
 800a0e6:	60eb      	str	r3, [r5, #12]
 800a0e8:	8823      	ldrh	r3, [r4, #0]
 800a0ea:	822b      	strh	r3, [r5, #16]
			strcpy(p->moveNumbers,"5,5,8,8,11,13,15,9,18");
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	3304      	adds	r3, #4
 800a0f0:	4a6d      	ldr	r2, [pc, #436]	; (800a2a8 <problem_fetch+0x8f88>)
 800a0f2:	461d      	mov	r5, r3
 800a0f4:	4614      	mov	r4, r2
 800a0f6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a0f8:	6028      	str	r0, [r5, #0]
 800a0fa:	6069      	str	r1, [r5, #4]
 800a0fc:	60aa      	str	r2, [r5, #8]
 800a0fe:	60eb      	str	r3, [r5, #12]
 800a100:	6820      	ldr	r0, [r4, #0]
 800a102:	6128      	str	r0, [r5, #16]
 800a104:	88a3      	ldrh	r3, [r4, #4]
 800a106:	82ab      	strh	r3, [r5, #20]
			strcpy(p->startFinish, "s,s,d,d,d,d,d,d,e");
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	33d8      	adds	r3, #216	; 0xd8
 800a10c:	4a5e      	ldr	r2, [pc, #376]	; (800a288 <problem_fetch+0x8f68>)
 800a10e:	461d      	mov	r5, r3
 800a110:	4614      	mov	r4, r2
 800a112:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a114:	6028      	str	r0, [r5, #0]
 800a116:	6069      	str	r1, [r5, #4]
 800a118:	60aa      	str	r2, [r5, #8]
 800a11a:	60eb      	str	r3, [r5, #12]
 800a11c:	8823      	ldrh	r3, [r4, #0]
 800a11e:	822b      	strh	r3, [r5, #16]
			strcpy(p->grade, "6B+");
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	33cc      	adds	r3, #204	; 0xcc
 800a124:	4a59      	ldr	r2, [pc, #356]	; (800a28c <problem_fetch+0x8f6c>)
 800a126:	6810      	ldr	r0, [r2, #0]
 800a128:	6018      	str	r0, [r3, #0]
			break;
 800a12a:	f010 be3f 	b.w	801adac <problem_fetch+0x19a8c>
		case 334 :
			strcpy(p->name,"GIUDA BALLERINI");
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	337c      	adds	r3, #124	; 0x7c
 800a132:	4a5e      	ldr	r2, [pc, #376]	; (800a2ac <problem_fetch+0x8f8c>)
 800a134:	461c      	mov	r4, r3
 800a136:	4615      	mov	r5, r2
 800a138:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a13a:	6020      	str	r0, [r4, #0]
 800a13c:	6061      	str	r1, [r4, #4]
 800a13e:	60a2      	str	r2, [r4, #8]
 800a140:	60e3      	str	r3, [r4, #12]
			p->moveSize = 7;
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	2207      	movs	r2, #7
 800a146:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"G,D,F,F,I,G,D");
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	3340      	adds	r3, #64	; 0x40
 800a14c:	4a58      	ldr	r2, [pc, #352]	; (800a2b0 <problem_fetch+0x8f90>)
 800a14e:	461c      	mov	r4, r3
 800a150:	4613      	mov	r3, r2
 800a152:	cb07      	ldmia	r3!, {r0, r1, r2}
 800a154:	6020      	str	r0, [r4, #0]
 800a156:	6061      	str	r1, [r4, #4]
 800a158:	60a2      	str	r2, [r4, #8]
 800a15a:	881b      	ldrh	r3, [r3, #0]
 800a15c:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,7,11,13,14,17,18");
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	3304      	adds	r3, #4
 800a162:	4a54      	ldr	r2, [pc, #336]	; (800a2b4 <problem_fetch+0x8f94>)
 800a164:	461d      	mov	r5, r3
 800a166:	4614      	mov	r4, r2
 800a168:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a16a:	6028      	str	r0, [r5, #0]
 800a16c:	6069      	str	r1, [r5, #4]
 800a16e:	60aa      	str	r2, [r5, #8]
 800a170:	60eb      	str	r3, [r5, #12]
 800a172:	8823      	ldrh	r3, [r4, #0]
 800a174:	78a2      	ldrb	r2, [r4, #2]
 800a176:	822b      	strh	r3, [r5, #16]
 800a178:	4613      	mov	r3, r2
 800a17a:	74ab      	strb	r3, [r5, #18]
			strcpy(p->startFinish, "s,d,d,d,d,d,e");
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	33d8      	adds	r3, #216	; 0xd8
 800a180:	4a4d      	ldr	r2, [pc, #308]	; (800a2b8 <problem_fetch+0x8f98>)
 800a182:	461c      	mov	r4, r3
 800a184:	4613      	mov	r3, r2
 800a186:	cb07      	ldmia	r3!, {r0, r1, r2}
 800a188:	6020      	str	r0, [r4, #0]
 800a18a:	6061      	str	r1, [r4, #4]
 800a18c:	60a2      	str	r2, [r4, #8]
 800a18e:	881b      	ldrh	r3, [r3, #0]
 800a190:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade, "7B");
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	33cc      	adds	r3, #204	; 0xcc
 800a196:	4a49      	ldr	r2, [pc, #292]	; (800a2bc <problem_fetch+0x8f9c>)
 800a198:	8811      	ldrh	r1, [r2, #0]
 800a19a:	7892      	ldrb	r2, [r2, #2]
 800a19c:	8019      	strh	r1, [r3, #0]
 800a19e:	709a      	strb	r2, [r3, #2]
			break;
 800a1a0:	f010 be04 	b.w	801adac <problem_fetch+0x19a8c>
		case 335 :
			strcpy(p->name,"NIC_LAICALADDER");
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	337c      	adds	r3, #124	; 0x7c
 800a1a8:	4a45      	ldr	r2, [pc, #276]	; (800a2c0 <problem_fetch+0x8fa0>)
 800a1aa:	461c      	mov	r4, r3
 800a1ac:	4615      	mov	r5, r2
 800a1ae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a1b0:	6020      	str	r0, [r4, #0]
 800a1b2:	6061      	str	r1, [r4, #4]
 800a1b4:	60a2      	str	r2, [r4, #8]
 800a1b6:	60e3      	str	r3, [r4, #12]
			p->moveSize = 5;
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	2205      	movs	r2, #5
 800a1bc:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"E,I,G,J,I");
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	3340      	adds	r3, #64	; 0x40
 800a1c2:	4940      	ldr	r1, [pc, #256]	; (800a2c4 <problem_fetch+0x8fa4>)
 800a1c4:	461a      	mov	r2, r3
 800a1c6:	460b      	mov	r3, r1
 800a1c8:	cb03      	ldmia	r3!, {r0, r1}
 800a1ca:	6010      	str	r0, [r2, #0]
 800a1cc:	6051      	str	r1, [r2, #4]
 800a1ce:	881b      	ldrh	r3, [r3, #0]
 800a1d0:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"6,10,14,16,18");
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	3304      	adds	r3, #4
 800a1d6:	4a3c      	ldr	r2, [pc, #240]	; (800a2c8 <problem_fetch+0x8fa8>)
 800a1d8:	461c      	mov	r4, r3
 800a1da:	4613      	mov	r3, r2
 800a1dc:	cb07      	ldmia	r3!, {r0, r1, r2}
 800a1de:	6020      	str	r0, [r4, #0]
 800a1e0:	6061      	str	r1, [r4, #4]
 800a1e2:	60a2      	str	r2, [r4, #8]
 800a1e4:	881b      	ldrh	r3, [r3, #0]
 800a1e6:	81a3      	strh	r3, [r4, #12]
			strcpy(p->startFinish, "s,d,d,d,e");
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	33d8      	adds	r3, #216	; 0xd8
 800a1ec:	4937      	ldr	r1, [pc, #220]	; (800a2cc <problem_fetch+0x8fac>)
 800a1ee:	461a      	mov	r2, r3
 800a1f0:	460b      	mov	r3, r1
 800a1f2:	cb03      	ldmia	r3!, {r0, r1}
 800a1f4:	6010      	str	r0, [r2, #0]
 800a1f6:	6051      	str	r1, [r2, #4]
 800a1f8:	881b      	ldrh	r3, [r3, #0]
 800a1fa:	8113      	strh	r3, [r2, #8]
			strcpy(p->grade, "7A");
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	33cc      	adds	r3, #204	; 0xcc
 800a200:	4a33      	ldr	r2, [pc, #204]	; (800a2d0 <problem_fetch+0x8fb0>)
 800a202:	8811      	ldrh	r1, [r2, #0]
 800a204:	7892      	ldrb	r2, [r2, #2]
 800a206:	8019      	strh	r1, [r3, #0]
 800a208:	709a      	strb	r2, [r3, #2]
			break;
 800a20a:	f010 bdcf 	b.w	801adac <problem_fetch+0x19a8c>
		case 336 :
			strcpy(p->name,"A BIT REACHY");
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	337c      	adds	r3, #124	; 0x7c
 800a212:	4a30      	ldr	r2, [pc, #192]	; (800a2d4 <problem_fetch+0x8fb4>)
 800a214:	461c      	mov	r4, r3
 800a216:	4613      	mov	r3, r2
 800a218:	cb07      	ldmia	r3!, {r0, r1, r2}
 800a21a:	6020      	str	r0, [r4, #0]
 800a21c:	6061      	str	r1, [r4, #4]
 800a21e:	60a2      	str	r2, [r4, #8]
 800a220:	781b      	ldrb	r3, [r3, #0]
 800a222:	7323      	strb	r3, [r4, #12]
			p->moveSize = 8;
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	2208      	movs	r2, #8
 800a228:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"G,G,G,H,G,I,G,I");
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	3340      	adds	r3, #64	; 0x40
 800a22e:	4a2a      	ldr	r2, [pc, #168]	; (800a2d8 <problem_fetch+0x8fb8>)
 800a230:	461c      	mov	r4, r3
 800a232:	4615      	mov	r5, r2
 800a234:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a236:	6020      	str	r0, [r4, #0]
 800a238:	6061      	str	r1, [r4, #4]
 800a23a:	60a2      	str	r2, [r4, #8]
 800a23c:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,6,9,10,14,14,15,18");
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	3304      	adds	r3, #4
 800a242:	4a26      	ldr	r2, [pc, #152]	; (800a2dc <problem_fetch+0x8fbc>)
 800a244:	461d      	mov	r5, r3
 800a246:	4614      	mov	r4, r2
 800a248:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a24a:	6028      	str	r0, [r5, #0]
 800a24c:	6069      	str	r1, [r5, #4]
 800a24e:	60aa      	str	r2, [r5, #8]
 800a250:	60eb      	str	r3, [r5, #12]
 800a252:	6820      	ldr	r0, [r4, #0]
 800a254:	6128      	str	r0, [r5, #16]
 800a256:	7923      	ldrb	r3, [r4, #4]
 800a258:	752b      	strb	r3, [r5, #20]
			strcpy(p->startFinish, "s,s,d,d,d,d,d,e");
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	33d8      	adds	r3, #216	; 0xd8
 800a25e:	4a0f      	ldr	r2, [pc, #60]	; (800a29c <problem_fetch+0x8f7c>)
 800a260:	461c      	mov	r4, r3
 800a262:	4615      	mov	r5, r2
 800a264:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a266:	6020      	str	r0, [r4, #0]
 800a268:	6061      	str	r1, [r4, #4]
 800a26a:	60a2      	str	r2, [r4, #8]
 800a26c:	60e3      	str	r3, [r4, #12]
			strcpy(p->grade, "6B+");
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	33cc      	adds	r3, #204	; 0xcc
 800a272:	4a06      	ldr	r2, [pc, #24]	; (800a28c <problem_fetch+0x8f6c>)
 800a274:	6810      	ldr	r0, [r2, #0]
 800a276:	6018      	str	r0, [r3, #0]
			break;
 800a278:	f010 bd98 	b.w	801adac <problem_fetch+0x19a8c>
 800a27c:	08024424 	.word	0x08024424
 800a280:	0802442c 	.word	0x0802442c
 800a284:	08024440 	.word	0x08024440
 800a288:	0802187c 	.word	0x0802187c
 800a28c:	080212b0 	.word	0x080212b0
 800a290:	08024458 	.word	0x08024458
 800a294:	08024464 	.word	0x08024464
 800a298:	08024474 	.word	0x08024474
 800a29c:	080214cc 	.word	0x080214cc
 800a2a0:	08024488 	.word	0x08024488
 800a2a4:	08024498 	.word	0x08024498
 800a2a8:	080244ac 	.word	0x080244ac
 800a2ac:	080244c4 	.word	0x080244c4
 800a2b0:	080244d4 	.word	0x080244d4
 800a2b4:	080244e4 	.word	0x080244e4
 800a2b8:	08021494 	.word	0x08021494
 800a2bc:	0802132c 	.word	0x0802132c
 800a2c0:	080244f8 	.word	0x080244f8
 800a2c4:	08024508 	.word	0x08024508
 800a2c8:	08024514 	.word	0x08024514
 800a2cc:	08021320 	.word	0x08021320
 800a2d0:	080212f4 	.word	0x080212f4
 800a2d4:	08024524 	.word	0x08024524
 800a2d8:	08024534 	.word	0x08024534
 800a2dc:	08024544 	.word	0x08024544
		case 337 :
			strcpy(p->name,"PIZZAPUNT");
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	337c      	adds	r3, #124	; 0x7c
 800a2e4:	49c1      	ldr	r1, [pc, #772]	; (800a5ec <problem_fetch+0x92cc>)
 800a2e6:	461a      	mov	r2, r3
 800a2e8:	460b      	mov	r3, r1
 800a2ea:	cb03      	ldmia	r3!, {r0, r1}
 800a2ec:	6010      	str	r0, [r2, #0]
 800a2ee:	6051      	str	r1, [r2, #4]
 800a2f0:	881b      	ldrh	r3, [r3, #0]
 800a2f2:	8113      	strh	r3, [r2, #8]
			p->moveSize = 7;
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	2207      	movs	r2, #7
 800a2f8:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"G,E,E,A,E,B,D");
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	3340      	adds	r3, #64	; 0x40
 800a2fe:	4abc      	ldr	r2, [pc, #752]	; (800a5f0 <problem_fetch+0x92d0>)
 800a300:	461c      	mov	r4, r3
 800a302:	4613      	mov	r3, r2
 800a304:	cb07      	ldmia	r3!, {r0, r1, r2}
 800a306:	6020      	str	r0, [r4, #0]
 800a308:	6061      	str	r1, [r4, #4]
 800a30a:	60a2      	str	r2, [r4, #8]
 800a30c:	881b      	ldrh	r3, [r3, #0]
 800a30e:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,6,8,9,12,15,18");
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	3304      	adds	r3, #4
 800a314:	4ab7      	ldr	r2, [pc, #732]	; (800a5f4 <problem_fetch+0x92d4>)
 800a316:	461d      	mov	r5, r3
 800a318:	4614      	mov	r4, r2
 800a31a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a31c:	6028      	str	r0, [r5, #0]
 800a31e:	6069      	str	r1, [r5, #4]
 800a320:	60aa      	str	r2, [r5, #8]
 800a322:	60eb      	str	r3, [r5, #12]
 800a324:	7823      	ldrb	r3, [r4, #0]
 800a326:	742b      	strb	r3, [r5, #16]
			strcpy(p->startFinish, "s,d,d,d,d,d,e");
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	33d8      	adds	r3, #216	; 0xd8
 800a32c:	4ab2      	ldr	r2, [pc, #712]	; (800a5f8 <problem_fetch+0x92d8>)
 800a32e:	461c      	mov	r4, r3
 800a330:	4613      	mov	r3, r2
 800a332:	cb07      	ldmia	r3!, {r0, r1, r2}
 800a334:	6020      	str	r0, [r4, #0]
 800a336:	6061      	str	r1, [r4, #4]
 800a338:	60a2      	str	r2, [r4, #8]
 800a33a:	881b      	ldrh	r3, [r3, #0]
 800a33c:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade, "6B+");
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	33cc      	adds	r3, #204	; 0xcc
 800a342:	4aae      	ldr	r2, [pc, #696]	; (800a5fc <problem_fetch+0x92dc>)
 800a344:	6810      	ldr	r0, [r2, #0]
 800a346:	6018      	str	r0, [r3, #0]
			break;
 800a348:	f010 bd30 	b.w	801adac <problem_fetch+0x19a8c>
		case 338 :
			strcpy(p->name,"ONE PUNCH");
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	337c      	adds	r3, #124	; 0x7c
 800a350:	49ab      	ldr	r1, [pc, #684]	; (800a600 <problem_fetch+0x92e0>)
 800a352:	461a      	mov	r2, r3
 800a354:	460b      	mov	r3, r1
 800a356:	cb03      	ldmia	r3!, {r0, r1}
 800a358:	6010      	str	r0, [r2, #0]
 800a35a:	6051      	str	r1, [r2, #4]
 800a35c:	881b      	ldrh	r3, [r3, #0]
 800a35e:	8113      	strh	r3, [r2, #8]
			p->moveSize = 9;
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	2209      	movs	r2, #9
 800a364:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"G,J,G,K,H,K,G,I,D");
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	3340      	adds	r3, #64	; 0x40
 800a36a:	4aa6      	ldr	r2, [pc, #664]	; (800a604 <problem_fetch+0x92e4>)
 800a36c:	461d      	mov	r5, r3
 800a36e:	4614      	mov	r4, r2
 800a370:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a372:	6028      	str	r0, [r5, #0]
 800a374:	6069      	str	r1, [r5, #4]
 800a376:	60aa      	str	r2, [r5, #8]
 800a378:	60eb      	str	r3, [r5, #12]
 800a37a:	8823      	ldrh	r3, [r4, #0]
 800a37c:	822b      	strh	r3, [r5, #16]
			strcpy(p->moveNumbers,"4,5,15,9,12,14,17,7,18");
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	3304      	adds	r3, #4
 800a382:	4aa1      	ldr	r2, [pc, #644]	; (800a608 <problem_fetch+0x92e8>)
 800a384:	461c      	mov	r4, r3
 800a386:	4615      	mov	r5, r2
 800a388:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a38a:	6020      	str	r0, [r4, #0]
 800a38c:	6061      	str	r1, [r4, #4]
 800a38e:	60a2      	str	r2, [r4, #8]
 800a390:	60e3      	str	r3, [r4, #12]
 800a392:	6828      	ldr	r0, [r5, #0]
 800a394:	6120      	str	r0, [r4, #16]
 800a396:	88ab      	ldrh	r3, [r5, #4]
 800a398:	79aa      	ldrb	r2, [r5, #6]
 800a39a:	82a3      	strh	r3, [r4, #20]
 800a39c:	4613      	mov	r3, r2
 800a39e:	75a3      	strb	r3, [r4, #22]
			strcpy(p->startFinish, "s,s,d,d,d,d,d,d,e");
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	33d8      	adds	r3, #216	; 0xd8
 800a3a4:	4a99      	ldr	r2, [pc, #612]	; (800a60c <problem_fetch+0x92ec>)
 800a3a6:	461d      	mov	r5, r3
 800a3a8:	4614      	mov	r4, r2
 800a3aa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a3ac:	6028      	str	r0, [r5, #0]
 800a3ae:	6069      	str	r1, [r5, #4]
 800a3b0:	60aa      	str	r2, [r5, #8]
 800a3b2:	60eb      	str	r3, [r5, #12]
 800a3b4:	8823      	ldrh	r3, [r4, #0]
 800a3b6:	822b      	strh	r3, [r5, #16]
			strcpy(p->grade, "6C");
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	33cc      	adds	r3, #204	; 0xcc
 800a3bc:	4a94      	ldr	r2, [pc, #592]	; (800a610 <problem_fetch+0x92f0>)
 800a3be:	8811      	ldrh	r1, [r2, #0]
 800a3c0:	7892      	ldrb	r2, [r2, #2]
 800a3c2:	8019      	strh	r1, [r3, #0]
 800a3c4:	709a      	strb	r2, [r3, #2]
			break;
 800a3c6:	f010 bcf1 	b.w	801adac <problem_fetch+0x19a8c>
		case 339 :
			strcpy(p->name,"THE F(L)IGHT");
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	337c      	adds	r3, #124	; 0x7c
 800a3ce:	4a91      	ldr	r2, [pc, #580]	; (800a614 <problem_fetch+0x92f4>)
 800a3d0:	461c      	mov	r4, r3
 800a3d2:	4613      	mov	r3, r2
 800a3d4:	cb07      	ldmia	r3!, {r0, r1, r2}
 800a3d6:	6020      	str	r0, [r4, #0]
 800a3d8:	6061      	str	r1, [r4, #4]
 800a3da:	60a2      	str	r2, [r4, #8]
 800a3dc:	781b      	ldrb	r3, [r3, #0]
 800a3de:	7323      	strb	r3, [r4, #12]
			p->moveSize = 8;
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	2208      	movs	r2, #8
 800a3e4:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"C,B,G,F,J,J,E,I");
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	3340      	adds	r3, #64	; 0x40
 800a3ea:	4a8b      	ldr	r2, [pc, #556]	; (800a618 <problem_fetch+0x92f8>)
 800a3ec:	461c      	mov	r4, r3
 800a3ee:	4615      	mov	r5, r2
 800a3f0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a3f2:	6020      	str	r0, [r4, #0]
 800a3f4:	6061      	str	r1, [r4, #4]
 800a3f6:	60a2      	str	r2, [r4, #8]
 800a3f8:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,6,15,11,13,7,9,18");
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	3304      	adds	r3, #4
 800a3fe:	4a87      	ldr	r2, [pc, #540]	; (800a61c <problem_fetch+0x92fc>)
 800a400:	461d      	mov	r5, r3
 800a402:	4614      	mov	r4, r2
 800a404:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a406:	6028      	str	r0, [r5, #0]
 800a408:	6069      	str	r1, [r5, #4]
 800a40a:	60aa      	str	r2, [r5, #8]
 800a40c:	60eb      	str	r3, [r5, #12]
 800a40e:	6820      	ldr	r0, [r4, #0]
 800a410:	6128      	str	r0, [r5, #16]
			strcpy(p->startFinish, "s,s,d,d,d,d,d,e");
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	33d8      	adds	r3, #216	; 0xd8
 800a416:	4a82      	ldr	r2, [pc, #520]	; (800a620 <problem_fetch+0x9300>)
 800a418:	461c      	mov	r4, r3
 800a41a:	4615      	mov	r5, r2
 800a41c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a41e:	6020      	str	r0, [r4, #0]
 800a420:	6061      	str	r1, [r4, #4]
 800a422:	60a2      	str	r2, [r4, #8]
 800a424:	60e3      	str	r3, [r4, #12]
			strcpy(p->grade, "7A+");
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	33cc      	adds	r3, #204	; 0xcc
 800a42a:	4a7e      	ldr	r2, [pc, #504]	; (800a624 <problem_fetch+0x9304>)
 800a42c:	6810      	ldr	r0, [r2, #0]
 800a42e:	6018      	str	r0, [r3, #0]
			break;
 800a430:	f010 bcbc 	b.w	801adac <problem_fetch+0x19a8c>
		case 34 :
			strcpy(p->name,"MASTERFUL GAP");
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	337c      	adds	r3, #124	; 0x7c
 800a438:	4a7b      	ldr	r2, [pc, #492]	; (800a628 <problem_fetch+0x9308>)
 800a43a:	461c      	mov	r4, r3
 800a43c:	4613      	mov	r3, r2
 800a43e:	cb07      	ldmia	r3!, {r0, r1, r2}
 800a440:	6020      	str	r0, [r4, #0]
 800a442:	6061      	str	r1, [r4, #4]
 800a444:	60a2      	str	r2, [r4, #8]
 800a446:	881b      	ldrh	r3, [r3, #0]
 800a448:	81a3      	strh	r3, [r4, #12]
			p->moveSize = 7;
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	2207      	movs	r2, #7
 800a44e:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"A,B,C,C,E,F,I");
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	3340      	adds	r3, #64	; 0x40
 800a454:	4a75      	ldr	r2, [pc, #468]	; (800a62c <problem_fetch+0x930c>)
 800a456:	461c      	mov	r4, r3
 800a458:	4613      	mov	r3, r2
 800a45a:	cb07      	ldmia	r3!, {r0, r1, r2}
 800a45c:	6020      	str	r0, [r4, #0]
 800a45e:	6061      	str	r1, [r4, #4]
 800a460:	60a2      	str	r2, [r4, #8]
 800a462:	881b      	ldrh	r3, [r3, #0]
 800a464:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"9,6,5,13,16,11,18");
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	3304      	adds	r3, #4
 800a46a:	4a71      	ldr	r2, [pc, #452]	; (800a630 <problem_fetch+0x9310>)
 800a46c:	461d      	mov	r5, r3
 800a46e:	4614      	mov	r4, r2
 800a470:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a472:	6028      	str	r0, [r5, #0]
 800a474:	6069      	str	r1, [r5, #4]
 800a476:	60aa      	str	r2, [r5, #8]
 800a478:	60eb      	str	r3, [r5, #12]
 800a47a:	8823      	ldrh	r3, [r4, #0]
 800a47c:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish, "d,s,s,d,d,d,e");
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	33d8      	adds	r3, #216	; 0xd8
 800a482:	4a6c      	ldr	r2, [pc, #432]	; (800a634 <problem_fetch+0x9314>)
 800a484:	461c      	mov	r4, r3
 800a486:	4613      	mov	r3, r2
 800a488:	cb07      	ldmia	r3!, {r0, r1, r2}
 800a48a:	6020      	str	r0, [r4, #0]
 800a48c:	6061      	str	r1, [r4, #4]
 800a48e:	60a2      	str	r2, [r4, #8]
 800a490:	881b      	ldrh	r3, [r3, #0]
 800a492:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade, "7A+");
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	33cc      	adds	r3, #204	; 0xcc
 800a498:	4a62      	ldr	r2, [pc, #392]	; (800a624 <problem_fetch+0x9304>)
 800a49a:	6810      	ldr	r0, [r2, #0]
 800a49c:	6018      	str	r0, [r3, #0]
			break;
 800a49e:	f010 bc85 	b.w	801adac <problem_fetch+0x19a8c>
		case 340 :
			strcpy(p->name,"FACE DE RAT");
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	337c      	adds	r3, #124	; 0x7c
 800a4a6:	4a64      	ldr	r2, [pc, #400]	; (800a638 <problem_fetch+0x9318>)
 800a4a8:	461c      	mov	r4, r3
 800a4aa:	4613      	mov	r3, r2
 800a4ac:	cb07      	ldmia	r3!, {r0, r1, r2}
 800a4ae:	6020      	str	r0, [r4, #0]
 800a4b0:	6061      	str	r1, [r4, #4]
 800a4b2:	60a2      	str	r2, [r4, #8]
			p->moveSize = 8;
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	2208      	movs	r2, #8
 800a4b8:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"G,E,E,A,E,F,I,I");
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	3340      	adds	r3, #64	; 0x40
 800a4be:	4a5f      	ldr	r2, [pc, #380]	; (800a63c <problem_fetch+0x931c>)
 800a4c0:	461c      	mov	r4, r3
 800a4c2:	4615      	mov	r5, r2
 800a4c4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a4c6:	6020      	str	r0, [r4, #0]
 800a4c8:	6061      	str	r1, [r4, #4]
 800a4ca:	60a2      	str	r2, [r4, #8]
 800a4cc:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,6,8,9,12,13,14,18");
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	3304      	adds	r3, #4
 800a4d2:	4a5b      	ldr	r2, [pc, #364]	; (800a640 <problem_fetch+0x9320>)
 800a4d4:	461d      	mov	r5, r3
 800a4d6:	4614      	mov	r4, r2
 800a4d8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a4da:	6028      	str	r0, [r5, #0]
 800a4dc:	6069      	str	r1, [r5, #4]
 800a4de:	60aa      	str	r2, [r5, #8]
 800a4e0:	60eb      	str	r3, [r5, #12]
 800a4e2:	6820      	ldr	r0, [r4, #0]
 800a4e4:	6128      	str	r0, [r5, #16]
			strcpy(p->startFinish, "s,d,d,d,d,d,d,e");
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	33d8      	adds	r3, #216	; 0xd8
 800a4ea:	4a56      	ldr	r2, [pc, #344]	; (800a644 <problem_fetch+0x9324>)
 800a4ec:	461c      	mov	r4, r3
 800a4ee:	4615      	mov	r5, r2
 800a4f0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a4f2:	6020      	str	r0, [r4, #0]
 800a4f4:	6061      	str	r1, [r4, #4]
 800a4f6:	60a2      	str	r2, [r4, #8]
 800a4f8:	60e3      	str	r3, [r4, #12]
			strcpy(p->grade, "6C");
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	33cc      	adds	r3, #204	; 0xcc
 800a4fe:	4a44      	ldr	r2, [pc, #272]	; (800a610 <problem_fetch+0x92f0>)
 800a500:	8811      	ldrh	r1, [r2, #0]
 800a502:	7892      	ldrb	r2, [r2, #2]
 800a504:	8019      	strh	r1, [r3, #0]
 800a506:	709a      	strb	r2, [r3, #2]
			break;
 800a508:	f010 bc50 	b.w	801adac <problem_fetch+0x19a8c>
		case 341 :
			strcpy(p->name,"THE LITTLE ISLAND");
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	337c      	adds	r3, #124	; 0x7c
 800a510:	4a4d      	ldr	r2, [pc, #308]	; (800a648 <problem_fetch+0x9328>)
 800a512:	461d      	mov	r5, r3
 800a514:	4614      	mov	r4, r2
 800a516:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a518:	6028      	str	r0, [r5, #0]
 800a51a:	6069      	str	r1, [r5, #4]
 800a51c:	60aa      	str	r2, [r5, #8]
 800a51e:	60eb      	str	r3, [r5, #12]
 800a520:	8823      	ldrh	r3, [r4, #0]
 800a522:	822b      	strh	r3, [r5, #16]
			p->moveSize = 6;
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	2206      	movs	r2, #6
 800a528:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"G,G,K,H,G,D");
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	3340      	adds	r3, #64	; 0x40
 800a52e:	4a47      	ldr	r2, [pc, #284]	; (800a64c <problem_fetch+0x932c>)
 800a530:	461c      	mov	r4, r3
 800a532:	4613      	mov	r3, r2
 800a534:	cb07      	ldmia	r3!, {r0, r1, r2}
 800a536:	6020      	str	r0, [r4, #0]
 800a538:	6061      	str	r1, [r4, #4]
 800a53a:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,6,9,12,17,18");
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	3304      	adds	r3, #4
 800a540:	4a43      	ldr	r2, [pc, #268]	; (800a650 <problem_fetch+0x9330>)
 800a542:	461c      	mov	r4, r3
 800a544:	4613      	mov	r3, r2
 800a546:	cb07      	ldmia	r3!, {r0, r1, r2}
 800a548:	6020      	str	r0, [r4, #0]
 800a54a:	6061      	str	r1, [r4, #4]
 800a54c:	60a2      	str	r2, [r4, #8]
 800a54e:	881a      	ldrh	r2, [r3, #0]
 800a550:	789b      	ldrb	r3, [r3, #2]
 800a552:	81a2      	strh	r2, [r4, #12]
 800a554:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish, "s,d,d,d,d,e");
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	33d8      	adds	r3, #216	; 0xd8
 800a55a:	4a3e      	ldr	r2, [pc, #248]	; (800a654 <problem_fetch+0x9334>)
 800a55c:	461c      	mov	r4, r3
 800a55e:	4613      	mov	r3, r2
 800a560:	cb07      	ldmia	r3!, {r0, r1, r2}
 800a562:	6020      	str	r0, [r4, #0]
 800a564:	6061      	str	r1, [r4, #4]
 800a566:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade, "7B");
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	33cc      	adds	r3, #204	; 0xcc
 800a56c:	4a3a      	ldr	r2, [pc, #232]	; (800a658 <problem_fetch+0x9338>)
 800a56e:	8811      	ldrh	r1, [r2, #0]
 800a570:	7892      	ldrb	r2, [r2, #2]
 800a572:	8019      	strh	r1, [r3, #0]
 800a574:	709a      	strb	r2, [r3, #2]
			break;
 800a576:	f010 bc19 	b.w	801adac <problem_fetch+0x19a8c>
		case 342 :
			strcpy(p->name,"THE MOVE");
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	337c      	adds	r3, #124	; 0x7c
 800a57e:	4937      	ldr	r1, [pc, #220]	; (800a65c <problem_fetch+0x933c>)
 800a580:	461a      	mov	r2, r3
 800a582:	460b      	mov	r3, r1
 800a584:	cb03      	ldmia	r3!, {r0, r1}
 800a586:	6010      	str	r0, [r2, #0]
 800a588:	6051      	str	r1, [r2, #4]
 800a58a:	781b      	ldrb	r3, [r3, #0]
 800a58c:	7213      	strb	r3, [r2, #8]
			p->moveSize = 7;
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	2207      	movs	r2, #7
 800a592:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"G,E,E,E,H,H,I");
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	3340      	adds	r3, #64	; 0x40
 800a598:	4a31      	ldr	r2, [pc, #196]	; (800a660 <problem_fetch+0x9340>)
 800a59a:	461c      	mov	r4, r3
 800a59c:	4613      	mov	r3, r2
 800a59e:	cb07      	ldmia	r3!, {r0, r1, r2}
 800a5a0:	6020      	str	r0, [r4, #0]
 800a5a2:	6061      	str	r1, [r4, #4]
 800a5a4:	60a2      	str	r2, [r4, #8]
 800a5a6:	881b      	ldrh	r3, [r3, #0]
 800a5a8:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,6,9,12,12,16,18");
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	3304      	adds	r3, #4
 800a5ae:	4a2d      	ldr	r2, [pc, #180]	; (800a664 <problem_fetch+0x9344>)
 800a5b0:	461d      	mov	r5, r3
 800a5b2:	4614      	mov	r4, r2
 800a5b4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a5b6:	6028      	str	r0, [r5, #0]
 800a5b8:	6069      	str	r1, [r5, #4]
 800a5ba:	60aa      	str	r2, [r5, #8]
 800a5bc:	60eb      	str	r3, [r5, #12]
 800a5be:	8823      	ldrh	r3, [r4, #0]
 800a5c0:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish, "s,d,d,d,d,d,e");
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	33d8      	adds	r3, #216	; 0xd8
 800a5c6:	4a0c      	ldr	r2, [pc, #48]	; (800a5f8 <problem_fetch+0x92d8>)
 800a5c8:	461c      	mov	r4, r3
 800a5ca:	4613      	mov	r3, r2
 800a5cc:	cb07      	ldmia	r3!, {r0, r1, r2}
 800a5ce:	6020      	str	r0, [r4, #0]
 800a5d0:	6061      	str	r1, [r4, #4]
 800a5d2:	60a2      	str	r2, [r4, #8]
 800a5d4:	881b      	ldrh	r3, [r3, #0]
 800a5d6:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade, "6C");
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	33cc      	adds	r3, #204	; 0xcc
 800a5dc:	4a0c      	ldr	r2, [pc, #48]	; (800a610 <problem_fetch+0x92f0>)
 800a5de:	8811      	ldrh	r1, [r2, #0]
 800a5e0:	7892      	ldrb	r2, [r2, #2]
 800a5e2:	8019      	strh	r1, [r3, #0]
 800a5e4:	709a      	strb	r2, [r3, #2]
			break;
 800a5e6:	f010 bbe1 	b.w	801adac <problem_fetch+0x19a8c>
 800a5ea:	bf00      	nop
 800a5ec:	0802455c 	.word	0x0802455c
 800a5f0:	08024568 	.word	0x08024568
 800a5f4:	08024578 	.word	0x08024578
 800a5f8:	08021494 	.word	0x08021494
 800a5fc:	080212b0 	.word	0x080212b0
 800a600:	0802458c 	.word	0x0802458c
 800a604:	08024598 	.word	0x08024598
 800a608:	080245ac 	.word	0x080245ac
 800a60c:	0802187c 	.word	0x0802187c
 800a610:	08021370 	.word	0x08021370
 800a614:	080245c4 	.word	0x080245c4
 800a618:	080245d4 	.word	0x080245d4
 800a61c:	080245e4 	.word	0x080245e4
 800a620:	080214cc 	.word	0x080214cc
 800a624:	08021424 	.word	0x08021424
 800a628:	080245f8 	.word	0x080245f8
 800a62c:	08024608 	.word	0x08024608
 800a630:	08024618 	.word	0x08024618
 800a634:	0802462c 	.word	0x0802462c
 800a638:	0802463c 	.word	0x0802463c
 800a63c:	08024648 	.word	0x08024648
 800a640:	08024658 	.word	0x08024658
 800a644:	08021458 	.word	0x08021458
 800a648:	0802466c 	.word	0x0802466c
 800a64c:	08024680 	.word	0x08024680
 800a650:	0802468c 	.word	0x0802468c
 800a654:	0802139c 	.word	0x0802139c
 800a658:	0802132c 	.word	0x0802132c
 800a65c:	0802469c 	.word	0x0802469c
 800a660:	080246a8 	.word	0x080246a8
 800a664:	080246b8 	.word	0x080246b8
		case 343 :
			strcpy(p->name,"LITTLE COSA NOSTRA");
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	337c      	adds	r3, #124	; 0x7c
 800a66c:	4aaf      	ldr	r2, [pc, #700]	; (800a92c <problem_fetch+0x960c>)
 800a66e:	461d      	mov	r5, r3
 800a670:	4614      	mov	r4, r2
 800a672:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a674:	6028      	str	r0, [r5, #0]
 800a676:	6069      	str	r1, [r5, #4]
 800a678:	60aa      	str	r2, [r5, #8]
 800a67a:	60eb      	str	r3, [r5, #12]
 800a67c:	8823      	ldrh	r3, [r4, #0]
 800a67e:	78a2      	ldrb	r2, [r4, #2]
 800a680:	822b      	strh	r3, [r5, #16]
 800a682:	4613      	mov	r3, r2
 800a684:	74ab      	strb	r3, [r5, #18]
			p->moveSize = 9;
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	2209      	movs	r2, #9
 800a68a:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"C,E,C,F,K,G,I,E,D");
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	3340      	adds	r3, #64	; 0x40
 800a690:	4aa7      	ldr	r2, [pc, #668]	; (800a930 <problem_fetch+0x9610>)
 800a692:	461d      	mov	r5, r3
 800a694:	4614      	mov	r4, r2
 800a696:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a698:	6028      	str	r0, [r5, #0]
 800a69a:	6069      	str	r1, [r5, #4]
 800a69c:	60aa      	str	r2, [r5, #8]
 800a69e:	60eb      	str	r3, [r5, #12]
 800a6a0:	8823      	ldrh	r3, [r4, #0]
 800a6a2:	822b      	strh	r3, [r5, #16]
			strcpy(p->moveNumbers,"5,6,8,11,9,10,14,16,18");
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	3304      	adds	r3, #4
 800a6a8:	4aa2      	ldr	r2, [pc, #648]	; (800a934 <problem_fetch+0x9614>)
 800a6aa:	461c      	mov	r4, r3
 800a6ac:	4615      	mov	r5, r2
 800a6ae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a6b0:	6020      	str	r0, [r4, #0]
 800a6b2:	6061      	str	r1, [r4, #4]
 800a6b4:	60a2      	str	r2, [r4, #8]
 800a6b6:	60e3      	str	r3, [r4, #12]
 800a6b8:	6828      	ldr	r0, [r5, #0]
 800a6ba:	6120      	str	r0, [r4, #16]
 800a6bc:	88ab      	ldrh	r3, [r5, #4]
 800a6be:	79aa      	ldrb	r2, [r5, #6]
 800a6c0:	82a3      	strh	r3, [r4, #20]
 800a6c2:	4613      	mov	r3, r2
 800a6c4:	75a3      	strb	r3, [r4, #22]
			strcpy(p->startFinish, "s,s,d,d,d,d,d,d,e");
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	33d8      	adds	r3, #216	; 0xd8
 800a6ca:	4a9b      	ldr	r2, [pc, #620]	; (800a938 <problem_fetch+0x9618>)
 800a6cc:	461d      	mov	r5, r3
 800a6ce:	4614      	mov	r4, r2
 800a6d0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a6d2:	6028      	str	r0, [r5, #0]
 800a6d4:	6069      	str	r1, [r5, #4]
 800a6d6:	60aa      	str	r2, [r5, #8]
 800a6d8:	60eb      	str	r3, [r5, #12]
 800a6da:	8823      	ldrh	r3, [r4, #0]
 800a6dc:	822b      	strh	r3, [r5, #16]
			strcpy(p->grade, "6C");
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	33cc      	adds	r3, #204	; 0xcc
 800a6e2:	4a96      	ldr	r2, [pc, #600]	; (800a93c <problem_fetch+0x961c>)
 800a6e4:	8811      	ldrh	r1, [r2, #0]
 800a6e6:	7892      	ldrb	r2, [r2, #2]
 800a6e8:	8019      	strh	r1, [r3, #0]
 800a6ea:	709a      	strb	r2, [r3, #2]
			break;
 800a6ec:	f010 bb5e 	b.w	801adac <problem_fetch+0x19a8c>
		case 344 :
			strcpy(p->name,"SMALL COSA NOSTRA");
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	337c      	adds	r3, #124	; 0x7c
 800a6f4:	4a92      	ldr	r2, [pc, #584]	; (800a940 <problem_fetch+0x9620>)
 800a6f6:	461d      	mov	r5, r3
 800a6f8:	4614      	mov	r4, r2
 800a6fa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a6fc:	6028      	str	r0, [r5, #0]
 800a6fe:	6069      	str	r1, [r5, #4]
 800a700:	60aa      	str	r2, [r5, #8]
 800a702:	60eb      	str	r3, [r5, #12]
 800a704:	8823      	ldrh	r3, [r4, #0]
 800a706:	822b      	strh	r3, [r5, #16]
			p->moveSize = 8;
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	2208      	movs	r2, #8
 800a70c:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"G,E,J,F,E,J,H,I");
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	3340      	adds	r3, #64	; 0x40
 800a712:	4a8c      	ldr	r2, [pc, #560]	; (800a944 <problem_fetch+0x9624>)
 800a714:	461c      	mov	r4, r3
 800a716:	4615      	mov	r5, r2
 800a718:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a71a:	6020      	str	r0, [r4, #0]
 800a71c:	6061      	str	r1, [r4, #4]
 800a71e:	60a2      	str	r2, [r4, #8]
 800a720:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,8,7,11,12,13,16,18");
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	3304      	adds	r3, #4
 800a726:	4a88      	ldr	r2, [pc, #544]	; (800a948 <problem_fetch+0x9628>)
 800a728:	461d      	mov	r5, r3
 800a72a:	4614      	mov	r4, r2
 800a72c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a72e:	6028      	str	r0, [r5, #0]
 800a730:	6069      	str	r1, [r5, #4]
 800a732:	60aa      	str	r2, [r5, #8]
 800a734:	60eb      	str	r3, [r5, #12]
 800a736:	6820      	ldr	r0, [r4, #0]
 800a738:	6128      	str	r0, [r5, #16]
 800a73a:	7923      	ldrb	r3, [r4, #4]
 800a73c:	752b      	strb	r3, [r5, #20]
			strcpy(p->startFinish, "s,d,d,d,d,d,d,e");
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	33d8      	adds	r3, #216	; 0xd8
 800a742:	4a82      	ldr	r2, [pc, #520]	; (800a94c <problem_fetch+0x962c>)
 800a744:	461c      	mov	r4, r3
 800a746:	4615      	mov	r5, r2
 800a748:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a74a:	6020      	str	r0, [r4, #0]
 800a74c:	6061      	str	r1, [r4, #4]
 800a74e:	60a2      	str	r2, [r4, #8]
 800a750:	60e3      	str	r3, [r4, #12]
			strcpy(p->grade, "6C");
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	33cc      	adds	r3, #204	; 0xcc
 800a756:	4a79      	ldr	r2, [pc, #484]	; (800a93c <problem_fetch+0x961c>)
 800a758:	8811      	ldrh	r1, [r2, #0]
 800a75a:	7892      	ldrb	r2, [r2, #2]
 800a75c:	8019      	strh	r1, [r3, #0]
 800a75e:	709a      	strb	r2, [r3, #2]
			break;
 800a760:	f010 bb24 	b.w	801adac <problem_fetch+0x19a8c>
		case 345 :
			strcpy(p->name,"LA COSA NOSTRA");
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	337c      	adds	r3, #124	; 0x7c
 800a768:	4a79      	ldr	r2, [pc, #484]	; (800a950 <problem_fetch+0x9630>)
 800a76a:	461c      	mov	r4, r3
 800a76c:	4613      	mov	r3, r2
 800a76e:	cb07      	ldmia	r3!, {r0, r1, r2}
 800a770:	6020      	str	r0, [r4, #0]
 800a772:	6061      	str	r1, [r4, #4]
 800a774:	60a2      	str	r2, [r4, #8]
 800a776:	881a      	ldrh	r2, [r3, #0]
 800a778:	789b      	ldrb	r3, [r3, #2]
 800a77a:	81a2      	strh	r2, [r4, #12]
 800a77c:	73a3      	strb	r3, [r4, #14]
			p->moveSize = 9;
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	2209      	movs	r2, #9
 800a782:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"G,G,E,F,J,J,H,G,D");
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	3340      	adds	r3, #64	; 0x40
 800a788:	4a72      	ldr	r2, [pc, #456]	; (800a954 <problem_fetch+0x9634>)
 800a78a:	461d      	mov	r5, r3
 800a78c:	4614      	mov	r4, r2
 800a78e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a790:	6028      	str	r0, [r5, #0]
 800a792:	6069      	str	r1, [r5, #4]
 800a794:	60aa      	str	r2, [r5, #8]
 800a796:	60eb      	str	r3, [r5, #12]
 800a798:	8823      	ldrh	r3, [r4, #0]
 800a79a:	822b      	strh	r3, [r5, #16]
			strcpy(p->moveNumbers,"4,9,6,11,7,13,16,17,18");
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	3304      	adds	r3, #4
 800a7a0:	4a6d      	ldr	r2, [pc, #436]	; (800a958 <problem_fetch+0x9638>)
 800a7a2:	461c      	mov	r4, r3
 800a7a4:	4615      	mov	r5, r2
 800a7a6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a7a8:	6020      	str	r0, [r4, #0]
 800a7aa:	6061      	str	r1, [r4, #4]
 800a7ac:	60a2      	str	r2, [r4, #8]
 800a7ae:	60e3      	str	r3, [r4, #12]
 800a7b0:	6828      	ldr	r0, [r5, #0]
 800a7b2:	6120      	str	r0, [r4, #16]
 800a7b4:	88ab      	ldrh	r3, [r5, #4]
 800a7b6:	79aa      	ldrb	r2, [r5, #6]
 800a7b8:	82a3      	strh	r3, [r4, #20]
 800a7ba:	4613      	mov	r3, r2
 800a7bc:	75a3      	strb	r3, [r4, #22]
			strcpy(p->startFinish, "s,d,d,d,d,d,d,d,e");
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	33d8      	adds	r3, #216	; 0xd8
 800a7c2:	4a66      	ldr	r2, [pc, #408]	; (800a95c <problem_fetch+0x963c>)
 800a7c4:	461d      	mov	r5, r3
 800a7c6:	4614      	mov	r4, r2
 800a7c8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a7ca:	6028      	str	r0, [r5, #0]
 800a7cc:	6069      	str	r1, [r5, #4]
 800a7ce:	60aa      	str	r2, [r5, #8]
 800a7d0:	60eb      	str	r3, [r5, #12]
 800a7d2:	8823      	ldrh	r3, [r4, #0]
 800a7d4:	822b      	strh	r3, [r5, #16]
			strcpy(p->grade, "6C+");
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	33cc      	adds	r3, #204	; 0xcc
 800a7da:	4a61      	ldr	r2, [pc, #388]	; (800a960 <problem_fetch+0x9640>)
 800a7dc:	6810      	ldr	r0, [r2, #0]
 800a7de:	6018      	str	r0, [r3, #0]
			break;
 800a7e0:	f010 bae4 	b.w	801adac <problem_fetch+0x19a8c>
		case 346 :
			strcpy(p->name,"GTC&AMP;TCT");
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	337c      	adds	r3, #124	; 0x7c
 800a7e8:	4a5e      	ldr	r2, [pc, #376]	; (800a964 <problem_fetch+0x9644>)
 800a7ea:	461c      	mov	r4, r3
 800a7ec:	4613      	mov	r3, r2
 800a7ee:	cb07      	ldmia	r3!, {r0, r1, r2}
 800a7f0:	6020      	str	r0, [r4, #0]
 800a7f2:	6061      	str	r1, [r4, #4]
 800a7f4:	60a2      	str	r2, [r4, #8]
			p->moveSize = 7;
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	2207      	movs	r2, #7
 800a7fa:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"G,F,G,J,I,J,D");
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	3340      	adds	r3, #64	; 0x40
 800a800:	4a59      	ldr	r2, [pc, #356]	; (800a968 <problem_fetch+0x9648>)
 800a802:	461c      	mov	r4, r3
 800a804:	4613      	mov	r3, r2
 800a806:	cb07      	ldmia	r3!, {r0, r1, r2}
 800a808:	6020      	str	r0, [r4, #0]
 800a80a:	6061      	str	r1, [r4, #4]
 800a80c:	60a2      	str	r2, [r4, #8]
 800a80e:	881b      	ldrh	r3, [r3, #0]
 800a810:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,13,17,12,10,7,18");
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	3304      	adds	r3, #4
 800a816:	4a55      	ldr	r2, [pc, #340]	; (800a96c <problem_fetch+0x964c>)
 800a818:	461d      	mov	r5, r3
 800a81a:	4614      	mov	r4, r2
 800a81c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a81e:	6028      	str	r0, [r5, #0]
 800a820:	6069      	str	r1, [r5, #4]
 800a822:	60aa      	str	r2, [r5, #8]
 800a824:	60eb      	str	r3, [r5, #12]
 800a826:	8823      	ldrh	r3, [r4, #0]
 800a828:	78a2      	ldrb	r2, [r4, #2]
 800a82a:	822b      	strh	r3, [r5, #16]
 800a82c:	4613      	mov	r3, r2
 800a82e:	74ab      	strb	r3, [r5, #18]
			strcpy(p->startFinish, "s,d,d,d,d,d,e");
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	33d8      	adds	r3, #216	; 0xd8
 800a834:	4a4e      	ldr	r2, [pc, #312]	; (800a970 <problem_fetch+0x9650>)
 800a836:	461c      	mov	r4, r3
 800a838:	4613      	mov	r3, r2
 800a83a:	cb07      	ldmia	r3!, {r0, r1, r2}
 800a83c:	6020      	str	r0, [r4, #0]
 800a83e:	6061      	str	r1, [r4, #4]
 800a840:	60a2      	str	r2, [r4, #8]
 800a842:	881b      	ldrh	r3, [r3, #0]
 800a844:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade, "6C+");
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	33cc      	adds	r3, #204	; 0xcc
 800a84a:	4a45      	ldr	r2, [pc, #276]	; (800a960 <problem_fetch+0x9640>)
 800a84c:	6810      	ldr	r0, [r2, #0]
 800a84e:	6018      	str	r0, [r3, #0]
			break;
 800a850:	f010 baac 	b.w	801adac <problem_fetch+0x19a8c>
		case 347 :
			strcpy(p->name,"LES DRUS");
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	337c      	adds	r3, #124	; 0x7c
 800a858:	4946      	ldr	r1, [pc, #280]	; (800a974 <problem_fetch+0x9654>)
 800a85a:	461a      	mov	r2, r3
 800a85c:	460b      	mov	r3, r1
 800a85e:	cb03      	ldmia	r3!, {r0, r1}
 800a860:	6010      	str	r0, [r2, #0]
 800a862:	6051      	str	r1, [r2, #4]
 800a864:	781b      	ldrb	r3, [r3, #0]
 800a866:	7213      	strb	r3, [r2, #8]
			p->moveSize = 7;
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	2207      	movs	r2, #7
 800a86c:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"J,G,H,E,I,I,D");
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	3340      	adds	r3, #64	; 0x40
 800a872:	4a41      	ldr	r2, [pc, #260]	; (800a978 <problem_fetch+0x9658>)
 800a874:	461c      	mov	r4, r3
 800a876:	4613      	mov	r3, r2
 800a878:	cb07      	ldmia	r3!, {r0, r1, r2}
 800a87a:	6020      	str	r0, [r4, #0]
 800a87c:	6061      	str	r1, [r4, #4]
 800a87e:	60a2      	str	r2, [r4, #8]
 800a880:	881b      	ldrh	r3, [r3, #0]
 800a882:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,15,16,12,10,7,18");
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	3304      	adds	r3, #4
 800a888:	4a3c      	ldr	r2, [pc, #240]	; (800a97c <problem_fetch+0x965c>)
 800a88a:	461d      	mov	r5, r3
 800a88c:	4614      	mov	r4, r2
 800a88e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a890:	6028      	str	r0, [r5, #0]
 800a892:	6069      	str	r1, [r5, #4]
 800a894:	60aa      	str	r2, [r5, #8]
 800a896:	60eb      	str	r3, [r5, #12]
 800a898:	8823      	ldrh	r3, [r4, #0]
 800a89a:	78a2      	ldrb	r2, [r4, #2]
 800a89c:	822b      	strh	r3, [r5, #16]
 800a89e:	4613      	mov	r3, r2
 800a8a0:	74ab      	strb	r3, [r5, #18]
			strcpy(p->startFinish, "s,d,d,d,d,d,e");
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	33d8      	adds	r3, #216	; 0xd8
 800a8a6:	4a32      	ldr	r2, [pc, #200]	; (800a970 <problem_fetch+0x9650>)
 800a8a8:	461c      	mov	r4, r3
 800a8aa:	4613      	mov	r3, r2
 800a8ac:	cb07      	ldmia	r3!, {r0, r1, r2}
 800a8ae:	6020      	str	r0, [r4, #0]
 800a8b0:	6061      	str	r1, [r4, #4]
 800a8b2:	60a2      	str	r2, [r4, #8]
 800a8b4:	881b      	ldrh	r3, [r3, #0]
 800a8b6:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade, "7A");
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	33cc      	adds	r3, #204	; 0xcc
 800a8bc:	4a30      	ldr	r2, [pc, #192]	; (800a980 <problem_fetch+0x9660>)
 800a8be:	8811      	ldrh	r1, [r2, #0]
 800a8c0:	7892      	ldrb	r2, [r2, #2]
 800a8c2:	8019      	strh	r1, [r3, #0]
 800a8c4:	709a      	strb	r2, [r3, #2]
			break;
 800a8c6:	f010 ba71 	b.w	801adac <problem_fetch+0x19a8c>
		case 348 :
			strcpy(p->name,"NOIA");
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	337c      	adds	r3, #124	; 0x7c
 800a8ce:	4a2d      	ldr	r2, [pc, #180]	; (800a984 <problem_fetch+0x9664>)
 800a8d0:	6810      	ldr	r0, [r2, #0]
 800a8d2:	6018      	str	r0, [r3, #0]
 800a8d4:	7912      	ldrb	r2, [r2, #4]
 800a8d6:	711a      	strb	r2, [r3, #4]
			p->moveSize = 6;
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	2206      	movs	r2, #6
 800a8dc:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"G,G,C,E,A,A");
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	3340      	adds	r3, #64	; 0x40
 800a8e2:	4a29      	ldr	r2, [pc, #164]	; (800a988 <problem_fetch+0x9668>)
 800a8e4:	461c      	mov	r4, r3
 800a8e6:	4613      	mov	r3, r2
 800a8e8:	cb07      	ldmia	r3!, {r0, r1, r2}
 800a8ea:	6020      	str	r0, [r4, #0]
 800a8ec:	6061      	str	r1, [r4, #4]
 800a8ee:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"6,4,8,12,14,18");
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	3304      	adds	r3, #4
 800a8f4:	4a25      	ldr	r2, [pc, #148]	; (800a98c <problem_fetch+0x966c>)
 800a8f6:	461c      	mov	r4, r3
 800a8f8:	4613      	mov	r3, r2
 800a8fa:	cb07      	ldmia	r3!, {r0, r1, r2}
 800a8fc:	6020      	str	r0, [r4, #0]
 800a8fe:	6061      	str	r1, [r4, #4]
 800a900:	60a2      	str	r2, [r4, #8]
 800a902:	881a      	ldrh	r2, [r3, #0]
 800a904:	789b      	ldrb	r3, [r3, #2]
 800a906:	81a2      	strh	r2, [r4, #12]
 800a908:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish, "s,s,d,d,d,e");
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	33d8      	adds	r3, #216	; 0xd8
 800a90e:	4a20      	ldr	r2, [pc, #128]	; (800a990 <problem_fetch+0x9670>)
 800a910:	461c      	mov	r4, r3
 800a912:	4613      	mov	r3, r2
 800a914:	cb07      	ldmia	r3!, {r0, r1, r2}
 800a916:	6020      	str	r0, [r4, #0]
 800a918:	6061      	str	r1, [r4, #4]
 800a91a:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade, "6C+");
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	33cc      	adds	r3, #204	; 0xcc
 800a920:	4a0f      	ldr	r2, [pc, #60]	; (800a960 <problem_fetch+0x9640>)
 800a922:	6810      	ldr	r0, [r2, #0]
 800a924:	6018      	str	r0, [r3, #0]
			break;
 800a926:	f010 ba41 	b.w	801adac <problem_fetch+0x19a8c>
 800a92a:	bf00      	nop
 800a92c:	080246cc 	.word	0x080246cc
 800a930:	080246e0 	.word	0x080246e0
 800a934:	080246f4 	.word	0x080246f4
 800a938:	0802187c 	.word	0x0802187c
 800a93c:	08021370 	.word	0x08021370
 800a940:	0802470c 	.word	0x0802470c
 800a944:	08024720 	.word	0x08024720
 800a948:	08024730 	.word	0x08024730
 800a94c:	08021458 	.word	0x08021458
 800a950:	08024748 	.word	0x08024748
 800a954:	08024758 	.word	0x08024758
 800a958:	0802476c 	.word	0x0802476c
 800a95c:	08023990 	.word	0x08023990
 800a960:	080213a8 	.word	0x080213a8
 800a964:	08024784 	.word	0x08024784
 800a968:	08024790 	.word	0x08024790
 800a96c:	080247a0 	.word	0x080247a0
 800a970:	08021494 	.word	0x08021494
 800a974:	080247b4 	.word	0x080247b4
 800a978:	080247c0 	.word	0x080247c0
 800a97c:	080247d0 	.word	0x080247d0
 800a980:	080212f4 	.word	0x080212f4
 800a984:	080247e4 	.word	0x080247e4
 800a988:	080247ec 	.word	0x080247ec
 800a98c:	080247f8 	.word	0x080247f8
 800a990:	08021910 	.word	0x08021910
		case 349 :
			strcpy(p->name,"SKWAMA");
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	337c      	adds	r3, #124	; 0x7c
 800a998:	4ac0      	ldr	r2, [pc, #768]	; (800ac9c <problem_fetch+0x997c>)
 800a99a:	6810      	ldr	r0, [r2, #0]
 800a99c:	6018      	str	r0, [r3, #0]
 800a99e:	8891      	ldrh	r1, [r2, #4]
 800a9a0:	7992      	ldrb	r2, [r2, #6]
 800a9a2:	8099      	strh	r1, [r3, #4]
 800a9a4:	719a      	strb	r2, [r3, #6]
			p->moveSize = 8;
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	2208      	movs	r2, #8
 800a9aa:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"G,E,I,J,H,K,G,I");
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	3340      	adds	r3, #64	; 0x40
 800a9b0:	4abb      	ldr	r2, [pc, #748]	; (800aca0 <problem_fetch+0x9980>)
 800a9b2:	461c      	mov	r4, r3
 800a9b4:	4615      	mov	r5, r2
 800a9b6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a9b8:	6020      	str	r0, [r4, #0]
 800a9ba:	6061      	str	r1, [r4, #4]
 800a9bc:	60a2      	str	r2, [r4, #8]
 800a9be:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,8,10,7,12,14,15,18");
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	3304      	adds	r3, #4
 800a9c4:	4ab7      	ldr	r2, [pc, #732]	; (800aca4 <problem_fetch+0x9984>)
 800a9c6:	461d      	mov	r5, r3
 800a9c8:	4614      	mov	r4, r2
 800a9ca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a9cc:	6028      	str	r0, [r5, #0]
 800a9ce:	6069      	str	r1, [r5, #4]
 800a9d0:	60aa      	str	r2, [r5, #8]
 800a9d2:	60eb      	str	r3, [r5, #12]
 800a9d4:	6820      	ldr	r0, [r4, #0]
 800a9d6:	6128      	str	r0, [r5, #16]
 800a9d8:	7923      	ldrb	r3, [r4, #4]
 800a9da:	752b      	strb	r3, [r5, #20]
			strcpy(p->startFinish, "s,d,d,d,d,d,d,e");
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	33d8      	adds	r3, #216	; 0xd8
 800a9e0:	4ab1      	ldr	r2, [pc, #708]	; (800aca8 <problem_fetch+0x9988>)
 800a9e2:	461c      	mov	r4, r3
 800a9e4:	4615      	mov	r5, r2
 800a9e6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a9e8:	6020      	str	r0, [r4, #0]
 800a9ea:	6061      	str	r1, [r4, #4]
 800a9ec:	60a2      	str	r2, [r4, #8]
 800a9ee:	60e3      	str	r3, [r4, #12]
			strcpy(p->grade, "6B+");
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	33cc      	adds	r3, #204	; 0xcc
 800a9f4:	4aad      	ldr	r2, [pc, #692]	; (800acac <problem_fetch+0x998c>)
 800a9f6:	6810      	ldr	r0, [r2, #0]
 800a9f8:	6018      	str	r0, [r3, #0]
			break;
 800a9fa:	f010 b9d7 	b.w	801adac <problem_fetch+0x19a8c>
		case 35 :
			strcpy(p->name,"VERITGO");
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	337c      	adds	r3, #124	; 0x7c
 800aa02:	49ab      	ldr	r1, [pc, #684]	; (800acb0 <problem_fetch+0x9990>)
 800aa04:	461a      	mov	r2, r3
 800aa06:	460b      	mov	r3, r1
 800aa08:	cb03      	ldmia	r3!, {r0, r1}
 800aa0a:	6010      	str	r0, [r2, #0]
 800aa0c:	6051      	str	r1, [r2, #4]
			p->moveSize = 6;
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	2206      	movs	r2, #6
 800aa12:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"G,J,H,F,H,D");
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	3340      	adds	r3, #64	; 0x40
 800aa18:	4aa6      	ldr	r2, [pc, #664]	; (800acb4 <problem_fetch+0x9994>)
 800aa1a:	461c      	mov	r4, r3
 800aa1c:	4613      	mov	r3, r2
 800aa1e:	cb07      	ldmia	r3!, {r0, r1, r2}
 800aa20:	6020      	str	r0, [r4, #0]
 800aa22:	6061      	str	r1, [r4, #4]
 800aa24:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"6,5,10,13,16,18");
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	3304      	adds	r3, #4
 800aa2a:	4aa3      	ldr	r2, [pc, #652]	; (800acb8 <problem_fetch+0x9998>)
 800aa2c:	461c      	mov	r4, r3
 800aa2e:	4615      	mov	r5, r2
 800aa30:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800aa32:	6020      	str	r0, [r4, #0]
 800aa34:	6061      	str	r1, [r4, #4]
 800aa36:	60a2      	str	r2, [r4, #8]
 800aa38:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish, "s,s,d,d,d,e");
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	33d8      	adds	r3, #216	; 0xd8
 800aa3e:	4a9f      	ldr	r2, [pc, #636]	; (800acbc <problem_fetch+0x999c>)
 800aa40:	461c      	mov	r4, r3
 800aa42:	4613      	mov	r3, r2
 800aa44:	cb07      	ldmia	r3!, {r0, r1, r2}
 800aa46:	6020      	str	r0, [r4, #0]
 800aa48:	6061      	str	r1, [r4, #4]
 800aa4a:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade, "6B+");
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	33cc      	adds	r3, #204	; 0xcc
 800aa50:	4a96      	ldr	r2, [pc, #600]	; (800acac <problem_fetch+0x998c>)
 800aa52:	6810      	ldr	r0, [r2, #0]
 800aa54:	6018      	str	r0, [r3, #0]
			break;
 800aa56:	f010 b9a9 	b.w	801adac <problem_fetch+0x19a8c>
		case 350 :
			strcpy(p->name,"MORE EFFORT LESS SKIN");
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	337c      	adds	r3, #124	; 0x7c
 800aa5e:	4a98      	ldr	r2, [pc, #608]	; (800acc0 <problem_fetch+0x99a0>)
 800aa60:	461d      	mov	r5, r3
 800aa62:	4614      	mov	r4, r2
 800aa64:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800aa66:	6028      	str	r0, [r5, #0]
 800aa68:	6069      	str	r1, [r5, #4]
 800aa6a:	60aa      	str	r2, [r5, #8]
 800aa6c:	60eb      	str	r3, [r5, #12]
 800aa6e:	6820      	ldr	r0, [r4, #0]
 800aa70:	6128      	str	r0, [r5, #16]
 800aa72:	88a3      	ldrh	r3, [r4, #4]
 800aa74:	82ab      	strh	r3, [r5, #20]
			p->moveSize = 8;
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	2208      	movs	r2, #8
 800aa7a:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"E,G,H,J,F,G,J,I");
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	3340      	adds	r3, #64	; 0x40
 800aa80:	4a90      	ldr	r2, [pc, #576]	; (800acc4 <problem_fetch+0x99a4>)
 800aa82:	461c      	mov	r4, r3
 800aa84:	4615      	mov	r5, r2
 800aa86:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800aa88:	6020      	str	r0, [r4, #0]
 800aa8a:	6061      	str	r1, [r4, #4]
 800aa8c:	60a2      	str	r2, [r4, #8]
 800aa8e:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"6,6,16,13,11,9,7,18");
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	3304      	adds	r3, #4
 800aa94:	4a8c      	ldr	r2, [pc, #560]	; (800acc8 <problem_fetch+0x99a8>)
 800aa96:	461d      	mov	r5, r3
 800aa98:	4614      	mov	r4, r2
 800aa9a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800aa9c:	6028      	str	r0, [r5, #0]
 800aa9e:	6069      	str	r1, [r5, #4]
 800aaa0:	60aa      	str	r2, [r5, #8]
 800aaa2:	60eb      	str	r3, [r5, #12]
 800aaa4:	6820      	ldr	r0, [r4, #0]
 800aaa6:	6128      	str	r0, [r5, #16]
			strcpy(p->startFinish, "s,s,d,d,d,d,d,e");
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	33d8      	adds	r3, #216	; 0xd8
 800aaac:	4a87      	ldr	r2, [pc, #540]	; (800accc <problem_fetch+0x99ac>)
 800aaae:	461c      	mov	r4, r3
 800aab0:	4615      	mov	r5, r2
 800aab2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800aab4:	6020      	str	r0, [r4, #0]
 800aab6:	6061      	str	r1, [r4, #4]
 800aab8:	60a2      	str	r2, [r4, #8]
 800aaba:	60e3      	str	r3, [r4, #12]
			strcpy(p->grade, "6C+");
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	33cc      	adds	r3, #204	; 0xcc
 800aac0:	4a83      	ldr	r2, [pc, #524]	; (800acd0 <problem_fetch+0x99b0>)
 800aac2:	6810      	ldr	r0, [r2, #0]
 800aac4:	6018      	str	r0, [r3, #0]
			break;
 800aac6:	f010 b971 	b.w	801adac <problem_fetch+0x19a8c>
		case 351 :
			strcpy(p->name,"LESS REST MORE INJURY");
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	337c      	adds	r3, #124	; 0x7c
 800aace:	4a81      	ldr	r2, [pc, #516]	; (800acd4 <problem_fetch+0x99b4>)
 800aad0:	461d      	mov	r5, r3
 800aad2:	4614      	mov	r4, r2
 800aad4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800aad6:	6028      	str	r0, [r5, #0]
 800aad8:	6069      	str	r1, [r5, #4]
 800aada:	60aa      	str	r2, [r5, #8]
 800aadc:	60eb      	str	r3, [r5, #12]
 800aade:	6820      	ldr	r0, [r4, #0]
 800aae0:	6128      	str	r0, [r5, #16]
 800aae2:	88a3      	ldrh	r3, [r4, #4]
 800aae4:	82ab      	strh	r3, [r5, #20]
			p->moveSize = 9;
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	2209      	movs	r2, #9
 800aaea:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"G,E,J,G,F,G,J,G,D");
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	3340      	adds	r3, #64	; 0x40
 800aaf0:	4a79      	ldr	r2, [pc, #484]	; (800acd8 <problem_fetch+0x99b8>)
 800aaf2:	461d      	mov	r5, r3
 800aaf4:	4614      	mov	r4, r2
 800aaf6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800aaf8:	6028      	str	r0, [r5, #0]
 800aafa:	6069      	str	r1, [r5, #4]
 800aafc:	60aa      	str	r2, [r5, #8]
 800aafe:	60eb      	str	r3, [r5, #12]
 800ab00:	8823      	ldrh	r3, [r4, #0]
 800ab02:	822b      	strh	r3, [r5, #16]
			strcpy(p->moveNumbers,"6,6,7,9,11,17,13,15,18");
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	3304      	adds	r3, #4
 800ab08:	4a74      	ldr	r2, [pc, #464]	; (800acdc <problem_fetch+0x99bc>)
 800ab0a:	461c      	mov	r4, r3
 800ab0c:	4615      	mov	r5, r2
 800ab0e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ab10:	6020      	str	r0, [r4, #0]
 800ab12:	6061      	str	r1, [r4, #4]
 800ab14:	60a2      	str	r2, [r4, #8]
 800ab16:	60e3      	str	r3, [r4, #12]
 800ab18:	6828      	ldr	r0, [r5, #0]
 800ab1a:	6120      	str	r0, [r4, #16]
 800ab1c:	88ab      	ldrh	r3, [r5, #4]
 800ab1e:	79aa      	ldrb	r2, [r5, #6]
 800ab20:	82a3      	strh	r3, [r4, #20]
 800ab22:	4613      	mov	r3, r2
 800ab24:	75a3      	strb	r3, [r4, #22]
			strcpy(p->startFinish, "s,s,d,d,d,d,d,d,e");
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	33d8      	adds	r3, #216	; 0xd8
 800ab2a:	4a6d      	ldr	r2, [pc, #436]	; (800ace0 <problem_fetch+0x99c0>)
 800ab2c:	461d      	mov	r5, r3
 800ab2e:	4614      	mov	r4, r2
 800ab30:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800ab32:	6028      	str	r0, [r5, #0]
 800ab34:	6069      	str	r1, [r5, #4]
 800ab36:	60aa      	str	r2, [r5, #8]
 800ab38:	60eb      	str	r3, [r5, #12]
 800ab3a:	8823      	ldrh	r3, [r4, #0]
 800ab3c:	822b      	strh	r3, [r5, #16]
			strcpy(p->grade, "6C+");
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	33cc      	adds	r3, #204	; 0xcc
 800ab42:	4a63      	ldr	r2, [pc, #396]	; (800acd0 <problem_fetch+0x99b0>)
 800ab44:	6810      	ldr	r0, [r2, #0]
 800ab46:	6018      	str	r0, [r3, #0]
			break;
 800ab48:	f010 b930 	b.w	801adac <problem_fetch+0x19a8c>
		case 352 :
			strcpy(p->name,"TENDON DAY");
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	337c      	adds	r3, #124	; 0x7c
 800ab50:	4964      	ldr	r1, [pc, #400]	; (800ace4 <problem_fetch+0x99c4>)
 800ab52:	461a      	mov	r2, r3
 800ab54:	460b      	mov	r3, r1
 800ab56:	cb03      	ldmia	r3!, {r0, r1}
 800ab58:	6010      	str	r0, [r2, #0]
 800ab5a:	6051      	str	r1, [r2, #4]
 800ab5c:	8819      	ldrh	r1, [r3, #0]
 800ab5e:	789b      	ldrb	r3, [r3, #2]
 800ab60:	8111      	strh	r1, [r2, #8]
 800ab62:	7293      	strb	r3, [r2, #10]
			p->moveSize = 8;
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	2208      	movs	r2, #8
 800ab68:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"J,G,G,C,E,A,E,A");
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	3340      	adds	r3, #64	; 0x40
 800ab6e:	4a5e      	ldr	r2, [pc, #376]	; (800ace8 <problem_fetch+0x99c8>)
 800ab70:	461c      	mov	r4, r3
 800ab72:	4615      	mov	r5, r2
 800ab74:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ab76:	6020      	str	r0, [r4, #0]
 800ab78:	6061      	str	r1, [r4, #4]
 800ab7a:	60a2      	str	r2, [r4, #8]
 800ab7c:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,6,9,8,12,14,14,18");
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	3304      	adds	r3, #4
 800ab82:	4a5a      	ldr	r2, [pc, #360]	; (800acec <problem_fetch+0x99cc>)
 800ab84:	461d      	mov	r5, r3
 800ab86:	4614      	mov	r4, r2
 800ab88:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800ab8a:	6028      	str	r0, [r5, #0]
 800ab8c:	6069      	str	r1, [r5, #4]
 800ab8e:	60aa      	str	r2, [r5, #8]
 800ab90:	60eb      	str	r3, [r5, #12]
 800ab92:	6820      	ldr	r0, [r4, #0]
 800ab94:	6128      	str	r0, [r5, #16]
			strcpy(p->startFinish, "s,s,d,d,d,d,d,e");
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	33d8      	adds	r3, #216	; 0xd8
 800ab9a:	4a4c      	ldr	r2, [pc, #304]	; (800accc <problem_fetch+0x99ac>)
 800ab9c:	461c      	mov	r4, r3
 800ab9e:	4615      	mov	r5, r2
 800aba0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800aba2:	6020      	str	r0, [r4, #0]
 800aba4:	6061      	str	r1, [r4, #4]
 800aba6:	60a2      	str	r2, [r4, #8]
 800aba8:	60e3      	str	r3, [r4, #12]
			strcpy(p->grade, "7A");
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	33cc      	adds	r3, #204	; 0xcc
 800abae:	4a50      	ldr	r2, [pc, #320]	; (800acf0 <problem_fetch+0x99d0>)
 800abb0:	8811      	ldrh	r1, [r2, #0]
 800abb2:	7892      	ldrb	r2, [r2, #2]
 800abb4:	8019      	strh	r1, [r3, #0]
 800abb6:	709a      	strb	r2, [r3, #2]
			break;
 800abb8:	f010 b8f8 	b.w	801adac <problem_fetch+0x19a8c>
		case 353 :
			strcpy(p->name,"THE LAPSUS SISTER");
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	337c      	adds	r3, #124	; 0x7c
 800abc0:	4a4c      	ldr	r2, [pc, #304]	; (800acf4 <problem_fetch+0x99d4>)
 800abc2:	461d      	mov	r5, r3
 800abc4:	4614      	mov	r4, r2
 800abc6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800abc8:	6028      	str	r0, [r5, #0]
 800abca:	6069      	str	r1, [r5, #4]
 800abcc:	60aa      	str	r2, [r5, #8]
 800abce:	60eb      	str	r3, [r5, #12]
 800abd0:	8823      	ldrh	r3, [r4, #0]
 800abd2:	822b      	strh	r3, [r5, #16]
			p->moveSize = 7;
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	2207      	movs	r2, #7
 800abd8:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"B,C,B,E,B,D,D");
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	3340      	adds	r3, #64	; 0x40
 800abde:	4a46      	ldr	r2, [pc, #280]	; (800acf8 <problem_fetch+0x99d8>)
 800abe0:	461c      	mov	r4, r3
 800abe2:	4613      	mov	r3, r2
 800abe4:	cb07      	ldmia	r3!, {r0, r1, r2}
 800abe6:	6020      	str	r0, [r4, #0]
 800abe8:	6061      	str	r1, [r4, #4]
 800abea:	60a2      	str	r2, [r4, #8]
 800abec:	881b      	ldrh	r3, [r3, #0]
 800abee:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"6,5,10,12,15,7,18");
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	3304      	adds	r3, #4
 800abf4:	4a41      	ldr	r2, [pc, #260]	; (800acfc <problem_fetch+0x99dc>)
 800abf6:	461d      	mov	r5, r3
 800abf8:	4614      	mov	r4, r2
 800abfa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800abfc:	6028      	str	r0, [r5, #0]
 800abfe:	6069      	str	r1, [r5, #4]
 800ac00:	60aa      	str	r2, [r5, #8]
 800ac02:	60eb      	str	r3, [r5, #12]
 800ac04:	8823      	ldrh	r3, [r4, #0]
 800ac06:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish, "s,s,d,d,d,d,e");
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	33d8      	adds	r3, #216	; 0xd8
 800ac0c:	4a3c      	ldr	r2, [pc, #240]	; (800ad00 <problem_fetch+0x99e0>)
 800ac0e:	461c      	mov	r4, r3
 800ac10:	4613      	mov	r3, r2
 800ac12:	cb07      	ldmia	r3!, {r0, r1, r2}
 800ac14:	6020      	str	r0, [r4, #0]
 800ac16:	6061      	str	r1, [r4, #4]
 800ac18:	60a2      	str	r2, [r4, #8]
 800ac1a:	881b      	ldrh	r3, [r3, #0]
 800ac1c:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade, "6B+");
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	33cc      	adds	r3, #204	; 0xcc
 800ac22:	4a22      	ldr	r2, [pc, #136]	; (800acac <problem_fetch+0x998c>)
 800ac24:	6810      	ldr	r0, [r2, #0]
 800ac26:	6018      	str	r0, [r3, #0]
			break;
 800ac28:	f010 b8c0 	b.w	801adac <problem_fetch+0x19a8c>
		case 354 :
			strcpy(p->name,"THE BIG DREAM");
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	337c      	adds	r3, #124	; 0x7c
 800ac30:	4a34      	ldr	r2, [pc, #208]	; (800ad04 <problem_fetch+0x99e4>)
 800ac32:	461c      	mov	r4, r3
 800ac34:	4613      	mov	r3, r2
 800ac36:	cb07      	ldmia	r3!, {r0, r1, r2}
 800ac38:	6020      	str	r0, [r4, #0]
 800ac3a:	6061      	str	r1, [r4, #4]
 800ac3c:	60a2      	str	r2, [r4, #8]
 800ac3e:	881b      	ldrh	r3, [r3, #0]
 800ac40:	81a3      	strh	r3, [r4, #12]
			p->moveSize = 8;
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	2208      	movs	r2, #8
 800ac46:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"G,G,H,C,E,F,I,I");
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	3340      	adds	r3, #64	; 0x40
 800ac4c:	4a2e      	ldr	r2, [pc, #184]	; (800ad08 <problem_fetch+0x99e8>)
 800ac4e:	461c      	mov	r4, r3
 800ac50:	4615      	mov	r5, r2
 800ac52:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ac54:	6020      	str	r0, [r4, #0]
 800ac56:	6061      	str	r1, [r4, #4]
 800ac58:	60a2      	str	r2, [r4, #8]
 800ac5a:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,6,8,8,12,13,14,18");
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	3304      	adds	r3, #4
 800ac60:	4a2a      	ldr	r2, [pc, #168]	; (800ad0c <problem_fetch+0x99ec>)
 800ac62:	461d      	mov	r5, r3
 800ac64:	4614      	mov	r4, r2
 800ac66:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800ac68:	6028      	str	r0, [r5, #0]
 800ac6a:	6069      	str	r1, [r5, #4]
 800ac6c:	60aa      	str	r2, [r5, #8]
 800ac6e:	60eb      	str	r3, [r5, #12]
 800ac70:	6820      	ldr	r0, [r4, #0]
 800ac72:	6128      	str	r0, [r5, #16]
			strcpy(p->startFinish, "s,s,d,d,d,d,d,e");
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	33d8      	adds	r3, #216	; 0xd8
 800ac78:	4a14      	ldr	r2, [pc, #80]	; (800accc <problem_fetch+0x99ac>)
 800ac7a:	461c      	mov	r4, r3
 800ac7c:	4615      	mov	r5, r2
 800ac7e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ac80:	6020      	str	r0, [r4, #0]
 800ac82:	6061      	str	r1, [r4, #4]
 800ac84:	60a2      	str	r2, [r4, #8]
 800ac86:	60e3      	str	r3, [r4, #12]
			strcpy(p->grade, "6C");
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	33cc      	adds	r3, #204	; 0xcc
 800ac8c:	4a20      	ldr	r2, [pc, #128]	; (800ad10 <problem_fetch+0x99f0>)
 800ac8e:	8811      	ldrh	r1, [r2, #0]
 800ac90:	7892      	ldrb	r2, [r2, #2]
 800ac92:	8019      	strh	r1, [r3, #0]
 800ac94:	709a      	strb	r2, [r3, #2]
			break;
 800ac96:	f010 b889 	b.w	801adac <problem_fetch+0x19a8c>
 800ac9a:	bf00      	nop
 800ac9c:	08024808 	.word	0x08024808
 800aca0:	08024810 	.word	0x08024810
 800aca4:	08024820 	.word	0x08024820
 800aca8:	08021458 	.word	0x08021458
 800acac:	080212b0 	.word	0x080212b0
 800acb0:	08024838 	.word	0x08024838
 800acb4:	08024840 	.word	0x08024840
 800acb8:	0802484c 	.word	0x0802484c
 800acbc:	08021910 	.word	0x08021910
 800acc0:	0802485c 	.word	0x0802485c
 800acc4:	08024874 	.word	0x08024874
 800acc8:	08024884 	.word	0x08024884
 800accc:	080214cc 	.word	0x080214cc
 800acd0:	080213a8 	.word	0x080213a8
 800acd4:	08024898 	.word	0x08024898
 800acd8:	080248b0 	.word	0x080248b0
 800acdc:	080248c4 	.word	0x080248c4
 800ace0:	0802187c 	.word	0x0802187c
 800ace4:	080248dc 	.word	0x080248dc
 800ace8:	080248e8 	.word	0x080248e8
 800acec:	080248f8 	.word	0x080248f8
 800acf0:	080212f4 	.word	0x080212f4
 800acf4:	0802490c 	.word	0x0802490c
 800acf8:	08024920 	.word	0x08024920
 800acfc:	08024930 	.word	0x08024930
 800ad00:	080212a0 	.word	0x080212a0
 800ad04:	08024944 	.word	0x08024944
 800ad08:	08024954 	.word	0x08024954
 800ad0c:	08024964 	.word	0x08024964
 800ad10:	08021370 	.word	0x08021370
		case 355 :
			strcpy(p->name,"THE NIGHTMARE");
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	337c      	adds	r3, #124	; 0x7c
 800ad18:	4aba      	ldr	r2, [pc, #744]	; (800b004 <problem_fetch+0x9ce4>)
 800ad1a:	461c      	mov	r4, r3
 800ad1c:	4613      	mov	r3, r2
 800ad1e:	cb07      	ldmia	r3!, {r0, r1, r2}
 800ad20:	6020      	str	r0, [r4, #0]
 800ad22:	6061      	str	r1, [r4, #4]
 800ad24:	60a2      	str	r2, [r4, #8]
 800ad26:	881b      	ldrh	r3, [r3, #0]
 800ad28:	81a3      	strh	r3, [r4, #12]
			p->moveSize = 8;
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	2208      	movs	r2, #8
 800ad2e:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"G,J,I,I,B,E,F,D");
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	3340      	adds	r3, #64	; 0x40
 800ad34:	4ab4      	ldr	r2, [pc, #720]	; (800b008 <problem_fetch+0x9ce8>)
 800ad36:	461c      	mov	r4, r3
 800ad38:	4615      	mov	r5, r2
 800ad3a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ad3c:	6020      	str	r0, [r4, #0]
 800ad3e:	6061      	str	r1, [r4, #4]
 800ad40:	60a2      	str	r2, [r4, #8]
 800ad42:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,5,7,9,15,12,11,18");
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	3304      	adds	r3, #4
 800ad48:	4ab0      	ldr	r2, [pc, #704]	; (800b00c <problem_fetch+0x9cec>)
 800ad4a:	461d      	mov	r5, r3
 800ad4c:	4614      	mov	r4, r2
 800ad4e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800ad50:	6028      	str	r0, [r5, #0]
 800ad52:	6069      	str	r1, [r5, #4]
 800ad54:	60aa      	str	r2, [r5, #8]
 800ad56:	60eb      	str	r3, [r5, #12]
 800ad58:	6820      	ldr	r0, [r4, #0]
 800ad5a:	6128      	str	r0, [r5, #16]
			strcpy(p->startFinish, "s,s,d,d,d,d,d,e");
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	33d8      	adds	r3, #216	; 0xd8
 800ad60:	4aab      	ldr	r2, [pc, #684]	; (800b010 <problem_fetch+0x9cf0>)
 800ad62:	461c      	mov	r4, r3
 800ad64:	4615      	mov	r5, r2
 800ad66:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ad68:	6020      	str	r0, [r4, #0]
 800ad6a:	6061      	str	r1, [r4, #4]
 800ad6c:	60a2      	str	r2, [r4, #8]
 800ad6e:	60e3      	str	r3, [r4, #12]
			strcpy(p->grade, "6C+");
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	33cc      	adds	r3, #204	; 0xcc
 800ad74:	4aa7      	ldr	r2, [pc, #668]	; (800b014 <problem_fetch+0x9cf4>)
 800ad76:	6810      	ldr	r0, [r2, #0]
 800ad78:	6018      	str	r0, [r3, #0]
			break;
 800ad7a:	f010 b817 	b.w	801adac <problem_fetch+0x19a8c>
		case 356 :
			strcpy(p->name,"THE UNREAL THING");
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	337c      	adds	r3, #124	; 0x7c
 800ad82:	4aa5      	ldr	r2, [pc, #660]	; (800b018 <problem_fetch+0x9cf8>)
 800ad84:	461d      	mov	r5, r3
 800ad86:	4614      	mov	r4, r2
 800ad88:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800ad8a:	6028      	str	r0, [r5, #0]
 800ad8c:	6069      	str	r1, [r5, #4]
 800ad8e:	60aa      	str	r2, [r5, #8]
 800ad90:	60eb      	str	r3, [r5, #12]
 800ad92:	7823      	ldrb	r3, [r4, #0]
 800ad94:	742b      	strb	r3, [r5, #16]
			p->moveSize = 8;
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	2208      	movs	r2, #8
 800ad9a:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"G,E,H,J,E,A,D,A");
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	3340      	adds	r3, #64	; 0x40
 800ada0:	4a9e      	ldr	r2, [pc, #632]	; (800b01c <problem_fetch+0x9cfc>)
 800ada2:	461c      	mov	r4, r3
 800ada4:	4615      	mov	r5, r2
 800ada6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ada8:	6020      	str	r0, [r4, #0]
 800adaa:	6061      	str	r1, [r4, #4]
 800adac:	60a2      	str	r2, [r4, #8]
 800adae:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,8,8,7,12,14,15,18");
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	3304      	adds	r3, #4
 800adb4:	4a9a      	ldr	r2, [pc, #616]	; (800b020 <problem_fetch+0x9d00>)
 800adb6:	461d      	mov	r5, r3
 800adb8:	4614      	mov	r4, r2
 800adba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800adbc:	6028      	str	r0, [r5, #0]
 800adbe:	6069      	str	r1, [r5, #4]
 800adc0:	60aa      	str	r2, [r5, #8]
 800adc2:	60eb      	str	r3, [r5, #12]
 800adc4:	6820      	ldr	r0, [r4, #0]
 800adc6:	6128      	str	r0, [r5, #16]
			strcpy(p->startFinish, "s,d,d,d,d,d,d,e");
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	33d8      	adds	r3, #216	; 0xd8
 800adcc:	4a95      	ldr	r2, [pc, #596]	; (800b024 <problem_fetch+0x9d04>)
 800adce:	461c      	mov	r4, r3
 800add0:	4615      	mov	r5, r2
 800add2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800add4:	6020      	str	r0, [r4, #0]
 800add6:	6061      	str	r1, [r4, #4]
 800add8:	60a2      	str	r2, [r4, #8]
 800adda:	60e3      	str	r3, [r4, #12]
			strcpy(p->grade, "6B+");
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	33cc      	adds	r3, #204	; 0xcc
 800ade0:	4a91      	ldr	r2, [pc, #580]	; (800b028 <problem_fetch+0x9d08>)
 800ade2:	6810      	ldr	r0, [r2, #0]
 800ade4:	6018      	str	r0, [r3, #0]
			break;
 800ade6:	f00f bfe1 	b.w	801adac <problem_fetch+0x19a8c>
		case 357 :
			strcpy(p->name,"PHSYCHO");
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	337c      	adds	r3, #124	; 0x7c
 800adee:	498f      	ldr	r1, [pc, #572]	; (800b02c <problem_fetch+0x9d0c>)
 800adf0:	461a      	mov	r2, r3
 800adf2:	460b      	mov	r3, r1
 800adf4:	cb03      	ldmia	r3!, {r0, r1}
 800adf6:	6010      	str	r0, [r2, #0]
 800adf8:	6051      	str	r1, [r2, #4]
			p->moveSize = 7;
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	2207      	movs	r2, #7
 800adfe:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"B,E,F,G,D,G,D");
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	3340      	adds	r3, #64	; 0x40
 800ae04:	4a8a      	ldr	r2, [pc, #552]	; (800b030 <problem_fetch+0x9d10>)
 800ae06:	461c      	mov	r4, r3
 800ae08:	4613      	mov	r3, r2
 800ae0a:	cb07      	ldmia	r3!, {r0, r1, r2}
 800ae0c:	6020      	str	r0, [r4, #0]
 800ae0e:	6061      	str	r1, [r4, #4]
 800ae10:	60a2      	str	r2, [r4, #8]
 800ae12:	881b      	ldrh	r3, [r3, #0]
 800ae14:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"6,6,13,17,7,10,18");
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	3304      	adds	r3, #4
 800ae1a:	4a86      	ldr	r2, [pc, #536]	; (800b034 <problem_fetch+0x9d14>)
 800ae1c:	461d      	mov	r5, r3
 800ae1e:	4614      	mov	r4, r2
 800ae20:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800ae22:	6028      	str	r0, [r5, #0]
 800ae24:	6069      	str	r1, [r5, #4]
 800ae26:	60aa      	str	r2, [r5, #8]
 800ae28:	60eb      	str	r3, [r5, #12]
 800ae2a:	8823      	ldrh	r3, [r4, #0]
 800ae2c:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish, "s,s,d,d,d,d,e");
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	33d8      	adds	r3, #216	; 0xd8
 800ae32:	4a81      	ldr	r2, [pc, #516]	; (800b038 <problem_fetch+0x9d18>)
 800ae34:	461c      	mov	r4, r3
 800ae36:	4613      	mov	r3, r2
 800ae38:	cb07      	ldmia	r3!, {r0, r1, r2}
 800ae3a:	6020      	str	r0, [r4, #0]
 800ae3c:	6061      	str	r1, [r4, #4]
 800ae3e:	60a2      	str	r2, [r4, #8]
 800ae40:	881b      	ldrh	r3, [r3, #0]
 800ae42:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade, "7A+");
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	33cc      	adds	r3, #204	; 0xcc
 800ae48:	4a7c      	ldr	r2, [pc, #496]	; (800b03c <problem_fetch+0x9d1c>)
 800ae4a:	6810      	ldr	r0, [r2, #0]
 800ae4c:	6018      	str	r0, [r3, #0]
			break;
 800ae4e:	f00f bfad 	b.w	801adac <problem_fetch+0x19a8c>
		case 358 :
			strcpy(p->name,"CLIMBING ON BLANK");
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	337c      	adds	r3, #124	; 0x7c
 800ae56:	4a7a      	ldr	r2, [pc, #488]	; (800b040 <problem_fetch+0x9d20>)
 800ae58:	461d      	mov	r5, r3
 800ae5a:	4614      	mov	r4, r2
 800ae5c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800ae5e:	6028      	str	r0, [r5, #0]
 800ae60:	6069      	str	r1, [r5, #4]
 800ae62:	60aa      	str	r2, [r5, #8]
 800ae64:	60eb      	str	r3, [r5, #12]
 800ae66:	8823      	ldrh	r3, [r4, #0]
 800ae68:	822b      	strh	r3, [r5, #16]
			p->moveSize = 6;
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	2206      	movs	r2, #6
 800ae6e:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"C,D,A,E,E,I");
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	3340      	adds	r3, #64	; 0x40
 800ae74:	4a73      	ldr	r2, [pc, #460]	; (800b044 <problem_fetch+0x9d24>)
 800ae76:	461c      	mov	r4, r3
 800ae78:	4613      	mov	r3, r2
 800ae7a:	cb07      	ldmia	r3!, {r0, r1, r2}
 800ae7c:	6020      	str	r0, [r4, #0]
 800ae7e:	6061      	str	r1, [r4, #4]
 800ae80:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,7,9,12,16,18");
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	3304      	adds	r3, #4
 800ae86:	4a70      	ldr	r2, [pc, #448]	; (800b048 <problem_fetch+0x9d28>)
 800ae88:	461c      	mov	r4, r3
 800ae8a:	4613      	mov	r3, r2
 800ae8c:	cb07      	ldmia	r3!, {r0, r1, r2}
 800ae8e:	6020      	str	r0, [r4, #0]
 800ae90:	6061      	str	r1, [r4, #4]
 800ae92:	60a2      	str	r2, [r4, #8]
 800ae94:	881a      	ldrh	r2, [r3, #0]
 800ae96:	789b      	ldrb	r3, [r3, #2]
 800ae98:	81a2      	strh	r2, [r4, #12]
 800ae9a:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish, "s,d,d,d,d,e");
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	33d8      	adds	r3, #216	; 0xd8
 800aea0:	4a6a      	ldr	r2, [pc, #424]	; (800b04c <problem_fetch+0x9d2c>)
 800aea2:	461c      	mov	r4, r3
 800aea4:	4613      	mov	r3, r2
 800aea6:	cb07      	ldmia	r3!, {r0, r1, r2}
 800aea8:	6020      	str	r0, [r4, #0]
 800aeaa:	6061      	str	r1, [r4, #4]
 800aeac:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade, "7A");
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	33cc      	adds	r3, #204	; 0xcc
 800aeb2:	4a67      	ldr	r2, [pc, #412]	; (800b050 <problem_fetch+0x9d30>)
 800aeb4:	8811      	ldrh	r1, [r2, #0]
 800aeb6:	7892      	ldrb	r2, [r2, #2]
 800aeb8:	8019      	strh	r1, [r3, #0]
 800aeba:	709a      	strb	r2, [r3, #2]
			break;
 800aebc:	f00f bf76 	b.w	801adac <problem_fetch+0x19a8c>
		case 359 :
			strcpy(p->name,"CRAZYCRACKER");
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	337c      	adds	r3, #124	; 0x7c
 800aec4:	4a63      	ldr	r2, [pc, #396]	; (800b054 <problem_fetch+0x9d34>)
 800aec6:	461c      	mov	r4, r3
 800aec8:	4613      	mov	r3, r2
 800aeca:	cb07      	ldmia	r3!, {r0, r1, r2}
 800aecc:	6020      	str	r0, [r4, #0]
 800aece:	6061      	str	r1, [r4, #4]
 800aed0:	60a2      	str	r2, [r4, #8]
 800aed2:	781b      	ldrb	r3, [r3, #0]
 800aed4:	7323      	strb	r3, [r4, #12]
			p->moveSize = 8;
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	2208      	movs	r2, #8
 800aeda:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"C,E,I,G,J,H,G,D");
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	3340      	adds	r3, #64	; 0x40
 800aee0:	4a5d      	ldr	r2, [pc, #372]	; (800b058 <problem_fetch+0x9d38>)
 800aee2:	461c      	mov	r4, r3
 800aee4:	4615      	mov	r5, r2
 800aee6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800aee8:	6020      	str	r0, [r4, #0]
 800aeea:	6061      	str	r1, [r4, #4]
 800aeec:	60a2      	str	r2, [r4, #8]
 800aeee:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,6,7,10,12,16,17,18");
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	3304      	adds	r3, #4
 800aef4:	4a59      	ldr	r2, [pc, #356]	; (800b05c <problem_fetch+0x9d3c>)
 800aef6:	461d      	mov	r5, r3
 800aef8:	4614      	mov	r4, r2
 800aefa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800aefc:	6028      	str	r0, [r5, #0]
 800aefe:	6069      	str	r1, [r5, #4]
 800af00:	60aa      	str	r2, [r5, #8]
 800af02:	60eb      	str	r3, [r5, #12]
 800af04:	6820      	ldr	r0, [r4, #0]
 800af06:	6128      	str	r0, [r5, #16]
 800af08:	7923      	ldrb	r3, [r4, #4]
 800af0a:	752b      	strb	r3, [r5, #20]
			strcpy(p->startFinish, "s,s,d,d,d,d,d,e");
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	33d8      	adds	r3, #216	; 0xd8
 800af10:	4a3f      	ldr	r2, [pc, #252]	; (800b010 <problem_fetch+0x9cf0>)
 800af12:	461c      	mov	r4, r3
 800af14:	4615      	mov	r5, r2
 800af16:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800af18:	6020      	str	r0, [r4, #0]
 800af1a:	6061      	str	r1, [r4, #4]
 800af1c:	60a2      	str	r2, [r4, #8]
 800af1e:	60e3      	str	r3, [r4, #12]
			strcpy(p->grade, "7A+");
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	33cc      	adds	r3, #204	; 0xcc
 800af24:	4a45      	ldr	r2, [pc, #276]	; (800b03c <problem_fetch+0x9d1c>)
 800af26:	6810      	ldr	r0, [r2, #0]
 800af28:	6018      	str	r0, [r3, #0]
			break;
 800af2a:	f00f bf3f 	b.w	801adac <problem_fetch+0x19a8c>
		case 36 :
			strcpy(p->name,"NOT TOO BAD");
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	337c      	adds	r3, #124	; 0x7c
 800af32:	4a4b      	ldr	r2, [pc, #300]	; (800b060 <problem_fetch+0x9d40>)
 800af34:	461c      	mov	r4, r3
 800af36:	4613      	mov	r3, r2
 800af38:	cb07      	ldmia	r3!, {r0, r1, r2}
 800af3a:	6020      	str	r0, [r4, #0]
 800af3c:	6061      	str	r1, [r4, #4]
 800af3e:	60a2      	str	r2, [r4, #8]
			p->moveSize = 8;
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	2208      	movs	r2, #8
 800af44:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"G,C,E,F,D,I,E,D");
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	3340      	adds	r3, #64	; 0x40
 800af4a:	4a46      	ldr	r2, [pc, #280]	; (800b064 <problem_fetch+0x9d44>)
 800af4c:	461c      	mov	r4, r3
 800af4e:	4615      	mov	r5, r2
 800af50:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800af52:	6020      	str	r0, [r4, #0]
 800af54:	6061      	str	r1, [r4, #4]
 800af56:	60a2      	str	r2, [r4, #8]
 800af58:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,5,8,11,11,14,16,18");
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	3304      	adds	r3, #4
 800af5e:	4a42      	ldr	r2, [pc, #264]	; (800b068 <problem_fetch+0x9d48>)
 800af60:	461d      	mov	r5, r3
 800af62:	4614      	mov	r4, r2
 800af64:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800af66:	6028      	str	r0, [r5, #0]
 800af68:	6069      	str	r1, [r5, #4]
 800af6a:	60aa      	str	r2, [r5, #8]
 800af6c:	60eb      	str	r3, [r5, #12]
 800af6e:	6820      	ldr	r0, [r4, #0]
 800af70:	6128      	str	r0, [r5, #16]
 800af72:	7923      	ldrb	r3, [r4, #4]
 800af74:	752b      	strb	r3, [r5, #20]
			strcpy(p->startFinish, "s,s,d,d,d,d,d,e");
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	33d8      	adds	r3, #216	; 0xd8
 800af7a:	4a25      	ldr	r2, [pc, #148]	; (800b010 <problem_fetch+0x9cf0>)
 800af7c:	461c      	mov	r4, r3
 800af7e:	4615      	mov	r5, r2
 800af80:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800af82:	6020      	str	r0, [r4, #0]
 800af84:	6061      	str	r1, [r4, #4]
 800af86:	60a2      	str	r2, [r4, #8]
 800af88:	60e3      	str	r3, [r4, #12]
			strcpy(p->grade, "6B+");
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	33cc      	adds	r3, #204	; 0xcc
 800af8e:	4a26      	ldr	r2, [pc, #152]	; (800b028 <problem_fetch+0x9d08>)
 800af90:	6810      	ldr	r0, [r2, #0]
 800af92:	6018      	str	r0, [r3, #0]
			break;
 800af94:	f00f bf0a 	b.w	801adac <problem_fetch+0x19a8c>
		case 360 :
			strcpy(p->name,"PACHIMAMA");
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	337c      	adds	r3, #124	; 0x7c
 800af9c:	4933      	ldr	r1, [pc, #204]	; (800b06c <problem_fetch+0x9d4c>)
 800af9e:	461a      	mov	r2, r3
 800afa0:	460b      	mov	r3, r1
 800afa2:	cb03      	ldmia	r3!, {r0, r1}
 800afa4:	6010      	str	r0, [r2, #0]
 800afa6:	6051      	str	r1, [r2, #4]
 800afa8:	881b      	ldrh	r3, [r3, #0]
 800afaa:	8113      	strh	r3, [r2, #8]
			p->moveSize = 6;
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	2206      	movs	r2, #6
 800afb0:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"G,J,K,H,K,I");
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	3340      	adds	r3, #64	; 0x40
 800afb6:	4a2e      	ldr	r2, [pc, #184]	; (800b070 <problem_fetch+0x9d50>)
 800afb8:	461c      	mov	r4, r3
 800afba:	4613      	mov	r3, r2
 800afbc:	cb07      	ldmia	r3!, {r0, r1, r2}
 800afbe:	6020      	str	r0, [r4, #0]
 800afc0:	6061      	str	r1, [r4, #4]
 800afc2:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"6,5,9,12,14,18");
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	3304      	adds	r3, #4
 800afc8:	4a2a      	ldr	r2, [pc, #168]	; (800b074 <problem_fetch+0x9d54>)
 800afca:	461c      	mov	r4, r3
 800afcc:	4613      	mov	r3, r2
 800afce:	cb07      	ldmia	r3!, {r0, r1, r2}
 800afd0:	6020      	str	r0, [r4, #0]
 800afd2:	6061      	str	r1, [r4, #4]
 800afd4:	60a2      	str	r2, [r4, #8]
 800afd6:	881a      	ldrh	r2, [r3, #0]
 800afd8:	789b      	ldrb	r3, [r3, #2]
 800afda:	81a2      	strh	r2, [r4, #12]
 800afdc:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish, "s,s,d,d,d,e");
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	33d8      	adds	r3, #216	; 0xd8
 800afe2:	4a25      	ldr	r2, [pc, #148]	; (800b078 <problem_fetch+0x9d58>)
 800afe4:	461c      	mov	r4, r3
 800afe6:	4613      	mov	r3, r2
 800afe8:	cb07      	ldmia	r3!, {r0, r1, r2}
 800afea:	6020      	str	r0, [r4, #0]
 800afec:	6061      	str	r1, [r4, #4]
 800afee:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade, "7A");
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	33cc      	adds	r3, #204	; 0xcc
 800aff4:	4a16      	ldr	r2, [pc, #88]	; (800b050 <problem_fetch+0x9d30>)
 800aff6:	8811      	ldrh	r1, [r2, #0]
 800aff8:	7892      	ldrb	r2, [r2, #2]
 800affa:	8019      	strh	r1, [r3, #0]
 800affc:	709a      	strb	r2, [r3, #2]
			break;
 800affe:	f00f bed5 	b.w	801adac <problem_fetch+0x19a8c>
 800b002:	bf00      	nop
 800b004:	08024978 	.word	0x08024978
 800b008:	08024988 	.word	0x08024988
 800b00c:	08024998 	.word	0x08024998
 800b010:	080214cc 	.word	0x080214cc
 800b014:	080213a8 	.word	0x080213a8
 800b018:	080249ac 	.word	0x080249ac
 800b01c:	080249c0 	.word	0x080249c0
 800b020:	080249d0 	.word	0x080249d0
 800b024:	08021458 	.word	0x08021458
 800b028:	080212b0 	.word	0x080212b0
 800b02c:	080249e4 	.word	0x080249e4
 800b030:	080249ec 	.word	0x080249ec
 800b034:	080249fc 	.word	0x080249fc
 800b038:	080212a0 	.word	0x080212a0
 800b03c:	08021424 	.word	0x08021424
 800b040:	08024a10 	.word	0x08024a10
 800b044:	08024a24 	.word	0x08024a24
 800b048:	08024a30 	.word	0x08024a30
 800b04c:	0802139c 	.word	0x0802139c
 800b050:	080212f4 	.word	0x080212f4
 800b054:	08024a40 	.word	0x08024a40
 800b058:	08024a50 	.word	0x08024a50
 800b05c:	08024a60 	.word	0x08024a60
 800b060:	08024a78 	.word	0x08024a78
 800b064:	08024a84 	.word	0x08024a84
 800b068:	08024a94 	.word	0x08024a94
 800b06c:	08024aac 	.word	0x08024aac
 800b070:	08024ab8 	.word	0x08024ab8
 800b074:	08024ac4 	.word	0x08024ac4
 800b078:	08021910 	.word	0x08021910
		case 361 :
			strcpy(p->name,"RECOVERY DRINK");
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	337c      	adds	r3, #124	; 0x7c
 800b080:	4abc      	ldr	r2, [pc, #752]	; (800b374 <problem_fetch+0xa054>)
 800b082:	461c      	mov	r4, r3
 800b084:	4613      	mov	r3, r2
 800b086:	cb07      	ldmia	r3!, {r0, r1, r2}
 800b088:	6020      	str	r0, [r4, #0]
 800b08a:	6061      	str	r1, [r4, #4]
 800b08c:	60a2      	str	r2, [r4, #8]
 800b08e:	881a      	ldrh	r2, [r3, #0]
 800b090:	789b      	ldrb	r3, [r3, #2]
 800b092:	81a2      	strh	r2, [r4, #12]
 800b094:	73a3      	strb	r3, [r4, #14]
			p->moveSize = 6;
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	2206      	movs	r2, #6
 800b09a:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"C,E,D,H,I,I");
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	3340      	adds	r3, #64	; 0x40
 800b0a0:	4ab5      	ldr	r2, [pc, #724]	; (800b378 <problem_fetch+0xa058>)
 800b0a2:	461c      	mov	r4, r3
 800b0a4:	4613      	mov	r3, r2
 800b0a6:	cb07      	ldmia	r3!, {r0, r1, r2}
 800b0a8:	6020      	str	r0, [r4, #0]
 800b0aa:	6061      	str	r1, [r4, #4]
 800b0ac:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,9,11,12,15,18");
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	3304      	adds	r3, #4
 800b0b2:	4ab2      	ldr	r2, [pc, #712]	; (800b37c <problem_fetch+0xa05c>)
 800b0b4:	461c      	mov	r4, r3
 800b0b6:	4615      	mov	r5, r2
 800b0b8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b0ba:	6020      	str	r0, [r4, #0]
 800b0bc:	6061      	str	r1, [r4, #4]
 800b0be:	60a2      	str	r2, [r4, #8]
 800b0c0:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish, "s,d,d,d,d,e");
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	33d8      	adds	r3, #216	; 0xd8
 800b0c6:	4aae      	ldr	r2, [pc, #696]	; (800b380 <problem_fetch+0xa060>)
 800b0c8:	461c      	mov	r4, r3
 800b0ca:	4613      	mov	r3, r2
 800b0cc:	cb07      	ldmia	r3!, {r0, r1, r2}
 800b0ce:	6020      	str	r0, [r4, #0]
 800b0d0:	6061      	str	r1, [r4, #4]
 800b0d2:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade, "7B+");
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	33cc      	adds	r3, #204	; 0xcc
 800b0d8:	4aaa      	ldr	r2, [pc, #680]	; (800b384 <problem_fetch+0xa064>)
 800b0da:	6810      	ldr	r0, [r2, #0]
 800b0dc:	6018      	str	r0, [r3, #0]
			break;
 800b0de:	f00f be65 	b.w	801adac <problem_fetch+0x19a8c>
		case 362 :
			strcpy(p->name,"CRUXY E9");
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	337c      	adds	r3, #124	; 0x7c
 800b0e6:	49a8      	ldr	r1, [pc, #672]	; (800b388 <problem_fetch+0xa068>)
 800b0e8:	461a      	mov	r2, r3
 800b0ea:	460b      	mov	r3, r1
 800b0ec:	cb03      	ldmia	r3!, {r0, r1}
 800b0ee:	6010      	str	r0, [r2, #0]
 800b0f0:	6051      	str	r1, [r2, #4]
 800b0f2:	781b      	ldrb	r3, [r3, #0]
 800b0f4:	7213      	strb	r3, [r2, #8]
			p->moveSize = 7;
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	2207      	movs	r2, #7
 800b0fa:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"J,I,E,I,E,B,A");
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	3340      	adds	r3, #64	; 0x40
 800b100:	4aa2      	ldr	r2, [pc, #648]	; (800b38c <problem_fetch+0xa06c>)
 800b102:	461c      	mov	r4, r3
 800b104:	4613      	mov	r3, r2
 800b106:	cb07      	ldmia	r3!, {r0, r1, r2}
 800b108:	6020      	str	r0, [r4, #0]
 800b10a:	6061      	str	r1, [r4, #4]
 800b10c:	60a2      	str	r2, [r4, #8]
 800b10e:	881b      	ldrh	r3, [r3, #0]
 800b110:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,9,9,7,12,15,18");
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	3304      	adds	r3, #4
 800b116:	4a9e      	ldr	r2, [pc, #632]	; (800b390 <problem_fetch+0xa070>)
 800b118:	461d      	mov	r5, r3
 800b11a:	4614      	mov	r4, r2
 800b11c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800b11e:	6028      	str	r0, [r5, #0]
 800b120:	6069      	str	r1, [r5, #4]
 800b122:	60aa      	str	r2, [r5, #8]
 800b124:	60eb      	str	r3, [r5, #12]
 800b126:	7823      	ldrb	r3, [r4, #0]
 800b128:	742b      	strb	r3, [r5, #16]
			strcpy(p->startFinish, "s,d,d,d,d,d,e");
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	33d8      	adds	r3, #216	; 0xd8
 800b12e:	4a99      	ldr	r2, [pc, #612]	; (800b394 <problem_fetch+0xa074>)
 800b130:	461c      	mov	r4, r3
 800b132:	4613      	mov	r3, r2
 800b134:	cb07      	ldmia	r3!, {r0, r1, r2}
 800b136:	6020      	str	r0, [r4, #0]
 800b138:	6061      	str	r1, [r4, #4]
 800b13a:	60a2      	str	r2, [r4, #8]
 800b13c:	881b      	ldrh	r3, [r3, #0]
 800b13e:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade, "7B");
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	33cc      	adds	r3, #204	; 0xcc
 800b144:	4a94      	ldr	r2, [pc, #592]	; (800b398 <problem_fetch+0xa078>)
 800b146:	8811      	ldrh	r1, [r2, #0]
 800b148:	7892      	ldrb	r2, [r2, #2]
 800b14a:	8019      	strh	r1, [r3, #0]
 800b14c:	709a      	strb	r2, [r3, #2]
			break;
 800b14e:	f00f be2d 	b.w	801adac <problem_fetch+0x19a8c>
		case 363 :
			strcpy(p->name,"SHOULDER STRIKE");
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	337c      	adds	r3, #124	; 0x7c
 800b156:	4a91      	ldr	r2, [pc, #580]	; (800b39c <problem_fetch+0xa07c>)
 800b158:	461c      	mov	r4, r3
 800b15a:	4615      	mov	r5, r2
 800b15c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b15e:	6020      	str	r0, [r4, #0]
 800b160:	6061      	str	r1, [r4, #4]
 800b162:	60a2      	str	r2, [r4, #8]
 800b164:	60e3      	str	r3, [r4, #12]
			p->moveSize = 7;
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	2207      	movs	r2, #7
 800b16a:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"G,E,H,G,H,I,I");
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	3340      	adds	r3, #64	; 0x40
 800b170:	4a8b      	ldr	r2, [pc, #556]	; (800b3a0 <problem_fetch+0xa080>)
 800b172:	461c      	mov	r4, r3
 800b174:	4613      	mov	r3, r2
 800b176:	cb07      	ldmia	r3!, {r0, r1, r2}
 800b178:	6020      	str	r0, [r4, #0]
 800b17a:	6061      	str	r1, [r4, #4]
 800b17c:	60a2      	str	r2, [r4, #8]
 800b17e:	881b      	ldrh	r3, [r3, #0]
 800b180:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,9,12,15,5,7,18");
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	3304      	adds	r3, #4
 800b186:	4a87      	ldr	r2, [pc, #540]	; (800b3a4 <problem_fetch+0xa084>)
 800b188:	461d      	mov	r5, r3
 800b18a:	4614      	mov	r4, r2
 800b18c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800b18e:	6028      	str	r0, [r5, #0]
 800b190:	6069      	str	r1, [r5, #4]
 800b192:	60aa      	str	r2, [r5, #8]
 800b194:	60eb      	str	r3, [r5, #12]
 800b196:	7823      	ldrb	r3, [r4, #0]
 800b198:	742b      	strb	r3, [r5, #16]
			strcpy(p->startFinish, "s,d,d,d,d,d,e");
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	33d8      	adds	r3, #216	; 0xd8
 800b19e:	4a7d      	ldr	r2, [pc, #500]	; (800b394 <problem_fetch+0xa074>)
 800b1a0:	461c      	mov	r4, r3
 800b1a2:	4613      	mov	r3, r2
 800b1a4:	cb07      	ldmia	r3!, {r0, r1, r2}
 800b1a6:	6020      	str	r0, [r4, #0]
 800b1a8:	6061      	str	r1, [r4, #4]
 800b1aa:	60a2      	str	r2, [r4, #8]
 800b1ac:	881b      	ldrh	r3, [r3, #0]
 800b1ae:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade, "7B");
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	33cc      	adds	r3, #204	; 0xcc
 800b1b4:	4a78      	ldr	r2, [pc, #480]	; (800b398 <problem_fetch+0xa078>)
 800b1b6:	8811      	ldrh	r1, [r2, #0]
 800b1b8:	7892      	ldrb	r2, [r2, #2]
 800b1ba:	8019      	strh	r1, [r3, #0]
 800b1bc:	709a      	strb	r2, [r3, #2]
			break;
 800b1be:	f00f bdf5 	b.w	801adac <problem_fetch+0x19a8c>
		case 364 :
			strcpy(p->name,"UGLY LITTLE PROBLEM");
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	337c      	adds	r3, #124	; 0x7c
 800b1c6:	4a78      	ldr	r2, [pc, #480]	; (800b3a8 <problem_fetch+0xa088>)
 800b1c8:	461d      	mov	r5, r3
 800b1ca:	4614      	mov	r4, r2
 800b1cc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800b1ce:	6028      	str	r0, [r5, #0]
 800b1d0:	6069      	str	r1, [r5, #4]
 800b1d2:	60aa      	str	r2, [r5, #8]
 800b1d4:	60eb      	str	r3, [r5, #12]
 800b1d6:	6820      	ldr	r0, [r4, #0]
 800b1d8:	6128      	str	r0, [r5, #16]
			p->moveSize = 5;
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	2205      	movs	r2, #5
 800b1de:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"C,D,B,B,A");
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	3340      	adds	r3, #64	; 0x40
 800b1e4:	4971      	ldr	r1, [pc, #452]	; (800b3ac <problem_fetch+0xa08c>)
 800b1e6:	461a      	mov	r2, r3
 800b1e8:	460b      	mov	r3, r1
 800b1ea:	cb03      	ldmia	r3!, {r0, r1}
 800b1ec:	6010      	str	r0, [r2, #0]
 800b1ee:	6051      	str	r1, [r2, #4]
 800b1f0:	881b      	ldrh	r3, [r3, #0]
 800b1f2:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"5,7,10,15,18");
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	3304      	adds	r3, #4
 800b1f8:	4a6d      	ldr	r2, [pc, #436]	; (800b3b0 <problem_fetch+0xa090>)
 800b1fa:	461c      	mov	r4, r3
 800b1fc:	4613      	mov	r3, r2
 800b1fe:	cb07      	ldmia	r3!, {r0, r1, r2}
 800b200:	6020      	str	r0, [r4, #0]
 800b202:	6061      	str	r1, [r4, #4]
 800b204:	60a2      	str	r2, [r4, #8]
 800b206:	781b      	ldrb	r3, [r3, #0]
 800b208:	7323      	strb	r3, [r4, #12]
			strcpy(p->startFinish, "s,d,d,d,e");
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	33d8      	adds	r3, #216	; 0xd8
 800b20e:	4969      	ldr	r1, [pc, #420]	; (800b3b4 <problem_fetch+0xa094>)
 800b210:	461a      	mov	r2, r3
 800b212:	460b      	mov	r3, r1
 800b214:	cb03      	ldmia	r3!, {r0, r1}
 800b216:	6010      	str	r0, [r2, #0]
 800b218:	6051      	str	r1, [r2, #4]
 800b21a:	881b      	ldrh	r3, [r3, #0]
 800b21c:	8113      	strh	r3, [r2, #8]
			strcpy(p->grade, "7A");
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	33cc      	adds	r3, #204	; 0xcc
 800b222:	4a65      	ldr	r2, [pc, #404]	; (800b3b8 <problem_fetch+0xa098>)
 800b224:	8811      	ldrh	r1, [r2, #0]
 800b226:	7892      	ldrb	r2, [r2, #2]
 800b228:	8019      	strh	r1, [r3, #0]
 800b22a:	709a      	strb	r2, [r3, #2]
			break;
 800b22c:	f00f bdbe 	b.w	801adac <problem_fetch+0x19a8c>
		case 365 :
			strcpy(p->name,"BIG PAW");
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	337c      	adds	r3, #124	; 0x7c
 800b234:	4961      	ldr	r1, [pc, #388]	; (800b3bc <problem_fetch+0xa09c>)
 800b236:	461a      	mov	r2, r3
 800b238:	460b      	mov	r3, r1
 800b23a:	cb03      	ldmia	r3!, {r0, r1}
 800b23c:	6010      	str	r0, [r2, #0]
 800b23e:	6051      	str	r1, [r2, #4]
			p->moveSize = 7;
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	2207      	movs	r2, #7
 800b244:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"E,C,I,H,K,E,I");
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	3340      	adds	r3, #64	; 0x40
 800b24a:	4a5d      	ldr	r2, [pc, #372]	; (800b3c0 <problem_fetch+0xa0a0>)
 800b24c:	461c      	mov	r4, r3
 800b24e:	4613      	mov	r3, r2
 800b250:	cb07      	ldmia	r3!, {r0, r1, r2}
 800b252:	6020      	str	r0, [r4, #0]
 800b254:	6061      	str	r1, [r4, #4]
 800b256:	60a2      	str	r2, [r4, #8]
 800b258:	881b      	ldrh	r3, [r3, #0]
 800b25a:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"6,5,9,12,16,9,18");
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	3304      	adds	r3, #4
 800b260:	4a58      	ldr	r2, [pc, #352]	; (800b3c4 <problem_fetch+0xa0a4>)
 800b262:	461d      	mov	r5, r3
 800b264:	4614      	mov	r4, r2
 800b266:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800b268:	6028      	str	r0, [r5, #0]
 800b26a:	6069      	str	r1, [r5, #4]
 800b26c:	60aa      	str	r2, [r5, #8]
 800b26e:	60eb      	str	r3, [r5, #12]
 800b270:	7823      	ldrb	r3, [r4, #0]
 800b272:	742b      	strb	r3, [r5, #16]
			strcpy(p->startFinish, "s,s,d,d,d,d,e");
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	33d8      	adds	r3, #216	; 0xd8
 800b278:	4a53      	ldr	r2, [pc, #332]	; (800b3c8 <problem_fetch+0xa0a8>)
 800b27a:	461c      	mov	r4, r3
 800b27c:	4613      	mov	r3, r2
 800b27e:	cb07      	ldmia	r3!, {r0, r1, r2}
 800b280:	6020      	str	r0, [r4, #0]
 800b282:	6061      	str	r1, [r4, #4]
 800b284:	60a2      	str	r2, [r4, #8]
 800b286:	881b      	ldrh	r3, [r3, #0]
 800b288:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade, "7B");
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	33cc      	adds	r3, #204	; 0xcc
 800b28e:	4a42      	ldr	r2, [pc, #264]	; (800b398 <problem_fetch+0xa078>)
 800b290:	8811      	ldrh	r1, [r2, #0]
 800b292:	7892      	ldrb	r2, [r2, #2]
 800b294:	8019      	strh	r1, [r3, #0]
 800b296:	709a      	strb	r2, [r3, #2]
			break;
 800b298:	f00f bd88 	b.w	801adac <problem_fetch+0x19a8c>
		case 366 :
			strcpy(p->name,"DEFYING GRAVITY");
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	337c      	adds	r3, #124	; 0x7c
 800b2a0:	4a4a      	ldr	r2, [pc, #296]	; (800b3cc <problem_fetch+0xa0ac>)
 800b2a2:	461c      	mov	r4, r3
 800b2a4:	4615      	mov	r5, r2
 800b2a6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b2a8:	6020      	str	r0, [r4, #0]
 800b2aa:	6061      	str	r1, [r4, #4]
 800b2ac:	60a2      	str	r2, [r4, #8]
 800b2ae:	60e3      	str	r3, [r4, #12]
			p->moveSize = 6;
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	2206      	movs	r2, #6
 800b2b4:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"G,I,F,H,E,D");
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	3340      	adds	r3, #64	; 0x40
 800b2ba:	4a45      	ldr	r2, [pc, #276]	; (800b3d0 <problem_fetch+0xa0b0>)
 800b2bc:	461c      	mov	r4, r3
 800b2be:	4613      	mov	r3, r2
 800b2c0:	cb07      	ldmia	r3!, {r0, r1, r2}
 800b2c2:	6020      	str	r0, [r4, #0]
 800b2c4:	6061      	str	r1, [r4, #4]
 800b2c6:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,10,13,16,8,18");
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	3304      	adds	r3, #4
 800b2cc:	4a41      	ldr	r2, [pc, #260]	; (800b3d4 <problem_fetch+0xa0b4>)
 800b2ce:	461c      	mov	r4, r3
 800b2d0:	4615      	mov	r5, r2
 800b2d2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b2d4:	6020      	str	r0, [r4, #0]
 800b2d6:	6061      	str	r1, [r4, #4]
 800b2d8:	60a2      	str	r2, [r4, #8]
 800b2da:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish, "s,d,d,d,d,e");
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	33d8      	adds	r3, #216	; 0xd8
 800b2e0:	4a27      	ldr	r2, [pc, #156]	; (800b380 <problem_fetch+0xa060>)
 800b2e2:	461c      	mov	r4, r3
 800b2e4:	4613      	mov	r3, r2
 800b2e6:	cb07      	ldmia	r3!, {r0, r1, r2}
 800b2e8:	6020      	str	r0, [r4, #0]
 800b2ea:	6061      	str	r1, [r4, #4]
 800b2ec:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade, "6C+");
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	33cc      	adds	r3, #204	; 0xcc
 800b2f2:	4a39      	ldr	r2, [pc, #228]	; (800b3d8 <problem_fetch+0xa0b8>)
 800b2f4:	6810      	ldr	r0, [r2, #0]
 800b2f6:	6018      	str	r0, [r3, #0]
			break;
 800b2f8:	f00f bd58 	b.w	801adac <problem_fetch+0x19a8c>
		case 367 :
			strcpy(p->name,"THE ONLY LIGHT");
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	337c      	adds	r3, #124	; 0x7c
 800b300:	4a36      	ldr	r2, [pc, #216]	; (800b3dc <problem_fetch+0xa0bc>)
 800b302:	461c      	mov	r4, r3
 800b304:	4613      	mov	r3, r2
 800b306:	cb07      	ldmia	r3!, {r0, r1, r2}
 800b308:	6020      	str	r0, [r4, #0]
 800b30a:	6061      	str	r1, [r4, #4]
 800b30c:	60a2      	str	r2, [r4, #8]
 800b30e:	881a      	ldrh	r2, [r3, #0]
 800b310:	789b      	ldrb	r3, [r3, #2]
 800b312:	81a2      	strh	r2, [r4, #12]
 800b314:	73a3      	strb	r3, [r4, #14]
			p->moveSize = 7;
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	2207      	movs	r2, #7
 800b31a:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"E,G,H,F,H,E,D");
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	3340      	adds	r3, #64	; 0x40
 800b320:	4a2f      	ldr	r2, [pc, #188]	; (800b3e0 <problem_fetch+0xa0c0>)
 800b322:	461c      	mov	r4, r3
 800b324:	4613      	mov	r3, r2
 800b326:	cb07      	ldmia	r3!, {r0, r1, r2}
 800b328:	6020      	str	r0, [r4, #0]
 800b32a:	6061      	str	r1, [r4, #4]
 800b32c:	60a2      	str	r2, [r4, #8]
 800b32e:	881b      	ldrh	r3, [r3, #0]
 800b330:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"6,6,8,11,13,16,18");
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	3304      	adds	r3, #4
 800b336:	4a2b      	ldr	r2, [pc, #172]	; (800b3e4 <problem_fetch+0xa0c4>)
 800b338:	461d      	mov	r5, r3
 800b33a:	4614      	mov	r4, r2
 800b33c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800b33e:	6028      	str	r0, [r5, #0]
 800b340:	6069      	str	r1, [r5, #4]
 800b342:	60aa      	str	r2, [r5, #8]
 800b344:	60eb      	str	r3, [r5, #12]
 800b346:	8823      	ldrh	r3, [r4, #0]
 800b348:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish, "s,s,d,d,d,d,e");
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	33d8      	adds	r3, #216	; 0xd8
 800b34e:	4a1e      	ldr	r2, [pc, #120]	; (800b3c8 <problem_fetch+0xa0a8>)
 800b350:	461c      	mov	r4, r3
 800b352:	4613      	mov	r3, r2
 800b354:	cb07      	ldmia	r3!, {r0, r1, r2}
 800b356:	6020      	str	r0, [r4, #0]
 800b358:	6061      	str	r1, [r4, #4]
 800b35a:	60a2      	str	r2, [r4, #8]
 800b35c:	881b      	ldrh	r3, [r3, #0]
 800b35e:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade, "6C");
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	33cc      	adds	r3, #204	; 0xcc
 800b364:	4a20      	ldr	r2, [pc, #128]	; (800b3e8 <problem_fetch+0xa0c8>)
 800b366:	8811      	ldrh	r1, [r2, #0]
 800b368:	7892      	ldrb	r2, [r2, #2]
 800b36a:	8019      	strh	r1, [r3, #0]
 800b36c:	709a      	strb	r2, [r3, #2]
			break;
 800b36e:	f00f bd1d 	b.w	801adac <problem_fetch+0x19a8c>
 800b372:	bf00      	nop
 800b374:	08024ad4 	.word	0x08024ad4
 800b378:	08024ae4 	.word	0x08024ae4
 800b37c:	08024af0 	.word	0x08024af0
 800b380:	0802139c 	.word	0x0802139c
 800b384:	08021848 	.word	0x08021848
 800b388:	08024b00 	.word	0x08024b00
 800b38c:	08024b0c 	.word	0x08024b0c
 800b390:	08024b1c 	.word	0x08024b1c
 800b394:	08021494 	.word	0x08021494
 800b398:	0802132c 	.word	0x0802132c
 800b39c:	08024b30 	.word	0x08024b30
 800b3a0:	08024b40 	.word	0x08024b40
 800b3a4:	08024b50 	.word	0x08024b50
 800b3a8:	08024b64 	.word	0x08024b64
 800b3ac:	08024b78 	.word	0x08024b78
 800b3b0:	08024b84 	.word	0x08024b84
 800b3b4:	08021320 	.word	0x08021320
 800b3b8:	080212f4 	.word	0x080212f4
 800b3bc:	08024b94 	.word	0x08024b94
 800b3c0:	08024b9c 	.word	0x08024b9c
 800b3c4:	08024bac 	.word	0x08024bac
 800b3c8:	080212a0 	.word	0x080212a0
 800b3cc:	08024bc0 	.word	0x08024bc0
 800b3d0:	08024bd0 	.word	0x08024bd0
 800b3d4:	08024bdc 	.word	0x08024bdc
 800b3d8:	080213a8 	.word	0x080213a8
 800b3dc:	08024bec 	.word	0x08024bec
 800b3e0:	08024bfc 	.word	0x08024bfc
 800b3e4:	08024c0c 	.word	0x08024c0c
 800b3e8:	08021370 	.word	0x08021370
		case 368 :
			strcpy(p->name,"IN THE PINES");
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	337c      	adds	r3, #124	; 0x7c
 800b3f0:	4ac3      	ldr	r2, [pc, #780]	; (800b700 <problem_fetch+0xa3e0>)
 800b3f2:	461c      	mov	r4, r3
 800b3f4:	4613      	mov	r3, r2
 800b3f6:	cb07      	ldmia	r3!, {r0, r1, r2}
 800b3f8:	6020      	str	r0, [r4, #0]
 800b3fa:	6061      	str	r1, [r4, #4]
 800b3fc:	60a2      	str	r2, [r4, #8]
 800b3fe:	781b      	ldrb	r3, [r3, #0]
 800b400:	7323      	strb	r3, [r4, #12]
			p->moveSize = 8;
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	2208      	movs	r2, #8
 800b406:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"G,E,I,H,K,G,G,D");
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	3340      	adds	r3, #64	; 0x40
 800b40c:	4abd      	ldr	r2, [pc, #756]	; (800b704 <problem_fetch+0xa3e4>)
 800b40e:	461c      	mov	r4, r3
 800b410:	4615      	mov	r5, r2
 800b412:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b414:	6020      	str	r0, [r4, #0]
 800b416:	6061      	str	r1, [r4, #4]
 800b418:	60a2      	str	r2, [r4, #8]
 800b41a:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,8,10,12,14,15,17,18");
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	3304      	adds	r3, #4
 800b420:	4ab9      	ldr	r2, [pc, #740]	; (800b708 <problem_fetch+0xa3e8>)
 800b422:	461d      	mov	r5, r3
 800b424:	4614      	mov	r4, r2
 800b426:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800b428:	6028      	str	r0, [r5, #0]
 800b42a:	6069      	str	r1, [r5, #4]
 800b42c:	60aa      	str	r2, [r5, #8]
 800b42e:	60eb      	str	r3, [r5, #12]
 800b430:	6820      	ldr	r0, [r4, #0]
 800b432:	6128      	str	r0, [r5, #16]
 800b434:	88a3      	ldrh	r3, [r4, #4]
 800b436:	82ab      	strh	r3, [r5, #20]
			strcpy(p->startFinish, "s,d,d,d,d,d,d,e");
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	33d8      	adds	r3, #216	; 0xd8
 800b43c:	4ab3      	ldr	r2, [pc, #716]	; (800b70c <problem_fetch+0xa3ec>)
 800b43e:	461c      	mov	r4, r3
 800b440:	4615      	mov	r5, r2
 800b442:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b444:	6020      	str	r0, [r4, #0]
 800b446:	6061      	str	r1, [r4, #4]
 800b448:	60a2      	str	r2, [r4, #8]
 800b44a:	60e3      	str	r3, [r4, #12]
			strcpy(p->grade, "6B+");
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	33cc      	adds	r3, #204	; 0xcc
 800b450:	4aaf      	ldr	r2, [pc, #700]	; (800b710 <problem_fetch+0xa3f0>)
 800b452:	6810      	ldr	r0, [r2, #0]
 800b454:	6018      	str	r0, [r3, #0]
			break;
 800b456:	f00f bca9 	b.w	801adac <problem_fetch+0x19a8c>
		case 369 :
			strcpy(p->name,"PUSSY DAVAILLE");
 800b45a:	687b      	ldr	r3, [r7, #4]
 800b45c:	337c      	adds	r3, #124	; 0x7c
 800b45e:	4aad      	ldr	r2, [pc, #692]	; (800b714 <problem_fetch+0xa3f4>)
 800b460:	461c      	mov	r4, r3
 800b462:	4613      	mov	r3, r2
 800b464:	cb07      	ldmia	r3!, {r0, r1, r2}
 800b466:	6020      	str	r0, [r4, #0]
 800b468:	6061      	str	r1, [r4, #4]
 800b46a:	60a2      	str	r2, [r4, #8]
 800b46c:	881a      	ldrh	r2, [r3, #0]
 800b46e:	789b      	ldrb	r3, [r3, #2]
 800b470:	81a2      	strh	r2, [r4, #12]
 800b472:	73a3      	strb	r3, [r4, #14]
			p->moveSize = 7;
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	2207      	movs	r2, #7
 800b478:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"E,C,C,G,E,B,D");
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	3340      	adds	r3, #64	; 0x40
 800b47e:	4aa6      	ldr	r2, [pc, #664]	; (800b718 <problem_fetch+0xa3f8>)
 800b480:	461c      	mov	r4, r3
 800b482:	4613      	mov	r3, r2
 800b484:	cb07      	ldmia	r3!, {r0, r1, r2}
 800b486:	6020      	str	r0, [r4, #0]
 800b488:	6061      	str	r1, [r4, #4]
 800b48a:	60a2      	str	r2, [r4, #8]
 800b48c:	881b      	ldrh	r3, [r3, #0]
 800b48e:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"6,5,8,9,12,15,18");
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	3304      	adds	r3, #4
 800b494:	4aa1      	ldr	r2, [pc, #644]	; (800b71c <problem_fetch+0xa3fc>)
 800b496:	461d      	mov	r5, r3
 800b498:	4614      	mov	r4, r2
 800b49a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800b49c:	6028      	str	r0, [r5, #0]
 800b49e:	6069      	str	r1, [r5, #4]
 800b4a0:	60aa      	str	r2, [r5, #8]
 800b4a2:	60eb      	str	r3, [r5, #12]
 800b4a4:	7823      	ldrb	r3, [r4, #0]
 800b4a6:	742b      	strb	r3, [r5, #16]
			strcpy(p->startFinish, "s,s,d,d,d,d,e");
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	33d8      	adds	r3, #216	; 0xd8
 800b4ac:	4a9c      	ldr	r2, [pc, #624]	; (800b720 <problem_fetch+0xa400>)
 800b4ae:	461c      	mov	r4, r3
 800b4b0:	4613      	mov	r3, r2
 800b4b2:	cb07      	ldmia	r3!, {r0, r1, r2}
 800b4b4:	6020      	str	r0, [r4, #0]
 800b4b6:	6061      	str	r1, [r4, #4]
 800b4b8:	60a2      	str	r2, [r4, #8]
 800b4ba:	881b      	ldrh	r3, [r3, #0]
 800b4bc:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade, "6C");
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	33cc      	adds	r3, #204	; 0xcc
 800b4c2:	4a98      	ldr	r2, [pc, #608]	; (800b724 <problem_fetch+0xa404>)
 800b4c4:	8811      	ldrh	r1, [r2, #0]
 800b4c6:	7892      	ldrb	r2, [r2, #2]
 800b4c8:	8019      	strh	r1, [r3, #0]
 800b4ca:	709a      	strb	r2, [r3, #2]
			break;
 800b4cc:	f00f bc6e 	b.w	801adac <problem_fetch+0x19a8c>
		case 37 :
			strcpy(p->name,"GOOD TIMES");
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	337c      	adds	r3, #124	; 0x7c
 800b4d4:	4994      	ldr	r1, [pc, #592]	; (800b728 <problem_fetch+0xa408>)
 800b4d6:	461a      	mov	r2, r3
 800b4d8:	460b      	mov	r3, r1
 800b4da:	cb03      	ldmia	r3!, {r0, r1}
 800b4dc:	6010      	str	r0, [r2, #0]
 800b4de:	6051      	str	r1, [r2, #4]
 800b4e0:	8819      	ldrh	r1, [r3, #0]
 800b4e2:	789b      	ldrb	r3, [r3, #2]
 800b4e4:	8111      	strh	r1, [r2, #8]
 800b4e6:	7293      	strb	r3, [r2, #10]
			p->moveSize = 7;
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	2207      	movs	r2, #7
 800b4ec:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"G,C,E,F,C,D,A");
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	3340      	adds	r3, #64	; 0x40
 800b4f2:	4a8e      	ldr	r2, [pc, #568]	; (800b72c <problem_fetch+0xa40c>)
 800b4f4:	461c      	mov	r4, r3
 800b4f6:	4613      	mov	r3, r2
 800b4f8:	cb07      	ldmia	r3!, {r0, r1, r2}
 800b4fa:	6020      	str	r0, [r4, #0]
 800b4fc:	6061      	str	r1, [r4, #4]
 800b4fe:	60a2      	str	r2, [r4, #8]
 800b500:	881b      	ldrh	r3, [r3, #0]
 800b502:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,5,8,11,13,15,18");
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	3304      	adds	r3, #4
 800b508:	4a89      	ldr	r2, [pc, #548]	; (800b730 <problem_fetch+0xa410>)
 800b50a:	461d      	mov	r5, r3
 800b50c:	4614      	mov	r4, r2
 800b50e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800b510:	6028      	str	r0, [r5, #0]
 800b512:	6069      	str	r1, [r5, #4]
 800b514:	60aa      	str	r2, [r5, #8]
 800b516:	60eb      	str	r3, [r5, #12]
 800b518:	8823      	ldrh	r3, [r4, #0]
 800b51a:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish, "s,s,d,d,d,d,e");
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	33d8      	adds	r3, #216	; 0xd8
 800b520:	4a7f      	ldr	r2, [pc, #508]	; (800b720 <problem_fetch+0xa400>)
 800b522:	461c      	mov	r4, r3
 800b524:	4613      	mov	r3, r2
 800b526:	cb07      	ldmia	r3!, {r0, r1, r2}
 800b528:	6020      	str	r0, [r4, #0]
 800b52a:	6061      	str	r1, [r4, #4]
 800b52c:	60a2      	str	r2, [r4, #8]
 800b52e:	881b      	ldrh	r3, [r3, #0]
 800b530:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade, "6B+");
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	33cc      	adds	r3, #204	; 0xcc
 800b536:	4a76      	ldr	r2, [pc, #472]	; (800b710 <problem_fetch+0xa3f0>)
 800b538:	6810      	ldr	r0, [r2, #0]
 800b53a:	6018      	str	r0, [r3, #0]
			break;
 800b53c:	f00f bc36 	b.w	801adac <problem_fetch+0x19a8c>
		case 370 :
			strcpy(p->name,"THE POWER OF 9");
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	337c      	adds	r3, #124	; 0x7c
 800b544:	4a7b      	ldr	r2, [pc, #492]	; (800b734 <problem_fetch+0xa414>)
 800b546:	461c      	mov	r4, r3
 800b548:	4613      	mov	r3, r2
 800b54a:	cb07      	ldmia	r3!, {r0, r1, r2}
 800b54c:	6020      	str	r0, [r4, #0]
 800b54e:	6061      	str	r1, [r4, #4]
 800b550:	60a2      	str	r2, [r4, #8]
 800b552:	881a      	ldrh	r2, [r3, #0]
 800b554:	789b      	ldrb	r3, [r3, #2]
 800b556:	81a2      	strh	r2, [r4, #12]
 800b558:	73a3      	strb	r3, [r4, #14]
			p->moveSize = 7;
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	2207      	movs	r2, #7
 800b55e:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"H,J,H,E,E,E,I");
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	3340      	adds	r3, #64	; 0x40
 800b564:	4a74      	ldr	r2, [pc, #464]	; (800b738 <problem_fetch+0xa418>)
 800b566:	461c      	mov	r4, r3
 800b568:	4613      	mov	r3, r2
 800b56a:	cb07      	ldmia	r3!, {r0, r1, r2}
 800b56c:	6020      	str	r0, [r4, #0]
 800b56e:	6061      	str	r1, [r4, #4]
 800b570:	60a2      	str	r2, [r4, #8]
 800b572:	881b      	ldrh	r3, [r3, #0]
 800b574:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,5,8,8,12,16,18");
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	3304      	adds	r3, #4
 800b57a:	4a70      	ldr	r2, [pc, #448]	; (800b73c <problem_fetch+0xa41c>)
 800b57c:	461d      	mov	r5, r3
 800b57e:	4614      	mov	r4, r2
 800b580:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800b582:	6028      	str	r0, [r5, #0]
 800b584:	6069      	str	r1, [r5, #4]
 800b586:	60aa      	str	r2, [r5, #8]
 800b588:	60eb      	str	r3, [r5, #12]
 800b58a:	7823      	ldrb	r3, [r4, #0]
 800b58c:	742b      	strb	r3, [r5, #16]
			strcpy(p->startFinish, "s,s,d,d,d,d,e");
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	33d8      	adds	r3, #216	; 0xd8
 800b592:	4a63      	ldr	r2, [pc, #396]	; (800b720 <problem_fetch+0xa400>)
 800b594:	461c      	mov	r4, r3
 800b596:	4613      	mov	r3, r2
 800b598:	cb07      	ldmia	r3!, {r0, r1, r2}
 800b59a:	6020      	str	r0, [r4, #0]
 800b59c:	6061      	str	r1, [r4, #4]
 800b59e:	60a2      	str	r2, [r4, #8]
 800b5a0:	881b      	ldrh	r3, [r3, #0]
 800b5a2:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade, "6B+");
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	33cc      	adds	r3, #204	; 0xcc
 800b5a8:	4a59      	ldr	r2, [pc, #356]	; (800b710 <problem_fetch+0xa3f0>)
 800b5aa:	6810      	ldr	r0, [r2, #0]
 800b5ac:	6018      	str	r0, [r3, #0]
			break;
 800b5ae:	f00f bbfd 	b.w	801adac <problem_fetch+0x19a8c>
		case 371 :
			strcpy(p->name,"LITTLEFINGER");
 800b5b2:	687b      	ldr	r3, [r7, #4]
 800b5b4:	337c      	adds	r3, #124	; 0x7c
 800b5b6:	4a62      	ldr	r2, [pc, #392]	; (800b740 <problem_fetch+0xa420>)
 800b5b8:	461c      	mov	r4, r3
 800b5ba:	4613      	mov	r3, r2
 800b5bc:	cb07      	ldmia	r3!, {r0, r1, r2}
 800b5be:	6020      	str	r0, [r4, #0]
 800b5c0:	6061      	str	r1, [r4, #4]
 800b5c2:	60a2      	str	r2, [r4, #8]
 800b5c4:	781b      	ldrb	r3, [r3, #0]
 800b5c6:	7323      	strb	r3, [r4, #12]
			p->moveSize = 5;
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	2205      	movs	r2, #5
 800b5cc:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"G,E,H,H,I");
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	3340      	adds	r3, #64	; 0x40
 800b5d2:	495c      	ldr	r1, [pc, #368]	; (800b744 <problem_fetch+0xa424>)
 800b5d4:	461a      	mov	r2, r3
 800b5d6:	460b      	mov	r3, r1
 800b5d8:	cb03      	ldmia	r3!, {r0, r1}
 800b5da:	6010      	str	r0, [r2, #0]
 800b5dc:	6051      	str	r1, [r2, #4]
 800b5de:	881b      	ldrh	r3, [r3, #0]
 800b5e0:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"4,8,13,16,18");
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	3304      	adds	r3, #4
 800b5e6:	4a58      	ldr	r2, [pc, #352]	; (800b748 <problem_fetch+0xa428>)
 800b5e8:	461c      	mov	r4, r3
 800b5ea:	4613      	mov	r3, r2
 800b5ec:	cb07      	ldmia	r3!, {r0, r1, r2}
 800b5ee:	6020      	str	r0, [r4, #0]
 800b5f0:	6061      	str	r1, [r4, #4]
 800b5f2:	60a2      	str	r2, [r4, #8]
 800b5f4:	781b      	ldrb	r3, [r3, #0]
 800b5f6:	7323      	strb	r3, [r4, #12]
			strcpy(p->startFinish, "s,d,d,d,e");
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	33d8      	adds	r3, #216	; 0xd8
 800b5fc:	4953      	ldr	r1, [pc, #332]	; (800b74c <problem_fetch+0xa42c>)
 800b5fe:	461a      	mov	r2, r3
 800b600:	460b      	mov	r3, r1
 800b602:	cb03      	ldmia	r3!, {r0, r1}
 800b604:	6010      	str	r0, [r2, #0]
 800b606:	6051      	str	r1, [r2, #4]
 800b608:	881b      	ldrh	r3, [r3, #0]
 800b60a:	8113      	strh	r3, [r2, #8]
			strcpy(p->grade, "6C");
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	33cc      	adds	r3, #204	; 0xcc
 800b610:	4a44      	ldr	r2, [pc, #272]	; (800b724 <problem_fetch+0xa404>)
 800b612:	8811      	ldrh	r1, [r2, #0]
 800b614:	7892      	ldrb	r2, [r2, #2]
 800b616:	8019      	strh	r1, [r3, #0]
 800b618:	709a      	strb	r2, [r3, #2]
			break;
 800b61a:	f00f bbc7 	b.w	801adac <problem_fetch+0x19a8c>
		case 372 :
			strcpy(p->name,"BIOGRAPHIE");
 800b61e:	687b      	ldr	r3, [r7, #4]
 800b620:	337c      	adds	r3, #124	; 0x7c
 800b622:	494b      	ldr	r1, [pc, #300]	; (800b750 <problem_fetch+0xa430>)
 800b624:	461a      	mov	r2, r3
 800b626:	460b      	mov	r3, r1
 800b628:	cb03      	ldmia	r3!, {r0, r1}
 800b62a:	6010      	str	r0, [r2, #0]
 800b62c:	6051      	str	r1, [r2, #4]
 800b62e:	8819      	ldrh	r1, [r3, #0]
 800b630:	789b      	ldrb	r3, [r3, #2]
 800b632:	8111      	strh	r1, [r2, #8]
 800b634:	7293      	strb	r3, [r2, #10]
			p->moveSize = 7;
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	2207      	movs	r2, #7
 800b63a:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"G,J,K,H,H,E,D");
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	3340      	adds	r3, #64	; 0x40
 800b640:	4a44      	ldr	r2, [pc, #272]	; (800b754 <problem_fetch+0xa434>)
 800b642:	461c      	mov	r4, r3
 800b644:	4613      	mov	r3, r2
 800b646:	cb07      	ldmia	r3!, {r0, r1, r2}
 800b648:	6020      	str	r0, [r4, #0]
 800b64a:	6061      	str	r1, [r4, #4]
 800b64c:	60a2      	str	r2, [r4, #8]
 800b64e:	881b      	ldrh	r3, [r3, #0]
 800b650:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"6,5,9,12,16,16,18");
 800b652:	687b      	ldr	r3, [r7, #4]
 800b654:	3304      	adds	r3, #4
 800b656:	4a40      	ldr	r2, [pc, #256]	; (800b758 <problem_fetch+0xa438>)
 800b658:	461d      	mov	r5, r3
 800b65a:	4614      	mov	r4, r2
 800b65c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800b65e:	6028      	str	r0, [r5, #0]
 800b660:	6069      	str	r1, [r5, #4]
 800b662:	60aa      	str	r2, [r5, #8]
 800b664:	60eb      	str	r3, [r5, #12]
 800b666:	8823      	ldrh	r3, [r4, #0]
 800b668:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish, "s,s,d,d,d,d,e");
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	33d8      	adds	r3, #216	; 0xd8
 800b66e:	4a2c      	ldr	r2, [pc, #176]	; (800b720 <problem_fetch+0xa400>)
 800b670:	461c      	mov	r4, r3
 800b672:	4613      	mov	r3, r2
 800b674:	cb07      	ldmia	r3!, {r0, r1, r2}
 800b676:	6020      	str	r0, [r4, #0]
 800b678:	6061      	str	r1, [r4, #4]
 800b67a:	60a2      	str	r2, [r4, #8]
 800b67c:	881b      	ldrh	r3, [r3, #0]
 800b67e:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade, "7A");
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	33cc      	adds	r3, #204	; 0xcc
 800b684:	4a35      	ldr	r2, [pc, #212]	; (800b75c <problem_fetch+0xa43c>)
 800b686:	8811      	ldrh	r1, [r2, #0]
 800b688:	7892      	ldrb	r2, [r2, #2]
 800b68a:	8019      	strh	r1, [r3, #0]
 800b68c:	709a      	strb	r2, [r3, #2]
			break;
 800b68e:	f00f bb8d 	b.w	801adac <problem_fetch+0x19a8c>
		case 373 :
			strcpy(p->name,"CORNALBA");
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	337c      	adds	r3, #124	; 0x7c
 800b696:	4932      	ldr	r1, [pc, #200]	; (800b760 <problem_fetch+0xa440>)
 800b698:	461a      	mov	r2, r3
 800b69a:	460b      	mov	r3, r1
 800b69c:	cb03      	ldmia	r3!, {r0, r1}
 800b69e:	6010      	str	r0, [r2, #0]
 800b6a0:	6051      	str	r1, [r2, #4]
 800b6a2:	781b      	ldrb	r3, [r3, #0]
 800b6a4:	7213      	strb	r3, [r2, #8]
			p->moveSize = 7;
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	2207      	movs	r2, #7
 800b6aa:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"C,E,H,H,J,K,I");
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	3340      	adds	r3, #64	; 0x40
 800b6b0:	4a2c      	ldr	r2, [pc, #176]	; (800b764 <problem_fetch+0xa444>)
 800b6b2:	461c      	mov	r4, r3
 800b6b4:	4613      	mov	r3, r2
 800b6b6:	cb07      	ldmia	r3!, {r0, r1, r2}
 800b6b8:	6020      	str	r0, [r4, #0]
 800b6ba:	6061      	str	r1, [r4, #4]
 800b6bc:	60a2      	str	r2, [r4, #8]
 800b6be:	881b      	ldrh	r3, [r3, #0]
 800b6c0:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,6,8,12,12,16,18");
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	3304      	adds	r3, #4
 800b6c6:	4a28      	ldr	r2, [pc, #160]	; (800b768 <problem_fetch+0xa448>)
 800b6c8:	461d      	mov	r5, r3
 800b6ca:	4614      	mov	r4, r2
 800b6cc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800b6ce:	6028      	str	r0, [r5, #0]
 800b6d0:	6069      	str	r1, [r5, #4]
 800b6d2:	60aa      	str	r2, [r5, #8]
 800b6d4:	60eb      	str	r3, [r5, #12]
 800b6d6:	8823      	ldrh	r3, [r4, #0]
 800b6d8:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish, "s,s,d,d,d,d,e");
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	33d8      	adds	r3, #216	; 0xd8
 800b6de:	4a10      	ldr	r2, [pc, #64]	; (800b720 <problem_fetch+0xa400>)
 800b6e0:	461c      	mov	r4, r3
 800b6e2:	4613      	mov	r3, r2
 800b6e4:	cb07      	ldmia	r3!, {r0, r1, r2}
 800b6e6:	6020      	str	r0, [r4, #0]
 800b6e8:	6061      	str	r1, [r4, #4]
 800b6ea:	60a2      	str	r2, [r4, #8]
 800b6ec:	881b      	ldrh	r3, [r3, #0]
 800b6ee:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade, "7A+");
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	33cc      	adds	r3, #204	; 0xcc
 800b6f4:	4a1d      	ldr	r2, [pc, #116]	; (800b76c <problem_fetch+0xa44c>)
 800b6f6:	6810      	ldr	r0, [r2, #0]
 800b6f8:	6018      	str	r0, [r3, #0]
			break;
 800b6fa:	f00f bb57 	b.w	801adac <problem_fetch+0x19a8c>
 800b6fe:	bf00      	nop
 800b700:	08024c20 	.word	0x08024c20
 800b704:	08024c30 	.word	0x08024c30
 800b708:	08024c40 	.word	0x08024c40
 800b70c:	08021458 	.word	0x08021458
 800b710:	080212b0 	.word	0x080212b0
 800b714:	08024c58 	.word	0x08024c58
 800b718:	08024c68 	.word	0x08024c68
 800b71c:	08024c78 	.word	0x08024c78
 800b720:	080212a0 	.word	0x080212a0
 800b724:	08021370 	.word	0x08021370
 800b728:	08024c8c 	.word	0x08024c8c
 800b72c:	08024c98 	.word	0x08024c98
 800b730:	08024ca8 	.word	0x08024ca8
 800b734:	08024cbc 	.word	0x08024cbc
 800b738:	08024ccc 	.word	0x08024ccc
 800b73c:	08024cdc 	.word	0x08024cdc
 800b740:	08024cf0 	.word	0x08024cf0
 800b744:	08024d00 	.word	0x08024d00
 800b748:	08024d0c 	.word	0x08024d0c
 800b74c:	08021320 	.word	0x08021320
 800b750:	08024d1c 	.word	0x08024d1c
 800b754:	08024d28 	.word	0x08024d28
 800b758:	08024d38 	.word	0x08024d38
 800b75c:	080212f4 	.word	0x080212f4
 800b760:	08024d4c 	.word	0x08024d4c
 800b764:	08024d58 	.word	0x08024d58
 800b768:	08024d68 	.word	0x08024d68
 800b76c:	08021424 	.word	0x08021424
		case 374 :
			strcpy(p->name,"OMBRA");
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	337c      	adds	r3, #124	; 0x7c
 800b774:	4ab4      	ldr	r2, [pc, #720]	; (800ba48 <problem_fetch+0xa728>)
 800b776:	6810      	ldr	r0, [r2, #0]
 800b778:	6018      	str	r0, [r3, #0]
 800b77a:	8892      	ldrh	r2, [r2, #4]
 800b77c:	809a      	strh	r2, [r3, #4]
			p->moveSize = 7;
 800b77e:	687b      	ldr	r3, [r7, #4]
 800b780:	2207      	movs	r2, #7
 800b782:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"J,H,E,F,E,G,D");
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	3340      	adds	r3, #64	; 0x40
 800b788:	4ab0      	ldr	r2, [pc, #704]	; (800ba4c <problem_fetch+0xa72c>)
 800b78a:	461c      	mov	r4, r3
 800b78c:	4613      	mov	r3, r2
 800b78e:	cb07      	ldmia	r3!, {r0, r1, r2}
 800b790:	6020      	str	r0, [r4, #0]
 800b792:	6061      	str	r1, [r4, #4]
 800b794:	60a2      	str	r2, [r4, #8]
 800b796:	881b      	ldrh	r3, [r3, #0]
 800b798:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,8,8,11,14,17,18");
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	3304      	adds	r3, #4
 800b79e:	4aac      	ldr	r2, [pc, #688]	; (800ba50 <problem_fetch+0xa730>)
 800b7a0:	461d      	mov	r5, r3
 800b7a2:	4614      	mov	r4, r2
 800b7a4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800b7a6:	6028      	str	r0, [r5, #0]
 800b7a8:	6069      	str	r1, [r5, #4]
 800b7aa:	60aa      	str	r2, [r5, #8]
 800b7ac:	60eb      	str	r3, [r5, #12]
 800b7ae:	8823      	ldrh	r3, [r4, #0]
 800b7b0:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish, "s,d,d,d,d,d,e");
 800b7b2:	687b      	ldr	r3, [r7, #4]
 800b7b4:	33d8      	adds	r3, #216	; 0xd8
 800b7b6:	4aa7      	ldr	r2, [pc, #668]	; (800ba54 <problem_fetch+0xa734>)
 800b7b8:	461c      	mov	r4, r3
 800b7ba:	4613      	mov	r3, r2
 800b7bc:	cb07      	ldmia	r3!, {r0, r1, r2}
 800b7be:	6020      	str	r0, [r4, #0]
 800b7c0:	6061      	str	r1, [r4, #4]
 800b7c2:	60a2      	str	r2, [r4, #8]
 800b7c4:	881b      	ldrh	r3, [r3, #0]
 800b7c6:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade, "6C+");
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	33cc      	adds	r3, #204	; 0xcc
 800b7cc:	4aa2      	ldr	r2, [pc, #648]	; (800ba58 <problem_fetch+0xa738>)
 800b7ce:	6810      	ldr	r0, [r2, #0]
 800b7d0:	6018      	str	r0, [r3, #0]
			break;
 800b7d2:	f00f baeb 	b.w	801adac <problem_fetch+0x19a8c>
		case 375 :
			strcpy(p->name,"COBRA REALE");
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	337c      	adds	r3, #124	; 0x7c
 800b7da:	4aa0      	ldr	r2, [pc, #640]	; (800ba5c <problem_fetch+0xa73c>)
 800b7dc:	461c      	mov	r4, r3
 800b7de:	4613      	mov	r3, r2
 800b7e0:	cb07      	ldmia	r3!, {r0, r1, r2}
 800b7e2:	6020      	str	r0, [r4, #0]
 800b7e4:	6061      	str	r1, [r4, #4]
 800b7e6:	60a2      	str	r2, [r4, #8]
			p->moveSize = 6;
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	2206      	movs	r2, #6
 800b7ec:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"G,E,E,B,E,A");
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	3340      	adds	r3, #64	; 0x40
 800b7f2:	4a9b      	ldr	r2, [pc, #620]	; (800ba60 <problem_fetch+0xa740>)
 800b7f4:	461c      	mov	r4, r3
 800b7f6:	4613      	mov	r3, r2
 800b7f8:	cb07      	ldmia	r3!, {r0, r1, r2}
 800b7fa:	6020      	str	r0, [r4, #0]
 800b7fc:	6061      	str	r1, [r4, #4]
 800b7fe:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,6,9,12,14,18");
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	3304      	adds	r3, #4
 800b804:	4a97      	ldr	r2, [pc, #604]	; (800ba64 <problem_fetch+0xa744>)
 800b806:	461c      	mov	r4, r3
 800b808:	4613      	mov	r3, r2
 800b80a:	cb07      	ldmia	r3!, {r0, r1, r2}
 800b80c:	6020      	str	r0, [r4, #0]
 800b80e:	6061      	str	r1, [r4, #4]
 800b810:	60a2      	str	r2, [r4, #8]
 800b812:	881a      	ldrh	r2, [r3, #0]
 800b814:	789b      	ldrb	r3, [r3, #2]
 800b816:	81a2      	strh	r2, [r4, #12]
 800b818:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish, "s,s,d,d,d,e");
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	33d8      	adds	r3, #216	; 0xd8
 800b81e:	4a92      	ldr	r2, [pc, #584]	; (800ba68 <problem_fetch+0xa748>)
 800b820:	461c      	mov	r4, r3
 800b822:	4613      	mov	r3, r2
 800b824:	cb07      	ldmia	r3!, {r0, r1, r2}
 800b826:	6020      	str	r0, [r4, #0]
 800b828:	6061      	str	r1, [r4, #4]
 800b82a:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade, "7A+");
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	33cc      	adds	r3, #204	; 0xcc
 800b830:	4a8e      	ldr	r2, [pc, #568]	; (800ba6c <problem_fetch+0xa74c>)
 800b832:	6810      	ldr	r0, [r2, #0]
 800b834:	6018      	str	r0, [r3, #0]
			break;
 800b836:	f00f bab9 	b.w	801adac <problem_fetch+0x19a8c>
		case 376 :
			strcpy(p->name,"THE PINCH OF DEATH");
 800b83a:	687b      	ldr	r3, [r7, #4]
 800b83c:	337c      	adds	r3, #124	; 0x7c
 800b83e:	4a8c      	ldr	r2, [pc, #560]	; (800ba70 <problem_fetch+0xa750>)
 800b840:	461d      	mov	r5, r3
 800b842:	4614      	mov	r4, r2
 800b844:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800b846:	6028      	str	r0, [r5, #0]
 800b848:	6069      	str	r1, [r5, #4]
 800b84a:	60aa      	str	r2, [r5, #8]
 800b84c:	60eb      	str	r3, [r5, #12]
 800b84e:	8823      	ldrh	r3, [r4, #0]
 800b850:	78a2      	ldrb	r2, [r4, #2]
 800b852:	822b      	strh	r3, [r5, #16]
 800b854:	4613      	mov	r3, r2
 800b856:	74ab      	strb	r3, [r5, #18]
			p->moveSize = 6;
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	2206      	movs	r2, #6
 800b85c:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"G,D,G,D,D,A");
 800b85e:	687b      	ldr	r3, [r7, #4]
 800b860:	3340      	adds	r3, #64	; 0x40
 800b862:	4a84      	ldr	r2, [pc, #528]	; (800ba74 <problem_fetch+0xa754>)
 800b864:	461c      	mov	r4, r3
 800b866:	4613      	mov	r3, r2
 800b868:	cb07      	ldmia	r3!, {r0, r1, r2}
 800b86a:	6020      	str	r0, [r4, #0]
 800b86c:	6061      	str	r1, [r4, #4]
 800b86e:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,7,10,11,15,18");
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	3304      	adds	r3, #4
 800b874:	4a80      	ldr	r2, [pc, #512]	; (800ba78 <problem_fetch+0xa758>)
 800b876:	461c      	mov	r4, r3
 800b878:	4615      	mov	r5, r2
 800b87a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b87c:	6020      	str	r0, [r4, #0]
 800b87e:	6061      	str	r1, [r4, #4]
 800b880:	60a2      	str	r2, [r4, #8]
 800b882:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish, "s,d,d,d,d,e");
 800b884:	687b      	ldr	r3, [r7, #4]
 800b886:	33d8      	adds	r3, #216	; 0xd8
 800b888:	4a7c      	ldr	r2, [pc, #496]	; (800ba7c <problem_fetch+0xa75c>)
 800b88a:	461c      	mov	r4, r3
 800b88c:	4613      	mov	r3, r2
 800b88e:	cb07      	ldmia	r3!, {r0, r1, r2}
 800b890:	6020      	str	r0, [r4, #0]
 800b892:	6061      	str	r1, [r4, #4]
 800b894:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade, "6C");
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	33cc      	adds	r3, #204	; 0xcc
 800b89a:	4a79      	ldr	r2, [pc, #484]	; (800ba80 <problem_fetch+0xa760>)
 800b89c:	8811      	ldrh	r1, [r2, #0]
 800b89e:	7892      	ldrb	r2, [r2, #2]
 800b8a0:	8019      	strh	r1, [r3, #0]
 800b8a2:	709a      	strb	r2, [r3, #2]
			break;
 800b8a4:	f00f ba82 	b.w	801adac <problem_fetch+0x19a8c>
		case 377 :
			strcpy(p->name,"THE FUNERAL (RIP PINCH)");
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	337c      	adds	r3, #124	; 0x7c
 800b8ac:	4a75      	ldr	r2, [pc, #468]	; (800ba84 <problem_fetch+0xa764>)
 800b8ae:	461d      	mov	r5, r3
 800b8b0:	4614      	mov	r4, r2
 800b8b2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800b8b4:	6028      	str	r0, [r5, #0]
 800b8b6:	6069      	str	r1, [r5, #4]
 800b8b8:	60aa      	str	r2, [r5, #8]
 800b8ba:	60eb      	str	r3, [r5, #12]
 800b8bc:	cc03      	ldmia	r4!, {r0, r1}
 800b8be:	6128      	str	r0, [r5, #16]
 800b8c0:	6169      	str	r1, [r5, #20]
			p->moveSize = 6;
 800b8c2:	687b      	ldr	r3, [r7, #4]
 800b8c4:	2206      	movs	r2, #6
 800b8c6:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"G,D,G,D,G,I");
 800b8c8:	687b      	ldr	r3, [r7, #4]
 800b8ca:	3340      	adds	r3, #64	; 0x40
 800b8cc:	4a6e      	ldr	r2, [pc, #440]	; (800ba88 <problem_fetch+0xa768>)
 800b8ce:	461c      	mov	r4, r3
 800b8d0:	4613      	mov	r3, r2
 800b8d2:	cb07      	ldmia	r3!, {r0, r1, r2}
 800b8d4:	6020      	str	r0, [r4, #0]
 800b8d6:	6061      	str	r1, [r4, #4]
 800b8d8:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,7,10,11,15,18");
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	3304      	adds	r3, #4
 800b8de:	4a66      	ldr	r2, [pc, #408]	; (800ba78 <problem_fetch+0xa758>)
 800b8e0:	461c      	mov	r4, r3
 800b8e2:	4615      	mov	r5, r2
 800b8e4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b8e6:	6020      	str	r0, [r4, #0]
 800b8e8:	6061      	str	r1, [r4, #4]
 800b8ea:	60a2      	str	r2, [r4, #8]
 800b8ec:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish, "s,d,d,d,d,e");
 800b8ee:	687b      	ldr	r3, [r7, #4]
 800b8f0:	33d8      	adds	r3, #216	; 0xd8
 800b8f2:	4a62      	ldr	r2, [pc, #392]	; (800ba7c <problem_fetch+0xa75c>)
 800b8f4:	461c      	mov	r4, r3
 800b8f6:	4613      	mov	r3, r2
 800b8f8:	cb07      	ldmia	r3!, {r0, r1, r2}
 800b8fa:	6020      	str	r0, [r4, #0]
 800b8fc:	6061      	str	r1, [r4, #4]
 800b8fe:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade, "6C+");
 800b900:	687b      	ldr	r3, [r7, #4]
 800b902:	33cc      	adds	r3, #204	; 0xcc
 800b904:	4a54      	ldr	r2, [pc, #336]	; (800ba58 <problem_fetch+0xa738>)
 800b906:	6810      	ldr	r0, [r2, #0]
 800b908:	6018      	str	r0, [r3, #0]
			break;
 800b90a:	f00f ba4f 	b.w	801adac <problem_fetch+0x19a8c>
		case 378 :
			strcpy(p->name,"THE PROCESS");
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	337c      	adds	r3, #124	; 0x7c
 800b912:	4a5e      	ldr	r2, [pc, #376]	; (800ba8c <problem_fetch+0xa76c>)
 800b914:	461c      	mov	r4, r3
 800b916:	4613      	mov	r3, r2
 800b918:	cb07      	ldmia	r3!, {r0, r1, r2}
 800b91a:	6020      	str	r0, [r4, #0]
 800b91c:	6061      	str	r1, [r4, #4]
 800b91e:	60a2      	str	r2, [r4, #8]
			p->moveSize = 8;
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	2208      	movs	r2, #8
 800b924:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"J,G,K,J,G,K,H,D");
 800b926:	687b      	ldr	r3, [r7, #4]
 800b928:	3340      	adds	r3, #64	; 0x40
 800b92a:	4a59      	ldr	r2, [pc, #356]	; (800ba90 <problem_fetch+0xa770>)
 800b92c:	461c      	mov	r4, r3
 800b92e:	4615      	mov	r5, r2
 800b930:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b932:	6020      	str	r0, [r4, #0]
 800b934:	6061      	str	r1, [r4, #4]
 800b936:	60a2      	str	r2, [r4, #8]
 800b938:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,6,9,13,17,16,16,18");
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	3304      	adds	r3, #4
 800b93e:	4a55      	ldr	r2, [pc, #340]	; (800ba94 <problem_fetch+0xa774>)
 800b940:	461d      	mov	r5, r3
 800b942:	4614      	mov	r4, r2
 800b944:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800b946:	6028      	str	r0, [r5, #0]
 800b948:	6069      	str	r1, [r5, #4]
 800b94a:	60aa      	str	r2, [r5, #8]
 800b94c:	60eb      	str	r3, [r5, #12]
 800b94e:	6820      	ldr	r0, [r4, #0]
 800b950:	6128      	str	r0, [r5, #16]
 800b952:	7923      	ldrb	r3, [r4, #4]
 800b954:	752b      	strb	r3, [r5, #20]
			strcpy(p->startFinish, "s,s,d,d,d,d,d,e");
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	33d8      	adds	r3, #216	; 0xd8
 800b95a:	4a4f      	ldr	r2, [pc, #316]	; (800ba98 <problem_fetch+0xa778>)
 800b95c:	461c      	mov	r4, r3
 800b95e:	4615      	mov	r5, r2
 800b960:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b962:	6020      	str	r0, [r4, #0]
 800b964:	6061      	str	r1, [r4, #4]
 800b966:	60a2      	str	r2, [r4, #8]
 800b968:	60e3      	str	r3, [r4, #12]
			strcpy(p->grade, "6C+");
 800b96a:	687b      	ldr	r3, [r7, #4]
 800b96c:	33cc      	adds	r3, #204	; 0xcc
 800b96e:	4a3a      	ldr	r2, [pc, #232]	; (800ba58 <problem_fetch+0xa738>)
 800b970:	6810      	ldr	r0, [r2, #0]
 800b972:	6018      	str	r0, [r3, #0]
			break;
 800b974:	f00f ba1a 	b.w	801adac <problem_fetch+0x19a8c>
		case 379 :
			strcpy(p->name,"LAST MOMENT");
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	337c      	adds	r3, #124	; 0x7c
 800b97c:	4a47      	ldr	r2, [pc, #284]	; (800ba9c <problem_fetch+0xa77c>)
 800b97e:	461c      	mov	r4, r3
 800b980:	4613      	mov	r3, r2
 800b982:	cb07      	ldmia	r3!, {r0, r1, r2}
 800b984:	6020      	str	r0, [r4, #0]
 800b986:	6061      	str	r1, [r4, #4]
 800b988:	60a2      	str	r2, [r4, #8]
			p->moveSize = 5;
 800b98a:	687b      	ldr	r3, [r7, #4]
 800b98c:	2205      	movs	r2, #5
 800b98e:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"G,E,I,G,I");
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	3340      	adds	r3, #64	; 0x40
 800b994:	4942      	ldr	r1, [pc, #264]	; (800baa0 <problem_fetch+0xa780>)
 800b996:	461a      	mov	r2, r3
 800b998:	460b      	mov	r3, r1
 800b99a:	cb03      	ldmia	r3!, {r0, r1}
 800b99c:	6010      	str	r0, [r2, #0]
 800b99e:	6051      	str	r1, [r2, #4]
 800b9a0:	881b      	ldrh	r3, [r3, #0]
 800b9a2:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"4,8,10,14,18");
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	3304      	adds	r3, #4
 800b9a8:	4a3e      	ldr	r2, [pc, #248]	; (800baa4 <problem_fetch+0xa784>)
 800b9aa:	461c      	mov	r4, r3
 800b9ac:	4613      	mov	r3, r2
 800b9ae:	cb07      	ldmia	r3!, {r0, r1, r2}
 800b9b0:	6020      	str	r0, [r4, #0]
 800b9b2:	6061      	str	r1, [r4, #4]
 800b9b4:	60a2      	str	r2, [r4, #8]
 800b9b6:	781b      	ldrb	r3, [r3, #0]
 800b9b8:	7323      	strb	r3, [r4, #12]
			strcpy(p->startFinish, "s,d,d,d,e");
 800b9ba:	687b      	ldr	r3, [r7, #4]
 800b9bc:	33d8      	adds	r3, #216	; 0xd8
 800b9be:	493a      	ldr	r1, [pc, #232]	; (800baa8 <problem_fetch+0xa788>)
 800b9c0:	461a      	mov	r2, r3
 800b9c2:	460b      	mov	r3, r1
 800b9c4:	cb03      	ldmia	r3!, {r0, r1}
 800b9c6:	6010      	str	r0, [r2, #0]
 800b9c8:	6051      	str	r1, [r2, #4]
 800b9ca:	881b      	ldrh	r3, [r3, #0]
 800b9cc:	8113      	strh	r3, [r2, #8]
			strcpy(p->grade, "6B+");
 800b9ce:	687b      	ldr	r3, [r7, #4]
 800b9d0:	33cc      	adds	r3, #204	; 0xcc
 800b9d2:	4a36      	ldr	r2, [pc, #216]	; (800baac <problem_fetch+0xa78c>)
 800b9d4:	6810      	ldr	r0, [r2, #0]
 800b9d6:	6018      	str	r0, [r3, #0]
			break;
 800b9d8:	f00f b9e8 	b.w	801adac <problem_fetch+0x19a8c>
		case 38 :
			strcpy(p->name,"DRAGONS DEN");
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	337c      	adds	r3, #124	; 0x7c
 800b9e0:	4a33      	ldr	r2, [pc, #204]	; (800bab0 <problem_fetch+0xa790>)
 800b9e2:	461c      	mov	r4, r3
 800b9e4:	4613      	mov	r3, r2
 800b9e6:	cb07      	ldmia	r3!, {r0, r1, r2}
 800b9e8:	6020      	str	r0, [r4, #0]
 800b9ea:	6061      	str	r1, [r4, #4]
 800b9ec:	60a2      	str	r2, [r4, #8]
			p->moveSize = 7;
 800b9ee:	687b      	ldr	r3, [r7, #4]
 800b9f0:	2207      	movs	r2, #7
 800b9f2:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"J,G,K,H,J,G,I");
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	3340      	adds	r3, #64	; 0x40
 800b9f8:	4a2e      	ldr	r2, [pc, #184]	; (800bab4 <problem_fetch+0xa794>)
 800b9fa:	461c      	mov	r4, r3
 800b9fc:	4613      	mov	r3, r2
 800b9fe:	cb07      	ldmia	r3!, {r0, r1, r2}
 800ba00:	6020      	str	r0, [r4, #0]
 800ba02:	6061      	str	r1, [r4, #4]
 800ba04:	60a2      	str	r2, [r4, #8]
 800ba06:	881b      	ldrh	r3, [r3, #0]
 800ba08:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,6,9,10,13,15,18");
 800ba0a:	687b      	ldr	r3, [r7, #4]
 800ba0c:	3304      	adds	r3, #4
 800ba0e:	4a2a      	ldr	r2, [pc, #168]	; (800bab8 <problem_fetch+0xa798>)
 800ba10:	461d      	mov	r5, r3
 800ba12:	4614      	mov	r4, r2
 800ba14:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800ba16:	6028      	str	r0, [r5, #0]
 800ba18:	6069      	str	r1, [r5, #4]
 800ba1a:	60aa      	str	r2, [r5, #8]
 800ba1c:	60eb      	str	r3, [r5, #12]
 800ba1e:	8823      	ldrh	r3, [r4, #0]
 800ba20:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish, "s,s,d,d,d,d,e");
 800ba22:	687b      	ldr	r3, [r7, #4]
 800ba24:	33d8      	adds	r3, #216	; 0xd8
 800ba26:	4a25      	ldr	r2, [pc, #148]	; (800babc <problem_fetch+0xa79c>)
 800ba28:	461c      	mov	r4, r3
 800ba2a:	4613      	mov	r3, r2
 800ba2c:	cb07      	ldmia	r3!, {r0, r1, r2}
 800ba2e:	6020      	str	r0, [r4, #0]
 800ba30:	6061      	str	r1, [r4, #4]
 800ba32:	60a2      	str	r2, [r4, #8]
 800ba34:	881b      	ldrh	r3, [r3, #0]
 800ba36:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade, "6B+");
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	33cc      	adds	r3, #204	; 0xcc
 800ba3c:	4a1b      	ldr	r2, [pc, #108]	; (800baac <problem_fetch+0xa78c>)
 800ba3e:	6810      	ldr	r0, [r2, #0]
 800ba40:	6018      	str	r0, [r3, #0]
			break;
 800ba42:	f00f b9b3 	b.w	801adac <problem_fetch+0x19a8c>
 800ba46:	bf00      	nop
 800ba48:	08024d7c 	.word	0x08024d7c
 800ba4c:	08024d84 	.word	0x08024d84
 800ba50:	08024d94 	.word	0x08024d94
 800ba54:	08021494 	.word	0x08021494
 800ba58:	080213a8 	.word	0x080213a8
 800ba5c:	08024da8 	.word	0x08024da8
 800ba60:	08024db4 	.word	0x08024db4
 800ba64:	08024dc0 	.word	0x08024dc0
 800ba68:	08021910 	.word	0x08021910
 800ba6c:	08021424 	.word	0x08021424
 800ba70:	08024dd0 	.word	0x08024dd0
 800ba74:	08024de4 	.word	0x08024de4
 800ba78:	08024df0 	.word	0x08024df0
 800ba7c:	0802139c 	.word	0x0802139c
 800ba80:	08021370 	.word	0x08021370
 800ba84:	08024e00 	.word	0x08024e00
 800ba88:	08024e18 	.word	0x08024e18
 800ba8c:	08024e24 	.word	0x08024e24
 800ba90:	08024e30 	.word	0x08024e30
 800ba94:	08024e40 	.word	0x08024e40
 800ba98:	080214cc 	.word	0x080214cc
 800ba9c:	08024e58 	.word	0x08024e58
 800baa0:	08024e64 	.word	0x08024e64
 800baa4:	08024e70 	.word	0x08024e70
 800baa8:	08021320 	.word	0x08021320
 800baac:	080212b0 	.word	0x080212b0
 800bab0:	08024e80 	.word	0x08024e80
 800bab4:	08024e8c 	.word	0x08024e8c
 800bab8:	08024e9c 	.word	0x08024e9c
 800babc:	080212a0 	.word	0x080212a0
		case 380 :
			strcpy(p->name,"WITNESS THE FITNESS");
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	337c      	adds	r3, #124	; 0x7c
 800bac4:	4abc      	ldr	r2, [pc, #752]	; (800bdb8 <problem_fetch+0xaa98>)
 800bac6:	461d      	mov	r5, r3
 800bac8:	4614      	mov	r4, r2
 800baca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800bacc:	6028      	str	r0, [r5, #0]
 800bace:	6069      	str	r1, [r5, #4]
 800bad0:	60aa      	str	r2, [r5, #8]
 800bad2:	60eb      	str	r3, [r5, #12]
 800bad4:	6820      	ldr	r0, [r4, #0]
 800bad6:	6128      	str	r0, [r5, #16]
			p->moveSize = 7;
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	2207      	movs	r2, #7
 800badc:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"G,D,B,E,B,E,D");
 800bade:	687b      	ldr	r3, [r7, #4]
 800bae0:	3340      	adds	r3, #64	; 0x40
 800bae2:	4ab6      	ldr	r2, [pc, #728]	; (800bdbc <problem_fetch+0xaa9c>)
 800bae4:	461c      	mov	r4, r3
 800bae6:	4613      	mov	r3, r2
 800bae8:	cb07      	ldmia	r3!, {r0, r1, r2}
 800baea:	6020      	str	r0, [r4, #0]
 800baec:	6061      	str	r1, [r4, #4]
 800baee:	60a2      	str	r2, [r4, #8]
 800baf0:	881b      	ldrh	r3, [r3, #0]
 800baf2:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,7,10,12,15,6,18");
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	3304      	adds	r3, #4
 800baf8:	4ab1      	ldr	r2, [pc, #708]	; (800bdc0 <problem_fetch+0xaaa0>)
 800bafa:	461d      	mov	r5, r3
 800bafc:	4614      	mov	r4, r2
 800bafe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800bb00:	6028      	str	r0, [r5, #0]
 800bb02:	6069      	str	r1, [r5, #4]
 800bb04:	60aa      	str	r2, [r5, #8]
 800bb06:	60eb      	str	r3, [r5, #12]
 800bb08:	8823      	ldrh	r3, [r4, #0]
 800bb0a:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish, "s,d,d,d,d,d,e");
 800bb0c:	687b      	ldr	r3, [r7, #4]
 800bb0e:	33d8      	adds	r3, #216	; 0xd8
 800bb10:	4aac      	ldr	r2, [pc, #688]	; (800bdc4 <problem_fetch+0xaaa4>)
 800bb12:	461c      	mov	r4, r3
 800bb14:	4613      	mov	r3, r2
 800bb16:	cb07      	ldmia	r3!, {r0, r1, r2}
 800bb18:	6020      	str	r0, [r4, #0]
 800bb1a:	6061      	str	r1, [r4, #4]
 800bb1c:	60a2      	str	r2, [r4, #8]
 800bb1e:	881b      	ldrh	r3, [r3, #0]
 800bb20:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade, "6B+");
 800bb22:	687b      	ldr	r3, [r7, #4]
 800bb24:	33cc      	adds	r3, #204	; 0xcc
 800bb26:	4aa8      	ldr	r2, [pc, #672]	; (800bdc8 <problem_fetch+0xaaa8>)
 800bb28:	6810      	ldr	r0, [r2, #0]
 800bb2a:	6018      	str	r0, [r3, #0]
			break;
 800bb2c:	f00f b93e 	b.w	801adac <problem_fetch+0x19a8c>
		case 381 :
			strcpy(p->name,"VASIL VASIL");
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	337c      	adds	r3, #124	; 0x7c
 800bb34:	4aa5      	ldr	r2, [pc, #660]	; (800bdcc <problem_fetch+0xaaac>)
 800bb36:	461c      	mov	r4, r3
 800bb38:	4613      	mov	r3, r2
 800bb3a:	cb07      	ldmia	r3!, {r0, r1, r2}
 800bb3c:	6020      	str	r0, [r4, #0]
 800bb3e:	6061      	str	r1, [r4, #4]
 800bb40:	60a2      	str	r2, [r4, #8]
			p->moveSize = 6;
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	2206      	movs	r2, #6
 800bb46:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"G,J,E,J,H,I");
 800bb48:	687b      	ldr	r3, [r7, #4]
 800bb4a:	3340      	adds	r3, #64	; 0x40
 800bb4c:	4aa0      	ldr	r2, [pc, #640]	; (800bdd0 <problem_fetch+0xaab0>)
 800bb4e:	461c      	mov	r4, r3
 800bb50:	4613      	mov	r3, r2
 800bb52:	cb07      	ldmia	r3!, {r0, r1, r2}
 800bb54:	6020      	str	r0, [r4, #0]
 800bb56:	6061      	str	r1, [r4, #4]
 800bb58:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,7,9,12,16,18");
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	3304      	adds	r3, #4
 800bb5e:	4a9d      	ldr	r2, [pc, #628]	; (800bdd4 <problem_fetch+0xaab4>)
 800bb60:	461c      	mov	r4, r3
 800bb62:	4613      	mov	r3, r2
 800bb64:	cb07      	ldmia	r3!, {r0, r1, r2}
 800bb66:	6020      	str	r0, [r4, #0]
 800bb68:	6061      	str	r1, [r4, #4]
 800bb6a:	60a2      	str	r2, [r4, #8]
 800bb6c:	881a      	ldrh	r2, [r3, #0]
 800bb6e:	789b      	ldrb	r3, [r3, #2]
 800bb70:	81a2      	strh	r2, [r4, #12]
 800bb72:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish, "s,d,d,d,d,e");
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	33d8      	adds	r3, #216	; 0xd8
 800bb78:	4a97      	ldr	r2, [pc, #604]	; (800bdd8 <problem_fetch+0xaab8>)
 800bb7a:	461c      	mov	r4, r3
 800bb7c:	4613      	mov	r3, r2
 800bb7e:	cb07      	ldmia	r3!, {r0, r1, r2}
 800bb80:	6020      	str	r0, [r4, #0]
 800bb82:	6061      	str	r1, [r4, #4]
 800bb84:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade, "7B");
 800bb86:	687b      	ldr	r3, [r7, #4]
 800bb88:	33cc      	adds	r3, #204	; 0xcc
 800bb8a:	4a94      	ldr	r2, [pc, #592]	; (800bddc <problem_fetch+0xaabc>)
 800bb8c:	8811      	ldrh	r1, [r2, #0]
 800bb8e:	7892      	ldrb	r2, [r2, #2]
 800bb90:	8019      	strh	r1, [r3, #0]
 800bb92:	709a      	strb	r2, [r3, #2]
			break;
 800bb94:	f00f b90a 	b.w	801adac <problem_fetch+0x19a8c>
		case 382 :
			strcpy(p->name,"THE GOLDEN GATE");
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	337c      	adds	r3, #124	; 0x7c
 800bb9c:	4a90      	ldr	r2, [pc, #576]	; (800bde0 <problem_fetch+0xaac0>)
 800bb9e:	461c      	mov	r4, r3
 800bba0:	4615      	mov	r5, r2
 800bba2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800bba4:	6020      	str	r0, [r4, #0]
 800bba6:	6061      	str	r1, [r4, #4]
 800bba8:	60a2      	str	r2, [r4, #8]
 800bbaa:	60e3      	str	r3, [r4, #12]
			p->moveSize = 6;
 800bbac:	687b      	ldr	r3, [r7, #4]
 800bbae:	2206      	movs	r2, #6
 800bbb0:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"J,H,C,E,B,D");
 800bbb2:	687b      	ldr	r3, [r7, #4]
 800bbb4:	3340      	adds	r3, #64	; 0x40
 800bbb6:	4a8b      	ldr	r2, [pc, #556]	; (800bde4 <problem_fetch+0xaac4>)
 800bbb8:	461c      	mov	r4, r3
 800bbba:	4613      	mov	r3, r2
 800bbbc:	cb07      	ldmia	r3!, {r0, r1, r2}
 800bbbe:	6020      	str	r0, [r4, #0]
 800bbc0:	6061      	str	r1, [r4, #4]
 800bbc2:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,8,8,12,15,18");
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	3304      	adds	r3, #4
 800bbc8:	4a87      	ldr	r2, [pc, #540]	; (800bde8 <problem_fetch+0xaac8>)
 800bbca:	461c      	mov	r4, r3
 800bbcc:	4613      	mov	r3, r2
 800bbce:	cb07      	ldmia	r3!, {r0, r1, r2}
 800bbd0:	6020      	str	r0, [r4, #0]
 800bbd2:	6061      	str	r1, [r4, #4]
 800bbd4:	60a2      	str	r2, [r4, #8]
 800bbd6:	881a      	ldrh	r2, [r3, #0]
 800bbd8:	789b      	ldrb	r3, [r3, #2]
 800bbda:	81a2      	strh	r2, [r4, #12]
 800bbdc:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish, "s,d,d,d,d,e");
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	33d8      	adds	r3, #216	; 0xd8
 800bbe2:	4a7d      	ldr	r2, [pc, #500]	; (800bdd8 <problem_fetch+0xaab8>)
 800bbe4:	461c      	mov	r4, r3
 800bbe6:	4613      	mov	r3, r2
 800bbe8:	cb07      	ldmia	r3!, {r0, r1, r2}
 800bbea:	6020      	str	r0, [r4, #0]
 800bbec:	6061      	str	r1, [r4, #4]
 800bbee:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade, "6B+");
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	33cc      	adds	r3, #204	; 0xcc
 800bbf4:	4a74      	ldr	r2, [pc, #464]	; (800bdc8 <problem_fetch+0xaaa8>)
 800bbf6:	6810      	ldr	r0, [r2, #0]
 800bbf8:	6018      	str	r0, [r3, #0]
			break;
 800bbfa:	f00f b8d7 	b.w	801adac <problem_fetch+0x19a8c>
		case 383 :
			strcpy(p->name,"HOTEL SOPRAMONTE");
 800bbfe:	687b      	ldr	r3, [r7, #4]
 800bc00:	337c      	adds	r3, #124	; 0x7c
 800bc02:	4a7a      	ldr	r2, [pc, #488]	; (800bdec <problem_fetch+0xaacc>)
 800bc04:	461d      	mov	r5, r3
 800bc06:	4614      	mov	r4, r2
 800bc08:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800bc0a:	6028      	str	r0, [r5, #0]
 800bc0c:	6069      	str	r1, [r5, #4]
 800bc0e:	60aa      	str	r2, [r5, #8]
 800bc10:	60eb      	str	r3, [r5, #12]
 800bc12:	7823      	ldrb	r3, [r4, #0]
 800bc14:	742b      	strb	r3, [r5, #16]
			p->moveSize = 5;
 800bc16:	687b      	ldr	r3, [r7, #4]
 800bc18:	2205      	movs	r2, #5
 800bc1a:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"G,C,G,G,I");
 800bc1c:	687b      	ldr	r3, [r7, #4]
 800bc1e:	3340      	adds	r3, #64	; 0x40
 800bc20:	4973      	ldr	r1, [pc, #460]	; (800bdf0 <problem_fetch+0xaad0>)
 800bc22:	461a      	mov	r2, r3
 800bc24:	460b      	mov	r3, r1
 800bc26:	cb03      	ldmia	r3!, {r0, r1}
 800bc28:	6010      	str	r0, [r2, #0]
 800bc2a:	6051      	str	r1, [r2, #4]
 800bc2c:	881b      	ldrh	r3, [r3, #0]
 800bc2e:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"4,8,10,15,18");
 800bc30:	687b      	ldr	r3, [r7, #4]
 800bc32:	3304      	adds	r3, #4
 800bc34:	4a6f      	ldr	r2, [pc, #444]	; (800bdf4 <problem_fetch+0xaad4>)
 800bc36:	461c      	mov	r4, r3
 800bc38:	4613      	mov	r3, r2
 800bc3a:	cb07      	ldmia	r3!, {r0, r1, r2}
 800bc3c:	6020      	str	r0, [r4, #0]
 800bc3e:	6061      	str	r1, [r4, #4]
 800bc40:	60a2      	str	r2, [r4, #8]
 800bc42:	781b      	ldrb	r3, [r3, #0]
 800bc44:	7323      	strb	r3, [r4, #12]
			strcpy(p->startFinish, "s,d,d,d,e");
 800bc46:	687b      	ldr	r3, [r7, #4]
 800bc48:	33d8      	adds	r3, #216	; 0xd8
 800bc4a:	496b      	ldr	r1, [pc, #428]	; (800bdf8 <problem_fetch+0xaad8>)
 800bc4c:	461a      	mov	r2, r3
 800bc4e:	460b      	mov	r3, r1
 800bc50:	cb03      	ldmia	r3!, {r0, r1}
 800bc52:	6010      	str	r0, [r2, #0]
 800bc54:	6051      	str	r1, [r2, #4]
 800bc56:	881b      	ldrh	r3, [r3, #0]
 800bc58:	8113      	strh	r3, [r2, #8]
			strcpy(p->grade, "7B");
 800bc5a:	687b      	ldr	r3, [r7, #4]
 800bc5c:	33cc      	adds	r3, #204	; 0xcc
 800bc5e:	4a5f      	ldr	r2, [pc, #380]	; (800bddc <problem_fetch+0xaabc>)
 800bc60:	8811      	ldrh	r1, [r2, #0]
 800bc62:	7892      	ldrb	r2, [r2, #2]
 800bc64:	8019      	strh	r1, [r3, #0]
 800bc66:	709a      	strb	r2, [r3, #2]
			break;
 800bc68:	f00f b8a0 	b.w	801adac <problem_fetch+0x19a8c>
		case 384 :
			strcpy(p->name,"CASSIN");
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	337c      	adds	r3, #124	; 0x7c
 800bc70:	4a62      	ldr	r2, [pc, #392]	; (800bdfc <problem_fetch+0xaadc>)
 800bc72:	6810      	ldr	r0, [r2, #0]
 800bc74:	6018      	str	r0, [r3, #0]
 800bc76:	8891      	ldrh	r1, [r2, #4]
 800bc78:	7992      	ldrb	r2, [r2, #6]
 800bc7a:	8099      	strh	r1, [r3, #4]
 800bc7c:	719a      	strb	r2, [r3, #6]
			p->moveSize = 6;
 800bc7e:	687b      	ldr	r3, [r7, #4]
 800bc80:	2206      	movs	r2, #6
 800bc82:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"B,C,E,B,E,A");
 800bc84:	687b      	ldr	r3, [r7, #4]
 800bc86:	3340      	adds	r3, #64	; 0x40
 800bc88:	4a5d      	ldr	r2, [pc, #372]	; (800be00 <problem_fetch+0xaae0>)
 800bc8a:	461c      	mov	r4, r3
 800bc8c:	4613      	mov	r3, r2
 800bc8e:	cb07      	ldmia	r3!, {r0, r1, r2}
 800bc90:	6020      	str	r0, [r4, #0]
 800bc92:	6061      	str	r1, [r4, #4]
 800bc94:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"6,5,9,12,14,18");
 800bc96:	687b      	ldr	r3, [r7, #4]
 800bc98:	3304      	adds	r3, #4
 800bc9a:	4a5a      	ldr	r2, [pc, #360]	; (800be04 <problem_fetch+0xaae4>)
 800bc9c:	461c      	mov	r4, r3
 800bc9e:	4613      	mov	r3, r2
 800bca0:	cb07      	ldmia	r3!, {r0, r1, r2}
 800bca2:	6020      	str	r0, [r4, #0]
 800bca4:	6061      	str	r1, [r4, #4]
 800bca6:	60a2      	str	r2, [r4, #8]
 800bca8:	881a      	ldrh	r2, [r3, #0]
 800bcaa:	789b      	ldrb	r3, [r3, #2]
 800bcac:	81a2      	strh	r2, [r4, #12]
 800bcae:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish, "s,s,d,d,d,e");
 800bcb0:	687b      	ldr	r3, [r7, #4]
 800bcb2:	33d8      	adds	r3, #216	; 0xd8
 800bcb4:	4a54      	ldr	r2, [pc, #336]	; (800be08 <problem_fetch+0xaae8>)
 800bcb6:	461c      	mov	r4, r3
 800bcb8:	4613      	mov	r3, r2
 800bcba:	cb07      	ldmia	r3!, {r0, r1, r2}
 800bcbc:	6020      	str	r0, [r4, #0]
 800bcbe:	6061      	str	r1, [r4, #4]
 800bcc0:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade, "7A+");
 800bcc2:	687b      	ldr	r3, [r7, #4]
 800bcc4:	33cc      	adds	r3, #204	; 0xcc
 800bcc6:	4a51      	ldr	r2, [pc, #324]	; (800be0c <problem_fetch+0xaaec>)
 800bcc8:	6810      	ldr	r0, [r2, #0]
 800bcca:	6018      	str	r0, [r3, #0]
			break;
 800bccc:	f00f b86e 	b.w	801adac <problem_fetch+0x19a8c>
		case 385 :
			strcpy(p->name,"YOUR LAST PIECE OF CHALK");
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	337c      	adds	r3, #124	; 0x7c
 800bcd4:	4a4e      	ldr	r2, [pc, #312]	; (800be10 <problem_fetch+0xaaf0>)
 800bcd6:	461d      	mov	r5, r3
 800bcd8:	4614      	mov	r4, r2
 800bcda:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800bcdc:	6028      	str	r0, [r5, #0]
 800bcde:	6069      	str	r1, [r5, #4]
 800bce0:	60aa      	str	r2, [r5, #8]
 800bce2:	60eb      	str	r3, [r5, #12]
 800bce4:	cc03      	ldmia	r4!, {r0, r1}
 800bce6:	6128      	str	r0, [r5, #16]
 800bce8:	6169      	str	r1, [r5, #20]
 800bcea:	7823      	ldrb	r3, [r4, #0]
 800bcec:	762b      	strb	r3, [r5, #24]
			p->moveSize = 7;
 800bcee:	687b      	ldr	r3, [r7, #4]
 800bcf0:	2207      	movs	r2, #7
 800bcf2:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"G,E,E,K,I,F,I");
 800bcf4:	687b      	ldr	r3, [r7, #4]
 800bcf6:	3340      	adds	r3, #64	; 0x40
 800bcf8:	4a46      	ldr	r2, [pc, #280]	; (800be14 <problem_fetch+0xaaf4>)
 800bcfa:	461c      	mov	r4, r3
 800bcfc:	4613      	mov	r3, r2
 800bcfe:	cb07      	ldmia	r3!, {r0, r1, r2}
 800bd00:	6020      	str	r0, [r4, #0]
 800bd02:	6061      	str	r1, [r4, #4]
 800bd04:	60a2      	str	r2, [r4, #8]
 800bd06:	881b      	ldrh	r3, [r3, #0]
 800bd08:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,8,12,9,14,11,18");
 800bd0a:	687b      	ldr	r3, [r7, #4]
 800bd0c:	3304      	adds	r3, #4
 800bd0e:	4a42      	ldr	r2, [pc, #264]	; (800be18 <problem_fetch+0xaaf8>)
 800bd10:	461d      	mov	r5, r3
 800bd12:	4614      	mov	r4, r2
 800bd14:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800bd16:	6028      	str	r0, [r5, #0]
 800bd18:	6069      	str	r1, [r5, #4]
 800bd1a:	60aa      	str	r2, [r5, #8]
 800bd1c:	60eb      	str	r3, [r5, #12]
 800bd1e:	8823      	ldrh	r3, [r4, #0]
 800bd20:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish, "s,d,d,d,d,d,e");
 800bd22:	687b      	ldr	r3, [r7, #4]
 800bd24:	33d8      	adds	r3, #216	; 0xd8
 800bd26:	4a27      	ldr	r2, [pc, #156]	; (800bdc4 <problem_fetch+0xaaa4>)
 800bd28:	461c      	mov	r4, r3
 800bd2a:	4613      	mov	r3, r2
 800bd2c:	cb07      	ldmia	r3!, {r0, r1, r2}
 800bd2e:	6020      	str	r0, [r4, #0]
 800bd30:	6061      	str	r1, [r4, #4]
 800bd32:	60a2      	str	r2, [r4, #8]
 800bd34:	881b      	ldrh	r3, [r3, #0]
 800bd36:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade, "6B+");
 800bd38:	687b      	ldr	r3, [r7, #4]
 800bd3a:	33cc      	adds	r3, #204	; 0xcc
 800bd3c:	4a22      	ldr	r2, [pc, #136]	; (800bdc8 <problem_fetch+0xaaa8>)
 800bd3e:	6810      	ldr	r0, [r2, #0]
 800bd40:	6018      	str	r0, [r3, #0]
			break;
 800bd42:	f00f b833 	b.w	801adac <problem_fetch+0x19a8c>
		case 386 :
			strcpy(p->name,"THE 45 SECRETS");
 800bd46:	687b      	ldr	r3, [r7, #4]
 800bd48:	337c      	adds	r3, #124	; 0x7c
 800bd4a:	4a34      	ldr	r2, [pc, #208]	; (800be1c <problem_fetch+0xaafc>)
 800bd4c:	461c      	mov	r4, r3
 800bd4e:	4613      	mov	r3, r2
 800bd50:	cb07      	ldmia	r3!, {r0, r1, r2}
 800bd52:	6020      	str	r0, [r4, #0]
 800bd54:	6061      	str	r1, [r4, #4]
 800bd56:	60a2      	str	r2, [r4, #8]
 800bd58:	881a      	ldrh	r2, [r3, #0]
 800bd5a:	789b      	ldrb	r3, [r3, #2]
 800bd5c:	81a2      	strh	r2, [r4, #12]
 800bd5e:	73a3      	strb	r3, [r4, #14]
			p->moveSize = 7;
 800bd60:	687b      	ldr	r3, [r7, #4]
 800bd62:	2207      	movs	r2, #7
 800bd64:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"G,H,E,J,E,A,A");
 800bd66:	687b      	ldr	r3, [r7, #4]
 800bd68:	3340      	adds	r3, #64	; 0x40
 800bd6a:	4a2d      	ldr	r2, [pc, #180]	; (800be20 <problem_fetch+0xab00>)
 800bd6c:	461c      	mov	r4, r3
 800bd6e:	4613      	mov	r3, r2
 800bd70:	cb07      	ldmia	r3!, {r0, r1, r2}
 800bd72:	6020      	str	r0, [r4, #0]
 800bd74:	6061      	str	r1, [r4, #4]
 800bd76:	60a2      	str	r2, [r4, #8]
 800bd78:	881b      	ldrh	r3, [r3, #0]
 800bd7a:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,8,8,7,12,14,18");
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	3304      	adds	r3, #4
 800bd80:	4a28      	ldr	r2, [pc, #160]	; (800be24 <problem_fetch+0xab04>)
 800bd82:	461d      	mov	r5, r3
 800bd84:	4614      	mov	r4, r2
 800bd86:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800bd88:	6028      	str	r0, [r5, #0]
 800bd8a:	6069      	str	r1, [r5, #4]
 800bd8c:	60aa      	str	r2, [r5, #8]
 800bd8e:	60eb      	str	r3, [r5, #12]
 800bd90:	7823      	ldrb	r3, [r4, #0]
 800bd92:	742b      	strb	r3, [r5, #16]
			strcpy(p->startFinish, "s,d,d,d,d,d,e");
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	33d8      	adds	r3, #216	; 0xd8
 800bd98:	4a0a      	ldr	r2, [pc, #40]	; (800bdc4 <problem_fetch+0xaaa4>)
 800bd9a:	461c      	mov	r4, r3
 800bd9c:	4613      	mov	r3, r2
 800bd9e:	cb07      	ldmia	r3!, {r0, r1, r2}
 800bda0:	6020      	str	r0, [r4, #0]
 800bda2:	6061      	str	r1, [r4, #4]
 800bda4:	60a2      	str	r2, [r4, #8]
 800bda6:	881b      	ldrh	r3, [r3, #0]
 800bda8:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade, "6B+");
 800bdaa:	687b      	ldr	r3, [r7, #4]
 800bdac:	33cc      	adds	r3, #204	; 0xcc
 800bdae:	4a06      	ldr	r2, [pc, #24]	; (800bdc8 <problem_fetch+0xaaa8>)
 800bdb0:	6810      	ldr	r0, [r2, #0]
 800bdb2:	6018      	str	r0, [r3, #0]
			break;
 800bdb4:	f00e bffa 	b.w	801adac <problem_fetch+0x19a8c>
 800bdb8:	08024eb0 	.word	0x08024eb0
 800bdbc:	08024ec4 	.word	0x08024ec4
 800bdc0:	08024ed4 	.word	0x08024ed4
 800bdc4:	08021494 	.word	0x08021494
 800bdc8:	080212b0 	.word	0x080212b0
 800bdcc:	08024ee8 	.word	0x08024ee8
 800bdd0:	08024ef4 	.word	0x08024ef4
 800bdd4:	08024f00 	.word	0x08024f00
 800bdd8:	0802139c 	.word	0x0802139c
 800bddc:	0802132c 	.word	0x0802132c
 800bde0:	08024f10 	.word	0x08024f10
 800bde4:	08024f20 	.word	0x08024f20
 800bde8:	08024f2c 	.word	0x08024f2c
 800bdec:	08024f3c 	.word	0x08024f3c
 800bdf0:	08024f50 	.word	0x08024f50
 800bdf4:	08024354 	.word	0x08024354
 800bdf8:	08021320 	.word	0x08021320
 800bdfc:	08024f5c 	.word	0x08024f5c
 800be00:	08024f64 	.word	0x08024f64
 800be04:	08024ac4 	.word	0x08024ac4
 800be08:	08021910 	.word	0x08021910
 800be0c:	08021424 	.word	0x08021424
 800be10:	08024f70 	.word	0x08024f70
 800be14:	08024f8c 	.word	0x08024f8c
 800be18:	08024f9c 	.word	0x08024f9c
 800be1c:	08024fb0 	.word	0x08024fb0
 800be20:	08024fc0 	.word	0x08024fc0
 800be24:	08024fd0 	.word	0x08024fd0
		case 387 :
			strcpy(p->name,"CLASSY");
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	337c      	adds	r3, #124	; 0x7c
 800be2c:	4ab5      	ldr	r2, [pc, #724]	; (800c104 <problem_fetch+0xade4>)
 800be2e:	6810      	ldr	r0, [r2, #0]
 800be30:	6018      	str	r0, [r3, #0]
 800be32:	8891      	ldrh	r1, [r2, #4]
 800be34:	7992      	ldrb	r2, [r2, #6]
 800be36:	8099      	strh	r1, [r3, #4]
 800be38:	719a      	strb	r2, [r3, #6]
			p->moveSize = 5;
 800be3a:	687b      	ldr	r3, [r7, #4]
 800be3c:	2205      	movs	r2, #5
 800be3e:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"G,E,F,C,D");
 800be40:	687b      	ldr	r3, [r7, #4]
 800be42:	3340      	adds	r3, #64	; 0x40
 800be44:	49b0      	ldr	r1, [pc, #704]	; (800c108 <problem_fetch+0xade8>)
 800be46:	461a      	mov	r2, r3
 800be48:	460b      	mov	r3, r1
 800be4a:	cb03      	ldmia	r3!, {r0, r1}
 800be4c:	6010      	str	r0, [r2, #0]
 800be4e:	6051      	str	r1, [r2, #4]
 800be50:	881b      	ldrh	r3, [r3, #0]
 800be52:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"4,8,11,13,18");
 800be54:	687b      	ldr	r3, [r7, #4]
 800be56:	3304      	adds	r3, #4
 800be58:	4aac      	ldr	r2, [pc, #688]	; (800c10c <problem_fetch+0xadec>)
 800be5a:	461c      	mov	r4, r3
 800be5c:	4613      	mov	r3, r2
 800be5e:	cb07      	ldmia	r3!, {r0, r1, r2}
 800be60:	6020      	str	r0, [r4, #0]
 800be62:	6061      	str	r1, [r4, #4]
 800be64:	60a2      	str	r2, [r4, #8]
 800be66:	781b      	ldrb	r3, [r3, #0]
 800be68:	7323      	strb	r3, [r4, #12]
			strcpy(p->startFinish, "s,d,d,d,e");
 800be6a:	687b      	ldr	r3, [r7, #4]
 800be6c:	33d8      	adds	r3, #216	; 0xd8
 800be6e:	49a8      	ldr	r1, [pc, #672]	; (800c110 <problem_fetch+0xadf0>)
 800be70:	461a      	mov	r2, r3
 800be72:	460b      	mov	r3, r1
 800be74:	cb03      	ldmia	r3!, {r0, r1}
 800be76:	6010      	str	r0, [r2, #0]
 800be78:	6051      	str	r1, [r2, #4]
 800be7a:	881b      	ldrh	r3, [r3, #0]
 800be7c:	8113      	strh	r3, [r2, #8]
			strcpy(p->grade, "6B+");
 800be7e:	687b      	ldr	r3, [r7, #4]
 800be80:	33cc      	adds	r3, #204	; 0xcc
 800be82:	4aa4      	ldr	r2, [pc, #656]	; (800c114 <problem_fetch+0xadf4>)
 800be84:	6810      	ldr	r0, [r2, #0]
 800be86:	6018      	str	r0, [r3, #0]
			break;
 800be88:	f00e bf90 	b.w	801adac <problem_fetch+0x19a8c>
		case 388 :
			strcpy(p->name,"BLACK BEAN");
 800be8c:	687b      	ldr	r3, [r7, #4]
 800be8e:	337c      	adds	r3, #124	; 0x7c
 800be90:	49a1      	ldr	r1, [pc, #644]	; (800c118 <problem_fetch+0xadf8>)
 800be92:	461a      	mov	r2, r3
 800be94:	460b      	mov	r3, r1
 800be96:	cb03      	ldmia	r3!, {r0, r1}
 800be98:	6010      	str	r0, [r2, #0]
 800be9a:	6051      	str	r1, [r2, #4]
 800be9c:	8819      	ldrh	r1, [r3, #0]
 800be9e:	789b      	ldrb	r3, [r3, #2]
 800bea0:	8111      	strh	r1, [r2, #8]
 800bea2:	7293      	strb	r3, [r2, #10]
			p->moveSize = 8;
 800bea4:	687b      	ldr	r3, [r7, #4]
 800bea6:	2208      	movs	r2, #8
 800bea8:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"C,E,H,K,E,I,J,I");
 800beaa:	687b      	ldr	r3, [r7, #4]
 800beac:	3340      	adds	r3, #64	; 0x40
 800beae:	4a9b      	ldr	r2, [pc, #620]	; (800c11c <problem_fetch+0xadfc>)
 800beb0:	461c      	mov	r4, r3
 800beb2:	4615      	mov	r5, r2
 800beb4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800beb6:	6020      	str	r0, [r4, #0]
 800beb8:	6061      	str	r1, [r4, #4]
 800beba:	60a2      	str	r2, [r4, #8]
 800bebc:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,6,12,14,9,9,5,18");
 800bebe:	687b      	ldr	r3, [r7, #4]
 800bec0:	3304      	adds	r3, #4
 800bec2:	4a97      	ldr	r2, [pc, #604]	; (800c120 <problem_fetch+0xae00>)
 800bec4:	461d      	mov	r5, r3
 800bec6:	4614      	mov	r4, r2
 800bec8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800beca:	6028      	str	r0, [r5, #0]
 800becc:	6069      	str	r1, [r5, #4]
 800bece:	60aa      	str	r2, [r5, #8]
 800bed0:	60eb      	str	r3, [r5, #12]
 800bed2:	8823      	ldrh	r3, [r4, #0]
 800bed4:	78a2      	ldrb	r2, [r4, #2]
 800bed6:	822b      	strh	r3, [r5, #16]
 800bed8:	4613      	mov	r3, r2
 800beda:	74ab      	strb	r3, [r5, #18]
			strcpy(p->startFinish, "s,s,d,d,d,d,d,e");
 800bedc:	687b      	ldr	r3, [r7, #4]
 800bede:	33d8      	adds	r3, #216	; 0xd8
 800bee0:	4a90      	ldr	r2, [pc, #576]	; (800c124 <problem_fetch+0xae04>)
 800bee2:	461c      	mov	r4, r3
 800bee4:	4615      	mov	r5, r2
 800bee6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800bee8:	6020      	str	r0, [r4, #0]
 800beea:	6061      	str	r1, [r4, #4]
 800beec:	60a2      	str	r2, [r4, #8]
 800beee:	60e3      	str	r3, [r4, #12]
			strcpy(p->grade, "7A+");
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	33cc      	adds	r3, #204	; 0xcc
 800bef4:	4a8c      	ldr	r2, [pc, #560]	; (800c128 <problem_fetch+0xae08>)
 800bef6:	6810      	ldr	r0, [r2, #0]
 800bef8:	6018      	str	r0, [r3, #0]
			break;
 800befa:	f00e bf57 	b.w	801adac <problem_fetch+0x19a8c>
		case 389 :
			strcpy(p->name,"IL DOMANI");
 800befe:	687b      	ldr	r3, [r7, #4]
 800bf00:	337c      	adds	r3, #124	; 0x7c
 800bf02:	498a      	ldr	r1, [pc, #552]	; (800c12c <problem_fetch+0xae0c>)
 800bf04:	461a      	mov	r2, r3
 800bf06:	460b      	mov	r3, r1
 800bf08:	cb03      	ldmia	r3!, {r0, r1}
 800bf0a:	6010      	str	r0, [r2, #0]
 800bf0c:	6051      	str	r1, [r2, #4]
 800bf0e:	881b      	ldrh	r3, [r3, #0]
 800bf10:	8113      	strh	r3, [r2, #8]
			p->moveSize = 5;
 800bf12:	687b      	ldr	r3, [r7, #4]
 800bf14:	2205      	movs	r2, #5
 800bf16:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"H,E,H,E,I");
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	3340      	adds	r3, #64	; 0x40
 800bf1c:	4984      	ldr	r1, [pc, #528]	; (800c130 <problem_fetch+0xae10>)
 800bf1e:	461a      	mov	r2, r3
 800bf20:	460b      	mov	r3, r1
 800bf22:	cb03      	ldmia	r3!, {r0, r1}
 800bf24:	6010      	str	r0, [r2, #0]
 800bf26:	6051      	str	r1, [r2, #4]
 800bf28:	881b      	ldrh	r3, [r3, #0]
 800bf2a:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"5,9,12,14,18");
 800bf2c:	687b      	ldr	r3, [r7, #4]
 800bf2e:	3304      	adds	r3, #4
 800bf30:	4a80      	ldr	r2, [pc, #512]	; (800c134 <problem_fetch+0xae14>)
 800bf32:	461c      	mov	r4, r3
 800bf34:	4613      	mov	r3, r2
 800bf36:	cb07      	ldmia	r3!, {r0, r1, r2}
 800bf38:	6020      	str	r0, [r4, #0]
 800bf3a:	6061      	str	r1, [r4, #4]
 800bf3c:	60a2      	str	r2, [r4, #8]
 800bf3e:	781b      	ldrb	r3, [r3, #0]
 800bf40:	7323      	strb	r3, [r4, #12]
			strcpy(p->startFinish, "s,d,d,d,e");
 800bf42:	687b      	ldr	r3, [r7, #4]
 800bf44:	33d8      	adds	r3, #216	; 0xd8
 800bf46:	4972      	ldr	r1, [pc, #456]	; (800c110 <problem_fetch+0xadf0>)
 800bf48:	461a      	mov	r2, r3
 800bf4a:	460b      	mov	r3, r1
 800bf4c:	cb03      	ldmia	r3!, {r0, r1}
 800bf4e:	6010      	str	r0, [r2, #0]
 800bf50:	6051      	str	r1, [r2, #4]
 800bf52:	881b      	ldrh	r3, [r3, #0]
 800bf54:	8113      	strh	r3, [r2, #8]
			strcpy(p->grade, "7C");
 800bf56:	687b      	ldr	r3, [r7, #4]
 800bf58:	33cc      	adds	r3, #204	; 0xcc
 800bf5a:	4a77      	ldr	r2, [pc, #476]	; (800c138 <problem_fetch+0xae18>)
 800bf5c:	8811      	ldrh	r1, [r2, #0]
 800bf5e:	7892      	ldrb	r2, [r2, #2]
 800bf60:	8019      	strh	r1, [r3, #0]
 800bf62:	709a      	strb	r2, [r3, #2]
			break;
 800bf64:	f00e bf22 	b.w	801adac <problem_fetch+0x19a8c>
		case 39 :
			strcpy(p->name,"ONE");
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	337c      	adds	r3, #124	; 0x7c
 800bf6c:	4a73      	ldr	r2, [pc, #460]	; (800c13c <problem_fetch+0xae1c>)
 800bf6e:	6810      	ldr	r0, [r2, #0]
 800bf70:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 800bf72:	687b      	ldr	r3, [r7, #4]
 800bf74:	2206      	movs	r2, #6
 800bf76:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"G,E,E,C,E,I");
 800bf78:	687b      	ldr	r3, [r7, #4]
 800bf7a:	3340      	adds	r3, #64	; 0x40
 800bf7c:	4a70      	ldr	r2, [pc, #448]	; (800c140 <problem_fetch+0xae20>)
 800bf7e:	461c      	mov	r4, r3
 800bf80:	4613      	mov	r3, r2
 800bf82:	cb07      	ldmia	r3!, {r0, r1, r2}
 800bf84:	6020      	str	r0, [r4, #0]
 800bf86:	6061      	str	r1, [r4, #4]
 800bf88:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,8,9,13,16,18");
 800bf8a:	687b      	ldr	r3, [r7, #4]
 800bf8c:	3304      	adds	r3, #4
 800bf8e:	4a6d      	ldr	r2, [pc, #436]	; (800c144 <problem_fetch+0xae24>)
 800bf90:	461c      	mov	r4, r3
 800bf92:	4613      	mov	r3, r2
 800bf94:	cb07      	ldmia	r3!, {r0, r1, r2}
 800bf96:	6020      	str	r0, [r4, #0]
 800bf98:	6061      	str	r1, [r4, #4]
 800bf9a:	60a2      	str	r2, [r4, #8]
 800bf9c:	881a      	ldrh	r2, [r3, #0]
 800bf9e:	789b      	ldrb	r3, [r3, #2]
 800bfa0:	81a2      	strh	r2, [r4, #12]
 800bfa2:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish, "s,d,d,d,d,e");
 800bfa4:	687b      	ldr	r3, [r7, #4]
 800bfa6:	33d8      	adds	r3, #216	; 0xd8
 800bfa8:	4a67      	ldr	r2, [pc, #412]	; (800c148 <problem_fetch+0xae28>)
 800bfaa:	461c      	mov	r4, r3
 800bfac:	4613      	mov	r3, r2
 800bfae:	cb07      	ldmia	r3!, {r0, r1, r2}
 800bfb0:	6020      	str	r0, [r4, #0]
 800bfb2:	6061      	str	r1, [r4, #4]
 800bfb4:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade, "6B+");
 800bfb6:	687b      	ldr	r3, [r7, #4]
 800bfb8:	33cc      	adds	r3, #204	; 0xcc
 800bfba:	4a56      	ldr	r2, [pc, #344]	; (800c114 <problem_fetch+0xadf4>)
 800bfbc:	6810      	ldr	r0, [r2, #0]
 800bfbe:	6018      	str	r0, [r3, #0]
			break;
 800bfc0:	f00e bef4 	b.w	801adac <problem_fetch+0x19a8c>
		case 390 :
			strcpy(p->name,"LAPINERIE");
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	337c      	adds	r3, #124	; 0x7c
 800bfc8:	4960      	ldr	r1, [pc, #384]	; (800c14c <problem_fetch+0xae2c>)
 800bfca:	461a      	mov	r2, r3
 800bfcc:	460b      	mov	r3, r1
 800bfce:	cb03      	ldmia	r3!, {r0, r1}
 800bfd0:	6010      	str	r0, [r2, #0]
 800bfd2:	6051      	str	r1, [r2, #4]
 800bfd4:	881b      	ldrh	r3, [r3, #0]
 800bfd6:	8113      	strh	r3, [r2, #8]
			p->moveSize = 6;
 800bfd8:	687b      	ldr	r3, [r7, #4]
 800bfda:	2206      	movs	r2, #6
 800bfdc:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"C,E,B,E,E,I");
 800bfde:	687b      	ldr	r3, [r7, #4]
 800bfe0:	3340      	adds	r3, #64	; 0x40
 800bfe2:	4a5b      	ldr	r2, [pc, #364]	; (800c150 <problem_fetch+0xae30>)
 800bfe4:	461c      	mov	r4, r3
 800bfe6:	4613      	mov	r3, r2
 800bfe8:	cb07      	ldmia	r3!, {r0, r1, r2}
 800bfea:	6020      	str	r0, [r4, #0]
 800bfec:	6061      	str	r1, [r4, #4]
 800bfee:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,9,12,14,16,18");
 800bff0:	687b      	ldr	r3, [r7, #4]
 800bff2:	3304      	adds	r3, #4
 800bff4:	4a57      	ldr	r2, [pc, #348]	; (800c154 <problem_fetch+0xae34>)
 800bff6:	461c      	mov	r4, r3
 800bff8:	4615      	mov	r5, r2
 800bffa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800bffc:	6020      	str	r0, [r4, #0]
 800bffe:	6061      	str	r1, [r4, #4]
 800c000:	60a2      	str	r2, [r4, #8]
 800c002:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish, "s,d,d,d,d,e");
 800c004:	687b      	ldr	r3, [r7, #4]
 800c006:	33d8      	adds	r3, #216	; 0xd8
 800c008:	4a4f      	ldr	r2, [pc, #316]	; (800c148 <problem_fetch+0xae28>)
 800c00a:	461c      	mov	r4, r3
 800c00c:	4613      	mov	r3, r2
 800c00e:	cb07      	ldmia	r3!, {r0, r1, r2}
 800c010:	6020      	str	r0, [r4, #0]
 800c012:	6061      	str	r1, [r4, #4]
 800c014:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade, "7B+");
 800c016:	687b      	ldr	r3, [r7, #4]
 800c018:	33cc      	adds	r3, #204	; 0xcc
 800c01a:	4a4f      	ldr	r2, [pc, #316]	; (800c158 <problem_fetch+0xae38>)
 800c01c:	6810      	ldr	r0, [r2, #0]
 800c01e:	6018      	str	r0, [r3, #0]
			break;
 800c020:	f00e bec4 	b.w	801adac <problem_fetch+0x19a8c>
		case 391 :
			strcpy(p->name,"LE DOIGHT");
 800c024:	687b      	ldr	r3, [r7, #4]
 800c026:	337c      	adds	r3, #124	; 0x7c
 800c028:	494c      	ldr	r1, [pc, #304]	; (800c15c <problem_fetch+0xae3c>)
 800c02a:	461a      	mov	r2, r3
 800c02c:	460b      	mov	r3, r1
 800c02e:	cb03      	ldmia	r3!, {r0, r1}
 800c030:	6010      	str	r0, [r2, #0]
 800c032:	6051      	str	r1, [r2, #4]
 800c034:	881b      	ldrh	r3, [r3, #0]
 800c036:	8113      	strh	r3, [r2, #8]
			p->moveSize = 8;
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	2208      	movs	r2, #8
 800c03c:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"C,B,D,B,E,C,G,I");
 800c03e:	687b      	ldr	r3, [r7, #4]
 800c040:	3340      	adds	r3, #64	; 0x40
 800c042:	4a47      	ldr	r2, [pc, #284]	; (800c160 <problem_fetch+0xae40>)
 800c044:	461c      	mov	r4, r3
 800c046:	4615      	mov	r5, r2
 800c048:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c04a:	6020      	str	r0, [r4, #0]
 800c04c:	6061      	str	r1, [r4, #4]
 800c04e:	60a2      	str	r2, [r4, #8]
 800c050:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,6,7,10,12,16,17,18");
 800c052:	687b      	ldr	r3, [r7, #4]
 800c054:	3304      	adds	r3, #4
 800c056:	4a43      	ldr	r2, [pc, #268]	; (800c164 <problem_fetch+0xae44>)
 800c058:	461d      	mov	r5, r3
 800c05a:	4614      	mov	r4, r2
 800c05c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800c05e:	6028      	str	r0, [r5, #0]
 800c060:	6069      	str	r1, [r5, #4]
 800c062:	60aa      	str	r2, [r5, #8]
 800c064:	60eb      	str	r3, [r5, #12]
 800c066:	6820      	ldr	r0, [r4, #0]
 800c068:	6128      	str	r0, [r5, #16]
 800c06a:	7923      	ldrb	r3, [r4, #4]
 800c06c:	752b      	strb	r3, [r5, #20]
			strcpy(p->startFinish, "s,s,d,d,d,d,d,e");
 800c06e:	687b      	ldr	r3, [r7, #4]
 800c070:	33d8      	adds	r3, #216	; 0xd8
 800c072:	4a2c      	ldr	r2, [pc, #176]	; (800c124 <problem_fetch+0xae04>)
 800c074:	461c      	mov	r4, r3
 800c076:	4615      	mov	r5, r2
 800c078:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c07a:	6020      	str	r0, [r4, #0]
 800c07c:	6061      	str	r1, [r4, #4]
 800c07e:	60a2      	str	r2, [r4, #8]
 800c080:	60e3      	str	r3, [r4, #12]
			strcpy(p->grade, "7A");
 800c082:	687b      	ldr	r3, [r7, #4]
 800c084:	33cc      	adds	r3, #204	; 0xcc
 800c086:	4a38      	ldr	r2, [pc, #224]	; (800c168 <problem_fetch+0xae48>)
 800c088:	8811      	ldrh	r1, [r2, #0]
 800c08a:	7892      	ldrb	r2, [r2, #2]
 800c08c:	8019      	strh	r1, [r3, #0]
 800c08e:	709a      	strb	r2, [r3, #2]
			break;
 800c090:	f00e be8c 	b.w	801adac <problem_fetch+0x19a8c>
		case 392 :
			strcpy(p->name,"CHRIS THE STRONGEST");
 800c094:	687b      	ldr	r3, [r7, #4]
 800c096:	337c      	adds	r3, #124	; 0x7c
 800c098:	4a34      	ldr	r2, [pc, #208]	; (800c16c <problem_fetch+0xae4c>)
 800c09a:	461d      	mov	r5, r3
 800c09c:	4614      	mov	r4, r2
 800c09e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800c0a0:	6028      	str	r0, [r5, #0]
 800c0a2:	6069      	str	r1, [r5, #4]
 800c0a4:	60aa      	str	r2, [r5, #8]
 800c0a6:	60eb      	str	r3, [r5, #12]
 800c0a8:	6820      	ldr	r0, [r4, #0]
 800c0aa:	6128      	str	r0, [r5, #16]
			p->moveSize = 5;
 800c0ac:	687b      	ldr	r3, [r7, #4]
 800c0ae:	2205      	movs	r2, #5
 800c0b0:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"G,J,F,G,D");
 800c0b2:	687b      	ldr	r3, [r7, #4]
 800c0b4:	3340      	adds	r3, #64	; 0x40
 800c0b6:	492e      	ldr	r1, [pc, #184]	; (800c170 <problem_fetch+0xae50>)
 800c0b8:	461a      	mov	r2, r3
 800c0ba:	460b      	mov	r3, r1
 800c0bc:	cb03      	ldmia	r3!, {r0, r1}
 800c0be:	6010      	str	r0, [r2, #0]
 800c0c0:	6051      	str	r1, [r2, #4]
 800c0c2:	881b      	ldrh	r3, [r3, #0]
 800c0c4:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"4,5,11,14,18");
 800c0c6:	687b      	ldr	r3, [r7, #4]
 800c0c8:	3304      	adds	r3, #4
 800c0ca:	4a2a      	ldr	r2, [pc, #168]	; (800c174 <problem_fetch+0xae54>)
 800c0cc:	461c      	mov	r4, r3
 800c0ce:	4613      	mov	r3, r2
 800c0d0:	cb07      	ldmia	r3!, {r0, r1, r2}
 800c0d2:	6020      	str	r0, [r4, #0]
 800c0d4:	6061      	str	r1, [r4, #4]
 800c0d6:	60a2      	str	r2, [r4, #8]
 800c0d8:	781b      	ldrb	r3, [r3, #0]
 800c0da:	7323      	strb	r3, [r4, #12]
			strcpy(p->startFinish, "s,s,d,d,e");
 800c0dc:	687b      	ldr	r3, [r7, #4]
 800c0de:	33d8      	adds	r3, #216	; 0xd8
 800c0e0:	4925      	ldr	r1, [pc, #148]	; (800c178 <problem_fetch+0xae58>)
 800c0e2:	461a      	mov	r2, r3
 800c0e4:	460b      	mov	r3, r1
 800c0e6:	cb03      	ldmia	r3!, {r0, r1}
 800c0e8:	6010      	str	r0, [r2, #0]
 800c0ea:	6051      	str	r1, [r2, #4]
 800c0ec:	881b      	ldrh	r3, [r3, #0]
 800c0ee:	8113      	strh	r3, [r2, #8]
			strcpy(p->grade, "7C");
 800c0f0:	687b      	ldr	r3, [r7, #4]
 800c0f2:	33cc      	adds	r3, #204	; 0xcc
 800c0f4:	4a10      	ldr	r2, [pc, #64]	; (800c138 <problem_fetch+0xae18>)
 800c0f6:	8811      	ldrh	r1, [r2, #0]
 800c0f8:	7892      	ldrb	r2, [r2, #2]
 800c0fa:	8019      	strh	r1, [r3, #0]
 800c0fc:	709a      	strb	r2, [r3, #2]
			break;
 800c0fe:	f00e be55 	b.w	801adac <problem_fetch+0x19a8c>
 800c102:	bf00      	nop
 800c104:	08024fe4 	.word	0x08024fe4
 800c108:	08024fec 	.word	0x08024fec
 800c10c:	08024ff8 	.word	0x08024ff8
 800c110:	08021320 	.word	0x08021320
 800c114:	080212b0 	.word	0x080212b0
 800c118:	08025008 	.word	0x08025008
 800c11c:	08025014 	.word	0x08025014
 800c120:	08025024 	.word	0x08025024
 800c124:	080214cc 	.word	0x080214cc
 800c128:	08021424 	.word	0x08021424
 800c12c:	08025038 	.word	0x08025038
 800c130:	08025044 	.word	0x08025044
 800c134:	08022d64 	.word	0x08022d64
 800c138:	0802158c 	.word	0x0802158c
 800c13c:	08025050 	.word	0x08025050
 800c140:	08025054 	.word	0x08025054
 800c144:	08025060 	.word	0x08025060
 800c148:	0802139c 	.word	0x0802139c
 800c14c:	08025070 	.word	0x08025070
 800c150:	0802507c 	.word	0x0802507c
 800c154:	08021c04 	.word	0x08021c04
 800c158:	08021848 	.word	0x08021848
 800c15c:	08025088 	.word	0x08025088
 800c160:	08025094 	.word	0x08025094
 800c164:	08024a60 	.word	0x08024a60
 800c168:	080212f4 	.word	0x080212f4
 800c16c:	080250a4 	.word	0x080250a4
 800c170:	080250b8 	.word	0x080250b8
 800c174:	080250c4 	.word	0x080250c4
 800c178:	080221c8 	.word	0x080221c8
		case 393 :
			strcpy(p->name,"HYPNOTIZED MINDS");
 800c17c:	687b      	ldr	r3, [r7, #4]
 800c17e:	337c      	adds	r3, #124	; 0x7c
 800c180:	4ac1      	ldr	r2, [pc, #772]	; (800c488 <problem_fetch+0xb168>)
 800c182:	461d      	mov	r5, r3
 800c184:	4614      	mov	r4, r2
 800c186:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800c188:	6028      	str	r0, [r5, #0]
 800c18a:	6069      	str	r1, [r5, #4]
 800c18c:	60aa      	str	r2, [r5, #8]
 800c18e:	60eb      	str	r3, [r5, #12]
 800c190:	7823      	ldrb	r3, [r4, #0]
 800c192:	742b      	strb	r3, [r5, #16]
			p->moveSize = 9;
 800c194:	687b      	ldr	r3, [r7, #4]
 800c196:	2209      	movs	r2, #9
 800c198:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"B,C,G,J,I,C,H,J,I");
 800c19a:	687b      	ldr	r3, [r7, #4]
 800c19c:	3340      	adds	r3, #64	; 0x40
 800c19e:	4abb      	ldr	r2, [pc, #748]	; (800c48c <problem_fetch+0xb16c>)
 800c1a0:	461d      	mov	r5, r3
 800c1a2:	4614      	mov	r4, r2
 800c1a4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800c1a6:	6028      	str	r0, [r5, #0]
 800c1a8:	6069      	str	r1, [r5, #4]
 800c1aa:	60aa      	str	r2, [r5, #8]
 800c1ac:	60eb      	str	r3, [r5, #12]
 800c1ae:	8823      	ldrh	r3, [r4, #0]
 800c1b0:	822b      	strh	r3, [r5, #16]
			strcpy(p->moveNumbers,"6,5,9,12,15,8,8,5,18");
 800c1b2:	687b      	ldr	r3, [r7, #4]
 800c1b4:	3304      	adds	r3, #4
 800c1b6:	4ab6      	ldr	r2, [pc, #728]	; (800c490 <problem_fetch+0xb170>)
 800c1b8:	461d      	mov	r5, r3
 800c1ba:	4614      	mov	r4, r2
 800c1bc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800c1be:	6028      	str	r0, [r5, #0]
 800c1c0:	6069      	str	r1, [r5, #4]
 800c1c2:	60aa      	str	r2, [r5, #8]
 800c1c4:	60eb      	str	r3, [r5, #12]
 800c1c6:	6820      	ldr	r0, [r4, #0]
 800c1c8:	6128      	str	r0, [r5, #16]
 800c1ca:	7923      	ldrb	r3, [r4, #4]
 800c1cc:	752b      	strb	r3, [r5, #20]
			strcpy(p->startFinish, "s,s,d,d,d,d,d,d,e");
 800c1ce:	687b      	ldr	r3, [r7, #4]
 800c1d0:	33d8      	adds	r3, #216	; 0xd8
 800c1d2:	4ab0      	ldr	r2, [pc, #704]	; (800c494 <problem_fetch+0xb174>)
 800c1d4:	461d      	mov	r5, r3
 800c1d6:	4614      	mov	r4, r2
 800c1d8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800c1da:	6028      	str	r0, [r5, #0]
 800c1dc:	6069      	str	r1, [r5, #4]
 800c1de:	60aa      	str	r2, [r5, #8]
 800c1e0:	60eb      	str	r3, [r5, #12]
 800c1e2:	8823      	ldrh	r3, [r4, #0]
 800c1e4:	822b      	strh	r3, [r5, #16]
			strcpy(p->grade, "6B+");
 800c1e6:	687b      	ldr	r3, [r7, #4]
 800c1e8:	33cc      	adds	r3, #204	; 0xcc
 800c1ea:	4aab      	ldr	r2, [pc, #684]	; (800c498 <problem_fetch+0xb178>)
 800c1ec:	6810      	ldr	r0, [r2, #0]
 800c1ee:	6018      	str	r0, [r3, #0]
			break;
 800c1f0:	f00e bddc 	b.w	801adac <problem_fetch+0x19a8c>
		case 394 :
			strcpy(p->name,"BLACK CAVIAR");
 800c1f4:	687b      	ldr	r3, [r7, #4]
 800c1f6:	337c      	adds	r3, #124	; 0x7c
 800c1f8:	4aa8      	ldr	r2, [pc, #672]	; (800c49c <problem_fetch+0xb17c>)
 800c1fa:	461c      	mov	r4, r3
 800c1fc:	4613      	mov	r3, r2
 800c1fe:	cb07      	ldmia	r3!, {r0, r1, r2}
 800c200:	6020      	str	r0, [r4, #0]
 800c202:	6061      	str	r1, [r4, #4]
 800c204:	60a2      	str	r2, [r4, #8]
 800c206:	781b      	ldrb	r3, [r3, #0]
 800c208:	7323      	strb	r3, [r4, #12]
			p->moveSize = 8;
 800c20a:	687b      	ldr	r3, [r7, #4]
 800c20c:	2208      	movs	r2, #8
 800c20e:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"G,J,E,A,A,H,F,D");
 800c210:	687b      	ldr	r3, [r7, #4]
 800c212:	3340      	adds	r3, #64	; 0x40
 800c214:	4aa2      	ldr	r2, [pc, #648]	; (800c4a0 <problem_fetch+0xb180>)
 800c216:	461c      	mov	r4, r3
 800c218:	4615      	mov	r5, r2
 800c21a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c21c:	6020      	str	r0, [r4, #0]
 800c21e:	6061      	str	r1, [r4, #4]
 800c220:	60a2      	str	r2, [r4, #8]
 800c222:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,5,6,9,14,8,11,18");
 800c224:	687b      	ldr	r3, [r7, #4]
 800c226:	3304      	adds	r3, #4
 800c228:	4a9e      	ldr	r2, [pc, #632]	; (800c4a4 <problem_fetch+0xb184>)
 800c22a:	461d      	mov	r5, r3
 800c22c:	4614      	mov	r4, r2
 800c22e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800c230:	6028      	str	r0, [r5, #0]
 800c232:	6069      	str	r1, [r5, #4]
 800c234:	60aa      	str	r2, [r5, #8]
 800c236:	60eb      	str	r3, [r5, #12]
 800c238:	8823      	ldrh	r3, [r4, #0]
 800c23a:	78a2      	ldrb	r2, [r4, #2]
 800c23c:	822b      	strh	r3, [r5, #16]
 800c23e:	4613      	mov	r3, r2
 800c240:	74ab      	strb	r3, [r5, #18]
			strcpy(p->startFinish, "s,d,d,d,d,d,d,e");
 800c242:	687b      	ldr	r3, [r7, #4]
 800c244:	33d8      	adds	r3, #216	; 0xd8
 800c246:	4a98      	ldr	r2, [pc, #608]	; (800c4a8 <problem_fetch+0xb188>)
 800c248:	461c      	mov	r4, r3
 800c24a:	4615      	mov	r5, r2
 800c24c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c24e:	6020      	str	r0, [r4, #0]
 800c250:	6061      	str	r1, [r4, #4]
 800c252:	60a2      	str	r2, [r4, #8]
 800c254:	60e3      	str	r3, [r4, #12]
			strcpy(p->grade, "6C");
 800c256:	687b      	ldr	r3, [r7, #4]
 800c258:	33cc      	adds	r3, #204	; 0xcc
 800c25a:	4a94      	ldr	r2, [pc, #592]	; (800c4ac <problem_fetch+0xb18c>)
 800c25c:	8811      	ldrh	r1, [r2, #0]
 800c25e:	7892      	ldrb	r2, [r2, #2]
 800c260:	8019      	strh	r1, [r3, #0]
 800c262:	709a      	strb	r2, [r3, #2]
			break;
 800c264:	f00e bda2 	b.w	801adac <problem_fetch+0x19a8c>
		case 395 :
			strcpy(p->name,"BAGHEERA");
 800c268:	687b      	ldr	r3, [r7, #4]
 800c26a:	337c      	adds	r3, #124	; 0x7c
 800c26c:	4990      	ldr	r1, [pc, #576]	; (800c4b0 <problem_fetch+0xb190>)
 800c26e:	461a      	mov	r2, r3
 800c270:	460b      	mov	r3, r1
 800c272:	cb03      	ldmia	r3!, {r0, r1}
 800c274:	6010      	str	r0, [r2, #0]
 800c276:	6051      	str	r1, [r2, #4]
 800c278:	781b      	ldrb	r3, [r3, #0]
 800c27a:	7213      	strb	r3, [r2, #8]
			p->moveSize = 7;
 800c27c:	687b      	ldr	r3, [r7, #4]
 800c27e:	2207      	movs	r2, #7
 800c280:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"C,D,G,I,G,G,D");
 800c282:	687b      	ldr	r3, [r7, #4]
 800c284:	3340      	adds	r3, #64	; 0x40
 800c286:	4a8b      	ldr	r2, [pc, #556]	; (800c4b4 <problem_fetch+0xb194>)
 800c288:	461c      	mov	r4, r3
 800c28a:	4613      	mov	r3, r2
 800c28c:	cb07      	ldmia	r3!, {r0, r1, r2}
 800c28e:	6020      	str	r0, [r4, #0]
 800c290:	6061      	str	r1, [r4, #4]
 800c292:	60a2      	str	r2, [r4, #8]
 800c294:	881b      	ldrh	r3, [r3, #0]
 800c296:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,7,9,14,14,17,18");
 800c298:	687b      	ldr	r3, [r7, #4]
 800c29a:	3304      	adds	r3, #4
 800c29c:	4a86      	ldr	r2, [pc, #536]	; (800c4b8 <problem_fetch+0xb198>)
 800c29e:	461d      	mov	r5, r3
 800c2a0:	4614      	mov	r4, r2
 800c2a2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800c2a4:	6028      	str	r0, [r5, #0]
 800c2a6:	6069      	str	r1, [r5, #4]
 800c2a8:	60aa      	str	r2, [r5, #8]
 800c2aa:	60eb      	str	r3, [r5, #12]
 800c2ac:	8823      	ldrh	r3, [r4, #0]
 800c2ae:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish, "s,d,d,d,d,d,e");
 800c2b0:	687b      	ldr	r3, [r7, #4]
 800c2b2:	33d8      	adds	r3, #216	; 0xd8
 800c2b4:	4a81      	ldr	r2, [pc, #516]	; (800c4bc <problem_fetch+0xb19c>)
 800c2b6:	461c      	mov	r4, r3
 800c2b8:	4613      	mov	r3, r2
 800c2ba:	cb07      	ldmia	r3!, {r0, r1, r2}
 800c2bc:	6020      	str	r0, [r4, #0]
 800c2be:	6061      	str	r1, [r4, #4]
 800c2c0:	60a2      	str	r2, [r4, #8]
 800c2c2:	881b      	ldrh	r3, [r3, #0]
 800c2c4:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade, "7A");
 800c2c6:	687b      	ldr	r3, [r7, #4]
 800c2c8:	33cc      	adds	r3, #204	; 0xcc
 800c2ca:	4a7d      	ldr	r2, [pc, #500]	; (800c4c0 <problem_fetch+0xb1a0>)
 800c2cc:	8811      	ldrh	r1, [r2, #0]
 800c2ce:	7892      	ldrb	r2, [r2, #2]
 800c2d0:	8019      	strh	r1, [r3, #0]
 800c2d2:	709a      	strb	r2, [r3, #2]
			break;
 800c2d4:	f00e bd6a 	b.w	801adac <problem_fetch+0x19a8c>
		case 396 :
			strcpy(p->name,"MADISH");
 800c2d8:	687b      	ldr	r3, [r7, #4]
 800c2da:	337c      	adds	r3, #124	; 0x7c
 800c2dc:	4a79      	ldr	r2, [pc, #484]	; (800c4c4 <problem_fetch+0xb1a4>)
 800c2de:	6810      	ldr	r0, [r2, #0]
 800c2e0:	6018      	str	r0, [r3, #0]
 800c2e2:	8891      	ldrh	r1, [r2, #4]
 800c2e4:	7992      	ldrb	r2, [r2, #6]
 800c2e6:	8099      	strh	r1, [r3, #4]
 800c2e8:	719a      	strb	r2, [r3, #6]
			p->moveSize = 7;
 800c2ea:	687b      	ldr	r3, [r7, #4]
 800c2ec:	2207      	movs	r2, #7
 800c2ee:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"E,C,E,F,C,E,D");
 800c2f0:	687b      	ldr	r3, [r7, #4]
 800c2f2:	3340      	adds	r3, #64	; 0x40
 800c2f4:	4a74      	ldr	r2, [pc, #464]	; (800c4c8 <problem_fetch+0xb1a8>)
 800c2f6:	461c      	mov	r4, r3
 800c2f8:	4613      	mov	r3, r2
 800c2fa:	cb07      	ldmia	r3!, {r0, r1, r2}
 800c2fc:	6020      	str	r0, [r4, #0]
 800c2fe:	6061      	str	r1, [r4, #4]
 800c300:	60a2      	str	r2, [r4, #8]
 800c302:	881b      	ldrh	r3, [r3, #0]
 800c304:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"6,5,8,11,13,16,18");
 800c306:	687b      	ldr	r3, [r7, #4]
 800c308:	3304      	adds	r3, #4
 800c30a:	4a70      	ldr	r2, [pc, #448]	; (800c4cc <problem_fetch+0xb1ac>)
 800c30c:	461d      	mov	r5, r3
 800c30e:	4614      	mov	r4, r2
 800c310:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800c312:	6028      	str	r0, [r5, #0]
 800c314:	6069      	str	r1, [r5, #4]
 800c316:	60aa      	str	r2, [r5, #8]
 800c318:	60eb      	str	r3, [r5, #12]
 800c31a:	8823      	ldrh	r3, [r4, #0]
 800c31c:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish, "s,s,d,d,d,d,e");
 800c31e:	687b      	ldr	r3, [r7, #4]
 800c320:	33d8      	adds	r3, #216	; 0xd8
 800c322:	4a6b      	ldr	r2, [pc, #428]	; (800c4d0 <problem_fetch+0xb1b0>)
 800c324:	461c      	mov	r4, r3
 800c326:	4613      	mov	r3, r2
 800c328:	cb07      	ldmia	r3!, {r0, r1, r2}
 800c32a:	6020      	str	r0, [r4, #0]
 800c32c:	6061      	str	r1, [r4, #4]
 800c32e:	60a2      	str	r2, [r4, #8]
 800c330:	881b      	ldrh	r3, [r3, #0]
 800c332:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade, "6B+");
 800c334:	687b      	ldr	r3, [r7, #4]
 800c336:	33cc      	adds	r3, #204	; 0xcc
 800c338:	4a57      	ldr	r2, [pc, #348]	; (800c498 <problem_fetch+0xb178>)
 800c33a:	6810      	ldr	r0, [r2, #0]
 800c33c:	6018      	str	r0, [r3, #0]
			break;
 800c33e:	f00e bd35 	b.w	801adac <problem_fetch+0x19a8c>
		case 397 :
			strcpy(p->name,"RAINING MEANS TRAINING");
 800c342:	687b      	ldr	r3, [r7, #4]
 800c344:	337c      	adds	r3, #124	; 0x7c
 800c346:	4a63      	ldr	r2, [pc, #396]	; (800c4d4 <problem_fetch+0xb1b4>)
 800c348:	461c      	mov	r4, r3
 800c34a:	4615      	mov	r5, r2
 800c34c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c34e:	6020      	str	r0, [r4, #0]
 800c350:	6061      	str	r1, [r4, #4]
 800c352:	60a2      	str	r2, [r4, #8]
 800c354:	60e3      	str	r3, [r4, #12]
 800c356:	6828      	ldr	r0, [r5, #0]
 800c358:	6120      	str	r0, [r4, #16]
 800c35a:	88ab      	ldrh	r3, [r5, #4]
 800c35c:	79aa      	ldrb	r2, [r5, #6]
 800c35e:	82a3      	strh	r3, [r4, #20]
 800c360:	4613      	mov	r3, r2
 800c362:	75a3      	strb	r3, [r4, #22]
			p->moveSize = 7;
 800c364:	687b      	ldr	r3, [r7, #4]
 800c366:	2207      	movs	r2, #7
 800c368:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"J,E,I,H,H,I,D");
 800c36a:	687b      	ldr	r3, [r7, #4]
 800c36c:	3340      	adds	r3, #64	; 0x40
 800c36e:	4a5a      	ldr	r2, [pc, #360]	; (800c4d8 <problem_fetch+0xb1b8>)
 800c370:	461c      	mov	r4, r3
 800c372:	4613      	mov	r3, r2
 800c374:	cb07      	ldmia	r3!, {r0, r1, r2}
 800c376:	6020      	str	r0, [r4, #0]
 800c378:	6061      	str	r1, [r4, #4]
 800c37a:	60a2      	str	r2, [r4, #8]
 800c37c:	881b      	ldrh	r3, [r3, #0]
 800c37e:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,9,9,12,16,7,18");
 800c380:	687b      	ldr	r3, [r7, #4]
 800c382:	3304      	adds	r3, #4
 800c384:	4a55      	ldr	r2, [pc, #340]	; (800c4dc <problem_fetch+0xb1bc>)
 800c386:	461d      	mov	r5, r3
 800c388:	4614      	mov	r4, r2
 800c38a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800c38c:	6028      	str	r0, [r5, #0]
 800c38e:	6069      	str	r1, [r5, #4]
 800c390:	60aa      	str	r2, [r5, #8]
 800c392:	60eb      	str	r3, [r5, #12]
 800c394:	7823      	ldrb	r3, [r4, #0]
 800c396:	742b      	strb	r3, [r5, #16]
			strcpy(p->startFinish, "s,d,d,d,d,d,e");
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	33d8      	adds	r3, #216	; 0xd8
 800c39c:	4a47      	ldr	r2, [pc, #284]	; (800c4bc <problem_fetch+0xb19c>)
 800c39e:	461c      	mov	r4, r3
 800c3a0:	4613      	mov	r3, r2
 800c3a2:	cb07      	ldmia	r3!, {r0, r1, r2}
 800c3a4:	6020      	str	r0, [r4, #0]
 800c3a6:	6061      	str	r1, [r4, #4]
 800c3a8:	60a2      	str	r2, [r4, #8]
 800c3aa:	881b      	ldrh	r3, [r3, #0]
 800c3ac:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade, "7A+");
 800c3ae:	687b      	ldr	r3, [r7, #4]
 800c3b0:	33cc      	adds	r3, #204	; 0xcc
 800c3b2:	4a4b      	ldr	r2, [pc, #300]	; (800c4e0 <problem_fetch+0xb1c0>)
 800c3b4:	6810      	ldr	r0, [r2, #0]
 800c3b6:	6018      	str	r0, [r3, #0]
			break;
 800c3b8:	f00e bcf8 	b.w	801adac <problem_fetch+0x19a8c>
		case 398 :
			strcpy(p->name,"LAST HOPE");
 800c3bc:	687b      	ldr	r3, [r7, #4]
 800c3be:	337c      	adds	r3, #124	; 0x7c
 800c3c0:	4948      	ldr	r1, [pc, #288]	; (800c4e4 <problem_fetch+0xb1c4>)
 800c3c2:	461a      	mov	r2, r3
 800c3c4:	460b      	mov	r3, r1
 800c3c6:	cb03      	ldmia	r3!, {r0, r1}
 800c3c8:	6010      	str	r0, [r2, #0]
 800c3ca:	6051      	str	r1, [r2, #4]
 800c3cc:	881b      	ldrh	r3, [r3, #0]
 800c3ce:	8113      	strh	r3, [r2, #8]
			p->moveSize = 6;
 800c3d0:	687b      	ldr	r3, [r7, #4]
 800c3d2:	2206      	movs	r2, #6
 800c3d4:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"J,E,I,H,K,I");
 800c3d6:	687b      	ldr	r3, [r7, #4]
 800c3d8:	3340      	adds	r3, #64	; 0x40
 800c3da:	4a43      	ldr	r2, [pc, #268]	; (800c4e8 <problem_fetch+0xb1c8>)
 800c3dc:	461c      	mov	r4, r3
 800c3de:	4613      	mov	r3, r2
 800c3e0:	cb07      	ldmia	r3!, {r0, r1, r2}
 800c3e2:	6020      	str	r0, [r4, #0]
 800c3e4:	6061      	str	r1, [r4, #4]
 800c3e6:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,8,9,12,14,18");
 800c3e8:	687b      	ldr	r3, [r7, #4]
 800c3ea:	3304      	adds	r3, #4
 800c3ec:	4a3f      	ldr	r2, [pc, #252]	; (800c4ec <problem_fetch+0xb1cc>)
 800c3ee:	461c      	mov	r4, r3
 800c3f0:	4613      	mov	r3, r2
 800c3f2:	cb07      	ldmia	r3!, {r0, r1, r2}
 800c3f4:	6020      	str	r0, [r4, #0]
 800c3f6:	6061      	str	r1, [r4, #4]
 800c3f8:	60a2      	str	r2, [r4, #8]
 800c3fa:	881a      	ldrh	r2, [r3, #0]
 800c3fc:	789b      	ldrb	r3, [r3, #2]
 800c3fe:	81a2      	strh	r2, [r4, #12]
 800c400:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish, "s,d,d,d,d,e");
 800c402:	687b      	ldr	r3, [r7, #4]
 800c404:	33d8      	adds	r3, #216	; 0xd8
 800c406:	4a3a      	ldr	r2, [pc, #232]	; (800c4f0 <problem_fetch+0xb1d0>)
 800c408:	461c      	mov	r4, r3
 800c40a:	4613      	mov	r3, r2
 800c40c:	cb07      	ldmia	r3!, {r0, r1, r2}
 800c40e:	6020      	str	r0, [r4, #0]
 800c410:	6061      	str	r1, [r4, #4]
 800c412:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade, "7A+");
 800c414:	687b      	ldr	r3, [r7, #4]
 800c416:	33cc      	adds	r3, #204	; 0xcc
 800c418:	4a31      	ldr	r2, [pc, #196]	; (800c4e0 <problem_fetch+0xb1c0>)
 800c41a:	6810      	ldr	r0, [r2, #0]
 800c41c:	6018      	str	r0, [r3, #0]
			break;
 800c41e:	f00e bcc5 	b.w	801adac <problem_fetch+0x19a8c>
		case 399 :
			strcpy(p->name,"FREERIDER");
 800c422:	687b      	ldr	r3, [r7, #4]
 800c424:	337c      	adds	r3, #124	; 0x7c
 800c426:	4933      	ldr	r1, [pc, #204]	; (800c4f4 <problem_fetch+0xb1d4>)
 800c428:	461a      	mov	r2, r3
 800c42a:	460b      	mov	r3, r1
 800c42c:	cb03      	ldmia	r3!, {r0, r1}
 800c42e:	6010      	str	r0, [r2, #0]
 800c430:	6051      	str	r1, [r2, #4]
 800c432:	881b      	ldrh	r3, [r3, #0]
 800c434:	8113      	strh	r3, [r2, #8]
			p->moveSize = 6;
 800c436:	687b      	ldr	r3, [r7, #4]
 800c438:	2206      	movs	r2, #6
 800c43a:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"J,E,I,H,H,D");
 800c43c:	687b      	ldr	r3, [r7, #4]
 800c43e:	3340      	adds	r3, #64	; 0x40
 800c440:	4a2d      	ldr	r2, [pc, #180]	; (800c4f8 <problem_fetch+0xb1d8>)
 800c442:	461c      	mov	r4, r3
 800c444:	4613      	mov	r3, r2
 800c446:	cb07      	ldmia	r3!, {r0, r1, r2}
 800c448:	6020      	str	r0, [r4, #0]
 800c44a:	6061      	str	r1, [r4, #4]
 800c44c:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,8,9,12,16,18");
 800c44e:	687b      	ldr	r3, [r7, #4]
 800c450:	3304      	adds	r3, #4
 800c452:	4a2a      	ldr	r2, [pc, #168]	; (800c4fc <problem_fetch+0xb1dc>)
 800c454:	461c      	mov	r4, r3
 800c456:	4613      	mov	r3, r2
 800c458:	cb07      	ldmia	r3!, {r0, r1, r2}
 800c45a:	6020      	str	r0, [r4, #0]
 800c45c:	6061      	str	r1, [r4, #4]
 800c45e:	60a2      	str	r2, [r4, #8]
 800c460:	881a      	ldrh	r2, [r3, #0]
 800c462:	789b      	ldrb	r3, [r3, #2]
 800c464:	81a2      	strh	r2, [r4, #12]
 800c466:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish, "s,d,d,d,d,e");
 800c468:	687b      	ldr	r3, [r7, #4]
 800c46a:	33d8      	adds	r3, #216	; 0xd8
 800c46c:	4a20      	ldr	r2, [pc, #128]	; (800c4f0 <problem_fetch+0xb1d0>)
 800c46e:	461c      	mov	r4, r3
 800c470:	4613      	mov	r3, r2
 800c472:	cb07      	ldmia	r3!, {r0, r1, r2}
 800c474:	6020      	str	r0, [r4, #0]
 800c476:	6061      	str	r1, [r4, #4]
 800c478:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade, "7A+");
 800c47a:	687b      	ldr	r3, [r7, #4]
 800c47c:	33cc      	adds	r3, #204	; 0xcc
 800c47e:	4a18      	ldr	r2, [pc, #96]	; (800c4e0 <problem_fetch+0xb1c0>)
 800c480:	6810      	ldr	r0, [r2, #0]
 800c482:	6018      	str	r0, [r3, #0]
			break;
 800c484:	f00e bc92 	b.w	801adac <problem_fetch+0x19a8c>
 800c488:	080250d4 	.word	0x080250d4
 800c48c:	080250e8 	.word	0x080250e8
 800c490:	080250fc 	.word	0x080250fc
 800c494:	0802187c 	.word	0x0802187c
 800c498:	080212b0 	.word	0x080212b0
 800c49c:	08025114 	.word	0x08025114
 800c4a0:	08025124 	.word	0x08025124
 800c4a4:	08025134 	.word	0x08025134
 800c4a8:	08021458 	.word	0x08021458
 800c4ac:	08021370 	.word	0x08021370
 800c4b0:	08025148 	.word	0x08025148
 800c4b4:	08025154 	.word	0x08025154
 800c4b8:	08025164 	.word	0x08025164
 800c4bc:	08021494 	.word	0x08021494
 800c4c0:	080212f4 	.word	0x080212f4
 800c4c4:	08025178 	.word	0x08025178
 800c4c8:	08025180 	.word	0x08025180
 800c4cc:	08025190 	.word	0x08025190
 800c4d0:	080212a0 	.word	0x080212a0
 800c4d4:	080251a4 	.word	0x080251a4
 800c4d8:	080251bc 	.word	0x080251bc
 800c4dc:	080251cc 	.word	0x080251cc
 800c4e0:	08021424 	.word	0x08021424
 800c4e4:	080251e0 	.word	0x080251e0
 800c4e8:	080251ec 	.word	0x080251ec
 800c4ec:	080251f8 	.word	0x080251f8
 800c4f0:	0802139c 	.word	0x0802139c
 800c4f4:	08025208 	.word	0x08025208
 800c4f8:	08021df0 	.word	0x08021df0
 800c4fc:	080240ac 	.word	0x080240ac
		case 4 :
			strcpy(p->name,"PROBLEM 12");
 800c500:	687b      	ldr	r3, [r7, #4]
 800c502:	337c      	adds	r3, #124	; 0x7c
 800c504:	49b5      	ldr	r1, [pc, #724]	; (800c7dc <problem_fetch+0xb4bc>)
 800c506:	461a      	mov	r2, r3
 800c508:	460b      	mov	r3, r1
 800c50a:	cb03      	ldmia	r3!, {r0, r1}
 800c50c:	6010      	str	r0, [r2, #0]
 800c50e:	6051      	str	r1, [r2, #4]
 800c510:	8819      	ldrh	r1, [r3, #0]
 800c512:	789b      	ldrb	r3, [r3, #2]
 800c514:	8111      	strh	r1, [r2, #8]
 800c516:	7293      	strb	r3, [r2, #10]
			p->moveSize = 6;
 800c518:	687b      	ldr	r3, [r7, #4]
 800c51a:	2206      	movs	r2, #6
 800c51c:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"G,K,H,G,B,A");
 800c51e:	687b      	ldr	r3, [r7, #4]
 800c520:	3340      	adds	r3, #64	; 0x40
 800c522:	4aaf      	ldr	r2, [pc, #700]	; (800c7e0 <problem_fetch+0xb4c0>)
 800c524:	461c      	mov	r4, r3
 800c526:	4613      	mov	r3, r2
 800c528:	cb07      	ldmia	r3!, {r0, r1, r2}
 800c52a:	6020      	str	r0, [r4, #0]
 800c52c:	6061      	str	r1, [r4, #4]
 800c52e:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"6,9,12,14,15,18");
 800c530:	687b      	ldr	r3, [r7, #4]
 800c532:	3304      	adds	r3, #4
 800c534:	4aab      	ldr	r2, [pc, #684]	; (800c7e4 <problem_fetch+0xb4c4>)
 800c536:	461c      	mov	r4, r3
 800c538:	4615      	mov	r5, r2
 800c53a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c53c:	6020      	str	r0, [r4, #0]
 800c53e:	6061      	str	r1, [r4, #4]
 800c540:	60a2      	str	r2, [r4, #8]
 800c542:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish, "s,d,d,d,d,e");
 800c544:	687b      	ldr	r3, [r7, #4]
 800c546:	33d8      	adds	r3, #216	; 0xd8
 800c548:	4aa7      	ldr	r2, [pc, #668]	; (800c7e8 <problem_fetch+0xb4c8>)
 800c54a:	461c      	mov	r4, r3
 800c54c:	4613      	mov	r3, r2
 800c54e:	cb07      	ldmia	r3!, {r0, r1, r2}
 800c550:	6020      	str	r0, [r4, #0]
 800c552:	6061      	str	r1, [r4, #4]
 800c554:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade, "7A+");
 800c556:	687b      	ldr	r3, [r7, #4]
 800c558:	33cc      	adds	r3, #204	; 0xcc
 800c55a:	4aa4      	ldr	r2, [pc, #656]	; (800c7ec <problem_fetch+0xb4cc>)
 800c55c:	6810      	ldr	r0, [r2, #0]
 800c55e:	6018      	str	r0, [r3, #0]
			break;
 800c560:	f00e bc24 	b.w	801adac <problem_fetch+0x19a8c>
		case 40 :
			strcpy(p->name,"SALAD NIGHTS");
 800c564:	687b      	ldr	r3, [r7, #4]
 800c566:	337c      	adds	r3, #124	; 0x7c
 800c568:	4aa1      	ldr	r2, [pc, #644]	; (800c7f0 <problem_fetch+0xb4d0>)
 800c56a:	461c      	mov	r4, r3
 800c56c:	4613      	mov	r3, r2
 800c56e:	cb07      	ldmia	r3!, {r0, r1, r2}
 800c570:	6020      	str	r0, [r4, #0]
 800c572:	6061      	str	r1, [r4, #4]
 800c574:	60a2      	str	r2, [r4, #8]
 800c576:	781b      	ldrb	r3, [r3, #0]
 800c578:	7323      	strb	r3, [r4, #12]
			p->moveSize = 8;
 800c57a:	687b      	ldr	r3, [r7, #4]
 800c57c:	2208      	movs	r2, #8
 800c57e:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"C,B,E,K,H,I,E,D");
 800c580:	687b      	ldr	r3, [r7, #4]
 800c582:	3340      	adds	r3, #64	; 0x40
 800c584:	4a9b      	ldr	r2, [pc, #620]	; (800c7f4 <problem_fetch+0xb4d4>)
 800c586:	461c      	mov	r4, r3
 800c588:	4615      	mov	r5, r2
 800c58a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c58c:	6020      	str	r0, [r4, #0]
 800c58e:	6061      	str	r1, [r4, #4]
 800c590:	60a2      	str	r2, [r4, #8]
 800c592:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,6,8,9,12,14,14,18");
 800c594:	687b      	ldr	r3, [r7, #4]
 800c596:	3304      	adds	r3, #4
 800c598:	4a97      	ldr	r2, [pc, #604]	; (800c7f8 <problem_fetch+0xb4d8>)
 800c59a:	461d      	mov	r5, r3
 800c59c:	4614      	mov	r4, r2
 800c59e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800c5a0:	6028      	str	r0, [r5, #0]
 800c5a2:	6069      	str	r1, [r5, #4]
 800c5a4:	60aa      	str	r2, [r5, #8]
 800c5a6:	60eb      	str	r3, [r5, #12]
 800c5a8:	6820      	ldr	r0, [r4, #0]
 800c5aa:	6128      	str	r0, [r5, #16]
			strcpy(p->startFinish, "s,s,d,d,d,d,d,e");
 800c5ac:	687b      	ldr	r3, [r7, #4]
 800c5ae:	33d8      	adds	r3, #216	; 0xd8
 800c5b0:	4a92      	ldr	r2, [pc, #584]	; (800c7fc <problem_fetch+0xb4dc>)
 800c5b2:	461c      	mov	r4, r3
 800c5b4:	4615      	mov	r5, r2
 800c5b6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c5b8:	6020      	str	r0, [r4, #0]
 800c5ba:	6061      	str	r1, [r4, #4]
 800c5bc:	60a2      	str	r2, [r4, #8]
 800c5be:	60e3      	str	r3, [r4, #12]
			strcpy(p->grade, "7A+");
 800c5c0:	687b      	ldr	r3, [r7, #4]
 800c5c2:	33cc      	adds	r3, #204	; 0xcc
 800c5c4:	4a89      	ldr	r2, [pc, #548]	; (800c7ec <problem_fetch+0xb4cc>)
 800c5c6:	6810      	ldr	r0, [r2, #0]
 800c5c8:	6018      	str	r0, [r3, #0]
			break;
 800c5ca:	f00e bbef 	b.w	801adac <problem_fetch+0x19a8c>
		case 400 :
			strcpy(p->name,"HUBBLE");
 800c5ce:	687b      	ldr	r3, [r7, #4]
 800c5d0:	337c      	adds	r3, #124	; 0x7c
 800c5d2:	4a8b      	ldr	r2, [pc, #556]	; (800c800 <problem_fetch+0xb4e0>)
 800c5d4:	6810      	ldr	r0, [r2, #0]
 800c5d6:	6018      	str	r0, [r3, #0]
 800c5d8:	8891      	ldrh	r1, [r2, #4]
 800c5da:	7992      	ldrb	r2, [r2, #6]
 800c5dc:	8099      	strh	r1, [r3, #4]
 800c5de:	719a      	strb	r2, [r3, #6]
			p->moveSize = 6;
 800c5e0:	687b      	ldr	r3, [r7, #4]
 800c5e2:	2206      	movs	r2, #6
 800c5e4:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"J,G,I,H,K,I");
 800c5e6:	687b      	ldr	r3, [r7, #4]
 800c5e8:	3340      	adds	r3, #64	; 0x40
 800c5ea:	4a86      	ldr	r2, [pc, #536]	; (800c804 <problem_fetch+0xb4e4>)
 800c5ec:	461c      	mov	r4, r3
 800c5ee:	4613      	mov	r3, r2
 800c5f0:	cb07      	ldmia	r3!, {r0, r1, r2}
 800c5f2:	6020      	str	r0, [r4, #0]
 800c5f4:	6061      	str	r1, [r4, #4]
 800c5f6:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,6,9,12,14,18");
 800c5f8:	687b      	ldr	r3, [r7, #4]
 800c5fa:	3304      	adds	r3, #4
 800c5fc:	4a82      	ldr	r2, [pc, #520]	; (800c808 <problem_fetch+0xb4e8>)
 800c5fe:	461c      	mov	r4, r3
 800c600:	4613      	mov	r3, r2
 800c602:	cb07      	ldmia	r3!, {r0, r1, r2}
 800c604:	6020      	str	r0, [r4, #0]
 800c606:	6061      	str	r1, [r4, #4]
 800c608:	60a2      	str	r2, [r4, #8]
 800c60a:	881a      	ldrh	r2, [r3, #0]
 800c60c:	789b      	ldrb	r3, [r3, #2]
 800c60e:	81a2      	strh	r2, [r4, #12]
 800c610:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish, "s,s,d,d,d,e");
 800c612:	687b      	ldr	r3, [r7, #4]
 800c614:	33d8      	adds	r3, #216	; 0xd8
 800c616:	4a7d      	ldr	r2, [pc, #500]	; (800c80c <problem_fetch+0xb4ec>)
 800c618:	461c      	mov	r4, r3
 800c61a:	4613      	mov	r3, r2
 800c61c:	cb07      	ldmia	r3!, {r0, r1, r2}
 800c61e:	6020      	str	r0, [r4, #0]
 800c620:	6061      	str	r1, [r4, #4]
 800c622:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade, "7A+");
 800c624:	687b      	ldr	r3, [r7, #4]
 800c626:	33cc      	adds	r3, #204	; 0xcc
 800c628:	4a70      	ldr	r2, [pc, #448]	; (800c7ec <problem_fetch+0xb4cc>)
 800c62a:	6810      	ldr	r0, [r2, #0]
 800c62c:	6018      	str	r0, [r3, #0]
			break;
 800c62e:	f00e bbbd 	b.w	801adac <problem_fetch+0x19a8c>
		case 401 :
			strcpy(p->name,"IMPACT");
 800c632:	687b      	ldr	r3, [r7, #4]
 800c634:	337c      	adds	r3, #124	; 0x7c
 800c636:	4a76      	ldr	r2, [pc, #472]	; (800c810 <problem_fetch+0xb4f0>)
 800c638:	6810      	ldr	r0, [r2, #0]
 800c63a:	6018      	str	r0, [r3, #0]
 800c63c:	8891      	ldrh	r1, [r2, #4]
 800c63e:	7992      	ldrb	r2, [r2, #6]
 800c640:	8099      	strh	r1, [r3, #4]
 800c642:	719a      	strb	r2, [r3, #6]
			p->moveSize = 8;
 800c644:	687b      	ldr	r3, [r7, #4]
 800c646:	2208      	movs	r2, #8
 800c648:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"G,H,E,J,E,B,E,D");
 800c64a:	687b      	ldr	r3, [r7, #4]
 800c64c:	3340      	adds	r3, #64	; 0x40
 800c64e:	4a71      	ldr	r2, [pc, #452]	; (800c814 <problem_fetch+0xb4f4>)
 800c650:	461c      	mov	r4, r3
 800c652:	4615      	mov	r5, r2
 800c654:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c656:	6020      	str	r0, [r4, #0]
 800c658:	6061      	str	r1, [r4, #4]
 800c65a:	60a2      	str	r2, [r4, #8]
 800c65c:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,8,8,7,12,15,14,18");
 800c65e:	687b      	ldr	r3, [r7, #4]
 800c660:	3304      	adds	r3, #4
 800c662:	4a6d      	ldr	r2, [pc, #436]	; (800c818 <problem_fetch+0xb4f8>)
 800c664:	461d      	mov	r5, r3
 800c666:	4614      	mov	r4, r2
 800c668:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800c66a:	6028      	str	r0, [r5, #0]
 800c66c:	6069      	str	r1, [r5, #4]
 800c66e:	60aa      	str	r2, [r5, #8]
 800c670:	60eb      	str	r3, [r5, #12]
 800c672:	6820      	ldr	r0, [r4, #0]
 800c674:	6128      	str	r0, [r5, #16]
			strcpy(p->startFinish, "s,d,d,d,d,d,d,e");
 800c676:	687b      	ldr	r3, [r7, #4]
 800c678:	33d8      	adds	r3, #216	; 0xd8
 800c67a:	4a68      	ldr	r2, [pc, #416]	; (800c81c <problem_fetch+0xb4fc>)
 800c67c:	461c      	mov	r4, r3
 800c67e:	4615      	mov	r5, r2
 800c680:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c682:	6020      	str	r0, [r4, #0]
 800c684:	6061      	str	r1, [r4, #4]
 800c686:	60a2      	str	r2, [r4, #8]
 800c688:	60e3      	str	r3, [r4, #12]
			strcpy(p->grade, "6B+");
 800c68a:	687b      	ldr	r3, [r7, #4]
 800c68c:	33cc      	adds	r3, #204	; 0xcc
 800c68e:	4a64      	ldr	r2, [pc, #400]	; (800c820 <problem_fetch+0xb500>)
 800c690:	6810      	ldr	r0, [r2, #0]
 800c692:	6018      	str	r0, [r3, #0]
			break;
 800c694:	f00e bb8a 	b.w	801adac <problem_fetch+0x19a8c>
		case 402 :
			strcpy(p->name,"WEEL OF WOLVO");
 800c698:	687b      	ldr	r3, [r7, #4]
 800c69a:	337c      	adds	r3, #124	; 0x7c
 800c69c:	4a61      	ldr	r2, [pc, #388]	; (800c824 <problem_fetch+0xb504>)
 800c69e:	461c      	mov	r4, r3
 800c6a0:	4613      	mov	r3, r2
 800c6a2:	cb07      	ldmia	r3!, {r0, r1, r2}
 800c6a4:	6020      	str	r0, [r4, #0]
 800c6a6:	6061      	str	r1, [r4, #4]
 800c6a8:	60a2      	str	r2, [r4, #8]
 800c6aa:	881b      	ldrh	r3, [r3, #0]
 800c6ac:	81a3      	strh	r3, [r4, #12]
			p->moveSize = 7;
 800c6ae:	687b      	ldr	r3, [r7, #4]
 800c6b0:	2207      	movs	r2, #7
 800c6b2:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"C,E,H,F,H,G,I");
 800c6b4:	687b      	ldr	r3, [r7, #4]
 800c6b6:	3340      	adds	r3, #64	; 0x40
 800c6b8:	4a5b      	ldr	r2, [pc, #364]	; (800c828 <problem_fetch+0xb508>)
 800c6ba:	461c      	mov	r4, r3
 800c6bc:	4613      	mov	r3, r2
 800c6be:	cb07      	ldmia	r3!, {r0, r1, r2}
 800c6c0:	6020      	str	r0, [r4, #0]
 800c6c2:	6061      	str	r1, [r4, #4]
 800c6c4:	60a2      	str	r2, [r4, #8]
 800c6c6:	881b      	ldrh	r3, [r3, #0]
 800c6c8:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,9,5,11,12,15,18");
 800c6ca:	687b      	ldr	r3, [r7, #4]
 800c6cc:	3304      	adds	r3, #4
 800c6ce:	4a57      	ldr	r2, [pc, #348]	; (800c82c <problem_fetch+0xb50c>)
 800c6d0:	461d      	mov	r5, r3
 800c6d2:	4614      	mov	r4, r2
 800c6d4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800c6d6:	6028      	str	r0, [r5, #0]
 800c6d8:	6069      	str	r1, [r5, #4]
 800c6da:	60aa      	str	r2, [r5, #8]
 800c6dc:	60eb      	str	r3, [r5, #12]
 800c6de:	8823      	ldrh	r3, [r4, #0]
 800c6e0:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish, "s,d,d,d,d,d,e");
 800c6e2:	687b      	ldr	r3, [r7, #4]
 800c6e4:	33d8      	adds	r3, #216	; 0xd8
 800c6e6:	4a52      	ldr	r2, [pc, #328]	; (800c830 <problem_fetch+0xb510>)
 800c6e8:	461c      	mov	r4, r3
 800c6ea:	4613      	mov	r3, r2
 800c6ec:	cb07      	ldmia	r3!, {r0, r1, r2}
 800c6ee:	6020      	str	r0, [r4, #0]
 800c6f0:	6061      	str	r1, [r4, #4]
 800c6f2:	60a2      	str	r2, [r4, #8]
 800c6f4:	881b      	ldrh	r3, [r3, #0]
 800c6f6:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade, "7B");
 800c6f8:	687b      	ldr	r3, [r7, #4]
 800c6fa:	33cc      	adds	r3, #204	; 0xcc
 800c6fc:	4a4d      	ldr	r2, [pc, #308]	; (800c834 <problem_fetch+0xb514>)
 800c6fe:	8811      	ldrh	r1, [r2, #0]
 800c700:	7892      	ldrb	r2, [r2, #2]
 800c702:	8019      	strh	r1, [r3, #0]
 800c704:	709a      	strb	r2, [r3, #2]
			break;
 800c706:	f00e bb51 	b.w	801adac <problem_fetch+0x19a8c>
		case 403 :
			strcpy(p->name,"(S)ENDING");
 800c70a:	687b      	ldr	r3, [r7, #4]
 800c70c:	337c      	adds	r3, #124	; 0x7c
 800c70e:	494a      	ldr	r1, [pc, #296]	; (800c838 <problem_fetch+0xb518>)
 800c710:	461a      	mov	r2, r3
 800c712:	460b      	mov	r3, r1
 800c714:	cb03      	ldmia	r3!, {r0, r1}
 800c716:	6010      	str	r0, [r2, #0]
 800c718:	6051      	str	r1, [r2, #4]
 800c71a:	881b      	ldrh	r3, [r3, #0]
 800c71c:	8113      	strh	r3, [r2, #8]
			p->moveSize = 7;
 800c71e:	687b      	ldr	r3, [r7, #4]
 800c720:	2207      	movs	r2, #7
 800c722:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"H,I,E,J,G,G,D");
 800c724:	687b      	ldr	r3, [r7, #4]
 800c726:	3340      	adds	r3, #64	; 0x40
 800c728:	4a44      	ldr	r2, [pc, #272]	; (800c83c <problem_fetch+0xb51c>)
 800c72a:	461c      	mov	r4, r3
 800c72c:	4613      	mov	r3, r2
 800c72e:	cb07      	ldmia	r3!, {r0, r1, r2}
 800c730:	6020      	str	r0, [r4, #0]
 800c732:	6061      	str	r1, [r4, #4]
 800c734:	60a2      	str	r2, [r4, #8]
 800c736:	881b      	ldrh	r3, [r3, #0]
 800c738:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,7,9,12,15,17,18");
 800c73a:	687b      	ldr	r3, [r7, #4]
 800c73c:	3304      	adds	r3, #4
 800c73e:	4a40      	ldr	r2, [pc, #256]	; (800c840 <problem_fetch+0xb520>)
 800c740:	461d      	mov	r5, r3
 800c742:	4614      	mov	r4, r2
 800c744:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800c746:	6028      	str	r0, [r5, #0]
 800c748:	6069      	str	r1, [r5, #4]
 800c74a:	60aa      	str	r2, [r5, #8]
 800c74c:	60eb      	str	r3, [r5, #12]
 800c74e:	8823      	ldrh	r3, [r4, #0]
 800c750:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish, "s,d,d,d,d,d,e");
 800c752:	687b      	ldr	r3, [r7, #4]
 800c754:	33d8      	adds	r3, #216	; 0xd8
 800c756:	4a36      	ldr	r2, [pc, #216]	; (800c830 <problem_fetch+0xb510>)
 800c758:	461c      	mov	r4, r3
 800c75a:	4613      	mov	r3, r2
 800c75c:	cb07      	ldmia	r3!, {r0, r1, r2}
 800c75e:	6020      	str	r0, [r4, #0]
 800c760:	6061      	str	r1, [r4, #4]
 800c762:	60a2      	str	r2, [r4, #8]
 800c764:	881b      	ldrh	r3, [r3, #0]
 800c766:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade, "7A+");
 800c768:	687b      	ldr	r3, [r7, #4]
 800c76a:	33cc      	adds	r3, #204	; 0xcc
 800c76c:	4a1f      	ldr	r2, [pc, #124]	; (800c7ec <problem_fetch+0xb4cc>)
 800c76e:	6810      	ldr	r0, [r2, #0]
 800c770:	6018      	str	r0, [r3, #0]
			break;
 800c772:	f00e bb1b 	b.w	801adac <problem_fetch+0x19a8c>
		case 404 :
			strcpy(p->name,"CHARGER");
 800c776:	687b      	ldr	r3, [r7, #4]
 800c778:	337c      	adds	r3, #124	; 0x7c
 800c77a:	4932      	ldr	r1, [pc, #200]	; (800c844 <problem_fetch+0xb524>)
 800c77c:	461a      	mov	r2, r3
 800c77e:	460b      	mov	r3, r1
 800c780:	cb03      	ldmia	r3!, {r0, r1}
 800c782:	6010      	str	r0, [r2, #0]
 800c784:	6051      	str	r1, [r2, #4]
			p->moveSize = 6;
 800c786:	687b      	ldr	r3, [r7, #4]
 800c788:	2206      	movs	r2, #6
 800c78a:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"J,I,E,E,B,D");
 800c78c:	687b      	ldr	r3, [r7, #4]
 800c78e:	3340      	adds	r3, #64	; 0x40
 800c790:	4a2d      	ldr	r2, [pc, #180]	; (800c848 <problem_fetch+0xb528>)
 800c792:	461c      	mov	r4, r3
 800c794:	4613      	mov	r3, r2
 800c796:	cb07      	ldmia	r3!, {r0, r1, r2}
 800c798:	6020      	str	r0, [r4, #0]
 800c79a:	6061      	str	r1, [r4, #4]
 800c79c:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,7,8,12,15,18");
 800c79e:	687b      	ldr	r3, [r7, #4]
 800c7a0:	3304      	adds	r3, #4
 800c7a2:	4a2a      	ldr	r2, [pc, #168]	; (800c84c <problem_fetch+0xb52c>)
 800c7a4:	461c      	mov	r4, r3
 800c7a6:	4613      	mov	r3, r2
 800c7a8:	cb07      	ldmia	r3!, {r0, r1, r2}
 800c7aa:	6020      	str	r0, [r4, #0]
 800c7ac:	6061      	str	r1, [r4, #4]
 800c7ae:	60a2      	str	r2, [r4, #8]
 800c7b0:	881a      	ldrh	r2, [r3, #0]
 800c7b2:	789b      	ldrb	r3, [r3, #2]
 800c7b4:	81a2      	strh	r2, [r4, #12]
 800c7b6:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish, "s,d,d,d,d,e");
 800c7b8:	687b      	ldr	r3, [r7, #4]
 800c7ba:	33d8      	adds	r3, #216	; 0xd8
 800c7bc:	4a0a      	ldr	r2, [pc, #40]	; (800c7e8 <problem_fetch+0xb4c8>)
 800c7be:	461c      	mov	r4, r3
 800c7c0:	4613      	mov	r3, r2
 800c7c2:	cb07      	ldmia	r3!, {r0, r1, r2}
 800c7c4:	6020      	str	r0, [r4, #0]
 800c7c6:	6061      	str	r1, [r4, #4]
 800c7c8:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade, "6C");
 800c7ca:	687b      	ldr	r3, [r7, #4]
 800c7cc:	33cc      	adds	r3, #204	; 0xcc
 800c7ce:	4a20      	ldr	r2, [pc, #128]	; (800c850 <problem_fetch+0xb530>)
 800c7d0:	8811      	ldrh	r1, [r2, #0]
 800c7d2:	7892      	ldrb	r2, [r2, #2]
 800c7d4:	8019      	strh	r1, [r3, #0]
 800c7d6:	709a      	strb	r2, [r3, #2]
			break;
 800c7d8:	f00e bae8 	b.w	801adac <problem_fetch+0x19a8c>
 800c7dc:	08025214 	.word	0x08025214
 800c7e0:	08025220 	.word	0x08025220
 800c7e4:	0802522c 	.word	0x0802522c
 800c7e8:	0802139c 	.word	0x0802139c
 800c7ec:	08021424 	.word	0x08021424
 800c7f0:	0802523c 	.word	0x0802523c
 800c7f4:	0802524c 	.word	0x0802524c
 800c7f8:	0802525c 	.word	0x0802525c
 800c7fc:	080214cc 	.word	0x080214cc
 800c800:	08025270 	.word	0x08025270
 800c804:	08025278 	.word	0x08025278
 800c808:	08022194 	.word	0x08022194
 800c80c:	08021910 	.word	0x08021910
 800c810:	08025284 	.word	0x08025284
 800c814:	0802528c 	.word	0x0802528c
 800c818:	0802529c 	.word	0x0802529c
 800c81c:	08021458 	.word	0x08021458
 800c820:	080212b0 	.word	0x080212b0
 800c824:	080252b0 	.word	0x080252b0
 800c828:	080252c0 	.word	0x080252c0
 800c82c:	080252d0 	.word	0x080252d0
 800c830:	08021494 	.word	0x08021494
 800c834:	0802132c 	.word	0x0802132c
 800c838:	080252e4 	.word	0x080252e4
 800c83c:	080252f0 	.word	0x080252f0
 800c840:	08025300 	.word	0x08025300
 800c844:	08025314 	.word	0x08025314
 800c848:	0802531c 	.word	0x0802531c
 800c84c:	08025328 	.word	0x08025328
 800c850:	08021370 	.word	0x08021370
		case 405 :
			strcpy(p->name,"CHAMONIX BAD DAY");
 800c854:	687b      	ldr	r3, [r7, #4]
 800c856:	337c      	adds	r3, #124	; 0x7c
 800c858:	4ac3      	ldr	r2, [pc, #780]	; (800cb68 <problem_fetch+0xb848>)
 800c85a:	461d      	mov	r5, r3
 800c85c:	4614      	mov	r4, r2
 800c85e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800c860:	6028      	str	r0, [r5, #0]
 800c862:	6069      	str	r1, [r5, #4]
 800c864:	60aa      	str	r2, [r5, #8]
 800c866:	60eb      	str	r3, [r5, #12]
 800c868:	7823      	ldrb	r3, [r4, #0]
 800c86a:	742b      	strb	r3, [r5, #16]
			p->moveSize = 6;
 800c86c:	687b      	ldr	r3, [r7, #4]
 800c86e:	2206      	movs	r2, #6
 800c870:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"J,H,E,E,A,D");
 800c872:	687b      	ldr	r3, [r7, #4]
 800c874:	3340      	adds	r3, #64	; 0x40
 800c876:	4abd      	ldr	r2, [pc, #756]	; (800cb6c <problem_fetch+0xb84c>)
 800c878:	461c      	mov	r4, r3
 800c87a:	4613      	mov	r3, r2
 800c87c:	cb07      	ldmia	r3!, {r0, r1, r2}
 800c87e:	6020      	str	r0, [r4, #0]
 800c880:	6061      	str	r1, [r4, #4]
 800c882:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,8,8,12,14,18");
 800c884:	687b      	ldr	r3, [r7, #4]
 800c886:	3304      	adds	r3, #4
 800c888:	4ab9      	ldr	r2, [pc, #740]	; (800cb70 <problem_fetch+0xb850>)
 800c88a:	461c      	mov	r4, r3
 800c88c:	4613      	mov	r3, r2
 800c88e:	cb07      	ldmia	r3!, {r0, r1, r2}
 800c890:	6020      	str	r0, [r4, #0]
 800c892:	6061      	str	r1, [r4, #4]
 800c894:	60a2      	str	r2, [r4, #8]
 800c896:	881a      	ldrh	r2, [r3, #0]
 800c898:	789b      	ldrb	r3, [r3, #2]
 800c89a:	81a2      	strh	r2, [r4, #12]
 800c89c:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish, "s,d,d,d,d,e");
 800c89e:	687b      	ldr	r3, [r7, #4]
 800c8a0:	33d8      	adds	r3, #216	; 0xd8
 800c8a2:	4ab4      	ldr	r2, [pc, #720]	; (800cb74 <problem_fetch+0xb854>)
 800c8a4:	461c      	mov	r4, r3
 800c8a6:	4613      	mov	r3, r2
 800c8a8:	cb07      	ldmia	r3!, {r0, r1, r2}
 800c8aa:	6020      	str	r0, [r4, #0]
 800c8ac:	6061      	str	r1, [r4, #4]
 800c8ae:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade, "6C");
 800c8b0:	687b      	ldr	r3, [r7, #4]
 800c8b2:	33cc      	adds	r3, #204	; 0xcc
 800c8b4:	4ab0      	ldr	r2, [pc, #704]	; (800cb78 <problem_fetch+0xb858>)
 800c8b6:	8811      	ldrh	r1, [r2, #0]
 800c8b8:	7892      	ldrb	r2, [r2, #2]
 800c8ba:	8019      	strh	r1, [r3, #0]
 800c8bc:	709a      	strb	r2, [r3, #2]
			break;
 800c8be:	f00e ba75 	b.w	801adac <problem_fetch+0x19a8c>
		case 406 :
			strcpy(p->name,"LAPPNOR");
 800c8c2:	687b      	ldr	r3, [r7, #4]
 800c8c4:	337c      	adds	r3, #124	; 0x7c
 800c8c6:	49ad      	ldr	r1, [pc, #692]	; (800cb7c <problem_fetch+0xb85c>)
 800c8c8:	461a      	mov	r2, r3
 800c8ca:	460b      	mov	r3, r1
 800c8cc:	cb03      	ldmia	r3!, {r0, r1}
 800c8ce:	6010      	str	r0, [r2, #0]
 800c8d0:	6051      	str	r1, [r2, #4]
			p->moveSize = 7;
 800c8d2:	687b      	ldr	r3, [r7, #4]
 800c8d4:	2207      	movs	r2, #7
 800c8d6:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"J,E,I,H,J,G,I");
 800c8d8:	687b      	ldr	r3, [r7, #4]
 800c8da:	3340      	adds	r3, #64	; 0x40
 800c8dc:	4aa8      	ldr	r2, [pc, #672]	; (800cb80 <problem_fetch+0xb860>)
 800c8de:	461c      	mov	r4, r3
 800c8e0:	4613      	mov	r3, r2
 800c8e2:	cb07      	ldmia	r3!, {r0, r1, r2}
 800c8e4:	6020      	str	r0, [r4, #0]
 800c8e6:	6061      	str	r1, [r4, #4]
 800c8e8:	60a2      	str	r2, [r4, #8]
 800c8ea:	881b      	ldrh	r3, [r3, #0]
 800c8ec:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,8,9,12,12,15,18");
 800c8ee:	687b      	ldr	r3, [r7, #4]
 800c8f0:	3304      	adds	r3, #4
 800c8f2:	4aa4      	ldr	r2, [pc, #656]	; (800cb84 <problem_fetch+0xb864>)
 800c8f4:	461d      	mov	r5, r3
 800c8f6:	4614      	mov	r4, r2
 800c8f8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800c8fa:	6028      	str	r0, [r5, #0]
 800c8fc:	6069      	str	r1, [r5, #4]
 800c8fe:	60aa      	str	r2, [r5, #8]
 800c900:	60eb      	str	r3, [r5, #12]
 800c902:	8823      	ldrh	r3, [r4, #0]
 800c904:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish, "s,d,d,d,d,d,e");
 800c906:	687b      	ldr	r3, [r7, #4]
 800c908:	33d8      	adds	r3, #216	; 0xd8
 800c90a:	4a9f      	ldr	r2, [pc, #636]	; (800cb88 <problem_fetch+0xb868>)
 800c90c:	461c      	mov	r4, r3
 800c90e:	4613      	mov	r3, r2
 800c910:	cb07      	ldmia	r3!, {r0, r1, r2}
 800c912:	6020      	str	r0, [r4, #0]
 800c914:	6061      	str	r1, [r4, #4]
 800c916:	60a2      	str	r2, [r4, #8]
 800c918:	881b      	ldrh	r3, [r3, #0]
 800c91a:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade, "7A");
 800c91c:	687b      	ldr	r3, [r7, #4]
 800c91e:	33cc      	adds	r3, #204	; 0xcc
 800c920:	4a9a      	ldr	r2, [pc, #616]	; (800cb8c <problem_fetch+0xb86c>)
 800c922:	8811      	ldrh	r1, [r2, #0]
 800c924:	7892      	ldrb	r2, [r2, #2]
 800c926:	8019      	strh	r1, [r3, #0]
 800c928:	709a      	strb	r2, [r3, #2]
			break;
 800c92a:	f00e ba3f 	b.w	801adac <problem_fetch+0x19a8c>
		case 407 :
			strcpy(p->name,"CHALK DUST");
 800c92e:	687b      	ldr	r3, [r7, #4]
 800c930:	337c      	adds	r3, #124	; 0x7c
 800c932:	4997      	ldr	r1, [pc, #604]	; (800cb90 <problem_fetch+0xb870>)
 800c934:	461a      	mov	r2, r3
 800c936:	460b      	mov	r3, r1
 800c938:	cb03      	ldmia	r3!, {r0, r1}
 800c93a:	6010      	str	r0, [r2, #0]
 800c93c:	6051      	str	r1, [r2, #4]
 800c93e:	8819      	ldrh	r1, [r3, #0]
 800c940:	789b      	ldrb	r3, [r3, #2]
 800c942:	8111      	strh	r1, [r2, #8]
 800c944:	7293      	strb	r3, [r2, #10]
			p->moveSize = 7;
 800c946:	687b      	ldr	r3, [r7, #4]
 800c948:	2207      	movs	r2, #7
 800c94a:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"C,B,E,B,E,E,I");
 800c94c:	687b      	ldr	r3, [r7, #4]
 800c94e:	3340      	adds	r3, #64	; 0x40
 800c950:	4a90      	ldr	r2, [pc, #576]	; (800cb94 <problem_fetch+0xb874>)
 800c952:	461c      	mov	r4, r3
 800c954:	4613      	mov	r3, r2
 800c956:	cb07      	ldmia	r3!, {r0, r1, r2}
 800c958:	6020      	str	r0, [r4, #0]
 800c95a:	6061      	str	r1, [r4, #4]
 800c95c:	60a2      	str	r2, [r4, #8]
 800c95e:	881b      	ldrh	r3, [r3, #0]
 800c960:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,6,8,10,12,16,18");
 800c962:	687b      	ldr	r3, [r7, #4]
 800c964:	3304      	adds	r3, #4
 800c966:	4a8c      	ldr	r2, [pc, #560]	; (800cb98 <problem_fetch+0xb878>)
 800c968:	461d      	mov	r5, r3
 800c96a:	4614      	mov	r4, r2
 800c96c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800c96e:	6028      	str	r0, [r5, #0]
 800c970:	6069      	str	r1, [r5, #4]
 800c972:	60aa      	str	r2, [r5, #8]
 800c974:	60eb      	str	r3, [r5, #12]
 800c976:	8823      	ldrh	r3, [r4, #0]
 800c978:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish, "s,s,d,d,d,d,e");
 800c97a:	687b      	ldr	r3, [r7, #4]
 800c97c:	33d8      	adds	r3, #216	; 0xd8
 800c97e:	4a87      	ldr	r2, [pc, #540]	; (800cb9c <problem_fetch+0xb87c>)
 800c980:	461c      	mov	r4, r3
 800c982:	4613      	mov	r3, r2
 800c984:	cb07      	ldmia	r3!, {r0, r1, r2}
 800c986:	6020      	str	r0, [r4, #0]
 800c988:	6061      	str	r1, [r4, #4]
 800c98a:	60a2      	str	r2, [r4, #8]
 800c98c:	881b      	ldrh	r3, [r3, #0]
 800c98e:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade, "6B+");
 800c990:	687b      	ldr	r3, [r7, #4]
 800c992:	33cc      	adds	r3, #204	; 0xcc
 800c994:	4a82      	ldr	r2, [pc, #520]	; (800cba0 <problem_fetch+0xb880>)
 800c996:	6810      	ldr	r0, [r2, #0]
 800c998:	6018      	str	r0, [r3, #0]
			break;
 800c99a:	f00e ba07 	b.w	801adac <problem_fetch+0x19a8c>
		case 408 :
			strcpy(p->name,"MAIDENATOR2");
 800c99e:	687b      	ldr	r3, [r7, #4]
 800c9a0:	337c      	adds	r3, #124	; 0x7c
 800c9a2:	4a80      	ldr	r2, [pc, #512]	; (800cba4 <problem_fetch+0xb884>)
 800c9a4:	461c      	mov	r4, r3
 800c9a6:	4613      	mov	r3, r2
 800c9a8:	cb07      	ldmia	r3!, {r0, r1, r2}
 800c9aa:	6020      	str	r0, [r4, #0]
 800c9ac:	6061      	str	r1, [r4, #4]
 800c9ae:	60a2      	str	r2, [r4, #8]
			p->moveSize = 9;
 800c9b0:	687b      	ldr	r3, [r7, #4]
 800c9b2:	2209      	movs	r2, #9
 800c9b4:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"G,C,C,H,C,F,A,B,A");
 800c9b6:	687b      	ldr	r3, [r7, #4]
 800c9b8:	3340      	adds	r3, #64	; 0x40
 800c9ba:	4a7b      	ldr	r2, [pc, #492]	; (800cba8 <problem_fetch+0xb888>)
 800c9bc:	461d      	mov	r5, r3
 800c9be:	4614      	mov	r4, r2
 800c9c0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800c9c2:	6028      	str	r0, [r5, #0]
 800c9c4:	6069      	str	r1, [r5, #4]
 800c9c6:	60aa      	str	r2, [r5, #8]
 800c9c8:	60eb      	str	r3, [r5, #12]
 800c9ca:	8823      	ldrh	r3, [r4, #0]
 800c9cc:	822b      	strh	r3, [r5, #16]
			strcpy(p->moveNumbers,"4,5,8,8,13,11,14,15,18");
 800c9ce:	687b      	ldr	r3, [r7, #4]
 800c9d0:	3304      	adds	r3, #4
 800c9d2:	4a76      	ldr	r2, [pc, #472]	; (800cbac <problem_fetch+0xb88c>)
 800c9d4:	461c      	mov	r4, r3
 800c9d6:	4615      	mov	r5, r2
 800c9d8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c9da:	6020      	str	r0, [r4, #0]
 800c9dc:	6061      	str	r1, [r4, #4]
 800c9de:	60a2      	str	r2, [r4, #8]
 800c9e0:	60e3      	str	r3, [r4, #12]
 800c9e2:	6828      	ldr	r0, [r5, #0]
 800c9e4:	6120      	str	r0, [r4, #16]
 800c9e6:	88ab      	ldrh	r3, [r5, #4]
 800c9e8:	79aa      	ldrb	r2, [r5, #6]
 800c9ea:	82a3      	strh	r3, [r4, #20]
 800c9ec:	4613      	mov	r3, r2
 800c9ee:	75a3      	strb	r3, [r4, #22]
			strcpy(p->startFinish, "s,s,d,d,d,d,d,d,e");
 800c9f0:	687b      	ldr	r3, [r7, #4]
 800c9f2:	33d8      	adds	r3, #216	; 0xd8
 800c9f4:	4a6e      	ldr	r2, [pc, #440]	; (800cbb0 <problem_fetch+0xb890>)
 800c9f6:	461d      	mov	r5, r3
 800c9f8:	4614      	mov	r4, r2
 800c9fa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800c9fc:	6028      	str	r0, [r5, #0]
 800c9fe:	6069      	str	r1, [r5, #4]
 800ca00:	60aa      	str	r2, [r5, #8]
 800ca02:	60eb      	str	r3, [r5, #12]
 800ca04:	8823      	ldrh	r3, [r4, #0]
 800ca06:	822b      	strh	r3, [r5, #16]
			strcpy(p->grade, "6C");
 800ca08:	687b      	ldr	r3, [r7, #4]
 800ca0a:	33cc      	adds	r3, #204	; 0xcc
 800ca0c:	4a5a      	ldr	r2, [pc, #360]	; (800cb78 <problem_fetch+0xb858>)
 800ca0e:	8811      	ldrh	r1, [r2, #0]
 800ca10:	7892      	ldrb	r2, [r2, #2]
 800ca12:	8019      	strh	r1, [r3, #0]
 800ca14:	709a      	strb	r2, [r3, #2]
			break;
 800ca16:	f00e b9c9 	b.w	801adac <problem_fetch+0x19a8c>
		case 409 :
			strcpy(p->name,"TURKMENISTAN");
 800ca1a:	687b      	ldr	r3, [r7, #4]
 800ca1c:	337c      	adds	r3, #124	; 0x7c
 800ca1e:	4a65      	ldr	r2, [pc, #404]	; (800cbb4 <problem_fetch+0xb894>)
 800ca20:	461c      	mov	r4, r3
 800ca22:	4613      	mov	r3, r2
 800ca24:	cb07      	ldmia	r3!, {r0, r1, r2}
 800ca26:	6020      	str	r0, [r4, #0]
 800ca28:	6061      	str	r1, [r4, #4]
 800ca2a:	60a2      	str	r2, [r4, #8]
 800ca2c:	781b      	ldrb	r3, [r3, #0]
 800ca2e:	7323      	strb	r3, [r4, #12]
			p->moveSize = 7;
 800ca30:	687b      	ldr	r3, [r7, #4]
 800ca32:	2207      	movs	r2, #7
 800ca34:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"G,E,I,J,E,H,D");
 800ca36:	687b      	ldr	r3, [r7, #4]
 800ca38:	3340      	adds	r3, #64	; 0x40
 800ca3a:	4a5f      	ldr	r2, [pc, #380]	; (800cbb8 <problem_fetch+0xb898>)
 800ca3c:	461c      	mov	r4, r3
 800ca3e:	4613      	mov	r3, r2
 800ca40:	cb07      	ldmia	r3!, {r0, r1, r2}
 800ca42:	6020      	str	r0, [r4, #0]
 800ca44:	6061      	str	r1, [r4, #4]
 800ca46:	60a2      	str	r2, [r4, #8]
 800ca48:	881b      	ldrh	r3, [r3, #0]
 800ca4a:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,8,10,7,12,16,18");
 800ca4c:	687b      	ldr	r3, [r7, #4]
 800ca4e:	3304      	adds	r3, #4
 800ca50:	4a5a      	ldr	r2, [pc, #360]	; (800cbbc <problem_fetch+0xb89c>)
 800ca52:	461d      	mov	r5, r3
 800ca54:	4614      	mov	r4, r2
 800ca56:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800ca58:	6028      	str	r0, [r5, #0]
 800ca5a:	6069      	str	r1, [r5, #4]
 800ca5c:	60aa      	str	r2, [r5, #8]
 800ca5e:	60eb      	str	r3, [r5, #12]
 800ca60:	8823      	ldrh	r3, [r4, #0]
 800ca62:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish, "s,d,d,d,d,d,e");
 800ca64:	687b      	ldr	r3, [r7, #4]
 800ca66:	33d8      	adds	r3, #216	; 0xd8
 800ca68:	4a47      	ldr	r2, [pc, #284]	; (800cb88 <problem_fetch+0xb868>)
 800ca6a:	461c      	mov	r4, r3
 800ca6c:	4613      	mov	r3, r2
 800ca6e:	cb07      	ldmia	r3!, {r0, r1, r2}
 800ca70:	6020      	str	r0, [r4, #0]
 800ca72:	6061      	str	r1, [r4, #4]
 800ca74:	60a2      	str	r2, [r4, #8]
 800ca76:	881b      	ldrh	r3, [r3, #0]
 800ca78:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade, "6B+");
 800ca7a:	687b      	ldr	r3, [r7, #4]
 800ca7c:	33cc      	adds	r3, #204	; 0xcc
 800ca7e:	4a48      	ldr	r2, [pc, #288]	; (800cba0 <problem_fetch+0xb880>)
 800ca80:	6810      	ldr	r0, [r2, #0]
 800ca82:	6018      	str	r0, [r3, #0]
			break;
 800ca84:	f00e b992 	b.w	801adac <problem_fetch+0x19a8c>
		case 41 :
			strcpy(p->name,"LINK TO THE PAST");
 800ca88:	687b      	ldr	r3, [r7, #4]
 800ca8a:	337c      	adds	r3, #124	; 0x7c
 800ca8c:	4a4c      	ldr	r2, [pc, #304]	; (800cbc0 <problem_fetch+0xb8a0>)
 800ca8e:	461d      	mov	r5, r3
 800ca90:	4614      	mov	r4, r2
 800ca92:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800ca94:	6028      	str	r0, [r5, #0]
 800ca96:	6069      	str	r1, [r5, #4]
 800ca98:	60aa      	str	r2, [r5, #8]
 800ca9a:	60eb      	str	r3, [r5, #12]
 800ca9c:	7823      	ldrb	r3, [r4, #0]
 800ca9e:	742b      	strb	r3, [r5, #16]
			p->moveSize = 7;
 800caa0:	687b      	ldr	r3, [r7, #4]
 800caa2:	2207      	movs	r2, #7
 800caa4:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"C,B,A,E,E,H,D");
 800caa6:	687b      	ldr	r3, [r7, #4]
 800caa8:	3340      	adds	r3, #64	; 0x40
 800caaa:	4a46      	ldr	r2, [pc, #280]	; (800cbc4 <problem_fetch+0xb8a4>)
 800caac:	461c      	mov	r4, r3
 800caae:	4613      	mov	r3, r2
 800cab0:	cb07      	ldmia	r3!, {r0, r1, r2}
 800cab2:	6020      	str	r0, [r4, #0]
 800cab4:	6061      	str	r1, [r4, #4]
 800cab6:	60a2      	str	r2, [r4, #8]
 800cab8:	881b      	ldrh	r3, [r3, #0]
 800caba:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,6,9,12,14,16,18");
 800cabc:	687b      	ldr	r3, [r7, #4]
 800cabe:	3304      	adds	r3, #4
 800cac0:	4a41      	ldr	r2, [pc, #260]	; (800cbc8 <problem_fetch+0xb8a8>)
 800cac2:	461d      	mov	r5, r3
 800cac4:	4614      	mov	r4, r2
 800cac6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800cac8:	6028      	str	r0, [r5, #0]
 800caca:	6069      	str	r1, [r5, #4]
 800cacc:	60aa      	str	r2, [r5, #8]
 800cace:	60eb      	str	r3, [r5, #12]
 800cad0:	8823      	ldrh	r3, [r4, #0]
 800cad2:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish, "s,s,d,d,d,d,e");
 800cad4:	687b      	ldr	r3, [r7, #4]
 800cad6:	33d8      	adds	r3, #216	; 0xd8
 800cad8:	4a30      	ldr	r2, [pc, #192]	; (800cb9c <problem_fetch+0xb87c>)
 800cada:	461c      	mov	r4, r3
 800cadc:	4613      	mov	r3, r2
 800cade:	cb07      	ldmia	r3!, {r0, r1, r2}
 800cae0:	6020      	str	r0, [r4, #0]
 800cae2:	6061      	str	r1, [r4, #4]
 800cae4:	60a2      	str	r2, [r4, #8]
 800cae6:	881b      	ldrh	r3, [r3, #0]
 800cae8:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade, "7A");
 800caea:	687b      	ldr	r3, [r7, #4]
 800caec:	33cc      	adds	r3, #204	; 0xcc
 800caee:	4a27      	ldr	r2, [pc, #156]	; (800cb8c <problem_fetch+0xb86c>)
 800caf0:	8811      	ldrh	r1, [r2, #0]
 800caf2:	7892      	ldrb	r2, [r2, #2]
 800caf4:	8019      	strh	r1, [r3, #0]
 800caf6:	709a      	strb	r2, [r3, #2]
			break;
 800caf8:	f00e b958 	b.w	801adac <problem_fetch+0x19a8c>
		case 410 :
			strcpy(p->name,"RASTAMAN");
 800cafc:	687b      	ldr	r3, [r7, #4]
 800cafe:	337c      	adds	r3, #124	; 0x7c
 800cb00:	4932      	ldr	r1, [pc, #200]	; (800cbcc <problem_fetch+0xb8ac>)
 800cb02:	461a      	mov	r2, r3
 800cb04:	460b      	mov	r3, r1
 800cb06:	cb03      	ldmia	r3!, {r0, r1}
 800cb08:	6010      	str	r0, [r2, #0]
 800cb0a:	6051      	str	r1, [r2, #4]
 800cb0c:	781b      	ldrb	r3, [r3, #0]
 800cb0e:	7213      	strb	r3, [r2, #8]
			p->moveSize = 7;
 800cb10:	687b      	ldr	r3, [r7, #4]
 800cb12:	2207      	movs	r2, #7
 800cb14:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"G,H,C,F,C,E,A");
 800cb16:	687b      	ldr	r3, [r7, #4]
 800cb18:	3340      	adds	r3, #64	; 0x40
 800cb1a:	4a2d      	ldr	r2, [pc, #180]	; (800cbd0 <problem_fetch+0xb8b0>)
 800cb1c:	461c      	mov	r4, r3
 800cb1e:	4613      	mov	r3, r2
 800cb20:	cb07      	ldmia	r3!, {r0, r1, r2}
 800cb22:	6020      	str	r0, [r4, #0]
 800cb24:	6061      	str	r1, [r4, #4]
 800cb26:	60a2      	str	r2, [r4, #8]
 800cb28:	881b      	ldrh	r3, [r3, #0]
 800cb2a:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,8,8,11,13,16,18");
 800cb2c:	687b      	ldr	r3, [r7, #4]
 800cb2e:	3304      	adds	r3, #4
 800cb30:	4a28      	ldr	r2, [pc, #160]	; (800cbd4 <problem_fetch+0xb8b4>)
 800cb32:	461d      	mov	r5, r3
 800cb34:	4614      	mov	r4, r2
 800cb36:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800cb38:	6028      	str	r0, [r5, #0]
 800cb3a:	6069      	str	r1, [r5, #4]
 800cb3c:	60aa      	str	r2, [r5, #8]
 800cb3e:	60eb      	str	r3, [r5, #12]
 800cb40:	8823      	ldrh	r3, [r4, #0]
 800cb42:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish, "s,d,d,d,d,d,e");
 800cb44:	687b      	ldr	r3, [r7, #4]
 800cb46:	33d8      	adds	r3, #216	; 0xd8
 800cb48:	4a0f      	ldr	r2, [pc, #60]	; (800cb88 <problem_fetch+0xb868>)
 800cb4a:	461c      	mov	r4, r3
 800cb4c:	4613      	mov	r3, r2
 800cb4e:	cb07      	ldmia	r3!, {r0, r1, r2}
 800cb50:	6020      	str	r0, [r4, #0]
 800cb52:	6061      	str	r1, [r4, #4]
 800cb54:	60a2      	str	r2, [r4, #8]
 800cb56:	881b      	ldrh	r3, [r3, #0]
 800cb58:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade, "6B+");
 800cb5a:	687b      	ldr	r3, [r7, #4]
 800cb5c:	33cc      	adds	r3, #204	; 0xcc
 800cb5e:	4a10      	ldr	r2, [pc, #64]	; (800cba0 <problem_fetch+0xb880>)
 800cb60:	6810      	ldr	r0, [r2, #0]
 800cb62:	6018      	str	r0, [r3, #0]
			break;
 800cb64:	f00e b922 	b.w	801adac <problem_fetch+0x19a8c>
 800cb68:	08025338 	.word	0x08025338
 800cb6c:	0802534c 	.word	0x0802534c
 800cb70:	08025358 	.word	0x08025358
 800cb74:	0802139c 	.word	0x0802139c
 800cb78:	08021370 	.word	0x08021370
 800cb7c:	08025368 	.word	0x08025368
 800cb80:	08025370 	.word	0x08025370
 800cb84:	08025380 	.word	0x08025380
 800cb88:	08021494 	.word	0x08021494
 800cb8c:	080212f4 	.word	0x080212f4
 800cb90:	08025394 	.word	0x08025394
 800cb94:	08023d94 	.word	0x08023d94
 800cb98:	080253a0 	.word	0x080253a0
 800cb9c:	080212a0 	.word	0x080212a0
 800cba0:	080212b0 	.word	0x080212b0
 800cba4:	080253b4 	.word	0x080253b4
 800cba8:	080253c0 	.word	0x080253c0
 800cbac:	080253d4 	.word	0x080253d4
 800cbb0:	0802187c 	.word	0x0802187c
 800cbb4:	080253ec 	.word	0x080253ec
 800cbb8:	080253fc 	.word	0x080253fc
 800cbbc:	0802540c 	.word	0x0802540c
 800cbc0:	08025420 	.word	0x08025420
 800cbc4:	08025434 	.word	0x08025434
 800cbc8:	08025444 	.word	0x08025444
 800cbcc:	08025458 	.word	0x08025458
 800cbd0:	08025464 	.word	0x08025464
 800cbd4:	080234cc 	.word	0x080234cc
		case 411 :
			strcpy(p->name,"ONE LINE");
 800cbd8:	687b      	ldr	r3, [r7, #4]
 800cbda:	337c      	adds	r3, #124	; 0x7c
 800cbdc:	49b9      	ldr	r1, [pc, #740]	; (800cec4 <problem_fetch+0xbba4>)
 800cbde:	461a      	mov	r2, r3
 800cbe0:	460b      	mov	r3, r1
 800cbe2:	cb03      	ldmia	r3!, {r0, r1}
 800cbe4:	6010      	str	r0, [r2, #0]
 800cbe6:	6051      	str	r1, [r2, #4]
 800cbe8:	781b      	ldrb	r3, [r3, #0]
 800cbea:	7213      	strb	r3, [r2, #8]
			p->moveSize = 8;
 800cbec:	687b      	ldr	r3, [r7, #4]
 800cbee:	2208      	movs	r2, #8
 800cbf0:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"C,E,H,K,E,I,J,I");
 800cbf2:	687b      	ldr	r3, [r7, #4]
 800cbf4:	3340      	adds	r3, #64	; 0x40
 800cbf6:	4ab4      	ldr	r2, [pc, #720]	; (800cec8 <problem_fetch+0xbba8>)
 800cbf8:	461c      	mov	r4, r3
 800cbfa:	4615      	mov	r5, r2
 800cbfc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800cbfe:	6020      	str	r0, [r4, #0]
 800cc00:	6061      	str	r1, [r4, #4]
 800cc02:	60a2      	str	r2, [r4, #8]
 800cc04:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,6,12,16,9,9,5,18");
 800cc06:	687b      	ldr	r3, [r7, #4]
 800cc08:	3304      	adds	r3, #4
 800cc0a:	4ab0      	ldr	r2, [pc, #704]	; (800cecc <problem_fetch+0xbbac>)
 800cc0c:	461d      	mov	r5, r3
 800cc0e:	4614      	mov	r4, r2
 800cc10:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800cc12:	6028      	str	r0, [r5, #0]
 800cc14:	6069      	str	r1, [r5, #4]
 800cc16:	60aa      	str	r2, [r5, #8]
 800cc18:	60eb      	str	r3, [r5, #12]
 800cc1a:	8823      	ldrh	r3, [r4, #0]
 800cc1c:	78a2      	ldrb	r2, [r4, #2]
 800cc1e:	822b      	strh	r3, [r5, #16]
 800cc20:	4613      	mov	r3, r2
 800cc22:	74ab      	strb	r3, [r5, #18]
			strcpy(p->startFinish, "s,s,d,d,d,d,d,e");
 800cc24:	687b      	ldr	r3, [r7, #4]
 800cc26:	33d8      	adds	r3, #216	; 0xd8
 800cc28:	4aa9      	ldr	r2, [pc, #676]	; (800ced0 <problem_fetch+0xbbb0>)
 800cc2a:	461c      	mov	r4, r3
 800cc2c:	4615      	mov	r5, r2
 800cc2e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800cc30:	6020      	str	r0, [r4, #0]
 800cc32:	6061      	str	r1, [r4, #4]
 800cc34:	60a2      	str	r2, [r4, #8]
 800cc36:	60e3      	str	r3, [r4, #12]
			strcpy(p->grade, "7A+");
 800cc38:	687b      	ldr	r3, [r7, #4]
 800cc3a:	33cc      	adds	r3, #204	; 0xcc
 800cc3c:	4aa5      	ldr	r2, [pc, #660]	; (800ced4 <problem_fetch+0xbbb4>)
 800cc3e:	6810      	ldr	r0, [r2, #0]
 800cc40:	6018      	str	r0, [r3, #0]
			break;
 800cc42:	f00e b8b3 	b.w	801adac <problem_fetch+0x19a8c>
		case 412 :
			strcpy(p->name,"PINCHY PINCH");
 800cc46:	687b      	ldr	r3, [r7, #4]
 800cc48:	337c      	adds	r3, #124	; 0x7c
 800cc4a:	4aa3      	ldr	r2, [pc, #652]	; (800ced8 <problem_fetch+0xbbb8>)
 800cc4c:	461c      	mov	r4, r3
 800cc4e:	4613      	mov	r3, r2
 800cc50:	cb07      	ldmia	r3!, {r0, r1, r2}
 800cc52:	6020      	str	r0, [r4, #0]
 800cc54:	6061      	str	r1, [r4, #4]
 800cc56:	60a2      	str	r2, [r4, #8]
 800cc58:	781b      	ldrb	r3, [r3, #0]
 800cc5a:	7323      	strb	r3, [r4, #12]
			p->moveSize = 7;
 800cc5c:	687b      	ldr	r3, [r7, #4]
 800cc5e:	2207      	movs	r2, #7
 800cc60:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"J,H,C,F,C,D,A");
 800cc62:	687b      	ldr	r3, [r7, #4]
 800cc64:	3340      	adds	r3, #64	; 0x40
 800cc66:	4a9d      	ldr	r2, [pc, #628]	; (800cedc <problem_fetch+0xbbbc>)
 800cc68:	461c      	mov	r4, r3
 800cc6a:	4613      	mov	r3, r2
 800cc6c:	cb07      	ldmia	r3!, {r0, r1, r2}
 800cc6e:	6020      	str	r0, [r4, #0]
 800cc70:	6061      	str	r1, [r4, #4]
 800cc72:	60a2      	str	r2, [r4, #8]
 800cc74:	881b      	ldrh	r3, [r3, #0]
 800cc76:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,8,8,11,13,15,18");
 800cc78:	687b      	ldr	r3, [r7, #4]
 800cc7a:	3304      	adds	r3, #4
 800cc7c:	4a98      	ldr	r2, [pc, #608]	; (800cee0 <problem_fetch+0xbbc0>)
 800cc7e:	461d      	mov	r5, r3
 800cc80:	4614      	mov	r4, r2
 800cc82:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800cc84:	6028      	str	r0, [r5, #0]
 800cc86:	6069      	str	r1, [r5, #4]
 800cc88:	60aa      	str	r2, [r5, #8]
 800cc8a:	60eb      	str	r3, [r5, #12]
 800cc8c:	8823      	ldrh	r3, [r4, #0]
 800cc8e:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish, "s,d,d,d,d,d,e");
 800cc90:	687b      	ldr	r3, [r7, #4]
 800cc92:	33d8      	adds	r3, #216	; 0xd8
 800cc94:	4a93      	ldr	r2, [pc, #588]	; (800cee4 <problem_fetch+0xbbc4>)
 800cc96:	461c      	mov	r4, r3
 800cc98:	4613      	mov	r3, r2
 800cc9a:	cb07      	ldmia	r3!, {r0, r1, r2}
 800cc9c:	6020      	str	r0, [r4, #0]
 800cc9e:	6061      	str	r1, [r4, #4]
 800cca0:	60a2      	str	r2, [r4, #8]
 800cca2:	881b      	ldrh	r3, [r3, #0]
 800cca4:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade, "6C+");
 800cca6:	687b      	ldr	r3, [r7, #4]
 800cca8:	33cc      	adds	r3, #204	; 0xcc
 800ccaa:	4a8f      	ldr	r2, [pc, #572]	; (800cee8 <problem_fetch+0xbbc8>)
 800ccac:	6810      	ldr	r0, [r2, #0]
 800ccae:	6018      	str	r0, [r3, #0]
			break;
 800ccb0:	f00e b87c 	b.w	801adac <problem_fetch+0x19a8c>
		case 413 :
			strcpy(p->name,"SOFT LIKE BUTTER");
 800ccb4:	687b      	ldr	r3, [r7, #4]
 800ccb6:	337c      	adds	r3, #124	; 0x7c
 800ccb8:	4a8c      	ldr	r2, [pc, #560]	; (800ceec <problem_fetch+0xbbcc>)
 800ccba:	461d      	mov	r5, r3
 800ccbc:	4614      	mov	r4, r2
 800ccbe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800ccc0:	6028      	str	r0, [r5, #0]
 800ccc2:	6069      	str	r1, [r5, #4]
 800ccc4:	60aa      	str	r2, [r5, #8]
 800ccc6:	60eb      	str	r3, [r5, #12]
 800ccc8:	7823      	ldrb	r3, [r4, #0]
 800ccca:	742b      	strb	r3, [r5, #16]
			p->moveSize = 8;
 800cccc:	687b      	ldr	r3, [r7, #4]
 800ccce:	2208      	movs	r2, #8
 800ccd0:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"G,E,I,H,J,E,G,D");
 800ccd2:	687b      	ldr	r3, [r7, #4]
 800ccd4:	3340      	adds	r3, #64	; 0x40
 800ccd6:	4a86      	ldr	r2, [pc, #536]	; (800cef0 <problem_fetch+0xbbd0>)
 800ccd8:	461c      	mov	r4, r3
 800ccda:	4615      	mov	r5, r2
 800ccdc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ccde:	6020      	str	r0, [r4, #0]
 800cce0:	6061      	str	r1, [r4, #4]
 800cce2:	60a2      	str	r2, [r4, #8]
 800cce4:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,8,10,12,13,14,17,18");
 800cce6:	687b      	ldr	r3, [r7, #4]
 800cce8:	3304      	adds	r3, #4
 800ccea:	4a82      	ldr	r2, [pc, #520]	; (800cef4 <problem_fetch+0xbbd4>)
 800ccec:	461d      	mov	r5, r3
 800ccee:	4614      	mov	r4, r2
 800ccf0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800ccf2:	6028      	str	r0, [r5, #0]
 800ccf4:	6069      	str	r1, [r5, #4]
 800ccf6:	60aa      	str	r2, [r5, #8]
 800ccf8:	60eb      	str	r3, [r5, #12]
 800ccfa:	6820      	ldr	r0, [r4, #0]
 800ccfc:	6128      	str	r0, [r5, #16]
 800ccfe:	88a3      	ldrh	r3, [r4, #4]
 800cd00:	82ab      	strh	r3, [r5, #20]
			strcpy(p->startFinish, "s,d,d,d,d,d,d,e");
 800cd02:	687b      	ldr	r3, [r7, #4]
 800cd04:	33d8      	adds	r3, #216	; 0xd8
 800cd06:	4a7c      	ldr	r2, [pc, #496]	; (800cef8 <problem_fetch+0xbbd8>)
 800cd08:	461c      	mov	r4, r3
 800cd0a:	4615      	mov	r5, r2
 800cd0c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800cd0e:	6020      	str	r0, [r4, #0]
 800cd10:	6061      	str	r1, [r4, #4]
 800cd12:	60a2      	str	r2, [r4, #8]
 800cd14:	60e3      	str	r3, [r4, #12]
			strcpy(p->grade, "6C");
 800cd16:	687b      	ldr	r3, [r7, #4]
 800cd18:	33cc      	adds	r3, #204	; 0xcc
 800cd1a:	4a78      	ldr	r2, [pc, #480]	; (800cefc <problem_fetch+0xbbdc>)
 800cd1c:	8811      	ldrh	r1, [r2, #0]
 800cd1e:	7892      	ldrb	r2, [r2, #2]
 800cd20:	8019      	strh	r1, [r3, #0]
 800cd22:	709a      	strb	r2, [r3, #2]
			break;
 800cd24:	f00e b842 	b.w	801adac <problem_fetch+0x19a8c>
		case 414 :
			strcpy(p->name,"LE VOYAGE");
 800cd28:	687b      	ldr	r3, [r7, #4]
 800cd2a:	337c      	adds	r3, #124	; 0x7c
 800cd2c:	4974      	ldr	r1, [pc, #464]	; (800cf00 <problem_fetch+0xbbe0>)
 800cd2e:	461a      	mov	r2, r3
 800cd30:	460b      	mov	r3, r1
 800cd32:	cb03      	ldmia	r3!, {r0, r1}
 800cd34:	6010      	str	r0, [r2, #0]
 800cd36:	6051      	str	r1, [r2, #4]
 800cd38:	881b      	ldrh	r3, [r3, #0]
 800cd3a:	8113      	strh	r3, [r2, #8]
			p->moveSize = 6;
 800cd3c:	687b      	ldr	r3, [r7, #4]
 800cd3e:	2206      	movs	r2, #6
 800cd40:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"G,H,E,A,C,D");
 800cd42:	687b      	ldr	r3, [r7, #4]
 800cd44:	3340      	adds	r3, #64	; 0x40
 800cd46:	4a6f      	ldr	r2, [pc, #444]	; (800cf04 <problem_fetch+0xbbe4>)
 800cd48:	461c      	mov	r4, r3
 800cd4a:	4613      	mov	r3, r2
 800cd4c:	cb07      	ldmia	r3!, {r0, r1, r2}
 800cd4e:	6020      	str	r0, [r4, #0]
 800cd50:	6061      	str	r1, [r4, #4]
 800cd52:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,8,12,14,8,18");
 800cd54:	687b      	ldr	r3, [r7, #4]
 800cd56:	3304      	adds	r3, #4
 800cd58:	4a6b      	ldr	r2, [pc, #428]	; (800cf08 <problem_fetch+0xbbe8>)
 800cd5a:	461c      	mov	r4, r3
 800cd5c:	4613      	mov	r3, r2
 800cd5e:	cb07      	ldmia	r3!, {r0, r1, r2}
 800cd60:	6020      	str	r0, [r4, #0]
 800cd62:	6061      	str	r1, [r4, #4]
 800cd64:	60a2      	str	r2, [r4, #8]
 800cd66:	881a      	ldrh	r2, [r3, #0]
 800cd68:	789b      	ldrb	r3, [r3, #2]
 800cd6a:	81a2      	strh	r2, [r4, #12]
 800cd6c:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish, "s,d,d,d,d,e");
 800cd6e:	687b      	ldr	r3, [r7, #4]
 800cd70:	33d8      	adds	r3, #216	; 0xd8
 800cd72:	4a66      	ldr	r2, [pc, #408]	; (800cf0c <problem_fetch+0xbbec>)
 800cd74:	461c      	mov	r4, r3
 800cd76:	4613      	mov	r3, r2
 800cd78:	cb07      	ldmia	r3!, {r0, r1, r2}
 800cd7a:	6020      	str	r0, [r4, #0]
 800cd7c:	6061      	str	r1, [r4, #4]
 800cd7e:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade, "6C");
 800cd80:	687b      	ldr	r3, [r7, #4]
 800cd82:	33cc      	adds	r3, #204	; 0xcc
 800cd84:	4a5d      	ldr	r2, [pc, #372]	; (800cefc <problem_fetch+0xbbdc>)
 800cd86:	8811      	ldrh	r1, [r2, #0]
 800cd88:	7892      	ldrb	r2, [r2, #2]
 800cd8a:	8019      	strh	r1, [r3, #0]
 800cd8c:	709a      	strb	r2, [r3, #2]
			break;
 800cd8e:	f00e b80d 	b.w	801adac <problem_fetch+0x19a8c>
		case 415 :
			strcpy(p->name,"SPAIN IN VAIN");
 800cd92:	687b      	ldr	r3, [r7, #4]
 800cd94:	337c      	adds	r3, #124	; 0x7c
 800cd96:	4a5e      	ldr	r2, [pc, #376]	; (800cf10 <problem_fetch+0xbbf0>)
 800cd98:	461c      	mov	r4, r3
 800cd9a:	4613      	mov	r3, r2
 800cd9c:	cb07      	ldmia	r3!, {r0, r1, r2}
 800cd9e:	6020      	str	r0, [r4, #0]
 800cda0:	6061      	str	r1, [r4, #4]
 800cda2:	60a2      	str	r2, [r4, #8]
 800cda4:	881b      	ldrh	r3, [r3, #0]
 800cda6:	81a3      	strh	r3, [r4, #12]
			p->moveSize = 6;
 800cda8:	687b      	ldr	r3, [r7, #4]
 800cdaa:	2206      	movs	r2, #6
 800cdac:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"J,H,F,E,A,D");
 800cdae:	687b      	ldr	r3, [r7, #4]
 800cdb0:	3340      	adds	r3, #64	; 0x40
 800cdb2:	4a58      	ldr	r2, [pc, #352]	; (800cf14 <problem_fetch+0xbbf4>)
 800cdb4:	461c      	mov	r4, r3
 800cdb6:	4613      	mov	r3, r2
 800cdb8:	cb07      	ldmia	r3!, {r0, r1, r2}
 800cdba:	6020      	str	r0, [r4, #0]
 800cdbc:	6061      	str	r1, [r4, #4]
 800cdbe:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,8,11,12,14,18");
 800cdc0:	687b      	ldr	r3, [r7, #4]
 800cdc2:	3304      	adds	r3, #4
 800cdc4:	4a54      	ldr	r2, [pc, #336]	; (800cf18 <problem_fetch+0xbbf8>)
 800cdc6:	461c      	mov	r4, r3
 800cdc8:	4615      	mov	r5, r2
 800cdca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800cdcc:	6020      	str	r0, [r4, #0]
 800cdce:	6061      	str	r1, [r4, #4]
 800cdd0:	60a2      	str	r2, [r4, #8]
 800cdd2:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish, "s,d,d,d,d,e");
 800cdd4:	687b      	ldr	r3, [r7, #4]
 800cdd6:	33d8      	adds	r3, #216	; 0xd8
 800cdd8:	4a4c      	ldr	r2, [pc, #304]	; (800cf0c <problem_fetch+0xbbec>)
 800cdda:	461c      	mov	r4, r3
 800cddc:	4613      	mov	r3, r2
 800cdde:	cb07      	ldmia	r3!, {r0, r1, r2}
 800cde0:	6020      	str	r0, [r4, #0]
 800cde2:	6061      	str	r1, [r4, #4]
 800cde4:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade, "7A");
 800cde6:	687b      	ldr	r3, [r7, #4]
 800cde8:	33cc      	adds	r3, #204	; 0xcc
 800cdea:	4a4c      	ldr	r2, [pc, #304]	; (800cf1c <problem_fetch+0xbbfc>)
 800cdec:	8811      	ldrh	r1, [r2, #0]
 800cdee:	7892      	ldrb	r2, [r2, #2]
 800cdf0:	8019      	strh	r1, [r3, #0]
 800cdf2:	709a      	strb	r2, [r3, #2]
			break;
 800cdf4:	f00d bfda 	b.w	801adac <problem_fetch+0x19a8c>
		case 416 :
			strcpy(p->name,"CHIVAS");
 800cdf8:	687b      	ldr	r3, [r7, #4]
 800cdfa:	337c      	adds	r3, #124	; 0x7c
 800cdfc:	4a48      	ldr	r2, [pc, #288]	; (800cf20 <problem_fetch+0xbc00>)
 800cdfe:	6810      	ldr	r0, [r2, #0]
 800ce00:	6018      	str	r0, [r3, #0]
 800ce02:	8891      	ldrh	r1, [r2, #4]
 800ce04:	7992      	ldrb	r2, [r2, #6]
 800ce06:	8099      	strh	r1, [r3, #4]
 800ce08:	719a      	strb	r2, [r3, #6]
			p->moveSize = 4;
 800ce0a:	687b      	ldr	r3, [r7, #4]
 800ce0c:	2204      	movs	r2, #4
 800ce0e:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"G,F,A,A");
 800ce10:	687b      	ldr	r3, [r7, #4]
 800ce12:	3340      	adds	r3, #64	; 0x40
 800ce14:	4943      	ldr	r1, [pc, #268]	; (800cf24 <problem_fetch+0xbc04>)
 800ce16:	461a      	mov	r2, r3
 800ce18:	460b      	mov	r3, r1
 800ce1a:	cb03      	ldmia	r3!, {r0, r1}
 800ce1c:	6010      	str	r0, [r2, #0]
 800ce1e:	6051      	str	r1, [r2, #4]
			strcpy(p->moveNumbers,"6,11,14,18");
 800ce20:	687b      	ldr	r3, [r7, #4]
 800ce22:	3304      	adds	r3, #4
 800ce24:	4940      	ldr	r1, [pc, #256]	; (800cf28 <problem_fetch+0xbc08>)
 800ce26:	461a      	mov	r2, r3
 800ce28:	460b      	mov	r3, r1
 800ce2a:	cb03      	ldmia	r3!, {r0, r1}
 800ce2c:	6010      	str	r0, [r2, #0]
 800ce2e:	6051      	str	r1, [r2, #4]
 800ce30:	8819      	ldrh	r1, [r3, #0]
 800ce32:	789b      	ldrb	r3, [r3, #2]
 800ce34:	8111      	strh	r1, [r2, #8]
 800ce36:	7293      	strb	r3, [r2, #10]
			strcpy(p->startFinish, "s,d,d,e");
 800ce38:	687b      	ldr	r3, [r7, #4]
 800ce3a:	33d8      	adds	r3, #216	; 0xd8
 800ce3c:	493b      	ldr	r1, [pc, #236]	; (800cf2c <problem_fetch+0xbc0c>)
 800ce3e:	461a      	mov	r2, r3
 800ce40:	460b      	mov	r3, r1
 800ce42:	cb03      	ldmia	r3!, {r0, r1}
 800ce44:	6010      	str	r0, [r2, #0]
 800ce46:	6051      	str	r1, [r2, #4]
			strcpy(p->grade, "7B");
 800ce48:	687b      	ldr	r3, [r7, #4]
 800ce4a:	33cc      	adds	r3, #204	; 0xcc
 800ce4c:	4a38      	ldr	r2, [pc, #224]	; (800cf30 <problem_fetch+0xbc10>)
 800ce4e:	8811      	ldrh	r1, [r2, #0]
 800ce50:	7892      	ldrb	r2, [r2, #2]
 800ce52:	8019      	strh	r1, [r3, #0]
 800ce54:	709a      	strb	r2, [r3, #2]
			break;
 800ce56:	f00d bfa9 	b.w	801adac <problem_fetch+0x19a8c>
		case 417 :
			strcpy(p->name,"REACH FOR THE SKY");
 800ce5a:	687b      	ldr	r3, [r7, #4]
 800ce5c:	337c      	adds	r3, #124	; 0x7c
 800ce5e:	4a35      	ldr	r2, [pc, #212]	; (800cf34 <problem_fetch+0xbc14>)
 800ce60:	461d      	mov	r5, r3
 800ce62:	4614      	mov	r4, r2
 800ce64:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800ce66:	6028      	str	r0, [r5, #0]
 800ce68:	6069      	str	r1, [r5, #4]
 800ce6a:	60aa      	str	r2, [r5, #8]
 800ce6c:	60eb      	str	r3, [r5, #12]
 800ce6e:	8823      	ldrh	r3, [r4, #0]
 800ce70:	822b      	strh	r3, [r5, #16]
			p->moveSize = 5;
 800ce72:	687b      	ldr	r3, [r7, #4]
 800ce74:	2205      	movs	r2, #5
 800ce76:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"G,E,G,C,D");
 800ce78:	687b      	ldr	r3, [r7, #4]
 800ce7a:	3340      	adds	r3, #64	; 0x40
 800ce7c:	492e      	ldr	r1, [pc, #184]	; (800cf38 <problem_fetch+0xbc18>)
 800ce7e:	461a      	mov	r2, r3
 800ce80:	460b      	mov	r3, r1
 800ce82:	cb03      	ldmia	r3!, {r0, r1}
 800ce84:	6010      	str	r0, [r2, #0]
 800ce86:	6051      	str	r1, [r2, #4]
 800ce88:	881b      	ldrh	r3, [r3, #0]
 800ce8a:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"4,8,9,13,18");
 800ce8c:	687b      	ldr	r3, [r7, #4]
 800ce8e:	3304      	adds	r3, #4
 800ce90:	4a2a      	ldr	r2, [pc, #168]	; (800cf3c <problem_fetch+0xbc1c>)
 800ce92:	461c      	mov	r4, r3
 800ce94:	4613      	mov	r3, r2
 800ce96:	cb07      	ldmia	r3!, {r0, r1, r2}
 800ce98:	6020      	str	r0, [r4, #0]
 800ce9a:	6061      	str	r1, [r4, #4]
 800ce9c:	60a2      	str	r2, [r4, #8]
			strcpy(p->startFinish, "s,d,d,d,e");
 800ce9e:	687b      	ldr	r3, [r7, #4]
 800cea0:	33d8      	adds	r3, #216	; 0xd8
 800cea2:	4927      	ldr	r1, [pc, #156]	; (800cf40 <problem_fetch+0xbc20>)
 800cea4:	461a      	mov	r2, r3
 800cea6:	460b      	mov	r3, r1
 800cea8:	cb03      	ldmia	r3!, {r0, r1}
 800ceaa:	6010      	str	r0, [r2, #0]
 800ceac:	6051      	str	r1, [r2, #4]
 800ceae:	881b      	ldrh	r3, [r3, #0]
 800ceb0:	8113      	strh	r3, [r2, #8]
			strcpy(p->grade, "7A");
 800ceb2:	687b      	ldr	r3, [r7, #4]
 800ceb4:	33cc      	adds	r3, #204	; 0xcc
 800ceb6:	4a19      	ldr	r2, [pc, #100]	; (800cf1c <problem_fetch+0xbbfc>)
 800ceb8:	8811      	ldrh	r1, [r2, #0]
 800ceba:	7892      	ldrb	r2, [r2, #2]
 800cebc:	8019      	strh	r1, [r3, #0]
 800cebe:	709a      	strb	r2, [r3, #2]
			break;
 800cec0:	f00d bf74 	b.w	801adac <problem_fetch+0x19a8c>
 800cec4:	08025474 	.word	0x08025474
 800cec8:	08025014 	.word	0x08025014
 800cecc:	08025480 	.word	0x08025480
 800ced0:	080214cc 	.word	0x080214cc
 800ced4:	08021424 	.word	0x08021424
 800ced8:	08025494 	.word	0x08025494
 800cedc:	080254a4 	.word	0x080254a4
 800cee0:	0802281c 	.word	0x0802281c
 800cee4:	08021494 	.word	0x08021494
 800cee8:	080213a8 	.word	0x080213a8
 800ceec:	080254b4 	.word	0x080254b4
 800cef0:	080254c8 	.word	0x080254c8
 800cef4:	080254d8 	.word	0x080254d8
 800cef8:	08021458 	.word	0x08021458
 800cefc:	08021370 	.word	0x08021370
 800cf00:	080254f0 	.word	0x080254f0
 800cf04:	080254fc 	.word	0x080254fc
 800cf08:	08025508 	.word	0x08025508
 800cf0c:	0802139c 	.word	0x0802139c
 800cf10:	08025518 	.word	0x08025518
 800cf14:	08025528 	.word	0x08025528
 800cf18:	08025534 	.word	0x08025534
 800cf1c:	080212f4 	.word	0x080212f4
 800cf20:	08025544 	.word	0x08025544
 800cf24:	0802554c 	.word	0x0802554c
 800cf28:	08025554 	.word	0x08025554
 800cf2c:	08022028 	.word	0x08022028
 800cf30:	0802132c 	.word	0x0802132c
 800cf34:	08025560 	.word	0x08025560
 800cf38:	08025574 	.word	0x08025574
 800cf3c:	08025580 	.word	0x08025580
 800cf40:	08021320 	.word	0x08021320
		case 418 :
			strcpy(p->name,"BO");
 800cf44:	687b      	ldr	r3, [r7, #4]
 800cf46:	337c      	adds	r3, #124	; 0x7c
 800cf48:	4aa8      	ldr	r2, [pc, #672]	; (800d1ec <problem_fetch+0xbecc>)
 800cf4a:	8811      	ldrh	r1, [r2, #0]
 800cf4c:	7892      	ldrb	r2, [r2, #2]
 800cf4e:	8019      	strh	r1, [r3, #0]
 800cf50:	709a      	strb	r2, [r3, #2]
			p->moveSize = 4;
 800cf52:	687b      	ldr	r3, [r7, #4]
 800cf54:	2204      	movs	r2, #4
 800cf56:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"E,I,G,I");
 800cf58:	687b      	ldr	r3, [r7, #4]
 800cf5a:	3340      	adds	r3, #64	; 0x40
 800cf5c:	49a4      	ldr	r1, [pc, #656]	; (800d1f0 <problem_fetch+0xbed0>)
 800cf5e:	461a      	mov	r2, r3
 800cf60:	460b      	mov	r3, r1
 800cf62:	cb03      	ldmia	r3!, {r0, r1}
 800cf64:	6010      	str	r0, [r2, #0]
 800cf66:	6051      	str	r1, [r2, #4]
			strcpy(p->moveNumbers,"6,10,14,18");
 800cf68:	687b      	ldr	r3, [r7, #4]
 800cf6a:	3304      	adds	r3, #4
 800cf6c:	49a1      	ldr	r1, [pc, #644]	; (800d1f4 <problem_fetch+0xbed4>)
 800cf6e:	461a      	mov	r2, r3
 800cf70:	460b      	mov	r3, r1
 800cf72:	cb03      	ldmia	r3!, {r0, r1}
 800cf74:	6010      	str	r0, [r2, #0]
 800cf76:	6051      	str	r1, [r2, #4]
 800cf78:	8819      	ldrh	r1, [r3, #0]
 800cf7a:	789b      	ldrb	r3, [r3, #2]
 800cf7c:	8111      	strh	r1, [r2, #8]
 800cf7e:	7293      	strb	r3, [r2, #10]
			strcpy(p->startFinish, "s,d,d,e");
 800cf80:	687b      	ldr	r3, [r7, #4]
 800cf82:	33d8      	adds	r3, #216	; 0xd8
 800cf84:	499c      	ldr	r1, [pc, #624]	; (800d1f8 <problem_fetch+0xbed8>)
 800cf86:	461a      	mov	r2, r3
 800cf88:	460b      	mov	r3, r1
 800cf8a:	cb03      	ldmia	r3!, {r0, r1}
 800cf8c:	6010      	str	r0, [r2, #0]
 800cf8e:	6051      	str	r1, [r2, #4]
			strcpy(p->grade, "6C+");
 800cf90:	687b      	ldr	r3, [r7, #4]
 800cf92:	33cc      	adds	r3, #204	; 0xcc
 800cf94:	4a99      	ldr	r2, [pc, #612]	; (800d1fc <problem_fetch+0xbedc>)
 800cf96:	6810      	ldr	r0, [r2, #0]
 800cf98:	6018      	str	r0, [r3, #0]
			break;
 800cf9a:	f00d bf07 	b.w	801adac <problem_fetch+0x19a8c>
		case 419 :
			strcpy(p->name,"BAMBA");
 800cf9e:	687b      	ldr	r3, [r7, #4]
 800cfa0:	337c      	adds	r3, #124	; 0x7c
 800cfa2:	4a97      	ldr	r2, [pc, #604]	; (800d200 <problem_fetch+0xbee0>)
 800cfa4:	6810      	ldr	r0, [r2, #0]
 800cfa6:	6018      	str	r0, [r3, #0]
 800cfa8:	8892      	ldrh	r2, [r2, #4]
 800cfaa:	809a      	strh	r2, [r3, #4]
			p->moveSize = 5;
 800cfac:	687b      	ldr	r3, [r7, #4]
 800cfae:	2205      	movs	r2, #5
 800cfb0:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"J,I,I,E,D");
 800cfb2:	687b      	ldr	r3, [r7, #4]
 800cfb4:	3340      	adds	r3, #64	; 0x40
 800cfb6:	4993      	ldr	r1, [pc, #588]	; (800d204 <problem_fetch+0xbee4>)
 800cfb8:	461a      	mov	r2, r3
 800cfba:	460b      	mov	r3, r1
 800cfbc:	cb03      	ldmia	r3!, {r0, r1}
 800cfbe:	6010      	str	r0, [r2, #0]
 800cfc0:	6051      	str	r1, [r2, #4]
 800cfc2:	881b      	ldrh	r3, [r3, #0]
 800cfc4:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"5,10,14,16,18");
 800cfc6:	687b      	ldr	r3, [r7, #4]
 800cfc8:	3304      	adds	r3, #4
 800cfca:	4a8f      	ldr	r2, [pc, #572]	; (800d208 <problem_fetch+0xbee8>)
 800cfcc:	461c      	mov	r4, r3
 800cfce:	4613      	mov	r3, r2
 800cfd0:	cb07      	ldmia	r3!, {r0, r1, r2}
 800cfd2:	6020      	str	r0, [r4, #0]
 800cfd4:	6061      	str	r1, [r4, #4]
 800cfd6:	60a2      	str	r2, [r4, #8]
 800cfd8:	881b      	ldrh	r3, [r3, #0]
 800cfda:	81a3      	strh	r3, [r4, #12]
			strcpy(p->startFinish, "s,d,d,d,e");
 800cfdc:	687b      	ldr	r3, [r7, #4]
 800cfde:	33d8      	adds	r3, #216	; 0xd8
 800cfe0:	498a      	ldr	r1, [pc, #552]	; (800d20c <problem_fetch+0xbeec>)
 800cfe2:	461a      	mov	r2, r3
 800cfe4:	460b      	mov	r3, r1
 800cfe6:	cb03      	ldmia	r3!, {r0, r1}
 800cfe8:	6010      	str	r0, [r2, #0]
 800cfea:	6051      	str	r1, [r2, #4]
 800cfec:	881b      	ldrh	r3, [r3, #0]
 800cfee:	8113      	strh	r3, [r2, #8]
			strcpy(p->grade, "6C");
 800cff0:	687b      	ldr	r3, [r7, #4]
 800cff2:	33cc      	adds	r3, #204	; 0xcc
 800cff4:	4a86      	ldr	r2, [pc, #536]	; (800d210 <problem_fetch+0xbef0>)
 800cff6:	8811      	ldrh	r1, [r2, #0]
 800cff8:	7892      	ldrb	r2, [r2, #2]
 800cffa:	8019      	strh	r1, [r3, #0]
 800cffc:	709a      	strb	r2, [r3, #2]
			break;
 800cffe:	f00d bed5 	b.w	801adac <problem_fetch+0x19a8c>
		case 42 :
			strcpy(p->name,"SUBMARINE");
 800d002:	687b      	ldr	r3, [r7, #4]
 800d004:	337c      	adds	r3, #124	; 0x7c
 800d006:	4983      	ldr	r1, [pc, #524]	; (800d214 <problem_fetch+0xbef4>)
 800d008:	461a      	mov	r2, r3
 800d00a:	460b      	mov	r3, r1
 800d00c:	cb03      	ldmia	r3!, {r0, r1}
 800d00e:	6010      	str	r0, [r2, #0]
 800d010:	6051      	str	r1, [r2, #4]
 800d012:	881b      	ldrh	r3, [r3, #0]
 800d014:	8113      	strh	r3, [r2, #8]
			p->moveSize = 6;
 800d016:	687b      	ldr	r3, [r7, #4]
 800d018:	2206      	movs	r2, #6
 800d01a:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"G,C,E,E,I,I");
 800d01c:	687b      	ldr	r3, [r7, #4]
 800d01e:	3340      	adds	r3, #64	; 0x40
 800d020:	4a7d      	ldr	r2, [pc, #500]	; (800d218 <problem_fetch+0xbef8>)
 800d022:	461c      	mov	r4, r3
 800d024:	4613      	mov	r3, r2
 800d026:	cb07      	ldmia	r3!, {r0, r1, r2}
 800d028:	6020      	str	r0, [r4, #0]
 800d02a:	6061      	str	r1, [r4, #4]
 800d02c:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,8,12,14,15,18");
 800d02e:	687b      	ldr	r3, [r7, #4]
 800d030:	3304      	adds	r3, #4
 800d032:	4a7a      	ldr	r2, [pc, #488]	; (800d21c <problem_fetch+0xbefc>)
 800d034:	461c      	mov	r4, r3
 800d036:	4615      	mov	r5, r2
 800d038:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d03a:	6020      	str	r0, [r4, #0]
 800d03c:	6061      	str	r1, [r4, #4]
 800d03e:	60a2      	str	r2, [r4, #8]
 800d040:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish, "s,d,d,d,d,e");
 800d042:	687b      	ldr	r3, [r7, #4]
 800d044:	33d8      	adds	r3, #216	; 0xd8
 800d046:	4a76      	ldr	r2, [pc, #472]	; (800d220 <problem_fetch+0xbf00>)
 800d048:	461c      	mov	r4, r3
 800d04a:	4613      	mov	r3, r2
 800d04c:	cb07      	ldmia	r3!, {r0, r1, r2}
 800d04e:	6020      	str	r0, [r4, #0]
 800d050:	6061      	str	r1, [r4, #4]
 800d052:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade, "7B+");
 800d054:	687b      	ldr	r3, [r7, #4]
 800d056:	33cc      	adds	r3, #204	; 0xcc
 800d058:	4a72      	ldr	r2, [pc, #456]	; (800d224 <problem_fetch+0xbf04>)
 800d05a:	6810      	ldr	r0, [r2, #0]
 800d05c:	6018      	str	r0, [r3, #0]
			break;
 800d05e:	f00d bea5 	b.w	801adac <problem_fetch+0x19a8c>
		case 420 :
			strcpy(p->name,"JUMP MAN");
 800d062:	687b      	ldr	r3, [r7, #4]
 800d064:	337c      	adds	r3, #124	; 0x7c
 800d066:	4970      	ldr	r1, [pc, #448]	; (800d228 <problem_fetch+0xbf08>)
 800d068:	461a      	mov	r2, r3
 800d06a:	460b      	mov	r3, r1
 800d06c:	cb03      	ldmia	r3!, {r0, r1}
 800d06e:	6010      	str	r0, [r2, #0]
 800d070:	6051      	str	r1, [r2, #4]
 800d072:	781b      	ldrb	r3, [r3, #0]
 800d074:	7213      	strb	r3, [r2, #8]
			p->moveSize = 6;
 800d076:	687b      	ldr	r3, [r7, #4]
 800d078:	2206      	movs	r2, #6
 800d07a:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"J,I,I,G,D,D");
 800d07c:	687b      	ldr	r3, [r7, #4]
 800d07e:	3340      	adds	r3, #64	; 0x40
 800d080:	4a6a      	ldr	r2, [pc, #424]	; (800d22c <problem_fetch+0xbf0c>)
 800d082:	461c      	mov	r4, r3
 800d084:	4613      	mov	r3, r2
 800d086:	cb07      	ldmia	r3!, {r0, r1, r2}
 800d088:	6020      	str	r0, [r4, #0]
 800d08a:	6061      	str	r1, [r4, #4]
 800d08c:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,10,9,15,15,18");
 800d08e:	687b      	ldr	r3, [r7, #4]
 800d090:	3304      	adds	r3, #4
 800d092:	4a67      	ldr	r2, [pc, #412]	; (800d230 <problem_fetch+0xbf10>)
 800d094:	461c      	mov	r4, r3
 800d096:	4615      	mov	r5, r2
 800d098:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d09a:	6020      	str	r0, [r4, #0]
 800d09c:	6061      	str	r1, [r4, #4]
 800d09e:	60a2      	str	r2, [r4, #8]
 800d0a0:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish, "s,d,d,d,d,e");
 800d0a2:	687b      	ldr	r3, [r7, #4]
 800d0a4:	33d8      	adds	r3, #216	; 0xd8
 800d0a6:	4a5e      	ldr	r2, [pc, #376]	; (800d220 <problem_fetch+0xbf00>)
 800d0a8:	461c      	mov	r4, r3
 800d0aa:	4613      	mov	r3, r2
 800d0ac:	cb07      	ldmia	r3!, {r0, r1, r2}
 800d0ae:	6020      	str	r0, [r4, #0]
 800d0b0:	6061      	str	r1, [r4, #4]
 800d0b2:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade, "7B+");
 800d0b4:	687b      	ldr	r3, [r7, #4]
 800d0b6:	33cc      	adds	r3, #204	; 0xcc
 800d0b8:	4a5a      	ldr	r2, [pc, #360]	; (800d224 <problem_fetch+0xbf04>)
 800d0ba:	6810      	ldr	r0, [r2, #0]
 800d0bc:	6018      	str	r0, [r3, #0]
			break;
 800d0be:	f00d be75 	b.w	801adac <problem_fetch+0x19a8c>
		case 421 :
			strcpy(p->name,"JUST JUMP AND PINCH");
 800d0c2:	687b      	ldr	r3, [r7, #4]
 800d0c4:	337c      	adds	r3, #124	; 0x7c
 800d0c6:	4a5b      	ldr	r2, [pc, #364]	; (800d234 <problem_fetch+0xbf14>)
 800d0c8:	461d      	mov	r5, r3
 800d0ca:	4614      	mov	r4, r2
 800d0cc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d0ce:	6028      	str	r0, [r5, #0]
 800d0d0:	6069      	str	r1, [r5, #4]
 800d0d2:	60aa      	str	r2, [r5, #8]
 800d0d4:	60eb      	str	r3, [r5, #12]
 800d0d6:	6820      	ldr	r0, [r4, #0]
 800d0d8:	6128      	str	r0, [r5, #16]
			p->moveSize = 5;
 800d0da:	687b      	ldr	r3, [r7, #4]
 800d0dc:	2205      	movs	r2, #5
 800d0de:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"E,H,F,A,D");
 800d0e0:	687b      	ldr	r3, [r7, #4]
 800d0e2:	3340      	adds	r3, #64	; 0x40
 800d0e4:	4954      	ldr	r1, [pc, #336]	; (800d238 <problem_fetch+0xbf18>)
 800d0e6:	461a      	mov	r2, r3
 800d0e8:	460b      	mov	r3, r1
 800d0ea:	cb03      	ldmia	r3!, {r0, r1}
 800d0ec:	6010      	str	r0, [r2, #0]
 800d0ee:	6051      	str	r1, [r2, #4]
 800d0f0:	881b      	ldrh	r3, [r3, #0]
 800d0f2:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"6,5,11,14,18");
 800d0f4:	687b      	ldr	r3, [r7, #4]
 800d0f6:	3304      	adds	r3, #4
 800d0f8:	4a50      	ldr	r2, [pc, #320]	; (800d23c <problem_fetch+0xbf1c>)
 800d0fa:	461c      	mov	r4, r3
 800d0fc:	4613      	mov	r3, r2
 800d0fe:	cb07      	ldmia	r3!, {r0, r1, r2}
 800d100:	6020      	str	r0, [r4, #0]
 800d102:	6061      	str	r1, [r4, #4]
 800d104:	60a2      	str	r2, [r4, #8]
 800d106:	781b      	ldrb	r3, [r3, #0]
 800d108:	7323      	strb	r3, [r4, #12]
			strcpy(p->startFinish, "s,s,d,d,e");
 800d10a:	687b      	ldr	r3, [r7, #4]
 800d10c:	33d8      	adds	r3, #216	; 0xd8
 800d10e:	494c      	ldr	r1, [pc, #304]	; (800d240 <problem_fetch+0xbf20>)
 800d110:	461a      	mov	r2, r3
 800d112:	460b      	mov	r3, r1
 800d114:	cb03      	ldmia	r3!, {r0, r1}
 800d116:	6010      	str	r0, [r2, #0]
 800d118:	6051      	str	r1, [r2, #4]
 800d11a:	881b      	ldrh	r3, [r3, #0]
 800d11c:	8113      	strh	r3, [r2, #8]
			strcpy(p->grade, "7B+");
 800d11e:	687b      	ldr	r3, [r7, #4]
 800d120:	33cc      	adds	r3, #204	; 0xcc
 800d122:	4a40      	ldr	r2, [pc, #256]	; (800d224 <problem_fetch+0xbf04>)
 800d124:	6810      	ldr	r0, [r2, #0]
 800d126:	6018      	str	r0, [r3, #0]
			break;
 800d128:	f00d be40 	b.w	801adac <problem_fetch+0x19a8c>
		case 422 :
			strcpy(p->name,"REACHY");
 800d12c:	687b      	ldr	r3, [r7, #4]
 800d12e:	337c      	adds	r3, #124	; 0x7c
 800d130:	4a44      	ldr	r2, [pc, #272]	; (800d244 <problem_fetch+0xbf24>)
 800d132:	6810      	ldr	r0, [r2, #0]
 800d134:	6018      	str	r0, [r3, #0]
 800d136:	8891      	ldrh	r1, [r2, #4]
 800d138:	7992      	ldrb	r2, [r2, #6]
 800d13a:	8099      	strh	r1, [r3, #4]
 800d13c:	719a      	strb	r2, [r3, #6]
			p->moveSize = 6;
 800d13e:	687b      	ldr	r3, [r7, #4]
 800d140:	2206      	movs	r2, #6
 800d142:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"G,E,H,D,D,A");
 800d144:	687b      	ldr	r3, [r7, #4]
 800d146:	3340      	adds	r3, #64	; 0x40
 800d148:	4a3f      	ldr	r2, [pc, #252]	; (800d248 <problem_fetch+0xbf28>)
 800d14a:	461c      	mov	r4, r3
 800d14c:	4613      	mov	r3, r2
 800d14e:	cb07      	ldmia	r3!, {r0, r1, r2}
 800d150:	6020      	str	r0, [r4, #0]
 800d152:	6061      	str	r1, [r4, #4]
 800d154:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,6,10,11,15,18");
 800d156:	687b      	ldr	r3, [r7, #4]
 800d158:	3304      	adds	r3, #4
 800d15a:	4a3c      	ldr	r2, [pc, #240]	; (800d24c <problem_fetch+0xbf2c>)
 800d15c:	461c      	mov	r4, r3
 800d15e:	4615      	mov	r5, r2
 800d160:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d162:	6020      	str	r0, [r4, #0]
 800d164:	6061      	str	r1, [r4, #4]
 800d166:	60a2      	str	r2, [r4, #8]
 800d168:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish, "s,s,d,d,d,e");
 800d16a:	687b      	ldr	r3, [r7, #4]
 800d16c:	33d8      	adds	r3, #216	; 0xd8
 800d16e:	4a38      	ldr	r2, [pc, #224]	; (800d250 <problem_fetch+0xbf30>)
 800d170:	461c      	mov	r4, r3
 800d172:	4613      	mov	r3, r2
 800d174:	cb07      	ldmia	r3!, {r0, r1, r2}
 800d176:	6020      	str	r0, [r4, #0]
 800d178:	6061      	str	r1, [r4, #4]
 800d17a:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade, "6B+");
 800d17c:	687b      	ldr	r3, [r7, #4]
 800d17e:	33cc      	adds	r3, #204	; 0xcc
 800d180:	4a34      	ldr	r2, [pc, #208]	; (800d254 <problem_fetch+0xbf34>)
 800d182:	6810      	ldr	r0, [r2, #0]
 800d184:	6018      	str	r0, [r3, #0]
			break;
 800d186:	f00d be11 	b.w	801adac <problem_fetch+0x19a8c>
		case 423 :
			strcpy(p->name,"POLARIS");
 800d18a:	687b      	ldr	r3, [r7, #4]
 800d18c:	337c      	adds	r3, #124	; 0x7c
 800d18e:	4932      	ldr	r1, [pc, #200]	; (800d258 <problem_fetch+0xbf38>)
 800d190:	461a      	mov	r2, r3
 800d192:	460b      	mov	r3, r1
 800d194:	cb03      	ldmia	r3!, {r0, r1}
 800d196:	6010      	str	r0, [r2, #0]
 800d198:	6051      	str	r1, [r2, #4]
			p->moveSize = 6;
 800d19a:	687b      	ldr	r3, [r7, #4]
 800d19c:	2206      	movs	r2, #6
 800d19e:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"G,H,C,F,A,D");
 800d1a0:	687b      	ldr	r3, [r7, #4]
 800d1a2:	3340      	adds	r3, #64	; 0x40
 800d1a4:	4a2d      	ldr	r2, [pc, #180]	; (800d25c <problem_fetch+0xbf3c>)
 800d1a6:	461c      	mov	r4, r3
 800d1a8:	4613      	mov	r3, r2
 800d1aa:	cb07      	ldmia	r3!, {r0, r1, r2}
 800d1ac:	6020      	str	r0, [r4, #0]
 800d1ae:	6061      	str	r1, [r4, #4]
 800d1b0:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,8,8,11,14,18");
 800d1b2:	687b      	ldr	r3, [r7, #4]
 800d1b4:	3304      	adds	r3, #4
 800d1b6:	4a2a      	ldr	r2, [pc, #168]	; (800d260 <problem_fetch+0xbf40>)
 800d1b8:	461c      	mov	r4, r3
 800d1ba:	4613      	mov	r3, r2
 800d1bc:	cb07      	ldmia	r3!, {r0, r1, r2}
 800d1be:	6020      	str	r0, [r4, #0]
 800d1c0:	6061      	str	r1, [r4, #4]
 800d1c2:	60a2      	str	r2, [r4, #8]
 800d1c4:	881a      	ldrh	r2, [r3, #0]
 800d1c6:	789b      	ldrb	r3, [r3, #2]
 800d1c8:	81a2      	strh	r2, [r4, #12]
 800d1ca:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish, "s,d,d,d,d,e");
 800d1cc:	687b      	ldr	r3, [r7, #4]
 800d1ce:	33d8      	adds	r3, #216	; 0xd8
 800d1d0:	4a13      	ldr	r2, [pc, #76]	; (800d220 <problem_fetch+0xbf00>)
 800d1d2:	461c      	mov	r4, r3
 800d1d4:	4613      	mov	r3, r2
 800d1d6:	cb07      	ldmia	r3!, {r0, r1, r2}
 800d1d8:	6020      	str	r0, [r4, #0]
 800d1da:	6061      	str	r1, [r4, #4]
 800d1dc:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade, "7A+");
 800d1de:	687b      	ldr	r3, [r7, #4]
 800d1e0:	33cc      	adds	r3, #204	; 0xcc
 800d1e2:	4a20      	ldr	r2, [pc, #128]	; (800d264 <problem_fetch+0xbf44>)
 800d1e4:	6810      	ldr	r0, [r2, #0]
 800d1e6:	6018      	str	r0, [r3, #0]
			break;
 800d1e8:	f00d bde0 	b.w	801adac <problem_fetch+0x19a8c>
 800d1ec:	0802558c 	.word	0x0802558c
 800d1f0:	08025590 	.word	0x08025590
 800d1f4:	08022690 	.word	0x08022690
 800d1f8:	08022028 	.word	0x08022028
 800d1fc:	080213a8 	.word	0x080213a8
 800d200:	08025598 	.word	0x08025598
 800d204:	080255a0 	.word	0x080255a0
 800d208:	080255ac 	.word	0x080255ac
 800d20c:	08021320 	.word	0x08021320
 800d210:	08021370 	.word	0x08021370
 800d214:	080255bc 	.word	0x080255bc
 800d218:	08021fec 	.word	0x08021fec
 800d21c:	080255c8 	.word	0x080255c8
 800d220:	0802139c 	.word	0x0802139c
 800d224:	08021848 	.word	0x08021848
 800d228:	080255d8 	.word	0x080255d8
 800d22c:	080255e4 	.word	0x080255e4
 800d230:	080255f0 	.word	0x080255f0
 800d234:	08025600 	.word	0x08025600
 800d238:	08025614 	.word	0x08025614
 800d23c:	08025620 	.word	0x08025620
 800d240:	080221c8 	.word	0x080221c8
 800d244:	08025630 	.word	0x08025630
 800d248:	08025638 	.word	0x08025638
 800d24c:	08025644 	.word	0x08025644
 800d250:	08021910 	.word	0x08021910
 800d254:	080212b0 	.word	0x080212b0
 800d258:	08025654 	.word	0x08025654
 800d25c:	0802565c 	.word	0x0802565c
 800d260:	08025668 	.word	0x08025668
 800d264:	08021424 	.word	0x08021424
		case 424 :
			strcpy(p->name,"HOLE IN FOUR");
 800d268:	687b      	ldr	r3, [r7, #4]
 800d26a:	337c      	adds	r3, #124	; 0x7c
 800d26c:	4aa8      	ldr	r2, [pc, #672]	; (800d510 <problem_fetch+0xc1f0>)
 800d26e:	461c      	mov	r4, r3
 800d270:	4613      	mov	r3, r2
 800d272:	cb07      	ldmia	r3!, {r0, r1, r2}
 800d274:	6020      	str	r0, [r4, #0]
 800d276:	6061      	str	r1, [r4, #4]
 800d278:	60a2      	str	r2, [r4, #8]
 800d27a:	781b      	ldrb	r3, [r3, #0]
 800d27c:	7323      	strb	r3, [r4, #12]
			p->moveSize = 5;
 800d27e:	687b      	ldr	r3, [r7, #4]
 800d280:	2205      	movs	r2, #5
 800d282:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"E,G,B,D,A");
 800d284:	687b      	ldr	r3, [r7, #4]
 800d286:	3340      	adds	r3, #64	; 0x40
 800d288:	49a2      	ldr	r1, [pc, #648]	; (800d514 <problem_fetch+0xc1f4>)
 800d28a:	461a      	mov	r2, r3
 800d28c:	460b      	mov	r3, r1
 800d28e:	cb03      	ldmia	r3!, {r0, r1}
 800d290:	6010      	str	r0, [r2, #0]
 800d292:	6051      	str	r1, [r2, #4]
 800d294:	881b      	ldrh	r3, [r3, #0]
 800d296:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"6,10,10,15,18");
 800d298:	687b      	ldr	r3, [r7, #4]
 800d29a:	3304      	adds	r3, #4
 800d29c:	4a9e      	ldr	r2, [pc, #632]	; (800d518 <problem_fetch+0xc1f8>)
 800d29e:	461c      	mov	r4, r3
 800d2a0:	4613      	mov	r3, r2
 800d2a2:	cb07      	ldmia	r3!, {r0, r1, r2}
 800d2a4:	6020      	str	r0, [r4, #0]
 800d2a6:	6061      	str	r1, [r4, #4]
 800d2a8:	60a2      	str	r2, [r4, #8]
 800d2aa:	881b      	ldrh	r3, [r3, #0]
 800d2ac:	81a3      	strh	r3, [r4, #12]
			strcpy(p->startFinish, "s,d,d,d,e");
 800d2ae:	687b      	ldr	r3, [r7, #4]
 800d2b0:	33d8      	adds	r3, #216	; 0xd8
 800d2b2:	499a      	ldr	r1, [pc, #616]	; (800d51c <problem_fetch+0xc1fc>)
 800d2b4:	461a      	mov	r2, r3
 800d2b6:	460b      	mov	r3, r1
 800d2b8:	cb03      	ldmia	r3!, {r0, r1}
 800d2ba:	6010      	str	r0, [r2, #0]
 800d2bc:	6051      	str	r1, [r2, #4]
 800d2be:	881b      	ldrh	r3, [r3, #0]
 800d2c0:	8113      	strh	r3, [r2, #8]
			strcpy(p->grade, "7A+");
 800d2c2:	687b      	ldr	r3, [r7, #4]
 800d2c4:	33cc      	adds	r3, #204	; 0xcc
 800d2c6:	4a96      	ldr	r2, [pc, #600]	; (800d520 <problem_fetch+0xc200>)
 800d2c8:	6810      	ldr	r0, [r2, #0]
 800d2ca:	6018      	str	r0, [r3, #0]
			break;
 800d2cc:	f00d bd6e 	b.w	801adac <problem_fetch+0x19a8c>
		case 425 :
			strcpy(p->name,"BLACK PANTHER");
 800d2d0:	687b      	ldr	r3, [r7, #4]
 800d2d2:	337c      	adds	r3, #124	; 0x7c
 800d2d4:	4a93      	ldr	r2, [pc, #588]	; (800d524 <problem_fetch+0xc204>)
 800d2d6:	461c      	mov	r4, r3
 800d2d8:	4613      	mov	r3, r2
 800d2da:	cb07      	ldmia	r3!, {r0, r1, r2}
 800d2dc:	6020      	str	r0, [r4, #0]
 800d2de:	6061      	str	r1, [r4, #4]
 800d2e0:	60a2      	str	r2, [r4, #8]
 800d2e2:	881b      	ldrh	r3, [r3, #0]
 800d2e4:	81a3      	strh	r3, [r4, #12]
			p->moveSize = 13;
 800d2e6:	687b      	ldr	r3, [r7, #4]
 800d2e8:	220d      	movs	r2, #13
 800d2ea:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"G,H,E,G,C,B,H,C,D,D,F,G,A");
 800d2ec:	687b      	ldr	r3, [r7, #4]
 800d2ee:	3340      	adds	r3, #64	; 0x40
 800d2f0:	4a8d      	ldr	r2, [pc, #564]	; (800d528 <problem_fetch+0xc208>)
 800d2f2:	461d      	mov	r5, r3
 800d2f4:	4614      	mov	r4, r2
 800d2f6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d2f8:	6028      	str	r0, [r5, #0]
 800d2fa:	6069      	str	r1, [r5, #4]
 800d2fc:	60aa      	str	r2, [r5, #8]
 800d2fe:	60eb      	str	r3, [r5, #12]
 800d300:	cc03      	ldmia	r4!, {r0, r1}
 800d302:	6128      	str	r0, [r5, #16]
 800d304:	6169      	str	r1, [r5, #20]
 800d306:	8823      	ldrh	r3, [r4, #0]
 800d308:	832b      	strh	r3, [r5, #24]
			strcpy(p->moveNumbers,"4,5,8,9,16,15,8,13,11,15,11,6,18");
 800d30a:	687b      	ldr	r3, [r7, #4]
 800d30c:	3304      	adds	r3, #4
 800d30e:	4a87      	ldr	r2, [pc, #540]	; (800d52c <problem_fetch+0xc20c>)
 800d310:	4614      	mov	r4, r2
 800d312:	469c      	mov	ip, r3
 800d314:	f104 0e20 	add.w	lr, r4, #32
 800d318:	4665      	mov	r5, ip
 800d31a:	4626      	mov	r6, r4
 800d31c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800d31e:	6028      	str	r0, [r5, #0]
 800d320:	6069      	str	r1, [r5, #4]
 800d322:	60aa      	str	r2, [r5, #8]
 800d324:	60eb      	str	r3, [r5, #12]
 800d326:	3410      	adds	r4, #16
 800d328:	f10c 0c10 	add.w	ip, ip, #16
 800d32c:	4574      	cmp	r4, lr
 800d32e:	d1f3      	bne.n	800d318 <problem_fetch+0xbff8>
 800d330:	4663      	mov	r3, ip
 800d332:	4622      	mov	r2, r4
 800d334:	7812      	ldrb	r2, [r2, #0]
 800d336:	701a      	strb	r2, [r3, #0]
			strcpy(p->startFinish, "s,s,d,d,d,d,d,d,d,d,d,d,e");
 800d338:	687b      	ldr	r3, [r7, #4]
 800d33a:	33d8      	adds	r3, #216	; 0xd8
 800d33c:	4a7c      	ldr	r2, [pc, #496]	; (800d530 <problem_fetch+0xc210>)
 800d33e:	461d      	mov	r5, r3
 800d340:	4614      	mov	r4, r2
 800d342:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d344:	6028      	str	r0, [r5, #0]
 800d346:	6069      	str	r1, [r5, #4]
 800d348:	60aa      	str	r2, [r5, #8]
 800d34a:	60eb      	str	r3, [r5, #12]
 800d34c:	cc03      	ldmia	r4!, {r0, r1}
 800d34e:	6128      	str	r0, [r5, #16]
 800d350:	6169      	str	r1, [r5, #20]
 800d352:	8823      	ldrh	r3, [r4, #0]
 800d354:	832b      	strh	r3, [r5, #24]
			strcpy(p->grade, "6B+");
 800d356:	687b      	ldr	r3, [r7, #4]
 800d358:	33cc      	adds	r3, #204	; 0xcc
 800d35a:	4a76      	ldr	r2, [pc, #472]	; (800d534 <problem_fetch+0xc214>)
 800d35c:	6810      	ldr	r0, [r2, #0]
 800d35e:	6018      	str	r0, [r3, #0]
			break;
 800d360:	f00d bd24 	b.w	801adac <problem_fetch+0x19a8c>
		case 426 :
			strcpy(p->name,"BIROBIDJAN");
 800d364:	687b      	ldr	r3, [r7, #4]
 800d366:	337c      	adds	r3, #124	; 0x7c
 800d368:	4973      	ldr	r1, [pc, #460]	; (800d538 <problem_fetch+0xc218>)
 800d36a:	461a      	mov	r2, r3
 800d36c:	460b      	mov	r3, r1
 800d36e:	cb03      	ldmia	r3!, {r0, r1}
 800d370:	6010      	str	r0, [r2, #0]
 800d372:	6051      	str	r1, [r2, #4]
 800d374:	8819      	ldrh	r1, [r3, #0]
 800d376:	789b      	ldrb	r3, [r3, #2]
 800d378:	8111      	strh	r1, [r2, #8]
 800d37a:	7293      	strb	r3, [r2, #10]
			p->moveSize = 6;
 800d37c:	687b      	ldr	r3, [r7, #4]
 800d37e:	2206      	movs	r2, #6
 800d380:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"G,E,E,C,E,A");
 800d382:	687b      	ldr	r3, [r7, #4]
 800d384:	3340      	adds	r3, #64	; 0x40
 800d386:	4a6d      	ldr	r2, [pc, #436]	; (800d53c <problem_fetch+0xc21c>)
 800d388:	461c      	mov	r4, r3
 800d38a:	4613      	mov	r3, r2
 800d38c:	cb07      	ldmia	r3!, {r0, r1, r2}
 800d38e:	6020      	str	r0, [r4, #0]
 800d390:	6061      	str	r1, [r4, #4]
 800d392:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,8,9,13,16,18");
 800d394:	687b      	ldr	r3, [r7, #4]
 800d396:	3304      	adds	r3, #4
 800d398:	4a69      	ldr	r2, [pc, #420]	; (800d540 <problem_fetch+0xc220>)
 800d39a:	461c      	mov	r4, r3
 800d39c:	4613      	mov	r3, r2
 800d39e:	cb07      	ldmia	r3!, {r0, r1, r2}
 800d3a0:	6020      	str	r0, [r4, #0]
 800d3a2:	6061      	str	r1, [r4, #4]
 800d3a4:	60a2      	str	r2, [r4, #8]
 800d3a6:	881a      	ldrh	r2, [r3, #0]
 800d3a8:	789b      	ldrb	r3, [r3, #2]
 800d3aa:	81a2      	strh	r2, [r4, #12]
 800d3ac:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish, "s,d,d,d,d,e");
 800d3ae:	687b      	ldr	r3, [r7, #4]
 800d3b0:	33d8      	adds	r3, #216	; 0xd8
 800d3b2:	4a64      	ldr	r2, [pc, #400]	; (800d544 <problem_fetch+0xc224>)
 800d3b4:	461c      	mov	r4, r3
 800d3b6:	4613      	mov	r3, r2
 800d3b8:	cb07      	ldmia	r3!, {r0, r1, r2}
 800d3ba:	6020      	str	r0, [r4, #0]
 800d3bc:	6061      	str	r1, [r4, #4]
 800d3be:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade, "6C+");
 800d3c0:	687b      	ldr	r3, [r7, #4]
 800d3c2:	33cc      	adds	r3, #204	; 0xcc
 800d3c4:	4a60      	ldr	r2, [pc, #384]	; (800d548 <problem_fetch+0xc228>)
 800d3c6:	6810      	ldr	r0, [r2, #0]
 800d3c8:	6018      	str	r0, [r3, #0]
			break;
 800d3ca:	f00d bcef 	b.w	801adac <problem_fetch+0x19a8c>
		case 427 :
			strcpy(p->name,"MOLOTOV COCKTEASE");
 800d3ce:	687b      	ldr	r3, [r7, #4]
 800d3d0:	337c      	adds	r3, #124	; 0x7c
 800d3d2:	4a5e      	ldr	r2, [pc, #376]	; (800d54c <problem_fetch+0xc22c>)
 800d3d4:	461d      	mov	r5, r3
 800d3d6:	4614      	mov	r4, r2
 800d3d8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d3da:	6028      	str	r0, [r5, #0]
 800d3dc:	6069      	str	r1, [r5, #4]
 800d3de:	60aa      	str	r2, [r5, #8]
 800d3e0:	60eb      	str	r3, [r5, #12]
 800d3e2:	8823      	ldrh	r3, [r4, #0]
 800d3e4:	822b      	strh	r3, [r5, #16]
			p->moveSize = 6;
 800d3e6:	687b      	ldr	r3, [r7, #4]
 800d3e8:	2206      	movs	r2, #6
 800d3ea:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"E,G,I,G,K,I");
 800d3ec:	687b      	ldr	r3, [r7, #4]
 800d3ee:	3340      	adds	r3, #64	; 0x40
 800d3f0:	4a57      	ldr	r2, [pc, #348]	; (800d550 <problem_fetch+0xc230>)
 800d3f2:	461c      	mov	r4, r3
 800d3f4:	4613      	mov	r3, r2
 800d3f6:	cb07      	ldmia	r3!, {r0, r1, r2}
 800d3f8:	6020      	str	r0, [r4, #0]
 800d3fa:	6061      	str	r1, [r4, #4]
 800d3fc:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"6,9,7,14,14,18");
 800d3fe:	687b      	ldr	r3, [r7, #4]
 800d400:	3304      	adds	r3, #4
 800d402:	4a54      	ldr	r2, [pc, #336]	; (800d554 <problem_fetch+0xc234>)
 800d404:	461c      	mov	r4, r3
 800d406:	4613      	mov	r3, r2
 800d408:	cb07      	ldmia	r3!, {r0, r1, r2}
 800d40a:	6020      	str	r0, [r4, #0]
 800d40c:	6061      	str	r1, [r4, #4]
 800d40e:	60a2      	str	r2, [r4, #8]
 800d410:	881a      	ldrh	r2, [r3, #0]
 800d412:	789b      	ldrb	r3, [r3, #2]
 800d414:	81a2      	strh	r2, [r4, #12]
 800d416:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish, "s,d,d,d,d,e");
 800d418:	687b      	ldr	r3, [r7, #4]
 800d41a:	33d8      	adds	r3, #216	; 0xd8
 800d41c:	4a49      	ldr	r2, [pc, #292]	; (800d544 <problem_fetch+0xc224>)
 800d41e:	461c      	mov	r4, r3
 800d420:	4613      	mov	r3, r2
 800d422:	cb07      	ldmia	r3!, {r0, r1, r2}
 800d424:	6020      	str	r0, [r4, #0]
 800d426:	6061      	str	r1, [r4, #4]
 800d428:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade, "7C+");
 800d42a:	687b      	ldr	r3, [r7, #4]
 800d42c:	33cc      	adds	r3, #204	; 0xcc
 800d42e:	4a4a      	ldr	r2, [pc, #296]	; (800d558 <problem_fetch+0xc238>)
 800d430:	6810      	ldr	r0, [r2, #0]
 800d432:	6018      	str	r0, [r3, #0]
			break;
 800d434:	f00d bcba 	b.w	801adac <problem_fetch+0x19a8c>
		case 428 :
			strcpy(p->name,"LIZARD 3");
 800d438:	687b      	ldr	r3, [r7, #4]
 800d43a:	337c      	adds	r3, #124	; 0x7c
 800d43c:	4947      	ldr	r1, [pc, #284]	; (800d55c <problem_fetch+0xc23c>)
 800d43e:	461a      	mov	r2, r3
 800d440:	460b      	mov	r3, r1
 800d442:	cb03      	ldmia	r3!, {r0, r1}
 800d444:	6010      	str	r0, [r2, #0]
 800d446:	6051      	str	r1, [r2, #4]
 800d448:	781b      	ldrb	r3, [r3, #0]
 800d44a:	7213      	strb	r3, [r2, #8]
			p->moveSize = 12;
 800d44c:	687b      	ldr	r3, [r7, #4]
 800d44e:	220c      	movs	r2, #12
 800d450:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"G,H,J,I,H,F,E,C,D,B,A,A");
 800d452:	687b      	ldr	r3, [r7, #4]
 800d454:	3340      	adds	r3, #64	; 0x40
 800d456:	4a42      	ldr	r2, [pc, #264]	; (800d560 <problem_fetch+0xc240>)
 800d458:	461d      	mov	r5, r3
 800d45a:	4614      	mov	r4, r2
 800d45c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d45e:	6028      	str	r0, [r5, #0]
 800d460:	6069      	str	r1, [r5, #4]
 800d462:	60aa      	str	r2, [r5, #8]
 800d464:	60eb      	str	r3, [r5, #12]
 800d466:	cc03      	ldmia	r4!, {r0, r1}
 800d468:	6128      	str	r0, [r5, #16]
 800d46a:	6169      	str	r1, [r5, #20]
			strcpy(p->moveNumbers,"4,5,5,10,10,11,12,13,15,15,9,18");
 800d46c:	687b      	ldr	r3, [r7, #4]
 800d46e:	3304      	adds	r3, #4
 800d470:	4a3c      	ldr	r2, [pc, #240]	; (800d564 <problem_fetch+0xc244>)
 800d472:	461c      	mov	r4, r3
 800d474:	4615      	mov	r5, r2
 800d476:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d478:	6020      	str	r0, [r4, #0]
 800d47a:	6061      	str	r1, [r4, #4]
 800d47c:	60a2      	str	r2, [r4, #8]
 800d47e:	60e3      	str	r3, [r4, #12]
 800d480:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d482:	6120      	str	r0, [r4, #16]
 800d484:	6161      	str	r1, [r4, #20]
 800d486:	61a2      	str	r2, [r4, #24]
 800d488:	61e3      	str	r3, [r4, #28]
			strcpy(p->startFinish, "s,d,d,d,d,d,d,d,d,d,d,e");
 800d48a:	687b      	ldr	r3, [r7, #4]
 800d48c:	33d8      	adds	r3, #216	; 0xd8
 800d48e:	4a36      	ldr	r2, [pc, #216]	; (800d568 <problem_fetch+0xc248>)
 800d490:	461d      	mov	r5, r3
 800d492:	4614      	mov	r4, r2
 800d494:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d496:	6028      	str	r0, [r5, #0]
 800d498:	6069      	str	r1, [r5, #4]
 800d49a:	60aa      	str	r2, [r5, #8]
 800d49c:	60eb      	str	r3, [r5, #12]
 800d49e:	cc03      	ldmia	r4!, {r0, r1}
 800d4a0:	6128      	str	r0, [r5, #16]
 800d4a2:	6169      	str	r1, [r5, #20]
			strcpy(p->grade, "6C+");
 800d4a4:	687b      	ldr	r3, [r7, #4]
 800d4a6:	33cc      	adds	r3, #204	; 0xcc
 800d4a8:	4a27      	ldr	r2, [pc, #156]	; (800d548 <problem_fetch+0xc228>)
 800d4aa:	6810      	ldr	r0, [r2, #0]
 800d4ac:	6018      	str	r0, [r3, #0]
			break;
 800d4ae:	f00d bc7d 	b.w	801adac <problem_fetch+0x19a8c>
		case 429 :
			strcpy(p->name,"BIT OF SIDE");
 800d4b2:	687b      	ldr	r3, [r7, #4]
 800d4b4:	337c      	adds	r3, #124	; 0x7c
 800d4b6:	4a2d      	ldr	r2, [pc, #180]	; (800d56c <problem_fetch+0xc24c>)
 800d4b8:	461c      	mov	r4, r3
 800d4ba:	4613      	mov	r3, r2
 800d4bc:	cb07      	ldmia	r3!, {r0, r1, r2}
 800d4be:	6020      	str	r0, [r4, #0]
 800d4c0:	6061      	str	r1, [r4, #4]
 800d4c2:	60a2      	str	r2, [r4, #8]
			p->moveSize = 6;
 800d4c4:	687b      	ldr	r3, [r7, #4]
 800d4c6:	2206      	movs	r2, #6
 800d4c8:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"J,G,H,C,D,A");
 800d4ca:	687b      	ldr	r3, [r7, #4]
 800d4cc:	3340      	adds	r3, #64	; 0x40
 800d4ce:	4a28      	ldr	r2, [pc, #160]	; (800d570 <problem_fetch+0xc250>)
 800d4d0:	461c      	mov	r4, r3
 800d4d2:	4613      	mov	r3, r2
 800d4d4:	cb07      	ldmia	r3!, {r0, r1, r2}
 800d4d6:	6020      	str	r0, [r4, #0]
 800d4d8:	6061      	str	r1, [r4, #4]
 800d4da:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,6,10,13,15,18");
 800d4dc:	687b      	ldr	r3, [r7, #4]
 800d4de:	3304      	adds	r3, #4
 800d4e0:	4a24      	ldr	r2, [pc, #144]	; (800d574 <problem_fetch+0xc254>)
 800d4e2:	461c      	mov	r4, r3
 800d4e4:	4615      	mov	r5, r2
 800d4e6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d4e8:	6020      	str	r0, [r4, #0]
 800d4ea:	6061      	str	r1, [r4, #4]
 800d4ec:	60a2      	str	r2, [r4, #8]
 800d4ee:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish, "s,s,d,d,d,e");
 800d4f0:	687b      	ldr	r3, [r7, #4]
 800d4f2:	33d8      	adds	r3, #216	; 0xd8
 800d4f4:	4a20      	ldr	r2, [pc, #128]	; (800d578 <problem_fetch+0xc258>)
 800d4f6:	461c      	mov	r4, r3
 800d4f8:	4613      	mov	r3, r2
 800d4fa:	cb07      	ldmia	r3!, {r0, r1, r2}
 800d4fc:	6020      	str	r0, [r4, #0]
 800d4fe:	6061      	str	r1, [r4, #4]
 800d500:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade, "6B+");
 800d502:	687b      	ldr	r3, [r7, #4]
 800d504:	33cc      	adds	r3, #204	; 0xcc
 800d506:	4a0b      	ldr	r2, [pc, #44]	; (800d534 <problem_fetch+0xc214>)
 800d508:	6810      	ldr	r0, [r2, #0]
 800d50a:	6018      	str	r0, [r3, #0]
			break;
 800d50c:	f00d bc4e 	b.w	801adac <problem_fetch+0x19a8c>
 800d510:	08025678 	.word	0x08025678
 800d514:	08025688 	.word	0x08025688
 800d518:	08021814 	.word	0x08021814
 800d51c:	08021320 	.word	0x08021320
 800d520:	08021424 	.word	0x08021424
 800d524:	08025694 	.word	0x08025694
 800d528:	080256a4 	.word	0x080256a4
 800d52c:	080256c0 	.word	0x080256c0
 800d530:	080238bc 	.word	0x080238bc
 800d534:	080212b0 	.word	0x080212b0
 800d538:	080256e4 	.word	0x080256e4
 800d53c:	080256f0 	.word	0x080256f0
 800d540:	08025060 	.word	0x08025060
 800d544:	0802139c 	.word	0x0802139c
 800d548:	080213a8 	.word	0x080213a8
 800d54c:	080256fc 	.word	0x080256fc
 800d550:	08025710 	.word	0x08025710
 800d554:	0802571c 	.word	0x0802571c
 800d558:	08023170 	.word	0x08023170
 800d55c:	0802572c 	.word	0x0802572c
 800d560:	08025738 	.word	0x08025738
 800d564:	08025750 	.word	0x08025750
 800d568:	08025770 	.word	0x08025770
 800d56c:	08025788 	.word	0x08025788
 800d570:	08025794 	.word	0x08025794
 800d574:	08022dc0 	.word	0x08022dc0
 800d578:	08021910 	.word	0x08021910
		case 43 :
			strcpy(p->name,"BLACK CAT'S");
 800d57c:	687b      	ldr	r3, [r7, #4]
 800d57e:	337c      	adds	r3, #124	; 0x7c
 800d580:	4ab5      	ldr	r2, [pc, #724]	; (800d858 <problem_fetch+0xc538>)
 800d582:	461c      	mov	r4, r3
 800d584:	4613      	mov	r3, r2
 800d586:	cb07      	ldmia	r3!, {r0, r1, r2}
 800d588:	6020      	str	r0, [r4, #0]
 800d58a:	6061      	str	r1, [r4, #4]
 800d58c:	60a2      	str	r2, [r4, #8]
			p->moveSize = 6;
 800d58e:	687b      	ldr	r3, [r7, #4]
 800d590:	2206      	movs	r2, #6
 800d592:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"C,E,D,J,I,I");
 800d594:	687b      	ldr	r3, [r7, #4]
 800d596:	3340      	adds	r3, #64	; 0x40
 800d598:	4ab0      	ldr	r2, [pc, #704]	; (800d85c <problem_fetch+0xc53c>)
 800d59a:	461c      	mov	r4, r3
 800d59c:	4613      	mov	r3, r2
 800d59e:	cb07      	ldmia	r3!, {r0, r1, r2}
 800d5a0:	6020      	str	r0, [r4, #0]
 800d5a2:	6061      	str	r1, [r4, #4]
 800d5a4:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,9,11,12,15,18");
 800d5a6:	687b      	ldr	r3, [r7, #4]
 800d5a8:	3304      	adds	r3, #4
 800d5aa:	4aad      	ldr	r2, [pc, #692]	; (800d860 <problem_fetch+0xc540>)
 800d5ac:	461c      	mov	r4, r3
 800d5ae:	4615      	mov	r5, r2
 800d5b0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d5b2:	6020      	str	r0, [r4, #0]
 800d5b4:	6061      	str	r1, [r4, #4]
 800d5b6:	60a2      	str	r2, [r4, #8]
 800d5b8:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish, "s,d,d,d,d,e");
 800d5ba:	687b      	ldr	r3, [r7, #4]
 800d5bc:	33d8      	adds	r3, #216	; 0xd8
 800d5be:	4aa9      	ldr	r2, [pc, #676]	; (800d864 <problem_fetch+0xc544>)
 800d5c0:	461c      	mov	r4, r3
 800d5c2:	4613      	mov	r3, r2
 800d5c4:	cb07      	ldmia	r3!, {r0, r1, r2}
 800d5c6:	6020      	str	r0, [r4, #0]
 800d5c8:	6061      	str	r1, [r4, #4]
 800d5ca:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade, "7C+");
 800d5cc:	687b      	ldr	r3, [r7, #4]
 800d5ce:	33cc      	adds	r3, #204	; 0xcc
 800d5d0:	4aa5      	ldr	r2, [pc, #660]	; (800d868 <problem_fetch+0xc548>)
 800d5d2:	6810      	ldr	r0, [r2, #0]
 800d5d4:	6018      	str	r0, [r3, #0]
			break;
 800d5d6:	f00d bbe9 	b.w	801adac <problem_fetch+0x19a8c>
		case 430 :
			strcpy(p->name,"BITE YOUR NAILS");
 800d5da:	687b      	ldr	r3, [r7, #4]
 800d5dc:	337c      	adds	r3, #124	; 0x7c
 800d5de:	4aa3      	ldr	r2, [pc, #652]	; (800d86c <problem_fetch+0xc54c>)
 800d5e0:	461c      	mov	r4, r3
 800d5e2:	4615      	mov	r5, r2
 800d5e4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d5e6:	6020      	str	r0, [r4, #0]
 800d5e8:	6061      	str	r1, [r4, #4]
 800d5ea:	60a2      	str	r2, [r4, #8]
 800d5ec:	60e3      	str	r3, [r4, #12]
			p->moveSize = 6;
 800d5ee:	687b      	ldr	r3, [r7, #4]
 800d5f0:	2206      	movs	r2, #6
 800d5f2:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"G,B,E,C,E,D");
 800d5f4:	687b      	ldr	r3, [r7, #4]
 800d5f6:	3340      	adds	r3, #64	; 0x40
 800d5f8:	4a9d      	ldr	r2, [pc, #628]	; (800d870 <problem_fetch+0xc550>)
 800d5fa:	461c      	mov	r4, r3
 800d5fc:	4613      	mov	r3, r2
 800d5fe:	cb07      	ldmia	r3!, {r0, r1, r2}
 800d600:	6020      	str	r0, [r4, #0]
 800d602:	6061      	str	r1, [r4, #4]
 800d604:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,6,9,13,16,18");
 800d606:	687b      	ldr	r3, [r7, #4]
 800d608:	3304      	adds	r3, #4
 800d60a:	4a9a      	ldr	r2, [pc, #616]	; (800d874 <problem_fetch+0xc554>)
 800d60c:	461c      	mov	r4, r3
 800d60e:	4613      	mov	r3, r2
 800d610:	cb07      	ldmia	r3!, {r0, r1, r2}
 800d612:	6020      	str	r0, [r4, #0]
 800d614:	6061      	str	r1, [r4, #4]
 800d616:	60a2      	str	r2, [r4, #8]
 800d618:	881a      	ldrh	r2, [r3, #0]
 800d61a:	789b      	ldrb	r3, [r3, #2]
 800d61c:	81a2      	strh	r2, [r4, #12]
 800d61e:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish, "s,s,d,d,d,e");
 800d620:	687b      	ldr	r3, [r7, #4]
 800d622:	33d8      	adds	r3, #216	; 0xd8
 800d624:	4a94      	ldr	r2, [pc, #592]	; (800d878 <problem_fetch+0xc558>)
 800d626:	461c      	mov	r4, r3
 800d628:	4613      	mov	r3, r2
 800d62a:	cb07      	ldmia	r3!, {r0, r1, r2}
 800d62c:	6020      	str	r0, [r4, #0]
 800d62e:	6061      	str	r1, [r4, #4]
 800d630:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade, "7B");
 800d632:	687b      	ldr	r3, [r7, #4]
 800d634:	33cc      	adds	r3, #204	; 0xcc
 800d636:	4a91      	ldr	r2, [pc, #580]	; (800d87c <problem_fetch+0xc55c>)
 800d638:	8811      	ldrh	r1, [r2, #0]
 800d63a:	7892      	ldrb	r2, [r2, #2]
 800d63c:	8019      	strh	r1, [r3, #0]
 800d63e:	709a      	strb	r2, [r3, #2]
			break;
 800d640:	f00d bbb4 	b.w	801adac <problem_fetch+0x19a8c>
		case 431 :
			strcpy(p->name,"TE LA TAMALANCH");
 800d644:	687b      	ldr	r3, [r7, #4]
 800d646:	337c      	adds	r3, #124	; 0x7c
 800d648:	4a8d      	ldr	r2, [pc, #564]	; (800d880 <problem_fetch+0xc560>)
 800d64a:	461c      	mov	r4, r3
 800d64c:	4615      	mov	r5, r2
 800d64e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d650:	6020      	str	r0, [r4, #0]
 800d652:	6061      	str	r1, [r4, #4]
 800d654:	60a2      	str	r2, [r4, #8]
 800d656:	60e3      	str	r3, [r4, #12]
			p->moveSize = 6;
 800d658:	687b      	ldr	r3, [r7, #4]
 800d65a:	2206      	movs	r2, #6
 800d65c:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"J,E,G,D,D,A");
 800d65e:	687b      	ldr	r3, [r7, #4]
 800d660:	3340      	adds	r3, #64	; 0x40
 800d662:	4a88      	ldr	r2, [pc, #544]	; (800d884 <problem_fetch+0xc564>)
 800d664:	461c      	mov	r4, r3
 800d666:	4613      	mov	r3, r2
 800d668:	cb07      	ldmia	r3!, {r0, r1, r2}
 800d66a:	6020      	str	r0, [r4, #0]
 800d66c:	6061      	str	r1, [r4, #4]
 800d66e:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,6,9,11,15,18");
 800d670:	687b      	ldr	r3, [r7, #4]
 800d672:	3304      	adds	r3, #4
 800d674:	4a84      	ldr	r2, [pc, #528]	; (800d888 <problem_fetch+0xc568>)
 800d676:	461c      	mov	r4, r3
 800d678:	4613      	mov	r3, r2
 800d67a:	cb07      	ldmia	r3!, {r0, r1, r2}
 800d67c:	6020      	str	r0, [r4, #0]
 800d67e:	6061      	str	r1, [r4, #4]
 800d680:	60a2      	str	r2, [r4, #8]
 800d682:	881a      	ldrh	r2, [r3, #0]
 800d684:	789b      	ldrb	r3, [r3, #2]
 800d686:	81a2      	strh	r2, [r4, #12]
 800d688:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish, "s,d,d,d,d,e");
 800d68a:	687b      	ldr	r3, [r7, #4]
 800d68c:	33d8      	adds	r3, #216	; 0xd8
 800d68e:	4a75      	ldr	r2, [pc, #468]	; (800d864 <problem_fetch+0xc544>)
 800d690:	461c      	mov	r4, r3
 800d692:	4613      	mov	r3, r2
 800d694:	cb07      	ldmia	r3!, {r0, r1, r2}
 800d696:	6020      	str	r0, [r4, #0]
 800d698:	6061      	str	r1, [r4, #4]
 800d69a:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade, "7A+");
 800d69c:	687b      	ldr	r3, [r7, #4]
 800d69e:	33cc      	adds	r3, #204	; 0xcc
 800d6a0:	4a7a      	ldr	r2, [pc, #488]	; (800d88c <problem_fetch+0xc56c>)
 800d6a2:	6810      	ldr	r0, [r2, #0]
 800d6a4:	6018      	str	r0, [r3, #0]
			break;
 800d6a6:	f00d bb81 	b.w	801adac <problem_fetch+0x19a8c>
		case 432 :
			strcpy(p->name,"MEH");
 800d6aa:	687b      	ldr	r3, [r7, #4]
 800d6ac:	337c      	adds	r3, #124	; 0x7c
 800d6ae:	4a78      	ldr	r2, [pc, #480]	; (800d890 <problem_fetch+0xc570>)
 800d6b0:	6810      	ldr	r0, [r2, #0]
 800d6b2:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 800d6b4:	687b      	ldr	r3, [r7, #4]
 800d6b6:	2207      	movs	r2, #7
 800d6b8:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"C,B,E,D,F,G,I");
 800d6ba:	687b      	ldr	r3, [r7, #4]
 800d6bc:	3340      	adds	r3, #64	; 0x40
 800d6be:	4a75      	ldr	r2, [pc, #468]	; (800d894 <problem_fetch+0xc574>)
 800d6c0:	461c      	mov	r4, r3
 800d6c2:	4613      	mov	r3, r2
 800d6c4:	cb07      	ldmia	r3!, {r0, r1, r2}
 800d6c6:	6020      	str	r0, [r4, #0]
 800d6c8:	6061      	str	r1, [r4, #4]
 800d6ca:	60a2      	str	r2, [r4, #8]
 800d6cc:	881b      	ldrh	r3, [r3, #0]
 800d6ce:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,6,8,11,13,15,18");
 800d6d0:	687b      	ldr	r3, [r7, #4]
 800d6d2:	3304      	adds	r3, #4
 800d6d4:	4a70      	ldr	r2, [pc, #448]	; (800d898 <problem_fetch+0xc578>)
 800d6d6:	461d      	mov	r5, r3
 800d6d8:	4614      	mov	r4, r2
 800d6da:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d6dc:	6028      	str	r0, [r5, #0]
 800d6de:	6069      	str	r1, [r5, #4]
 800d6e0:	60aa      	str	r2, [r5, #8]
 800d6e2:	60eb      	str	r3, [r5, #12]
 800d6e4:	8823      	ldrh	r3, [r4, #0]
 800d6e6:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish, "s,s,d,d,d,d,e");
 800d6e8:	687b      	ldr	r3, [r7, #4]
 800d6ea:	33d8      	adds	r3, #216	; 0xd8
 800d6ec:	4a6b      	ldr	r2, [pc, #428]	; (800d89c <problem_fetch+0xc57c>)
 800d6ee:	461c      	mov	r4, r3
 800d6f0:	4613      	mov	r3, r2
 800d6f2:	cb07      	ldmia	r3!, {r0, r1, r2}
 800d6f4:	6020      	str	r0, [r4, #0]
 800d6f6:	6061      	str	r1, [r4, #4]
 800d6f8:	60a2      	str	r2, [r4, #8]
 800d6fa:	881b      	ldrh	r3, [r3, #0]
 800d6fc:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade, "6B+");
 800d6fe:	687b      	ldr	r3, [r7, #4]
 800d700:	33cc      	adds	r3, #204	; 0xcc
 800d702:	4a67      	ldr	r2, [pc, #412]	; (800d8a0 <problem_fetch+0xc580>)
 800d704:	6810      	ldr	r0, [r2, #0]
 800d706:	6018      	str	r0, [r3, #0]
			break;
 800d708:	f00d bb50 	b.w	801adac <problem_fetch+0x19a8c>
		case 433 :
			strcpy(p->name,"APEX");
 800d70c:	687b      	ldr	r3, [r7, #4]
 800d70e:	337c      	adds	r3, #124	; 0x7c
 800d710:	4a64      	ldr	r2, [pc, #400]	; (800d8a4 <problem_fetch+0xc584>)
 800d712:	6810      	ldr	r0, [r2, #0]
 800d714:	6018      	str	r0, [r3, #0]
 800d716:	7912      	ldrb	r2, [r2, #4]
 800d718:	711a      	strb	r2, [r3, #4]
			p->moveSize = 4;
 800d71a:	687b      	ldr	r3, [r7, #4]
 800d71c:	2204      	movs	r2, #4
 800d71e:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"E,F,E,I");
 800d720:	687b      	ldr	r3, [r7, #4]
 800d722:	3340      	adds	r3, #64	; 0x40
 800d724:	4960      	ldr	r1, [pc, #384]	; (800d8a8 <problem_fetch+0xc588>)
 800d726:	461a      	mov	r2, r3
 800d728:	460b      	mov	r3, r1
 800d72a:	cb03      	ldmia	r3!, {r0, r1}
 800d72c:	6010      	str	r0, [r2, #0]
 800d72e:	6051      	str	r1, [r2, #4]
			strcpy(p->moveNumbers,"6,11,14,18");
 800d730:	687b      	ldr	r3, [r7, #4]
 800d732:	3304      	adds	r3, #4
 800d734:	495d      	ldr	r1, [pc, #372]	; (800d8ac <problem_fetch+0xc58c>)
 800d736:	461a      	mov	r2, r3
 800d738:	460b      	mov	r3, r1
 800d73a:	cb03      	ldmia	r3!, {r0, r1}
 800d73c:	6010      	str	r0, [r2, #0]
 800d73e:	6051      	str	r1, [r2, #4]
 800d740:	8819      	ldrh	r1, [r3, #0]
 800d742:	789b      	ldrb	r3, [r3, #2]
 800d744:	8111      	strh	r1, [r2, #8]
 800d746:	7293      	strb	r3, [r2, #10]
			strcpy(p->startFinish, "s,d,d,e");
 800d748:	687b      	ldr	r3, [r7, #4]
 800d74a:	33d8      	adds	r3, #216	; 0xd8
 800d74c:	4958      	ldr	r1, [pc, #352]	; (800d8b0 <problem_fetch+0xc590>)
 800d74e:	461a      	mov	r2, r3
 800d750:	460b      	mov	r3, r1
 800d752:	cb03      	ldmia	r3!, {r0, r1}
 800d754:	6010      	str	r0, [r2, #0]
 800d756:	6051      	str	r1, [r2, #4]
			strcpy(p->grade, "7C");
 800d758:	687b      	ldr	r3, [r7, #4]
 800d75a:	33cc      	adds	r3, #204	; 0xcc
 800d75c:	4a55      	ldr	r2, [pc, #340]	; (800d8b4 <problem_fetch+0xc594>)
 800d75e:	8811      	ldrh	r1, [r2, #0]
 800d760:	7892      	ldrb	r2, [r2, #2]
 800d762:	8019      	strh	r1, [r3, #0]
 800d764:	709a      	strb	r2, [r3, #2]
			break;
 800d766:	f00d bb21 	b.w	801adac <problem_fetch+0x19a8c>
		case 434 :
			strcpy(p->name,"COMMITTING WARM UP");
 800d76a:	687b      	ldr	r3, [r7, #4]
 800d76c:	337c      	adds	r3, #124	; 0x7c
 800d76e:	4a52      	ldr	r2, [pc, #328]	; (800d8b8 <problem_fetch+0xc598>)
 800d770:	461d      	mov	r5, r3
 800d772:	4614      	mov	r4, r2
 800d774:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d776:	6028      	str	r0, [r5, #0]
 800d778:	6069      	str	r1, [r5, #4]
 800d77a:	60aa      	str	r2, [r5, #8]
 800d77c:	60eb      	str	r3, [r5, #12]
 800d77e:	8823      	ldrh	r3, [r4, #0]
 800d780:	78a2      	ldrb	r2, [r4, #2]
 800d782:	822b      	strh	r3, [r5, #16]
 800d784:	4613      	mov	r3, r2
 800d786:	74ab      	strb	r3, [r5, #18]
			p->moveSize = 7;
 800d788:	687b      	ldr	r3, [r7, #4]
 800d78a:	2207      	movs	r2, #7
 800d78c:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"G,E,H,D,C,I,D");
 800d78e:	687b      	ldr	r3, [r7, #4]
 800d790:	3340      	adds	r3, #64	; 0x40
 800d792:	4a4a      	ldr	r2, [pc, #296]	; (800d8bc <problem_fetch+0xc59c>)
 800d794:	461c      	mov	r4, r3
 800d796:	4613      	mov	r3, r2
 800d798:	cb07      	ldmia	r3!, {r0, r1, r2}
 800d79a:	6020      	str	r0, [r4, #0]
 800d79c:	6061      	str	r1, [r4, #4]
 800d79e:	60a2      	str	r2, [r4, #8]
 800d7a0:	881b      	ldrh	r3, [r3, #0]
 800d7a2:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,6,10,11,13,14,18");
 800d7a4:	687b      	ldr	r3, [r7, #4]
 800d7a6:	3304      	adds	r3, #4
 800d7a8:	4a45      	ldr	r2, [pc, #276]	; (800d8c0 <problem_fetch+0xc5a0>)
 800d7aa:	461d      	mov	r5, r3
 800d7ac:	4614      	mov	r4, r2
 800d7ae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d7b0:	6028      	str	r0, [r5, #0]
 800d7b2:	6069      	str	r1, [r5, #4]
 800d7b4:	60aa      	str	r2, [r5, #8]
 800d7b6:	60eb      	str	r3, [r5, #12]
 800d7b8:	8823      	ldrh	r3, [r4, #0]
 800d7ba:	78a2      	ldrb	r2, [r4, #2]
 800d7bc:	822b      	strh	r3, [r5, #16]
 800d7be:	4613      	mov	r3, r2
 800d7c0:	74ab      	strb	r3, [r5, #18]
			strcpy(p->startFinish, "s,s,d,d,d,d,e");
 800d7c2:	687b      	ldr	r3, [r7, #4]
 800d7c4:	33d8      	adds	r3, #216	; 0xd8
 800d7c6:	4a35      	ldr	r2, [pc, #212]	; (800d89c <problem_fetch+0xc57c>)
 800d7c8:	461c      	mov	r4, r3
 800d7ca:	4613      	mov	r3, r2
 800d7cc:	cb07      	ldmia	r3!, {r0, r1, r2}
 800d7ce:	6020      	str	r0, [r4, #0]
 800d7d0:	6061      	str	r1, [r4, #4]
 800d7d2:	60a2      	str	r2, [r4, #8]
 800d7d4:	881b      	ldrh	r3, [r3, #0]
 800d7d6:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade, "6B+");
 800d7d8:	687b      	ldr	r3, [r7, #4]
 800d7da:	33cc      	adds	r3, #204	; 0xcc
 800d7dc:	4a30      	ldr	r2, [pc, #192]	; (800d8a0 <problem_fetch+0xc580>)
 800d7de:	6810      	ldr	r0, [r2, #0]
 800d7e0:	6018      	str	r0, [r3, #0]
			break;
 800d7e2:	f00d bae3 	b.w	801adac <problem_fetch+0x19a8c>
		case 435 :
			strcpy(p->name,"LAYBACK WARM UP");
 800d7e6:	687b      	ldr	r3, [r7, #4]
 800d7e8:	337c      	adds	r3, #124	; 0x7c
 800d7ea:	4a36      	ldr	r2, [pc, #216]	; (800d8c4 <problem_fetch+0xc5a4>)
 800d7ec:	461c      	mov	r4, r3
 800d7ee:	4615      	mov	r5, r2
 800d7f0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d7f2:	6020      	str	r0, [r4, #0]
 800d7f4:	6061      	str	r1, [r4, #4]
 800d7f6:	60a2      	str	r2, [r4, #8]
 800d7f8:	60e3      	str	r3, [r4, #12]
			p->moveSize = 7;
 800d7fa:	687b      	ldr	r3, [r7, #4]
 800d7fc:	2207      	movs	r2, #7
 800d7fe:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"G,E,H,C,D,A,D");
 800d800:	687b      	ldr	r3, [r7, #4]
 800d802:	3340      	adds	r3, #64	; 0x40
 800d804:	4a30      	ldr	r2, [pc, #192]	; (800d8c8 <problem_fetch+0xc5a8>)
 800d806:	461c      	mov	r4, r3
 800d808:	4613      	mov	r3, r2
 800d80a:	cb07      	ldmia	r3!, {r0, r1, r2}
 800d80c:	6020      	str	r0, [r4, #0]
 800d80e:	6061      	str	r1, [r4, #4]
 800d810:	60a2      	str	r2, [r4, #8]
 800d812:	881b      	ldrh	r3, [r3, #0]
 800d814:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,6,10,13,11,14,18");
 800d816:	687b      	ldr	r3, [r7, #4]
 800d818:	3304      	adds	r3, #4
 800d81a:	4a2c      	ldr	r2, [pc, #176]	; (800d8cc <problem_fetch+0xc5ac>)
 800d81c:	461d      	mov	r5, r3
 800d81e:	4614      	mov	r4, r2
 800d820:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d822:	6028      	str	r0, [r5, #0]
 800d824:	6069      	str	r1, [r5, #4]
 800d826:	60aa      	str	r2, [r5, #8]
 800d828:	60eb      	str	r3, [r5, #12]
 800d82a:	8823      	ldrh	r3, [r4, #0]
 800d82c:	78a2      	ldrb	r2, [r4, #2]
 800d82e:	822b      	strh	r3, [r5, #16]
 800d830:	4613      	mov	r3, r2
 800d832:	74ab      	strb	r3, [r5, #18]
			strcpy(p->startFinish, "s,s,d,d,d,d,e");
 800d834:	687b      	ldr	r3, [r7, #4]
 800d836:	33d8      	adds	r3, #216	; 0xd8
 800d838:	4a18      	ldr	r2, [pc, #96]	; (800d89c <problem_fetch+0xc57c>)
 800d83a:	461c      	mov	r4, r3
 800d83c:	4613      	mov	r3, r2
 800d83e:	cb07      	ldmia	r3!, {r0, r1, r2}
 800d840:	6020      	str	r0, [r4, #0]
 800d842:	6061      	str	r1, [r4, #4]
 800d844:	60a2      	str	r2, [r4, #8]
 800d846:	881b      	ldrh	r3, [r3, #0]
 800d848:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade, "6B+");
 800d84a:	687b      	ldr	r3, [r7, #4]
 800d84c:	33cc      	adds	r3, #204	; 0xcc
 800d84e:	4a14      	ldr	r2, [pc, #80]	; (800d8a0 <problem_fetch+0xc580>)
 800d850:	6810      	ldr	r0, [r2, #0]
 800d852:	6018      	str	r0, [r3, #0]
			break;
 800d854:	f00d baaa 	b.w	801adac <problem_fetch+0x19a8c>
 800d858:	080257a0 	.word	0x080257a0
 800d85c:	080257ac 	.word	0x080257ac
 800d860:	08024af0 	.word	0x08024af0
 800d864:	0802139c 	.word	0x0802139c
 800d868:	08023170 	.word	0x08023170
 800d86c:	080257b8 	.word	0x080257b8
 800d870:	080257c8 	.word	0x080257c8
 800d874:	080257d4 	.word	0x080257d4
 800d878:	08021910 	.word	0x08021910
 800d87c:	0802132c 	.word	0x0802132c
 800d880:	080257e4 	.word	0x080257e4
 800d884:	080257f4 	.word	0x080257f4
 800d888:	08025800 	.word	0x08025800
 800d88c:	08021424 	.word	0x08021424
 800d890:	08025810 	.word	0x08025810
 800d894:	08025814 	.word	0x08025814
 800d898:	08025824 	.word	0x08025824
 800d89c:	080212a0 	.word	0x080212a0
 800d8a0:	080212b0 	.word	0x080212b0
 800d8a4:	08025838 	.word	0x08025838
 800d8a8:	08025840 	.word	0x08025840
 800d8ac:	08025554 	.word	0x08025554
 800d8b0:	08022028 	.word	0x08022028
 800d8b4:	0802158c 	.word	0x0802158c
 800d8b8:	08025848 	.word	0x08025848
 800d8bc:	0802585c 	.word	0x0802585c
 800d8c0:	0802586c 	.word	0x0802586c
 800d8c4:	08025880 	.word	0x08025880
 800d8c8:	08025890 	.word	0x08025890
 800d8cc:	080258a0 	.word	0x080258a0
		case 436 :
			strcpy(p->name,"PINCH &AMP; REACH");
 800d8d0:	687b      	ldr	r3, [r7, #4]
 800d8d2:	337c      	adds	r3, #124	; 0x7c
 800d8d4:	4ab9      	ldr	r2, [pc, #740]	; (800dbbc <problem_fetch+0xc89c>)
 800d8d6:	461d      	mov	r5, r3
 800d8d8:	4614      	mov	r4, r2
 800d8da:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d8dc:	6028      	str	r0, [r5, #0]
 800d8de:	6069      	str	r1, [r5, #4]
 800d8e0:	60aa      	str	r2, [r5, #8]
 800d8e2:	60eb      	str	r3, [r5, #12]
 800d8e4:	8823      	ldrh	r3, [r4, #0]
 800d8e6:	822b      	strh	r3, [r5, #16]
			p->moveSize = 7;
 800d8e8:	687b      	ldr	r3, [r7, #4]
 800d8ea:	2207      	movs	r2, #7
 800d8ec:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"G,E,H,D,C,D,D");
 800d8ee:	687b      	ldr	r3, [r7, #4]
 800d8f0:	3340      	adds	r3, #64	; 0x40
 800d8f2:	4ab3      	ldr	r2, [pc, #716]	; (800dbc0 <problem_fetch+0xc8a0>)
 800d8f4:	461c      	mov	r4, r3
 800d8f6:	4613      	mov	r3, r2
 800d8f8:	cb07      	ldmia	r3!, {r0, r1, r2}
 800d8fa:	6020      	str	r0, [r4, #0]
 800d8fc:	6061      	str	r1, [r4, #4]
 800d8fe:	60a2      	str	r2, [r4, #8]
 800d900:	881b      	ldrh	r3, [r3, #0]
 800d902:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,6,10,11,13,15,18");
 800d904:	687b      	ldr	r3, [r7, #4]
 800d906:	3304      	adds	r3, #4
 800d908:	4aae      	ldr	r2, [pc, #696]	; (800dbc4 <problem_fetch+0xc8a4>)
 800d90a:	461d      	mov	r5, r3
 800d90c:	4614      	mov	r4, r2
 800d90e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d910:	6028      	str	r0, [r5, #0]
 800d912:	6069      	str	r1, [r5, #4]
 800d914:	60aa      	str	r2, [r5, #8]
 800d916:	60eb      	str	r3, [r5, #12]
 800d918:	8823      	ldrh	r3, [r4, #0]
 800d91a:	78a2      	ldrb	r2, [r4, #2]
 800d91c:	822b      	strh	r3, [r5, #16]
 800d91e:	4613      	mov	r3, r2
 800d920:	74ab      	strb	r3, [r5, #18]
			strcpy(p->startFinish, "s,s,d,d,d,d,e");
 800d922:	687b      	ldr	r3, [r7, #4]
 800d924:	33d8      	adds	r3, #216	; 0xd8
 800d926:	4aa8      	ldr	r2, [pc, #672]	; (800dbc8 <problem_fetch+0xc8a8>)
 800d928:	461c      	mov	r4, r3
 800d92a:	4613      	mov	r3, r2
 800d92c:	cb07      	ldmia	r3!, {r0, r1, r2}
 800d92e:	6020      	str	r0, [r4, #0]
 800d930:	6061      	str	r1, [r4, #4]
 800d932:	60a2      	str	r2, [r4, #8]
 800d934:	881b      	ldrh	r3, [r3, #0]
 800d936:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade, "6B+");
 800d938:	687b      	ldr	r3, [r7, #4]
 800d93a:	33cc      	adds	r3, #204	; 0xcc
 800d93c:	4aa3      	ldr	r2, [pc, #652]	; (800dbcc <problem_fetch+0xc8ac>)
 800d93e:	6810      	ldr	r0, [r2, #0]
 800d940:	6018      	str	r0, [r3, #0]
			break;
 800d942:	f00d ba33 	b.w	801adac <problem_fetch+0x19a8c>
		case 437 :
			strcpy(p->name,"PINCH WARM UP");
 800d946:	687b      	ldr	r3, [r7, #4]
 800d948:	337c      	adds	r3, #124	; 0x7c
 800d94a:	4aa1      	ldr	r2, [pc, #644]	; (800dbd0 <problem_fetch+0xc8b0>)
 800d94c:	461c      	mov	r4, r3
 800d94e:	4613      	mov	r3, r2
 800d950:	cb07      	ldmia	r3!, {r0, r1, r2}
 800d952:	6020      	str	r0, [r4, #0]
 800d954:	6061      	str	r1, [r4, #4]
 800d956:	60a2      	str	r2, [r4, #8]
 800d958:	881b      	ldrh	r3, [r3, #0]
 800d95a:	81a3      	strh	r3, [r4, #12]
			p->moveSize = 8;
 800d95c:	687b      	ldr	r3, [r7, #4]
 800d95e:	2208      	movs	r2, #8
 800d960:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"G,E,H,D,C,D,A,D");
 800d962:	687b      	ldr	r3, [r7, #4]
 800d964:	3340      	adds	r3, #64	; 0x40
 800d966:	4a9b      	ldr	r2, [pc, #620]	; (800dbd4 <problem_fetch+0xc8b4>)
 800d968:	461c      	mov	r4, r3
 800d96a:	4615      	mov	r5, r2
 800d96c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d96e:	6020      	str	r0, [r4, #0]
 800d970:	6061      	str	r1, [r4, #4]
 800d972:	60a2      	str	r2, [r4, #8]
 800d974:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,6,10,11,13,15,14,18");
 800d976:	687b      	ldr	r3, [r7, #4]
 800d978:	3304      	adds	r3, #4
 800d97a:	4a97      	ldr	r2, [pc, #604]	; (800dbd8 <problem_fetch+0xc8b8>)
 800d97c:	461d      	mov	r5, r3
 800d97e:	4614      	mov	r4, r2
 800d980:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d982:	6028      	str	r0, [r5, #0]
 800d984:	6069      	str	r1, [r5, #4]
 800d986:	60aa      	str	r2, [r5, #8]
 800d988:	60eb      	str	r3, [r5, #12]
 800d98a:	6820      	ldr	r0, [r4, #0]
 800d98c:	6128      	str	r0, [r5, #16]
 800d98e:	88a3      	ldrh	r3, [r4, #4]
 800d990:	82ab      	strh	r3, [r5, #20]
			strcpy(p->startFinish, "s,s,d,d,d,d,d,e");
 800d992:	687b      	ldr	r3, [r7, #4]
 800d994:	33d8      	adds	r3, #216	; 0xd8
 800d996:	4a91      	ldr	r2, [pc, #580]	; (800dbdc <problem_fetch+0xc8bc>)
 800d998:	461c      	mov	r4, r3
 800d99a:	4615      	mov	r5, r2
 800d99c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d99e:	6020      	str	r0, [r4, #0]
 800d9a0:	6061      	str	r1, [r4, #4]
 800d9a2:	60a2      	str	r2, [r4, #8]
 800d9a4:	60e3      	str	r3, [r4, #12]
			strcpy(p->grade, "6B+");
 800d9a6:	687b      	ldr	r3, [r7, #4]
 800d9a8:	33cc      	adds	r3, #204	; 0xcc
 800d9aa:	4a88      	ldr	r2, [pc, #544]	; (800dbcc <problem_fetch+0xc8ac>)
 800d9ac:	6810      	ldr	r0, [r2, #0]
 800d9ae:	6018      	str	r0, [r3, #0]
			break;
 800d9b0:	f00d b9fc 	b.w	801adac <problem_fetch+0x19a8c>
		case 438 :
			strcpy(p->name,"A SIDE OF FRIES?");
 800d9b4:	687b      	ldr	r3, [r7, #4]
 800d9b6:	337c      	adds	r3, #124	; 0x7c
 800d9b8:	4a89      	ldr	r2, [pc, #548]	; (800dbe0 <problem_fetch+0xc8c0>)
 800d9ba:	461d      	mov	r5, r3
 800d9bc:	4614      	mov	r4, r2
 800d9be:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d9c0:	6028      	str	r0, [r5, #0]
 800d9c2:	6069      	str	r1, [r5, #4]
 800d9c4:	60aa      	str	r2, [r5, #8]
 800d9c6:	60eb      	str	r3, [r5, #12]
 800d9c8:	7823      	ldrb	r3, [r4, #0]
 800d9ca:	742b      	strb	r3, [r5, #16]
			p->moveSize = 5;
 800d9cc:	687b      	ldr	r3, [r7, #4]
 800d9ce:	2205      	movs	r2, #5
 800d9d0:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"C,E,E,G,I");
 800d9d2:	687b      	ldr	r3, [r7, #4]
 800d9d4:	3340      	adds	r3, #64	; 0x40
 800d9d6:	4983      	ldr	r1, [pc, #524]	; (800dbe4 <problem_fetch+0xc8c4>)
 800d9d8:	461a      	mov	r2, r3
 800d9da:	460b      	mov	r3, r1
 800d9dc:	cb03      	ldmia	r3!, {r0, r1}
 800d9de:	6010      	str	r0, [r2, #0]
 800d9e0:	6051      	str	r1, [r2, #4]
 800d9e2:	881b      	ldrh	r3, [r3, #0]
 800d9e4:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"5,8,12,14,18");
 800d9e6:	687b      	ldr	r3, [r7, #4]
 800d9e8:	3304      	adds	r3, #4
 800d9ea:	4a7f      	ldr	r2, [pc, #508]	; (800dbe8 <problem_fetch+0xc8c8>)
 800d9ec:	461c      	mov	r4, r3
 800d9ee:	4613      	mov	r3, r2
 800d9f0:	cb07      	ldmia	r3!, {r0, r1, r2}
 800d9f2:	6020      	str	r0, [r4, #0]
 800d9f4:	6061      	str	r1, [r4, #4]
 800d9f6:	60a2      	str	r2, [r4, #8]
 800d9f8:	781b      	ldrb	r3, [r3, #0]
 800d9fa:	7323      	strb	r3, [r4, #12]
			strcpy(p->startFinish, "s,d,d,d,e");
 800d9fc:	687b      	ldr	r3, [r7, #4]
 800d9fe:	33d8      	adds	r3, #216	; 0xd8
 800da00:	497a      	ldr	r1, [pc, #488]	; (800dbec <problem_fetch+0xc8cc>)
 800da02:	461a      	mov	r2, r3
 800da04:	460b      	mov	r3, r1
 800da06:	cb03      	ldmia	r3!, {r0, r1}
 800da08:	6010      	str	r0, [r2, #0]
 800da0a:	6051      	str	r1, [r2, #4]
 800da0c:	881b      	ldrh	r3, [r3, #0]
 800da0e:	8113      	strh	r3, [r2, #8]
			strcpy(p->grade, "7A");
 800da10:	687b      	ldr	r3, [r7, #4]
 800da12:	33cc      	adds	r3, #204	; 0xcc
 800da14:	4a76      	ldr	r2, [pc, #472]	; (800dbf0 <problem_fetch+0xc8d0>)
 800da16:	8811      	ldrh	r1, [r2, #0]
 800da18:	7892      	ldrb	r2, [r2, #2]
 800da1a:	8019      	strh	r1, [r3, #0]
 800da1c:	709a      	strb	r2, [r3, #2]
			break;
 800da1e:	f00d b9c5 	b.w	801adac <problem_fetch+0x19a8c>
		case 439 :
			strcpy(p->name,"HUFFING BUBBLES");
 800da22:	687b      	ldr	r3, [r7, #4]
 800da24:	337c      	adds	r3, #124	; 0x7c
 800da26:	4a73      	ldr	r2, [pc, #460]	; (800dbf4 <problem_fetch+0xc8d4>)
 800da28:	461c      	mov	r4, r3
 800da2a:	4615      	mov	r5, r2
 800da2c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800da2e:	6020      	str	r0, [r4, #0]
 800da30:	6061      	str	r1, [r4, #4]
 800da32:	60a2      	str	r2, [r4, #8]
 800da34:	60e3      	str	r3, [r4, #12]
			p->moveSize = 6;
 800da36:	687b      	ldr	r3, [r7, #4]
 800da38:	2206      	movs	r2, #6
 800da3a:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"J,F,B,D,E,A");
 800da3c:	687b      	ldr	r3, [r7, #4]
 800da3e:	3340      	adds	r3, #64	; 0x40
 800da40:	4a6d      	ldr	r2, [pc, #436]	; (800dbf8 <problem_fetch+0xc8d8>)
 800da42:	461c      	mov	r4, r3
 800da44:	4613      	mov	r3, r2
 800da46:	cb07      	ldmia	r3!, {r0, r1, r2}
 800da48:	6020      	str	r0, [r4, #0]
 800da4a:	6061      	str	r1, [r4, #4]
 800da4c:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,11,10,15,6,18");
 800da4e:	687b      	ldr	r3, [r7, #4]
 800da50:	3304      	adds	r3, #4
 800da52:	4a6a      	ldr	r2, [pc, #424]	; (800dbfc <problem_fetch+0xc8dc>)
 800da54:	461c      	mov	r4, r3
 800da56:	4615      	mov	r5, r2
 800da58:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800da5a:	6020      	str	r0, [r4, #0]
 800da5c:	6061      	str	r1, [r4, #4]
 800da5e:	60a2      	str	r2, [r4, #8]
 800da60:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish, "s,d,d,d,d,e");
 800da62:	687b      	ldr	r3, [r7, #4]
 800da64:	33d8      	adds	r3, #216	; 0xd8
 800da66:	4a66      	ldr	r2, [pc, #408]	; (800dc00 <problem_fetch+0xc8e0>)
 800da68:	461c      	mov	r4, r3
 800da6a:	4613      	mov	r3, r2
 800da6c:	cb07      	ldmia	r3!, {r0, r1, r2}
 800da6e:	6020      	str	r0, [r4, #0]
 800da70:	6061      	str	r1, [r4, #4]
 800da72:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade, "7B+");
 800da74:	687b      	ldr	r3, [r7, #4]
 800da76:	33cc      	adds	r3, #204	; 0xcc
 800da78:	4a62      	ldr	r2, [pc, #392]	; (800dc04 <problem_fetch+0xc8e4>)
 800da7a:	6810      	ldr	r0, [r2, #0]
 800da7c:	6018      	str	r0, [r3, #0]
			break;
 800da7e:	f00d b995 	b.w	801adac <problem_fetch+0x19a8c>
		case 44 :
			strcpy(p->name,"ACG19");
 800da82:	687b      	ldr	r3, [r7, #4]
 800da84:	337c      	adds	r3, #124	; 0x7c
 800da86:	4a60      	ldr	r2, [pc, #384]	; (800dc08 <problem_fetch+0xc8e8>)
 800da88:	6810      	ldr	r0, [r2, #0]
 800da8a:	6018      	str	r0, [r3, #0]
 800da8c:	8892      	ldrh	r2, [r2, #4]
 800da8e:	809a      	strh	r2, [r3, #4]
			p->moveSize = 8;
 800da90:	687b      	ldr	r3, [r7, #4]
 800da92:	2208      	movs	r2, #8
 800da94:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"E,J,G,B,E,E,I,I");
 800da96:	687b      	ldr	r3, [r7, #4]
 800da98:	3340      	adds	r3, #64	; 0x40
 800da9a:	4a5c      	ldr	r2, [pc, #368]	; (800dc0c <problem_fetch+0xc8ec>)
 800da9c:	461c      	mov	r4, r3
 800da9e:	4615      	mov	r5, r2
 800daa0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800daa2:	6020      	str	r0, [r4, #0]
 800daa4:	6061      	str	r1, [r4, #4]
 800daa6:	60a2      	str	r2, [r4, #8]
 800daa8:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"6,5,9,10,12,14,14,18");
 800daaa:	687b      	ldr	r3, [r7, #4]
 800daac:	3304      	adds	r3, #4
 800daae:	4a58      	ldr	r2, [pc, #352]	; (800dc10 <problem_fetch+0xc8f0>)
 800dab0:	461d      	mov	r5, r3
 800dab2:	4614      	mov	r4, r2
 800dab4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800dab6:	6028      	str	r0, [r5, #0]
 800dab8:	6069      	str	r1, [r5, #4]
 800daba:	60aa      	str	r2, [r5, #8]
 800dabc:	60eb      	str	r3, [r5, #12]
 800dabe:	6820      	ldr	r0, [r4, #0]
 800dac0:	6128      	str	r0, [r5, #16]
 800dac2:	7923      	ldrb	r3, [r4, #4]
 800dac4:	752b      	strb	r3, [r5, #20]
			strcpy(p->startFinish, "s,s,d,d,d,d,d,e");
 800dac6:	687b      	ldr	r3, [r7, #4]
 800dac8:	33d8      	adds	r3, #216	; 0xd8
 800daca:	4a44      	ldr	r2, [pc, #272]	; (800dbdc <problem_fetch+0xc8bc>)
 800dacc:	461c      	mov	r4, r3
 800dace:	4615      	mov	r5, r2
 800dad0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800dad2:	6020      	str	r0, [r4, #0]
 800dad4:	6061      	str	r1, [r4, #4]
 800dad6:	60a2      	str	r2, [r4, #8]
 800dad8:	60e3      	str	r3, [r4, #12]
			strcpy(p->grade, "6B+");
 800dada:	687b      	ldr	r3, [r7, #4]
 800dadc:	33cc      	adds	r3, #204	; 0xcc
 800dade:	4a3b      	ldr	r2, [pc, #236]	; (800dbcc <problem_fetch+0xc8ac>)
 800dae0:	6810      	ldr	r0, [r2, #0]
 800dae2:	6018      	str	r0, [r3, #0]
			break;
 800dae4:	f00d b962 	b.w	801adac <problem_fetch+0x19a8c>
		case 440 :
			strcpy(p->name,"VITAMIN B12");
 800dae8:	687b      	ldr	r3, [r7, #4]
 800daea:	337c      	adds	r3, #124	; 0x7c
 800daec:	4a49      	ldr	r2, [pc, #292]	; (800dc14 <problem_fetch+0xc8f4>)
 800daee:	461c      	mov	r4, r3
 800daf0:	4613      	mov	r3, r2
 800daf2:	cb07      	ldmia	r3!, {r0, r1, r2}
 800daf4:	6020      	str	r0, [r4, #0]
 800daf6:	6061      	str	r1, [r4, #4]
 800daf8:	60a2      	str	r2, [r4, #8]
			p->moveSize = 6;
 800dafa:	687b      	ldr	r3, [r7, #4]
 800dafc:	2206      	movs	r2, #6
 800dafe:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"C,A,F,B,E,I");
 800db00:	687b      	ldr	r3, [r7, #4]
 800db02:	3340      	adds	r3, #64	; 0x40
 800db04:	4a44      	ldr	r2, [pc, #272]	; (800dc18 <problem_fetch+0xc8f8>)
 800db06:	461c      	mov	r4, r3
 800db08:	4613      	mov	r3, r2
 800db0a:	cb07      	ldmia	r3!, {r0, r1, r2}
 800db0c:	6020      	str	r0, [r4, #0]
 800db0e:	6061      	str	r1, [r4, #4]
 800db10:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,9,11,12,16,18");
 800db12:	687b      	ldr	r3, [r7, #4]
 800db14:	3304      	adds	r3, #4
 800db16:	4a41      	ldr	r2, [pc, #260]	; (800dc1c <problem_fetch+0xc8fc>)
 800db18:	461c      	mov	r4, r3
 800db1a:	4615      	mov	r5, r2
 800db1c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800db1e:	6020      	str	r0, [r4, #0]
 800db20:	6061      	str	r1, [r4, #4]
 800db22:	60a2      	str	r2, [r4, #8]
 800db24:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish, "s,d,d,d,d,e");
 800db26:	687b      	ldr	r3, [r7, #4]
 800db28:	33d8      	adds	r3, #216	; 0xd8
 800db2a:	4a35      	ldr	r2, [pc, #212]	; (800dc00 <problem_fetch+0xc8e0>)
 800db2c:	461c      	mov	r4, r3
 800db2e:	4613      	mov	r3, r2
 800db30:	cb07      	ldmia	r3!, {r0, r1, r2}
 800db32:	6020      	str	r0, [r4, #0]
 800db34:	6061      	str	r1, [r4, #4]
 800db36:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade, "7A+");
 800db38:	687b      	ldr	r3, [r7, #4]
 800db3a:	33cc      	adds	r3, #204	; 0xcc
 800db3c:	4a38      	ldr	r2, [pc, #224]	; (800dc20 <problem_fetch+0xc900>)
 800db3e:	6810      	ldr	r0, [r2, #0]
 800db40:	6018      	str	r0, [r3, #0]
			break;
 800db42:	f00d b933 	b.w	801adac <problem_fetch+0x19a8c>
		case 441 :
			strcpy(p->name,"FUDGE YEAH");
 800db46:	687b      	ldr	r3, [r7, #4]
 800db48:	337c      	adds	r3, #124	; 0x7c
 800db4a:	4936      	ldr	r1, [pc, #216]	; (800dc24 <problem_fetch+0xc904>)
 800db4c:	461a      	mov	r2, r3
 800db4e:	460b      	mov	r3, r1
 800db50:	cb03      	ldmia	r3!, {r0, r1}
 800db52:	6010      	str	r0, [r2, #0]
 800db54:	6051      	str	r1, [r2, #4]
 800db56:	8819      	ldrh	r1, [r3, #0]
 800db58:	789b      	ldrb	r3, [r3, #2]
 800db5a:	8111      	strh	r1, [r2, #8]
 800db5c:	7293      	strb	r3, [r2, #10]
			p->moveSize = 9;
 800db5e:	687b      	ldr	r3, [r7, #4]
 800db60:	2209      	movs	r2, #9
 800db62:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"J,G,H,G,H,G,I,H,I");
 800db64:	687b      	ldr	r3, [r7, #4]
 800db66:	3340      	adds	r3, #64	; 0x40
 800db68:	4a2f      	ldr	r2, [pc, #188]	; (800dc28 <problem_fetch+0xc908>)
 800db6a:	461d      	mov	r5, r3
 800db6c:	4614      	mov	r4, r2
 800db6e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800db70:	6028      	str	r0, [r5, #0]
 800db72:	6069      	str	r1, [r5, #4]
 800db74:	60aa      	str	r2, [r5, #8]
 800db76:	60eb      	str	r3, [r5, #12]
 800db78:	8823      	ldrh	r3, [r4, #0]
 800db7a:	822b      	strh	r3, [r5, #16]
			strcpy(p->moveNumbers,"5,6,8,10,12,14,14,16,18");
 800db7c:	687b      	ldr	r3, [r7, #4]
 800db7e:	3304      	adds	r3, #4
 800db80:	4a2a      	ldr	r2, [pc, #168]	; (800dc2c <problem_fetch+0xc90c>)
 800db82:	461d      	mov	r5, r3
 800db84:	4614      	mov	r4, r2
 800db86:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800db88:	6028      	str	r0, [r5, #0]
 800db8a:	6069      	str	r1, [r5, #4]
 800db8c:	60aa      	str	r2, [r5, #8]
 800db8e:	60eb      	str	r3, [r5, #12]
 800db90:	cc03      	ldmia	r4!, {r0, r1}
 800db92:	6128      	str	r0, [r5, #16]
 800db94:	6169      	str	r1, [r5, #20]
			strcpy(p->startFinish, "s,s,d,d,d,d,d,d,e");
 800db96:	687b      	ldr	r3, [r7, #4]
 800db98:	33d8      	adds	r3, #216	; 0xd8
 800db9a:	4a25      	ldr	r2, [pc, #148]	; (800dc30 <problem_fetch+0xc910>)
 800db9c:	461d      	mov	r5, r3
 800db9e:	4614      	mov	r4, r2
 800dba0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800dba2:	6028      	str	r0, [r5, #0]
 800dba4:	6069      	str	r1, [r5, #4]
 800dba6:	60aa      	str	r2, [r5, #8]
 800dba8:	60eb      	str	r3, [r5, #12]
 800dbaa:	8823      	ldrh	r3, [r4, #0]
 800dbac:	822b      	strh	r3, [r5, #16]
			strcpy(p->grade, "6B+");
 800dbae:	687b      	ldr	r3, [r7, #4]
 800dbb0:	33cc      	adds	r3, #204	; 0xcc
 800dbb2:	4a06      	ldr	r2, [pc, #24]	; (800dbcc <problem_fetch+0xc8ac>)
 800dbb4:	6810      	ldr	r0, [r2, #0]
 800dbb6:	6018      	str	r0, [r3, #0]
			break;
 800dbb8:	f00d b8f8 	b.w	801adac <problem_fetch+0x19a8c>
 800dbbc:	080258b4 	.word	0x080258b4
 800dbc0:	080258c8 	.word	0x080258c8
 800dbc4:	080258d8 	.word	0x080258d8
 800dbc8:	080212a0 	.word	0x080212a0
 800dbcc:	080212b0 	.word	0x080212b0
 800dbd0:	080258ec 	.word	0x080258ec
 800dbd4:	080258fc 	.word	0x080258fc
 800dbd8:	0802590c 	.word	0x0802590c
 800dbdc:	080214cc 	.word	0x080214cc
 800dbe0:	08025924 	.word	0x08025924
 800dbe4:	08025938 	.word	0x08025938
 800dbe8:	080239dc 	.word	0x080239dc
 800dbec:	08021320 	.word	0x08021320
 800dbf0:	080212f4 	.word	0x080212f4
 800dbf4:	08025944 	.word	0x08025944
 800dbf8:	08025954 	.word	0x08025954
 800dbfc:	08025960 	.word	0x08025960
 800dc00:	0802139c 	.word	0x0802139c
 800dc04:	08021848 	.word	0x08021848
 800dc08:	08025970 	.word	0x08025970
 800dc0c:	08025978 	.word	0x08025978
 800dc10:	08025988 	.word	0x08025988
 800dc14:	080259a0 	.word	0x080259a0
 800dc18:	080259ac 	.word	0x080259ac
 800dc1c:	080259b8 	.word	0x080259b8
 800dc20:	08021424 	.word	0x08021424
 800dc24:	080259c8 	.word	0x080259c8
 800dc28:	080259d4 	.word	0x080259d4
 800dc2c:	080259e8 	.word	0x080259e8
 800dc30:	0802187c 	.word	0x0802187c
		case 442 :
			strcpy(p->name,"SHARK FIN");
 800dc34:	687b      	ldr	r3, [r7, #4]
 800dc36:	337c      	adds	r3, #124	; 0x7c
 800dc38:	49bf      	ldr	r1, [pc, #764]	; (800df38 <problem_fetch+0xcc18>)
 800dc3a:	461a      	mov	r2, r3
 800dc3c:	460b      	mov	r3, r1
 800dc3e:	cb03      	ldmia	r3!, {r0, r1}
 800dc40:	6010      	str	r0, [r2, #0]
 800dc42:	6051      	str	r1, [r2, #4]
 800dc44:	881b      	ldrh	r3, [r3, #0]
 800dc46:	8113      	strh	r3, [r2, #8]
			p->moveSize = 9;
 800dc48:	687b      	ldr	r3, [r7, #4]
 800dc4a:	2209      	movs	r2, #9
 800dc4c:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"J,H,C,G,D,H,G,C,I");
 800dc4e:	687b      	ldr	r3, [r7, #4]
 800dc50:	3340      	adds	r3, #64	; 0x40
 800dc52:	4aba      	ldr	r2, [pc, #744]	; (800df3c <problem_fetch+0xcc1c>)
 800dc54:	461d      	mov	r5, r3
 800dc56:	4614      	mov	r4, r2
 800dc58:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800dc5a:	6028      	str	r0, [r5, #0]
 800dc5c:	6069      	str	r1, [r5, #4]
 800dc5e:	60aa      	str	r2, [r5, #8]
 800dc60:	60eb      	str	r3, [r5, #12]
 800dc62:	8823      	ldrh	r3, [r4, #0]
 800dc64:	822b      	strh	r3, [r5, #16]
			strcpy(p->moveNumbers,"5,5,8,9,11,13,15,5,18");
 800dc66:	687b      	ldr	r3, [r7, #4]
 800dc68:	3304      	adds	r3, #4
 800dc6a:	4ab5      	ldr	r2, [pc, #724]	; (800df40 <problem_fetch+0xcc20>)
 800dc6c:	461d      	mov	r5, r3
 800dc6e:	4614      	mov	r4, r2
 800dc70:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800dc72:	6028      	str	r0, [r5, #0]
 800dc74:	6069      	str	r1, [r5, #4]
 800dc76:	60aa      	str	r2, [r5, #8]
 800dc78:	60eb      	str	r3, [r5, #12]
 800dc7a:	6820      	ldr	r0, [r4, #0]
 800dc7c:	6128      	str	r0, [r5, #16]
 800dc7e:	88a3      	ldrh	r3, [r4, #4]
 800dc80:	82ab      	strh	r3, [r5, #20]
			strcpy(p->startFinish, "s,s,d,d,d,d,d,d,e");
 800dc82:	687b      	ldr	r3, [r7, #4]
 800dc84:	33d8      	adds	r3, #216	; 0xd8
 800dc86:	4aaf      	ldr	r2, [pc, #700]	; (800df44 <problem_fetch+0xcc24>)
 800dc88:	461d      	mov	r5, r3
 800dc8a:	4614      	mov	r4, r2
 800dc8c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800dc8e:	6028      	str	r0, [r5, #0]
 800dc90:	6069      	str	r1, [r5, #4]
 800dc92:	60aa      	str	r2, [r5, #8]
 800dc94:	60eb      	str	r3, [r5, #12]
 800dc96:	8823      	ldrh	r3, [r4, #0]
 800dc98:	822b      	strh	r3, [r5, #16]
			strcpy(p->grade, "6B+");
 800dc9a:	687b      	ldr	r3, [r7, #4]
 800dc9c:	33cc      	adds	r3, #204	; 0xcc
 800dc9e:	4aaa      	ldr	r2, [pc, #680]	; (800df48 <problem_fetch+0xcc28>)
 800dca0:	6810      	ldr	r0, [r2, #0]
 800dca2:	6018      	str	r0, [r3, #0]
			break;
 800dca4:	f00d b882 	b.w	801adac <problem_fetch+0x19a8c>
		case 443 :
			strcpy(p->name,"WARM UP BB");
 800dca8:	687b      	ldr	r3, [r7, #4]
 800dcaa:	337c      	adds	r3, #124	; 0x7c
 800dcac:	49a7      	ldr	r1, [pc, #668]	; (800df4c <problem_fetch+0xcc2c>)
 800dcae:	461a      	mov	r2, r3
 800dcb0:	460b      	mov	r3, r1
 800dcb2:	cb03      	ldmia	r3!, {r0, r1}
 800dcb4:	6010      	str	r0, [r2, #0]
 800dcb6:	6051      	str	r1, [r2, #4]
 800dcb8:	8819      	ldrh	r1, [r3, #0]
 800dcba:	789b      	ldrb	r3, [r3, #2]
 800dcbc:	8111      	strh	r1, [r2, #8]
 800dcbe:	7293      	strb	r3, [r2, #10]
			p->moveSize = 8;
 800dcc0:	687b      	ldr	r3, [r7, #4]
 800dcc2:	2208      	movs	r2, #8
 800dcc4:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"E,G,G,E,G,D,G,D");
 800dcc6:	687b      	ldr	r3, [r7, #4]
 800dcc8:	3340      	adds	r3, #64	; 0x40
 800dcca:	4aa1      	ldr	r2, [pc, #644]	; (800df50 <problem_fetch+0xcc30>)
 800dccc:	461c      	mov	r4, r3
 800dcce:	4615      	mov	r5, r2
 800dcd0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800dcd2:	6020      	str	r0, [r4, #0]
 800dcd4:	6061      	str	r1, [r4, #4]
 800dcd6:	60a2      	str	r2, [r4, #8]
 800dcd8:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"6,4,9,8,14,15,17,18");
 800dcda:	687b      	ldr	r3, [r7, #4]
 800dcdc:	3304      	adds	r3, #4
 800dcde:	4a9d      	ldr	r2, [pc, #628]	; (800df54 <problem_fetch+0xcc34>)
 800dce0:	461d      	mov	r5, r3
 800dce2:	4614      	mov	r4, r2
 800dce4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800dce6:	6028      	str	r0, [r5, #0]
 800dce8:	6069      	str	r1, [r5, #4]
 800dcea:	60aa      	str	r2, [r5, #8]
 800dcec:	60eb      	str	r3, [r5, #12]
 800dcee:	6820      	ldr	r0, [r4, #0]
 800dcf0:	6128      	str	r0, [r5, #16]
			strcpy(p->startFinish, "s,s,d,d,d,d,d,e");
 800dcf2:	687b      	ldr	r3, [r7, #4]
 800dcf4:	33d8      	adds	r3, #216	; 0xd8
 800dcf6:	4a98      	ldr	r2, [pc, #608]	; (800df58 <problem_fetch+0xcc38>)
 800dcf8:	461c      	mov	r4, r3
 800dcfa:	4615      	mov	r5, r2
 800dcfc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800dcfe:	6020      	str	r0, [r4, #0]
 800dd00:	6061      	str	r1, [r4, #4]
 800dd02:	60a2      	str	r2, [r4, #8]
 800dd04:	60e3      	str	r3, [r4, #12]
			strcpy(p->grade, "6B+");
 800dd06:	687b      	ldr	r3, [r7, #4]
 800dd08:	33cc      	adds	r3, #204	; 0xcc
 800dd0a:	4a8f      	ldr	r2, [pc, #572]	; (800df48 <problem_fetch+0xcc28>)
 800dd0c:	6810      	ldr	r0, [r2, #0]
 800dd0e:	6018      	str	r0, [r3, #0]
			break;
 800dd10:	f00d b84c 	b.w	801adac <problem_fetch+0x19a8c>
		case 444 :
			strcpy(p->name,"VANDO");
 800dd14:	687b      	ldr	r3, [r7, #4]
 800dd16:	337c      	adds	r3, #124	; 0x7c
 800dd18:	4a90      	ldr	r2, [pc, #576]	; (800df5c <problem_fetch+0xcc3c>)
 800dd1a:	6810      	ldr	r0, [r2, #0]
 800dd1c:	6018      	str	r0, [r3, #0]
 800dd1e:	8892      	ldrh	r2, [r2, #4]
 800dd20:	809a      	strh	r2, [r3, #4]
			p->moveSize = 5;
 800dd22:	687b      	ldr	r3, [r7, #4]
 800dd24:	2205      	movs	r2, #5
 800dd26:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"J,I,G,D,D");
 800dd28:	687b      	ldr	r3, [r7, #4]
 800dd2a:	3340      	adds	r3, #64	; 0x40
 800dd2c:	498c      	ldr	r1, [pc, #560]	; (800df60 <problem_fetch+0xcc40>)
 800dd2e:	461a      	mov	r2, r3
 800dd30:	460b      	mov	r3, r1
 800dd32:	cb03      	ldmia	r3!, {r0, r1}
 800dd34:	6010      	str	r0, [r2, #0]
 800dd36:	6051      	str	r1, [r2, #4]
 800dd38:	881b      	ldrh	r3, [r3, #0]
 800dd3a:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"5,10,14,15,18");
 800dd3c:	687b      	ldr	r3, [r7, #4]
 800dd3e:	3304      	adds	r3, #4
 800dd40:	4a88      	ldr	r2, [pc, #544]	; (800df64 <problem_fetch+0xcc44>)
 800dd42:	461c      	mov	r4, r3
 800dd44:	4613      	mov	r3, r2
 800dd46:	cb07      	ldmia	r3!, {r0, r1, r2}
 800dd48:	6020      	str	r0, [r4, #0]
 800dd4a:	6061      	str	r1, [r4, #4]
 800dd4c:	60a2      	str	r2, [r4, #8]
 800dd4e:	881b      	ldrh	r3, [r3, #0]
 800dd50:	81a3      	strh	r3, [r4, #12]
			strcpy(p->startFinish, "s,d,d,d,e");
 800dd52:	687b      	ldr	r3, [r7, #4]
 800dd54:	33d8      	adds	r3, #216	; 0xd8
 800dd56:	4984      	ldr	r1, [pc, #528]	; (800df68 <problem_fetch+0xcc48>)
 800dd58:	461a      	mov	r2, r3
 800dd5a:	460b      	mov	r3, r1
 800dd5c:	cb03      	ldmia	r3!, {r0, r1}
 800dd5e:	6010      	str	r0, [r2, #0]
 800dd60:	6051      	str	r1, [r2, #4]
 800dd62:	881b      	ldrh	r3, [r3, #0]
 800dd64:	8113      	strh	r3, [r2, #8]
			strcpy(p->grade, "6B+");
 800dd66:	687b      	ldr	r3, [r7, #4]
 800dd68:	33cc      	adds	r3, #204	; 0xcc
 800dd6a:	4a77      	ldr	r2, [pc, #476]	; (800df48 <problem_fetch+0xcc28>)
 800dd6c:	6810      	ldr	r0, [r2, #0]
 800dd6e:	6018      	str	r0, [r3, #0]
			break;
 800dd70:	f00d b81c 	b.w	801adac <problem_fetch+0x19a8c>
		case 445 :
			strcpy(p->name,"SLING SHOT");
 800dd74:	687b      	ldr	r3, [r7, #4]
 800dd76:	337c      	adds	r3, #124	; 0x7c
 800dd78:	497c      	ldr	r1, [pc, #496]	; (800df6c <problem_fetch+0xcc4c>)
 800dd7a:	461a      	mov	r2, r3
 800dd7c:	460b      	mov	r3, r1
 800dd7e:	cb03      	ldmia	r3!, {r0, r1}
 800dd80:	6010      	str	r0, [r2, #0]
 800dd82:	6051      	str	r1, [r2, #4]
 800dd84:	8819      	ldrh	r1, [r3, #0]
 800dd86:	789b      	ldrb	r3, [r3, #2]
 800dd88:	8111      	strh	r1, [r2, #8]
 800dd8a:	7293      	strb	r3, [r2, #10]
			p->moveSize = 5;
 800dd8c:	687b      	ldr	r3, [r7, #4]
 800dd8e:	2205      	movs	r2, #5
 800dd90:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"G,C,F,G,I");
 800dd92:	687b      	ldr	r3, [r7, #4]
 800dd94:	3340      	adds	r3, #64	; 0x40
 800dd96:	4976      	ldr	r1, [pc, #472]	; (800df70 <problem_fetch+0xcc50>)
 800dd98:	461a      	mov	r2, r3
 800dd9a:	460b      	mov	r3, r1
 800dd9c:	cb03      	ldmia	r3!, {r0, r1}
 800dd9e:	6010      	str	r0, [r2, #0]
 800dda0:	6051      	str	r1, [r2, #4]
 800dda2:	881b      	ldrh	r3, [r3, #0]
 800dda4:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"4,8,11,14,18");
 800dda6:	687b      	ldr	r3, [r7, #4]
 800dda8:	3304      	adds	r3, #4
 800ddaa:	4a72      	ldr	r2, [pc, #456]	; (800df74 <problem_fetch+0xcc54>)
 800ddac:	461c      	mov	r4, r3
 800ddae:	4613      	mov	r3, r2
 800ddb0:	cb07      	ldmia	r3!, {r0, r1, r2}
 800ddb2:	6020      	str	r0, [r4, #0]
 800ddb4:	6061      	str	r1, [r4, #4]
 800ddb6:	60a2      	str	r2, [r4, #8]
 800ddb8:	781b      	ldrb	r3, [r3, #0]
 800ddba:	7323      	strb	r3, [r4, #12]
			strcpy(p->startFinish, "s,d,d,d,e");
 800ddbc:	687b      	ldr	r3, [r7, #4]
 800ddbe:	33d8      	adds	r3, #216	; 0xd8
 800ddc0:	4969      	ldr	r1, [pc, #420]	; (800df68 <problem_fetch+0xcc48>)
 800ddc2:	461a      	mov	r2, r3
 800ddc4:	460b      	mov	r3, r1
 800ddc6:	cb03      	ldmia	r3!, {r0, r1}
 800ddc8:	6010      	str	r0, [r2, #0]
 800ddca:	6051      	str	r1, [r2, #4]
 800ddcc:	881b      	ldrh	r3, [r3, #0]
 800ddce:	8113      	strh	r3, [r2, #8]
			strcpy(p->grade, "6C");
 800ddd0:	687b      	ldr	r3, [r7, #4]
 800ddd2:	33cc      	adds	r3, #204	; 0xcc
 800ddd4:	4a68      	ldr	r2, [pc, #416]	; (800df78 <problem_fetch+0xcc58>)
 800ddd6:	8811      	ldrh	r1, [r2, #0]
 800ddd8:	7892      	ldrb	r2, [r2, #2]
 800ddda:	8019      	strh	r1, [r3, #0]
 800dddc:	709a      	strb	r2, [r3, #2]
			break;
 800ddde:	f00c bfe5 	b.w	801adac <problem_fetch+0x19a8c>
		case 446 :
			strcpy(p->name,"FROCENZO A ROCCAMORICE");
 800dde2:	687b      	ldr	r3, [r7, #4]
 800dde4:	337c      	adds	r3, #124	; 0x7c
 800dde6:	4a65      	ldr	r2, [pc, #404]	; (800df7c <problem_fetch+0xcc5c>)
 800dde8:	461c      	mov	r4, r3
 800ddea:	4615      	mov	r5, r2
 800ddec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ddee:	6020      	str	r0, [r4, #0]
 800ddf0:	6061      	str	r1, [r4, #4]
 800ddf2:	60a2      	str	r2, [r4, #8]
 800ddf4:	60e3      	str	r3, [r4, #12]
 800ddf6:	6828      	ldr	r0, [r5, #0]
 800ddf8:	6120      	str	r0, [r4, #16]
 800ddfa:	88ab      	ldrh	r3, [r5, #4]
 800ddfc:	79aa      	ldrb	r2, [r5, #6]
 800ddfe:	82a3      	strh	r3, [r4, #20]
 800de00:	4613      	mov	r3, r2
 800de02:	75a3      	strb	r3, [r4, #22]
			p->moveSize = 5;
 800de04:	687b      	ldr	r3, [r7, #4]
 800de06:	2205      	movs	r2, #5
 800de08:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"E,E,B,D,A");
 800de0a:	687b      	ldr	r3, [r7, #4]
 800de0c:	3340      	adds	r3, #64	; 0x40
 800de0e:	495c      	ldr	r1, [pc, #368]	; (800df80 <problem_fetch+0xcc60>)
 800de10:	461a      	mov	r2, r3
 800de12:	460b      	mov	r3, r1
 800de14:	cb03      	ldmia	r3!, {r0, r1}
 800de16:	6010      	str	r0, [r2, #0]
 800de18:	6051      	str	r1, [r2, #4]
 800de1a:	881b      	ldrh	r3, [r3, #0]
 800de1c:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"6,8,12,15,18");
 800de1e:	687b      	ldr	r3, [r7, #4]
 800de20:	3304      	adds	r3, #4
 800de22:	4a58      	ldr	r2, [pc, #352]	; (800df84 <problem_fetch+0xcc64>)
 800de24:	461c      	mov	r4, r3
 800de26:	4613      	mov	r3, r2
 800de28:	cb07      	ldmia	r3!, {r0, r1, r2}
 800de2a:	6020      	str	r0, [r4, #0]
 800de2c:	6061      	str	r1, [r4, #4]
 800de2e:	60a2      	str	r2, [r4, #8]
 800de30:	781b      	ldrb	r3, [r3, #0]
 800de32:	7323      	strb	r3, [r4, #12]
			strcpy(p->startFinish, "s,d,d,d,e");
 800de34:	687b      	ldr	r3, [r7, #4]
 800de36:	33d8      	adds	r3, #216	; 0xd8
 800de38:	494b      	ldr	r1, [pc, #300]	; (800df68 <problem_fetch+0xcc48>)
 800de3a:	461a      	mov	r2, r3
 800de3c:	460b      	mov	r3, r1
 800de3e:	cb03      	ldmia	r3!, {r0, r1}
 800de40:	6010      	str	r0, [r2, #0]
 800de42:	6051      	str	r1, [r2, #4]
 800de44:	881b      	ldrh	r3, [r3, #0]
 800de46:	8113      	strh	r3, [r2, #8]
			strcpy(p->grade, "7A");
 800de48:	687b      	ldr	r3, [r7, #4]
 800de4a:	33cc      	adds	r3, #204	; 0xcc
 800de4c:	4a4e      	ldr	r2, [pc, #312]	; (800df88 <problem_fetch+0xcc68>)
 800de4e:	8811      	ldrh	r1, [r2, #0]
 800de50:	7892      	ldrb	r2, [r2, #2]
 800de52:	8019      	strh	r1, [r3, #0]
 800de54:	709a      	strb	r2, [r3, #2]
			break;
 800de56:	f00c bfa9 	b.w	801adac <problem_fetch+0x19a8c>
		case 447 :
			strcpy(p->name,"FINGERY BY NATURE");
 800de5a:	687b      	ldr	r3, [r7, #4]
 800de5c:	337c      	adds	r3, #124	; 0x7c
 800de5e:	4a4b      	ldr	r2, [pc, #300]	; (800df8c <problem_fetch+0xcc6c>)
 800de60:	461d      	mov	r5, r3
 800de62:	4614      	mov	r4, r2
 800de64:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800de66:	6028      	str	r0, [r5, #0]
 800de68:	6069      	str	r1, [r5, #4]
 800de6a:	60aa      	str	r2, [r5, #8]
 800de6c:	60eb      	str	r3, [r5, #12]
 800de6e:	8823      	ldrh	r3, [r4, #0]
 800de70:	822b      	strh	r3, [r5, #16]
			p->moveSize = 6;
 800de72:	687b      	ldr	r3, [r7, #4]
 800de74:	2206      	movs	r2, #6
 800de76:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"G,E,G,B,E,D");
 800de78:	687b      	ldr	r3, [r7, #4]
 800de7a:	3340      	adds	r3, #64	; 0x40
 800de7c:	4a44      	ldr	r2, [pc, #272]	; (800df90 <problem_fetch+0xcc70>)
 800de7e:	461c      	mov	r4, r3
 800de80:	4613      	mov	r3, r2
 800de82:	cb07      	ldmia	r3!, {r0, r1, r2}
 800de84:	6020      	str	r0, [r4, #0]
 800de86:	6061      	str	r1, [r4, #4]
 800de88:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,6,10,10,14,18");
 800de8a:	687b      	ldr	r3, [r7, #4]
 800de8c:	3304      	adds	r3, #4
 800de8e:	4a41      	ldr	r2, [pc, #260]	; (800df94 <problem_fetch+0xcc74>)
 800de90:	461c      	mov	r4, r3
 800de92:	4615      	mov	r5, r2
 800de94:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800de96:	6020      	str	r0, [r4, #0]
 800de98:	6061      	str	r1, [r4, #4]
 800de9a:	60a2      	str	r2, [r4, #8]
 800de9c:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish, "s,d,d,d,d,e");
 800de9e:	687b      	ldr	r3, [r7, #4]
 800dea0:	33d8      	adds	r3, #216	; 0xd8
 800dea2:	4a3d      	ldr	r2, [pc, #244]	; (800df98 <problem_fetch+0xcc78>)
 800dea4:	461c      	mov	r4, r3
 800dea6:	4613      	mov	r3, r2
 800dea8:	cb07      	ldmia	r3!, {r0, r1, r2}
 800deaa:	6020      	str	r0, [r4, #0]
 800deac:	6061      	str	r1, [r4, #4]
 800deae:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade, "7A");
 800deb0:	687b      	ldr	r3, [r7, #4]
 800deb2:	33cc      	adds	r3, #204	; 0xcc
 800deb4:	4a34      	ldr	r2, [pc, #208]	; (800df88 <problem_fetch+0xcc68>)
 800deb6:	8811      	ldrh	r1, [r2, #0]
 800deb8:	7892      	ldrb	r2, [r2, #2]
 800deba:	8019      	strh	r1, [r3, #0]
 800debc:	709a      	strb	r2, [r3, #2]
			break;
 800debe:	f00c bf75 	b.w	801adac <problem_fetch+0x19a8c>
		case 448 :
			strcpy(p->name,"QUARTER PAST MIDNIGHT");
 800dec2:	687b      	ldr	r3, [r7, #4]
 800dec4:	337c      	adds	r3, #124	; 0x7c
 800dec6:	4a35      	ldr	r2, [pc, #212]	; (800df9c <problem_fetch+0xcc7c>)
 800dec8:	461d      	mov	r5, r3
 800deca:	4614      	mov	r4, r2
 800decc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800dece:	6028      	str	r0, [r5, #0]
 800ded0:	6069      	str	r1, [r5, #4]
 800ded2:	60aa      	str	r2, [r5, #8]
 800ded4:	60eb      	str	r3, [r5, #12]
 800ded6:	6820      	ldr	r0, [r4, #0]
 800ded8:	6128      	str	r0, [r5, #16]
 800deda:	88a3      	ldrh	r3, [r4, #4]
 800dedc:	82ab      	strh	r3, [r5, #20]
			p->moveSize = 7;
 800dede:	687b      	ldr	r3, [r7, #4]
 800dee0:	2207      	movs	r2, #7
 800dee2:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"J,H,G,F,J,G,I");
 800dee4:	687b      	ldr	r3, [r7, #4]
 800dee6:	3340      	adds	r3, #64	; 0x40
 800dee8:	4a2d      	ldr	r2, [pc, #180]	; (800dfa0 <problem_fetch+0xcc80>)
 800deea:	461c      	mov	r4, r3
 800deec:	4613      	mov	r3, r2
 800deee:	cb07      	ldmia	r3!, {r0, r1, r2}
 800def0:	6020      	str	r0, [r4, #0]
 800def2:	6061      	str	r1, [r4, #4]
 800def4:	60a2      	str	r2, [r4, #8]
 800def6:	881b      	ldrh	r3, [r3, #0]
 800def8:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,5,9,11,13,15,18");
 800defa:	687b      	ldr	r3, [r7, #4]
 800defc:	3304      	adds	r3, #4
 800defe:	4a29      	ldr	r2, [pc, #164]	; (800dfa4 <problem_fetch+0xcc84>)
 800df00:	461d      	mov	r5, r3
 800df02:	4614      	mov	r4, r2
 800df04:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800df06:	6028      	str	r0, [r5, #0]
 800df08:	6069      	str	r1, [r5, #4]
 800df0a:	60aa      	str	r2, [r5, #8]
 800df0c:	60eb      	str	r3, [r5, #12]
 800df0e:	8823      	ldrh	r3, [r4, #0]
 800df10:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish, "s,s,d,d,d,d,e");
 800df12:	687b      	ldr	r3, [r7, #4]
 800df14:	33d8      	adds	r3, #216	; 0xd8
 800df16:	4a24      	ldr	r2, [pc, #144]	; (800dfa8 <problem_fetch+0xcc88>)
 800df18:	461c      	mov	r4, r3
 800df1a:	4613      	mov	r3, r2
 800df1c:	cb07      	ldmia	r3!, {r0, r1, r2}
 800df1e:	6020      	str	r0, [r4, #0]
 800df20:	6061      	str	r1, [r4, #4]
 800df22:	60a2      	str	r2, [r4, #8]
 800df24:	881b      	ldrh	r3, [r3, #0]
 800df26:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade, "6C+");
 800df28:	687b      	ldr	r3, [r7, #4]
 800df2a:	33cc      	adds	r3, #204	; 0xcc
 800df2c:	4a1f      	ldr	r2, [pc, #124]	; (800dfac <problem_fetch+0xcc8c>)
 800df2e:	6810      	ldr	r0, [r2, #0]
 800df30:	6018      	str	r0, [r3, #0]
			break;
 800df32:	f00c bf3b 	b.w	801adac <problem_fetch+0x19a8c>
 800df36:	bf00      	nop
 800df38:	08025a00 	.word	0x08025a00
 800df3c:	08025a0c 	.word	0x08025a0c
 800df40:	08025a20 	.word	0x08025a20
 800df44:	0802187c 	.word	0x0802187c
 800df48:	080212b0 	.word	0x080212b0
 800df4c:	08025a38 	.word	0x08025a38
 800df50:	08025a44 	.word	0x08025a44
 800df54:	08025a54 	.word	0x08025a54
 800df58:	080214cc 	.word	0x080214cc
 800df5c:	08025a68 	.word	0x08025a68
 800df60:	08025a70 	.word	0x08025a70
 800df64:	0802347c 	.word	0x0802347c
 800df68:	08021320 	.word	0x08021320
 800df6c:	08025a7c 	.word	0x08025a7c
 800df70:	08025a88 	.word	0x08025a88
 800df74:	08021e8c 	.word	0x08021e8c
 800df78:	08021370 	.word	0x08021370
 800df7c:	08025a94 	.word	0x08025a94
 800df80:	08025aac 	.word	0x08025aac
 800df84:	08025ab8 	.word	0x08025ab8
 800df88:	080212f4 	.word	0x080212f4
 800df8c:	08025ac8 	.word	0x08025ac8
 800df90:	08025adc 	.word	0x08025adc
 800df94:	08025ae8 	.word	0x08025ae8
 800df98:	0802139c 	.word	0x0802139c
 800df9c:	08025af8 	.word	0x08025af8
 800dfa0:	08025b10 	.word	0x08025b10
 800dfa4:	08025b20 	.word	0x08025b20
 800dfa8:	080212a0 	.word	0x080212a0
 800dfac:	080213a8 	.word	0x080213a8
		case 449 :
			strcpy(p->name,"RECHARGE");
 800dfb0:	687b      	ldr	r3, [r7, #4]
 800dfb2:	337c      	adds	r3, #124	; 0x7c
 800dfb4:	49b5      	ldr	r1, [pc, #724]	; (800e28c <problem_fetch+0xcf6c>)
 800dfb6:	461a      	mov	r2, r3
 800dfb8:	460b      	mov	r3, r1
 800dfba:	cb03      	ldmia	r3!, {r0, r1}
 800dfbc:	6010      	str	r0, [r2, #0]
 800dfbe:	6051      	str	r1, [r2, #4]
 800dfc0:	781b      	ldrb	r3, [r3, #0]
 800dfc2:	7213      	strb	r3, [r2, #8]
			p->moveSize = 5;
 800dfc4:	687b      	ldr	r3, [r7, #4]
 800dfc6:	2205      	movs	r2, #5
 800dfc8:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"E,H,G,G,A");
 800dfca:	687b      	ldr	r3, [r7, #4]
 800dfcc:	3340      	adds	r3, #64	; 0x40
 800dfce:	49b0      	ldr	r1, [pc, #704]	; (800e290 <problem_fetch+0xcf70>)
 800dfd0:	461a      	mov	r2, r3
 800dfd2:	460b      	mov	r3, r1
 800dfd4:	cb03      	ldmia	r3!, {r0, r1}
 800dfd6:	6010      	str	r0, [r2, #0]
 800dfd8:	6051      	str	r1, [r2, #4]
 800dfda:	881b      	ldrh	r3, [r3, #0]
 800dfdc:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"6,10,14,17,18");
 800dfde:	687b      	ldr	r3, [r7, #4]
 800dfe0:	3304      	adds	r3, #4
 800dfe2:	4aac      	ldr	r2, [pc, #688]	; (800e294 <problem_fetch+0xcf74>)
 800dfe4:	461c      	mov	r4, r3
 800dfe6:	4613      	mov	r3, r2
 800dfe8:	cb07      	ldmia	r3!, {r0, r1, r2}
 800dfea:	6020      	str	r0, [r4, #0]
 800dfec:	6061      	str	r1, [r4, #4]
 800dfee:	60a2      	str	r2, [r4, #8]
 800dff0:	881b      	ldrh	r3, [r3, #0]
 800dff2:	81a3      	strh	r3, [r4, #12]
			strcpy(p->startFinish, "s,d,d,d,e");
 800dff4:	687b      	ldr	r3, [r7, #4]
 800dff6:	33d8      	adds	r3, #216	; 0xd8
 800dff8:	49a7      	ldr	r1, [pc, #668]	; (800e298 <problem_fetch+0xcf78>)
 800dffa:	461a      	mov	r2, r3
 800dffc:	460b      	mov	r3, r1
 800dffe:	cb03      	ldmia	r3!, {r0, r1}
 800e000:	6010      	str	r0, [r2, #0]
 800e002:	6051      	str	r1, [r2, #4]
 800e004:	881b      	ldrh	r3, [r3, #0]
 800e006:	8113      	strh	r3, [r2, #8]
			strcpy(p->grade, "7A+");
 800e008:	687b      	ldr	r3, [r7, #4]
 800e00a:	33cc      	adds	r3, #204	; 0xcc
 800e00c:	4aa3      	ldr	r2, [pc, #652]	; (800e29c <problem_fetch+0xcf7c>)
 800e00e:	6810      	ldr	r0, [r2, #0]
 800e010:	6018      	str	r0, [r3, #0]
			break;
 800e012:	f00c becb 	b.w	801adac <problem_fetch+0x19a8c>
		case 45 :
			strcpy(p->name,"TESS WIDE");
 800e016:	687b      	ldr	r3, [r7, #4]
 800e018:	337c      	adds	r3, #124	; 0x7c
 800e01a:	49a1      	ldr	r1, [pc, #644]	; (800e2a0 <problem_fetch+0xcf80>)
 800e01c:	461a      	mov	r2, r3
 800e01e:	460b      	mov	r3, r1
 800e020:	cb03      	ldmia	r3!, {r0, r1}
 800e022:	6010      	str	r0, [r2, #0]
 800e024:	6051      	str	r1, [r2, #4]
 800e026:	881b      	ldrh	r3, [r3, #0]
 800e028:	8113      	strh	r3, [r2, #8]
			p->moveSize = 7;
 800e02a:	687b      	ldr	r3, [r7, #4]
 800e02c:	2207      	movs	r2, #7
 800e02e:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"C,E,E,H,C,D,D");
 800e030:	687b      	ldr	r3, [r7, #4]
 800e032:	3340      	adds	r3, #64	; 0x40
 800e034:	4a9b      	ldr	r2, [pc, #620]	; (800e2a4 <problem_fetch+0xcf84>)
 800e036:	461c      	mov	r4, r3
 800e038:	4613      	mov	r3, r2
 800e03a:	cb07      	ldmia	r3!, {r0, r1, r2}
 800e03c:	6020      	str	r0, [r4, #0]
 800e03e:	6061      	str	r1, [r4, #4]
 800e040:	60a2      	str	r2, [r4, #8]
 800e042:	881b      	ldrh	r3, [r3, #0]
 800e044:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,6,8,10,13,15,18");
 800e046:	687b      	ldr	r3, [r7, #4]
 800e048:	3304      	adds	r3, #4
 800e04a:	4a97      	ldr	r2, [pc, #604]	; (800e2a8 <problem_fetch+0xcf88>)
 800e04c:	461d      	mov	r5, r3
 800e04e:	4614      	mov	r4, r2
 800e050:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800e052:	6028      	str	r0, [r5, #0]
 800e054:	6069      	str	r1, [r5, #4]
 800e056:	60aa      	str	r2, [r5, #8]
 800e058:	60eb      	str	r3, [r5, #12]
 800e05a:	8823      	ldrh	r3, [r4, #0]
 800e05c:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish, "s,s,d,d,d,d,e");
 800e05e:	687b      	ldr	r3, [r7, #4]
 800e060:	33d8      	adds	r3, #216	; 0xd8
 800e062:	4a92      	ldr	r2, [pc, #584]	; (800e2ac <problem_fetch+0xcf8c>)
 800e064:	461c      	mov	r4, r3
 800e066:	4613      	mov	r3, r2
 800e068:	cb07      	ldmia	r3!, {r0, r1, r2}
 800e06a:	6020      	str	r0, [r4, #0]
 800e06c:	6061      	str	r1, [r4, #4]
 800e06e:	60a2      	str	r2, [r4, #8]
 800e070:	881b      	ldrh	r3, [r3, #0]
 800e072:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade, "6C");
 800e074:	687b      	ldr	r3, [r7, #4]
 800e076:	33cc      	adds	r3, #204	; 0xcc
 800e078:	4a8d      	ldr	r2, [pc, #564]	; (800e2b0 <problem_fetch+0xcf90>)
 800e07a:	8811      	ldrh	r1, [r2, #0]
 800e07c:	7892      	ldrb	r2, [r2, #2]
 800e07e:	8019      	strh	r1, [r3, #0]
 800e080:	709a      	strb	r2, [r3, #2]
			break;
 800e082:	f00c be93 	b.w	801adac <problem_fetch+0x19a8c>
		case 450 :
			strcpy(p->name,"LOCK IT DOWN");
 800e086:	687b      	ldr	r3, [r7, #4]
 800e088:	337c      	adds	r3, #124	; 0x7c
 800e08a:	4a8a      	ldr	r2, [pc, #552]	; (800e2b4 <problem_fetch+0xcf94>)
 800e08c:	461c      	mov	r4, r3
 800e08e:	4613      	mov	r3, r2
 800e090:	cb07      	ldmia	r3!, {r0, r1, r2}
 800e092:	6020      	str	r0, [r4, #0]
 800e094:	6061      	str	r1, [r4, #4]
 800e096:	60a2      	str	r2, [r4, #8]
 800e098:	781b      	ldrb	r3, [r3, #0]
 800e09a:	7323      	strb	r3, [r4, #12]
			p->moveSize = 6;
 800e09c:	687b      	ldr	r3, [r7, #4]
 800e09e:	2206      	movs	r2, #6
 800e0a0:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"J,K,J,E,H,D");
 800e0a2:	687b      	ldr	r3, [r7, #4]
 800e0a4:	3340      	adds	r3, #64	; 0x40
 800e0a6:	4a84      	ldr	r2, [pc, #528]	; (800e2b8 <problem_fetch+0xcf98>)
 800e0a8:	461c      	mov	r4, r3
 800e0aa:	4613      	mov	r3, r2
 800e0ac:	cb07      	ldmia	r3!, {r0, r1, r2}
 800e0ae:	6020      	str	r0, [r4, #0]
 800e0b0:	6061      	str	r1, [r4, #4]
 800e0b2:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,9,12,12,16,18");
 800e0b4:	687b      	ldr	r3, [r7, #4]
 800e0b6:	3304      	adds	r3, #4
 800e0b8:	4a80      	ldr	r2, [pc, #512]	; (800e2bc <problem_fetch+0xcf9c>)
 800e0ba:	461c      	mov	r4, r3
 800e0bc:	4615      	mov	r5, r2
 800e0be:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e0c0:	6020      	str	r0, [r4, #0]
 800e0c2:	6061      	str	r1, [r4, #4]
 800e0c4:	60a2      	str	r2, [r4, #8]
 800e0c6:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish, "s,d,d,d,d,e");
 800e0c8:	687b      	ldr	r3, [r7, #4]
 800e0ca:	33d8      	adds	r3, #216	; 0xd8
 800e0cc:	4a7c      	ldr	r2, [pc, #496]	; (800e2c0 <problem_fetch+0xcfa0>)
 800e0ce:	461c      	mov	r4, r3
 800e0d0:	4613      	mov	r3, r2
 800e0d2:	cb07      	ldmia	r3!, {r0, r1, r2}
 800e0d4:	6020      	str	r0, [r4, #0]
 800e0d6:	6061      	str	r1, [r4, #4]
 800e0d8:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade, "7A+");
 800e0da:	687b      	ldr	r3, [r7, #4]
 800e0dc:	33cc      	adds	r3, #204	; 0xcc
 800e0de:	4a6f      	ldr	r2, [pc, #444]	; (800e29c <problem_fetch+0xcf7c>)
 800e0e0:	6810      	ldr	r0, [r2, #0]
 800e0e2:	6018      	str	r0, [r3, #0]
			break;
 800e0e4:	f00c be62 	b.w	801adac <problem_fetch+0x19a8c>
		case 451 :
			strcpy(p->name,"BOOTHY TOOTHY");
 800e0e8:	687b      	ldr	r3, [r7, #4]
 800e0ea:	337c      	adds	r3, #124	; 0x7c
 800e0ec:	4a75      	ldr	r2, [pc, #468]	; (800e2c4 <problem_fetch+0xcfa4>)
 800e0ee:	461c      	mov	r4, r3
 800e0f0:	4613      	mov	r3, r2
 800e0f2:	cb07      	ldmia	r3!, {r0, r1, r2}
 800e0f4:	6020      	str	r0, [r4, #0]
 800e0f6:	6061      	str	r1, [r4, #4]
 800e0f8:	60a2      	str	r2, [r4, #8]
 800e0fa:	881b      	ldrh	r3, [r3, #0]
 800e0fc:	81a3      	strh	r3, [r4, #12]
			p->moveSize = 6;
 800e0fe:	687b      	ldr	r3, [r7, #4]
 800e100:	2206      	movs	r2, #6
 800e102:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"B,G,E,J,E,I");
 800e104:	687b      	ldr	r3, [r7, #4]
 800e106:	3340      	adds	r3, #64	; 0x40
 800e108:	4a6f      	ldr	r2, [pc, #444]	; (800e2c8 <problem_fetch+0xcfa8>)
 800e10a:	461c      	mov	r4, r3
 800e10c:	4613      	mov	r3, r2
 800e10e:	cb07      	ldmia	r3!, {r0, r1, r2}
 800e110:	6020      	str	r0, [r4, #0]
 800e112:	6061      	str	r1, [r4, #4]
 800e114:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"6,6,9,12,14,18");
 800e116:	687b      	ldr	r3, [r7, #4]
 800e118:	3304      	adds	r3, #4
 800e11a:	4a6c      	ldr	r2, [pc, #432]	; (800e2cc <problem_fetch+0xcfac>)
 800e11c:	461c      	mov	r4, r3
 800e11e:	4613      	mov	r3, r2
 800e120:	cb07      	ldmia	r3!, {r0, r1, r2}
 800e122:	6020      	str	r0, [r4, #0]
 800e124:	6061      	str	r1, [r4, #4]
 800e126:	60a2      	str	r2, [r4, #8]
 800e128:	881a      	ldrh	r2, [r3, #0]
 800e12a:	789b      	ldrb	r3, [r3, #2]
 800e12c:	81a2      	strh	r2, [r4, #12]
 800e12e:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish, "s,s,d,d,d,e");
 800e130:	687b      	ldr	r3, [r7, #4]
 800e132:	33d8      	adds	r3, #216	; 0xd8
 800e134:	4a66      	ldr	r2, [pc, #408]	; (800e2d0 <problem_fetch+0xcfb0>)
 800e136:	461c      	mov	r4, r3
 800e138:	4613      	mov	r3, r2
 800e13a:	cb07      	ldmia	r3!, {r0, r1, r2}
 800e13c:	6020      	str	r0, [r4, #0]
 800e13e:	6061      	str	r1, [r4, #4]
 800e140:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade, "6B+");
 800e142:	687b      	ldr	r3, [r7, #4]
 800e144:	33cc      	adds	r3, #204	; 0xcc
 800e146:	4a63      	ldr	r2, [pc, #396]	; (800e2d4 <problem_fetch+0xcfb4>)
 800e148:	6810      	ldr	r0, [r2, #0]
 800e14a:	6018      	str	r0, [r3, #0]
			break;
 800e14c:	f00c be2e 	b.w	801adac <problem_fetch+0x19a8c>
		case 452 :
			strcpy(p->name,"THE EASY EASY");
 800e150:	687b      	ldr	r3, [r7, #4]
 800e152:	337c      	adds	r3, #124	; 0x7c
 800e154:	4a60      	ldr	r2, [pc, #384]	; (800e2d8 <problem_fetch+0xcfb8>)
 800e156:	461c      	mov	r4, r3
 800e158:	4613      	mov	r3, r2
 800e15a:	cb07      	ldmia	r3!, {r0, r1, r2}
 800e15c:	6020      	str	r0, [r4, #0]
 800e15e:	6061      	str	r1, [r4, #4]
 800e160:	60a2      	str	r2, [r4, #8]
 800e162:	881b      	ldrh	r3, [r3, #0]
 800e164:	81a3      	strh	r3, [r4, #12]
			p->moveSize = 5;
 800e166:	687b      	ldr	r3, [r7, #4]
 800e168:	2205      	movs	r2, #5
 800e16a:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"G,H,G,E,I");
 800e16c:	687b      	ldr	r3, [r7, #4]
 800e16e:	3340      	adds	r3, #64	; 0x40
 800e170:	495a      	ldr	r1, [pc, #360]	; (800e2dc <problem_fetch+0xcfbc>)
 800e172:	461a      	mov	r2, r3
 800e174:	460b      	mov	r3, r1
 800e176:	cb03      	ldmia	r3!, {r0, r1}
 800e178:	6010      	str	r0, [r2, #0]
 800e17a:	6051      	str	r1, [r2, #4]
 800e17c:	881b      	ldrh	r3, [r3, #0]
 800e17e:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"6,10,14,8,18");
 800e180:	687b      	ldr	r3, [r7, #4]
 800e182:	3304      	adds	r3, #4
 800e184:	4a56      	ldr	r2, [pc, #344]	; (800e2e0 <problem_fetch+0xcfc0>)
 800e186:	461c      	mov	r4, r3
 800e188:	4613      	mov	r3, r2
 800e18a:	cb07      	ldmia	r3!, {r0, r1, r2}
 800e18c:	6020      	str	r0, [r4, #0]
 800e18e:	6061      	str	r1, [r4, #4]
 800e190:	60a2      	str	r2, [r4, #8]
 800e192:	781b      	ldrb	r3, [r3, #0]
 800e194:	7323      	strb	r3, [r4, #12]
			strcpy(p->startFinish, "s,d,d,d,e");
 800e196:	687b      	ldr	r3, [r7, #4]
 800e198:	33d8      	adds	r3, #216	; 0xd8
 800e19a:	493f      	ldr	r1, [pc, #252]	; (800e298 <problem_fetch+0xcf78>)
 800e19c:	461a      	mov	r2, r3
 800e19e:	460b      	mov	r3, r1
 800e1a0:	cb03      	ldmia	r3!, {r0, r1}
 800e1a2:	6010      	str	r0, [r2, #0]
 800e1a4:	6051      	str	r1, [r2, #4]
 800e1a6:	881b      	ldrh	r3, [r3, #0]
 800e1a8:	8113      	strh	r3, [r2, #8]
			strcpy(p->grade, "6B+");
 800e1aa:	687b      	ldr	r3, [r7, #4]
 800e1ac:	33cc      	adds	r3, #204	; 0xcc
 800e1ae:	4a49      	ldr	r2, [pc, #292]	; (800e2d4 <problem_fetch+0xcfb4>)
 800e1b0:	6810      	ldr	r0, [r2, #0]
 800e1b2:	6018      	str	r0, [r3, #0]
			break;
 800e1b4:	f00c bdfa 	b.w	801adac <problem_fetch+0x19a8c>
		case 453 :
			strcpy(p->name,"BLACKLISTED");
 800e1b8:	687b      	ldr	r3, [r7, #4]
 800e1ba:	337c      	adds	r3, #124	; 0x7c
 800e1bc:	4a49      	ldr	r2, [pc, #292]	; (800e2e4 <problem_fetch+0xcfc4>)
 800e1be:	461c      	mov	r4, r3
 800e1c0:	4613      	mov	r3, r2
 800e1c2:	cb07      	ldmia	r3!, {r0, r1, r2}
 800e1c4:	6020      	str	r0, [r4, #0]
 800e1c6:	6061      	str	r1, [r4, #4]
 800e1c8:	60a2      	str	r2, [r4, #8]
			p->moveSize = 6;
 800e1ca:	687b      	ldr	r3, [r7, #4]
 800e1cc:	2206      	movs	r2, #6
 800e1ce:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"G,E,G,C,D,A");
 800e1d0:	687b      	ldr	r3, [r7, #4]
 800e1d2:	3340      	adds	r3, #64	; 0x40
 800e1d4:	4a44      	ldr	r2, [pc, #272]	; (800e2e8 <problem_fetch+0xcfc8>)
 800e1d6:	461c      	mov	r4, r3
 800e1d8:	4613      	mov	r3, r2
 800e1da:	cb07      	ldmia	r3!, {r0, r1, r2}
 800e1dc:	6020      	str	r0, [r4, #0]
 800e1de:	6061      	str	r1, [r4, #4]
 800e1e0:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,8,10,13,15,18");
 800e1e2:	687b      	ldr	r3, [r7, #4]
 800e1e4:	3304      	adds	r3, #4
 800e1e6:	4a41      	ldr	r2, [pc, #260]	; (800e2ec <problem_fetch+0xcfcc>)
 800e1e8:	461c      	mov	r4, r3
 800e1ea:	4615      	mov	r5, r2
 800e1ec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e1ee:	6020      	str	r0, [r4, #0]
 800e1f0:	6061      	str	r1, [r4, #4]
 800e1f2:	60a2      	str	r2, [r4, #8]
 800e1f4:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish, "s,d,d,d,d,e");
 800e1f6:	687b      	ldr	r3, [r7, #4]
 800e1f8:	33d8      	adds	r3, #216	; 0xd8
 800e1fa:	4a31      	ldr	r2, [pc, #196]	; (800e2c0 <problem_fetch+0xcfa0>)
 800e1fc:	461c      	mov	r4, r3
 800e1fe:	4613      	mov	r3, r2
 800e200:	cb07      	ldmia	r3!, {r0, r1, r2}
 800e202:	6020      	str	r0, [r4, #0]
 800e204:	6061      	str	r1, [r4, #4]
 800e206:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade, "6C+");
 800e208:	687b      	ldr	r3, [r7, #4]
 800e20a:	33cc      	adds	r3, #204	; 0xcc
 800e20c:	4a38      	ldr	r2, [pc, #224]	; (800e2f0 <problem_fetch+0xcfd0>)
 800e20e:	6810      	ldr	r0, [r2, #0]
 800e210:	6018      	str	r0, [r3, #0]
			break;
 800e212:	f00c bdcb 	b.w	801adac <problem_fetch+0x19a8c>
		case 454 :
			strcpy(p->name,"BUMPIN GO");
 800e216:	687b      	ldr	r3, [r7, #4]
 800e218:	337c      	adds	r3, #124	; 0x7c
 800e21a:	4936      	ldr	r1, [pc, #216]	; (800e2f4 <problem_fetch+0xcfd4>)
 800e21c:	461a      	mov	r2, r3
 800e21e:	460b      	mov	r3, r1
 800e220:	cb03      	ldmia	r3!, {r0, r1}
 800e222:	6010      	str	r0, [r2, #0]
 800e224:	6051      	str	r1, [r2, #4]
 800e226:	881b      	ldrh	r3, [r3, #0]
 800e228:	8113      	strh	r3, [r2, #8]
			p->moveSize = 7;
 800e22a:	687b      	ldr	r3, [r7, #4]
 800e22c:	2207      	movs	r2, #7
 800e22e:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"G,J,H,H,I,G,I");
 800e230:	687b      	ldr	r3, [r7, #4]
 800e232:	3340      	adds	r3, #64	; 0x40
 800e234:	4a30      	ldr	r2, [pc, #192]	; (800e2f8 <problem_fetch+0xcfd8>)
 800e236:	461c      	mov	r4, r3
 800e238:	4613      	mov	r3, r2
 800e23a:	cb07      	ldmia	r3!, {r0, r1, r2}
 800e23c:	6020      	str	r0, [r4, #0]
 800e23e:	6061      	str	r1, [r4, #4]
 800e240:	60a2      	str	r2, [r4, #8]
 800e242:	881b      	ldrh	r3, [r3, #0]
 800e244:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,7,10,12,14,17,18");
 800e246:	687b      	ldr	r3, [r7, #4]
 800e248:	3304      	adds	r3, #4
 800e24a:	4a2c      	ldr	r2, [pc, #176]	; (800e2fc <problem_fetch+0xcfdc>)
 800e24c:	461d      	mov	r5, r3
 800e24e:	4614      	mov	r4, r2
 800e250:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800e252:	6028      	str	r0, [r5, #0]
 800e254:	6069      	str	r1, [r5, #4]
 800e256:	60aa      	str	r2, [r5, #8]
 800e258:	60eb      	str	r3, [r5, #12]
 800e25a:	8823      	ldrh	r3, [r4, #0]
 800e25c:	78a2      	ldrb	r2, [r4, #2]
 800e25e:	822b      	strh	r3, [r5, #16]
 800e260:	4613      	mov	r3, r2
 800e262:	74ab      	strb	r3, [r5, #18]
			strcpy(p->startFinish, "s,d,d,d,d,d,e");
 800e264:	687b      	ldr	r3, [r7, #4]
 800e266:	33d8      	adds	r3, #216	; 0xd8
 800e268:	4a25      	ldr	r2, [pc, #148]	; (800e300 <problem_fetch+0xcfe0>)
 800e26a:	461c      	mov	r4, r3
 800e26c:	4613      	mov	r3, r2
 800e26e:	cb07      	ldmia	r3!, {r0, r1, r2}
 800e270:	6020      	str	r0, [r4, #0]
 800e272:	6061      	str	r1, [r4, #4]
 800e274:	60a2      	str	r2, [r4, #8]
 800e276:	881b      	ldrh	r3, [r3, #0]
 800e278:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade, "7A");
 800e27a:	687b      	ldr	r3, [r7, #4]
 800e27c:	33cc      	adds	r3, #204	; 0xcc
 800e27e:	4a21      	ldr	r2, [pc, #132]	; (800e304 <problem_fetch+0xcfe4>)
 800e280:	8811      	ldrh	r1, [r2, #0]
 800e282:	7892      	ldrb	r2, [r2, #2]
 800e284:	8019      	strh	r1, [r3, #0]
 800e286:	709a      	strb	r2, [r3, #2]
			break;
 800e288:	f00c bd90 	b.w	801adac <problem_fetch+0x19a8c>
 800e28c:	08025b34 	.word	0x08025b34
 800e290:	08025b40 	.word	0x08025b40
 800e294:	08025b4c 	.word	0x08025b4c
 800e298:	08021320 	.word	0x08021320
 800e29c:	08021424 	.word	0x08021424
 800e2a0:	08025b5c 	.word	0x08025b5c
 800e2a4:	08025b68 	.word	0x08025b68
 800e2a8:	08025b78 	.word	0x08025b78
 800e2ac:	080212a0 	.word	0x080212a0
 800e2b0:	08021370 	.word	0x08021370
 800e2b4:	08025b8c 	.word	0x08025b8c
 800e2b8:	08025b9c 	.word	0x08025b9c
 800e2bc:	08025ba8 	.word	0x08025ba8
 800e2c0:	0802139c 	.word	0x0802139c
 800e2c4:	08025bb8 	.word	0x08025bb8
 800e2c8:	08025bc8 	.word	0x08025bc8
 800e2cc:	08025bd4 	.word	0x08025bd4
 800e2d0:	08021910 	.word	0x08021910
 800e2d4:	080212b0 	.word	0x080212b0
 800e2d8:	08025be4 	.word	0x08025be4
 800e2dc:	08025bf4 	.word	0x08025bf4
 800e2e0:	08025c00 	.word	0x08025c00
 800e2e4:	08025c10 	.word	0x08025c10
 800e2e8:	08025c1c 	.word	0x08025c1c
 800e2ec:	08021768 	.word	0x08021768
 800e2f0:	080213a8 	.word	0x080213a8
 800e2f4:	08025c28 	.word	0x08025c28
 800e2f8:	08025c34 	.word	0x08025c34
 800e2fc:	08025c44 	.word	0x08025c44
 800e300:	08021494 	.word	0x08021494
 800e304:	080212f4 	.word	0x080212f4
		case 455 :
			strcpy(p->name,"DESERT ROSE");
 800e308:	687b      	ldr	r3, [r7, #4]
 800e30a:	337c      	adds	r3, #124	; 0x7c
 800e30c:	4abe      	ldr	r2, [pc, #760]	; (800e608 <problem_fetch+0xd2e8>)
 800e30e:	461c      	mov	r4, r3
 800e310:	4613      	mov	r3, r2
 800e312:	cb07      	ldmia	r3!, {r0, r1, r2}
 800e314:	6020      	str	r0, [r4, #0]
 800e316:	6061      	str	r1, [r4, #4]
 800e318:	60a2      	str	r2, [r4, #8]
			p->moveSize = 6;
 800e31a:	687b      	ldr	r3, [r7, #4]
 800e31c:	2206      	movs	r2, #6
 800e31e:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"J,H,G,J,G,I");
 800e320:	687b      	ldr	r3, [r7, #4]
 800e322:	3340      	adds	r3, #64	; 0x40
 800e324:	4ab9      	ldr	r2, [pc, #740]	; (800e60c <problem_fetch+0xd2ec>)
 800e326:	461c      	mov	r4, r3
 800e328:	4613      	mov	r3, r2
 800e32a:	cb07      	ldmia	r3!, {r0, r1, r2}
 800e32c:	6020      	str	r0, [r4, #0]
 800e32e:	6061      	str	r1, [r4, #4]
 800e330:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,8,9,12,15,18");
 800e332:	687b      	ldr	r3, [r7, #4]
 800e334:	3304      	adds	r3, #4
 800e336:	4ab6      	ldr	r2, [pc, #728]	; (800e610 <problem_fetch+0xd2f0>)
 800e338:	461c      	mov	r4, r3
 800e33a:	4613      	mov	r3, r2
 800e33c:	cb07      	ldmia	r3!, {r0, r1, r2}
 800e33e:	6020      	str	r0, [r4, #0]
 800e340:	6061      	str	r1, [r4, #4]
 800e342:	60a2      	str	r2, [r4, #8]
 800e344:	881a      	ldrh	r2, [r3, #0]
 800e346:	789b      	ldrb	r3, [r3, #2]
 800e348:	81a2      	strh	r2, [r4, #12]
 800e34a:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish, "s,d,d,d,d,e");
 800e34c:	687b      	ldr	r3, [r7, #4]
 800e34e:	33d8      	adds	r3, #216	; 0xd8
 800e350:	4ab0      	ldr	r2, [pc, #704]	; (800e614 <problem_fetch+0xd2f4>)
 800e352:	461c      	mov	r4, r3
 800e354:	4613      	mov	r3, r2
 800e356:	cb07      	ldmia	r3!, {r0, r1, r2}
 800e358:	6020      	str	r0, [r4, #0]
 800e35a:	6061      	str	r1, [r4, #4]
 800e35c:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade, "6C+");
 800e35e:	687b      	ldr	r3, [r7, #4]
 800e360:	33cc      	adds	r3, #204	; 0xcc
 800e362:	4aad      	ldr	r2, [pc, #692]	; (800e618 <problem_fetch+0xd2f8>)
 800e364:	6810      	ldr	r0, [r2, #0]
 800e366:	6018      	str	r0, [r3, #0]
			break;
 800e368:	f00c bd20 	b.w	801adac <problem_fetch+0x19a8c>
		case 456 :
			strcpy(p->name,"CALL ME A FOOL WILL YOU?");
 800e36c:	687b      	ldr	r3, [r7, #4]
 800e36e:	337c      	adds	r3, #124	; 0x7c
 800e370:	4aaa      	ldr	r2, [pc, #680]	; (800e61c <problem_fetch+0xd2fc>)
 800e372:	461d      	mov	r5, r3
 800e374:	4614      	mov	r4, r2
 800e376:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800e378:	6028      	str	r0, [r5, #0]
 800e37a:	6069      	str	r1, [r5, #4]
 800e37c:	60aa      	str	r2, [r5, #8]
 800e37e:	60eb      	str	r3, [r5, #12]
 800e380:	cc03      	ldmia	r4!, {r0, r1}
 800e382:	6128      	str	r0, [r5, #16]
 800e384:	6169      	str	r1, [r5, #20]
 800e386:	7823      	ldrb	r3, [r4, #0]
 800e388:	762b      	strb	r3, [r5, #24]
			p->moveSize = 11;
 800e38a:	687b      	ldr	r3, [r7, #4]
 800e38c:	220b      	movs	r2, #11
 800e38e:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"G,G,J,G,I,J,H,G,F,E,I");
 800e390:	687b      	ldr	r3, [r7, #4]
 800e392:	3340      	adds	r3, #64	; 0x40
 800e394:	4aa2      	ldr	r2, [pc, #648]	; (800e620 <problem_fetch+0xd300>)
 800e396:	461d      	mov	r5, r3
 800e398:	4614      	mov	r4, r2
 800e39a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800e39c:	6028      	str	r0, [r5, #0]
 800e39e:	6069      	str	r1, [r5, #4]
 800e3a0:	60aa      	str	r2, [r5, #8]
 800e3a2:	60eb      	str	r3, [r5, #12]
 800e3a4:	6820      	ldr	r0, [r4, #0]
 800e3a6:	6128      	str	r0, [r5, #16]
 800e3a8:	88a3      	ldrh	r3, [r4, #4]
 800e3aa:	82ab      	strh	r3, [r5, #20]
			strcpy(p->moveNumbers,"6,4,5,15,14,16,8,9,11,12,18");
 800e3ac:	687b      	ldr	r3, [r7, #4]
 800e3ae:	3304      	adds	r3, #4
 800e3b0:	4a9c      	ldr	r2, [pc, #624]	; (800e624 <problem_fetch+0xd304>)
 800e3b2:	461d      	mov	r5, r3
 800e3b4:	4614      	mov	r4, r2
 800e3b6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800e3b8:	6028      	str	r0, [r5, #0]
 800e3ba:	6069      	str	r1, [r5, #4]
 800e3bc:	60aa      	str	r2, [r5, #8]
 800e3be:	60eb      	str	r3, [r5, #12]
 800e3c0:	cc07      	ldmia	r4!, {r0, r1, r2}
 800e3c2:	6128      	str	r0, [r5, #16]
 800e3c4:	6169      	str	r1, [r5, #20]
 800e3c6:	61aa      	str	r2, [r5, #24]
			strcpy(p->startFinish, "s,s,d,d,d,d,d,d,d,d,e");
 800e3c8:	687b      	ldr	r3, [r7, #4]
 800e3ca:	33d8      	adds	r3, #216	; 0xd8
 800e3cc:	4a96      	ldr	r2, [pc, #600]	; (800e628 <problem_fetch+0xd308>)
 800e3ce:	461d      	mov	r5, r3
 800e3d0:	4614      	mov	r4, r2
 800e3d2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800e3d4:	6028      	str	r0, [r5, #0]
 800e3d6:	6069      	str	r1, [r5, #4]
 800e3d8:	60aa      	str	r2, [r5, #8]
 800e3da:	60eb      	str	r3, [r5, #12]
 800e3dc:	6820      	ldr	r0, [r4, #0]
 800e3de:	6128      	str	r0, [r5, #16]
 800e3e0:	88a3      	ldrh	r3, [r4, #4]
 800e3e2:	82ab      	strh	r3, [r5, #20]
			strcpy(p->grade, "6B+");
 800e3e4:	687b      	ldr	r3, [r7, #4]
 800e3e6:	33cc      	adds	r3, #204	; 0xcc
 800e3e8:	4a90      	ldr	r2, [pc, #576]	; (800e62c <problem_fetch+0xd30c>)
 800e3ea:	6810      	ldr	r0, [r2, #0]
 800e3ec:	6018      	str	r0, [r3, #0]
			break;
 800e3ee:	f00c bcdd 	b.w	801adac <problem_fetch+0x19a8c>
		case 457 :
			strcpy(p->name,"GRAPE THIEF");
 800e3f2:	687b      	ldr	r3, [r7, #4]
 800e3f4:	337c      	adds	r3, #124	; 0x7c
 800e3f6:	4a8e      	ldr	r2, [pc, #568]	; (800e630 <problem_fetch+0xd310>)
 800e3f8:	461c      	mov	r4, r3
 800e3fa:	4613      	mov	r3, r2
 800e3fc:	cb07      	ldmia	r3!, {r0, r1, r2}
 800e3fe:	6020      	str	r0, [r4, #0]
 800e400:	6061      	str	r1, [r4, #4]
 800e402:	60a2      	str	r2, [r4, #8]
			p->moveSize = 4;
 800e404:	687b      	ldr	r3, [r7, #4]
 800e406:	2204      	movs	r2, #4
 800e408:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"E,G,G,I");
 800e40a:	687b      	ldr	r3, [r7, #4]
 800e40c:	3340      	adds	r3, #64	; 0x40
 800e40e:	4989      	ldr	r1, [pc, #548]	; (800e634 <problem_fetch+0xd314>)
 800e410:	461a      	mov	r2, r3
 800e412:	460b      	mov	r3, r1
 800e414:	cb03      	ldmia	r3!, {r0, r1}
 800e416:	6010      	str	r0, [r2, #0]
 800e418:	6051      	str	r1, [r2, #4]
			strcpy(p->moveNumbers,"6,14,9,18");
 800e41a:	687b      	ldr	r3, [r7, #4]
 800e41c:	3304      	adds	r3, #4
 800e41e:	4986      	ldr	r1, [pc, #536]	; (800e638 <problem_fetch+0xd318>)
 800e420:	461a      	mov	r2, r3
 800e422:	460b      	mov	r3, r1
 800e424:	cb03      	ldmia	r3!, {r0, r1}
 800e426:	6010      	str	r0, [r2, #0]
 800e428:	6051      	str	r1, [r2, #4]
 800e42a:	881b      	ldrh	r3, [r3, #0]
 800e42c:	8113      	strh	r3, [r2, #8]
			strcpy(p->startFinish, "s,d,d,e");
 800e42e:	687b      	ldr	r3, [r7, #4]
 800e430:	33d8      	adds	r3, #216	; 0xd8
 800e432:	4982      	ldr	r1, [pc, #520]	; (800e63c <problem_fetch+0xd31c>)
 800e434:	461a      	mov	r2, r3
 800e436:	460b      	mov	r3, r1
 800e438:	cb03      	ldmia	r3!, {r0, r1}
 800e43a:	6010      	str	r0, [r2, #0]
 800e43c:	6051      	str	r1, [r2, #4]
			strcpy(p->grade, "7C");
 800e43e:	687b      	ldr	r3, [r7, #4]
 800e440:	33cc      	adds	r3, #204	; 0xcc
 800e442:	4a7f      	ldr	r2, [pc, #508]	; (800e640 <problem_fetch+0xd320>)
 800e444:	8811      	ldrh	r1, [r2, #0]
 800e446:	7892      	ldrb	r2, [r2, #2]
 800e448:	8019      	strh	r1, [r3, #0]
 800e44a:	709a      	strb	r2, [r3, #2]
			break;
 800e44c:	f00c bcae 	b.w	801adac <problem_fetch+0x19a8c>
		case 458 :
			strcpy(p->name,"SLUG TRAIL");
 800e450:	687b      	ldr	r3, [r7, #4]
 800e452:	337c      	adds	r3, #124	; 0x7c
 800e454:	497b      	ldr	r1, [pc, #492]	; (800e644 <problem_fetch+0xd324>)
 800e456:	461a      	mov	r2, r3
 800e458:	460b      	mov	r3, r1
 800e45a:	cb03      	ldmia	r3!, {r0, r1}
 800e45c:	6010      	str	r0, [r2, #0]
 800e45e:	6051      	str	r1, [r2, #4]
 800e460:	8819      	ldrh	r1, [r3, #0]
 800e462:	789b      	ldrb	r3, [r3, #2]
 800e464:	8111      	strh	r1, [r2, #8]
 800e466:	7293      	strb	r3, [r2, #10]
			p->moveSize = 8;
 800e468:	687b      	ldr	r3, [r7, #4]
 800e46a:	2208      	movs	r2, #8
 800e46c:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"C,G,E,F,A,A,E,A");
 800e46e:	687b      	ldr	r3, [r7, #4]
 800e470:	3340      	adds	r3, #64	; 0x40
 800e472:	4a75      	ldr	r2, [pc, #468]	; (800e648 <problem_fetch+0xd328>)
 800e474:	461c      	mov	r4, r3
 800e476:	4615      	mov	r5, r2
 800e478:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e47a:	6020      	str	r0, [r4, #0]
 800e47c:	6061      	str	r1, [r4, #4]
 800e47e:	60a2      	str	r2, [r4, #8]
 800e480:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,6,8,11,9,14,14,18");
 800e482:	687b      	ldr	r3, [r7, #4]
 800e484:	3304      	adds	r3, #4
 800e486:	4a71      	ldr	r2, [pc, #452]	; (800e64c <problem_fetch+0xd32c>)
 800e488:	461d      	mov	r5, r3
 800e48a:	4614      	mov	r4, r2
 800e48c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800e48e:	6028      	str	r0, [r5, #0]
 800e490:	6069      	str	r1, [r5, #4]
 800e492:	60aa      	str	r2, [r5, #8]
 800e494:	60eb      	str	r3, [r5, #12]
 800e496:	6820      	ldr	r0, [r4, #0]
 800e498:	6128      	str	r0, [r5, #16]
			strcpy(p->startFinish, "s,s,d,d,d,d,d,e");
 800e49a:	687b      	ldr	r3, [r7, #4]
 800e49c:	33d8      	adds	r3, #216	; 0xd8
 800e49e:	4a6c      	ldr	r2, [pc, #432]	; (800e650 <problem_fetch+0xd330>)
 800e4a0:	461c      	mov	r4, r3
 800e4a2:	4615      	mov	r5, r2
 800e4a4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e4a6:	6020      	str	r0, [r4, #0]
 800e4a8:	6061      	str	r1, [r4, #4]
 800e4aa:	60a2      	str	r2, [r4, #8]
 800e4ac:	60e3      	str	r3, [r4, #12]
			strcpy(p->grade, "6B+");
 800e4ae:	687b      	ldr	r3, [r7, #4]
 800e4b0:	33cc      	adds	r3, #204	; 0xcc
 800e4b2:	4a5e      	ldr	r2, [pc, #376]	; (800e62c <problem_fetch+0xd30c>)
 800e4b4:	6810      	ldr	r0, [r2, #0]
 800e4b6:	6018      	str	r0, [r3, #0]
			break;
 800e4b8:	f00c bc78 	b.w	801adac <problem_fetch+0x19a8c>
		case 459 :
			strcpy(p->name,"CREAKY SQUEAKY");
 800e4bc:	687b      	ldr	r3, [r7, #4]
 800e4be:	337c      	adds	r3, #124	; 0x7c
 800e4c0:	4a64      	ldr	r2, [pc, #400]	; (800e654 <problem_fetch+0xd334>)
 800e4c2:	461c      	mov	r4, r3
 800e4c4:	4613      	mov	r3, r2
 800e4c6:	cb07      	ldmia	r3!, {r0, r1, r2}
 800e4c8:	6020      	str	r0, [r4, #0]
 800e4ca:	6061      	str	r1, [r4, #4]
 800e4cc:	60a2      	str	r2, [r4, #8]
 800e4ce:	881a      	ldrh	r2, [r3, #0]
 800e4d0:	789b      	ldrb	r3, [r3, #2]
 800e4d2:	81a2      	strh	r2, [r4, #12]
 800e4d4:	73a3      	strb	r3, [r4, #14]
			p->moveSize = 8;
 800e4d6:	687b      	ldr	r3, [r7, #4]
 800e4d8:	2208      	movs	r2, #8
 800e4da:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"H,B,E,B,E,F,H,D");
 800e4dc:	687b      	ldr	r3, [r7, #4]
 800e4de:	3340      	adds	r3, #64	; 0x40
 800e4e0:	4a5d      	ldr	r2, [pc, #372]	; (800e658 <problem_fetch+0xd338>)
 800e4e2:	461c      	mov	r4, r3
 800e4e4:	4615      	mov	r5, r2
 800e4e6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e4e8:	6020      	str	r0, [r4, #0]
 800e4ea:	6061      	str	r1, [r4, #4]
 800e4ec:	60a2      	str	r2, [r4, #8]
 800e4ee:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,6,9,12,12,13,16,18");
 800e4f0:	687b      	ldr	r3, [r7, #4]
 800e4f2:	3304      	adds	r3, #4
 800e4f4:	4a59      	ldr	r2, [pc, #356]	; (800e65c <problem_fetch+0xd33c>)
 800e4f6:	461d      	mov	r5, r3
 800e4f8:	4614      	mov	r4, r2
 800e4fa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800e4fc:	6028      	str	r0, [r5, #0]
 800e4fe:	6069      	str	r1, [r5, #4]
 800e500:	60aa      	str	r2, [r5, #8]
 800e502:	60eb      	str	r3, [r5, #12]
 800e504:	6820      	ldr	r0, [r4, #0]
 800e506:	6128      	str	r0, [r5, #16]
 800e508:	7923      	ldrb	r3, [r4, #4]
 800e50a:	752b      	strb	r3, [r5, #20]
			strcpy(p->startFinish, "s,s,d,d,d,d,d,e");
 800e50c:	687b      	ldr	r3, [r7, #4]
 800e50e:	33d8      	adds	r3, #216	; 0xd8
 800e510:	4a4f      	ldr	r2, [pc, #316]	; (800e650 <problem_fetch+0xd330>)
 800e512:	461c      	mov	r4, r3
 800e514:	4615      	mov	r5, r2
 800e516:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e518:	6020      	str	r0, [r4, #0]
 800e51a:	6061      	str	r1, [r4, #4]
 800e51c:	60a2      	str	r2, [r4, #8]
 800e51e:	60e3      	str	r3, [r4, #12]
			strcpy(p->grade, "6C+");
 800e520:	687b      	ldr	r3, [r7, #4]
 800e522:	33cc      	adds	r3, #204	; 0xcc
 800e524:	4a3c      	ldr	r2, [pc, #240]	; (800e618 <problem_fetch+0xd2f8>)
 800e526:	6810      	ldr	r0, [r2, #0]
 800e528:	6018      	str	r0, [r3, #0]
			break;
 800e52a:	f00c bc3f 	b.w	801adac <problem_fetch+0x19a8c>
		case 46 :
			strcpy(p->name,"LANKY BASTARD");
 800e52e:	687b      	ldr	r3, [r7, #4]
 800e530:	337c      	adds	r3, #124	; 0x7c
 800e532:	4a4b      	ldr	r2, [pc, #300]	; (800e660 <problem_fetch+0xd340>)
 800e534:	461c      	mov	r4, r3
 800e536:	4613      	mov	r3, r2
 800e538:	cb07      	ldmia	r3!, {r0, r1, r2}
 800e53a:	6020      	str	r0, [r4, #0]
 800e53c:	6061      	str	r1, [r4, #4]
 800e53e:	60a2      	str	r2, [r4, #8]
 800e540:	881b      	ldrh	r3, [r3, #0]
 800e542:	81a3      	strh	r3, [r4, #12]
			p->moveSize = 7;
 800e544:	687b      	ldr	r3, [r7, #4]
 800e546:	2207      	movs	r2, #7
 800e548:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"G,E,I,H,K,E,D");
 800e54a:	687b      	ldr	r3, [r7, #4]
 800e54c:	3340      	adds	r3, #64	; 0x40
 800e54e:	4a45      	ldr	r2, [pc, #276]	; (800e664 <problem_fetch+0xd344>)
 800e550:	461c      	mov	r4, r3
 800e552:	4613      	mov	r3, r2
 800e554:	cb07      	ldmia	r3!, {r0, r1, r2}
 800e556:	6020      	str	r0, [r4, #0]
 800e558:	6061      	str	r1, [r4, #4]
 800e55a:	60a2      	str	r2, [r4, #8]
 800e55c:	881b      	ldrh	r3, [r3, #0]
 800e55e:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,8,9,12,14,16,18");
 800e560:	687b      	ldr	r3, [r7, #4]
 800e562:	3304      	adds	r3, #4
 800e564:	4a40      	ldr	r2, [pc, #256]	; (800e668 <problem_fetch+0xd348>)
 800e566:	461d      	mov	r5, r3
 800e568:	4614      	mov	r4, r2
 800e56a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800e56c:	6028      	str	r0, [r5, #0]
 800e56e:	6069      	str	r1, [r5, #4]
 800e570:	60aa      	str	r2, [r5, #8]
 800e572:	60eb      	str	r3, [r5, #12]
 800e574:	8823      	ldrh	r3, [r4, #0]
 800e576:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish, "s,d,d,d,d,d,e");
 800e578:	687b      	ldr	r3, [r7, #4]
 800e57a:	33d8      	adds	r3, #216	; 0xd8
 800e57c:	4a3b      	ldr	r2, [pc, #236]	; (800e66c <problem_fetch+0xd34c>)
 800e57e:	461c      	mov	r4, r3
 800e580:	4613      	mov	r3, r2
 800e582:	cb07      	ldmia	r3!, {r0, r1, r2}
 800e584:	6020      	str	r0, [r4, #0]
 800e586:	6061      	str	r1, [r4, #4]
 800e588:	60a2      	str	r2, [r4, #8]
 800e58a:	881b      	ldrh	r3, [r3, #0]
 800e58c:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade, "6C");
 800e58e:	687b      	ldr	r3, [r7, #4]
 800e590:	33cc      	adds	r3, #204	; 0xcc
 800e592:	4a37      	ldr	r2, [pc, #220]	; (800e670 <problem_fetch+0xd350>)
 800e594:	8811      	ldrh	r1, [r2, #0]
 800e596:	7892      	ldrb	r2, [r2, #2]
 800e598:	8019      	strh	r1, [r3, #0]
 800e59a:	709a      	strb	r2, [r3, #2]
			break;
 800e59c:	f00c bc06 	b.w	801adac <problem_fetch+0x19a8c>
		case 460 :
			strcpy(p->name,"TAKEOFF");
 800e5a0:	687b      	ldr	r3, [r7, #4]
 800e5a2:	337c      	adds	r3, #124	; 0x7c
 800e5a4:	4933      	ldr	r1, [pc, #204]	; (800e674 <problem_fetch+0xd354>)
 800e5a6:	461a      	mov	r2, r3
 800e5a8:	460b      	mov	r3, r1
 800e5aa:	cb03      	ldmia	r3!, {r0, r1}
 800e5ac:	6010      	str	r0, [r2, #0]
 800e5ae:	6051      	str	r1, [r2, #4]
			p->moveSize = 5;
 800e5b0:	687b      	ldr	r3, [r7, #4]
 800e5b2:	2205      	movs	r2, #5
 800e5b4:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"J,H,H,G,I");
 800e5b6:	687b      	ldr	r3, [r7, #4]
 800e5b8:	3340      	adds	r3, #64	; 0x40
 800e5ba:	492f      	ldr	r1, [pc, #188]	; (800e678 <problem_fetch+0xd358>)
 800e5bc:	461a      	mov	r2, r3
 800e5be:	460b      	mov	r3, r1
 800e5c0:	cb03      	ldmia	r3!, {r0, r1}
 800e5c2:	6010      	str	r0, [r2, #0]
 800e5c4:	6051      	str	r1, [r2, #4]
 800e5c6:	881b      	ldrh	r3, [r3, #0]
 800e5c8:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"5,5,10,14,18");
 800e5ca:	687b      	ldr	r3, [r7, #4]
 800e5cc:	3304      	adds	r3, #4
 800e5ce:	4a2b      	ldr	r2, [pc, #172]	; (800e67c <problem_fetch+0xd35c>)
 800e5d0:	461c      	mov	r4, r3
 800e5d2:	4613      	mov	r3, r2
 800e5d4:	cb07      	ldmia	r3!, {r0, r1, r2}
 800e5d6:	6020      	str	r0, [r4, #0]
 800e5d8:	6061      	str	r1, [r4, #4]
 800e5da:	60a2      	str	r2, [r4, #8]
 800e5dc:	781b      	ldrb	r3, [r3, #0]
 800e5de:	7323      	strb	r3, [r4, #12]
			strcpy(p->startFinish, "s,s,d,d,e");
 800e5e0:	687b      	ldr	r3, [r7, #4]
 800e5e2:	33d8      	adds	r3, #216	; 0xd8
 800e5e4:	4926      	ldr	r1, [pc, #152]	; (800e680 <problem_fetch+0xd360>)
 800e5e6:	461a      	mov	r2, r3
 800e5e8:	460b      	mov	r3, r1
 800e5ea:	cb03      	ldmia	r3!, {r0, r1}
 800e5ec:	6010      	str	r0, [r2, #0]
 800e5ee:	6051      	str	r1, [r2, #4]
 800e5f0:	881b      	ldrh	r3, [r3, #0]
 800e5f2:	8113      	strh	r3, [r2, #8]
			strcpy(p->grade, "7A");
 800e5f4:	687b      	ldr	r3, [r7, #4]
 800e5f6:	33cc      	adds	r3, #204	; 0xcc
 800e5f8:	4a22      	ldr	r2, [pc, #136]	; (800e684 <problem_fetch+0xd364>)
 800e5fa:	8811      	ldrh	r1, [r2, #0]
 800e5fc:	7892      	ldrb	r2, [r2, #2]
 800e5fe:	8019      	strh	r1, [r3, #0]
 800e600:	709a      	strb	r2, [r3, #2]
			break;
 800e602:	f00c bbd3 	b.w	801adac <problem_fetch+0x19a8c>
 800e606:	bf00      	nop
 800e608:	08025c58 	.word	0x08025c58
 800e60c:	08025c64 	.word	0x08025c64
 800e610:	08022558 	.word	0x08022558
 800e614:	0802139c 	.word	0x0802139c
 800e618:	080213a8 	.word	0x080213a8
 800e61c:	08025c70 	.word	0x08025c70
 800e620:	08025c8c 	.word	0x08025c8c
 800e624:	08025ca4 	.word	0x08025ca4
 800e628:	08022a18 	.word	0x08022a18
 800e62c:	080212b0 	.word	0x080212b0
 800e630:	08025cc0 	.word	0x08025cc0
 800e634:	08025ccc 	.word	0x08025ccc
 800e638:	08025cd4 	.word	0x08025cd4
 800e63c:	08022028 	.word	0x08022028
 800e640:	0802158c 	.word	0x0802158c
 800e644:	08025ce0 	.word	0x08025ce0
 800e648:	08025cec 	.word	0x08025cec
 800e64c:	08025cfc 	.word	0x08025cfc
 800e650:	080214cc 	.word	0x080214cc
 800e654:	08025d10 	.word	0x08025d10
 800e658:	08025d20 	.word	0x08025d20
 800e65c:	08025d30 	.word	0x08025d30
 800e660:	08025d48 	.word	0x08025d48
 800e664:	08025d58 	.word	0x08025d58
 800e668:	08025d68 	.word	0x08025d68
 800e66c:	08021494 	.word	0x08021494
 800e670:	08021370 	.word	0x08021370
 800e674:	08025d7c 	.word	0x08025d7c
 800e678:	08025d84 	.word	0x08025d84
 800e67c:	08025d90 	.word	0x08025d90
 800e680:	080221c8 	.word	0x080221c8
 800e684:	080212f4 	.word	0x080212f4
		case 461 :
			strcpy(p->name,"WIND BENEATH MY WINGS");
 800e688:	687b      	ldr	r3, [r7, #4]
 800e68a:	337c      	adds	r3, #124	; 0x7c
 800e68c:	4abd      	ldr	r2, [pc, #756]	; (800e984 <problem_fetch+0xd664>)
 800e68e:	461d      	mov	r5, r3
 800e690:	4614      	mov	r4, r2
 800e692:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800e694:	6028      	str	r0, [r5, #0]
 800e696:	6069      	str	r1, [r5, #4]
 800e698:	60aa      	str	r2, [r5, #8]
 800e69a:	60eb      	str	r3, [r5, #12]
 800e69c:	6820      	ldr	r0, [r4, #0]
 800e69e:	6128      	str	r0, [r5, #16]
 800e6a0:	88a3      	ldrh	r3, [r4, #4]
 800e6a2:	82ab      	strh	r3, [r5, #20]
			p->moveSize = 4;
 800e6a4:	687b      	ldr	r3, [r7, #4]
 800e6a6:	2204      	movs	r2, #4
 800e6a8:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"J,I,G,D");
 800e6aa:	687b      	ldr	r3, [r7, #4]
 800e6ac:	3340      	adds	r3, #64	; 0x40
 800e6ae:	49b6      	ldr	r1, [pc, #728]	; (800e988 <problem_fetch+0xd668>)
 800e6b0:	461a      	mov	r2, r3
 800e6b2:	460b      	mov	r3, r1
 800e6b4:	cb03      	ldmia	r3!, {r0, r1}
 800e6b6:	6010      	str	r0, [r2, #0]
 800e6b8:	6051      	str	r1, [r2, #4]
			strcpy(p->moveNumbers,"5,9,14,18");
 800e6ba:	687b      	ldr	r3, [r7, #4]
 800e6bc:	3304      	adds	r3, #4
 800e6be:	49b3      	ldr	r1, [pc, #716]	; (800e98c <problem_fetch+0xd66c>)
 800e6c0:	461a      	mov	r2, r3
 800e6c2:	460b      	mov	r3, r1
 800e6c4:	cb03      	ldmia	r3!, {r0, r1}
 800e6c6:	6010      	str	r0, [r2, #0]
 800e6c8:	6051      	str	r1, [r2, #4]
 800e6ca:	881b      	ldrh	r3, [r3, #0]
 800e6cc:	8113      	strh	r3, [r2, #8]
			strcpy(p->startFinish, "s,d,d,e");
 800e6ce:	687b      	ldr	r3, [r7, #4]
 800e6d0:	33d8      	adds	r3, #216	; 0xd8
 800e6d2:	49af      	ldr	r1, [pc, #700]	; (800e990 <problem_fetch+0xd670>)
 800e6d4:	461a      	mov	r2, r3
 800e6d6:	460b      	mov	r3, r1
 800e6d8:	cb03      	ldmia	r3!, {r0, r1}
 800e6da:	6010      	str	r0, [r2, #0]
 800e6dc:	6051      	str	r1, [r2, #4]
			strcpy(p->grade, "7C");
 800e6de:	687b      	ldr	r3, [r7, #4]
 800e6e0:	33cc      	adds	r3, #204	; 0xcc
 800e6e2:	4aac      	ldr	r2, [pc, #688]	; (800e994 <problem_fetch+0xd674>)
 800e6e4:	8811      	ldrh	r1, [r2, #0]
 800e6e6:	7892      	ldrb	r2, [r2, #2]
 800e6e8:	8019      	strh	r1, [r3, #0]
 800e6ea:	709a      	strb	r2, [r3, #2]
			break;
 800e6ec:	f00c bb5e 	b.w	801adac <problem_fetch+0x19a8c>
		case 462 :
			strcpy(p->name,"ELECTRIC HEEL");
 800e6f0:	687b      	ldr	r3, [r7, #4]
 800e6f2:	337c      	adds	r3, #124	; 0x7c
 800e6f4:	4aa8      	ldr	r2, [pc, #672]	; (800e998 <problem_fetch+0xd678>)
 800e6f6:	461c      	mov	r4, r3
 800e6f8:	4613      	mov	r3, r2
 800e6fa:	cb07      	ldmia	r3!, {r0, r1, r2}
 800e6fc:	6020      	str	r0, [r4, #0]
 800e6fe:	6061      	str	r1, [r4, #4]
 800e700:	60a2      	str	r2, [r4, #8]
 800e702:	881b      	ldrh	r3, [r3, #0]
 800e704:	81a3      	strh	r3, [r4, #12]
			p->moveSize = 6;
 800e706:	687b      	ldr	r3, [r7, #4]
 800e708:	2206      	movs	r2, #6
 800e70a:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"J,H,G,E,C,D");
 800e70c:	687b      	ldr	r3, [r7, #4]
 800e70e:	3340      	adds	r3, #64	; 0x40
 800e710:	4aa2      	ldr	r2, [pc, #648]	; (800e99c <problem_fetch+0xd67c>)
 800e712:	461c      	mov	r4, r3
 800e714:	4613      	mov	r3, r2
 800e716:	cb07      	ldmia	r3!, {r0, r1, r2}
 800e718:	6020      	str	r0, [r4, #0]
 800e71a:	6061      	str	r1, [r4, #4]
 800e71c:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,8,9,12,13,18");
 800e71e:	687b      	ldr	r3, [r7, #4]
 800e720:	3304      	adds	r3, #4
 800e722:	4a9f      	ldr	r2, [pc, #636]	; (800e9a0 <problem_fetch+0xd680>)
 800e724:	461c      	mov	r4, r3
 800e726:	4613      	mov	r3, r2
 800e728:	cb07      	ldmia	r3!, {r0, r1, r2}
 800e72a:	6020      	str	r0, [r4, #0]
 800e72c:	6061      	str	r1, [r4, #4]
 800e72e:	60a2      	str	r2, [r4, #8]
 800e730:	881a      	ldrh	r2, [r3, #0]
 800e732:	789b      	ldrb	r3, [r3, #2]
 800e734:	81a2      	strh	r2, [r4, #12]
 800e736:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish, "s,d,d,d,d,e");
 800e738:	687b      	ldr	r3, [r7, #4]
 800e73a:	33d8      	adds	r3, #216	; 0xd8
 800e73c:	4a99      	ldr	r2, [pc, #612]	; (800e9a4 <problem_fetch+0xd684>)
 800e73e:	461c      	mov	r4, r3
 800e740:	4613      	mov	r3, r2
 800e742:	cb07      	ldmia	r3!, {r0, r1, r2}
 800e744:	6020      	str	r0, [r4, #0]
 800e746:	6061      	str	r1, [r4, #4]
 800e748:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade, "7A");
 800e74a:	687b      	ldr	r3, [r7, #4]
 800e74c:	33cc      	adds	r3, #204	; 0xcc
 800e74e:	4a96      	ldr	r2, [pc, #600]	; (800e9a8 <problem_fetch+0xd688>)
 800e750:	8811      	ldrh	r1, [r2, #0]
 800e752:	7892      	ldrb	r2, [r2, #2]
 800e754:	8019      	strh	r1, [r3, #0]
 800e756:	709a      	strb	r2, [r3, #2]
			break;
 800e758:	f00c bb28 	b.w	801adac <problem_fetch+0x19a8c>
		case 463 :
			strcpy(p->name,"GHASTLY");
 800e75c:	687b      	ldr	r3, [r7, #4]
 800e75e:	337c      	adds	r3, #124	; 0x7c
 800e760:	4992      	ldr	r1, [pc, #584]	; (800e9ac <problem_fetch+0xd68c>)
 800e762:	461a      	mov	r2, r3
 800e764:	460b      	mov	r3, r1
 800e766:	cb03      	ldmia	r3!, {r0, r1}
 800e768:	6010      	str	r0, [r2, #0]
 800e76a:	6051      	str	r1, [r2, #4]
			p->moveSize = 8;
 800e76c:	687b      	ldr	r3, [r7, #4]
 800e76e:	2208      	movs	r2, #8
 800e770:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"G,H,K,J,K,E,G,D");
 800e772:	687b      	ldr	r3, [r7, #4]
 800e774:	3340      	adds	r3, #64	; 0x40
 800e776:	4a8e      	ldr	r2, [pc, #568]	; (800e9b0 <problem_fetch+0xd690>)
 800e778:	461c      	mov	r4, r3
 800e77a:	4615      	mov	r5, r2
 800e77c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e77e:	6020      	str	r0, [r4, #0]
 800e780:	6061      	str	r1, [r4, #4]
 800e782:	60a2      	str	r2, [r4, #8]
 800e784:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"6,5,9,12,14,14,17,18");
 800e786:	687b      	ldr	r3, [r7, #4]
 800e788:	3304      	adds	r3, #4
 800e78a:	4a8a      	ldr	r2, [pc, #552]	; (800e9b4 <problem_fetch+0xd694>)
 800e78c:	461d      	mov	r5, r3
 800e78e:	4614      	mov	r4, r2
 800e790:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800e792:	6028      	str	r0, [r5, #0]
 800e794:	6069      	str	r1, [r5, #4]
 800e796:	60aa      	str	r2, [r5, #8]
 800e798:	60eb      	str	r3, [r5, #12]
 800e79a:	6820      	ldr	r0, [r4, #0]
 800e79c:	6128      	str	r0, [r5, #16]
 800e79e:	7923      	ldrb	r3, [r4, #4]
 800e7a0:	752b      	strb	r3, [r5, #20]
			strcpy(p->startFinish, "s,s,d,d,d,d,d,e");
 800e7a2:	687b      	ldr	r3, [r7, #4]
 800e7a4:	33d8      	adds	r3, #216	; 0xd8
 800e7a6:	4a84      	ldr	r2, [pc, #528]	; (800e9b8 <problem_fetch+0xd698>)
 800e7a8:	461c      	mov	r4, r3
 800e7aa:	4615      	mov	r5, r2
 800e7ac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e7ae:	6020      	str	r0, [r4, #0]
 800e7b0:	6061      	str	r1, [r4, #4]
 800e7b2:	60a2      	str	r2, [r4, #8]
 800e7b4:	60e3      	str	r3, [r4, #12]
			strcpy(p->grade, "7A");
 800e7b6:	687b      	ldr	r3, [r7, #4]
 800e7b8:	33cc      	adds	r3, #204	; 0xcc
 800e7ba:	4a7b      	ldr	r2, [pc, #492]	; (800e9a8 <problem_fetch+0xd688>)
 800e7bc:	8811      	ldrh	r1, [r2, #0]
 800e7be:	7892      	ldrb	r2, [r2, #2]
 800e7c0:	8019      	strh	r1, [r3, #0]
 800e7c2:	709a      	strb	r2, [r3, #2]
			break;
 800e7c4:	f00c baf2 	b.w	801adac <problem_fetch+0x19a8c>
		case 464 :
			strcpy(p->name,"ONE CRIMP");
 800e7c8:	687b      	ldr	r3, [r7, #4]
 800e7ca:	337c      	adds	r3, #124	; 0x7c
 800e7cc:	497b      	ldr	r1, [pc, #492]	; (800e9bc <problem_fetch+0xd69c>)
 800e7ce:	461a      	mov	r2, r3
 800e7d0:	460b      	mov	r3, r1
 800e7d2:	cb03      	ldmia	r3!, {r0, r1}
 800e7d4:	6010      	str	r0, [r2, #0]
 800e7d6:	6051      	str	r1, [r2, #4]
 800e7d8:	881b      	ldrh	r3, [r3, #0]
 800e7da:	8113      	strh	r3, [r2, #8]
			p->moveSize = 7;
 800e7dc:	687b      	ldr	r3, [r7, #4]
 800e7de:	2207      	movs	r2, #7
 800e7e0:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"J,H,I,H,G,D,D");
 800e7e2:	687b      	ldr	r3, [r7, #4]
 800e7e4:	3340      	adds	r3, #64	; 0x40
 800e7e6:	4a76      	ldr	r2, [pc, #472]	; (800e9c0 <problem_fetch+0xd6a0>)
 800e7e8:	461c      	mov	r4, r3
 800e7ea:	4613      	mov	r3, r2
 800e7ec:	cb07      	ldmia	r3!, {r0, r1, r2}
 800e7ee:	6020      	str	r0, [r4, #0]
 800e7f0:	6061      	str	r1, [r4, #4]
 800e7f2:	60a2      	str	r2, [r4, #8]
 800e7f4:	881b      	ldrh	r3, [r3, #0]
 800e7f6:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,8,9,12,15,15,18");
 800e7f8:	687b      	ldr	r3, [r7, #4]
 800e7fa:	3304      	adds	r3, #4
 800e7fc:	4a71      	ldr	r2, [pc, #452]	; (800e9c4 <problem_fetch+0xd6a4>)
 800e7fe:	461d      	mov	r5, r3
 800e800:	4614      	mov	r4, r2
 800e802:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800e804:	6028      	str	r0, [r5, #0]
 800e806:	6069      	str	r1, [r5, #4]
 800e808:	60aa      	str	r2, [r5, #8]
 800e80a:	60eb      	str	r3, [r5, #12]
 800e80c:	8823      	ldrh	r3, [r4, #0]
 800e80e:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish, "s,d,d,d,d,d,e");
 800e810:	687b      	ldr	r3, [r7, #4]
 800e812:	33d8      	adds	r3, #216	; 0xd8
 800e814:	4a6c      	ldr	r2, [pc, #432]	; (800e9c8 <problem_fetch+0xd6a8>)
 800e816:	461c      	mov	r4, r3
 800e818:	4613      	mov	r3, r2
 800e81a:	cb07      	ldmia	r3!, {r0, r1, r2}
 800e81c:	6020      	str	r0, [r4, #0]
 800e81e:	6061      	str	r1, [r4, #4]
 800e820:	60a2      	str	r2, [r4, #8]
 800e822:	881b      	ldrh	r3, [r3, #0]
 800e824:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade, "7A+");
 800e826:	687b      	ldr	r3, [r7, #4]
 800e828:	33cc      	adds	r3, #204	; 0xcc
 800e82a:	4a68      	ldr	r2, [pc, #416]	; (800e9cc <problem_fetch+0xd6ac>)
 800e82c:	6810      	ldr	r0, [r2, #0]
 800e82e:	6018      	str	r0, [r3, #0]
			break;
 800e830:	f00c babc 	b.w	801adac <problem_fetch+0x19a8c>
		case 465 :
			strcpy(p->name,"PICTURES ON MY PHONE");
 800e834:	687b      	ldr	r3, [r7, #4]
 800e836:	337c      	adds	r3, #124	; 0x7c
 800e838:	4a65      	ldr	r2, [pc, #404]	; (800e9d0 <problem_fetch+0xd6b0>)
 800e83a:	461d      	mov	r5, r3
 800e83c:	4614      	mov	r4, r2
 800e83e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800e840:	6028      	str	r0, [r5, #0]
 800e842:	6069      	str	r1, [r5, #4]
 800e844:	60aa      	str	r2, [r5, #8]
 800e846:	60eb      	str	r3, [r5, #12]
 800e848:	6820      	ldr	r0, [r4, #0]
 800e84a:	6128      	str	r0, [r5, #16]
 800e84c:	7923      	ldrb	r3, [r4, #4]
 800e84e:	752b      	strb	r3, [r5, #20]
			p->moveSize = 8;
 800e850:	687b      	ldr	r3, [r7, #4]
 800e852:	2208      	movs	r2, #8
 800e854:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"J,H,E,H,C,I,G,I");
 800e856:	687b      	ldr	r3, [r7, #4]
 800e858:	3340      	adds	r3, #64	; 0x40
 800e85a:	4a5e      	ldr	r2, [pc, #376]	; (800e9d4 <problem_fetch+0xd6b4>)
 800e85c:	461c      	mov	r4, r3
 800e85e:	4615      	mov	r5, r2
 800e860:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e862:	6020      	str	r0, [r4, #0]
 800e864:	6061      	str	r1, [r4, #4]
 800e866:	60a2      	str	r2, [r4, #8]
 800e868:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,5,8,10,13,14,17,18");
 800e86a:	687b      	ldr	r3, [r7, #4]
 800e86c:	3304      	adds	r3, #4
 800e86e:	4a5a      	ldr	r2, [pc, #360]	; (800e9d8 <problem_fetch+0xd6b8>)
 800e870:	461d      	mov	r5, r3
 800e872:	4614      	mov	r4, r2
 800e874:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800e876:	6028      	str	r0, [r5, #0]
 800e878:	6069      	str	r1, [r5, #4]
 800e87a:	60aa      	str	r2, [r5, #8]
 800e87c:	60eb      	str	r3, [r5, #12]
 800e87e:	6820      	ldr	r0, [r4, #0]
 800e880:	6128      	str	r0, [r5, #16]
 800e882:	7923      	ldrb	r3, [r4, #4]
 800e884:	752b      	strb	r3, [r5, #20]
			strcpy(p->startFinish, "s,s,d,d,d,d,d,e");
 800e886:	687b      	ldr	r3, [r7, #4]
 800e888:	33d8      	adds	r3, #216	; 0xd8
 800e88a:	4a4b      	ldr	r2, [pc, #300]	; (800e9b8 <problem_fetch+0xd698>)
 800e88c:	461c      	mov	r4, r3
 800e88e:	4615      	mov	r5, r2
 800e890:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e892:	6020      	str	r0, [r4, #0]
 800e894:	6061      	str	r1, [r4, #4]
 800e896:	60a2      	str	r2, [r4, #8]
 800e898:	60e3      	str	r3, [r4, #12]
			strcpy(p->grade, "6B+");
 800e89a:	687b      	ldr	r3, [r7, #4]
 800e89c:	33cc      	adds	r3, #204	; 0xcc
 800e89e:	4a4f      	ldr	r2, [pc, #316]	; (800e9dc <problem_fetch+0xd6bc>)
 800e8a0:	6810      	ldr	r0, [r2, #0]
 800e8a2:	6018      	str	r0, [r3, #0]
			break;
 800e8a4:	f00c ba82 	b.w	801adac <problem_fetch+0x19a8c>
		case 466 :
			strcpy(p->name,"NOT A FIRSTIMER");
 800e8a8:	687b      	ldr	r3, [r7, #4]
 800e8aa:	337c      	adds	r3, #124	; 0x7c
 800e8ac:	4a4c      	ldr	r2, [pc, #304]	; (800e9e0 <problem_fetch+0xd6c0>)
 800e8ae:	461c      	mov	r4, r3
 800e8b0:	4615      	mov	r5, r2
 800e8b2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e8b4:	6020      	str	r0, [r4, #0]
 800e8b6:	6061      	str	r1, [r4, #4]
 800e8b8:	60a2      	str	r2, [r4, #8]
 800e8ba:	60e3      	str	r3, [r4, #12]
			p->moveSize = 10;
 800e8bc:	687b      	ldr	r3, [r7, #4]
 800e8be:	220a      	movs	r2, #10
 800e8c0:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"J,E,H,E,C,I,G,G,J,I");
 800e8c2:	687b      	ldr	r3, [r7, #4]
 800e8c4:	3340      	adds	r3, #64	; 0x40
 800e8c6:	4a47      	ldr	r2, [pc, #284]	; (800e9e4 <problem_fetch+0xd6c4>)
 800e8c8:	461d      	mov	r5, r3
 800e8ca:	4614      	mov	r4, r2
 800e8cc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800e8ce:	6028      	str	r0, [r5, #0]
 800e8d0:	6069      	str	r1, [r5, #4]
 800e8d2:	60aa      	str	r2, [r5, #8]
 800e8d4:	60eb      	str	r3, [r5, #12]
 800e8d6:	6820      	ldr	r0, [r4, #0]
 800e8d8:	6128      	str	r0, [r5, #16]
			strcpy(p->moveNumbers,"5,6,10,8,13,14,15,17,7,18");
 800e8da:	687b      	ldr	r3, [r7, #4]
 800e8dc:	3304      	adds	r3, #4
 800e8de:	4a42      	ldr	r2, [pc, #264]	; (800e9e8 <problem_fetch+0xd6c8>)
 800e8e0:	461d      	mov	r5, r3
 800e8e2:	4614      	mov	r4, r2
 800e8e4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800e8e6:	6028      	str	r0, [r5, #0]
 800e8e8:	6069      	str	r1, [r5, #4]
 800e8ea:	60aa      	str	r2, [r5, #8]
 800e8ec:	60eb      	str	r3, [r5, #12]
 800e8ee:	cc03      	ldmia	r4!, {r0, r1}
 800e8f0:	6128      	str	r0, [r5, #16]
 800e8f2:	6169      	str	r1, [r5, #20]
 800e8f4:	8823      	ldrh	r3, [r4, #0]
 800e8f6:	832b      	strh	r3, [r5, #24]
			strcpy(p->startFinish, "s,s,d,d,d,d,d,d,d,e");
 800e8f8:	687b      	ldr	r3, [r7, #4]
 800e8fa:	33d8      	adds	r3, #216	; 0xd8
 800e8fc:	4a3b      	ldr	r2, [pc, #236]	; (800e9ec <problem_fetch+0xd6cc>)
 800e8fe:	461d      	mov	r5, r3
 800e900:	4614      	mov	r4, r2
 800e902:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800e904:	6028      	str	r0, [r5, #0]
 800e906:	6069      	str	r1, [r5, #4]
 800e908:	60aa      	str	r2, [r5, #8]
 800e90a:	60eb      	str	r3, [r5, #12]
 800e90c:	6820      	ldr	r0, [r4, #0]
 800e90e:	6128      	str	r0, [r5, #16]
			strcpy(p->grade, "6B+");
 800e910:	687b      	ldr	r3, [r7, #4]
 800e912:	33cc      	adds	r3, #204	; 0xcc
 800e914:	4a31      	ldr	r2, [pc, #196]	; (800e9dc <problem_fetch+0xd6bc>)
 800e916:	6810      	ldr	r0, [r2, #0]
 800e918:	6018      	str	r0, [r3, #0]
			break;
 800e91a:	f00c ba47 	b.w	801adac <problem_fetch+0x19a8c>
		case 467 :
			strcpy(p->name,"APPLE PIE");
 800e91e:	687b      	ldr	r3, [r7, #4]
 800e920:	337c      	adds	r3, #124	; 0x7c
 800e922:	4933      	ldr	r1, [pc, #204]	; (800e9f0 <problem_fetch+0xd6d0>)
 800e924:	461a      	mov	r2, r3
 800e926:	460b      	mov	r3, r1
 800e928:	cb03      	ldmia	r3!, {r0, r1}
 800e92a:	6010      	str	r0, [r2, #0]
 800e92c:	6051      	str	r1, [r2, #4]
 800e92e:	881b      	ldrh	r3, [r3, #0]
 800e930:	8113      	strh	r3, [r2, #8]
			p->moveSize = 6;
 800e932:	687b      	ldr	r3, [r7, #4]
 800e934:	2206      	movs	r2, #6
 800e936:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"G,E,I,F,J,I");
 800e938:	687b      	ldr	r3, [r7, #4]
 800e93a:	3340      	adds	r3, #64	; 0x40
 800e93c:	4a2d      	ldr	r2, [pc, #180]	; (800e9f4 <problem_fetch+0xd6d4>)
 800e93e:	461c      	mov	r4, r3
 800e940:	4613      	mov	r3, r2
 800e942:	cb07      	ldmia	r3!, {r0, r1, r2}
 800e944:	6020      	str	r0, [r4, #0]
 800e946:	6061      	str	r1, [r4, #4]
 800e948:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,8,10,13,16,18");
 800e94a:	687b      	ldr	r3, [r7, #4]
 800e94c:	3304      	adds	r3, #4
 800e94e:	4a2a      	ldr	r2, [pc, #168]	; (800e9f8 <problem_fetch+0xd6d8>)
 800e950:	461c      	mov	r4, r3
 800e952:	4615      	mov	r5, r2
 800e954:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e956:	6020      	str	r0, [r4, #0]
 800e958:	6061      	str	r1, [r4, #4]
 800e95a:	60a2      	str	r2, [r4, #8]
 800e95c:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish, "s,d,d,d,d,e");
 800e95e:	687b      	ldr	r3, [r7, #4]
 800e960:	33d8      	adds	r3, #216	; 0xd8
 800e962:	4a10      	ldr	r2, [pc, #64]	; (800e9a4 <problem_fetch+0xd684>)
 800e964:	461c      	mov	r4, r3
 800e966:	4613      	mov	r3, r2
 800e968:	cb07      	ldmia	r3!, {r0, r1, r2}
 800e96a:	6020      	str	r0, [r4, #0]
 800e96c:	6061      	str	r1, [r4, #4]
 800e96e:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade, "7A");
 800e970:	687b      	ldr	r3, [r7, #4]
 800e972:	33cc      	adds	r3, #204	; 0xcc
 800e974:	4a0c      	ldr	r2, [pc, #48]	; (800e9a8 <problem_fetch+0xd688>)
 800e976:	8811      	ldrh	r1, [r2, #0]
 800e978:	7892      	ldrb	r2, [r2, #2]
 800e97a:	8019      	strh	r1, [r3, #0]
 800e97c:	709a      	strb	r2, [r3, #2]
			break;
 800e97e:	f00c ba15 	b.w	801adac <problem_fetch+0x19a8c>
 800e982:	bf00      	nop
 800e984:	08025da0 	.word	0x08025da0
 800e988:	08025db8 	.word	0x08025db8
 800e98c:	08025dc0 	.word	0x08025dc0
 800e990:	08022028 	.word	0x08022028
 800e994:	0802158c 	.word	0x0802158c
 800e998:	08025dcc 	.word	0x08025dcc
 800e99c:	08025ddc 	.word	0x08025ddc
 800e9a0:	08022294 	.word	0x08022294
 800e9a4:	0802139c 	.word	0x0802139c
 800e9a8:	080212f4 	.word	0x080212f4
 800e9ac:	08025de8 	.word	0x08025de8
 800e9b0:	08025df0 	.word	0x08025df0
 800e9b4:	08025e00 	.word	0x08025e00
 800e9b8:	080214cc 	.word	0x080214cc
 800e9bc:	08025e18 	.word	0x08025e18
 800e9c0:	08025e24 	.word	0x08025e24
 800e9c4:	08025e34 	.word	0x08025e34
 800e9c8:	08021494 	.word	0x08021494
 800e9cc:	08021424 	.word	0x08021424
 800e9d0:	08025e48 	.word	0x08025e48
 800e9d4:	08025e60 	.word	0x08025e60
 800e9d8:	08025e70 	.word	0x08025e70
 800e9dc:	080212b0 	.word	0x080212b0
 800e9e0:	08025e88 	.word	0x08025e88
 800e9e4:	08025e98 	.word	0x08025e98
 800e9e8:	08025eac 	.word	0x08025eac
 800e9ec:	080215fc 	.word	0x080215fc
 800e9f0:	08025ec8 	.word	0x08025ec8
 800e9f4:	08025ed4 	.word	0x08025ed4
 800e9f8:	08025ee0 	.word	0x08025ee0
		case 468 :
			strcpy(p->name,"HIGH STEP IF YOU CAN");
 800e9fc:	687b      	ldr	r3, [r7, #4]
 800e9fe:	337c      	adds	r3, #124	; 0x7c
 800ea00:	4abe      	ldr	r2, [pc, #760]	; (800ecfc <problem_fetch+0xd9dc>)
 800ea02:	461d      	mov	r5, r3
 800ea04:	4614      	mov	r4, r2
 800ea06:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800ea08:	6028      	str	r0, [r5, #0]
 800ea0a:	6069      	str	r1, [r5, #4]
 800ea0c:	60aa      	str	r2, [r5, #8]
 800ea0e:	60eb      	str	r3, [r5, #12]
 800ea10:	6820      	ldr	r0, [r4, #0]
 800ea12:	6128      	str	r0, [r5, #16]
 800ea14:	7923      	ldrb	r3, [r4, #4]
 800ea16:	752b      	strb	r3, [r5, #20]
			p->moveSize = 8;
 800ea18:	687b      	ldr	r3, [r7, #4]
 800ea1a:	2208      	movs	r2, #8
 800ea1c:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"G,J,B,E,E,B,E,D");
 800ea1e:	687b      	ldr	r3, [r7, #4]
 800ea20:	3340      	adds	r3, #64	; 0x40
 800ea22:	4ab7      	ldr	r2, [pc, #732]	; (800ed00 <problem_fetch+0xd9e0>)
 800ea24:	461c      	mov	r4, r3
 800ea26:	4615      	mov	r5, r2
 800ea28:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ea2a:	6020      	str	r0, [r4, #0]
 800ea2c:	6061      	str	r1, [r4, #4]
 800ea2e:	60a2      	str	r2, [r4, #8]
 800ea30:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,5,10,8,12,15,6,18");
 800ea32:	687b      	ldr	r3, [r7, #4]
 800ea34:	3304      	adds	r3, #4
 800ea36:	4ab3      	ldr	r2, [pc, #716]	; (800ed04 <problem_fetch+0xd9e4>)
 800ea38:	461d      	mov	r5, r3
 800ea3a:	4614      	mov	r4, r2
 800ea3c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800ea3e:	6028      	str	r0, [r5, #0]
 800ea40:	6069      	str	r1, [r5, #4]
 800ea42:	60aa      	str	r2, [r5, #8]
 800ea44:	60eb      	str	r3, [r5, #12]
 800ea46:	6820      	ldr	r0, [r4, #0]
 800ea48:	6128      	str	r0, [r5, #16]
			strcpy(p->startFinish, "s,s,d,d,d,d,d,e");
 800ea4a:	687b      	ldr	r3, [r7, #4]
 800ea4c:	33d8      	adds	r3, #216	; 0xd8
 800ea4e:	4aae      	ldr	r2, [pc, #696]	; (800ed08 <problem_fetch+0xd9e8>)
 800ea50:	461c      	mov	r4, r3
 800ea52:	4615      	mov	r5, r2
 800ea54:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ea56:	6020      	str	r0, [r4, #0]
 800ea58:	6061      	str	r1, [r4, #4]
 800ea5a:	60a2      	str	r2, [r4, #8]
 800ea5c:	60e3      	str	r3, [r4, #12]
			strcpy(p->grade, "6B+");
 800ea5e:	687b      	ldr	r3, [r7, #4]
 800ea60:	33cc      	adds	r3, #204	; 0xcc
 800ea62:	4aaa      	ldr	r2, [pc, #680]	; (800ed0c <problem_fetch+0xd9ec>)
 800ea64:	6810      	ldr	r0, [r2, #0]
 800ea66:	6018      	str	r0, [r3, #0]
			break;
 800ea68:	f00c b9a0 	b.w	801adac <problem_fetch+0x19a8c>
		case 469 :
			strcpy(p->name,"TVÅ");
 800ea6c:	687b      	ldr	r3, [r7, #4]
 800ea6e:	337c      	adds	r3, #124	; 0x7c
 800ea70:	4aa7      	ldr	r2, [pc, #668]	; (800ed10 <problem_fetch+0xd9f0>)
 800ea72:	6810      	ldr	r0, [r2, #0]
 800ea74:	6018      	str	r0, [r3, #0]
 800ea76:	7912      	ldrb	r2, [r2, #4]
 800ea78:	711a      	strb	r2, [r3, #4]
			p->moveSize = 8;
 800ea7a:	687b      	ldr	r3, [r7, #4]
 800ea7c:	2208      	movs	r2, #8
 800ea7e:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"G,H,H,E,E,G,D,D");
 800ea80:	687b      	ldr	r3, [r7, #4]
 800ea82:	3340      	adds	r3, #64	; 0x40
 800ea84:	4aa3      	ldr	r2, [pc, #652]	; (800ed14 <problem_fetch+0xd9f4>)
 800ea86:	461c      	mov	r4, r3
 800ea88:	4615      	mov	r5, r2
 800ea8a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ea8c:	6020      	str	r0, [r4, #0]
 800ea8e:	6061      	str	r1, [r4, #4]
 800ea90:	60a2      	str	r2, [r4, #8]
 800ea92:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,10,8,8,12,14,15,18");
 800ea94:	687b      	ldr	r3, [r7, #4]
 800ea96:	3304      	adds	r3, #4
 800ea98:	4a9f      	ldr	r2, [pc, #636]	; (800ed18 <problem_fetch+0xd9f8>)
 800ea9a:	461d      	mov	r5, r3
 800ea9c:	4614      	mov	r4, r2
 800ea9e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800eaa0:	6028      	str	r0, [r5, #0]
 800eaa2:	6069      	str	r1, [r5, #4]
 800eaa4:	60aa      	str	r2, [r5, #8]
 800eaa6:	60eb      	str	r3, [r5, #12]
 800eaa8:	6820      	ldr	r0, [r4, #0]
 800eaaa:	6128      	str	r0, [r5, #16]
 800eaac:	7923      	ldrb	r3, [r4, #4]
 800eaae:	752b      	strb	r3, [r5, #20]
			strcpy(p->startFinish, "s,d,d,d,d,d,d,e");
 800eab0:	687b      	ldr	r3, [r7, #4]
 800eab2:	33d8      	adds	r3, #216	; 0xd8
 800eab4:	4a99      	ldr	r2, [pc, #612]	; (800ed1c <problem_fetch+0xd9fc>)
 800eab6:	461c      	mov	r4, r3
 800eab8:	4615      	mov	r5, r2
 800eaba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800eabc:	6020      	str	r0, [r4, #0]
 800eabe:	6061      	str	r1, [r4, #4]
 800eac0:	60a2      	str	r2, [r4, #8]
 800eac2:	60e3      	str	r3, [r4, #12]
			strcpy(p->grade, "6B+");
 800eac4:	687b      	ldr	r3, [r7, #4]
 800eac6:	33cc      	adds	r3, #204	; 0xcc
 800eac8:	4a90      	ldr	r2, [pc, #576]	; (800ed0c <problem_fetch+0xd9ec>)
 800eaca:	6810      	ldr	r0, [r2, #0]
 800eacc:	6018      	str	r0, [r3, #0]
			break;
 800eace:	f00c b96d 	b.w	801adac <problem_fetch+0x19a8c>
		case 47 :
			strcpy(p->name,"ACG21");
 800ead2:	687b      	ldr	r3, [r7, #4]
 800ead4:	337c      	adds	r3, #124	; 0x7c
 800ead6:	4a92      	ldr	r2, [pc, #584]	; (800ed20 <problem_fetch+0xda00>)
 800ead8:	6810      	ldr	r0, [r2, #0]
 800eada:	6018      	str	r0, [r3, #0]
 800eadc:	8892      	ldrh	r2, [r2, #4]
 800eade:	809a      	strh	r2, [r3, #4]
			p->moveSize = 8;
 800eae0:	687b      	ldr	r3, [r7, #4]
 800eae2:	2208      	movs	r2, #8
 800eae4:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"J,E,I,G,B,E,C,A");
 800eae6:	687b      	ldr	r3, [r7, #4]
 800eae8:	3340      	adds	r3, #64	; 0x40
 800eaea:	4a8e      	ldr	r2, [pc, #568]	; (800ed24 <problem_fetch+0xda04>)
 800eaec:	461c      	mov	r4, r3
 800eaee:	4615      	mov	r5, r2
 800eaf0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800eaf2:	6020      	str	r0, [r4, #0]
 800eaf4:	6061      	str	r1, [r4, #4]
 800eaf6:	60a2      	str	r2, [r4, #8]
 800eaf8:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,6,10,10,10,14,16,18");
 800eafa:	687b      	ldr	r3, [r7, #4]
 800eafc:	3304      	adds	r3, #4
 800eafe:	4a8a      	ldr	r2, [pc, #552]	; (800ed28 <problem_fetch+0xda08>)
 800eb00:	461d      	mov	r5, r3
 800eb02:	4614      	mov	r4, r2
 800eb04:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800eb06:	6028      	str	r0, [r5, #0]
 800eb08:	6069      	str	r1, [r5, #4]
 800eb0a:	60aa      	str	r2, [r5, #8]
 800eb0c:	60eb      	str	r3, [r5, #12]
 800eb0e:	6820      	ldr	r0, [r4, #0]
 800eb10:	6128      	str	r0, [r5, #16]
 800eb12:	88a3      	ldrh	r3, [r4, #4]
 800eb14:	82ab      	strh	r3, [r5, #20]
			strcpy(p->startFinish, "s,d,d,d,d,d,d,e");
 800eb16:	687b      	ldr	r3, [r7, #4]
 800eb18:	33d8      	adds	r3, #216	; 0xd8
 800eb1a:	4a80      	ldr	r2, [pc, #512]	; (800ed1c <problem_fetch+0xd9fc>)
 800eb1c:	461c      	mov	r4, r3
 800eb1e:	4615      	mov	r5, r2
 800eb20:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800eb22:	6020      	str	r0, [r4, #0]
 800eb24:	6061      	str	r1, [r4, #4]
 800eb26:	60a2      	str	r2, [r4, #8]
 800eb28:	60e3      	str	r3, [r4, #12]
			strcpy(p->grade, "7B");
 800eb2a:	687b      	ldr	r3, [r7, #4]
 800eb2c:	33cc      	adds	r3, #204	; 0xcc
 800eb2e:	4a7f      	ldr	r2, [pc, #508]	; (800ed2c <problem_fetch+0xda0c>)
 800eb30:	8811      	ldrh	r1, [r2, #0]
 800eb32:	7892      	ldrb	r2, [r2, #2]
 800eb34:	8019      	strh	r1, [r3, #0]
 800eb36:	709a      	strb	r2, [r3, #2]
			break;
 800eb38:	f00c b938 	b.w	801adac <problem_fetch+0x19a8c>
		case 470 :
			strcpy(p->name,"BLACK WINGS");
 800eb3c:	687b      	ldr	r3, [r7, #4]
 800eb3e:	337c      	adds	r3, #124	; 0x7c
 800eb40:	4a7b      	ldr	r2, [pc, #492]	; (800ed30 <problem_fetch+0xda10>)
 800eb42:	461c      	mov	r4, r3
 800eb44:	4613      	mov	r3, r2
 800eb46:	cb07      	ldmia	r3!, {r0, r1, r2}
 800eb48:	6020      	str	r0, [r4, #0]
 800eb4a:	6061      	str	r1, [r4, #4]
 800eb4c:	60a2      	str	r2, [r4, #8]
			p->moveSize = 9;
 800eb4e:	687b      	ldr	r3, [r7, #4]
 800eb50:	2209      	movs	r2, #9
 800eb52:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"C,E,D,C,H,C,E,H,I");
 800eb54:	687b      	ldr	r3, [r7, #4]
 800eb56:	3340      	adds	r3, #64	; 0x40
 800eb58:	4a76      	ldr	r2, [pc, #472]	; (800ed34 <problem_fetch+0xda14>)
 800eb5a:	461d      	mov	r5, r3
 800eb5c:	4614      	mov	r4, r2
 800eb5e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800eb60:	6028      	str	r0, [r5, #0]
 800eb62:	6069      	str	r1, [r5, #4]
 800eb64:	60aa      	str	r2, [r5, #8]
 800eb66:	60eb      	str	r3, [r5, #12]
 800eb68:	8823      	ldrh	r3, [r4, #0]
 800eb6a:	822b      	strh	r3, [r5, #16]
			strcpy(p->moveNumbers,"5,6,15,8,10,13,16,5,18");
 800eb6c:	687b      	ldr	r3, [r7, #4]
 800eb6e:	3304      	adds	r3, #4
 800eb70:	4a71      	ldr	r2, [pc, #452]	; (800ed38 <problem_fetch+0xda18>)
 800eb72:	461c      	mov	r4, r3
 800eb74:	4615      	mov	r5, r2
 800eb76:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800eb78:	6020      	str	r0, [r4, #0]
 800eb7a:	6061      	str	r1, [r4, #4]
 800eb7c:	60a2      	str	r2, [r4, #8]
 800eb7e:	60e3      	str	r3, [r4, #12]
 800eb80:	6828      	ldr	r0, [r5, #0]
 800eb82:	6120      	str	r0, [r4, #16]
 800eb84:	88ab      	ldrh	r3, [r5, #4]
 800eb86:	79aa      	ldrb	r2, [r5, #6]
 800eb88:	82a3      	strh	r3, [r4, #20]
 800eb8a:	4613      	mov	r3, r2
 800eb8c:	75a3      	strb	r3, [r4, #22]
			strcpy(p->startFinish, "s,s,d,d,d,d,d,d,e");
 800eb8e:	687b      	ldr	r3, [r7, #4]
 800eb90:	33d8      	adds	r3, #216	; 0xd8
 800eb92:	4a6a      	ldr	r2, [pc, #424]	; (800ed3c <problem_fetch+0xda1c>)
 800eb94:	461d      	mov	r5, r3
 800eb96:	4614      	mov	r4, r2
 800eb98:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800eb9a:	6028      	str	r0, [r5, #0]
 800eb9c:	6069      	str	r1, [r5, #4]
 800eb9e:	60aa      	str	r2, [r5, #8]
 800eba0:	60eb      	str	r3, [r5, #12]
 800eba2:	8823      	ldrh	r3, [r4, #0]
 800eba4:	822b      	strh	r3, [r5, #16]
			strcpy(p->grade, "6B+");
 800eba6:	687b      	ldr	r3, [r7, #4]
 800eba8:	33cc      	adds	r3, #204	; 0xcc
 800ebaa:	4a58      	ldr	r2, [pc, #352]	; (800ed0c <problem_fetch+0xd9ec>)
 800ebac:	6810      	ldr	r0, [r2, #0]
 800ebae:	6018      	str	r0, [r3, #0]
			break;
 800ebb0:	f00c b8fc 	b.w	801adac <problem_fetch+0x19a8c>
		case 471 :
			strcpy(p->name,"INTERESTING");
 800ebb4:	687b      	ldr	r3, [r7, #4]
 800ebb6:	337c      	adds	r3, #124	; 0x7c
 800ebb8:	4a61      	ldr	r2, [pc, #388]	; (800ed40 <problem_fetch+0xda20>)
 800ebba:	461c      	mov	r4, r3
 800ebbc:	4613      	mov	r3, r2
 800ebbe:	cb07      	ldmia	r3!, {r0, r1, r2}
 800ebc0:	6020      	str	r0, [r4, #0]
 800ebc2:	6061      	str	r1, [r4, #4]
 800ebc4:	60a2      	str	r2, [r4, #8]
			p->moveSize = 7;
 800ebc6:	687b      	ldr	r3, [r7, #4]
 800ebc8:	2207      	movs	r2, #7
 800ebca:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"J,H,H,G,H,E,I");
 800ebcc:	687b      	ldr	r3, [r7, #4]
 800ebce:	3340      	adds	r3, #64	; 0x40
 800ebd0:	4a5c      	ldr	r2, [pc, #368]	; (800ed44 <problem_fetch+0xda24>)
 800ebd2:	461c      	mov	r4, r3
 800ebd4:	4613      	mov	r3, r2
 800ebd6:	cb07      	ldmia	r3!, {r0, r1, r2}
 800ebd8:	6020      	str	r0, [r4, #0]
 800ebda:	6061      	str	r1, [r4, #4]
 800ebdc:	60a2      	str	r2, [r4, #8]
 800ebde:	881b      	ldrh	r3, [r3, #0]
 800ebe0:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,5,8,10,13,16,18");
 800ebe2:	687b      	ldr	r3, [r7, #4]
 800ebe4:	3304      	adds	r3, #4
 800ebe6:	4a58      	ldr	r2, [pc, #352]	; (800ed48 <problem_fetch+0xda28>)
 800ebe8:	461d      	mov	r5, r3
 800ebea:	4614      	mov	r4, r2
 800ebec:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800ebee:	6028      	str	r0, [r5, #0]
 800ebf0:	6069      	str	r1, [r5, #4]
 800ebf2:	60aa      	str	r2, [r5, #8]
 800ebf4:	60eb      	str	r3, [r5, #12]
 800ebf6:	8823      	ldrh	r3, [r4, #0]
 800ebf8:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish, "s,s,d,d,d,d,e");
 800ebfa:	687b      	ldr	r3, [r7, #4]
 800ebfc:	33d8      	adds	r3, #216	; 0xd8
 800ebfe:	4a53      	ldr	r2, [pc, #332]	; (800ed4c <problem_fetch+0xda2c>)
 800ec00:	461c      	mov	r4, r3
 800ec02:	4613      	mov	r3, r2
 800ec04:	cb07      	ldmia	r3!, {r0, r1, r2}
 800ec06:	6020      	str	r0, [r4, #0]
 800ec08:	6061      	str	r1, [r4, #4]
 800ec0a:	60a2      	str	r2, [r4, #8]
 800ec0c:	881b      	ldrh	r3, [r3, #0]
 800ec0e:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade, "6C+");
 800ec10:	687b      	ldr	r3, [r7, #4]
 800ec12:	33cc      	adds	r3, #204	; 0xcc
 800ec14:	4a4e      	ldr	r2, [pc, #312]	; (800ed50 <problem_fetch+0xda30>)
 800ec16:	6810      	ldr	r0, [r2, #0]
 800ec18:	6018      	str	r0, [r3, #0]
			break;
 800ec1a:	f00c b8c7 	b.w	801adac <problem_fetch+0x19a8c>
		case 472 :
			strcpy(p->name,"POWER HUNGRY");
 800ec1e:	687b      	ldr	r3, [r7, #4]
 800ec20:	337c      	adds	r3, #124	; 0x7c
 800ec22:	4a4c      	ldr	r2, [pc, #304]	; (800ed54 <problem_fetch+0xda34>)
 800ec24:	461c      	mov	r4, r3
 800ec26:	4613      	mov	r3, r2
 800ec28:	cb07      	ldmia	r3!, {r0, r1, r2}
 800ec2a:	6020      	str	r0, [r4, #0]
 800ec2c:	6061      	str	r1, [r4, #4]
 800ec2e:	60a2      	str	r2, [r4, #8]
 800ec30:	781b      	ldrb	r3, [r3, #0]
 800ec32:	7323      	strb	r3, [r4, #12]
			p->moveSize = 6;
 800ec34:	687b      	ldr	r3, [r7, #4]
 800ec36:	2206      	movs	r2, #6
 800ec38:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"H,G,K,D,I,D");
 800ec3a:	687b      	ldr	r3, [r7, #4]
 800ec3c:	3340      	adds	r3, #64	; 0x40
 800ec3e:	4a46      	ldr	r2, [pc, #280]	; (800ed58 <problem_fetch+0xda38>)
 800ec40:	461c      	mov	r4, r3
 800ec42:	4613      	mov	r3, r2
 800ec44:	cb07      	ldmia	r3!, {r0, r1, r2}
 800ec46:	6020      	str	r0, [r4, #0]
 800ec48:	6061      	str	r1, [r4, #4]
 800ec4a:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,4,9,11,14,18");
 800ec4c:	687b      	ldr	r3, [r7, #4]
 800ec4e:	3304      	adds	r3, #4
 800ec50:	4a42      	ldr	r2, [pc, #264]	; (800ed5c <problem_fetch+0xda3c>)
 800ec52:	461c      	mov	r4, r3
 800ec54:	4613      	mov	r3, r2
 800ec56:	cb07      	ldmia	r3!, {r0, r1, r2}
 800ec58:	6020      	str	r0, [r4, #0]
 800ec5a:	6061      	str	r1, [r4, #4]
 800ec5c:	60a2      	str	r2, [r4, #8]
 800ec5e:	881a      	ldrh	r2, [r3, #0]
 800ec60:	789b      	ldrb	r3, [r3, #2]
 800ec62:	81a2      	strh	r2, [r4, #12]
 800ec64:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish, "s,s,d,d,d,e");
 800ec66:	687b      	ldr	r3, [r7, #4]
 800ec68:	33d8      	adds	r3, #216	; 0xd8
 800ec6a:	4a3d      	ldr	r2, [pc, #244]	; (800ed60 <problem_fetch+0xda40>)
 800ec6c:	461c      	mov	r4, r3
 800ec6e:	4613      	mov	r3, r2
 800ec70:	cb07      	ldmia	r3!, {r0, r1, r2}
 800ec72:	6020      	str	r0, [r4, #0]
 800ec74:	6061      	str	r1, [r4, #4]
 800ec76:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade, "7C");
 800ec78:	687b      	ldr	r3, [r7, #4]
 800ec7a:	33cc      	adds	r3, #204	; 0xcc
 800ec7c:	4a39      	ldr	r2, [pc, #228]	; (800ed64 <problem_fetch+0xda44>)
 800ec7e:	8811      	ldrh	r1, [r2, #0]
 800ec80:	7892      	ldrb	r2, [r2, #2]
 800ec82:	8019      	strh	r1, [r3, #0]
 800ec84:	709a      	strb	r2, [r3, #2]
			break;
 800ec86:	f00c b891 	b.w	801adac <problem_fetch+0x19a8c>
		case 473 :
			strcpy(p->name,"VALGULIOUS");
 800ec8a:	687b      	ldr	r3, [r7, #4]
 800ec8c:	337c      	adds	r3, #124	; 0x7c
 800ec8e:	4936      	ldr	r1, [pc, #216]	; (800ed68 <problem_fetch+0xda48>)
 800ec90:	461a      	mov	r2, r3
 800ec92:	460b      	mov	r3, r1
 800ec94:	cb03      	ldmia	r3!, {r0, r1}
 800ec96:	6010      	str	r0, [r2, #0]
 800ec98:	6051      	str	r1, [r2, #4]
 800ec9a:	8819      	ldrh	r1, [r3, #0]
 800ec9c:	789b      	ldrb	r3, [r3, #2]
 800ec9e:	8111      	strh	r1, [r2, #8]
 800eca0:	7293      	strb	r3, [r2, #10]
			p->moveSize = 7;
 800eca2:	687b      	ldr	r3, [r7, #4]
 800eca4:	2207      	movs	r2, #7
 800eca6:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"C,C,G,J,J,I,I");
 800eca8:	687b      	ldr	r3, [r7, #4]
 800ecaa:	3340      	adds	r3, #64	; 0x40
 800ecac:	4a2f      	ldr	r2, [pc, #188]	; (800ed6c <problem_fetch+0xda4c>)
 800ecae:	461c      	mov	r4, r3
 800ecb0:	4613      	mov	r3, r2
 800ecb2:	cb07      	ldmia	r3!, {r0, r1, r2}
 800ecb4:	6020      	str	r0, [r4, #0]
 800ecb6:	6061      	str	r1, [r4, #4]
 800ecb8:	60a2      	str	r2, [r4, #8]
 800ecba:	881b      	ldrh	r3, [r3, #0]
 800ecbc:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,8,9,5,12,15,18");
 800ecbe:	687b      	ldr	r3, [r7, #4]
 800ecc0:	3304      	adds	r3, #4
 800ecc2:	4a2b      	ldr	r2, [pc, #172]	; (800ed70 <problem_fetch+0xda50>)
 800ecc4:	461d      	mov	r5, r3
 800ecc6:	4614      	mov	r4, r2
 800ecc8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800ecca:	6028      	str	r0, [r5, #0]
 800eccc:	6069      	str	r1, [r5, #4]
 800ecce:	60aa      	str	r2, [r5, #8]
 800ecd0:	60eb      	str	r3, [r5, #12]
 800ecd2:	7823      	ldrb	r3, [r4, #0]
 800ecd4:	742b      	strb	r3, [r5, #16]
			strcpy(p->startFinish, "s,d,d,d,d,d,e");
 800ecd6:	687b      	ldr	r3, [r7, #4]
 800ecd8:	33d8      	adds	r3, #216	; 0xd8
 800ecda:	4a26      	ldr	r2, [pc, #152]	; (800ed74 <problem_fetch+0xda54>)
 800ecdc:	461c      	mov	r4, r3
 800ecde:	4613      	mov	r3, r2
 800ece0:	cb07      	ldmia	r3!, {r0, r1, r2}
 800ece2:	6020      	str	r0, [r4, #0]
 800ece4:	6061      	str	r1, [r4, #4]
 800ece6:	60a2      	str	r2, [r4, #8]
 800ece8:	881b      	ldrh	r3, [r3, #0]
 800ecea:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade, "7A+");
 800ecec:	687b      	ldr	r3, [r7, #4]
 800ecee:	33cc      	adds	r3, #204	; 0xcc
 800ecf0:	4a21      	ldr	r2, [pc, #132]	; (800ed78 <problem_fetch+0xda58>)
 800ecf2:	6810      	ldr	r0, [r2, #0]
 800ecf4:	6018      	str	r0, [r3, #0]
			break;
 800ecf6:	f00c b859 	b.w	801adac <problem_fetch+0x19a8c>
 800ecfa:	bf00      	nop
 800ecfc:	08025ef0 	.word	0x08025ef0
 800ed00:	08025f08 	.word	0x08025f08
 800ed04:	08025f18 	.word	0x08025f18
 800ed08:	080214cc 	.word	0x080214cc
 800ed0c:	080212b0 	.word	0x080212b0
 800ed10:	08025f2c 	.word	0x08025f2c
 800ed14:	08025f34 	.word	0x08025f34
 800ed18:	08025f44 	.word	0x08025f44
 800ed1c:	08021458 	.word	0x08021458
 800ed20:	08025f5c 	.word	0x08025f5c
 800ed24:	08025f64 	.word	0x08025f64
 800ed28:	08025f74 	.word	0x08025f74
 800ed2c:	0802132c 	.word	0x0802132c
 800ed30:	08025f8c 	.word	0x08025f8c
 800ed34:	08025f98 	.word	0x08025f98
 800ed38:	08025fac 	.word	0x08025fac
 800ed3c:	0802187c 	.word	0x0802187c
 800ed40:	08025fc4 	.word	0x08025fc4
 800ed44:	08025fd0 	.word	0x08025fd0
 800ed48:	08025fe0 	.word	0x08025fe0
 800ed4c:	080212a0 	.word	0x080212a0
 800ed50:	080213a8 	.word	0x080213a8
 800ed54:	08025ff4 	.word	0x08025ff4
 800ed58:	08026004 	.word	0x08026004
 800ed5c:	08026010 	.word	0x08026010
 800ed60:	08021910 	.word	0x08021910
 800ed64:	0802158c 	.word	0x0802158c
 800ed68:	08026020 	.word	0x08026020
 800ed6c:	0802602c 	.word	0x0802602c
 800ed70:	0802603c 	.word	0x0802603c
 800ed74:	08021494 	.word	0x08021494
 800ed78:	08021424 	.word	0x08021424
		case 474 :
			strcpy(p->name,"GS");
 800ed7c:	687b      	ldr	r3, [r7, #4]
 800ed7e:	337c      	adds	r3, #124	; 0x7c
 800ed80:	4aba      	ldr	r2, [pc, #744]	; (800f06c <problem_fetch+0xdd4c>)
 800ed82:	8811      	ldrh	r1, [r2, #0]
 800ed84:	7892      	ldrb	r2, [r2, #2]
 800ed86:	8019      	strh	r1, [r3, #0]
 800ed88:	709a      	strb	r2, [r3, #2]
			p->moveSize = 10;
 800ed8a:	687b      	ldr	r3, [r7, #4]
 800ed8c:	220a      	movs	r2, #10
 800ed8e:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"E,H,H,H,F,C,E,A,E,A");
 800ed90:	687b      	ldr	r3, [r7, #4]
 800ed92:	3340      	adds	r3, #64	; 0x40
 800ed94:	4ab6      	ldr	r2, [pc, #728]	; (800f070 <problem_fetch+0xdd50>)
 800ed96:	461d      	mov	r5, r3
 800ed98:	4614      	mov	r4, r2
 800ed9a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800ed9c:	6028      	str	r0, [r5, #0]
 800ed9e:	6069      	str	r1, [r5, #4]
 800eda0:	60aa      	str	r2, [r5, #8]
 800eda2:	60eb      	str	r3, [r5, #12]
 800eda4:	6820      	ldr	r0, [r4, #0]
 800eda6:	6128      	str	r0, [r5, #16]
			strcpy(p->moveNumbers,"6,5,8,10,11,13,14,14,16,18");
 800eda8:	687b      	ldr	r3, [r7, #4]
 800edaa:	3304      	adds	r3, #4
 800edac:	4ab1      	ldr	r2, [pc, #708]	; (800f074 <problem_fetch+0xdd54>)
 800edae:	461d      	mov	r5, r3
 800edb0:	4614      	mov	r4, r2
 800edb2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800edb4:	6028      	str	r0, [r5, #0]
 800edb6:	6069      	str	r1, [r5, #4]
 800edb8:	60aa      	str	r2, [r5, #8]
 800edba:	60eb      	str	r3, [r5, #12]
 800edbc:	cc03      	ldmia	r4!, {r0, r1}
 800edbe:	6128      	str	r0, [r5, #16]
 800edc0:	6169      	str	r1, [r5, #20]
 800edc2:	8823      	ldrh	r3, [r4, #0]
 800edc4:	78a2      	ldrb	r2, [r4, #2]
 800edc6:	832b      	strh	r3, [r5, #24]
 800edc8:	4613      	mov	r3, r2
 800edca:	76ab      	strb	r3, [r5, #26]
			strcpy(p->startFinish, "s,s,d,d,d,d,d,d,d,e");
 800edcc:	687b      	ldr	r3, [r7, #4]
 800edce:	33d8      	adds	r3, #216	; 0xd8
 800edd0:	4aa9      	ldr	r2, [pc, #676]	; (800f078 <problem_fetch+0xdd58>)
 800edd2:	461d      	mov	r5, r3
 800edd4:	4614      	mov	r4, r2
 800edd6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800edd8:	6028      	str	r0, [r5, #0]
 800edda:	6069      	str	r1, [r5, #4]
 800eddc:	60aa      	str	r2, [r5, #8]
 800edde:	60eb      	str	r3, [r5, #12]
 800ede0:	6820      	ldr	r0, [r4, #0]
 800ede2:	6128      	str	r0, [r5, #16]
			strcpy(p->grade, "6C");
 800ede4:	687b      	ldr	r3, [r7, #4]
 800ede6:	33cc      	adds	r3, #204	; 0xcc
 800ede8:	4aa4      	ldr	r2, [pc, #656]	; (800f07c <problem_fetch+0xdd5c>)
 800edea:	8811      	ldrh	r1, [r2, #0]
 800edec:	7892      	ldrb	r2, [r2, #2]
 800edee:	8019      	strh	r1, [r3, #0]
 800edf0:	709a      	strb	r2, [r3, #2]
			break;
 800edf2:	f00b bfdb 	b.w	801adac <problem_fetch+0x19a8c>
		case 475 :
			strcpy(p->name,"ANY GIVEN DAY");
 800edf6:	687b      	ldr	r3, [r7, #4]
 800edf8:	337c      	adds	r3, #124	; 0x7c
 800edfa:	4aa1      	ldr	r2, [pc, #644]	; (800f080 <problem_fetch+0xdd60>)
 800edfc:	461c      	mov	r4, r3
 800edfe:	4613      	mov	r3, r2
 800ee00:	cb07      	ldmia	r3!, {r0, r1, r2}
 800ee02:	6020      	str	r0, [r4, #0]
 800ee04:	6061      	str	r1, [r4, #4]
 800ee06:	60a2      	str	r2, [r4, #8]
 800ee08:	881b      	ldrh	r3, [r3, #0]
 800ee0a:	81a3      	strh	r3, [r4, #12]
			p->moveSize = 6;
 800ee0c:	687b      	ldr	r3, [r7, #4]
 800ee0e:	2206      	movs	r2, #6
 800ee10:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"G,E,H,C,D,D");
 800ee12:	687b      	ldr	r3, [r7, #4]
 800ee14:	3340      	adds	r3, #64	; 0x40
 800ee16:	4a9b      	ldr	r2, [pc, #620]	; (800f084 <problem_fetch+0xdd64>)
 800ee18:	461c      	mov	r4, r3
 800ee1a:	4613      	mov	r3, r2
 800ee1c:	cb07      	ldmia	r3!, {r0, r1, r2}
 800ee1e:	6020      	str	r0, [r4, #0]
 800ee20:	6061      	str	r1, [r4, #4]
 800ee22:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,8,10,13,15,18");
 800ee24:	687b      	ldr	r3, [r7, #4]
 800ee26:	3304      	adds	r3, #4
 800ee28:	4a97      	ldr	r2, [pc, #604]	; (800f088 <problem_fetch+0xdd68>)
 800ee2a:	461c      	mov	r4, r3
 800ee2c:	4615      	mov	r5, r2
 800ee2e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ee30:	6020      	str	r0, [r4, #0]
 800ee32:	6061      	str	r1, [r4, #4]
 800ee34:	60a2      	str	r2, [r4, #8]
 800ee36:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish, "s,d,d,d,d,e");
 800ee38:	687b      	ldr	r3, [r7, #4]
 800ee3a:	33d8      	adds	r3, #216	; 0xd8
 800ee3c:	4a93      	ldr	r2, [pc, #588]	; (800f08c <problem_fetch+0xdd6c>)
 800ee3e:	461c      	mov	r4, r3
 800ee40:	4613      	mov	r3, r2
 800ee42:	cb07      	ldmia	r3!, {r0, r1, r2}
 800ee44:	6020      	str	r0, [r4, #0]
 800ee46:	6061      	str	r1, [r4, #4]
 800ee48:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade, "6B+");
 800ee4a:	687b      	ldr	r3, [r7, #4]
 800ee4c:	33cc      	adds	r3, #204	; 0xcc
 800ee4e:	4a90      	ldr	r2, [pc, #576]	; (800f090 <problem_fetch+0xdd70>)
 800ee50:	6810      	ldr	r0, [r2, #0]
 800ee52:	6018      	str	r0, [r3, #0]
			break;
 800ee54:	f00b bfaa 	b.w	801adac <problem_fetch+0x19a8c>
		case 476 :
			strcpy(p->name,"BASIC B*TCH");
 800ee58:	687b      	ldr	r3, [r7, #4]
 800ee5a:	337c      	adds	r3, #124	; 0x7c
 800ee5c:	4a8d      	ldr	r2, [pc, #564]	; (800f094 <problem_fetch+0xdd74>)
 800ee5e:	461c      	mov	r4, r3
 800ee60:	4613      	mov	r3, r2
 800ee62:	cb07      	ldmia	r3!, {r0, r1, r2}
 800ee64:	6020      	str	r0, [r4, #0]
 800ee66:	6061      	str	r1, [r4, #4]
 800ee68:	60a2      	str	r2, [r4, #8]
			p->moveSize = 4;
 800ee6a:	687b      	ldr	r3, [r7, #4]
 800ee6c:	2204      	movs	r2, #4
 800ee6e:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"J,H,C,D");
 800ee70:	687b      	ldr	r3, [r7, #4]
 800ee72:	3340      	adds	r3, #64	; 0x40
 800ee74:	4988      	ldr	r1, [pc, #544]	; (800f098 <problem_fetch+0xdd78>)
 800ee76:	461a      	mov	r2, r3
 800ee78:	460b      	mov	r3, r1
 800ee7a:	cb03      	ldmia	r3!, {r0, r1}
 800ee7c:	6010      	str	r0, [r2, #0]
 800ee7e:	6051      	str	r1, [r2, #4]
			strcpy(p->moveNumbers,"5,10,13,18");
 800ee80:	687b      	ldr	r3, [r7, #4]
 800ee82:	3304      	adds	r3, #4
 800ee84:	4985      	ldr	r1, [pc, #532]	; (800f09c <problem_fetch+0xdd7c>)
 800ee86:	461a      	mov	r2, r3
 800ee88:	460b      	mov	r3, r1
 800ee8a:	cb03      	ldmia	r3!, {r0, r1}
 800ee8c:	6010      	str	r0, [r2, #0]
 800ee8e:	6051      	str	r1, [r2, #4]
 800ee90:	8819      	ldrh	r1, [r3, #0]
 800ee92:	789b      	ldrb	r3, [r3, #2]
 800ee94:	8111      	strh	r1, [r2, #8]
 800ee96:	7293      	strb	r3, [r2, #10]
			strcpy(p->startFinish, "s,d,d,e");
 800ee98:	687b      	ldr	r3, [r7, #4]
 800ee9a:	33d8      	adds	r3, #216	; 0xd8
 800ee9c:	4980      	ldr	r1, [pc, #512]	; (800f0a0 <problem_fetch+0xdd80>)
 800ee9e:	461a      	mov	r2, r3
 800eea0:	460b      	mov	r3, r1
 800eea2:	cb03      	ldmia	r3!, {r0, r1}
 800eea4:	6010      	str	r0, [r2, #0]
 800eea6:	6051      	str	r1, [r2, #4]
			strcpy(p->grade, "7A+");
 800eea8:	687b      	ldr	r3, [r7, #4]
 800eeaa:	33cc      	adds	r3, #204	; 0xcc
 800eeac:	4a7d      	ldr	r2, [pc, #500]	; (800f0a4 <problem_fetch+0xdd84>)
 800eeae:	6810      	ldr	r0, [r2, #0]
 800eeb0:	6018      	str	r0, [r3, #0]
			break;
 800eeb2:	f00b bf7b 	b.w	801adac <problem_fetch+0x19a8c>
		case 477 :
			strcpy(p->name,"SLIGHTLY LESS BASIC B*TCH");
 800eeb6:	687b      	ldr	r3, [r7, #4]
 800eeb8:	337c      	adds	r3, #124	; 0x7c
 800eeba:	4a7b      	ldr	r2, [pc, #492]	; (800f0a8 <problem_fetch+0xdd88>)
 800eebc:	461d      	mov	r5, r3
 800eebe:	4614      	mov	r4, r2
 800eec0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800eec2:	6028      	str	r0, [r5, #0]
 800eec4:	6069      	str	r1, [r5, #4]
 800eec6:	60aa      	str	r2, [r5, #8]
 800eec8:	60eb      	str	r3, [r5, #12]
 800eeca:	cc03      	ldmia	r4!, {r0, r1}
 800eecc:	6128      	str	r0, [r5, #16]
 800eece:	6169      	str	r1, [r5, #20]
 800eed0:	8823      	ldrh	r3, [r4, #0]
 800eed2:	832b      	strh	r3, [r5, #24]
			p->moveSize = 5;
 800eed4:	687b      	ldr	r3, [r7, #4]
 800eed6:	2205      	movs	r2, #5
 800eed8:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"J,H,C,G,I");
 800eeda:	687b      	ldr	r3, [r7, #4]
 800eedc:	3340      	adds	r3, #64	; 0x40
 800eede:	4973      	ldr	r1, [pc, #460]	; (800f0ac <problem_fetch+0xdd8c>)
 800eee0:	461a      	mov	r2, r3
 800eee2:	460b      	mov	r3, r1
 800eee4:	cb03      	ldmia	r3!, {r0, r1}
 800eee6:	6010      	str	r0, [r2, #0]
 800eee8:	6051      	str	r1, [r2, #4]
 800eeea:	881b      	ldrh	r3, [r3, #0]
 800eeec:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"5,10,13,17,18");
 800eeee:	687b      	ldr	r3, [r7, #4]
 800eef0:	3304      	adds	r3, #4
 800eef2:	4a6f      	ldr	r2, [pc, #444]	; (800f0b0 <problem_fetch+0xdd90>)
 800eef4:	461c      	mov	r4, r3
 800eef6:	4613      	mov	r3, r2
 800eef8:	cb07      	ldmia	r3!, {r0, r1, r2}
 800eefa:	6020      	str	r0, [r4, #0]
 800eefc:	6061      	str	r1, [r4, #4]
 800eefe:	60a2      	str	r2, [r4, #8]
 800ef00:	881b      	ldrh	r3, [r3, #0]
 800ef02:	81a3      	strh	r3, [r4, #12]
			strcpy(p->startFinish, "s,d,d,d,e");
 800ef04:	687b      	ldr	r3, [r7, #4]
 800ef06:	33d8      	adds	r3, #216	; 0xd8
 800ef08:	496a      	ldr	r1, [pc, #424]	; (800f0b4 <problem_fetch+0xdd94>)
 800ef0a:	461a      	mov	r2, r3
 800ef0c:	460b      	mov	r3, r1
 800ef0e:	cb03      	ldmia	r3!, {r0, r1}
 800ef10:	6010      	str	r0, [r2, #0]
 800ef12:	6051      	str	r1, [r2, #4]
 800ef14:	881b      	ldrh	r3, [r3, #0]
 800ef16:	8113      	strh	r3, [r2, #8]
			strcpy(p->grade, "7A+");
 800ef18:	687b      	ldr	r3, [r7, #4]
 800ef1a:	33cc      	adds	r3, #204	; 0xcc
 800ef1c:	4a61      	ldr	r2, [pc, #388]	; (800f0a4 <problem_fetch+0xdd84>)
 800ef1e:	6810      	ldr	r0, [r2, #0]
 800ef20:	6018      	str	r0, [r3, #0]
			break;
 800ef22:	f00b bf43 	b.w	801adac <problem_fetch+0x19a8c>
		case 478 :
			strcpy(p->name,"MO'RON");
 800ef26:	687b      	ldr	r3, [r7, #4]
 800ef28:	337c      	adds	r3, #124	; 0x7c
 800ef2a:	4a63      	ldr	r2, [pc, #396]	; (800f0b8 <problem_fetch+0xdd98>)
 800ef2c:	6810      	ldr	r0, [r2, #0]
 800ef2e:	6018      	str	r0, [r3, #0]
 800ef30:	8891      	ldrh	r1, [r2, #4]
 800ef32:	7992      	ldrb	r2, [r2, #6]
 800ef34:	8099      	strh	r1, [r3, #4]
 800ef36:	719a      	strb	r2, [r3, #6]
			p->moveSize = 8;
 800ef38:	687b      	ldr	r3, [r7, #4]
 800ef3a:	2208      	movs	r2, #8
 800ef3c:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"E,G,E,A,E,E,G,D");
 800ef3e:	687b      	ldr	r3, [r7, #4]
 800ef40:	3340      	adds	r3, #64	; 0x40
 800ef42:	4a5e      	ldr	r2, [pc, #376]	; (800f0bc <problem_fetch+0xdd9c>)
 800ef44:	461c      	mov	r4, r3
 800ef46:	4615      	mov	r5, r2
 800ef48:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ef4a:	6020      	str	r0, [r4, #0]
 800ef4c:	6061      	str	r1, [r4, #4]
 800ef4e:	60a2      	str	r2, [r4, #8]
 800ef50:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"6,4,8,9,12,14,17,18");
 800ef52:	687b      	ldr	r3, [r7, #4]
 800ef54:	3304      	adds	r3, #4
 800ef56:	4a5a      	ldr	r2, [pc, #360]	; (800f0c0 <problem_fetch+0xdda0>)
 800ef58:	461d      	mov	r5, r3
 800ef5a:	4614      	mov	r4, r2
 800ef5c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800ef5e:	6028      	str	r0, [r5, #0]
 800ef60:	6069      	str	r1, [r5, #4]
 800ef62:	60aa      	str	r2, [r5, #8]
 800ef64:	60eb      	str	r3, [r5, #12]
 800ef66:	6820      	ldr	r0, [r4, #0]
 800ef68:	6128      	str	r0, [r5, #16]
			strcpy(p->startFinish, "s,s,d,d,d,d,d,e");
 800ef6a:	687b      	ldr	r3, [r7, #4]
 800ef6c:	33d8      	adds	r3, #216	; 0xd8
 800ef6e:	4a55      	ldr	r2, [pc, #340]	; (800f0c4 <problem_fetch+0xdda4>)
 800ef70:	461c      	mov	r4, r3
 800ef72:	4615      	mov	r5, r2
 800ef74:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ef76:	6020      	str	r0, [r4, #0]
 800ef78:	6061      	str	r1, [r4, #4]
 800ef7a:	60a2      	str	r2, [r4, #8]
 800ef7c:	60e3      	str	r3, [r4, #12]
			strcpy(p->grade, "7A");
 800ef7e:	687b      	ldr	r3, [r7, #4]
 800ef80:	33cc      	adds	r3, #204	; 0xcc
 800ef82:	4a51      	ldr	r2, [pc, #324]	; (800f0c8 <problem_fetch+0xdda8>)
 800ef84:	8811      	ldrh	r1, [r2, #0]
 800ef86:	7892      	ldrb	r2, [r2, #2]
 800ef88:	8019      	strh	r1, [r3, #0]
 800ef8a:	709a      	strb	r2, [r3, #2]
			break;
 800ef8c:	f00b bf0e 	b.w	801adac <problem_fetch+0x19a8c>
		case 479 :
			strcpy(p->name,"RONSTOPPABLE");
 800ef90:	687b      	ldr	r3, [r7, #4]
 800ef92:	337c      	adds	r3, #124	; 0x7c
 800ef94:	4a4d      	ldr	r2, [pc, #308]	; (800f0cc <problem_fetch+0xddac>)
 800ef96:	461c      	mov	r4, r3
 800ef98:	4613      	mov	r3, r2
 800ef9a:	cb07      	ldmia	r3!, {r0, r1, r2}
 800ef9c:	6020      	str	r0, [r4, #0]
 800ef9e:	6061      	str	r1, [r4, #4]
 800efa0:	60a2      	str	r2, [r4, #8]
 800efa2:	781b      	ldrb	r3, [r3, #0]
 800efa4:	7323      	strb	r3, [r4, #12]
			p->moveSize = 6;
 800efa6:	687b      	ldr	r3, [r7, #4]
 800efa8:	2206      	movs	r2, #6
 800efaa:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"G,H,C,E,B,D");
 800efac:	687b      	ldr	r3, [r7, #4]
 800efae:	3340      	adds	r3, #64	; 0x40
 800efb0:	4a47      	ldr	r2, [pc, #284]	; (800f0d0 <problem_fetch+0xddb0>)
 800efb2:	461c      	mov	r4, r3
 800efb4:	4613      	mov	r3, r2
 800efb6:	cb07      	ldmia	r3!, {r0, r1, r2}
 800efb8:	6020      	str	r0, [r4, #0]
 800efba:	6061      	str	r1, [r4, #4]
 800efbc:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,8,8,12,15,18");
 800efbe:	687b      	ldr	r3, [r7, #4]
 800efc0:	3304      	adds	r3, #4
 800efc2:	4a44      	ldr	r2, [pc, #272]	; (800f0d4 <problem_fetch+0xddb4>)
 800efc4:	461c      	mov	r4, r3
 800efc6:	4613      	mov	r3, r2
 800efc8:	cb07      	ldmia	r3!, {r0, r1, r2}
 800efca:	6020      	str	r0, [r4, #0]
 800efcc:	6061      	str	r1, [r4, #4]
 800efce:	60a2      	str	r2, [r4, #8]
 800efd0:	881a      	ldrh	r2, [r3, #0]
 800efd2:	789b      	ldrb	r3, [r3, #2]
 800efd4:	81a2      	strh	r2, [r4, #12]
 800efd6:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish, "s,d,d,d,d,e");
 800efd8:	687b      	ldr	r3, [r7, #4]
 800efda:	33d8      	adds	r3, #216	; 0xd8
 800efdc:	4a2b      	ldr	r2, [pc, #172]	; (800f08c <problem_fetch+0xdd6c>)
 800efde:	461c      	mov	r4, r3
 800efe0:	4613      	mov	r3, r2
 800efe2:	cb07      	ldmia	r3!, {r0, r1, r2}
 800efe4:	6020      	str	r0, [r4, #0]
 800efe6:	6061      	str	r1, [r4, #4]
 800efe8:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade, "6C+");
 800efea:	687b      	ldr	r3, [r7, #4]
 800efec:	33cc      	adds	r3, #204	; 0xcc
 800efee:	4a3a      	ldr	r2, [pc, #232]	; (800f0d8 <problem_fetch+0xddb8>)
 800eff0:	6810      	ldr	r0, [r2, #0]
 800eff2:	6018      	str	r0, [r3, #0]
			break;
 800eff4:	f00b beda 	b.w	801adac <problem_fetch+0x19a8c>
		case 48 :
			strcpy(p->name,"KANG MINA IOI");
 800eff8:	687b      	ldr	r3, [r7, #4]
 800effa:	337c      	adds	r3, #124	; 0x7c
 800effc:	4a37      	ldr	r2, [pc, #220]	; (800f0dc <problem_fetch+0xddbc>)
 800effe:	461c      	mov	r4, r3
 800f000:	4613      	mov	r3, r2
 800f002:	cb07      	ldmia	r3!, {r0, r1, r2}
 800f004:	6020      	str	r0, [r4, #0]
 800f006:	6061      	str	r1, [r4, #4]
 800f008:	60a2      	str	r2, [r4, #8]
 800f00a:	881b      	ldrh	r3, [r3, #0]
 800f00c:	81a3      	strh	r3, [r4, #12]
			p->moveSize = 8;
 800f00e:	687b      	ldr	r3, [r7, #4]
 800f010:	2208      	movs	r2, #8
 800f012:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"E,E,B,B,A,D,E,I");
 800f014:	687b      	ldr	r3, [r7, #4]
 800f016:	3340      	adds	r3, #64	; 0x40
 800f018:	4a31      	ldr	r2, [pc, #196]	; (800f0e0 <problem_fetch+0xddc0>)
 800f01a:	461c      	mov	r4, r3
 800f01c:	4615      	mov	r5, r2
 800f01e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f020:	6020      	str	r0, [r4, #0]
 800f022:	6061      	str	r1, [r4, #4]
 800f024:	60a2      	str	r2, [r4, #8]
 800f026:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"6,9,10,12,14,15,16,18");
 800f028:	687b      	ldr	r3, [r7, #4]
 800f02a:	3304      	adds	r3, #4
 800f02c:	4a2d      	ldr	r2, [pc, #180]	; (800f0e4 <problem_fetch+0xddc4>)
 800f02e:	461d      	mov	r5, r3
 800f030:	4614      	mov	r4, r2
 800f032:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800f034:	6028      	str	r0, [r5, #0]
 800f036:	6069      	str	r1, [r5, #4]
 800f038:	60aa      	str	r2, [r5, #8]
 800f03a:	60eb      	str	r3, [r5, #12]
 800f03c:	6820      	ldr	r0, [r4, #0]
 800f03e:	6128      	str	r0, [r5, #16]
 800f040:	88a3      	ldrh	r3, [r4, #4]
 800f042:	82ab      	strh	r3, [r5, #20]
			strcpy(p->startFinish, "s,d,d,d,d,d,d,e");
 800f044:	687b      	ldr	r3, [r7, #4]
 800f046:	33d8      	adds	r3, #216	; 0xd8
 800f048:	4a27      	ldr	r2, [pc, #156]	; (800f0e8 <problem_fetch+0xddc8>)
 800f04a:	461c      	mov	r4, r3
 800f04c:	4615      	mov	r5, r2
 800f04e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f050:	6020      	str	r0, [r4, #0]
 800f052:	6061      	str	r1, [r4, #4]
 800f054:	60a2      	str	r2, [r4, #8]
 800f056:	60e3      	str	r3, [r4, #12]
			strcpy(p->grade, "7A");
 800f058:	687b      	ldr	r3, [r7, #4]
 800f05a:	33cc      	adds	r3, #204	; 0xcc
 800f05c:	4a1a      	ldr	r2, [pc, #104]	; (800f0c8 <problem_fetch+0xdda8>)
 800f05e:	8811      	ldrh	r1, [r2, #0]
 800f060:	7892      	ldrb	r2, [r2, #2]
 800f062:	8019      	strh	r1, [r3, #0]
 800f064:	709a      	strb	r2, [r3, #2]
			break;
 800f066:	f00b bea1 	b.w	801adac <problem_fetch+0x19a8c>
 800f06a:	bf00      	nop
 800f06c:	08026050 	.word	0x08026050
 800f070:	08026054 	.word	0x08026054
 800f074:	08026068 	.word	0x08026068
 800f078:	080215fc 	.word	0x080215fc
 800f07c:	08021370 	.word	0x08021370
 800f080:	08026084 	.word	0x08026084
 800f084:	08026094 	.word	0x08026094
 800f088:	08021768 	.word	0x08021768
 800f08c:	0802139c 	.word	0x0802139c
 800f090:	080212b0 	.word	0x080212b0
 800f094:	080260a0 	.word	0x080260a0
 800f098:	080260ac 	.word	0x080260ac
 800f09c:	080260b4 	.word	0x080260b4
 800f0a0:	08022028 	.word	0x08022028
 800f0a4:	08021424 	.word	0x08021424
 800f0a8:	080260c0 	.word	0x080260c0
 800f0ac:	080260dc 	.word	0x080260dc
 800f0b0:	080234f8 	.word	0x080234f8
 800f0b4:	08021320 	.word	0x08021320
 800f0b8:	080260e8 	.word	0x080260e8
 800f0bc:	080260f0 	.word	0x080260f0
 800f0c0:	08026100 	.word	0x08026100
 800f0c4:	080214cc 	.word	0x080214cc
 800f0c8:	080212f4 	.word	0x080212f4
 800f0cc:	08026114 	.word	0x08026114
 800f0d0:	08026124 	.word	0x08026124
 800f0d4:	08022668 	.word	0x08022668
 800f0d8:	080213a8 	.word	0x080213a8
 800f0dc:	08026130 	.word	0x08026130
 800f0e0:	08026140 	.word	0x08026140
 800f0e4:	08026150 	.word	0x08026150
 800f0e8:	08021458 	.word	0x08021458
		case 480 :
			strcpy(p->name,"TESSME 1");
 800f0ec:	687b      	ldr	r3, [r7, #4]
 800f0ee:	337c      	adds	r3, #124	; 0x7c
 800f0f0:	49b6      	ldr	r1, [pc, #728]	; (800f3cc <problem_fetch+0xe0ac>)
 800f0f2:	461a      	mov	r2, r3
 800f0f4:	460b      	mov	r3, r1
 800f0f6:	cb03      	ldmia	r3!, {r0, r1}
 800f0f8:	6010      	str	r0, [r2, #0]
 800f0fa:	6051      	str	r1, [r2, #4]
 800f0fc:	781b      	ldrb	r3, [r3, #0]
 800f0fe:	7213      	strb	r3, [r2, #8]
			p->moveSize = 7;
 800f100:	687b      	ldr	r3, [r7, #4]
 800f102:	2207      	movs	r2, #7
 800f104:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"J,H,E,F,J,H,I");
 800f106:	687b      	ldr	r3, [r7, #4]
 800f108:	3340      	adds	r3, #64	; 0x40
 800f10a:	4ab1      	ldr	r2, [pc, #708]	; (800f3d0 <problem_fetch+0xe0b0>)
 800f10c:	461c      	mov	r4, r3
 800f10e:	4613      	mov	r3, r2
 800f110:	cb07      	ldmia	r3!, {r0, r1, r2}
 800f112:	6020      	str	r0, [r4, #0]
 800f114:	6061      	str	r1, [r4, #4]
 800f116:	60a2      	str	r2, [r4, #8]
 800f118:	881b      	ldrh	r3, [r3, #0]
 800f11a:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,8,8,11,13,16,18");
 800f11c:	687b      	ldr	r3, [r7, #4]
 800f11e:	3304      	adds	r3, #4
 800f120:	4aac      	ldr	r2, [pc, #688]	; (800f3d4 <problem_fetch+0xe0b4>)
 800f122:	461d      	mov	r5, r3
 800f124:	4614      	mov	r4, r2
 800f126:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800f128:	6028      	str	r0, [r5, #0]
 800f12a:	6069      	str	r1, [r5, #4]
 800f12c:	60aa      	str	r2, [r5, #8]
 800f12e:	60eb      	str	r3, [r5, #12]
 800f130:	8823      	ldrh	r3, [r4, #0]
 800f132:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish, "s,d,d,d,d,d,e");
 800f134:	687b      	ldr	r3, [r7, #4]
 800f136:	33d8      	adds	r3, #216	; 0xd8
 800f138:	4aa7      	ldr	r2, [pc, #668]	; (800f3d8 <problem_fetch+0xe0b8>)
 800f13a:	461c      	mov	r4, r3
 800f13c:	4613      	mov	r3, r2
 800f13e:	cb07      	ldmia	r3!, {r0, r1, r2}
 800f140:	6020      	str	r0, [r4, #0]
 800f142:	6061      	str	r1, [r4, #4]
 800f144:	60a2      	str	r2, [r4, #8]
 800f146:	881b      	ldrh	r3, [r3, #0]
 800f148:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade, "6B+");
 800f14a:	687b      	ldr	r3, [r7, #4]
 800f14c:	33cc      	adds	r3, #204	; 0xcc
 800f14e:	4aa3      	ldr	r2, [pc, #652]	; (800f3dc <problem_fetch+0xe0bc>)
 800f150:	6810      	ldr	r0, [r2, #0]
 800f152:	6018      	str	r0, [r3, #0]
			break;
 800f154:	f00b be2a 	b.w	801adac <problem_fetch+0x19a8c>
		case 481 :
			strcpy(p->name,"TESSME 3");
 800f158:	687b      	ldr	r3, [r7, #4]
 800f15a:	337c      	adds	r3, #124	; 0x7c
 800f15c:	49a0      	ldr	r1, [pc, #640]	; (800f3e0 <problem_fetch+0xe0c0>)
 800f15e:	461a      	mov	r2, r3
 800f160:	460b      	mov	r3, r1
 800f162:	cb03      	ldmia	r3!, {r0, r1}
 800f164:	6010      	str	r0, [r2, #0]
 800f166:	6051      	str	r1, [r2, #4]
 800f168:	781b      	ldrb	r3, [r3, #0]
 800f16a:	7213      	strb	r3, [r2, #8]
			p->moveSize = 6;
 800f16c:	687b      	ldr	r3, [r7, #4]
 800f16e:	2206      	movs	r2, #6
 800f170:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"J,H,I,E,E,I");
 800f172:	687b      	ldr	r3, [r7, #4]
 800f174:	3340      	adds	r3, #64	; 0x40
 800f176:	4a9b      	ldr	r2, [pc, #620]	; (800f3e4 <problem_fetch+0xe0c4>)
 800f178:	461c      	mov	r4, r3
 800f17a:	4613      	mov	r3, r2
 800f17c:	cb07      	ldmia	r3!, {r0, r1, r2}
 800f17e:	6020      	str	r0, [r4, #0]
 800f180:	6061      	str	r1, [r4, #4]
 800f182:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,8,14,12,9,18");
 800f184:	687b      	ldr	r3, [r7, #4]
 800f186:	3304      	adds	r3, #4
 800f188:	4a97      	ldr	r2, [pc, #604]	; (800f3e8 <problem_fetch+0xe0c8>)
 800f18a:	461c      	mov	r4, r3
 800f18c:	4613      	mov	r3, r2
 800f18e:	cb07      	ldmia	r3!, {r0, r1, r2}
 800f190:	6020      	str	r0, [r4, #0]
 800f192:	6061      	str	r1, [r4, #4]
 800f194:	60a2      	str	r2, [r4, #8]
 800f196:	881a      	ldrh	r2, [r3, #0]
 800f198:	789b      	ldrb	r3, [r3, #2]
 800f19a:	81a2      	strh	r2, [r4, #12]
 800f19c:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish, "s,d,d,d,d,e");
 800f19e:	687b      	ldr	r3, [r7, #4]
 800f1a0:	33d8      	adds	r3, #216	; 0xd8
 800f1a2:	4a92      	ldr	r2, [pc, #584]	; (800f3ec <problem_fetch+0xe0cc>)
 800f1a4:	461c      	mov	r4, r3
 800f1a6:	4613      	mov	r3, r2
 800f1a8:	cb07      	ldmia	r3!, {r0, r1, r2}
 800f1aa:	6020      	str	r0, [r4, #0]
 800f1ac:	6061      	str	r1, [r4, #4]
 800f1ae:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade, "7A+");
 800f1b0:	687b      	ldr	r3, [r7, #4]
 800f1b2:	33cc      	adds	r3, #204	; 0xcc
 800f1b4:	4a8e      	ldr	r2, [pc, #568]	; (800f3f0 <problem_fetch+0xe0d0>)
 800f1b6:	6810      	ldr	r0, [r2, #0]
 800f1b8:	6018      	str	r0, [r3, #0]
			break;
 800f1ba:	f00b bdf7 	b.w	801adac <problem_fetch+0x19a8c>
		case 482 :
			strcpy(p->name,"TESSME 4");
 800f1be:	687b      	ldr	r3, [r7, #4]
 800f1c0:	337c      	adds	r3, #124	; 0x7c
 800f1c2:	498c      	ldr	r1, [pc, #560]	; (800f3f4 <problem_fetch+0xe0d4>)
 800f1c4:	461a      	mov	r2, r3
 800f1c6:	460b      	mov	r3, r1
 800f1c8:	cb03      	ldmia	r3!, {r0, r1}
 800f1ca:	6010      	str	r0, [r2, #0]
 800f1cc:	6051      	str	r1, [r2, #4]
 800f1ce:	781b      	ldrb	r3, [r3, #0]
 800f1d0:	7213      	strb	r3, [r2, #8]
			p->moveSize = 6;
 800f1d2:	687b      	ldr	r3, [r7, #4]
 800f1d4:	2206      	movs	r2, #6
 800f1d6:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"J,H,E,I,D,I");
 800f1d8:	687b      	ldr	r3, [r7, #4]
 800f1da:	3340      	adds	r3, #64	; 0x40
 800f1dc:	4a86      	ldr	r2, [pc, #536]	; (800f3f8 <problem_fetch+0xe0d8>)
 800f1de:	461c      	mov	r4, r3
 800f1e0:	4613      	mov	r3, r2
 800f1e2:	cb07      	ldmia	r3!, {r0, r1, r2}
 800f1e4:	6020      	str	r0, [r4, #0]
 800f1e6:	6061      	str	r1, [r4, #4]
 800f1e8:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,8,12,14,7,18");
 800f1ea:	687b      	ldr	r3, [r7, #4]
 800f1ec:	3304      	adds	r3, #4
 800f1ee:	4a83      	ldr	r2, [pc, #524]	; (800f3fc <problem_fetch+0xe0dc>)
 800f1f0:	461c      	mov	r4, r3
 800f1f2:	4613      	mov	r3, r2
 800f1f4:	cb07      	ldmia	r3!, {r0, r1, r2}
 800f1f6:	6020      	str	r0, [r4, #0]
 800f1f8:	6061      	str	r1, [r4, #4]
 800f1fa:	60a2      	str	r2, [r4, #8]
 800f1fc:	881a      	ldrh	r2, [r3, #0]
 800f1fe:	789b      	ldrb	r3, [r3, #2]
 800f200:	81a2      	strh	r2, [r4, #12]
 800f202:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish, "s,d,d,d,d,e");
 800f204:	687b      	ldr	r3, [r7, #4]
 800f206:	33d8      	adds	r3, #216	; 0xd8
 800f208:	4a78      	ldr	r2, [pc, #480]	; (800f3ec <problem_fetch+0xe0cc>)
 800f20a:	461c      	mov	r4, r3
 800f20c:	4613      	mov	r3, r2
 800f20e:	cb07      	ldmia	r3!, {r0, r1, r2}
 800f210:	6020      	str	r0, [r4, #0]
 800f212:	6061      	str	r1, [r4, #4]
 800f214:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade, "7B+");
 800f216:	687b      	ldr	r3, [r7, #4]
 800f218:	33cc      	adds	r3, #204	; 0xcc
 800f21a:	4a79      	ldr	r2, [pc, #484]	; (800f400 <problem_fetch+0xe0e0>)
 800f21c:	6810      	ldr	r0, [r2, #0]
 800f21e:	6018      	str	r0, [r3, #0]
			break;
 800f220:	f00b bdc4 	b.w	801adac <problem_fetch+0x19a8c>
		case 483 :
			strcpy(p->name,"KHAZAD DUM");
 800f224:	687b      	ldr	r3, [r7, #4]
 800f226:	337c      	adds	r3, #124	; 0x7c
 800f228:	4976      	ldr	r1, [pc, #472]	; (800f404 <problem_fetch+0xe0e4>)
 800f22a:	461a      	mov	r2, r3
 800f22c:	460b      	mov	r3, r1
 800f22e:	cb03      	ldmia	r3!, {r0, r1}
 800f230:	6010      	str	r0, [r2, #0]
 800f232:	6051      	str	r1, [r2, #4]
 800f234:	8819      	ldrh	r1, [r3, #0]
 800f236:	789b      	ldrb	r3, [r3, #2]
 800f238:	8111      	strh	r1, [r2, #8]
 800f23a:	7293      	strb	r3, [r2, #10]
			p->moveSize = 6;
 800f23c:	687b      	ldr	r3, [r7, #4]
 800f23e:	2206      	movs	r2, #6
 800f240:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"J,G,F,C,D,A");
 800f242:	687b      	ldr	r3, [r7, #4]
 800f244:	3340      	adds	r3, #64	; 0x40
 800f246:	4a70      	ldr	r2, [pc, #448]	; (800f408 <problem_fetch+0xe0e8>)
 800f248:	461c      	mov	r4, r3
 800f24a:	4613      	mov	r3, r2
 800f24c:	cb07      	ldmia	r3!, {r0, r1, r2}
 800f24e:	6020      	str	r0, [r4, #0]
 800f250:	6061      	str	r1, [r4, #4]
 800f252:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,9,11,13,15,18");
 800f254:	687b      	ldr	r3, [r7, #4]
 800f256:	3304      	adds	r3, #4
 800f258:	4a6c      	ldr	r2, [pc, #432]	; (800f40c <problem_fetch+0xe0ec>)
 800f25a:	461c      	mov	r4, r3
 800f25c:	4615      	mov	r5, r2
 800f25e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f260:	6020      	str	r0, [r4, #0]
 800f262:	6061      	str	r1, [r4, #4]
 800f264:	60a2      	str	r2, [r4, #8]
 800f266:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish, "s,d,d,d,d,e");
 800f268:	687b      	ldr	r3, [r7, #4]
 800f26a:	33d8      	adds	r3, #216	; 0xd8
 800f26c:	4a5f      	ldr	r2, [pc, #380]	; (800f3ec <problem_fetch+0xe0cc>)
 800f26e:	461c      	mov	r4, r3
 800f270:	4613      	mov	r3, r2
 800f272:	cb07      	ldmia	r3!, {r0, r1, r2}
 800f274:	6020      	str	r0, [r4, #0]
 800f276:	6061      	str	r1, [r4, #4]
 800f278:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade, "6B+");
 800f27a:	687b      	ldr	r3, [r7, #4]
 800f27c:	33cc      	adds	r3, #204	; 0xcc
 800f27e:	4a57      	ldr	r2, [pc, #348]	; (800f3dc <problem_fetch+0xe0bc>)
 800f280:	6810      	ldr	r0, [r2, #0]
 800f282:	6018      	str	r0, [r3, #0]
			break;
 800f284:	f00b bd92 	b.w	801adac <problem_fetch+0x19a8c>
		case 484 :
			strcpy(p->name,"BLACK PHENOMENON");
 800f288:	687b      	ldr	r3, [r7, #4]
 800f28a:	337c      	adds	r3, #124	; 0x7c
 800f28c:	4a60      	ldr	r2, [pc, #384]	; (800f410 <problem_fetch+0xe0f0>)
 800f28e:	461d      	mov	r5, r3
 800f290:	4614      	mov	r4, r2
 800f292:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800f294:	6028      	str	r0, [r5, #0]
 800f296:	6069      	str	r1, [r5, #4]
 800f298:	60aa      	str	r2, [r5, #8]
 800f29a:	60eb      	str	r3, [r5, #12]
 800f29c:	7823      	ldrb	r3, [r4, #0]
 800f29e:	742b      	strb	r3, [r5, #16]
			p->moveSize = 6;
 800f2a0:	687b      	ldr	r3, [r7, #4]
 800f2a2:	2206      	movs	r2, #6
 800f2a4:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"G,G,B,G,B,D");
 800f2a6:	687b      	ldr	r3, [r7, #4]
 800f2a8:	3340      	adds	r3, #64	; 0x40
 800f2aa:	4a5a      	ldr	r2, [pc, #360]	; (800f414 <problem_fetch+0xe0f4>)
 800f2ac:	461c      	mov	r4, r3
 800f2ae:	4613      	mov	r3, r2
 800f2b0:	cb07      	ldmia	r3!, {r0, r1, r2}
 800f2b2:	6020      	str	r0, [r4, #0]
 800f2b4:	6061      	str	r1, [r4, #4]
 800f2b6:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,6,6,10,10,18");
 800f2b8:	687b      	ldr	r3, [r7, #4]
 800f2ba:	3304      	adds	r3, #4
 800f2bc:	4a56      	ldr	r2, [pc, #344]	; (800f418 <problem_fetch+0xe0f8>)
 800f2be:	461c      	mov	r4, r3
 800f2c0:	4613      	mov	r3, r2
 800f2c2:	cb07      	ldmia	r3!, {r0, r1, r2}
 800f2c4:	6020      	str	r0, [r4, #0]
 800f2c6:	6061      	str	r1, [r4, #4]
 800f2c8:	60a2      	str	r2, [r4, #8]
 800f2ca:	881a      	ldrh	r2, [r3, #0]
 800f2cc:	789b      	ldrb	r3, [r3, #2]
 800f2ce:	81a2      	strh	r2, [r4, #12]
 800f2d0:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish, "s,d,d,d,d,e");
 800f2d2:	687b      	ldr	r3, [r7, #4]
 800f2d4:	33d8      	adds	r3, #216	; 0xd8
 800f2d6:	4a45      	ldr	r2, [pc, #276]	; (800f3ec <problem_fetch+0xe0cc>)
 800f2d8:	461c      	mov	r4, r3
 800f2da:	4613      	mov	r3, r2
 800f2dc:	cb07      	ldmia	r3!, {r0, r1, r2}
 800f2de:	6020      	str	r0, [r4, #0]
 800f2e0:	6061      	str	r1, [r4, #4]
 800f2e2:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade, "8A");
 800f2e4:	687b      	ldr	r3, [r7, #4]
 800f2e6:	33cc      	adds	r3, #204	; 0xcc
 800f2e8:	4a4c      	ldr	r2, [pc, #304]	; (800f41c <problem_fetch+0xe0fc>)
 800f2ea:	8811      	ldrh	r1, [r2, #0]
 800f2ec:	7892      	ldrb	r2, [r2, #2]
 800f2ee:	8019      	strh	r1, [r3, #0]
 800f2f0:	709a      	strb	r2, [r3, #2]
			break;
 800f2f2:	f00b bd5b 	b.w	801adac <problem_fetch+0x19a8c>
		case 485 :
			strcpy(p->name,"OKLAHOMA");
 800f2f6:	687b      	ldr	r3, [r7, #4]
 800f2f8:	337c      	adds	r3, #124	; 0x7c
 800f2fa:	4949      	ldr	r1, [pc, #292]	; (800f420 <problem_fetch+0xe100>)
 800f2fc:	461a      	mov	r2, r3
 800f2fe:	460b      	mov	r3, r1
 800f300:	cb03      	ldmia	r3!, {r0, r1}
 800f302:	6010      	str	r0, [r2, #0]
 800f304:	6051      	str	r1, [r2, #4]
 800f306:	781b      	ldrb	r3, [r3, #0]
 800f308:	7213      	strb	r3, [r2, #8]
			p->moveSize = 5;
 800f30a:	687b      	ldr	r3, [r7, #4]
 800f30c:	2205      	movs	r2, #5
 800f30e:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"J,H,G,D,A");
 800f310:	687b      	ldr	r3, [r7, #4]
 800f312:	3340      	adds	r3, #64	; 0x40
 800f314:	4943      	ldr	r1, [pc, #268]	; (800f424 <problem_fetch+0xe104>)
 800f316:	461a      	mov	r2, r3
 800f318:	460b      	mov	r3, r1
 800f31a:	cb03      	ldmia	r3!, {r0, r1}
 800f31c:	6010      	str	r0, [r2, #0]
 800f31e:	6051      	str	r1, [r2, #4]
 800f320:	881b      	ldrh	r3, [r3, #0]
 800f322:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"5,10,14,15,18");
 800f324:	687b      	ldr	r3, [r7, #4]
 800f326:	3304      	adds	r3, #4
 800f328:	4a3f      	ldr	r2, [pc, #252]	; (800f428 <problem_fetch+0xe108>)
 800f32a:	461c      	mov	r4, r3
 800f32c:	4613      	mov	r3, r2
 800f32e:	cb07      	ldmia	r3!, {r0, r1, r2}
 800f330:	6020      	str	r0, [r4, #0]
 800f332:	6061      	str	r1, [r4, #4]
 800f334:	60a2      	str	r2, [r4, #8]
 800f336:	881b      	ldrh	r3, [r3, #0]
 800f338:	81a3      	strh	r3, [r4, #12]
			strcpy(p->startFinish, "s,d,d,d,e");
 800f33a:	687b      	ldr	r3, [r7, #4]
 800f33c:	33d8      	adds	r3, #216	; 0xd8
 800f33e:	493b      	ldr	r1, [pc, #236]	; (800f42c <problem_fetch+0xe10c>)
 800f340:	461a      	mov	r2, r3
 800f342:	460b      	mov	r3, r1
 800f344:	cb03      	ldmia	r3!, {r0, r1}
 800f346:	6010      	str	r0, [r2, #0]
 800f348:	6051      	str	r1, [r2, #4]
 800f34a:	881b      	ldrh	r3, [r3, #0]
 800f34c:	8113      	strh	r3, [r2, #8]
			strcpy(p->grade, "7A");
 800f34e:	687b      	ldr	r3, [r7, #4]
 800f350:	33cc      	adds	r3, #204	; 0xcc
 800f352:	4a37      	ldr	r2, [pc, #220]	; (800f430 <problem_fetch+0xe110>)
 800f354:	8811      	ldrh	r1, [r2, #0]
 800f356:	7892      	ldrb	r2, [r2, #2]
 800f358:	8019      	strh	r1, [r3, #0]
 800f35a:	709a      	strb	r2, [r3, #2]
			break;
 800f35c:	f00b bd26 	b.w	801adac <problem_fetch+0x19a8c>
		case 486 :
			strcpy(p->name,"CAPTAIN AUBREY VAR.");
 800f360:	687b      	ldr	r3, [r7, #4]
 800f362:	337c      	adds	r3, #124	; 0x7c
 800f364:	4a33      	ldr	r2, [pc, #204]	; (800f434 <problem_fetch+0xe114>)
 800f366:	461d      	mov	r5, r3
 800f368:	4614      	mov	r4, r2
 800f36a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800f36c:	6028      	str	r0, [r5, #0]
 800f36e:	6069      	str	r1, [r5, #4]
 800f370:	60aa      	str	r2, [r5, #8]
 800f372:	60eb      	str	r3, [r5, #12]
 800f374:	6820      	ldr	r0, [r4, #0]
 800f376:	6128      	str	r0, [r5, #16]
			p->moveSize = 5;
 800f378:	687b      	ldr	r3, [r7, #4]
 800f37a:	2205      	movs	r2, #5
 800f37c:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"J,H,E,I,I");
 800f37e:	687b      	ldr	r3, [r7, #4]
 800f380:	3340      	adds	r3, #64	; 0x40
 800f382:	492d      	ldr	r1, [pc, #180]	; (800f438 <problem_fetch+0xe118>)
 800f384:	461a      	mov	r2, r3
 800f386:	460b      	mov	r3, r1
 800f388:	cb03      	ldmia	r3!, {r0, r1}
 800f38a:	6010      	str	r0, [r2, #0]
 800f38c:	6051      	str	r1, [r2, #4]
 800f38e:	881b      	ldrh	r3, [r3, #0]
 800f390:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"5,8,12,14,18");
 800f392:	687b      	ldr	r3, [r7, #4]
 800f394:	3304      	adds	r3, #4
 800f396:	4a29      	ldr	r2, [pc, #164]	; (800f43c <problem_fetch+0xe11c>)
 800f398:	461c      	mov	r4, r3
 800f39a:	4613      	mov	r3, r2
 800f39c:	cb07      	ldmia	r3!, {r0, r1, r2}
 800f39e:	6020      	str	r0, [r4, #0]
 800f3a0:	6061      	str	r1, [r4, #4]
 800f3a2:	60a2      	str	r2, [r4, #8]
 800f3a4:	781b      	ldrb	r3, [r3, #0]
 800f3a6:	7323      	strb	r3, [r4, #12]
			strcpy(p->startFinish, "s,d,d,d,e");
 800f3a8:	687b      	ldr	r3, [r7, #4]
 800f3aa:	33d8      	adds	r3, #216	; 0xd8
 800f3ac:	491f      	ldr	r1, [pc, #124]	; (800f42c <problem_fetch+0xe10c>)
 800f3ae:	461a      	mov	r2, r3
 800f3b0:	460b      	mov	r3, r1
 800f3b2:	cb03      	ldmia	r3!, {r0, r1}
 800f3b4:	6010      	str	r0, [r2, #0]
 800f3b6:	6051      	str	r1, [r2, #4]
 800f3b8:	881b      	ldrh	r3, [r3, #0]
 800f3ba:	8113      	strh	r3, [r2, #8]
			strcpy(p->grade, "7A+");
 800f3bc:	687b      	ldr	r3, [r7, #4]
 800f3be:	33cc      	adds	r3, #204	; 0xcc
 800f3c0:	4a0b      	ldr	r2, [pc, #44]	; (800f3f0 <problem_fetch+0xe0d0>)
 800f3c2:	6810      	ldr	r0, [r2, #0]
 800f3c4:	6018      	str	r0, [r3, #0]
			break;
 800f3c6:	f00b bcf1 	b.w	801adac <problem_fetch+0x19a8c>
 800f3ca:	bf00      	nop
 800f3cc:	08026168 	.word	0x08026168
 800f3d0:	08026174 	.word	0x08026174
 800f3d4:	080243dc 	.word	0x080243dc
 800f3d8:	08021494 	.word	0x08021494
 800f3dc:	080212b0 	.word	0x080212b0
 800f3e0:	08026184 	.word	0x08026184
 800f3e4:	08026190 	.word	0x08026190
 800f3e8:	0802619c 	.word	0x0802619c
 800f3ec:	0802139c 	.word	0x0802139c
 800f3f0:	08021424 	.word	0x08021424
 800f3f4:	080261ac 	.word	0x080261ac
 800f3f8:	080261b8 	.word	0x080261b8
 800f3fc:	080261c4 	.word	0x080261c4
 800f400:	08021848 	.word	0x08021848
 800f404:	080261d4 	.word	0x080261d4
 800f408:	080261e0 	.word	0x080261e0
 800f40c:	080261ec 	.word	0x080261ec
 800f410:	080261fc 	.word	0x080261fc
 800f414:	08026210 	.word	0x08026210
 800f418:	0802621c 	.word	0x0802621c
 800f41c:	08021714 	.word	0x08021714
 800f420:	0802622c 	.word	0x0802622c
 800f424:	08026238 	.word	0x08026238
 800f428:	0802347c 	.word	0x0802347c
 800f42c:	08021320 	.word	0x08021320
 800f430:	080212f4 	.word	0x080212f4
 800f434:	08026244 	.word	0x08026244
 800f438:	08026258 	.word	0x08026258
 800f43c:	080239dc 	.word	0x080239dc
		case 487 :
			strcpy(p->name,"MATCHCATCH");
 800f440:	687b      	ldr	r3, [r7, #4]
 800f442:	337c      	adds	r3, #124	; 0x7c
 800f444:	49b8      	ldr	r1, [pc, #736]	; (800f728 <problem_fetch+0xe408>)
 800f446:	461a      	mov	r2, r3
 800f448:	460b      	mov	r3, r1
 800f44a:	cb03      	ldmia	r3!, {r0, r1}
 800f44c:	6010      	str	r0, [r2, #0]
 800f44e:	6051      	str	r1, [r2, #4]
 800f450:	8819      	ldrh	r1, [r3, #0]
 800f452:	789b      	ldrb	r3, [r3, #2]
 800f454:	8111      	strh	r1, [r2, #8]
 800f456:	7293      	strb	r3, [r2, #10]
			p->moveSize = 5;
 800f458:	687b      	ldr	r3, [r7, #4]
 800f45a:	2205      	movs	r2, #5
 800f45c:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"H,I,J,G,I");
 800f45e:	687b      	ldr	r3, [r7, #4]
 800f460:	3340      	adds	r3, #64	; 0x40
 800f462:	49b2      	ldr	r1, [pc, #712]	; (800f72c <problem_fetch+0xe40c>)
 800f464:	461a      	mov	r2, r3
 800f466:	460b      	mov	r3, r1
 800f468:	cb03      	ldmia	r3!, {r0, r1}
 800f46a:	6010      	str	r0, [r2, #0]
 800f46c:	6051      	str	r1, [r2, #4]
 800f46e:	881b      	ldrh	r3, [r3, #0]
 800f470:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"5,10,13,14,18");
 800f472:	687b      	ldr	r3, [r7, #4]
 800f474:	3304      	adds	r3, #4
 800f476:	4aae      	ldr	r2, [pc, #696]	; (800f730 <problem_fetch+0xe410>)
 800f478:	461c      	mov	r4, r3
 800f47a:	4613      	mov	r3, r2
 800f47c:	cb07      	ldmia	r3!, {r0, r1, r2}
 800f47e:	6020      	str	r0, [r4, #0]
 800f480:	6061      	str	r1, [r4, #4]
 800f482:	60a2      	str	r2, [r4, #8]
 800f484:	881b      	ldrh	r3, [r3, #0]
 800f486:	81a3      	strh	r3, [r4, #12]
			strcpy(p->startFinish, "s,d,d,d,e");
 800f488:	687b      	ldr	r3, [r7, #4]
 800f48a:	33d8      	adds	r3, #216	; 0xd8
 800f48c:	49a9      	ldr	r1, [pc, #676]	; (800f734 <problem_fetch+0xe414>)
 800f48e:	461a      	mov	r2, r3
 800f490:	460b      	mov	r3, r1
 800f492:	cb03      	ldmia	r3!, {r0, r1}
 800f494:	6010      	str	r0, [r2, #0]
 800f496:	6051      	str	r1, [r2, #4]
 800f498:	881b      	ldrh	r3, [r3, #0]
 800f49a:	8113      	strh	r3, [r2, #8]
			strcpy(p->grade, "6C+");
 800f49c:	687b      	ldr	r3, [r7, #4]
 800f49e:	33cc      	adds	r3, #204	; 0xcc
 800f4a0:	4aa5      	ldr	r2, [pc, #660]	; (800f738 <problem_fetch+0xe418>)
 800f4a2:	6810      	ldr	r0, [r2, #0]
 800f4a4:	6018      	str	r0, [r3, #0]
			break;
 800f4a6:	f00b bc81 	b.w	801adac <problem_fetch+0x19a8c>
		case 488 :
			strcpy(p->name,"KKSBSKAN");
 800f4aa:	687b      	ldr	r3, [r7, #4]
 800f4ac:	337c      	adds	r3, #124	; 0x7c
 800f4ae:	49a3      	ldr	r1, [pc, #652]	; (800f73c <problem_fetch+0xe41c>)
 800f4b0:	461a      	mov	r2, r3
 800f4b2:	460b      	mov	r3, r1
 800f4b4:	cb03      	ldmia	r3!, {r0, r1}
 800f4b6:	6010      	str	r0, [r2, #0]
 800f4b8:	6051      	str	r1, [r2, #4]
 800f4ba:	781b      	ldrb	r3, [r3, #0]
 800f4bc:	7213      	strb	r3, [r2, #8]
			p->moveSize = 5;
 800f4be:	687b      	ldr	r3, [r7, #4]
 800f4c0:	2205      	movs	r2, #5
 800f4c2:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"G,C,D,C,I");
 800f4c4:	687b      	ldr	r3, [r7, #4]
 800f4c6:	3340      	adds	r3, #64	; 0x40
 800f4c8:	499d      	ldr	r1, [pc, #628]	; (800f740 <problem_fetch+0xe420>)
 800f4ca:	461a      	mov	r2, r3
 800f4cc:	460b      	mov	r3, r1
 800f4ce:	cb03      	ldmia	r3!, {r0, r1}
 800f4d0:	6010      	str	r0, [r2, #0]
 800f4d2:	6051      	str	r1, [r2, #4]
 800f4d4:	881b      	ldrh	r3, [r3, #0]
 800f4d6:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"4,8,11,16,18");
 800f4d8:	687b      	ldr	r3, [r7, #4]
 800f4da:	3304      	adds	r3, #4
 800f4dc:	4a99      	ldr	r2, [pc, #612]	; (800f744 <problem_fetch+0xe424>)
 800f4de:	461c      	mov	r4, r3
 800f4e0:	4613      	mov	r3, r2
 800f4e2:	cb07      	ldmia	r3!, {r0, r1, r2}
 800f4e4:	6020      	str	r0, [r4, #0]
 800f4e6:	6061      	str	r1, [r4, #4]
 800f4e8:	60a2      	str	r2, [r4, #8]
 800f4ea:	781b      	ldrb	r3, [r3, #0]
 800f4ec:	7323      	strb	r3, [r4, #12]
			strcpy(p->startFinish, "s,d,d,d,e");
 800f4ee:	687b      	ldr	r3, [r7, #4]
 800f4f0:	33d8      	adds	r3, #216	; 0xd8
 800f4f2:	4990      	ldr	r1, [pc, #576]	; (800f734 <problem_fetch+0xe414>)
 800f4f4:	461a      	mov	r2, r3
 800f4f6:	460b      	mov	r3, r1
 800f4f8:	cb03      	ldmia	r3!, {r0, r1}
 800f4fa:	6010      	str	r0, [r2, #0]
 800f4fc:	6051      	str	r1, [r2, #4]
 800f4fe:	881b      	ldrh	r3, [r3, #0]
 800f500:	8113      	strh	r3, [r2, #8]
			strcpy(p->grade, "7C");
 800f502:	687b      	ldr	r3, [r7, #4]
 800f504:	33cc      	adds	r3, #204	; 0xcc
 800f506:	4a90      	ldr	r2, [pc, #576]	; (800f748 <problem_fetch+0xe428>)
 800f508:	8811      	ldrh	r1, [r2, #0]
 800f50a:	7892      	ldrb	r2, [r2, #2]
 800f50c:	8019      	strh	r1, [r3, #0]
 800f50e:	709a      	strb	r2, [r3, #2]
			break;
 800f510:	f00b bc4c 	b.w	801adac <problem_fetch+0x19a8c>
		case 489 :
			strcpy(p->name,"ALLES IST MÖGLICH");
 800f514:	687b      	ldr	r3, [r7, #4]
 800f516:	337c      	adds	r3, #124	; 0x7c
 800f518:	4a8c      	ldr	r2, [pc, #560]	; (800f74c <problem_fetch+0xe42c>)
 800f51a:	461d      	mov	r5, r3
 800f51c:	4614      	mov	r4, r2
 800f51e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800f520:	6028      	str	r0, [r5, #0]
 800f522:	6069      	str	r1, [r5, #4]
 800f524:	60aa      	str	r2, [r5, #8]
 800f526:	60eb      	str	r3, [r5, #12]
 800f528:	8823      	ldrh	r3, [r4, #0]
 800f52a:	78a2      	ldrb	r2, [r4, #2]
 800f52c:	822b      	strh	r3, [r5, #16]
 800f52e:	4613      	mov	r3, r2
 800f530:	74ab      	strb	r3, [r5, #18]
			p->moveSize = 4;
 800f532:	687b      	ldr	r3, [r7, #4]
 800f534:	2204      	movs	r2, #4
 800f536:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"E,F,E,D");
 800f538:	687b      	ldr	r3, [r7, #4]
 800f53a:	3340      	adds	r3, #64	; 0x40
 800f53c:	4984      	ldr	r1, [pc, #528]	; (800f750 <problem_fetch+0xe430>)
 800f53e:	461a      	mov	r2, r3
 800f540:	460b      	mov	r3, r1
 800f542:	cb03      	ldmia	r3!, {r0, r1}
 800f544:	6010      	str	r0, [r2, #0]
 800f546:	6051      	str	r1, [r2, #4]
			strcpy(p->moveNumbers,"6,11,14,18");
 800f548:	687b      	ldr	r3, [r7, #4]
 800f54a:	3304      	adds	r3, #4
 800f54c:	4981      	ldr	r1, [pc, #516]	; (800f754 <problem_fetch+0xe434>)
 800f54e:	461a      	mov	r2, r3
 800f550:	460b      	mov	r3, r1
 800f552:	cb03      	ldmia	r3!, {r0, r1}
 800f554:	6010      	str	r0, [r2, #0]
 800f556:	6051      	str	r1, [r2, #4]
 800f558:	8819      	ldrh	r1, [r3, #0]
 800f55a:	789b      	ldrb	r3, [r3, #2]
 800f55c:	8111      	strh	r1, [r2, #8]
 800f55e:	7293      	strb	r3, [r2, #10]
			strcpy(p->startFinish, "s,d,d,e");
 800f560:	687b      	ldr	r3, [r7, #4]
 800f562:	33d8      	adds	r3, #216	; 0xd8
 800f564:	497c      	ldr	r1, [pc, #496]	; (800f758 <problem_fetch+0xe438>)
 800f566:	461a      	mov	r2, r3
 800f568:	460b      	mov	r3, r1
 800f56a:	cb03      	ldmia	r3!, {r0, r1}
 800f56c:	6010      	str	r0, [r2, #0]
 800f56e:	6051      	str	r1, [r2, #4]
			strcpy(p->grade, "7B+");
 800f570:	687b      	ldr	r3, [r7, #4]
 800f572:	33cc      	adds	r3, #204	; 0xcc
 800f574:	4a79      	ldr	r2, [pc, #484]	; (800f75c <problem_fetch+0xe43c>)
 800f576:	6810      	ldr	r0, [r2, #0]
 800f578:	6018      	str	r0, [r3, #0]
			break;
 800f57a:	f00b bc17 	b.w	801adac <problem_fetch+0x19a8c>
		case 49 :
			strcpy(p->name,"USE THE BIG ONES");
 800f57e:	687b      	ldr	r3, [r7, #4]
 800f580:	337c      	adds	r3, #124	; 0x7c
 800f582:	4a77      	ldr	r2, [pc, #476]	; (800f760 <problem_fetch+0xe440>)
 800f584:	461d      	mov	r5, r3
 800f586:	4614      	mov	r4, r2
 800f588:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800f58a:	6028      	str	r0, [r5, #0]
 800f58c:	6069      	str	r1, [r5, #4]
 800f58e:	60aa      	str	r2, [r5, #8]
 800f590:	60eb      	str	r3, [r5, #12]
 800f592:	7823      	ldrb	r3, [r4, #0]
 800f594:	742b      	strb	r3, [r5, #16]
			p->moveSize = 7;
 800f596:	687b      	ldr	r3, [r7, #4]
 800f598:	2207      	movs	r2, #7
 800f59a:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"G,E,G,F,C,D,A");
 800f59c:	687b      	ldr	r3, [r7, #4]
 800f59e:	3340      	adds	r3, #64	; 0x40
 800f5a0:	4a70      	ldr	r2, [pc, #448]	; (800f764 <problem_fetch+0xe444>)
 800f5a2:	461c      	mov	r4, r3
 800f5a4:	4613      	mov	r3, r2
 800f5a6:	cb07      	ldmia	r3!, {r0, r1, r2}
 800f5a8:	6020      	str	r0, [r4, #0]
 800f5aa:	6061      	str	r1, [r4, #4]
 800f5ac:	60a2      	str	r2, [r4, #8]
 800f5ae:	881b      	ldrh	r3, [r3, #0]
 800f5b0:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,8,9,11,13,15,18");
 800f5b2:	687b      	ldr	r3, [r7, #4]
 800f5b4:	3304      	adds	r3, #4
 800f5b6:	4a6c      	ldr	r2, [pc, #432]	; (800f768 <problem_fetch+0xe448>)
 800f5b8:	461d      	mov	r5, r3
 800f5ba:	4614      	mov	r4, r2
 800f5bc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800f5be:	6028      	str	r0, [r5, #0]
 800f5c0:	6069      	str	r1, [r5, #4]
 800f5c2:	60aa      	str	r2, [r5, #8]
 800f5c4:	60eb      	str	r3, [r5, #12]
 800f5c6:	8823      	ldrh	r3, [r4, #0]
 800f5c8:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish, "s,d,d,d,d,d,e");
 800f5ca:	687b      	ldr	r3, [r7, #4]
 800f5cc:	33d8      	adds	r3, #216	; 0xd8
 800f5ce:	4a67      	ldr	r2, [pc, #412]	; (800f76c <problem_fetch+0xe44c>)
 800f5d0:	461c      	mov	r4, r3
 800f5d2:	4613      	mov	r3, r2
 800f5d4:	cb07      	ldmia	r3!, {r0, r1, r2}
 800f5d6:	6020      	str	r0, [r4, #0]
 800f5d8:	6061      	str	r1, [r4, #4]
 800f5da:	60a2      	str	r2, [r4, #8]
 800f5dc:	881b      	ldrh	r3, [r3, #0]
 800f5de:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade, "6B+");
 800f5e0:	687b      	ldr	r3, [r7, #4]
 800f5e2:	33cc      	adds	r3, #204	; 0xcc
 800f5e4:	4a62      	ldr	r2, [pc, #392]	; (800f770 <problem_fetch+0xe450>)
 800f5e6:	6810      	ldr	r0, [r2, #0]
 800f5e8:	6018      	str	r0, [r3, #0]
			break;
 800f5ea:	f00b bbdf 	b.w	801adac <problem_fetch+0x19a8c>
		case 490 :
			strcpy(p->name,"CRONENBERG");
 800f5ee:	687b      	ldr	r3, [r7, #4]
 800f5f0:	337c      	adds	r3, #124	; 0x7c
 800f5f2:	4960      	ldr	r1, [pc, #384]	; (800f774 <problem_fetch+0xe454>)
 800f5f4:	461a      	mov	r2, r3
 800f5f6:	460b      	mov	r3, r1
 800f5f8:	cb03      	ldmia	r3!, {r0, r1}
 800f5fa:	6010      	str	r0, [r2, #0]
 800f5fc:	6051      	str	r1, [r2, #4]
 800f5fe:	8819      	ldrh	r1, [r3, #0]
 800f600:	789b      	ldrb	r3, [r3, #2]
 800f602:	8111      	strh	r1, [r2, #8]
 800f604:	7293      	strb	r3, [r2, #10]
			p->moveSize = 7;
 800f606:	687b      	ldr	r3, [r7, #4]
 800f608:	2207      	movs	r2, #7
 800f60a:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"G,E,E,A,E,E,I");
 800f60c:	687b      	ldr	r3, [r7, #4]
 800f60e:	3340      	adds	r3, #64	; 0x40
 800f610:	4a59      	ldr	r2, [pc, #356]	; (800f778 <problem_fetch+0xe458>)
 800f612:	461c      	mov	r4, r3
 800f614:	4613      	mov	r3, r2
 800f616:	cb07      	ldmia	r3!, {r0, r1, r2}
 800f618:	6020      	str	r0, [r4, #0]
 800f61a:	6061      	str	r1, [r4, #4]
 800f61c:	60a2      	str	r2, [r4, #8]
 800f61e:	881b      	ldrh	r3, [r3, #0]
 800f620:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,8,9,9,12,16,18");
 800f622:	687b      	ldr	r3, [r7, #4]
 800f624:	3304      	adds	r3, #4
 800f626:	4a55      	ldr	r2, [pc, #340]	; (800f77c <problem_fetch+0xe45c>)
 800f628:	461d      	mov	r5, r3
 800f62a:	4614      	mov	r4, r2
 800f62c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800f62e:	6028      	str	r0, [r5, #0]
 800f630:	6069      	str	r1, [r5, #4]
 800f632:	60aa      	str	r2, [r5, #8]
 800f634:	60eb      	str	r3, [r5, #12]
 800f636:	7823      	ldrb	r3, [r4, #0]
 800f638:	742b      	strb	r3, [r5, #16]
			strcpy(p->startFinish, "s,d,d,d,d,d,e");
 800f63a:	687b      	ldr	r3, [r7, #4]
 800f63c:	33d8      	adds	r3, #216	; 0xd8
 800f63e:	4a4b      	ldr	r2, [pc, #300]	; (800f76c <problem_fetch+0xe44c>)
 800f640:	461c      	mov	r4, r3
 800f642:	4613      	mov	r3, r2
 800f644:	cb07      	ldmia	r3!, {r0, r1, r2}
 800f646:	6020      	str	r0, [r4, #0]
 800f648:	6061      	str	r1, [r4, #4]
 800f64a:	60a2      	str	r2, [r4, #8]
 800f64c:	881b      	ldrh	r3, [r3, #0]
 800f64e:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade, "6C+");
 800f650:	687b      	ldr	r3, [r7, #4]
 800f652:	33cc      	adds	r3, #204	; 0xcc
 800f654:	4a38      	ldr	r2, [pc, #224]	; (800f738 <problem_fetch+0xe418>)
 800f656:	6810      	ldr	r0, [r2, #0]
 800f658:	6018      	str	r0, [r3, #0]
			break;
 800f65a:	f00b bba7 	b.w	801adac <problem_fetch+0x19a8c>
		case 491 :
			strcpy(p->name,"A SAFE PLACE");
 800f65e:	687b      	ldr	r3, [r7, #4]
 800f660:	337c      	adds	r3, #124	; 0x7c
 800f662:	4a47      	ldr	r2, [pc, #284]	; (800f780 <problem_fetch+0xe460>)
 800f664:	461c      	mov	r4, r3
 800f666:	4613      	mov	r3, r2
 800f668:	cb07      	ldmia	r3!, {r0, r1, r2}
 800f66a:	6020      	str	r0, [r4, #0]
 800f66c:	6061      	str	r1, [r4, #4]
 800f66e:	60a2      	str	r2, [r4, #8]
 800f670:	781b      	ldrb	r3, [r3, #0]
 800f672:	7323      	strb	r3, [r4, #12]
			p->moveSize = 6;
 800f674:	687b      	ldr	r3, [r7, #4]
 800f676:	2206      	movs	r2, #6
 800f678:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"H,G,D,G,E,D");
 800f67a:	687b      	ldr	r3, [r7, #4]
 800f67c:	3340      	adds	r3, #64	; 0x40
 800f67e:	4a41      	ldr	r2, [pc, #260]	; (800f784 <problem_fetch+0xe464>)
 800f680:	461c      	mov	r4, r3
 800f682:	4613      	mov	r3, r2
 800f684:	cb07      	ldmia	r3!, {r0, r1, r2}
 800f686:	6020      	str	r0, [r4, #0]
 800f688:	6061      	str	r1, [r4, #4]
 800f68a:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,9,11,14,16,18");
 800f68c:	687b      	ldr	r3, [r7, #4]
 800f68e:	3304      	adds	r3, #4
 800f690:	4a3d      	ldr	r2, [pc, #244]	; (800f788 <problem_fetch+0xe468>)
 800f692:	461c      	mov	r4, r3
 800f694:	4615      	mov	r5, r2
 800f696:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f698:	6020      	str	r0, [r4, #0]
 800f69a:	6061      	str	r1, [r4, #4]
 800f69c:	60a2      	str	r2, [r4, #8]
 800f69e:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish, "s,d,d,d,d,e");
 800f6a0:	687b      	ldr	r3, [r7, #4]
 800f6a2:	33d8      	adds	r3, #216	; 0xd8
 800f6a4:	4a39      	ldr	r2, [pc, #228]	; (800f78c <problem_fetch+0xe46c>)
 800f6a6:	461c      	mov	r4, r3
 800f6a8:	4613      	mov	r3, r2
 800f6aa:	cb07      	ldmia	r3!, {r0, r1, r2}
 800f6ac:	6020      	str	r0, [r4, #0]
 800f6ae:	6061      	str	r1, [r4, #4]
 800f6b0:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade, "6C");
 800f6b2:	687b      	ldr	r3, [r7, #4]
 800f6b4:	33cc      	adds	r3, #204	; 0xcc
 800f6b6:	4a36      	ldr	r2, [pc, #216]	; (800f790 <problem_fetch+0xe470>)
 800f6b8:	8811      	ldrh	r1, [r2, #0]
 800f6ba:	7892      	ldrb	r2, [r2, #2]
 800f6bc:	8019      	strh	r1, [r3, #0]
 800f6be:	709a      	strb	r2, [r3, #2]
			break;
 800f6c0:	f00b bb74 	b.w	801adac <problem_fetch+0x19a8c>
		case 492 :
			strcpy(p->name,"GNOCCHE AL RAGÙ");
 800f6c4:	687b      	ldr	r3, [r7, #4]
 800f6c6:	337c      	adds	r3, #124	; 0x7c
 800f6c8:	4a32      	ldr	r2, [pc, #200]	; (800f794 <problem_fetch+0xe474>)
 800f6ca:	461d      	mov	r5, r3
 800f6cc:	4614      	mov	r4, r2
 800f6ce:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800f6d0:	6028      	str	r0, [r5, #0]
 800f6d2:	6069      	str	r1, [r5, #4]
 800f6d4:	60aa      	str	r2, [r5, #8]
 800f6d6:	60eb      	str	r3, [r5, #12]
 800f6d8:	7823      	ldrb	r3, [r4, #0]
 800f6da:	742b      	strb	r3, [r5, #16]
			p->moveSize = 6;
 800f6dc:	687b      	ldr	r3, [r7, #4]
 800f6de:	2206      	movs	r2, #6
 800f6e0:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"G,D,G,H,K,I");
 800f6e2:	687b      	ldr	r3, [r7, #4]
 800f6e4:	3340      	adds	r3, #64	; 0x40
 800f6e6:	4a2c      	ldr	r2, [pc, #176]	; (800f798 <problem_fetch+0xe478>)
 800f6e8:	461c      	mov	r4, r3
 800f6ea:	4613      	mov	r3, r2
 800f6ec:	cb07      	ldmia	r3!, {r0, r1, r2}
 800f6ee:	6020      	str	r0, [r4, #0]
 800f6f0:	6061      	str	r1, [r4, #4]
 800f6f2:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,7,10,12,14,18");
 800f6f4:	687b      	ldr	r3, [r7, #4]
 800f6f6:	3304      	adds	r3, #4
 800f6f8:	4a28      	ldr	r2, [pc, #160]	; (800f79c <problem_fetch+0xe47c>)
 800f6fa:	461c      	mov	r4, r3
 800f6fc:	4615      	mov	r5, r2
 800f6fe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f700:	6020      	str	r0, [r4, #0]
 800f702:	6061      	str	r1, [r4, #4]
 800f704:	60a2      	str	r2, [r4, #8]
 800f706:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish, "s,d,d,d,d,e");
 800f708:	687b      	ldr	r3, [r7, #4]
 800f70a:	33d8      	adds	r3, #216	; 0xd8
 800f70c:	4a1f      	ldr	r2, [pc, #124]	; (800f78c <problem_fetch+0xe46c>)
 800f70e:	461c      	mov	r4, r3
 800f710:	4613      	mov	r3, r2
 800f712:	cb07      	ldmia	r3!, {r0, r1, r2}
 800f714:	6020      	str	r0, [r4, #0]
 800f716:	6061      	str	r1, [r4, #4]
 800f718:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade, "7A+");
 800f71a:	687b      	ldr	r3, [r7, #4]
 800f71c:	33cc      	adds	r3, #204	; 0xcc
 800f71e:	4a20      	ldr	r2, [pc, #128]	; (800f7a0 <problem_fetch+0xe480>)
 800f720:	6810      	ldr	r0, [r2, #0]
 800f722:	6018      	str	r0, [r3, #0]
			break;
 800f724:	f00b bb42 	b.w	801adac <problem_fetch+0x19a8c>
 800f728:	08026264 	.word	0x08026264
 800f72c:	08026270 	.word	0x08026270
 800f730:	08021b18 	.word	0x08021b18
 800f734:	08021320 	.word	0x08021320
 800f738:	080213a8 	.word	0x080213a8
 800f73c:	0802627c 	.word	0x0802627c
 800f740:	08026288 	.word	0x08026288
 800f744:	08026294 	.word	0x08026294
 800f748:	0802158c 	.word	0x0802158c
 800f74c:	080262a4 	.word	0x080262a4
 800f750:	080262b8 	.word	0x080262b8
 800f754:	08025554 	.word	0x08025554
 800f758:	08022028 	.word	0x08022028
 800f75c:	08021848 	.word	0x08021848
 800f760:	080262c0 	.word	0x080262c0
 800f764:	080262d4 	.word	0x080262d4
 800f768:	080262e4 	.word	0x080262e4
 800f76c:	08021494 	.word	0x08021494
 800f770:	080212b0 	.word	0x080212b0
 800f774:	080262f8 	.word	0x080262f8
 800f778:	08026304 	.word	0x08026304
 800f77c:	08026314 	.word	0x08026314
 800f780:	08026328 	.word	0x08026328
 800f784:	08026338 	.word	0x08026338
 800f788:	080235d4 	.word	0x080235d4
 800f78c:	0802139c 	.word	0x0802139c
 800f790:	08021370 	.word	0x08021370
 800f794:	08026344 	.word	0x08026344
 800f798:	08026358 	.word	0x08026358
 800f79c:	08026364 	.word	0x08026364
 800f7a0:	08021424 	.word	0x08021424
		case 493 :
			strcpy(p->name,"BRETT'S PROBLEM");
 800f7a4:	687b      	ldr	r3, [r7, #4]
 800f7a6:	337c      	adds	r3, #124	; 0x7c
 800f7a8:	4ab1      	ldr	r2, [pc, #708]	; (800fa70 <problem_fetch+0xe750>)
 800f7aa:	461c      	mov	r4, r3
 800f7ac:	4615      	mov	r5, r2
 800f7ae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f7b0:	6020      	str	r0, [r4, #0]
 800f7b2:	6061      	str	r1, [r4, #4]
 800f7b4:	60a2      	str	r2, [r4, #8]
 800f7b6:	60e3      	str	r3, [r4, #12]
			p->moveSize = 6;
 800f7b8:	687b      	ldr	r3, [r7, #4]
 800f7ba:	2206      	movs	r2, #6
 800f7bc:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"G,B,G,B,C,D");
 800f7be:	687b      	ldr	r3, [r7, #4]
 800f7c0:	3340      	adds	r3, #64	; 0x40
 800f7c2:	4aac      	ldr	r2, [pc, #688]	; (800fa74 <problem_fetch+0xe754>)
 800f7c4:	461c      	mov	r4, r3
 800f7c6:	4613      	mov	r3, r2
 800f7c8:	cb07      	ldmia	r3!, {r0, r1, r2}
 800f7ca:	6020      	str	r0, [r4, #0]
 800f7cc:	6061      	str	r1, [r4, #4]
 800f7ce:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,6,10,10,13,18");
 800f7d0:	687b      	ldr	r3, [r7, #4]
 800f7d2:	3304      	adds	r3, #4
 800f7d4:	4aa8      	ldr	r2, [pc, #672]	; (800fa78 <problem_fetch+0xe758>)
 800f7d6:	461c      	mov	r4, r3
 800f7d8:	4615      	mov	r5, r2
 800f7da:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f7dc:	6020      	str	r0, [r4, #0]
 800f7de:	6061      	str	r1, [r4, #4]
 800f7e0:	60a2      	str	r2, [r4, #8]
 800f7e2:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish, "s,d,d,d,d,e");
 800f7e4:	687b      	ldr	r3, [r7, #4]
 800f7e6:	33d8      	adds	r3, #216	; 0xd8
 800f7e8:	4aa4      	ldr	r2, [pc, #656]	; (800fa7c <problem_fetch+0xe75c>)
 800f7ea:	461c      	mov	r4, r3
 800f7ec:	4613      	mov	r3, r2
 800f7ee:	cb07      	ldmia	r3!, {r0, r1, r2}
 800f7f0:	6020      	str	r0, [r4, #0]
 800f7f2:	6061      	str	r1, [r4, #4]
 800f7f4:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade, "7B+");
 800f7f6:	687b      	ldr	r3, [r7, #4]
 800f7f8:	33cc      	adds	r3, #204	; 0xcc
 800f7fa:	4aa1      	ldr	r2, [pc, #644]	; (800fa80 <problem_fetch+0xe760>)
 800f7fc:	6810      	ldr	r0, [r2, #0]
 800f7fe:	6018      	str	r0, [r3, #0]
			break;
 800f800:	f00b bad4 	b.w	801adac <problem_fetch+0x19a8c>
		case 494 :
			strcpy(p->name,"THE TROLLOC WARS");
 800f804:	687b      	ldr	r3, [r7, #4]
 800f806:	337c      	adds	r3, #124	; 0x7c
 800f808:	4a9e      	ldr	r2, [pc, #632]	; (800fa84 <problem_fetch+0xe764>)
 800f80a:	461d      	mov	r5, r3
 800f80c:	4614      	mov	r4, r2
 800f80e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800f810:	6028      	str	r0, [r5, #0]
 800f812:	6069      	str	r1, [r5, #4]
 800f814:	60aa      	str	r2, [r5, #8]
 800f816:	60eb      	str	r3, [r5, #12]
 800f818:	7823      	ldrb	r3, [r4, #0]
 800f81a:	742b      	strb	r3, [r5, #16]
			p->moveSize = 5;
 800f81c:	687b      	ldr	r3, [r7, #4]
 800f81e:	2205      	movs	r2, #5
 800f820:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"E,J,F,A,D");
 800f822:	687b      	ldr	r3, [r7, #4]
 800f824:	3340      	adds	r3, #64	; 0x40
 800f826:	4998      	ldr	r1, [pc, #608]	; (800fa88 <problem_fetch+0xe768>)
 800f828:	461a      	mov	r2, r3
 800f82a:	460b      	mov	r3, r1
 800f82c:	cb03      	ldmia	r3!, {r0, r1}
 800f82e:	6010      	str	r0, [r2, #0]
 800f830:	6051      	str	r1, [r2, #4]
 800f832:	881b      	ldrh	r3, [r3, #0]
 800f834:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"6,5,11,14,18");
 800f836:	687b      	ldr	r3, [r7, #4]
 800f838:	3304      	adds	r3, #4
 800f83a:	4a94      	ldr	r2, [pc, #592]	; (800fa8c <problem_fetch+0xe76c>)
 800f83c:	461c      	mov	r4, r3
 800f83e:	4613      	mov	r3, r2
 800f840:	cb07      	ldmia	r3!, {r0, r1, r2}
 800f842:	6020      	str	r0, [r4, #0]
 800f844:	6061      	str	r1, [r4, #4]
 800f846:	60a2      	str	r2, [r4, #8]
 800f848:	781b      	ldrb	r3, [r3, #0]
 800f84a:	7323      	strb	r3, [r4, #12]
			strcpy(p->startFinish, "s,s,d,d,e");
 800f84c:	687b      	ldr	r3, [r7, #4]
 800f84e:	33d8      	adds	r3, #216	; 0xd8
 800f850:	498f      	ldr	r1, [pc, #572]	; (800fa90 <problem_fetch+0xe770>)
 800f852:	461a      	mov	r2, r3
 800f854:	460b      	mov	r3, r1
 800f856:	cb03      	ldmia	r3!, {r0, r1}
 800f858:	6010      	str	r0, [r2, #0]
 800f85a:	6051      	str	r1, [r2, #4]
 800f85c:	881b      	ldrh	r3, [r3, #0]
 800f85e:	8113      	strh	r3, [r2, #8]
			strcpy(p->grade, "7A");
 800f860:	687b      	ldr	r3, [r7, #4]
 800f862:	33cc      	adds	r3, #204	; 0xcc
 800f864:	4a8b      	ldr	r2, [pc, #556]	; (800fa94 <problem_fetch+0xe774>)
 800f866:	8811      	ldrh	r1, [r2, #0]
 800f868:	7892      	ldrb	r2, [r2, #2]
 800f86a:	8019      	strh	r1, [r3, #0]
 800f86c:	709a      	strb	r2, [r3, #2]
			break;
 800f86e:	f00b ba9d 	b.w	801adac <problem_fetch+0x19a8c>
		case 495 :
			strcpy(p->name,"SO YOU THINK YOU CAN DYNO");
 800f872:	687b      	ldr	r3, [r7, #4]
 800f874:	337c      	adds	r3, #124	; 0x7c
 800f876:	4a88      	ldr	r2, [pc, #544]	; (800fa98 <problem_fetch+0xe778>)
 800f878:	461d      	mov	r5, r3
 800f87a:	4614      	mov	r4, r2
 800f87c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800f87e:	6028      	str	r0, [r5, #0]
 800f880:	6069      	str	r1, [r5, #4]
 800f882:	60aa      	str	r2, [r5, #8]
 800f884:	60eb      	str	r3, [r5, #12]
 800f886:	cc03      	ldmia	r4!, {r0, r1}
 800f888:	6128      	str	r0, [r5, #16]
 800f88a:	6169      	str	r1, [r5, #20]
 800f88c:	8823      	ldrh	r3, [r4, #0]
 800f88e:	832b      	strh	r3, [r5, #24]
			p->moveSize = 6;
 800f890:	687b      	ldr	r3, [r7, #4]
 800f892:	2206      	movs	r2, #6
 800f894:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"G,C,C,H,C,I");
 800f896:	687b      	ldr	r3, [r7, #4]
 800f898:	3340      	adds	r3, #64	; 0x40
 800f89a:	4a80      	ldr	r2, [pc, #512]	; (800fa9c <problem_fetch+0xe77c>)
 800f89c:	461c      	mov	r4, r3
 800f89e:	4613      	mov	r3, r2
 800f8a0:	cb07      	ldmia	r3!, {r0, r1, r2}
 800f8a2:	6020      	str	r0, [r4, #0]
 800f8a4:	6061      	str	r1, [r4, #4]
 800f8a6:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,5,13,8,8,18");
 800f8a8:	687b      	ldr	r3, [r7, #4]
 800f8aa:	3304      	adds	r3, #4
 800f8ac:	4a7c      	ldr	r2, [pc, #496]	; (800faa0 <problem_fetch+0xe780>)
 800f8ae:	461c      	mov	r4, r3
 800f8b0:	4613      	mov	r3, r2
 800f8b2:	cb07      	ldmia	r3!, {r0, r1, r2}
 800f8b4:	6020      	str	r0, [r4, #0]
 800f8b6:	6061      	str	r1, [r4, #4]
 800f8b8:	60a2      	str	r2, [r4, #8]
 800f8ba:	881b      	ldrh	r3, [r3, #0]
 800f8bc:	81a3      	strh	r3, [r4, #12]
			strcpy(p->startFinish, "s,s,d,d,d,e");
 800f8be:	687b      	ldr	r3, [r7, #4]
 800f8c0:	33d8      	adds	r3, #216	; 0xd8
 800f8c2:	4a78      	ldr	r2, [pc, #480]	; (800faa4 <problem_fetch+0xe784>)
 800f8c4:	461c      	mov	r4, r3
 800f8c6:	4613      	mov	r3, r2
 800f8c8:	cb07      	ldmia	r3!, {r0, r1, r2}
 800f8ca:	6020      	str	r0, [r4, #0]
 800f8cc:	6061      	str	r1, [r4, #4]
 800f8ce:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade, "7B+");
 800f8d0:	687b      	ldr	r3, [r7, #4]
 800f8d2:	33cc      	adds	r3, #204	; 0xcc
 800f8d4:	4a6a      	ldr	r2, [pc, #424]	; (800fa80 <problem_fetch+0xe760>)
 800f8d6:	6810      	ldr	r0, [r2, #0]
 800f8d8:	6018      	str	r0, [r3, #0]
			break;
 800f8da:	f00b ba67 	b.w	801adac <problem_fetch+0x19a8c>
		case 496 :
			strcpy(p->name,"MATTS");
 800f8de:	687b      	ldr	r3, [r7, #4]
 800f8e0:	337c      	adds	r3, #124	; 0x7c
 800f8e2:	4a71      	ldr	r2, [pc, #452]	; (800faa8 <problem_fetch+0xe788>)
 800f8e4:	6810      	ldr	r0, [r2, #0]
 800f8e6:	6018      	str	r0, [r3, #0]
 800f8e8:	8892      	ldrh	r2, [r2, #4]
 800f8ea:	809a      	strh	r2, [r3, #4]
			p->moveSize = 6;
 800f8ec:	687b      	ldr	r3, [r7, #4]
 800f8ee:	2206      	movs	r2, #6
 800f8f0:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"G,D,I,K,I,I");
 800f8f2:	687b      	ldr	r3, [r7, #4]
 800f8f4:	3340      	adds	r3, #64	; 0x40
 800f8f6:	4a6d      	ldr	r2, [pc, #436]	; (800faac <problem_fetch+0xe78c>)
 800f8f8:	461c      	mov	r4, r3
 800f8fa:	4613      	mov	r3, r2
 800f8fc:	cb07      	ldmia	r3!, {r0, r1, r2}
 800f8fe:	6020      	str	r0, [r4, #0]
 800f900:	6061      	str	r1, [r4, #4]
 800f902:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,11,7,14,9,18");
 800f904:	687b      	ldr	r3, [r7, #4]
 800f906:	3304      	adds	r3, #4
 800f908:	4a69      	ldr	r2, [pc, #420]	; (800fab0 <problem_fetch+0xe790>)
 800f90a:	461c      	mov	r4, r3
 800f90c:	4613      	mov	r3, r2
 800f90e:	cb07      	ldmia	r3!, {r0, r1, r2}
 800f910:	6020      	str	r0, [r4, #0]
 800f912:	6061      	str	r1, [r4, #4]
 800f914:	60a2      	str	r2, [r4, #8]
 800f916:	881a      	ldrh	r2, [r3, #0]
 800f918:	789b      	ldrb	r3, [r3, #2]
 800f91a:	81a2      	strh	r2, [r4, #12]
 800f91c:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish, "s,d,d,d,d,e");
 800f91e:	687b      	ldr	r3, [r7, #4]
 800f920:	33d8      	adds	r3, #216	; 0xd8
 800f922:	4a56      	ldr	r2, [pc, #344]	; (800fa7c <problem_fetch+0xe75c>)
 800f924:	461c      	mov	r4, r3
 800f926:	4613      	mov	r3, r2
 800f928:	cb07      	ldmia	r3!, {r0, r1, r2}
 800f92a:	6020      	str	r0, [r4, #0]
 800f92c:	6061      	str	r1, [r4, #4]
 800f92e:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade, "8B+");
 800f930:	687b      	ldr	r3, [r7, #4]
 800f932:	33cc      	adds	r3, #204	; 0xcc
 800f934:	4a5f      	ldr	r2, [pc, #380]	; (800fab4 <problem_fetch+0xe794>)
 800f936:	6810      	ldr	r0, [r2, #0]
 800f938:	6018      	str	r0, [r3, #0]
			break;
 800f93a:	f00b ba37 	b.w	801adac <problem_fetch+0x19a8c>
		case 497 :
			strcpy(p->name,"FIRSTEASY");
 800f93e:	687b      	ldr	r3, [r7, #4]
 800f940:	337c      	adds	r3, #124	; 0x7c
 800f942:	495d      	ldr	r1, [pc, #372]	; (800fab8 <problem_fetch+0xe798>)
 800f944:	461a      	mov	r2, r3
 800f946:	460b      	mov	r3, r1
 800f948:	cb03      	ldmia	r3!, {r0, r1}
 800f94a:	6010      	str	r0, [r2, #0]
 800f94c:	6051      	str	r1, [r2, #4]
 800f94e:	881b      	ldrh	r3, [r3, #0]
 800f950:	8113      	strh	r3, [r2, #8]
			p->moveSize = 6;
 800f952:	687b      	ldr	r3, [r7, #4]
 800f954:	2206      	movs	r2, #6
 800f956:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"G,E,H,C,E,D");
 800f958:	687b      	ldr	r3, [r7, #4]
 800f95a:	3340      	adds	r3, #64	; 0x40
 800f95c:	4a57      	ldr	r2, [pc, #348]	; (800fabc <problem_fetch+0xe79c>)
 800f95e:	461c      	mov	r4, r3
 800f960:	4613      	mov	r3, r2
 800f962:	cb07      	ldmia	r3!, {r0, r1, r2}
 800f964:	6020      	str	r0, [r4, #0]
 800f966:	6061      	str	r1, [r4, #4]
 800f968:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,8,10,13,16,18");
 800f96a:	687b      	ldr	r3, [r7, #4]
 800f96c:	3304      	adds	r3, #4
 800f96e:	4a54      	ldr	r2, [pc, #336]	; (800fac0 <problem_fetch+0xe7a0>)
 800f970:	461c      	mov	r4, r3
 800f972:	4615      	mov	r5, r2
 800f974:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f976:	6020      	str	r0, [r4, #0]
 800f978:	6061      	str	r1, [r4, #4]
 800f97a:	60a2      	str	r2, [r4, #8]
 800f97c:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish, "s,d,d,d,d,e");
 800f97e:	687b      	ldr	r3, [r7, #4]
 800f980:	33d8      	adds	r3, #216	; 0xd8
 800f982:	4a3e      	ldr	r2, [pc, #248]	; (800fa7c <problem_fetch+0xe75c>)
 800f984:	461c      	mov	r4, r3
 800f986:	4613      	mov	r3, r2
 800f988:	cb07      	ldmia	r3!, {r0, r1, r2}
 800f98a:	6020      	str	r0, [r4, #0]
 800f98c:	6061      	str	r1, [r4, #4]
 800f98e:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade, "6B+");
 800f990:	687b      	ldr	r3, [r7, #4]
 800f992:	33cc      	adds	r3, #204	; 0xcc
 800f994:	4a4b      	ldr	r2, [pc, #300]	; (800fac4 <problem_fetch+0xe7a4>)
 800f996:	6810      	ldr	r0, [r2, #0]
 800f998:	6018      	str	r0, [r3, #0]
			break;
 800f99a:	f00b ba07 	b.w	801adac <problem_fetch+0x19a8c>
		case 498 :
			strcpy(p->name,"KAKAKAKA");
 800f99e:	687b      	ldr	r3, [r7, #4]
 800f9a0:	337c      	adds	r3, #124	; 0x7c
 800f9a2:	4949      	ldr	r1, [pc, #292]	; (800fac8 <problem_fetch+0xe7a8>)
 800f9a4:	461a      	mov	r2, r3
 800f9a6:	460b      	mov	r3, r1
 800f9a8:	cb03      	ldmia	r3!, {r0, r1}
 800f9aa:	6010      	str	r0, [r2, #0]
 800f9ac:	6051      	str	r1, [r2, #4]
 800f9ae:	781b      	ldrb	r3, [r3, #0]
 800f9b0:	7213      	strb	r3, [r2, #8]
			p->moveSize = 5;
 800f9b2:	687b      	ldr	r3, [r7, #4]
 800f9b4:	2205      	movs	r2, #5
 800f9b6:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"J,I,F,I,D");
 800f9b8:	687b      	ldr	r3, [r7, #4]
 800f9ba:	3340      	adds	r3, #64	; 0x40
 800f9bc:	4943      	ldr	r1, [pc, #268]	; (800facc <problem_fetch+0xe7ac>)
 800f9be:	461a      	mov	r2, r3
 800f9c0:	460b      	mov	r3, r1
 800f9c2:	cb03      	ldmia	r3!, {r0, r1}
 800f9c4:	6010      	str	r0, [r2, #0]
 800f9c6:	6051      	str	r1, [r2, #4]
 800f9c8:	881b      	ldrh	r3, [r3, #0]
 800f9ca:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"5,10,13,14,18");
 800f9cc:	687b      	ldr	r3, [r7, #4]
 800f9ce:	3304      	adds	r3, #4
 800f9d0:	4a3f      	ldr	r2, [pc, #252]	; (800fad0 <problem_fetch+0xe7b0>)
 800f9d2:	461c      	mov	r4, r3
 800f9d4:	4613      	mov	r3, r2
 800f9d6:	cb07      	ldmia	r3!, {r0, r1, r2}
 800f9d8:	6020      	str	r0, [r4, #0]
 800f9da:	6061      	str	r1, [r4, #4]
 800f9dc:	60a2      	str	r2, [r4, #8]
 800f9de:	881b      	ldrh	r3, [r3, #0]
 800f9e0:	81a3      	strh	r3, [r4, #12]
			strcpy(p->startFinish, "s,d,d,d,e");
 800f9e2:	687b      	ldr	r3, [r7, #4]
 800f9e4:	33d8      	adds	r3, #216	; 0xd8
 800f9e6:	493b      	ldr	r1, [pc, #236]	; (800fad4 <problem_fetch+0xe7b4>)
 800f9e8:	461a      	mov	r2, r3
 800f9ea:	460b      	mov	r3, r1
 800f9ec:	cb03      	ldmia	r3!, {r0, r1}
 800f9ee:	6010      	str	r0, [r2, #0]
 800f9f0:	6051      	str	r1, [r2, #4]
 800f9f2:	881b      	ldrh	r3, [r3, #0]
 800f9f4:	8113      	strh	r3, [r2, #8]
			strcpy(p->grade, "6C+");
 800f9f6:	687b      	ldr	r3, [r7, #4]
 800f9f8:	33cc      	adds	r3, #204	; 0xcc
 800f9fa:	4a37      	ldr	r2, [pc, #220]	; (800fad8 <problem_fetch+0xe7b8>)
 800f9fc:	6810      	ldr	r0, [r2, #0]
 800f9fe:	6018      	str	r0, [r3, #0]
			break;
 800fa00:	f00b b9d4 	b.w	801adac <problem_fetch+0x19a8c>
		case 499 :
			strcpy(p->name,"FLYING  BUDDAH");
 800fa04:	687b      	ldr	r3, [r7, #4]
 800fa06:	337c      	adds	r3, #124	; 0x7c
 800fa08:	4a34      	ldr	r2, [pc, #208]	; (800fadc <problem_fetch+0xe7bc>)
 800fa0a:	461c      	mov	r4, r3
 800fa0c:	4613      	mov	r3, r2
 800fa0e:	cb07      	ldmia	r3!, {r0, r1, r2}
 800fa10:	6020      	str	r0, [r4, #0]
 800fa12:	6061      	str	r1, [r4, #4]
 800fa14:	60a2      	str	r2, [r4, #8]
 800fa16:	881a      	ldrh	r2, [r3, #0]
 800fa18:	789b      	ldrb	r3, [r3, #2]
 800fa1a:	81a2      	strh	r2, [r4, #12]
 800fa1c:	73a3      	strb	r3, [r4, #14]
			p->moveSize = 6;
 800fa1e:	687b      	ldr	r3, [r7, #4]
 800fa20:	2206      	movs	r2, #6
 800fa22:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"G,H,G,F,I,D");
 800fa24:	687b      	ldr	r3, [r7, #4]
 800fa26:	3340      	adds	r3, #64	; 0x40
 800fa28:	4a2d      	ldr	r2, [pc, #180]	; (800fae0 <problem_fetch+0xe7c0>)
 800fa2a:	461c      	mov	r4, r3
 800fa2c:	4613      	mov	r3, r2
 800fa2e:	cb07      	ldmia	r3!, {r0, r1, r2}
 800fa30:	6020      	str	r0, [r4, #0]
 800fa32:	6061      	str	r1, [r4, #4]
 800fa34:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"6,5,9,13,14,18");
 800fa36:	687b      	ldr	r3, [r7, #4]
 800fa38:	3304      	adds	r3, #4
 800fa3a:	4a2a      	ldr	r2, [pc, #168]	; (800fae4 <problem_fetch+0xe7c4>)
 800fa3c:	461c      	mov	r4, r3
 800fa3e:	4613      	mov	r3, r2
 800fa40:	cb07      	ldmia	r3!, {r0, r1, r2}
 800fa42:	6020      	str	r0, [r4, #0]
 800fa44:	6061      	str	r1, [r4, #4]
 800fa46:	60a2      	str	r2, [r4, #8]
 800fa48:	881a      	ldrh	r2, [r3, #0]
 800fa4a:	789b      	ldrb	r3, [r3, #2]
 800fa4c:	81a2      	strh	r2, [r4, #12]
 800fa4e:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish, "s,s,d,d,d,e");
 800fa50:	687b      	ldr	r3, [r7, #4]
 800fa52:	33d8      	adds	r3, #216	; 0xd8
 800fa54:	4a13      	ldr	r2, [pc, #76]	; (800faa4 <problem_fetch+0xe784>)
 800fa56:	461c      	mov	r4, r3
 800fa58:	4613      	mov	r3, r2
 800fa5a:	cb07      	ldmia	r3!, {r0, r1, r2}
 800fa5c:	6020      	str	r0, [r4, #0]
 800fa5e:	6061      	str	r1, [r4, #4]
 800fa60:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade, "7A+");
 800fa62:	687b      	ldr	r3, [r7, #4]
 800fa64:	33cc      	adds	r3, #204	; 0xcc
 800fa66:	4a20      	ldr	r2, [pc, #128]	; (800fae8 <problem_fetch+0xe7c8>)
 800fa68:	6810      	ldr	r0, [r2, #0]
 800fa6a:	6018      	str	r0, [r3, #0]
			break;
 800fa6c:	f00b b99e 	b.w	801adac <problem_fetch+0x19a8c>
 800fa70:	08026374 	.word	0x08026374
 800fa74:	08026384 	.word	0x08026384
 800fa78:	08026390 	.word	0x08026390
 800fa7c:	0802139c 	.word	0x0802139c
 800fa80:	08021848 	.word	0x08021848
 800fa84:	080263a0 	.word	0x080263a0
 800fa88:	080263b4 	.word	0x080263b4
 800fa8c:	08025620 	.word	0x08025620
 800fa90:	080221c8 	.word	0x080221c8
 800fa94:	080212f4 	.word	0x080212f4
 800fa98:	080263c0 	.word	0x080263c0
 800fa9c:	080263dc 	.word	0x080263dc
 800faa0:	080263e8 	.word	0x080263e8
 800faa4:	08021910 	.word	0x08021910
 800faa8:	080263f8 	.word	0x080263f8
 800faac:	08026400 	.word	0x08026400
 800fab0:	0802640c 	.word	0x0802640c
 800fab4:	0802641c 	.word	0x0802641c
 800fab8:	08026420 	.word	0x08026420
 800fabc:	0802642c 	.word	0x0802642c
 800fac0:	08025ee0 	.word	0x08025ee0
 800fac4:	080212b0 	.word	0x080212b0
 800fac8:	08026438 	.word	0x08026438
 800facc:	08026444 	.word	0x08026444
 800fad0:	08021b18 	.word	0x08021b18
 800fad4:	08021320 	.word	0x08021320
 800fad8:	080213a8 	.word	0x080213a8
 800fadc:	08026450 	.word	0x08026450
 800fae0:	08026460 	.word	0x08026460
 800fae4:	0802646c 	.word	0x0802646c
 800fae8:	08021424 	.word	0x08021424
		case 5 :
			strcpy(p->name,"PROBLEM 17");
 800faec:	687b      	ldr	r3, [r7, #4]
 800faee:	337c      	adds	r3, #124	; 0x7c
 800faf0:	49b7      	ldr	r1, [pc, #732]	; (800fdd0 <problem_fetch+0xeab0>)
 800faf2:	461a      	mov	r2, r3
 800faf4:	460b      	mov	r3, r1
 800faf6:	cb03      	ldmia	r3!, {r0, r1}
 800faf8:	6010      	str	r0, [r2, #0]
 800fafa:	6051      	str	r1, [r2, #4]
 800fafc:	8819      	ldrh	r1, [r3, #0]
 800fafe:	789b      	ldrb	r3, [r3, #2]
 800fb00:	8111      	strh	r1, [r2, #8]
 800fb02:	7293      	strb	r3, [r2, #10]
			p->moveSize = 7;
 800fb04:	687b      	ldr	r3, [r7, #4]
 800fb06:	2207      	movs	r2, #7
 800fb08:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"H,B,E,E,G,C,A");
 800fb0a:	687b      	ldr	r3, [r7, #4]
 800fb0c:	3340      	adds	r3, #64	; 0x40
 800fb0e:	4ab1      	ldr	r2, [pc, #708]	; (800fdd4 <problem_fetch+0xeab4>)
 800fb10:	461c      	mov	r4, r3
 800fb12:	4613      	mov	r3, r2
 800fb14:	cb07      	ldmia	r3!, {r0, r1, r2}
 800fb16:	6020      	str	r0, [r4, #0]
 800fb18:	6061      	str	r1, [r4, #4]
 800fb1a:	60a2      	str	r2, [r4, #8]
 800fb1c:	881b      	ldrh	r3, [r3, #0]
 800fb1e:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,6,9,12,15,16,18");
 800fb20:	687b      	ldr	r3, [r7, #4]
 800fb22:	3304      	adds	r3, #4
 800fb24:	4aac      	ldr	r2, [pc, #688]	; (800fdd8 <problem_fetch+0xeab8>)
 800fb26:	461d      	mov	r5, r3
 800fb28:	4614      	mov	r4, r2
 800fb2a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800fb2c:	6028      	str	r0, [r5, #0]
 800fb2e:	6069      	str	r1, [r5, #4]
 800fb30:	60aa      	str	r2, [r5, #8]
 800fb32:	60eb      	str	r3, [r5, #12]
 800fb34:	8823      	ldrh	r3, [r4, #0]
 800fb36:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish, "s,d,d,d,d,d,e");
 800fb38:	687b      	ldr	r3, [r7, #4]
 800fb3a:	33d8      	adds	r3, #216	; 0xd8
 800fb3c:	4aa7      	ldr	r2, [pc, #668]	; (800fddc <problem_fetch+0xeabc>)
 800fb3e:	461c      	mov	r4, r3
 800fb40:	4613      	mov	r3, r2
 800fb42:	cb07      	ldmia	r3!, {r0, r1, r2}
 800fb44:	6020      	str	r0, [r4, #0]
 800fb46:	6061      	str	r1, [r4, #4]
 800fb48:	60a2      	str	r2, [r4, #8]
 800fb4a:	881b      	ldrh	r3, [r3, #0]
 800fb4c:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade, "7A");
 800fb4e:	687b      	ldr	r3, [r7, #4]
 800fb50:	33cc      	adds	r3, #204	; 0xcc
 800fb52:	4aa3      	ldr	r2, [pc, #652]	; (800fde0 <problem_fetch+0xeac0>)
 800fb54:	8811      	ldrh	r1, [r2, #0]
 800fb56:	7892      	ldrb	r2, [r2, #2]
 800fb58:	8019      	strh	r1, [r3, #0]
 800fb5a:	709a      	strb	r2, [r3, #2]
			break;
 800fb5c:	f00b b926 	b.w	801adac <problem_fetch+0x19a8c>
		case 50 :
			strcpy(p->name,"MATCH GAME");
 800fb60:	687b      	ldr	r3, [r7, #4]
 800fb62:	337c      	adds	r3, #124	; 0x7c
 800fb64:	499f      	ldr	r1, [pc, #636]	; (800fde4 <problem_fetch+0xeac4>)
 800fb66:	461a      	mov	r2, r3
 800fb68:	460b      	mov	r3, r1
 800fb6a:	cb03      	ldmia	r3!, {r0, r1}
 800fb6c:	6010      	str	r0, [r2, #0]
 800fb6e:	6051      	str	r1, [r2, #4]
 800fb70:	8819      	ldrh	r1, [r3, #0]
 800fb72:	789b      	ldrb	r3, [r3, #2]
 800fb74:	8111      	strh	r1, [r2, #8]
 800fb76:	7293      	strb	r3, [r2, #10]
			p->moveSize = 5;
 800fb78:	687b      	ldr	r3, [r7, #4]
 800fb7a:	2205      	movs	r2, #5
 800fb7c:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"G,G,I,G,I");
 800fb7e:	687b      	ldr	r3, [r7, #4]
 800fb80:	3340      	adds	r3, #64	; 0x40
 800fb82:	4999      	ldr	r1, [pc, #612]	; (800fde8 <problem_fetch+0xeac8>)
 800fb84:	461a      	mov	r2, r3
 800fb86:	460b      	mov	r3, r1
 800fb88:	cb03      	ldmia	r3!, {r0, r1}
 800fb8a:	6010      	str	r0, [r2, #0]
 800fb8c:	6051      	str	r1, [r2, #4]
 800fb8e:	881b      	ldrh	r3, [r3, #0]
 800fb90:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"4,6,10,14,18");
 800fb92:	687b      	ldr	r3, [r7, #4]
 800fb94:	3304      	adds	r3, #4
 800fb96:	4a95      	ldr	r2, [pc, #596]	; (800fdec <problem_fetch+0xeacc>)
 800fb98:	461c      	mov	r4, r3
 800fb9a:	4613      	mov	r3, r2
 800fb9c:	cb07      	ldmia	r3!, {r0, r1, r2}
 800fb9e:	6020      	str	r0, [r4, #0]
 800fba0:	6061      	str	r1, [r4, #4]
 800fba2:	60a2      	str	r2, [r4, #8]
 800fba4:	781b      	ldrb	r3, [r3, #0]
 800fba6:	7323      	strb	r3, [r4, #12]
			strcpy(p->startFinish, "s,s,d,d,e");
 800fba8:	687b      	ldr	r3, [r7, #4]
 800fbaa:	33d8      	adds	r3, #216	; 0xd8
 800fbac:	4990      	ldr	r1, [pc, #576]	; (800fdf0 <problem_fetch+0xead0>)
 800fbae:	461a      	mov	r2, r3
 800fbb0:	460b      	mov	r3, r1
 800fbb2:	cb03      	ldmia	r3!, {r0, r1}
 800fbb4:	6010      	str	r0, [r2, #0]
 800fbb6:	6051      	str	r1, [r2, #4]
 800fbb8:	881b      	ldrh	r3, [r3, #0]
 800fbba:	8113      	strh	r3, [r2, #8]
			strcpy(p->grade, "6B+");
 800fbbc:	687b      	ldr	r3, [r7, #4]
 800fbbe:	33cc      	adds	r3, #204	; 0xcc
 800fbc0:	4a8c      	ldr	r2, [pc, #560]	; (800fdf4 <problem_fetch+0xead4>)
 800fbc2:	6810      	ldr	r0, [r2, #0]
 800fbc4:	6018      	str	r0, [r3, #0]
			break;
 800fbc6:	f00b b8f1 	b.w	801adac <problem_fetch+0x19a8c>
		case 500 :
			strcpy(p->name,"FROSTED AFRO");
 800fbca:	687b      	ldr	r3, [r7, #4]
 800fbcc:	337c      	adds	r3, #124	; 0x7c
 800fbce:	4a8a      	ldr	r2, [pc, #552]	; (800fdf8 <problem_fetch+0xead8>)
 800fbd0:	461c      	mov	r4, r3
 800fbd2:	4613      	mov	r3, r2
 800fbd4:	cb07      	ldmia	r3!, {r0, r1, r2}
 800fbd6:	6020      	str	r0, [r4, #0]
 800fbd8:	6061      	str	r1, [r4, #4]
 800fbda:	60a2      	str	r2, [r4, #8]
 800fbdc:	781b      	ldrb	r3, [r3, #0]
 800fbde:	7323      	strb	r3, [r4, #12]
			p->moveSize = 6;
 800fbe0:	687b      	ldr	r3, [r7, #4]
 800fbe2:	2206      	movs	r2, #6
 800fbe4:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"G,E,F,E,J,D");
 800fbe6:	687b      	ldr	r3, [r7, #4]
 800fbe8:	3340      	adds	r3, #64	; 0x40
 800fbea:	4a84      	ldr	r2, [pc, #528]	; (800fdfc <problem_fetch+0xeadc>)
 800fbec:	461c      	mov	r4, r3
 800fbee:	4613      	mov	r3, r2
 800fbf0:	cb07      	ldmia	r3!, {r0, r1, r2}
 800fbf2:	6020      	str	r0, [r4, #0]
 800fbf4:	6061      	str	r1, [r4, #4]
 800fbf6:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,6,11,14,16,18");
 800fbf8:	687b      	ldr	r3, [r7, #4]
 800fbfa:	3304      	adds	r3, #4
 800fbfc:	4a80      	ldr	r2, [pc, #512]	; (800fe00 <problem_fetch+0xeae0>)
 800fbfe:	461c      	mov	r4, r3
 800fc00:	4615      	mov	r5, r2
 800fc02:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800fc04:	6020      	str	r0, [r4, #0]
 800fc06:	6061      	str	r1, [r4, #4]
 800fc08:	60a2      	str	r2, [r4, #8]
 800fc0a:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish, "s,s,d,d,d,e");
 800fc0c:	687b      	ldr	r3, [r7, #4]
 800fc0e:	33d8      	adds	r3, #216	; 0xd8
 800fc10:	4a7c      	ldr	r2, [pc, #496]	; (800fe04 <problem_fetch+0xeae4>)
 800fc12:	461c      	mov	r4, r3
 800fc14:	4613      	mov	r3, r2
 800fc16:	cb07      	ldmia	r3!, {r0, r1, r2}
 800fc18:	6020      	str	r0, [r4, #0]
 800fc1a:	6061      	str	r1, [r4, #4]
 800fc1c:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade, "7A");
 800fc1e:	687b      	ldr	r3, [r7, #4]
 800fc20:	33cc      	adds	r3, #204	; 0xcc
 800fc22:	4a6f      	ldr	r2, [pc, #444]	; (800fde0 <problem_fetch+0xeac0>)
 800fc24:	8811      	ldrh	r1, [r2, #0]
 800fc26:	7892      	ldrb	r2, [r2, #2]
 800fc28:	8019      	strh	r1, [r3, #0]
 800fc2a:	709a      	strb	r2, [r3, #2]
			break;
 800fc2c:	f00b b8be 	b.w	801adac <problem_fetch+0x19a8c>
		case 501 :
			strcpy(p->name,"JH 1.0");
 800fc30:	687b      	ldr	r3, [r7, #4]
 800fc32:	337c      	adds	r3, #124	; 0x7c
 800fc34:	4a74      	ldr	r2, [pc, #464]	; (800fe08 <problem_fetch+0xeae8>)
 800fc36:	6810      	ldr	r0, [r2, #0]
 800fc38:	6018      	str	r0, [r3, #0]
 800fc3a:	8891      	ldrh	r1, [r2, #4]
 800fc3c:	7992      	ldrb	r2, [r2, #6]
 800fc3e:	8099      	strh	r1, [r3, #4]
 800fc40:	719a      	strb	r2, [r3, #6]
			p->moveSize = 7;
 800fc42:	687b      	ldr	r3, [r7, #4]
 800fc44:	2207      	movs	r2, #7
 800fc46:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"J,H,C,E,B,G,I");
 800fc48:	687b      	ldr	r3, [r7, #4]
 800fc4a:	3340      	adds	r3, #64	; 0x40
 800fc4c:	4a6f      	ldr	r2, [pc, #444]	; (800fe0c <problem_fetch+0xeaec>)
 800fc4e:	461c      	mov	r4, r3
 800fc50:	4613      	mov	r3, r2
 800fc52:	cb07      	ldmia	r3!, {r0, r1, r2}
 800fc54:	6020      	str	r0, [r4, #0]
 800fc56:	6061      	str	r1, [r4, #4]
 800fc58:	60a2      	str	r2, [r4, #8]
 800fc5a:	881b      	ldrh	r3, [r3, #0]
 800fc5c:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,8,8,12,15,17,18");
 800fc5e:	687b      	ldr	r3, [r7, #4]
 800fc60:	3304      	adds	r3, #4
 800fc62:	4a6b      	ldr	r2, [pc, #428]	; (800fe10 <problem_fetch+0xeaf0>)
 800fc64:	461d      	mov	r5, r3
 800fc66:	4614      	mov	r4, r2
 800fc68:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800fc6a:	6028      	str	r0, [r5, #0]
 800fc6c:	6069      	str	r1, [r5, #4]
 800fc6e:	60aa      	str	r2, [r5, #8]
 800fc70:	60eb      	str	r3, [r5, #12]
 800fc72:	8823      	ldrh	r3, [r4, #0]
 800fc74:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish, "s,d,d,d,d,d,e");
 800fc76:	687b      	ldr	r3, [r7, #4]
 800fc78:	33d8      	adds	r3, #216	; 0xd8
 800fc7a:	4a58      	ldr	r2, [pc, #352]	; (800fddc <problem_fetch+0xeabc>)
 800fc7c:	461c      	mov	r4, r3
 800fc7e:	4613      	mov	r3, r2
 800fc80:	cb07      	ldmia	r3!, {r0, r1, r2}
 800fc82:	6020      	str	r0, [r4, #0]
 800fc84:	6061      	str	r1, [r4, #4]
 800fc86:	60a2      	str	r2, [r4, #8]
 800fc88:	881b      	ldrh	r3, [r3, #0]
 800fc8a:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade, "7B+");
 800fc8c:	687b      	ldr	r3, [r7, #4]
 800fc8e:	33cc      	adds	r3, #204	; 0xcc
 800fc90:	4a60      	ldr	r2, [pc, #384]	; (800fe14 <problem_fetch+0xeaf4>)
 800fc92:	6810      	ldr	r0, [r2, #0]
 800fc94:	6018      	str	r0, [r3, #0]
			break;
 800fc96:	f00b b889 	b.w	801adac <problem_fetch+0x19a8c>
		case 502 :
			strcpy(p->name,"FOLLIA1");
 800fc9a:	687b      	ldr	r3, [r7, #4]
 800fc9c:	337c      	adds	r3, #124	; 0x7c
 800fc9e:	495e      	ldr	r1, [pc, #376]	; (800fe18 <problem_fetch+0xeaf8>)
 800fca0:	461a      	mov	r2, r3
 800fca2:	460b      	mov	r3, r1
 800fca4:	cb03      	ldmia	r3!, {r0, r1}
 800fca6:	6010      	str	r0, [r2, #0]
 800fca8:	6051      	str	r1, [r2, #4]
			p->moveSize = 7;
 800fcaa:	687b      	ldr	r3, [r7, #4]
 800fcac:	2207      	movs	r2, #7
 800fcae:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"G,G,H,G,H,G,I");
 800fcb0:	687b      	ldr	r3, [r7, #4]
 800fcb2:	3340      	adds	r3, #64	; 0x40
 800fcb4:	4a59      	ldr	r2, [pc, #356]	; (800fe1c <problem_fetch+0xeafc>)
 800fcb6:	461c      	mov	r4, r3
 800fcb8:	4613      	mov	r3, r2
 800fcba:	cb07      	ldmia	r3!, {r0, r1, r2}
 800fcbc:	6020      	str	r0, [r4, #0]
 800fcbe:	6061      	str	r1, [r4, #4]
 800fcc0:	60a2      	str	r2, [r4, #8]
 800fcc2:	881b      	ldrh	r3, [r3, #0]
 800fcc4:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,6,8,10,13,14,18");
 800fcc6:	687b      	ldr	r3, [r7, #4]
 800fcc8:	3304      	adds	r3, #4
 800fcca:	4a55      	ldr	r2, [pc, #340]	; (800fe20 <problem_fetch+0xeb00>)
 800fccc:	461d      	mov	r5, r3
 800fcce:	4614      	mov	r4, r2
 800fcd0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800fcd2:	6028      	str	r0, [r5, #0]
 800fcd4:	6069      	str	r1, [r5, #4]
 800fcd6:	60aa      	str	r2, [r5, #8]
 800fcd8:	60eb      	str	r3, [r5, #12]
 800fcda:	8823      	ldrh	r3, [r4, #0]
 800fcdc:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish, "s,s,d,d,d,d,e");
 800fcde:	687b      	ldr	r3, [r7, #4]
 800fce0:	33d8      	adds	r3, #216	; 0xd8
 800fce2:	4a50      	ldr	r2, [pc, #320]	; (800fe24 <problem_fetch+0xeb04>)
 800fce4:	461c      	mov	r4, r3
 800fce6:	4613      	mov	r3, r2
 800fce8:	cb07      	ldmia	r3!, {r0, r1, r2}
 800fcea:	6020      	str	r0, [r4, #0]
 800fcec:	6061      	str	r1, [r4, #4]
 800fcee:	60a2      	str	r2, [r4, #8]
 800fcf0:	881b      	ldrh	r3, [r3, #0]
 800fcf2:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade, "6B+");
 800fcf4:	687b      	ldr	r3, [r7, #4]
 800fcf6:	33cc      	adds	r3, #204	; 0xcc
 800fcf8:	4a3e      	ldr	r2, [pc, #248]	; (800fdf4 <problem_fetch+0xead4>)
 800fcfa:	6810      	ldr	r0, [r2, #0]
 800fcfc:	6018      	str	r0, [r3, #0]
			break;
 800fcfe:	f00b b855 	b.w	801adac <problem_fetch+0x19a8c>
		case 503 :
			strcpy(p->name,"TRYTRY");
 800fd02:	687b      	ldr	r3, [r7, #4]
 800fd04:	337c      	adds	r3, #124	; 0x7c
 800fd06:	4a48      	ldr	r2, [pc, #288]	; (800fe28 <problem_fetch+0xeb08>)
 800fd08:	6810      	ldr	r0, [r2, #0]
 800fd0a:	6018      	str	r0, [r3, #0]
 800fd0c:	8891      	ldrh	r1, [r2, #4]
 800fd0e:	7992      	ldrb	r2, [r2, #6]
 800fd10:	8099      	strh	r1, [r3, #4]
 800fd12:	719a      	strb	r2, [r3, #6]
			p->moveSize = 7;
 800fd14:	687b      	ldr	r3, [r7, #4]
 800fd16:	2207      	movs	r2, #7
 800fd18:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"G,C,C,B,C,C,A");
 800fd1a:	687b      	ldr	r3, [r7, #4]
 800fd1c:	3340      	adds	r3, #64	; 0x40
 800fd1e:	4a43      	ldr	r2, [pc, #268]	; (800fe2c <problem_fetch+0xeb0c>)
 800fd20:	461c      	mov	r4, r3
 800fd22:	4613      	mov	r3, r2
 800fd24:	cb07      	ldmia	r3!, {r0, r1, r2}
 800fd26:	6020      	str	r0, [r4, #0]
 800fd28:	6061      	str	r1, [r4, #4]
 800fd2a:	60a2      	str	r2, [r4, #8]
 800fd2c:	881b      	ldrh	r3, [r3, #0]
 800fd2e:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,5,8,10,13,16,18");
 800fd30:	687b      	ldr	r3, [r7, #4]
 800fd32:	3304      	adds	r3, #4
 800fd34:	4a3e      	ldr	r2, [pc, #248]	; (800fe30 <problem_fetch+0xeb10>)
 800fd36:	461d      	mov	r5, r3
 800fd38:	4614      	mov	r4, r2
 800fd3a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800fd3c:	6028      	str	r0, [r5, #0]
 800fd3e:	6069      	str	r1, [r5, #4]
 800fd40:	60aa      	str	r2, [r5, #8]
 800fd42:	60eb      	str	r3, [r5, #12]
 800fd44:	8823      	ldrh	r3, [r4, #0]
 800fd46:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish, "s,s,d,d,d,d,e");
 800fd48:	687b      	ldr	r3, [r7, #4]
 800fd4a:	33d8      	adds	r3, #216	; 0xd8
 800fd4c:	4a35      	ldr	r2, [pc, #212]	; (800fe24 <problem_fetch+0xeb04>)
 800fd4e:	461c      	mov	r4, r3
 800fd50:	4613      	mov	r3, r2
 800fd52:	cb07      	ldmia	r3!, {r0, r1, r2}
 800fd54:	6020      	str	r0, [r4, #0]
 800fd56:	6061      	str	r1, [r4, #4]
 800fd58:	60a2      	str	r2, [r4, #8]
 800fd5a:	881b      	ldrh	r3, [r3, #0]
 800fd5c:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade, "6B+");
 800fd5e:	687b      	ldr	r3, [r7, #4]
 800fd60:	33cc      	adds	r3, #204	; 0xcc
 800fd62:	4a24      	ldr	r2, [pc, #144]	; (800fdf4 <problem_fetch+0xead4>)
 800fd64:	6810      	ldr	r0, [r2, #0]
 800fd66:	6018      	str	r0, [r3, #0]
			break;
 800fd68:	f00b b820 	b.w	801adac <problem_fetch+0x19a8c>
		case 504 :
			strcpy(p->name,"TRYTRYTRY");
 800fd6c:	687b      	ldr	r3, [r7, #4]
 800fd6e:	337c      	adds	r3, #124	; 0x7c
 800fd70:	4930      	ldr	r1, [pc, #192]	; (800fe34 <problem_fetch+0xeb14>)
 800fd72:	461a      	mov	r2, r3
 800fd74:	460b      	mov	r3, r1
 800fd76:	cb03      	ldmia	r3!, {r0, r1}
 800fd78:	6010      	str	r0, [r2, #0]
 800fd7a:	6051      	str	r1, [r2, #4]
 800fd7c:	881b      	ldrh	r3, [r3, #0]
 800fd7e:	8113      	strh	r3, [r2, #8]
			p->moveSize = 6;
 800fd80:	687b      	ldr	r3, [r7, #4]
 800fd82:	2206      	movs	r2, #6
 800fd84:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"C,E,C,E,G,D");
 800fd86:	687b      	ldr	r3, [r7, #4]
 800fd88:	3340      	adds	r3, #64	; 0x40
 800fd8a:	4a2b      	ldr	r2, [pc, #172]	; (800fe38 <problem_fetch+0xeb18>)
 800fd8c:	461c      	mov	r4, r3
 800fd8e:	4613      	mov	r3, r2
 800fd90:	cb07      	ldmia	r3!, {r0, r1, r2}
 800fd92:	6020      	str	r0, [r4, #0]
 800fd94:	6061      	str	r1, [r4, #4]
 800fd96:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,6,13,8,9,18");
 800fd98:	687b      	ldr	r3, [r7, #4]
 800fd9a:	3304      	adds	r3, #4
 800fd9c:	4a27      	ldr	r2, [pc, #156]	; (800fe3c <problem_fetch+0xeb1c>)
 800fd9e:	461c      	mov	r4, r3
 800fda0:	4613      	mov	r3, r2
 800fda2:	cb07      	ldmia	r3!, {r0, r1, r2}
 800fda4:	6020      	str	r0, [r4, #0]
 800fda6:	6061      	str	r1, [r4, #4]
 800fda8:	60a2      	str	r2, [r4, #8]
 800fdaa:	881b      	ldrh	r3, [r3, #0]
 800fdac:	81a3      	strh	r3, [r4, #12]
			strcpy(p->startFinish, "s,s,d,d,d,e");
 800fdae:	687b      	ldr	r3, [r7, #4]
 800fdb0:	33d8      	adds	r3, #216	; 0xd8
 800fdb2:	4a14      	ldr	r2, [pc, #80]	; (800fe04 <problem_fetch+0xeae4>)
 800fdb4:	461c      	mov	r4, r3
 800fdb6:	4613      	mov	r3, r2
 800fdb8:	cb07      	ldmia	r3!, {r0, r1, r2}
 800fdba:	6020      	str	r0, [r4, #0]
 800fdbc:	6061      	str	r1, [r4, #4]
 800fdbe:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade, "6B+");
 800fdc0:	687b      	ldr	r3, [r7, #4]
 800fdc2:	33cc      	adds	r3, #204	; 0xcc
 800fdc4:	4a0b      	ldr	r2, [pc, #44]	; (800fdf4 <problem_fetch+0xead4>)
 800fdc6:	6810      	ldr	r0, [r2, #0]
 800fdc8:	6018      	str	r0, [r3, #0]
			break;
 800fdca:	f00a bfef 	b.w	801adac <problem_fetch+0x19a8c>
 800fdce:	bf00      	nop
 800fdd0:	0802647c 	.word	0x0802647c
 800fdd4:	08026488 	.word	0x08026488
 800fdd8:	08026498 	.word	0x08026498
 800fddc:	08021494 	.word	0x08021494
 800fde0:	080212f4 	.word	0x080212f4
 800fde4:	080264ac 	.word	0x080264ac
 800fde8:	080264b8 	.word	0x080264b8
 800fdec:	080264c4 	.word	0x080264c4
 800fdf0:	080221c8 	.word	0x080221c8
 800fdf4:	080212b0 	.word	0x080212b0
 800fdf8:	080264d4 	.word	0x080264d4
 800fdfc:	080264e4 	.word	0x080264e4
 800fe00:	080264f0 	.word	0x080264f0
 800fe04:	08021910 	.word	0x08021910
 800fe08:	08026500 	.word	0x08026500
 800fe0c:	08026508 	.word	0x08026508
 800fe10:	08026518 	.word	0x08026518
 800fe14:	08021848 	.word	0x08021848
 800fe18:	0802652c 	.word	0x0802652c
 800fe1c:	08026534 	.word	0x08026534
 800fe20:	08026544 	.word	0x08026544
 800fe24:	080212a0 	.word	0x080212a0
 800fe28:	08026558 	.word	0x08026558
 800fe2c:	08026560 	.word	0x08026560
 800fe30:	08026570 	.word	0x08026570
 800fe34:	08026584 	.word	0x08026584
 800fe38:	08026590 	.word	0x08026590
 800fe3c:	0802659c 	.word	0x0802659c
		case 505 :
			strcpy(p->name,"OKTRY");
 800fe40:	687b      	ldr	r3, [r7, #4]
 800fe42:	337c      	adds	r3, #124	; 0x7c
 800fe44:	4aba      	ldr	r2, [pc, #744]	; (8010130 <problem_fetch+0xee10>)
 800fe46:	6810      	ldr	r0, [r2, #0]
 800fe48:	6018      	str	r0, [r3, #0]
 800fe4a:	8892      	ldrh	r2, [r2, #4]
 800fe4c:	809a      	strh	r2, [r3, #4]
			p->moveSize = 5;
 800fe4e:	687b      	ldr	r3, [r7, #4]
 800fe50:	2205      	movs	r2, #5
 800fe52:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"C,E,C,C,D");
 800fe54:	687b      	ldr	r3, [r7, #4]
 800fe56:	3340      	adds	r3, #64	; 0x40
 800fe58:	49b6      	ldr	r1, [pc, #728]	; (8010134 <problem_fetch+0xee14>)
 800fe5a:	461a      	mov	r2, r3
 800fe5c:	460b      	mov	r3, r1
 800fe5e:	cb03      	ldmia	r3!, {r0, r1}
 800fe60:	6010      	str	r0, [r2, #0]
 800fe62:	6051      	str	r1, [r2, #4]
 800fe64:	881b      	ldrh	r3, [r3, #0]
 800fe66:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"5,6,8,13,18");
 800fe68:	687b      	ldr	r3, [r7, #4]
 800fe6a:	3304      	adds	r3, #4
 800fe6c:	4ab2      	ldr	r2, [pc, #712]	; (8010138 <problem_fetch+0xee18>)
 800fe6e:	461c      	mov	r4, r3
 800fe70:	4613      	mov	r3, r2
 800fe72:	cb07      	ldmia	r3!, {r0, r1, r2}
 800fe74:	6020      	str	r0, [r4, #0]
 800fe76:	6061      	str	r1, [r4, #4]
 800fe78:	60a2      	str	r2, [r4, #8]
			strcpy(p->startFinish, "s,s,d,d,e");
 800fe7a:	687b      	ldr	r3, [r7, #4]
 800fe7c:	33d8      	adds	r3, #216	; 0xd8
 800fe7e:	49af      	ldr	r1, [pc, #700]	; (801013c <problem_fetch+0xee1c>)
 800fe80:	461a      	mov	r2, r3
 800fe82:	460b      	mov	r3, r1
 800fe84:	cb03      	ldmia	r3!, {r0, r1}
 800fe86:	6010      	str	r0, [r2, #0]
 800fe88:	6051      	str	r1, [r2, #4]
 800fe8a:	881b      	ldrh	r3, [r3, #0]
 800fe8c:	8113      	strh	r3, [r2, #8]
			strcpy(p->grade, "6B+");
 800fe8e:	687b      	ldr	r3, [r7, #4]
 800fe90:	33cc      	adds	r3, #204	; 0xcc
 800fe92:	4aab      	ldr	r2, [pc, #684]	; (8010140 <problem_fetch+0xee20>)
 800fe94:	6810      	ldr	r0, [r2, #0]
 800fe96:	6018      	str	r0, [r3, #0]
			break;
 800fe98:	f00a bf88 	b.w	801adac <problem_fetch+0x19a8c>
		case 506 :
			strcpy(p->name,"RON DUC DONG");
 800fe9c:	687b      	ldr	r3, [r7, #4]
 800fe9e:	337c      	adds	r3, #124	; 0x7c
 800fea0:	4aa8      	ldr	r2, [pc, #672]	; (8010144 <problem_fetch+0xee24>)
 800fea2:	461c      	mov	r4, r3
 800fea4:	4613      	mov	r3, r2
 800fea6:	cb07      	ldmia	r3!, {r0, r1, r2}
 800fea8:	6020      	str	r0, [r4, #0]
 800feaa:	6061      	str	r1, [r4, #4]
 800feac:	60a2      	str	r2, [r4, #8]
 800feae:	781b      	ldrb	r3, [r3, #0]
 800feb0:	7323      	strb	r3, [r4, #12]
			p->moveSize = 7;
 800feb2:	687b      	ldr	r3, [r7, #4]
 800feb4:	2207      	movs	r2, #7
 800feb6:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"H,J,G,E,I,E,D");
 800feb8:	687b      	ldr	r3, [r7, #4]
 800feba:	3340      	adds	r3, #64	; 0x40
 800febc:	4aa2      	ldr	r2, [pc, #648]	; (8010148 <problem_fetch+0xee28>)
 800febe:	461c      	mov	r4, r3
 800fec0:	4613      	mov	r3, r2
 800fec2:	cb07      	ldmia	r3!, {r0, r1, r2}
 800fec4:	6020      	str	r0, [r4, #0]
 800fec6:	6061      	str	r1, [r4, #4]
 800fec8:	60a2      	str	r2, [r4, #8]
 800feca:	881b      	ldrh	r3, [r3, #0]
 800fecc:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,5,9,12,14,16,18");
 800fece:	687b      	ldr	r3, [r7, #4]
 800fed0:	3304      	adds	r3, #4
 800fed2:	4a9e      	ldr	r2, [pc, #632]	; (801014c <problem_fetch+0xee2c>)
 800fed4:	461d      	mov	r5, r3
 800fed6:	4614      	mov	r4, r2
 800fed8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800feda:	6028      	str	r0, [r5, #0]
 800fedc:	6069      	str	r1, [r5, #4]
 800fede:	60aa      	str	r2, [r5, #8]
 800fee0:	60eb      	str	r3, [r5, #12]
 800fee2:	8823      	ldrh	r3, [r4, #0]
 800fee4:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish, "s,s,d,d,d,d,e");
 800fee6:	687b      	ldr	r3, [r7, #4]
 800fee8:	33d8      	adds	r3, #216	; 0xd8
 800feea:	4a99      	ldr	r2, [pc, #612]	; (8010150 <problem_fetch+0xee30>)
 800feec:	461c      	mov	r4, r3
 800feee:	4613      	mov	r3, r2
 800fef0:	cb07      	ldmia	r3!, {r0, r1, r2}
 800fef2:	6020      	str	r0, [r4, #0]
 800fef4:	6061      	str	r1, [r4, #4]
 800fef6:	60a2      	str	r2, [r4, #8]
 800fef8:	881b      	ldrh	r3, [r3, #0]
 800fefa:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade, "6C+");
 800fefc:	687b      	ldr	r3, [r7, #4]
 800fefe:	33cc      	adds	r3, #204	; 0xcc
 800ff00:	4a94      	ldr	r2, [pc, #592]	; (8010154 <problem_fetch+0xee34>)
 800ff02:	6810      	ldr	r0, [r2, #0]
 800ff04:	6018      	str	r0, [r3, #0]
			break;
 800ff06:	f00a bf51 	b.w	801adac <problem_fetch+0x19a8c>
		case 507 :
			strcpy(p->name,"ENRON");
 800ff0a:	687b      	ldr	r3, [r7, #4]
 800ff0c:	337c      	adds	r3, #124	; 0x7c
 800ff0e:	4a92      	ldr	r2, [pc, #584]	; (8010158 <problem_fetch+0xee38>)
 800ff10:	6810      	ldr	r0, [r2, #0]
 800ff12:	6018      	str	r0, [r3, #0]
 800ff14:	8892      	ldrh	r2, [r2, #4]
 800ff16:	809a      	strh	r2, [r3, #4]
			p->moveSize = 7;
 800ff18:	687b      	ldr	r3, [r7, #4]
 800ff1a:	2207      	movs	r2, #7
 800ff1c:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"G,E,E,B,E,B,D");
 800ff1e:	687b      	ldr	r3, [r7, #4]
 800ff20:	3340      	adds	r3, #64	; 0x40
 800ff22:	4a8e      	ldr	r2, [pc, #568]	; (801015c <problem_fetch+0xee3c>)
 800ff24:	461c      	mov	r4, r3
 800ff26:	4613      	mov	r3, r2
 800ff28:	cb07      	ldmia	r3!, {r0, r1, r2}
 800ff2a:	6020      	str	r0, [r4, #0]
 800ff2c:	6061      	str	r1, [r4, #4]
 800ff2e:	60a2      	str	r2, [r4, #8]
 800ff30:	881b      	ldrh	r3, [r3, #0]
 800ff32:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,6,9,12,12,15,18");
 800ff34:	687b      	ldr	r3, [r7, #4]
 800ff36:	3304      	adds	r3, #4
 800ff38:	4a89      	ldr	r2, [pc, #548]	; (8010160 <problem_fetch+0xee40>)
 800ff3a:	461d      	mov	r5, r3
 800ff3c:	4614      	mov	r4, r2
 800ff3e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800ff40:	6028      	str	r0, [r5, #0]
 800ff42:	6069      	str	r1, [r5, #4]
 800ff44:	60aa      	str	r2, [r5, #8]
 800ff46:	60eb      	str	r3, [r5, #12]
 800ff48:	8823      	ldrh	r3, [r4, #0]
 800ff4a:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish, "s,s,d,d,d,d,e");
 800ff4c:	687b      	ldr	r3, [r7, #4]
 800ff4e:	33d8      	adds	r3, #216	; 0xd8
 800ff50:	4a7f      	ldr	r2, [pc, #508]	; (8010150 <problem_fetch+0xee30>)
 800ff52:	461c      	mov	r4, r3
 800ff54:	4613      	mov	r3, r2
 800ff56:	cb07      	ldmia	r3!, {r0, r1, r2}
 800ff58:	6020      	str	r0, [r4, #0]
 800ff5a:	6061      	str	r1, [r4, #4]
 800ff5c:	60a2      	str	r2, [r4, #8]
 800ff5e:	881b      	ldrh	r3, [r3, #0]
 800ff60:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade, "7A");
 800ff62:	687b      	ldr	r3, [r7, #4]
 800ff64:	33cc      	adds	r3, #204	; 0xcc
 800ff66:	4a7f      	ldr	r2, [pc, #508]	; (8010164 <problem_fetch+0xee44>)
 800ff68:	8811      	ldrh	r1, [r2, #0]
 800ff6a:	7892      	ldrb	r2, [r2, #2]
 800ff6c:	8019      	strh	r1, [r3, #0]
 800ff6e:	709a      	strb	r2, [r3, #2]
			break;
 800ff70:	f00a bf1c 	b.w	801adac <problem_fetch+0x19a8c>
		case 508 :
			strcpy(p->name,"BOCHANPOWER");
 800ff74:	687b      	ldr	r3, [r7, #4]
 800ff76:	337c      	adds	r3, #124	; 0x7c
 800ff78:	4a7b      	ldr	r2, [pc, #492]	; (8010168 <problem_fetch+0xee48>)
 800ff7a:	461c      	mov	r4, r3
 800ff7c:	4613      	mov	r3, r2
 800ff7e:	cb07      	ldmia	r3!, {r0, r1, r2}
 800ff80:	6020      	str	r0, [r4, #0]
 800ff82:	6061      	str	r1, [r4, #4]
 800ff84:	60a2      	str	r2, [r4, #8]
			p->moveSize = 5;
 800ff86:	687b      	ldr	r3, [r7, #4]
 800ff88:	2205      	movs	r2, #5
 800ff8a:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"G,G,E,G,D");
 800ff8c:	687b      	ldr	r3, [r7, #4]
 800ff8e:	3340      	adds	r3, #64	; 0x40
 800ff90:	4976      	ldr	r1, [pc, #472]	; (801016c <problem_fetch+0xee4c>)
 800ff92:	461a      	mov	r2, r3
 800ff94:	460b      	mov	r3, r1
 800ff96:	cb03      	ldmia	r3!, {r0, r1}
 800ff98:	6010      	str	r0, [r2, #0]
 800ff9a:	6051      	str	r1, [r2, #4]
 800ff9c:	881b      	ldrh	r3, [r3, #0]
 800ff9e:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"4,9,8,14,18");
 800ffa0:	687b      	ldr	r3, [r7, #4]
 800ffa2:	3304      	adds	r3, #4
 800ffa4:	4a72      	ldr	r2, [pc, #456]	; (8010170 <problem_fetch+0xee50>)
 800ffa6:	461c      	mov	r4, r3
 800ffa8:	4613      	mov	r3, r2
 800ffaa:	cb07      	ldmia	r3!, {r0, r1, r2}
 800ffac:	6020      	str	r0, [r4, #0]
 800ffae:	6061      	str	r1, [r4, #4]
 800ffb0:	60a2      	str	r2, [r4, #8]
			strcpy(p->startFinish, "s,d,d,d,e");
 800ffb2:	687b      	ldr	r3, [r7, #4]
 800ffb4:	33d8      	adds	r3, #216	; 0xd8
 800ffb6:	496f      	ldr	r1, [pc, #444]	; (8010174 <problem_fetch+0xee54>)
 800ffb8:	461a      	mov	r2, r3
 800ffba:	460b      	mov	r3, r1
 800ffbc:	cb03      	ldmia	r3!, {r0, r1}
 800ffbe:	6010      	str	r0, [r2, #0]
 800ffc0:	6051      	str	r1, [r2, #4]
 800ffc2:	881b      	ldrh	r3, [r3, #0]
 800ffc4:	8113      	strh	r3, [r2, #8]
			strcpy(p->grade, "7A+");
 800ffc6:	687b      	ldr	r3, [r7, #4]
 800ffc8:	33cc      	adds	r3, #204	; 0xcc
 800ffca:	4a6b      	ldr	r2, [pc, #428]	; (8010178 <problem_fetch+0xee58>)
 800ffcc:	6810      	ldr	r0, [r2, #0]
 800ffce:	6018      	str	r0, [r3, #0]
			break;
 800ffd0:	f00a beec 	b.w	801adac <problem_fetch+0x19a8c>
		case 509 :
			strcpy(p->name,"FROGGERTON GOES TO SCHOOL");
 800ffd4:	687b      	ldr	r3, [r7, #4]
 800ffd6:	337c      	adds	r3, #124	; 0x7c
 800ffd8:	4a68      	ldr	r2, [pc, #416]	; (801017c <problem_fetch+0xee5c>)
 800ffda:	461d      	mov	r5, r3
 800ffdc:	4614      	mov	r4, r2
 800ffde:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800ffe0:	6028      	str	r0, [r5, #0]
 800ffe2:	6069      	str	r1, [r5, #4]
 800ffe4:	60aa      	str	r2, [r5, #8]
 800ffe6:	60eb      	str	r3, [r5, #12]
 800ffe8:	cc03      	ldmia	r4!, {r0, r1}
 800ffea:	6128      	str	r0, [r5, #16]
 800ffec:	6169      	str	r1, [r5, #20]
 800ffee:	8823      	ldrh	r3, [r4, #0]
 800fff0:	832b      	strh	r3, [r5, #24]
			p->moveSize = 6;
 800fff2:	687b      	ldr	r3, [r7, #4]
 800fff4:	2206      	movs	r2, #6
 800fff6:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"G,E,D,C,A,A");
 800fff8:	687b      	ldr	r3, [r7, #4]
 800fffa:	3340      	adds	r3, #64	; 0x40
 800fffc:	4a60      	ldr	r2, [pc, #384]	; (8010180 <problem_fetch+0xee60>)
 800fffe:	461c      	mov	r4, r3
 8010000:	4613      	mov	r3, r2
 8010002:	cb07      	ldmia	r3!, {r0, r1, r2}
 8010004:	6020      	str	r0, [r4, #0]
 8010006:	6061      	str	r1, [r4, #4]
 8010008:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,8,11,13,14,18");
 801000a:	687b      	ldr	r3, [r7, #4]
 801000c:	3304      	adds	r3, #4
 801000e:	4a5d      	ldr	r2, [pc, #372]	; (8010184 <problem_fetch+0xee64>)
 8010010:	461c      	mov	r4, r3
 8010012:	4615      	mov	r5, r2
 8010014:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010016:	6020      	str	r0, [r4, #0]
 8010018:	6061      	str	r1, [r4, #4]
 801001a:	60a2      	str	r2, [r4, #8]
 801001c:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish, "s,d,d,d,d,e");
 801001e:	687b      	ldr	r3, [r7, #4]
 8010020:	33d8      	adds	r3, #216	; 0xd8
 8010022:	4a59      	ldr	r2, [pc, #356]	; (8010188 <problem_fetch+0xee68>)
 8010024:	461c      	mov	r4, r3
 8010026:	4613      	mov	r3, r2
 8010028:	cb07      	ldmia	r3!, {r0, r1, r2}
 801002a:	6020      	str	r0, [r4, #0]
 801002c:	6061      	str	r1, [r4, #4]
 801002e:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade, "6B+");
 8010030:	687b      	ldr	r3, [r7, #4]
 8010032:	33cc      	adds	r3, #204	; 0xcc
 8010034:	4a42      	ldr	r2, [pc, #264]	; (8010140 <problem_fetch+0xee20>)
 8010036:	6810      	ldr	r0, [r2, #0]
 8010038:	6018      	str	r0, [r3, #0]
			break;
 801003a:	f00a beb7 	b.w	801adac <problem_fetch+0x19a8c>
		case 51 :
			strcpy(p->name,"BLACK HOLE");
 801003e:	687b      	ldr	r3, [r7, #4]
 8010040:	337c      	adds	r3, #124	; 0x7c
 8010042:	4952      	ldr	r1, [pc, #328]	; (801018c <problem_fetch+0xee6c>)
 8010044:	461a      	mov	r2, r3
 8010046:	460b      	mov	r3, r1
 8010048:	cb03      	ldmia	r3!, {r0, r1}
 801004a:	6010      	str	r0, [r2, #0]
 801004c:	6051      	str	r1, [r2, #4]
 801004e:	8819      	ldrh	r1, [r3, #0]
 8010050:	789b      	ldrb	r3, [r3, #2]
 8010052:	8111      	strh	r1, [r2, #8]
 8010054:	7293      	strb	r3, [r2, #10]
			p->moveSize = 7;
 8010056:	687b      	ldr	r3, [r7, #4]
 8010058:	2207      	movs	r2, #7
 801005a:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"G,J,I,J,G,G,D");
 801005c:	687b      	ldr	r3, [r7, #4]
 801005e:	3340      	adds	r3, #64	; 0x40
 8010060:	4a4b      	ldr	r2, [pc, #300]	; (8010190 <problem_fetch+0xee70>)
 8010062:	461c      	mov	r4, r3
 8010064:	4613      	mov	r3, r2
 8010066:	cb07      	ldmia	r3!, {r0, r1, r2}
 8010068:	6020      	str	r0, [r4, #0]
 801006a:	6061      	str	r1, [r4, #4]
 801006c:	60a2      	str	r2, [r4, #8]
 801006e:	881b      	ldrh	r3, [r3, #0]
 8010070:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,7,10,13,15,17,18");
 8010072:	687b      	ldr	r3, [r7, #4]
 8010074:	3304      	adds	r3, #4
 8010076:	4a47      	ldr	r2, [pc, #284]	; (8010194 <problem_fetch+0xee74>)
 8010078:	461d      	mov	r5, r3
 801007a:	4614      	mov	r4, r2
 801007c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801007e:	6028      	str	r0, [r5, #0]
 8010080:	6069      	str	r1, [r5, #4]
 8010082:	60aa      	str	r2, [r5, #8]
 8010084:	60eb      	str	r3, [r5, #12]
 8010086:	8823      	ldrh	r3, [r4, #0]
 8010088:	78a2      	ldrb	r2, [r4, #2]
 801008a:	822b      	strh	r3, [r5, #16]
 801008c:	4613      	mov	r3, r2
 801008e:	74ab      	strb	r3, [r5, #18]
			strcpy(p->startFinish, "s,d,d,d,d,d,e");
 8010090:	687b      	ldr	r3, [r7, #4]
 8010092:	33d8      	adds	r3, #216	; 0xd8
 8010094:	4a40      	ldr	r2, [pc, #256]	; (8010198 <problem_fetch+0xee78>)
 8010096:	461c      	mov	r4, r3
 8010098:	4613      	mov	r3, r2
 801009a:	cb07      	ldmia	r3!, {r0, r1, r2}
 801009c:	6020      	str	r0, [r4, #0]
 801009e:	6061      	str	r1, [r4, #4]
 80100a0:	60a2      	str	r2, [r4, #8]
 80100a2:	881b      	ldrh	r3, [r3, #0]
 80100a4:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade, "6B+");
 80100a6:	687b      	ldr	r3, [r7, #4]
 80100a8:	33cc      	adds	r3, #204	; 0xcc
 80100aa:	4a25      	ldr	r2, [pc, #148]	; (8010140 <problem_fetch+0xee20>)
 80100ac:	6810      	ldr	r0, [r2, #0]
 80100ae:	6018      	str	r0, [r3, #0]
			break;
 80100b0:	f00a be7c 	b.w	801adac <problem_fetch+0x19a8c>
		case 510 :
			strcpy(p->name,"FAMILY MAN");
 80100b4:	687b      	ldr	r3, [r7, #4]
 80100b6:	337c      	adds	r3, #124	; 0x7c
 80100b8:	4938      	ldr	r1, [pc, #224]	; (801019c <problem_fetch+0xee7c>)
 80100ba:	461a      	mov	r2, r3
 80100bc:	460b      	mov	r3, r1
 80100be:	cb03      	ldmia	r3!, {r0, r1}
 80100c0:	6010      	str	r0, [r2, #0]
 80100c2:	6051      	str	r1, [r2, #4]
 80100c4:	8819      	ldrh	r1, [r3, #0]
 80100c6:	789b      	ldrb	r3, [r3, #2]
 80100c8:	8111      	strh	r1, [r2, #8]
 80100ca:	7293      	strb	r3, [r2, #10]
			p->moveSize = 7;
 80100cc:	687b      	ldr	r3, [r7, #4]
 80100ce:	2207      	movs	r2, #7
 80100d0:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"B,D,E,E,H,I,J");
 80100d2:	687b      	ldr	r3, [r7, #4]
 80100d4:	3340      	adds	r3, #64	; 0x40
 80100d6:	4a32      	ldr	r2, [pc, #200]	; (80101a0 <problem_fetch+0xee80>)
 80100d8:	461c      	mov	r4, r3
 80100da:	4613      	mov	r3, r2
 80100dc:	cb07      	ldmia	r3!, {r0, r1, r2}
 80100de:	6020      	str	r0, [r4, #0]
 80100e0:	6061      	str	r1, [r4, #4]
 80100e2:	60a2      	str	r2, [r4, #8]
 80100e4:	881b      	ldrh	r3, [r3, #0]
 80100e6:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"15,18,12,14,5,10,5");
 80100e8:	687b      	ldr	r3, [r7, #4]
 80100ea:	3304      	adds	r3, #4
 80100ec:	4a2d      	ldr	r2, [pc, #180]	; (80101a4 <problem_fetch+0xee84>)
 80100ee:	461d      	mov	r5, r3
 80100f0:	4614      	mov	r4, r2
 80100f2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80100f4:	6028      	str	r0, [r5, #0]
 80100f6:	6069      	str	r1, [r5, #4]
 80100f8:	60aa      	str	r2, [r5, #8]
 80100fa:	60eb      	str	r3, [r5, #12]
 80100fc:	8823      	ldrh	r3, [r4, #0]
 80100fe:	78a2      	ldrb	r2, [r4, #2]
 8010100:	822b      	strh	r3, [r5, #16]
 8010102:	4613      	mov	r3, r2
 8010104:	74ab      	strb	r3, [r5, #18]
			strcpy(p->startFinish, "d,e,d,d,s,d,s");
 8010106:	687b      	ldr	r3, [r7, #4]
 8010108:	33d8      	adds	r3, #216	; 0xd8
 801010a:	4a27      	ldr	r2, [pc, #156]	; (80101a8 <problem_fetch+0xee88>)
 801010c:	461c      	mov	r4, r3
 801010e:	4613      	mov	r3, r2
 8010110:	cb07      	ldmia	r3!, {r0, r1, r2}
 8010112:	6020      	str	r0, [r4, #0]
 8010114:	6061      	str	r1, [r4, #4]
 8010116:	60a2      	str	r2, [r4, #8]
 8010118:	881b      	ldrh	r3, [r3, #0]
 801011a:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade, "6C");
 801011c:	687b      	ldr	r3, [r7, #4]
 801011e:	33cc      	adds	r3, #204	; 0xcc
 8010120:	4a22      	ldr	r2, [pc, #136]	; (80101ac <problem_fetch+0xee8c>)
 8010122:	8811      	ldrh	r1, [r2, #0]
 8010124:	7892      	ldrb	r2, [r2, #2]
 8010126:	8019      	strh	r1, [r3, #0]
 8010128:	709a      	strb	r2, [r3, #2]
			break;
 801012a:	f00a be3f 	b.w	801adac <problem_fetch+0x19a8c>
 801012e:	bf00      	nop
 8010130:	080265ac 	.word	0x080265ac
 8010134:	080265b4 	.word	0x080265b4
 8010138:	080265c0 	.word	0x080265c0
 801013c:	080221c8 	.word	0x080221c8
 8010140:	080212b0 	.word	0x080212b0
 8010144:	080265cc 	.word	0x080265cc
 8010148:	080265dc 	.word	0x080265dc
 801014c:	080265ec 	.word	0x080265ec
 8010150:	080212a0 	.word	0x080212a0
 8010154:	080213a8 	.word	0x080213a8
 8010158:	08026600 	.word	0x08026600
 801015c:	08026608 	.word	0x08026608
 8010160:	08026618 	.word	0x08026618
 8010164:	080212f4 	.word	0x080212f4
 8010168:	0802662c 	.word	0x0802662c
 801016c:	08026638 	.word	0x08026638
 8010170:	08026644 	.word	0x08026644
 8010174:	08021320 	.word	0x08021320
 8010178:	08021424 	.word	0x08021424
 801017c:	08026650 	.word	0x08026650
 8010180:	0802666c 	.word	0x0802666c
 8010184:	08026678 	.word	0x08026678
 8010188:	0802139c 	.word	0x0802139c
 801018c:	08026688 	.word	0x08026688
 8010190:	08026694 	.word	0x08026694
 8010194:	080266a4 	.word	0x080266a4
 8010198:	08021494 	.word	0x08021494
 801019c:	080266b8 	.word	0x080266b8
 80101a0:	080266c4 	.word	0x080266c4
 80101a4:	080266d4 	.word	0x080266d4
 80101a8:	080266e8 	.word	0x080266e8
 80101ac:	08021370 	.word	0x08021370
		case 511 :
			strcpy(p->name,"TEST111");
 80101b0:	687b      	ldr	r3, [r7, #4]
 80101b2:	337c      	adds	r3, #124	; 0x7c
 80101b4:	49b2      	ldr	r1, [pc, #712]	; (8010480 <problem_fetch+0xf160>)
 80101b6:	461a      	mov	r2, r3
 80101b8:	460b      	mov	r3, r1
 80101ba:	cb03      	ldmia	r3!, {r0, r1}
 80101bc:	6010      	str	r0, [r2, #0]
 80101be:	6051      	str	r1, [r2, #4]
			p->moveSize = 7;
 80101c0:	687b      	ldr	r3, [r7, #4]
 80101c2:	2207      	movs	r2, #7
 80101c4:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"J,I,H,F,E,D,A");
 80101c6:	687b      	ldr	r3, [r7, #4]
 80101c8:	3340      	adds	r3, #64	; 0x40
 80101ca:	4aae      	ldr	r2, [pc, #696]	; (8010484 <problem_fetch+0xf164>)
 80101cc:	461c      	mov	r4, r3
 80101ce:	4613      	mov	r3, r2
 80101d0:	cb07      	ldmia	r3!, {r0, r1, r2}
 80101d2:	6020      	str	r0, [r4, #0]
 80101d4:	6061      	str	r1, [r4, #4]
 80101d6:	60a2      	str	r2, [r4, #8]
 80101d8:	881b      	ldrh	r3, [r3, #0]
 80101da:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,7,8,11,12,15,18");
 80101dc:	687b      	ldr	r3, [r7, #4]
 80101de:	3304      	adds	r3, #4
 80101e0:	4aa9      	ldr	r2, [pc, #676]	; (8010488 <problem_fetch+0xf168>)
 80101e2:	461d      	mov	r5, r3
 80101e4:	4614      	mov	r4, r2
 80101e6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80101e8:	6028      	str	r0, [r5, #0]
 80101ea:	6069      	str	r1, [r5, #4]
 80101ec:	60aa      	str	r2, [r5, #8]
 80101ee:	60eb      	str	r3, [r5, #12]
 80101f0:	8823      	ldrh	r3, [r4, #0]
 80101f2:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish, "s,d,d,d,d,d,e");
 80101f4:	687b      	ldr	r3, [r7, #4]
 80101f6:	33d8      	adds	r3, #216	; 0xd8
 80101f8:	4aa4      	ldr	r2, [pc, #656]	; (801048c <problem_fetch+0xf16c>)
 80101fa:	461c      	mov	r4, r3
 80101fc:	4613      	mov	r3, r2
 80101fe:	cb07      	ldmia	r3!, {r0, r1, r2}
 8010200:	6020      	str	r0, [r4, #0]
 8010202:	6061      	str	r1, [r4, #4]
 8010204:	60a2      	str	r2, [r4, #8]
 8010206:	881b      	ldrh	r3, [r3, #0]
 8010208:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade, "6C");
 801020a:	687b      	ldr	r3, [r7, #4]
 801020c:	33cc      	adds	r3, #204	; 0xcc
 801020e:	4aa0      	ldr	r2, [pc, #640]	; (8010490 <problem_fetch+0xf170>)
 8010210:	8811      	ldrh	r1, [r2, #0]
 8010212:	7892      	ldrb	r2, [r2, #2]
 8010214:	8019      	strh	r1, [r3, #0]
 8010216:	709a      	strb	r2, [r3, #2]
			break;
 8010218:	f00a bdc8 	b.w	801adac <problem_fetch+0x19a8c>
		case 512 :
			strcpy(p->name,"PEAS AND GRAVY");
 801021c:	687b      	ldr	r3, [r7, #4]
 801021e:	337c      	adds	r3, #124	; 0x7c
 8010220:	4a9c      	ldr	r2, [pc, #624]	; (8010494 <problem_fetch+0xf174>)
 8010222:	461c      	mov	r4, r3
 8010224:	4613      	mov	r3, r2
 8010226:	cb07      	ldmia	r3!, {r0, r1, r2}
 8010228:	6020      	str	r0, [r4, #0]
 801022a:	6061      	str	r1, [r4, #4]
 801022c:	60a2      	str	r2, [r4, #8]
 801022e:	881a      	ldrh	r2, [r3, #0]
 8010230:	789b      	ldrb	r3, [r3, #2]
 8010232:	81a2      	strh	r2, [r4, #12]
 8010234:	73a3      	strb	r3, [r4, #14]
			p->moveSize = 6;
 8010236:	687b      	ldr	r3, [r7, #4]
 8010238:	2206      	movs	r2, #6
 801023a:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"E,J,H,C,D,A");
 801023c:	687b      	ldr	r3, [r7, #4]
 801023e:	3340      	adds	r3, #64	; 0x40
 8010240:	4a95      	ldr	r2, [pc, #596]	; (8010498 <problem_fetch+0xf178>)
 8010242:	461c      	mov	r4, r3
 8010244:	4613      	mov	r3, r2
 8010246:	cb07      	ldmia	r3!, {r0, r1, r2}
 8010248:	6020      	str	r0, [r4, #0]
 801024a:	6061      	str	r1, [r4, #4]
 801024c:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"6,5,10,13,15,18");
 801024e:	687b      	ldr	r3, [r7, #4]
 8010250:	3304      	adds	r3, #4
 8010252:	4a92      	ldr	r2, [pc, #584]	; (801049c <problem_fetch+0xf17c>)
 8010254:	461c      	mov	r4, r3
 8010256:	4615      	mov	r5, r2
 8010258:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801025a:	6020      	str	r0, [r4, #0]
 801025c:	6061      	str	r1, [r4, #4]
 801025e:	60a2      	str	r2, [r4, #8]
 8010260:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish, "s,s,d,d,d,e");
 8010262:	687b      	ldr	r3, [r7, #4]
 8010264:	33d8      	adds	r3, #216	; 0xd8
 8010266:	4a8e      	ldr	r2, [pc, #568]	; (80104a0 <problem_fetch+0xf180>)
 8010268:	461c      	mov	r4, r3
 801026a:	4613      	mov	r3, r2
 801026c:	cb07      	ldmia	r3!, {r0, r1, r2}
 801026e:	6020      	str	r0, [r4, #0]
 8010270:	6061      	str	r1, [r4, #4]
 8010272:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade, "6C");
 8010274:	687b      	ldr	r3, [r7, #4]
 8010276:	33cc      	adds	r3, #204	; 0xcc
 8010278:	4a85      	ldr	r2, [pc, #532]	; (8010490 <problem_fetch+0xf170>)
 801027a:	8811      	ldrh	r1, [r2, #0]
 801027c:	7892      	ldrb	r2, [r2, #2]
 801027e:	8019      	strh	r1, [r3, #0]
 8010280:	709a      	strb	r2, [r3, #2]
			break;
 8010282:	f00a bd93 	b.w	801adac <problem_fetch+0x19a8c>
		case 513 :
			strcpy(p->name,"THE LAST PEA");
 8010286:	687b      	ldr	r3, [r7, #4]
 8010288:	337c      	adds	r3, #124	; 0x7c
 801028a:	4a86      	ldr	r2, [pc, #536]	; (80104a4 <problem_fetch+0xf184>)
 801028c:	461c      	mov	r4, r3
 801028e:	4613      	mov	r3, r2
 8010290:	cb07      	ldmia	r3!, {r0, r1, r2}
 8010292:	6020      	str	r0, [r4, #0]
 8010294:	6061      	str	r1, [r4, #4]
 8010296:	60a2      	str	r2, [r4, #8]
 8010298:	781b      	ldrb	r3, [r3, #0]
 801029a:	7323      	strb	r3, [r4, #12]
			p->moveSize = 7;
 801029c:	687b      	ldr	r3, [r7, #4]
 801029e:	2207      	movs	r2, #7
 80102a0:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"E,E,B,E,C,D,A");
 80102a2:	687b      	ldr	r3, [r7, #4]
 80102a4:	3340      	adds	r3, #64	; 0x40
 80102a6:	4a80      	ldr	r2, [pc, #512]	; (80104a8 <problem_fetch+0xf188>)
 80102a8:	461c      	mov	r4, r3
 80102aa:	4613      	mov	r3, r2
 80102ac:	cb07      	ldmia	r3!, {r0, r1, r2}
 80102ae:	6020      	str	r0, [r4, #0]
 80102b0:	6061      	str	r1, [r4, #4]
 80102b2:	60a2      	str	r2, [r4, #8]
 80102b4:	881b      	ldrh	r3, [r3, #0]
 80102b6:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"6,8,10,12,13,15,18");
 80102b8:	687b      	ldr	r3, [r7, #4]
 80102ba:	3304      	adds	r3, #4
 80102bc:	4a7b      	ldr	r2, [pc, #492]	; (80104ac <problem_fetch+0xf18c>)
 80102be:	461d      	mov	r5, r3
 80102c0:	4614      	mov	r4, r2
 80102c2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80102c4:	6028      	str	r0, [r5, #0]
 80102c6:	6069      	str	r1, [r5, #4]
 80102c8:	60aa      	str	r2, [r5, #8]
 80102ca:	60eb      	str	r3, [r5, #12]
 80102cc:	8823      	ldrh	r3, [r4, #0]
 80102ce:	78a2      	ldrb	r2, [r4, #2]
 80102d0:	822b      	strh	r3, [r5, #16]
 80102d2:	4613      	mov	r3, r2
 80102d4:	74ab      	strb	r3, [r5, #18]
			strcpy(p->startFinish, "s,d,d,d,d,d,e");
 80102d6:	687b      	ldr	r3, [r7, #4]
 80102d8:	33d8      	adds	r3, #216	; 0xd8
 80102da:	4a6c      	ldr	r2, [pc, #432]	; (801048c <problem_fetch+0xf16c>)
 80102dc:	461c      	mov	r4, r3
 80102de:	4613      	mov	r3, r2
 80102e0:	cb07      	ldmia	r3!, {r0, r1, r2}
 80102e2:	6020      	str	r0, [r4, #0]
 80102e4:	6061      	str	r1, [r4, #4]
 80102e6:	60a2      	str	r2, [r4, #8]
 80102e8:	881b      	ldrh	r3, [r3, #0]
 80102ea:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade, "6B+");
 80102ec:	687b      	ldr	r3, [r7, #4]
 80102ee:	33cc      	adds	r3, #204	; 0xcc
 80102f0:	4a6f      	ldr	r2, [pc, #444]	; (80104b0 <problem_fetch+0xf190>)
 80102f2:	6810      	ldr	r0, [r2, #0]
 80102f4:	6018      	str	r0, [r3, #0]
			break;
 80102f6:	f00a bd59 	b.w	801adac <problem_fetch+0x19a8c>
		case 514 :
			strcpy(p->name,"NUN");
 80102fa:	687b      	ldr	r3, [r7, #4]
 80102fc:	337c      	adds	r3, #124	; 0x7c
 80102fe:	4a6d      	ldr	r2, [pc, #436]	; (80104b4 <problem_fetch+0xf194>)
 8010300:	6810      	ldr	r0, [r2, #0]
 8010302:	6018      	str	r0, [r3, #0]
			p->moveSize = 4;
 8010304:	687b      	ldr	r3, [r7, #4]
 8010306:	2204      	movs	r2, #4
 8010308:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"C,E,C,D");
 801030a:	687b      	ldr	r3, [r7, #4]
 801030c:	3340      	adds	r3, #64	; 0x40
 801030e:	496a      	ldr	r1, [pc, #424]	; (80104b8 <problem_fetch+0xf198>)
 8010310:	461a      	mov	r2, r3
 8010312:	460b      	mov	r3, r1
 8010314:	cb03      	ldmia	r3!, {r0, r1}
 8010316:	6010      	str	r0, [r2, #0]
 8010318:	6051      	str	r1, [r2, #4]
			strcpy(p->moveNumbers,"5,8,13,18");
 801031a:	687b      	ldr	r3, [r7, #4]
 801031c:	3304      	adds	r3, #4
 801031e:	4967      	ldr	r1, [pc, #412]	; (80104bc <problem_fetch+0xf19c>)
 8010320:	461a      	mov	r2, r3
 8010322:	460b      	mov	r3, r1
 8010324:	cb03      	ldmia	r3!, {r0, r1}
 8010326:	6010      	str	r0, [r2, #0]
 8010328:	6051      	str	r1, [r2, #4]
 801032a:	881b      	ldrh	r3, [r3, #0]
 801032c:	8113      	strh	r3, [r2, #8]
			strcpy(p->startFinish, "s,d,d,e");
 801032e:	687b      	ldr	r3, [r7, #4]
 8010330:	33d8      	adds	r3, #216	; 0xd8
 8010332:	4963      	ldr	r1, [pc, #396]	; (80104c0 <problem_fetch+0xf1a0>)
 8010334:	461a      	mov	r2, r3
 8010336:	460b      	mov	r3, r1
 8010338:	cb03      	ldmia	r3!, {r0, r1}
 801033a:	6010      	str	r0, [r2, #0]
 801033c:	6051      	str	r1, [r2, #4]
			strcpy(p->grade, "7A+");
 801033e:	687b      	ldr	r3, [r7, #4]
 8010340:	33cc      	adds	r3, #204	; 0xcc
 8010342:	4a60      	ldr	r2, [pc, #384]	; (80104c4 <problem_fetch+0xf1a4>)
 8010344:	6810      	ldr	r0, [r2, #0]
 8010346:	6018      	str	r0, [r3, #0]
			break;
 8010348:	f00a bd30 	b.w	801adac <problem_fetch+0x19a8c>
		case 515 :
			strcpy(p->name,"FUNNY");
 801034c:	687b      	ldr	r3, [r7, #4]
 801034e:	337c      	adds	r3, #124	; 0x7c
 8010350:	4a5d      	ldr	r2, [pc, #372]	; (80104c8 <problem_fetch+0xf1a8>)
 8010352:	6810      	ldr	r0, [r2, #0]
 8010354:	6018      	str	r0, [r3, #0]
 8010356:	8892      	ldrh	r2, [r2, #4]
 8010358:	809a      	strh	r2, [r3, #4]
			p->moveSize = 5;
 801035a:	687b      	ldr	r3, [r7, #4]
 801035c:	2205      	movs	r2, #5
 801035e:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"G,C,I,G,I");
 8010360:	687b      	ldr	r3, [r7, #4]
 8010362:	3340      	adds	r3, #64	; 0x40
 8010364:	4959      	ldr	r1, [pc, #356]	; (80104cc <problem_fetch+0xf1ac>)
 8010366:	461a      	mov	r2, r3
 8010368:	460b      	mov	r3, r1
 801036a:	cb03      	ldmia	r3!, {r0, r1}
 801036c:	6010      	str	r0, [r2, #0]
 801036e:	6051      	str	r1, [r2, #4]
 8010370:	881b      	ldrh	r3, [r3, #0]
 8010372:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"4,8,7,14,18");
 8010374:	687b      	ldr	r3, [r7, #4]
 8010376:	3304      	adds	r3, #4
 8010378:	4a55      	ldr	r2, [pc, #340]	; (80104d0 <problem_fetch+0xf1b0>)
 801037a:	461c      	mov	r4, r3
 801037c:	4613      	mov	r3, r2
 801037e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8010380:	6020      	str	r0, [r4, #0]
 8010382:	6061      	str	r1, [r4, #4]
 8010384:	60a2      	str	r2, [r4, #8]
			strcpy(p->startFinish, "s,d,d,d,e");
 8010386:	687b      	ldr	r3, [r7, #4]
 8010388:	33d8      	adds	r3, #216	; 0xd8
 801038a:	4952      	ldr	r1, [pc, #328]	; (80104d4 <problem_fetch+0xf1b4>)
 801038c:	461a      	mov	r2, r3
 801038e:	460b      	mov	r3, r1
 8010390:	cb03      	ldmia	r3!, {r0, r1}
 8010392:	6010      	str	r0, [r2, #0]
 8010394:	6051      	str	r1, [r2, #4]
 8010396:	881b      	ldrh	r3, [r3, #0]
 8010398:	8113      	strh	r3, [r2, #8]
			strcpy(p->grade, "7C");
 801039a:	687b      	ldr	r3, [r7, #4]
 801039c:	33cc      	adds	r3, #204	; 0xcc
 801039e:	4a4e      	ldr	r2, [pc, #312]	; (80104d8 <problem_fetch+0xf1b8>)
 80103a0:	8811      	ldrh	r1, [r2, #0]
 80103a2:	7892      	ldrb	r2, [r2, #2]
 80103a4:	8019      	strh	r1, [r3, #0]
 80103a6:	709a      	strb	r2, [r3, #2]
			break;
 80103a8:	f00a bd00 	b.w	801adac <problem_fetch+0x19a8c>
		case 516 :
			strcpy(p->name,"I'M RON BURGUNDY?");
 80103ac:	687b      	ldr	r3, [r7, #4]
 80103ae:	337c      	adds	r3, #124	; 0x7c
 80103b0:	4a4a      	ldr	r2, [pc, #296]	; (80104dc <problem_fetch+0xf1bc>)
 80103b2:	461d      	mov	r5, r3
 80103b4:	4614      	mov	r4, r2
 80103b6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80103b8:	6028      	str	r0, [r5, #0]
 80103ba:	6069      	str	r1, [r5, #4]
 80103bc:	60aa      	str	r2, [r5, #8]
 80103be:	60eb      	str	r3, [r5, #12]
 80103c0:	8823      	ldrh	r3, [r4, #0]
 80103c2:	822b      	strh	r3, [r5, #16]
			p->moveSize = 6;
 80103c4:	687b      	ldr	r3, [r7, #4]
 80103c6:	2206      	movs	r2, #6
 80103c8:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"G,G,E,F,D,A");
 80103ca:	687b      	ldr	r3, [r7, #4]
 80103cc:	3340      	adds	r3, #64	; 0x40
 80103ce:	4a44      	ldr	r2, [pc, #272]	; (80104e0 <problem_fetch+0xf1c0>)
 80103d0:	461c      	mov	r4, r3
 80103d2:	4613      	mov	r3, r2
 80103d4:	cb07      	ldmia	r3!, {r0, r1, r2}
 80103d6:	6020      	str	r0, [r4, #0]
 80103d8:	6061      	str	r1, [r4, #4]
 80103da:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,9,12,13,15,18");
 80103dc:	687b      	ldr	r3, [r7, #4]
 80103de:	3304      	adds	r3, #4
 80103e0:	4a40      	ldr	r2, [pc, #256]	; (80104e4 <problem_fetch+0xf1c4>)
 80103e2:	461c      	mov	r4, r3
 80103e4:	4615      	mov	r5, r2
 80103e6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80103e8:	6020      	str	r0, [r4, #0]
 80103ea:	6061      	str	r1, [r4, #4]
 80103ec:	60a2      	str	r2, [r4, #8]
 80103ee:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish, "s,d,d,d,d,e");
 80103f0:	687b      	ldr	r3, [r7, #4]
 80103f2:	33d8      	adds	r3, #216	; 0xd8
 80103f4:	4a3c      	ldr	r2, [pc, #240]	; (80104e8 <problem_fetch+0xf1c8>)
 80103f6:	461c      	mov	r4, r3
 80103f8:	4613      	mov	r3, r2
 80103fa:	cb07      	ldmia	r3!, {r0, r1, r2}
 80103fc:	6020      	str	r0, [r4, #0]
 80103fe:	6061      	str	r1, [r4, #4]
 8010400:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade, "6C+");
 8010402:	687b      	ldr	r3, [r7, #4]
 8010404:	33cc      	adds	r3, #204	; 0xcc
 8010406:	4a39      	ldr	r2, [pc, #228]	; (80104ec <problem_fetch+0xf1cc>)
 8010408:	6810      	ldr	r0, [r2, #0]
 801040a:	6018      	str	r0, [r3, #0]
			break;
 801040c:	f00a bcce 	b.w	801adac <problem_fetch+0x19a8c>
		case 517 :
			strcpy(p->name,"몰라여");
 8010410:	687b      	ldr	r3, [r7, #4]
 8010412:	337c      	adds	r3, #124	; 0x7c
 8010414:	4936      	ldr	r1, [pc, #216]	; (80104f0 <problem_fetch+0xf1d0>)
 8010416:	461a      	mov	r2, r3
 8010418:	460b      	mov	r3, r1
 801041a:	cb03      	ldmia	r3!, {r0, r1}
 801041c:	6010      	str	r0, [r2, #0]
 801041e:	6051      	str	r1, [r2, #4]
 8010420:	881b      	ldrh	r3, [r3, #0]
 8010422:	8113      	strh	r3, [r2, #8]
			p->moveSize = 7;
 8010424:	687b      	ldr	r3, [r7, #4]
 8010426:	2207      	movs	r2, #7
 8010428:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"B,C,A,G,C,E,I");
 801042a:	687b      	ldr	r3, [r7, #4]
 801042c:	3340      	adds	r3, #64	; 0x40
 801042e:	4a31      	ldr	r2, [pc, #196]	; (80104f4 <problem_fetch+0xf1d4>)
 8010430:	461c      	mov	r4, r3
 8010432:	4613      	mov	r3, r2
 8010434:	cb07      	ldmia	r3!, {r0, r1, r2}
 8010436:	6020      	str	r0, [r4, #0]
 8010438:	6061      	str	r1, [r4, #4]
 801043a:	60a2      	str	r2, [r4, #8]
 801043c:	881b      	ldrh	r3, [r3, #0]
 801043e:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"6,5,9,9,13,16,18");
 8010440:	687b      	ldr	r3, [r7, #4]
 8010442:	3304      	adds	r3, #4
 8010444:	4a2c      	ldr	r2, [pc, #176]	; (80104f8 <problem_fetch+0xf1d8>)
 8010446:	461d      	mov	r5, r3
 8010448:	4614      	mov	r4, r2
 801044a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801044c:	6028      	str	r0, [r5, #0]
 801044e:	6069      	str	r1, [r5, #4]
 8010450:	60aa      	str	r2, [r5, #8]
 8010452:	60eb      	str	r3, [r5, #12]
 8010454:	7823      	ldrb	r3, [r4, #0]
 8010456:	742b      	strb	r3, [r5, #16]
			strcpy(p->startFinish, "s,s,d,d,d,d,e");
 8010458:	687b      	ldr	r3, [r7, #4]
 801045a:	33d8      	adds	r3, #216	; 0xd8
 801045c:	4a27      	ldr	r2, [pc, #156]	; (80104fc <problem_fetch+0xf1dc>)
 801045e:	461c      	mov	r4, r3
 8010460:	4613      	mov	r3, r2
 8010462:	cb07      	ldmia	r3!, {r0, r1, r2}
 8010464:	6020      	str	r0, [r4, #0]
 8010466:	6061      	str	r1, [r4, #4]
 8010468:	60a2      	str	r2, [r4, #8]
 801046a:	881b      	ldrh	r3, [r3, #0]
 801046c:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade, "7A");
 801046e:	687b      	ldr	r3, [r7, #4]
 8010470:	33cc      	adds	r3, #204	; 0xcc
 8010472:	4a23      	ldr	r2, [pc, #140]	; (8010500 <problem_fetch+0xf1e0>)
 8010474:	8811      	ldrh	r1, [r2, #0]
 8010476:	7892      	ldrb	r2, [r2, #2]
 8010478:	8019      	strh	r1, [r3, #0]
 801047a:	709a      	strb	r2, [r3, #2]
			break;
 801047c:	f00a bc96 	b.w	801adac <problem_fetch+0x19a8c>
 8010480:	080266f8 	.word	0x080266f8
 8010484:	08026700 	.word	0x08026700
 8010488:	08026710 	.word	0x08026710
 801048c:	08021494 	.word	0x08021494
 8010490:	08021370 	.word	0x08021370
 8010494:	08026724 	.word	0x08026724
 8010498:	08026734 	.word	0x08026734
 801049c:	08026740 	.word	0x08026740
 80104a0:	08021910 	.word	0x08021910
 80104a4:	08026750 	.word	0x08026750
 80104a8:	08026760 	.word	0x08026760
 80104ac:	08026770 	.word	0x08026770
 80104b0:	080212b0 	.word	0x080212b0
 80104b4:	08026784 	.word	0x08026784
 80104b8:	08026788 	.word	0x08026788
 80104bc:	08026790 	.word	0x08026790
 80104c0:	08022028 	.word	0x08022028
 80104c4:	08021424 	.word	0x08021424
 80104c8:	0802679c 	.word	0x0802679c
 80104cc:	08021780 	.word	0x08021780
 80104d0:	080267a4 	.word	0x080267a4
 80104d4:	08021320 	.word	0x08021320
 80104d8:	0802158c 	.word	0x0802158c
 80104dc:	080267b0 	.word	0x080267b0
 80104e0:	080267c4 	.word	0x080267c4
 80104e4:	080267d0 	.word	0x080267d0
 80104e8:	0802139c 	.word	0x0802139c
 80104ec:	080213a8 	.word	0x080213a8
 80104f0:	080267e0 	.word	0x080267e0
 80104f4:	080267ec 	.word	0x080267ec
 80104f8:	080267fc 	.word	0x080267fc
 80104fc:	080212a0 	.word	0x080212a0
 8010500:	080212f4 	.word	0x080212f4
		case 518 :
			strcpy(p->name,"SPALLA&AMP;PIATTA");
 8010504:	687b      	ldr	r3, [r7, #4]
 8010506:	337c      	adds	r3, #124	; 0x7c
 8010508:	4abf      	ldr	r2, [pc, #764]	; (8010808 <problem_fetch+0xf4e8>)
 801050a:	461d      	mov	r5, r3
 801050c:	4614      	mov	r4, r2
 801050e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8010510:	6028      	str	r0, [r5, #0]
 8010512:	6069      	str	r1, [r5, #4]
 8010514:	60aa      	str	r2, [r5, #8]
 8010516:	60eb      	str	r3, [r5, #12]
 8010518:	8823      	ldrh	r3, [r4, #0]
 801051a:	822b      	strh	r3, [r5, #16]
			p->moveSize = 7;
 801051c:	687b      	ldr	r3, [r7, #4]
 801051e:	2207      	movs	r2, #7
 8010520:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"G,H,K,F,G,D,D");
 8010522:	687b      	ldr	r3, [r7, #4]
 8010524:	3340      	adds	r3, #64	; 0x40
 8010526:	4ab9      	ldr	r2, [pc, #740]	; (801080c <problem_fetch+0xf4ec>)
 8010528:	461c      	mov	r4, r3
 801052a:	4613      	mov	r3, r2
 801052c:	cb07      	ldmia	r3!, {r0, r1, r2}
 801052e:	6020      	str	r0, [r4, #0]
 8010530:	6061      	str	r1, [r4, #4]
 8010532:	60a2      	str	r2, [r4, #8]
 8010534:	881b      	ldrh	r3, [r3, #0]
 8010536:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,5,9,11,14,15,18");
 8010538:	687b      	ldr	r3, [r7, #4]
 801053a:	3304      	adds	r3, #4
 801053c:	4ab4      	ldr	r2, [pc, #720]	; (8010810 <problem_fetch+0xf4f0>)
 801053e:	461d      	mov	r5, r3
 8010540:	4614      	mov	r4, r2
 8010542:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8010544:	6028      	str	r0, [r5, #0]
 8010546:	6069      	str	r1, [r5, #4]
 8010548:	60aa      	str	r2, [r5, #8]
 801054a:	60eb      	str	r3, [r5, #12]
 801054c:	8823      	ldrh	r3, [r4, #0]
 801054e:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish, "s,s,d,d,d,d,e");
 8010550:	687b      	ldr	r3, [r7, #4]
 8010552:	33d8      	adds	r3, #216	; 0xd8
 8010554:	4aaf      	ldr	r2, [pc, #700]	; (8010814 <problem_fetch+0xf4f4>)
 8010556:	461c      	mov	r4, r3
 8010558:	4613      	mov	r3, r2
 801055a:	cb07      	ldmia	r3!, {r0, r1, r2}
 801055c:	6020      	str	r0, [r4, #0]
 801055e:	6061      	str	r1, [r4, #4]
 8010560:	60a2      	str	r2, [r4, #8]
 8010562:	881b      	ldrh	r3, [r3, #0]
 8010564:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade, "7A+");
 8010566:	687b      	ldr	r3, [r7, #4]
 8010568:	33cc      	adds	r3, #204	; 0xcc
 801056a:	4aab      	ldr	r2, [pc, #684]	; (8010818 <problem_fetch+0xf4f8>)
 801056c:	6810      	ldr	r0, [r2, #0]
 801056e:	6018      	str	r0, [r3, #0]
			break;
 8010570:	f00a bc1c 	b.w	801adac <problem_fetch+0x19a8c>
		case 519 :
			strcpy(p->name,"SUCK IT ELLIOTT");
 8010574:	687b      	ldr	r3, [r7, #4]
 8010576:	337c      	adds	r3, #124	; 0x7c
 8010578:	4aa8      	ldr	r2, [pc, #672]	; (801081c <problem_fetch+0xf4fc>)
 801057a:	461c      	mov	r4, r3
 801057c:	4615      	mov	r5, r2
 801057e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010580:	6020      	str	r0, [r4, #0]
 8010582:	6061      	str	r1, [r4, #4]
 8010584:	60a2      	str	r2, [r4, #8]
 8010586:	60e3      	str	r3, [r4, #12]
			p->moveSize = 6;
 8010588:	687b      	ldr	r3, [r7, #4]
 801058a:	2206      	movs	r2, #6
 801058c:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"G,E,H,D,D,D");
 801058e:	687b      	ldr	r3, [r7, #4]
 8010590:	3340      	adds	r3, #64	; 0x40
 8010592:	4aa3      	ldr	r2, [pc, #652]	; (8010820 <problem_fetch+0xf500>)
 8010594:	461c      	mov	r4, r3
 8010596:	4613      	mov	r3, r2
 8010598:	cb07      	ldmia	r3!, {r0, r1, r2}
 801059a:	6020      	str	r0, [r4, #0]
 801059c:	6061      	str	r1, [r4, #4]
 801059e:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,6,8,11,15,18");
 80105a0:	687b      	ldr	r3, [r7, #4]
 80105a2:	3304      	adds	r3, #4
 80105a4:	4a9f      	ldr	r2, [pc, #636]	; (8010824 <problem_fetch+0xf504>)
 80105a6:	461c      	mov	r4, r3
 80105a8:	4613      	mov	r3, r2
 80105aa:	cb07      	ldmia	r3!, {r0, r1, r2}
 80105ac:	6020      	str	r0, [r4, #0]
 80105ae:	6061      	str	r1, [r4, #4]
 80105b0:	60a2      	str	r2, [r4, #8]
 80105b2:	881a      	ldrh	r2, [r3, #0]
 80105b4:	789b      	ldrb	r3, [r3, #2]
 80105b6:	81a2      	strh	r2, [r4, #12]
 80105b8:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish, "s,s,d,d,d,e");
 80105ba:	687b      	ldr	r3, [r7, #4]
 80105bc:	33d8      	adds	r3, #216	; 0xd8
 80105be:	4a9a      	ldr	r2, [pc, #616]	; (8010828 <problem_fetch+0xf508>)
 80105c0:	461c      	mov	r4, r3
 80105c2:	4613      	mov	r3, r2
 80105c4:	cb07      	ldmia	r3!, {r0, r1, r2}
 80105c6:	6020      	str	r0, [r4, #0]
 80105c8:	6061      	str	r1, [r4, #4]
 80105ca:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade, "7A");
 80105cc:	687b      	ldr	r3, [r7, #4]
 80105ce:	33cc      	adds	r3, #204	; 0xcc
 80105d0:	4a96      	ldr	r2, [pc, #600]	; (801082c <problem_fetch+0xf50c>)
 80105d2:	8811      	ldrh	r1, [r2, #0]
 80105d4:	7892      	ldrb	r2, [r2, #2]
 80105d6:	8019      	strh	r1, [r3, #0]
 80105d8:	709a      	strb	r2, [r3, #2]
			break;
 80105da:	f00a bbe7 	b.w	801adac <problem_fetch+0x19a8c>
		case 52 :
			strcpy(p->name,"FA");
 80105de:	687b      	ldr	r3, [r7, #4]
 80105e0:	337c      	adds	r3, #124	; 0x7c
 80105e2:	4a93      	ldr	r2, [pc, #588]	; (8010830 <problem_fetch+0xf510>)
 80105e4:	8811      	ldrh	r1, [r2, #0]
 80105e6:	7892      	ldrb	r2, [r2, #2]
 80105e8:	8019      	strh	r1, [r3, #0]
 80105ea:	709a      	strb	r2, [r3, #2]
			p->moveSize = 6;
 80105ec:	687b      	ldr	r3, [r7, #4]
 80105ee:	2206      	movs	r2, #6
 80105f0:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"G,E,E,H,E,D");
 80105f2:	687b      	ldr	r3, [r7, #4]
 80105f4:	3340      	adds	r3, #64	; 0x40
 80105f6:	4a8f      	ldr	r2, [pc, #572]	; (8010834 <problem_fetch+0xf514>)
 80105f8:	461c      	mov	r4, r3
 80105fa:	4613      	mov	r3, r2
 80105fc:	cb07      	ldmia	r3!, {r0, r1, r2}
 80105fe:	6020      	str	r0, [r4, #0]
 8010600:	6061      	str	r1, [r4, #4]
 8010602:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,8,9,13,16,18");
 8010604:	687b      	ldr	r3, [r7, #4]
 8010606:	3304      	adds	r3, #4
 8010608:	4a8b      	ldr	r2, [pc, #556]	; (8010838 <problem_fetch+0xf518>)
 801060a:	461c      	mov	r4, r3
 801060c:	4613      	mov	r3, r2
 801060e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8010610:	6020      	str	r0, [r4, #0]
 8010612:	6061      	str	r1, [r4, #4]
 8010614:	60a2      	str	r2, [r4, #8]
 8010616:	881a      	ldrh	r2, [r3, #0]
 8010618:	789b      	ldrb	r3, [r3, #2]
 801061a:	81a2      	strh	r2, [r4, #12]
 801061c:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish, "s,d,d,d,d,e");
 801061e:	687b      	ldr	r3, [r7, #4]
 8010620:	33d8      	adds	r3, #216	; 0xd8
 8010622:	4a86      	ldr	r2, [pc, #536]	; (801083c <problem_fetch+0xf51c>)
 8010624:	461c      	mov	r4, r3
 8010626:	4613      	mov	r3, r2
 8010628:	cb07      	ldmia	r3!, {r0, r1, r2}
 801062a:	6020      	str	r0, [r4, #0]
 801062c:	6061      	str	r1, [r4, #4]
 801062e:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade, "6B+");
 8010630:	687b      	ldr	r3, [r7, #4]
 8010632:	33cc      	adds	r3, #204	; 0xcc
 8010634:	4a82      	ldr	r2, [pc, #520]	; (8010840 <problem_fetch+0xf520>)
 8010636:	6810      	ldr	r0, [r2, #0]
 8010638:	6018      	str	r0, [r3, #0]
			break;
 801063a:	f00a bbb7 	b.w	801adac <problem_fetch+0x19a8c>
		case 520 :
			strcpy(p->name,"SIRIUS BLACK");
 801063e:	687b      	ldr	r3, [r7, #4]
 8010640:	337c      	adds	r3, #124	; 0x7c
 8010642:	4a80      	ldr	r2, [pc, #512]	; (8010844 <problem_fetch+0xf524>)
 8010644:	461c      	mov	r4, r3
 8010646:	4613      	mov	r3, r2
 8010648:	cb07      	ldmia	r3!, {r0, r1, r2}
 801064a:	6020      	str	r0, [r4, #0]
 801064c:	6061      	str	r1, [r4, #4]
 801064e:	60a2      	str	r2, [r4, #8]
 8010650:	781b      	ldrb	r3, [r3, #0]
 8010652:	7323      	strb	r3, [r4, #12]
			p->moveSize = 7;
 8010654:	687b      	ldr	r3, [r7, #4]
 8010656:	2207      	movs	r2, #7
 8010658:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"C,H,E,F,J,C,D");
 801065a:	687b      	ldr	r3, [r7, #4]
 801065c:	3340      	adds	r3, #64	; 0x40
 801065e:	4a7a      	ldr	r2, [pc, #488]	; (8010848 <problem_fetch+0xf528>)
 8010660:	461c      	mov	r4, r3
 8010662:	4613      	mov	r3, r2
 8010664:	cb07      	ldmia	r3!, {r0, r1, r2}
 8010666:	6020      	str	r0, [r4, #0]
 8010668:	6061      	str	r1, [r4, #4]
 801066a:	60a2      	str	r2, [r4, #8]
 801066c:	881b      	ldrh	r3, [r3, #0]
 801066e:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,5,9,11,5,13,18");
 8010670:	687b      	ldr	r3, [r7, #4]
 8010672:	3304      	adds	r3, #4
 8010674:	4a75      	ldr	r2, [pc, #468]	; (801084c <problem_fetch+0xf52c>)
 8010676:	461d      	mov	r5, r3
 8010678:	4614      	mov	r4, r2
 801067a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801067c:	6028      	str	r0, [r5, #0]
 801067e:	6069      	str	r1, [r5, #4]
 8010680:	60aa      	str	r2, [r5, #8]
 8010682:	60eb      	str	r3, [r5, #12]
 8010684:	7823      	ldrb	r3, [r4, #0]
 8010686:	742b      	strb	r3, [r5, #16]
			strcpy(p->startFinish, "s,s,d,d,d,d,e");
 8010688:	687b      	ldr	r3, [r7, #4]
 801068a:	33d8      	adds	r3, #216	; 0xd8
 801068c:	4a61      	ldr	r2, [pc, #388]	; (8010814 <problem_fetch+0xf4f4>)
 801068e:	461c      	mov	r4, r3
 8010690:	4613      	mov	r3, r2
 8010692:	cb07      	ldmia	r3!, {r0, r1, r2}
 8010694:	6020      	str	r0, [r4, #0]
 8010696:	6061      	str	r1, [r4, #4]
 8010698:	60a2      	str	r2, [r4, #8]
 801069a:	881b      	ldrh	r3, [r3, #0]
 801069c:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade, "7A");
 801069e:	687b      	ldr	r3, [r7, #4]
 80106a0:	33cc      	adds	r3, #204	; 0xcc
 80106a2:	4a62      	ldr	r2, [pc, #392]	; (801082c <problem_fetch+0xf50c>)
 80106a4:	8811      	ldrh	r1, [r2, #0]
 80106a6:	7892      	ldrb	r2, [r2, #2]
 80106a8:	8019      	strh	r1, [r3, #0]
 80106aa:	709a      	strb	r2, [r3, #2]
			break;
 80106ac:	f00a bb7e 	b.w	801adac <problem_fetch+0x19a8c>
		case 521 :
			strcpy(p->name,"REAL SIRIUS BLACK");
 80106b0:	687b      	ldr	r3, [r7, #4]
 80106b2:	337c      	adds	r3, #124	; 0x7c
 80106b4:	4a66      	ldr	r2, [pc, #408]	; (8010850 <problem_fetch+0xf530>)
 80106b6:	461d      	mov	r5, r3
 80106b8:	4614      	mov	r4, r2
 80106ba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80106bc:	6028      	str	r0, [r5, #0]
 80106be:	6069      	str	r1, [r5, #4]
 80106c0:	60aa      	str	r2, [r5, #8]
 80106c2:	60eb      	str	r3, [r5, #12]
 80106c4:	8823      	ldrh	r3, [r4, #0]
 80106c6:	822b      	strh	r3, [r5, #16]
			p->moveSize = 6;
 80106c8:	687b      	ldr	r3, [r7, #4]
 80106ca:	2206      	movs	r2, #6
 80106cc:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"C,E,E,F,C,D");
 80106ce:	687b      	ldr	r3, [r7, #4]
 80106d0:	3340      	adds	r3, #64	; 0x40
 80106d2:	4a60      	ldr	r2, [pc, #384]	; (8010854 <problem_fetch+0xf534>)
 80106d4:	461c      	mov	r4, r3
 80106d6:	4613      	mov	r3, r2
 80106d8:	cb07      	ldmia	r3!, {r0, r1, r2}
 80106da:	6020      	str	r0, [r4, #0]
 80106dc:	6061      	str	r1, [r4, #4]
 80106de:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,6,9,11,13,18");
 80106e0:	687b      	ldr	r3, [r7, #4]
 80106e2:	3304      	adds	r3, #4
 80106e4:	4a5c      	ldr	r2, [pc, #368]	; (8010858 <problem_fetch+0xf538>)
 80106e6:	461c      	mov	r4, r3
 80106e8:	4613      	mov	r3, r2
 80106ea:	cb07      	ldmia	r3!, {r0, r1, r2}
 80106ec:	6020      	str	r0, [r4, #0]
 80106ee:	6061      	str	r1, [r4, #4]
 80106f0:	60a2      	str	r2, [r4, #8]
 80106f2:	881a      	ldrh	r2, [r3, #0]
 80106f4:	789b      	ldrb	r3, [r3, #2]
 80106f6:	81a2      	strh	r2, [r4, #12]
 80106f8:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish, "s,s,d,d,d,e");
 80106fa:	687b      	ldr	r3, [r7, #4]
 80106fc:	33d8      	adds	r3, #216	; 0xd8
 80106fe:	4a4a      	ldr	r2, [pc, #296]	; (8010828 <problem_fetch+0xf508>)
 8010700:	461c      	mov	r4, r3
 8010702:	4613      	mov	r3, r2
 8010704:	cb07      	ldmia	r3!, {r0, r1, r2}
 8010706:	6020      	str	r0, [r4, #0]
 8010708:	6061      	str	r1, [r4, #4]
 801070a:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade, "7A");
 801070c:	687b      	ldr	r3, [r7, #4]
 801070e:	33cc      	adds	r3, #204	; 0xcc
 8010710:	4a46      	ldr	r2, [pc, #280]	; (801082c <problem_fetch+0xf50c>)
 8010712:	8811      	ldrh	r1, [r2, #0]
 8010714:	7892      	ldrb	r2, [r2, #2]
 8010716:	8019      	strh	r1, [r3, #0]
 8010718:	709a      	strb	r2, [r3, #2]
			break;
 801071a:	f00a bb47 	b.w	801adac <problem_fetch+0x19a8c>
		case 522 :
			strcpy(p->name,"THE REAL SIRIUS BLACK");
 801071e:	687b      	ldr	r3, [r7, #4]
 8010720:	337c      	adds	r3, #124	; 0x7c
 8010722:	4a4e      	ldr	r2, [pc, #312]	; (801085c <problem_fetch+0xf53c>)
 8010724:	461d      	mov	r5, r3
 8010726:	4614      	mov	r4, r2
 8010728:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801072a:	6028      	str	r0, [r5, #0]
 801072c:	6069      	str	r1, [r5, #4]
 801072e:	60aa      	str	r2, [r5, #8]
 8010730:	60eb      	str	r3, [r5, #12]
 8010732:	6820      	ldr	r0, [r4, #0]
 8010734:	6128      	str	r0, [r5, #16]
 8010736:	88a3      	ldrh	r3, [r4, #4]
 8010738:	82ab      	strh	r3, [r5, #20]
			p->moveSize = 7;
 801073a:	687b      	ldr	r3, [r7, #4]
 801073c:	2207      	movs	r2, #7
 801073e:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"C,E,J,E,F,C,D");
 8010740:	687b      	ldr	r3, [r7, #4]
 8010742:	3340      	adds	r3, #64	; 0x40
 8010744:	4a46      	ldr	r2, [pc, #280]	; (8010860 <problem_fetch+0xf540>)
 8010746:	461c      	mov	r4, r3
 8010748:	4613      	mov	r3, r2
 801074a:	cb07      	ldmia	r3!, {r0, r1, r2}
 801074c:	6020      	str	r0, [r4, #0]
 801074e:	6061      	str	r1, [r4, #4]
 8010750:	60a2      	str	r2, [r4, #8]
 8010752:	881b      	ldrh	r3, [r3, #0]
 8010754:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,6,5,9,11,13,18");
 8010756:	687b      	ldr	r3, [r7, #4]
 8010758:	3304      	adds	r3, #4
 801075a:	4a42      	ldr	r2, [pc, #264]	; (8010864 <problem_fetch+0xf544>)
 801075c:	461d      	mov	r5, r3
 801075e:	4614      	mov	r4, r2
 8010760:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8010762:	6028      	str	r0, [r5, #0]
 8010764:	6069      	str	r1, [r5, #4]
 8010766:	60aa      	str	r2, [r5, #8]
 8010768:	60eb      	str	r3, [r5, #12]
 801076a:	7823      	ldrb	r3, [r4, #0]
 801076c:	742b      	strb	r3, [r5, #16]
			strcpy(p->startFinish, "s,s,d,d,d,d,e");
 801076e:	687b      	ldr	r3, [r7, #4]
 8010770:	33d8      	adds	r3, #216	; 0xd8
 8010772:	4a28      	ldr	r2, [pc, #160]	; (8010814 <problem_fetch+0xf4f4>)
 8010774:	461c      	mov	r4, r3
 8010776:	4613      	mov	r3, r2
 8010778:	cb07      	ldmia	r3!, {r0, r1, r2}
 801077a:	6020      	str	r0, [r4, #0]
 801077c:	6061      	str	r1, [r4, #4]
 801077e:	60a2      	str	r2, [r4, #8]
 8010780:	881b      	ldrh	r3, [r3, #0]
 8010782:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade, "7A");
 8010784:	687b      	ldr	r3, [r7, #4]
 8010786:	33cc      	adds	r3, #204	; 0xcc
 8010788:	4a28      	ldr	r2, [pc, #160]	; (801082c <problem_fetch+0xf50c>)
 801078a:	8811      	ldrh	r1, [r2, #0]
 801078c:	7892      	ldrb	r2, [r2, #2]
 801078e:	8019      	strh	r1, [r3, #0]
 8010790:	709a      	strb	r2, [r3, #2]
			break;
 8010792:	f00a bb0b 	b.w	801adac <problem_fetch+0x19a8c>
		case 523 :
			strcpy(p->name,"BACK IN ACTION");
 8010796:	687b      	ldr	r3, [r7, #4]
 8010798:	337c      	adds	r3, #124	; 0x7c
 801079a:	4a33      	ldr	r2, [pc, #204]	; (8010868 <problem_fetch+0xf548>)
 801079c:	461c      	mov	r4, r3
 801079e:	4613      	mov	r3, r2
 80107a0:	cb07      	ldmia	r3!, {r0, r1, r2}
 80107a2:	6020      	str	r0, [r4, #0]
 80107a4:	6061      	str	r1, [r4, #4]
 80107a6:	60a2      	str	r2, [r4, #8]
 80107a8:	881a      	ldrh	r2, [r3, #0]
 80107aa:	789b      	ldrb	r3, [r3, #2]
 80107ac:	81a2      	strh	r2, [r4, #12]
 80107ae:	73a3      	strb	r3, [r4, #14]
			p->moveSize = 8;
 80107b0:	687b      	ldr	r3, [r7, #4]
 80107b2:	2208      	movs	r2, #8
 80107b4:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"C,E,E,B,E,C,E,D");
 80107b6:	687b      	ldr	r3, [r7, #4]
 80107b8:	3340      	adds	r3, #64	; 0x40
 80107ba:	4a2c      	ldr	r2, [pc, #176]	; (801086c <problem_fetch+0xf54c>)
 80107bc:	461c      	mov	r4, r3
 80107be:	4615      	mov	r5, r2
 80107c0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80107c2:	6020      	str	r0, [r4, #0]
 80107c4:	6061      	str	r1, [r4, #4]
 80107c6:	60a2      	str	r2, [r4, #8]
 80107c8:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,6,8,10,12,13,16,18");
 80107ca:	687b      	ldr	r3, [r7, #4]
 80107cc:	3304      	adds	r3, #4
 80107ce:	4a28      	ldr	r2, [pc, #160]	; (8010870 <problem_fetch+0xf550>)
 80107d0:	461d      	mov	r5, r3
 80107d2:	4614      	mov	r4, r2
 80107d4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80107d6:	6028      	str	r0, [r5, #0]
 80107d8:	6069      	str	r1, [r5, #4]
 80107da:	60aa      	str	r2, [r5, #8]
 80107dc:	60eb      	str	r3, [r5, #12]
 80107de:	6820      	ldr	r0, [r4, #0]
 80107e0:	6128      	str	r0, [r5, #16]
 80107e2:	7923      	ldrb	r3, [r4, #4]
 80107e4:	752b      	strb	r3, [r5, #20]
			strcpy(p->startFinish, "s,s,d,d,d,d,d,e");
 80107e6:	687b      	ldr	r3, [r7, #4]
 80107e8:	33d8      	adds	r3, #216	; 0xd8
 80107ea:	4a22      	ldr	r2, [pc, #136]	; (8010874 <problem_fetch+0xf554>)
 80107ec:	461c      	mov	r4, r3
 80107ee:	4615      	mov	r5, r2
 80107f0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80107f2:	6020      	str	r0, [r4, #0]
 80107f4:	6061      	str	r1, [r4, #4]
 80107f6:	60a2      	str	r2, [r4, #8]
 80107f8:	60e3      	str	r3, [r4, #12]
			strcpy(p->grade, "6B+");
 80107fa:	687b      	ldr	r3, [r7, #4]
 80107fc:	33cc      	adds	r3, #204	; 0xcc
 80107fe:	4a10      	ldr	r2, [pc, #64]	; (8010840 <problem_fetch+0xf520>)
 8010800:	6810      	ldr	r0, [r2, #0]
 8010802:	6018      	str	r0, [r3, #0]
			break;
 8010804:	f00a bad2 	b.w	801adac <problem_fetch+0x19a8c>
 8010808:	08026810 	.word	0x08026810
 801080c:	08026824 	.word	0x08026824
 8010810:	08026834 	.word	0x08026834
 8010814:	080212a0 	.word	0x080212a0
 8010818:	08021424 	.word	0x08021424
 801081c:	08026848 	.word	0x08026848
 8010820:	08026858 	.word	0x08026858
 8010824:	08026864 	.word	0x08026864
 8010828:	08021910 	.word	0x08021910
 801082c:	080212f4 	.word	0x080212f4
 8010830:	08026874 	.word	0x08026874
 8010834:	08026878 	.word	0x08026878
 8010838:	08025060 	.word	0x08025060
 801083c:	0802139c 	.word	0x0802139c
 8010840:	080212b0 	.word	0x080212b0
 8010844:	08026884 	.word	0x08026884
 8010848:	08026894 	.word	0x08026894
 801084c:	080268a4 	.word	0x080268a4
 8010850:	080268b8 	.word	0x080268b8
 8010854:	080268cc 	.word	0x080268cc
 8010858:	080268d8 	.word	0x080268d8
 801085c:	080268e8 	.word	0x080268e8
 8010860:	08026900 	.word	0x08026900
 8010864:	08026910 	.word	0x08026910
 8010868:	08026924 	.word	0x08026924
 801086c:	08026934 	.word	0x08026934
 8010870:	08026944 	.word	0x08026944
 8010874:	080214cc 	.word	0x080214cc
		case 524 :
			strcpy(p->name,"MÄX 2");
 8010878:	687b      	ldr	r3, [r7, #4]
 801087a:	337c      	adds	r3, #124	; 0x7c
 801087c:	4aa7      	ldr	r2, [pc, #668]	; (8010b1c <problem_fetch+0xf7fc>)
 801087e:	6810      	ldr	r0, [r2, #0]
 8010880:	6018      	str	r0, [r3, #0]
 8010882:	8891      	ldrh	r1, [r2, #4]
 8010884:	7992      	ldrb	r2, [r2, #6]
 8010886:	8099      	strh	r1, [r3, #4]
 8010888:	719a      	strb	r2, [r3, #6]
			p->moveSize = 11;
 801088a:	687b      	ldr	r3, [r7, #4]
 801088c:	220b      	movs	r2, #11
 801088e:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"J,G,H,G,F,C,D,A,C,A,A");
 8010890:	687b      	ldr	r3, [r7, #4]
 8010892:	3340      	adds	r3, #64	; 0x40
 8010894:	4aa2      	ldr	r2, [pc, #648]	; (8010b20 <problem_fetch+0xf800>)
 8010896:	461d      	mov	r5, r3
 8010898:	4614      	mov	r4, r2
 801089a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801089c:	6028      	str	r0, [r5, #0]
 801089e:	6069      	str	r1, [r5, #4]
 80108a0:	60aa      	str	r2, [r5, #8]
 80108a2:	60eb      	str	r3, [r5, #12]
 80108a4:	6820      	ldr	r0, [r4, #0]
 80108a6:	6128      	str	r0, [r5, #16]
 80108a8:	88a3      	ldrh	r3, [r4, #4]
 80108aa:	82ab      	strh	r3, [r5, #20]
			strcpy(p->moveNumbers,"5,4,8,9,11,13,15,9,5,14,18");
 80108ac:	687b      	ldr	r3, [r7, #4]
 80108ae:	3304      	adds	r3, #4
 80108b0:	4a9c      	ldr	r2, [pc, #624]	; (8010b24 <problem_fetch+0xf804>)
 80108b2:	461d      	mov	r5, r3
 80108b4:	4614      	mov	r4, r2
 80108b6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80108b8:	6028      	str	r0, [r5, #0]
 80108ba:	6069      	str	r1, [r5, #4]
 80108bc:	60aa      	str	r2, [r5, #8]
 80108be:	60eb      	str	r3, [r5, #12]
 80108c0:	cc03      	ldmia	r4!, {r0, r1}
 80108c2:	6128      	str	r0, [r5, #16]
 80108c4:	6169      	str	r1, [r5, #20]
 80108c6:	8823      	ldrh	r3, [r4, #0]
 80108c8:	78a2      	ldrb	r2, [r4, #2]
 80108ca:	832b      	strh	r3, [r5, #24]
 80108cc:	4613      	mov	r3, r2
 80108ce:	76ab      	strb	r3, [r5, #26]
			strcpy(p->startFinish, "s,s,d,d,d,d,d,d,d,d,e");
 80108d0:	687b      	ldr	r3, [r7, #4]
 80108d2:	33d8      	adds	r3, #216	; 0xd8
 80108d4:	4a94      	ldr	r2, [pc, #592]	; (8010b28 <problem_fetch+0xf808>)
 80108d6:	461d      	mov	r5, r3
 80108d8:	4614      	mov	r4, r2
 80108da:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80108dc:	6028      	str	r0, [r5, #0]
 80108de:	6069      	str	r1, [r5, #4]
 80108e0:	60aa      	str	r2, [r5, #8]
 80108e2:	60eb      	str	r3, [r5, #12]
 80108e4:	6820      	ldr	r0, [r4, #0]
 80108e6:	6128      	str	r0, [r5, #16]
 80108e8:	88a3      	ldrh	r3, [r4, #4]
 80108ea:	82ab      	strh	r3, [r5, #20]
			strcpy(p->grade, "6B+");
 80108ec:	687b      	ldr	r3, [r7, #4]
 80108ee:	33cc      	adds	r3, #204	; 0xcc
 80108f0:	4a8e      	ldr	r2, [pc, #568]	; (8010b2c <problem_fetch+0xf80c>)
 80108f2:	6810      	ldr	r0, [r2, #0]
 80108f4:	6018      	str	r0, [r3, #0]
			break;
 80108f6:	f00a ba59 	b.w	801adac <problem_fetch+0x19a8c>
		case 525 :
			strcpy(p->name,"FIVEB PROJ 2");
 80108fa:	687b      	ldr	r3, [r7, #4]
 80108fc:	337c      	adds	r3, #124	; 0x7c
 80108fe:	4a8c      	ldr	r2, [pc, #560]	; (8010b30 <problem_fetch+0xf810>)
 8010900:	461c      	mov	r4, r3
 8010902:	4613      	mov	r3, r2
 8010904:	cb07      	ldmia	r3!, {r0, r1, r2}
 8010906:	6020      	str	r0, [r4, #0]
 8010908:	6061      	str	r1, [r4, #4]
 801090a:	60a2      	str	r2, [r4, #8]
 801090c:	781b      	ldrb	r3, [r3, #0]
 801090e:	7323      	strb	r3, [r4, #12]
			p->moveSize = 10;
 8010910:	687b      	ldr	r3, [r7, #4]
 8010912:	220a      	movs	r2, #10
 8010914:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"G,J,J,H,H,F,J,G,G,D");
 8010916:	687b      	ldr	r3, [r7, #4]
 8010918:	3340      	adds	r3, #64	; 0x40
 801091a:	4a86      	ldr	r2, [pc, #536]	; (8010b34 <problem_fetch+0xf814>)
 801091c:	461d      	mov	r5, r3
 801091e:	4614      	mov	r4, r2
 8010920:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8010922:	6028      	str	r0, [r5, #0]
 8010924:	6069      	str	r1, [r5, #4]
 8010926:	60aa      	str	r2, [r5, #8]
 8010928:	60eb      	str	r3, [r5, #12]
 801092a:	6820      	ldr	r0, [r4, #0]
 801092c:	6128      	str	r0, [r5, #16]
			strcpy(p->moveNumbers,"4,5,7,8,10,11,12,15,17,18");
 801092e:	687b      	ldr	r3, [r7, #4]
 8010930:	3304      	adds	r3, #4
 8010932:	4a81      	ldr	r2, [pc, #516]	; (8010b38 <problem_fetch+0xf818>)
 8010934:	461d      	mov	r5, r3
 8010936:	4614      	mov	r4, r2
 8010938:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801093a:	6028      	str	r0, [r5, #0]
 801093c:	6069      	str	r1, [r5, #4]
 801093e:	60aa      	str	r2, [r5, #8]
 8010940:	60eb      	str	r3, [r5, #12]
 8010942:	cc03      	ldmia	r4!, {r0, r1}
 8010944:	6128      	str	r0, [r5, #16]
 8010946:	6169      	str	r1, [r5, #20]
 8010948:	8823      	ldrh	r3, [r4, #0]
 801094a:	832b      	strh	r3, [r5, #24]
			strcpy(p->startFinish, "s,s,d,d,d,d,d,d,d,e");
 801094c:	687b      	ldr	r3, [r7, #4]
 801094e:	33d8      	adds	r3, #216	; 0xd8
 8010950:	4a7a      	ldr	r2, [pc, #488]	; (8010b3c <problem_fetch+0xf81c>)
 8010952:	461d      	mov	r5, r3
 8010954:	4614      	mov	r4, r2
 8010956:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8010958:	6028      	str	r0, [r5, #0]
 801095a:	6069      	str	r1, [r5, #4]
 801095c:	60aa      	str	r2, [r5, #8]
 801095e:	60eb      	str	r3, [r5, #12]
 8010960:	6820      	ldr	r0, [r4, #0]
 8010962:	6128      	str	r0, [r5, #16]
			strcpy(p->grade, "7A+");
 8010964:	687b      	ldr	r3, [r7, #4]
 8010966:	33cc      	adds	r3, #204	; 0xcc
 8010968:	4a75      	ldr	r2, [pc, #468]	; (8010b40 <problem_fetch+0xf820>)
 801096a:	6810      	ldr	r0, [r2, #0]
 801096c:	6018      	str	r0, [r3, #0]
			break;
 801096e:	f00a ba1d 	b.w	801adac <problem_fetch+0x19a8c>
		case 526 :
			strcpy(p->name,"BOOKA");
 8010972:	687b      	ldr	r3, [r7, #4]
 8010974:	337c      	adds	r3, #124	; 0x7c
 8010976:	4a73      	ldr	r2, [pc, #460]	; (8010b44 <problem_fetch+0xf824>)
 8010978:	6810      	ldr	r0, [r2, #0]
 801097a:	6018      	str	r0, [r3, #0]
 801097c:	8892      	ldrh	r2, [r2, #4]
 801097e:	809a      	strh	r2, [r3, #4]
			p->moveSize = 6;
 8010980:	687b      	ldr	r3, [r7, #4]
 8010982:	2206      	movs	r2, #6
 8010984:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"H,H,E,E,A,D");
 8010986:	687b      	ldr	r3, [r7, #4]
 8010988:	3340      	adds	r3, #64	; 0x40
 801098a:	4a6f      	ldr	r2, [pc, #444]	; (8010b48 <problem_fetch+0xf828>)
 801098c:	461c      	mov	r4, r3
 801098e:	4613      	mov	r3, r2
 8010990:	cb07      	ldmia	r3!, {r0, r1, r2}
 8010992:	6020      	str	r0, [r4, #0]
 8010994:	6061      	str	r1, [r4, #4]
 8010996:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,8,9,12,14,18");
 8010998:	687b      	ldr	r3, [r7, #4]
 801099a:	3304      	adds	r3, #4
 801099c:	4a6b      	ldr	r2, [pc, #428]	; (8010b4c <problem_fetch+0xf82c>)
 801099e:	461c      	mov	r4, r3
 80109a0:	4613      	mov	r3, r2
 80109a2:	cb07      	ldmia	r3!, {r0, r1, r2}
 80109a4:	6020      	str	r0, [r4, #0]
 80109a6:	6061      	str	r1, [r4, #4]
 80109a8:	60a2      	str	r2, [r4, #8]
 80109aa:	881a      	ldrh	r2, [r3, #0]
 80109ac:	789b      	ldrb	r3, [r3, #2]
 80109ae:	81a2      	strh	r2, [r4, #12]
 80109b0:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish, "s,d,d,d,d,e");
 80109b2:	687b      	ldr	r3, [r7, #4]
 80109b4:	33d8      	adds	r3, #216	; 0xd8
 80109b6:	4a66      	ldr	r2, [pc, #408]	; (8010b50 <problem_fetch+0xf830>)
 80109b8:	461c      	mov	r4, r3
 80109ba:	4613      	mov	r3, r2
 80109bc:	cb07      	ldmia	r3!, {r0, r1, r2}
 80109be:	6020      	str	r0, [r4, #0]
 80109c0:	6061      	str	r1, [r4, #4]
 80109c2:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade, "7A");
 80109c4:	687b      	ldr	r3, [r7, #4]
 80109c6:	33cc      	adds	r3, #204	; 0xcc
 80109c8:	4a62      	ldr	r2, [pc, #392]	; (8010b54 <problem_fetch+0xf834>)
 80109ca:	8811      	ldrh	r1, [r2, #0]
 80109cc:	7892      	ldrb	r2, [r2, #2]
 80109ce:	8019      	strh	r1, [r3, #0]
 80109d0:	709a      	strb	r2, [r3, #2]
			break;
 80109d2:	f00a b9eb 	b.w	801adac <problem_fetch+0x19a8c>
		case 527 :
			strcpy(p->name,"LOOK UP TO ME");
 80109d6:	687b      	ldr	r3, [r7, #4]
 80109d8:	337c      	adds	r3, #124	; 0x7c
 80109da:	4a5f      	ldr	r2, [pc, #380]	; (8010b58 <problem_fetch+0xf838>)
 80109dc:	461c      	mov	r4, r3
 80109de:	4613      	mov	r3, r2
 80109e0:	cb07      	ldmia	r3!, {r0, r1, r2}
 80109e2:	6020      	str	r0, [r4, #0]
 80109e4:	6061      	str	r1, [r4, #4]
 80109e6:	60a2      	str	r2, [r4, #8]
 80109e8:	881b      	ldrh	r3, [r3, #0]
 80109ea:	81a3      	strh	r3, [r4, #12]
			p->moveSize = 6;
 80109ec:	687b      	ldr	r3, [r7, #4]
 80109ee:	2206      	movs	r2, #6
 80109f0:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"J,G,H,G,G,D");
 80109f2:	687b      	ldr	r3, [r7, #4]
 80109f4:	3340      	adds	r3, #64	; 0x40
 80109f6:	4a59      	ldr	r2, [pc, #356]	; (8010b5c <problem_fetch+0xf83c>)
 80109f8:	461c      	mov	r4, r3
 80109fa:	4613      	mov	r3, r2
 80109fc:	cb07      	ldmia	r3!, {r0, r1, r2}
 80109fe:	6020      	str	r0, [r4, #0]
 8010a00:	6061      	str	r1, [r4, #4]
 8010a02:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,6,10,14,17,18");
 8010a04:	687b      	ldr	r3, [r7, #4]
 8010a06:	3304      	adds	r3, #4
 8010a08:	4a55      	ldr	r2, [pc, #340]	; (8010b60 <problem_fetch+0xf840>)
 8010a0a:	461c      	mov	r4, r3
 8010a0c:	4615      	mov	r5, r2
 8010a0e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010a10:	6020      	str	r0, [r4, #0]
 8010a12:	6061      	str	r1, [r4, #4]
 8010a14:	60a2      	str	r2, [r4, #8]
 8010a16:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish, "s,s,d,d,d,e");
 8010a18:	687b      	ldr	r3, [r7, #4]
 8010a1a:	33d8      	adds	r3, #216	; 0xd8
 8010a1c:	4a51      	ldr	r2, [pc, #324]	; (8010b64 <problem_fetch+0xf844>)
 8010a1e:	461c      	mov	r4, r3
 8010a20:	4613      	mov	r3, r2
 8010a22:	cb07      	ldmia	r3!, {r0, r1, r2}
 8010a24:	6020      	str	r0, [r4, #0]
 8010a26:	6061      	str	r1, [r4, #4]
 8010a28:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade, "6C+");
 8010a2a:	687b      	ldr	r3, [r7, #4]
 8010a2c:	33cc      	adds	r3, #204	; 0xcc
 8010a2e:	4a4e      	ldr	r2, [pc, #312]	; (8010b68 <problem_fetch+0xf848>)
 8010a30:	6810      	ldr	r0, [r2, #0]
 8010a32:	6018      	str	r0, [r3, #0]
			break;
 8010a34:	f00a b9ba 	b.w	801adac <problem_fetch+0x19a8c>
		case 528 :
			strcpy(p->name,"BUNNY GRAHAMS");
 8010a38:	687b      	ldr	r3, [r7, #4]
 8010a3a:	337c      	adds	r3, #124	; 0x7c
 8010a3c:	4a4b      	ldr	r2, [pc, #300]	; (8010b6c <problem_fetch+0xf84c>)
 8010a3e:	461c      	mov	r4, r3
 8010a40:	4613      	mov	r3, r2
 8010a42:	cb07      	ldmia	r3!, {r0, r1, r2}
 8010a44:	6020      	str	r0, [r4, #0]
 8010a46:	6061      	str	r1, [r4, #4]
 8010a48:	60a2      	str	r2, [r4, #8]
 8010a4a:	881b      	ldrh	r3, [r3, #0]
 8010a4c:	81a3      	strh	r3, [r4, #12]
			p->moveSize = 7;
 8010a4e:	687b      	ldr	r3, [r7, #4]
 8010a50:	2207      	movs	r2, #7
 8010a52:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"J,E,H,J,K,I,H");
 8010a54:	687b      	ldr	r3, [r7, #4]
 8010a56:	3340      	adds	r3, #64	; 0x40
 8010a58:	4a45      	ldr	r2, [pc, #276]	; (8010b70 <problem_fetch+0xf850>)
 8010a5a:	461c      	mov	r4, r3
 8010a5c:	4613      	mov	r3, r2
 8010a5e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8010a60:	6020      	str	r0, [r4, #0]
 8010a62:	6061      	str	r1, [r4, #4]
 8010a64:	60a2      	str	r2, [r4, #8]
 8010a66:	881b      	ldrh	r3, [r3, #0]
 8010a68:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,6,12,13,16,18,8");
 8010a6a:	687b      	ldr	r3, [r7, #4]
 8010a6c:	3304      	adds	r3, #4
 8010a6e:	4a41      	ldr	r2, [pc, #260]	; (8010b74 <problem_fetch+0xf854>)
 8010a70:	461d      	mov	r5, r3
 8010a72:	4614      	mov	r4, r2
 8010a74:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8010a76:	6028      	str	r0, [r5, #0]
 8010a78:	6069      	str	r1, [r5, #4]
 8010a7a:	60aa      	str	r2, [r5, #8]
 8010a7c:	60eb      	str	r3, [r5, #12]
 8010a7e:	8823      	ldrh	r3, [r4, #0]
 8010a80:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish, "s,s,d,d,d,e,d");
 8010a82:	687b      	ldr	r3, [r7, #4]
 8010a84:	33d8      	adds	r3, #216	; 0xd8
 8010a86:	4a3c      	ldr	r2, [pc, #240]	; (8010b78 <problem_fetch+0xf858>)
 8010a88:	461c      	mov	r4, r3
 8010a8a:	4613      	mov	r3, r2
 8010a8c:	cb07      	ldmia	r3!, {r0, r1, r2}
 8010a8e:	6020      	str	r0, [r4, #0]
 8010a90:	6061      	str	r1, [r4, #4]
 8010a92:	60a2      	str	r2, [r4, #8]
 8010a94:	881b      	ldrh	r3, [r3, #0]
 8010a96:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade, "6B+");
 8010a98:	687b      	ldr	r3, [r7, #4]
 8010a9a:	33cc      	adds	r3, #204	; 0xcc
 8010a9c:	4a23      	ldr	r2, [pc, #140]	; (8010b2c <problem_fetch+0xf80c>)
 8010a9e:	6810      	ldr	r0, [r2, #0]
 8010aa0:	6018      	str	r0, [r3, #0]
			break;
 8010aa2:	f00a b983 	b.w	801adac <problem_fetch+0x19a8c>
		case 529 :
			strcpy(p->name,"SNEAKER JUICE");
 8010aa6:	687b      	ldr	r3, [r7, #4]
 8010aa8:	337c      	adds	r3, #124	; 0x7c
 8010aaa:	4a34      	ldr	r2, [pc, #208]	; (8010b7c <problem_fetch+0xf85c>)
 8010aac:	461c      	mov	r4, r3
 8010aae:	4613      	mov	r3, r2
 8010ab0:	cb07      	ldmia	r3!, {r0, r1, r2}
 8010ab2:	6020      	str	r0, [r4, #0]
 8010ab4:	6061      	str	r1, [r4, #4]
 8010ab6:	60a2      	str	r2, [r4, #8]
 8010ab8:	881b      	ldrh	r3, [r3, #0]
 8010aba:	81a3      	strh	r3, [r4, #12]
			p->moveSize = 7;
 8010abc:	687b      	ldr	r3, [r7, #4]
 8010abe:	2207      	movs	r2, #7
 8010ac0:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"J,E,K,H,I,F,I");
 8010ac2:	687b      	ldr	r3, [r7, #4]
 8010ac4:	3340      	adds	r3, #64	; 0x40
 8010ac6:	4a2e      	ldr	r2, [pc, #184]	; (8010b80 <problem_fetch+0xf860>)
 8010ac8:	461c      	mov	r4, r3
 8010aca:	4613      	mov	r3, r2
 8010acc:	cb07      	ldmia	r3!, {r0, r1, r2}
 8010ace:	6020      	str	r0, [r4, #0]
 8010ad0:	6061      	str	r1, [r4, #4]
 8010ad2:	60a2      	str	r2, [r4, #8]
 8010ad4:	881b      	ldrh	r3, [r3, #0]
 8010ad6:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,6,14,16,18,11,10");
 8010ad8:	687b      	ldr	r3, [r7, #4]
 8010ada:	3304      	adds	r3, #4
 8010adc:	4a29      	ldr	r2, [pc, #164]	; (8010b84 <problem_fetch+0xf864>)
 8010ade:	461d      	mov	r5, r3
 8010ae0:	4614      	mov	r4, r2
 8010ae2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8010ae4:	6028      	str	r0, [r5, #0]
 8010ae6:	6069      	str	r1, [r5, #4]
 8010ae8:	60aa      	str	r2, [r5, #8]
 8010aea:	60eb      	str	r3, [r5, #12]
 8010aec:	8823      	ldrh	r3, [r4, #0]
 8010aee:	78a2      	ldrb	r2, [r4, #2]
 8010af0:	822b      	strh	r3, [r5, #16]
 8010af2:	4613      	mov	r3, r2
 8010af4:	74ab      	strb	r3, [r5, #18]
			strcpy(p->startFinish, "s,d,d,d,e,d,d");
 8010af6:	687b      	ldr	r3, [r7, #4]
 8010af8:	33d8      	adds	r3, #216	; 0xd8
 8010afa:	4a23      	ldr	r2, [pc, #140]	; (8010b88 <problem_fetch+0xf868>)
 8010afc:	461c      	mov	r4, r3
 8010afe:	4613      	mov	r3, r2
 8010b00:	cb07      	ldmia	r3!, {r0, r1, r2}
 8010b02:	6020      	str	r0, [r4, #0]
 8010b04:	6061      	str	r1, [r4, #4]
 8010b06:	60a2      	str	r2, [r4, #8]
 8010b08:	881b      	ldrh	r3, [r3, #0]
 8010b0a:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade, "6B+");
 8010b0c:	687b      	ldr	r3, [r7, #4]
 8010b0e:	33cc      	adds	r3, #204	; 0xcc
 8010b10:	4a06      	ldr	r2, [pc, #24]	; (8010b2c <problem_fetch+0xf80c>)
 8010b12:	6810      	ldr	r0, [r2, #0]
 8010b14:	6018      	str	r0, [r3, #0]
			break;
 8010b16:	f00a b949 	b.w	801adac <problem_fetch+0x19a8c>
 8010b1a:	bf00      	nop
 8010b1c:	0802695c 	.word	0x0802695c
 8010b20:	08026964 	.word	0x08026964
 8010b24:	0802697c 	.word	0x0802697c
 8010b28:	08022a18 	.word	0x08022a18
 8010b2c:	080212b0 	.word	0x080212b0
 8010b30:	08026998 	.word	0x08026998
 8010b34:	080269a8 	.word	0x080269a8
 8010b38:	080269bc 	.word	0x080269bc
 8010b3c:	080215fc 	.word	0x080215fc
 8010b40:	08021424 	.word	0x08021424
 8010b44:	080269d8 	.word	0x080269d8
 8010b48:	080269e0 	.word	0x080269e0
 8010b4c:	080251f8 	.word	0x080251f8
 8010b50:	0802139c 	.word	0x0802139c
 8010b54:	080212f4 	.word	0x080212f4
 8010b58:	080269ec 	.word	0x080269ec
 8010b5c:	080269fc 	.word	0x080269fc
 8010b60:	08026a08 	.word	0x08026a08
 8010b64:	08021910 	.word	0x08021910
 8010b68:	080213a8 	.word	0x080213a8
 8010b6c:	08026a18 	.word	0x08026a18
 8010b70:	08026a28 	.word	0x08026a28
 8010b74:	08026a38 	.word	0x08026a38
 8010b78:	08026a4c 	.word	0x08026a4c
 8010b7c:	08026a5c 	.word	0x08026a5c
 8010b80:	08026a6c 	.word	0x08026a6c
 8010b84:	08026a7c 	.word	0x08026a7c
 8010b88:	08026a90 	.word	0x08026a90
		case 53 :
			strcpy(p->name,"CALLA");
 8010b8c:	687b      	ldr	r3, [r7, #4]
 8010b8e:	337c      	adds	r3, #124	; 0x7c
 8010b90:	4abd      	ldr	r2, [pc, #756]	; (8010e88 <problem_fetch+0xfb68>)
 8010b92:	6810      	ldr	r0, [r2, #0]
 8010b94:	6018      	str	r0, [r3, #0]
 8010b96:	8892      	ldrh	r2, [r2, #4]
 8010b98:	809a      	strh	r2, [r3, #4]
			p->moveSize = 7;
 8010b9a:	687b      	ldr	r3, [r7, #4]
 8010b9c:	2207      	movs	r2, #7
 8010b9e:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"G,E,H,F,G,E,I");
 8010ba0:	687b      	ldr	r3, [r7, #4]
 8010ba2:	3340      	adds	r3, #64	; 0x40
 8010ba4:	4ab9      	ldr	r2, [pc, #740]	; (8010e8c <problem_fetch+0xfb6c>)
 8010ba6:	461c      	mov	r4, r3
 8010ba8:	4613      	mov	r3, r2
 8010baa:	cb07      	ldmia	r3!, {r0, r1, r2}
 8010bac:	6020      	str	r0, [r4, #0]
 8010bae:	6061      	str	r1, [r4, #4]
 8010bb0:	60a2      	str	r2, [r4, #8]
 8010bb2:	881b      	ldrh	r3, [r3, #0]
 8010bb4:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,8,10,13,14,16,18");
 8010bb6:	687b      	ldr	r3, [r7, #4]
 8010bb8:	3304      	adds	r3, #4
 8010bba:	4ab5      	ldr	r2, [pc, #724]	; (8010e90 <problem_fetch+0xfb70>)
 8010bbc:	461d      	mov	r5, r3
 8010bbe:	4614      	mov	r4, r2
 8010bc0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8010bc2:	6028      	str	r0, [r5, #0]
 8010bc4:	6069      	str	r1, [r5, #4]
 8010bc6:	60aa      	str	r2, [r5, #8]
 8010bc8:	60eb      	str	r3, [r5, #12]
 8010bca:	8823      	ldrh	r3, [r4, #0]
 8010bcc:	78a2      	ldrb	r2, [r4, #2]
 8010bce:	822b      	strh	r3, [r5, #16]
 8010bd0:	4613      	mov	r3, r2
 8010bd2:	74ab      	strb	r3, [r5, #18]
			strcpy(p->startFinish, "s,d,d,d,d,d,e");
 8010bd4:	687b      	ldr	r3, [r7, #4]
 8010bd6:	33d8      	adds	r3, #216	; 0xd8
 8010bd8:	4aae      	ldr	r2, [pc, #696]	; (8010e94 <problem_fetch+0xfb74>)
 8010bda:	461c      	mov	r4, r3
 8010bdc:	4613      	mov	r3, r2
 8010bde:	cb07      	ldmia	r3!, {r0, r1, r2}
 8010be0:	6020      	str	r0, [r4, #0]
 8010be2:	6061      	str	r1, [r4, #4]
 8010be4:	60a2      	str	r2, [r4, #8]
 8010be6:	881b      	ldrh	r3, [r3, #0]
 8010be8:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade, "6B+");
 8010bea:	687b      	ldr	r3, [r7, #4]
 8010bec:	33cc      	adds	r3, #204	; 0xcc
 8010bee:	4aaa      	ldr	r2, [pc, #680]	; (8010e98 <problem_fetch+0xfb78>)
 8010bf0:	6810      	ldr	r0, [r2, #0]
 8010bf2:	6018      	str	r0, [r3, #0]
			break;
 8010bf4:	f00a b8da 	b.w	801adac <problem_fetch+0x19a8c>
		case 530 :
			strcpy(p->name,"MOTIVATION");
 8010bf8:	687b      	ldr	r3, [r7, #4]
 8010bfa:	337c      	adds	r3, #124	; 0x7c
 8010bfc:	49a7      	ldr	r1, [pc, #668]	; (8010e9c <problem_fetch+0xfb7c>)
 8010bfe:	461a      	mov	r2, r3
 8010c00:	460b      	mov	r3, r1
 8010c02:	cb03      	ldmia	r3!, {r0, r1}
 8010c04:	6010      	str	r0, [r2, #0]
 8010c06:	6051      	str	r1, [r2, #4]
 8010c08:	8819      	ldrh	r1, [r3, #0]
 8010c0a:	789b      	ldrb	r3, [r3, #2]
 8010c0c:	8111      	strh	r1, [r2, #8]
 8010c0e:	7293      	strb	r3, [r2, #10]
			p->moveSize = 7;
 8010c10:	687b      	ldr	r3, [r7, #4]
 8010c12:	2207      	movs	r2, #7
 8010c14:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"H,J,E,E,B,B,D");
 8010c16:	687b      	ldr	r3, [r7, #4]
 8010c18:	3340      	adds	r3, #64	; 0x40
 8010c1a:	4aa1      	ldr	r2, [pc, #644]	; (8010ea0 <problem_fetch+0xfb80>)
 8010c1c:	461c      	mov	r4, r3
 8010c1e:	4613      	mov	r3, r2
 8010c20:	cb07      	ldmia	r3!, {r0, r1, r2}
 8010c22:	6020      	str	r0, [r4, #0]
 8010c24:	6061      	str	r1, [r4, #4]
 8010c26:	60a2      	str	r2, [r4, #8]
 8010c28:	881b      	ldrh	r3, [r3, #0]
 8010c2a:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,5,8,12,12,15,18");
 8010c2c:	687b      	ldr	r3, [r7, #4]
 8010c2e:	3304      	adds	r3, #4
 8010c30:	4a9c      	ldr	r2, [pc, #624]	; (8010ea4 <problem_fetch+0xfb84>)
 8010c32:	461d      	mov	r5, r3
 8010c34:	4614      	mov	r4, r2
 8010c36:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8010c38:	6028      	str	r0, [r5, #0]
 8010c3a:	6069      	str	r1, [r5, #4]
 8010c3c:	60aa      	str	r2, [r5, #8]
 8010c3e:	60eb      	str	r3, [r5, #12]
 8010c40:	8823      	ldrh	r3, [r4, #0]
 8010c42:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish, "s,s,d,d,d,d,e");
 8010c44:	687b      	ldr	r3, [r7, #4]
 8010c46:	33d8      	adds	r3, #216	; 0xd8
 8010c48:	4a97      	ldr	r2, [pc, #604]	; (8010ea8 <problem_fetch+0xfb88>)
 8010c4a:	461c      	mov	r4, r3
 8010c4c:	4613      	mov	r3, r2
 8010c4e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8010c50:	6020      	str	r0, [r4, #0]
 8010c52:	6061      	str	r1, [r4, #4]
 8010c54:	60a2      	str	r2, [r4, #8]
 8010c56:	881b      	ldrh	r3, [r3, #0]
 8010c58:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade, "6C+");
 8010c5a:	687b      	ldr	r3, [r7, #4]
 8010c5c:	33cc      	adds	r3, #204	; 0xcc
 8010c5e:	4a93      	ldr	r2, [pc, #588]	; (8010eac <problem_fetch+0xfb8c>)
 8010c60:	6810      	ldr	r0, [r2, #0]
 8010c62:	6018      	str	r0, [r3, #0]
			break;
 8010c64:	f00a b8a2 	b.w	801adac <problem_fetch+0x19a8c>
		case 531 :
			strcpy(p->name,"GET WITH IT");
 8010c68:	687b      	ldr	r3, [r7, #4]
 8010c6a:	337c      	adds	r3, #124	; 0x7c
 8010c6c:	4a90      	ldr	r2, [pc, #576]	; (8010eb0 <problem_fetch+0xfb90>)
 8010c6e:	461c      	mov	r4, r3
 8010c70:	4613      	mov	r3, r2
 8010c72:	cb07      	ldmia	r3!, {r0, r1, r2}
 8010c74:	6020      	str	r0, [r4, #0]
 8010c76:	6061      	str	r1, [r4, #4]
 8010c78:	60a2      	str	r2, [r4, #8]
			p->moveSize = 6;
 8010c7a:	687b      	ldr	r3, [r7, #4]
 8010c7c:	2206      	movs	r2, #6
 8010c7e:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"E,B,A,E,D,A");
 8010c80:	687b      	ldr	r3, [r7, #4]
 8010c82:	3340      	adds	r3, #64	; 0x40
 8010c84:	4a8b      	ldr	r2, [pc, #556]	; (8010eb4 <problem_fetch+0xfb94>)
 8010c86:	461c      	mov	r4, r3
 8010c88:	4613      	mov	r3, r2
 8010c8a:	cb07      	ldmia	r3!, {r0, r1, r2}
 8010c8c:	6020      	str	r0, [r4, #0]
 8010c8e:	6061      	str	r1, [r4, #4]
 8010c90:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"6,12,14,8,18,9");
 8010c92:	687b      	ldr	r3, [r7, #4]
 8010c94:	3304      	adds	r3, #4
 8010c96:	4a88      	ldr	r2, [pc, #544]	; (8010eb8 <problem_fetch+0xfb98>)
 8010c98:	461c      	mov	r4, r3
 8010c9a:	4613      	mov	r3, r2
 8010c9c:	cb07      	ldmia	r3!, {r0, r1, r2}
 8010c9e:	6020      	str	r0, [r4, #0]
 8010ca0:	6061      	str	r1, [r4, #4]
 8010ca2:	60a2      	str	r2, [r4, #8]
 8010ca4:	881a      	ldrh	r2, [r3, #0]
 8010ca6:	789b      	ldrb	r3, [r3, #2]
 8010ca8:	81a2      	strh	r2, [r4, #12]
 8010caa:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish, "s,d,d,d,e,d");
 8010cac:	687b      	ldr	r3, [r7, #4]
 8010cae:	33d8      	adds	r3, #216	; 0xd8
 8010cb0:	4a82      	ldr	r2, [pc, #520]	; (8010ebc <problem_fetch+0xfb9c>)
 8010cb2:	461c      	mov	r4, r3
 8010cb4:	4613      	mov	r3, r2
 8010cb6:	cb07      	ldmia	r3!, {r0, r1, r2}
 8010cb8:	6020      	str	r0, [r4, #0]
 8010cba:	6061      	str	r1, [r4, #4]
 8010cbc:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade, "7A");
 8010cbe:	687b      	ldr	r3, [r7, #4]
 8010cc0:	33cc      	adds	r3, #204	; 0xcc
 8010cc2:	4a7f      	ldr	r2, [pc, #508]	; (8010ec0 <problem_fetch+0xfba0>)
 8010cc4:	8811      	ldrh	r1, [r2, #0]
 8010cc6:	7892      	ldrb	r2, [r2, #2]
 8010cc8:	8019      	strh	r1, [r3, #0]
 8010cca:	709a      	strb	r2, [r3, #2]
			break;
 8010ccc:	f00a b86e 	b.w	801adac <problem_fetch+0x19a8c>
		case 532 :
			strcpy(p->name,"BRICK TAMLAND");
 8010cd0:	687b      	ldr	r3, [r7, #4]
 8010cd2:	337c      	adds	r3, #124	; 0x7c
 8010cd4:	4a7b      	ldr	r2, [pc, #492]	; (8010ec4 <problem_fetch+0xfba4>)
 8010cd6:	461c      	mov	r4, r3
 8010cd8:	4613      	mov	r3, r2
 8010cda:	cb07      	ldmia	r3!, {r0, r1, r2}
 8010cdc:	6020      	str	r0, [r4, #0]
 8010cde:	6061      	str	r1, [r4, #4]
 8010ce0:	60a2      	str	r2, [r4, #8]
 8010ce2:	881b      	ldrh	r3, [r3, #0]
 8010ce4:	81a3      	strh	r3, [r4, #12]
			p->moveSize = 8;
 8010ce6:	687b      	ldr	r3, [r7, #4]
 8010ce8:	2208      	movs	r2, #8
 8010cea:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"E,G,G,J,H,G,D,G");
 8010cec:	687b      	ldr	r3, [r7, #4]
 8010cee:	3340      	adds	r3, #64	; 0x40
 8010cf0:	4a75      	ldr	r2, [pc, #468]	; (8010ec8 <problem_fetch+0xfba8>)
 8010cf2:	461c      	mov	r4, r3
 8010cf4:	4615      	mov	r5, r2
 8010cf6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010cf8:	6020      	str	r0, [r4, #0]
 8010cfa:	6061      	str	r1, [r4, #4]
 8010cfc:	60a2      	str	r2, [r4, #8]
 8010cfe:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"6,9,10,5,12,17,18,15");
 8010d00:	687b      	ldr	r3, [r7, #4]
 8010d02:	3304      	adds	r3, #4
 8010d04:	4a71      	ldr	r2, [pc, #452]	; (8010ecc <problem_fetch+0xfbac>)
 8010d06:	461d      	mov	r5, r3
 8010d08:	4614      	mov	r4, r2
 8010d0a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8010d0c:	6028      	str	r0, [r5, #0]
 8010d0e:	6069      	str	r1, [r5, #4]
 8010d10:	60aa      	str	r2, [r5, #8]
 8010d12:	60eb      	str	r3, [r5, #12]
 8010d14:	6820      	ldr	r0, [r4, #0]
 8010d16:	6128      	str	r0, [r5, #16]
 8010d18:	7923      	ldrb	r3, [r4, #4]
 8010d1a:	752b      	strb	r3, [r5, #20]
			strcpy(p->startFinish, "s,d,d,d,d,d,e,d");
 8010d1c:	687b      	ldr	r3, [r7, #4]
 8010d1e:	33d8      	adds	r3, #216	; 0xd8
 8010d20:	4a6b      	ldr	r2, [pc, #428]	; (8010ed0 <problem_fetch+0xfbb0>)
 8010d22:	461c      	mov	r4, r3
 8010d24:	4615      	mov	r5, r2
 8010d26:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010d28:	6020      	str	r0, [r4, #0]
 8010d2a:	6061      	str	r1, [r4, #4]
 8010d2c:	60a2      	str	r2, [r4, #8]
 8010d2e:	60e3      	str	r3, [r4, #12]
			strcpy(p->grade, "6C+");
 8010d30:	687b      	ldr	r3, [r7, #4]
 8010d32:	33cc      	adds	r3, #204	; 0xcc
 8010d34:	4a5d      	ldr	r2, [pc, #372]	; (8010eac <problem_fetch+0xfb8c>)
 8010d36:	6810      	ldr	r0, [r2, #0]
 8010d38:	6018      	str	r0, [r3, #0]
			break;
 8010d3a:	f00a b837 	b.w	801adac <problem_fetch+0x19a8c>
		case 533 :
			strcpy(p->name,"THREE OF CUPS");
 8010d3e:	687b      	ldr	r3, [r7, #4]
 8010d40:	337c      	adds	r3, #124	; 0x7c
 8010d42:	4a64      	ldr	r2, [pc, #400]	; (8010ed4 <problem_fetch+0xfbb4>)
 8010d44:	461c      	mov	r4, r3
 8010d46:	4613      	mov	r3, r2
 8010d48:	cb07      	ldmia	r3!, {r0, r1, r2}
 8010d4a:	6020      	str	r0, [r4, #0]
 8010d4c:	6061      	str	r1, [r4, #4]
 8010d4e:	60a2      	str	r2, [r4, #8]
 8010d50:	881b      	ldrh	r3, [r3, #0]
 8010d52:	81a3      	strh	r3, [r4, #12]
			p->moveSize = 5;
 8010d54:	687b      	ldr	r3, [r7, #4]
 8010d56:	2205      	movs	r2, #5
 8010d58:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"H,C,F,A,D");
 8010d5a:	687b      	ldr	r3, [r7, #4]
 8010d5c:	3340      	adds	r3, #64	; 0x40
 8010d5e:	495e      	ldr	r1, [pc, #376]	; (8010ed8 <problem_fetch+0xfbb8>)
 8010d60:	461a      	mov	r2, r3
 8010d62:	460b      	mov	r3, r1
 8010d64:	cb03      	ldmia	r3!, {r0, r1}
 8010d66:	6010      	str	r0, [r2, #0]
 8010d68:	6051      	str	r1, [r2, #4]
 8010d6a:	881b      	ldrh	r3, [r3, #0]
 8010d6c:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"5,8,11,14,18");
 8010d6e:	687b      	ldr	r3, [r7, #4]
 8010d70:	3304      	adds	r3, #4
 8010d72:	4a5a      	ldr	r2, [pc, #360]	; (8010edc <problem_fetch+0xfbbc>)
 8010d74:	461c      	mov	r4, r3
 8010d76:	4613      	mov	r3, r2
 8010d78:	cb07      	ldmia	r3!, {r0, r1, r2}
 8010d7a:	6020      	str	r0, [r4, #0]
 8010d7c:	6061      	str	r1, [r4, #4]
 8010d7e:	60a2      	str	r2, [r4, #8]
 8010d80:	781b      	ldrb	r3, [r3, #0]
 8010d82:	7323      	strb	r3, [r4, #12]
			strcpy(p->startFinish, "s,d,d,d,e");
 8010d84:	687b      	ldr	r3, [r7, #4]
 8010d86:	33d8      	adds	r3, #216	; 0xd8
 8010d88:	4955      	ldr	r1, [pc, #340]	; (8010ee0 <problem_fetch+0xfbc0>)
 8010d8a:	461a      	mov	r2, r3
 8010d8c:	460b      	mov	r3, r1
 8010d8e:	cb03      	ldmia	r3!, {r0, r1}
 8010d90:	6010      	str	r0, [r2, #0]
 8010d92:	6051      	str	r1, [r2, #4]
 8010d94:	881b      	ldrh	r3, [r3, #0]
 8010d96:	8113      	strh	r3, [r2, #8]
			strcpy(p->grade, "7A");
 8010d98:	687b      	ldr	r3, [r7, #4]
 8010d9a:	33cc      	adds	r3, #204	; 0xcc
 8010d9c:	4a48      	ldr	r2, [pc, #288]	; (8010ec0 <problem_fetch+0xfba0>)
 8010d9e:	8811      	ldrh	r1, [r2, #0]
 8010da0:	7892      	ldrb	r2, [r2, #2]
 8010da2:	8019      	strh	r1, [r3, #0]
 8010da4:	709a      	strb	r2, [r3, #2]
			break;
 8010da6:	f00a b801 	b.w	801adac <problem_fetch+0x19a8c>
		case 534 :
			strcpy(p->name,"SNEAKER JUICE DEUX");
 8010daa:	687b      	ldr	r3, [r7, #4]
 8010dac:	337c      	adds	r3, #124	; 0x7c
 8010dae:	4a4d      	ldr	r2, [pc, #308]	; (8010ee4 <problem_fetch+0xfbc4>)
 8010db0:	461d      	mov	r5, r3
 8010db2:	4614      	mov	r4, r2
 8010db4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8010db6:	6028      	str	r0, [r5, #0]
 8010db8:	6069      	str	r1, [r5, #4]
 8010dba:	60aa      	str	r2, [r5, #8]
 8010dbc:	60eb      	str	r3, [r5, #12]
 8010dbe:	8823      	ldrh	r3, [r4, #0]
 8010dc0:	78a2      	ldrb	r2, [r4, #2]
 8010dc2:	822b      	strh	r3, [r5, #16]
 8010dc4:	4613      	mov	r3, r2
 8010dc6:	74ab      	strb	r3, [r5, #18]
			p->moveSize = 6;
 8010dc8:	687b      	ldr	r3, [r7, #4]
 8010dca:	2206      	movs	r2, #6
 8010dcc:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"J,E,I,F,K,I");
 8010dce:	687b      	ldr	r3, [r7, #4]
 8010dd0:	3340      	adds	r3, #64	; 0x40
 8010dd2:	4a45      	ldr	r2, [pc, #276]	; (8010ee8 <problem_fetch+0xfbc8>)
 8010dd4:	461c      	mov	r4, r3
 8010dd6:	4613      	mov	r3, r2
 8010dd8:	cb07      	ldmia	r3!, {r0, r1, r2}
 8010dda:	6020      	str	r0, [r4, #0]
 8010ddc:	6061      	str	r1, [r4, #4]
 8010dde:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,8,10,13,14,18");
 8010de0:	687b      	ldr	r3, [r7, #4]
 8010de2:	3304      	adds	r3, #4
 8010de4:	4a41      	ldr	r2, [pc, #260]	; (8010eec <problem_fetch+0xfbcc>)
 8010de6:	461c      	mov	r4, r3
 8010de8:	4615      	mov	r5, r2
 8010dea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010dec:	6020      	str	r0, [r4, #0]
 8010dee:	6061      	str	r1, [r4, #4]
 8010df0:	60a2      	str	r2, [r4, #8]
 8010df2:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish, "s,d,d,d,d,e");
 8010df4:	687b      	ldr	r3, [r7, #4]
 8010df6:	33d8      	adds	r3, #216	; 0xd8
 8010df8:	4a3d      	ldr	r2, [pc, #244]	; (8010ef0 <problem_fetch+0xfbd0>)
 8010dfa:	461c      	mov	r4, r3
 8010dfc:	4613      	mov	r3, r2
 8010dfe:	cb07      	ldmia	r3!, {r0, r1, r2}
 8010e00:	6020      	str	r0, [r4, #0]
 8010e02:	6061      	str	r1, [r4, #4]
 8010e04:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade, "6C+");
 8010e06:	687b      	ldr	r3, [r7, #4]
 8010e08:	33cc      	adds	r3, #204	; 0xcc
 8010e0a:	4a28      	ldr	r2, [pc, #160]	; (8010eac <problem_fetch+0xfb8c>)
 8010e0c:	6810      	ldr	r0, [r2, #0]
 8010e0e:	6018      	str	r0, [r3, #0]
			break;
 8010e10:	f009 bfcc 	b.w	801adac <problem_fetch+0x19a8c>
		case 535 :
			strcpy(p->name,"HEART OF THE SEA");
 8010e14:	687b      	ldr	r3, [r7, #4]
 8010e16:	337c      	adds	r3, #124	; 0x7c
 8010e18:	4a36      	ldr	r2, [pc, #216]	; (8010ef4 <problem_fetch+0xfbd4>)
 8010e1a:	461d      	mov	r5, r3
 8010e1c:	4614      	mov	r4, r2
 8010e1e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8010e20:	6028      	str	r0, [r5, #0]
 8010e22:	6069      	str	r1, [r5, #4]
 8010e24:	60aa      	str	r2, [r5, #8]
 8010e26:	60eb      	str	r3, [r5, #12]
 8010e28:	7823      	ldrb	r3, [r4, #0]
 8010e2a:	742b      	strb	r3, [r5, #16]
			p->moveSize = 7;
 8010e2c:	687b      	ldr	r3, [r7, #4]
 8010e2e:	2207      	movs	r2, #7
 8010e30:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"C,A,E,B,F,A,D");
 8010e32:	687b      	ldr	r3, [r7, #4]
 8010e34:	3340      	adds	r3, #64	; 0x40
 8010e36:	4a30      	ldr	r2, [pc, #192]	; (8010ef8 <problem_fetch+0xfbd8>)
 8010e38:	461c      	mov	r4, r3
 8010e3a:	4613      	mov	r3, r2
 8010e3c:	cb07      	ldmia	r3!, {r0, r1, r2}
 8010e3e:	6020      	str	r0, [r4, #0]
 8010e40:	6061      	str	r1, [r4, #4]
 8010e42:	60a2      	str	r2, [r4, #8]
 8010e44:	881b      	ldrh	r3, [r3, #0]
 8010e46:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,9,9,6,11,14,18");
 8010e48:	687b      	ldr	r3, [r7, #4]
 8010e4a:	3304      	adds	r3, #4
 8010e4c:	4a2b      	ldr	r2, [pc, #172]	; (8010efc <problem_fetch+0xfbdc>)
 8010e4e:	461d      	mov	r5, r3
 8010e50:	4614      	mov	r4, r2
 8010e52:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8010e54:	6028      	str	r0, [r5, #0]
 8010e56:	6069      	str	r1, [r5, #4]
 8010e58:	60aa      	str	r2, [r5, #8]
 8010e5a:	60eb      	str	r3, [r5, #12]
 8010e5c:	7823      	ldrb	r3, [r4, #0]
 8010e5e:	742b      	strb	r3, [r5, #16]
			strcpy(p->startFinish, "s,d,d,s,d,d,e");
 8010e60:	687b      	ldr	r3, [r7, #4]
 8010e62:	33d8      	adds	r3, #216	; 0xd8
 8010e64:	4a26      	ldr	r2, [pc, #152]	; (8010f00 <problem_fetch+0xfbe0>)
 8010e66:	461c      	mov	r4, r3
 8010e68:	4613      	mov	r3, r2
 8010e6a:	cb07      	ldmia	r3!, {r0, r1, r2}
 8010e6c:	6020      	str	r0, [r4, #0]
 8010e6e:	6061      	str	r1, [r4, #4]
 8010e70:	60a2      	str	r2, [r4, #8]
 8010e72:	881b      	ldrh	r3, [r3, #0]
 8010e74:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade, "7A");
 8010e76:	687b      	ldr	r3, [r7, #4]
 8010e78:	33cc      	adds	r3, #204	; 0xcc
 8010e7a:	4a11      	ldr	r2, [pc, #68]	; (8010ec0 <problem_fetch+0xfba0>)
 8010e7c:	8811      	ldrh	r1, [r2, #0]
 8010e7e:	7892      	ldrb	r2, [r2, #2]
 8010e80:	8019      	strh	r1, [r3, #0]
 8010e82:	709a      	strb	r2, [r3, #2]
			break;
 8010e84:	f009 bf92 	b.w	801adac <problem_fetch+0x19a8c>
 8010e88:	08026aa0 	.word	0x08026aa0
 8010e8c:	08026aa8 	.word	0x08026aa8
 8010e90:	08023e00 	.word	0x08023e00
 8010e94:	08021494 	.word	0x08021494
 8010e98:	080212b0 	.word	0x080212b0
 8010e9c:	08026ab8 	.word	0x08026ab8
 8010ea0:	08026ac4 	.word	0x08026ac4
 8010ea4:	08026ad4 	.word	0x08026ad4
 8010ea8:	080212a0 	.word	0x080212a0
 8010eac:	080213a8 	.word	0x080213a8
 8010eb0:	08026ae8 	.word	0x08026ae8
 8010eb4:	08026af4 	.word	0x08026af4
 8010eb8:	08026b00 	.word	0x08026b00
 8010ebc:	08026b10 	.word	0x08026b10
 8010ec0:	080212f4 	.word	0x080212f4
 8010ec4:	08026b1c 	.word	0x08026b1c
 8010ec8:	08026b2c 	.word	0x08026b2c
 8010ecc:	08026b3c 	.word	0x08026b3c
 8010ed0:	08026b54 	.word	0x08026b54
 8010ed4:	08026b64 	.word	0x08026b64
 8010ed8:	08026b74 	.word	0x08026b74
 8010edc:	08022c9c 	.word	0x08022c9c
 8010ee0:	08021320 	.word	0x08021320
 8010ee4:	08026b80 	.word	0x08026b80
 8010ee8:	08026b94 	.word	0x08026b94
 8010eec:	08026ba0 	.word	0x08026ba0
 8010ef0:	0802139c 	.word	0x0802139c
 8010ef4:	08026bb0 	.word	0x08026bb0
 8010ef8:	08026bc4 	.word	0x08026bc4
 8010efc:	08026bd4 	.word	0x08026bd4
 8010f00:	08026be8 	.word	0x08026be8
		case 536 :
			strcpy(p->name,"ONE DAY");
 8010f04:	687b      	ldr	r3, [r7, #4]
 8010f06:	337c      	adds	r3, #124	; 0x7c
 8010f08:	49b4      	ldr	r1, [pc, #720]	; (80111dc <problem_fetch+0xfebc>)
 8010f0a:	461a      	mov	r2, r3
 8010f0c:	460b      	mov	r3, r1
 8010f0e:	cb03      	ldmia	r3!, {r0, r1}
 8010f10:	6010      	str	r0, [r2, #0]
 8010f12:	6051      	str	r1, [r2, #4]
			p->moveSize = 7;
 8010f14:	687b      	ldr	r3, [r7, #4]
 8010f16:	2207      	movs	r2, #7
 8010f18:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"G,H,E,B,H,C,I");
 8010f1a:	687b      	ldr	r3, [r7, #4]
 8010f1c:	3340      	adds	r3, #64	; 0x40
 8010f1e:	4ab0      	ldr	r2, [pc, #704]	; (80111e0 <problem_fetch+0xfec0>)
 8010f20:	461c      	mov	r4, r3
 8010f22:	4613      	mov	r3, r2
 8010f24:	cb07      	ldmia	r3!, {r0, r1, r2}
 8010f26:	6020      	str	r0, [r4, #0]
 8010f28:	6061      	str	r1, [r4, #4]
 8010f2a:	60a2      	str	r2, [r4, #8]
 8010f2c:	881b      	ldrh	r3, [r3, #0]
 8010f2e:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,8,9,10,13,13,18");
 8010f30:	687b      	ldr	r3, [r7, #4]
 8010f32:	3304      	adds	r3, #4
 8010f34:	4aab      	ldr	r2, [pc, #684]	; (80111e4 <problem_fetch+0xfec4>)
 8010f36:	461d      	mov	r5, r3
 8010f38:	4614      	mov	r4, r2
 8010f3a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8010f3c:	6028      	str	r0, [r5, #0]
 8010f3e:	6069      	str	r1, [r5, #4]
 8010f40:	60aa      	str	r2, [r5, #8]
 8010f42:	60eb      	str	r3, [r5, #12]
 8010f44:	8823      	ldrh	r3, [r4, #0]
 8010f46:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish, "s,d,d,d,d,d,e");
 8010f48:	687b      	ldr	r3, [r7, #4]
 8010f4a:	33d8      	adds	r3, #216	; 0xd8
 8010f4c:	4aa6      	ldr	r2, [pc, #664]	; (80111e8 <problem_fetch+0xfec8>)
 8010f4e:	461c      	mov	r4, r3
 8010f50:	4613      	mov	r3, r2
 8010f52:	cb07      	ldmia	r3!, {r0, r1, r2}
 8010f54:	6020      	str	r0, [r4, #0]
 8010f56:	6061      	str	r1, [r4, #4]
 8010f58:	60a2      	str	r2, [r4, #8]
 8010f5a:	881b      	ldrh	r3, [r3, #0]
 8010f5c:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade, "6B+");
 8010f5e:	687b      	ldr	r3, [r7, #4]
 8010f60:	33cc      	adds	r3, #204	; 0xcc
 8010f62:	4aa2      	ldr	r2, [pc, #648]	; (80111ec <problem_fetch+0xfecc>)
 8010f64:	6810      	ldr	r0, [r2, #0]
 8010f66:	6018      	str	r0, [r3, #0]
			break;
 8010f68:	f009 bf20 	b.w	801adac <problem_fetch+0x19a8c>
		case 537 :
			strcpy(p->name,"ZIO BENNY");
 8010f6c:	687b      	ldr	r3, [r7, #4]
 8010f6e:	337c      	adds	r3, #124	; 0x7c
 8010f70:	499f      	ldr	r1, [pc, #636]	; (80111f0 <problem_fetch+0xfed0>)
 8010f72:	461a      	mov	r2, r3
 8010f74:	460b      	mov	r3, r1
 8010f76:	cb03      	ldmia	r3!, {r0, r1}
 8010f78:	6010      	str	r0, [r2, #0]
 8010f7a:	6051      	str	r1, [r2, #4]
 8010f7c:	881b      	ldrh	r3, [r3, #0]
 8010f7e:	8113      	strh	r3, [r2, #8]
			p->moveSize = 5;
 8010f80:	687b      	ldr	r3, [r7, #4]
 8010f82:	2205      	movs	r2, #5
 8010f84:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"J,G,H,E,D");
 8010f86:	687b      	ldr	r3, [r7, #4]
 8010f88:	3340      	adds	r3, #64	; 0x40
 8010f8a:	499a      	ldr	r1, [pc, #616]	; (80111f4 <problem_fetch+0xfed4>)
 8010f8c:	461a      	mov	r2, r3
 8010f8e:	460b      	mov	r3, r1
 8010f90:	cb03      	ldmia	r3!, {r0, r1}
 8010f92:	6010      	str	r0, [r2, #0]
 8010f94:	6051      	str	r1, [r2, #4]
 8010f96:	881b      	ldrh	r3, [r3, #0]
 8010f98:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"5,9,13,14,18");
 8010f9a:	687b      	ldr	r3, [r7, #4]
 8010f9c:	3304      	adds	r3, #4
 8010f9e:	4a96      	ldr	r2, [pc, #600]	; (80111f8 <problem_fetch+0xfed8>)
 8010fa0:	461c      	mov	r4, r3
 8010fa2:	4613      	mov	r3, r2
 8010fa4:	cb07      	ldmia	r3!, {r0, r1, r2}
 8010fa6:	6020      	str	r0, [r4, #0]
 8010fa8:	6061      	str	r1, [r4, #4]
 8010faa:	60a2      	str	r2, [r4, #8]
 8010fac:	781b      	ldrb	r3, [r3, #0]
 8010fae:	7323      	strb	r3, [r4, #12]
			strcpy(p->startFinish, "s,d,d,d,e");
 8010fb0:	687b      	ldr	r3, [r7, #4]
 8010fb2:	33d8      	adds	r3, #216	; 0xd8
 8010fb4:	4991      	ldr	r1, [pc, #580]	; (80111fc <problem_fetch+0xfedc>)
 8010fb6:	461a      	mov	r2, r3
 8010fb8:	460b      	mov	r3, r1
 8010fba:	cb03      	ldmia	r3!, {r0, r1}
 8010fbc:	6010      	str	r0, [r2, #0]
 8010fbe:	6051      	str	r1, [r2, #4]
 8010fc0:	881b      	ldrh	r3, [r3, #0]
 8010fc2:	8113      	strh	r3, [r2, #8]
			strcpy(p->grade, "7A+");
 8010fc4:	687b      	ldr	r3, [r7, #4]
 8010fc6:	33cc      	adds	r3, #204	; 0xcc
 8010fc8:	4a8d      	ldr	r2, [pc, #564]	; (8011200 <problem_fetch+0xfee0>)
 8010fca:	6810      	ldr	r0, [r2, #0]
 8010fcc:	6018      	str	r0, [r3, #0]
			break;
 8010fce:	f009 beed 	b.w	801adac <problem_fetch+0x19a8c>
		case 538 :
			strcpy(p->name,"THE PEOPLE'S HEEL HOOK");
 8010fd2:	687b      	ldr	r3, [r7, #4]
 8010fd4:	337c      	adds	r3, #124	; 0x7c
 8010fd6:	4a8b      	ldr	r2, [pc, #556]	; (8011204 <problem_fetch+0xfee4>)
 8010fd8:	461c      	mov	r4, r3
 8010fda:	4615      	mov	r5, r2
 8010fdc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010fde:	6020      	str	r0, [r4, #0]
 8010fe0:	6061      	str	r1, [r4, #4]
 8010fe2:	60a2      	str	r2, [r4, #8]
 8010fe4:	60e3      	str	r3, [r4, #12]
 8010fe6:	6828      	ldr	r0, [r5, #0]
 8010fe8:	6120      	str	r0, [r4, #16]
 8010fea:	88ab      	ldrh	r3, [r5, #4]
 8010fec:	79aa      	ldrb	r2, [r5, #6]
 8010fee:	82a3      	strh	r3, [r4, #20]
 8010ff0:	4613      	mov	r3, r2
 8010ff2:	75a3      	strb	r3, [r4, #22]
			p->moveSize = 5;
 8010ff4:	687b      	ldr	r3, [r7, #4]
 8010ff6:	2205      	movs	r2, #5
 8010ff8:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"G,C,E,E,I");
 8010ffa:	687b      	ldr	r3, [r7, #4]
 8010ffc:	3340      	adds	r3, #64	; 0x40
 8010ffe:	4982      	ldr	r1, [pc, #520]	; (8011208 <problem_fetch+0xfee8>)
 8011000:	461a      	mov	r2, r3
 8011002:	460b      	mov	r3, r1
 8011004:	cb03      	ldmia	r3!, {r0, r1}
 8011006:	6010      	str	r0, [r2, #0]
 8011008:	6051      	str	r1, [r2, #4]
 801100a:	881b      	ldrh	r3, [r3, #0]
 801100c:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"4,8,12,14,18");
 801100e:	687b      	ldr	r3, [r7, #4]
 8011010:	3304      	adds	r3, #4
 8011012:	4a7e      	ldr	r2, [pc, #504]	; (801120c <problem_fetch+0xfeec>)
 8011014:	461c      	mov	r4, r3
 8011016:	4613      	mov	r3, r2
 8011018:	cb07      	ldmia	r3!, {r0, r1, r2}
 801101a:	6020      	str	r0, [r4, #0]
 801101c:	6061      	str	r1, [r4, #4]
 801101e:	60a2      	str	r2, [r4, #8]
 8011020:	781b      	ldrb	r3, [r3, #0]
 8011022:	7323      	strb	r3, [r4, #12]
			strcpy(p->startFinish, "s,d,d,d,e");
 8011024:	687b      	ldr	r3, [r7, #4]
 8011026:	33d8      	adds	r3, #216	; 0xd8
 8011028:	4974      	ldr	r1, [pc, #464]	; (80111fc <problem_fetch+0xfedc>)
 801102a:	461a      	mov	r2, r3
 801102c:	460b      	mov	r3, r1
 801102e:	cb03      	ldmia	r3!, {r0, r1}
 8011030:	6010      	str	r0, [r2, #0]
 8011032:	6051      	str	r1, [r2, #4]
 8011034:	881b      	ldrh	r3, [r3, #0]
 8011036:	8113      	strh	r3, [r2, #8]
			strcpy(p->grade, "7A");
 8011038:	687b      	ldr	r3, [r7, #4]
 801103a:	33cc      	adds	r3, #204	; 0xcc
 801103c:	4a74      	ldr	r2, [pc, #464]	; (8011210 <problem_fetch+0xfef0>)
 801103e:	8811      	ldrh	r1, [r2, #0]
 8011040:	7892      	ldrb	r2, [r2, #2]
 8011042:	8019      	strh	r1, [r3, #0]
 8011044:	709a      	strb	r2, [r3, #2]
			break;
 8011046:	f009 beb1 	b.w	801adac <problem_fetch+0x19a8c>
		case 539 :
			strcpy(p->name,"SOFA KING JUGGY");
 801104a:	687b      	ldr	r3, [r7, #4]
 801104c:	337c      	adds	r3, #124	; 0x7c
 801104e:	4a71      	ldr	r2, [pc, #452]	; (8011214 <problem_fetch+0xfef4>)
 8011050:	461c      	mov	r4, r3
 8011052:	4615      	mov	r5, r2
 8011054:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011056:	6020      	str	r0, [r4, #0]
 8011058:	6061      	str	r1, [r4, #4]
 801105a:	60a2      	str	r2, [r4, #8]
 801105c:	60e3      	str	r3, [r4, #12]
			p->moveSize = 5;
 801105e:	687b      	ldr	r3, [r7, #4]
 8011060:	2205      	movs	r2, #5
 8011062:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"G,H,H,H,D");
 8011064:	687b      	ldr	r3, [r7, #4]
 8011066:	3340      	adds	r3, #64	; 0x40
 8011068:	496b      	ldr	r1, [pc, #428]	; (8011218 <problem_fetch+0xfef8>)
 801106a:	461a      	mov	r2, r3
 801106c:	460b      	mov	r3, r1
 801106e:	cb03      	ldmia	r3!, {r0, r1}
 8011070:	6010      	str	r0, [r2, #0]
 8011072:	6051      	str	r1, [r2, #4]
 8011074:	881b      	ldrh	r3, [r3, #0]
 8011076:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"4,10,12,16,18");
 8011078:	687b      	ldr	r3, [r7, #4]
 801107a:	3304      	adds	r3, #4
 801107c:	4a67      	ldr	r2, [pc, #412]	; (801121c <problem_fetch+0xfefc>)
 801107e:	461c      	mov	r4, r3
 8011080:	4613      	mov	r3, r2
 8011082:	cb07      	ldmia	r3!, {r0, r1, r2}
 8011084:	6020      	str	r0, [r4, #0]
 8011086:	6061      	str	r1, [r4, #4]
 8011088:	60a2      	str	r2, [r4, #8]
 801108a:	881b      	ldrh	r3, [r3, #0]
 801108c:	81a3      	strh	r3, [r4, #12]
			strcpy(p->startFinish, "s,d,d,d,e");
 801108e:	687b      	ldr	r3, [r7, #4]
 8011090:	33d8      	adds	r3, #216	; 0xd8
 8011092:	495a      	ldr	r1, [pc, #360]	; (80111fc <problem_fetch+0xfedc>)
 8011094:	461a      	mov	r2, r3
 8011096:	460b      	mov	r3, r1
 8011098:	cb03      	ldmia	r3!, {r0, r1}
 801109a:	6010      	str	r0, [r2, #0]
 801109c:	6051      	str	r1, [r2, #4]
 801109e:	881b      	ldrh	r3, [r3, #0]
 80110a0:	8113      	strh	r3, [r2, #8]
			strcpy(p->grade, "7B+");
 80110a2:	687b      	ldr	r3, [r7, #4]
 80110a4:	33cc      	adds	r3, #204	; 0xcc
 80110a6:	4a5e      	ldr	r2, [pc, #376]	; (8011220 <problem_fetch+0xff00>)
 80110a8:	6810      	ldr	r0, [r2, #0]
 80110aa:	6018      	str	r0, [r3, #0]
			break;
 80110ac:	f009 be7e 	b.w	801adac <problem_fetch+0x19a8c>
		case 54 :
			strcpy(p->name,"DU SPICCI");
 80110b0:	687b      	ldr	r3, [r7, #4]
 80110b2:	337c      	adds	r3, #124	; 0x7c
 80110b4:	495b      	ldr	r1, [pc, #364]	; (8011224 <problem_fetch+0xff04>)
 80110b6:	461a      	mov	r2, r3
 80110b8:	460b      	mov	r3, r1
 80110ba:	cb03      	ldmia	r3!, {r0, r1}
 80110bc:	6010      	str	r0, [r2, #0]
 80110be:	6051      	str	r1, [r2, #4]
 80110c0:	881b      	ldrh	r3, [r3, #0]
 80110c2:	8113      	strh	r3, [r2, #8]
			p->moveSize = 6;
 80110c4:	687b      	ldr	r3, [r7, #4]
 80110c6:	2206      	movs	r2, #6
 80110c8:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"E,J,I,D,E,D");
 80110ca:	687b      	ldr	r3, [r7, #4]
 80110cc:	3340      	adds	r3, #64	; 0x40
 80110ce:	4a56      	ldr	r2, [pc, #344]	; (8011228 <problem_fetch+0xff08>)
 80110d0:	461c      	mov	r4, r3
 80110d2:	4613      	mov	r3, r2
 80110d4:	cb07      	ldmia	r3!, {r0, r1, r2}
 80110d6:	6020      	str	r0, [r4, #0]
 80110d8:	6061      	str	r1, [r4, #4]
 80110da:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"6,5,10,11,14,18");
 80110dc:	687b      	ldr	r3, [r7, #4]
 80110de:	3304      	adds	r3, #4
 80110e0:	4a52      	ldr	r2, [pc, #328]	; (801122c <problem_fetch+0xff0c>)
 80110e2:	461c      	mov	r4, r3
 80110e4:	4615      	mov	r5, r2
 80110e6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80110e8:	6020      	str	r0, [r4, #0]
 80110ea:	6061      	str	r1, [r4, #4]
 80110ec:	60a2      	str	r2, [r4, #8]
 80110ee:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish, "s,s,d,d,d,e");
 80110f0:	687b      	ldr	r3, [r7, #4]
 80110f2:	33d8      	adds	r3, #216	; 0xd8
 80110f4:	4a4e      	ldr	r2, [pc, #312]	; (8011230 <problem_fetch+0xff10>)
 80110f6:	461c      	mov	r4, r3
 80110f8:	4613      	mov	r3, r2
 80110fa:	cb07      	ldmia	r3!, {r0, r1, r2}
 80110fc:	6020      	str	r0, [r4, #0]
 80110fe:	6061      	str	r1, [r4, #4]
 8011100:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade, "6C+");
 8011102:	687b      	ldr	r3, [r7, #4]
 8011104:	33cc      	adds	r3, #204	; 0xcc
 8011106:	4a4b      	ldr	r2, [pc, #300]	; (8011234 <problem_fetch+0xff14>)
 8011108:	6810      	ldr	r0, [r2, #0]
 801110a:	6018      	str	r0, [r3, #0]
			break;
 801110c:	f009 be4e 	b.w	801adac <problem_fetch+0x19a8c>
		case 540 :
			strcpy(p->name,"SOFA KING SNAKED");
 8011110:	687b      	ldr	r3, [r7, #4]
 8011112:	337c      	adds	r3, #124	; 0x7c
 8011114:	4a48      	ldr	r2, [pc, #288]	; (8011238 <problem_fetch+0xff18>)
 8011116:	461d      	mov	r5, r3
 8011118:	4614      	mov	r4, r2
 801111a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801111c:	6028      	str	r0, [r5, #0]
 801111e:	6069      	str	r1, [r5, #4]
 8011120:	60aa      	str	r2, [r5, #8]
 8011122:	60eb      	str	r3, [r5, #12]
 8011124:	7823      	ldrb	r3, [r4, #0]
 8011126:	742b      	strb	r3, [r5, #16]
			p->moveSize = 6;
 8011128:	687b      	ldr	r3, [r7, #4]
 801112a:	2206      	movs	r2, #6
 801112c:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"J,E,E,D,I,D");
 801112e:	687b      	ldr	r3, [r7, #4]
 8011130:	3340      	adds	r3, #64	; 0x40
 8011132:	4a42      	ldr	r2, [pc, #264]	; (801123c <problem_fetch+0xff1c>)
 8011134:	461c      	mov	r4, r3
 8011136:	4613      	mov	r3, r2
 8011138:	cb07      	ldmia	r3!, {r0, r1, r2}
 801113a:	6020      	str	r0, [r4, #0]
 801113c:	6061      	str	r1, [r4, #4]
 801113e:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,8,12,11,14,18");
 8011140:	687b      	ldr	r3, [r7, #4]
 8011142:	3304      	adds	r3, #4
 8011144:	4a3e      	ldr	r2, [pc, #248]	; (8011240 <problem_fetch+0xff20>)
 8011146:	461c      	mov	r4, r3
 8011148:	4615      	mov	r5, r2
 801114a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801114c:	6020      	str	r0, [r4, #0]
 801114e:	6061      	str	r1, [r4, #4]
 8011150:	60a2      	str	r2, [r4, #8]
 8011152:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish, "s,d,d,d,d,e");
 8011154:	687b      	ldr	r3, [r7, #4]
 8011156:	33d8      	adds	r3, #216	; 0xd8
 8011158:	4a3a      	ldr	r2, [pc, #232]	; (8011244 <problem_fetch+0xff24>)
 801115a:	461c      	mov	r4, r3
 801115c:	4613      	mov	r3, r2
 801115e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8011160:	6020      	str	r0, [r4, #0]
 8011162:	6061      	str	r1, [r4, #4]
 8011164:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade, "7B");
 8011166:	687b      	ldr	r3, [r7, #4]
 8011168:	33cc      	adds	r3, #204	; 0xcc
 801116a:	4a37      	ldr	r2, [pc, #220]	; (8011248 <problem_fetch+0xff28>)
 801116c:	8811      	ldrh	r1, [r2, #0]
 801116e:	7892      	ldrb	r2, [r2, #2]
 8011170:	8019      	strh	r1, [r3, #0]
 8011172:	709a      	strb	r2, [r3, #2]
			break;
 8011174:	f009 be1a 	b.w	801adac <problem_fetch+0x19a8c>
		case 541 :
			strcpy(p->name,"HEAVY LIFTING");
 8011178:	687b      	ldr	r3, [r7, #4]
 801117a:	337c      	adds	r3, #124	; 0x7c
 801117c:	4a33      	ldr	r2, [pc, #204]	; (801124c <problem_fetch+0xff2c>)
 801117e:	461c      	mov	r4, r3
 8011180:	4613      	mov	r3, r2
 8011182:	cb07      	ldmia	r3!, {r0, r1, r2}
 8011184:	6020      	str	r0, [r4, #0]
 8011186:	6061      	str	r1, [r4, #4]
 8011188:	60a2      	str	r2, [r4, #8]
 801118a:	881b      	ldrh	r3, [r3, #0]
 801118c:	81a3      	strh	r3, [r4, #12]
			p->moveSize = 6;
 801118e:	687b      	ldr	r3, [r7, #4]
 8011190:	2206      	movs	r2, #6
 8011192:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"E,G,H,G,D,D");
 8011194:	687b      	ldr	r3, [r7, #4]
 8011196:	3340      	adds	r3, #64	; 0x40
 8011198:	4a2d      	ldr	r2, [pc, #180]	; (8011250 <problem_fetch+0xff30>)
 801119a:	461c      	mov	r4, r3
 801119c:	4613      	mov	r3, r2
 801119e:	cb07      	ldmia	r3!, {r0, r1, r2}
 80111a0:	6020      	str	r0, [r4, #0]
 80111a2:	6061      	str	r1, [r4, #4]
 80111a4:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"6,6,10,14,15,18");
 80111a6:	687b      	ldr	r3, [r7, #4]
 80111a8:	3304      	adds	r3, #4
 80111aa:	4a2a      	ldr	r2, [pc, #168]	; (8011254 <problem_fetch+0xff34>)
 80111ac:	461c      	mov	r4, r3
 80111ae:	4615      	mov	r5, r2
 80111b0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80111b2:	6020      	str	r0, [r4, #0]
 80111b4:	6061      	str	r1, [r4, #4]
 80111b6:	60a2      	str	r2, [r4, #8]
 80111b8:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish, "s,s,d,d,d,e");
 80111ba:	687b      	ldr	r3, [r7, #4]
 80111bc:	33d8      	adds	r3, #216	; 0xd8
 80111be:	4a1c      	ldr	r2, [pc, #112]	; (8011230 <problem_fetch+0xff10>)
 80111c0:	461c      	mov	r4, r3
 80111c2:	4613      	mov	r3, r2
 80111c4:	cb07      	ldmia	r3!, {r0, r1, r2}
 80111c6:	6020      	str	r0, [r4, #0]
 80111c8:	6061      	str	r1, [r4, #4]
 80111ca:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade, "7A+");
 80111cc:	687b      	ldr	r3, [r7, #4]
 80111ce:	33cc      	adds	r3, #204	; 0xcc
 80111d0:	4a0b      	ldr	r2, [pc, #44]	; (8011200 <problem_fetch+0xfee0>)
 80111d2:	6810      	ldr	r0, [r2, #0]
 80111d4:	6018      	str	r0, [r3, #0]
			break;
 80111d6:	f009 bde9 	b.w	801adac <problem_fetch+0x19a8c>
 80111da:	bf00      	nop
 80111dc:	08026bf8 	.word	0x08026bf8
 80111e0:	08026c00 	.word	0x08026c00
 80111e4:	08026c10 	.word	0x08026c10
 80111e8:	08021494 	.word	0x08021494
 80111ec:	080212b0 	.word	0x080212b0
 80111f0:	08026c24 	.word	0x08026c24
 80111f4:	08026c30 	.word	0x08026c30
 80111f8:	080233b4 	.word	0x080233b4
 80111fc:	08021320 	.word	0x08021320
 8011200:	08021424 	.word	0x08021424
 8011204:	08026c3c 	.word	0x08026c3c
 8011208:	08023700 	.word	0x08023700
 801120c:	08026c54 	.word	0x08026c54
 8011210:	080212f4 	.word	0x080212f4
 8011214:	08026c64 	.word	0x08026c64
 8011218:	08026c74 	.word	0x08026c74
 801121c:	08026c80 	.word	0x08026c80
 8011220:	08021848 	.word	0x08021848
 8011224:	08026c90 	.word	0x08026c90
 8011228:	08026c9c 	.word	0x08026c9c
 801122c:	08026ca8 	.word	0x08026ca8
 8011230:	08021910 	.word	0x08021910
 8011234:	080213a8 	.word	0x080213a8
 8011238:	08026cb8 	.word	0x08026cb8
 801123c:	08026ccc 	.word	0x08026ccc
 8011240:	08026cd8 	.word	0x08026cd8
 8011244:	0802139c 	.word	0x0802139c
 8011248:	0802132c 	.word	0x0802132c
 801124c:	08026ce8 	.word	0x08026ce8
 8011250:	08026cf8 	.word	0x08026cf8
 8011254:	08026d04 	.word	0x08026d04
		case 542 :
			strcpy(p->name,"UNSULLIED");
 8011258:	687b      	ldr	r3, [r7, #4]
 801125a:	337c      	adds	r3, #124	; 0x7c
 801125c:	49aa      	ldr	r1, [pc, #680]	; (8011508 <problem_fetch+0x101e8>)
 801125e:	461a      	mov	r2, r3
 8011260:	460b      	mov	r3, r1
 8011262:	cb03      	ldmia	r3!, {r0, r1}
 8011264:	6010      	str	r0, [r2, #0]
 8011266:	6051      	str	r1, [r2, #4]
 8011268:	881b      	ldrh	r3, [r3, #0]
 801126a:	8113      	strh	r3, [r2, #8]
			p->moveSize = 4;
 801126c:	687b      	ldr	r3, [r7, #4]
 801126e:	2204      	movs	r2, #4
 8011270:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"E,G,C,D");
 8011272:	687b      	ldr	r3, [r7, #4]
 8011274:	3340      	adds	r3, #64	; 0x40
 8011276:	49a5      	ldr	r1, [pc, #660]	; (801150c <problem_fetch+0x101ec>)
 8011278:	461a      	mov	r2, r3
 801127a:	460b      	mov	r3, r1
 801127c:	cb03      	ldmia	r3!, {r0, r1}
 801127e:	6010      	str	r0, [r2, #0]
 8011280:	6051      	str	r1, [r2, #4]
			strcpy(p->moveNumbers,"6,10,13,18");
 8011282:	687b      	ldr	r3, [r7, #4]
 8011284:	3304      	adds	r3, #4
 8011286:	49a2      	ldr	r1, [pc, #648]	; (8011510 <problem_fetch+0x101f0>)
 8011288:	461a      	mov	r2, r3
 801128a:	460b      	mov	r3, r1
 801128c:	cb03      	ldmia	r3!, {r0, r1}
 801128e:	6010      	str	r0, [r2, #0]
 8011290:	6051      	str	r1, [r2, #4]
 8011292:	8819      	ldrh	r1, [r3, #0]
 8011294:	789b      	ldrb	r3, [r3, #2]
 8011296:	8111      	strh	r1, [r2, #8]
 8011298:	7293      	strb	r3, [r2, #10]
			strcpy(p->startFinish, "s,d,d,e");
 801129a:	687b      	ldr	r3, [r7, #4]
 801129c:	33d8      	adds	r3, #216	; 0xd8
 801129e:	499d      	ldr	r1, [pc, #628]	; (8011514 <problem_fetch+0x101f4>)
 80112a0:	461a      	mov	r2, r3
 80112a2:	460b      	mov	r3, r1
 80112a4:	cb03      	ldmia	r3!, {r0, r1}
 80112a6:	6010      	str	r0, [r2, #0]
 80112a8:	6051      	str	r1, [r2, #4]
			strcpy(p->grade, "7A");
 80112aa:	687b      	ldr	r3, [r7, #4]
 80112ac:	33cc      	adds	r3, #204	; 0xcc
 80112ae:	4a9a      	ldr	r2, [pc, #616]	; (8011518 <problem_fetch+0x101f8>)
 80112b0:	8811      	ldrh	r1, [r2, #0]
 80112b2:	7892      	ldrb	r2, [r2, #2]
 80112b4:	8019      	strh	r1, [r3, #0]
 80112b6:	709a      	strb	r2, [r3, #2]
			break;
 80112b8:	f009 bd78 	b.w	801adac <problem_fetch+0x19a8c>
		case 543 :
			strcpy(p->name,"SLIPPERY WHEN WET");
 80112bc:	687b      	ldr	r3, [r7, #4]
 80112be:	337c      	adds	r3, #124	; 0x7c
 80112c0:	4a96      	ldr	r2, [pc, #600]	; (801151c <problem_fetch+0x101fc>)
 80112c2:	461d      	mov	r5, r3
 80112c4:	4614      	mov	r4, r2
 80112c6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80112c8:	6028      	str	r0, [r5, #0]
 80112ca:	6069      	str	r1, [r5, #4]
 80112cc:	60aa      	str	r2, [r5, #8]
 80112ce:	60eb      	str	r3, [r5, #12]
 80112d0:	8823      	ldrh	r3, [r4, #0]
 80112d2:	822b      	strh	r3, [r5, #16]
			p->moveSize = 7;
 80112d4:	687b      	ldr	r3, [r7, #4]
 80112d6:	2207      	movs	r2, #7
 80112d8:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"G,C,H,G,D,D,A");
 80112da:	687b      	ldr	r3, [r7, #4]
 80112dc:	3340      	adds	r3, #64	; 0x40
 80112de:	4a90      	ldr	r2, [pc, #576]	; (8011520 <problem_fetch+0x10200>)
 80112e0:	461c      	mov	r4, r3
 80112e2:	4613      	mov	r3, r2
 80112e4:	cb07      	ldmia	r3!, {r0, r1, r2}
 80112e6:	6020      	str	r0, [r4, #0]
 80112e8:	6061      	str	r1, [r4, #4]
 80112ea:	60a2      	str	r2, [r4, #8]
 80112ec:	881b      	ldrh	r3, [r3, #0]
 80112ee:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,8,10,14,15,18,18");
 80112f0:	687b      	ldr	r3, [r7, #4]
 80112f2:	3304      	adds	r3, #4
 80112f4:	4a8b      	ldr	r2, [pc, #556]	; (8011524 <problem_fetch+0x10204>)
 80112f6:	461d      	mov	r5, r3
 80112f8:	4614      	mov	r4, r2
 80112fa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80112fc:	6028      	str	r0, [r5, #0]
 80112fe:	6069      	str	r1, [r5, #4]
 8011300:	60aa      	str	r2, [r5, #8]
 8011302:	60eb      	str	r3, [r5, #12]
 8011304:	8823      	ldrh	r3, [r4, #0]
 8011306:	78a2      	ldrb	r2, [r4, #2]
 8011308:	822b      	strh	r3, [r5, #16]
 801130a:	4613      	mov	r3, r2
 801130c:	74ab      	strb	r3, [r5, #18]
			strcpy(p->startFinish, "s,d,d,d,d,e,e");
 801130e:	687b      	ldr	r3, [r7, #4]
 8011310:	33d8      	adds	r3, #216	; 0xd8
 8011312:	4a85      	ldr	r2, [pc, #532]	; (8011528 <problem_fetch+0x10208>)
 8011314:	461c      	mov	r4, r3
 8011316:	4613      	mov	r3, r2
 8011318:	cb07      	ldmia	r3!, {r0, r1, r2}
 801131a:	6020      	str	r0, [r4, #0]
 801131c:	6061      	str	r1, [r4, #4]
 801131e:	60a2      	str	r2, [r4, #8]
 8011320:	881b      	ldrh	r3, [r3, #0]
 8011322:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade, "7A");
 8011324:	687b      	ldr	r3, [r7, #4]
 8011326:	33cc      	adds	r3, #204	; 0xcc
 8011328:	4a7b      	ldr	r2, [pc, #492]	; (8011518 <problem_fetch+0x101f8>)
 801132a:	8811      	ldrh	r1, [r2, #0]
 801132c:	7892      	ldrb	r2, [r2, #2]
 801132e:	8019      	strh	r1, [r3, #0]
 8011330:	709a      	strb	r2, [r3, #2]
			break;
 8011332:	f009 bd3b 	b.w	801adac <problem_fetch+0x19a8c>
		case 544 :
			strcpy(p->name,"BLACK.HO");
 8011336:	687b      	ldr	r3, [r7, #4]
 8011338:	337c      	adds	r3, #124	; 0x7c
 801133a:	497c      	ldr	r1, [pc, #496]	; (801152c <problem_fetch+0x1020c>)
 801133c:	461a      	mov	r2, r3
 801133e:	460b      	mov	r3, r1
 8011340:	cb03      	ldmia	r3!, {r0, r1}
 8011342:	6010      	str	r0, [r2, #0]
 8011344:	6051      	str	r1, [r2, #4]
 8011346:	781b      	ldrb	r3, [r3, #0]
 8011348:	7213      	strb	r3, [r2, #8]
			p->moveSize = 9;
 801134a:	687b      	ldr	r3, [r7, #4]
 801134c:	2209      	movs	r2, #9
 801134e:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"H,C,A,E,I,A,E,G,H");
 8011350:	687b      	ldr	r3, [r7, #4]
 8011352:	3340      	adds	r3, #64	; 0x40
 8011354:	4a76      	ldr	r2, [pc, #472]	; (8011530 <problem_fetch+0x10210>)
 8011356:	461d      	mov	r5, r3
 8011358:	4614      	mov	r4, r2
 801135a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801135c:	6028      	str	r0, [r5, #0]
 801135e:	6069      	str	r1, [r5, #4]
 8011360:	60aa      	str	r2, [r5, #8]
 8011362:	60eb      	str	r3, [r5, #12]
 8011364:	8823      	ldrh	r3, [r4, #0]
 8011366:	822b      	strh	r3, [r5, #16]
			strcpy(p->moveNumbers,"5,5,9,9,18,14,16,17,12");
 8011368:	687b      	ldr	r3, [r7, #4]
 801136a:	3304      	adds	r3, #4
 801136c:	4a71      	ldr	r2, [pc, #452]	; (8011534 <problem_fetch+0x10214>)
 801136e:	461c      	mov	r4, r3
 8011370:	4615      	mov	r5, r2
 8011372:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011374:	6020      	str	r0, [r4, #0]
 8011376:	6061      	str	r1, [r4, #4]
 8011378:	60a2      	str	r2, [r4, #8]
 801137a:	60e3      	str	r3, [r4, #12]
 801137c:	6828      	ldr	r0, [r5, #0]
 801137e:	6120      	str	r0, [r4, #16]
 8011380:	88ab      	ldrh	r3, [r5, #4]
 8011382:	79aa      	ldrb	r2, [r5, #6]
 8011384:	82a3      	strh	r3, [r4, #20]
 8011386:	4613      	mov	r3, r2
 8011388:	75a3      	strb	r3, [r4, #22]
			strcpy(p->startFinish, "s,d,d,d,e,d,d,d,d");
 801138a:	687b      	ldr	r3, [r7, #4]
 801138c:	33d8      	adds	r3, #216	; 0xd8
 801138e:	4a6a      	ldr	r2, [pc, #424]	; (8011538 <problem_fetch+0x10218>)
 8011390:	461d      	mov	r5, r3
 8011392:	4614      	mov	r4, r2
 8011394:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8011396:	6028      	str	r0, [r5, #0]
 8011398:	6069      	str	r1, [r5, #4]
 801139a:	60aa      	str	r2, [r5, #8]
 801139c:	60eb      	str	r3, [r5, #12]
 801139e:	8823      	ldrh	r3, [r4, #0]
 80113a0:	822b      	strh	r3, [r5, #16]
			strcpy(p->grade, "7C");
 80113a2:	687b      	ldr	r3, [r7, #4]
 80113a4:	33cc      	adds	r3, #204	; 0xcc
 80113a6:	4a65      	ldr	r2, [pc, #404]	; (801153c <problem_fetch+0x1021c>)
 80113a8:	8811      	ldrh	r1, [r2, #0]
 80113aa:	7892      	ldrb	r2, [r2, #2]
 80113ac:	8019      	strh	r1, [r3, #0]
 80113ae:	709a      	strb	r2, [r3, #2]
			break;
 80113b0:	f009 bcfc 	b.w	801adac <problem_fetch+0x19a8c>
		case 545 :
			strcpy(p->name,"SZECHUAN");
 80113b4:	687b      	ldr	r3, [r7, #4]
 80113b6:	337c      	adds	r3, #124	; 0x7c
 80113b8:	4961      	ldr	r1, [pc, #388]	; (8011540 <problem_fetch+0x10220>)
 80113ba:	461a      	mov	r2, r3
 80113bc:	460b      	mov	r3, r1
 80113be:	cb03      	ldmia	r3!, {r0, r1}
 80113c0:	6010      	str	r0, [r2, #0]
 80113c2:	6051      	str	r1, [r2, #4]
 80113c4:	781b      	ldrb	r3, [r3, #0]
 80113c6:	7213      	strb	r3, [r2, #8]
			p->moveSize = 9;
 80113c8:	687b      	ldr	r3, [r7, #4]
 80113ca:	2209      	movs	r2, #9
 80113cc:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"G,C,A,C,E,A,D,G,I");
 80113ce:	687b      	ldr	r3, [r7, #4]
 80113d0:	3340      	adds	r3, #64	; 0x40
 80113d2:	4a5c      	ldr	r2, [pc, #368]	; (8011544 <problem_fetch+0x10224>)
 80113d4:	461d      	mov	r5, r3
 80113d6:	4614      	mov	r4, r2
 80113d8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80113da:	6028      	str	r0, [r5, #0]
 80113dc:	6069      	str	r1, [r5, #4]
 80113de:	60aa      	str	r2, [r5, #8]
 80113e0:	60eb      	str	r3, [r5, #12]
 80113e2:	8823      	ldrh	r3, [r4, #0]
 80113e4:	822b      	strh	r3, [r5, #16]
			strcpy(p->moveNumbers,"4,8,9,5,12,14,15,17,18");
 80113e6:	687b      	ldr	r3, [r7, #4]
 80113e8:	3304      	adds	r3, #4
 80113ea:	4a57      	ldr	r2, [pc, #348]	; (8011548 <problem_fetch+0x10228>)
 80113ec:	461c      	mov	r4, r3
 80113ee:	4615      	mov	r5, r2
 80113f0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80113f2:	6020      	str	r0, [r4, #0]
 80113f4:	6061      	str	r1, [r4, #4]
 80113f6:	60a2      	str	r2, [r4, #8]
 80113f8:	60e3      	str	r3, [r4, #12]
 80113fa:	6828      	ldr	r0, [r5, #0]
 80113fc:	6120      	str	r0, [r4, #16]
 80113fe:	88ab      	ldrh	r3, [r5, #4]
 8011400:	79aa      	ldrb	r2, [r5, #6]
 8011402:	82a3      	strh	r3, [r4, #20]
 8011404:	4613      	mov	r3, r2
 8011406:	75a3      	strb	r3, [r4, #22]
			strcpy(p->startFinish, "s,d,d,d,d,d,d,d,e");
 8011408:	687b      	ldr	r3, [r7, #4]
 801140a:	33d8      	adds	r3, #216	; 0xd8
 801140c:	4a4f      	ldr	r2, [pc, #316]	; (801154c <problem_fetch+0x1022c>)
 801140e:	461d      	mov	r5, r3
 8011410:	4614      	mov	r4, r2
 8011412:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8011414:	6028      	str	r0, [r5, #0]
 8011416:	6069      	str	r1, [r5, #4]
 8011418:	60aa      	str	r2, [r5, #8]
 801141a:	60eb      	str	r3, [r5, #12]
 801141c:	8823      	ldrh	r3, [r4, #0]
 801141e:	822b      	strh	r3, [r5, #16]
			strcpy(p->grade, "7B");
 8011420:	687b      	ldr	r3, [r7, #4]
 8011422:	33cc      	adds	r3, #204	; 0xcc
 8011424:	4a4a      	ldr	r2, [pc, #296]	; (8011550 <problem_fetch+0x10230>)
 8011426:	8811      	ldrh	r1, [r2, #0]
 8011428:	7892      	ldrb	r2, [r2, #2]
 801142a:	8019      	strh	r1, [r3, #0]
 801142c:	709a      	strb	r2, [r3, #2]
			break;
 801142e:	f009 bcbd 	b.w	801adac <problem_fetch+0x19a8c>
		case 546 :
			strcpy(p->name,"FLOOZY DOO");
 8011432:	687b      	ldr	r3, [r7, #4]
 8011434:	337c      	adds	r3, #124	; 0x7c
 8011436:	4947      	ldr	r1, [pc, #284]	; (8011554 <problem_fetch+0x10234>)
 8011438:	461a      	mov	r2, r3
 801143a:	460b      	mov	r3, r1
 801143c:	cb03      	ldmia	r3!, {r0, r1}
 801143e:	6010      	str	r0, [r2, #0]
 8011440:	6051      	str	r1, [r2, #4]
 8011442:	8819      	ldrh	r1, [r3, #0]
 8011444:	789b      	ldrb	r3, [r3, #2]
 8011446:	8111      	strh	r1, [r2, #8]
 8011448:	7293      	strb	r3, [r2, #10]
			p->moveSize = 8;
 801144a:	687b      	ldr	r3, [r7, #4]
 801144c:	2208      	movs	r2, #8
 801144e:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"J,H,G,F,A,C,A,D");
 8011450:	687b      	ldr	r3, [r7, #4]
 8011452:	3340      	adds	r3, #64	; 0x40
 8011454:	4a40      	ldr	r2, [pc, #256]	; (8011558 <problem_fetch+0x10238>)
 8011456:	461c      	mov	r4, r3
 8011458:	4615      	mov	r5, r2
 801145a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801145c:	6020      	str	r0, [r4, #0]
 801145e:	6061      	str	r1, [r4, #4]
 8011460:	60a2      	str	r2, [r4, #8]
 8011462:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,8,9,11,9,13,14,18");
 8011464:	687b      	ldr	r3, [r7, #4]
 8011466:	3304      	adds	r3, #4
 8011468:	4a3c      	ldr	r2, [pc, #240]	; (801155c <problem_fetch+0x1023c>)
 801146a:	461d      	mov	r5, r3
 801146c:	4614      	mov	r4, r2
 801146e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8011470:	6028      	str	r0, [r5, #0]
 8011472:	6069      	str	r1, [r5, #4]
 8011474:	60aa      	str	r2, [r5, #8]
 8011476:	60eb      	str	r3, [r5, #12]
 8011478:	6820      	ldr	r0, [r4, #0]
 801147a:	6128      	str	r0, [r5, #16]
			strcpy(p->startFinish, "s,d,d,d,d,d,d,e");
 801147c:	687b      	ldr	r3, [r7, #4]
 801147e:	33d8      	adds	r3, #216	; 0xd8
 8011480:	4a37      	ldr	r2, [pc, #220]	; (8011560 <problem_fetch+0x10240>)
 8011482:	461c      	mov	r4, r3
 8011484:	4615      	mov	r5, r2
 8011486:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011488:	6020      	str	r0, [r4, #0]
 801148a:	6061      	str	r1, [r4, #4]
 801148c:	60a2      	str	r2, [r4, #8]
 801148e:	60e3      	str	r3, [r4, #12]
			strcpy(p->grade, "7A+");
 8011490:	687b      	ldr	r3, [r7, #4]
 8011492:	33cc      	adds	r3, #204	; 0xcc
 8011494:	4a33      	ldr	r2, [pc, #204]	; (8011564 <problem_fetch+0x10244>)
 8011496:	6810      	ldr	r0, [r2, #0]
 8011498:	6018      	str	r0, [r3, #0]
			break;
 801149a:	f009 bc87 	b.w	801adac <problem_fetch+0x19a8c>
		case 547 :
			strcpy(p->name,"HOG TROUGH");
 801149e:	687b      	ldr	r3, [r7, #4]
 80114a0:	337c      	adds	r3, #124	; 0x7c
 80114a2:	4931      	ldr	r1, [pc, #196]	; (8011568 <problem_fetch+0x10248>)
 80114a4:	461a      	mov	r2, r3
 80114a6:	460b      	mov	r3, r1
 80114a8:	cb03      	ldmia	r3!, {r0, r1}
 80114aa:	6010      	str	r0, [r2, #0]
 80114ac:	6051      	str	r1, [r2, #4]
 80114ae:	8819      	ldrh	r1, [r3, #0]
 80114b0:	789b      	ldrb	r3, [r3, #2]
 80114b2:	8111      	strh	r1, [r2, #8]
 80114b4:	7293      	strb	r3, [r2, #10]
			p->moveSize = 6;
 80114b6:	687b      	ldr	r3, [r7, #4]
 80114b8:	2206      	movs	r2, #6
 80114ba:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"G,D,G,C,D,D");
 80114bc:	687b      	ldr	r3, [r7, #4]
 80114be:	3340      	adds	r3, #64	; 0x40
 80114c0:	4a2a      	ldr	r2, [pc, #168]	; (801156c <problem_fetch+0x1024c>)
 80114c2:	461c      	mov	r4, r3
 80114c4:	4613      	mov	r3, r2
 80114c6:	cb07      	ldmia	r3!, {r0, r1, r2}
 80114c8:	6020      	str	r0, [r4, #0]
 80114ca:	6061      	str	r1, [r4, #4]
 80114cc:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,7,9,13,15,18");
 80114ce:	687b      	ldr	r3, [r7, #4]
 80114d0:	3304      	adds	r3, #4
 80114d2:	4a27      	ldr	r2, [pc, #156]	; (8011570 <problem_fetch+0x10250>)
 80114d4:	461c      	mov	r4, r3
 80114d6:	4613      	mov	r3, r2
 80114d8:	cb07      	ldmia	r3!, {r0, r1, r2}
 80114da:	6020      	str	r0, [r4, #0]
 80114dc:	6061      	str	r1, [r4, #4]
 80114de:	60a2      	str	r2, [r4, #8]
 80114e0:	881a      	ldrh	r2, [r3, #0]
 80114e2:	789b      	ldrb	r3, [r3, #2]
 80114e4:	81a2      	strh	r2, [r4, #12]
 80114e6:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish, "s,d,d,d,d,e");
 80114e8:	687b      	ldr	r3, [r7, #4]
 80114ea:	33d8      	adds	r3, #216	; 0xd8
 80114ec:	4a21      	ldr	r2, [pc, #132]	; (8011574 <problem_fetch+0x10254>)
 80114ee:	461c      	mov	r4, r3
 80114f0:	4613      	mov	r3, r2
 80114f2:	cb07      	ldmia	r3!, {r0, r1, r2}
 80114f4:	6020      	str	r0, [r4, #0]
 80114f6:	6061      	str	r1, [r4, #4]
 80114f8:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade, "6B+");
 80114fa:	687b      	ldr	r3, [r7, #4]
 80114fc:	33cc      	adds	r3, #204	; 0xcc
 80114fe:	4a1e      	ldr	r2, [pc, #120]	; (8011578 <problem_fetch+0x10258>)
 8011500:	6810      	ldr	r0, [r2, #0]
 8011502:	6018      	str	r0, [r3, #0]
			break;
 8011504:	f009 bc52 	b.w	801adac <problem_fetch+0x19a8c>
 8011508:	08026d14 	.word	0x08026d14
 801150c:	08026d20 	.word	0x08026d20
 8011510:	08024114 	.word	0x08024114
 8011514:	08022028 	.word	0x08022028
 8011518:	080212f4 	.word	0x080212f4
 801151c:	08026d28 	.word	0x08026d28
 8011520:	08026d3c 	.word	0x08026d3c
 8011524:	08026d4c 	.word	0x08026d4c
 8011528:	08026d60 	.word	0x08026d60
 801152c:	08026d70 	.word	0x08026d70
 8011530:	08026d7c 	.word	0x08026d7c
 8011534:	08026d90 	.word	0x08026d90
 8011538:	08026da8 	.word	0x08026da8
 801153c:	0802158c 	.word	0x0802158c
 8011540:	08026dbc 	.word	0x08026dbc
 8011544:	08026dc8 	.word	0x08026dc8
 8011548:	08026ddc 	.word	0x08026ddc
 801154c:	08023990 	.word	0x08023990
 8011550:	0802132c 	.word	0x0802132c
 8011554:	08026df4 	.word	0x08026df4
 8011558:	08026e00 	.word	0x08026e00
 801155c:	08026e10 	.word	0x08026e10
 8011560:	08021458 	.word	0x08021458
 8011564:	08021424 	.word	0x08021424
 8011568:	08026e24 	.word	0x08026e24
 801156c:	08026e30 	.word	0x08026e30
 8011570:	08026e3c 	.word	0x08026e3c
 8011574:	0802139c 	.word	0x0802139c
 8011578:	080212b0 	.word	0x080212b0
		case 548 :
			strcpy(p->name,"KILL HIM YOUR LEGS");
 801157c:	687b      	ldr	r3, [r7, #4]
 801157e:	337c      	adds	r3, #124	; 0x7c
 8011580:	4ab6      	ldr	r2, [pc, #728]	; (801185c <problem_fetch+0x1053c>)
 8011582:	461d      	mov	r5, r3
 8011584:	4614      	mov	r4, r2
 8011586:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8011588:	6028      	str	r0, [r5, #0]
 801158a:	6069      	str	r1, [r5, #4]
 801158c:	60aa      	str	r2, [r5, #8]
 801158e:	60eb      	str	r3, [r5, #12]
 8011590:	8823      	ldrh	r3, [r4, #0]
 8011592:	78a2      	ldrb	r2, [r4, #2]
 8011594:	822b      	strh	r3, [r5, #16]
 8011596:	4613      	mov	r3, r2
 8011598:	74ab      	strb	r3, [r5, #18]
			p->moveSize = 4;
 801159a:	687b      	ldr	r3, [r7, #4]
 801159c:	2204      	movs	r2, #4
 801159e:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"G,H,C,I");
 80115a0:	687b      	ldr	r3, [r7, #4]
 80115a2:	3340      	adds	r3, #64	; 0x40
 80115a4:	49ae      	ldr	r1, [pc, #696]	; (8011860 <problem_fetch+0x10540>)
 80115a6:	461a      	mov	r2, r3
 80115a8:	460b      	mov	r3, r1
 80115aa:	cb03      	ldmia	r3!, {r0, r1}
 80115ac:	6010      	str	r0, [r2, #0]
 80115ae:	6051      	str	r1, [r2, #4]
			strcpy(p->moveNumbers,"4,10,13,18");
 80115b0:	687b      	ldr	r3, [r7, #4]
 80115b2:	3304      	adds	r3, #4
 80115b4:	49ab      	ldr	r1, [pc, #684]	; (8011864 <problem_fetch+0x10544>)
 80115b6:	461a      	mov	r2, r3
 80115b8:	460b      	mov	r3, r1
 80115ba:	cb03      	ldmia	r3!, {r0, r1}
 80115bc:	6010      	str	r0, [r2, #0]
 80115be:	6051      	str	r1, [r2, #4]
 80115c0:	8819      	ldrh	r1, [r3, #0]
 80115c2:	789b      	ldrb	r3, [r3, #2]
 80115c4:	8111      	strh	r1, [r2, #8]
 80115c6:	7293      	strb	r3, [r2, #10]
			strcpy(p->startFinish, "s,d,d,e");
 80115c8:	687b      	ldr	r3, [r7, #4]
 80115ca:	33d8      	adds	r3, #216	; 0xd8
 80115cc:	49a6      	ldr	r1, [pc, #664]	; (8011868 <problem_fetch+0x10548>)
 80115ce:	461a      	mov	r2, r3
 80115d0:	460b      	mov	r3, r1
 80115d2:	cb03      	ldmia	r3!, {r0, r1}
 80115d4:	6010      	str	r0, [r2, #0]
 80115d6:	6051      	str	r1, [r2, #4]
			strcpy(p->grade, "7B");
 80115d8:	687b      	ldr	r3, [r7, #4]
 80115da:	33cc      	adds	r3, #204	; 0xcc
 80115dc:	4aa3      	ldr	r2, [pc, #652]	; (801186c <problem_fetch+0x1054c>)
 80115de:	8811      	ldrh	r1, [r2, #0]
 80115e0:	7892      	ldrb	r2, [r2, #2]
 80115e2:	8019      	strh	r1, [r3, #0]
 80115e4:	709a      	strb	r2, [r3, #2]
			break;
 80115e6:	f009 bbe1 	b.w	801adac <problem_fetch+0x19a8c>
		case 549 :
			strcpy(p->name,"LITTLE MAN ON CAMPUS");
 80115ea:	687b      	ldr	r3, [r7, #4]
 80115ec:	337c      	adds	r3, #124	; 0x7c
 80115ee:	4aa0      	ldr	r2, [pc, #640]	; (8011870 <problem_fetch+0x10550>)
 80115f0:	461d      	mov	r5, r3
 80115f2:	4614      	mov	r4, r2
 80115f4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80115f6:	6028      	str	r0, [r5, #0]
 80115f8:	6069      	str	r1, [r5, #4]
 80115fa:	60aa      	str	r2, [r5, #8]
 80115fc:	60eb      	str	r3, [r5, #12]
 80115fe:	6820      	ldr	r0, [r4, #0]
 8011600:	6128      	str	r0, [r5, #16]
 8011602:	7923      	ldrb	r3, [r4, #4]
 8011604:	752b      	strb	r3, [r5, #20]
			p->moveSize = 6;
 8011606:	687b      	ldr	r3, [r7, #4]
 8011608:	2206      	movs	r2, #6
 801160a:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"G,B,F,H,K,I");
 801160c:	687b      	ldr	r3, [r7, #4]
 801160e:	3340      	adds	r3, #64	; 0x40
 8011610:	4a98      	ldr	r2, [pc, #608]	; (8011874 <problem_fetch+0x10554>)
 8011612:	461c      	mov	r4, r3
 8011614:	4613      	mov	r3, r2
 8011616:	cb07      	ldmia	r3!, {r0, r1, r2}
 8011618:	6020      	str	r0, [r4, #0]
 801161a:	6061      	str	r1, [r4, #4]
 801161c:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,6,11,12,14,18");
 801161e:	687b      	ldr	r3, [r7, #4]
 8011620:	3304      	adds	r3, #4
 8011622:	4a95      	ldr	r2, [pc, #596]	; (8011878 <problem_fetch+0x10558>)
 8011624:	461c      	mov	r4, r3
 8011626:	4615      	mov	r5, r2
 8011628:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801162a:	6020      	str	r0, [r4, #0]
 801162c:	6061      	str	r1, [r4, #4]
 801162e:	60a2      	str	r2, [r4, #8]
 8011630:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish, "s,d,d,d,d,e");
 8011632:	687b      	ldr	r3, [r7, #4]
 8011634:	33d8      	adds	r3, #216	; 0xd8
 8011636:	4a91      	ldr	r2, [pc, #580]	; (801187c <problem_fetch+0x1055c>)
 8011638:	461c      	mov	r4, r3
 801163a:	4613      	mov	r3, r2
 801163c:	cb07      	ldmia	r3!, {r0, r1, r2}
 801163e:	6020      	str	r0, [r4, #0]
 8011640:	6061      	str	r1, [r4, #4]
 8011642:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade, "7B");
 8011644:	687b      	ldr	r3, [r7, #4]
 8011646:	33cc      	adds	r3, #204	; 0xcc
 8011648:	4a88      	ldr	r2, [pc, #544]	; (801186c <problem_fetch+0x1054c>)
 801164a:	8811      	ldrh	r1, [r2, #0]
 801164c:	7892      	ldrb	r2, [r2, #2]
 801164e:	8019      	strh	r1, [r3, #0]
 8011650:	709a      	strb	r2, [r3, #2]
			break;
 8011652:	f009 bbab 	b.w	801adac <problem_fetch+0x19a8c>
		case 55 :
			strcpy(p->name,"BOGLI FOR PRESIDENT");
 8011656:	687b      	ldr	r3, [r7, #4]
 8011658:	337c      	adds	r3, #124	; 0x7c
 801165a:	4a89      	ldr	r2, [pc, #548]	; (8011880 <problem_fetch+0x10560>)
 801165c:	461d      	mov	r5, r3
 801165e:	4614      	mov	r4, r2
 8011660:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8011662:	6028      	str	r0, [r5, #0]
 8011664:	6069      	str	r1, [r5, #4]
 8011666:	60aa      	str	r2, [r5, #8]
 8011668:	60eb      	str	r3, [r5, #12]
 801166a:	6820      	ldr	r0, [r4, #0]
 801166c:	6128      	str	r0, [r5, #16]
			p->moveSize = 7;
 801166e:	687b      	ldr	r3, [r7, #4]
 8011670:	2207      	movs	r2, #7
 8011672:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"G,J,I,D,D,A,A");
 8011674:	687b      	ldr	r3, [r7, #4]
 8011676:	3340      	adds	r3, #64	; 0x40
 8011678:	4a82      	ldr	r2, [pc, #520]	; (8011884 <problem_fetch+0x10564>)
 801167a:	461c      	mov	r4, r3
 801167c:	4613      	mov	r3, r2
 801167e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8011680:	6020      	str	r0, [r4, #0]
 8011682:	6061      	str	r1, [r4, #4]
 8011684:	60a2      	str	r2, [r4, #8]
 8011686:	881b      	ldrh	r3, [r3, #0]
 8011688:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"6,5,9,11,15,14,18");
 801168a:	687b      	ldr	r3, [r7, #4]
 801168c:	3304      	adds	r3, #4
 801168e:	4a7e      	ldr	r2, [pc, #504]	; (8011888 <problem_fetch+0x10568>)
 8011690:	461d      	mov	r5, r3
 8011692:	4614      	mov	r4, r2
 8011694:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8011696:	6028      	str	r0, [r5, #0]
 8011698:	6069      	str	r1, [r5, #4]
 801169a:	60aa      	str	r2, [r5, #8]
 801169c:	60eb      	str	r3, [r5, #12]
 801169e:	8823      	ldrh	r3, [r4, #0]
 80116a0:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish, "s,s,d,d,d,d,e");
 80116a2:	687b      	ldr	r3, [r7, #4]
 80116a4:	33d8      	adds	r3, #216	; 0xd8
 80116a6:	4a79      	ldr	r2, [pc, #484]	; (801188c <problem_fetch+0x1056c>)
 80116a8:	461c      	mov	r4, r3
 80116aa:	4613      	mov	r3, r2
 80116ac:	cb07      	ldmia	r3!, {r0, r1, r2}
 80116ae:	6020      	str	r0, [r4, #0]
 80116b0:	6061      	str	r1, [r4, #4]
 80116b2:	60a2      	str	r2, [r4, #8]
 80116b4:	881b      	ldrh	r3, [r3, #0]
 80116b6:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade, "7A+");
 80116b8:	687b      	ldr	r3, [r7, #4]
 80116ba:	33cc      	adds	r3, #204	; 0xcc
 80116bc:	4a74      	ldr	r2, [pc, #464]	; (8011890 <problem_fetch+0x10570>)
 80116be:	6810      	ldr	r0, [r2, #0]
 80116c0:	6018      	str	r0, [r3, #0]
			break;
 80116c2:	f009 bb73 	b.w	801adac <problem_fetch+0x19a8c>
		case 550 :
			strcpy(p->name,"XCRAG");
 80116c6:	687b      	ldr	r3, [r7, #4]
 80116c8:	337c      	adds	r3, #124	; 0x7c
 80116ca:	4a72      	ldr	r2, [pc, #456]	; (8011894 <problem_fetch+0x10574>)
 80116cc:	6810      	ldr	r0, [r2, #0]
 80116ce:	6018      	str	r0, [r3, #0]
 80116d0:	8892      	ldrh	r2, [r2, #4]
 80116d2:	809a      	strh	r2, [r3, #4]
			p->moveSize = 7;
 80116d4:	687b      	ldr	r3, [r7, #4]
 80116d6:	2207      	movs	r2, #7
 80116d8:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"G,J,H,G,C,E,I");
 80116da:	687b      	ldr	r3, [r7, #4]
 80116dc:	3340      	adds	r3, #64	; 0x40
 80116de:	4a6e      	ldr	r2, [pc, #440]	; (8011898 <problem_fetch+0x10578>)
 80116e0:	461c      	mov	r4, r3
 80116e2:	4613      	mov	r3, r2
 80116e4:	cb07      	ldmia	r3!, {r0, r1, r2}
 80116e6:	6020      	str	r0, [r4, #0]
 80116e8:	6061      	str	r1, [r4, #4]
 80116ea:	60a2      	str	r2, [r4, #8]
 80116ec:	881b      	ldrh	r3, [r3, #0]
 80116ee:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,5,8,10,13,14,18");
 80116f0:	687b      	ldr	r3, [r7, #4]
 80116f2:	3304      	adds	r3, #4
 80116f4:	4a69      	ldr	r2, [pc, #420]	; (801189c <problem_fetch+0x1057c>)
 80116f6:	461d      	mov	r5, r3
 80116f8:	4614      	mov	r4, r2
 80116fa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80116fc:	6028      	str	r0, [r5, #0]
 80116fe:	6069      	str	r1, [r5, #4]
 8011700:	60aa      	str	r2, [r5, #8]
 8011702:	60eb      	str	r3, [r5, #12]
 8011704:	8823      	ldrh	r3, [r4, #0]
 8011706:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish, "s,s,d,d,d,d,e");
 8011708:	687b      	ldr	r3, [r7, #4]
 801170a:	33d8      	adds	r3, #216	; 0xd8
 801170c:	4a5f      	ldr	r2, [pc, #380]	; (801188c <problem_fetch+0x1056c>)
 801170e:	461c      	mov	r4, r3
 8011710:	4613      	mov	r3, r2
 8011712:	cb07      	ldmia	r3!, {r0, r1, r2}
 8011714:	6020      	str	r0, [r4, #0]
 8011716:	6061      	str	r1, [r4, #4]
 8011718:	60a2      	str	r2, [r4, #8]
 801171a:	881b      	ldrh	r3, [r3, #0]
 801171c:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade, "6C");
 801171e:	687b      	ldr	r3, [r7, #4]
 8011720:	33cc      	adds	r3, #204	; 0xcc
 8011722:	4a5f      	ldr	r2, [pc, #380]	; (80118a0 <problem_fetch+0x10580>)
 8011724:	8811      	ldrh	r1, [r2, #0]
 8011726:	7892      	ldrb	r2, [r2, #2]
 8011728:	8019      	strh	r1, [r3, #0]
 801172a:	709a      	strb	r2, [r3, #2]
			break;
 801172c:	f009 bb3e 	b.w	801adac <problem_fetch+0x19a8c>
		case 551 :
			strcpy(p->name,"RIESKO");
 8011730:	687b      	ldr	r3, [r7, #4]
 8011732:	337c      	adds	r3, #124	; 0x7c
 8011734:	4a5b      	ldr	r2, [pc, #364]	; (80118a4 <problem_fetch+0x10584>)
 8011736:	6810      	ldr	r0, [r2, #0]
 8011738:	6018      	str	r0, [r3, #0]
 801173a:	8891      	ldrh	r1, [r2, #4]
 801173c:	7992      	ldrb	r2, [r2, #6]
 801173e:	8099      	strh	r1, [r3, #4]
 8011740:	719a      	strb	r2, [r3, #6]
			p->moveSize = 6;
 8011742:	687b      	ldr	r3, [r7, #4]
 8011744:	2206      	movs	r2, #6
 8011746:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"G,G,K,F,E,A");
 8011748:	687b      	ldr	r3, [r7, #4]
 801174a:	3340      	adds	r3, #64	; 0x40
 801174c:	4a56      	ldr	r2, [pc, #344]	; (80118a8 <problem_fetch+0x10588>)
 801174e:	461c      	mov	r4, r3
 8011750:	4613      	mov	r3, r2
 8011752:	cb07      	ldmia	r3!, {r0, r1, r2}
 8011754:	6020      	str	r0, [r4, #0]
 8011756:	6061      	str	r1, [r4, #4]
 8011758:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,6,9,11,14,18");
 801175a:	687b      	ldr	r3, [r7, #4]
 801175c:	3304      	adds	r3, #4
 801175e:	4a53      	ldr	r2, [pc, #332]	; (80118ac <problem_fetch+0x1058c>)
 8011760:	461c      	mov	r4, r3
 8011762:	4613      	mov	r3, r2
 8011764:	cb07      	ldmia	r3!, {r0, r1, r2}
 8011766:	6020      	str	r0, [r4, #0]
 8011768:	6061      	str	r1, [r4, #4]
 801176a:	60a2      	str	r2, [r4, #8]
 801176c:	881a      	ldrh	r2, [r3, #0]
 801176e:	789b      	ldrb	r3, [r3, #2]
 8011770:	81a2      	strh	r2, [r4, #12]
 8011772:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish, "s,s,d,d,d,e");
 8011774:	687b      	ldr	r3, [r7, #4]
 8011776:	33d8      	adds	r3, #216	; 0xd8
 8011778:	4a4d      	ldr	r2, [pc, #308]	; (80118b0 <problem_fetch+0x10590>)
 801177a:	461c      	mov	r4, r3
 801177c:	4613      	mov	r3, r2
 801177e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8011780:	6020      	str	r0, [r4, #0]
 8011782:	6061      	str	r1, [r4, #4]
 8011784:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade, "6B+");
 8011786:	687b      	ldr	r3, [r7, #4]
 8011788:	33cc      	adds	r3, #204	; 0xcc
 801178a:	4a4a      	ldr	r2, [pc, #296]	; (80118b4 <problem_fetch+0x10594>)
 801178c:	6810      	ldr	r0, [r2, #0]
 801178e:	6018      	str	r0, [r3, #0]
			break;
 8011790:	f009 bb0c 	b.w	801adac <problem_fetch+0x19a8c>
		case 552 :
			strcpy(p->name,"KIWAK");
 8011794:	687b      	ldr	r3, [r7, #4]
 8011796:	337c      	adds	r3, #124	; 0x7c
 8011798:	4a47      	ldr	r2, [pc, #284]	; (80118b8 <problem_fetch+0x10598>)
 801179a:	6810      	ldr	r0, [r2, #0]
 801179c:	6018      	str	r0, [r3, #0]
 801179e:	8892      	ldrh	r2, [r2, #4]
 80117a0:	809a      	strh	r2, [r3, #4]
			p->moveSize = 7;
 80117a2:	687b      	ldr	r3, [r7, #4]
 80117a4:	2207      	movs	r2, #7
 80117a6:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"G,G,H,E,G,D,A");
 80117a8:	687b      	ldr	r3, [r7, #4]
 80117aa:	3340      	adds	r3, #64	; 0x40
 80117ac:	4a43      	ldr	r2, [pc, #268]	; (80118bc <problem_fetch+0x1059c>)
 80117ae:	461c      	mov	r4, r3
 80117b0:	4613      	mov	r3, r2
 80117b2:	cb07      	ldmia	r3!, {r0, r1, r2}
 80117b4:	6020      	str	r0, [r4, #0]
 80117b6:	6061      	str	r1, [r4, #4]
 80117b8:	60a2      	str	r2, [r4, #8]
 80117ba:	881b      	ldrh	r3, [r3, #0]
 80117bc:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,6,12,14,9,15,18");
 80117be:	687b      	ldr	r3, [r7, #4]
 80117c0:	3304      	adds	r3, #4
 80117c2:	4a3f      	ldr	r2, [pc, #252]	; (80118c0 <problem_fetch+0x105a0>)
 80117c4:	461d      	mov	r5, r3
 80117c6:	4614      	mov	r4, r2
 80117c8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80117ca:	6028      	str	r0, [r5, #0]
 80117cc:	6069      	str	r1, [r5, #4]
 80117ce:	60aa      	str	r2, [r5, #8]
 80117d0:	60eb      	str	r3, [r5, #12]
 80117d2:	8823      	ldrh	r3, [r4, #0]
 80117d4:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish, "s,d,d,d,d,d,e");
 80117d6:	687b      	ldr	r3, [r7, #4]
 80117d8:	33d8      	adds	r3, #216	; 0xd8
 80117da:	4a3a      	ldr	r2, [pc, #232]	; (80118c4 <problem_fetch+0x105a4>)
 80117dc:	461c      	mov	r4, r3
 80117de:	4613      	mov	r3, r2
 80117e0:	cb07      	ldmia	r3!, {r0, r1, r2}
 80117e2:	6020      	str	r0, [r4, #0]
 80117e4:	6061      	str	r1, [r4, #4]
 80117e6:	60a2      	str	r2, [r4, #8]
 80117e8:	881b      	ldrh	r3, [r3, #0]
 80117ea:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade, "6B+");
 80117ec:	687b      	ldr	r3, [r7, #4]
 80117ee:	33cc      	adds	r3, #204	; 0xcc
 80117f0:	4a30      	ldr	r2, [pc, #192]	; (80118b4 <problem_fetch+0x10594>)
 80117f2:	6810      	ldr	r0, [r2, #0]
 80117f4:	6018      	str	r0, [r3, #0]
			break;
 80117f6:	f009 bad9 	b.w	801adac <problem_fetch+0x19a8c>
		case 553 :
			strcpy(p->name,"BLACK MARINO");
 80117fa:	687b      	ldr	r3, [r7, #4]
 80117fc:	337c      	adds	r3, #124	; 0x7c
 80117fe:	4a32      	ldr	r2, [pc, #200]	; (80118c8 <problem_fetch+0x105a8>)
 8011800:	461c      	mov	r4, r3
 8011802:	4613      	mov	r3, r2
 8011804:	cb07      	ldmia	r3!, {r0, r1, r2}
 8011806:	6020      	str	r0, [r4, #0]
 8011808:	6061      	str	r1, [r4, #4]
 801180a:	60a2      	str	r2, [r4, #8]
 801180c:	781b      	ldrb	r3, [r3, #0]
 801180e:	7323      	strb	r3, [r4, #12]
			p->moveSize = 6;
 8011810:	687b      	ldr	r3, [r7, #4]
 8011812:	2206      	movs	r2, #6
 8011814:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"E,J,H,C,E,D");
 8011816:	687b      	ldr	r3, [r7, #4]
 8011818:	3340      	adds	r3, #64	; 0x40
 801181a:	4a2c      	ldr	r2, [pc, #176]	; (80118cc <problem_fetch+0x105ac>)
 801181c:	461c      	mov	r4, r3
 801181e:	4613      	mov	r3, r2
 8011820:	cb07      	ldmia	r3!, {r0, r1, r2}
 8011822:	6020      	str	r0, [r4, #0]
 8011824:	6061      	str	r1, [r4, #4]
 8011826:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"6,5,10,13,16,18");
 8011828:	687b      	ldr	r3, [r7, #4]
 801182a:	3304      	adds	r3, #4
 801182c:	4a28      	ldr	r2, [pc, #160]	; (80118d0 <problem_fetch+0x105b0>)
 801182e:	461c      	mov	r4, r3
 8011830:	4615      	mov	r5, r2
 8011832:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011834:	6020      	str	r0, [r4, #0]
 8011836:	6061      	str	r1, [r4, #4]
 8011838:	60a2      	str	r2, [r4, #8]
 801183a:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish, "s,s,d,d,d,e");
 801183c:	687b      	ldr	r3, [r7, #4]
 801183e:	33d8      	adds	r3, #216	; 0xd8
 8011840:	4a1b      	ldr	r2, [pc, #108]	; (80118b0 <problem_fetch+0x10590>)
 8011842:	461c      	mov	r4, r3
 8011844:	4613      	mov	r3, r2
 8011846:	cb07      	ldmia	r3!, {r0, r1, r2}
 8011848:	6020      	str	r0, [r4, #0]
 801184a:	6061      	str	r1, [r4, #4]
 801184c:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade, "6C+");
 801184e:	687b      	ldr	r3, [r7, #4]
 8011850:	33cc      	adds	r3, #204	; 0xcc
 8011852:	4a20      	ldr	r2, [pc, #128]	; (80118d4 <problem_fetch+0x105b4>)
 8011854:	6810      	ldr	r0, [r2, #0]
 8011856:	6018      	str	r0, [r3, #0]
			break;
 8011858:	f009 baa8 	b.w	801adac <problem_fetch+0x19a8c>
 801185c:	08026e4c 	.word	0x08026e4c
 8011860:	08026e60 	.word	0x08026e60
 8011864:	08023a28 	.word	0x08023a28
 8011868:	08022028 	.word	0x08022028
 801186c:	0802132c 	.word	0x0802132c
 8011870:	08026e68 	.word	0x08026e68
 8011874:	08026e80 	.word	0x08026e80
 8011878:	08026e8c 	.word	0x08026e8c
 801187c:	0802139c 	.word	0x0802139c
 8011880:	08026e9c 	.word	0x08026e9c
 8011884:	08026eb0 	.word	0x08026eb0
 8011888:	08026ec0 	.word	0x08026ec0
 801188c:	080212a0 	.word	0x080212a0
 8011890:	08021424 	.word	0x08021424
 8011894:	08026ed4 	.word	0x08026ed4
 8011898:	08026edc 	.word	0x08026edc
 801189c:	08026eec 	.word	0x08026eec
 80118a0:	08021370 	.word	0x08021370
 80118a4:	08026f00 	.word	0x08026f00
 80118a8:	08026f08 	.word	0x08026f08
 80118ac:	08026f14 	.word	0x08026f14
 80118b0:	08021910 	.word	0x08021910
 80118b4:	080212b0 	.word	0x080212b0
 80118b8:	08026f24 	.word	0x08026f24
 80118bc:	08026f2c 	.word	0x08026f2c
 80118c0:	08026f3c 	.word	0x08026f3c
 80118c4:	08021494 	.word	0x08021494
 80118c8:	08026f50 	.word	0x08026f50
 80118cc:	08026f60 	.word	0x08026f60
 80118d0:	0802484c 	.word	0x0802484c
 80118d4:	080213a8 	.word	0x080213a8
		case 554 :
			strcpy(p->name,"JUDEMANDUD");
 80118d8:	687b      	ldr	r3, [r7, #4]
 80118da:	337c      	adds	r3, #124	; 0x7c
 80118dc:	49b9      	ldr	r1, [pc, #740]	; (8011bc4 <problem_fetch+0x108a4>)
 80118de:	461a      	mov	r2, r3
 80118e0:	460b      	mov	r3, r1
 80118e2:	cb03      	ldmia	r3!, {r0, r1}
 80118e4:	6010      	str	r0, [r2, #0]
 80118e6:	6051      	str	r1, [r2, #4]
 80118e8:	8819      	ldrh	r1, [r3, #0]
 80118ea:	789b      	ldrb	r3, [r3, #2]
 80118ec:	8111      	strh	r1, [r2, #8]
 80118ee:	7293      	strb	r3, [r2, #10]
			p->moveSize = 7;
 80118f0:	687b      	ldr	r3, [r7, #4]
 80118f2:	2207      	movs	r2, #7
 80118f4:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"H,E,E,A,B,B,A");
 80118f6:	687b      	ldr	r3, [r7, #4]
 80118f8:	3340      	adds	r3, #64	; 0x40
 80118fa:	4ab3      	ldr	r2, [pc, #716]	; (8011bc8 <problem_fetch+0x108a8>)
 80118fc:	461c      	mov	r4, r3
 80118fe:	4613      	mov	r3, r2
 8011900:	cb07      	ldmia	r3!, {r0, r1, r2}
 8011902:	6020      	str	r0, [r4, #0]
 8011904:	6061      	str	r1, [r4, #4]
 8011906:	60a2      	str	r2, [r4, #8]
 8011908:	881b      	ldrh	r3, [r3, #0]
 801190a:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,9,6,9,12,15,18");
 801190c:	687b      	ldr	r3, [r7, #4]
 801190e:	3304      	adds	r3, #4
 8011910:	4aae      	ldr	r2, [pc, #696]	; (8011bcc <problem_fetch+0x108ac>)
 8011912:	461d      	mov	r5, r3
 8011914:	4614      	mov	r4, r2
 8011916:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8011918:	6028      	str	r0, [r5, #0]
 801191a:	6069      	str	r1, [r5, #4]
 801191c:	60aa      	str	r2, [r5, #8]
 801191e:	60eb      	str	r3, [r5, #12]
 8011920:	7823      	ldrb	r3, [r4, #0]
 8011922:	742b      	strb	r3, [r5, #16]
			strcpy(p->startFinish, "s,d,s,d,d,d,e");
 8011924:	687b      	ldr	r3, [r7, #4]
 8011926:	33d8      	adds	r3, #216	; 0xd8
 8011928:	4aa9      	ldr	r2, [pc, #676]	; (8011bd0 <problem_fetch+0x108b0>)
 801192a:	461c      	mov	r4, r3
 801192c:	4613      	mov	r3, r2
 801192e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8011930:	6020      	str	r0, [r4, #0]
 8011932:	6061      	str	r1, [r4, #4]
 8011934:	60a2      	str	r2, [r4, #8]
 8011936:	881b      	ldrh	r3, [r3, #0]
 8011938:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade, "7A");
 801193a:	687b      	ldr	r3, [r7, #4]
 801193c:	33cc      	adds	r3, #204	; 0xcc
 801193e:	4aa5      	ldr	r2, [pc, #660]	; (8011bd4 <problem_fetch+0x108b4>)
 8011940:	8811      	ldrh	r1, [r2, #0]
 8011942:	7892      	ldrb	r2, [r2, #2]
 8011944:	8019      	strh	r1, [r3, #0]
 8011946:	709a      	strb	r2, [r3, #2]
			break;
 8011948:	f009 ba30 	b.w	801adac <problem_fetch+0x19a8c>
		case 555 :
			strcpy(p->name,"ALONE IN THE DARK");
 801194c:	687b      	ldr	r3, [r7, #4]
 801194e:	337c      	adds	r3, #124	; 0x7c
 8011950:	4aa1      	ldr	r2, [pc, #644]	; (8011bd8 <problem_fetch+0x108b8>)
 8011952:	461d      	mov	r5, r3
 8011954:	4614      	mov	r4, r2
 8011956:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8011958:	6028      	str	r0, [r5, #0]
 801195a:	6069      	str	r1, [r5, #4]
 801195c:	60aa      	str	r2, [r5, #8]
 801195e:	60eb      	str	r3, [r5, #12]
 8011960:	8823      	ldrh	r3, [r4, #0]
 8011962:	822b      	strh	r3, [r5, #16]
			p->moveSize = 6;
 8011964:	687b      	ldr	r3, [r7, #4]
 8011966:	2206      	movs	r2, #6
 8011968:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"G,E,I,G,I,I");
 801196a:	687b      	ldr	r3, [r7, #4]
 801196c:	3340      	adds	r3, #64	; 0x40
 801196e:	4a9b      	ldr	r2, [pc, #620]	; (8011bdc <problem_fetch+0x108bc>)
 8011970:	461c      	mov	r4, r3
 8011972:	4613      	mov	r3, r2
 8011974:	cb07      	ldmia	r3!, {r0, r1, r2}
 8011976:	6020      	str	r0, [r4, #0]
 8011978:	6061      	str	r1, [r4, #4]
 801197a:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,8,10,14,14,18");
 801197c:	687b      	ldr	r3, [r7, #4]
 801197e:	3304      	adds	r3, #4
 8011980:	4a97      	ldr	r2, [pc, #604]	; (8011be0 <problem_fetch+0x108c0>)
 8011982:	461c      	mov	r4, r3
 8011984:	4615      	mov	r5, r2
 8011986:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011988:	6020      	str	r0, [r4, #0]
 801198a:	6061      	str	r1, [r4, #4]
 801198c:	60a2      	str	r2, [r4, #8]
 801198e:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish, "s,d,d,d,d,e");
 8011990:	687b      	ldr	r3, [r7, #4]
 8011992:	33d8      	adds	r3, #216	; 0xd8
 8011994:	4a93      	ldr	r2, [pc, #588]	; (8011be4 <problem_fetch+0x108c4>)
 8011996:	461c      	mov	r4, r3
 8011998:	4613      	mov	r3, r2
 801199a:	cb07      	ldmia	r3!, {r0, r1, r2}
 801199c:	6020      	str	r0, [r4, #0]
 801199e:	6061      	str	r1, [r4, #4]
 80119a0:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade, "7A");
 80119a2:	687b      	ldr	r3, [r7, #4]
 80119a4:	33cc      	adds	r3, #204	; 0xcc
 80119a6:	4a8b      	ldr	r2, [pc, #556]	; (8011bd4 <problem_fetch+0x108b4>)
 80119a8:	8811      	ldrh	r1, [r2, #0]
 80119aa:	7892      	ldrb	r2, [r2, #2]
 80119ac:	8019      	strh	r1, [r3, #0]
 80119ae:	709a      	strb	r2, [r3, #2]
			break;
 80119b0:	f009 b9fc 	b.w	801adac <problem_fetch+0x19a8c>
		case 556 :
			strcpy(p->name,"WORLD CUP");
 80119b4:	687b      	ldr	r3, [r7, #4]
 80119b6:	337c      	adds	r3, #124	; 0x7c
 80119b8:	498b      	ldr	r1, [pc, #556]	; (8011be8 <problem_fetch+0x108c8>)
 80119ba:	461a      	mov	r2, r3
 80119bc:	460b      	mov	r3, r1
 80119be:	cb03      	ldmia	r3!, {r0, r1}
 80119c0:	6010      	str	r0, [r2, #0]
 80119c2:	6051      	str	r1, [r2, #4]
 80119c4:	881b      	ldrh	r3, [r3, #0]
 80119c6:	8113      	strh	r3, [r2, #8]
			p->moveSize = 9;
 80119c8:	687b      	ldr	r3, [r7, #4]
 80119ca:	2209      	movs	r2, #9
 80119cc:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"J,G,H,H,I,J,G,J,I");
 80119ce:	687b      	ldr	r3, [r7, #4]
 80119d0:	3340      	adds	r3, #64	; 0x40
 80119d2:	4a86      	ldr	r2, [pc, #536]	; (8011bec <problem_fetch+0x108cc>)
 80119d4:	461d      	mov	r5, r3
 80119d6:	4614      	mov	r4, r2
 80119d8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80119da:	6028      	str	r0, [r5, #0]
 80119dc:	6069      	str	r1, [r5, #4]
 80119de:	60aa      	str	r2, [r5, #8]
 80119e0:	60eb      	str	r3, [r5, #12]
 80119e2:	8823      	ldrh	r3, [r4, #0]
 80119e4:	822b      	strh	r3, [r5, #16]
			strcpy(p->moveNumbers,"5,6,5,10,10,13,15,16,18");
 80119e6:	687b      	ldr	r3, [r7, #4]
 80119e8:	3304      	adds	r3, #4
 80119ea:	4a81      	ldr	r2, [pc, #516]	; (8011bf0 <problem_fetch+0x108d0>)
 80119ec:	461d      	mov	r5, r3
 80119ee:	4614      	mov	r4, r2
 80119f0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80119f2:	6028      	str	r0, [r5, #0]
 80119f4:	6069      	str	r1, [r5, #4]
 80119f6:	60aa      	str	r2, [r5, #8]
 80119f8:	60eb      	str	r3, [r5, #12]
 80119fa:	cc03      	ldmia	r4!, {r0, r1}
 80119fc:	6128      	str	r0, [r5, #16]
 80119fe:	6169      	str	r1, [r5, #20]
			strcpy(p->startFinish, "s,s,d,d,d,d,d,d,e");
 8011a00:	687b      	ldr	r3, [r7, #4]
 8011a02:	33d8      	adds	r3, #216	; 0xd8
 8011a04:	4a7b      	ldr	r2, [pc, #492]	; (8011bf4 <problem_fetch+0x108d4>)
 8011a06:	461d      	mov	r5, r3
 8011a08:	4614      	mov	r4, r2
 8011a0a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8011a0c:	6028      	str	r0, [r5, #0]
 8011a0e:	6069      	str	r1, [r5, #4]
 8011a10:	60aa      	str	r2, [r5, #8]
 8011a12:	60eb      	str	r3, [r5, #12]
 8011a14:	8823      	ldrh	r3, [r4, #0]
 8011a16:	822b      	strh	r3, [r5, #16]
			strcpy(p->grade, "6B+");
 8011a18:	687b      	ldr	r3, [r7, #4]
 8011a1a:	33cc      	adds	r3, #204	; 0xcc
 8011a1c:	4a76      	ldr	r2, [pc, #472]	; (8011bf8 <problem_fetch+0x108d8>)
 8011a1e:	6810      	ldr	r0, [r2, #0]
 8011a20:	6018      	str	r0, [r3, #0]
			break;
 8011a22:	f009 b9c3 	b.w	801adac <problem_fetch+0x19a8c>
		case 557 :
			strcpy(p->name,"BEST PROBLEM 567");
 8011a26:	687b      	ldr	r3, [r7, #4]
 8011a28:	337c      	adds	r3, #124	; 0x7c
 8011a2a:	4a74      	ldr	r2, [pc, #464]	; (8011bfc <problem_fetch+0x108dc>)
 8011a2c:	461d      	mov	r5, r3
 8011a2e:	4614      	mov	r4, r2
 8011a30:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8011a32:	6028      	str	r0, [r5, #0]
 8011a34:	6069      	str	r1, [r5, #4]
 8011a36:	60aa      	str	r2, [r5, #8]
 8011a38:	60eb      	str	r3, [r5, #12]
 8011a3a:	7823      	ldrb	r3, [r4, #0]
 8011a3c:	742b      	strb	r3, [r5, #16]
			p->moveSize = 6;
 8011a3e:	687b      	ldr	r3, [r7, #4]
 8011a40:	2206      	movs	r2, #6
 8011a42:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"E,E,H,E,A,G");
 8011a44:	687b      	ldr	r3, [r7, #4]
 8011a46:	3340      	adds	r3, #64	; 0x40
 8011a48:	4a6d      	ldr	r2, [pc, #436]	; (8011c00 <problem_fetch+0x108e0>)
 8011a4a:	461c      	mov	r4, r3
 8011a4c:	4613      	mov	r3, r2
 8011a4e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8011a50:	6020      	str	r0, [r4, #0]
 8011a52:	6061      	str	r1, [r4, #4]
 8011a54:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"6,8,13,14,18,4");
 8011a56:	687b      	ldr	r3, [r7, #4]
 8011a58:	3304      	adds	r3, #4
 8011a5a:	4a6a      	ldr	r2, [pc, #424]	; (8011c04 <problem_fetch+0x108e4>)
 8011a5c:	461c      	mov	r4, r3
 8011a5e:	4613      	mov	r3, r2
 8011a60:	cb07      	ldmia	r3!, {r0, r1, r2}
 8011a62:	6020      	str	r0, [r4, #0]
 8011a64:	6061      	str	r1, [r4, #4]
 8011a66:	60a2      	str	r2, [r4, #8]
 8011a68:	881a      	ldrh	r2, [r3, #0]
 8011a6a:	789b      	ldrb	r3, [r3, #2]
 8011a6c:	81a2      	strh	r2, [r4, #12]
 8011a6e:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish, "d,d,d,d,e,s");
 8011a70:	687b      	ldr	r3, [r7, #4]
 8011a72:	33d8      	adds	r3, #216	; 0xd8
 8011a74:	4a64      	ldr	r2, [pc, #400]	; (8011c08 <problem_fetch+0x108e8>)
 8011a76:	461c      	mov	r4, r3
 8011a78:	4613      	mov	r3, r2
 8011a7a:	cb07      	ldmia	r3!, {r0, r1, r2}
 8011a7c:	6020      	str	r0, [r4, #0]
 8011a7e:	6061      	str	r1, [r4, #4]
 8011a80:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade, "6C");
 8011a82:	687b      	ldr	r3, [r7, #4]
 8011a84:	33cc      	adds	r3, #204	; 0xcc
 8011a86:	4a61      	ldr	r2, [pc, #388]	; (8011c0c <problem_fetch+0x108ec>)
 8011a88:	8811      	ldrh	r1, [r2, #0]
 8011a8a:	7892      	ldrb	r2, [r2, #2]
 8011a8c:	8019      	strh	r1, [r3, #0]
 8011a8e:	709a      	strb	r2, [r3, #2]
			break;
 8011a90:	f009 b98c 	b.w	801adac <problem_fetch+0x19a8c>
		case 558 :
			strcpy(p->name,"YAYYY");
 8011a94:	687b      	ldr	r3, [r7, #4]
 8011a96:	337c      	adds	r3, #124	; 0x7c
 8011a98:	4a5d      	ldr	r2, [pc, #372]	; (8011c10 <problem_fetch+0x108f0>)
 8011a9a:	6810      	ldr	r0, [r2, #0]
 8011a9c:	6018      	str	r0, [r3, #0]
 8011a9e:	8892      	ldrh	r2, [r2, #4]
 8011aa0:	809a      	strh	r2, [r3, #4]
			p->moveSize = 8;
 8011aa2:	687b      	ldr	r3, [r7, #4]
 8011aa4:	2208      	movs	r2, #8
 8011aa6:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"G,J,H,G,H,G,H,I");
 8011aa8:	687b      	ldr	r3, [r7, #4]
 8011aaa:	3340      	adds	r3, #64	; 0x40
 8011aac:	4a59      	ldr	r2, [pc, #356]	; (8011c14 <problem_fetch+0x108f4>)
 8011aae:	461c      	mov	r4, r3
 8011ab0:	4615      	mov	r5, r2
 8011ab2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011ab4:	6020      	str	r0, [r4, #0]
 8011ab6:	6061      	str	r1, [r4, #4]
 8011ab8:	60a2      	str	r2, [r4, #8]
 8011aba:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,5,8,9,12,15,16,18");
 8011abc:	687b      	ldr	r3, [r7, #4]
 8011abe:	3304      	adds	r3, #4
 8011ac0:	4a55      	ldr	r2, [pc, #340]	; (8011c18 <problem_fetch+0x108f8>)
 8011ac2:	461d      	mov	r5, r3
 8011ac4:	4614      	mov	r4, r2
 8011ac6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8011ac8:	6028      	str	r0, [r5, #0]
 8011aca:	6069      	str	r1, [r5, #4]
 8011acc:	60aa      	str	r2, [r5, #8]
 8011ace:	60eb      	str	r3, [r5, #12]
 8011ad0:	6820      	ldr	r0, [r4, #0]
 8011ad2:	6128      	str	r0, [r5, #16]
			strcpy(p->startFinish, "s,s,d,d,d,d,d,e");
 8011ad4:	687b      	ldr	r3, [r7, #4]
 8011ad6:	33d8      	adds	r3, #216	; 0xd8
 8011ad8:	4a50      	ldr	r2, [pc, #320]	; (8011c1c <problem_fetch+0x108fc>)
 8011ada:	461c      	mov	r4, r3
 8011adc:	4615      	mov	r5, r2
 8011ade:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011ae0:	6020      	str	r0, [r4, #0]
 8011ae2:	6061      	str	r1, [r4, #4]
 8011ae4:	60a2      	str	r2, [r4, #8]
 8011ae6:	60e3      	str	r3, [r4, #12]
			strcpy(p->grade, "6B+");
 8011ae8:	687b      	ldr	r3, [r7, #4]
 8011aea:	33cc      	adds	r3, #204	; 0xcc
 8011aec:	4a42      	ldr	r2, [pc, #264]	; (8011bf8 <problem_fetch+0x108d8>)
 8011aee:	6810      	ldr	r0, [r2, #0]
 8011af0:	6018      	str	r0, [r3, #0]
			break;
 8011af2:	f009 b95b 	b.w	801adac <problem_fetch+0x19a8c>
		case 559 :
			strcpy(p->name,"WOOO");
 8011af6:	687b      	ldr	r3, [r7, #4]
 8011af8:	337c      	adds	r3, #124	; 0x7c
 8011afa:	4a49      	ldr	r2, [pc, #292]	; (8011c20 <problem_fetch+0x10900>)
 8011afc:	6810      	ldr	r0, [r2, #0]
 8011afe:	6018      	str	r0, [r3, #0]
 8011b00:	7912      	ldrb	r2, [r2, #4]
 8011b02:	711a      	strb	r2, [r3, #4]
			p->moveSize = 8;
 8011b04:	687b      	ldr	r3, [r7, #4]
 8011b06:	2208      	movs	r2, #8
 8011b08:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"G,J,H,G,F,H,G,I");
 8011b0a:	687b      	ldr	r3, [r7, #4]
 8011b0c:	3340      	adds	r3, #64	; 0x40
 8011b0e:	4a45      	ldr	r2, [pc, #276]	; (8011c24 <problem_fetch+0x10904>)
 8011b10:	461c      	mov	r4, r3
 8011b12:	4615      	mov	r5, r2
 8011b14:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011b16:	6020      	str	r0, [r4, #0]
 8011b18:	6061      	str	r1, [r4, #4]
 8011b1a:	60a2      	str	r2, [r4, #8]
 8011b1c:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,5,8,9,13,16,17,18");
 8011b1e:	687b      	ldr	r3, [r7, #4]
 8011b20:	3304      	adds	r3, #4
 8011b22:	4a41      	ldr	r2, [pc, #260]	; (8011c28 <problem_fetch+0x10908>)
 8011b24:	461d      	mov	r5, r3
 8011b26:	4614      	mov	r4, r2
 8011b28:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8011b2a:	6028      	str	r0, [r5, #0]
 8011b2c:	6069      	str	r1, [r5, #4]
 8011b2e:	60aa      	str	r2, [r5, #8]
 8011b30:	60eb      	str	r3, [r5, #12]
 8011b32:	6820      	ldr	r0, [r4, #0]
 8011b34:	6128      	str	r0, [r5, #16]
			strcpy(p->startFinish, "s,s,d,d,d,d,d,e");
 8011b36:	687b      	ldr	r3, [r7, #4]
 8011b38:	33d8      	adds	r3, #216	; 0xd8
 8011b3a:	4a38      	ldr	r2, [pc, #224]	; (8011c1c <problem_fetch+0x108fc>)
 8011b3c:	461c      	mov	r4, r3
 8011b3e:	4615      	mov	r5, r2
 8011b40:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011b42:	6020      	str	r0, [r4, #0]
 8011b44:	6061      	str	r1, [r4, #4]
 8011b46:	60a2      	str	r2, [r4, #8]
 8011b48:	60e3      	str	r3, [r4, #12]
			strcpy(p->grade, "6B+");
 8011b4a:	687b      	ldr	r3, [r7, #4]
 8011b4c:	33cc      	adds	r3, #204	; 0xcc
 8011b4e:	4a2a      	ldr	r2, [pc, #168]	; (8011bf8 <problem_fetch+0x108d8>)
 8011b50:	6810      	ldr	r0, [r2, #0]
 8011b52:	6018      	str	r0, [r3, #0]
			break;
 8011b54:	f009 b92a 	b.w	801adac <problem_fetch+0x19a8c>
		case 56 :
			strcpy(p->name,"SMOKING AREA");
 8011b58:	687b      	ldr	r3, [r7, #4]
 8011b5a:	337c      	adds	r3, #124	; 0x7c
 8011b5c:	4a33      	ldr	r2, [pc, #204]	; (8011c2c <problem_fetch+0x1090c>)
 8011b5e:	461c      	mov	r4, r3
 8011b60:	4613      	mov	r3, r2
 8011b62:	cb07      	ldmia	r3!, {r0, r1, r2}
 8011b64:	6020      	str	r0, [r4, #0]
 8011b66:	6061      	str	r1, [r4, #4]
 8011b68:	60a2      	str	r2, [r4, #8]
 8011b6a:	781b      	ldrb	r3, [r3, #0]
 8011b6c:	7323      	strb	r3, [r4, #12]
			p->moveSize = 6;
 8011b6e:	687b      	ldr	r3, [r7, #4]
 8011b70:	2206      	movs	r2, #6
 8011b72:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"G,H,C,E,E,I");
 8011b74:	687b      	ldr	r3, [r7, #4]
 8011b76:	3340      	adds	r3, #64	; 0x40
 8011b78:	4a2d      	ldr	r2, [pc, #180]	; (8011c30 <problem_fetch+0x10910>)
 8011b7a:	461c      	mov	r4, r3
 8011b7c:	4613      	mov	r3, r2
 8011b7e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8011b80:	6020      	str	r0, [r4, #0]
 8011b82:	6061      	str	r1, [r4, #4]
 8011b84:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,8,8,12,16,18");
 8011b86:	687b      	ldr	r3, [r7, #4]
 8011b88:	3304      	adds	r3, #4
 8011b8a:	4a2a      	ldr	r2, [pc, #168]	; (8011c34 <problem_fetch+0x10914>)
 8011b8c:	461c      	mov	r4, r3
 8011b8e:	4613      	mov	r3, r2
 8011b90:	cb07      	ldmia	r3!, {r0, r1, r2}
 8011b92:	6020      	str	r0, [r4, #0]
 8011b94:	6061      	str	r1, [r4, #4]
 8011b96:	60a2      	str	r2, [r4, #8]
 8011b98:	881a      	ldrh	r2, [r3, #0]
 8011b9a:	789b      	ldrb	r3, [r3, #2]
 8011b9c:	81a2      	strh	r2, [r4, #12]
 8011b9e:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish, "s,d,d,d,d,e");
 8011ba0:	687b      	ldr	r3, [r7, #4]
 8011ba2:	33d8      	adds	r3, #216	; 0xd8
 8011ba4:	4a0f      	ldr	r2, [pc, #60]	; (8011be4 <problem_fetch+0x108c4>)
 8011ba6:	461c      	mov	r4, r3
 8011ba8:	4613      	mov	r3, r2
 8011baa:	cb07      	ldmia	r3!, {r0, r1, r2}
 8011bac:	6020      	str	r0, [r4, #0]
 8011bae:	6061      	str	r1, [r4, #4]
 8011bb0:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade, "6C");
 8011bb2:	687b      	ldr	r3, [r7, #4]
 8011bb4:	33cc      	adds	r3, #204	; 0xcc
 8011bb6:	4a15      	ldr	r2, [pc, #84]	; (8011c0c <problem_fetch+0x108ec>)
 8011bb8:	8811      	ldrh	r1, [r2, #0]
 8011bba:	7892      	ldrb	r2, [r2, #2]
 8011bbc:	8019      	strh	r1, [r3, #0]
 8011bbe:	709a      	strb	r2, [r3, #2]
			break;
 8011bc0:	f009 b8f4 	b.w	801adac <problem_fetch+0x19a8c>
 8011bc4:	08026f6c 	.word	0x08026f6c
 8011bc8:	08026f78 	.word	0x08026f78
 8011bcc:	08026f88 	.word	0x08026f88
 8011bd0:	08026f9c 	.word	0x08026f9c
 8011bd4:	080212f4 	.word	0x080212f4
 8011bd8:	08026fac 	.word	0x08026fac
 8011bdc:	08026fc0 	.word	0x08026fc0
 8011be0:	08026fcc 	.word	0x08026fcc
 8011be4:	0802139c 	.word	0x0802139c
 8011be8:	08026fdc 	.word	0x08026fdc
 8011bec:	08026fe8 	.word	0x08026fe8
 8011bf0:	08026ffc 	.word	0x08026ffc
 8011bf4:	0802187c 	.word	0x0802187c
 8011bf8:	080212b0 	.word	0x080212b0
 8011bfc:	08027014 	.word	0x08027014
 8011c00:	08027028 	.word	0x08027028
 8011c04:	08027034 	.word	0x08027034
 8011c08:	08027044 	.word	0x08027044
 8011c0c:	08021370 	.word	0x08021370
 8011c10:	08027050 	.word	0x08027050
 8011c14:	08027058 	.word	0x08027058
 8011c18:	08027068 	.word	0x08027068
 8011c1c:	080214cc 	.word	0x080214cc
 8011c20:	0802707c 	.word	0x0802707c
 8011c24:	08027084 	.word	0x08027084
 8011c28:	08027094 	.word	0x08027094
 8011c2c:	080270a8 	.word	0x080270a8
 8011c30:	080270b8 	.word	0x080270b8
 8011c34:	080270c4 	.word	0x080270c4
		case 560 :
			strcpy(p->name,"LORD VADER");
 8011c38:	687b      	ldr	r3, [r7, #4]
 8011c3a:	337c      	adds	r3, #124	; 0x7c
 8011c3c:	49aa      	ldr	r1, [pc, #680]	; (8011ee8 <problem_fetch+0x10bc8>)
 8011c3e:	461a      	mov	r2, r3
 8011c40:	460b      	mov	r3, r1
 8011c42:	cb03      	ldmia	r3!, {r0, r1}
 8011c44:	6010      	str	r0, [r2, #0]
 8011c46:	6051      	str	r1, [r2, #4]
 8011c48:	8819      	ldrh	r1, [r3, #0]
 8011c4a:	789b      	ldrb	r3, [r3, #2]
 8011c4c:	8111      	strh	r1, [r2, #8]
 8011c4e:	7293      	strb	r3, [r2, #10]
			p->moveSize = 8;
 8011c50:	687b      	ldr	r3, [r7, #4]
 8011c52:	2208      	movs	r2, #8
 8011c54:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"C,C,H,F,E,G,D,D");
 8011c56:	687b      	ldr	r3, [r7, #4]
 8011c58:	3340      	adds	r3, #64	; 0x40
 8011c5a:	4aa4      	ldr	r2, [pc, #656]	; (8011eec <problem_fetch+0x10bcc>)
 8011c5c:	461c      	mov	r4, r3
 8011c5e:	4615      	mov	r5, r2
 8011c60:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011c62:	6020      	str	r0, [r4, #0]
 8011c64:	6061      	str	r1, [r4, #4]
 8011c66:	60a2      	str	r2, [r4, #8]
 8011c68:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,8,10,13,6,14,15,18");
 8011c6a:	687b      	ldr	r3, [r7, #4]
 8011c6c:	3304      	adds	r3, #4
 8011c6e:	4aa0      	ldr	r2, [pc, #640]	; (8011ef0 <problem_fetch+0x10bd0>)
 8011c70:	461d      	mov	r5, r3
 8011c72:	4614      	mov	r4, r2
 8011c74:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8011c76:	6028      	str	r0, [r5, #0]
 8011c78:	6069      	str	r1, [r5, #4]
 8011c7a:	60aa      	str	r2, [r5, #8]
 8011c7c:	60eb      	str	r3, [r5, #12]
 8011c7e:	6820      	ldr	r0, [r4, #0]
 8011c80:	6128      	str	r0, [r5, #16]
 8011c82:	7923      	ldrb	r3, [r4, #4]
 8011c84:	752b      	strb	r3, [r5, #20]
			strcpy(p->startFinish, "s,d,d,d,s,d,d,e");
 8011c86:	687b      	ldr	r3, [r7, #4]
 8011c88:	33d8      	adds	r3, #216	; 0xd8
 8011c8a:	4a9a      	ldr	r2, [pc, #616]	; (8011ef4 <problem_fetch+0x10bd4>)
 8011c8c:	461c      	mov	r4, r3
 8011c8e:	4615      	mov	r5, r2
 8011c90:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011c92:	6020      	str	r0, [r4, #0]
 8011c94:	6061      	str	r1, [r4, #4]
 8011c96:	60a2      	str	r2, [r4, #8]
 8011c98:	60e3      	str	r3, [r4, #12]
			strcpy(p->grade, "6C+");
 8011c9a:	687b      	ldr	r3, [r7, #4]
 8011c9c:	33cc      	adds	r3, #204	; 0xcc
 8011c9e:	4a96      	ldr	r2, [pc, #600]	; (8011ef8 <problem_fetch+0x10bd8>)
 8011ca0:	6810      	ldr	r0, [r2, #0]
 8011ca2:	6018      	str	r0, [r3, #0]
			break;
 8011ca4:	f009 b882 	b.w	801adac <problem_fetch+0x19a8c>
		case 561 :
			strcpy(p->name,"BLACK IS WHERE YOU AT");
 8011ca8:	687b      	ldr	r3, [r7, #4]
 8011caa:	337c      	adds	r3, #124	; 0x7c
 8011cac:	4a93      	ldr	r2, [pc, #588]	; (8011efc <problem_fetch+0x10bdc>)
 8011cae:	461d      	mov	r5, r3
 8011cb0:	4614      	mov	r4, r2
 8011cb2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8011cb4:	6028      	str	r0, [r5, #0]
 8011cb6:	6069      	str	r1, [r5, #4]
 8011cb8:	60aa      	str	r2, [r5, #8]
 8011cba:	60eb      	str	r3, [r5, #12]
 8011cbc:	6820      	ldr	r0, [r4, #0]
 8011cbe:	6128      	str	r0, [r5, #16]
 8011cc0:	88a3      	ldrh	r3, [r4, #4]
 8011cc2:	82ab      	strh	r3, [r5, #20]
			p->moveSize = 8;
 8011cc4:	687b      	ldr	r3, [r7, #4]
 8011cc6:	2208      	movs	r2, #8
 8011cc8:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"E,G,E,E,B,D,B,E");
 8011cca:	687b      	ldr	r3, [r7, #4]
 8011ccc:	3340      	adds	r3, #64	; 0x40
 8011cce:	4a8c      	ldr	r2, [pc, #560]	; (8011f00 <problem_fetch+0x10be0>)
 8011cd0:	461c      	mov	r4, r3
 8011cd2:	4615      	mov	r5, r2
 8011cd4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011cd6:	6020      	str	r0, [r4, #0]
 8011cd8:	6061      	str	r1, [r4, #4]
 8011cda:	60a2      	str	r2, [r4, #8]
 8011cdc:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"6,4,9,12,15,18,12,16");
 8011cde:	687b      	ldr	r3, [r7, #4]
 8011ce0:	3304      	adds	r3, #4
 8011ce2:	4a88      	ldr	r2, [pc, #544]	; (8011f04 <problem_fetch+0x10be4>)
 8011ce4:	461d      	mov	r5, r3
 8011ce6:	4614      	mov	r4, r2
 8011ce8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8011cea:	6028      	str	r0, [r5, #0]
 8011cec:	6069      	str	r1, [r5, #4]
 8011cee:	60aa      	str	r2, [r5, #8]
 8011cf0:	60eb      	str	r3, [r5, #12]
 8011cf2:	6820      	ldr	r0, [r4, #0]
 8011cf4:	6128      	str	r0, [r5, #16]
 8011cf6:	7923      	ldrb	r3, [r4, #4]
 8011cf8:	752b      	strb	r3, [r5, #20]
			strcpy(p->startFinish, "s,s,d,d,d,e,d,d");
 8011cfa:	687b      	ldr	r3, [r7, #4]
 8011cfc:	33d8      	adds	r3, #216	; 0xd8
 8011cfe:	4a82      	ldr	r2, [pc, #520]	; (8011f08 <problem_fetch+0x10be8>)
 8011d00:	461c      	mov	r4, r3
 8011d02:	4615      	mov	r5, r2
 8011d04:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011d06:	6020      	str	r0, [r4, #0]
 8011d08:	6061      	str	r1, [r4, #4]
 8011d0a:	60a2      	str	r2, [r4, #8]
 8011d0c:	60e3      	str	r3, [r4, #12]
			strcpy(p->grade, "7A");
 8011d0e:	687b      	ldr	r3, [r7, #4]
 8011d10:	33cc      	adds	r3, #204	; 0xcc
 8011d12:	4a7e      	ldr	r2, [pc, #504]	; (8011f0c <problem_fetch+0x10bec>)
 8011d14:	8811      	ldrh	r1, [r2, #0]
 8011d16:	7892      	ldrb	r2, [r2, #2]
 8011d18:	8019      	strh	r1, [r3, #0]
 8011d1a:	709a      	strb	r2, [r3, #2]
			break;
 8011d1c:	f009 b846 	b.w	801adac <problem_fetch+0x19a8c>
		case 562 :
			strcpy(p->name,"WHAT IS YOUR PROBLEM???");
 8011d20:	687b      	ldr	r3, [r7, #4]
 8011d22:	337c      	adds	r3, #124	; 0x7c
 8011d24:	4a7a      	ldr	r2, [pc, #488]	; (8011f10 <problem_fetch+0x10bf0>)
 8011d26:	461d      	mov	r5, r3
 8011d28:	4614      	mov	r4, r2
 8011d2a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8011d2c:	6028      	str	r0, [r5, #0]
 8011d2e:	6069      	str	r1, [r5, #4]
 8011d30:	60aa      	str	r2, [r5, #8]
 8011d32:	60eb      	str	r3, [r5, #12]
 8011d34:	cc03      	ldmia	r4!, {r0, r1}
 8011d36:	6128      	str	r0, [r5, #16]
 8011d38:	6169      	str	r1, [r5, #20]
			p->moveSize = 8;
 8011d3a:	687b      	ldr	r3, [r7, #4]
 8011d3c:	2208      	movs	r2, #8
 8011d3e:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"C,G,E,D,F,I,F,I");
 8011d40:	687b      	ldr	r3, [r7, #4]
 8011d42:	3340      	adds	r3, #64	; 0x40
 8011d44:	4a73      	ldr	r2, [pc, #460]	; (8011f14 <problem_fetch+0x10bf4>)
 8011d46:	461c      	mov	r4, r3
 8011d48:	4615      	mov	r5, r2
 8011d4a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011d4c:	6020      	str	r0, [r4, #0]
 8011d4e:	6061      	str	r1, [r4, #4]
 8011d50:	60a2      	str	r2, [r4, #8]
 8011d52:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,6,8,11,11,14,13,18");
 8011d54:	687b      	ldr	r3, [r7, #4]
 8011d56:	3304      	adds	r3, #4
 8011d58:	4a6f      	ldr	r2, [pc, #444]	; (8011f18 <problem_fetch+0x10bf8>)
 8011d5a:	461d      	mov	r5, r3
 8011d5c:	4614      	mov	r4, r2
 8011d5e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8011d60:	6028      	str	r0, [r5, #0]
 8011d62:	6069      	str	r1, [r5, #4]
 8011d64:	60aa      	str	r2, [r5, #8]
 8011d66:	60eb      	str	r3, [r5, #12]
 8011d68:	6820      	ldr	r0, [r4, #0]
 8011d6a:	6128      	str	r0, [r5, #16]
 8011d6c:	7923      	ldrb	r3, [r4, #4]
 8011d6e:	752b      	strb	r3, [r5, #20]
			strcpy(p->startFinish, "d,s,d,d,d,d,d,e");
 8011d70:	687b      	ldr	r3, [r7, #4]
 8011d72:	33d8      	adds	r3, #216	; 0xd8
 8011d74:	4a69      	ldr	r2, [pc, #420]	; (8011f1c <problem_fetch+0x10bfc>)
 8011d76:	461c      	mov	r4, r3
 8011d78:	4615      	mov	r5, r2
 8011d7a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011d7c:	6020      	str	r0, [r4, #0]
 8011d7e:	6061      	str	r1, [r4, #4]
 8011d80:	60a2      	str	r2, [r4, #8]
 8011d82:	60e3      	str	r3, [r4, #12]
			strcpy(p->grade, "6C");
 8011d84:	687b      	ldr	r3, [r7, #4]
 8011d86:	33cc      	adds	r3, #204	; 0xcc
 8011d88:	4a65      	ldr	r2, [pc, #404]	; (8011f20 <problem_fetch+0x10c00>)
 8011d8a:	8811      	ldrh	r1, [r2, #0]
 8011d8c:	7892      	ldrb	r2, [r2, #2]
 8011d8e:	8019      	strh	r1, [r3, #0]
 8011d90:	709a      	strb	r2, [r3, #2]
			break;
 8011d92:	f009 b80b 	b.w	801adac <problem_fetch+0x19a8c>
		case 563 :
			strcpy(p->name,"FIRST SNOW");
 8011d96:	687b      	ldr	r3, [r7, #4]
 8011d98:	337c      	adds	r3, #124	; 0x7c
 8011d9a:	4962      	ldr	r1, [pc, #392]	; (8011f24 <problem_fetch+0x10c04>)
 8011d9c:	461a      	mov	r2, r3
 8011d9e:	460b      	mov	r3, r1
 8011da0:	cb03      	ldmia	r3!, {r0, r1}
 8011da2:	6010      	str	r0, [r2, #0]
 8011da4:	6051      	str	r1, [r2, #4]
 8011da6:	8819      	ldrh	r1, [r3, #0]
 8011da8:	789b      	ldrb	r3, [r3, #2]
 8011daa:	8111      	strh	r1, [r2, #8]
 8011dac:	7293      	strb	r3, [r2, #10]
			p->moveSize = 5;
 8011dae:	687b      	ldr	r3, [r7, #4]
 8011db0:	2205      	movs	r2, #5
 8011db2:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"B,B,B,B,D");
 8011db4:	687b      	ldr	r3, [r7, #4]
 8011db6:	3340      	adds	r3, #64	; 0x40
 8011db8:	495b      	ldr	r1, [pc, #364]	; (8011f28 <problem_fetch+0x10c08>)
 8011dba:	461a      	mov	r2, r3
 8011dbc:	460b      	mov	r3, r1
 8011dbe:	cb03      	ldmia	r3!, {r0, r1}
 8011dc0:	6010      	str	r0, [r2, #0]
 8011dc2:	6051      	str	r1, [r2, #4]
 8011dc4:	881b      	ldrh	r3, [r3, #0]
 8011dc6:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"6,10,12,15,18");
 8011dc8:	687b      	ldr	r3, [r7, #4]
 8011dca:	3304      	adds	r3, #4
 8011dcc:	4a57      	ldr	r2, [pc, #348]	; (8011f2c <problem_fetch+0x10c0c>)
 8011dce:	461c      	mov	r4, r3
 8011dd0:	4613      	mov	r3, r2
 8011dd2:	cb07      	ldmia	r3!, {r0, r1, r2}
 8011dd4:	6020      	str	r0, [r4, #0]
 8011dd6:	6061      	str	r1, [r4, #4]
 8011dd8:	60a2      	str	r2, [r4, #8]
 8011dda:	881b      	ldrh	r3, [r3, #0]
 8011ddc:	81a3      	strh	r3, [r4, #12]
			strcpy(p->startFinish, "s,d,d,d,e");
 8011dde:	687b      	ldr	r3, [r7, #4]
 8011de0:	33d8      	adds	r3, #216	; 0xd8
 8011de2:	4953      	ldr	r1, [pc, #332]	; (8011f30 <problem_fetch+0x10c10>)
 8011de4:	461a      	mov	r2, r3
 8011de6:	460b      	mov	r3, r1
 8011de8:	cb03      	ldmia	r3!, {r0, r1}
 8011dea:	6010      	str	r0, [r2, #0]
 8011dec:	6051      	str	r1, [r2, #4]
 8011dee:	881b      	ldrh	r3, [r3, #0]
 8011df0:	8113      	strh	r3, [r2, #8]
			strcpy(p->grade, "7A");
 8011df2:	687b      	ldr	r3, [r7, #4]
 8011df4:	33cc      	adds	r3, #204	; 0xcc
 8011df6:	4a45      	ldr	r2, [pc, #276]	; (8011f0c <problem_fetch+0x10bec>)
 8011df8:	8811      	ldrh	r1, [r2, #0]
 8011dfa:	7892      	ldrb	r2, [r2, #2]
 8011dfc:	8019      	strh	r1, [r3, #0]
 8011dfe:	709a      	strb	r2, [r3, #2]
			break;
 8011e00:	f008 bfd4 	b.w	801adac <problem_fetch+0x19a8c>
		case 564 :
			strcpy(p->name,"TAR");
 8011e04:	687b      	ldr	r3, [r7, #4]
 8011e06:	337c      	adds	r3, #124	; 0x7c
 8011e08:	4a4a      	ldr	r2, [pc, #296]	; (8011f34 <problem_fetch+0x10c14>)
 8011e0a:	6810      	ldr	r0, [r2, #0]
 8011e0c:	6018      	str	r0, [r3, #0]
			p->moveSize = 9;
 8011e0e:	687b      	ldr	r3, [r7, #4]
 8011e10:	2209      	movs	r2, #9
 8011e12:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"G,C,D,B,D,I,H,E,F");
 8011e14:	687b      	ldr	r3, [r7, #4]
 8011e16:	3340      	adds	r3, #64	; 0x40
 8011e18:	4a47      	ldr	r2, [pc, #284]	; (8011f38 <problem_fetch+0x10c18>)
 8011e1a:	461d      	mov	r5, r3
 8011e1c:	4614      	mov	r4, r2
 8011e1e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8011e20:	6028      	str	r0, [r5, #0]
 8011e22:	6069      	str	r1, [r5, #4]
 8011e24:	60aa      	str	r2, [r5, #8]
 8011e26:	60eb      	str	r3, [r5, #12]
 8011e28:	8823      	ldrh	r3, [r4, #0]
 8011e2a:	822b      	strh	r3, [r5, #16]
			strcpy(p->moveNumbers,"4,13,15,15,18,7,8,9,11");
 8011e2c:	687b      	ldr	r3, [r7, #4]
 8011e2e:	3304      	adds	r3, #4
 8011e30:	4a42      	ldr	r2, [pc, #264]	; (8011f3c <problem_fetch+0x10c1c>)
 8011e32:	461c      	mov	r4, r3
 8011e34:	4615      	mov	r5, r2
 8011e36:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011e38:	6020      	str	r0, [r4, #0]
 8011e3a:	6061      	str	r1, [r4, #4]
 8011e3c:	60a2      	str	r2, [r4, #8]
 8011e3e:	60e3      	str	r3, [r4, #12]
 8011e40:	6828      	ldr	r0, [r5, #0]
 8011e42:	6120      	str	r0, [r4, #16]
 8011e44:	88ab      	ldrh	r3, [r5, #4]
 8011e46:	79aa      	ldrb	r2, [r5, #6]
 8011e48:	82a3      	strh	r3, [r4, #20]
 8011e4a:	4613      	mov	r3, r2
 8011e4c:	75a3      	strb	r3, [r4, #22]
			strcpy(p->startFinish, "s,d,d,d,e,d,d,d,d");
 8011e4e:	687b      	ldr	r3, [r7, #4]
 8011e50:	33d8      	adds	r3, #216	; 0xd8
 8011e52:	4a3b      	ldr	r2, [pc, #236]	; (8011f40 <problem_fetch+0x10c20>)
 8011e54:	461d      	mov	r5, r3
 8011e56:	4614      	mov	r4, r2
 8011e58:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8011e5a:	6028      	str	r0, [r5, #0]
 8011e5c:	6069      	str	r1, [r5, #4]
 8011e5e:	60aa      	str	r2, [r5, #8]
 8011e60:	60eb      	str	r3, [r5, #12]
 8011e62:	8823      	ldrh	r3, [r4, #0]
 8011e64:	822b      	strh	r3, [r5, #16]
			strcpy(p->grade, "7A+");
 8011e66:	687b      	ldr	r3, [r7, #4]
 8011e68:	33cc      	adds	r3, #204	; 0xcc
 8011e6a:	4a36      	ldr	r2, [pc, #216]	; (8011f44 <problem_fetch+0x10c24>)
 8011e6c:	6810      	ldr	r0, [r2, #0]
 8011e6e:	6018      	str	r0, [r3, #0]
			break;
 8011e70:	f008 bf9c 	b.w	801adac <problem_fetch+0x19a8c>
		case 565 :
			strcpy(p->name,"HOONGA");
 8011e74:	687b      	ldr	r3, [r7, #4]
 8011e76:	337c      	adds	r3, #124	; 0x7c
 8011e78:	4a33      	ldr	r2, [pc, #204]	; (8011f48 <problem_fetch+0x10c28>)
 8011e7a:	6810      	ldr	r0, [r2, #0]
 8011e7c:	6018      	str	r0, [r3, #0]
 8011e7e:	8891      	ldrh	r1, [r2, #4]
 8011e80:	7992      	ldrb	r2, [r2, #6]
 8011e82:	8099      	strh	r1, [r3, #4]
 8011e84:	719a      	strb	r2, [r3, #6]
			p->moveSize = 9;
 8011e86:	687b      	ldr	r3, [r7, #4]
 8011e88:	2209      	movs	r2, #9
 8011e8a:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"B,D,B,C,D,H,G,H,I");
 8011e8c:	687b      	ldr	r3, [r7, #4]
 8011e8e:	3340      	adds	r3, #64	; 0x40
 8011e90:	4a2e      	ldr	r2, [pc, #184]	; (8011f4c <problem_fetch+0x10c2c>)
 8011e92:	461d      	mov	r5, r3
 8011e94:	4614      	mov	r4, r2
 8011e96:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8011e98:	6028      	str	r0, [r5, #0]
 8011e9a:	6069      	str	r1, [r5, #4]
 8011e9c:	60aa      	str	r2, [r5, #8]
 8011e9e:	60eb      	str	r3, [r5, #12]
 8011ea0:	8823      	ldrh	r3, [r4, #0]
 8011ea2:	822b      	strh	r3, [r5, #16]
			strcpy(p->moveNumbers,"6,7,10,5,11,13,14,16,18");
 8011ea4:	687b      	ldr	r3, [r7, #4]
 8011ea6:	3304      	adds	r3, #4
 8011ea8:	4a29      	ldr	r2, [pc, #164]	; (8011f50 <problem_fetch+0x10c30>)
 8011eaa:	461d      	mov	r5, r3
 8011eac:	4614      	mov	r4, r2
 8011eae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8011eb0:	6028      	str	r0, [r5, #0]
 8011eb2:	6069      	str	r1, [r5, #4]
 8011eb4:	60aa      	str	r2, [r5, #8]
 8011eb6:	60eb      	str	r3, [r5, #12]
 8011eb8:	cc03      	ldmia	r4!, {r0, r1}
 8011eba:	6128      	str	r0, [r5, #16]
 8011ebc:	6169      	str	r1, [r5, #20]
			strcpy(p->startFinish, "s,d,d,s,d,d,d,d,e");
 8011ebe:	687b      	ldr	r3, [r7, #4]
 8011ec0:	33d8      	adds	r3, #216	; 0xd8
 8011ec2:	4a24      	ldr	r2, [pc, #144]	; (8011f54 <problem_fetch+0x10c34>)
 8011ec4:	461d      	mov	r5, r3
 8011ec6:	4614      	mov	r4, r2
 8011ec8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8011eca:	6028      	str	r0, [r5, #0]
 8011ecc:	6069      	str	r1, [r5, #4]
 8011ece:	60aa      	str	r2, [r5, #8]
 8011ed0:	60eb      	str	r3, [r5, #12]
 8011ed2:	8823      	ldrh	r3, [r4, #0]
 8011ed4:	822b      	strh	r3, [r5, #16]
			strcpy(p->grade, "7C");
 8011ed6:	687b      	ldr	r3, [r7, #4]
 8011ed8:	33cc      	adds	r3, #204	; 0xcc
 8011eda:	4a1f      	ldr	r2, [pc, #124]	; (8011f58 <problem_fetch+0x10c38>)
 8011edc:	8811      	ldrh	r1, [r2, #0]
 8011ede:	7892      	ldrb	r2, [r2, #2]
 8011ee0:	8019      	strh	r1, [r3, #0]
 8011ee2:	709a      	strb	r2, [r3, #2]
			break;
 8011ee4:	f008 bf62 	b.w	801adac <problem_fetch+0x19a8c>
 8011ee8:	080270d4 	.word	0x080270d4
 8011eec:	080270e0 	.word	0x080270e0
 8011ef0:	080270f0 	.word	0x080270f0
 8011ef4:	08021360 	.word	0x08021360
 8011ef8:	080213a8 	.word	0x080213a8
 8011efc:	08027108 	.word	0x08027108
 8011f00:	08027120 	.word	0x08027120
 8011f04:	08027130 	.word	0x08027130
 8011f08:	08027148 	.word	0x08027148
 8011f0c:	080212f4 	.word	0x080212f4
 8011f10:	08027158 	.word	0x08027158
 8011f14:	08027170 	.word	0x08027170
 8011f18:	08027180 	.word	0x08027180
 8011f1c:	08027198 	.word	0x08027198
 8011f20:	08021370 	.word	0x08021370
 8011f24:	080271a8 	.word	0x080271a8
 8011f28:	080271b4 	.word	0x080271b4
 8011f2c:	080271c0 	.word	0x080271c0
 8011f30:	08021320 	.word	0x08021320
 8011f34:	080271d0 	.word	0x080271d0
 8011f38:	080271d4 	.word	0x080271d4
 8011f3c:	080271e8 	.word	0x080271e8
 8011f40:	08026da8 	.word	0x08026da8
 8011f44:	08021424 	.word	0x08021424
 8011f48:	08027200 	.word	0x08027200
 8011f4c:	08027208 	.word	0x08027208
 8011f50:	0802721c 	.word	0x0802721c
 8011f54:	08027234 	.word	0x08027234
 8011f58:	0802158c 	.word	0x0802158c
		case 566 :
			strcpy(p->name,"PROBLEM#148");
 8011f5c:	687b      	ldr	r3, [r7, #4]
 8011f5e:	337c      	adds	r3, #124	; 0x7c
 8011f60:	4a9f      	ldr	r2, [pc, #636]	; (80121e0 <problem_fetch+0x10ec0>)
 8011f62:	461c      	mov	r4, r3
 8011f64:	4613      	mov	r3, r2
 8011f66:	cb07      	ldmia	r3!, {r0, r1, r2}
 8011f68:	6020      	str	r0, [r4, #0]
 8011f6a:	6061      	str	r1, [r4, #4]
 8011f6c:	60a2      	str	r2, [r4, #8]
			p->moveSize = 10;
 8011f6e:	687b      	ldr	r3, [r7, #4]
 8011f70:	220a      	movs	r2, #10
 8011f72:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"H,I,E,F,E,I,D,E,B,A");
 8011f74:	687b      	ldr	r3, [r7, #4]
 8011f76:	3340      	adds	r3, #64	; 0x40
 8011f78:	4a9a      	ldr	r2, [pc, #616]	; (80121e4 <problem_fetch+0x10ec4>)
 8011f7a:	461d      	mov	r5, r3
 8011f7c:	4614      	mov	r4, r2
 8011f7e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8011f80:	6028      	str	r0, [r5, #0]
 8011f82:	6069      	str	r1, [r5, #4]
 8011f84:	60aa      	str	r2, [r5, #8]
 8011f86:	60eb      	str	r3, [r5, #12]
 8011f88:	6820      	ldr	r0, [r4, #0]
 8011f8a:	6128      	str	r0, [r5, #16]
			strcpy(p->moveNumbers,"5,7,8,11,12,14,15,16,15,18");
 8011f8c:	687b      	ldr	r3, [r7, #4]
 8011f8e:	3304      	adds	r3, #4
 8011f90:	4a95      	ldr	r2, [pc, #596]	; (80121e8 <problem_fetch+0x10ec8>)
 8011f92:	461d      	mov	r5, r3
 8011f94:	4614      	mov	r4, r2
 8011f96:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8011f98:	6028      	str	r0, [r5, #0]
 8011f9a:	6069      	str	r1, [r5, #4]
 8011f9c:	60aa      	str	r2, [r5, #8]
 8011f9e:	60eb      	str	r3, [r5, #12]
 8011fa0:	cc03      	ldmia	r4!, {r0, r1}
 8011fa2:	6128      	str	r0, [r5, #16]
 8011fa4:	6169      	str	r1, [r5, #20]
 8011fa6:	8823      	ldrh	r3, [r4, #0]
 8011fa8:	78a2      	ldrb	r2, [r4, #2]
 8011faa:	832b      	strh	r3, [r5, #24]
 8011fac:	4613      	mov	r3, r2
 8011fae:	76ab      	strb	r3, [r5, #26]
			strcpy(p->startFinish, "s,d,d,d,d,d,d,d,d,e");
 8011fb0:	687b      	ldr	r3, [r7, #4]
 8011fb2:	33d8      	adds	r3, #216	; 0xd8
 8011fb4:	4a8d      	ldr	r2, [pc, #564]	; (80121ec <problem_fetch+0x10ecc>)
 8011fb6:	461d      	mov	r5, r3
 8011fb8:	4614      	mov	r4, r2
 8011fba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8011fbc:	6028      	str	r0, [r5, #0]
 8011fbe:	6069      	str	r1, [r5, #4]
 8011fc0:	60aa      	str	r2, [r5, #8]
 8011fc2:	60eb      	str	r3, [r5, #12]
 8011fc4:	6820      	ldr	r0, [r4, #0]
 8011fc6:	6128      	str	r0, [r5, #16]
			strcpy(p->grade, "6B+");
 8011fc8:	687b      	ldr	r3, [r7, #4]
 8011fca:	33cc      	adds	r3, #204	; 0xcc
 8011fcc:	4a88      	ldr	r2, [pc, #544]	; (80121f0 <problem_fetch+0x10ed0>)
 8011fce:	6810      	ldr	r0, [r2, #0]
 8011fd0:	6018      	str	r0, [r3, #0]
			break;
 8011fd2:	f008 beeb 	b.w	801adac <problem_fetch+0x19a8c>
		case 567 :
			strcpy(p->name,"JAM FUNK");
 8011fd6:	687b      	ldr	r3, [r7, #4]
 8011fd8:	337c      	adds	r3, #124	; 0x7c
 8011fda:	4986      	ldr	r1, [pc, #536]	; (80121f4 <problem_fetch+0x10ed4>)
 8011fdc:	461a      	mov	r2, r3
 8011fde:	460b      	mov	r3, r1
 8011fe0:	cb03      	ldmia	r3!, {r0, r1}
 8011fe2:	6010      	str	r0, [r2, #0]
 8011fe4:	6051      	str	r1, [r2, #4]
 8011fe6:	781b      	ldrb	r3, [r3, #0]
 8011fe8:	7213      	strb	r3, [r2, #8]
			p->moveSize = 8;
 8011fea:	687b      	ldr	r3, [r7, #4]
 8011fec:	2208      	movs	r2, #8
 8011fee:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"B,G,H,B,C,D,B,D");
 8011ff0:	687b      	ldr	r3, [r7, #4]
 8011ff2:	3340      	adds	r3, #64	; 0x40
 8011ff4:	4a80      	ldr	r2, [pc, #512]	; (80121f8 <problem_fetch+0x10ed8>)
 8011ff6:	461c      	mov	r4, r3
 8011ff8:	4615      	mov	r5, r2
 8011ffa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011ffc:	6020      	str	r0, [r4, #0]
 8011ffe:	6061      	str	r1, [r4, #4]
 8012000:	60a2      	str	r2, [r4, #8]
 8012002:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"10,10,13,12,16,18,6,7");
 8012004:	687b      	ldr	r3, [r7, #4]
 8012006:	3304      	adds	r3, #4
 8012008:	4a7c      	ldr	r2, [pc, #496]	; (80121fc <problem_fetch+0x10edc>)
 801200a:	461d      	mov	r5, r3
 801200c:	4614      	mov	r4, r2
 801200e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8012010:	6028      	str	r0, [r5, #0]
 8012012:	6069      	str	r1, [r5, #4]
 8012014:	60aa      	str	r2, [r5, #8]
 8012016:	60eb      	str	r3, [r5, #12]
 8012018:	6820      	ldr	r0, [r4, #0]
 801201a:	6128      	str	r0, [r5, #16]
 801201c:	88a3      	ldrh	r3, [r4, #4]
 801201e:	82ab      	strh	r3, [r5, #20]
			strcpy(p->startFinish, "d,d,d,d,d,e,s,d");
 8012020:	687b      	ldr	r3, [r7, #4]
 8012022:	33d8      	adds	r3, #216	; 0xd8
 8012024:	4a76      	ldr	r2, [pc, #472]	; (8012200 <problem_fetch+0x10ee0>)
 8012026:	461c      	mov	r4, r3
 8012028:	4615      	mov	r5, r2
 801202a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801202c:	6020      	str	r0, [r4, #0]
 801202e:	6061      	str	r1, [r4, #4]
 8012030:	60a2      	str	r2, [r4, #8]
 8012032:	60e3      	str	r3, [r4, #12]
			strcpy(p->grade, "8A");
 8012034:	687b      	ldr	r3, [r7, #4]
 8012036:	33cc      	adds	r3, #204	; 0xcc
 8012038:	4a72      	ldr	r2, [pc, #456]	; (8012204 <problem_fetch+0x10ee4>)
 801203a:	8811      	ldrh	r1, [r2, #0]
 801203c:	7892      	ldrb	r2, [r2, #2]
 801203e:	8019      	strh	r1, [r3, #0]
 8012040:	709a      	strb	r2, [r3, #2]
			break;
 8012042:	f008 beb3 	b.w	801adac <problem_fetch+0x19a8c>
		case 568 :
			strcpy(p->name,"STRAIGHTER THAN YOU");
 8012046:	687b      	ldr	r3, [r7, #4]
 8012048:	337c      	adds	r3, #124	; 0x7c
 801204a:	4a6f      	ldr	r2, [pc, #444]	; (8012208 <problem_fetch+0x10ee8>)
 801204c:	461d      	mov	r5, r3
 801204e:	4614      	mov	r4, r2
 8012050:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8012052:	6028      	str	r0, [r5, #0]
 8012054:	6069      	str	r1, [r5, #4]
 8012056:	60aa      	str	r2, [r5, #8]
 8012058:	60eb      	str	r3, [r5, #12]
 801205a:	6820      	ldr	r0, [r4, #0]
 801205c:	6128      	str	r0, [r5, #16]
			p->moveSize = 5;
 801205e:	687b      	ldr	r3, [r7, #4]
 8012060:	2205      	movs	r2, #5
 8012062:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"J,I,H,K,I");
 8012064:	687b      	ldr	r3, [r7, #4]
 8012066:	3340      	adds	r3, #64	; 0x40
 8012068:	4968      	ldr	r1, [pc, #416]	; (801220c <problem_fetch+0x10eec>)
 801206a:	461a      	mov	r2, r3
 801206c:	460b      	mov	r3, r1
 801206e:	cb03      	ldmia	r3!, {r0, r1}
 8012070:	6010      	str	r0, [r2, #0]
 8012072:	6051      	str	r1, [r2, #4]
 8012074:	881b      	ldrh	r3, [r3, #0]
 8012076:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"5,9,13,16,18");
 8012078:	687b      	ldr	r3, [r7, #4]
 801207a:	3304      	adds	r3, #4
 801207c:	4a64      	ldr	r2, [pc, #400]	; (8012210 <problem_fetch+0x10ef0>)
 801207e:	461c      	mov	r4, r3
 8012080:	4613      	mov	r3, r2
 8012082:	cb07      	ldmia	r3!, {r0, r1, r2}
 8012084:	6020      	str	r0, [r4, #0]
 8012086:	6061      	str	r1, [r4, #4]
 8012088:	60a2      	str	r2, [r4, #8]
 801208a:	781b      	ldrb	r3, [r3, #0]
 801208c:	7323      	strb	r3, [r4, #12]
			strcpy(p->startFinish, "s,d,d,d,e");
 801208e:	687b      	ldr	r3, [r7, #4]
 8012090:	33d8      	adds	r3, #216	; 0xd8
 8012092:	4960      	ldr	r1, [pc, #384]	; (8012214 <problem_fetch+0x10ef4>)
 8012094:	461a      	mov	r2, r3
 8012096:	460b      	mov	r3, r1
 8012098:	cb03      	ldmia	r3!, {r0, r1}
 801209a:	6010      	str	r0, [r2, #0]
 801209c:	6051      	str	r1, [r2, #4]
 801209e:	881b      	ldrh	r3, [r3, #0]
 80120a0:	8113      	strh	r3, [r2, #8]
			strcpy(p->grade, "7C");
 80120a2:	687b      	ldr	r3, [r7, #4]
 80120a4:	33cc      	adds	r3, #204	; 0xcc
 80120a6:	4a5c      	ldr	r2, [pc, #368]	; (8012218 <problem_fetch+0x10ef8>)
 80120a8:	8811      	ldrh	r1, [r2, #0]
 80120aa:	7892      	ldrb	r2, [r2, #2]
 80120ac:	8019      	strh	r1, [r3, #0]
 80120ae:	709a      	strb	r2, [r3, #2]
			break;
 80120b0:	f008 be7c 	b.w	801adac <problem_fetch+0x19a8c>
		case 569 :
			strcpy(p->name,"KYLO REN");
 80120b4:	687b      	ldr	r3, [r7, #4]
 80120b6:	337c      	adds	r3, #124	; 0x7c
 80120b8:	4958      	ldr	r1, [pc, #352]	; (801221c <problem_fetch+0x10efc>)
 80120ba:	461a      	mov	r2, r3
 80120bc:	460b      	mov	r3, r1
 80120be:	cb03      	ldmia	r3!, {r0, r1}
 80120c0:	6010      	str	r0, [r2, #0]
 80120c2:	6051      	str	r1, [r2, #4]
 80120c4:	781b      	ldrb	r3, [r3, #0]
 80120c6:	7213      	strb	r3, [r2, #8]
			p->moveSize = 8;
 80120c8:	687b      	ldr	r3, [r7, #4]
 80120ca:	2208      	movs	r2, #8
 80120cc:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"J,H,E,F,G,E,I,E");
 80120ce:	687b      	ldr	r3, [r7, #4]
 80120d0:	3340      	adds	r3, #64	; 0x40
 80120d2:	4a53      	ldr	r2, [pc, #332]	; (8012220 <problem_fetch+0x10f00>)
 80120d4:	461c      	mov	r4, r3
 80120d6:	4615      	mov	r5, r2
 80120d8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80120da:	6020      	str	r0, [r4, #0]
 80120dc:	6061      	str	r1, [r4, #4]
 80120de:	60a2      	str	r2, [r4, #8]
 80120e0:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,5,8,11,14,16,18,9");
 80120e2:	687b      	ldr	r3, [r7, #4]
 80120e4:	3304      	adds	r3, #4
 80120e6:	4a4f      	ldr	r2, [pc, #316]	; (8012224 <problem_fetch+0x10f04>)
 80120e8:	461d      	mov	r5, r3
 80120ea:	4614      	mov	r4, r2
 80120ec:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80120ee:	6028      	str	r0, [r5, #0]
 80120f0:	6069      	str	r1, [r5, #4]
 80120f2:	60aa      	str	r2, [r5, #8]
 80120f4:	60eb      	str	r3, [r5, #12]
 80120f6:	6820      	ldr	r0, [r4, #0]
 80120f8:	6128      	str	r0, [r5, #16]
			strcpy(p->startFinish, "s,s,d,d,d,d,e,d");
 80120fa:	687b      	ldr	r3, [r7, #4]
 80120fc:	33d8      	adds	r3, #216	; 0xd8
 80120fe:	4a4a      	ldr	r2, [pc, #296]	; (8012228 <problem_fetch+0x10f08>)
 8012100:	461c      	mov	r4, r3
 8012102:	4615      	mov	r5, r2
 8012104:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8012106:	6020      	str	r0, [r4, #0]
 8012108:	6061      	str	r1, [r4, #4]
 801210a:	60a2      	str	r2, [r4, #8]
 801210c:	60e3      	str	r3, [r4, #12]
			strcpy(p->grade, "7A");
 801210e:	687b      	ldr	r3, [r7, #4]
 8012110:	33cc      	adds	r3, #204	; 0xcc
 8012112:	4a46      	ldr	r2, [pc, #280]	; (801222c <problem_fetch+0x10f0c>)
 8012114:	8811      	ldrh	r1, [r2, #0]
 8012116:	7892      	ldrb	r2, [r2, #2]
 8012118:	8019      	strh	r1, [r3, #0]
 801211a:	709a      	strb	r2, [r3, #2]
			break;
 801211c:	f008 be46 	b.w	801adac <problem_fetch+0x19a8c>
		case 57 :
			strcpy(p->name,"COGUARO");
 8012120:	687b      	ldr	r3, [r7, #4]
 8012122:	337c      	adds	r3, #124	; 0x7c
 8012124:	4942      	ldr	r1, [pc, #264]	; (8012230 <problem_fetch+0x10f10>)
 8012126:	461a      	mov	r2, r3
 8012128:	460b      	mov	r3, r1
 801212a:	cb03      	ldmia	r3!, {r0, r1}
 801212c:	6010      	str	r0, [r2, #0]
 801212e:	6051      	str	r1, [r2, #4]
			p->moveSize = 5;
 8012130:	687b      	ldr	r3, [r7, #4]
 8012132:	2205      	movs	r2, #5
 8012134:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"E,E,H,G,I");
 8012136:	687b      	ldr	r3, [r7, #4]
 8012138:	3340      	adds	r3, #64	; 0x40
 801213a:	493e      	ldr	r1, [pc, #248]	; (8012234 <problem_fetch+0x10f14>)
 801213c:	461a      	mov	r2, r3
 801213e:	460b      	mov	r3, r1
 8012140:	cb03      	ldmia	r3!, {r0, r1}
 8012142:	6010      	str	r0, [r2, #0]
 8012144:	6051      	str	r1, [r2, #4]
 8012146:	881b      	ldrh	r3, [r3, #0]
 8012148:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"6,8,8,14,18");
 801214a:	687b      	ldr	r3, [r7, #4]
 801214c:	3304      	adds	r3, #4
 801214e:	4a3a      	ldr	r2, [pc, #232]	; (8012238 <problem_fetch+0x10f18>)
 8012150:	461c      	mov	r4, r3
 8012152:	4613      	mov	r3, r2
 8012154:	cb07      	ldmia	r3!, {r0, r1, r2}
 8012156:	6020      	str	r0, [r4, #0]
 8012158:	6061      	str	r1, [r4, #4]
 801215a:	60a2      	str	r2, [r4, #8]
			strcpy(p->startFinish, "s,d,d,d,e");
 801215c:	687b      	ldr	r3, [r7, #4]
 801215e:	33d8      	adds	r3, #216	; 0xd8
 8012160:	492c      	ldr	r1, [pc, #176]	; (8012214 <problem_fetch+0x10ef4>)
 8012162:	461a      	mov	r2, r3
 8012164:	460b      	mov	r3, r1
 8012166:	cb03      	ldmia	r3!, {r0, r1}
 8012168:	6010      	str	r0, [r2, #0]
 801216a:	6051      	str	r1, [r2, #4]
 801216c:	881b      	ldrh	r3, [r3, #0]
 801216e:	8113      	strh	r3, [r2, #8]
			strcpy(p->grade, "7A+");
 8012170:	687b      	ldr	r3, [r7, #4]
 8012172:	33cc      	adds	r3, #204	; 0xcc
 8012174:	4a31      	ldr	r2, [pc, #196]	; (801223c <problem_fetch+0x10f1c>)
 8012176:	6810      	ldr	r0, [r2, #0]
 8012178:	6018      	str	r0, [r3, #0]
			break;
 801217a:	f008 be17 	b.w	801adac <problem_fetch+0x19a8c>
		case 570 :
			strcpy(p->name,"MALEDICTION");
 801217e:	687b      	ldr	r3, [r7, #4]
 8012180:	337c      	adds	r3, #124	; 0x7c
 8012182:	4a2f      	ldr	r2, [pc, #188]	; (8012240 <problem_fetch+0x10f20>)
 8012184:	461c      	mov	r4, r3
 8012186:	4613      	mov	r3, r2
 8012188:	cb07      	ldmia	r3!, {r0, r1, r2}
 801218a:	6020      	str	r0, [r4, #0]
 801218c:	6061      	str	r1, [r4, #4]
 801218e:	60a2      	str	r2, [r4, #8]
			p->moveSize = 6;
 8012190:	687b      	ldr	r3, [r7, #4]
 8012192:	2206      	movs	r2, #6
 8012194:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"E,F,B,G,I,D");
 8012196:	687b      	ldr	r3, [r7, #4]
 8012198:	3340      	adds	r3, #64	; 0x40
 801219a:	4a2a      	ldr	r2, [pc, #168]	; (8012244 <problem_fetch+0x10f24>)
 801219c:	461c      	mov	r4, r3
 801219e:	4613      	mov	r3, r2
 80121a0:	cb07      	ldmia	r3!, {r0, r1, r2}
 80121a2:	6020      	str	r0, [r4, #0]
 80121a4:	6061      	str	r1, [r4, #4]
 80121a6:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"6,11,12,15,15,18");
 80121a8:	687b      	ldr	r3, [r7, #4]
 80121aa:	3304      	adds	r3, #4
 80121ac:	4a26      	ldr	r2, [pc, #152]	; (8012248 <problem_fetch+0x10f28>)
 80121ae:	461d      	mov	r5, r3
 80121b0:	4614      	mov	r4, r2
 80121b2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80121b4:	6028      	str	r0, [r5, #0]
 80121b6:	6069      	str	r1, [r5, #4]
 80121b8:	60aa      	str	r2, [r5, #8]
 80121ba:	60eb      	str	r3, [r5, #12]
 80121bc:	7823      	ldrb	r3, [r4, #0]
 80121be:	742b      	strb	r3, [r5, #16]
			strcpy(p->startFinish, "s,d,d,d,d,e");
 80121c0:	687b      	ldr	r3, [r7, #4]
 80121c2:	33d8      	adds	r3, #216	; 0xd8
 80121c4:	4a21      	ldr	r2, [pc, #132]	; (801224c <problem_fetch+0x10f2c>)
 80121c6:	461c      	mov	r4, r3
 80121c8:	4613      	mov	r3, r2
 80121ca:	cb07      	ldmia	r3!, {r0, r1, r2}
 80121cc:	6020      	str	r0, [r4, #0]
 80121ce:	6061      	str	r1, [r4, #4]
 80121d0:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade, "7A+");
 80121d2:	687b      	ldr	r3, [r7, #4]
 80121d4:	33cc      	adds	r3, #204	; 0xcc
 80121d6:	4a19      	ldr	r2, [pc, #100]	; (801223c <problem_fetch+0x10f1c>)
 80121d8:	6810      	ldr	r0, [r2, #0]
 80121da:	6018      	str	r0, [r3, #0]
			break;
 80121dc:	f008 bde6 	b.w	801adac <problem_fetch+0x19a8c>
 80121e0:	08027248 	.word	0x08027248
 80121e4:	08027254 	.word	0x08027254
 80121e8:	08027268 	.word	0x08027268
 80121ec:	08023410 	.word	0x08023410
 80121f0:	080212b0 	.word	0x080212b0
 80121f4:	08027284 	.word	0x08027284
 80121f8:	08027290 	.word	0x08027290
 80121fc:	080272a0 	.word	0x080272a0
 8012200:	080272b8 	.word	0x080272b8
 8012204:	08021714 	.word	0x08021714
 8012208:	080272c8 	.word	0x080272c8
 801220c:	080272dc 	.word	0x080272dc
 8012210:	080272e8 	.word	0x080272e8
 8012214:	08021320 	.word	0x08021320
 8012218:	0802158c 	.word	0x0802158c
 801221c:	080272f8 	.word	0x080272f8
 8012220:	08027304 	.word	0x08027304
 8012224:	08027314 	.word	0x08027314
 8012228:	08027328 	.word	0x08027328
 801222c:	080212f4 	.word	0x080212f4
 8012230:	08027338 	.word	0x08027338
 8012234:	08027340 	.word	0x08027340
 8012238:	0802734c 	.word	0x0802734c
 801223c:	08021424 	.word	0x08021424
 8012240:	08027358 	.word	0x08027358
 8012244:	08027364 	.word	0x08027364
 8012248:	08027370 	.word	0x08027370
 801224c:	0802139c 	.word	0x0802139c
		case 571 :
			strcpy(p->name,"FUN1");
 8012250:	687b      	ldr	r3, [r7, #4]
 8012252:	337c      	adds	r3, #124	; 0x7c
 8012254:	4ab3      	ldr	r2, [pc, #716]	; (8012524 <problem_fetch+0x11204>)
 8012256:	6810      	ldr	r0, [r2, #0]
 8012258:	6018      	str	r0, [r3, #0]
 801225a:	7912      	ldrb	r2, [r2, #4]
 801225c:	711a      	strb	r2, [r3, #4]
			p->moveSize = 14;
 801225e:	687b      	ldr	r3, [r7, #4]
 8012260:	220e      	movs	r2, #14
 8012262:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"G,C,E,C,E,D,F,H,F,I,I,G,H,I");
 8012264:	687b      	ldr	r3, [r7, #4]
 8012266:	3340      	adds	r3, #64	; 0x40
 8012268:	4aaf      	ldr	r2, [pc, #700]	; (8012528 <problem_fetch+0x11208>)
 801226a:	461d      	mov	r5, r3
 801226c:	4614      	mov	r4, r2
 801226e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8012270:	6028      	str	r0, [r5, #0]
 8012272:	6069      	str	r1, [r5, #4]
 8012274:	60aa      	str	r2, [r5, #8]
 8012276:	60eb      	str	r3, [r5, #12]
 8012278:	cc07      	ldmia	r4!, {r0, r1, r2}
 801227a:	6128      	str	r0, [r5, #16]
 801227c:	6169      	str	r1, [r5, #20]
 801227e:	61aa      	str	r2, [r5, #24]
			strcpy(p->moveNumbers,"4,5,8,8,9,11,11,12,13,14,15,15,16,18");
 8012280:	687b      	ldr	r3, [r7, #4]
 8012282:	3304      	adds	r3, #4
 8012284:	4aa9      	ldr	r2, [pc, #676]	; (801252c <problem_fetch+0x1120c>)
 8012286:	4614      	mov	r4, r2
 8012288:	469c      	mov	ip, r3
 801228a:	f104 0e20 	add.w	lr, r4, #32
 801228e:	4665      	mov	r5, ip
 8012290:	4626      	mov	r6, r4
 8012292:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8012294:	6028      	str	r0, [r5, #0]
 8012296:	6069      	str	r1, [r5, #4]
 8012298:	60aa      	str	r2, [r5, #8]
 801229a:	60eb      	str	r3, [r5, #12]
 801229c:	3410      	adds	r4, #16
 801229e:	f10c 0c10 	add.w	ip, ip, #16
 80122a2:	4574      	cmp	r4, lr
 80122a4:	d1f3      	bne.n	801228e <problem_fetch+0x10f6e>
 80122a6:	4663      	mov	r3, ip
 80122a8:	4622      	mov	r2, r4
 80122aa:	6810      	ldr	r0, [r2, #0]
 80122ac:	6018      	str	r0, [r3, #0]
 80122ae:	7912      	ldrb	r2, [r2, #4]
 80122b0:	711a      	strb	r2, [r3, #4]
			strcpy(p->startFinish, "s,s,d,d,d,d,d,d,d,d,d,d,d,e");
 80122b2:	687b      	ldr	r3, [r7, #4]
 80122b4:	33d8      	adds	r3, #216	; 0xd8
 80122b6:	4a9e      	ldr	r2, [pc, #632]	; (8012530 <problem_fetch+0x11210>)
 80122b8:	461d      	mov	r5, r3
 80122ba:	4614      	mov	r4, r2
 80122bc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80122be:	6028      	str	r0, [r5, #0]
 80122c0:	6069      	str	r1, [r5, #4]
 80122c2:	60aa      	str	r2, [r5, #8]
 80122c4:	60eb      	str	r3, [r5, #12]
 80122c6:	cc07      	ldmia	r4!, {r0, r1, r2}
 80122c8:	6128      	str	r0, [r5, #16]
 80122ca:	6169      	str	r1, [r5, #20]
 80122cc:	61aa      	str	r2, [r5, #24]
			strcpy(p->grade, "6B+");
 80122ce:	687b      	ldr	r3, [r7, #4]
 80122d0:	33cc      	adds	r3, #204	; 0xcc
 80122d2:	4a98      	ldr	r2, [pc, #608]	; (8012534 <problem_fetch+0x11214>)
 80122d4:	6810      	ldr	r0, [r2, #0]
 80122d6:	6018      	str	r0, [r3, #0]
			break;
 80122d8:	f008 bd68 	b.w	801adac <problem_fetch+0x19a8c>
		case 572 :
			strcpy(p->name,"IGNORANT STYLE");
 80122dc:	687b      	ldr	r3, [r7, #4]
 80122de:	337c      	adds	r3, #124	; 0x7c
 80122e0:	4a95      	ldr	r2, [pc, #596]	; (8012538 <problem_fetch+0x11218>)
 80122e2:	461c      	mov	r4, r3
 80122e4:	4613      	mov	r3, r2
 80122e6:	cb07      	ldmia	r3!, {r0, r1, r2}
 80122e8:	6020      	str	r0, [r4, #0]
 80122ea:	6061      	str	r1, [r4, #4]
 80122ec:	60a2      	str	r2, [r4, #8]
 80122ee:	881a      	ldrh	r2, [r3, #0]
 80122f0:	789b      	ldrb	r3, [r3, #2]
 80122f2:	81a2      	strh	r2, [r4, #12]
 80122f4:	73a3      	strb	r3, [r4, #14]
			p->moveSize = 6;
 80122f6:	687b      	ldr	r3, [r7, #4]
 80122f8:	2206      	movs	r2, #6
 80122fa:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"J,G,E,F,I,I");
 80122fc:	687b      	ldr	r3, [r7, #4]
 80122fe:	3340      	adds	r3, #64	; 0x40
 8012300:	4a8e      	ldr	r2, [pc, #568]	; (801253c <problem_fetch+0x1121c>)
 8012302:	461c      	mov	r4, r3
 8012304:	4613      	mov	r3, r2
 8012306:	cb07      	ldmia	r3!, {r0, r1, r2}
 8012308:	6020      	str	r0, [r4, #0]
 801230a:	6061      	str	r1, [r4, #4]
 801230c:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,6,8,11,14,18");
 801230e:	687b      	ldr	r3, [r7, #4]
 8012310:	3304      	adds	r3, #4
 8012312:	4a8b      	ldr	r2, [pc, #556]	; (8012540 <problem_fetch+0x11220>)
 8012314:	461c      	mov	r4, r3
 8012316:	4613      	mov	r3, r2
 8012318:	cb07      	ldmia	r3!, {r0, r1, r2}
 801231a:	6020      	str	r0, [r4, #0]
 801231c:	6061      	str	r1, [r4, #4]
 801231e:	60a2      	str	r2, [r4, #8]
 8012320:	881a      	ldrh	r2, [r3, #0]
 8012322:	789b      	ldrb	r3, [r3, #2]
 8012324:	81a2      	strh	r2, [r4, #12]
 8012326:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish, "s,d,d,d,d,e");
 8012328:	687b      	ldr	r3, [r7, #4]
 801232a:	33d8      	adds	r3, #216	; 0xd8
 801232c:	4a85      	ldr	r2, [pc, #532]	; (8012544 <problem_fetch+0x11224>)
 801232e:	461c      	mov	r4, r3
 8012330:	4613      	mov	r3, r2
 8012332:	cb07      	ldmia	r3!, {r0, r1, r2}
 8012334:	6020      	str	r0, [r4, #0]
 8012336:	6061      	str	r1, [r4, #4]
 8012338:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade, "7A");
 801233a:	687b      	ldr	r3, [r7, #4]
 801233c:	33cc      	adds	r3, #204	; 0xcc
 801233e:	4a82      	ldr	r2, [pc, #520]	; (8012548 <problem_fetch+0x11228>)
 8012340:	8811      	ldrh	r1, [r2, #0]
 8012342:	7892      	ldrb	r2, [r2, #2]
 8012344:	8019      	strh	r1, [r3, #0]
 8012346:	709a      	strb	r2, [r3, #2]
			break;
 8012348:	f008 bd30 	b.w	801adac <problem_fetch+0x19a8c>
		case 573 :
			strcpy(p->name,"EDITHS BOULDER");
 801234c:	687b      	ldr	r3, [r7, #4]
 801234e:	337c      	adds	r3, #124	; 0x7c
 8012350:	4a7e      	ldr	r2, [pc, #504]	; (801254c <problem_fetch+0x1122c>)
 8012352:	461c      	mov	r4, r3
 8012354:	4613      	mov	r3, r2
 8012356:	cb07      	ldmia	r3!, {r0, r1, r2}
 8012358:	6020      	str	r0, [r4, #0]
 801235a:	6061      	str	r1, [r4, #4]
 801235c:	60a2      	str	r2, [r4, #8]
 801235e:	881a      	ldrh	r2, [r3, #0]
 8012360:	789b      	ldrb	r3, [r3, #2]
 8012362:	81a2      	strh	r2, [r4, #12]
 8012364:	73a3      	strb	r3, [r4, #14]
			p->moveSize = 7;
 8012366:	687b      	ldr	r3, [r7, #4]
 8012368:	2207      	movs	r2, #7
 801236a:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"E,I,E,J,D,E,A");
 801236c:	687b      	ldr	r3, [r7, #4]
 801236e:	3340      	adds	r3, #64	; 0x40
 8012370:	4a77      	ldr	r2, [pc, #476]	; (8012550 <problem_fetch+0x11230>)
 8012372:	461c      	mov	r4, r3
 8012374:	4613      	mov	r3, r2
 8012376:	cb07      	ldmia	r3!, {r0, r1, r2}
 8012378:	6020      	str	r0, [r4, #0]
 801237a:	6061      	str	r1, [r4, #4]
 801237c:	60a2      	str	r2, [r4, #8]
 801237e:	881b      	ldrh	r3, [r3, #0]
 8012380:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"12,7,8,5,15,16,18");
 8012382:	687b      	ldr	r3, [r7, #4]
 8012384:	3304      	adds	r3, #4
 8012386:	4a73      	ldr	r2, [pc, #460]	; (8012554 <problem_fetch+0x11234>)
 8012388:	461d      	mov	r5, r3
 801238a:	4614      	mov	r4, r2
 801238c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801238e:	6028      	str	r0, [r5, #0]
 8012390:	6069      	str	r1, [r5, #4]
 8012392:	60aa      	str	r2, [r5, #8]
 8012394:	60eb      	str	r3, [r5, #12]
 8012396:	8823      	ldrh	r3, [r4, #0]
 8012398:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish, "d,d,d,s,d,d,e");
 801239a:	687b      	ldr	r3, [r7, #4]
 801239c:	33d8      	adds	r3, #216	; 0xd8
 801239e:	4a6e      	ldr	r2, [pc, #440]	; (8012558 <problem_fetch+0x11238>)
 80123a0:	461c      	mov	r4, r3
 80123a2:	4613      	mov	r3, r2
 80123a4:	cb07      	ldmia	r3!, {r0, r1, r2}
 80123a6:	6020      	str	r0, [r4, #0]
 80123a8:	6061      	str	r1, [r4, #4]
 80123aa:	60a2      	str	r2, [r4, #8]
 80123ac:	881b      	ldrh	r3, [r3, #0]
 80123ae:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade, "6C+");
 80123b0:	687b      	ldr	r3, [r7, #4]
 80123b2:	33cc      	adds	r3, #204	; 0xcc
 80123b4:	4a69      	ldr	r2, [pc, #420]	; (801255c <problem_fetch+0x1123c>)
 80123b6:	6810      	ldr	r0, [r2, #0]
 80123b8:	6018      	str	r0, [r3, #0]
			break;
 80123ba:	f008 bcf7 	b.w	801adac <problem_fetch+0x19a8c>
		case 574 :
			strcpy(p->name,"HOONGA (REMAKE)");
 80123be:	687b      	ldr	r3, [r7, #4]
 80123c0:	337c      	adds	r3, #124	; 0x7c
 80123c2:	4a67      	ldr	r2, [pc, #412]	; (8012560 <problem_fetch+0x11240>)
 80123c4:	461c      	mov	r4, r3
 80123c6:	4615      	mov	r5, r2
 80123c8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80123ca:	6020      	str	r0, [r4, #0]
 80123cc:	6061      	str	r1, [r4, #4]
 80123ce:	60a2      	str	r2, [r4, #8]
 80123d0:	60e3      	str	r3, [r4, #12]
			p->moveSize = 10;
 80123d2:	687b      	ldr	r3, [r7, #4]
 80123d4:	220a      	movs	r2, #10
 80123d6:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"B,C,D,B,E,D,H,G,H,I");
 80123d8:	687b      	ldr	r3, [r7, #4]
 80123da:	3340      	adds	r3, #64	; 0x40
 80123dc:	4a61      	ldr	r2, [pc, #388]	; (8012564 <problem_fetch+0x11244>)
 80123de:	461d      	mov	r5, r3
 80123e0:	4614      	mov	r4, r2
 80123e2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80123e4:	6028      	str	r0, [r5, #0]
 80123e6:	6069      	str	r1, [r5, #4]
 80123e8:	60aa      	str	r2, [r5, #8]
 80123ea:	60eb      	str	r3, [r5, #12]
 80123ec:	6820      	ldr	r0, [r4, #0]
 80123ee:	6128      	str	r0, [r5, #16]
			strcpy(p->moveNumbers,"6,5,7,10,12,11,13,14,16,18");
 80123f0:	687b      	ldr	r3, [r7, #4]
 80123f2:	3304      	adds	r3, #4
 80123f4:	4a5c      	ldr	r2, [pc, #368]	; (8012568 <problem_fetch+0x11248>)
 80123f6:	461d      	mov	r5, r3
 80123f8:	4614      	mov	r4, r2
 80123fa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80123fc:	6028      	str	r0, [r5, #0]
 80123fe:	6069      	str	r1, [r5, #4]
 8012400:	60aa      	str	r2, [r5, #8]
 8012402:	60eb      	str	r3, [r5, #12]
 8012404:	cc03      	ldmia	r4!, {r0, r1}
 8012406:	6128      	str	r0, [r5, #16]
 8012408:	6169      	str	r1, [r5, #20]
 801240a:	8823      	ldrh	r3, [r4, #0]
 801240c:	78a2      	ldrb	r2, [r4, #2]
 801240e:	832b      	strh	r3, [r5, #24]
 8012410:	4613      	mov	r3, r2
 8012412:	76ab      	strb	r3, [r5, #26]
			strcpy(p->startFinish, "s,s,d,d,d,d,d,d,d,e");
 8012414:	687b      	ldr	r3, [r7, #4]
 8012416:	33d8      	adds	r3, #216	; 0xd8
 8012418:	4a54      	ldr	r2, [pc, #336]	; (801256c <problem_fetch+0x1124c>)
 801241a:	461d      	mov	r5, r3
 801241c:	4614      	mov	r4, r2
 801241e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8012420:	6028      	str	r0, [r5, #0]
 8012422:	6069      	str	r1, [r5, #4]
 8012424:	60aa      	str	r2, [r5, #8]
 8012426:	60eb      	str	r3, [r5, #12]
 8012428:	6820      	ldr	r0, [r4, #0]
 801242a:	6128      	str	r0, [r5, #16]
			strcpy(p->grade, "7B+");
 801242c:	687b      	ldr	r3, [r7, #4]
 801242e:	33cc      	adds	r3, #204	; 0xcc
 8012430:	4a4f      	ldr	r2, [pc, #316]	; (8012570 <problem_fetch+0x11250>)
 8012432:	6810      	ldr	r0, [r2, #0]
 8012434:	6018      	str	r0, [r3, #0]
			break;
 8012436:	f008 bcb9 	b.w	801adac <problem_fetch+0x19a8c>
		case 575 :
			strcpy(p->name,"SILENT MEDIA");
 801243a:	687b      	ldr	r3, [r7, #4]
 801243c:	337c      	adds	r3, #124	; 0x7c
 801243e:	4a4d      	ldr	r2, [pc, #308]	; (8012574 <problem_fetch+0x11254>)
 8012440:	461c      	mov	r4, r3
 8012442:	4613      	mov	r3, r2
 8012444:	cb07      	ldmia	r3!, {r0, r1, r2}
 8012446:	6020      	str	r0, [r4, #0]
 8012448:	6061      	str	r1, [r4, #4]
 801244a:	60a2      	str	r2, [r4, #8]
 801244c:	781b      	ldrb	r3, [r3, #0]
 801244e:	7323      	strb	r3, [r4, #12]
			p->moveSize = 7;
 8012450:	687b      	ldr	r3, [r7, #4]
 8012452:	2207      	movs	r2, #7
 8012454:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"J,E,H,G,I,H,I");
 8012456:	687b      	ldr	r3, [r7, #4]
 8012458:	3340      	adds	r3, #64	; 0x40
 801245a:	4a47      	ldr	r2, [pc, #284]	; (8012578 <problem_fetch+0x11258>)
 801245c:	461c      	mov	r4, r3
 801245e:	4613      	mov	r3, r2
 8012460:	cb07      	ldmia	r3!, {r0, r1, r2}
 8012462:	6020      	str	r0, [r4, #0]
 8012464:	6061      	str	r1, [r4, #4]
 8012466:	60a2      	str	r2, [r4, #8]
 8012468:	881b      	ldrh	r3, [r3, #0]
 801246a:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,6,10,9,14,16,18");
 801246c:	687b      	ldr	r3, [r7, #4]
 801246e:	3304      	adds	r3, #4
 8012470:	4a42      	ldr	r2, [pc, #264]	; (801257c <problem_fetch+0x1125c>)
 8012472:	461d      	mov	r5, r3
 8012474:	4614      	mov	r4, r2
 8012476:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8012478:	6028      	str	r0, [r5, #0]
 801247a:	6069      	str	r1, [r5, #4]
 801247c:	60aa      	str	r2, [r5, #8]
 801247e:	60eb      	str	r3, [r5, #12]
 8012480:	8823      	ldrh	r3, [r4, #0]
 8012482:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish, "s,d,d,d,d,d,e");
 8012484:	687b      	ldr	r3, [r7, #4]
 8012486:	33d8      	adds	r3, #216	; 0xd8
 8012488:	4a3d      	ldr	r2, [pc, #244]	; (8012580 <problem_fetch+0x11260>)
 801248a:	461c      	mov	r4, r3
 801248c:	4613      	mov	r3, r2
 801248e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8012490:	6020      	str	r0, [r4, #0]
 8012492:	6061      	str	r1, [r4, #4]
 8012494:	60a2      	str	r2, [r4, #8]
 8012496:	881b      	ldrh	r3, [r3, #0]
 8012498:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade, "6B+");
 801249a:	687b      	ldr	r3, [r7, #4]
 801249c:	33cc      	adds	r3, #204	; 0xcc
 801249e:	4a25      	ldr	r2, [pc, #148]	; (8012534 <problem_fetch+0x11214>)
 80124a0:	6810      	ldr	r0, [r2, #0]
 80124a2:	6018      	str	r0, [r3, #0]
			break;
 80124a4:	f008 bc82 	b.w	801adac <problem_fetch+0x19a8c>
		case 576 :
			strcpy(p->name,"UPRISING");
 80124a8:	687b      	ldr	r3, [r7, #4]
 80124aa:	337c      	adds	r3, #124	; 0x7c
 80124ac:	4935      	ldr	r1, [pc, #212]	; (8012584 <problem_fetch+0x11264>)
 80124ae:	461a      	mov	r2, r3
 80124b0:	460b      	mov	r3, r1
 80124b2:	cb03      	ldmia	r3!, {r0, r1}
 80124b4:	6010      	str	r0, [r2, #0]
 80124b6:	6051      	str	r1, [r2, #4]
 80124b8:	781b      	ldrb	r3, [r3, #0]
 80124ba:	7213      	strb	r3, [r2, #8]
			p->moveSize = 9;
 80124bc:	687b      	ldr	r3, [r7, #4]
 80124be:	2209      	movs	r2, #9
 80124c0:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"G,J,H,G,E,F,G,H,I");
 80124c2:	687b      	ldr	r3, [r7, #4]
 80124c4:	3340      	adds	r3, #64	; 0x40
 80124c6:	4a30      	ldr	r2, [pc, #192]	; (8012588 <problem_fetch+0x11268>)
 80124c8:	461d      	mov	r5, r3
 80124ca:	4614      	mov	r4, r2
 80124cc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80124ce:	6028      	str	r0, [r5, #0]
 80124d0:	6069      	str	r1, [r5, #4]
 80124d2:	60aa      	str	r2, [r5, #8]
 80124d4:	60eb      	str	r3, [r5, #12]
 80124d6:	8823      	ldrh	r3, [r4, #0]
 80124d8:	822b      	strh	r3, [r5, #16]
			strcpy(p->moveNumbers,"4,5,8,9,12,13,14,16,18");
 80124da:	687b      	ldr	r3, [r7, #4]
 80124dc:	3304      	adds	r3, #4
 80124de:	4a2b      	ldr	r2, [pc, #172]	; (801258c <problem_fetch+0x1126c>)
 80124e0:	461c      	mov	r4, r3
 80124e2:	4615      	mov	r5, r2
 80124e4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80124e6:	6020      	str	r0, [r4, #0]
 80124e8:	6061      	str	r1, [r4, #4]
 80124ea:	60a2      	str	r2, [r4, #8]
 80124ec:	60e3      	str	r3, [r4, #12]
 80124ee:	6828      	ldr	r0, [r5, #0]
 80124f0:	6120      	str	r0, [r4, #16]
 80124f2:	88ab      	ldrh	r3, [r5, #4]
 80124f4:	79aa      	ldrb	r2, [r5, #6]
 80124f6:	82a3      	strh	r3, [r4, #20]
 80124f8:	4613      	mov	r3, r2
 80124fa:	75a3      	strb	r3, [r4, #22]
			strcpy(p->startFinish, "s,s,d,d,d,d,d,d,e");
 80124fc:	687b      	ldr	r3, [r7, #4]
 80124fe:	33d8      	adds	r3, #216	; 0xd8
 8012500:	4a23      	ldr	r2, [pc, #140]	; (8012590 <problem_fetch+0x11270>)
 8012502:	461d      	mov	r5, r3
 8012504:	4614      	mov	r4, r2
 8012506:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8012508:	6028      	str	r0, [r5, #0]
 801250a:	6069      	str	r1, [r5, #4]
 801250c:	60aa      	str	r2, [r5, #8]
 801250e:	60eb      	str	r3, [r5, #12]
 8012510:	8823      	ldrh	r3, [r4, #0]
 8012512:	822b      	strh	r3, [r5, #16]
			strcpy(p->grade, "6B+");
 8012514:	687b      	ldr	r3, [r7, #4]
 8012516:	33cc      	adds	r3, #204	; 0xcc
 8012518:	4a06      	ldr	r2, [pc, #24]	; (8012534 <problem_fetch+0x11214>)
 801251a:	6810      	ldr	r0, [r2, #0]
 801251c:	6018      	str	r0, [r3, #0]
			break;
 801251e:	f008 bc45 	b.w	801adac <problem_fetch+0x19a8c>
 8012522:	bf00      	nop
 8012524:	08027384 	.word	0x08027384
 8012528:	0802738c 	.word	0x0802738c
 801252c:	080273a8 	.word	0x080273a8
 8012530:	080273d0 	.word	0x080273d0
 8012534:	080212b0 	.word	0x080212b0
 8012538:	080273ec 	.word	0x080273ec
 801253c:	080273fc 	.word	0x080273fc
 8012540:	08027408 	.word	0x08027408
 8012544:	0802139c 	.word	0x0802139c
 8012548:	080212f4 	.word	0x080212f4
 801254c:	08027418 	.word	0x08027418
 8012550:	08027428 	.word	0x08027428
 8012554:	08027438 	.word	0x08027438
 8012558:	0802744c 	.word	0x0802744c
 801255c:	080213a8 	.word	0x080213a8
 8012560:	0802745c 	.word	0x0802745c
 8012564:	0802746c 	.word	0x0802746c
 8012568:	08027480 	.word	0x08027480
 801256c:	080215fc 	.word	0x080215fc
 8012570:	08021848 	.word	0x08021848
 8012574:	0802749c 	.word	0x0802749c
 8012578:	080274ac 	.word	0x080274ac
 801257c:	080274bc 	.word	0x080274bc
 8012580:	08021494 	.word	0x08021494
 8012584:	080274d0 	.word	0x080274d0
 8012588:	080274dc 	.word	0x080274dc
 801258c:	080274f0 	.word	0x080274f0
 8012590:	0802187c 	.word	0x0802187c
		case 577 :
			strcpy(p->name,"EASY GO");
 8012594:	687b      	ldr	r3, [r7, #4]
 8012596:	337c      	adds	r3, #124	; 0x7c
 8012598:	49ba      	ldr	r1, [pc, #744]	; (8012884 <problem_fetch+0x11564>)
 801259a:	461a      	mov	r2, r3
 801259c:	460b      	mov	r3, r1
 801259e:	cb03      	ldmia	r3!, {r0, r1}
 80125a0:	6010      	str	r0, [r2, #0]
 80125a2:	6051      	str	r1, [r2, #4]
			p->moveSize = 7;
 80125a4:	687b      	ldr	r3, [r7, #4]
 80125a6:	2207      	movs	r2, #7
 80125a8:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"C,E,E,H,F,C,D");
 80125aa:	687b      	ldr	r3, [r7, #4]
 80125ac:	3340      	adds	r3, #64	; 0x40
 80125ae:	4ab6      	ldr	r2, [pc, #728]	; (8012888 <problem_fetch+0x11568>)
 80125b0:	461c      	mov	r4, r3
 80125b2:	4613      	mov	r3, r2
 80125b4:	cb07      	ldmia	r3!, {r0, r1, r2}
 80125b6:	6020      	str	r0, [r4, #0]
 80125b8:	6061      	str	r1, [r4, #4]
 80125ba:	60a2      	str	r2, [r4, #8]
 80125bc:	881b      	ldrh	r3, [r3, #0]
 80125be:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,6,8,8,11,13,18");
 80125c0:	687b      	ldr	r3, [r7, #4]
 80125c2:	3304      	adds	r3, #4
 80125c4:	4ab1      	ldr	r2, [pc, #708]	; (801288c <problem_fetch+0x1156c>)
 80125c6:	461d      	mov	r5, r3
 80125c8:	4614      	mov	r4, r2
 80125ca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80125cc:	6028      	str	r0, [r5, #0]
 80125ce:	6069      	str	r1, [r5, #4]
 80125d0:	60aa      	str	r2, [r5, #8]
 80125d2:	60eb      	str	r3, [r5, #12]
 80125d4:	7823      	ldrb	r3, [r4, #0]
 80125d6:	742b      	strb	r3, [r5, #16]
			strcpy(p->startFinish, "s,s,d,d,d,d,e");
 80125d8:	687b      	ldr	r3, [r7, #4]
 80125da:	33d8      	adds	r3, #216	; 0xd8
 80125dc:	4aac      	ldr	r2, [pc, #688]	; (8012890 <problem_fetch+0x11570>)
 80125de:	461c      	mov	r4, r3
 80125e0:	4613      	mov	r3, r2
 80125e2:	cb07      	ldmia	r3!, {r0, r1, r2}
 80125e4:	6020      	str	r0, [r4, #0]
 80125e6:	6061      	str	r1, [r4, #4]
 80125e8:	60a2      	str	r2, [r4, #8]
 80125ea:	881b      	ldrh	r3, [r3, #0]
 80125ec:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade, "6B+");
 80125ee:	687b      	ldr	r3, [r7, #4]
 80125f0:	33cc      	adds	r3, #204	; 0xcc
 80125f2:	4aa8      	ldr	r2, [pc, #672]	; (8012894 <problem_fetch+0x11574>)
 80125f4:	6810      	ldr	r0, [r2, #0]
 80125f6:	6018      	str	r0, [r3, #0]
			break;
 80125f8:	f008 bbd8 	b.w	801adac <problem_fetch+0x19a8c>
		case 578 :
			strcpy(p->name,"LEAVE OR FOLLOW");
 80125fc:	687b      	ldr	r3, [r7, #4]
 80125fe:	337c      	adds	r3, #124	; 0x7c
 8012600:	4aa5      	ldr	r2, [pc, #660]	; (8012898 <problem_fetch+0x11578>)
 8012602:	461c      	mov	r4, r3
 8012604:	4615      	mov	r5, r2
 8012606:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8012608:	6020      	str	r0, [r4, #0]
 801260a:	6061      	str	r1, [r4, #4]
 801260c:	60a2      	str	r2, [r4, #8]
 801260e:	60e3      	str	r3, [r4, #12]
			p->moveSize = 6;
 8012610:	687b      	ldr	r3, [r7, #4]
 8012612:	2206      	movs	r2, #6
 8012614:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"H,J,I,J,G,I");
 8012616:	687b      	ldr	r3, [r7, #4]
 8012618:	3340      	adds	r3, #64	; 0x40
 801261a:	4aa0      	ldr	r2, [pc, #640]	; (801289c <problem_fetch+0x1157c>)
 801261c:	461c      	mov	r4, r3
 801261e:	4613      	mov	r3, r2
 8012620:	cb07      	ldmia	r3!, {r0, r1, r2}
 8012622:	6020      	str	r0, [r4, #0]
 8012624:	6061      	str	r1, [r4, #4]
 8012626:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,7,10,13,15,18");
 8012628:	687b      	ldr	r3, [r7, #4]
 801262a:	3304      	adds	r3, #4
 801262c:	4a9c      	ldr	r2, [pc, #624]	; (80128a0 <problem_fetch+0x11580>)
 801262e:	461c      	mov	r4, r3
 8012630:	4615      	mov	r5, r2
 8012632:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8012634:	6020      	str	r0, [r4, #0]
 8012636:	6061      	str	r1, [r4, #4]
 8012638:	60a2      	str	r2, [r4, #8]
 801263a:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish, "s,d,d,d,d,e");
 801263c:	687b      	ldr	r3, [r7, #4]
 801263e:	33d8      	adds	r3, #216	; 0xd8
 8012640:	4a98      	ldr	r2, [pc, #608]	; (80128a4 <problem_fetch+0x11584>)
 8012642:	461c      	mov	r4, r3
 8012644:	4613      	mov	r3, r2
 8012646:	cb07      	ldmia	r3!, {r0, r1, r2}
 8012648:	6020      	str	r0, [r4, #0]
 801264a:	6061      	str	r1, [r4, #4]
 801264c:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade, "6C");
 801264e:	687b      	ldr	r3, [r7, #4]
 8012650:	33cc      	adds	r3, #204	; 0xcc
 8012652:	4a95      	ldr	r2, [pc, #596]	; (80128a8 <problem_fetch+0x11588>)
 8012654:	8811      	ldrh	r1, [r2, #0]
 8012656:	7892      	ldrb	r2, [r2, #2]
 8012658:	8019      	strh	r1, [r3, #0]
 801265a:	709a      	strb	r2, [r3, #2]
			break;
 801265c:	f008 bba6 	b.w	801adac <problem_fetch+0x19a8c>
		case 579 :
			strcpy(p->name,"JUDGEMENT RAINS");
 8012660:	687b      	ldr	r3, [r7, #4]
 8012662:	337c      	adds	r3, #124	; 0x7c
 8012664:	4a91      	ldr	r2, [pc, #580]	; (80128ac <problem_fetch+0x1158c>)
 8012666:	461c      	mov	r4, r3
 8012668:	4615      	mov	r5, r2
 801266a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801266c:	6020      	str	r0, [r4, #0]
 801266e:	6061      	str	r1, [r4, #4]
 8012670:	60a2      	str	r2, [r4, #8]
 8012672:	60e3      	str	r3, [r4, #12]
			p->moveSize = 7;
 8012674:	687b      	ldr	r3, [r7, #4]
 8012676:	2207      	movs	r2, #7
 8012678:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"C,E,E,H,H,K,I");
 801267a:	687b      	ldr	r3, [r7, #4]
 801267c:	3340      	adds	r3, #64	; 0x40
 801267e:	4a8c      	ldr	r2, [pc, #560]	; (80128b0 <problem_fetch+0x11590>)
 8012680:	461c      	mov	r4, r3
 8012682:	4613      	mov	r3, r2
 8012684:	cb07      	ldmia	r3!, {r0, r1, r2}
 8012686:	6020      	str	r0, [r4, #0]
 8012688:	6061      	str	r1, [r4, #4]
 801268a:	60a2      	str	r2, [r4, #8]
 801268c:	881b      	ldrh	r3, [r3, #0]
 801268e:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,6,8,10,12,14,18");
 8012690:	687b      	ldr	r3, [r7, #4]
 8012692:	3304      	adds	r3, #4
 8012694:	4a87      	ldr	r2, [pc, #540]	; (80128b4 <problem_fetch+0x11594>)
 8012696:	461d      	mov	r5, r3
 8012698:	4614      	mov	r4, r2
 801269a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801269c:	6028      	str	r0, [r5, #0]
 801269e:	6069      	str	r1, [r5, #4]
 80126a0:	60aa      	str	r2, [r5, #8]
 80126a2:	60eb      	str	r3, [r5, #12]
 80126a4:	8823      	ldrh	r3, [r4, #0]
 80126a6:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish, "s,s,d,d,d,d,e");
 80126a8:	687b      	ldr	r3, [r7, #4]
 80126aa:	33d8      	adds	r3, #216	; 0xd8
 80126ac:	4a78      	ldr	r2, [pc, #480]	; (8012890 <problem_fetch+0x11570>)
 80126ae:	461c      	mov	r4, r3
 80126b0:	4613      	mov	r3, r2
 80126b2:	cb07      	ldmia	r3!, {r0, r1, r2}
 80126b4:	6020      	str	r0, [r4, #0]
 80126b6:	6061      	str	r1, [r4, #4]
 80126b8:	60a2      	str	r2, [r4, #8]
 80126ba:	881b      	ldrh	r3, [r3, #0]
 80126bc:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade, "7A+");
 80126be:	687b      	ldr	r3, [r7, #4]
 80126c0:	33cc      	adds	r3, #204	; 0xcc
 80126c2:	4a7d      	ldr	r2, [pc, #500]	; (80128b8 <problem_fetch+0x11598>)
 80126c4:	6810      	ldr	r0, [r2, #0]
 80126c6:	6018      	str	r0, [r3, #0]
			break;
 80126c8:	f008 bb70 	b.w	801adac <problem_fetch+0x19a8c>
		case 58 :
			strcpy(p->name,"UNDERTAKER");
 80126cc:	687b      	ldr	r3, [r7, #4]
 80126ce:	337c      	adds	r3, #124	; 0x7c
 80126d0:	497a      	ldr	r1, [pc, #488]	; (80128bc <problem_fetch+0x1159c>)
 80126d2:	461a      	mov	r2, r3
 80126d4:	460b      	mov	r3, r1
 80126d6:	cb03      	ldmia	r3!, {r0, r1}
 80126d8:	6010      	str	r0, [r2, #0]
 80126da:	6051      	str	r1, [r2, #4]
 80126dc:	8819      	ldrh	r1, [r3, #0]
 80126de:	789b      	ldrb	r3, [r3, #2]
 80126e0:	8111      	strh	r1, [r2, #8]
 80126e2:	7293      	strb	r3, [r2, #10]
			p->moveSize = 5;
 80126e4:	687b      	ldr	r3, [r7, #4]
 80126e6:	2205      	movs	r2, #5
 80126e8:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"C,E,B,E,D");
 80126ea:	687b      	ldr	r3, [r7, #4]
 80126ec:	3340      	adds	r3, #64	; 0x40
 80126ee:	4974      	ldr	r1, [pc, #464]	; (80128c0 <problem_fetch+0x115a0>)
 80126f0:	461a      	mov	r2, r3
 80126f2:	460b      	mov	r3, r1
 80126f4:	cb03      	ldmia	r3!, {r0, r1}
 80126f6:	6010      	str	r0, [r2, #0]
 80126f8:	6051      	str	r1, [r2, #4]
 80126fa:	881b      	ldrh	r3, [r3, #0]
 80126fc:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"5,9,12,14,18");
 80126fe:	687b      	ldr	r3, [r7, #4]
 8012700:	3304      	adds	r3, #4
 8012702:	4a70      	ldr	r2, [pc, #448]	; (80128c4 <problem_fetch+0x115a4>)
 8012704:	461c      	mov	r4, r3
 8012706:	4613      	mov	r3, r2
 8012708:	cb07      	ldmia	r3!, {r0, r1, r2}
 801270a:	6020      	str	r0, [r4, #0]
 801270c:	6061      	str	r1, [r4, #4]
 801270e:	60a2      	str	r2, [r4, #8]
 8012710:	781b      	ldrb	r3, [r3, #0]
 8012712:	7323      	strb	r3, [r4, #12]
			strcpy(p->startFinish, "s,d,d,d,e");
 8012714:	687b      	ldr	r3, [r7, #4]
 8012716:	33d8      	adds	r3, #216	; 0xd8
 8012718:	496b      	ldr	r1, [pc, #428]	; (80128c8 <problem_fetch+0x115a8>)
 801271a:	461a      	mov	r2, r3
 801271c:	460b      	mov	r3, r1
 801271e:	cb03      	ldmia	r3!, {r0, r1}
 8012720:	6010      	str	r0, [r2, #0]
 8012722:	6051      	str	r1, [r2, #4]
 8012724:	881b      	ldrh	r3, [r3, #0]
 8012726:	8113      	strh	r3, [r2, #8]
			strcpy(p->grade, "7B");
 8012728:	687b      	ldr	r3, [r7, #4]
 801272a:	33cc      	adds	r3, #204	; 0xcc
 801272c:	4a67      	ldr	r2, [pc, #412]	; (80128cc <problem_fetch+0x115ac>)
 801272e:	8811      	ldrh	r1, [r2, #0]
 8012730:	7892      	ldrb	r2, [r2, #2]
 8012732:	8019      	strh	r1, [r3, #0]
 8012734:	709a      	strb	r2, [r3, #2]
			break;
 8012736:	f008 bb39 	b.w	801adac <problem_fetch+0x19a8c>
		case 580 :
			strcpy(p->name,"FOR BEGINNERS - 3");
 801273a:	687b      	ldr	r3, [r7, #4]
 801273c:	337c      	adds	r3, #124	; 0x7c
 801273e:	4a64      	ldr	r2, [pc, #400]	; (80128d0 <problem_fetch+0x115b0>)
 8012740:	461d      	mov	r5, r3
 8012742:	4614      	mov	r4, r2
 8012744:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8012746:	6028      	str	r0, [r5, #0]
 8012748:	6069      	str	r1, [r5, #4]
 801274a:	60aa      	str	r2, [r5, #8]
 801274c:	60eb      	str	r3, [r5, #12]
 801274e:	8823      	ldrh	r3, [r4, #0]
 8012750:	822b      	strh	r3, [r5, #16]
			p->moveSize = 8;
 8012752:	687b      	ldr	r3, [r7, #4]
 8012754:	2208      	movs	r2, #8
 8012756:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"E,G,I,F,I,H,E,D");
 8012758:	687b      	ldr	r3, [r7, #4]
 801275a:	3340      	adds	r3, #64	; 0x40
 801275c:	4a5d      	ldr	r2, [pc, #372]	; (80128d4 <problem_fetch+0x115b4>)
 801275e:	461c      	mov	r4, r3
 8012760:	4615      	mov	r5, r2
 8012762:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8012764:	6020      	str	r0, [r4, #0]
 8012766:	6061      	str	r1, [r4, #4]
 8012768:	60a2      	str	r2, [r4, #8]
 801276a:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"8,4,10,13,14,12,16,18");
 801276c:	687b      	ldr	r3, [r7, #4]
 801276e:	3304      	adds	r3, #4
 8012770:	4a59      	ldr	r2, [pc, #356]	; (80128d8 <problem_fetch+0x115b8>)
 8012772:	461d      	mov	r5, r3
 8012774:	4614      	mov	r4, r2
 8012776:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8012778:	6028      	str	r0, [r5, #0]
 801277a:	6069      	str	r1, [r5, #4]
 801277c:	60aa      	str	r2, [r5, #8]
 801277e:	60eb      	str	r3, [r5, #12]
 8012780:	6820      	ldr	r0, [r4, #0]
 8012782:	6128      	str	r0, [r5, #16]
 8012784:	88a3      	ldrh	r3, [r4, #4]
 8012786:	82ab      	strh	r3, [r5, #20]
			strcpy(p->startFinish, "d,s,d,d,d,d,d,e");
 8012788:	687b      	ldr	r3, [r7, #4]
 801278a:	33d8      	adds	r3, #216	; 0xd8
 801278c:	4a53      	ldr	r2, [pc, #332]	; (80128dc <problem_fetch+0x115bc>)
 801278e:	461c      	mov	r4, r3
 8012790:	4615      	mov	r5, r2
 8012792:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8012794:	6020      	str	r0, [r4, #0]
 8012796:	6061      	str	r1, [r4, #4]
 8012798:	60a2      	str	r2, [r4, #8]
 801279a:	60e3      	str	r3, [r4, #12]
			strcpy(p->grade, "6B+");
 801279c:	687b      	ldr	r3, [r7, #4]
 801279e:	33cc      	adds	r3, #204	; 0xcc
 80127a0:	4a3c      	ldr	r2, [pc, #240]	; (8012894 <problem_fetch+0x11574>)
 80127a2:	6810      	ldr	r0, [r2, #0]
 80127a4:	6018      	str	r0, [r3, #0]
			break;
 80127a6:	f008 bb01 	b.w	801adac <problem_fetch+0x19a8c>
		case 581 :
			strcpy(p->name,"LOST DAY");
 80127aa:	687b      	ldr	r3, [r7, #4]
 80127ac:	337c      	adds	r3, #124	; 0x7c
 80127ae:	494c      	ldr	r1, [pc, #304]	; (80128e0 <problem_fetch+0x115c0>)
 80127b0:	461a      	mov	r2, r3
 80127b2:	460b      	mov	r3, r1
 80127b4:	cb03      	ldmia	r3!, {r0, r1}
 80127b6:	6010      	str	r0, [r2, #0]
 80127b8:	6051      	str	r1, [r2, #4]
 80127ba:	781b      	ldrb	r3, [r3, #0]
 80127bc:	7213      	strb	r3, [r2, #8]
			p->moveSize = 6;
 80127be:	687b      	ldr	r3, [r7, #4]
 80127c0:	2206      	movs	r2, #6
 80127c2:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"E,J,H,C,D,D");
 80127c4:	687b      	ldr	r3, [r7, #4]
 80127c6:	3340      	adds	r3, #64	; 0x40
 80127c8:	4a46      	ldr	r2, [pc, #280]	; (80128e4 <problem_fetch+0x115c4>)
 80127ca:	461c      	mov	r4, r3
 80127cc:	4613      	mov	r3, r2
 80127ce:	cb07      	ldmia	r3!, {r0, r1, r2}
 80127d0:	6020      	str	r0, [r4, #0]
 80127d2:	6061      	str	r1, [r4, #4]
 80127d4:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"6,5,10,13,15,18");
 80127d6:	687b      	ldr	r3, [r7, #4]
 80127d8:	3304      	adds	r3, #4
 80127da:	4a43      	ldr	r2, [pc, #268]	; (80128e8 <problem_fetch+0x115c8>)
 80127dc:	461c      	mov	r4, r3
 80127de:	4615      	mov	r5, r2
 80127e0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80127e2:	6020      	str	r0, [r4, #0]
 80127e4:	6061      	str	r1, [r4, #4]
 80127e6:	60a2      	str	r2, [r4, #8]
 80127e8:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish, "s,s,d,d,d,e");
 80127ea:	687b      	ldr	r3, [r7, #4]
 80127ec:	33d8      	adds	r3, #216	; 0xd8
 80127ee:	4a3f      	ldr	r2, [pc, #252]	; (80128ec <problem_fetch+0x115cc>)
 80127f0:	461c      	mov	r4, r3
 80127f2:	4613      	mov	r3, r2
 80127f4:	cb07      	ldmia	r3!, {r0, r1, r2}
 80127f6:	6020      	str	r0, [r4, #0]
 80127f8:	6061      	str	r1, [r4, #4]
 80127fa:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade, "6C");
 80127fc:	687b      	ldr	r3, [r7, #4]
 80127fe:	33cc      	adds	r3, #204	; 0xcc
 8012800:	4a29      	ldr	r2, [pc, #164]	; (80128a8 <problem_fetch+0x11588>)
 8012802:	8811      	ldrh	r1, [r2, #0]
 8012804:	7892      	ldrb	r2, [r2, #2]
 8012806:	8019      	strh	r1, [r3, #0]
 8012808:	709a      	strb	r2, [r3, #2]
			break;
 801280a:	f008 bacf 	b.w	801adac <problem_fetch+0x19a8c>
		case 582 :
			strcpy(p->name,"GLUTAMATO MONOSODICO");
 801280e:	687b      	ldr	r3, [r7, #4]
 8012810:	337c      	adds	r3, #124	; 0x7c
 8012812:	4a37      	ldr	r2, [pc, #220]	; (80128f0 <problem_fetch+0x115d0>)
 8012814:	461d      	mov	r5, r3
 8012816:	4614      	mov	r4, r2
 8012818:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801281a:	6028      	str	r0, [r5, #0]
 801281c:	6069      	str	r1, [r5, #4]
 801281e:	60aa      	str	r2, [r5, #8]
 8012820:	60eb      	str	r3, [r5, #12]
 8012822:	6820      	ldr	r0, [r4, #0]
 8012824:	6128      	str	r0, [r5, #16]
 8012826:	7923      	ldrb	r3, [r4, #4]
 8012828:	752b      	strb	r3, [r5, #20]
			p->moveSize = 7;
 801282a:	687b      	ldr	r3, [r7, #4]
 801282c:	2207      	movs	r2, #7
 801282e:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"J,G,G,C,B,E,D");
 8012830:	687b      	ldr	r3, [r7, #4]
 8012832:	3340      	adds	r3, #64	; 0x40
 8012834:	4a2f      	ldr	r2, [pc, #188]	; (80128f4 <problem_fetch+0x115d4>)
 8012836:	461c      	mov	r4, r3
 8012838:	4613      	mov	r3, r2
 801283a:	cb07      	ldmia	r3!, {r0, r1, r2}
 801283c:	6020      	str	r0, [r4, #0]
 801283e:	6061      	str	r1, [r4, #4]
 8012840:	60a2      	str	r2, [r4, #8]
 8012842:	881b      	ldrh	r3, [r3, #0]
 8012844:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,4,9,8,12,12,18");
 8012846:	687b      	ldr	r3, [r7, #4]
 8012848:	3304      	adds	r3, #4
 801284a:	4a2b      	ldr	r2, [pc, #172]	; (80128f8 <problem_fetch+0x115d8>)
 801284c:	461d      	mov	r5, r3
 801284e:	4614      	mov	r4, r2
 8012850:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8012852:	6028      	str	r0, [r5, #0]
 8012854:	6069      	str	r1, [r5, #4]
 8012856:	60aa      	str	r2, [r5, #8]
 8012858:	60eb      	str	r3, [r5, #12]
 801285a:	7823      	ldrb	r3, [r4, #0]
 801285c:	742b      	strb	r3, [r5, #16]
			strcpy(p->startFinish, "s,s,d,d,d,d,e");
 801285e:	687b      	ldr	r3, [r7, #4]
 8012860:	33d8      	adds	r3, #216	; 0xd8
 8012862:	4a0b      	ldr	r2, [pc, #44]	; (8012890 <problem_fetch+0x11570>)
 8012864:	461c      	mov	r4, r3
 8012866:	4613      	mov	r3, r2
 8012868:	cb07      	ldmia	r3!, {r0, r1, r2}
 801286a:	6020      	str	r0, [r4, #0]
 801286c:	6061      	str	r1, [r4, #4]
 801286e:	60a2      	str	r2, [r4, #8]
 8012870:	881b      	ldrh	r3, [r3, #0]
 8012872:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade, "6B+");
 8012874:	687b      	ldr	r3, [r7, #4]
 8012876:	33cc      	adds	r3, #204	; 0xcc
 8012878:	4a06      	ldr	r2, [pc, #24]	; (8012894 <problem_fetch+0x11574>)
 801287a:	6810      	ldr	r0, [r2, #0]
 801287c:	6018      	str	r0, [r3, #0]
			break;
 801287e:	f008 ba95 	b.w	801adac <problem_fetch+0x19a8c>
 8012882:	bf00      	nop
 8012884:	08027508 	.word	0x08027508
 8012888:	08027510 	.word	0x08027510
 801288c:	08027520 	.word	0x08027520
 8012890:	080212a0 	.word	0x080212a0
 8012894:	080212b0 	.word	0x080212b0
 8012898:	08027534 	.word	0x08027534
 801289c:	08027544 	.word	0x08027544
 80128a0:	08027550 	.word	0x08027550
 80128a4:	0802139c 	.word	0x0802139c
 80128a8:	08021370 	.word	0x08021370
 80128ac:	08027560 	.word	0x08027560
 80128b0:	08027570 	.word	0x08027570
 80128b4:	08027580 	.word	0x08027580
 80128b8:	08021424 	.word	0x08021424
 80128bc:	08027594 	.word	0x08027594
 80128c0:	080275a0 	.word	0x080275a0
 80128c4:	08022d64 	.word	0x08022d64
 80128c8:	08021320 	.word	0x08021320
 80128cc:	0802132c 	.word	0x0802132c
 80128d0:	080275ac 	.word	0x080275ac
 80128d4:	080275c0 	.word	0x080275c0
 80128d8:	080275d0 	.word	0x080275d0
 80128dc:	08027198 	.word	0x08027198
 80128e0:	080275e8 	.word	0x080275e8
 80128e4:	080275f4 	.word	0x080275f4
 80128e8:	08026740 	.word	0x08026740
 80128ec:	08021910 	.word	0x08021910
 80128f0:	08027600 	.word	0x08027600
 80128f4:	08027618 	.word	0x08027618
 80128f8:	08027628 	.word	0x08027628
		case 583 :
			strcpy(p->name,"LA BANDA DEL PATIO");
 80128fc:	687b      	ldr	r3, [r7, #4]
 80128fe:	337c      	adds	r3, #124	; 0x7c
 8012900:	4abd      	ldr	r2, [pc, #756]	; (8012bf8 <problem_fetch+0x118d8>)
 8012902:	461d      	mov	r5, r3
 8012904:	4614      	mov	r4, r2
 8012906:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8012908:	6028      	str	r0, [r5, #0]
 801290a:	6069      	str	r1, [r5, #4]
 801290c:	60aa      	str	r2, [r5, #8]
 801290e:	60eb      	str	r3, [r5, #12]
 8012910:	8823      	ldrh	r3, [r4, #0]
 8012912:	78a2      	ldrb	r2, [r4, #2]
 8012914:	822b      	strh	r3, [r5, #16]
 8012916:	4613      	mov	r3, r2
 8012918:	74ab      	strb	r3, [r5, #18]
			p->moveSize = 8;
 801291a:	687b      	ldr	r3, [r7, #4]
 801291c:	2208      	movs	r2, #8
 801291e:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"G,J,G,C,B,E,A,D");
 8012920:	687b      	ldr	r3, [r7, #4]
 8012922:	3340      	adds	r3, #64	; 0x40
 8012924:	4ab5      	ldr	r2, [pc, #724]	; (8012bfc <problem_fetch+0x118dc>)
 8012926:	461c      	mov	r4, r3
 8012928:	4615      	mov	r5, r2
 801292a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801292c:	6020      	str	r0, [r4, #0]
 801292e:	6061      	str	r1, [r4, #4]
 8012930:	60a2      	str	r2, [r4, #8]
 8012932:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,5,9,8,12,12,14,18");
 8012934:	687b      	ldr	r3, [r7, #4]
 8012936:	3304      	adds	r3, #4
 8012938:	4ab1      	ldr	r2, [pc, #708]	; (8012c00 <problem_fetch+0x118e0>)
 801293a:	461d      	mov	r5, r3
 801293c:	4614      	mov	r4, r2
 801293e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8012940:	6028      	str	r0, [r5, #0]
 8012942:	6069      	str	r1, [r5, #4]
 8012944:	60aa      	str	r2, [r5, #8]
 8012946:	60eb      	str	r3, [r5, #12]
 8012948:	6820      	ldr	r0, [r4, #0]
 801294a:	6128      	str	r0, [r5, #16]
			strcpy(p->startFinish, "s,s,d,d,d,d,d,e");
 801294c:	687b      	ldr	r3, [r7, #4]
 801294e:	33d8      	adds	r3, #216	; 0xd8
 8012950:	4aac      	ldr	r2, [pc, #688]	; (8012c04 <problem_fetch+0x118e4>)
 8012952:	461c      	mov	r4, r3
 8012954:	4615      	mov	r5, r2
 8012956:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8012958:	6020      	str	r0, [r4, #0]
 801295a:	6061      	str	r1, [r4, #4]
 801295c:	60a2      	str	r2, [r4, #8]
 801295e:	60e3      	str	r3, [r4, #12]
			strcpy(p->grade, "6B+");
 8012960:	687b      	ldr	r3, [r7, #4]
 8012962:	33cc      	adds	r3, #204	; 0xcc
 8012964:	4aa8      	ldr	r2, [pc, #672]	; (8012c08 <problem_fetch+0x118e8>)
 8012966:	6810      	ldr	r0, [r2, #0]
 8012968:	6018      	str	r0, [r3, #0]
			break;
 801296a:	f008 ba1f 	b.w	801adac <problem_fetch+0x19a8c>
		case 584 :
			strcpy(p->name,"OACHKAZL");
 801296e:	687b      	ldr	r3, [r7, #4]
 8012970:	337c      	adds	r3, #124	; 0x7c
 8012972:	49a6      	ldr	r1, [pc, #664]	; (8012c0c <problem_fetch+0x118ec>)
 8012974:	461a      	mov	r2, r3
 8012976:	460b      	mov	r3, r1
 8012978:	cb03      	ldmia	r3!, {r0, r1}
 801297a:	6010      	str	r0, [r2, #0]
 801297c:	6051      	str	r1, [r2, #4]
 801297e:	781b      	ldrb	r3, [r3, #0]
 8012980:	7213      	strb	r3, [r2, #8]
			p->moveSize = 8;
 8012982:	687b      	ldr	r3, [r7, #4]
 8012984:	2208      	movs	r2, #8
 8012986:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"J,H,G,B,C,D,D,C");
 8012988:	687b      	ldr	r3, [r7, #4]
 801298a:	3340      	adds	r3, #64	; 0x40
 801298c:	4aa0      	ldr	r2, [pc, #640]	; (8012c10 <problem_fetch+0x118f0>)
 801298e:	461c      	mov	r4, r3
 8012990:	4615      	mov	r5, r2
 8012992:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8012994:	6020      	str	r0, [r4, #0]
 8012996:	6061      	str	r1, [r4, #4]
 8012998:	60a2      	str	r2, [r4, #8]
 801299a:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,8,9,12,16,18,15,8");
 801299c:	687b      	ldr	r3, [r7, #4]
 801299e:	3304      	adds	r3, #4
 80129a0:	4a9c      	ldr	r2, [pc, #624]	; (8012c14 <problem_fetch+0x118f4>)
 80129a2:	461d      	mov	r5, r3
 80129a4:	4614      	mov	r4, r2
 80129a6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80129a8:	6028      	str	r0, [r5, #0]
 80129aa:	6069      	str	r1, [r5, #4]
 80129ac:	60aa      	str	r2, [r5, #8]
 80129ae:	60eb      	str	r3, [r5, #12]
 80129b0:	6820      	ldr	r0, [r4, #0]
 80129b2:	6128      	str	r0, [r5, #16]
			strcpy(p->startFinish, "s,d,d,d,d,e,d,d");
 80129b4:	687b      	ldr	r3, [r7, #4]
 80129b6:	33d8      	adds	r3, #216	; 0xd8
 80129b8:	4a97      	ldr	r2, [pc, #604]	; (8012c18 <problem_fetch+0x118f8>)
 80129ba:	461c      	mov	r4, r3
 80129bc:	4615      	mov	r5, r2
 80129be:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80129c0:	6020      	str	r0, [r4, #0]
 80129c2:	6061      	str	r1, [r4, #4]
 80129c4:	60a2      	str	r2, [r4, #8]
 80129c6:	60e3      	str	r3, [r4, #12]
			strcpy(p->grade, "7A+");
 80129c8:	687b      	ldr	r3, [r7, #4]
 80129ca:	33cc      	adds	r3, #204	; 0xcc
 80129cc:	4a93      	ldr	r2, [pc, #588]	; (8012c1c <problem_fetch+0x118fc>)
 80129ce:	6810      	ldr	r0, [r2, #0]
 80129d0:	6018      	str	r0, [r3, #0]
			break;
 80129d2:	f008 b9eb 	b.w	801adac <problem_fetch+0x19a8c>
		case 585 :
			strcpy(p->name,"THE WALL 1");
 80129d6:	687b      	ldr	r3, [r7, #4]
 80129d8:	337c      	adds	r3, #124	; 0x7c
 80129da:	4991      	ldr	r1, [pc, #580]	; (8012c20 <problem_fetch+0x11900>)
 80129dc:	461a      	mov	r2, r3
 80129de:	460b      	mov	r3, r1
 80129e0:	cb03      	ldmia	r3!, {r0, r1}
 80129e2:	6010      	str	r0, [r2, #0]
 80129e4:	6051      	str	r1, [r2, #4]
 80129e6:	8819      	ldrh	r1, [r3, #0]
 80129e8:	789b      	ldrb	r3, [r3, #2]
 80129ea:	8111      	strh	r1, [r2, #8]
 80129ec:	7293      	strb	r3, [r2, #10]
			p->moveSize = 9;
 80129ee:	687b      	ldr	r3, [r7, #4]
 80129f0:	2209      	movs	r2, #9
 80129f2:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"B,G,G,B,F,F,I,E,I");
 80129f4:	687b      	ldr	r3, [r7, #4]
 80129f6:	3340      	adds	r3, #64	; 0x40
 80129f8:	4a8a      	ldr	r2, [pc, #552]	; (8012c24 <problem_fetch+0x11904>)
 80129fa:	461d      	mov	r5, r3
 80129fc:	4614      	mov	r4, r2
 80129fe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8012a00:	6028      	str	r0, [r5, #0]
 8012a02:	6069      	str	r1, [r5, #4]
 8012a04:	60aa      	str	r2, [r5, #8]
 8012a06:	60eb      	str	r3, [r5, #12]
 8012a08:	8823      	ldrh	r3, [r4, #0]
 8012a0a:	822b      	strh	r3, [r5, #16]
			strcpy(p->moveNumbers,"6,4,9,10,11,13,14,16,18");
 8012a0c:	687b      	ldr	r3, [r7, #4]
 8012a0e:	3304      	adds	r3, #4
 8012a10:	4a85      	ldr	r2, [pc, #532]	; (8012c28 <problem_fetch+0x11908>)
 8012a12:	461d      	mov	r5, r3
 8012a14:	4614      	mov	r4, r2
 8012a16:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8012a18:	6028      	str	r0, [r5, #0]
 8012a1a:	6069      	str	r1, [r5, #4]
 8012a1c:	60aa      	str	r2, [r5, #8]
 8012a1e:	60eb      	str	r3, [r5, #12]
 8012a20:	cc03      	ldmia	r4!, {r0, r1}
 8012a22:	6128      	str	r0, [r5, #16]
 8012a24:	6169      	str	r1, [r5, #20]
			strcpy(p->startFinish, "s,s,d,d,d,d,d,d,e");
 8012a26:	687b      	ldr	r3, [r7, #4]
 8012a28:	33d8      	adds	r3, #216	; 0xd8
 8012a2a:	4a80      	ldr	r2, [pc, #512]	; (8012c2c <problem_fetch+0x1190c>)
 8012a2c:	461d      	mov	r5, r3
 8012a2e:	4614      	mov	r4, r2
 8012a30:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8012a32:	6028      	str	r0, [r5, #0]
 8012a34:	6069      	str	r1, [r5, #4]
 8012a36:	60aa      	str	r2, [r5, #8]
 8012a38:	60eb      	str	r3, [r5, #12]
 8012a3a:	8823      	ldrh	r3, [r4, #0]
 8012a3c:	822b      	strh	r3, [r5, #16]
			strcpy(p->grade, "6C");
 8012a3e:	687b      	ldr	r3, [r7, #4]
 8012a40:	33cc      	adds	r3, #204	; 0xcc
 8012a42:	4a7b      	ldr	r2, [pc, #492]	; (8012c30 <problem_fetch+0x11910>)
 8012a44:	8811      	ldrh	r1, [r2, #0]
 8012a46:	7892      	ldrb	r2, [r2, #2]
 8012a48:	8019      	strh	r1, [r3, #0]
 8012a4a:	709a      	strb	r2, [r3, #2]
			break;
 8012a4c:	f008 b9ae 	b.w	801adac <problem_fetch+0x19a8c>
		case 586 :
			strcpy(p->name,"ET");
 8012a50:	687b      	ldr	r3, [r7, #4]
 8012a52:	337c      	adds	r3, #124	; 0x7c
 8012a54:	4a77      	ldr	r2, [pc, #476]	; (8012c34 <problem_fetch+0x11914>)
 8012a56:	8811      	ldrh	r1, [r2, #0]
 8012a58:	7892      	ldrb	r2, [r2, #2]
 8012a5a:	8019      	strh	r1, [r3, #0]
 8012a5c:	709a      	strb	r2, [r3, #2]
			p->moveSize = 7;
 8012a5e:	687b      	ldr	r3, [r7, #4]
 8012a60:	2207      	movs	r2, #7
 8012a62:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"J,E,E,B,E,E,I");
 8012a64:	687b      	ldr	r3, [r7, #4]
 8012a66:	3340      	adds	r3, #64	; 0x40
 8012a68:	4a73      	ldr	r2, [pc, #460]	; (8012c38 <problem_fetch+0x11918>)
 8012a6a:	461c      	mov	r4, r3
 8012a6c:	4613      	mov	r3, r2
 8012a6e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8012a70:	6020      	str	r0, [r4, #0]
 8012a72:	6061      	str	r1, [r4, #4]
 8012a74:	60a2      	str	r2, [r4, #8]
 8012a76:	881b      	ldrh	r3, [r3, #0]
 8012a78:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,6,8,10,12,16,18");
 8012a7a:	687b      	ldr	r3, [r7, #4]
 8012a7c:	3304      	adds	r3, #4
 8012a7e:	4a6f      	ldr	r2, [pc, #444]	; (8012c3c <problem_fetch+0x1191c>)
 8012a80:	461d      	mov	r5, r3
 8012a82:	4614      	mov	r4, r2
 8012a84:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8012a86:	6028      	str	r0, [r5, #0]
 8012a88:	6069      	str	r1, [r5, #4]
 8012a8a:	60aa      	str	r2, [r5, #8]
 8012a8c:	60eb      	str	r3, [r5, #12]
 8012a8e:	8823      	ldrh	r3, [r4, #0]
 8012a90:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish, "s,d,d,d,d,d,e");
 8012a92:	687b      	ldr	r3, [r7, #4]
 8012a94:	33d8      	adds	r3, #216	; 0xd8
 8012a96:	4a6a      	ldr	r2, [pc, #424]	; (8012c40 <problem_fetch+0x11920>)
 8012a98:	461c      	mov	r4, r3
 8012a9a:	4613      	mov	r3, r2
 8012a9c:	cb07      	ldmia	r3!, {r0, r1, r2}
 8012a9e:	6020      	str	r0, [r4, #0]
 8012aa0:	6061      	str	r1, [r4, #4]
 8012aa2:	60a2      	str	r2, [r4, #8]
 8012aa4:	881b      	ldrh	r3, [r3, #0]
 8012aa6:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade, "6C");
 8012aa8:	687b      	ldr	r3, [r7, #4]
 8012aaa:	33cc      	adds	r3, #204	; 0xcc
 8012aac:	4a60      	ldr	r2, [pc, #384]	; (8012c30 <problem_fetch+0x11910>)
 8012aae:	8811      	ldrh	r1, [r2, #0]
 8012ab0:	7892      	ldrb	r2, [r2, #2]
 8012ab2:	8019      	strh	r1, [r3, #0]
 8012ab4:	709a      	strb	r2, [r3, #2]
			break;
 8012ab6:	f008 b979 	b.w	801adac <problem_fetch+0x19a8c>
		case 587 :
			strcpy(p->name,"SOFA 3");
 8012aba:	687b      	ldr	r3, [r7, #4]
 8012abc:	337c      	adds	r3, #124	; 0x7c
 8012abe:	4a61      	ldr	r2, [pc, #388]	; (8012c44 <problem_fetch+0x11924>)
 8012ac0:	6810      	ldr	r0, [r2, #0]
 8012ac2:	6018      	str	r0, [r3, #0]
 8012ac4:	8891      	ldrh	r1, [r2, #4]
 8012ac6:	7992      	ldrb	r2, [r2, #6]
 8012ac8:	8099      	strh	r1, [r3, #4]
 8012aca:	719a      	strb	r2, [r3, #6]
			p->moveSize = 5;
 8012acc:	687b      	ldr	r3, [r7, #4]
 8012ace:	2205      	movs	r2, #5
 8012ad0:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"B,G,H,J,I");
 8012ad2:	687b      	ldr	r3, [r7, #4]
 8012ad4:	3340      	adds	r3, #64	; 0x40
 8012ad6:	495c      	ldr	r1, [pc, #368]	; (8012c48 <problem_fetch+0x11928>)
 8012ad8:	461a      	mov	r2, r3
 8012ada:	460b      	mov	r3, r1
 8012adc:	cb03      	ldmia	r3!, {r0, r1}
 8012ade:	6010      	str	r0, [r2, #0]
 8012ae0:	6051      	str	r1, [r2, #4]
 8012ae2:	881b      	ldrh	r3, [r3, #0]
 8012ae4:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"6,9,12,13,18");
 8012ae6:	687b      	ldr	r3, [r7, #4]
 8012ae8:	3304      	adds	r3, #4
 8012aea:	4a58      	ldr	r2, [pc, #352]	; (8012c4c <problem_fetch+0x1192c>)
 8012aec:	461c      	mov	r4, r3
 8012aee:	4613      	mov	r3, r2
 8012af0:	cb07      	ldmia	r3!, {r0, r1, r2}
 8012af2:	6020      	str	r0, [r4, #0]
 8012af4:	6061      	str	r1, [r4, #4]
 8012af6:	60a2      	str	r2, [r4, #8]
 8012af8:	781b      	ldrb	r3, [r3, #0]
 8012afa:	7323      	strb	r3, [r4, #12]
			strcpy(p->startFinish, "s,d,d,d,e");
 8012afc:	687b      	ldr	r3, [r7, #4]
 8012afe:	33d8      	adds	r3, #216	; 0xd8
 8012b00:	4953      	ldr	r1, [pc, #332]	; (8012c50 <problem_fetch+0x11930>)
 8012b02:	461a      	mov	r2, r3
 8012b04:	460b      	mov	r3, r1
 8012b06:	cb03      	ldmia	r3!, {r0, r1}
 8012b08:	6010      	str	r0, [r2, #0]
 8012b0a:	6051      	str	r1, [r2, #4]
 8012b0c:	881b      	ldrh	r3, [r3, #0]
 8012b0e:	8113      	strh	r3, [r2, #8]
			strcpy(p->grade, "7B+");
 8012b10:	687b      	ldr	r3, [r7, #4]
 8012b12:	33cc      	adds	r3, #204	; 0xcc
 8012b14:	4a4f      	ldr	r2, [pc, #316]	; (8012c54 <problem_fetch+0x11934>)
 8012b16:	6810      	ldr	r0, [r2, #0]
 8012b18:	6018      	str	r0, [r3, #0]
			break;
 8012b1a:	f008 b947 	b.w	801adac <problem_fetch+0x19a8c>
		case 588 :
			strcpy(p->name,"KLIK IT");
 8012b1e:	687b      	ldr	r3, [r7, #4]
 8012b20:	337c      	adds	r3, #124	; 0x7c
 8012b22:	494d      	ldr	r1, [pc, #308]	; (8012c58 <problem_fetch+0x11938>)
 8012b24:	461a      	mov	r2, r3
 8012b26:	460b      	mov	r3, r1
 8012b28:	cb03      	ldmia	r3!, {r0, r1}
 8012b2a:	6010      	str	r0, [r2, #0]
 8012b2c:	6051      	str	r1, [r2, #4]
			p->moveSize = 5;
 8012b2e:	687b      	ldr	r3, [r7, #4]
 8012b30:	2205      	movs	r2, #5
 8012b32:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"G,C,F,A,D");
 8012b34:	687b      	ldr	r3, [r7, #4]
 8012b36:	3340      	adds	r3, #64	; 0x40
 8012b38:	4948      	ldr	r1, [pc, #288]	; (8012c5c <problem_fetch+0x1193c>)
 8012b3a:	461a      	mov	r2, r3
 8012b3c:	460b      	mov	r3, r1
 8012b3e:	cb03      	ldmia	r3!, {r0, r1}
 8012b40:	6010      	str	r0, [r2, #0]
 8012b42:	6051      	str	r1, [r2, #4]
 8012b44:	881b      	ldrh	r3, [r3, #0]
 8012b46:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"4,8,11,14,18");
 8012b48:	687b      	ldr	r3, [r7, #4]
 8012b4a:	3304      	adds	r3, #4
 8012b4c:	4a44      	ldr	r2, [pc, #272]	; (8012c60 <problem_fetch+0x11940>)
 8012b4e:	461c      	mov	r4, r3
 8012b50:	4613      	mov	r3, r2
 8012b52:	cb07      	ldmia	r3!, {r0, r1, r2}
 8012b54:	6020      	str	r0, [r4, #0]
 8012b56:	6061      	str	r1, [r4, #4]
 8012b58:	60a2      	str	r2, [r4, #8]
 8012b5a:	781b      	ldrb	r3, [r3, #0]
 8012b5c:	7323      	strb	r3, [r4, #12]
			strcpy(p->startFinish, "s,d,d,d,e");
 8012b5e:	687b      	ldr	r3, [r7, #4]
 8012b60:	33d8      	adds	r3, #216	; 0xd8
 8012b62:	493b      	ldr	r1, [pc, #236]	; (8012c50 <problem_fetch+0x11930>)
 8012b64:	461a      	mov	r2, r3
 8012b66:	460b      	mov	r3, r1
 8012b68:	cb03      	ldmia	r3!, {r0, r1}
 8012b6a:	6010      	str	r0, [r2, #0]
 8012b6c:	6051      	str	r1, [r2, #4]
 8012b6e:	881b      	ldrh	r3, [r3, #0]
 8012b70:	8113      	strh	r3, [r2, #8]
			strcpy(p->grade, "7C");
 8012b72:	687b      	ldr	r3, [r7, #4]
 8012b74:	33cc      	adds	r3, #204	; 0xcc
 8012b76:	4a3b      	ldr	r2, [pc, #236]	; (8012c64 <problem_fetch+0x11944>)
 8012b78:	8811      	ldrh	r1, [r2, #0]
 8012b7a:	7892      	ldrb	r2, [r2, #2]
 8012b7c:	8019      	strh	r1, [r3, #0]
 8012b7e:	709a      	strb	r2, [r3, #2]
			break;
 8012b80:	f008 b914 	b.w	801adac <problem_fetch+0x19a8c>
		case 589 :
			strcpy(p->name,"THE BLACK");
 8012b84:	687b      	ldr	r3, [r7, #4]
 8012b86:	337c      	adds	r3, #124	; 0x7c
 8012b88:	4937      	ldr	r1, [pc, #220]	; (8012c68 <problem_fetch+0x11948>)
 8012b8a:	461a      	mov	r2, r3
 8012b8c:	460b      	mov	r3, r1
 8012b8e:	cb03      	ldmia	r3!, {r0, r1}
 8012b90:	6010      	str	r0, [r2, #0]
 8012b92:	6051      	str	r1, [r2, #4]
 8012b94:	881b      	ldrh	r3, [r3, #0]
 8012b96:	8113      	strh	r3, [r2, #8]
			p->moveSize = 7;
 8012b98:	687b      	ldr	r3, [r7, #4]
 8012b9a:	2207      	movs	r2, #7
 8012b9c:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"G,D,B,C,H,K,I");
 8012b9e:	687b      	ldr	r3, [r7, #4]
 8012ba0:	3340      	adds	r3, #64	; 0x40
 8012ba2:	4a32      	ldr	r2, [pc, #200]	; (8012c6c <problem_fetch+0x1194c>)
 8012ba4:	461c      	mov	r4, r3
 8012ba6:	4613      	mov	r3, r2
 8012ba8:	cb07      	ldmia	r3!, {r0, r1, r2}
 8012baa:	6020      	str	r0, [r4, #0]
 8012bac:	6061      	str	r1, [r4, #4]
 8012bae:	60a2      	str	r2, [r4, #8]
 8012bb0:	881b      	ldrh	r3, [r3, #0]
 8012bb2:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,7,10,13,13,16,18");
 8012bb4:	687b      	ldr	r3, [r7, #4]
 8012bb6:	3304      	adds	r3, #4
 8012bb8:	4a2d      	ldr	r2, [pc, #180]	; (8012c70 <problem_fetch+0x11950>)
 8012bba:	461d      	mov	r5, r3
 8012bbc:	4614      	mov	r4, r2
 8012bbe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8012bc0:	6028      	str	r0, [r5, #0]
 8012bc2:	6069      	str	r1, [r5, #4]
 8012bc4:	60aa      	str	r2, [r5, #8]
 8012bc6:	60eb      	str	r3, [r5, #12]
 8012bc8:	8823      	ldrh	r3, [r4, #0]
 8012bca:	78a2      	ldrb	r2, [r4, #2]
 8012bcc:	822b      	strh	r3, [r5, #16]
 8012bce:	4613      	mov	r3, r2
 8012bd0:	74ab      	strb	r3, [r5, #18]
			strcpy(p->startFinish, "s,d,d,d,d,d,e");
 8012bd2:	687b      	ldr	r3, [r7, #4]
 8012bd4:	33d8      	adds	r3, #216	; 0xd8
 8012bd6:	4a1a      	ldr	r2, [pc, #104]	; (8012c40 <problem_fetch+0x11920>)
 8012bd8:	461c      	mov	r4, r3
 8012bda:	4613      	mov	r3, r2
 8012bdc:	cb07      	ldmia	r3!, {r0, r1, r2}
 8012bde:	6020      	str	r0, [r4, #0]
 8012be0:	6061      	str	r1, [r4, #4]
 8012be2:	60a2      	str	r2, [r4, #8]
 8012be4:	881b      	ldrh	r3, [r3, #0]
 8012be6:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade, "7A+");
 8012be8:	687b      	ldr	r3, [r7, #4]
 8012bea:	33cc      	adds	r3, #204	; 0xcc
 8012bec:	4a0b      	ldr	r2, [pc, #44]	; (8012c1c <problem_fetch+0x118fc>)
 8012bee:	6810      	ldr	r0, [r2, #0]
 8012bf0:	6018      	str	r0, [r3, #0]
			break;
 8012bf2:	f008 b8db 	b.w	801adac <problem_fetch+0x19a8c>
 8012bf6:	bf00      	nop
 8012bf8:	0802763c 	.word	0x0802763c
 8012bfc:	08027650 	.word	0x08027650
 8012c00:	08027660 	.word	0x08027660
 8012c04:	080214cc 	.word	0x080214cc
 8012c08:	080212b0 	.word	0x080212b0
 8012c0c:	08027674 	.word	0x08027674
 8012c10:	08027680 	.word	0x08027680
 8012c14:	08027690 	.word	0x08027690
 8012c18:	080276a4 	.word	0x080276a4
 8012c1c:	08021424 	.word	0x08021424
 8012c20:	080276b4 	.word	0x080276b4
 8012c24:	080276c0 	.word	0x080276c0
 8012c28:	080276d4 	.word	0x080276d4
 8012c2c:	0802187c 	.word	0x0802187c
 8012c30:	08021370 	.word	0x08021370
 8012c34:	080276ec 	.word	0x080276ec
 8012c38:	080276f0 	.word	0x080276f0
 8012c3c:	080253a0 	.word	0x080253a0
 8012c40:	08021494 	.word	0x08021494
 8012c44:	08027700 	.word	0x08027700
 8012c48:	08027708 	.word	0x08027708
 8012c4c:	08027714 	.word	0x08027714
 8012c50:	08021320 	.word	0x08021320
 8012c54:	08021848 	.word	0x08021848
 8012c58:	08027724 	.word	0x08027724
 8012c5c:	0802772c 	.word	0x0802772c
 8012c60:	08021e8c 	.word	0x08021e8c
 8012c64:	0802158c 	.word	0x0802158c
 8012c68:	08027738 	.word	0x08027738
 8012c6c:	08027744 	.word	0x08027744
 8012c70:	08027754 	.word	0x08027754
		case 59 :
			strcpy(p->name,"REALE");
 8012c74:	687b      	ldr	r3, [r7, #4]
 8012c76:	337c      	adds	r3, #124	; 0x7c
 8012c78:	4ab3      	ldr	r2, [pc, #716]	; (8012f48 <problem_fetch+0x11c28>)
 8012c7a:	6810      	ldr	r0, [r2, #0]
 8012c7c:	6018      	str	r0, [r3, #0]
 8012c7e:	8892      	ldrh	r2, [r2, #4]
 8012c80:	809a      	strh	r2, [r3, #4]
			p->moveSize = 7;
 8012c82:	687b      	ldr	r3, [r7, #4]
 8012c84:	2207      	movs	r2, #7
 8012c86:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"G,H,C,F,G,K,I");
 8012c88:	687b      	ldr	r3, [r7, #4]
 8012c8a:	3340      	adds	r3, #64	; 0x40
 8012c8c:	4aaf      	ldr	r2, [pc, #700]	; (8012f4c <problem_fetch+0x11c2c>)
 8012c8e:	461c      	mov	r4, r3
 8012c90:	4613      	mov	r3, r2
 8012c92:	cb07      	ldmia	r3!, {r0, r1, r2}
 8012c94:	6020      	str	r0, [r4, #0]
 8012c96:	6061      	str	r1, [r4, #4]
 8012c98:	60a2      	str	r2, [r4, #8]
 8012c9a:	881b      	ldrh	r3, [r3, #0]
 8012c9c:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,5,8,11,14,16,18");
 8012c9e:	687b      	ldr	r3, [r7, #4]
 8012ca0:	3304      	adds	r3, #4
 8012ca2:	4aab      	ldr	r2, [pc, #684]	; (8012f50 <problem_fetch+0x11c30>)
 8012ca4:	461d      	mov	r5, r3
 8012ca6:	4614      	mov	r4, r2
 8012ca8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8012caa:	6028      	str	r0, [r5, #0]
 8012cac:	6069      	str	r1, [r5, #4]
 8012cae:	60aa      	str	r2, [r5, #8]
 8012cb0:	60eb      	str	r3, [r5, #12]
 8012cb2:	8823      	ldrh	r3, [r4, #0]
 8012cb4:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish, "s,s,d,d,d,d,e");
 8012cb6:	687b      	ldr	r3, [r7, #4]
 8012cb8:	33d8      	adds	r3, #216	; 0xd8
 8012cba:	4aa6      	ldr	r2, [pc, #664]	; (8012f54 <problem_fetch+0x11c34>)
 8012cbc:	461c      	mov	r4, r3
 8012cbe:	4613      	mov	r3, r2
 8012cc0:	cb07      	ldmia	r3!, {r0, r1, r2}
 8012cc2:	6020      	str	r0, [r4, #0]
 8012cc4:	6061      	str	r1, [r4, #4]
 8012cc6:	60a2      	str	r2, [r4, #8]
 8012cc8:	881b      	ldrh	r3, [r3, #0]
 8012cca:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade, "6C");
 8012ccc:	687b      	ldr	r3, [r7, #4]
 8012cce:	33cc      	adds	r3, #204	; 0xcc
 8012cd0:	4aa1      	ldr	r2, [pc, #644]	; (8012f58 <problem_fetch+0x11c38>)
 8012cd2:	8811      	ldrh	r1, [r2, #0]
 8012cd4:	7892      	ldrb	r2, [r2, #2]
 8012cd6:	8019      	strh	r1, [r3, #0]
 8012cd8:	709a      	strb	r2, [r3, #2]
			break;
 8012cda:	f008 b867 	b.w	801adac <problem_fetch+0x19a8c>
		case 590 :
			strcpy(p->name,"NEW");
 8012cde:	687b      	ldr	r3, [r7, #4]
 8012ce0:	337c      	adds	r3, #124	; 0x7c
 8012ce2:	4a9e      	ldr	r2, [pc, #632]	; (8012f5c <problem_fetch+0x11c3c>)
 8012ce4:	6810      	ldr	r0, [r2, #0]
 8012ce6:	6018      	str	r0, [r3, #0]
			p->moveSize = 14;
 8012ce8:	687b      	ldr	r3, [r7, #4]
 8012cea:	220e      	movs	r2, #14
 8012cec:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"G,H,G,I,H,G,H,I,H,H,I,I,I,J");
 8012cee:	687b      	ldr	r3, [r7, #4]
 8012cf0:	3340      	adds	r3, #64	; 0x40
 8012cf2:	4a9b      	ldr	r2, [pc, #620]	; (8012f60 <problem_fetch+0x11c40>)
 8012cf4:	461d      	mov	r5, r3
 8012cf6:	4614      	mov	r4, r2
 8012cf8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8012cfa:	6028      	str	r0, [r5, #0]
 8012cfc:	6069      	str	r1, [r5, #4]
 8012cfe:	60aa      	str	r2, [r5, #8]
 8012d00:	60eb      	str	r3, [r5, #12]
 8012d02:	cc07      	ldmia	r4!, {r0, r1, r2}
 8012d04:	6128      	str	r0, [r5, #16]
 8012d06:	6169      	str	r1, [r5, #20]
 8012d08:	61aa      	str	r2, [r5, #24]
			strcpy(p->moveNumbers,"4,5,6,7,8,9,10,10,12,13,14,15,18,16");
 8012d0a:	687b      	ldr	r3, [r7, #4]
 8012d0c:	3304      	adds	r3, #4
 8012d0e:	4a95      	ldr	r2, [pc, #596]	; (8012f64 <problem_fetch+0x11c44>)
 8012d10:	4614      	mov	r4, r2
 8012d12:	469c      	mov	ip, r3
 8012d14:	f104 0e20 	add.w	lr, r4, #32
 8012d18:	4665      	mov	r5, ip
 8012d1a:	4626      	mov	r6, r4
 8012d1c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8012d1e:	6028      	str	r0, [r5, #0]
 8012d20:	6069      	str	r1, [r5, #4]
 8012d22:	60aa      	str	r2, [r5, #8]
 8012d24:	60eb      	str	r3, [r5, #12]
 8012d26:	3410      	adds	r4, #16
 8012d28:	f10c 0c10 	add.w	ip, ip, #16
 8012d2c:	4574      	cmp	r4, lr
 8012d2e:	d1f3      	bne.n	8012d18 <problem_fetch+0x119f8>
 8012d30:	4663      	mov	r3, ip
 8012d32:	4622      	mov	r2, r4
 8012d34:	6810      	ldr	r0, [r2, #0]
 8012d36:	6018      	str	r0, [r3, #0]
			strcpy(p->startFinish, "s,s,d,d,d,d,d,d,d,d,d,d,e,d");
 8012d38:	687b      	ldr	r3, [r7, #4]
 8012d3a:	33d8      	adds	r3, #216	; 0xd8
 8012d3c:	4a8a      	ldr	r2, [pc, #552]	; (8012f68 <problem_fetch+0x11c48>)
 8012d3e:	461d      	mov	r5, r3
 8012d40:	4614      	mov	r4, r2
 8012d42:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8012d44:	6028      	str	r0, [r5, #0]
 8012d46:	6069      	str	r1, [r5, #4]
 8012d48:	60aa      	str	r2, [r5, #8]
 8012d4a:	60eb      	str	r3, [r5, #12]
 8012d4c:	cc07      	ldmia	r4!, {r0, r1, r2}
 8012d4e:	6128      	str	r0, [r5, #16]
 8012d50:	6169      	str	r1, [r5, #20]
 8012d52:	61aa      	str	r2, [r5, #24]
			strcpy(p->grade, "6B+");
 8012d54:	687b      	ldr	r3, [r7, #4]
 8012d56:	33cc      	adds	r3, #204	; 0xcc
 8012d58:	4a84      	ldr	r2, [pc, #528]	; (8012f6c <problem_fetch+0x11c4c>)
 8012d5a:	6810      	ldr	r0, [r2, #0]
 8012d5c:	6018      	str	r0, [r3, #0]
			break;
 8012d5e:	f008 b825 	b.w	801adac <problem_fetch+0x19a8c>
		case 591 :
			strcpy(p->name,"I");
 8012d62:	687b      	ldr	r3, [r7, #4]
 8012d64:	337c      	adds	r3, #124	; 0x7c
 8012d66:	4982      	ldr	r1, [pc, #520]	; (8012f70 <problem_fetch+0x11c50>)
 8012d68:	461a      	mov	r2, r3
 8012d6a:	460b      	mov	r3, r1
 8012d6c:	881b      	ldrh	r3, [r3, #0]
 8012d6e:	8013      	strh	r3, [r2, #0]
			p->moveSize = 14;
 8012d70:	687b      	ldr	r3, [r7, #4]
 8012d72:	220e      	movs	r2, #14
 8012d74:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"G,E,H,J,G,G,J,J,I,I,E,H,E,D");
 8012d76:	687b      	ldr	r3, [r7, #4]
 8012d78:	3340      	adds	r3, #64	; 0x40
 8012d7a:	4a7e      	ldr	r2, [pc, #504]	; (8012f74 <problem_fetch+0x11c54>)
 8012d7c:	461d      	mov	r5, r3
 8012d7e:	4614      	mov	r4, r2
 8012d80:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8012d82:	6028      	str	r0, [r5, #0]
 8012d84:	6069      	str	r1, [r5, #4]
 8012d86:	60aa      	str	r2, [r5, #8]
 8012d88:	60eb      	str	r3, [r5, #12]
 8012d8a:	cc07      	ldmia	r4!, {r0, r1, r2}
 8012d8c:	6128      	str	r0, [r5, #16]
 8012d8e:	6169      	str	r1, [r5, #20]
 8012d90:	61aa      	str	r2, [r5, #24]
			strcpy(p->moveNumbers,"14,14,12,12,4,9,7,5,7,9,8,5,16,18");
 8012d92:	687b      	ldr	r3, [r7, #4]
 8012d94:	3304      	adds	r3, #4
 8012d96:	4a78      	ldr	r2, [pc, #480]	; (8012f78 <problem_fetch+0x11c58>)
 8012d98:	4614      	mov	r4, r2
 8012d9a:	469c      	mov	ip, r3
 8012d9c:	f104 0e20 	add.w	lr, r4, #32
 8012da0:	4665      	mov	r5, ip
 8012da2:	4626      	mov	r6, r4
 8012da4:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8012da6:	6028      	str	r0, [r5, #0]
 8012da8:	6069      	str	r1, [r5, #4]
 8012daa:	60aa      	str	r2, [r5, #8]
 8012dac:	60eb      	str	r3, [r5, #12]
 8012dae:	3410      	adds	r4, #16
 8012db0:	f10c 0c10 	add.w	ip, ip, #16
 8012db4:	4574      	cmp	r4, lr
 8012db6:	d1f3      	bne.n	8012da0 <problem_fetch+0x11a80>
 8012db8:	4662      	mov	r2, ip
 8012dba:	4623      	mov	r3, r4
 8012dbc:	881b      	ldrh	r3, [r3, #0]
 8012dbe:	8013      	strh	r3, [r2, #0]
			strcpy(p->startFinish, "d,d,d,d,s,d,d,d,d,d,d,d,d,e");
 8012dc0:	687b      	ldr	r3, [r7, #4]
 8012dc2:	33d8      	adds	r3, #216	; 0xd8
 8012dc4:	4a6d      	ldr	r2, [pc, #436]	; (8012f7c <problem_fetch+0x11c5c>)
 8012dc6:	461d      	mov	r5, r3
 8012dc8:	4614      	mov	r4, r2
 8012dca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8012dcc:	6028      	str	r0, [r5, #0]
 8012dce:	6069      	str	r1, [r5, #4]
 8012dd0:	60aa      	str	r2, [r5, #8]
 8012dd2:	60eb      	str	r3, [r5, #12]
 8012dd4:	cc07      	ldmia	r4!, {r0, r1, r2}
 8012dd6:	6128      	str	r0, [r5, #16]
 8012dd8:	6169      	str	r1, [r5, #20]
 8012dda:	61aa      	str	r2, [r5, #24]
			strcpy(p->grade, "6B+");
 8012ddc:	687b      	ldr	r3, [r7, #4]
 8012dde:	33cc      	adds	r3, #204	; 0xcc
 8012de0:	4a62      	ldr	r2, [pc, #392]	; (8012f6c <problem_fetch+0x11c4c>)
 8012de2:	6810      	ldr	r0, [r2, #0]
 8012de4:	6018      	str	r0, [r3, #0]
			break;
 8012de6:	f007 bfe1 	b.w	801adac <problem_fetch+0x19a8c>
		case 592 :
			strcpy(p->name,"III");
 8012dea:	687b      	ldr	r3, [r7, #4]
 8012dec:	337c      	adds	r3, #124	; 0x7c
 8012dee:	4a64      	ldr	r2, [pc, #400]	; (8012f80 <problem_fetch+0x11c60>)
 8012df0:	6810      	ldr	r0, [r2, #0]
 8012df2:	6018      	str	r0, [r3, #0]
			p->moveSize = 14;
 8012df4:	687b      	ldr	r3, [r7, #4]
 8012df6:	220e      	movs	r2, #14
 8012df8:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"J,E,D,G,E,C,B,C,H,H,H,K,J,J");
 8012dfa:	687b      	ldr	r3, [r7, #4]
 8012dfc:	3340      	adds	r3, #64	; 0x40
 8012dfe:	4a61      	ldr	r2, [pc, #388]	; (8012f84 <problem_fetch+0x11c64>)
 8012e00:	461d      	mov	r5, r3
 8012e02:	4614      	mov	r4, r2
 8012e04:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8012e06:	6028      	str	r0, [r5, #0]
 8012e08:	6069      	str	r1, [r5, #4]
 8012e0a:	60aa      	str	r2, [r5, #8]
 8012e0c:	60eb      	str	r3, [r5, #12]
 8012e0e:	cc07      	ldmia	r4!, {r0, r1, r2}
 8012e10:	6128      	str	r0, [r5, #16]
 8012e12:	6169      	str	r1, [r5, #20]
 8012e14:	61aa      	str	r2, [r5, #24]
			strcpy(p->moveNumbers,"16,16,18,9,8,8,6,5,10,16,12,14,12,7");
 8012e16:	687b      	ldr	r3, [r7, #4]
 8012e18:	3304      	adds	r3, #4
 8012e1a:	4a5b      	ldr	r2, [pc, #364]	; (8012f88 <problem_fetch+0x11c68>)
 8012e1c:	4614      	mov	r4, r2
 8012e1e:	469c      	mov	ip, r3
 8012e20:	f104 0e20 	add.w	lr, r4, #32
 8012e24:	4665      	mov	r5, ip
 8012e26:	4626      	mov	r6, r4
 8012e28:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8012e2a:	6028      	str	r0, [r5, #0]
 8012e2c:	6069      	str	r1, [r5, #4]
 8012e2e:	60aa      	str	r2, [r5, #8]
 8012e30:	60eb      	str	r3, [r5, #12]
 8012e32:	3410      	adds	r4, #16
 8012e34:	f10c 0c10 	add.w	ip, ip, #16
 8012e38:	4574      	cmp	r4, lr
 8012e3a:	d1f3      	bne.n	8012e24 <problem_fetch+0x11b04>
 8012e3c:	4663      	mov	r3, ip
 8012e3e:	4622      	mov	r2, r4
 8012e40:	6810      	ldr	r0, [r2, #0]
 8012e42:	6018      	str	r0, [r3, #0]
			strcpy(p->startFinish, "d,d,e,d,d,d,s,s,d,d,d,d,d,d");
 8012e44:	687b      	ldr	r3, [r7, #4]
 8012e46:	33d8      	adds	r3, #216	; 0xd8
 8012e48:	4a50      	ldr	r2, [pc, #320]	; (8012f8c <problem_fetch+0x11c6c>)
 8012e4a:	461d      	mov	r5, r3
 8012e4c:	4614      	mov	r4, r2
 8012e4e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8012e50:	6028      	str	r0, [r5, #0]
 8012e52:	6069      	str	r1, [r5, #4]
 8012e54:	60aa      	str	r2, [r5, #8]
 8012e56:	60eb      	str	r3, [r5, #12]
 8012e58:	cc07      	ldmia	r4!, {r0, r1, r2}
 8012e5a:	6128      	str	r0, [r5, #16]
 8012e5c:	6169      	str	r1, [r5, #20]
 8012e5e:	61aa      	str	r2, [r5, #24]
			strcpy(p->grade, "6B+");
 8012e60:	687b      	ldr	r3, [r7, #4]
 8012e62:	33cc      	adds	r3, #204	; 0xcc
 8012e64:	4a41      	ldr	r2, [pc, #260]	; (8012f6c <problem_fetch+0x11c4c>)
 8012e66:	6810      	ldr	r0, [r2, #0]
 8012e68:	6018      	str	r0, [r3, #0]
			break;
 8012e6a:	f007 bf9f 	b.w	801adac <problem_fetch+0x19a8c>
		case 593 :
			strcpy(p->name,"IV");
 8012e6e:	687b      	ldr	r3, [r7, #4]
 8012e70:	337c      	adds	r3, #124	; 0x7c
 8012e72:	4a47      	ldr	r2, [pc, #284]	; (8012f90 <problem_fetch+0x11c70>)
 8012e74:	8811      	ldrh	r1, [r2, #0]
 8012e76:	7892      	ldrb	r2, [r2, #2]
 8012e78:	8019      	strh	r1, [r3, #0]
 8012e7a:	709a      	strb	r2, [r3, #2]
			p->moveSize = 12;
 8012e7c:	687b      	ldr	r3, [r7, #4]
 8012e7e:	220c      	movs	r2, #12
 8012e80:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"H,C,E,E,A,A,B,A,D,C,J,C");
 8012e82:	687b      	ldr	r3, [r7, #4]
 8012e84:	3340      	adds	r3, #64	; 0x40
 8012e86:	4a43      	ldr	r2, [pc, #268]	; (8012f94 <problem_fetch+0x11c74>)
 8012e88:	461d      	mov	r5, r3
 8012e8a:	4614      	mov	r4, r2
 8012e8c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8012e8e:	6028      	str	r0, [r5, #0]
 8012e90:	6069      	str	r1, [r5, #4]
 8012e92:	60aa      	str	r2, [r5, #8]
 8012e94:	60eb      	str	r3, [r5, #12]
 8012e96:	cc03      	ldmia	r4!, {r0, r1}
 8012e98:	6128      	str	r0, [r5, #16]
 8012e9a:	6169      	str	r1, [r5, #20]
			strcpy(p->moveNumbers,"8,8,6,9,9,14,15,18,11,13,5,5");
 8012e9c:	687b      	ldr	r3, [r7, #4]
 8012e9e:	3304      	adds	r3, #4
 8012ea0:	4a3d      	ldr	r2, [pc, #244]	; (8012f98 <problem_fetch+0x11c78>)
 8012ea2:	461d      	mov	r5, r3
 8012ea4:	4614      	mov	r4, r2
 8012ea6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8012ea8:	6028      	str	r0, [r5, #0]
 8012eaa:	6069      	str	r1, [r5, #4]
 8012eac:	60aa      	str	r2, [r5, #8]
 8012eae:	60eb      	str	r3, [r5, #12]
 8012eb0:	cc07      	ldmia	r4!, {r0, r1, r2}
 8012eb2:	6128      	str	r0, [r5, #16]
 8012eb4:	6169      	str	r1, [r5, #20]
 8012eb6:	61aa      	str	r2, [r5, #24]
 8012eb8:	7823      	ldrb	r3, [r4, #0]
 8012eba:	772b      	strb	r3, [r5, #28]
			strcpy(p->startFinish, "d,d,s,d,d,d,d,e,d,d,s,d");
 8012ebc:	687b      	ldr	r3, [r7, #4]
 8012ebe:	33d8      	adds	r3, #216	; 0xd8
 8012ec0:	4a36      	ldr	r2, [pc, #216]	; (8012f9c <problem_fetch+0x11c7c>)
 8012ec2:	461d      	mov	r5, r3
 8012ec4:	4614      	mov	r4, r2
 8012ec6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8012ec8:	6028      	str	r0, [r5, #0]
 8012eca:	6069      	str	r1, [r5, #4]
 8012ecc:	60aa      	str	r2, [r5, #8]
 8012ece:	60eb      	str	r3, [r5, #12]
 8012ed0:	cc03      	ldmia	r4!, {r0, r1}
 8012ed2:	6128      	str	r0, [r5, #16]
 8012ed4:	6169      	str	r1, [r5, #20]
			strcpy(p->grade, "6B+");
 8012ed6:	687b      	ldr	r3, [r7, #4]
 8012ed8:	33cc      	adds	r3, #204	; 0xcc
 8012eda:	4a24      	ldr	r2, [pc, #144]	; (8012f6c <problem_fetch+0x11c4c>)
 8012edc:	6810      	ldr	r0, [r2, #0]
 8012ede:	6018      	str	r0, [r3, #0]
			break;
 8012ee0:	f007 bf64 	b.w	801adac <problem_fetch+0x19a8c>
		case 594 :
			strcpy(p->name,"DIAGO");
 8012ee4:	687b      	ldr	r3, [r7, #4]
 8012ee6:	337c      	adds	r3, #124	; 0x7c
 8012ee8:	4a2d      	ldr	r2, [pc, #180]	; (8012fa0 <problem_fetch+0x11c80>)
 8012eea:	6810      	ldr	r0, [r2, #0]
 8012eec:	6018      	str	r0, [r3, #0]
 8012eee:	8892      	ldrh	r2, [r2, #4]
 8012ef0:	809a      	strh	r2, [r3, #4]
			p->moveSize = 8;
 8012ef2:	687b      	ldr	r3, [r7, #4]
 8012ef4:	2208      	movs	r2, #8
 8012ef6:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"J,G,G,H,E,F,D,A");
 8012ef8:	687b      	ldr	r3, [r7, #4]
 8012efa:	3340      	adds	r3, #64	; 0x40
 8012efc:	4a29      	ldr	r2, [pc, #164]	; (8012fa4 <problem_fetch+0x11c84>)
 8012efe:	461c      	mov	r4, r3
 8012f00:	4615      	mov	r5, r2
 8012f02:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8012f04:	6020      	str	r0, [r4, #0]
 8012f06:	6061      	str	r1, [r4, #4]
 8012f08:	60a2      	str	r2, [r4, #8]
 8012f0a:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,4,9,8,12,11,15,18");
 8012f0c:	687b      	ldr	r3, [r7, #4]
 8012f0e:	3304      	adds	r3, #4
 8012f10:	4a25      	ldr	r2, [pc, #148]	; (8012fa8 <problem_fetch+0x11c88>)
 8012f12:	461d      	mov	r5, r3
 8012f14:	4614      	mov	r4, r2
 8012f16:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8012f18:	6028      	str	r0, [r5, #0]
 8012f1a:	6069      	str	r1, [r5, #4]
 8012f1c:	60aa      	str	r2, [r5, #8]
 8012f1e:	60eb      	str	r3, [r5, #12]
 8012f20:	6820      	ldr	r0, [r4, #0]
 8012f22:	6128      	str	r0, [r5, #16]
			strcpy(p->startFinish, "s,s,d,d,d,d,d,e");
 8012f24:	687b      	ldr	r3, [r7, #4]
 8012f26:	33d8      	adds	r3, #216	; 0xd8
 8012f28:	4a20      	ldr	r2, [pc, #128]	; (8012fac <problem_fetch+0x11c8c>)
 8012f2a:	461c      	mov	r4, r3
 8012f2c:	4615      	mov	r5, r2
 8012f2e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8012f30:	6020      	str	r0, [r4, #0]
 8012f32:	6061      	str	r1, [r4, #4]
 8012f34:	60a2      	str	r2, [r4, #8]
 8012f36:	60e3      	str	r3, [r4, #12]
			strcpy(p->grade, "7B+");
 8012f38:	687b      	ldr	r3, [r7, #4]
 8012f3a:	33cc      	adds	r3, #204	; 0xcc
 8012f3c:	4a1c      	ldr	r2, [pc, #112]	; (8012fb0 <problem_fetch+0x11c90>)
 8012f3e:	6810      	ldr	r0, [r2, #0]
 8012f40:	6018      	str	r0, [r3, #0]
			break;
 8012f42:	f007 bf33 	b.w	801adac <problem_fetch+0x19a8c>
 8012f46:	bf00      	nop
 8012f48:	08027768 	.word	0x08027768
 8012f4c:	08027770 	.word	0x08027770
 8012f50:	08027780 	.word	0x08027780
 8012f54:	080212a0 	.word	0x080212a0
 8012f58:	08021370 	.word	0x08021370
 8012f5c:	08027794 	.word	0x08027794
 8012f60:	08027798 	.word	0x08027798
 8012f64:	080277b4 	.word	0x080277b4
 8012f68:	080277d8 	.word	0x080277d8
 8012f6c:	080212b0 	.word	0x080212b0
 8012f70:	080277f4 	.word	0x080277f4
 8012f74:	080277f8 	.word	0x080277f8
 8012f78:	08027814 	.word	0x08027814
 8012f7c:	08027838 	.word	0x08027838
 8012f80:	08027854 	.word	0x08027854
 8012f84:	08027858 	.word	0x08027858
 8012f88:	08027874 	.word	0x08027874
 8012f8c:	08027898 	.word	0x08027898
 8012f90:	080278b4 	.word	0x080278b4
 8012f94:	080278b8 	.word	0x080278b8
 8012f98:	080278d0 	.word	0x080278d0
 8012f9c:	080278f0 	.word	0x080278f0
 8012fa0:	08027908 	.word	0x08027908
 8012fa4:	08027910 	.word	0x08027910
 8012fa8:	08027920 	.word	0x08027920
 8012fac:	080214cc 	.word	0x080214cc
 8012fb0:	08021848 	.word	0x08021848
		case 595 :
			strcpy(p->name,"LAST PEA");
 8012fb4:	687b      	ldr	r3, [r7, #4]
 8012fb6:	337c      	adds	r3, #124	; 0x7c
 8012fb8:	49be      	ldr	r1, [pc, #760]	; (80132b4 <problem_fetch+0x11f94>)
 8012fba:	461a      	mov	r2, r3
 8012fbc:	460b      	mov	r3, r1
 8012fbe:	cb03      	ldmia	r3!, {r0, r1}
 8012fc0:	6010      	str	r0, [r2, #0]
 8012fc2:	6051      	str	r1, [r2, #4]
 8012fc4:	781b      	ldrb	r3, [r3, #0]
 8012fc6:	7213      	strb	r3, [r2, #8]
			p->moveSize = 9;
 8012fc8:	687b      	ldr	r3, [r7, #4]
 8012fca:	2209      	movs	r2, #9
 8012fcc:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"G,B,E,B,E,D,I,E,I");
 8012fce:	687b      	ldr	r3, [r7, #4]
 8012fd0:	3340      	adds	r3, #64	; 0x40
 8012fd2:	4ab9      	ldr	r2, [pc, #740]	; (80132b8 <problem_fetch+0x11f98>)
 8012fd4:	461d      	mov	r5, r3
 8012fd6:	4614      	mov	r4, r2
 8012fd8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8012fda:	6028      	str	r0, [r5, #0]
 8012fdc:	6069      	str	r1, [r5, #4]
 8012fde:	60aa      	str	r2, [r5, #8]
 8012fe0:	60eb      	str	r3, [r5, #12]
 8012fe2:	8823      	ldrh	r3, [r4, #0]
 8012fe4:	822b      	strh	r3, [r5, #16]
			strcpy(p->moveNumbers,"4,6,8,10,12,11,14,16,18");
 8012fe6:	687b      	ldr	r3, [r7, #4]
 8012fe8:	3304      	adds	r3, #4
 8012fea:	4ab4      	ldr	r2, [pc, #720]	; (80132bc <problem_fetch+0x11f9c>)
 8012fec:	461d      	mov	r5, r3
 8012fee:	4614      	mov	r4, r2
 8012ff0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8012ff2:	6028      	str	r0, [r5, #0]
 8012ff4:	6069      	str	r1, [r5, #4]
 8012ff6:	60aa      	str	r2, [r5, #8]
 8012ff8:	60eb      	str	r3, [r5, #12]
 8012ffa:	cc03      	ldmia	r4!, {r0, r1}
 8012ffc:	6128      	str	r0, [r5, #16]
 8012ffe:	6169      	str	r1, [r5, #20]
			strcpy(p->startFinish, "s,s,d,d,d,d,d,d,e");
 8013000:	687b      	ldr	r3, [r7, #4]
 8013002:	33d8      	adds	r3, #216	; 0xd8
 8013004:	4aae      	ldr	r2, [pc, #696]	; (80132c0 <problem_fetch+0x11fa0>)
 8013006:	461d      	mov	r5, r3
 8013008:	4614      	mov	r4, r2
 801300a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801300c:	6028      	str	r0, [r5, #0]
 801300e:	6069      	str	r1, [r5, #4]
 8013010:	60aa      	str	r2, [r5, #8]
 8013012:	60eb      	str	r3, [r5, #12]
 8013014:	8823      	ldrh	r3, [r4, #0]
 8013016:	822b      	strh	r3, [r5, #16]
			strcpy(p->grade, "7A");
 8013018:	687b      	ldr	r3, [r7, #4]
 801301a:	33cc      	adds	r3, #204	; 0xcc
 801301c:	4aa9      	ldr	r2, [pc, #676]	; (80132c4 <problem_fetch+0x11fa4>)
 801301e:	8811      	ldrh	r1, [r2, #0]
 8013020:	7892      	ldrb	r2, [r2, #2]
 8013022:	8019      	strh	r1, [r3, #0]
 8013024:	709a      	strb	r2, [r3, #2]
			break;
 8013026:	f007 bec1 	b.w	801adac <problem_fetch+0x19a8c>
		case 596 :
			strcpy(p->name,"SQUASHED PEAS");
 801302a:	687b      	ldr	r3, [r7, #4]
 801302c:	337c      	adds	r3, #124	; 0x7c
 801302e:	4aa6      	ldr	r2, [pc, #664]	; (80132c8 <problem_fetch+0x11fa8>)
 8013030:	461c      	mov	r4, r3
 8013032:	4613      	mov	r3, r2
 8013034:	cb07      	ldmia	r3!, {r0, r1, r2}
 8013036:	6020      	str	r0, [r4, #0]
 8013038:	6061      	str	r1, [r4, #4]
 801303a:	60a2      	str	r2, [r4, #8]
 801303c:	881b      	ldrh	r3, [r3, #0]
 801303e:	81a3      	strh	r3, [r4, #12]
			p->moveSize = 8;
 8013040:	687b      	ldr	r3, [r7, #4]
 8013042:	2208      	movs	r2, #8
 8013044:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"J,G,I,H,I,E,G,D");
 8013046:	687b      	ldr	r3, [r7, #4]
 8013048:	3340      	adds	r3, #64	; 0x40
 801304a:	4aa0      	ldr	r2, [pc, #640]	; (80132cc <problem_fetch+0x11fac>)
 801304c:	461c      	mov	r4, r3
 801304e:	4615      	mov	r5, r2
 8013050:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8013052:	6020      	str	r0, [r4, #0]
 8013054:	6061      	str	r1, [r4, #4]
 8013056:	60a2      	str	r2, [r4, #8]
 8013058:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,6,10,12,14,14,17,18");
 801305a:	687b      	ldr	r3, [r7, #4]
 801305c:	3304      	adds	r3, #4
 801305e:	4a9c      	ldr	r2, [pc, #624]	; (80132d0 <problem_fetch+0x11fb0>)
 8013060:	461d      	mov	r5, r3
 8013062:	4614      	mov	r4, r2
 8013064:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8013066:	6028      	str	r0, [r5, #0]
 8013068:	6069      	str	r1, [r5, #4]
 801306a:	60aa      	str	r2, [r5, #8]
 801306c:	60eb      	str	r3, [r5, #12]
 801306e:	6820      	ldr	r0, [r4, #0]
 8013070:	6128      	str	r0, [r5, #16]
 8013072:	88a3      	ldrh	r3, [r4, #4]
 8013074:	82ab      	strh	r3, [r5, #20]
			strcpy(p->startFinish, "s,s,d,d,d,d,d,e");
 8013076:	687b      	ldr	r3, [r7, #4]
 8013078:	33d8      	adds	r3, #216	; 0xd8
 801307a:	4a96      	ldr	r2, [pc, #600]	; (80132d4 <problem_fetch+0x11fb4>)
 801307c:	461c      	mov	r4, r3
 801307e:	4615      	mov	r5, r2
 8013080:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8013082:	6020      	str	r0, [r4, #0]
 8013084:	6061      	str	r1, [r4, #4]
 8013086:	60a2      	str	r2, [r4, #8]
 8013088:	60e3      	str	r3, [r4, #12]
			strcpy(p->grade, "6C+");
 801308a:	687b      	ldr	r3, [r7, #4]
 801308c:	33cc      	adds	r3, #204	; 0xcc
 801308e:	4a92      	ldr	r2, [pc, #584]	; (80132d8 <problem_fetch+0x11fb8>)
 8013090:	6810      	ldr	r0, [r2, #0]
 8013092:	6018      	str	r0, [r3, #0]
			break;
 8013094:	f007 be8a 	b.w	801adac <problem_fetch+0x19a8c>
		case 597 :
			strcpy(p->name,"ROLLING PEAS");
 8013098:	687b      	ldr	r3, [r7, #4]
 801309a:	337c      	adds	r3, #124	; 0x7c
 801309c:	4a8f      	ldr	r2, [pc, #572]	; (80132dc <problem_fetch+0x11fbc>)
 801309e:	461c      	mov	r4, r3
 80130a0:	4613      	mov	r3, r2
 80130a2:	cb07      	ldmia	r3!, {r0, r1, r2}
 80130a4:	6020      	str	r0, [r4, #0]
 80130a6:	6061      	str	r1, [r4, #4]
 80130a8:	60a2      	str	r2, [r4, #8]
 80130aa:	781b      	ldrb	r3, [r3, #0]
 80130ac:	7323      	strb	r3, [r4, #12]
			p->moveSize = 6;
 80130ae:	687b      	ldr	r3, [r7, #4]
 80130b0:	2206      	movs	r2, #6
 80130b2:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"G,E,H,C,D,D");
 80130b4:	687b      	ldr	r3, [r7, #4]
 80130b6:	3340      	adds	r3, #64	; 0x40
 80130b8:	4a89      	ldr	r2, [pc, #548]	; (80132e0 <problem_fetch+0x11fc0>)
 80130ba:	461c      	mov	r4, r3
 80130bc:	4613      	mov	r3, r2
 80130be:	cb07      	ldmia	r3!, {r0, r1, r2}
 80130c0:	6020      	str	r0, [r4, #0]
 80130c2:	6061      	str	r1, [r4, #4]
 80130c4:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,6,10,13,15,18");
 80130c6:	687b      	ldr	r3, [r7, #4]
 80130c8:	3304      	adds	r3, #4
 80130ca:	4a86      	ldr	r2, [pc, #536]	; (80132e4 <problem_fetch+0x11fc4>)
 80130cc:	461c      	mov	r4, r3
 80130ce:	4615      	mov	r5, r2
 80130d0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80130d2:	6020      	str	r0, [r4, #0]
 80130d4:	6061      	str	r1, [r4, #4]
 80130d6:	60a2      	str	r2, [r4, #8]
 80130d8:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish, "s,s,d,d,d,e");
 80130da:	687b      	ldr	r3, [r7, #4]
 80130dc:	33d8      	adds	r3, #216	; 0xd8
 80130de:	4a82      	ldr	r2, [pc, #520]	; (80132e8 <problem_fetch+0x11fc8>)
 80130e0:	461c      	mov	r4, r3
 80130e2:	4613      	mov	r3, r2
 80130e4:	cb07      	ldmia	r3!, {r0, r1, r2}
 80130e6:	6020      	str	r0, [r4, #0]
 80130e8:	6061      	str	r1, [r4, #4]
 80130ea:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade, "6C");
 80130ec:	687b      	ldr	r3, [r7, #4]
 80130ee:	33cc      	adds	r3, #204	; 0xcc
 80130f0:	4a7e      	ldr	r2, [pc, #504]	; (80132ec <problem_fetch+0x11fcc>)
 80130f2:	8811      	ldrh	r1, [r2, #0]
 80130f4:	7892      	ldrb	r2, [r2, #2]
 80130f6:	8019      	strh	r1, [r3, #0]
 80130f8:	709a      	strb	r2, [r3, #2]
			break;
 80130fa:	f007 be57 	b.w	801adac <problem_fetch+0x19a8c>
		case 598 :
			strcpy(p->name,"BLACK 2");
 80130fe:	687b      	ldr	r3, [r7, #4]
 8013100:	337c      	adds	r3, #124	; 0x7c
 8013102:	497b      	ldr	r1, [pc, #492]	; (80132f0 <problem_fetch+0x11fd0>)
 8013104:	461a      	mov	r2, r3
 8013106:	460b      	mov	r3, r1
 8013108:	cb03      	ldmia	r3!, {r0, r1}
 801310a:	6010      	str	r0, [r2, #0]
 801310c:	6051      	str	r1, [r2, #4]
			p->moveSize = 7;
 801310e:	687b      	ldr	r3, [r7, #4]
 8013110:	2207      	movs	r2, #7
 8013112:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"G,D,G,H,E,G,D");
 8013114:	687b      	ldr	r3, [r7, #4]
 8013116:	3340      	adds	r3, #64	; 0x40
 8013118:	4a76      	ldr	r2, [pc, #472]	; (80132f4 <problem_fetch+0x11fd4>)
 801311a:	461c      	mov	r4, r3
 801311c:	4613      	mov	r3, r2
 801311e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8013120:	6020      	str	r0, [r4, #0]
 8013122:	6061      	str	r1, [r4, #4]
 8013124:	60a2      	str	r2, [r4, #8]
 8013126:	881b      	ldrh	r3, [r3, #0]
 8013128:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,7,10,13,14,17,18");
 801312a:	687b      	ldr	r3, [r7, #4]
 801312c:	3304      	adds	r3, #4
 801312e:	4a72      	ldr	r2, [pc, #456]	; (80132f8 <problem_fetch+0x11fd8>)
 8013130:	461d      	mov	r5, r3
 8013132:	4614      	mov	r4, r2
 8013134:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8013136:	6028      	str	r0, [r5, #0]
 8013138:	6069      	str	r1, [r5, #4]
 801313a:	60aa      	str	r2, [r5, #8]
 801313c:	60eb      	str	r3, [r5, #12]
 801313e:	8823      	ldrh	r3, [r4, #0]
 8013140:	78a2      	ldrb	r2, [r4, #2]
 8013142:	822b      	strh	r3, [r5, #16]
 8013144:	4613      	mov	r3, r2
 8013146:	74ab      	strb	r3, [r5, #18]
			strcpy(p->startFinish, "s,d,d,d,d,d,e");
 8013148:	687b      	ldr	r3, [r7, #4]
 801314a:	33d8      	adds	r3, #216	; 0xd8
 801314c:	4a6b      	ldr	r2, [pc, #428]	; (80132fc <problem_fetch+0x11fdc>)
 801314e:	461c      	mov	r4, r3
 8013150:	4613      	mov	r3, r2
 8013152:	cb07      	ldmia	r3!, {r0, r1, r2}
 8013154:	6020      	str	r0, [r4, #0]
 8013156:	6061      	str	r1, [r4, #4]
 8013158:	60a2      	str	r2, [r4, #8]
 801315a:	881b      	ldrh	r3, [r3, #0]
 801315c:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade, "6C+");
 801315e:	687b      	ldr	r3, [r7, #4]
 8013160:	33cc      	adds	r3, #204	; 0xcc
 8013162:	4a5d      	ldr	r2, [pc, #372]	; (80132d8 <problem_fetch+0x11fb8>)
 8013164:	6810      	ldr	r0, [r2, #0]
 8013166:	6018      	str	r0, [r3, #0]
			break;
 8013168:	f007 be20 	b.w	801adac <problem_fetch+0x19a8c>
		case 599 :
			strcpy(p->name,"BROKEN RECORD");
 801316c:	687b      	ldr	r3, [r7, #4]
 801316e:	337c      	adds	r3, #124	; 0x7c
 8013170:	4a63      	ldr	r2, [pc, #396]	; (8013300 <problem_fetch+0x11fe0>)
 8013172:	461c      	mov	r4, r3
 8013174:	4613      	mov	r3, r2
 8013176:	cb07      	ldmia	r3!, {r0, r1, r2}
 8013178:	6020      	str	r0, [r4, #0]
 801317a:	6061      	str	r1, [r4, #4]
 801317c:	60a2      	str	r2, [r4, #8]
 801317e:	881b      	ldrh	r3, [r3, #0]
 8013180:	81a3      	strh	r3, [r4, #12]
			p->moveSize = 7;
 8013182:	687b      	ldr	r3, [r7, #4]
 8013184:	2207      	movs	r2, #7
 8013186:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"G,H,C,E,A,D,A");
 8013188:	687b      	ldr	r3, [r7, #4]
 801318a:	3340      	adds	r3, #64	; 0x40
 801318c:	4a5d      	ldr	r2, [pc, #372]	; (8013304 <problem_fetch+0x11fe4>)
 801318e:	461c      	mov	r4, r3
 8013190:	4613      	mov	r3, r2
 8013192:	cb07      	ldmia	r3!, {r0, r1, r2}
 8013194:	6020      	str	r0, [r4, #0]
 8013196:	6061      	str	r1, [r4, #4]
 8013198:	60a2      	str	r2, [r4, #8]
 801319a:	881b      	ldrh	r3, [r3, #0]
 801319c:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,8,8,12,14,15,18");
 801319e:	687b      	ldr	r3, [r7, #4]
 80131a0:	3304      	adds	r3, #4
 80131a2:	4a59      	ldr	r2, [pc, #356]	; (8013308 <problem_fetch+0x11fe8>)
 80131a4:	461d      	mov	r5, r3
 80131a6:	4614      	mov	r4, r2
 80131a8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80131aa:	6028      	str	r0, [r5, #0]
 80131ac:	6069      	str	r1, [r5, #4]
 80131ae:	60aa      	str	r2, [r5, #8]
 80131b0:	60eb      	str	r3, [r5, #12]
 80131b2:	8823      	ldrh	r3, [r4, #0]
 80131b4:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish, "s,d,d,d,d,d,e");
 80131b6:	687b      	ldr	r3, [r7, #4]
 80131b8:	33d8      	adds	r3, #216	; 0xd8
 80131ba:	4a50      	ldr	r2, [pc, #320]	; (80132fc <problem_fetch+0x11fdc>)
 80131bc:	461c      	mov	r4, r3
 80131be:	4613      	mov	r3, r2
 80131c0:	cb07      	ldmia	r3!, {r0, r1, r2}
 80131c2:	6020      	str	r0, [r4, #0]
 80131c4:	6061      	str	r1, [r4, #4]
 80131c6:	60a2      	str	r2, [r4, #8]
 80131c8:	881b      	ldrh	r3, [r3, #0]
 80131ca:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade, "6C");
 80131cc:	687b      	ldr	r3, [r7, #4]
 80131ce:	33cc      	adds	r3, #204	; 0xcc
 80131d0:	4a46      	ldr	r2, [pc, #280]	; (80132ec <problem_fetch+0x11fcc>)
 80131d2:	8811      	ldrh	r1, [r2, #0]
 80131d4:	7892      	ldrb	r2, [r2, #2]
 80131d6:	8019      	strh	r1, [r3, #0]
 80131d8:	709a      	strb	r2, [r3, #2]
			break;
 80131da:	f007 bde7 	b.w	801adac <problem_fetch+0x19a8c>
		case 6 :
			strcpy(p->name,"PROBLEM 19");
 80131de:	687b      	ldr	r3, [r7, #4]
 80131e0:	337c      	adds	r3, #124	; 0x7c
 80131e2:	494a      	ldr	r1, [pc, #296]	; (801330c <problem_fetch+0x11fec>)
 80131e4:	461a      	mov	r2, r3
 80131e6:	460b      	mov	r3, r1
 80131e8:	cb03      	ldmia	r3!, {r0, r1}
 80131ea:	6010      	str	r0, [r2, #0]
 80131ec:	6051      	str	r1, [r2, #4]
 80131ee:	8819      	ldrh	r1, [r3, #0]
 80131f0:	789b      	ldrb	r3, [r3, #2]
 80131f2:	8111      	strh	r1, [r2, #8]
 80131f4:	7293      	strb	r3, [r2, #10]
			p->moveSize = 7;
 80131f6:	687b      	ldr	r3, [r7, #4]
 80131f8:	2207      	movs	r2, #7
 80131fa:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"J,D,E,F,G,H,A");
 80131fc:	687b      	ldr	r3, [r7, #4]
 80131fe:	3340      	adds	r3, #64	; 0x40
 8013200:	4a43      	ldr	r2, [pc, #268]	; (8013310 <problem_fetch+0x11ff0>)
 8013202:	461c      	mov	r4, r3
 8013204:	4613      	mov	r3, r2
 8013206:	cb07      	ldmia	r3!, {r0, r1, r2}
 8013208:	6020      	str	r0, [r4, #0]
 801320a:	6061      	str	r1, [r4, #4]
 801320c:	60a2      	str	r2, [r4, #8]
 801320e:	881b      	ldrh	r3, [r3, #0]
 8013210:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,15,12,11,9,8,18");
 8013212:	687b      	ldr	r3, [r7, #4]
 8013214:	3304      	adds	r3, #4
 8013216:	4a3f      	ldr	r2, [pc, #252]	; (8013314 <problem_fetch+0x11ff4>)
 8013218:	461d      	mov	r5, r3
 801321a:	4614      	mov	r4, r2
 801321c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801321e:	6028      	str	r0, [r5, #0]
 8013220:	6069      	str	r1, [r5, #4]
 8013222:	60aa      	str	r2, [r5, #8]
 8013224:	60eb      	str	r3, [r5, #12]
 8013226:	8823      	ldrh	r3, [r4, #0]
 8013228:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish, "s,d,d,d,d,d,e");
 801322a:	687b      	ldr	r3, [r7, #4]
 801322c:	33d8      	adds	r3, #216	; 0xd8
 801322e:	4a33      	ldr	r2, [pc, #204]	; (80132fc <problem_fetch+0x11fdc>)
 8013230:	461c      	mov	r4, r3
 8013232:	4613      	mov	r3, r2
 8013234:	cb07      	ldmia	r3!, {r0, r1, r2}
 8013236:	6020      	str	r0, [r4, #0]
 8013238:	6061      	str	r1, [r4, #4]
 801323a:	60a2      	str	r2, [r4, #8]
 801323c:	881b      	ldrh	r3, [r3, #0]
 801323e:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade, "6C");
 8013240:	687b      	ldr	r3, [r7, #4]
 8013242:	33cc      	adds	r3, #204	; 0xcc
 8013244:	4a29      	ldr	r2, [pc, #164]	; (80132ec <problem_fetch+0x11fcc>)
 8013246:	8811      	ldrh	r1, [r2, #0]
 8013248:	7892      	ldrb	r2, [r2, #2]
 801324a:	8019      	strh	r1, [r3, #0]
 801324c:	709a      	strb	r2, [r3, #2]
			break;
 801324e:	f007 bdad 	b.w	801adac <problem_fetch+0x19a8c>
		case 60 :
			strcpy(p->name,"NANO");
 8013252:	687b      	ldr	r3, [r7, #4]
 8013254:	337c      	adds	r3, #124	; 0x7c
 8013256:	4a30      	ldr	r2, [pc, #192]	; (8013318 <problem_fetch+0x11ff8>)
 8013258:	6810      	ldr	r0, [r2, #0]
 801325a:	6018      	str	r0, [r3, #0]
 801325c:	7912      	ldrb	r2, [r2, #4]
 801325e:	711a      	strb	r2, [r3, #4]
			p->moveSize = 5;
 8013260:	687b      	ldr	r3, [r7, #4]
 8013262:	2205      	movs	r2, #5
 8013264:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"E,I,H,K,I");
 8013266:	687b      	ldr	r3, [r7, #4]
 8013268:	3340      	adds	r3, #64	; 0x40
 801326a:	492c      	ldr	r1, [pc, #176]	; (801331c <problem_fetch+0x11ffc>)
 801326c:	461a      	mov	r2, r3
 801326e:	460b      	mov	r3, r1
 8013270:	cb03      	ldmia	r3!, {r0, r1}
 8013272:	6010      	str	r0, [r2, #0]
 8013274:	6051      	str	r1, [r2, #4]
 8013276:	881b      	ldrh	r3, [r3, #0]
 8013278:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"6,10,12,14,18");
 801327a:	687b      	ldr	r3, [r7, #4]
 801327c:	3304      	adds	r3, #4
 801327e:	4a28      	ldr	r2, [pc, #160]	; (8013320 <problem_fetch+0x12000>)
 8013280:	461c      	mov	r4, r3
 8013282:	4613      	mov	r3, r2
 8013284:	cb07      	ldmia	r3!, {r0, r1, r2}
 8013286:	6020      	str	r0, [r4, #0]
 8013288:	6061      	str	r1, [r4, #4]
 801328a:	60a2      	str	r2, [r4, #8]
 801328c:	881b      	ldrh	r3, [r3, #0]
 801328e:	81a3      	strh	r3, [r4, #12]
			strcpy(p->startFinish, "s,d,d,d,e");
 8013290:	687b      	ldr	r3, [r7, #4]
 8013292:	33d8      	adds	r3, #216	; 0xd8
 8013294:	4923      	ldr	r1, [pc, #140]	; (8013324 <problem_fetch+0x12004>)
 8013296:	461a      	mov	r2, r3
 8013298:	460b      	mov	r3, r1
 801329a:	cb03      	ldmia	r3!, {r0, r1}
 801329c:	6010      	str	r0, [r2, #0]
 801329e:	6051      	str	r1, [r2, #4]
 80132a0:	881b      	ldrh	r3, [r3, #0]
 80132a2:	8113      	strh	r3, [r2, #8]
			strcpy(p->grade, "7A+");
 80132a4:	687b      	ldr	r3, [r7, #4]
 80132a6:	33cc      	adds	r3, #204	; 0xcc
 80132a8:	4a1f      	ldr	r2, [pc, #124]	; (8013328 <problem_fetch+0x12008>)
 80132aa:	6810      	ldr	r0, [r2, #0]
 80132ac:	6018      	str	r0, [r3, #0]
			break;
 80132ae:	f007 bd7d 	b.w	801adac <problem_fetch+0x19a8c>
 80132b2:	bf00      	nop
 80132b4:	08027934 	.word	0x08027934
 80132b8:	08027940 	.word	0x08027940
 80132bc:	08027954 	.word	0x08027954
 80132c0:	0802187c 	.word	0x0802187c
 80132c4:	080212f4 	.word	0x080212f4
 80132c8:	0802796c 	.word	0x0802796c
 80132cc:	0802797c 	.word	0x0802797c
 80132d0:	0802798c 	.word	0x0802798c
 80132d4:	080214cc 	.word	0x080214cc
 80132d8:	080213a8 	.word	0x080213a8
 80132dc:	080279a4 	.word	0x080279a4
 80132e0:	08026094 	.word	0x08026094
 80132e4:	080279b4 	.word	0x080279b4
 80132e8:	08021910 	.word	0x08021910
 80132ec:	08021370 	.word	0x08021370
 80132f0:	080279c4 	.word	0x080279c4
 80132f4:	080279cc 	.word	0x080279cc
 80132f8:	08021480 	.word	0x08021480
 80132fc:	08021494 	.word	0x08021494
 8013300:	080279dc 	.word	0x080279dc
 8013304:	080279ec 	.word	0x080279ec
 8013308:	080279fc 	.word	0x080279fc
 801330c:	08027a10 	.word	0x08027a10
 8013310:	08027a1c 	.word	0x08027a1c
 8013314:	08027a2c 	.word	0x08027a2c
 8013318:	08027a40 	.word	0x08027a40
 801331c:	08027a48 	.word	0x08027a48
 8013320:	08027a54 	.word	0x08027a54
 8013324:	08021320 	.word	0x08021320
 8013328:	08021424 	.word	0x08021424
		case 600 :
			strcpy(p->name,"MBT1RIGHT");
 801332c:	687b      	ldr	r3, [r7, #4]
 801332e:	337c      	adds	r3, #124	; 0x7c
 8013330:	49b5      	ldr	r1, [pc, #724]	; (8013608 <problem_fetch+0x122e8>)
 8013332:	461a      	mov	r2, r3
 8013334:	460b      	mov	r3, r1
 8013336:	cb03      	ldmia	r3!, {r0, r1}
 8013338:	6010      	str	r0, [r2, #0]
 801333a:	6051      	str	r1, [r2, #4]
 801333c:	881b      	ldrh	r3, [r3, #0]
 801333e:	8113      	strh	r3, [r2, #8]
			p->moveSize = 5;
 8013340:	687b      	ldr	r3, [r7, #4]
 8013342:	2205      	movs	r2, #5
 8013344:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"G,G,G,D,I");
 8013346:	687b      	ldr	r3, [r7, #4]
 8013348:	3340      	adds	r3, #64	; 0x40
 801334a:	49b0      	ldr	r1, [pc, #704]	; (801360c <problem_fetch+0x122ec>)
 801334c:	461a      	mov	r2, r3
 801334e:	460b      	mov	r3, r1
 8013350:	cb03      	ldmia	r3!, {r0, r1}
 8013352:	6010      	str	r0, [r2, #0]
 8013354:	6051      	str	r1, [r2, #4]
 8013356:	881b      	ldrh	r3, [r3, #0]
 8013358:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"4,9,14,11,18");
 801335a:	687b      	ldr	r3, [r7, #4]
 801335c:	3304      	adds	r3, #4
 801335e:	4aac      	ldr	r2, [pc, #688]	; (8013610 <problem_fetch+0x122f0>)
 8013360:	461c      	mov	r4, r3
 8013362:	4613      	mov	r3, r2
 8013364:	cb07      	ldmia	r3!, {r0, r1, r2}
 8013366:	6020      	str	r0, [r4, #0]
 8013368:	6061      	str	r1, [r4, #4]
 801336a:	60a2      	str	r2, [r4, #8]
 801336c:	781b      	ldrb	r3, [r3, #0]
 801336e:	7323      	strb	r3, [r4, #12]
			strcpy(p->startFinish, "s,d,d,d,e");
 8013370:	687b      	ldr	r3, [r7, #4]
 8013372:	33d8      	adds	r3, #216	; 0xd8
 8013374:	49a7      	ldr	r1, [pc, #668]	; (8013614 <problem_fetch+0x122f4>)
 8013376:	461a      	mov	r2, r3
 8013378:	460b      	mov	r3, r1
 801337a:	cb03      	ldmia	r3!, {r0, r1}
 801337c:	6010      	str	r0, [r2, #0]
 801337e:	6051      	str	r1, [r2, #4]
 8013380:	881b      	ldrh	r3, [r3, #0]
 8013382:	8113      	strh	r3, [r2, #8]
			strcpy(p->grade, "6C+");
 8013384:	687b      	ldr	r3, [r7, #4]
 8013386:	33cc      	adds	r3, #204	; 0xcc
 8013388:	4aa3      	ldr	r2, [pc, #652]	; (8013618 <problem_fetch+0x122f8>)
 801338a:	6810      	ldr	r0, [r2, #0]
 801338c:	6018      	str	r0, [r3, #0]
			break;
 801338e:	f007 bd0d 	b.w	801adac <problem_fetch+0x19a8c>
		case 601 :
			strcpy(p->name,"BLACK #268162639");
 8013392:	687b      	ldr	r3, [r7, #4]
 8013394:	337c      	adds	r3, #124	; 0x7c
 8013396:	4aa1      	ldr	r2, [pc, #644]	; (801361c <problem_fetch+0x122fc>)
 8013398:	461d      	mov	r5, r3
 801339a:	4614      	mov	r4, r2
 801339c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801339e:	6028      	str	r0, [r5, #0]
 80133a0:	6069      	str	r1, [r5, #4]
 80133a2:	60aa      	str	r2, [r5, #8]
 80133a4:	60eb      	str	r3, [r5, #12]
 80133a6:	7823      	ldrb	r3, [r4, #0]
 80133a8:	742b      	strb	r3, [r5, #16]
			p->moveSize = 5;
 80133aa:	687b      	ldr	r3, [r7, #4]
 80133ac:	2205      	movs	r2, #5
 80133ae:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"G,I,H,J,D");
 80133b0:	687b      	ldr	r3, [r7, #4]
 80133b2:	3340      	adds	r3, #64	; 0x40
 80133b4:	499a      	ldr	r1, [pc, #616]	; (8013620 <problem_fetch+0x12300>)
 80133b6:	461a      	mov	r2, r3
 80133b8:	460b      	mov	r3, r1
 80133ba:	cb03      	ldmia	r3!, {r0, r1}
 80133bc:	6010      	str	r0, [r2, #0]
 80133be:	6051      	str	r1, [r2, #4]
 80133c0:	881b      	ldrh	r3, [r3, #0]
 80133c2:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"4,10,12,16,18");
 80133c4:	687b      	ldr	r3, [r7, #4]
 80133c6:	3304      	adds	r3, #4
 80133c8:	4a96      	ldr	r2, [pc, #600]	; (8013624 <problem_fetch+0x12304>)
 80133ca:	461c      	mov	r4, r3
 80133cc:	4613      	mov	r3, r2
 80133ce:	cb07      	ldmia	r3!, {r0, r1, r2}
 80133d0:	6020      	str	r0, [r4, #0]
 80133d2:	6061      	str	r1, [r4, #4]
 80133d4:	60a2      	str	r2, [r4, #8]
 80133d6:	881b      	ldrh	r3, [r3, #0]
 80133d8:	81a3      	strh	r3, [r4, #12]
			strcpy(p->startFinish, "s,d,d,d,e");
 80133da:	687b      	ldr	r3, [r7, #4]
 80133dc:	33d8      	adds	r3, #216	; 0xd8
 80133de:	498d      	ldr	r1, [pc, #564]	; (8013614 <problem_fetch+0x122f4>)
 80133e0:	461a      	mov	r2, r3
 80133e2:	460b      	mov	r3, r1
 80133e4:	cb03      	ldmia	r3!, {r0, r1}
 80133e6:	6010      	str	r0, [r2, #0]
 80133e8:	6051      	str	r1, [r2, #4]
 80133ea:	881b      	ldrh	r3, [r3, #0]
 80133ec:	8113      	strh	r3, [r2, #8]
			strcpy(p->grade, "7A+");
 80133ee:	687b      	ldr	r3, [r7, #4]
 80133f0:	33cc      	adds	r3, #204	; 0xcc
 80133f2:	4a8d      	ldr	r2, [pc, #564]	; (8013628 <problem_fetch+0x12308>)
 80133f4:	6810      	ldr	r0, [r2, #0]
 80133f6:	6018      	str	r0, [r3, #0]
			break;
 80133f8:	f007 bcd8 	b.w	801adac <problem_fetch+0x19a8c>
		case 602 :
			strcpy(p->name,"DROPPIN SOAP");
 80133fc:	687b      	ldr	r3, [r7, #4]
 80133fe:	337c      	adds	r3, #124	; 0x7c
 8013400:	4a8a      	ldr	r2, [pc, #552]	; (801362c <problem_fetch+0x1230c>)
 8013402:	461c      	mov	r4, r3
 8013404:	4613      	mov	r3, r2
 8013406:	cb07      	ldmia	r3!, {r0, r1, r2}
 8013408:	6020      	str	r0, [r4, #0]
 801340a:	6061      	str	r1, [r4, #4]
 801340c:	60a2      	str	r2, [r4, #8]
 801340e:	781b      	ldrb	r3, [r3, #0]
 8013410:	7323      	strb	r3, [r4, #12]
			p->moveSize = 5;
 8013412:	687b      	ldr	r3, [r7, #4]
 8013414:	2205      	movs	r2, #5
 8013416:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"J,G,E,H,I");
 8013418:	687b      	ldr	r3, [r7, #4]
 801341a:	3340      	adds	r3, #64	; 0x40
 801341c:	4984      	ldr	r1, [pc, #528]	; (8013630 <problem_fetch+0x12310>)
 801341e:	461a      	mov	r2, r3
 8013420:	460b      	mov	r3, r1
 8013422:	cb03      	ldmia	r3!, {r0, r1}
 8013424:	6010      	str	r0, [r2, #0]
 8013426:	6051      	str	r1, [r2, #4]
 8013428:	881b      	ldrh	r3, [r3, #0]
 801342a:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"5,9,14,12,18");
 801342c:	687b      	ldr	r3, [r7, #4]
 801342e:	3304      	adds	r3, #4
 8013430:	4a80      	ldr	r2, [pc, #512]	; (8013634 <problem_fetch+0x12314>)
 8013432:	461c      	mov	r4, r3
 8013434:	4613      	mov	r3, r2
 8013436:	cb07      	ldmia	r3!, {r0, r1, r2}
 8013438:	6020      	str	r0, [r4, #0]
 801343a:	6061      	str	r1, [r4, #4]
 801343c:	60a2      	str	r2, [r4, #8]
 801343e:	781b      	ldrb	r3, [r3, #0]
 8013440:	7323      	strb	r3, [r4, #12]
			strcpy(p->startFinish, "s,d,d,d,e");
 8013442:	687b      	ldr	r3, [r7, #4]
 8013444:	33d8      	adds	r3, #216	; 0xd8
 8013446:	4973      	ldr	r1, [pc, #460]	; (8013614 <problem_fetch+0x122f4>)
 8013448:	461a      	mov	r2, r3
 801344a:	460b      	mov	r3, r1
 801344c:	cb03      	ldmia	r3!, {r0, r1}
 801344e:	6010      	str	r0, [r2, #0]
 8013450:	6051      	str	r1, [r2, #4]
 8013452:	881b      	ldrh	r3, [r3, #0]
 8013454:	8113      	strh	r3, [r2, #8]
			strcpy(p->grade, "7A+");
 8013456:	687b      	ldr	r3, [r7, #4]
 8013458:	33cc      	adds	r3, #204	; 0xcc
 801345a:	4a73      	ldr	r2, [pc, #460]	; (8013628 <problem_fetch+0x12308>)
 801345c:	6810      	ldr	r0, [r2, #0]
 801345e:	6018      	str	r0, [r3, #0]
			break;
 8013460:	f007 bca4 	b.w	801adac <problem_fetch+0x19a8c>
		case 603 :
			strcpy(p->name,"SIDEPULL SIDEWALK");
 8013464:	687b      	ldr	r3, [r7, #4]
 8013466:	337c      	adds	r3, #124	; 0x7c
 8013468:	4a73      	ldr	r2, [pc, #460]	; (8013638 <problem_fetch+0x12318>)
 801346a:	461d      	mov	r5, r3
 801346c:	4614      	mov	r4, r2
 801346e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8013470:	6028      	str	r0, [r5, #0]
 8013472:	6069      	str	r1, [r5, #4]
 8013474:	60aa      	str	r2, [r5, #8]
 8013476:	60eb      	str	r3, [r5, #12]
 8013478:	8823      	ldrh	r3, [r4, #0]
 801347a:	822b      	strh	r3, [r5, #16]
			p->moveSize = 10;
 801347c:	687b      	ldr	r3, [r7, #4]
 801347e:	220a      	movs	r2, #10
 8013480:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"G,J,G,H,G,H,F,I,G,I");
 8013482:	687b      	ldr	r3, [r7, #4]
 8013484:	3340      	adds	r3, #64	; 0x40
 8013486:	4a6d      	ldr	r2, [pc, #436]	; (801363c <problem_fetch+0x1231c>)
 8013488:	461d      	mov	r5, r3
 801348a:	4614      	mov	r4, r2
 801348c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801348e:	6028      	str	r0, [r5, #0]
 8013490:	6069      	str	r1, [r5, #4]
 8013492:	60aa      	str	r2, [r5, #8]
 8013494:	60eb      	str	r3, [r5, #12]
 8013496:	6820      	ldr	r0, [r4, #0]
 8013498:	6128      	str	r0, [r5, #16]
			strcpy(p->moveNumbers,"4,5,6,8,9,10,11,14,15,18");
 801349a:	687b      	ldr	r3, [r7, #4]
 801349c:	3304      	adds	r3, #4
 801349e:	4a68      	ldr	r2, [pc, #416]	; (8013640 <problem_fetch+0x12320>)
 80134a0:	461d      	mov	r5, r3
 80134a2:	4614      	mov	r4, r2
 80134a4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80134a6:	6028      	str	r0, [r5, #0]
 80134a8:	6069      	str	r1, [r5, #4]
 80134aa:	60aa      	str	r2, [r5, #8]
 80134ac:	60eb      	str	r3, [r5, #12]
 80134ae:	cc03      	ldmia	r4!, {r0, r1}
 80134b0:	6128      	str	r0, [r5, #16]
 80134b2:	6169      	str	r1, [r5, #20]
 80134b4:	7823      	ldrb	r3, [r4, #0]
 80134b6:	762b      	strb	r3, [r5, #24]
			strcpy(p->startFinish, "s,s,d,d,d,d,d,d,d,e");
 80134b8:	687b      	ldr	r3, [r7, #4]
 80134ba:	33d8      	adds	r3, #216	; 0xd8
 80134bc:	4a61      	ldr	r2, [pc, #388]	; (8013644 <problem_fetch+0x12324>)
 80134be:	461d      	mov	r5, r3
 80134c0:	4614      	mov	r4, r2
 80134c2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80134c4:	6028      	str	r0, [r5, #0]
 80134c6:	6069      	str	r1, [r5, #4]
 80134c8:	60aa      	str	r2, [r5, #8]
 80134ca:	60eb      	str	r3, [r5, #12]
 80134cc:	6820      	ldr	r0, [r4, #0]
 80134ce:	6128      	str	r0, [r5, #16]
			strcpy(p->grade, "6B+");
 80134d0:	687b      	ldr	r3, [r7, #4]
 80134d2:	33cc      	adds	r3, #204	; 0xcc
 80134d4:	4a5c      	ldr	r2, [pc, #368]	; (8013648 <problem_fetch+0x12328>)
 80134d6:	6810      	ldr	r0, [r2, #0]
 80134d8:	6018      	str	r0, [r3, #0]
			break;
 80134da:	f007 bc67 	b.w	801adac <problem_fetch+0x19a8c>
		case 604 :
			strcpy(p->name,"ITIM");
 80134de:	687b      	ldr	r3, [r7, #4]
 80134e0:	337c      	adds	r3, #124	; 0x7c
 80134e2:	4a5a      	ldr	r2, [pc, #360]	; (801364c <problem_fetch+0x1232c>)
 80134e4:	6810      	ldr	r0, [r2, #0]
 80134e6:	6018      	str	r0, [r3, #0]
 80134e8:	7912      	ldrb	r2, [r2, #4]
 80134ea:	711a      	strb	r2, [r3, #4]
			p->moveSize = 7;
 80134ec:	687b      	ldr	r3, [r7, #4]
 80134ee:	2207      	movs	r2, #7
 80134f0:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"C,I,E,E,G,E,G");
 80134f2:	687b      	ldr	r3, [r7, #4]
 80134f4:	3340      	adds	r3, #64	; 0x40
 80134f6:	4a56      	ldr	r2, [pc, #344]	; (8013650 <problem_fetch+0x12330>)
 80134f8:	461c      	mov	r4, r3
 80134fa:	4613      	mov	r3, r2
 80134fc:	cb07      	ldmia	r3!, {r0, r1, r2}
 80134fe:	6020      	str	r0, [r4, #0]
 8013500:	6061      	str	r1, [r4, #4]
 8013502:	60a2      	str	r2, [r4, #8]
 8013504:	881b      	ldrh	r3, [r3, #0]
 8013506:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"13,18,9,16,14,8,4");
 8013508:	687b      	ldr	r3, [r7, #4]
 801350a:	3304      	adds	r3, #4
 801350c:	4a51      	ldr	r2, [pc, #324]	; (8013654 <problem_fetch+0x12334>)
 801350e:	461d      	mov	r5, r3
 8013510:	4614      	mov	r4, r2
 8013512:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8013514:	6028      	str	r0, [r5, #0]
 8013516:	6069      	str	r1, [r5, #4]
 8013518:	60aa      	str	r2, [r5, #8]
 801351a:	60eb      	str	r3, [r5, #12]
 801351c:	8823      	ldrh	r3, [r4, #0]
 801351e:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish, "d,e,d,d,d,d,s");
 8013520:	687b      	ldr	r3, [r7, #4]
 8013522:	33d8      	adds	r3, #216	; 0xd8
 8013524:	4a4c      	ldr	r2, [pc, #304]	; (8013658 <problem_fetch+0x12338>)
 8013526:	461c      	mov	r4, r3
 8013528:	4613      	mov	r3, r2
 801352a:	cb07      	ldmia	r3!, {r0, r1, r2}
 801352c:	6020      	str	r0, [r4, #0]
 801352e:	6061      	str	r1, [r4, #4]
 8013530:	60a2      	str	r2, [r4, #8]
 8013532:	881b      	ldrh	r3, [r3, #0]
 8013534:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade, "7A+");
 8013536:	687b      	ldr	r3, [r7, #4]
 8013538:	33cc      	adds	r3, #204	; 0xcc
 801353a:	4a3b      	ldr	r2, [pc, #236]	; (8013628 <problem_fetch+0x12308>)
 801353c:	6810      	ldr	r0, [r2, #0]
 801353e:	6018      	str	r0, [r3, #0]
			break;
 8013540:	f007 bc34 	b.w	801adac <problem_fetch+0x19a8c>
		case 605 :
			strcpy(p->name,"MSFTS");
 8013544:	687b      	ldr	r3, [r7, #4]
 8013546:	337c      	adds	r3, #124	; 0x7c
 8013548:	4a44      	ldr	r2, [pc, #272]	; (801365c <problem_fetch+0x1233c>)
 801354a:	6810      	ldr	r0, [r2, #0]
 801354c:	6018      	str	r0, [r3, #0]
 801354e:	8892      	ldrh	r2, [r2, #4]
 8013550:	809a      	strh	r2, [r3, #4]
			p->moveSize = 7;
 8013552:	687b      	ldr	r3, [r7, #4]
 8013554:	2207      	movs	r2, #7
 8013556:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"H,G,E,J,J,H,I");
 8013558:	687b      	ldr	r3, [r7, #4]
 801355a:	3340      	adds	r3, #64	; 0x40
 801355c:	4a40      	ldr	r2, [pc, #256]	; (8013660 <problem_fetch+0x12340>)
 801355e:	461c      	mov	r4, r3
 8013560:	4613      	mov	r3, r2
 8013562:	cb07      	ldmia	r3!, {r0, r1, r2}
 8013564:	6020      	str	r0, [r4, #0]
 8013566:	6061      	str	r1, [r4, #4]
 8013568:	60a2      	str	r2, [r4, #8]
 801356a:	881b      	ldrh	r3, [r3, #0]
 801356c:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,9,12,5,13,16,18");
 801356e:	687b      	ldr	r3, [r7, #4]
 8013570:	3304      	adds	r3, #4
 8013572:	4a3c      	ldr	r2, [pc, #240]	; (8013664 <problem_fetch+0x12344>)
 8013574:	461d      	mov	r5, r3
 8013576:	4614      	mov	r4, r2
 8013578:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801357a:	6028      	str	r0, [r5, #0]
 801357c:	6069      	str	r1, [r5, #4]
 801357e:	60aa      	str	r2, [r5, #8]
 8013580:	60eb      	str	r3, [r5, #12]
 8013582:	8823      	ldrh	r3, [r4, #0]
 8013584:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish, "s,d,d,s,d,d,e");
 8013586:	687b      	ldr	r3, [r7, #4]
 8013588:	33d8      	adds	r3, #216	; 0xd8
 801358a:	4a37      	ldr	r2, [pc, #220]	; (8013668 <problem_fetch+0x12348>)
 801358c:	461c      	mov	r4, r3
 801358e:	4613      	mov	r3, r2
 8013590:	cb07      	ldmia	r3!, {r0, r1, r2}
 8013592:	6020      	str	r0, [r4, #0]
 8013594:	6061      	str	r1, [r4, #4]
 8013596:	60a2      	str	r2, [r4, #8]
 8013598:	881b      	ldrh	r3, [r3, #0]
 801359a:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade, "6C+");
 801359c:	687b      	ldr	r3, [r7, #4]
 801359e:	33cc      	adds	r3, #204	; 0xcc
 80135a0:	4a1d      	ldr	r2, [pc, #116]	; (8013618 <problem_fetch+0x122f8>)
 80135a2:	6810      	ldr	r0, [r2, #0]
 80135a4:	6018      	str	r0, [r3, #0]
			break;
 80135a6:	f007 bc01 	b.w	801adac <problem_fetch+0x19a8c>
		case 606 :
			strcpy(p->name,"FAT 'N WEAK");
 80135aa:	687b      	ldr	r3, [r7, #4]
 80135ac:	337c      	adds	r3, #124	; 0x7c
 80135ae:	4a2f      	ldr	r2, [pc, #188]	; (801366c <problem_fetch+0x1234c>)
 80135b0:	461c      	mov	r4, r3
 80135b2:	4613      	mov	r3, r2
 80135b4:	cb07      	ldmia	r3!, {r0, r1, r2}
 80135b6:	6020      	str	r0, [r4, #0]
 80135b8:	6061      	str	r1, [r4, #4]
 80135ba:	60a2      	str	r2, [r4, #8]
			p->moveSize = 6;
 80135bc:	687b      	ldr	r3, [r7, #4]
 80135be:	2206      	movs	r2, #6
 80135c0:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"G,E,E,A,E,A");
 80135c2:	687b      	ldr	r3, [r7, #4]
 80135c4:	3340      	adds	r3, #64	; 0x40
 80135c6:	4a2a      	ldr	r2, [pc, #168]	; (8013670 <problem_fetch+0x12350>)
 80135c8:	461c      	mov	r4, r3
 80135ca:	4613      	mov	r3, r2
 80135cc:	cb07      	ldmia	r3!, {r0, r1, r2}
 80135ce:	6020      	str	r0, [r4, #0]
 80135d0:	6061      	str	r1, [r4, #4]
 80135d2:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,8,12,14,16,18");
 80135d4:	687b      	ldr	r3, [r7, #4]
 80135d6:	3304      	adds	r3, #4
 80135d8:	4a26      	ldr	r2, [pc, #152]	; (8013674 <problem_fetch+0x12354>)
 80135da:	461c      	mov	r4, r3
 80135dc:	4615      	mov	r5, r2
 80135de:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80135e0:	6020      	str	r0, [r4, #0]
 80135e2:	6061      	str	r1, [r4, #4]
 80135e4:	60a2      	str	r2, [r4, #8]
 80135e6:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish, "s,d,d,d,d,e");
 80135e8:	687b      	ldr	r3, [r7, #4]
 80135ea:	33d8      	adds	r3, #216	; 0xd8
 80135ec:	4a22      	ldr	r2, [pc, #136]	; (8013678 <problem_fetch+0x12358>)
 80135ee:	461c      	mov	r4, r3
 80135f0:	4613      	mov	r3, r2
 80135f2:	cb07      	ldmia	r3!, {r0, r1, r2}
 80135f4:	6020      	str	r0, [r4, #0]
 80135f6:	6061      	str	r1, [r4, #4]
 80135f8:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade, "6C+");
 80135fa:	687b      	ldr	r3, [r7, #4]
 80135fc:	33cc      	adds	r3, #204	; 0xcc
 80135fe:	4a06      	ldr	r2, [pc, #24]	; (8013618 <problem_fetch+0x122f8>)
 8013600:	6810      	ldr	r0, [r2, #0]
 8013602:	6018      	str	r0, [r3, #0]
			break;
 8013604:	f007 bbd2 	b.w	801adac <problem_fetch+0x19a8c>
 8013608:	08027a64 	.word	0x08027a64
 801360c:	08027a70 	.word	0x08027a70
 8013610:	08027a7c 	.word	0x08027a7c
 8013614:	08021320 	.word	0x08021320
 8013618:	080213a8 	.word	0x080213a8
 801361c:	08027a8c 	.word	0x08027a8c
 8013620:	08027aa0 	.word	0x08027aa0
 8013624:	08026c80 	.word	0x08026c80
 8013628:	08021424 	.word	0x08021424
 801362c:	08027aac 	.word	0x08027aac
 8013630:	08027abc 	.word	0x08027abc
 8013634:	08027ac8 	.word	0x08027ac8
 8013638:	08027ad8 	.word	0x08027ad8
 801363c:	08027aec 	.word	0x08027aec
 8013640:	08027b00 	.word	0x08027b00
 8013644:	080215fc 	.word	0x080215fc
 8013648:	080212b0 	.word	0x080212b0
 801364c:	08027b1c 	.word	0x08027b1c
 8013650:	08027b24 	.word	0x08027b24
 8013654:	08027b34 	.word	0x08027b34
 8013658:	08027b48 	.word	0x08027b48
 801365c:	08027b58 	.word	0x08027b58
 8013660:	08027b60 	.word	0x08027b60
 8013664:	08027b70 	.word	0x08027b70
 8013668:	08026be8 	.word	0x08026be8
 801366c:	08027b84 	.word	0x08027b84
 8013670:	08027b90 	.word	0x08027b90
 8013674:	08027b9c 	.word	0x08027b9c
 8013678:	0802139c 	.word	0x0802139c
		case 607 :
			strcpy(p->name,"SNAP");
 801367c:	687b      	ldr	r3, [r7, #4]
 801367e:	337c      	adds	r3, #124	; 0x7c
 8013680:	4aba      	ldr	r2, [pc, #744]	; (801396c <problem_fetch+0x1264c>)
 8013682:	6810      	ldr	r0, [r2, #0]
 8013684:	6018      	str	r0, [r3, #0]
 8013686:	7912      	ldrb	r2, [r2, #4]
 8013688:	711a      	strb	r2, [r3, #4]
			p->moveSize = 6;
 801368a:	687b      	ldr	r3, [r7, #4]
 801368c:	2206      	movs	r2, #6
 801368e:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"B,D,B,E,A,D");
 8013690:	687b      	ldr	r3, [r7, #4]
 8013692:	3340      	adds	r3, #64	; 0x40
 8013694:	4ab6      	ldr	r2, [pc, #728]	; (8013970 <problem_fetch+0x12650>)
 8013696:	461c      	mov	r4, r3
 8013698:	4613      	mov	r3, r2
 801369a:	cb07      	ldmia	r3!, {r0, r1, r2}
 801369c:	6020      	str	r0, [r4, #0]
 801369e:	6061      	str	r1, [r4, #4]
 80136a0:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"6,7,10,12,14,18");
 80136a2:	687b      	ldr	r3, [r7, #4]
 80136a4:	3304      	adds	r3, #4
 80136a6:	4ab3      	ldr	r2, [pc, #716]	; (8013974 <problem_fetch+0x12654>)
 80136a8:	461c      	mov	r4, r3
 80136aa:	4615      	mov	r5, r2
 80136ac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80136ae:	6020      	str	r0, [r4, #0]
 80136b0:	6061      	str	r1, [r4, #4]
 80136b2:	60a2      	str	r2, [r4, #8]
 80136b4:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish, "s,d,d,d,d,e");
 80136b6:	687b      	ldr	r3, [r7, #4]
 80136b8:	33d8      	adds	r3, #216	; 0xd8
 80136ba:	4aaf      	ldr	r2, [pc, #700]	; (8013978 <problem_fetch+0x12658>)
 80136bc:	461c      	mov	r4, r3
 80136be:	4613      	mov	r3, r2
 80136c0:	cb07      	ldmia	r3!, {r0, r1, r2}
 80136c2:	6020      	str	r0, [r4, #0]
 80136c4:	6061      	str	r1, [r4, #4]
 80136c6:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade, "7A+");
 80136c8:	687b      	ldr	r3, [r7, #4]
 80136ca:	33cc      	adds	r3, #204	; 0xcc
 80136cc:	4aab      	ldr	r2, [pc, #684]	; (801397c <problem_fetch+0x1265c>)
 80136ce:	6810      	ldr	r0, [r2, #0]
 80136d0:	6018      	str	r0, [r3, #0]
			break;
 80136d2:	f007 bb6b 	b.w	801adac <problem_fetch+0x19a8c>
		case 608 :
			strcpy(p->name,"LUCID NONSENSE");
 80136d6:	687b      	ldr	r3, [r7, #4]
 80136d8:	337c      	adds	r3, #124	; 0x7c
 80136da:	4aa9      	ldr	r2, [pc, #676]	; (8013980 <problem_fetch+0x12660>)
 80136dc:	461c      	mov	r4, r3
 80136de:	4613      	mov	r3, r2
 80136e0:	cb07      	ldmia	r3!, {r0, r1, r2}
 80136e2:	6020      	str	r0, [r4, #0]
 80136e4:	6061      	str	r1, [r4, #4]
 80136e6:	60a2      	str	r2, [r4, #8]
 80136e8:	881a      	ldrh	r2, [r3, #0]
 80136ea:	789b      	ldrb	r3, [r3, #2]
 80136ec:	81a2      	strh	r2, [r4, #12]
 80136ee:	73a3      	strb	r3, [r4, #14]
			p->moveSize = 6;
 80136f0:	687b      	ldr	r3, [r7, #4]
 80136f2:	2206      	movs	r2, #6
 80136f4:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"G,E,D,E,B,I");
 80136f6:	687b      	ldr	r3, [r7, #4]
 80136f8:	3340      	adds	r3, #64	; 0x40
 80136fa:	4aa2      	ldr	r2, [pc, #648]	; (8013984 <problem_fetch+0x12664>)
 80136fc:	461c      	mov	r4, r3
 80136fe:	4613      	mov	r3, r2
 8013700:	cb07      	ldmia	r3!, {r0, r1, r2}
 8013702:	6020      	str	r0, [r4, #0]
 8013704:	6061      	str	r1, [r4, #4]
 8013706:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,8,15,16,10,18");
 8013708:	687b      	ldr	r3, [r7, #4]
 801370a:	3304      	adds	r3, #4
 801370c:	4a9e      	ldr	r2, [pc, #632]	; (8013988 <problem_fetch+0x12668>)
 801370e:	461c      	mov	r4, r3
 8013710:	4615      	mov	r5, r2
 8013712:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8013714:	6020      	str	r0, [r4, #0]
 8013716:	6061      	str	r1, [r4, #4]
 8013718:	60a2      	str	r2, [r4, #8]
 801371a:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish, "s,d,d,d,d,e");
 801371c:	687b      	ldr	r3, [r7, #4]
 801371e:	33d8      	adds	r3, #216	; 0xd8
 8013720:	4a95      	ldr	r2, [pc, #596]	; (8013978 <problem_fetch+0x12658>)
 8013722:	461c      	mov	r4, r3
 8013724:	4613      	mov	r3, r2
 8013726:	cb07      	ldmia	r3!, {r0, r1, r2}
 8013728:	6020      	str	r0, [r4, #0]
 801372a:	6061      	str	r1, [r4, #4]
 801372c:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade, "7A");
 801372e:	687b      	ldr	r3, [r7, #4]
 8013730:	33cc      	adds	r3, #204	; 0xcc
 8013732:	4a96      	ldr	r2, [pc, #600]	; (801398c <problem_fetch+0x1266c>)
 8013734:	8811      	ldrh	r1, [r2, #0]
 8013736:	7892      	ldrb	r2, [r2, #2]
 8013738:	8019      	strh	r1, [r3, #0]
 801373a:	709a      	strb	r2, [r3, #2]
			break;
 801373c:	f007 bb36 	b.w	801adac <problem_fetch+0x19a8c>
		case 609 :
			strcpy(p->name,"DON'T BLACKOUT");
 8013740:	687b      	ldr	r3, [r7, #4]
 8013742:	337c      	adds	r3, #124	; 0x7c
 8013744:	4a92      	ldr	r2, [pc, #584]	; (8013990 <problem_fetch+0x12670>)
 8013746:	461c      	mov	r4, r3
 8013748:	4613      	mov	r3, r2
 801374a:	cb07      	ldmia	r3!, {r0, r1, r2}
 801374c:	6020      	str	r0, [r4, #0]
 801374e:	6061      	str	r1, [r4, #4]
 8013750:	60a2      	str	r2, [r4, #8]
 8013752:	881a      	ldrh	r2, [r3, #0]
 8013754:	789b      	ldrb	r3, [r3, #2]
 8013756:	81a2      	strh	r2, [r4, #12]
 8013758:	73a3      	strb	r3, [r4, #14]
			p->moveSize = 7;
 801375a:	687b      	ldr	r3, [r7, #4]
 801375c:	2207      	movs	r2, #7
 801375e:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"G,E,F,A,D,H,A");
 8013760:	687b      	ldr	r3, [r7, #4]
 8013762:	3340      	adds	r3, #64	; 0x40
 8013764:	4a8b      	ldr	r2, [pc, #556]	; (8013994 <problem_fetch+0x12674>)
 8013766:	461c      	mov	r4, r3
 8013768:	4613      	mov	r3, r2
 801376a:	cb07      	ldmia	r3!, {r0, r1, r2}
 801376c:	6020      	str	r0, [r4, #0]
 801376e:	6061      	str	r1, [r4, #4]
 8013770:	60a2      	str	r2, [r4, #8]
 8013772:	881b      	ldrh	r3, [r3, #0]
 8013774:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,6,11,9,15,10,18");
 8013776:	687b      	ldr	r3, [r7, #4]
 8013778:	3304      	adds	r3, #4
 801377a:	4a87      	ldr	r2, [pc, #540]	; (8013998 <problem_fetch+0x12678>)
 801377c:	461d      	mov	r5, r3
 801377e:	4614      	mov	r4, r2
 8013780:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8013782:	6028      	str	r0, [r5, #0]
 8013784:	6069      	str	r1, [r5, #4]
 8013786:	60aa      	str	r2, [r5, #8]
 8013788:	60eb      	str	r3, [r5, #12]
 801378a:	8823      	ldrh	r3, [r4, #0]
 801378c:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish, "s,s,d,d,d,d,e");
 801378e:	687b      	ldr	r3, [r7, #4]
 8013790:	33d8      	adds	r3, #216	; 0xd8
 8013792:	4a82      	ldr	r2, [pc, #520]	; (801399c <problem_fetch+0x1267c>)
 8013794:	461c      	mov	r4, r3
 8013796:	4613      	mov	r3, r2
 8013798:	cb07      	ldmia	r3!, {r0, r1, r2}
 801379a:	6020      	str	r0, [r4, #0]
 801379c:	6061      	str	r1, [r4, #4]
 801379e:	60a2      	str	r2, [r4, #8]
 80137a0:	881b      	ldrh	r3, [r3, #0]
 80137a2:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade, "7A");
 80137a4:	687b      	ldr	r3, [r7, #4]
 80137a6:	33cc      	adds	r3, #204	; 0xcc
 80137a8:	4a78      	ldr	r2, [pc, #480]	; (801398c <problem_fetch+0x1266c>)
 80137aa:	8811      	ldrh	r1, [r2, #0]
 80137ac:	7892      	ldrb	r2, [r2, #2]
 80137ae:	8019      	strh	r1, [r3, #0]
 80137b0:	709a      	strb	r2, [r3, #2]
			break;
 80137b2:	f007 bafb 	b.w	801adac <problem_fetch+0x19a8c>
		case 61 :
			strcpy(p->name,"LADYBUG RIGHT VAR");
 80137b6:	687b      	ldr	r3, [r7, #4]
 80137b8:	337c      	adds	r3, #124	; 0x7c
 80137ba:	4a79      	ldr	r2, [pc, #484]	; (80139a0 <problem_fetch+0x12680>)
 80137bc:	461d      	mov	r5, r3
 80137be:	4614      	mov	r4, r2
 80137c0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80137c2:	6028      	str	r0, [r5, #0]
 80137c4:	6069      	str	r1, [r5, #4]
 80137c6:	60aa      	str	r2, [r5, #8]
 80137c8:	60eb      	str	r3, [r5, #12]
 80137ca:	8823      	ldrh	r3, [r4, #0]
 80137cc:	822b      	strh	r3, [r5, #16]
			p->moveSize = 8;
 80137ce:	687b      	ldr	r3, [r7, #4]
 80137d0:	2208      	movs	r2, #8
 80137d2:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"G,J,H,C,F,A,E,I");
 80137d4:	687b      	ldr	r3, [r7, #4]
 80137d6:	3340      	adds	r3, #64	; 0x40
 80137d8:	4a72      	ldr	r2, [pc, #456]	; (80139a4 <problem_fetch+0x12684>)
 80137da:	461c      	mov	r4, r3
 80137dc:	4615      	mov	r5, r2
 80137de:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80137e0:	6020      	str	r0, [r4, #0]
 80137e2:	6061      	str	r1, [r4, #4]
 80137e4:	60a2      	str	r2, [r4, #8]
 80137e6:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"6,5,10,13,11,9,16,18");
 80137e8:	687b      	ldr	r3, [r7, #4]
 80137ea:	3304      	adds	r3, #4
 80137ec:	4a6e      	ldr	r2, [pc, #440]	; (80139a8 <problem_fetch+0x12688>)
 80137ee:	461d      	mov	r5, r3
 80137f0:	4614      	mov	r4, r2
 80137f2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80137f4:	6028      	str	r0, [r5, #0]
 80137f6:	6069      	str	r1, [r5, #4]
 80137f8:	60aa      	str	r2, [r5, #8]
 80137fa:	60eb      	str	r3, [r5, #12]
 80137fc:	6820      	ldr	r0, [r4, #0]
 80137fe:	6128      	str	r0, [r5, #16]
 8013800:	7923      	ldrb	r3, [r4, #4]
 8013802:	752b      	strb	r3, [r5, #20]
			strcpy(p->startFinish, "s,s,d,d,d,d,d,e");
 8013804:	687b      	ldr	r3, [r7, #4]
 8013806:	33d8      	adds	r3, #216	; 0xd8
 8013808:	4a68      	ldr	r2, [pc, #416]	; (80139ac <problem_fetch+0x1268c>)
 801380a:	461c      	mov	r4, r3
 801380c:	4615      	mov	r5, r2
 801380e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8013810:	6020      	str	r0, [r4, #0]
 8013812:	6061      	str	r1, [r4, #4]
 8013814:	60a2      	str	r2, [r4, #8]
 8013816:	60e3      	str	r3, [r4, #12]
			strcpy(p->grade, "7A+");
 8013818:	687b      	ldr	r3, [r7, #4]
 801381a:	33cc      	adds	r3, #204	; 0xcc
 801381c:	4a57      	ldr	r2, [pc, #348]	; (801397c <problem_fetch+0x1265c>)
 801381e:	6810      	ldr	r0, [r2, #0]
 8013820:	6018      	str	r0, [r3, #0]
			break;
 8013822:	f007 bac3 	b.w	801adac <problem_fetch+0x19a8c>
		case 610 :
			strcpy(p->name,"CHINGA SU ES TO MADRE");
 8013826:	687b      	ldr	r3, [r7, #4]
 8013828:	337c      	adds	r3, #124	; 0x7c
 801382a:	4a61      	ldr	r2, [pc, #388]	; (80139b0 <problem_fetch+0x12690>)
 801382c:	461d      	mov	r5, r3
 801382e:	4614      	mov	r4, r2
 8013830:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8013832:	6028      	str	r0, [r5, #0]
 8013834:	6069      	str	r1, [r5, #4]
 8013836:	60aa      	str	r2, [r5, #8]
 8013838:	60eb      	str	r3, [r5, #12]
 801383a:	6820      	ldr	r0, [r4, #0]
 801383c:	6128      	str	r0, [r5, #16]
 801383e:	88a3      	ldrh	r3, [r4, #4]
 8013840:	82ab      	strh	r3, [r5, #20]
			p->moveSize = 5;
 8013842:	687b      	ldr	r3, [r7, #4]
 8013844:	2205      	movs	r2, #5
 8013846:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"E,F,B,A,B");
 8013848:	687b      	ldr	r3, [r7, #4]
 801384a:	3340      	adds	r3, #64	; 0x40
 801384c:	4959      	ldr	r1, [pc, #356]	; (80139b4 <problem_fetch+0x12694>)
 801384e:	461a      	mov	r2, r3
 8013850:	460b      	mov	r3, r1
 8013852:	cb03      	ldmia	r3!, {r0, r1}
 8013854:	6010      	str	r0, [r2, #0]
 8013856:	6051      	str	r1, [r2, #4]
 8013858:	881b      	ldrh	r3, [r3, #0]
 801385a:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"6,11,12,18,15");
 801385c:	687b      	ldr	r3, [r7, #4]
 801385e:	3304      	adds	r3, #4
 8013860:	4a55      	ldr	r2, [pc, #340]	; (80139b8 <problem_fetch+0x12698>)
 8013862:	461c      	mov	r4, r3
 8013864:	4613      	mov	r3, r2
 8013866:	cb07      	ldmia	r3!, {r0, r1, r2}
 8013868:	6020      	str	r0, [r4, #0]
 801386a:	6061      	str	r1, [r4, #4]
 801386c:	60a2      	str	r2, [r4, #8]
 801386e:	881b      	ldrh	r3, [r3, #0]
 8013870:	81a3      	strh	r3, [r4, #12]
			strcpy(p->startFinish, "s,d,d,e,d");
 8013872:	687b      	ldr	r3, [r7, #4]
 8013874:	33d8      	adds	r3, #216	; 0xd8
 8013876:	4951      	ldr	r1, [pc, #324]	; (80139bc <problem_fetch+0x1269c>)
 8013878:	461a      	mov	r2, r3
 801387a:	460b      	mov	r3, r1
 801387c:	cb03      	ldmia	r3!, {r0, r1}
 801387e:	6010      	str	r0, [r2, #0]
 8013880:	6051      	str	r1, [r2, #4]
 8013882:	881b      	ldrh	r3, [r3, #0]
 8013884:	8113      	strh	r3, [r2, #8]
			strcpy(p->grade, "7C");
 8013886:	687b      	ldr	r3, [r7, #4]
 8013888:	33cc      	adds	r3, #204	; 0xcc
 801388a:	4a4d      	ldr	r2, [pc, #308]	; (80139c0 <problem_fetch+0x126a0>)
 801388c:	8811      	ldrh	r1, [r2, #0]
 801388e:	7892      	ldrb	r2, [r2, #2]
 8013890:	8019      	strh	r1, [r3, #0]
 8013892:	709a      	strb	r2, [r3, #2]
			break;
 8013894:	f007 ba8a 	b.w	801adac <problem_fetch+0x19a8c>
		case 611 :
			strcpy(p->name,"TWO");
 8013898:	687b      	ldr	r3, [r7, #4]
 801389a:	337c      	adds	r3, #124	; 0x7c
 801389c:	4a49      	ldr	r2, [pc, #292]	; (80139c4 <problem_fetch+0x126a4>)
 801389e:	6810      	ldr	r0, [r2, #0]
 80138a0:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 80138a2:	687b      	ldr	r3, [r7, #4]
 80138a4:	2207      	movs	r2, #7
 80138a6:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"C,E,E,F,E,I,I");
 80138a8:	687b      	ldr	r3, [r7, #4]
 80138aa:	3340      	adds	r3, #64	; 0x40
 80138ac:	4a46      	ldr	r2, [pc, #280]	; (80139c8 <problem_fetch+0x126a8>)
 80138ae:	461c      	mov	r4, r3
 80138b0:	4613      	mov	r3, r2
 80138b2:	cb07      	ldmia	r3!, {r0, r1, r2}
 80138b4:	6020      	str	r0, [r4, #0]
 80138b6:	6061      	str	r1, [r4, #4]
 80138b8:	60a2      	str	r2, [r4, #8]
 80138ba:	881b      	ldrh	r3, [r3, #0]
 80138bc:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,6,8,11,14,14,18");
 80138be:	687b      	ldr	r3, [r7, #4]
 80138c0:	3304      	adds	r3, #4
 80138c2:	4a42      	ldr	r2, [pc, #264]	; (80139cc <problem_fetch+0x126ac>)
 80138c4:	461d      	mov	r5, r3
 80138c6:	4614      	mov	r4, r2
 80138c8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80138ca:	6028      	str	r0, [r5, #0]
 80138cc:	6069      	str	r1, [r5, #4]
 80138ce:	60aa      	str	r2, [r5, #8]
 80138d0:	60eb      	str	r3, [r5, #12]
 80138d2:	8823      	ldrh	r3, [r4, #0]
 80138d4:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish, "s,s,d,d,d,d,e");
 80138d6:	687b      	ldr	r3, [r7, #4]
 80138d8:	33d8      	adds	r3, #216	; 0xd8
 80138da:	4a30      	ldr	r2, [pc, #192]	; (801399c <problem_fetch+0x1267c>)
 80138dc:	461c      	mov	r4, r3
 80138de:	4613      	mov	r3, r2
 80138e0:	cb07      	ldmia	r3!, {r0, r1, r2}
 80138e2:	6020      	str	r0, [r4, #0]
 80138e4:	6061      	str	r1, [r4, #4]
 80138e6:	60a2      	str	r2, [r4, #8]
 80138e8:	881b      	ldrh	r3, [r3, #0]
 80138ea:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade, "6C+");
 80138ec:	687b      	ldr	r3, [r7, #4]
 80138ee:	33cc      	adds	r3, #204	; 0xcc
 80138f0:	4a37      	ldr	r2, [pc, #220]	; (80139d0 <problem_fetch+0x126b0>)
 80138f2:	6810      	ldr	r0, [r2, #0]
 80138f4:	6018      	str	r0, [r3, #0]
			break;
 80138f6:	f007 ba59 	b.w	801adac <problem_fetch+0x19a8c>
		case 612 :
			strcpy(p->name,"BILLIONS AND BILLIONS");
 80138fa:	687b      	ldr	r3, [r7, #4]
 80138fc:	337c      	adds	r3, #124	; 0x7c
 80138fe:	4a35      	ldr	r2, [pc, #212]	; (80139d4 <problem_fetch+0x126b4>)
 8013900:	461d      	mov	r5, r3
 8013902:	4614      	mov	r4, r2
 8013904:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8013906:	6028      	str	r0, [r5, #0]
 8013908:	6069      	str	r1, [r5, #4]
 801390a:	60aa      	str	r2, [r5, #8]
 801390c:	60eb      	str	r3, [r5, #12]
 801390e:	6820      	ldr	r0, [r4, #0]
 8013910:	6128      	str	r0, [r5, #16]
 8013912:	88a3      	ldrh	r3, [r4, #4]
 8013914:	82ab      	strh	r3, [r5, #20]
			p->moveSize = 6;
 8013916:	687b      	ldr	r3, [r7, #4]
 8013918:	2206      	movs	r2, #6
 801391a:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"G,H,K,H,G,D");
 801391c:	687b      	ldr	r3, [r7, #4]
 801391e:	3340      	adds	r3, #64	; 0x40
 8013920:	4a2d      	ldr	r2, [pc, #180]	; (80139d8 <problem_fetch+0x126b8>)
 8013922:	461c      	mov	r4, r3
 8013924:	4613      	mov	r3, r2
 8013926:	cb07      	ldmia	r3!, {r0, r1, r2}
 8013928:	6020      	str	r0, [r4, #0]
 801392a:	6061      	str	r1, [r4, #4]
 801392c:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,5,9,12,14,18");
 801392e:	687b      	ldr	r3, [r7, #4]
 8013930:	3304      	adds	r3, #4
 8013932:	4a2a      	ldr	r2, [pc, #168]	; (80139dc <problem_fetch+0x126bc>)
 8013934:	461c      	mov	r4, r3
 8013936:	4613      	mov	r3, r2
 8013938:	cb07      	ldmia	r3!, {r0, r1, r2}
 801393a:	6020      	str	r0, [r4, #0]
 801393c:	6061      	str	r1, [r4, #4]
 801393e:	60a2      	str	r2, [r4, #8]
 8013940:	881a      	ldrh	r2, [r3, #0]
 8013942:	789b      	ldrb	r3, [r3, #2]
 8013944:	81a2      	strh	r2, [r4, #12]
 8013946:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish, "s,s,d,d,d,e");
 8013948:	687b      	ldr	r3, [r7, #4]
 801394a:	33d8      	adds	r3, #216	; 0xd8
 801394c:	4a24      	ldr	r2, [pc, #144]	; (80139e0 <problem_fetch+0x126c0>)
 801394e:	461c      	mov	r4, r3
 8013950:	4613      	mov	r3, r2
 8013952:	cb07      	ldmia	r3!, {r0, r1, r2}
 8013954:	6020      	str	r0, [r4, #0]
 8013956:	6061      	str	r1, [r4, #4]
 8013958:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade, "7A");
 801395a:	687b      	ldr	r3, [r7, #4]
 801395c:	33cc      	adds	r3, #204	; 0xcc
 801395e:	4a0b      	ldr	r2, [pc, #44]	; (801398c <problem_fetch+0x1266c>)
 8013960:	8811      	ldrh	r1, [r2, #0]
 8013962:	7892      	ldrb	r2, [r2, #2]
 8013964:	8019      	strh	r1, [r3, #0]
 8013966:	709a      	strb	r2, [r3, #2]
			break;
 8013968:	f007 ba20 	b.w	801adac <problem_fetch+0x19a8c>
 801396c:	08027bac 	.word	0x08027bac
 8013970:	08027bb4 	.word	0x08027bb4
 8013974:	08027bc0 	.word	0x08027bc0
 8013978:	0802139c 	.word	0x0802139c
 801397c:	08021424 	.word	0x08021424
 8013980:	08027bd0 	.word	0x08027bd0
 8013984:	08027be0 	.word	0x08027be0
 8013988:	08027bec 	.word	0x08027bec
 801398c:	080212f4 	.word	0x080212f4
 8013990:	08027bfc 	.word	0x08027bfc
 8013994:	08027c0c 	.word	0x08027c0c
 8013998:	08027c1c 	.word	0x08027c1c
 801399c:	080212a0 	.word	0x080212a0
 80139a0:	08027c30 	.word	0x08027c30
 80139a4:	08027c44 	.word	0x08027c44
 80139a8:	08027c54 	.word	0x08027c54
 80139ac:	080214cc 	.word	0x080214cc
 80139b0:	08027c6c 	.word	0x08027c6c
 80139b4:	08027c84 	.word	0x08027c84
 80139b8:	08027c90 	.word	0x08027c90
 80139bc:	08027ca0 	.word	0x08027ca0
 80139c0:	0802158c 	.word	0x0802158c
 80139c4:	08027cac 	.word	0x08027cac
 80139c8:	08027cb0 	.word	0x08027cb0
 80139cc:	08027cc0 	.word	0x08027cc0
 80139d0:	080213a8 	.word	0x080213a8
 80139d4:	08027cd4 	.word	0x08027cd4
 80139d8:	08027cec 	.word	0x08027cec
 80139dc:	08027cf8 	.word	0x08027cf8
 80139e0:	08021910 	.word	0x08021910
		case 613 :
			strcpy(p->name,"INTO THE SHADOW DUST");
 80139e4:	687b      	ldr	r3, [r7, #4]
 80139e6:	337c      	adds	r3, #124	; 0x7c
 80139e8:	4ab7      	ldr	r2, [pc, #732]	; (8013cc8 <problem_fetch+0x129a8>)
 80139ea:	461d      	mov	r5, r3
 80139ec:	4614      	mov	r4, r2
 80139ee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80139f0:	6028      	str	r0, [r5, #0]
 80139f2:	6069      	str	r1, [r5, #4]
 80139f4:	60aa      	str	r2, [r5, #8]
 80139f6:	60eb      	str	r3, [r5, #12]
 80139f8:	6820      	ldr	r0, [r4, #0]
 80139fa:	6128      	str	r0, [r5, #16]
 80139fc:	7923      	ldrb	r3, [r4, #4]
 80139fe:	752b      	strb	r3, [r5, #20]
			p->moveSize = 8;
 8013a00:	687b      	ldr	r3, [r7, #4]
 8013a02:	2208      	movs	r2, #8
 8013a04:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"G,E,H,F,C,G,G,I");
 8013a06:	687b      	ldr	r3, [r7, #4]
 8013a08:	3340      	adds	r3, #64	; 0x40
 8013a0a:	4ab0      	ldr	r2, [pc, #704]	; (8013ccc <problem_fetch+0x129ac>)
 8013a0c:	461c      	mov	r4, r3
 8013a0e:	4615      	mov	r5, r2
 8013a10:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8013a12:	6020      	str	r0, [r4, #0]
 8013a14:	6061      	str	r1, [r4, #4]
 8013a16:	60a2      	str	r2, [r4, #8]
 8013a18:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,8,8,11,13,14,17,18");
 8013a1a:	687b      	ldr	r3, [r7, #4]
 8013a1c:	3304      	adds	r3, #4
 8013a1e:	4aac      	ldr	r2, [pc, #688]	; (8013cd0 <problem_fetch+0x129b0>)
 8013a20:	461d      	mov	r5, r3
 8013a22:	4614      	mov	r4, r2
 8013a24:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8013a26:	6028      	str	r0, [r5, #0]
 8013a28:	6069      	str	r1, [r5, #4]
 8013a2a:	60aa      	str	r2, [r5, #8]
 8013a2c:	60eb      	str	r3, [r5, #12]
 8013a2e:	6820      	ldr	r0, [r4, #0]
 8013a30:	6128      	str	r0, [r5, #16]
 8013a32:	7923      	ldrb	r3, [r4, #4]
 8013a34:	752b      	strb	r3, [r5, #20]
			strcpy(p->startFinish, "s,d,d,d,d,d,d,e");
 8013a36:	687b      	ldr	r3, [r7, #4]
 8013a38:	33d8      	adds	r3, #216	; 0xd8
 8013a3a:	4aa6      	ldr	r2, [pc, #664]	; (8013cd4 <problem_fetch+0x129b4>)
 8013a3c:	461c      	mov	r4, r3
 8013a3e:	4615      	mov	r5, r2
 8013a40:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8013a42:	6020      	str	r0, [r4, #0]
 8013a44:	6061      	str	r1, [r4, #4]
 8013a46:	60a2      	str	r2, [r4, #8]
 8013a48:	60e3      	str	r3, [r4, #12]
			strcpy(p->grade, "6B+");
 8013a4a:	687b      	ldr	r3, [r7, #4]
 8013a4c:	33cc      	adds	r3, #204	; 0xcc
 8013a4e:	4aa2      	ldr	r2, [pc, #648]	; (8013cd8 <problem_fetch+0x129b8>)
 8013a50:	6810      	ldr	r0, [r2, #0]
 8013a52:	6018      	str	r0, [r3, #0]
			break;
 8013a54:	f007 b9aa 	b.w	801adac <problem_fetch+0x19a8c>
		case 614 :
			strcpy(p->name,"GRO1");
 8013a58:	687b      	ldr	r3, [r7, #4]
 8013a5a:	337c      	adds	r3, #124	; 0x7c
 8013a5c:	4a9f      	ldr	r2, [pc, #636]	; (8013cdc <problem_fetch+0x129bc>)
 8013a5e:	6810      	ldr	r0, [r2, #0]
 8013a60:	6018      	str	r0, [r3, #0]
 8013a62:	7912      	ldrb	r2, [r2, #4]
 8013a64:	711a      	strb	r2, [r3, #4]
			p->moveSize = 6;
 8013a66:	687b      	ldr	r3, [r7, #4]
 8013a68:	2206      	movs	r2, #6
 8013a6a:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"G,C,H,C,E,D");
 8013a6c:	687b      	ldr	r3, [r7, #4]
 8013a6e:	3340      	adds	r3, #64	; 0x40
 8013a70:	4a9b      	ldr	r2, [pc, #620]	; (8013ce0 <problem_fetch+0x129c0>)
 8013a72:	461c      	mov	r4, r3
 8013a74:	4613      	mov	r3, r2
 8013a76:	cb07      	ldmia	r3!, {r0, r1, r2}
 8013a78:	6020      	str	r0, [r4, #0]
 8013a7a:	6061      	str	r1, [r4, #4]
 8013a7c:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,8,10,13,16,18");
 8013a7e:	687b      	ldr	r3, [r7, #4]
 8013a80:	3304      	adds	r3, #4
 8013a82:	4a98      	ldr	r2, [pc, #608]	; (8013ce4 <problem_fetch+0x129c4>)
 8013a84:	461c      	mov	r4, r3
 8013a86:	4615      	mov	r5, r2
 8013a88:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8013a8a:	6020      	str	r0, [r4, #0]
 8013a8c:	6061      	str	r1, [r4, #4]
 8013a8e:	60a2      	str	r2, [r4, #8]
 8013a90:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish, "s,d,d,d,d,e");
 8013a92:	687b      	ldr	r3, [r7, #4]
 8013a94:	33d8      	adds	r3, #216	; 0xd8
 8013a96:	4a94      	ldr	r2, [pc, #592]	; (8013ce8 <problem_fetch+0x129c8>)
 8013a98:	461c      	mov	r4, r3
 8013a9a:	4613      	mov	r3, r2
 8013a9c:	cb07      	ldmia	r3!, {r0, r1, r2}
 8013a9e:	6020      	str	r0, [r4, #0]
 8013aa0:	6061      	str	r1, [r4, #4]
 8013aa2:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade, "6C");
 8013aa4:	687b      	ldr	r3, [r7, #4]
 8013aa6:	33cc      	adds	r3, #204	; 0xcc
 8013aa8:	4a90      	ldr	r2, [pc, #576]	; (8013cec <problem_fetch+0x129cc>)
 8013aaa:	8811      	ldrh	r1, [r2, #0]
 8013aac:	7892      	ldrb	r2, [r2, #2]
 8013aae:	8019      	strh	r1, [r3, #0]
 8013ab0:	709a      	strb	r2, [r3, #2]
			break;
 8013ab2:	f007 b97b 	b.w	801adac <problem_fetch+0x19a8c>
		case 615 :
			strcpy(p->name,"THREE");
 8013ab6:	687b      	ldr	r3, [r7, #4]
 8013ab8:	337c      	adds	r3, #124	; 0x7c
 8013aba:	4a8d      	ldr	r2, [pc, #564]	; (8013cf0 <problem_fetch+0x129d0>)
 8013abc:	6810      	ldr	r0, [r2, #0]
 8013abe:	6018      	str	r0, [r3, #0]
 8013ac0:	8892      	ldrh	r2, [r2, #4]
 8013ac2:	809a      	strh	r2, [r3, #4]
			p->moveSize = 6;
 8013ac4:	687b      	ldr	r3, [r7, #4]
 8013ac6:	2206      	movs	r2, #6
 8013ac8:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"G,J,H,C,E,A");
 8013aca:	687b      	ldr	r3, [r7, #4]
 8013acc:	3340      	adds	r3, #64	; 0x40
 8013ace:	4a89      	ldr	r2, [pc, #548]	; (8013cf4 <problem_fetch+0x129d4>)
 8013ad0:	461c      	mov	r4, r3
 8013ad2:	4613      	mov	r3, r2
 8013ad4:	cb07      	ldmia	r3!, {r0, r1, r2}
 8013ad6:	6020      	str	r0, [r4, #0]
 8013ad8:	6061      	str	r1, [r4, #4]
 8013ada:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"6,5,10,13,16,18");
 8013adc:	687b      	ldr	r3, [r7, #4]
 8013ade:	3304      	adds	r3, #4
 8013ae0:	4a85      	ldr	r2, [pc, #532]	; (8013cf8 <problem_fetch+0x129d8>)
 8013ae2:	461c      	mov	r4, r3
 8013ae4:	4615      	mov	r5, r2
 8013ae6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8013ae8:	6020      	str	r0, [r4, #0]
 8013aea:	6061      	str	r1, [r4, #4]
 8013aec:	60a2      	str	r2, [r4, #8]
 8013aee:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish, "s,s,d,d,d,e");
 8013af0:	687b      	ldr	r3, [r7, #4]
 8013af2:	33d8      	adds	r3, #216	; 0xd8
 8013af4:	4a81      	ldr	r2, [pc, #516]	; (8013cfc <problem_fetch+0x129dc>)
 8013af6:	461c      	mov	r4, r3
 8013af8:	4613      	mov	r3, r2
 8013afa:	cb07      	ldmia	r3!, {r0, r1, r2}
 8013afc:	6020      	str	r0, [r4, #0]
 8013afe:	6061      	str	r1, [r4, #4]
 8013b00:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade, "6C+");
 8013b02:	687b      	ldr	r3, [r7, #4]
 8013b04:	33cc      	adds	r3, #204	; 0xcc
 8013b06:	4a7e      	ldr	r2, [pc, #504]	; (8013d00 <problem_fetch+0x129e0>)
 8013b08:	6810      	ldr	r0, [r2, #0]
 8013b0a:	6018      	str	r0, [r3, #0]
			break;
 8013b0c:	f007 b94e 	b.w	801adac <problem_fetch+0x19a8c>
		case 616 :
			strcpy(p->name,"DUST IN THE WIND");
 8013b10:	687b      	ldr	r3, [r7, #4]
 8013b12:	337c      	adds	r3, #124	; 0x7c
 8013b14:	4a7b      	ldr	r2, [pc, #492]	; (8013d04 <problem_fetch+0x129e4>)
 8013b16:	461d      	mov	r5, r3
 8013b18:	4614      	mov	r4, r2
 8013b1a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8013b1c:	6028      	str	r0, [r5, #0]
 8013b1e:	6069      	str	r1, [r5, #4]
 8013b20:	60aa      	str	r2, [r5, #8]
 8013b22:	60eb      	str	r3, [r5, #12]
 8013b24:	7823      	ldrb	r3, [r4, #0]
 8013b26:	742b      	strb	r3, [r5, #16]
			p->moveSize = 6;
 8013b28:	687b      	ldr	r3, [r7, #4]
 8013b2a:	2206      	movs	r2, #6
 8013b2c:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"J,E,H,E,G,D");
 8013b2e:	687b      	ldr	r3, [r7, #4]
 8013b30:	3340      	adds	r3, #64	; 0x40
 8013b32:	4a75      	ldr	r2, [pc, #468]	; (8013d08 <problem_fetch+0x129e8>)
 8013b34:	461c      	mov	r4, r3
 8013b36:	4613      	mov	r3, r2
 8013b38:	cb07      	ldmia	r3!, {r0, r1, r2}
 8013b3a:	6020      	str	r0, [r4, #0]
 8013b3c:	6061      	str	r1, [r4, #4]
 8013b3e:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,6,10,14,17,18");
 8013b40:	687b      	ldr	r3, [r7, #4]
 8013b42:	3304      	adds	r3, #4
 8013b44:	4a71      	ldr	r2, [pc, #452]	; (8013d0c <problem_fetch+0x129ec>)
 8013b46:	461c      	mov	r4, r3
 8013b48:	4615      	mov	r5, r2
 8013b4a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8013b4c:	6020      	str	r0, [r4, #0]
 8013b4e:	6061      	str	r1, [r4, #4]
 8013b50:	60a2      	str	r2, [r4, #8]
 8013b52:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish, "s,d,d,d,d,e");
 8013b54:	687b      	ldr	r3, [r7, #4]
 8013b56:	33d8      	adds	r3, #216	; 0xd8
 8013b58:	4a63      	ldr	r2, [pc, #396]	; (8013ce8 <problem_fetch+0x129c8>)
 8013b5a:	461c      	mov	r4, r3
 8013b5c:	4613      	mov	r3, r2
 8013b5e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8013b60:	6020      	str	r0, [r4, #0]
 8013b62:	6061      	str	r1, [r4, #4]
 8013b64:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade, "6C+");
 8013b66:	687b      	ldr	r3, [r7, #4]
 8013b68:	33cc      	adds	r3, #204	; 0xcc
 8013b6a:	4a65      	ldr	r2, [pc, #404]	; (8013d00 <problem_fetch+0x129e0>)
 8013b6c:	6810      	ldr	r0, [r2, #0]
 8013b6e:	6018      	str	r0, [r3, #0]
			break;
 8013b70:	f007 b91c 	b.w	801adac <problem_fetch+0x19a8c>
		case 617 :
			strcpy(p->name,"EM'S BUNNY");
 8013b74:	687b      	ldr	r3, [r7, #4]
 8013b76:	337c      	adds	r3, #124	; 0x7c
 8013b78:	4965      	ldr	r1, [pc, #404]	; (8013d10 <problem_fetch+0x129f0>)
 8013b7a:	461a      	mov	r2, r3
 8013b7c:	460b      	mov	r3, r1
 8013b7e:	cb03      	ldmia	r3!, {r0, r1}
 8013b80:	6010      	str	r0, [r2, #0]
 8013b82:	6051      	str	r1, [r2, #4]
 8013b84:	8819      	ldrh	r1, [r3, #0]
 8013b86:	789b      	ldrb	r3, [r3, #2]
 8013b88:	8111      	strh	r1, [r2, #8]
 8013b8a:	7293      	strb	r3, [r2, #10]
			p->moveSize = 6;
 8013b8c:	687b      	ldr	r3, [r7, #4]
 8013b8e:	2206      	movs	r2, #6
 8013b90:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"G,D,H,I,E,I");
 8013b92:	687b      	ldr	r3, [r7, #4]
 8013b94:	3340      	adds	r3, #64	; 0x40
 8013b96:	4a5f      	ldr	r2, [pc, #380]	; (8013d14 <problem_fetch+0x129f4>)
 8013b98:	461c      	mov	r4, r3
 8013b9a:	4613      	mov	r3, r2
 8013b9c:	cb07      	ldmia	r3!, {r0, r1, r2}
 8013b9e:	6020      	str	r0, [r4, #0]
 8013ba0:	6061      	str	r1, [r4, #4]
 8013ba2:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,7,8,10,14,18");
 8013ba4:	687b      	ldr	r3, [r7, #4]
 8013ba6:	3304      	adds	r3, #4
 8013ba8:	4a5b      	ldr	r2, [pc, #364]	; (8013d18 <problem_fetch+0x129f8>)
 8013baa:	461c      	mov	r4, r3
 8013bac:	4613      	mov	r3, r2
 8013bae:	cb07      	ldmia	r3!, {r0, r1, r2}
 8013bb0:	6020      	str	r0, [r4, #0]
 8013bb2:	6061      	str	r1, [r4, #4]
 8013bb4:	60a2      	str	r2, [r4, #8]
 8013bb6:	881a      	ldrh	r2, [r3, #0]
 8013bb8:	789b      	ldrb	r3, [r3, #2]
 8013bba:	81a2      	strh	r2, [r4, #12]
 8013bbc:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish, "s,d,d,d,d,e");
 8013bbe:	687b      	ldr	r3, [r7, #4]
 8013bc0:	33d8      	adds	r3, #216	; 0xd8
 8013bc2:	4a49      	ldr	r2, [pc, #292]	; (8013ce8 <problem_fetch+0x129c8>)
 8013bc4:	461c      	mov	r4, r3
 8013bc6:	4613      	mov	r3, r2
 8013bc8:	cb07      	ldmia	r3!, {r0, r1, r2}
 8013bca:	6020      	str	r0, [r4, #0]
 8013bcc:	6061      	str	r1, [r4, #4]
 8013bce:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade, "6C");
 8013bd0:	687b      	ldr	r3, [r7, #4]
 8013bd2:	33cc      	adds	r3, #204	; 0xcc
 8013bd4:	4a45      	ldr	r2, [pc, #276]	; (8013cec <problem_fetch+0x129cc>)
 8013bd6:	8811      	ldrh	r1, [r2, #0]
 8013bd8:	7892      	ldrb	r2, [r2, #2]
 8013bda:	8019      	strh	r1, [r3, #0]
 8013bdc:	709a      	strb	r2, [r3, #2]
			break;
 8013bde:	f007 b8e5 	b.w	801adac <problem_fetch+0x19a8c>
		case 618 :
			strcpy(p->name,"DUDDY QUALIFIED");
 8013be2:	687b      	ldr	r3, [r7, #4]
 8013be4:	337c      	adds	r3, #124	; 0x7c
 8013be6:	4a4d      	ldr	r2, [pc, #308]	; (8013d1c <problem_fetch+0x129fc>)
 8013be8:	461c      	mov	r4, r3
 8013bea:	4615      	mov	r5, r2
 8013bec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8013bee:	6020      	str	r0, [r4, #0]
 8013bf0:	6061      	str	r1, [r4, #4]
 8013bf2:	60a2      	str	r2, [r4, #8]
 8013bf4:	60e3      	str	r3, [r4, #12]
			p->moveSize = 7;
 8013bf6:	687b      	ldr	r3, [r7, #4]
 8013bf8:	2207      	movs	r2, #7
 8013bfa:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"J,G,F,A,D,E,I");
 8013bfc:	687b      	ldr	r3, [r7, #4]
 8013bfe:	3340      	adds	r3, #64	; 0x40
 8013c00:	4a47      	ldr	r2, [pc, #284]	; (8013d20 <problem_fetch+0x12a00>)
 8013c02:	461c      	mov	r4, r3
 8013c04:	4613      	mov	r3, r2
 8013c06:	cb07      	ldmia	r3!, {r0, r1, r2}
 8013c08:	6020      	str	r0, [r4, #0]
 8013c0a:	6061      	str	r1, [r4, #4]
 8013c0c:	60a2      	str	r2, [r4, #8]
 8013c0e:	881b      	ldrh	r3, [r3, #0]
 8013c10:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,9,11,14,15,16,18");
 8013c12:	687b      	ldr	r3, [r7, #4]
 8013c14:	3304      	adds	r3, #4
 8013c16:	4a43      	ldr	r2, [pc, #268]	; (8013d24 <problem_fetch+0x12a04>)
 8013c18:	461d      	mov	r5, r3
 8013c1a:	4614      	mov	r4, r2
 8013c1c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8013c1e:	6028      	str	r0, [r5, #0]
 8013c20:	6069      	str	r1, [r5, #4]
 8013c22:	60aa      	str	r2, [r5, #8]
 8013c24:	60eb      	str	r3, [r5, #12]
 8013c26:	8823      	ldrh	r3, [r4, #0]
 8013c28:	78a2      	ldrb	r2, [r4, #2]
 8013c2a:	822b      	strh	r3, [r5, #16]
 8013c2c:	4613      	mov	r3, r2
 8013c2e:	74ab      	strb	r3, [r5, #18]
			strcpy(p->startFinish, "s,d,d,d,d,d,e");
 8013c30:	687b      	ldr	r3, [r7, #4]
 8013c32:	33d8      	adds	r3, #216	; 0xd8
 8013c34:	4a3c      	ldr	r2, [pc, #240]	; (8013d28 <problem_fetch+0x12a08>)
 8013c36:	461c      	mov	r4, r3
 8013c38:	4613      	mov	r3, r2
 8013c3a:	cb07      	ldmia	r3!, {r0, r1, r2}
 8013c3c:	6020      	str	r0, [r4, #0]
 8013c3e:	6061      	str	r1, [r4, #4]
 8013c40:	60a2      	str	r2, [r4, #8]
 8013c42:	881b      	ldrh	r3, [r3, #0]
 8013c44:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade, "7A+");
 8013c46:	687b      	ldr	r3, [r7, #4]
 8013c48:	33cc      	adds	r3, #204	; 0xcc
 8013c4a:	4a38      	ldr	r2, [pc, #224]	; (8013d2c <problem_fetch+0x12a0c>)
 8013c4c:	6810      	ldr	r0, [r2, #0]
 8013c4e:	6018      	str	r0, [r3, #0]
			break;
 8013c50:	f007 b8ac 	b.w	801adac <problem_fetch+0x19a8c>
		case 619 :
			strcpy(p->name,"A MATCH MADE IN HEAVEN");
 8013c54:	687b      	ldr	r3, [r7, #4]
 8013c56:	337c      	adds	r3, #124	; 0x7c
 8013c58:	4a35      	ldr	r2, [pc, #212]	; (8013d30 <problem_fetch+0x12a10>)
 8013c5a:	461c      	mov	r4, r3
 8013c5c:	4615      	mov	r5, r2
 8013c5e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8013c60:	6020      	str	r0, [r4, #0]
 8013c62:	6061      	str	r1, [r4, #4]
 8013c64:	60a2      	str	r2, [r4, #8]
 8013c66:	60e3      	str	r3, [r4, #12]
 8013c68:	6828      	ldr	r0, [r5, #0]
 8013c6a:	6120      	str	r0, [r4, #16]
 8013c6c:	88ab      	ldrh	r3, [r5, #4]
 8013c6e:	79aa      	ldrb	r2, [r5, #6]
 8013c70:	82a3      	strh	r3, [r4, #20]
 8013c72:	4613      	mov	r3, r2
 8013c74:	75a3      	strb	r3, [r4, #22]
			p->moveSize = 5;
 8013c76:	687b      	ldr	r3, [r7, #4]
 8013c78:	2205      	movs	r2, #5
 8013c7a:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"G,E,F,D,D");
 8013c7c:	687b      	ldr	r3, [r7, #4]
 8013c7e:	3340      	adds	r3, #64	; 0x40
 8013c80:	492c      	ldr	r1, [pc, #176]	; (8013d34 <problem_fetch+0x12a14>)
 8013c82:	461a      	mov	r2, r3
 8013c84:	460b      	mov	r3, r1
 8013c86:	cb03      	ldmia	r3!, {r0, r1}
 8013c88:	6010      	str	r0, [r2, #0]
 8013c8a:	6051      	str	r1, [r2, #4]
 8013c8c:	881b      	ldrh	r3, [r3, #0]
 8013c8e:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"4,6,11,15,18");
 8013c90:	687b      	ldr	r3, [r7, #4]
 8013c92:	3304      	adds	r3, #4
 8013c94:	4a28      	ldr	r2, [pc, #160]	; (8013d38 <problem_fetch+0x12a18>)
 8013c96:	461c      	mov	r4, r3
 8013c98:	4613      	mov	r3, r2
 8013c9a:	cb07      	ldmia	r3!, {r0, r1, r2}
 8013c9c:	6020      	str	r0, [r4, #0]
 8013c9e:	6061      	str	r1, [r4, #4]
 8013ca0:	60a2      	str	r2, [r4, #8]
 8013ca2:	781b      	ldrb	r3, [r3, #0]
 8013ca4:	7323      	strb	r3, [r4, #12]
			strcpy(p->startFinish, "s,d,d,d,e");
 8013ca6:	687b      	ldr	r3, [r7, #4]
 8013ca8:	33d8      	adds	r3, #216	; 0xd8
 8013caa:	4924      	ldr	r1, [pc, #144]	; (8013d3c <problem_fetch+0x12a1c>)
 8013cac:	461a      	mov	r2, r3
 8013cae:	460b      	mov	r3, r1
 8013cb0:	cb03      	ldmia	r3!, {r0, r1}
 8013cb2:	6010      	str	r0, [r2, #0]
 8013cb4:	6051      	str	r1, [r2, #4]
 8013cb6:	881b      	ldrh	r3, [r3, #0]
 8013cb8:	8113      	strh	r3, [r2, #8]
			strcpy(p->grade, "7B+");
 8013cba:	687b      	ldr	r3, [r7, #4]
 8013cbc:	33cc      	adds	r3, #204	; 0xcc
 8013cbe:	4a20      	ldr	r2, [pc, #128]	; (8013d40 <problem_fetch+0x12a20>)
 8013cc0:	6810      	ldr	r0, [r2, #0]
 8013cc2:	6018      	str	r0, [r3, #0]
			break;
 8013cc4:	f007 b872 	b.w	801adac <problem_fetch+0x19a8c>
 8013cc8:	08027d08 	.word	0x08027d08
 8013ccc:	08027d20 	.word	0x08027d20
 8013cd0:	08027d30 	.word	0x08027d30
 8013cd4:	08021458 	.word	0x08021458
 8013cd8:	080212b0 	.word	0x080212b0
 8013cdc:	08027d48 	.word	0x08027d48
 8013ce0:	08027d50 	.word	0x08027d50
 8013ce4:	08025ee0 	.word	0x08025ee0
 8013ce8:	0802139c 	.word	0x0802139c
 8013cec:	08021370 	.word	0x08021370
 8013cf0:	08027d5c 	.word	0x08027d5c
 8013cf4:	08027d64 	.word	0x08027d64
 8013cf8:	0802484c 	.word	0x0802484c
 8013cfc:	08021910 	.word	0x08021910
 8013d00:	080213a8 	.word	0x080213a8
 8013d04:	08027d70 	.word	0x08027d70
 8013d08:	08027d84 	.word	0x08027d84
 8013d0c:	08026a08 	.word	0x08026a08
 8013d10:	08027d90 	.word	0x08027d90
 8013d14:	08027d9c 	.word	0x08027d9c
 8013d18:	08027da8 	.word	0x08027da8
 8013d1c:	08027db8 	.word	0x08027db8
 8013d20:	08027dc8 	.word	0x08027dc8
 8013d24:	08027dd8 	.word	0x08027dd8
 8013d28:	08021494 	.word	0x08021494
 8013d2c:	08021424 	.word	0x08021424
 8013d30:	08027dec 	.word	0x08027dec
 8013d34:	08027e04 	.word	0x08027e04
 8013d38:	08027e10 	.word	0x08027e10
 8013d3c:	08021320 	.word	0x08021320
 8013d40:	08021848 	.word	0x08021848
		case 62 :
			strcpy(p->name,"GRÜMPU-TURNIER");
 8013d44:	687b      	ldr	r3, [r7, #4]
 8013d46:	337c      	adds	r3, #124	; 0x7c
 8013d48:	4ab5      	ldr	r2, [pc, #724]	; (8014020 <problem_fetch+0x12d00>)
 8013d4a:	461c      	mov	r4, r3
 8013d4c:	4615      	mov	r5, r2
 8013d4e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8013d50:	6020      	str	r0, [r4, #0]
 8013d52:	6061      	str	r1, [r4, #4]
 8013d54:	60a2      	str	r2, [r4, #8]
 8013d56:	60e3      	str	r3, [r4, #12]
			p->moveSize = 7;
 8013d58:	687b      	ldr	r3, [r7, #4]
 8013d5a:	2207      	movs	r2, #7
 8013d5c:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"G,G,A,E,A,E,A");
 8013d5e:	687b      	ldr	r3, [r7, #4]
 8013d60:	3340      	adds	r3, #64	; 0x40
 8013d62:	4ab0      	ldr	r2, [pc, #704]	; (8014024 <problem_fetch+0x12d04>)
 8013d64:	461c      	mov	r4, r3
 8013d66:	4613      	mov	r3, r2
 8013d68:	cb07      	ldmia	r3!, {r0, r1, r2}
 8013d6a:	6020      	str	r0, [r4, #0]
 8013d6c:	6061      	str	r1, [r4, #4]
 8013d6e:	60a2      	str	r2, [r4, #8]
 8013d70:	881b      	ldrh	r3, [r3, #0]
 8013d72:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,9,9,12,14,16,18");
 8013d74:	687b      	ldr	r3, [r7, #4]
 8013d76:	3304      	adds	r3, #4
 8013d78:	4aab      	ldr	r2, [pc, #684]	; (8014028 <problem_fetch+0x12d08>)
 8013d7a:	461d      	mov	r5, r3
 8013d7c:	4614      	mov	r4, r2
 8013d7e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8013d80:	6028      	str	r0, [r5, #0]
 8013d82:	6069      	str	r1, [r5, #4]
 8013d84:	60aa      	str	r2, [r5, #8]
 8013d86:	60eb      	str	r3, [r5, #12]
 8013d88:	8823      	ldrh	r3, [r4, #0]
 8013d8a:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish, "s,d,d,d,d,d,e");
 8013d8c:	687b      	ldr	r3, [r7, #4]
 8013d8e:	33d8      	adds	r3, #216	; 0xd8
 8013d90:	4aa6      	ldr	r2, [pc, #664]	; (801402c <problem_fetch+0x12d0c>)
 8013d92:	461c      	mov	r4, r3
 8013d94:	4613      	mov	r3, r2
 8013d96:	cb07      	ldmia	r3!, {r0, r1, r2}
 8013d98:	6020      	str	r0, [r4, #0]
 8013d9a:	6061      	str	r1, [r4, #4]
 8013d9c:	60a2      	str	r2, [r4, #8]
 8013d9e:	881b      	ldrh	r3, [r3, #0]
 8013da0:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade, "6B+");
 8013da2:	687b      	ldr	r3, [r7, #4]
 8013da4:	33cc      	adds	r3, #204	; 0xcc
 8013da6:	4aa2      	ldr	r2, [pc, #648]	; (8014030 <problem_fetch+0x12d10>)
 8013da8:	6810      	ldr	r0, [r2, #0]
 8013daa:	6018      	str	r0, [r3, #0]
			break;
 8013dac:	f006 bffe 	b.w	801adac <problem_fetch+0x19a8c>
		case 620 :
			strcpy(p->name,"CHEESE AND PICKLE");
 8013db0:	687b      	ldr	r3, [r7, #4]
 8013db2:	337c      	adds	r3, #124	; 0x7c
 8013db4:	4a9f      	ldr	r2, [pc, #636]	; (8014034 <problem_fetch+0x12d14>)
 8013db6:	461d      	mov	r5, r3
 8013db8:	4614      	mov	r4, r2
 8013dba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8013dbc:	6028      	str	r0, [r5, #0]
 8013dbe:	6069      	str	r1, [r5, #4]
 8013dc0:	60aa      	str	r2, [r5, #8]
 8013dc2:	60eb      	str	r3, [r5, #12]
 8013dc4:	8823      	ldrh	r3, [r4, #0]
 8013dc6:	822b      	strh	r3, [r5, #16]
			p->moveSize = 7;
 8013dc8:	687b      	ldr	r3, [r7, #4]
 8013dca:	2207      	movs	r2, #7
 8013dcc:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"E,E,B,E,A,E,A");
 8013dce:	687b      	ldr	r3, [r7, #4]
 8013dd0:	3340      	adds	r3, #64	; 0x40
 8013dd2:	4a99      	ldr	r2, [pc, #612]	; (8014038 <problem_fetch+0x12d18>)
 8013dd4:	461c      	mov	r4, r3
 8013dd6:	4613      	mov	r3, r2
 8013dd8:	cb07      	ldmia	r3!, {r0, r1, r2}
 8013dda:	6020      	str	r0, [r4, #0]
 8013ddc:	6061      	str	r1, [r4, #4]
 8013dde:	60a2      	str	r2, [r4, #8]
 8013de0:	881b      	ldrh	r3, [r3, #0]
 8013de2:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"6,9,10,12,14,16,18");
 8013de4:	687b      	ldr	r3, [r7, #4]
 8013de6:	3304      	adds	r3, #4
 8013de8:	4a94      	ldr	r2, [pc, #592]	; (801403c <problem_fetch+0x12d1c>)
 8013dea:	461d      	mov	r5, r3
 8013dec:	4614      	mov	r4, r2
 8013dee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8013df0:	6028      	str	r0, [r5, #0]
 8013df2:	6069      	str	r1, [r5, #4]
 8013df4:	60aa      	str	r2, [r5, #8]
 8013df6:	60eb      	str	r3, [r5, #12]
 8013df8:	8823      	ldrh	r3, [r4, #0]
 8013dfa:	78a2      	ldrb	r2, [r4, #2]
 8013dfc:	822b      	strh	r3, [r5, #16]
 8013dfe:	4613      	mov	r3, r2
 8013e00:	74ab      	strb	r3, [r5, #18]
			strcpy(p->startFinish, "s,d,d,d,d,d,e");
 8013e02:	687b      	ldr	r3, [r7, #4]
 8013e04:	33d8      	adds	r3, #216	; 0xd8
 8013e06:	4a89      	ldr	r2, [pc, #548]	; (801402c <problem_fetch+0x12d0c>)
 8013e08:	461c      	mov	r4, r3
 8013e0a:	4613      	mov	r3, r2
 8013e0c:	cb07      	ldmia	r3!, {r0, r1, r2}
 8013e0e:	6020      	str	r0, [r4, #0]
 8013e10:	6061      	str	r1, [r4, #4]
 8013e12:	60a2      	str	r2, [r4, #8]
 8013e14:	881b      	ldrh	r3, [r3, #0]
 8013e16:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade, "6C+");
 8013e18:	687b      	ldr	r3, [r7, #4]
 8013e1a:	33cc      	adds	r3, #204	; 0xcc
 8013e1c:	4a88      	ldr	r2, [pc, #544]	; (8014040 <problem_fetch+0x12d20>)
 8013e1e:	6810      	ldr	r0, [r2, #0]
 8013e20:	6018      	str	r0, [r3, #0]
			break;
 8013e22:	f006 bfc3 	b.w	801adac <problem_fetch+0x19a8c>
		case 621 :
			strcpy(p->name,"GJ2");
 8013e26:	687b      	ldr	r3, [r7, #4]
 8013e28:	337c      	adds	r3, #124	; 0x7c
 8013e2a:	4a86      	ldr	r2, [pc, #536]	; (8014044 <problem_fetch+0x12d24>)
 8013e2c:	6810      	ldr	r0, [r2, #0]
 8013e2e:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 8013e30:	687b      	ldr	r3, [r7, #4]
 8013e32:	2207      	movs	r2, #7
 8013e34:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"G,C,H,F,C,D,A");
 8013e36:	687b      	ldr	r3, [r7, #4]
 8013e38:	3340      	adds	r3, #64	; 0x40
 8013e3a:	4a83      	ldr	r2, [pc, #524]	; (8014048 <problem_fetch+0x12d28>)
 8013e3c:	461c      	mov	r4, r3
 8013e3e:	4613      	mov	r3, r2
 8013e40:	cb07      	ldmia	r3!, {r0, r1, r2}
 8013e42:	6020      	str	r0, [r4, #0]
 8013e44:	6061      	str	r1, [r4, #4]
 8013e46:	60a2      	str	r2, [r4, #8]
 8013e48:	881b      	ldrh	r3, [r3, #0]
 8013e4a:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,8,8,11,13,15,18");
 8013e4c:	687b      	ldr	r3, [r7, #4]
 8013e4e:	3304      	adds	r3, #4
 8013e50:	4a7e      	ldr	r2, [pc, #504]	; (801404c <problem_fetch+0x12d2c>)
 8013e52:	461d      	mov	r5, r3
 8013e54:	4614      	mov	r4, r2
 8013e56:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8013e58:	6028      	str	r0, [r5, #0]
 8013e5a:	6069      	str	r1, [r5, #4]
 8013e5c:	60aa      	str	r2, [r5, #8]
 8013e5e:	60eb      	str	r3, [r5, #12]
 8013e60:	8823      	ldrh	r3, [r4, #0]
 8013e62:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish, "s,d,d,d,d,d,e");
 8013e64:	687b      	ldr	r3, [r7, #4]
 8013e66:	33d8      	adds	r3, #216	; 0xd8
 8013e68:	4a70      	ldr	r2, [pc, #448]	; (801402c <problem_fetch+0x12d0c>)
 8013e6a:	461c      	mov	r4, r3
 8013e6c:	4613      	mov	r3, r2
 8013e6e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8013e70:	6020      	str	r0, [r4, #0]
 8013e72:	6061      	str	r1, [r4, #4]
 8013e74:	60a2      	str	r2, [r4, #8]
 8013e76:	881b      	ldrh	r3, [r3, #0]
 8013e78:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade, "6B+");
 8013e7a:	687b      	ldr	r3, [r7, #4]
 8013e7c:	33cc      	adds	r3, #204	; 0xcc
 8013e7e:	4a6c      	ldr	r2, [pc, #432]	; (8014030 <problem_fetch+0x12d10>)
 8013e80:	6810      	ldr	r0, [r2, #0]
 8013e82:	6018      	str	r0, [r3, #0]
			break;
 8013e84:	f006 bf92 	b.w	801adac <problem_fetch+0x19a8c>
		case 622 :
			strcpy(p->name,"WOA");
 8013e88:	687b      	ldr	r3, [r7, #4]
 8013e8a:	337c      	adds	r3, #124	; 0x7c
 8013e8c:	4a70      	ldr	r2, [pc, #448]	; (8014050 <problem_fetch+0x12d30>)
 8013e8e:	6810      	ldr	r0, [r2, #0]
 8013e90:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 8013e92:	687b      	ldr	r3, [r7, #4]
 8013e94:	2207      	movs	r2, #7
 8013e96:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"G,C,E,D,F,G,I");
 8013e98:	687b      	ldr	r3, [r7, #4]
 8013e9a:	3340      	adds	r3, #64	; 0x40
 8013e9c:	4a6d      	ldr	r2, [pc, #436]	; (8014054 <problem_fetch+0x12d34>)
 8013e9e:	461c      	mov	r4, r3
 8013ea0:	4613      	mov	r3, r2
 8013ea2:	cb07      	ldmia	r3!, {r0, r1, r2}
 8013ea4:	6020      	str	r0, [r4, #0]
 8013ea6:	6061      	str	r1, [r4, #4]
 8013ea8:	60a2      	str	r2, [r4, #8]
 8013eaa:	881b      	ldrh	r3, [r3, #0]
 8013eac:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,5,9,11,13,15,18");
 8013eae:	687b      	ldr	r3, [r7, #4]
 8013eb0:	3304      	adds	r3, #4
 8013eb2:	4a69      	ldr	r2, [pc, #420]	; (8014058 <problem_fetch+0x12d38>)
 8013eb4:	461d      	mov	r5, r3
 8013eb6:	4614      	mov	r4, r2
 8013eb8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8013eba:	6028      	str	r0, [r5, #0]
 8013ebc:	6069      	str	r1, [r5, #4]
 8013ebe:	60aa      	str	r2, [r5, #8]
 8013ec0:	60eb      	str	r3, [r5, #12]
 8013ec2:	8823      	ldrh	r3, [r4, #0]
 8013ec4:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish, "s,d,d,d,d,d,e");
 8013ec6:	687b      	ldr	r3, [r7, #4]
 8013ec8:	33d8      	adds	r3, #216	; 0xd8
 8013eca:	4a58      	ldr	r2, [pc, #352]	; (801402c <problem_fetch+0x12d0c>)
 8013ecc:	461c      	mov	r4, r3
 8013ece:	4613      	mov	r3, r2
 8013ed0:	cb07      	ldmia	r3!, {r0, r1, r2}
 8013ed2:	6020      	str	r0, [r4, #0]
 8013ed4:	6061      	str	r1, [r4, #4]
 8013ed6:	60a2      	str	r2, [r4, #8]
 8013ed8:	881b      	ldrh	r3, [r3, #0]
 8013eda:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade, "7A");
 8013edc:	687b      	ldr	r3, [r7, #4]
 8013ede:	33cc      	adds	r3, #204	; 0xcc
 8013ee0:	4a5e      	ldr	r2, [pc, #376]	; (801405c <problem_fetch+0x12d3c>)
 8013ee2:	8811      	ldrh	r1, [r2, #0]
 8013ee4:	7892      	ldrb	r2, [r2, #2]
 8013ee6:	8019      	strh	r1, [r3, #0]
 8013ee8:	709a      	strb	r2, [r3, #2]
			break;
 8013eea:	f006 bf5f 	b.w	801adac <problem_fetch+0x19a8c>
		case 623 :
			strcpy(p->name,"ATLANTIC SEA NETTLE");
 8013eee:	687b      	ldr	r3, [r7, #4]
 8013ef0:	337c      	adds	r3, #124	; 0x7c
 8013ef2:	4a5b      	ldr	r2, [pc, #364]	; (8014060 <problem_fetch+0x12d40>)
 8013ef4:	461d      	mov	r5, r3
 8013ef6:	4614      	mov	r4, r2
 8013ef8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8013efa:	6028      	str	r0, [r5, #0]
 8013efc:	6069      	str	r1, [r5, #4]
 8013efe:	60aa      	str	r2, [r5, #8]
 8013f00:	60eb      	str	r3, [r5, #12]
 8013f02:	6820      	ldr	r0, [r4, #0]
 8013f04:	6128      	str	r0, [r5, #16]
			p->moveSize = 6;
 8013f06:	687b      	ldr	r3, [r7, #4]
 8013f08:	2206      	movs	r2, #6
 8013f0a:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"E,C,F,B,D,A");
 8013f0c:	687b      	ldr	r3, [r7, #4]
 8013f0e:	3340      	adds	r3, #64	; 0x40
 8013f10:	4a54      	ldr	r2, [pc, #336]	; (8014064 <problem_fetch+0x12d44>)
 8013f12:	461c      	mov	r4, r3
 8013f14:	4613      	mov	r3, r2
 8013f16:	cb07      	ldmia	r3!, {r0, r1, r2}
 8013f18:	6020      	str	r0, [r4, #0]
 8013f1a:	6061      	str	r1, [r4, #4]
 8013f1c:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"6,8,11,12,15,18");
 8013f1e:	687b      	ldr	r3, [r7, #4]
 8013f20:	3304      	adds	r3, #4
 8013f22:	4a51      	ldr	r2, [pc, #324]	; (8014068 <problem_fetch+0x12d48>)
 8013f24:	461c      	mov	r4, r3
 8013f26:	4615      	mov	r5, r2
 8013f28:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8013f2a:	6020      	str	r0, [r4, #0]
 8013f2c:	6061      	str	r1, [r4, #4]
 8013f2e:	60a2      	str	r2, [r4, #8]
 8013f30:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish, "s,d,d,d,d,e");
 8013f32:	687b      	ldr	r3, [r7, #4]
 8013f34:	33d8      	adds	r3, #216	; 0xd8
 8013f36:	4a4d      	ldr	r2, [pc, #308]	; (801406c <problem_fetch+0x12d4c>)
 8013f38:	461c      	mov	r4, r3
 8013f3a:	4613      	mov	r3, r2
 8013f3c:	cb07      	ldmia	r3!, {r0, r1, r2}
 8013f3e:	6020      	str	r0, [r4, #0]
 8013f40:	6061      	str	r1, [r4, #4]
 8013f42:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade, "6C+");
 8013f44:	687b      	ldr	r3, [r7, #4]
 8013f46:	33cc      	adds	r3, #204	; 0xcc
 8013f48:	4a3d      	ldr	r2, [pc, #244]	; (8014040 <problem_fetch+0x12d20>)
 8013f4a:	6810      	ldr	r0, [r2, #0]
 8013f4c:	6018      	str	r0, [r3, #0]
			break;
 8013f4e:	f006 bf2d 	b.w	801adac <problem_fetch+0x19a8c>
		case 624 :
			strcpy(p->name,"5WL^4/(384EI)");
 8013f52:	687b      	ldr	r3, [r7, #4]
 8013f54:	337c      	adds	r3, #124	; 0x7c
 8013f56:	4a46      	ldr	r2, [pc, #280]	; (8014070 <problem_fetch+0x12d50>)
 8013f58:	461c      	mov	r4, r3
 8013f5a:	4613      	mov	r3, r2
 8013f5c:	cb07      	ldmia	r3!, {r0, r1, r2}
 8013f5e:	6020      	str	r0, [r4, #0]
 8013f60:	6061      	str	r1, [r4, #4]
 8013f62:	60a2      	str	r2, [r4, #8]
 8013f64:	881b      	ldrh	r3, [r3, #0]
 8013f66:	81a3      	strh	r3, [r4, #12]
			p->moveSize = 6;
 8013f68:	687b      	ldr	r3, [r7, #4]
 8013f6a:	2206      	movs	r2, #6
 8013f6c:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"J,H,F,A,B,A");
 8013f6e:	687b      	ldr	r3, [r7, #4]
 8013f70:	3340      	adds	r3, #64	; 0x40
 8013f72:	4a40      	ldr	r2, [pc, #256]	; (8014074 <problem_fetch+0x12d54>)
 8013f74:	461c      	mov	r4, r3
 8013f76:	4613      	mov	r3, r2
 8013f78:	cb07      	ldmia	r3!, {r0, r1, r2}
 8013f7a:	6020      	str	r0, [r4, #0]
 8013f7c:	6061      	str	r1, [r4, #4]
 8013f7e:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,8,11,14,15,18");
 8013f80:	687b      	ldr	r3, [r7, #4]
 8013f82:	3304      	adds	r3, #4
 8013f84:	4a3c      	ldr	r2, [pc, #240]	; (8014078 <problem_fetch+0x12d58>)
 8013f86:	461c      	mov	r4, r3
 8013f88:	4615      	mov	r5, r2
 8013f8a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8013f8c:	6020      	str	r0, [r4, #0]
 8013f8e:	6061      	str	r1, [r4, #4]
 8013f90:	60a2      	str	r2, [r4, #8]
 8013f92:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish, "s,d,d,d,d,e");
 8013f94:	687b      	ldr	r3, [r7, #4]
 8013f96:	33d8      	adds	r3, #216	; 0xd8
 8013f98:	4a34      	ldr	r2, [pc, #208]	; (801406c <problem_fetch+0x12d4c>)
 8013f9a:	461c      	mov	r4, r3
 8013f9c:	4613      	mov	r3, r2
 8013f9e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8013fa0:	6020      	str	r0, [r4, #0]
 8013fa2:	6061      	str	r1, [r4, #4]
 8013fa4:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade, "7C");
 8013fa6:	687b      	ldr	r3, [r7, #4]
 8013fa8:	33cc      	adds	r3, #204	; 0xcc
 8013faa:	4a34      	ldr	r2, [pc, #208]	; (801407c <problem_fetch+0x12d5c>)
 8013fac:	8811      	ldrh	r1, [r2, #0]
 8013fae:	7892      	ldrb	r2, [r2, #2]
 8013fb0:	8019      	strh	r1, [r3, #0]
 8013fb2:	709a      	strb	r2, [r3, #2]
			break;
 8013fb4:	f006 befa 	b.w	801adac <problem_fetch+0x19a8c>
		case 625 :
			strcpy(p->name,"MEK");
 8013fb8:	687b      	ldr	r3, [r7, #4]
 8013fba:	337c      	adds	r3, #124	; 0x7c
 8013fbc:	4a30      	ldr	r2, [pc, #192]	; (8014080 <problem_fetch+0x12d60>)
 8013fbe:	6810      	ldr	r0, [r2, #0]
 8013fc0:	6018      	str	r0, [r3, #0]
			p->moveSize = 8;
 8013fc2:	687b      	ldr	r3, [r7, #4]
 8013fc4:	2208      	movs	r2, #8
 8013fc6:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"G,H,D,B,D,G,E,I");
 8013fc8:	687b      	ldr	r3, [r7, #4]
 8013fca:	3340      	adds	r3, #64	; 0x40
 8013fcc:	4a2d      	ldr	r2, [pc, #180]	; (8014084 <problem_fetch+0x12d64>)
 8013fce:	461c      	mov	r4, r3
 8013fd0:	4615      	mov	r5, r2
 8013fd2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8013fd4:	6020      	str	r0, [r4, #0]
 8013fd6:	6061      	str	r1, [r4, #4]
 8013fd8:	60a2      	str	r2, [r4, #8]
 8013fda:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"10,13,11,6,7,4,16,18");
 8013fdc:	687b      	ldr	r3, [r7, #4]
 8013fde:	3304      	adds	r3, #4
 8013fe0:	4a29      	ldr	r2, [pc, #164]	; (8014088 <problem_fetch+0x12d68>)
 8013fe2:	461d      	mov	r5, r3
 8013fe4:	4614      	mov	r4, r2
 8013fe6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8013fe8:	6028      	str	r0, [r5, #0]
 8013fea:	6069      	str	r1, [r5, #4]
 8013fec:	60aa      	str	r2, [r5, #8]
 8013fee:	60eb      	str	r3, [r5, #12]
 8013ff0:	6820      	ldr	r0, [r4, #0]
 8013ff2:	6128      	str	r0, [r5, #16]
 8013ff4:	7923      	ldrb	r3, [r4, #4]
 8013ff6:	752b      	strb	r3, [r5, #20]
			strcpy(p->startFinish, "d,d,d,s,d,s,d,e");
 8013ff8:	687b      	ldr	r3, [r7, #4]
 8013ffa:	33d8      	adds	r3, #216	; 0xd8
 8013ffc:	4a23      	ldr	r2, [pc, #140]	; (801408c <problem_fetch+0x12d6c>)
 8013ffe:	461c      	mov	r4, r3
 8014000:	4615      	mov	r5, r2
 8014002:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8014004:	6020      	str	r0, [r4, #0]
 8014006:	6061      	str	r1, [r4, #4]
 8014008:	60a2      	str	r2, [r4, #8]
 801400a:	60e3      	str	r3, [r4, #12]
			strcpy(p->grade, "7A");
 801400c:	687b      	ldr	r3, [r7, #4]
 801400e:	33cc      	adds	r3, #204	; 0xcc
 8014010:	4a12      	ldr	r2, [pc, #72]	; (801405c <problem_fetch+0x12d3c>)
 8014012:	8811      	ldrh	r1, [r2, #0]
 8014014:	7892      	ldrb	r2, [r2, #2]
 8014016:	8019      	strh	r1, [r3, #0]
 8014018:	709a      	strb	r2, [r3, #2]
			break;
 801401a:	f006 bec7 	b.w	801adac <problem_fetch+0x19a8c>
 801401e:	bf00      	nop
 8014020:	08027e20 	.word	0x08027e20
 8014024:	08027e30 	.word	0x08027e30
 8014028:	08027e40 	.word	0x08027e40
 801402c:	08021494 	.word	0x08021494
 8014030:	080212b0 	.word	0x080212b0
 8014034:	08027e54 	.word	0x08027e54
 8014038:	08027e68 	.word	0x08027e68
 801403c:	08027e78 	.word	0x08027e78
 8014040:	080213a8 	.word	0x080213a8
 8014044:	08027e8c 	.word	0x08027e8c
 8014048:	08027e90 	.word	0x08027e90
 801404c:	08027ea0 	.word	0x08027ea0
 8014050:	08027eb4 	.word	0x08027eb4
 8014054:	08027eb8 	.word	0x08027eb8
 8014058:	08027ec8 	.word	0x08027ec8
 801405c:	080212f4 	.word	0x080212f4
 8014060:	08027edc 	.word	0x08027edc
 8014064:	08027ef0 	.word	0x08027ef0
 8014068:	08027efc 	.word	0x08027efc
 801406c:	0802139c 	.word	0x0802139c
 8014070:	08027f0c 	.word	0x08027f0c
 8014074:	08027f1c 	.word	0x08027f1c
 8014078:	08027f28 	.word	0x08027f28
 801407c:	0802158c 	.word	0x0802158c
 8014080:	08027f38 	.word	0x08027f38
 8014084:	08027f3c 	.word	0x08027f3c
 8014088:	08027f4c 	.word	0x08027f4c
 801408c:	08027f64 	.word	0x08027f64
		case 626 :
			strcpy(p->name,"LOPPULÄMPPÄ");
 8014090:	687b      	ldr	r3, [r7, #4]
 8014092:	337c      	adds	r3, #124	; 0x7c
 8014094:	4abd      	ldr	r2, [pc, #756]	; (801438c <problem_fetch+0x1306c>)
 8014096:	461c      	mov	r4, r3
 8014098:	4613      	mov	r3, r2
 801409a:	cb07      	ldmia	r3!, {r0, r1, r2}
 801409c:	6020      	str	r0, [r4, #0]
 801409e:	6061      	str	r1, [r4, #4]
 80140a0:	60a2      	str	r2, [r4, #8]
 80140a2:	881b      	ldrh	r3, [r3, #0]
 80140a4:	81a3      	strh	r3, [r4, #12]
			p->moveSize = 6;
 80140a6:	687b      	ldr	r3, [r7, #4]
 80140a8:	2206      	movs	r2, #6
 80140aa:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"J,E,E,D,G,I");
 80140ac:	687b      	ldr	r3, [r7, #4]
 80140ae:	3340      	adds	r3, #64	; 0x40
 80140b0:	4ab7      	ldr	r2, [pc, #732]	; (8014390 <problem_fetch+0x13070>)
 80140b2:	461c      	mov	r4, r3
 80140b4:	4613      	mov	r3, r2
 80140b6:	cb07      	ldmia	r3!, {r0, r1, r2}
 80140b8:	6020      	str	r0, [r4, #0]
 80140ba:	6061      	str	r1, [r4, #4]
 80140bc:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,8,12,11,17,18");
 80140be:	687b      	ldr	r3, [r7, #4]
 80140c0:	3304      	adds	r3, #4
 80140c2:	4ab4      	ldr	r2, [pc, #720]	; (8014394 <problem_fetch+0x13074>)
 80140c4:	461c      	mov	r4, r3
 80140c6:	4615      	mov	r5, r2
 80140c8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80140ca:	6020      	str	r0, [r4, #0]
 80140cc:	6061      	str	r1, [r4, #4]
 80140ce:	60a2      	str	r2, [r4, #8]
 80140d0:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish, "s,d,d,d,d,e");
 80140d2:	687b      	ldr	r3, [r7, #4]
 80140d4:	33d8      	adds	r3, #216	; 0xd8
 80140d6:	4ab0      	ldr	r2, [pc, #704]	; (8014398 <problem_fetch+0x13078>)
 80140d8:	461c      	mov	r4, r3
 80140da:	4613      	mov	r3, r2
 80140dc:	cb07      	ldmia	r3!, {r0, r1, r2}
 80140de:	6020      	str	r0, [r4, #0]
 80140e0:	6061      	str	r1, [r4, #4]
 80140e2:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade, "7A+");
 80140e4:	687b      	ldr	r3, [r7, #4]
 80140e6:	33cc      	adds	r3, #204	; 0xcc
 80140e8:	4aac      	ldr	r2, [pc, #688]	; (801439c <problem_fetch+0x1307c>)
 80140ea:	6810      	ldr	r0, [r2, #0]
 80140ec:	6018      	str	r0, [r3, #0]
			break;
 80140ee:	f006 be5d 	b.w	801adac <problem_fetch+0x19a8c>
		case 627 :
			strcpy(p->name,"COSTA NEGRA");
 80140f2:	687b      	ldr	r3, [r7, #4]
 80140f4:	337c      	adds	r3, #124	; 0x7c
 80140f6:	4aaa      	ldr	r2, [pc, #680]	; (80143a0 <problem_fetch+0x13080>)
 80140f8:	461c      	mov	r4, r3
 80140fa:	4613      	mov	r3, r2
 80140fc:	cb07      	ldmia	r3!, {r0, r1, r2}
 80140fe:	6020      	str	r0, [r4, #0]
 8014100:	6061      	str	r1, [r4, #4]
 8014102:	60a2      	str	r2, [r4, #8]
			p->moveSize = 9;
 8014104:	687b      	ldr	r3, [r7, #4]
 8014106:	2209      	movs	r2, #9
 8014108:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"G,E,E,B,E,C,I,G,I");
 801410a:	687b      	ldr	r3, [r7, #4]
 801410c:	3340      	adds	r3, #64	; 0x40
 801410e:	4aa5      	ldr	r2, [pc, #660]	; (80143a4 <problem_fetch+0x13084>)
 8014110:	461d      	mov	r5, r3
 8014112:	4614      	mov	r4, r2
 8014114:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8014116:	6028      	str	r0, [r5, #0]
 8014118:	6069      	str	r1, [r5, #4]
 801411a:	60aa      	str	r2, [r5, #8]
 801411c:	60eb      	str	r3, [r5, #12]
 801411e:	8823      	ldrh	r3, [r4, #0]
 8014120:	822b      	strh	r3, [r5, #16]
			strcpy(p->moveNumbers,"4,6,8,10,12,13,14,15,18");
 8014122:	687b      	ldr	r3, [r7, #4]
 8014124:	3304      	adds	r3, #4
 8014126:	4aa0      	ldr	r2, [pc, #640]	; (80143a8 <problem_fetch+0x13088>)
 8014128:	461d      	mov	r5, r3
 801412a:	4614      	mov	r4, r2
 801412c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801412e:	6028      	str	r0, [r5, #0]
 8014130:	6069      	str	r1, [r5, #4]
 8014132:	60aa      	str	r2, [r5, #8]
 8014134:	60eb      	str	r3, [r5, #12]
 8014136:	cc03      	ldmia	r4!, {r0, r1}
 8014138:	6128      	str	r0, [r5, #16]
 801413a:	6169      	str	r1, [r5, #20]
			strcpy(p->startFinish, "s,s,d,d,d,d,d,d,e");
 801413c:	687b      	ldr	r3, [r7, #4]
 801413e:	33d8      	adds	r3, #216	; 0xd8
 8014140:	4a9a      	ldr	r2, [pc, #616]	; (80143ac <problem_fetch+0x1308c>)
 8014142:	461d      	mov	r5, r3
 8014144:	4614      	mov	r4, r2
 8014146:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8014148:	6028      	str	r0, [r5, #0]
 801414a:	6069      	str	r1, [r5, #4]
 801414c:	60aa      	str	r2, [r5, #8]
 801414e:	60eb      	str	r3, [r5, #12]
 8014150:	8823      	ldrh	r3, [r4, #0]
 8014152:	822b      	strh	r3, [r5, #16]
			strcpy(p->grade, "6C");
 8014154:	687b      	ldr	r3, [r7, #4]
 8014156:	33cc      	adds	r3, #204	; 0xcc
 8014158:	4a95      	ldr	r2, [pc, #596]	; (80143b0 <problem_fetch+0x13090>)
 801415a:	8811      	ldrh	r1, [r2, #0]
 801415c:	7892      	ldrb	r2, [r2, #2]
 801415e:	8019      	strh	r1, [r3, #0]
 8014160:	709a      	strb	r2, [r3, #2]
			break;
 8014162:	f006 be23 	b.w	801adac <problem_fetch+0x19a8c>
		case 628 :
			strcpy(p->name,"SALMON SNAKE");
 8014166:	687b      	ldr	r3, [r7, #4]
 8014168:	337c      	adds	r3, #124	; 0x7c
 801416a:	4a92      	ldr	r2, [pc, #584]	; (80143b4 <problem_fetch+0x13094>)
 801416c:	461c      	mov	r4, r3
 801416e:	4613      	mov	r3, r2
 8014170:	cb07      	ldmia	r3!, {r0, r1, r2}
 8014172:	6020      	str	r0, [r4, #0]
 8014174:	6061      	str	r1, [r4, #4]
 8014176:	60a2      	str	r2, [r4, #8]
 8014178:	781b      	ldrb	r3, [r3, #0]
 801417a:	7323      	strb	r3, [r4, #12]
			p->moveSize = 5;
 801417c:	687b      	ldr	r3, [r7, #4]
 801417e:	2205      	movs	r2, #5
 8014180:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"J,G,F,D,A");
 8014182:	687b      	ldr	r3, [r7, #4]
 8014184:	3340      	adds	r3, #64	; 0x40
 8014186:	498c      	ldr	r1, [pc, #560]	; (80143b8 <problem_fetch+0x13098>)
 8014188:	461a      	mov	r2, r3
 801418a:	460b      	mov	r3, r1
 801418c:	cb03      	ldmia	r3!, {r0, r1}
 801418e:	6010      	str	r0, [r2, #0]
 8014190:	6051      	str	r1, [r2, #4]
 8014192:	881b      	ldrh	r3, [r3, #0]
 8014194:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"5,9,11,15,18");
 8014196:	687b      	ldr	r3, [r7, #4]
 8014198:	3304      	adds	r3, #4
 801419a:	4a88      	ldr	r2, [pc, #544]	; (80143bc <problem_fetch+0x1309c>)
 801419c:	461c      	mov	r4, r3
 801419e:	4613      	mov	r3, r2
 80141a0:	cb07      	ldmia	r3!, {r0, r1, r2}
 80141a2:	6020      	str	r0, [r4, #0]
 80141a4:	6061      	str	r1, [r4, #4]
 80141a6:	60a2      	str	r2, [r4, #8]
 80141a8:	781b      	ldrb	r3, [r3, #0]
 80141aa:	7323      	strb	r3, [r4, #12]
			strcpy(p->startFinish, "s,d,d,d,e");
 80141ac:	687b      	ldr	r3, [r7, #4]
 80141ae:	33d8      	adds	r3, #216	; 0xd8
 80141b0:	4983      	ldr	r1, [pc, #524]	; (80143c0 <problem_fetch+0x130a0>)
 80141b2:	461a      	mov	r2, r3
 80141b4:	460b      	mov	r3, r1
 80141b6:	cb03      	ldmia	r3!, {r0, r1}
 80141b8:	6010      	str	r0, [r2, #0]
 80141ba:	6051      	str	r1, [r2, #4]
 80141bc:	881b      	ldrh	r3, [r3, #0]
 80141be:	8113      	strh	r3, [r2, #8]
			strcpy(p->grade, "7A");
 80141c0:	687b      	ldr	r3, [r7, #4]
 80141c2:	33cc      	adds	r3, #204	; 0xcc
 80141c4:	4a7f      	ldr	r2, [pc, #508]	; (80143c4 <problem_fetch+0x130a4>)
 80141c6:	8811      	ldrh	r1, [r2, #0]
 80141c8:	7892      	ldrb	r2, [r2, #2]
 80141ca:	8019      	strh	r1, [r3, #0]
 80141cc:	709a      	strb	r2, [r3, #2]
			break;
 80141ce:	f006 bded 	b.w	801adac <problem_fetch+0x19a8c>
		case 629 :
			strcpy(p->name,"FOUR");
 80141d2:	687b      	ldr	r3, [r7, #4]
 80141d4:	337c      	adds	r3, #124	; 0x7c
 80141d6:	4a7c      	ldr	r2, [pc, #496]	; (80143c8 <problem_fetch+0x130a8>)
 80141d8:	6810      	ldr	r0, [r2, #0]
 80141da:	6018      	str	r0, [r3, #0]
 80141dc:	7912      	ldrb	r2, [r2, #4]
 80141de:	711a      	strb	r2, [r3, #4]
			p->moveSize = 7;
 80141e0:	687b      	ldr	r3, [r7, #4]
 80141e2:	2207      	movs	r2, #7
 80141e4:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"C,G,E,D,I,H,I");
 80141e6:	687b      	ldr	r3, [r7, #4]
 80141e8:	3340      	adds	r3, #64	; 0x40
 80141ea:	4a78      	ldr	r2, [pc, #480]	; (80143cc <problem_fetch+0x130ac>)
 80141ec:	461c      	mov	r4, r3
 80141ee:	4613      	mov	r3, r2
 80141f0:	cb07      	ldmia	r3!, {r0, r1, r2}
 80141f2:	6020      	str	r0, [r4, #0]
 80141f4:	6061      	str	r1, [r4, #4]
 80141f6:	60a2      	str	r2, [r4, #8]
 80141f8:	881b      	ldrh	r3, [r3, #0]
 80141fa:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,4,9,11,14,16,18");
 80141fc:	687b      	ldr	r3, [r7, #4]
 80141fe:	3304      	adds	r3, #4
 8014200:	4a73      	ldr	r2, [pc, #460]	; (80143d0 <problem_fetch+0x130b0>)
 8014202:	461d      	mov	r5, r3
 8014204:	4614      	mov	r4, r2
 8014206:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8014208:	6028      	str	r0, [r5, #0]
 801420a:	6069      	str	r1, [r5, #4]
 801420c:	60aa      	str	r2, [r5, #8]
 801420e:	60eb      	str	r3, [r5, #12]
 8014210:	8823      	ldrh	r3, [r4, #0]
 8014212:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish, "s,s,d,d,d,d,e");
 8014214:	687b      	ldr	r3, [r7, #4]
 8014216:	33d8      	adds	r3, #216	; 0xd8
 8014218:	4a6e      	ldr	r2, [pc, #440]	; (80143d4 <problem_fetch+0x130b4>)
 801421a:	461c      	mov	r4, r3
 801421c:	4613      	mov	r3, r2
 801421e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8014220:	6020      	str	r0, [r4, #0]
 8014222:	6061      	str	r1, [r4, #4]
 8014224:	60a2      	str	r2, [r4, #8]
 8014226:	881b      	ldrh	r3, [r3, #0]
 8014228:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade, "7A");
 801422a:	687b      	ldr	r3, [r7, #4]
 801422c:	33cc      	adds	r3, #204	; 0xcc
 801422e:	4a65      	ldr	r2, [pc, #404]	; (80143c4 <problem_fetch+0x130a4>)
 8014230:	8811      	ldrh	r1, [r2, #0]
 8014232:	7892      	ldrb	r2, [r2, #2]
 8014234:	8019      	strh	r1, [r3, #0]
 8014236:	709a      	strb	r2, [r3, #2]
			break;
 8014238:	f006 bdb8 	b.w	801adac <problem_fetch+0x19a8c>
		case 63 :
			strcpy(p->name,"KICKER");
 801423c:	687b      	ldr	r3, [r7, #4]
 801423e:	337c      	adds	r3, #124	; 0x7c
 8014240:	4a65      	ldr	r2, [pc, #404]	; (80143d8 <problem_fetch+0x130b8>)
 8014242:	6810      	ldr	r0, [r2, #0]
 8014244:	6018      	str	r0, [r3, #0]
 8014246:	8891      	ldrh	r1, [r2, #4]
 8014248:	7992      	ldrb	r2, [r2, #6]
 801424a:	8099      	strh	r1, [r3, #4]
 801424c:	719a      	strb	r2, [r3, #6]
			p->moveSize = 6;
 801424e:	687b      	ldr	r3, [r7, #4]
 8014250:	2206      	movs	r2, #6
 8014252:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"G,D,E,B,E,D");
 8014254:	687b      	ldr	r3, [r7, #4]
 8014256:	3340      	adds	r3, #64	; 0x40
 8014258:	4a60      	ldr	r2, [pc, #384]	; (80143dc <problem_fetch+0x130bc>)
 801425a:	461c      	mov	r4, r3
 801425c:	4613      	mov	r3, r2
 801425e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8014260:	6020      	str	r0, [r4, #0]
 8014262:	6061      	str	r1, [r4, #4]
 8014264:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,7,9,12,14,18");
 8014266:	687b      	ldr	r3, [r7, #4]
 8014268:	3304      	adds	r3, #4
 801426a:	4a5d      	ldr	r2, [pc, #372]	; (80143e0 <problem_fetch+0x130c0>)
 801426c:	461c      	mov	r4, r3
 801426e:	4613      	mov	r3, r2
 8014270:	cb07      	ldmia	r3!, {r0, r1, r2}
 8014272:	6020      	str	r0, [r4, #0]
 8014274:	6061      	str	r1, [r4, #4]
 8014276:	60a2      	str	r2, [r4, #8]
 8014278:	881a      	ldrh	r2, [r3, #0]
 801427a:	789b      	ldrb	r3, [r3, #2]
 801427c:	81a2      	strh	r2, [r4, #12]
 801427e:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish, "s,d,d,d,d,e");
 8014280:	687b      	ldr	r3, [r7, #4]
 8014282:	33d8      	adds	r3, #216	; 0xd8
 8014284:	4a44      	ldr	r2, [pc, #272]	; (8014398 <problem_fetch+0x13078>)
 8014286:	461c      	mov	r4, r3
 8014288:	4613      	mov	r3, r2
 801428a:	cb07      	ldmia	r3!, {r0, r1, r2}
 801428c:	6020      	str	r0, [r4, #0]
 801428e:	6061      	str	r1, [r4, #4]
 8014290:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade, "7A+");
 8014292:	687b      	ldr	r3, [r7, #4]
 8014294:	33cc      	adds	r3, #204	; 0xcc
 8014296:	4a41      	ldr	r2, [pc, #260]	; (801439c <problem_fetch+0x1307c>)
 8014298:	6810      	ldr	r0, [r2, #0]
 801429a:	6018      	str	r0, [r3, #0]
			break;
 801429c:	f006 bd86 	b.w	801adac <problem_fetch+0x19a8c>
		case 630 :
			strcpy(p->name,"CAN’T REMEMBER THE NAME");
 80142a0:	687b      	ldr	r3, [r7, #4]
 80142a2:	337c      	adds	r3, #124	; 0x7c
 80142a4:	4a4f      	ldr	r2, [pc, #316]	; (80143e4 <problem_fetch+0x130c4>)
 80142a6:	461d      	mov	r5, r3
 80142a8:	4614      	mov	r4, r2
 80142aa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80142ac:	6028      	str	r0, [r5, #0]
 80142ae:	6069      	str	r1, [r5, #4]
 80142b0:	60aa      	str	r2, [r5, #8]
 80142b2:	60eb      	str	r3, [r5, #12]
 80142b4:	cc03      	ldmia	r4!, {r0, r1}
 80142b6:	6128      	str	r0, [r5, #16]
 80142b8:	6169      	str	r1, [r5, #20]
 80142ba:	8823      	ldrh	r3, [r4, #0]
 80142bc:	832b      	strh	r3, [r5, #24]
			p->moveSize = 7;
 80142be:	687b      	ldr	r3, [r7, #4]
 80142c0:	2207      	movs	r2, #7
 80142c2:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"E,E,I,G,D,E,A");
 80142c4:	687b      	ldr	r3, [r7, #4]
 80142c6:	3340      	adds	r3, #64	; 0x40
 80142c8:	4a47      	ldr	r2, [pc, #284]	; (80143e8 <problem_fetch+0x130c8>)
 80142ca:	461c      	mov	r4, r3
 80142cc:	4613      	mov	r3, r2
 80142ce:	cb07      	ldmia	r3!, {r0, r1, r2}
 80142d0:	6020      	str	r0, [r4, #0]
 80142d2:	6061      	str	r1, [r4, #4]
 80142d4:	60a2      	str	r2, [r4, #8]
 80142d6:	881b      	ldrh	r3, [r3, #0]
 80142d8:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"6,8,10,6,11,16,18");
 80142da:	687b      	ldr	r3, [r7, #4]
 80142dc:	3304      	adds	r3, #4
 80142de:	4a43      	ldr	r2, [pc, #268]	; (80143ec <problem_fetch+0x130cc>)
 80142e0:	461d      	mov	r5, r3
 80142e2:	4614      	mov	r4, r2
 80142e4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80142e6:	6028      	str	r0, [r5, #0]
 80142e8:	6069      	str	r1, [r5, #4]
 80142ea:	60aa      	str	r2, [r5, #8]
 80142ec:	60eb      	str	r3, [r5, #12]
 80142ee:	8823      	ldrh	r3, [r4, #0]
 80142f0:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish, "s,d,d,s,d,d,e");
 80142f2:	687b      	ldr	r3, [r7, #4]
 80142f4:	33d8      	adds	r3, #216	; 0xd8
 80142f6:	4a3e      	ldr	r2, [pc, #248]	; (80143f0 <problem_fetch+0x130d0>)
 80142f8:	461c      	mov	r4, r3
 80142fa:	4613      	mov	r3, r2
 80142fc:	cb07      	ldmia	r3!, {r0, r1, r2}
 80142fe:	6020      	str	r0, [r4, #0]
 8014300:	6061      	str	r1, [r4, #4]
 8014302:	60a2      	str	r2, [r4, #8]
 8014304:	881b      	ldrh	r3, [r3, #0]
 8014306:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade, "7A");
 8014308:	687b      	ldr	r3, [r7, #4]
 801430a:	33cc      	adds	r3, #204	; 0xcc
 801430c:	4a2d      	ldr	r2, [pc, #180]	; (80143c4 <problem_fetch+0x130a4>)
 801430e:	8811      	ldrh	r1, [r2, #0]
 8014310:	7892      	ldrb	r2, [r2, #2]
 8014312:	8019      	strh	r1, [r3, #0]
 8014314:	709a      	strb	r2, [r3, #2]
			break;
 8014316:	f006 bd49 	b.w	801adac <problem_fetch+0x19a8c>
		case 631 :
			strcpy(p->name,"FREAKING MAIMED");
 801431a:	687b      	ldr	r3, [r7, #4]
 801431c:	337c      	adds	r3, #124	; 0x7c
 801431e:	4a35      	ldr	r2, [pc, #212]	; (80143f4 <problem_fetch+0x130d4>)
 8014320:	461c      	mov	r4, r3
 8014322:	4615      	mov	r5, r2
 8014324:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8014326:	6020      	str	r0, [r4, #0]
 8014328:	6061      	str	r1, [r4, #4]
 801432a:	60a2      	str	r2, [r4, #8]
 801432c:	60e3      	str	r3, [r4, #12]
			p->moveSize = 7;
 801432e:	687b      	ldr	r3, [r7, #4]
 8014330:	2207      	movs	r2, #7
 8014332:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"J,G,E,C,G,H,I");
 8014334:	687b      	ldr	r3, [r7, #4]
 8014336:	3340      	adds	r3, #64	; 0x40
 8014338:	4a2f      	ldr	r2, [pc, #188]	; (80143f8 <problem_fetch+0x130d8>)
 801433a:	461c      	mov	r4, r3
 801433c:	4613      	mov	r3, r2
 801433e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8014340:	6020      	str	r0, [r4, #0]
 8014342:	6061      	str	r1, [r4, #4]
 8014344:	60a2      	str	r2, [r4, #8]
 8014346:	881b      	ldrh	r3, [r3, #0]
 8014348:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,9,9,13,17,16,18");
 801434a:	687b      	ldr	r3, [r7, #4]
 801434c:	3304      	adds	r3, #4
 801434e:	4a2b      	ldr	r2, [pc, #172]	; (80143fc <problem_fetch+0x130dc>)
 8014350:	461d      	mov	r5, r3
 8014352:	4614      	mov	r4, r2
 8014354:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8014356:	6028      	str	r0, [r5, #0]
 8014358:	6069      	str	r1, [r5, #4]
 801435a:	60aa      	str	r2, [r5, #8]
 801435c:	60eb      	str	r3, [r5, #12]
 801435e:	8823      	ldrh	r3, [r4, #0]
 8014360:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish, "s,d,d,d,d,d,e");
 8014362:	687b      	ldr	r3, [r7, #4]
 8014364:	33d8      	adds	r3, #216	; 0xd8
 8014366:	4a26      	ldr	r2, [pc, #152]	; (8014400 <problem_fetch+0x130e0>)
 8014368:	461c      	mov	r4, r3
 801436a:	4613      	mov	r3, r2
 801436c:	cb07      	ldmia	r3!, {r0, r1, r2}
 801436e:	6020      	str	r0, [r4, #0]
 8014370:	6061      	str	r1, [r4, #4]
 8014372:	60a2      	str	r2, [r4, #8]
 8014374:	881b      	ldrh	r3, [r3, #0]
 8014376:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade, "7C");
 8014378:	687b      	ldr	r3, [r7, #4]
 801437a:	33cc      	adds	r3, #204	; 0xcc
 801437c:	4a21      	ldr	r2, [pc, #132]	; (8014404 <problem_fetch+0x130e4>)
 801437e:	8811      	ldrh	r1, [r2, #0]
 8014380:	7892      	ldrb	r2, [r2, #2]
 8014382:	8019      	strh	r1, [r3, #0]
 8014384:	709a      	strb	r2, [r3, #2]
			break;
 8014386:	f006 bd11 	b.w	801adac <problem_fetch+0x19a8c>
 801438a:	bf00      	nop
 801438c:	08027f74 	.word	0x08027f74
 8014390:	08027f84 	.word	0x08027f84
 8014394:	08027f90 	.word	0x08027f90
 8014398:	0802139c 	.word	0x0802139c
 801439c:	08021424 	.word	0x08021424
 80143a0:	08027fa0 	.word	0x08027fa0
 80143a4:	08027fac 	.word	0x08027fac
 80143a8:	08027fc0 	.word	0x08027fc0
 80143ac:	0802187c 	.word	0x0802187c
 80143b0:	08021370 	.word	0x08021370
 80143b4:	08027fd8 	.word	0x08027fd8
 80143b8:	08027fe8 	.word	0x08027fe8
 80143bc:	08027ff4 	.word	0x08027ff4
 80143c0:	08021320 	.word	0x08021320
 80143c4:	080212f4 	.word	0x080212f4
 80143c8:	08028004 	.word	0x08028004
 80143cc:	0802800c 	.word	0x0802800c
 80143d0:	0802801c 	.word	0x0802801c
 80143d4:	080212a0 	.word	0x080212a0
 80143d8:	08028030 	.word	0x08028030
 80143dc:	08028038 	.word	0x08028038
 80143e0:	08028044 	.word	0x08028044
 80143e4:	08028054 	.word	0x08028054
 80143e8:	08028070 	.word	0x08028070
 80143ec:	08028080 	.word	0x08028080
 80143f0:	08026be8 	.word	0x08026be8
 80143f4:	08028094 	.word	0x08028094
 80143f8:	080280a4 	.word	0x080280a4
 80143fc:	080280b4 	.word	0x080280b4
 8014400:	08021494 	.word	0x08021494
 8014404:	0802158c 	.word	0x0802158c
		case 632 :
			strcpy(p->name,"BLACKSWING");
 8014408:	687b      	ldr	r3, [r7, #4]
 801440a:	337c      	adds	r3, #124	; 0x7c
 801440c:	49c1      	ldr	r1, [pc, #772]	; (8014714 <problem_fetch+0x133f4>)
 801440e:	461a      	mov	r2, r3
 8014410:	460b      	mov	r3, r1
 8014412:	cb03      	ldmia	r3!, {r0, r1}
 8014414:	6010      	str	r0, [r2, #0]
 8014416:	6051      	str	r1, [r2, #4]
 8014418:	8819      	ldrh	r1, [r3, #0]
 801441a:	789b      	ldrb	r3, [r3, #2]
 801441c:	8111      	strh	r1, [r2, #8]
 801441e:	7293      	strb	r3, [r2, #10]
			p->moveSize = 7;
 8014420:	687b      	ldr	r3, [r7, #4]
 8014422:	2207      	movs	r2, #7
 8014424:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"C,B,A,D,C,E,D");
 8014426:	687b      	ldr	r3, [r7, #4]
 8014428:	3340      	adds	r3, #64	; 0x40
 801442a:	4abb      	ldr	r2, [pc, #748]	; (8014718 <problem_fetch+0x133f8>)
 801442c:	461c      	mov	r4, r3
 801442e:	4613      	mov	r3, r2
 8014430:	cb07      	ldmia	r3!, {r0, r1, r2}
 8014432:	6020      	str	r0, [r4, #0]
 8014434:	6061      	str	r1, [r4, #4]
 8014436:	60a2      	str	r2, [r4, #8]
 8014438:	881b      	ldrh	r3, [r3, #0]
 801443a:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,6,9,11,13,14,18");
 801443c:	687b      	ldr	r3, [r7, #4]
 801443e:	3304      	adds	r3, #4
 8014440:	4ab6      	ldr	r2, [pc, #728]	; (801471c <problem_fetch+0x133fc>)
 8014442:	461d      	mov	r5, r3
 8014444:	4614      	mov	r4, r2
 8014446:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8014448:	6028      	str	r0, [r5, #0]
 801444a:	6069      	str	r1, [r5, #4]
 801444c:	60aa      	str	r2, [r5, #8]
 801444e:	60eb      	str	r3, [r5, #12]
 8014450:	8823      	ldrh	r3, [r4, #0]
 8014452:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish, "s,s,d,d,d,d,e");
 8014454:	687b      	ldr	r3, [r7, #4]
 8014456:	33d8      	adds	r3, #216	; 0xd8
 8014458:	4ab1      	ldr	r2, [pc, #708]	; (8014720 <problem_fetch+0x13400>)
 801445a:	461c      	mov	r4, r3
 801445c:	4613      	mov	r3, r2
 801445e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8014460:	6020      	str	r0, [r4, #0]
 8014462:	6061      	str	r1, [r4, #4]
 8014464:	60a2      	str	r2, [r4, #8]
 8014466:	881b      	ldrh	r3, [r3, #0]
 8014468:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade, "8A");
 801446a:	687b      	ldr	r3, [r7, #4]
 801446c:	33cc      	adds	r3, #204	; 0xcc
 801446e:	4aad      	ldr	r2, [pc, #692]	; (8014724 <problem_fetch+0x13404>)
 8014470:	8811      	ldrh	r1, [r2, #0]
 8014472:	7892      	ldrb	r2, [r2, #2]
 8014474:	8019      	strh	r1, [r3, #0]
 8014476:	709a      	strb	r2, [r3, #2]
			break;
 8014478:	f006 bc98 	b.w	801adac <problem_fetch+0x19a8c>
		case 633 :
			strcpy(p->name,"MÖRCSÖG");
 801447c:	687b      	ldr	r3, [r7, #4]
 801447e:	337c      	adds	r3, #124	; 0x7c
 8014480:	49a9      	ldr	r1, [pc, #676]	; (8014728 <problem_fetch+0x13408>)
 8014482:	461a      	mov	r2, r3
 8014484:	460b      	mov	r3, r1
 8014486:	cb03      	ldmia	r3!, {r0, r1}
 8014488:	6010      	str	r0, [r2, #0]
 801448a:	6051      	str	r1, [r2, #4]
 801448c:	881b      	ldrh	r3, [r3, #0]
 801448e:	8113      	strh	r3, [r2, #8]
			p->moveSize = 6;
 8014490:	687b      	ldr	r3, [r7, #4]
 8014492:	2206      	movs	r2, #6
 8014494:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"J,E,F,E,G,D");
 8014496:	687b      	ldr	r3, [r7, #4]
 8014498:	3340      	adds	r3, #64	; 0x40
 801449a:	4aa4      	ldr	r2, [pc, #656]	; (801472c <problem_fetch+0x1340c>)
 801449c:	461c      	mov	r4, r3
 801449e:	4613      	mov	r3, r2
 80144a0:	cb07      	ldmia	r3!, {r0, r1, r2}
 80144a2:	6020      	str	r0, [r4, #0]
 80144a4:	6061      	str	r1, [r4, #4]
 80144a6:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,8,11,14,15,18");
 80144a8:	687b      	ldr	r3, [r7, #4]
 80144aa:	3304      	adds	r3, #4
 80144ac:	4aa0      	ldr	r2, [pc, #640]	; (8014730 <problem_fetch+0x13410>)
 80144ae:	461c      	mov	r4, r3
 80144b0:	4615      	mov	r5, r2
 80144b2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80144b4:	6020      	str	r0, [r4, #0]
 80144b6:	6061      	str	r1, [r4, #4]
 80144b8:	60a2      	str	r2, [r4, #8]
 80144ba:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish, "s,d,d,d,d,e");
 80144bc:	687b      	ldr	r3, [r7, #4]
 80144be:	33d8      	adds	r3, #216	; 0xd8
 80144c0:	4a9c      	ldr	r2, [pc, #624]	; (8014734 <problem_fetch+0x13414>)
 80144c2:	461c      	mov	r4, r3
 80144c4:	4613      	mov	r3, r2
 80144c6:	cb07      	ldmia	r3!, {r0, r1, r2}
 80144c8:	6020      	str	r0, [r4, #0]
 80144ca:	6061      	str	r1, [r4, #4]
 80144cc:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade, "7B");
 80144ce:	687b      	ldr	r3, [r7, #4]
 80144d0:	33cc      	adds	r3, #204	; 0xcc
 80144d2:	4a99      	ldr	r2, [pc, #612]	; (8014738 <problem_fetch+0x13418>)
 80144d4:	8811      	ldrh	r1, [r2, #0]
 80144d6:	7892      	ldrb	r2, [r2, #2]
 80144d8:	8019      	strh	r1, [r3, #0]
 80144da:	709a      	strb	r2, [r3, #2]
			break;
 80144dc:	f006 bc66 	b.w	801adac <problem_fetch+0x19a8c>
		case 634 :
			strcpy(p->name,"OLD SCHOOL BLACK");
 80144e0:	687b      	ldr	r3, [r7, #4]
 80144e2:	337c      	adds	r3, #124	; 0x7c
 80144e4:	4a95      	ldr	r2, [pc, #596]	; (801473c <problem_fetch+0x1341c>)
 80144e6:	461d      	mov	r5, r3
 80144e8:	4614      	mov	r4, r2
 80144ea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80144ec:	6028      	str	r0, [r5, #0]
 80144ee:	6069      	str	r1, [r5, #4]
 80144f0:	60aa      	str	r2, [r5, #8]
 80144f2:	60eb      	str	r3, [r5, #12]
 80144f4:	7823      	ldrb	r3, [r4, #0]
 80144f6:	742b      	strb	r3, [r5, #16]
			p->moveSize = 6;
 80144f8:	687b      	ldr	r3, [r7, #4]
 80144fa:	2206      	movs	r2, #6
 80144fc:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"G,H,I,G,G,D");
 80144fe:	687b      	ldr	r3, [r7, #4]
 8014500:	3340      	adds	r3, #64	; 0x40
 8014502:	4a8f      	ldr	r2, [pc, #572]	; (8014740 <problem_fetch+0x13420>)
 8014504:	461c      	mov	r4, r3
 8014506:	4613      	mov	r3, r2
 8014508:	cb07      	ldmia	r3!, {r0, r1, r2}
 801450a:	6020      	str	r0, [r4, #0]
 801450c:	6061      	str	r1, [r4, #4]
 801450e:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,5,10,14,17,18");
 8014510:	687b      	ldr	r3, [r7, #4]
 8014512:	3304      	adds	r3, #4
 8014514:	4a8b      	ldr	r2, [pc, #556]	; (8014744 <problem_fetch+0x13424>)
 8014516:	461c      	mov	r4, r3
 8014518:	4615      	mov	r5, r2
 801451a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801451c:	6020      	str	r0, [r4, #0]
 801451e:	6061      	str	r1, [r4, #4]
 8014520:	60a2      	str	r2, [r4, #8]
 8014522:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish, "s,s,d,d,d,e");
 8014524:	687b      	ldr	r3, [r7, #4]
 8014526:	33d8      	adds	r3, #216	; 0xd8
 8014528:	4a87      	ldr	r2, [pc, #540]	; (8014748 <problem_fetch+0x13428>)
 801452a:	461c      	mov	r4, r3
 801452c:	4613      	mov	r3, r2
 801452e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8014530:	6020      	str	r0, [r4, #0]
 8014532:	6061      	str	r1, [r4, #4]
 8014534:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade, "7A");
 8014536:	687b      	ldr	r3, [r7, #4]
 8014538:	33cc      	adds	r3, #204	; 0xcc
 801453a:	4a84      	ldr	r2, [pc, #528]	; (801474c <problem_fetch+0x1342c>)
 801453c:	8811      	ldrh	r1, [r2, #0]
 801453e:	7892      	ldrb	r2, [r2, #2]
 8014540:	8019      	strh	r1, [r3, #0]
 8014542:	709a      	strb	r2, [r3, #2]
			break;
 8014544:	f006 bc32 	b.w	801adac <problem_fetch+0x19a8c>
		case 635 :
			strcpy(p->name,"PINCH THE PINCH");
 8014548:	687b      	ldr	r3, [r7, #4]
 801454a:	337c      	adds	r3, #124	; 0x7c
 801454c:	4a80      	ldr	r2, [pc, #512]	; (8014750 <problem_fetch+0x13430>)
 801454e:	461c      	mov	r4, r3
 8014550:	4615      	mov	r5, r2
 8014552:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8014554:	6020      	str	r0, [r4, #0]
 8014556:	6061      	str	r1, [r4, #4]
 8014558:	60a2      	str	r2, [r4, #8]
 801455a:	60e3      	str	r3, [r4, #12]
			p->moveSize = 4;
 801455c:	687b      	ldr	r3, [r7, #4]
 801455e:	2204      	movs	r2, #4
 8014560:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"J,H,G,D");
 8014562:	687b      	ldr	r3, [r7, #4]
 8014564:	3340      	adds	r3, #64	; 0x40
 8014566:	497b      	ldr	r1, [pc, #492]	; (8014754 <problem_fetch+0x13434>)
 8014568:	461a      	mov	r2, r3
 801456a:	460b      	mov	r3, r1
 801456c:	cb03      	ldmia	r3!, {r0, r1}
 801456e:	6010      	str	r0, [r2, #0]
 8014570:	6051      	str	r1, [r2, #4]
			strcpy(p->moveNumbers,"5,10,14,18");
 8014572:	687b      	ldr	r3, [r7, #4]
 8014574:	3304      	adds	r3, #4
 8014576:	4978      	ldr	r1, [pc, #480]	; (8014758 <problem_fetch+0x13438>)
 8014578:	461a      	mov	r2, r3
 801457a:	460b      	mov	r3, r1
 801457c:	cb03      	ldmia	r3!, {r0, r1}
 801457e:	6010      	str	r0, [r2, #0]
 8014580:	6051      	str	r1, [r2, #4]
 8014582:	8819      	ldrh	r1, [r3, #0]
 8014584:	789b      	ldrb	r3, [r3, #2]
 8014586:	8111      	strh	r1, [r2, #8]
 8014588:	7293      	strb	r3, [r2, #10]
			strcpy(p->startFinish, "s,d,d,e");
 801458a:	687b      	ldr	r3, [r7, #4]
 801458c:	33d8      	adds	r3, #216	; 0xd8
 801458e:	4973      	ldr	r1, [pc, #460]	; (801475c <problem_fetch+0x1343c>)
 8014590:	461a      	mov	r2, r3
 8014592:	460b      	mov	r3, r1
 8014594:	cb03      	ldmia	r3!, {r0, r1}
 8014596:	6010      	str	r0, [r2, #0]
 8014598:	6051      	str	r1, [r2, #4]
			strcpy(p->grade, "7A");
 801459a:	687b      	ldr	r3, [r7, #4]
 801459c:	33cc      	adds	r3, #204	; 0xcc
 801459e:	4a6b      	ldr	r2, [pc, #428]	; (801474c <problem_fetch+0x1342c>)
 80145a0:	8811      	ldrh	r1, [r2, #0]
 80145a2:	7892      	ldrb	r2, [r2, #2]
 80145a4:	8019      	strh	r1, [r3, #0]
 80145a6:	709a      	strb	r2, [r3, #2]
			break;
 80145a8:	f006 bc00 	b.w	801adac <problem_fetch+0x19a8c>
		case 636 :
			strcpy(p->name,"THE BLACK MAMBA 🐍");
 80145ac:	687b      	ldr	r3, [r7, #4]
 80145ae:	337c      	adds	r3, #124	; 0x7c
 80145b0:	4a6b      	ldr	r2, [pc, #428]	; (8014760 <problem_fetch+0x13440>)
 80145b2:	461d      	mov	r5, r3
 80145b4:	4614      	mov	r4, r2
 80145b6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80145b8:	6028      	str	r0, [r5, #0]
 80145ba:	6069      	str	r1, [r5, #4]
 80145bc:	60aa      	str	r2, [r5, #8]
 80145be:	60eb      	str	r3, [r5, #12]
 80145c0:	6820      	ldr	r0, [r4, #0]
 80145c2:	6128      	str	r0, [r5, #16]
 80145c4:	7923      	ldrb	r3, [r4, #4]
 80145c6:	752b      	strb	r3, [r5, #20]
			p->moveSize = 11;
 80145c8:	687b      	ldr	r3, [r7, #4]
 80145ca:	220b      	movs	r2, #11
 80145cc:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"G,E,G,C,B,E,C,D,B,D,A");
 80145ce:	687b      	ldr	r3, [r7, #4]
 80145d0:	3340      	adds	r3, #64	; 0x40
 80145d2:	4a64      	ldr	r2, [pc, #400]	; (8014764 <problem_fetch+0x13444>)
 80145d4:	461d      	mov	r5, r3
 80145d6:	4614      	mov	r4, r2
 80145d8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80145da:	6028      	str	r0, [r5, #0]
 80145dc:	6069      	str	r1, [r5, #4]
 80145de:	60aa      	str	r2, [r5, #8]
 80145e0:	60eb      	str	r3, [r5, #12]
 80145e2:	6820      	ldr	r0, [r4, #0]
 80145e4:	6128      	str	r0, [r5, #16]
 80145e6:	88a3      	ldrh	r3, [r4, #4]
 80145e8:	82ab      	strh	r3, [r5, #20]
			strcpy(p->moveNumbers,"4,6,9,8,10,12,13,15,15,18,18");
 80145ea:	687b      	ldr	r3, [r7, #4]
 80145ec:	3304      	adds	r3, #4
 80145ee:	4a5e      	ldr	r2, [pc, #376]	; (8014768 <problem_fetch+0x13448>)
 80145f0:	461d      	mov	r5, r3
 80145f2:	4614      	mov	r4, r2
 80145f4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80145f6:	6028      	str	r0, [r5, #0]
 80145f8:	6069      	str	r1, [r5, #4]
 80145fa:	60aa      	str	r2, [r5, #8]
 80145fc:	60eb      	str	r3, [r5, #12]
 80145fe:	cc07      	ldmia	r4!, {r0, r1, r2}
 8014600:	6128      	str	r0, [r5, #16]
 8014602:	6169      	str	r1, [r5, #20]
 8014604:	61aa      	str	r2, [r5, #24]
 8014606:	7823      	ldrb	r3, [r4, #0]
 8014608:	772b      	strb	r3, [r5, #28]
			strcpy(p->startFinish, "s,s,d,d,d,d,d,d,d,e,e");
 801460a:	687b      	ldr	r3, [r7, #4]
 801460c:	33d8      	adds	r3, #216	; 0xd8
 801460e:	4a57      	ldr	r2, [pc, #348]	; (801476c <problem_fetch+0x1344c>)
 8014610:	461d      	mov	r5, r3
 8014612:	4614      	mov	r4, r2
 8014614:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8014616:	6028      	str	r0, [r5, #0]
 8014618:	6069      	str	r1, [r5, #4]
 801461a:	60aa      	str	r2, [r5, #8]
 801461c:	60eb      	str	r3, [r5, #12]
 801461e:	6820      	ldr	r0, [r4, #0]
 8014620:	6128      	str	r0, [r5, #16]
 8014622:	88a3      	ldrh	r3, [r4, #4]
 8014624:	82ab      	strh	r3, [r5, #20]
			strcpy(p->grade, "6B+");
 8014626:	687b      	ldr	r3, [r7, #4]
 8014628:	33cc      	adds	r3, #204	; 0xcc
 801462a:	4a51      	ldr	r2, [pc, #324]	; (8014770 <problem_fetch+0x13450>)
 801462c:	6810      	ldr	r0, [r2, #0]
 801462e:	6018      	str	r0, [r3, #0]
			break;
 8014630:	f006 bbbc 	b.w	801adac <problem_fetch+0x19a8c>
		case 637 :
			strcpy(p->name,"SCIENTIFIC PROGRESS");
 8014634:	687b      	ldr	r3, [r7, #4]
 8014636:	337c      	adds	r3, #124	; 0x7c
 8014638:	4a4e      	ldr	r2, [pc, #312]	; (8014774 <problem_fetch+0x13454>)
 801463a:	461d      	mov	r5, r3
 801463c:	4614      	mov	r4, r2
 801463e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8014640:	6028      	str	r0, [r5, #0]
 8014642:	6069      	str	r1, [r5, #4]
 8014644:	60aa      	str	r2, [r5, #8]
 8014646:	60eb      	str	r3, [r5, #12]
 8014648:	6820      	ldr	r0, [r4, #0]
 801464a:	6128      	str	r0, [r5, #16]
			p->moveSize = 5;
 801464c:	687b      	ldr	r3, [r7, #4]
 801464e:	2205      	movs	r2, #5
 8014650:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"E,C,F,A,A");
 8014652:	687b      	ldr	r3, [r7, #4]
 8014654:	3340      	adds	r3, #64	; 0x40
 8014656:	4948      	ldr	r1, [pc, #288]	; (8014778 <problem_fetch+0x13458>)
 8014658:	461a      	mov	r2, r3
 801465a:	460b      	mov	r3, r1
 801465c:	cb03      	ldmia	r3!, {r0, r1}
 801465e:	6010      	str	r0, [r2, #0]
 8014660:	6051      	str	r1, [r2, #4]
 8014662:	881b      	ldrh	r3, [r3, #0]
 8014664:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"6,8,11,14,18");
 8014666:	687b      	ldr	r3, [r7, #4]
 8014668:	3304      	adds	r3, #4
 801466a:	4a44      	ldr	r2, [pc, #272]	; (801477c <problem_fetch+0x1345c>)
 801466c:	461c      	mov	r4, r3
 801466e:	4613      	mov	r3, r2
 8014670:	cb07      	ldmia	r3!, {r0, r1, r2}
 8014672:	6020      	str	r0, [r4, #0]
 8014674:	6061      	str	r1, [r4, #4]
 8014676:	60a2      	str	r2, [r4, #8]
 8014678:	781b      	ldrb	r3, [r3, #0]
 801467a:	7323      	strb	r3, [r4, #12]
			strcpy(p->startFinish, "s,d,d,d,e");
 801467c:	687b      	ldr	r3, [r7, #4]
 801467e:	33d8      	adds	r3, #216	; 0xd8
 8014680:	493f      	ldr	r1, [pc, #252]	; (8014780 <problem_fetch+0x13460>)
 8014682:	461a      	mov	r2, r3
 8014684:	460b      	mov	r3, r1
 8014686:	cb03      	ldmia	r3!, {r0, r1}
 8014688:	6010      	str	r0, [r2, #0]
 801468a:	6051      	str	r1, [r2, #4]
 801468c:	881b      	ldrh	r3, [r3, #0]
 801468e:	8113      	strh	r3, [r2, #8]
			strcpy(p->grade, "7A");
 8014690:	687b      	ldr	r3, [r7, #4]
 8014692:	33cc      	adds	r3, #204	; 0xcc
 8014694:	4a2d      	ldr	r2, [pc, #180]	; (801474c <problem_fetch+0x1342c>)
 8014696:	8811      	ldrh	r1, [r2, #0]
 8014698:	7892      	ldrb	r2, [r2, #2]
 801469a:	8019      	strh	r1, [r3, #0]
 801469c:	709a      	strb	r2, [r3, #2]
			break;
 801469e:	f006 bb85 	b.w	801adac <problem_fetch+0x19a8c>
		case 638 :
			strcpy(p->name,"YET ANOTHER WASTE OF SKIN");
 80146a2:	687b      	ldr	r3, [r7, #4]
 80146a4:	337c      	adds	r3, #124	; 0x7c
 80146a6:	4a37      	ldr	r2, [pc, #220]	; (8014784 <problem_fetch+0x13464>)
 80146a8:	461d      	mov	r5, r3
 80146aa:	4614      	mov	r4, r2
 80146ac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80146ae:	6028      	str	r0, [r5, #0]
 80146b0:	6069      	str	r1, [r5, #4]
 80146b2:	60aa      	str	r2, [r5, #8]
 80146b4:	60eb      	str	r3, [r5, #12]
 80146b6:	cc03      	ldmia	r4!, {r0, r1}
 80146b8:	6128      	str	r0, [r5, #16]
 80146ba:	6169      	str	r1, [r5, #20]
 80146bc:	8823      	ldrh	r3, [r4, #0]
 80146be:	832b      	strh	r3, [r5, #24]
			p->moveSize = 5;
 80146c0:	687b      	ldr	r3, [r7, #4]
 80146c2:	2205      	movs	r2, #5
 80146c4:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"J,I,E,D,A");
 80146c6:	687b      	ldr	r3, [r7, #4]
 80146c8:	3340      	adds	r3, #64	; 0x40
 80146ca:	492f      	ldr	r1, [pc, #188]	; (8014788 <problem_fetch+0x13468>)
 80146cc:	461a      	mov	r2, r3
 80146ce:	460b      	mov	r3, r1
 80146d0:	cb03      	ldmia	r3!, {r0, r1}
 80146d2:	6010      	str	r0, [r2, #0]
 80146d4:	6051      	str	r1, [r2, #4]
 80146d6:	881b      	ldrh	r3, [r3, #0]
 80146d8:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"5,10,12,15,18");
 80146da:	687b      	ldr	r3, [r7, #4]
 80146dc:	3304      	adds	r3, #4
 80146de:	4a2b      	ldr	r2, [pc, #172]	; (801478c <problem_fetch+0x1346c>)
 80146e0:	461c      	mov	r4, r3
 80146e2:	4613      	mov	r3, r2
 80146e4:	cb07      	ldmia	r3!, {r0, r1, r2}
 80146e6:	6020      	str	r0, [r4, #0]
 80146e8:	6061      	str	r1, [r4, #4]
 80146ea:	60a2      	str	r2, [r4, #8]
 80146ec:	881b      	ldrh	r3, [r3, #0]
 80146ee:	81a3      	strh	r3, [r4, #12]
			strcpy(p->startFinish, "s,d,d,d,e");
 80146f0:	687b      	ldr	r3, [r7, #4]
 80146f2:	33d8      	adds	r3, #216	; 0xd8
 80146f4:	4922      	ldr	r1, [pc, #136]	; (8014780 <problem_fetch+0x13460>)
 80146f6:	461a      	mov	r2, r3
 80146f8:	460b      	mov	r3, r1
 80146fa:	cb03      	ldmia	r3!, {r0, r1}
 80146fc:	6010      	str	r0, [r2, #0]
 80146fe:	6051      	str	r1, [r2, #4]
 8014700:	881b      	ldrh	r3, [r3, #0]
 8014702:	8113      	strh	r3, [r2, #8]
			strcpy(p->grade, "7B+");
 8014704:	687b      	ldr	r3, [r7, #4]
 8014706:	33cc      	adds	r3, #204	; 0xcc
 8014708:	4a21      	ldr	r2, [pc, #132]	; (8014790 <problem_fetch+0x13470>)
 801470a:	6810      	ldr	r0, [r2, #0]
 801470c:	6018      	str	r0, [r3, #0]
			break;
 801470e:	f006 bb4d 	b.w	801adac <problem_fetch+0x19a8c>
 8014712:	bf00      	nop
 8014714:	080280c8 	.word	0x080280c8
 8014718:	080280d4 	.word	0x080280d4
 801471c:	080280e4 	.word	0x080280e4
 8014720:	080212a0 	.word	0x080212a0
 8014724:	08021714 	.word	0x08021714
 8014728:	080280f8 	.word	0x080280f8
 801472c:	08028104 	.word	0x08028104
 8014730:	08027f28 	.word	0x08027f28
 8014734:	0802139c 	.word	0x0802139c
 8014738:	0802132c 	.word	0x0802132c
 801473c:	08028110 	.word	0x08028110
 8014740:	08028124 	.word	0x08028124
 8014744:	08028130 	.word	0x08028130
 8014748:	08021910 	.word	0x08021910
 801474c:	080212f4 	.word	0x080212f4
 8014750:	08028140 	.word	0x08028140
 8014754:	08028150 	.word	0x08028150
 8014758:	08028158 	.word	0x08028158
 801475c:	08022028 	.word	0x08022028
 8014760:	08028164 	.word	0x08028164
 8014764:	0802817c 	.word	0x0802817c
 8014768:	08028194 	.word	0x08028194
 801476c:	080281b4 	.word	0x080281b4
 8014770:	080212b0 	.word	0x080212b0
 8014774:	080281cc 	.word	0x080281cc
 8014778:	080281e0 	.word	0x080281e0
 801477c:	080281ec 	.word	0x080281ec
 8014780:	08021320 	.word	0x08021320
 8014784:	080281fc 	.word	0x080281fc
 8014788:	08028218 	.word	0x08028218
 801478c:	08028224 	.word	0x08028224
 8014790:	08021848 	.word	0x08021848
		case 639 :
			strcpy(p->name,"BLACK-OUT");
 8014794:	687b      	ldr	r3, [r7, #4]
 8014796:	337c      	adds	r3, #124	; 0x7c
 8014798:	49bc      	ldr	r1, [pc, #752]	; (8014a8c <problem_fetch+0x1376c>)
 801479a:	461a      	mov	r2, r3
 801479c:	460b      	mov	r3, r1
 801479e:	cb03      	ldmia	r3!, {r0, r1}
 80147a0:	6010      	str	r0, [r2, #0]
 80147a2:	6051      	str	r1, [r2, #4]
 80147a4:	881b      	ldrh	r3, [r3, #0]
 80147a6:	8113      	strh	r3, [r2, #8]
			p->moveSize = 9;
 80147a8:	687b      	ldr	r3, [r7, #4]
 80147aa:	2209      	movs	r2, #9
 80147ac:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"G,E,E,A,F,B,A,E,D");
 80147ae:	687b      	ldr	r3, [r7, #4]
 80147b0:	3340      	adds	r3, #64	; 0x40
 80147b2:	4ab7      	ldr	r2, [pc, #732]	; (8014a90 <problem_fetch+0x13770>)
 80147b4:	461d      	mov	r5, r3
 80147b6:	4614      	mov	r4, r2
 80147b8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80147ba:	6028      	str	r0, [r5, #0]
 80147bc:	6069      	str	r1, [r5, #4]
 80147be:	60aa      	str	r2, [r5, #8]
 80147c0:	60eb      	str	r3, [r5, #12]
 80147c2:	8823      	ldrh	r3, [r4, #0]
 80147c4:	822b      	strh	r3, [r5, #16]
			strcpy(p->moveNumbers,"4,6,8,9,11,12,14,16,18");
 80147c6:	687b      	ldr	r3, [r7, #4]
 80147c8:	3304      	adds	r3, #4
 80147ca:	4ab2      	ldr	r2, [pc, #712]	; (8014a94 <problem_fetch+0x13774>)
 80147cc:	461c      	mov	r4, r3
 80147ce:	4615      	mov	r5, r2
 80147d0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80147d2:	6020      	str	r0, [r4, #0]
 80147d4:	6061      	str	r1, [r4, #4]
 80147d6:	60a2      	str	r2, [r4, #8]
 80147d8:	60e3      	str	r3, [r4, #12]
 80147da:	6828      	ldr	r0, [r5, #0]
 80147dc:	6120      	str	r0, [r4, #16]
 80147de:	88ab      	ldrh	r3, [r5, #4]
 80147e0:	79aa      	ldrb	r2, [r5, #6]
 80147e2:	82a3      	strh	r3, [r4, #20]
 80147e4:	4613      	mov	r3, r2
 80147e6:	75a3      	strb	r3, [r4, #22]
			strcpy(p->startFinish, "s,s,d,d,d,d,d,d,e");
 80147e8:	687b      	ldr	r3, [r7, #4]
 80147ea:	33d8      	adds	r3, #216	; 0xd8
 80147ec:	4aaa      	ldr	r2, [pc, #680]	; (8014a98 <problem_fetch+0x13778>)
 80147ee:	461d      	mov	r5, r3
 80147f0:	4614      	mov	r4, r2
 80147f2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80147f4:	6028      	str	r0, [r5, #0]
 80147f6:	6069      	str	r1, [r5, #4]
 80147f8:	60aa      	str	r2, [r5, #8]
 80147fa:	60eb      	str	r3, [r5, #12]
 80147fc:	8823      	ldrh	r3, [r4, #0]
 80147fe:	822b      	strh	r3, [r5, #16]
			strcpy(p->grade, "6B+");
 8014800:	687b      	ldr	r3, [r7, #4]
 8014802:	33cc      	adds	r3, #204	; 0xcc
 8014804:	4aa5      	ldr	r2, [pc, #660]	; (8014a9c <problem_fetch+0x1377c>)
 8014806:	6810      	ldr	r0, [r2, #0]
 8014808:	6018      	str	r0, [r3, #0]
			break;
 801480a:	f006 bacf 	b.w	801adac <problem_fetch+0x19a8c>
		case 64 :
			strcpy(p->name,"KICKER 2");
 801480e:	687b      	ldr	r3, [r7, #4]
 8014810:	337c      	adds	r3, #124	; 0x7c
 8014812:	49a3      	ldr	r1, [pc, #652]	; (8014aa0 <problem_fetch+0x13780>)
 8014814:	461a      	mov	r2, r3
 8014816:	460b      	mov	r3, r1
 8014818:	cb03      	ldmia	r3!, {r0, r1}
 801481a:	6010      	str	r0, [r2, #0]
 801481c:	6051      	str	r1, [r2, #4]
 801481e:	781b      	ldrb	r3, [r3, #0]
 8014820:	7213      	strb	r3, [r2, #8]
			p->moveSize = 7;
 8014822:	687b      	ldr	r3, [r7, #4]
 8014824:	2207      	movs	r2, #7
 8014826:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"G,D,E,B,G,E,I");
 8014828:	687b      	ldr	r3, [r7, #4]
 801482a:	3340      	adds	r3, #64	; 0x40
 801482c:	4a9d      	ldr	r2, [pc, #628]	; (8014aa4 <problem_fetch+0x13784>)
 801482e:	461c      	mov	r4, r3
 8014830:	4613      	mov	r3, r2
 8014832:	cb07      	ldmia	r3!, {r0, r1, r2}
 8014834:	6020      	str	r0, [r4, #0]
 8014836:	6061      	str	r1, [r4, #4]
 8014838:	60a2      	str	r2, [r4, #8]
 801483a:	881b      	ldrh	r3, [r3, #0]
 801483c:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,7,9,12,14,14,18");
 801483e:	687b      	ldr	r3, [r7, #4]
 8014840:	3304      	adds	r3, #4
 8014842:	4a99      	ldr	r2, [pc, #612]	; (8014aa8 <problem_fetch+0x13788>)
 8014844:	461d      	mov	r5, r3
 8014846:	4614      	mov	r4, r2
 8014848:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801484a:	6028      	str	r0, [r5, #0]
 801484c:	6069      	str	r1, [r5, #4]
 801484e:	60aa      	str	r2, [r5, #8]
 8014850:	60eb      	str	r3, [r5, #12]
 8014852:	8823      	ldrh	r3, [r4, #0]
 8014854:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish, "s,d,d,d,d,d,e");
 8014856:	687b      	ldr	r3, [r7, #4]
 8014858:	33d8      	adds	r3, #216	; 0xd8
 801485a:	4a94      	ldr	r2, [pc, #592]	; (8014aac <problem_fetch+0x1378c>)
 801485c:	461c      	mov	r4, r3
 801485e:	4613      	mov	r3, r2
 8014860:	cb07      	ldmia	r3!, {r0, r1, r2}
 8014862:	6020      	str	r0, [r4, #0]
 8014864:	6061      	str	r1, [r4, #4]
 8014866:	60a2      	str	r2, [r4, #8]
 8014868:	881b      	ldrh	r3, [r3, #0]
 801486a:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade, "7A");
 801486c:	687b      	ldr	r3, [r7, #4]
 801486e:	33cc      	adds	r3, #204	; 0xcc
 8014870:	4a8f      	ldr	r2, [pc, #572]	; (8014ab0 <problem_fetch+0x13790>)
 8014872:	8811      	ldrh	r1, [r2, #0]
 8014874:	7892      	ldrb	r2, [r2, #2]
 8014876:	8019      	strh	r1, [r3, #0]
 8014878:	709a      	strb	r2, [r3, #2]
			break;
 801487a:	f006 ba97 	b.w	801adac <problem_fetch+0x19a8c>
		case 640 :
			strcpy(p->name,"BLACK PROJECT");
 801487e:	687b      	ldr	r3, [r7, #4]
 8014880:	337c      	adds	r3, #124	; 0x7c
 8014882:	4a8c      	ldr	r2, [pc, #560]	; (8014ab4 <problem_fetch+0x13794>)
 8014884:	461c      	mov	r4, r3
 8014886:	4613      	mov	r3, r2
 8014888:	cb07      	ldmia	r3!, {r0, r1, r2}
 801488a:	6020      	str	r0, [r4, #0]
 801488c:	6061      	str	r1, [r4, #4]
 801488e:	60a2      	str	r2, [r4, #8]
 8014890:	881b      	ldrh	r3, [r3, #0]
 8014892:	81a3      	strh	r3, [r4, #12]
			p->moveSize = 5;
 8014894:	687b      	ldr	r3, [r7, #4]
 8014896:	2205      	movs	r2, #5
 8014898:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"H,H,H,H,I");
 801489a:	687b      	ldr	r3, [r7, #4]
 801489c:	3340      	adds	r3, #64	; 0x40
 801489e:	4986      	ldr	r1, [pc, #536]	; (8014ab8 <problem_fetch+0x13798>)
 80148a0:	461a      	mov	r2, r3
 80148a2:	460b      	mov	r3, r1
 80148a4:	cb03      	ldmia	r3!, {r0, r1}
 80148a6:	6010      	str	r0, [r2, #0]
 80148a8:	6051      	str	r1, [r2, #4]
 80148aa:	881b      	ldrh	r3, [r3, #0]
 80148ac:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"5,10,12,16,18");
 80148ae:	687b      	ldr	r3, [r7, #4]
 80148b0:	3304      	adds	r3, #4
 80148b2:	4a82      	ldr	r2, [pc, #520]	; (8014abc <problem_fetch+0x1379c>)
 80148b4:	461c      	mov	r4, r3
 80148b6:	4613      	mov	r3, r2
 80148b8:	cb07      	ldmia	r3!, {r0, r1, r2}
 80148ba:	6020      	str	r0, [r4, #0]
 80148bc:	6061      	str	r1, [r4, #4]
 80148be:	60a2      	str	r2, [r4, #8]
 80148c0:	881b      	ldrh	r3, [r3, #0]
 80148c2:	81a3      	strh	r3, [r4, #12]
			strcpy(p->startFinish, "s,d,d,d,e");
 80148c4:	687b      	ldr	r3, [r7, #4]
 80148c6:	33d8      	adds	r3, #216	; 0xd8
 80148c8:	497d      	ldr	r1, [pc, #500]	; (8014ac0 <problem_fetch+0x137a0>)
 80148ca:	461a      	mov	r2, r3
 80148cc:	460b      	mov	r3, r1
 80148ce:	cb03      	ldmia	r3!, {r0, r1}
 80148d0:	6010      	str	r0, [r2, #0]
 80148d2:	6051      	str	r1, [r2, #4]
 80148d4:	881b      	ldrh	r3, [r3, #0]
 80148d6:	8113      	strh	r3, [r2, #8]
			strcpy(p->grade, "7A");
 80148d8:	687b      	ldr	r3, [r7, #4]
 80148da:	33cc      	adds	r3, #204	; 0xcc
 80148dc:	4a74      	ldr	r2, [pc, #464]	; (8014ab0 <problem_fetch+0x13790>)
 80148de:	8811      	ldrh	r1, [r2, #0]
 80148e0:	7892      	ldrb	r2, [r2, #2]
 80148e2:	8019      	strh	r1, [r3, #0]
 80148e4:	709a      	strb	r2, [r3, #2]
			break;
 80148e6:	f006 ba61 	b.w	801adac <problem_fetch+0x19a8c>
		case 641 :
			strcpy(p->name,"TRIO TERNURA");
 80148ea:	687b      	ldr	r3, [r7, #4]
 80148ec:	337c      	adds	r3, #124	; 0x7c
 80148ee:	4a75      	ldr	r2, [pc, #468]	; (8014ac4 <problem_fetch+0x137a4>)
 80148f0:	461c      	mov	r4, r3
 80148f2:	4613      	mov	r3, r2
 80148f4:	cb07      	ldmia	r3!, {r0, r1, r2}
 80148f6:	6020      	str	r0, [r4, #0]
 80148f8:	6061      	str	r1, [r4, #4]
 80148fa:	60a2      	str	r2, [r4, #8]
 80148fc:	781b      	ldrb	r3, [r3, #0]
 80148fe:	7323      	strb	r3, [r4, #12]
			p->moveSize = 6;
 8014900:	687b      	ldr	r3, [r7, #4]
 8014902:	2206      	movs	r2, #6
 8014904:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"J,E,H,E,A,A");
 8014906:	687b      	ldr	r3, [r7, #4]
 8014908:	3340      	adds	r3, #64	; 0x40
 801490a:	4a6f      	ldr	r2, [pc, #444]	; (8014ac8 <problem_fetch+0x137a8>)
 801490c:	461c      	mov	r4, r3
 801490e:	4613      	mov	r3, r2
 8014910:	cb07      	ldmia	r3!, {r0, r1, r2}
 8014912:	6020      	str	r0, [r4, #0]
 8014914:	6061      	str	r1, [r4, #4]
 8014916:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,6,8,12,14,18");
 8014918:	687b      	ldr	r3, [r7, #4]
 801491a:	3304      	adds	r3, #4
 801491c:	4a6b      	ldr	r2, [pc, #428]	; (8014acc <problem_fetch+0x137ac>)
 801491e:	461c      	mov	r4, r3
 8014920:	4613      	mov	r3, r2
 8014922:	cb07      	ldmia	r3!, {r0, r1, r2}
 8014924:	6020      	str	r0, [r4, #0]
 8014926:	6061      	str	r1, [r4, #4]
 8014928:	60a2      	str	r2, [r4, #8]
 801492a:	881a      	ldrh	r2, [r3, #0]
 801492c:	789b      	ldrb	r3, [r3, #2]
 801492e:	81a2      	strh	r2, [r4, #12]
 8014930:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish, "s,d,d,d,d,e");
 8014932:	687b      	ldr	r3, [r7, #4]
 8014934:	33d8      	adds	r3, #216	; 0xd8
 8014936:	4a66      	ldr	r2, [pc, #408]	; (8014ad0 <problem_fetch+0x137b0>)
 8014938:	461c      	mov	r4, r3
 801493a:	4613      	mov	r3, r2
 801493c:	cb07      	ldmia	r3!, {r0, r1, r2}
 801493e:	6020      	str	r0, [r4, #0]
 8014940:	6061      	str	r1, [r4, #4]
 8014942:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade, "7B+");
 8014944:	687b      	ldr	r3, [r7, #4]
 8014946:	33cc      	adds	r3, #204	; 0xcc
 8014948:	4a62      	ldr	r2, [pc, #392]	; (8014ad4 <problem_fetch+0x137b4>)
 801494a:	6810      	ldr	r0, [r2, #0]
 801494c:	6018      	str	r0, [r3, #0]
			break;
 801494e:	f006 ba2d 	b.w	801adac <problem_fetch+0x19a8c>
		case 642 :
			strcpy(p->name,"CK");
 8014952:	687b      	ldr	r3, [r7, #4]
 8014954:	337c      	adds	r3, #124	; 0x7c
 8014956:	4a60      	ldr	r2, [pc, #384]	; (8014ad8 <problem_fetch+0x137b8>)
 8014958:	8811      	ldrh	r1, [r2, #0]
 801495a:	7892      	ldrb	r2, [r2, #2]
 801495c:	8019      	strh	r1, [r3, #0]
 801495e:	709a      	strb	r2, [r3, #2]
			p->moveSize = 6;
 8014960:	687b      	ldr	r3, [r7, #4]
 8014962:	2206      	movs	r2, #6
 8014964:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"J,H,J,F,G,D");
 8014966:	687b      	ldr	r3, [r7, #4]
 8014968:	3340      	adds	r3, #64	; 0x40
 801496a:	4a5c      	ldr	r2, [pc, #368]	; (8014adc <problem_fetch+0x137bc>)
 801496c:	461c      	mov	r4, r3
 801496e:	4613      	mov	r3, r2
 8014970:	cb07      	ldmia	r3!, {r0, r1, r2}
 8014972:	6020      	str	r0, [r4, #0]
 8014974:	6061      	str	r1, [r4, #4]
 8014976:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,8,12,13,17,18");
 8014978:	687b      	ldr	r3, [r7, #4]
 801497a:	3304      	adds	r3, #4
 801497c:	4a58      	ldr	r2, [pc, #352]	; (8014ae0 <problem_fetch+0x137c0>)
 801497e:	461c      	mov	r4, r3
 8014980:	4615      	mov	r5, r2
 8014982:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8014984:	6020      	str	r0, [r4, #0]
 8014986:	6061      	str	r1, [r4, #4]
 8014988:	60a2      	str	r2, [r4, #8]
 801498a:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish, "s,d,d,d,d,e");
 801498c:	687b      	ldr	r3, [r7, #4]
 801498e:	33d8      	adds	r3, #216	; 0xd8
 8014990:	4a4f      	ldr	r2, [pc, #316]	; (8014ad0 <problem_fetch+0x137b0>)
 8014992:	461c      	mov	r4, r3
 8014994:	4613      	mov	r3, r2
 8014996:	cb07      	ldmia	r3!, {r0, r1, r2}
 8014998:	6020      	str	r0, [r4, #0]
 801499a:	6061      	str	r1, [r4, #4]
 801499c:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade, "6C+");
 801499e:	687b      	ldr	r3, [r7, #4]
 80149a0:	33cc      	adds	r3, #204	; 0xcc
 80149a2:	4a50      	ldr	r2, [pc, #320]	; (8014ae4 <problem_fetch+0x137c4>)
 80149a4:	6810      	ldr	r0, [r2, #0]
 80149a6:	6018      	str	r0, [r3, #0]
			break;
 80149a8:	f006 ba00 	b.w	801adac <problem_fetch+0x19a8c>
		case 643 :
			strcpy(p->name,"PINPANPUN");
 80149ac:	687b      	ldr	r3, [r7, #4]
 80149ae:	337c      	adds	r3, #124	; 0x7c
 80149b0:	494d      	ldr	r1, [pc, #308]	; (8014ae8 <problem_fetch+0x137c8>)
 80149b2:	461a      	mov	r2, r3
 80149b4:	460b      	mov	r3, r1
 80149b6:	cb03      	ldmia	r3!, {r0, r1}
 80149b8:	6010      	str	r0, [r2, #0]
 80149ba:	6051      	str	r1, [r2, #4]
 80149bc:	881b      	ldrh	r3, [r3, #0]
 80149be:	8113      	strh	r3, [r2, #8]
			p->moveSize = 7;
 80149c0:	687b      	ldr	r3, [r7, #4]
 80149c2:	2207      	movs	r2, #7
 80149c4:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"B,C,E,A,E,A,D");
 80149c6:	687b      	ldr	r3, [r7, #4]
 80149c8:	3340      	adds	r3, #64	; 0x40
 80149ca:	4a48      	ldr	r2, [pc, #288]	; (8014aec <problem_fetch+0x137cc>)
 80149cc:	461c      	mov	r4, r3
 80149ce:	4613      	mov	r3, r2
 80149d0:	cb07      	ldmia	r3!, {r0, r1, r2}
 80149d2:	6020      	str	r0, [r4, #0]
 80149d4:	6061      	str	r1, [r4, #4]
 80149d6:	60a2      	str	r2, [r4, #8]
 80149d8:	881b      	ldrh	r3, [r3, #0]
 80149da:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"6,5,9,9,12,14,18");
 80149dc:	687b      	ldr	r3, [r7, #4]
 80149de:	3304      	adds	r3, #4
 80149e0:	4a43      	ldr	r2, [pc, #268]	; (8014af0 <problem_fetch+0x137d0>)
 80149e2:	461d      	mov	r5, r3
 80149e4:	4614      	mov	r4, r2
 80149e6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80149e8:	6028      	str	r0, [r5, #0]
 80149ea:	6069      	str	r1, [r5, #4]
 80149ec:	60aa      	str	r2, [r5, #8]
 80149ee:	60eb      	str	r3, [r5, #12]
 80149f0:	7823      	ldrb	r3, [r4, #0]
 80149f2:	742b      	strb	r3, [r5, #16]
			strcpy(p->startFinish, "s,s,d,d,d,d,e");
 80149f4:	687b      	ldr	r3, [r7, #4]
 80149f6:	33d8      	adds	r3, #216	; 0xd8
 80149f8:	4a3e      	ldr	r2, [pc, #248]	; (8014af4 <problem_fetch+0x137d4>)
 80149fa:	461c      	mov	r4, r3
 80149fc:	4613      	mov	r3, r2
 80149fe:	cb07      	ldmia	r3!, {r0, r1, r2}
 8014a00:	6020      	str	r0, [r4, #0]
 8014a02:	6061      	str	r1, [r4, #4]
 8014a04:	60a2      	str	r2, [r4, #8]
 8014a06:	881b      	ldrh	r3, [r3, #0]
 8014a08:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade, "7A+");
 8014a0a:	687b      	ldr	r3, [r7, #4]
 8014a0c:	33cc      	adds	r3, #204	; 0xcc
 8014a0e:	4a3a      	ldr	r2, [pc, #232]	; (8014af8 <problem_fetch+0x137d8>)
 8014a10:	6810      	ldr	r0, [r2, #0]
 8014a12:	6018      	str	r0, [r3, #0]
			break;
 8014a14:	f006 b9ca 	b.w	801adac <problem_fetch+0x19a8c>
		case 644 :
			strcpy(p->name,"DARK DAYS");
 8014a18:	687b      	ldr	r3, [r7, #4]
 8014a1a:	337c      	adds	r3, #124	; 0x7c
 8014a1c:	4937      	ldr	r1, [pc, #220]	; (8014afc <problem_fetch+0x137dc>)
 8014a1e:	461a      	mov	r2, r3
 8014a20:	460b      	mov	r3, r1
 8014a22:	cb03      	ldmia	r3!, {r0, r1}
 8014a24:	6010      	str	r0, [r2, #0]
 8014a26:	6051      	str	r1, [r2, #4]
 8014a28:	881b      	ldrh	r3, [r3, #0]
 8014a2a:	8113      	strh	r3, [r2, #8]
			p->moveSize = 9;
 8014a2c:	687b      	ldr	r3, [r7, #4]
 8014a2e:	2209      	movs	r2, #9
 8014a30:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"B,D,B,E,D,I,K,I,I");
 8014a32:	687b      	ldr	r3, [r7, #4]
 8014a34:	3340      	adds	r3, #64	; 0x40
 8014a36:	4a32      	ldr	r2, [pc, #200]	; (8014b00 <problem_fetch+0x137e0>)
 8014a38:	461d      	mov	r5, r3
 8014a3a:	4614      	mov	r4, r2
 8014a3c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8014a3e:	6028      	str	r0, [r5, #0]
 8014a40:	6069      	str	r1, [r5, #4]
 8014a42:	60aa      	str	r2, [r5, #8]
 8014a44:	60eb      	str	r3, [r5, #12]
 8014a46:	8823      	ldrh	r3, [r4, #0]
 8014a48:	822b      	strh	r3, [r5, #16]
			strcpy(p->moveNumbers,"6,7,10,14,15,15,14,18,7");
 8014a4a:	687b      	ldr	r3, [r7, #4]
 8014a4c:	3304      	adds	r3, #4
 8014a4e:	4a2d      	ldr	r2, [pc, #180]	; (8014b04 <problem_fetch+0x137e4>)
 8014a50:	461d      	mov	r5, r3
 8014a52:	4614      	mov	r4, r2
 8014a54:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8014a56:	6028      	str	r0, [r5, #0]
 8014a58:	6069      	str	r1, [r5, #4]
 8014a5a:	60aa      	str	r2, [r5, #8]
 8014a5c:	60eb      	str	r3, [r5, #12]
 8014a5e:	cc03      	ldmia	r4!, {r0, r1}
 8014a60:	6128      	str	r0, [r5, #16]
 8014a62:	6169      	str	r1, [r5, #20]
			strcpy(p->startFinish, "s,d,d,d,d,d,d,e,d");
 8014a64:	687b      	ldr	r3, [r7, #4]
 8014a66:	33d8      	adds	r3, #216	; 0xd8
 8014a68:	4a27      	ldr	r2, [pc, #156]	; (8014b08 <problem_fetch+0x137e8>)
 8014a6a:	461d      	mov	r5, r3
 8014a6c:	4614      	mov	r4, r2
 8014a6e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8014a70:	6028      	str	r0, [r5, #0]
 8014a72:	6069      	str	r1, [r5, #4]
 8014a74:	60aa      	str	r2, [r5, #8]
 8014a76:	60eb      	str	r3, [r5, #12]
 8014a78:	8823      	ldrh	r3, [r4, #0]
 8014a7a:	822b      	strh	r3, [r5, #16]
			strcpy(p->grade, "7A+");
 8014a7c:	687b      	ldr	r3, [r7, #4]
 8014a7e:	33cc      	adds	r3, #204	; 0xcc
 8014a80:	4a1d      	ldr	r2, [pc, #116]	; (8014af8 <problem_fetch+0x137d8>)
 8014a82:	6810      	ldr	r0, [r2, #0]
 8014a84:	6018      	str	r0, [r3, #0]
			break;
 8014a86:	f006 b991 	b.w	801adac <problem_fetch+0x19a8c>
 8014a8a:	bf00      	nop
 8014a8c:	08028234 	.word	0x08028234
 8014a90:	08028240 	.word	0x08028240
 8014a94:	08028254 	.word	0x08028254
 8014a98:	0802187c 	.word	0x0802187c
 8014a9c:	080212b0 	.word	0x080212b0
 8014aa0:	0802826c 	.word	0x0802826c
 8014aa4:	08028278 	.word	0x08028278
 8014aa8:	08028288 	.word	0x08028288
 8014aac:	08021494 	.word	0x08021494
 8014ab0:	080212f4 	.word	0x080212f4
 8014ab4:	0802829c 	.word	0x0802829c
 8014ab8:	080282ac 	.word	0x080282ac
 8014abc:	080282b8 	.word	0x080282b8
 8014ac0:	08021320 	.word	0x08021320
 8014ac4:	080282c8 	.word	0x080282c8
 8014ac8:	080282d8 	.word	0x080282d8
 8014acc:	080282e4 	.word	0x080282e4
 8014ad0:	0802139c 	.word	0x0802139c
 8014ad4:	08021848 	.word	0x08021848
 8014ad8:	080282f4 	.word	0x080282f4
 8014adc:	080282f8 	.word	0x080282f8
 8014ae0:	08028304 	.word	0x08028304
 8014ae4:	080213a8 	.word	0x080213a8
 8014ae8:	08028314 	.word	0x08028314
 8014aec:	08028320 	.word	0x08028320
 8014af0:	08028330 	.word	0x08028330
 8014af4:	080212a0 	.word	0x080212a0
 8014af8:	08021424 	.word	0x08021424
 8014afc:	08028344 	.word	0x08028344
 8014b00:	08028350 	.word	0x08028350
 8014b04:	08028364 	.word	0x08028364
 8014b08:	0802837c 	.word	0x0802837c
		case 645 :
			strcpy(p->name,"WILD BILL");
 8014b0c:	687b      	ldr	r3, [r7, #4]
 8014b0e:	337c      	adds	r3, #124	; 0x7c
 8014b10:	49bc      	ldr	r1, [pc, #752]	; (8014e04 <problem_fetch+0x13ae4>)
 8014b12:	461a      	mov	r2, r3
 8014b14:	460b      	mov	r3, r1
 8014b16:	cb03      	ldmia	r3!, {r0, r1}
 8014b18:	6010      	str	r0, [r2, #0]
 8014b1a:	6051      	str	r1, [r2, #4]
 8014b1c:	881b      	ldrh	r3, [r3, #0]
 8014b1e:	8113      	strh	r3, [r2, #8]
			p->moveSize = 6;
 8014b20:	687b      	ldr	r3, [r7, #4]
 8014b22:	2206      	movs	r2, #6
 8014b24:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"H,K,G,D,D,A");
 8014b26:	687b      	ldr	r3, [r7, #4]
 8014b28:	3340      	adds	r3, #64	; 0x40
 8014b2a:	4ab7      	ldr	r2, [pc, #732]	; (8014e08 <problem_fetch+0x13ae8>)
 8014b2c:	461c      	mov	r4, r3
 8014b2e:	4613      	mov	r3, r2
 8014b30:	cb07      	ldmia	r3!, {r0, r1, r2}
 8014b32:	6020      	str	r0, [r4, #0]
 8014b34:	6061      	str	r1, [r4, #4]
 8014b36:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,9,14,15,18,18");
 8014b38:	687b      	ldr	r3, [r7, #4]
 8014b3a:	3304      	adds	r3, #4
 8014b3c:	4ab3      	ldr	r2, [pc, #716]	; (8014e0c <problem_fetch+0x13aec>)
 8014b3e:	461c      	mov	r4, r3
 8014b40:	4615      	mov	r5, r2
 8014b42:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8014b44:	6020      	str	r0, [r4, #0]
 8014b46:	6061      	str	r1, [r4, #4]
 8014b48:	60a2      	str	r2, [r4, #8]
 8014b4a:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish, "s,d,d,d,e,e");
 8014b4c:	687b      	ldr	r3, [r7, #4]
 8014b4e:	33d8      	adds	r3, #216	; 0xd8
 8014b50:	4aaf      	ldr	r2, [pc, #700]	; (8014e10 <problem_fetch+0x13af0>)
 8014b52:	461c      	mov	r4, r3
 8014b54:	4613      	mov	r3, r2
 8014b56:	cb07      	ldmia	r3!, {r0, r1, r2}
 8014b58:	6020      	str	r0, [r4, #0]
 8014b5a:	6061      	str	r1, [r4, #4]
 8014b5c:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade, "7B");
 8014b5e:	687b      	ldr	r3, [r7, #4]
 8014b60:	33cc      	adds	r3, #204	; 0xcc
 8014b62:	4aac      	ldr	r2, [pc, #688]	; (8014e14 <problem_fetch+0x13af4>)
 8014b64:	8811      	ldrh	r1, [r2, #0]
 8014b66:	7892      	ldrb	r2, [r2, #2]
 8014b68:	8019      	strh	r1, [r3, #0]
 8014b6a:	709a      	strb	r2, [r3, #2]
			break;
 8014b6c:	f006 b91e 	b.w	801adac <problem_fetch+0x19a8c>
		case 646 :
			strcpy(p->name,"LA MARY ME PAGA");
 8014b70:	687b      	ldr	r3, [r7, #4]
 8014b72:	337c      	adds	r3, #124	; 0x7c
 8014b74:	4aa8      	ldr	r2, [pc, #672]	; (8014e18 <problem_fetch+0x13af8>)
 8014b76:	461c      	mov	r4, r3
 8014b78:	4615      	mov	r5, r2
 8014b7a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8014b7c:	6020      	str	r0, [r4, #0]
 8014b7e:	6061      	str	r1, [r4, #4]
 8014b80:	60a2      	str	r2, [r4, #8]
 8014b82:	60e3      	str	r3, [r4, #12]
			p->moveSize = 6;
 8014b84:	687b      	ldr	r3, [r7, #4]
 8014b86:	2206      	movs	r2, #6
 8014b88:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"C,E,E,B,E,D");
 8014b8a:	687b      	ldr	r3, [r7, #4]
 8014b8c:	3340      	adds	r3, #64	; 0x40
 8014b8e:	4aa3      	ldr	r2, [pc, #652]	; (8014e1c <problem_fetch+0x13afc>)
 8014b90:	461c      	mov	r4, r3
 8014b92:	4613      	mov	r3, r2
 8014b94:	cb07      	ldmia	r3!, {r0, r1, r2}
 8014b96:	6020      	str	r0, [r4, #0]
 8014b98:	6061      	str	r1, [r4, #4]
 8014b9a:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,6,9,10,14,18");
 8014b9c:	687b      	ldr	r3, [r7, #4]
 8014b9e:	3304      	adds	r3, #4
 8014ba0:	4a9f      	ldr	r2, [pc, #636]	; (8014e20 <problem_fetch+0x13b00>)
 8014ba2:	461c      	mov	r4, r3
 8014ba4:	4613      	mov	r3, r2
 8014ba6:	cb07      	ldmia	r3!, {r0, r1, r2}
 8014ba8:	6020      	str	r0, [r4, #0]
 8014baa:	6061      	str	r1, [r4, #4]
 8014bac:	60a2      	str	r2, [r4, #8]
 8014bae:	881a      	ldrh	r2, [r3, #0]
 8014bb0:	789b      	ldrb	r3, [r3, #2]
 8014bb2:	81a2      	strh	r2, [r4, #12]
 8014bb4:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish, "s,s,d,d,d,e");
 8014bb6:	687b      	ldr	r3, [r7, #4]
 8014bb8:	33d8      	adds	r3, #216	; 0xd8
 8014bba:	4a9a      	ldr	r2, [pc, #616]	; (8014e24 <problem_fetch+0x13b04>)
 8014bbc:	461c      	mov	r4, r3
 8014bbe:	4613      	mov	r3, r2
 8014bc0:	cb07      	ldmia	r3!, {r0, r1, r2}
 8014bc2:	6020      	str	r0, [r4, #0]
 8014bc4:	6061      	str	r1, [r4, #4]
 8014bc6:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade, "7B");
 8014bc8:	687b      	ldr	r3, [r7, #4]
 8014bca:	33cc      	adds	r3, #204	; 0xcc
 8014bcc:	4a91      	ldr	r2, [pc, #580]	; (8014e14 <problem_fetch+0x13af4>)
 8014bce:	8811      	ldrh	r1, [r2, #0]
 8014bd0:	7892      	ldrb	r2, [r2, #2]
 8014bd2:	8019      	strh	r1, [r3, #0]
 8014bd4:	709a      	strb	r2, [r3, #2]
			break;
 8014bd6:	f006 b8e9 	b.w	801adac <problem_fetch+0x19a8c>
		case 647 :
			strcpy(p->name,"FRUIT CAKE");
 8014bda:	687b      	ldr	r3, [r7, #4]
 8014bdc:	337c      	adds	r3, #124	; 0x7c
 8014bde:	4992      	ldr	r1, [pc, #584]	; (8014e28 <problem_fetch+0x13b08>)
 8014be0:	461a      	mov	r2, r3
 8014be2:	460b      	mov	r3, r1
 8014be4:	cb03      	ldmia	r3!, {r0, r1}
 8014be6:	6010      	str	r0, [r2, #0]
 8014be8:	6051      	str	r1, [r2, #4]
 8014bea:	8819      	ldrh	r1, [r3, #0]
 8014bec:	789b      	ldrb	r3, [r3, #2]
 8014bee:	8111      	strh	r1, [r2, #8]
 8014bf0:	7293      	strb	r3, [r2, #10]
			p->moveSize = 6;
 8014bf2:	687b      	ldr	r3, [r7, #4]
 8014bf4:	2206      	movs	r2, #6
 8014bf6:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"G,E,F,E,D,D");
 8014bf8:	687b      	ldr	r3, [r7, #4]
 8014bfa:	3340      	adds	r3, #64	; 0x40
 8014bfc:	4a8b      	ldr	r2, [pc, #556]	; (8014e2c <problem_fetch+0x13b0c>)
 8014bfe:	461c      	mov	r4, r3
 8014c00:	4613      	mov	r3, r2
 8014c02:	cb07      	ldmia	r3!, {r0, r1, r2}
 8014c04:	6020      	str	r0, [r4, #0]
 8014c06:	6061      	str	r1, [r4, #4]
 8014c08:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,8,11,12,15,18");
 8014c0a:	687b      	ldr	r3, [r7, #4]
 8014c0c:	3304      	adds	r3, #4
 8014c0e:	4a88      	ldr	r2, [pc, #544]	; (8014e30 <problem_fetch+0x13b10>)
 8014c10:	461c      	mov	r4, r3
 8014c12:	4615      	mov	r5, r2
 8014c14:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8014c16:	6020      	str	r0, [r4, #0]
 8014c18:	6061      	str	r1, [r4, #4]
 8014c1a:	60a2      	str	r2, [r4, #8]
 8014c1c:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish, "s,d,d,d,d,e");
 8014c1e:	687b      	ldr	r3, [r7, #4]
 8014c20:	33d8      	adds	r3, #216	; 0xd8
 8014c22:	4a84      	ldr	r2, [pc, #528]	; (8014e34 <problem_fetch+0x13b14>)
 8014c24:	461c      	mov	r4, r3
 8014c26:	4613      	mov	r3, r2
 8014c28:	cb07      	ldmia	r3!, {r0, r1, r2}
 8014c2a:	6020      	str	r0, [r4, #0]
 8014c2c:	6061      	str	r1, [r4, #4]
 8014c2e:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade, "6B+");
 8014c30:	687b      	ldr	r3, [r7, #4]
 8014c32:	33cc      	adds	r3, #204	; 0xcc
 8014c34:	4a80      	ldr	r2, [pc, #512]	; (8014e38 <problem_fetch+0x13b18>)
 8014c36:	6810      	ldr	r0, [r2, #0]
 8014c38:	6018      	str	r0, [r3, #0]
			break;
 8014c3a:	f006 b8b7 	b.w	801adac <problem_fetch+0x19a8c>
		case 648 :
			strcpy(p->name,"OLYMPUS");
 8014c3e:	687b      	ldr	r3, [r7, #4]
 8014c40:	337c      	adds	r3, #124	; 0x7c
 8014c42:	497e      	ldr	r1, [pc, #504]	; (8014e3c <problem_fetch+0x13b1c>)
 8014c44:	461a      	mov	r2, r3
 8014c46:	460b      	mov	r3, r1
 8014c48:	cb03      	ldmia	r3!, {r0, r1}
 8014c4a:	6010      	str	r0, [r2, #0]
 8014c4c:	6051      	str	r1, [r2, #4]
			p->moveSize = 7;
 8014c4e:	687b      	ldr	r3, [r7, #4]
 8014c50:	2207      	movs	r2, #7
 8014c52:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"H,B,E,D,F,G,I");
 8014c54:	687b      	ldr	r3, [r7, #4]
 8014c56:	3340      	adds	r3, #64	; 0x40
 8014c58:	4a79      	ldr	r2, [pc, #484]	; (8014e40 <problem_fetch+0x13b20>)
 8014c5a:	461c      	mov	r4, r3
 8014c5c:	4613      	mov	r3, r2
 8014c5e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8014c60:	6020      	str	r0, [r4, #0]
 8014c62:	6061      	str	r1, [r4, #4]
 8014c64:	60a2      	str	r2, [r4, #8]
 8014c66:	881b      	ldrh	r3, [r3, #0]
 8014c68:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,6,9,11,13,15,18");
 8014c6a:	687b      	ldr	r3, [r7, #4]
 8014c6c:	3304      	adds	r3, #4
 8014c6e:	4a75      	ldr	r2, [pc, #468]	; (8014e44 <problem_fetch+0x13b24>)
 8014c70:	461d      	mov	r5, r3
 8014c72:	4614      	mov	r4, r2
 8014c74:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8014c76:	6028      	str	r0, [r5, #0]
 8014c78:	6069      	str	r1, [r5, #4]
 8014c7a:	60aa      	str	r2, [r5, #8]
 8014c7c:	60eb      	str	r3, [r5, #12]
 8014c7e:	8823      	ldrh	r3, [r4, #0]
 8014c80:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish, "s,d,d,d,d,d,e");
 8014c82:	687b      	ldr	r3, [r7, #4]
 8014c84:	33d8      	adds	r3, #216	; 0xd8
 8014c86:	4a70      	ldr	r2, [pc, #448]	; (8014e48 <problem_fetch+0x13b28>)
 8014c88:	461c      	mov	r4, r3
 8014c8a:	4613      	mov	r3, r2
 8014c8c:	cb07      	ldmia	r3!, {r0, r1, r2}
 8014c8e:	6020      	str	r0, [r4, #0]
 8014c90:	6061      	str	r1, [r4, #4]
 8014c92:	60a2      	str	r2, [r4, #8]
 8014c94:	881b      	ldrh	r3, [r3, #0]
 8014c96:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade, "7C");
 8014c98:	687b      	ldr	r3, [r7, #4]
 8014c9a:	33cc      	adds	r3, #204	; 0xcc
 8014c9c:	4a6b      	ldr	r2, [pc, #428]	; (8014e4c <problem_fetch+0x13b2c>)
 8014c9e:	8811      	ldrh	r1, [r2, #0]
 8014ca0:	7892      	ldrb	r2, [r2, #2]
 8014ca2:	8019      	strh	r1, [r3, #0]
 8014ca4:	709a      	strb	r2, [r3, #2]
			break;
 8014ca6:	f006 b881 	b.w	801adac <problem_fetch+0x19a8c>
		case 649 :
			strcpy(p->name,"EASE OF ACCESS");
 8014caa:	687b      	ldr	r3, [r7, #4]
 8014cac:	337c      	adds	r3, #124	; 0x7c
 8014cae:	4a68      	ldr	r2, [pc, #416]	; (8014e50 <problem_fetch+0x13b30>)
 8014cb0:	461c      	mov	r4, r3
 8014cb2:	4613      	mov	r3, r2
 8014cb4:	cb07      	ldmia	r3!, {r0, r1, r2}
 8014cb6:	6020      	str	r0, [r4, #0]
 8014cb8:	6061      	str	r1, [r4, #4]
 8014cba:	60a2      	str	r2, [r4, #8]
 8014cbc:	881a      	ldrh	r2, [r3, #0]
 8014cbe:	789b      	ldrb	r3, [r3, #2]
 8014cc0:	81a2      	strh	r2, [r4, #12]
 8014cc2:	73a3      	strb	r3, [r4, #14]
			p->moveSize = 9;
 8014cc4:	687b      	ldr	r3, [r7, #4]
 8014cc6:	2209      	movs	r2, #9
 8014cc8:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"H,K,J,E,J,J,H,E,D");
 8014cca:	687b      	ldr	r3, [r7, #4]
 8014ccc:	3340      	adds	r3, #64	; 0x40
 8014cce:	4a61      	ldr	r2, [pc, #388]	; (8014e54 <problem_fetch+0x13b34>)
 8014cd0:	461d      	mov	r5, r3
 8014cd2:	4614      	mov	r4, r2
 8014cd4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8014cd6:	6028      	str	r0, [r5, #0]
 8014cd8:	6069      	str	r1, [r5, #4]
 8014cda:	60aa      	str	r2, [r5, #8]
 8014cdc:	60eb      	str	r3, [r5, #12]
 8014cde:	8823      	ldrh	r3, [r4, #0]
 8014ce0:	822b      	strh	r3, [r5, #16]
			strcpy(p->moveNumbers,"5,9,7,9,13,16,16,16,18");
 8014ce2:	687b      	ldr	r3, [r7, #4]
 8014ce4:	3304      	adds	r3, #4
 8014ce6:	4a5c      	ldr	r2, [pc, #368]	; (8014e58 <problem_fetch+0x13b38>)
 8014ce8:	461c      	mov	r4, r3
 8014cea:	4615      	mov	r5, r2
 8014cec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8014cee:	6020      	str	r0, [r4, #0]
 8014cf0:	6061      	str	r1, [r4, #4]
 8014cf2:	60a2      	str	r2, [r4, #8]
 8014cf4:	60e3      	str	r3, [r4, #12]
 8014cf6:	6828      	ldr	r0, [r5, #0]
 8014cf8:	6120      	str	r0, [r4, #16]
 8014cfa:	88ab      	ldrh	r3, [r5, #4]
 8014cfc:	79aa      	ldrb	r2, [r5, #6]
 8014cfe:	82a3      	strh	r3, [r4, #20]
 8014d00:	4613      	mov	r3, r2
 8014d02:	75a3      	strb	r3, [r4, #22]
			strcpy(p->startFinish, "s,d,d,d,d,d,d,d,e");
 8014d04:	687b      	ldr	r3, [r7, #4]
 8014d06:	33d8      	adds	r3, #216	; 0xd8
 8014d08:	4a54      	ldr	r2, [pc, #336]	; (8014e5c <problem_fetch+0x13b3c>)
 8014d0a:	461d      	mov	r5, r3
 8014d0c:	4614      	mov	r4, r2
 8014d0e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8014d10:	6028      	str	r0, [r5, #0]
 8014d12:	6069      	str	r1, [r5, #4]
 8014d14:	60aa      	str	r2, [r5, #8]
 8014d16:	60eb      	str	r3, [r5, #12]
 8014d18:	8823      	ldrh	r3, [r4, #0]
 8014d1a:	822b      	strh	r3, [r5, #16]
			strcpy(p->grade, "6C+");
 8014d1c:	687b      	ldr	r3, [r7, #4]
 8014d1e:	33cc      	adds	r3, #204	; 0xcc
 8014d20:	4a4f      	ldr	r2, [pc, #316]	; (8014e60 <problem_fetch+0x13b40>)
 8014d22:	6810      	ldr	r0, [r2, #0]
 8014d24:	6018      	str	r0, [r3, #0]
			break;
 8014d26:	f006 b841 	b.w	801adac <problem_fetch+0x19a8c>
		case 65 :
			strcpy(p->name,"FULCO");
 8014d2a:	687b      	ldr	r3, [r7, #4]
 8014d2c:	337c      	adds	r3, #124	; 0x7c
 8014d2e:	4a4d      	ldr	r2, [pc, #308]	; (8014e64 <problem_fetch+0x13b44>)
 8014d30:	6810      	ldr	r0, [r2, #0]
 8014d32:	6018      	str	r0, [r3, #0]
 8014d34:	8892      	ldrh	r2, [r2, #4]
 8014d36:	809a      	strh	r2, [r3, #4]
			p->moveSize = 7;
 8014d38:	687b      	ldr	r3, [r7, #4]
 8014d3a:	2207      	movs	r2, #7
 8014d3c:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"G,G,I,D,G,E,D");
 8014d3e:	687b      	ldr	r3, [r7, #4]
 8014d40:	3340      	adds	r3, #64	; 0x40
 8014d42:	4a49      	ldr	r2, [pc, #292]	; (8014e68 <problem_fetch+0x13b48>)
 8014d44:	461c      	mov	r4, r3
 8014d46:	4613      	mov	r3, r2
 8014d48:	cb07      	ldmia	r3!, {r0, r1, r2}
 8014d4a:	6020      	str	r0, [r4, #0]
 8014d4c:	6061      	str	r1, [r4, #4]
 8014d4e:	60a2      	str	r2, [r4, #8]
 8014d50:	881b      	ldrh	r3, [r3, #0]
 8014d52:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,6,9,11,14,16,18");
 8014d54:	687b      	ldr	r3, [r7, #4]
 8014d56:	3304      	adds	r3, #4
 8014d58:	4a44      	ldr	r2, [pc, #272]	; (8014e6c <problem_fetch+0x13b4c>)
 8014d5a:	461d      	mov	r5, r3
 8014d5c:	4614      	mov	r4, r2
 8014d5e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8014d60:	6028      	str	r0, [r5, #0]
 8014d62:	6069      	str	r1, [r5, #4]
 8014d64:	60aa      	str	r2, [r5, #8]
 8014d66:	60eb      	str	r3, [r5, #12]
 8014d68:	8823      	ldrh	r3, [r4, #0]
 8014d6a:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish, "s,s,d,d,d,d,e");
 8014d6c:	687b      	ldr	r3, [r7, #4]
 8014d6e:	33d8      	adds	r3, #216	; 0xd8
 8014d70:	4a3f      	ldr	r2, [pc, #252]	; (8014e70 <problem_fetch+0x13b50>)
 8014d72:	461c      	mov	r4, r3
 8014d74:	4613      	mov	r3, r2
 8014d76:	cb07      	ldmia	r3!, {r0, r1, r2}
 8014d78:	6020      	str	r0, [r4, #0]
 8014d7a:	6061      	str	r1, [r4, #4]
 8014d7c:	60a2      	str	r2, [r4, #8]
 8014d7e:	881b      	ldrh	r3, [r3, #0]
 8014d80:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade, "6C");
 8014d82:	687b      	ldr	r3, [r7, #4]
 8014d84:	33cc      	adds	r3, #204	; 0xcc
 8014d86:	4a3b      	ldr	r2, [pc, #236]	; (8014e74 <problem_fetch+0x13b54>)
 8014d88:	8811      	ldrh	r1, [r2, #0]
 8014d8a:	7892      	ldrb	r2, [r2, #2]
 8014d8c:	8019      	strh	r1, [r3, #0]
 8014d8e:	709a      	strb	r2, [r3, #2]
			break;
 8014d90:	f006 b80c 	b.w	801adac <problem_fetch+0x19a8c>
		case 650 :
			strcpy(p->name,"LAP OF LUXURY");
 8014d94:	687b      	ldr	r3, [r7, #4]
 8014d96:	337c      	adds	r3, #124	; 0x7c
 8014d98:	4a37      	ldr	r2, [pc, #220]	; (8014e78 <problem_fetch+0x13b58>)
 8014d9a:	461c      	mov	r4, r3
 8014d9c:	4613      	mov	r3, r2
 8014d9e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8014da0:	6020      	str	r0, [r4, #0]
 8014da2:	6061      	str	r1, [r4, #4]
 8014da4:	60a2      	str	r2, [r4, #8]
 8014da6:	881b      	ldrh	r3, [r3, #0]
 8014da8:	81a3      	strh	r3, [r4, #12]
			p->moveSize = 7;
 8014daa:	687b      	ldr	r3, [r7, #4]
 8014dac:	2207      	movs	r2, #7
 8014dae:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"H,D,E,B,E,E,I");
 8014db0:	687b      	ldr	r3, [r7, #4]
 8014db2:	3340      	adds	r3, #64	; 0x40
 8014db4:	4a31      	ldr	r2, [pc, #196]	; (8014e7c <problem_fetch+0x13b5c>)
 8014db6:	461c      	mov	r4, r3
 8014db8:	4613      	mov	r3, r2
 8014dba:	cb07      	ldmia	r3!, {r0, r1, r2}
 8014dbc:	6020      	str	r0, [r4, #0]
 8014dbe:	6061      	str	r1, [r4, #4]
 8014dc0:	60a2      	str	r2, [r4, #8]
 8014dc2:	881b      	ldrh	r3, [r3, #0]
 8014dc4:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,7,9,10,12,16,18");
 8014dc6:	687b      	ldr	r3, [r7, #4]
 8014dc8:	3304      	adds	r3, #4
 8014dca:	4a2d      	ldr	r2, [pc, #180]	; (8014e80 <problem_fetch+0x13b60>)
 8014dcc:	461d      	mov	r5, r3
 8014dce:	4614      	mov	r4, r2
 8014dd0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8014dd2:	6028      	str	r0, [r5, #0]
 8014dd4:	6069      	str	r1, [r5, #4]
 8014dd6:	60aa      	str	r2, [r5, #8]
 8014dd8:	60eb      	str	r3, [r5, #12]
 8014dda:	8823      	ldrh	r3, [r4, #0]
 8014ddc:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish, "s,d,d,d,d,d,e");
 8014dde:	687b      	ldr	r3, [r7, #4]
 8014de0:	33d8      	adds	r3, #216	; 0xd8
 8014de2:	4a19      	ldr	r2, [pc, #100]	; (8014e48 <problem_fetch+0x13b28>)
 8014de4:	461c      	mov	r4, r3
 8014de6:	4613      	mov	r3, r2
 8014de8:	cb07      	ldmia	r3!, {r0, r1, r2}
 8014dea:	6020      	str	r0, [r4, #0]
 8014dec:	6061      	str	r1, [r4, #4]
 8014dee:	60a2      	str	r2, [r4, #8]
 8014df0:	881b      	ldrh	r3, [r3, #0]
 8014df2:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade, "6C+");
 8014df4:	687b      	ldr	r3, [r7, #4]
 8014df6:	33cc      	adds	r3, #204	; 0xcc
 8014df8:	4a19      	ldr	r2, [pc, #100]	; (8014e60 <problem_fetch+0x13b40>)
 8014dfa:	6810      	ldr	r0, [r2, #0]
 8014dfc:	6018      	str	r0, [r3, #0]
			break;
 8014dfe:	f005 bfd5 	b.w	801adac <problem_fetch+0x19a8c>
 8014e02:	bf00      	nop
 8014e04:	08028390 	.word	0x08028390
 8014e08:	0802839c 	.word	0x0802839c
 8014e0c:	080283a8 	.word	0x080283a8
 8014e10:	080283b8 	.word	0x080283b8
 8014e14:	0802132c 	.word	0x0802132c
 8014e18:	080283c4 	.word	0x080283c4
 8014e1c:	080283d4 	.word	0x080283d4
 8014e20:	080283e0 	.word	0x080283e0
 8014e24:	08021910 	.word	0x08021910
 8014e28:	080283f0 	.word	0x080283f0
 8014e2c:	080283fc 	.word	0x080283fc
 8014e30:	08028408 	.word	0x08028408
 8014e34:	0802139c 	.word	0x0802139c
 8014e38:	080212b0 	.word	0x080212b0
 8014e3c:	08028418 	.word	0x08028418
 8014e40:	08028420 	.word	0x08028420
 8014e44:	08028430 	.word	0x08028430
 8014e48:	08021494 	.word	0x08021494
 8014e4c:	0802158c 	.word	0x0802158c
 8014e50:	08028444 	.word	0x08028444
 8014e54:	08028454 	.word	0x08028454
 8014e58:	08028468 	.word	0x08028468
 8014e5c:	08023990 	.word	0x08023990
 8014e60:	080213a8 	.word	0x080213a8
 8014e64:	08028480 	.word	0x08028480
 8014e68:	08028488 	.word	0x08028488
 8014e6c:	08028498 	.word	0x08028498
 8014e70:	080212a0 	.word	0x080212a0
 8014e74:	08021370 	.word	0x08021370
 8014e78:	080284ac 	.word	0x080284ac
 8014e7c:	080284bc 	.word	0x080284bc
 8014e80:	080284cc 	.word	0x080284cc
		case 651 :
			strcpy(p->name,"DARK HORSE");
 8014e84:	687b      	ldr	r3, [r7, #4]
 8014e86:	337c      	adds	r3, #124	; 0x7c
 8014e88:	49a7      	ldr	r1, [pc, #668]	; (8015128 <problem_fetch+0x13e08>)
 8014e8a:	461a      	mov	r2, r3
 8014e8c:	460b      	mov	r3, r1
 8014e8e:	cb03      	ldmia	r3!, {r0, r1}
 8014e90:	6010      	str	r0, [r2, #0]
 8014e92:	6051      	str	r1, [r2, #4]
 8014e94:	8819      	ldrh	r1, [r3, #0]
 8014e96:	789b      	ldrb	r3, [r3, #2]
 8014e98:	8111      	strh	r1, [r2, #8]
 8014e9a:	7293      	strb	r3, [r2, #10]
			p->moveSize = 7;
 8014e9c:	687b      	ldr	r3, [r7, #4]
 8014e9e:	2207      	movs	r2, #7
 8014ea0:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"C,G,H,F,I,D,E");
 8014ea2:	687b      	ldr	r3, [r7, #4]
 8014ea4:	3340      	adds	r3, #64	; 0x40
 8014ea6:	4aa1      	ldr	r2, [pc, #644]	; (801512c <problem_fetch+0x13e0c>)
 8014ea8:	461c      	mov	r4, r3
 8014eaa:	4613      	mov	r3, r2
 8014eac:	cb07      	ldmia	r3!, {r0, r1, r2}
 8014eae:	6020      	str	r0, [r4, #0]
 8014eb0:	6061      	str	r1, [r4, #4]
 8014eb2:	60a2      	str	r2, [r4, #8]
 8014eb4:	881b      	ldrh	r3, [r3, #0]
 8014eb6:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,6,8,13,10,18,16");
 8014eb8:	687b      	ldr	r3, [r7, #4]
 8014eba:	3304      	adds	r3, #4
 8014ebc:	4a9c      	ldr	r2, [pc, #624]	; (8015130 <problem_fetch+0x13e10>)
 8014ebe:	461d      	mov	r5, r3
 8014ec0:	4614      	mov	r4, r2
 8014ec2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8014ec4:	6028      	str	r0, [r5, #0]
 8014ec6:	6069      	str	r1, [r5, #4]
 8014ec8:	60aa      	str	r2, [r5, #8]
 8014eca:	60eb      	str	r3, [r5, #12]
 8014ecc:	8823      	ldrh	r3, [r4, #0]
 8014ece:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish, "s,d,d,d,d,e,d");
 8014ed0:	687b      	ldr	r3, [r7, #4]
 8014ed2:	33d8      	adds	r3, #216	; 0xd8
 8014ed4:	4a97      	ldr	r2, [pc, #604]	; (8015134 <problem_fetch+0x13e14>)
 8014ed6:	461c      	mov	r4, r3
 8014ed8:	4613      	mov	r3, r2
 8014eda:	cb07      	ldmia	r3!, {r0, r1, r2}
 8014edc:	6020      	str	r0, [r4, #0]
 8014ede:	6061      	str	r1, [r4, #4]
 8014ee0:	60a2      	str	r2, [r4, #8]
 8014ee2:	881b      	ldrh	r3, [r3, #0]
 8014ee4:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade, "7B+");
 8014ee6:	687b      	ldr	r3, [r7, #4]
 8014ee8:	33cc      	adds	r3, #204	; 0xcc
 8014eea:	4a93      	ldr	r2, [pc, #588]	; (8015138 <problem_fetch+0x13e18>)
 8014eec:	6810      	ldr	r0, [r2, #0]
 8014eee:	6018      	str	r0, [r3, #0]
			break;
 8014ef0:	f005 bf5c 	b.w	801adac <problem_fetch+0x19a8c>
		case 652 :
			strcpy(p->name,"GILDA");
 8014ef4:	687b      	ldr	r3, [r7, #4]
 8014ef6:	337c      	adds	r3, #124	; 0x7c
 8014ef8:	4a90      	ldr	r2, [pc, #576]	; (801513c <problem_fetch+0x13e1c>)
 8014efa:	6810      	ldr	r0, [r2, #0]
 8014efc:	6018      	str	r0, [r3, #0]
 8014efe:	8892      	ldrh	r2, [r2, #4]
 8014f00:	809a      	strh	r2, [r3, #4]
			p->moveSize = 8;
 8014f02:	687b      	ldr	r3, [r7, #4]
 8014f04:	2208      	movs	r2, #8
 8014f06:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"G,G,J,G,E,I,H,I");
 8014f08:	687b      	ldr	r3, [r7, #4]
 8014f0a:	3340      	adds	r3, #64	; 0x40
 8014f0c:	4a8c      	ldr	r2, [pc, #560]	; (8015140 <problem_fetch+0x13e20>)
 8014f0e:	461c      	mov	r4, r3
 8014f10:	4615      	mov	r5, r2
 8014f12:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8014f14:	6020      	str	r0, [r4, #0]
 8014f16:	6061      	str	r1, [r4, #4]
 8014f18:	60a2      	str	r2, [r4, #8]
 8014f1a:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,6,7,9,12,14,16,18");
 8014f1c:	687b      	ldr	r3, [r7, #4]
 8014f1e:	3304      	adds	r3, #4
 8014f20:	4a88      	ldr	r2, [pc, #544]	; (8015144 <problem_fetch+0x13e24>)
 8014f22:	461d      	mov	r5, r3
 8014f24:	4614      	mov	r4, r2
 8014f26:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8014f28:	6028      	str	r0, [r5, #0]
 8014f2a:	6069      	str	r1, [r5, #4]
 8014f2c:	60aa      	str	r2, [r5, #8]
 8014f2e:	60eb      	str	r3, [r5, #12]
 8014f30:	6820      	ldr	r0, [r4, #0]
 8014f32:	6128      	str	r0, [r5, #16]
			strcpy(p->startFinish, "s,d,d,d,d,d,d,e");
 8014f34:	687b      	ldr	r3, [r7, #4]
 8014f36:	33d8      	adds	r3, #216	; 0xd8
 8014f38:	4a83      	ldr	r2, [pc, #524]	; (8015148 <problem_fetch+0x13e28>)
 8014f3a:	461c      	mov	r4, r3
 8014f3c:	4615      	mov	r5, r2
 8014f3e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8014f40:	6020      	str	r0, [r4, #0]
 8014f42:	6061      	str	r1, [r4, #4]
 8014f44:	60a2      	str	r2, [r4, #8]
 8014f46:	60e3      	str	r3, [r4, #12]
			strcpy(p->grade, "6C");
 8014f48:	687b      	ldr	r3, [r7, #4]
 8014f4a:	33cc      	adds	r3, #204	; 0xcc
 8014f4c:	4a7f      	ldr	r2, [pc, #508]	; (801514c <problem_fetch+0x13e2c>)
 8014f4e:	8811      	ldrh	r1, [r2, #0]
 8014f50:	7892      	ldrb	r2, [r2, #2]
 8014f52:	8019      	strh	r1, [r3, #0]
 8014f54:	709a      	strb	r2, [r3, #2]
			break;
 8014f56:	f005 bf29 	b.w	801adac <problem_fetch+0x19a8c>
		case 653 :
			strcpy(p->name,"BLUE BOWLS");
 8014f5a:	687b      	ldr	r3, [r7, #4]
 8014f5c:	337c      	adds	r3, #124	; 0x7c
 8014f5e:	497c      	ldr	r1, [pc, #496]	; (8015150 <problem_fetch+0x13e30>)
 8014f60:	461a      	mov	r2, r3
 8014f62:	460b      	mov	r3, r1
 8014f64:	cb03      	ldmia	r3!, {r0, r1}
 8014f66:	6010      	str	r0, [r2, #0]
 8014f68:	6051      	str	r1, [r2, #4]
 8014f6a:	8819      	ldrh	r1, [r3, #0]
 8014f6c:	789b      	ldrb	r3, [r3, #2]
 8014f6e:	8111      	strh	r1, [r2, #8]
 8014f70:	7293      	strb	r3, [r2, #10]
			p->moveSize = 8;
 8014f72:	687b      	ldr	r3, [r7, #4]
 8014f74:	2208      	movs	r2, #8
 8014f76:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"G,E,I,H,G,D,H,J");
 8014f78:	687b      	ldr	r3, [r7, #4]
 8014f7a:	3340      	adds	r3, #64	; 0x40
 8014f7c:	4a75      	ldr	r2, [pc, #468]	; (8015154 <problem_fetch+0x13e34>)
 8014f7e:	461c      	mov	r4, r3
 8014f80:	4615      	mov	r5, r2
 8014f82:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8014f84:	6020      	str	r0, [r4, #0]
 8014f86:	6061      	str	r1, [r4, #4]
 8014f88:	60a2      	str	r2, [r4, #8]
 8014f8a:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"9,12,14,16,17,18,5,5");
 8014f8c:	687b      	ldr	r3, [r7, #4]
 8014f8e:	3304      	adds	r3, #4
 8014f90:	4a71      	ldr	r2, [pc, #452]	; (8015158 <problem_fetch+0x13e38>)
 8014f92:	461d      	mov	r5, r3
 8014f94:	4614      	mov	r4, r2
 8014f96:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8014f98:	6028      	str	r0, [r5, #0]
 8014f9a:	6069      	str	r1, [r5, #4]
 8014f9c:	60aa      	str	r2, [r5, #8]
 8014f9e:	60eb      	str	r3, [r5, #12]
 8014fa0:	6820      	ldr	r0, [r4, #0]
 8014fa2:	6128      	str	r0, [r5, #16]
 8014fa4:	7923      	ldrb	r3, [r4, #4]
 8014fa6:	752b      	strb	r3, [r5, #20]
			strcpy(p->startFinish, "d,d,d,d,d,e,s,s");
 8014fa8:	687b      	ldr	r3, [r7, #4]
 8014faa:	33d8      	adds	r3, #216	; 0xd8
 8014fac:	4a6b      	ldr	r2, [pc, #428]	; (801515c <problem_fetch+0x13e3c>)
 8014fae:	461c      	mov	r4, r3
 8014fb0:	4615      	mov	r5, r2
 8014fb2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8014fb4:	6020      	str	r0, [r4, #0]
 8014fb6:	6061      	str	r1, [r4, #4]
 8014fb8:	60a2      	str	r2, [r4, #8]
 8014fba:	60e3      	str	r3, [r4, #12]
			strcpy(p->grade, "6C+");
 8014fbc:	687b      	ldr	r3, [r7, #4]
 8014fbe:	33cc      	adds	r3, #204	; 0xcc
 8014fc0:	4a67      	ldr	r2, [pc, #412]	; (8015160 <problem_fetch+0x13e40>)
 8014fc2:	6810      	ldr	r0, [r2, #0]
 8014fc4:	6018      	str	r0, [r3, #0]
			break;
 8014fc6:	f005 bef1 	b.w	801adac <problem_fetch+0x19a8c>
		case 654 :
			strcpy(p->name,"THE FORGOTTEN ONES");
 8014fca:	687b      	ldr	r3, [r7, #4]
 8014fcc:	337c      	adds	r3, #124	; 0x7c
 8014fce:	4a65      	ldr	r2, [pc, #404]	; (8015164 <problem_fetch+0x13e44>)
 8014fd0:	461d      	mov	r5, r3
 8014fd2:	4614      	mov	r4, r2
 8014fd4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8014fd6:	6028      	str	r0, [r5, #0]
 8014fd8:	6069      	str	r1, [r5, #4]
 8014fda:	60aa      	str	r2, [r5, #8]
 8014fdc:	60eb      	str	r3, [r5, #12]
 8014fde:	8823      	ldrh	r3, [r4, #0]
 8014fe0:	78a2      	ldrb	r2, [r4, #2]
 8014fe2:	822b      	strh	r3, [r5, #16]
 8014fe4:	4613      	mov	r3, r2
 8014fe6:	74ab      	strb	r3, [r5, #18]
			p->moveSize = 8;
 8014fe8:	687b      	ldr	r3, [r7, #4]
 8014fea:	2208      	movs	r2, #8
 8014fec:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"C,B,A,F,F,K,I,I");
 8014fee:	687b      	ldr	r3, [r7, #4]
 8014ff0:	3340      	adds	r3, #64	; 0x40
 8014ff2:	4a5d      	ldr	r2, [pc, #372]	; (8015168 <problem_fetch+0x13e48>)
 8014ff4:	461c      	mov	r4, r3
 8014ff6:	4615      	mov	r5, r2
 8014ff8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8014ffa:	6020      	str	r0, [r4, #0]
 8014ffc:	6061      	str	r1, [r4, #4]
 8014ffe:	60a2      	str	r2, [r4, #8]
 8015000:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,6,9,11,13,14,15,18");
 8015002:	687b      	ldr	r3, [r7, #4]
 8015004:	3304      	adds	r3, #4
 8015006:	4a59      	ldr	r2, [pc, #356]	; (801516c <problem_fetch+0x13e4c>)
 8015008:	461d      	mov	r5, r3
 801500a:	4614      	mov	r4, r2
 801500c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801500e:	6028      	str	r0, [r5, #0]
 8015010:	6069      	str	r1, [r5, #4]
 8015012:	60aa      	str	r2, [r5, #8]
 8015014:	60eb      	str	r3, [r5, #12]
 8015016:	6820      	ldr	r0, [r4, #0]
 8015018:	6128      	str	r0, [r5, #16]
 801501a:	7923      	ldrb	r3, [r4, #4]
 801501c:	752b      	strb	r3, [r5, #20]
			strcpy(p->startFinish, "s,s,d,d,d,d,d,e");
 801501e:	687b      	ldr	r3, [r7, #4]
 8015020:	33d8      	adds	r3, #216	; 0xd8
 8015022:	4a53      	ldr	r2, [pc, #332]	; (8015170 <problem_fetch+0x13e50>)
 8015024:	461c      	mov	r4, r3
 8015026:	4615      	mov	r5, r2
 8015028:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801502a:	6020      	str	r0, [r4, #0]
 801502c:	6061      	str	r1, [r4, #4]
 801502e:	60a2      	str	r2, [r4, #8]
 8015030:	60e3      	str	r3, [r4, #12]
			strcpy(p->grade, "7A+");
 8015032:	687b      	ldr	r3, [r7, #4]
 8015034:	33cc      	adds	r3, #204	; 0xcc
 8015036:	4a4f      	ldr	r2, [pc, #316]	; (8015174 <problem_fetch+0x13e54>)
 8015038:	6810      	ldr	r0, [r2, #0]
 801503a:	6018      	str	r0, [r3, #0]
			break;
 801503c:	f005 beb6 	b.w	801adac <problem_fetch+0x19a8c>
		case 655 :
			strcpy(p->name,"GAMBIT");
 8015040:	687b      	ldr	r3, [r7, #4]
 8015042:	337c      	adds	r3, #124	; 0x7c
 8015044:	4a4c      	ldr	r2, [pc, #304]	; (8015178 <problem_fetch+0x13e58>)
 8015046:	6810      	ldr	r0, [r2, #0]
 8015048:	6018      	str	r0, [r3, #0]
 801504a:	8891      	ldrh	r1, [r2, #4]
 801504c:	7992      	ldrb	r2, [r2, #6]
 801504e:	8099      	strh	r1, [r3, #4]
 8015050:	719a      	strb	r2, [r3, #6]
			p->moveSize = 5;
 8015052:	687b      	ldr	r3, [r7, #4]
 8015054:	2205      	movs	r2, #5
 8015056:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"H,I,E,D,A");
 8015058:	687b      	ldr	r3, [r7, #4]
 801505a:	3340      	adds	r3, #64	; 0x40
 801505c:	4947      	ldr	r1, [pc, #284]	; (801517c <problem_fetch+0x13e5c>)
 801505e:	461a      	mov	r2, r3
 8015060:	460b      	mov	r3, r1
 8015062:	cb03      	ldmia	r3!, {r0, r1}
 8015064:	6010      	str	r0, [r2, #0]
 8015066:	6051      	str	r1, [r2, #4]
 8015068:	881b      	ldrh	r3, [r3, #0]
 801506a:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"5,10,12,15,18");
 801506c:	687b      	ldr	r3, [r7, #4]
 801506e:	3304      	adds	r3, #4
 8015070:	4a43      	ldr	r2, [pc, #268]	; (8015180 <problem_fetch+0x13e60>)
 8015072:	461c      	mov	r4, r3
 8015074:	4613      	mov	r3, r2
 8015076:	cb07      	ldmia	r3!, {r0, r1, r2}
 8015078:	6020      	str	r0, [r4, #0]
 801507a:	6061      	str	r1, [r4, #4]
 801507c:	60a2      	str	r2, [r4, #8]
 801507e:	881b      	ldrh	r3, [r3, #0]
 8015080:	81a3      	strh	r3, [r4, #12]
			strcpy(p->startFinish, "s,d,d,d,e");
 8015082:	687b      	ldr	r3, [r7, #4]
 8015084:	33d8      	adds	r3, #216	; 0xd8
 8015086:	493f      	ldr	r1, [pc, #252]	; (8015184 <problem_fetch+0x13e64>)
 8015088:	461a      	mov	r2, r3
 801508a:	460b      	mov	r3, r1
 801508c:	cb03      	ldmia	r3!, {r0, r1}
 801508e:	6010      	str	r0, [r2, #0]
 8015090:	6051      	str	r1, [r2, #4]
 8015092:	881b      	ldrh	r3, [r3, #0]
 8015094:	8113      	strh	r3, [r2, #8]
			strcpy(p->grade, "7A");
 8015096:	687b      	ldr	r3, [r7, #4]
 8015098:	33cc      	adds	r3, #204	; 0xcc
 801509a:	4a3b      	ldr	r2, [pc, #236]	; (8015188 <problem_fetch+0x13e68>)
 801509c:	8811      	ldrh	r1, [r2, #0]
 801509e:	7892      	ldrb	r2, [r2, #2]
 80150a0:	8019      	strh	r1, [r3, #0]
 80150a2:	709a      	strb	r2, [r3, #2]
			break;
 80150a4:	f005 be82 	b.w	801adac <problem_fetch+0x19a8c>
		case 656 :
			strcpy(p->name,"OLI'S YELLOW FEVA");
 80150a8:	687b      	ldr	r3, [r7, #4]
 80150aa:	337c      	adds	r3, #124	; 0x7c
 80150ac:	4a37      	ldr	r2, [pc, #220]	; (801518c <problem_fetch+0x13e6c>)
 80150ae:	461d      	mov	r5, r3
 80150b0:	4614      	mov	r4, r2
 80150b2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80150b4:	6028      	str	r0, [r5, #0]
 80150b6:	6069      	str	r1, [r5, #4]
 80150b8:	60aa      	str	r2, [r5, #8]
 80150ba:	60eb      	str	r3, [r5, #12]
 80150bc:	8823      	ldrh	r3, [r4, #0]
 80150be:	822b      	strh	r3, [r5, #16]
			p->moveSize = 9;
 80150c0:	687b      	ldr	r3, [r7, #4]
 80150c2:	2209      	movs	r2, #9
 80150c4:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"G,E,E,H,H,F,G,I,I");
 80150c6:	687b      	ldr	r3, [r7, #4]
 80150c8:	3340      	adds	r3, #64	; 0x40
 80150ca:	4a31      	ldr	r2, [pc, #196]	; (8015190 <problem_fetch+0x13e70>)
 80150cc:	461d      	mov	r5, r3
 80150ce:	4614      	mov	r4, r2
 80150d0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80150d2:	6028      	str	r0, [r5, #0]
 80150d4:	6069      	str	r1, [r5, #4]
 80150d6:	60aa      	str	r2, [r5, #8]
 80150d8:	60eb      	str	r3, [r5, #12]
 80150da:	8823      	ldrh	r3, [r4, #0]
 80150dc:	822b      	strh	r3, [r5, #16]
			strcpy(p->moveNumbers,"4,6,8,5,10,11,14,14,18");
 80150de:	687b      	ldr	r3, [r7, #4]
 80150e0:	3304      	adds	r3, #4
 80150e2:	4a2c      	ldr	r2, [pc, #176]	; (8015194 <problem_fetch+0x13e74>)
 80150e4:	461c      	mov	r4, r3
 80150e6:	4615      	mov	r5, r2
 80150e8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80150ea:	6020      	str	r0, [r4, #0]
 80150ec:	6061      	str	r1, [r4, #4]
 80150ee:	60a2      	str	r2, [r4, #8]
 80150f0:	60e3      	str	r3, [r4, #12]
 80150f2:	6828      	ldr	r0, [r5, #0]
 80150f4:	6120      	str	r0, [r4, #16]
 80150f6:	88ab      	ldrh	r3, [r5, #4]
 80150f8:	79aa      	ldrb	r2, [r5, #6]
 80150fa:	82a3      	strh	r3, [r4, #20]
 80150fc:	4613      	mov	r3, r2
 80150fe:	75a3      	strb	r3, [r4, #22]
			strcpy(p->startFinish, "s,d,d,d,d,d,d,d,e");
 8015100:	687b      	ldr	r3, [r7, #4]
 8015102:	33d8      	adds	r3, #216	; 0xd8
 8015104:	4a24      	ldr	r2, [pc, #144]	; (8015198 <problem_fetch+0x13e78>)
 8015106:	461d      	mov	r5, r3
 8015108:	4614      	mov	r4, r2
 801510a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801510c:	6028      	str	r0, [r5, #0]
 801510e:	6069      	str	r1, [r5, #4]
 8015110:	60aa      	str	r2, [r5, #8]
 8015112:	60eb      	str	r3, [r5, #12]
 8015114:	8823      	ldrh	r3, [r4, #0]
 8015116:	822b      	strh	r3, [r5, #16]
			strcpy(p->grade, "6B+");
 8015118:	687b      	ldr	r3, [r7, #4]
 801511a:	33cc      	adds	r3, #204	; 0xcc
 801511c:	4a1f      	ldr	r2, [pc, #124]	; (801519c <problem_fetch+0x13e7c>)
 801511e:	6810      	ldr	r0, [r2, #0]
 8015120:	6018      	str	r0, [r3, #0]
			break;
 8015122:	f005 be43 	b.w	801adac <problem_fetch+0x19a8c>
 8015126:	bf00      	nop
 8015128:	080284e0 	.word	0x080284e0
 801512c:	080284ec 	.word	0x080284ec
 8015130:	080284fc 	.word	0x080284fc
 8015134:	08028510 	.word	0x08028510
 8015138:	08021848 	.word	0x08021848
 801513c:	08028520 	.word	0x08028520
 8015140:	08028528 	.word	0x08028528
 8015144:	08028538 	.word	0x08028538
 8015148:	08021458 	.word	0x08021458
 801514c:	08021370 	.word	0x08021370
 8015150:	0802854c 	.word	0x0802854c
 8015154:	08028558 	.word	0x08028558
 8015158:	08028568 	.word	0x08028568
 801515c:	08028580 	.word	0x08028580
 8015160:	080213a8 	.word	0x080213a8
 8015164:	08028590 	.word	0x08028590
 8015168:	080285a4 	.word	0x080285a4
 801516c:	080285b4 	.word	0x080285b4
 8015170:	080214cc 	.word	0x080214cc
 8015174:	08021424 	.word	0x08021424
 8015178:	080285cc 	.word	0x080285cc
 801517c:	080285d4 	.word	0x080285d4
 8015180:	08028224 	.word	0x08028224
 8015184:	08021320 	.word	0x08021320
 8015188:	080212f4 	.word	0x080212f4
 801518c:	080285e0 	.word	0x080285e0
 8015190:	080285f4 	.word	0x080285f4
 8015194:	08028608 	.word	0x08028608
 8015198:	08023990 	.word	0x08023990
 801519c:	080212b0 	.word	0x080212b0
		case 657 :
			strcpy(p->name,"ELEMENTS OF STYLE");
 80151a0:	687b      	ldr	r3, [r7, #4]
 80151a2:	337c      	adds	r3, #124	; 0x7c
 80151a4:	4ab8      	ldr	r2, [pc, #736]	; (8015488 <problem_fetch+0x14168>)
 80151a6:	461d      	mov	r5, r3
 80151a8:	4614      	mov	r4, r2
 80151aa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80151ac:	6028      	str	r0, [r5, #0]
 80151ae:	6069      	str	r1, [r5, #4]
 80151b0:	60aa      	str	r2, [r5, #8]
 80151b2:	60eb      	str	r3, [r5, #12]
 80151b4:	8823      	ldrh	r3, [r4, #0]
 80151b6:	822b      	strh	r3, [r5, #16]
			p->moveSize = 6;
 80151b8:	687b      	ldr	r3, [r7, #4]
 80151ba:	2206      	movs	r2, #6
 80151bc:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"H,J,D,F,A,D");
 80151be:	687b      	ldr	r3, [r7, #4]
 80151c0:	3340      	adds	r3, #64	; 0x40
 80151c2:	4ab2      	ldr	r2, [pc, #712]	; (801548c <problem_fetch+0x1416c>)
 80151c4:	461c      	mov	r4, r3
 80151c6:	4613      	mov	r3, r2
 80151c8:	cb07      	ldmia	r3!, {r0, r1, r2}
 80151ca:	6020      	str	r0, [r4, #0]
 80151cc:	6061      	str	r1, [r4, #4]
 80151ce:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,5,7,11,14,18");
 80151d0:	687b      	ldr	r3, [r7, #4]
 80151d2:	3304      	adds	r3, #4
 80151d4:	4aae      	ldr	r2, [pc, #696]	; (8015490 <problem_fetch+0x14170>)
 80151d6:	461c      	mov	r4, r3
 80151d8:	4613      	mov	r3, r2
 80151da:	cb07      	ldmia	r3!, {r0, r1, r2}
 80151dc:	6020      	str	r0, [r4, #0]
 80151de:	6061      	str	r1, [r4, #4]
 80151e0:	60a2      	str	r2, [r4, #8]
 80151e2:	881a      	ldrh	r2, [r3, #0]
 80151e4:	789b      	ldrb	r3, [r3, #2]
 80151e6:	81a2      	strh	r2, [r4, #12]
 80151e8:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish, "s,d,d,d,d,e");
 80151ea:	687b      	ldr	r3, [r7, #4]
 80151ec:	33d8      	adds	r3, #216	; 0xd8
 80151ee:	4aa9      	ldr	r2, [pc, #676]	; (8015494 <problem_fetch+0x14174>)
 80151f0:	461c      	mov	r4, r3
 80151f2:	4613      	mov	r3, r2
 80151f4:	cb07      	ldmia	r3!, {r0, r1, r2}
 80151f6:	6020      	str	r0, [r4, #0]
 80151f8:	6061      	str	r1, [r4, #4]
 80151fa:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade, "7A");
 80151fc:	687b      	ldr	r3, [r7, #4]
 80151fe:	33cc      	adds	r3, #204	; 0xcc
 8015200:	4aa5      	ldr	r2, [pc, #660]	; (8015498 <problem_fetch+0x14178>)
 8015202:	8811      	ldrh	r1, [r2, #0]
 8015204:	7892      	ldrb	r2, [r2, #2]
 8015206:	8019      	strh	r1, [r3, #0]
 8015208:	709a      	strb	r2, [r3, #2]
			break;
 801520a:	f005 bdcf 	b.w	801adac <problem_fetch+0x19a8c>
		case 658 :
			strcpy(p->name,"GARAGE DAYS");
 801520e:	687b      	ldr	r3, [r7, #4]
 8015210:	337c      	adds	r3, #124	; 0x7c
 8015212:	4aa2      	ldr	r2, [pc, #648]	; (801549c <problem_fetch+0x1417c>)
 8015214:	461c      	mov	r4, r3
 8015216:	4613      	mov	r3, r2
 8015218:	cb07      	ldmia	r3!, {r0, r1, r2}
 801521a:	6020      	str	r0, [r4, #0]
 801521c:	6061      	str	r1, [r4, #4]
 801521e:	60a2      	str	r2, [r4, #8]
			p->moveSize = 7;
 8015220:	687b      	ldr	r3, [r7, #4]
 8015222:	2207      	movs	r2, #7
 8015224:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"E,H,K,H,I,E,D");
 8015226:	687b      	ldr	r3, [r7, #4]
 8015228:	3340      	adds	r3, #64	; 0x40
 801522a:	4a9d      	ldr	r2, [pc, #628]	; (80154a0 <problem_fetch+0x14180>)
 801522c:	461c      	mov	r4, r3
 801522e:	4613      	mov	r3, r2
 8015230:	cb07      	ldmia	r3!, {r0, r1, r2}
 8015232:	6020      	str	r0, [r4, #0]
 8015234:	6061      	str	r1, [r4, #4]
 8015236:	60a2      	str	r2, [r4, #8]
 8015238:	881b      	ldrh	r3, [r3, #0]
 801523a:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"6,5,9,12,14,16,18");
 801523c:	687b      	ldr	r3, [r7, #4]
 801523e:	3304      	adds	r3, #4
 8015240:	4a98      	ldr	r2, [pc, #608]	; (80154a4 <problem_fetch+0x14184>)
 8015242:	461d      	mov	r5, r3
 8015244:	4614      	mov	r4, r2
 8015246:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8015248:	6028      	str	r0, [r5, #0]
 801524a:	6069      	str	r1, [r5, #4]
 801524c:	60aa      	str	r2, [r5, #8]
 801524e:	60eb      	str	r3, [r5, #12]
 8015250:	8823      	ldrh	r3, [r4, #0]
 8015252:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish, "s,s,d,d,d,d,e");
 8015254:	687b      	ldr	r3, [r7, #4]
 8015256:	33d8      	adds	r3, #216	; 0xd8
 8015258:	4a93      	ldr	r2, [pc, #588]	; (80154a8 <problem_fetch+0x14188>)
 801525a:	461c      	mov	r4, r3
 801525c:	4613      	mov	r3, r2
 801525e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8015260:	6020      	str	r0, [r4, #0]
 8015262:	6061      	str	r1, [r4, #4]
 8015264:	60a2      	str	r2, [r4, #8]
 8015266:	881b      	ldrh	r3, [r3, #0]
 8015268:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade, "6C");
 801526a:	687b      	ldr	r3, [r7, #4]
 801526c:	33cc      	adds	r3, #204	; 0xcc
 801526e:	4a8f      	ldr	r2, [pc, #572]	; (80154ac <problem_fetch+0x1418c>)
 8015270:	8811      	ldrh	r1, [r2, #0]
 8015272:	7892      	ldrb	r2, [r2, #2]
 8015274:	8019      	strh	r1, [r3, #0]
 8015276:	709a      	strb	r2, [r3, #2]
			break;
 8015278:	f005 bd98 	b.w	801adac <problem_fetch+0x19a8c>
		case 659 :
			strcpy(p->name,"MÁVROS K2");
 801527c:	687b      	ldr	r3, [r7, #4]
 801527e:	337c      	adds	r3, #124	; 0x7c
 8015280:	498b      	ldr	r1, [pc, #556]	; (80154b0 <problem_fetch+0x14190>)
 8015282:	461a      	mov	r2, r3
 8015284:	460b      	mov	r3, r1
 8015286:	cb03      	ldmia	r3!, {r0, r1}
 8015288:	6010      	str	r0, [r2, #0]
 801528a:	6051      	str	r1, [r2, #4]
 801528c:	8819      	ldrh	r1, [r3, #0]
 801528e:	789b      	ldrb	r3, [r3, #2]
 8015290:	8111      	strh	r1, [r2, #8]
 8015292:	7293      	strb	r3, [r2, #10]
			p->moveSize = 6;
 8015294:	687b      	ldr	r3, [r7, #4]
 8015296:	2206      	movs	r2, #6
 8015298:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"G,E,G,C,C,D");
 801529a:	687b      	ldr	r3, [r7, #4]
 801529c:	3340      	adds	r3, #64	; 0x40
 801529e:	4a85      	ldr	r2, [pc, #532]	; (80154b4 <problem_fetch+0x14194>)
 80152a0:	461c      	mov	r4, r3
 80152a2:	4613      	mov	r3, r2
 80152a4:	cb07      	ldmia	r3!, {r0, r1, r2}
 80152a6:	6020      	str	r0, [r4, #0]
 80152a8:	6061      	str	r1, [r4, #4]
 80152aa:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,6,9,8,13,18");
 80152ac:	687b      	ldr	r3, [r7, #4]
 80152ae:	3304      	adds	r3, #4
 80152b0:	4a81      	ldr	r2, [pc, #516]	; (80154b8 <problem_fetch+0x14198>)
 80152b2:	461c      	mov	r4, r3
 80152b4:	4613      	mov	r3, r2
 80152b6:	cb07      	ldmia	r3!, {r0, r1, r2}
 80152b8:	6020      	str	r0, [r4, #0]
 80152ba:	6061      	str	r1, [r4, #4]
 80152bc:	60a2      	str	r2, [r4, #8]
 80152be:	881b      	ldrh	r3, [r3, #0]
 80152c0:	81a3      	strh	r3, [r4, #12]
			strcpy(p->startFinish, "s,s,d,d,d,e");
 80152c2:	687b      	ldr	r3, [r7, #4]
 80152c4:	33d8      	adds	r3, #216	; 0xd8
 80152c6:	4a7d      	ldr	r2, [pc, #500]	; (80154bc <problem_fetch+0x1419c>)
 80152c8:	461c      	mov	r4, r3
 80152ca:	4613      	mov	r3, r2
 80152cc:	cb07      	ldmia	r3!, {r0, r1, r2}
 80152ce:	6020      	str	r0, [r4, #0]
 80152d0:	6061      	str	r1, [r4, #4]
 80152d2:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade, "6C+");
 80152d4:	687b      	ldr	r3, [r7, #4]
 80152d6:	33cc      	adds	r3, #204	; 0xcc
 80152d8:	4a79      	ldr	r2, [pc, #484]	; (80154c0 <problem_fetch+0x141a0>)
 80152da:	6810      	ldr	r0, [r2, #0]
 80152dc:	6018      	str	r0, [r3, #0]
			break;
 80152de:	f005 bd65 	b.w	801adac <problem_fetch+0x19a8c>
		case 66 :
			strcpy(p->name,"DUBUCHI");
 80152e2:	687b      	ldr	r3, [r7, #4]
 80152e4:	337c      	adds	r3, #124	; 0x7c
 80152e6:	4977      	ldr	r1, [pc, #476]	; (80154c4 <problem_fetch+0x141a4>)
 80152e8:	461a      	mov	r2, r3
 80152ea:	460b      	mov	r3, r1
 80152ec:	cb03      	ldmia	r3!, {r0, r1}
 80152ee:	6010      	str	r0, [r2, #0]
 80152f0:	6051      	str	r1, [r2, #4]
			p->moveSize = 6;
 80152f2:	687b      	ldr	r3, [r7, #4]
 80152f4:	2206      	movs	r2, #6
 80152f6:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"C,D,G,C,C,A");
 80152f8:	687b      	ldr	r3, [r7, #4]
 80152fa:	3340      	adds	r3, #64	; 0x40
 80152fc:	4a72      	ldr	r2, [pc, #456]	; (80154c8 <problem_fetch+0x141a8>)
 80152fe:	461c      	mov	r4, r3
 8015300:	4613      	mov	r3, r2
 8015302:	cb07      	ldmia	r3!, {r0, r1, r2}
 8015304:	6020      	str	r0, [r4, #0]
 8015306:	6061      	str	r1, [r4, #4]
 8015308:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,7,10,13,16,18");
 801530a:	687b      	ldr	r3, [r7, #4]
 801530c:	3304      	adds	r3, #4
 801530e:	4a6f      	ldr	r2, [pc, #444]	; (80154cc <problem_fetch+0x141ac>)
 8015310:	461c      	mov	r4, r3
 8015312:	4615      	mov	r5, r2
 8015314:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8015316:	6020      	str	r0, [r4, #0]
 8015318:	6061      	str	r1, [r4, #4]
 801531a:	60a2      	str	r2, [r4, #8]
 801531c:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish, "s,d,d,d,d,e");
 801531e:	687b      	ldr	r3, [r7, #4]
 8015320:	33d8      	adds	r3, #216	; 0xd8
 8015322:	4a5c      	ldr	r2, [pc, #368]	; (8015494 <problem_fetch+0x14174>)
 8015324:	461c      	mov	r4, r3
 8015326:	4613      	mov	r3, r2
 8015328:	cb07      	ldmia	r3!, {r0, r1, r2}
 801532a:	6020      	str	r0, [r4, #0]
 801532c:	6061      	str	r1, [r4, #4]
 801532e:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade, "7A+");
 8015330:	687b      	ldr	r3, [r7, #4]
 8015332:	33cc      	adds	r3, #204	; 0xcc
 8015334:	4a66      	ldr	r2, [pc, #408]	; (80154d0 <problem_fetch+0x141b0>)
 8015336:	6810      	ldr	r0, [r2, #0]
 8015338:	6018      	str	r0, [r3, #0]
			break;
 801533a:	f005 bd37 	b.w	801adac <problem_fetch+0x19a8c>
		case 660 :
			strcpy(p->name,"SET1");
 801533e:	687b      	ldr	r3, [r7, #4]
 8015340:	337c      	adds	r3, #124	; 0x7c
 8015342:	4a64      	ldr	r2, [pc, #400]	; (80154d4 <problem_fetch+0x141b4>)
 8015344:	6810      	ldr	r0, [r2, #0]
 8015346:	6018      	str	r0, [r3, #0]
 8015348:	7912      	ldrb	r2, [r2, #4]
 801534a:	711a      	strb	r2, [r3, #4]
			p->moveSize = 9;
 801534c:	687b      	ldr	r3, [r7, #4]
 801534e:	2209      	movs	r2, #9
 8015350:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"C,E,E,H,F,I,G,I,J");
 8015352:	687b      	ldr	r3, [r7, #4]
 8015354:	3340      	adds	r3, #64	; 0x40
 8015356:	4a60      	ldr	r2, [pc, #384]	; (80154d8 <problem_fetch+0x141b8>)
 8015358:	461d      	mov	r5, r3
 801535a:	4614      	mov	r4, r2
 801535c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801535e:	6028      	str	r0, [r5, #0]
 8015360:	6069      	str	r1, [r5, #4]
 8015362:	60aa      	str	r2, [r5, #8]
 8015364:	60eb      	str	r3, [r5, #12]
 8015366:	8823      	ldrh	r3, [r4, #0]
 8015368:	822b      	strh	r3, [r5, #16]
			strcpy(p->moveNumbers,"5,6,8,10,13,14,17,18,5");
 801536a:	687b      	ldr	r3, [r7, #4]
 801536c:	3304      	adds	r3, #4
 801536e:	4a5b      	ldr	r2, [pc, #364]	; (80154dc <problem_fetch+0x141bc>)
 8015370:	461c      	mov	r4, r3
 8015372:	4615      	mov	r5, r2
 8015374:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8015376:	6020      	str	r0, [r4, #0]
 8015378:	6061      	str	r1, [r4, #4]
 801537a:	60a2      	str	r2, [r4, #8]
 801537c:	60e3      	str	r3, [r4, #12]
 801537e:	6828      	ldr	r0, [r5, #0]
 8015380:	6120      	str	r0, [r4, #16]
 8015382:	88ab      	ldrh	r3, [r5, #4]
 8015384:	79aa      	ldrb	r2, [r5, #6]
 8015386:	82a3      	strh	r3, [r4, #20]
 8015388:	4613      	mov	r3, r2
 801538a:	75a3      	strb	r3, [r4, #22]
			strcpy(p->startFinish, "s,s,d,d,d,d,d,e,d");
 801538c:	687b      	ldr	r3, [r7, #4]
 801538e:	33d8      	adds	r3, #216	; 0xd8
 8015390:	4a53      	ldr	r2, [pc, #332]	; (80154e0 <problem_fetch+0x141c0>)
 8015392:	461d      	mov	r5, r3
 8015394:	4614      	mov	r4, r2
 8015396:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8015398:	6028      	str	r0, [r5, #0]
 801539a:	6069      	str	r1, [r5, #4]
 801539c:	60aa      	str	r2, [r5, #8]
 801539e:	60eb      	str	r3, [r5, #12]
 80153a0:	8823      	ldrh	r3, [r4, #0]
 80153a2:	822b      	strh	r3, [r5, #16]
			strcpy(p->grade, "6B+");
 80153a4:	687b      	ldr	r3, [r7, #4]
 80153a6:	33cc      	adds	r3, #204	; 0xcc
 80153a8:	4a4e      	ldr	r2, [pc, #312]	; (80154e4 <problem_fetch+0x141c4>)
 80153aa:	6810      	ldr	r0, [r2, #0]
 80153ac:	6018      	str	r0, [r3, #0]
			break;
 80153ae:	f005 bcfd 	b.w	801adac <problem_fetch+0x19a8c>
		case 661 :
			strcpy(p->name,"MEN IN BLACK");
 80153b2:	687b      	ldr	r3, [r7, #4]
 80153b4:	337c      	adds	r3, #124	; 0x7c
 80153b6:	4a4c      	ldr	r2, [pc, #304]	; (80154e8 <problem_fetch+0x141c8>)
 80153b8:	461c      	mov	r4, r3
 80153ba:	4613      	mov	r3, r2
 80153bc:	cb07      	ldmia	r3!, {r0, r1, r2}
 80153be:	6020      	str	r0, [r4, #0]
 80153c0:	6061      	str	r1, [r4, #4]
 80153c2:	60a2      	str	r2, [r4, #8]
 80153c4:	781b      	ldrb	r3, [r3, #0]
 80153c6:	7323      	strb	r3, [r4, #12]
			p->moveSize = 6;
 80153c8:	687b      	ldr	r3, [r7, #4]
 80153ca:	2206      	movs	r2, #6
 80153cc:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"G,G,H,I,E,D");
 80153ce:	687b      	ldr	r3, [r7, #4]
 80153d0:	3340      	adds	r3, #64	; 0x40
 80153d2:	4a46      	ldr	r2, [pc, #280]	; (80154ec <problem_fetch+0x141cc>)
 80153d4:	461c      	mov	r4, r3
 80153d6:	4613      	mov	r3, r2
 80153d8:	cb07      	ldmia	r3!, {r0, r1, r2}
 80153da:	6020      	str	r0, [r4, #0]
 80153dc:	6061      	str	r1, [r4, #4]
 80153de:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,9,12,14,16,18");
 80153e0:	687b      	ldr	r3, [r7, #4]
 80153e2:	3304      	adds	r3, #4
 80153e4:	4a42      	ldr	r2, [pc, #264]	; (80154f0 <problem_fetch+0x141d0>)
 80153e6:	461c      	mov	r4, r3
 80153e8:	4615      	mov	r5, r2
 80153ea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80153ec:	6020      	str	r0, [r4, #0]
 80153ee:	6061      	str	r1, [r4, #4]
 80153f0:	60a2      	str	r2, [r4, #8]
 80153f2:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish, "s,d,d,d,d,e");
 80153f4:	687b      	ldr	r3, [r7, #4]
 80153f6:	33d8      	adds	r3, #216	; 0xd8
 80153f8:	4a26      	ldr	r2, [pc, #152]	; (8015494 <problem_fetch+0x14174>)
 80153fa:	461c      	mov	r4, r3
 80153fc:	4613      	mov	r3, r2
 80153fe:	cb07      	ldmia	r3!, {r0, r1, r2}
 8015400:	6020      	str	r0, [r4, #0]
 8015402:	6061      	str	r1, [r4, #4]
 8015404:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade, "7A");
 8015406:	687b      	ldr	r3, [r7, #4]
 8015408:	33cc      	adds	r3, #204	; 0xcc
 801540a:	4a23      	ldr	r2, [pc, #140]	; (8015498 <problem_fetch+0x14178>)
 801540c:	8811      	ldrh	r1, [r2, #0]
 801540e:	7892      	ldrb	r2, [r2, #2]
 8015410:	8019      	strh	r1, [r3, #0]
 8015412:	709a      	strb	r2, [r3, #2]
			break;
 8015414:	f005 bcca 	b.w	801adac <problem_fetch+0x19a8c>
		case 662 :
			strcpy(p->name,"ROADWAY");
 8015418:	687b      	ldr	r3, [r7, #4]
 801541a:	337c      	adds	r3, #124	; 0x7c
 801541c:	4935      	ldr	r1, [pc, #212]	; (80154f4 <problem_fetch+0x141d4>)
 801541e:	461a      	mov	r2, r3
 8015420:	460b      	mov	r3, r1
 8015422:	cb03      	ldmia	r3!, {r0, r1}
 8015424:	6010      	str	r0, [r2, #0]
 8015426:	6051      	str	r1, [r2, #4]
			p->moveSize = 9;
 8015428:	687b      	ldr	r3, [r7, #4]
 801542a:	2209      	movs	r2, #9
 801542c:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"G,J,G,F,I,E,G,D,I");
 801542e:	687b      	ldr	r3, [r7, #4]
 8015430:	3340      	adds	r3, #64	; 0x40
 8015432:	4a31      	ldr	r2, [pc, #196]	; (80154f8 <problem_fetch+0x141d8>)
 8015434:	461d      	mov	r5, r3
 8015436:	4614      	mov	r4, r2
 8015438:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801543a:	6028      	str	r0, [r5, #0]
 801543c:	6069      	str	r1, [r5, #4]
 801543e:	60aa      	str	r2, [r5, #8]
 8015440:	60eb      	str	r3, [r5, #12]
 8015442:	8823      	ldrh	r3, [r4, #0]
 8015444:	822b      	strh	r3, [r5, #16]
			strcpy(p->moveNumbers,"4,5,9,13,14,16,17,18,10");
 8015446:	687b      	ldr	r3, [r7, #4]
 8015448:	3304      	adds	r3, #4
 801544a:	4a2c      	ldr	r2, [pc, #176]	; (80154fc <problem_fetch+0x141dc>)
 801544c:	461d      	mov	r5, r3
 801544e:	4614      	mov	r4, r2
 8015450:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8015452:	6028      	str	r0, [r5, #0]
 8015454:	6069      	str	r1, [r5, #4]
 8015456:	60aa      	str	r2, [r5, #8]
 8015458:	60eb      	str	r3, [r5, #12]
 801545a:	cc03      	ldmia	r4!, {r0, r1}
 801545c:	6128      	str	r0, [r5, #16]
 801545e:	6169      	str	r1, [r5, #20]
			strcpy(p->startFinish, "s,s,d,d,d,d,d,e,d");
 8015460:	687b      	ldr	r3, [r7, #4]
 8015462:	33d8      	adds	r3, #216	; 0xd8
 8015464:	4a1e      	ldr	r2, [pc, #120]	; (80154e0 <problem_fetch+0x141c0>)
 8015466:	461d      	mov	r5, r3
 8015468:	4614      	mov	r4, r2
 801546a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801546c:	6028      	str	r0, [r5, #0]
 801546e:	6069      	str	r1, [r5, #4]
 8015470:	60aa      	str	r2, [r5, #8]
 8015472:	60eb      	str	r3, [r5, #12]
 8015474:	8823      	ldrh	r3, [r4, #0]
 8015476:	822b      	strh	r3, [r5, #16]
			strcpy(p->grade, "6B+");
 8015478:	687b      	ldr	r3, [r7, #4]
 801547a:	33cc      	adds	r3, #204	; 0xcc
 801547c:	4a19      	ldr	r2, [pc, #100]	; (80154e4 <problem_fetch+0x141c4>)
 801547e:	6810      	ldr	r0, [r2, #0]
 8015480:	6018      	str	r0, [r3, #0]
			break;
 8015482:	f005 bc93 	b.w	801adac <problem_fetch+0x19a8c>
 8015486:	bf00      	nop
 8015488:	08028620 	.word	0x08028620
 801548c:	08028634 	.word	0x08028634
 8015490:	08028640 	.word	0x08028640
 8015494:	0802139c 	.word	0x0802139c
 8015498:	080212f4 	.word	0x080212f4
 801549c:	08028650 	.word	0x08028650
 80154a0:	0802865c 	.word	0x0802865c
 80154a4:	0802866c 	.word	0x0802866c
 80154a8:	080212a0 	.word	0x080212a0
 80154ac:	08021370 	.word	0x08021370
 80154b0:	08028680 	.word	0x08028680
 80154b4:	0802868c 	.word	0x0802868c
 80154b8:	08028698 	.word	0x08028698
 80154bc:	08021910 	.word	0x08021910
 80154c0:	080213a8 	.word	0x080213a8
 80154c4:	080286a8 	.word	0x080286a8
 80154c8:	080286b0 	.word	0x080286b0
 80154cc:	08022140 	.word	0x08022140
 80154d0:	08021424 	.word	0x08021424
 80154d4:	080286bc 	.word	0x080286bc
 80154d8:	080286c4 	.word	0x080286c4
 80154dc:	080286d8 	.word	0x080286d8
 80154e0:	080286f0 	.word	0x080286f0
 80154e4:	080212b0 	.word	0x080212b0
 80154e8:	08028704 	.word	0x08028704
 80154ec:	08028714 	.word	0x08028714
 80154f0:	08028720 	.word	0x08028720
 80154f4:	08028730 	.word	0x08028730
 80154f8:	08028738 	.word	0x08028738
 80154fc:	0802874c 	.word	0x0802874c
		case 663 :
			strcpy(p->name,"BACK TO BASICS");
 8015500:	687b      	ldr	r3, [r7, #4]
 8015502:	337c      	adds	r3, #124	; 0x7c
 8015504:	4ab9      	ldr	r2, [pc, #740]	; (80157ec <problem_fetch+0x144cc>)
 8015506:	461c      	mov	r4, r3
 8015508:	4613      	mov	r3, r2
 801550a:	cb07      	ldmia	r3!, {r0, r1, r2}
 801550c:	6020      	str	r0, [r4, #0]
 801550e:	6061      	str	r1, [r4, #4]
 8015510:	60a2      	str	r2, [r4, #8]
 8015512:	881a      	ldrh	r2, [r3, #0]
 8015514:	789b      	ldrb	r3, [r3, #2]
 8015516:	81a2      	strh	r2, [r4, #12]
 8015518:	73a3      	strb	r3, [r4, #14]
			p->moveSize = 7;
 801551a:	687b      	ldr	r3, [r7, #4]
 801551c:	2207      	movs	r2, #7
 801551e:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"H,K,H,K,G,G,D");
 8015520:	687b      	ldr	r3, [r7, #4]
 8015522:	3340      	adds	r3, #64	; 0x40
 8015524:	4ab2      	ldr	r2, [pc, #712]	; (80157f0 <problem_fetch+0x144d0>)
 8015526:	461c      	mov	r4, r3
 8015528:	4613      	mov	r3, r2
 801552a:	cb07      	ldmia	r3!, {r0, r1, r2}
 801552c:	6020      	str	r0, [r4, #0]
 801552e:	6061      	str	r1, [r4, #4]
 8015530:	60a2      	str	r2, [r4, #8]
 8015532:	881b      	ldrh	r3, [r3, #0]
 8015534:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,9,12,14,15,17,18");
 8015536:	687b      	ldr	r3, [r7, #4]
 8015538:	3304      	adds	r3, #4
 801553a:	4aae      	ldr	r2, [pc, #696]	; (80157f4 <problem_fetch+0x144d4>)
 801553c:	461d      	mov	r5, r3
 801553e:	4614      	mov	r4, r2
 8015540:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8015542:	6028      	str	r0, [r5, #0]
 8015544:	6069      	str	r1, [r5, #4]
 8015546:	60aa      	str	r2, [r5, #8]
 8015548:	60eb      	str	r3, [r5, #12]
 801554a:	8823      	ldrh	r3, [r4, #0]
 801554c:	78a2      	ldrb	r2, [r4, #2]
 801554e:	822b      	strh	r3, [r5, #16]
 8015550:	4613      	mov	r3, r2
 8015552:	74ab      	strb	r3, [r5, #18]
			strcpy(p->startFinish, "s,d,d,d,d,d,e");
 8015554:	687b      	ldr	r3, [r7, #4]
 8015556:	33d8      	adds	r3, #216	; 0xd8
 8015558:	4aa7      	ldr	r2, [pc, #668]	; (80157f8 <problem_fetch+0x144d8>)
 801555a:	461c      	mov	r4, r3
 801555c:	4613      	mov	r3, r2
 801555e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8015560:	6020      	str	r0, [r4, #0]
 8015562:	6061      	str	r1, [r4, #4]
 8015564:	60a2      	str	r2, [r4, #8]
 8015566:	881b      	ldrh	r3, [r3, #0]
 8015568:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade, "6B+");
 801556a:	687b      	ldr	r3, [r7, #4]
 801556c:	33cc      	adds	r3, #204	; 0xcc
 801556e:	4aa3      	ldr	r2, [pc, #652]	; (80157fc <problem_fetch+0x144dc>)
 8015570:	6810      	ldr	r0, [r2, #0]
 8015572:	6018      	str	r0, [r3, #0]
			break;
 8015574:	f005 bc1a 	b.w	801adac <problem_fetch+0x19a8c>
		case 664 :
			strcpy(p->name,"BIG DAWWWWG");
 8015578:	687b      	ldr	r3, [r7, #4]
 801557a:	337c      	adds	r3, #124	; 0x7c
 801557c:	4aa0      	ldr	r2, [pc, #640]	; (8015800 <problem_fetch+0x144e0>)
 801557e:	461c      	mov	r4, r3
 8015580:	4613      	mov	r3, r2
 8015582:	cb07      	ldmia	r3!, {r0, r1, r2}
 8015584:	6020      	str	r0, [r4, #0]
 8015586:	6061      	str	r1, [r4, #4]
 8015588:	60a2      	str	r2, [r4, #8]
			p->moveSize = 7;
 801558a:	687b      	ldr	r3, [r7, #4]
 801558c:	2207      	movs	r2, #7
 801558e:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"G,D,H,C,H,H,I");
 8015590:	687b      	ldr	r3, [r7, #4]
 8015592:	3340      	adds	r3, #64	; 0x40
 8015594:	4a9b      	ldr	r2, [pc, #620]	; (8015804 <problem_fetch+0x144e4>)
 8015596:	461c      	mov	r4, r3
 8015598:	4613      	mov	r3, r2
 801559a:	cb07      	ldmia	r3!, {r0, r1, r2}
 801559c:	6020      	str	r0, [r4, #0]
 801559e:	6061      	str	r1, [r4, #4]
 80155a0:	60a2      	str	r2, [r4, #8]
 80155a2:	881b      	ldrh	r3, [r3, #0]
 80155a4:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,7,10,13,13,16,18");
 80155a6:	687b      	ldr	r3, [r7, #4]
 80155a8:	3304      	adds	r3, #4
 80155aa:	4a97      	ldr	r2, [pc, #604]	; (8015808 <problem_fetch+0x144e8>)
 80155ac:	461d      	mov	r5, r3
 80155ae:	4614      	mov	r4, r2
 80155b0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80155b2:	6028      	str	r0, [r5, #0]
 80155b4:	6069      	str	r1, [r5, #4]
 80155b6:	60aa      	str	r2, [r5, #8]
 80155b8:	60eb      	str	r3, [r5, #12]
 80155ba:	8823      	ldrh	r3, [r4, #0]
 80155bc:	78a2      	ldrb	r2, [r4, #2]
 80155be:	822b      	strh	r3, [r5, #16]
 80155c0:	4613      	mov	r3, r2
 80155c2:	74ab      	strb	r3, [r5, #18]
			strcpy(p->startFinish, "s,d,d,d,d,d,e");
 80155c4:	687b      	ldr	r3, [r7, #4]
 80155c6:	33d8      	adds	r3, #216	; 0xd8
 80155c8:	4a8b      	ldr	r2, [pc, #556]	; (80157f8 <problem_fetch+0x144d8>)
 80155ca:	461c      	mov	r4, r3
 80155cc:	4613      	mov	r3, r2
 80155ce:	cb07      	ldmia	r3!, {r0, r1, r2}
 80155d0:	6020      	str	r0, [r4, #0]
 80155d2:	6061      	str	r1, [r4, #4]
 80155d4:	60a2      	str	r2, [r4, #8]
 80155d6:	881b      	ldrh	r3, [r3, #0]
 80155d8:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade, "6C");
 80155da:	687b      	ldr	r3, [r7, #4]
 80155dc:	33cc      	adds	r3, #204	; 0xcc
 80155de:	4a8b      	ldr	r2, [pc, #556]	; (801580c <problem_fetch+0x144ec>)
 80155e0:	8811      	ldrh	r1, [r2, #0]
 80155e2:	7892      	ldrb	r2, [r2, #2]
 80155e4:	8019      	strh	r1, [r3, #0]
 80155e6:	709a      	strb	r2, [r3, #2]
			break;
 80155e8:	f005 bbe0 	b.w	801adac <problem_fetch+0x19a8c>
		case 665 :
			strcpy(p->name,"RIVER RAT");
 80155ec:	687b      	ldr	r3, [r7, #4]
 80155ee:	337c      	adds	r3, #124	; 0x7c
 80155f0:	4987      	ldr	r1, [pc, #540]	; (8015810 <problem_fetch+0x144f0>)
 80155f2:	461a      	mov	r2, r3
 80155f4:	460b      	mov	r3, r1
 80155f6:	cb03      	ldmia	r3!, {r0, r1}
 80155f8:	6010      	str	r0, [r2, #0]
 80155fa:	6051      	str	r1, [r2, #4]
 80155fc:	881b      	ldrh	r3, [r3, #0]
 80155fe:	8113      	strh	r3, [r2, #8]
			p->moveSize = 6;
 8015600:	687b      	ldr	r3, [r7, #4]
 8015602:	2206      	movs	r2, #6
 8015604:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"G,C,E,D,E,A");
 8015606:	687b      	ldr	r3, [r7, #4]
 8015608:	3340      	adds	r3, #64	; 0x40
 801560a:	4a82      	ldr	r2, [pc, #520]	; (8015814 <problem_fetch+0x144f4>)
 801560c:	461c      	mov	r4, r3
 801560e:	4613      	mov	r3, r2
 8015610:	cb07      	ldmia	r3!, {r0, r1, r2}
 8015612:	6020      	str	r0, [r4, #0]
 8015614:	6061      	str	r1, [r4, #4]
 8015616:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,8,12,11,16,18");
 8015618:	687b      	ldr	r3, [r7, #4]
 801561a:	3304      	adds	r3, #4
 801561c:	4a7e      	ldr	r2, [pc, #504]	; (8015818 <problem_fetch+0x144f8>)
 801561e:	461c      	mov	r4, r3
 8015620:	4615      	mov	r5, r2
 8015622:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8015624:	6020      	str	r0, [r4, #0]
 8015626:	6061      	str	r1, [r4, #4]
 8015628:	60a2      	str	r2, [r4, #8]
 801562a:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish, "s,d,d,d,d,e");
 801562c:	687b      	ldr	r3, [r7, #4]
 801562e:	33d8      	adds	r3, #216	; 0xd8
 8015630:	4a7a      	ldr	r2, [pc, #488]	; (801581c <problem_fetch+0x144fc>)
 8015632:	461c      	mov	r4, r3
 8015634:	4613      	mov	r3, r2
 8015636:	cb07      	ldmia	r3!, {r0, r1, r2}
 8015638:	6020      	str	r0, [r4, #0]
 801563a:	6061      	str	r1, [r4, #4]
 801563c:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade, "7A+");
 801563e:	687b      	ldr	r3, [r7, #4]
 8015640:	33cc      	adds	r3, #204	; 0xcc
 8015642:	4a77      	ldr	r2, [pc, #476]	; (8015820 <problem_fetch+0x14500>)
 8015644:	6810      	ldr	r0, [r2, #0]
 8015646:	6018      	str	r0, [r3, #0]
			break;
 8015648:	f005 bbb0 	b.w	801adac <problem_fetch+0x19a8c>
		case 666 :
			strcpy(p->name,"MASTERFUL GAP ALT");
 801564c:	687b      	ldr	r3, [r7, #4]
 801564e:	337c      	adds	r3, #124	; 0x7c
 8015650:	4a74      	ldr	r2, [pc, #464]	; (8015824 <problem_fetch+0x14504>)
 8015652:	461d      	mov	r5, r3
 8015654:	4614      	mov	r4, r2
 8015656:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8015658:	6028      	str	r0, [r5, #0]
 801565a:	6069      	str	r1, [r5, #4]
 801565c:	60aa      	str	r2, [r5, #8]
 801565e:	60eb      	str	r3, [r5, #12]
 8015660:	8823      	ldrh	r3, [r4, #0]
 8015662:	822b      	strh	r3, [r5, #16]
			p->moveSize = 6;
 8015664:	687b      	ldr	r3, [r7, #4]
 8015666:	2206      	movs	r2, #6
 8015668:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"A,B,C,E,F,I");
 801566a:	687b      	ldr	r3, [r7, #4]
 801566c:	3340      	adds	r3, #64	; 0x40
 801566e:	4a6e      	ldr	r2, [pc, #440]	; (8015828 <problem_fetch+0x14508>)
 8015670:	461c      	mov	r4, r3
 8015672:	4613      	mov	r3, r2
 8015674:	cb07      	ldmia	r3!, {r0, r1, r2}
 8015676:	6020      	str	r0, [r4, #0]
 8015678:	6061      	str	r1, [r4, #4]
 801567a:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"9,6,5,16,11,18");
 801567c:	687b      	ldr	r3, [r7, #4]
 801567e:	3304      	adds	r3, #4
 8015680:	4a6a      	ldr	r2, [pc, #424]	; (801582c <problem_fetch+0x1450c>)
 8015682:	461c      	mov	r4, r3
 8015684:	4613      	mov	r3, r2
 8015686:	cb07      	ldmia	r3!, {r0, r1, r2}
 8015688:	6020      	str	r0, [r4, #0]
 801568a:	6061      	str	r1, [r4, #4]
 801568c:	60a2      	str	r2, [r4, #8]
 801568e:	881a      	ldrh	r2, [r3, #0]
 8015690:	789b      	ldrb	r3, [r3, #2]
 8015692:	81a2      	strh	r2, [r4, #12]
 8015694:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish, "d,s,s,d,d,e");
 8015696:	687b      	ldr	r3, [r7, #4]
 8015698:	33d8      	adds	r3, #216	; 0xd8
 801569a:	4a65      	ldr	r2, [pc, #404]	; (8015830 <problem_fetch+0x14510>)
 801569c:	461c      	mov	r4, r3
 801569e:	4613      	mov	r3, r2
 80156a0:	cb07      	ldmia	r3!, {r0, r1, r2}
 80156a2:	6020      	str	r0, [r4, #0]
 80156a4:	6061      	str	r1, [r4, #4]
 80156a6:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade, "7C");
 80156a8:	687b      	ldr	r3, [r7, #4]
 80156aa:	33cc      	adds	r3, #204	; 0xcc
 80156ac:	4a61      	ldr	r2, [pc, #388]	; (8015834 <problem_fetch+0x14514>)
 80156ae:	8811      	ldrh	r1, [r2, #0]
 80156b0:	7892      	ldrb	r2, [r2, #2]
 80156b2:	8019      	strh	r1, [r3, #0]
 80156b4:	709a      	strb	r2, [r3, #2]
			break;
 80156b6:	f005 bb79 	b.w	801adac <problem_fetch+0x19a8c>
		case 667 :
			strcpy(p->name,"BRUTE");
 80156ba:	687b      	ldr	r3, [r7, #4]
 80156bc:	337c      	adds	r3, #124	; 0x7c
 80156be:	4a5e      	ldr	r2, [pc, #376]	; (8015838 <problem_fetch+0x14518>)
 80156c0:	6810      	ldr	r0, [r2, #0]
 80156c2:	6018      	str	r0, [r3, #0]
 80156c4:	8892      	ldrh	r2, [r2, #4]
 80156c6:	809a      	strh	r2, [r3, #4]
			p->moveSize = 5;
 80156c8:	687b      	ldr	r3, [r7, #4]
 80156ca:	2205      	movs	r2, #5
 80156cc:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"C,B,B,G,I");
 80156ce:	687b      	ldr	r3, [r7, #4]
 80156d0:	3340      	adds	r3, #64	; 0x40
 80156d2:	495a      	ldr	r1, [pc, #360]	; (801583c <problem_fetch+0x1451c>)
 80156d4:	461a      	mov	r2, r3
 80156d6:	460b      	mov	r3, r1
 80156d8:	cb03      	ldmia	r3!, {r0, r1}
 80156da:	6010      	str	r0, [r2, #0]
 80156dc:	6051      	str	r1, [r2, #4]
 80156de:	881b      	ldrh	r3, [r3, #0]
 80156e0:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"5,6,10,14,18");
 80156e2:	687b      	ldr	r3, [r7, #4]
 80156e4:	3304      	adds	r3, #4
 80156e6:	4a56      	ldr	r2, [pc, #344]	; (8015840 <problem_fetch+0x14520>)
 80156e8:	461c      	mov	r4, r3
 80156ea:	4613      	mov	r3, r2
 80156ec:	cb07      	ldmia	r3!, {r0, r1, r2}
 80156ee:	6020      	str	r0, [r4, #0]
 80156f0:	6061      	str	r1, [r4, #4]
 80156f2:	60a2      	str	r2, [r4, #8]
 80156f4:	781b      	ldrb	r3, [r3, #0]
 80156f6:	7323      	strb	r3, [r4, #12]
			strcpy(p->startFinish, "s,s,d,d,e");
 80156f8:	687b      	ldr	r3, [r7, #4]
 80156fa:	33d8      	adds	r3, #216	; 0xd8
 80156fc:	4951      	ldr	r1, [pc, #324]	; (8015844 <problem_fetch+0x14524>)
 80156fe:	461a      	mov	r2, r3
 8015700:	460b      	mov	r3, r1
 8015702:	cb03      	ldmia	r3!, {r0, r1}
 8015704:	6010      	str	r0, [r2, #0]
 8015706:	6051      	str	r1, [r2, #4]
 8015708:	881b      	ldrh	r3, [r3, #0]
 801570a:	8113      	strh	r3, [r2, #8]
			strcpy(p->grade, "7C");
 801570c:	687b      	ldr	r3, [r7, #4]
 801570e:	33cc      	adds	r3, #204	; 0xcc
 8015710:	4a48      	ldr	r2, [pc, #288]	; (8015834 <problem_fetch+0x14514>)
 8015712:	8811      	ldrh	r1, [r2, #0]
 8015714:	7892      	ldrb	r2, [r2, #2]
 8015716:	8019      	strh	r1, [r3, #0]
 8015718:	709a      	strb	r2, [r3, #2]
			break;
 801571a:	f005 bb47 	b.w	801adac <problem_fetch+0x19a8c>
		case 668 :
			strcpy(p->name,"EZ CLAP");
 801571e:	687b      	ldr	r3, [r7, #4]
 8015720:	337c      	adds	r3, #124	; 0x7c
 8015722:	4949      	ldr	r1, [pc, #292]	; (8015848 <problem_fetch+0x14528>)
 8015724:	461a      	mov	r2, r3
 8015726:	460b      	mov	r3, r1
 8015728:	cb03      	ldmia	r3!, {r0, r1}
 801572a:	6010      	str	r0, [r2, #0]
 801572c:	6051      	str	r1, [r2, #4]
			p->moveSize = 6;
 801572e:	687b      	ldr	r3, [r7, #4]
 8015730:	2206      	movs	r2, #6
 8015732:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"G,J,H,C,D,E");
 8015734:	687b      	ldr	r3, [r7, #4]
 8015736:	3340      	adds	r3, #64	; 0x40
 8015738:	4a44      	ldr	r2, [pc, #272]	; (801584c <problem_fetch+0x1452c>)
 801573a:	461c      	mov	r4, r3
 801573c:	4613      	mov	r3, r2
 801573e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8015740:	6020      	str	r0, [r4, #0]
 8015742:	6061      	str	r1, [r4, #4]
 8015744:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,5,10,13,18,14");
 8015746:	687b      	ldr	r3, [r7, #4]
 8015748:	3304      	adds	r3, #4
 801574a:	4a41      	ldr	r2, [pc, #260]	; (8015850 <problem_fetch+0x14530>)
 801574c:	461c      	mov	r4, r3
 801574e:	4615      	mov	r5, r2
 8015750:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8015752:	6020      	str	r0, [r4, #0]
 8015754:	6061      	str	r1, [r4, #4]
 8015756:	60a2      	str	r2, [r4, #8]
 8015758:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish, "s,s,d,d,e,d");
 801575a:	687b      	ldr	r3, [r7, #4]
 801575c:	33d8      	adds	r3, #216	; 0xd8
 801575e:	4a3d      	ldr	r2, [pc, #244]	; (8015854 <problem_fetch+0x14534>)
 8015760:	461c      	mov	r4, r3
 8015762:	4613      	mov	r3, r2
 8015764:	cb07      	ldmia	r3!, {r0, r1, r2}
 8015766:	6020      	str	r0, [r4, #0]
 8015768:	6061      	str	r1, [r4, #4]
 801576a:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade, "7A");
 801576c:	687b      	ldr	r3, [r7, #4]
 801576e:	33cc      	adds	r3, #204	; 0xcc
 8015770:	4a39      	ldr	r2, [pc, #228]	; (8015858 <problem_fetch+0x14538>)
 8015772:	8811      	ldrh	r1, [r2, #0]
 8015774:	7892      	ldrb	r2, [r2, #2]
 8015776:	8019      	strh	r1, [r3, #0]
 8015778:	709a      	strb	r2, [r3, #2]
			break;
 801577a:	f005 bb17 	b.w	801adac <problem_fetch+0x19a8c>
		case 669 :
			strcpy(p->name,"HOWARD THE ALIEN");
 801577e:	687b      	ldr	r3, [r7, #4]
 8015780:	337c      	adds	r3, #124	; 0x7c
 8015782:	4a36      	ldr	r2, [pc, #216]	; (801585c <problem_fetch+0x1453c>)
 8015784:	461d      	mov	r5, r3
 8015786:	4614      	mov	r4, r2
 8015788:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801578a:	6028      	str	r0, [r5, #0]
 801578c:	6069      	str	r1, [r5, #4]
 801578e:	60aa      	str	r2, [r5, #8]
 8015790:	60eb      	str	r3, [r5, #12]
 8015792:	7823      	ldrb	r3, [r4, #0]
 8015794:	742b      	strb	r3, [r5, #16]
			p->moveSize = 5;
 8015796:	687b      	ldr	r3, [r7, #4]
 8015798:	2205      	movs	r2, #5
 801579a:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"J,G,C,I,D");
 801579c:	687b      	ldr	r3, [r7, #4]
 801579e:	3340      	adds	r3, #64	; 0x40
 80157a0:	492f      	ldr	r1, [pc, #188]	; (8015860 <problem_fetch+0x14540>)
 80157a2:	461a      	mov	r2, r3
 80157a4:	460b      	mov	r3, r1
 80157a6:	cb03      	ldmia	r3!, {r0, r1}
 80157a8:	6010      	str	r0, [r2, #0]
 80157aa:	6051      	str	r1, [r2, #4]
 80157ac:	881b      	ldrh	r3, [r3, #0]
 80157ae:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"5,9,13,14,18");
 80157b0:	687b      	ldr	r3, [r7, #4]
 80157b2:	3304      	adds	r3, #4
 80157b4:	4a2b      	ldr	r2, [pc, #172]	; (8015864 <problem_fetch+0x14544>)
 80157b6:	461c      	mov	r4, r3
 80157b8:	4613      	mov	r3, r2
 80157ba:	cb07      	ldmia	r3!, {r0, r1, r2}
 80157bc:	6020      	str	r0, [r4, #0]
 80157be:	6061      	str	r1, [r4, #4]
 80157c0:	60a2      	str	r2, [r4, #8]
 80157c2:	781b      	ldrb	r3, [r3, #0]
 80157c4:	7323      	strb	r3, [r4, #12]
			strcpy(p->startFinish, "s,d,d,d,e");
 80157c6:	687b      	ldr	r3, [r7, #4]
 80157c8:	33d8      	adds	r3, #216	; 0xd8
 80157ca:	4927      	ldr	r1, [pc, #156]	; (8015868 <problem_fetch+0x14548>)
 80157cc:	461a      	mov	r2, r3
 80157ce:	460b      	mov	r3, r1
 80157d0:	cb03      	ldmia	r3!, {r0, r1}
 80157d2:	6010      	str	r0, [r2, #0]
 80157d4:	6051      	str	r1, [r2, #4]
 80157d6:	881b      	ldrh	r3, [r3, #0]
 80157d8:	8113      	strh	r3, [r2, #8]
			strcpy(p->grade, "7C");
 80157da:	687b      	ldr	r3, [r7, #4]
 80157dc:	33cc      	adds	r3, #204	; 0xcc
 80157de:	4a15      	ldr	r2, [pc, #84]	; (8015834 <problem_fetch+0x14514>)
 80157e0:	8811      	ldrh	r1, [r2, #0]
 80157e2:	7892      	ldrb	r2, [r2, #2]
 80157e4:	8019      	strh	r1, [r3, #0]
 80157e6:	709a      	strb	r2, [r3, #2]
			break;
 80157e8:	f005 bae0 	b.w	801adac <problem_fetch+0x19a8c>
 80157ec:	08028764 	.word	0x08028764
 80157f0:	08028774 	.word	0x08028774
 80157f4:	08028784 	.word	0x08028784
 80157f8:	08021494 	.word	0x08021494
 80157fc:	080212b0 	.word	0x080212b0
 8015800:	08028798 	.word	0x08028798
 8015804:	080287a4 	.word	0x080287a4
 8015808:	08027754 	.word	0x08027754
 801580c:	08021370 	.word	0x08021370
 8015810:	080287b4 	.word	0x080287b4
 8015814:	080287c0 	.word	0x080287c0
 8015818:	080287cc 	.word	0x080287cc
 801581c:	0802139c 	.word	0x0802139c
 8015820:	08021424 	.word	0x08021424
 8015824:	080287dc 	.word	0x080287dc
 8015828:	080287f0 	.word	0x080287f0
 801582c:	080287fc 	.word	0x080287fc
 8015830:	0802880c 	.word	0x0802880c
 8015834:	0802158c 	.word	0x0802158c
 8015838:	08028818 	.word	0x08028818
 801583c:	08028820 	.word	0x08028820
 8015840:	0802882c 	.word	0x0802882c
 8015844:	080221c8 	.word	0x080221c8
 8015848:	0802883c 	.word	0x0802883c
 801584c:	08028844 	.word	0x08028844
 8015850:	08028850 	.word	0x08028850
 8015854:	08028860 	.word	0x08028860
 8015858:	080212f4 	.word	0x080212f4
 801585c:	0802886c 	.word	0x0802886c
 8015860:	08028880 	.word	0x08028880
 8015864:	080233b4 	.word	0x080233b4
 8015868:	08021320 	.word	0x08021320
		case 67 :
			strcpy(p->name,"KIDSPROBLEM");
 801586c:	687b      	ldr	r3, [r7, #4]
 801586e:	337c      	adds	r3, #124	; 0x7c
 8015870:	4ab9      	ldr	r2, [pc, #740]	; (8015b58 <problem_fetch+0x14838>)
 8015872:	461c      	mov	r4, r3
 8015874:	4613      	mov	r3, r2
 8015876:	cb07      	ldmia	r3!, {r0, r1, r2}
 8015878:	6020      	str	r0, [r4, #0]
 801587a:	6061      	str	r1, [r4, #4]
 801587c:	60a2      	str	r2, [r4, #8]
			p->moveSize = 8;
 801587e:	687b      	ldr	r3, [r7, #4]
 8015880:	2208      	movs	r2, #8
 8015882:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"G,J,G,B,C,H,E,D");
 8015884:	687b      	ldr	r3, [r7, #4]
 8015886:	3340      	adds	r3, #64	; 0x40
 8015888:	4ab4      	ldr	r2, [pc, #720]	; (8015b5c <problem_fetch+0x1483c>)
 801588a:	461c      	mov	r4, r3
 801588c:	4615      	mov	r5, r2
 801588e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8015890:	6020      	str	r0, [r4, #0]
 8015892:	6061      	str	r1, [r4, #4]
 8015894:	60a2      	str	r2, [r4, #8]
 8015896:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,5,9,10,13,13,16,18");
 8015898:	687b      	ldr	r3, [r7, #4]
 801589a:	3304      	adds	r3, #4
 801589c:	4ab0      	ldr	r2, [pc, #704]	; (8015b60 <problem_fetch+0x14840>)
 801589e:	461d      	mov	r5, r3
 80158a0:	4614      	mov	r4, r2
 80158a2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80158a4:	6028      	str	r0, [r5, #0]
 80158a6:	6069      	str	r1, [r5, #4]
 80158a8:	60aa      	str	r2, [r5, #8]
 80158aa:	60eb      	str	r3, [r5, #12]
 80158ac:	6820      	ldr	r0, [r4, #0]
 80158ae:	6128      	str	r0, [r5, #16]
 80158b0:	7923      	ldrb	r3, [r4, #4]
 80158b2:	752b      	strb	r3, [r5, #20]
			strcpy(p->startFinish, "s,s,d,d,d,d,d,e");
 80158b4:	687b      	ldr	r3, [r7, #4]
 80158b6:	33d8      	adds	r3, #216	; 0xd8
 80158b8:	4aaa      	ldr	r2, [pc, #680]	; (8015b64 <problem_fetch+0x14844>)
 80158ba:	461c      	mov	r4, r3
 80158bc:	4615      	mov	r5, r2
 80158be:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80158c0:	6020      	str	r0, [r4, #0]
 80158c2:	6061      	str	r1, [r4, #4]
 80158c4:	60a2      	str	r2, [r4, #8]
 80158c6:	60e3      	str	r3, [r4, #12]
			strcpy(p->grade, "6C");
 80158c8:	687b      	ldr	r3, [r7, #4]
 80158ca:	33cc      	adds	r3, #204	; 0xcc
 80158cc:	4aa6      	ldr	r2, [pc, #664]	; (8015b68 <problem_fetch+0x14848>)
 80158ce:	8811      	ldrh	r1, [r2, #0]
 80158d0:	7892      	ldrb	r2, [r2, #2]
 80158d2:	8019      	strh	r1, [r3, #0]
 80158d4:	709a      	strb	r2, [r3, #2]
			break;
 80158d6:	f005 ba69 	b.w	801adac <problem_fetch+0x19a8c>
		case 670 :
			strcpy(p->name,"DOMINOS PINZA");
 80158da:	687b      	ldr	r3, [r7, #4]
 80158dc:	337c      	adds	r3, #124	; 0x7c
 80158de:	4aa3      	ldr	r2, [pc, #652]	; (8015b6c <problem_fetch+0x1484c>)
 80158e0:	461c      	mov	r4, r3
 80158e2:	4613      	mov	r3, r2
 80158e4:	cb07      	ldmia	r3!, {r0, r1, r2}
 80158e6:	6020      	str	r0, [r4, #0]
 80158e8:	6061      	str	r1, [r4, #4]
 80158ea:	60a2      	str	r2, [r4, #8]
 80158ec:	881b      	ldrh	r3, [r3, #0]
 80158ee:	81a3      	strh	r3, [r4, #12]
			p->moveSize = 5;
 80158f0:	687b      	ldr	r3, [r7, #4]
 80158f2:	2205      	movs	r2, #5
 80158f4:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"B,G,D,I,I");
 80158f6:	687b      	ldr	r3, [r7, #4]
 80158f8:	3340      	adds	r3, #64	; 0x40
 80158fa:	499d      	ldr	r1, [pc, #628]	; (8015b70 <problem_fetch+0x14850>)
 80158fc:	461a      	mov	r2, r3
 80158fe:	460b      	mov	r3, r1
 8015900:	cb03      	ldmia	r3!, {r0, r1}
 8015902:	6010      	str	r0, [r2, #0]
 8015904:	6051      	str	r1, [r2, #4]
 8015906:	881b      	ldrh	r3, [r3, #0]
 8015908:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"6,9,11,14,18");
 801590a:	687b      	ldr	r3, [r7, #4]
 801590c:	3304      	adds	r3, #4
 801590e:	4a99      	ldr	r2, [pc, #612]	; (8015b74 <problem_fetch+0x14854>)
 8015910:	461c      	mov	r4, r3
 8015912:	4613      	mov	r3, r2
 8015914:	cb07      	ldmia	r3!, {r0, r1, r2}
 8015916:	6020      	str	r0, [r4, #0]
 8015918:	6061      	str	r1, [r4, #4]
 801591a:	60a2      	str	r2, [r4, #8]
 801591c:	781b      	ldrb	r3, [r3, #0]
 801591e:	7323      	strb	r3, [r4, #12]
			strcpy(p->startFinish, "s,d,d,d,e");
 8015920:	687b      	ldr	r3, [r7, #4]
 8015922:	33d8      	adds	r3, #216	; 0xd8
 8015924:	4994      	ldr	r1, [pc, #592]	; (8015b78 <problem_fetch+0x14858>)
 8015926:	461a      	mov	r2, r3
 8015928:	460b      	mov	r3, r1
 801592a:	cb03      	ldmia	r3!, {r0, r1}
 801592c:	6010      	str	r0, [r2, #0]
 801592e:	6051      	str	r1, [r2, #4]
 8015930:	881b      	ldrh	r3, [r3, #0]
 8015932:	8113      	strh	r3, [r2, #8]
			strcpy(p->grade, "7B+");
 8015934:	687b      	ldr	r3, [r7, #4]
 8015936:	33cc      	adds	r3, #204	; 0xcc
 8015938:	4a90      	ldr	r2, [pc, #576]	; (8015b7c <problem_fetch+0x1485c>)
 801593a:	6810      	ldr	r0, [r2, #0]
 801593c:	6018      	str	r0, [r3, #0]
			break;
 801593e:	f005 ba35 	b.w	801adac <problem_fetch+0x19a8c>
		case 671 :
			strcpy(p->name,"POPPED A XAN-DON");
 8015942:	687b      	ldr	r3, [r7, #4]
 8015944:	337c      	adds	r3, #124	; 0x7c
 8015946:	4a8e      	ldr	r2, [pc, #568]	; (8015b80 <problem_fetch+0x14860>)
 8015948:	461d      	mov	r5, r3
 801594a:	4614      	mov	r4, r2
 801594c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801594e:	6028      	str	r0, [r5, #0]
 8015950:	6069      	str	r1, [r5, #4]
 8015952:	60aa      	str	r2, [r5, #8]
 8015954:	60eb      	str	r3, [r5, #12]
 8015956:	7823      	ldrb	r3, [r4, #0]
 8015958:	742b      	strb	r3, [r5, #16]
			p->moveSize = 5;
 801595a:	687b      	ldr	r3, [r7, #4]
 801595c:	2205      	movs	r2, #5
 801595e:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"C,G,H,K,I");
 8015960:	687b      	ldr	r3, [r7, #4]
 8015962:	3340      	adds	r3, #64	; 0x40
 8015964:	4987      	ldr	r1, [pc, #540]	; (8015b84 <problem_fetch+0x14864>)
 8015966:	461a      	mov	r2, r3
 8015968:	460b      	mov	r3, r1
 801596a:	cb03      	ldmia	r3!, {r0, r1}
 801596c:	6010      	str	r0, [r2, #0]
 801596e:	6051      	str	r1, [r2, #4]
 8015970:	881b      	ldrh	r3, [r3, #0]
 8015972:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"5,9,12,14,18");
 8015974:	687b      	ldr	r3, [r7, #4]
 8015976:	3304      	adds	r3, #4
 8015978:	4a83      	ldr	r2, [pc, #524]	; (8015b88 <problem_fetch+0x14868>)
 801597a:	461c      	mov	r4, r3
 801597c:	4613      	mov	r3, r2
 801597e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8015980:	6020      	str	r0, [r4, #0]
 8015982:	6061      	str	r1, [r4, #4]
 8015984:	60a2      	str	r2, [r4, #8]
 8015986:	781b      	ldrb	r3, [r3, #0]
 8015988:	7323      	strb	r3, [r4, #12]
			strcpy(p->startFinish, "s,d,d,d,e");
 801598a:	687b      	ldr	r3, [r7, #4]
 801598c:	33d8      	adds	r3, #216	; 0xd8
 801598e:	497a      	ldr	r1, [pc, #488]	; (8015b78 <problem_fetch+0x14858>)
 8015990:	461a      	mov	r2, r3
 8015992:	460b      	mov	r3, r1
 8015994:	cb03      	ldmia	r3!, {r0, r1}
 8015996:	6010      	str	r0, [r2, #0]
 8015998:	6051      	str	r1, [r2, #4]
 801599a:	881b      	ldrh	r3, [r3, #0]
 801599c:	8113      	strh	r3, [r2, #8]
			strcpy(p->grade, "7B+");
 801599e:	687b      	ldr	r3, [r7, #4]
 80159a0:	33cc      	adds	r3, #204	; 0xcc
 80159a2:	4a76      	ldr	r2, [pc, #472]	; (8015b7c <problem_fetch+0x1485c>)
 80159a4:	6810      	ldr	r0, [r2, #0]
 80159a6:	6018      	str	r0, [r3, #0]
			break;
 80159a8:	f005 ba00 	b.w	801adac <problem_fetch+0x19a8c>
		case 672 :
			strcpy(p->name,"ELEVATOR MUSIC");
 80159ac:	687b      	ldr	r3, [r7, #4]
 80159ae:	337c      	adds	r3, #124	; 0x7c
 80159b0:	4a76      	ldr	r2, [pc, #472]	; (8015b8c <problem_fetch+0x1486c>)
 80159b2:	461c      	mov	r4, r3
 80159b4:	4613      	mov	r3, r2
 80159b6:	cb07      	ldmia	r3!, {r0, r1, r2}
 80159b8:	6020      	str	r0, [r4, #0]
 80159ba:	6061      	str	r1, [r4, #4]
 80159bc:	60a2      	str	r2, [r4, #8]
 80159be:	881a      	ldrh	r2, [r3, #0]
 80159c0:	789b      	ldrb	r3, [r3, #2]
 80159c2:	81a2      	strh	r2, [r4, #12]
 80159c4:	73a3      	strb	r3, [r4, #14]
			p->moveSize = 6;
 80159c6:	687b      	ldr	r3, [r7, #4]
 80159c8:	2206      	movs	r2, #6
 80159ca:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"D,G,K,J,F,I");
 80159cc:	687b      	ldr	r3, [r7, #4]
 80159ce:	3340      	adds	r3, #64	; 0x40
 80159d0:	4a6f      	ldr	r2, [pc, #444]	; (8015b90 <problem_fetch+0x14870>)
 80159d2:	461c      	mov	r4, r3
 80159d4:	4613      	mov	r3, r2
 80159d6:	cb07      	ldmia	r3!, {r0, r1, r2}
 80159d8:	6020      	str	r0, [r4, #0]
 80159da:	6061      	str	r1, [r4, #4]
 80159dc:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"18,14,9,5,11,7");
 80159de:	687b      	ldr	r3, [r7, #4]
 80159e0:	3304      	adds	r3, #4
 80159e2:	4a6c      	ldr	r2, [pc, #432]	; (8015b94 <problem_fetch+0x14874>)
 80159e4:	461c      	mov	r4, r3
 80159e6:	4613      	mov	r3, r2
 80159e8:	cb07      	ldmia	r3!, {r0, r1, r2}
 80159ea:	6020      	str	r0, [r4, #0]
 80159ec:	6061      	str	r1, [r4, #4]
 80159ee:	60a2      	str	r2, [r4, #8]
 80159f0:	881a      	ldrh	r2, [r3, #0]
 80159f2:	789b      	ldrb	r3, [r3, #2]
 80159f4:	81a2      	strh	r2, [r4, #12]
 80159f6:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish, "e,d,d,s,d,d");
 80159f8:	687b      	ldr	r3, [r7, #4]
 80159fa:	33d8      	adds	r3, #216	; 0xd8
 80159fc:	4a66      	ldr	r2, [pc, #408]	; (8015b98 <problem_fetch+0x14878>)
 80159fe:	461c      	mov	r4, r3
 8015a00:	4613      	mov	r3, r2
 8015a02:	cb07      	ldmia	r3!, {r0, r1, r2}
 8015a04:	6020      	str	r0, [r4, #0]
 8015a06:	6061      	str	r1, [r4, #4]
 8015a08:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade, "7A");
 8015a0a:	687b      	ldr	r3, [r7, #4]
 8015a0c:	33cc      	adds	r3, #204	; 0xcc
 8015a0e:	4a63      	ldr	r2, [pc, #396]	; (8015b9c <problem_fetch+0x1487c>)
 8015a10:	8811      	ldrh	r1, [r2, #0]
 8015a12:	7892      	ldrb	r2, [r2, #2]
 8015a14:	8019      	strh	r1, [r3, #0]
 8015a16:	709a      	strb	r2, [r3, #2]
			break;
 8015a18:	f005 b9c8 	b.w	801adac <problem_fetch+0x19a8c>
		case 673 :
			strcpy(p->name,"LEVITATOR MUSIC");
 8015a1c:	687b      	ldr	r3, [r7, #4]
 8015a1e:	337c      	adds	r3, #124	; 0x7c
 8015a20:	4a5f      	ldr	r2, [pc, #380]	; (8015ba0 <problem_fetch+0x14880>)
 8015a22:	461c      	mov	r4, r3
 8015a24:	4615      	mov	r5, r2
 8015a26:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8015a28:	6020      	str	r0, [r4, #0]
 8015a2a:	6061      	str	r1, [r4, #4]
 8015a2c:	60a2      	str	r2, [r4, #8]
 8015a2e:	60e3      	str	r3, [r4, #12]
			p->moveSize = 7;
 8015a30:	687b      	ldr	r3, [r7, #4]
 8015a32:	2207      	movs	r2, #7
 8015a34:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"G,A,A,F,K,J,I");
 8015a36:	687b      	ldr	r3, [r7, #4]
 8015a38:	3340      	adds	r3, #64	; 0x40
 8015a3a:	4a5a      	ldr	r2, [pc, #360]	; (8015ba4 <problem_fetch+0x14884>)
 8015a3c:	461c      	mov	r4, r3
 8015a3e:	4613      	mov	r3, r2
 8015a40:	cb07      	ldmia	r3!, {r0, r1, r2}
 8015a42:	6020      	str	r0, [r4, #0]
 8015a44:	6061      	str	r1, [r4, #4]
 8015a46:	60a2      	str	r2, [r4, #8]
 8015a48:	881b      	ldrh	r3, [r3, #0]
 8015a4a:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"14,14,18,11,9,5,7");
 8015a4c:	687b      	ldr	r3, [r7, #4]
 8015a4e:	3304      	adds	r3, #4
 8015a50:	4a55      	ldr	r2, [pc, #340]	; (8015ba8 <problem_fetch+0x14888>)
 8015a52:	461d      	mov	r5, r3
 8015a54:	4614      	mov	r4, r2
 8015a56:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8015a58:	6028      	str	r0, [r5, #0]
 8015a5a:	6069      	str	r1, [r5, #4]
 8015a5c:	60aa      	str	r2, [r5, #8]
 8015a5e:	60eb      	str	r3, [r5, #12]
 8015a60:	8823      	ldrh	r3, [r4, #0]
 8015a62:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish, "d,d,e,d,d,s,d");
 8015a64:	687b      	ldr	r3, [r7, #4]
 8015a66:	33d8      	adds	r3, #216	; 0xd8
 8015a68:	4a50      	ldr	r2, [pc, #320]	; (8015bac <problem_fetch+0x1488c>)
 8015a6a:	461c      	mov	r4, r3
 8015a6c:	4613      	mov	r3, r2
 8015a6e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8015a70:	6020      	str	r0, [r4, #0]
 8015a72:	6061      	str	r1, [r4, #4]
 8015a74:	60a2      	str	r2, [r4, #8]
 8015a76:	881b      	ldrh	r3, [r3, #0]
 8015a78:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade, "7A+");
 8015a7a:	687b      	ldr	r3, [r7, #4]
 8015a7c:	33cc      	adds	r3, #204	; 0xcc
 8015a7e:	4a4c      	ldr	r2, [pc, #304]	; (8015bb0 <problem_fetch+0x14890>)
 8015a80:	6810      	ldr	r0, [r2, #0]
 8015a82:	6018      	str	r0, [r3, #0]
			break;
 8015a84:	f005 b992 	b.w	801adac <problem_fetch+0x19a8c>
		case 674 :
			strcpy(p->name,"TRIP3");
 8015a88:	687b      	ldr	r3, [r7, #4]
 8015a8a:	337c      	adds	r3, #124	; 0x7c
 8015a8c:	4a49      	ldr	r2, [pc, #292]	; (8015bb4 <problem_fetch+0x14894>)
 8015a8e:	6810      	ldr	r0, [r2, #0]
 8015a90:	6018      	str	r0, [r3, #0]
 8015a92:	8892      	ldrh	r2, [r2, #4]
 8015a94:	809a      	strh	r2, [r3, #4]
			p->moveSize = 6;
 8015a96:	687b      	ldr	r3, [r7, #4]
 8015a98:	2206      	movs	r2, #6
 8015a9a:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"E,E,B,C,C,D");
 8015a9c:	687b      	ldr	r3, [r7, #4]
 8015a9e:	3340      	adds	r3, #64	; 0x40
 8015aa0:	4a45      	ldr	r2, [pc, #276]	; (8015bb8 <problem_fetch+0x14898>)
 8015aa2:	461c      	mov	r4, r3
 8015aa4:	4613      	mov	r3, r2
 8015aa6:	cb07      	ldmia	r3!, {r0, r1, r2}
 8015aa8:	6020      	str	r0, [r4, #0]
 8015aaa:	6061      	str	r1, [r4, #4]
 8015aac:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"12,6,10,8,5,18");
 8015aae:	687b      	ldr	r3, [r7, #4]
 8015ab0:	3304      	adds	r3, #4
 8015ab2:	4a42      	ldr	r2, [pc, #264]	; (8015bbc <problem_fetch+0x1489c>)
 8015ab4:	461c      	mov	r4, r3
 8015ab6:	4613      	mov	r3, r2
 8015ab8:	cb07      	ldmia	r3!, {r0, r1, r2}
 8015aba:	6020      	str	r0, [r4, #0]
 8015abc:	6061      	str	r1, [r4, #4]
 8015abe:	60a2      	str	r2, [r4, #8]
 8015ac0:	881a      	ldrh	r2, [r3, #0]
 8015ac2:	789b      	ldrb	r3, [r3, #2]
 8015ac4:	81a2      	strh	r2, [r4, #12]
 8015ac6:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish, "d,s,d,d,s,e");
 8015ac8:	687b      	ldr	r3, [r7, #4]
 8015aca:	33d8      	adds	r3, #216	; 0xd8
 8015acc:	4a3c      	ldr	r2, [pc, #240]	; (8015bc0 <problem_fetch+0x148a0>)
 8015ace:	461c      	mov	r4, r3
 8015ad0:	4613      	mov	r3, r2
 8015ad2:	cb07      	ldmia	r3!, {r0, r1, r2}
 8015ad4:	6020      	str	r0, [r4, #0]
 8015ad6:	6061      	str	r1, [r4, #4]
 8015ad8:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade, "7A+");
 8015ada:	687b      	ldr	r3, [r7, #4]
 8015adc:	33cc      	adds	r3, #204	; 0xcc
 8015ade:	4a34      	ldr	r2, [pc, #208]	; (8015bb0 <problem_fetch+0x14890>)
 8015ae0:	6810      	ldr	r0, [r2, #0]
 8015ae2:	6018      	str	r0, [r3, #0]
			break;
 8015ae4:	f005 b962 	b.w	801adac <problem_fetch+0x19a8c>
		case 675 :
			strcpy(p->name,"TRIP4");
 8015ae8:	687b      	ldr	r3, [r7, #4]
 8015aea:	337c      	adds	r3, #124	; 0x7c
 8015aec:	4a35      	ldr	r2, [pc, #212]	; (8015bc4 <problem_fetch+0x148a4>)
 8015aee:	6810      	ldr	r0, [r2, #0]
 8015af0:	6018      	str	r0, [r3, #0]
 8015af2:	8892      	ldrh	r2, [r2, #4]
 8015af4:	809a      	strh	r2, [r3, #4]
			p->moveSize = 9;
 8015af6:	687b      	ldr	r3, [r7, #4]
 8015af8:	2209      	movs	r2, #9
 8015afa:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"H,J,K,J,H,D,D,I,D");
 8015afc:	687b      	ldr	r3, [r7, #4]
 8015afe:	3340      	adds	r3, #64	; 0x40
 8015b00:	4a31      	ldr	r2, [pc, #196]	; (8015bc8 <problem_fetch+0x148a8>)
 8015b02:	461d      	mov	r5, r3
 8015b04:	4614      	mov	r4, r2
 8015b06:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8015b08:	6028      	str	r0, [r5, #0]
 8015b0a:	6069      	str	r1, [r5, #4]
 8015b0c:	60aa      	str	r2, [r5, #8]
 8015b0e:	60eb      	str	r3, [r5, #12]
 8015b10:	8823      	ldrh	r3, [r4, #0]
 8015b12:	822b      	strh	r3, [r5, #16]
			strcpy(p->moveNumbers,"5,5,9,13,12,11,7,7,18");
 8015b14:	687b      	ldr	r3, [r7, #4]
 8015b16:	3304      	adds	r3, #4
 8015b18:	4a2c      	ldr	r2, [pc, #176]	; (8015bcc <problem_fetch+0x148ac>)
 8015b1a:	461d      	mov	r5, r3
 8015b1c:	4614      	mov	r4, r2
 8015b1e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8015b20:	6028      	str	r0, [r5, #0]
 8015b22:	6069      	str	r1, [r5, #4]
 8015b24:	60aa      	str	r2, [r5, #8]
 8015b26:	60eb      	str	r3, [r5, #12]
 8015b28:	6820      	ldr	r0, [r4, #0]
 8015b2a:	6128      	str	r0, [r5, #16]
 8015b2c:	88a3      	ldrh	r3, [r4, #4]
 8015b2e:	82ab      	strh	r3, [r5, #20]
			strcpy(p->startFinish, "s,s,d,d,d,d,d,d,e");
 8015b30:	687b      	ldr	r3, [r7, #4]
 8015b32:	33d8      	adds	r3, #216	; 0xd8
 8015b34:	4a26      	ldr	r2, [pc, #152]	; (8015bd0 <problem_fetch+0x148b0>)
 8015b36:	461d      	mov	r5, r3
 8015b38:	4614      	mov	r4, r2
 8015b3a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8015b3c:	6028      	str	r0, [r5, #0]
 8015b3e:	6069      	str	r1, [r5, #4]
 8015b40:	60aa      	str	r2, [r5, #8]
 8015b42:	60eb      	str	r3, [r5, #12]
 8015b44:	8823      	ldrh	r3, [r4, #0]
 8015b46:	822b      	strh	r3, [r5, #16]
			strcpy(p->grade, "7C+");
 8015b48:	687b      	ldr	r3, [r7, #4]
 8015b4a:	33cc      	adds	r3, #204	; 0xcc
 8015b4c:	4a21      	ldr	r2, [pc, #132]	; (8015bd4 <problem_fetch+0x148b4>)
 8015b4e:	6810      	ldr	r0, [r2, #0]
 8015b50:	6018      	str	r0, [r3, #0]
			break;
 8015b52:	f005 b92b 	b.w	801adac <problem_fetch+0x19a8c>
 8015b56:	bf00      	nop
 8015b58:	0802888c 	.word	0x0802888c
 8015b5c:	08028898 	.word	0x08028898
 8015b60:	080288a8 	.word	0x080288a8
 8015b64:	080214cc 	.word	0x080214cc
 8015b68:	08021370 	.word	0x08021370
 8015b6c:	080288c0 	.word	0x080288c0
 8015b70:	080288d0 	.word	0x080288d0
 8015b74:	080288dc 	.word	0x080288dc
 8015b78:	08021320 	.word	0x08021320
 8015b7c:	08021848 	.word	0x08021848
 8015b80:	080288ec 	.word	0x080288ec
 8015b84:	08028900 	.word	0x08028900
 8015b88:	08022d64 	.word	0x08022d64
 8015b8c:	0802890c 	.word	0x0802890c
 8015b90:	0802891c 	.word	0x0802891c
 8015b94:	08028928 	.word	0x08028928
 8015b98:	08028938 	.word	0x08028938
 8015b9c:	080212f4 	.word	0x080212f4
 8015ba0:	08028944 	.word	0x08028944
 8015ba4:	08028954 	.word	0x08028954
 8015ba8:	08028964 	.word	0x08028964
 8015bac:	08028978 	.word	0x08028978
 8015bb0:	08021424 	.word	0x08021424
 8015bb4:	08028988 	.word	0x08028988
 8015bb8:	08028990 	.word	0x08028990
 8015bbc:	0802899c 	.word	0x0802899c
 8015bc0:	080289ac 	.word	0x080289ac
 8015bc4:	080289b8 	.word	0x080289b8
 8015bc8:	080289c0 	.word	0x080289c0
 8015bcc:	080289d4 	.word	0x080289d4
 8015bd0:	0802187c 	.word	0x0802187c
 8015bd4:	08023170 	.word	0x08023170
		case 676 :
			strcpy(p->name,"HOJAR KLUBBEN");
 8015bd8:	687b      	ldr	r3, [r7, #4]
 8015bda:	337c      	adds	r3, #124	; 0x7c
 8015bdc:	4abd      	ldr	r2, [pc, #756]	; (8015ed4 <problem_fetch+0x14bb4>)
 8015bde:	461c      	mov	r4, r3
 8015be0:	4613      	mov	r3, r2
 8015be2:	cb07      	ldmia	r3!, {r0, r1, r2}
 8015be4:	6020      	str	r0, [r4, #0]
 8015be6:	6061      	str	r1, [r4, #4]
 8015be8:	60a2      	str	r2, [r4, #8]
 8015bea:	881b      	ldrh	r3, [r3, #0]
 8015bec:	81a3      	strh	r3, [r4, #12]
			p->moveSize = 7;
 8015bee:	687b      	ldr	r3, [r7, #4]
 8015bf0:	2207      	movs	r2, #7
 8015bf2:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"E,H,J,G,H,G,I");
 8015bf4:	687b      	ldr	r3, [r7, #4]
 8015bf6:	3340      	adds	r3, #64	; 0x40
 8015bf8:	4ab7      	ldr	r2, [pc, #732]	; (8015ed8 <problem_fetch+0x14bb8>)
 8015bfa:	461c      	mov	r4, r3
 8015bfc:	4613      	mov	r3, r2
 8015bfe:	cb07      	ldmia	r3!, {r0, r1, r2}
 8015c00:	6020      	str	r0, [r4, #0]
 8015c02:	6061      	str	r1, [r4, #4]
 8015c04:	60a2      	str	r2, [r4, #8]
 8015c06:	881b      	ldrh	r3, [r3, #0]
 8015c08:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"6,10,13,15,16,17,18");
 8015c0a:	687b      	ldr	r3, [r7, #4]
 8015c0c:	3304      	adds	r3, #4
 8015c0e:	4ab3      	ldr	r2, [pc, #716]	; (8015edc <problem_fetch+0x14bbc>)
 8015c10:	461d      	mov	r5, r3
 8015c12:	4614      	mov	r4, r2
 8015c14:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8015c16:	6028      	str	r0, [r5, #0]
 8015c18:	6069      	str	r1, [r5, #4]
 8015c1a:	60aa      	str	r2, [r5, #8]
 8015c1c:	60eb      	str	r3, [r5, #12]
 8015c1e:	6820      	ldr	r0, [r4, #0]
 8015c20:	6128      	str	r0, [r5, #16]
			strcpy(p->startFinish, "s,d,d,d,d,d,e");
 8015c22:	687b      	ldr	r3, [r7, #4]
 8015c24:	33d8      	adds	r3, #216	; 0xd8
 8015c26:	4aae      	ldr	r2, [pc, #696]	; (8015ee0 <problem_fetch+0x14bc0>)
 8015c28:	461c      	mov	r4, r3
 8015c2a:	4613      	mov	r3, r2
 8015c2c:	cb07      	ldmia	r3!, {r0, r1, r2}
 8015c2e:	6020      	str	r0, [r4, #0]
 8015c30:	6061      	str	r1, [r4, #4]
 8015c32:	60a2      	str	r2, [r4, #8]
 8015c34:	881b      	ldrh	r3, [r3, #0]
 8015c36:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade, "7B");
 8015c38:	687b      	ldr	r3, [r7, #4]
 8015c3a:	33cc      	adds	r3, #204	; 0xcc
 8015c3c:	4aa9      	ldr	r2, [pc, #676]	; (8015ee4 <problem_fetch+0x14bc4>)
 8015c3e:	8811      	ldrh	r1, [r2, #0]
 8015c40:	7892      	ldrb	r2, [r2, #2]
 8015c42:	8019      	strh	r1, [r3, #0]
 8015c44:	709a      	strb	r2, [r3, #2]
			break;
 8015c46:	f005 b8b1 	b.w	801adac <problem_fetch+0x19a8c>
		case 677 :
			strcpy(p->name,"PHILLING SHIFTS");
 8015c4a:	687b      	ldr	r3, [r7, #4]
 8015c4c:	337c      	adds	r3, #124	; 0x7c
 8015c4e:	4aa6      	ldr	r2, [pc, #664]	; (8015ee8 <problem_fetch+0x14bc8>)
 8015c50:	461c      	mov	r4, r3
 8015c52:	4615      	mov	r5, r2
 8015c54:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8015c56:	6020      	str	r0, [r4, #0]
 8015c58:	6061      	str	r1, [r4, #4]
 8015c5a:	60a2      	str	r2, [r4, #8]
 8015c5c:	60e3      	str	r3, [r4, #12]
			p->moveSize = 7;
 8015c5e:	687b      	ldr	r3, [r7, #4]
 8015c60:	2207      	movs	r2, #7
 8015c62:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"A,D,E,J,H,K,G");
 8015c64:	687b      	ldr	r3, [r7, #4]
 8015c66:	3340      	adds	r3, #64	; 0x40
 8015c68:	4aa0      	ldr	r2, [pc, #640]	; (8015eec <problem_fetch+0x14bcc>)
 8015c6a:	461c      	mov	r4, r3
 8015c6c:	4613      	mov	r3, r2
 8015c6e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8015c70:	6020      	str	r0, [r4, #0]
 8015c72:	6061      	str	r1, [r4, #4]
 8015c74:	60a2      	str	r2, [r4, #8]
 8015c76:	881b      	ldrh	r3, [r3, #0]
 8015c78:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"18,18,14,12,8,9,4");
 8015c7a:	687b      	ldr	r3, [r7, #4]
 8015c7c:	3304      	adds	r3, #4
 8015c7e:	4a9c      	ldr	r2, [pc, #624]	; (8015ef0 <problem_fetch+0x14bd0>)
 8015c80:	461d      	mov	r5, r3
 8015c82:	4614      	mov	r4, r2
 8015c84:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8015c86:	6028      	str	r0, [r5, #0]
 8015c88:	6069      	str	r1, [r5, #4]
 8015c8a:	60aa      	str	r2, [r5, #8]
 8015c8c:	60eb      	str	r3, [r5, #12]
 8015c8e:	8823      	ldrh	r3, [r4, #0]
 8015c90:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish, "e,e,d,d,d,d,s");
 8015c92:	687b      	ldr	r3, [r7, #4]
 8015c94:	33d8      	adds	r3, #216	; 0xd8
 8015c96:	4a97      	ldr	r2, [pc, #604]	; (8015ef4 <problem_fetch+0x14bd4>)
 8015c98:	461c      	mov	r4, r3
 8015c9a:	4613      	mov	r3, r2
 8015c9c:	cb07      	ldmia	r3!, {r0, r1, r2}
 8015c9e:	6020      	str	r0, [r4, #0]
 8015ca0:	6061      	str	r1, [r4, #4]
 8015ca2:	60a2      	str	r2, [r4, #8]
 8015ca4:	881b      	ldrh	r3, [r3, #0]
 8015ca6:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade, "7C");
 8015ca8:	687b      	ldr	r3, [r7, #4]
 8015caa:	33cc      	adds	r3, #204	; 0xcc
 8015cac:	4a92      	ldr	r2, [pc, #584]	; (8015ef8 <problem_fetch+0x14bd8>)
 8015cae:	8811      	ldrh	r1, [r2, #0]
 8015cb0:	7892      	ldrb	r2, [r2, #2]
 8015cb2:	8019      	strh	r1, [r3, #0]
 8015cb4:	709a      	strb	r2, [r3, #2]
			break;
 8015cb6:	f005 b879 	b.w	801adac <problem_fetch+0x19a8c>
		case 678 :
			strcpy(p->name,"LONG BOI 2");
 8015cba:	687b      	ldr	r3, [r7, #4]
 8015cbc:	337c      	adds	r3, #124	; 0x7c
 8015cbe:	498f      	ldr	r1, [pc, #572]	; (8015efc <problem_fetch+0x14bdc>)
 8015cc0:	461a      	mov	r2, r3
 8015cc2:	460b      	mov	r3, r1
 8015cc4:	cb03      	ldmia	r3!, {r0, r1}
 8015cc6:	6010      	str	r0, [r2, #0]
 8015cc8:	6051      	str	r1, [r2, #4]
 8015cca:	8819      	ldrh	r1, [r3, #0]
 8015ccc:	789b      	ldrb	r3, [r3, #2]
 8015cce:	8111      	strh	r1, [r2, #8]
 8015cd0:	7293      	strb	r3, [r2, #10]
			p->moveSize = 4;
 8015cd2:	687b      	ldr	r3, [r7, #4]
 8015cd4:	2204      	movs	r2, #4
 8015cd6:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"E,H,G,I");
 8015cd8:	687b      	ldr	r3, [r7, #4]
 8015cda:	3340      	adds	r3, #64	; 0x40
 8015cdc:	4988      	ldr	r1, [pc, #544]	; (8015f00 <problem_fetch+0x14be0>)
 8015cde:	461a      	mov	r2, r3
 8015ce0:	460b      	mov	r3, r1
 8015ce2:	cb03      	ldmia	r3!, {r0, r1}
 8015ce4:	6010      	str	r0, [r2, #0]
 8015ce6:	6051      	str	r1, [r2, #4]
			strcpy(p->moveNumbers,"6,10,15,18");
 8015ce8:	687b      	ldr	r3, [r7, #4]
 8015cea:	3304      	adds	r3, #4
 8015cec:	4985      	ldr	r1, [pc, #532]	; (8015f04 <problem_fetch+0x14be4>)
 8015cee:	461a      	mov	r2, r3
 8015cf0:	460b      	mov	r3, r1
 8015cf2:	cb03      	ldmia	r3!, {r0, r1}
 8015cf4:	6010      	str	r0, [r2, #0]
 8015cf6:	6051      	str	r1, [r2, #4]
 8015cf8:	8819      	ldrh	r1, [r3, #0]
 8015cfa:	789b      	ldrb	r3, [r3, #2]
 8015cfc:	8111      	strh	r1, [r2, #8]
 8015cfe:	7293      	strb	r3, [r2, #10]
			strcpy(p->startFinish, "s,d,d,e");
 8015d00:	687b      	ldr	r3, [r7, #4]
 8015d02:	33d8      	adds	r3, #216	; 0xd8
 8015d04:	4980      	ldr	r1, [pc, #512]	; (8015f08 <problem_fetch+0x14be8>)
 8015d06:	461a      	mov	r2, r3
 8015d08:	460b      	mov	r3, r1
 8015d0a:	cb03      	ldmia	r3!, {r0, r1}
 8015d0c:	6010      	str	r0, [r2, #0]
 8015d0e:	6051      	str	r1, [r2, #4]
			strcpy(p->grade, "7A+");
 8015d10:	687b      	ldr	r3, [r7, #4]
 8015d12:	33cc      	adds	r3, #204	; 0xcc
 8015d14:	4a7d      	ldr	r2, [pc, #500]	; (8015f0c <problem_fetch+0x14bec>)
 8015d16:	6810      	ldr	r0, [r2, #0]
 8015d18:	6018      	str	r0, [r3, #0]
			break;
 8015d1a:	f005 b847 	b.w	801adac <problem_fetch+0x19a8c>
		case 679 :
			strcpy(p->name,"SUPE");
 8015d1e:	687b      	ldr	r3, [r7, #4]
 8015d20:	337c      	adds	r3, #124	; 0x7c
 8015d22:	4a7b      	ldr	r2, [pc, #492]	; (8015f10 <problem_fetch+0x14bf0>)
 8015d24:	6810      	ldr	r0, [r2, #0]
 8015d26:	6018      	str	r0, [r3, #0]
 8015d28:	7912      	ldrb	r2, [r2, #4]
 8015d2a:	711a      	strb	r2, [r3, #4]
			p->moveSize = 8;
 8015d2c:	687b      	ldr	r3, [r7, #4]
 8015d2e:	2208      	movs	r2, #8
 8015d30:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"G,I,G,G,C,G,E,I");
 8015d32:	687b      	ldr	r3, [r7, #4]
 8015d34:	3340      	adds	r3, #64	; 0x40
 8015d36:	4a77      	ldr	r2, [pc, #476]	; (8015f14 <problem_fetch+0x14bf4>)
 8015d38:	461c      	mov	r4, r3
 8015d3a:	4615      	mov	r5, r2
 8015d3c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8015d3e:	6020      	str	r0, [r4, #0]
 8015d40:	6061      	str	r1, [r4, #4]
 8015d42:	60a2      	str	r2, [r4, #8]
 8015d44:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,7,6,10,13,14,16,18");
 8015d46:	687b      	ldr	r3, [r7, #4]
 8015d48:	3304      	adds	r3, #4
 8015d4a:	4a73      	ldr	r2, [pc, #460]	; (8015f18 <problem_fetch+0x14bf8>)
 8015d4c:	461d      	mov	r5, r3
 8015d4e:	4614      	mov	r4, r2
 8015d50:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8015d52:	6028      	str	r0, [r5, #0]
 8015d54:	6069      	str	r1, [r5, #4]
 8015d56:	60aa      	str	r2, [r5, #8]
 8015d58:	60eb      	str	r3, [r5, #12]
 8015d5a:	6820      	ldr	r0, [r4, #0]
 8015d5c:	6128      	str	r0, [r5, #16]
 8015d5e:	7923      	ldrb	r3, [r4, #4]
 8015d60:	752b      	strb	r3, [r5, #20]
			strcpy(p->startFinish, "s,d,d,d,d,d,d,e");
 8015d62:	687b      	ldr	r3, [r7, #4]
 8015d64:	33d8      	adds	r3, #216	; 0xd8
 8015d66:	4a6d      	ldr	r2, [pc, #436]	; (8015f1c <problem_fetch+0x14bfc>)
 8015d68:	461c      	mov	r4, r3
 8015d6a:	4615      	mov	r5, r2
 8015d6c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8015d6e:	6020      	str	r0, [r4, #0]
 8015d70:	6061      	str	r1, [r4, #4]
 8015d72:	60a2      	str	r2, [r4, #8]
 8015d74:	60e3      	str	r3, [r4, #12]
			strcpy(p->grade, "6C+");
 8015d76:	687b      	ldr	r3, [r7, #4]
 8015d78:	33cc      	adds	r3, #204	; 0xcc
 8015d7a:	4a69      	ldr	r2, [pc, #420]	; (8015f20 <problem_fetch+0x14c00>)
 8015d7c:	6810      	ldr	r0, [r2, #0]
 8015d7e:	6018      	str	r0, [r3, #0]
			break;
 8015d80:	f005 b814 	b.w	801adac <problem_fetch+0x19a8c>
		case 68 :
			strcpy(p->name,"TIME TO PLAY");
 8015d84:	687b      	ldr	r3, [r7, #4]
 8015d86:	337c      	adds	r3, #124	; 0x7c
 8015d88:	4a66      	ldr	r2, [pc, #408]	; (8015f24 <problem_fetch+0x14c04>)
 8015d8a:	461c      	mov	r4, r3
 8015d8c:	4613      	mov	r3, r2
 8015d8e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8015d90:	6020      	str	r0, [r4, #0]
 8015d92:	6061      	str	r1, [r4, #4]
 8015d94:	60a2      	str	r2, [r4, #8]
 8015d96:	781b      	ldrb	r3, [r3, #0]
 8015d98:	7323      	strb	r3, [r4, #12]
			p->moveSize = 11;
 8015d9a:	687b      	ldr	r3, [r7, #4]
 8015d9c:	220b      	movs	r2, #11
 8015d9e:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"G,J,I,H,D,D,B,C,G,H,I");
 8015da0:	687b      	ldr	r3, [r7, #4]
 8015da2:	3340      	adds	r3, #64	; 0x40
 8015da4:	4a60      	ldr	r2, [pc, #384]	; (8015f28 <problem_fetch+0x14c08>)
 8015da6:	461d      	mov	r5, r3
 8015da8:	4614      	mov	r4, r2
 8015daa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8015dac:	6028      	str	r0, [r5, #0]
 8015dae:	6069      	str	r1, [r5, #4]
 8015db0:	60aa      	str	r2, [r5, #8]
 8015db2:	60eb      	str	r3, [r5, #12]
 8015db4:	6820      	ldr	r0, [r4, #0]
 8015db6:	6128      	str	r0, [r5, #16]
 8015db8:	88a3      	ldrh	r3, [r4, #4]
 8015dba:	82ab      	strh	r3, [r5, #20]
			strcpy(p->moveNumbers,"4,7,10,12,11,15,6,16,17,16,18");
 8015dbc:	687b      	ldr	r3, [r7, #4]
 8015dbe:	3304      	adds	r3, #4
 8015dc0:	4a5a      	ldr	r2, [pc, #360]	; (8015f2c <problem_fetch+0x14c0c>)
 8015dc2:	461d      	mov	r5, r3
 8015dc4:	4614      	mov	r4, r2
 8015dc6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8015dc8:	6028      	str	r0, [r5, #0]
 8015dca:	6069      	str	r1, [r5, #4]
 8015dcc:	60aa      	str	r2, [r5, #8]
 8015dce:	60eb      	str	r3, [r5, #12]
 8015dd0:	cc07      	ldmia	r4!, {r0, r1, r2}
 8015dd2:	6128      	str	r0, [r5, #16]
 8015dd4:	6169      	str	r1, [r5, #20]
 8015dd6:	61aa      	str	r2, [r5, #24]
 8015dd8:	8823      	ldrh	r3, [r4, #0]
 8015dda:	83ab      	strh	r3, [r5, #28]
			strcpy(p->startFinish, "s,d,d,d,d,d,d,d,d,d,e");
 8015ddc:	687b      	ldr	r3, [r7, #4]
 8015dde:	33d8      	adds	r3, #216	; 0xd8
 8015de0:	4a53      	ldr	r2, [pc, #332]	; (8015f30 <problem_fetch+0x14c10>)
 8015de2:	461d      	mov	r5, r3
 8015de4:	4614      	mov	r4, r2
 8015de6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8015de8:	6028      	str	r0, [r5, #0]
 8015dea:	6069      	str	r1, [r5, #4]
 8015dec:	60aa      	str	r2, [r5, #8]
 8015dee:	60eb      	str	r3, [r5, #12]
 8015df0:	6820      	ldr	r0, [r4, #0]
 8015df2:	6128      	str	r0, [r5, #16]
 8015df4:	88a3      	ldrh	r3, [r4, #4]
 8015df6:	82ab      	strh	r3, [r5, #20]
			strcpy(p->grade, "6C+");
 8015df8:	687b      	ldr	r3, [r7, #4]
 8015dfa:	33cc      	adds	r3, #204	; 0xcc
 8015dfc:	4a48      	ldr	r2, [pc, #288]	; (8015f20 <problem_fetch+0x14c00>)
 8015dfe:	6810      	ldr	r0, [r2, #0]
 8015e00:	6018      	str	r0, [r3, #0]
			break;
 8015e02:	f004 bfd3 	b.w	801adac <problem_fetch+0x19a8c>
		case 680 :
			strcpy(p->name,"RYEBREAD");
 8015e06:	687b      	ldr	r3, [r7, #4]
 8015e08:	337c      	adds	r3, #124	; 0x7c
 8015e0a:	494a      	ldr	r1, [pc, #296]	; (8015f34 <problem_fetch+0x14c14>)
 8015e0c:	461a      	mov	r2, r3
 8015e0e:	460b      	mov	r3, r1
 8015e10:	cb03      	ldmia	r3!, {r0, r1}
 8015e12:	6010      	str	r0, [r2, #0]
 8015e14:	6051      	str	r1, [r2, #4]
 8015e16:	781b      	ldrb	r3, [r3, #0]
 8015e18:	7213      	strb	r3, [r2, #8]
			p->moveSize = 5;
 8015e1a:	687b      	ldr	r3, [r7, #4]
 8015e1c:	2205      	movs	r2, #5
 8015e1e:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"G,F,C,A,A");
 8015e20:	687b      	ldr	r3, [r7, #4]
 8015e22:	3340      	adds	r3, #64	; 0x40
 8015e24:	4944      	ldr	r1, [pc, #272]	; (8015f38 <problem_fetch+0x14c18>)
 8015e26:	461a      	mov	r2, r3
 8015e28:	460b      	mov	r3, r1
 8015e2a:	cb03      	ldmia	r3!, {r0, r1}
 8015e2c:	6010      	str	r0, [r2, #0]
 8015e2e:	6051      	str	r1, [r2, #4]
 8015e30:	881b      	ldrh	r3, [r3, #0]
 8015e32:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"4,11,5,14,18");
 8015e34:	687b      	ldr	r3, [r7, #4]
 8015e36:	3304      	adds	r3, #4
 8015e38:	4a40      	ldr	r2, [pc, #256]	; (8015f3c <problem_fetch+0x14c1c>)
 8015e3a:	461c      	mov	r4, r3
 8015e3c:	4613      	mov	r3, r2
 8015e3e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8015e40:	6020      	str	r0, [r4, #0]
 8015e42:	6061      	str	r1, [r4, #4]
 8015e44:	60a2      	str	r2, [r4, #8]
 8015e46:	781b      	ldrb	r3, [r3, #0]
 8015e48:	7323      	strb	r3, [r4, #12]
			strcpy(p->startFinish, "s,d,d,d,e");
 8015e4a:	687b      	ldr	r3, [r7, #4]
 8015e4c:	33d8      	adds	r3, #216	; 0xd8
 8015e4e:	493c      	ldr	r1, [pc, #240]	; (8015f40 <problem_fetch+0x14c20>)
 8015e50:	461a      	mov	r2, r3
 8015e52:	460b      	mov	r3, r1
 8015e54:	cb03      	ldmia	r3!, {r0, r1}
 8015e56:	6010      	str	r0, [r2, #0]
 8015e58:	6051      	str	r1, [r2, #4]
 8015e5a:	881b      	ldrh	r3, [r3, #0]
 8015e5c:	8113      	strh	r3, [r2, #8]
			strcpy(p->grade, "7C+");
 8015e5e:	687b      	ldr	r3, [r7, #4]
 8015e60:	33cc      	adds	r3, #204	; 0xcc
 8015e62:	4a38      	ldr	r2, [pc, #224]	; (8015f44 <problem_fetch+0x14c24>)
 8015e64:	6810      	ldr	r0, [r2, #0]
 8015e66:	6018      	str	r0, [r3, #0]
			break;
 8015e68:	f004 bfa0 	b.w	801adac <problem_fetch+0x19a8c>
		case 681 :
			strcpy(p->name,"TRØNDERSPOTT");
 8015e6c:	687b      	ldr	r3, [r7, #4]
 8015e6e:	337c      	adds	r3, #124	; 0x7c
 8015e70:	4a35      	ldr	r2, [pc, #212]	; (8015f48 <problem_fetch+0x14c28>)
 8015e72:	461c      	mov	r4, r3
 8015e74:	4613      	mov	r3, r2
 8015e76:	cb07      	ldmia	r3!, {r0, r1, r2}
 8015e78:	6020      	str	r0, [r4, #0]
 8015e7a:	6061      	str	r1, [r4, #4]
 8015e7c:	60a2      	str	r2, [r4, #8]
 8015e7e:	881b      	ldrh	r3, [r3, #0]
 8015e80:	81a3      	strh	r3, [r4, #12]
			p->moveSize = 5;
 8015e82:	687b      	ldr	r3, [r7, #4]
 8015e84:	2205      	movs	r2, #5
 8015e86:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"G,E,H,C,D");
 8015e88:	687b      	ldr	r3, [r7, #4]
 8015e8a:	3340      	adds	r3, #64	; 0x40
 8015e8c:	492f      	ldr	r1, [pc, #188]	; (8015f4c <problem_fetch+0x14c2c>)
 8015e8e:	461a      	mov	r2, r3
 8015e90:	460b      	mov	r3, r1
 8015e92:	cb03      	ldmia	r3!, {r0, r1}
 8015e94:	6010      	str	r0, [r2, #0]
 8015e96:	6051      	str	r1, [r2, #4]
 8015e98:	881b      	ldrh	r3, [r3, #0]
 8015e9a:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"4,6,10,13,18");
 8015e9c:	687b      	ldr	r3, [r7, #4]
 8015e9e:	3304      	adds	r3, #4
 8015ea0:	4a2b      	ldr	r2, [pc, #172]	; (8015f50 <problem_fetch+0x14c30>)
 8015ea2:	461c      	mov	r4, r3
 8015ea4:	4613      	mov	r3, r2
 8015ea6:	cb07      	ldmia	r3!, {r0, r1, r2}
 8015ea8:	6020      	str	r0, [r4, #0]
 8015eaa:	6061      	str	r1, [r4, #4]
 8015eac:	60a2      	str	r2, [r4, #8]
 8015eae:	781b      	ldrb	r3, [r3, #0]
 8015eb0:	7323      	strb	r3, [r4, #12]
			strcpy(p->startFinish, "s,s,d,d,e");
 8015eb2:	687b      	ldr	r3, [r7, #4]
 8015eb4:	33d8      	adds	r3, #216	; 0xd8
 8015eb6:	4927      	ldr	r1, [pc, #156]	; (8015f54 <problem_fetch+0x14c34>)
 8015eb8:	461a      	mov	r2, r3
 8015eba:	460b      	mov	r3, r1
 8015ebc:	cb03      	ldmia	r3!, {r0, r1}
 8015ebe:	6010      	str	r0, [r2, #0]
 8015ec0:	6051      	str	r1, [r2, #4]
 8015ec2:	881b      	ldrh	r3, [r3, #0]
 8015ec4:	8113      	strh	r3, [r2, #8]
			strcpy(p->grade, "6B+");
 8015ec6:	687b      	ldr	r3, [r7, #4]
 8015ec8:	33cc      	adds	r3, #204	; 0xcc
 8015eca:	4a23      	ldr	r2, [pc, #140]	; (8015f58 <problem_fetch+0x14c38>)
 8015ecc:	6810      	ldr	r0, [r2, #0]
 8015ece:	6018      	str	r0, [r3, #0]
			break;
 8015ed0:	f004 bf6c 	b.w	801adac <problem_fetch+0x19a8c>
 8015ed4:	080289ec 	.word	0x080289ec
 8015ed8:	080289fc 	.word	0x080289fc
 8015edc:	08028a0c 	.word	0x08028a0c
 8015ee0:	08021494 	.word	0x08021494
 8015ee4:	0802132c 	.word	0x0802132c
 8015ee8:	08028a20 	.word	0x08028a20
 8015eec:	08028a30 	.word	0x08028a30
 8015ef0:	08028a40 	.word	0x08028a40
 8015ef4:	08028a54 	.word	0x08028a54
 8015ef8:	0802158c 	.word	0x0802158c
 8015efc:	08028a64 	.word	0x08028a64
 8015f00:	08028a70 	.word	0x08028a70
 8015f04:	08028a78 	.word	0x08028a78
 8015f08:	08022028 	.word	0x08022028
 8015f0c:	08021424 	.word	0x08021424
 8015f10:	08028a84 	.word	0x08028a84
 8015f14:	08028a8c 	.word	0x08028a8c
 8015f18:	08028a9c 	.word	0x08028a9c
 8015f1c:	08021458 	.word	0x08021458
 8015f20:	080213a8 	.word	0x080213a8
 8015f24:	08028ab4 	.word	0x08028ab4
 8015f28:	08028ac4 	.word	0x08028ac4
 8015f2c:	08028adc 	.word	0x08028adc
 8015f30:	08028afc 	.word	0x08028afc
 8015f34:	08028b14 	.word	0x08028b14
 8015f38:	08028b20 	.word	0x08028b20
 8015f3c:	08028b2c 	.word	0x08028b2c
 8015f40:	08021320 	.word	0x08021320
 8015f44:	08023170 	.word	0x08023170
 8015f48:	08028b3c 	.word	0x08028b3c
 8015f4c:	08028b4c 	.word	0x08028b4c
 8015f50:	08028b58 	.word	0x08028b58
 8015f54:	080221c8 	.word	0x080221c8
 8015f58:	080212b0 	.word	0x080212b0
		case 682 :
			strcpy(p->name,"CATA");
 8015f5c:	687b      	ldr	r3, [r7, #4]
 8015f5e:	337c      	adds	r3, #124	; 0x7c
 8015f60:	4abf      	ldr	r2, [pc, #764]	; (8016260 <problem_fetch+0x14f40>)
 8015f62:	6810      	ldr	r0, [r2, #0]
 8015f64:	6018      	str	r0, [r3, #0]
 8015f66:	7912      	ldrb	r2, [r2, #4]
 8015f68:	711a      	strb	r2, [r3, #4]
			p->moveSize = 5;
 8015f6a:	687b      	ldr	r3, [r7, #4]
 8015f6c:	2205      	movs	r2, #5
 8015f6e:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"G,J,F,A,D");
 8015f70:	687b      	ldr	r3, [r7, #4]
 8015f72:	3340      	adds	r3, #64	; 0x40
 8015f74:	49bb      	ldr	r1, [pc, #748]	; (8016264 <problem_fetch+0x14f44>)
 8015f76:	461a      	mov	r2, r3
 8015f78:	460b      	mov	r3, r1
 8015f7a:	cb03      	ldmia	r3!, {r0, r1}
 8015f7c:	6010      	str	r0, [r2, #0]
 8015f7e:	6051      	str	r1, [r2, #4]
 8015f80:	881b      	ldrh	r3, [r3, #0]
 8015f82:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"6,7,11,14,18");
 8015f84:	687b      	ldr	r3, [r7, #4]
 8015f86:	3304      	adds	r3, #4
 8015f88:	4ab7      	ldr	r2, [pc, #732]	; (8016268 <problem_fetch+0x14f48>)
 8015f8a:	461c      	mov	r4, r3
 8015f8c:	4613      	mov	r3, r2
 8015f8e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8015f90:	6020      	str	r0, [r4, #0]
 8015f92:	6061      	str	r1, [r4, #4]
 8015f94:	60a2      	str	r2, [r4, #8]
 8015f96:	781b      	ldrb	r3, [r3, #0]
 8015f98:	7323      	strb	r3, [r4, #12]
			strcpy(p->startFinish, "s,d,d,d,e");
 8015f9a:	687b      	ldr	r3, [r7, #4]
 8015f9c:	33d8      	adds	r3, #216	; 0xd8
 8015f9e:	49b3      	ldr	r1, [pc, #716]	; (801626c <problem_fetch+0x14f4c>)
 8015fa0:	461a      	mov	r2, r3
 8015fa2:	460b      	mov	r3, r1
 8015fa4:	cb03      	ldmia	r3!, {r0, r1}
 8015fa6:	6010      	str	r0, [r2, #0]
 8015fa8:	6051      	str	r1, [r2, #4]
 8015faa:	881b      	ldrh	r3, [r3, #0]
 8015fac:	8113      	strh	r3, [r2, #8]
			strcpy(p->grade, "7A+");
 8015fae:	687b      	ldr	r3, [r7, #4]
 8015fb0:	33cc      	adds	r3, #204	; 0xcc
 8015fb2:	4aaf      	ldr	r2, [pc, #700]	; (8016270 <problem_fetch+0x14f50>)
 8015fb4:	6810      	ldr	r0, [r2, #0]
 8015fb6:	6018      	str	r0, [r3, #0]
			break;
 8015fb8:	f004 bef8 	b.w	801adac <problem_fetch+0x19a8c>
		case 683 :
			strcpy(p->name,"LADYBUG DIRECT");
 8015fbc:	687b      	ldr	r3, [r7, #4]
 8015fbe:	337c      	adds	r3, #124	; 0x7c
 8015fc0:	4aac      	ldr	r2, [pc, #688]	; (8016274 <problem_fetch+0x14f54>)
 8015fc2:	461c      	mov	r4, r3
 8015fc4:	4613      	mov	r3, r2
 8015fc6:	cb07      	ldmia	r3!, {r0, r1, r2}
 8015fc8:	6020      	str	r0, [r4, #0]
 8015fca:	6061      	str	r1, [r4, #4]
 8015fcc:	60a2      	str	r2, [r4, #8]
 8015fce:	881a      	ldrh	r2, [r3, #0]
 8015fd0:	789b      	ldrb	r3, [r3, #2]
 8015fd2:	81a2      	strh	r2, [r4, #12]
 8015fd4:	73a3      	strb	r3, [r4, #14]
			p->moveSize = 6;
 8015fd6:	687b      	ldr	r3, [r7, #4]
 8015fd8:	2206      	movs	r2, #6
 8015fda:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"G,J,H,C,D,A");
 8015fdc:	687b      	ldr	r3, [r7, #4]
 8015fde:	3340      	adds	r3, #64	; 0x40
 8015fe0:	4aa5      	ldr	r2, [pc, #660]	; (8016278 <problem_fetch+0x14f58>)
 8015fe2:	461c      	mov	r4, r3
 8015fe4:	4613      	mov	r3, r2
 8015fe6:	cb07      	ldmia	r3!, {r0, r1, r2}
 8015fe8:	6020      	str	r0, [r4, #0]
 8015fea:	6061      	str	r1, [r4, #4]
 8015fec:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"6,5,10,13,18,9");
 8015fee:	687b      	ldr	r3, [r7, #4]
 8015ff0:	3304      	adds	r3, #4
 8015ff2:	4aa2      	ldr	r2, [pc, #648]	; (801627c <problem_fetch+0x14f5c>)
 8015ff4:	461c      	mov	r4, r3
 8015ff6:	4613      	mov	r3, r2
 8015ff8:	cb07      	ldmia	r3!, {r0, r1, r2}
 8015ffa:	6020      	str	r0, [r4, #0]
 8015ffc:	6061      	str	r1, [r4, #4]
 8015ffe:	60a2      	str	r2, [r4, #8]
 8016000:	881a      	ldrh	r2, [r3, #0]
 8016002:	789b      	ldrb	r3, [r3, #2]
 8016004:	81a2      	strh	r2, [r4, #12]
 8016006:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish, "s,s,d,d,e,d");
 8016008:	687b      	ldr	r3, [r7, #4]
 801600a:	33d8      	adds	r3, #216	; 0xd8
 801600c:	4a9c      	ldr	r2, [pc, #624]	; (8016280 <problem_fetch+0x14f60>)
 801600e:	461c      	mov	r4, r3
 8016010:	4613      	mov	r3, r2
 8016012:	cb07      	ldmia	r3!, {r0, r1, r2}
 8016014:	6020      	str	r0, [r4, #0]
 8016016:	6061      	str	r1, [r4, #4]
 8016018:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade, "7A+");
 801601a:	687b      	ldr	r3, [r7, #4]
 801601c:	33cc      	adds	r3, #204	; 0xcc
 801601e:	4a94      	ldr	r2, [pc, #592]	; (8016270 <problem_fetch+0x14f50>)
 8016020:	6810      	ldr	r0, [r2, #0]
 8016022:	6018      	str	r0, [r3, #0]
			break;
 8016024:	f004 bec2 	b.w	801adac <problem_fetch+0x19a8c>
		case 684 :
			strcpy(p->name,"APRITI");
 8016028:	687b      	ldr	r3, [r7, #4]
 801602a:	337c      	adds	r3, #124	; 0x7c
 801602c:	4a95      	ldr	r2, [pc, #596]	; (8016284 <problem_fetch+0x14f64>)
 801602e:	6810      	ldr	r0, [r2, #0]
 8016030:	6018      	str	r0, [r3, #0]
 8016032:	8891      	ldrh	r1, [r2, #4]
 8016034:	7992      	ldrb	r2, [r2, #6]
 8016036:	8099      	strh	r1, [r3, #4]
 8016038:	719a      	strb	r2, [r3, #6]
			p->moveSize = 8;
 801603a:	687b      	ldr	r3, [r7, #4]
 801603c:	2208      	movs	r2, #8
 801603e:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"C,E,E,H,D,C,D,D");
 8016040:	687b      	ldr	r3, [r7, #4]
 8016042:	3340      	adds	r3, #64	; 0x40
 8016044:	4a90      	ldr	r2, [pc, #576]	; (8016288 <problem_fetch+0x14f68>)
 8016046:	461c      	mov	r4, r3
 8016048:	4615      	mov	r5, r2
 801604a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801604c:	6020      	str	r0, [r4, #0]
 801604e:	6061      	str	r1, [r4, #4]
 8016050:	60a2      	str	r2, [r4, #8]
 8016052:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,6,8,10,11,13,15,18");
 8016054:	687b      	ldr	r3, [r7, #4]
 8016056:	3304      	adds	r3, #4
 8016058:	4a8c      	ldr	r2, [pc, #560]	; (801628c <problem_fetch+0x14f6c>)
 801605a:	461d      	mov	r5, r3
 801605c:	4614      	mov	r4, r2
 801605e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8016060:	6028      	str	r0, [r5, #0]
 8016062:	6069      	str	r1, [r5, #4]
 8016064:	60aa      	str	r2, [r5, #8]
 8016066:	60eb      	str	r3, [r5, #12]
 8016068:	6820      	ldr	r0, [r4, #0]
 801606a:	6128      	str	r0, [r5, #16]
 801606c:	7923      	ldrb	r3, [r4, #4]
 801606e:	752b      	strb	r3, [r5, #20]
			strcpy(p->startFinish, "s,s,d,d,d,d,d,e");
 8016070:	687b      	ldr	r3, [r7, #4]
 8016072:	33d8      	adds	r3, #216	; 0xd8
 8016074:	4a86      	ldr	r2, [pc, #536]	; (8016290 <problem_fetch+0x14f70>)
 8016076:	461c      	mov	r4, r3
 8016078:	4615      	mov	r5, r2
 801607a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801607c:	6020      	str	r0, [r4, #0]
 801607e:	6061      	str	r1, [r4, #4]
 8016080:	60a2      	str	r2, [r4, #8]
 8016082:	60e3      	str	r3, [r4, #12]
			strcpy(p->grade, "6C");
 8016084:	687b      	ldr	r3, [r7, #4]
 8016086:	33cc      	adds	r3, #204	; 0xcc
 8016088:	4a82      	ldr	r2, [pc, #520]	; (8016294 <problem_fetch+0x14f74>)
 801608a:	8811      	ldrh	r1, [r2, #0]
 801608c:	7892      	ldrb	r2, [r2, #2]
 801608e:	8019      	strh	r1, [r3, #0]
 8016090:	709a      	strb	r2, [r3, #2]
			break;
 8016092:	f004 be8b 	b.w	801adac <problem_fetch+0x19a8c>
		case 685 :
			strcpy(p->name,"PB AND JELLY");
 8016096:	687b      	ldr	r3, [r7, #4]
 8016098:	337c      	adds	r3, #124	; 0x7c
 801609a:	4a7f      	ldr	r2, [pc, #508]	; (8016298 <problem_fetch+0x14f78>)
 801609c:	461c      	mov	r4, r3
 801609e:	4613      	mov	r3, r2
 80160a0:	cb07      	ldmia	r3!, {r0, r1, r2}
 80160a2:	6020      	str	r0, [r4, #0]
 80160a4:	6061      	str	r1, [r4, #4]
 80160a6:	60a2      	str	r2, [r4, #8]
 80160a8:	781b      	ldrb	r3, [r3, #0]
 80160aa:	7323      	strb	r3, [r4, #12]
			p->moveSize = 7;
 80160ac:	687b      	ldr	r3, [r7, #4]
 80160ae:	2207      	movs	r2, #7
 80160b0:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"G,E,I,E,H,I,D");
 80160b2:	687b      	ldr	r3, [r7, #4]
 80160b4:	3340      	adds	r3, #64	; 0x40
 80160b6:	4a79      	ldr	r2, [pc, #484]	; (801629c <problem_fetch+0x14f7c>)
 80160b8:	461c      	mov	r4, r3
 80160ba:	4613      	mov	r3, r2
 80160bc:	cb07      	ldmia	r3!, {r0, r1, r2}
 80160be:	6020      	str	r0, [r4, #0]
 80160c0:	6061      	str	r1, [r4, #4]
 80160c2:	60a2      	str	r2, [r4, #8]
 80160c4:	881b      	ldrh	r3, [r3, #0]
 80160c6:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,8,10,14,12,14,18");
 80160c8:	687b      	ldr	r3, [r7, #4]
 80160ca:	3304      	adds	r3, #4
 80160cc:	4a74      	ldr	r2, [pc, #464]	; (80162a0 <problem_fetch+0x14f80>)
 80160ce:	461d      	mov	r5, r3
 80160d0:	4614      	mov	r4, r2
 80160d2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80160d4:	6028      	str	r0, [r5, #0]
 80160d6:	6069      	str	r1, [r5, #4]
 80160d8:	60aa      	str	r2, [r5, #8]
 80160da:	60eb      	str	r3, [r5, #12]
 80160dc:	8823      	ldrh	r3, [r4, #0]
 80160de:	78a2      	ldrb	r2, [r4, #2]
 80160e0:	822b      	strh	r3, [r5, #16]
 80160e2:	4613      	mov	r3, r2
 80160e4:	74ab      	strb	r3, [r5, #18]
			strcpy(p->startFinish, "s,d,d,d,d,d,e");
 80160e6:	687b      	ldr	r3, [r7, #4]
 80160e8:	33d8      	adds	r3, #216	; 0xd8
 80160ea:	4a6e      	ldr	r2, [pc, #440]	; (80162a4 <problem_fetch+0x14f84>)
 80160ec:	461c      	mov	r4, r3
 80160ee:	4613      	mov	r3, r2
 80160f0:	cb07      	ldmia	r3!, {r0, r1, r2}
 80160f2:	6020      	str	r0, [r4, #0]
 80160f4:	6061      	str	r1, [r4, #4]
 80160f6:	60a2      	str	r2, [r4, #8]
 80160f8:	881b      	ldrh	r3, [r3, #0]
 80160fa:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade, "6C+");
 80160fc:	687b      	ldr	r3, [r7, #4]
 80160fe:	33cc      	adds	r3, #204	; 0xcc
 8016100:	4a69      	ldr	r2, [pc, #420]	; (80162a8 <problem_fetch+0x14f88>)
 8016102:	6810      	ldr	r0, [r2, #0]
 8016104:	6018      	str	r0, [r3, #0]
			break;
 8016106:	f004 be51 	b.w	801adac <problem_fetch+0x19a8c>
		case 686 :
			strcpy(p->name,"INNSMOUTH HORROR");
 801610a:	687b      	ldr	r3, [r7, #4]
 801610c:	337c      	adds	r3, #124	; 0x7c
 801610e:	4a67      	ldr	r2, [pc, #412]	; (80162ac <problem_fetch+0x14f8c>)
 8016110:	461d      	mov	r5, r3
 8016112:	4614      	mov	r4, r2
 8016114:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8016116:	6028      	str	r0, [r5, #0]
 8016118:	6069      	str	r1, [r5, #4]
 801611a:	60aa      	str	r2, [r5, #8]
 801611c:	60eb      	str	r3, [r5, #12]
 801611e:	7823      	ldrb	r3, [r4, #0]
 8016120:	742b      	strb	r3, [r5, #16]
			p->moveSize = 9;
 8016122:	687b      	ldr	r3, [r7, #4]
 8016124:	2209      	movs	r2, #9
 8016126:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"C,E,F,E,G,E,I,I,E");
 8016128:	687b      	ldr	r3, [r7, #4]
 801612a:	3340      	adds	r3, #64	; 0x40
 801612c:	4a60      	ldr	r2, [pc, #384]	; (80162b0 <problem_fetch+0x14f90>)
 801612e:	461d      	mov	r5, r3
 8016130:	4614      	mov	r4, r2
 8016132:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8016134:	6028      	str	r0, [r5, #0]
 8016136:	6069      	str	r1, [r5, #4]
 8016138:	60aa      	str	r2, [r5, #8]
 801613a:	60eb      	str	r3, [r5, #12]
 801613c:	8823      	ldrh	r3, [r4, #0]
 801613e:	822b      	strh	r3, [r5, #16]
			strcpy(p->moveNumbers,"5,8,11,12,14,16,18,7,6");
 8016140:	687b      	ldr	r3, [r7, #4]
 8016142:	3304      	adds	r3, #4
 8016144:	4a5b      	ldr	r2, [pc, #364]	; (80162b4 <problem_fetch+0x14f94>)
 8016146:	461c      	mov	r4, r3
 8016148:	4615      	mov	r5, r2
 801614a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801614c:	6020      	str	r0, [r4, #0]
 801614e:	6061      	str	r1, [r4, #4]
 8016150:	60a2      	str	r2, [r4, #8]
 8016152:	60e3      	str	r3, [r4, #12]
 8016154:	6828      	ldr	r0, [r5, #0]
 8016156:	6120      	str	r0, [r4, #16]
 8016158:	88ab      	ldrh	r3, [r5, #4]
 801615a:	79aa      	ldrb	r2, [r5, #6]
 801615c:	82a3      	strh	r3, [r4, #20]
 801615e:	4613      	mov	r3, r2
 8016160:	75a3      	strb	r3, [r4, #22]
			strcpy(p->startFinish, "s,d,d,d,d,d,e,d,s");
 8016162:	687b      	ldr	r3, [r7, #4]
 8016164:	33d8      	adds	r3, #216	; 0xd8
 8016166:	4a54      	ldr	r2, [pc, #336]	; (80162b8 <problem_fetch+0x14f98>)
 8016168:	461d      	mov	r5, r3
 801616a:	4614      	mov	r4, r2
 801616c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801616e:	6028      	str	r0, [r5, #0]
 8016170:	6069      	str	r1, [r5, #4]
 8016172:	60aa      	str	r2, [r5, #8]
 8016174:	60eb      	str	r3, [r5, #12]
 8016176:	8823      	ldrh	r3, [r4, #0]
 8016178:	822b      	strh	r3, [r5, #16]
			strcpy(p->grade, "6B+");
 801617a:	687b      	ldr	r3, [r7, #4]
 801617c:	33cc      	adds	r3, #204	; 0xcc
 801617e:	4a4f      	ldr	r2, [pc, #316]	; (80162bc <problem_fetch+0x14f9c>)
 8016180:	6810      	ldr	r0, [r2, #0]
 8016182:	6018      	str	r0, [r3, #0]
			break;
 8016184:	f004 be12 	b.w	801adac <problem_fetch+0x19a8c>
		case 687 :
			strcpy(p->name,"BROWN DIRTY WATER");
 8016188:	687b      	ldr	r3, [r7, #4]
 801618a:	337c      	adds	r3, #124	; 0x7c
 801618c:	4a4c      	ldr	r2, [pc, #304]	; (80162c0 <problem_fetch+0x14fa0>)
 801618e:	461d      	mov	r5, r3
 8016190:	4614      	mov	r4, r2
 8016192:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8016194:	6028      	str	r0, [r5, #0]
 8016196:	6069      	str	r1, [r5, #4]
 8016198:	60aa      	str	r2, [r5, #8]
 801619a:	60eb      	str	r3, [r5, #12]
 801619c:	8823      	ldrh	r3, [r4, #0]
 801619e:	822b      	strh	r3, [r5, #16]
			p->moveSize = 7;
 80161a0:	687b      	ldr	r3, [r7, #4]
 80161a2:	2207      	movs	r2, #7
 80161a4:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"G,J,H,C,F,A,D");
 80161a6:	687b      	ldr	r3, [r7, #4]
 80161a8:	3340      	adds	r3, #64	; 0x40
 80161aa:	4a46      	ldr	r2, [pc, #280]	; (80162c4 <problem_fetch+0x14fa4>)
 80161ac:	461c      	mov	r4, r3
 80161ae:	4613      	mov	r3, r2
 80161b0:	cb07      	ldmia	r3!, {r0, r1, r2}
 80161b2:	6020      	str	r0, [r4, #0]
 80161b4:	6061      	str	r1, [r4, #4]
 80161b6:	60a2      	str	r2, [r4, #8]
 80161b8:	881b      	ldrh	r3, [r3, #0]
 80161ba:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"6,5,8,8,11,14,18");
 80161bc:	687b      	ldr	r3, [r7, #4]
 80161be:	3304      	adds	r3, #4
 80161c0:	4a41      	ldr	r2, [pc, #260]	; (80162c8 <problem_fetch+0x14fa8>)
 80161c2:	461d      	mov	r5, r3
 80161c4:	4614      	mov	r4, r2
 80161c6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80161c8:	6028      	str	r0, [r5, #0]
 80161ca:	6069      	str	r1, [r5, #4]
 80161cc:	60aa      	str	r2, [r5, #8]
 80161ce:	60eb      	str	r3, [r5, #12]
 80161d0:	7823      	ldrb	r3, [r4, #0]
 80161d2:	742b      	strb	r3, [r5, #16]
			strcpy(p->startFinish, "s,s,d,d,d,d,e");
 80161d4:	687b      	ldr	r3, [r7, #4]
 80161d6:	33d8      	adds	r3, #216	; 0xd8
 80161d8:	4a3c      	ldr	r2, [pc, #240]	; (80162cc <problem_fetch+0x14fac>)
 80161da:	461c      	mov	r4, r3
 80161dc:	4613      	mov	r3, r2
 80161de:	cb07      	ldmia	r3!, {r0, r1, r2}
 80161e0:	6020      	str	r0, [r4, #0]
 80161e2:	6061      	str	r1, [r4, #4]
 80161e4:	60a2      	str	r2, [r4, #8]
 80161e6:	881b      	ldrh	r3, [r3, #0]
 80161e8:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade, "6C+");
 80161ea:	687b      	ldr	r3, [r7, #4]
 80161ec:	33cc      	adds	r3, #204	; 0xcc
 80161ee:	4a2e      	ldr	r2, [pc, #184]	; (80162a8 <problem_fetch+0x14f88>)
 80161f0:	6810      	ldr	r0, [r2, #0]
 80161f2:	6018      	str	r0, [r3, #0]
			break;
 80161f4:	f004 bdda 	b.w	801adac <problem_fetch+0x19a8c>
		case 688 :
			strcpy(p->name,"ANTI JULIE");
 80161f8:	687b      	ldr	r3, [r7, #4]
 80161fa:	337c      	adds	r3, #124	; 0x7c
 80161fc:	4934      	ldr	r1, [pc, #208]	; (80162d0 <problem_fetch+0x14fb0>)
 80161fe:	461a      	mov	r2, r3
 8016200:	460b      	mov	r3, r1
 8016202:	cb03      	ldmia	r3!, {r0, r1}
 8016204:	6010      	str	r0, [r2, #0]
 8016206:	6051      	str	r1, [r2, #4]
 8016208:	8819      	ldrh	r1, [r3, #0]
 801620a:	789b      	ldrb	r3, [r3, #2]
 801620c:	8111      	strh	r1, [r2, #8]
 801620e:	7293      	strb	r3, [r2, #10]
			p->moveSize = 6;
 8016210:	687b      	ldr	r3, [r7, #4]
 8016212:	2206      	movs	r2, #6
 8016214:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"G,H,C,G,A,B");
 8016216:	687b      	ldr	r3, [r7, #4]
 8016218:	3340      	adds	r3, #64	; 0x40
 801621a:	4a2e      	ldr	r2, [pc, #184]	; (80162d4 <problem_fetch+0x14fb4>)
 801621c:	461c      	mov	r4, r3
 801621e:	4613      	mov	r3, r2
 8016220:	cb07      	ldmia	r3!, {r0, r1, r2}
 8016222:	6020      	str	r0, [r4, #0]
 8016224:	6061      	str	r1, [r4, #4]
 8016226:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,10,13,17,18,6");
 8016228:	687b      	ldr	r3, [r7, #4]
 801622a:	3304      	adds	r3, #4
 801622c:	4a2a      	ldr	r2, [pc, #168]	; (80162d8 <problem_fetch+0x14fb8>)
 801622e:	461c      	mov	r4, r3
 8016230:	4615      	mov	r5, r2
 8016232:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8016234:	6020      	str	r0, [r4, #0]
 8016236:	6061      	str	r1, [r4, #4]
 8016238:	60a2      	str	r2, [r4, #8]
 801623a:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish, "s,d,d,d,e,d");
 801623c:	687b      	ldr	r3, [r7, #4]
 801623e:	33d8      	adds	r3, #216	; 0xd8
 8016240:	4a26      	ldr	r2, [pc, #152]	; (80162dc <problem_fetch+0x14fbc>)
 8016242:	461c      	mov	r4, r3
 8016244:	4613      	mov	r3, r2
 8016246:	cb07      	ldmia	r3!, {r0, r1, r2}
 8016248:	6020      	str	r0, [r4, #0]
 801624a:	6061      	str	r1, [r4, #4]
 801624c:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade, "7A");
 801624e:	687b      	ldr	r3, [r7, #4]
 8016250:	33cc      	adds	r3, #204	; 0xcc
 8016252:	4a23      	ldr	r2, [pc, #140]	; (80162e0 <problem_fetch+0x14fc0>)
 8016254:	8811      	ldrh	r1, [r2, #0]
 8016256:	7892      	ldrb	r2, [r2, #2]
 8016258:	8019      	strh	r1, [r3, #0]
 801625a:	709a      	strb	r2, [r3, #2]
			break;
 801625c:	f004 bda6 	b.w	801adac <problem_fetch+0x19a8c>
 8016260:	08028b68 	.word	0x08028b68
 8016264:	08028b70 	.word	0x08028b70
 8016268:	08028b7c 	.word	0x08028b7c
 801626c:	08021320 	.word	0x08021320
 8016270:	08021424 	.word	0x08021424
 8016274:	08028b8c 	.word	0x08028b8c
 8016278:	08028b9c 	.word	0x08028b9c
 801627c:	08028ba8 	.word	0x08028ba8
 8016280:	08028860 	.word	0x08028860
 8016284:	08028bb8 	.word	0x08028bb8
 8016288:	08028bc0 	.word	0x08028bc0
 801628c:	08028bd0 	.word	0x08028bd0
 8016290:	080214cc 	.word	0x080214cc
 8016294:	08021370 	.word	0x08021370
 8016298:	08028be8 	.word	0x08028be8
 801629c:	08028bf8 	.word	0x08028bf8
 80162a0:	08028c08 	.word	0x08028c08
 80162a4:	08021494 	.word	0x08021494
 80162a8:	080213a8 	.word	0x080213a8
 80162ac:	08028c1c 	.word	0x08028c1c
 80162b0:	08028c30 	.word	0x08028c30
 80162b4:	08028c44 	.word	0x08028c44
 80162b8:	08028c5c 	.word	0x08028c5c
 80162bc:	080212b0 	.word	0x080212b0
 80162c0:	08028c70 	.word	0x08028c70
 80162c4:	08028c84 	.word	0x08028c84
 80162c8:	08028c94 	.word	0x08028c94
 80162cc:	080212a0 	.word	0x080212a0
 80162d0:	08028ca8 	.word	0x08028ca8
 80162d4:	08028cb4 	.word	0x08028cb4
 80162d8:	08028cc0 	.word	0x08028cc0
 80162dc:	08026b10 	.word	0x08026b10
 80162e0:	080212f4 	.word	0x080212f4
		case 689 :
			strcpy(p->name,"DUMBADUMBA EASY");
 80162e4:	687b      	ldr	r3, [r7, #4]
 80162e6:	337c      	adds	r3, #124	; 0x7c
 80162e8:	4aa9      	ldr	r2, [pc, #676]	; (8016590 <problem_fetch+0x15270>)
 80162ea:	461c      	mov	r4, r3
 80162ec:	4615      	mov	r5, r2
 80162ee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80162f0:	6020      	str	r0, [r4, #0]
 80162f2:	6061      	str	r1, [r4, #4]
 80162f4:	60a2      	str	r2, [r4, #8]
 80162f6:	60e3      	str	r3, [r4, #12]
			p->moveSize = 9;
 80162f8:	687b      	ldr	r3, [r7, #4]
 80162fa:	2209      	movs	r2, #9
 80162fc:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"G,J,E,F,C,D,D,E,C");
 80162fe:	687b      	ldr	r3, [r7, #4]
 8016300:	3340      	adds	r3, #64	; 0x40
 8016302:	4aa4      	ldr	r2, [pc, #656]	; (8016594 <problem_fetch+0x15274>)
 8016304:	461d      	mov	r5, r3
 8016306:	4614      	mov	r4, r2
 8016308:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801630a:	6028      	str	r0, [r5, #0]
 801630c:	6069      	str	r1, [r5, #4]
 801630e:	60aa      	str	r2, [r5, #8]
 8016310:	60eb      	str	r3, [r5, #12]
 8016312:	8823      	ldrh	r3, [r4, #0]
 8016314:	822b      	strh	r3, [r5, #16]
			strcpy(p->moveNumbers,"4,5,8,11,13,15,18,6,5");
 8016316:	687b      	ldr	r3, [r7, #4]
 8016318:	3304      	adds	r3, #4
 801631a:	4a9f      	ldr	r2, [pc, #636]	; (8016598 <problem_fetch+0x15278>)
 801631c:	461d      	mov	r5, r3
 801631e:	4614      	mov	r4, r2
 8016320:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8016322:	6028      	str	r0, [r5, #0]
 8016324:	6069      	str	r1, [r5, #4]
 8016326:	60aa      	str	r2, [r5, #8]
 8016328:	60eb      	str	r3, [r5, #12]
 801632a:	6820      	ldr	r0, [r4, #0]
 801632c:	6128      	str	r0, [r5, #16]
 801632e:	88a3      	ldrh	r3, [r4, #4]
 8016330:	82ab      	strh	r3, [r5, #20]
			strcpy(p->startFinish, "s,d,d,d,d,d,e,s,d");
 8016332:	687b      	ldr	r3, [r7, #4]
 8016334:	33d8      	adds	r3, #216	; 0xd8
 8016336:	4a99      	ldr	r2, [pc, #612]	; (801659c <problem_fetch+0x1527c>)
 8016338:	461d      	mov	r5, r3
 801633a:	4614      	mov	r4, r2
 801633c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801633e:	6028      	str	r0, [r5, #0]
 8016340:	6069      	str	r1, [r5, #4]
 8016342:	60aa      	str	r2, [r5, #8]
 8016344:	60eb      	str	r3, [r5, #12]
 8016346:	8823      	ldrh	r3, [r4, #0]
 8016348:	822b      	strh	r3, [r5, #16]
			strcpy(p->grade, "6B+");
 801634a:	687b      	ldr	r3, [r7, #4]
 801634c:	33cc      	adds	r3, #204	; 0xcc
 801634e:	4a94      	ldr	r2, [pc, #592]	; (80165a0 <problem_fetch+0x15280>)
 8016350:	6810      	ldr	r0, [r2, #0]
 8016352:	6018      	str	r0, [r3, #0]
			break;
 8016354:	f004 bd2a 	b.w	801adac <problem_fetch+0x19a8c>
		case 69 :
			strcpy(p->name,"FROM VALCHIUSELLAWITHLOVE");
 8016358:	687b      	ldr	r3, [r7, #4]
 801635a:	337c      	adds	r3, #124	; 0x7c
 801635c:	4a91      	ldr	r2, [pc, #580]	; (80165a4 <problem_fetch+0x15284>)
 801635e:	461d      	mov	r5, r3
 8016360:	4614      	mov	r4, r2
 8016362:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8016364:	6028      	str	r0, [r5, #0]
 8016366:	6069      	str	r1, [r5, #4]
 8016368:	60aa      	str	r2, [r5, #8]
 801636a:	60eb      	str	r3, [r5, #12]
 801636c:	cc03      	ldmia	r4!, {r0, r1}
 801636e:	6128      	str	r0, [r5, #16]
 8016370:	6169      	str	r1, [r5, #20]
 8016372:	8823      	ldrh	r3, [r4, #0]
 8016374:	832b      	strh	r3, [r5, #24]
			p->moveSize = 5;
 8016376:	687b      	ldr	r3, [r7, #4]
 8016378:	2205      	movs	r2, #5
 801637a:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"C,C,I,E,D");
 801637c:	687b      	ldr	r3, [r7, #4]
 801637e:	3340      	adds	r3, #64	; 0x40
 8016380:	4989      	ldr	r1, [pc, #548]	; (80165a8 <problem_fetch+0x15288>)
 8016382:	461a      	mov	r2, r3
 8016384:	460b      	mov	r3, r1
 8016386:	cb03      	ldmia	r3!, {r0, r1}
 8016388:	6010      	str	r0, [r2, #0]
 801638a:	6051      	str	r1, [r2, #4]
 801638c:	881b      	ldrh	r3, [r3, #0]
 801638e:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"5,8,10,14,18");
 8016390:	687b      	ldr	r3, [r7, #4]
 8016392:	3304      	adds	r3, #4
 8016394:	4a85      	ldr	r2, [pc, #532]	; (80165ac <problem_fetch+0x1528c>)
 8016396:	461c      	mov	r4, r3
 8016398:	4613      	mov	r3, r2
 801639a:	cb07      	ldmia	r3!, {r0, r1, r2}
 801639c:	6020      	str	r0, [r4, #0]
 801639e:	6061      	str	r1, [r4, #4]
 80163a0:	60a2      	str	r2, [r4, #8]
 80163a2:	781b      	ldrb	r3, [r3, #0]
 80163a4:	7323      	strb	r3, [r4, #12]
			strcpy(p->startFinish, "s,d,d,d,e");
 80163a6:	687b      	ldr	r3, [r7, #4]
 80163a8:	33d8      	adds	r3, #216	; 0xd8
 80163aa:	4981      	ldr	r1, [pc, #516]	; (80165b0 <problem_fetch+0x15290>)
 80163ac:	461a      	mov	r2, r3
 80163ae:	460b      	mov	r3, r1
 80163b0:	cb03      	ldmia	r3!, {r0, r1}
 80163b2:	6010      	str	r0, [r2, #0]
 80163b4:	6051      	str	r1, [r2, #4]
 80163b6:	881b      	ldrh	r3, [r3, #0]
 80163b8:	8113      	strh	r3, [r2, #8]
			strcpy(p->grade, "7A+");
 80163ba:	687b      	ldr	r3, [r7, #4]
 80163bc:	33cc      	adds	r3, #204	; 0xcc
 80163be:	4a7d      	ldr	r2, [pc, #500]	; (80165b4 <problem_fetch+0x15294>)
 80163c0:	6810      	ldr	r0, [r2, #0]
 80163c2:	6018      	str	r0, [r3, #0]
			break;
 80163c4:	f004 bcf2 	b.w	801adac <problem_fetch+0x19a8c>
		case 690 :
			strcpy(p->name,"PURPLE NURPLE BOYS");
 80163c8:	687b      	ldr	r3, [r7, #4]
 80163ca:	337c      	adds	r3, #124	; 0x7c
 80163cc:	4a7a      	ldr	r2, [pc, #488]	; (80165b8 <problem_fetch+0x15298>)
 80163ce:	461d      	mov	r5, r3
 80163d0:	4614      	mov	r4, r2
 80163d2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80163d4:	6028      	str	r0, [r5, #0]
 80163d6:	6069      	str	r1, [r5, #4]
 80163d8:	60aa      	str	r2, [r5, #8]
 80163da:	60eb      	str	r3, [r5, #12]
 80163dc:	8823      	ldrh	r3, [r4, #0]
 80163de:	78a2      	ldrb	r2, [r4, #2]
 80163e0:	822b      	strh	r3, [r5, #16]
 80163e2:	4613      	mov	r3, r2
 80163e4:	74ab      	strb	r3, [r5, #18]
			p->moveSize = 7;
 80163e6:	687b      	ldr	r3, [r7, #4]
 80163e8:	2207      	movs	r2, #7
 80163ea:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"G,G,G,E,I,G,I");
 80163ec:	687b      	ldr	r3, [r7, #4]
 80163ee:	3340      	adds	r3, #64	; 0x40
 80163f0:	4a72      	ldr	r2, [pc, #456]	; (80165bc <problem_fetch+0x1529c>)
 80163f2:	461c      	mov	r4, r3
 80163f4:	4613      	mov	r3, r2
 80163f6:	cb07      	ldmia	r3!, {r0, r1, r2}
 80163f8:	6020      	str	r0, [r4, #0]
 80163fa:	6061      	str	r1, [r4, #4]
 80163fc:	60a2      	str	r2, [r4, #8]
 80163fe:	881b      	ldrh	r3, [r3, #0]
 8016400:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,6,9,12,14,15,18");
 8016402:	687b      	ldr	r3, [r7, #4]
 8016404:	3304      	adds	r3, #4
 8016406:	4a6e      	ldr	r2, [pc, #440]	; (80165c0 <problem_fetch+0x152a0>)
 8016408:	461d      	mov	r5, r3
 801640a:	4614      	mov	r4, r2
 801640c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801640e:	6028      	str	r0, [r5, #0]
 8016410:	6069      	str	r1, [r5, #4]
 8016412:	60aa      	str	r2, [r5, #8]
 8016414:	60eb      	str	r3, [r5, #12]
 8016416:	8823      	ldrh	r3, [r4, #0]
 8016418:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish, "s,s,d,d,d,d,e");
 801641a:	687b      	ldr	r3, [r7, #4]
 801641c:	33d8      	adds	r3, #216	; 0xd8
 801641e:	4a69      	ldr	r2, [pc, #420]	; (80165c4 <problem_fetch+0x152a4>)
 8016420:	461c      	mov	r4, r3
 8016422:	4613      	mov	r3, r2
 8016424:	cb07      	ldmia	r3!, {r0, r1, r2}
 8016426:	6020      	str	r0, [r4, #0]
 8016428:	6061      	str	r1, [r4, #4]
 801642a:	60a2      	str	r2, [r4, #8]
 801642c:	881b      	ldrh	r3, [r3, #0]
 801642e:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade, "6C+");
 8016430:	687b      	ldr	r3, [r7, #4]
 8016432:	33cc      	adds	r3, #204	; 0xcc
 8016434:	4a64      	ldr	r2, [pc, #400]	; (80165c8 <problem_fetch+0x152a8>)
 8016436:	6810      	ldr	r0, [r2, #0]
 8016438:	6018      	str	r0, [r3, #0]
			break;
 801643a:	f004 bcb7 	b.w	801adac <problem_fetch+0x19a8c>
		case 691 :
			strcpy(p->name,"WHERE'S YOUR BERRY");
 801643e:	687b      	ldr	r3, [r7, #4]
 8016440:	337c      	adds	r3, #124	; 0x7c
 8016442:	4a62      	ldr	r2, [pc, #392]	; (80165cc <problem_fetch+0x152ac>)
 8016444:	461d      	mov	r5, r3
 8016446:	4614      	mov	r4, r2
 8016448:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801644a:	6028      	str	r0, [r5, #0]
 801644c:	6069      	str	r1, [r5, #4]
 801644e:	60aa      	str	r2, [r5, #8]
 8016450:	60eb      	str	r3, [r5, #12]
 8016452:	8823      	ldrh	r3, [r4, #0]
 8016454:	78a2      	ldrb	r2, [r4, #2]
 8016456:	822b      	strh	r3, [r5, #16]
 8016458:	4613      	mov	r3, r2
 801645a:	74ab      	strb	r3, [r5, #18]
			p->moveSize = 9;
 801645c:	687b      	ldr	r3, [r7, #4]
 801645e:	2209      	movs	r2, #9
 8016460:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"C,D,I,E,F,C,B,E,B");
 8016462:	687b      	ldr	r3, [r7, #4]
 8016464:	3340      	adds	r3, #64	; 0x40
 8016466:	4a5a      	ldr	r2, [pc, #360]	; (80165d0 <problem_fetch+0x152b0>)
 8016468:	461d      	mov	r5, r3
 801646a:	4614      	mov	r4, r2
 801646c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801646e:	6028      	str	r0, [r5, #0]
 8016470:	6069      	str	r1, [r5, #4]
 8016472:	60aa      	str	r2, [r5, #8]
 8016474:	60eb      	str	r3, [r5, #12]
 8016476:	8823      	ldrh	r3, [r4, #0]
 8016478:	822b      	strh	r3, [r5, #16]
			strcpy(p->moveNumbers,"5,15,18,16,11,13,10,8,6");
 801647a:	687b      	ldr	r3, [r7, #4]
 801647c:	3304      	adds	r3, #4
 801647e:	4a55      	ldr	r2, [pc, #340]	; (80165d4 <problem_fetch+0x152b4>)
 8016480:	461d      	mov	r5, r3
 8016482:	4614      	mov	r4, r2
 8016484:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8016486:	6028      	str	r0, [r5, #0]
 8016488:	6069      	str	r1, [r5, #4]
 801648a:	60aa      	str	r2, [r5, #8]
 801648c:	60eb      	str	r3, [r5, #12]
 801648e:	cc03      	ldmia	r4!, {r0, r1}
 8016490:	6128      	str	r0, [r5, #16]
 8016492:	6169      	str	r1, [r5, #20]
			strcpy(p->startFinish, "s,d,e,d,d,d,d,d,s");
 8016494:	687b      	ldr	r3, [r7, #4]
 8016496:	33d8      	adds	r3, #216	; 0xd8
 8016498:	4a4f      	ldr	r2, [pc, #316]	; (80165d8 <problem_fetch+0x152b8>)
 801649a:	461d      	mov	r5, r3
 801649c:	4614      	mov	r4, r2
 801649e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80164a0:	6028      	str	r0, [r5, #0]
 80164a2:	6069      	str	r1, [r5, #4]
 80164a4:	60aa      	str	r2, [r5, #8]
 80164a6:	60eb      	str	r3, [r5, #12]
 80164a8:	8823      	ldrh	r3, [r4, #0]
 80164aa:	822b      	strh	r3, [r5, #16]
			strcpy(p->grade, "6B+");
 80164ac:	687b      	ldr	r3, [r7, #4]
 80164ae:	33cc      	adds	r3, #204	; 0xcc
 80164b0:	4a3b      	ldr	r2, [pc, #236]	; (80165a0 <problem_fetch+0x15280>)
 80164b2:	6810      	ldr	r0, [r2, #0]
 80164b4:	6018      	str	r0, [r3, #0]
			break;
 80164b6:	f004 bc79 	b.w	801adac <problem_fetch+0x19a8c>
		case 692 :
			strcpy(p->name,"CATCH AND PULL");
 80164ba:	687b      	ldr	r3, [r7, #4]
 80164bc:	337c      	adds	r3, #124	; 0x7c
 80164be:	4a47      	ldr	r2, [pc, #284]	; (80165dc <problem_fetch+0x152bc>)
 80164c0:	461c      	mov	r4, r3
 80164c2:	4613      	mov	r3, r2
 80164c4:	cb07      	ldmia	r3!, {r0, r1, r2}
 80164c6:	6020      	str	r0, [r4, #0]
 80164c8:	6061      	str	r1, [r4, #4]
 80164ca:	60a2      	str	r2, [r4, #8]
 80164cc:	881a      	ldrh	r2, [r3, #0]
 80164ce:	789b      	ldrb	r3, [r3, #2]
 80164d0:	81a2      	strh	r2, [r4, #12]
 80164d2:	73a3      	strb	r3, [r4, #14]
			p->moveSize = 5;
 80164d4:	687b      	ldr	r3, [r7, #4]
 80164d6:	2205      	movs	r2, #5
 80164d8:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"G,E,G,D,I");
 80164da:	687b      	ldr	r3, [r7, #4]
 80164dc:	3340      	adds	r3, #64	; 0x40
 80164de:	4940      	ldr	r1, [pc, #256]	; (80165e0 <problem_fetch+0x152c0>)
 80164e0:	461a      	mov	r2, r3
 80164e2:	460b      	mov	r3, r1
 80164e4:	cb03      	ldmia	r3!, {r0, r1}
 80164e6:	6010      	str	r0, [r2, #0]
 80164e8:	6051      	str	r1, [r2, #4]
 80164ea:	881b      	ldrh	r3, [r3, #0]
 80164ec:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"14,8,4,18,9");
 80164ee:	687b      	ldr	r3, [r7, #4]
 80164f0:	3304      	adds	r3, #4
 80164f2:	4a3c      	ldr	r2, [pc, #240]	; (80165e4 <problem_fetch+0x152c4>)
 80164f4:	461c      	mov	r4, r3
 80164f6:	4613      	mov	r3, r2
 80164f8:	cb07      	ldmia	r3!, {r0, r1, r2}
 80164fa:	6020      	str	r0, [r4, #0]
 80164fc:	6061      	str	r1, [r4, #4]
 80164fe:	60a2      	str	r2, [r4, #8]
			strcpy(p->startFinish, "d,d,s,e,d");
 8016500:	687b      	ldr	r3, [r7, #4]
 8016502:	33d8      	adds	r3, #216	; 0xd8
 8016504:	4938      	ldr	r1, [pc, #224]	; (80165e8 <problem_fetch+0x152c8>)
 8016506:	461a      	mov	r2, r3
 8016508:	460b      	mov	r3, r1
 801650a:	cb03      	ldmia	r3!, {r0, r1}
 801650c:	6010      	str	r0, [r2, #0]
 801650e:	6051      	str	r1, [r2, #4]
 8016510:	881b      	ldrh	r3, [r3, #0]
 8016512:	8113      	strh	r3, [r2, #8]
			strcpy(p->grade, "7B");
 8016514:	687b      	ldr	r3, [r7, #4]
 8016516:	33cc      	adds	r3, #204	; 0xcc
 8016518:	4a34      	ldr	r2, [pc, #208]	; (80165ec <problem_fetch+0x152cc>)
 801651a:	8811      	ldrh	r1, [r2, #0]
 801651c:	7892      	ldrb	r2, [r2, #2]
 801651e:	8019      	strh	r1, [r3, #0]
 8016520:	709a      	strb	r2, [r3, #2]
			break;
 8016522:	f004 bc43 	b.w	801adac <problem_fetch+0x19a8c>
		case 693 :
			strcpy(p->name,"ORDERLY HOUSING");
 8016526:	687b      	ldr	r3, [r7, #4]
 8016528:	337c      	adds	r3, #124	; 0x7c
 801652a:	4a31      	ldr	r2, [pc, #196]	; (80165f0 <problem_fetch+0x152d0>)
 801652c:	461c      	mov	r4, r3
 801652e:	4615      	mov	r5, r2
 8016530:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8016532:	6020      	str	r0, [r4, #0]
 8016534:	6061      	str	r1, [r4, #4]
 8016536:	60a2      	str	r2, [r4, #8]
 8016538:	60e3      	str	r3, [r4, #12]
			p->moveSize = 5;
 801653a:	687b      	ldr	r3, [r7, #4]
 801653c:	2205      	movs	r2, #5
 801653e:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"G,C,F,E,D");
 8016540:	687b      	ldr	r3, [r7, #4]
 8016542:	3340      	adds	r3, #64	; 0x40
 8016544:	492b      	ldr	r1, [pc, #172]	; (80165f4 <problem_fetch+0x152d4>)
 8016546:	461a      	mov	r2, r3
 8016548:	460b      	mov	r3, r1
 801654a:	cb03      	ldmia	r3!, {r0, r1}
 801654c:	6010      	str	r0, [r2, #0]
 801654e:	6051      	str	r1, [r2, #4]
 8016550:	881b      	ldrh	r3, [r3, #0]
 8016552:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"4,8,11,14,18");
 8016554:	687b      	ldr	r3, [r7, #4]
 8016556:	3304      	adds	r3, #4
 8016558:	4a27      	ldr	r2, [pc, #156]	; (80165f8 <problem_fetch+0x152d8>)
 801655a:	461c      	mov	r4, r3
 801655c:	4613      	mov	r3, r2
 801655e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8016560:	6020      	str	r0, [r4, #0]
 8016562:	6061      	str	r1, [r4, #4]
 8016564:	60a2      	str	r2, [r4, #8]
 8016566:	781b      	ldrb	r3, [r3, #0]
 8016568:	7323      	strb	r3, [r4, #12]
			strcpy(p->startFinish, "s,d,d,d,e");
 801656a:	687b      	ldr	r3, [r7, #4]
 801656c:	33d8      	adds	r3, #216	; 0xd8
 801656e:	4910      	ldr	r1, [pc, #64]	; (80165b0 <problem_fetch+0x15290>)
 8016570:	461a      	mov	r2, r3
 8016572:	460b      	mov	r3, r1
 8016574:	cb03      	ldmia	r3!, {r0, r1}
 8016576:	6010      	str	r0, [r2, #0]
 8016578:	6051      	str	r1, [r2, #4]
 801657a:	881b      	ldrh	r3, [r3, #0]
 801657c:	8113      	strh	r3, [r2, #8]
			strcpy(p->grade, "7C");
 801657e:	687b      	ldr	r3, [r7, #4]
 8016580:	33cc      	adds	r3, #204	; 0xcc
 8016582:	4a1e      	ldr	r2, [pc, #120]	; (80165fc <problem_fetch+0x152dc>)
 8016584:	8811      	ldrh	r1, [r2, #0]
 8016586:	7892      	ldrb	r2, [r2, #2]
 8016588:	8019      	strh	r1, [r3, #0]
 801658a:	709a      	strb	r2, [r3, #2]
			break;
 801658c:	f004 bc0e 	b.w	801adac <problem_fetch+0x19a8c>
 8016590:	08028cd0 	.word	0x08028cd0
 8016594:	08028ce0 	.word	0x08028ce0
 8016598:	08028cf4 	.word	0x08028cf4
 801659c:	08028d0c 	.word	0x08028d0c
 80165a0:	080212b0 	.word	0x080212b0
 80165a4:	08028d20 	.word	0x08028d20
 80165a8:	08028d3c 	.word	0x08028d3c
 80165ac:	08024388 	.word	0x08024388
 80165b0:	08021320 	.word	0x08021320
 80165b4:	08021424 	.word	0x08021424
 80165b8:	08028d48 	.word	0x08028d48
 80165bc:	08028d5c 	.word	0x08028d5c
 80165c0:	08028d6c 	.word	0x08028d6c
 80165c4:	080212a0 	.word	0x080212a0
 80165c8:	080213a8 	.word	0x080213a8
 80165cc:	08028d80 	.word	0x08028d80
 80165d0:	08028d94 	.word	0x08028d94
 80165d4:	08028da8 	.word	0x08028da8
 80165d8:	08028dc0 	.word	0x08028dc0
 80165dc:	08028dd4 	.word	0x08028dd4
 80165e0:	08028de4 	.word	0x08028de4
 80165e4:	08028df0 	.word	0x08028df0
 80165e8:	08028dfc 	.word	0x08028dfc
 80165ec:	0802132c 	.word	0x0802132c
 80165f0:	08028e08 	.word	0x08028e08
 80165f4:	08028e18 	.word	0x08028e18
 80165f8:	08021e8c 	.word	0x08021e8c
 80165fc:	0802158c 	.word	0x0802158c
		case 694 :
			strcpy(p->name,"VANTABLACK");
 8016600:	687b      	ldr	r3, [r7, #4]
 8016602:	337c      	adds	r3, #124	; 0x7c
 8016604:	49c0      	ldr	r1, [pc, #768]	; (8016908 <problem_fetch+0x155e8>)
 8016606:	461a      	mov	r2, r3
 8016608:	460b      	mov	r3, r1
 801660a:	cb03      	ldmia	r3!, {r0, r1}
 801660c:	6010      	str	r0, [r2, #0]
 801660e:	6051      	str	r1, [r2, #4]
 8016610:	8819      	ldrh	r1, [r3, #0]
 8016612:	789b      	ldrb	r3, [r3, #2]
 8016614:	8111      	strh	r1, [r2, #8]
 8016616:	7293      	strb	r3, [r2, #10]
			p->moveSize = 5;
 8016618:	687b      	ldr	r3, [r7, #4]
 801661a:	2205      	movs	r2, #5
 801661c:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"H,B,D,A,G");
 801661e:	687b      	ldr	r3, [r7, #4]
 8016620:	3340      	adds	r3, #64	; 0x40
 8016622:	49ba      	ldr	r1, [pc, #744]	; (801690c <problem_fetch+0x155ec>)
 8016624:	461a      	mov	r2, r3
 8016626:	460b      	mov	r3, r1
 8016628:	cb03      	ldmia	r3!, {r0, r1}
 801662a:	6010      	str	r0, [r2, #0]
 801662c:	6051      	str	r1, [r2, #4]
 801662e:	881b      	ldrh	r3, [r3, #0]
 8016630:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"8,10,15,18,4");
 8016632:	687b      	ldr	r3, [r7, #4]
 8016634:	3304      	adds	r3, #4
 8016636:	4ab6      	ldr	r2, [pc, #728]	; (8016910 <problem_fetch+0x155f0>)
 8016638:	461c      	mov	r4, r3
 801663a:	4613      	mov	r3, r2
 801663c:	cb07      	ldmia	r3!, {r0, r1, r2}
 801663e:	6020      	str	r0, [r4, #0]
 8016640:	6061      	str	r1, [r4, #4]
 8016642:	60a2      	str	r2, [r4, #8]
 8016644:	781b      	ldrb	r3, [r3, #0]
 8016646:	7323      	strb	r3, [r4, #12]
			strcpy(p->startFinish, "d,d,d,e,s");
 8016648:	687b      	ldr	r3, [r7, #4]
 801664a:	33d8      	adds	r3, #216	; 0xd8
 801664c:	49b1      	ldr	r1, [pc, #708]	; (8016914 <problem_fetch+0x155f4>)
 801664e:	461a      	mov	r2, r3
 8016650:	460b      	mov	r3, r1
 8016652:	cb03      	ldmia	r3!, {r0, r1}
 8016654:	6010      	str	r0, [r2, #0]
 8016656:	6051      	str	r1, [r2, #4]
 8016658:	881b      	ldrh	r3, [r3, #0]
 801665a:	8113      	strh	r3, [r2, #8]
			strcpy(p->grade, "7B+");
 801665c:	687b      	ldr	r3, [r7, #4]
 801665e:	33cc      	adds	r3, #204	; 0xcc
 8016660:	4aad      	ldr	r2, [pc, #692]	; (8016918 <problem_fetch+0x155f8>)
 8016662:	6810      	ldr	r0, [r2, #0]
 8016664:	6018      	str	r0, [r3, #0]
			break;
 8016666:	f004 bba1 	b.w	801adac <problem_fetch+0x19a8c>
		case 695 :
			strcpy(p->name,"WARM UP STUFF");
 801666a:	687b      	ldr	r3, [r7, #4]
 801666c:	337c      	adds	r3, #124	; 0x7c
 801666e:	4aab      	ldr	r2, [pc, #684]	; (801691c <problem_fetch+0x155fc>)
 8016670:	461c      	mov	r4, r3
 8016672:	4613      	mov	r3, r2
 8016674:	cb07      	ldmia	r3!, {r0, r1, r2}
 8016676:	6020      	str	r0, [r4, #0]
 8016678:	6061      	str	r1, [r4, #4]
 801667a:	60a2      	str	r2, [r4, #8]
 801667c:	881b      	ldrh	r3, [r3, #0]
 801667e:	81a3      	strh	r3, [r4, #12]
			p->moveSize = 7;
 8016680:	687b      	ldr	r3, [r7, #4]
 8016682:	2207      	movs	r2, #7
 8016684:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"C,E,E,D,E,A,D");
 8016686:	687b      	ldr	r3, [r7, #4]
 8016688:	3340      	adds	r3, #64	; 0x40
 801668a:	4aa5      	ldr	r2, [pc, #660]	; (8016920 <problem_fetch+0x15600>)
 801668c:	461c      	mov	r4, r3
 801668e:	4613      	mov	r3, r2
 8016690:	cb07      	ldmia	r3!, {r0, r1, r2}
 8016692:	6020      	str	r0, [r4, #0]
 8016694:	6061      	str	r1, [r4, #4]
 8016696:	60a2      	str	r2, [r4, #8]
 8016698:	881b      	ldrh	r3, [r3, #0]
 801669a:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,6,8,11,12,14,18");
 801669c:	687b      	ldr	r3, [r7, #4]
 801669e:	3304      	adds	r3, #4
 80166a0:	4aa0      	ldr	r2, [pc, #640]	; (8016924 <problem_fetch+0x15604>)
 80166a2:	461d      	mov	r5, r3
 80166a4:	4614      	mov	r4, r2
 80166a6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80166a8:	6028      	str	r0, [r5, #0]
 80166aa:	6069      	str	r1, [r5, #4]
 80166ac:	60aa      	str	r2, [r5, #8]
 80166ae:	60eb      	str	r3, [r5, #12]
 80166b0:	8823      	ldrh	r3, [r4, #0]
 80166b2:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish, "s,s,d,d,d,d,e");
 80166b4:	687b      	ldr	r3, [r7, #4]
 80166b6:	33d8      	adds	r3, #216	; 0xd8
 80166b8:	4a9b      	ldr	r2, [pc, #620]	; (8016928 <problem_fetch+0x15608>)
 80166ba:	461c      	mov	r4, r3
 80166bc:	4613      	mov	r3, r2
 80166be:	cb07      	ldmia	r3!, {r0, r1, r2}
 80166c0:	6020      	str	r0, [r4, #0]
 80166c2:	6061      	str	r1, [r4, #4]
 80166c4:	60a2      	str	r2, [r4, #8]
 80166c6:	881b      	ldrh	r3, [r3, #0]
 80166c8:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade, "6B+");
 80166ca:	687b      	ldr	r3, [r7, #4]
 80166cc:	33cc      	adds	r3, #204	; 0xcc
 80166ce:	4a97      	ldr	r2, [pc, #604]	; (801692c <problem_fetch+0x1560c>)
 80166d0:	6810      	ldr	r0, [r2, #0]
 80166d2:	6018      	str	r0, [r3, #0]
			break;
 80166d4:	f004 bb6a 	b.w	801adac <problem_fetch+0x19a8c>
		case 696 :
			strcpy(p->name,"OINTMENT 007");
 80166d8:	687b      	ldr	r3, [r7, #4]
 80166da:	337c      	adds	r3, #124	; 0x7c
 80166dc:	4a94      	ldr	r2, [pc, #592]	; (8016930 <problem_fetch+0x15610>)
 80166de:	461c      	mov	r4, r3
 80166e0:	4613      	mov	r3, r2
 80166e2:	cb07      	ldmia	r3!, {r0, r1, r2}
 80166e4:	6020      	str	r0, [r4, #0]
 80166e6:	6061      	str	r1, [r4, #4]
 80166e8:	60a2      	str	r2, [r4, #8]
 80166ea:	781b      	ldrb	r3, [r3, #0]
 80166ec:	7323      	strb	r3, [r4, #12]
			p->moveSize = 9;
 80166ee:	687b      	ldr	r3, [r7, #4]
 80166f0:	2209      	movs	r2, #9
 80166f2:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"G,E,E,G,H,G,I,G,I");
 80166f4:	687b      	ldr	r3, [r7, #4]
 80166f6:	3340      	adds	r3, #64	; 0x40
 80166f8:	4a8e      	ldr	r2, [pc, #568]	; (8016934 <problem_fetch+0x15614>)
 80166fa:	461d      	mov	r5, r3
 80166fc:	4614      	mov	r4, r2
 80166fe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8016700:	6028      	str	r0, [r5, #0]
 8016702:	6069      	str	r1, [r5, #4]
 8016704:	60aa      	str	r2, [r5, #8]
 8016706:	60eb      	str	r3, [r5, #12]
 8016708:	8823      	ldrh	r3, [r4, #0]
 801670a:	822b      	strh	r3, [r5, #16]
			strcpy(p->moveNumbers,"4,6,8,9,10,14,14,15,18");
 801670c:	687b      	ldr	r3, [r7, #4]
 801670e:	3304      	adds	r3, #4
 8016710:	4a89      	ldr	r2, [pc, #548]	; (8016938 <problem_fetch+0x15618>)
 8016712:	461c      	mov	r4, r3
 8016714:	4615      	mov	r5, r2
 8016716:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8016718:	6020      	str	r0, [r4, #0]
 801671a:	6061      	str	r1, [r4, #4]
 801671c:	60a2      	str	r2, [r4, #8]
 801671e:	60e3      	str	r3, [r4, #12]
 8016720:	6828      	ldr	r0, [r5, #0]
 8016722:	6120      	str	r0, [r4, #16]
 8016724:	88ab      	ldrh	r3, [r5, #4]
 8016726:	79aa      	ldrb	r2, [r5, #6]
 8016728:	82a3      	strh	r3, [r4, #20]
 801672a:	4613      	mov	r3, r2
 801672c:	75a3      	strb	r3, [r4, #22]
			strcpy(p->startFinish, "s,s,d,d,d,d,d,d,e");
 801672e:	687b      	ldr	r3, [r7, #4]
 8016730:	33d8      	adds	r3, #216	; 0xd8
 8016732:	4a82      	ldr	r2, [pc, #520]	; (801693c <problem_fetch+0x1561c>)
 8016734:	461d      	mov	r5, r3
 8016736:	4614      	mov	r4, r2
 8016738:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801673a:	6028      	str	r0, [r5, #0]
 801673c:	6069      	str	r1, [r5, #4]
 801673e:	60aa      	str	r2, [r5, #8]
 8016740:	60eb      	str	r3, [r5, #12]
 8016742:	8823      	ldrh	r3, [r4, #0]
 8016744:	822b      	strh	r3, [r5, #16]
			strcpy(p->grade, "6B+");
 8016746:	687b      	ldr	r3, [r7, #4]
 8016748:	33cc      	adds	r3, #204	; 0xcc
 801674a:	4a78      	ldr	r2, [pc, #480]	; (801692c <problem_fetch+0x1560c>)
 801674c:	6810      	ldr	r0, [r2, #0]
 801674e:	6018      	str	r0, [r3, #0]
			break;
 8016750:	f004 bb2c 	b.w	801adac <problem_fetch+0x19a8c>
		case 697 :
			strcpy(p->name,"COCA COLA");
 8016754:	687b      	ldr	r3, [r7, #4]
 8016756:	337c      	adds	r3, #124	; 0x7c
 8016758:	4979      	ldr	r1, [pc, #484]	; (8016940 <problem_fetch+0x15620>)
 801675a:	461a      	mov	r2, r3
 801675c:	460b      	mov	r3, r1
 801675e:	cb03      	ldmia	r3!, {r0, r1}
 8016760:	6010      	str	r0, [r2, #0]
 8016762:	6051      	str	r1, [r2, #4]
 8016764:	881b      	ldrh	r3, [r3, #0]
 8016766:	8113      	strh	r3, [r2, #8]
			p->moveSize = 7;
 8016768:	687b      	ldr	r3, [r7, #4]
 801676a:	2207      	movs	r2, #7
 801676c:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"J,G,F,E,G,D,C");
 801676e:	687b      	ldr	r3, [r7, #4]
 8016770:	3340      	adds	r3, #64	; 0x40
 8016772:	4a74      	ldr	r2, [pc, #464]	; (8016944 <problem_fetch+0x15624>)
 8016774:	461c      	mov	r4, r3
 8016776:	4613      	mov	r3, r2
 8016778:	cb07      	ldmia	r3!, {r0, r1, r2}
 801677a:	6020      	str	r0, [r4, #0]
 801677c:	6061      	str	r1, [r4, #4]
 801677e:	60a2      	str	r2, [r4, #8]
 8016780:	881b      	ldrh	r3, [r3, #0]
 8016782:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,6,11,12,15,18,8");
 8016784:	687b      	ldr	r3, [r7, #4]
 8016786:	3304      	adds	r3, #4
 8016788:	4a6f      	ldr	r2, [pc, #444]	; (8016948 <problem_fetch+0x15628>)
 801678a:	461d      	mov	r5, r3
 801678c:	4614      	mov	r4, r2
 801678e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8016790:	6028      	str	r0, [r5, #0]
 8016792:	6069      	str	r1, [r5, #4]
 8016794:	60aa      	str	r2, [r5, #8]
 8016796:	60eb      	str	r3, [r5, #12]
 8016798:	8823      	ldrh	r3, [r4, #0]
 801679a:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish, "s,d,d,d,d,e,d");
 801679c:	687b      	ldr	r3, [r7, #4]
 801679e:	33d8      	adds	r3, #216	; 0xd8
 80167a0:	4a6a      	ldr	r2, [pc, #424]	; (801694c <problem_fetch+0x1562c>)
 80167a2:	461c      	mov	r4, r3
 80167a4:	4613      	mov	r3, r2
 80167a6:	cb07      	ldmia	r3!, {r0, r1, r2}
 80167a8:	6020      	str	r0, [r4, #0]
 80167aa:	6061      	str	r1, [r4, #4]
 80167ac:	60a2      	str	r2, [r4, #8]
 80167ae:	881b      	ldrh	r3, [r3, #0]
 80167b0:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade, "7A");
 80167b2:	687b      	ldr	r3, [r7, #4]
 80167b4:	33cc      	adds	r3, #204	; 0xcc
 80167b6:	4a66      	ldr	r2, [pc, #408]	; (8016950 <problem_fetch+0x15630>)
 80167b8:	8811      	ldrh	r1, [r2, #0]
 80167ba:	7892      	ldrb	r2, [r2, #2]
 80167bc:	8019      	strh	r1, [r3, #0]
 80167be:	709a      	strb	r2, [r3, #2]
			break;
 80167c0:	f004 baf4 	b.w	801adac <problem_fetch+0x19a8c>
		case 698 :
			strcpy(p->name,"ORANGE IS THE NEW BLACK");
 80167c4:	687b      	ldr	r3, [r7, #4]
 80167c6:	337c      	adds	r3, #124	; 0x7c
 80167c8:	4a62      	ldr	r2, [pc, #392]	; (8016954 <problem_fetch+0x15634>)
 80167ca:	461d      	mov	r5, r3
 80167cc:	4614      	mov	r4, r2
 80167ce:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80167d0:	6028      	str	r0, [r5, #0]
 80167d2:	6069      	str	r1, [r5, #4]
 80167d4:	60aa      	str	r2, [r5, #8]
 80167d6:	60eb      	str	r3, [r5, #12]
 80167d8:	cc03      	ldmia	r4!, {r0, r1}
 80167da:	6128      	str	r0, [r5, #16]
 80167dc:	6169      	str	r1, [r5, #20]
			p->moveSize = 6;
 80167de:	687b      	ldr	r3, [r7, #4]
 80167e0:	2206      	movs	r2, #6
 80167e2:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"J,G,F,G,C,D");
 80167e4:	687b      	ldr	r3, [r7, #4]
 80167e6:	3340      	adds	r3, #64	; 0x40
 80167e8:	4a5b      	ldr	r2, [pc, #364]	; (8016958 <problem_fetch+0x15638>)
 80167ea:	461c      	mov	r4, r3
 80167ec:	4613      	mov	r3, r2
 80167ee:	cb07      	ldmia	r3!, {r0, r1, r2}
 80167f0:	6020      	str	r0, [r4, #0]
 80167f2:	6061      	str	r1, [r4, #4]
 80167f4:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,6,11,14,8,18");
 80167f6:	687b      	ldr	r3, [r7, #4]
 80167f8:	3304      	adds	r3, #4
 80167fa:	4a58      	ldr	r2, [pc, #352]	; (801695c <problem_fetch+0x1563c>)
 80167fc:	461c      	mov	r4, r3
 80167fe:	4613      	mov	r3, r2
 8016800:	cb07      	ldmia	r3!, {r0, r1, r2}
 8016802:	6020      	str	r0, [r4, #0]
 8016804:	6061      	str	r1, [r4, #4]
 8016806:	60a2      	str	r2, [r4, #8]
 8016808:	881a      	ldrh	r2, [r3, #0]
 801680a:	789b      	ldrb	r3, [r3, #2]
 801680c:	81a2      	strh	r2, [r4, #12]
 801680e:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish, "s,d,d,d,d,e");
 8016810:	687b      	ldr	r3, [r7, #4]
 8016812:	33d8      	adds	r3, #216	; 0xd8
 8016814:	4a52      	ldr	r2, [pc, #328]	; (8016960 <problem_fetch+0x15640>)
 8016816:	461c      	mov	r4, r3
 8016818:	4613      	mov	r3, r2
 801681a:	cb07      	ldmia	r3!, {r0, r1, r2}
 801681c:	6020      	str	r0, [r4, #0]
 801681e:	6061      	str	r1, [r4, #4]
 8016820:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade, "7B");
 8016822:	687b      	ldr	r3, [r7, #4]
 8016824:	33cc      	adds	r3, #204	; 0xcc
 8016826:	4a4f      	ldr	r2, [pc, #316]	; (8016964 <problem_fetch+0x15644>)
 8016828:	8811      	ldrh	r1, [r2, #0]
 801682a:	7892      	ldrb	r2, [r2, #2]
 801682c:	8019      	strh	r1, [r3, #0]
 801682e:	709a      	strb	r2, [r3, #2]
			break;
 8016830:	f004 babc 	b.w	801adac <problem_fetch+0x19a8c>
		case 699 :
			strcpy(p->name,"ZONING IN");
 8016834:	687b      	ldr	r3, [r7, #4]
 8016836:	337c      	adds	r3, #124	; 0x7c
 8016838:	494b      	ldr	r1, [pc, #300]	; (8016968 <problem_fetch+0x15648>)
 801683a:	461a      	mov	r2, r3
 801683c:	460b      	mov	r3, r1
 801683e:	cb03      	ldmia	r3!, {r0, r1}
 8016840:	6010      	str	r0, [r2, #0]
 8016842:	6051      	str	r1, [r2, #4]
 8016844:	881b      	ldrh	r3, [r3, #0]
 8016846:	8113      	strh	r3, [r2, #8]
			p->moveSize = 7;
 8016848:	687b      	ldr	r3, [r7, #4]
 801684a:	2207      	movs	r2, #7
 801684c:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"G,C,E,H,C,E,D");
 801684e:	687b      	ldr	r3, [r7, #4]
 8016850:	3340      	adds	r3, #64	; 0x40
 8016852:	4a46      	ldr	r2, [pc, #280]	; (801696c <problem_fetch+0x1564c>)
 8016854:	461c      	mov	r4, r3
 8016856:	4613      	mov	r3, r2
 8016858:	cb07      	ldmia	r3!, {r0, r1, r2}
 801685a:	6020      	str	r0, [r4, #0]
 801685c:	6061      	str	r1, [r4, #4]
 801685e:	60a2      	str	r2, [r4, #8]
 8016860:	881b      	ldrh	r3, [r3, #0]
 8016862:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,8,12,8,13,16,18");
 8016864:	687b      	ldr	r3, [r7, #4]
 8016866:	3304      	adds	r3, #4
 8016868:	4a41      	ldr	r2, [pc, #260]	; (8016970 <problem_fetch+0x15650>)
 801686a:	461d      	mov	r5, r3
 801686c:	4614      	mov	r4, r2
 801686e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8016870:	6028      	str	r0, [r5, #0]
 8016872:	6069      	str	r1, [r5, #4]
 8016874:	60aa      	str	r2, [r5, #8]
 8016876:	60eb      	str	r3, [r5, #12]
 8016878:	8823      	ldrh	r3, [r4, #0]
 801687a:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish, "s,d,d,d,d,d,e");
 801687c:	687b      	ldr	r3, [r7, #4]
 801687e:	33d8      	adds	r3, #216	; 0xd8
 8016880:	4a3c      	ldr	r2, [pc, #240]	; (8016974 <problem_fetch+0x15654>)
 8016882:	461c      	mov	r4, r3
 8016884:	4613      	mov	r3, r2
 8016886:	cb07      	ldmia	r3!, {r0, r1, r2}
 8016888:	6020      	str	r0, [r4, #0]
 801688a:	6061      	str	r1, [r4, #4]
 801688c:	60a2      	str	r2, [r4, #8]
 801688e:	881b      	ldrh	r3, [r3, #0]
 8016890:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade, "6B+");
 8016892:	687b      	ldr	r3, [r7, #4]
 8016894:	33cc      	adds	r3, #204	; 0xcc
 8016896:	4a25      	ldr	r2, [pc, #148]	; (801692c <problem_fetch+0x1560c>)
 8016898:	6810      	ldr	r0, [r2, #0]
 801689a:	6018      	str	r0, [r3, #0]
			break;
 801689c:	f004 ba86 	b.w	801adac <problem_fetch+0x19a8c>
		case 7 :
			strcpy(p->name,"CHAD");
 80168a0:	687b      	ldr	r3, [r7, #4]
 80168a2:	337c      	adds	r3, #124	; 0x7c
 80168a4:	4a34      	ldr	r2, [pc, #208]	; (8016978 <problem_fetch+0x15658>)
 80168a6:	6810      	ldr	r0, [r2, #0]
 80168a8:	6018      	str	r0, [r3, #0]
 80168aa:	7912      	ldrb	r2, [r2, #4]
 80168ac:	711a      	strb	r2, [r3, #4]
			p->moveSize = 7;
 80168ae:	687b      	ldr	r3, [r7, #4]
 80168b0:	2207      	movs	r2, #7
 80168b2:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"C,D,A,F,F,E,D");
 80168b4:	687b      	ldr	r3, [r7, #4]
 80168b6:	3340      	adds	r3, #64	; 0x40
 80168b8:	4a30      	ldr	r2, [pc, #192]	; (801697c <problem_fetch+0x1565c>)
 80168ba:	461c      	mov	r4, r3
 80168bc:	4613      	mov	r3, r2
 80168be:	cb07      	ldmia	r3!, {r0, r1, r2}
 80168c0:	6020      	str	r0, [r4, #0]
 80168c2:	6061      	str	r1, [r4, #4]
 80168c4:	60a2      	str	r2, [r4, #8]
 80168c6:	881b      	ldrh	r3, [r3, #0]
 80168c8:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,7,9,11,13,16,18");
 80168ca:	687b      	ldr	r3, [r7, #4]
 80168cc:	3304      	adds	r3, #4
 80168ce:	4a2c      	ldr	r2, [pc, #176]	; (8016980 <problem_fetch+0x15660>)
 80168d0:	461d      	mov	r5, r3
 80168d2:	4614      	mov	r4, r2
 80168d4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80168d6:	6028      	str	r0, [r5, #0]
 80168d8:	6069      	str	r1, [r5, #4]
 80168da:	60aa      	str	r2, [r5, #8]
 80168dc:	60eb      	str	r3, [r5, #12]
 80168de:	8823      	ldrh	r3, [r4, #0]
 80168e0:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish, "s,d,d,d,d,d,e");
 80168e2:	687b      	ldr	r3, [r7, #4]
 80168e4:	33d8      	adds	r3, #216	; 0xd8
 80168e6:	4a23      	ldr	r2, [pc, #140]	; (8016974 <problem_fetch+0x15654>)
 80168e8:	461c      	mov	r4, r3
 80168ea:	4613      	mov	r3, r2
 80168ec:	cb07      	ldmia	r3!, {r0, r1, r2}
 80168ee:	6020      	str	r0, [r4, #0]
 80168f0:	6061      	str	r1, [r4, #4]
 80168f2:	60a2      	str	r2, [r4, #8]
 80168f4:	881b      	ldrh	r3, [r3, #0]
 80168f6:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade, "7B+");
 80168f8:	687b      	ldr	r3, [r7, #4]
 80168fa:	33cc      	adds	r3, #204	; 0xcc
 80168fc:	4a06      	ldr	r2, [pc, #24]	; (8016918 <problem_fetch+0x155f8>)
 80168fe:	6810      	ldr	r0, [r2, #0]
 8016900:	6018      	str	r0, [r3, #0]
			break;
 8016902:	f004 ba53 	b.w	801adac <problem_fetch+0x19a8c>
 8016906:	bf00      	nop
 8016908:	08028e24 	.word	0x08028e24
 801690c:	08028e30 	.word	0x08028e30
 8016910:	08028e3c 	.word	0x08028e3c
 8016914:	080232dc 	.word	0x080232dc
 8016918:	08021848 	.word	0x08021848
 801691c:	08028e4c 	.word	0x08028e4c
 8016920:	08028e5c 	.word	0x08028e5c
 8016924:	08028e6c 	.word	0x08028e6c
 8016928:	080212a0 	.word	0x080212a0
 801692c:	080212b0 	.word	0x080212b0
 8016930:	08028e80 	.word	0x08028e80
 8016934:	08028e90 	.word	0x08028e90
 8016938:	08028ea4 	.word	0x08028ea4
 801693c:	0802187c 	.word	0x0802187c
 8016940:	08028ebc 	.word	0x08028ebc
 8016944:	08028ec8 	.word	0x08028ec8
 8016948:	08028ed8 	.word	0x08028ed8
 801694c:	08028510 	.word	0x08028510
 8016950:	080212f4 	.word	0x080212f4
 8016954:	08028eec 	.word	0x08028eec
 8016958:	08028f04 	.word	0x08028f04
 801695c:	08028f10 	.word	0x08028f10
 8016960:	0802139c 	.word	0x0802139c
 8016964:	0802132c 	.word	0x0802132c
 8016968:	08028f20 	.word	0x08028f20
 801696c:	08028f2c 	.word	0x08028f2c
 8016970:	08028f3c 	.word	0x08028f3c
 8016974:	08021494 	.word	0x08021494
 8016978:	08028f50 	.word	0x08028f50
 801697c:	08028f58 	.word	0x08028f58
 8016980:	08028f68 	.word	0x08028f68
		case 70 :
			strcpy(p->name,"A'TRAZIONE");
 8016984:	687b      	ldr	r3, [r7, #4]
 8016986:	337c      	adds	r3, #124	; 0x7c
 8016988:	49b4      	ldr	r1, [pc, #720]	; (8016c5c <problem_fetch+0x1593c>)
 801698a:	461a      	mov	r2, r3
 801698c:	460b      	mov	r3, r1
 801698e:	cb03      	ldmia	r3!, {r0, r1}
 8016990:	6010      	str	r0, [r2, #0]
 8016992:	6051      	str	r1, [r2, #4]
 8016994:	8819      	ldrh	r1, [r3, #0]
 8016996:	789b      	ldrb	r3, [r3, #2]
 8016998:	8111      	strh	r1, [r2, #8]
 801699a:	7293      	strb	r3, [r2, #10]
			p->moveSize = 6;
 801699c:	687b      	ldr	r3, [r7, #4]
 801699e:	2206      	movs	r2, #6
 80169a0:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"E,I,J,K,G,D");
 80169a2:	687b      	ldr	r3, [r7, #4]
 80169a4:	3340      	adds	r3, #64	; 0x40
 80169a6:	4aae      	ldr	r2, [pc, #696]	; (8016c60 <problem_fetch+0x15940>)
 80169a8:	461c      	mov	r4, r3
 80169aa:	4613      	mov	r3, r2
 80169ac:	cb07      	ldmia	r3!, {r0, r1, r2}
 80169ae:	6020      	str	r0, [r4, #0]
 80169b0:	6061      	str	r1, [r4, #4]
 80169b2:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"6,10,13,14,17,18");
 80169b4:	687b      	ldr	r3, [r7, #4]
 80169b6:	3304      	adds	r3, #4
 80169b8:	4aaa      	ldr	r2, [pc, #680]	; (8016c64 <problem_fetch+0x15944>)
 80169ba:	461d      	mov	r5, r3
 80169bc:	4614      	mov	r4, r2
 80169be:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80169c0:	6028      	str	r0, [r5, #0]
 80169c2:	6069      	str	r1, [r5, #4]
 80169c4:	60aa      	str	r2, [r5, #8]
 80169c6:	60eb      	str	r3, [r5, #12]
 80169c8:	7823      	ldrb	r3, [r4, #0]
 80169ca:	742b      	strb	r3, [r5, #16]
			strcpy(p->startFinish, "s,d,d,d,d,e");
 80169cc:	687b      	ldr	r3, [r7, #4]
 80169ce:	33d8      	adds	r3, #216	; 0xd8
 80169d0:	4aa5      	ldr	r2, [pc, #660]	; (8016c68 <problem_fetch+0x15948>)
 80169d2:	461c      	mov	r4, r3
 80169d4:	4613      	mov	r3, r2
 80169d6:	cb07      	ldmia	r3!, {r0, r1, r2}
 80169d8:	6020      	str	r0, [r4, #0]
 80169da:	6061      	str	r1, [r4, #4]
 80169dc:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade, "7B+");
 80169de:	687b      	ldr	r3, [r7, #4]
 80169e0:	33cc      	adds	r3, #204	; 0xcc
 80169e2:	4aa2      	ldr	r2, [pc, #648]	; (8016c6c <problem_fetch+0x1594c>)
 80169e4:	6810      	ldr	r0, [r2, #0]
 80169e6:	6018      	str	r0, [r3, #0]
			break;
 80169e8:	f004 b9e0 	b.w	801adac <problem_fetch+0x19a8c>
		case 700 :
			strcpy(p->name,"ZONING IN (ALT. START)");
 80169ec:	687b      	ldr	r3, [r7, #4]
 80169ee:	337c      	adds	r3, #124	; 0x7c
 80169f0:	4a9f      	ldr	r2, [pc, #636]	; (8016c70 <problem_fetch+0x15950>)
 80169f2:	461c      	mov	r4, r3
 80169f4:	4615      	mov	r5, r2
 80169f6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80169f8:	6020      	str	r0, [r4, #0]
 80169fa:	6061      	str	r1, [r4, #4]
 80169fc:	60a2      	str	r2, [r4, #8]
 80169fe:	60e3      	str	r3, [r4, #12]
 8016a00:	6828      	ldr	r0, [r5, #0]
 8016a02:	6120      	str	r0, [r4, #16]
 8016a04:	88ab      	ldrh	r3, [r5, #4]
 8016a06:	79aa      	ldrb	r2, [r5, #6]
 8016a08:	82a3      	strh	r3, [r4, #20]
 8016a0a:	4613      	mov	r3, r2
 8016a0c:	75a3      	strb	r3, [r4, #22]
			p->moveSize = 8;
 8016a0e:	687b      	ldr	r3, [r7, #4]
 8016a10:	2208      	movs	r2, #8
 8016a12:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"E,G,H,C,E,C,E,D");
 8016a14:	687b      	ldr	r3, [r7, #4]
 8016a16:	3340      	adds	r3, #64	; 0x40
 8016a18:	4a96      	ldr	r2, [pc, #600]	; (8016c74 <problem_fetch+0x15954>)
 8016a1a:	461c      	mov	r4, r3
 8016a1c:	4615      	mov	r5, r2
 8016a1e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8016a20:	6020      	str	r0, [r4, #0]
 8016a22:	6061      	str	r1, [r4, #4]
 8016a24:	60a2      	str	r2, [r4, #8]
 8016a26:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"6,4,8,8,12,13,16,18");
 8016a28:	687b      	ldr	r3, [r7, #4]
 8016a2a:	3304      	adds	r3, #4
 8016a2c:	4a92      	ldr	r2, [pc, #584]	; (8016c78 <problem_fetch+0x15958>)
 8016a2e:	461d      	mov	r5, r3
 8016a30:	4614      	mov	r4, r2
 8016a32:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8016a34:	6028      	str	r0, [r5, #0]
 8016a36:	6069      	str	r1, [r5, #4]
 8016a38:	60aa      	str	r2, [r5, #8]
 8016a3a:	60eb      	str	r3, [r5, #12]
 8016a3c:	6820      	ldr	r0, [r4, #0]
 8016a3e:	6128      	str	r0, [r5, #16]
			strcpy(p->startFinish, "s,s,d,d,d,d,d,e");
 8016a40:	687b      	ldr	r3, [r7, #4]
 8016a42:	33d8      	adds	r3, #216	; 0xd8
 8016a44:	4a8d      	ldr	r2, [pc, #564]	; (8016c7c <problem_fetch+0x1595c>)
 8016a46:	461c      	mov	r4, r3
 8016a48:	4615      	mov	r5, r2
 8016a4a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8016a4c:	6020      	str	r0, [r4, #0]
 8016a4e:	6061      	str	r1, [r4, #4]
 8016a50:	60a2      	str	r2, [r4, #8]
 8016a52:	60e3      	str	r3, [r4, #12]
			strcpy(p->grade, "6B+");
 8016a54:	687b      	ldr	r3, [r7, #4]
 8016a56:	33cc      	adds	r3, #204	; 0xcc
 8016a58:	4a89      	ldr	r2, [pc, #548]	; (8016c80 <problem_fetch+0x15960>)
 8016a5a:	6810      	ldr	r0, [r2, #0]
 8016a5c:	6018      	str	r0, [r3, #0]
			break;
 8016a5e:	f004 b9a5 	b.w	801adac <problem_fetch+0x19a8c>
		case 701 :
			strcpy(p->name,"MONOLITH");
 8016a62:	687b      	ldr	r3, [r7, #4]
 8016a64:	337c      	adds	r3, #124	; 0x7c
 8016a66:	4987      	ldr	r1, [pc, #540]	; (8016c84 <problem_fetch+0x15964>)
 8016a68:	461a      	mov	r2, r3
 8016a6a:	460b      	mov	r3, r1
 8016a6c:	cb03      	ldmia	r3!, {r0, r1}
 8016a6e:	6010      	str	r0, [r2, #0]
 8016a70:	6051      	str	r1, [r2, #4]
 8016a72:	781b      	ldrb	r3, [r3, #0]
 8016a74:	7213      	strb	r3, [r2, #8]
			p->moveSize = 7;
 8016a76:	687b      	ldr	r3, [r7, #4]
 8016a78:	2207      	movs	r2, #7
 8016a7a:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"J,H,E,F,C,E,D");
 8016a7c:	687b      	ldr	r3, [r7, #4]
 8016a7e:	3340      	adds	r3, #64	; 0x40
 8016a80:	4a81      	ldr	r2, [pc, #516]	; (8016c88 <problem_fetch+0x15968>)
 8016a82:	461c      	mov	r4, r3
 8016a84:	4613      	mov	r3, r2
 8016a86:	cb07      	ldmia	r3!, {r0, r1, r2}
 8016a88:	6020      	str	r0, [r4, #0]
 8016a8a:	6061      	str	r1, [r4, #4]
 8016a8c:	60a2      	str	r2, [r4, #8]
 8016a8e:	881b      	ldrh	r3, [r3, #0]
 8016a90:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,8,8,11,13,16,18");
 8016a92:	687b      	ldr	r3, [r7, #4]
 8016a94:	3304      	adds	r3, #4
 8016a96:	4a7d      	ldr	r2, [pc, #500]	; (8016c8c <problem_fetch+0x1596c>)
 8016a98:	461d      	mov	r5, r3
 8016a9a:	4614      	mov	r4, r2
 8016a9c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8016a9e:	6028      	str	r0, [r5, #0]
 8016aa0:	6069      	str	r1, [r5, #4]
 8016aa2:	60aa      	str	r2, [r5, #8]
 8016aa4:	60eb      	str	r3, [r5, #12]
 8016aa6:	8823      	ldrh	r3, [r4, #0]
 8016aa8:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish, "s,d,d,d,d,d,e");
 8016aaa:	687b      	ldr	r3, [r7, #4]
 8016aac:	33d8      	adds	r3, #216	; 0xd8
 8016aae:	4a78      	ldr	r2, [pc, #480]	; (8016c90 <problem_fetch+0x15970>)
 8016ab0:	461c      	mov	r4, r3
 8016ab2:	4613      	mov	r3, r2
 8016ab4:	cb07      	ldmia	r3!, {r0, r1, r2}
 8016ab6:	6020      	str	r0, [r4, #0]
 8016ab8:	6061      	str	r1, [r4, #4]
 8016aba:	60a2      	str	r2, [r4, #8]
 8016abc:	881b      	ldrh	r3, [r3, #0]
 8016abe:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade, "6B+");
 8016ac0:	687b      	ldr	r3, [r7, #4]
 8016ac2:	33cc      	adds	r3, #204	; 0xcc
 8016ac4:	4a6e      	ldr	r2, [pc, #440]	; (8016c80 <problem_fetch+0x15960>)
 8016ac6:	6810      	ldr	r0, [r2, #0]
 8016ac8:	6018      	str	r0, [r3, #0]
			break;
 8016aca:	f004 b96f 	b.w	801adac <problem_fetch+0x19a8c>
		case 702 :
			strcpy(p->name,"BLACKNANA OLDNANA");
 8016ace:	687b      	ldr	r3, [r7, #4]
 8016ad0:	337c      	adds	r3, #124	; 0x7c
 8016ad2:	4a70      	ldr	r2, [pc, #448]	; (8016c94 <problem_fetch+0x15974>)
 8016ad4:	461d      	mov	r5, r3
 8016ad6:	4614      	mov	r4, r2
 8016ad8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8016ada:	6028      	str	r0, [r5, #0]
 8016adc:	6069      	str	r1, [r5, #4]
 8016ade:	60aa      	str	r2, [r5, #8]
 8016ae0:	60eb      	str	r3, [r5, #12]
 8016ae2:	8823      	ldrh	r3, [r4, #0]
 8016ae4:	822b      	strh	r3, [r5, #16]
			p->moveSize = 6;
 8016ae6:	687b      	ldr	r3, [r7, #4]
 8016ae8:	2206      	movs	r2, #6
 8016aea:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"J,I,I,H,D,D");
 8016aec:	687b      	ldr	r3, [r7, #4]
 8016aee:	3340      	adds	r3, #64	; 0x40
 8016af0:	4a69      	ldr	r2, [pc, #420]	; (8016c98 <problem_fetch+0x15978>)
 8016af2:	461c      	mov	r4, r3
 8016af4:	4613      	mov	r3, r2
 8016af6:	cb07      	ldmia	r3!, {r0, r1, r2}
 8016af8:	6020      	str	r0, [r4, #0]
 8016afa:	6061      	str	r1, [r4, #4]
 8016afc:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,10,9,13,15,18");
 8016afe:	687b      	ldr	r3, [r7, #4]
 8016b00:	3304      	adds	r3, #4
 8016b02:	4a66      	ldr	r2, [pc, #408]	; (8016c9c <problem_fetch+0x1597c>)
 8016b04:	461c      	mov	r4, r3
 8016b06:	4615      	mov	r5, r2
 8016b08:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8016b0a:	6020      	str	r0, [r4, #0]
 8016b0c:	6061      	str	r1, [r4, #4]
 8016b0e:	60a2      	str	r2, [r4, #8]
 8016b10:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish, "s,d,d,d,d,e");
 8016b12:	687b      	ldr	r3, [r7, #4]
 8016b14:	33d8      	adds	r3, #216	; 0xd8
 8016b16:	4a54      	ldr	r2, [pc, #336]	; (8016c68 <problem_fetch+0x15948>)
 8016b18:	461c      	mov	r4, r3
 8016b1a:	4613      	mov	r3, r2
 8016b1c:	cb07      	ldmia	r3!, {r0, r1, r2}
 8016b1e:	6020      	str	r0, [r4, #0]
 8016b20:	6061      	str	r1, [r4, #4]
 8016b22:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade, "7B+");
 8016b24:	687b      	ldr	r3, [r7, #4]
 8016b26:	33cc      	adds	r3, #204	; 0xcc
 8016b28:	4a50      	ldr	r2, [pc, #320]	; (8016c6c <problem_fetch+0x1594c>)
 8016b2a:	6810      	ldr	r0, [r2, #0]
 8016b2c:	6018      	str	r0, [r3, #0]
			break;
 8016b2e:	f004 b93d 	b.w	801adac <problem_fetch+0x19a8c>
		case 703 :
			strcpy(p->name,"LA FRICHINA");
 8016b32:	687b      	ldr	r3, [r7, #4]
 8016b34:	337c      	adds	r3, #124	; 0x7c
 8016b36:	4a5a      	ldr	r2, [pc, #360]	; (8016ca0 <problem_fetch+0x15980>)
 8016b38:	461c      	mov	r4, r3
 8016b3a:	4613      	mov	r3, r2
 8016b3c:	cb07      	ldmia	r3!, {r0, r1, r2}
 8016b3e:	6020      	str	r0, [r4, #0]
 8016b40:	6061      	str	r1, [r4, #4]
 8016b42:	60a2      	str	r2, [r4, #8]
			p->moveSize = 5;
 8016b44:	687b      	ldr	r3, [r7, #4]
 8016b46:	2205      	movs	r2, #5
 8016b48:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"G,H,G,H,I");
 8016b4a:	687b      	ldr	r3, [r7, #4]
 8016b4c:	3340      	adds	r3, #64	; 0x40
 8016b4e:	4955      	ldr	r1, [pc, #340]	; (8016ca4 <problem_fetch+0x15984>)
 8016b50:	461a      	mov	r2, r3
 8016b52:	460b      	mov	r3, r1
 8016b54:	cb03      	ldmia	r3!, {r0, r1}
 8016b56:	6010      	str	r0, [r2, #0]
 8016b58:	6051      	str	r1, [r2, #4]
 8016b5a:	881b      	ldrh	r3, [r3, #0]
 8016b5c:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"4,10,14,13,18");
 8016b5e:	687b      	ldr	r3, [r7, #4]
 8016b60:	3304      	adds	r3, #4
 8016b62:	4a51      	ldr	r2, [pc, #324]	; (8016ca8 <problem_fetch+0x15988>)
 8016b64:	461c      	mov	r4, r3
 8016b66:	4613      	mov	r3, r2
 8016b68:	cb07      	ldmia	r3!, {r0, r1, r2}
 8016b6a:	6020      	str	r0, [r4, #0]
 8016b6c:	6061      	str	r1, [r4, #4]
 8016b6e:	60a2      	str	r2, [r4, #8]
 8016b70:	881b      	ldrh	r3, [r3, #0]
 8016b72:	81a3      	strh	r3, [r4, #12]
			strcpy(p->startFinish, "s,d,d,d,e");
 8016b74:	687b      	ldr	r3, [r7, #4]
 8016b76:	33d8      	adds	r3, #216	; 0xd8
 8016b78:	494c      	ldr	r1, [pc, #304]	; (8016cac <problem_fetch+0x1598c>)
 8016b7a:	461a      	mov	r2, r3
 8016b7c:	460b      	mov	r3, r1
 8016b7e:	cb03      	ldmia	r3!, {r0, r1}
 8016b80:	6010      	str	r0, [r2, #0]
 8016b82:	6051      	str	r1, [r2, #4]
 8016b84:	881b      	ldrh	r3, [r3, #0]
 8016b86:	8113      	strh	r3, [r2, #8]
			strcpy(p->grade, "7A");
 8016b88:	687b      	ldr	r3, [r7, #4]
 8016b8a:	33cc      	adds	r3, #204	; 0xcc
 8016b8c:	4a48      	ldr	r2, [pc, #288]	; (8016cb0 <problem_fetch+0x15990>)
 8016b8e:	8811      	ldrh	r1, [r2, #0]
 8016b90:	7892      	ldrb	r2, [r2, #2]
 8016b92:	8019      	strh	r1, [r3, #0]
 8016b94:	709a      	strb	r2, [r3, #2]
			break;
 8016b96:	f004 b909 	b.w	801adac <problem_fetch+0x19a8c>
		case 704 :
			strcpy(p->name,"LI VARDASCI");
 8016b9a:	687b      	ldr	r3, [r7, #4]
 8016b9c:	337c      	adds	r3, #124	; 0x7c
 8016b9e:	4a45      	ldr	r2, [pc, #276]	; (8016cb4 <problem_fetch+0x15994>)
 8016ba0:	461c      	mov	r4, r3
 8016ba2:	4613      	mov	r3, r2
 8016ba4:	cb07      	ldmia	r3!, {r0, r1, r2}
 8016ba6:	6020      	str	r0, [r4, #0]
 8016ba8:	6061      	str	r1, [r4, #4]
 8016baa:	60a2      	str	r2, [r4, #8]
			p->moveSize = 4;
 8016bac:	687b      	ldr	r3, [r7, #4]
 8016bae:	2204      	movs	r2, #4
 8016bb0:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"G,H,G,D");
 8016bb2:	687b      	ldr	r3, [r7, #4]
 8016bb4:	3340      	adds	r3, #64	; 0x40
 8016bb6:	4940      	ldr	r1, [pc, #256]	; (8016cb8 <problem_fetch+0x15998>)
 8016bb8:	461a      	mov	r2, r3
 8016bba:	460b      	mov	r3, r1
 8016bbc:	cb03      	ldmia	r3!, {r0, r1}
 8016bbe:	6010      	str	r0, [r2, #0]
 8016bc0:	6051      	str	r1, [r2, #4]
			strcpy(p->moveNumbers,"4,10,14,18");
 8016bc2:	687b      	ldr	r3, [r7, #4]
 8016bc4:	3304      	adds	r3, #4
 8016bc6:	493d      	ldr	r1, [pc, #244]	; (8016cbc <problem_fetch+0x1599c>)
 8016bc8:	461a      	mov	r2, r3
 8016bca:	460b      	mov	r3, r1
 8016bcc:	cb03      	ldmia	r3!, {r0, r1}
 8016bce:	6010      	str	r0, [r2, #0]
 8016bd0:	6051      	str	r1, [r2, #4]
 8016bd2:	8819      	ldrh	r1, [r3, #0]
 8016bd4:	789b      	ldrb	r3, [r3, #2]
 8016bd6:	8111      	strh	r1, [r2, #8]
 8016bd8:	7293      	strb	r3, [r2, #10]
			strcpy(p->startFinish, "s,d,d,e");
 8016bda:	687b      	ldr	r3, [r7, #4]
 8016bdc:	33d8      	adds	r3, #216	; 0xd8
 8016bde:	4938      	ldr	r1, [pc, #224]	; (8016cc0 <problem_fetch+0x159a0>)
 8016be0:	461a      	mov	r2, r3
 8016be2:	460b      	mov	r3, r1
 8016be4:	cb03      	ldmia	r3!, {r0, r1}
 8016be6:	6010      	str	r0, [r2, #0]
 8016be8:	6051      	str	r1, [r2, #4]
			strcpy(p->grade, "7B");
 8016bea:	687b      	ldr	r3, [r7, #4]
 8016bec:	33cc      	adds	r3, #204	; 0xcc
 8016bee:	4a35      	ldr	r2, [pc, #212]	; (8016cc4 <problem_fetch+0x159a4>)
 8016bf0:	8811      	ldrh	r1, [r2, #0]
 8016bf2:	7892      	ldrb	r2, [r2, #2]
 8016bf4:	8019      	strh	r1, [r3, #0]
 8016bf6:	709a      	strb	r2, [r3, #2]
			break;
 8016bf8:	f004 b8d8 	b.w	801adac <problem_fetch+0x19a8c>
		case 705 :
			strcpy(p->name,"MOFOS");
 8016bfc:	687b      	ldr	r3, [r7, #4]
 8016bfe:	337c      	adds	r3, #124	; 0x7c
 8016c00:	4a31      	ldr	r2, [pc, #196]	; (8016cc8 <problem_fetch+0x159a8>)
 8016c02:	6810      	ldr	r0, [r2, #0]
 8016c04:	6018      	str	r0, [r3, #0]
 8016c06:	8892      	ldrh	r2, [r2, #4]
 8016c08:	809a      	strh	r2, [r3, #4]
			p->moveSize = 6;
 8016c0a:	687b      	ldr	r3, [r7, #4]
 8016c0c:	2206      	movs	r2, #6
 8016c0e:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"H,J,H,C,D,D");
 8016c10:	687b      	ldr	r3, [r7, #4]
 8016c12:	3340      	adds	r3, #64	; 0x40
 8016c14:	4a2d      	ldr	r2, [pc, #180]	; (8016ccc <problem_fetch+0x159ac>)
 8016c16:	461c      	mov	r4, r3
 8016c18:	4613      	mov	r3, r2
 8016c1a:	cb07      	ldmia	r3!, {r0, r1, r2}
 8016c1c:	6020      	str	r0, [r4, #0]
 8016c1e:	6061      	str	r1, [r4, #4]
 8016c20:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,5,10,13,15,18");
 8016c22:	687b      	ldr	r3, [r7, #4]
 8016c24:	3304      	adds	r3, #4
 8016c26:	4a2a      	ldr	r2, [pc, #168]	; (8016cd0 <problem_fetch+0x159b0>)
 8016c28:	461c      	mov	r4, r3
 8016c2a:	4615      	mov	r5, r2
 8016c2c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8016c2e:	6020      	str	r0, [r4, #0]
 8016c30:	6061      	str	r1, [r4, #4]
 8016c32:	60a2      	str	r2, [r4, #8]
 8016c34:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish, "s,s,d,d,d,e");
 8016c36:	687b      	ldr	r3, [r7, #4]
 8016c38:	33d8      	adds	r3, #216	; 0xd8
 8016c3a:	4a26      	ldr	r2, [pc, #152]	; (8016cd4 <problem_fetch+0x159b4>)
 8016c3c:	461c      	mov	r4, r3
 8016c3e:	4613      	mov	r3, r2
 8016c40:	cb07      	ldmia	r3!, {r0, r1, r2}
 8016c42:	6020      	str	r0, [r4, #0]
 8016c44:	6061      	str	r1, [r4, #4]
 8016c46:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade, "6C");
 8016c48:	687b      	ldr	r3, [r7, #4]
 8016c4a:	33cc      	adds	r3, #204	; 0xcc
 8016c4c:	4a22      	ldr	r2, [pc, #136]	; (8016cd8 <problem_fetch+0x159b8>)
 8016c4e:	8811      	ldrh	r1, [r2, #0]
 8016c50:	7892      	ldrb	r2, [r2, #2]
 8016c52:	8019      	strh	r1, [r3, #0]
 8016c54:	709a      	strb	r2, [r3, #2]
			break;
 8016c56:	f004 b8a9 	b.w	801adac <problem_fetch+0x19a8c>
 8016c5a:	bf00      	nop
 8016c5c:	08028f7c 	.word	0x08028f7c
 8016c60:	08028f88 	.word	0x08028f88
 8016c64:	08028f94 	.word	0x08028f94
 8016c68:	0802139c 	.word	0x0802139c
 8016c6c:	08021848 	.word	0x08021848
 8016c70:	08028fa8 	.word	0x08028fa8
 8016c74:	08028fc0 	.word	0x08028fc0
 8016c78:	08028fd0 	.word	0x08028fd0
 8016c7c:	080214cc 	.word	0x080214cc
 8016c80:	080212b0 	.word	0x080212b0
 8016c84:	08028fe4 	.word	0x08028fe4
 8016c88:	08028ff0 	.word	0x08028ff0
 8016c8c:	080243dc 	.word	0x080243dc
 8016c90:	08021494 	.word	0x08021494
 8016c94:	08029000 	.word	0x08029000
 8016c98:	08029014 	.word	0x08029014
 8016c9c:	08029020 	.word	0x08029020
 8016ca0:	08029030 	.word	0x08029030
 8016ca4:	0802903c 	.word	0x0802903c
 8016ca8:	08029048 	.word	0x08029048
 8016cac:	08021320 	.word	0x08021320
 8016cb0:	080212f4 	.word	0x080212f4
 8016cb4:	08029058 	.word	0x08029058
 8016cb8:	08029064 	.word	0x08029064
 8016cbc:	0802201c 	.word	0x0802201c
 8016cc0:	08022028 	.word	0x08022028
 8016cc4:	0802132c 	.word	0x0802132c
 8016cc8:	0802906c 	.word	0x0802906c
 8016ccc:	08029074 	.word	0x08029074
 8016cd0:	08029080 	.word	0x08029080
 8016cd4:	08021910 	.word	0x08021910
 8016cd8:	08021370 	.word	0x08021370
		case 706 :
			strcpy(p->name,"MISSILE");
 8016cdc:	687b      	ldr	r3, [r7, #4]
 8016cde:	337c      	adds	r3, #124	; 0x7c
 8016ce0:	49bd      	ldr	r1, [pc, #756]	; (8016fd8 <problem_fetch+0x15cb8>)
 8016ce2:	461a      	mov	r2, r3
 8016ce4:	460b      	mov	r3, r1
 8016ce6:	cb03      	ldmia	r3!, {r0, r1}
 8016ce8:	6010      	str	r0, [r2, #0]
 8016cea:	6051      	str	r1, [r2, #4]
			p->moveSize = 7;
 8016cec:	687b      	ldr	r3, [r7, #4]
 8016cee:	2207      	movs	r2, #7
 8016cf0:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"J,E,G,B,E,C,D");
 8016cf2:	687b      	ldr	r3, [r7, #4]
 8016cf4:	3340      	adds	r3, #64	; 0x40
 8016cf6:	4ab9      	ldr	r2, [pc, #740]	; (8016fdc <problem_fetch+0x15cbc>)
 8016cf8:	461c      	mov	r4, r3
 8016cfa:	4613      	mov	r3, r2
 8016cfc:	cb07      	ldmia	r3!, {r0, r1, r2}
 8016cfe:	6020      	str	r0, [r4, #0]
 8016d00:	6061      	str	r1, [r4, #4]
 8016d02:	60a2      	str	r2, [r4, #8]
 8016d04:	881b      	ldrh	r3, [r3, #0]
 8016d06:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,6,9,10,12,13,18");
 8016d08:	687b      	ldr	r3, [r7, #4]
 8016d0a:	3304      	adds	r3, #4
 8016d0c:	4ab4      	ldr	r2, [pc, #720]	; (8016fe0 <problem_fetch+0x15cc0>)
 8016d0e:	461d      	mov	r5, r3
 8016d10:	4614      	mov	r4, r2
 8016d12:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8016d14:	6028      	str	r0, [r5, #0]
 8016d16:	6069      	str	r1, [r5, #4]
 8016d18:	60aa      	str	r2, [r5, #8]
 8016d1a:	60eb      	str	r3, [r5, #12]
 8016d1c:	8823      	ldrh	r3, [r4, #0]
 8016d1e:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish, "s,d,d,d,d,d,e");
 8016d20:	687b      	ldr	r3, [r7, #4]
 8016d22:	33d8      	adds	r3, #216	; 0xd8
 8016d24:	4aaf      	ldr	r2, [pc, #700]	; (8016fe4 <problem_fetch+0x15cc4>)
 8016d26:	461c      	mov	r4, r3
 8016d28:	4613      	mov	r3, r2
 8016d2a:	cb07      	ldmia	r3!, {r0, r1, r2}
 8016d2c:	6020      	str	r0, [r4, #0]
 8016d2e:	6061      	str	r1, [r4, #4]
 8016d30:	60a2      	str	r2, [r4, #8]
 8016d32:	881b      	ldrh	r3, [r3, #0]
 8016d34:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade, "7A");
 8016d36:	687b      	ldr	r3, [r7, #4]
 8016d38:	33cc      	adds	r3, #204	; 0xcc
 8016d3a:	4aab      	ldr	r2, [pc, #684]	; (8016fe8 <problem_fetch+0x15cc8>)
 8016d3c:	8811      	ldrh	r1, [r2, #0]
 8016d3e:	7892      	ldrb	r2, [r2, #2]
 8016d40:	8019      	strh	r1, [r3, #0]
 8016d42:	709a      	strb	r2, [r3, #2]
			break;
 8016d44:	f004 b832 	b.w	801adac <problem_fetch+0x19a8c>
		case 707 :
			strcpy(p->name,"TESTJ");
 8016d48:	687b      	ldr	r3, [r7, #4]
 8016d4a:	337c      	adds	r3, #124	; 0x7c
 8016d4c:	4aa7      	ldr	r2, [pc, #668]	; (8016fec <problem_fetch+0x15ccc>)
 8016d4e:	6810      	ldr	r0, [r2, #0]
 8016d50:	6018      	str	r0, [r3, #0]
 8016d52:	8892      	ldrh	r2, [r2, #4]
 8016d54:	809a      	strh	r2, [r3, #4]
			p->moveSize = 9;
 8016d56:	687b      	ldr	r3, [r7, #4]
 8016d58:	2209      	movs	r2, #9
 8016d5a:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"G,J,H,F,H,E,G,D,A");
 8016d5c:	687b      	ldr	r3, [r7, #4]
 8016d5e:	3340      	adds	r3, #64	; 0x40
 8016d60:	4aa3      	ldr	r2, [pc, #652]	; (8016ff0 <problem_fetch+0x15cd0>)
 8016d62:	461d      	mov	r5, r3
 8016d64:	4614      	mov	r4, r2
 8016d66:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8016d68:	6028      	str	r0, [r5, #0]
 8016d6a:	6069      	str	r1, [r5, #4]
 8016d6c:	60aa      	str	r2, [r5, #8]
 8016d6e:	60eb      	str	r3, [r5, #12]
 8016d70:	8823      	ldrh	r3, [r4, #0]
 8016d72:	822b      	strh	r3, [r5, #16]
			strcpy(p->moveNumbers,"4,5,8,11,13,14,17,18,14");
 8016d74:	687b      	ldr	r3, [r7, #4]
 8016d76:	3304      	adds	r3, #4
 8016d78:	4a9e      	ldr	r2, [pc, #632]	; (8016ff4 <problem_fetch+0x15cd4>)
 8016d7a:	461d      	mov	r5, r3
 8016d7c:	4614      	mov	r4, r2
 8016d7e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8016d80:	6028      	str	r0, [r5, #0]
 8016d82:	6069      	str	r1, [r5, #4]
 8016d84:	60aa      	str	r2, [r5, #8]
 8016d86:	60eb      	str	r3, [r5, #12]
 8016d88:	cc03      	ldmia	r4!, {r0, r1}
 8016d8a:	6128      	str	r0, [r5, #16]
 8016d8c:	6169      	str	r1, [r5, #20]
			strcpy(p->startFinish, "s,s,d,d,d,d,d,e,d");
 8016d8e:	687b      	ldr	r3, [r7, #4]
 8016d90:	33d8      	adds	r3, #216	; 0xd8
 8016d92:	4a99      	ldr	r2, [pc, #612]	; (8016ff8 <problem_fetch+0x15cd8>)
 8016d94:	461d      	mov	r5, r3
 8016d96:	4614      	mov	r4, r2
 8016d98:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8016d9a:	6028      	str	r0, [r5, #0]
 8016d9c:	6069      	str	r1, [r5, #4]
 8016d9e:	60aa      	str	r2, [r5, #8]
 8016da0:	60eb      	str	r3, [r5, #12]
 8016da2:	8823      	ldrh	r3, [r4, #0]
 8016da4:	822b      	strh	r3, [r5, #16]
			strcpy(p->grade, "6B+");
 8016da6:	687b      	ldr	r3, [r7, #4]
 8016da8:	33cc      	adds	r3, #204	; 0xcc
 8016daa:	4a94      	ldr	r2, [pc, #592]	; (8016ffc <problem_fetch+0x15cdc>)
 8016dac:	6810      	ldr	r0, [r2, #0]
 8016dae:	6018      	str	r0, [r3, #0]
			break;
 8016db0:	f003 bffc 	b.w	801adac <problem_fetch+0x19a8c>
		case 708 :
			strcpy(p->name,"FLAPJACKS");
 8016db4:	687b      	ldr	r3, [r7, #4]
 8016db6:	337c      	adds	r3, #124	; 0x7c
 8016db8:	4991      	ldr	r1, [pc, #580]	; (8017000 <problem_fetch+0x15ce0>)
 8016dba:	461a      	mov	r2, r3
 8016dbc:	460b      	mov	r3, r1
 8016dbe:	cb03      	ldmia	r3!, {r0, r1}
 8016dc0:	6010      	str	r0, [r2, #0]
 8016dc2:	6051      	str	r1, [r2, #4]
 8016dc4:	881b      	ldrh	r3, [r3, #0]
 8016dc6:	8113      	strh	r3, [r2, #8]
			p->moveSize = 6;
 8016dc8:	687b      	ldr	r3, [r7, #4]
 8016dca:	2206      	movs	r2, #6
 8016dcc:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"G,E,H,D,E,A");
 8016dce:	687b      	ldr	r3, [r7, #4]
 8016dd0:	3340      	adds	r3, #64	; 0x40
 8016dd2:	4a8c      	ldr	r2, [pc, #560]	; (8017004 <problem_fetch+0x15ce4>)
 8016dd4:	461c      	mov	r4, r3
 8016dd6:	4613      	mov	r3, r2
 8016dd8:	cb07      	ldmia	r3!, {r0, r1, r2}
 8016dda:	6020      	str	r0, [r4, #0]
 8016ddc:	6061      	str	r1, [r4, #4]
 8016dde:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,6,8,11,14,18");
 8016de0:	687b      	ldr	r3, [r7, #4]
 8016de2:	3304      	adds	r3, #4
 8016de4:	4a88      	ldr	r2, [pc, #544]	; (8017008 <problem_fetch+0x15ce8>)
 8016de6:	461c      	mov	r4, r3
 8016de8:	4613      	mov	r3, r2
 8016dea:	cb07      	ldmia	r3!, {r0, r1, r2}
 8016dec:	6020      	str	r0, [r4, #0]
 8016dee:	6061      	str	r1, [r4, #4]
 8016df0:	60a2      	str	r2, [r4, #8]
 8016df2:	881a      	ldrh	r2, [r3, #0]
 8016df4:	789b      	ldrb	r3, [r3, #2]
 8016df6:	81a2      	strh	r2, [r4, #12]
 8016df8:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish, "s,s,d,d,d,e");
 8016dfa:	687b      	ldr	r3, [r7, #4]
 8016dfc:	33d8      	adds	r3, #216	; 0xd8
 8016dfe:	4a83      	ldr	r2, [pc, #524]	; (801700c <problem_fetch+0x15cec>)
 8016e00:	461c      	mov	r4, r3
 8016e02:	4613      	mov	r3, r2
 8016e04:	cb07      	ldmia	r3!, {r0, r1, r2}
 8016e06:	6020      	str	r0, [r4, #0]
 8016e08:	6061      	str	r1, [r4, #4]
 8016e0a:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade, "6B+");
 8016e0c:	687b      	ldr	r3, [r7, #4]
 8016e0e:	33cc      	adds	r3, #204	; 0xcc
 8016e10:	4a7a      	ldr	r2, [pc, #488]	; (8016ffc <problem_fetch+0x15cdc>)
 8016e12:	6810      	ldr	r0, [r2, #0]
 8016e14:	6018      	str	r0, [r3, #0]
			break;
 8016e16:	f003 bfc9 	b.w	801adac <problem_fetch+0x19a8c>
		case 709 :
			strcpy(p->name,"ZONED IN (H10 FOOT ONLY)");
 8016e1a:	687b      	ldr	r3, [r7, #4]
 8016e1c:	337c      	adds	r3, #124	; 0x7c
 8016e1e:	4a7c      	ldr	r2, [pc, #496]	; (8017010 <problem_fetch+0x15cf0>)
 8016e20:	461d      	mov	r5, r3
 8016e22:	4614      	mov	r4, r2
 8016e24:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8016e26:	6028      	str	r0, [r5, #0]
 8016e28:	6069      	str	r1, [r5, #4]
 8016e2a:	60aa      	str	r2, [r5, #8]
 8016e2c:	60eb      	str	r3, [r5, #12]
 8016e2e:	cc03      	ldmia	r4!, {r0, r1}
 8016e30:	6128      	str	r0, [r5, #16]
 8016e32:	6169      	str	r1, [r5, #20]
 8016e34:	7823      	ldrb	r3, [r4, #0]
 8016e36:	762b      	strb	r3, [r5, #24]
			p->moveSize = 9;
 8016e38:	687b      	ldr	r3, [r7, #4]
 8016e3a:	2209      	movs	r2, #9
 8016e3c:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"G,E,H,H,C,F,C,E,D");
 8016e3e:	687b      	ldr	r3, [r7, #4]
 8016e40:	3340      	adds	r3, #64	; 0x40
 8016e42:	4a74      	ldr	r2, [pc, #464]	; (8017014 <problem_fetch+0x15cf4>)
 8016e44:	461d      	mov	r5, r3
 8016e46:	4614      	mov	r4, r2
 8016e48:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8016e4a:	6028      	str	r0, [r5, #0]
 8016e4c:	6069      	str	r1, [r5, #4]
 8016e4e:	60aa      	str	r2, [r5, #8]
 8016e50:	60eb      	str	r3, [r5, #12]
 8016e52:	8823      	ldrh	r3, [r4, #0]
 8016e54:	822b      	strh	r3, [r5, #16]
			strcpy(p->moveNumbers,"4,6,8,10,8,11,13,16,18");
 8016e56:	687b      	ldr	r3, [r7, #4]
 8016e58:	3304      	adds	r3, #4
 8016e5a:	4a6f      	ldr	r2, [pc, #444]	; (8017018 <problem_fetch+0x15cf8>)
 8016e5c:	461c      	mov	r4, r3
 8016e5e:	4615      	mov	r5, r2
 8016e60:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8016e62:	6020      	str	r0, [r4, #0]
 8016e64:	6061      	str	r1, [r4, #4]
 8016e66:	60a2      	str	r2, [r4, #8]
 8016e68:	60e3      	str	r3, [r4, #12]
 8016e6a:	6828      	ldr	r0, [r5, #0]
 8016e6c:	6120      	str	r0, [r4, #16]
 8016e6e:	88ab      	ldrh	r3, [r5, #4]
 8016e70:	79aa      	ldrb	r2, [r5, #6]
 8016e72:	82a3      	strh	r3, [r4, #20]
 8016e74:	4613      	mov	r3, r2
 8016e76:	75a3      	strb	r3, [r4, #22]
			strcpy(p->startFinish, "s,s,d,d,d,d,d,d,e");
 8016e78:	687b      	ldr	r3, [r7, #4]
 8016e7a:	33d8      	adds	r3, #216	; 0xd8
 8016e7c:	4a67      	ldr	r2, [pc, #412]	; (801701c <problem_fetch+0x15cfc>)
 8016e7e:	461d      	mov	r5, r3
 8016e80:	4614      	mov	r4, r2
 8016e82:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8016e84:	6028      	str	r0, [r5, #0]
 8016e86:	6069      	str	r1, [r5, #4]
 8016e88:	60aa      	str	r2, [r5, #8]
 8016e8a:	60eb      	str	r3, [r5, #12]
 8016e8c:	8823      	ldrh	r3, [r4, #0]
 8016e8e:	822b      	strh	r3, [r5, #16]
			strcpy(p->grade, "6B+");
 8016e90:	687b      	ldr	r3, [r7, #4]
 8016e92:	33cc      	adds	r3, #204	; 0xcc
 8016e94:	4a59      	ldr	r2, [pc, #356]	; (8016ffc <problem_fetch+0x15cdc>)
 8016e96:	6810      	ldr	r0, [r2, #0]
 8016e98:	6018      	str	r0, [r3, #0]
			break;
 8016e9a:	f003 bf87 	b.w	801adac <problem_fetch+0x19a8c>
		case 71 :
			strcpy(p->name,"BUIONE");
 8016e9e:	687b      	ldr	r3, [r7, #4]
 8016ea0:	337c      	adds	r3, #124	; 0x7c
 8016ea2:	4a5f      	ldr	r2, [pc, #380]	; (8017020 <problem_fetch+0x15d00>)
 8016ea4:	6810      	ldr	r0, [r2, #0]
 8016ea6:	6018      	str	r0, [r3, #0]
 8016ea8:	8891      	ldrh	r1, [r2, #4]
 8016eaa:	7992      	ldrb	r2, [r2, #6]
 8016eac:	8099      	strh	r1, [r3, #4]
 8016eae:	719a      	strb	r2, [r3, #6]
			p->moveSize = 6;
 8016eb0:	687b      	ldr	r3, [r7, #4]
 8016eb2:	2206      	movs	r2, #6
 8016eb4:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"J,H,E,E,B,A");
 8016eb6:	687b      	ldr	r3, [r7, #4]
 8016eb8:	3340      	adds	r3, #64	; 0x40
 8016eba:	4a5a      	ldr	r2, [pc, #360]	; (8017024 <problem_fetch+0x15d04>)
 8016ebc:	461c      	mov	r4, r3
 8016ebe:	4613      	mov	r3, r2
 8016ec0:	cb07      	ldmia	r3!, {r0, r1, r2}
 8016ec2:	6020      	str	r0, [r4, #0]
 8016ec4:	6061      	str	r1, [r4, #4]
 8016ec6:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,8,9,12,15,18");
 8016ec8:	687b      	ldr	r3, [r7, #4]
 8016eca:	3304      	adds	r3, #4
 8016ecc:	4a56      	ldr	r2, [pc, #344]	; (8017028 <problem_fetch+0x15d08>)
 8016ece:	461c      	mov	r4, r3
 8016ed0:	4613      	mov	r3, r2
 8016ed2:	cb07      	ldmia	r3!, {r0, r1, r2}
 8016ed4:	6020      	str	r0, [r4, #0]
 8016ed6:	6061      	str	r1, [r4, #4]
 8016ed8:	60a2      	str	r2, [r4, #8]
 8016eda:	881a      	ldrh	r2, [r3, #0]
 8016edc:	789b      	ldrb	r3, [r3, #2]
 8016ede:	81a2      	strh	r2, [r4, #12]
 8016ee0:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish, "s,d,d,d,d,e");
 8016ee2:	687b      	ldr	r3, [r7, #4]
 8016ee4:	33d8      	adds	r3, #216	; 0xd8
 8016ee6:	4a51      	ldr	r2, [pc, #324]	; (801702c <problem_fetch+0x15d0c>)
 8016ee8:	461c      	mov	r4, r3
 8016eea:	4613      	mov	r3, r2
 8016eec:	cb07      	ldmia	r3!, {r0, r1, r2}
 8016eee:	6020      	str	r0, [r4, #0]
 8016ef0:	6061      	str	r1, [r4, #4]
 8016ef2:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade, "7A");
 8016ef4:	687b      	ldr	r3, [r7, #4]
 8016ef6:	33cc      	adds	r3, #204	; 0xcc
 8016ef8:	4a3b      	ldr	r2, [pc, #236]	; (8016fe8 <problem_fetch+0x15cc8>)
 8016efa:	8811      	ldrh	r1, [r2, #0]
 8016efc:	7892      	ldrb	r2, [r2, #2]
 8016efe:	8019      	strh	r1, [r3, #0]
 8016f00:	709a      	strb	r2, [r3, #2]
			break;
 8016f02:	f003 bf53 	b.w	801adac <problem_fetch+0x19a8c>
		case 710 :
			strcpy(p->name,"CERBERO");
 8016f06:	687b      	ldr	r3, [r7, #4]
 8016f08:	337c      	adds	r3, #124	; 0x7c
 8016f0a:	4949      	ldr	r1, [pc, #292]	; (8017030 <problem_fetch+0x15d10>)
 8016f0c:	461a      	mov	r2, r3
 8016f0e:	460b      	mov	r3, r1
 8016f10:	cb03      	ldmia	r3!, {r0, r1}
 8016f12:	6010      	str	r0, [r2, #0]
 8016f14:	6051      	str	r1, [r2, #4]
			p->moveSize = 5;
 8016f16:	687b      	ldr	r3, [r7, #4]
 8016f18:	2205      	movs	r2, #5
 8016f1a:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"G,I,H,K,I");
 8016f1c:	687b      	ldr	r3, [r7, #4]
 8016f1e:	3340      	adds	r3, #64	; 0x40
 8016f20:	4944      	ldr	r1, [pc, #272]	; (8017034 <problem_fetch+0x15d14>)
 8016f22:	461a      	mov	r2, r3
 8016f24:	460b      	mov	r3, r1
 8016f26:	cb03      	ldmia	r3!, {r0, r1}
 8016f28:	6010      	str	r0, [r2, #0]
 8016f2a:	6051      	str	r1, [r2, #4]
 8016f2c:	881b      	ldrh	r3, [r3, #0]
 8016f2e:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"4,10,12,14,18");
 8016f30:	687b      	ldr	r3, [r7, #4]
 8016f32:	3304      	adds	r3, #4
 8016f34:	4a40      	ldr	r2, [pc, #256]	; (8017038 <problem_fetch+0x15d18>)
 8016f36:	461c      	mov	r4, r3
 8016f38:	4613      	mov	r3, r2
 8016f3a:	cb07      	ldmia	r3!, {r0, r1, r2}
 8016f3c:	6020      	str	r0, [r4, #0]
 8016f3e:	6061      	str	r1, [r4, #4]
 8016f40:	60a2      	str	r2, [r4, #8]
 8016f42:	881b      	ldrh	r3, [r3, #0]
 8016f44:	81a3      	strh	r3, [r4, #12]
			strcpy(p->startFinish, "s,d,d,d,e");
 8016f46:	687b      	ldr	r3, [r7, #4]
 8016f48:	33d8      	adds	r3, #216	; 0xd8
 8016f4a:	493c      	ldr	r1, [pc, #240]	; (801703c <problem_fetch+0x15d1c>)
 8016f4c:	461a      	mov	r2, r3
 8016f4e:	460b      	mov	r3, r1
 8016f50:	cb03      	ldmia	r3!, {r0, r1}
 8016f52:	6010      	str	r0, [r2, #0]
 8016f54:	6051      	str	r1, [r2, #4]
 8016f56:	881b      	ldrh	r3, [r3, #0]
 8016f58:	8113      	strh	r3, [r2, #8]
			strcpy(p->grade, "7A");
 8016f5a:	687b      	ldr	r3, [r7, #4]
 8016f5c:	33cc      	adds	r3, #204	; 0xcc
 8016f5e:	4a22      	ldr	r2, [pc, #136]	; (8016fe8 <problem_fetch+0x15cc8>)
 8016f60:	8811      	ldrh	r1, [r2, #0]
 8016f62:	7892      	ldrb	r2, [r2, #2]
 8016f64:	8019      	strh	r1, [r3, #0]
 8016f66:	709a      	strb	r2, [r3, #2]
			break;
 8016f68:	f003 bf20 	b.w	801adac <problem_fetch+0x19a8c>
		case 711 :
			strcpy(p->name,"COW FUNK");
 8016f6c:	687b      	ldr	r3, [r7, #4]
 8016f6e:	337c      	adds	r3, #124	; 0x7c
 8016f70:	4933      	ldr	r1, [pc, #204]	; (8017040 <problem_fetch+0x15d20>)
 8016f72:	461a      	mov	r2, r3
 8016f74:	460b      	mov	r3, r1
 8016f76:	cb03      	ldmia	r3!, {r0, r1}
 8016f78:	6010      	str	r0, [r2, #0]
 8016f7a:	6051      	str	r1, [r2, #4]
 8016f7c:	781b      	ldrb	r3, [r3, #0]
 8016f7e:	7213      	strb	r3, [r2, #8]
			p->moveSize = 7;
 8016f80:	687b      	ldr	r3, [r7, #4]
 8016f82:	2207      	movs	r2, #7
 8016f84:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"G,E,E,A,E,A,D");
 8016f86:	687b      	ldr	r3, [r7, #4]
 8016f88:	3340      	adds	r3, #64	; 0x40
 8016f8a:	4a2e      	ldr	r2, [pc, #184]	; (8017044 <problem_fetch+0x15d24>)
 8016f8c:	461c      	mov	r4, r3
 8016f8e:	4613      	mov	r3, r2
 8016f90:	cb07      	ldmia	r3!, {r0, r1, r2}
 8016f92:	6020      	str	r0, [r4, #0]
 8016f94:	6061      	str	r1, [r4, #4]
 8016f96:	60a2      	str	r2, [r4, #8]
 8016f98:	881b      	ldrh	r3, [r3, #0]
 8016f9a:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,6,8,9,12,14,18");
 8016f9c:	687b      	ldr	r3, [r7, #4]
 8016f9e:	3304      	adds	r3, #4
 8016fa0:	4a29      	ldr	r2, [pc, #164]	; (8017048 <problem_fetch+0x15d28>)
 8016fa2:	461d      	mov	r5, r3
 8016fa4:	4614      	mov	r4, r2
 8016fa6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8016fa8:	6028      	str	r0, [r5, #0]
 8016faa:	6069      	str	r1, [r5, #4]
 8016fac:	60aa      	str	r2, [r5, #8]
 8016fae:	60eb      	str	r3, [r5, #12]
 8016fb0:	7823      	ldrb	r3, [r4, #0]
 8016fb2:	742b      	strb	r3, [r5, #16]
			strcpy(p->startFinish, "s,d,d,d,d,d,e");
 8016fb4:	687b      	ldr	r3, [r7, #4]
 8016fb6:	33d8      	adds	r3, #216	; 0xd8
 8016fb8:	4a0a      	ldr	r2, [pc, #40]	; (8016fe4 <problem_fetch+0x15cc4>)
 8016fba:	461c      	mov	r4, r3
 8016fbc:	4613      	mov	r3, r2
 8016fbe:	cb07      	ldmia	r3!, {r0, r1, r2}
 8016fc0:	6020      	str	r0, [r4, #0]
 8016fc2:	6061      	str	r1, [r4, #4]
 8016fc4:	60a2      	str	r2, [r4, #8]
 8016fc6:	881b      	ldrh	r3, [r3, #0]
 8016fc8:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade, "6B+");
 8016fca:	687b      	ldr	r3, [r7, #4]
 8016fcc:	33cc      	adds	r3, #204	; 0xcc
 8016fce:	4a0b      	ldr	r2, [pc, #44]	; (8016ffc <problem_fetch+0x15cdc>)
 8016fd0:	6810      	ldr	r0, [r2, #0]
 8016fd2:	6018      	str	r0, [r3, #0]
			break;
 8016fd4:	f003 beea 	b.w	801adac <problem_fetch+0x19a8c>
 8016fd8:	08029090 	.word	0x08029090
 8016fdc:	08029098 	.word	0x08029098
 8016fe0:	080290a8 	.word	0x080290a8
 8016fe4:	08021494 	.word	0x08021494
 8016fe8:	080212f4 	.word	0x080212f4
 8016fec:	080290bc 	.word	0x080290bc
 8016ff0:	080290c4 	.word	0x080290c4
 8016ff4:	080290d8 	.word	0x080290d8
 8016ff8:	080286f0 	.word	0x080286f0
 8016ffc:	080212b0 	.word	0x080212b0
 8017000:	080290f0 	.word	0x080290f0
 8017004:	080290fc 	.word	0x080290fc
 8017008:	08029108 	.word	0x08029108
 801700c:	08021910 	.word	0x08021910
 8017010:	08029118 	.word	0x08029118
 8017014:	08029134 	.word	0x08029134
 8017018:	08029148 	.word	0x08029148
 801701c:	0802187c 	.word	0x0802187c
 8017020:	08029160 	.word	0x08029160
 8017024:	08029168 	.word	0x08029168
 8017028:	08022558 	.word	0x08022558
 801702c:	0802139c 	.word	0x0802139c
 8017030:	08029174 	.word	0x08029174
 8017034:	0802917c 	.word	0x0802917c
 8017038:	08029188 	.word	0x08029188
 801703c:	08021320 	.word	0x08021320
 8017040:	08029198 	.word	0x08029198
 8017044:	080291a4 	.word	0x080291a4
 8017048:	080291b4 	.word	0x080291b4
		case 712 :
			strcpy(p->name,"MOMOGO");
 801704c:	687b      	ldr	r3, [r7, #4]
 801704e:	337c      	adds	r3, #124	; 0x7c
 8017050:	4ac0      	ldr	r2, [pc, #768]	; (8017354 <problem_fetch+0x16034>)
 8017052:	6810      	ldr	r0, [r2, #0]
 8017054:	6018      	str	r0, [r3, #0]
 8017056:	8891      	ldrh	r1, [r2, #4]
 8017058:	7992      	ldrb	r2, [r2, #6]
 801705a:	8099      	strh	r1, [r3, #4]
 801705c:	719a      	strb	r2, [r3, #6]
			p->moveSize = 9;
 801705e:	687b      	ldr	r3, [r7, #4]
 8017060:	2209      	movs	r2, #9
 8017062:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"J,H,K,I,J,F,I,H,I");
 8017064:	687b      	ldr	r3, [r7, #4]
 8017066:	3340      	adds	r3, #64	; 0x40
 8017068:	4abb      	ldr	r2, [pc, #748]	; (8017358 <problem_fetch+0x16038>)
 801706a:	461d      	mov	r5, r3
 801706c:	4614      	mov	r4, r2
 801706e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8017070:	6028      	str	r0, [r5, #0]
 8017072:	6069      	str	r1, [r5, #4]
 8017074:	60aa      	str	r2, [r5, #8]
 8017076:	60eb      	str	r3, [r5, #12]
 8017078:	8823      	ldrh	r3, [r4, #0]
 801707a:	822b      	strh	r3, [r5, #16]
			strcpy(p->moveNumbers,"5,5,9,10,12,13,14,16,18");
 801707c:	687b      	ldr	r3, [r7, #4]
 801707e:	3304      	adds	r3, #4
 8017080:	4ab6      	ldr	r2, [pc, #728]	; (801735c <problem_fetch+0x1603c>)
 8017082:	461d      	mov	r5, r3
 8017084:	4614      	mov	r4, r2
 8017086:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8017088:	6028      	str	r0, [r5, #0]
 801708a:	6069      	str	r1, [r5, #4]
 801708c:	60aa      	str	r2, [r5, #8]
 801708e:	60eb      	str	r3, [r5, #12]
 8017090:	cc03      	ldmia	r4!, {r0, r1}
 8017092:	6128      	str	r0, [r5, #16]
 8017094:	6169      	str	r1, [r5, #20]
			strcpy(p->startFinish, "s,s,d,d,d,d,d,d,e");
 8017096:	687b      	ldr	r3, [r7, #4]
 8017098:	33d8      	adds	r3, #216	; 0xd8
 801709a:	4ab1      	ldr	r2, [pc, #708]	; (8017360 <problem_fetch+0x16040>)
 801709c:	461d      	mov	r5, r3
 801709e:	4614      	mov	r4, r2
 80170a0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80170a2:	6028      	str	r0, [r5, #0]
 80170a4:	6069      	str	r1, [r5, #4]
 80170a6:	60aa      	str	r2, [r5, #8]
 80170a8:	60eb      	str	r3, [r5, #12]
 80170aa:	8823      	ldrh	r3, [r4, #0]
 80170ac:	822b      	strh	r3, [r5, #16]
			strcpy(p->grade, "6B+");
 80170ae:	687b      	ldr	r3, [r7, #4]
 80170b0:	33cc      	adds	r3, #204	; 0xcc
 80170b2:	4aac      	ldr	r2, [pc, #688]	; (8017364 <problem_fetch+0x16044>)
 80170b4:	6810      	ldr	r0, [r2, #0]
 80170b6:	6018      	str	r0, [r3, #0]
			break;
 80170b8:	f003 be78 	b.w	801adac <problem_fetch+0x19a8c>
		case 713 :
			strcpy(p->name,"LITTLE DIDDY");
 80170bc:	687b      	ldr	r3, [r7, #4]
 80170be:	337c      	adds	r3, #124	; 0x7c
 80170c0:	4aa9      	ldr	r2, [pc, #676]	; (8017368 <problem_fetch+0x16048>)
 80170c2:	461c      	mov	r4, r3
 80170c4:	4613      	mov	r3, r2
 80170c6:	cb07      	ldmia	r3!, {r0, r1, r2}
 80170c8:	6020      	str	r0, [r4, #0]
 80170ca:	6061      	str	r1, [r4, #4]
 80170cc:	60a2      	str	r2, [r4, #8]
 80170ce:	781b      	ldrb	r3, [r3, #0]
 80170d0:	7323      	strb	r3, [r4, #12]
			p->moveSize = 10;
 80170d2:	687b      	ldr	r3, [r7, #4]
 80170d4:	220a      	movs	r2, #10
 80170d6:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"C,D,A,D,B,F,J,K,J,I");
 80170d8:	687b      	ldr	r3, [r7, #4]
 80170da:	3340      	adds	r3, #64	; 0x40
 80170dc:	4aa3      	ldr	r2, [pc, #652]	; (801736c <problem_fetch+0x1604c>)
 80170de:	461d      	mov	r5, r3
 80170e0:	4614      	mov	r4, r2
 80170e2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80170e4:	6028      	str	r0, [r5, #0]
 80170e6:	6069      	str	r1, [r5, #4]
 80170e8:	60aa      	str	r2, [r5, #8]
 80170ea:	60eb      	str	r3, [r5, #12]
 80170ec:	6820      	ldr	r0, [r4, #0]
 80170ee:	6128      	str	r0, [r5, #16]
			strcpy(p->moveNumbers,"5,7,9,11,12,13,12,9,16,18");
 80170f0:	687b      	ldr	r3, [r7, #4]
 80170f2:	3304      	adds	r3, #4
 80170f4:	4a9e      	ldr	r2, [pc, #632]	; (8017370 <problem_fetch+0x16050>)
 80170f6:	461d      	mov	r5, r3
 80170f8:	4614      	mov	r4, r2
 80170fa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80170fc:	6028      	str	r0, [r5, #0]
 80170fe:	6069      	str	r1, [r5, #4]
 8017100:	60aa      	str	r2, [r5, #8]
 8017102:	60eb      	str	r3, [r5, #12]
 8017104:	cc03      	ldmia	r4!, {r0, r1}
 8017106:	6128      	str	r0, [r5, #16]
 8017108:	6169      	str	r1, [r5, #20]
 801710a:	8823      	ldrh	r3, [r4, #0]
 801710c:	832b      	strh	r3, [r5, #24]
			strcpy(p->startFinish, "s,d,d,d,d,d,d,d,d,e");
 801710e:	687b      	ldr	r3, [r7, #4]
 8017110:	33d8      	adds	r3, #216	; 0xd8
 8017112:	4a98      	ldr	r2, [pc, #608]	; (8017374 <problem_fetch+0x16054>)
 8017114:	461d      	mov	r5, r3
 8017116:	4614      	mov	r4, r2
 8017118:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801711a:	6028      	str	r0, [r5, #0]
 801711c:	6069      	str	r1, [r5, #4]
 801711e:	60aa      	str	r2, [r5, #8]
 8017120:	60eb      	str	r3, [r5, #12]
 8017122:	6820      	ldr	r0, [r4, #0]
 8017124:	6128      	str	r0, [r5, #16]
			strcpy(p->grade, "7B+");
 8017126:	687b      	ldr	r3, [r7, #4]
 8017128:	33cc      	adds	r3, #204	; 0xcc
 801712a:	4a93      	ldr	r2, [pc, #588]	; (8017378 <problem_fetch+0x16058>)
 801712c:	6810      	ldr	r0, [r2, #0]
 801712e:	6018      	str	r0, [r3, #0]
			break;
 8017130:	f003 be3c 	b.w	801adac <problem_fetch+0x19a8c>
		case 714 :
			strcpy(p->name,"DARK MAGIC");
 8017134:	687b      	ldr	r3, [r7, #4]
 8017136:	337c      	adds	r3, #124	; 0x7c
 8017138:	4990      	ldr	r1, [pc, #576]	; (801737c <problem_fetch+0x1605c>)
 801713a:	461a      	mov	r2, r3
 801713c:	460b      	mov	r3, r1
 801713e:	cb03      	ldmia	r3!, {r0, r1}
 8017140:	6010      	str	r0, [r2, #0]
 8017142:	6051      	str	r1, [r2, #4]
 8017144:	8819      	ldrh	r1, [r3, #0]
 8017146:	789b      	ldrb	r3, [r3, #2]
 8017148:	8111      	strh	r1, [r2, #8]
 801714a:	7293      	strb	r3, [r2, #10]
			p->moveSize = 5;
 801714c:	687b      	ldr	r3, [r7, #4]
 801714e:	2205      	movs	r2, #5
 8017150:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"C,C,G,E,I");
 8017152:	687b      	ldr	r3, [r7, #4]
 8017154:	3340      	adds	r3, #64	; 0x40
 8017156:	498a      	ldr	r1, [pc, #552]	; (8017380 <problem_fetch+0x16060>)
 8017158:	461a      	mov	r2, r3
 801715a:	460b      	mov	r3, r1
 801715c:	cb03      	ldmia	r3!, {r0, r1}
 801715e:	6010      	str	r0, [r2, #0]
 8017160:	6051      	str	r1, [r2, #4]
 8017162:	881b      	ldrh	r3, [r3, #0]
 8017164:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"5,8,10,14,18");
 8017166:	687b      	ldr	r3, [r7, #4]
 8017168:	3304      	adds	r3, #4
 801716a:	4a86      	ldr	r2, [pc, #536]	; (8017384 <problem_fetch+0x16064>)
 801716c:	461c      	mov	r4, r3
 801716e:	4613      	mov	r3, r2
 8017170:	cb07      	ldmia	r3!, {r0, r1, r2}
 8017172:	6020      	str	r0, [r4, #0]
 8017174:	6061      	str	r1, [r4, #4]
 8017176:	60a2      	str	r2, [r4, #8]
 8017178:	781b      	ldrb	r3, [r3, #0]
 801717a:	7323      	strb	r3, [r4, #12]
			strcpy(p->startFinish, "s,d,d,d,e");
 801717c:	687b      	ldr	r3, [r7, #4]
 801717e:	33d8      	adds	r3, #216	; 0xd8
 8017180:	4981      	ldr	r1, [pc, #516]	; (8017388 <problem_fetch+0x16068>)
 8017182:	461a      	mov	r2, r3
 8017184:	460b      	mov	r3, r1
 8017186:	cb03      	ldmia	r3!, {r0, r1}
 8017188:	6010      	str	r0, [r2, #0]
 801718a:	6051      	str	r1, [r2, #4]
 801718c:	881b      	ldrh	r3, [r3, #0]
 801718e:	8113      	strh	r3, [r2, #8]
			strcpy(p->grade, "7B+");
 8017190:	687b      	ldr	r3, [r7, #4]
 8017192:	33cc      	adds	r3, #204	; 0xcc
 8017194:	4a78      	ldr	r2, [pc, #480]	; (8017378 <problem_fetch+0x16058>)
 8017196:	6810      	ldr	r0, [r2, #0]
 8017198:	6018      	str	r0, [r3, #0]
			break;
 801719a:	f003 be07 	b.w	801adac <problem_fetch+0x19a8c>
		case 715 :
			strcpy(p->name,"DURANGO TANGO");
 801719e:	687b      	ldr	r3, [r7, #4]
 80171a0:	337c      	adds	r3, #124	; 0x7c
 80171a2:	4a7a      	ldr	r2, [pc, #488]	; (801738c <problem_fetch+0x1606c>)
 80171a4:	461c      	mov	r4, r3
 80171a6:	4613      	mov	r3, r2
 80171a8:	cb07      	ldmia	r3!, {r0, r1, r2}
 80171aa:	6020      	str	r0, [r4, #0]
 80171ac:	6061      	str	r1, [r4, #4]
 80171ae:	60a2      	str	r2, [r4, #8]
 80171b0:	881b      	ldrh	r3, [r3, #0]
 80171b2:	81a3      	strh	r3, [r4, #12]
			p->moveSize = 7;
 80171b4:	687b      	ldr	r3, [r7, #4]
 80171b6:	2207      	movs	r2, #7
 80171b8:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"G,H,E,E,G,H,I");
 80171ba:	687b      	ldr	r3, [r7, #4]
 80171bc:	3340      	adds	r3, #64	; 0x40
 80171be:	4a74      	ldr	r2, [pc, #464]	; (8017390 <problem_fetch+0x16070>)
 80171c0:	461c      	mov	r4, r3
 80171c2:	4613      	mov	r3, r2
 80171c4:	cb07      	ldmia	r3!, {r0, r1, r2}
 80171c6:	6020      	str	r0, [r4, #0]
 80171c8:	6061      	str	r1, [r4, #4]
 80171ca:	60a2      	str	r2, [r4, #8]
 80171cc:	881b      	ldrh	r3, [r3, #0]
 80171ce:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,10,12,9,15,16,18");
 80171d0:	687b      	ldr	r3, [r7, #4]
 80171d2:	3304      	adds	r3, #4
 80171d4:	4a6f      	ldr	r2, [pc, #444]	; (8017394 <problem_fetch+0x16074>)
 80171d6:	461d      	mov	r5, r3
 80171d8:	4614      	mov	r4, r2
 80171da:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80171dc:	6028      	str	r0, [r5, #0]
 80171de:	6069      	str	r1, [r5, #4]
 80171e0:	60aa      	str	r2, [r5, #8]
 80171e2:	60eb      	str	r3, [r5, #12]
 80171e4:	8823      	ldrh	r3, [r4, #0]
 80171e6:	78a2      	ldrb	r2, [r4, #2]
 80171e8:	822b      	strh	r3, [r5, #16]
 80171ea:	4613      	mov	r3, r2
 80171ec:	74ab      	strb	r3, [r5, #18]
			strcpy(p->startFinish, "s,d,d,d,d,d,e");
 80171ee:	687b      	ldr	r3, [r7, #4]
 80171f0:	33d8      	adds	r3, #216	; 0xd8
 80171f2:	4a69      	ldr	r2, [pc, #420]	; (8017398 <problem_fetch+0x16078>)
 80171f4:	461c      	mov	r4, r3
 80171f6:	4613      	mov	r3, r2
 80171f8:	cb07      	ldmia	r3!, {r0, r1, r2}
 80171fa:	6020      	str	r0, [r4, #0]
 80171fc:	6061      	str	r1, [r4, #4]
 80171fe:	60a2      	str	r2, [r4, #8]
 8017200:	881b      	ldrh	r3, [r3, #0]
 8017202:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade, "6C+");
 8017204:	687b      	ldr	r3, [r7, #4]
 8017206:	33cc      	adds	r3, #204	; 0xcc
 8017208:	4a64      	ldr	r2, [pc, #400]	; (801739c <problem_fetch+0x1607c>)
 801720a:	6810      	ldr	r0, [r2, #0]
 801720c:	6018      	str	r0, [r3, #0]
			break;
 801720e:	f003 bdcd 	b.w	801adac <problem_fetch+0x19a8c>
		case 716 :
			strcpy(p->name,"BLACKER");
 8017212:	687b      	ldr	r3, [r7, #4]
 8017214:	337c      	adds	r3, #124	; 0x7c
 8017216:	4962      	ldr	r1, [pc, #392]	; (80173a0 <problem_fetch+0x16080>)
 8017218:	461a      	mov	r2, r3
 801721a:	460b      	mov	r3, r1
 801721c:	cb03      	ldmia	r3!, {r0, r1}
 801721e:	6010      	str	r0, [r2, #0]
 8017220:	6051      	str	r1, [r2, #4]
			p->moveSize = 6;
 8017222:	687b      	ldr	r3, [r7, #4]
 8017224:	2206      	movs	r2, #6
 8017226:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"H,G,H,C,H,D");
 8017228:	687b      	ldr	r3, [r7, #4]
 801722a:	3340      	adds	r3, #64	; 0x40
 801722c:	4a5d      	ldr	r2, [pc, #372]	; (80173a4 <problem_fetch+0x16084>)
 801722e:	461c      	mov	r4, r3
 8017230:	4613      	mov	r3, r2
 8017232:	cb07      	ldmia	r3!, {r0, r1, r2}
 8017234:	6020      	str	r0, [r4, #0]
 8017236:	6061      	str	r1, [r4, #4]
 8017238:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,4,10,13,16,18");
 801723a:	687b      	ldr	r3, [r7, #4]
 801723c:	3304      	adds	r3, #4
 801723e:	4a5a      	ldr	r2, [pc, #360]	; (80173a8 <problem_fetch+0x16088>)
 8017240:	461c      	mov	r4, r3
 8017242:	4615      	mov	r5, r2
 8017244:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8017246:	6020      	str	r0, [r4, #0]
 8017248:	6061      	str	r1, [r4, #4]
 801724a:	60a2      	str	r2, [r4, #8]
 801724c:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish, "s,s,d,d,d,e");
 801724e:	687b      	ldr	r3, [r7, #4]
 8017250:	33d8      	adds	r3, #216	; 0xd8
 8017252:	4a56      	ldr	r2, [pc, #344]	; (80173ac <problem_fetch+0x1608c>)
 8017254:	461c      	mov	r4, r3
 8017256:	4613      	mov	r3, r2
 8017258:	cb07      	ldmia	r3!, {r0, r1, r2}
 801725a:	6020      	str	r0, [r4, #0]
 801725c:	6061      	str	r1, [r4, #4]
 801725e:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade, "7A");
 8017260:	687b      	ldr	r3, [r7, #4]
 8017262:	33cc      	adds	r3, #204	; 0xcc
 8017264:	4a52      	ldr	r2, [pc, #328]	; (80173b0 <problem_fetch+0x16090>)
 8017266:	8811      	ldrh	r1, [r2, #0]
 8017268:	7892      	ldrb	r2, [r2, #2]
 801726a:	8019      	strh	r1, [r3, #0]
 801726c:	709a      	strb	r2, [r3, #2]
			break;
 801726e:	f003 bd9d 	b.w	801adac <problem_fetch+0x19a8c>
		case 717 :
			strcpy(p->name,"URBAN WALL");
 8017272:	687b      	ldr	r3, [r7, #4]
 8017274:	337c      	adds	r3, #124	; 0x7c
 8017276:	494f      	ldr	r1, [pc, #316]	; (80173b4 <problem_fetch+0x16094>)
 8017278:	461a      	mov	r2, r3
 801727a:	460b      	mov	r3, r1
 801727c:	cb03      	ldmia	r3!, {r0, r1}
 801727e:	6010      	str	r0, [r2, #0]
 8017280:	6051      	str	r1, [r2, #4]
 8017282:	8819      	ldrh	r1, [r3, #0]
 8017284:	789b      	ldrb	r3, [r3, #2]
 8017286:	8111      	strh	r1, [r2, #8]
 8017288:	7293      	strb	r3, [r2, #10]
			p->moveSize = 6;
 801728a:	687b      	ldr	r3, [r7, #4]
 801728c:	2206      	movs	r2, #6
 801728e:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"G,J,E,F,A,D");
 8017290:	687b      	ldr	r3, [r7, #4]
 8017292:	3340      	adds	r3, #64	; 0x40
 8017294:	4a48      	ldr	r2, [pc, #288]	; (80173b8 <problem_fetch+0x16098>)
 8017296:	461c      	mov	r4, r3
 8017298:	4613      	mov	r3, r2
 801729a:	cb07      	ldmia	r3!, {r0, r1, r2}
 801729c:	6020      	str	r0, [r4, #0]
 801729e:	6061      	str	r1, [r4, #4]
 80172a0:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,5,8,11,14,18");
 80172a2:	687b      	ldr	r3, [r7, #4]
 80172a4:	3304      	adds	r3, #4
 80172a6:	4a45      	ldr	r2, [pc, #276]	; (80173bc <problem_fetch+0x1609c>)
 80172a8:	461c      	mov	r4, r3
 80172aa:	4613      	mov	r3, r2
 80172ac:	cb07      	ldmia	r3!, {r0, r1, r2}
 80172ae:	6020      	str	r0, [r4, #0]
 80172b0:	6061      	str	r1, [r4, #4]
 80172b2:	60a2      	str	r2, [r4, #8]
 80172b4:	881a      	ldrh	r2, [r3, #0]
 80172b6:	789b      	ldrb	r3, [r3, #2]
 80172b8:	81a2      	strh	r2, [r4, #12]
 80172ba:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish, "s,s,d,d,d,e");
 80172bc:	687b      	ldr	r3, [r7, #4]
 80172be:	33d8      	adds	r3, #216	; 0xd8
 80172c0:	4a3a      	ldr	r2, [pc, #232]	; (80173ac <problem_fetch+0x1608c>)
 80172c2:	461c      	mov	r4, r3
 80172c4:	4613      	mov	r3, r2
 80172c6:	cb07      	ldmia	r3!, {r0, r1, r2}
 80172c8:	6020      	str	r0, [r4, #0]
 80172ca:	6061      	str	r1, [r4, #4]
 80172cc:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade, "6C");
 80172ce:	687b      	ldr	r3, [r7, #4]
 80172d0:	33cc      	adds	r3, #204	; 0xcc
 80172d2:	4a3b      	ldr	r2, [pc, #236]	; (80173c0 <problem_fetch+0x160a0>)
 80172d4:	8811      	ldrh	r1, [r2, #0]
 80172d6:	7892      	ldrb	r2, [r2, #2]
 80172d8:	8019      	strh	r1, [r3, #0]
 80172da:	709a      	strb	r2, [r3, #2]
			break;
 80172dc:	f003 bd66 	b.w	801adac <problem_fetch+0x19a8c>
		case 718 :
			strcpy(p->name,"GORILA");
 80172e0:	687b      	ldr	r3, [r7, #4]
 80172e2:	337c      	adds	r3, #124	; 0x7c
 80172e4:	4a37      	ldr	r2, [pc, #220]	; (80173c4 <problem_fetch+0x160a4>)
 80172e6:	6810      	ldr	r0, [r2, #0]
 80172e8:	6018      	str	r0, [r3, #0]
 80172ea:	8891      	ldrh	r1, [r2, #4]
 80172ec:	7992      	ldrb	r2, [r2, #6]
 80172ee:	8099      	strh	r1, [r3, #4]
 80172f0:	719a      	strb	r2, [r3, #6]
			p->moveSize = 7;
 80172f2:	687b      	ldr	r3, [r7, #4]
 80172f4:	2207      	movs	r2, #7
 80172f6:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"J,J,G,F,C,E,D");
 80172f8:	687b      	ldr	r3, [r7, #4]
 80172fa:	3340      	adds	r3, #64	; 0x40
 80172fc:	4a32      	ldr	r2, [pc, #200]	; (80173c8 <problem_fetch+0x160a8>)
 80172fe:	461c      	mov	r4, r3
 8017300:	4613      	mov	r3, r2
 8017302:	cb07      	ldmia	r3!, {r0, r1, r2}
 8017304:	6020      	str	r0, [r4, #0]
 8017306:	6061      	str	r1, [r4, #4]
 8017308:	60a2      	str	r2, [r4, #8]
 801730a:	881b      	ldrh	r3, [r3, #0]
 801730c:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,7,10,11,13,14,18");
 801730e:	687b      	ldr	r3, [r7, #4]
 8017310:	3304      	adds	r3, #4
 8017312:	4a2e      	ldr	r2, [pc, #184]	; (80173cc <problem_fetch+0x160ac>)
 8017314:	461d      	mov	r5, r3
 8017316:	4614      	mov	r4, r2
 8017318:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801731a:	6028      	str	r0, [r5, #0]
 801731c:	6069      	str	r1, [r5, #4]
 801731e:	60aa      	str	r2, [r5, #8]
 8017320:	60eb      	str	r3, [r5, #12]
 8017322:	8823      	ldrh	r3, [r4, #0]
 8017324:	78a2      	ldrb	r2, [r4, #2]
 8017326:	822b      	strh	r3, [r5, #16]
 8017328:	4613      	mov	r3, r2
 801732a:	74ab      	strb	r3, [r5, #18]
			strcpy(p->startFinish, "s,d,d,d,d,d,e");
 801732c:	687b      	ldr	r3, [r7, #4]
 801732e:	33d8      	adds	r3, #216	; 0xd8
 8017330:	4a19      	ldr	r2, [pc, #100]	; (8017398 <problem_fetch+0x16078>)
 8017332:	461c      	mov	r4, r3
 8017334:	4613      	mov	r3, r2
 8017336:	cb07      	ldmia	r3!, {r0, r1, r2}
 8017338:	6020      	str	r0, [r4, #0]
 801733a:	6061      	str	r1, [r4, #4]
 801733c:	60a2      	str	r2, [r4, #8]
 801733e:	881b      	ldrh	r3, [r3, #0]
 8017340:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade, "7B");
 8017342:	687b      	ldr	r3, [r7, #4]
 8017344:	33cc      	adds	r3, #204	; 0xcc
 8017346:	4a22      	ldr	r2, [pc, #136]	; (80173d0 <problem_fetch+0x160b0>)
 8017348:	8811      	ldrh	r1, [r2, #0]
 801734a:	7892      	ldrb	r2, [r2, #2]
 801734c:	8019      	strh	r1, [r3, #0]
 801734e:	709a      	strb	r2, [r3, #2]
			break;
 8017350:	f003 bd2c 	b.w	801adac <problem_fetch+0x19a8c>
 8017354:	080291c8 	.word	0x080291c8
 8017358:	080291d0 	.word	0x080291d0
 801735c:	080291e4 	.word	0x080291e4
 8017360:	0802187c 	.word	0x0802187c
 8017364:	080212b0 	.word	0x080212b0
 8017368:	080291fc 	.word	0x080291fc
 801736c:	0802920c 	.word	0x0802920c
 8017370:	08029220 	.word	0x08029220
 8017374:	08023410 	.word	0x08023410
 8017378:	08021848 	.word	0x08021848
 801737c:	0802923c 	.word	0x0802923c
 8017380:	08029248 	.word	0x08029248
 8017384:	08024388 	.word	0x08024388
 8017388:	08021320 	.word	0x08021320
 801738c:	08029254 	.word	0x08029254
 8017390:	08029264 	.word	0x08029264
 8017394:	08029274 	.word	0x08029274
 8017398:	08021494 	.word	0x08021494
 801739c:	080213a8 	.word	0x080213a8
 80173a0:	08029288 	.word	0x08029288
 80173a4:	08029290 	.word	0x08029290
 80173a8:	0802929c 	.word	0x0802929c
 80173ac:	08021910 	.word	0x08021910
 80173b0:	080212f4 	.word	0x080212f4
 80173b4:	080292ac 	.word	0x080292ac
 80173b8:	080292b8 	.word	0x080292b8
 80173bc:	080292c4 	.word	0x080292c4
 80173c0:	08021370 	.word	0x08021370
 80173c4:	080292d4 	.word	0x080292d4
 80173c8:	080292dc 	.word	0x080292dc
 80173cc:	080292ec 	.word	0x080292ec
 80173d0:	0802132c 	.word	0x0802132c
		case 719 :
			strcpy(p->name,"JA ICH BIN NOCH");
 80173d4:	687b      	ldr	r3, [r7, #4]
 80173d6:	337c      	adds	r3, #124	; 0x7c
 80173d8:	4ac0      	ldr	r2, [pc, #768]	; (80176dc <problem_fetch+0x163bc>)
 80173da:	461c      	mov	r4, r3
 80173dc:	4615      	mov	r5, r2
 80173de:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80173e0:	6020      	str	r0, [r4, #0]
 80173e2:	6061      	str	r1, [r4, #4]
 80173e4:	60a2      	str	r2, [r4, #8]
 80173e6:	60e3      	str	r3, [r4, #12]
			p->moveSize = 7;
 80173e8:	687b      	ldr	r3, [r7, #4]
 80173ea:	2207      	movs	r2, #7
 80173ec:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"H,E,G,E,E,E,I");
 80173ee:	687b      	ldr	r3, [r7, #4]
 80173f0:	3340      	adds	r3, #64	; 0x40
 80173f2:	4abb      	ldr	r2, [pc, #748]	; (80176e0 <problem_fetch+0x163c0>)
 80173f4:	461c      	mov	r4, r3
 80173f6:	4613      	mov	r3, r2
 80173f8:	cb07      	ldmia	r3!, {r0, r1, r2}
 80173fa:	6020      	str	r0, [r4, #0]
 80173fc:	6061      	str	r1, [r4, #4]
 80173fe:	60a2      	str	r2, [r4, #8]
 8017400:	881b      	ldrh	r3, [r3, #0]
 8017402:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,6,9,12,14,16,18");
 8017404:	687b      	ldr	r3, [r7, #4]
 8017406:	3304      	adds	r3, #4
 8017408:	4ab6      	ldr	r2, [pc, #728]	; (80176e4 <problem_fetch+0x163c4>)
 801740a:	461d      	mov	r5, r3
 801740c:	4614      	mov	r4, r2
 801740e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8017410:	6028      	str	r0, [r5, #0]
 8017412:	6069      	str	r1, [r5, #4]
 8017414:	60aa      	str	r2, [r5, #8]
 8017416:	60eb      	str	r3, [r5, #12]
 8017418:	8823      	ldrh	r3, [r4, #0]
 801741a:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish, "s,s,d,d,d,d,e");
 801741c:	687b      	ldr	r3, [r7, #4]
 801741e:	33d8      	adds	r3, #216	; 0xd8
 8017420:	4ab1      	ldr	r2, [pc, #708]	; (80176e8 <problem_fetch+0x163c8>)
 8017422:	461c      	mov	r4, r3
 8017424:	4613      	mov	r3, r2
 8017426:	cb07      	ldmia	r3!, {r0, r1, r2}
 8017428:	6020      	str	r0, [r4, #0]
 801742a:	6061      	str	r1, [r4, #4]
 801742c:	60a2      	str	r2, [r4, #8]
 801742e:	881b      	ldrh	r3, [r3, #0]
 8017430:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade, "6B+");
 8017432:	687b      	ldr	r3, [r7, #4]
 8017434:	33cc      	adds	r3, #204	; 0xcc
 8017436:	4aad      	ldr	r2, [pc, #692]	; (80176ec <problem_fetch+0x163cc>)
 8017438:	6810      	ldr	r0, [r2, #0]
 801743a:	6018      	str	r0, [r3, #0]
			break;
 801743c:	f003 bcb6 	b.w	801adac <problem_fetch+0x19a8c>
		case 72 :
			strcpy(p->name,"MAFFEI");
 8017440:	687b      	ldr	r3, [r7, #4]
 8017442:	337c      	adds	r3, #124	; 0x7c
 8017444:	4aaa      	ldr	r2, [pc, #680]	; (80176f0 <problem_fetch+0x163d0>)
 8017446:	6810      	ldr	r0, [r2, #0]
 8017448:	6018      	str	r0, [r3, #0]
 801744a:	8891      	ldrh	r1, [r2, #4]
 801744c:	7992      	ldrb	r2, [r2, #6]
 801744e:	8099      	strh	r1, [r3, #4]
 8017450:	719a      	strb	r2, [r3, #6]
			p->moveSize = 5;
 8017452:	687b      	ldr	r3, [r7, #4]
 8017454:	2205      	movs	r2, #5
 8017456:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"J,E,A,E,D");
 8017458:	687b      	ldr	r3, [r7, #4]
 801745a:	3340      	adds	r3, #64	; 0x40
 801745c:	49a5      	ldr	r1, [pc, #660]	; (80176f4 <problem_fetch+0x163d4>)
 801745e:	461a      	mov	r2, r3
 8017460:	460b      	mov	r3, r1
 8017462:	cb03      	ldmia	r3!, {r0, r1}
 8017464:	6010      	str	r0, [r2, #0]
 8017466:	6051      	str	r1, [r2, #4]
 8017468:	881b      	ldrh	r3, [r3, #0]
 801746a:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"5,12,14,8,18");
 801746c:	687b      	ldr	r3, [r7, #4]
 801746e:	3304      	adds	r3, #4
 8017470:	4aa1      	ldr	r2, [pc, #644]	; (80176f8 <problem_fetch+0x163d8>)
 8017472:	461c      	mov	r4, r3
 8017474:	4613      	mov	r3, r2
 8017476:	cb07      	ldmia	r3!, {r0, r1, r2}
 8017478:	6020      	str	r0, [r4, #0]
 801747a:	6061      	str	r1, [r4, #4]
 801747c:	60a2      	str	r2, [r4, #8]
 801747e:	781b      	ldrb	r3, [r3, #0]
 8017480:	7323      	strb	r3, [r4, #12]
			strcpy(p->startFinish, "s,d,d,d,e");
 8017482:	687b      	ldr	r3, [r7, #4]
 8017484:	33d8      	adds	r3, #216	; 0xd8
 8017486:	499d      	ldr	r1, [pc, #628]	; (80176fc <problem_fetch+0x163dc>)
 8017488:	461a      	mov	r2, r3
 801748a:	460b      	mov	r3, r1
 801748c:	cb03      	ldmia	r3!, {r0, r1}
 801748e:	6010      	str	r0, [r2, #0]
 8017490:	6051      	str	r1, [r2, #4]
 8017492:	881b      	ldrh	r3, [r3, #0]
 8017494:	8113      	strh	r3, [r2, #8]
			strcpy(p->grade, "6C");
 8017496:	687b      	ldr	r3, [r7, #4]
 8017498:	33cc      	adds	r3, #204	; 0xcc
 801749a:	4a99      	ldr	r2, [pc, #612]	; (8017700 <problem_fetch+0x163e0>)
 801749c:	8811      	ldrh	r1, [r2, #0]
 801749e:	7892      	ldrb	r2, [r2, #2]
 80174a0:	8019      	strh	r1, [r3, #0]
 80174a2:	709a      	strb	r2, [r3, #2]
			break;
 80174a4:	f003 bc82 	b.w	801adac <problem_fetch+0x19a8c>
		case 720 :
			strcpy(p->name,"BLACKBOARD");
 80174a8:	687b      	ldr	r3, [r7, #4]
 80174aa:	337c      	adds	r3, #124	; 0x7c
 80174ac:	4995      	ldr	r1, [pc, #596]	; (8017704 <problem_fetch+0x163e4>)
 80174ae:	461a      	mov	r2, r3
 80174b0:	460b      	mov	r3, r1
 80174b2:	cb03      	ldmia	r3!, {r0, r1}
 80174b4:	6010      	str	r0, [r2, #0]
 80174b6:	6051      	str	r1, [r2, #4]
 80174b8:	8819      	ldrh	r1, [r3, #0]
 80174ba:	789b      	ldrb	r3, [r3, #2]
 80174bc:	8111      	strh	r1, [r2, #8]
 80174be:	7293      	strb	r3, [r2, #10]
			p->moveSize = 10;
 80174c0:	687b      	ldr	r3, [r7, #4]
 80174c2:	220a      	movs	r2, #10
 80174c4:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"B,C,H,G,K,J,K,H,G,D");
 80174c6:	687b      	ldr	r3, [r7, #4]
 80174c8:	3340      	adds	r3, #64	; 0x40
 80174ca:	4a8f      	ldr	r2, [pc, #572]	; (8017708 <problem_fetch+0x163e8>)
 80174cc:	461d      	mov	r5, r3
 80174ce:	4614      	mov	r4, r2
 80174d0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80174d2:	6028      	str	r0, [r5, #0]
 80174d4:	6069      	str	r1, [r5, #4]
 80174d6:	60aa      	str	r2, [r5, #8]
 80174d8:	60eb      	str	r3, [r5, #12]
 80174da:	6820      	ldr	r0, [r4, #0]
 80174dc:	6128      	str	r0, [r5, #16]
			strcpy(p->moveNumbers,"6,5,5,6,9,13,16,16,17,18");
 80174de:	687b      	ldr	r3, [r7, #4]
 80174e0:	3304      	adds	r3, #4
 80174e2:	4a8a      	ldr	r2, [pc, #552]	; (801770c <problem_fetch+0x163ec>)
 80174e4:	461d      	mov	r5, r3
 80174e6:	4614      	mov	r4, r2
 80174e8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80174ea:	6028      	str	r0, [r5, #0]
 80174ec:	6069      	str	r1, [r5, #4]
 80174ee:	60aa      	str	r2, [r5, #8]
 80174f0:	60eb      	str	r3, [r5, #12]
 80174f2:	cc03      	ldmia	r4!, {r0, r1}
 80174f4:	6128      	str	r0, [r5, #16]
 80174f6:	6169      	str	r1, [r5, #20]
 80174f8:	7823      	ldrb	r3, [r4, #0]
 80174fa:	762b      	strb	r3, [r5, #24]
			strcpy(p->startFinish, "s,s,d,d,d,d,d,d,d,e");
 80174fc:	687b      	ldr	r3, [r7, #4]
 80174fe:	33d8      	adds	r3, #216	; 0xd8
 8017500:	4a83      	ldr	r2, [pc, #524]	; (8017710 <problem_fetch+0x163f0>)
 8017502:	461d      	mov	r5, r3
 8017504:	4614      	mov	r4, r2
 8017506:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8017508:	6028      	str	r0, [r5, #0]
 801750a:	6069      	str	r1, [r5, #4]
 801750c:	60aa      	str	r2, [r5, #8]
 801750e:	60eb      	str	r3, [r5, #12]
 8017510:	6820      	ldr	r0, [r4, #0]
 8017512:	6128      	str	r0, [r5, #16]
			strcpy(p->grade, "7A");
 8017514:	687b      	ldr	r3, [r7, #4]
 8017516:	33cc      	adds	r3, #204	; 0xcc
 8017518:	4a7e      	ldr	r2, [pc, #504]	; (8017714 <problem_fetch+0x163f4>)
 801751a:	8811      	ldrh	r1, [r2, #0]
 801751c:	7892      	ldrb	r2, [r2, #2]
 801751e:	8019      	strh	r1, [r3, #0]
 8017520:	709a      	strb	r2, [r3, #2]
			break;
 8017522:	f003 bc43 	b.w	801adac <problem_fetch+0x19a8c>
		case 721 :
			strcpy(p->name,"BLACK 1");
 8017526:	687b      	ldr	r3, [r7, #4]
 8017528:	337c      	adds	r3, #124	; 0x7c
 801752a:	497b      	ldr	r1, [pc, #492]	; (8017718 <problem_fetch+0x163f8>)
 801752c:	461a      	mov	r2, r3
 801752e:	460b      	mov	r3, r1
 8017530:	cb03      	ldmia	r3!, {r0, r1}
 8017532:	6010      	str	r0, [r2, #0]
 8017534:	6051      	str	r1, [r2, #4]
			p->moveSize = 7;
 8017536:	687b      	ldr	r3, [r7, #4]
 8017538:	2207      	movs	r2, #7
 801753a:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"D,E,G,B,B,A,D");
 801753c:	687b      	ldr	r3, [r7, #4]
 801753e:	3340      	adds	r3, #64	; 0x40
 8017540:	4a76      	ldr	r2, [pc, #472]	; (801771c <problem_fetch+0x163fc>)
 8017542:	461c      	mov	r4, r3
 8017544:	4613      	mov	r3, r2
 8017546:	cb07      	ldmia	r3!, {r0, r1, r2}
 8017548:	6020      	str	r0, [r4, #0]
 801754a:	6061      	str	r1, [r4, #4]
 801754c:	60a2      	str	r2, [r4, #8]
 801754e:	881b      	ldrh	r3, [r3, #0]
 8017550:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"7,8,4,10,12,14,18");
 8017552:	687b      	ldr	r3, [r7, #4]
 8017554:	3304      	adds	r3, #4
 8017556:	4a72      	ldr	r2, [pc, #456]	; (8017720 <problem_fetch+0x16400>)
 8017558:	461d      	mov	r5, r3
 801755a:	4614      	mov	r4, r2
 801755c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801755e:	6028      	str	r0, [r5, #0]
 8017560:	6069      	str	r1, [r5, #4]
 8017562:	60aa      	str	r2, [r5, #8]
 8017564:	60eb      	str	r3, [r5, #12]
 8017566:	8823      	ldrh	r3, [r4, #0]
 8017568:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish, "d,d,s,d,d,d,e");
 801756a:	687b      	ldr	r3, [r7, #4]
 801756c:	33d8      	adds	r3, #216	; 0xd8
 801756e:	4a6d      	ldr	r2, [pc, #436]	; (8017724 <problem_fetch+0x16404>)
 8017570:	461c      	mov	r4, r3
 8017572:	4613      	mov	r3, r2
 8017574:	cb07      	ldmia	r3!, {r0, r1, r2}
 8017576:	6020      	str	r0, [r4, #0]
 8017578:	6061      	str	r1, [r4, #4]
 801757a:	60a2      	str	r2, [r4, #8]
 801757c:	881b      	ldrh	r3, [r3, #0]
 801757e:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade, "6B+");
 8017580:	687b      	ldr	r3, [r7, #4]
 8017582:	33cc      	adds	r3, #204	; 0xcc
 8017584:	4a59      	ldr	r2, [pc, #356]	; (80176ec <problem_fetch+0x163cc>)
 8017586:	6810      	ldr	r0, [r2, #0]
 8017588:	6018      	str	r0, [r3, #0]
			break;
 801758a:	f003 bc0f 	b.w	801adac <problem_fetch+0x19a8c>
		case 722 :
			strcpy(p->name,"BLACK 1.1");
 801758e:	687b      	ldr	r3, [r7, #4]
 8017590:	337c      	adds	r3, #124	; 0x7c
 8017592:	4965      	ldr	r1, [pc, #404]	; (8017728 <problem_fetch+0x16408>)
 8017594:	461a      	mov	r2, r3
 8017596:	460b      	mov	r3, r1
 8017598:	cb03      	ldmia	r3!, {r0, r1}
 801759a:	6010      	str	r0, [r2, #0]
 801759c:	6051      	str	r1, [r2, #4]
 801759e:	881b      	ldrh	r3, [r3, #0]
 80175a0:	8113      	strh	r3, [r2, #8]
			p->moveSize = 7;
 80175a2:	687b      	ldr	r3, [r7, #4]
 80175a4:	2207      	movs	r2, #7
 80175a6:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"G,J,K,H,I,E,D");
 80175a8:	687b      	ldr	r3, [r7, #4]
 80175aa:	3340      	adds	r3, #64	; 0x40
 80175ac:	4a5f      	ldr	r2, [pc, #380]	; (801772c <problem_fetch+0x1640c>)
 80175ae:	461c      	mov	r4, r3
 80175b0:	4613      	mov	r3, r2
 80175b2:	cb07      	ldmia	r3!, {r0, r1, r2}
 80175b4:	6020      	str	r0, [r4, #0]
 80175b6:	6061      	str	r1, [r4, #4]
 80175b8:	60a2      	str	r2, [r4, #8]
 80175ba:	881b      	ldrh	r3, [r3, #0]
 80175bc:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"6,5,9,12,14,14,18");
 80175be:	687b      	ldr	r3, [r7, #4]
 80175c0:	3304      	adds	r3, #4
 80175c2:	4a5b      	ldr	r2, [pc, #364]	; (8017730 <problem_fetch+0x16410>)
 80175c4:	461d      	mov	r5, r3
 80175c6:	4614      	mov	r4, r2
 80175c8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80175ca:	6028      	str	r0, [r5, #0]
 80175cc:	6069      	str	r1, [r5, #4]
 80175ce:	60aa      	str	r2, [r5, #8]
 80175d0:	60eb      	str	r3, [r5, #12]
 80175d2:	8823      	ldrh	r3, [r4, #0]
 80175d4:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish, "s,s,d,d,d,d,e");
 80175d6:	687b      	ldr	r3, [r7, #4]
 80175d8:	33d8      	adds	r3, #216	; 0xd8
 80175da:	4a43      	ldr	r2, [pc, #268]	; (80176e8 <problem_fetch+0x163c8>)
 80175dc:	461c      	mov	r4, r3
 80175de:	4613      	mov	r3, r2
 80175e0:	cb07      	ldmia	r3!, {r0, r1, r2}
 80175e2:	6020      	str	r0, [r4, #0]
 80175e4:	6061      	str	r1, [r4, #4]
 80175e6:	60a2      	str	r2, [r4, #8]
 80175e8:	881b      	ldrh	r3, [r3, #0]
 80175ea:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade, "7A");
 80175ec:	687b      	ldr	r3, [r7, #4]
 80175ee:	33cc      	adds	r3, #204	; 0xcc
 80175f0:	4a48      	ldr	r2, [pc, #288]	; (8017714 <problem_fetch+0x163f4>)
 80175f2:	8811      	ldrh	r1, [r2, #0]
 80175f4:	7892      	ldrb	r2, [r2, #2]
 80175f6:	8019      	strh	r1, [r3, #0]
 80175f8:	709a      	strb	r2, [r3, #2]
			break;
 80175fa:	f003 bbd7 	b.w	801adac <problem_fetch+0x19a8c>
		case 723 :
			strcpy(p->name,"BLACK HORSE");
 80175fe:	687b      	ldr	r3, [r7, #4]
 8017600:	337c      	adds	r3, #124	; 0x7c
 8017602:	4a4c      	ldr	r2, [pc, #304]	; (8017734 <problem_fetch+0x16414>)
 8017604:	461c      	mov	r4, r3
 8017606:	4613      	mov	r3, r2
 8017608:	cb07      	ldmia	r3!, {r0, r1, r2}
 801760a:	6020      	str	r0, [r4, #0]
 801760c:	6061      	str	r1, [r4, #4]
 801760e:	60a2      	str	r2, [r4, #8]
			p->moveSize = 7;
 8017610:	687b      	ldr	r3, [r7, #4]
 8017612:	2207      	movs	r2, #7
 8017614:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"J,K,H,D,E,A,I");
 8017616:	687b      	ldr	r3, [r7, #4]
 8017618:	3340      	adds	r3, #64	; 0x40
 801761a:	4a47      	ldr	r2, [pc, #284]	; (8017738 <problem_fetch+0x16418>)
 801761c:	461c      	mov	r4, r3
 801761e:	4613      	mov	r3, r2
 8017620:	cb07      	ldmia	r3!, {r0, r1, r2}
 8017622:	6020      	str	r0, [r4, #0]
 8017624:	6061      	str	r1, [r4, #4]
 8017626:	60a2      	str	r2, [r4, #8]
 8017628:	881b      	ldrh	r3, [r3, #0]
 801762a:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,9,12,15,16,18,14");
 801762c:	687b      	ldr	r3, [r7, #4]
 801762e:	3304      	adds	r3, #4
 8017630:	4a42      	ldr	r2, [pc, #264]	; (801773c <problem_fetch+0x1641c>)
 8017632:	461d      	mov	r5, r3
 8017634:	4614      	mov	r4, r2
 8017636:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8017638:	6028      	str	r0, [r5, #0]
 801763a:	6069      	str	r1, [r5, #4]
 801763c:	60aa      	str	r2, [r5, #8]
 801763e:	60eb      	str	r3, [r5, #12]
 8017640:	8823      	ldrh	r3, [r4, #0]
 8017642:	78a2      	ldrb	r2, [r4, #2]
 8017644:	822b      	strh	r3, [r5, #16]
 8017646:	4613      	mov	r3, r2
 8017648:	74ab      	strb	r3, [r5, #18]
			strcpy(p->startFinish, "s,d,d,d,d,e,d");
 801764a:	687b      	ldr	r3, [r7, #4]
 801764c:	33d8      	adds	r3, #216	; 0xd8
 801764e:	4a3c      	ldr	r2, [pc, #240]	; (8017740 <problem_fetch+0x16420>)
 8017650:	461c      	mov	r4, r3
 8017652:	4613      	mov	r3, r2
 8017654:	cb07      	ldmia	r3!, {r0, r1, r2}
 8017656:	6020      	str	r0, [r4, #0]
 8017658:	6061      	str	r1, [r4, #4]
 801765a:	60a2      	str	r2, [r4, #8]
 801765c:	881b      	ldrh	r3, [r3, #0]
 801765e:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade, "6C+");
 8017660:	687b      	ldr	r3, [r7, #4]
 8017662:	33cc      	adds	r3, #204	; 0xcc
 8017664:	4a37      	ldr	r2, [pc, #220]	; (8017744 <problem_fetch+0x16424>)
 8017666:	6810      	ldr	r0, [r2, #0]
 8017668:	6018      	str	r0, [r3, #0]
			break;
 801766a:	f003 bb9f 	b.w	801adac <problem_fetch+0x19a8c>
		case 724 :
			strcpy(p->name,"MURPHY STINKS");
 801766e:	687b      	ldr	r3, [r7, #4]
 8017670:	337c      	adds	r3, #124	; 0x7c
 8017672:	4a35      	ldr	r2, [pc, #212]	; (8017748 <problem_fetch+0x16428>)
 8017674:	461c      	mov	r4, r3
 8017676:	4613      	mov	r3, r2
 8017678:	cb07      	ldmia	r3!, {r0, r1, r2}
 801767a:	6020      	str	r0, [r4, #0]
 801767c:	6061      	str	r1, [r4, #4]
 801767e:	60a2      	str	r2, [r4, #8]
 8017680:	881b      	ldrh	r3, [r3, #0]
 8017682:	81a3      	strh	r3, [r4, #12]
			p->moveSize = 7;
 8017684:	687b      	ldr	r3, [r7, #4]
 8017686:	2207      	movs	r2, #7
 8017688:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"H,H,I,J,I,J,J");
 801768a:	687b      	ldr	r3, [r7, #4]
 801768c:	3340      	adds	r3, #64	; 0x40
 801768e:	4a2f      	ldr	r2, [pc, #188]	; (801774c <problem_fetch+0x1642c>)
 8017690:	461c      	mov	r4, r3
 8017692:	4613      	mov	r3, r2
 8017694:	cb07      	ldmia	r3!, {r0, r1, r2}
 8017696:	6020      	str	r0, [r4, #0]
 8017698:	6061      	str	r1, [r4, #4]
 801769a:	60a2      	str	r2, [r4, #8]
 801769c:	881b      	ldrh	r3, [r3, #0]
 801769e:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"8,10,14,12,18,7,5");
 80176a0:	687b      	ldr	r3, [r7, #4]
 80176a2:	3304      	adds	r3, #4
 80176a4:	4a2a      	ldr	r2, [pc, #168]	; (8017750 <problem_fetch+0x16430>)
 80176a6:	461d      	mov	r5, r3
 80176a8:	4614      	mov	r4, r2
 80176aa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80176ac:	6028      	str	r0, [r5, #0]
 80176ae:	6069      	str	r1, [r5, #4]
 80176b0:	60aa      	str	r2, [r5, #8]
 80176b2:	60eb      	str	r3, [r5, #12]
 80176b4:	8823      	ldrh	r3, [r4, #0]
 80176b6:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish, "d,d,d,d,e,d,s");
 80176b8:	687b      	ldr	r3, [r7, #4]
 80176ba:	33d8      	adds	r3, #216	; 0xd8
 80176bc:	4a25      	ldr	r2, [pc, #148]	; (8017754 <problem_fetch+0x16434>)
 80176be:	461c      	mov	r4, r3
 80176c0:	4613      	mov	r3, r2
 80176c2:	cb07      	ldmia	r3!, {r0, r1, r2}
 80176c4:	6020      	str	r0, [r4, #0]
 80176c6:	6061      	str	r1, [r4, #4]
 80176c8:	60a2      	str	r2, [r4, #8]
 80176ca:	881b      	ldrh	r3, [r3, #0]
 80176cc:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade, "6B+");
 80176ce:	687b      	ldr	r3, [r7, #4]
 80176d0:	33cc      	adds	r3, #204	; 0xcc
 80176d2:	4a06      	ldr	r2, [pc, #24]	; (80176ec <problem_fetch+0x163cc>)
 80176d4:	6810      	ldr	r0, [r2, #0]
 80176d6:	6018      	str	r0, [r3, #0]
			break;
 80176d8:	f003 bb68 	b.w	801adac <problem_fetch+0x19a8c>
 80176dc:	08029300 	.word	0x08029300
 80176e0:	08029310 	.word	0x08029310
 80176e4:	08025444 	.word	0x08025444
 80176e8:	080212a0 	.word	0x080212a0
 80176ec:	080212b0 	.word	0x080212b0
 80176f0:	08029320 	.word	0x08029320
 80176f4:	08029328 	.word	0x08029328
 80176f8:	08029334 	.word	0x08029334
 80176fc:	08021320 	.word	0x08021320
 8017700:	08021370 	.word	0x08021370
 8017704:	08029344 	.word	0x08029344
 8017708:	08029350 	.word	0x08029350
 801770c:	08029364 	.word	0x08029364
 8017710:	080215fc 	.word	0x080215fc
 8017714:	080212f4 	.word	0x080212f4
 8017718:	08029380 	.word	0x08029380
 801771c:	08029388 	.word	0x08029388
 8017720:	08029398 	.word	0x08029398
 8017724:	080293ac 	.word	0x080293ac
 8017728:	080293bc 	.word	0x080293bc
 801772c:	080293c8 	.word	0x080293c8
 8017730:	080293d8 	.word	0x080293d8
 8017734:	080293ec 	.word	0x080293ec
 8017738:	080293f8 	.word	0x080293f8
 801773c:	08029408 	.word	0x08029408
 8017740:	08028510 	.word	0x08028510
 8017744:	080213a8 	.word	0x080213a8
 8017748:	0802941c 	.word	0x0802941c
 801774c:	0802942c 	.word	0x0802942c
 8017750:	0802943c 	.word	0x0802943c
 8017754:	08029450 	.word	0x08029450
		case 725 :
			strcpy(p->name,"BLACKTOP");
 8017758:	687b      	ldr	r3, [r7, #4]
 801775a:	337c      	adds	r3, #124	; 0x7c
 801775c:	49a5      	ldr	r1, [pc, #660]	; (80179f4 <problem_fetch+0x166d4>)
 801775e:	461a      	mov	r2, r3
 8017760:	460b      	mov	r3, r1
 8017762:	cb03      	ldmia	r3!, {r0, r1}
 8017764:	6010      	str	r0, [r2, #0]
 8017766:	6051      	str	r1, [r2, #4]
 8017768:	781b      	ldrb	r3, [r3, #0]
 801776a:	7213      	strb	r3, [r2, #8]
			p->moveSize = 6;
 801776c:	687b      	ldr	r3, [r7, #4]
 801776e:	2206      	movs	r2, #6
 8017770:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"J,K,I,I,D,D");
 8017772:	687b      	ldr	r3, [r7, #4]
 8017774:	3340      	adds	r3, #64	; 0x40
 8017776:	4aa0      	ldr	r2, [pc, #640]	; (80179f8 <problem_fetch+0x166d8>)
 8017778:	461c      	mov	r4, r3
 801777a:	4613      	mov	r3, r2
 801777c:	cb07      	ldmia	r3!, {r0, r1, r2}
 801777e:	6020      	str	r0, [r4, #0]
 8017780:	6061      	str	r1, [r4, #4]
 8017782:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,9,9,14,11,18");
 8017784:	687b      	ldr	r3, [r7, #4]
 8017786:	3304      	adds	r3, #4
 8017788:	4a9c      	ldr	r2, [pc, #624]	; (80179fc <problem_fetch+0x166dc>)
 801778a:	461c      	mov	r4, r3
 801778c:	4613      	mov	r3, r2
 801778e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8017790:	6020      	str	r0, [r4, #0]
 8017792:	6061      	str	r1, [r4, #4]
 8017794:	60a2      	str	r2, [r4, #8]
 8017796:	881a      	ldrh	r2, [r3, #0]
 8017798:	789b      	ldrb	r3, [r3, #2]
 801779a:	81a2      	strh	r2, [r4, #12]
 801779c:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish, "s,d,d,d,d,e");
 801779e:	687b      	ldr	r3, [r7, #4]
 80177a0:	33d8      	adds	r3, #216	; 0xd8
 80177a2:	4a97      	ldr	r2, [pc, #604]	; (8017a00 <problem_fetch+0x166e0>)
 80177a4:	461c      	mov	r4, r3
 80177a6:	4613      	mov	r3, r2
 80177a8:	cb07      	ldmia	r3!, {r0, r1, r2}
 80177aa:	6020      	str	r0, [r4, #0]
 80177ac:	6061      	str	r1, [r4, #4]
 80177ae:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade, "7A");
 80177b0:	687b      	ldr	r3, [r7, #4]
 80177b2:	33cc      	adds	r3, #204	; 0xcc
 80177b4:	4a93      	ldr	r2, [pc, #588]	; (8017a04 <problem_fetch+0x166e4>)
 80177b6:	8811      	ldrh	r1, [r2, #0]
 80177b8:	7892      	ldrb	r2, [r2, #2]
 80177ba:	8019      	strh	r1, [r3, #0]
 80177bc:	709a      	strb	r2, [r3, #2]
			break;
 80177be:	f003 baf5 	b.w	801adac <problem_fetch+0x19a8c>
		case 726 :
			strcpy(p->name,"WHO NEEDS DR. GREG");
 80177c2:	687b      	ldr	r3, [r7, #4]
 80177c4:	337c      	adds	r3, #124	; 0x7c
 80177c6:	4a90      	ldr	r2, [pc, #576]	; (8017a08 <problem_fetch+0x166e8>)
 80177c8:	461d      	mov	r5, r3
 80177ca:	4614      	mov	r4, r2
 80177cc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80177ce:	6028      	str	r0, [r5, #0]
 80177d0:	6069      	str	r1, [r5, #4]
 80177d2:	60aa      	str	r2, [r5, #8]
 80177d4:	60eb      	str	r3, [r5, #12]
 80177d6:	8823      	ldrh	r3, [r4, #0]
 80177d8:	78a2      	ldrb	r2, [r4, #2]
 80177da:	822b      	strh	r3, [r5, #16]
 80177dc:	4613      	mov	r3, r2
 80177de:	74ab      	strb	r3, [r5, #18]
			p->moveSize = 7;
 80177e0:	687b      	ldr	r3, [r7, #4]
 80177e2:	2207      	movs	r2, #7
 80177e4:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"E,J,E,D,G,H,D");
 80177e6:	687b      	ldr	r3, [r7, #4]
 80177e8:	3340      	adds	r3, #64	; 0x40
 80177ea:	4a88      	ldr	r2, [pc, #544]	; (8017a0c <problem_fetch+0x166ec>)
 80177ec:	461c      	mov	r4, r3
 80177ee:	4613      	mov	r3, r2
 80177f0:	cb07      	ldmia	r3!, {r0, r1, r2}
 80177f2:	6020      	str	r0, [r4, #0]
 80177f4:	6061      	str	r1, [r4, #4]
 80177f6:	60a2      	str	r2, [r4, #8]
 80177f8:	881b      	ldrh	r3, [r3, #0]
 80177fa:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"6,5,14,18,9,12,11");
 80177fc:	687b      	ldr	r3, [r7, #4]
 80177fe:	3304      	adds	r3, #4
 8017800:	4a83      	ldr	r2, [pc, #524]	; (8017a10 <problem_fetch+0x166f0>)
 8017802:	461d      	mov	r5, r3
 8017804:	4614      	mov	r4, r2
 8017806:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8017808:	6028      	str	r0, [r5, #0]
 801780a:	6069      	str	r1, [r5, #4]
 801780c:	60aa      	str	r2, [r5, #8]
 801780e:	60eb      	str	r3, [r5, #12]
 8017810:	8823      	ldrh	r3, [r4, #0]
 8017812:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish, "s,s,d,e,d,d,d");
 8017814:	687b      	ldr	r3, [r7, #4]
 8017816:	33d8      	adds	r3, #216	; 0xd8
 8017818:	4a7e      	ldr	r2, [pc, #504]	; (8017a14 <problem_fetch+0x166f4>)
 801781a:	461c      	mov	r4, r3
 801781c:	4613      	mov	r3, r2
 801781e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8017820:	6020      	str	r0, [r4, #0]
 8017822:	6061      	str	r1, [r4, #4]
 8017824:	60a2      	str	r2, [r4, #8]
 8017826:	881b      	ldrh	r3, [r3, #0]
 8017828:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade, "7A+");
 801782a:	687b      	ldr	r3, [r7, #4]
 801782c:	33cc      	adds	r3, #204	; 0xcc
 801782e:	4a7a      	ldr	r2, [pc, #488]	; (8017a18 <problem_fetch+0x166f8>)
 8017830:	6810      	ldr	r0, [r2, #0]
 8017832:	6018      	str	r0, [r3, #0]
			break;
 8017834:	f003 baba 	b.w	801adac <problem_fetch+0x19a8c>
		case 727 :
			strcpy(p->name,"Z3GZAG");
 8017838:	687b      	ldr	r3, [r7, #4]
 801783a:	337c      	adds	r3, #124	; 0x7c
 801783c:	4a77      	ldr	r2, [pc, #476]	; (8017a1c <problem_fetch+0x166fc>)
 801783e:	6810      	ldr	r0, [r2, #0]
 8017840:	6018      	str	r0, [r3, #0]
 8017842:	8891      	ldrh	r1, [r2, #4]
 8017844:	7992      	ldrb	r2, [r2, #6]
 8017846:	8099      	strh	r1, [r3, #4]
 8017848:	719a      	strb	r2, [r3, #6]
			p->moveSize = 9;
 801784a:	687b      	ldr	r3, [r7, #4]
 801784c:	2209      	movs	r2, #9
 801784e:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"G,H,H,H,I,G,G,D,E");
 8017850:	687b      	ldr	r3, [r7, #4]
 8017852:	3340      	adds	r3, #64	; 0x40
 8017854:	4a72      	ldr	r2, [pc, #456]	; (8017a20 <problem_fetch+0x16700>)
 8017856:	461d      	mov	r5, r3
 8017858:	4614      	mov	r4, r2
 801785a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801785c:	6028      	str	r0, [r5, #0]
 801785e:	6069      	str	r1, [r5, #4]
 8017860:	60aa      	str	r2, [r5, #8]
 8017862:	60eb      	str	r3, [r5, #12]
 8017864:	8823      	ldrh	r3, [r4, #0]
 8017866:	822b      	strh	r3, [r5, #16]
			strcpy(p->moveNumbers,"4,8,10,12,14,15,17,18,6");
 8017868:	687b      	ldr	r3, [r7, #4]
 801786a:	3304      	adds	r3, #4
 801786c:	4a6d      	ldr	r2, [pc, #436]	; (8017a24 <problem_fetch+0x16704>)
 801786e:	461d      	mov	r5, r3
 8017870:	4614      	mov	r4, r2
 8017872:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8017874:	6028      	str	r0, [r5, #0]
 8017876:	6069      	str	r1, [r5, #4]
 8017878:	60aa      	str	r2, [r5, #8]
 801787a:	60eb      	str	r3, [r5, #12]
 801787c:	cc03      	ldmia	r4!, {r0, r1}
 801787e:	6128      	str	r0, [r5, #16]
 8017880:	6169      	str	r1, [r5, #20]
			strcpy(p->startFinish, "s,d,d,d,d,d,d,e,s");
 8017882:	687b      	ldr	r3, [r7, #4]
 8017884:	33d8      	adds	r3, #216	; 0xd8
 8017886:	4a68      	ldr	r2, [pc, #416]	; (8017a28 <problem_fetch+0x16708>)
 8017888:	461d      	mov	r5, r3
 801788a:	4614      	mov	r4, r2
 801788c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801788e:	6028      	str	r0, [r5, #0]
 8017890:	6069      	str	r1, [r5, #4]
 8017892:	60aa      	str	r2, [r5, #8]
 8017894:	60eb      	str	r3, [r5, #12]
 8017896:	8823      	ldrh	r3, [r4, #0]
 8017898:	822b      	strh	r3, [r5, #16]
			strcpy(p->grade, "6B+");
 801789a:	687b      	ldr	r3, [r7, #4]
 801789c:	33cc      	adds	r3, #204	; 0xcc
 801789e:	4a63      	ldr	r2, [pc, #396]	; (8017a2c <problem_fetch+0x1670c>)
 80178a0:	6810      	ldr	r0, [r2, #0]
 80178a2:	6018      	str	r0, [r3, #0]
			break;
 80178a4:	f003 ba82 	b.w	801adac <problem_fetch+0x19a8c>
		case 728 :
			strcpy(p->name,"BLACK MIRROR");
 80178a8:	687b      	ldr	r3, [r7, #4]
 80178aa:	337c      	adds	r3, #124	; 0x7c
 80178ac:	4a60      	ldr	r2, [pc, #384]	; (8017a30 <problem_fetch+0x16710>)
 80178ae:	461c      	mov	r4, r3
 80178b0:	4613      	mov	r3, r2
 80178b2:	cb07      	ldmia	r3!, {r0, r1, r2}
 80178b4:	6020      	str	r0, [r4, #0]
 80178b6:	6061      	str	r1, [r4, #4]
 80178b8:	60a2      	str	r2, [r4, #8]
 80178ba:	781b      	ldrb	r3, [r3, #0]
 80178bc:	7323      	strb	r3, [r4, #12]
			p->moveSize = 8;
 80178be:	687b      	ldr	r3, [r7, #4]
 80178c0:	2208      	movs	r2, #8
 80178c2:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"J,H,I,F,E,D,G,I");
 80178c4:	687b      	ldr	r3, [r7, #4]
 80178c6:	3340      	adds	r3, #64	; 0x40
 80178c8:	4a5a      	ldr	r2, [pc, #360]	; (8017a34 <problem_fetch+0x16714>)
 80178ca:	461c      	mov	r4, r3
 80178cc:	4615      	mov	r5, r2
 80178ce:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80178d0:	6020      	str	r0, [r4, #0]
 80178d2:	6061      	str	r1, [r4, #4]
 80178d4:	60a2      	str	r2, [r4, #8]
 80178d6:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,8,9,11,12,15,17,18");
 80178d8:	687b      	ldr	r3, [r7, #4]
 80178da:	3304      	adds	r3, #4
 80178dc:	4a56      	ldr	r2, [pc, #344]	; (8017a38 <problem_fetch+0x16718>)
 80178de:	461d      	mov	r5, r3
 80178e0:	4614      	mov	r4, r2
 80178e2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80178e4:	6028      	str	r0, [r5, #0]
 80178e6:	6069      	str	r1, [r5, #4]
 80178e8:	60aa      	str	r2, [r5, #8]
 80178ea:	60eb      	str	r3, [r5, #12]
 80178ec:	6820      	ldr	r0, [r4, #0]
 80178ee:	6128      	str	r0, [r5, #16]
 80178f0:	7923      	ldrb	r3, [r4, #4]
 80178f2:	752b      	strb	r3, [r5, #20]
			strcpy(p->startFinish, "s,d,d,d,d,d,d,e");
 80178f4:	687b      	ldr	r3, [r7, #4]
 80178f6:	33d8      	adds	r3, #216	; 0xd8
 80178f8:	4a50      	ldr	r2, [pc, #320]	; (8017a3c <problem_fetch+0x1671c>)
 80178fa:	461c      	mov	r4, r3
 80178fc:	4615      	mov	r5, r2
 80178fe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8017900:	6020      	str	r0, [r4, #0]
 8017902:	6061      	str	r1, [r4, #4]
 8017904:	60a2      	str	r2, [r4, #8]
 8017906:	60e3      	str	r3, [r4, #12]
			strcpy(p->grade, "7C");
 8017908:	687b      	ldr	r3, [r7, #4]
 801790a:	33cc      	adds	r3, #204	; 0xcc
 801790c:	4a4c      	ldr	r2, [pc, #304]	; (8017a40 <problem_fetch+0x16720>)
 801790e:	8811      	ldrh	r1, [r2, #0]
 8017910:	7892      	ldrb	r2, [r2, #2]
 8017912:	8019      	strh	r1, [r3, #0]
 8017914:	709a      	strb	r2, [r3, #2]
			break;
 8017916:	f003 ba49 	b.w	801adac <problem_fetch+0x19a8c>
		case 729 :
			strcpy(p->name,"ESSEK");
 801791a:	687b      	ldr	r3, [r7, #4]
 801791c:	337c      	adds	r3, #124	; 0x7c
 801791e:	4a49      	ldr	r2, [pc, #292]	; (8017a44 <problem_fetch+0x16724>)
 8017920:	6810      	ldr	r0, [r2, #0]
 8017922:	6018      	str	r0, [r3, #0]
 8017924:	8892      	ldrh	r2, [r2, #4]
 8017926:	809a      	strh	r2, [r3, #4]
			p->moveSize = 8;
 8017928:	687b      	ldr	r3, [r7, #4]
 801792a:	2208      	movs	r2, #8
 801792c:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"G,J,H,E,G,G,G,D");
 801792e:	687b      	ldr	r3, [r7, #4]
 8017930:	3340      	adds	r3, #64	; 0x40
 8017932:	4a45      	ldr	r2, [pc, #276]	; (8017a48 <problem_fetch+0x16728>)
 8017934:	461c      	mov	r4, r3
 8017936:	4615      	mov	r5, r2
 8017938:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801793a:	6020      	str	r0, [r4, #0]
 801793c:	6061      	str	r1, [r4, #4]
 801793e:	60a2      	str	r2, [r4, #8]
 8017940:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"6,5,10,12,14,15,17,18");
 8017942:	687b      	ldr	r3, [r7, #4]
 8017944:	3304      	adds	r3, #4
 8017946:	4a41      	ldr	r2, [pc, #260]	; (8017a4c <problem_fetch+0x1672c>)
 8017948:	461d      	mov	r5, r3
 801794a:	4614      	mov	r4, r2
 801794c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801794e:	6028      	str	r0, [r5, #0]
 8017950:	6069      	str	r1, [r5, #4]
 8017952:	60aa      	str	r2, [r5, #8]
 8017954:	60eb      	str	r3, [r5, #12]
 8017956:	6820      	ldr	r0, [r4, #0]
 8017958:	6128      	str	r0, [r5, #16]
 801795a:	88a3      	ldrh	r3, [r4, #4]
 801795c:	82ab      	strh	r3, [r5, #20]
			strcpy(p->startFinish, "s,s,d,d,d,d,d,e");
 801795e:	687b      	ldr	r3, [r7, #4]
 8017960:	33d8      	adds	r3, #216	; 0xd8
 8017962:	4a3b      	ldr	r2, [pc, #236]	; (8017a50 <problem_fetch+0x16730>)
 8017964:	461c      	mov	r4, r3
 8017966:	4615      	mov	r5, r2
 8017968:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801796a:	6020      	str	r0, [r4, #0]
 801796c:	6061      	str	r1, [r4, #4]
 801796e:	60a2      	str	r2, [r4, #8]
 8017970:	60e3      	str	r3, [r4, #12]
			strcpy(p->grade, "6C+");
 8017972:	687b      	ldr	r3, [r7, #4]
 8017974:	33cc      	adds	r3, #204	; 0xcc
 8017976:	4a37      	ldr	r2, [pc, #220]	; (8017a54 <problem_fetch+0x16734>)
 8017978:	6810      	ldr	r0, [r2, #0]
 801797a:	6018      	str	r0, [r3, #0]
			break;
 801797c:	f003 ba16 	b.w	801adac <problem_fetch+0x19a8c>
		case 73 :
			strcpy(p->name,"LEOCREMAFLANDERS");
 8017980:	687b      	ldr	r3, [r7, #4]
 8017982:	337c      	adds	r3, #124	; 0x7c
 8017984:	4a34      	ldr	r2, [pc, #208]	; (8017a58 <problem_fetch+0x16738>)
 8017986:	461d      	mov	r5, r3
 8017988:	4614      	mov	r4, r2
 801798a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801798c:	6028      	str	r0, [r5, #0]
 801798e:	6069      	str	r1, [r5, #4]
 8017990:	60aa      	str	r2, [r5, #8]
 8017992:	60eb      	str	r3, [r5, #12]
 8017994:	7823      	ldrb	r3, [r4, #0]
 8017996:	742b      	strb	r3, [r5, #16]
			p->moveSize = 7;
 8017998:	687b      	ldr	r3, [r7, #4]
 801799a:	2207      	movs	r2, #7
 801799c:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"B,B,C,E,F,H,I");
 801799e:	687b      	ldr	r3, [r7, #4]
 80179a0:	3340      	adds	r3, #64	; 0x40
 80179a2:	4a2e      	ldr	r2, [pc, #184]	; (8017a5c <problem_fetch+0x1673c>)
 80179a4:	461c      	mov	r4, r3
 80179a6:	4613      	mov	r3, r2
 80179a8:	cb07      	ldmia	r3!, {r0, r1, r2}
 80179aa:	6020      	str	r0, [r4, #0]
 80179ac:	6061      	str	r1, [r4, #4]
 80179ae:	60a2      	str	r2, [r4, #8]
 80179b0:	881b      	ldrh	r3, [r3, #0]
 80179b2:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"12,6,5,9,13,12,18");
 80179b4:	687b      	ldr	r3, [r7, #4]
 80179b6:	3304      	adds	r3, #4
 80179b8:	4a29      	ldr	r2, [pc, #164]	; (8017a60 <problem_fetch+0x16740>)
 80179ba:	461d      	mov	r5, r3
 80179bc:	4614      	mov	r4, r2
 80179be:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80179c0:	6028      	str	r0, [r5, #0]
 80179c2:	6069      	str	r1, [r5, #4]
 80179c4:	60aa      	str	r2, [r5, #8]
 80179c6:	60eb      	str	r3, [r5, #12]
 80179c8:	8823      	ldrh	r3, [r4, #0]
 80179ca:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish, "d,s,s,d,d,d,e");
 80179cc:	687b      	ldr	r3, [r7, #4]
 80179ce:	33d8      	adds	r3, #216	; 0xd8
 80179d0:	4a24      	ldr	r2, [pc, #144]	; (8017a64 <problem_fetch+0x16744>)
 80179d2:	461c      	mov	r4, r3
 80179d4:	4613      	mov	r3, r2
 80179d6:	cb07      	ldmia	r3!, {r0, r1, r2}
 80179d8:	6020      	str	r0, [r4, #0]
 80179da:	6061      	str	r1, [r4, #4]
 80179dc:	60a2      	str	r2, [r4, #8]
 80179de:	881b      	ldrh	r3, [r3, #0]
 80179e0:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade, "7C");
 80179e2:	687b      	ldr	r3, [r7, #4]
 80179e4:	33cc      	adds	r3, #204	; 0xcc
 80179e6:	4a16      	ldr	r2, [pc, #88]	; (8017a40 <problem_fetch+0x16720>)
 80179e8:	8811      	ldrh	r1, [r2, #0]
 80179ea:	7892      	ldrb	r2, [r2, #2]
 80179ec:	8019      	strh	r1, [r3, #0]
 80179ee:	709a      	strb	r2, [r3, #2]
			break;
 80179f0:	f003 b9dc 	b.w	801adac <problem_fetch+0x19a8c>
 80179f4:	08029460 	.word	0x08029460
 80179f8:	0802946c 	.word	0x0802946c
 80179fc:	08029478 	.word	0x08029478
 8017a00:	0802139c 	.word	0x0802139c
 8017a04:	080212f4 	.word	0x080212f4
 8017a08:	08029488 	.word	0x08029488
 8017a0c:	0802949c 	.word	0x0802949c
 8017a10:	080294ac 	.word	0x080294ac
 8017a14:	080294c0 	.word	0x080294c0
 8017a18:	08021424 	.word	0x08021424
 8017a1c:	080294d0 	.word	0x080294d0
 8017a20:	080294d8 	.word	0x080294d8
 8017a24:	080294ec 	.word	0x080294ec
 8017a28:	08029504 	.word	0x08029504
 8017a2c:	080212b0 	.word	0x080212b0
 8017a30:	08029518 	.word	0x08029518
 8017a34:	08029528 	.word	0x08029528
 8017a38:	08029538 	.word	0x08029538
 8017a3c:	08021458 	.word	0x08021458
 8017a40:	0802158c 	.word	0x0802158c
 8017a44:	08029550 	.word	0x08029550
 8017a48:	08029558 	.word	0x08029558
 8017a4c:	08029568 	.word	0x08029568
 8017a50:	080214cc 	.word	0x080214cc
 8017a54:	080213a8 	.word	0x080213a8
 8017a58:	08029580 	.word	0x08029580
 8017a5c:	08029594 	.word	0x08029594
 8017a60:	080295a4 	.word	0x080295a4
 8017a64:	0802462c 	.word	0x0802462c
		case 730 :
			strcpy(p->name,"WALLABY");
 8017a68:	687b      	ldr	r3, [r7, #4]
 8017a6a:	337c      	adds	r3, #124	; 0x7c
 8017a6c:	49b9      	ldr	r1, [pc, #740]	; (8017d54 <problem_fetch+0x16a34>)
 8017a6e:	461a      	mov	r2, r3
 8017a70:	460b      	mov	r3, r1
 8017a72:	cb03      	ldmia	r3!, {r0, r1}
 8017a74:	6010      	str	r0, [r2, #0]
 8017a76:	6051      	str	r1, [r2, #4]
			p->moveSize = 9;
 8017a78:	687b      	ldr	r3, [r7, #4]
 8017a7a:	2209      	movs	r2, #9
 8017a7c:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"E,G,E,F,E,J,I,H,I");
 8017a7e:	687b      	ldr	r3, [r7, #4]
 8017a80:	3340      	adds	r3, #64	; 0x40
 8017a82:	4ab5      	ldr	r2, [pc, #724]	; (8017d58 <problem_fetch+0x16a38>)
 8017a84:	461d      	mov	r5, r3
 8017a86:	4614      	mov	r4, r2
 8017a88:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8017a8a:	6028      	str	r0, [r5, #0]
 8017a8c:	6069      	str	r1, [r5, #4]
 8017a8e:	60aa      	str	r2, [r5, #8]
 8017a90:	60eb      	str	r3, [r5, #12]
 8017a92:	8823      	ldrh	r3, [r4, #0]
 8017a94:	822b      	strh	r3, [r5, #16]
			strcpy(p->moveNumbers,"6,6,8,11,12,7,14,16,18");
 8017a96:	687b      	ldr	r3, [r7, #4]
 8017a98:	3304      	adds	r3, #4
 8017a9a:	4ab0      	ldr	r2, [pc, #704]	; (8017d5c <problem_fetch+0x16a3c>)
 8017a9c:	461c      	mov	r4, r3
 8017a9e:	4615      	mov	r5, r2
 8017aa0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8017aa2:	6020      	str	r0, [r4, #0]
 8017aa4:	6061      	str	r1, [r4, #4]
 8017aa6:	60a2      	str	r2, [r4, #8]
 8017aa8:	60e3      	str	r3, [r4, #12]
 8017aaa:	6828      	ldr	r0, [r5, #0]
 8017aac:	6120      	str	r0, [r4, #16]
 8017aae:	88ab      	ldrh	r3, [r5, #4]
 8017ab0:	79aa      	ldrb	r2, [r5, #6]
 8017ab2:	82a3      	strh	r3, [r4, #20]
 8017ab4:	4613      	mov	r3, r2
 8017ab6:	75a3      	strb	r3, [r4, #22]
			strcpy(p->startFinish, "s,s,d,d,d,d,d,d,e");
 8017ab8:	687b      	ldr	r3, [r7, #4]
 8017aba:	33d8      	adds	r3, #216	; 0xd8
 8017abc:	4aa8      	ldr	r2, [pc, #672]	; (8017d60 <problem_fetch+0x16a40>)
 8017abe:	461d      	mov	r5, r3
 8017ac0:	4614      	mov	r4, r2
 8017ac2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8017ac4:	6028      	str	r0, [r5, #0]
 8017ac6:	6069      	str	r1, [r5, #4]
 8017ac8:	60aa      	str	r2, [r5, #8]
 8017aca:	60eb      	str	r3, [r5, #12]
 8017acc:	8823      	ldrh	r3, [r4, #0]
 8017ace:	822b      	strh	r3, [r5, #16]
			strcpy(p->grade, "6C");
 8017ad0:	687b      	ldr	r3, [r7, #4]
 8017ad2:	33cc      	adds	r3, #204	; 0xcc
 8017ad4:	4aa3      	ldr	r2, [pc, #652]	; (8017d64 <problem_fetch+0x16a44>)
 8017ad6:	8811      	ldrh	r1, [r2, #0]
 8017ad8:	7892      	ldrb	r2, [r2, #2]
 8017ada:	8019      	strh	r1, [r3, #0]
 8017adc:	709a      	strb	r2, [r3, #2]
			break;
 8017ade:	f003 b965 	b.w	801adac <problem_fetch+0x19a8c>
		case 731 :
			strcpy(p->name,"SMALL HOT 3 SPLENDA");
 8017ae2:	687b      	ldr	r3, [r7, #4]
 8017ae4:	337c      	adds	r3, #124	; 0x7c
 8017ae6:	4aa0      	ldr	r2, [pc, #640]	; (8017d68 <problem_fetch+0x16a48>)
 8017ae8:	461d      	mov	r5, r3
 8017aea:	4614      	mov	r4, r2
 8017aec:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8017aee:	6028      	str	r0, [r5, #0]
 8017af0:	6069      	str	r1, [r5, #4]
 8017af2:	60aa      	str	r2, [r5, #8]
 8017af4:	60eb      	str	r3, [r5, #12]
 8017af6:	6820      	ldr	r0, [r4, #0]
 8017af8:	6128      	str	r0, [r5, #16]
			p->moveSize = 6;
 8017afa:	687b      	ldr	r3, [r7, #4]
 8017afc:	2206      	movs	r2, #6
 8017afe:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"E,H,D,I,E,D");
 8017b00:	687b      	ldr	r3, [r7, #4]
 8017b02:	3340      	adds	r3, #64	; 0x40
 8017b04:	4a99      	ldr	r2, [pc, #612]	; (8017d6c <problem_fetch+0x16a4c>)
 8017b06:	461c      	mov	r4, r3
 8017b08:	4613      	mov	r3, r2
 8017b0a:	cb07      	ldmia	r3!, {r0, r1, r2}
 8017b0c:	6020      	str	r0, [r4, #0]
 8017b0e:	6061      	str	r1, [r4, #4]
 8017b10:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"6,10,11,14,16,18");
 8017b12:	687b      	ldr	r3, [r7, #4]
 8017b14:	3304      	adds	r3, #4
 8017b16:	4a96      	ldr	r2, [pc, #600]	; (8017d70 <problem_fetch+0x16a50>)
 8017b18:	461d      	mov	r5, r3
 8017b1a:	4614      	mov	r4, r2
 8017b1c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8017b1e:	6028      	str	r0, [r5, #0]
 8017b20:	6069      	str	r1, [r5, #4]
 8017b22:	60aa      	str	r2, [r5, #8]
 8017b24:	60eb      	str	r3, [r5, #12]
 8017b26:	7823      	ldrb	r3, [r4, #0]
 8017b28:	742b      	strb	r3, [r5, #16]
			strcpy(p->startFinish, "s,d,d,d,d,e");
 8017b2a:	687b      	ldr	r3, [r7, #4]
 8017b2c:	33d8      	adds	r3, #216	; 0xd8
 8017b2e:	4a91      	ldr	r2, [pc, #580]	; (8017d74 <problem_fetch+0x16a54>)
 8017b30:	461c      	mov	r4, r3
 8017b32:	4613      	mov	r3, r2
 8017b34:	cb07      	ldmia	r3!, {r0, r1, r2}
 8017b36:	6020      	str	r0, [r4, #0]
 8017b38:	6061      	str	r1, [r4, #4]
 8017b3a:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade, "6B+");
 8017b3c:	687b      	ldr	r3, [r7, #4]
 8017b3e:	33cc      	adds	r3, #204	; 0xcc
 8017b40:	4a8d      	ldr	r2, [pc, #564]	; (8017d78 <problem_fetch+0x16a58>)
 8017b42:	6810      	ldr	r0, [r2, #0]
 8017b44:	6018      	str	r0, [r3, #0]
			break;
 8017b46:	f003 b931 	b.w	801adac <problem_fetch+0x19a8c>
		case 732 :
			strcpy(p->name,"THE GRANARY");
 8017b4a:	687b      	ldr	r3, [r7, #4]
 8017b4c:	337c      	adds	r3, #124	; 0x7c
 8017b4e:	4a8b      	ldr	r2, [pc, #556]	; (8017d7c <problem_fetch+0x16a5c>)
 8017b50:	461c      	mov	r4, r3
 8017b52:	4613      	mov	r3, r2
 8017b54:	cb07      	ldmia	r3!, {r0, r1, r2}
 8017b56:	6020      	str	r0, [r4, #0]
 8017b58:	6061      	str	r1, [r4, #4]
 8017b5a:	60a2      	str	r2, [r4, #8]
			p->moveSize = 6;
 8017b5c:	687b      	ldr	r3, [r7, #4]
 8017b5e:	2206      	movs	r2, #6
 8017b60:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"J,E,F,C,D,D");
 8017b62:	687b      	ldr	r3, [r7, #4]
 8017b64:	3340      	adds	r3, #64	; 0x40
 8017b66:	4a86      	ldr	r2, [pc, #536]	; (8017d80 <problem_fetch+0x16a60>)
 8017b68:	461c      	mov	r4, r3
 8017b6a:	4613      	mov	r3, r2
 8017b6c:	cb07      	ldmia	r3!, {r0, r1, r2}
 8017b6e:	6020      	str	r0, [r4, #0]
 8017b70:	6061      	str	r1, [r4, #4]
 8017b72:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,6,11,13,15,18");
 8017b74:	687b      	ldr	r3, [r7, #4]
 8017b76:	3304      	adds	r3, #4
 8017b78:	4a82      	ldr	r2, [pc, #520]	; (8017d84 <problem_fetch+0x16a64>)
 8017b7a:	461c      	mov	r4, r3
 8017b7c:	4615      	mov	r5, r2
 8017b7e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8017b80:	6020      	str	r0, [r4, #0]
 8017b82:	6061      	str	r1, [r4, #4]
 8017b84:	60a2      	str	r2, [r4, #8]
 8017b86:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish, "s,s,d,d,d,e");
 8017b88:	687b      	ldr	r3, [r7, #4]
 8017b8a:	33d8      	adds	r3, #216	; 0xd8
 8017b8c:	4a7e      	ldr	r2, [pc, #504]	; (8017d88 <problem_fetch+0x16a68>)
 8017b8e:	461c      	mov	r4, r3
 8017b90:	4613      	mov	r3, r2
 8017b92:	cb07      	ldmia	r3!, {r0, r1, r2}
 8017b94:	6020      	str	r0, [r4, #0]
 8017b96:	6061      	str	r1, [r4, #4]
 8017b98:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade, "7A");
 8017b9a:	687b      	ldr	r3, [r7, #4]
 8017b9c:	33cc      	adds	r3, #204	; 0xcc
 8017b9e:	4a7b      	ldr	r2, [pc, #492]	; (8017d8c <problem_fetch+0x16a6c>)
 8017ba0:	8811      	ldrh	r1, [r2, #0]
 8017ba2:	7892      	ldrb	r2, [r2, #2]
 8017ba4:	8019      	strh	r1, [r3, #0]
 8017ba6:	709a      	strb	r2, [r3, #2]
			break;
 8017ba8:	f003 b900 	b.w	801adac <problem_fetch+0x19a8c>
		case 733 :
			strcpy(p->name,"BREATHE");
 8017bac:	687b      	ldr	r3, [r7, #4]
 8017bae:	337c      	adds	r3, #124	; 0x7c
 8017bb0:	4977      	ldr	r1, [pc, #476]	; (8017d90 <problem_fetch+0x16a70>)
 8017bb2:	461a      	mov	r2, r3
 8017bb4:	460b      	mov	r3, r1
 8017bb6:	cb03      	ldmia	r3!, {r0, r1}
 8017bb8:	6010      	str	r0, [r2, #0]
 8017bba:	6051      	str	r1, [r2, #4]
			p->moveSize = 10;
 8017bbc:	687b      	ldr	r3, [r7, #4]
 8017bbe:	220a      	movs	r2, #10
 8017bc0:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"E,E,E,H,C,B,F,G,I,J");
 8017bc2:	687b      	ldr	r3, [r7, #4]
 8017bc4:	3340      	adds	r3, #64	; 0x40
 8017bc6:	4a73      	ldr	r2, [pc, #460]	; (8017d94 <problem_fetch+0x16a74>)
 8017bc8:	461d      	mov	r5, r3
 8017bca:	4614      	mov	r4, r2
 8017bcc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8017bce:	6028      	str	r0, [r5, #0]
 8017bd0:	6069      	str	r1, [r5, #4]
 8017bd2:	60aa      	str	r2, [r5, #8]
 8017bd4:	60eb      	str	r3, [r5, #12]
 8017bd6:	6820      	ldr	r0, [r4, #0]
 8017bd8:	6128      	str	r0, [r5, #16]
			strcpy(p->moveNumbers,"8,9,12,5,5,6,13,15,18,12");
 8017bda:	687b      	ldr	r3, [r7, #4]
 8017bdc:	3304      	adds	r3, #4
 8017bde:	4a6e      	ldr	r2, [pc, #440]	; (8017d98 <problem_fetch+0x16a78>)
 8017be0:	461d      	mov	r5, r3
 8017be2:	4614      	mov	r4, r2
 8017be4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8017be6:	6028      	str	r0, [r5, #0]
 8017be8:	6069      	str	r1, [r5, #4]
 8017bea:	60aa      	str	r2, [r5, #8]
 8017bec:	60eb      	str	r3, [r5, #12]
 8017bee:	cc03      	ldmia	r4!, {r0, r1}
 8017bf0:	6128      	str	r0, [r5, #16]
 8017bf2:	6169      	str	r1, [r5, #20]
 8017bf4:	7823      	ldrb	r3, [r4, #0]
 8017bf6:	762b      	strb	r3, [r5, #24]
			strcpy(p->startFinish, "d,d,d,d,s,s,d,d,e,d");
 8017bf8:	687b      	ldr	r3, [r7, #4]
 8017bfa:	33d8      	adds	r3, #216	; 0xd8
 8017bfc:	4a67      	ldr	r2, [pc, #412]	; (8017d9c <problem_fetch+0x16a7c>)
 8017bfe:	461d      	mov	r5, r3
 8017c00:	4614      	mov	r4, r2
 8017c02:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8017c04:	6028      	str	r0, [r5, #0]
 8017c06:	6069      	str	r1, [r5, #4]
 8017c08:	60aa      	str	r2, [r5, #8]
 8017c0a:	60eb      	str	r3, [r5, #12]
 8017c0c:	6820      	ldr	r0, [r4, #0]
 8017c0e:	6128      	str	r0, [r5, #16]
			strcpy(p->grade, "7A");
 8017c10:	687b      	ldr	r3, [r7, #4]
 8017c12:	33cc      	adds	r3, #204	; 0xcc
 8017c14:	4a5d      	ldr	r2, [pc, #372]	; (8017d8c <problem_fetch+0x16a6c>)
 8017c16:	8811      	ldrh	r1, [r2, #0]
 8017c18:	7892      	ldrb	r2, [r2, #2]
 8017c1a:	8019      	strh	r1, [r3, #0]
 8017c1c:	709a      	strb	r2, [r3, #2]
			break;
 8017c1e:	f003 b8c5 	b.w	801adac <problem_fetch+0x19a8c>
		case 734 :
			strcpy(p->name,"BLACK GECKO");
 8017c22:	687b      	ldr	r3, [r7, #4]
 8017c24:	337c      	adds	r3, #124	; 0x7c
 8017c26:	4a5e      	ldr	r2, [pc, #376]	; (8017da0 <problem_fetch+0x16a80>)
 8017c28:	461c      	mov	r4, r3
 8017c2a:	4613      	mov	r3, r2
 8017c2c:	cb07      	ldmia	r3!, {r0, r1, r2}
 8017c2e:	6020      	str	r0, [r4, #0]
 8017c30:	6061      	str	r1, [r4, #4]
 8017c32:	60a2      	str	r2, [r4, #8]
			p->moveSize = 6;
 8017c34:	687b      	ldr	r3, [r7, #4]
 8017c36:	2206      	movs	r2, #6
 8017c38:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"J,E,H,C,E,D");
 8017c3a:	687b      	ldr	r3, [r7, #4]
 8017c3c:	3340      	adds	r3, #64	; 0x40
 8017c3e:	4a59      	ldr	r2, [pc, #356]	; (8017da4 <problem_fetch+0x16a84>)
 8017c40:	461c      	mov	r4, r3
 8017c42:	4613      	mov	r3, r2
 8017c44:	cb07      	ldmia	r3!, {r0, r1, r2}
 8017c46:	6020      	str	r0, [r4, #0]
 8017c48:	6061      	str	r1, [r4, #4]
 8017c4a:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,6,10,13,14,18");
 8017c4c:	687b      	ldr	r3, [r7, #4]
 8017c4e:	3304      	adds	r3, #4
 8017c50:	4a55      	ldr	r2, [pc, #340]	; (8017da8 <problem_fetch+0x16a88>)
 8017c52:	461c      	mov	r4, r3
 8017c54:	4615      	mov	r5, r2
 8017c56:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8017c58:	6020      	str	r0, [r4, #0]
 8017c5a:	6061      	str	r1, [r4, #4]
 8017c5c:	60a2      	str	r2, [r4, #8]
 8017c5e:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish, "s,s,d,d,d,e");
 8017c60:	687b      	ldr	r3, [r7, #4]
 8017c62:	33d8      	adds	r3, #216	; 0xd8
 8017c64:	4a48      	ldr	r2, [pc, #288]	; (8017d88 <problem_fetch+0x16a68>)
 8017c66:	461c      	mov	r4, r3
 8017c68:	4613      	mov	r3, r2
 8017c6a:	cb07      	ldmia	r3!, {r0, r1, r2}
 8017c6c:	6020      	str	r0, [r4, #0]
 8017c6e:	6061      	str	r1, [r4, #4]
 8017c70:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade, "6C+");
 8017c72:	687b      	ldr	r3, [r7, #4]
 8017c74:	33cc      	adds	r3, #204	; 0xcc
 8017c76:	4a4d      	ldr	r2, [pc, #308]	; (8017dac <problem_fetch+0x16a8c>)
 8017c78:	6810      	ldr	r0, [r2, #0]
 8017c7a:	6018      	str	r0, [r3, #0]
			break;
 8017c7c:	f003 b896 	b.w	801adac <problem_fetch+0x19a8c>
		case 735 :
			strcpy(p->name,"TAFFO");
 8017c80:	687b      	ldr	r3, [r7, #4]
 8017c82:	337c      	adds	r3, #124	; 0x7c
 8017c84:	4a4a      	ldr	r2, [pc, #296]	; (8017db0 <problem_fetch+0x16a90>)
 8017c86:	6810      	ldr	r0, [r2, #0]
 8017c88:	6018      	str	r0, [r3, #0]
 8017c8a:	8892      	ldrh	r2, [r2, #4]
 8017c8c:	809a      	strh	r2, [r3, #4]
			p->moveSize = 6;
 8017c8e:	687b      	ldr	r3, [r7, #4]
 8017c90:	2206      	movs	r2, #6
 8017c92:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"G,G,C,C,D,A");
 8017c94:	687b      	ldr	r3, [r7, #4]
 8017c96:	3340      	adds	r3, #64	; 0x40
 8017c98:	4a46      	ldr	r2, [pc, #280]	; (8017db4 <problem_fetch+0x16a94>)
 8017c9a:	461c      	mov	r4, r3
 8017c9c:	4613      	mov	r3, r2
 8017c9e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8017ca0:	6020      	str	r0, [r4, #0]
 8017ca2:	6061      	str	r1, [r4, #4]
 8017ca4:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,9,8,13,15,18");
 8017ca6:	687b      	ldr	r3, [r7, #4]
 8017ca8:	3304      	adds	r3, #4
 8017caa:	4a43      	ldr	r2, [pc, #268]	; (8017db8 <problem_fetch+0x16a98>)
 8017cac:	461c      	mov	r4, r3
 8017cae:	4613      	mov	r3, r2
 8017cb0:	cb07      	ldmia	r3!, {r0, r1, r2}
 8017cb2:	6020      	str	r0, [r4, #0]
 8017cb4:	6061      	str	r1, [r4, #4]
 8017cb6:	60a2      	str	r2, [r4, #8]
 8017cb8:	881a      	ldrh	r2, [r3, #0]
 8017cba:	789b      	ldrb	r3, [r3, #2]
 8017cbc:	81a2      	strh	r2, [r4, #12]
 8017cbe:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish, "s,d,d,d,d,e");
 8017cc0:	687b      	ldr	r3, [r7, #4]
 8017cc2:	33d8      	adds	r3, #216	; 0xd8
 8017cc4:	4a2b      	ldr	r2, [pc, #172]	; (8017d74 <problem_fetch+0x16a54>)
 8017cc6:	461c      	mov	r4, r3
 8017cc8:	4613      	mov	r3, r2
 8017cca:	cb07      	ldmia	r3!, {r0, r1, r2}
 8017ccc:	6020      	str	r0, [r4, #0]
 8017cce:	6061      	str	r1, [r4, #4]
 8017cd0:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade, "6B+");
 8017cd2:	687b      	ldr	r3, [r7, #4]
 8017cd4:	33cc      	adds	r3, #204	; 0xcc
 8017cd6:	4a28      	ldr	r2, [pc, #160]	; (8017d78 <problem_fetch+0x16a58>)
 8017cd8:	6810      	ldr	r0, [r2, #0]
 8017cda:	6018      	str	r0, [r3, #0]
			break;
 8017cdc:	f003 b866 	b.w	801adac <problem_fetch+0x19a8c>
		case 736 :
			strcpy(p->name,"POCKET FULL OF DREAMS");
 8017ce0:	687b      	ldr	r3, [r7, #4]
 8017ce2:	337c      	adds	r3, #124	; 0x7c
 8017ce4:	4a35      	ldr	r2, [pc, #212]	; (8017dbc <problem_fetch+0x16a9c>)
 8017ce6:	461d      	mov	r5, r3
 8017ce8:	4614      	mov	r4, r2
 8017cea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8017cec:	6028      	str	r0, [r5, #0]
 8017cee:	6069      	str	r1, [r5, #4]
 8017cf0:	60aa      	str	r2, [r5, #8]
 8017cf2:	60eb      	str	r3, [r5, #12]
 8017cf4:	6820      	ldr	r0, [r4, #0]
 8017cf6:	6128      	str	r0, [r5, #16]
 8017cf8:	88a3      	ldrh	r3, [r4, #4]
 8017cfa:	82ab      	strh	r3, [r5, #20]
			p->moveSize = 8;
 8017cfc:	687b      	ldr	r3, [r7, #4]
 8017cfe:	2208      	movs	r2, #8
 8017d00:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"G,E,E,B,B,A,E,D");
 8017d02:	687b      	ldr	r3, [r7, #4]
 8017d04:	3340      	adds	r3, #64	; 0x40
 8017d06:	4a2e      	ldr	r2, [pc, #184]	; (8017dc0 <problem_fetch+0x16aa0>)
 8017d08:	461c      	mov	r4, r3
 8017d0a:	4615      	mov	r5, r2
 8017d0c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8017d0e:	6020      	str	r0, [r4, #0]
 8017d10:	6061      	str	r1, [r4, #4]
 8017d12:	60a2      	str	r2, [r4, #8]
 8017d14:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,8,9,10,12,14,14,18");
 8017d16:	687b      	ldr	r3, [r7, #4]
 8017d18:	3304      	adds	r3, #4
 8017d1a:	4a2a      	ldr	r2, [pc, #168]	; (8017dc4 <problem_fetch+0x16aa4>)
 8017d1c:	461d      	mov	r5, r3
 8017d1e:	4614      	mov	r4, r2
 8017d20:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8017d22:	6028      	str	r0, [r5, #0]
 8017d24:	6069      	str	r1, [r5, #4]
 8017d26:	60aa      	str	r2, [r5, #8]
 8017d28:	60eb      	str	r3, [r5, #12]
 8017d2a:	6820      	ldr	r0, [r4, #0]
 8017d2c:	6128      	str	r0, [r5, #16]
 8017d2e:	7923      	ldrb	r3, [r4, #4]
 8017d30:	752b      	strb	r3, [r5, #20]
			strcpy(p->startFinish, "s,d,d,d,d,d,d,e");
 8017d32:	687b      	ldr	r3, [r7, #4]
 8017d34:	33d8      	adds	r3, #216	; 0xd8
 8017d36:	4a24      	ldr	r2, [pc, #144]	; (8017dc8 <problem_fetch+0x16aa8>)
 8017d38:	461c      	mov	r4, r3
 8017d3a:	4615      	mov	r5, r2
 8017d3c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8017d3e:	6020      	str	r0, [r4, #0]
 8017d40:	6061      	str	r1, [r4, #4]
 8017d42:	60a2      	str	r2, [r4, #8]
 8017d44:	60e3      	str	r3, [r4, #12]
			strcpy(p->grade, "6B+");
 8017d46:	687b      	ldr	r3, [r7, #4]
 8017d48:	33cc      	adds	r3, #204	; 0xcc
 8017d4a:	4a0b      	ldr	r2, [pc, #44]	; (8017d78 <problem_fetch+0x16a58>)
 8017d4c:	6810      	ldr	r0, [r2, #0]
 8017d4e:	6018      	str	r0, [r3, #0]
			break;
 8017d50:	f003 b82c 	b.w	801adac <problem_fetch+0x19a8c>
 8017d54:	080295b8 	.word	0x080295b8
 8017d58:	080295c0 	.word	0x080295c0
 8017d5c:	080295d4 	.word	0x080295d4
 8017d60:	0802187c 	.word	0x0802187c
 8017d64:	08021370 	.word	0x08021370
 8017d68:	080295ec 	.word	0x080295ec
 8017d6c:	08029600 	.word	0x08029600
 8017d70:	080236a4 	.word	0x080236a4
 8017d74:	0802139c 	.word	0x0802139c
 8017d78:	080212b0 	.word	0x080212b0
 8017d7c:	0802960c 	.word	0x0802960c
 8017d80:	08029618 	.word	0x08029618
 8017d84:	08029624 	.word	0x08029624
 8017d88:	08021910 	.word	0x08021910
 8017d8c:	080212f4 	.word	0x080212f4
 8017d90:	08029634 	.word	0x08029634
 8017d94:	0802963c 	.word	0x0802963c
 8017d98:	08029650 	.word	0x08029650
 8017d9c:	0802966c 	.word	0x0802966c
 8017da0:	08029680 	.word	0x08029680
 8017da4:	0802968c 	.word	0x0802968c
 8017da8:	08029698 	.word	0x08029698
 8017dac:	080213a8 	.word	0x080213a8
 8017db0:	080296a8 	.word	0x080296a8
 8017db4:	080296b0 	.word	0x080296b0
 8017db8:	080296bc 	.word	0x080296bc
 8017dbc:	080296cc 	.word	0x080296cc
 8017dc0:	080296e4 	.word	0x080296e4
 8017dc4:	080296f4 	.word	0x080296f4
 8017dc8:	08021458 	.word	0x08021458
		case 737 :
			strcpy(p->name,"LADYBUG CLEAN");
 8017dcc:	687b      	ldr	r3, [r7, #4]
 8017dce:	337c      	adds	r3, #124	; 0x7c
 8017dd0:	4ab7      	ldr	r2, [pc, #732]	; (80180b0 <problem_fetch+0x16d90>)
 8017dd2:	461c      	mov	r4, r3
 8017dd4:	4613      	mov	r3, r2
 8017dd6:	cb07      	ldmia	r3!, {r0, r1, r2}
 8017dd8:	6020      	str	r0, [r4, #0]
 8017dda:	6061      	str	r1, [r4, #4]
 8017ddc:	60a2      	str	r2, [r4, #8]
 8017dde:	881b      	ldrh	r3, [r3, #0]
 8017de0:	81a3      	strh	r3, [r4, #12]
			p->moveSize = 6;
 8017de2:	687b      	ldr	r3, [r7, #4]
 8017de4:	2206      	movs	r2, #6
 8017de6:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"J,G,H,F,C,D");
 8017de8:	687b      	ldr	r3, [r7, #4]
 8017dea:	3340      	adds	r3, #64	; 0x40
 8017dec:	4ab1      	ldr	r2, [pc, #708]	; (80180b4 <problem_fetch+0x16d94>)
 8017dee:	461c      	mov	r4, r3
 8017df0:	4613      	mov	r3, r2
 8017df2:	cb07      	ldmia	r3!, {r0, r1, r2}
 8017df4:	6020      	str	r0, [r4, #0]
 8017df6:	6061      	str	r1, [r4, #4]
 8017df8:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,6,10,11,13,18");
 8017dfa:	687b      	ldr	r3, [r7, #4]
 8017dfc:	3304      	adds	r3, #4
 8017dfe:	4aae      	ldr	r2, [pc, #696]	; (80180b8 <problem_fetch+0x16d98>)
 8017e00:	461c      	mov	r4, r3
 8017e02:	4615      	mov	r5, r2
 8017e04:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8017e06:	6020      	str	r0, [r4, #0]
 8017e08:	6061      	str	r1, [r4, #4]
 8017e0a:	60a2      	str	r2, [r4, #8]
 8017e0c:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish, "s,s,d,d,d,e");
 8017e0e:	687b      	ldr	r3, [r7, #4]
 8017e10:	33d8      	adds	r3, #216	; 0xd8
 8017e12:	4aaa      	ldr	r2, [pc, #680]	; (80180bc <problem_fetch+0x16d9c>)
 8017e14:	461c      	mov	r4, r3
 8017e16:	4613      	mov	r3, r2
 8017e18:	cb07      	ldmia	r3!, {r0, r1, r2}
 8017e1a:	6020      	str	r0, [r4, #0]
 8017e1c:	6061      	str	r1, [r4, #4]
 8017e1e:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade, "7A+");
 8017e20:	687b      	ldr	r3, [r7, #4]
 8017e22:	33cc      	adds	r3, #204	; 0xcc
 8017e24:	4aa6      	ldr	r2, [pc, #664]	; (80180c0 <problem_fetch+0x16da0>)
 8017e26:	6810      	ldr	r0, [r2, #0]
 8017e28:	6018      	str	r0, [r3, #0]
			break;
 8017e2a:	f002 bfbf 	b.w	801adac <problem_fetch+0x19a8c>
		case 738 :
			strcpy(p->name,"BLACK BLOCK X");
 8017e2e:	687b      	ldr	r3, [r7, #4]
 8017e30:	337c      	adds	r3, #124	; 0x7c
 8017e32:	4aa4      	ldr	r2, [pc, #656]	; (80180c4 <problem_fetch+0x16da4>)
 8017e34:	461c      	mov	r4, r3
 8017e36:	4613      	mov	r3, r2
 8017e38:	cb07      	ldmia	r3!, {r0, r1, r2}
 8017e3a:	6020      	str	r0, [r4, #0]
 8017e3c:	6061      	str	r1, [r4, #4]
 8017e3e:	60a2      	str	r2, [r4, #8]
 8017e40:	881b      	ldrh	r3, [r3, #0]
 8017e42:	81a3      	strh	r3, [r4, #12]
			p->moveSize = 8;
 8017e44:	687b      	ldr	r3, [r7, #4]
 8017e46:	2208      	movs	r2, #8
 8017e48:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"G,E,H,H,I,G,I,E");
 8017e4a:	687b      	ldr	r3, [r7, #4]
 8017e4c:	3340      	adds	r3, #64	; 0x40
 8017e4e:	4a9e      	ldr	r2, [pc, #632]	; (80180c8 <problem_fetch+0x16da8>)
 8017e50:	461c      	mov	r4, r3
 8017e52:	4615      	mov	r5, r2
 8017e54:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8017e56:	6020      	str	r0, [r4, #0]
 8017e58:	6061      	str	r1, [r4, #4]
 8017e5a:	60a2      	str	r2, [r4, #8]
 8017e5c:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,8,10,12,14,17,18,6");
 8017e5e:	687b      	ldr	r3, [r7, #4]
 8017e60:	3304      	adds	r3, #4
 8017e62:	4a9a      	ldr	r2, [pc, #616]	; (80180cc <problem_fetch+0x16dac>)
 8017e64:	461d      	mov	r5, r3
 8017e66:	4614      	mov	r4, r2
 8017e68:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8017e6a:	6028      	str	r0, [r5, #0]
 8017e6c:	6069      	str	r1, [r5, #4]
 8017e6e:	60aa      	str	r2, [r5, #8]
 8017e70:	60eb      	str	r3, [r5, #12]
 8017e72:	6820      	ldr	r0, [r4, #0]
 8017e74:	6128      	str	r0, [r5, #16]
 8017e76:	7923      	ldrb	r3, [r4, #4]
 8017e78:	752b      	strb	r3, [r5, #20]
			strcpy(p->startFinish, "s,d,d,d,d,d,e,s");
 8017e7a:	687b      	ldr	r3, [r7, #4]
 8017e7c:	33d8      	adds	r3, #216	; 0xd8
 8017e7e:	4a94      	ldr	r2, [pc, #592]	; (80180d0 <problem_fetch+0x16db0>)
 8017e80:	461c      	mov	r4, r3
 8017e82:	4615      	mov	r5, r2
 8017e84:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8017e86:	6020      	str	r0, [r4, #0]
 8017e88:	6061      	str	r1, [r4, #4]
 8017e8a:	60a2      	str	r2, [r4, #8]
 8017e8c:	60e3      	str	r3, [r4, #12]
			strcpy(p->grade, "6C");
 8017e8e:	687b      	ldr	r3, [r7, #4]
 8017e90:	33cc      	adds	r3, #204	; 0xcc
 8017e92:	4a90      	ldr	r2, [pc, #576]	; (80180d4 <problem_fetch+0x16db4>)
 8017e94:	8811      	ldrh	r1, [r2, #0]
 8017e96:	7892      	ldrb	r2, [r2, #2]
 8017e98:	8019      	strh	r1, [r3, #0]
 8017e9a:	709a      	strb	r2, [r3, #2]
			break;
 8017e9c:	f002 bf86 	b.w	801adac <problem_fetch+0x19a8c>
		case 739 :
			strcpy(p->name,"INVERTIDOSO");
 8017ea0:	687b      	ldr	r3, [r7, #4]
 8017ea2:	337c      	adds	r3, #124	; 0x7c
 8017ea4:	4a8c      	ldr	r2, [pc, #560]	; (80180d8 <problem_fetch+0x16db8>)
 8017ea6:	461c      	mov	r4, r3
 8017ea8:	4613      	mov	r3, r2
 8017eaa:	cb07      	ldmia	r3!, {r0, r1, r2}
 8017eac:	6020      	str	r0, [r4, #0]
 8017eae:	6061      	str	r1, [r4, #4]
 8017eb0:	60a2      	str	r2, [r4, #8]
			p->moveSize = 5;
 8017eb2:	687b      	ldr	r3, [r7, #4]
 8017eb4:	2205      	movs	r2, #5
 8017eb6:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"G,C,I,F,I");
 8017eb8:	687b      	ldr	r3, [r7, #4]
 8017eba:	3340      	adds	r3, #64	; 0x40
 8017ebc:	4987      	ldr	r1, [pc, #540]	; (80180dc <problem_fetch+0x16dbc>)
 8017ebe:	461a      	mov	r2, r3
 8017ec0:	460b      	mov	r3, r1
 8017ec2:	cb03      	ldmia	r3!, {r0, r1}
 8017ec4:	6010      	str	r0, [r2, #0]
 8017ec6:	6051      	str	r1, [r2, #4]
 8017ec8:	881b      	ldrh	r3, [r3, #0]
 8017eca:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"4,8,9,13,18");
 8017ecc:	687b      	ldr	r3, [r7, #4]
 8017ece:	3304      	adds	r3, #4
 8017ed0:	4a83      	ldr	r2, [pc, #524]	; (80180e0 <problem_fetch+0x16dc0>)
 8017ed2:	461c      	mov	r4, r3
 8017ed4:	4613      	mov	r3, r2
 8017ed6:	cb07      	ldmia	r3!, {r0, r1, r2}
 8017ed8:	6020      	str	r0, [r4, #0]
 8017eda:	6061      	str	r1, [r4, #4]
 8017edc:	60a2      	str	r2, [r4, #8]
			strcpy(p->startFinish, "s,d,d,d,e");
 8017ede:	687b      	ldr	r3, [r7, #4]
 8017ee0:	33d8      	adds	r3, #216	; 0xd8
 8017ee2:	4980      	ldr	r1, [pc, #512]	; (80180e4 <problem_fetch+0x16dc4>)
 8017ee4:	461a      	mov	r2, r3
 8017ee6:	460b      	mov	r3, r1
 8017ee8:	cb03      	ldmia	r3!, {r0, r1}
 8017eea:	6010      	str	r0, [r2, #0]
 8017eec:	6051      	str	r1, [r2, #4]
 8017eee:	881b      	ldrh	r3, [r3, #0]
 8017ef0:	8113      	strh	r3, [r2, #8]
			strcpy(p->grade, "7B");
 8017ef2:	687b      	ldr	r3, [r7, #4]
 8017ef4:	33cc      	adds	r3, #204	; 0xcc
 8017ef6:	4a7c      	ldr	r2, [pc, #496]	; (80180e8 <problem_fetch+0x16dc8>)
 8017ef8:	8811      	ldrh	r1, [r2, #0]
 8017efa:	7892      	ldrb	r2, [r2, #2]
 8017efc:	8019      	strh	r1, [r3, #0]
 8017efe:	709a      	strb	r2, [r3, #2]
			break;
 8017f00:	f002 bf54 	b.w	801adac <problem_fetch+0x19a8c>
		case 74 :
			strcpy(p->name,"TIA");
 8017f04:	687b      	ldr	r3, [r7, #4]
 8017f06:	337c      	adds	r3, #124	; 0x7c
 8017f08:	4a78      	ldr	r2, [pc, #480]	; (80180ec <problem_fetch+0x16dcc>)
 8017f0a:	6810      	ldr	r0, [r2, #0]
 8017f0c:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 8017f0e:	687b      	ldr	r3, [r7, #4]
 8017f10:	2207      	movs	r2, #7
 8017f12:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"G,E,F,E,I,H,I");
 8017f14:	687b      	ldr	r3, [r7, #4]
 8017f16:	3340      	adds	r3, #64	; 0x40
 8017f18:	4a75      	ldr	r2, [pc, #468]	; (80180f0 <problem_fetch+0x16dd0>)
 8017f1a:	461c      	mov	r4, r3
 8017f1c:	4613      	mov	r3, r2
 8017f1e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8017f20:	6020      	str	r0, [r4, #0]
 8017f22:	6061      	str	r1, [r4, #4]
 8017f24:	60a2      	str	r2, [r4, #8]
 8017f26:	881b      	ldrh	r3, [r3, #0]
 8017f28:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,8,11,12,14,16,18");
 8017f2a:	687b      	ldr	r3, [r7, #4]
 8017f2c:	3304      	adds	r3, #4
 8017f2e:	4a71      	ldr	r2, [pc, #452]	; (80180f4 <problem_fetch+0x16dd4>)
 8017f30:	461d      	mov	r5, r3
 8017f32:	4614      	mov	r4, r2
 8017f34:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8017f36:	6028      	str	r0, [r5, #0]
 8017f38:	6069      	str	r1, [r5, #4]
 8017f3a:	60aa      	str	r2, [r5, #8]
 8017f3c:	60eb      	str	r3, [r5, #12]
 8017f3e:	8823      	ldrh	r3, [r4, #0]
 8017f40:	78a2      	ldrb	r2, [r4, #2]
 8017f42:	822b      	strh	r3, [r5, #16]
 8017f44:	4613      	mov	r3, r2
 8017f46:	74ab      	strb	r3, [r5, #18]
			strcpy(p->startFinish, "s,d,d,d,d,d,e");
 8017f48:	687b      	ldr	r3, [r7, #4]
 8017f4a:	33d8      	adds	r3, #216	; 0xd8
 8017f4c:	4a6a      	ldr	r2, [pc, #424]	; (80180f8 <problem_fetch+0x16dd8>)
 8017f4e:	461c      	mov	r4, r3
 8017f50:	4613      	mov	r3, r2
 8017f52:	cb07      	ldmia	r3!, {r0, r1, r2}
 8017f54:	6020      	str	r0, [r4, #0]
 8017f56:	6061      	str	r1, [r4, #4]
 8017f58:	60a2      	str	r2, [r4, #8]
 8017f5a:	881b      	ldrh	r3, [r3, #0]
 8017f5c:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade, "6B+");
 8017f5e:	687b      	ldr	r3, [r7, #4]
 8017f60:	33cc      	adds	r3, #204	; 0xcc
 8017f62:	4a66      	ldr	r2, [pc, #408]	; (80180fc <problem_fetch+0x16ddc>)
 8017f64:	6810      	ldr	r0, [r2, #0]
 8017f66:	6018      	str	r0, [r3, #0]
			break;
 8017f68:	f002 bf20 	b.w	801adac <problem_fetch+0x19a8c>
		case 740 :
			strcpy(p->name,"TORCI SPALLA");
 8017f6c:	687b      	ldr	r3, [r7, #4]
 8017f6e:	337c      	adds	r3, #124	; 0x7c
 8017f70:	4a63      	ldr	r2, [pc, #396]	; (8018100 <problem_fetch+0x16de0>)
 8017f72:	461c      	mov	r4, r3
 8017f74:	4613      	mov	r3, r2
 8017f76:	cb07      	ldmia	r3!, {r0, r1, r2}
 8017f78:	6020      	str	r0, [r4, #0]
 8017f7a:	6061      	str	r1, [r4, #4]
 8017f7c:	60a2      	str	r2, [r4, #8]
 8017f7e:	781b      	ldrb	r3, [r3, #0]
 8017f80:	7323      	strb	r3, [r4, #12]
			p->moveSize = 8;
 8017f82:	687b      	ldr	r3, [r7, #4]
 8017f84:	2208      	movs	r2, #8
 8017f86:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"E,H,F,E,A,B,G,I");
 8017f88:	687b      	ldr	r3, [r7, #4]
 8017f8a:	3340      	adds	r3, #64	; 0x40
 8017f8c:	4a5d      	ldr	r2, [pc, #372]	; (8018104 <problem_fetch+0x16de4>)
 8017f8e:	461c      	mov	r4, r3
 8017f90:	4615      	mov	r5, r2
 8017f92:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8017f94:	6020      	str	r0, [r4, #0]
 8017f96:	6061      	str	r1, [r4, #4]
 8017f98:	60a2      	str	r2, [r4, #8]
 8017f9a:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"6,10,11,12,14,15,17,18");
 8017f9c:	687b      	ldr	r3, [r7, #4]
 8017f9e:	3304      	adds	r3, #4
 8017fa0:	4a59      	ldr	r2, [pc, #356]	; (8018108 <problem_fetch+0x16de8>)
 8017fa2:	461c      	mov	r4, r3
 8017fa4:	4615      	mov	r5, r2
 8017fa6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8017fa8:	6020      	str	r0, [r4, #0]
 8017faa:	6061      	str	r1, [r4, #4]
 8017fac:	60a2      	str	r2, [r4, #8]
 8017fae:	60e3      	str	r3, [r4, #12]
 8017fb0:	6828      	ldr	r0, [r5, #0]
 8017fb2:	6120      	str	r0, [r4, #16]
 8017fb4:	88ab      	ldrh	r3, [r5, #4]
 8017fb6:	79aa      	ldrb	r2, [r5, #6]
 8017fb8:	82a3      	strh	r3, [r4, #20]
 8017fba:	4613      	mov	r3, r2
 8017fbc:	75a3      	strb	r3, [r4, #22]
			strcpy(p->startFinish, "s,d,d,d,d,d,d,e");
 8017fbe:	687b      	ldr	r3, [r7, #4]
 8017fc0:	33d8      	adds	r3, #216	; 0xd8
 8017fc2:	4a52      	ldr	r2, [pc, #328]	; (801810c <problem_fetch+0x16dec>)
 8017fc4:	461c      	mov	r4, r3
 8017fc6:	4615      	mov	r5, r2
 8017fc8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8017fca:	6020      	str	r0, [r4, #0]
 8017fcc:	6061      	str	r1, [r4, #4]
 8017fce:	60a2      	str	r2, [r4, #8]
 8017fd0:	60e3      	str	r3, [r4, #12]
			strcpy(p->grade, "7B+");
 8017fd2:	687b      	ldr	r3, [r7, #4]
 8017fd4:	33cc      	adds	r3, #204	; 0xcc
 8017fd6:	4a4e      	ldr	r2, [pc, #312]	; (8018110 <problem_fetch+0x16df0>)
 8017fd8:	6810      	ldr	r0, [r2, #0]
 8017fda:	6018      	str	r0, [r3, #0]
			break;
 8017fdc:	f002 bee6 	b.w	801adac <problem_fetch+0x19a8c>
		case 741 :
			strcpy(p->name,"POALET");
 8017fe0:	687b      	ldr	r3, [r7, #4]
 8017fe2:	337c      	adds	r3, #124	; 0x7c
 8017fe4:	4a4b      	ldr	r2, [pc, #300]	; (8018114 <problem_fetch+0x16df4>)
 8017fe6:	6810      	ldr	r0, [r2, #0]
 8017fe8:	6018      	str	r0, [r3, #0]
 8017fea:	8891      	ldrh	r1, [r2, #4]
 8017fec:	7992      	ldrb	r2, [r2, #6]
 8017fee:	8099      	strh	r1, [r3, #4]
 8017ff0:	719a      	strb	r2, [r3, #6]
			p->moveSize = 7;
 8017ff2:	687b      	ldr	r3, [r7, #4]
 8017ff4:	2207      	movs	r2, #7
 8017ff6:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"H,D,I,E,I,J,G");
 8017ff8:	687b      	ldr	r3, [r7, #4]
 8017ffa:	3340      	adds	r3, #64	; 0x40
 8017ffc:	4a46      	ldr	r2, [pc, #280]	; (8018118 <problem_fetch+0x16df8>)
 8017ffe:	461c      	mov	r4, r3
 8018000:	4613      	mov	r3, r2
 8018002:	cb07      	ldmia	r3!, {r0, r1, r2}
 8018004:	6020      	str	r0, [r4, #0]
 8018006:	6061      	str	r1, [r4, #4]
 8018008:	60a2      	str	r2, [r4, #8]
 801800a:	881b      	ldrh	r3, [r3, #0]
 801800c:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"10,11,14,16,18,7,6");
 801800e:	687b      	ldr	r3, [r7, #4]
 8018010:	3304      	adds	r3, #4
 8018012:	4a42      	ldr	r2, [pc, #264]	; (801811c <problem_fetch+0x16dfc>)
 8018014:	461d      	mov	r5, r3
 8018016:	4614      	mov	r4, r2
 8018018:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801801a:	6028      	str	r0, [r5, #0]
 801801c:	6069      	str	r1, [r5, #4]
 801801e:	60aa      	str	r2, [r5, #8]
 8018020:	60eb      	str	r3, [r5, #12]
 8018022:	8823      	ldrh	r3, [r4, #0]
 8018024:	78a2      	ldrb	r2, [r4, #2]
 8018026:	822b      	strh	r3, [r5, #16]
 8018028:	4613      	mov	r3, r2
 801802a:	74ab      	strb	r3, [r5, #18]
			strcpy(p->startFinish, "d,d,d,d,e,d,s");
 801802c:	687b      	ldr	r3, [r7, #4]
 801802e:	33d8      	adds	r3, #216	; 0xd8
 8018030:	4a3b      	ldr	r2, [pc, #236]	; (8018120 <problem_fetch+0x16e00>)
 8018032:	461c      	mov	r4, r3
 8018034:	4613      	mov	r3, r2
 8018036:	cb07      	ldmia	r3!, {r0, r1, r2}
 8018038:	6020      	str	r0, [r4, #0]
 801803a:	6061      	str	r1, [r4, #4]
 801803c:	60a2      	str	r2, [r4, #8]
 801803e:	881b      	ldrh	r3, [r3, #0]
 8018040:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade, "6C");
 8018042:	687b      	ldr	r3, [r7, #4]
 8018044:	33cc      	adds	r3, #204	; 0xcc
 8018046:	4a23      	ldr	r2, [pc, #140]	; (80180d4 <problem_fetch+0x16db4>)
 8018048:	8811      	ldrh	r1, [r2, #0]
 801804a:	7892      	ldrb	r2, [r2, #2]
 801804c:	8019      	strh	r1, [r3, #0]
 801804e:	709a      	strb	r2, [r3, #2]
			break;
 8018050:	f002 beac 	b.w	801adac <problem_fetch+0x19a8c>
		case 742 :
			strcpy(p->name,"YURP");
 8018054:	687b      	ldr	r3, [r7, #4]
 8018056:	337c      	adds	r3, #124	; 0x7c
 8018058:	4a32      	ldr	r2, [pc, #200]	; (8018124 <problem_fetch+0x16e04>)
 801805a:	6810      	ldr	r0, [r2, #0]
 801805c:	6018      	str	r0, [r3, #0]
 801805e:	7912      	ldrb	r2, [r2, #4]
 8018060:	711a      	strb	r2, [r3, #4]
			p->moveSize = 6;
 8018062:	687b      	ldr	r3, [r7, #4]
 8018064:	2206      	movs	r2, #6
 8018066:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"G,H,G,J,G,I");
 8018068:	687b      	ldr	r3, [r7, #4]
 801806a:	3340      	adds	r3, #64	; 0x40
 801806c:	4a2e      	ldr	r2, [pc, #184]	; (8018128 <problem_fetch+0x16e08>)
 801806e:	461c      	mov	r4, r3
 8018070:	4613      	mov	r3, r2
 8018072:	cb07      	ldmia	r3!, {r0, r1, r2}
 8018074:	6020      	str	r0, [r4, #0]
 8018076:	6061      	str	r1, [r4, #4]
 8018078:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,8,10,12,14,18");
 801807a:	687b      	ldr	r3, [r7, #4]
 801807c:	3304      	adds	r3, #4
 801807e:	4a2b      	ldr	r2, [pc, #172]	; (801812c <problem_fetch+0x16e0c>)
 8018080:	461c      	mov	r4, r3
 8018082:	4615      	mov	r5, r2
 8018084:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8018086:	6020      	str	r0, [r4, #0]
 8018088:	6061      	str	r1, [r4, #4]
 801808a:	60a2      	str	r2, [r4, #8]
 801808c:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish, "s,d,d,d,d,e");
 801808e:	687b      	ldr	r3, [r7, #4]
 8018090:	33d8      	adds	r3, #216	; 0xd8
 8018092:	4a27      	ldr	r2, [pc, #156]	; (8018130 <problem_fetch+0x16e10>)
 8018094:	461c      	mov	r4, r3
 8018096:	4613      	mov	r3, r2
 8018098:	cb07      	ldmia	r3!, {r0, r1, r2}
 801809a:	6020      	str	r0, [r4, #0]
 801809c:	6061      	str	r1, [r4, #4]
 801809e:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade, "6B+");
 80180a0:	687b      	ldr	r3, [r7, #4]
 80180a2:	33cc      	adds	r3, #204	; 0xcc
 80180a4:	4a15      	ldr	r2, [pc, #84]	; (80180fc <problem_fetch+0x16ddc>)
 80180a6:	6810      	ldr	r0, [r2, #0]
 80180a8:	6018      	str	r0, [r3, #0]
			break;
 80180aa:	f002 be7f 	b.w	801adac <problem_fetch+0x19a8c>
 80180ae:	bf00      	nop
 80180b0:	0802970c 	.word	0x0802970c
 80180b4:	0802971c 	.word	0x0802971c
 80180b8:	08029728 	.word	0x08029728
 80180bc:	08021910 	.word	0x08021910
 80180c0:	08021424 	.word	0x08021424
 80180c4:	08029738 	.word	0x08029738
 80180c8:	08029748 	.word	0x08029748
 80180cc:	08029758 	.word	0x08029758
 80180d0:	08029770 	.word	0x08029770
 80180d4:	08021370 	.word	0x08021370
 80180d8:	08029780 	.word	0x08029780
 80180dc:	0802978c 	.word	0x0802978c
 80180e0:	08025580 	.word	0x08025580
 80180e4:	08021320 	.word	0x08021320
 80180e8:	0802132c 	.word	0x0802132c
 80180ec:	08029798 	.word	0x08029798
 80180f0:	0802979c 	.word	0x0802979c
 80180f4:	080297ac 	.word	0x080297ac
 80180f8:	08021494 	.word	0x08021494
 80180fc:	080212b0 	.word	0x080212b0
 8018100:	080297c0 	.word	0x080297c0
 8018104:	080297d0 	.word	0x080297d0
 8018108:	080297e0 	.word	0x080297e0
 801810c:	08021458 	.word	0x08021458
 8018110:	08021848 	.word	0x08021848
 8018114:	080297f8 	.word	0x080297f8
 8018118:	08029800 	.word	0x08029800
 801811c:	08029810 	.word	0x08029810
 8018120:	08029450 	.word	0x08029450
 8018124:	08029824 	.word	0x08029824
 8018128:	0802982c 	.word	0x0802982c
 801812c:	08029838 	.word	0x08029838
 8018130:	0802139c 	.word	0x0802139c
		case 743 :
			strcpy(p->name,"V7 ANOS DE AEP");
 8018134:	687b      	ldr	r3, [r7, #4]
 8018136:	337c      	adds	r3, #124	; 0x7c
 8018138:	4abd      	ldr	r2, [pc, #756]	; (8018430 <problem_fetch+0x17110>)
 801813a:	461c      	mov	r4, r3
 801813c:	4613      	mov	r3, r2
 801813e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8018140:	6020      	str	r0, [r4, #0]
 8018142:	6061      	str	r1, [r4, #4]
 8018144:	60a2      	str	r2, [r4, #8]
 8018146:	881a      	ldrh	r2, [r3, #0]
 8018148:	789b      	ldrb	r3, [r3, #2]
 801814a:	81a2      	strh	r2, [r4, #12]
 801814c:	73a3      	strb	r3, [r4, #14]
			p->moveSize = 6;
 801814e:	687b      	ldr	r3, [r7, #4]
 8018150:	2206      	movs	r2, #6
 8018152:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"G,G,H,J,G,I");
 8018154:	687b      	ldr	r3, [r7, #4]
 8018156:	3340      	adds	r3, #64	; 0x40
 8018158:	4ab6      	ldr	r2, [pc, #728]	; (8018434 <problem_fetch+0x17114>)
 801815a:	461c      	mov	r4, r3
 801815c:	4613      	mov	r3, r2
 801815e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8018160:	6020      	str	r0, [r4, #0]
 8018162:	6061      	str	r1, [r4, #4]
 8018164:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,9,8,12,15,18");
 8018166:	687b      	ldr	r3, [r7, #4]
 8018168:	3304      	adds	r3, #4
 801816a:	4ab3      	ldr	r2, [pc, #716]	; (8018438 <problem_fetch+0x17118>)
 801816c:	461c      	mov	r4, r3
 801816e:	4613      	mov	r3, r2
 8018170:	cb07      	ldmia	r3!, {r0, r1, r2}
 8018172:	6020      	str	r0, [r4, #0]
 8018174:	6061      	str	r1, [r4, #4]
 8018176:	60a2      	str	r2, [r4, #8]
 8018178:	881a      	ldrh	r2, [r3, #0]
 801817a:	789b      	ldrb	r3, [r3, #2]
 801817c:	81a2      	strh	r2, [r4, #12]
 801817e:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish, "s,d,d,d,d,e");
 8018180:	687b      	ldr	r3, [r7, #4]
 8018182:	33d8      	adds	r3, #216	; 0xd8
 8018184:	4aad      	ldr	r2, [pc, #692]	; (801843c <problem_fetch+0x1711c>)
 8018186:	461c      	mov	r4, r3
 8018188:	4613      	mov	r3, r2
 801818a:	cb07      	ldmia	r3!, {r0, r1, r2}
 801818c:	6020      	str	r0, [r4, #0]
 801818e:	6061      	str	r1, [r4, #4]
 8018190:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade, "7A+");
 8018192:	687b      	ldr	r3, [r7, #4]
 8018194:	33cc      	adds	r3, #204	; 0xcc
 8018196:	4aaa      	ldr	r2, [pc, #680]	; (8018440 <problem_fetch+0x17120>)
 8018198:	6810      	ldr	r0, [r2, #0]
 801819a:	6018      	str	r0, [r3, #0]
			break;
 801819c:	f002 be06 	b.w	801adac <problem_fetch+0x19a8c>
		case 744 :
			strcpy(p->name,"KOKURYU");
 80181a0:	687b      	ldr	r3, [r7, #4]
 80181a2:	337c      	adds	r3, #124	; 0x7c
 80181a4:	49a7      	ldr	r1, [pc, #668]	; (8018444 <problem_fetch+0x17124>)
 80181a6:	461a      	mov	r2, r3
 80181a8:	460b      	mov	r3, r1
 80181aa:	cb03      	ldmia	r3!, {r0, r1}
 80181ac:	6010      	str	r0, [r2, #0]
 80181ae:	6051      	str	r1, [r2, #4]
			p->moveSize = 7;
 80181b0:	687b      	ldr	r3, [r7, #4]
 80181b2:	2207      	movs	r2, #7
 80181b4:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"G,E,G,D,G,E,I");
 80181b6:	687b      	ldr	r3, [r7, #4]
 80181b8:	3340      	adds	r3, #64	; 0x40
 80181ba:	4aa3      	ldr	r2, [pc, #652]	; (8018448 <problem_fetch+0x17128>)
 80181bc:	461c      	mov	r4, r3
 80181be:	4613      	mov	r3, r2
 80181c0:	cb07      	ldmia	r3!, {r0, r1, r2}
 80181c2:	6020      	str	r0, [r4, #0]
 80181c4:	6061      	str	r1, [r4, #4]
 80181c6:	60a2      	str	r2, [r4, #8]
 80181c8:	881b      	ldrh	r3, [r3, #0]
 80181ca:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,6,9,11,14,16,18");
 80181cc:	687b      	ldr	r3, [r7, #4]
 80181ce:	3304      	adds	r3, #4
 80181d0:	4a9e      	ldr	r2, [pc, #632]	; (801844c <problem_fetch+0x1712c>)
 80181d2:	461d      	mov	r5, r3
 80181d4:	4614      	mov	r4, r2
 80181d6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80181d8:	6028      	str	r0, [r5, #0]
 80181da:	6069      	str	r1, [r5, #4]
 80181dc:	60aa      	str	r2, [r5, #8]
 80181de:	60eb      	str	r3, [r5, #12]
 80181e0:	8823      	ldrh	r3, [r4, #0]
 80181e2:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish, "s,s,d,d,d,d,e");
 80181e4:	687b      	ldr	r3, [r7, #4]
 80181e6:	33d8      	adds	r3, #216	; 0xd8
 80181e8:	4a99      	ldr	r2, [pc, #612]	; (8018450 <problem_fetch+0x17130>)
 80181ea:	461c      	mov	r4, r3
 80181ec:	4613      	mov	r3, r2
 80181ee:	cb07      	ldmia	r3!, {r0, r1, r2}
 80181f0:	6020      	str	r0, [r4, #0]
 80181f2:	6061      	str	r1, [r4, #4]
 80181f4:	60a2      	str	r2, [r4, #8]
 80181f6:	881b      	ldrh	r3, [r3, #0]
 80181f8:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade, "6B+");
 80181fa:	687b      	ldr	r3, [r7, #4]
 80181fc:	33cc      	adds	r3, #204	; 0xcc
 80181fe:	4a95      	ldr	r2, [pc, #596]	; (8018454 <problem_fetch+0x17134>)
 8018200:	6810      	ldr	r0, [r2, #0]
 8018202:	6018      	str	r0, [r3, #0]
			break;
 8018204:	f002 bdd2 	b.w	801adac <problem_fetch+0x19a8c>
		case 745 :
			strcpy(p->name,"CANIGAN");
 8018208:	687b      	ldr	r3, [r7, #4]
 801820a:	337c      	adds	r3, #124	; 0x7c
 801820c:	4992      	ldr	r1, [pc, #584]	; (8018458 <problem_fetch+0x17138>)
 801820e:	461a      	mov	r2, r3
 8018210:	460b      	mov	r3, r1
 8018212:	cb03      	ldmia	r3!, {r0, r1}
 8018214:	6010      	str	r0, [r2, #0]
 8018216:	6051      	str	r1, [r2, #4]
			p->moveSize = 8;
 8018218:	687b      	ldr	r3, [r7, #4]
 801821a:	2208      	movs	r2, #8
 801821c:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"J,K,G,I,F,K,H,I");
 801821e:	687b      	ldr	r3, [r7, #4]
 8018220:	3340      	adds	r3, #64	; 0x40
 8018222:	4a8e      	ldr	r2, [pc, #568]	; (801845c <problem_fetch+0x1713c>)
 8018224:	461c      	mov	r4, r3
 8018226:	4615      	mov	r5, r2
 8018228:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801822a:	6020      	str	r0, [r4, #0]
 801822c:	6061      	str	r1, [r4, #4]
 801822e:	60a2      	str	r2, [r4, #8]
 8018230:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,9,9,10,13,14,16,18");
 8018232:	687b      	ldr	r3, [r7, #4]
 8018234:	3304      	adds	r3, #4
 8018236:	4a8a      	ldr	r2, [pc, #552]	; (8018460 <problem_fetch+0x17140>)
 8018238:	461d      	mov	r5, r3
 801823a:	4614      	mov	r4, r2
 801823c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801823e:	6028      	str	r0, [r5, #0]
 8018240:	6069      	str	r1, [r5, #4]
 8018242:	60aa      	str	r2, [r5, #8]
 8018244:	60eb      	str	r3, [r5, #12]
 8018246:	6820      	ldr	r0, [r4, #0]
 8018248:	6128      	str	r0, [r5, #16]
 801824a:	7923      	ldrb	r3, [r4, #4]
 801824c:	752b      	strb	r3, [r5, #20]
			strcpy(p->startFinish, "s,d,d,d,d,d,d,e");
 801824e:	687b      	ldr	r3, [r7, #4]
 8018250:	33d8      	adds	r3, #216	; 0xd8
 8018252:	4a84      	ldr	r2, [pc, #528]	; (8018464 <problem_fetch+0x17144>)
 8018254:	461c      	mov	r4, r3
 8018256:	4615      	mov	r5, r2
 8018258:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801825a:	6020      	str	r0, [r4, #0]
 801825c:	6061      	str	r1, [r4, #4]
 801825e:	60a2      	str	r2, [r4, #8]
 8018260:	60e3      	str	r3, [r4, #12]
			strcpy(p->grade, "7A");
 8018262:	687b      	ldr	r3, [r7, #4]
 8018264:	33cc      	adds	r3, #204	; 0xcc
 8018266:	4a80      	ldr	r2, [pc, #512]	; (8018468 <problem_fetch+0x17148>)
 8018268:	8811      	ldrh	r1, [r2, #0]
 801826a:	7892      	ldrb	r2, [r2, #2]
 801826c:	8019      	strh	r1, [r3, #0]
 801826e:	709a      	strb	r2, [r3, #2]
			break;
 8018270:	f002 bd9c 	b.w	801adac <problem_fetch+0x19a8c>
		case 746 :
			strcpy(p->name,"BOARDMEETING 3.0");
 8018274:	687b      	ldr	r3, [r7, #4]
 8018276:	337c      	adds	r3, #124	; 0x7c
 8018278:	4a7c      	ldr	r2, [pc, #496]	; (801846c <problem_fetch+0x1714c>)
 801827a:	461d      	mov	r5, r3
 801827c:	4614      	mov	r4, r2
 801827e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8018280:	6028      	str	r0, [r5, #0]
 8018282:	6069      	str	r1, [r5, #4]
 8018284:	60aa      	str	r2, [r5, #8]
 8018286:	60eb      	str	r3, [r5, #12]
 8018288:	7823      	ldrb	r3, [r4, #0]
 801828a:	742b      	strb	r3, [r5, #16]
			p->moveSize = 6;
 801828c:	687b      	ldr	r3, [r7, #4]
 801828e:	2206      	movs	r2, #6
 8018290:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"G,H,H,G,H,D");
 8018292:	687b      	ldr	r3, [r7, #4]
 8018294:	3340      	adds	r3, #64	; 0x40
 8018296:	4a76      	ldr	r2, [pc, #472]	; (8018470 <problem_fetch+0x17150>)
 8018298:	461c      	mov	r4, r3
 801829a:	4613      	mov	r3, r2
 801829c:	cb07      	ldmia	r3!, {r0, r1, r2}
 801829e:	6020      	str	r0, [r4, #0]
 80182a0:	6061      	str	r1, [r4, #4]
 80182a2:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"6,5,10,14,16,18");
 80182a4:	687b      	ldr	r3, [r7, #4]
 80182a6:	3304      	adds	r3, #4
 80182a8:	4a72      	ldr	r2, [pc, #456]	; (8018474 <problem_fetch+0x17154>)
 80182aa:	461c      	mov	r4, r3
 80182ac:	4615      	mov	r5, r2
 80182ae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80182b0:	6020      	str	r0, [r4, #0]
 80182b2:	6061      	str	r1, [r4, #4]
 80182b4:	60a2      	str	r2, [r4, #8]
 80182b6:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish, "s,s,d,d,d,e");
 80182b8:	687b      	ldr	r3, [r7, #4]
 80182ba:	33d8      	adds	r3, #216	; 0xd8
 80182bc:	4a6e      	ldr	r2, [pc, #440]	; (8018478 <problem_fetch+0x17158>)
 80182be:	461c      	mov	r4, r3
 80182c0:	4613      	mov	r3, r2
 80182c2:	cb07      	ldmia	r3!, {r0, r1, r2}
 80182c4:	6020      	str	r0, [r4, #0]
 80182c6:	6061      	str	r1, [r4, #4]
 80182c8:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade, "6C+");
 80182ca:	687b      	ldr	r3, [r7, #4]
 80182cc:	33cc      	adds	r3, #204	; 0xcc
 80182ce:	4a6b      	ldr	r2, [pc, #428]	; (801847c <problem_fetch+0x1715c>)
 80182d0:	6810      	ldr	r0, [r2, #0]
 80182d2:	6018      	str	r0, [r3, #0]
			break;
 80182d4:	f002 bd6a 	b.w	801adac <problem_fetch+0x19a8c>
		case 747 :
			strcpy(p->name,"STRIZZANGELES");
 80182d8:	687b      	ldr	r3, [r7, #4]
 80182da:	337c      	adds	r3, #124	; 0x7c
 80182dc:	4a68      	ldr	r2, [pc, #416]	; (8018480 <problem_fetch+0x17160>)
 80182de:	461c      	mov	r4, r3
 80182e0:	4613      	mov	r3, r2
 80182e2:	cb07      	ldmia	r3!, {r0, r1, r2}
 80182e4:	6020      	str	r0, [r4, #0]
 80182e6:	6061      	str	r1, [r4, #4]
 80182e8:	60a2      	str	r2, [r4, #8]
 80182ea:	881b      	ldrh	r3, [r3, #0]
 80182ec:	81a3      	strh	r3, [r4, #12]
			p->moveSize = 7;
 80182ee:	687b      	ldr	r3, [r7, #4]
 80182f0:	2207      	movs	r2, #7
 80182f2:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"G,C,F,G,J,E,I");
 80182f4:	687b      	ldr	r3, [r7, #4]
 80182f6:	3340      	adds	r3, #64	; 0x40
 80182f8:	4a62      	ldr	r2, [pc, #392]	; (8018484 <problem_fetch+0x17164>)
 80182fa:	461c      	mov	r4, r3
 80182fc:	4613      	mov	r3, r2
 80182fe:	cb07      	ldmia	r3!, {r0, r1, r2}
 8018300:	6020      	str	r0, [r4, #0]
 8018302:	6061      	str	r1, [r4, #4]
 8018304:	60a2      	str	r2, [r4, #8]
 8018306:	881b      	ldrh	r3, [r3, #0]
 8018308:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,8,11,14,7,16,18");
 801830a:	687b      	ldr	r3, [r7, #4]
 801830c:	3304      	adds	r3, #4
 801830e:	4a5e      	ldr	r2, [pc, #376]	; (8018488 <problem_fetch+0x17168>)
 8018310:	461d      	mov	r5, r3
 8018312:	4614      	mov	r4, r2
 8018314:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8018316:	6028      	str	r0, [r5, #0]
 8018318:	6069      	str	r1, [r5, #4]
 801831a:	60aa      	str	r2, [r5, #8]
 801831c:	60eb      	str	r3, [r5, #12]
 801831e:	8823      	ldrh	r3, [r4, #0]
 8018320:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish, "s,d,d,d,d,d,e");
 8018322:	687b      	ldr	r3, [r7, #4]
 8018324:	33d8      	adds	r3, #216	; 0xd8
 8018326:	4a59      	ldr	r2, [pc, #356]	; (801848c <problem_fetch+0x1716c>)
 8018328:	461c      	mov	r4, r3
 801832a:	4613      	mov	r3, r2
 801832c:	cb07      	ldmia	r3!, {r0, r1, r2}
 801832e:	6020      	str	r0, [r4, #0]
 8018330:	6061      	str	r1, [r4, #4]
 8018332:	60a2      	str	r2, [r4, #8]
 8018334:	881b      	ldrh	r3, [r3, #0]
 8018336:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade, "6C+");
 8018338:	687b      	ldr	r3, [r7, #4]
 801833a:	33cc      	adds	r3, #204	; 0xcc
 801833c:	4a4f      	ldr	r2, [pc, #316]	; (801847c <problem_fetch+0x1715c>)
 801833e:	6810      	ldr	r0, [r2, #0]
 8018340:	6018      	str	r0, [r3, #0]
			break;
 8018342:	f002 bd33 	b.w	801adac <problem_fetch+0x19a8c>
		case 748 :
			strcpy(p->name,"MAN IN BLACK");
 8018346:	687b      	ldr	r3, [r7, #4]
 8018348:	337c      	adds	r3, #124	; 0x7c
 801834a:	4a51      	ldr	r2, [pc, #324]	; (8018490 <problem_fetch+0x17170>)
 801834c:	461c      	mov	r4, r3
 801834e:	4613      	mov	r3, r2
 8018350:	cb07      	ldmia	r3!, {r0, r1, r2}
 8018352:	6020      	str	r0, [r4, #0]
 8018354:	6061      	str	r1, [r4, #4]
 8018356:	60a2      	str	r2, [r4, #8]
 8018358:	781b      	ldrb	r3, [r3, #0]
 801835a:	7323      	strb	r3, [r4, #12]
			p->moveSize = 9;
 801835c:	687b      	ldr	r3, [r7, #4]
 801835e:	2209      	movs	r2, #9
 8018360:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"J,J,K,H,I,I,K,I,G");
 8018362:	687b      	ldr	r3, [r7, #4]
 8018364:	3340      	adds	r3, #64	; 0x40
 8018366:	4a4b      	ldr	r2, [pc, #300]	; (8018494 <problem_fetch+0x17174>)
 8018368:	461d      	mov	r5, r3
 801836a:	4614      	mov	r4, r2
 801836c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801836e:	6028      	str	r0, [r5, #0]
 8018370:	6069      	str	r1, [r5, #4]
 8018372:	60aa      	str	r2, [r5, #8]
 8018374:	60eb      	str	r3, [r5, #12]
 8018376:	8823      	ldrh	r3, [r4, #0]
 8018378:	822b      	strh	r3, [r5, #16]
			strcpy(p->moveNumbers,"5,7,9,12,14,15,16,18,4");
 801837a:	687b      	ldr	r3, [r7, #4]
 801837c:	3304      	adds	r3, #4
 801837e:	4a46      	ldr	r2, [pc, #280]	; (8018498 <problem_fetch+0x17178>)
 8018380:	461c      	mov	r4, r3
 8018382:	4615      	mov	r5, r2
 8018384:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8018386:	6020      	str	r0, [r4, #0]
 8018388:	6061      	str	r1, [r4, #4]
 801838a:	60a2      	str	r2, [r4, #8]
 801838c:	60e3      	str	r3, [r4, #12]
 801838e:	6828      	ldr	r0, [r5, #0]
 8018390:	6120      	str	r0, [r4, #16]
 8018392:	88ab      	ldrh	r3, [r5, #4]
 8018394:	79aa      	ldrb	r2, [r5, #6]
 8018396:	82a3      	strh	r3, [r4, #20]
 8018398:	4613      	mov	r3, r2
 801839a:	75a3      	strb	r3, [r4, #22]
			strcpy(p->startFinish, "s,d,d,d,d,d,d,e,s");
 801839c:	687b      	ldr	r3, [r7, #4]
 801839e:	33d8      	adds	r3, #216	; 0xd8
 80183a0:	4a3e      	ldr	r2, [pc, #248]	; (801849c <problem_fetch+0x1717c>)
 80183a2:	461d      	mov	r5, r3
 80183a4:	4614      	mov	r4, r2
 80183a6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80183a8:	6028      	str	r0, [r5, #0]
 80183aa:	6069      	str	r1, [r5, #4]
 80183ac:	60aa      	str	r2, [r5, #8]
 80183ae:	60eb      	str	r3, [r5, #12]
 80183b0:	8823      	ldrh	r3, [r4, #0]
 80183b2:	822b      	strh	r3, [r5, #16]
			strcpy(p->grade, "6B+");
 80183b4:	687b      	ldr	r3, [r7, #4]
 80183b6:	33cc      	adds	r3, #204	; 0xcc
 80183b8:	4a26      	ldr	r2, [pc, #152]	; (8018454 <problem_fetch+0x17134>)
 80183ba:	6810      	ldr	r0, [r2, #0]
 80183bc:	6018      	str	r0, [r3, #0]
			break;
 80183be:	f002 bcf5 	b.w	801adac <problem_fetch+0x19a8c>
		case 749 :
			strcpy(p->name,"THE MOST HIGH");
 80183c2:	687b      	ldr	r3, [r7, #4]
 80183c4:	337c      	adds	r3, #124	; 0x7c
 80183c6:	4a36      	ldr	r2, [pc, #216]	; (80184a0 <problem_fetch+0x17180>)
 80183c8:	461c      	mov	r4, r3
 80183ca:	4613      	mov	r3, r2
 80183cc:	cb07      	ldmia	r3!, {r0, r1, r2}
 80183ce:	6020      	str	r0, [r4, #0]
 80183d0:	6061      	str	r1, [r4, #4]
 80183d2:	60a2      	str	r2, [r4, #8]
 80183d4:	881b      	ldrh	r3, [r3, #0]
 80183d6:	81a3      	strh	r3, [r4, #12]
			p->moveSize = 7;
 80183d8:	687b      	ldr	r3, [r7, #4]
 80183da:	2207      	movs	r2, #7
 80183dc:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"E,H,G,D,G,E,I");
 80183de:	687b      	ldr	r3, [r7, #4]
 80183e0:	3340      	adds	r3, #64	; 0x40
 80183e2:	4a30      	ldr	r2, [pc, #192]	; (80184a4 <problem_fetch+0x17184>)
 80183e4:	461c      	mov	r4, r3
 80183e6:	4613      	mov	r3, r2
 80183e8:	cb07      	ldmia	r3!, {r0, r1, r2}
 80183ea:	6020      	str	r0, [r4, #0]
 80183ec:	6061      	str	r1, [r4, #4]
 80183ee:	60a2      	str	r2, [r4, #8]
 80183f0:	881b      	ldrh	r3, [r3, #0]
 80183f2:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"6,5,9,11,14,16,18");
 80183f4:	687b      	ldr	r3, [r7, #4]
 80183f6:	3304      	adds	r3, #4
 80183f8:	4a2b      	ldr	r2, [pc, #172]	; (80184a8 <problem_fetch+0x17188>)
 80183fa:	461d      	mov	r5, r3
 80183fc:	4614      	mov	r4, r2
 80183fe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8018400:	6028      	str	r0, [r5, #0]
 8018402:	6069      	str	r1, [r5, #4]
 8018404:	60aa      	str	r2, [r5, #8]
 8018406:	60eb      	str	r3, [r5, #12]
 8018408:	8823      	ldrh	r3, [r4, #0]
 801840a:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish, "s,s,d,d,d,d,e");
 801840c:	687b      	ldr	r3, [r7, #4]
 801840e:	33d8      	adds	r3, #216	; 0xd8
 8018410:	4a0f      	ldr	r2, [pc, #60]	; (8018450 <problem_fetch+0x17130>)
 8018412:	461c      	mov	r4, r3
 8018414:	4613      	mov	r3, r2
 8018416:	cb07      	ldmia	r3!, {r0, r1, r2}
 8018418:	6020      	str	r0, [r4, #0]
 801841a:	6061      	str	r1, [r4, #4]
 801841c:	60a2      	str	r2, [r4, #8]
 801841e:	881b      	ldrh	r3, [r3, #0]
 8018420:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade, "6C+");
 8018422:	687b      	ldr	r3, [r7, #4]
 8018424:	33cc      	adds	r3, #204	; 0xcc
 8018426:	4a15      	ldr	r2, [pc, #84]	; (801847c <problem_fetch+0x1715c>)
 8018428:	6810      	ldr	r0, [r2, #0]
 801842a:	6018      	str	r0, [r3, #0]
			break;
 801842c:	f002 bcbe 	b.w	801adac <problem_fetch+0x19a8c>
 8018430:	08029848 	.word	0x08029848
 8018434:	08029858 	.word	0x08029858
 8018438:	08029864 	.word	0x08029864
 801843c:	0802139c 	.word	0x0802139c
 8018440:	08021424 	.word	0x08021424
 8018444:	08029874 	.word	0x08029874
 8018448:	0802987c 	.word	0x0802987c
 801844c:	08028498 	.word	0x08028498
 8018450:	080212a0 	.word	0x080212a0
 8018454:	080212b0 	.word	0x080212b0
 8018458:	0802988c 	.word	0x0802988c
 801845c:	08029894 	.word	0x08029894
 8018460:	080298a4 	.word	0x080298a4
 8018464:	08021458 	.word	0x08021458
 8018468:	080212f4 	.word	0x080212f4
 801846c:	080298bc 	.word	0x080298bc
 8018470:	080298d0 	.word	0x080298d0
 8018474:	080298dc 	.word	0x080298dc
 8018478:	08021910 	.word	0x08021910
 801847c:	080213a8 	.word	0x080213a8
 8018480:	080298ec 	.word	0x080298ec
 8018484:	080298fc 	.word	0x080298fc
 8018488:	0802990c 	.word	0x0802990c
 801848c:	08021494 	.word	0x08021494
 8018490:	08029920 	.word	0x08029920
 8018494:	08029930 	.word	0x08029930
 8018498:	08029944 	.word	0x08029944
 801849c:	08029504 	.word	0x08029504
 80184a0:	0802995c 	.word	0x0802995c
 80184a4:	0802996c 	.word	0x0802996c
 80184a8:	080237c4 	.word	0x080237c4
		case 75 :
			strcpy(p->name,"BIG HOLDZ");
 80184ac:	687b      	ldr	r3, [r7, #4]
 80184ae:	337c      	adds	r3, #124	; 0x7c
 80184b0:	49b5      	ldr	r1, [pc, #724]	; (8018788 <problem_fetch+0x17468>)
 80184b2:	461a      	mov	r2, r3
 80184b4:	460b      	mov	r3, r1
 80184b6:	cb03      	ldmia	r3!, {r0, r1}
 80184b8:	6010      	str	r0, [r2, #0]
 80184ba:	6051      	str	r1, [r2, #4]
 80184bc:	881b      	ldrh	r3, [r3, #0]
 80184be:	8113      	strh	r3, [r2, #8]
			p->moveSize = 5;
 80184c0:	687b      	ldr	r3, [r7, #4]
 80184c2:	2205      	movs	r2, #5
 80184c4:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"G,H,C,E,A");
 80184c6:	687b      	ldr	r3, [r7, #4]
 80184c8:	3340      	adds	r3, #64	; 0x40
 80184ca:	49b0      	ldr	r1, [pc, #704]	; (801878c <problem_fetch+0x1746c>)
 80184cc:	461a      	mov	r2, r3
 80184ce:	460b      	mov	r3, r1
 80184d0:	cb03      	ldmia	r3!, {r0, r1}
 80184d2:	6010      	str	r0, [r2, #0]
 80184d4:	6051      	str	r1, [r2, #4]
 80184d6:	881b      	ldrh	r3, [r3, #0]
 80184d8:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"4,10,13,16,18");
 80184da:	687b      	ldr	r3, [r7, #4]
 80184dc:	3304      	adds	r3, #4
 80184de:	4aac      	ldr	r2, [pc, #688]	; (8018790 <problem_fetch+0x17470>)
 80184e0:	461c      	mov	r4, r3
 80184e2:	4613      	mov	r3, r2
 80184e4:	cb07      	ldmia	r3!, {r0, r1, r2}
 80184e6:	6020      	str	r0, [r4, #0]
 80184e8:	6061      	str	r1, [r4, #4]
 80184ea:	60a2      	str	r2, [r4, #8]
 80184ec:	881b      	ldrh	r3, [r3, #0]
 80184ee:	81a3      	strh	r3, [r4, #12]
			strcpy(p->startFinish, "s,d,d,d,e");
 80184f0:	687b      	ldr	r3, [r7, #4]
 80184f2:	33d8      	adds	r3, #216	; 0xd8
 80184f4:	49a7      	ldr	r1, [pc, #668]	; (8018794 <problem_fetch+0x17474>)
 80184f6:	461a      	mov	r2, r3
 80184f8:	460b      	mov	r3, r1
 80184fa:	cb03      	ldmia	r3!, {r0, r1}
 80184fc:	6010      	str	r0, [r2, #0]
 80184fe:	6051      	str	r1, [r2, #4]
 8018500:	881b      	ldrh	r3, [r3, #0]
 8018502:	8113      	strh	r3, [r2, #8]
			strcpy(p->grade, "6B+");
 8018504:	687b      	ldr	r3, [r7, #4]
 8018506:	33cc      	adds	r3, #204	; 0xcc
 8018508:	4aa3      	ldr	r2, [pc, #652]	; (8018798 <problem_fetch+0x17478>)
 801850a:	6810      	ldr	r0, [r2, #0]
 801850c:	6018      	str	r0, [r3, #0]
			break;
 801850e:	f002 bc4d 	b.w	801adac <problem_fetch+0x19a8c>
		case 750 :
			strcpy(p->name,"THE DARK ARTS DIRECT");
 8018512:	687b      	ldr	r3, [r7, #4]
 8018514:	337c      	adds	r3, #124	; 0x7c
 8018516:	4aa1      	ldr	r2, [pc, #644]	; (801879c <problem_fetch+0x1747c>)
 8018518:	461d      	mov	r5, r3
 801851a:	4614      	mov	r4, r2
 801851c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801851e:	6028      	str	r0, [r5, #0]
 8018520:	6069      	str	r1, [r5, #4]
 8018522:	60aa      	str	r2, [r5, #8]
 8018524:	60eb      	str	r3, [r5, #12]
 8018526:	6820      	ldr	r0, [r4, #0]
 8018528:	6128      	str	r0, [r5, #16]
 801852a:	7923      	ldrb	r3, [r4, #4]
 801852c:	752b      	strb	r3, [r5, #20]
			p->moveSize = 6;
 801852e:	687b      	ldr	r3, [r7, #4]
 8018530:	2206      	movs	r2, #6
 8018532:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"G,G,H,C,G,I");
 8018534:	687b      	ldr	r3, [r7, #4]
 8018536:	3340      	adds	r3, #64	; 0x40
 8018538:	4a99      	ldr	r2, [pc, #612]	; (80187a0 <problem_fetch+0x17480>)
 801853a:	461c      	mov	r4, r3
 801853c:	4613      	mov	r3, r2
 801853e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8018540:	6020      	str	r0, [r4, #0]
 8018542:	6061      	str	r1, [r4, #4]
 8018544:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,6,8,13,17,18");
 8018546:	687b      	ldr	r3, [r7, #4]
 8018548:	3304      	adds	r3, #4
 801854a:	4a96      	ldr	r2, [pc, #600]	; (80187a4 <problem_fetch+0x17484>)
 801854c:	461c      	mov	r4, r3
 801854e:	4613      	mov	r3, r2
 8018550:	cb07      	ldmia	r3!, {r0, r1, r2}
 8018552:	6020      	str	r0, [r4, #0]
 8018554:	6061      	str	r1, [r4, #4]
 8018556:	60a2      	str	r2, [r4, #8]
 8018558:	881a      	ldrh	r2, [r3, #0]
 801855a:	789b      	ldrb	r3, [r3, #2]
 801855c:	81a2      	strh	r2, [r4, #12]
 801855e:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish, "s,s,d,d,d,e");
 8018560:	687b      	ldr	r3, [r7, #4]
 8018562:	33d8      	adds	r3, #216	; 0xd8
 8018564:	4a90      	ldr	r2, [pc, #576]	; (80187a8 <problem_fetch+0x17488>)
 8018566:	461c      	mov	r4, r3
 8018568:	4613      	mov	r3, r2
 801856a:	cb07      	ldmia	r3!, {r0, r1, r2}
 801856c:	6020      	str	r0, [r4, #0]
 801856e:	6061      	str	r1, [r4, #4]
 8018570:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade, "7C+");
 8018572:	687b      	ldr	r3, [r7, #4]
 8018574:	33cc      	adds	r3, #204	; 0xcc
 8018576:	4a8d      	ldr	r2, [pc, #564]	; (80187ac <problem_fetch+0x1748c>)
 8018578:	6810      	ldr	r0, [r2, #0]
 801857a:	6018      	str	r0, [r3, #0]
			break;
 801857c:	f002 bc16 	b.w	801adac <problem_fetch+0x19a8c>
		case 751 :
			strcpy(p->name,"BLACK ARE GOOD");
 8018580:	687b      	ldr	r3, [r7, #4]
 8018582:	337c      	adds	r3, #124	; 0x7c
 8018584:	4a8a      	ldr	r2, [pc, #552]	; (80187b0 <problem_fetch+0x17490>)
 8018586:	461c      	mov	r4, r3
 8018588:	4613      	mov	r3, r2
 801858a:	cb07      	ldmia	r3!, {r0, r1, r2}
 801858c:	6020      	str	r0, [r4, #0]
 801858e:	6061      	str	r1, [r4, #4]
 8018590:	60a2      	str	r2, [r4, #8]
 8018592:	881a      	ldrh	r2, [r3, #0]
 8018594:	789b      	ldrb	r3, [r3, #2]
 8018596:	81a2      	strh	r2, [r4, #12]
 8018598:	73a3      	strb	r3, [r4, #14]
			p->moveSize = 6;
 801859a:	687b      	ldr	r3, [r7, #4]
 801859c:	2206      	movs	r2, #6
 801859e:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"J,J,I,J,G,I");
 80185a0:	687b      	ldr	r3, [r7, #4]
 80185a2:	3340      	adds	r3, #64	; 0x40
 80185a4:	4a83      	ldr	r2, [pc, #524]	; (80187b4 <problem_fetch+0x17494>)
 80185a6:	461c      	mov	r4, r3
 80185a8:	4613      	mov	r3, r2
 80185aa:	cb07      	ldmia	r3!, {r0, r1, r2}
 80185ac:	6020      	str	r0, [r4, #0]
 80185ae:	6061      	str	r1, [r4, #4]
 80185b0:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,7,10,12,15,18");
 80185b2:	687b      	ldr	r3, [r7, #4]
 80185b4:	3304      	adds	r3, #4
 80185b6:	4a80      	ldr	r2, [pc, #512]	; (80187b8 <problem_fetch+0x17498>)
 80185b8:	461c      	mov	r4, r3
 80185ba:	4615      	mov	r5, r2
 80185bc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80185be:	6020      	str	r0, [r4, #0]
 80185c0:	6061      	str	r1, [r4, #4]
 80185c2:	60a2      	str	r2, [r4, #8]
 80185c4:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish, "s,d,d,d,d,e");
 80185c6:	687b      	ldr	r3, [r7, #4]
 80185c8:	33d8      	adds	r3, #216	; 0xd8
 80185ca:	4a7c      	ldr	r2, [pc, #496]	; (80187bc <problem_fetch+0x1749c>)
 80185cc:	461c      	mov	r4, r3
 80185ce:	4613      	mov	r3, r2
 80185d0:	cb07      	ldmia	r3!, {r0, r1, r2}
 80185d2:	6020      	str	r0, [r4, #0]
 80185d4:	6061      	str	r1, [r4, #4]
 80185d6:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade, "6C");
 80185d8:	687b      	ldr	r3, [r7, #4]
 80185da:	33cc      	adds	r3, #204	; 0xcc
 80185dc:	4a78      	ldr	r2, [pc, #480]	; (80187c0 <problem_fetch+0x174a0>)
 80185de:	8811      	ldrh	r1, [r2, #0]
 80185e0:	7892      	ldrb	r2, [r2, #2]
 80185e2:	8019      	strh	r1, [r3, #0]
 80185e4:	709a      	strb	r2, [r3, #2]
			break;
 80185e6:	f002 bbe1 	b.w	801adac <problem_fetch+0x19a8c>
		case 752 :
			strcpy(p->name,"MY FLOW");
 80185ea:	687b      	ldr	r3, [r7, #4]
 80185ec:	337c      	adds	r3, #124	; 0x7c
 80185ee:	4975      	ldr	r1, [pc, #468]	; (80187c4 <problem_fetch+0x174a4>)
 80185f0:	461a      	mov	r2, r3
 80185f2:	460b      	mov	r3, r1
 80185f4:	cb03      	ldmia	r3!, {r0, r1}
 80185f6:	6010      	str	r0, [r2, #0]
 80185f8:	6051      	str	r1, [r2, #4]
			p->moveSize = 6;
 80185fa:	687b      	ldr	r3, [r7, #4]
 80185fc:	2206      	movs	r2, #6
 80185fe:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"J,H,E,E,A,D");
 8018600:	687b      	ldr	r3, [r7, #4]
 8018602:	3340      	adds	r3, #64	; 0x40
 8018604:	4a70      	ldr	r2, [pc, #448]	; (80187c8 <problem_fetch+0x174a8>)
 8018606:	461c      	mov	r4, r3
 8018608:	4613      	mov	r3, r2
 801860a:	cb07      	ldmia	r3!, {r0, r1, r2}
 801860c:	6020      	str	r0, [r4, #0]
 801860e:	6061      	str	r1, [r4, #4]
 8018610:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,8,9,12,14,18");
 8018612:	687b      	ldr	r3, [r7, #4]
 8018614:	3304      	adds	r3, #4
 8018616:	4a6d      	ldr	r2, [pc, #436]	; (80187cc <problem_fetch+0x174ac>)
 8018618:	461c      	mov	r4, r3
 801861a:	4613      	mov	r3, r2
 801861c:	cb07      	ldmia	r3!, {r0, r1, r2}
 801861e:	6020      	str	r0, [r4, #0]
 8018620:	6061      	str	r1, [r4, #4]
 8018622:	60a2      	str	r2, [r4, #8]
 8018624:	881a      	ldrh	r2, [r3, #0]
 8018626:	789b      	ldrb	r3, [r3, #2]
 8018628:	81a2      	strh	r2, [r4, #12]
 801862a:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish, "s,d,d,d,d,e");
 801862c:	687b      	ldr	r3, [r7, #4]
 801862e:	33d8      	adds	r3, #216	; 0xd8
 8018630:	4a62      	ldr	r2, [pc, #392]	; (80187bc <problem_fetch+0x1749c>)
 8018632:	461c      	mov	r4, r3
 8018634:	4613      	mov	r3, r2
 8018636:	cb07      	ldmia	r3!, {r0, r1, r2}
 8018638:	6020      	str	r0, [r4, #0]
 801863a:	6061      	str	r1, [r4, #4]
 801863c:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade, "7A+");
 801863e:	687b      	ldr	r3, [r7, #4]
 8018640:	33cc      	adds	r3, #204	; 0xcc
 8018642:	4a63      	ldr	r2, [pc, #396]	; (80187d0 <problem_fetch+0x174b0>)
 8018644:	6810      	ldr	r0, [r2, #0]
 8018646:	6018      	str	r0, [r3, #0]
			break;
 8018648:	f002 bbb0 	b.w	801adac <problem_fetch+0x19a8c>
		case 753 :
			strcpy(p->name,"ELBOW GREASE");
 801864c:	687b      	ldr	r3, [r7, #4]
 801864e:	337c      	adds	r3, #124	; 0x7c
 8018650:	4a60      	ldr	r2, [pc, #384]	; (80187d4 <problem_fetch+0x174b4>)
 8018652:	461c      	mov	r4, r3
 8018654:	4613      	mov	r3, r2
 8018656:	cb07      	ldmia	r3!, {r0, r1, r2}
 8018658:	6020      	str	r0, [r4, #0]
 801865a:	6061      	str	r1, [r4, #4]
 801865c:	60a2      	str	r2, [r4, #8]
 801865e:	781b      	ldrb	r3, [r3, #0]
 8018660:	7323      	strb	r3, [r4, #12]
			p->moveSize = 7;
 8018662:	687b      	ldr	r3, [r7, #4]
 8018664:	2207      	movs	r2, #7
 8018666:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"J,H,G,D,D,C,A");
 8018668:	687b      	ldr	r3, [r7, #4]
 801866a:	3340      	adds	r3, #64	; 0x40
 801866c:	4a5a      	ldr	r2, [pc, #360]	; (80187d8 <problem_fetch+0x174b8>)
 801866e:	461c      	mov	r4, r3
 8018670:	4613      	mov	r3, r2
 8018672:	cb07      	ldmia	r3!, {r0, r1, r2}
 8018674:	6020      	str	r0, [r4, #0]
 8018676:	6061      	str	r1, [r4, #4]
 8018678:	60a2      	str	r2, [r4, #8]
 801867a:	881b      	ldrh	r3, [r3, #0]
 801867c:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,8,9,11,15,5,18");
 801867e:	687b      	ldr	r3, [r7, #4]
 8018680:	3304      	adds	r3, #4
 8018682:	4a56      	ldr	r2, [pc, #344]	; (80187dc <problem_fetch+0x174bc>)
 8018684:	461d      	mov	r5, r3
 8018686:	4614      	mov	r4, r2
 8018688:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801868a:	6028      	str	r0, [r5, #0]
 801868c:	6069      	str	r1, [r5, #4]
 801868e:	60aa      	str	r2, [r5, #8]
 8018690:	60eb      	str	r3, [r5, #12]
 8018692:	7823      	ldrb	r3, [r4, #0]
 8018694:	742b      	strb	r3, [r5, #16]
			strcpy(p->startFinish, "s,d,d,d,d,d,e");
 8018696:	687b      	ldr	r3, [r7, #4]
 8018698:	33d8      	adds	r3, #216	; 0xd8
 801869a:	4a51      	ldr	r2, [pc, #324]	; (80187e0 <problem_fetch+0x174c0>)
 801869c:	461c      	mov	r4, r3
 801869e:	4613      	mov	r3, r2
 80186a0:	cb07      	ldmia	r3!, {r0, r1, r2}
 80186a2:	6020      	str	r0, [r4, #0]
 80186a4:	6061      	str	r1, [r4, #4]
 80186a6:	60a2      	str	r2, [r4, #8]
 80186a8:	881b      	ldrh	r3, [r3, #0]
 80186aa:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade, "7B+");
 80186ac:	687b      	ldr	r3, [r7, #4]
 80186ae:	33cc      	adds	r3, #204	; 0xcc
 80186b0:	4a4c      	ldr	r2, [pc, #304]	; (80187e4 <problem_fetch+0x174c4>)
 80186b2:	6810      	ldr	r0, [r2, #0]
 80186b4:	6018      	str	r0, [r3, #0]
			break;
 80186b6:	f002 bb79 	b.w	801adac <problem_fetch+0x19a8c>
		case 754 :
			strcpy(p->name,"ELBOW GREASE VAR");
 80186ba:	687b      	ldr	r3, [r7, #4]
 80186bc:	337c      	adds	r3, #124	; 0x7c
 80186be:	4a4a      	ldr	r2, [pc, #296]	; (80187e8 <problem_fetch+0x174c8>)
 80186c0:	461d      	mov	r5, r3
 80186c2:	4614      	mov	r4, r2
 80186c4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80186c6:	6028      	str	r0, [r5, #0]
 80186c8:	6069      	str	r1, [r5, #4]
 80186ca:	60aa      	str	r2, [r5, #8]
 80186cc:	60eb      	str	r3, [r5, #12]
 80186ce:	7823      	ldrb	r3, [r4, #0]
 80186d0:	742b      	strb	r3, [r5, #16]
			p->moveSize = 6;
 80186d2:	687b      	ldr	r3, [r7, #4]
 80186d4:	2206      	movs	r2, #6
 80186d6:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"J,H,G,D,D,A");
 80186d8:	687b      	ldr	r3, [r7, #4]
 80186da:	3340      	adds	r3, #64	; 0x40
 80186dc:	4a43      	ldr	r2, [pc, #268]	; (80187ec <problem_fetch+0x174cc>)
 80186de:	461c      	mov	r4, r3
 80186e0:	4613      	mov	r3, r2
 80186e2:	cb07      	ldmia	r3!, {r0, r1, r2}
 80186e4:	6020      	str	r0, [r4, #0]
 80186e6:	6061      	str	r1, [r4, #4]
 80186e8:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,8,9,11,15,18");
 80186ea:	687b      	ldr	r3, [r7, #4]
 80186ec:	3304      	adds	r3, #4
 80186ee:	4a40      	ldr	r2, [pc, #256]	; (80187f0 <problem_fetch+0x174d0>)
 80186f0:	461c      	mov	r4, r3
 80186f2:	4613      	mov	r3, r2
 80186f4:	cb07      	ldmia	r3!, {r0, r1, r2}
 80186f6:	6020      	str	r0, [r4, #0]
 80186f8:	6061      	str	r1, [r4, #4]
 80186fa:	60a2      	str	r2, [r4, #8]
 80186fc:	881a      	ldrh	r2, [r3, #0]
 80186fe:	789b      	ldrb	r3, [r3, #2]
 8018700:	81a2      	strh	r2, [r4, #12]
 8018702:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish, "s,d,d,d,d,e");
 8018704:	687b      	ldr	r3, [r7, #4]
 8018706:	33d8      	adds	r3, #216	; 0xd8
 8018708:	4a2c      	ldr	r2, [pc, #176]	; (80187bc <problem_fetch+0x1749c>)
 801870a:	461c      	mov	r4, r3
 801870c:	4613      	mov	r3, r2
 801870e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8018710:	6020      	str	r0, [r4, #0]
 8018712:	6061      	str	r1, [r4, #4]
 8018714:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade, "7C+");
 8018716:	687b      	ldr	r3, [r7, #4]
 8018718:	33cc      	adds	r3, #204	; 0xcc
 801871a:	4a24      	ldr	r2, [pc, #144]	; (80187ac <problem_fetch+0x1748c>)
 801871c:	6810      	ldr	r0, [r2, #0]
 801871e:	6018      	str	r0, [r3, #0]
			break;
 8018720:	f002 bb44 	b.w	801adac <problem_fetch+0x19a8c>
		case 755 :
			strcpy(p->name,"DITA DI BURRO");
 8018724:	687b      	ldr	r3, [r7, #4]
 8018726:	337c      	adds	r3, #124	; 0x7c
 8018728:	4a32      	ldr	r2, [pc, #200]	; (80187f4 <problem_fetch+0x174d4>)
 801872a:	461c      	mov	r4, r3
 801872c:	4613      	mov	r3, r2
 801872e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8018730:	6020      	str	r0, [r4, #0]
 8018732:	6061      	str	r1, [r4, #4]
 8018734:	60a2      	str	r2, [r4, #8]
 8018736:	881b      	ldrh	r3, [r3, #0]
 8018738:	81a3      	strh	r3, [r4, #12]
			p->moveSize = 4;
 801873a:	687b      	ldr	r3, [r7, #4]
 801873c:	2204      	movs	r2, #4
 801873e:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"G,J,C,D");
 8018740:	687b      	ldr	r3, [r7, #4]
 8018742:	3340      	adds	r3, #64	; 0x40
 8018744:	492c      	ldr	r1, [pc, #176]	; (80187f8 <problem_fetch+0x174d8>)
 8018746:	461a      	mov	r2, r3
 8018748:	460b      	mov	r3, r1
 801874a:	cb03      	ldmia	r3!, {r0, r1}
 801874c:	6010      	str	r0, [r2, #0]
 801874e:	6051      	str	r1, [r2, #4]
			strcpy(p->moveNumbers,"9,5,13,18");
 8018750:	687b      	ldr	r3, [r7, #4]
 8018752:	3304      	adds	r3, #4
 8018754:	4929      	ldr	r1, [pc, #164]	; (80187fc <problem_fetch+0x174dc>)
 8018756:	461a      	mov	r2, r3
 8018758:	460b      	mov	r3, r1
 801875a:	cb03      	ldmia	r3!, {r0, r1}
 801875c:	6010      	str	r0, [r2, #0]
 801875e:	6051      	str	r1, [r2, #4]
 8018760:	881b      	ldrh	r3, [r3, #0]
 8018762:	8113      	strh	r3, [r2, #8]
			strcpy(p->startFinish, "d,s,d,e");
 8018764:	687b      	ldr	r3, [r7, #4]
 8018766:	33d8      	adds	r3, #216	; 0xd8
 8018768:	4925      	ldr	r1, [pc, #148]	; (8018800 <problem_fetch+0x174e0>)
 801876a:	461a      	mov	r2, r3
 801876c:	460b      	mov	r3, r1
 801876e:	cb03      	ldmia	r3!, {r0, r1}
 8018770:	6010      	str	r0, [r2, #0]
 8018772:	6051      	str	r1, [r2, #4]
			strcpy(p->grade, "7A");
 8018774:	687b      	ldr	r3, [r7, #4]
 8018776:	33cc      	adds	r3, #204	; 0xcc
 8018778:	4a22      	ldr	r2, [pc, #136]	; (8018804 <problem_fetch+0x174e4>)
 801877a:	8811      	ldrh	r1, [r2, #0]
 801877c:	7892      	ldrb	r2, [r2, #2]
 801877e:	8019      	strh	r1, [r3, #0]
 8018780:	709a      	strb	r2, [r3, #2]
			break;
 8018782:	f002 bb13 	b.w	801adac <problem_fetch+0x19a8c>
 8018786:	bf00      	nop
 8018788:	0802997c 	.word	0x0802997c
 801878c:	08029988 	.word	0x08029988
 8018790:	08029994 	.word	0x08029994
 8018794:	08021320 	.word	0x08021320
 8018798:	080212b0 	.word	0x080212b0
 801879c:	080299a4 	.word	0x080299a4
 80187a0:	080299bc 	.word	0x080299bc
 80187a4:	080299c8 	.word	0x080299c8
 80187a8:	08021910 	.word	0x08021910
 80187ac:	08023170 	.word	0x08023170
 80187b0:	080299d8 	.word	0x080299d8
 80187b4:	080299e8 	.word	0x080299e8
 80187b8:	080299f4 	.word	0x080299f4
 80187bc:	0802139c 	.word	0x0802139c
 80187c0:	08021370 	.word	0x08021370
 80187c4:	08029a04 	.word	0x08029a04
 80187c8:	0802534c 	.word	0x0802534c
 80187cc:	080251f8 	.word	0x080251f8
 80187d0:	08021424 	.word	0x08021424
 80187d4:	08029a0c 	.word	0x08029a0c
 80187d8:	08029a1c 	.word	0x08029a1c
 80187dc:	08029a2c 	.word	0x08029a2c
 80187e0:	08021494 	.word	0x08021494
 80187e4:	08021848 	.word	0x08021848
 80187e8:	08029a40 	.word	0x08029a40
 80187ec:	08029a54 	.word	0x08029a54
 80187f0:	08029a60 	.word	0x08029a60
 80187f4:	08029a70 	.word	0x08029a70
 80187f8:	08029a80 	.word	0x08029a80
 80187fc:	08029a88 	.word	0x08029a88
 8018800:	08029a94 	.word	0x08029a94
 8018804:	080212f4 	.word	0x080212f4
		case 756 :
			strcpy(p->name,"BLACK JACK");
 8018808:	687b      	ldr	r3, [r7, #4]
 801880a:	337c      	adds	r3, #124	; 0x7c
 801880c:	49bd      	ldr	r1, [pc, #756]	; (8018b04 <problem_fetch+0x177e4>)
 801880e:	461a      	mov	r2, r3
 8018810:	460b      	mov	r3, r1
 8018812:	cb03      	ldmia	r3!, {r0, r1}
 8018814:	6010      	str	r0, [r2, #0]
 8018816:	6051      	str	r1, [r2, #4]
 8018818:	8819      	ldrh	r1, [r3, #0]
 801881a:	789b      	ldrb	r3, [r3, #2]
 801881c:	8111      	strh	r1, [r2, #8]
 801881e:	7293      	strb	r3, [r2, #10]
			p->moveSize = 6;
 8018820:	687b      	ldr	r3, [r7, #4]
 8018822:	2206      	movs	r2, #6
 8018824:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"C,G,E,F,A,D");
 8018826:	687b      	ldr	r3, [r7, #4]
 8018828:	3340      	adds	r3, #64	; 0x40
 801882a:	4ab7      	ldr	r2, [pc, #732]	; (8018b08 <problem_fetch+0x177e8>)
 801882c:	461c      	mov	r4, r3
 801882e:	4613      	mov	r3, r2
 8018830:	cb07      	ldmia	r3!, {r0, r1, r2}
 8018832:	6020      	str	r0, [r4, #0]
 8018834:	6061      	str	r1, [r4, #4]
 8018836:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,9,12,13,14,18");
 8018838:	687b      	ldr	r3, [r7, #4]
 801883a:	3304      	adds	r3, #4
 801883c:	4ab3      	ldr	r2, [pc, #716]	; (8018b0c <problem_fetch+0x177ec>)
 801883e:	461c      	mov	r4, r3
 8018840:	4615      	mov	r5, r2
 8018842:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8018844:	6020      	str	r0, [r4, #0]
 8018846:	6061      	str	r1, [r4, #4]
 8018848:	60a2      	str	r2, [r4, #8]
 801884a:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish, "s,d,d,d,d,e");
 801884c:	687b      	ldr	r3, [r7, #4]
 801884e:	33d8      	adds	r3, #216	; 0xd8
 8018850:	4aaf      	ldr	r2, [pc, #700]	; (8018b10 <problem_fetch+0x177f0>)
 8018852:	461c      	mov	r4, r3
 8018854:	4613      	mov	r3, r2
 8018856:	cb07      	ldmia	r3!, {r0, r1, r2}
 8018858:	6020      	str	r0, [r4, #0]
 801885a:	6061      	str	r1, [r4, #4]
 801885c:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade, "7A");
 801885e:	687b      	ldr	r3, [r7, #4]
 8018860:	33cc      	adds	r3, #204	; 0xcc
 8018862:	4aac      	ldr	r2, [pc, #688]	; (8018b14 <problem_fetch+0x177f4>)
 8018864:	8811      	ldrh	r1, [r2, #0]
 8018866:	7892      	ldrb	r2, [r2, #2]
 8018868:	8019      	strh	r1, [r3, #0]
 801886a:	709a      	strb	r2, [r3, #2]
			break;
 801886c:	f002 ba9e 	b.w	801adac <problem_fetch+0x19a8c>
		case 757 :
			strcpy(p->name,"LONG BLACK");
 8018870:	687b      	ldr	r3, [r7, #4]
 8018872:	337c      	adds	r3, #124	; 0x7c
 8018874:	49a8      	ldr	r1, [pc, #672]	; (8018b18 <problem_fetch+0x177f8>)
 8018876:	461a      	mov	r2, r3
 8018878:	460b      	mov	r3, r1
 801887a:	cb03      	ldmia	r3!, {r0, r1}
 801887c:	6010      	str	r0, [r2, #0]
 801887e:	6051      	str	r1, [r2, #4]
 8018880:	8819      	ldrh	r1, [r3, #0]
 8018882:	789b      	ldrb	r3, [r3, #2]
 8018884:	8111      	strh	r1, [r2, #8]
 8018886:	7293      	strb	r3, [r2, #10]
			p->moveSize = 6;
 8018888:	687b      	ldr	r3, [r7, #4]
 801888a:	2206      	movs	r2, #6
 801888c:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"G,E,H,E,E,D");
 801888e:	687b      	ldr	r3, [r7, #4]
 8018890:	3340      	adds	r3, #64	; 0x40
 8018892:	4aa2      	ldr	r2, [pc, #648]	; (8018b1c <problem_fetch+0x177fc>)
 8018894:	461c      	mov	r4, r3
 8018896:	4613      	mov	r3, r2
 8018898:	cb07      	ldmia	r3!, {r0, r1, r2}
 801889a:	6020      	str	r0, [r4, #0]
 801889c:	6061      	str	r1, [r4, #4]
 801889e:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,6,10,14,16,18");
 80188a0:	687b      	ldr	r3, [r7, #4]
 80188a2:	3304      	adds	r3, #4
 80188a4:	4a9e      	ldr	r2, [pc, #632]	; (8018b20 <problem_fetch+0x17800>)
 80188a6:	461c      	mov	r4, r3
 80188a8:	4615      	mov	r5, r2
 80188aa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80188ac:	6020      	str	r0, [r4, #0]
 80188ae:	6061      	str	r1, [r4, #4]
 80188b0:	60a2      	str	r2, [r4, #8]
 80188b2:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish, "s,s,d,d,d,e");
 80188b4:	687b      	ldr	r3, [r7, #4]
 80188b6:	33d8      	adds	r3, #216	; 0xd8
 80188b8:	4a9a      	ldr	r2, [pc, #616]	; (8018b24 <problem_fetch+0x17804>)
 80188ba:	461c      	mov	r4, r3
 80188bc:	4613      	mov	r3, r2
 80188be:	cb07      	ldmia	r3!, {r0, r1, r2}
 80188c0:	6020      	str	r0, [r4, #0]
 80188c2:	6061      	str	r1, [r4, #4]
 80188c4:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade, "6B+");
 80188c6:	687b      	ldr	r3, [r7, #4]
 80188c8:	33cc      	adds	r3, #204	; 0xcc
 80188ca:	4a97      	ldr	r2, [pc, #604]	; (8018b28 <problem_fetch+0x17808>)
 80188cc:	6810      	ldr	r0, [r2, #0]
 80188ce:	6018      	str	r0, [r3, #0]
			break;
 80188d0:	f002 ba6c 	b.w	801adac <problem_fetch+0x19a8c>
		case 758 :
			strcpy(p->name,"CALCULO");
 80188d4:	687b      	ldr	r3, [r7, #4]
 80188d6:	337c      	adds	r3, #124	; 0x7c
 80188d8:	4994      	ldr	r1, [pc, #592]	; (8018b2c <problem_fetch+0x1780c>)
 80188da:	461a      	mov	r2, r3
 80188dc:	460b      	mov	r3, r1
 80188de:	cb03      	ldmia	r3!, {r0, r1}
 80188e0:	6010      	str	r0, [r2, #0]
 80188e2:	6051      	str	r1, [r2, #4]
			p->moveSize = 7;
 80188e4:	687b      	ldr	r3, [r7, #4]
 80188e6:	2207      	movs	r2, #7
 80188e8:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"G,E,E,E,F,G,I");
 80188ea:	687b      	ldr	r3, [r7, #4]
 80188ec:	3340      	adds	r3, #64	; 0x40
 80188ee:	4a90      	ldr	r2, [pc, #576]	; (8018b30 <problem_fetch+0x17810>)
 80188f0:	461c      	mov	r4, r3
 80188f2:	4613      	mov	r3, r2
 80188f4:	cb07      	ldmia	r3!, {r0, r1, r2}
 80188f6:	6020      	str	r0, [r4, #0]
 80188f8:	6061      	str	r1, [r4, #4]
 80188fa:	60a2      	str	r2, [r4, #8]
 80188fc:	881b      	ldrh	r3, [r3, #0]
 80188fe:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,6,9,12,13,15,18");
 8018900:	687b      	ldr	r3, [r7, #4]
 8018902:	3304      	adds	r3, #4
 8018904:	4a8b      	ldr	r2, [pc, #556]	; (8018b34 <problem_fetch+0x17814>)
 8018906:	461d      	mov	r5, r3
 8018908:	4614      	mov	r4, r2
 801890a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801890c:	6028      	str	r0, [r5, #0]
 801890e:	6069      	str	r1, [r5, #4]
 8018910:	60aa      	str	r2, [r5, #8]
 8018912:	60eb      	str	r3, [r5, #12]
 8018914:	8823      	ldrh	r3, [r4, #0]
 8018916:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish, "s,d,d,d,d,d,e");
 8018918:	687b      	ldr	r3, [r7, #4]
 801891a:	33d8      	adds	r3, #216	; 0xd8
 801891c:	4a86      	ldr	r2, [pc, #536]	; (8018b38 <problem_fetch+0x17818>)
 801891e:	461c      	mov	r4, r3
 8018920:	4613      	mov	r3, r2
 8018922:	cb07      	ldmia	r3!, {r0, r1, r2}
 8018924:	6020      	str	r0, [r4, #0]
 8018926:	6061      	str	r1, [r4, #4]
 8018928:	60a2      	str	r2, [r4, #8]
 801892a:	881b      	ldrh	r3, [r3, #0]
 801892c:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade, "6C");
 801892e:	687b      	ldr	r3, [r7, #4]
 8018930:	33cc      	adds	r3, #204	; 0xcc
 8018932:	4a82      	ldr	r2, [pc, #520]	; (8018b3c <problem_fetch+0x1781c>)
 8018934:	8811      	ldrh	r1, [r2, #0]
 8018936:	7892      	ldrb	r2, [r2, #2]
 8018938:	8019      	strh	r1, [r3, #0]
 801893a:	709a      	strb	r2, [r3, #2]
			break;
 801893c:	f002 ba36 	b.w	801adac <problem_fetch+0x19a8c>
		case 759 :
			strcpy(p->name,"BLACK CHAMBER ORDER");
 8018940:	687b      	ldr	r3, [r7, #4]
 8018942:	337c      	adds	r3, #124	; 0x7c
 8018944:	4a7e      	ldr	r2, [pc, #504]	; (8018b40 <problem_fetch+0x17820>)
 8018946:	461d      	mov	r5, r3
 8018948:	4614      	mov	r4, r2
 801894a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801894c:	6028      	str	r0, [r5, #0]
 801894e:	6069      	str	r1, [r5, #4]
 8018950:	60aa      	str	r2, [r5, #8]
 8018952:	60eb      	str	r3, [r5, #12]
 8018954:	6820      	ldr	r0, [r4, #0]
 8018956:	6128      	str	r0, [r5, #16]
			p->moveSize = 7;
 8018958:	687b      	ldr	r3, [r7, #4]
 801895a:	2207      	movs	r2, #7
 801895c:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"C,E,C,E,B,D,A");
 801895e:	687b      	ldr	r3, [r7, #4]
 8018960:	3340      	adds	r3, #64	; 0x40
 8018962:	4a78      	ldr	r2, [pc, #480]	; (8018b44 <problem_fetch+0x17824>)
 8018964:	461c      	mov	r4, r3
 8018966:	4613      	mov	r3, r2
 8018968:	cb07      	ldmia	r3!, {r0, r1, r2}
 801896a:	6020      	str	r0, [r4, #0]
 801896c:	6061      	str	r1, [r4, #4]
 801896e:	60a2      	str	r2, [r4, #8]
 8018970:	881b      	ldrh	r3, [r3, #0]
 8018972:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,6,8,9,12,15,18");
 8018974:	687b      	ldr	r3, [r7, #4]
 8018976:	3304      	adds	r3, #4
 8018978:	4a73      	ldr	r2, [pc, #460]	; (8018b48 <problem_fetch+0x17828>)
 801897a:	461d      	mov	r5, r3
 801897c:	4614      	mov	r4, r2
 801897e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8018980:	6028      	str	r0, [r5, #0]
 8018982:	6069      	str	r1, [r5, #4]
 8018984:	60aa      	str	r2, [r5, #8]
 8018986:	60eb      	str	r3, [r5, #12]
 8018988:	7823      	ldrb	r3, [r4, #0]
 801898a:	742b      	strb	r3, [r5, #16]
			strcpy(p->startFinish, "s,s,d,d,d,d,e");
 801898c:	687b      	ldr	r3, [r7, #4]
 801898e:	33d8      	adds	r3, #216	; 0xd8
 8018990:	4a6e      	ldr	r2, [pc, #440]	; (8018b4c <problem_fetch+0x1782c>)
 8018992:	461c      	mov	r4, r3
 8018994:	4613      	mov	r3, r2
 8018996:	cb07      	ldmia	r3!, {r0, r1, r2}
 8018998:	6020      	str	r0, [r4, #0]
 801899a:	6061      	str	r1, [r4, #4]
 801899c:	60a2      	str	r2, [r4, #8]
 801899e:	881b      	ldrh	r3, [r3, #0]
 80189a0:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade, "7A");
 80189a2:	687b      	ldr	r3, [r7, #4]
 80189a4:	33cc      	adds	r3, #204	; 0xcc
 80189a6:	4a5b      	ldr	r2, [pc, #364]	; (8018b14 <problem_fetch+0x177f4>)
 80189a8:	8811      	ldrh	r1, [r2, #0]
 80189aa:	7892      	ldrb	r2, [r2, #2]
 80189ac:	8019      	strh	r1, [r3, #0]
 80189ae:	709a      	strb	r2, [r3, #2]
			break;
 80189b0:	f002 b9fc 	b.w	801adac <problem_fetch+0x19a8c>
		case 76 :
			strcpy(p->name,"MEZZIF");
 80189b4:	687b      	ldr	r3, [r7, #4]
 80189b6:	337c      	adds	r3, #124	; 0x7c
 80189b8:	4a65      	ldr	r2, [pc, #404]	; (8018b50 <problem_fetch+0x17830>)
 80189ba:	6810      	ldr	r0, [r2, #0]
 80189bc:	6018      	str	r0, [r3, #0]
 80189be:	8891      	ldrh	r1, [r2, #4]
 80189c0:	7992      	ldrb	r2, [r2, #6]
 80189c2:	8099      	strh	r1, [r3, #4]
 80189c4:	719a      	strb	r2, [r3, #6]
			p->moveSize = 6;
 80189c6:	687b      	ldr	r3, [r7, #4]
 80189c8:	2206      	movs	r2, #6
 80189ca:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"B,C,E,F,J,I");
 80189cc:	687b      	ldr	r3, [r7, #4]
 80189ce:	3340      	adds	r3, #64	; 0x40
 80189d0:	4a60      	ldr	r2, [pc, #384]	; (8018b54 <problem_fetch+0x17834>)
 80189d2:	461c      	mov	r4, r3
 80189d4:	4613      	mov	r3, r2
 80189d6:	cb07      	ldmia	r3!, {r0, r1, r2}
 80189d8:	6020      	str	r0, [r4, #0]
 80189da:	6061      	str	r1, [r4, #4]
 80189dc:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"6,5,9,13,12,18");
 80189de:	687b      	ldr	r3, [r7, #4]
 80189e0:	3304      	adds	r3, #4
 80189e2:	4a5d      	ldr	r2, [pc, #372]	; (8018b58 <problem_fetch+0x17838>)
 80189e4:	461c      	mov	r4, r3
 80189e6:	4613      	mov	r3, r2
 80189e8:	cb07      	ldmia	r3!, {r0, r1, r2}
 80189ea:	6020      	str	r0, [r4, #0]
 80189ec:	6061      	str	r1, [r4, #4]
 80189ee:	60a2      	str	r2, [r4, #8]
 80189f0:	881a      	ldrh	r2, [r3, #0]
 80189f2:	789b      	ldrb	r3, [r3, #2]
 80189f4:	81a2      	strh	r2, [r4, #12]
 80189f6:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish, "s,s,d,d,d,e");
 80189f8:	687b      	ldr	r3, [r7, #4]
 80189fa:	33d8      	adds	r3, #216	; 0xd8
 80189fc:	4a49      	ldr	r2, [pc, #292]	; (8018b24 <problem_fetch+0x17804>)
 80189fe:	461c      	mov	r4, r3
 8018a00:	4613      	mov	r3, r2
 8018a02:	cb07      	ldmia	r3!, {r0, r1, r2}
 8018a04:	6020      	str	r0, [r4, #0]
 8018a06:	6061      	str	r1, [r4, #4]
 8018a08:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade, "7C+");
 8018a0a:	687b      	ldr	r3, [r7, #4]
 8018a0c:	33cc      	adds	r3, #204	; 0xcc
 8018a0e:	4a53      	ldr	r2, [pc, #332]	; (8018b5c <problem_fetch+0x1783c>)
 8018a10:	6810      	ldr	r0, [r2, #0]
 8018a12:	6018      	str	r0, [r3, #0]
			break;
 8018a14:	f002 b9ca 	b.w	801adac <problem_fetch+0x19a8c>
		case 760 :
			strcpy(p->name,"BEYOND GOOD AND EVIL");
 8018a18:	687b      	ldr	r3, [r7, #4]
 8018a1a:	337c      	adds	r3, #124	; 0x7c
 8018a1c:	4a50      	ldr	r2, [pc, #320]	; (8018b60 <problem_fetch+0x17840>)
 8018a1e:	461d      	mov	r5, r3
 8018a20:	4614      	mov	r4, r2
 8018a22:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8018a24:	6028      	str	r0, [r5, #0]
 8018a26:	6069      	str	r1, [r5, #4]
 8018a28:	60aa      	str	r2, [r5, #8]
 8018a2a:	60eb      	str	r3, [r5, #12]
 8018a2c:	6820      	ldr	r0, [r4, #0]
 8018a2e:	6128      	str	r0, [r5, #16]
 8018a30:	7923      	ldrb	r3, [r4, #4]
 8018a32:	752b      	strb	r3, [r5, #20]
			p->moveSize = 8;
 8018a34:	687b      	ldr	r3, [r7, #4]
 8018a36:	2208      	movs	r2, #8
 8018a38:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"E,G,G,E,B,G,E,I");
 8018a3a:	687b      	ldr	r3, [r7, #4]
 8018a3c:	3340      	adds	r3, #64	; 0x40
 8018a3e:	4a49      	ldr	r2, [pc, #292]	; (8018b64 <problem_fetch+0x17844>)
 8018a40:	461c      	mov	r4, r3
 8018a42:	4615      	mov	r5, r2
 8018a44:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8018a46:	6020      	str	r0, [r4, #0]
 8018a48:	6061      	str	r1, [r4, #4]
 8018a4a:	60a2      	str	r2, [r4, #8]
 8018a4c:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"8,4,6,12,15,17,16,18");
 8018a4e:	687b      	ldr	r3, [r7, #4]
 8018a50:	3304      	adds	r3, #4
 8018a52:	4a45      	ldr	r2, [pc, #276]	; (8018b68 <problem_fetch+0x17848>)
 8018a54:	461d      	mov	r5, r3
 8018a56:	4614      	mov	r4, r2
 8018a58:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8018a5a:	6028      	str	r0, [r5, #0]
 8018a5c:	6069      	str	r1, [r5, #4]
 8018a5e:	60aa      	str	r2, [r5, #8]
 8018a60:	60eb      	str	r3, [r5, #12]
 8018a62:	6820      	ldr	r0, [r4, #0]
 8018a64:	6128      	str	r0, [r5, #16]
 8018a66:	7923      	ldrb	r3, [r4, #4]
 8018a68:	752b      	strb	r3, [r5, #20]
			strcpy(p->startFinish, "d,s,s,d,d,d,d,e");
 8018a6a:	687b      	ldr	r3, [r7, #4]
 8018a6c:	33d8      	adds	r3, #216	; 0xd8
 8018a6e:	4a3f      	ldr	r2, [pc, #252]	; (8018b6c <problem_fetch+0x1784c>)
 8018a70:	461c      	mov	r4, r3
 8018a72:	4615      	mov	r5, r2
 8018a74:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8018a76:	6020      	str	r0, [r4, #0]
 8018a78:	6061      	str	r1, [r4, #4]
 8018a7a:	60a2      	str	r2, [r4, #8]
 8018a7c:	60e3      	str	r3, [r4, #12]
			strcpy(p->grade, "6C");
 8018a7e:	687b      	ldr	r3, [r7, #4]
 8018a80:	33cc      	adds	r3, #204	; 0xcc
 8018a82:	4a2e      	ldr	r2, [pc, #184]	; (8018b3c <problem_fetch+0x1781c>)
 8018a84:	8811      	ldrh	r1, [r2, #0]
 8018a86:	7892      	ldrb	r2, [r2, #2]
 8018a88:	8019      	strh	r1, [r3, #0]
 8018a8a:	709a      	strb	r2, [r3, #2]
			break;
 8018a8c:	f002 b98e 	b.w	801adac <problem_fetch+0x19a8c>
		case 761 :
			strcpy(p->name,"THE WILL TO POWER");
 8018a90:	687b      	ldr	r3, [r7, #4]
 8018a92:	337c      	adds	r3, #124	; 0x7c
 8018a94:	4a36      	ldr	r2, [pc, #216]	; (8018b70 <problem_fetch+0x17850>)
 8018a96:	461d      	mov	r5, r3
 8018a98:	4614      	mov	r4, r2
 8018a9a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8018a9c:	6028      	str	r0, [r5, #0]
 8018a9e:	6069      	str	r1, [r5, #4]
 8018aa0:	60aa      	str	r2, [r5, #8]
 8018aa2:	60eb      	str	r3, [r5, #12]
 8018aa4:	8823      	ldrh	r3, [r4, #0]
 8018aa6:	822b      	strh	r3, [r5, #16]
			p->moveSize = 8;
 8018aa8:	687b      	ldr	r3, [r7, #4]
 8018aaa:	2208      	movs	r2, #8
 8018aac:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"H,E,G,H,K,G,H,D");
 8018aae:	687b      	ldr	r3, [r7, #4]
 8018ab0:	3340      	adds	r3, #64	; 0x40
 8018ab2:	4a30      	ldr	r2, [pc, #192]	; (8018b74 <problem_fetch+0x17854>)
 8018ab4:	461c      	mov	r4, r3
 8018ab6:	4615      	mov	r5, r2
 8018ab8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8018aba:	6020      	str	r0, [r4, #0]
 8018abc:	6061      	str	r1, [r4, #4]
 8018abe:	60a2      	str	r2, [r4, #8]
 8018ac0:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,6,9,12,14,17,16,18");
 8018ac2:	687b      	ldr	r3, [r7, #4]
 8018ac4:	3304      	adds	r3, #4
 8018ac6:	4a2c      	ldr	r2, [pc, #176]	; (8018b78 <problem_fetch+0x17858>)
 8018ac8:	461d      	mov	r5, r3
 8018aca:	4614      	mov	r4, r2
 8018acc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8018ace:	6028      	str	r0, [r5, #0]
 8018ad0:	6069      	str	r1, [r5, #4]
 8018ad2:	60aa      	str	r2, [r5, #8]
 8018ad4:	60eb      	str	r3, [r5, #12]
 8018ad6:	6820      	ldr	r0, [r4, #0]
 8018ad8:	6128      	str	r0, [r5, #16]
 8018ada:	7923      	ldrb	r3, [r4, #4]
 8018adc:	752b      	strb	r3, [r5, #20]
			strcpy(p->startFinish, "s,s,d,d,d,d,d,e");
 8018ade:	687b      	ldr	r3, [r7, #4]
 8018ae0:	33d8      	adds	r3, #216	; 0xd8
 8018ae2:	4a26      	ldr	r2, [pc, #152]	; (8018b7c <problem_fetch+0x1785c>)
 8018ae4:	461c      	mov	r4, r3
 8018ae6:	4615      	mov	r5, r2
 8018ae8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8018aea:	6020      	str	r0, [r4, #0]
 8018aec:	6061      	str	r1, [r4, #4]
 8018aee:	60a2      	str	r2, [r4, #8]
 8018af0:	60e3      	str	r3, [r4, #12]
			strcpy(p->grade, "6C");
 8018af2:	687b      	ldr	r3, [r7, #4]
 8018af4:	33cc      	adds	r3, #204	; 0xcc
 8018af6:	4a11      	ldr	r2, [pc, #68]	; (8018b3c <problem_fetch+0x1781c>)
 8018af8:	8811      	ldrh	r1, [r2, #0]
 8018afa:	7892      	ldrb	r2, [r2, #2]
 8018afc:	8019      	strh	r1, [r3, #0]
 8018afe:	709a      	strb	r2, [r3, #2]
			break;
 8018b00:	f002 b954 	b.w	801adac <problem_fetch+0x19a8c>
 8018b04:	08029a9c 	.word	0x08029a9c
 8018b08:	08029aa8 	.word	0x08029aa8
 8018b0c:	08029ab4 	.word	0x08029ab4
 8018b10:	0802139c 	.word	0x0802139c
 8018b14:	080212f4 	.word	0x080212f4
 8018b18:	08029ac4 	.word	0x08029ac4
 8018b1c:	08029ad0 	.word	0x08029ad0
 8018b20:	08029adc 	.word	0x08029adc
 8018b24:	08021910 	.word	0x08021910
 8018b28:	080212b0 	.word	0x080212b0
 8018b2c:	08029aec 	.word	0x08029aec
 8018b30:	08029af4 	.word	0x08029af4
 8018b34:	08029b04 	.word	0x08029b04
 8018b38:	08021494 	.word	0x08021494
 8018b3c:	08021370 	.word	0x08021370
 8018b40:	08029b18 	.word	0x08029b18
 8018b44:	08029b2c 	.word	0x08029b2c
 8018b48:	08029b3c 	.word	0x08029b3c
 8018b4c:	080212a0 	.word	0x080212a0
 8018b50:	08029b50 	.word	0x08029b50
 8018b54:	08029b58 	.word	0x08029b58
 8018b58:	08029b64 	.word	0x08029b64
 8018b5c:	08023170 	.word	0x08023170
 8018b60:	08029b74 	.word	0x08029b74
 8018b64:	08029b8c 	.word	0x08029b8c
 8018b68:	08029b9c 	.word	0x08029b9c
 8018b6c:	08029bb4 	.word	0x08029bb4
 8018b70:	08029bc4 	.word	0x08029bc4
 8018b74:	08029bd8 	.word	0x08029bd8
 8018b78:	08029be8 	.word	0x08029be8
 8018b7c:	080214cc 	.word	0x080214cc
		case 762 :
			strcpy(p->name,"THE BIRTH OF TRAGEDY");
 8018b80:	687b      	ldr	r3, [r7, #4]
 8018b82:	337c      	adds	r3, #124	; 0x7c
 8018b84:	4ac0      	ldr	r2, [pc, #768]	; (8018e88 <problem_fetch+0x17b68>)
 8018b86:	461d      	mov	r5, r3
 8018b88:	4614      	mov	r4, r2
 8018b8a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8018b8c:	6028      	str	r0, [r5, #0]
 8018b8e:	6069      	str	r1, [r5, #4]
 8018b90:	60aa      	str	r2, [r5, #8]
 8018b92:	60eb      	str	r3, [r5, #12]
 8018b94:	6820      	ldr	r0, [r4, #0]
 8018b96:	6128      	str	r0, [r5, #16]
 8018b98:	7923      	ldrb	r3, [r4, #4]
 8018b9a:	752b      	strb	r3, [r5, #20]
			p->moveSize = 7;
 8018b9c:	687b      	ldr	r3, [r7, #4]
 8018b9e:	2207      	movs	r2, #7
 8018ba0:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"G,J,G,G,C,D,A");
 8018ba2:	687b      	ldr	r3, [r7, #4]
 8018ba4:	3340      	adds	r3, #64	; 0x40
 8018ba6:	4ab9      	ldr	r2, [pc, #740]	; (8018e8c <problem_fetch+0x17b6c>)
 8018ba8:	461c      	mov	r4, r3
 8018baa:	4613      	mov	r3, r2
 8018bac:	cb07      	ldmia	r3!, {r0, r1, r2}
 8018bae:	6020      	str	r0, [r4, #0]
 8018bb0:	6061      	str	r1, [r4, #4]
 8018bb2:	60a2      	str	r2, [r4, #8]
 8018bb4:	881b      	ldrh	r3, [r3, #0]
 8018bb6:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,7,9,10,13,15,18");
 8018bb8:	687b      	ldr	r3, [r7, #4]
 8018bba:	3304      	adds	r3, #4
 8018bbc:	4ab4      	ldr	r2, [pc, #720]	; (8018e90 <problem_fetch+0x17b70>)
 8018bbe:	461d      	mov	r5, r3
 8018bc0:	4614      	mov	r4, r2
 8018bc2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8018bc4:	6028      	str	r0, [r5, #0]
 8018bc6:	6069      	str	r1, [r5, #4]
 8018bc8:	60aa      	str	r2, [r5, #8]
 8018bca:	60eb      	str	r3, [r5, #12]
 8018bcc:	8823      	ldrh	r3, [r4, #0]
 8018bce:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish, "s,d,d,d,d,d,e");
 8018bd0:	687b      	ldr	r3, [r7, #4]
 8018bd2:	33d8      	adds	r3, #216	; 0xd8
 8018bd4:	4aaf      	ldr	r2, [pc, #700]	; (8018e94 <problem_fetch+0x17b74>)
 8018bd6:	461c      	mov	r4, r3
 8018bd8:	4613      	mov	r3, r2
 8018bda:	cb07      	ldmia	r3!, {r0, r1, r2}
 8018bdc:	6020      	str	r0, [r4, #0]
 8018bde:	6061      	str	r1, [r4, #4]
 8018be0:	60a2      	str	r2, [r4, #8]
 8018be2:	881b      	ldrh	r3, [r3, #0]
 8018be4:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade, "6C");
 8018be6:	687b      	ldr	r3, [r7, #4]
 8018be8:	33cc      	adds	r3, #204	; 0xcc
 8018bea:	4aab      	ldr	r2, [pc, #684]	; (8018e98 <problem_fetch+0x17b78>)
 8018bec:	8811      	ldrh	r1, [r2, #0]
 8018bee:	7892      	ldrb	r2, [r2, #2]
 8018bf0:	8019      	strh	r1, [r3, #0]
 8018bf2:	709a      	strb	r2, [r3, #2]
			break;
 8018bf4:	f002 b8da 	b.w	801adac <problem_fetch+0x19a8c>
		case 763 :
			strcpy(p->name,"CAVATELLI");
 8018bf8:	687b      	ldr	r3, [r7, #4]
 8018bfa:	337c      	adds	r3, #124	; 0x7c
 8018bfc:	49a7      	ldr	r1, [pc, #668]	; (8018e9c <problem_fetch+0x17b7c>)
 8018bfe:	461a      	mov	r2, r3
 8018c00:	460b      	mov	r3, r1
 8018c02:	cb03      	ldmia	r3!, {r0, r1}
 8018c04:	6010      	str	r0, [r2, #0]
 8018c06:	6051      	str	r1, [r2, #4]
 8018c08:	881b      	ldrh	r3, [r3, #0]
 8018c0a:	8113      	strh	r3, [r2, #8]
			p->moveSize = 5;
 8018c0c:	687b      	ldr	r3, [r7, #4]
 8018c0e:	2205      	movs	r2, #5
 8018c10:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"J,I,F,J,D");
 8018c12:	687b      	ldr	r3, [r7, #4]
 8018c14:	3340      	adds	r3, #64	; 0x40
 8018c16:	49a2      	ldr	r1, [pc, #648]	; (8018ea0 <problem_fetch+0x17b80>)
 8018c18:	461a      	mov	r2, r3
 8018c1a:	460b      	mov	r3, r1
 8018c1c:	cb03      	ldmia	r3!, {r0, r1}
 8018c1e:	6010      	str	r0, [r2, #0]
 8018c20:	6051      	str	r1, [r2, #4]
 8018c22:	881b      	ldrh	r3, [r3, #0]
 8018c24:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"5,10,13,16,18");
 8018c26:	687b      	ldr	r3, [r7, #4]
 8018c28:	3304      	adds	r3, #4
 8018c2a:	4a9e      	ldr	r2, [pc, #632]	; (8018ea4 <problem_fetch+0x17b84>)
 8018c2c:	461c      	mov	r4, r3
 8018c2e:	4613      	mov	r3, r2
 8018c30:	cb07      	ldmia	r3!, {r0, r1, r2}
 8018c32:	6020      	str	r0, [r4, #0]
 8018c34:	6061      	str	r1, [r4, #4]
 8018c36:	60a2      	str	r2, [r4, #8]
 8018c38:	881b      	ldrh	r3, [r3, #0]
 8018c3a:	81a3      	strh	r3, [r4, #12]
			strcpy(p->startFinish, "s,d,d,d,e");
 8018c3c:	687b      	ldr	r3, [r7, #4]
 8018c3e:	33d8      	adds	r3, #216	; 0xd8
 8018c40:	4999      	ldr	r1, [pc, #612]	; (8018ea8 <problem_fetch+0x17b88>)
 8018c42:	461a      	mov	r2, r3
 8018c44:	460b      	mov	r3, r1
 8018c46:	cb03      	ldmia	r3!, {r0, r1}
 8018c48:	6010      	str	r0, [r2, #0]
 8018c4a:	6051      	str	r1, [r2, #4]
 8018c4c:	881b      	ldrh	r3, [r3, #0]
 8018c4e:	8113      	strh	r3, [r2, #8]
			strcpy(p->grade, "6C+");
 8018c50:	687b      	ldr	r3, [r7, #4]
 8018c52:	33cc      	adds	r3, #204	; 0xcc
 8018c54:	4a95      	ldr	r2, [pc, #596]	; (8018eac <problem_fetch+0x17b8c>)
 8018c56:	6810      	ldr	r0, [r2, #0]
 8018c58:	6018      	str	r0, [r3, #0]
			break;
 8018c5a:	f002 b8a7 	b.w	801adac <problem_fetch+0x19a8c>
		case 764 :
			strcpy(p->name,"WING SPANDEX");
 8018c5e:	687b      	ldr	r3, [r7, #4]
 8018c60:	337c      	adds	r3, #124	; 0x7c
 8018c62:	4a93      	ldr	r2, [pc, #588]	; (8018eb0 <problem_fetch+0x17b90>)
 8018c64:	461c      	mov	r4, r3
 8018c66:	4613      	mov	r3, r2
 8018c68:	cb07      	ldmia	r3!, {r0, r1, r2}
 8018c6a:	6020      	str	r0, [r4, #0]
 8018c6c:	6061      	str	r1, [r4, #4]
 8018c6e:	60a2      	str	r2, [r4, #8]
 8018c70:	781b      	ldrb	r3, [r3, #0]
 8018c72:	7323      	strb	r3, [r4, #12]
			p->moveSize = 6;
 8018c74:	687b      	ldr	r3, [r7, #4]
 8018c76:	2206      	movs	r2, #6
 8018c78:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"E,C,F,C,G,A");
 8018c7a:	687b      	ldr	r3, [r7, #4]
 8018c7c:	3340      	adds	r3, #64	; 0x40
 8018c7e:	4a8d      	ldr	r2, [pc, #564]	; (8018eb4 <problem_fetch+0x17b94>)
 8018c80:	461c      	mov	r4, r3
 8018c82:	4613      	mov	r3, r2
 8018c84:	cb07      	ldmia	r3!, {r0, r1, r2}
 8018c86:	6020      	str	r0, [r4, #0]
 8018c88:	6061      	str	r1, [r4, #4]
 8018c8a:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"6,8,11,13,17,18");
 8018c8c:	687b      	ldr	r3, [r7, #4]
 8018c8e:	3304      	adds	r3, #4
 8018c90:	4a89      	ldr	r2, [pc, #548]	; (8018eb8 <problem_fetch+0x17b98>)
 8018c92:	461c      	mov	r4, r3
 8018c94:	4615      	mov	r5, r2
 8018c96:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8018c98:	6020      	str	r0, [r4, #0]
 8018c9a:	6061      	str	r1, [r4, #4]
 8018c9c:	60a2      	str	r2, [r4, #8]
 8018c9e:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish, "s,d,d,d,d,e");
 8018ca0:	687b      	ldr	r3, [r7, #4]
 8018ca2:	33d8      	adds	r3, #216	; 0xd8
 8018ca4:	4a85      	ldr	r2, [pc, #532]	; (8018ebc <problem_fetch+0x17b9c>)
 8018ca6:	461c      	mov	r4, r3
 8018ca8:	4613      	mov	r3, r2
 8018caa:	cb07      	ldmia	r3!, {r0, r1, r2}
 8018cac:	6020      	str	r0, [r4, #0]
 8018cae:	6061      	str	r1, [r4, #4]
 8018cb0:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade, "7B");
 8018cb2:	687b      	ldr	r3, [r7, #4]
 8018cb4:	33cc      	adds	r3, #204	; 0xcc
 8018cb6:	4a82      	ldr	r2, [pc, #520]	; (8018ec0 <problem_fetch+0x17ba0>)
 8018cb8:	8811      	ldrh	r1, [r2, #0]
 8018cba:	7892      	ldrb	r2, [r2, #2]
 8018cbc:	8019      	strh	r1, [r3, #0]
 8018cbe:	709a      	strb	r2, [r3, #2]
			break;
 8018cc0:	f002 b874 	b.w	801adac <problem_fetch+0x19a8c>
		case 765 :
			strcpy(p->name,"BLACK CAT");
 8018cc4:	687b      	ldr	r3, [r7, #4]
 8018cc6:	337c      	adds	r3, #124	; 0x7c
 8018cc8:	497e      	ldr	r1, [pc, #504]	; (8018ec4 <problem_fetch+0x17ba4>)
 8018cca:	461a      	mov	r2, r3
 8018ccc:	460b      	mov	r3, r1
 8018cce:	cb03      	ldmia	r3!, {r0, r1}
 8018cd0:	6010      	str	r0, [r2, #0]
 8018cd2:	6051      	str	r1, [r2, #4]
 8018cd4:	881b      	ldrh	r3, [r3, #0]
 8018cd6:	8113      	strh	r3, [r2, #8]
			p->moveSize = 7;
 8018cd8:	687b      	ldr	r3, [r7, #4]
 8018cda:	2207      	movs	r2, #7
 8018cdc:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"J,H,I,E,E,J,I");
 8018cde:	687b      	ldr	r3, [r7, #4]
 8018ce0:	3340      	adds	r3, #64	; 0x40
 8018ce2:	4a79      	ldr	r2, [pc, #484]	; (8018ec8 <problem_fetch+0x17ba8>)
 8018ce4:	461c      	mov	r4, r3
 8018ce6:	4613      	mov	r3, r2
 8018ce8:	cb07      	ldmia	r3!, {r0, r1, r2}
 8018cea:	6020      	str	r0, [r4, #0]
 8018cec:	6061      	str	r1, [r4, #4]
 8018cee:	60a2      	str	r2, [r4, #8]
 8018cf0:	881b      	ldrh	r3, [r3, #0]
 8018cf2:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,8,9,12,14,16,18");
 8018cf4:	687b      	ldr	r3, [r7, #4]
 8018cf6:	3304      	adds	r3, #4
 8018cf8:	4a74      	ldr	r2, [pc, #464]	; (8018ecc <problem_fetch+0x17bac>)
 8018cfa:	461d      	mov	r5, r3
 8018cfc:	4614      	mov	r4, r2
 8018cfe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8018d00:	6028      	str	r0, [r5, #0]
 8018d02:	6069      	str	r1, [r5, #4]
 8018d04:	60aa      	str	r2, [r5, #8]
 8018d06:	60eb      	str	r3, [r5, #12]
 8018d08:	8823      	ldrh	r3, [r4, #0]
 8018d0a:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish, "s,d,d,d,d,d,e");
 8018d0c:	687b      	ldr	r3, [r7, #4]
 8018d0e:	33d8      	adds	r3, #216	; 0xd8
 8018d10:	4a60      	ldr	r2, [pc, #384]	; (8018e94 <problem_fetch+0x17b74>)
 8018d12:	461c      	mov	r4, r3
 8018d14:	4613      	mov	r3, r2
 8018d16:	cb07      	ldmia	r3!, {r0, r1, r2}
 8018d18:	6020      	str	r0, [r4, #0]
 8018d1a:	6061      	str	r1, [r4, #4]
 8018d1c:	60a2      	str	r2, [r4, #8]
 8018d1e:	881b      	ldrh	r3, [r3, #0]
 8018d20:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade, "7B+");
 8018d22:	687b      	ldr	r3, [r7, #4]
 8018d24:	33cc      	adds	r3, #204	; 0xcc
 8018d26:	4a6a      	ldr	r2, [pc, #424]	; (8018ed0 <problem_fetch+0x17bb0>)
 8018d28:	6810      	ldr	r0, [r2, #0]
 8018d2a:	6018      	str	r0, [r3, #0]
			break;
 8018d2c:	f002 b83e 	b.w	801adac <problem_fetch+0x19a8c>
		case 766 :
			strcpy(p->name,"GOBRIGHT SPECIAL");
 8018d30:	687b      	ldr	r3, [r7, #4]
 8018d32:	337c      	adds	r3, #124	; 0x7c
 8018d34:	4a67      	ldr	r2, [pc, #412]	; (8018ed4 <problem_fetch+0x17bb4>)
 8018d36:	461d      	mov	r5, r3
 8018d38:	4614      	mov	r4, r2
 8018d3a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8018d3c:	6028      	str	r0, [r5, #0]
 8018d3e:	6069      	str	r1, [r5, #4]
 8018d40:	60aa      	str	r2, [r5, #8]
 8018d42:	60eb      	str	r3, [r5, #12]
 8018d44:	7823      	ldrb	r3, [r4, #0]
 8018d46:	742b      	strb	r3, [r5, #16]
			p->moveSize = 5;
 8018d48:	687b      	ldr	r3, [r7, #4]
 8018d4a:	2205      	movs	r2, #5
 8018d4c:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"B,H,H,C,D");
 8018d4e:	687b      	ldr	r3, [r7, #4]
 8018d50:	3340      	adds	r3, #64	; 0x40
 8018d52:	4961      	ldr	r1, [pc, #388]	; (8018ed8 <problem_fetch+0x17bb8>)
 8018d54:	461a      	mov	r2, r3
 8018d56:	460b      	mov	r3, r1
 8018d58:	cb03      	ldmia	r3!, {r0, r1}
 8018d5a:	6010      	str	r0, [r2, #0]
 8018d5c:	6051      	str	r1, [r2, #4]
 8018d5e:	881b      	ldrh	r3, [r3, #0]
 8018d60:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"6,5,10,13,18");
 8018d62:	687b      	ldr	r3, [r7, #4]
 8018d64:	3304      	adds	r3, #4
 8018d66:	4a5d      	ldr	r2, [pc, #372]	; (8018edc <problem_fetch+0x17bbc>)
 8018d68:	461c      	mov	r4, r3
 8018d6a:	4613      	mov	r3, r2
 8018d6c:	cb07      	ldmia	r3!, {r0, r1, r2}
 8018d6e:	6020      	str	r0, [r4, #0]
 8018d70:	6061      	str	r1, [r4, #4]
 8018d72:	60a2      	str	r2, [r4, #8]
 8018d74:	781b      	ldrb	r3, [r3, #0]
 8018d76:	7323      	strb	r3, [r4, #12]
			strcpy(p->startFinish, "s,s,d,d,e");
 8018d78:	687b      	ldr	r3, [r7, #4]
 8018d7a:	33d8      	adds	r3, #216	; 0xd8
 8018d7c:	4958      	ldr	r1, [pc, #352]	; (8018ee0 <problem_fetch+0x17bc0>)
 8018d7e:	461a      	mov	r2, r3
 8018d80:	460b      	mov	r3, r1
 8018d82:	cb03      	ldmia	r3!, {r0, r1}
 8018d84:	6010      	str	r0, [r2, #0]
 8018d86:	6051      	str	r1, [r2, #4]
 8018d88:	881b      	ldrh	r3, [r3, #0]
 8018d8a:	8113      	strh	r3, [r2, #8]
			strcpy(p->grade, "7A");
 8018d8c:	687b      	ldr	r3, [r7, #4]
 8018d8e:	33cc      	adds	r3, #204	; 0xcc
 8018d90:	4a54      	ldr	r2, [pc, #336]	; (8018ee4 <problem_fetch+0x17bc4>)
 8018d92:	8811      	ldrh	r1, [r2, #0]
 8018d94:	7892      	ldrb	r2, [r2, #2]
 8018d96:	8019      	strh	r1, [r3, #0]
 8018d98:	709a      	strb	r2, [r3, #2]
			break;
 8018d9a:	f002 b807 	b.w	801adac <problem_fetch+0x19a8c>
		case 767 :
			strcpy(p->name,"BASTION");
 8018d9e:	687b      	ldr	r3, [r7, #4]
 8018da0:	337c      	adds	r3, #124	; 0x7c
 8018da2:	4951      	ldr	r1, [pc, #324]	; (8018ee8 <problem_fetch+0x17bc8>)
 8018da4:	461a      	mov	r2, r3
 8018da6:	460b      	mov	r3, r1
 8018da8:	cb03      	ldmia	r3!, {r0, r1}
 8018daa:	6010      	str	r0, [r2, #0]
 8018dac:	6051      	str	r1, [r2, #4]
			p->moveSize = 10;
 8018dae:	687b      	ldr	r3, [r7, #4]
 8018db0:	220a      	movs	r2, #10
 8018db2:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"H,J,E,F,B,E,B,G,E,I");
 8018db4:	687b      	ldr	r3, [r7, #4]
 8018db6:	3340      	adds	r3, #64	; 0x40
 8018db8:	4a4c      	ldr	r2, [pc, #304]	; (8018eec <problem_fetch+0x17bcc>)
 8018dba:	461d      	mov	r5, r3
 8018dbc:	4614      	mov	r4, r2
 8018dbe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8018dc0:	6028      	str	r0, [r5, #0]
 8018dc2:	6069      	str	r1, [r5, #4]
 8018dc4:	60aa      	str	r2, [r5, #8]
 8018dc6:	60eb      	str	r3, [r5, #12]
 8018dc8:	6820      	ldr	r0, [r4, #0]
 8018dca:	6128      	str	r0, [r5, #16]
			strcpy(p->moveNumbers,"5,5,8,11,12,12,15,17,16,18");
 8018dcc:	687b      	ldr	r3, [r7, #4]
 8018dce:	3304      	adds	r3, #4
 8018dd0:	4a47      	ldr	r2, [pc, #284]	; (8018ef0 <problem_fetch+0x17bd0>)
 8018dd2:	461d      	mov	r5, r3
 8018dd4:	4614      	mov	r4, r2
 8018dd6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8018dd8:	6028      	str	r0, [r5, #0]
 8018dda:	6069      	str	r1, [r5, #4]
 8018ddc:	60aa      	str	r2, [r5, #8]
 8018dde:	60eb      	str	r3, [r5, #12]
 8018de0:	cc03      	ldmia	r4!, {r0, r1}
 8018de2:	6128      	str	r0, [r5, #16]
 8018de4:	6169      	str	r1, [r5, #20]
 8018de6:	8823      	ldrh	r3, [r4, #0]
 8018de8:	78a2      	ldrb	r2, [r4, #2]
 8018dea:	832b      	strh	r3, [r5, #24]
 8018dec:	4613      	mov	r3, r2
 8018dee:	76ab      	strb	r3, [r5, #26]
			strcpy(p->startFinish, "s,s,d,d,d,d,d,d,d,e");
 8018df0:	687b      	ldr	r3, [r7, #4]
 8018df2:	33d8      	adds	r3, #216	; 0xd8
 8018df4:	4a3f      	ldr	r2, [pc, #252]	; (8018ef4 <problem_fetch+0x17bd4>)
 8018df6:	461d      	mov	r5, r3
 8018df8:	4614      	mov	r4, r2
 8018dfa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8018dfc:	6028      	str	r0, [r5, #0]
 8018dfe:	6069      	str	r1, [r5, #4]
 8018e00:	60aa      	str	r2, [r5, #8]
 8018e02:	60eb      	str	r3, [r5, #12]
 8018e04:	6820      	ldr	r0, [r4, #0]
 8018e06:	6128      	str	r0, [r5, #16]
			strcpy(p->grade, "6C");
 8018e08:	687b      	ldr	r3, [r7, #4]
 8018e0a:	33cc      	adds	r3, #204	; 0xcc
 8018e0c:	4a22      	ldr	r2, [pc, #136]	; (8018e98 <problem_fetch+0x17b78>)
 8018e0e:	8811      	ldrh	r1, [r2, #0]
 8018e10:	7892      	ldrb	r2, [r2, #2]
 8018e12:	8019      	strh	r1, [r3, #0]
 8018e14:	709a      	strb	r2, [r3, #2]
			break;
 8018e16:	f001 bfc9 	b.w	801adac <problem_fetch+0x19a8c>
		case 768 :
			strcpy(p->name,"19-1.2");
 8018e1a:	687b      	ldr	r3, [r7, #4]
 8018e1c:	337c      	adds	r3, #124	; 0x7c
 8018e1e:	4a36      	ldr	r2, [pc, #216]	; (8018ef8 <problem_fetch+0x17bd8>)
 8018e20:	6810      	ldr	r0, [r2, #0]
 8018e22:	6018      	str	r0, [r3, #0]
 8018e24:	8891      	ldrh	r1, [r2, #4]
 8018e26:	7992      	ldrb	r2, [r2, #6]
 8018e28:	8099      	strh	r1, [r3, #4]
 8018e2a:	719a      	strb	r2, [r3, #6]
			p->moveSize = 8;
 8018e2c:	687b      	ldr	r3, [r7, #4]
 8018e2e:	2208      	movs	r2, #8
 8018e30:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"B,G,D,B,C,G,I,J");
 8018e32:	687b      	ldr	r3, [r7, #4]
 8018e34:	3340      	adds	r3, #64	; 0x40
 8018e36:	4a31      	ldr	r2, [pc, #196]	; (8018efc <problem_fetch+0x17bdc>)
 8018e38:	461c      	mov	r4, r3
 8018e3a:	4615      	mov	r5, r2
 8018e3c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8018e3e:	6020      	str	r0, [r4, #0]
 8018e40:	6061      	str	r1, [r4, #4]
 8018e42:	60a2      	str	r2, [r4, #8]
 8018e44:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"6,6,7,10,13,14,18,16");
 8018e46:	687b      	ldr	r3, [r7, #4]
 8018e48:	3304      	adds	r3, #4
 8018e4a:	4a2d      	ldr	r2, [pc, #180]	; (8018f00 <problem_fetch+0x17be0>)
 8018e4c:	461d      	mov	r5, r3
 8018e4e:	4614      	mov	r4, r2
 8018e50:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8018e52:	6028      	str	r0, [r5, #0]
 8018e54:	6069      	str	r1, [r5, #4]
 8018e56:	60aa      	str	r2, [r5, #8]
 8018e58:	60eb      	str	r3, [r5, #12]
 8018e5a:	6820      	ldr	r0, [r4, #0]
 8018e5c:	6128      	str	r0, [r5, #16]
 8018e5e:	7923      	ldrb	r3, [r4, #4]
 8018e60:	752b      	strb	r3, [r5, #20]
			strcpy(p->startFinish, "s,s,d,d,d,d,e,d");
 8018e62:	687b      	ldr	r3, [r7, #4]
 8018e64:	33d8      	adds	r3, #216	; 0xd8
 8018e66:	4a27      	ldr	r2, [pc, #156]	; (8018f04 <problem_fetch+0x17be4>)
 8018e68:	461c      	mov	r4, r3
 8018e6a:	4615      	mov	r5, r2
 8018e6c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8018e6e:	6020      	str	r0, [r4, #0]
 8018e70:	6061      	str	r1, [r4, #4]
 8018e72:	60a2      	str	r2, [r4, #8]
 8018e74:	60e3      	str	r3, [r4, #12]
			strcpy(p->grade, "7C");
 8018e76:	687b      	ldr	r3, [r7, #4]
 8018e78:	33cc      	adds	r3, #204	; 0xcc
 8018e7a:	4a23      	ldr	r2, [pc, #140]	; (8018f08 <problem_fetch+0x17be8>)
 8018e7c:	8811      	ldrh	r1, [r2, #0]
 8018e7e:	7892      	ldrb	r2, [r2, #2]
 8018e80:	8019      	strh	r1, [r3, #0]
 8018e82:	709a      	strb	r2, [r3, #2]
			break;
 8018e84:	f001 bf92 	b.w	801adac <problem_fetch+0x19a8c>
 8018e88:	08029c00 	.word	0x08029c00
 8018e8c:	08029c18 	.word	0x08029c18
 8018e90:	08029c28 	.word	0x08029c28
 8018e94:	08021494 	.word	0x08021494
 8018e98:	08021370 	.word	0x08021370
 8018e9c:	08029c3c 	.word	0x08029c3c
 8018ea0:	08029c48 	.word	0x08029c48
 8018ea4:	08029c54 	.word	0x08029c54
 8018ea8:	08021320 	.word	0x08021320
 8018eac:	080213a8 	.word	0x080213a8
 8018eb0:	08029c64 	.word	0x08029c64
 8018eb4:	08029c74 	.word	0x08029c74
 8018eb8:	08029c80 	.word	0x08029c80
 8018ebc:	0802139c 	.word	0x0802139c
 8018ec0:	0802132c 	.word	0x0802132c
 8018ec4:	08029c90 	.word	0x08029c90
 8018ec8:	08029c9c 	.word	0x08029c9c
 8018ecc:	08029cac 	.word	0x08029cac
 8018ed0:	08021848 	.word	0x08021848
 8018ed4:	08029cc0 	.word	0x08029cc0
 8018ed8:	08029cd4 	.word	0x08029cd4
 8018edc:	08023bd8 	.word	0x08023bd8
 8018ee0:	080221c8 	.word	0x080221c8
 8018ee4:	080212f4 	.word	0x080212f4
 8018ee8:	08029ce0 	.word	0x08029ce0
 8018eec:	08029ce8 	.word	0x08029ce8
 8018ef0:	08029cfc 	.word	0x08029cfc
 8018ef4:	080215fc 	.word	0x080215fc
 8018ef8:	08029d18 	.word	0x08029d18
 8018efc:	08029d20 	.word	0x08029d20
 8018f00:	08029d30 	.word	0x08029d30
 8018f04:	08027328 	.word	0x08027328
 8018f08:	0802158c 	.word	0x0802158c
		case 769 :
			strcpy(p->name,"GGGGGGH");
 8018f0c:	687b      	ldr	r3, [r7, #4]
 8018f0e:	337c      	adds	r3, #124	; 0x7c
 8018f10:	49bf      	ldr	r1, [pc, #764]	; (8019210 <problem_fetch+0x17ef0>)
 8018f12:	461a      	mov	r2, r3
 8018f14:	460b      	mov	r3, r1
 8018f16:	cb03      	ldmia	r3!, {r0, r1}
 8018f18:	6010      	str	r0, [r2, #0]
 8018f1a:	6051      	str	r1, [r2, #4]
			p->moveSize = 9;
 8018f1c:	687b      	ldr	r3, [r7, #4]
 8018f1e:	2209      	movs	r2, #9
 8018f20:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"G,H,I,K,H,J,I,J,K");
 8018f22:	687b      	ldr	r3, [r7, #4]
 8018f24:	3340      	adds	r3, #64	; 0x40
 8018f26:	4abb      	ldr	r2, [pc, #748]	; (8019214 <problem_fetch+0x17ef4>)
 8018f28:	461d      	mov	r5, r3
 8018f2a:	4614      	mov	r4, r2
 8018f2c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8018f2e:	6028      	str	r0, [r5, #0]
 8018f30:	6069      	str	r1, [r5, #4]
 8018f32:	60aa      	str	r2, [r5, #8]
 8018f34:	60eb      	str	r3, [r5, #12]
 8018f36:	8823      	ldrh	r3, [r4, #0]
 8018f38:	822b      	strh	r3, [r5, #16]
			strcpy(p->moveNumbers,"4,5,7,9,10,13,18,16,16");
 8018f3a:	687b      	ldr	r3, [r7, #4]
 8018f3c:	3304      	adds	r3, #4
 8018f3e:	4ab6      	ldr	r2, [pc, #728]	; (8019218 <problem_fetch+0x17ef8>)
 8018f40:	461c      	mov	r4, r3
 8018f42:	4615      	mov	r5, r2
 8018f44:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8018f46:	6020      	str	r0, [r4, #0]
 8018f48:	6061      	str	r1, [r4, #4]
 8018f4a:	60a2      	str	r2, [r4, #8]
 8018f4c:	60e3      	str	r3, [r4, #12]
 8018f4e:	6828      	ldr	r0, [r5, #0]
 8018f50:	6120      	str	r0, [r4, #16]
 8018f52:	88ab      	ldrh	r3, [r5, #4]
 8018f54:	79aa      	ldrb	r2, [r5, #6]
 8018f56:	82a3      	strh	r3, [r4, #20]
 8018f58:	4613      	mov	r3, r2
 8018f5a:	75a3      	strb	r3, [r4, #22]
			strcpy(p->startFinish, "s,s,d,d,d,d,e,d,d");
 8018f5c:	687b      	ldr	r3, [r7, #4]
 8018f5e:	33d8      	adds	r3, #216	; 0xd8
 8018f60:	4aae      	ldr	r2, [pc, #696]	; (801921c <problem_fetch+0x17efc>)
 8018f62:	461d      	mov	r5, r3
 8018f64:	4614      	mov	r4, r2
 8018f66:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8018f68:	6028      	str	r0, [r5, #0]
 8018f6a:	6069      	str	r1, [r5, #4]
 8018f6c:	60aa      	str	r2, [r5, #8]
 8018f6e:	60eb      	str	r3, [r5, #12]
 8018f70:	8823      	ldrh	r3, [r4, #0]
 8018f72:	822b      	strh	r3, [r5, #16]
			strcpy(p->grade, "6B+");
 8018f74:	687b      	ldr	r3, [r7, #4]
 8018f76:	33cc      	adds	r3, #204	; 0xcc
 8018f78:	4aa9      	ldr	r2, [pc, #676]	; (8019220 <problem_fetch+0x17f00>)
 8018f7a:	6810      	ldr	r0, [r2, #0]
 8018f7c:	6018      	str	r0, [r3, #0]
			break;
 8018f7e:	f001 bf15 	b.w	801adac <problem_fetch+0x19a8c>
		case 77 :
			strcpy(p->name,"MADDEKÈ");
 8018f82:	687b      	ldr	r3, [r7, #4]
 8018f84:	337c      	adds	r3, #124	; 0x7c
 8018f86:	49a7      	ldr	r1, [pc, #668]	; (8019224 <problem_fetch+0x17f04>)
 8018f88:	461a      	mov	r2, r3
 8018f8a:	460b      	mov	r3, r1
 8018f8c:	cb03      	ldmia	r3!, {r0, r1}
 8018f8e:	6010      	str	r0, [r2, #0]
 8018f90:	6051      	str	r1, [r2, #4]
 8018f92:	781b      	ldrb	r3, [r3, #0]
 8018f94:	7213      	strb	r3, [r2, #8]
			p->moveSize = 5;
 8018f96:	687b      	ldr	r3, [r7, #4]
 8018f98:	2205      	movs	r2, #5
 8018f9a:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"J,I,G,G,D");
 8018f9c:	687b      	ldr	r3, [r7, #4]
 8018f9e:	3340      	adds	r3, #64	; 0x40
 8018fa0:	49a1      	ldr	r1, [pc, #644]	; (8019228 <problem_fetch+0x17f08>)
 8018fa2:	461a      	mov	r2, r3
 8018fa4:	460b      	mov	r3, r1
 8018fa6:	cb03      	ldmia	r3!, {r0, r1}
 8018fa8:	6010      	str	r0, [r2, #0]
 8018faa:	6051      	str	r1, [r2, #4]
 8018fac:	881b      	ldrh	r3, [r3, #0]
 8018fae:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"5,7,10,14,18");
 8018fb0:	687b      	ldr	r3, [r7, #4]
 8018fb2:	3304      	adds	r3, #4
 8018fb4:	4a9d      	ldr	r2, [pc, #628]	; (801922c <problem_fetch+0x17f0c>)
 8018fb6:	461c      	mov	r4, r3
 8018fb8:	4613      	mov	r3, r2
 8018fba:	cb07      	ldmia	r3!, {r0, r1, r2}
 8018fbc:	6020      	str	r0, [r4, #0]
 8018fbe:	6061      	str	r1, [r4, #4]
 8018fc0:	60a2      	str	r2, [r4, #8]
 8018fc2:	781b      	ldrb	r3, [r3, #0]
 8018fc4:	7323      	strb	r3, [r4, #12]
			strcpy(p->startFinish, "s,d,d,d,e");
 8018fc6:	687b      	ldr	r3, [r7, #4]
 8018fc8:	33d8      	adds	r3, #216	; 0xd8
 8018fca:	4999      	ldr	r1, [pc, #612]	; (8019230 <problem_fetch+0x17f10>)
 8018fcc:	461a      	mov	r2, r3
 8018fce:	460b      	mov	r3, r1
 8018fd0:	cb03      	ldmia	r3!, {r0, r1}
 8018fd2:	6010      	str	r0, [r2, #0]
 8018fd4:	6051      	str	r1, [r2, #4]
 8018fd6:	881b      	ldrh	r3, [r3, #0]
 8018fd8:	8113      	strh	r3, [r2, #8]
			strcpy(p->grade, "7B+");
 8018fda:	687b      	ldr	r3, [r7, #4]
 8018fdc:	33cc      	adds	r3, #204	; 0xcc
 8018fde:	4a95      	ldr	r2, [pc, #596]	; (8019234 <problem_fetch+0x17f14>)
 8018fe0:	6810      	ldr	r0, [r2, #0]
 8018fe2:	6018      	str	r0, [r3, #0]
			break;
 8018fe4:	f001 bee2 	b.w	801adac <problem_fetch+0x19a8c>
		case 770 :
			strcpy(p->name,"MOMMSEN'S#2");
 8018fe8:	687b      	ldr	r3, [r7, #4]
 8018fea:	337c      	adds	r3, #124	; 0x7c
 8018fec:	4a92      	ldr	r2, [pc, #584]	; (8019238 <problem_fetch+0x17f18>)
 8018fee:	461c      	mov	r4, r3
 8018ff0:	4613      	mov	r3, r2
 8018ff2:	cb07      	ldmia	r3!, {r0, r1, r2}
 8018ff4:	6020      	str	r0, [r4, #0]
 8018ff6:	6061      	str	r1, [r4, #4]
 8018ff8:	60a2      	str	r2, [r4, #8]
			p->moveSize = 7;
 8018ffa:	687b      	ldr	r3, [r7, #4]
 8018ffc:	2207      	movs	r2, #7
 8018ffe:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"J,G,G,E,I,G,I");
 8019000:	687b      	ldr	r3, [r7, #4]
 8019002:	3340      	adds	r3, #64	; 0x40
 8019004:	4a8d      	ldr	r2, [pc, #564]	; (801923c <problem_fetch+0x17f1c>)
 8019006:	461c      	mov	r4, r3
 8019008:	4613      	mov	r3, r2
 801900a:	cb07      	ldmia	r3!, {r0, r1, r2}
 801900c:	6020      	str	r0, [r4, #0]
 801900e:	6061      	str	r1, [r4, #4]
 8019010:	60a2      	str	r2, [r4, #8]
 8019012:	881b      	ldrh	r3, [r3, #0]
 8019014:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,6,9,12,14,15,18");
 8019016:	687b      	ldr	r3, [r7, #4]
 8019018:	3304      	adds	r3, #4
 801901a:	4a89      	ldr	r2, [pc, #548]	; (8019240 <problem_fetch+0x17f20>)
 801901c:	461d      	mov	r5, r3
 801901e:	4614      	mov	r4, r2
 8019020:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8019022:	6028      	str	r0, [r5, #0]
 8019024:	6069      	str	r1, [r5, #4]
 8019026:	60aa      	str	r2, [r5, #8]
 8019028:	60eb      	str	r3, [r5, #12]
 801902a:	8823      	ldrh	r3, [r4, #0]
 801902c:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish, "s,d,d,d,d,d,e");
 801902e:	687b      	ldr	r3, [r7, #4]
 8019030:	33d8      	adds	r3, #216	; 0xd8
 8019032:	4a84      	ldr	r2, [pc, #528]	; (8019244 <problem_fetch+0x17f24>)
 8019034:	461c      	mov	r4, r3
 8019036:	4613      	mov	r3, r2
 8019038:	cb07      	ldmia	r3!, {r0, r1, r2}
 801903a:	6020      	str	r0, [r4, #0]
 801903c:	6061      	str	r1, [r4, #4]
 801903e:	60a2      	str	r2, [r4, #8]
 8019040:	881b      	ldrh	r3, [r3, #0]
 8019042:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade, "6C");
 8019044:	687b      	ldr	r3, [r7, #4]
 8019046:	33cc      	adds	r3, #204	; 0xcc
 8019048:	4a7f      	ldr	r2, [pc, #508]	; (8019248 <problem_fetch+0x17f28>)
 801904a:	8811      	ldrh	r1, [r2, #0]
 801904c:	7892      	ldrb	r2, [r2, #2]
 801904e:	8019      	strh	r1, [r3, #0]
 8019050:	709a      	strb	r2, [r3, #2]
			break;
 8019052:	f001 beab 	b.w	801adac <problem_fetch+0x19a8c>
		case 771 :
			strcpy(p->name,"L’HEURE SOMBRE");
 8019056:	687b      	ldr	r3, [r7, #4]
 8019058:	337c      	adds	r3, #124	; 0x7c
 801905a:	4a7c      	ldr	r2, [pc, #496]	; (801924c <problem_fetch+0x17f2c>)
 801905c:	461d      	mov	r5, r3
 801905e:	4614      	mov	r4, r2
 8019060:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8019062:	6028      	str	r0, [r5, #0]
 8019064:	6069      	str	r1, [r5, #4]
 8019066:	60aa      	str	r2, [r5, #8]
 8019068:	60eb      	str	r3, [r5, #12]
 801906a:	7823      	ldrb	r3, [r4, #0]
 801906c:	742b      	strb	r3, [r5, #16]
			p->moveSize = 9;
 801906e:	687b      	ldr	r3, [r7, #4]
 8019070:	2209      	movs	r2, #9
 8019072:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"C,D,E,D,E,B,C,A,B");
 8019074:	687b      	ldr	r3, [r7, #4]
 8019076:	3340      	adds	r3, #64	; 0x40
 8019078:	4a75      	ldr	r2, [pc, #468]	; (8019250 <problem_fetch+0x17f30>)
 801907a:	461d      	mov	r5, r3
 801907c:	4614      	mov	r4, r2
 801907e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8019080:	6028      	str	r0, [r5, #0]
 8019082:	6069      	str	r1, [r5, #4]
 8019084:	60aa      	str	r2, [r5, #8]
 8019086:	60eb      	str	r3, [r5, #12]
 8019088:	8823      	ldrh	r3, [r4, #0]
 801908a:	822b      	strh	r3, [r5, #16]
			strcpy(p->moveNumbers,"5,7,9,11,14,12,16,18,6");
 801908c:	687b      	ldr	r3, [r7, #4]
 801908e:	3304      	adds	r3, #4
 8019090:	4a70      	ldr	r2, [pc, #448]	; (8019254 <problem_fetch+0x17f34>)
 8019092:	461c      	mov	r4, r3
 8019094:	4615      	mov	r5, r2
 8019096:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8019098:	6020      	str	r0, [r4, #0]
 801909a:	6061      	str	r1, [r4, #4]
 801909c:	60a2      	str	r2, [r4, #8]
 801909e:	60e3      	str	r3, [r4, #12]
 80190a0:	6828      	ldr	r0, [r5, #0]
 80190a2:	6120      	str	r0, [r4, #16]
 80190a4:	88ab      	ldrh	r3, [r5, #4]
 80190a6:	79aa      	ldrb	r2, [r5, #6]
 80190a8:	82a3      	strh	r3, [r4, #20]
 80190aa:	4613      	mov	r3, r2
 80190ac:	75a3      	strb	r3, [r4, #22]
			strcpy(p->startFinish, "s,d,d,d,d,d,d,e,s");
 80190ae:	687b      	ldr	r3, [r7, #4]
 80190b0:	33d8      	adds	r3, #216	; 0xd8
 80190b2:	4a69      	ldr	r2, [pc, #420]	; (8019258 <problem_fetch+0x17f38>)
 80190b4:	461d      	mov	r5, r3
 80190b6:	4614      	mov	r4, r2
 80190b8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80190ba:	6028      	str	r0, [r5, #0]
 80190bc:	6069      	str	r1, [r5, #4]
 80190be:	60aa      	str	r2, [r5, #8]
 80190c0:	60eb      	str	r3, [r5, #12]
 80190c2:	8823      	ldrh	r3, [r4, #0]
 80190c4:	822b      	strh	r3, [r5, #16]
			strcpy(p->grade, "7B+");
 80190c6:	687b      	ldr	r3, [r7, #4]
 80190c8:	33cc      	adds	r3, #204	; 0xcc
 80190ca:	4a5a      	ldr	r2, [pc, #360]	; (8019234 <problem_fetch+0x17f14>)
 80190cc:	6810      	ldr	r0, [r2, #0]
 80190ce:	6018      	str	r0, [r3, #0]
			break;
 80190d0:	f001 be6c 	b.w	801adac <problem_fetch+0x19a8c>
		case 772 :
			strcpy(p->name,"NOT FOR HOONY");
 80190d4:	687b      	ldr	r3, [r7, #4]
 80190d6:	337c      	adds	r3, #124	; 0x7c
 80190d8:	4a60      	ldr	r2, [pc, #384]	; (801925c <problem_fetch+0x17f3c>)
 80190da:	461c      	mov	r4, r3
 80190dc:	4613      	mov	r3, r2
 80190de:	cb07      	ldmia	r3!, {r0, r1, r2}
 80190e0:	6020      	str	r0, [r4, #0]
 80190e2:	6061      	str	r1, [r4, #4]
 80190e4:	60a2      	str	r2, [r4, #8]
 80190e6:	881b      	ldrh	r3, [r3, #0]
 80190e8:	81a3      	strh	r3, [r4, #12]
			p->moveSize = 8;
 80190ea:	687b      	ldr	r3, [r7, #4]
 80190ec:	2208      	movs	r2, #8
 80190ee:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"G,E,E,C,G,A,I,H");
 80190f0:	687b      	ldr	r3, [r7, #4]
 80190f2:	3340      	adds	r3, #64	; 0x40
 80190f4:	4a5a      	ldr	r2, [pc, #360]	; (8019260 <problem_fetch+0x17f40>)
 80190f6:	461c      	mov	r4, r3
 80190f8:	4615      	mov	r5, r2
 80190fa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80190fc:	6020      	str	r0, [r4, #0]
 80190fe:	6061      	str	r1, [r4, #4]
 8019100:	60a2      	str	r2, [r4, #8]
 8019102:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,6,9,13,17,9,18,16");
 8019104:	687b      	ldr	r3, [r7, #4]
 8019106:	3304      	adds	r3, #4
 8019108:	4a56      	ldr	r2, [pc, #344]	; (8019264 <problem_fetch+0x17f44>)
 801910a:	461d      	mov	r5, r3
 801910c:	4614      	mov	r4, r2
 801910e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8019110:	6028      	str	r0, [r5, #0]
 8019112:	6069      	str	r1, [r5, #4]
 8019114:	60aa      	str	r2, [r5, #8]
 8019116:	60eb      	str	r3, [r5, #12]
 8019118:	6820      	ldr	r0, [r4, #0]
 801911a:	6128      	str	r0, [r5, #16]
			strcpy(p->startFinish, "s,d,d,d,d,d,e,d");
 801911c:	687b      	ldr	r3, [r7, #4]
 801911e:	33d8      	adds	r3, #216	; 0xd8
 8019120:	4a51      	ldr	r2, [pc, #324]	; (8019268 <problem_fetch+0x17f48>)
 8019122:	461c      	mov	r4, r3
 8019124:	4615      	mov	r5, r2
 8019126:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8019128:	6020      	str	r0, [r4, #0]
 801912a:	6061      	str	r1, [r4, #4]
 801912c:	60a2      	str	r2, [r4, #8]
 801912e:	60e3      	str	r3, [r4, #12]
			strcpy(p->grade, "7A+");
 8019130:	687b      	ldr	r3, [r7, #4]
 8019132:	33cc      	adds	r3, #204	; 0xcc
 8019134:	4a4d      	ldr	r2, [pc, #308]	; (801926c <problem_fetch+0x17f4c>)
 8019136:	6810      	ldr	r0, [r2, #0]
 8019138:	6018      	str	r0, [r3, #0]
			break;
 801913a:	f001 be37 	b.w	801adac <problem_fetch+0x19a8c>
		case 773 :
			strcpy(p->name,"LIZZY BLACK");
 801913e:	687b      	ldr	r3, [r7, #4]
 8019140:	337c      	adds	r3, #124	; 0x7c
 8019142:	4a4b      	ldr	r2, [pc, #300]	; (8019270 <problem_fetch+0x17f50>)
 8019144:	461c      	mov	r4, r3
 8019146:	4613      	mov	r3, r2
 8019148:	cb07      	ldmia	r3!, {r0, r1, r2}
 801914a:	6020      	str	r0, [r4, #0]
 801914c:	6061      	str	r1, [r4, #4]
 801914e:	60a2      	str	r2, [r4, #8]
			p->moveSize = 6;
 8019150:	687b      	ldr	r3, [r7, #4]
 8019152:	2206      	movs	r2, #6
 8019154:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"G,I,F,E,D,I");
 8019156:	687b      	ldr	r3, [r7, #4]
 8019158:	3340      	adds	r3, #64	; 0x40
 801915a:	4a46      	ldr	r2, [pc, #280]	; (8019274 <problem_fetch+0x17f54>)
 801915c:	461c      	mov	r4, r3
 801915e:	4613      	mov	r3, r2
 8019160:	cb07      	ldmia	r3!, {r0, r1, r2}
 8019162:	6020      	str	r0, [r4, #0]
 8019164:	6061      	str	r1, [r4, #4]
 8019166:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,10,13,12,15,18");
 8019168:	687b      	ldr	r3, [r7, #4]
 801916a:	3304      	adds	r3, #4
 801916c:	4a42      	ldr	r2, [pc, #264]	; (8019278 <problem_fetch+0x17f58>)
 801916e:	461d      	mov	r5, r3
 8019170:	4614      	mov	r4, r2
 8019172:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8019174:	6028      	str	r0, [r5, #0]
 8019176:	6069      	str	r1, [r5, #4]
 8019178:	60aa      	str	r2, [r5, #8]
 801917a:	60eb      	str	r3, [r5, #12]
 801917c:	7823      	ldrb	r3, [r4, #0]
 801917e:	742b      	strb	r3, [r5, #16]
			strcpy(p->startFinish, "s,d,d,d,d,e");
 8019180:	687b      	ldr	r3, [r7, #4]
 8019182:	33d8      	adds	r3, #216	; 0xd8
 8019184:	4a3d      	ldr	r2, [pc, #244]	; (801927c <problem_fetch+0x17f5c>)
 8019186:	461c      	mov	r4, r3
 8019188:	4613      	mov	r3, r2
 801918a:	cb07      	ldmia	r3!, {r0, r1, r2}
 801918c:	6020      	str	r0, [r4, #0]
 801918e:	6061      	str	r1, [r4, #4]
 8019190:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade, "7B");
 8019192:	687b      	ldr	r3, [r7, #4]
 8019194:	33cc      	adds	r3, #204	; 0xcc
 8019196:	4a3a      	ldr	r2, [pc, #232]	; (8019280 <problem_fetch+0x17f60>)
 8019198:	8811      	ldrh	r1, [r2, #0]
 801919a:	7892      	ldrb	r2, [r2, #2]
 801919c:	8019      	strh	r1, [r3, #0]
 801919e:	709a      	strb	r2, [r3, #2]
			break;
 80191a0:	f001 be04 	b.w	801adac <problem_fetch+0x19a8c>
		case 774 :
			strcpy(p->name,"I ❤️ ELLIA");
 80191a4:	687b      	ldr	r3, [r7, #4]
 80191a6:	337c      	adds	r3, #124	; 0x7c
 80191a8:	4a36      	ldr	r2, [pc, #216]	; (8019284 <problem_fetch+0x17f64>)
 80191aa:	461c      	mov	r4, r3
 80191ac:	4613      	mov	r3, r2
 80191ae:	cb07      	ldmia	r3!, {r0, r1, r2}
 80191b0:	6020      	str	r0, [r4, #0]
 80191b2:	6061      	str	r1, [r4, #4]
 80191b4:	60a2      	str	r2, [r4, #8]
 80191b6:	881a      	ldrh	r2, [r3, #0]
 80191b8:	789b      	ldrb	r3, [r3, #2]
 80191ba:	81a2      	strh	r2, [r4, #12]
 80191bc:	73a3      	strb	r3, [r4, #14]
			p->moveSize = 5;
 80191be:	687b      	ldr	r3, [r7, #4]
 80191c0:	2205      	movs	r2, #5
 80191c2:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"J,G,G,C,D");
 80191c4:	687b      	ldr	r3, [r7, #4]
 80191c6:	3340      	adds	r3, #64	; 0x40
 80191c8:	492f      	ldr	r1, [pc, #188]	; (8019288 <problem_fetch+0x17f68>)
 80191ca:	461a      	mov	r2, r3
 80191cc:	460b      	mov	r3, r1
 80191ce:	cb03      	ldmia	r3!, {r0, r1}
 80191d0:	6010      	str	r0, [r2, #0]
 80191d2:	6051      	str	r1, [r2, #4]
 80191d4:	881b      	ldrh	r3, [r3, #0]
 80191d6:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"5,6,10,13,18");
 80191d8:	687b      	ldr	r3, [r7, #4]
 80191da:	3304      	adds	r3, #4
 80191dc:	4a2b      	ldr	r2, [pc, #172]	; (801928c <problem_fetch+0x17f6c>)
 80191de:	461c      	mov	r4, r3
 80191e0:	4613      	mov	r3, r2
 80191e2:	cb07      	ldmia	r3!, {r0, r1, r2}
 80191e4:	6020      	str	r0, [r4, #0]
 80191e6:	6061      	str	r1, [r4, #4]
 80191e8:	60a2      	str	r2, [r4, #8]
 80191ea:	781b      	ldrb	r3, [r3, #0]
 80191ec:	7323      	strb	r3, [r4, #12]
			strcpy(p->startFinish, "s,s,d,d,e");
 80191ee:	687b      	ldr	r3, [r7, #4]
 80191f0:	33d8      	adds	r3, #216	; 0xd8
 80191f2:	4927      	ldr	r1, [pc, #156]	; (8019290 <problem_fetch+0x17f70>)
 80191f4:	461a      	mov	r2, r3
 80191f6:	460b      	mov	r3, r1
 80191f8:	cb03      	ldmia	r3!, {r0, r1}
 80191fa:	6010      	str	r0, [r2, #0]
 80191fc:	6051      	str	r1, [r2, #4]
 80191fe:	881b      	ldrh	r3, [r3, #0]
 8019200:	8113      	strh	r3, [r2, #8]
			strcpy(p->grade, "7A+");
 8019202:	687b      	ldr	r3, [r7, #4]
 8019204:	33cc      	adds	r3, #204	; 0xcc
 8019206:	4a19      	ldr	r2, [pc, #100]	; (801926c <problem_fetch+0x17f4c>)
 8019208:	6810      	ldr	r0, [r2, #0]
 801920a:	6018      	str	r0, [r3, #0]
			break;
 801920c:	f001 bdce 	b.w	801adac <problem_fetch+0x19a8c>
 8019210:	08029d48 	.word	0x08029d48
 8019214:	08029d50 	.word	0x08029d50
 8019218:	08029d64 	.word	0x08029d64
 801921c:	08029d7c 	.word	0x08029d7c
 8019220:	080212b0 	.word	0x080212b0
 8019224:	08029d90 	.word	0x08029d90
 8019228:	08029d9c 	.word	0x08029d9c
 801922c:	08029da8 	.word	0x08029da8
 8019230:	08021320 	.word	0x08021320
 8019234:	08021848 	.word	0x08021848
 8019238:	08029db8 	.word	0x08029db8
 801923c:	08029dc4 	.word	0x08029dc4
 8019240:	080223ac 	.word	0x080223ac
 8019244:	08021494 	.word	0x08021494
 8019248:	08021370 	.word	0x08021370
 801924c:	08029dd4 	.word	0x08029dd4
 8019250:	08029de8 	.word	0x08029de8
 8019254:	08029dfc 	.word	0x08029dfc
 8019258:	08029504 	.word	0x08029504
 801925c:	08029e14 	.word	0x08029e14
 8019260:	08029e24 	.word	0x08029e24
 8019264:	08029e34 	.word	0x08029e34
 8019268:	08026b54 	.word	0x08026b54
 801926c:	08021424 	.word	0x08021424
 8019270:	08029e48 	.word	0x08029e48
 8019274:	08029e54 	.word	0x08029e54
 8019278:	08029e60 	.word	0x08029e60
 801927c:	0802139c 	.word	0x0802139c
 8019280:	0802132c 	.word	0x0802132c
 8019284:	08029e74 	.word	0x08029e74
 8019288:	08029e84 	.word	0x08029e84
 801928c:	08029e90 	.word	0x08029e90
 8019290:	080221c8 	.word	0x080221c8
		case 775 :
			strcpy(p->name,"DJWUDHDJWJCJDJE");
 8019294:	687b      	ldr	r3, [r7, #4]
 8019296:	337c      	adds	r3, #124	; 0x7c
 8019298:	4aa6      	ldr	r2, [pc, #664]	; (8019534 <problem_fetch+0x18214>)
 801929a:	461c      	mov	r4, r3
 801929c:	4615      	mov	r5, r2
 801929e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80192a0:	6020      	str	r0, [r4, #0]
 80192a2:	6061      	str	r1, [r4, #4]
 80192a4:	60a2      	str	r2, [r4, #8]
 80192a6:	60e3      	str	r3, [r4, #12]
			p->moveSize = 10;
 80192a8:	687b      	ldr	r3, [r7, #4]
 80192aa:	220a      	movs	r2, #10
 80192ac:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"G,E,C,B,C,E,D,B,A,D");
 80192ae:	687b      	ldr	r3, [r7, #4]
 80192b0:	3340      	adds	r3, #64	; 0x40
 80192b2:	4aa1      	ldr	r2, [pc, #644]	; (8019538 <problem_fetch+0x18218>)
 80192b4:	461d      	mov	r5, r3
 80192b6:	4614      	mov	r4, r2
 80192b8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80192ba:	6028      	str	r0, [r5, #0]
 80192bc:	6069      	str	r1, [r5, #4]
 80192be:	60aa      	str	r2, [r5, #8]
 80192c0:	60eb      	str	r3, [r5, #12]
 80192c2:	6820      	ldr	r0, [r4, #0]
 80192c4:	6128      	str	r0, [r5, #16]
			strcpy(p->moveNumbers,"4,6,8,10,13,12,15,15,18,18");
 80192c6:	687b      	ldr	r3, [r7, #4]
 80192c8:	3304      	adds	r3, #4
 80192ca:	4a9c      	ldr	r2, [pc, #624]	; (801953c <problem_fetch+0x1821c>)
 80192cc:	461d      	mov	r5, r3
 80192ce:	4614      	mov	r4, r2
 80192d0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80192d2:	6028      	str	r0, [r5, #0]
 80192d4:	6069      	str	r1, [r5, #4]
 80192d6:	60aa      	str	r2, [r5, #8]
 80192d8:	60eb      	str	r3, [r5, #12]
 80192da:	cc03      	ldmia	r4!, {r0, r1}
 80192dc:	6128      	str	r0, [r5, #16]
 80192de:	6169      	str	r1, [r5, #20]
 80192e0:	8823      	ldrh	r3, [r4, #0]
 80192e2:	78a2      	ldrb	r2, [r4, #2]
 80192e4:	832b      	strh	r3, [r5, #24]
 80192e6:	4613      	mov	r3, r2
 80192e8:	76ab      	strb	r3, [r5, #26]
			strcpy(p->startFinish, "s,s,d,d,d,d,d,d,e,e");
 80192ea:	687b      	ldr	r3, [r7, #4]
 80192ec:	33d8      	adds	r3, #216	; 0xd8
 80192ee:	4a94      	ldr	r2, [pc, #592]	; (8019540 <problem_fetch+0x18220>)
 80192f0:	461d      	mov	r5, r3
 80192f2:	4614      	mov	r4, r2
 80192f4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80192f6:	6028      	str	r0, [r5, #0]
 80192f8:	6069      	str	r1, [r5, #4]
 80192fa:	60aa      	str	r2, [r5, #8]
 80192fc:	60eb      	str	r3, [r5, #12]
 80192fe:	6820      	ldr	r0, [r4, #0]
 8019300:	6128      	str	r0, [r5, #16]
			strcpy(p->grade, "6B+");
 8019302:	687b      	ldr	r3, [r7, #4]
 8019304:	33cc      	adds	r3, #204	; 0xcc
 8019306:	4a8f      	ldr	r2, [pc, #572]	; (8019544 <problem_fetch+0x18224>)
 8019308:	6810      	ldr	r0, [r2, #0]
 801930a:	6018      	str	r0, [r3, #0]
			break;
 801930c:	f001 bd4e 	b.w	801adac <problem_fetch+0x19a8c>
		case 776 :
			strcpy(p->name,"ULTRAVIOLENCE");
 8019310:	687b      	ldr	r3, [r7, #4]
 8019312:	337c      	adds	r3, #124	; 0x7c
 8019314:	4a8c      	ldr	r2, [pc, #560]	; (8019548 <problem_fetch+0x18228>)
 8019316:	461c      	mov	r4, r3
 8019318:	4613      	mov	r3, r2
 801931a:	cb07      	ldmia	r3!, {r0, r1, r2}
 801931c:	6020      	str	r0, [r4, #0]
 801931e:	6061      	str	r1, [r4, #4]
 8019320:	60a2      	str	r2, [r4, #8]
 8019322:	881b      	ldrh	r3, [r3, #0]
 8019324:	81a3      	strh	r3, [r4, #12]
			p->moveSize = 7;
 8019326:	687b      	ldr	r3, [r7, #4]
 8019328:	2207      	movs	r2, #7
 801932a:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"G,E,C,F,E,J,D");
 801932c:	687b      	ldr	r3, [r7, #4]
 801932e:	3340      	adds	r3, #64	; 0x40
 8019330:	4a86      	ldr	r2, [pc, #536]	; (801954c <problem_fetch+0x1822c>)
 8019332:	461c      	mov	r4, r3
 8019334:	4613      	mov	r3, r2
 8019336:	cb07      	ldmia	r3!, {r0, r1, r2}
 8019338:	6020      	str	r0, [r4, #0]
 801933a:	6061      	str	r1, [r4, #4]
 801933c:	60a2      	str	r2, [r4, #8]
 801933e:	881b      	ldrh	r3, [r3, #0]
 8019340:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"6,6,8,11,14,16,18");
 8019342:	687b      	ldr	r3, [r7, #4]
 8019344:	3304      	adds	r3, #4
 8019346:	4a82      	ldr	r2, [pc, #520]	; (8019550 <problem_fetch+0x18230>)
 8019348:	461d      	mov	r5, r3
 801934a:	4614      	mov	r4, r2
 801934c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801934e:	6028      	str	r0, [r5, #0]
 8019350:	6069      	str	r1, [r5, #4]
 8019352:	60aa      	str	r2, [r5, #8]
 8019354:	60eb      	str	r3, [r5, #12]
 8019356:	8823      	ldrh	r3, [r4, #0]
 8019358:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish, "s,s,d,d,d,d,e");
 801935a:	687b      	ldr	r3, [r7, #4]
 801935c:	33d8      	adds	r3, #216	; 0xd8
 801935e:	4a7d      	ldr	r2, [pc, #500]	; (8019554 <problem_fetch+0x18234>)
 8019360:	461c      	mov	r4, r3
 8019362:	4613      	mov	r3, r2
 8019364:	cb07      	ldmia	r3!, {r0, r1, r2}
 8019366:	6020      	str	r0, [r4, #0]
 8019368:	6061      	str	r1, [r4, #4]
 801936a:	60a2      	str	r2, [r4, #8]
 801936c:	881b      	ldrh	r3, [r3, #0]
 801936e:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade, "6C+");
 8019370:	687b      	ldr	r3, [r7, #4]
 8019372:	33cc      	adds	r3, #204	; 0xcc
 8019374:	4a78      	ldr	r2, [pc, #480]	; (8019558 <problem_fetch+0x18238>)
 8019376:	6810      	ldr	r0, [r2, #0]
 8019378:	6018      	str	r0, [r3, #0]
			break;
 801937a:	f001 bd17 	b.w	801adac <problem_fetch+0x19a8c>
		case 777 :
			strcpy(p->name,"UP MY SLEEVES");
 801937e:	687b      	ldr	r3, [r7, #4]
 8019380:	337c      	adds	r3, #124	; 0x7c
 8019382:	4a76      	ldr	r2, [pc, #472]	; (801955c <problem_fetch+0x1823c>)
 8019384:	461c      	mov	r4, r3
 8019386:	4613      	mov	r3, r2
 8019388:	cb07      	ldmia	r3!, {r0, r1, r2}
 801938a:	6020      	str	r0, [r4, #0]
 801938c:	6061      	str	r1, [r4, #4]
 801938e:	60a2      	str	r2, [r4, #8]
 8019390:	881b      	ldrh	r3, [r3, #0]
 8019392:	81a3      	strh	r3, [r4, #12]
			p->moveSize = 5;
 8019394:	687b      	ldr	r3, [r7, #4]
 8019396:	2205      	movs	r2, #5
 8019398:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"J,G,J,E,A");
 801939a:	687b      	ldr	r3, [r7, #4]
 801939c:	3340      	adds	r3, #64	; 0x40
 801939e:	4970      	ldr	r1, [pc, #448]	; (8019560 <problem_fetch+0x18240>)
 80193a0:	461a      	mov	r2, r3
 80193a2:	460b      	mov	r3, r1
 80193a4:	cb03      	ldmia	r3!, {r0, r1}
 80193a6:	6010      	str	r0, [r2, #0]
 80193a8:	6051      	str	r1, [r2, #4]
 80193aa:	881b      	ldrh	r3, [r3, #0]
 80193ac:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"5,9,12,14,18");
 80193ae:	687b      	ldr	r3, [r7, #4]
 80193b0:	3304      	adds	r3, #4
 80193b2:	4a6c      	ldr	r2, [pc, #432]	; (8019564 <problem_fetch+0x18244>)
 80193b4:	461c      	mov	r4, r3
 80193b6:	4613      	mov	r3, r2
 80193b8:	cb07      	ldmia	r3!, {r0, r1, r2}
 80193ba:	6020      	str	r0, [r4, #0]
 80193bc:	6061      	str	r1, [r4, #4]
 80193be:	60a2      	str	r2, [r4, #8]
 80193c0:	781b      	ldrb	r3, [r3, #0]
 80193c2:	7323      	strb	r3, [r4, #12]
			strcpy(p->startFinish, "s,d,d,d,e");
 80193c4:	687b      	ldr	r3, [r7, #4]
 80193c6:	33d8      	adds	r3, #216	; 0xd8
 80193c8:	4967      	ldr	r1, [pc, #412]	; (8019568 <problem_fetch+0x18248>)
 80193ca:	461a      	mov	r2, r3
 80193cc:	460b      	mov	r3, r1
 80193ce:	cb03      	ldmia	r3!, {r0, r1}
 80193d0:	6010      	str	r0, [r2, #0]
 80193d2:	6051      	str	r1, [r2, #4]
 80193d4:	881b      	ldrh	r3, [r3, #0]
 80193d6:	8113      	strh	r3, [r2, #8]
			strcpy(p->grade, "7C+");
 80193d8:	687b      	ldr	r3, [r7, #4]
 80193da:	33cc      	adds	r3, #204	; 0xcc
 80193dc:	4a63      	ldr	r2, [pc, #396]	; (801956c <problem_fetch+0x1824c>)
 80193de:	6810      	ldr	r0, [r2, #0]
 80193e0:	6018      	str	r0, [r3, #0]
			break;
 80193e2:	f001 bce3 	b.w	801adac <problem_fetch+0x19a8c>
		case 778 :
			strcpy(p->name,"BO4");
 80193e6:	687b      	ldr	r3, [r7, #4]
 80193e8:	337c      	adds	r3, #124	; 0x7c
 80193ea:	4a61      	ldr	r2, [pc, #388]	; (8019570 <problem_fetch+0x18250>)
 80193ec:	6810      	ldr	r0, [r2, #0]
 80193ee:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 80193f0:	687b      	ldr	r3, [r7, #4]
 80193f2:	2207      	movs	r2, #7
 80193f4:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"C,E,F,H,G,I,H");
 80193f6:	687b      	ldr	r3, [r7, #4]
 80193f8:	3340      	adds	r3, #64	; 0x40
 80193fa:	4a5e      	ldr	r2, [pc, #376]	; (8019574 <problem_fetch+0x18254>)
 80193fc:	461c      	mov	r4, r3
 80193fe:	4613      	mov	r3, r2
 8019400:	cb07      	ldmia	r3!, {r0, r1, r2}
 8019402:	6020      	str	r0, [r4, #0]
 8019404:	6061      	str	r1, [r4, #4]
 8019406:	60a2      	str	r2, [r4, #8]
 8019408:	881b      	ldrh	r3, [r3, #0]
 801940a:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,9,11,5,15,18,12");
 801940c:	687b      	ldr	r3, [r7, #4]
 801940e:	3304      	adds	r3, #4
 8019410:	4a59      	ldr	r2, [pc, #356]	; (8019578 <problem_fetch+0x18258>)
 8019412:	461d      	mov	r5, r3
 8019414:	4614      	mov	r4, r2
 8019416:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8019418:	6028      	str	r0, [r5, #0]
 801941a:	6069      	str	r1, [r5, #4]
 801941c:	60aa      	str	r2, [r5, #8]
 801941e:	60eb      	str	r3, [r5, #12]
 8019420:	8823      	ldrh	r3, [r4, #0]
 8019422:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish, "s,d,d,s,d,e,d");
 8019424:	687b      	ldr	r3, [r7, #4]
 8019426:	33d8      	adds	r3, #216	; 0xd8
 8019428:	4a54      	ldr	r2, [pc, #336]	; (801957c <problem_fetch+0x1825c>)
 801942a:	461c      	mov	r4, r3
 801942c:	4613      	mov	r3, r2
 801942e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8019430:	6020      	str	r0, [r4, #0]
 8019432:	6061      	str	r1, [r4, #4]
 8019434:	60a2      	str	r2, [r4, #8]
 8019436:	881b      	ldrh	r3, [r3, #0]
 8019438:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade, "7A");
 801943a:	687b      	ldr	r3, [r7, #4]
 801943c:	33cc      	adds	r3, #204	; 0xcc
 801943e:	4a50      	ldr	r2, [pc, #320]	; (8019580 <problem_fetch+0x18260>)
 8019440:	8811      	ldrh	r1, [r2, #0]
 8019442:	7892      	ldrb	r2, [r2, #2]
 8019444:	8019      	strh	r1, [r3, #0]
 8019446:	709a      	strb	r2, [r3, #2]
			break;
 8019448:	f001 bcb0 	b.w	801adac <problem_fetch+0x19a8c>
		case 779 :
			strcpy(p->name,"BLACKROCK");
 801944c:	687b      	ldr	r3, [r7, #4]
 801944e:	337c      	adds	r3, #124	; 0x7c
 8019450:	494c      	ldr	r1, [pc, #304]	; (8019584 <problem_fetch+0x18264>)
 8019452:	461a      	mov	r2, r3
 8019454:	460b      	mov	r3, r1
 8019456:	cb03      	ldmia	r3!, {r0, r1}
 8019458:	6010      	str	r0, [r2, #0]
 801945a:	6051      	str	r1, [r2, #4]
 801945c:	881b      	ldrh	r3, [r3, #0]
 801945e:	8113      	strh	r3, [r2, #8]
			p->moveSize = 7;
 8019460:	687b      	ldr	r3, [r7, #4]
 8019462:	2207      	movs	r2, #7
 8019464:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"G,G,I,D,E,B,D");
 8019466:	687b      	ldr	r3, [r7, #4]
 8019468:	3340      	adds	r3, #64	; 0x40
 801946a:	4a47      	ldr	r2, [pc, #284]	; (8019588 <problem_fetch+0x18268>)
 801946c:	461c      	mov	r4, r3
 801946e:	4613      	mov	r3, r2
 8019470:	cb07      	ldmia	r3!, {r0, r1, r2}
 8019472:	6020      	str	r0, [r4, #0]
 8019474:	6061      	str	r1, [r4, #4]
 8019476:	60a2      	str	r2, [r4, #8]
 8019478:	881b      	ldrh	r3, [r3, #0]
 801947a:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,6,10,11,12,15,18");
 801947c:	687b      	ldr	r3, [r7, #4]
 801947e:	3304      	adds	r3, #4
 8019480:	4a42      	ldr	r2, [pc, #264]	; (801958c <problem_fetch+0x1826c>)
 8019482:	461d      	mov	r5, r3
 8019484:	4614      	mov	r4, r2
 8019486:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8019488:	6028      	str	r0, [r5, #0]
 801948a:	6069      	str	r1, [r5, #4]
 801948c:	60aa      	str	r2, [r5, #8]
 801948e:	60eb      	str	r3, [r5, #12]
 8019490:	8823      	ldrh	r3, [r4, #0]
 8019492:	78a2      	ldrb	r2, [r4, #2]
 8019494:	822b      	strh	r3, [r5, #16]
 8019496:	4613      	mov	r3, r2
 8019498:	74ab      	strb	r3, [r5, #18]
			strcpy(p->startFinish, "s,d,d,d,d,d,e");
 801949a:	687b      	ldr	r3, [r7, #4]
 801949c:	33d8      	adds	r3, #216	; 0xd8
 801949e:	4a3c      	ldr	r2, [pc, #240]	; (8019590 <problem_fetch+0x18270>)
 80194a0:	461c      	mov	r4, r3
 80194a2:	4613      	mov	r3, r2
 80194a4:	cb07      	ldmia	r3!, {r0, r1, r2}
 80194a6:	6020      	str	r0, [r4, #0]
 80194a8:	6061      	str	r1, [r4, #4]
 80194aa:	60a2      	str	r2, [r4, #8]
 80194ac:	881b      	ldrh	r3, [r3, #0]
 80194ae:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade, "6C+");
 80194b0:	687b      	ldr	r3, [r7, #4]
 80194b2:	33cc      	adds	r3, #204	; 0xcc
 80194b4:	4a28      	ldr	r2, [pc, #160]	; (8019558 <problem_fetch+0x18238>)
 80194b6:	6810      	ldr	r0, [r2, #0]
 80194b8:	6018      	str	r0, [r3, #0]
			break;
 80194ba:	f001 bc77 	b.w	801adac <problem_fetch+0x19a8c>
		case 78 :
			strcpy(p->name,"LU'S FINEST");
 80194be:	687b      	ldr	r3, [r7, #4]
 80194c0:	337c      	adds	r3, #124	; 0x7c
 80194c2:	4a34      	ldr	r2, [pc, #208]	; (8019594 <problem_fetch+0x18274>)
 80194c4:	461c      	mov	r4, r3
 80194c6:	4613      	mov	r3, r2
 80194c8:	cb07      	ldmia	r3!, {r0, r1, r2}
 80194ca:	6020      	str	r0, [r4, #0]
 80194cc:	6061      	str	r1, [r4, #4]
 80194ce:	60a2      	str	r2, [r4, #8]
			p->moveSize = 9;
 80194d0:	687b      	ldr	r3, [r7, #4]
 80194d2:	2209      	movs	r2, #9
 80194d4:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"B,D,B,G,E,F,J,H,I");
 80194d6:	687b      	ldr	r3, [r7, #4]
 80194d8:	3340      	adds	r3, #64	; 0x40
 80194da:	4a2f      	ldr	r2, [pc, #188]	; (8019598 <problem_fetch+0x18278>)
 80194dc:	461d      	mov	r5, r3
 80194de:	4614      	mov	r4, r2
 80194e0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80194e2:	6028      	str	r0, [r5, #0]
 80194e4:	6069      	str	r1, [r5, #4]
 80194e6:	60aa      	str	r2, [r5, #8]
 80194e8:	60eb      	str	r3, [r5, #12]
 80194ea:	8823      	ldrh	r3, [r4, #0]
 80194ec:	822b      	strh	r3, [r5, #16]
			strcpy(p->moveNumbers,"6,7,10,4,12,13,13,16,18");
 80194ee:	687b      	ldr	r3, [r7, #4]
 80194f0:	3304      	adds	r3, #4
 80194f2:	4a2a      	ldr	r2, [pc, #168]	; (801959c <problem_fetch+0x1827c>)
 80194f4:	461d      	mov	r5, r3
 80194f6:	4614      	mov	r4, r2
 80194f8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80194fa:	6028      	str	r0, [r5, #0]
 80194fc:	6069      	str	r1, [r5, #4]
 80194fe:	60aa      	str	r2, [r5, #8]
 8019500:	60eb      	str	r3, [r5, #12]
 8019502:	cc03      	ldmia	r4!, {r0, r1}
 8019504:	6128      	str	r0, [r5, #16]
 8019506:	6169      	str	r1, [r5, #20]
			strcpy(p->startFinish, "s,d,d,d,d,d,d,d,e");
 8019508:	687b      	ldr	r3, [r7, #4]
 801950a:	33d8      	adds	r3, #216	; 0xd8
 801950c:	4a24      	ldr	r2, [pc, #144]	; (80195a0 <problem_fetch+0x18280>)
 801950e:	461d      	mov	r5, r3
 8019510:	4614      	mov	r4, r2
 8019512:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8019514:	6028      	str	r0, [r5, #0]
 8019516:	6069      	str	r1, [r5, #4]
 8019518:	60aa      	str	r2, [r5, #8]
 801951a:	60eb      	str	r3, [r5, #12]
 801951c:	8823      	ldrh	r3, [r4, #0]
 801951e:	822b      	strh	r3, [r5, #16]
			strcpy(p->grade, "7A");
 8019520:	687b      	ldr	r3, [r7, #4]
 8019522:	33cc      	adds	r3, #204	; 0xcc
 8019524:	4a16      	ldr	r2, [pc, #88]	; (8019580 <problem_fetch+0x18260>)
 8019526:	8811      	ldrh	r1, [r2, #0]
 8019528:	7892      	ldrb	r2, [r2, #2]
 801952a:	8019      	strh	r1, [r3, #0]
 801952c:	709a      	strb	r2, [r3, #2]
			break;
 801952e:	f001 bc3d 	b.w	801adac <problem_fetch+0x19a8c>
 8019532:	bf00      	nop
 8019534:	08029ea0 	.word	0x08029ea0
 8019538:	08029eb0 	.word	0x08029eb0
 801953c:	08029ec4 	.word	0x08029ec4
 8019540:	08029ee0 	.word	0x08029ee0
 8019544:	080212b0 	.word	0x080212b0
 8019548:	08029ef4 	.word	0x08029ef4
 801954c:	08029f04 	.word	0x08029f04
 8019550:	08029f14 	.word	0x08029f14
 8019554:	080212a0 	.word	0x080212a0
 8019558:	080213a8 	.word	0x080213a8
 801955c:	08029f28 	.word	0x08029f28
 8019560:	08029f38 	.word	0x08029f38
 8019564:	08022d64 	.word	0x08022d64
 8019568:	08021320 	.word	0x08021320
 801956c:	08023170 	.word	0x08023170
 8019570:	08029f44 	.word	0x08029f44
 8019574:	08029f48 	.word	0x08029f48
 8019578:	08029f58 	.word	0x08029f58
 801957c:	08029f6c 	.word	0x08029f6c
 8019580:	080212f4 	.word	0x080212f4
 8019584:	08029f7c 	.word	0x08029f7c
 8019588:	08029f88 	.word	0x08029f88
 801958c:	08029f98 	.word	0x08029f98
 8019590:	08021494 	.word	0x08021494
 8019594:	08029fac 	.word	0x08029fac
 8019598:	08029fb8 	.word	0x08029fb8
 801959c:	08029fcc 	.word	0x08029fcc
 80195a0:	08023990 	.word	0x08023990
		case 780 :
			strcpy(p->name,"STOUT LITE");
 80195a4:	687b      	ldr	r3, [r7, #4]
 80195a6:	337c      	adds	r3, #124	; 0x7c
 80195a8:	49bc      	ldr	r1, [pc, #752]	; (801989c <problem_fetch+0x1857c>)
 80195aa:	461a      	mov	r2, r3
 80195ac:	460b      	mov	r3, r1
 80195ae:	cb03      	ldmia	r3!, {r0, r1}
 80195b0:	6010      	str	r0, [r2, #0]
 80195b2:	6051      	str	r1, [r2, #4]
 80195b4:	8819      	ldrh	r1, [r3, #0]
 80195b6:	789b      	ldrb	r3, [r3, #2]
 80195b8:	8111      	strh	r1, [r2, #8]
 80195ba:	7293      	strb	r3, [r2, #10]
			p->moveSize = 7;
 80195bc:	687b      	ldr	r3, [r7, #4]
 80195be:	2207      	movs	r2, #7
 80195c0:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"G,D,G,D,G,G,I");
 80195c2:	687b      	ldr	r3, [r7, #4]
 80195c4:	3340      	adds	r3, #64	; 0x40
 80195c6:	4ab6      	ldr	r2, [pc, #728]	; (80198a0 <problem_fetch+0x18580>)
 80195c8:	461c      	mov	r4, r3
 80195ca:	4613      	mov	r3, r2
 80195cc:	cb07      	ldmia	r3!, {r0, r1, r2}
 80195ce:	6020      	str	r0, [r4, #0]
 80195d0:	6061      	str	r1, [r4, #4]
 80195d2:	60a2      	str	r2, [r4, #8]
 80195d4:	881b      	ldrh	r3, [r3, #0]
 80195d6:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,7,9,11,14,15,18");
 80195d8:	687b      	ldr	r3, [r7, #4]
 80195da:	3304      	adds	r3, #4
 80195dc:	4ab1      	ldr	r2, [pc, #708]	; (80198a4 <problem_fetch+0x18584>)
 80195de:	461d      	mov	r5, r3
 80195e0:	4614      	mov	r4, r2
 80195e2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80195e4:	6028      	str	r0, [r5, #0]
 80195e6:	6069      	str	r1, [r5, #4]
 80195e8:	60aa      	str	r2, [r5, #8]
 80195ea:	60eb      	str	r3, [r5, #12]
 80195ec:	8823      	ldrh	r3, [r4, #0]
 80195ee:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish, "s,d,d,d,d,d,e");
 80195f0:	687b      	ldr	r3, [r7, #4]
 80195f2:	33d8      	adds	r3, #216	; 0xd8
 80195f4:	4aac      	ldr	r2, [pc, #688]	; (80198a8 <problem_fetch+0x18588>)
 80195f6:	461c      	mov	r4, r3
 80195f8:	4613      	mov	r3, r2
 80195fa:	cb07      	ldmia	r3!, {r0, r1, r2}
 80195fc:	6020      	str	r0, [r4, #0]
 80195fe:	6061      	str	r1, [r4, #4]
 8019600:	60a2      	str	r2, [r4, #8]
 8019602:	881b      	ldrh	r3, [r3, #0]
 8019604:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade, "6C+");
 8019606:	687b      	ldr	r3, [r7, #4]
 8019608:	33cc      	adds	r3, #204	; 0xcc
 801960a:	4aa8      	ldr	r2, [pc, #672]	; (80198ac <problem_fetch+0x1858c>)
 801960c:	6810      	ldr	r0, [r2, #0]
 801960e:	6018      	str	r0, [r3, #0]
			break;
 8019610:	f001 bbcc 	b.w	801adac <problem_fetch+0x19a8c>
		case 781 :
			strcpy(p->name,"PSYCHO MANTIS");
 8019614:	687b      	ldr	r3, [r7, #4]
 8019616:	337c      	adds	r3, #124	; 0x7c
 8019618:	4aa5      	ldr	r2, [pc, #660]	; (80198b0 <problem_fetch+0x18590>)
 801961a:	461c      	mov	r4, r3
 801961c:	4613      	mov	r3, r2
 801961e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8019620:	6020      	str	r0, [r4, #0]
 8019622:	6061      	str	r1, [r4, #4]
 8019624:	60a2      	str	r2, [r4, #8]
 8019626:	881b      	ldrh	r3, [r3, #0]
 8019628:	81a3      	strh	r3, [r4, #12]
			p->moveSize = 6;
 801962a:	687b      	ldr	r3, [r7, #4]
 801962c:	2206      	movs	r2, #6
 801962e:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"H,D,G,B,E,D");
 8019630:	687b      	ldr	r3, [r7, #4]
 8019632:	3340      	adds	r3, #64	; 0x40
 8019634:	4a9f      	ldr	r2, [pc, #636]	; (80198b4 <problem_fetch+0x18594>)
 8019636:	461c      	mov	r4, r3
 8019638:	4613      	mov	r3, r2
 801963a:	cb07      	ldmia	r3!, {r0, r1, r2}
 801963c:	6020      	str	r0, [r4, #0]
 801963e:	6061      	str	r1, [r4, #4]
 8019640:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,7,10,10,14,18");
 8019642:	687b      	ldr	r3, [r7, #4]
 8019644:	3304      	adds	r3, #4
 8019646:	4a9c      	ldr	r2, [pc, #624]	; (80198b8 <problem_fetch+0x18598>)
 8019648:	461c      	mov	r4, r3
 801964a:	4615      	mov	r5, r2
 801964c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801964e:	6020      	str	r0, [r4, #0]
 8019650:	6061      	str	r1, [r4, #4]
 8019652:	60a2      	str	r2, [r4, #8]
 8019654:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish, "s,d,d,d,d,e");
 8019656:	687b      	ldr	r3, [r7, #4]
 8019658:	33d8      	adds	r3, #216	; 0xd8
 801965a:	4a98      	ldr	r2, [pc, #608]	; (80198bc <problem_fetch+0x1859c>)
 801965c:	461c      	mov	r4, r3
 801965e:	4613      	mov	r3, r2
 8019660:	cb07      	ldmia	r3!, {r0, r1, r2}
 8019662:	6020      	str	r0, [r4, #0]
 8019664:	6061      	str	r1, [r4, #4]
 8019666:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade, "6C+");
 8019668:	687b      	ldr	r3, [r7, #4]
 801966a:	33cc      	adds	r3, #204	; 0xcc
 801966c:	4a8f      	ldr	r2, [pc, #572]	; (80198ac <problem_fetch+0x1858c>)
 801966e:	6810      	ldr	r0, [r2, #0]
 8019670:	6018      	str	r0, [r3, #0]
			break;
 8019672:	f001 bb9b 	b.w	801adac <problem_fetch+0x19a8c>
		case 782 :
			strcpy(p->name,"VISUALIZZA VERS2");
 8019676:	687b      	ldr	r3, [r7, #4]
 8019678:	337c      	adds	r3, #124	; 0x7c
 801967a:	4a91      	ldr	r2, [pc, #580]	; (80198c0 <problem_fetch+0x185a0>)
 801967c:	461d      	mov	r5, r3
 801967e:	4614      	mov	r4, r2
 8019680:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8019682:	6028      	str	r0, [r5, #0]
 8019684:	6069      	str	r1, [r5, #4]
 8019686:	60aa      	str	r2, [r5, #8]
 8019688:	60eb      	str	r3, [r5, #12]
 801968a:	7823      	ldrb	r3, [r4, #0]
 801968c:	742b      	strb	r3, [r5, #16]
			p->moveSize = 6;
 801968e:	687b      	ldr	r3, [r7, #4]
 8019690:	2206      	movs	r2, #6
 8019692:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"J,H,E,H,E,D");
 8019694:	687b      	ldr	r3, [r7, #4]
 8019696:	3340      	adds	r3, #64	; 0x40
 8019698:	4a8a      	ldr	r2, [pc, #552]	; (80198c4 <problem_fetch+0x185a4>)
 801969a:	461c      	mov	r4, r3
 801969c:	4613      	mov	r3, r2
 801969e:	cb07      	ldmia	r3!, {r0, r1, r2}
 80196a0:	6020      	str	r0, [r4, #0]
 80196a2:	6061      	str	r1, [r4, #4]
 80196a4:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,8,9,12,14,18");
 80196a6:	687b      	ldr	r3, [r7, #4]
 80196a8:	3304      	adds	r3, #4
 80196aa:	4a87      	ldr	r2, [pc, #540]	; (80198c8 <problem_fetch+0x185a8>)
 80196ac:	461c      	mov	r4, r3
 80196ae:	4613      	mov	r3, r2
 80196b0:	cb07      	ldmia	r3!, {r0, r1, r2}
 80196b2:	6020      	str	r0, [r4, #0]
 80196b4:	6061      	str	r1, [r4, #4]
 80196b6:	60a2      	str	r2, [r4, #8]
 80196b8:	881a      	ldrh	r2, [r3, #0]
 80196ba:	789b      	ldrb	r3, [r3, #2]
 80196bc:	81a2      	strh	r2, [r4, #12]
 80196be:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish, "s,d,d,d,d,e");
 80196c0:	687b      	ldr	r3, [r7, #4]
 80196c2:	33d8      	adds	r3, #216	; 0xd8
 80196c4:	4a7d      	ldr	r2, [pc, #500]	; (80198bc <problem_fetch+0x1859c>)
 80196c6:	461c      	mov	r4, r3
 80196c8:	4613      	mov	r3, r2
 80196ca:	cb07      	ldmia	r3!, {r0, r1, r2}
 80196cc:	6020      	str	r0, [r4, #0]
 80196ce:	6061      	str	r1, [r4, #4]
 80196d0:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade, "7B+");
 80196d2:	687b      	ldr	r3, [r7, #4]
 80196d4:	33cc      	adds	r3, #204	; 0xcc
 80196d6:	4a7d      	ldr	r2, [pc, #500]	; (80198cc <problem_fetch+0x185ac>)
 80196d8:	6810      	ldr	r0, [r2, #0]
 80196da:	6018      	str	r0, [r3, #0]
			break;
 80196dc:	f001 bb66 	b.w	801adac <problem_fetch+0x19a8c>
		case 783 :
			strcpy(p->name,"SALAD APOCALYPSE");
 80196e0:	687b      	ldr	r3, [r7, #4]
 80196e2:	337c      	adds	r3, #124	; 0x7c
 80196e4:	4a7a      	ldr	r2, [pc, #488]	; (80198d0 <problem_fetch+0x185b0>)
 80196e6:	461d      	mov	r5, r3
 80196e8:	4614      	mov	r4, r2
 80196ea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80196ec:	6028      	str	r0, [r5, #0]
 80196ee:	6069      	str	r1, [r5, #4]
 80196f0:	60aa      	str	r2, [r5, #8]
 80196f2:	60eb      	str	r3, [r5, #12]
 80196f4:	7823      	ldrb	r3, [r4, #0]
 80196f6:	742b      	strb	r3, [r5, #16]
			p->moveSize = 6;
 80196f8:	687b      	ldr	r3, [r7, #4]
 80196fa:	2206      	movs	r2, #6
 80196fc:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"C,B,E,H,D,A");
 80196fe:	687b      	ldr	r3, [r7, #4]
 8019700:	3340      	adds	r3, #64	; 0x40
 8019702:	4a74      	ldr	r2, [pc, #464]	; (80198d4 <problem_fetch+0x185b4>)
 8019704:	461c      	mov	r4, r3
 8019706:	4613      	mov	r3, r2
 8019708:	cb07      	ldmia	r3!, {r0, r1, r2}
 801970a:	6020      	str	r0, [r4, #0]
 801970c:	6061      	str	r1, [r4, #4]
 801970e:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,6,8,12,15,18");
 8019710:	687b      	ldr	r3, [r7, #4]
 8019712:	3304      	adds	r3, #4
 8019714:	4a70      	ldr	r2, [pc, #448]	; (80198d8 <problem_fetch+0x185b8>)
 8019716:	461c      	mov	r4, r3
 8019718:	4613      	mov	r3, r2
 801971a:	cb07      	ldmia	r3!, {r0, r1, r2}
 801971c:	6020      	str	r0, [r4, #0]
 801971e:	6061      	str	r1, [r4, #4]
 8019720:	60a2      	str	r2, [r4, #8]
 8019722:	881a      	ldrh	r2, [r3, #0]
 8019724:	789b      	ldrb	r3, [r3, #2]
 8019726:	81a2      	strh	r2, [r4, #12]
 8019728:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish, "s,s,d,d,d,e");
 801972a:	687b      	ldr	r3, [r7, #4]
 801972c:	33d8      	adds	r3, #216	; 0xd8
 801972e:	4a6b      	ldr	r2, [pc, #428]	; (80198dc <problem_fetch+0x185bc>)
 8019730:	461c      	mov	r4, r3
 8019732:	4613      	mov	r3, r2
 8019734:	cb07      	ldmia	r3!, {r0, r1, r2}
 8019736:	6020      	str	r0, [r4, #0]
 8019738:	6061      	str	r1, [r4, #4]
 801973a:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade, "7B+");
 801973c:	687b      	ldr	r3, [r7, #4]
 801973e:	33cc      	adds	r3, #204	; 0xcc
 8019740:	4a62      	ldr	r2, [pc, #392]	; (80198cc <problem_fetch+0x185ac>)
 8019742:	6810      	ldr	r0, [r2, #0]
 8019744:	6018      	str	r0, [r3, #0]
			break;
 8019746:	f001 bb31 	b.w	801adac <problem_fetch+0x19a8c>
		case 784 :
			strcpy(p->name,"FIRST COME, FIRST SERVED");
 801974a:	687b      	ldr	r3, [r7, #4]
 801974c:	337c      	adds	r3, #124	; 0x7c
 801974e:	4a64      	ldr	r2, [pc, #400]	; (80198e0 <problem_fetch+0x185c0>)
 8019750:	461d      	mov	r5, r3
 8019752:	4614      	mov	r4, r2
 8019754:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8019756:	6028      	str	r0, [r5, #0]
 8019758:	6069      	str	r1, [r5, #4]
 801975a:	60aa      	str	r2, [r5, #8]
 801975c:	60eb      	str	r3, [r5, #12]
 801975e:	cc03      	ldmia	r4!, {r0, r1}
 8019760:	6128      	str	r0, [r5, #16]
 8019762:	6169      	str	r1, [r5, #20]
 8019764:	7823      	ldrb	r3, [r4, #0]
 8019766:	762b      	strb	r3, [r5, #24]
			p->moveSize = 5;
 8019768:	687b      	ldr	r3, [r7, #4]
 801976a:	2205      	movs	r2, #5
 801976c:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"J,G,F,A,D");
 801976e:	687b      	ldr	r3, [r7, #4]
 8019770:	3340      	adds	r3, #64	; 0x40
 8019772:	495c      	ldr	r1, [pc, #368]	; (80198e4 <problem_fetch+0x185c4>)
 8019774:	461a      	mov	r2, r3
 8019776:	460b      	mov	r3, r1
 8019778:	cb03      	ldmia	r3!, {r0, r1}
 801977a:	6010      	str	r0, [r2, #0]
 801977c:	6051      	str	r1, [r2, #4]
 801977e:	881b      	ldrh	r3, [r3, #0]
 8019780:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"5,10,11,14,18");
 8019782:	687b      	ldr	r3, [r7, #4]
 8019784:	3304      	adds	r3, #4
 8019786:	4a58      	ldr	r2, [pc, #352]	; (80198e8 <problem_fetch+0x185c8>)
 8019788:	461c      	mov	r4, r3
 801978a:	4613      	mov	r3, r2
 801978c:	cb07      	ldmia	r3!, {r0, r1, r2}
 801978e:	6020      	str	r0, [r4, #0]
 8019790:	6061      	str	r1, [r4, #4]
 8019792:	60a2      	str	r2, [r4, #8]
 8019794:	881b      	ldrh	r3, [r3, #0]
 8019796:	81a3      	strh	r3, [r4, #12]
			strcpy(p->startFinish, "s,d,d,d,e");
 8019798:	687b      	ldr	r3, [r7, #4]
 801979a:	33d8      	adds	r3, #216	; 0xd8
 801979c:	4953      	ldr	r1, [pc, #332]	; (80198ec <problem_fetch+0x185cc>)
 801979e:	461a      	mov	r2, r3
 80197a0:	460b      	mov	r3, r1
 80197a2:	cb03      	ldmia	r3!, {r0, r1}
 80197a4:	6010      	str	r0, [r2, #0]
 80197a6:	6051      	str	r1, [r2, #4]
 80197a8:	881b      	ldrh	r3, [r3, #0]
 80197aa:	8113      	strh	r3, [r2, #8]
			strcpy(p->grade, "7B+");
 80197ac:	687b      	ldr	r3, [r7, #4]
 80197ae:	33cc      	adds	r3, #204	; 0xcc
 80197b0:	4a46      	ldr	r2, [pc, #280]	; (80198cc <problem_fetch+0x185ac>)
 80197b2:	6810      	ldr	r0, [r2, #0]
 80197b4:	6018      	str	r0, [r3, #0]
			break;
 80197b6:	f001 baf9 	b.w	801adac <problem_fetch+0x19a8c>
		case 785 :
			strcpy(p->name,"BIG LE MOVIES");
 80197ba:	687b      	ldr	r3, [r7, #4]
 80197bc:	337c      	adds	r3, #124	; 0x7c
 80197be:	4a4c      	ldr	r2, [pc, #304]	; (80198f0 <problem_fetch+0x185d0>)
 80197c0:	461c      	mov	r4, r3
 80197c2:	4613      	mov	r3, r2
 80197c4:	cb07      	ldmia	r3!, {r0, r1, r2}
 80197c6:	6020      	str	r0, [r4, #0]
 80197c8:	6061      	str	r1, [r4, #4]
 80197ca:	60a2      	str	r2, [r4, #8]
 80197cc:	881b      	ldrh	r3, [r3, #0]
 80197ce:	81a3      	strh	r3, [r4, #12]
			p->moveSize = 7;
 80197d0:	687b      	ldr	r3, [r7, #4]
 80197d2:	2207      	movs	r2, #7
 80197d4:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"G,G,J,H,G,G,I");
 80197d6:	687b      	ldr	r3, [r7, #4]
 80197d8:	3340      	adds	r3, #64	; 0x40
 80197da:	4a46      	ldr	r2, [pc, #280]	; (80198f4 <problem_fetch+0x185d4>)
 80197dc:	461c      	mov	r4, r3
 80197de:	4613      	mov	r3, r2
 80197e0:	cb07      	ldmia	r3!, {r0, r1, r2}
 80197e2:	6020      	str	r0, [r4, #0]
 80197e4:	6061      	str	r1, [r4, #4]
 80197e6:	60a2      	str	r2, [r4, #8]
 80197e8:	881b      	ldrh	r3, [r3, #0]
 80197ea:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,6,7,10,14,17,18");
 80197ec:	687b      	ldr	r3, [r7, #4]
 80197ee:	3304      	adds	r3, #4
 80197f0:	4a41      	ldr	r2, [pc, #260]	; (80198f8 <problem_fetch+0x185d8>)
 80197f2:	461d      	mov	r5, r3
 80197f4:	4614      	mov	r4, r2
 80197f6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80197f8:	6028      	str	r0, [r5, #0]
 80197fa:	6069      	str	r1, [r5, #4]
 80197fc:	60aa      	str	r2, [r5, #8]
 80197fe:	60eb      	str	r3, [r5, #12]
 8019800:	8823      	ldrh	r3, [r4, #0]
 8019802:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish, "s,d,d,d,d,d,e");
 8019804:	687b      	ldr	r3, [r7, #4]
 8019806:	33d8      	adds	r3, #216	; 0xd8
 8019808:	4a27      	ldr	r2, [pc, #156]	; (80198a8 <problem_fetch+0x18588>)
 801980a:	461c      	mov	r4, r3
 801980c:	4613      	mov	r3, r2
 801980e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8019810:	6020      	str	r0, [r4, #0]
 8019812:	6061      	str	r1, [r4, #4]
 8019814:	60a2      	str	r2, [r4, #8]
 8019816:	881b      	ldrh	r3, [r3, #0]
 8019818:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade, "6B+");
 801981a:	687b      	ldr	r3, [r7, #4]
 801981c:	33cc      	adds	r3, #204	; 0xcc
 801981e:	4a37      	ldr	r2, [pc, #220]	; (80198fc <problem_fetch+0x185dc>)
 8019820:	6810      	ldr	r0, [r2, #0]
 8019822:	6018      	str	r0, [r3, #0]
			break;
 8019824:	f001 bac2 	b.w	801adac <problem_fetch+0x19a8c>
		case 786 :
			strcpy(p->name,"FLEMMING THE BEAST");
 8019828:	687b      	ldr	r3, [r7, #4]
 801982a:	337c      	adds	r3, #124	; 0x7c
 801982c:	4a34      	ldr	r2, [pc, #208]	; (8019900 <problem_fetch+0x185e0>)
 801982e:	461d      	mov	r5, r3
 8019830:	4614      	mov	r4, r2
 8019832:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8019834:	6028      	str	r0, [r5, #0]
 8019836:	6069      	str	r1, [r5, #4]
 8019838:	60aa      	str	r2, [r5, #8]
 801983a:	60eb      	str	r3, [r5, #12]
 801983c:	8823      	ldrh	r3, [r4, #0]
 801983e:	78a2      	ldrb	r2, [r4, #2]
 8019840:	822b      	strh	r3, [r5, #16]
 8019842:	4613      	mov	r3, r2
 8019844:	74ab      	strb	r3, [r5, #18]
			p->moveSize = 8;
 8019846:	687b      	ldr	r3, [r7, #4]
 8019848:	2208      	movs	r2, #8
 801984a:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"G,J,G,E,H,A,E,D");
 801984c:	687b      	ldr	r3, [r7, #4]
 801984e:	3340      	adds	r3, #64	; 0x40
 8019850:	4a2c      	ldr	r2, [pc, #176]	; (8019904 <problem_fetch+0x185e4>)
 8019852:	461c      	mov	r4, r3
 8019854:	4615      	mov	r5, r2
 8019856:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8019858:	6020      	str	r0, [r4, #0]
 801985a:	6061      	str	r1, [r4, #4]
 801985c:	60a2      	str	r2, [r4, #8]
 801985e:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,5,9,12,8,14,16,18");
 8019860:	687b      	ldr	r3, [r7, #4]
 8019862:	3304      	adds	r3, #4
 8019864:	4a28      	ldr	r2, [pc, #160]	; (8019908 <problem_fetch+0x185e8>)
 8019866:	461d      	mov	r5, r3
 8019868:	4614      	mov	r4, r2
 801986a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801986c:	6028      	str	r0, [r5, #0]
 801986e:	6069      	str	r1, [r5, #4]
 8019870:	60aa      	str	r2, [r5, #8]
 8019872:	60eb      	str	r3, [r5, #12]
 8019874:	6820      	ldr	r0, [r4, #0]
 8019876:	6128      	str	r0, [r5, #16]
			strcpy(p->startFinish, "s,d,d,d,d,d,d,e");
 8019878:	687b      	ldr	r3, [r7, #4]
 801987a:	33d8      	adds	r3, #216	; 0xd8
 801987c:	4a23      	ldr	r2, [pc, #140]	; (801990c <problem_fetch+0x185ec>)
 801987e:	461c      	mov	r4, r3
 8019880:	4615      	mov	r5, r2
 8019882:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8019884:	6020      	str	r0, [r4, #0]
 8019886:	6061      	str	r1, [r4, #4]
 8019888:	60a2      	str	r2, [r4, #8]
 801988a:	60e3      	str	r3, [r4, #12]
			strcpy(p->grade, "6C+");
 801988c:	687b      	ldr	r3, [r7, #4]
 801988e:	33cc      	adds	r3, #204	; 0xcc
 8019890:	4a06      	ldr	r2, [pc, #24]	; (80198ac <problem_fetch+0x1858c>)
 8019892:	6810      	ldr	r0, [r2, #0]
 8019894:	6018      	str	r0, [r3, #0]
			break;
 8019896:	f001 ba89 	b.w	801adac <problem_fetch+0x19a8c>
 801989a:	bf00      	nop
 801989c:	08029fe4 	.word	0x08029fe4
 80198a0:	08029ff0 	.word	0x08029ff0
 80198a4:	0802a000 	.word	0x0802a000
 80198a8:	08021494 	.word	0x08021494
 80198ac:	080213a8 	.word	0x080213a8
 80198b0:	0802a014 	.word	0x0802a014
 80198b4:	0802a024 	.word	0x0802a024
 80198b8:	0802a030 	.word	0x0802a030
 80198bc:	0802139c 	.word	0x0802139c
 80198c0:	0802a040 	.word	0x0802a040
 80198c4:	0802a054 	.word	0x0802a054
 80198c8:	080251f8 	.word	0x080251f8
 80198cc:	08021848 	.word	0x08021848
 80198d0:	0802a060 	.word	0x0802a060
 80198d4:	0802a074 	.word	0x0802a074
 80198d8:	0802a080 	.word	0x0802a080
 80198dc:	08021910 	.word	0x08021910
 80198e0:	0802a090 	.word	0x0802a090
 80198e4:	0802a0ac 	.word	0x0802a0ac
 80198e8:	0802a0b8 	.word	0x0802a0b8
 80198ec:	08021320 	.word	0x08021320
 80198f0:	0802a0c8 	.word	0x0802a0c8
 80198f4:	0802a0d8 	.word	0x0802a0d8
 80198f8:	0802a0e8 	.word	0x0802a0e8
 80198fc:	080212b0 	.word	0x080212b0
 8019900:	0802a0fc 	.word	0x0802a0fc
 8019904:	0802a110 	.word	0x0802a110
 8019908:	0802a120 	.word	0x0802a120
 801990c:	08021458 	.word	0x08021458
		case 787 :
			strcpy(p->name,"ALLBLACKS");
 8019910:	687b      	ldr	r3, [r7, #4]
 8019912:	337c      	adds	r3, #124	; 0x7c
 8019914:	49af      	ldr	r1, [pc, #700]	; (8019bd4 <problem_fetch+0x188b4>)
 8019916:	461a      	mov	r2, r3
 8019918:	460b      	mov	r3, r1
 801991a:	cb03      	ldmia	r3!, {r0, r1}
 801991c:	6010      	str	r0, [r2, #0]
 801991e:	6051      	str	r1, [r2, #4]
 8019920:	881b      	ldrh	r3, [r3, #0]
 8019922:	8113      	strh	r3, [r2, #8]
			p->moveSize = 6;
 8019924:	687b      	ldr	r3, [r7, #4]
 8019926:	2206      	movs	r2, #6
 8019928:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"E,G,H,C,D,A");
 801992a:	687b      	ldr	r3, [r7, #4]
 801992c:	3340      	adds	r3, #64	; 0x40
 801992e:	4aaa      	ldr	r2, [pc, #680]	; (8019bd8 <problem_fetch+0x188b8>)
 8019930:	461c      	mov	r4, r3
 8019932:	4613      	mov	r3, r2
 8019934:	cb07      	ldmia	r3!, {r0, r1, r2}
 8019936:	6020      	str	r0, [r4, #0]
 8019938:	6061      	str	r1, [r4, #4]
 801993a:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"6,4,10,13,15,18");
 801993c:	687b      	ldr	r3, [r7, #4]
 801993e:	3304      	adds	r3, #4
 8019940:	4aa6      	ldr	r2, [pc, #664]	; (8019bdc <problem_fetch+0x188bc>)
 8019942:	461c      	mov	r4, r3
 8019944:	4615      	mov	r5, r2
 8019946:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8019948:	6020      	str	r0, [r4, #0]
 801994a:	6061      	str	r1, [r4, #4]
 801994c:	60a2      	str	r2, [r4, #8]
 801994e:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish, "s,s,d,d,d,e");
 8019950:	687b      	ldr	r3, [r7, #4]
 8019952:	33d8      	adds	r3, #216	; 0xd8
 8019954:	4aa2      	ldr	r2, [pc, #648]	; (8019be0 <problem_fetch+0x188c0>)
 8019956:	461c      	mov	r4, r3
 8019958:	4613      	mov	r3, r2
 801995a:	cb07      	ldmia	r3!, {r0, r1, r2}
 801995c:	6020      	str	r0, [r4, #0]
 801995e:	6061      	str	r1, [r4, #4]
 8019960:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade, "7A");
 8019962:	687b      	ldr	r3, [r7, #4]
 8019964:	33cc      	adds	r3, #204	; 0xcc
 8019966:	4a9f      	ldr	r2, [pc, #636]	; (8019be4 <problem_fetch+0x188c4>)
 8019968:	8811      	ldrh	r1, [r2, #0]
 801996a:	7892      	ldrb	r2, [r2, #2]
 801996c:	8019      	strh	r1, [r3, #0]
 801996e:	709a      	strb	r2, [r3, #2]
			break;
 8019970:	f001 ba1c 	b.w	801adac <problem_fetch+0x19a8c>
		case 788 :
			strcpy(p->name,"BLACK LAMP");
 8019974:	687b      	ldr	r3, [r7, #4]
 8019976:	337c      	adds	r3, #124	; 0x7c
 8019978:	499b      	ldr	r1, [pc, #620]	; (8019be8 <problem_fetch+0x188c8>)
 801997a:	461a      	mov	r2, r3
 801997c:	460b      	mov	r3, r1
 801997e:	cb03      	ldmia	r3!, {r0, r1}
 8019980:	6010      	str	r0, [r2, #0]
 8019982:	6051      	str	r1, [r2, #4]
 8019984:	8819      	ldrh	r1, [r3, #0]
 8019986:	789b      	ldrb	r3, [r3, #2]
 8019988:	8111      	strh	r1, [r2, #8]
 801998a:	7293      	strb	r3, [r2, #10]
			p->moveSize = 6;
 801998c:	687b      	ldr	r3, [r7, #4]
 801998e:	2206      	movs	r2, #6
 8019990:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"H,E,I,D,J,E");
 8019992:	687b      	ldr	r3, [r7, #4]
 8019994:	3340      	adds	r3, #64	; 0x40
 8019996:	4a95      	ldr	r2, [pc, #596]	; (8019bec <problem_fetch+0x188cc>)
 8019998:	461c      	mov	r4, r3
 801999a:	4613      	mov	r3, r2
 801999c:	cb07      	ldmia	r3!, {r0, r1, r2}
 801999e:	6020      	str	r0, [r4, #0]
 80199a0:	6061      	str	r1, [r4, #4]
 80199a2:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"10,14,14,18,5,6");
 80199a4:	687b      	ldr	r3, [r7, #4]
 80199a6:	3304      	adds	r3, #4
 80199a8:	4a91      	ldr	r2, [pc, #580]	; (8019bf0 <problem_fetch+0x188d0>)
 80199aa:	461c      	mov	r4, r3
 80199ac:	4615      	mov	r5, r2
 80199ae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80199b0:	6020      	str	r0, [r4, #0]
 80199b2:	6061      	str	r1, [r4, #4]
 80199b4:	60a2      	str	r2, [r4, #8]
 80199b6:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish, "d,d,d,e,s,s");
 80199b8:	687b      	ldr	r3, [r7, #4]
 80199ba:	33d8      	adds	r3, #216	; 0xd8
 80199bc:	4a8d      	ldr	r2, [pc, #564]	; (8019bf4 <problem_fetch+0x188d4>)
 80199be:	461c      	mov	r4, r3
 80199c0:	4613      	mov	r3, r2
 80199c2:	cb07      	ldmia	r3!, {r0, r1, r2}
 80199c4:	6020      	str	r0, [r4, #0]
 80199c6:	6061      	str	r1, [r4, #4]
 80199c8:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade, "6C+");
 80199ca:	687b      	ldr	r3, [r7, #4]
 80199cc:	33cc      	adds	r3, #204	; 0xcc
 80199ce:	4a8a      	ldr	r2, [pc, #552]	; (8019bf8 <problem_fetch+0x188d8>)
 80199d0:	6810      	ldr	r0, [r2, #0]
 80199d2:	6018      	str	r0, [r3, #0]
			break;
 80199d4:	f001 b9ea 	b.w	801adac <problem_fetch+0x19a8c>
		case 789 :
			strcpy(p->name,"BARRET");
 80199d8:	687b      	ldr	r3, [r7, #4]
 80199da:	337c      	adds	r3, #124	; 0x7c
 80199dc:	4a87      	ldr	r2, [pc, #540]	; (8019bfc <problem_fetch+0x188dc>)
 80199de:	6810      	ldr	r0, [r2, #0]
 80199e0:	6018      	str	r0, [r3, #0]
 80199e2:	8891      	ldrh	r1, [r2, #4]
 80199e4:	7992      	ldrb	r2, [r2, #6]
 80199e6:	8099      	strh	r1, [r3, #4]
 80199e8:	719a      	strb	r2, [r3, #6]
			p->moveSize = 6;
 80199ea:	687b      	ldr	r3, [r7, #4]
 80199ec:	2206      	movs	r2, #6
 80199ee:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"E,D,A,B,A,D");
 80199f0:	687b      	ldr	r3, [r7, #4]
 80199f2:	3340      	adds	r3, #64	; 0x40
 80199f4:	4a82      	ldr	r2, [pc, #520]	; (8019c00 <problem_fetch+0x188e0>)
 80199f6:	461c      	mov	r4, r3
 80199f8:	4613      	mov	r3, r2
 80199fa:	cb07      	ldmia	r3!, {r0, r1, r2}
 80199fc:	6020      	str	r0, [r4, #0]
 80199fe:	6061      	str	r1, [r4, #4]
 8019a00:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"6,7,9,12,14,18");
 8019a02:	687b      	ldr	r3, [r7, #4]
 8019a04:	3304      	adds	r3, #4
 8019a06:	4a7f      	ldr	r2, [pc, #508]	; (8019c04 <problem_fetch+0x188e4>)
 8019a08:	461c      	mov	r4, r3
 8019a0a:	4613      	mov	r3, r2
 8019a0c:	cb07      	ldmia	r3!, {r0, r1, r2}
 8019a0e:	6020      	str	r0, [r4, #0]
 8019a10:	6061      	str	r1, [r4, #4]
 8019a12:	60a2      	str	r2, [r4, #8]
 8019a14:	881a      	ldrh	r2, [r3, #0]
 8019a16:	789b      	ldrb	r3, [r3, #2]
 8019a18:	81a2      	strh	r2, [r4, #12]
 8019a1a:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish, "s,d,d,d,d,e");
 8019a1c:	687b      	ldr	r3, [r7, #4]
 8019a1e:	33d8      	adds	r3, #216	; 0xd8
 8019a20:	4a79      	ldr	r2, [pc, #484]	; (8019c08 <problem_fetch+0x188e8>)
 8019a22:	461c      	mov	r4, r3
 8019a24:	4613      	mov	r3, r2
 8019a26:	cb07      	ldmia	r3!, {r0, r1, r2}
 8019a28:	6020      	str	r0, [r4, #0]
 8019a2a:	6061      	str	r1, [r4, #4]
 8019a2c:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade, "6C+");
 8019a2e:	687b      	ldr	r3, [r7, #4]
 8019a30:	33cc      	adds	r3, #204	; 0xcc
 8019a32:	4a71      	ldr	r2, [pc, #452]	; (8019bf8 <problem_fetch+0x188d8>)
 8019a34:	6810      	ldr	r0, [r2, #0]
 8019a36:	6018      	str	r0, [r3, #0]
			break;
 8019a38:	f001 b9b8 	b.w	801adac <problem_fetch+0x19a8c>
		case 79 :
			strcpy(p->name,"BROWN FROWN");
 8019a3c:	687b      	ldr	r3, [r7, #4]
 8019a3e:	337c      	adds	r3, #124	; 0x7c
 8019a40:	4a72      	ldr	r2, [pc, #456]	; (8019c0c <problem_fetch+0x188ec>)
 8019a42:	461c      	mov	r4, r3
 8019a44:	4613      	mov	r3, r2
 8019a46:	cb07      	ldmia	r3!, {r0, r1, r2}
 8019a48:	6020      	str	r0, [r4, #0]
 8019a4a:	6061      	str	r1, [r4, #4]
 8019a4c:	60a2      	str	r2, [r4, #8]
			p->moveSize = 8;
 8019a4e:	687b      	ldr	r3, [r7, #4]
 8019a50:	2208      	movs	r2, #8
 8019a52:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"G,E,C,H,F,C,E,D");
 8019a54:	687b      	ldr	r3, [r7, #4]
 8019a56:	3340      	adds	r3, #64	; 0x40
 8019a58:	4a6d      	ldr	r2, [pc, #436]	; (8019c10 <problem_fetch+0x188f0>)
 8019a5a:	461c      	mov	r4, r3
 8019a5c:	4615      	mov	r5, r2
 8019a5e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8019a60:	6020      	str	r0, [r4, #0]
 8019a62:	6061      	str	r1, [r4, #4]
 8019a64:	60a2      	str	r2, [r4, #8]
 8019a66:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,6,8,8,11,13,16,18");
 8019a68:	687b      	ldr	r3, [r7, #4]
 8019a6a:	3304      	adds	r3, #4
 8019a6c:	4a69      	ldr	r2, [pc, #420]	; (8019c14 <problem_fetch+0x188f4>)
 8019a6e:	461d      	mov	r5, r3
 8019a70:	4614      	mov	r4, r2
 8019a72:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8019a74:	6028      	str	r0, [r5, #0]
 8019a76:	6069      	str	r1, [r5, #4]
 8019a78:	60aa      	str	r2, [r5, #8]
 8019a7a:	60eb      	str	r3, [r5, #12]
 8019a7c:	6820      	ldr	r0, [r4, #0]
 8019a7e:	6128      	str	r0, [r5, #16]
			strcpy(p->startFinish, "s,d,d,d,d,d,d,e");
 8019a80:	687b      	ldr	r3, [r7, #4]
 8019a82:	33d8      	adds	r3, #216	; 0xd8
 8019a84:	4a64      	ldr	r2, [pc, #400]	; (8019c18 <problem_fetch+0x188f8>)
 8019a86:	461c      	mov	r4, r3
 8019a88:	4615      	mov	r5, r2
 8019a8a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8019a8c:	6020      	str	r0, [r4, #0]
 8019a8e:	6061      	str	r1, [r4, #4]
 8019a90:	60a2      	str	r2, [r4, #8]
 8019a92:	60e3      	str	r3, [r4, #12]
			strcpy(p->grade, "6B+");
 8019a94:	687b      	ldr	r3, [r7, #4]
 8019a96:	33cc      	adds	r3, #204	; 0xcc
 8019a98:	4a60      	ldr	r2, [pc, #384]	; (8019c1c <problem_fetch+0x188fc>)
 8019a9a:	6810      	ldr	r0, [r2, #0]
 8019a9c:	6018      	str	r0, [r3, #0]
			break;
 8019a9e:	f001 b985 	b.w	801adac <problem_fetch+0x19a8c>
		case 790 :
			strcpy(p->name,"TURBO CALLA");
 8019aa2:	687b      	ldr	r3, [r7, #4]
 8019aa4:	337c      	adds	r3, #124	; 0x7c
 8019aa6:	4a5e      	ldr	r2, [pc, #376]	; (8019c20 <problem_fetch+0x18900>)
 8019aa8:	461c      	mov	r4, r3
 8019aaa:	4613      	mov	r3, r2
 8019aac:	cb07      	ldmia	r3!, {r0, r1, r2}
 8019aae:	6020      	str	r0, [r4, #0]
 8019ab0:	6061      	str	r1, [r4, #4]
 8019ab2:	60a2      	str	r2, [r4, #8]
			p->moveSize = 6;
 8019ab4:	687b      	ldr	r3, [r7, #4]
 8019ab6:	2206      	movs	r2, #6
 8019ab8:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"G,H,C,C,D,A");
 8019aba:	687b      	ldr	r3, [r7, #4]
 8019abc:	3340      	adds	r3, #64	; 0x40
 8019abe:	4a59      	ldr	r2, [pc, #356]	; (8019c24 <problem_fetch+0x18904>)
 8019ac0:	461c      	mov	r4, r3
 8019ac2:	4613      	mov	r3, r2
 8019ac4:	cb07      	ldmia	r3!, {r0, r1, r2}
 8019ac6:	6020      	str	r0, [r4, #0]
 8019ac8:	6061      	str	r1, [r4, #4]
 8019aca:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,8,8,13,15,18");
 8019acc:	687b      	ldr	r3, [r7, #4]
 8019ace:	3304      	adds	r3, #4
 8019ad0:	4a55      	ldr	r2, [pc, #340]	; (8019c28 <problem_fetch+0x18908>)
 8019ad2:	461c      	mov	r4, r3
 8019ad4:	4613      	mov	r3, r2
 8019ad6:	cb07      	ldmia	r3!, {r0, r1, r2}
 8019ad8:	6020      	str	r0, [r4, #0]
 8019ada:	6061      	str	r1, [r4, #4]
 8019adc:	60a2      	str	r2, [r4, #8]
 8019ade:	881a      	ldrh	r2, [r3, #0]
 8019ae0:	789b      	ldrb	r3, [r3, #2]
 8019ae2:	81a2      	strh	r2, [r4, #12]
 8019ae4:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish, "s,d,d,d,d,e");
 8019ae6:	687b      	ldr	r3, [r7, #4]
 8019ae8:	33d8      	adds	r3, #216	; 0xd8
 8019aea:	4a47      	ldr	r2, [pc, #284]	; (8019c08 <problem_fetch+0x188e8>)
 8019aec:	461c      	mov	r4, r3
 8019aee:	4613      	mov	r3, r2
 8019af0:	cb07      	ldmia	r3!, {r0, r1, r2}
 8019af2:	6020      	str	r0, [r4, #0]
 8019af4:	6061      	str	r1, [r4, #4]
 8019af6:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade, "7A");
 8019af8:	687b      	ldr	r3, [r7, #4]
 8019afa:	33cc      	adds	r3, #204	; 0xcc
 8019afc:	4a39      	ldr	r2, [pc, #228]	; (8019be4 <problem_fetch+0x188c4>)
 8019afe:	8811      	ldrh	r1, [r2, #0]
 8019b00:	7892      	ldrb	r2, [r2, #2]
 8019b02:	8019      	strh	r1, [r3, #0]
 8019b04:	709a      	strb	r2, [r3, #2]
			break;
 8019b06:	f001 b951 	b.w	801adac <problem_fetch+0x19a8c>
		case 791 :
			strcpy(p->name,"SIM");
 8019b0a:	687b      	ldr	r3, [r7, #4]
 8019b0c:	337c      	adds	r3, #124	; 0x7c
 8019b0e:	4a47      	ldr	r2, [pc, #284]	; (8019c2c <problem_fetch+0x1890c>)
 8019b10:	6810      	ldr	r0, [r2, #0]
 8019b12:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 8019b14:	687b      	ldr	r3, [r7, #4]
 8019b16:	2206      	movs	r2, #6
 8019b18:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"G,E,I,D,E,A");
 8019b1a:	687b      	ldr	r3, [r7, #4]
 8019b1c:	3340      	adds	r3, #64	; 0x40
 8019b1e:	4a44      	ldr	r2, [pc, #272]	; (8019c30 <problem_fetch+0x18910>)
 8019b20:	461c      	mov	r4, r3
 8019b22:	4613      	mov	r3, r2
 8019b24:	cb07      	ldmia	r3!, {r0, r1, r2}
 8019b26:	6020      	str	r0, [r4, #0]
 8019b28:	6061      	str	r1, [r4, #4]
 8019b2a:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,6,9,11,16,18");
 8019b2c:	687b      	ldr	r3, [r7, #4]
 8019b2e:	3304      	adds	r3, #4
 8019b30:	4a40      	ldr	r2, [pc, #256]	; (8019c34 <problem_fetch+0x18914>)
 8019b32:	461c      	mov	r4, r3
 8019b34:	4613      	mov	r3, r2
 8019b36:	cb07      	ldmia	r3!, {r0, r1, r2}
 8019b38:	6020      	str	r0, [r4, #0]
 8019b3a:	6061      	str	r1, [r4, #4]
 8019b3c:	60a2      	str	r2, [r4, #8]
 8019b3e:	881a      	ldrh	r2, [r3, #0]
 8019b40:	789b      	ldrb	r3, [r3, #2]
 8019b42:	81a2      	strh	r2, [r4, #12]
 8019b44:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish, "s,s,d,d,d,e");
 8019b46:	687b      	ldr	r3, [r7, #4]
 8019b48:	33d8      	adds	r3, #216	; 0xd8
 8019b4a:	4a25      	ldr	r2, [pc, #148]	; (8019be0 <problem_fetch+0x188c0>)
 8019b4c:	461c      	mov	r4, r3
 8019b4e:	4613      	mov	r3, r2
 8019b50:	cb07      	ldmia	r3!, {r0, r1, r2}
 8019b52:	6020      	str	r0, [r4, #0]
 8019b54:	6061      	str	r1, [r4, #4]
 8019b56:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade, "7A+");
 8019b58:	687b      	ldr	r3, [r7, #4]
 8019b5a:	33cc      	adds	r3, #204	; 0xcc
 8019b5c:	4a36      	ldr	r2, [pc, #216]	; (8019c38 <problem_fetch+0x18918>)
 8019b5e:	6810      	ldr	r0, [r2, #0]
 8019b60:	6018      	str	r0, [r3, #0]
			break;
 8019b62:	f001 b923 	b.w	801adac <problem_fetch+0x19a8c>
		case 792 :
			strcpy(p->name,"INTERNAL ROTATION");
 8019b66:	687b      	ldr	r3, [r7, #4]
 8019b68:	337c      	adds	r3, #124	; 0x7c
 8019b6a:	4a34      	ldr	r2, [pc, #208]	; (8019c3c <problem_fetch+0x1891c>)
 8019b6c:	461d      	mov	r5, r3
 8019b6e:	4614      	mov	r4, r2
 8019b70:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8019b72:	6028      	str	r0, [r5, #0]
 8019b74:	6069      	str	r1, [r5, #4]
 8019b76:	60aa      	str	r2, [r5, #8]
 8019b78:	60eb      	str	r3, [r5, #12]
 8019b7a:	8823      	ldrh	r3, [r4, #0]
 8019b7c:	822b      	strh	r3, [r5, #16]
			p->moveSize = 8;
 8019b7e:	687b      	ldr	r3, [r7, #4]
 8019b80:	2208      	movs	r2, #8
 8019b82:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"E,E,H,H,D,G,D,C");
 8019b84:	687b      	ldr	r3, [r7, #4]
 8019b86:	3340      	adds	r3, #64	; 0x40
 8019b88:	4a2d      	ldr	r2, [pc, #180]	; (8019c40 <problem_fetch+0x18920>)
 8019b8a:	461c      	mov	r4, r3
 8019b8c:	4615      	mov	r5, r2
 8019b8e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8019b90:	6020      	str	r0, [r4, #0]
 8019b92:	6061      	str	r1, [r4, #4]
 8019b94:	60a2      	str	r2, [r4, #8]
 8019b96:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"8,9,12,5,15,15,18,5");
 8019b98:	687b      	ldr	r3, [r7, #4]
 8019b9a:	3304      	adds	r3, #4
 8019b9c:	4a29      	ldr	r2, [pc, #164]	; (8019c44 <problem_fetch+0x18924>)
 8019b9e:	461d      	mov	r5, r3
 8019ba0:	4614      	mov	r4, r2
 8019ba2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8019ba4:	6028      	str	r0, [r5, #0]
 8019ba6:	6069      	str	r1, [r5, #4]
 8019ba8:	60aa      	str	r2, [r5, #8]
 8019baa:	60eb      	str	r3, [r5, #12]
 8019bac:	6820      	ldr	r0, [r4, #0]
 8019bae:	6128      	str	r0, [r5, #16]
			strcpy(p->startFinish, "d,d,d,d,d,d,e,s");
 8019bb0:	687b      	ldr	r3, [r7, #4]
 8019bb2:	33d8      	adds	r3, #216	; 0xd8
 8019bb4:	4a24      	ldr	r2, [pc, #144]	; (8019c48 <problem_fetch+0x18928>)
 8019bb6:	461c      	mov	r4, r3
 8019bb8:	4615      	mov	r5, r2
 8019bba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8019bbc:	6020      	str	r0, [r4, #0]
 8019bbe:	6061      	str	r1, [r4, #4]
 8019bc0:	60a2      	str	r2, [r4, #8]
 8019bc2:	60e3      	str	r3, [r4, #12]
			strcpy(p->grade, "7A+");
 8019bc4:	687b      	ldr	r3, [r7, #4]
 8019bc6:	33cc      	adds	r3, #204	; 0xcc
 8019bc8:	4a1b      	ldr	r2, [pc, #108]	; (8019c38 <problem_fetch+0x18918>)
 8019bca:	6810      	ldr	r0, [r2, #0]
 8019bcc:	6018      	str	r0, [r3, #0]
			break;
 8019bce:	f001 b8ed 	b.w	801adac <problem_fetch+0x19a8c>
 8019bd2:	bf00      	nop
 8019bd4:	0802a134 	.word	0x0802a134
 8019bd8:	0802a140 	.word	0x0802a140
 8019bdc:	0802a14c 	.word	0x0802a14c
 8019be0:	08021910 	.word	0x08021910
 8019be4:	080212f4 	.word	0x080212f4
 8019be8:	0802a15c 	.word	0x0802a15c
 8019bec:	0802a168 	.word	0x0802a168
 8019bf0:	0802a174 	.word	0x0802a174
 8019bf4:	0802a184 	.word	0x0802a184
 8019bf8:	080213a8 	.word	0x080213a8
 8019bfc:	0802a190 	.word	0x0802a190
 8019c00:	0802a198 	.word	0x0802a198
 8019c04:	0802a1a4 	.word	0x0802a1a4
 8019c08:	0802139c 	.word	0x0802139c
 8019c0c:	0802a1b4 	.word	0x0802a1b4
 8019c10:	0802a1c0 	.word	0x0802a1c0
 8019c14:	0802a1d0 	.word	0x0802a1d0
 8019c18:	08021458 	.word	0x08021458
 8019c1c:	080212b0 	.word	0x080212b0
 8019c20:	0802a1e4 	.word	0x0802a1e4
 8019c24:	0802a1f0 	.word	0x0802a1f0
 8019c28:	0802a1fc 	.word	0x0802a1fc
 8019c2c:	0802a20c 	.word	0x0802a20c
 8019c30:	0802a210 	.word	0x0802a210
 8019c34:	08023350 	.word	0x08023350
 8019c38:	08021424 	.word	0x08021424
 8019c3c:	0802a21c 	.word	0x0802a21c
 8019c40:	0802a230 	.word	0x0802a230
 8019c44:	0802a240 	.word	0x0802a240
 8019c48:	0802a254 	.word	0x0802a254
		case 793 :
			strcpy(p->name,"SUSHI ROLL");
 8019c4c:	687b      	ldr	r3, [r7, #4]
 8019c4e:	337c      	adds	r3, #124	; 0x7c
 8019c50:	49a9      	ldr	r1, [pc, #676]	; (8019ef8 <problem_fetch+0x18bd8>)
 8019c52:	461a      	mov	r2, r3
 8019c54:	460b      	mov	r3, r1
 8019c56:	cb03      	ldmia	r3!, {r0, r1}
 8019c58:	6010      	str	r0, [r2, #0]
 8019c5a:	6051      	str	r1, [r2, #4]
 8019c5c:	8819      	ldrh	r1, [r3, #0]
 8019c5e:	789b      	ldrb	r3, [r3, #2]
 8019c60:	8111      	strh	r1, [r2, #8]
 8019c62:	7293      	strb	r3, [r2, #10]
			p->moveSize = 7;
 8019c64:	687b      	ldr	r3, [r7, #4]
 8019c66:	2207      	movs	r2, #7
 8019c68:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"G,J,H,C,D,A,D");
 8019c6a:	687b      	ldr	r3, [r7, #4]
 8019c6c:	3340      	adds	r3, #64	; 0x40
 8019c6e:	4aa3      	ldr	r2, [pc, #652]	; (8019efc <problem_fetch+0x18bdc>)
 8019c70:	461c      	mov	r4, r3
 8019c72:	4613      	mov	r3, r2
 8019c74:	cb07      	ldmia	r3!, {r0, r1, r2}
 8019c76:	6020      	str	r0, [r4, #0]
 8019c78:	6061      	str	r1, [r4, #4]
 8019c7a:	60a2      	str	r2, [r4, #8]
 8019c7c:	881b      	ldrh	r3, [r3, #0]
 8019c7e:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"6,5,10,13,18,18,15");
 8019c80:	687b      	ldr	r3, [r7, #4]
 8019c82:	3304      	adds	r3, #4
 8019c84:	4a9e      	ldr	r2, [pc, #632]	; (8019f00 <problem_fetch+0x18be0>)
 8019c86:	461d      	mov	r5, r3
 8019c88:	4614      	mov	r4, r2
 8019c8a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8019c8c:	6028      	str	r0, [r5, #0]
 8019c8e:	6069      	str	r1, [r5, #4]
 8019c90:	60aa      	str	r2, [r5, #8]
 8019c92:	60eb      	str	r3, [r5, #12]
 8019c94:	8823      	ldrh	r3, [r4, #0]
 8019c96:	78a2      	ldrb	r2, [r4, #2]
 8019c98:	822b      	strh	r3, [r5, #16]
 8019c9a:	4613      	mov	r3, r2
 8019c9c:	74ab      	strb	r3, [r5, #18]
			strcpy(p->startFinish, "s,s,d,d,e,e,d");
 8019c9e:	687b      	ldr	r3, [r7, #4]
 8019ca0:	33d8      	adds	r3, #216	; 0xd8
 8019ca2:	4a98      	ldr	r2, [pc, #608]	; (8019f04 <problem_fetch+0x18be4>)
 8019ca4:	461c      	mov	r4, r3
 8019ca6:	4613      	mov	r3, r2
 8019ca8:	cb07      	ldmia	r3!, {r0, r1, r2}
 8019caa:	6020      	str	r0, [r4, #0]
 8019cac:	6061      	str	r1, [r4, #4]
 8019cae:	60a2      	str	r2, [r4, #8]
 8019cb0:	881b      	ldrh	r3, [r3, #0]
 8019cb2:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade, "6B+");
 8019cb4:	687b      	ldr	r3, [r7, #4]
 8019cb6:	33cc      	adds	r3, #204	; 0xcc
 8019cb8:	4a93      	ldr	r2, [pc, #588]	; (8019f08 <problem_fetch+0x18be8>)
 8019cba:	6810      	ldr	r0, [r2, #0]
 8019cbc:	6018      	str	r0, [r3, #0]
			break;
 8019cbe:	f001 b875 	b.w	801adac <problem_fetch+0x19a8c>
		case 794 :
			strcpy(p->name,"DEAD FISH");
 8019cc2:	687b      	ldr	r3, [r7, #4]
 8019cc4:	337c      	adds	r3, #124	; 0x7c
 8019cc6:	4991      	ldr	r1, [pc, #580]	; (8019f0c <problem_fetch+0x18bec>)
 8019cc8:	461a      	mov	r2, r3
 8019cca:	460b      	mov	r3, r1
 8019ccc:	cb03      	ldmia	r3!, {r0, r1}
 8019cce:	6010      	str	r0, [r2, #0]
 8019cd0:	6051      	str	r1, [r2, #4]
 8019cd2:	881b      	ldrh	r3, [r3, #0]
 8019cd4:	8113      	strh	r3, [r2, #8]
			p->moveSize = 7;
 8019cd6:	687b      	ldr	r3, [r7, #4]
 8019cd8:	2207      	movs	r2, #7
 8019cda:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"J,E,G,F,I,E,D");
 8019cdc:	687b      	ldr	r3, [r7, #4]
 8019cde:	3340      	adds	r3, #64	; 0x40
 8019ce0:	4a8b      	ldr	r2, [pc, #556]	; (8019f10 <problem_fetch+0x18bf0>)
 8019ce2:	461c      	mov	r4, r3
 8019ce4:	4613      	mov	r3, r2
 8019ce6:	cb07      	ldmia	r3!, {r0, r1, r2}
 8019ce8:	6020      	str	r0, [r4, #0]
 8019cea:	6061      	str	r1, [r4, #4]
 8019cec:	60a2      	str	r2, [r4, #8]
 8019cee:	881b      	ldrh	r3, [r3, #0]
 8019cf0:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,6,9,11,14,16,18");
 8019cf2:	687b      	ldr	r3, [r7, #4]
 8019cf4:	3304      	adds	r3, #4
 8019cf6:	4a87      	ldr	r2, [pc, #540]	; (8019f14 <problem_fetch+0x18bf4>)
 8019cf8:	461d      	mov	r5, r3
 8019cfa:	4614      	mov	r4, r2
 8019cfc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8019cfe:	6028      	str	r0, [r5, #0]
 8019d00:	6069      	str	r1, [r5, #4]
 8019d02:	60aa      	str	r2, [r5, #8]
 8019d04:	60eb      	str	r3, [r5, #12]
 8019d06:	8823      	ldrh	r3, [r4, #0]
 8019d08:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish, "s,s,d,d,d,d,e");
 8019d0a:	687b      	ldr	r3, [r7, #4]
 8019d0c:	33d8      	adds	r3, #216	; 0xd8
 8019d0e:	4a82      	ldr	r2, [pc, #520]	; (8019f18 <problem_fetch+0x18bf8>)
 8019d10:	461c      	mov	r4, r3
 8019d12:	4613      	mov	r3, r2
 8019d14:	cb07      	ldmia	r3!, {r0, r1, r2}
 8019d16:	6020      	str	r0, [r4, #0]
 8019d18:	6061      	str	r1, [r4, #4]
 8019d1a:	60a2      	str	r2, [r4, #8]
 8019d1c:	881b      	ldrh	r3, [r3, #0]
 8019d1e:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade, "6C+");
 8019d20:	687b      	ldr	r3, [r7, #4]
 8019d22:	33cc      	adds	r3, #204	; 0xcc
 8019d24:	4a7d      	ldr	r2, [pc, #500]	; (8019f1c <problem_fetch+0x18bfc>)
 8019d26:	6810      	ldr	r0, [r2, #0]
 8019d28:	6018      	str	r0, [r3, #0]
			break;
 8019d2a:	f001 b83f 	b.w	801adac <problem_fetch+0x19a8c>
		case 795 :
			strcpy(p->name,"CAMPUSING WITH A BACKPACK");
 8019d2e:	687b      	ldr	r3, [r7, #4]
 8019d30:	337c      	adds	r3, #124	; 0x7c
 8019d32:	4a7b      	ldr	r2, [pc, #492]	; (8019f20 <problem_fetch+0x18c00>)
 8019d34:	461d      	mov	r5, r3
 8019d36:	4614      	mov	r4, r2
 8019d38:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8019d3a:	6028      	str	r0, [r5, #0]
 8019d3c:	6069      	str	r1, [r5, #4]
 8019d3e:	60aa      	str	r2, [r5, #8]
 8019d40:	60eb      	str	r3, [r5, #12]
 8019d42:	cc03      	ldmia	r4!, {r0, r1}
 8019d44:	6128      	str	r0, [r5, #16]
 8019d46:	6169      	str	r1, [r5, #20]
 8019d48:	8823      	ldrh	r3, [r4, #0]
 8019d4a:	832b      	strh	r3, [r5, #24]
			p->moveSize = 7;
 8019d4c:	687b      	ldr	r3, [r7, #4]
 8019d4e:	2207      	movs	r2, #7
 8019d50:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"H,J,E,H,C,D,D");
 8019d52:	687b      	ldr	r3, [r7, #4]
 8019d54:	3340      	adds	r3, #64	; 0x40
 8019d56:	4a73      	ldr	r2, [pc, #460]	; (8019f24 <problem_fetch+0x18c04>)
 8019d58:	461c      	mov	r4, r3
 8019d5a:	4613      	mov	r3, r2
 8019d5c:	cb07      	ldmia	r3!, {r0, r1, r2}
 8019d5e:	6020      	str	r0, [r4, #0]
 8019d60:	6061      	str	r1, [r4, #4]
 8019d62:	60a2      	str	r2, [r4, #8]
 8019d64:	881b      	ldrh	r3, [r3, #0]
 8019d66:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,5,8,10,13,15,18");
 8019d68:	687b      	ldr	r3, [r7, #4]
 8019d6a:	3304      	adds	r3, #4
 8019d6c:	4a6e      	ldr	r2, [pc, #440]	; (8019f28 <problem_fetch+0x18c08>)
 8019d6e:	461d      	mov	r5, r3
 8019d70:	4614      	mov	r4, r2
 8019d72:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8019d74:	6028      	str	r0, [r5, #0]
 8019d76:	6069      	str	r1, [r5, #4]
 8019d78:	60aa      	str	r2, [r5, #8]
 8019d7a:	60eb      	str	r3, [r5, #12]
 8019d7c:	8823      	ldrh	r3, [r4, #0]
 8019d7e:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish, "s,s,d,d,d,d,e");
 8019d80:	687b      	ldr	r3, [r7, #4]
 8019d82:	33d8      	adds	r3, #216	; 0xd8
 8019d84:	4a64      	ldr	r2, [pc, #400]	; (8019f18 <problem_fetch+0x18bf8>)
 8019d86:	461c      	mov	r4, r3
 8019d88:	4613      	mov	r3, r2
 8019d8a:	cb07      	ldmia	r3!, {r0, r1, r2}
 8019d8c:	6020      	str	r0, [r4, #0]
 8019d8e:	6061      	str	r1, [r4, #4]
 8019d90:	60a2      	str	r2, [r4, #8]
 8019d92:	881b      	ldrh	r3, [r3, #0]
 8019d94:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade, "6B+");
 8019d96:	687b      	ldr	r3, [r7, #4]
 8019d98:	33cc      	adds	r3, #204	; 0xcc
 8019d9a:	4a5b      	ldr	r2, [pc, #364]	; (8019f08 <problem_fetch+0x18be8>)
 8019d9c:	6810      	ldr	r0, [r2, #0]
 8019d9e:	6018      	str	r0, [r3, #0]
			break;
 8019da0:	f001 b804 	b.w	801adac <problem_fetch+0x19a8c>
		case 796 :
			strcpy(p->name,"DER SCHWÄCHLING");
 8019da4:	687b      	ldr	r3, [r7, #4]
 8019da6:	337c      	adds	r3, #124	; 0x7c
 8019da8:	4a60      	ldr	r2, [pc, #384]	; (8019f2c <problem_fetch+0x18c0c>)
 8019daa:	461d      	mov	r5, r3
 8019dac:	4614      	mov	r4, r2
 8019dae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8019db0:	6028      	str	r0, [r5, #0]
 8019db2:	6069      	str	r1, [r5, #4]
 8019db4:	60aa      	str	r2, [r5, #8]
 8019db6:	60eb      	str	r3, [r5, #12]
 8019db8:	7823      	ldrb	r3, [r4, #0]
 8019dba:	742b      	strb	r3, [r5, #16]
			p->moveSize = 8;
 8019dbc:	687b      	ldr	r3, [r7, #4]
 8019dbe:	2208      	movs	r2, #8
 8019dc0:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"J,J,K,I,J,G,G,D");
 8019dc2:	687b      	ldr	r3, [r7, #4]
 8019dc4:	3340      	adds	r3, #64	; 0x40
 8019dc6:	4a5a      	ldr	r2, [pc, #360]	; (8019f30 <problem_fetch+0x18c10>)
 8019dc8:	461c      	mov	r4, r3
 8019dca:	4615      	mov	r5, r2
 8019dcc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8019dce:	6020      	str	r0, [r4, #0]
 8019dd0:	6061      	str	r1, [r4, #4]
 8019dd2:	60a2      	str	r2, [r4, #8]
 8019dd4:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,7,9,10,12,14,17,18");
 8019dd6:	687b      	ldr	r3, [r7, #4]
 8019dd8:	3304      	adds	r3, #4
 8019dda:	4a56      	ldr	r2, [pc, #344]	; (8019f34 <problem_fetch+0x18c14>)
 8019ddc:	461d      	mov	r5, r3
 8019dde:	4614      	mov	r4, r2
 8019de0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8019de2:	6028      	str	r0, [r5, #0]
 8019de4:	6069      	str	r1, [r5, #4]
 8019de6:	60aa      	str	r2, [r5, #8]
 8019de8:	60eb      	str	r3, [r5, #12]
 8019dea:	6820      	ldr	r0, [r4, #0]
 8019dec:	6128      	str	r0, [r5, #16]
 8019dee:	7923      	ldrb	r3, [r4, #4]
 8019df0:	752b      	strb	r3, [r5, #20]
			strcpy(p->startFinish, "s,d,d,d,d,d,d,e");
 8019df2:	687b      	ldr	r3, [r7, #4]
 8019df4:	33d8      	adds	r3, #216	; 0xd8
 8019df6:	4a50      	ldr	r2, [pc, #320]	; (8019f38 <problem_fetch+0x18c18>)
 8019df8:	461c      	mov	r4, r3
 8019dfa:	4615      	mov	r5, r2
 8019dfc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8019dfe:	6020      	str	r0, [r4, #0]
 8019e00:	6061      	str	r1, [r4, #4]
 8019e02:	60a2      	str	r2, [r4, #8]
 8019e04:	60e3      	str	r3, [r4, #12]
			strcpy(p->grade, "6C");
 8019e06:	687b      	ldr	r3, [r7, #4]
 8019e08:	33cc      	adds	r3, #204	; 0xcc
 8019e0a:	4a4c      	ldr	r2, [pc, #304]	; (8019f3c <problem_fetch+0x18c1c>)
 8019e0c:	8811      	ldrh	r1, [r2, #0]
 8019e0e:	7892      	ldrb	r2, [r2, #2]
 8019e10:	8019      	strh	r1, [r3, #0]
 8019e12:	709a      	strb	r2, [r3, #2]
			break;
 8019e14:	f000 bfca 	b.w	801adac <problem_fetch+0x19a8c>
		case 797 :
			strcpy(p->name,"BURNED");
 8019e18:	687b      	ldr	r3, [r7, #4]
 8019e1a:	337c      	adds	r3, #124	; 0x7c
 8019e1c:	4a48      	ldr	r2, [pc, #288]	; (8019f40 <problem_fetch+0x18c20>)
 8019e1e:	6810      	ldr	r0, [r2, #0]
 8019e20:	6018      	str	r0, [r3, #0]
 8019e22:	8891      	ldrh	r1, [r2, #4]
 8019e24:	7992      	ldrb	r2, [r2, #6]
 8019e26:	8099      	strh	r1, [r3, #4]
 8019e28:	719a      	strb	r2, [r3, #6]
			p->moveSize = 8;
 8019e2a:	687b      	ldr	r3, [r7, #4]
 8019e2c:	2208      	movs	r2, #8
 8019e2e:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"E,H,G,J,J,G,E,I");
 8019e30:	687b      	ldr	r3, [r7, #4]
 8019e32:	3340      	adds	r3, #64	; 0x40
 8019e34:	4a43      	ldr	r2, [pc, #268]	; (8019f44 <problem_fetch+0x18c24>)
 8019e36:	461c      	mov	r4, r3
 8019e38:	4615      	mov	r5, r2
 8019e3a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8019e3c:	6020      	str	r0, [r4, #0]
 8019e3e:	6061      	str	r1, [r4, #4]
 8019e40:	60a2      	str	r2, [r4, #8]
 8019e42:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"6,8,9,5,12,14,16,18");
 8019e44:	687b      	ldr	r3, [r7, #4]
 8019e46:	3304      	adds	r3, #4
 8019e48:	4a3f      	ldr	r2, [pc, #252]	; (8019f48 <problem_fetch+0x18c28>)
 8019e4a:	461d      	mov	r5, r3
 8019e4c:	4614      	mov	r4, r2
 8019e4e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8019e50:	6028      	str	r0, [r5, #0]
 8019e52:	6069      	str	r1, [r5, #4]
 8019e54:	60aa      	str	r2, [r5, #8]
 8019e56:	60eb      	str	r3, [r5, #12]
 8019e58:	6820      	ldr	r0, [r4, #0]
 8019e5a:	6128      	str	r0, [r5, #16]
			strcpy(p->startFinish, "s,d,d,d,d,d,d,e");
 8019e5c:	687b      	ldr	r3, [r7, #4]
 8019e5e:	33d8      	adds	r3, #216	; 0xd8
 8019e60:	4a35      	ldr	r2, [pc, #212]	; (8019f38 <problem_fetch+0x18c18>)
 8019e62:	461c      	mov	r4, r3
 8019e64:	4615      	mov	r5, r2
 8019e66:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8019e68:	6020      	str	r0, [r4, #0]
 8019e6a:	6061      	str	r1, [r4, #4]
 8019e6c:	60a2      	str	r2, [r4, #8]
 8019e6e:	60e3      	str	r3, [r4, #12]
			strcpy(p->grade, "7A");
 8019e70:	687b      	ldr	r3, [r7, #4]
 8019e72:	33cc      	adds	r3, #204	; 0xcc
 8019e74:	4a35      	ldr	r2, [pc, #212]	; (8019f4c <problem_fetch+0x18c2c>)
 8019e76:	8811      	ldrh	r1, [r2, #0]
 8019e78:	7892      	ldrb	r2, [r2, #2]
 8019e7a:	8019      	strh	r1, [r3, #0]
 8019e7c:	709a      	strb	r2, [r3, #2]
			break;
 8019e7e:	f000 bf95 	b.w	801adac <problem_fetch+0x19a8c>
		case 798 :
			strcpy(p->name,"ASHES");
 8019e82:	687b      	ldr	r3, [r7, #4]
 8019e84:	337c      	adds	r3, #124	; 0x7c
 8019e86:	4a32      	ldr	r2, [pc, #200]	; (8019f50 <problem_fetch+0x18c30>)
 8019e88:	6810      	ldr	r0, [r2, #0]
 8019e8a:	6018      	str	r0, [r3, #0]
 8019e8c:	8892      	ldrh	r2, [r2, #4]
 8019e8e:	809a      	strh	r2, [r3, #4]
			p->moveSize = 9;
 8019e90:	687b      	ldr	r3, [r7, #4]
 8019e92:	2209      	movs	r2, #9
 8019e94:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"H,G,C,B,E,E,I,J,D");
 8019e96:	687b      	ldr	r3, [r7, #4]
 8019e98:	3340      	adds	r3, #64	; 0x40
 8019e9a:	4a2e      	ldr	r2, [pc, #184]	; (8019f54 <problem_fetch+0x18c34>)
 8019e9c:	461d      	mov	r5, r3
 8019e9e:	4614      	mov	r4, r2
 8019ea0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8019ea2:	6028      	str	r0, [r5, #0]
 8019ea4:	6069      	str	r1, [r5, #4]
 8019ea6:	60aa      	str	r2, [r5, #8]
 8019ea8:	60eb      	str	r3, [r5, #12]
 8019eaa:	8823      	ldrh	r3, [r4, #0]
 8019eac:	822b      	strh	r3, [r5, #16]
			strcpy(p->moveNumbers,"5,6,5,10,14,16,18,13,7");
 8019eae:	687b      	ldr	r3, [r7, #4]
 8019eb0:	3304      	adds	r3, #4
 8019eb2:	4a29      	ldr	r2, [pc, #164]	; (8019f58 <problem_fetch+0x18c38>)
 8019eb4:	461c      	mov	r4, r3
 8019eb6:	4615      	mov	r5, r2
 8019eb8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8019eba:	6020      	str	r0, [r4, #0]
 8019ebc:	6061      	str	r1, [r4, #4]
 8019ebe:	60a2      	str	r2, [r4, #8]
 8019ec0:	60e3      	str	r3, [r4, #12]
 8019ec2:	6828      	ldr	r0, [r5, #0]
 8019ec4:	6120      	str	r0, [r4, #16]
 8019ec6:	88ab      	ldrh	r3, [r5, #4]
 8019ec8:	79aa      	ldrb	r2, [r5, #6]
 8019eca:	82a3      	strh	r3, [r4, #20]
 8019ecc:	4613      	mov	r3, r2
 8019ece:	75a3      	strb	r3, [r4, #22]
			strcpy(p->startFinish, "s,d,d,d,d,d,e,d,d");
 8019ed0:	687b      	ldr	r3, [r7, #4]
 8019ed2:	33d8      	adds	r3, #216	; 0xd8
 8019ed4:	4a21      	ldr	r2, [pc, #132]	; (8019f5c <problem_fetch+0x18c3c>)
 8019ed6:	461d      	mov	r5, r3
 8019ed8:	4614      	mov	r4, r2
 8019eda:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8019edc:	6028      	str	r0, [r5, #0]
 8019ede:	6069      	str	r1, [r5, #4]
 8019ee0:	60aa      	str	r2, [r5, #8]
 8019ee2:	60eb      	str	r3, [r5, #12]
 8019ee4:	8823      	ldrh	r3, [r4, #0]
 8019ee6:	822b      	strh	r3, [r5, #16]
			strcpy(p->grade, "7A+");
 8019ee8:	687b      	ldr	r3, [r7, #4]
 8019eea:	33cc      	adds	r3, #204	; 0xcc
 8019eec:	4a1c      	ldr	r2, [pc, #112]	; (8019f60 <problem_fetch+0x18c40>)
 8019eee:	6810      	ldr	r0, [r2, #0]
 8019ef0:	6018      	str	r0, [r3, #0]
			break;
 8019ef2:	f000 bf5b 	b.w	801adac <problem_fetch+0x19a8c>
 8019ef6:	bf00      	nop
 8019ef8:	0802a264 	.word	0x0802a264
 8019efc:	0802a270 	.word	0x0802a270
 8019f00:	0802a280 	.word	0x0802a280
 8019f04:	0802a294 	.word	0x0802a294
 8019f08:	080212b0 	.word	0x080212b0
 8019f0c:	0802a2a4 	.word	0x0802a2a4
 8019f10:	0802a2b0 	.word	0x0802a2b0
 8019f14:	0802a2c0 	.word	0x0802a2c0
 8019f18:	080212a0 	.word	0x080212a0
 8019f1c:	080213a8 	.word	0x080213a8
 8019f20:	0802a2d4 	.word	0x0802a2d4
 8019f24:	0802a2f0 	.word	0x0802a2f0
 8019f28:	0802a300 	.word	0x0802a300
 8019f2c:	0802a314 	.word	0x0802a314
 8019f30:	0802a328 	.word	0x0802a328
 8019f34:	0802a338 	.word	0x0802a338
 8019f38:	08021458 	.word	0x08021458
 8019f3c:	08021370 	.word	0x08021370
 8019f40:	0802a350 	.word	0x0802a350
 8019f44:	0802a358 	.word	0x0802a358
 8019f48:	0802a368 	.word	0x0802a368
 8019f4c:	080212f4 	.word	0x080212f4
 8019f50:	0802a37c 	.word	0x0802a37c
 8019f54:	0802a384 	.word	0x0802a384
 8019f58:	0802a398 	.word	0x0802a398
 8019f5c:	0802a3b0 	.word	0x0802a3b0
 8019f60:	08021424 	.word	0x08021424
		case 799 :
			strcpy(p->name,"CHOSS 7");
 8019f64:	687b      	ldr	r3, [r7, #4]
 8019f66:	337c      	adds	r3, #124	; 0x7c
 8019f68:	49b9      	ldr	r1, [pc, #740]	; (801a250 <problem_fetch+0x18f30>)
 8019f6a:	461a      	mov	r2, r3
 8019f6c:	460b      	mov	r3, r1
 8019f6e:	cb03      	ldmia	r3!, {r0, r1}
 8019f70:	6010      	str	r0, [r2, #0]
 8019f72:	6051      	str	r1, [r2, #4]
			p->moveSize = 7;
 8019f74:	687b      	ldr	r3, [r7, #4]
 8019f76:	2207      	movs	r2, #7
 8019f78:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"J,H,G,C,E,A,D");
 8019f7a:	687b      	ldr	r3, [r7, #4]
 8019f7c:	3340      	adds	r3, #64	; 0x40
 8019f7e:	4ab5      	ldr	r2, [pc, #724]	; (801a254 <problem_fetch+0x18f34>)
 8019f80:	461c      	mov	r4, r3
 8019f82:	4613      	mov	r3, r2
 8019f84:	cb07      	ldmia	r3!, {r0, r1, r2}
 8019f86:	6020      	str	r0, [r4, #0]
 8019f88:	6061      	str	r1, [r4, #4]
 8019f8a:	60a2      	str	r2, [r4, #8]
 8019f8c:	881b      	ldrh	r3, [r3, #0]
 8019f8e:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,8,9,8,12,14,18");
 8019f90:	687b      	ldr	r3, [r7, #4]
 8019f92:	3304      	adds	r3, #4
 8019f94:	4ab0      	ldr	r2, [pc, #704]	; (801a258 <problem_fetch+0x18f38>)
 8019f96:	461d      	mov	r5, r3
 8019f98:	4614      	mov	r4, r2
 8019f9a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8019f9c:	6028      	str	r0, [r5, #0]
 8019f9e:	6069      	str	r1, [r5, #4]
 8019fa0:	60aa      	str	r2, [r5, #8]
 8019fa2:	60eb      	str	r3, [r5, #12]
 8019fa4:	7823      	ldrb	r3, [r4, #0]
 8019fa6:	742b      	strb	r3, [r5, #16]
			strcpy(p->startFinish, "s,d,d,d,d,d,e");
 8019fa8:	687b      	ldr	r3, [r7, #4]
 8019faa:	33d8      	adds	r3, #216	; 0xd8
 8019fac:	4aab      	ldr	r2, [pc, #684]	; (801a25c <problem_fetch+0x18f3c>)
 8019fae:	461c      	mov	r4, r3
 8019fb0:	4613      	mov	r3, r2
 8019fb2:	cb07      	ldmia	r3!, {r0, r1, r2}
 8019fb4:	6020      	str	r0, [r4, #0]
 8019fb6:	6061      	str	r1, [r4, #4]
 8019fb8:	60a2      	str	r2, [r4, #8]
 8019fba:	881b      	ldrh	r3, [r3, #0]
 8019fbc:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade, "7A");
 8019fbe:	687b      	ldr	r3, [r7, #4]
 8019fc0:	33cc      	adds	r3, #204	; 0xcc
 8019fc2:	4aa7      	ldr	r2, [pc, #668]	; (801a260 <problem_fetch+0x18f40>)
 8019fc4:	8811      	ldrh	r1, [r2, #0]
 8019fc6:	7892      	ldrb	r2, [r2, #2]
 8019fc8:	8019      	strh	r1, [r3, #0]
 8019fca:	709a      	strb	r2, [r3, #2]
			break;
 8019fcc:	f000 beee 	b.w	801adac <problem_fetch+0x19a8c>
		case 8 :
			strcpy(p->name,"MAN WALKS DOWN THE STREET");
 8019fd0:	687b      	ldr	r3, [r7, #4]
 8019fd2:	337c      	adds	r3, #124	; 0x7c
 8019fd4:	4aa3      	ldr	r2, [pc, #652]	; (801a264 <problem_fetch+0x18f44>)
 8019fd6:	461d      	mov	r5, r3
 8019fd8:	4614      	mov	r4, r2
 8019fda:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8019fdc:	6028      	str	r0, [r5, #0]
 8019fde:	6069      	str	r1, [r5, #4]
 8019fe0:	60aa      	str	r2, [r5, #8]
 8019fe2:	60eb      	str	r3, [r5, #12]
 8019fe4:	cc03      	ldmia	r4!, {r0, r1}
 8019fe6:	6128      	str	r0, [r5, #16]
 8019fe8:	6169      	str	r1, [r5, #20]
 8019fea:	8823      	ldrh	r3, [r4, #0]
 8019fec:	832b      	strh	r3, [r5, #24]
			p->moveSize = 8;
 8019fee:	687b      	ldr	r3, [r7, #4]
 8019ff0:	2208      	movs	r2, #8
 8019ff2:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"E,H,E,B,E,B,E,A");
 8019ff4:	687b      	ldr	r3, [r7, #4]
 8019ff6:	3340      	adds	r3, #64	; 0x40
 8019ff8:	4a9b      	ldr	r2, [pc, #620]	; (801a268 <problem_fetch+0x18f48>)
 8019ffa:	461c      	mov	r4, r3
 8019ffc:	4615      	mov	r5, r2
 8019ffe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801a000:	6020      	str	r0, [r4, #0]
 801a002:	6061      	str	r1, [r4, #4]
 801a004:	60a2      	str	r2, [r4, #8]
 801a006:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"6,5,8,10,12,15,16,18");
 801a008:	687b      	ldr	r3, [r7, #4]
 801a00a:	3304      	adds	r3, #4
 801a00c:	4a97      	ldr	r2, [pc, #604]	; (801a26c <problem_fetch+0x18f4c>)
 801a00e:	461d      	mov	r5, r3
 801a010:	4614      	mov	r4, r2
 801a012:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801a014:	6028      	str	r0, [r5, #0]
 801a016:	6069      	str	r1, [r5, #4]
 801a018:	60aa      	str	r2, [r5, #8]
 801a01a:	60eb      	str	r3, [r5, #12]
 801a01c:	6820      	ldr	r0, [r4, #0]
 801a01e:	6128      	str	r0, [r5, #16]
 801a020:	7923      	ldrb	r3, [r4, #4]
 801a022:	752b      	strb	r3, [r5, #20]
			strcpy(p->startFinish, "s,s,d,d,d,d,d,e");
 801a024:	687b      	ldr	r3, [r7, #4]
 801a026:	33d8      	adds	r3, #216	; 0xd8
 801a028:	4a91      	ldr	r2, [pc, #580]	; (801a270 <problem_fetch+0x18f50>)
 801a02a:	461c      	mov	r4, r3
 801a02c:	4615      	mov	r5, r2
 801a02e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801a030:	6020      	str	r0, [r4, #0]
 801a032:	6061      	str	r1, [r4, #4]
 801a034:	60a2      	str	r2, [r4, #8]
 801a036:	60e3      	str	r3, [r4, #12]
			strcpy(p->grade, "6B+");
 801a038:	687b      	ldr	r3, [r7, #4]
 801a03a:	33cc      	adds	r3, #204	; 0xcc
 801a03c:	4a8d      	ldr	r2, [pc, #564]	; (801a274 <problem_fetch+0x18f54>)
 801a03e:	6810      	ldr	r0, [r2, #0]
 801a040:	6018      	str	r0, [r3, #0]
			break;
 801a042:	f000 beb3 	b.w	801adac <problem_fetch+0x19a8c>
		case 80 :
			strcpy(p->name,"MARYJANEFIGAROTTA");
 801a046:	687b      	ldr	r3, [r7, #4]
 801a048:	337c      	adds	r3, #124	; 0x7c
 801a04a:	4a8b      	ldr	r2, [pc, #556]	; (801a278 <problem_fetch+0x18f58>)
 801a04c:	461d      	mov	r5, r3
 801a04e:	4614      	mov	r4, r2
 801a050:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801a052:	6028      	str	r0, [r5, #0]
 801a054:	6069      	str	r1, [r5, #4]
 801a056:	60aa      	str	r2, [r5, #8]
 801a058:	60eb      	str	r3, [r5, #12]
 801a05a:	8823      	ldrh	r3, [r4, #0]
 801a05c:	822b      	strh	r3, [r5, #16]
			p->moveSize = 5;
 801a05e:	687b      	ldr	r3, [r7, #4]
 801a060:	2205      	movs	r2, #5
 801a062:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"E,H,H,I,I");
 801a064:	687b      	ldr	r3, [r7, #4]
 801a066:	3340      	adds	r3, #64	; 0x40
 801a068:	4984      	ldr	r1, [pc, #528]	; (801a27c <problem_fetch+0x18f5c>)
 801a06a:	461a      	mov	r2, r3
 801a06c:	460b      	mov	r3, r1
 801a06e:	cb03      	ldmia	r3!, {r0, r1}
 801a070:	6010      	str	r0, [r2, #0]
 801a072:	6051      	str	r1, [r2, #4]
 801a074:	881b      	ldrh	r3, [r3, #0]
 801a076:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"6,5,10,15,18");
 801a078:	687b      	ldr	r3, [r7, #4]
 801a07a:	3304      	adds	r3, #4
 801a07c:	4a80      	ldr	r2, [pc, #512]	; (801a280 <problem_fetch+0x18f60>)
 801a07e:	461c      	mov	r4, r3
 801a080:	4613      	mov	r3, r2
 801a082:	cb07      	ldmia	r3!, {r0, r1, r2}
 801a084:	6020      	str	r0, [r4, #0]
 801a086:	6061      	str	r1, [r4, #4]
 801a088:	60a2      	str	r2, [r4, #8]
 801a08a:	781b      	ldrb	r3, [r3, #0]
 801a08c:	7323      	strb	r3, [r4, #12]
			strcpy(p->startFinish, "s,s,d,d,e");
 801a08e:	687b      	ldr	r3, [r7, #4]
 801a090:	33d8      	adds	r3, #216	; 0xd8
 801a092:	497c      	ldr	r1, [pc, #496]	; (801a284 <problem_fetch+0x18f64>)
 801a094:	461a      	mov	r2, r3
 801a096:	460b      	mov	r3, r1
 801a098:	cb03      	ldmia	r3!, {r0, r1}
 801a09a:	6010      	str	r0, [r2, #0]
 801a09c:	6051      	str	r1, [r2, #4]
 801a09e:	881b      	ldrh	r3, [r3, #0]
 801a0a0:	8113      	strh	r3, [r2, #8]
			strcpy(p->grade, "7A+");
 801a0a2:	687b      	ldr	r3, [r7, #4]
 801a0a4:	33cc      	adds	r3, #204	; 0xcc
 801a0a6:	4a78      	ldr	r2, [pc, #480]	; (801a288 <problem_fetch+0x18f68>)
 801a0a8:	6810      	ldr	r0, [r2, #0]
 801a0aa:	6018      	str	r0, [r3, #0]
			break;
 801a0ac:	f000 be7e 	b.w	801adac <problem_fetch+0x19a8c>
		case 800 :
			strcpy(p->name,"PANTHER");
 801a0b0:	687b      	ldr	r3, [r7, #4]
 801a0b2:	337c      	adds	r3, #124	; 0x7c
 801a0b4:	4975      	ldr	r1, [pc, #468]	; (801a28c <problem_fetch+0x18f6c>)
 801a0b6:	461a      	mov	r2, r3
 801a0b8:	460b      	mov	r3, r1
 801a0ba:	cb03      	ldmia	r3!, {r0, r1}
 801a0bc:	6010      	str	r0, [r2, #0]
 801a0be:	6051      	str	r1, [r2, #4]
			p->moveSize = 4;
 801a0c0:	687b      	ldr	r3, [r7, #4]
 801a0c2:	2204      	movs	r2, #4
 801a0c4:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"E,G,G,I");
 801a0c6:	687b      	ldr	r3, [r7, #4]
 801a0c8:	3340      	adds	r3, #64	; 0x40
 801a0ca:	4971      	ldr	r1, [pc, #452]	; (801a290 <problem_fetch+0x18f70>)
 801a0cc:	461a      	mov	r2, r3
 801a0ce:	460b      	mov	r3, r1
 801a0d0:	cb03      	ldmia	r3!, {r0, r1}
 801a0d2:	6010      	str	r0, [r2, #0]
 801a0d4:	6051      	str	r1, [r2, #4]
			strcpy(p->moveNumbers,"6,10,14,18");
 801a0d6:	687b      	ldr	r3, [r7, #4]
 801a0d8:	3304      	adds	r3, #4
 801a0da:	496e      	ldr	r1, [pc, #440]	; (801a294 <problem_fetch+0x18f74>)
 801a0dc:	461a      	mov	r2, r3
 801a0de:	460b      	mov	r3, r1
 801a0e0:	cb03      	ldmia	r3!, {r0, r1}
 801a0e2:	6010      	str	r0, [r2, #0]
 801a0e4:	6051      	str	r1, [r2, #4]
 801a0e6:	8819      	ldrh	r1, [r3, #0]
 801a0e8:	789b      	ldrb	r3, [r3, #2]
 801a0ea:	8111      	strh	r1, [r2, #8]
 801a0ec:	7293      	strb	r3, [r2, #10]
			strcpy(p->startFinish, "s,d,d,e");
 801a0ee:	687b      	ldr	r3, [r7, #4]
 801a0f0:	33d8      	adds	r3, #216	; 0xd8
 801a0f2:	4969      	ldr	r1, [pc, #420]	; (801a298 <problem_fetch+0x18f78>)
 801a0f4:	461a      	mov	r2, r3
 801a0f6:	460b      	mov	r3, r1
 801a0f8:	cb03      	ldmia	r3!, {r0, r1}
 801a0fa:	6010      	str	r0, [r2, #0]
 801a0fc:	6051      	str	r1, [r2, #4]
			strcpy(p->grade, "7B+");
 801a0fe:	687b      	ldr	r3, [r7, #4]
 801a100:	33cc      	adds	r3, #204	; 0xcc
 801a102:	4a66      	ldr	r2, [pc, #408]	; (801a29c <problem_fetch+0x18f7c>)
 801a104:	6810      	ldr	r0, [r2, #0]
 801a106:	6018      	str	r0, [r3, #0]
			break;
 801a108:	f000 be50 	b.w	801adac <problem_fetch+0x19a8c>
		case 801 :
			strcpy(p->name,"1985-54");
 801a10c:	687b      	ldr	r3, [r7, #4]
 801a10e:	337c      	adds	r3, #124	; 0x7c
 801a110:	4963      	ldr	r1, [pc, #396]	; (801a2a0 <problem_fetch+0x18f80>)
 801a112:	461a      	mov	r2, r3
 801a114:	460b      	mov	r3, r1
 801a116:	cb03      	ldmia	r3!, {r0, r1}
 801a118:	6010      	str	r0, [r2, #0]
 801a11a:	6051      	str	r1, [r2, #4]
			p->moveSize = 8;
 801a11c:	687b      	ldr	r3, [r7, #4]
 801a11e:	2208      	movs	r2, #8
 801a120:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"E,H,I,H,J,G,H,D");
 801a122:	687b      	ldr	r3, [r7, #4]
 801a124:	3340      	adds	r3, #64	; 0x40
 801a126:	4a5f      	ldr	r2, [pc, #380]	; (801a2a4 <problem_fetch+0x18f84>)
 801a128:	461c      	mov	r4, r3
 801a12a:	4615      	mov	r5, r2
 801a12c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801a12e:	6020      	str	r0, [r4, #0]
 801a130:	6061      	str	r1, [r4, #4]
 801a132:	60a2      	str	r2, [r4, #8]
 801a134:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"6,5,10,10,13,15,16,18");
 801a136:	687b      	ldr	r3, [r7, #4]
 801a138:	3304      	adds	r3, #4
 801a13a:	4a5b      	ldr	r2, [pc, #364]	; (801a2a8 <problem_fetch+0x18f88>)
 801a13c:	461d      	mov	r5, r3
 801a13e:	4614      	mov	r4, r2
 801a140:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801a142:	6028      	str	r0, [r5, #0]
 801a144:	6069      	str	r1, [r5, #4]
 801a146:	60aa      	str	r2, [r5, #8]
 801a148:	60eb      	str	r3, [r5, #12]
 801a14a:	6820      	ldr	r0, [r4, #0]
 801a14c:	6128      	str	r0, [r5, #16]
 801a14e:	88a3      	ldrh	r3, [r4, #4]
 801a150:	82ab      	strh	r3, [r5, #20]
			strcpy(p->startFinish, "s,s,d,d,d,d,d,e");
 801a152:	687b      	ldr	r3, [r7, #4]
 801a154:	33d8      	adds	r3, #216	; 0xd8
 801a156:	4a46      	ldr	r2, [pc, #280]	; (801a270 <problem_fetch+0x18f50>)
 801a158:	461c      	mov	r4, r3
 801a15a:	4615      	mov	r5, r2
 801a15c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801a15e:	6020      	str	r0, [r4, #0]
 801a160:	6061      	str	r1, [r4, #4]
 801a162:	60a2      	str	r2, [r4, #8]
 801a164:	60e3      	str	r3, [r4, #12]
			strcpy(p->grade, "6B+");
 801a166:	687b      	ldr	r3, [r7, #4]
 801a168:	33cc      	adds	r3, #204	; 0xcc
 801a16a:	4a42      	ldr	r2, [pc, #264]	; (801a274 <problem_fetch+0x18f54>)
 801a16c:	6810      	ldr	r0, [r2, #0]
 801a16e:	6018      	str	r0, [r3, #0]
			break;
 801a170:	f000 be1c 	b.w	801adac <problem_fetch+0x19a8c>
		case 802 :
			strcpy(p->name,"TRIAL ‘N’ ERROR");
 801a174:	687b      	ldr	r3, [r7, #4]
 801a176:	337c      	adds	r3, #124	; 0x7c
 801a178:	4a4c      	ldr	r2, [pc, #304]	; (801a2ac <problem_fetch+0x18f8c>)
 801a17a:	461d      	mov	r5, r3
 801a17c:	4614      	mov	r4, r2
 801a17e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801a180:	6028      	str	r0, [r5, #0]
 801a182:	6069      	str	r1, [r5, #4]
 801a184:	60aa      	str	r2, [r5, #8]
 801a186:	60eb      	str	r3, [r5, #12]
 801a188:	6820      	ldr	r0, [r4, #0]
 801a18a:	6128      	str	r0, [r5, #16]
			p->moveSize = 7;
 801a18c:	687b      	ldr	r3, [r7, #4]
 801a18e:	2207      	movs	r2, #7
 801a190:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"G,B,E,G,E,J,D");
 801a192:	687b      	ldr	r3, [r7, #4]
 801a194:	3340      	adds	r3, #64	; 0x40
 801a196:	4a46      	ldr	r2, [pc, #280]	; (801a2b0 <problem_fetch+0x18f90>)
 801a198:	461c      	mov	r4, r3
 801a19a:	4613      	mov	r3, r2
 801a19c:	cb07      	ldmia	r3!, {r0, r1, r2}
 801a19e:	6020      	str	r0, [r4, #0]
 801a1a0:	6061      	str	r1, [r4, #4]
 801a1a2:	60a2      	str	r2, [r4, #8]
 801a1a4:	881b      	ldrh	r3, [r3, #0]
 801a1a6:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"6,6,9,10,14,16,18");
 801a1a8:	687b      	ldr	r3, [r7, #4]
 801a1aa:	3304      	adds	r3, #4
 801a1ac:	4a41      	ldr	r2, [pc, #260]	; (801a2b4 <problem_fetch+0x18f94>)
 801a1ae:	461d      	mov	r5, r3
 801a1b0:	4614      	mov	r4, r2
 801a1b2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801a1b4:	6028      	str	r0, [r5, #0]
 801a1b6:	6069      	str	r1, [r5, #4]
 801a1b8:	60aa      	str	r2, [r5, #8]
 801a1ba:	60eb      	str	r3, [r5, #12]
 801a1bc:	8823      	ldrh	r3, [r4, #0]
 801a1be:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish, "s,s,d,d,d,d,e");
 801a1c0:	687b      	ldr	r3, [r7, #4]
 801a1c2:	33d8      	adds	r3, #216	; 0xd8
 801a1c4:	4a3c      	ldr	r2, [pc, #240]	; (801a2b8 <problem_fetch+0x18f98>)
 801a1c6:	461c      	mov	r4, r3
 801a1c8:	4613      	mov	r3, r2
 801a1ca:	cb07      	ldmia	r3!, {r0, r1, r2}
 801a1cc:	6020      	str	r0, [r4, #0]
 801a1ce:	6061      	str	r1, [r4, #4]
 801a1d0:	60a2      	str	r2, [r4, #8]
 801a1d2:	881b      	ldrh	r3, [r3, #0]
 801a1d4:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade, "6C");
 801a1d6:	687b      	ldr	r3, [r7, #4]
 801a1d8:	33cc      	adds	r3, #204	; 0xcc
 801a1da:	4a38      	ldr	r2, [pc, #224]	; (801a2bc <problem_fetch+0x18f9c>)
 801a1dc:	8811      	ldrh	r1, [r2, #0]
 801a1de:	7892      	ldrb	r2, [r2, #2]
 801a1e0:	8019      	strh	r1, [r3, #0]
 801a1e2:	709a      	strb	r2, [r3, #2]
			break;
 801a1e4:	f000 bde2 	b.w	801adac <problem_fetch+0x19a8c>
		case 803 :
			strcpy(p->name,"BLACK PSYCHO");
 801a1e8:	687b      	ldr	r3, [r7, #4]
 801a1ea:	337c      	adds	r3, #124	; 0x7c
 801a1ec:	4a34      	ldr	r2, [pc, #208]	; (801a2c0 <problem_fetch+0x18fa0>)
 801a1ee:	461c      	mov	r4, r3
 801a1f0:	4613      	mov	r3, r2
 801a1f2:	cb07      	ldmia	r3!, {r0, r1, r2}
 801a1f4:	6020      	str	r0, [r4, #0]
 801a1f6:	6061      	str	r1, [r4, #4]
 801a1f8:	60a2      	str	r2, [r4, #8]
 801a1fa:	781b      	ldrb	r3, [r3, #0]
 801a1fc:	7323      	strb	r3, [r4, #12]
			p->moveSize = 6;
 801a1fe:	687b      	ldr	r3, [r7, #4]
 801a200:	2206      	movs	r2, #6
 801a202:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"G,C,H,D,G,D");
 801a204:	687b      	ldr	r3, [r7, #4]
 801a206:	3340      	adds	r3, #64	; 0x40
 801a208:	4a2e      	ldr	r2, [pc, #184]	; (801a2c4 <problem_fetch+0x18fa4>)
 801a20a:	461c      	mov	r4, r3
 801a20c:	4613      	mov	r3, r2
 801a20e:	cb07      	ldmia	r3!, {r0, r1, r2}
 801a210:	6020      	str	r0, [r4, #0]
 801a212:	6061      	str	r1, [r4, #4]
 801a214:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,5,8,11,14,18");
 801a216:	687b      	ldr	r3, [r7, #4]
 801a218:	3304      	adds	r3, #4
 801a21a:	4a2b      	ldr	r2, [pc, #172]	; (801a2c8 <problem_fetch+0x18fa8>)
 801a21c:	461c      	mov	r4, r3
 801a21e:	4613      	mov	r3, r2
 801a220:	cb07      	ldmia	r3!, {r0, r1, r2}
 801a222:	6020      	str	r0, [r4, #0]
 801a224:	6061      	str	r1, [r4, #4]
 801a226:	60a2      	str	r2, [r4, #8]
 801a228:	881a      	ldrh	r2, [r3, #0]
 801a22a:	789b      	ldrb	r3, [r3, #2]
 801a22c:	81a2      	strh	r2, [r4, #12]
 801a22e:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish, "s,s,d,d,d,e");
 801a230:	687b      	ldr	r3, [r7, #4]
 801a232:	33d8      	adds	r3, #216	; 0xd8
 801a234:	4a25      	ldr	r2, [pc, #148]	; (801a2cc <problem_fetch+0x18fac>)
 801a236:	461c      	mov	r4, r3
 801a238:	4613      	mov	r3, r2
 801a23a:	cb07      	ldmia	r3!, {r0, r1, r2}
 801a23c:	6020      	str	r0, [r4, #0]
 801a23e:	6061      	str	r1, [r4, #4]
 801a240:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade, "6C+");
 801a242:	687b      	ldr	r3, [r7, #4]
 801a244:	33cc      	adds	r3, #204	; 0xcc
 801a246:	4a22      	ldr	r2, [pc, #136]	; (801a2d0 <problem_fetch+0x18fb0>)
 801a248:	6810      	ldr	r0, [r2, #0]
 801a24a:	6018      	str	r0, [r3, #0]
			break;
 801a24c:	f000 bdae 	b.w	801adac <problem_fetch+0x19a8c>
 801a250:	0802a3c4 	.word	0x0802a3c4
 801a254:	0802a3cc 	.word	0x0802a3cc
 801a258:	0802a3dc 	.word	0x0802a3dc
 801a25c:	08021494 	.word	0x08021494
 801a260:	080212f4 	.word	0x080212f4
 801a264:	0802a3f0 	.word	0x0802a3f0
 801a268:	0802a40c 	.word	0x0802a40c
 801a26c:	0802a41c 	.word	0x0802a41c
 801a270:	080214cc 	.word	0x080214cc
 801a274:	080212b0 	.word	0x080212b0
 801a278:	0802a434 	.word	0x0802a434
 801a27c:	0802a448 	.word	0x0802a448
 801a280:	0802a454 	.word	0x0802a454
 801a284:	080221c8 	.word	0x080221c8
 801a288:	08021424 	.word	0x08021424
 801a28c:	0802a464 	.word	0x0802a464
 801a290:	08025ccc 	.word	0x08025ccc
 801a294:	08022690 	.word	0x08022690
 801a298:	08022028 	.word	0x08022028
 801a29c:	08021848 	.word	0x08021848
 801a2a0:	0802a46c 	.word	0x0802a46c
 801a2a4:	0802a474 	.word	0x0802a474
 801a2a8:	0802a484 	.word	0x0802a484
 801a2ac:	0802a49c 	.word	0x0802a49c
 801a2b0:	0802a4b0 	.word	0x0802a4b0
 801a2b4:	0802a4c0 	.word	0x0802a4c0
 801a2b8:	080212a0 	.word	0x080212a0
 801a2bc:	08021370 	.word	0x08021370
 801a2c0:	0802a4d4 	.word	0x0802a4d4
 801a2c4:	0802a4e4 	.word	0x0802a4e4
 801a2c8:	080292c4 	.word	0x080292c4
 801a2cc:	08021910 	.word	0x08021910
 801a2d0:	080213a8 	.word	0x080213a8
		case 804 :
			strcpy(p->name,"BATTLE OF THE PUDGE SHORT");
 801a2d4:	687b      	ldr	r3, [r7, #4]
 801a2d6:	337c      	adds	r3, #124	; 0x7c
 801a2d8:	4abc      	ldr	r2, [pc, #752]	; (801a5cc <problem_fetch+0x192ac>)
 801a2da:	461d      	mov	r5, r3
 801a2dc:	4614      	mov	r4, r2
 801a2de:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801a2e0:	6028      	str	r0, [r5, #0]
 801a2e2:	6069      	str	r1, [r5, #4]
 801a2e4:	60aa      	str	r2, [r5, #8]
 801a2e6:	60eb      	str	r3, [r5, #12]
 801a2e8:	cc03      	ldmia	r4!, {r0, r1}
 801a2ea:	6128      	str	r0, [r5, #16]
 801a2ec:	6169      	str	r1, [r5, #20]
 801a2ee:	8823      	ldrh	r3, [r4, #0]
 801a2f0:	832b      	strh	r3, [r5, #24]
			p->moveSize = 7;
 801a2f2:	687b      	ldr	r3, [r7, #4]
 801a2f4:	2207      	movs	r2, #7
 801a2f6:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"C,H,E,I,D,D,D");
 801a2f8:	687b      	ldr	r3, [r7, #4]
 801a2fa:	3340      	adds	r3, #64	; 0x40
 801a2fc:	4ab4      	ldr	r2, [pc, #720]	; (801a5d0 <problem_fetch+0x192b0>)
 801a2fe:	461c      	mov	r4, r3
 801a300:	4613      	mov	r3, r2
 801a302:	cb07      	ldmia	r3!, {r0, r1, r2}
 801a304:	6020      	str	r0, [r4, #0]
 801a306:	6061      	str	r1, [r4, #4]
 801a308:	60a2      	str	r2, [r4, #8]
 801a30a:	881b      	ldrh	r3, [r3, #0]
 801a30c:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,5,8,10,11,15,18");
 801a30e:	687b      	ldr	r3, [r7, #4]
 801a310:	3304      	adds	r3, #4
 801a312:	4ab0      	ldr	r2, [pc, #704]	; (801a5d4 <problem_fetch+0x192b4>)
 801a314:	461d      	mov	r5, r3
 801a316:	4614      	mov	r4, r2
 801a318:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801a31a:	6028      	str	r0, [r5, #0]
 801a31c:	6069      	str	r1, [r5, #4]
 801a31e:	60aa      	str	r2, [r5, #8]
 801a320:	60eb      	str	r3, [r5, #12]
 801a322:	8823      	ldrh	r3, [r4, #0]
 801a324:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish, "s,s,d,d,d,d,e");
 801a326:	687b      	ldr	r3, [r7, #4]
 801a328:	33d8      	adds	r3, #216	; 0xd8
 801a32a:	4aab      	ldr	r2, [pc, #684]	; (801a5d8 <problem_fetch+0x192b8>)
 801a32c:	461c      	mov	r4, r3
 801a32e:	4613      	mov	r3, r2
 801a330:	cb07      	ldmia	r3!, {r0, r1, r2}
 801a332:	6020      	str	r0, [r4, #0]
 801a334:	6061      	str	r1, [r4, #4]
 801a336:	60a2      	str	r2, [r4, #8]
 801a338:	881b      	ldrh	r3, [r3, #0]
 801a33a:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade, "7A");
 801a33c:	687b      	ldr	r3, [r7, #4]
 801a33e:	33cc      	adds	r3, #204	; 0xcc
 801a340:	4aa6      	ldr	r2, [pc, #664]	; (801a5dc <problem_fetch+0x192bc>)
 801a342:	8811      	ldrh	r1, [r2, #0]
 801a344:	7892      	ldrb	r2, [r2, #2]
 801a346:	8019      	strh	r1, [r3, #0]
 801a348:	709a      	strb	r2, [r3, #2]
			break;
 801a34a:	f000 bd2f 	b.w	801adac <problem_fetch+0x19a8c>
		case 805 :
			strcpy(p->name,"JINJA TEMPLATE 2");
 801a34e:	687b      	ldr	r3, [r7, #4]
 801a350:	337c      	adds	r3, #124	; 0x7c
 801a352:	4aa3      	ldr	r2, [pc, #652]	; (801a5e0 <problem_fetch+0x192c0>)
 801a354:	461d      	mov	r5, r3
 801a356:	4614      	mov	r4, r2
 801a358:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801a35a:	6028      	str	r0, [r5, #0]
 801a35c:	6069      	str	r1, [r5, #4]
 801a35e:	60aa      	str	r2, [r5, #8]
 801a360:	60eb      	str	r3, [r5, #12]
 801a362:	7823      	ldrb	r3, [r4, #0]
 801a364:	742b      	strb	r3, [r5, #16]
			p->moveSize = 7;
 801a366:	687b      	ldr	r3, [r7, #4]
 801a368:	2207      	movs	r2, #7
 801a36a:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"G,K,I,J,G,I,G");
 801a36c:	687b      	ldr	r3, [r7, #4]
 801a36e:	3340      	adds	r3, #64	; 0x40
 801a370:	4a9c      	ldr	r2, [pc, #624]	; (801a5e4 <problem_fetch+0x192c4>)
 801a372:	461c      	mov	r4, r3
 801a374:	4613      	mov	r3, r2
 801a376:	cb07      	ldmia	r3!, {r0, r1, r2}
 801a378:	6020      	str	r0, [r4, #0]
 801a37a:	6061      	str	r1, [r4, #4]
 801a37c:	60a2      	str	r2, [r4, #8]
 801a37e:	881b      	ldrh	r3, [r3, #0]
 801a380:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"6,9,9,13,14,18,4");
 801a382:	687b      	ldr	r3, [r7, #4]
 801a384:	3304      	adds	r3, #4
 801a386:	4a98      	ldr	r2, [pc, #608]	; (801a5e8 <problem_fetch+0x192c8>)
 801a388:	461d      	mov	r5, r3
 801a38a:	4614      	mov	r4, r2
 801a38c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801a38e:	6028      	str	r0, [r5, #0]
 801a390:	6069      	str	r1, [r5, #4]
 801a392:	60aa      	str	r2, [r5, #8]
 801a394:	60eb      	str	r3, [r5, #12]
 801a396:	7823      	ldrb	r3, [r4, #0]
 801a398:	742b      	strb	r3, [r5, #16]
			strcpy(p->startFinish, "s,d,d,d,d,e,s");
 801a39a:	687b      	ldr	r3, [r7, #4]
 801a39c:	33d8      	adds	r3, #216	; 0xd8
 801a39e:	4a93      	ldr	r2, [pc, #588]	; (801a5ec <problem_fetch+0x192cc>)
 801a3a0:	461c      	mov	r4, r3
 801a3a2:	4613      	mov	r3, r2
 801a3a4:	cb07      	ldmia	r3!, {r0, r1, r2}
 801a3a6:	6020      	str	r0, [r4, #0]
 801a3a8:	6061      	str	r1, [r4, #4]
 801a3aa:	60a2      	str	r2, [r4, #8]
 801a3ac:	881b      	ldrh	r3, [r3, #0]
 801a3ae:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade, "6B+");
 801a3b0:	687b      	ldr	r3, [r7, #4]
 801a3b2:	33cc      	adds	r3, #204	; 0xcc
 801a3b4:	4a8e      	ldr	r2, [pc, #568]	; (801a5f0 <problem_fetch+0x192d0>)
 801a3b6:	6810      	ldr	r0, [r2, #0]
 801a3b8:	6018      	str	r0, [r3, #0]
			break;
 801a3ba:	f000 bcf7 	b.w	801adac <problem_fetch+0x19a8c>
		case 806 :
			strcpy(p->name,"JUMPBUG");
 801a3be:	687b      	ldr	r3, [r7, #4]
 801a3c0:	337c      	adds	r3, #124	; 0x7c
 801a3c2:	498c      	ldr	r1, [pc, #560]	; (801a5f4 <problem_fetch+0x192d4>)
 801a3c4:	461a      	mov	r2, r3
 801a3c6:	460b      	mov	r3, r1
 801a3c8:	cb03      	ldmia	r3!, {r0, r1}
 801a3ca:	6010      	str	r0, [r2, #0]
 801a3cc:	6051      	str	r1, [r2, #4]
			p->moveSize = 6;
 801a3ce:	687b      	ldr	r3, [r7, #4]
 801a3d0:	2206      	movs	r2, #6
 801a3d2:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"E,J,H,F,C,D");
 801a3d4:	687b      	ldr	r3, [r7, #4]
 801a3d6:	3340      	adds	r3, #64	; 0x40
 801a3d8:	4a87      	ldr	r2, [pc, #540]	; (801a5f8 <problem_fetch+0x192d8>)
 801a3da:	461c      	mov	r4, r3
 801a3dc:	4613      	mov	r3, r2
 801a3de:	cb07      	ldmia	r3!, {r0, r1, r2}
 801a3e0:	6020      	str	r0, [r4, #0]
 801a3e2:	6061      	str	r1, [r4, #4]
 801a3e4:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"6,5,10,11,13,18");
 801a3e6:	687b      	ldr	r3, [r7, #4]
 801a3e8:	3304      	adds	r3, #4
 801a3ea:	4a84      	ldr	r2, [pc, #528]	; (801a5fc <problem_fetch+0x192dc>)
 801a3ec:	461c      	mov	r4, r3
 801a3ee:	4615      	mov	r5, r2
 801a3f0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801a3f2:	6020      	str	r0, [r4, #0]
 801a3f4:	6061      	str	r1, [r4, #4]
 801a3f6:	60a2      	str	r2, [r4, #8]
 801a3f8:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish, "s,s,d,d,d,e");
 801a3fa:	687b      	ldr	r3, [r7, #4]
 801a3fc:	33d8      	adds	r3, #216	; 0xd8
 801a3fe:	4a80      	ldr	r2, [pc, #512]	; (801a600 <problem_fetch+0x192e0>)
 801a400:	461c      	mov	r4, r3
 801a402:	4613      	mov	r3, r2
 801a404:	cb07      	ldmia	r3!, {r0, r1, r2}
 801a406:	6020      	str	r0, [r4, #0]
 801a408:	6061      	str	r1, [r4, #4]
 801a40a:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade, "7A");
 801a40c:	687b      	ldr	r3, [r7, #4]
 801a40e:	33cc      	adds	r3, #204	; 0xcc
 801a410:	4a72      	ldr	r2, [pc, #456]	; (801a5dc <problem_fetch+0x192bc>)
 801a412:	8811      	ldrh	r1, [r2, #0]
 801a414:	7892      	ldrb	r2, [r2, #2]
 801a416:	8019      	strh	r1, [r3, #0]
 801a418:	709a      	strb	r2, [r3, #2]
			break;
 801a41a:	f000 bcc7 	b.w	801adac <problem_fetch+0x19a8c>
		case 81 :
			strcpy(p->name,"WARM UP A1");
 801a41e:	687b      	ldr	r3, [r7, #4]
 801a420:	337c      	adds	r3, #124	; 0x7c
 801a422:	4978      	ldr	r1, [pc, #480]	; (801a604 <problem_fetch+0x192e4>)
 801a424:	461a      	mov	r2, r3
 801a426:	460b      	mov	r3, r1
 801a428:	cb03      	ldmia	r3!, {r0, r1}
 801a42a:	6010      	str	r0, [r2, #0]
 801a42c:	6051      	str	r1, [r2, #4]
 801a42e:	8819      	ldrh	r1, [r3, #0]
 801a430:	789b      	ldrb	r3, [r3, #2]
 801a432:	8111      	strh	r1, [r2, #8]
 801a434:	7293      	strb	r3, [r2, #10]
			p->moveSize = 6;
 801a436:	687b      	ldr	r3, [r7, #4]
 801a438:	2206      	movs	r2, #6
 801a43a:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"G,H,E,F,D,D");
 801a43c:	687b      	ldr	r3, [r7, #4]
 801a43e:	3340      	adds	r3, #64	; 0x40
 801a440:	4a71      	ldr	r2, [pc, #452]	; (801a608 <problem_fetch+0x192e8>)
 801a442:	461c      	mov	r4, r3
 801a444:	4613      	mov	r3, r2
 801a446:	cb07      	ldmia	r3!, {r0, r1, r2}
 801a448:	6020      	str	r0, [r4, #0]
 801a44a:	6061      	str	r1, [r4, #4]
 801a44c:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,8,8,11,15,18");
 801a44e:	687b      	ldr	r3, [r7, #4]
 801a450:	3304      	adds	r3, #4
 801a452:	4a6e      	ldr	r2, [pc, #440]	; (801a60c <problem_fetch+0x192ec>)
 801a454:	461c      	mov	r4, r3
 801a456:	4613      	mov	r3, r2
 801a458:	cb07      	ldmia	r3!, {r0, r1, r2}
 801a45a:	6020      	str	r0, [r4, #0]
 801a45c:	6061      	str	r1, [r4, #4]
 801a45e:	60a2      	str	r2, [r4, #8]
 801a460:	881a      	ldrh	r2, [r3, #0]
 801a462:	789b      	ldrb	r3, [r3, #2]
 801a464:	81a2      	strh	r2, [r4, #12]
 801a466:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish, "s,d,d,d,d,e");
 801a468:	687b      	ldr	r3, [r7, #4]
 801a46a:	33d8      	adds	r3, #216	; 0xd8
 801a46c:	4a68      	ldr	r2, [pc, #416]	; (801a610 <problem_fetch+0x192f0>)
 801a46e:	461c      	mov	r4, r3
 801a470:	4613      	mov	r3, r2
 801a472:	cb07      	ldmia	r3!, {r0, r1, r2}
 801a474:	6020      	str	r0, [r4, #0]
 801a476:	6061      	str	r1, [r4, #4]
 801a478:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade, "6B+");
 801a47a:	687b      	ldr	r3, [r7, #4]
 801a47c:	33cc      	adds	r3, #204	; 0xcc
 801a47e:	4a5c      	ldr	r2, [pc, #368]	; (801a5f0 <problem_fetch+0x192d0>)
 801a480:	6810      	ldr	r0, [r2, #0]
 801a482:	6018      	str	r0, [r3, #0]
			break;
 801a484:	f000 bc92 	b.w	801adac <problem_fetch+0x19a8c>
		case 82 :
			strcpy(p->name,"WARM UP A2");
 801a488:	687b      	ldr	r3, [r7, #4]
 801a48a:	337c      	adds	r3, #124	; 0x7c
 801a48c:	4961      	ldr	r1, [pc, #388]	; (801a614 <problem_fetch+0x192f4>)
 801a48e:	461a      	mov	r2, r3
 801a490:	460b      	mov	r3, r1
 801a492:	cb03      	ldmia	r3!, {r0, r1}
 801a494:	6010      	str	r0, [r2, #0]
 801a496:	6051      	str	r1, [r2, #4]
 801a498:	8819      	ldrh	r1, [r3, #0]
 801a49a:	789b      	ldrb	r3, [r3, #2]
 801a49c:	8111      	strh	r1, [r2, #8]
 801a49e:	7293      	strb	r3, [r2, #10]
			p->moveSize = 7;
 801a4a0:	687b      	ldr	r3, [r7, #4]
 801a4a2:	2207      	movs	r2, #7
 801a4a4:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"J,G,G,E,D,I,A");
 801a4a6:	687b      	ldr	r3, [r7, #4]
 801a4a8:	3340      	adds	r3, #64	; 0x40
 801a4aa:	4a5b      	ldr	r2, [pc, #364]	; (801a618 <problem_fetch+0x192f8>)
 801a4ac:	461c      	mov	r4, r3
 801a4ae:	4613      	mov	r3, r2
 801a4b0:	cb07      	ldmia	r3!, {r0, r1, r2}
 801a4b2:	6020      	str	r0, [r4, #0]
 801a4b4:	6061      	str	r1, [r4, #4]
 801a4b6:	60a2      	str	r2, [r4, #8]
 801a4b8:	881b      	ldrh	r3, [r3, #0]
 801a4ba:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,6,9,12,15,7,18");
 801a4bc:	687b      	ldr	r3, [r7, #4]
 801a4be:	3304      	adds	r3, #4
 801a4c0:	4a56      	ldr	r2, [pc, #344]	; (801a61c <problem_fetch+0x192fc>)
 801a4c2:	461d      	mov	r5, r3
 801a4c4:	4614      	mov	r4, r2
 801a4c6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801a4c8:	6028      	str	r0, [r5, #0]
 801a4ca:	6069      	str	r1, [r5, #4]
 801a4cc:	60aa      	str	r2, [r5, #8]
 801a4ce:	60eb      	str	r3, [r5, #12]
 801a4d0:	7823      	ldrb	r3, [r4, #0]
 801a4d2:	742b      	strb	r3, [r5, #16]
			strcpy(p->startFinish, "s,s,d,d,d,d,e");
 801a4d4:	687b      	ldr	r3, [r7, #4]
 801a4d6:	33d8      	adds	r3, #216	; 0xd8
 801a4d8:	4a3f      	ldr	r2, [pc, #252]	; (801a5d8 <problem_fetch+0x192b8>)
 801a4da:	461c      	mov	r4, r3
 801a4dc:	4613      	mov	r3, r2
 801a4de:	cb07      	ldmia	r3!, {r0, r1, r2}
 801a4e0:	6020      	str	r0, [r4, #0]
 801a4e2:	6061      	str	r1, [r4, #4]
 801a4e4:	60a2      	str	r2, [r4, #8]
 801a4e6:	881b      	ldrh	r3, [r3, #0]
 801a4e8:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade, "6B+");
 801a4ea:	687b      	ldr	r3, [r7, #4]
 801a4ec:	33cc      	adds	r3, #204	; 0xcc
 801a4ee:	4a40      	ldr	r2, [pc, #256]	; (801a5f0 <problem_fetch+0x192d0>)
 801a4f0:	6810      	ldr	r0, [r2, #0]
 801a4f2:	6018      	str	r0, [r3, #0]
			break;
 801a4f4:	f000 bc5a 	b.w	801adac <problem_fetch+0x19a8c>
		case 83 :
			strcpy(p->name,"WARM UP A3");
 801a4f8:	687b      	ldr	r3, [r7, #4]
 801a4fa:	337c      	adds	r3, #124	; 0x7c
 801a4fc:	4948      	ldr	r1, [pc, #288]	; (801a620 <problem_fetch+0x19300>)
 801a4fe:	461a      	mov	r2, r3
 801a500:	460b      	mov	r3, r1
 801a502:	cb03      	ldmia	r3!, {r0, r1}
 801a504:	6010      	str	r0, [r2, #0]
 801a506:	6051      	str	r1, [r2, #4]
 801a508:	8819      	ldrh	r1, [r3, #0]
 801a50a:	789b      	ldrb	r3, [r3, #2]
 801a50c:	8111      	strh	r1, [r2, #8]
 801a50e:	7293      	strb	r3, [r2, #10]
			p->moveSize = 6;
 801a510:	687b      	ldr	r3, [r7, #4]
 801a512:	2206      	movs	r2, #6
 801a514:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"G,J,H,G,I,I");
 801a516:	687b      	ldr	r3, [r7, #4]
 801a518:	3340      	adds	r3, #64	; 0x40
 801a51a:	4a42      	ldr	r2, [pc, #264]	; (801a624 <problem_fetch+0x19304>)
 801a51c:	461c      	mov	r4, r3
 801a51e:	4613      	mov	r3, r2
 801a520:	cb07      	ldmia	r3!, {r0, r1, r2}
 801a522:	6020      	str	r0, [r4, #0]
 801a524:	6061      	str	r1, [r4, #4]
 801a526:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"6,5,10,14,14,18");
 801a528:	687b      	ldr	r3, [r7, #4]
 801a52a:	3304      	adds	r3, #4
 801a52c:	4a3e      	ldr	r2, [pc, #248]	; (801a628 <problem_fetch+0x19308>)
 801a52e:	461c      	mov	r4, r3
 801a530:	4615      	mov	r5, r2
 801a532:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801a534:	6020      	str	r0, [r4, #0]
 801a536:	6061      	str	r1, [r4, #4]
 801a538:	60a2      	str	r2, [r4, #8]
 801a53a:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish, "s,s,d,d,d,e");
 801a53c:	687b      	ldr	r3, [r7, #4]
 801a53e:	33d8      	adds	r3, #216	; 0xd8
 801a540:	4a2f      	ldr	r2, [pc, #188]	; (801a600 <problem_fetch+0x192e0>)
 801a542:	461c      	mov	r4, r3
 801a544:	4613      	mov	r3, r2
 801a546:	cb07      	ldmia	r3!, {r0, r1, r2}
 801a548:	6020      	str	r0, [r4, #0]
 801a54a:	6061      	str	r1, [r4, #4]
 801a54c:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade, "6B+");
 801a54e:	687b      	ldr	r3, [r7, #4]
 801a550:	33cc      	adds	r3, #204	; 0xcc
 801a552:	4a27      	ldr	r2, [pc, #156]	; (801a5f0 <problem_fetch+0x192d0>)
 801a554:	6810      	ldr	r0, [r2, #0]
 801a556:	6018      	str	r0, [r3, #0]
			break;
 801a558:	f000 bc28 	b.w	801adac <problem_fetch+0x19a8c>
		case 84 :
			strcpy(p->name,"WARM UP A5");
 801a55c:	687b      	ldr	r3, [r7, #4]
 801a55e:	337c      	adds	r3, #124	; 0x7c
 801a560:	4932      	ldr	r1, [pc, #200]	; (801a62c <problem_fetch+0x1930c>)
 801a562:	461a      	mov	r2, r3
 801a564:	460b      	mov	r3, r1
 801a566:	cb03      	ldmia	r3!, {r0, r1}
 801a568:	6010      	str	r0, [r2, #0]
 801a56a:	6051      	str	r1, [r2, #4]
 801a56c:	8819      	ldrh	r1, [r3, #0]
 801a56e:	789b      	ldrb	r3, [r3, #2]
 801a570:	8111      	strh	r1, [r2, #8]
 801a572:	7293      	strb	r3, [r2, #10]
			p->moveSize = 7;
 801a574:	687b      	ldr	r3, [r7, #4]
 801a576:	2207      	movs	r2, #7
 801a578:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"B,E,E,F,E,H,I");
 801a57a:	687b      	ldr	r3, [r7, #4]
 801a57c:	3340      	adds	r3, #64	; 0x40
 801a57e:	4a2c      	ldr	r2, [pc, #176]	; (801a630 <problem_fetch+0x19310>)
 801a580:	461c      	mov	r4, r3
 801a582:	4613      	mov	r3, r2
 801a584:	cb07      	ldmia	r3!, {r0, r1, r2}
 801a586:	6020      	str	r0, [r4, #0]
 801a588:	6061      	str	r1, [r4, #4]
 801a58a:	60a2      	str	r2, [r4, #8]
 801a58c:	881b      	ldrh	r3, [r3, #0]
 801a58e:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"6,6,8,11,14,16,18");
 801a590:	687b      	ldr	r3, [r7, #4]
 801a592:	3304      	adds	r3, #4
 801a594:	4a27      	ldr	r2, [pc, #156]	; (801a634 <problem_fetch+0x19314>)
 801a596:	461d      	mov	r5, r3
 801a598:	4614      	mov	r4, r2
 801a59a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801a59c:	6028      	str	r0, [r5, #0]
 801a59e:	6069      	str	r1, [r5, #4]
 801a5a0:	60aa      	str	r2, [r5, #8]
 801a5a2:	60eb      	str	r3, [r5, #12]
 801a5a4:	8823      	ldrh	r3, [r4, #0]
 801a5a6:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish, "s,s,d,d,d,d,e");
 801a5a8:	687b      	ldr	r3, [r7, #4]
 801a5aa:	33d8      	adds	r3, #216	; 0xd8
 801a5ac:	4a0a      	ldr	r2, [pc, #40]	; (801a5d8 <problem_fetch+0x192b8>)
 801a5ae:	461c      	mov	r4, r3
 801a5b0:	4613      	mov	r3, r2
 801a5b2:	cb07      	ldmia	r3!, {r0, r1, r2}
 801a5b4:	6020      	str	r0, [r4, #0]
 801a5b6:	6061      	str	r1, [r4, #4]
 801a5b8:	60a2      	str	r2, [r4, #8]
 801a5ba:	881b      	ldrh	r3, [r3, #0]
 801a5bc:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade, "6B+");
 801a5be:	687b      	ldr	r3, [r7, #4]
 801a5c0:	33cc      	adds	r3, #204	; 0xcc
 801a5c2:	4a0b      	ldr	r2, [pc, #44]	; (801a5f0 <problem_fetch+0x192d0>)
 801a5c4:	6810      	ldr	r0, [r2, #0]
 801a5c6:	6018      	str	r0, [r3, #0]
			break;
 801a5c8:	e3f0      	b.n	801adac <problem_fetch+0x19a8c>
 801a5ca:	bf00      	nop
 801a5cc:	0802a4f0 	.word	0x0802a4f0
 801a5d0:	0802a50c 	.word	0x0802a50c
 801a5d4:	0802a51c 	.word	0x0802a51c
 801a5d8:	080212a0 	.word	0x080212a0
 801a5dc:	080212f4 	.word	0x080212f4
 801a5e0:	0802a530 	.word	0x0802a530
 801a5e4:	0802a544 	.word	0x0802a544
 801a5e8:	0802a554 	.word	0x0802a554
 801a5ec:	0802a568 	.word	0x0802a568
 801a5f0:	080212b0 	.word	0x080212b0
 801a5f4:	0802a578 	.word	0x0802a578
 801a5f8:	0802a580 	.word	0x0802a580
 801a5fc:	0802a58c 	.word	0x0802a58c
 801a600:	08021910 	.word	0x08021910
 801a604:	0802a59c 	.word	0x0802a59c
 801a608:	0802a5a8 	.word	0x0802a5a8
 801a60c:	0802a5b4 	.word	0x0802a5b4
 801a610:	0802139c 	.word	0x0802139c
 801a614:	0802a5c4 	.word	0x0802a5c4
 801a618:	0802a5d0 	.word	0x0802a5d0
 801a61c:	0802a5e0 	.word	0x0802a5e0
 801a620:	0802a5f4 	.word	0x0802a5f4
 801a624:	0802a600 	.word	0x0802a600
 801a628:	0802a60c 	.word	0x0802a60c
 801a62c:	0802a61c 	.word	0x0802a61c
 801a630:	0802a628 	.word	0x0802a628
 801a634:	08029f14 	.word	0x08029f14
		case 85 :
			strcpy(p->name,"KEEP YOUR FEET DRY");
 801a638:	687b      	ldr	r3, [r7, #4]
 801a63a:	337c      	adds	r3, #124	; 0x7c
 801a63c:	4aba      	ldr	r2, [pc, #744]	; (801a928 <problem_fetch+0x19608>)
 801a63e:	461d      	mov	r5, r3
 801a640:	4614      	mov	r4, r2
 801a642:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801a644:	6028      	str	r0, [r5, #0]
 801a646:	6069      	str	r1, [r5, #4]
 801a648:	60aa      	str	r2, [r5, #8]
 801a64a:	60eb      	str	r3, [r5, #12]
 801a64c:	8823      	ldrh	r3, [r4, #0]
 801a64e:	78a2      	ldrb	r2, [r4, #2]
 801a650:	822b      	strh	r3, [r5, #16]
 801a652:	4613      	mov	r3, r2
 801a654:	74ab      	strb	r3, [r5, #18]
			p->moveSize = 6;
 801a656:	687b      	ldr	r3, [r7, #4]
 801a658:	2206      	movs	r2, #6
 801a65a:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"C,H,G,D,D,D");
 801a65c:	687b      	ldr	r3, [r7, #4]
 801a65e:	3340      	adds	r3, #64	; 0x40
 801a660:	4ab2      	ldr	r2, [pc, #712]	; (801a92c <problem_fetch+0x1960c>)
 801a662:	461c      	mov	r4, r3
 801a664:	4613      	mov	r3, r2
 801a666:	cb07      	ldmia	r3!, {r0, r1, r2}
 801a668:	6020      	str	r0, [r4, #0]
 801a66a:	6061      	str	r1, [r4, #4]
 801a66c:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,5,9,11,15,18");
 801a66e:	687b      	ldr	r3, [r7, #4]
 801a670:	3304      	adds	r3, #4
 801a672:	4aaf      	ldr	r2, [pc, #700]	; (801a930 <problem_fetch+0x19610>)
 801a674:	461c      	mov	r4, r3
 801a676:	4613      	mov	r3, r2
 801a678:	cb07      	ldmia	r3!, {r0, r1, r2}
 801a67a:	6020      	str	r0, [r4, #0]
 801a67c:	6061      	str	r1, [r4, #4]
 801a67e:	60a2      	str	r2, [r4, #8]
 801a680:	881a      	ldrh	r2, [r3, #0]
 801a682:	789b      	ldrb	r3, [r3, #2]
 801a684:	81a2      	strh	r2, [r4, #12]
 801a686:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish, "s,s,d,d,d,e");
 801a688:	687b      	ldr	r3, [r7, #4]
 801a68a:	33d8      	adds	r3, #216	; 0xd8
 801a68c:	4aa9      	ldr	r2, [pc, #676]	; (801a934 <problem_fetch+0x19614>)
 801a68e:	461c      	mov	r4, r3
 801a690:	4613      	mov	r3, r2
 801a692:	cb07      	ldmia	r3!, {r0, r1, r2}
 801a694:	6020      	str	r0, [r4, #0]
 801a696:	6061      	str	r1, [r4, #4]
 801a698:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade, "6B+");
 801a69a:	687b      	ldr	r3, [r7, #4]
 801a69c:	33cc      	adds	r3, #204	; 0xcc
 801a69e:	4aa6      	ldr	r2, [pc, #664]	; (801a938 <problem_fetch+0x19618>)
 801a6a0:	6810      	ldr	r0, [r2, #0]
 801a6a2:	6018      	str	r0, [r3, #0]
			break;
 801a6a4:	e382      	b.n	801adac <problem_fetch+0x19a8c>
		case 86 :
			strcpy(p->name,"POMPOUS POMPADOUR");
 801a6a6:	687b      	ldr	r3, [r7, #4]
 801a6a8:	337c      	adds	r3, #124	; 0x7c
 801a6aa:	4aa4      	ldr	r2, [pc, #656]	; (801a93c <problem_fetch+0x1961c>)
 801a6ac:	461d      	mov	r5, r3
 801a6ae:	4614      	mov	r4, r2
 801a6b0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801a6b2:	6028      	str	r0, [r5, #0]
 801a6b4:	6069      	str	r1, [r5, #4]
 801a6b6:	60aa      	str	r2, [r5, #8]
 801a6b8:	60eb      	str	r3, [r5, #12]
 801a6ba:	8823      	ldrh	r3, [r4, #0]
 801a6bc:	822b      	strh	r3, [r5, #16]
			p->moveSize = 6;
 801a6be:	687b      	ldr	r3, [r7, #4]
 801a6c0:	2206      	movs	r2, #6
 801a6c2:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"G,E,G,C,E,A");
 801a6c4:	687b      	ldr	r3, [r7, #4]
 801a6c6:	3340      	adds	r3, #64	; 0x40
 801a6c8:	4a9d      	ldr	r2, [pc, #628]	; (801a940 <problem_fetch+0x19620>)
 801a6ca:	461c      	mov	r4, r3
 801a6cc:	4613      	mov	r3, r2
 801a6ce:	cb07      	ldmia	r3!, {r0, r1, r2}
 801a6d0:	6020      	str	r0, [r4, #0]
 801a6d2:	6061      	str	r1, [r4, #4]
 801a6d4:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,8,10,13,16,18");
 801a6d6:	687b      	ldr	r3, [r7, #4]
 801a6d8:	3304      	adds	r3, #4
 801a6da:	4a9a      	ldr	r2, [pc, #616]	; (801a944 <problem_fetch+0x19624>)
 801a6dc:	461c      	mov	r4, r3
 801a6de:	4615      	mov	r5, r2
 801a6e0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801a6e2:	6020      	str	r0, [r4, #0]
 801a6e4:	6061      	str	r1, [r4, #4]
 801a6e6:	60a2      	str	r2, [r4, #8]
 801a6e8:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish, "s,d,d,d,d,e");
 801a6ea:	687b      	ldr	r3, [r7, #4]
 801a6ec:	33d8      	adds	r3, #216	; 0xd8
 801a6ee:	4a96      	ldr	r2, [pc, #600]	; (801a948 <problem_fetch+0x19628>)
 801a6f0:	461c      	mov	r4, r3
 801a6f2:	4613      	mov	r3, r2
 801a6f4:	cb07      	ldmia	r3!, {r0, r1, r2}
 801a6f6:	6020      	str	r0, [r4, #0]
 801a6f8:	6061      	str	r1, [r4, #4]
 801a6fa:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade, "6C");
 801a6fc:	687b      	ldr	r3, [r7, #4]
 801a6fe:	33cc      	adds	r3, #204	; 0xcc
 801a700:	4a92      	ldr	r2, [pc, #584]	; (801a94c <problem_fetch+0x1962c>)
 801a702:	8811      	ldrh	r1, [r2, #0]
 801a704:	7892      	ldrb	r2, [r2, #2]
 801a706:	8019      	strh	r1, [r3, #0]
 801a708:	709a      	strb	r2, [r3, #2]
			break;
 801a70a:	e34f      	b.n	801adac <problem_fetch+0x19a8c>
		case 87 :
			strcpy(p->name,"RUSTY MORNING");
 801a70c:	687b      	ldr	r3, [r7, #4]
 801a70e:	337c      	adds	r3, #124	; 0x7c
 801a710:	4a8f      	ldr	r2, [pc, #572]	; (801a950 <problem_fetch+0x19630>)
 801a712:	461c      	mov	r4, r3
 801a714:	4613      	mov	r3, r2
 801a716:	cb07      	ldmia	r3!, {r0, r1, r2}
 801a718:	6020      	str	r0, [r4, #0]
 801a71a:	6061      	str	r1, [r4, #4]
 801a71c:	60a2      	str	r2, [r4, #8]
 801a71e:	881b      	ldrh	r3, [r3, #0]
 801a720:	81a3      	strh	r3, [r4, #12]
			p->moveSize = 9;
 801a722:	687b      	ldr	r3, [r7, #4]
 801a724:	2209      	movs	r2, #9
 801a726:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"C,E,E,I,H,I,E,E,A");
 801a728:	687b      	ldr	r3, [r7, #4]
 801a72a:	3340      	adds	r3, #64	; 0x40
 801a72c:	4a89      	ldr	r2, [pc, #548]	; (801a954 <problem_fetch+0x19634>)
 801a72e:	461d      	mov	r5, r3
 801a730:	4614      	mov	r4, r2
 801a732:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801a734:	6028      	str	r0, [r5, #0]
 801a736:	6069      	str	r1, [r5, #4]
 801a738:	60aa      	str	r2, [r5, #8]
 801a73a:	60eb      	str	r3, [r5, #12]
 801a73c:	8823      	ldrh	r3, [r4, #0]
 801a73e:	822b      	strh	r3, [r5, #16]
			strcpy(p->moveNumbers,"5,6,8,10,12,14,14,16,18");
 801a740:	687b      	ldr	r3, [r7, #4]
 801a742:	3304      	adds	r3, #4
 801a744:	4a84      	ldr	r2, [pc, #528]	; (801a958 <problem_fetch+0x19638>)
 801a746:	461d      	mov	r5, r3
 801a748:	4614      	mov	r4, r2
 801a74a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801a74c:	6028      	str	r0, [r5, #0]
 801a74e:	6069      	str	r1, [r5, #4]
 801a750:	60aa      	str	r2, [r5, #8]
 801a752:	60eb      	str	r3, [r5, #12]
 801a754:	cc03      	ldmia	r4!, {r0, r1}
 801a756:	6128      	str	r0, [r5, #16]
 801a758:	6169      	str	r1, [r5, #20]
			strcpy(p->startFinish, "s,s,d,d,d,d,d,d,e");
 801a75a:	687b      	ldr	r3, [r7, #4]
 801a75c:	33d8      	adds	r3, #216	; 0xd8
 801a75e:	4a7f      	ldr	r2, [pc, #508]	; (801a95c <problem_fetch+0x1963c>)
 801a760:	461d      	mov	r5, r3
 801a762:	4614      	mov	r4, r2
 801a764:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801a766:	6028      	str	r0, [r5, #0]
 801a768:	6069      	str	r1, [r5, #4]
 801a76a:	60aa      	str	r2, [r5, #8]
 801a76c:	60eb      	str	r3, [r5, #12]
 801a76e:	8823      	ldrh	r3, [r4, #0]
 801a770:	822b      	strh	r3, [r5, #16]
			strcpy(p->grade, "6B+");
 801a772:	687b      	ldr	r3, [r7, #4]
 801a774:	33cc      	adds	r3, #204	; 0xcc
 801a776:	4a70      	ldr	r2, [pc, #448]	; (801a938 <problem_fetch+0x19618>)
 801a778:	6810      	ldr	r0, [r2, #0]
 801a77a:	6018      	str	r0, [r3, #0]
			break;
 801a77c:	e316      	b.n	801adac <problem_fetch+0x19a8c>
		case 88 :
			strcpy(p->name,"MY IDEA ?");
 801a77e:	687b      	ldr	r3, [r7, #4]
 801a780:	337c      	adds	r3, #124	; 0x7c
 801a782:	4977      	ldr	r1, [pc, #476]	; (801a960 <problem_fetch+0x19640>)
 801a784:	461a      	mov	r2, r3
 801a786:	460b      	mov	r3, r1
 801a788:	cb03      	ldmia	r3!, {r0, r1}
 801a78a:	6010      	str	r0, [r2, #0]
 801a78c:	6051      	str	r1, [r2, #4]
 801a78e:	881b      	ldrh	r3, [r3, #0]
 801a790:	8113      	strh	r3, [r2, #8]
			p->moveSize = 7;
 801a792:	687b      	ldr	r3, [r7, #4]
 801a794:	2207      	movs	r2, #7
 801a796:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"E,G,C,H,C,C,A");
 801a798:	687b      	ldr	r3, [r7, #4]
 801a79a:	3340      	adds	r3, #64	; 0x40
 801a79c:	4a71      	ldr	r2, [pc, #452]	; (801a964 <problem_fetch+0x19644>)
 801a79e:	461c      	mov	r4, r3
 801a7a0:	4613      	mov	r3, r2
 801a7a2:	cb07      	ldmia	r3!, {r0, r1, r2}
 801a7a4:	6020      	str	r0, [r4, #0]
 801a7a6:	6061      	str	r1, [r4, #4]
 801a7a8:	60a2      	str	r2, [r4, #8]
 801a7aa:	881b      	ldrh	r3, [r3, #0]
 801a7ac:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"6,6,8,10,13,16,18");
 801a7ae:	687b      	ldr	r3, [r7, #4]
 801a7b0:	3304      	adds	r3, #4
 801a7b2:	4a6d      	ldr	r2, [pc, #436]	; (801a968 <problem_fetch+0x19648>)
 801a7b4:	461d      	mov	r5, r3
 801a7b6:	4614      	mov	r4, r2
 801a7b8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801a7ba:	6028      	str	r0, [r5, #0]
 801a7bc:	6069      	str	r1, [r5, #4]
 801a7be:	60aa      	str	r2, [r5, #8]
 801a7c0:	60eb      	str	r3, [r5, #12]
 801a7c2:	8823      	ldrh	r3, [r4, #0]
 801a7c4:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish, "s,s,d,d,d,d,e");
 801a7c6:	687b      	ldr	r3, [r7, #4]
 801a7c8:	33d8      	adds	r3, #216	; 0xd8
 801a7ca:	4a68      	ldr	r2, [pc, #416]	; (801a96c <problem_fetch+0x1964c>)
 801a7cc:	461c      	mov	r4, r3
 801a7ce:	4613      	mov	r3, r2
 801a7d0:	cb07      	ldmia	r3!, {r0, r1, r2}
 801a7d2:	6020      	str	r0, [r4, #0]
 801a7d4:	6061      	str	r1, [r4, #4]
 801a7d6:	60a2      	str	r2, [r4, #8]
 801a7d8:	881b      	ldrh	r3, [r3, #0]
 801a7da:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade, "6C");
 801a7dc:	687b      	ldr	r3, [r7, #4]
 801a7de:	33cc      	adds	r3, #204	; 0xcc
 801a7e0:	4a5a      	ldr	r2, [pc, #360]	; (801a94c <problem_fetch+0x1962c>)
 801a7e2:	8811      	ldrh	r1, [r2, #0]
 801a7e4:	7892      	ldrb	r2, [r2, #2]
 801a7e6:	8019      	strh	r1, [r3, #0]
 801a7e8:	709a      	strb	r2, [r3, #2]
			break;
 801a7ea:	e2df      	b.n	801adac <problem_fetch+0x19a8c>
		case 89 :
			strcpy(p->name,"SANTOKU SNATCH");
 801a7ec:	687b      	ldr	r3, [r7, #4]
 801a7ee:	337c      	adds	r3, #124	; 0x7c
 801a7f0:	4a5f      	ldr	r2, [pc, #380]	; (801a970 <problem_fetch+0x19650>)
 801a7f2:	461c      	mov	r4, r3
 801a7f4:	4613      	mov	r3, r2
 801a7f6:	cb07      	ldmia	r3!, {r0, r1, r2}
 801a7f8:	6020      	str	r0, [r4, #0]
 801a7fa:	6061      	str	r1, [r4, #4]
 801a7fc:	60a2      	str	r2, [r4, #8]
 801a7fe:	881a      	ldrh	r2, [r3, #0]
 801a800:	789b      	ldrb	r3, [r3, #2]
 801a802:	81a2      	strh	r2, [r4, #12]
 801a804:	73a3      	strb	r3, [r4, #14]
			p->moveSize = 7;
 801a806:	687b      	ldr	r3, [r7, #4]
 801a808:	2207      	movs	r2, #7
 801a80a:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"H,H,C,F,F,J,I");
 801a80c:	687b      	ldr	r3, [r7, #4]
 801a80e:	3340      	adds	r3, #64	; 0x40
 801a810:	4a58      	ldr	r2, [pc, #352]	; (801a974 <problem_fetch+0x19654>)
 801a812:	461c      	mov	r4, r3
 801a814:	4613      	mov	r3, r2
 801a816:	cb07      	ldmia	r3!, {r0, r1, r2}
 801a818:	6020      	str	r0, [r4, #0]
 801a81a:	6061      	str	r1, [r4, #4]
 801a81c:	60a2      	str	r2, [r4, #8]
 801a81e:	881b      	ldrh	r3, [r3, #0]
 801a820:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,8,8,11,13,16,18");
 801a822:	687b      	ldr	r3, [r7, #4]
 801a824:	3304      	adds	r3, #4
 801a826:	4a54      	ldr	r2, [pc, #336]	; (801a978 <problem_fetch+0x19658>)
 801a828:	461d      	mov	r5, r3
 801a82a:	4614      	mov	r4, r2
 801a82c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801a82e:	6028      	str	r0, [r5, #0]
 801a830:	6069      	str	r1, [r5, #4]
 801a832:	60aa      	str	r2, [r5, #8]
 801a834:	60eb      	str	r3, [r5, #12]
 801a836:	8823      	ldrh	r3, [r4, #0]
 801a838:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish, "s,d,d,d,d,d,e");
 801a83a:	687b      	ldr	r3, [r7, #4]
 801a83c:	33d8      	adds	r3, #216	; 0xd8
 801a83e:	4a4f      	ldr	r2, [pc, #316]	; (801a97c <problem_fetch+0x1965c>)
 801a840:	461c      	mov	r4, r3
 801a842:	4613      	mov	r3, r2
 801a844:	cb07      	ldmia	r3!, {r0, r1, r2}
 801a846:	6020      	str	r0, [r4, #0]
 801a848:	6061      	str	r1, [r4, #4]
 801a84a:	60a2      	str	r2, [r4, #8]
 801a84c:	881b      	ldrh	r3, [r3, #0]
 801a84e:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade, "7A+");
 801a850:	687b      	ldr	r3, [r7, #4]
 801a852:	33cc      	adds	r3, #204	; 0xcc
 801a854:	4a4a      	ldr	r2, [pc, #296]	; (801a980 <problem_fetch+0x19660>)
 801a856:	6810      	ldr	r0, [r2, #0]
 801a858:	6018      	str	r0, [r3, #0]
			break;
 801a85a:	e2a7      	b.n	801adac <problem_fetch+0x19a8c>
		case 9 :
			strcpy(p->name,"GUNTER");
 801a85c:	687b      	ldr	r3, [r7, #4]
 801a85e:	337c      	adds	r3, #124	; 0x7c
 801a860:	4a48      	ldr	r2, [pc, #288]	; (801a984 <problem_fetch+0x19664>)
 801a862:	6810      	ldr	r0, [r2, #0]
 801a864:	6018      	str	r0, [r3, #0]
 801a866:	8891      	ldrh	r1, [r2, #4]
 801a868:	7992      	ldrb	r2, [r2, #6]
 801a86a:	8099      	strh	r1, [r3, #4]
 801a86c:	719a      	strb	r2, [r3, #6]
			p->moveSize = 6;
 801a86e:	687b      	ldr	r3, [r7, #4]
 801a870:	2206      	movs	r2, #6
 801a872:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"J,K,H,E,B,D");
 801a874:	687b      	ldr	r3, [r7, #4]
 801a876:	3340      	adds	r3, #64	; 0x40
 801a878:	4a43      	ldr	r2, [pc, #268]	; (801a988 <problem_fetch+0x19668>)
 801a87a:	461c      	mov	r4, r3
 801a87c:	4613      	mov	r3, r2
 801a87e:	cb07      	ldmia	r3!, {r0, r1, r2}
 801a880:	6020      	str	r0, [r4, #0]
 801a882:	6061      	str	r1, [r4, #4]
 801a884:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,9,10,12,15,18");
 801a886:	687b      	ldr	r3, [r7, #4]
 801a888:	3304      	adds	r3, #4
 801a88a:	4a40      	ldr	r2, [pc, #256]	; (801a98c <problem_fetch+0x1966c>)
 801a88c:	461c      	mov	r4, r3
 801a88e:	4615      	mov	r5, r2
 801a890:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801a892:	6020      	str	r0, [r4, #0]
 801a894:	6061      	str	r1, [r4, #4]
 801a896:	60a2      	str	r2, [r4, #8]
 801a898:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish, "s,d,d,d,d,e");
 801a89a:	687b      	ldr	r3, [r7, #4]
 801a89c:	33d8      	adds	r3, #216	; 0xd8
 801a89e:	4a2a      	ldr	r2, [pc, #168]	; (801a948 <problem_fetch+0x19628>)
 801a8a0:	461c      	mov	r4, r3
 801a8a2:	4613      	mov	r3, r2
 801a8a4:	cb07      	ldmia	r3!, {r0, r1, r2}
 801a8a6:	6020      	str	r0, [r4, #0]
 801a8a8:	6061      	str	r1, [r4, #4]
 801a8aa:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade, "7A");
 801a8ac:	687b      	ldr	r3, [r7, #4]
 801a8ae:	33cc      	adds	r3, #204	; 0xcc
 801a8b0:	4a37      	ldr	r2, [pc, #220]	; (801a990 <problem_fetch+0x19670>)
 801a8b2:	8811      	ldrh	r1, [r2, #0]
 801a8b4:	7892      	ldrb	r2, [r2, #2]
 801a8b6:	8019      	strh	r1, [r3, #0]
 801a8b8:	709a      	strb	r2, [r3, #2]
			break;
 801a8ba:	e277      	b.n	801adac <problem_fetch+0x19a8c>
		case 90 :
			strcpy(p->name,"THE SENDTRAIN");
 801a8bc:	687b      	ldr	r3, [r7, #4]
 801a8be:	337c      	adds	r3, #124	; 0x7c
 801a8c0:	4a34      	ldr	r2, [pc, #208]	; (801a994 <problem_fetch+0x19674>)
 801a8c2:	461c      	mov	r4, r3
 801a8c4:	4613      	mov	r3, r2
 801a8c6:	cb07      	ldmia	r3!, {r0, r1, r2}
 801a8c8:	6020      	str	r0, [r4, #0]
 801a8ca:	6061      	str	r1, [r4, #4]
 801a8cc:	60a2      	str	r2, [r4, #8]
 801a8ce:	881b      	ldrh	r3, [r3, #0]
 801a8d0:	81a3      	strh	r3, [r4, #12]
			p->moveSize = 8;
 801a8d2:	687b      	ldr	r3, [r7, #4]
 801a8d4:	2208      	movs	r2, #8
 801a8d6:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"E,G,G,G,G,I,I,J");
 801a8d8:	687b      	ldr	r3, [r7, #4]
 801a8da:	3340      	adds	r3, #64	; 0x40
 801a8dc:	4a2e      	ldr	r2, [pc, #184]	; (801a998 <problem_fetch+0x19678>)
 801a8de:	461c      	mov	r4, r3
 801a8e0:	4615      	mov	r5, r2
 801a8e2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801a8e4:	6020      	str	r0, [r4, #0]
 801a8e6:	6061      	str	r1, [r4, #4]
 801a8e8:	60a2      	str	r2, [r4, #8]
 801a8ea:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"12,4,6,9,15,14,18,7");
 801a8ec:	687b      	ldr	r3, [r7, #4]
 801a8ee:	3304      	adds	r3, #4
 801a8f0:	4a2a      	ldr	r2, [pc, #168]	; (801a99c <problem_fetch+0x1967c>)
 801a8f2:	461d      	mov	r5, r3
 801a8f4:	4614      	mov	r4, r2
 801a8f6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801a8f8:	6028      	str	r0, [r5, #0]
 801a8fa:	6069      	str	r1, [r5, #4]
 801a8fc:	60aa      	str	r2, [r5, #8]
 801a8fe:	60eb      	str	r3, [r5, #12]
 801a900:	6820      	ldr	r0, [r4, #0]
 801a902:	6128      	str	r0, [r5, #16]
			strcpy(p->startFinish, "d,s,d,d,d,d,e,d");
 801a904:	687b      	ldr	r3, [r7, #4]
 801a906:	33d8      	adds	r3, #216	; 0xd8
 801a908:	4a25      	ldr	r2, [pc, #148]	; (801a9a0 <problem_fetch+0x19680>)
 801a90a:	461c      	mov	r4, r3
 801a90c:	4615      	mov	r5, r2
 801a90e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801a910:	6020      	str	r0, [r4, #0]
 801a912:	6061      	str	r1, [r4, #4]
 801a914:	60a2      	str	r2, [r4, #8]
 801a916:	60e3      	str	r3, [r4, #12]
			strcpy(p->grade, "6C");
 801a918:	687b      	ldr	r3, [r7, #4]
 801a91a:	33cc      	adds	r3, #204	; 0xcc
 801a91c:	4a0b      	ldr	r2, [pc, #44]	; (801a94c <problem_fetch+0x1962c>)
 801a91e:	8811      	ldrh	r1, [r2, #0]
 801a920:	7892      	ldrb	r2, [r2, #2]
 801a922:	8019      	strh	r1, [r3, #0]
 801a924:	709a      	strb	r2, [r3, #2]
			break;
 801a926:	e241      	b.n	801adac <problem_fetch+0x19a8c>
 801a928:	0802a638 	.word	0x0802a638
 801a92c:	0802a64c 	.word	0x0802a64c
 801a930:	0802a658 	.word	0x0802a658
 801a934:	08021910 	.word	0x08021910
 801a938:	080212b0 	.word	0x080212b0
 801a93c:	0802a668 	.word	0x0802a668
 801a940:	0802a67c 	.word	0x0802a67c
 801a944:	08025ee0 	.word	0x08025ee0
 801a948:	0802139c 	.word	0x0802139c
 801a94c:	08021370 	.word	0x08021370
 801a950:	0802a688 	.word	0x0802a688
 801a954:	0802a698 	.word	0x0802a698
 801a958:	080259e8 	.word	0x080259e8
 801a95c:	0802187c 	.word	0x0802187c
 801a960:	0802a6ac 	.word	0x0802a6ac
 801a964:	0802a6b8 	.word	0x0802a6b8
 801a968:	0802a6c8 	.word	0x0802a6c8
 801a96c:	080212a0 	.word	0x080212a0
 801a970:	0802a6dc 	.word	0x0802a6dc
 801a974:	0802a6ec 	.word	0x0802a6ec
 801a978:	080243dc 	.word	0x080243dc
 801a97c:	08021494 	.word	0x08021494
 801a980:	08021424 	.word	0x08021424
 801a984:	0802a6fc 	.word	0x0802a6fc
 801a988:	0802a704 	.word	0x0802a704
 801a98c:	0802a710 	.word	0x0802a710
 801a990:	080212f4 	.word	0x080212f4
 801a994:	0802a720 	.word	0x0802a720
 801a998:	0802a730 	.word	0x0802a730
 801a99c:	0802a740 	.word	0x0802a740
 801a9a0:	0802a754 	.word	0x0802a754
		case 91 :
			strcpy(p->name,"5 FINGER DISCOUNT");
 801a9a4:	687b      	ldr	r3, [r7, #4]
 801a9a6:	337c      	adds	r3, #124	; 0x7c
 801a9a8:	4aaf      	ldr	r2, [pc, #700]	; (801ac68 <problem_fetch+0x19948>)
 801a9aa:	461d      	mov	r5, r3
 801a9ac:	4614      	mov	r4, r2
 801a9ae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801a9b0:	6028      	str	r0, [r5, #0]
 801a9b2:	6069      	str	r1, [r5, #4]
 801a9b4:	60aa      	str	r2, [r5, #8]
 801a9b6:	60eb      	str	r3, [r5, #12]
 801a9b8:	8823      	ldrh	r3, [r4, #0]
 801a9ba:	822b      	strh	r3, [r5, #16]
			p->moveSize = 8;
 801a9bc:	687b      	ldr	r3, [r7, #4]
 801a9be:	2208      	movs	r2, #8
 801a9c0:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"A,A,B,D,E,E,E,G");
 801a9c2:	687b      	ldr	r3, [r7, #4]
 801a9c4:	3340      	adds	r3, #64	; 0x40
 801a9c6:	4aa9      	ldr	r2, [pc, #676]	; (801ac6c <problem_fetch+0x1994c>)
 801a9c8:	461c      	mov	r4, r3
 801a9ca:	4615      	mov	r5, r2
 801a9cc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801a9ce:	6020      	str	r0, [r4, #0]
 801a9d0:	6061      	str	r1, [r4, #4]
 801a9d2:	60a2      	str	r2, [r4, #8]
 801a9d4:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"9,14,12,18,6,8,14,4");
 801a9d6:	687b      	ldr	r3, [r7, #4]
 801a9d8:	3304      	adds	r3, #4
 801a9da:	4aa5      	ldr	r2, [pc, #660]	; (801ac70 <problem_fetch+0x19950>)
 801a9dc:	461d      	mov	r5, r3
 801a9de:	4614      	mov	r4, r2
 801a9e0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801a9e2:	6028      	str	r0, [r5, #0]
 801a9e4:	6069      	str	r1, [r5, #4]
 801a9e6:	60aa      	str	r2, [r5, #8]
 801a9e8:	60eb      	str	r3, [r5, #12]
 801a9ea:	6820      	ldr	r0, [r4, #0]
 801a9ec:	6128      	str	r0, [r5, #16]
			strcpy(p->startFinish, "d,d,d,e,d,d,d,s");
 801a9ee:	687b      	ldr	r3, [r7, #4]
 801a9f0:	33d8      	adds	r3, #216	; 0xd8
 801a9f2:	4aa0      	ldr	r2, [pc, #640]	; (801ac74 <problem_fetch+0x19954>)
 801a9f4:	461c      	mov	r4, r3
 801a9f6:	4615      	mov	r5, r2
 801a9f8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801a9fa:	6020      	str	r0, [r4, #0]
 801a9fc:	6061      	str	r1, [r4, #4]
 801a9fe:	60a2      	str	r2, [r4, #8]
 801aa00:	60e3      	str	r3, [r4, #12]
			strcpy(p->grade, "7A+");
 801aa02:	687b      	ldr	r3, [r7, #4]
 801aa04:	33cc      	adds	r3, #204	; 0xcc
 801aa06:	4a9c      	ldr	r2, [pc, #624]	; (801ac78 <problem_fetch+0x19958>)
 801aa08:	6810      	ldr	r0, [r2, #0]
 801aa0a:	6018      	str	r0, [r3, #0]
			break;
 801aa0c:	e1ce      	b.n	801adac <problem_fetch+0x19a8c>
		case 92 :
			strcpy(p->name,"3/5TH A MAN");
 801aa0e:	687b      	ldr	r3, [r7, #4]
 801aa10:	337c      	adds	r3, #124	; 0x7c
 801aa12:	4a9a      	ldr	r2, [pc, #616]	; (801ac7c <problem_fetch+0x1995c>)
 801aa14:	461c      	mov	r4, r3
 801aa16:	4613      	mov	r3, r2
 801aa18:	cb07      	ldmia	r3!, {r0, r1, r2}
 801aa1a:	6020      	str	r0, [r4, #0]
 801aa1c:	6061      	str	r1, [r4, #4]
 801aa1e:	60a2      	str	r2, [r4, #8]
			p->moveSize = 7;
 801aa20:	687b      	ldr	r3, [r7, #4]
 801aa22:	2207      	movs	r2, #7
 801aa24:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"J,H,K,E,I,H,I");
 801aa26:	687b      	ldr	r3, [r7, #4]
 801aa28:	3340      	adds	r3, #64	; 0x40
 801aa2a:	4a95      	ldr	r2, [pc, #596]	; (801ac80 <problem_fetch+0x19960>)
 801aa2c:	461c      	mov	r4, r3
 801aa2e:	4613      	mov	r3, r2
 801aa30:	cb07      	ldmia	r3!, {r0, r1, r2}
 801aa32:	6020      	str	r0, [r4, #0]
 801aa34:	6061      	str	r1, [r4, #4]
 801aa36:	60a2      	str	r2, [r4, #8]
 801aa38:	881b      	ldrh	r3, [r3, #0]
 801aa3a:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,12,14,8,9,16,18");
 801aa3c:	687b      	ldr	r3, [r7, #4]
 801aa3e:	3304      	adds	r3, #4
 801aa40:	4a90      	ldr	r2, [pc, #576]	; (801ac84 <problem_fetch+0x19964>)
 801aa42:	461d      	mov	r5, r3
 801aa44:	4614      	mov	r4, r2
 801aa46:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801aa48:	6028      	str	r0, [r5, #0]
 801aa4a:	6069      	str	r1, [r5, #4]
 801aa4c:	60aa      	str	r2, [r5, #8]
 801aa4e:	60eb      	str	r3, [r5, #12]
 801aa50:	8823      	ldrh	r3, [r4, #0]
 801aa52:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish, "s,d,d,d,d,d,e");
 801aa54:	687b      	ldr	r3, [r7, #4]
 801aa56:	33d8      	adds	r3, #216	; 0xd8
 801aa58:	4a8b      	ldr	r2, [pc, #556]	; (801ac88 <problem_fetch+0x19968>)
 801aa5a:	461c      	mov	r4, r3
 801aa5c:	4613      	mov	r3, r2
 801aa5e:	cb07      	ldmia	r3!, {r0, r1, r2}
 801aa60:	6020      	str	r0, [r4, #0]
 801aa62:	6061      	str	r1, [r4, #4]
 801aa64:	60a2      	str	r2, [r4, #8]
 801aa66:	881b      	ldrh	r3, [r3, #0]
 801aa68:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade, "7A+");
 801aa6a:	687b      	ldr	r3, [r7, #4]
 801aa6c:	33cc      	adds	r3, #204	; 0xcc
 801aa6e:	4a82      	ldr	r2, [pc, #520]	; (801ac78 <problem_fetch+0x19958>)
 801aa70:	6810      	ldr	r0, [r2, #0]
 801aa72:	6018      	str	r0, [r3, #0]
			break;
 801aa74:	e19a      	b.n	801adac <problem_fetch+0x19a8c>
		case 93 :
			strcpy(p->name,"DESTINY'S GRANDMA");
 801aa76:	687b      	ldr	r3, [r7, #4]
 801aa78:	337c      	adds	r3, #124	; 0x7c
 801aa7a:	4a84      	ldr	r2, [pc, #528]	; (801ac8c <problem_fetch+0x1996c>)
 801aa7c:	461d      	mov	r5, r3
 801aa7e:	4614      	mov	r4, r2
 801aa80:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801aa82:	6028      	str	r0, [r5, #0]
 801aa84:	6069      	str	r1, [r5, #4]
 801aa86:	60aa      	str	r2, [r5, #8]
 801aa88:	60eb      	str	r3, [r5, #12]
 801aa8a:	8823      	ldrh	r3, [r4, #0]
 801aa8c:	822b      	strh	r3, [r5, #16]
			p->moveSize = 8;
 801aa8e:	687b      	ldr	r3, [r7, #4]
 801aa90:	2208      	movs	r2, #8
 801aa92:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"G,J,G,H,G,I,G,I");
 801aa94:	687b      	ldr	r3, [r7, #4]
 801aa96:	3340      	adds	r3, #64	; 0x40
 801aa98:	4a7d      	ldr	r2, [pc, #500]	; (801ac90 <problem_fetch+0x19970>)
 801aa9a:	461c      	mov	r4, r3
 801aa9c:	4615      	mov	r5, r2
 801aa9e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801aaa0:	6020      	str	r0, [r4, #0]
 801aaa2:	6061      	str	r1, [r4, #4]
 801aaa4:	60a2      	str	r2, [r4, #8]
 801aaa6:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,7,9,10,14,14,17,18");
 801aaa8:	687b      	ldr	r3, [r7, #4]
 801aaaa:	3304      	adds	r3, #4
 801aaac:	4a79      	ldr	r2, [pc, #484]	; (801ac94 <problem_fetch+0x19974>)
 801aaae:	461d      	mov	r5, r3
 801aab0:	4614      	mov	r4, r2
 801aab2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801aab4:	6028      	str	r0, [r5, #0]
 801aab6:	6069      	str	r1, [r5, #4]
 801aab8:	60aa      	str	r2, [r5, #8]
 801aaba:	60eb      	str	r3, [r5, #12]
 801aabc:	6820      	ldr	r0, [r4, #0]
 801aabe:	6128      	str	r0, [r5, #16]
 801aac0:	7923      	ldrb	r3, [r4, #4]
 801aac2:	752b      	strb	r3, [r5, #20]
			strcpy(p->startFinish, "s,d,d,d,d,d,d,e");
 801aac4:	687b      	ldr	r3, [r7, #4]
 801aac6:	33d8      	adds	r3, #216	; 0xd8
 801aac8:	4a73      	ldr	r2, [pc, #460]	; (801ac98 <problem_fetch+0x19978>)
 801aaca:	461c      	mov	r4, r3
 801aacc:	4615      	mov	r5, r2
 801aace:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801aad0:	6020      	str	r0, [r4, #0]
 801aad2:	6061      	str	r1, [r4, #4]
 801aad4:	60a2      	str	r2, [r4, #8]
 801aad6:	60e3      	str	r3, [r4, #12]
			strcpy(p->grade, "6B+");
 801aad8:	687b      	ldr	r3, [r7, #4]
 801aada:	33cc      	adds	r3, #204	; 0xcc
 801aadc:	4a6f      	ldr	r2, [pc, #444]	; (801ac9c <problem_fetch+0x1997c>)
 801aade:	6810      	ldr	r0, [r2, #0]
 801aae0:	6018      	str	r0, [r3, #0]
			break;
 801aae2:	e163      	b.n	801adac <problem_fetch+0x19a8c>
		case 94 :
			strcpy(p->name,"NORTHSIDE");
 801aae4:	687b      	ldr	r3, [r7, #4]
 801aae6:	337c      	adds	r3, #124	; 0x7c
 801aae8:	496d      	ldr	r1, [pc, #436]	; (801aca0 <problem_fetch+0x19980>)
 801aaea:	461a      	mov	r2, r3
 801aaec:	460b      	mov	r3, r1
 801aaee:	cb03      	ldmia	r3!, {r0, r1}
 801aaf0:	6010      	str	r0, [r2, #0]
 801aaf2:	6051      	str	r1, [r2, #4]
 801aaf4:	881b      	ldrh	r3, [r3, #0]
 801aaf6:	8113      	strh	r3, [r2, #8]
			p->moveSize = 6;
 801aaf8:	687b      	ldr	r3, [r7, #4]
 801aafa:	2206      	movs	r2, #6
 801aafc:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"B,D,E,E,H,J");
 801aafe:	687b      	ldr	r3, [r7, #4]
 801ab00:	3340      	adds	r3, #64	; 0x40
 801ab02:	4a68      	ldr	r2, [pc, #416]	; (801aca4 <problem_fetch+0x19984>)
 801ab04:	461c      	mov	r4, r3
 801ab06:	4613      	mov	r3, r2
 801ab08:	cb07      	ldmia	r3!, {r0, r1, r2}
 801ab0a:	6020      	str	r0, [r4, #0]
 801ab0c:	6061      	str	r1, [r4, #4]
 801ab0e:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"15,18,8,12,5,5");
 801ab10:	687b      	ldr	r3, [r7, #4]
 801ab12:	3304      	adds	r3, #4
 801ab14:	4a64      	ldr	r2, [pc, #400]	; (801aca8 <problem_fetch+0x19988>)
 801ab16:	461c      	mov	r4, r3
 801ab18:	4613      	mov	r3, r2
 801ab1a:	cb07      	ldmia	r3!, {r0, r1, r2}
 801ab1c:	6020      	str	r0, [r4, #0]
 801ab1e:	6061      	str	r1, [r4, #4]
 801ab20:	60a2      	str	r2, [r4, #8]
 801ab22:	881a      	ldrh	r2, [r3, #0]
 801ab24:	789b      	ldrb	r3, [r3, #2]
 801ab26:	81a2      	strh	r2, [r4, #12]
 801ab28:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish, "d,e,d,d,s,s");
 801ab2a:	687b      	ldr	r3, [r7, #4]
 801ab2c:	33d8      	adds	r3, #216	; 0xd8
 801ab2e:	4a5f      	ldr	r2, [pc, #380]	; (801acac <problem_fetch+0x1998c>)
 801ab30:	461c      	mov	r4, r3
 801ab32:	4613      	mov	r3, r2
 801ab34:	cb07      	ldmia	r3!, {r0, r1, r2}
 801ab36:	6020      	str	r0, [r4, #0]
 801ab38:	6061      	str	r1, [r4, #4]
 801ab3a:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade, "7A");
 801ab3c:	687b      	ldr	r3, [r7, #4]
 801ab3e:	33cc      	adds	r3, #204	; 0xcc
 801ab40:	4a5b      	ldr	r2, [pc, #364]	; (801acb0 <problem_fetch+0x19990>)
 801ab42:	8811      	ldrh	r1, [r2, #0]
 801ab44:	7892      	ldrb	r2, [r2, #2]
 801ab46:	8019      	strh	r1, [r3, #0]
 801ab48:	709a      	strb	r2, [r3, #2]
			break;
 801ab4a:	e12f      	b.n	801adac <problem_fetch+0x19a8c>
		case 95 :
			strcpy(p->name,"SWIMMING GOAT");
 801ab4c:	687b      	ldr	r3, [r7, #4]
 801ab4e:	337c      	adds	r3, #124	; 0x7c
 801ab50:	4a58      	ldr	r2, [pc, #352]	; (801acb4 <problem_fetch+0x19994>)
 801ab52:	461c      	mov	r4, r3
 801ab54:	4613      	mov	r3, r2
 801ab56:	cb07      	ldmia	r3!, {r0, r1, r2}
 801ab58:	6020      	str	r0, [r4, #0]
 801ab5a:	6061      	str	r1, [r4, #4]
 801ab5c:	60a2      	str	r2, [r4, #8]
 801ab5e:	881b      	ldrh	r3, [r3, #0]
 801ab60:	81a3      	strh	r3, [r4, #12]
			p->moveSize = 6;
 801ab62:	687b      	ldr	r3, [r7, #4]
 801ab64:	2206      	movs	r2, #6
 801ab66:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"G,H,C,I,I,D");
 801ab68:	687b      	ldr	r3, [r7, #4]
 801ab6a:	3340      	adds	r3, #64	; 0x40
 801ab6c:	4a52      	ldr	r2, [pc, #328]	; (801acb8 <problem_fetch+0x19998>)
 801ab6e:	461c      	mov	r4, r3
 801ab70:	4613      	mov	r3, r2
 801ab72:	cb07      	ldmia	r3!, {r0, r1, r2}
 801ab74:	6020      	str	r0, [r4, #0]
 801ab76:	6061      	str	r1, [r4, #4]
 801ab78:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,10,13,14,7,18");
 801ab7a:	687b      	ldr	r3, [r7, #4]
 801ab7c:	3304      	adds	r3, #4
 801ab7e:	4a4f      	ldr	r2, [pc, #316]	; (801acbc <problem_fetch+0x1999c>)
 801ab80:	461c      	mov	r4, r3
 801ab82:	4615      	mov	r5, r2
 801ab84:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801ab86:	6020      	str	r0, [r4, #0]
 801ab88:	6061      	str	r1, [r4, #4]
 801ab8a:	60a2      	str	r2, [r4, #8]
 801ab8c:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish, "s,d,d,d,d,e");
 801ab8e:	687b      	ldr	r3, [r7, #4]
 801ab90:	33d8      	adds	r3, #216	; 0xd8
 801ab92:	4a4b      	ldr	r2, [pc, #300]	; (801acc0 <problem_fetch+0x199a0>)
 801ab94:	461c      	mov	r4, r3
 801ab96:	4613      	mov	r3, r2
 801ab98:	cb07      	ldmia	r3!, {r0, r1, r2}
 801ab9a:	6020      	str	r0, [r4, #0]
 801ab9c:	6061      	str	r1, [r4, #4]
 801ab9e:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade, "6B+");
 801aba0:	687b      	ldr	r3, [r7, #4]
 801aba2:	33cc      	adds	r3, #204	; 0xcc
 801aba4:	4a3d      	ldr	r2, [pc, #244]	; (801ac9c <problem_fetch+0x1997c>)
 801aba6:	6810      	ldr	r0, [r2, #0]
 801aba8:	6018      	str	r0, [r3, #0]
			break;
 801abaa:	e0ff      	b.n	801adac <problem_fetch+0x19a8c>
		case 96 :
			strcpy(p->name,"SWIM AND GO");
 801abac:	687b      	ldr	r3, [r7, #4]
 801abae:	337c      	adds	r3, #124	; 0x7c
 801abb0:	4a44      	ldr	r2, [pc, #272]	; (801acc4 <problem_fetch+0x199a4>)
 801abb2:	461c      	mov	r4, r3
 801abb4:	4613      	mov	r3, r2
 801abb6:	cb07      	ldmia	r3!, {r0, r1, r2}
 801abb8:	6020      	str	r0, [r4, #0]
 801abba:	6061      	str	r1, [r4, #4]
 801abbc:	60a2      	str	r2, [r4, #8]
			p->moveSize = 6;
 801abbe:	687b      	ldr	r3, [r7, #4]
 801abc0:	2206      	movs	r2, #6
 801abc2:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"G,E,H,C,I,D");
 801abc4:	687b      	ldr	r3, [r7, #4]
 801abc6:	3340      	adds	r3, #64	; 0x40
 801abc8:	4a3f      	ldr	r2, [pc, #252]	; (801acc8 <problem_fetch+0x199a8>)
 801abca:	461c      	mov	r4, r3
 801abcc:	4613      	mov	r3, r2
 801abce:	cb07      	ldmia	r3!, {r0, r1, r2}
 801abd0:	6020      	str	r0, [r4, #0]
 801abd2:	6061      	str	r1, [r4, #4]
 801abd4:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,6,10,13,14,18");
 801abd6:	687b      	ldr	r3, [r7, #4]
 801abd8:	3304      	adds	r3, #4
 801abda:	4a3c      	ldr	r2, [pc, #240]	; (801accc <problem_fetch+0x199ac>)
 801abdc:	461c      	mov	r4, r3
 801abde:	4615      	mov	r5, r2
 801abe0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801abe2:	6020      	str	r0, [r4, #0]
 801abe4:	6061      	str	r1, [r4, #4]
 801abe6:	60a2      	str	r2, [r4, #8]
 801abe8:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish, "s,s,d,d,d,e");
 801abea:	687b      	ldr	r3, [r7, #4]
 801abec:	33d8      	adds	r3, #216	; 0xd8
 801abee:	4a38      	ldr	r2, [pc, #224]	; (801acd0 <problem_fetch+0x199b0>)
 801abf0:	461c      	mov	r4, r3
 801abf2:	4613      	mov	r3, r2
 801abf4:	cb07      	ldmia	r3!, {r0, r1, r2}
 801abf6:	6020      	str	r0, [r4, #0]
 801abf8:	6061      	str	r1, [r4, #4]
 801abfa:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade, "6B+");
 801abfc:	687b      	ldr	r3, [r7, #4]
 801abfe:	33cc      	adds	r3, #204	; 0xcc
 801ac00:	4a26      	ldr	r2, [pc, #152]	; (801ac9c <problem_fetch+0x1997c>)
 801ac02:	6810      	ldr	r0, [r2, #0]
 801ac04:	6018      	str	r0, [r3, #0]
			break;
 801ac06:	e0d1      	b.n	801adac <problem_fetch+0x19a8c>
		case 97 :
			strcpy(p->name,"FLAPODROM");
 801ac08:	687b      	ldr	r3, [r7, #4]
 801ac0a:	337c      	adds	r3, #124	; 0x7c
 801ac0c:	4931      	ldr	r1, [pc, #196]	; (801acd4 <problem_fetch+0x199b4>)
 801ac0e:	461a      	mov	r2, r3
 801ac10:	460b      	mov	r3, r1
 801ac12:	cb03      	ldmia	r3!, {r0, r1}
 801ac14:	6010      	str	r0, [r2, #0]
 801ac16:	6051      	str	r1, [r2, #4]
 801ac18:	881b      	ldrh	r3, [r3, #0]
 801ac1a:	8113      	strh	r3, [r2, #8]
			p->moveSize = 6;
 801ac1c:	687b      	ldr	r3, [r7, #4]
 801ac1e:	2206      	movs	r2, #6
 801ac20:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"E,J,H,E,I,I");
 801ac22:	687b      	ldr	r3, [r7, #4]
 801ac24:	3340      	adds	r3, #64	; 0x40
 801ac26:	4a2c      	ldr	r2, [pc, #176]	; (801acd8 <problem_fetch+0x199b8>)
 801ac28:	461c      	mov	r4, r3
 801ac2a:	4613      	mov	r3, r2
 801ac2c:	cb07      	ldmia	r3!, {r0, r1, r2}
 801ac2e:	6020      	str	r0, [r4, #0]
 801ac30:	6061      	str	r1, [r4, #4]
 801ac32:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"6,5,10,14,14,18");
 801ac34:	687b      	ldr	r3, [r7, #4]
 801ac36:	3304      	adds	r3, #4
 801ac38:	4a28      	ldr	r2, [pc, #160]	; (801acdc <problem_fetch+0x199bc>)
 801ac3a:	461c      	mov	r4, r3
 801ac3c:	4615      	mov	r5, r2
 801ac3e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801ac40:	6020      	str	r0, [r4, #0]
 801ac42:	6061      	str	r1, [r4, #4]
 801ac44:	60a2      	str	r2, [r4, #8]
 801ac46:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish, "s,s,d,d,d,e");
 801ac48:	687b      	ldr	r3, [r7, #4]
 801ac4a:	33d8      	adds	r3, #216	; 0xd8
 801ac4c:	4a20      	ldr	r2, [pc, #128]	; (801acd0 <problem_fetch+0x199b0>)
 801ac4e:	461c      	mov	r4, r3
 801ac50:	4613      	mov	r3, r2
 801ac52:	cb07      	ldmia	r3!, {r0, r1, r2}
 801ac54:	6020      	str	r0, [r4, #0]
 801ac56:	6061      	str	r1, [r4, #4]
 801ac58:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade, "6C+");
 801ac5a:	687b      	ldr	r3, [r7, #4]
 801ac5c:	33cc      	adds	r3, #204	; 0xcc
 801ac5e:	4a20      	ldr	r2, [pc, #128]	; (801ace0 <problem_fetch+0x199c0>)
 801ac60:	6810      	ldr	r0, [r2, #0]
 801ac62:	6018      	str	r0, [r3, #0]
			break;
 801ac64:	e0a2      	b.n	801adac <problem_fetch+0x19a8c>
 801ac66:	bf00      	nop
 801ac68:	0802a764 	.word	0x0802a764
 801ac6c:	0802a778 	.word	0x0802a778
 801ac70:	0802a788 	.word	0x0802a788
 801ac74:	0802a79c 	.word	0x0802a79c
 801ac78:	08021424 	.word	0x08021424
 801ac7c:	0802a7ac 	.word	0x0802a7ac
 801ac80:	0802a7b8 	.word	0x0802a7b8
 801ac84:	0802a7c8 	.word	0x0802a7c8
 801ac88:	08021494 	.word	0x08021494
 801ac8c:	0802a7dc 	.word	0x0802a7dc
 801ac90:	0802a7f0 	.word	0x0802a7f0
 801ac94:	0802a800 	.word	0x0802a800
 801ac98:	08021458 	.word	0x08021458
 801ac9c:	080212b0 	.word	0x080212b0
 801aca0:	0802a818 	.word	0x0802a818
 801aca4:	0802a824 	.word	0x0802a824
 801aca8:	0802a830 	.word	0x0802a830
 801acac:	0802a840 	.word	0x0802a840
 801acb0:	080212f4 	.word	0x080212f4
 801acb4:	0802a84c 	.word	0x0802a84c
 801acb8:	0802a85c 	.word	0x0802a85c
 801acbc:	0802a868 	.word	0x0802a868
 801acc0:	0802139c 	.word	0x0802139c
 801acc4:	0802a878 	.word	0x0802a878
 801acc8:	0802a884 	.word	0x0802a884
 801accc:	0802a890 	.word	0x0802a890
 801acd0:	08021910 	.word	0x08021910
 801acd4:	0802a8a0 	.word	0x0802a8a0
 801acd8:	0802a8ac 	.word	0x0802a8ac
 801acdc:	0802a60c 	.word	0x0802a60c
 801ace0:	080213a8 	.word	0x080213a8
		case 98 :
			strcpy(p->name,"L9");
 801ace4:	687b      	ldr	r3, [r7, #4]
 801ace6:	337c      	adds	r3, #124	; 0x7c
 801ace8:	4a32      	ldr	r2, [pc, #200]	; (801adb4 <problem_fetch+0x19a94>)
 801acea:	8811      	ldrh	r1, [r2, #0]
 801acec:	7892      	ldrb	r2, [r2, #2]
 801acee:	8019      	strh	r1, [r3, #0]
 801acf0:	709a      	strb	r2, [r3, #2]
			p->moveSize = 6;
 801acf2:	687b      	ldr	r3, [r7, #4]
 801acf4:	2206      	movs	r2, #6
 801acf6:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"G,E,C,E,C,D");
 801acf8:	687b      	ldr	r3, [r7, #4]
 801acfa:	3340      	adds	r3, #64	; 0x40
 801acfc:	4a2e      	ldr	r2, [pc, #184]	; (801adb8 <problem_fetch+0x19a98>)
 801acfe:	461c      	mov	r4, r3
 801ad00:	4613      	mov	r3, r2
 801ad02:	cb07      	ldmia	r3!, {r0, r1, r2}
 801ad04:	6020      	str	r0, [r4, #0]
 801ad06:	6061      	str	r1, [r4, #4]
 801ad08:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,8,8,12,13,18");
 801ad0a:	687b      	ldr	r3, [r7, #4]
 801ad0c:	3304      	adds	r3, #4
 801ad0e:	4a2b      	ldr	r2, [pc, #172]	; (801adbc <problem_fetch+0x19a9c>)
 801ad10:	461c      	mov	r4, r3
 801ad12:	4613      	mov	r3, r2
 801ad14:	cb07      	ldmia	r3!, {r0, r1, r2}
 801ad16:	6020      	str	r0, [r4, #0]
 801ad18:	6061      	str	r1, [r4, #4]
 801ad1a:	60a2      	str	r2, [r4, #8]
 801ad1c:	881a      	ldrh	r2, [r3, #0]
 801ad1e:	789b      	ldrb	r3, [r3, #2]
 801ad20:	81a2      	strh	r2, [r4, #12]
 801ad22:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish, "s,d,d,d,d,e");
 801ad24:	687b      	ldr	r3, [r7, #4]
 801ad26:	33d8      	adds	r3, #216	; 0xd8
 801ad28:	4a25      	ldr	r2, [pc, #148]	; (801adc0 <problem_fetch+0x19aa0>)
 801ad2a:	461c      	mov	r4, r3
 801ad2c:	4613      	mov	r3, r2
 801ad2e:	cb07      	ldmia	r3!, {r0, r1, r2}
 801ad30:	6020      	str	r0, [r4, #0]
 801ad32:	6061      	str	r1, [r4, #4]
 801ad34:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade, "6B+");
 801ad36:	687b      	ldr	r3, [r7, #4]
 801ad38:	33cc      	adds	r3, #204	; 0xcc
 801ad3a:	4a22      	ldr	r2, [pc, #136]	; (801adc4 <problem_fetch+0x19aa4>)
 801ad3c:	6810      	ldr	r0, [r2, #0]
 801ad3e:	6018      	str	r0, [r3, #0]
			break;
 801ad40:	e034      	b.n	801adac <problem_fetch+0x19a8c>
		case 99 :
			strcpy(p->name,"ACG29");
 801ad42:	687b      	ldr	r3, [r7, #4]
 801ad44:	337c      	adds	r3, #124	; 0x7c
 801ad46:	4a20      	ldr	r2, [pc, #128]	; (801adc8 <problem_fetch+0x19aa8>)
 801ad48:	6810      	ldr	r0, [r2, #0]
 801ad4a:	6018      	str	r0, [r3, #0]
 801ad4c:	8892      	ldrh	r2, [r2, #4]
 801ad4e:	809a      	strh	r2, [r3, #4]
			p->moveSize = 7;
 801ad50:	687b      	ldr	r3, [r7, #4]
 801ad52:	2207      	movs	r2, #7
 801ad54:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters ,"J,H,E,F,E,H,D");
 801ad56:	687b      	ldr	r3, [r7, #4]
 801ad58:	3340      	adds	r3, #64	; 0x40
 801ad5a:	4a1c      	ldr	r2, [pc, #112]	; (801adcc <problem_fetch+0x19aac>)
 801ad5c:	461c      	mov	r4, r3
 801ad5e:	4613      	mov	r3, r2
 801ad60:	cb07      	ldmia	r3!, {r0, r1, r2}
 801ad62:	6020      	str	r0, [r4, #0]
 801ad64:	6061      	str	r1, [r4, #4]
 801ad66:	60a2      	str	r2, [r4, #8]
 801ad68:	881b      	ldrh	r3, [r3, #0]
 801ad6a:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,5,8,11,14,16,18");
 801ad6c:	687b      	ldr	r3, [r7, #4]
 801ad6e:	3304      	adds	r3, #4
 801ad70:	4a17      	ldr	r2, [pc, #92]	; (801add0 <problem_fetch+0x19ab0>)
 801ad72:	461d      	mov	r5, r3
 801ad74:	4614      	mov	r4, r2
 801ad76:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801ad78:	6028      	str	r0, [r5, #0]
 801ad7a:	6069      	str	r1, [r5, #4]
 801ad7c:	60aa      	str	r2, [r5, #8]
 801ad7e:	60eb      	str	r3, [r5, #12]
 801ad80:	8823      	ldrh	r3, [r4, #0]
 801ad82:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish, "s,s,d,d,d,d,e");
 801ad84:	687b      	ldr	r3, [r7, #4]
 801ad86:	33d8      	adds	r3, #216	; 0xd8
 801ad88:	4a12      	ldr	r2, [pc, #72]	; (801add4 <problem_fetch+0x19ab4>)
 801ad8a:	461c      	mov	r4, r3
 801ad8c:	4613      	mov	r3, r2
 801ad8e:	cb07      	ldmia	r3!, {r0, r1, r2}
 801ad90:	6020      	str	r0, [r4, #0]
 801ad92:	6061      	str	r1, [r4, #4]
 801ad94:	60a2      	str	r2, [r4, #8]
 801ad96:	881b      	ldrh	r3, [r3, #0]
 801ad98:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade, "6C");
 801ad9a:	687b      	ldr	r3, [r7, #4]
 801ad9c:	33cc      	adds	r3, #204	; 0xcc
 801ad9e:	4a0e      	ldr	r2, [pc, #56]	; (801add8 <problem_fetch+0x19ab8>)
 801ada0:	8811      	ldrh	r1, [r2, #0]
 801ada2:	7892      	ldrb	r2, [r2, #2]
 801ada4:	8019      	strh	r1, [r3, #0]
 801ada6:	709a      	strb	r2, [r3, #2]
			break;
 801ada8:	e000      	b.n	801adac <problem_fetch+0x19a8c>
		default:
			break;
 801adaa:	bf00      	nop
	}
}
 801adac:	bf00      	nop
 801adae:	370c      	adds	r7, #12
 801adb0:	46bd      	mov	sp, r7
 801adb2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801adb4:	0802a8b8 	.word	0x0802a8b8
 801adb8:	0802a8bc 	.word	0x0802a8bc
 801adbc:	0802a8c8 	.word	0x0802a8c8
 801adc0:	0802139c 	.word	0x0802139c
 801adc4:	080212b0 	.word	0x080212b0
 801adc8:	0802a8d8 	.word	0x0802a8d8
 801adcc:	0802a8e0 	.word	0x0802a8e0
 801add0:	0802a8f0 	.word	0x0802a8f0
 801add4:	080212a0 	.word	0x080212a0
 801add8:	08021370 	.word	0x08021370

0801addc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 801addc:	b580      	push	{r7, lr}
 801adde:	b082      	sub	sp, #8
 801ade0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 801ade2:	2300      	movs	r3, #0
 801ade4:	607b      	str	r3, [r7, #4]
 801ade6:	4b0c      	ldr	r3, [pc, #48]	; (801ae18 <MX_DMA_Init+0x3c>)
 801ade8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801adea:	4a0b      	ldr	r2, [pc, #44]	; (801ae18 <MX_DMA_Init+0x3c>)
 801adec:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 801adf0:	6313      	str	r3, [r2, #48]	; 0x30
 801adf2:	4b09      	ldr	r3, [pc, #36]	; (801ae18 <MX_DMA_Init+0x3c>)
 801adf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801adf6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 801adfa:	607b      	str	r3, [r7, #4]
 801adfc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 801adfe:	2200      	movs	r2, #0
 801ae00:	2100      	movs	r1, #0
 801ae02:	2010      	movs	r0, #16
 801ae04:	f001 f9c3 	bl	801c18e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 801ae08:	2010      	movs	r0, #16
 801ae0a:	f001 f9dc 	bl	801c1c6 <HAL_NVIC_EnableIRQ>

}
 801ae0e:	bf00      	nop
 801ae10:	3708      	adds	r7, #8
 801ae12:	46bd      	mov	sp, r7
 801ae14:	bd80      	pop	{r7, pc}
 801ae16:	bf00      	nop
 801ae18:	40023800 	.word	0x40023800

0801ae1c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 801ae1c:	b580      	push	{r7, lr}
 801ae1e:	b08a      	sub	sp, #40	; 0x28
 801ae20:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801ae22:	f107 0314 	add.w	r3, r7, #20
 801ae26:	2200      	movs	r2, #0
 801ae28:	601a      	str	r2, [r3, #0]
 801ae2a:	605a      	str	r2, [r3, #4]
 801ae2c:	609a      	str	r2, [r3, #8]
 801ae2e:	60da      	str	r2, [r3, #12]
 801ae30:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 801ae32:	2300      	movs	r3, #0
 801ae34:	613b      	str	r3, [r7, #16]
 801ae36:	4b52      	ldr	r3, [pc, #328]	; (801af80 <MX_GPIO_Init+0x164>)
 801ae38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801ae3a:	4a51      	ldr	r2, [pc, #324]	; (801af80 <MX_GPIO_Init+0x164>)
 801ae3c:	f043 0304 	orr.w	r3, r3, #4
 801ae40:	6313      	str	r3, [r2, #48]	; 0x30
 801ae42:	4b4f      	ldr	r3, [pc, #316]	; (801af80 <MX_GPIO_Init+0x164>)
 801ae44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801ae46:	f003 0304 	and.w	r3, r3, #4
 801ae4a:	613b      	str	r3, [r7, #16]
 801ae4c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 801ae4e:	2300      	movs	r3, #0
 801ae50:	60fb      	str	r3, [r7, #12]
 801ae52:	4b4b      	ldr	r3, [pc, #300]	; (801af80 <MX_GPIO_Init+0x164>)
 801ae54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801ae56:	4a4a      	ldr	r2, [pc, #296]	; (801af80 <MX_GPIO_Init+0x164>)
 801ae58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801ae5c:	6313      	str	r3, [r2, #48]	; 0x30
 801ae5e:	4b48      	ldr	r3, [pc, #288]	; (801af80 <MX_GPIO_Init+0x164>)
 801ae60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801ae62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801ae66:	60fb      	str	r3, [r7, #12]
 801ae68:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 801ae6a:	2300      	movs	r3, #0
 801ae6c:	60bb      	str	r3, [r7, #8]
 801ae6e:	4b44      	ldr	r3, [pc, #272]	; (801af80 <MX_GPIO_Init+0x164>)
 801ae70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801ae72:	4a43      	ldr	r2, [pc, #268]	; (801af80 <MX_GPIO_Init+0x164>)
 801ae74:	f043 0301 	orr.w	r3, r3, #1
 801ae78:	6313      	str	r3, [r2, #48]	; 0x30
 801ae7a:	4b41      	ldr	r3, [pc, #260]	; (801af80 <MX_GPIO_Init+0x164>)
 801ae7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801ae7e:	f003 0301 	and.w	r3, r3, #1
 801ae82:	60bb      	str	r3, [r7, #8]
 801ae84:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 801ae86:	2300      	movs	r3, #0
 801ae88:	607b      	str	r3, [r7, #4]
 801ae8a:	4b3d      	ldr	r3, [pc, #244]	; (801af80 <MX_GPIO_Init+0x164>)
 801ae8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801ae8e:	4a3c      	ldr	r2, [pc, #240]	; (801af80 <MX_GPIO_Init+0x164>)
 801ae90:	f043 0302 	orr.w	r3, r3, #2
 801ae94:	6313      	str	r3, [r2, #48]	; 0x30
 801ae96:	4b3a      	ldr	r3, [pc, #232]	; (801af80 <MX_GPIO_Init+0x164>)
 801ae98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801ae9a:	f003 0302 	and.w	r3, r3, #2
 801ae9e:	607b      	str	r3, [r7, #4]
 801aea0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);
 801aea2:	2200      	movs	r2, #0
 801aea4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 801aea8:	4836      	ldr	r0, [pc, #216]	; (801af84 <MX_GPIO_Init+0x168>)
 801aeaa:	f001 fed1 	bl	801cc50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 801aeae:	2200      	movs	r2, #0
 801aeb0:	2180      	movs	r1, #128	; 0x80
 801aeb2:	4835      	ldr	r0, [pc, #212]	; (801af88 <MX_GPIO_Init+0x16c>)
 801aeb4:	f001 fecc 	bl	801cc50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 801aeb8:	2200      	movs	r2, #0
 801aeba:	f44f 7140 	mov.w	r1, #768	; 0x300
 801aebe:	4833      	ldr	r0, [pc, #204]	; (801af8c <MX_GPIO_Init+0x170>)
 801aec0:	f001 fec6 	bl	801cc50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 801aec4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 801aec8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 801aeca:	4b31      	ldr	r3, [pc, #196]	; (801af90 <MX_GPIO_Init+0x174>)
 801aecc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 801aece:	2300      	movs	r3, #0
 801aed0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 801aed2:	f107 0314 	add.w	r3, r7, #20
 801aed6:	4619      	mov	r1, r3
 801aed8:	482b      	ldr	r0, [pc, #172]	; (801af88 <MX_GPIO_Init+0x16c>)
 801aeda:	f001 fd1f 	bl	801c91c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 801aede:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801aee2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 801aee4:	2301      	movs	r3, #1
 801aee6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 801aee8:	2300      	movs	r3, #0
 801aeea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801aeec:	2300      	movs	r3, #0
 801aeee:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 801aef0:	f107 0314 	add.w	r3, r7, #20
 801aef4:	4619      	mov	r1, r3
 801aef6:	4823      	ldr	r0, [pc, #140]	; (801af84 <MX_GPIO_Init+0x168>)
 801aef8:	f001 fd10 	bl	801c91c <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 801aefc:	2380      	movs	r3, #128	; 0x80
 801aefe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 801af00:	2301      	movs	r3, #1
 801af02:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 801af04:	2300      	movs	r3, #0
 801af06:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801af08:	2300      	movs	r3, #0
 801af0a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 801af0c:	f107 0314 	add.w	r3, r7, #20
 801af10:	4619      	mov	r1, r3
 801af12:	481d      	ldr	r0, [pc, #116]	; (801af88 <MX_GPIO_Init+0x16c>)
 801af14:	f001 fd02 	bl	801c91c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 801af18:	f44f 7340 	mov.w	r3, #768	; 0x300
 801af1c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 801af1e:	2301      	movs	r3, #1
 801af20:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 801af22:	2300      	movs	r3, #0
 801af24:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801af26:	2300      	movs	r3, #0
 801af28:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801af2a:	f107 0314 	add.w	r3, r7, #20
 801af2e:	4619      	mov	r1, r3
 801af30:	4816      	ldr	r0, [pc, #88]	; (801af8c <MX_GPIO_Init+0x170>)
 801af32:	f001 fcf3 	bl	801c91c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 801af36:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801af3a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 801af3c:	2300      	movs	r3, #0
 801af3e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 801af40:	2301      	movs	r3, #1
 801af42:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801af44:	f107 0314 	add.w	r3, r7, #20
 801af48:	4619      	mov	r1, r3
 801af4a:	4810      	ldr	r0, [pc, #64]	; (801af8c <MX_GPIO_Init+0x170>)
 801af4c:	f001 fce6 	bl	801c91c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 801af50:	2338      	movs	r3, #56	; 0x38
 801af52:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 801af54:	2300      	movs	r3, #0
 801af56:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 801af58:	2301      	movs	r3, #1
 801af5a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 801af5c:	f107 0314 	add.w	r3, r7, #20
 801af60:	4619      	mov	r1, r3
 801af62:	4808      	ldr	r0, [pc, #32]	; (801af84 <MX_GPIO_Init+0x168>)
 801af64:	f001 fcda 	bl	801c91c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 801af68:	2200      	movs	r2, #0
 801af6a:	2100      	movs	r1, #0
 801af6c:	2028      	movs	r0, #40	; 0x28
 801af6e:	f001 f90e 	bl	801c18e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 801af72:	2028      	movs	r0, #40	; 0x28
 801af74:	f001 f927 	bl	801c1c6 <HAL_NVIC_EnableIRQ>

}
 801af78:	bf00      	nop
 801af7a:	3728      	adds	r7, #40	; 0x28
 801af7c:	46bd      	mov	sp, r7
 801af7e:	bd80      	pop	{r7, pc}
 801af80:	40023800 	.word	0x40023800
 801af84:	40020400 	.word	0x40020400
 801af88:	40020800 	.word	0x40020800
 801af8c:	40020000 	.word	0x40020000
 801af90:	10210000 	.word	0x10210000

0801af94 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 801af94:	b580      	push	{r7, lr}
 801af96:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 801af98:	4b12      	ldr	r3, [pc, #72]	; (801afe4 <MX_I2C1_Init+0x50>)
 801af9a:	4a13      	ldr	r2, [pc, #76]	; (801afe8 <MX_I2C1_Init+0x54>)
 801af9c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 801af9e:	4b11      	ldr	r3, [pc, #68]	; (801afe4 <MX_I2C1_Init+0x50>)
 801afa0:	4a12      	ldr	r2, [pc, #72]	; (801afec <MX_I2C1_Init+0x58>)
 801afa2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 801afa4:	4b0f      	ldr	r3, [pc, #60]	; (801afe4 <MX_I2C1_Init+0x50>)
 801afa6:	2200      	movs	r2, #0
 801afa8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 801afaa:	4b0e      	ldr	r3, [pc, #56]	; (801afe4 <MX_I2C1_Init+0x50>)
 801afac:	2200      	movs	r2, #0
 801afae:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 801afb0:	4b0c      	ldr	r3, [pc, #48]	; (801afe4 <MX_I2C1_Init+0x50>)
 801afb2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 801afb6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 801afb8:	4b0a      	ldr	r3, [pc, #40]	; (801afe4 <MX_I2C1_Init+0x50>)
 801afba:	2200      	movs	r2, #0
 801afbc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 801afbe:	4b09      	ldr	r3, [pc, #36]	; (801afe4 <MX_I2C1_Init+0x50>)
 801afc0:	2200      	movs	r2, #0
 801afc2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 801afc4:	4b07      	ldr	r3, [pc, #28]	; (801afe4 <MX_I2C1_Init+0x50>)
 801afc6:	2200      	movs	r2, #0
 801afc8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 801afca:	4b06      	ldr	r3, [pc, #24]	; (801afe4 <MX_I2C1_Init+0x50>)
 801afcc:	2200      	movs	r2, #0
 801afce:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 801afd0:	4804      	ldr	r0, [pc, #16]	; (801afe4 <MX_I2C1_Init+0x50>)
 801afd2:	f001 fe6f 	bl	801ccb4 <HAL_I2C_Init>
 801afd6:	4603      	mov	r3, r0
 801afd8:	2b00      	cmp	r3, #0
 801afda:	d001      	beq.n	801afe0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 801afdc:	f000 fcf8 	bl	801b9d0 <Error_Handler>
  }

}
 801afe0:	bf00      	nop
 801afe2:	bd80      	pop	{r7, pc}
 801afe4:	20004f40 	.word	0x20004f40
 801afe8:	40005400 	.word	0x40005400
 801afec:	000186a0 	.word	0x000186a0

0801aff0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 801aff0:	b580      	push	{r7, lr}
 801aff2:	b08a      	sub	sp, #40	; 0x28
 801aff4:	af00      	add	r7, sp, #0
 801aff6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801aff8:	f107 0314 	add.w	r3, r7, #20
 801affc:	2200      	movs	r2, #0
 801affe:	601a      	str	r2, [r3, #0]
 801b000:	605a      	str	r2, [r3, #4]
 801b002:	609a      	str	r2, [r3, #8]
 801b004:	60da      	str	r2, [r3, #12]
 801b006:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 801b008:	687b      	ldr	r3, [r7, #4]
 801b00a:	681b      	ldr	r3, [r3, #0]
 801b00c:	4a19      	ldr	r2, [pc, #100]	; (801b074 <HAL_I2C_MspInit+0x84>)
 801b00e:	4293      	cmp	r3, r2
 801b010:	d12b      	bne.n	801b06a <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 801b012:	2300      	movs	r3, #0
 801b014:	613b      	str	r3, [r7, #16]
 801b016:	4b18      	ldr	r3, [pc, #96]	; (801b078 <HAL_I2C_MspInit+0x88>)
 801b018:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801b01a:	4a17      	ldr	r2, [pc, #92]	; (801b078 <HAL_I2C_MspInit+0x88>)
 801b01c:	f043 0302 	orr.w	r3, r3, #2
 801b020:	6313      	str	r3, [r2, #48]	; 0x30
 801b022:	4b15      	ldr	r3, [pc, #84]	; (801b078 <HAL_I2C_MspInit+0x88>)
 801b024:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801b026:	f003 0302 	and.w	r3, r3, #2
 801b02a:	613b      	str	r3, [r7, #16]
 801b02c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 801b02e:	23c0      	movs	r3, #192	; 0xc0
 801b030:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 801b032:	2312      	movs	r3, #18
 801b034:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 801b036:	2301      	movs	r3, #1
 801b038:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801b03a:	2303      	movs	r3, #3
 801b03c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 801b03e:	2304      	movs	r3, #4
 801b040:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 801b042:	f107 0314 	add.w	r3, r7, #20
 801b046:	4619      	mov	r1, r3
 801b048:	480c      	ldr	r0, [pc, #48]	; (801b07c <HAL_I2C_MspInit+0x8c>)
 801b04a:	f001 fc67 	bl	801c91c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 801b04e:	2300      	movs	r3, #0
 801b050:	60fb      	str	r3, [r7, #12]
 801b052:	4b09      	ldr	r3, [pc, #36]	; (801b078 <HAL_I2C_MspInit+0x88>)
 801b054:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801b056:	4a08      	ldr	r2, [pc, #32]	; (801b078 <HAL_I2C_MspInit+0x88>)
 801b058:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 801b05c:	6413      	str	r3, [r2, #64]	; 0x40
 801b05e:	4b06      	ldr	r3, [pc, #24]	; (801b078 <HAL_I2C_MspInit+0x88>)
 801b060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801b062:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 801b066:	60fb      	str	r3, [r7, #12]
 801b068:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 801b06a:	bf00      	nop
 801b06c:	3728      	adds	r7, #40	; 0x28
 801b06e:	46bd      	mov	sp, r7
 801b070:	bd80      	pop	{r7, pc}
 801b072:	bf00      	nop
 801b074:	40005400 	.word	0x40005400
 801b078:	40023800 	.word	0x40023800
 801b07c:	40020400 	.word	0x40020400

0801b080 <lcd16x2_i2c_sendCommand>:
#define LCD_I2C_SLAVE_ADDRESS_0  0x4E
#define LCD_I2C_SLAVE_ADDRESS_1  0x7E

/* Private functions */
static void lcd16x2_i2c_sendCommand(uint8_t command)
{
 801b080:	b580      	push	{r7, lr}
 801b082:	b086      	sub	sp, #24
 801b084:	af02      	add	r7, sp, #8
 801b086:	4603      	mov	r3, r0
 801b088:	71fb      	strb	r3, [r7, #7]
  const uint8_t command_0_3 = (0xF0 & (command<<4));
 801b08a:	79fb      	ldrb	r3, [r7, #7]
 801b08c:	011b      	lsls	r3, r3, #4
 801b08e:	73fb      	strb	r3, [r7, #15]
  const uint8_t command_4_7 = (0xF0 & command);
 801b090:	79fb      	ldrb	r3, [r7, #7]
 801b092:	f023 030f 	bic.w	r3, r3, #15
 801b096:	73bb      	strb	r3, [r7, #14]
  uint8_t i2cData[4] =
 801b098:	7bbb      	ldrb	r3, [r7, #14]
 801b09a:	f043 030c 	orr.w	r3, r3, #12
 801b09e:	b2db      	uxtb	r3, r3
 801b0a0:	723b      	strb	r3, [r7, #8]
 801b0a2:	7bbb      	ldrb	r3, [r7, #14]
 801b0a4:	f043 0308 	orr.w	r3, r3, #8
 801b0a8:	b2db      	uxtb	r3, r3
 801b0aa:	727b      	strb	r3, [r7, #9]
 801b0ac:	7bfb      	ldrb	r3, [r7, #15]
 801b0ae:	f043 030c 	orr.w	r3, r3, #12
 801b0b2:	b2db      	uxtb	r3, r3
 801b0b4:	72bb      	strb	r3, [r7, #10]
 801b0b6:	7bfb      	ldrb	r3, [r7, #15]
 801b0b8:	f043 0308 	orr.w	r3, r3, #8
 801b0bc:	b2db      	uxtb	r3, r3
 801b0be:	72fb      	strb	r3, [r7, #11]
      command_4_7 | LCD_EN | LCD_BK_LIGHT,
      command_4_7 | LCD_BK_LIGHT,
      command_0_3 | LCD_EN | LCD_BK_LIGHT,
      command_0_3 | LCD_BK_LIGHT,
  };
  HAL_I2C_Master_Transmit(lcd16x2_i2cHandle, LCD_I2C_SLAVE_ADDRESS, i2cData, 4, 200);
 801b0c0:	4b07      	ldr	r3, [pc, #28]	; (801b0e0 <lcd16x2_i2c_sendCommand+0x60>)
 801b0c2:	6818      	ldr	r0, [r3, #0]
 801b0c4:	4b07      	ldr	r3, [pc, #28]	; (801b0e4 <lcd16x2_i2c_sendCommand+0x64>)
 801b0c6:	781b      	ldrb	r3, [r3, #0]
 801b0c8:	b299      	uxth	r1, r3
 801b0ca:	f107 0208 	add.w	r2, r7, #8
 801b0ce:	23c8      	movs	r3, #200	; 0xc8
 801b0d0:	9300      	str	r3, [sp, #0]
 801b0d2:	2304      	movs	r3, #4
 801b0d4:	f001 ff26 	bl	801cf24 <HAL_I2C_Master_Transmit>
}
 801b0d8:	bf00      	nop
 801b0da:	3710      	adds	r7, #16
 801b0dc:	46bd      	mov	sp, r7
 801b0de:	bd80      	pop	{r7, pc}
 801b0e0:	20000094 	.word	0x20000094
 801b0e4:	20000098 	.word	0x20000098

0801b0e8 <lcd16x2_i2c_sendData>:

static void lcd16x2_i2c_sendData(uint8_t data)
{
 801b0e8:	b580      	push	{r7, lr}
 801b0ea:	b086      	sub	sp, #24
 801b0ec:	af02      	add	r7, sp, #8
 801b0ee:	4603      	mov	r3, r0
 801b0f0:	71fb      	strb	r3, [r7, #7]
  const uint8_t data_0_3 = (0xF0 & (data<<4));
 801b0f2:	79fb      	ldrb	r3, [r7, #7]
 801b0f4:	011b      	lsls	r3, r3, #4
 801b0f6:	73fb      	strb	r3, [r7, #15]
  const uint8_t data_4_7 = (0xF0 & data);
 801b0f8:	79fb      	ldrb	r3, [r7, #7]
 801b0fa:	f023 030f 	bic.w	r3, r3, #15
 801b0fe:	73bb      	strb	r3, [r7, #14]
  uint8_t i2cData[4] =
 801b100:	7bbb      	ldrb	r3, [r7, #14]
 801b102:	f043 030d 	orr.w	r3, r3, #13
 801b106:	b2db      	uxtb	r3, r3
 801b108:	723b      	strb	r3, [r7, #8]
 801b10a:	7bbb      	ldrb	r3, [r7, #14]
 801b10c:	f043 0309 	orr.w	r3, r3, #9
 801b110:	b2db      	uxtb	r3, r3
 801b112:	727b      	strb	r3, [r7, #9]
 801b114:	7bfb      	ldrb	r3, [r7, #15]
 801b116:	f043 030d 	orr.w	r3, r3, #13
 801b11a:	b2db      	uxtb	r3, r3
 801b11c:	72bb      	strb	r3, [r7, #10]
 801b11e:	7bfb      	ldrb	r3, [r7, #15]
 801b120:	f043 0309 	orr.w	r3, r3, #9
 801b124:	b2db      	uxtb	r3, r3
 801b126:	72fb      	strb	r3, [r7, #11]
      data_4_7 | LCD_EN | LCD_BK_LIGHT | LCD_RS,
      data_4_7 | LCD_BK_LIGHT | LCD_RS,
      data_0_3 | LCD_EN | LCD_BK_LIGHT | LCD_RS,
      data_0_3 | LCD_BK_LIGHT | LCD_RS,
  };
  HAL_I2C_Master_Transmit(lcd16x2_i2cHandle, LCD_I2C_SLAVE_ADDRESS, i2cData, 4, 200);
 801b128:	4b07      	ldr	r3, [pc, #28]	; (801b148 <lcd16x2_i2c_sendData+0x60>)
 801b12a:	6818      	ldr	r0, [r3, #0]
 801b12c:	4b07      	ldr	r3, [pc, #28]	; (801b14c <lcd16x2_i2c_sendData+0x64>)
 801b12e:	781b      	ldrb	r3, [r3, #0]
 801b130:	b299      	uxth	r1, r3
 801b132:	f107 0208 	add.w	r2, r7, #8
 801b136:	23c8      	movs	r3, #200	; 0xc8
 801b138:	9300      	str	r3, [sp, #0]
 801b13a:	2304      	movs	r3, #4
 801b13c:	f001 fef2 	bl	801cf24 <HAL_I2C_Master_Transmit>
}
 801b140:	bf00      	nop
 801b142:	3710      	adds	r7, #16
 801b144:	46bd      	mov	sp, r7
 801b146:	bd80      	pop	{r7, pc}
 801b148:	20000094 	.word	0x20000094
 801b14c:	20000098 	.word	0x20000098

0801b150 <lcd16x2_i2c_init>:
/**
 * @brief Initialise LCD16x2
 * @param[in] *pI2cHandle - pointer to HAL I2C handle
 */
bool lcd16x2_i2c_init(I2C_HandleTypeDef *pI2cHandle)
{
 801b150:	b580      	push	{r7, lr}
 801b152:	b082      	sub	sp, #8
 801b154:	af00      	add	r7, sp, #0
 801b156:	6078      	str	r0, [r7, #4]
  HAL_Delay(50);
 801b158:	2032      	movs	r0, #50	; 0x32
 801b15a:	f000 ff1b 	bl	801bf94 <HAL_Delay>
  lcd16x2_i2cHandle = pI2cHandle;
 801b15e:	4a30      	ldr	r2, [pc, #192]	; (801b220 <lcd16x2_i2c_init+0xd0>)
 801b160:	687b      	ldr	r3, [r7, #4]
 801b162:	6013      	str	r3, [r2, #0]
  if(HAL_I2C_IsDeviceReady(lcd16x2_i2cHandle, LCD_I2C_SLAVE_ADDRESS_0, 5, 500) != HAL_OK)
 801b164:	4b2e      	ldr	r3, [pc, #184]	; (801b220 <lcd16x2_i2c_init+0xd0>)
 801b166:	6818      	ldr	r0, [r3, #0]
 801b168:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 801b16c:	2205      	movs	r2, #5
 801b16e:	214e      	movs	r1, #78	; 0x4e
 801b170:	f001 ffd6 	bl	801d120 <HAL_I2C_IsDeviceReady>
 801b174:	4603      	mov	r3, r0
 801b176:	2b00      	cmp	r3, #0
 801b178:	d010      	beq.n	801b19c <lcd16x2_i2c_init+0x4c>
  {
    if(HAL_I2C_IsDeviceReady(lcd16x2_i2cHandle, LCD_I2C_SLAVE_ADDRESS_1, 5, 500) != HAL_OK)
 801b17a:	4b29      	ldr	r3, [pc, #164]	; (801b220 <lcd16x2_i2c_init+0xd0>)
 801b17c:	6818      	ldr	r0, [r3, #0]
 801b17e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 801b182:	2205      	movs	r2, #5
 801b184:	217e      	movs	r1, #126	; 0x7e
 801b186:	f001 ffcb 	bl	801d120 <HAL_I2C_IsDeviceReady>
 801b18a:	4603      	mov	r3, r0
 801b18c:	2b00      	cmp	r3, #0
 801b18e:	d001      	beq.n	801b194 <lcd16x2_i2c_init+0x44>
    {
      return false;
 801b190:	2300      	movs	r3, #0
 801b192:	e040      	b.n	801b216 <lcd16x2_i2c_init+0xc6>
    }
    else
    {
      LCD_I2C_SLAVE_ADDRESS = LCD_I2C_SLAVE_ADDRESS_1;
 801b194:	4b23      	ldr	r3, [pc, #140]	; (801b224 <lcd16x2_i2c_init+0xd4>)
 801b196:	227e      	movs	r2, #126	; 0x7e
 801b198:	701a      	strb	r2, [r3, #0]
 801b19a:	e002      	b.n	801b1a2 <lcd16x2_i2c_init+0x52>
    }
  }
  else
  {
    LCD_I2C_SLAVE_ADDRESS = LCD_I2C_SLAVE_ADDRESS_0;
 801b19c:	4b21      	ldr	r3, [pc, #132]	; (801b224 <lcd16x2_i2c_init+0xd4>)
 801b19e:	224e      	movs	r2, #78	; 0x4e
 801b1a0:	701a      	strb	r2, [r3, #0]
  }
  //Initialise LCD for 4-bit operation
  //1. Wait at least 15ms
  HAL_Delay(45);
 801b1a2:	202d      	movs	r0, #45	; 0x2d
 801b1a4:	f000 fef6 	bl	801bf94 <HAL_Delay>
  //2. Attentions sequence
  lcd16x2_i2c_sendCommand(0x30);
 801b1a8:	2030      	movs	r0, #48	; 0x30
 801b1aa:	f7ff ff69 	bl	801b080 <lcd16x2_i2c_sendCommand>
  HAL_Delay(5);
 801b1ae:	2005      	movs	r0, #5
 801b1b0:	f000 fef0 	bl	801bf94 <HAL_Delay>
  lcd16x2_i2c_sendCommand(0x30);
 801b1b4:	2030      	movs	r0, #48	; 0x30
 801b1b6:	f7ff ff63 	bl	801b080 <lcd16x2_i2c_sendCommand>
  HAL_Delay(1);
 801b1ba:	2001      	movs	r0, #1
 801b1bc:	f000 feea 	bl	801bf94 <HAL_Delay>
  lcd16x2_i2c_sendCommand(0x30);
 801b1c0:	2030      	movs	r0, #48	; 0x30
 801b1c2:	f7ff ff5d 	bl	801b080 <lcd16x2_i2c_sendCommand>
  HAL_Delay(8);
 801b1c6:	2008      	movs	r0, #8
 801b1c8:	f000 fee4 	bl	801bf94 <HAL_Delay>
  lcd16x2_i2c_sendCommand(0x20);
 801b1cc:	2020      	movs	r0, #32
 801b1ce:	f7ff ff57 	bl	801b080 <lcd16x2_i2c_sendCommand>
  HAL_Delay(8);
 801b1d2:	2008      	movs	r0, #8
 801b1d4:	f000 fede 	bl	801bf94 <HAL_Delay>

  lcd16x2_i2c_sendCommand(LCD_FUNCTIONSET | LCD_FUNCTION_N);
 801b1d8:	2028      	movs	r0, #40	; 0x28
 801b1da:	f7ff ff51 	bl	801b080 <lcd16x2_i2c_sendCommand>
  HAL_Delay(1);
 801b1de:	2001      	movs	r0, #1
 801b1e0:	f000 fed8 	bl	801bf94 <HAL_Delay>
  lcd16x2_i2c_sendCommand(LCD_DISPLAYCONTROL);
 801b1e4:	2008      	movs	r0, #8
 801b1e6:	f7ff ff4b 	bl	801b080 <lcd16x2_i2c_sendCommand>
  HAL_Delay(1);
 801b1ea:	2001      	movs	r0, #1
 801b1ec:	f000 fed2 	bl	801bf94 <HAL_Delay>
  lcd16x2_i2c_sendCommand(LCD_CLEARDISPLAY);
 801b1f0:	2001      	movs	r0, #1
 801b1f2:	f7ff ff45 	bl	801b080 <lcd16x2_i2c_sendCommand>
  HAL_Delay(3);
 801b1f6:	2003      	movs	r0, #3
 801b1f8:	f000 fecc 	bl	801bf94 <HAL_Delay>
  lcd16x2_i2c_sendCommand(0x04 | LCD_ENTRY_ID);
 801b1fc:	2006      	movs	r0, #6
 801b1fe:	f7ff ff3f 	bl	801b080 <lcd16x2_i2c_sendCommand>
  HAL_Delay(1);
 801b202:	2001      	movs	r0, #1
 801b204:	f000 fec6 	bl	801bf94 <HAL_Delay>
  lcd16x2_i2c_sendCommand(LCD_DISPLAYCONTROL | LCD_DISPLAY_D);
 801b208:	200c      	movs	r0, #12
 801b20a:	f7ff ff39 	bl	801b080 <lcd16x2_i2c_sendCommand>
  HAL_Delay(3);
 801b20e:	2003      	movs	r0, #3
 801b210:	f000 fec0 	bl	801bf94 <HAL_Delay>

  return true;
 801b214:	2301      	movs	r3, #1
}
 801b216:	4618      	mov	r0, r3
 801b218:	3708      	adds	r7, #8
 801b21a:	46bd      	mov	sp, r7
 801b21c:	bd80      	pop	{r7, pc}
 801b21e:	bf00      	nop
 801b220:	20000094 	.word	0x20000094
 801b224:	20000098 	.word	0x20000098

0801b228 <lcd16x2_i2c_setCursor>:
 * @brief Set cursor position
 * @param[in] row - 0 or 1 for line1 or line2
 * @param[in] col - 0 - 15 (16 columns LCD)
 */
void lcd16x2_i2c_setCursor(uint8_t row, uint8_t col)
{
 801b228:	b580      	push	{r7, lr}
 801b22a:	b084      	sub	sp, #16
 801b22c:	af00      	add	r7, sp, #0
 801b22e:	4603      	mov	r3, r0
 801b230:	460a      	mov	r2, r1
 801b232:	71fb      	strb	r3, [r7, #7]
 801b234:	4613      	mov	r3, r2
 801b236:	71bb      	strb	r3, [r7, #6]
  uint8_t maskData;
  maskData = (col)&0x0F;
 801b238:	79bb      	ldrb	r3, [r7, #6]
 801b23a:	f003 030f 	and.w	r3, r3, #15
 801b23e:	73fb      	strb	r3, [r7, #15]
  if(row==0)
 801b240:	79fb      	ldrb	r3, [r7, #7]
 801b242:	2b00      	cmp	r3, #0
 801b244:	d108      	bne.n	801b258 <lcd16x2_i2c_setCursor+0x30>
  {
    maskData |= (0x80);
 801b246:	7bfb      	ldrb	r3, [r7, #15]
 801b248:	f063 037f 	orn	r3, r3, #127	; 0x7f
 801b24c:	73fb      	strb	r3, [r7, #15]
    lcd16x2_i2c_sendCommand(maskData);
 801b24e:	7bfb      	ldrb	r3, [r7, #15]
 801b250:	4618      	mov	r0, r3
 801b252:	f7ff ff15 	bl	801b080 <lcd16x2_i2c_sendCommand>
  else
  {
    maskData |= (0xc0);
    lcd16x2_i2c_sendCommand(maskData);
  }
}
 801b256:	e007      	b.n	801b268 <lcd16x2_i2c_setCursor+0x40>
    maskData |= (0xc0);
 801b258:	7bfb      	ldrb	r3, [r7, #15]
 801b25a:	f063 033f 	orn	r3, r3, #63	; 0x3f
 801b25e:	73fb      	strb	r3, [r7, #15]
    lcd16x2_i2c_sendCommand(maskData);
 801b260:	7bfb      	ldrb	r3, [r7, #15]
 801b262:	4618      	mov	r0, r3
 801b264:	f7ff ff0c 	bl	801b080 <lcd16x2_i2c_sendCommand>
}
 801b268:	bf00      	nop
 801b26a:	3710      	adds	r7, #16
 801b26c:	46bd      	mov	sp, r7
 801b26e:	bd80      	pop	{r7, pc}

0801b270 <lcd16x2_i2c_2ndLine>:
}
/**
 * @brief Move to beginning of 2nd line
 */
void lcd16x2_i2c_2ndLine(void)
{
 801b270:	b580      	push	{r7, lr}
 801b272:	af00      	add	r7, sp, #0
  lcd16x2_i2c_setCursor(1,0);
 801b274:	2100      	movs	r1, #0
 801b276:	2001      	movs	r0, #1
 801b278:	f7ff ffd6 	bl	801b228 <lcd16x2_i2c_setCursor>
}
 801b27c:	bf00      	nop
 801b27e:	bd80      	pop	{r7, pc}

0801b280 <lcd16x2_i2c_clear>:

/**
 * @brief Display clear
 */
void lcd16x2_i2c_clear(void)
{
 801b280:	b580      	push	{r7, lr}
 801b282:	af00      	add	r7, sp, #0
  lcd16x2_i2c_sendCommand(LCD_CLEARDISPLAY);
 801b284:	2001      	movs	r0, #1
 801b286:	f7ff fefb 	bl	801b080 <lcd16x2_i2c_sendCommand>
  HAL_Delay(3);
 801b28a:	2003      	movs	r0, #3
 801b28c:	f000 fe82 	bl	801bf94 <HAL_Delay>
}
 801b290:	bf00      	nop
 801b292:	bd80      	pop	{r7, pc}

0801b294 <lcd16x2_i2c_printf>:

/**
 * @brief Print to display
 */
void lcd16x2_i2c_printf(const char* str, ...)
{
 801b294:	b40f      	push	{r0, r1, r2, r3}
 801b296:	b590      	push	{r4, r7, lr}
 801b298:	b089      	sub	sp, #36	; 0x24
 801b29a:	af00      	add	r7, sp, #0
  char stringArray[20];
  va_list args;
  va_start(args, str);
 801b29c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 801b2a0:	607b      	str	r3, [r7, #4]
  vsprintf(stringArray, str, args);
 801b2a2:	f107 0308 	add.w	r3, r7, #8
 801b2a6:	687a      	ldr	r2, [r7, #4]
 801b2a8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801b2aa:	4618      	mov	r0, r3
 801b2ac:	f004 fb82 	bl	801f9b4 <vsiprintf>
  va_end(args);
  for(uint8_t i=0;  i<strlen(stringArray) && i<16; i++)
 801b2b0:	2300      	movs	r3, #0
 801b2b2:	77fb      	strb	r3, [r7, #31]
 801b2b4:	e00b      	b.n	801b2ce <lcd16x2_i2c_printf+0x3a>
  {
    lcd16x2_i2c_sendData((uint8_t)stringArray[i]);
 801b2b6:	7ffb      	ldrb	r3, [r7, #31]
 801b2b8:	f107 0220 	add.w	r2, r7, #32
 801b2bc:	4413      	add	r3, r2
 801b2be:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 801b2c2:	4618      	mov	r0, r3
 801b2c4:	f7ff ff10 	bl	801b0e8 <lcd16x2_i2c_sendData>
  for(uint8_t i=0;  i<strlen(stringArray) && i<16; i++)
 801b2c8:	7ffb      	ldrb	r3, [r7, #31]
 801b2ca:	3301      	adds	r3, #1
 801b2cc:	77fb      	strb	r3, [r7, #31]
 801b2ce:	7ffc      	ldrb	r4, [r7, #31]
 801b2d0:	f107 0308 	add.w	r3, r7, #8
 801b2d4:	4618      	mov	r0, r3
 801b2d6:	f7e4 ff83 	bl	80001e0 <strlen>
 801b2da:	4603      	mov	r3, r0
 801b2dc:	429c      	cmp	r4, r3
 801b2de:	d202      	bcs.n	801b2e6 <lcd16x2_i2c_printf+0x52>
 801b2e0:	7ffb      	ldrb	r3, [r7, #31]
 801b2e2:	2b0f      	cmp	r3, #15
 801b2e4:	d9e7      	bls.n	801b2b6 <lcd16x2_i2c_printf+0x22>
  }
}
 801b2e6:	bf00      	nop
 801b2e8:	3724      	adds	r7, #36	; 0x24
 801b2ea:	46bd      	mov	sp, r7
 801b2ec:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 801b2f0:	b004      	add	sp, #16
 801b2f2:	4770      	bx	lr

0801b2f4 <read_GPIO>:

//#define debug_output



uint8_t read_GPIO(){
 801b2f4:	b580      	push	{r7, lr}
 801b2f6:	af00      	add	r7, sp, #0

	if(!HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_4)){			// if GPIO is low
 801b2f8:	2110      	movs	r1, #16
 801b2fa:	4824      	ldr	r0, [pc, #144]	; (801b38c <read_GPIO+0x98>)
 801b2fc:	f001 fc90 	bl	801cc20 <HAL_GPIO_ReadPin>
 801b300:	4603      	mov	r3, r0
 801b302:	2b00      	cmp	r3, #0
 801b304:	d109      	bne.n	801b31a <read_GPIO+0x26>
		while(!HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_4));	// wait till GPIO return high
 801b306:	bf00      	nop
 801b308:	2110      	movs	r1, #16
 801b30a:	4820      	ldr	r0, [pc, #128]	; (801b38c <read_GPIO+0x98>)
 801b30c:	f001 fc88 	bl	801cc20 <HAL_GPIO_ReadPin>
 801b310:	4603      	mov	r3, r0
 801b312:	2b00      	cmp	r3, #0
 801b314:	d0f8      	beq.n	801b308 <read_GPIO+0x14>
		return 1;
 801b316:	2301      	movs	r3, #1
 801b318:	e035      	b.n	801b386 <read_GPIO+0x92>
	}
	if(!HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5)){
 801b31a:	2120      	movs	r1, #32
 801b31c:	481b      	ldr	r0, [pc, #108]	; (801b38c <read_GPIO+0x98>)
 801b31e:	f001 fc7f 	bl	801cc20 <HAL_GPIO_ReadPin>
 801b322:	4603      	mov	r3, r0
 801b324:	2b00      	cmp	r3, #0
 801b326:	d109      	bne.n	801b33c <read_GPIO+0x48>
		while(!HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5));
 801b328:	bf00      	nop
 801b32a:	2120      	movs	r1, #32
 801b32c:	4817      	ldr	r0, [pc, #92]	; (801b38c <read_GPIO+0x98>)
 801b32e:	f001 fc77 	bl	801cc20 <HAL_GPIO_ReadPin>
 801b332:	4603      	mov	r3, r0
 801b334:	2b00      	cmp	r3, #0
 801b336:	d0f8      	beq.n	801b32a <read_GPIO+0x36>
		return 2;
 801b338:	2302      	movs	r3, #2
 801b33a:	e024      	b.n	801b386 <read_GPIO+0x92>
	}
	if(!HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_3)){
 801b33c:	2108      	movs	r1, #8
 801b33e:	4813      	ldr	r0, [pc, #76]	; (801b38c <read_GPIO+0x98>)
 801b340:	f001 fc6e 	bl	801cc20 <HAL_GPIO_ReadPin>
 801b344:	4603      	mov	r3, r0
 801b346:	2b00      	cmp	r3, #0
 801b348:	d109      	bne.n	801b35e <read_GPIO+0x6a>
		while(!HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_3));
 801b34a:	bf00      	nop
 801b34c:	2108      	movs	r1, #8
 801b34e:	480f      	ldr	r0, [pc, #60]	; (801b38c <read_GPIO+0x98>)
 801b350:	f001 fc66 	bl	801cc20 <HAL_GPIO_ReadPin>
 801b354:	4603      	mov	r3, r0
 801b356:	2b00      	cmp	r3, #0
 801b358:	d0f8      	beq.n	801b34c <read_GPIO+0x58>
		return 3;
 801b35a:	2303      	movs	r3, #3
 801b35c:	e013      	b.n	801b386 <read_GPIO+0x92>
	}
	if(!HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_10)){
 801b35e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 801b362:	480b      	ldr	r0, [pc, #44]	; (801b390 <read_GPIO+0x9c>)
 801b364:	f001 fc5c 	bl	801cc20 <HAL_GPIO_ReadPin>
 801b368:	4603      	mov	r3, r0
 801b36a:	2b00      	cmp	r3, #0
 801b36c:	d10a      	bne.n	801b384 <read_GPIO+0x90>
		while(!HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_10));
 801b36e:	bf00      	nop
 801b370:	f44f 6180 	mov.w	r1, #1024	; 0x400
 801b374:	4806      	ldr	r0, [pc, #24]	; (801b390 <read_GPIO+0x9c>)
 801b376:	f001 fc53 	bl	801cc20 <HAL_GPIO_ReadPin>
 801b37a:	4603      	mov	r3, r0
 801b37c:	2b00      	cmp	r3, #0
 801b37e:	d0f7      	beq.n	801b370 <read_GPIO+0x7c>
		return 4;
 801b380:	2304      	movs	r3, #4
 801b382:	e000      	b.n	801b386 <read_GPIO+0x92>
	}

	return 99;
 801b384:	2363      	movs	r3, #99	; 0x63
}
 801b386:	4618      	mov	r0, r3
 801b388:	bd80      	pop	{r7, pc}
 801b38a:	bf00      	nop
 801b38c:	40020400 	.word	0x40020400
 801b390:	40020000 	.word	0x40020000

0801b394 <write_GPIO>:



void write_GPIO(uint8_t riga){
 801b394:	b580      	push	{r7, lr}
 801b396:	b084      	sub	sp, #16
 801b398:	af00      	add	r7, sp, #0
 801b39a:	4603      	mov	r3, r0
 801b39c:	71fb      	strb	r3, [r7, #7]

	GPIO_PinState state_row1 = GPIO_PIN_SET;
 801b39e:	2301      	movs	r3, #1
 801b3a0:	73fb      	strb	r3, [r7, #15]
	GPIO_PinState state_row2 = GPIO_PIN_SET;
 801b3a2:	2301      	movs	r3, #1
 801b3a4:	73bb      	strb	r3, [r7, #14]
	GPIO_PinState state_row3 = GPIO_PIN_SET;
 801b3a6:	2301      	movs	r3, #1
 801b3a8:	737b      	strb	r3, [r7, #13]
	GPIO_PinState state_row4 = GPIO_PIN_SET;
 801b3aa:	2301      	movs	r3, #1
 801b3ac:	733b      	strb	r3, [r7, #12]

	if(riga==1){
 801b3ae:	79fb      	ldrb	r3, [r7, #7]
 801b3b0:	2b01      	cmp	r3, #1
 801b3b2:	d102      	bne.n	801b3ba <write_GPIO+0x26>
		state_row1 = GPIO_PIN_RESET;
 801b3b4:	2300      	movs	r3, #0
 801b3b6:	73fb      	strb	r3, [r7, #15]
 801b3b8:	e010      	b.n	801b3dc <write_GPIO+0x48>
	}else if(riga==2){
 801b3ba:	79fb      	ldrb	r3, [r7, #7]
 801b3bc:	2b02      	cmp	r3, #2
 801b3be:	d102      	bne.n	801b3c6 <write_GPIO+0x32>
		state_row2 = GPIO_PIN_RESET;
 801b3c0:	2300      	movs	r3, #0
 801b3c2:	73bb      	strb	r3, [r7, #14]
 801b3c4:	e00a      	b.n	801b3dc <write_GPIO+0x48>
	}else if(riga==3){
 801b3c6:	79fb      	ldrb	r3, [r7, #7]
 801b3c8:	2b03      	cmp	r3, #3
 801b3ca:	d102      	bne.n	801b3d2 <write_GPIO+0x3e>
		state_row3 = GPIO_PIN_RESET;
 801b3cc:	2300      	movs	r3, #0
 801b3ce:	737b      	strb	r3, [r7, #13]
 801b3d0:	e004      	b.n	801b3dc <write_GPIO+0x48>
	}else if(riga==4){
 801b3d2:	79fb      	ldrb	r3, [r7, #7]
 801b3d4:	2b04      	cmp	r3, #4
 801b3d6:	d101      	bne.n	801b3dc <write_GPIO+0x48>
		state_row4 = GPIO_PIN_RESET;
 801b3d8:	2300      	movs	r3, #0
 801b3da:	733b      	strb	r3, [r7, #12]
	}

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, state_row1);
 801b3dc:	7bfb      	ldrb	r3, [r7, #15]
 801b3de:	461a      	mov	r2, r3
 801b3e0:	2180      	movs	r1, #128	; 0x80
 801b3e2:	480e      	ldr	r0, [pc, #56]	; (801b41c <write_GPIO+0x88>)
 801b3e4:	f001 fc34 	bl	801cc50 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, state_row2);
 801b3e8:	7bbb      	ldrb	r3, [r7, #14]
 801b3ea:	461a      	mov	r2, r3
 801b3ec:	f44f 7100 	mov.w	r1, #512	; 0x200
 801b3f0:	480b      	ldr	r0, [pc, #44]	; (801b420 <write_GPIO+0x8c>)
 801b3f2:	f001 fc2d 	bl	801cc50 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, state_row3);
 801b3f6:	7b7b      	ldrb	r3, [r7, #13]
 801b3f8:	461a      	mov	r2, r3
 801b3fa:	f44f 7180 	mov.w	r1, #256	; 0x100
 801b3fe:	4808      	ldr	r0, [pc, #32]	; (801b420 <write_GPIO+0x8c>)
 801b400:	f001 fc26 	bl	801cc50 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, state_row4);
 801b404:	7b3b      	ldrb	r3, [r7, #12]
 801b406:	461a      	mov	r2, r3
 801b408:	f44f 6180 	mov.w	r1, #1024	; 0x400
 801b40c:	4805      	ldr	r0, [pc, #20]	; (801b424 <write_GPIO+0x90>)
 801b40e:	f001 fc1f 	bl	801cc50 <HAL_GPIO_WritePin>
}
 801b412:	bf00      	nop
 801b414:	3710      	adds	r7, #16
 801b416:	46bd      	mov	sp, r7
 801b418:	bd80      	pop	{r7, pc}
 801b41a:	bf00      	nop
 801b41c:	40020800 	.word	0x40020800
 801b420:	40020000 	.word	0x40020000
 801b424:	40020400 	.word	0x40020400

0801b428 <decode_key>:



uint8_t decode_key(uint8_t row, uint8_t col){
 801b428:	b480      	push	{r7}
 801b42a:	b085      	sub	sp, #20
 801b42c:	af00      	add	r7, sp, #0
 801b42e:	4603      	mov	r3, r0
 801b430:	460a      	mov	r2, r1
 801b432:	71fb      	strb	r3, [r7, #7]
 801b434:	4613      	mov	r3, r2
 801b436:	71bb      	strb	r3, [r7, #6]
	uint8_t key;

	switch(row){
 801b438:	79fb      	ldrb	r3, [r7, #7]
 801b43a:	3b01      	subs	r3, #1
 801b43c:	2b03      	cmp	r3, #3
 801b43e:	d85f      	bhi.n	801b500 <decode_key+0xd8>
 801b440:	a201      	add	r2, pc, #4	; (adr r2, 801b448 <decode_key+0x20>)
 801b442:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801b446:	bf00      	nop
 801b448:	0801b459 	.word	0x0801b459
 801b44c:	0801b483 	.word	0x0801b483
 801b450:	0801b4ad 	.word	0x0801b4ad
 801b454:	0801b4d7 	.word	0x0801b4d7
		case(1):
			if (col==1) key=1;
 801b458:	79bb      	ldrb	r3, [r7, #6]
 801b45a:	2b01      	cmp	r3, #1
 801b45c:	d101      	bne.n	801b462 <decode_key+0x3a>
 801b45e:	2301      	movs	r3, #1
 801b460:	73fb      	strb	r3, [r7, #15]
			if (col==2) key=2;
 801b462:	79bb      	ldrb	r3, [r7, #6]
 801b464:	2b02      	cmp	r3, #2
 801b466:	d101      	bne.n	801b46c <decode_key+0x44>
 801b468:	2302      	movs	r3, #2
 801b46a:	73fb      	strb	r3, [r7, #15]
			if (col==3) key=3;
 801b46c:	79bb      	ldrb	r3, [r7, #6]
 801b46e:	2b03      	cmp	r3, #3
 801b470:	d101      	bne.n	801b476 <decode_key+0x4e>
 801b472:	2303      	movs	r3, #3
 801b474:	73fb      	strb	r3, [r7, #15]
			if (col==4) key=10;
 801b476:	79bb      	ldrb	r3, [r7, #6]
 801b478:	2b04      	cmp	r3, #4
 801b47a:	d144      	bne.n	801b506 <decode_key+0xde>
 801b47c:	230a      	movs	r3, #10
 801b47e:	73fb      	strb	r3, [r7, #15]
			break;
 801b480:	e041      	b.n	801b506 <decode_key+0xde>
		case(2):
			if (col==1) key=4;
 801b482:	79bb      	ldrb	r3, [r7, #6]
 801b484:	2b01      	cmp	r3, #1
 801b486:	d101      	bne.n	801b48c <decode_key+0x64>
 801b488:	2304      	movs	r3, #4
 801b48a:	73fb      	strb	r3, [r7, #15]
			if (col==2) key=5;
 801b48c:	79bb      	ldrb	r3, [r7, #6]
 801b48e:	2b02      	cmp	r3, #2
 801b490:	d101      	bne.n	801b496 <decode_key+0x6e>
 801b492:	2305      	movs	r3, #5
 801b494:	73fb      	strb	r3, [r7, #15]
			if (col==3) key=6;
 801b496:	79bb      	ldrb	r3, [r7, #6]
 801b498:	2b03      	cmp	r3, #3
 801b49a:	d101      	bne.n	801b4a0 <decode_key+0x78>
 801b49c:	2306      	movs	r3, #6
 801b49e:	73fb      	strb	r3, [r7, #15]
			if (col==4) key=20;
 801b4a0:	79bb      	ldrb	r3, [r7, #6]
 801b4a2:	2b04      	cmp	r3, #4
 801b4a4:	d131      	bne.n	801b50a <decode_key+0xe2>
 801b4a6:	2314      	movs	r3, #20
 801b4a8:	73fb      	strb	r3, [r7, #15]
			break;
 801b4aa:	e02e      	b.n	801b50a <decode_key+0xe2>
		case(3):
			if (col==1) key=7;
 801b4ac:	79bb      	ldrb	r3, [r7, #6]
 801b4ae:	2b01      	cmp	r3, #1
 801b4b0:	d101      	bne.n	801b4b6 <decode_key+0x8e>
 801b4b2:	2307      	movs	r3, #7
 801b4b4:	73fb      	strb	r3, [r7, #15]
			if (col==2) key=8;
 801b4b6:	79bb      	ldrb	r3, [r7, #6]
 801b4b8:	2b02      	cmp	r3, #2
 801b4ba:	d101      	bne.n	801b4c0 <decode_key+0x98>
 801b4bc:	2308      	movs	r3, #8
 801b4be:	73fb      	strb	r3, [r7, #15]
			if (col==3) key=9;
 801b4c0:	79bb      	ldrb	r3, [r7, #6]
 801b4c2:	2b03      	cmp	r3, #3
 801b4c4:	d101      	bne.n	801b4ca <decode_key+0xa2>
 801b4c6:	2309      	movs	r3, #9
 801b4c8:	73fb      	strb	r3, [r7, #15]
			if (col==4) key=30;
 801b4ca:	79bb      	ldrb	r3, [r7, #6]
 801b4cc:	2b04      	cmp	r3, #4
 801b4ce:	d11e      	bne.n	801b50e <decode_key+0xe6>
 801b4d0:	231e      	movs	r3, #30
 801b4d2:	73fb      	strb	r3, [r7, #15]
			break;
 801b4d4:	e01b      	b.n	801b50e <decode_key+0xe6>
		case(4):
			if (col==1) key=40;
 801b4d6:	79bb      	ldrb	r3, [r7, #6]
 801b4d8:	2b01      	cmp	r3, #1
 801b4da:	d101      	bne.n	801b4e0 <decode_key+0xb8>
 801b4dc:	2328      	movs	r3, #40	; 0x28
 801b4de:	73fb      	strb	r3, [r7, #15]
			if (col==2) key=0;
 801b4e0:	79bb      	ldrb	r3, [r7, #6]
 801b4e2:	2b02      	cmp	r3, #2
 801b4e4:	d101      	bne.n	801b4ea <decode_key+0xc2>
 801b4e6:	2300      	movs	r3, #0
 801b4e8:	73fb      	strb	r3, [r7, #15]
			if (col==3) key=50;
 801b4ea:	79bb      	ldrb	r3, [r7, #6]
 801b4ec:	2b03      	cmp	r3, #3
 801b4ee:	d101      	bne.n	801b4f4 <decode_key+0xcc>
 801b4f0:	2332      	movs	r3, #50	; 0x32
 801b4f2:	73fb      	strb	r3, [r7, #15]
			if (col==4) key=60;
 801b4f4:	79bb      	ldrb	r3, [r7, #6]
 801b4f6:	2b04      	cmp	r3, #4
 801b4f8:	d10b      	bne.n	801b512 <decode_key+0xea>
 801b4fa:	233c      	movs	r3, #60	; 0x3c
 801b4fc:	73fb      	strb	r3, [r7, #15]
			break;
 801b4fe:	e008      	b.n	801b512 <decode_key+0xea>
		default:
			key=99;
 801b500:	2363      	movs	r3, #99	; 0x63
 801b502:	73fb      	strb	r3, [r7, #15]
			break;
 801b504:	e006      	b.n	801b514 <decode_key+0xec>
			break;
 801b506:	bf00      	nop
 801b508:	e004      	b.n	801b514 <decode_key+0xec>
			break;
 801b50a:	bf00      	nop
 801b50c:	e002      	b.n	801b514 <decode_key+0xec>
			break;
 801b50e:	bf00      	nop
 801b510:	e000      	b.n	801b514 <decode_key+0xec>
			break;
 801b512:	bf00      	nop
	}

	return key;
 801b514:	7bfb      	ldrb	r3, [r7, #15]
}
 801b516:	4618      	mov	r0, r3
 801b518:	3714      	adds	r7, #20
 801b51a:	46bd      	mov	sp, r7
 801b51c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b520:	4770      	bx	lr
 801b522:	bf00      	nop

0801b524 <read_key>:



// Perform a polling on each row in order to detect the selection of a key
uint8_t read_key(){
 801b524:	b580      	push	{r7, lr}
 801b526:	b082      	sub	sp, #8
 801b528:	af00      	add	r7, sp, #0

	uint8_t key = 99;     		// 99 is the DISCARD number
 801b52a:	2363      	movs	r3, #99	; 0x63
 801b52c:	71fb      	strb	r3, [r7, #7]
	uint8_t col_read = 99;
 801b52e:	2363      	movs	r3, #99	; 0x63
 801b530:	71bb      	strb	r3, [r7, #6]

	// stay in polling and wait for a button to be pressed
	while(true){

		// *** FIRST row
		write_GPIO(1);								// write 4 status of row GPIO (enable GPIO of row1)
 801b532:	2001      	movs	r0, #1
 801b534:	f7ff ff2e 	bl	801b394 <write_GPIO>
		col_read = read_GPIO();						// read 4 status of col GPIO
 801b538:	f7ff fedc 	bl	801b2f4 <read_GPIO>
 801b53c:	4603      	mov	r3, r0
 801b53e:	71bb      	strb	r3, [r7, #6]
		if(col_read != 99) {
 801b540:	79bb      	ldrb	r3, [r7, #6]
 801b542:	2b63      	cmp	r3, #99	; 0x63
 801b544:	d008      	beq.n	801b558 <read_key+0x34>
			key = decode_key(1, col_read);		// decode which button has been pressed
 801b546:	79bb      	ldrb	r3, [r7, #6]
 801b548:	4619      	mov	r1, r3
 801b54a:	2001      	movs	r0, #1
 801b54c:	f7ff ff6c 	bl	801b428 <decode_key>
 801b550:	4603      	mov	r3, r0
 801b552:	71fb      	strb	r3, [r7, #7]
			return key;
 801b554:	79fb      	ldrb	r3, [r7, #7]
 801b556:	e037      	b.n	801b5c8 <read_key+0xa4>
		}

		// *** SECOND row
		write_GPIO(2);
 801b558:	2002      	movs	r0, #2
 801b55a:	f7ff ff1b 	bl	801b394 <write_GPIO>
		col_read = read_GPIO();
 801b55e:	f7ff fec9 	bl	801b2f4 <read_GPIO>
 801b562:	4603      	mov	r3, r0
 801b564:	71bb      	strb	r3, [r7, #6]
		if(col_read != 99){
 801b566:	79bb      	ldrb	r3, [r7, #6]
 801b568:	2b63      	cmp	r3, #99	; 0x63
 801b56a:	d008      	beq.n	801b57e <read_key+0x5a>
			key = decode_key(2, col_read);
 801b56c:	79bb      	ldrb	r3, [r7, #6]
 801b56e:	4619      	mov	r1, r3
 801b570:	2002      	movs	r0, #2
 801b572:	f7ff ff59 	bl	801b428 <decode_key>
 801b576:	4603      	mov	r3, r0
 801b578:	71fb      	strb	r3, [r7, #7]
			return key;
 801b57a:	79fb      	ldrb	r3, [r7, #7]
 801b57c:	e024      	b.n	801b5c8 <read_key+0xa4>
		}

		// *** THIRD row
		write_GPIO(3);
 801b57e:	2003      	movs	r0, #3
 801b580:	f7ff ff08 	bl	801b394 <write_GPIO>
		col_read = read_GPIO();
 801b584:	f7ff feb6 	bl	801b2f4 <read_GPIO>
 801b588:	4603      	mov	r3, r0
 801b58a:	71bb      	strb	r3, [r7, #6]
		if(col_read != 99){
 801b58c:	79bb      	ldrb	r3, [r7, #6]
 801b58e:	2b63      	cmp	r3, #99	; 0x63
 801b590:	d008      	beq.n	801b5a4 <read_key+0x80>
			key = decode_key(3, col_read);
 801b592:	79bb      	ldrb	r3, [r7, #6]
 801b594:	4619      	mov	r1, r3
 801b596:	2003      	movs	r0, #3
 801b598:	f7ff ff46 	bl	801b428 <decode_key>
 801b59c:	4603      	mov	r3, r0
 801b59e:	71fb      	strb	r3, [r7, #7]
			return key;
 801b5a0:	79fb      	ldrb	r3, [r7, #7]
 801b5a2:	e011      	b.n	801b5c8 <read_key+0xa4>
		}

		// *** FORTH row
		write_GPIO(4);
 801b5a4:	2004      	movs	r0, #4
 801b5a6:	f7ff fef5 	bl	801b394 <write_GPIO>
		col_read = read_GPIO();
 801b5aa:	f7ff fea3 	bl	801b2f4 <read_GPIO>
 801b5ae:	4603      	mov	r3, r0
 801b5b0:	71bb      	strb	r3, [r7, #6]
		if(col_read != 99){
 801b5b2:	79bb      	ldrb	r3, [r7, #6]
 801b5b4:	2b63      	cmp	r3, #99	; 0x63
 801b5b6:	d0bc      	beq.n	801b532 <read_key+0xe>
			key = decode_key(4, col_read);
 801b5b8:	79bb      	ldrb	r3, [r7, #6]
 801b5ba:	4619      	mov	r1, r3
 801b5bc:	2004      	movs	r0, #4
 801b5be:	f7ff ff33 	bl	801b428 <decode_key>
 801b5c2:	4603      	mov	r3, r0
 801b5c4:	71fb      	strb	r3, [r7, #7]
			return key;
 801b5c6:	79fb      	ldrb	r3, [r7, #7]
		}
	}

	return 99;
}
 801b5c8:	4618      	mov	r0, r3
 801b5ca:	3708      	adds	r7, #8
 801b5cc:	46bd      	mov	sp, r7
 801b5ce:	bd80      	pop	{r7, pc}

0801b5d0 <keypad_getNumber>:



uint32_t keypad_getNumber(){
 801b5d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b5d2:	b0a1      	sub	sp, #132	; 0x84
 801b5d4:	af00      	add	r7, sp, #0

	uint8_t inputDigit[10];
	uint32_t number=0;
 801b5d6:	2300      	movs	r3, #0
 801b5d8:	67fb      	str	r3, [r7, #124]	; 0x7c
	uint8_t key;
	uint8_t i=0;
 801b5da:	2300      	movs	r3, #0
 801b5dc:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b

#ifdef debug_output
	PRINTF("\n\r The digits selected are: ");
#endif

	lcd16x2_i2c_printf("ID:  ");
 801b5e0:	4867      	ldr	r0, [pc, #412]	; (801b780 <keypad_getNumber+0x1b0>)
 801b5e2:	f7ff fe57 	bl	801b294 <lcd16x2_i2c_printf>
	// until I press the ENTER button do:
	while(true){

		key = read_key();		// returns the digit input
 801b5e6:	f7ff ff9d 	bl	801b524 <read_key>
 801b5ea:	4603      	mov	r3, r0
 801b5ec:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73

		if(key==99){
 801b5f0:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 801b5f4:	2b63      	cmp	r3, #99	; 0x63
 801b5f6:	d103      	bne.n	801b600 <keypad_getNumber+0x30>
			lcd16x2_i2c_printf("Error...");
 801b5f8:	4862      	ldr	r0, [pc, #392]	; (801b784 <keypad_getNumber+0x1b4>)
 801b5fa:	f7ff fe4b 	bl	801b294 <lcd16x2_i2c_printf>
 801b5fe:	e05b      	b.n	801b6b8 <keypad_getNumber+0xe8>
#ifdef debug_output
			PRINTF("\n\r     Something went wrong");
#endif
		}else if(key==10){			// A, exit insertion number
 801b600:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 801b604:	2b0a      	cmp	r3, #10
 801b606:	d107      	bne.n	801b618 <keypad_getNumber+0x48>
			lcd16x2_i2c_printf(";");
 801b608:	485f      	ldr	r0, [pc, #380]	; (801b788 <keypad_getNumber+0x1b8>)
 801b60a:	f7ff fe43 	bl	801b294 <lcd16x2_i2c_printf>
#ifdef debug_output
			PRINTF("A-->end input mode");
#endif
			break;
 801b60e:	bf00      	nop

		key=99;
	}

	// Transform the array in number
	for(int j=i; j>0; j--){
 801b610:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 801b614:	677b      	str	r3, [r7, #116]	; 0x74
 801b616:	e08e      	b.n	801b736 <keypad_getNumber+0x166>
		}else if(key==20){		// B, nothing
 801b618:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 801b61c:	2b14      	cmp	r3, #20
 801b61e:	d103      	bne.n	801b628 <keypad_getNumber+0x58>
			lcd16x2_i2c_printf("B");
 801b620:	485a      	ldr	r0, [pc, #360]	; (801b78c <keypad_getNumber+0x1bc>)
 801b622:	f7ff fe37 	bl	801b294 <lcd16x2_i2c_printf>
 801b626:	e047      	b.n	801b6b8 <keypad_getNumber+0xe8>
		}else if(key==30){		// C, nothing
 801b628:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 801b62c:	2b1e      	cmp	r3, #30
 801b62e:	d103      	bne.n	801b638 <keypad_getNumber+0x68>
			lcd16x2_i2c_printf("C");
 801b630:	4857      	ldr	r0, [pc, #348]	; (801b790 <keypad_getNumber+0x1c0>)
 801b632:	f7ff fe2f 	bl	801b294 <lcd16x2_i2c_printf>
 801b636:	e03f      	b.n	801b6b8 <keypad_getNumber+0xe8>
		}else if(key==40){		// *, nothing
 801b638:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 801b63c:	2b28      	cmp	r3, #40	; 0x28
 801b63e:	d103      	bne.n	801b648 <keypad_getNumber+0x78>
			lcd16x2_i2c_printf("*");
 801b640:	4854      	ldr	r0, [pc, #336]	; (801b794 <keypad_getNumber+0x1c4>)
 801b642:	f7ff fe27 	bl	801b294 <lcd16x2_i2c_printf>
 801b646:	e037      	b.n	801b6b8 <keypad_getNumber+0xe8>
		}else if(key==50){		// #, nothing
 801b648:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 801b64c:	2b32      	cmp	r3, #50	; 0x32
 801b64e:	d103      	bne.n	801b658 <keypad_getNumber+0x88>
			lcd16x2_i2c_printf("#");
 801b650:	4851      	ldr	r0, [pc, #324]	; (801b798 <keypad_getNumber+0x1c8>)
 801b652:	f7ff fe1f 	bl	801b294 <lcd16x2_i2c_printf>
 801b656:	e02f      	b.n	801b6b8 <keypad_getNumber+0xe8>
		}else if(key==60){		// D, delete last digit
 801b658:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 801b65c:	2b3c      	cmp	r3, #60	; 0x3c
 801b65e:	d10e      	bne.n	801b67e <keypad_getNumber+0xae>
			i=-1;
 801b660:	23ff      	movs	r3, #255	; 0xff
 801b662:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
			inputDigit[i] = 0;
 801b666:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 801b66a:	f107 0280 	add.w	r2, r7, #128	; 0x80
 801b66e:	4413      	add	r3, r2
 801b670:	2200      	movs	r2, #0
 801b672:	f803 2c18 	strb.w	r2, [r3, #-24]
			lcd16x2_i2c_printf("del");
 801b676:	4849      	ldr	r0, [pc, #292]	; (801b79c <keypad_getNumber+0x1cc>)
 801b678:	f7ff fe0c 	bl	801b294 <lcd16x2_i2c_printf>
 801b67c:	e01c      	b.n	801b6b8 <keypad_getNumber+0xe8>
		}else if(key>=0 && key<=9){	// number keys
 801b67e:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 801b682:	2b09      	cmp	r3, #9
 801b684:	d818      	bhi.n	801b6b8 <keypad_getNumber+0xe8>
			inputDigit[i] = key;
 801b686:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 801b68a:	f107 0280 	add.w	r2, r7, #128	; 0x80
 801b68e:	4413      	add	r3, r2
 801b690:	f897 2073 	ldrb.w	r2, [r7, #115]	; 0x73
 801b694:	f803 2c18 	strb.w	r2, [r3, #-24]
			lcd16x2_i2c_printf("%d", inputDigit[i]);
 801b698:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 801b69c:	f107 0280 	add.w	r2, r7, #128	; 0x80
 801b6a0:	4413      	add	r3, r2
 801b6a2:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 801b6a6:	4619      	mov	r1, r3
 801b6a8:	483d      	ldr	r0, [pc, #244]	; (801b7a0 <keypad_getNumber+0x1d0>)
 801b6aa:	f7ff fdf3 	bl	801b294 <lcd16x2_i2c_printf>
			i+=1;
 801b6ae:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 801b6b2:	3301      	adds	r3, #1
 801b6b4:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
		key=99;
 801b6b8:	2363      	movs	r3, #99	; 0x63
 801b6ba:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
		key = read_key();		// returns the digit input
 801b6be:	e792      	b.n	801b5e6 <keypad_getNumber+0x16>
		number += pow(10, j-1)*inputDigit[i-j];
 801b6c0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801b6c2:	3b01      	subs	r3, #1
 801b6c4:	4618      	mov	r0, r3
 801b6c6:	f7e4 ff35 	bl	8000534 <__aeabi_i2d>
 801b6ca:	4603      	mov	r3, r0
 801b6cc:	460c      	mov	r4, r1
 801b6ce:	ec44 3b11 	vmov	d1, r3, r4
 801b6d2:	ed9f 0b29 	vldr	d0, [pc, #164]	; 801b778 <keypad_getNumber+0x1a8>
 801b6d6:	f004 fd5d 	bl	8020194 <pow>
 801b6da:	ec56 5b10 	vmov	r5, r6, d0
 801b6de:	f897 207b 	ldrb.w	r2, [r7, #123]	; 0x7b
 801b6e2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801b6e4:	1ad3      	subs	r3, r2, r3
 801b6e6:	f107 0280 	add.w	r2, r7, #128	; 0x80
 801b6ea:	4413      	add	r3, r2
 801b6ec:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 801b6f0:	4618      	mov	r0, r3
 801b6f2:	f7e4 ff1f 	bl	8000534 <__aeabi_i2d>
 801b6f6:	4603      	mov	r3, r0
 801b6f8:	460c      	mov	r4, r1
 801b6fa:	461a      	mov	r2, r3
 801b6fc:	4623      	mov	r3, r4
 801b6fe:	4628      	mov	r0, r5
 801b700:	4631      	mov	r1, r6
 801b702:	f7e4 ff81 	bl	8000608 <__aeabi_dmul>
 801b706:	4603      	mov	r3, r0
 801b708:	460c      	mov	r4, r1
 801b70a:	4625      	mov	r5, r4
 801b70c:	461c      	mov	r4, r3
 801b70e:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 801b710:	f7e4 ff00 	bl	8000514 <__aeabi_ui2d>
 801b714:	4602      	mov	r2, r0
 801b716:	460b      	mov	r3, r1
 801b718:	4620      	mov	r0, r4
 801b71a:	4629      	mov	r1, r5
 801b71c:	f7e4 fdbe 	bl	800029c <__adddf3>
 801b720:	4603      	mov	r3, r0
 801b722:	460c      	mov	r4, r1
 801b724:	4618      	mov	r0, r3
 801b726:	4621      	mov	r1, r4
 801b728:	f7e5 fa1e 	bl	8000b68 <__aeabi_d2uiz>
 801b72c:	4603      	mov	r3, r0
 801b72e:	67fb      	str	r3, [r7, #124]	; 0x7c
	for(int j=i; j>0; j--){
 801b730:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801b732:	3b01      	subs	r3, #1
 801b734:	677b      	str	r3, [r7, #116]	; 0x74
 801b736:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801b738:	2b00      	cmp	r3, #0
 801b73a:	dcc1      	bgt.n	801b6c0 <keypad_getNumber+0xf0>
	}

#ifdef debug_output
	PRINTF32("\n\r     Final number obtained is: %d", number);
#endif
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 801b73c:	2200      	movs	r2, #0
 801b73e:	2180      	movs	r1, #128	; 0x80
 801b740:	4818      	ldr	r0, [pc, #96]	; (801b7a4 <keypad_getNumber+0x1d4>)
 801b742:	f001 fa85 	bl	801cc50 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 801b746:	2200      	movs	r2, #0
 801b748:	f44f 7100 	mov.w	r1, #512	; 0x200
 801b74c:	4816      	ldr	r0, [pc, #88]	; (801b7a8 <keypad_getNumber+0x1d8>)
 801b74e:	f001 fa7f 	bl	801cc50 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 801b752:	2200      	movs	r2, #0
 801b754:	f44f 7180 	mov.w	r1, #256	; 0x100
 801b758:	4813      	ldr	r0, [pc, #76]	; (801b7a8 <keypad_getNumber+0x1d8>)
 801b75a:	f001 fa79 	bl	801cc50 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);
 801b75e:	2200      	movs	r2, #0
 801b760:	f44f 6180 	mov.w	r1, #1024	; 0x400
 801b764:	4811      	ldr	r0, [pc, #68]	; (801b7ac <keypad_getNumber+0x1dc>)
 801b766:	f001 fa73 	bl	801cc50 <HAL_GPIO_WritePin>
	return number;
 801b76a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
}
 801b76c:	4618      	mov	r0, r3
 801b76e:	3784      	adds	r7, #132	; 0x84
 801b770:	46bd      	mov	sp, r7
 801b772:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801b774:	f3af 8000 	nop.w
 801b778:	00000000 	.word	0x00000000
 801b77c:	40240000 	.word	0x40240000
 801b780:	0802a904 	.word	0x0802a904
 801b784:	0802a90c 	.word	0x0802a90c
 801b788:	0802a918 	.word	0x0802a918
 801b78c:	0802a91c 	.word	0x0802a91c
 801b790:	0802a920 	.word	0x0802a920
 801b794:	0802a924 	.word	0x0802a924
 801b798:	0802a928 	.word	0x0802a928
 801b79c:	0802a92c 	.word	0x0802a92c
 801b7a0:	0802a930 	.word	0x0802a930
 801b7a4:	40020800 	.word	0x40020800
 801b7a8:	40020000 	.word	0x40020000
 801b7ac:	40020400 	.word	0x40020400

0801b7b0 <HAL_TIM_PWM_PulseFinishedCallback>:




// When DMA finishes a send triggers a flag and stops the data transfer
void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim){
 801b7b0:	b580      	push	{r7, lr}
 801b7b2:	b082      	sub	sp, #8
 801b7b4:	af00      	add	r7, sp, #0
 801b7b6:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Stop_DMA(&htim2, TIM_CHANNEL_1);
 801b7b8:	2100      	movs	r1, #0
 801b7ba:	4805      	ldr	r0, [pc, #20]	; (801b7d0 <HAL_TIM_PWM_PulseFinishedCallback+0x20>)
 801b7bc:	f002 fdb0 	bl	801e320 <HAL_TIM_PWM_Stop_DMA>
	datasentflag = 1;
 801b7c0:	4b04      	ldr	r3, [pc, #16]	; (801b7d4 <HAL_TIM_PWM_PulseFinishedCallback+0x24>)
 801b7c2:	2201      	movs	r2, #1
 801b7c4:	601a      	str	r2, [r3, #0]
}
 801b7c6:	bf00      	nop
 801b7c8:	3708      	adds	r7, #8
 801b7ca:	46bd      	mov	sp, r7
 801b7cc:	bd80      	pop	{r7, pc}
 801b7ce:	bf00      	nop
 801b7d0:	20004ff4 	.word	0x20004ff4
 801b7d4:	20000090 	.word	0x20000090

0801b7d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 801b7d8:	b580      	push	{r7, lr}
 801b7da:	b0c8      	sub	sp, #288	; 0x120
 801b7dc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 801b7de:	f000 fb67 	bl	801beb0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 801b7e2:	f000 f877 	bl	801b8d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 801b7e6:	f7ff fb19 	bl	801ae1c <MX_GPIO_Init>
  MX_DMA_Init();
 801b7ea:	f7ff faf7 	bl	801addc <MX_DMA_Init>
  MX_USART2_UART_Init();
 801b7ee:	f000 fac3 	bl	801bd78 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 801b7f2:	f000 f9bb 	bl	801bb6c <MX_TIM2_Init>
  MX_I2C1_Init();
 801b7f6:	f7ff fbcd 	bl	801af94 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */


  // turn on LED if LCD screen is properly connected to i2c
  if(lcd16x2_i2c_init(&hi2c1)){
 801b7fa:	482f      	ldr	r0, [pc, #188]	; (801b8b8 <main+0xe0>)
 801b7fc:	f7ff fca8 	bl	801b150 <lcd16x2_i2c_init>
 801b800:	4603      	mov	r3, r0
 801b802:	2b00      	cmp	r3, #0
 801b804:	d004      	beq.n	801b810 <main+0x38>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 801b806:	2201      	movs	r2, #1
 801b808:	2120      	movs	r1, #32
 801b80a:	482c      	ldr	r0, [pc, #176]	; (801b8bc <main+0xe4>)
 801b80c:	f001 fa20 	bl	801cc50 <HAL_GPIO_WritePin>
  }
  lcd16x2_i2c_clear();
 801b810:	f7ff fd36 	bl	801b280 <lcd16x2_i2c_clear>
  lcd16x2_i2c_2ndLine();
 801b814:	f7ff fd2c 	bl	801b270 <lcd16x2_i2c_2ndLine>
  lcd16x2_i2c_clear();
 801b818:	f7ff fd32 	bl	801b280 <lcd16x2_i2c_clear>

  lcd16x2_i2c_printf("><>   FISH.  <><");
 801b81c:	4828      	ldr	r0, [pc, #160]	; (801b8c0 <main+0xe8>)
 801b81e:	f7ff fd39 	bl	801b294 <lcd16x2_i2c_printf>
  lcd16x2_i2c_2ndLine();
 801b822:	f7ff fd25 	bl	801b270 <lcd16x2_i2c_2ndLine>
  lcd16x2_i2c_printf("===   BOARD  ===");
 801b826:	4827      	ldr	r0, [pc, #156]	; (801b8c4 <main+0xec>)
 801b828:	f7ff fd34 	bl	801b294 <lcd16x2_i2c_printf>

  int i=1;
 801b82c:	2301      	movs	r3, #1
 801b82e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  // Definition of data
  struct Problem p;			// struct that contains the info related to the problem
  uint32_t problemID = 0;	// ID that reppresents the number of the problem
 801b832:	2300      	movs	r3, #0
 801b834:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  if(BLUE_BUTTON){
 801b838:	4b23      	ldr	r3, [pc, #140]	; (801b8c8 <main+0xf0>)
 801b83a:	781b      	ldrb	r3, [r3, #0]
 801b83c:	2b00      	cmp	r3, #0
 801b83e:	d0fb      	beq.n	801b838 <main+0x60>
		  lcd16x2_i2c_clear();
 801b840:	f7ff fd1e 	bl	801b280 <lcd16x2_i2c_clear>



		  problemID = keypad_getNumber();
 801b844:	f7ff fec4 	bl	801b5d0 <keypad_getNumber>
 801b848:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118


		  problem_fetch(&p,problemID);
 801b84c:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 801b850:	1d3b      	adds	r3, r7, #4
 801b852:	4611      	mov	r1, r2
 801b854:	4618      	mov	r0, r3
 801b856:	f7e5 fd63 	bl	8001320 <problem_fetch>

		  problem_genArray(&p, problemID);
 801b85a:	1d3b      	adds	r3, r7, #4
 801b85c:	f8d7 1118 	ldr.w	r1, [r7, #280]	; 0x118
 801b860:	4618      	mov	r0, r3
 801b862:	f7e5 fb85 	bl	8000f70 <problem_genArray>


		  lcd16x2_i2c_clear();
 801b866:	f7ff fd0b 	bl	801b280 <lcd16x2_i2c_clear>
		  lcd16x2_i2c_printf("Name:");
 801b86a:	4818      	ldr	r0, [pc, #96]	; (801b8cc <main+0xf4>)
 801b86c:	f7ff fd12 	bl	801b294 <lcd16x2_i2c_printf>
		  lcd16x2_i2c_printf(p.name);
 801b870:	1d3b      	adds	r3, r7, #4
 801b872:	337c      	adds	r3, #124	; 0x7c
 801b874:	4618      	mov	r0, r3
 801b876:	f7ff fd0d 	bl	801b294 <lcd16x2_i2c_printf>
		  lcd16x2_i2c_2ndLine();
 801b87a:	f7ff fcf9 	bl	801b270 <lcd16x2_i2c_2ndLine>
		  lcd16x2_i2c_printf("Grad:");
 801b87e:	4814      	ldr	r0, [pc, #80]	; (801b8d0 <main+0xf8>)
 801b880:	f7ff fd08 	bl	801b294 <lcd16x2_i2c_printf>
		  lcd16x2_i2c_printf(p.grade);
 801b884:	1d3b      	adds	r3, r7, #4
 801b886:	33cc      	adds	r3, #204	; 0xcc
 801b888:	4618      	mov	r0, r3
 801b88a:	f7ff fd03 	bl	801b294 <lcd16x2_i2c_printf>


		  //LED_setAllWhite();

		  LED_setAllBlack();
 801b88e:	f7e5 fc75 	bl	800117c <LED_setAllBlack>
		  LED_setColor(i, 0, 250, 0);
 801b892:	2300      	movs	r3, #0
 801b894:	22fa      	movs	r2, #250	; 0xfa
 801b896:	2100      	movs	r1, #0
 801b898:	f8d7 011c 	ldr.w	r0, [r7, #284]	; 0x11c
 801b89c:	f7e5 fc94 	bl	80011c8 <LED_setColor>
		  i++;
 801b8a0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 801b8a4:	3301      	adds	r3, #1
 801b8a6:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c

		  WS2811_Send();
 801b8aa:	f7e5 fcbb 	bl	8001224 <WS2811_Send>

		  BLUE_BUTTON = false;
 801b8ae:	4b06      	ldr	r3, [pc, #24]	; (801b8c8 <main+0xf0>)
 801b8b0:	2200      	movs	r2, #0
 801b8b2:	701a      	strb	r2, [r3, #0]
	  if(BLUE_BUTTON){
 801b8b4:	e7c0      	b.n	801b838 <main+0x60>
 801b8b6:	bf00      	nop
 801b8b8:	20004f40 	.word	0x20004f40
 801b8bc:	40020000 	.word	0x40020000
 801b8c0:	0802a934 	.word	0x0802a934
 801b8c4:	0802a948 	.word	0x0802a948
 801b8c8:	20000099 	.word	0x20000099
 801b8cc:	0802a95c 	.word	0x0802a95c
 801b8d0:	0802a964 	.word	0x0802a964

0801b8d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 801b8d4:	b580      	push	{r7, lr}
 801b8d6:	b094      	sub	sp, #80	; 0x50
 801b8d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 801b8da:	f107 0320 	add.w	r3, r7, #32
 801b8de:	2230      	movs	r2, #48	; 0x30
 801b8e0:	2100      	movs	r1, #0
 801b8e2:	4618      	mov	r0, r3
 801b8e4:	f004 f848 	bl	801f978 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 801b8e8:	f107 030c 	add.w	r3, r7, #12
 801b8ec:	2200      	movs	r2, #0
 801b8ee:	601a      	str	r2, [r3, #0]
 801b8f0:	605a      	str	r2, [r3, #4]
 801b8f2:	609a      	str	r2, [r3, #8]
 801b8f4:	60da      	str	r2, [r3, #12]
 801b8f6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 801b8f8:	2300      	movs	r3, #0
 801b8fa:	60bb      	str	r3, [r7, #8]
 801b8fc:	4b28      	ldr	r3, [pc, #160]	; (801b9a0 <SystemClock_Config+0xcc>)
 801b8fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801b900:	4a27      	ldr	r2, [pc, #156]	; (801b9a0 <SystemClock_Config+0xcc>)
 801b902:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801b906:	6413      	str	r3, [r2, #64]	; 0x40
 801b908:	4b25      	ldr	r3, [pc, #148]	; (801b9a0 <SystemClock_Config+0xcc>)
 801b90a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801b90c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801b910:	60bb      	str	r3, [r7, #8]
 801b912:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 801b914:	2300      	movs	r3, #0
 801b916:	607b      	str	r3, [r7, #4]
 801b918:	4b22      	ldr	r3, [pc, #136]	; (801b9a4 <SystemClock_Config+0xd0>)
 801b91a:	681b      	ldr	r3, [r3, #0]
 801b91c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 801b920:	4a20      	ldr	r2, [pc, #128]	; (801b9a4 <SystemClock_Config+0xd0>)
 801b922:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801b926:	6013      	str	r3, [r2, #0]
 801b928:	4b1e      	ldr	r3, [pc, #120]	; (801b9a4 <SystemClock_Config+0xd0>)
 801b92a:	681b      	ldr	r3, [r3, #0]
 801b92c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 801b930:	607b      	str	r3, [r7, #4]
 801b932:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 801b934:	2302      	movs	r3, #2
 801b936:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 801b938:	2301      	movs	r3, #1
 801b93a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 801b93c:	2310      	movs	r3, #16
 801b93e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 801b940:	2302      	movs	r3, #2
 801b942:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 801b944:	2300      	movs	r3, #0
 801b946:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 801b948:	2308      	movs	r3, #8
 801b94a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 801b94c:	2348      	movs	r3, #72	; 0x48
 801b94e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 801b950:	2302      	movs	r3, #2
 801b952:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 801b954:	2307      	movs	r3, #7
 801b956:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 801b958:	f107 0320 	add.w	r3, r7, #32
 801b95c:	4618      	mov	r0, r3
 801b95e:	f001 ff17 	bl	801d790 <HAL_RCC_OscConfig>
 801b962:	4603      	mov	r3, r0
 801b964:	2b00      	cmp	r3, #0
 801b966:	d001      	beq.n	801b96c <SystemClock_Config+0x98>
  {
    Error_Handler();
 801b968:	f000 f832 	bl	801b9d0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 801b96c:	230f      	movs	r3, #15
 801b96e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 801b970:	2302      	movs	r3, #2
 801b972:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 801b974:	2300      	movs	r3, #0
 801b976:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 801b978:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801b97c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 801b97e:	2300      	movs	r3, #0
 801b980:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 801b982:	f107 030c 	add.w	r3, r7, #12
 801b986:	2102      	movs	r1, #2
 801b988:	4618      	mov	r0, r3
 801b98a:	f002 f971 	bl	801dc70 <HAL_RCC_ClockConfig>
 801b98e:	4603      	mov	r3, r0
 801b990:	2b00      	cmp	r3, #0
 801b992:	d001      	beq.n	801b998 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 801b994:	f000 f81c 	bl	801b9d0 <Error_Handler>
  }
}
 801b998:	bf00      	nop
 801b99a:	3750      	adds	r7, #80	; 0x50
 801b99c:	46bd      	mov	sp, r7
 801b99e:	bd80      	pop	{r7, pc}
 801b9a0:	40023800 	.word	0x40023800
 801b9a4:	40007000 	.word	0x40007000

0801b9a8 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 801b9a8:	b480      	push	{r7}
 801b9aa:	b083      	sub	sp, #12
 801b9ac:	af00      	add	r7, sp, #0
 801b9ae:	4603      	mov	r3, r0
 801b9b0:	80fb      	strh	r3, [r7, #6]

	// interrupt blue button
	if(GPIO_Pin==B1_Pin){
 801b9b2:	88fb      	ldrh	r3, [r7, #6]
 801b9b4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801b9b8:	d102      	bne.n	801b9c0 <HAL_GPIO_EXTI_Callback+0x18>
		BLUE_BUTTON = true;
 801b9ba:	4b04      	ldr	r3, [pc, #16]	; (801b9cc <HAL_GPIO_EXTI_Callback+0x24>)
 801b9bc:	2201      	movs	r2, #1
 801b9be:	701a      	strb	r2, [r3, #0]
	}
}
 801b9c0:	bf00      	nop
 801b9c2:	370c      	adds	r7, #12
 801b9c4:	46bd      	mov	sp, r7
 801b9c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b9ca:	4770      	bx	lr
 801b9cc:	20000099 	.word	0x20000099

0801b9d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 801b9d0:	b480      	push	{r7}
 801b9d2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 801b9d4:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 801b9d6:	e7fe      	b.n	801b9d6 <Error_Handler+0x6>

0801b9d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 801b9d8:	b580      	push	{r7, lr}
 801b9da:	b082      	sub	sp, #8
 801b9dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 801b9de:	2300      	movs	r3, #0
 801b9e0:	607b      	str	r3, [r7, #4]
 801b9e2:	4b14      	ldr	r3, [pc, #80]	; (801ba34 <HAL_MspInit+0x5c>)
 801b9e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801b9e6:	4a13      	ldr	r2, [pc, #76]	; (801ba34 <HAL_MspInit+0x5c>)
 801b9e8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 801b9ec:	6453      	str	r3, [r2, #68]	; 0x44
 801b9ee:	4b11      	ldr	r3, [pc, #68]	; (801ba34 <HAL_MspInit+0x5c>)
 801b9f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801b9f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801b9f6:	607b      	str	r3, [r7, #4]
 801b9f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 801b9fa:	2300      	movs	r3, #0
 801b9fc:	603b      	str	r3, [r7, #0]
 801b9fe:	4b0d      	ldr	r3, [pc, #52]	; (801ba34 <HAL_MspInit+0x5c>)
 801ba00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801ba02:	4a0c      	ldr	r2, [pc, #48]	; (801ba34 <HAL_MspInit+0x5c>)
 801ba04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801ba08:	6413      	str	r3, [r2, #64]	; 0x40
 801ba0a:	4b0a      	ldr	r3, [pc, #40]	; (801ba34 <HAL_MspInit+0x5c>)
 801ba0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801ba0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801ba12:	603b      	str	r3, [r7, #0]
 801ba14:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 801ba16:	2007      	movs	r0, #7
 801ba18:	f000 fbae 	bl	801c178 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* FPU_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(FPU_IRQn, 0, 0);
 801ba1c:	2200      	movs	r2, #0
 801ba1e:	2100      	movs	r1, #0
 801ba20:	2051      	movs	r0, #81	; 0x51
 801ba22:	f000 fbb4 	bl	801c18e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FPU_IRQn);
 801ba26:	2051      	movs	r0, #81	; 0x51
 801ba28:	f000 fbcd 	bl	801c1c6 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 801ba2c:	bf00      	nop
 801ba2e:	3708      	adds	r7, #8
 801ba30:	46bd      	mov	sp, r7
 801ba32:	bd80      	pop	{r7, pc}
 801ba34:	40023800 	.word	0x40023800

0801ba38 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 801ba38:	b480      	push	{r7}
 801ba3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 801ba3c:	e7fe      	b.n	801ba3c <NMI_Handler+0x4>

0801ba3e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 801ba3e:	b480      	push	{r7}
 801ba40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 801ba42:	e7fe      	b.n	801ba42 <HardFault_Handler+0x4>

0801ba44 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 801ba44:	b480      	push	{r7}
 801ba46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 801ba48:	e7fe      	b.n	801ba48 <MemManage_Handler+0x4>

0801ba4a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 801ba4a:	b480      	push	{r7}
 801ba4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 801ba4e:	e7fe      	b.n	801ba4e <BusFault_Handler+0x4>

0801ba50 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 801ba50:	b480      	push	{r7}
 801ba52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 801ba54:	e7fe      	b.n	801ba54 <UsageFault_Handler+0x4>

0801ba56 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 801ba56:	b480      	push	{r7}
 801ba58:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 801ba5a:	bf00      	nop
 801ba5c:	46bd      	mov	sp, r7
 801ba5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ba62:	4770      	bx	lr

0801ba64 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 801ba64:	b480      	push	{r7}
 801ba66:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 801ba68:	bf00      	nop
 801ba6a:	46bd      	mov	sp, r7
 801ba6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ba70:	4770      	bx	lr

0801ba72 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 801ba72:	b480      	push	{r7}
 801ba74:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 801ba76:	bf00      	nop
 801ba78:	46bd      	mov	sp, r7
 801ba7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ba7e:	4770      	bx	lr

0801ba80 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 801ba80:	b580      	push	{r7, lr}
 801ba82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 801ba84:	f000 fa66 	bl	801bf54 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 801ba88:	bf00      	nop
 801ba8a:	bd80      	pop	{r7, pc}

0801ba8c <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 801ba8c:	b580      	push	{r7, lr}
 801ba8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */
  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch1);
 801ba90:	4802      	ldr	r0, [pc, #8]	; (801ba9c <DMA1_Stream5_IRQHandler+0x10>)
 801ba92:	f000 fcdb 	bl	801c44c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 801ba96:	bf00      	nop
 801ba98:	bd80      	pop	{r7, pc}
 801ba9a:	bf00      	nop
 801ba9c:	20004f94 	.word	0x20004f94

0801baa0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 801baa0:	b580      	push	{r7, lr}
 801baa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 801baa4:	4802      	ldr	r0, [pc, #8]	; (801bab0 <TIM2_IRQHandler+0x10>)
 801baa6:	f002 fce1 	bl	801e46c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 801baaa:	bf00      	nop
 801baac:	bd80      	pop	{r7, pc}
 801baae:	bf00      	nop
 801bab0:	20004ff4 	.word	0x20004ff4

0801bab4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 801bab4:	b580      	push	{r7, lr}
 801bab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 801bab8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 801babc:	f001 f8e2 	bl	801cc84 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 801bac0:	bf00      	nop
 801bac2:	bd80      	pop	{r7, pc}

0801bac4 <FPU_IRQHandler>:

/**
  * @brief This function handles FPU global interrupt.
  */
void FPU_IRQHandler(void)
{
 801bac4:	b480      	push	{r7}
 801bac6:	af00      	add	r7, sp, #0

  /* USER CODE END FPU_IRQn 0 */
  /* USER CODE BEGIN FPU_IRQn 1 */

  /* USER CODE END FPU_IRQn 1 */
}
 801bac8:	bf00      	nop
 801baca:	46bd      	mov	sp, r7
 801bacc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bad0:	4770      	bx	lr
	...

0801bad4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 801bad4:	b580      	push	{r7, lr}
 801bad6:	b086      	sub	sp, #24
 801bad8:	af00      	add	r7, sp, #0
 801bada:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 801badc:	4a14      	ldr	r2, [pc, #80]	; (801bb30 <_sbrk+0x5c>)
 801bade:	4b15      	ldr	r3, [pc, #84]	; (801bb34 <_sbrk+0x60>)
 801bae0:	1ad3      	subs	r3, r2, r3
 801bae2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 801bae4:	697b      	ldr	r3, [r7, #20]
 801bae6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 801bae8:	4b13      	ldr	r3, [pc, #76]	; (801bb38 <_sbrk+0x64>)
 801baea:	681b      	ldr	r3, [r3, #0]
 801baec:	2b00      	cmp	r3, #0
 801baee:	d102      	bne.n	801baf6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 801baf0:	4b11      	ldr	r3, [pc, #68]	; (801bb38 <_sbrk+0x64>)
 801baf2:	4a12      	ldr	r2, [pc, #72]	; (801bb3c <_sbrk+0x68>)
 801baf4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 801baf6:	4b10      	ldr	r3, [pc, #64]	; (801bb38 <_sbrk+0x64>)
 801baf8:	681a      	ldr	r2, [r3, #0]
 801bafa:	687b      	ldr	r3, [r7, #4]
 801bafc:	4413      	add	r3, r2
 801bafe:	693a      	ldr	r2, [r7, #16]
 801bb00:	429a      	cmp	r2, r3
 801bb02:	d207      	bcs.n	801bb14 <_sbrk+0x40>
  {
    errno = ENOMEM;
 801bb04:	f003 ff0e 	bl	801f924 <__errno>
 801bb08:	4602      	mov	r2, r0
 801bb0a:	230c      	movs	r3, #12
 801bb0c:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 801bb0e:	f04f 33ff 	mov.w	r3, #4294967295
 801bb12:	e009      	b.n	801bb28 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 801bb14:	4b08      	ldr	r3, [pc, #32]	; (801bb38 <_sbrk+0x64>)
 801bb16:	681b      	ldr	r3, [r3, #0]
 801bb18:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 801bb1a:	4b07      	ldr	r3, [pc, #28]	; (801bb38 <_sbrk+0x64>)
 801bb1c:	681a      	ldr	r2, [r3, #0]
 801bb1e:	687b      	ldr	r3, [r7, #4]
 801bb20:	4413      	add	r3, r2
 801bb22:	4a05      	ldr	r2, [pc, #20]	; (801bb38 <_sbrk+0x64>)
 801bb24:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 801bb26:	68fb      	ldr	r3, [r7, #12]
}
 801bb28:	4618      	mov	r0, r3
 801bb2a:	3718      	adds	r7, #24
 801bb2c:	46bd      	mov	sp, r7
 801bb2e:	bd80      	pop	{r7, pc}
 801bb30:	20018000 	.word	0x20018000
 801bb34:	00000400 	.word	0x00000400
 801bb38:	2000009c 	.word	0x2000009c
 801bb3c:	20005080 	.word	0x20005080

0801bb40 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 801bb40:	b480      	push	{r7}
 801bb42:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 801bb44:	4b08      	ldr	r3, [pc, #32]	; (801bb68 <SystemInit+0x28>)
 801bb46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801bb4a:	4a07      	ldr	r2, [pc, #28]	; (801bb68 <SystemInit+0x28>)
 801bb4c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 801bb50:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 801bb54:	4b04      	ldr	r3, [pc, #16]	; (801bb68 <SystemInit+0x28>)
 801bb56:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 801bb5a:	609a      	str	r2, [r3, #8]
#endif
}
 801bb5c:	bf00      	nop
 801bb5e:	46bd      	mov	sp, r7
 801bb60:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bb64:	4770      	bx	lr
 801bb66:	bf00      	nop
 801bb68:	e000ed00 	.word	0xe000ed00

0801bb6c <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
DMA_HandleTypeDef hdma_tim2_ch1;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 801bb6c:	b580      	push	{r7, lr}
 801bb6e:	b08e      	sub	sp, #56	; 0x38
 801bb70:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 801bb72:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801bb76:	2200      	movs	r2, #0
 801bb78:	601a      	str	r2, [r3, #0]
 801bb7a:	605a      	str	r2, [r3, #4]
 801bb7c:	609a      	str	r2, [r3, #8]
 801bb7e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 801bb80:	f107 0320 	add.w	r3, r7, #32
 801bb84:	2200      	movs	r2, #0
 801bb86:	601a      	str	r2, [r3, #0]
 801bb88:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 801bb8a:	1d3b      	adds	r3, r7, #4
 801bb8c:	2200      	movs	r2, #0
 801bb8e:	601a      	str	r2, [r3, #0]
 801bb90:	605a      	str	r2, [r3, #4]
 801bb92:	609a      	str	r2, [r3, #8]
 801bb94:	60da      	str	r2, [r3, #12]
 801bb96:	611a      	str	r2, [r3, #16]
 801bb98:	615a      	str	r2, [r3, #20]
 801bb9a:	619a      	str	r2, [r3, #24]

  htim2.Instance = TIM2;
 801bb9c:	4b2c      	ldr	r3, [pc, #176]	; (801bc50 <MX_TIM2_Init+0xe4>)
 801bb9e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 801bba2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1-1;
 801bba4:	4b2a      	ldr	r3, [pc, #168]	; (801bc50 <MX_TIM2_Init+0xe4>)
 801bba6:	2200      	movs	r2, #0
 801bba8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 801bbaa:	4b29      	ldr	r3, [pc, #164]	; (801bc50 <MX_TIM2_Init+0xe4>)
 801bbac:	2200      	movs	r2, #0
 801bbae:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 90-1;
 801bbb0:	4b27      	ldr	r3, [pc, #156]	; (801bc50 <MX_TIM2_Init+0xe4>)
 801bbb2:	2259      	movs	r2, #89	; 0x59
 801bbb4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 801bbb6:	4b26      	ldr	r3, [pc, #152]	; (801bc50 <MX_TIM2_Init+0xe4>)
 801bbb8:	2200      	movs	r2, #0
 801bbba:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 801bbbc:	4b24      	ldr	r3, [pc, #144]	; (801bc50 <MX_TIM2_Init+0xe4>)
 801bbbe:	2280      	movs	r2, #128	; 0x80
 801bbc0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 801bbc2:	4823      	ldr	r0, [pc, #140]	; (801bc50 <MX_TIM2_Init+0xe4>)
 801bbc4:	f002 fa46 	bl	801e054 <HAL_TIM_Base_Init>
 801bbc8:	4603      	mov	r3, r0
 801bbca:	2b00      	cmp	r3, #0
 801bbcc:	d001      	beq.n	801bbd2 <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 801bbce:	f7ff feff 	bl	801b9d0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 801bbd2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801bbd6:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 801bbd8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801bbdc:	4619      	mov	r1, r3
 801bbde:	481c      	ldr	r0, [pc, #112]	; (801bc50 <MX_TIM2_Init+0xe4>)
 801bbe0:	f002 fe12 	bl	801e808 <HAL_TIM_ConfigClockSource>
 801bbe4:	4603      	mov	r3, r0
 801bbe6:	2b00      	cmp	r3, #0
 801bbe8:	d001      	beq.n	801bbee <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 801bbea:	f7ff fef1 	bl	801b9d0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 801bbee:	4818      	ldr	r0, [pc, #96]	; (801bc50 <MX_TIM2_Init+0xe4>)
 801bbf0:	f002 fa5b 	bl	801e0aa <HAL_TIM_PWM_Init>
 801bbf4:	4603      	mov	r3, r0
 801bbf6:	2b00      	cmp	r3, #0
 801bbf8:	d001      	beq.n	801bbfe <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 801bbfa:	f7ff fee9 	bl	801b9d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 801bbfe:	2300      	movs	r3, #0
 801bc00:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 801bc02:	2300      	movs	r3, #0
 801bc04:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 801bc06:	f107 0320 	add.w	r3, r7, #32
 801bc0a:	4619      	mov	r1, r3
 801bc0c:	4810      	ldr	r0, [pc, #64]	; (801bc50 <MX_TIM2_Init+0xe4>)
 801bc0e:	f003 fa3d 	bl	801f08c <HAL_TIMEx_MasterConfigSynchronization>
 801bc12:	4603      	mov	r3, r0
 801bc14:	2b00      	cmp	r3, #0
 801bc16:	d001      	beq.n	801bc1c <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 801bc18:	f7ff feda 	bl	801b9d0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 801bc1c:	2360      	movs	r3, #96	; 0x60
 801bc1e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1;
 801bc20:	2301      	movs	r3, #1
 801bc22:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 801bc24:	2300      	movs	r3, #0
 801bc26:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 801bc28:	2300      	movs	r3, #0
 801bc2a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 801bc2c:	1d3b      	adds	r3, r7, #4
 801bc2e:	2200      	movs	r2, #0
 801bc30:	4619      	mov	r1, r3
 801bc32:	4807      	ldr	r0, [pc, #28]	; (801bc50 <MX_TIM2_Init+0xe4>)
 801bc34:	f002 fd22 	bl	801e67c <HAL_TIM_PWM_ConfigChannel>
 801bc38:	4603      	mov	r3, r0
 801bc3a:	2b00      	cmp	r3, #0
 801bc3c:	d001      	beq.n	801bc42 <MX_TIM2_Init+0xd6>
  {
    Error_Handler();
 801bc3e:	f7ff fec7 	bl	801b9d0 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim2);
 801bc42:	4803      	ldr	r0, [pc, #12]	; (801bc50 <MX_TIM2_Init+0xe4>)
 801bc44:	f000 f860 	bl	801bd08 <HAL_TIM_MspPostInit>

}
 801bc48:	bf00      	nop
 801bc4a:	3738      	adds	r7, #56	; 0x38
 801bc4c:	46bd      	mov	sp, r7
 801bc4e:	bd80      	pop	{r7, pc}
 801bc50:	20004ff4 	.word	0x20004ff4

0801bc54 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 801bc54:	b580      	push	{r7, lr}
 801bc56:	b084      	sub	sp, #16
 801bc58:	af00      	add	r7, sp, #0
 801bc5a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 801bc5c:	687b      	ldr	r3, [r7, #4]
 801bc5e:	681b      	ldr	r3, [r3, #0]
 801bc60:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801bc64:	d146      	bne.n	801bcf4 <HAL_TIM_Base_MspInit+0xa0>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 801bc66:	2300      	movs	r3, #0
 801bc68:	60fb      	str	r3, [r7, #12]
 801bc6a:	4b24      	ldr	r3, [pc, #144]	; (801bcfc <HAL_TIM_Base_MspInit+0xa8>)
 801bc6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801bc6e:	4a23      	ldr	r2, [pc, #140]	; (801bcfc <HAL_TIM_Base_MspInit+0xa8>)
 801bc70:	f043 0301 	orr.w	r3, r3, #1
 801bc74:	6413      	str	r3, [r2, #64]	; 0x40
 801bc76:	4b21      	ldr	r3, [pc, #132]	; (801bcfc <HAL_TIM_Base_MspInit+0xa8>)
 801bc78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801bc7a:	f003 0301 	and.w	r3, r3, #1
 801bc7e:	60fb      	str	r3, [r7, #12]
 801bc80:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 DMA Init */
    /* TIM2_CH1 Init */
    hdma_tim2_ch1.Instance = DMA1_Stream5;
 801bc82:	4b1f      	ldr	r3, [pc, #124]	; (801bd00 <HAL_TIM_Base_MspInit+0xac>)
 801bc84:	4a1f      	ldr	r2, [pc, #124]	; (801bd04 <HAL_TIM_Base_MspInit+0xb0>)
 801bc86:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch1.Init.Channel = DMA_CHANNEL_3;
 801bc88:	4b1d      	ldr	r3, [pc, #116]	; (801bd00 <HAL_TIM_Base_MspInit+0xac>)
 801bc8a:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 801bc8e:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 801bc90:	4b1b      	ldr	r3, [pc, #108]	; (801bd00 <HAL_TIM_Base_MspInit+0xac>)
 801bc92:	2240      	movs	r2, #64	; 0x40
 801bc94:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 801bc96:	4b1a      	ldr	r3, [pc, #104]	; (801bd00 <HAL_TIM_Base_MspInit+0xac>)
 801bc98:	2200      	movs	r2, #0
 801bc9a:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch1.Init.MemInc = DMA_MINC_ENABLE;
 801bc9c:	4b18      	ldr	r3, [pc, #96]	; (801bd00 <HAL_TIM_Base_MspInit+0xac>)
 801bc9e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 801bca2:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 801bca4:	4b16      	ldr	r3, [pc, #88]	; (801bd00 <HAL_TIM_Base_MspInit+0xac>)
 801bca6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 801bcaa:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 801bcac:	4b14      	ldr	r3, [pc, #80]	; (801bd00 <HAL_TIM_Base_MspInit+0xac>)
 801bcae:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 801bcb2:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch1.Init.Mode = DMA_CIRCULAR;
 801bcb4:	4b12      	ldr	r3, [pc, #72]	; (801bd00 <HAL_TIM_Base_MspInit+0xac>)
 801bcb6:	f44f 7280 	mov.w	r2, #256	; 0x100
 801bcba:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch1.Init.Priority = DMA_PRIORITY_LOW;
 801bcbc:	4b10      	ldr	r3, [pc, #64]	; (801bd00 <HAL_TIM_Base_MspInit+0xac>)
 801bcbe:	2200      	movs	r2, #0
 801bcc0:	621a      	str	r2, [r3, #32]
    hdma_tim2_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 801bcc2:	4b0f      	ldr	r3, [pc, #60]	; (801bd00 <HAL_TIM_Base_MspInit+0xac>)
 801bcc4:	2200      	movs	r2, #0
 801bcc6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim2_ch1) != HAL_OK)
 801bcc8:	480d      	ldr	r0, [pc, #52]	; (801bd00 <HAL_TIM_Base_MspInit+0xac>)
 801bcca:	f000 fa97 	bl	801c1fc <HAL_DMA_Init>
 801bcce:	4603      	mov	r3, r0
 801bcd0:	2b00      	cmp	r3, #0
 801bcd2:	d001      	beq.n	801bcd8 <HAL_TIM_Base_MspInit+0x84>
    {
      Error_Handler();
 801bcd4:	f7ff fe7c 	bl	801b9d0 <Error_Handler>
    }

    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC1],hdma_tim2_ch1);
 801bcd8:	687b      	ldr	r3, [r7, #4]
 801bcda:	4a09      	ldr	r2, [pc, #36]	; (801bd00 <HAL_TIM_Base_MspInit+0xac>)
 801bcdc:	625a      	str	r2, [r3, #36]	; 0x24
 801bcde:	4a08      	ldr	r2, [pc, #32]	; (801bd00 <HAL_TIM_Base_MspInit+0xac>)
 801bce0:	687b      	ldr	r3, [r7, #4]
 801bce2:	6393      	str	r3, [r2, #56]	; 0x38

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 801bce4:	2200      	movs	r2, #0
 801bce6:	2100      	movs	r1, #0
 801bce8:	201c      	movs	r0, #28
 801bcea:	f000 fa50 	bl	801c18e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 801bcee:	201c      	movs	r0, #28
 801bcf0:	f000 fa69 	bl	801c1c6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 801bcf4:	bf00      	nop
 801bcf6:	3710      	adds	r7, #16
 801bcf8:	46bd      	mov	sp, r7
 801bcfa:	bd80      	pop	{r7, pc}
 801bcfc:	40023800 	.word	0x40023800
 801bd00:	20004f94 	.word	0x20004f94
 801bd04:	40026088 	.word	0x40026088

0801bd08 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 801bd08:	b580      	push	{r7, lr}
 801bd0a:	b088      	sub	sp, #32
 801bd0c:	af00      	add	r7, sp, #0
 801bd0e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801bd10:	f107 030c 	add.w	r3, r7, #12
 801bd14:	2200      	movs	r2, #0
 801bd16:	601a      	str	r2, [r3, #0]
 801bd18:	605a      	str	r2, [r3, #4]
 801bd1a:	609a      	str	r2, [r3, #8]
 801bd1c:	60da      	str	r2, [r3, #12]
 801bd1e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 801bd20:	687b      	ldr	r3, [r7, #4]
 801bd22:	681b      	ldr	r3, [r3, #0]
 801bd24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801bd28:	d11d      	bne.n	801bd66 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 801bd2a:	2300      	movs	r3, #0
 801bd2c:	60bb      	str	r3, [r7, #8]
 801bd2e:	4b10      	ldr	r3, [pc, #64]	; (801bd70 <HAL_TIM_MspPostInit+0x68>)
 801bd30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801bd32:	4a0f      	ldr	r2, [pc, #60]	; (801bd70 <HAL_TIM_MspPostInit+0x68>)
 801bd34:	f043 0301 	orr.w	r3, r3, #1
 801bd38:	6313      	str	r3, [r2, #48]	; 0x30
 801bd3a:	4b0d      	ldr	r3, [pc, #52]	; (801bd70 <HAL_TIM_MspPostInit+0x68>)
 801bd3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801bd3e:	f003 0301 	and.w	r3, r3, #1
 801bd42:	60bb      	str	r3, [r7, #8]
 801bd44:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 801bd46:	2301      	movs	r3, #1
 801bd48:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801bd4a:	2302      	movs	r3, #2
 801bd4c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801bd4e:	2300      	movs	r3, #0
 801bd50:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801bd52:	2300      	movs	r3, #0
 801bd54:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 801bd56:	2301      	movs	r3, #1
 801bd58:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801bd5a:	f107 030c 	add.w	r3, r7, #12
 801bd5e:	4619      	mov	r1, r3
 801bd60:	4804      	ldr	r0, [pc, #16]	; (801bd74 <HAL_TIM_MspPostInit+0x6c>)
 801bd62:	f000 fddb 	bl	801c91c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 801bd66:	bf00      	nop
 801bd68:	3720      	adds	r7, #32
 801bd6a:	46bd      	mov	sp, r7
 801bd6c:	bd80      	pop	{r7, pc}
 801bd6e:	bf00      	nop
 801bd70:	40023800 	.word	0x40023800
 801bd74:	40020000 	.word	0x40020000

0801bd78 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 801bd78:	b580      	push	{r7, lr}
 801bd7a:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 801bd7c:	4b11      	ldr	r3, [pc, #68]	; (801bdc4 <MX_USART2_UART_Init+0x4c>)
 801bd7e:	4a12      	ldr	r2, [pc, #72]	; (801bdc8 <MX_USART2_UART_Init+0x50>)
 801bd80:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 801bd82:	4b10      	ldr	r3, [pc, #64]	; (801bdc4 <MX_USART2_UART_Init+0x4c>)
 801bd84:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 801bd88:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 801bd8a:	4b0e      	ldr	r3, [pc, #56]	; (801bdc4 <MX_USART2_UART_Init+0x4c>)
 801bd8c:	2200      	movs	r2, #0
 801bd8e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 801bd90:	4b0c      	ldr	r3, [pc, #48]	; (801bdc4 <MX_USART2_UART_Init+0x4c>)
 801bd92:	2200      	movs	r2, #0
 801bd94:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 801bd96:	4b0b      	ldr	r3, [pc, #44]	; (801bdc4 <MX_USART2_UART_Init+0x4c>)
 801bd98:	2200      	movs	r2, #0
 801bd9a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 801bd9c:	4b09      	ldr	r3, [pc, #36]	; (801bdc4 <MX_USART2_UART_Init+0x4c>)
 801bd9e:	220c      	movs	r2, #12
 801bda0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 801bda2:	4b08      	ldr	r3, [pc, #32]	; (801bdc4 <MX_USART2_UART_Init+0x4c>)
 801bda4:	2200      	movs	r2, #0
 801bda6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 801bda8:	4b06      	ldr	r3, [pc, #24]	; (801bdc4 <MX_USART2_UART_Init+0x4c>)
 801bdaa:	2200      	movs	r2, #0
 801bdac:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 801bdae:	4805      	ldr	r0, [pc, #20]	; (801bdc4 <MX_USART2_UART_Init+0x4c>)
 801bdb0:	f003 f9ee 	bl	801f190 <HAL_UART_Init>
 801bdb4:	4603      	mov	r3, r0
 801bdb6:	2b00      	cmp	r3, #0
 801bdb8:	d001      	beq.n	801bdbe <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 801bdba:	f7ff fe09 	bl	801b9d0 <Error_Handler>
  }

}
 801bdbe:	bf00      	nop
 801bdc0:	bd80      	pop	{r7, pc}
 801bdc2:	bf00      	nop
 801bdc4:	20005034 	.word	0x20005034
 801bdc8:	40004400 	.word	0x40004400

0801bdcc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 801bdcc:	b580      	push	{r7, lr}
 801bdce:	b08a      	sub	sp, #40	; 0x28
 801bdd0:	af00      	add	r7, sp, #0
 801bdd2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801bdd4:	f107 0314 	add.w	r3, r7, #20
 801bdd8:	2200      	movs	r2, #0
 801bdda:	601a      	str	r2, [r3, #0]
 801bddc:	605a      	str	r2, [r3, #4]
 801bdde:	609a      	str	r2, [r3, #8]
 801bde0:	60da      	str	r2, [r3, #12]
 801bde2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 801bde4:	687b      	ldr	r3, [r7, #4]
 801bde6:	681b      	ldr	r3, [r3, #0]
 801bde8:	4a19      	ldr	r2, [pc, #100]	; (801be50 <HAL_UART_MspInit+0x84>)
 801bdea:	4293      	cmp	r3, r2
 801bdec:	d12b      	bne.n	801be46 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 801bdee:	2300      	movs	r3, #0
 801bdf0:	613b      	str	r3, [r7, #16]
 801bdf2:	4b18      	ldr	r3, [pc, #96]	; (801be54 <HAL_UART_MspInit+0x88>)
 801bdf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801bdf6:	4a17      	ldr	r2, [pc, #92]	; (801be54 <HAL_UART_MspInit+0x88>)
 801bdf8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 801bdfc:	6413      	str	r3, [r2, #64]	; 0x40
 801bdfe:	4b15      	ldr	r3, [pc, #84]	; (801be54 <HAL_UART_MspInit+0x88>)
 801be00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801be02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801be06:	613b      	str	r3, [r7, #16]
 801be08:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 801be0a:	2300      	movs	r3, #0
 801be0c:	60fb      	str	r3, [r7, #12]
 801be0e:	4b11      	ldr	r3, [pc, #68]	; (801be54 <HAL_UART_MspInit+0x88>)
 801be10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801be12:	4a10      	ldr	r2, [pc, #64]	; (801be54 <HAL_UART_MspInit+0x88>)
 801be14:	f043 0301 	orr.w	r3, r3, #1
 801be18:	6313      	str	r3, [r2, #48]	; 0x30
 801be1a:	4b0e      	ldr	r3, [pc, #56]	; (801be54 <HAL_UART_MspInit+0x88>)
 801be1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801be1e:	f003 0301 	and.w	r3, r3, #1
 801be22:	60fb      	str	r3, [r7, #12]
 801be24:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 801be26:	230c      	movs	r3, #12
 801be28:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801be2a:	2302      	movs	r3, #2
 801be2c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801be2e:	2300      	movs	r3, #0
 801be30:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801be32:	2300      	movs	r3, #0
 801be34:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 801be36:	2307      	movs	r3, #7
 801be38:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801be3a:	f107 0314 	add.w	r3, r7, #20
 801be3e:	4619      	mov	r1, r3
 801be40:	4805      	ldr	r0, [pc, #20]	; (801be58 <HAL_UART_MspInit+0x8c>)
 801be42:	f000 fd6b 	bl	801c91c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 801be46:	bf00      	nop
 801be48:	3728      	adds	r7, #40	; 0x28
 801be4a:	46bd      	mov	sp, r7
 801be4c:	bd80      	pop	{r7, pc}
 801be4e:	bf00      	nop
 801be50:	40004400 	.word	0x40004400
 801be54:	40023800 	.word	0x40023800
 801be58:	40020000 	.word	0x40020000

0801be5c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 801be5c:	f8df d034 	ldr.w	sp, [pc, #52]	; 801be94 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 801be60:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 801be62:	e003      	b.n	801be6c <LoopCopyDataInit>

0801be64 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 801be64:	4b0c      	ldr	r3, [pc, #48]	; (801be98 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 801be66:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 801be68:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 801be6a:	3104      	adds	r1, #4

0801be6c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 801be6c:	480b      	ldr	r0, [pc, #44]	; (801be9c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 801be6e:	4b0c      	ldr	r3, [pc, #48]	; (801bea0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 801be70:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 801be72:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 801be74:	d3f6      	bcc.n	801be64 <CopyDataInit>
  ldr  r2, =_sbss
 801be76:	4a0b      	ldr	r2, [pc, #44]	; (801bea4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 801be78:	e002      	b.n	801be80 <LoopFillZerobss>

0801be7a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 801be7a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 801be7c:	f842 3b04 	str.w	r3, [r2], #4

0801be80 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 801be80:	4b09      	ldr	r3, [pc, #36]	; (801bea8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 801be82:	429a      	cmp	r2, r3
  bcc  FillZerobss
 801be84:	d3f9      	bcc.n	801be7a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 801be86:	f7ff fe5b 	bl	801bb40 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 801be8a:	f003 fd51 	bl	801f930 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 801be8e:	f7ff fca3 	bl	801b7d8 <main>
  bx  lr    
 801be92:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 801be94:	20018000 	.word	0x20018000
  ldr  r3, =_sidata
 801be98:	0802aa18 	.word	0x0802aa18
  ldr  r0, =_sdata
 801be9c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 801bea0:	20000074 	.word	0x20000074
  ldr  r2, =_sbss
 801bea4:	20000074 	.word	0x20000074
  ldr  r3, = _ebss
 801bea8:	2000507c 	.word	0x2000507c

0801beac <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 801beac:	e7fe      	b.n	801beac <ADC_IRQHandler>
	...

0801beb0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 801beb0:	b580      	push	{r7, lr}
 801beb2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 801beb4:	4b0e      	ldr	r3, [pc, #56]	; (801bef0 <HAL_Init+0x40>)
 801beb6:	681b      	ldr	r3, [r3, #0]
 801beb8:	4a0d      	ldr	r2, [pc, #52]	; (801bef0 <HAL_Init+0x40>)
 801beba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 801bebe:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 801bec0:	4b0b      	ldr	r3, [pc, #44]	; (801bef0 <HAL_Init+0x40>)
 801bec2:	681b      	ldr	r3, [r3, #0]
 801bec4:	4a0a      	ldr	r2, [pc, #40]	; (801bef0 <HAL_Init+0x40>)
 801bec6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 801beca:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 801becc:	4b08      	ldr	r3, [pc, #32]	; (801bef0 <HAL_Init+0x40>)
 801bece:	681b      	ldr	r3, [r3, #0]
 801bed0:	4a07      	ldr	r2, [pc, #28]	; (801bef0 <HAL_Init+0x40>)
 801bed2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801bed6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 801bed8:	2003      	movs	r0, #3
 801beda:	f000 f94d 	bl	801c178 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 801bede:	2000      	movs	r0, #0
 801bee0:	f000 f808 	bl	801bef4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 801bee4:	f7ff fd78 	bl	801b9d8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 801bee8:	2300      	movs	r3, #0
}
 801beea:	4618      	mov	r0, r3
 801beec:	bd80      	pop	{r7, pc}
 801beee:	bf00      	nop
 801bef0:	40023c00 	.word	0x40023c00

0801bef4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 801bef4:	b580      	push	{r7, lr}
 801bef6:	b082      	sub	sp, #8
 801bef8:	af00      	add	r7, sp, #0
 801befa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 801befc:	4b12      	ldr	r3, [pc, #72]	; (801bf48 <HAL_InitTick+0x54>)
 801befe:	681a      	ldr	r2, [r3, #0]
 801bf00:	4b12      	ldr	r3, [pc, #72]	; (801bf4c <HAL_InitTick+0x58>)
 801bf02:	781b      	ldrb	r3, [r3, #0]
 801bf04:	4619      	mov	r1, r3
 801bf06:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 801bf0a:	fbb3 f3f1 	udiv	r3, r3, r1
 801bf0e:	fbb2 f3f3 	udiv	r3, r2, r3
 801bf12:	4618      	mov	r0, r3
 801bf14:	f000 f965 	bl	801c1e2 <HAL_SYSTICK_Config>
 801bf18:	4603      	mov	r3, r0
 801bf1a:	2b00      	cmp	r3, #0
 801bf1c:	d001      	beq.n	801bf22 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 801bf1e:	2301      	movs	r3, #1
 801bf20:	e00e      	b.n	801bf40 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 801bf22:	687b      	ldr	r3, [r7, #4]
 801bf24:	2b0f      	cmp	r3, #15
 801bf26:	d80a      	bhi.n	801bf3e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 801bf28:	2200      	movs	r2, #0
 801bf2a:	6879      	ldr	r1, [r7, #4]
 801bf2c:	f04f 30ff 	mov.w	r0, #4294967295
 801bf30:	f000 f92d 	bl	801c18e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 801bf34:	4a06      	ldr	r2, [pc, #24]	; (801bf50 <HAL_InitTick+0x5c>)
 801bf36:	687b      	ldr	r3, [r7, #4]
 801bf38:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 801bf3a:	2300      	movs	r3, #0
 801bf3c:	e000      	b.n	801bf40 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 801bf3e:	2301      	movs	r3, #1
}
 801bf40:	4618      	mov	r0, r3
 801bf42:	3708      	adds	r7, #8
 801bf44:	46bd      	mov	sp, r7
 801bf46:	bd80      	pop	{r7, pc}
 801bf48:	20000000 	.word	0x20000000
 801bf4c:	20000008 	.word	0x20000008
 801bf50:	20000004 	.word	0x20000004

0801bf54 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 801bf54:	b480      	push	{r7}
 801bf56:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 801bf58:	4b06      	ldr	r3, [pc, #24]	; (801bf74 <HAL_IncTick+0x20>)
 801bf5a:	781b      	ldrb	r3, [r3, #0]
 801bf5c:	461a      	mov	r2, r3
 801bf5e:	4b06      	ldr	r3, [pc, #24]	; (801bf78 <HAL_IncTick+0x24>)
 801bf60:	681b      	ldr	r3, [r3, #0]
 801bf62:	4413      	add	r3, r2
 801bf64:	4a04      	ldr	r2, [pc, #16]	; (801bf78 <HAL_IncTick+0x24>)
 801bf66:	6013      	str	r3, [r2, #0]
}
 801bf68:	bf00      	nop
 801bf6a:	46bd      	mov	sp, r7
 801bf6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bf70:	4770      	bx	lr
 801bf72:	bf00      	nop
 801bf74:	20000008 	.word	0x20000008
 801bf78:	20005074 	.word	0x20005074

0801bf7c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 801bf7c:	b480      	push	{r7}
 801bf7e:	af00      	add	r7, sp, #0
  return uwTick;
 801bf80:	4b03      	ldr	r3, [pc, #12]	; (801bf90 <HAL_GetTick+0x14>)
 801bf82:	681b      	ldr	r3, [r3, #0]
}
 801bf84:	4618      	mov	r0, r3
 801bf86:	46bd      	mov	sp, r7
 801bf88:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bf8c:	4770      	bx	lr
 801bf8e:	bf00      	nop
 801bf90:	20005074 	.word	0x20005074

0801bf94 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 801bf94:	b580      	push	{r7, lr}
 801bf96:	b084      	sub	sp, #16
 801bf98:	af00      	add	r7, sp, #0
 801bf9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 801bf9c:	f7ff ffee 	bl	801bf7c <HAL_GetTick>
 801bfa0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 801bfa2:	687b      	ldr	r3, [r7, #4]
 801bfa4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 801bfa6:	68fb      	ldr	r3, [r7, #12]
 801bfa8:	f1b3 3fff 	cmp.w	r3, #4294967295
 801bfac:	d005      	beq.n	801bfba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 801bfae:	4b09      	ldr	r3, [pc, #36]	; (801bfd4 <HAL_Delay+0x40>)
 801bfb0:	781b      	ldrb	r3, [r3, #0]
 801bfb2:	461a      	mov	r2, r3
 801bfb4:	68fb      	ldr	r3, [r7, #12]
 801bfb6:	4413      	add	r3, r2
 801bfb8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 801bfba:	bf00      	nop
 801bfbc:	f7ff ffde 	bl	801bf7c <HAL_GetTick>
 801bfc0:	4602      	mov	r2, r0
 801bfc2:	68bb      	ldr	r3, [r7, #8]
 801bfc4:	1ad3      	subs	r3, r2, r3
 801bfc6:	68fa      	ldr	r2, [r7, #12]
 801bfc8:	429a      	cmp	r2, r3
 801bfca:	d8f7      	bhi.n	801bfbc <HAL_Delay+0x28>
  {
  }
}
 801bfcc:	bf00      	nop
 801bfce:	3710      	adds	r7, #16
 801bfd0:	46bd      	mov	sp, r7
 801bfd2:	bd80      	pop	{r7, pc}
 801bfd4:	20000008 	.word	0x20000008

0801bfd8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 801bfd8:	b480      	push	{r7}
 801bfda:	b085      	sub	sp, #20
 801bfdc:	af00      	add	r7, sp, #0
 801bfde:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 801bfe0:	687b      	ldr	r3, [r7, #4]
 801bfe2:	f003 0307 	and.w	r3, r3, #7
 801bfe6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 801bfe8:	4b0c      	ldr	r3, [pc, #48]	; (801c01c <__NVIC_SetPriorityGrouping+0x44>)
 801bfea:	68db      	ldr	r3, [r3, #12]
 801bfec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 801bfee:	68ba      	ldr	r2, [r7, #8]
 801bff0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 801bff4:	4013      	ands	r3, r2
 801bff6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 801bff8:	68fb      	ldr	r3, [r7, #12]
 801bffa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 801bffc:	68bb      	ldr	r3, [r7, #8]
 801bffe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 801c000:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 801c004:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 801c008:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 801c00a:	4a04      	ldr	r2, [pc, #16]	; (801c01c <__NVIC_SetPriorityGrouping+0x44>)
 801c00c:	68bb      	ldr	r3, [r7, #8]
 801c00e:	60d3      	str	r3, [r2, #12]
}
 801c010:	bf00      	nop
 801c012:	3714      	adds	r7, #20
 801c014:	46bd      	mov	sp, r7
 801c016:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c01a:	4770      	bx	lr
 801c01c:	e000ed00 	.word	0xe000ed00

0801c020 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 801c020:	b480      	push	{r7}
 801c022:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 801c024:	4b04      	ldr	r3, [pc, #16]	; (801c038 <__NVIC_GetPriorityGrouping+0x18>)
 801c026:	68db      	ldr	r3, [r3, #12]
 801c028:	0a1b      	lsrs	r3, r3, #8
 801c02a:	f003 0307 	and.w	r3, r3, #7
}
 801c02e:	4618      	mov	r0, r3
 801c030:	46bd      	mov	sp, r7
 801c032:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c036:	4770      	bx	lr
 801c038:	e000ed00 	.word	0xe000ed00

0801c03c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 801c03c:	b480      	push	{r7}
 801c03e:	b083      	sub	sp, #12
 801c040:	af00      	add	r7, sp, #0
 801c042:	4603      	mov	r3, r0
 801c044:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 801c046:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801c04a:	2b00      	cmp	r3, #0
 801c04c:	db0b      	blt.n	801c066 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 801c04e:	79fb      	ldrb	r3, [r7, #7]
 801c050:	f003 021f 	and.w	r2, r3, #31
 801c054:	4907      	ldr	r1, [pc, #28]	; (801c074 <__NVIC_EnableIRQ+0x38>)
 801c056:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801c05a:	095b      	lsrs	r3, r3, #5
 801c05c:	2001      	movs	r0, #1
 801c05e:	fa00 f202 	lsl.w	r2, r0, r2
 801c062:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 801c066:	bf00      	nop
 801c068:	370c      	adds	r7, #12
 801c06a:	46bd      	mov	sp, r7
 801c06c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c070:	4770      	bx	lr
 801c072:	bf00      	nop
 801c074:	e000e100 	.word	0xe000e100

0801c078 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 801c078:	b480      	push	{r7}
 801c07a:	b083      	sub	sp, #12
 801c07c:	af00      	add	r7, sp, #0
 801c07e:	4603      	mov	r3, r0
 801c080:	6039      	str	r1, [r7, #0]
 801c082:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 801c084:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801c088:	2b00      	cmp	r3, #0
 801c08a:	db0a      	blt.n	801c0a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801c08c:	683b      	ldr	r3, [r7, #0]
 801c08e:	b2da      	uxtb	r2, r3
 801c090:	490c      	ldr	r1, [pc, #48]	; (801c0c4 <__NVIC_SetPriority+0x4c>)
 801c092:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801c096:	0112      	lsls	r2, r2, #4
 801c098:	b2d2      	uxtb	r2, r2
 801c09a:	440b      	add	r3, r1
 801c09c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 801c0a0:	e00a      	b.n	801c0b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801c0a2:	683b      	ldr	r3, [r7, #0]
 801c0a4:	b2da      	uxtb	r2, r3
 801c0a6:	4908      	ldr	r1, [pc, #32]	; (801c0c8 <__NVIC_SetPriority+0x50>)
 801c0a8:	79fb      	ldrb	r3, [r7, #7]
 801c0aa:	f003 030f 	and.w	r3, r3, #15
 801c0ae:	3b04      	subs	r3, #4
 801c0b0:	0112      	lsls	r2, r2, #4
 801c0b2:	b2d2      	uxtb	r2, r2
 801c0b4:	440b      	add	r3, r1
 801c0b6:	761a      	strb	r2, [r3, #24]
}
 801c0b8:	bf00      	nop
 801c0ba:	370c      	adds	r7, #12
 801c0bc:	46bd      	mov	sp, r7
 801c0be:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c0c2:	4770      	bx	lr
 801c0c4:	e000e100 	.word	0xe000e100
 801c0c8:	e000ed00 	.word	0xe000ed00

0801c0cc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 801c0cc:	b480      	push	{r7}
 801c0ce:	b089      	sub	sp, #36	; 0x24
 801c0d0:	af00      	add	r7, sp, #0
 801c0d2:	60f8      	str	r0, [r7, #12]
 801c0d4:	60b9      	str	r1, [r7, #8]
 801c0d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 801c0d8:	68fb      	ldr	r3, [r7, #12]
 801c0da:	f003 0307 	and.w	r3, r3, #7
 801c0de:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 801c0e0:	69fb      	ldr	r3, [r7, #28]
 801c0e2:	f1c3 0307 	rsb	r3, r3, #7
 801c0e6:	2b04      	cmp	r3, #4
 801c0e8:	bf28      	it	cs
 801c0ea:	2304      	movcs	r3, #4
 801c0ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 801c0ee:	69fb      	ldr	r3, [r7, #28]
 801c0f0:	3304      	adds	r3, #4
 801c0f2:	2b06      	cmp	r3, #6
 801c0f4:	d902      	bls.n	801c0fc <NVIC_EncodePriority+0x30>
 801c0f6:	69fb      	ldr	r3, [r7, #28]
 801c0f8:	3b03      	subs	r3, #3
 801c0fa:	e000      	b.n	801c0fe <NVIC_EncodePriority+0x32>
 801c0fc:	2300      	movs	r3, #0
 801c0fe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 801c100:	f04f 32ff 	mov.w	r2, #4294967295
 801c104:	69bb      	ldr	r3, [r7, #24]
 801c106:	fa02 f303 	lsl.w	r3, r2, r3
 801c10a:	43da      	mvns	r2, r3
 801c10c:	68bb      	ldr	r3, [r7, #8]
 801c10e:	401a      	ands	r2, r3
 801c110:	697b      	ldr	r3, [r7, #20]
 801c112:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 801c114:	f04f 31ff 	mov.w	r1, #4294967295
 801c118:	697b      	ldr	r3, [r7, #20]
 801c11a:	fa01 f303 	lsl.w	r3, r1, r3
 801c11e:	43d9      	mvns	r1, r3
 801c120:	687b      	ldr	r3, [r7, #4]
 801c122:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 801c124:	4313      	orrs	r3, r2
         );
}
 801c126:	4618      	mov	r0, r3
 801c128:	3724      	adds	r7, #36	; 0x24
 801c12a:	46bd      	mov	sp, r7
 801c12c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c130:	4770      	bx	lr
	...

0801c134 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 801c134:	b580      	push	{r7, lr}
 801c136:	b082      	sub	sp, #8
 801c138:	af00      	add	r7, sp, #0
 801c13a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 801c13c:	687b      	ldr	r3, [r7, #4]
 801c13e:	3b01      	subs	r3, #1
 801c140:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 801c144:	d301      	bcc.n	801c14a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 801c146:	2301      	movs	r3, #1
 801c148:	e00f      	b.n	801c16a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 801c14a:	4a0a      	ldr	r2, [pc, #40]	; (801c174 <SysTick_Config+0x40>)
 801c14c:	687b      	ldr	r3, [r7, #4]
 801c14e:	3b01      	subs	r3, #1
 801c150:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 801c152:	210f      	movs	r1, #15
 801c154:	f04f 30ff 	mov.w	r0, #4294967295
 801c158:	f7ff ff8e 	bl	801c078 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 801c15c:	4b05      	ldr	r3, [pc, #20]	; (801c174 <SysTick_Config+0x40>)
 801c15e:	2200      	movs	r2, #0
 801c160:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 801c162:	4b04      	ldr	r3, [pc, #16]	; (801c174 <SysTick_Config+0x40>)
 801c164:	2207      	movs	r2, #7
 801c166:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 801c168:	2300      	movs	r3, #0
}
 801c16a:	4618      	mov	r0, r3
 801c16c:	3708      	adds	r7, #8
 801c16e:	46bd      	mov	sp, r7
 801c170:	bd80      	pop	{r7, pc}
 801c172:	bf00      	nop
 801c174:	e000e010 	.word	0xe000e010

0801c178 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 801c178:	b580      	push	{r7, lr}
 801c17a:	b082      	sub	sp, #8
 801c17c:	af00      	add	r7, sp, #0
 801c17e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 801c180:	6878      	ldr	r0, [r7, #4]
 801c182:	f7ff ff29 	bl	801bfd8 <__NVIC_SetPriorityGrouping>
}
 801c186:	bf00      	nop
 801c188:	3708      	adds	r7, #8
 801c18a:	46bd      	mov	sp, r7
 801c18c:	bd80      	pop	{r7, pc}

0801c18e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 801c18e:	b580      	push	{r7, lr}
 801c190:	b086      	sub	sp, #24
 801c192:	af00      	add	r7, sp, #0
 801c194:	4603      	mov	r3, r0
 801c196:	60b9      	str	r1, [r7, #8]
 801c198:	607a      	str	r2, [r7, #4]
 801c19a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 801c19c:	2300      	movs	r3, #0
 801c19e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 801c1a0:	f7ff ff3e 	bl	801c020 <__NVIC_GetPriorityGrouping>
 801c1a4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 801c1a6:	687a      	ldr	r2, [r7, #4]
 801c1a8:	68b9      	ldr	r1, [r7, #8]
 801c1aa:	6978      	ldr	r0, [r7, #20]
 801c1ac:	f7ff ff8e 	bl	801c0cc <NVIC_EncodePriority>
 801c1b0:	4602      	mov	r2, r0
 801c1b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801c1b6:	4611      	mov	r1, r2
 801c1b8:	4618      	mov	r0, r3
 801c1ba:	f7ff ff5d 	bl	801c078 <__NVIC_SetPriority>
}
 801c1be:	bf00      	nop
 801c1c0:	3718      	adds	r7, #24
 801c1c2:	46bd      	mov	sp, r7
 801c1c4:	bd80      	pop	{r7, pc}

0801c1c6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 801c1c6:	b580      	push	{r7, lr}
 801c1c8:	b082      	sub	sp, #8
 801c1ca:	af00      	add	r7, sp, #0
 801c1cc:	4603      	mov	r3, r0
 801c1ce:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 801c1d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801c1d4:	4618      	mov	r0, r3
 801c1d6:	f7ff ff31 	bl	801c03c <__NVIC_EnableIRQ>
}
 801c1da:	bf00      	nop
 801c1dc:	3708      	adds	r7, #8
 801c1de:	46bd      	mov	sp, r7
 801c1e0:	bd80      	pop	{r7, pc}

0801c1e2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 801c1e2:	b580      	push	{r7, lr}
 801c1e4:	b082      	sub	sp, #8
 801c1e6:	af00      	add	r7, sp, #0
 801c1e8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 801c1ea:	6878      	ldr	r0, [r7, #4]
 801c1ec:	f7ff ffa2 	bl	801c134 <SysTick_Config>
 801c1f0:	4603      	mov	r3, r0
}
 801c1f2:	4618      	mov	r0, r3
 801c1f4:	3708      	adds	r7, #8
 801c1f6:	46bd      	mov	sp, r7
 801c1f8:	bd80      	pop	{r7, pc}
	...

0801c1fc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 801c1fc:	b580      	push	{r7, lr}
 801c1fe:	b086      	sub	sp, #24
 801c200:	af00      	add	r7, sp, #0
 801c202:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 801c204:	2300      	movs	r3, #0
 801c206:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 801c208:	f7ff feb8 	bl	801bf7c <HAL_GetTick>
 801c20c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 801c20e:	687b      	ldr	r3, [r7, #4]
 801c210:	2b00      	cmp	r3, #0
 801c212:	d101      	bne.n	801c218 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 801c214:	2301      	movs	r3, #1
 801c216:	e099      	b.n	801c34c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 801c218:	687b      	ldr	r3, [r7, #4]
 801c21a:	2200      	movs	r2, #0
 801c21c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 801c220:	687b      	ldr	r3, [r7, #4]
 801c222:	2202      	movs	r2, #2
 801c224:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 801c228:	687b      	ldr	r3, [r7, #4]
 801c22a:	681b      	ldr	r3, [r3, #0]
 801c22c:	681a      	ldr	r2, [r3, #0]
 801c22e:	687b      	ldr	r3, [r7, #4]
 801c230:	681b      	ldr	r3, [r3, #0]
 801c232:	f022 0201 	bic.w	r2, r2, #1
 801c236:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 801c238:	e00f      	b.n	801c25a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 801c23a:	f7ff fe9f 	bl	801bf7c <HAL_GetTick>
 801c23e:	4602      	mov	r2, r0
 801c240:	693b      	ldr	r3, [r7, #16]
 801c242:	1ad3      	subs	r3, r2, r3
 801c244:	2b05      	cmp	r3, #5
 801c246:	d908      	bls.n	801c25a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 801c248:	687b      	ldr	r3, [r7, #4]
 801c24a:	2220      	movs	r2, #32
 801c24c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 801c24e:	687b      	ldr	r3, [r7, #4]
 801c250:	2203      	movs	r2, #3
 801c252:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 801c256:	2303      	movs	r3, #3
 801c258:	e078      	b.n	801c34c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 801c25a:	687b      	ldr	r3, [r7, #4]
 801c25c:	681b      	ldr	r3, [r3, #0]
 801c25e:	681b      	ldr	r3, [r3, #0]
 801c260:	f003 0301 	and.w	r3, r3, #1
 801c264:	2b00      	cmp	r3, #0
 801c266:	d1e8      	bne.n	801c23a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 801c268:	687b      	ldr	r3, [r7, #4]
 801c26a:	681b      	ldr	r3, [r3, #0]
 801c26c:	681b      	ldr	r3, [r3, #0]
 801c26e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 801c270:	697a      	ldr	r2, [r7, #20]
 801c272:	4b38      	ldr	r3, [pc, #224]	; (801c354 <HAL_DMA_Init+0x158>)
 801c274:	4013      	ands	r3, r2
 801c276:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 801c278:	687b      	ldr	r3, [r7, #4]
 801c27a:	685a      	ldr	r2, [r3, #4]
 801c27c:	687b      	ldr	r3, [r7, #4]
 801c27e:	689b      	ldr	r3, [r3, #8]
 801c280:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 801c282:	687b      	ldr	r3, [r7, #4]
 801c284:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 801c286:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 801c288:	687b      	ldr	r3, [r7, #4]
 801c28a:	691b      	ldr	r3, [r3, #16]
 801c28c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 801c28e:	687b      	ldr	r3, [r7, #4]
 801c290:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 801c292:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 801c294:	687b      	ldr	r3, [r7, #4]
 801c296:	699b      	ldr	r3, [r3, #24]
 801c298:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 801c29a:	687b      	ldr	r3, [r7, #4]
 801c29c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 801c29e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 801c2a0:	687b      	ldr	r3, [r7, #4]
 801c2a2:	6a1b      	ldr	r3, [r3, #32]
 801c2a4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 801c2a6:	697a      	ldr	r2, [r7, #20]
 801c2a8:	4313      	orrs	r3, r2
 801c2aa:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 801c2ac:	687b      	ldr	r3, [r7, #4]
 801c2ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c2b0:	2b04      	cmp	r3, #4
 801c2b2:	d107      	bne.n	801c2c4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 801c2b4:	687b      	ldr	r3, [r7, #4]
 801c2b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801c2b8:	687b      	ldr	r3, [r7, #4]
 801c2ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c2bc:	4313      	orrs	r3, r2
 801c2be:	697a      	ldr	r2, [r7, #20]
 801c2c0:	4313      	orrs	r3, r2
 801c2c2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 801c2c4:	687b      	ldr	r3, [r7, #4]
 801c2c6:	681b      	ldr	r3, [r3, #0]
 801c2c8:	697a      	ldr	r2, [r7, #20]
 801c2ca:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 801c2cc:	687b      	ldr	r3, [r7, #4]
 801c2ce:	681b      	ldr	r3, [r3, #0]
 801c2d0:	695b      	ldr	r3, [r3, #20]
 801c2d2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 801c2d4:	697b      	ldr	r3, [r7, #20]
 801c2d6:	f023 0307 	bic.w	r3, r3, #7
 801c2da:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 801c2dc:	687b      	ldr	r3, [r7, #4]
 801c2de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c2e0:	697a      	ldr	r2, [r7, #20]
 801c2e2:	4313      	orrs	r3, r2
 801c2e4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 801c2e6:	687b      	ldr	r3, [r7, #4]
 801c2e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c2ea:	2b04      	cmp	r3, #4
 801c2ec:	d117      	bne.n	801c31e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 801c2ee:	687b      	ldr	r3, [r7, #4]
 801c2f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801c2f2:	697a      	ldr	r2, [r7, #20]
 801c2f4:	4313      	orrs	r3, r2
 801c2f6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 801c2f8:	687b      	ldr	r3, [r7, #4]
 801c2fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801c2fc:	2b00      	cmp	r3, #0
 801c2fe:	d00e      	beq.n	801c31e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 801c300:	6878      	ldr	r0, [r7, #4]
 801c302:	f000 fa91 	bl	801c828 <DMA_CheckFifoParam>
 801c306:	4603      	mov	r3, r0
 801c308:	2b00      	cmp	r3, #0
 801c30a:	d008      	beq.n	801c31e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 801c30c:	687b      	ldr	r3, [r7, #4]
 801c30e:	2240      	movs	r2, #64	; 0x40
 801c310:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 801c312:	687b      	ldr	r3, [r7, #4]
 801c314:	2201      	movs	r2, #1
 801c316:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 801c31a:	2301      	movs	r3, #1
 801c31c:	e016      	b.n	801c34c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 801c31e:	687b      	ldr	r3, [r7, #4]
 801c320:	681b      	ldr	r3, [r3, #0]
 801c322:	697a      	ldr	r2, [r7, #20]
 801c324:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 801c326:	6878      	ldr	r0, [r7, #4]
 801c328:	f000 fa48 	bl	801c7bc <DMA_CalcBaseAndBitshift>
 801c32c:	4603      	mov	r3, r0
 801c32e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 801c330:	687b      	ldr	r3, [r7, #4]
 801c332:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801c334:	223f      	movs	r2, #63	; 0x3f
 801c336:	409a      	lsls	r2, r3
 801c338:	68fb      	ldr	r3, [r7, #12]
 801c33a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 801c33c:	687b      	ldr	r3, [r7, #4]
 801c33e:	2200      	movs	r2, #0
 801c340:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 801c342:	687b      	ldr	r3, [r7, #4]
 801c344:	2201      	movs	r2, #1
 801c346:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 801c34a:	2300      	movs	r3, #0
}
 801c34c:	4618      	mov	r0, r3
 801c34e:	3718      	adds	r7, #24
 801c350:	46bd      	mov	sp, r7
 801c352:	bd80      	pop	{r7, pc}
 801c354:	f010803f 	.word	0xf010803f

0801c358 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 801c358:	b580      	push	{r7, lr}
 801c35a:	b086      	sub	sp, #24
 801c35c:	af00      	add	r7, sp, #0
 801c35e:	60f8      	str	r0, [r7, #12]
 801c360:	60b9      	str	r1, [r7, #8]
 801c362:	607a      	str	r2, [r7, #4]
 801c364:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 801c366:	2300      	movs	r3, #0
 801c368:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 801c36a:	68fb      	ldr	r3, [r7, #12]
 801c36c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801c36e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 801c370:	68fb      	ldr	r3, [r7, #12]
 801c372:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801c376:	2b01      	cmp	r3, #1
 801c378:	d101      	bne.n	801c37e <HAL_DMA_Start_IT+0x26>
 801c37a:	2302      	movs	r3, #2
 801c37c:	e040      	b.n	801c400 <HAL_DMA_Start_IT+0xa8>
 801c37e:	68fb      	ldr	r3, [r7, #12]
 801c380:	2201      	movs	r2, #1
 801c382:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 801c386:	68fb      	ldr	r3, [r7, #12]
 801c388:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 801c38c:	b2db      	uxtb	r3, r3
 801c38e:	2b01      	cmp	r3, #1
 801c390:	d12f      	bne.n	801c3f2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 801c392:	68fb      	ldr	r3, [r7, #12]
 801c394:	2202      	movs	r2, #2
 801c396:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 801c39a:	68fb      	ldr	r3, [r7, #12]
 801c39c:	2200      	movs	r2, #0
 801c39e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 801c3a0:	683b      	ldr	r3, [r7, #0]
 801c3a2:	687a      	ldr	r2, [r7, #4]
 801c3a4:	68b9      	ldr	r1, [r7, #8]
 801c3a6:	68f8      	ldr	r0, [r7, #12]
 801c3a8:	f000 f9da 	bl	801c760 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 801c3ac:	68fb      	ldr	r3, [r7, #12]
 801c3ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801c3b0:	223f      	movs	r2, #63	; 0x3f
 801c3b2:	409a      	lsls	r2, r3
 801c3b4:	693b      	ldr	r3, [r7, #16]
 801c3b6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 801c3b8:	68fb      	ldr	r3, [r7, #12]
 801c3ba:	681b      	ldr	r3, [r3, #0]
 801c3bc:	681a      	ldr	r2, [r3, #0]
 801c3be:	68fb      	ldr	r3, [r7, #12]
 801c3c0:	681b      	ldr	r3, [r3, #0]
 801c3c2:	f042 0216 	orr.w	r2, r2, #22
 801c3c6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 801c3c8:	68fb      	ldr	r3, [r7, #12]
 801c3ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801c3cc:	2b00      	cmp	r3, #0
 801c3ce:	d007      	beq.n	801c3e0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 801c3d0:	68fb      	ldr	r3, [r7, #12]
 801c3d2:	681b      	ldr	r3, [r3, #0]
 801c3d4:	681a      	ldr	r2, [r3, #0]
 801c3d6:	68fb      	ldr	r3, [r7, #12]
 801c3d8:	681b      	ldr	r3, [r3, #0]
 801c3da:	f042 0208 	orr.w	r2, r2, #8
 801c3de:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 801c3e0:	68fb      	ldr	r3, [r7, #12]
 801c3e2:	681b      	ldr	r3, [r3, #0]
 801c3e4:	681a      	ldr	r2, [r3, #0]
 801c3e6:	68fb      	ldr	r3, [r7, #12]
 801c3e8:	681b      	ldr	r3, [r3, #0]
 801c3ea:	f042 0201 	orr.w	r2, r2, #1
 801c3ee:	601a      	str	r2, [r3, #0]
 801c3f0:	e005      	b.n	801c3fe <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 801c3f2:	68fb      	ldr	r3, [r7, #12]
 801c3f4:	2200      	movs	r2, #0
 801c3f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 801c3fa:	2302      	movs	r3, #2
 801c3fc:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 801c3fe:	7dfb      	ldrb	r3, [r7, #23]
}
 801c400:	4618      	mov	r0, r3
 801c402:	3718      	adds	r7, #24
 801c404:	46bd      	mov	sp, r7
 801c406:	bd80      	pop	{r7, pc}

0801c408 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 801c408:	b480      	push	{r7}
 801c40a:	b083      	sub	sp, #12
 801c40c:	af00      	add	r7, sp, #0
 801c40e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 801c410:	687b      	ldr	r3, [r7, #4]
 801c412:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 801c416:	b2db      	uxtb	r3, r3
 801c418:	2b02      	cmp	r3, #2
 801c41a:	d004      	beq.n	801c426 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 801c41c:	687b      	ldr	r3, [r7, #4]
 801c41e:	2280      	movs	r2, #128	; 0x80
 801c420:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 801c422:	2301      	movs	r3, #1
 801c424:	e00c      	b.n	801c440 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 801c426:	687b      	ldr	r3, [r7, #4]
 801c428:	2205      	movs	r2, #5
 801c42a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 801c42e:	687b      	ldr	r3, [r7, #4]
 801c430:	681b      	ldr	r3, [r3, #0]
 801c432:	681a      	ldr	r2, [r3, #0]
 801c434:	687b      	ldr	r3, [r7, #4]
 801c436:	681b      	ldr	r3, [r3, #0]
 801c438:	f022 0201 	bic.w	r2, r2, #1
 801c43c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 801c43e:	2300      	movs	r3, #0
}
 801c440:	4618      	mov	r0, r3
 801c442:	370c      	adds	r7, #12
 801c444:	46bd      	mov	sp, r7
 801c446:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c44a:	4770      	bx	lr

0801c44c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 801c44c:	b580      	push	{r7, lr}
 801c44e:	b086      	sub	sp, #24
 801c450:	af00      	add	r7, sp, #0
 801c452:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 801c454:	2300      	movs	r3, #0
 801c456:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 801c458:	4b92      	ldr	r3, [pc, #584]	; (801c6a4 <HAL_DMA_IRQHandler+0x258>)
 801c45a:	681b      	ldr	r3, [r3, #0]
 801c45c:	4a92      	ldr	r2, [pc, #584]	; (801c6a8 <HAL_DMA_IRQHandler+0x25c>)
 801c45e:	fba2 2303 	umull	r2, r3, r2, r3
 801c462:	0a9b      	lsrs	r3, r3, #10
 801c464:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 801c466:	687b      	ldr	r3, [r7, #4]
 801c468:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801c46a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 801c46c:	693b      	ldr	r3, [r7, #16]
 801c46e:	681b      	ldr	r3, [r3, #0]
 801c470:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 801c472:	687b      	ldr	r3, [r7, #4]
 801c474:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801c476:	2208      	movs	r2, #8
 801c478:	409a      	lsls	r2, r3
 801c47a:	68fb      	ldr	r3, [r7, #12]
 801c47c:	4013      	ands	r3, r2
 801c47e:	2b00      	cmp	r3, #0
 801c480:	d01a      	beq.n	801c4b8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 801c482:	687b      	ldr	r3, [r7, #4]
 801c484:	681b      	ldr	r3, [r3, #0]
 801c486:	681b      	ldr	r3, [r3, #0]
 801c488:	f003 0304 	and.w	r3, r3, #4
 801c48c:	2b00      	cmp	r3, #0
 801c48e:	d013      	beq.n	801c4b8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 801c490:	687b      	ldr	r3, [r7, #4]
 801c492:	681b      	ldr	r3, [r3, #0]
 801c494:	681a      	ldr	r2, [r3, #0]
 801c496:	687b      	ldr	r3, [r7, #4]
 801c498:	681b      	ldr	r3, [r3, #0]
 801c49a:	f022 0204 	bic.w	r2, r2, #4
 801c49e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 801c4a0:	687b      	ldr	r3, [r7, #4]
 801c4a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801c4a4:	2208      	movs	r2, #8
 801c4a6:	409a      	lsls	r2, r3
 801c4a8:	693b      	ldr	r3, [r7, #16]
 801c4aa:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 801c4ac:	687b      	ldr	r3, [r7, #4]
 801c4ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801c4b0:	f043 0201 	orr.w	r2, r3, #1
 801c4b4:	687b      	ldr	r3, [r7, #4]
 801c4b6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 801c4b8:	687b      	ldr	r3, [r7, #4]
 801c4ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801c4bc:	2201      	movs	r2, #1
 801c4be:	409a      	lsls	r2, r3
 801c4c0:	68fb      	ldr	r3, [r7, #12]
 801c4c2:	4013      	ands	r3, r2
 801c4c4:	2b00      	cmp	r3, #0
 801c4c6:	d012      	beq.n	801c4ee <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 801c4c8:	687b      	ldr	r3, [r7, #4]
 801c4ca:	681b      	ldr	r3, [r3, #0]
 801c4cc:	695b      	ldr	r3, [r3, #20]
 801c4ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801c4d2:	2b00      	cmp	r3, #0
 801c4d4:	d00b      	beq.n	801c4ee <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 801c4d6:	687b      	ldr	r3, [r7, #4]
 801c4d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801c4da:	2201      	movs	r2, #1
 801c4dc:	409a      	lsls	r2, r3
 801c4de:	693b      	ldr	r3, [r7, #16]
 801c4e0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 801c4e2:	687b      	ldr	r3, [r7, #4]
 801c4e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801c4e6:	f043 0202 	orr.w	r2, r3, #2
 801c4ea:	687b      	ldr	r3, [r7, #4]
 801c4ec:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 801c4ee:	687b      	ldr	r3, [r7, #4]
 801c4f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801c4f2:	2204      	movs	r2, #4
 801c4f4:	409a      	lsls	r2, r3
 801c4f6:	68fb      	ldr	r3, [r7, #12]
 801c4f8:	4013      	ands	r3, r2
 801c4fa:	2b00      	cmp	r3, #0
 801c4fc:	d012      	beq.n	801c524 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 801c4fe:	687b      	ldr	r3, [r7, #4]
 801c500:	681b      	ldr	r3, [r3, #0]
 801c502:	681b      	ldr	r3, [r3, #0]
 801c504:	f003 0302 	and.w	r3, r3, #2
 801c508:	2b00      	cmp	r3, #0
 801c50a:	d00b      	beq.n	801c524 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 801c50c:	687b      	ldr	r3, [r7, #4]
 801c50e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801c510:	2204      	movs	r2, #4
 801c512:	409a      	lsls	r2, r3
 801c514:	693b      	ldr	r3, [r7, #16]
 801c516:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 801c518:	687b      	ldr	r3, [r7, #4]
 801c51a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801c51c:	f043 0204 	orr.w	r2, r3, #4
 801c520:	687b      	ldr	r3, [r7, #4]
 801c522:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 801c524:	687b      	ldr	r3, [r7, #4]
 801c526:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801c528:	2210      	movs	r2, #16
 801c52a:	409a      	lsls	r2, r3
 801c52c:	68fb      	ldr	r3, [r7, #12]
 801c52e:	4013      	ands	r3, r2
 801c530:	2b00      	cmp	r3, #0
 801c532:	d043      	beq.n	801c5bc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 801c534:	687b      	ldr	r3, [r7, #4]
 801c536:	681b      	ldr	r3, [r3, #0]
 801c538:	681b      	ldr	r3, [r3, #0]
 801c53a:	f003 0308 	and.w	r3, r3, #8
 801c53e:	2b00      	cmp	r3, #0
 801c540:	d03c      	beq.n	801c5bc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 801c542:	687b      	ldr	r3, [r7, #4]
 801c544:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801c546:	2210      	movs	r2, #16
 801c548:	409a      	lsls	r2, r3
 801c54a:	693b      	ldr	r3, [r7, #16]
 801c54c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 801c54e:	687b      	ldr	r3, [r7, #4]
 801c550:	681b      	ldr	r3, [r3, #0]
 801c552:	681b      	ldr	r3, [r3, #0]
 801c554:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 801c558:	2b00      	cmp	r3, #0
 801c55a:	d018      	beq.n	801c58e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 801c55c:	687b      	ldr	r3, [r7, #4]
 801c55e:	681b      	ldr	r3, [r3, #0]
 801c560:	681b      	ldr	r3, [r3, #0]
 801c562:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 801c566:	2b00      	cmp	r3, #0
 801c568:	d108      	bne.n	801c57c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 801c56a:	687b      	ldr	r3, [r7, #4]
 801c56c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801c56e:	2b00      	cmp	r3, #0
 801c570:	d024      	beq.n	801c5bc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 801c572:	687b      	ldr	r3, [r7, #4]
 801c574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801c576:	6878      	ldr	r0, [r7, #4]
 801c578:	4798      	blx	r3
 801c57a:	e01f      	b.n	801c5bc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 801c57c:	687b      	ldr	r3, [r7, #4]
 801c57e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801c580:	2b00      	cmp	r3, #0
 801c582:	d01b      	beq.n	801c5bc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 801c584:	687b      	ldr	r3, [r7, #4]
 801c586:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801c588:	6878      	ldr	r0, [r7, #4]
 801c58a:	4798      	blx	r3
 801c58c:	e016      	b.n	801c5bc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 801c58e:	687b      	ldr	r3, [r7, #4]
 801c590:	681b      	ldr	r3, [r3, #0]
 801c592:	681b      	ldr	r3, [r3, #0]
 801c594:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801c598:	2b00      	cmp	r3, #0
 801c59a:	d107      	bne.n	801c5ac <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 801c59c:	687b      	ldr	r3, [r7, #4]
 801c59e:	681b      	ldr	r3, [r3, #0]
 801c5a0:	681a      	ldr	r2, [r3, #0]
 801c5a2:	687b      	ldr	r3, [r7, #4]
 801c5a4:	681b      	ldr	r3, [r3, #0]
 801c5a6:	f022 0208 	bic.w	r2, r2, #8
 801c5aa:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 801c5ac:	687b      	ldr	r3, [r7, #4]
 801c5ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801c5b0:	2b00      	cmp	r3, #0
 801c5b2:	d003      	beq.n	801c5bc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 801c5b4:	687b      	ldr	r3, [r7, #4]
 801c5b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801c5b8:	6878      	ldr	r0, [r7, #4]
 801c5ba:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 801c5bc:	687b      	ldr	r3, [r7, #4]
 801c5be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801c5c0:	2220      	movs	r2, #32
 801c5c2:	409a      	lsls	r2, r3
 801c5c4:	68fb      	ldr	r3, [r7, #12]
 801c5c6:	4013      	ands	r3, r2
 801c5c8:	2b00      	cmp	r3, #0
 801c5ca:	f000 808e 	beq.w	801c6ea <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 801c5ce:	687b      	ldr	r3, [r7, #4]
 801c5d0:	681b      	ldr	r3, [r3, #0]
 801c5d2:	681b      	ldr	r3, [r3, #0]
 801c5d4:	f003 0310 	and.w	r3, r3, #16
 801c5d8:	2b00      	cmp	r3, #0
 801c5da:	f000 8086 	beq.w	801c6ea <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 801c5de:	687b      	ldr	r3, [r7, #4]
 801c5e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801c5e2:	2220      	movs	r2, #32
 801c5e4:	409a      	lsls	r2, r3
 801c5e6:	693b      	ldr	r3, [r7, #16]
 801c5e8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 801c5ea:	687b      	ldr	r3, [r7, #4]
 801c5ec:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 801c5f0:	b2db      	uxtb	r3, r3
 801c5f2:	2b05      	cmp	r3, #5
 801c5f4:	d136      	bne.n	801c664 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 801c5f6:	687b      	ldr	r3, [r7, #4]
 801c5f8:	681b      	ldr	r3, [r3, #0]
 801c5fa:	681a      	ldr	r2, [r3, #0]
 801c5fc:	687b      	ldr	r3, [r7, #4]
 801c5fe:	681b      	ldr	r3, [r3, #0]
 801c600:	f022 0216 	bic.w	r2, r2, #22
 801c604:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 801c606:	687b      	ldr	r3, [r7, #4]
 801c608:	681b      	ldr	r3, [r3, #0]
 801c60a:	695a      	ldr	r2, [r3, #20]
 801c60c:	687b      	ldr	r3, [r7, #4]
 801c60e:	681b      	ldr	r3, [r3, #0]
 801c610:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 801c614:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 801c616:	687b      	ldr	r3, [r7, #4]
 801c618:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801c61a:	2b00      	cmp	r3, #0
 801c61c:	d103      	bne.n	801c626 <HAL_DMA_IRQHandler+0x1da>
 801c61e:	687b      	ldr	r3, [r7, #4]
 801c620:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801c622:	2b00      	cmp	r3, #0
 801c624:	d007      	beq.n	801c636 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 801c626:	687b      	ldr	r3, [r7, #4]
 801c628:	681b      	ldr	r3, [r3, #0]
 801c62a:	681a      	ldr	r2, [r3, #0]
 801c62c:	687b      	ldr	r3, [r7, #4]
 801c62e:	681b      	ldr	r3, [r3, #0]
 801c630:	f022 0208 	bic.w	r2, r2, #8
 801c634:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 801c636:	687b      	ldr	r3, [r7, #4]
 801c638:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801c63a:	223f      	movs	r2, #63	; 0x3f
 801c63c:	409a      	lsls	r2, r3
 801c63e:	693b      	ldr	r3, [r7, #16]
 801c640:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 801c642:	687b      	ldr	r3, [r7, #4]
 801c644:	2200      	movs	r2, #0
 801c646:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 801c64a:	687b      	ldr	r3, [r7, #4]
 801c64c:	2201      	movs	r2, #1
 801c64e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 801c652:	687b      	ldr	r3, [r7, #4]
 801c654:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801c656:	2b00      	cmp	r3, #0
 801c658:	d07d      	beq.n	801c756 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 801c65a:	687b      	ldr	r3, [r7, #4]
 801c65c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801c65e:	6878      	ldr	r0, [r7, #4]
 801c660:	4798      	blx	r3
        }
        return;
 801c662:	e078      	b.n	801c756 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 801c664:	687b      	ldr	r3, [r7, #4]
 801c666:	681b      	ldr	r3, [r3, #0]
 801c668:	681b      	ldr	r3, [r3, #0]
 801c66a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 801c66e:	2b00      	cmp	r3, #0
 801c670:	d01c      	beq.n	801c6ac <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 801c672:	687b      	ldr	r3, [r7, #4]
 801c674:	681b      	ldr	r3, [r3, #0]
 801c676:	681b      	ldr	r3, [r3, #0]
 801c678:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 801c67c:	2b00      	cmp	r3, #0
 801c67e:	d108      	bne.n	801c692 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 801c680:	687b      	ldr	r3, [r7, #4]
 801c682:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801c684:	2b00      	cmp	r3, #0
 801c686:	d030      	beq.n	801c6ea <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 801c688:	687b      	ldr	r3, [r7, #4]
 801c68a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801c68c:	6878      	ldr	r0, [r7, #4]
 801c68e:	4798      	blx	r3
 801c690:	e02b      	b.n	801c6ea <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 801c692:	687b      	ldr	r3, [r7, #4]
 801c694:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801c696:	2b00      	cmp	r3, #0
 801c698:	d027      	beq.n	801c6ea <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 801c69a:	687b      	ldr	r3, [r7, #4]
 801c69c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801c69e:	6878      	ldr	r0, [r7, #4]
 801c6a0:	4798      	blx	r3
 801c6a2:	e022      	b.n	801c6ea <HAL_DMA_IRQHandler+0x29e>
 801c6a4:	20000000 	.word	0x20000000
 801c6a8:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 801c6ac:	687b      	ldr	r3, [r7, #4]
 801c6ae:	681b      	ldr	r3, [r3, #0]
 801c6b0:	681b      	ldr	r3, [r3, #0]
 801c6b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801c6b6:	2b00      	cmp	r3, #0
 801c6b8:	d10f      	bne.n	801c6da <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 801c6ba:	687b      	ldr	r3, [r7, #4]
 801c6bc:	681b      	ldr	r3, [r3, #0]
 801c6be:	681a      	ldr	r2, [r3, #0]
 801c6c0:	687b      	ldr	r3, [r7, #4]
 801c6c2:	681b      	ldr	r3, [r3, #0]
 801c6c4:	f022 0210 	bic.w	r2, r2, #16
 801c6c8:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 801c6ca:	687b      	ldr	r3, [r7, #4]
 801c6cc:	2200      	movs	r2, #0
 801c6ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 801c6d2:	687b      	ldr	r3, [r7, #4]
 801c6d4:	2201      	movs	r2, #1
 801c6d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 801c6da:	687b      	ldr	r3, [r7, #4]
 801c6dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801c6de:	2b00      	cmp	r3, #0
 801c6e0:	d003      	beq.n	801c6ea <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 801c6e2:	687b      	ldr	r3, [r7, #4]
 801c6e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801c6e6:	6878      	ldr	r0, [r7, #4]
 801c6e8:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 801c6ea:	687b      	ldr	r3, [r7, #4]
 801c6ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801c6ee:	2b00      	cmp	r3, #0
 801c6f0:	d032      	beq.n	801c758 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 801c6f2:	687b      	ldr	r3, [r7, #4]
 801c6f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801c6f6:	f003 0301 	and.w	r3, r3, #1
 801c6fa:	2b00      	cmp	r3, #0
 801c6fc:	d022      	beq.n	801c744 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 801c6fe:	687b      	ldr	r3, [r7, #4]
 801c700:	2205      	movs	r2, #5
 801c702:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 801c706:	687b      	ldr	r3, [r7, #4]
 801c708:	681b      	ldr	r3, [r3, #0]
 801c70a:	681a      	ldr	r2, [r3, #0]
 801c70c:	687b      	ldr	r3, [r7, #4]
 801c70e:	681b      	ldr	r3, [r3, #0]
 801c710:	f022 0201 	bic.w	r2, r2, #1
 801c714:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 801c716:	68bb      	ldr	r3, [r7, #8]
 801c718:	3301      	adds	r3, #1
 801c71a:	60bb      	str	r3, [r7, #8]
 801c71c:	697a      	ldr	r2, [r7, #20]
 801c71e:	429a      	cmp	r2, r3
 801c720:	d307      	bcc.n	801c732 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 801c722:	687b      	ldr	r3, [r7, #4]
 801c724:	681b      	ldr	r3, [r3, #0]
 801c726:	681b      	ldr	r3, [r3, #0]
 801c728:	f003 0301 	and.w	r3, r3, #1
 801c72c:	2b00      	cmp	r3, #0
 801c72e:	d1f2      	bne.n	801c716 <HAL_DMA_IRQHandler+0x2ca>
 801c730:	e000      	b.n	801c734 <HAL_DMA_IRQHandler+0x2e8>
          break;
 801c732:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 801c734:	687b      	ldr	r3, [r7, #4]
 801c736:	2200      	movs	r2, #0
 801c738:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 801c73c:	687b      	ldr	r3, [r7, #4]
 801c73e:	2201      	movs	r2, #1
 801c740:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 801c744:	687b      	ldr	r3, [r7, #4]
 801c746:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801c748:	2b00      	cmp	r3, #0
 801c74a:	d005      	beq.n	801c758 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 801c74c:	687b      	ldr	r3, [r7, #4]
 801c74e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801c750:	6878      	ldr	r0, [r7, #4]
 801c752:	4798      	blx	r3
 801c754:	e000      	b.n	801c758 <HAL_DMA_IRQHandler+0x30c>
        return;
 801c756:	bf00      	nop
    }
  }
}
 801c758:	3718      	adds	r7, #24
 801c75a:	46bd      	mov	sp, r7
 801c75c:	bd80      	pop	{r7, pc}
 801c75e:	bf00      	nop

0801c760 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 801c760:	b480      	push	{r7}
 801c762:	b085      	sub	sp, #20
 801c764:	af00      	add	r7, sp, #0
 801c766:	60f8      	str	r0, [r7, #12]
 801c768:	60b9      	str	r1, [r7, #8]
 801c76a:	607a      	str	r2, [r7, #4]
 801c76c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 801c76e:	68fb      	ldr	r3, [r7, #12]
 801c770:	681b      	ldr	r3, [r3, #0]
 801c772:	681a      	ldr	r2, [r3, #0]
 801c774:	68fb      	ldr	r3, [r7, #12]
 801c776:	681b      	ldr	r3, [r3, #0]
 801c778:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 801c77c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 801c77e:	68fb      	ldr	r3, [r7, #12]
 801c780:	681b      	ldr	r3, [r3, #0]
 801c782:	683a      	ldr	r2, [r7, #0]
 801c784:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 801c786:	68fb      	ldr	r3, [r7, #12]
 801c788:	689b      	ldr	r3, [r3, #8]
 801c78a:	2b40      	cmp	r3, #64	; 0x40
 801c78c:	d108      	bne.n	801c7a0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 801c78e:	68fb      	ldr	r3, [r7, #12]
 801c790:	681b      	ldr	r3, [r3, #0]
 801c792:	687a      	ldr	r2, [r7, #4]
 801c794:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 801c796:	68fb      	ldr	r3, [r7, #12]
 801c798:	681b      	ldr	r3, [r3, #0]
 801c79a:	68ba      	ldr	r2, [r7, #8]
 801c79c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 801c79e:	e007      	b.n	801c7b0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 801c7a0:	68fb      	ldr	r3, [r7, #12]
 801c7a2:	681b      	ldr	r3, [r3, #0]
 801c7a4:	68ba      	ldr	r2, [r7, #8]
 801c7a6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 801c7a8:	68fb      	ldr	r3, [r7, #12]
 801c7aa:	681b      	ldr	r3, [r3, #0]
 801c7ac:	687a      	ldr	r2, [r7, #4]
 801c7ae:	60da      	str	r2, [r3, #12]
}
 801c7b0:	bf00      	nop
 801c7b2:	3714      	adds	r7, #20
 801c7b4:	46bd      	mov	sp, r7
 801c7b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c7ba:	4770      	bx	lr

0801c7bc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 801c7bc:	b480      	push	{r7}
 801c7be:	b085      	sub	sp, #20
 801c7c0:	af00      	add	r7, sp, #0
 801c7c2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 801c7c4:	687b      	ldr	r3, [r7, #4]
 801c7c6:	681b      	ldr	r3, [r3, #0]
 801c7c8:	b2db      	uxtb	r3, r3
 801c7ca:	3b10      	subs	r3, #16
 801c7cc:	4a14      	ldr	r2, [pc, #80]	; (801c820 <DMA_CalcBaseAndBitshift+0x64>)
 801c7ce:	fba2 2303 	umull	r2, r3, r2, r3
 801c7d2:	091b      	lsrs	r3, r3, #4
 801c7d4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 801c7d6:	4a13      	ldr	r2, [pc, #76]	; (801c824 <DMA_CalcBaseAndBitshift+0x68>)
 801c7d8:	68fb      	ldr	r3, [r7, #12]
 801c7da:	4413      	add	r3, r2
 801c7dc:	781b      	ldrb	r3, [r3, #0]
 801c7de:	461a      	mov	r2, r3
 801c7e0:	687b      	ldr	r3, [r7, #4]
 801c7e2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 801c7e4:	68fb      	ldr	r3, [r7, #12]
 801c7e6:	2b03      	cmp	r3, #3
 801c7e8:	d909      	bls.n	801c7fe <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 801c7ea:	687b      	ldr	r3, [r7, #4]
 801c7ec:	681b      	ldr	r3, [r3, #0]
 801c7ee:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 801c7f2:	f023 0303 	bic.w	r3, r3, #3
 801c7f6:	1d1a      	adds	r2, r3, #4
 801c7f8:	687b      	ldr	r3, [r7, #4]
 801c7fa:	659a      	str	r2, [r3, #88]	; 0x58
 801c7fc:	e007      	b.n	801c80e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 801c7fe:	687b      	ldr	r3, [r7, #4]
 801c800:	681b      	ldr	r3, [r3, #0]
 801c802:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 801c806:	f023 0303 	bic.w	r3, r3, #3
 801c80a:	687a      	ldr	r2, [r7, #4]
 801c80c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 801c80e:	687b      	ldr	r3, [r7, #4]
 801c810:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 801c812:	4618      	mov	r0, r3
 801c814:	3714      	adds	r7, #20
 801c816:	46bd      	mov	sp, r7
 801c818:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c81c:	4770      	bx	lr
 801c81e:	bf00      	nop
 801c820:	aaaaaaab 	.word	0xaaaaaaab
 801c824:	0802a984 	.word	0x0802a984

0801c828 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 801c828:	b480      	push	{r7}
 801c82a:	b085      	sub	sp, #20
 801c82c:	af00      	add	r7, sp, #0
 801c82e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 801c830:	2300      	movs	r3, #0
 801c832:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 801c834:	687b      	ldr	r3, [r7, #4]
 801c836:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801c838:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 801c83a:	687b      	ldr	r3, [r7, #4]
 801c83c:	699b      	ldr	r3, [r3, #24]
 801c83e:	2b00      	cmp	r3, #0
 801c840:	d11f      	bne.n	801c882 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 801c842:	68bb      	ldr	r3, [r7, #8]
 801c844:	2b03      	cmp	r3, #3
 801c846:	d855      	bhi.n	801c8f4 <DMA_CheckFifoParam+0xcc>
 801c848:	a201      	add	r2, pc, #4	; (adr r2, 801c850 <DMA_CheckFifoParam+0x28>)
 801c84a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801c84e:	bf00      	nop
 801c850:	0801c861 	.word	0x0801c861
 801c854:	0801c873 	.word	0x0801c873
 801c858:	0801c861 	.word	0x0801c861
 801c85c:	0801c8f5 	.word	0x0801c8f5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 801c860:	687b      	ldr	r3, [r7, #4]
 801c862:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801c864:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 801c868:	2b00      	cmp	r3, #0
 801c86a:	d045      	beq.n	801c8f8 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 801c86c:	2301      	movs	r3, #1
 801c86e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 801c870:	e042      	b.n	801c8f8 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 801c872:	687b      	ldr	r3, [r7, #4]
 801c874:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801c876:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 801c87a:	d13f      	bne.n	801c8fc <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 801c87c:	2301      	movs	r3, #1
 801c87e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 801c880:	e03c      	b.n	801c8fc <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 801c882:	687b      	ldr	r3, [r7, #4]
 801c884:	699b      	ldr	r3, [r3, #24]
 801c886:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801c88a:	d121      	bne.n	801c8d0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 801c88c:	68bb      	ldr	r3, [r7, #8]
 801c88e:	2b03      	cmp	r3, #3
 801c890:	d836      	bhi.n	801c900 <DMA_CheckFifoParam+0xd8>
 801c892:	a201      	add	r2, pc, #4	; (adr r2, 801c898 <DMA_CheckFifoParam+0x70>)
 801c894:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801c898:	0801c8a9 	.word	0x0801c8a9
 801c89c:	0801c8af 	.word	0x0801c8af
 801c8a0:	0801c8a9 	.word	0x0801c8a9
 801c8a4:	0801c8c1 	.word	0x0801c8c1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 801c8a8:	2301      	movs	r3, #1
 801c8aa:	73fb      	strb	r3, [r7, #15]
      break;
 801c8ac:	e02f      	b.n	801c90e <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 801c8ae:	687b      	ldr	r3, [r7, #4]
 801c8b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801c8b2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 801c8b6:	2b00      	cmp	r3, #0
 801c8b8:	d024      	beq.n	801c904 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 801c8ba:	2301      	movs	r3, #1
 801c8bc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 801c8be:	e021      	b.n	801c904 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 801c8c0:	687b      	ldr	r3, [r7, #4]
 801c8c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801c8c4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 801c8c8:	d11e      	bne.n	801c908 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 801c8ca:	2301      	movs	r3, #1
 801c8cc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 801c8ce:	e01b      	b.n	801c908 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 801c8d0:	68bb      	ldr	r3, [r7, #8]
 801c8d2:	2b02      	cmp	r3, #2
 801c8d4:	d902      	bls.n	801c8dc <DMA_CheckFifoParam+0xb4>
 801c8d6:	2b03      	cmp	r3, #3
 801c8d8:	d003      	beq.n	801c8e2 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 801c8da:	e018      	b.n	801c90e <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 801c8dc:	2301      	movs	r3, #1
 801c8de:	73fb      	strb	r3, [r7, #15]
      break;
 801c8e0:	e015      	b.n	801c90e <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 801c8e2:	687b      	ldr	r3, [r7, #4]
 801c8e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801c8e6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 801c8ea:	2b00      	cmp	r3, #0
 801c8ec:	d00e      	beq.n	801c90c <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 801c8ee:	2301      	movs	r3, #1
 801c8f0:	73fb      	strb	r3, [r7, #15]
      break;
 801c8f2:	e00b      	b.n	801c90c <DMA_CheckFifoParam+0xe4>
      break;
 801c8f4:	bf00      	nop
 801c8f6:	e00a      	b.n	801c90e <DMA_CheckFifoParam+0xe6>
      break;
 801c8f8:	bf00      	nop
 801c8fa:	e008      	b.n	801c90e <DMA_CheckFifoParam+0xe6>
      break;
 801c8fc:	bf00      	nop
 801c8fe:	e006      	b.n	801c90e <DMA_CheckFifoParam+0xe6>
      break;
 801c900:	bf00      	nop
 801c902:	e004      	b.n	801c90e <DMA_CheckFifoParam+0xe6>
      break;
 801c904:	bf00      	nop
 801c906:	e002      	b.n	801c90e <DMA_CheckFifoParam+0xe6>
      break;   
 801c908:	bf00      	nop
 801c90a:	e000      	b.n	801c90e <DMA_CheckFifoParam+0xe6>
      break;
 801c90c:	bf00      	nop
    }
  } 
  
  return status; 
 801c90e:	7bfb      	ldrb	r3, [r7, #15]
}
 801c910:	4618      	mov	r0, r3
 801c912:	3714      	adds	r7, #20
 801c914:	46bd      	mov	sp, r7
 801c916:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c91a:	4770      	bx	lr

0801c91c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 801c91c:	b480      	push	{r7}
 801c91e:	b089      	sub	sp, #36	; 0x24
 801c920:	af00      	add	r7, sp, #0
 801c922:	6078      	str	r0, [r7, #4]
 801c924:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 801c926:	2300      	movs	r3, #0
 801c928:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 801c92a:	2300      	movs	r3, #0
 801c92c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 801c92e:	2300      	movs	r3, #0
 801c930:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 801c932:	2300      	movs	r3, #0
 801c934:	61fb      	str	r3, [r7, #28]
 801c936:	e159      	b.n	801cbec <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 801c938:	2201      	movs	r2, #1
 801c93a:	69fb      	ldr	r3, [r7, #28]
 801c93c:	fa02 f303 	lsl.w	r3, r2, r3
 801c940:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 801c942:	683b      	ldr	r3, [r7, #0]
 801c944:	681b      	ldr	r3, [r3, #0]
 801c946:	697a      	ldr	r2, [r7, #20]
 801c948:	4013      	ands	r3, r2
 801c94a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 801c94c:	693a      	ldr	r2, [r7, #16]
 801c94e:	697b      	ldr	r3, [r7, #20]
 801c950:	429a      	cmp	r2, r3
 801c952:	f040 8148 	bne.w	801cbe6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 801c956:	683b      	ldr	r3, [r7, #0]
 801c958:	685b      	ldr	r3, [r3, #4]
 801c95a:	2b01      	cmp	r3, #1
 801c95c:	d00b      	beq.n	801c976 <HAL_GPIO_Init+0x5a>
 801c95e:	683b      	ldr	r3, [r7, #0]
 801c960:	685b      	ldr	r3, [r3, #4]
 801c962:	2b02      	cmp	r3, #2
 801c964:	d007      	beq.n	801c976 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 801c966:	683b      	ldr	r3, [r7, #0]
 801c968:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 801c96a:	2b11      	cmp	r3, #17
 801c96c:	d003      	beq.n	801c976 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 801c96e:	683b      	ldr	r3, [r7, #0]
 801c970:	685b      	ldr	r3, [r3, #4]
 801c972:	2b12      	cmp	r3, #18
 801c974:	d130      	bne.n	801c9d8 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 801c976:	687b      	ldr	r3, [r7, #4]
 801c978:	689b      	ldr	r3, [r3, #8]
 801c97a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 801c97c:	69fb      	ldr	r3, [r7, #28]
 801c97e:	005b      	lsls	r3, r3, #1
 801c980:	2203      	movs	r2, #3
 801c982:	fa02 f303 	lsl.w	r3, r2, r3
 801c986:	43db      	mvns	r3, r3
 801c988:	69ba      	ldr	r2, [r7, #24]
 801c98a:	4013      	ands	r3, r2
 801c98c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 801c98e:	683b      	ldr	r3, [r7, #0]
 801c990:	68da      	ldr	r2, [r3, #12]
 801c992:	69fb      	ldr	r3, [r7, #28]
 801c994:	005b      	lsls	r3, r3, #1
 801c996:	fa02 f303 	lsl.w	r3, r2, r3
 801c99a:	69ba      	ldr	r2, [r7, #24]
 801c99c:	4313      	orrs	r3, r2
 801c99e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 801c9a0:	687b      	ldr	r3, [r7, #4]
 801c9a2:	69ba      	ldr	r2, [r7, #24]
 801c9a4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 801c9a6:	687b      	ldr	r3, [r7, #4]
 801c9a8:	685b      	ldr	r3, [r3, #4]
 801c9aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 801c9ac:	2201      	movs	r2, #1
 801c9ae:	69fb      	ldr	r3, [r7, #28]
 801c9b0:	fa02 f303 	lsl.w	r3, r2, r3
 801c9b4:	43db      	mvns	r3, r3
 801c9b6:	69ba      	ldr	r2, [r7, #24]
 801c9b8:	4013      	ands	r3, r2
 801c9ba:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 801c9bc:	683b      	ldr	r3, [r7, #0]
 801c9be:	685b      	ldr	r3, [r3, #4]
 801c9c0:	091b      	lsrs	r3, r3, #4
 801c9c2:	f003 0201 	and.w	r2, r3, #1
 801c9c6:	69fb      	ldr	r3, [r7, #28]
 801c9c8:	fa02 f303 	lsl.w	r3, r2, r3
 801c9cc:	69ba      	ldr	r2, [r7, #24]
 801c9ce:	4313      	orrs	r3, r2
 801c9d0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 801c9d2:	687b      	ldr	r3, [r7, #4]
 801c9d4:	69ba      	ldr	r2, [r7, #24]
 801c9d6:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 801c9d8:	687b      	ldr	r3, [r7, #4]
 801c9da:	68db      	ldr	r3, [r3, #12]
 801c9dc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 801c9de:	69fb      	ldr	r3, [r7, #28]
 801c9e0:	005b      	lsls	r3, r3, #1
 801c9e2:	2203      	movs	r2, #3
 801c9e4:	fa02 f303 	lsl.w	r3, r2, r3
 801c9e8:	43db      	mvns	r3, r3
 801c9ea:	69ba      	ldr	r2, [r7, #24]
 801c9ec:	4013      	ands	r3, r2
 801c9ee:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 801c9f0:	683b      	ldr	r3, [r7, #0]
 801c9f2:	689a      	ldr	r2, [r3, #8]
 801c9f4:	69fb      	ldr	r3, [r7, #28]
 801c9f6:	005b      	lsls	r3, r3, #1
 801c9f8:	fa02 f303 	lsl.w	r3, r2, r3
 801c9fc:	69ba      	ldr	r2, [r7, #24]
 801c9fe:	4313      	orrs	r3, r2
 801ca00:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 801ca02:	687b      	ldr	r3, [r7, #4]
 801ca04:	69ba      	ldr	r2, [r7, #24]
 801ca06:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 801ca08:	683b      	ldr	r3, [r7, #0]
 801ca0a:	685b      	ldr	r3, [r3, #4]
 801ca0c:	2b02      	cmp	r3, #2
 801ca0e:	d003      	beq.n	801ca18 <HAL_GPIO_Init+0xfc>
 801ca10:	683b      	ldr	r3, [r7, #0]
 801ca12:	685b      	ldr	r3, [r3, #4]
 801ca14:	2b12      	cmp	r3, #18
 801ca16:	d123      	bne.n	801ca60 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 801ca18:	69fb      	ldr	r3, [r7, #28]
 801ca1a:	08da      	lsrs	r2, r3, #3
 801ca1c:	687b      	ldr	r3, [r7, #4]
 801ca1e:	3208      	adds	r2, #8
 801ca20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801ca24:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 801ca26:	69fb      	ldr	r3, [r7, #28]
 801ca28:	f003 0307 	and.w	r3, r3, #7
 801ca2c:	009b      	lsls	r3, r3, #2
 801ca2e:	220f      	movs	r2, #15
 801ca30:	fa02 f303 	lsl.w	r3, r2, r3
 801ca34:	43db      	mvns	r3, r3
 801ca36:	69ba      	ldr	r2, [r7, #24]
 801ca38:	4013      	ands	r3, r2
 801ca3a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 801ca3c:	683b      	ldr	r3, [r7, #0]
 801ca3e:	691a      	ldr	r2, [r3, #16]
 801ca40:	69fb      	ldr	r3, [r7, #28]
 801ca42:	f003 0307 	and.w	r3, r3, #7
 801ca46:	009b      	lsls	r3, r3, #2
 801ca48:	fa02 f303 	lsl.w	r3, r2, r3
 801ca4c:	69ba      	ldr	r2, [r7, #24]
 801ca4e:	4313      	orrs	r3, r2
 801ca50:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 801ca52:	69fb      	ldr	r3, [r7, #28]
 801ca54:	08da      	lsrs	r2, r3, #3
 801ca56:	687b      	ldr	r3, [r7, #4]
 801ca58:	3208      	adds	r2, #8
 801ca5a:	69b9      	ldr	r1, [r7, #24]
 801ca5c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 801ca60:	687b      	ldr	r3, [r7, #4]
 801ca62:	681b      	ldr	r3, [r3, #0]
 801ca64:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 801ca66:	69fb      	ldr	r3, [r7, #28]
 801ca68:	005b      	lsls	r3, r3, #1
 801ca6a:	2203      	movs	r2, #3
 801ca6c:	fa02 f303 	lsl.w	r3, r2, r3
 801ca70:	43db      	mvns	r3, r3
 801ca72:	69ba      	ldr	r2, [r7, #24]
 801ca74:	4013      	ands	r3, r2
 801ca76:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 801ca78:	683b      	ldr	r3, [r7, #0]
 801ca7a:	685b      	ldr	r3, [r3, #4]
 801ca7c:	f003 0203 	and.w	r2, r3, #3
 801ca80:	69fb      	ldr	r3, [r7, #28]
 801ca82:	005b      	lsls	r3, r3, #1
 801ca84:	fa02 f303 	lsl.w	r3, r2, r3
 801ca88:	69ba      	ldr	r2, [r7, #24]
 801ca8a:	4313      	orrs	r3, r2
 801ca8c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 801ca8e:	687b      	ldr	r3, [r7, #4]
 801ca90:	69ba      	ldr	r2, [r7, #24]
 801ca92:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 801ca94:	683b      	ldr	r3, [r7, #0]
 801ca96:	685b      	ldr	r3, [r3, #4]
 801ca98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801ca9c:	2b00      	cmp	r3, #0
 801ca9e:	f000 80a2 	beq.w	801cbe6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 801caa2:	2300      	movs	r3, #0
 801caa4:	60fb      	str	r3, [r7, #12]
 801caa6:	4b56      	ldr	r3, [pc, #344]	; (801cc00 <HAL_GPIO_Init+0x2e4>)
 801caa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801caaa:	4a55      	ldr	r2, [pc, #340]	; (801cc00 <HAL_GPIO_Init+0x2e4>)
 801caac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 801cab0:	6453      	str	r3, [r2, #68]	; 0x44
 801cab2:	4b53      	ldr	r3, [pc, #332]	; (801cc00 <HAL_GPIO_Init+0x2e4>)
 801cab4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801cab6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801caba:	60fb      	str	r3, [r7, #12]
 801cabc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 801cabe:	4a51      	ldr	r2, [pc, #324]	; (801cc04 <HAL_GPIO_Init+0x2e8>)
 801cac0:	69fb      	ldr	r3, [r7, #28]
 801cac2:	089b      	lsrs	r3, r3, #2
 801cac4:	3302      	adds	r3, #2
 801cac6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801caca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 801cacc:	69fb      	ldr	r3, [r7, #28]
 801cace:	f003 0303 	and.w	r3, r3, #3
 801cad2:	009b      	lsls	r3, r3, #2
 801cad4:	220f      	movs	r2, #15
 801cad6:	fa02 f303 	lsl.w	r3, r2, r3
 801cada:	43db      	mvns	r3, r3
 801cadc:	69ba      	ldr	r2, [r7, #24]
 801cade:	4013      	ands	r3, r2
 801cae0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 801cae2:	687b      	ldr	r3, [r7, #4]
 801cae4:	4a48      	ldr	r2, [pc, #288]	; (801cc08 <HAL_GPIO_Init+0x2ec>)
 801cae6:	4293      	cmp	r3, r2
 801cae8:	d019      	beq.n	801cb1e <HAL_GPIO_Init+0x202>
 801caea:	687b      	ldr	r3, [r7, #4]
 801caec:	4a47      	ldr	r2, [pc, #284]	; (801cc0c <HAL_GPIO_Init+0x2f0>)
 801caee:	4293      	cmp	r3, r2
 801caf0:	d013      	beq.n	801cb1a <HAL_GPIO_Init+0x1fe>
 801caf2:	687b      	ldr	r3, [r7, #4]
 801caf4:	4a46      	ldr	r2, [pc, #280]	; (801cc10 <HAL_GPIO_Init+0x2f4>)
 801caf6:	4293      	cmp	r3, r2
 801caf8:	d00d      	beq.n	801cb16 <HAL_GPIO_Init+0x1fa>
 801cafa:	687b      	ldr	r3, [r7, #4]
 801cafc:	4a45      	ldr	r2, [pc, #276]	; (801cc14 <HAL_GPIO_Init+0x2f8>)
 801cafe:	4293      	cmp	r3, r2
 801cb00:	d007      	beq.n	801cb12 <HAL_GPIO_Init+0x1f6>
 801cb02:	687b      	ldr	r3, [r7, #4]
 801cb04:	4a44      	ldr	r2, [pc, #272]	; (801cc18 <HAL_GPIO_Init+0x2fc>)
 801cb06:	4293      	cmp	r3, r2
 801cb08:	d101      	bne.n	801cb0e <HAL_GPIO_Init+0x1f2>
 801cb0a:	2304      	movs	r3, #4
 801cb0c:	e008      	b.n	801cb20 <HAL_GPIO_Init+0x204>
 801cb0e:	2307      	movs	r3, #7
 801cb10:	e006      	b.n	801cb20 <HAL_GPIO_Init+0x204>
 801cb12:	2303      	movs	r3, #3
 801cb14:	e004      	b.n	801cb20 <HAL_GPIO_Init+0x204>
 801cb16:	2302      	movs	r3, #2
 801cb18:	e002      	b.n	801cb20 <HAL_GPIO_Init+0x204>
 801cb1a:	2301      	movs	r3, #1
 801cb1c:	e000      	b.n	801cb20 <HAL_GPIO_Init+0x204>
 801cb1e:	2300      	movs	r3, #0
 801cb20:	69fa      	ldr	r2, [r7, #28]
 801cb22:	f002 0203 	and.w	r2, r2, #3
 801cb26:	0092      	lsls	r2, r2, #2
 801cb28:	4093      	lsls	r3, r2
 801cb2a:	69ba      	ldr	r2, [r7, #24]
 801cb2c:	4313      	orrs	r3, r2
 801cb2e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 801cb30:	4934      	ldr	r1, [pc, #208]	; (801cc04 <HAL_GPIO_Init+0x2e8>)
 801cb32:	69fb      	ldr	r3, [r7, #28]
 801cb34:	089b      	lsrs	r3, r3, #2
 801cb36:	3302      	adds	r3, #2
 801cb38:	69ba      	ldr	r2, [r7, #24]
 801cb3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 801cb3e:	4b37      	ldr	r3, [pc, #220]	; (801cc1c <HAL_GPIO_Init+0x300>)
 801cb40:	681b      	ldr	r3, [r3, #0]
 801cb42:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 801cb44:	693b      	ldr	r3, [r7, #16]
 801cb46:	43db      	mvns	r3, r3
 801cb48:	69ba      	ldr	r2, [r7, #24]
 801cb4a:	4013      	ands	r3, r2
 801cb4c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 801cb4e:	683b      	ldr	r3, [r7, #0]
 801cb50:	685b      	ldr	r3, [r3, #4]
 801cb52:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 801cb56:	2b00      	cmp	r3, #0
 801cb58:	d003      	beq.n	801cb62 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 801cb5a:	69ba      	ldr	r2, [r7, #24]
 801cb5c:	693b      	ldr	r3, [r7, #16]
 801cb5e:	4313      	orrs	r3, r2
 801cb60:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 801cb62:	4a2e      	ldr	r2, [pc, #184]	; (801cc1c <HAL_GPIO_Init+0x300>)
 801cb64:	69bb      	ldr	r3, [r7, #24]
 801cb66:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 801cb68:	4b2c      	ldr	r3, [pc, #176]	; (801cc1c <HAL_GPIO_Init+0x300>)
 801cb6a:	685b      	ldr	r3, [r3, #4]
 801cb6c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 801cb6e:	693b      	ldr	r3, [r7, #16]
 801cb70:	43db      	mvns	r3, r3
 801cb72:	69ba      	ldr	r2, [r7, #24]
 801cb74:	4013      	ands	r3, r2
 801cb76:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 801cb78:	683b      	ldr	r3, [r7, #0]
 801cb7a:	685b      	ldr	r3, [r3, #4]
 801cb7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801cb80:	2b00      	cmp	r3, #0
 801cb82:	d003      	beq.n	801cb8c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 801cb84:	69ba      	ldr	r2, [r7, #24]
 801cb86:	693b      	ldr	r3, [r7, #16]
 801cb88:	4313      	orrs	r3, r2
 801cb8a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 801cb8c:	4a23      	ldr	r2, [pc, #140]	; (801cc1c <HAL_GPIO_Init+0x300>)
 801cb8e:	69bb      	ldr	r3, [r7, #24]
 801cb90:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 801cb92:	4b22      	ldr	r3, [pc, #136]	; (801cc1c <HAL_GPIO_Init+0x300>)
 801cb94:	689b      	ldr	r3, [r3, #8]
 801cb96:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 801cb98:	693b      	ldr	r3, [r7, #16]
 801cb9a:	43db      	mvns	r3, r3
 801cb9c:	69ba      	ldr	r2, [r7, #24]
 801cb9e:	4013      	ands	r3, r2
 801cba0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 801cba2:	683b      	ldr	r3, [r7, #0]
 801cba4:	685b      	ldr	r3, [r3, #4]
 801cba6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 801cbaa:	2b00      	cmp	r3, #0
 801cbac:	d003      	beq.n	801cbb6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 801cbae:	69ba      	ldr	r2, [r7, #24]
 801cbb0:	693b      	ldr	r3, [r7, #16]
 801cbb2:	4313      	orrs	r3, r2
 801cbb4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 801cbb6:	4a19      	ldr	r2, [pc, #100]	; (801cc1c <HAL_GPIO_Init+0x300>)
 801cbb8:	69bb      	ldr	r3, [r7, #24]
 801cbba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 801cbbc:	4b17      	ldr	r3, [pc, #92]	; (801cc1c <HAL_GPIO_Init+0x300>)
 801cbbe:	68db      	ldr	r3, [r3, #12]
 801cbc0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 801cbc2:	693b      	ldr	r3, [r7, #16]
 801cbc4:	43db      	mvns	r3, r3
 801cbc6:	69ba      	ldr	r2, [r7, #24]
 801cbc8:	4013      	ands	r3, r2
 801cbca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 801cbcc:	683b      	ldr	r3, [r7, #0]
 801cbce:	685b      	ldr	r3, [r3, #4]
 801cbd0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 801cbd4:	2b00      	cmp	r3, #0
 801cbd6:	d003      	beq.n	801cbe0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 801cbd8:	69ba      	ldr	r2, [r7, #24]
 801cbda:	693b      	ldr	r3, [r7, #16]
 801cbdc:	4313      	orrs	r3, r2
 801cbde:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 801cbe0:	4a0e      	ldr	r2, [pc, #56]	; (801cc1c <HAL_GPIO_Init+0x300>)
 801cbe2:	69bb      	ldr	r3, [r7, #24]
 801cbe4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 801cbe6:	69fb      	ldr	r3, [r7, #28]
 801cbe8:	3301      	adds	r3, #1
 801cbea:	61fb      	str	r3, [r7, #28]
 801cbec:	69fb      	ldr	r3, [r7, #28]
 801cbee:	2b0f      	cmp	r3, #15
 801cbf0:	f67f aea2 	bls.w	801c938 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 801cbf4:	bf00      	nop
 801cbf6:	3724      	adds	r7, #36	; 0x24
 801cbf8:	46bd      	mov	sp, r7
 801cbfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cbfe:	4770      	bx	lr
 801cc00:	40023800 	.word	0x40023800
 801cc04:	40013800 	.word	0x40013800
 801cc08:	40020000 	.word	0x40020000
 801cc0c:	40020400 	.word	0x40020400
 801cc10:	40020800 	.word	0x40020800
 801cc14:	40020c00 	.word	0x40020c00
 801cc18:	40021000 	.word	0x40021000
 801cc1c:	40013c00 	.word	0x40013c00

0801cc20 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 801cc20:	b480      	push	{r7}
 801cc22:	b085      	sub	sp, #20
 801cc24:	af00      	add	r7, sp, #0
 801cc26:	6078      	str	r0, [r7, #4]
 801cc28:	460b      	mov	r3, r1
 801cc2a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 801cc2c:	687b      	ldr	r3, [r7, #4]
 801cc2e:	691a      	ldr	r2, [r3, #16]
 801cc30:	887b      	ldrh	r3, [r7, #2]
 801cc32:	4013      	ands	r3, r2
 801cc34:	2b00      	cmp	r3, #0
 801cc36:	d002      	beq.n	801cc3e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 801cc38:	2301      	movs	r3, #1
 801cc3a:	73fb      	strb	r3, [r7, #15]
 801cc3c:	e001      	b.n	801cc42 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 801cc3e:	2300      	movs	r3, #0
 801cc40:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 801cc42:	7bfb      	ldrb	r3, [r7, #15]
}
 801cc44:	4618      	mov	r0, r3
 801cc46:	3714      	adds	r7, #20
 801cc48:	46bd      	mov	sp, r7
 801cc4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cc4e:	4770      	bx	lr

0801cc50 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 801cc50:	b480      	push	{r7}
 801cc52:	b083      	sub	sp, #12
 801cc54:	af00      	add	r7, sp, #0
 801cc56:	6078      	str	r0, [r7, #4]
 801cc58:	460b      	mov	r3, r1
 801cc5a:	807b      	strh	r3, [r7, #2]
 801cc5c:	4613      	mov	r3, r2
 801cc5e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 801cc60:	787b      	ldrb	r3, [r7, #1]
 801cc62:	2b00      	cmp	r3, #0
 801cc64:	d003      	beq.n	801cc6e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 801cc66:	887a      	ldrh	r2, [r7, #2]
 801cc68:	687b      	ldr	r3, [r7, #4]
 801cc6a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 801cc6c:	e003      	b.n	801cc76 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 801cc6e:	887b      	ldrh	r3, [r7, #2]
 801cc70:	041a      	lsls	r2, r3, #16
 801cc72:	687b      	ldr	r3, [r7, #4]
 801cc74:	619a      	str	r2, [r3, #24]
}
 801cc76:	bf00      	nop
 801cc78:	370c      	adds	r7, #12
 801cc7a:	46bd      	mov	sp, r7
 801cc7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cc80:	4770      	bx	lr
	...

0801cc84 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 801cc84:	b580      	push	{r7, lr}
 801cc86:	b082      	sub	sp, #8
 801cc88:	af00      	add	r7, sp, #0
 801cc8a:	4603      	mov	r3, r0
 801cc8c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 801cc8e:	4b08      	ldr	r3, [pc, #32]	; (801ccb0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 801cc90:	695a      	ldr	r2, [r3, #20]
 801cc92:	88fb      	ldrh	r3, [r7, #6]
 801cc94:	4013      	ands	r3, r2
 801cc96:	2b00      	cmp	r3, #0
 801cc98:	d006      	beq.n	801cca8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 801cc9a:	4a05      	ldr	r2, [pc, #20]	; (801ccb0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 801cc9c:	88fb      	ldrh	r3, [r7, #6]
 801cc9e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 801cca0:	88fb      	ldrh	r3, [r7, #6]
 801cca2:	4618      	mov	r0, r3
 801cca4:	f7fe fe80 	bl	801b9a8 <HAL_GPIO_EXTI_Callback>
  }
}
 801cca8:	bf00      	nop
 801ccaa:	3708      	adds	r7, #8
 801ccac:	46bd      	mov	sp, r7
 801ccae:	bd80      	pop	{r7, pc}
 801ccb0:	40013c00 	.word	0x40013c00

0801ccb4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 801ccb4:	b580      	push	{r7, lr}
 801ccb6:	b084      	sub	sp, #16
 801ccb8:	af00      	add	r7, sp, #0
 801ccba:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 801ccbc:	687b      	ldr	r3, [r7, #4]
 801ccbe:	2b00      	cmp	r3, #0
 801ccc0:	d101      	bne.n	801ccc6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 801ccc2:	2301      	movs	r3, #1
 801ccc4:	e11f      	b.n	801cf06 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 801ccc6:	687b      	ldr	r3, [r7, #4]
 801ccc8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801cccc:	b2db      	uxtb	r3, r3
 801ccce:	2b00      	cmp	r3, #0
 801ccd0:	d106      	bne.n	801cce0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 801ccd2:	687b      	ldr	r3, [r7, #4]
 801ccd4:	2200      	movs	r2, #0
 801ccd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 801ccda:	6878      	ldr	r0, [r7, #4]
 801ccdc:	f7fe f988 	bl	801aff0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 801cce0:	687b      	ldr	r3, [r7, #4]
 801cce2:	2224      	movs	r2, #36	; 0x24
 801cce4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 801cce8:	687b      	ldr	r3, [r7, #4]
 801ccea:	681b      	ldr	r3, [r3, #0]
 801ccec:	681a      	ldr	r2, [r3, #0]
 801ccee:	687b      	ldr	r3, [r7, #4]
 801ccf0:	681b      	ldr	r3, [r3, #0]
 801ccf2:	f022 0201 	bic.w	r2, r2, #1
 801ccf6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 801ccf8:	687b      	ldr	r3, [r7, #4]
 801ccfa:	681b      	ldr	r3, [r3, #0]
 801ccfc:	681a      	ldr	r2, [r3, #0]
 801ccfe:	687b      	ldr	r3, [r7, #4]
 801cd00:	681b      	ldr	r3, [r3, #0]
 801cd02:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 801cd06:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 801cd08:	687b      	ldr	r3, [r7, #4]
 801cd0a:	681b      	ldr	r3, [r3, #0]
 801cd0c:	681a      	ldr	r2, [r3, #0]
 801cd0e:	687b      	ldr	r3, [r7, #4]
 801cd10:	681b      	ldr	r3, [r3, #0]
 801cd12:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 801cd16:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 801cd18:	f001 f974 	bl	801e004 <HAL_RCC_GetPCLK1Freq>
 801cd1c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 801cd1e:	687b      	ldr	r3, [r7, #4]
 801cd20:	685b      	ldr	r3, [r3, #4]
 801cd22:	4a7b      	ldr	r2, [pc, #492]	; (801cf10 <HAL_I2C_Init+0x25c>)
 801cd24:	4293      	cmp	r3, r2
 801cd26:	d807      	bhi.n	801cd38 <HAL_I2C_Init+0x84>
 801cd28:	68fb      	ldr	r3, [r7, #12]
 801cd2a:	4a7a      	ldr	r2, [pc, #488]	; (801cf14 <HAL_I2C_Init+0x260>)
 801cd2c:	4293      	cmp	r3, r2
 801cd2e:	bf94      	ite	ls
 801cd30:	2301      	movls	r3, #1
 801cd32:	2300      	movhi	r3, #0
 801cd34:	b2db      	uxtb	r3, r3
 801cd36:	e006      	b.n	801cd46 <HAL_I2C_Init+0x92>
 801cd38:	68fb      	ldr	r3, [r7, #12]
 801cd3a:	4a77      	ldr	r2, [pc, #476]	; (801cf18 <HAL_I2C_Init+0x264>)
 801cd3c:	4293      	cmp	r3, r2
 801cd3e:	bf94      	ite	ls
 801cd40:	2301      	movls	r3, #1
 801cd42:	2300      	movhi	r3, #0
 801cd44:	b2db      	uxtb	r3, r3
 801cd46:	2b00      	cmp	r3, #0
 801cd48:	d001      	beq.n	801cd4e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 801cd4a:	2301      	movs	r3, #1
 801cd4c:	e0db      	b.n	801cf06 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 801cd4e:	68fb      	ldr	r3, [r7, #12]
 801cd50:	4a72      	ldr	r2, [pc, #456]	; (801cf1c <HAL_I2C_Init+0x268>)
 801cd52:	fba2 2303 	umull	r2, r3, r2, r3
 801cd56:	0c9b      	lsrs	r3, r3, #18
 801cd58:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 801cd5a:	687b      	ldr	r3, [r7, #4]
 801cd5c:	681b      	ldr	r3, [r3, #0]
 801cd5e:	685b      	ldr	r3, [r3, #4]
 801cd60:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 801cd64:	687b      	ldr	r3, [r7, #4]
 801cd66:	681b      	ldr	r3, [r3, #0]
 801cd68:	68ba      	ldr	r2, [r7, #8]
 801cd6a:	430a      	orrs	r2, r1
 801cd6c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 801cd6e:	687b      	ldr	r3, [r7, #4]
 801cd70:	681b      	ldr	r3, [r3, #0]
 801cd72:	6a1b      	ldr	r3, [r3, #32]
 801cd74:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 801cd78:	687b      	ldr	r3, [r7, #4]
 801cd7a:	685b      	ldr	r3, [r3, #4]
 801cd7c:	4a64      	ldr	r2, [pc, #400]	; (801cf10 <HAL_I2C_Init+0x25c>)
 801cd7e:	4293      	cmp	r3, r2
 801cd80:	d802      	bhi.n	801cd88 <HAL_I2C_Init+0xd4>
 801cd82:	68bb      	ldr	r3, [r7, #8]
 801cd84:	3301      	adds	r3, #1
 801cd86:	e009      	b.n	801cd9c <HAL_I2C_Init+0xe8>
 801cd88:	68bb      	ldr	r3, [r7, #8]
 801cd8a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 801cd8e:	fb02 f303 	mul.w	r3, r2, r3
 801cd92:	4a63      	ldr	r2, [pc, #396]	; (801cf20 <HAL_I2C_Init+0x26c>)
 801cd94:	fba2 2303 	umull	r2, r3, r2, r3
 801cd98:	099b      	lsrs	r3, r3, #6
 801cd9a:	3301      	adds	r3, #1
 801cd9c:	687a      	ldr	r2, [r7, #4]
 801cd9e:	6812      	ldr	r2, [r2, #0]
 801cda0:	430b      	orrs	r3, r1
 801cda2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 801cda4:	687b      	ldr	r3, [r7, #4]
 801cda6:	681b      	ldr	r3, [r3, #0]
 801cda8:	69db      	ldr	r3, [r3, #28]
 801cdaa:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 801cdae:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 801cdb2:	687b      	ldr	r3, [r7, #4]
 801cdb4:	685b      	ldr	r3, [r3, #4]
 801cdb6:	4956      	ldr	r1, [pc, #344]	; (801cf10 <HAL_I2C_Init+0x25c>)
 801cdb8:	428b      	cmp	r3, r1
 801cdba:	d80d      	bhi.n	801cdd8 <HAL_I2C_Init+0x124>
 801cdbc:	68fb      	ldr	r3, [r7, #12]
 801cdbe:	1e59      	subs	r1, r3, #1
 801cdc0:	687b      	ldr	r3, [r7, #4]
 801cdc2:	685b      	ldr	r3, [r3, #4]
 801cdc4:	005b      	lsls	r3, r3, #1
 801cdc6:	fbb1 f3f3 	udiv	r3, r1, r3
 801cdca:	3301      	adds	r3, #1
 801cdcc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801cdd0:	2b04      	cmp	r3, #4
 801cdd2:	bf38      	it	cc
 801cdd4:	2304      	movcc	r3, #4
 801cdd6:	e04f      	b.n	801ce78 <HAL_I2C_Init+0x1c4>
 801cdd8:	687b      	ldr	r3, [r7, #4]
 801cdda:	689b      	ldr	r3, [r3, #8]
 801cddc:	2b00      	cmp	r3, #0
 801cdde:	d111      	bne.n	801ce04 <HAL_I2C_Init+0x150>
 801cde0:	68fb      	ldr	r3, [r7, #12]
 801cde2:	1e58      	subs	r0, r3, #1
 801cde4:	687b      	ldr	r3, [r7, #4]
 801cde6:	6859      	ldr	r1, [r3, #4]
 801cde8:	460b      	mov	r3, r1
 801cdea:	005b      	lsls	r3, r3, #1
 801cdec:	440b      	add	r3, r1
 801cdee:	fbb0 f3f3 	udiv	r3, r0, r3
 801cdf2:	3301      	adds	r3, #1
 801cdf4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801cdf8:	2b00      	cmp	r3, #0
 801cdfa:	bf0c      	ite	eq
 801cdfc:	2301      	moveq	r3, #1
 801cdfe:	2300      	movne	r3, #0
 801ce00:	b2db      	uxtb	r3, r3
 801ce02:	e012      	b.n	801ce2a <HAL_I2C_Init+0x176>
 801ce04:	68fb      	ldr	r3, [r7, #12]
 801ce06:	1e58      	subs	r0, r3, #1
 801ce08:	687b      	ldr	r3, [r7, #4]
 801ce0a:	6859      	ldr	r1, [r3, #4]
 801ce0c:	460b      	mov	r3, r1
 801ce0e:	009b      	lsls	r3, r3, #2
 801ce10:	440b      	add	r3, r1
 801ce12:	0099      	lsls	r1, r3, #2
 801ce14:	440b      	add	r3, r1
 801ce16:	fbb0 f3f3 	udiv	r3, r0, r3
 801ce1a:	3301      	adds	r3, #1
 801ce1c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801ce20:	2b00      	cmp	r3, #0
 801ce22:	bf0c      	ite	eq
 801ce24:	2301      	moveq	r3, #1
 801ce26:	2300      	movne	r3, #0
 801ce28:	b2db      	uxtb	r3, r3
 801ce2a:	2b00      	cmp	r3, #0
 801ce2c:	d001      	beq.n	801ce32 <HAL_I2C_Init+0x17e>
 801ce2e:	2301      	movs	r3, #1
 801ce30:	e022      	b.n	801ce78 <HAL_I2C_Init+0x1c4>
 801ce32:	687b      	ldr	r3, [r7, #4]
 801ce34:	689b      	ldr	r3, [r3, #8]
 801ce36:	2b00      	cmp	r3, #0
 801ce38:	d10e      	bne.n	801ce58 <HAL_I2C_Init+0x1a4>
 801ce3a:	68fb      	ldr	r3, [r7, #12]
 801ce3c:	1e58      	subs	r0, r3, #1
 801ce3e:	687b      	ldr	r3, [r7, #4]
 801ce40:	6859      	ldr	r1, [r3, #4]
 801ce42:	460b      	mov	r3, r1
 801ce44:	005b      	lsls	r3, r3, #1
 801ce46:	440b      	add	r3, r1
 801ce48:	fbb0 f3f3 	udiv	r3, r0, r3
 801ce4c:	3301      	adds	r3, #1
 801ce4e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801ce52:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801ce56:	e00f      	b.n	801ce78 <HAL_I2C_Init+0x1c4>
 801ce58:	68fb      	ldr	r3, [r7, #12]
 801ce5a:	1e58      	subs	r0, r3, #1
 801ce5c:	687b      	ldr	r3, [r7, #4]
 801ce5e:	6859      	ldr	r1, [r3, #4]
 801ce60:	460b      	mov	r3, r1
 801ce62:	009b      	lsls	r3, r3, #2
 801ce64:	440b      	add	r3, r1
 801ce66:	0099      	lsls	r1, r3, #2
 801ce68:	440b      	add	r3, r1
 801ce6a:	fbb0 f3f3 	udiv	r3, r0, r3
 801ce6e:	3301      	adds	r3, #1
 801ce70:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801ce74:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 801ce78:	6879      	ldr	r1, [r7, #4]
 801ce7a:	6809      	ldr	r1, [r1, #0]
 801ce7c:	4313      	orrs	r3, r2
 801ce7e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 801ce80:	687b      	ldr	r3, [r7, #4]
 801ce82:	681b      	ldr	r3, [r3, #0]
 801ce84:	681b      	ldr	r3, [r3, #0]
 801ce86:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 801ce8a:	687b      	ldr	r3, [r7, #4]
 801ce8c:	69da      	ldr	r2, [r3, #28]
 801ce8e:	687b      	ldr	r3, [r7, #4]
 801ce90:	6a1b      	ldr	r3, [r3, #32]
 801ce92:	431a      	orrs	r2, r3
 801ce94:	687b      	ldr	r3, [r7, #4]
 801ce96:	681b      	ldr	r3, [r3, #0]
 801ce98:	430a      	orrs	r2, r1
 801ce9a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 801ce9c:	687b      	ldr	r3, [r7, #4]
 801ce9e:	681b      	ldr	r3, [r3, #0]
 801cea0:	689b      	ldr	r3, [r3, #8]
 801cea2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 801cea6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 801ceaa:	687a      	ldr	r2, [r7, #4]
 801ceac:	6911      	ldr	r1, [r2, #16]
 801ceae:	687a      	ldr	r2, [r7, #4]
 801ceb0:	68d2      	ldr	r2, [r2, #12]
 801ceb2:	4311      	orrs	r1, r2
 801ceb4:	687a      	ldr	r2, [r7, #4]
 801ceb6:	6812      	ldr	r2, [r2, #0]
 801ceb8:	430b      	orrs	r3, r1
 801ceba:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 801cebc:	687b      	ldr	r3, [r7, #4]
 801cebe:	681b      	ldr	r3, [r3, #0]
 801cec0:	68db      	ldr	r3, [r3, #12]
 801cec2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 801cec6:	687b      	ldr	r3, [r7, #4]
 801cec8:	695a      	ldr	r2, [r3, #20]
 801ceca:	687b      	ldr	r3, [r7, #4]
 801cecc:	699b      	ldr	r3, [r3, #24]
 801cece:	431a      	orrs	r2, r3
 801ced0:	687b      	ldr	r3, [r7, #4]
 801ced2:	681b      	ldr	r3, [r3, #0]
 801ced4:	430a      	orrs	r2, r1
 801ced6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 801ced8:	687b      	ldr	r3, [r7, #4]
 801ceda:	681b      	ldr	r3, [r3, #0]
 801cedc:	681a      	ldr	r2, [r3, #0]
 801cede:	687b      	ldr	r3, [r7, #4]
 801cee0:	681b      	ldr	r3, [r3, #0]
 801cee2:	f042 0201 	orr.w	r2, r2, #1
 801cee6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 801cee8:	687b      	ldr	r3, [r7, #4]
 801ceea:	2200      	movs	r2, #0
 801ceec:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 801ceee:	687b      	ldr	r3, [r7, #4]
 801cef0:	2220      	movs	r2, #32
 801cef2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 801cef6:	687b      	ldr	r3, [r7, #4]
 801cef8:	2200      	movs	r2, #0
 801cefa:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 801cefc:	687b      	ldr	r3, [r7, #4]
 801cefe:	2200      	movs	r2, #0
 801cf00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 801cf04:	2300      	movs	r3, #0
}
 801cf06:	4618      	mov	r0, r3
 801cf08:	3710      	adds	r7, #16
 801cf0a:	46bd      	mov	sp, r7
 801cf0c:	bd80      	pop	{r7, pc}
 801cf0e:	bf00      	nop
 801cf10:	000186a0 	.word	0x000186a0
 801cf14:	001e847f 	.word	0x001e847f
 801cf18:	003d08ff 	.word	0x003d08ff
 801cf1c:	431bde83 	.word	0x431bde83
 801cf20:	10624dd3 	.word	0x10624dd3

0801cf24 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 801cf24:	b580      	push	{r7, lr}
 801cf26:	b088      	sub	sp, #32
 801cf28:	af02      	add	r7, sp, #8
 801cf2a:	60f8      	str	r0, [r7, #12]
 801cf2c:	607a      	str	r2, [r7, #4]
 801cf2e:	461a      	mov	r2, r3
 801cf30:	460b      	mov	r3, r1
 801cf32:	817b      	strh	r3, [r7, #10]
 801cf34:	4613      	mov	r3, r2
 801cf36:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 801cf38:	f7ff f820 	bl	801bf7c <HAL_GetTick>
 801cf3c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 801cf3e:	68fb      	ldr	r3, [r7, #12]
 801cf40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801cf44:	b2db      	uxtb	r3, r3
 801cf46:	2b20      	cmp	r3, #32
 801cf48:	f040 80e0 	bne.w	801d10c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 801cf4c:	697b      	ldr	r3, [r7, #20]
 801cf4e:	9300      	str	r3, [sp, #0]
 801cf50:	2319      	movs	r3, #25
 801cf52:	2201      	movs	r2, #1
 801cf54:	4970      	ldr	r1, [pc, #448]	; (801d118 <HAL_I2C_Master_Transmit+0x1f4>)
 801cf56:	68f8      	ldr	r0, [r7, #12]
 801cf58:	f000 fa92 	bl	801d480 <I2C_WaitOnFlagUntilTimeout>
 801cf5c:	4603      	mov	r3, r0
 801cf5e:	2b00      	cmp	r3, #0
 801cf60:	d001      	beq.n	801cf66 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 801cf62:	2302      	movs	r3, #2
 801cf64:	e0d3      	b.n	801d10e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 801cf66:	68fb      	ldr	r3, [r7, #12]
 801cf68:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801cf6c:	2b01      	cmp	r3, #1
 801cf6e:	d101      	bne.n	801cf74 <HAL_I2C_Master_Transmit+0x50>
 801cf70:	2302      	movs	r3, #2
 801cf72:	e0cc      	b.n	801d10e <HAL_I2C_Master_Transmit+0x1ea>
 801cf74:	68fb      	ldr	r3, [r7, #12]
 801cf76:	2201      	movs	r2, #1
 801cf78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 801cf7c:	68fb      	ldr	r3, [r7, #12]
 801cf7e:	681b      	ldr	r3, [r3, #0]
 801cf80:	681b      	ldr	r3, [r3, #0]
 801cf82:	f003 0301 	and.w	r3, r3, #1
 801cf86:	2b01      	cmp	r3, #1
 801cf88:	d007      	beq.n	801cf9a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 801cf8a:	68fb      	ldr	r3, [r7, #12]
 801cf8c:	681b      	ldr	r3, [r3, #0]
 801cf8e:	681a      	ldr	r2, [r3, #0]
 801cf90:	68fb      	ldr	r3, [r7, #12]
 801cf92:	681b      	ldr	r3, [r3, #0]
 801cf94:	f042 0201 	orr.w	r2, r2, #1
 801cf98:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 801cf9a:	68fb      	ldr	r3, [r7, #12]
 801cf9c:	681b      	ldr	r3, [r3, #0]
 801cf9e:	681a      	ldr	r2, [r3, #0]
 801cfa0:	68fb      	ldr	r3, [r7, #12]
 801cfa2:	681b      	ldr	r3, [r3, #0]
 801cfa4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 801cfa8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 801cfaa:	68fb      	ldr	r3, [r7, #12]
 801cfac:	2221      	movs	r2, #33	; 0x21
 801cfae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 801cfb2:	68fb      	ldr	r3, [r7, #12]
 801cfb4:	2210      	movs	r2, #16
 801cfb6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 801cfba:	68fb      	ldr	r3, [r7, #12]
 801cfbc:	2200      	movs	r2, #0
 801cfbe:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 801cfc0:	68fb      	ldr	r3, [r7, #12]
 801cfc2:	687a      	ldr	r2, [r7, #4]
 801cfc4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 801cfc6:	68fb      	ldr	r3, [r7, #12]
 801cfc8:	893a      	ldrh	r2, [r7, #8]
 801cfca:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 801cfcc:	68fb      	ldr	r3, [r7, #12]
 801cfce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801cfd0:	b29a      	uxth	r2, r3
 801cfd2:	68fb      	ldr	r3, [r7, #12]
 801cfd4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 801cfd6:	68fb      	ldr	r3, [r7, #12]
 801cfd8:	4a50      	ldr	r2, [pc, #320]	; (801d11c <HAL_I2C_Master_Transmit+0x1f8>)
 801cfda:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 801cfdc:	8979      	ldrh	r1, [r7, #10]
 801cfde:	697b      	ldr	r3, [r7, #20]
 801cfe0:	6a3a      	ldr	r2, [r7, #32]
 801cfe2:	68f8      	ldr	r0, [r7, #12]
 801cfe4:	f000 f9ca 	bl	801d37c <I2C_MasterRequestWrite>
 801cfe8:	4603      	mov	r3, r0
 801cfea:	2b00      	cmp	r3, #0
 801cfec:	d001      	beq.n	801cff2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 801cfee:	2301      	movs	r3, #1
 801cff0:	e08d      	b.n	801d10e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 801cff2:	2300      	movs	r3, #0
 801cff4:	613b      	str	r3, [r7, #16]
 801cff6:	68fb      	ldr	r3, [r7, #12]
 801cff8:	681b      	ldr	r3, [r3, #0]
 801cffa:	695b      	ldr	r3, [r3, #20]
 801cffc:	613b      	str	r3, [r7, #16]
 801cffe:	68fb      	ldr	r3, [r7, #12]
 801d000:	681b      	ldr	r3, [r3, #0]
 801d002:	699b      	ldr	r3, [r3, #24]
 801d004:	613b      	str	r3, [r7, #16]
 801d006:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 801d008:	e066      	b.n	801d0d8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 801d00a:	697a      	ldr	r2, [r7, #20]
 801d00c:	6a39      	ldr	r1, [r7, #32]
 801d00e:	68f8      	ldr	r0, [r7, #12]
 801d010:	f000 fb0c 	bl	801d62c <I2C_WaitOnTXEFlagUntilTimeout>
 801d014:	4603      	mov	r3, r0
 801d016:	2b00      	cmp	r3, #0
 801d018:	d00d      	beq.n	801d036 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 801d01a:	68fb      	ldr	r3, [r7, #12]
 801d01c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801d01e:	2b04      	cmp	r3, #4
 801d020:	d107      	bne.n	801d032 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 801d022:	68fb      	ldr	r3, [r7, #12]
 801d024:	681b      	ldr	r3, [r3, #0]
 801d026:	681a      	ldr	r2, [r3, #0]
 801d028:	68fb      	ldr	r3, [r7, #12]
 801d02a:	681b      	ldr	r3, [r3, #0]
 801d02c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801d030:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 801d032:	2301      	movs	r3, #1
 801d034:	e06b      	b.n	801d10e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 801d036:	68fb      	ldr	r3, [r7, #12]
 801d038:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d03a:	781a      	ldrb	r2, [r3, #0]
 801d03c:	68fb      	ldr	r3, [r7, #12]
 801d03e:	681b      	ldr	r3, [r3, #0]
 801d040:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 801d042:	68fb      	ldr	r3, [r7, #12]
 801d044:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d046:	1c5a      	adds	r2, r3, #1
 801d048:	68fb      	ldr	r3, [r7, #12]
 801d04a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 801d04c:	68fb      	ldr	r3, [r7, #12]
 801d04e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801d050:	b29b      	uxth	r3, r3
 801d052:	3b01      	subs	r3, #1
 801d054:	b29a      	uxth	r2, r3
 801d056:	68fb      	ldr	r3, [r7, #12]
 801d058:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 801d05a:	68fb      	ldr	r3, [r7, #12]
 801d05c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801d05e:	3b01      	subs	r3, #1
 801d060:	b29a      	uxth	r2, r3
 801d062:	68fb      	ldr	r3, [r7, #12]
 801d064:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 801d066:	68fb      	ldr	r3, [r7, #12]
 801d068:	681b      	ldr	r3, [r3, #0]
 801d06a:	695b      	ldr	r3, [r3, #20]
 801d06c:	f003 0304 	and.w	r3, r3, #4
 801d070:	2b04      	cmp	r3, #4
 801d072:	d11b      	bne.n	801d0ac <HAL_I2C_Master_Transmit+0x188>
 801d074:	68fb      	ldr	r3, [r7, #12]
 801d076:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801d078:	2b00      	cmp	r3, #0
 801d07a:	d017      	beq.n	801d0ac <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 801d07c:	68fb      	ldr	r3, [r7, #12]
 801d07e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d080:	781a      	ldrb	r2, [r3, #0]
 801d082:	68fb      	ldr	r3, [r7, #12]
 801d084:	681b      	ldr	r3, [r3, #0]
 801d086:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 801d088:	68fb      	ldr	r3, [r7, #12]
 801d08a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d08c:	1c5a      	adds	r2, r3, #1
 801d08e:	68fb      	ldr	r3, [r7, #12]
 801d090:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 801d092:	68fb      	ldr	r3, [r7, #12]
 801d094:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801d096:	b29b      	uxth	r3, r3
 801d098:	3b01      	subs	r3, #1
 801d09a:	b29a      	uxth	r2, r3
 801d09c:	68fb      	ldr	r3, [r7, #12]
 801d09e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 801d0a0:	68fb      	ldr	r3, [r7, #12]
 801d0a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801d0a4:	3b01      	subs	r3, #1
 801d0a6:	b29a      	uxth	r2, r3
 801d0a8:	68fb      	ldr	r3, [r7, #12]
 801d0aa:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 801d0ac:	697a      	ldr	r2, [r7, #20]
 801d0ae:	6a39      	ldr	r1, [r7, #32]
 801d0b0:	68f8      	ldr	r0, [r7, #12]
 801d0b2:	f000 fafc 	bl	801d6ae <I2C_WaitOnBTFFlagUntilTimeout>
 801d0b6:	4603      	mov	r3, r0
 801d0b8:	2b00      	cmp	r3, #0
 801d0ba:	d00d      	beq.n	801d0d8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 801d0bc:	68fb      	ldr	r3, [r7, #12]
 801d0be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801d0c0:	2b04      	cmp	r3, #4
 801d0c2:	d107      	bne.n	801d0d4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 801d0c4:	68fb      	ldr	r3, [r7, #12]
 801d0c6:	681b      	ldr	r3, [r3, #0]
 801d0c8:	681a      	ldr	r2, [r3, #0]
 801d0ca:	68fb      	ldr	r3, [r7, #12]
 801d0cc:	681b      	ldr	r3, [r3, #0]
 801d0ce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801d0d2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 801d0d4:	2301      	movs	r3, #1
 801d0d6:	e01a      	b.n	801d10e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 801d0d8:	68fb      	ldr	r3, [r7, #12]
 801d0da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801d0dc:	2b00      	cmp	r3, #0
 801d0de:	d194      	bne.n	801d00a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 801d0e0:	68fb      	ldr	r3, [r7, #12]
 801d0e2:	681b      	ldr	r3, [r3, #0]
 801d0e4:	681a      	ldr	r2, [r3, #0]
 801d0e6:	68fb      	ldr	r3, [r7, #12]
 801d0e8:	681b      	ldr	r3, [r3, #0]
 801d0ea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801d0ee:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 801d0f0:	68fb      	ldr	r3, [r7, #12]
 801d0f2:	2220      	movs	r2, #32
 801d0f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 801d0f8:	68fb      	ldr	r3, [r7, #12]
 801d0fa:	2200      	movs	r2, #0
 801d0fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 801d100:	68fb      	ldr	r3, [r7, #12]
 801d102:	2200      	movs	r2, #0
 801d104:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 801d108:	2300      	movs	r3, #0
 801d10a:	e000      	b.n	801d10e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 801d10c:	2302      	movs	r3, #2
  }
}
 801d10e:	4618      	mov	r0, r3
 801d110:	3718      	adds	r7, #24
 801d112:	46bd      	mov	sp, r7
 801d114:	bd80      	pop	{r7, pc}
 801d116:	bf00      	nop
 801d118:	00100002 	.word	0x00100002
 801d11c:	ffff0000 	.word	0xffff0000

0801d120 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 801d120:	b580      	push	{r7, lr}
 801d122:	b08a      	sub	sp, #40	; 0x28
 801d124:	af02      	add	r7, sp, #8
 801d126:	60f8      	str	r0, [r7, #12]
 801d128:	607a      	str	r2, [r7, #4]
 801d12a:	603b      	str	r3, [r7, #0]
 801d12c:	460b      	mov	r3, r1
 801d12e:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 801d130:	f7fe ff24 	bl	801bf7c <HAL_GetTick>
 801d134:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 801d136:	2301      	movs	r3, #1
 801d138:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 801d13a:	68fb      	ldr	r3, [r7, #12]
 801d13c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801d140:	b2db      	uxtb	r3, r3
 801d142:	2b20      	cmp	r3, #32
 801d144:	f040 8111 	bne.w	801d36a <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 801d148:	69fb      	ldr	r3, [r7, #28]
 801d14a:	9300      	str	r3, [sp, #0]
 801d14c:	2319      	movs	r3, #25
 801d14e:	2201      	movs	r2, #1
 801d150:	4988      	ldr	r1, [pc, #544]	; (801d374 <HAL_I2C_IsDeviceReady+0x254>)
 801d152:	68f8      	ldr	r0, [r7, #12]
 801d154:	f000 f994 	bl	801d480 <I2C_WaitOnFlagUntilTimeout>
 801d158:	4603      	mov	r3, r0
 801d15a:	2b00      	cmp	r3, #0
 801d15c:	d001      	beq.n	801d162 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 801d15e:	2302      	movs	r3, #2
 801d160:	e104      	b.n	801d36c <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 801d162:	68fb      	ldr	r3, [r7, #12]
 801d164:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801d168:	2b01      	cmp	r3, #1
 801d16a:	d101      	bne.n	801d170 <HAL_I2C_IsDeviceReady+0x50>
 801d16c:	2302      	movs	r3, #2
 801d16e:	e0fd      	b.n	801d36c <HAL_I2C_IsDeviceReady+0x24c>
 801d170:	68fb      	ldr	r3, [r7, #12]
 801d172:	2201      	movs	r2, #1
 801d174:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 801d178:	68fb      	ldr	r3, [r7, #12]
 801d17a:	681b      	ldr	r3, [r3, #0]
 801d17c:	681b      	ldr	r3, [r3, #0]
 801d17e:	f003 0301 	and.w	r3, r3, #1
 801d182:	2b01      	cmp	r3, #1
 801d184:	d007      	beq.n	801d196 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 801d186:	68fb      	ldr	r3, [r7, #12]
 801d188:	681b      	ldr	r3, [r3, #0]
 801d18a:	681a      	ldr	r2, [r3, #0]
 801d18c:	68fb      	ldr	r3, [r7, #12]
 801d18e:	681b      	ldr	r3, [r3, #0]
 801d190:	f042 0201 	orr.w	r2, r2, #1
 801d194:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 801d196:	68fb      	ldr	r3, [r7, #12]
 801d198:	681b      	ldr	r3, [r3, #0]
 801d19a:	681a      	ldr	r2, [r3, #0]
 801d19c:	68fb      	ldr	r3, [r7, #12]
 801d19e:	681b      	ldr	r3, [r3, #0]
 801d1a0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 801d1a4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 801d1a6:	68fb      	ldr	r3, [r7, #12]
 801d1a8:	2224      	movs	r2, #36	; 0x24
 801d1aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 801d1ae:	68fb      	ldr	r3, [r7, #12]
 801d1b0:	2200      	movs	r2, #0
 801d1b2:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 801d1b4:	68fb      	ldr	r3, [r7, #12]
 801d1b6:	4a70      	ldr	r2, [pc, #448]	; (801d378 <HAL_I2C_IsDeviceReady+0x258>)
 801d1b8:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 801d1ba:	68fb      	ldr	r3, [r7, #12]
 801d1bc:	681b      	ldr	r3, [r3, #0]
 801d1be:	681a      	ldr	r2, [r3, #0]
 801d1c0:	68fb      	ldr	r3, [r7, #12]
 801d1c2:	681b      	ldr	r3, [r3, #0]
 801d1c4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801d1c8:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 801d1ca:	69fb      	ldr	r3, [r7, #28]
 801d1cc:	9300      	str	r3, [sp, #0]
 801d1ce:	683b      	ldr	r3, [r7, #0]
 801d1d0:	2200      	movs	r2, #0
 801d1d2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 801d1d6:	68f8      	ldr	r0, [r7, #12]
 801d1d8:	f000 f952 	bl	801d480 <I2C_WaitOnFlagUntilTimeout>
 801d1dc:	4603      	mov	r3, r0
 801d1de:	2b00      	cmp	r3, #0
 801d1e0:	d00d      	beq.n	801d1fe <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 801d1e2:	68fb      	ldr	r3, [r7, #12]
 801d1e4:	681b      	ldr	r3, [r3, #0]
 801d1e6:	681b      	ldr	r3, [r3, #0]
 801d1e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801d1ec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801d1f0:	d103      	bne.n	801d1fa <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 801d1f2:	68fb      	ldr	r3, [r7, #12]
 801d1f4:	f44f 7200 	mov.w	r2, #512	; 0x200
 801d1f8:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 801d1fa:	2303      	movs	r3, #3
 801d1fc:	e0b6      	b.n	801d36c <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 801d1fe:	897b      	ldrh	r3, [r7, #10]
 801d200:	b2db      	uxtb	r3, r3
 801d202:	461a      	mov	r2, r3
 801d204:	68fb      	ldr	r3, [r7, #12]
 801d206:	681b      	ldr	r3, [r3, #0]
 801d208:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 801d20c:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 801d20e:	f7fe feb5 	bl	801bf7c <HAL_GetTick>
 801d212:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 801d214:	68fb      	ldr	r3, [r7, #12]
 801d216:	681b      	ldr	r3, [r3, #0]
 801d218:	695b      	ldr	r3, [r3, #20]
 801d21a:	f003 0302 	and.w	r3, r3, #2
 801d21e:	2b02      	cmp	r3, #2
 801d220:	bf0c      	ite	eq
 801d222:	2301      	moveq	r3, #1
 801d224:	2300      	movne	r3, #0
 801d226:	b2db      	uxtb	r3, r3
 801d228:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 801d22a:	68fb      	ldr	r3, [r7, #12]
 801d22c:	681b      	ldr	r3, [r3, #0]
 801d22e:	695b      	ldr	r3, [r3, #20]
 801d230:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801d234:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801d238:	bf0c      	ite	eq
 801d23a:	2301      	moveq	r3, #1
 801d23c:	2300      	movne	r3, #0
 801d23e:	b2db      	uxtb	r3, r3
 801d240:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 801d242:	e025      	b.n	801d290 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 801d244:	f7fe fe9a 	bl	801bf7c <HAL_GetTick>
 801d248:	4602      	mov	r2, r0
 801d24a:	69fb      	ldr	r3, [r7, #28]
 801d24c:	1ad3      	subs	r3, r2, r3
 801d24e:	683a      	ldr	r2, [r7, #0]
 801d250:	429a      	cmp	r2, r3
 801d252:	d302      	bcc.n	801d25a <HAL_I2C_IsDeviceReady+0x13a>
 801d254:	683b      	ldr	r3, [r7, #0]
 801d256:	2b00      	cmp	r3, #0
 801d258:	d103      	bne.n	801d262 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 801d25a:	68fb      	ldr	r3, [r7, #12]
 801d25c:	22a0      	movs	r2, #160	; 0xa0
 801d25e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 801d262:	68fb      	ldr	r3, [r7, #12]
 801d264:	681b      	ldr	r3, [r3, #0]
 801d266:	695b      	ldr	r3, [r3, #20]
 801d268:	f003 0302 	and.w	r3, r3, #2
 801d26c:	2b02      	cmp	r3, #2
 801d26e:	bf0c      	ite	eq
 801d270:	2301      	moveq	r3, #1
 801d272:	2300      	movne	r3, #0
 801d274:	b2db      	uxtb	r3, r3
 801d276:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 801d278:	68fb      	ldr	r3, [r7, #12]
 801d27a:	681b      	ldr	r3, [r3, #0]
 801d27c:	695b      	ldr	r3, [r3, #20]
 801d27e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801d282:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801d286:	bf0c      	ite	eq
 801d288:	2301      	moveq	r3, #1
 801d28a:	2300      	movne	r3, #0
 801d28c:	b2db      	uxtb	r3, r3
 801d28e:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 801d290:	68fb      	ldr	r3, [r7, #12]
 801d292:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801d296:	b2db      	uxtb	r3, r3
 801d298:	2ba0      	cmp	r3, #160	; 0xa0
 801d29a:	d005      	beq.n	801d2a8 <HAL_I2C_IsDeviceReady+0x188>
 801d29c:	7dfb      	ldrb	r3, [r7, #23]
 801d29e:	2b00      	cmp	r3, #0
 801d2a0:	d102      	bne.n	801d2a8 <HAL_I2C_IsDeviceReady+0x188>
 801d2a2:	7dbb      	ldrb	r3, [r7, #22]
 801d2a4:	2b00      	cmp	r3, #0
 801d2a6:	d0cd      	beq.n	801d244 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 801d2a8:	68fb      	ldr	r3, [r7, #12]
 801d2aa:	2220      	movs	r2, #32
 801d2ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 801d2b0:	68fb      	ldr	r3, [r7, #12]
 801d2b2:	681b      	ldr	r3, [r3, #0]
 801d2b4:	695b      	ldr	r3, [r3, #20]
 801d2b6:	f003 0302 	and.w	r3, r3, #2
 801d2ba:	2b02      	cmp	r3, #2
 801d2bc:	d129      	bne.n	801d312 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 801d2be:	68fb      	ldr	r3, [r7, #12]
 801d2c0:	681b      	ldr	r3, [r3, #0]
 801d2c2:	681a      	ldr	r2, [r3, #0]
 801d2c4:	68fb      	ldr	r3, [r7, #12]
 801d2c6:	681b      	ldr	r3, [r3, #0]
 801d2c8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801d2cc:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 801d2ce:	2300      	movs	r3, #0
 801d2d0:	613b      	str	r3, [r7, #16]
 801d2d2:	68fb      	ldr	r3, [r7, #12]
 801d2d4:	681b      	ldr	r3, [r3, #0]
 801d2d6:	695b      	ldr	r3, [r3, #20]
 801d2d8:	613b      	str	r3, [r7, #16]
 801d2da:	68fb      	ldr	r3, [r7, #12]
 801d2dc:	681b      	ldr	r3, [r3, #0]
 801d2de:	699b      	ldr	r3, [r3, #24]
 801d2e0:	613b      	str	r3, [r7, #16]
 801d2e2:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 801d2e4:	69fb      	ldr	r3, [r7, #28]
 801d2e6:	9300      	str	r3, [sp, #0]
 801d2e8:	2319      	movs	r3, #25
 801d2ea:	2201      	movs	r2, #1
 801d2ec:	4921      	ldr	r1, [pc, #132]	; (801d374 <HAL_I2C_IsDeviceReady+0x254>)
 801d2ee:	68f8      	ldr	r0, [r7, #12]
 801d2f0:	f000 f8c6 	bl	801d480 <I2C_WaitOnFlagUntilTimeout>
 801d2f4:	4603      	mov	r3, r0
 801d2f6:	2b00      	cmp	r3, #0
 801d2f8:	d001      	beq.n	801d2fe <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 801d2fa:	2301      	movs	r3, #1
 801d2fc:	e036      	b.n	801d36c <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 801d2fe:	68fb      	ldr	r3, [r7, #12]
 801d300:	2220      	movs	r2, #32
 801d302:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 801d306:	68fb      	ldr	r3, [r7, #12]
 801d308:	2200      	movs	r2, #0
 801d30a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 801d30e:	2300      	movs	r3, #0
 801d310:	e02c      	b.n	801d36c <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 801d312:	68fb      	ldr	r3, [r7, #12]
 801d314:	681b      	ldr	r3, [r3, #0]
 801d316:	681a      	ldr	r2, [r3, #0]
 801d318:	68fb      	ldr	r3, [r7, #12]
 801d31a:	681b      	ldr	r3, [r3, #0]
 801d31c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801d320:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 801d322:	68fb      	ldr	r3, [r7, #12]
 801d324:	681b      	ldr	r3, [r3, #0]
 801d326:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 801d32a:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 801d32c:	69fb      	ldr	r3, [r7, #28]
 801d32e:	9300      	str	r3, [sp, #0]
 801d330:	2319      	movs	r3, #25
 801d332:	2201      	movs	r2, #1
 801d334:	490f      	ldr	r1, [pc, #60]	; (801d374 <HAL_I2C_IsDeviceReady+0x254>)
 801d336:	68f8      	ldr	r0, [r7, #12]
 801d338:	f000 f8a2 	bl	801d480 <I2C_WaitOnFlagUntilTimeout>
 801d33c:	4603      	mov	r3, r0
 801d33e:	2b00      	cmp	r3, #0
 801d340:	d001      	beq.n	801d346 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 801d342:	2301      	movs	r3, #1
 801d344:	e012      	b.n	801d36c <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 801d346:	69bb      	ldr	r3, [r7, #24]
 801d348:	3301      	adds	r3, #1
 801d34a:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 801d34c:	69ba      	ldr	r2, [r7, #24]
 801d34e:	687b      	ldr	r3, [r7, #4]
 801d350:	429a      	cmp	r2, r3
 801d352:	f4ff af32 	bcc.w	801d1ba <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 801d356:	68fb      	ldr	r3, [r7, #12]
 801d358:	2220      	movs	r2, #32
 801d35a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 801d35e:	68fb      	ldr	r3, [r7, #12]
 801d360:	2200      	movs	r2, #0
 801d362:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 801d366:	2301      	movs	r3, #1
 801d368:	e000      	b.n	801d36c <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 801d36a:	2302      	movs	r3, #2
  }
}
 801d36c:	4618      	mov	r0, r3
 801d36e:	3720      	adds	r7, #32
 801d370:	46bd      	mov	sp, r7
 801d372:	bd80      	pop	{r7, pc}
 801d374:	00100002 	.word	0x00100002
 801d378:	ffff0000 	.word	0xffff0000

0801d37c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 801d37c:	b580      	push	{r7, lr}
 801d37e:	b088      	sub	sp, #32
 801d380:	af02      	add	r7, sp, #8
 801d382:	60f8      	str	r0, [r7, #12]
 801d384:	607a      	str	r2, [r7, #4]
 801d386:	603b      	str	r3, [r7, #0]
 801d388:	460b      	mov	r3, r1
 801d38a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 801d38c:	68fb      	ldr	r3, [r7, #12]
 801d38e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801d390:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 801d392:	697b      	ldr	r3, [r7, #20]
 801d394:	2b08      	cmp	r3, #8
 801d396:	d006      	beq.n	801d3a6 <I2C_MasterRequestWrite+0x2a>
 801d398:	697b      	ldr	r3, [r7, #20]
 801d39a:	2b01      	cmp	r3, #1
 801d39c:	d003      	beq.n	801d3a6 <I2C_MasterRequestWrite+0x2a>
 801d39e:	697b      	ldr	r3, [r7, #20]
 801d3a0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 801d3a4:	d108      	bne.n	801d3b8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 801d3a6:	68fb      	ldr	r3, [r7, #12]
 801d3a8:	681b      	ldr	r3, [r3, #0]
 801d3aa:	681a      	ldr	r2, [r3, #0]
 801d3ac:	68fb      	ldr	r3, [r7, #12]
 801d3ae:	681b      	ldr	r3, [r3, #0]
 801d3b0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801d3b4:	601a      	str	r2, [r3, #0]
 801d3b6:	e00b      	b.n	801d3d0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 801d3b8:	68fb      	ldr	r3, [r7, #12]
 801d3ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801d3bc:	2b12      	cmp	r3, #18
 801d3be:	d107      	bne.n	801d3d0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 801d3c0:	68fb      	ldr	r3, [r7, #12]
 801d3c2:	681b      	ldr	r3, [r3, #0]
 801d3c4:	681a      	ldr	r2, [r3, #0]
 801d3c6:	68fb      	ldr	r3, [r7, #12]
 801d3c8:	681b      	ldr	r3, [r3, #0]
 801d3ca:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801d3ce:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 801d3d0:	683b      	ldr	r3, [r7, #0]
 801d3d2:	9300      	str	r3, [sp, #0]
 801d3d4:	687b      	ldr	r3, [r7, #4]
 801d3d6:	2200      	movs	r2, #0
 801d3d8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 801d3dc:	68f8      	ldr	r0, [r7, #12]
 801d3de:	f000 f84f 	bl	801d480 <I2C_WaitOnFlagUntilTimeout>
 801d3e2:	4603      	mov	r3, r0
 801d3e4:	2b00      	cmp	r3, #0
 801d3e6:	d00d      	beq.n	801d404 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 801d3e8:	68fb      	ldr	r3, [r7, #12]
 801d3ea:	681b      	ldr	r3, [r3, #0]
 801d3ec:	681b      	ldr	r3, [r3, #0]
 801d3ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801d3f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801d3f6:	d103      	bne.n	801d400 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 801d3f8:	68fb      	ldr	r3, [r7, #12]
 801d3fa:	f44f 7200 	mov.w	r2, #512	; 0x200
 801d3fe:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 801d400:	2303      	movs	r3, #3
 801d402:	e035      	b.n	801d470 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 801d404:	68fb      	ldr	r3, [r7, #12]
 801d406:	691b      	ldr	r3, [r3, #16]
 801d408:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801d40c:	d108      	bne.n	801d420 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 801d40e:	897b      	ldrh	r3, [r7, #10]
 801d410:	b2db      	uxtb	r3, r3
 801d412:	461a      	mov	r2, r3
 801d414:	68fb      	ldr	r3, [r7, #12]
 801d416:	681b      	ldr	r3, [r3, #0]
 801d418:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 801d41c:	611a      	str	r2, [r3, #16]
 801d41e:	e01b      	b.n	801d458 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 801d420:	897b      	ldrh	r3, [r7, #10]
 801d422:	11db      	asrs	r3, r3, #7
 801d424:	b2db      	uxtb	r3, r3
 801d426:	f003 0306 	and.w	r3, r3, #6
 801d42a:	b2db      	uxtb	r3, r3
 801d42c:	f063 030f 	orn	r3, r3, #15
 801d430:	b2da      	uxtb	r2, r3
 801d432:	68fb      	ldr	r3, [r7, #12]
 801d434:	681b      	ldr	r3, [r3, #0]
 801d436:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 801d438:	683b      	ldr	r3, [r7, #0]
 801d43a:	687a      	ldr	r2, [r7, #4]
 801d43c:	490e      	ldr	r1, [pc, #56]	; (801d478 <I2C_MasterRequestWrite+0xfc>)
 801d43e:	68f8      	ldr	r0, [r7, #12]
 801d440:	f000 f875 	bl	801d52e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 801d444:	4603      	mov	r3, r0
 801d446:	2b00      	cmp	r3, #0
 801d448:	d001      	beq.n	801d44e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 801d44a:	2301      	movs	r3, #1
 801d44c:	e010      	b.n	801d470 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 801d44e:	897b      	ldrh	r3, [r7, #10]
 801d450:	b2da      	uxtb	r2, r3
 801d452:	68fb      	ldr	r3, [r7, #12]
 801d454:	681b      	ldr	r3, [r3, #0]
 801d456:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 801d458:	683b      	ldr	r3, [r7, #0]
 801d45a:	687a      	ldr	r2, [r7, #4]
 801d45c:	4907      	ldr	r1, [pc, #28]	; (801d47c <I2C_MasterRequestWrite+0x100>)
 801d45e:	68f8      	ldr	r0, [r7, #12]
 801d460:	f000 f865 	bl	801d52e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 801d464:	4603      	mov	r3, r0
 801d466:	2b00      	cmp	r3, #0
 801d468:	d001      	beq.n	801d46e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 801d46a:	2301      	movs	r3, #1
 801d46c:	e000      	b.n	801d470 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 801d46e:	2300      	movs	r3, #0
}
 801d470:	4618      	mov	r0, r3
 801d472:	3718      	adds	r7, #24
 801d474:	46bd      	mov	sp, r7
 801d476:	bd80      	pop	{r7, pc}
 801d478:	00010008 	.word	0x00010008
 801d47c:	00010002 	.word	0x00010002

0801d480 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 801d480:	b580      	push	{r7, lr}
 801d482:	b084      	sub	sp, #16
 801d484:	af00      	add	r7, sp, #0
 801d486:	60f8      	str	r0, [r7, #12]
 801d488:	60b9      	str	r1, [r7, #8]
 801d48a:	603b      	str	r3, [r7, #0]
 801d48c:	4613      	mov	r3, r2
 801d48e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 801d490:	e025      	b.n	801d4de <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801d492:	683b      	ldr	r3, [r7, #0]
 801d494:	f1b3 3fff 	cmp.w	r3, #4294967295
 801d498:	d021      	beq.n	801d4de <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801d49a:	f7fe fd6f 	bl	801bf7c <HAL_GetTick>
 801d49e:	4602      	mov	r2, r0
 801d4a0:	69bb      	ldr	r3, [r7, #24]
 801d4a2:	1ad3      	subs	r3, r2, r3
 801d4a4:	683a      	ldr	r2, [r7, #0]
 801d4a6:	429a      	cmp	r2, r3
 801d4a8:	d302      	bcc.n	801d4b0 <I2C_WaitOnFlagUntilTimeout+0x30>
 801d4aa:	683b      	ldr	r3, [r7, #0]
 801d4ac:	2b00      	cmp	r3, #0
 801d4ae:	d116      	bne.n	801d4de <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 801d4b0:	68fb      	ldr	r3, [r7, #12]
 801d4b2:	2200      	movs	r2, #0
 801d4b4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 801d4b6:	68fb      	ldr	r3, [r7, #12]
 801d4b8:	2220      	movs	r2, #32
 801d4ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 801d4be:	68fb      	ldr	r3, [r7, #12]
 801d4c0:	2200      	movs	r2, #0
 801d4c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 801d4c6:	68fb      	ldr	r3, [r7, #12]
 801d4c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801d4ca:	f043 0220 	orr.w	r2, r3, #32
 801d4ce:	68fb      	ldr	r3, [r7, #12]
 801d4d0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 801d4d2:	68fb      	ldr	r3, [r7, #12]
 801d4d4:	2200      	movs	r2, #0
 801d4d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 801d4da:	2301      	movs	r3, #1
 801d4dc:	e023      	b.n	801d526 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 801d4de:	68bb      	ldr	r3, [r7, #8]
 801d4e0:	0c1b      	lsrs	r3, r3, #16
 801d4e2:	b2db      	uxtb	r3, r3
 801d4e4:	2b01      	cmp	r3, #1
 801d4e6:	d10d      	bne.n	801d504 <I2C_WaitOnFlagUntilTimeout+0x84>
 801d4e8:	68fb      	ldr	r3, [r7, #12]
 801d4ea:	681b      	ldr	r3, [r3, #0]
 801d4ec:	695b      	ldr	r3, [r3, #20]
 801d4ee:	43da      	mvns	r2, r3
 801d4f0:	68bb      	ldr	r3, [r7, #8]
 801d4f2:	4013      	ands	r3, r2
 801d4f4:	b29b      	uxth	r3, r3
 801d4f6:	2b00      	cmp	r3, #0
 801d4f8:	bf0c      	ite	eq
 801d4fa:	2301      	moveq	r3, #1
 801d4fc:	2300      	movne	r3, #0
 801d4fe:	b2db      	uxtb	r3, r3
 801d500:	461a      	mov	r2, r3
 801d502:	e00c      	b.n	801d51e <I2C_WaitOnFlagUntilTimeout+0x9e>
 801d504:	68fb      	ldr	r3, [r7, #12]
 801d506:	681b      	ldr	r3, [r3, #0]
 801d508:	699b      	ldr	r3, [r3, #24]
 801d50a:	43da      	mvns	r2, r3
 801d50c:	68bb      	ldr	r3, [r7, #8]
 801d50e:	4013      	ands	r3, r2
 801d510:	b29b      	uxth	r3, r3
 801d512:	2b00      	cmp	r3, #0
 801d514:	bf0c      	ite	eq
 801d516:	2301      	moveq	r3, #1
 801d518:	2300      	movne	r3, #0
 801d51a:	b2db      	uxtb	r3, r3
 801d51c:	461a      	mov	r2, r3
 801d51e:	79fb      	ldrb	r3, [r7, #7]
 801d520:	429a      	cmp	r2, r3
 801d522:	d0b6      	beq.n	801d492 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 801d524:	2300      	movs	r3, #0
}
 801d526:	4618      	mov	r0, r3
 801d528:	3710      	adds	r7, #16
 801d52a:	46bd      	mov	sp, r7
 801d52c:	bd80      	pop	{r7, pc}

0801d52e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 801d52e:	b580      	push	{r7, lr}
 801d530:	b084      	sub	sp, #16
 801d532:	af00      	add	r7, sp, #0
 801d534:	60f8      	str	r0, [r7, #12]
 801d536:	60b9      	str	r1, [r7, #8]
 801d538:	607a      	str	r2, [r7, #4]
 801d53a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 801d53c:	e051      	b.n	801d5e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 801d53e:	68fb      	ldr	r3, [r7, #12]
 801d540:	681b      	ldr	r3, [r3, #0]
 801d542:	695b      	ldr	r3, [r3, #20]
 801d544:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801d548:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801d54c:	d123      	bne.n	801d596 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 801d54e:	68fb      	ldr	r3, [r7, #12]
 801d550:	681b      	ldr	r3, [r3, #0]
 801d552:	681a      	ldr	r2, [r3, #0]
 801d554:	68fb      	ldr	r3, [r7, #12]
 801d556:	681b      	ldr	r3, [r3, #0]
 801d558:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801d55c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 801d55e:	68fb      	ldr	r3, [r7, #12]
 801d560:	681b      	ldr	r3, [r3, #0]
 801d562:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 801d566:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 801d568:	68fb      	ldr	r3, [r7, #12]
 801d56a:	2200      	movs	r2, #0
 801d56c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 801d56e:	68fb      	ldr	r3, [r7, #12]
 801d570:	2220      	movs	r2, #32
 801d572:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 801d576:	68fb      	ldr	r3, [r7, #12]
 801d578:	2200      	movs	r2, #0
 801d57a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 801d57e:	68fb      	ldr	r3, [r7, #12]
 801d580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801d582:	f043 0204 	orr.w	r2, r3, #4
 801d586:	68fb      	ldr	r3, [r7, #12]
 801d588:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 801d58a:	68fb      	ldr	r3, [r7, #12]
 801d58c:	2200      	movs	r2, #0
 801d58e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 801d592:	2301      	movs	r3, #1
 801d594:	e046      	b.n	801d624 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801d596:	687b      	ldr	r3, [r7, #4]
 801d598:	f1b3 3fff 	cmp.w	r3, #4294967295
 801d59c:	d021      	beq.n	801d5e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801d59e:	f7fe fced 	bl	801bf7c <HAL_GetTick>
 801d5a2:	4602      	mov	r2, r0
 801d5a4:	683b      	ldr	r3, [r7, #0]
 801d5a6:	1ad3      	subs	r3, r2, r3
 801d5a8:	687a      	ldr	r2, [r7, #4]
 801d5aa:	429a      	cmp	r2, r3
 801d5ac:	d302      	bcc.n	801d5b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 801d5ae:	687b      	ldr	r3, [r7, #4]
 801d5b0:	2b00      	cmp	r3, #0
 801d5b2:	d116      	bne.n	801d5e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 801d5b4:	68fb      	ldr	r3, [r7, #12]
 801d5b6:	2200      	movs	r2, #0
 801d5b8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 801d5ba:	68fb      	ldr	r3, [r7, #12]
 801d5bc:	2220      	movs	r2, #32
 801d5be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 801d5c2:	68fb      	ldr	r3, [r7, #12]
 801d5c4:	2200      	movs	r2, #0
 801d5c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 801d5ca:	68fb      	ldr	r3, [r7, #12]
 801d5cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801d5ce:	f043 0220 	orr.w	r2, r3, #32
 801d5d2:	68fb      	ldr	r3, [r7, #12]
 801d5d4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 801d5d6:	68fb      	ldr	r3, [r7, #12]
 801d5d8:	2200      	movs	r2, #0
 801d5da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 801d5de:	2301      	movs	r3, #1
 801d5e0:	e020      	b.n	801d624 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 801d5e2:	68bb      	ldr	r3, [r7, #8]
 801d5e4:	0c1b      	lsrs	r3, r3, #16
 801d5e6:	b2db      	uxtb	r3, r3
 801d5e8:	2b01      	cmp	r3, #1
 801d5ea:	d10c      	bne.n	801d606 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 801d5ec:	68fb      	ldr	r3, [r7, #12]
 801d5ee:	681b      	ldr	r3, [r3, #0]
 801d5f0:	695b      	ldr	r3, [r3, #20]
 801d5f2:	43da      	mvns	r2, r3
 801d5f4:	68bb      	ldr	r3, [r7, #8]
 801d5f6:	4013      	ands	r3, r2
 801d5f8:	b29b      	uxth	r3, r3
 801d5fa:	2b00      	cmp	r3, #0
 801d5fc:	bf14      	ite	ne
 801d5fe:	2301      	movne	r3, #1
 801d600:	2300      	moveq	r3, #0
 801d602:	b2db      	uxtb	r3, r3
 801d604:	e00b      	b.n	801d61e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 801d606:	68fb      	ldr	r3, [r7, #12]
 801d608:	681b      	ldr	r3, [r3, #0]
 801d60a:	699b      	ldr	r3, [r3, #24]
 801d60c:	43da      	mvns	r2, r3
 801d60e:	68bb      	ldr	r3, [r7, #8]
 801d610:	4013      	ands	r3, r2
 801d612:	b29b      	uxth	r3, r3
 801d614:	2b00      	cmp	r3, #0
 801d616:	bf14      	ite	ne
 801d618:	2301      	movne	r3, #1
 801d61a:	2300      	moveq	r3, #0
 801d61c:	b2db      	uxtb	r3, r3
 801d61e:	2b00      	cmp	r3, #0
 801d620:	d18d      	bne.n	801d53e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 801d622:	2300      	movs	r3, #0
}
 801d624:	4618      	mov	r0, r3
 801d626:	3710      	adds	r7, #16
 801d628:	46bd      	mov	sp, r7
 801d62a:	bd80      	pop	{r7, pc}

0801d62c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 801d62c:	b580      	push	{r7, lr}
 801d62e:	b084      	sub	sp, #16
 801d630:	af00      	add	r7, sp, #0
 801d632:	60f8      	str	r0, [r7, #12]
 801d634:	60b9      	str	r1, [r7, #8]
 801d636:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 801d638:	e02d      	b.n	801d696 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 801d63a:	68f8      	ldr	r0, [r7, #12]
 801d63c:	f000 f878 	bl	801d730 <I2C_IsAcknowledgeFailed>
 801d640:	4603      	mov	r3, r0
 801d642:	2b00      	cmp	r3, #0
 801d644:	d001      	beq.n	801d64a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 801d646:	2301      	movs	r3, #1
 801d648:	e02d      	b.n	801d6a6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801d64a:	68bb      	ldr	r3, [r7, #8]
 801d64c:	f1b3 3fff 	cmp.w	r3, #4294967295
 801d650:	d021      	beq.n	801d696 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801d652:	f7fe fc93 	bl	801bf7c <HAL_GetTick>
 801d656:	4602      	mov	r2, r0
 801d658:	687b      	ldr	r3, [r7, #4]
 801d65a:	1ad3      	subs	r3, r2, r3
 801d65c:	68ba      	ldr	r2, [r7, #8]
 801d65e:	429a      	cmp	r2, r3
 801d660:	d302      	bcc.n	801d668 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 801d662:	68bb      	ldr	r3, [r7, #8]
 801d664:	2b00      	cmp	r3, #0
 801d666:	d116      	bne.n	801d696 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 801d668:	68fb      	ldr	r3, [r7, #12]
 801d66a:	2200      	movs	r2, #0
 801d66c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 801d66e:	68fb      	ldr	r3, [r7, #12]
 801d670:	2220      	movs	r2, #32
 801d672:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 801d676:	68fb      	ldr	r3, [r7, #12]
 801d678:	2200      	movs	r2, #0
 801d67a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 801d67e:	68fb      	ldr	r3, [r7, #12]
 801d680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801d682:	f043 0220 	orr.w	r2, r3, #32
 801d686:	68fb      	ldr	r3, [r7, #12]
 801d688:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 801d68a:	68fb      	ldr	r3, [r7, #12]
 801d68c:	2200      	movs	r2, #0
 801d68e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 801d692:	2301      	movs	r3, #1
 801d694:	e007      	b.n	801d6a6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 801d696:	68fb      	ldr	r3, [r7, #12]
 801d698:	681b      	ldr	r3, [r3, #0]
 801d69a:	695b      	ldr	r3, [r3, #20]
 801d69c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801d6a0:	2b80      	cmp	r3, #128	; 0x80
 801d6a2:	d1ca      	bne.n	801d63a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 801d6a4:	2300      	movs	r3, #0
}
 801d6a6:	4618      	mov	r0, r3
 801d6a8:	3710      	adds	r7, #16
 801d6aa:	46bd      	mov	sp, r7
 801d6ac:	bd80      	pop	{r7, pc}

0801d6ae <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 801d6ae:	b580      	push	{r7, lr}
 801d6b0:	b084      	sub	sp, #16
 801d6b2:	af00      	add	r7, sp, #0
 801d6b4:	60f8      	str	r0, [r7, #12]
 801d6b6:	60b9      	str	r1, [r7, #8]
 801d6b8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 801d6ba:	e02d      	b.n	801d718 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 801d6bc:	68f8      	ldr	r0, [r7, #12]
 801d6be:	f000 f837 	bl	801d730 <I2C_IsAcknowledgeFailed>
 801d6c2:	4603      	mov	r3, r0
 801d6c4:	2b00      	cmp	r3, #0
 801d6c6:	d001      	beq.n	801d6cc <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 801d6c8:	2301      	movs	r3, #1
 801d6ca:	e02d      	b.n	801d728 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801d6cc:	68bb      	ldr	r3, [r7, #8]
 801d6ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 801d6d2:	d021      	beq.n	801d718 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801d6d4:	f7fe fc52 	bl	801bf7c <HAL_GetTick>
 801d6d8:	4602      	mov	r2, r0
 801d6da:	687b      	ldr	r3, [r7, #4]
 801d6dc:	1ad3      	subs	r3, r2, r3
 801d6de:	68ba      	ldr	r2, [r7, #8]
 801d6e0:	429a      	cmp	r2, r3
 801d6e2:	d302      	bcc.n	801d6ea <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 801d6e4:	68bb      	ldr	r3, [r7, #8]
 801d6e6:	2b00      	cmp	r3, #0
 801d6e8:	d116      	bne.n	801d718 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 801d6ea:	68fb      	ldr	r3, [r7, #12]
 801d6ec:	2200      	movs	r2, #0
 801d6ee:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 801d6f0:	68fb      	ldr	r3, [r7, #12]
 801d6f2:	2220      	movs	r2, #32
 801d6f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 801d6f8:	68fb      	ldr	r3, [r7, #12]
 801d6fa:	2200      	movs	r2, #0
 801d6fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 801d700:	68fb      	ldr	r3, [r7, #12]
 801d702:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801d704:	f043 0220 	orr.w	r2, r3, #32
 801d708:	68fb      	ldr	r3, [r7, #12]
 801d70a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 801d70c:	68fb      	ldr	r3, [r7, #12]
 801d70e:	2200      	movs	r2, #0
 801d710:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 801d714:	2301      	movs	r3, #1
 801d716:	e007      	b.n	801d728 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 801d718:	68fb      	ldr	r3, [r7, #12]
 801d71a:	681b      	ldr	r3, [r3, #0]
 801d71c:	695b      	ldr	r3, [r3, #20]
 801d71e:	f003 0304 	and.w	r3, r3, #4
 801d722:	2b04      	cmp	r3, #4
 801d724:	d1ca      	bne.n	801d6bc <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 801d726:	2300      	movs	r3, #0
}
 801d728:	4618      	mov	r0, r3
 801d72a:	3710      	adds	r7, #16
 801d72c:	46bd      	mov	sp, r7
 801d72e:	bd80      	pop	{r7, pc}

0801d730 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 801d730:	b480      	push	{r7}
 801d732:	b083      	sub	sp, #12
 801d734:	af00      	add	r7, sp, #0
 801d736:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 801d738:	687b      	ldr	r3, [r7, #4]
 801d73a:	681b      	ldr	r3, [r3, #0]
 801d73c:	695b      	ldr	r3, [r3, #20]
 801d73e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801d742:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801d746:	d11b      	bne.n	801d780 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 801d748:	687b      	ldr	r3, [r7, #4]
 801d74a:	681b      	ldr	r3, [r3, #0]
 801d74c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 801d750:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 801d752:	687b      	ldr	r3, [r7, #4]
 801d754:	2200      	movs	r2, #0
 801d756:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 801d758:	687b      	ldr	r3, [r7, #4]
 801d75a:	2220      	movs	r2, #32
 801d75c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 801d760:	687b      	ldr	r3, [r7, #4]
 801d762:	2200      	movs	r2, #0
 801d764:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 801d768:	687b      	ldr	r3, [r7, #4]
 801d76a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801d76c:	f043 0204 	orr.w	r2, r3, #4
 801d770:	687b      	ldr	r3, [r7, #4]
 801d772:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 801d774:	687b      	ldr	r3, [r7, #4]
 801d776:	2200      	movs	r2, #0
 801d778:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 801d77c:	2301      	movs	r3, #1
 801d77e:	e000      	b.n	801d782 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 801d780:	2300      	movs	r3, #0
}
 801d782:	4618      	mov	r0, r3
 801d784:	370c      	adds	r7, #12
 801d786:	46bd      	mov	sp, r7
 801d788:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d78c:	4770      	bx	lr
	...

0801d790 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 801d790:	b580      	push	{r7, lr}
 801d792:	b086      	sub	sp, #24
 801d794:	af00      	add	r7, sp, #0
 801d796:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 801d798:	687b      	ldr	r3, [r7, #4]
 801d79a:	2b00      	cmp	r3, #0
 801d79c:	d101      	bne.n	801d7a2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 801d79e:	2301      	movs	r3, #1
 801d7a0:	e25b      	b.n	801dc5a <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 801d7a2:	687b      	ldr	r3, [r7, #4]
 801d7a4:	681b      	ldr	r3, [r3, #0]
 801d7a6:	f003 0301 	and.w	r3, r3, #1
 801d7aa:	2b00      	cmp	r3, #0
 801d7ac:	d075      	beq.n	801d89a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 801d7ae:	4ba3      	ldr	r3, [pc, #652]	; (801da3c <HAL_RCC_OscConfig+0x2ac>)
 801d7b0:	689b      	ldr	r3, [r3, #8]
 801d7b2:	f003 030c 	and.w	r3, r3, #12
 801d7b6:	2b04      	cmp	r3, #4
 801d7b8:	d00c      	beq.n	801d7d4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 801d7ba:	4ba0      	ldr	r3, [pc, #640]	; (801da3c <HAL_RCC_OscConfig+0x2ac>)
 801d7bc:	689b      	ldr	r3, [r3, #8]
 801d7be:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 801d7c2:	2b08      	cmp	r3, #8
 801d7c4:	d112      	bne.n	801d7ec <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 801d7c6:	4b9d      	ldr	r3, [pc, #628]	; (801da3c <HAL_RCC_OscConfig+0x2ac>)
 801d7c8:	685b      	ldr	r3, [r3, #4]
 801d7ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801d7ce:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 801d7d2:	d10b      	bne.n	801d7ec <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 801d7d4:	4b99      	ldr	r3, [pc, #612]	; (801da3c <HAL_RCC_OscConfig+0x2ac>)
 801d7d6:	681b      	ldr	r3, [r3, #0]
 801d7d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801d7dc:	2b00      	cmp	r3, #0
 801d7de:	d05b      	beq.n	801d898 <HAL_RCC_OscConfig+0x108>
 801d7e0:	687b      	ldr	r3, [r7, #4]
 801d7e2:	685b      	ldr	r3, [r3, #4]
 801d7e4:	2b00      	cmp	r3, #0
 801d7e6:	d157      	bne.n	801d898 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 801d7e8:	2301      	movs	r3, #1
 801d7ea:	e236      	b.n	801dc5a <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 801d7ec:	687b      	ldr	r3, [r7, #4]
 801d7ee:	685b      	ldr	r3, [r3, #4]
 801d7f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801d7f4:	d106      	bne.n	801d804 <HAL_RCC_OscConfig+0x74>
 801d7f6:	4b91      	ldr	r3, [pc, #580]	; (801da3c <HAL_RCC_OscConfig+0x2ac>)
 801d7f8:	681b      	ldr	r3, [r3, #0]
 801d7fa:	4a90      	ldr	r2, [pc, #576]	; (801da3c <HAL_RCC_OscConfig+0x2ac>)
 801d7fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801d800:	6013      	str	r3, [r2, #0]
 801d802:	e01d      	b.n	801d840 <HAL_RCC_OscConfig+0xb0>
 801d804:	687b      	ldr	r3, [r7, #4]
 801d806:	685b      	ldr	r3, [r3, #4]
 801d808:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 801d80c:	d10c      	bne.n	801d828 <HAL_RCC_OscConfig+0x98>
 801d80e:	4b8b      	ldr	r3, [pc, #556]	; (801da3c <HAL_RCC_OscConfig+0x2ac>)
 801d810:	681b      	ldr	r3, [r3, #0]
 801d812:	4a8a      	ldr	r2, [pc, #552]	; (801da3c <HAL_RCC_OscConfig+0x2ac>)
 801d814:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 801d818:	6013      	str	r3, [r2, #0]
 801d81a:	4b88      	ldr	r3, [pc, #544]	; (801da3c <HAL_RCC_OscConfig+0x2ac>)
 801d81c:	681b      	ldr	r3, [r3, #0]
 801d81e:	4a87      	ldr	r2, [pc, #540]	; (801da3c <HAL_RCC_OscConfig+0x2ac>)
 801d820:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801d824:	6013      	str	r3, [r2, #0]
 801d826:	e00b      	b.n	801d840 <HAL_RCC_OscConfig+0xb0>
 801d828:	4b84      	ldr	r3, [pc, #528]	; (801da3c <HAL_RCC_OscConfig+0x2ac>)
 801d82a:	681b      	ldr	r3, [r3, #0]
 801d82c:	4a83      	ldr	r2, [pc, #524]	; (801da3c <HAL_RCC_OscConfig+0x2ac>)
 801d82e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801d832:	6013      	str	r3, [r2, #0]
 801d834:	4b81      	ldr	r3, [pc, #516]	; (801da3c <HAL_RCC_OscConfig+0x2ac>)
 801d836:	681b      	ldr	r3, [r3, #0]
 801d838:	4a80      	ldr	r2, [pc, #512]	; (801da3c <HAL_RCC_OscConfig+0x2ac>)
 801d83a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 801d83e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 801d840:	687b      	ldr	r3, [r7, #4]
 801d842:	685b      	ldr	r3, [r3, #4]
 801d844:	2b00      	cmp	r3, #0
 801d846:	d013      	beq.n	801d870 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801d848:	f7fe fb98 	bl	801bf7c <HAL_GetTick>
 801d84c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 801d84e:	e008      	b.n	801d862 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 801d850:	f7fe fb94 	bl	801bf7c <HAL_GetTick>
 801d854:	4602      	mov	r2, r0
 801d856:	693b      	ldr	r3, [r7, #16]
 801d858:	1ad3      	subs	r3, r2, r3
 801d85a:	2b64      	cmp	r3, #100	; 0x64
 801d85c:	d901      	bls.n	801d862 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 801d85e:	2303      	movs	r3, #3
 801d860:	e1fb      	b.n	801dc5a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 801d862:	4b76      	ldr	r3, [pc, #472]	; (801da3c <HAL_RCC_OscConfig+0x2ac>)
 801d864:	681b      	ldr	r3, [r3, #0]
 801d866:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801d86a:	2b00      	cmp	r3, #0
 801d86c:	d0f0      	beq.n	801d850 <HAL_RCC_OscConfig+0xc0>
 801d86e:	e014      	b.n	801d89a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801d870:	f7fe fb84 	bl	801bf7c <HAL_GetTick>
 801d874:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 801d876:	e008      	b.n	801d88a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 801d878:	f7fe fb80 	bl	801bf7c <HAL_GetTick>
 801d87c:	4602      	mov	r2, r0
 801d87e:	693b      	ldr	r3, [r7, #16]
 801d880:	1ad3      	subs	r3, r2, r3
 801d882:	2b64      	cmp	r3, #100	; 0x64
 801d884:	d901      	bls.n	801d88a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 801d886:	2303      	movs	r3, #3
 801d888:	e1e7      	b.n	801dc5a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 801d88a:	4b6c      	ldr	r3, [pc, #432]	; (801da3c <HAL_RCC_OscConfig+0x2ac>)
 801d88c:	681b      	ldr	r3, [r3, #0]
 801d88e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801d892:	2b00      	cmp	r3, #0
 801d894:	d1f0      	bne.n	801d878 <HAL_RCC_OscConfig+0xe8>
 801d896:	e000      	b.n	801d89a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 801d898:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 801d89a:	687b      	ldr	r3, [r7, #4]
 801d89c:	681b      	ldr	r3, [r3, #0]
 801d89e:	f003 0302 	and.w	r3, r3, #2
 801d8a2:	2b00      	cmp	r3, #0
 801d8a4:	d063      	beq.n	801d96e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 801d8a6:	4b65      	ldr	r3, [pc, #404]	; (801da3c <HAL_RCC_OscConfig+0x2ac>)
 801d8a8:	689b      	ldr	r3, [r3, #8]
 801d8aa:	f003 030c 	and.w	r3, r3, #12
 801d8ae:	2b00      	cmp	r3, #0
 801d8b0:	d00b      	beq.n	801d8ca <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 801d8b2:	4b62      	ldr	r3, [pc, #392]	; (801da3c <HAL_RCC_OscConfig+0x2ac>)
 801d8b4:	689b      	ldr	r3, [r3, #8]
 801d8b6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 801d8ba:	2b08      	cmp	r3, #8
 801d8bc:	d11c      	bne.n	801d8f8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 801d8be:	4b5f      	ldr	r3, [pc, #380]	; (801da3c <HAL_RCC_OscConfig+0x2ac>)
 801d8c0:	685b      	ldr	r3, [r3, #4]
 801d8c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801d8c6:	2b00      	cmp	r3, #0
 801d8c8:	d116      	bne.n	801d8f8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 801d8ca:	4b5c      	ldr	r3, [pc, #368]	; (801da3c <HAL_RCC_OscConfig+0x2ac>)
 801d8cc:	681b      	ldr	r3, [r3, #0]
 801d8ce:	f003 0302 	and.w	r3, r3, #2
 801d8d2:	2b00      	cmp	r3, #0
 801d8d4:	d005      	beq.n	801d8e2 <HAL_RCC_OscConfig+0x152>
 801d8d6:	687b      	ldr	r3, [r7, #4]
 801d8d8:	68db      	ldr	r3, [r3, #12]
 801d8da:	2b01      	cmp	r3, #1
 801d8dc:	d001      	beq.n	801d8e2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 801d8de:	2301      	movs	r3, #1
 801d8e0:	e1bb      	b.n	801dc5a <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801d8e2:	4b56      	ldr	r3, [pc, #344]	; (801da3c <HAL_RCC_OscConfig+0x2ac>)
 801d8e4:	681b      	ldr	r3, [r3, #0]
 801d8e6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 801d8ea:	687b      	ldr	r3, [r7, #4]
 801d8ec:	691b      	ldr	r3, [r3, #16]
 801d8ee:	00db      	lsls	r3, r3, #3
 801d8f0:	4952      	ldr	r1, [pc, #328]	; (801da3c <HAL_RCC_OscConfig+0x2ac>)
 801d8f2:	4313      	orrs	r3, r2
 801d8f4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 801d8f6:	e03a      	b.n	801d96e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 801d8f8:	687b      	ldr	r3, [r7, #4]
 801d8fa:	68db      	ldr	r3, [r3, #12]
 801d8fc:	2b00      	cmp	r3, #0
 801d8fe:	d020      	beq.n	801d942 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 801d900:	4b4f      	ldr	r3, [pc, #316]	; (801da40 <HAL_RCC_OscConfig+0x2b0>)
 801d902:	2201      	movs	r2, #1
 801d904:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801d906:	f7fe fb39 	bl	801bf7c <HAL_GetTick>
 801d90a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 801d90c:	e008      	b.n	801d920 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 801d90e:	f7fe fb35 	bl	801bf7c <HAL_GetTick>
 801d912:	4602      	mov	r2, r0
 801d914:	693b      	ldr	r3, [r7, #16]
 801d916:	1ad3      	subs	r3, r2, r3
 801d918:	2b02      	cmp	r3, #2
 801d91a:	d901      	bls.n	801d920 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 801d91c:	2303      	movs	r3, #3
 801d91e:	e19c      	b.n	801dc5a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 801d920:	4b46      	ldr	r3, [pc, #280]	; (801da3c <HAL_RCC_OscConfig+0x2ac>)
 801d922:	681b      	ldr	r3, [r3, #0]
 801d924:	f003 0302 	and.w	r3, r3, #2
 801d928:	2b00      	cmp	r3, #0
 801d92a:	d0f0      	beq.n	801d90e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801d92c:	4b43      	ldr	r3, [pc, #268]	; (801da3c <HAL_RCC_OscConfig+0x2ac>)
 801d92e:	681b      	ldr	r3, [r3, #0]
 801d930:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 801d934:	687b      	ldr	r3, [r7, #4]
 801d936:	691b      	ldr	r3, [r3, #16]
 801d938:	00db      	lsls	r3, r3, #3
 801d93a:	4940      	ldr	r1, [pc, #256]	; (801da3c <HAL_RCC_OscConfig+0x2ac>)
 801d93c:	4313      	orrs	r3, r2
 801d93e:	600b      	str	r3, [r1, #0]
 801d940:	e015      	b.n	801d96e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 801d942:	4b3f      	ldr	r3, [pc, #252]	; (801da40 <HAL_RCC_OscConfig+0x2b0>)
 801d944:	2200      	movs	r2, #0
 801d946:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801d948:	f7fe fb18 	bl	801bf7c <HAL_GetTick>
 801d94c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 801d94e:	e008      	b.n	801d962 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 801d950:	f7fe fb14 	bl	801bf7c <HAL_GetTick>
 801d954:	4602      	mov	r2, r0
 801d956:	693b      	ldr	r3, [r7, #16]
 801d958:	1ad3      	subs	r3, r2, r3
 801d95a:	2b02      	cmp	r3, #2
 801d95c:	d901      	bls.n	801d962 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 801d95e:	2303      	movs	r3, #3
 801d960:	e17b      	b.n	801dc5a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 801d962:	4b36      	ldr	r3, [pc, #216]	; (801da3c <HAL_RCC_OscConfig+0x2ac>)
 801d964:	681b      	ldr	r3, [r3, #0]
 801d966:	f003 0302 	and.w	r3, r3, #2
 801d96a:	2b00      	cmp	r3, #0
 801d96c:	d1f0      	bne.n	801d950 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 801d96e:	687b      	ldr	r3, [r7, #4]
 801d970:	681b      	ldr	r3, [r3, #0]
 801d972:	f003 0308 	and.w	r3, r3, #8
 801d976:	2b00      	cmp	r3, #0
 801d978:	d030      	beq.n	801d9dc <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 801d97a:	687b      	ldr	r3, [r7, #4]
 801d97c:	695b      	ldr	r3, [r3, #20]
 801d97e:	2b00      	cmp	r3, #0
 801d980:	d016      	beq.n	801d9b0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 801d982:	4b30      	ldr	r3, [pc, #192]	; (801da44 <HAL_RCC_OscConfig+0x2b4>)
 801d984:	2201      	movs	r2, #1
 801d986:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801d988:	f7fe faf8 	bl	801bf7c <HAL_GetTick>
 801d98c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 801d98e:	e008      	b.n	801d9a2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 801d990:	f7fe faf4 	bl	801bf7c <HAL_GetTick>
 801d994:	4602      	mov	r2, r0
 801d996:	693b      	ldr	r3, [r7, #16]
 801d998:	1ad3      	subs	r3, r2, r3
 801d99a:	2b02      	cmp	r3, #2
 801d99c:	d901      	bls.n	801d9a2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 801d99e:	2303      	movs	r3, #3
 801d9a0:	e15b      	b.n	801dc5a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 801d9a2:	4b26      	ldr	r3, [pc, #152]	; (801da3c <HAL_RCC_OscConfig+0x2ac>)
 801d9a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801d9a6:	f003 0302 	and.w	r3, r3, #2
 801d9aa:	2b00      	cmp	r3, #0
 801d9ac:	d0f0      	beq.n	801d990 <HAL_RCC_OscConfig+0x200>
 801d9ae:	e015      	b.n	801d9dc <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 801d9b0:	4b24      	ldr	r3, [pc, #144]	; (801da44 <HAL_RCC_OscConfig+0x2b4>)
 801d9b2:	2200      	movs	r2, #0
 801d9b4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 801d9b6:	f7fe fae1 	bl	801bf7c <HAL_GetTick>
 801d9ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 801d9bc:	e008      	b.n	801d9d0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 801d9be:	f7fe fadd 	bl	801bf7c <HAL_GetTick>
 801d9c2:	4602      	mov	r2, r0
 801d9c4:	693b      	ldr	r3, [r7, #16]
 801d9c6:	1ad3      	subs	r3, r2, r3
 801d9c8:	2b02      	cmp	r3, #2
 801d9ca:	d901      	bls.n	801d9d0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 801d9cc:	2303      	movs	r3, #3
 801d9ce:	e144      	b.n	801dc5a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 801d9d0:	4b1a      	ldr	r3, [pc, #104]	; (801da3c <HAL_RCC_OscConfig+0x2ac>)
 801d9d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801d9d4:	f003 0302 	and.w	r3, r3, #2
 801d9d8:	2b00      	cmp	r3, #0
 801d9da:	d1f0      	bne.n	801d9be <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 801d9dc:	687b      	ldr	r3, [r7, #4]
 801d9de:	681b      	ldr	r3, [r3, #0]
 801d9e0:	f003 0304 	and.w	r3, r3, #4
 801d9e4:	2b00      	cmp	r3, #0
 801d9e6:	f000 80a0 	beq.w	801db2a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 801d9ea:	2300      	movs	r3, #0
 801d9ec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 801d9ee:	4b13      	ldr	r3, [pc, #76]	; (801da3c <HAL_RCC_OscConfig+0x2ac>)
 801d9f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801d9f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801d9f6:	2b00      	cmp	r3, #0
 801d9f8:	d10f      	bne.n	801da1a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 801d9fa:	2300      	movs	r3, #0
 801d9fc:	60bb      	str	r3, [r7, #8]
 801d9fe:	4b0f      	ldr	r3, [pc, #60]	; (801da3c <HAL_RCC_OscConfig+0x2ac>)
 801da00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801da02:	4a0e      	ldr	r2, [pc, #56]	; (801da3c <HAL_RCC_OscConfig+0x2ac>)
 801da04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801da08:	6413      	str	r3, [r2, #64]	; 0x40
 801da0a:	4b0c      	ldr	r3, [pc, #48]	; (801da3c <HAL_RCC_OscConfig+0x2ac>)
 801da0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801da0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801da12:	60bb      	str	r3, [r7, #8]
 801da14:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 801da16:	2301      	movs	r3, #1
 801da18:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 801da1a:	4b0b      	ldr	r3, [pc, #44]	; (801da48 <HAL_RCC_OscConfig+0x2b8>)
 801da1c:	681b      	ldr	r3, [r3, #0]
 801da1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801da22:	2b00      	cmp	r3, #0
 801da24:	d121      	bne.n	801da6a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 801da26:	4b08      	ldr	r3, [pc, #32]	; (801da48 <HAL_RCC_OscConfig+0x2b8>)
 801da28:	681b      	ldr	r3, [r3, #0]
 801da2a:	4a07      	ldr	r2, [pc, #28]	; (801da48 <HAL_RCC_OscConfig+0x2b8>)
 801da2c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801da30:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 801da32:	f7fe faa3 	bl	801bf7c <HAL_GetTick>
 801da36:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 801da38:	e011      	b.n	801da5e <HAL_RCC_OscConfig+0x2ce>
 801da3a:	bf00      	nop
 801da3c:	40023800 	.word	0x40023800
 801da40:	42470000 	.word	0x42470000
 801da44:	42470e80 	.word	0x42470e80
 801da48:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 801da4c:	f7fe fa96 	bl	801bf7c <HAL_GetTick>
 801da50:	4602      	mov	r2, r0
 801da52:	693b      	ldr	r3, [r7, #16]
 801da54:	1ad3      	subs	r3, r2, r3
 801da56:	2b02      	cmp	r3, #2
 801da58:	d901      	bls.n	801da5e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 801da5a:	2303      	movs	r3, #3
 801da5c:	e0fd      	b.n	801dc5a <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 801da5e:	4b81      	ldr	r3, [pc, #516]	; (801dc64 <HAL_RCC_OscConfig+0x4d4>)
 801da60:	681b      	ldr	r3, [r3, #0]
 801da62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801da66:	2b00      	cmp	r3, #0
 801da68:	d0f0      	beq.n	801da4c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 801da6a:	687b      	ldr	r3, [r7, #4]
 801da6c:	689b      	ldr	r3, [r3, #8]
 801da6e:	2b01      	cmp	r3, #1
 801da70:	d106      	bne.n	801da80 <HAL_RCC_OscConfig+0x2f0>
 801da72:	4b7d      	ldr	r3, [pc, #500]	; (801dc68 <HAL_RCC_OscConfig+0x4d8>)
 801da74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801da76:	4a7c      	ldr	r2, [pc, #496]	; (801dc68 <HAL_RCC_OscConfig+0x4d8>)
 801da78:	f043 0301 	orr.w	r3, r3, #1
 801da7c:	6713      	str	r3, [r2, #112]	; 0x70
 801da7e:	e01c      	b.n	801daba <HAL_RCC_OscConfig+0x32a>
 801da80:	687b      	ldr	r3, [r7, #4]
 801da82:	689b      	ldr	r3, [r3, #8]
 801da84:	2b05      	cmp	r3, #5
 801da86:	d10c      	bne.n	801daa2 <HAL_RCC_OscConfig+0x312>
 801da88:	4b77      	ldr	r3, [pc, #476]	; (801dc68 <HAL_RCC_OscConfig+0x4d8>)
 801da8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801da8c:	4a76      	ldr	r2, [pc, #472]	; (801dc68 <HAL_RCC_OscConfig+0x4d8>)
 801da8e:	f043 0304 	orr.w	r3, r3, #4
 801da92:	6713      	str	r3, [r2, #112]	; 0x70
 801da94:	4b74      	ldr	r3, [pc, #464]	; (801dc68 <HAL_RCC_OscConfig+0x4d8>)
 801da96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801da98:	4a73      	ldr	r2, [pc, #460]	; (801dc68 <HAL_RCC_OscConfig+0x4d8>)
 801da9a:	f043 0301 	orr.w	r3, r3, #1
 801da9e:	6713      	str	r3, [r2, #112]	; 0x70
 801daa0:	e00b      	b.n	801daba <HAL_RCC_OscConfig+0x32a>
 801daa2:	4b71      	ldr	r3, [pc, #452]	; (801dc68 <HAL_RCC_OscConfig+0x4d8>)
 801daa4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801daa6:	4a70      	ldr	r2, [pc, #448]	; (801dc68 <HAL_RCC_OscConfig+0x4d8>)
 801daa8:	f023 0301 	bic.w	r3, r3, #1
 801daac:	6713      	str	r3, [r2, #112]	; 0x70
 801daae:	4b6e      	ldr	r3, [pc, #440]	; (801dc68 <HAL_RCC_OscConfig+0x4d8>)
 801dab0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801dab2:	4a6d      	ldr	r2, [pc, #436]	; (801dc68 <HAL_RCC_OscConfig+0x4d8>)
 801dab4:	f023 0304 	bic.w	r3, r3, #4
 801dab8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 801daba:	687b      	ldr	r3, [r7, #4]
 801dabc:	689b      	ldr	r3, [r3, #8]
 801dabe:	2b00      	cmp	r3, #0
 801dac0:	d015      	beq.n	801daee <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801dac2:	f7fe fa5b 	bl	801bf7c <HAL_GetTick>
 801dac6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 801dac8:	e00a      	b.n	801dae0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 801daca:	f7fe fa57 	bl	801bf7c <HAL_GetTick>
 801dace:	4602      	mov	r2, r0
 801dad0:	693b      	ldr	r3, [r7, #16]
 801dad2:	1ad3      	subs	r3, r2, r3
 801dad4:	f241 3288 	movw	r2, #5000	; 0x1388
 801dad8:	4293      	cmp	r3, r2
 801dada:	d901      	bls.n	801dae0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 801dadc:	2303      	movs	r3, #3
 801dade:	e0bc      	b.n	801dc5a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 801dae0:	4b61      	ldr	r3, [pc, #388]	; (801dc68 <HAL_RCC_OscConfig+0x4d8>)
 801dae2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801dae4:	f003 0302 	and.w	r3, r3, #2
 801dae8:	2b00      	cmp	r3, #0
 801daea:	d0ee      	beq.n	801daca <HAL_RCC_OscConfig+0x33a>
 801daec:	e014      	b.n	801db18 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 801daee:	f7fe fa45 	bl	801bf7c <HAL_GetTick>
 801daf2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 801daf4:	e00a      	b.n	801db0c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 801daf6:	f7fe fa41 	bl	801bf7c <HAL_GetTick>
 801dafa:	4602      	mov	r2, r0
 801dafc:	693b      	ldr	r3, [r7, #16]
 801dafe:	1ad3      	subs	r3, r2, r3
 801db00:	f241 3288 	movw	r2, #5000	; 0x1388
 801db04:	4293      	cmp	r3, r2
 801db06:	d901      	bls.n	801db0c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 801db08:	2303      	movs	r3, #3
 801db0a:	e0a6      	b.n	801dc5a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 801db0c:	4b56      	ldr	r3, [pc, #344]	; (801dc68 <HAL_RCC_OscConfig+0x4d8>)
 801db0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801db10:	f003 0302 	and.w	r3, r3, #2
 801db14:	2b00      	cmp	r3, #0
 801db16:	d1ee      	bne.n	801daf6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 801db18:	7dfb      	ldrb	r3, [r7, #23]
 801db1a:	2b01      	cmp	r3, #1
 801db1c:	d105      	bne.n	801db2a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 801db1e:	4b52      	ldr	r3, [pc, #328]	; (801dc68 <HAL_RCC_OscConfig+0x4d8>)
 801db20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801db22:	4a51      	ldr	r2, [pc, #324]	; (801dc68 <HAL_RCC_OscConfig+0x4d8>)
 801db24:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 801db28:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 801db2a:	687b      	ldr	r3, [r7, #4]
 801db2c:	699b      	ldr	r3, [r3, #24]
 801db2e:	2b00      	cmp	r3, #0
 801db30:	f000 8092 	beq.w	801dc58 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 801db34:	4b4c      	ldr	r3, [pc, #304]	; (801dc68 <HAL_RCC_OscConfig+0x4d8>)
 801db36:	689b      	ldr	r3, [r3, #8]
 801db38:	f003 030c 	and.w	r3, r3, #12
 801db3c:	2b08      	cmp	r3, #8
 801db3e:	d05c      	beq.n	801dbfa <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 801db40:	687b      	ldr	r3, [r7, #4]
 801db42:	699b      	ldr	r3, [r3, #24]
 801db44:	2b02      	cmp	r3, #2
 801db46:	d141      	bne.n	801dbcc <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 801db48:	4b48      	ldr	r3, [pc, #288]	; (801dc6c <HAL_RCC_OscConfig+0x4dc>)
 801db4a:	2200      	movs	r2, #0
 801db4c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801db4e:	f7fe fa15 	bl	801bf7c <HAL_GetTick>
 801db52:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 801db54:	e008      	b.n	801db68 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 801db56:	f7fe fa11 	bl	801bf7c <HAL_GetTick>
 801db5a:	4602      	mov	r2, r0
 801db5c:	693b      	ldr	r3, [r7, #16]
 801db5e:	1ad3      	subs	r3, r2, r3
 801db60:	2b02      	cmp	r3, #2
 801db62:	d901      	bls.n	801db68 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 801db64:	2303      	movs	r3, #3
 801db66:	e078      	b.n	801dc5a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 801db68:	4b3f      	ldr	r3, [pc, #252]	; (801dc68 <HAL_RCC_OscConfig+0x4d8>)
 801db6a:	681b      	ldr	r3, [r3, #0]
 801db6c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801db70:	2b00      	cmp	r3, #0
 801db72:	d1f0      	bne.n	801db56 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 801db74:	687b      	ldr	r3, [r7, #4]
 801db76:	69da      	ldr	r2, [r3, #28]
 801db78:	687b      	ldr	r3, [r7, #4]
 801db7a:	6a1b      	ldr	r3, [r3, #32]
 801db7c:	431a      	orrs	r2, r3
 801db7e:	687b      	ldr	r3, [r7, #4]
 801db80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801db82:	019b      	lsls	r3, r3, #6
 801db84:	431a      	orrs	r2, r3
 801db86:	687b      	ldr	r3, [r7, #4]
 801db88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801db8a:	085b      	lsrs	r3, r3, #1
 801db8c:	3b01      	subs	r3, #1
 801db8e:	041b      	lsls	r3, r3, #16
 801db90:	431a      	orrs	r2, r3
 801db92:	687b      	ldr	r3, [r7, #4]
 801db94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801db96:	061b      	lsls	r3, r3, #24
 801db98:	4933      	ldr	r1, [pc, #204]	; (801dc68 <HAL_RCC_OscConfig+0x4d8>)
 801db9a:	4313      	orrs	r3, r2
 801db9c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 801db9e:	4b33      	ldr	r3, [pc, #204]	; (801dc6c <HAL_RCC_OscConfig+0x4dc>)
 801dba0:	2201      	movs	r2, #1
 801dba2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801dba4:	f7fe f9ea 	bl	801bf7c <HAL_GetTick>
 801dba8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 801dbaa:	e008      	b.n	801dbbe <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 801dbac:	f7fe f9e6 	bl	801bf7c <HAL_GetTick>
 801dbb0:	4602      	mov	r2, r0
 801dbb2:	693b      	ldr	r3, [r7, #16]
 801dbb4:	1ad3      	subs	r3, r2, r3
 801dbb6:	2b02      	cmp	r3, #2
 801dbb8:	d901      	bls.n	801dbbe <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 801dbba:	2303      	movs	r3, #3
 801dbbc:	e04d      	b.n	801dc5a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 801dbbe:	4b2a      	ldr	r3, [pc, #168]	; (801dc68 <HAL_RCC_OscConfig+0x4d8>)
 801dbc0:	681b      	ldr	r3, [r3, #0]
 801dbc2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801dbc6:	2b00      	cmp	r3, #0
 801dbc8:	d0f0      	beq.n	801dbac <HAL_RCC_OscConfig+0x41c>
 801dbca:	e045      	b.n	801dc58 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 801dbcc:	4b27      	ldr	r3, [pc, #156]	; (801dc6c <HAL_RCC_OscConfig+0x4dc>)
 801dbce:	2200      	movs	r2, #0
 801dbd0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801dbd2:	f7fe f9d3 	bl	801bf7c <HAL_GetTick>
 801dbd6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 801dbd8:	e008      	b.n	801dbec <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 801dbda:	f7fe f9cf 	bl	801bf7c <HAL_GetTick>
 801dbde:	4602      	mov	r2, r0
 801dbe0:	693b      	ldr	r3, [r7, #16]
 801dbe2:	1ad3      	subs	r3, r2, r3
 801dbe4:	2b02      	cmp	r3, #2
 801dbe6:	d901      	bls.n	801dbec <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 801dbe8:	2303      	movs	r3, #3
 801dbea:	e036      	b.n	801dc5a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 801dbec:	4b1e      	ldr	r3, [pc, #120]	; (801dc68 <HAL_RCC_OscConfig+0x4d8>)
 801dbee:	681b      	ldr	r3, [r3, #0]
 801dbf0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801dbf4:	2b00      	cmp	r3, #0
 801dbf6:	d1f0      	bne.n	801dbda <HAL_RCC_OscConfig+0x44a>
 801dbf8:	e02e      	b.n	801dc58 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 801dbfa:	687b      	ldr	r3, [r7, #4]
 801dbfc:	699b      	ldr	r3, [r3, #24]
 801dbfe:	2b01      	cmp	r3, #1
 801dc00:	d101      	bne.n	801dc06 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 801dc02:	2301      	movs	r3, #1
 801dc04:	e029      	b.n	801dc5a <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 801dc06:	4b18      	ldr	r3, [pc, #96]	; (801dc68 <HAL_RCC_OscConfig+0x4d8>)
 801dc08:	685b      	ldr	r3, [r3, #4]
 801dc0a:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 801dc0c:	68fb      	ldr	r3, [r7, #12]
 801dc0e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 801dc12:	687b      	ldr	r3, [r7, #4]
 801dc14:	69db      	ldr	r3, [r3, #28]
 801dc16:	429a      	cmp	r2, r3
 801dc18:	d11c      	bne.n	801dc54 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 801dc1a:	68fb      	ldr	r3, [r7, #12]
 801dc1c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 801dc20:	687b      	ldr	r3, [r7, #4]
 801dc22:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 801dc24:	429a      	cmp	r2, r3
 801dc26:	d115      	bne.n	801dc54 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 801dc28:	68fa      	ldr	r2, [r7, #12]
 801dc2a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 801dc2e:	4013      	ands	r3, r2
 801dc30:	687a      	ldr	r2, [r7, #4]
 801dc32:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 801dc34:	4293      	cmp	r3, r2
 801dc36:	d10d      	bne.n	801dc54 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 801dc38:	68fb      	ldr	r3, [r7, #12]
 801dc3a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 801dc3e:	687b      	ldr	r3, [r7, #4]
 801dc40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 801dc42:	429a      	cmp	r2, r3
 801dc44:	d106      	bne.n	801dc54 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 801dc46:	68fb      	ldr	r3, [r7, #12]
 801dc48:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 801dc4c:	687b      	ldr	r3, [r7, #4]
 801dc4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 801dc50:	429a      	cmp	r2, r3
 801dc52:	d001      	beq.n	801dc58 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 801dc54:	2301      	movs	r3, #1
 801dc56:	e000      	b.n	801dc5a <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 801dc58:	2300      	movs	r3, #0
}
 801dc5a:	4618      	mov	r0, r3
 801dc5c:	3718      	adds	r7, #24
 801dc5e:	46bd      	mov	sp, r7
 801dc60:	bd80      	pop	{r7, pc}
 801dc62:	bf00      	nop
 801dc64:	40007000 	.word	0x40007000
 801dc68:	40023800 	.word	0x40023800
 801dc6c:	42470060 	.word	0x42470060

0801dc70 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 801dc70:	b580      	push	{r7, lr}
 801dc72:	b084      	sub	sp, #16
 801dc74:	af00      	add	r7, sp, #0
 801dc76:	6078      	str	r0, [r7, #4]
 801dc78:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 801dc7a:	687b      	ldr	r3, [r7, #4]
 801dc7c:	2b00      	cmp	r3, #0
 801dc7e:	d101      	bne.n	801dc84 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 801dc80:	2301      	movs	r3, #1
 801dc82:	e0cc      	b.n	801de1e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 801dc84:	4b68      	ldr	r3, [pc, #416]	; (801de28 <HAL_RCC_ClockConfig+0x1b8>)
 801dc86:	681b      	ldr	r3, [r3, #0]
 801dc88:	f003 030f 	and.w	r3, r3, #15
 801dc8c:	683a      	ldr	r2, [r7, #0]
 801dc8e:	429a      	cmp	r2, r3
 801dc90:	d90c      	bls.n	801dcac <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801dc92:	4b65      	ldr	r3, [pc, #404]	; (801de28 <HAL_RCC_ClockConfig+0x1b8>)
 801dc94:	683a      	ldr	r2, [r7, #0]
 801dc96:	b2d2      	uxtb	r2, r2
 801dc98:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 801dc9a:	4b63      	ldr	r3, [pc, #396]	; (801de28 <HAL_RCC_ClockConfig+0x1b8>)
 801dc9c:	681b      	ldr	r3, [r3, #0]
 801dc9e:	f003 030f 	and.w	r3, r3, #15
 801dca2:	683a      	ldr	r2, [r7, #0]
 801dca4:	429a      	cmp	r2, r3
 801dca6:	d001      	beq.n	801dcac <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 801dca8:	2301      	movs	r3, #1
 801dcaa:	e0b8      	b.n	801de1e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 801dcac:	687b      	ldr	r3, [r7, #4]
 801dcae:	681b      	ldr	r3, [r3, #0]
 801dcb0:	f003 0302 	and.w	r3, r3, #2
 801dcb4:	2b00      	cmp	r3, #0
 801dcb6:	d020      	beq.n	801dcfa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 801dcb8:	687b      	ldr	r3, [r7, #4]
 801dcba:	681b      	ldr	r3, [r3, #0]
 801dcbc:	f003 0304 	and.w	r3, r3, #4
 801dcc0:	2b00      	cmp	r3, #0
 801dcc2:	d005      	beq.n	801dcd0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 801dcc4:	4b59      	ldr	r3, [pc, #356]	; (801de2c <HAL_RCC_ClockConfig+0x1bc>)
 801dcc6:	689b      	ldr	r3, [r3, #8]
 801dcc8:	4a58      	ldr	r2, [pc, #352]	; (801de2c <HAL_RCC_ClockConfig+0x1bc>)
 801dcca:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 801dcce:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 801dcd0:	687b      	ldr	r3, [r7, #4]
 801dcd2:	681b      	ldr	r3, [r3, #0]
 801dcd4:	f003 0308 	and.w	r3, r3, #8
 801dcd8:	2b00      	cmp	r3, #0
 801dcda:	d005      	beq.n	801dce8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 801dcdc:	4b53      	ldr	r3, [pc, #332]	; (801de2c <HAL_RCC_ClockConfig+0x1bc>)
 801dcde:	689b      	ldr	r3, [r3, #8]
 801dce0:	4a52      	ldr	r2, [pc, #328]	; (801de2c <HAL_RCC_ClockConfig+0x1bc>)
 801dce2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 801dce6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 801dce8:	4b50      	ldr	r3, [pc, #320]	; (801de2c <HAL_RCC_ClockConfig+0x1bc>)
 801dcea:	689b      	ldr	r3, [r3, #8]
 801dcec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 801dcf0:	687b      	ldr	r3, [r7, #4]
 801dcf2:	689b      	ldr	r3, [r3, #8]
 801dcf4:	494d      	ldr	r1, [pc, #308]	; (801de2c <HAL_RCC_ClockConfig+0x1bc>)
 801dcf6:	4313      	orrs	r3, r2
 801dcf8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 801dcfa:	687b      	ldr	r3, [r7, #4]
 801dcfc:	681b      	ldr	r3, [r3, #0]
 801dcfe:	f003 0301 	and.w	r3, r3, #1
 801dd02:	2b00      	cmp	r3, #0
 801dd04:	d044      	beq.n	801dd90 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 801dd06:	687b      	ldr	r3, [r7, #4]
 801dd08:	685b      	ldr	r3, [r3, #4]
 801dd0a:	2b01      	cmp	r3, #1
 801dd0c:	d107      	bne.n	801dd1e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 801dd0e:	4b47      	ldr	r3, [pc, #284]	; (801de2c <HAL_RCC_ClockConfig+0x1bc>)
 801dd10:	681b      	ldr	r3, [r3, #0]
 801dd12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801dd16:	2b00      	cmp	r3, #0
 801dd18:	d119      	bne.n	801dd4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 801dd1a:	2301      	movs	r3, #1
 801dd1c:	e07f      	b.n	801de1e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 801dd1e:	687b      	ldr	r3, [r7, #4]
 801dd20:	685b      	ldr	r3, [r3, #4]
 801dd22:	2b02      	cmp	r3, #2
 801dd24:	d003      	beq.n	801dd2e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 801dd26:	687b      	ldr	r3, [r7, #4]
 801dd28:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 801dd2a:	2b03      	cmp	r3, #3
 801dd2c:	d107      	bne.n	801dd3e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 801dd2e:	4b3f      	ldr	r3, [pc, #252]	; (801de2c <HAL_RCC_ClockConfig+0x1bc>)
 801dd30:	681b      	ldr	r3, [r3, #0]
 801dd32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801dd36:	2b00      	cmp	r3, #0
 801dd38:	d109      	bne.n	801dd4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 801dd3a:	2301      	movs	r3, #1
 801dd3c:	e06f      	b.n	801de1e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 801dd3e:	4b3b      	ldr	r3, [pc, #236]	; (801de2c <HAL_RCC_ClockConfig+0x1bc>)
 801dd40:	681b      	ldr	r3, [r3, #0]
 801dd42:	f003 0302 	and.w	r3, r3, #2
 801dd46:	2b00      	cmp	r3, #0
 801dd48:	d101      	bne.n	801dd4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 801dd4a:	2301      	movs	r3, #1
 801dd4c:	e067      	b.n	801de1e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 801dd4e:	4b37      	ldr	r3, [pc, #220]	; (801de2c <HAL_RCC_ClockConfig+0x1bc>)
 801dd50:	689b      	ldr	r3, [r3, #8]
 801dd52:	f023 0203 	bic.w	r2, r3, #3
 801dd56:	687b      	ldr	r3, [r7, #4]
 801dd58:	685b      	ldr	r3, [r3, #4]
 801dd5a:	4934      	ldr	r1, [pc, #208]	; (801de2c <HAL_RCC_ClockConfig+0x1bc>)
 801dd5c:	4313      	orrs	r3, r2
 801dd5e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 801dd60:	f7fe f90c 	bl	801bf7c <HAL_GetTick>
 801dd64:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 801dd66:	e00a      	b.n	801dd7e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 801dd68:	f7fe f908 	bl	801bf7c <HAL_GetTick>
 801dd6c:	4602      	mov	r2, r0
 801dd6e:	68fb      	ldr	r3, [r7, #12]
 801dd70:	1ad3      	subs	r3, r2, r3
 801dd72:	f241 3288 	movw	r2, #5000	; 0x1388
 801dd76:	4293      	cmp	r3, r2
 801dd78:	d901      	bls.n	801dd7e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 801dd7a:	2303      	movs	r3, #3
 801dd7c:	e04f      	b.n	801de1e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 801dd7e:	4b2b      	ldr	r3, [pc, #172]	; (801de2c <HAL_RCC_ClockConfig+0x1bc>)
 801dd80:	689b      	ldr	r3, [r3, #8]
 801dd82:	f003 020c 	and.w	r2, r3, #12
 801dd86:	687b      	ldr	r3, [r7, #4]
 801dd88:	685b      	ldr	r3, [r3, #4]
 801dd8a:	009b      	lsls	r3, r3, #2
 801dd8c:	429a      	cmp	r2, r3
 801dd8e:	d1eb      	bne.n	801dd68 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 801dd90:	4b25      	ldr	r3, [pc, #148]	; (801de28 <HAL_RCC_ClockConfig+0x1b8>)
 801dd92:	681b      	ldr	r3, [r3, #0]
 801dd94:	f003 030f 	and.w	r3, r3, #15
 801dd98:	683a      	ldr	r2, [r7, #0]
 801dd9a:	429a      	cmp	r2, r3
 801dd9c:	d20c      	bcs.n	801ddb8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801dd9e:	4b22      	ldr	r3, [pc, #136]	; (801de28 <HAL_RCC_ClockConfig+0x1b8>)
 801dda0:	683a      	ldr	r2, [r7, #0]
 801dda2:	b2d2      	uxtb	r2, r2
 801dda4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 801dda6:	4b20      	ldr	r3, [pc, #128]	; (801de28 <HAL_RCC_ClockConfig+0x1b8>)
 801dda8:	681b      	ldr	r3, [r3, #0]
 801ddaa:	f003 030f 	and.w	r3, r3, #15
 801ddae:	683a      	ldr	r2, [r7, #0]
 801ddb0:	429a      	cmp	r2, r3
 801ddb2:	d001      	beq.n	801ddb8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 801ddb4:	2301      	movs	r3, #1
 801ddb6:	e032      	b.n	801de1e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 801ddb8:	687b      	ldr	r3, [r7, #4]
 801ddba:	681b      	ldr	r3, [r3, #0]
 801ddbc:	f003 0304 	and.w	r3, r3, #4
 801ddc0:	2b00      	cmp	r3, #0
 801ddc2:	d008      	beq.n	801ddd6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 801ddc4:	4b19      	ldr	r3, [pc, #100]	; (801de2c <HAL_RCC_ClockConfig+0x1bc>)
 801ddc6:	689b      	ldr	r3, [r3, #8]
 801ddc8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 801ddcc:	687b      	ldr	r3, [r7, #4]
 801ddce:	68db      	ldr	r3, [r3, #12]
 801ddd0:	4916      	ldr	r1, [pc, #88]	; (801de2c <HAL_RCC_ClockConfig+0x1bc>)
 801ddd2:	4313      	orrs	r3, r2
 801ddd4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 801ddd6:	687b      	ldr	r3, [r7, #4]
 801ddd8:	681b      	ldr	r3, [r3, #0]
 801ddda:	f003 0308 	and.w	r3, r3, #8
 801ddde:	2b00      	cmp	r3, #0
 801dde0:	d009      	beq.n	801ddf6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 801dde2:	4b12      	ldr	r3, [pc, #72]	; (801de2c <HAL_RCC_ClockConfig+0x1bc>)
 801dde4:	689b      	ldr	r3, [r3, #8]
 801dde6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 801ddea:	687b      	ldr	r3, [r7, #4]
 801ddec:	691b      	ldr	r3, [r3, #16]
 801ddee:	00db      	lsls	r3, r3, #3
 801ddf0:	490e      	ldr	r1, [pc, #56]	; (801de2c <HAL_RCC_ClockConfig+0x1bc>)
 801ddf2:	4313      	orrs	r3, r2
 801ddf4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 801ddf6:	f000 f821 	bl	801de3c <HAL_RCC_GetSysClockFreq>
 801ddfa:	4601      	mov	r1, r0
 801ddfc:	4b0b      	ldr	r3, [pc, #44]	; (801de2c <HAL_RCC_ClockConfig+0x1bc>)
 801ddfe:	689b      	ldr	r3, [r3, #8]
 801de00:	091b      	lsrs	r3, r3, #4
 801de02:	f003 030f 	and.w	r3, r3, #15
 801de06:	4a0a      	ldr	r2, [pc, #40]	; (801de30 <HAL_RCC_ClockConfig+0x1c0>)
 801de08:	5cd3      	ldrb	r3, [r2, r3]
 801de0a:	fa21 f303 	lsr.w	r3, r1, r3
 801de0e:	4a09      	ldr	r2, [pc, #36]	; (801de34 <HAL_RCC_ClockConfig+0x1c4>)
 801de10:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 801de12:	4b09      	ldr	r3, [pc, #36]	; (801de38 <HAL_RCC_ClockConfig+0x1c8>)
 801de14:	681b      	ldr	r3, [r3, #0]
 801de16:	4618      	mov	r0, r3
 801de18:	f7fe f86c 	bl	801bef4 <HAL_InitTick>

  return HAL_OK;
 801de1c:	2300      	movs	r3, #0
}
 801de1e:	4618      	mov	r0, r3
 801de20:	3710      	adds	r7, #16
 801de22:	46bd      	mov	sp, r7
 801de24:	bd80      	pop	{r7, pc}
 801de26:	bf00      	nop
 801de28:	40023c00 	.word	0x40023c00
 801de2c:	40023800 	.word	0x40023800
 801de30:	0802a96c 	.word	0x0802a96c
 801de34:	20000000 	.word	0x20000000
 801de38:	20000004 	.word	0x20000004

0801de3c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 801de3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801de3e:	b085      	sub	sp, #20
 801de40:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 801de42:	2300      	movs	r3, #0
 801de44:	607b      	str	r3, [r7, #4]
 801de46:	2300      	movs	r3, #0
 801de48:	60fb      	str	r3, [r7, #12]
 801de4a:	2300      	movs	r3, #0
 801de4c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 801de4e:	2300      	movs	r3, #0
 801de50:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 801de52:	4b63      	ldr	r3, [pc, #396]	; (801dfe0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 801de54:	689b      	ldr	r3, [r3, #8]
 801de56:	f003 030c 	and.w	r3, r3, #12
 801de5a:	2b04      	cmp	r3, #4
 801de5c:	d007      	beq.n	801de6e <HAL_RCC_GetSysClockFreq+0x32>
 801de5e:	2b08      	cmp	r3, #8
 801de60:	d008      	beq.n	801de74 <HAL_RCC_GetSysClockFreq+0x38>
 801de62:	2b00      	cmp	r3, #0
 801de64:	f040 80b4 	bne.w	801dfd0 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 801de68:	4b5e      	ldr	r3, [pc, #376]	; (801dfe4 <HAL_RCC_GetSysClockFreq+0x1a8>)
 801de6a:	60bb      	str	r3, [r7, #8]
       break;
 801de6c:	e0b3      	b.n	801dfd6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 801de6e:	4b5e      	ldr	r3, [pc, #376]	; (801dfe8 <HAL_RCC_GetSysClockFreq+0x1ac>)
 801de70:	60bb      	str	r3, [r7, #8]
      break;
 801de72:	e0b0      	b.n	801dfd6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 801de74:	4b5a      	ldr	r3, [pc, #360]	; (801dfe0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 801de76:	685b      	ldr	r3, [r3, #4]
 801de78:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801de7c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 801de7e:	4b58      	ldr	r3, [pc, #352]	; (801dfe0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 801de80:	685b      	ldr	r3, [r3, #4]
 801de82:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801de86:	2b00      	cmp	r3, #0
 801de88:	d04a      	beq.n	801df20 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 801de8a:	4b55      	ldr	r3, [pc, #340]	; (801dfe0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 801de8c:	685b      	ldr	r3, [r3, #4]
 801de8e:	099b      	lsrs	r3, r3, #6
 801de90:	f04f 0400 	mov.w	r4, #0
 801de94:	f240 11ff 	movw	r1, #511	; 0x1ff
 801de98:	f04f 0200 	mov.w	r2, #0
 801de9c:	ea03 0501 	and.w	r5, r3, r1
 801dea0:	ea04 0602 	and.w	r6, r4, r2
 801dea4:	4629      	mov	r1, r5
 801dea6:	4632      	mov	r2, r6
 801dea8:	f04f 0300 	mov.w	r3, #0
 801deac:	f04f 0400 	mov.w	r4, #0
 801deb0:	0154      	lsls	r4, r2, #5
 801deb2:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 801deb6:	014b      	lsls	r3, r1, #5
 801deb8:	4619      	mov	r1, r3
 801deba:	4622      	mov	r2, r4
 801debc:	1b49      	subs	r1, r1, r5
 801debe:	eb62 0206 	sbc.w	r2, r2, r6
 801dec2:	f04f 0300 	mov.w	r3, #0
 801dec6:	f04f 0400 	mov.w	r4, #0
 801deca:	0194      	lsls	r4, r2, #6
 801decc:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 801ded0:	018b      	lsls	r3, r1, #6
 801ded2:	1a5b      	subs	r3, r3, r1
 801ded4:	eb64 0402 	sbc.w	r4, r4, r2
 801ded8:	f04f 0100 	mov.w	r1, #0
 801dedc:	f04f 0200 	mov.w	r2, #0
 801dee0:	00e2      	lsls	r2, r4, #3
 801dee2:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 801dee6:	00d9      	lsls	r1, r3, #3
 801dee8:	460b      	mov	r3, r1
 801deea:	4614      	mov	r4, r2
 801deec:	195b      	adds	r3, r3, r5
 801deee:	eb44 0406 	adc.w	r4, r4, r6
 801def2:	f04f 0100 	mov.w	r1, #0
 801def6:	f04f 0200 	mov.w	r2, #0
 801defa:	0262      	lsls	r2, r4, #9
 801defc:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 801df00:	0259      	lsls	r1, r3, #9
 801df02:	460b      	mov	r3, r1
 801df04:	4614      	mov	r4, r2
 801df06:	4618      	mov	r0, r3
 801df08:	4621      	mov	r1, r4
 801df0a:	687b      	ldr	r3, [r7, #4]
 801df0c:	f04f 0400 	mov.w	r4, #0
 801df10:	461a      	mov	r2, r3
 801df12:	4623      	mov	r3, r4
 801df14:	f7e2 fe48 	bl	8000ba8 <__aeabi_uldivmod>
 801df18:	4603      	mov	r3, r0
 801df1a:	460c      	mov	r4, r1
 801df1c:	60fb      	str	r3, [r7, #12]
 801df1e:	e049      	b.n	801dfb4 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 801df20:	4b2f      	ldr	r3, [pc, #188]	; (801dfe0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 801df22:	685b      	ldr	r3, [r3, #4]
 801df24:	099b      	lsrs	r3, r3, #6
 801df26:	f04f 0400 	mov.w	r4, #0
 801df2a:	f240 11ff 	movw	r1, #511	; 0x1ff
 801df2e:	f04f 0200 	mov.w	r2, #0
 801df32:	ea03 0501 	and.w	r5, r3, r1
 801df36:	ea04 0602 	and.w	r6, r4, r2
 801df3a:	4629      	mov	r1, r5
 801df3c:	4632      	mov	r2, r6
 801df3e:	f04f 0300 	mov.w	r3, #0
 801df42:	f04f 0400 	mov.w	r4, #0
 801df46:	0154      	lsls	r4, r2, #5
 801df48:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 801df4c:	014b      	lsls	r3, r1, #5
 801df4e:	4619      	mov	r1, r3
 801df50:	4622      	mov	r2, r4
 801df52:	1b49      	subs	r1, r1, r5
 801df54:	eb62 0206 	sbc.w	r2, r2, r6
 801df58:	f04f 0300 	mov.w	r3, #0
 801df5c:	f04f 0400 	mov.w	r4, #0
 801df60:	0194      	lsls	r4, r2, #6
 801df62:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 801df66:	018b      	lsls	r3, r1, #6
 801df68:	1a5b      	subs	r3, r3, r1
 801df6a:	eb64 0402 	sbc.w	r4, r4, r2
 801df6e:	f04f 0100 	mov.w	r1, #0
 801df72:	f04f 0200 	mov.w	r2, #0
 801df76:	00e2      	lsls	r2, r4, #3
 801df78:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 801df7c:	00d9      	lsls	r1, r3, #3
 801df7e:	460b      	mov	r3, r1
 801df80:	4614      	mov	r4, r2
 801df82:	195b      	adds	r3, r3, r5
 801df84:	eb44 0406 	adc.w	r4, r4, r6
 801df88:	f04f 0100 	mov.w	r1, #0
 801df8c:	f04f 0200 	mov.w	r2, #0
 801df90:	02a2      	lsls	r2, r4, #10
 801df92:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 801df96:	0299      	lsls	r1, r3, #10
 801df98:	460b      	mov	r3, r1
 801df9a:	4614      	mov	r4, r2
 801df9c:	4618      	mov	r0, r3
 801df9e:	4621      	mov	r1, r4
 801dfa0:	687b      	ldr	r3, [r7, #4]
 801dfa2:	f04f 0400 	mov.w	r4, #0
 801dfa6:	461a      	mov	r2, r3
 801dfa8:	4623      	mov	r3, r4
 801dfaa:	f7e2 fdfd 	bl	8000ba8 <__aeabi_uldivmod>
 801dfae:	4603      	mov	r3, r0
 801dfb0:	460c      	mov	r4, r1
 801dfb2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 801dfb4:	4b0a      	ldr	r3, [pc, #40]	; (801dfe0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 801dfb6:	685b      	ldr	r3, [r3, #4]
 801dfb8:	0c1b      	lsrs	r3, r3, #16
 801dfba:	f003 0303 	and.w	r3, r3, #3
 801dfbe:	3301      	adds	r3, #1
 801dfc0:	005b      	lsls	r3, r3, #1
 801dfc2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 801dfc4:	68fa      	ldr	r2, [r7, #12]
 801dfc6:	683b      	ldr	r3, [r7, #0]
 801dfc8:	fbb2 f3f3 	udiv	r3, r2, r3
 801dfcc:	60bb      	str	r3, [r7, #8]
      break;
 801dfce:	e002      	b.n	801dfd6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 801dfd0:	4b04      	ldr	r3, [pc, #16]	; (801dfe4 <HAL_RCC_GetSysClockFreq+0x1a8>)
 801dfd2:	60bb      	str	r3, [r7, #8]
      break;
 801dfd4:	bf00      	nop
    }
  }
  return sysclockfreq;
 801dfd6:	68bb      	ldr	r3, [r7, #8]
}
 801dfd8:	4618      	mov	r0, r3
 801dfda:	3714      	adds	r7, #20
 801dfdc:	46bd      	mov	sp, r7
 801dfde:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801dfe0:	40023800 	.word	0x40023800
 801dfe4:	00f42400 	.word	0x00f42400
 801dfe8:	007a1200 	.word	0x007a1200

0801dfec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 801dfec:	b480      	push	{r7}
 801dfee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 801dff0:	4b03      	ldr	r3, [pc, #12]	; (801e000 <HAL_RCC_GetHCLKFreq+0x14>)
 801dff2:	681b      	ldr	r3, [r3, #0]
}
 801dff4:	4618      	mov	r0, r3
 801dff6:	46bd      	mov	sp, r7
 801dff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dffc:	4770      	bx	lr
 801dffe:	bf00      	nop
 801e000:	20000000 	.word	0x20000000

0801e004 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 801e004:	b580      	push	{r7, lr}
 801e006:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 801e008:	f7ff fff0 	bl	801dfec <HAL_RCC_GetHCLKFreq>
 801e00c:	4601      	mov	r1, r0
 801e00e:	4b05      	ldr	r3, [pc, #20]	; (801e024 <HAL_RCC_GetPCLK1Freq+0x20>)
 801e010:	689b      	ldr	r3, [r3, #8]
 801e012:	0a9b      	lsrs	r3, r3, #10
 801e014:	f003 0307 	and.w	r3, r3, #7
 801e018:	4a03      	ldr	r2, [pc, #12]	; (801e028 <HAL_RCC_GetPCLK1Freq+0x24>)
 801e01a:	5cd3      	ldrb	r3, [r2, r3]
 801e01c:	fa21 f303 	lsr.w	r3, r1, r3
}
 801e020:	4618      	mov	r0, r3
 801e022:	bd80      	pop	{r7, pc}
 801e024:	40023800 	.word	0x40023800
 801e028:	0802a97c 	.word	0x0802a97c

0801e02c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 801e02c:	b580      	push	{r7, lr}
 801e02e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 801e030:	f7ff ffdc 	bl	801dfec <HAL_RCC_GetHCLKFreq>
 801e034:	4601      	mov	r1, r0
 801e036:	4b05      	ldr	r3, [pc, #20]	; (801e04c <HAL_RCC_GetPCLK2Freq+0x20>)
 801e038:	689b      	ldr	r3, [r3, #8]
 801e03a:	0b5b      	lsrs	r3, r3, #13
 801e03c:	f003 0307 	and.w	r3, r3, #7
 801e040:	4a03      	ldr	r2, [pc, #12]	; (801e050 <HAL_RCC_GetPCLK2Freq+0x24>)
 801e042:	5cd3      	ldrb	r3, [r2, r3]
 801e044:	fa21 f303 	lsr.w	r3, r1, r3
}
 801e048:	4618      	mov	r0, r3
 801e04a:	bd80      	pop	{r7, pc}
 801e04c:	40023800 	.word	0x40023800
 801e050:	0802a97c 	.word	0x0802a97c

0801e054 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 801e054:	b580      	push	{r7, lr}
 801e056:	b082      	sub	sp, #8
 801e058:	af00      	add	r7, sp, #0
 801e05a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 801e05c:	687b      	ldr	r3, [r7, #4]
 801e05e:	2b00      	cmp	r3, #0
 801e060:	d101      	bne.n	801e066 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 801e062:	2301      	movs	r3, #1
 801e064:	e01d      	b.n	801e0a2 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 801e066:	687b      	ldr	r3, [r7, #4]
 801e068:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801e06c:	b2db      	uxtb	r3, r3
 801e06e:	2b00      	cmp	r3, #0
 801e070:	d106      	bne.n	801e080 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 801e072:	687b      	ldr	r3, [r7, #4]
 801e074:	2200      	movs	r2, #0
 801e076:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 801e07a:	6878      	ldr	r0, [r7, #4]
 801e07c:	f7fd fdea 	bl	801bc54 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801e080:	687b      	ldr	r3, [r7, #4]
 801e082:	2202      	movs	r2, #2
 801e084:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 801e088:	687b      	ldr	r3, [r7, #4]
 801e08a:	681a      	ldr	r2, [r3, #0]
 801e08c:	687b      	ldr	r3, [r7, #4]
 801e08e:	3304      	adds	r3, #4
 801e090:	4619      	mov	r1, r3
 801e092:	4610      	mov	r0, r2
 801e094:	f000 fd2e 	bl	801eaf4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 801e098:	687b      	ldr	r3, [r7, #4]
 801e09a:	2201      	movs	r2, #1
 801e09c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 801e0a0:	2300      	movs	r3, #0
}
 801e0a2:	4618      	mov	r0, r3
 801e0a4:	3708      	adds	r7, #8
 801e0a6:	46bd      	mov	sp, r7
 801e0a8:	bd80      	pop	{r7, pc}

0801e0aa <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 801e0aa:	b580      	push	{r7, lr}
 801e0ac:	b082      	sub	sp, #8
 801e0ae:	af00      	add	r7, sp, #0
 801e0b0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 801e0b2:	687b      	ldr	r3, [r7, #4]
 801e0b4:	2b00      	cmp	r3, #0
 801e0b6:	d101      	bne.n	801e0bc <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 801e0b8:	2301      	movs	r3, #1
 801e0ba:	e01d      	b.n	801e0f8 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 801e0bc:	687b      	ldr	r3, [r7, #4]
 801e0be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801e0c2:	b2db      	uxtb	r3, r3
 801e0c4:	2b00      	cmp	r3, #0
 801e0c6:	d106      	bne.n	801e0d6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 801e0c8:	687b      	ldr	r3, [r7, #4]
 801e0ca:	2200      	movs	r2, #0
 801e0cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 801e0d0:	6878      	ldr	r0, [r7, #4]
 801e0d2:	f000 f815 	bl	801e100 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801e0d6:	687b      	ldr	r3, [r7, #4]
 801e0d8:	2202      	movs	r2, #2
 801e0da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 801e0de:	687b      	ldr	r3, [r7, #4]
 801e0e0:	681a      	ldr	r2, [r3, #0]
 801e0e2:	687b      	ldr	r3, [r7, #4]
 801e0e4:	3304      	adds	r3, #4
 801e0e6:	4619      	mov	r1, r3
 801e0e8:	4610      	mov	r0, r2
 801e0ea:	f000 fd03 	bl	801eaf4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 801e0ee:	687b      	ldr	r3, [r7, #4]
 801e0f0:	2201      	movs	r2, #1
 801e0f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 801e0f6:	2300      	movs	r3, #0
}
 801e0f8:	4618      	mov	r0, r3
 801e0fa:	3708      	adds	r7, #8
 801e0fc:	46bd      	mov	sp, r7
 801e0fe:	bd80      	pop	{r7, pc}

0801e100 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 801e100:	b480      	push	{r7}
 801e102:	b083      	sub	sp, #12
 801e104:	af00      	add	r7, sp, #0
 801e106:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 801e108:	bf00      	nop
 801e10a:	370c      	adds	r7, #12
 801e10c:	46bd      	mov	sp, r7
 801e10e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e112:	4770      	bx	lr

0801e114 <HAL_TIM_PWM_Start_DMA>:
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 801e114:	b580      	push	{r7, lr}
 801e116:	b086      	sub	sp, #24
 801e118:	af00      	add	r7, sp, #0
 801e11a:	60f8      	str	r0, [r7, #12]
 801e11c:	60b9      	str	r1, [r7, #8]
 801e11e:	607a      	str	r2, [r7, #4]
 801e120:	807b      	strh	r3, [r7, #2]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  if (htim->State == HAL_TIM_STATE_BUSY)
 801e122:	68fb      	ldr	r3, [r7, #12]
 801e124:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801e128:	b2db      	uxtb	r3, r3
 801e12a:	2b02      	cmp	r3, #2
 801e12c:	d101      	bne.n	801e132 <HAL_TIM_PWM_Start_DMA+0x1e>
  {
    return HAL_BUSY;
 801e12e:	2302      	movs	r3, #2
 801e130:	e0e9      	b.n	801e306 <HAL_TIM_PWM_Start_DMA+0x1f2>
  }
  else if (htim->State == HAL_TIM_STATE_READY)
 801e132:	68fb      	ldr	r3, [r7, #12]
 801e134:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801e138:	b2db      	uxtb	r3, r3
 801e13a:	2b01      	cmp	r3, #1
 801e13c:	d10b      	bne.n	801e156 <HAL_TIM_PWM_Start_DMA+0x42>
  {
    if ((pData == NULL) && (Length > 0U))
 801e13e:	687b      	ldr	r3, [r7, #4]
 801e140:	2b00      	cmp	r3, #0
 801e142:	d104      	bne.n	801e14e <HAL_TIM_PWM_Start_DMA+0x3a>
 801e144:	887b      	ldrh	r3, [r7, #2]
 801e146:	2b00      	cmp	r3, #0
 801e148:	d001      	beq.n	801e14e <HAL_TIM_PWM_Start_DMA+0x3a>
    {
      return HAL_ERROR;
 801e14a:	2301      	movs	r3, #1
 801e14c:	e0db      	b.n	801e306 <HAL_TIM_PWM_Start_DMA+0x1f2>
    }
    else
    {
      htim->State = HAL_TIM_STATE_BUSY;
 801e14e:	68fb      	ldr	r3, [r7, #12]
 801e150:	2202      	movs	r2, #2
 801e152:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  else
  {
    /* nothing to do */
  }

  switch (Channel)
 801e156:	68bb      	ldr	r3, [r7, #8]
 801e158:	2b0c      	cmp	r3, #12
 801e15a:	f200 80ad 	bhi.w	801e2b8 <HAL_TIM_PWM_Start_DMA+0x1a4>
 801e15e:	a201      	add	r2, pc, #4	; (adr r2, 801e164 <HAL_TIM_PWM_Start_DMA+0x50>)
 801e160:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801e164:	0801e199 	.word	0x0801e199
 801e168:	0801e2b9 	.word	0x0801e2b9
 801e16c:	0801e2b9 	.word	0x0801e2b9
 801e170:	0801e2b9 	.word	0x0801e2b9
 801e174:	0801e1e1 	.word	0x0801e1e1
 801e178:	0801e2b9 	.word	0x0801e2b9
 801e17c:	0801e2b9 	.word	0x0801e2b9
 801e180:	0801e2b9 	.word	0x0801e2b9
 801e184:	0801e229 	.word	0x0801e229
 801e188:	0801e2b9 	.word	0x0801e2b9
 801e18c:	0801e2b9 	.word	0x0801e2b9
 801e190:	0801e2b9 	.word	0x0801e2b9
 801e194:	0801e271 	.word	0x0801e271
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 801e198:	68fb      	ldr	r3, [r7, #12]
 801e19a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e19c:	4a5c      	ldr	r2, [pc, #368]	; (801e310 <HAL_TIM_PWM_Start_DMA+0x1fc>)
 801e19e:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 801e1a0:	68fb      	ldr	r3, [r7, #12]
 801e1a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e1a4:	4a5b      	ldr	r2, [pc, #364]	; (801e314 <HAL_TIM_PWM_Start_DMA+0x200>)
 801e1a6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 801e1a8:	68fb      	ldr	r3, [r7, #12]
 801e1aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e1ac:	4a5a      	ldr	r2, [pc, #360]	; (801e318 <HAL_TIM_PWM_Start_DMA+0x204>)
 801e1ae:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1, Length) != HAL_OK)
 801e1b0:	68fb      	ldr	r3, [r7, #12]
 801e1b2:	6a58      	ldr	r0, [r3, #36]	; 0x24
 801e1b4:	6879      	ldr	r1, [r7, #4]
 801e1b6:	68fb      	ldr	r3, [r7, #12]
 801e1b8:	681b      	ldr	r3, [r3, #0]
 801e1ba:	3334      	adds	r3, #52	; 0x34
 801e1bc:	461a      	mov	r2, r3
 801e1be:	887b      	ldrh	r3, [r7, #2]
 801e1c0:	f7fe f8ca 	bl	801c358 <HAL_DMA_Start_IT>
 801e1c4:	4603      	mov	r3, r0
 801e1c6:	2b00      	cmp	r3, #0
 801e1c8:	d001      	beq.n	801e1ce <HAL_TIM_PWM_Start_DMA+0xba>
      {
        return HAL_ERROR;
 801e1ca:	2301      	movs	r3, #1
 801e1cc:	e09b      	b.n	801e306 <HAL_TIM_PWM_Start_DMA+0x1f2>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 801e1ce:	68fb      	ldr	r3, [r7, #12]
 801e1d0:	681b      	ldr	r3, [r3, #0]
 801e1d2:	68da      	ldr	r2, [r3, #12]
 801e1d4:	68fb      	ldr	r3, [r7, #12]
 801e1d6:	681b      	ldr	r3, [r3, #0]
 801e1d8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801e1dc:	60da      	str	r2, [r3, #12]
      break;
 801e1de:	e06c      	b.n	801e2ba <HAL_TIM_PWM_Start_DMA+0x1a6>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 801e1e0:	68fb      	ldr	r3, [r7, #12]
 801e1e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801e1e4:	4a4a      	ldr	r2, [pc, #296]	; (801e310 <HAL_TIM_PWM_Start_DMA+0x1fc>)
 801e1e6:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 801e1e8:	68fb      	ldr	r3, [r7, #12]
 801e1ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801e1ec:	4a49      	ldr	r2, [pc, #292]	; (801e314 <HAL_TIM_PWM_Start_DMA+0x200>)
 801e1ee:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 801e1f0:	68fb      	ldr	r3, [r7, #12]
 801e1f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801e1f4:	4a48      	ldr	r2, [pc, #288]	; (801e318 <HAL_TIM_PWM_Start_DMA+0x204>)
 801e1f6:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2, Length) != HAL_OK)
 801e1f8:	68fb      	ldr	r3, [r7, #12]
 801e1fa:	6a98      	ldr	r0, [r3, #40]	; 0x28
 801e1fc:	6879      	ldr	r1, [r7, #4]
 801e1fe:	68fb      	ldr	r3, [r7, #12]
 801e200:	681b      	ldr	r3, [r3, #0]
 801e202:	3338      	adds	r3, #56	; 0x38
 801e204:	461a      	mov	r2, r3
 801e206:	887b      	ldrh	r3, [r7, #2]
 801e208:	f7fe f8a6 	bl	801c358 <HAL_DMA_Start_IT>
 801e20c:	4603      	mov	r3, r0
 801e20e:	2b00      	cmp	r3, #0
 801e210:	d001      	beq.n	801e216 <HAL_TIM_PWM_Start_DMA+0x102>
      {
        return HAL_ERROR;
 801e212:	2301      	movs	r3, #1
 801e214:	e077      	b.n	801e306 <HAL_TIM_PWM_Start_DMA+0x1f2>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 801e216:	68fb      	ldr	r3, [r7, #12]
 801e218:	681b      	ldr	r3, [r3, #0]
 801e21a:	68da      	ldr	r2, [r3, #12]
 801e21c:	68fb      	ldr	r3, [r7, #12]
 801e21e:	681b      	ldr	r3, [r3, #0]
 801e220:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 801e224:	60da      	str	r2, [r3, #12]
      break;
 801e226:	e048      	b.n	801e2ba <HAL_TIM_PWM_Start_DMA+0x1a6>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 801e228:	68fb      	ldr	r3, [r7, #12]
 801e22a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801e22c:	4a38      	ldr	r2, [pc, #224]	; (801e310 <HAL_TIM_PWM_Start_DMA+0x1fc>)
 801e22e:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 801e230:	68fb      	ldr	r3, [r7, #12]
 801e232:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801e234:	4a37      	ldr	r2, [pc, #220]	; (801e314 <HAL_TIM_PWM_Start_DMA+0x200>)
 801e236:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 801e238:	68fb      	ldr	r3, [r7, #12]
 801e23a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801e23c:	4a36      	ldr	r2, [pc, #216]	; (801e318 <HAL_TIM_PWM_Start_DMA+0x204>)
 801e23e:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3, Length) != HAL_OK)
 801e240:	68fb      	ldr	r3, [r7, #12]
 801e242:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 801e244:	6879      	ldr	r1, [r7, #4]
 801e246:	68fb      	ldr	r3, [r7, #12]
 801e248:	681b      	ldr	r3, [r3, #0]
 801e24a:	333c      	adds	r3, #60	; 0x3c
 801e24c:	461a      	mov	r2, r3
 801e24e:	887b      	ldrh	r3, [r7, #2]
 801e250:	f7fe f882 	bl	801c358 <HAL_DMA_Start_IT>
 801e254:	4603      	mov	r3, r0
 801e256:	2b00      	cmp	r3, #0
 801e258:	d001      	beq.n	801e25e <HAL_TIM_PWM_Start_DMA+0x14a>
      {
        return HAL_ERROR;
 801e25a:	2301      	movs	r3, #1
 801e25c:	e053      	b.n	801e306 <HAL_TIM_PWM_Start_DMA+0x1f2>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 801e25e:	68fb      	ldr	r3, [r7, #12]
 801e260:	681b      	ldr	r3, [r3, #0]
 801e262:	68da      	ldr	r2, [r3, #12]
 801e264:	68fb      	ldr	r3, [r7, #12]
 801e266:	681b      	ldr	r3, [r3, #0]
 801e268:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 801e26c:	60da      	str	r2, [r3, #12]
      break;
 801e26e:	e024      	b.n	801e2ba <HAL_TIM_PWM_Start_DMA+0x1a6>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 801e270:	68fb      	ldr	r3, [r7, #12]
 801e272:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801e274:	4a26      	ldr	r2, [pc, #152]	; (801e310 <HAL_TIM_PWM_Start_DMA+0x1fc>)
 801e276:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 801e278:	68fb      	ldr	r3, [r7, #12]
 801e27a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801e27c:	4a25      	ldr	r2, [pc, #148]	; (801e314 <HAL_TIM_PWM_Start_DMA+0x200>)
 801e27e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 801e280:	68fb      	ldr	r3, [r7, #12]
 801e282:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801e284:	4a24      	ldr	r2, [pc, #144]	; (801e318 <HAL_TIM_PWM_Start_DMA+0x204>)
 801e286:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4, Length) != HAL_OK)
 801e288:	68fb      	ldr	r3, [r7, #12]
 801e28a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 801e28c:	6879      	ldr	r1, [r7, #4]
 801e28e:	68fb      	ldr	r3, [r7, #12]
 801e290:	681b      	ldr	r3, [r3, #0]
 801e292:	3340      	adds	r3, #64	; 0x40
 801e294:	461a      	mov	r2, r3
 801e296:	887b      	ldrh	r3, [r7, #2]
 801e298:	f7fe f85e 	bl	801c358 <HAL_DMA_Start_IT>
 801e29c:	4603      	mov	r3, r0
 801e29e:	2b00      	cmp	r3, #0
 801e2a0:	d001      	beq.n	801e2a6 <HAL_TIM_PWM_Start_DMA+0x192>
      {
        return HAL_ERROR;
 801e2a2:	2301      	movs	r3, #1
 801e2a4:	e02f      	b.n	801e306 <HAL_TIM_PWM_Start_DMA+0x1f2>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 801e2a6:	68fb      	ldr	r3, [r7, #12]
 801e2a8:	681b      	ldr	r3, [r3, #0]
 801e2aa:	68da      	ldr	r2, [r3, #12]
 801e2ac:	68fb      	ldr	r3, [r7, #12]
 801e2ae:	681b      	ldr	r3, [r3, #0]
 801e2b0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 801e2b4:	60da      	str	r2, [r3, #12]
      break;
 801e2b6:	e000      	b.n	801e2ba <HAL_TIM_PWM_Start_DMA+0x1a6>
    }

    default:
      break;
 801e2b8:	bf00      	nop
  }

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 801e2ba:	68fb      	ldr	r3, [r7, #12]
 801e2bc:	681b      	ldr	r3, [r3, #0]
 801e2be:	2201      	movs	r2, #1
 801e2c0:	68b9      	ldr	r1, [r7, #8]
 801e2c2:	4618      	mov	r0, r3
 801e2c4:	f000 febc 	bl	801f040 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 801e2c8:	68fb      	ldr	r3, [r7, #12]
 801e2ca:	681b      	ldr	r3, [r3, #0]
 801e2cc:	4a13      	ldr	r2, [pc, #76]	; (801e31c <HAL_TIM_PWM_Start_DMA+0x208>)
 801e2ce:	4293      	cmp	r3, r2
 801e2d0:	d107      	bne.n	801e2e2 <HAL_TIM_PWM_Start_DMA+0x1ce>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 801e2d2:	68fb      	ldr	r3, [r7, #12]
 801e2d4:	681b      	ldr	r3, [r3, #0]
 801e2d6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801e2d8:	68fb      	ldr	r3, [r7, #12]
 801e2da:	681b      	ldr	r3, [r3, #0]
 801e2dc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 801e2e0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 801e2e2:	68fb      	ldr	r3, [r7, #12]
 801e2e4:	681b      	ldr	r3, [r3, #0]
 801e2e6:	689b      	ldr	r3, [r3, #8]
 801e2e8:	f003 0307 	and.w	r3, r3, #7
 801e2ec:	617b      	str	r3, [r7, #20]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801e2ee:	697b      	ldr	r3, [r7, #20]
 801e2f0:	2b06      	cmp	r3, #6
 801e2f2:	d007      	beq.n	801e304 <HAL_TIM_PWM_Start_DMA+0x1f0>
  {
    __HAL_TIM_ENABLE(htim);
 801e2f4:	68fb      	ldr	r3, [r7, #12]
 801e2f6:	681b      	ldr	r3, [r3, #0]
 801e2f8:	681a      	ldr	r2, [r3, #0]
 801e2fa:	68fb      	ldr	r3, [r7, #12]
 801e2fc:	681b      	ldr	r3, [r3, #0]
 801e2fe:	f042 0201 	orr.w	r2, r2, #1
 801e302:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 801e304:	2300      	movs	r3, #0
}
 801e306:	4618      	mov	r0, r3
 801e308:	3718      	adds	r7, #24
 801e30a:	46bd      	mov	sp, r7
 801e30c:	bd80      	pop	{r7, pc}
 801e30e:	bf00      	nop
 801e310:	0801ea13 	.word	0x0801ea13
 801e314:	0801ea83 	.word	0x0801ea83
 801e318:	0801e9ef 	.word	0x0801e9ef
 801e31c:	40010000 	.word	0x40010000

0801e320 <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 801e320:	b580      	push	{r7, lr}
 801e322:	b082      	sub	sp, #8
 801e324:	af00      	add	r7, sp, #0
 801e326:	6078      	str	r0, [r7, #4]
 801e328:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 801e32a:	683b      	ldr	r3, [r7, #0]
 801e32c:	2b0c      	cmp	r3, #12
 801e32e:	d855      	bhi.n	801e3dc <HAL_TIM_PWM_Stop_DMA+0xbc>
 801e330:	a201      	add	r2, pc, #4	; (adr r2, 801e338 <HAL_TIM_PWM_Stop_DMA+0x18>)
 801e332:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801e336:	bf00      	nop
 801e338:	0801e36d 	.word	0x0801e36d
 801e33c:	0801e3dd 	.word	0x0801e3dd
 801e340:	0801e3dd 	.word	0x0801e3dd
 801e344:	0801e3dd 	.word	0x0801e3dd
 801e348:	0801e389 	.word	0x0801e389
 801e34c:	0801e3dd 	.word	0x0801e3dd
 801e350:	0801e3dd 	.word	0x0801e3dd
 801e354:	0801e3dd 	.word	0x0801e3dd
 801e358:	0801e3a5 	.word	0x0801e3a5
 801e35c:	0801e3dd 	.word	0x0801e3dd
 801e360:	0801e3dd 	.word	0x0801e3dd
 801e364:	0801e3dd 	.word	0x0801e3dd
 801e368:	0801e3c1 	.word	0x0801e3c1
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 801e36c:	687b      	ldr	r3, [r7, #4]
 801e36e:	681b      	ldr	r3, [r3, #0]
 801e370:	68da      	ldr	r2, [r3, #12]
 801e372:	687b      	ldr	r3, [r7, #4]
 801e374:	681b      	ldr	r3, [r3, #0]
 801e376:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 801e37a:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 801e37c:	687b      	ldr	r3, [r7, #4]
 801e37e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e380:	4618      	mov	r0, r3
 801e382:	f7fe f841 	bl	801c408 <HAL_DMA_Abort_IT>
      break;
 801e386:	e02a      	b.n	801e3de <HAL_TIM_PWM_Stop_DMA+0xbe>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 801e388:	687b      	ldr	r3, [r7, #4]
 801e38a:	681b      	ldr	r3, [r3, #0]
 801e38c:	68da      	ldr	r2, [r3, #12]
 801e38e:	687b      	ldr	r3, [r7, #4]
 801e390:	681b      	ldr	r3, [r3, #0]
 801e392:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801e396:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 801e398:	687b      	ldr	r3, [r7, #4]
 801e39a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801e39c:	4618      	mov	r0, r3
 801e39e:	f7fe f833 	bl	801c408 <HAL_DMA_Abort_IT>
      break;
 801e3a2:	e01c      	b.n	801e3de <HAL_TIM_PWM_Stop_DMA+0xbe>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 801e3a4:	687b      	ldr	r3, [r7, #4]
 801e3a6:	681b      	ldr	r3, [r3, #0]
 801e3a8:	68da      	ldr	r2, [r3, #12]
 801e3aa:	687b      	ldr	r3, [r7, #4]
 801e3ac:	681b      	ldr	r3, [r3, #0]
 801e3ae:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 801e3b2:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 801e3b4:	687b      	ldr	r3, [r7, #4]
 801e3b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801e3b8:	4618      	mov	r0, r3
 801e3ba:	f7fe f825 	bl	801c408 <HAL_DMA_Abort_IT>
      break;
 801e3be:	e00e      	b.n	801e3de <HAL_TIM_PWM_Stop_DMA+0xbe>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 801e3c0:	687b      	ldr	r3, [r7, #4]
 801e3c2:	681b      	ldr	r3, [r3, #0]
 801e3c4:	68da      	ldr	r2, [r3, #12]
 801e3c6:	687b      	ldr	r3, [r7, #4]
 801e3c8:	681b      	ldr	r3, [r3, #0]
 801e3ca:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 801e3ce:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 801e3d0:	687b      	ldr	r3, [r7, #4]
 801e3d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801e3d4:	4618      	mov	r0, r3
 801e3d6:	f7fe f817 	bl	801c408 <HAL_DMA_Abort_IT>
      break;
 801e3da:	e000      	b.n	801e3de <HAL_TIM_PWM_Stop_DMA+0xbe>
    }

    default:
      break;
 801e3dc:	bf00      	nop
  }

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 801e3de:	687b      	ldr	r3, [r7, #4]
 801e3e0:	681b      	ldr	r3, [r3, #0]
 801e3e2:	2200      	movs	r2, #0
 801e3e4:	6839      	ldr	r1, [r7, #0]
 801e3e6:	4618      	mov	r0, r3
 801e3e8:	f000 fe2a 	bl	801f040 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 801e3ec:	687b      	ldr	r3, [r7, #4]
 801e3ee:	681b      	ldr	r3, [r3, #0]
 801e3f0:	4a1d      	ldr	r2, [pc, #116]	; (801e468 <HAL_TIM_PWM_Stop_DMA+0x148>)
 801e3f2:	4293      	cmp	r3, r2
 801e3f4:	d117      	bne.n	801e426 <HAL_TIM_PWM_Stop_DMA+0x106>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 801e3f6:	687b      	ldr	r3, [r7, #4]
 801e3f8:	681b      	ldr	r3, [r3, #0]
 801e3fa:	6a1a      	ldr	r2, [r3, #32]
 801e3fc:	f241 1311 	movw	r3, #4369	; 0x1111
 801e400:	4013      	ands	r3, r2
 801e402:	2b00      	cmp	r3, #0
 801e404:	d10f      	bne.n	801e426 <HAL_TIM_PWM_Stop_DMA+0x106>
 801e406:	687b      	ldr	r3, [r7, #4]
 801e408:	681b      	ldr	r3, [r3, #0]
 801e40a:	6a1a      	ldr	r2, [r3, #32]
 801e40c:	f240 4344 	movw	r3, #1092	; 0x444
 801e410:	4013      	ands	r3, r2
 801e412:	2b00      	cmp	r3, #0
 801e414:	d107      	bne.n	801e426 <HAL_TIM_PWM_Stop_DMA+0x106>
 801e416:	687b      	ldr	r3, [r7, #4]
 801e418:	681b      	ldr	r3, [r3, #0]
 801e41a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801e41c:	687b      	ldr	r3, [r7, #4]
 801e41e:	681b      	ldr	r3, [r3, #0]
 801e420:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 801e424:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 801e426:	687b      	ldr	r3, [r7, #4]
 801e428:	681b      	ldr	r3, [r3, #0]
 801e42a:	6a1a      	ldr	r2, [r3, #32]
 801e42c:	f241 1311 	movw	r3, #4369	; 0x1111
 801e430:	4013      	ands	r3, r2
 801e432:	2b00      	cmp	r3, #0
 801e434:	d10f      	bne.n	801e456 <HAL_TIM_PWM_Stop_DMA+0x136>
 801e436:	687b      	ldr	r3, [r7, #4]
 801e438:	681b      	ldr	r3, [r3, #0]
 801e43a:	6a1a      	ldr	r2, [r3, #32]
 801e43c:	f240 4344 	movw	r3, #1092	; 0x444
 801e440:	4013      	ands	r3, r2
 801e442:	2b00      	cmp	r3, #0
 801e444:	d107      	bne.n	801e456 <HAL_TIM_PWM_Stop_DMA+0x136>
 801e446:	687b      	ldr	r3, [r7, #4]
 801e448:	681b      	ldr	r3, [r3, #0]
 801e44a:	681a      	ldr	r2, [r3, #0]
 801e44c:	687b      	ldr	r3, [r7, #4]
 801e44e:	681b      	ldr	r3, [r3, #0]
 801e450:	f022 0201 	bic.w	r2, r2, #1
 801e454:	601a      	str	r2, [r3, #0]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 801e456:	687b      	ldr	r3, [r7, #4]
 801e458:	2201      	movs	r2, #1
 801e45a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 801e45e:	2300      	movs	r3, #0
}
 801e460:	4618      	mov	r0, r3
 801e462:	3708      	adds	r7, #8
 801e464:	46bd      	mov	sp, r7
 801e466:	bd80      	pop	{r7, pc}
 801e468:	40010000 	.word	0x40010000

0801e46c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 801e46c:	b580      	push	{r7, lr}
 801e46e:	b082      	sub	sp, #8
 801e470:	af00      	add	r7, sp, #0
 801e472:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 801e474:	687b      	ldr	r3, [r7, #4]
 801e476:	681b      	ldr	r3, [r3, #0]
 801e478:	691b      	ldr	r3, [r3, #16]
 801e47a:	f003 0302 	and.w	r3, r3, #2
 801e47e:	2b02      	cmp	r3, #2
 801e480:	d122      	bne.n	801e4c8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 801e482:	687b      	ldr	r3, [r7, #4]
 801e484:	681b      	ldr	r3, [r3, #0]
 801e486:	68db      	ldr	r3, [r3, #12]
 801e488:	f003 0302 	and.w	r3, r3, #2
 801e48c:	2b02      	cmp	r3, #2
 801e48e:	d11b      	bne.n	801e4c8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 801e490:	687b      	ldr	r3, [r7, #4]
 801e492:	681b      	ldr	r3, [r3, #0]
 801e494:	f06f 0202 	mvn.w	r2, #2
 801e498:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 801e49a:	687b      	ldr	r3, [r7, #4]
 801e49c:	2201      	movs	r2, #1
 801e49e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 801e4a0:	687b      	ldr	r3, [r7, #4]
 801e4a2:	681b      	ldr	r3, [r3, #0]
 801e4a4:	699b      	ldr	r3, [r3, #24]
 801e4a6:	f003 0303 	and.w	r3, r3, #3
 801e4aa:	2b00      	cmp	r3, #0
 801e4ac:	d003      	beq.n	801e4b6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 801e4ae:	6878      	ldr	r0, [r7, #4]
 801e4b0:	f000 fa75 	bl	801e99e <HAL_TIM_IC_CaptureCallback>
 801e4b4:	e005      	b.n	801e4c2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 801e4b6:	6878      	ldr	r0, [r7, #4]
 801e4b8:	f000 fa67 	bl	801e98a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 801e4bc:	6878      	ldr	r0, [r7, #4]
 801e4be:	f7fd f977 	bl	801b7b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801e4c2:	687b      	ldr	r3, [r7, #4]
 801e4c4:	2200      	movs	r2, #0
 801e4c6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 801e4c8:	687b      	ldr	r3, [r7, #4]
 801e4ca:	681b      	ldr	r3, [r3, #0]
 801e4cc:	691b      	ldr	r3, [r3, #16]
 801e4ce:	f003 0304 	and.w	r3, r3, #4
 801e4d2:	2b04      	cmp	r3, #4
 801e4d4:	d122      	bne.n	801e51c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 801e4d6:	687b      	ldr	r3, [r7, #4]
 801e4d8:	681b      	ldr	r3, [r3, #0]
 801e4da:	68db      	ldr	r3, [r3, #12]
 801e4dc:	f003 0304 	and.w	r3, r3, #4
 801e4e0:	2b04      	cmp	r3, #4
 801e4e2:	d11b      	bne.n	801e51c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 801e4e4:	687b      	ldr	r3, [r7, #4]
 801e4e6:	681b      	ldr	r3, [r3, #0]
 801e4e8:	f06f 0204 	mvn.w	r2, #4
 801e4ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 801e4ee:	687b      	ldr	r3, [r7, #4]
 801e4f0:	2202      	movs	r2, #2
 801e4f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 801e4f4:	687b      	ldr	r3, [r7, #4]
 801e4f6:	681b      	ldr	r3, [r3, #0]
 801e4f8:	699b      	ldr	r3, [r3, #24]
 801e4fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801e4fe:	2b00      	cmp	r3, #0
 801e500:	d003      	beq.n	801e50a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801e502:	6878      	ldr	r0, [r7, #4]
 801e504:	f000 fa4b 	bl	801e99e <HAL_TIM_IC_CaptureCallback>
 801e508:	e005      	b.n	801e516 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801e50a:	6878      	ldr	r0, [r7, #4]
 801e50c:	f000 fa3d 	bl	801e98a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 801e510:	6878      	ldr	r0, [r7, #4]
 801e512:	f7fd f94d 	bl	801b7b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801e516:	687b      	ldr	r3, [r7, #4]
 801e518:	2200      	movs	r2, #0
 801e51a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 801e51c:	687b      	ldr	r3, [r7, #4]
 801e51e:	681b      	ldr	r3, [r3, #0]
 801e520:	691b      	ldr	r3, [r3, #16]
 801e522:	f003 0308 	and.w	r3, r3, #8
 801e526:	2b08      	cmp	r3, #8
 801e528:	d122      	bne.n	801e570 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 801e52a:	687b      	ldr	r3, [r7, #4]
 801e52c:	681b      	ldr	r3, [r3, #0]
 801e52e:	68db      	ldr	r3, [r3, #12]
 801e530:	f003 0308 	and.w	r3, r3, #8
 801e534:	2b08      	cmp	r3, #8
 801e536:	d11b      	bne.n	801e570 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 801e538:	687b      	ldr	r3, [r7, #4]
 801e53a:	681b      	ldr	r3, [r3, #0]
 801e53c:	f06f 0208 	mvn.w	r2, #8
 801e540:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 801e542:	687b      	ldr	r3, [r7, #4]
 801e544:	2204      	movs	r2, #4
 801e546:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 801e548:	687b      	ldr	r3, [r7, #4]
 801e54a:	681b      	ldr	r3, [r3, #0]
 801e54c:	69db      	ldr	r3, [r3, #28]
 801e54e:	f003 0303 	and.w	r3, r3, #3
 801e552:	2b00      	cmp	r3, #0
 801e554:	d003      	beq.n	801e55e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801e556:	6878      	ldr	r0, [r7, #4]
 801e558:	f000 fa21 	bl	801e99e <HAL_TIM_IC_CaptureCallback>
 801e55c:	e005      	b.n	801e56a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801e55e:	6878      	ldr	r0, [r7, #4]
 801e560:	f000 fa13 	bl	801e98a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 801e564:	6878      	ldr	r0, [r7, #4]
 801e566:	f7fd f923 	bl	801b7b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801e56a:	687b      	ldr	r3, [r7, #4]
 801e56c:	2200      	movs	r2, #0
 801e56e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 801e570:	687b      	ldr	r3, [r7, #4]
 801e572:	681b      	ldr	r3, [r3, #0]
 801e574:	691b      	ldr	r3, [r3, #16]
 801e576:	f003 0310 	and.w	r3, r3, #16
 801e57a:	2b10      	cmp	r3, #16
 801e57c:	d122      	bne.n	801e5c4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 801e57e:	687b      	ldr	r3, [r7, #4]
 801e580:	681b      	ldr	r3, [r3, #0]
 801e582:	68db      	ldr	r3, [r3, #12]
 801e584:	f003 0310 	and.w	r3, r3, #16
 801e588:	2b10      	cmp	r3, #16
 801e58a:	d11b      	bne.n	801e5c4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 801e58c:	687b      	ldr	r3, [r7, #4]
 801e58e:	681b      	ldr	r3, [r3, #0]
 801e590:	f06f 0210 	mvn.w	r2, #16
 801e594:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 801e596:	687b      	ldr	r3, [r7, #4]
 801e598:	2208      	movs	r2, #8
 801e59a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 801e59c:	687b      	ldr	r3, [r7, #4]
 801e59e:	681b      	ldr	r3, [r3, #0]
 801e5a0:	69db      	ldr	r3, [r3, #28]
 801e5a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801e5a6:	2b00      	cmp	r3, #0
 801e5a8:	d003      	beq.n	801e5b2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801e5aa:	6878      	ldr	r0, [r7, #4]
 801e5ac:	f000 f9f7 	bl	801e99e <HAL_TIM_IC_CaptureCallback>
 801e5b0:	e005      	b.n	801e5be <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801e5b2:	6878      	ldr	r0, [r7, #4]
 801e5b4:	f000 f9e9 	bl	801e98a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 801e5b8:	6878      	ldr	r0, [r7, #4]
 801e5ba:	f7fd f8f9 	bl	801b7b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801e5be:	687b      	ldr	r3, [r7, #4]
 801e5c0:	2200      	movs	r2, #0
 801e5c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 801e5c4:	687b      	ldr	r3, [r7, #4]
 801e5c6:	681b      	ldr	r3, [r3, #0]
 801e5c8:	691b      	ldr	r3, [r3, #16]
 801e5ca:	f003 0301 	and.w	r3, r3, #1
 801e5ce:	2b01      	cmp	r3, #1
 801e5d0:	d10e      	bne.n	801e5f0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 801e5d2:	687b      	ldr	r3, [r7, #4]
 801e5d4:	681b      	ldr	r3, [r3, #0]
 801e5d6:	68db      	ldr	r3, [r3, #12]
 801e5d8:	f003 0301 	and.w	r3, r3, #1
 801e5dc:	2b01      	cmp	r3, #1
 801e5de:	d107      	bne.n	801e5f0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 801e5e0:	687b      	ldr	r3, [r7, #4]
 801e5e2:	681b      	ldr	r3, [r3, #0]
 801e5e4:	f06f 0201 	mvn.w	r2, #1
 801e5e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 801e5ea:	6878      	ldr	r0, [r7, #4]
 801e5ec:	f000 f9c3 	bl	801e976 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 801e5f0:	687b      	ldr	r3, [r7, #4]
 801e5f2:	681b      	ldr	r3, [r3, #0]
 801e5f4:	691b      	ldr	r3, [r3, #16]
 801e5f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801e5fa:	2b80      	cmp	r3, #128	; 0x80
 801e5fc:	d10e      	bne.n	801e61c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 801e5fe:	687b      	ldr	r3, [r7, #4]
 801e600:	681b      	ldr	r3, [r3, #0]
 801e602:	68db      	ldr	r3, [r3, #12]
 801e604:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801e608:	2b80      	cmp	r3, #128	; 0x80
 801e60a:	d107      	bne.n	801e61c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 801e60c:	687b      	ldr	r3, [r7, #4]
 801e60e:	681b      	ldr	r3, [r3, #0]
 801e610:	f06f 0280 	mvn.w	r2, #128	; 0x80
 801e614:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 801e616:	6878      	ldr	r0, [r7, #4]
 801e618:	f000 fdb0 	bl	801f17c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 801e61c:	687b      	ldr	r3, [r7, #4]
 801e61e:	681b      	ldr	r3, [r3, #0]
 801e620:	691b      	ldr	r3, [r3, #16]
 801e622:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801e626:	2b40      	cmp	r3, #64	; 0x40
 801e628:	d10e      	bne.n	801e648 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 801e62a:	687b      	ldr	r3, [r7, #4]
 801e62c:	681b      	ldr	r3, [r3, #0]
 801e62e:	68db      	ldr	r3, [r3, #12]
 801e630:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801e634:	2b40      	cmp	r3, #64	; 0x40
 801e636:	d107      	bne.n	801e648 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 801e638:	687b      	ldr	r3, [r7, #4]
 801e63a:	681b      	ldr	r3, [r3, #0]
 801e63c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 801e640:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 801e642:	6878      	ldr	r0, [r7, #4]
 801e644:	f000 f9bf 	bl	801e9c6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 801e648:	687b      	ldr	r3, [r7, #4]
 801e64a:	681b      	ldr	r3, [r3, #0]
 801e64c:	691b      	ldr	r3, [r3, #16]
 801e64e:	f003 0320 	and.w	r3, r3, #32
 801e652:	2b20      	cmp	r3, #32
 801e654:	d10e      	bne.n	801e674 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 801e656:	687b      	ldr	r3, [r7, #4]
 801e658:	681b      	ldr	r3, [r3, #0]
 801e65a:	68db      	ldr	r3, [r3, #12]
 801e65c:	f003 0320 	and.w	r3, r3, #32
 801e660:	2b20      	cmp	r3, #32
 801e662:	d107      	bne.n	801e674 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 801e664:	687b      	ldr	r3, [r7, #4]
 801e666:	681b      	ldr	r3, [r3, #0]
 801e668:	f06f 0220 	mvn.w	r2, #32
 801e66c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 801e66e:	6878      	ldr	r0, [r7, #4]
 801e670:	f000 fd7a 	bl	801f168 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 801e674:	bf00      	nop
 801e676:	3708      	adds	r7, #8
 801e678:	46bd      	mov	sp, r7
 801e67a:	bd80      	pop	{r7, pc}

0801e67c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 801e67c:	b580      	push	{r7, lr}
 801e67e:	b084      	sub	sp, #16
 801e680:	af00      	add	r7, sp, #0
 801e682:	60f8      	str	r0, [r7, #12]
 801e684:	60b9      	str	r1, [r7, #8]
 801e686:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 801e688:	68fb      	ldr	r3, [r7, #12]
 801e68a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801e68e:	2b01      	cmp	r3, #1
 801e690:	d101      	bne.n	801e696 <HAL_TIM_PWM_ConfigChannel+0x1a>
 801e692:	2302      	movs	r3, #2
 801e694:	e0b4      	b.n	801e800 <HAL_TIM_PWM_ConfigChannel+0x184>
 801e696:	68fb      	ldr	r3, [r7, #12]
 801e698:	2201      	movs	r2, #1
 801e69a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 801e69e:	68fb      	ldr	r3, [r7, #12]
 801e6a0:	2202      	movs	r2, #2
 801e6a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 801e6a6:	687b      	ldr	r3, [r7, #4]
 801e6a8:	2b0c      	cmp	r3, #12
 801e6aa:	f200 809f 	bhi.w	801e7ec <HAL_TIM_PWM_ConfigChannel+0x170>
 801e6ae:	a201      	add	r2, pc, #4	; (adr r2, 801e6b4 <HAL_TIM_PWM_ConfigChannel+0x38>)
 801e6b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801e6b4:	0801e6e9 	.word	0x0801e6e9
 801e6b8:	0801e7ed 	.word	0x0801e7ed
 801e6bc:	0801e7ed 	.word	0x0801e7ed
 801e6c0:	0801e7ed 	.word	0x0801e7ed
 801e6c4:	0801e729 	.word	0x0801e729
 801e6c8:	0801e7ed 	.word	0x0801e7ed
 801e6cc:	0801e7ed 	.word	0x0801e7ed
 801e6d0:	0801e7ed 	.word	0x0801e7ed
 801e6d4:	0801e76b 	.word	0x0801e76b
 801e6d8:	0801e7ed 	.word	0x0801e7ed
 801e6dc:	0801e7ed 	.word	0x0801e7ed
 801e6e0:	0801e7ed 	.word	0x0801e7ed
 801e6e4:	0801e7ab 	.word	0x0801e7ab
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 801e6e8:	68fb      	ldr	r3, [r7, #12]
 801e6ea:	681b      	ldr	r3, [r3, #0]
 801e6ec:	68b9      	ldr	r1, [r7, #8]
 801e6ee:	4618      	mov	r0, r3
 801e6f0:	f000 fa80 	bl	801ebf4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 801e6f4:	68fb      	ldr	r3, [r7, #12]
 801e6f6:	681b      	ldr	r3, [r3, #0]
 801e6f8:	699a      	ldr	r2, [r3, #24]
 801e6fa:	68fb      	ldr	r3, [r7, #12]
 801e6fc:	681b      	ldr	r3, [r3, #0]
 801e6fe:	f042 0208 	orr.w	r2, r2, #8
 801e702:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 801e704:	68fb      	ldr	r3, [r7, #12]
 801e706:	681b      	ldr	r3, [r3, #0]
 801e708:	699a      	ldr	r2, [r3, #24]
 801e70a:	68fb      	ldr	r3, [r7, #12]
 801e70c:	681b      	ldr	r3, [r3, #0]
 801e70e:	f022 0204 	bic.w	r2, r2, #4
 801e712:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 801e714:	68fb      	ldr	r3, [r7, #12]
 801e716:	681b      	ldr	r3, [r3, #0]
 801e718:	6999      	ldr	r1, [r3, #24]
 801e71a:	68bb      	ldr	r3, [r7, #8]
 801e71c:	691a      	ldr	r2, [r3, #16]
 801e71e:	68fb      	ldr	r3, [r7, #12]
 801e720:	681b      	ldr	r3, [r3, #0]
 801e722:	430a      	orrs	r2, r1
 801e724:	619a      	str	r2, [r3, #24]
      break;
 801e726:	e062      	b.n	801e7ee <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 801e728:	68fb      	ldr	r3, [r7, #12]
 801e72a:	681b      	ldr	r3, [r3, #0]
 801e72c:	68b9      	ldr	r1, [r7, #8]
 801e72e:	4618      	mov	r0, r3
 801e730:	f000 fac6 	bl	801ecc0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 801e734:	68fb      	ldr	r3, [r7, #12]
 801e736:	681b      	ldr	r3, [r3, #0]
 801e738:	699a      	ldr	r2, [r3, #24]
 801e73a:	68fb      	ldr	r3, [r7, #12]
 801e73c:	681b      	ldr	r3, [r3, #0]
 801e73e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 801e742:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 801e744:	68fb      	ldr	r3, [r7, #12]
 801e746:	681b      	ldr	r3, [r3, #0]
 801e748:	699a      	ldr	r2, [r3, #24]
 801e74a:	68fb      	ldr	r3, [r7, #12]
 801e74c:	681b      	ldr	r3, [r3, #0]
 801e74e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801e752:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 801e754:	68fb      	ldr	r3, [r7, #12]
 801e756:	681b      	ldr	r3, [r3, #0]
 801e758:	6999      	ldr	r1, [r3, #24]
 801e75a:	68bb      	ldr	r3, [r7, #8]
 801e75c:	691b      	ldr	r3, [r3, #16]
 801e75e:	021a      	lsls	r2, r3, #8
 801e760:	68fb      	ldr	r3, [r7, #12]
 801e762:	681b      	ldr	r3, [r3, #0]
 801e764:	430a      	orrs	r2, r1
 801e766:	619a      	str	r2, [r3, #24]
      break;
 801e768:	e041      	b.n	801e7ee <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 801e76a:	68fb      	ldr	r3, [r7, #12]
 801e76c:	681b      	ldr	r3, [r3, #0]
 801e76e:	68b9      	ldr	r1, [r7, #8]
 801e770:	4618      	mov	r0, r3
 801e772:	f000 fb11 	bl	801ed98 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 801e776:	68fb      	ldr	r3, [r7, #12]
 801e778:	681b      	ldr	r3, [r3, #0]
 801e77a:	69da      	ldr	r2, [r3, #28]
 801e77c:	68fb      	ldr	r3, [r7, #12]
 801e77e:	681b      	ldr	r3, [r3, #0]
 801e780:	f042 0208 	orr.w	r2, r2, #8
 801e784:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 801e786:	68fb      	ldr	r3, [r7, #12]
 801e788:	681b      	ldr	r3, [r3, #0]
 801e78a:	69da      	ldr	r2, [r3, #28]
 801e78c:	68fb      	ldr	r3, [r7, #12]
 801e78e:	681b      	ldr	r3, [r3, #0]
 801e790:	f022 0204 	bic.w	r2, r2, #4
 801e794:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 801e796:	68fb      	ldr	r3, [r7, #12]
 801e798:	681b      	ldr	r3, [r3, #0]
 801e79a:	69d9      	ldr	r1, [r3, #28]
 801e79c:	68bb      	ldr	r3, [r7, #8]
 801e79e:	691a      	ldr	r2, [r3, #16]
 801e7a0:	68fb      	ldr	r3, [r7, #12]
 801e7a2:	681b      	ldr	r3, [r3, #0]
 801e7a4:	430a      	orrs	r2, r1
 801e7a6:	61da      	str	r2, [r3, #28]
      break;
 801e7a8:	e021      	b.n	801e7ee <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 801e7aa:	68fb      	ldr	r3, [r7, #12]
 801e7ac:	681b      	ldr	r3, [r3, #0]
 801e7ae:	68b9      	ldr	r1, [r7, #8]
 801e7b0:	4618      	mov	r0, r3
 801e7b2:	f000 fb5b 	bl	801ee6c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 801e7b6:	68fb      	ldr	r3, [r7, #12]
 801e7b8:	681b      	ldr	r3, [r3, #0]
 801e7ba:	69da      	ldr	r2, [r3, #28]
 801e7bc:	68fb      	ldr	r3, [r7, #12]
 801e7be:	681b      	ldr	r3, [r3, #0]
 801e7c0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 801e7c4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 801e7c6:	68fb      	ldr	r3, [r7, #12]
 801e7c8:	681b      	ldr	r3, [r3, #0]
 801e7ca:	69da      	ldr	r2, [r3, #28]
 801e7cc:	68fb      	ldr	r3, [r7, #12]
 801e7ce:	681b      	ldr	r3, [r3, #0]
 801e7d0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801e7d4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 801e7d6:	68fb      	ldr	r3, [r7, #12]
 801e7d8:	681b      	ldr	r3, [r3, #0]
 801e7da:	69d9      	ldr	r1, [r3, #28]
 801e7dc:	68bb      	ldr	r3, [r7, #8]
 801e7de:	691b      	ldr	r3, [r3, #16]
 801e7e0:	021a      	lsls	r2, r3, #8
 801e7e2:	68fb      	ldr	r3, [r7, #12]
 801e7e4:	681b      	ldr	r3, [r3, #0]
 801e7e6:	430a      	orrs	r2, r1
 801e7e8:	61da      	str	r2, [r3, #28]
      break;
 801e7ea:	e000      	b.n	801e7ee <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 801e7ec:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 801e7ee:	68fb      	ldr	r3, [r7, #12]
 801e7f0:	2201      	movs	r2, #1
 801e7f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 801e7f6:	68fb      	ldr	r3, [r7, #12]
 801e7f8:	2200      	movs	r2, #0
 801e7fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 801e7fe:	2300      	movs	r3, #0
}
 801e800:	4618      	mov	r0, r3
 801e802:	3710      	adds	r7, #16
 801e804:	46bd      	mov	sp, r7
 801e806:	bd80      	pop	{r7, pc}

0801e808 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 801e808:	b580      	push	{r7, lr}
 801e80a:	b084      	sub	sp, #16
 801e80c:	af00      	add	r7, sp, #0
 801e80e:	6078      	str	r0, [r7, #4]
 801e810:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 801e812:	687b      	ldr	r3, [r7, #4]
 801e814:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801e818:	2b01      	cmp	r3, #1
 801e81a:	d101      	bne.n	801e820 <HAL_TIM_ConfigClockSource+0x18>
 801e81c:	2302      	movs	r3, #2
 801e81e:	e0a6      	b.n	801e96e <HAL_TIM_ConfigClockSource+0x166>
 801e820:	687b      	ldr	r3, [r7, #4]
 801e822:	2201      	movs	r2, #1
 801e824:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 801e828:	687b      	ldr	r3, [r7, #4]
 801e82a:	2202      	movs	r2, #2
 801e82c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 801e830:	687b      	ldr	r3, [r7, #4]
 801e832:	681b      	ldr	r3, [r3, #0]
 801e834:	689b      	ldr	r3, [r3, #8]
 801e836:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 801e838:	68fb      	ldr	r3, [r7, #12]
 801e83a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 801e83e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 801e840:	68fb      	ldr	r3, [r7, #12]
 801e842:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 801e846:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 801e848:	687b      	ldr	r3, [r7, #4]
 801e84a:	681b      	ldr	r3, [r3, #0]
 801e84c:	68fa      	ldr	r2, [r7, #12]
 801e84e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 801e850:	683b      	ldr	r3, [r7, #0]
 801e852:	681b      	ldr	r3, [r3, #0]
 801e854:	2b40      	cmp	r3, #64	; 0x40
 801e856:	d067      	beq.n	801e928 <HAL_TIM_ConfigClockSource+0x120>
 801e858:	2b40      	cmp	r3, #64	; 0x40
 801e85a:	d80b      	bhi.n	801e874 <HAL_TIM_ConfigClockSource+0x6c>
 801e85c:	2b10      	cmp	r3, #16
 801e85e:	d073      	beq.n	801e948 <HAL_TIM_ConfigClockSource+0x140>
 801e860:	2b10      	cmp	r3, #16
 801e862:	d802      	bhi.n	801e86a <HAL_TIM_ConfigClockSource+0x62>
 801e864:	2b00      	cmp	r3, #0
 801e866:	d06f      	beq.n	801e948 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 801e868:	e078      	b.n	801e95c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 801e86a:	2b20      	cmp	r3, #32
 801e86c:	d06c      	beq.n	801e948 <HAL_TIM_ConfigClockSource+0x140>
 801e86e:	2b30      	cmp	r3, #48	; 0x30
 801e870:	d06a      	beq.n	801e948 <HAL_TIM_ConfigClockSource+0x140>
      break;
 801e872:	e073      	b.n	801e95c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 801e874:	2b70      	cmp	r3, #112	; 0x70
 801e876:	d00d      	beq.n	801e894 <HAL_TIM_ConfigClockSource+0x8c>
 801e878:	2b70      	cmp	r3, #112	; 0x70
 801e87a:	d804      	bhi.n	801e886 <HAL_TIM_ConfigClockSource+0x7e>
 801e87c:	2b50      	cmp	r3, #80	; 0x50
 801e87e:	d033      	beq.n	801e8e8 <HAL_TIM_ConfigClockSource+0xe0>
 801e880:	2b60      	cmp	r3, #96	; 0x60
 801e882:	d041      	beq.n	801e908 <HAL_TIM_ConfigClockSource+0x100>
      break;
 801e884:	e06a      	b.n	801e95c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 801e886:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801e88a:	d066      	beq.n	801e95a <HAL_TIM_ConfigClockSource+0x152>
 801e88c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801e890:	d017      	beq.n	801e8c2 <HAL_TIM_ConfigClockSource+0xba>
      break;
 801e892:	e063      	b.n	801e95c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 801e894:	687b      	ldr	r3, [r7, #4]
 801e896:	6818      	ldr	r0, [r3, #0]
 801e898:	683b      	ldr	r3, [r7, #0]
 801e89a:	6899      	ldr	r1, [r3, #8]
 801e89c:	683b      	ldr	r3, [r7, #0]
 801e89e:	685a      	ldr	r2, [r3, #4]
 801e8a0:	683b      	ldr	r3, [r7, #0]
 801e8a2:	68db      	ldr	r3, [r3, #12]
 801e8a4:	f000 fbac 	bl	801f000 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 801e8a8:	687b      	ldr	r3, [r7, #4]
 801e8aa:	681b      	ldr	r3, [r3, #0]
 801e8ac:	689b      	ldr	r3, [r3, #8]
 801e8ae:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 801e8b0:	68fb      	ldr	r3, [r7, #12]
 801e8b2:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 801e8b6:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 801e8b8:	687b      	ldr	r3, [r7, #4]
 801e8ba:	681b      	ldr	r3, [r3, #0]
 801e8bc:	68fa      	ldr	r2, [r7, #12]
 801e8be:	609a      	str	r2, [r3, #8]
      break;
 801e8c0:	e04c      	b.n	801e95c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 801e8c2:	687b      	ldr	r3, [r7, #4]
 801e8c4:	6818      	ldr	r0, [r3, #0]
 801e8c6:	683b      	ldr	r3, [r7, #0]
 801e8c8:	6899      	ldr	r1, [r3, #8]
 801e8ca:	683b      	ldr	r3, [r7, #0]
 801e8cc:	685a      	ldr	r2, [r3, #4]
 801e8ce:	683b      	ldr	r3, [r7, #0]
 801e8d0:	68db      	ldr	r3, [r3, #12]
 801e8d2:	f000 fb95 	bl	801f000 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 801e8d6:	687b      	ldr	r3, [r7, #4]
 801e8d8:	681b      	ldr	r3, [r3, #0]
 801e8da:	689a      	ldr	r2, [r3, #8]
 801e8dc:	687b      	ldr	r3, [r7, #4]
 801e8de:	681b      	ldr	r3, [r3, #0]
 801e8e0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 801e8e4:	609a      	str	r2, [r3, #8]
      break;
 801e8e6:	e039      	b.n	801e95c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 801e8e8:	687b      	ldr	r3, [r7, #4]
 801e8ea:	6818      	ldr	r0, [r3, #0]
 801e8ec:	683b      	ldr	r3, [r7, #0]
 801e8ee:	6859      	ldr	r1, [r3, #4]
 801e8f0:	683b      	ldr	r3, [r7, #0]
 801e8f2:	68db      	ldr	r3, [r3, #12]
 801e8f4:	461a      	mov	r2, r3
 801e8f6:	f000 fb09 	bl	801ef0c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 801e8fa:	687b      	ldr	r3, [r7, #4]
 801e8fc:	681b      	ldr	r3, [r3, #0]
 801e8fe:	2150      	movs	r1, #80	; 0x50
 801e900:	4618      	mov	r0, r3
 801e902:	f000 fb62 	bl	801efca <TIM_ITRx_SetConfig>
      break;
 801e906:	e029      	b.n	801e95c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 801e908:	687b      	ldr	r3, [r7, #4]
 801e90a:	6818      	ldr	r0, [r3, #0]
 801e90c:	683b      	ldr	r3, [r7, #0]
 801e90e:	6859      	ldr	r1, [r3, #4]
 801e910:	683b      	ldr	r3, [r7, #0]
 801e912:	68db      	ldr	r3, [r3, #12]
 801e914:	461a      	mov	r2, r3
 801e916:	f000 fb28 	bl	801ef6a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 801e91a:	687b      	ldr	r3, [r7, #4]
 801e91c:	681b      	ldr	r3, [r3, #0]
 801e91e:	2160      	movs	r1, #96	; 0x60
 801e920:	4618      	mov	r0, r3
 801e922:	f000 fb52 	bl	801efca <TIM_ITRx_SetConfig>
      break;
 801e926:	e019      	b.n	801e95c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 801e928:	687b      	ldr	r3, [r7, #4]
 801e92a:	6818      	ldr	r0, [r3, #0]
 801e92c:	683b      	ldr	r3, [r7, #0]
 801e92e:	6859      	ldr	r1, [r3, #4]
 801e930:	683b      	ldr	r3, [r7, #0]
 801e932:	68db      	ldr	r3, [r3, #12]
 801e934:	461a      	mov	r2, r3
 801e936:	f000 fae9 	bl	801ef0c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 801e93a:	687b      	ldr	r3, [r7, #4]
 801e93c:	681b      	ldr	r3, [r3, #0]
 801e93e:	2140      	movs	r1, #64	; 0x40
 801e940:	4618      	mov	r0, r3
 801e942:	f000 fb42 	bl	801efca <TIM_ITRx_SetConfig>
      break;
 801e946:	e009      	b.n	801e95c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 801e948:	687b      	ldr	r3, [r7, #4]
 801e94a:	681a      	ldr	r2, [r3, #0]
 801e94c:	683b      	ldr	r3, [r7, #0]
 801e94e:	681b      	ldr	r3, [r3, #0]
 801e950:	4619      	mov	r1, r3
 801e952:	4610      	mov	r0, r2
 801e954:	f000 fb39 	bl	801efca <TIM_ITRx_SetConfig>
      break;
 801e958:	e000      	b.n	801e95c <HAL_TIM_ConfigClockSource+0x154>
      break;
 801e95a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 801e95c:	687b      	ldr	r3, [r7, #4]
 801e95e:	2201      	movs	r2, #1
 801e960:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 801e964:	687b      	ldr	r3, [r7, #4]
 801e966:	2200      	movs	r2, #0
 801e968:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 801e96c:	2300      	movs	r3, #0
}
 801e96e:	4618      	mov	r0, r3
 801e970:	3710      	adds	r7, #16
 801e972:	46bd      	mov	sp, r7
 801e974:	bd80      	pop	{r7, pc}

0801e976 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 801e976:	b480      	push	{r7}
 801e978:	b083      	sub	sp, #12
 801e97a:	af00      	add	r7, sp, #0
 801e97c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 801e97e:	bf00      	nop
 801e980:	370c      	adds	r7, #12
 801e982:	46bd      	mov	sp, r7
 801e984:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e988:	4770      	bx	lr

0801e98a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 801e98a:	b480      	push	{r7}
 801e98c:	b083      	sub	sp, #12
 801e98e:	af00      	add	r7, sp, #0
 801e990:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 801e992:	bf00      	nop
 801e994:	370c      	adds	r7, #12
 801e996:	46bd      	mov	sp, r7
 801e998:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e99c:	4770      	bx	lr

0801e99e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 801e99e:	b480      	push	{r7}
 801e9a0:	b083      	sub	sp, #12
 801e9a2:	af00      	add	r7, sp, #0
 801e9a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 801e9a6:	bf00      	nop
 801e9a8:	370c      	adds	r7, #12
 801e9aa:	46bd      	mov	sp, r7
 801e9ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e9b0:	4770      	bx	lr

0801e9b2 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 801e9b2:	b480      	push	{r7}
 801e9b4:	b083      	sub	sp, #12
 801e9b6:	af00      	add	r7, sp, #0
 801e9b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 801e9ba:	bf00      	nop
 801e9bc:	370c      	adds	r7, #12
 801e9be:	46bd      	mov	sp, r7
 801e9c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e9c4:	4770      	bx	lr

0801e9c6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 801e9c6:	b480      	push	{r7}
 801e9c8:	b083      	sub	sp, #12
 801e9ca:	af00      	add	r7, sp, #0
 801e9cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 801e9ce:	bf00      	nop
 801e9d0:	370c      	adds	r7, #12
 801e9d2:	46bd      	mov	sp, r7
 801e9d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e9d8:	4770      	bx	lr

0801e9da <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 801e9da:	b480      	push	{r7}
 801e9dc:	b083      	sub	sp, #12
 801e9de:	af00      	add	r7, sp, #0
 801e9e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 801e9e2:	bf00      	nop
 801e9e4:	370c      	adds	r7, #12
 801e9e6:	46bd      	mov	sp, r7
 801e9e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e9ec:	4770      	bx	lr

0801e9ee <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 801e9ee:	b580      	push	{r7, lr}
 801e9f0:	b084      	sub	sp, #16
 801e9f2:	af00      	add	r7, sp, #0
 801e9f4:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 801e9f6:	687b      	ldr	r3, [r7, #4]
 801e9f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801e9fa:	60fb      	str	r3, [r7, #12]

  htim->State = HAL_TIM_STATE_READY;
 801e9fc:	68fb      	ldr	r3, [r7, #12]
 801e9fe:	2201      	movs	r2, #1
 801ea00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 801ea04:	68f8      	ldr	r0, [r7, #12]
 801ea06:	f7ff ffe8 	bl	801e9da <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
}
 801ea0a:	bf00      	nop
 801ea0c:	3710      	adds	r7, #16
 801ea0e:	46bd      	mov	sp, r7
 801ea10:	bd80      	pop	{r7, pc}

0801ea12 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 801ea12:	b580      	push	{r7, lr}
 801ea14:	b084      	sub	sp, #16
 801ea16:	af00      	add	r7, sp, #0
 801ea18:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 801ea1a:	687b      	ldr	r3, [r7, #4]
 801ea1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801ea1e:	60fb      	str	r3, [r7, #12]

  htim->State = HAL_TIM_STATE_READY;
 801ea20:	68fb      	ldr	r3, [r7, #12]
 801ea22:	2201      	movs	r2, #1
 801ea24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 801ea28:	68fb      	ldr	r3, [r7, #12]
 801ea2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ea2c:	687a      	ldr	r2, [r7, #4]
 801ea2e:	429a      	cmp	r2, r3
 801ea30:	d103      	bne.n	801ea3a <TIM_DMADelayPulseCplt+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 801ea32:	68fb      	ldr	r3, [r7, #12]
 801ea34:	2201      	movs	r2, #1
 801ea36:	771a      	strb	r2, [r3, #28]
 801ea38:	e019      	b.n	801ea6e <TIM_DMADelayPulseCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 801ea3a:	68fb      	ldr	r3, [r7, #12]
 801ea3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801ea3e:	687a      	ldr	r2, [r7, #4]
 801ea40:	429a      	cmp	r2, r3
 801ea42:	d103      	bne.n	801ea4c <TIM_DMADelayPulseCplt+0x3a>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 801ea44:	68fb      	ldr	r3, [r7, #12]
 801ea46:	2202      	movs	r2, #2
 801ea48:	771a      	strb	r2, [r3, #28]
 801ea4a:	e010      	b.n	801ea6e <TIM_DMADelayPulseCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 801ea4c:	68fb      	ldr	r3, [r7, #12]
 801ea4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801ea50:	687a      	ldr	r2, [r7, #4]
 801ea52:	429a      	cmp	r2, r3
 801ea54:	d103      	bne.n	801ea5e <TIM_DMADelayPulseCplt+0x4c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 801ea56:	68fb      	ldr	r3, [r7, #12]
 801ea58:	2204      	movs	r2, #4
 801ea5a:	771a      	strb	r2, [r3, #28]
 801ea5c:	e007      	b.n	801ea6e <TIM_DMADelayPulseCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 801ea5e:	68fb      	ldr	r3, [r7, #12]
 801ea60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801ea62:	687a      	ldr	r2, [r7, #4]
 801ea64:	429a      	cmp	r2, r3
 801ea66:	d102      	bne.n	801ea6e <TIM_DMADelayPulseCplt+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 801ea68:	68fb      	ldr	r3, [r7, #12]
 801ea6a:	2208      	movs	r2, #8
 801ea6c:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 801ea6e:	68f8      	ldr	r0, [r7, #12]
 801ea70:	f7fc fe9e 	bl	801b7b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801ea74:	68fb      	ldr	r3, [r7, #12]
 801ea76:	2200      	movs	r2, #0
 801ea78:	771a      	strb	r2, [r3, #28]
}
 801ea7a:	bf00      	nop
 801ea7c:	3710      	adds	r7, #16
 801ea7e:	46bd      	mov	sp, r7
 801ea80:	bd80      	pop	{r7, pc}

0801ea82 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 801ea82:	b580      	push	{r7, lr}
 801ea84:	b084      	sub	sp, #16
 801ea86:	af00      	add	r7, sp, #0
 801ea88:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 801ea8a:	687b      	ldr	r3, [r7, #4]
 801ea8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801ea8e:	60fb      	str	r3, [r7, #12]

  htim->State = HAL_TIM_STATE_READY;
 801ea90:	68fb      	ldr	r3, [r7, #12]
 801ea92:	2201      	movs	r2, #1
 801ea94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 801ea98:	68fb      	ldr	r3, [r7, #12]
 801ea9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ea9c:	687a      	ldr	r2, [r7, #4]
 801ea9e:	429a      	cmp	r2, r3
 801eaa0:	d103      	bne.n	801eaaa <TIM_DMADelayPulseHalfCplt+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 801eaa2:	68fb      	ldr	r3, [r7, #12]
 801eaa4:	2201      	movs	r2, #1
 801eaa6:	771a      	strb	r2, [r3, #28]
 801eaa8:	e019      	b.n	801eade <TIM_DMADelayPulseHalfCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 801eaaa:	68fb      	ldr	r3, [r7, #12]
 801eaac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801eaae:	687a      	ldr	r2, [r7, #4]
 801eab0:	429a      	cmp	r2, r3
 801eab2:	d103      	bne.n	801eabc <TIM_DMADelayPulseHalfCplt+0x3a>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 801eab4:	68fb      	ldr	r3, [r7, #12]
 801eab6:	2202      	movs	r2, #2
 801eab8:	771a      	strb	r2, [r3, #28]
 801eaba:	e010      	b.n	801eade <TIM_DMADelayPulseHalfCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 801eabc:	68fb      	ldr	r3, [r7, #12]
 801eabe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801eac0:	687a      	ldr	r2, [r7, #4]
 801eac2:	429a      	cmp	r2, r3
 801eac4:	d103      	bne.n	801eace <TIM_DMADelayPulseHalfCplt+0x4c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 801eac6:	68fb      	ldr	r3, [r7, #12]
 801eac8:	2204      	movs	r2, #4
 801eaca:	771a      	strb	r2, [r3, #28]
 801eacc:	e007      	b.n	801eade <TIM_DMADelayPulseHalfCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 801eace:	68fb      	ldr	r3, [r7, #12]
 801ead0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801ead2:	687a      	ldr	r2, [r7, #4]
 801ead4:	429a      	cmp	r2, r3
 801ead6:	d102      	bne.n	801eade <TIM_DMADelayPulseHalfCplt+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 801ead8:	68fb      	ldr	r3, [r7, #12]
 801eada:	2208      	movs	r2, #8
 801eadc:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 801eade:	68f8      	ldr	r0, [r7, #12]
 801eae0:	f7ff ff67 	bl	801e9b2 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801eae4:	68fb      	ldr	r3, [r7, #12]
 801eae6:	2200      	movs	r2, #0
 801eae8:	771a      	strb	r2, [r3, #28]
}
 801eaea:	bf00      	nop
 801eaec:	3710      	adds	r7, #16
 801eaee:	46bd      	mov	sp, r7
 801eaf0:	bd80      	pop	{r7, pc}
	...

0801eaf4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 801eaf4:	b480      	push	{r7}
 801eaf6:	b085      	sub	sp, #20
 801eaf8:	af00      	add	r7, sp, #0
 801eafa:	6078      	str	r0, [r7, #4]
 801eafc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 801eafe:	687b      	ldr	r3, [r7, #4]
 801eb00:	681b      	ldr	r3, [r3, #0]
 801eb02:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 801eb04:	687b      	ldr	r3, [r7, #4]
 801eb06:	4a34      	ldr	r2, [pc, #208]	; (801ebd8 <TIM_Base_SetConfig+0xe4>)
 801eb08:	4293      	cmp	r3, r2
 801eb0a:	d00f      	beq.n	801eb2c <TIM_Base_SetConfig+0x38>
 801eb0c:	687b      	ldr	r3, [r7, #4]
 801eb0e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801eb12:	d00b      	beq.n	801eb2c <TIM_Base_SetConfig+0x38>
 801eb14:	687b      	ldr	r3, [r7, #4]
 801eb16:	4a31      	ldr	r2, [pc, #196]	; (801ebdc <TIM_Base_SetConfig+0xe8>)
 801eb18:	4293      	cmp	r3, r2
 801eb1a:	d007      	beq.n	801eb2c <TIM_Base_SetConfig+0x38>
 801eb1c:	687b      	ldr	r3, [r7, #4]
 801eb1e:	4a30      	ldr	r2, [pc, #192]	; (801ebe0 <TIM_Base_SetConfig+0xec>)
 801eb20:	4293      	cmp	r3, r2
 801eb22:	d003      	beq.n	801eb2c <TIM_Base_SetConfig+0x38>
 801eb24:	687b      	ldr	r3, [r7, #4]
 801eb26:	4a2f      	ldr	r2, [pc, #188]	; (801ebe4 <TIM_Base_SetConfig+0xf0>)
 801eb28:	4293      	cmp	r3, r2
 801eb2a:	d108      	bne.n	801eb3e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 801eb2c:	68fb      	ldr	r3, [r7, #12]
 801eb2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801eb32:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 801eb34:	683b      	ldr	r3, [r7, #0]
 801eb36:	685b      	ldr	r3, [r3, #4]
 801eb38:	68fa      	ldr	r2, [r7, #12]
 801eb3a:	4313      	orrs	r3, r2
 801eb3c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 801eb3e:	687b      	ldr	r3, [r7, #4]
 801eb40:	4a25      	ldr	r2, [pc, #148]	; (801ebd8 <TIM_Base_SetConfig+0xe4>)
 801eb42:	4293      	cmp	r3, r2
 801eb44:	d01b      	beq.n	801eb7e <TIM_Base_SetConfig+0x8a>
 801eb46:	687b      	ldr	r3, [r7, #4]
 801eb48:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801eb4c:	d017      	beq.n	801eb7e <TIM_Base_SetConfig+0x8a>
 801eb4e:	687b      	ldr	r3, [r7, #4]
 801eb50:	4a22      	ldr	r2, [pc, #136]	; (801ebdc <TIM_Base_SetConfig+0xe8>)
 801eb52:	4293      	cmp	r3, r2
 801eb54:	d013      	beq.n	801eb7e <TIM_Base_SetConfig+0x8a>
 801eb56:	687b      	ldr	r3, [r7, #4]
 801eb58:	4a21      	ldr	r2, [pc, #132]	; (801ebe0 <TIM_Base_SetConfig+0xec>)
 801eb5a:	4293      	cmp	r3, r2
 801eb5c:	d00f      	beq.n	801eb7e <TIM_Base_SetConfig+0x8a>
 801eb5e:	687b      	ldr	r3, [r7, #4]
 801eb60:	4a20      	ldr	r2, [pc, #128]	; (801ebe4 <TIM_Base_SetConfig+0xf0>)
 801eb62:	4293      	cmp	r3, r2
 801eb64:	d00b      	beq.n	801eb7e <TIM_Base_SetConfig+0x8a>
 801eb66:	687b      	ldr	r3, [r7, #4]
 801eb68:	4a1f      	ldr	r2, [pc, #124]	; (801ebe8 <TIM_Base_SetConfig+0xf4>)
 801eb6a:	4293      	cmp	r3, r2
 801eb6c:	d007      	beq.n	801eb7e <TIM_Base_SetConfig+0x8a>
 801eb6e:	687b      	ldr	r3, [r7, #4]
 801eb70:	4a1e      	ldr	r2, [pc, #120]	; (801ebec <TIM_Base_SetConfig+0xf8>)
 801eb72:	4293      	cmp	r3, r2
 801eb74:	d003      	beq.n	801eb7e <TIM_Base_SetConfig+0x8a>
 801eb76:	687b      	ldr	r3, [r7, #4]
 801eb78:	4a1d      	ldr	r2, [pc, #116]	; (801ebf0 <TIM_Base_SetConfig+0xfc>)
 801eb7a:	4293      	cmp	r3, r2
 801eb7c:	d108      	bne.n	801eb90 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 801eb7e:	68fb      	ldr	r3, [r7, #12]
 801eb80:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801eb84:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 801eb86:	683b      	ldr	r3, [r7, #0]
 801eb88:	68db      	ldr	r3, [r3, #12]
 801eb8a:	68fa      	ldr	r2, [r7, #12]
 801eb8c:	4313      	orrs	r3, r2
 801eb8e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 801eb90:	68fb      	ldr	r3, [r7, #12]
 801eb92:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 801eb96:	683b      	ldr	r3, [r7, #0]
 801eb98:	695b      	ldr	r3, [r3, #20]
 801eb9a:	4313      	orrs	r3, r2
 801eb9c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 801eb9e:	687b      	ldr	r3, [r7, #4]
 801eba0:	68fa      	ldr	r2, [r7, #12]
 801eba2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 801eba4:	683b      	ldr	r3, [r7, #0]
 801eba6:	689a      	ldr	r2, [r3, #8]
 801eba8:	687b      	ldr	r3, [r7, #4]
 801ebaa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 801ebac:	683b      	ldr	r3, [r7, #0]
 801ebae:	681a      	ldr	r2, [r3, #0]
 801ebb0:	687b      	ldr	r3, [r7, #4]
 801ebb2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 801ebb4:	687b      	ldr	r3, [r7, #4]
 801ebb6:	4a08      	ldr	r2, [pc, #32]	; (801ebd8 <TIM_Base_SetConfig+0xe4>)
 801ebb8:	4293      	cmp	r3, r2
 801ebba:	d103      	bne.n	801ebc4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 801ebbc:	683b      	ldr	r3, [r7, #0]
 801ebbe:	691a      	ldr	r2, [r3, #16]
 801ebc0:	687b      	ldr	r3, [r7, #4]
 801ebc2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 801ebc4:	687b      	ldr	r3, [r7, #4]
 801ebc6:	2201      	movs	r2, #1
 801ebc8:	615a      	str	r2, [r3, #20]
}
 801ebca:	bf00      	nop
 801ebcc:	3714      	adds	r7, #20
 801ebce:	46bd      	mov	sp, r7
 801ebd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ebd4:	4770      	bx	lr
 801ebd6:	bf00      	nop
 801ebd8:	40010000 	.word	0x40010000
 801ebdc:	40000400 	.word	0x40000400
 801ebe0:	40000800 	.word	0x40000800
 801ebe4:	40000c00 	.word	0x40000c00
 801ebe8:	40014000 	.word	0x40014000
 801ebec:	40014400 	.word	0x40014400
 801ebf0:	40014800 	.word	0x40014800

0801ebf4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 801ebf4:	b480      	push	{r7}
 801ebf6:	b087      	sub	sp, #28
 801ebf8:	af00      	add	r7, sp, #0
 801ebfa:	6078      	str	r0, [r7, #4]
 801ebfc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 801ebfe:	687b      	ldr	r3, [r7, #4]
 801ec00:	6a1b      	ldr	r3, [r3, #32]
 801ec02:	f023 0201 	bic.w	r2, r3, #1
 801ec06:	687b      	ldr	r3, [r7, #4]
 801ec08:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801ec0a:	687b      	ldr	r3, [r7, #4]
 801ec0c:	6a1b      	ldr	r3, [r3, #32]
 801ec0e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801ec10:	687b      	ldr	r3, [r7, #4]
 801ec12:	685b      	ldr	r3, [r3, #4]
 801ec14:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 801ec16:	687b      	ldr	r3, [r7, #4]
 801ec18:	699b      	ldr	r3, [r3, #24]
 801ec1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 801ec1c:	68fb      	ldr	r3, [r7, #12]
 801ec1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801ec22:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 801ec24:	68fb      	ldr	r3, [r7, #12]
 801ec26:	f023 0303 	bic.w	r3, r3, #3
 801ec2a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 801ec2c:	683b      	ldr	r3, [r7, #0]
 801ec2e:	681b      	ldr	r3, [r3, #0]
 801ec30:	68fa      	ldr	r2, [r7, #12]
 801ec32:	4313      	orrs	r3, r2
 801ec34:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 801ec36:	697b      	ldr	r3, [r7, #20]
 801ec38:	f023 0302 	bic.w	r3, r3, #2
 801ec3c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 801ec3e:	683b      	ldr	r3, [r7, #0]
 801ec40:	689b      	ldr	r3, [r3, #8]
 801ec42:	697a      	ldr	r2, [r7, #20]
 801ec44:	4313      	orrs	r3, r2
 801ec46:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 801ec48:	687b      	ldr	r3, [r7, #4]
 801ec4a:	4a1c      	ldr	r2, [pc, #112]	; (801ecbc <TIM_OC1_SetConfig+0xc8>)
 801ec4c:	4293      	cmp	r3, r2
 801ec4e:	d10c      	bne.n	801ec6a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 801ec50:	697b      	ldr	r3, [r7, #20]
 801ec52:	f023 0308 	bic.w	r3, r3, #8
 801ec56:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 801ec58:	683b      	ldr	r3, [r7, #0]
 801ec5a:	68db      	ldr	r3, [r3, #12]
 801ec5c:	697a      	ldr	r2, [r7, #20]
 801ec5e:	4313      	orrs	r3, r2
 801ec60:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 801ec62:	697b      	ldr	r3, [r7, #20]
 801ec64:	f023 0304 	bic.w	r3, r3, #4
 801ec68:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801ec6a:	687b      	ldr	r3, [r7, #4]
 801ec6c:	4a13      	ldr	r2, [pc, #76]	; (801ecbc <TIM_OC1_SetConfig+0xc8>)
 801ec6e:	4293      	cmp	r3, r2
 801ec70:	d111      	bne.n	801ec96 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 801ec72:	693b      	ldr	r3, [r7, #16]
 801ec74:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801ec78:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 801ec7a:	693b      	ldr	r3, [r7, #16]
 801ec7c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 801ec80:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 801ec82:	683b      	ldr	r3, [r7, #0]
 801ec84:	695b      	ldr	r3, [r3, #20]
 801ec86:	693a      	ldr	r2, [r7, #16]
 801ec88:	4313      	orrs	r3, r2
 801ec8a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 801ec8c:	683b      	ldr	r3, [r7, #0]
 801ec8e:	699b      	ldr	r3, [r3, #24]
 801ec90:	693a      	ldr	r2, [r7, #16]
 801ec92:	4313      	orrs	r3, r2
 801ec94:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801ec96:	687b      	ldr	r3, [r7, #4]
 801ec98:	693a      	ldr	r2, [r7, #16]
 801ec9a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 801ec9c:	687b      	ldr	r3, [r7, #4]
 801ec9e:	68fa      	ldr	r2, [r7, #12]
 801eca0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 801eca2:	683b      	ldr	r3, [r7, #0]
 801eca4:	685a      	ldr	r2, [r3, #4]
 801eca6:	687b      	ldr	r3, [r7, #4]
 801eca8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801ecaa:	687b      	ldr	r3, [r7, #4]
 801ecac:	697a      	ldr	r2, [r7, #20]
 801ecae:	621a      	str	r2, [r3, #32]
}
 801ecb0:	bf00      	nop
 801ecb2:	371c      	adds	r7, #28
 801ecb4:	46bd      	mov	sp, r7
 801ecb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ecba:	4770      	bx	lr
 801ecbc:	40010000 	.word	0x40010000

0801ecc0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 801ecc0:	b480      	push	{r7}
 801ecc2:	b087      	sub	sp, #28
 801ecc4:	af00      	add	r7, sp, #0
 801ecc6:	6078      	str	r0, [r7, #4]
 801ecc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 801ecca:	687b      	ldr	r3, [r7, #4]
 801eccc:	6a1b      	ldr	r3, [r3, #32]
 801ecce:	f023 0210 	bic.w	r2, r3, #16
 801ecd2:	687b      	ldr	r3, [r7, #4]
 801ecd4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801ecd6:	687b      	ldr	r3, [r7, #4]
 801ecd8:	6a1b      	ldr	r3, [r3, #32]
 801ecda:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801ecdc:	687b      	ldr	r3, [r7, #4]
 801ecde:	685b      	ldr	r3, [r3, #4]
 801ece0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 801ece2:	687b      	ldr	r3, [r7, #4]
 801ece4:	699b      	ldr	r3, [r3, #24]
 801ece6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 801ece8:	68fb      	ldr	r3, [r7, #12]
 801ecea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801ecee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 801ecf0:	68fb      	ldr	r3, [r7, #12]
 801ecf2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801ecf6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 801ecf8:	683b      	ldr	r3, [r7, #0]
 801ecfa:	681b      	ldr	r3, [r3, #0]
 801ecfc:	021b      	lsls	r3, r3, #8
 801ecfe:	68fa      	ldr	r2, [r7, #12]
 801ed00:	4313      	orrs	r3, r2
 801ed02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 801ed04:	697b      	ldr	r3, [r7, #20]
 801ed06:	f023 0320 	bic.w	r3, r3, #32
 801ed0a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 801ed0c:	683b      	ldr	r3, [r7, #0]
 801ed0e:	689b      	ldr	r3, [r3, #8]
 801ed10:	011b      	lsls	r3, r3, #4
 801ed12:	697a      	ldr	r2, [r7, #20]
 801ed14:	4313      	orrs	r3, r2
 801ed16:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 801ed18:	687b      	ldr	r3, [r7, #4]
 801ed1a:	4a1e      	ldr	r2, [pc, #120]	; (801ed94 <TIM_OC2_SetConfig+0xd4>)
 801ed1c:	4293      	cmp	r3, r2
 801ed1e:	d10d      	bne.n	801ed3c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 801ed20:	697b      	ldr	r3, [r7, #20]
 801ed22:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801ed26:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 801ed28:	683b      	ldr	r3, [r7, #0]
 801ed2a:	68db      	ldr	r3, [r3, #12]
 801ed2c:	011b      	lsls	r3, r3, #4
 801ed2e:	697a      	ldr	r2, [r7, #20]
 801ed30:	4313      	orrs	r3, r2
 801ed32:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 801ed34:	697b      	ldr	r3, [r7, #20]
 801ed36:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801ed3a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801ed3c:	687b      	ldr	r3, [r7, #4]
 801ed3e:	4a15      	ldr	r2, [pc, #84]	; (801ed94 <TIM_OC2_SetConfig+0xd4>)
 801ed40:	4293      	cmp	r3, r2
 801ed42:	d113      	bne.n	801ed6c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 801ed44:	693b      	ldr	r3, [r7, #16]
 801ed46:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 801ed4a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 801ed4c:	693b      	ldr	r3, [r7, #16]
 801ed4e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801ed52:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 801ed54:	683b      	ldr	r3, [r7, #0]
 801ed56:	695b      	ldr	r3, [r3, #20]
 801ed58:	009b      	lsls	r3, r3, #2
 801ed5a:	693a      	ldr	r2, [r7, #16]
 801ed5c:	4313      	orrs	r3, r2
 801ed5e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 801ed60:	683b      	ldr	r3, [r7, #0]
 801ed62:	699b      	ldr	r3, [r3, #24]
 801ed64:	009b      	lsls	r3, r3, #2
 801ed66:	693a      	ldr	r2, [r7, #16]
 801ed68:	4313      	orrs	r3, r2
 801ed6a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801ed6c:	687b      	ldr	r3, [r7, #4]
 801ed6e:	693a      	ldr	r2, [r7, #16]
 801ed70:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 801ed72:	687b      	ldr	r3, [r7, #4]
 801ed74:	68fa      	ldr	r2, [r7, #12]
 801ed76:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 801ed78:	683b      	ldr	r3, [r7, #0]
 801ed7a:	685a      	ldr	r2, [r3, #4]
 801ed7c:	687b      	ldr	r3, [r7, #4]
 801ed7e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801ed80:	687b      	ldr	r3, [r7, #4]
 801ed82:	697a      	ldr	r2, [r7, #20]
 801ed84:	621a      	str	r2, [r3, #32]
}
 801ed86:	bf00      	nop
 801ed88:	371c      	adds	r7, #28
 801ed8a:	46bd      	mov	sp, r7
 801ed8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ed90:	4770      	bx	lr
 801ed92:	bf00      	nop
 801ed94:	40010000 	.word	0x40010000

0801ed98 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 801ed98:	b480      	push	{r7}
 801ed9a:	b087      	sub	sp, #28
 801ed9c:	af00      	add	r7, sp, #0
 801ed9e:	6078      	str	r0, [r7, #4]
 801eda0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 801eda2:	687b      	ldr	r3, [r7, #4]
 801eda4:	6a1b      	ldr	r3, [r3, #32]
 801eda6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 801edaa:	687b      	ldr	r3, [r7, #4]
 801edac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801edae:	687b      	ldr	r3, [r7, #4]
 801edb0:	6a1b      	ldr	r3, [r3, #32]
 801edb2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801edb4:	687b      	ldr	r3, [r7, #4]
 801edb6:	685b      	ldr	r3, [r3, #4]
 801edb8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 801edba:	687b      	ldr	r3, [r7, #4]
 801edbc:	69db      	ldr	r3, [r3, #28]
 801edbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 801edc0:	68fb      	ldr	r3, [r7, #12]
 801edc2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801edc6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 801edc8:	68fb      	ldr	r3, [r7, #12]
 801edca:	f023 0303 	bic.w	r3, r3, #3
 801edce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 801edd0:	683b      	ldr	r3, [r7, #0]
 801edd2:	681b      	ldr	r3, [r3, #0]
 801edd4:	68fa      	ldr	r2, [r7, #12]
 801edd6:	4313      	orrs	r3, r2
 801edd8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 801edda:	697b      	ldr	r3, [r7, #20]
 801eddc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 801ede0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 801ede2:	683b      	ldr	r3, [r7, #0]
 801ede4:	689b      	ldr	r3, [r3, #8]
 801ede6:	021b      	lsls	r3, r3, #8
 801ede8:	697a      	ldr	r2, [r7, #20]
 801edea:	4313      	orrs	r3, r2
 801edec:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 801edee:	687b      	ldr	r3, [r7, #4]
 801edf0:	4a1d      	ldr	r2, [pc, #116]	; (801ee68 <TIM_OC3_SetConfig+0xd0>)
 801edf2:	4293      	cmp	r3, r2
 801edf4:	d10d      	bne.n	801ee12 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 801edf6:	697b      	ldr	r3, [r7, #20]
 801edf8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801edfc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 801edfe:	683b      	ldr	r3, [r7, #0]
 801ee00:	68db      	ldr	r3, [r3, #12]
 801ee02:	021b      	lsls	r3, r3, #8
 801ee04:	697a      	ldr	r2, [r7, #20]
 801ee06:	4313      	orrs	r3, r2
 801ee08:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 801ee0a:	697b      	ldr	r3, [r7, #20]
 801ee0c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 801ee10:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801ee12:	687b      	ldr	r3, [r7, #4]
 801ee14:	4a14      	ldr	r2, [pc, #80]	; (801ee68 <TIM_OC3_SetConfig+0xd0>)
 801ee16:	4293      	cmp	r3, r2
 801ee18:	d113      	bne.n	801ee42 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 801ee1a:	693b      	ldr	r3, [r7, #16]
 801ee1c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801ee20:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 801ee22:	693b      	ldr	r3, [r7, #16]
 801ee24:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 801ee28:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 801ee2a:	683b      	ldr	r3, [r7, #0]
 801ee2c:	695b      	ldr	r3, [r3, #20]
 801ee2e:	011b      	lsls	r3, r3, #4
 801ee30:	693a      	ldr	r2, [r7, #16]
 801ee32:	4313      	orrs	r3, r2
 801ee34:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 801ee36:	683b      	ldr	r3, [r7, #0]
 801ee38:	699b      	ldr	r3, [r3, #24]
 801ee3a:	011b      	lsls	r3, r3, #4
 801ee3c:	693a      	ldr	r2, [r7, #16]
 801ee3e:	4313      	orrs	r3, r2
 801ee40:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801ee42:	687b      	ldr	r3, [r7, #4]
 801ee44:	693a      	ldr	r2, [r7, #16]
 801ee46:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 801ee48:	687b      	ldr	r3, [r7, #4]
 801ee4a:	68fa      	ldr	r2, [r7, #12]
 801ee4c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 801ee4e:	683b      	ldr	r3, [r7, #0]
 801ee50:	685a      	ldr	r2, [r3, #4]
 801ee52:	687b      	ldr	r3, [r7, #4]
 801ee54:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801ee56:	687b      	ldr	r3, [r7, #4]
 801ee58:	697a      	ldr	r2, [r7, #20]
 801ee5a:	621a      	str	r2, [r3, #32]
}
 801ee5c:	bf00      	nop
 801ee5e:	371c      	adds	r7, #28
 801ee60:	46bd      	mov	sp, r7
 801ee62:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ee66:	4770      	bx	lr
 801ee68:	40010000 	.word	0x40010000

0801ee6c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 801ee6c:	b480      	push	{r7}
 801ee6e:	b087      	sub	sp, #28
 801ee70:	af00      	add	r7, sp, #0
 801ee72:	6078      	str	r0, [r7, #4]
 801ee74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 801ee76:	687b      	ldr	r3, [r7, #4]
 801ee78:	6a1b      	ldr	r3, [r3, #32]
 801ee7a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 801ee7e:	687b      	ldr	r3, [r7, #4]
 801ee80:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801ee82:	687b      	ldr	r3, [r7, #4]
 801ee84:	6a1b      	ldr	r3, [r3, #32]
 801ee86:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801ee88:	687b      	ldr	r3, [r7, #4]
 801ee8a:	685b      	ldr	r3, [r3, #4]
 801ee8c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 801ee8e:	687b      	ldr	r3, [r7, #4]
 801ee90:	69db      	ldr	r3, [r3, #28]
 801ee92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 801ee94:	68fb      	ldr	r3, [r7, #12]
 801ee96:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801ee9a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 801ee9c:	68fb      	ldr	r3, [r7, #12]
 801ee9e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801eea2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 801eea4:	683b      	ldr	r3, [r7, #0]
 801eea6:	681b      	ldr	r3, [r3, #0]
 801eea8:	021b      	lsls	r3, r3, #8
 801eeaa:	68fa      	ldr	r2, [r7, #12]
 801eeac:	4313      	orrs	r3, r2
 801eeae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 801eeb0:	693b      	ldr	r3, [r7, #16]
 801eeb2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 801eeb6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 801eeb8:	683b      	ldr	r3, [r7, #0]
 801eeba:	689b      	ldr	r3, [r3, #8]
 801eebc:	031b      	lsls	r3, r3, #12
 801eebe:	693a      	ldr	r2, [r7, #16]
 801eec0:	4313      	orrs	r3, r2
 801eec2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801eec4:	687b      	ldr	r3, [r7, #4]
 801eec6:	4a10      	ldr	r2, [pc, #64]	; (801ef08 <TIM_OC4_SetConfig+0x9c>)
 801eec8:	4293      	cmp	r3, r2
 801eeca:	d109      	bne.n	801eee0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 801eecc:	697b      	ldr	r3, [r7, #20]
 801eece:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 801eed2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 801eed4:	683b      	ldr	r3, [r7, #0]
 801eed6:	695b      	ldr	r3, [r3, #20]
 801eed8:	019b      	lsls	r3, r3, #6
 801eeda:	697a      	ldr	r2, [r7, #20]
 801eedc:	4313      	orrs	r3, r2
 801eede:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801eee0:	687b      	ldr	r3, [r7, #4]
 801eee2:	697a      	ldr	r2, [r7, #20]
 801eee4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 801eee6:	687b      	ldr	r3, [r7, #4]
 801eee8:	68fa      	ldr	r2, [r7, #12]
 801eeea:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 801eeec:	683b      	ldr	r3, [r7, #0]
 801eeee:	685a      	ldr	r2, [r3, #4]
 801eef0:	687b      	ldr	r3, [r7, #4]
 801eef2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801eef4:	687b      	ldr	r3, [r7, #4]
 801eef6:	693a      	ldr	r2, [r7, #16]
 801eef8:	621a      	str	r2, [r3, #32]
}
 801eefa:	bf00      	nop
 801eefc:	371c      	adds	r7, #28
 801eefe:	46bd      	mov	sp, r7
 801ef00:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ef04:	4770      	bx	lr
 801ef06:	bf00      	nop
 801ef08:	40010000 	.word	0x40010000

0801ef0c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 801ef0c:	b480      	push	{r7}
 801ef0e:	b087      	sub	sp, #28
 801ef10:	af00      	add	r7, sp, #0
 801ef12:	60f8      	str	r0, [r7, #12]
 801ef14:	60b9      	str	r1, [r7, #8]
 801ef16:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 801ef18:	68fb      	ldr	r3, [r7, #12]
 801ef1a:	6a1b      	ldr	r3, [r3, #32]
 801ef1c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 801ef1e:	68fb      	ldr	r3, [r7, #12]
 801ef20:	6a1b      	ldr	r3, [r3, #32]
 801ef22:	f023 0201 	bic.w	r2, r3, #1
 801ef26:	68fb      	ldr	r3, [r7, #12]
 801ef28:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 801ef2a:	68fb      	ldr	r3, [r7, #12]
 801ef2c:	699b      	ldr	r3, [r3, #24]
 801ef2e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 801ef30:	693b      	ldr	r3, [r7, #16]
 801ef32:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 801ef36:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 801ef38:	687b      	ldr	r3, [r7, #4]
 801ef3a:	011b      	lsls	r3, r3, #4
 801ef3c:	693a      	ldr	r2, [r7, #16]
 801ef3e:	4313      	orrs	r3, r2
 801ef40:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 801ef42:	697b      	ldr	r3, [r7, #20]
 801ef44:	f023 030a 	bic.w	r3, r3, #10
 801ef48:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 801ef4a:	697a      	ldr	r2, [r7, #20]
 801ef4c:	68bb      	ldr	r3, [r7, #8]
 801ef4e:	4313      	orrs	r3, r2
 801ef50:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 801ef52:	68fb      	ldr	r3, [r7, #12]
 801ef54:	693a      	ldr	r2, [r7, #16]
 801ef56:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 801ef58:	68fb      	ldr	r3, [r7, #12]
 801ef5a:	697a      	ldr	r2, [r7, #20]
 801ef5c:	621a      	str	r2, [r3, #32]
}
 801ef5e:	bf00      	nop
 801ef60:	371c      	adds	r7, #28
 801ef62:	46bd      	mov	sp, r7
 801ef64:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ef68:	4770      	bx	lr

0801ef6a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 801ef6a:	b480      	push	{r7}
 801ef6c:	b087      	sub	sp, #28
 801ef6e:	af00      	add	r7, sp, #0
 801ef70:	60f8      	str	r0, [r7, #12]
 801ef72:	60b9      	str	r1, [r7, #8]
 801ef74:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 801ef76:	68fb      	ldr	r3, [r7, #12]
 801ef78:	6a1b      	ldr	r3, [r3, #32]
 801ef7a:	f023 0210 	bic.w	r2, r3, #16
 801ef7e:	68fb      	ldr	r3, [r7, #12]
 801ef80:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 801ef82:	68fb      	ldr	r3, [r7, #12]
 801ef84:	699b      	ldr	r3, [r3, #24]
 801ef86:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 801ef88:	68fb      	ldr	r3, [r7, #12]
 801ef8a:	6a1b      	ldr	r3, [r3, #32]
 801ef8c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 801ef8e:	697b      	ldr	r3, [r7, #20]
 801ef90:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 801ef94:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 801ef96:	687b      	ldr	r3, [r7, #4]
 801ef98:	031b      	lsls	r3, r3, #12
 801ef9a:	697a      	ldr	r2, [r7, #20]
 801ef9c:	4313      	orrs	r3, r2
 801ef9e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 801efa0:	693b      	ldr	r3, [r7, #16]
 801efa2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 801efa6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 801efa8:	68bb      	ldr	r3, [r7, #8]
 801efaa:	011b      	lsls	r3, r3, #4
 801efac:	693a      	ldr	r2, [r7, #16]
 801efae:	4313      	orrs	r3, r2
 801efb0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 801efb2:	68fb      	ldr	r3, [r7, #12]
 801efb4:	697a      	ldr	r2, [r7, #20]
 801efb6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 801efb8:	68fb      	ldr	r3, [r7, #12]
 801efba:	693a      	ldr	r2, [r7, #16]
 801efbc:	621a      	str	r2, [r3, #32]
}
 801efbe:	bf00      	nop
 801efc0:	371c      	adds	r7, #28
 801efc2:	46bd      	mov	sp, r7
 801efc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801efc8:	4770      	bx	lr

0801efca <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 801efca:	b480      	push	{r7}
 801efcc:	b085      	sub	sp, #20
 801efce:	af00      	add	r7, sp, #0
 801efd0:	6078      	str	r0, [r7, #4]
 801efd2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 801efd4:	687b      	ldr	r3, [r7, #4]
 801efd6:	689b      	ldr	r3, [r3, #8]
 801efd8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 801efda:	68fb      	ldr	r3, [r7, #12]
 801efdc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801efe0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 801efe2:	683a      	ldr	r2, [r7, #0]
 801efe4:	68fb      	ldr	r3, [r7, #12]
 801efe6:	4313      	orrs	r3, r2
 801efe8:	f043 0307 	orr.w	r3, r3, #7
 801efec:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 801efee:	687b      	ldr	r3, [r7, #4]
 801eff0:	68fa      	ldr	r2, [r7, #12]
 801eff2:	609a      	str	r2, [r3, #8]
}
 801eff4:	bf00      	nop
 801eff6:	3714      	adds	r7, #20
 801eff8:	46bd      	mov	sp, r7
 801effa:	f85d 7b04 	ldr.w	r7, [sp], #4
 801effe:	4770      	bx	lr

0801f000 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 801f000:	b480      	push	{r7}
 801f002:	b087      	sub	sp, #28
 801f004:	af00      	add	r7, sp, #0
 801f006:	60f8      	str	r0, [r7, #12]
 801f008:	60b9      	str	r1, [r7, #8]
 801f00a:	607a      	str	r2, [r7, #4]
 801f00c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 801f00e:	68fb      	ldr	r3, [r7, #12]
 801f010:	689b      	ldr	r3, [r3, #8]
 801f012:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 801f014:	697b      	ldr	r3, [r7, #20]
 801f016:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 801f01a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 801f01c:	683b      	ldr	r3, [r7, #0]
 801f01e:	021a      	lsls	r2, r3, #8
 801f020:	687b      	ldr	r3, [r7, #4]
 801f022:	431a      	orrs	r2, r3
 801f024:	68bb      	ldr	r3, [r7, #8]
 801f026:	4313      	orrs	r3, r2
 801f028:	697a      	ldr	r2, [r7, #20]
 801f02a:	4313      	orrs	r3, r2
 801f02c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 801f02e:	68fb      	ldr	r3, [r7, #12]
 801f030:	697a      	ldr	r2, [r7, #20]
 801f032:	609a      	str	r2, [r3, #8]
}
 801f034:	bf00      	nop
 801f036:	371c      	adds	r7, #28
 801f038:	46bd      	mov	sp, r7
 801f03a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f03e:	4770      	bx	lr

0801f040 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 801f040:	b480      	push	{r7}
 801f042:	b087      	sub	sp, #28
 801f044:	af00      	add	r7, sp, #0
 801f046:	60f8      	str	r0, [r7, #12]
 801f048:	60b9      	str	r1, [r7, #8]
 801f04a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 801f04c:	68bb      	ldr	r3, [r7, #8]
 801f04e:	f003 031f 	and.w	r3, r3, #31
 801f052:	2201      	movs	r2, #1
 801f054:	fa02 f303 	lsl.w	r3, r2, r3
 801f058:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 801f05a:	68fb      	ldr	r3, [r7, #12]
 801f05c:	6a1a      	ldr	r2, [r3, #32]
 801f05e:	697b      	ldr	r3, [r7, #20]
 801f060:	43db      	mvns	r3, r3
 801f062:	401a      	ands	r2, r3
 801f064:	68fb      	ldr	r3, [r7, #12]
 801f066:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 801f068:	68fb      	ldr	r3, [r7, #12]
 801f06a:	6a1a      	ldr	r2, [r3, #32]
 801f06c:	68bb      	ldr	r3, [r7, #8]
 801f06e:	f003 031f 	and.w	r3, r3, #31
 801f072:	6879      	ldr	r1, [r7, #4]
 801f074:	fa01 f303 	lsl.w	r3, r1, r3
 801f078:	431a      	orrs	r2, r3
 801f07a:	68fb      	ldr	r3, [r7, #12]
 801f07c:	621a      	str	r2, [r3, #32]
}
 801f07e:	bf00      	nop
 801f080:	371c      	adds	r7, #28
 801f082:	46bd      	mov	sp, r7
 801f084:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f088:	4770      	bx	lr
	...

0801f08c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 801f08c:	b480      	push	{r7}
 801f08e:	b085      	sub	sp, #20
 801f090:	af00      	add	r7, sp, #0
 801f092:	6078      	str	r0, [r7, #4]
 801f094:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 801f096:	687b      	ldr	r3, [r7, #4]
 801f098:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801f09c:	2b01      	cmp	r3, #1
 801f09e:	d101      	bne.n	801f0a4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 801f0a0:	2302      	movs	r3, #2
 801f0a2:	e050      	b.n	801f146 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 801f0a4:	687b      	ldr	r3, [r7, #4]
 801f0a6:	2201      	movs	r2, #1
 801f0a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 801f0ac:	687b      	ldr	r3, [r7, #4]
 801f0ae:	2202      	movs	r2, #2
 801f0b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 801f0b4:	687b      	ldr	r3, [r7, #4]
 801f0b6:	681b      	ldr	r3, [r3, #0]
 801f0b8:	685b      	ldr	r3, [r3, #4]
 801f0ba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 801f0bc:	687b      	ldr	r3, [r7, #4]
 801f0be:	681b      	ldr	r3, [r3, #0]
 801f0c0:	689b      	ldr	r3, [r3, #8]
 801f0c2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 801f0c4:	68fb      	ldr	r3, [r7, #12]
 801f0c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801f0ca:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 801f0cc:	683b      	ldr	r3, [r7, #0]
 801f0ce:	681b      	ldr	r3, [r3, #0]
 801f0d0:	68fa      	ldr	r2, [r7, #12]
 801f0d2:	4313      	orrs	r3, r2
 801f0d4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 801f0d6:	687b      	ldr	r3, [r7, #4]
 801f0d8:	681b      	ldr	r3, [r3, #0]
 801f0da:	68fa      	ldr	r2, [r7, #12]
 801f0dc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801f0de:	687b      	ldr	r3, [r7, #4]
 801f0e0:	681b      	ldr	r3, [r3, #0]
 801f0e2:	4a1c      	ldr	r2, [pc, #112]	; (801f154 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 801f0e4:	4293      	cmp	r3, r2
 801f0e6:	d018      	beq.n	801f11a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 801f0e8:	687b      	ldr	r3, [r7, #4]
 801f0ea:	681b      	ldr	r3, [r3, #0]
 801f0ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801f0f0:	d013      	beq.n	801f11a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 801f0f2:	687b      	ldr	r3, [r7, #4]
 801f0f4:	681b      	ldr	r3, [r3, #0]
 801f0f6:	4a18      	ldr	r2, [pc, #96]	; (801f158 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 801f0f8:	4293      	cmp	r3, r2
 801f0fa:	d00e      	beq.n	801f11a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 801f0fc:	687b      	ldr	r3, [r7, #4]
 801f0fe:	681b      	ldr	r3, [r3, #0]
 801f100:	4a16      	ldr	r2, [pc, #88]	; (801f15c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 801f102:	4293      	cmp	r3, r2
 801f104:	d009      	beq.n	801f11a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 801f106:	687b      	ldr	r3, [r7, #4]
 801f108:	681b      	ldr	r3, [r3, #0]
 801f10a:	4a15      	ldr	r2, [pc, #84]	; (801f160 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 801f10c:	4293      	cmp	r3, r2
 801f10e:	d004      	beq.n	801f11a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 801f110:	687b      	ldr	r3, [r7, #4]
 801f112:	681b      	ldr	r3, [r3, #0]
 801f114:	4a13      	ldr	r2, [pc, #76]	; (801f164 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 801f116:	4293      	cmp	r3, r2
 801f118:	d10c      	bne.n	801f134 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 801f11a:	68bb      	ldr	r3, [r7, #8]
 801f11c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801f120:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 801f122:	683b      	ldr	r3, [r7, #0]
 801f124:	685b      	ldr	r3, [r3, #4]
 801f126:	68ba      	ldr	r2, [r7, #8]
 801f128:	4313      	orrs	r3, r2
 801f12a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 801f12c:	687b      	ldr	r3, [r7, #4]
 801f12e:	681b      	ldr	r3, [r3, #0]
 801f130:	68ba      	ldr	r2, [r7, #8]
 801f132:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 801f134:	687b      	ldr	r3, [r7, #4]
 801f136:	2201      	movs	r2, #1
 801f138:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 801f13c:	687b      	ldr	r3, [r7, #4]
 801f13e:	2200      	movs	r2, #0
 801f140:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 801f144:	2300      	movs	r3, #0
}
 801f146:	4618      	mov	r0, r3
 801f148:	3714      	adds	r7, #20
 801f14a:	46bd      	mov	sp, r7
 801f14c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f150:	4770      	bx	lr
 801f152:	bf00      	nop
 801f154:	40010000 	.word	0x40010000
 801f158:	40000400 	.word	0x40000400
 801f15c:	40000800 	.word	0x40000800
 801f160:	40000c00 	.word	0x40000c00
 801f164:	40014000 	.word	0x40014000

0801f168 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 801f168:	b480      	push	{r7}
 801f16a:	b083      	sub	sp, #12
 801f16c:	af00      	add	r7, sp, #0
 801f16e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 801f170:	bf00      	nop
 801f172:	370c      	adds	r7, #12
 801f174:	46bd      	mov	sp, r7
 801f176:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f17a:	4770      	bx	lr

0801f17c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 801f17c:	b480      	push	{r7}
 801f17e:	b083      	sub	sp, #12
 801f180:	af00      	add	r7, sp, #0
 801f182:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 801f184:	bf00      	nop
 801f186:	370c      	adds	r7, #12
 801f188:	46bd      	mov	sp, r7
 801f18a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f18e:	4770      	bx	lr

0801f190 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 801f190:	b580      	push	{r7, lr}
 801f192:	b082      	sub	sp, #8
 801f194:	af00      	add	r7, sp, #0
 801f196:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 801f198:	687b      	ldr	r3, [r7, #4]
 801f19a:	2b00      	cmp	r3, #0
 801f19c:	d101      	bne.n	801f1a2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 801f19e:	2301      	movs	r3, #1
 801f1a0:	e03f      	b.n	801f222 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 801f1a2:	687b      	ldr	r3, [r7, #4]
 801f1a4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 801f1a8:	b2db      	uxtb	r3, r3
 801f1aa:	2b00      	cmp	r3, #0
 801f1ac:	d106      	bne.n	801f1bc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 801f1ae:	687b      	ldr	r3, [r7, #4]
 801f1b0:	2200      	movs	r2, #0
 801f1b2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 801f1b6:	6878      	ldr	r0, [r7, #4]
 801f1b8:	f7fc fe08 	bl	801bdcc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 801f1bc:	687b      	ldr	r3, [r7, #4]
 801f1be:	2224      	movs	r2, #36	; 0x24
 801f1c0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 801f1c4:	687b      	ldr	r3, [r7, #4]
 801f1c6:	681b      	ldr	r3, [r3, #0]
 801f1c8:	68da      	ldr	r2, [r3, #12]
 801f1ca:	687b      	ldr	r3, [r7, #4]
 801f1cc:	681b      	ldr	r3, [r3, #0]
 801f1ce:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 801f1d2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 801f1d4:	6878      	ldr	r0, [r7, #4]
 801f1d6:	f000 f829 	bl	801f22c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 801f1da:	687b      	ldr	r3, [r7, #4]
 801f1dc:	681b      	ldr	r3, [r3, #0]
 801f1de:	691a      	ldr	r2, [r3, #16]
 801f1e0:	687b      	ldr	r3, [r7, #4]
 801f1e2:	681b      	ldr	r3, [r3, #0]
 801f1e4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 801f1e8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 801f1ea:	687b      	ldr	r3, [r7, #4]
 801f1ec:	681b      	ldr	r3, [r3, #0]
 801f1ee:	695a      	ldr	r2, [r3, #20]
 801f1f0:	687b      	ldr	r3, [r7, #4]
 801f1f2:	681b      	ldr	r3, [r3, #0]
 801f1f4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 801f1f8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 801f1fa:	687b      	ldr	r3, [r7, #4]
 801f1fc:	681b      	ldr	r3, [r3, #0]
 801f1fe:	68da      	ldr	r2, [r3, #12]
 801f200:	687b      	ldr	r3, [r7, #4]
 801f202:	681b      	ldr	r3, [r3, #0]
 801f204:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 801f208:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801f20a:	687b      	ldr	r3, [r7, #4]
 801f20c:	2200      	movs	r2, #0
 801f20e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 801f210:	687b      	ldr	r3, [r7, #4]
 801f212:	2220      	movs	r2, #32
 801f214:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 801f218:	687b      	ldr	r3, [r7, #4]
 801f21a:	2220      	movs	r2, #32
 801f21c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 801f220:	2300      	movs	r3, #0
}
 801f222:	4618      	mov	r0, r3
 801f224:	3708      	adds	r7, #8
 801f226:	46bd      	mov	sp, r7
 801f228:	bd80      	pop	{r7, pc}
	...

0801f22c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 801f22c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f230:	b085      	sub	sp, #20
 801f232:	af00      	add	r7, sp, #0
 801f234:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 801f236:	687b      	ldr	r3, [r7, #4]
 801f238:	681b      	ldr	r3, [r3, #0]
 801f23a:	691b      	ldr	r3, [r3, #16]
 801f23c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 801f240:	687b      	ldr	r3, [r7, #4]
 801f242:	68da      	ldr	r2, [r3, #12]
 801f244:	687b      	ldr	r3, [r7, #4]
 801f246:	681b      	ldr	r3, [r3, #0]
 801f248:	430a      	orrs	r2, r1
 801f24a:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 801f24c:	687b      	ldr	r3, [r7, #4]
 801f24e:	689a      	ldr	r2, [r3, #8]
 801f250:	687b      	ldr	r3, [r7, #4]
 801f252:	691b      	ldr	r3, [r3, #16]
 801f254:	431a      	orrs	r2, r3
 801f256:	687b      	ldr	r3, [r7, #4]
 801f258:	695b      	ldr	r3, [r3, #20]
 801f25a:	431a      	orrs	r2, r3
 801f25c:	687b      	ldr	r3, [r7, #4]
 801f25e:	69db      	ldr	r3, [r3, #28]
 801f260:	4313      	orrs	r3, r2
 801f262:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 801f264:	687b      	ldr	r3, [r7, #4]
 801f266:	681b      	ldr	r3, [r3, #0]
 801f268:	68db      	ldr	r3, [r3, #12]
 801f26a:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 801f26e:	f023 030c 	bic.w	r3, r3, #12
 801f272:	687a      	ldr	r2, [r7, #4]
 801f274:	6812      	ldr	r2, [r2, #0]
 801f276:	68f9      	ldr	r1, [r7, #12]
 801f278:	430b      	orrs	r3, r1
 801f27a:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 801f27c:	687b      	ldr	r3, [r7, #4]
 801f27e:	681b      	ldr	r3, [r3, #0]
 801f280:	695b      	ldr	r3, [r3, #20]
 801f282:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 801f286:	687b      	ldr	r3, [r7, #4]
 801f288:	699a      	ldr	r2, [r3, #24]
 801f28a:	687b      	ldr	r3, [r7, #4]
 801f28c:	681b      	ldr	r3, [r3, #0]
 801f28e:	430a      	orrs	r2, r1
 801f290:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 801f292:	687b      	ldr	r3, [r7, #4]
 801f294:	69db      	ldr	r3, [r3, #28]
 801f296:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801f29a:	f040 818b 	bne.w	801f5b4 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 801f29e:	687b      	ldr	r3, [r7, #4]
 801f2a0:	681b      	ldr	r3, [r3, #0]
 801f2a2:	4ac1      	ldr	r2, [pc, #772]	; (801f5a8 <UART_SetConfig+0x37c>)
 801f2a4:	4293      	cmp	r3, r2
 801f2a6:	d005      	beq.n	801f2b4 <UART_SetConfig+0x88>
 801f2a8:	687b      	ldr	r3, [r7, #4]
 801f2aa:	681b      	ldr	r3, [r3, #0]
 801f2ac:	4abf      	ldr	r2, [pc, #764]	; (801f5ac <UART_SetConfig+0x380>)
 801f2ae:	4293      	cmp	r3, r2
 801f2b0:	f040 80bd 	bne.w	801f42e <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 801f2b4:	f7fe feba 	bl	801e02c <HAL_RCC_GetPCLK2Freq>
 801f2b8:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 801f2ba:	68bb      	ldr	r3, [r7, #8]
 801f2bc:	461d      	mov	r5, r3
 801f2be:	f04f 0600 	mov.w	r6, #0
 801f2c2:	46a8      	mov	r8, r5
 801f2c4:	46b1      	mov	r9, r6
 801f2c6:	eb18 0308 	adds.w	r3, r8, r8
 801f2ca:	eb49 0409 	adc.w	r4, r9, r9
 801f2ce:	4698      	mov	r8, r3
 801f2d0:	46a1      	mov	r9, r4
 801f2d2:	eb18 0805 	adds.w	r8, r8, r5
 801f2d6:	eb49 0906 	adc.w	r9, r9, r6
 801f2da:	f04f 0100 	mov.w	r1, #0
 801f2de:	f04f 0200 	mov.w	r2, #0
 801f2e2:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 801f2e6:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 801f2ea:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 801f2ee:	4688      	mov	r8, r1
 801f2f0:	4691      	mov	r9, r2
 801f2f2:	eb18 0005 	adds.w	r0, r8, r5
 801f2f6:	eb49 0106 	adc.w	r1, r9, r6
 801f2fa:	687b      	ldr	r3, [r7, #4]
 801f2fc:	685b      	ldr	r3, [r3, #4]
 801f2fe:	461d      	mov	r5, r3
 801f300:	f04f 0600 	mov.w	r6, #0
 801f304:	196b      	adds	r3, r5, r5
 801f306:	eb46 0406 	adc.w	r4, r6, r6
 801f30a:	461a      	mov	r2, r3
 801f30c:	4623      	mov	r3, r4
 801f30e:	f7e1 fc4b 	bl	8000ba8 <__aeabi_uldivmod>
 801f312:	4603      	mov	r3, r0
 801f314:	460c      	mov	r4, r1
 801f316:	461a      	mov	r2, r3
 801f318:	4ba5      	ldr	r3, [pc, #660]	; (801f5b0 <UART_SetConfig+0x384>)
 801f31a:	fba3 2302 	umull	r2, r3, r3, r2
 801f31e:	095b      	lsrs	r3, r3, #5
 801f320:	ea4f 1803 	mov.w	r8, r3, lsl #4
 801f324:	68bb      	ldr	r3, [r7, #8]
 801f326:	461d      	mov	r5, r3
 801f328:	f04f 0600 	mov.w	r6, #0
 801f32c:	46a9      	mov	r9, r5
 801f32e:	46b2      	mov	sl, r6
 801f330:	eb19 0309 	adds.w	r3, r9, r9
 801f334:	eb4a 040a 	adc.w	r4, sl, sl
 801f338:	4699      	mov	r9, r3
 801f33a:	46a2      	mov	sl, r4
 801f33c:	eb19 0905 	adds.w	r9, r9, r5
 801f340:	eb4a 0a06 	adc.w	sl, sl, r6
 801f344:	f04f 0100 	mov.w	r1, #0
 801f348:	f04f 0200 	mov.w	r2, #0
 801f34c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 801f350:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 801f354:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 801f358:	4689      	mov	r9, r1
 801f35a:	4692      	mov	sl, r2
 801f35c:	eb19 0005 	adds.w	r0, r9, r5
 801f360:	eb4a 0106 	adc.w	r1, sl, r6
 801f364:	687b      	ldr	r3, [r7, #4]
 801f366:	685b      	ldr	r3, [r3, #4]
 801f368:	461d      	mov	r5, r3
 801f36a:	f04f 0600 	mov.w	r6, #0
 801f36e:	196b      	adds	r3, r5, r5
 801f370:	eb46 0406 	adc.w	r4, r6, r6
 801f374:	461a      	mov	r2, r3
 801f376:	4623      	mov	r3, r4
 801f378:	f7e1 fc16 	bl	8000ba8 <__aeabi_uldivmod>
 801f37c:	4603      	mov	r3, r0
 801f37e:	460c      	mov	r4, r1
 801f380:	461a      	mov	r2, r3
 801f382:	4b8b      	ldr	r3, [pc, #556]	; (801f5b0 <UART_SetConfig+0x384>)
 801f384:	fba3 1302 	umull	r1, r3, r3, r2
 801f388:	095b      	lsrs	r3, r3, #5
 801f38a:	2164      	movs	r1, #100	; 0x64
 801f38c:	fb01 f303 	mul.w	r3, r1, r3
 801f390:	1ad3      	subs	r3, r2, r3
 801f392:	00db      	lsls	r3, r3, #3
 801f394:	3332      	adds	r3, #50	; 0x32
 801f396:	4a86      	ldr	r2, [pc, #536]	; (801f5b0 <UART_SetConfig+0x384>)
 801f398:	fba2 2303 	umull	r2, r3, r2, r3
 801f39c:	095b      	lsrs	r3, r3, #5
 801f39e:	005b      	lsls	r3, r3, #1
 801f3a0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 801f3a4:	4498      	add	r8, r3
 801f3a6:	68bb      	ldr	r3, [r7, #8]
 801f3a8:	461d      	mov	r5, r3
 801f3aa:	f04f 0600 	mov.w	r6, #0
 801f3ae:	46a9      	mov	r9, r5
 801f3b0:	46b2      	mov	sl, r6
 801f3b2:	eb19 0309 	adds.w	r3, r9, r9
 801f3b6:	eb4a 040a 	adc.w	r4, sl, sl
 801f3ba:	4699      	mov	r9, r3
 801f3bc:	46a2      	mov	sl, r4
 801f3be:	eb19 0905 	adds.w	r9, r9, r5
 801f3c2:	eb4a 0a06 	adc.w	sl, sl, r6
 801f3c6:	f04f 0100 	mov.w	r1, #0
 801f3ca:	f04f 0200 	mov.w	r2, #0
 801f3ce:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 801f3d2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 801f3d6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 801f3da:	4689      	mov	r9, r1
 801f3dc:	4692      	mov	sl, r2
 801f3de:	eb19 0005 	adds.w	r0, r9, r5
 801f3e2:	eb4a 0106 	adc.w	r1, sl, r6
 801f3e6:	687b      	ldr	r3, [r7, #4]
 801f3e8:	685b      	ldr	r3, [r3, #4]
 801f3ea:	461d      	mov	r5, r3
 801f3ec:	f04f 0600 	mov.w	r6, #0
 801f3f0:	196b      	adds	r3, r5, r5
 801f3f2:	eb46 0406 	adc.w	r4, r6, r6
 801f3f6:	461a      	mov	r2, r3
 801f3f8:	4623      	mov	r3, r4
 801f3fa:	f7e1 fbd5 	bl	8000ba8 <__aeabi_uldivmod>
 801f3fe:	4603      	mov	r3, r0
 801f400:	460c      	mov	r4, r1
 801f402:	461a      	mov	r2, r3
 801f404:	4b6a      	ldr	r3, [pc, #424]	; (801f5b0 <UART_SetConfig+0x384>)
 801f406:	fba3 1302 	umull	r1, r3, r3, r2
 801f40a:	095b      	lsrs	r3, r3, #5
 801f40c:	2164      	movs	r1, #100	; 0x64
 801f40e:	fb01 f303 	mul.w	r3, r1, r3
 801f412:	1ad3      	subs	r3, r2, r3
 801f414:	00db      	lsls	r3, r3, #3
 801f416:	3332      	adds	r3, #50	; 0x32
 801f418:	4a65      	ldr	r2, [pc, #404]	; (801f5b0 <UART_SetConfig+0x384>)
 801f41a:	fba2 2303 	umull	r2, r3, r2, r3
 801f41e:	095b      	lsrs	r3, r3, #5
 801f420:	f003 0207 	and.w	r2, r3, #7
 801f424:	687b      	ldr	r3, [r7, #4]
 801f426:	681b      	ldr	r3, [r3, #0]
 801f428:	4442      	add	r2, r8
 801f42a:	609a      	str	r2, [r3, #8]
 801f42c:	e26f      	b.n	801f90e <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 801f42e:	f7fe fde9 	bl	801e004 <HAL_RCC_GetPCLK1Freq>
 801f432:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 801f434:	68bb      	ldr	r3, [r7, #8]
 801f436:	461d      	mov	r5, r3
 801f438:	f04f 0600 	mov.w	r6, #0
 801f43c:	46a8      	mov	r8, r5
 801f43e:	46b1      	mov	r9, r6
 801f440:	eb18 0308 	adds.w	r3, r8, r8
 801f444:	eb49 0409 	adc.w	r4, r9, r9
 801f448:	4698      	mov	r8, r3
 801f44a:	46a1      	mov	r9, r4
 801f44c:	eb18 0805 	adds.w	r8, r8, r5
 801f450:	eb49 0906 	adc.w	r9, r9, r6
 801f454:	f04f 0100 	mov.w	r1, #0
 801f458:	f04f 0200 	mov.w	r2, #0
 801f45c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 801f460:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 801f464:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 801f468:	4688      	mov	r8, r1
 801f46a:	4691      	mov	r9, r2
 801f46c:	eb18 0005 	adds.w	r0, r8, r5
 801f470:	eb49 0106 	adc.w	r1, r9, r6
 801f474:	687b      	ldr	r3, [r7, #4]
 801f476:	685b      	ldr	r3, [r3, #4]
 801f478:	461d      	mov	r5, r3
 801f47a:	f04f 0600 	mov.w	r6, #0
 801f47e:	196b      	adds	r3, r5, r5
 801f480:	eb46 0406 	adc.w	r4, r6, r6
 801f484:	461a      	mov	r2, r3
 801f486:	4623      	mov	r3, r4
 801f488:	f7e1 fb8e 	bl	8000ba8 <__aeabi_uldivmod>
 801f48c:	4603      	mov	r3, r0
 801f48e:	460c      	mov	r4, r1
 801f490:	461a      	mov	r2, r3
 801f492:	4b47      	ldr	r3, [pc, #284]	; (801f5b0 <UART_SetConfig+0x384>)
 801f494:	fba3 2302 	umull	r2, r3, r3, r2
 801f498:	095b      	lsrs	r3, r3, #5
 801f49a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 801f49e:	68bb      	ldr	r3, [r7, #8]
 801f4a0:	461d      	mov	r5, r3
 801f4a2:	f04f 0600 	mov.w	r6, #0
 801f4a6:	46a9      	mov	r9, r5
 801f4a8:	46b2      	mov	sl, r6
 801f4aa:	eb19 0309 	adds.w	r3, r9, r9
 801f4ae:	eb4a 040a 	adc.w	r4, sl, sl
 801f4b2:	4699      	mov	r9, r3
 801f4b4:	46a2      	mov	sl, r4
 801f4b6:	eb19 0905 	adds.w	r9, r9, r5
 801f4ba:	eb4a 0a06 	adc.w	sl, sl, r6
 801f4be:	f04f 0100 	mov.w	r1, #0
 801f4c2:	f04f 0200 	mov.w	r2, #0
 801f4c6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 801f4ca:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 801f4ce:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 801f4d2:	4689      	mov	r9, r1
 801f4d4:	4692      	mov	sl, r2
 801f4d6:	eb19 0005 	adds.w	r0, r9, r5
 801f4da:	eb4a 0106 	adc.w	r1, sl, r6
 801f4de:	687b      	ldr	r3, [r7, #4]
 801f4e0:	685b      	ldr	r3, [r3, #4]
 801f4e2:	461d      	mov	r5, r3
 801f4e4:	f04f 0600 	mov.w	r6, #0
 801f4e8:	196b      	adds	r3, r5, r5
 801f4ea:	eb46 0406 	adc.w	r4, r6, r6
 801f4ee:	461a      	mov	r2, r3
 801f4f0:	4623      	mov	r3, r4
 801f4f2:	f7e1 fb59 	bl	8000ba8 <__aeabi_uldivmod>
 801f4f6:	4603      	mov	r3, r0
 801f4f8:	460c      	mov	r4, r1
 801f4fa:	461a      	mov	r2, r3
 801f4fc:	4b2c      	ldr	r3, [pc, #176]	; (801f5b0 <UART_SetConfig+0x384>)
 801f4fe:	fba3 1302 	umull	r1, r3, r3, r2
 801f502:	095b      	lsrs	r3, r3, #5
 801f504:	2164      	movs	r1, #100	; 0x64
 801f506:	fb01 f303 	mul.w	r3, r1, r3
 801f50a:	1ad3      	subs	r3, r2, r3
 801f50c:	00db      	lsls	r3, r3, #3
 801f50e:	3332      	adds	r3, #50	; 0x32
 801f510:	4a27      	ldr	r2, [pc, #156]	; (801f5b0 <UART_SetConfig+0x384>)
 801f512:	fba2 2303 	umull	r2, r3, r2, r3
 801f516:	095b      	lsrs	r3, r3, #5
 801f518:	005b      	lsls	r3, r3, #1
 801f51a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 801f51e:	4498      	add	r8, r3
 801f520:	68bb      	ldr	r3, [r7, #8]
 801f522:	461d      	mov	r5, r3
 801f524:	f04f 0600 	mov.w	r6, #0
 801f528:	46a9      	mov	r9, r5
 801f52a:	46b2      	mov	sl, r6
 801f52c:	eb19 0309 	adds.w	r3, r9, r9
 801f530:	eb4a 040a 	adc.w	r4, sl, sl
 801f534:	4699      	mov	r9, r3
 801f536:	46a2      	mov	sl, r4
 801f538:	eb19 0905 	adds.w	r9, r9, r5
 801f53c:	eb4a 0a06 	adc.w	sl, sl, r6
 801f540:	f04f 0100 	mov.w	r1, #0
 801f544:	f04f 0200 	mov.w	r2, #0
 801f548:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 801f54c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 801f550:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 801f554:	4689      	mov	r9, r1
 801f556:	4692      	mov	sl, r2
 801f558:	eb19 0005 	adds.w	r0, r9, r5
 801f55c:	eb4a 0106 	adc.w	r1, sl, r6
 801f560:	687b      	ldr	r3, [r7, #4]
 801f562:	685b      	ldr	r3, [r3, #4]
 801f564:	461d      	mov	r5, r3
 801f566:	f04f 0600 	mov.w	r6, #0
 801f56a:	196b      	adds	r3, r5, r5
 801f56c:	eb46 0406 	adc.w	r4, r6, r6
 801f570:	461a      	mov	r2, r3
 801f572:	4623      	mov	r3, r4
 801f574:	f7e1 fb18 	bl	8000ba8 <__aeabi_uldivmod>
 801f578:	4603      	mov	r3, r0
 801f57a:	460c      	mov	r4, r1
 801f57c:	461a      	mov	r2, r3
 801f57e:	4b0c      	ldr	r3, [pc, #48]	; (801f5b0 <UART_SetConfig+0x384>)
 801f580:	fba3 1302 	umull	r1, r3, r3, r2
 801f584:	095b      	lsrs	r3, r3, #5
 801f586:	2164      	movs	r1, #100	; 0x64
 801f588:	fb01 f303 	mul.w	r3, r1, r3
 801f58c:	1ad3      	subs	r3, r2, r3
 801f58e:	00db      	lsls	r3, r3, #3
 801f590:	3332      	adds	r3, #50	; 0x32
 801f592:	4a07      	ldr	r2, [pc, #28]	; (801f5b0 <UART_SetConfig+0x384>)
 801f594:	fba2 2303 	umull	r2, r3, r2, r3
 801f598:	095b      	lsrs	r3, r3, #5
 801f59a:	f003 0207 	and.w	r2, r3, #7
 801f59e:	687b      	ldr	r3, [r7, #4]
 801f5a0:	681b      	ldr	r3, [r3, #0]
 801f5a2:	4442      	add	r2, r8
 801f5a4:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 801f5a6:	e1b2      	b.n	801f90e <UART_SetConfig+0x6e2>
 801f5a8:	40011000 	.word	0x40011000
 801f5ac:	40011400 	.word	0x40011400
 801f5b0:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 801f5b4:	687b      	ldr	r3, [r7, #4]
 801f5b6:	681b      	ldr	r3, [r3, #0]
 801f5b8:	4ad7      	ldr	r2, [pc, #860]	; (801f918 <UART_SetConfig+0x6ec>)
 801f5ba:	4293      	cmp	r3, r2
 801f5bc:	d005      	beq.n	801f5ca <UART_SetConfig+0x39e>
 801f5be:	687b      	ldr	r3, [r7, #4]
 801f5c0:	681b      	ldr	r3, [r3, #0]
 801f5c2:	4ad6      	ldr	r2, [pc, #856]	; (801f91c <UART_SetConfig+0x6f0>)
 801f5c4:	4293      	cmp	r3, r2
 801f5c6:	f040 80d1 	bne.w	801f76c <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 801f5ca:	f7fe fd2f 	bl	801e02c <HAL_RCC_GetPCLK2Freq>
 801f5ce:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 801f5d0:	68bb      	ldr	r3, [r7, #8]
 801f5d2:	469a      	mov	sl, r3
 801f5d4:	f04f 0b00 	mov.w	fp, #0
 801f5d8:	46d0      	mov	r8, sl
 801f5da:	46d9      	mov	r9, fp
 801f5dc:	eb18 0308 	adds.w	r3, r8, r8
 801f5e0:	eb49 0409 	adc.w	r4, r9, r9
 801f5e4:	4698      	mov	r8, r3
 801f5e6:	46a1      	mov	r9, r4
 801f5e8:	eb18 080a 	adds.w	r8, r8, sl
 801f5ec:	eb49 090b 	adc.w	r9, r9, fp
 801f5f0:	f04f 0100 	mov.w	r1, #0
 801f5f4:	f04f 0200 	mov.w	r2, #0
 801f5f8:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 801f5fc:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 801f600:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 801f604:	4688      	mov	r8, r1
 801f606:	4691      	mov	r9, r2
 801f608:	eb1a 0508 	adds.w	r5, sl, r8
 801f60c:	eb4b 0609 	adc.w	r6, fp, r9
 801f610:	687b      	ldr	r3, [r7, #4]
 801f612:	685b      	ldr	r3, [r3, #4]
 801f614:	4619      	mov	r1, r3
 801f616:	f04f 0200 	mov.w	r2, #0
 801f61a:	f04f 0300 	mov.w	r3, #0
 801f61e:	f04f 0400 	mov.w	r4, #0
 801f622:	0094      	lsls	r4, r2, #2
 801f624:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 801f628:	008b      	lsls	r3, r1, #2
 801f62a:	461a      	mov	r2, r3
 801f62c:	4623      	mov	r3, r4
 801f62e:	4628      	mov	r0, r5
 801f630:	4631      	mov	r1, r6
 801f632:	f7e1 fab9 	bl	8000ba8 <__aeabi_uldivmod>
 801f636:	4603      	mov	r3, r0
 801f638:	460c      	mov	r4, r1
 801f63a:	461a      	mov	r2, r3
 801f63c:	4bb8      	ldr	r3, [pc, #736]	; (801f920 <UART_SetConfig+0x6f4>)
 801f63e:	fba3 2302 	umull	r2, r3, r3, r2
 801f642:	095b      	lsrs	r3, r3, #5
 801f644:	ea4f 1803 	mov.w	r8, r3, lsl #4
 801f648:	68bb      	ldr	r3, [r7, #8]
 801f64a:	469b      	mov	fp, r3
 801f64c:	f04f 0c00 	mov.w	ip, #0
 801f650:	46d9      	mov	r9, fp
 801f652:	46e2      	mov	sl, ip
 801f654:	eb19 0309 	adds.w	r3, r9, r9
 801f658:	eb4a 040a 	adc.w	r4, sl, sl
 801f65c:	4699      	mov	r9, r3
 801f65e:	46a2      	mov	sl, r4
 801f660:	eb19 090b 	adds.w	r9, r9, fp
 801f664:	eb4a 0a0c 	adc.w	sl, sl, ip
 801f668:	f04f 0100 	mov.w	r1, #0
 801f66c:	f04f 0200 	mov.w	r2, #0
 801f670:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 801f674:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 801f678:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 801f67c:	4689      	mov	r9, r1
 801f67e:	4692      	mov	sl, r2
 801f680:	eb1b 0509 	adds.w	r5, fp, r9
 801f684:	eb4c 060a 	adc.w	r6, ip, sl
 801f688:	687b      	ldr	r3, [r7, #4]
 801f68a:	685b      	ldr	r3, [r3, #4]
 801f68c:	4619      	mov	r1, r3
 801f68e:	f04f 0200 	mov.w	r2, #0
 801f692:	f04f 0300 	mov.w	r3, #0
 801f696:	f04f 0400 	mov.w	r4, #0
 801f69a:	0094      	lsls	r4, r2, #2
 801f69c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 801f6a0:	008b      	lsls	r3, r1, #2
 801f6a2:	461a      	mov	r2, r3
 801f6a4:	4623      	mov	r3, r4
 801f6a6:	4628      	mov	r0, r5
 801f6a8:	4631      	mov	r1, r6
 801f6aa:	f7e1 fa7d 	bl	8000ba8 <__aeabi_uldivmod>
 801f6ae:	4603      	mov	r3, r0
 801f6b0:	460c      	mov	r4, r1
 801f6b2:	461a      	mov	r2, r3
 801f6b4:	4b9a      	ldr	r3, [pc, #616]	; (801f920 <UART_SetConfig+0x6f4>)
 801f6b6:	fba3 1302 	umull	r1, r3, r3, r2
 801f6ba:	095b      	lsrs	r3, r3, #5
 801f6bc:	2164      	movs	r1, #100	; 0x64
 801f6be:	fb01 f303 	mul.w	r3, r1, r3
 801f6c2:	1ad3      	subs	r3, r2, r3
 801f6c4:	011b      	lsls	r3, r3, #4
 801f6c6:	3332      	adds	r3, #50	; 0x32
 801f6c8:	4a95      	ldr	r2, [pc, #596]	; (801f920 <UART_SetConfig+0x6f4>)
 801f6ca:	fba2 2303 	umull	r2, r3, r2, r3
 801f6ce:	095b      	lsrs	r3, r3, #5
 801f6d0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801f6d4:	4498      	add	r8, r3
 801f6d6:	68bb      	ldr	r3, [r7, #8]
 801f6d8:	469b      	mov	fp, r3
 801f6da:	f04f 0c00 	mov.w	ip, #0
 801f6de:	46d9      	mov	r9, fp
 801f6e0:	46e2      	mov	sl, ip
 801f6e2:	eb19 0309 	adds.w	r3, r9, r9
 801f6e6:	eb4a 040a 	adc.w	r4, sl, sl
 801f6ea:	4699      	mov	r9, r3
 801f6ec:	46a2      	mov	sl, r4
 801f6ee:	eb19 090b 	adds.w	r9, r9, fp
 801f6f2:	eb4a 0a0c 	adc.w	sl, sl, ip
 801f6f6:	f04f 0100 	mov.w	r1, #0
 801f6fa:	f04f 0200 	mov.w	r2, #0
 801f6fe:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 801f702:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 801f706:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 801f70a:	4689      	mov	r9, r1
 801f70c:	4692      	mov	sl, r2
 801f70e:	eb1b 0509 	adds.w	r5, fp, r9
 801f712:	eb4c 060a 	adc.w	r6, ip, sl
 801f716:	687b      	ldr	r3, [r7, #4]
 801f718:	685b      	ldr	r3, [r3, #4]
 801f71a:	4619      	mov	r1, r3
 801f71c:	f04f 0200 	mov.w	r2, #0
 801f720:	f04f 0300 	mov.w	r3, #0
 801f724:	f04f 0400 	mov.w	r4, #0
 801f728:	0094      	lsls	r4, r2, #2
 801f72a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 801f72e:	008b      	lsls	r3, r1, #2
 801f730:	461a      	mov	r2, r3
 801f732:	4623      	mov	r3, r4
 801f734:	4628      	mov	r0, r5
 801f736:	4631      	mov	r1, r6
 801f738:	f7e1 fa36 	bl	8000ba8 <__aeabi_uldivmod>
 801f73c:	4603      	mov	r3, r0
 801f73e:	460c      	mov	r4, r1
 801f740:	461a      	mov	r2, r3
 801f742:	4b77      	ldr	r3, [pc, #476]	; (801f920 <UART_SetConfig+0x6f4>)
 801f744:	fba3 1302 	umull	r1, r3, r3, r2
 801f748:	095b      	lsrs	r3, r3, #5
 801f74a:	2164      	movs	r1, #100	; 0x64
 801f74c:	fb01 f303 	mul.w	r3, r1, r3
 801f750:	1ad3      	subs	r3, r2, r3
 801f752:	011b      	lsls	r3, r3, #4
 801f754:	3332      	adds	r3, #50	; 0x32
 801f756:	4a72      	ldr	r2, [pc, #456]	; (801f920 <UART_SetConfig+0x6f4>)
 801f758:	fba2 2303 	umull	r2, r3, r2, r3
 801f75c:	095b      	lsrs	r3, r3, #5
 801f75e:	f003 020f 	and.w	r2, r3, #15
 801f762:	687b      	ldr	r3, [r7, #4]
 801f764:	681b      	ldr	r3, [r3, #0]
 801f766:	4442      	add	r2, r8
 801f768:	609a      	str	r2, [r3, #8]
 801f76a:	e0d0      	b.n	801f90e <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 801f76c:	f7fe fc4a 	bl	801e004 <HAL_RCC_GetPCLK1Freq>
 801f770:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 801f772:	68bb      	ldr	r3, [r7, #8]
 801f774:	469a      	mov	sl, r3
 801f776:	f04f 0b00 	mov.w	fp, #0
 801f77a:	46d0      	mov	r8, sl
 801f77c:	46d9      	mov	r9, fp
 801f77e:	eb18 0308 	adds.w	r3, r8, r8
 801f782:	eb49 0409 	adc.w	r4, r9, r9
 801f786:	4698      	mov	r8, r3
 801f788:	46a1      	mov	r9, r4
 801f78a:	eb18 080a 	adds.w	r8, r8, sl
 801f78e:	eb49 090b 	adc.w	r9, r9, fp
 801f792:	f04f 0100 	mov.w	r1, #0
 801f796:	f04f 0200 	mov.w	r2, #0
 801f79a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 801f79e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 801f7a2:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 801f7a6:	4688      	mov	r8, r1
 801f7a8:	4691      	mov	r9, r2
 801f7aa:	eb1a 0508 	adds.w	r5, sl, r8
 801f7ae:	eb4b 0609 	adc.w	r6, fp, r9
 801f7b2:	687b      	ldr	r3, [r7, #4]
 801f7b4:	685b      	ldr	r3, [r3, #4]
 801f7b6:	4619      	mov	r1, r3
 801f7b8:	f04f 0200 	mov.w	r2, #0
 801f7bc:	f04f 0300 	mov.w	r3, #0
 801f7c0:	f04f 0400 	mov.w	r4, #0
 801f7c4:	0094      	lsls	r4, r2, #2
 801f7c6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 801f7ca:	008b      	lsls	r3, r1, #2
 801f7cc:	461a      	mov	r2, r3
 801f7ce:	4623      	mov	r3, r4
 801f7d0:	4628      	mov	r0, r5
 801f7d2:	4631      	mov	r1, r6
 801f7d4:	f7e1 f9e8 	bl	8000ba8 <__aeabi_uldivmod>
 801f7d8:	4603      	mov	r3, r0
 801f7da:	460c      	mov	r4, r1
 801f7dc:	461a      	mov	r2, r3
 801f7de:	4b50      	ldr	r3, [pc, #320]	; (801f920 <UART_SetConfig+0x6f4>)
 801f7e0:	fba3 2302 	umull	r2, r3, r3, r2
 801f7e4:	095b      	lsrs	r3, r3, #5
 801f7e6:	ea4f 1803 	mov.w	r8, r3, lsl #4
 801f7ea:	68bb      	ldr	r3, [r7, #8]
 801f7ec:	469b      	mov	fp, r3
 801f7ee:	f04f 0c00 	mov.w	ip, #0
 801f7f2:	46d9      	mov	r9, fp
 801f7f4:	46e2      	mov	sl, ip
 801f7f6:	eb19 0309 	adds.w	r3, r9, r9
 801f7fa:	eb4a 040a 	adc.w	r4, sl, sl
 801f7fe:	4699      	mov	r9, r3
 801f800:	46a2      	mov	sl, r4
 801f802:	eb19 090b 	adds.w	r9, r9, fp
 801f806:	eb4a 0a0c 	adc.w	sl, sl, ip
 801f80a:	f04f 0100 	mov.w	r1, #0
 801f80e:	f04f 0200 	mov.w	r2, #0
 801f812:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 801f816:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 801f81a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 801f81e:	4689      	mov	r9, r1
 801f820:	4692      	mov	sl, r2
 801f822:	eb1b 0509 	adds.w	r5, fp, r9
 801f826:	eb4c 060a 	adc.w	r6, ip, sl
 801f82a:	687b      	ldr	r3, [r7, #4]
 801f82c:	685b      	ldr	r3, [r3, #4]
 801f82e:	4619      	mov	r1, r3
 801f830:	f04f 0200 	mov.w	r2, #0
 801f834:	f04f 0300 	mov.w	r3, #0
 801f838:	f04f 0400 	mov.w	r4, #0
 801f83c:	0094      	lsls	r4, r2, #2
 801f83e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 801f842:	008b      	lsls	r3, r1, #2
 801f844:	461a      	mov	r2, r3
 801f846:	4623      	mov	r3, r4
 801f848:	4628      	mov	r0, r5
 801f84a:	4631      	mov	r1, r6
 801f84c:	f7e1 f9ac 	bl	8000ba8 <__aeabi_uldivmod>
 801f850:	4603      	mov	r3, r0
 801f852:	460c      	mov	r4, r1
 801f854:	461a      	mov	r2, r3
 801f856:	4b32      	ldr	r3, [pc, #200]	; (801f920 <UART_SetConfig+0x6f4>)
 801f858:	fba3 1302 	umull	r1, r3, r3, r2
 801f85c:	095b      	lsrs	r3, r3, #5
 801f85e:	2164      	movs	r1, #100	; 0x64
 801f860:	fb01 f303 	mul.w	r3, r1, r3
 801f864:	1ad3      	subs	r3, r2, r3
 801f866:	011b      	lsls	r3, r3, #4
 801f868:	3332      	adds	r3, #50	; 0x32
 801f86a:	4a2d      	ldr	r2, [pc, #180]	; (801f920 <UART_SetConfig+0x6f4>)
 801f86c:	fba2 2303 	umull	r2, r3, r2, r3
 801f870:	095b      	lsrs	r3, r3, #5
 801f872:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801f876:	4498      	add	r8, r3
 801f878:	68bb      	ldr	r3, [r7, #8]
 801f87a:	469b      	mov	fp, r3
 801f87c:	f04f 0c00 	mov.w	ip, #0
 801f880:	46d9      	mov	r9, fp
 801f882:	46e2      	mov	sl, ip
 801f884:	eb19 0309 	adds.w	r3, r9, r9
 801f888:	eb4a 040a 	adc.w	r4, sl, sl
 801f88c:	4699      	mov	r9, r3
 801f88e:	46a2      	mov	sl, r4
 801f890:	eb19 090b 	adds.w	r9, r9, fp
 801f894:	eb4a 0a0c 	adc.w	sl, sl, ip
 801f898:	f04f 0100 	mov.w	r1, #0
 801f89c:	f04f 0200 	mov.w	r2, #0
 801f8a0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 801f8a4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 801f8a8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 801f8ac:	4689      	mov	r9, r1
 801f8ae:	4692      	mov	sl, r2
 801f8b0:	eb1b 0509 	adds.w	r5, fp, r9
 801f8b4:	eb4c 060a 	adc.w	r6, ip, sl
 801f8b8:	687b      	ldr	r3, [r7, #4]
 801f8ba:	685b      	ldr	r3, [r3, #4]
 801f8bc:	4619      	mov	r1, r3
 801f8be:	f04f 0200 	mov.w	r2, #0
 801f8c2:	f04f 0300 	mov.w	r3, #0
 801f8c6:	f04f 0400 	mov.w	r4, #0
 801f8ca:	0094      	lsls	r4, r2, #2
 801f8cc:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 801f8d0:	008b      	lsls	r3, r1, #2
 801f8d2:	461a      	mov	r2, r3
 801f8d4:	4623      	mov	r3, r4
 801f8d6:	4628      	mov	r0, r5
 801f8d8:	4631      	mov	r1, r6
 801f8da:	f7e1 f965 	bl	8000ba8 <__aeabi_uldivmod>
 801f8de:	4603      	mov	r3, r0
 801f8e0:	460c      	mov	r4, r1
 801f8e2:	461a      	mov	r2, r3
 801f8e4:	4b0e      	ldr	r3, [pc, #56]	; (801f920 <UART_SetConfig+0x6f4>)
 801f8e6:	fba3 1302 	umull	r1, r3, r3, r2
 801f8ea:	095b      	lsrs	r3, r3, #5
 801f8ec:	2164      	movs	r1, #100	; 0x64
 801f8ee:	fb01 f303 	mul.w	r3, r1, r3
 801f8f2:	1ad3      	subs	r3, r2, r3
 801f8f4:	011b      	lsls	r3, r3, #4
 801f8f6:	3332      	adds	r3, #50	; 0x32
 801f8f8:	4a09      	ldr	r2, [pc, #36]	; (801f920 <UART_SetConfig+0x6f4>)
 801f8fa:	fba2 2303 	umull	r2, r3, r2, r3
 801f8fe:	095b      	lsrs	r3, r3, #5
 801f900:	f003 020f 	and.w	r2, r3, #15
 801f904:	687b      	ldr	r3, [r7, #4]
 801f906:	681b      	ldr	r3, [r3, #0]
 801f908:	4442      	add	r2, r8
 801f90a:	609a      	str	r2, [r3, #8]
}
 801f90c:	e7ff      	b.n	801f90e <UART_SetConfig+0x6e2>
 801f90e:	bf00      	nop
 801f910:	3714      	adds	r7, #20
 801f912:	46bd      	mov	sp, r7
 801f914:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f918:	40011000 	.word	0x40011000
 801f91c:	40011400 	.word	0x40011400
 801f920:	51eb851f 	.word	0x51eb851f

0801f924 <__errno>:
 801f924:	4b01      	ldr	r3, [pc, #4]	; (801f92c <__errno+0x8>)
 801f926:	6818      	ldr	r0, [r3, #0]
 801f928:	4770      	bx	lr
 801f92a:	bf00      	nop
 801f92c:	2000000c 	.word	0x2000000c

0801f930 <__libc_init_array>:
 801f930:	b570      	push	{r4, r5, r6, lr}
 801f932:	4e0d      	ldr	r6, [pc, #52]	; (801f968 <__libc_init_array+0x38>)
 801f934:	4c0d      	ldr	r4, [pc, #52]	; (801f96c <__libc_init_array+0x3c>)
 801f936:	1ba4      	subs	r4, r4, r6
 801f938:	10a4      	asrs	r4, r4, #2
 801f93a:	2500      	movs	r5, #0
 801f93c:	42a5      	cmp	r5, r4
 801f93e:	d109      	bne.n	801f954 <__libc_init_array+0x24>
 801f940:	4e0b      	ldr	r6, [pc, #44]	; (801f970 <__libc_init_array+0x40>)
 801f942:	4c0c      	ldr	r4, [pc, #48]	; (801f974 <__libc_init_array+0x44>)
 801f944:	f001 fc7e 	bl	8021244 <_init>
 801f948:	1ba4      	subs	r4, r4, r6
 801f94a:	10a4      	asrs	r4, r4, #2
 801f94c:	2500      	movs	r5, #0
 801f94e:	42a5      	cmp	r5, r4
 801f950:	d105      	bne.n	801f95e <__libc_init_array+0x2e>
 801f952:	bd70      	pop	{r4, r5, r6, pc}
 801f954:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 801f958:	4798      	blx	r3
 801f95a:	3501      	adds	r5, #1
 801f95c:	e7ee      	b.n	801f93c <__libc_init_array+0xc>
 801f95e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 801f962:	4798      	blx	r3
 801f964:	3501      	adds	r5, #1
 801f966:	e7f2      	b.n	801f94e <__libc_init_array+0x1e>
 801f968:	0802aa10 	.word	0x0802aa10
 801f96c:	0802aa10 	.word	0x0802aa10
 801f970:	0802aa10 	.word	0x0802aa10
 801f974:	0802aa14 	.word	0x0802aa14

0801f978 <memset>:
 801f978:	4402      	add	r2, r0
 801f97a:	4603      	mov	r3, r0
 801f97c:	4293      	cmp	r3, r2
 801f97e:	d100      	bne.n	801f982 <memset+0xa>
 801f980:	4770      	bx	lr
 801f982:	f803 1b01 	strb.w	r1, [r3], #1
 801f986:	e7f9      	b.n	801f97c <memset+0x4>

0801f988 <_vsiprintf_r>:
 801f988:	b500      	push	{lr}
 801f98a:	b09b      	sub	sp, #108	; 0x6c
 801f98c:	9100      	str	r1, [sp, #0]
 801f98e:	9104      	str	r1, [sp, #16]
 801f990:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801f994:	9105      	str	r1, [sp, #20]
 801f996:	9102      	str	r1, [sp, #8]
 801f998:	4905      	ldr	r1, [pc, #20]	; (801f9b0 <_vsiprintf_r+0x28>)
 801f99a:	9103      	str	r1, [sp, #12]
 801f99c:	4669      	mov	r1, sp
 801f99e:	f000 f915 	bl	801fbcc <_svfiprintf_r>
 801f9a2:	9b00      	ldr	r3, [sp, #0]
 801f9a4:	2200      	movs	r2, #0
 801f9a6:	701a      	strb	r2, [r3, #0]
 801f9a8:	b01b      	add	sp, #108	; 0x6c
 801f9aa:	f85d fb04 	ldr.w	pc, [sp], #4
 801f9ae:	bf00      	nop
 801f9b0:	ffff0208 	.word	0xffff0208

0801f9b4 <vsiprintf>:
 801f9b4:	4613      	mov	r3, r2
 801f9b6:	460a      	mov	r2, r1
 801f9b8:	4601      	mov	r1, r0
 801f9ba:	4802      	ldr	r0, [pc, #8]	; (801f9c4 <vsiprintf+0x10>)
 801f9bc:	6800      	ldr	r0, [r0, #0]
 801f9be:	f7ff bfe3 	b.w	801f988 <_vsiprintf_r>
 801f9c2:	bf00      	nop
 801f9c4:	2000000c 	.word	0x2000000c

0801f9c8 <_free_r>:
 801f9c8:	b538      	push	{r3, r4, r5, lr}
 801f9ca:	4605      	mov	r5, r0
 801f9cc:	2900      	cmp	r1, #0
 801f9ce:	d045      	beq.n	801fa5c <_free_r+0x94>
 801f9d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801f9d4:	1f0c      	subs	r4, r1, #4
 801f9d6:	2b00      	cmp	r3, #0
 801f9d8:	bfb8      	it	lt
 801f9da:	18e4      	addlt	r4, r4, r3
 801f9dc:	f000 fbaa 	bl	8020134 <__malloc_lock>
 801f9e0:	4a1f      	ldr	r2, [pc, #124]	; (801fa60 <_free_r+0x98>)
 801f9e2:	6813      	ldr	r3, [r2, #0]
 801f9e4:	4610      	mov	r0, r2
 801f9e6:	b933      	cbnz	r3, 801f9f6 <_free_r+0x2e>
 801f9e8:	6063      	str	r3, [r4, #4]
 801f9ea:	6014      	str	r4, [r2, #0]
 801f9ec:	4628      	mov	r0, r5
 801f9ee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801f9f2:	f000 bba0 	b.w	8020136 <__malloc_unlock>
 801f9f6:	42a3      	cmp	r3, r4
 801f9f8:	d90c      	bls.n	801fa14 <_free_r+0x4c>
 801f9fa:	6821      	ldr	r1, [r4, #0]
 801f9fc:	1862      	adds	r2, r4, r1
 801f9fe:	4293      	cmp	r3, r2
 801fa00:	bf04      	itt	eq
 801fa02:	681a      	ldreq	r2, [r3, #0]
 801fa04:	685b      	ldreq	r3, [r3, #4]
 801fa06:	6063      	str	r3, [r4, #4]
 801fa08:	bf04      	itt	eq
 801fa0a:	1852      	addeq	r2, r2, r1
 801fa0c:	6022      	streq	r2, [r4, #0]
 801fa0e:	6004      	str	r4, [r0, #0]
 801fa10:	e7ec      	b.n	801f9ec <_free_r+0x24>
 801fa12:	4613      	mov	r3, r2
 801fa14:	685a      	ldr	r2, [r3, #4]
 801fa16:	b10a      	cbz	r2, 801fa1c <_free_r+0x54>
 801fa18:	42a2      	cmp	r2, r4
 801fa1a:	d9fa      	bls.n	801fa12 <_free_r+0x4a>
 801fa1c:	6819      	ldr	r1, [r3, #0]
 801fa1e:	1858      	adds	r0, r3, r1
 801fa20:	42a0      	cmp	r0, r4
 801fa22:	d10b      	bne.n	801fa3c <_free_r+0x74>
 801fa24:	6820      	ldr	r0, [r4, #0]
 801fa26:	4401      	add	r1, r0
 801fa28:	1858      	adds	r0, r3, r1
 801fa2a:	4282      	cmp	r2, r0
 801fa2c:	6019      	str	r1, [r3, #0]
 801fa2e:	d1dd      	bne.n	801f9ec <_free_r+0x24>
 801fa30:	6810      	ldr	r0, [r2, #0]
 801fa32:	6852      	ldr	r2, [r2, #4]
 801fa34:	605a      	str	r2, [r3, #4]
 801fa36:	4401      	add	r1, r0
 801fa38:	6019      	str	r1, [r3, #0]
 801fa3a:	e7d7      	b.n	801f9ec <_free_r+0x24>
 801fa3c:	d902      	bls.n	801fa44 <_free_r+0x7c>
 801fa3e:	230c      	movs	r3, #12
 801fa40:	602b      	str	r3, [r5, #0]
 801fa42:	e7d3      	b.n	801f9ec <_free_r+0x24>
 801fa44:	6820      	ldr	r0, [r4, #0]
 801fa46:	1821      	adds	r1, r4, r0
 801fa48:	428a      	cmp	r2, r1
 801fa4a:	bf04      	itt	eq
 801fa4c:	6811      	ldreq	r1, [r2, #0]
 801fa4e:	6852      	ldreq	r2, [r2, #4]
 801fa50:	6062      	str	r2, [r4, #4]
 801fa52:	bf04      	itt	eq
 801fa54:	1809      	addeq	r1, r1, r0
 801fa56:	6021      	streq	r1, [r4, #0]
 801fa58:	605c      	str	r4, [r3, #4]
 801fa5a:	e7c7      	b.n	801f9ec <_free_r+0x24>
 801fa5c:	bd38      	pop	{r3, r4, r5, pc}
 801fa5e:	bf00      	nop
 801fa60:	200000a0 	.word	0x200000a0

0801fa64 <_malloc_r>:
 801fa64:	b570      	push	{r4, r5, r6, lr}
 801fa66:	1ccd      	adds	r5, r1, #3
 801fa68:	f025 0503 	bic.w	r5, r5, #3
 801fa6c:	3508      	adds	r5, #8
 801fa6e:	2d0c      	cmp	r5, #12
 801fa70:	bf38      	it	cc
 801fa72:	250c      	movcc	r5, #12
 801fa74:	2d00      	cmp	r5, #0
 801fa76:	4606      	mov	r6, r0
 801fa78:	db01      	blt.n	801fa7e <_malloc_r+0x1a>
 801fa7a:	42a9      	cmp	r1, r5
 801fa7c:	d903      	bls.n	801fa86 <_malloc_r+0x22>
 801fa7e:	230c      	movs	r3, #12
 801fa80:	6033      	str	r3, [r6, #0]
 801fa82:	2000      	movs	r0, #0
 801fa84:	bd70      	pop	{r4, r5, r6, pc}
 801fa86:	f000 fb55 	bl	8020134 <__malloc_lock>
 801fa8a:	4a21      	ldr	r2, [pc, #132]	; (801fb10 <_malloc_r+0xac>)
 801fa8c:	6814      	ldr	r4, [r2, #0]
 801fa8e:	4621      	mov	r1, r4
 801fa90:	b991      	cbnz	r1, 801fab8 <_malloc_r+0x54>
 801fa92:	4c20      	ldr	r4, [pc, #128]	; (801fb14 <_malloc_r+0xb0>)
 801fa94:	6823      	ldr	r3, [r4, #0]
 801fa96:	b91b      	cbnz	r3, 801faa0 <_malloc_r+0x3c>
 801fa98:	4630      	mov	r0, r6
 801fa9a:	f000 fb17 	bl	80200cc <_sbrk_r>
 801fa9e:	6020      	str	r0, [r4, #0]
 801faa0:	4629      	mov	r1, r5
 801faa2:	4630      	mov	r0, r6
 801faa4:	f000 fb12 	bl	80200cc <_sbrk_r>
 801faa8:	1c43      	adds	r3, r0, #1
 801faaa:	d124      	bne.n	801faf6 <_malloc_r+0x92>
 801faac:	230c      	movs	r3, #12
 801faae:	6033      	str	r3, [r6, #0]
 801fab0:	4630      	mov	r0, r6
 801fab2:	f000 fb40 	bl	8020136 <__malloc_unlock>
 801fab6:	e7e4      	b.n	801fa82 <_malloc_r+0x1e>
 801fab8:	680b      	ldr	r3, [r1, #0]
 801faba:	1b5b      	subs	r3, r3, r5
 801fabc:	d418      	bmi.n	801faf0 <_malloc_r+0x8c>
 801fabe:	2b0b      	cmp	r3, #11
 801fac0:	d90f      	bls.n	801fae2 <_malloc_r+0x7e>
 801fac2:	600b      	str	r3, [r1, #0]
 801fac4:	50cd      	str	r5, [r1, r3]
 801fac6:	18cc      	adds	r4, r1, r3
 801fac8:	4630      	mov	r0, r6
 801faca:	f000 fb34 	bl	8020136 <__malloc_unlock>
 801face:	f104 000b 	add.w	r0, r4, #11
 801fad2:	1d23      	adds	r3, r4, #4
 801fad4:	f020 0007 	bic.w	r0, r0, #7
 801fad8:	1ac3      	subs	r3, r0, r3
 801fada:	d0d3      	beq.n	801fa84 <_malloc_r+0x20>
 801fadc:	425a      	negs	r2, r3
 801fade:	50e2      	str	r2, [r4, r3]
 801fae0:	e7d0      	b.n	801fa84 <_malloc_r+0x20>
 801fae2:	428c      	cmp	r4, r1
 801fae4:	684b      	ldr	r3, [r1, #4]
 801fae6:	bf16      	itet	ne
 801fae8:	6063      	strne	r3, [r4, #4]
 801faea:	6013      	streq	r3, [r2, #0]
 801faec:	460c      	movne	r4, r1
 801faee:	e7eb      	b.n	801fac8 <_malloc_r+0x64>
 801faf0:	460c      	mov	r4, r1
 801faf2:	6849      	ldr	r1, [r1, #4]
 801faf4:	e7cc      	b.n	801fa90 <_malloc_r+0x2c>
 801faf6:	1cc4      	adds	r4, r0, #3
 801faf8:	f024 0403 	bic.w	r4, r4, #3
 801fafc:	42a0      	cmp	r0, r4
 801fafe:	d005      	beq.n	801fb0c <_malloc_r+0xa8>
 801fb00:	1a21      	subs	r1, r4, r0
 801fb02:	4630      	mov	r0, r6
 801fb04:	f000 fae2 	bl	80200cc <_sbrk_r>
 801fb08:	3001      	adds	r0, #1
 801fb0a:	d0cf      	beq.n	801faac <_malloc_r+0x48>
 801fb0c:	6025      	str	r5, [r4, #0]
 801fb0e:	e7db      	b.n	801fac8 <_malloc_r+0x64>
 801fb10:	200000a0 	.word	0x200000a0
 801fb14:	200000a4 	.word	0x200000a4

0801fb18 <__ssputs_r>:
 801fb18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801fb1c:	688e      	ldr	r6, [r1, #8]
 801fb1e:	429e      	cmp	r6, r3
 801fb20:	4682      	mov	sl, r0
 801fb22:	460c      	mov	r4, r1
 801fb24:	4690      	mov	r8, r2
 801fb26:	4699      	mov	r9, r3
 801fb28:	d837      	bhi.n	801fb9a <__ssputs_r+0x82>
 801fb2a:	898a      	ldrh	r2, [r1, #12]
 801fb2c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801fb30:	d031      	beq.n	801fb96 <__ssputs_r+0x7e>
 801fb32:	6825      	ldr	r5, [r4, #0]
 801fb34:	6909      	ldr	r1, [r1, #16]
 801fb36:	1a6f      	subs	r7, r5, r1
 801fb38:	6965      	ldr	r5, [r4, #20]
 801fb3a:	2302      	movs	r3, #2
 801fb3c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801fb40:	fb95 f5f3 	sdiv	r5, r5, r3
 801fb44:	f109 0301 	add.w	r3, r9, #1
 801fb48:	443b      	add	r3, r7
 801fb4a:	429d      	cmp	r5, r3
 801fb4c:	bf38      	it	cc
 801fb4e:	461d      	movcc	r5, r3
 801fb50:	0553      	lsls	r3, r2, #21
 801fb52:	d530      	bpl.n	801fbb6 <__ssputs_r+0x9e>
 801fb54:	4629      	mov	r1, r5
 801fb56:	f7ff ff85 	bl	801fa64 <_malloc_r>
 801fb5a:	4606      	mov	r6, r0
 801fb5c:	b950      	cbnz	r0, 801fb74 <__ssputs_r+0x5c>
 801fb5e:	230c      	movs	r3, #12
 801fb60:	f8ca 3000 	str.w	r3, [sl]
 801fb64:	89a3      	ldrh	r3, [r4, #12]
 801fb66:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801fb6a:	81a3      	strh	r3, [r4, #12]
 801fb6c:	f04f 30ff 	mov.w	r0, #4294967295
 801fb70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801fb74:	463a      	mov	r2, r7
 801fb76:	6921      	ldr	r1, [r4, #16]
 801fb78:	f000 fab8 	bl	80200ec <memcpy>
 801fb7c:	89a3      	ldrh	r3, [r4, #12]
 801fb7e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801fb82:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801fb86:	81a3      	strh	r3, [r4, #12]
 801fb88:	6126      	str	r6, [r4, #16]
 801fb8a:	6165      	str	r5, [r4, #20]
 801fb8c:	443e      	add	r6, r7
 801fb8e:	1bed      	subs	r5, r5, r7
 801fb90:	6026      	str	r6, [r4, #0]
 801fb92:	60a5      	str	r5, [r4, #8]
 801fb94:	464e      	mov	r6, r9
 801fb96:	454e      	cmp	r6, r9
 801fb98:	d900      	bls.n	801fb9c <__ssputs_r+0x84>
 801fb9a:	464e      	mov	r6, r9
 801fb9c:	4632      	mov	r2, r6
 801fb9e:	4641      	mov	r1, r8
 801fba0:	6820      	ldr	r0, [r4, #0]
 801fba2:	f000 faae 	bl	8020102 <memmove>
 801fba6:	68a3      	ldr	r3, [r4, #8]
 801fba8:	1b9b      	subs	r3, r3, r6
 801fbaa:	60a3      	str	r3, [r4, #8]
 801fbac:	6823      	ldr	r3, [r4, #0]
 801fbae:	441e      	add	r6, r3
 801fbb0:	6026      	str	r6, [r4, #0]
 801fbb2:	2000      	movs	r0, #0
 801fbb4:	e7dc      	b.n	801fb70 <__ssputs_r+0x58>
 801fbb6:	462a      	mov	r2, r5
 801fbb8:	f000 fabe 	bl	8020138 <_realloc_r>
 801fbbc:	4606      	mov	r6, r0
 801fbbe:	2800      	cmp	r0, #0
 801fbc0:	d1e2      	bne.n	801fb88 <__ssputs_r+0x70>
 801fbc2:	6921      	ldr	r1, [r4, #16]
 801fbc4:	4650      	mov	r0, sl
 801fbc6:	f7ff feff 	bl	801f9c8 <_free_r>
 801fbca:	e7c8      	b.n	801fb5e <__ssputs_r+0x46>

0801fbcc <_svfiprintf_r>:
 801fbcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fbd0:	461d      	mov	r5, r3
 801fbd2:	898b      	ldrh	r3, [r1, #12]
 801fbd4:	061f      	lsls	r7, r3, #24
 801fbd6:	b09d      	sub	sp, #116	; 0x74
 801fbd8:	4680      	mov	r8, r0
 801fbda:	460c      	mov	r4, r1
 801fbdc:	4616      	mov	r6, r2
 801fbde:	d50f      	bpl.n	801fc00 <_svfiprintf_r+0x34>
 801fbe0:	690b      	ldr	r3, [r1, #16]
 801fbe2:	b96b      	cbnz	r3, 801fc00 <_svfiprintf_r+0x34>
 801fbe4:	2140      	movs	r1, #64	; 0x40
 801fbe6:	f7ff ff3d 	bl	801fa64 <_malloc_r>
 801fbea:	6020      	str	r0, [r4, #0]
 801fbec:	6120      	str	r0, [r4, #16]
 801fbee:	b928      	cbnz	r0, 801fbfc <_svfiprintf_r+0x30>
 801fbf0:	230c      	movs	r3, #12
 801fbf2:	f8c8 3000 	str.w	r3, [r8]
 801fbf6:	f04f 30ff 	mov.w	r0, #4294967295
 801fbfa:	e0c8      	b.n	801fd8e <_svfiprintf_r+0x1c2>
 801fbfc:	2340      	movs	r3, #64	; 0x40
 801fbfe:	6163      	str	r3, [r4, #20]
 801fc00:	2300      	movs	r3, #0
 801fc02:	9309      	str	r3, [sp, #36]	; 0x24
 801fc04:	2320      	movs	r3, #32
 801fc06:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801fc0a:	2330      	movs	r3, #48	; 0x30
 801fc0c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801fc10:	9503      	str	r5, [sp, #12]
 801fc12:	f04f 0b01 	mov.w	fp, #1
 801fc16:	4637      	mov	r7, r6
 801fc18:	463d      	mov	r5, r7
 801fc1a:	f815 3b01 	ldrb.w	r3, [r5], #1
 801fc1e:	b10b      	cbz	r3, 801fc24 <_svfiprintf_r+0x58>
 801fc20:	2b25      	cmp	r3, #37	; 0x25
 801fc22:	d13e      	bne.n	801fca2 <_svfiprintf_r+0xd6>
 801fc24:	ebb7 0a06 	subs.w	sl, r7, r6
 801fc28:	d00b      	beq.n	801fc42 <_svfiprintf_r+0x76>
 801fc2a:	4653      	mov	r3, sl
 801fc2c:	4632      	mov	r2, r6
 801fc2e:	4621      	mov	r1, r4
 801fc30:	4640      	mov	r0, r8
 801fc32:	f7ff ff71 	bl	801fb18 <__ssputs_r>
 801fc36:	3001      	adds	r0, #1
 801fc38:	f000 80a4 	beq.w	801fd84 <_svfiprintf_r+0x1b8>
 801fc3c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801fc3e:	4453      	add	r3, sl
 801fc40:	9309      	str	r3, [sp, #36]	; 0x24
 801fc42:	783b      	ldrb	r3, [r7, #0]
 801fc44:	2b00      	cmp	r3, #0
 801fc46:	f000 809d 	beq.w	801fd84 <_svfiprintf_r+0x1b8>
 801fc4a:	2300      	movs	r3, #0
 801fc4c:	f04f 32ff 	mov.w	r2, #4294967295
 801fc50:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801fc54:	9304      	str	r3, [sp, #16]
 801fc56:	9307      	str	r3, [sp, #28]
 801fc58:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801fc5c:	931a      	str	r3, [sp, #104]	; 0x68
 801fc5e:	462f      	mov	r7, r5
 801fc60:	2205      	movs	r2, #5
 801fc62:	f817 1b01 	ldrb.w	r1, [r7], #1
 801fc66:	4850      	ldr	r0, [pc, #320]	; (801fda8 <_svfiprintf_r+0x1dc>)
 801fc68:	f7e0 fac2 	bl	80001f0 <memchr>
 801fc6c:	9b04      	ldr	r3, [sp, #16]
 801fc6e:	b9d0      	cbnz	r0, 801fca6 <_svfiprintf_r+0xda>
 801fc70:	06d9      	lsls	r1, r3, #27
 801fc72:	bf44      	itt	mi
 801fc74:	2220      	movmi	r2, #32
 801fc76:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801fc7a:	071a      	lsls	r2, r3, #28
 801fc7c:	bf44      	itt	mi
 801fc7e:	222b      	movmi	r2, #43	; 0x2b
 801fc80:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801fc84:	782a      	ldrb	r2, [r5, #0]
 801fc86:	2a2a      	cmp	r2, #42	; 0x2a
 801fc88:	d015      	beq.n	801fcb6 <_svfiprintf_r+0xea>
 801fc8a:	9a07      	ldr	r2, [sp, #28]
 801fc8c:	462f      	mov	r7, r5
 801fc8e:	2000      	movs	r0, #0
 801fc90:	250a      	movs	r5, #10
 801fc92:	4639      	mov	r1, r7
 801fc94:	f811 3b01 	ldrb.w	r3, [r1], #1
 801fc98:	3b30      	subs	r3, #48	; 0x30
 801fc9a:	2b09      	cmp	r3, #9
 801fc9c:	d94d      	bls.n	801fd3a <_svfiprintf_r+0x16e>
 801fc9e:	b1b8      	cbz	r0, 801fcd0 <_svfiprintf_r+0x104>
 801fca0:	e00f      	b.n	801fcc2 <_svfiprintf_r+0xf6>
 801fca2:	462f      	mov	r7, r5
 801fca4:	e7b8      	b.n	801fc18 <_svfiprintf_r+0x4c>
 801fca6:	4a40      	ldr	r2, [pc, #256]	; (801fda8 <_svfiprintf_r+0x1dc>)
 801fca8:	1a80      	subs	r0, r0, r2
 801fcaa:	fa0b f000 	lsl.w	r0, fp, r0
 801fcae:	4318      	orrs	r0, r3
 801fcb0:	9004      	str	r0, [sp, #16]
 801fcb2:	463d      	mov	r5, r7
 801fcb4:	e7d3      	b.n	801fc5e <_svfiprintf_r+0x92>
 801fcb6:	9a03      	ldr	r2, [sp, #12]
 801fcb8:	1d11      	adds	r1, r2, #4
 801fcba:	6812      	ldr	r2, [r2, #0]
 801fcbc:	9103      	str	r1, [sp, #12]
 801fcbe:	2a00      	cmp	r2, #0
 801fcc0:	db01      	blt.n	801fcc6 <_svfiprintf_r+0xfa>
 801fcc2:	9207      	str	r2, [sp, #28]
 801fcc4:	e004      	b.n	801fcd0 <_svfiprintf_r+0x104>
 801fcc6:	4252      	negs	r2, r2
 801fcc8:	f043 0302 	orr.w	r3, r3, #2
 801fccc:	9207      	str	r2, [sp, #28]
 801fcce:	9304      	str	r3, [sp, #16]
 801fcd0:	783b      	ldrb	r3, [r7, #0]
 801fcd2:	2b2e      	cmp	r3, #46	; 0x2e
 801fcd4:	d10c      	bne.n	801fcf0 <_svfiprintf_r+0x124>
 801fcd6:	787b      	ldrb	r3, [r7, #1]
 801fcd8:	2b2a      	cmp	r3, #42	; 0x2a
 801fcda:	d133      	bne.n	801fd44 <_svfiprintf_r+0x178>
 801fcdc:	9b03      	ldr	r3, [sp, #12]
 801fcde:	1d1a      	adds	r2, r3, #4
 801fce0:	681b      	ldr	r3, [r3, #0]
 801fce2:	9203      	str	r2, [sp, #12]
 801fce4:	2b00      	cmp	r3, #0
 801fce6:	bfb8      	it	lt
 801fce8:	f04f 33ff 	movlt.w	r3, #4294967295
 801fcec:	3702      	adds	r7, #2
 801fcee:	9305      	str	r3, [sp, #20]
 801fcf0:	4d2e      	ldr	r5, [pc, #184]	; (801fdac <_svfiprintf_r+0x1e0>)
 801fcf2:	7839      	ldrb	r1, [r7, #0]
 801fcf4:	2203      	movs	r2, #3
 801fcf6:	4628      	mov	r0, r5
 801fcf8:	f7e0 fa7a 	bl	80001f0 <memchr>
 801fcfc:	b138      	cbz	r0, 801fd0e <_svfiprintf_r+0x142>
 801fcfe:	2340      	movs	r3, #64	; 0x40
 801fd00:	1b40      	subs	r0, r0, r5
 801fd02:	fa03 f000 	lsl.w	r0, r3, r0
 801fd06:	9b04      	ldr	r3, [sp, #16]
 801fd08:	4303      	orrs	r3, r0
 801fd0a:	3701      	adds	r7, #1
 801fd0c:	9304      	str	r3, [sp, #16]
 801fd0e:	7839      	ldrb	r1, [r7, #0]
 801fd10:	4827      	ldr	r0, [pc, #156]	; (801fdb0 <_svfiprintf_r+0x1e4>)
 801fd12:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801fd16:	2206      	movs	r2, #6
 801fd18:	1c7e      	adds	r6, r7, #1
 801fd1a:	f7e0 fa69 	bl	80001f0 <memchr>
 801fd1e:	2800      	cmp	r0, #0
 801fd20:	d038      	beq.n	801fd94 <_svfiprintf_r+0x1c8>
 801fd22:	4b24      	ldr	r3, [pc, #144]	; (801fdb4 <_svfiprintf_r+0x1e8>)
 801fd24:	bb13      	cbnz	r3, 801fd6c <_svfiprintf_r+0x1a0>
 801fd26:	9b03      	ldr	r3, [sp, #12]
 801fd28:	3307      	adds	r3, #7
 801fd2a:	f023 0307 	bic.w	r3, r3, #7
 801fd2e:	3308      	adds	r3, #8
 801fd30:	9303      	str	r3, [sp, #12]
 801fd32:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801fd34:	444b      	add	r3, r9
 801fd36:	9309      	str	r3, [sp, #36]	; 0x24
 801fd38:	e76d      	b.n	801fc16 <_svfiprintf_r+0x4a>
 801fd3a:	fb05 3202 	mla	r2, r5, r2, r3
 801fd3e:	2001      	movs	r0, #1
 801fd40:	460f      	mov	r7, r1
 801fd42:	e7a6      	b.n	801fc92 <_svfiprintf_r+0xc6>
 801fd44:	2300      	movs	r3, #0
 801fd46:	3701      	adds	r7, #1
 801fd48:	9305      	str	r3, [sp, #20]
 801fd4a:	4619      	mov	r1, r3
 801fd4c:	250a      	movs	r5, #10
 801fd4e:	4638      	mov	r0, r7
 801fd50:	f810 2b01 	ldrb.w	r2, [r0], #1
 801fd54:	3a30      	subs	r2, #48	; 0x30
 801fd56:	2a09      	cmp	r2, #9
 801fd58:	d903      	bls.n	801fd62 <_svfiprintf_r+0x196>
 801fd5a:	2b00      	cmp	r3, #0
 801fd5c:	d0c8      	beq.n	801fcf0 <_svfiprintf_r+0x124>
 801fd5e:	9105      	str	r1, [sp, #20]
 801fd60:	e7c6      	b.n	801fcf0 <_svfiprintf_r+0x124>
 801fd62:	fb05 2101 	mla	r1, r5, r1, r2
 801fd66:	2301      	movs	r3, #1
 801fd68:	4607      	mov	r7, r0
 801fd6a:	e7f0      	b.n	801fd4e <_svfiprintf_r+0x182>
 801fd6c:	ab03      	add	r3, sp, #12
 801fd6e:	9300      	str	r3, [sp, #0]
 801fd70:	4622      	mov	r2, r4
 801fd72:	4b11      	ldr	r3, [pc, #68]	; (801fdb8 <_svfiprintf_r+0x1ec>)
 801fd74:	a904      	add	r1, sp, #16
 801fd76:	4640      	mov	r0, r8
 801fd78:	f3af 8000 	nop.w
 801fd7c:	f1b0 3fff 	cmp.w	r0, #4294967295
 801fd80:	4681      	mov	r9, r0
 801fd82:	d1d6      	bne.n	801fd32 <_svfiprintf_r+0x166>
 801fd84:	89a3      	ldrh	r3, [r4, #12]
 801fd86:	065b      	lsls	r3, r3, #25
 801fd88:	f53f af35 	bmi.w	801fbf6 <_svfiprintf_r+0x2a>
 801fd8c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801fd8e:	b01d      	add	sp, #116	; 0x74
 801fd90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801fd94:	ab03      	add	r3, sp, #12
 801fd96:	9300      	str	r3, [sp, #0]
 801fd98:	4622      	mov	r2, r4
 801fd9a:	4b07      	ldr	r3, [pc, #28]	; (801fdb8 <_svfiprintf_r+0x1ec>)
 801fd9c:	a904      	add	r1, sp, #16
 801fd9e:	4640      	mov	r0, r8
 801fda0:	f000 f882 	bl	801fea8 <_printf_i>
 801fda4:	e7ea      	b.n	801fd7c <_svfiprintf_r+0x1b0>
 801fda6:	bf00      	nop
 801fda8:	0802a98c 	.word	0x0802a98c
 801fdac:	0802a992 	.word	0x0802a992
 801fdb0:	0802a996 	.word	0x0802a996
 801fdb4:	00000000 	.word	0x00000000
 801fdb8:	0801fb19 	.word	0x0801fb19

0801fdbc <_printf_common>:
 801fdbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801fdc0:	4691      	mov	r9, r2
 801fdc2:	461f      	mov	r7, r3
 801fdc4:	688a      	ldr	r2, [r1, #8]
 801fdc6:	690b      	ldr	r3, [r1, #16]
 801fdc8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801fdcc:	4293      	cmp	r3, r2
 801fdce:	bfb8      	it	lt
 801fdd0:	4613      	movlt	r3, r2
 801fdd2:	f8c9 3000 	str.w	r3, [r9]
 801fdd6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801fdda:	4606      	mov	r6, r0
 801fddc:	460c      	mov	r4, r1
 801fdde:	b112      	cbz	r2, 801fde6 <_printf_common+0x2a>
 801fde0:	3301      	adds	r3, #1
 801fde2:	f8c9 3000 	str.w	r3, [r9]
 801fde6:	6823      	ldr	r3, [r4, #0]
 801fde8:	0699      	lsls	r1, r3, #26
 801fdea:	bf42      	ittt	mi
 801fdec:	f8d9 3000 	ldrmi.w	r3, [r9]
 801fdf0:	3302      	addmi	r3, #2
 801fdf2:	f8c9 3000 	strmi.w	r3, [r9]
 801fdf6:	6825      	ldr	r5, [r4, #0]
 801fdf8:	f015 0506 	ands.w	r5, r5, #6
 801fdfc:	d107      	bne.n	801fe0e <_printf_common+0x52>
 801fdfe:	f104 0a19 	add.w	sl, r4, #25
 801fe02:	68e3      	ldr	r3, [r4, #12]
 801fe04:	f8d9 2000 	ldr.w	r2, [r9]
 801fe08:	1a9b      	subs	r3, r3, r2
 801fe0a:	42ab      	cmp	r3, r5
 801fe0c:	dc28      	bgt.n	801fe60 <_printf_common+0xa4>
 801fe0e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 801fe12:	6822      	ldr	r2, [r4, #0]
 801fe14:	3300      	adds	r3, #0
 801fe16:	bf18      	it	ne
 801fe18:	2301      	movne	r3, #1
 801fe1a:	0692      	lsls	r2, r2, #26
 801fe1c:	d42d      	bmi.n	801fe7a <_printf_common+0xbe>
 801fe1e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801fe22:	4639      	mov	r1, r7
 801fe24:	4630      	mov	r0, r6
 801fe26:	47c0      	blx	r8
 801fe28:	3001      	adds	r0, #1
 801fe2a:	d020      	beq.n	801fe6e <_printf_common+0xb2>
 801fe2c:	6823      	ldr	r3, [r4, #0]
 801fe2e:	68e5      	ldr	r5, [r4, #12]
 801fe30:	f8d9 2000 	ldr.w	r2, [r9]
 801fe34:	f003 0306 	and.w	r3, r3, #6
 801fe38:	2b04      	cmp	r3, #4
 801fe3a:	bf08      	it	eq
 801fe3c:	1aad      	subeq	r5, r5, r2
 801fe3e:	68a3      	ldr	r3, [r4, #8]
 801fe40:	6922      	ldr	r2, [r4, #16]
 801fe42:	bf0c      	ite	eq
 801fe44:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801fe48:	2500      	movne	r5, #0
 801fe4a:	4293      	cmp	r3, r2
 801fe4c:	bfc4      	itt	gt
 801fe4e:	1a9b      	subgt	r3, r3, r2
 801fe50:	18ed      	addgt	r5, r5, r3
 801fe52:	f04f 0900 	mov.w	r9, #0
 801fe56:	341a      	adds	r4, #26
 801fe58:	454d      	cmp	r5, r9
 801fe5a:	d11a      	bne.n	801fe92 <_printf_common+0xd6>
 801fe5c:	2000      	movs	r0, #0
 801fe5e:	e008      	b.n	801fe72 <_printf_common+0xb6>
 801fe60:	2301      	movs	r3, #1
 801fe62:	4652      	mov	r2, sl
 801fe64:	4639      	mov	r1, r7
 801fe66:	4630      	mov	r0, r6
 801fe68:	47c0      	blx	r8
 801fe6a:	3001      	adds	r0, #1
 801fe6c:	d103      	bne.n	801fe76 <_printf_common+0xba>
 801fe6e:	f04f 30ff 	mov.w	r0, #4294967295
 801fe72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801fe76:	3501      	adds	r5, #1
 801fe78:	e7c3      	b.n	801fe02 <_printf_common+0x46>
 801fe7a:	18e1      	adds	r1, r4, r3
 801fe7c:	1c5a      	adds	r2, r3, #1
 801fe7e:	2030      	movs	r0, #48	; 0x30
 801fe80:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801fe84:	4422      	add	r2, r4
 801fe86:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801fe8a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801fe8e:	3302      	adds	r3, #2
 801fe90:	e7c5      	b.n	801fe1e <_printf_common+0x62>
 801fe92:	2301      	movs	r3, #1
 801fe94:	4622      	mov	r2, r4
 801fe96:	4639      	mov	r1, r7
 801fe98:	4630      	mov	r0, r6
 801fe9a:	47c0      	blx	r8
 801fe9c:	3001      	adds	r0, #1
 801fe9e:	d0e6      	beq.n	801fe6e <_printf_common+0xb2>
 801fea0:	f109 0901 	add.w	r9, r9, #1
 801fea4:	e7d8      	b.n	801fe58 <_printf_common+0x9c>
	...

0801fea8 <_printf_i>:
 801fea8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801feac:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 801feb0:	460c      	mov	r4, r1
 801feb2:	7e09      	ldrb	r1, [r1, #24]
 801feb4:	b085      	sub	sp, #20
 801feb6:	296e      	cmp	r1, #110	; 0x6e
 801feb8:	4617      	mov	r7, r2
 801feba:	4606      	mov	r6, r0
 801febc:	4698      	mov	r8, r3
 801febe:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801fec0:	f000 80b3 	beq.w	802002a <_printf_i+0x182>
 801fec4:	d822      	bhi.n	801ff0c <_printf_i+0x64>
 801fec6:	2963      	cmp	r1, #99	; 0x63
 801fec8:	d036      	beq.n	801ff38 <_printf_i+0x90>
 801feca:	d80a      	bhi.n	801fee2 <_printf_i+0x3a>
 801fecc:	2900      	cmp	r1, #0
 801fece:	f000 80b9 	beq.w	8020044 <_printf_i+0x19c>
 801fed2:	2958      	cmp	r1, #88	; 0x58
 801fed4:	f000 8083 	beq.w	801ffde <_printf_i+0x136>
 801fed8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801fedc:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 801fee0:	e032      	b.n	801ff48 <_printf_i+0xa0>
 801fee2:	2964      	cmp	r1, #100	; 0x64
 801fee4:	d001      	beq.n	801feea <_printf_i+0x42>
 801fee6:	2969      	cmp	r1, #105	; 0x69
 801fee8:	d1f6      	bne.n	801fed8 <_printf_i+0x30>
 801feea:	6820      	ldr	r0, [r4, #0]
 801feec:	6813      	ldr	r3, [r2, #0]
 801feee:	0605      	lsls	r5, r0, #24
 801fef0:	f103 0104 	add.w	r1, r3, #4
 801fef4:	d52a      	bpl.n	801ff4c <_printf_i+0xa4>
 801fef6:	681b      	ldr	r3, [r3, #0]
 801fef8:	6011      	str	r1, [r2, #0]
 801fefa:	2b00      	cmp	r3, #0
 801fefc:	da03      	bge.n	801ff06 <_printf_i+0x5e>
 801fefe:	222d      	movs	r2, #45	; 0x2d
 801ff00:	425b      	negs	r3, r3
 801ff02:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 801ff06:	486f      	ldr	r0, [pc, #444]	; (80200c4 <_printf_i+0x21c>)
 801ff08:	220a      	movs	r2, #10
 801ff0a:	e039      	b.n	801ff80 <_printf_i+0xd8>
 801ff0c:	2973      	cmp	r1, #115	; 0x73
 801ff0e:	f000 809d 	beq.w	802004c <_printf_i+0x1a4>
 801ff12:	d808      	bhi.n	801ff26 <_printf_i+0x7e>
 801ff14:	296f      	cmp	r1, #111	; 0x6f
 801ff16:	d020      	beq.n	801ff5a <_printf_i+0xb2>
 801ff18:	2970      	cmp	r1, #112	; 0x70
 801ff1a:	d1dd      	bne.n	801fed8 <_printf_i+0x30>
 801ff1c:	6823      	ldr	r3, [r4, #0]
 801ff1e:	f043 0320 	orr.w	r3, r3, #32
 801ff22:	6023      	str	r3, [r4, #0]
 801ff24:	e003      	b.n	801ff2e <_printf_i+0x86>
 801ff26:	2975      	cmp	r1, #117	; 0x75
 801ff28:	d017      	beq.n	801ff5a <_printf_i+0xb2>
 801ff2a:	2978      	cmp	r1, #120	; 0x78
 801ff2c:	d1d4      	bne.n	801fed8 <_printf_i+0x30>
 801ff2e:	2378      	movs	r3, #120	; 0x78
 801ff30:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801ff34:	4864      	ldr	r0, [pc, #400]	; (80200c8 <_printf_i+0x220>)
 801ff36:	e055      	b.n	801ffe4 <_printf_i+0x13c>
 801ff38:	6813      	ldr	r3, [r2, #0]
 801ff3a:	1d19      	adds	r1, r3, #4
 801ff3c:	681b      	ldr	r3, [r3, #0]
 801ff3e:	6011      	str	r1, [r2, #0]
 801ff40:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801ff44:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801ff48:	2301      	movs	r3, #1
 801ff4a:	e08c      	b.n	8020066 <_printf_i+0x1be>
 801ff4c:	681b      	ldr	r3, [r3, #0]
 801ff4e:	6011      	str	r1, [r2, #0]
 801ff50:	f010 0f40 	tst.w	r0, #64	; 0x40
 801ff54:	bf18      	it	ne
 801ff56:	b21b      	sxthne	r3, r3
 801ff58:	e7cf      	b.n	801fefa <_printf_i+0x52>
 801ff5a:	6813      	ldr	r3, [r2, #0]
 801ff5c:	6825      	ldr	r5, [r4, #0]
 801ff5e:	1d18      	adds	r0, r3, #4
 801ff60:	6010      	str	r0, [r2, #0]
 801ff62:	0628      	lsls	r0, r5, #24
 801ff64:	d501      	bpl.n	801ff6a <_printf_i+0xc2>
 801ff66:	681b      	ldr	r3, [r3, #0]
 801ff68:	e002      	b.n	801ff70 <_printf_i+0xc8>
 801ff6a:	0668      	lsls	r0, r5, #25
 801ff6c:	d5fb      	bpl.n	801ff66 <_printf_i+0xbe>
 801ff6e:	881b      	ldrh	r3, [r3, #0]
 801ff70:	4854      	ldr	r0, [pc, #336]	; (80200c4 <_printf_i+0x21c>)
 801ff72:	296f      	cmp	r1, #111	; 0x6f
 801ff74:	bf14      	ite	ne
 801ff76:	220a      	movne	r2, #10
 801ff78:	2208      	moveq	r2, #8
 801ff7a:	2100      	movs	r1, #0
 801ff7c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801ff80:	6865      	ldr	r5, [r4, #4]
 801ff82:	60a5      	str	r5, [r4, #8]
 801ff84:	2d00      	cmp	r5, #0
 801ff86:	f2c0 8095 	blt.w	80200b4 <_printf_i+0x20c>
 801ff8a:	6821      	ldr	r1, [r4, #0]
 801ff8c:	f021 0104 	bic.w	r1, r1, #4
 801ff90:	6021      	str	r1, [r4, #0]
 801ff92:	2b00      	cmp	r3, #0
 801ff94:	d13d      	bne.n	8020012 <_printf_i+0x16a>
 801ff96:	2d00      	cmp	r5, #0
 801ff98:	f040 808e 	bne.w	80200b8 <_printf_i+0x210>
 801ff9c:	4665      	mov	r5, ip
 801ff9e:	2a08      	cmp	r2, #8
 801ffa0:	d10b      	bne.n	801ffba <_printf_i+0x112>
 801ffa2:	6823      	ldr	r3, [r4, #0]
 801ffa4:	07db      	lsls	r3, r3, #31
 801ffa6:	d508      	bpl.n	801ffba <_printf_i+0x112>
 801ffa8:	6923      	ldr	r3, [r4, #16]
 801ffaa:	6862      	ldr	r2, [r4, #4]
 801ffac:	429a      	cmp	r2, r3
 801ffae:	bfde      	ittt	le
 801ffb0:	2330      	movle	r3, #48	; 0x30
 801ffb2:	f805 3c01 	strble.w	r3, [r5, #-1]
 801ffb6:	f105 35ff 	addle.w	r5, r5, #4294967295
 801ffba:	ebac 0305 	sub.w	r3, ip, r5
 801ffbe:	6123      	str	r3, [r4, #16]
 801ffc0:	f8cd 8000 	str.w	r8, [sp]
 801ffc4:	463b      	mov	r3, r7
 801ffc6:	aa03      	add	r2, sp, #12
 801ffc8:	4621      	mov	r1, r4
 801ffca:	4630      	mov	r0, r6
 801ffcc:	f7ff fef6 	bl	801fdbc <_printf_common>
 801ffd0:	3001      	adds	r0, #1
 801ffd2:	d14d      	bne.n	8020070 <_printf_i+0x1c8>
 801ffd4:	f04f 30ff 	mov.w	r0, #4294967295
 801ffd8:	b005      	add	sp, #20
 801ffda:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801ffde:	4839      	ldr	r0, [pc, #228]	; (80200c4 <_printf_i+0x21c>)
 801ffe0:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 801ffe4:	6813      	ldr	r3, [r2, #0]
 801ffe6:	6821      	ldr	r1, [r4, #0]
 801ffe8:	1d1d      	adds	r5, r3, #4
 801ffea:	681b      	ldr	r3, [r3, #0]
 801ffec:	6015      	str	r5, [r2, #0]
 801ffee:	060a      	lsls	r2, r1, #24
 801fff0:	d50b      	bpl.n	802000a <_printf_i+0x162>
 801fff2:	07ca      	lsls	r2, r1, #31
 801fff4:	bf44      	itt	mi
 801fff6:	f041 0120 	orrmi.w	r1, r1, #32
 801fffa:	6021      	strmi	r1, [r4, #0]
 801fffc:	b91b      	cbnz	r3, 8020006 <_printf_i+0x15e>
 801fffe:	6822      	ldr	r2, [r4, #0]
 8020000:	f022 0220 	bic.w	r2, r2, #32
 8020004:	6022      	str	r2, [r4, #0]
 8020006:	2210      	movs	r2, #16
 8020008:	e7b7      	b.n	801ff7a <_printf_i+0xd2>
 802000a:	064d      	lsls	r5, r1, #25
 802000c:	bf48      	it	mi
 802000e:	b29b      	uxthmi	r3, r3
 8020010:	e7ef      	b.n	801fff2 <_printf_i+0x14a>
 8020012:	4665      	mov	r5, ip
 8020014:	fbb3 f1f2 	udiv	r1, r3, r2
 8020018:	fb02 3311 	mls	r3, r2, r1, r3
 802001c:	5cc3      	ldrb	r3, [r0, r3]
 802001e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8020022:	460b      	mov	r3, r1
 8020024:	2900      	cmp	r1, #0
 8020026:	d1f5      	bne.n	8020014 <_printf_i+0x16c>
 8020028:	e7b9      	b.n	801ff9e <_printf_i+0xf6>
 802002a:	6813      	ldr	r3, [r2, #0]
 802002c:	6825      	ldr	r5, [r4, #0]
 802002e:	6961      	ldr	r1, [r4, #20]
 8020030:	1d18      	adds	r0, r3, #4
 8020032:	6010      	str	r0, [r2, #0]
 8020034:	0628      	lsls	r0, r5, #24
 8020036:	681b      	ldr	r3, [r3, #0]
 8020038:	d501      	bpl.n	802003e <_printf_i+0x196>
 802003a:	6019      	str	r1, [r3, #0]
 802003c:	e002      	b.n	8020044 <_printf_i+0x19c>
 802003e:	066a      	lsls	r2, r5, #25
 8020040:	d5fb      	bpl.n	802003a <_printf_i+0x192>
 8020042:	8019      	strh	r1, [r3, #0]
 8020044:	2300      	movs	r3, #0
 8020046:	6123      	str	r3, [r4, #16]
 8020048:	4665      	mov	r5, ip
 802004a:	e7b9      	b.n	801ffc0 <_printf_i+0x118>
 802004c:	6813      	ldr	r3, [r2, #0]
 802004e:	1d19      	adds	r1, r3, #4
 8020050:	6011      	str	r1, [r2, #0]
 8020052:	681d      	ldr	r5, [r3, #0]
 8020054:	6862      	ldr	r2, [r4, #4]
 8020056:	2100      	movs	r1, #0
 8020058:	4628      	mov	r0, r5
 802005a:	f7e0 f8c9 	bl	80001f0 <memchr>
 802005e:	b108      	cbz	r0, 8020064 <_printf_i+0x1bc>
 8020060:	1b40      	subs	r0, r0, r5
 8020062:	6060      	str	r0, [r4, #4]
 8020064:	6863      	ldr	r3, [r4, #4]
 8020066:	6123      	str	r3, [r4, #16]
 8020068:	2300      	movs	r3, #0
 802006a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 802006e:	e7a7      	b.n	801ffc0 <_printf_i+0x118>
 8020070:	6923      	ldr	r3, [r4, #16]
 8020072:	462a      	mov	r2, r5
 8020074:	4639      	mov	r1, r7
 8020076:	4630      	mov	r0, r6
 8020078:	47c0      	blx	r8
 802007a:	3001      	adds	r0, #1
 802007c:	d0aa      	beq.n	801ffd4 <_printf_i+0x12c>
 802007e:	6823      	ldr	r3, [r4, #0]
 8020080:	079b      	lsls	r3, r3, #30
 8020082:	d413      	bmi.n	80200ac <_printf_i+0x204>
 8020084:	68e0      	ldr	r0, [r4, #12]
 8020086:	9b03      	ldr	r3, [sp, #12]
 8020088:	4298      	cmp	r0, r3
 802008a:	bfb8      	it	lt
 802008c:	4618      	movlt	r0, r3
 802008e:	e7a3      	b.n	801ffd8 <_printf_i+0x130>
 8020090:	2301      	movs	r3, #1
 8020092:	464a      	mov	r2, r9
 8020094:	4639      	mov	r1, r7
 8020096:	4630      	mov	r0, r6
 8020098:	47c0      	blx	r8
 802009a:	3001      	adds	r0, #1
 802009c:	d09a      	beq.n	801ffd4 <_printf_i+0x12c>
 802009e:	3501      	adds	r5, #1
 80200a0:	68e3      	ldr	r3, [r4, #12]
 80200a2:	9a03      	ldr	r2, [sp, #12]
 80200a4:	1a9b      	subs	r3, r3, r2
 80200a6:	42ab      	cmp	r3, r5
 80200a8:	dcf2      	bgt.n	8020090 <_printf_i+0x1e8>
 80200aa:	e7eb      	b.n	8020084 <_printf_i+0x1dc>
 80200ac:	2500      	movs	r5, #0
 80200ae:	f104 0919 	add.w	r9, r4, #25
 80200b2:	e7f5      	b.n	80200a0 <_printf_i+0x1f8>
 80200b4:	2b00      	cmp	r3, #0
 80200b6:	d1ac      	bne.n	8020012 <_printf_i+0x16a>
 80200b8:	7803      	ldrb	r3, [r0, #0]
 80200ba:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80200be:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80200c2:	e76c      	b.n	801ff9e <_printf_i+0xf6>
 80200c4:	0802a99d 	.word	0x0802a99d
 80200c8:	0802a9ae 	.word	0x0802a9ae

080200cc <_sbrk_r>:
 80200cc:	b538      	push	{r3, r4, r5, lr}
 80200ce:	4c06      	ldr	r4, [pc, #24]	; (80200e8 <_sbrk_r+0x1c>)
 80200d0:	2300      	movs	r3, #0
 80200d2:	4605      	mov	r5, r0
 80200d4:	4608      	mov	r0, r1
 80200d6:	6023      	str	r3, [r4, #0]
 80200d8:	f7fb fcfc 	bl	801bad4 <_sbrk>
 80200dc:	1c43      	adds	r3, r0, #1
 80200de:	d102      	bne.n	80200e6 <_sbrk_r+0x1a>
 80200e0:	6823      	ldr	r3, [r4, #0]
 80200e2:	b103      	cbz	r3, 80200e6 <_sbrk_r+0x1a>
 80200e4:	602b      	str	r3, [r5, #0]
 80200e6:	bd38      	pop	{r3, r4, r5, pc}
 80200e8:	20005078 	.word	0x20005078

080200ec <memcpy>:
 80200ec:	b510      	push	{r4, lr}
 80200ee:	1e43      	subs	r3, r0, #1
 80200f0:	440a      	add	r2, r1
 80200f2:	4291      	cmp	r1, r2
 80200f4:	d100      	bne.n	80200f8 <memcpy+0xc>
 80200f6:	bd10      	pop	{r4, pc}
 80200f8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80200fc:	f803 4f01 	strb.w	r4, [r3, #1]!
 8020100:	e7f7      	b.n	80200f2 <memcpy+0x6>

08020102 <memmove>:
 8020102:	4288      	cmp	r0, r1
 8020104:	b510      	push	{r4, lr}
 8020106:	eb01 0302 	add.w	r3, r1, r2
 802010a:	d807      	bhi.n	802011c <memmove+0x1a>
 802010c:	1e42      	subs	r2, r0, #1
 802010e:	4299      	cmp	r1, r3
 8020110:	d00a      	beq.n	8020128 <memmove+0x26>
 8020112:	f811 4b01 	ldrb.w	r4, [r1], #1
 8020116:	f802 4f01 	strb.w	r4, [r2, #1]!
 802011a:	e7f8      	b.n	802010e <memmove+0xc>
 802011c:	4283      	cmp	r3, r0
 802011e:	d9f5      	bls.n	802010c <memmove+0xa>
 8020120:	1881      	adds	r1, r0, r2
 8020122:	1ad2      	subs	r2, r2, r3
 8020124:	42d3      	cmn	r3, r2
 8020126:	d100      	bne.n	802012a <memmove+0x28>
 8020128:	bd10      	pop	{r4, pc}
 802012a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 802012e:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8020132:	e7f7      	b.n	8020124 <memmove+0x22>

08020134 <__malloc_lock>:
 8020134:	4770      	bx	lr

08020136 <__malloc_unlock>:
 8020136:	4770      	bx	lr

08020138 <_realloc_r>:
 8020138:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802013a:	4607      	mov	r7, r0
 802013c:	4614      	mov	r4, r2
 802013e:	460e      	mov	r6, r1
 8020140:	b921      	cbnz	r1, 802014c <_realloc_r+0x14>
 8020142:	4611      	mov	r1, r2
 8020144:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8020148:	f7ff bc8c 	b.w	801fa64 <_malloc_r>
 802014c:	b922      	cbnz	r2, 8020158 <_realloc_r+0x20>
 802014e:	f7ff fc3b 	bl	801f9c8 <_free_r>
 8020152:	4625      	mov	r5, r4
 8020154:	4628      	mov	r0, r5
 8020156:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8020158:	f000 f814 	bl	8020184 <_malloc_usable_size_r>
 802015c:	42a0      	cmp	r0, r4
 802015e:	d20f      	bcs.n	8020180 <_realloc_r+0x48>
 8020160:	4621      	mov	r1, r4
 8020162:	4638      	mov	r0, r7
 8020164:	f7ff fc7e 	bl	801fa64 <_malloc_r>
 8020168:	4605      	mov	r5, r0
 802016a:	2800      	cmp	r0, #0
 802016c:	d0f2      	beq.n	8020154 <_realloc_r+0x1c>
 802016e:	4631      	mov	r1, r6
 8020170:	4622      	mov	r2, r4
 8020172:	f7ff ffbb 	bl	80200ec <memcpy>
 8020176:	4631      	mov	r1, r6
 8020178:	4638      	mov	r0, r7
 802017a:	f7ff fc25 	bl	801f9c8 <_free_r>
 802017e:	e7e9      	b.n	8020154 <_realloc_r+0x1c>
 8020180:	4635      	mov	r5, r6
 8020182:	e7e7      	b.n	8020154 <_realloc_r+0x1c>

08020184 <_malloc_usable_size_r>:
 8020184:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8020188:	1f18      	subs	r0, r3, #4
 802018a:	2b00      	cmp	r3, #0
 802018c:	bfbc      	itt	lt
 802018e:	580b      	ldrlt	r3, [r1, r0]
 8020190:	18c0      	addlt	r0, r0, r3
 8020192:	4770      	bx	lr

08020194 <pow>:
 8020194:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020198:	ed2d 8b04 	vpush	{d8-d9}
 802019c:	f8df 92d0 	ldr.w	r9, [pc, #720]	; 8020470 <pow+0x2dc>
 80201a0:	b08d      	sub	sp, #52	; 0x34
 80201a2:	ec57 6b10 	vmov	r6, r7, d0
 80201a6:	ec55 4b11 	vmov	r4, r5, d1
 80201aa:	f000 f965 	bl	8020478 <__ieee754_pow>
 80201ae:	f999 3000 	ldrsb.w	r3, [r9]
 80201b2:	9300      	str	r3, [sp, #0]
 80201b4:	3301      	adds	r3, #1
 80201b6:	eeb0 8a40 	vmov.f32	s16, s0
 80201ba:	eef0 8a60 	vmov.f32	s17, s1
 80201be:	46c8      	mov	r8, r9
 80201c0:	d05f      	beq.n	8020282 <pow+0xee>
 80201c2:	4622      	mov	r2, r4
 80201c4:	462b      	mov	r3, r5
 80201c6:	4620      	mov	r0, r4
 80201c8:	4629      	mov	r1, r5
 80201ca:	f7e0 fcb7 	bl	8000b3c <__aeabi_dcmpun>
 80201ce:	4683      	mov	fp, r0
 80201d0:	2800      	cmp	r0, #0
 80201d2:	d156      	bne.n	8020282 <pow+0xee>
 80201d4:	4632      	mov	r2, r6
 80201d6:	463b      	mov	r3, r7
 80201d8:	4630      	mov	r0, r6
 80201da:	4639      	mov	r1, r7
 80201dc:	f7e0 fcae 	bl	8000b3c <__aeabi_dcmpun>
 80201e0:	9001      	str	r0, [sp, #4]
 80201e2:	b1e8      	cbz	r0, 8020220 <pow+0x8c>
 80201e4:	2200      	movs	r2, #0
 80201e6:	2300      	movs	r3, #0
 80201e8:	4620      	mov	r0, r4
 80201ea:	4629      	mov	r1, r5
 80201ec:	f7e0 fc74 	bl	8000ad8 <__aeabi_dcmpeq>
 80201f0:	2800      	cmp	r0, #0
 80201f2:	d046      	beq.n	8020282 <pow+0xee>
 80201f4:	2301      	movs	r3, #1
 80201f6:	9302      	str	r3, [sp, #8]
 80201f8:	4b96      	ldr	r3, [pc, #600]	; (8020454 <pow+0x2c0>)
 80201fa:	9303      	str	r3, [sp, #12]
 80201fc:	4b96      	ldr	r3, [pc, #600]	; (8020458 <pow+0x2c4>)
 80201fe:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 8020202:	2200      	movs	r2, #0
 8020204:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8020208:	9b00      	ldr	r3, [sp, #0]
 802020a:	2b02      	cmp	r3, #2
 802020c:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8020210:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8020214:	d033      	beq.n	802027e <pow+0xea>
 8020216:	a802      	add	r0, sp, #8
 8020218:	f000 fefd 	bl	8021016 <matherr>
 802021c:	bb48      	cbnz	r0, 8020272 <pow+0xde>
 802021e:	e05d      	b.n	80202dc <pow+0x148>
 8020220:	f04f 0a00 	mov.w	sl, #0
 8020224:	f04f 0b00 	mov.w	fp, #0
 8020228:	4652      	mov	r2, sl
 802022a:	465b      	mov	r3, fp
 802022c:	4630      	mov	r0, r6
 802022e:	4639      	mov	r1, r7
 8020230:	f7e0 fc52 	bl	8000ad8 <__aeabi_dcmpeq>
 8020234:	ec4b ab19 	vmov	d9, sl, fp
 8020238:	2800      	cmp	r0, #0
 802023a:	d054      	beq.n	80202e6 <pow+0x152>
 802023c:	4652      	mov	r2, sl
 802023e:	465b      	mov	r3, fp
 8020240:	4620      	mov	r0, r4
 8020242:	4629      	mov	r1, r5
 8020244:	f7e0 fc48 	bl	8000ad8 <__aeabi_dcmpeq>
 8020248:	4680      	mov	r8, r0
 802024a:	b318      	cbz	r0, 8020294 <pow+0x100>
 802024c:	2301      	movs	r3, #1
 802024e:	9302      	str	r3, [sp, #8]
 8020250:	4b80      	ldr	r3, [pc, #512]	; (8020454 <pow+0x2c0>)
 8020252:	9303      	str	r3, [sp, #12]
 8020254:	9b01      	ldr	r3, [sp, #4]
 8020256:	930a      	str	r3, [sp, #40]	; 0x28
 8020258:	9b00      	ldr	r3, [sp, #0]
 802025a:	e9cd 6704 	strd	r6, r7, [sp, #16]
 802025e:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8020262:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8020266:	2b00      	cmp	r3, #0
 8020268:	d0d5      	beq.n	8020216 <pow+0x82>
 802026a:	4b7b      	ldr	r3, [pc, #492]	; (8020458 <pow+0x2c4>)
 802026c:	2200      	movs	r2, #0
 802026e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8020272:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8020274:	b11b      	cbz	r3, 802027e <pow+0xea>
 8020276:	f7ff fb55 	bl	801f924 <__errno>
 802027a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802027c:	6003      	str	r3, [r0, #0]
 802027e:	ed9d 8b08 	vldr	d8, [sp, #32]
 8020282:	eeb0 0a48 	vmov.f32	s0, s16
 8020286:	eef0 0a68 	vmov.f32	s1, s17
 802028a:	b00d      	add	sp, #52	; 0x34
 802028c:	ecbd 8b04 	vpop	{d8-d9}
 8020290:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020294:	ec45 4b10 	vmov	d0, r4, r5
 8020298:	f000 feb5 	bl	8021006 <finite>
 802029c:	2800      	cmp	r0, #0
 802029e:	d0f0      	beq.n	8020282 <pow+0xee>
 80202a0:	4652      	mov	r2, sl
 80202a2:	465b      	mov	r3, fp
 80202a4:	4620      	mov	r0, r4
 80202a6:	4629      	mov	r1, r5
 80202a8:	f7e0 fc20 	bl	8000aec <__aeabi_dcmplt>
 80202ac:	2800      	cmp	r0, #0
 80202ae:	d0e8      	beq.n	8020282 <pow+0xee>
 80202b0:	2301      	movs	r3, #1
 80202b2:	9302      	str	r3, [sp, #8]
 80202b4:	4b67      	ldr	r3, [pc, #412]	; (8020454 <pow+0x2c0>)
 80202b6:	9303      	str	r3, [sp, #12]
 80202b8:	f999 3000 	ldrsb.w	r3, [r9]
 80202bc:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 80202c0:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80202c4:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80202c8:	b913      	cbnz	r3, 80202d0 <pow+0x13c>
 80202ca:	e9cd ab08 	strd	sl, fp, [sp, #32]
 80202ce:	e7a2      	b.n	8020216 <pow+0x82>
 80202d0:	4962      	ldr	r1, [pc, #392]	; (802045c <pow+0x2c8>)
 80202d2:	2000      	movs	r0, #0
 80202d4:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80202d8:	2b02      	cmp	r3, #2
 80202da:	d19c      	bne.n	8020216 <pow+0x82>
 80202dc:	f7ff fb22 	bl	801f924 <__errno>
 80202e0:	2321      	movs	r3, #33	; 0x21
 80202e2:	6003      	str	r3, [r0, #0]
 80202e4:	e7c5      	b.n	8020272 <pow+0xde>
 80202e6:	eeb0 0a48 	vmov.f32	s0, s16
 80202ea:	eef0 0a68 	vmov.f32	s1, s17
 80202ee:	f000 fe8a 	bl	8021006 <finite>
 80202f2:	9000      	str	r0, [sp, #0]
 80202f4:	2800      	cmp	r0, #0
 80202f6:	f040 8081 	bne.w	80203fc <pow+0x268>
 80202fa:	ec47 6b10 	vmov	d0, r6, r7
 80202fe:	f000 fe82 	bl	8021006 <finite>
 8020302:	2800      	cmp	r0, #0
 8020304:	d07a      	beq.n	80203fc <pow+0x268>
 8020306:	ec45 4b10 	vmov	d0, r4, r5
 802030a:	f000 fe7c 	bl	8021006 <finite>
 802030e:	2800      	cmp	r0, #0
 8020310:	d074      	beq.n	80203fc <pow+0x268>
 8020312:	ec53 2b18 	vmov	r2, r3, d8
 8020316:	ee18 0a10 	vmov	r0, s16
 802031a:	4619      	mov	r1, r3
 802031c:	f7e0 fc0e 	bl	8000b3c <__aeabi_dcmpun>
 8020320:	f999 9000 	ldrsb.w	r9, [r9]
 8020324:	4b4b      	ldr	r3, [pc, #300]	; (8020454 <pow+0x2c0>)
 8020326:	b1b0      	cbz	r0, 8020356 <pow+0x1c2>
 8020328:	2201      	movs	r2, #1
 802032a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 802032e:	9b00      	ldr	r3, [sp, #0]
 8020330:	930a      	str	r3, [sp, #40]	; 0x28
 8020332:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8020336:	e9cd 4506 	strd	r4, r5, [sp, #24]
 802033a:	f1b9 0f00 	cmp.w	r9, #0
 802033e:	d0c4      	beq.n	80202ca <pow+0x136>
 8020340:	4652      	mov	r2, sl
 8020342:	465b      	mov	r3, fp
 8020344:	4650      	mov	r0, sl
 8020346:	4659      	mov	r1, fp
 8020348:	f7e0 fa88 	bl	800085c <__aeabi_ddiv>
 802034c:	f1b9 0f02 	cmp.w	r9, #2
 8020350:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8020354:	e7c1      	b.n	80202da <pow+0x146>
 8020356:	2203      	movs	r2, #3
 8020358:	e9cd 2302 	strd	r2, r3, [sp, #8]
 802035c:	900a      	str	r0, [sp, #40]	; 0x28
 802035e:	4629      	mov	r1, r5
 8020360:	4620      	mov	r0, r4
 8020362:	2200      	movs	r2, #0
 8020364:	4b3e      	ldr	r3, [pc, #248]	; (8020460 <pow+0x2cc>)
 8020366:	e9cd 4506 	strd	r4, r5, [sp, #24]
 802036a:	e9cd 6704 	strd	r6, r7, [sp, #16]
 802036e:	f7e0 f94b 	bl	8000608 <__aeabi_dmul>
 8020372:	4604      	mov	r4, r0
 8020374:	460d      	mov	r5, r1
 8020376:	f1b9 0f00 	cmp.w	r9, #0
 802037a:	d124      	bne.n	80203c6 <pow+0x232>
 802037c:	4b39      	ldr	r3, [pc, #228]	; (8020464 <pow+0x2d0>)
 802037e:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8020382:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8020386:	4630      	mov	r0, r6
 8020388:	4652      	mov	r2, sl
 802038a:	465b      	mov	r3, fp
 802038c:	4639      	mov	r1, r7
 802038e:	f7e0 fbad 	bl	8000aec <__aeabi_dcmplt>
 8020392:	2800      	cmp	r0, #0
 8020394:	d056      	beq.n	8020444 <pow+0x2b0>
 8020396:	ec45 4b10 	vmov	d0, r4, r5
 802039a:	f000 fe49 	bl	8021030 <rint>
 802039e:	4622      	mov	r2, r4
 80203a0:	462b      	mov	r3, r5
 80203a2:	ec51 0b10 	vmov	r0, r1, d0
 80203a6:	f7e0 fb97 	bl	8000ad8 <__aeabi_dcmpeq>
 80203aa:	b920      	cbnz	r0, 80203b6 <pow+0x222>
 80203ac:	4b2e      	ldr	r3, [pc, #184]	; (8020468 <pow+0x2d4>)
 80203ae:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80203b2:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80203b6:	f998 3000 	ldrsb.w	r3, [r8]
 80203ba:	2b02      	cmp	r3, #2
 80203bc:	d142      	bne.n	8020444 <pow+0x2b0>
 80203be:	f7ff fab1 	bl	801f924 <__errno>
 80203c2:	2322      	movs	r3, #34	; 0x22
 80203c4:	e78d      	b.n	80202e2 <pow+0x14e>
 80203c6:	4b29      	ldr	r3, [pc, #164]	; (802046c <pow+0x2d8>)
 80203c8:	2200      	movs	r2, #0
 80203ca:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80203ce:	4630      	mov	r0, r6
 80203d0:	4652      	mov	r2, sl
 80203d2:	465b      	mov	r3, fp
 80203d4:	4639      	mov	r1, r7
 80203d6:	f7e0 fb89 	bl	8000aec <__aeabi_dcmplt>
 80203da:	2800      	cmp	r0, #0
 80203dc:	d0eb      	beq.n	80203b6 <pow+0x222>
 80203de:	ec45 4b10 	vmov	d0, r4, r5
 80203e2:	f000 fe25 	bl	8021030 <rint>
 80203e6:	4622      	mov	r2, r4
 80203e8:	462b      	mov	r3, r5
 80203ea:	ec51 0b10 	vmov	r0, r1, d0
 80203ee:	f7e0 fb73 	bl	8000ad8 <__aeabi_dcmpeq>
 80203f2:	2800      	cmp	r0, #0
 80203f4:	d1df      	bne.n	80203b6 <pow+0x222>
 80203f6:	2200      	movs	r2, #0
 80203f8:	4b18      	ldr	r3, [pc, #96]	; (802045c <pow+0x2c8>)
 80203fa:	e7da      	b.n	80203b2 <pow+0x21e>
 80203fc:	2200      	movs	r2, #0
 80203fe:	2300      	movs	r3, #0
 8020400:	ec51 0b18 	vmov	r0, r1, d8
 8020404:	f7e0 fb68 	bl	8000ad8 <__aeabi_dcmpeq>
 8020408:	2800      	cmp	r0, #0
 802040a:	f43f af3a 	beq.w	8020282 <pow+0xee>
 802040e:	ec47 6b10 	vmov	d0, r6, r7
 8020412:	f000 fdf8 	bl	8021006 <finite>
 8020416:	2800      	cmp	r0, #0
 8020418:	f43f af33 	beq.w	8020282 <pow+0xee>
 802041c:	ec45 4b10 	vmov	d0, r4, r5
 8020420:	f000 fdf1 	bl	8021006 <finite>
 8020424:	2800      	cmp	r0, #0
 8020426:	f43f af2c 	beq.w	8020282 <pow+0xee>
 802042a:	2304      	movs	r3, #4
 802042c:	9302      	str	r3, [sp, #8]
 802042e:	4b09      	ldr	r3, [pc, #36]	; (8020454 <pow+0x2c0>)
 8020430:	9303      	str	r3, [sp, #12]
 8020432:	2300      	movs	r3, #0
 8020434:	930a      	str	r3, [sp, #40]	; 0x28
 8020436:	e9cd 6704 	strd	r6, r7, [sp, #16]
 802043a:	e9cd 4506 	strd	r4, r5, [sp, #24]
 802043e:	ed8d 9b08 	vstr	d9, [sp, #32]
 8020442:	e7b8      	b.n	80203b6 <pow+0x222>
 8020444:	a802      	add	r0, sp, #8
 8020446:	f000 fde6 	bl	8021016 <matherr>
 802044a:	2800      	cmp	r0, #0
 802044c:	f47f af11 	bne.w	8020272 <pow+0xde>
 8020450:	e7b5      	b.n	80203be <pow+0x22a>
 8020452:	bf00      	nop
 8020454:	0802a9bf 	.word	0x0802a9bf
 8020458:	3ff00000 	.word	0x3ff00000
 802045c:	fff00000 	.word	0xfff00000
 8020460:	3fe00000 	.word	0x3fe00000
 8020464:	47efffff 	.word	0x47efffff
 8020468:	c7efffff 	.word	0xc7efffff
 802046c:	7ff00000 	.word	0x7ff00000
 8020470:	20000070 	.word	0x20000070
 8020474:	00000000 	.word	0x00000000

08020478 <__ieee754_pow>:
 8020478:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802047c:	b091      	sub	sp, #68	; 0x44
 802047e:	ed8d 1b00 	vstr	d1, [sp]
 8020482:	e9dd 2900 	ldrd	r2, r9, [sp]
 8020486:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 802048a:	ea58 0302 	orrs.w	r3, r8, r2
 802048e:	ec57 6b10 	vmov	r6, r7, d0
 8020492:	f000 84be 	beq.w	8020e12 <__ieee754_pow+0x99a>
 8020496:	4b7a      	ldr	r3, [pc, #488]	; (8020680 <__ieee754_pow+0x208>)
 8020498:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 802049c:	429c      	cmp	r4, r3
 802049e:	463d      	mov	r5, r7
 80204a0:	ee10 aa10 	vmov	sl, s0
 80204a4:	dc09      	bgt.n	80204ba <__ieee754_pow+0x42>
 80204a6:	d103      	bne.n	80204b0 <__ieee754_pow+0x38>
 80204a8:	b93e      	cbnz	r6, 80204ba <__ieee754_pow+0x42>
 80204aa:	45a0      	cmp	r8, r4
 80204ac:	dc0d      	bgt.n	80204ca <__ieee754_pow+0x52>
 80204ae:	e001      	b.n	80204b4 <__ieee754_pow+0x3c>
 80204b0:	4598      	cmp	r8, r3
 80204b2:	dc02      	bgt.n	80204ba <__ieee754_pow+0x42>
 80204b4:	4598      	cmp	r8, r3
 80204b6:	d10e      	bne.n	80204d6 <__ieee754_pow+0x5e>
 80204b8:	b16a      	cbz	r2, 80204d6 <__ieee754_pow+0x5e>
 80204ba:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80204be:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80204c2:	ea54 030a 	orrs.w	r3, r4, sl
 80204c6:	f000 84a4 	beq.w	8020e12 <__ieee754_pow+0x99a>
 80204ca:	486e      	ldr	r0, [pc, #440]	; (8020684 <__ieee754_pow+0x20c>)
 80204cc:	b011      	add	sp, #68	; 0x44
 80204ce:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80204d2:	f000 bda5 	b.w	8021020 <nan>
 80204d6:	2d00      	cmp	r5, #0
 80204d8:	da53      	bge.n	8020582 <__ieee754_pow+0x10a>
 80204da:	4b6b      	ldr	r3, [pc, #428]	; (8020688 <__ieee754_pow+0x210>)
 80204dc:	4598      	cmp	r8, r3
 80204de:	dc4d      	bgt.n	802057c <__ieee754_pow+0x104>
 80204e0:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 80204e4:	4598      	cmp	r8, r3
 80204e6:	dd4c      	ble.n	8020582 <__ieee754_pow+0x10a>
 80204e8:	ea4f 5328 	mov.w	r3, r8, asr #20
 80204ec:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80204f0:	2b14      	cmp	r3, #20
 80204f2:	dd26      	ble.n	8020542 <__ieee754_pow+0xca>
 80204f4:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 80204f8:	fa22 f103 	lsr.w	r1, r2, r3
 80204fc:	fa01 f303 	lsl.w	r3, r1, r3
 8020500:	4293      	cmp	r3, r2
 8020502:	d13e      	bne.n	8020582 <__ieee754_pow+0x10a>
 8020504:	f001 0101 	and.w	r1, r1, #1
 8020508:	f1c1 0b02 	rsb	fp, r1, #2
 802050c:	2a00      	cmp	r2, #0
 802050e:	d15b      	bne.n	80205c8 <__ieee754_pow+0x150>
 8020510:	4b5b      	ldr	r3, [pc, #364]	; (8020680 <__ieee754_pow+0x208>)
 8020512:	4598      	cmp	r8, r3
 8020514:	d124      	bne.n	8020560 <__ieee754_pow+0xe8>
 8020516:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 802051a:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 802051e:	ea53 030a 	orrs.w	r3, r3, sl
 8020522:	f000 8476 	beq.w	8020e12 <__ieee754_pow+0x99a>
 8020526:	4b59      	ldr	r3, [pc, #356]	; (802068c <__ieee754_pow+0x214>)
 8020528:	429c      	cmp	r4, r3
 802052a:	dd2d      	ble.n	8020588 <__ieee754_pow+0x110>
 802052c:	f1b9 0f00 	cmp.w	r9, #0
 8020530:	f280 8473 	bge.w	8020e1a <__ieee754_pow+0x9a2>
 8020534:	2000      	movs	r0, #0
 8020536:	2100      	movs	r1, #0
 8020538:	ec41 0b10 	vmov	d0, r0, r1
 802053c:	b011      	add	sp, #68	; 0x44
 802053e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020542:	2a00      	cmp	r2, #0
 8020544:	d13e      	bne.n	80205c4 <__ieee754_pow+0x14c>
 8020546:	f1c3 0314 	rsb	r3, r3, #20
 802054a:	fa48 f103 	asr.w	r1, r8, r3
 802054e:	fa01 f303 	lsl.w	r3, r1, r3
 8020552:	4543      	cmp	r3, r8
 8020554:	f040 8469 	bne.w	8020e2a <__ieee754_pow+0x9b2>
 8020558:	f001 0101 	and.w	r1, r1, #1
 802055c:	f1c1 0b02 	rsb	fp, r1, #2
 8020560:	4b4b      	ldr	r3, [pc, #300]	; (8020690 <__ieee754_pow+0x218>)
 8020562:	4598      	cmp	r8, r3
 8020564:	d118      	bne.n	8020598 <__ieee754_pow+0x120>
 8020566:	f1b9 0f00 	cmp.w	r9, #0
 802056a:	f280 845a 	bge.w	8020e22 <__ieee754_pow+0x9aa>
 802056e:	4948      	ldr	r1, [pc, #288]	; (8020690 <__ieee754_pow+0x218>)
 8020570:	4632      	mov	r2, r6
 8020572:	463b      	mov	r3, r7
 8020574:	2000      	movs	r0, #0
 8020576:	f7e0 f971 	bl	800085c <__aeabi_ddiv>
 802057a:	e7dd      	b.n	8020538 <__ieee754_pow+0xc0>
 802057c:	f04f 0b02 	mov.w	fp, #2
 8020580:	e7c4      	b.n	802050c <__ieee754_pow+0x94>
 8020582:	f04f 0b00 	mov.w	fp, #0
 8020586:	e7c1      	b.n	802050c <__ieee754_pow+0x94>
 8020588:	f1b9 0f00 	cmp.w	r9, #0
 802058c:	dad2      	bge.n	8020534 <__ieee754_pow+0xbc>
 802058e:	e9dd 0300 	ldrd	r0, r3, [sp]
 8020592:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8020596:	e7cf      	b.n	8020538 <__ieee754_pow+0xc0>
 8020598:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 802059c:	d106      	bne.n	80205ac <__ieee754_pow+0x134>
 802059e:	4632      	mov	r2, r6
 80205a0:	463b      	mov	r3, r7
 80205a2:	4610      	mov	r0, r2
 80205a4:	4619      	mov	r1, r3
 80205a6:	f7e0 f82f 	bl	8000608 <__aeabi_dmul>
 80205aa:	e7c5      	b.n	8020538 <__ieee754_pow+0xc0>
 80205ac:	4b39      	ldr	r3, [pc, #228]	; (8020694 <__ieee754_pow+0x21c>)
 80205ae:	4599      	cmp	r9, r3
 80205b0:	d10a      	bne.n	80205c8 <__ieee754_pow+0x150>
 80205b2:	2d00      	cmp	r5, #0
 80205b4:	db08      	blt.n	80205c8 <__ieee754_pow+0x150>
 80205b6:	ec47 6b10 	vmov	d0, r6, r7
 80205ba:	b011      	add	sp, #68	; 0x44
 80205bc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80205c0:	f000 bc68 	b.w	8020e94 <__ieee754_sqrt>
 80205c4:	f04f 0b00 	mov.w	fp, #0
 80205c8:	ec47 6b10 	vmov	d0, r6, r7
 80205cc:	f000 fd12 	bl	8020ff4 <fabs>
 80205d0:	ec51 0b10 	vmov	r0, r1, d0
 80205d4:	f1ba 0f00 	cmp.w	sl, #0
 80205d8:	d127      	bne.n	802062a <__ieee754_pow+0x1b2>
 80205da:	b124      	cbz	r4, 80205e6 <__ieee754_pow+0x16e>
 80205dc:	4b2c      	ldr	r3, [pc, #176]	; (8020690 <__ieee754_pow+0x218>)
 80205de:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 80205e2:	429a      	cmp	r2, r3
 80205e4:	d121      	bne.n	802062a <__ieee754_pow+0x1b2>
 80205e6:	f1b9 0f00 	cmp.w	r9, #0
 80205ea:	da05      	bge.n	80205f8 <__ieee754_pow+0x180>
 80205ec:	4602      	mov	r2, r0
 80205ee:	460b      	mov	r3, r1
 80205f0:	2000      	movs	r0, #0
 80205f2:	4927      	ldr	r1, [pc, #156]	; (8020690 <__ieee754_pow+0x218>)
 80205f4:	f7e0 f932 	bl	800085c <__aeabi_ddiv>
 80205f8:	2d00      	cmp	r5, #0
 80205fa:	da9d      	bge.n	8020538 <__ieee754_pow+0xc0>
 80205fc:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8020600:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8020604:	ea54 030b 	orrs.w	r3, r4, fp
 8020608:	d108      	bne.n	802061c <__ieee754_pow+0x1a4>
 802060a:	4602      	mov	r2, r0
 802060c:	460b      	mov	r3, r1
 802060e:	4610      	mov	r0, r2
 8020610:	4619      	mov	r1, r3
 8020612:	f7df fe41 	bl	8000298 <__aeabi_dsub>
 8020616:	4602      	mov	r2, r0
 8020618:	460b      	mov	r3, r1
 802061a:	e7ac      	b.n	8020576 <__ieee754_pow+0xfe>
 802061c:	f1bb 0f01 	cmp.w	fp, #1
 8020620:	d18a      	bne.n	8020538 <__ieee754_pow+0xc0>
 8020622:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8020626:	4619      	mov	r1, r3
 8020628:	e786      	b.n	8020538 <__ieee754_pow+0xc0>
 802062a:	0fed      	lsrs	r5, r5, #31
 802062c:	1e6b      	subs	r3, r5, #1
 802062e:	930d      	str	r3, [sp, #52]	; 0x34
 8020630:	ea5b 0303 	orrs.w	r3, fp, r3
 8020634:	d102      	bne.n	802063c <__ieee754_pow+0x1c4>
 8020636:	4632      	mov	r2, r6
 8020638:	463b      	mov	r3, r7
 802063a:	e7e8      	b.n	802060e <__ieee754_pow+0x196>
 802063c:	4b16      	ldr	r3, [pc, #88]	; (8020698 <__ieee754_pow+0x220>)
 802063e:	4598      	cmp	r8, r3
 8020640:	f340 80fe 	ble.w	8020840 <__ieee754_pow+0x3c8>
 8020644:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8020648:	4598      	cmp	r8, r3
 802064a:	dd0a      	ble.n	8020662 <__ieee754_pow+0x1ea>
 802064c:	4b0f      	ldr	r3, [pc, #60]	; (802068c <__ieee754_pow+0x214>)
 802064e:	429c      	cmp	r4, r3
 8020650:	dc0d      	bgt.n	802066e <__ieee754_pow+0x1f6>
 8020652:	f1b9 0f00 	cmp.w	r9, #0
 8020656:	f6bf af6d 	bge.w	8020534 <__ieee754_pow+0xbc>
 802065a:	a307      	add	r3, pc, #28	; (adr r3, 8020678 <__ieee754_pow+0x200>)
 802065c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020660:	e79f      	b.n	80205a2 <__ieee754_pow+0x12a>
 8020662:	4b0e      	ldr	r3, [pc, #56]	; (802069c <__ieee754_pow+0x224>)
 8020664:	429c      	cmp	r4, r3
 8020666:	ddf4      	ble.n	8020652 <__ieee754_pow+0x1da>
 8020668:	4b09      	ldr	r3, [pc, #36]	; (8020690 <__ieee754_pow+0x218>)
 802066a:	429c      	cmp	r4, r3
 802066c:	dd18      	ble.n	80206a0 <__ieee754_pow+0x228>
 802066e:	f1b9 0f00 	cmp.w	r9, #0
 8020672:	dcf2      	bgt.n	802065a <__ieee754_pow+0x1e2>
 8020674:	e75e      	b.n	8020534 <__ieee754_pow+0xbc>
 8020676:	bf00      	nop
 8020678:	8800759c 	.word	0x8800759c
 802067c:	7e37e43c 	.word	0x7e37e43c
 8020680:	7ff00000 	.word	0x7ff00000
 8020684:	0802a991 	.word	0x0802a991
 8020688:	433fffff 	.word	0x433fffff
 802068c:	3fefffff 	.word	0x3fefffff
 8020690:	3ff00000 	.word	0x3ff00000
 8020694:	3fe00000 	.word	0x3fe00000
 8020698:	41e00000 	.word	0x41e00000
 802069c:	3feffffe 	.word	0x3feffffe
 80206a0:	2200      	movs	r2, #0
 80206a2:	4b63      	ldr	r3, [pc, #396]	; (8020830 <__ieee754_pow+0x3b8>)
 80206a4:	f7df fdf8 	bl	8000298 <__aeabi_dsub>
 80206a8:	a355      	add	r3, pc, #340	; (adr r3, 8020800 <__ieee754_pow+0x388>)
 80206aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80206ae:	4604      	mov	r4, r0
 80206b0:	460d      	mov	r5, r1
 80206b2:	f7df ffa9 	bl	8000608 <__aeabi_dmul>
 80206b6:	a354      	add	r3, pc, #336	; (adr r3, 8020808 <__ieee754_pow+0x390>)
 80206b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80206bc:	4606      	mov	r6, r0
 80206be:	460f      	mov	r7, r1
 80206c0:	4620      	mov	r0, r4
 80206c2:	4629      	mov	r1, r5
 80206c4:	f7df ffa0 	bl	8000608 <__aeabi_dmul>
 80206c8:	2200      	movs	r2, #0
 80206ca:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80206ce:	4b59      	ldr	r3, [pc, #356]	; (8020834 <__ieee754_pow+0x3bc>)
 80206d0:	4620      	mov	r0, r4
 80206d2:	4629      	mov	r1, r5
 80206d4:	f7df ff98 	bl	8000608 <__aeabi_dmul>
 80206d8:	4602      	mov	r2, r0
 80206da:	460b      	mov	r3, r1
 80206dc:	a14c      	add	r1, pc, #304	; (adr r1, 8020810 <__ieee754_pow+0x398>)
 80206de:	e9d1 0100 	ldrd	r0, r1, [r1]
 80206e2:	f7df fdd9 	bl	8000298 <__aeabi_dsub>
 80206e6:	4622      	mov	r2, r4
 80206e8:	462b      	mov	r3, r5
 80206ea:	f7df ff8d 	bl	8000608 <__aeabi_dmul>
 80206ee:	4602      	mov	r2, r0
 80206f0:	460b      	mov	r3, r1
 80206f2:	2000      	movs	r0, #0
 80206f4:	4950      	ldr	r1, [pc, #320]	; (8020838 <__ieee754_pow+0x3c0>)
 80206f6:	f7df fdcf 	bl	8000298 <__aeabi_dsub>
 80206fa:	4622      	mov	r2, r4
 80206fc:	462b      	mov	r3, r5
 80206fe:	4680      	mov	r8, r0
 8020700:	4689      	mov	r9, r1
 8020702:	4620      	mov	r0, r4
 8020704:	4629      	mov	r1, r5
 8020706:	f7df ff7f 	bl	8000608 <__aeabi_dmul>
 802070a:	4602      	mov	r2, r0
 802070c:	460b      	mov	r3, r1
 802070e:	4640      	mov	r0, r8
 8020710:	4649      	mov	r1, r9
 8020712:	f7df ff79 	bl	8000608 <__aeabi_dmul>
 8020716:	a340      	add	r3, pc, #256	; (adr r3, 8020818 <__ieee754_pow+0x3a0>)
 8020718:	e9d3 2300 	ldrd	r2, r3, [r3]
 802071c:	f7df ff74 	bl	8000608 <__aeabi_dmul>
 8020720:	4602      	mov	r2, r0
 8020722:	460b      	mov	r3, r1
 8020724:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8020728:	f7df fdb6 	bl	8000298 <__aeabi_dsub>
 802072c:	4602      	mov	r2, r0
 802072e:	460b      	mov	r3, r1
 8020730:	4604      	mov	r4, r0
 8020732:	460d      	mov	r5, r1
 8020734:	4630      	mov	r0, r6
 8020736:	4639      	mov	r1, r7
 8020738:	f7df fdb0 	bl	800029c <__adddf3>
 802073c:	2000      	movs	r0, #0
 802073e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8020742:	4632      	mov	r2, r6
 8020744:	463b      	mov	r3, r7
 8020746:	f7df fda7 	bl	8000298 <__aeabi_dsub>
 802074a:	4602      	mov	r2, r0
 802074c:	460b      	mov	r3, r1
 802074e:	4620      	mov	r0, r4
 8020750:	4629      	mov	r1, r5
 8020752:	f7df fda1 	bl	8000298 <__aeabi_dsub>
 8020756:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8020758:	f10b 33ff 	add.w	r3, fp, #4294967295
 802075c:	4313      	orrs	r3, r2
 802075e:	4606      	mov	r6, r0
 8020760:	460f      	mov	r7, r1
 8020762:	f040 81eb 	bne.w	8020b3c <__ieee754_pow+0x6c4>
 8020766:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 8020820 <__ieee754_pow+0x3a8>
 802076a:	e9dd 4500 	ldrd	r4, r5, [sp]
 802076e:	2400      	movs	r4, #0
 8020770:	4622      	mov	r2, r4
 8020772:	462b      	mov	r3, r5
 8020774:	e9dd 0100 	ldrd	r0, r1, [sp]
 8020778:	ed8d 7b02 	vstr	d7, [sp, #8]
 802077c:	f7df fd8c 	bl	8000298 <__aeabi_dsub>
 8020780:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8020784:	f7df ff40 	bl	8000608 <__aeabi_dmul>
 8020788:	e9dd 2300 	ldrd	r2, r3, [sp]
 802078c:	4680      	mov	r8, r0
 802078e:	4689      	mov	r9, r1
 8020790:	4630      	mov	r0, r6
 8020792:	4639      	mov	r1, r7
 8020794:	f7df ff38 	bl	8000608 <__aeabi_dmul>
 8020798:	4602      	mov	r2, r0
 802079a:	460b      	mov	r3, r1
 802079c:	4640      	mov	r0, r8
 802079e:	4649      	mov	r1, r9
 80207a0:	f7df fd7c 	bl	800029c <__adddf3>
 80207a4:	4622      	mov	r2, r4
 80207a6:	462b      	mov	r3, r5
 80207a8:	4680      	mov	r8, r0
 80207aa:	4689      	mov	r9, r1
 80207ac:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80207b0:	f7df ff2a 	bl	8000608 <__aeabi_dmul>
 80207b4:	460b      	mov	r3, r1
 80207b6:	4604      	mov	r4, r0
 80207b8:	460d      	mov	r5, r1
 80207ba:	4602      	mov	r2, r0
 80207bc:	4649      	mov	r1, r9
 80207be:	4640      	mov	r0, r8
 80207c0:	e9cd 4500 	strd	r4, r5, [sp]
 80207c4:	f7df fd6a 	bl	800029c <__adddf3>
 80207c8:	4b1c      	ldr	r3, [pc, #112]	; (802083c <__ieee754_pow+0x3c4>)
 80207ca:	4299      	cmp	r1, r3
 80207cc:	4606      	mov	r6, r0
 80207ce:	460f      	mov	r7, r1
 80207d0:	468b      	mov	fp, r1
 80207d2:	f340 82f7 	ble.w	8020dc4 <__ieee754_pow+0x94c>
 80207d6:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 80207da:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 80207de:	4303      	orrs	r3, r0
 80207e0:	f000 81ea 	beq.w	8020bb8 <__ieee754_pow+0x740>
 80207e4:	a310      	add	r3, pc, #64	; (adr r3, 8020828 <__ieee754_pow+0x3b0>)
 80207e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80207ea:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80207ee:	f7df ff0b 	bl	8000608 <__aeabi_dmul>
 80207f2:	a30d      	add	r3, pc, #52	; (adr r3, 8020828 <__ieee754_pow+0x3b0>)
 80207f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80207f8:	e6d5      	b.n	80205a6 <__ieee754_pow+0x12e>
 80207fa:	bf00      	nop
 80207fc:	f3af 8000 	nop.w
 8020800:	60000000 	.word	0x60000000
 8020804:	3ff71547 	.word	0x3ff71547
 8020808:	f85ddf44 	.word	0xf85ddf44
 802080c:	3e54ae0b 	.word	0x3e54ae0b
 8020810:	55555555 	.word	0x55555555
 8020814:	3fd55555 	.word	0x3fd55555
 8020818:	652b82fe 	.word	0x652b82fe
 802081c:	3ff71547 	.word	0x3ff71547
 8020820:	00000000 	.word	0x00000000
 8020824:	bff00000 	.word	0xbff00000
 8020828:	8800759c 	.word	0x8800759c
 802082c:	7e37e43c 	.word	0x7e37e43c
 8020830:	3ff00000 	.word	0x3ff00000
 8020834:	3fd00000 	.word	0x3fd00000
 8020838:	3fe00000 	.word	0x3fe00000
 802083c:	408fffff 	.word	0x408fffff
 8020840:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8020844:	f04f 0200 	mov.w	r2, #0
 8020848:	da05      	bge.n	8020856 <__ieee754_pow+0x3de>
 802084a:	4bd3      	ldr	r3, [pc, #844]	; (8020b98 <__ieee754_pow+0x720>)
 802084c:	f7df fedc 	bl	8000608 <__aeabi_dmul>
 8020850:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8020854:	460c      	mov	r4, r1
 8020856:	1523      	asrs	r3, r4, #20
 8020858:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 802085c:	4413      	add	r3, r2
 802085e:	9309      	str	r3, [sp, #36]	; 0x24
 8020860:	4bce      	ldr	r3, [pc, #824]	; (8020b9c <__ieee754_pow+0x724>)
 8020862:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8020866:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 802086a:	429c      	cmp	r4, r3
 802086c:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8020870:	dd08      	ble.n	8020884 <__ieee754_pow+0x40c>
 8020872:	4bcb      	ldr	r3, [pc, #812]	; (8020ba0 <__ieee754_pow+0x728>)
 8020874:	429c      	cmp	r4, r3
 8020876:	f340 815e 	ble.w	8020b36 <__ieee754_pow+0x6be>
 802087a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802087c:	3301      	adds	r3, #1
 802087e:	9309      	str	r3, [sp, #36]	; 0x24
 8020880:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8020884:	f04f 0a00 	mov.w	sl, #0
 8020888:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 802088c:	930c      	str	r3, [sp, #48]	; 0x30
 802088e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8020890:	4bc4      	ldr	r3, [pc, #784]	; (8020ba4 <__ieee754_pow+0x72c>)
 8020892:	4413      	add	r3, r2
 8020894:	ed93 7b00 	vldr	d7, [r3]
 8020898:	4629      	mov	r1, r5
 802089a:	ec53 2b17 	vmov	r2, r3, d7
 802089e:	ed8d 7b06 	vstr	d7, [sp, #24]
 80208a2:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80208a6:	f7df fcf7 	bl	8000298 <__aeabi_dsub>
 80208aa:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80208ae:	4606      	mov	r6, r0
 80208b0:	460f      	mov	r7, r1
 80208b2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80208b6:	f7df fcf1 	bl	800029c <__adddf3>
 80208ba:	4602      	mov	r2, r0
 80208bc:	460b      	mov	r3, r1
 80208be:	2000      	movs	r0, #0
 80208c0:	49b9      	ldr	r1, [pc, #740]	; (8020ba8 <__ieee754_pow+0x730>)
 80208c2:	f7df ffcb 	bl	800085c <__aeabi_ddiv>
 80208c6:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 80208ca:	4602      	mov	r2, r0
 80208cc:	460b      	mov	r3, r1
 80208ce:	4630      	mov	r0, r6
 80208d0:	4639      	mov	r1, r7
 80208d2:	f7df fe99 	bl	8000608 <__aeabi_dmul>
 80208d6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80208da:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80208de:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80208e2:	2300      	movs	r3, #0
 80208e4:	9302      	str	r3, [sp, #8]
 80208e6:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80208ea:	106d      	asrs	r5, r5, #1
 80208ec:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 80208f0:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 80208f4:	2200      	movs	r2, #0
 80208f6:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 80208fa:	4640      	mov	r0, r8
 80208fc:	4649      	mov	r1, r9
 80208fe:	4614      	mov	r4, r2
 8020900:	461d      	mov	r5, r3
 8020902:	f7df fe81 	bl	8000608 <__aeabi_dmul>
 8020906:	4602      	mov	r2, r0
 8020908:	460b      	mov	r3, r1
 802090a:	4630      	mov	r0, r6
 802090c:	4639      	mov	r1, r7
 802090e:	f7df fcc3 	bl	8000298 <__aeabi_dsub>
 8020912:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8020916:	4606      	mov	r6, r0
 8020918:	460f      	mov	r7, r1
 802091a:	4620      	mov	r0, r4
 802091c:	4629      	mov	r1, r5
 802091e:	f7df fcbb 	bl	8000298 <__aeabi_dsub>
 8020922:	4602      	mov	r2, r0
 8020924:	460b      	mov	r3, r1
 8020926:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 802092a:	f7df fcb5 	bl	8000298 <__aeabi_dsub>
 802092e:	4642      	mov	r2, r8
 8020930:	464b      	mov	r3, r9
 8020932:	f7df fe69 	bl	8000608 <__aeabi_dmul>
 8020936:	4602      	mov	r2, r0
 8020938:	460b      	mov	r3, r1
 802093a:	4630      	mov	r0, r6
 802093c:	4639      	mov	r1, r7
 802093e:	f7df fcab 	bl	8000298 <__aeabi_dsub>
 8020942:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8020946:	f7df fe5f 	bl	8000608 <__aeabi_dmul>
 802094a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 802094e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8020952:	4610      	mov	r0, r2
 8020954:	4619      	mov	r1, r3
 8020956:	f7df fe57 	bl	8000608 <__aeabi_dmul>
 802095a:	a37b      	add	r3, pc, #492	; (adr r3, 8020b48 <__ieee754_pow+0x6d0>)
 802095c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020960:	4604      	mov	r4, r0
 8020962:	460d      	mov	r5, r1
 8020964:	f7df fe50 	bl	8000608 <__aeabi_dmul>
 8020968:	a379      	add	r3, pc, #484	; (adr r3, 8020b50 <__ieee754_pow+0x6d8>)
 802096a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802096e:	f7df fc95 	bl	800029c <__adddf3>
 8020972:	4622      	mov	r2, r4
 8020974:	462b      	mov	r3, r5
 8020976:	f7df fe47 	bl	8000608 <__aeabi_dmul>
 802097a:	a377      	add	r3, pc, #476	; (adr r3, 8020b58 <__ieee754_pow+0x6e0>)
 802097c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020980:	f7df fc8c 	bl	800029c <__adddf3>
 8020984:	4622      	mov	r2, r4
 8020986:	462b      	mov	r3, r5
 8020988:	f7df fe3e 	bl	8000608 <__aeabi_dmul>
 802098c:	a374      	add	r3, pc, #464	; (adr r3, 8020b60 <__ieee754_pow+0x6e8>)
 802098e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020992:	f7df fc83 	bl	800029c <__adddf3>
 8020996:	4622      	mov	r2, r4
 8020998:	462b      	mov	r3, r5
 802099a:	f7df fe35 	bl	8000608 <__aeabi_dmul>
 802099e:	a372      	add	r3, pc, #456	; (adr r3, 8020b68 <__ieee754_pow+0x6f0>)
 80209a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80209a4:	f7df fc7a 	bl	800029c <__adddf3>
 80209a8:	4622      	mov	r2, r4
 80209aa:	462b      	mov	r3, r5
 80209ac:	f7df fe2c 	bl	8000608 <__aeabi_dmul>
 80209b0:	a36f      	add	r3, pc, #444	; (adr r3, 8020b70 <__ieee754_pow+0x6f8>)
 80209b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80209b6:	f7df fc71 	bl	800029c <__adddf3>
 80209ba:	4622      	mov	r2, r4
 80209bc:	4606      	mov	r6, r0
 80209be:	460f      	mov	r7, r1
 80209c0:	462b      	mov	r3, r5
 80209c2:	4620      	mov	r0, r4
 80209c4:	4629      	mov	r1, r5
 80209c6:	f7df fe1f 	bl	8000608 <__aeabi_dmul>
 80209ca:	4602      	mov	r2, r0
 80209cc:	460b      	mov	r3, r1
 80209ce:	4630      	mov	r0, r6
 80209d0:	4639      	mov	r1, r7
 80209d2:	f7df fe19 	bl	8000608 <__aeabi_dmul>
 80209d6:	4642      	mov	r2, r8
 80209d8:	4604      	mov	r4, r0
 80209da:	460d      	mov	r5, r1
 80209dc:	464b      	mov	r3, r9
 80209de:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80209e2:	f7df fc5b 	bl	800029c <__adddf3>
 80209e6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80209ea:	f7df fe0d 	bl	8000608 <__aeabi_dmul>
 80209ee:	4622      	mov	r2, r4
 80209f0:	462b      	mov	r3, r5
 80209f2:	f7df fc53 	bl	800029c <__adddf3>
 80209f6:	4642      	mov	r2, r8
 80209f8:	4606      	mov	r6, r0
 80209fa:	460f      	mov	r7, r1
 80209fc:	464b      	mov	r3, r9
 80209fe:	4640      	mov	r0, r8
 8020a00:	4649      	mov	r1, r9
 8020a02:	f7df fe01 	bl	8000608 <__aeabi_dmul>
 8020a06:	2200      	movs	r2, #0
 8020a08:	4b68      	ldr	r3, [pc, #416]	; (8020bac <__ieee754_pow+0x734>)
 8020a0a:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8020a0e:	f7df fc45 	bl	800029c <__adddf3>
 8020a12:	4632      	mov	r2, r6
 8020a14:	463b      	mov	r3, r7
 8020a16:	f7df fc41 	bl	800029c <__adddf3>
 8020a1a:	9802      	ldr	r0, [sp, #8]
 8020a1c:	460d      	mov	r5, r1
 8020a1e:	4604      	mov	r4, r0
 8020a20:	4602      	mov	r2, r0
 8020a22:	460b      	mov	r3, r1
 8020a24:	4640      	mov	r0, r8
 8020a26:	4649      	mov	r1, r9
 8020a28:	f7df fdee 	bl	8000608 <__aeabi_dmul>
 8020a2c:	2200      	movs	r2, #0
 8020a2e:	4680      	mov	r8, r0
 8020a30:	4689      	mov	r9, r1
 8020a32:	4b5e      	ldr	r3, [pc, #376]	; (8020bac <__ieee754_pow+0x734>)
 8020a34:	4620      	mov	r0, r4
 8020a36:	4629      	mov	r1, r5
 8020a38:	f7df fc2e 	bl	8000298 <__aeabi_dsub>
 8020a3c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8020a40:	f7df fc2a 	bl	8000298 <__aeabi_dsub>
 8020a44:	4602      	mov	r2, r0
 8020a46:	460b      	mov	r3, r1
 8020a48:	4630      	mov	r0, r6
 8020a4a:	4639      	mov	r1, r7
 8020a4c:	f7df fc24 	bl	8000298 <__aeabi_dsub>
 8020a50:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8020a54:	f7df fdd8 	bl	8000608 <__aeabi_dmul>
 8020a58:	4622      	mov	r2, r4
 8020a5a:	4606      	mov	r6, r0
 8020a5c:	460f      	mov	r7, r1
 8020a5e:	462b      	mov	r3, r5
 8020a60:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8020a64:	f7df fdd0 	bl	8000608 <__aeabi_dmul>
 8020a68:	4602      	mov	r2, r0
 8020a6a:	460b      	mov	r3, r1
 8020a6c:	4630      	mov	r0, r6
 8020a6e:	4639      	mov	r1, r7
 8020a70:	f7df fc14 	bl	800029c <__adddf3>
 8020a74:	4606      	mov	r6, r0
 8020a76:	460f      	mov	r7, r1
 8020a78:	4602      	mov	r2, r0
 8020a7a:	460b      	mov	r3, r1
 8020a7c:	4640      	mov	r0, r8
 8020a7e:	4649      	mov	r1, r9
 8020a80:	f7df fc0c 	bl	800029c <__adddf3>
 8020a84:	9802      	ldr	r0, [sp, #8]
 8020a86:	a33c      	add	r3, pc, #240	; (adr r3, 8020b78 <__ieee754_pow+0x700>)
 8020a88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020a8c:	4604      	mov	r4, r0
 8020a8e:	460d      	mov	r5, r1
 8020a90:	f7df fdba 	bl	8000608 <__aeabi_dmul>
 8020a94:	4642      	mov	r2, r8
 8020a96:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8020a9a:	464b      	mov	r3, r9
 8020a9c:	4620      	mov	r0, r4
 8020a9e:	4629      	mov	r1, r5
 8020aa0:	f7df fbfa 	bl	8000298 <__aeabi_dsub>
 8020aa4:	4602      	mov	r2, r0
 8020aa6:	460b      	mov	r3, r1
 8020aa8:	4630      	mov	r0, r6
 8020aaa:	4639      	mov	r1, r7
 8020aac:	f7df fbf4 	bl	8000298 <__aeabi_dsub>
 8020ab0:	a333      	add	r3, pc, #204	; (adr r3, 8020b80 <__ieee754_pow+0x708>)
 8020ab2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020ab6:	f7df fda7 	bl	8000608 <__aeabi_dmul>
 8020aba:	a333      	add	r3, pc, #204	; (adr r3, 8020b88 <__ieee754_pow+0x710>)
 8020abc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020ac0:	4606      	mov	r6, r0
 8020ac2:	460f      	mov	r7, r1
 8020ac4:	4620      	mov	r0, r4
 8020ac6:	4629      	mov	r1, r5
 8020ac8:	f7df fd9e 	bl	8000608 <__aeabi_dmul>
 8020acc:	4602      	mov	r2, r0
 8020ace:	460b      	mov	r3, r1
 8020ad0:	4630      	mov	r0, r6
 8020ad2:	4639      	mov	r1, r7
 8020ad4:	f7df fbe2 	bl	800029c <__adddf3>
 8020ad8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8020ada:	4b35      	ldr	r3, [pc, #212]	; (8020bb0 <__ieee754_pow+0x738>)
 8020adc:	4413      	add	r3, r2
 8020ade:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020ae2:	f7df fbdb 	bl	800029c <__adddf3>
 8020ae6:	4604      	mov	r4, r0
 8020ae8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8020aea:	460d      	mov	r5, r1
 8020aec:	f7df fd22 	bl	8000534 <__aeabi_i2d>
 8020af0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8020af2:	4b30      	ldr	r3, [pc, #192]	; (8020bb4 <__ieee754_pow+0x73c>)
 8020af4:	4413      	add	r3, r2
 8020af6:	e9d3 8900 	ldrd	r8, r9, [r3]
 8020afa:	4606      	mov	r6, r0
 8020afc:	460f      	mov	r7, r1
 8020afe:	4622      	mov	r2, r4
 8020b00:	462b      	mov	r3, r5
 8020b02:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8020b06:	f7df fbc9 	bl	800029c <__adddf3>
 8020b0a:	4642      	mov	r2, r8
 8020b0c:	464b      	mov	r3, r9
 8020b0e:	f7df fbc5 	bl	800029c <__adddf3>
 8020b12:	4632      	mov	r2, r6
 8020b14:	463b      	mov	r3, r7
 8020b16:	f7df fbc1 	bl	800029c <__adddf3>
 8020b1a:	9802      	ldr	r0, [sp, #8]
 8020b1c:	4632      	mov	r2, r6
 8020b1e:	463b      	mov	r3, r7
 8020b20:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8020b24:	f7df fbb8 	bl	8000298 <__aeabi_dsub>
 8020b28:	4642      	mov	r2, r8
 8020b2a:	464b      	mov	r3, r9
 8020b2c:	f7df fbb4 	bl	8000298 <__aeabi_dsub>
 8020b30:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8020b34:	e607      	b.n	8020746 <__ieee754_pow+0x2ce>
 8020b36:	f04f 0a01 	mov.w	sl, #1
 8020b3a:	e6a5      	b.n	8020888 <__ieee754_pow+0x410>
 8020b3c:	ed9f 7b14 	vldr	d7, [pc, #80]	; 8020b90 <__ieee754_pow+0x718>
 8020b40:	e613      	b.n	802076a <__ieee754_pow+0x2f2>
 8020b42:	bf00      	nop
 8020b44:	f3af 8000 	nop.w
 8020b48:	4a454eef 	.word	0x4a454eef
 8020b4c:	3fca7e28 	.word	0x3fca7e28
 8020b50:	93c9db65 	.word	0x93c9db65
 8020b54:	3fcd864a 	.word	0x3fcd864a
 8020b58:	a91d4101 	.word	0xa91d4101
 8020b5c:	3fd17460 	.word	0x3fd17460
 8020b60:	518f264d 	.word	0x518f264d
 8020b64:	3fd55555 	.word	0x3fd55555
 8020b68:	db6fabff 	.word	0xdb6fabff
 8020b6c:	3fdb6db6 	.word	0x3fdb6db6
 8020b70:	33333303 	.word	0x33333303
 8020b74:	3fe33333 	.word	0x3fe33333
 8020b78:	e0000000 	.word	0xe0000000
 8020b7c:	3feec709 	.word	0x3feec709
 8020b80:	dc3a03fd 	.word	0xdc3a03fd
 8020b84:	3feec709 	.word	0x3feec709
 8020b88:	145b01f5 	.word	0x145b01f5
 8020b8c:	be3e2fe0 	.word	0xbe3e2fe0
 8020b90:	00000000 	.word	0x00000000
 8020b94:	3ff00000 	.word	0x3ff00000
 8020b98:	43400000 	.word	0x43400000
 8020b9c:	0003988e 	.word	0x0003988e
 8020ba0:	000bb679 	.word	0x000bb679
 8020ba4:	0802a9c8 	.word	0x0802a9c8
 8020ba8:	3ff00000 	.word	0x3ff00000
 8020bac:	40080000 	.word	0x40080000
 8020bb0:	0802a9e8 	.word	0x0802a9e8
 8020bb4:	0802a9d8 	.word	0x0802a9d8
 8020bb8:	a3b4      	add	r3, pc, #720	; (adr r3, 8020e8c <__ieee754_pow+0xa14>)
 8020bba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020bbe:	4640      	mov	r0, r8
 8020bc0:	4649      	mov	r1, r9
 8020bc2:	f7df fb6b 	bl	800029c <__adddf3>
 8020bc6:	4622      	mov	r2, r4
 8020bc8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8020bcc:	462b      	mov	r3, r5
 8020bce:	4630      	mov	r0, r6
 8020bd0:	4639      	mov	r1, r7
 8020bd2:	f7df fb61 	bl	8000298 <__aeabi_dsub>
 8020bd6:	4602      	mov	r2, r0
 8020bd8:	460b      	mov	r3, r1
 8020bda:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8020bde:	f7df ffa3 	bl	8000b28 <__aeabi_dcmpgt>
 8020be2:	2800      	cmp	r0, #0
 8020be4:	f47f adfe 	bne.w	80207e4 <__ieee754_pow+0x36c>
 8020be8:	4aa3      	ldr	r2, [pc, #652]	; (8020e78 <__ieee754_pow+0xa00>)
 8020bea:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8020bee:	4293      	cmp	r3, r2
 8020bf0:	f340 810a 	ble.w	8020e08 <__ieee754_pow+0x990>
 8020bf4:	151b      	asrs	r3, r3, #20
 8020bf6:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8020bfa:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8020bfe:	fa4a f303 	asr.w	r3, sl, r3
 8020c02:	445b      	add	r3, fp
 8020c04:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8020c08:	4e9c      	ldr	r6, [pc, #624]	; (8020e7c <__ieee754_pow+0xa04>)
 8020c0a:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8020c0e:	4116      	asrs	r6, r2
 8020c10:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8020c14:	2000      	movs	r0, #0
 8020c16:	ea23 0106 	bic.w	r1, r3, r6
 8020c1a:	f1c2 0214 	rsb	r2, r2, #20
 8020c1e:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8020c22:	fa4a fa02 	asr.w	sl, sl, r2
 8020c26:	f1bb 0f00 	cmp.w	fp, #0
 8020c2a:	4602      	mov	r2, r0
 8020c2c:	460b      	mov	r3, r1
 8020c2e:	4620      	mov	r0, r4
 8020c30:	4629      	mov	r1, r5
 8020c32:	bfb8      	it	lt
 8020c34:	f1ca 0a00 	rsblt	sl, sl, #0
 8020c38:	f7df fb2e 	bl	8000298 <__aeabi_dsub>
 8020c3c:	e9cd 0100 	strd	r0, r1, [sp]
 8020c40:	4642      	mov	r2, r8
 8020c42:	464b      	mov	r3, r9
 8020c44:	e9dd 0100 	ldrd	r0, r1, [sp]
 8020c48:	f7df fb28 	bl	800029c <__adddf3>
 8020c4c:	2000      	movs	r0, #0
 8020c4e:	a378      	add	r3, pc, #480	; (adr r3, 8020e30 <__ieee754_pow+0x9b8>)
 8020c50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020c54:	4604      	mov	r4, r0
 8020c56:	460d      	mov	r5, r1
 8020c58:	f7df fcd6 	bl	8000608 <__aeabi_dmul>
 8020c5c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8020c60:	4606      	mov	r6, r0
 8020c62:	460f      	mov	r7, r1
 8020c64:	4620      	mov	r0, r4
 8020c66:	4629      	mov	r1, r5
 8020c68:	f7df fb16 	bl	8000298 <__aeabi_dsub>
 8020c6c:	4602      	mov	r2, r0
 8020c6e:	460b      	mov	r3, r1
 8020c70:	4640      	mov	r0, r8
 8020c72:	4649      	mov	r1, r9
 8020c74:	f7df fb10 	bl	8000298 <__aeabi_dsub>
 8020c78:	a36f      	add	r3, pc, #444	; (adr r3, 8020e38 <__ieee754_pow+0x9c0>)
 8020c7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020c7e:	f7df fcc3 	bl	8000608 <__aeabi_dmul>
 8020c82:	a36f      	add	r3, pc, #444	; (adr r3, 8020e40 <__ieee754_pow+0x9c8>)
 8020c84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020c88:	4680      	mov	r8, r0
 8020c8a:	4689      	mov	r9, r1
 8020c8c:	4620      	mov	r0, r4
 8020c8e:	4629      	mov	r1, r5
 8020c90:	f7df fcba 	bl	8000608 <__aeabi_dmul>
 8020c94:	4602      	mov	r2, r0
 8020c96:	460b      	mov	r3, r1
 8020c98:	4640      	mov	r0, r8
 8020c9a:	4649      	mov	r1, r9
 8020c9c:	f7df fafe 	bl	800029c <__adddf3>
 8020ca0:	4604      	mov	r4, r0
 8020ca2:	460d      	mov	r5, r1
 8020ca4:	4602      	mov	r2, r0
 8020ca6:	460b      	mov	r3, r1
 8020ca8:	4630      	mov	r0, r6
 8020caa:	4639      	mov	r1, r7
 8020cac:	f7df faf6 	bl	800029c <__adddf3>
 8020cb0:	4632      	mov	r2, r6
 8020cb2:	463b      	mov	r3, r7
 8020cb4:	4680      	mov	r8, r0
 8020cb6:	4689      	mov	r9, r1
 8020cb8:	f7df faee 	bl	8000298 <__aeabi_dsub>
 8020cbc:	4602      	mov	r2, r0
 8020cbe:	460b      	mov	r3, r1
 8020cc0:	4620      	mov	r0, r4
 8020cc2:	4629      	mov	r1, r5
 8020cc4:	f7df fae8 	bl	8000298 <__aeabi_dsub>
 8020cc8:	4642      	mov	r2, r8
 8020cca:	4606      	mov	r6, r0
 8020ccc:	460f      	mov	r7, r1
 8020cce:	464b      	mov	r3, r9
 8020cd0:	4640      	mov	r0, r8
 8020cd2:	4649      	mov	r1, r9
 8020cd4:	f7df fc98 	bl	8000608 <__aeabi_dmul>
 8020cd8:	a35b      	add	r3, pc, #364	; (adr r3, 8020e48 <__ieee754_pow+0x9d0>)
 8020cda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020cde:	4604      	mov	r4, r0
 8020ce0:	460d      	mov	r5, r1
 8020ce2:	f7df fc91 	bl	8000608 <__aeabi_dmul>
 8020ce6:	a35a      	add	r3, pc, #360	; (adr r3, 8020e50 <__ieee754_pow+0x9d8>)
 8020ce8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020cec:	f7df fad4 	bl	8000298 <__aeabi_dsub>
 8020cf0:	4622      	mov	r2, r4
 8020cf2:	462b      	mov	r3, r5
 8020cf4:	f7df fc88 	bl	8000608 <__aeabi_dmul>
 8020cf8:	a357      	add	r3, pc, #348	; (adr r3, 8020e58 <__ieee754_pow+0x9e0>)
 8020cfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020cfe:	f7df facd 	bl	800029c <__adddf3>
 8020d02:	4622      	mov	r2, r4
 8020d04:	462b      	mov	r3, r5
 8020d06:	f7df fc7f 	bl	8000608 <__aeabi_dmul>
 8020d0a:	a355      	add	r3, pc, #340	; (adr r3, 8020e60 <__ieee754_pow+0x9e8>)
 8020d0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020d10:	f7df fac2 	bl	8000298 <__aeabi_dsub>
 8020d14:	4622      	mov	r2, r4
 8020d16:	462b      	mov	r3, r5
 8020d18:	f7df fc76 	bl	8000608 <__aeabi_dmul>
 8020d1c:	a352      	add	r3, pc, #328	; (adr r3, 8020e68 <__ieee754_pow+0x9f0>)
 8020d1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020d22:	f7df fabb 	bl	800029c <__adddf3>
 8020d26:	4622      	mov	r2, r4
 8020d28:	462b      	mov	r3, r5
 8020d2a:	f7df fc6d 	bl	8000608 <__aeabi_dmul>
 8020d2e:	4602      	mov	r2, r0
 8020d30:	460b      	mov	r3, r1
 8020d32:	4640      	mov	r0, r8
 8020d34:	4649      	mov	r1, r9
 8020d36:	f7df faaf 	bl	8000298 <__aeabi_dsub>
 8020d3a:	4604      	mov	r4, r0
 8020d3c:	460d      	mov	r5, r1
 8020d3e:	4602      	mov	r2, r0
 8020d40:	460b      	mov	r3, r1
 8020d42:	4640      	mov	r0, r8
 8020d44:	4649      	mov	r1, r9
 8020d46:	f7df fc5f 	bl	8000608 <__aeabi_dmul>
 8020d4a:	2200      	movs	r2, #0
 8020d4c:	e9cd 0100 	strd	r0, r1, [sp]
 8020d50:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8020d54:	4620      	mov	r0, r4
 8020d56:	4629      	mov	r1, r5
 8020d58:	f7df fa9e 	bl	8000298 <__aeabi_dsub>
 8020d5c:	4602      	mov	r2, r0
 8020d5e:	460b      	mov	r3, r1
 8020d60:	e9dd 0100 	ldrd	r0, r1, [sp]
 8020d64:	f7df fd7a 	bl	800085c <__aeabi_ddiv>
 8020d68:	4632      	mov	r2, r6
 8020d6a:	4604      	mov	r4, r0
 8020d6c:	460d      	mov	r5, r1
 8020d6e:	463b      	mov	r3, r7
 8020d70:	4640      	mov	r0, r8
 8020d72:	4649      	mov	r1, r9
 8020d74:	f7df fc48 	bl	8000608 <__aeabi_dmul>
 8020d78:	4632      	mov	r2, r6
 8020d7a:	463b      	mov	r3, r7
 8020d7c:	f7df fa8e 	bl	800029c <__adddf3>
 8020d80:	4602      	mov	r2, r0
 8020d82:	460b      	mov	r3, r1
 8020d84:	4620      	mov	r0, r4
 8020d86:	4629      	mov	r1, r5
 8020d88:	f7df fa86 	bl	8000298 <__aeabi_dsub>
 8020d8c:	4642      	mov	r2, r8
 8020d8e:	464b      	mov	r3, r9
 8020d90:	f7df fa82 	bl	8000298 <__aeabi_dsub>
 8020d94:	4602      	mov	r2, r0
 8020d96:	460b      	mov	r3, r1
 8020d98:	2000      	movs	r0, #0
 8020d9a:	4939      	ldr	r1, [pc, #228]	; (8020e80 <__ieee754_pow+0xa08>)
 8020d9c:	f7df fa7c 	bl	8000298 <__aeabi_dsub>
 8020da0:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 8020da4:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8020da8:	4602      	mov	r2, r0
 8020daa:	460b      	mov	r3, r1
 8020dac:	da2f      	bge.n	8020e0e <__ieee754_pow+0x996>
 8020dae:	4650      	mov	r0, sl
 8020db0:	ec43 2b10 	vmov	d0, r2, r3
 8020db4:	f000 f9c0 	bl	8021138 <scalbn>
 8020db8:	ec51 0b10 	vmov	r0, r1, d0
 8020dbc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8020dc0:	f7ff bbf1 	b.w	80205a6 <__ieee754_pow+0x12e>
 8020dc4:	4b2f      	ldr	r3, [pc, #188]	; (8020e84 <__ieee754_pow+0xa0c>)
 8020dc6:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8020dca:	429e      	cmp	r6, r3
 8020dcc:	f77f af0c 	ble.w	8020be8 <__ieee754_pow+0x770>
 8020dd0:	4b2d      	ldr	r3, [pc, #180]	; (8020e88 <__ieee754_pow+0xa10>)
 8020dd2:	440b      	add	r3, r1
 8020dd4:	4303      	orrs	r3, r0
 8020dd6:	d00b      	beq.n	8020df0 <__ieee754_pow+0x978>
 8020dd8:	a325      	add	r3, pc, #148	; (adr r3, 8020e70 <__ieee754_pow+0x9f8>)
 8020dda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020dde:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8020de2:	f7df fc11 	bl	8000608 <__aeabi_dmul>
 8020de6:	a322      	add	r3, pc, #136	; (adr r3, 8020e70 <__ieee754_pow+0x9f8>)
 8020de8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020dec:	f7ff bbdb 	b.w	80205a6 <__ieee754_pow+0x12e>
 8020df0:	4622      	mov	r2, r4
 8020df2:	462b      	mov	r3, r5
 8020df4:	f7df fa50 	bl	8000298 <__aeabi_dsub>
 8020df8:	4642      	mov	r2, r8
 8020dfa:	464b      	mov	r3, r9
 8020dfc:	f7df fe8a 	bl	8000b14 <__aeabi_dcmpge>
 8020e00:	2800      	cmp	r0, #0
 8020e02:	f43f aef1 	beq.w	8020be8 <__ieee754_pow+0x770>
 8020e06:	e7e7      	b.n	8020dd8 <__ieee754_pow+0x960>
 8020e08:	f04f 0a00 	mov.w	sl, #0
 8020e0c:	e718      	b.n	8020c40 <__ieee754_pow+0x7c8>
 8020e0e:	4621      	mov	r1, r4
 8020e10:	e7d4      	b.n	8020dbc <__ieee754_pow+0x944>
 8020e12:	2000      	movs	r0, #0
 8020e14:	491a      	ldr	r1, [pc, #104]	; (8020e80 <__ieee754_pow+0xa08>)
 8020e16:	f7ff bb8f 	b.w	8020538 <__ieee754_pow+0xc0>
 8020e1a:	e9dd 0100 	ldrd	r0, r1, [sp]
 8020e1e:	f7ff bb8b 	b.w	8020538 <__ieee754_pow+0xc0>
 8020e22:	4630      	mov	r0, r6
 8020e24:	4639      	mov	r1, r7
 8020e26:	f7ff bb87 	b.w	8020538 <__ieee754_pow+0xc0>
 8020e2a:	4693      	mov	fp, r2
 8020e2c:	f7ff bb98 	b.w	8020560 <__ieee754_pow+0xe8>
 8020e30:	00000000 	.word	0x00000000
 8020e34:	3fe62e43 	.word	0x3fe62e43
 8020e38:	fefa39ef 	.word	0xfefa39ef
 8020e3c:	3fe62e42 	.word	0x3fe62e42
 8020e40:	0ca86c39 	.word	0x0ca86c39
 8020e44:	be205c61 	.word	0xbe205c61
 8020e48:	72bea4d0 	.word	0x72bea4d0
 8020e4c:	3e663769 	.word	0x3e663769
 8020e50:	c5d26bf1 	.word	0xc5d26bf1
 8020e54:	3ebbbd41 	.word	0x3ebbbd41
 8020e58:	af25de2c 	.word	0xaf25de2c
 8020e5c:	3f11566a 	.word	0x3f11566a
 8020e60:	16bebd93 	.word	0x16bebd93
 8020e64:	3f66c16c 	.word	0x3f66c16c
 8020e68:	5555553e 	.word	0x5555553e
 8020e6c:	3fc55555 	.word	0x3fc55555
 8020e70:	c2f8f359 	.word	0xc2f8f359
 8020e74:	01a56e1f 	.word	0x01a56e1f
 8020e78:	3fe00000 	.word	0x3fe00000
 8020e7c:	000fffff 	.word	0x000fffff
 8020e80:	3ff00000 	.word	0x3ff00000
 8020e84:	4090cbff 	.word	0x4090cbff
 8020e88:	3f6f3400 	.word	0x3f6f3400
 8020e8c:	652b82fe 	.word	0x652b82fe
 8020e90:	3c971547 	.word	0x3c971547

08020e94 <__ieee754_sqrt>:
 8020e94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8020e98:	4955      	ldr	r1, [pc, #340]	; (8020ff0 <__ieee754_sqrt+0x15c>)
 8020e9a:	ec55 4b10 	vmov	r4, r5, d0
 8020e9e:	43a9      	bics	r1, r5
 8020ea0:	462b      	mov	r3, r5
 8020ea2:	462a      	mov	r2, r5
 8020ea4:	d112      	bne.n	8020ecc <__ieee754_sqrt+0x38>
 8020ea6:	ee10 2a10 	vmov	r2, s0
 8020eaa:	ee10 0a10 	vmov	r0, s0
 8020eae:	4629      	mov	r1, r5
 8020eb0:	f7df fbaa 	bl	8000608 <__aeabi_dmul>
 8020eb4:	4602      	mov	r2, r0
 8020eb6:	460b      	mov	r3, r1
 8020eb8:	4620      	mov	r0, r4
 8020eba:	4629      	mov	r1, r5
 8020ebc:	f7df f9ee 	bl	800029c <__adddf3>
 8020ec0:	4604      	mov	r4, r0
 8020ec2:	460d      	mov	r5, r1
 8020ec4:	ec45 4b10 	vmov	d0, r4, r5
 8020ec8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8020ecc:	2d00      	cmp	r5, #0
 8020ece:	ee10 0a10 	vmov	r0, s0
 8020ed2:	4621      	mov	r1, r4
 8020ed4:	dc0f      	bgt.n	8020ef6 <__ieee754_sqrt+0x62>
 8020ed6:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8020eda:	4330      	orrs	r0, r6
 8020edc:	d0f2      	beq.n	8020ec4 <__ieee754_sqrt+0x30>
 8020ede:	b155      	cbz	r5, 8020ef6 <__ieee754_sqrt+0x62>
 8020ee0:	ee10 2a10 	vmov	r2, s0
 8020ee4:	4620      	mov	r0, r4
 8020ee6:	4629      	mov	r1, r5
 8020ee8:	f7df f9d6 	bl	8000298 <__aeabi_dsub>
 8020eec:	4602      	mov	r2, r0
 8020eee:	460b      	mov	r3, r1
 8020ef0:	f7df fcb4 	bl	800085c <__aeabi_ddiv>
 8020ef4:	e7e4      	b.n	8020ec0 <__ieee754_sqrt+0x2c>
 8020ef6:	151b      	asrs	r3, r3, #20
 8020ef8:	d073      	beq.n	8020fe2 <__ieee754_sqrt+0x14e>
 8020efa:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8020efe:	07dd      	lsls	r5, r3, #31
 8020f00:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8020f04:	bf48      	it	mi
 8020f06:	0fc8      	lsrmi	r0, r1, #31
 8020f08:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8020f0c:	bf44      	itt	mi
 8020f0e:	0049      	lslmi	r1, r1, #1
 8020f10:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 8020f14:	2500      	movs	r5, #0
 8020f16:	1058      	asrs	r0, r3, #1
 8020f18:	0fcb      	lsrs	r3, r1, #31
 8020f1a:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 8020f1e:	0049      	lsls	r1, r1, #1
 8020f20:	2316      	movs	r3, #22
 8020f22:	462c      	mov	r4, r5
 8020f24:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 8020f28:	19a7      	adds	r7, r4, r6
 8020f2a:	4297      	cmp	r7, r2
 8020f2c:	bfde      	ittt	le
 8020f2e:	19bc      	addle	r4, r7, r6
 8020f30:	1bd2      	suble	r2, r2, r7
 8020f32:	19ad      	addle	r5, r5, r6
 8020f34:	0fcf      	lsrs	r7, r1, #31
 8020f36:	3b01      	subs	r3, #1
 8020f38:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 8020f3c:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8020f40:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8020f44:	d1f0      	bne.n	8020f28 <__ieee754_sqrt+0x94>
 8020f46:	f04f 0c20 	mov.w	ip, #32
 8020f4a:	469e      	mov	lr, r3
 8020f4c:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8020f50:	42a2      	cmp	r2, r4
 8020f52:	eb06 070e 	add.w	r7, r6, lr
 8020f56:	dc02      	bgt.n	8020f5e <__ieee754_sqrt+0xca>
 8020f58:	d112      	bne.n	8020f80 <__ieee754_sqrt+0xec>
 8020f5a:	428f      	cmp	r7, r1
 8020f5c:	d810      	bhi.n	8020f80 <__ieee754_sqrt+0xec>
 8020f5e:	2f00      	cmp	r7, #0
 8020f60:	eb07 0e06 	add.w	lr, r7, r6
 8020f64:	da42      	bge.n	8020fec <__ieee754_sqrt+0x158>
 8020f66:	f1be 0f00 	cmp.w	lr, #0
 8020f6a:	db3f      	blt.n	8020fec <__ieee754_sqrt+0x158>
 8020f6c:	f104 0801 	add.w	r8, r4, #1
 8020f70:	1b12      	subs	r2, r2, r4
 8020f72:	428f      	cmp	r7, r1
 8020f74:	bf88      	it	hi
 8020f76:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8020f7a:	1bc9      	subs	r1, r1, r7
 8020f7c:	4433      	add	r3, r6
 8020f7e:	4644      	mov	r4, r8
 8020f80:	0052      	lsls	r2, r2, #1
 8020f82:	f1bc 0c01 	subs.w	ip, ip, #1
 8020f86:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 8020f8a:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8020f8e:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8020f92:	d1dd      	bne.n	8020f50 <__ieee754_sqrt+0xbc>
 8020f94:	430a      	orrs	r2, r1
 8020f96:	d006      	beq.n	8020fa6 <__ieee754_sqrt+0x112>
 8020f98:	1c5c      	adds	r4, r3, #1
 8020f9a:	bf13      	iteet	ne
 8020f9c:	3301      	addne	r3, #1
 8020f9e:	3501      	addeq	r5, #1
 8020fa0:	4663      	moveq	r3, ip
 8020fa2:	f023 0301 	bicne.w	r3, r3, #1
 8020fa6:	106a      	asrs	r2, r5, #1
 8020fa8:	085b      	lsrs	r3, r3, #1
 8020faa:	07e9      	lsls	r1, r5, #31
 8020fac:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8020fb0:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8020fb4:	bf48      	it	mi
 8020fb6:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8020fba:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 8020fbe:	461c      	mov	r4, r3
 8020fc0:	e780      	b.n	8020ec4 <__ieee754_sqrt+0x30>
 8020fc2:	0aca      	lsrs	r2, r1, #11
 8020fc4:	3815      	subs	r0, #21
 8020fc6:	0549      	lsls	r1, r1, #21
 8020fc8:	2a00      	cmp	r2, #0
 8020fca:	d0fa      	beq.n	8020fc2 <__ieee754_sqrt+0x12e>
 8020fcc:	02d6      	lsls	r6, r2, #11
 8020fce:	d50a      	bpl.n	8020fe6 <__ieee754_sqrt+0x152>
 8020fd0:	f1c3 0420 	rsb	r4, r3, #32
 8020fd4:	fa21 f404 	lsr.w	r4, r1, r4
 8020fd8:	1e5d      	subs	r5, r3, #1
 8020fda:	4099      	lsls	r1, r3
 8020fdc:	4322      	orrs	r2, r4
 8020fde:	1b43      	subs	r3, r0, r5
 8020fe0:	e78b      	b.n	8020efa <__ieee754_sqrt+0x66>
 8020fe2:	4618      	mov	r0, r3
 8020fe4:	e7f0      	b.n	8020fc8 <__ieee754_sqrt+0x134>
 8020fe6:	0052      	lsls	r2, r2, #1
 8020fe8:	3301      	adds	r3, #1
 8020fea:	e7ef      	b.n	8020fcc <__ieee754_sqrt+0x138>
 8020fec:	46a0      	mov	r8, r4
 8020fee:	e7bf      	b.n	8020f70 <__ieee754_sqrt+0xdc>
 8020ff0:	7ff00000 	.word	0x7ff00000

08020ff4 <fabs>:
 8020ff4:	ec51 0b10 	vmov	r0, r1, d0
 8020ff8:	ee10 2a10 	vmov	r2, s0
 8020ffc:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8021000:	ec43 2b10 	vmov	d0, r2, r3
 8021004:	4770      	bx	lr

08021006 <finite>:
 8021006:	ee10 3a90 	vmov	r3, s1
 802100a:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
 802100e:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8021012:	0fc0      	lsrs	r0, r0, #31
 8021014:	4770      	bx	lr

08021016 <matherr>:
 8021016:	2000      	movs	r0, #0
 8021018:	4770      	bx	lr
 802101a:	0000      	movs	r0, r0
 802101c:	0000      	movs	r0, r0
	...

08021020 <nan>:
 8021020:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8021028 <nan+0x8>
 8021024:	4770      	bx	lr
 8021026:	bf00      	nop
 8021028:	00000000 	.word	0x00000000
 802102c:	7ff80000 	.word	0x7ff80000

08021030 <rint>:
 8021030:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8021032:	ec51 0b10 	vmov	r0, r1, d0
 8021036:	f3c1 520a 	ubfx	r2, r1, #20, #11
 802103a:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 802103e:	2e13      	cmp	r6, #19
 8021040:	460b      	mov	r3, r1
 8021042:	ee10 4a10 	vmov	r4, s0
 8021046:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 802104a:	dc56      	bgt.n	80210fa <rint+0xca>
 802104c:	2e00      	cmp	r6, #0
 802104e:	da2b      	bge.n	80210a8 <rint+0x78>
 8021050:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8021054:	4302      	orrs	r2, r0
 8021056:	d023      	beq.n	80210a0 <rint+0x70>
 8021058:	f3c1 0213 	ubfx	r2, r1, #0, #20
 802105c:	4302      	orrs	r2, r0
 802105e:	4254      	negs	r4, r2
 8021060:	4314      	orrs	r4, r2
 8021062:	0c4b      	lsrs	r3, r1, #17
 8021064:	0b24      	lsrs	r4, r4, #12
 8021066:	045b      	lsls	r3, r3, #17
 8021068:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 802106c:	ea44 0103 	orr.w	r1, r4, r3
 8021070:	460b      	mov	r3, r1
 8021072:	492f      	ldr	r1, [pc, #188]	; (8021130 <rint+0x100>)
 8021074:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
 8021078:	e9d1 6700 	ldrd	r6, r7, [r1]
 802107c:	4602      	mov	r2, r0
 802107e:	4639      	mov	r1, r7
 8021080:	4630      	mov	r0, r6
 8021082:	f7df f90b 	bl	800029c <__adddf3>
 8021086:	e9cd 0100 	strd	r0, r1, [sp]
 802108a:	463b      	mov	r3, r7
 802108c:	4632      	mov	r2, r6
 802108e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8021092:	f7df f901 	bl	8000298 <__aeabi_dsub>
 8021096:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 802109a:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 802109e:	4639      	mov	r1, r7
 80210a0:	ec41 0b10 	vmov	d0, r0, r1
 80210a4:	b003      	add	sp, #12
 80210a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80210a8:	4a22      	ldr	r2, [pc, #136]	; (8021134 <rint+0x104>)
 80210aa:	4132      	asrs	r2, r6
 80210ac:	ea01 0702 	and.w	r7, r1, r2
 80210b0:	4307      	orrs	r7, r0
 80210b2:	d0f5      	beq.n	80210a0 <rint+0x70>
 80210b4:	0852      	lsrs	r2, r2, #1
 80210b6:	4011      	ands	r1, r2
 80210b8:	430c      	orrs	r4, r1
 80210ba:	d00b      	beq.n	80210d4 <rint+0xa4>
 80210bc:	ea23 0202 	bic.w	r2, r3, r2
 80210c0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80210c4:	2e13      	cmp	r6, #19
 80210c6:	fa43 f306 	asr.w	r3, r3, r6
 80210ca:	bf0c      	ite	eq
 80210cc:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 80210d0:	2400      	movne	r4, #0
 80210d2:	4313      	orrs	r3, r2
 80210d4:	4916      	ldr	r1, [pc, #88]	; (8021130 <rint+0x100>)
 80210d6:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 80210da:	4622      	mov	r2, r4
 80210dc:	e9d5 4500 	ldrd	r4, r5, [r5]
 80210e0:	4620      	mov	r0, r4
 80210e2:	4629      	mov	r1, r5
 80210e4:	f7df f8da 	bl	800029c <__adddf3>
 80210e8:	e9cd 0100 	strd	r0, r1, [sp]
 80210ec:	4622      	mov	r2, r4
 80210ee:	462b      	mov	r3, r5
 80210f0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80210f4:	f7df f8d0 	bl	8000298 <__aeabi_dsub>
 80210f8:	e7d2      	b.n	80210a0 <rint+0x70>
 80210fa:	2e33      	cmp	r6, #51	; 0x33
 80210fc:	dd07      	ble.n	802110e <rint+0xde>
 80210fe:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8021102:	d1cd      	bne.n	80210a0 <rint+0x70>
 8021104:	ee10 2a10 	vmov	r2, s0
 8021108:	f7df f8c8 	bl	800029c <__adddf3>
 802110c:	e7c8      	b.n	80210a0 <rint+0x70>
 802110e:	f2a2 4613 	subw	r6, r2, #1043	; 0x413
 8021112:	f04f 32ff 	mov.w	r2, #4294967295
 8021116:	40f2      	lsrs	r2, r6
 8021118:	4210      	tst	r0, r2
 802111a:	d0c1      	beq.n	80210a0 <rint+0x70>
 802111c:	0852      	lsrs	r2, r2, #1
 802111e:	4210      	tst	r0, r2
 8021120:	bf1f      	itttt	ne
 8021122:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 8021126:	ea20 0202 	bicne.w	r2, r0, r2
 802112a:	4134      	asrne	r4, r6
 802112c:	4314      	orrne	r4, r2
 802112e:	e7d1      	b.n	80210d4 <rint+0xa4>
 8021130:	0802a9f8 	.word	0x0802a9f8
 8021134:	000fffff 	.word	0x000fffff

08021138 <scalbn>:
 8021138:	b570      	push	{r4, r5, r6, lr}
 802113a:	ec55 4b10 	vmov	r4, r5, d0
 802113e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8021142:	4606      	mov	r6, r0
 8021144:	462b      	mov	r3, r5
 8021146:	b9aa      	cbnz	r2, 8021174 <scalbn+0x3c>
 8021148:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 802114c:	4323      	orrs	r3, r4
 802114e:	d03b      	beq.n	80211c8 <scalbn+0x90>
 8021150:	4b31      	ldr	r3, [pc, #196]	; (8021218 <scalbn+0xe0>)
 8021152:	4629      	mov	r1, r5
 8021154:	2200      	movs	r2, #0
 8021156:	ee10 0a10 	vmov	r0, s0
 802115a:	f7df fa55 	bl	8000608 <__aeabi_dmul>
 802115e:	4b2f      	ldr	r3, [pc, #188]	; (802121c <scalbn+0xe4>)
 8021160:	429e      	cmp	r6, r3
 8021162:	4604      	mov	r4, r0
 8021164:	460d      	mov	r5, r1
 8021166:	da12      	bge.n	802118e <scalbn+0x56>
 8021168:	a327      	add	r3, pc, #156	; (adr r3, 8021208 <scalbn+0xd0>)
 802116a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802116e:	f7df fa4b 	bl	8000608 <__aeabi_dmul>
 8021172:	e009      	b.n	8021188 <scalbn+0x50>
 8021174:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8021178:	428a      	cmp	r2, r1
 802117a:	d10c      	bne.n	8021196 <scalbn+0x5e>
 802117c:	ee10 2a10 	vmov	r2, s0
 8021180:	4620      	mov	r0, r4
 8021182:	4629      	mov	r1, r5
 8021184:	f7df f88a 	bl	800029c <__adddf3>
 8021188:	4604      	mov	r4, r0
 802118a:	460d      	mov	r5, r1
 802118c:	e01c      	b.n	80211c8 <scalbn+0x90>
 802118e:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8021192:	460b      	mov	r3, r1
 8021194:	3a36      	subs	r2, #54	; 0x36
 8021196:	4432      	add	r2, r6
 8021198:	f240 71fe 	movw	r1, #2046	; 0x7fe
 802119c:	428a      	cmp	r2, r1
 802119e:	dd0b      	ble.n	80211b8 <scalbn+0x80>
 80211a0:	ec45 4b11 	vmov	d1, r4, r5
 80211a4:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 8021210 <scalbn+0xd8>
 80211a8:	f000 f83c 	bl	8021224 <copysign>
 80211ac:	a318      	add	r3, pc, #96	; (adr r3, 8021210 <scalbn+0xd8>)
 80211ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80211b2:	ec51 0b10 	vmov	r0, r1, d0
 80211b6:	e7da      	b.n	802116e <scalbn+0x36>
 80211b8:	2a00      	cmp	r2, #0
 80211ba:	dd08      	ble.n	80211ce <scalbn+0x96>
 80211bc:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80211c0:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80211c4:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80211c8:	ec45 4b10 	vmov	d0, r4, r5
 80211cc:	bd70      	pop	{r4, r5, r6, pc}
 80211ce:	f112 0f35 	cmn.w	r2, #53	; 0x35
 80211d2:	da0d      	bge.n	80211f0 <scalbn+0xb8>
 80211d4:	f24c 3350 	movw	r3, #50000	; 0xc350
 80211d8:	429e      	cmp	r6, r3
 80211da:	ec45 4b11 	vmov	d1, r4, r5
 80211de:	dce1      	bgt.n	80211a4 <scalbn+0x6c>
 80211e0:	ed9f 0b09 	vldr	d0, [pc, #36]	; 8021208 <scalbn+0xd0>
 80211e4:	f000 f81e 	bl	8021224 <copysign>
 80211e8:	a307      	add	r3, pc, #28	; (adr r3, 8021208 <scalbn+0xd0>)
 80211ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80211ee:	e7e0      	b.n	80211b2 <scalbn+0x7a>
 80211f0:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80211f4:	3236      	adds	r2, #54	; 0x36
 80211f6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80211fa:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80211fe:	4620      	mov	r0, r4
 8021200:	4629      	mov	r1, r5
 8021202:	2200      	movs	r2, #0
 8021204:	4b06      	ldr	r3, [pc, #24]	; (8021220 <scalbn+0xe8>)
 8021206:	e7b2      	b.n	802116e <scalbn+0x36>
 8021208:	c2f8f359 	.word	0xc2f8f359
 802120c:	01a56e1f 	.word	0x01a56e1f
 8021210:	8800759c 	.word	0x8800759c
 8021214:	7e37e43c 	.word	0x7e37e43c
 8021218:	43500000 	.word	0x43500000
 802121c:	ffff3cb0 	.word	0xffff3cb0
 8021220:	3c900000 	.word	0x3c900000

08021224 <copysign>:
 8021224:	ec51 0b10 	vmov	r0, r1, d0
 8021228:	ee11 0a90 	vmov	r0, s3
 802122c:	ee10 2a10 	vmov	r2, s0
 8021230:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8021234:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8021238:	ea41 0300 	orr.w	r3, r1, r0
 802123c:	ec43 2b10 	vmov	d0, r2, r3
 8021240:	4770      	bx	lr
	...

08021244 <_init>:
 8021244:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8021246:	bf00      	nop
 8021248:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802124a:	bc08      	pop	{r3}
 802124c:	469e      	mov	lr, r3
 802124e:	4770      	bx	lr

08021250 <_fini>:
 8021250:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8021252:	bf00      	nop
 8021254:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8021256:	bc08      	pop	{r3}
 8021258:	469e      	mov	lr, r3
 802125a:	4770      	bx	lr
