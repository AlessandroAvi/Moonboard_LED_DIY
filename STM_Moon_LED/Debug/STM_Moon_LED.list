
STM_Moon_LED.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000050ec  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e0  08005290  08005290  00015290  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005370  08005370  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08005370  08005370  00015370  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005378  08005378  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005378  08005378  00015378  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800537c  0800537c  0001537c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08005380  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b4  20000074  080053f4  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000128  080053f4  00020128  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c630  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001f3e  00000000  00000000  0002c6d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000c00  00000000  00000000  0002e618  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000ae8  00000000  00000000  0002f218  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0000257d  00000000  00000000  0002fd00  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000a411  00000000  00000000  0003227d  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008cbb6  00000000  00000000  0003c68e  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000c9244  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000037d8  00000000  00000000  000c92c0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000074 	.word	0x20000074
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08005274 	.word	0x08005274

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000078 	.word	0x20000078
 80001dc:	08005274 	.word	0x08005274

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2uiz>:
 8000b58:	004a      	lsls	r2, r1, #1
 8000b5a:	d211      	bcs.n	8000b80 <__aeabi_d2uiz+0x28>
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d211      	bcs.n	8000b86 <__aeabi_d2uiz+0x2e>
 8000b62:	d50d      	bpl.n	8000b80 <__aeabi_d2uiz+0x28>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d40e      	bmi.n	8000b8c <__aeabi_d2uiz+0x34>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b7e:	4770      	bx	lr
 8000b80:	f04f 0000 	mov.w	r0, #0
 8000b84:	4770      	bx	lr
 8000b86:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_d2uiz+0x3a>
 8000b8c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0000 	mov.w	r0, #0
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_uldivmod>:
 8000b98:	b953      	cbnz	r3, 8000bb0 <__aeabi_uldivmod+0x18>
 8000b9a:	b94a      	cbnz	r2, 8000bb0 <__aeabi_uldivmod+0x18>
 8000b9c:	2900      	cmp	r1, #0
 8000b9e:	bf08      	it	eq
 8000ba0:	2800      	cmpeq	r0, #0
 8000ba2:	bf1c      	itt	ne
 8000ba4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ba8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bac:	f000 b972 	b.w	8000e94 <__aeabi_idiv0>
 8000bb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bb8:	f000 f806 	bl	8000bc8 <__udivmoddi4>
 8000bbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bc4:	b004      	add	sp, #16
 8000bc6:	4770      	bx	lr

08000bc8 <__udivmoddi4>:
 8000bc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bcc:	9e08      	ldr	r6, [sp, #32]
 8000bce:	4604      	mov	r4, r0
 8000bd0:	4688      	mov	r8, r1
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d14b      	bne.n	8000c6e <__udivmoddi4+0xa6>
 8000bd6:	428a      	cmp	r2, r1
 8000bd8:	4615      	mov	r5, r2
 8000bda:	d967      	bls.n	8000cac <__udivmoddi4+0xe4>
 8000bdc:	fab2 f282 	clz	r2, r2
 8000be0:	b14a      	cbz	r2, 8000bf6 <__udivmoddi4+0x2e>
 8000be2:	f1c2 0720 	rsb	r7, r2, #32
 8000be6:	fa01 f302 	lsl.w	r3, r1, r2
 8000bea:	fa20 f707 	lsr.w	r7, r0, r7
 8000bee:	4095      	lsls	r5, r2
 8000bf0:	ea47 0803 	orr.w	r8, r7, r3
 8000bf4:	4094      	lsls	r4, r2
 8000bf6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000bfa:	0c23      	lsrs	r3, r4, #16
 8000bfc:	fbb8 f7fe 	udiv	r7, r8, lr
 8000c00:	fa1f fc85 	uxth.w	ip, r5
 8000c04:	fb0e 8817 	mls	r8, lr, r7, r8
 8000c08:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c0c:	fb07 f10c 	mul.w	r1, r7, ip
 8000c10:	4299      	cmp	r1, r3
 8000c12:	d909      	bls.n	8000c28 <__udivmoddi4+0x60>
 8000c14:	18eb      	adds	r3, r5, r3
 8000c16:	f107 30ff 	add.w	r0, r7, #4294967295
 8000c1a:	f080 811b 	bcs.w	8000e54 <__udivmoddi4+0x28c>
 8000c1e:	4299      	cmp	r1, r3
 8000c20:	f240 8118 	bls.w	8000e54 <__udivmoddi4+0x28c>
 8000c24:	3f02      	subs	r7, #2
 8000c26:	442b      	add	r3, r5
 8000c28:	1a5b      	subs	r3, r3, r1
 8000c2a:	b2a4      	uxth	r4, r4
 8000c2c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c30:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c34:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c38:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c3c:	45a4      	cmp	ip, r4
 8000c3e:	d909      	bls.n	8000c54 <__udivmoddi4+0x8c>
 8000c40:	192c      	adds	r4, r5, r4
 8000c42:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c46:	f080 8107 	bcs.w	8000e58 <__udivmoddi4+0x290>
 8000c4a:	45a4      	cmp	ip, r4
 8000c4c:	f240 8104 	bls.w	8000e58 <__udivmoddi4+0x290>
 8000c50:	3802      	subs	r0, #2
 8000c52:	442c      	add	r4, r5
 8000c54:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000c58:	eba4 040c 	sub.w	r4, r4, ip
 8000c5c:	2700      	movs	r7, #0
 8000c5e:	b11e      	cbz	r6, 8000c68 <__udivmoddi4+0xa0>
 8000c60:	40d4      	lsrs	r4, r2
 8000c62:	2300      	movs	r3, #0
 8000c64:	e9c6 4300 	strd	r4, r3, [r6]
 8000c68:	4639      	mov	r1, r7
 8000c6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c6e:	428b      	cmp	r3, r1
 8000c70:	d909      	bls.n	8000c86 <__udivmoddi4+0xbe>
 8000c72:	2e00      	cmp	r6, #0
 8000c74:	f000 80eb 	beq.w	8000e4e <__udivmoddi4+0x286>
 8000c78:	2700      	movs	r7, #0
 8000c7a:	e9c6 0100 	strd	r0, r1, [r6]
 8000c7e:	4638      	mov	r0, r7
 8000c80:	4639      	mov	r1, r7
 8000c82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c86:	fab3 f783 	clz	r7, r3
 8000c8a:	2f00      	cmp	r7, #0
 8000c8c:	d147      	bne.n	8000d1e <__udivmoddi4+0x156>
 8000c8e:	428b      	cmp	r3, r1
 8000c90:	d302      	bcc.n	8000c98 <__udivmoddi4+0xd0>
 8000c92:	4282      	cmp	r2, r0
 8000c94:	f200 80fa 	bhi.w	8000e8c <__udivmoddi4+0x2c4>
 8000c98:	1a84      	subs	r4, r0, r2
 8000c9a:	eb61 0303 	sbc.w	r3, r1, r3
 8000c9e:	2001      	movs	r0, #1
 8000ca0:	4698      	mov	r8, r3
 8000ca2:	2e00      	cmp	r6, #0
 8000ca4:	d0e0      	beq.n	8000c68 <__udivmoddi4+0xa0>
 8000ca6:	e9c6 4800 	strd	r4, r8, [r6]
 8000caa:	e7dd      	b.n	8000c68 <__udivmoddi4+0xa0>
 8000cac:	b902      	cbnz	r2, 8000cb0 <__udivmoddi4+0xe8>
 8000cae:	deff      	udf	#255	; 0xff
 8000cb0:	fab2 f282 	clz	r2, r2
 8000cb4:	2a00      	cmp	r2, #0
 8000cb6:	f040 808f 	bne.w	8000dd8 <__udivmoddi4+0x210>
 8000cba:	1b49      	subs	r1, r1, r5
 8000cbc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cc0:	fa1f f885 	uxth.w	r8, r5
 8000cc4:	2701      	movs	r7, #1
 8000cc6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000cca:	0c23      	lsrs	r3, r4, #16
 8000ccc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000cd0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cd4:	fb08 f10c 	mul.w	r1, r8, ip
 8000cd8:	4299      	cmp	r1, r3
 8000cda:	d907      	bls.n	8000cec <__udivmoddi4+0x124>
 8000cdc:	18eb      	adds	r3, r5, r3
 8000cde:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000ce2:	d202      	bcs.n	8000cea <__udivmoddi4+0x122>
 8000ce4:	4299      	cmp	r1, r3
 8000ce6:	f200 80cd 	bhi.w	8000e84 <__udivmoddi4+0x2bc>
 8000cea:	4684      	mov	ip, r0
 8000cec:	1a59      	subs	r1, r3, r1
 8000cee:	b2a3      	uxth	r3, r4
 8000cf0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000cf4:	fb0e 1410 	mls	r4, lr, r0, r1
 8000cf8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000cfc:	fb08 f800 	mul.w	r8, r8, r0
 8000d00:	45a0      	cmp	r8, r4
 8000d02:	d907      	bls.n	8000d14 <__udivmoddi4+0x14c>
 8000d04:	192c      	adds	r4, r5, r4
 8000d06:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d0a:	d202      	bcs.n	8000d12 <__udivmoddi4+0x14a>
 8000d0c:	45a0      	cmp	r8, r4
 8000d0e:	f200 80b6 	bhi.w	8000e7e <__udivmoddi4+0x2b6>
 8000d12:	4618      	mov	r0, r3
 8000d14:	eba4 0408 	sub.w	r4, r4, r8
 8000d18:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d1c:	e79f      	b.n	8000c5e <__udivmoddi4+0x96>
 8000d1e:	f1c7 0c20 	rsb	ip, r7, #32
 8000d22:	40bb      	lsls	r3, r7
 8000d24:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000d28:	ea4e 0e03 	orr.w	lr, lr, r3
 8000d2c:	fa01 f407 	lsl.w	r4, r1, r7
 8000d30:	fa20 f50c 	lsr.w	r5, r0, ip
 8000d34:	fa21 f30c 	lsr.w	r3, r1, ip
 8000d38:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000d3c:	4325      	orrs	r5, r4
 8000d3e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000d42:	0c2c      	lsrs	r4, r5, #16
 8000d44:	fb08 3319 	mls	r3, r8, r9, r3
 8000d48:	fa1f fa8e 	uxth.w	sl, lr
 8000d4c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000d50:	fb09 f40a 	mul.w	r4, r9, sl
 8000d54:	429c      	cmp	r4, r3
 8000d56:	fa02 f207 	lsl.w	r2, r2, r7
 8000d5a:	fa00 f107 	lsl.w	r1, r0, r7
 8000d5e:	d90b      	bls.n	8000d78 <__udivmoddi4+0x1b0>
 8000d60:	eb1e 0303 	adds.w	r3, lr, r3
 8000d64:	f109 30ff 	add.w	r0, r9, #4294967295
 8000d68:	f080 8087 	bcs.w	8000e7a <__udivmoddi4+0x2b2>
 8000d6c:	429c      	cmp	r4, r3
 8000d6e:	f240 8084 	bls.w	8000e7a <__udivmoddi4+0x2b2>
 8000d72:	f1a9 0902 	sub.w	r9, r9, #2
 8000d76:	4473      	add	r3, lr
 8000d78:	1b1b      	subs	r3, r3, r4
 8000d7a:	b2ad      	uxth	r5, r5
 8000d7c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d80:	fb08 3310 	mls	r3, r8, r0, r3
 8000d84:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000d88:	fb00 fa0a 	mul.w	sl, r0, sl
 8000d8c:	45a2      	cmp	sl, r4
 8000d8e:	d908      	bls.n	8000da2 <__udivmoddi4+0x1da>
 8000d90:	eb1e 0404 	adds.w	r4, lr, r4
 8000d94:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d98:	d26b      	bcs.n	8000e72 <__udivmoddi4+0x2aa>
 8000d9a:	45a2      	cmp	sl, r4
 8000d9c:	d969      	bls.n	8000e72 <__udivmoddi4+0x2aa>
 8000d9e:	3802      	subs	r0, #2
 8000da0:	4474      	add	r4, lr
 8000da2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000da6:	fba0 8902 	umull	r8, r9, r0, r2
 8000daa:	eba4 040a 	sub.w	r4, r4, sl
 8000dae:	454c      	cmp	r4, r9
 8000db0:	46c2      	mov	sl, r8
 8000db2:	464b      	mov	r3, r9
 8000db4:	d354      	bcc.n	8000e60 <__udivmoddi4+0x298>
 8000db6:	d051      	beq.n	8000e5c <__udivmoddi4+0x294>
 8000db8:	2e00      	cmp	r6, #0
 8000dba:	d069      	beq.n	8000e90 <__udivmoddi4+0x2c8>
 8000dbc:	ebb1 050a 	subs.w	r5, r1, sl
 8000dc0:	eb64 0403 	sbc.w	r4, r4, r3
 8000dc4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000dc8:	40fd      	lsrs	r5, r7
 8000dca:	40fc      	lsrs	r4, r7
 8000dcc:	ea4c 0505 	orr.w	r5, ip, r5
 8000dd0:	e9c6 5400 	strd	r5, r4, [r6]
 8000dd4:	2700      	movs	r7, #0
 8000dd6:	e747      	b.n	8000c68 <__udivmoddi4+0xa0>
 8000dd8:	f1c2 0320 	rsb	r3, r2, #32
 8000ddc:	fa20 f703 	lsr.w	r7, r0, r3
 8000de0:	4095      	lsls	r5, r2
 8000de2:	fa01 f002 	lsl.w	r0, r1, r2
 8000de6:	fa21 f303 	lsr.w	r3, r1, r3
 8000dea:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000dee:	4338      	orrs	r0, r7
 8000df0:	0c01      	lsrs	r1, r0, #16
 8000df2:	fbb3 f7fe 	udiv	r7, r3, lr
 8000df6:	fa1f f885 	uxth.w	r8, r5
 8000dfa:	fb0e 3317 	mls	r3, lr, r7, r3
 8000dfe:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e02:	fb07 f308 	mul.w	r3, r7, r8
 8000e06:	428b      	cmp	r3, r1
 8000e08:	fa04 f402 	lsl.w	r4, r4, r2
 8000e0c:	d907      	bls.n	8000e1e <__udivmoddi4+0x256>
 8000e0e:	1869      	adds	r1, r5, r1
 8000e10:	f107 3cff 	add.w	ip, r7, #4294967295
 8000e14:	d22f      	bcs.n	8000e76 <__udivmoddi4+0x2ae>
 8000e16:	428b      	cmp	r3, r1
 8000e18:	d92d      	bls.n	8000e76 <__udivmoddi4+0x2ae>
 8000e1a:	3f02      	subs	r7, #2
 8000e1c:	4429      	add	r1, r5
 8000e1e:	1acb      	subs	r3, r1, r3
 8000e20:	b281      	uxth	r1, r0
 8000e22:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e26:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e2a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e2e:	fb00 f308 	mul.w	r3, r0, r8
 8000e32:	428b      	cmp	r3, r1
 8000e34:	d907      	bls.n	8000e46 <__udivmoddi4+0x27e>
 8000e36:	1869      	adds	r1, r5, r1
 8000e38:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e3c:	d217      	bcs.n	8000e6e <__udivmoddi4+0x2a6>
 8000e3e:	428b      	cmp	r3, r1
 8000e40:	d915      	bls.n	8000e6e <__udivmoddi4+0x2a6>
 8000e42:	3802      	subs	r0, #2
 8000e44:	4429      	add	r1, r5
 8000e46:	1ac9      	subs	r1, r1, r3
 8000e48:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000e4c:	e73b      	b.n	8000cc6 <__udivmoddi4+0xfe>
 8000e4e:	4637      	mov	r7, r6
 8000e50:	4630      	mov	r0, r6
 8000e52:	e709      	b.n	8000c68 <__udivmoddi4+0xa0>
 8000e54:	4607      	mov	r7, r0
 8000e56:	e6e7      	b.n	8000c28 <__udivmoddi4+0x60>
 8000e58:	4618      	mov	r0, r3
 8000e5a:	e6fb      	b.n	8000c54 <__udivmoddi4+0x8c>
 8000e5c:	4541      	cmp	r1, r8
 8000e5e:	d2ab      	bcs.n	8000db8 <__udivmoddi4+0x1f0>
 8000e60:	ebb8 0a02 	subs.w	sl, r8, r2
 8000e64:	eb69 020e 	sbc.w	r2, r9, lr
 8000e68:	3801      	subs	r0, #1
 8000e6a:	4613      	mov	r3, r2
 8000e6c:	e7a4      	b.n	8000db8 <__udivmoddi4+0x1f0>
 8000e6e:	4660      	mov	r0, ip
 8000e70:	e7e9      	b.n	8000e46 <__udivmoddi4+0x27e>
 8000e72:	4618      	mov	r0, r3
 8000e74:	e795      	b.n	8000da2 <__udivmoddi4+0x1da>
 8000e76:	4667      	mov	r7, ip
 8000e78:	e7d1      	b.n	8000e1e <__udivmoddi4+0x256>
 8000e7a:	4681      	mov	r9, r0
 8000e7c:	e77c      	b.n	8000d78 <__udivmoddi4+0x1b0>
 8000e7e:	3802      	subs	r0, #2
 8000e80:	442c      	add	r4, r5
 8000e82:	e747      	b.n	8000d14 <__udivmoddi4+0x14c>
 8000e84:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e88:	442b      	add	r3, r5
 8000e8a:	e72f      	b.n	8000cec <__udivmoddi4+0x124>
 8000e8c:	4638      	mov	r0, r7
 8000e8e:	e708      	b.n	8000ca2 <__udivmoddi4+0xda>
 8000e90:	4637      	mov	r7, r6
 8000e92:	e6e9      	b.n	8000c68 <__udivmoddi4+0xa0>

08000e94 <__aeabi_idiv0>:
 8000e94:	4770      	bx	lr
 8000e96:	bf00      	nop

08000e98 <PRINTF>:
#include "usart.h"
#include "debug.h"



void PRINTF(char str[50]){
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b090      	sub	sp, #64	; 0x40
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
  char msg[50];
  int msg_len;
  msg_len = sprintf(msg, str);
 8000ea0:	f107 0308 	add.w	r3, r7, #8
 8000ea4:	6879      	ldr	r1, [r7, #4]
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	f002 fd88 	bl	80039bc <siprintf>
 8000eac:	63f8      	str	r0, [r7, #60]	; 0x3c
  HAL_UART_Transmit(&huart2, (uint8_t *)msg, msg_len, 5000);
 8000eae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000eb0:	b29a      	uxth	r2, r3
 8000eb2:	f107 0108 	add.w	r1, r7, #8
 8000eb6:	f241 3388 	movw	r3, #5000	; 0x1388
 8000eba:	4803      	ldr	r0, [pc, #12]	; (8000ec8 <PRINTF+0x30>)
 8000ebc:	f002 f8ed 	bl	800309a <HAL_UART_Transmit>
}
 8000ec0:	bf00      	nop
 8000ec2:	3740      	adds	r7, #64	; 0x40
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	bd80      	pop	{r7, pc}
 8000ec8:	200000e0 	.word	0x200000e0

08000ecc <PRINTF8>:


void PRINTF8(char str[50], uint8_t val){
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b090      	sub	sp, #64	; 0x40
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
 8000ed4:	460b      	mov	r3, r1
 8000ed6:	70fb      	strb	r3, [r7, #3]
  char msg[50];
  int msg_len;
  msg_len = sprintf(msg, str,val);
 8000ed8:	78fa      	ldrb	r2, [r7, #3]
 8000eda:	f107 0308 	add.w	r3, r7, #8
 8000ede:	6879      	ldr	r1, [r7, #4]
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	f002 fd6b 	bl	80039bc <siprintf>
 8000ee6:	63f8      	str	r0, [r7, #60]	; 0x3c
  HAL_UART_Transmit(&huart2, (uint8_t *)msg, msg_len, 5000);
 8000ee8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000eea:	b29a      	uxth	r2, r3
 8000eec:	f107 0108 	add.w	r1, r7, #8
 8000ef0:	f241 3388 	movw	r3, #5000	; 0x1388
 8000ef4:	4803      	ldr	r0, [pc, #12]	; (8000f04 <PRINTF8+0x38>)
 8000ef6:	f002 f8d0 	bl	800309a <HAL_UART_Transmit>
}
 8000efa:	bf00      	nop
 8000efc:	3740      	adds	r7, #64	; 0x40
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bd80      	pop	{r7, pc}
 8000f02:	bf00      	nop
 8000f04:	200000e0 	.word	0x200000e0

08000f08 <PRINTF32>:
  msg_len = sprintf(msg, str,val);
  HAL_UART_Transmit(&huart2, (uint8_t *)msg, msg_len, 5000);
}


void PRINTF32(char str[50], uint32_t val){
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b090      	sub	sp, #64	; 0x40
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
 8000f10:	6039      	str	r1, [r7, #0]
  char msg[50];
  int msg_len;
  msg_len = sprintf(msg, str,val);
 8000f12:	f107 0308 	add.w	r3, r7, #8
 8000f16:	683a      	ldr	r2, [r7, #0]
 8000f18:	6879      	ldr	r1, [r7, #4]
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	f002 fd4e 	bl	80039bc <siprintf>
 8000f20:	63f8      	str	r0, [r7, #60]	; 0x3c
  HAL_UART_Transmit(&huart2, (uint8_t *)msg, msg_len, 5000);
 8000f22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000f24:	b29a      	uxth	r2, r3
 8000f26:	f107 0108 	add.w	r1, r7, #8
 8000f2a:	f241 3388 	movw	r3, #5000	; 0x1388
 8000f2e:	4803      	ldr	r0, [pc, #12]	; (8000f3c <PRINTF32+0x34>)
 8000f30:	f002 f8b3 	bl	800309a <HAL_UART_Transmit>
}
 8000f34:	bf00      	nop
 8000f36:	3740      	adds	r7, #64	; 0x40
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	bd80      	pop	{r7, pc}
 8000f3c:	200000e0 	.word	0x200000e0

08000f40 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b08a      	sub	sp, #40	; 0x28
 8000f44:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f46:	f107 0314 	add.w	r3, r7, #20
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	601a      	str	r2, [r3, #0]
 8000f4e:	605a      	str	r2, [r3, #4]
 8000f50:	609a      	str	r2, [r3, #8]
 8000f52:	60da      	str	r2, [r3, #12]
 8000f54:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f56:	2300      	movs	r3, #0
 8000f58:	613b      	str	r3, [r7, #16]
 8000f5a:	4b37      	ldr	r3, [pc, #220]	; (8001038 <MX_GPIO_Init+0xf8>)
 8000f5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f5e:	4a36      	ldr	r2, [pc, #216]	; (8001038 <MX_GPIO_Init+0xf8>)
 8000f60:	f043 0304 	orr.w	r3, r3, #4
 8000f64:	6313      	str	r3, [r2, #48]	; 0x30
 8000f66:	4b34      	ldr	r3, [pc, #208]	; (8001038 <MX_GPIO_Init+0xf8>)
 8000f68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f6a:	f003 0304 	and.w	r3, r3, #4
 8000f6e:	613b      	str	r3, [r7, #16]
 8000f70:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f72:	2300      	movs	r3, #0
 8000f74:	60fb      	str	r3, [r7, #12]
 8000f76:	4b30      	ldr	r3, [pc, #192]	; (8001038 <MX_GPIO_Init+0xf8>)
 8000f78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f7a:	4a2f      	ldr	r2, [pc, #188]	; (8001038 <MX_GPIO_Init+0xf8>)
 8000f7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f80:	6313      	str	r3, [r2, #48]	; 0x30
 8000f82:	4b2d      	ldr	r3, [pc, #180]	; (8001038 <MX_GPIO_Init+0xf8>)
 8000f84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f8a:	60fb      	str	r3, [r7, #12]
 8000f8c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f8e:	2300      	movs	r3, #0
 8000f90:	60bb      	str	r3, [r7, #8]
 8000f92:	4b29      	ldr	r3, [pc, #164]	; (8001038 <MX_GPIO_Init+0xf8>)
 8000f94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f96:	4a28      	ldr	r2, [pc, #160]	; (8001038 <MX_GPIO_Init+0xf8>)
 8000f98:	f043 0301 	orr.w	r3, r3, #1
 8000f9c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f9e:	4b26      	ldr	r3, [pc, #152]	; (8001038 <MX_GPIO_Init+0xf8>)
 8000fa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fa2:	f003 0301 	and.w	r3, r3, #1
 8000fa6:	60bb      	str	r3, [r7, #8]
 8000fa8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000faa:	2300      	movs	r3, #0
 8000fac:	607b      	str	r3, [r7, #4]
 8000fae:	4b22      	ldr	r3, [pc, #136]	; (8001038 <MX_GPIO_Init+0xf8>)
 8000fb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fb2:	4a21      	ldr	r2, [pc, #132]	; (8001038 <MX_GPIO_Init+0xf8>)
 8000fb4:	f043 0302 	orr.w	r3, r3, #2
 8000fb8:	6313      	str	r3, [r2, #48]	; 0x30
 8000fba:	4b1f      	ldr	r3, [pc, #124]	; (8001038 <MX_GPIO_Init+0xf8>)
 8000fbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fbe:	f003 0302 	and.w	r3, r3, #2
 8000fc2:	607b      	str	r3, [r7, #4]
 8000fc4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3, GPIO_PIN_RESET);
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	210f      	movs	r1, #15
 8000fca:	481c      	ldr	r0, [pc, #112]	; (800103c <MX_GPIO_Init+0xfc>)
 8000fcc:	f001 f818 	bl	8002000 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000fd0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000fd4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000fd6:	4b1a      	ldr	r3, [pc, #104]	; (8001040 <MX_GPIO_Init+0x100>)
 8000fd8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000fde:	f107 0314 	add.w	r3, r7, #20
 8000fe2:	4619      	mov	r1, r3
 8000fe4:	4815      	ldr	r0, [pc, #84]	; (800103c <MX_GPIO_Init+0xfc>)
 8000fe6:	f000 fe71 	bl	8001ccc <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8000fea:	230f      	movs	r3, #15
 8000fec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fee:	2301      	movs	r3, #1
 8000ff0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ffa:	f107 0314 	add.w	r3, r7, #20
 8000ffe:	4619      	mov	r1, r3
 8001000:	480e      	ldr	r0, [pc, #56]	; (800103c <MX_GPIO_Init+0xfc>)
 8001002:	f000 fe63 	bl	8001ccc <HAL_GPIO_Init>

  /*Configure GPIO pins : PC4 PC5 PC6 PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001006:	23f0      	movs	r3, #240	; 0xf0
 8001008:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800100a:	2300      	movs	r3, #0
 800100c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800100e:	2300      	movs	r3, #0
 8001010:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001012:	f107 0314 	add.w	r3, r7, #20
 8001016:	4619      	mov	r1, r3
 8001018:	4808      	ldr	r0, [pc, #32]	; (800103c <MX_GPIO_Init+0xfc>)
 800101a:	f000 fe57 	bl	8001ccc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800101e:	2200      	movs	r2, #0
 8001020:	2100      	movs	r1, #0
 8001022:	2028      	movs	r0, #40	; 0x28
 8001024:	f000 fe1b 	bl	8001c5e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001028:	2028      	movs	r0, #40	; 0x28
 800102a:	f000 fe34 	bl	8001c96 <HAL_NVIC_EnableIRQ>

}
 800102e:	bf00      	nop
 8001030:	3728      	adds	r7, #40	; 0x28
 8001032:	46bd      	mov	sp, r7
 8001034:	bd80      	pop	{r7, pc}
 8001036:	bf00      	nop
 8001038:	40023800 	.word	0x40023800
 800103c:	40020800 	.word	0x40020800
 8001040:	10210000 	.word	0x10210000

08001044 <read_GPIO>:
// ********************************************************




uint8_t read_GPIO(){
 8001044:	b580      	push	{r7, lr}
 8001046:	af00      	add	r7, sp, #0

	if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_3)) return 1;
 8001048:	2108      	movs	r1, #8
 800104a:	4813      	ldr	r0, [pc, #76]	; (8001098 <read_GPIO+0x54>)
 800104c:	f000 ffc0 	bl	8001fd0 <HAL_GPIO_ReadPin>
 8001050:	4603      	mov	r3, r0
 8001052:	2b00      	cmp	r3, #0
 8001054:	d001      	beq.n	800105a <read_GPIO+0x16>
 8001056:	2301      	movs	r3, #1
 8001058:	e01c      	b.n	8001094 <read_GPIO+0x50>
	if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_10)) return 2;
 800105a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800105e:	480f      	ldr	r0, [pc, #60]	; (800109c <read_GPIO+0x58>)
 8001060:	f000 ffb6 	bl	8001fd0 <HAL_GPIO_ReadPin>
 8001064:	4603      	mov	r3, r0
 8001066:	2b00      	cmp	r3, #0
 8001068:	d001      	beq.n	800106e <read_GPIO+0x2a>
 800106a:	2302      	movs	r3, #2
 800106c:	e012      	b.n	8001094 <read_GPIO+0x50>
	if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_2)) return 3;
 800106e:	2104      	movs	r1, #4
 8001070:	480a      	ldr	r0, [pc, #40]	; (800109c <read_GPIO+0x58>)
 8001072:	f000 ffad 	bl	8001fd0 <HAL_GPIO_ReadPin>
 8001076:	4603      	mov	r3, r0
 8001078:	2b00      	cmp	r3, #0
 800107a:	d001      	beq.n	8001080 <read_GPIO+0x3c>
 800107c:	2303      	movs	r3, #3
 800107e:	e009      	b.n	8001094 <read_GPIO+0x50>
	if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_3)) return 4;
 8001080:	2108      	movs	r1, #8
 8001082:	4806      	ldr	r0, [pc, #24]	; (800109c <read_GPIO+0x58>)
 8001084:	f000 ffa4 	bl	8001fd0 <HAL_GPIO_ReadPin>
 8001088:	4603      	mov	r3, r0
 800108a:	2b00      	cmp	r3, #0
 800108c:	d001      	beq.n	8001092 <read_GPIO+0x4e>
 800108e:	2304      	movs	r3, #4
 8001090:	e000      	b.n	8001094 <read_GPIO+0x50>

	return 0;
 8001092:	2300      	movs	r3, #0
}
 8001094:	4618      	mov	r0, r3
 8001096:	bd80      	pop	{r7, pc}
 8001098:	40020400 	.word	0x40020400
 800109c:	40020000 	.word	0x40020000

080010a0 <write_GPIO>:

uint8_t write_GPIO(uint8_t riga){
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b084      	sub	sp, #16
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	4603      	mov	r3, r0
 80010a8:	71fb      	strb	r3, [r7, #7]

	GPIO_PinState state_row1 = GPIO_PIN_RESET;
 80010aa:	2300      	movs	r3, #0
 80010ac:	73fb      	strb	r3, [r7, #15]
	GPIO_PinState state_row2 = GPIO_PIN_RESET;
 80010ae:	2300      	movs	r3, #0
 80010b0:	73bb      	strb	r3, [r7, #14]
	GPIO_PinState state_row3 = GPIO_PIN_RESET;
 80010b2:	2300      	movs	r3, #0
 80010b4:	737b      	strb	r3, [r7, #13]
	GPIO_PinState state_row4 = GPIO_PIN_RESET;
 80010b6:	2300      	movs	r3, #0
 80010b8:	733b      	strb	r3, [r7, #12]

	if(riga==1){
 80010ba:	79fb      	ldrb	r3, [r7, #7]
 80010bc:	2b01      	cmp	r3, #1
 80010be:	d102      	bne.n	80010c6 <write_GPIO+0x26>
		state_row1 = GPIO_PIN_SET;
 80010c0:	2301      	movs	r3, #1
 80010c2:	73fb      	strb	r3, [r7, #15]
 80010c4:	e010      	b.n	80010e8 <write_GPIO+0x48>
	}else if(riga==2){
 80010c6:	79fb      	ldrb	r3, [r7, #7]
 80010c8:	2b02      	cmp	r3, #2
 80010ca:	d102      	bne.n	80010d2 <write_GPIO+0x32>
		state_row2 = GPIO_PIN_SET;
 80010cc:	2301      	movs	r3, #1
 80010ce:	73bb      	strb	r3, [r7, #14]
 80010d0:	e00a      	b.n	80010e8 <write_GPIO+0x48>
	}else if(riga==3){
 80010d2:	79fb      	ldrb	r3, [r7, #7]
 80010d4:	2b03      	cmp	r3, #3
 80010d6:	d102      	bne.n	80010de <write_GPIO+0x3e>
		state_row3 = GPIO_PIN_SET;
 80010d8:	2301      	movs	r3, #1
 80010da:	737b      	strb	r3, [r7, #13]
 80010dc:	e004      	b.n	80010e8 <write_GPIO+0x48>
	}else if(riga==4){
 80010de:	79fb      	ldrb	r3, [r7, #7]
 80010e0:	2b04      	cmp	r3, #4
 80010e2:	d101      	bne.n	80010e8 <write_GPIO+0x48>
		state_row4 = GPIO_PIN_SET;
 80010e4:	2301      	movs	r3, #1
 80010e6:	733b      	strb	r3, [r7, #12]
	}

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, state_row1);
 80010e8:	7bfb      	ldrb	r3, [r7, #15]
 80010ea:	461a      	mov	r2, r3
 80010ec:	f44f 7180 	mov.w	r1, #256	; 0x100
 80010f0:	480d      	ldr	r0, [pc, #52]	; (8001128 <write_GPIO+0x88>)
 80010f2:	f000 ff85 	bl	8002000 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, state_row2);
 80010f6:	7bbb      	ldrb	r3, [r7, #14]
 80010f8:	461a      	mov	r2, r3
 80010fa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80010fe:	480b      	ldr	r0, [pc, #44]	; (800112c <write_GPIO+0x8c>)
 8001100:	f000 ff7e 	bl	8002000 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, state_row3);
 8001104:	7b7b      	ldrb	r3, [r7, #13]
 8001106:	461a      	mov	r2, r3
 8001108:	2110      	movs	r1, #16
 800110a:	4808      	ldr	r0, [pc, #32]	; (800112c <write_GPIO+0x8c>)
 800110c:	f000 ff78 	bl	8002000 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, state_row4);
 8001110:	7b3b      	ldrb	r3, [r7, #12]
 8001112:	461a      	mov	r2, r3
 8001114:	2120      	movs	r1, #32
 8001116:	4805      	ldr	r0, [pc, #20]	; (800112c <write_GPIO+0x8c>)
 8001118:	f000 ff72 	bl	8002000 <HAL_GPIO_WritePin>
}
 800111c:	bf00      	nop
 800111e:	4618      	mov	r0, r3
 8001120:	3710      	adds	r7, #16
 8001122:	46bd      	mov	sp, r7
 8001124:	bd80      	pop	{r7, pc}
 8001126:	bf00      	nop
 8001128:	40020000 	.word	0x40020000
 800112c:	40020400 	.word	0x40020400

08001130 <decode_key_v2>:


uint8_t decode_key_v2(uint8_t row, uint8_t col){
 8001130:	b480      	push	{r7}
 8001132:	b085      	sub	sp, #20
 8001134:	af00      	add	r7, sp, #0
 8001136:	4603      	mov	r3, r0
 8001138:	460a      	mov	r2, r1
 800113a:	71fb      	strb	r3, [r7, #7]
 800113c:	4613      	mov	r3, r2
 800113e:	71bb      	strb	r3, [r7, #6]
	uint8_t key;

	switch(row){
 8001140:	79fb      	ldrb	r3, [r7, #7]
 8001142:	3b01      	subs	r3, #1
 8001144:	2b03      	cmp	r3, #3
 8001146:	d85f      	bhi.n	8001208 <decode_key_v2+0xd8>
 8001148:	a201      	add	r2, pc, #4	; (adr r2, 8001150 <decode_key_v2+0x20>)
 800114a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800114e:	bf00      	nop
 8001150:	08001161 	.word	0x08001161
 8001154:	0800118b 	.word	0x0800118b
 8001158:	080011b5 	.word	0x080011b5
 800115c:	080011df 	.word	0x080011df
		case(1):
			if (col==1) key=1;
 8001160:	79bb      	ldrb	r3, [r7, #6]
 8001162:	2b01      	cmp	r3, #1
 8001164:	d101      	bne.n	800116a <decode_key_v2+0x3a>
 8001166:	2301      	movs	r3, #1
 8001168:	73fb      	strb	r3, [r7, #15]
			if (col==2) key=4;
 800116a:	79bb      	ldrb	r3, [r7, #6]
 800116c:	2b02      	cmp	r3, #2
 800116e:	d101      	bne.n	8001174 <decode_key_v2+0x44>
 8001170:	2304      	movs	r3, #4
 8001172:	73fb      	strb	r3, [r7, #15]
			if (col==3) key=7;
 8001174:	79bb      	ldrb	r3, [r7, #6]
 8001176:	2b03      	cmp	r3, #3
 8001178:	d101      	bne.n	800117e <decode_key_v2+0x4e>
 800117a:	2307      	movs	r3, #7
 800117c:	73fb      	strb	r3, [r7, #15]
			if (col==4) key=40;
 800117e:	79bb      	ldrb	r3, [r7, #6]
 8001180:	2b04      	cmp	r3, #4
 8001182:	d144      	bne.n	800120e <decode_key_v2+0xde>
 8001184:	2328      	movs	r3, #40	; 0x28
 8001186:	73fb      	strb	r3, [r7, #15]
			break;
 8001188:	e041      	b.n	800120e <decode_key_v2+0xde>
		case(2):
			if (col==1) key=2;
 800118a:	79bb      	ldrb	r3, [r7, #6]
 800118c:	2b01      	cmp	r3, #1
 800118e:	d101      	bne.n	8001194 <decode_key_v2+0x64>
 8001190:	2302      	movs	r3, #2
 8001192:	73fb      	strb	r3, [r7, #15]
			if (col==2) key=5;
 8001194:	79bb      	ldrb	r3, [r7, #6]
 8001196:	2b02      	cmp	r3, #2
 8001198:	d101      	bne.n	800119e <decode_key_v2+0x6e>
 800119a:	2305      	movs	r3, #5
 800119c:	73fb      	strb	r3, [r7, #15]
			if (col==3) key=8;
 800119e:	79bb      	ldrb	r3, [r7, #6]
 80011a0:	2b03      	cmp	r3, #3
 80011a2:	d101      	bne.n	80011a8 <decode_key_v2+0x78>
 80011a4:	2308      	movs	r3, #8
 80011a6:	73fb      	strb	r3, [r7, #15]
			if (col==4) key=0;
 80011a8:	79bb      	ldrb	r3, [r7, #6]
 80011aa:	2b04      	cmp	r3, #4
 80011ac:	d131      	bne.n	8001212 <decode_key_v2+0xe2>
 80011ae:	2300      	movs	r3, #0
 80011b0:	73fb      	strb	r3, [r7, #15]
			break;
 80011b2:	e02e      	b.n	8001212 <decode_key_v2+0xe2>
		case(3):
			if (col==1) key=3;
 80011b4:	79bb      	ldrb	r3, [r7, #6]
 80011b6:	2b01      	cmp	r3, #1
 80011b8:	d101      	bne.n	80011be <decode_key_v2+0x8e>
 80011ba:	2303      	movs	r3, #3
 80011bc:	73fb      	strb	r3, [r7, #15]
			if (col==2) key=6;
 80011be:	79bb      	ldrb	r3, [r7, #6]
 80011c0:	2b02      	cmp	r3, #2
 80011c2:	d101      	bne.n	80011c8 <decode_key_v2+0x98>
 80011c4:	2306      	movs	r3, #6
 80011c6:	73fb      	strb	r3, [r7, #15]
			if (col==3) key=9;
 80011c8:	79bb      	ldrb	r3, [r7, #6]
 80011ca:	2b03      	cmp	r3, #3
 80011cc:	d101      	bne.n	80011d2 <decode_key_v2+0xa2>
 80011ce:	2309      	movs	r3, #9
 80011d0:	73fb      	strb	r3, [r7, #15]
			if (col==4) key=60;
 80011d2:	79bb      	ldrb	r3, [r7, #6]
 80011d4:	2b04      	cmp	r3, #4
 80011d6:	d11e      	bne.n	8001216 <decode_key_v2+0xe6>
 80011d8:	233c      	movs	r3, #60	; 0x3c
 80011da:	73fb      	strb	r3, [r7, #15]
			break;
 80011dc:	e01b      	b.n	8001216 <decode_key_v2+0xe6>
		case(4):
			if (col==1) key=10;
 80011de:	79bb      	ldrb	r3, [r7, #6]
 80011e0:	2b01      	cmp	r3, #1
 80011e2:	d101      	bne.n	80011e8 <decode_key_v2+0xb8>
 80011e4:	230a      	movs	r3, #10
 80011e6:	73fb      	strb	r3, [r7, #15]
			if (col==2) key=20;
 80011e8:	79bb      	ldrb	r3, [r7, #6]
 80011ea:	2b02      	cmp	r3, #2
 80011ec:	d101      	bne.n	80011f2 <decode_key_v2+0xc2>
 80011ee:	2314      	movs	r3, #20
 80011f0:	73fb      	strb	r3, [r7, #15]
			if (col==3) key=30;
 80011f2:	79bb      	ldrb	r3, [r7, #6]
 80011f4:	2b03      	cmp	r3, #3
 80011f6:	d101      	bne.n	80011fc <decode_key_v2+0xcc>
 80011f8:	231e      	movs	r3, #30
 80011fa:	73fb      	strb	r3, [r7, #15]
			if (col==4) key=40;
 80011fc:	79bb      	ldrb	r3, [r7, #6]
 80011fe:	2b04      	cmp	r3, #4
 8001200:	d10b      	bne.n	800121a <decode_key_v2+0xea>
 8001202:	2328      	movs	r3, #40	; 0x28
 8001204:	73fb      	strb	r3, [r7, #15]
			break;
 8001206:	e008      	b.n	800121a <decode_key_v2+0xea>
		default:
			key=0;
 8001208:	2300      	movs	r3, #0
 800120a:	73fb      	strb	r3, [r7, #15]
			break;
 800120c:	e006      	b.n	800121c <decode_key_v2+0xec>
			break;
 800120e:	bf00      	nop
 8001210:	e004      	b.n	800121c <decode_key_v2+0xec>
			break;
 8001212:	bf00      	nop
 8001214:	e002      	b.n	800121c <decode_key_v2+0xec>
			break;
 8001216:	bf00      	nop
 8001218:	e000      	b.n	800121c <decode_key_v2+0xec>
			break;
 800121a:	bf00      	nop
	}

	return key;
 800121c:	7bfb      	ldrb	r3, [r7, #15]
}
 800121e:	4618      	mov	r0, r3
 8001220:	3714      	adds	r7, #20
 8001222:	46bd      	mov	sp, r7
 8001224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001228:	4770      	bx	lr
 800122a:	bf00      	nop

0800122c <read_key_v2>:


// Perform a polling on each row in order to detect the selection of a key
uint8_t read_key_v2(){
 800122c:	b580      	push	{r7, lr}
 800122e:	b082      	sub	sp, #8
 8001230:	af00      	add	r7, sp, #0

	uint8_t key = 0;
 8001232:	2300      	movs	r3, #0
 8001234:	71fb      	strb	r3, [r7, #7]
	uint8_t col_read = 0;
 8001236:	2300      	movs	r3, #0
 8001238:	71bb      	strb	r3, [r7, #6]

	// stay in polling and wait for a button to be pressed
	while(true){

		// *** FIRST row
		write_GPIO(1);						// write 4 status of row GPIO (enable GPIO of row1)
 800123a:	2001      	movs	r0, #1
 800123c:	f7ff ff30 	bl	80010a0 <write_GPIO>
		col_read = read_GPIO();				// read 4 status of col GPIO
 8001240:	f7ff ff00 	bl	8001044 <read_GPIO>
 8001244:	4603      	mov	r3, r0
 8001246:	71bb      	strb	r3, [r7, #6]
		if(col_read != 0) key = decode_key_v2(1, col_read);		// decode which button has been pressed
 8001248:	79bb      	ldrb	r3, [r7, #6]
 800124a:	2b00      	cmp	r3, #0
 800124c:	d006      	beq.n	800125c <read_key_v2+0x30>
 800124e:	79bb      	ldrb	r3, [r7, #6]
 8001250:	4619      	mov	r1, r3
 8001252:	2001      	movs	r0, #1
 8001254:	f7ff ff6c 	bl	8001130 <decode_key_v2>
 8001258:	4603      	mov	r3, r0
 800125a:	71fb      	strb	r3, [r7, #7]
		if(key!=0) return key;
 800125c:	79fb      	ldrb	r3, [r7, #7]
 800125e:	2b00      	cmp	r3, #0
 8001260:	d001      	beq.n	8001266 <read_key_v2+0x3a>
 8001262:	79fb      	ldrb	r3, [r7, #7]
 8001264:	e040      	b.n	80012e8 <read_key_v2+0xbc>

		// *** SECOND row
		write_GPIO(2);
 8001266:	2002      	movs	r0, #2
 8001268:	f7ff ff1a 	bl	80010a0 <write_GPIO>
		col_read = read_GPIO();
 800126c:	f7ff feea 	bl	8001044 <read_GPIO>
 8001270:	4603      	mov	r3, r0
 8001272:	71bb      	strb	r3, [r7, #6]
		if(col_read != 0) key = decode_key_v2(2, col_read);
 8001274:	79bb      	ldrb	r3, [r7, #6]
 8001276:	2b00      	cmp	r3, #0
 8001278:	d006      	beq.n	8001288 <read_key_v2+0x5c>
 800127a:	79bb      	ldrb	r3, [r7, #6]
 800127c:	4619      	mov	r1, r3
 800127e:	2002      	movs	r0, #2
 8001280:	f7ff ff56 	bl	8001130 <decode_key_v2>
 8001284:	4603      	mov	r3, r0
 8001286:	71fb      	strb	r3, [r7, #7]
		if(key!=0) return key;
 8001288:	79fb      	ldrb	r3, [r7, #7]
 800128a:	2b00      	cmp	r3, #0
 800128c:	d001      	beq.n	8001292 <read_key_v2+0x66>
 800128e:	79fb      	ldrb	r3, [r7, #7]
 8001290:	e02a      	b.n	80012e8 <read_key_v2+0xbc>

		// *** THIRD row
		write_GPIO(3);
 8001292:	2003      	movs	r0, #3
 8001294:	f7ff ff04 	bl	80010a0 <write_GPIO>
		col_read = read_GPIO();
 8001298:	f7ff fed4 	bl	8001044 <read_GPIO>
 800129c:	4603      	mov	r3, r0
 800129e:	71bb      	strb	r3, [r7, #6]
		if(col_read != 0) key = decode_key_v2(3, col_read);
 80012a0:	79bb      	ldrb	r3, [r7, #6]
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d006      	beq.n	80012b4 <read_key_v2+0x88>
 80012a6:	79bb      	ldrb	r3, [r7, #6]
 80012a8:	4619      	mov	r1, r3
 80012aa:	2003      	movs	r0, #3
 80012ac:	f7ff ff40 	bl	8001130 <decode_key_v2>
 80012b0:	4603      	mov	r3, r0
 80012b2:	71fb      	strb	r3, [r7, #7]
		if(key!=0) return key;
 80012b4:	79fb      	ldrb	r3, [r7, #7]
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d001      	beq.n	80012be <read_key_v2+0x92>
 80012ba:	79fb      	ldrb	r3, [r7, #7]
 80012bc:	e014      	b.n	80012e8 <read_key_v2+0xbc>

		// *** FORTH row
		write_GPIO(4);
 80012be:	2004      	movs	r0, #4
 80012c0:	f7ff feee 	bl	80010a0 <write_GPIO>
		col_read = read_GPIO();
 80012c4:	f7ff febe 	bl	8001044 <read_GPIO>
 80012c8:	4603      	mov	r3, r0
 80012ca:	71bb      	strb	r3, [r7, #6]
		if(col_read != 0) key = decode_key_v2(4, col_read);
 80012cc:	79bb      	ldrb	r3, [r7, #6]
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d006      	beq.n	80012e0 <read_key_v2+0xb4>
 80012d2:	79bb      	ldrb	r3, [r7, #6]
 80012d4:	4619      	mov	r1, r3
 80012d6:	2004      	movs	r0, #4
 80012d8:	f7ff ff2a 	bl	8001130 <decode_key_v2>
 80012dc:	4603      	mov	r3, r0
 80012de:	71fb      	strb	r3, [r7, #7]
		if(key!=0) return key;
 80012e0:	79fb      	ldrb	r3, [r7, #7]
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d0a9      	beq.n	800123a <read_key_v2+0xe>
 80012e6:	79fb      	ldrb	r3, [r7, #7]
	}

	return 0;
}
 80012e8:	4618      	mov	r0, r3
 80012ea:	3708      	adds	r7, #8
 80012ec:	46bd      	mov	sp, r7
 80012ee:	bd80      	pop	{r7, pc}

080012f0 <keypad_getNumber_v2>:


uint32_t keypad_getNumber_v2(){
 80012f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80012f2:	b0a1      	sub	sp, #132	; 0x84
 80012f4:	af00      	add	r7, sp, #0

	uint8_t arr[10];
	uint32_t number=0;
 80012f6:	2300      	movs	r3, #0
 80012f8:	67fb      	str	r3, [r7, #124]	; 0x7c
	uint8_t key;
	uint8_t i=0;
 80012fa:	2300      	movs	r3, #0
 80012fc:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b

	char msg[100];
	int msg_len;

	PRINTF("\n\r The digits selected are: ");
 8001300:	484d      	ldr	r0, [pc, #308]	; (8001438 <keypad_getNumber_v2+0x148>)
 8001302:	f7ff fdc9 	bl	8000e98 <PRINTF>

	// until I press the ENTER button do:
	while(true){

		key = read_key_v2();		// returns the digit input
 8001306:	f7ff ff91 	bl	800122c <read_key_v2>
 800130a:	4603      	mov	r3, r0
 800130c:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73

		if(key==10){			// A, exit insertion number
 8001310:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 8001314:	2b0a      	cmp	r3, #10
 8001316:	d03f      	beq.n	8001398 <keypad_getNumber_v2+0xa8>
			break;
		}else if(key==20){		// B, nothing
 8001318:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 800131c:	2b14      	cmp	r3, #20
 800131e:	d037      	beq.n	8001390 <keypad_getNumber_v2+0xa0>

		}else if(key==30){		// C, nothing
 8001320:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 8001324:	2b1e      	cmp	r3, #30
 8001326:	d033      	beq.n	8001390 <keypad_getNumber_v2+0xa0>

		}else if(key==40){		// *, nothing
 8001328:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 800132c:	2b28      	cmp	r3, #40	; 0x28
 800132e:	d02f      	beq.n	8001390 <keypad_getNumber_v2+0xa0>

		}else if(key==50){		// #, nothing
 8001330:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 8001334:	2b32      	cmp	r3, #50	; 0x32
 8001336:	d02b      	beq.n	8001390 <keypad_getNumber_v2+0xa0>

		}else if(key==60){		// D, delete last digit
 8001338:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 800133c:	2b3c      	cmp	r3, #60	; 0x3c
 800133e:	d10e      	bne.n	800135e <keypad_getNumber_v2+0x6e>
			i=-1;
 8001340:	23ff      	movs	r3, #255	; 0xff
 8001342:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
			arr[i]=0;
 8001346:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 800134a:	f107 0280 	add.w	r2, r7, #128	; 0x80
 800134e:	4413      	add	r3, r2
 8001350:	2200      	movs	r2, #0
 8001352:	f803 2c18 	strb.w	r2, [r3, #-24]
			PRINTF("DEL ");
 8001356:	4839      	ldr	r0, [pc, #228]	; (800143c <keypad_getNumber_v2+0x14c>)
 8001358:	f7ff fd9e 	bl	8000e98 <PRINTF>
 800135c:	e018      	b.n	8001390 <keypad_getNumber_v2+0xa0>
		}else{					// number keys
			arr[i]=key;
 800135e:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 8001362:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8001366:	4413      	add	r3, r2
 8001368:	f897 2073 	ldrb.w	r2, [r7, #115]	; 0x73
 800136c:	f803 2c18 	strb.w	r2, [r3, #-24]
			PRINTF8("%d ", arr[i]);
 8001370:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 8001374:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8001378:	4413      	add	r3, r2
 800137a:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 800137e:	4619      	mov	r1, r3
 8001380:	482f      	ldr	r0, [pc, #188]	; (8001440 <keypad_getNumber_v2+0x150>)
 8001382:	f7ff fda3 	bl	8000ecc <PRINTF8>
			i+=1;
 8001386:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 800138a:	3301      	adds	r3, #1
 800138c:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
		}

		HAL_Delay(200);		// To avoid long press error
 8001390:	20c8      	movs	r0, #200	; 0xc8
 8001392:	f000 fb67 	bl	8001a64 <HAL_Delay>
		key = read_key_v2();		// returns the digit input
 8001396:	e7b6      	b.n	8001306 <keypad_getNumber_v2+0x16>
			break;
 8001398:	bf00      	nop
	}

	// Transform the array in number
	for(int j=i; j>0; j--){
 800139a:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 800139e:	677b      	str	r3, [r7, #116]	; 0x74
 80013a0:	e03a      	b.n	8001418 <keypad_getNumber_v2+0x128>
		number += pow(10, j-1)*arr[i-j];
 80013a2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80013a4:	3b01      	subs	r3, #1
 80013a6:	4618      	mov	r0, r3
 80013a8:	f7ff f8bc 	bl	8000524 <__aeabi_i2d>
 80013ac:	4603      	mov	r3, r0
 80013ae:	460c      	mov	r4, r1
 80013b0:	ec44 3b11 	vmov	d1, r3, r4
 80013b4:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 8001430 <keypad_getNumber_v2+0x140>
 80013b8:	f002 ff06 	bl	80041c8 <pow>
 80013bc:	ec56 5b10 	vmov	r5, r6, d0
 80013c0:	f897 207b 	ldrb.w	r2, [r7, #123]	; 0x7b
 80013c4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80013c6:	1ad3      	subs	r3, r2, r3
 80013c8:	f107 0280 	add.w	r2, r7, #128	; 0x80
 80013cc:	4413      	add	r3, r2
 80013ce:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 80013d2:	4618      	mov	r0, r3
 80013d4:	f7ff f8a6 	bl	8000524 <__aeabi_i2d>
 80013d8:	4603      	mov	r3, r0
 80013da:	460c      	mov	r4, r1
 80013dc:	461a      	mov	r2, r3
 80013de:	4623      	mov	r3, r4
 80013e0:	4628      	mov	r0, r5
 80013e2:	4631      	mov	r1, r6
 80013e4:	f7ff f908 	bl	80005f8 <__aeabi_dmul>
 80013e8:	4603      	mov	r3, r0
 80013ea:	460c      	mov	r4, r1
 80013ec:	4625      	mov	r5, r4
 80013ee:	461c      	mov	r4, r3
 80013f0:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 80013f2:	f7ff f887 	bl	8000504 <__aeabi_ui2d>
 80013f6:	4602      	mov	r2, r0
 80013f8:	460b      	mov	r3, r1
 80013fa:	4620      	mov	r0, r4
 80013fc:	4629      	mov	r1, r5
 80013fe:	f7fe ff45 	bl	800028c <__adddf3>
 8001402:	4603      	mov	r3, r0
 8001404:	460c      	mov	r4, r1
 8001406:	4618      	mov	r0, r3
 8001408:	4621      	mov	r1, r4
 800140a:	f7ff fba5 	bl	8000b58 <__aeabi_d2uiz>
 800140e:	4603      	mov	r3, r0
 8001410:	67fb      	str	r3, [r7, #124]	; 0x7c
	for(int j=i; j>0; j--){
 8001412:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001414:	3b01      	subs	r3, #1
 8001416:	677b      	str	r3, [r7, #116]	; 0x74
 8001418:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800141a:	2b00      	cmp	r3, #0
 800141c:	dcc1      	bgt.n	80013a2 <keypad_getNumber_v2+0xb2>
	}
	PRINTF32("\n\r Final number obtained is: %d", number);
 800141e:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8001420:	4808      	ldr	r0, [pc, #32]	; (8001444 <keypad_getNumber_v2+0x154>)
 8001422:	f7ff fd71 	bl	8000f08 <PRINTF32>

	return number;
 8001426:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
}
 8001428:	4618      	mov	r0, r3
 800142a:	3784      	adds	r7, #132	; 0x84
 800142c:	46bd      	mov	sp, r7
 800142e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001430:	00000000 	.word	0x00000000
 8001434:	40240000 	.word	0x40240000
 8001438:	08005290 	.word	0x08005290
 800143c:	080052b0 	.word	0x080052b0
 8001440:	080052b8 	.word	0x080052b8
 8001444:	080052bc 	.word	0x080052bc

08001448 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800144c:	f000 fa98 	bl	8001980 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001450:	f000 f812 	bl	8001478 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001454:	f7ff fd74 	bl	8000f40 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001458:	f000 f9f6 	bl	8001848 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 800145c:	f000 f944 	bl	80016e8 <MX_TIM2_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  if(BLUE_BUTTON){
 8001460:	4b04      	ldr	r3, [pc, #16]	; (8001474 <main+0x2c>)
 8001462:	781b      	ldrb	r3, [r3, #0]
 8001464:	2b00      	cmp	r3, #0
 8001466:	d0fb      	beq.n	8001460 <main+0x18>
		  keypad_getNumber_v2();
 8001468:	f7ff ff42 	bl	80012f0 <keypad_getNumber_v2>
		  BLUE_BUTTON = false;
 800146c:	4b01      	ldr	r3, [pc, #4]	; (8001474 <main+0x2c>)
 800146e:	2200      	movs	r2, #0
 8001470:	701a      	strb	r2, [r3, #0]
	  if(BLUE_BUTTON){
 8001472:	e7f5      	b.n	8001460 <main+0x18>
 8001474:	20000090 	.word	0x20000090

08001478 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b094      	sub	sp, #80	; 0x50
 800147c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800147e:	f107 0320 	add.w	r3, r7, #32
 8001482:	2230      	movs	r2, #48	; 0x30
 8001484:	2100      	movs	r1, #0
 8001486:	4618      	mov	r0, r3
 8001488:	f002 fa90 	bl	80039ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800148c:	f107 030c 	add.w	r3, r7, #12
 8001490:	2200      	movs	r2, #0
 8001492:	601a      	str	r2, [r3, #0]
 8001494:	605a      	str	r2, [r3, #4]
 8001496:	609a      	str	r2, [r3, #8]
 8001498:	60da      	str	r2, [r3, #12]
 800149a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800149c:	2300      	movs	r3, #0
 800149e:	60bb      	str	r3, [r7, #8]
 80014a0:	4b28      	ldr	r3, [pc, #160]	; (8001544 <SystemClock_Config+0xcc>)
 80014a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014a4:	4a27      	ldr	r2, [pc, #156]	; (8001544 <SystemClock_Config+0xcc>)
 80014a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014aa:	6413      	str	r3, [r2, #64]	; 0x40
 80014ac:	4b25      	ldr	r3, [pc, #148]	; (8001544 <SystemClock_Config+0xcc>)
 80014ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014b4:	60bb      	str	r3, [r7, #8]
 80014b6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80014b8:	2300      	movs	r3, #0
 80014ba:	607b      	str	r3, [r7, #4]
 80014bc:	4b22      	ldr	r3, [pc, #136]	; (8001548 <SystemClock_Config+0xd0>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80014c4:	4a20      	ldr	r2, [pc, #128]	; (8001548 <SystemClock_Config+0xd0>)
 80014c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80014ca:	6013      	str	r3, [r2, #0]
 80014cc:	4b1e      	ldr	r3, [pc, #120]	; (8001548 <SystemClock_Config+0xd0>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80014d4:	607b      	str	r3, [r7, #4]
 80014d6:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80014d8:	2302      	movs	r3, #2
 80014da:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80014dc:	2301      	movs	r3, #1
 80014de:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80014e0:	2310      	movs	r3, #16
 80014e2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80014e4:	2302      	movs	r3, #2
 80014e6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80014e8:	2300      	movs	r3, #0
 80014ea:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80014ec:	2308      	movs	r3, #8
 80014ee:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 80;
 80014f0:	2350      	movs	r3, #80	; 0x50
 80014f2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80014f4:	2302      	movs	r3, #2
 80014f6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80014f8:	2307      	movs	r3, #7
 80014fa:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014fc:	f107 0320 	add.w	r3, r7, #32
 8001500:	4618      	mov	r0, r3
 8001502:	f000 fdaf 	bl	8002064 <HAL_RCC_OscConfig>
 8001506:	4603      	mov	r3, r0
 8001508:	2b00      	cmp	r3, #0
 800150a:	d001      	beq.n	8001510 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800150c:	f000 f832 	bl	8001574 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001510:	230f      	movs	r3, #15
 8001512:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001514:	2302      	movs	r3, #2
 8001516:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001518:	2300      	movs	r3, #0
 800151a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800151c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001520:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001522:	2300      	movs	r3, #0
 8001524:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001526:	f107 030c 	add.w	r3, r7, #12
 800152a:	2102      	movs	r1, #2
 800152c:	4618      	mov	r0, r3
 800152e:	f001 f809 	bl	8002544 <HAL_RCC_ClockConfig>
 8001532:	4603      	mov	r3, r0
 8001534:	2b00      	cmp	r3, #0
 8001536:	d001      	beq.n	800153c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001538:	f000 f81c 	bl	8001574 <Error_Handler>
  }
}
 800153c:	bf00      	nop
 800153e:	3750      	adds	r7, #80	; 0x50
 8001540:	46bd      	mov	sp, r7
 8001542:	bd80      	pop	{r7, pc}
 8001544:	40023800 	.word	0x40023800
 8001548:	40007000 	.word	0x40007000

0800154c <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 800154c:	b480      	push	{r7}
 800154e:	b083      	sub	sp, #12
 8001550:	af00      	add	r7, sp, #0
 8001552:	4603      	mov	r3, r0
 8001554:	80fb      	strh	r3, [r7, #6]

	// interrupt blue button
	if(GPIO_Pin==B1_Pin){
 8001556:	88fb      	ldrh	r3, [r7, #6]
 8001558:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800155c:	d102      	bne.n	8001564 <HAL_GPIO_EXTI_Callback+0x18>
		BLUE_BUTTON = true;
 800155e:	4b04      	ldr	r3, [pc, #16]	; (8001570 <HAL_GPIO_EXTI_Callback+0x24>)
 8001560:	2201      	movs	r2, #1
 8001562:	701a      	strb	r2, [r3, #0]
	}
}
 8001564:	bf00      	nop
 8001566:	370c      	adds	r7, #12
 8001568:	46bd      	mov	sp, r7
 800156a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156e:	4770      	bx	lr
 8001570:	20000090 	.word	0x20000090

08001574 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001574:	b480      	push	{r7}
 8001576:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001578:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800157a:	e7fe      	b.n	800157a <Error_Handler+0x6>

0800157c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b082      	sub	sp, #8
 8001580:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001582:	2300      	movs	r3, #0
 8001584:	607b      	str	r3, [r7, #4]
 8001586:	4b14      	ldr	r3, [pc, #80]	; (80015d8 <HAL_MspInit+0x5c>)
 8001588:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800158a:	4a13      	ldr	r2, [pc, #76]	; (80015d8 <HAL_MspInit+0x5c>)
 800158c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001590:	6453      	str	r3, [r2, #68]	; 0x44
 8001592:	4b11      	ldr	r3, [pc, #68]	; (80015d8 <HAL_MspInit+0x5c>)
 8001594:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001596:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800159a:	607b      	str	r3, [r7, #4]
 800159c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800159e:	2300      	movs	r3, #0
 80015a0:	603b      	str	r3, [r7, #0]
 80015a2:	4b0d      	ldr	r3, [pc, #52]	; (80015d8 <HAL_MspInit+0x5c>)
 80015a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015a6:	4a0c      	ldr	r2, [pc, #48]	; (80015d8 <HAL_MspInit+0x5c>)
 80015a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015ac:	6413      	str	r3, [r2, #64]	; 0x40
 80015ae:	4b0a      	ldr	r3, [pc, #40]	; (80015d8 <HAL_MspInit+0x5c>)
 80015b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015b6:	603b      	str	r3, [r7, #0]
 80015b8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80015ba:	2007      	movs	r0, #7
 80015bc:	f000 fb44 	bl	8001c48 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* FPU_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(FPU_IRQn, 0, 0);
 80015c0:	2200      	movs	r2, #0
 80015c2:	2100      	movs	r1, #0
 80015c4:	2051      	movs	r0, #81	; 0x51
 80015c6:	f000 fb4a 	bl	8001c5e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FPU_IRQn);
 80015ca:	2051      	movs	r0, #81	; 0x51
 80015cc:	f000 fb63 	bl	8001c96 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015d0:	bf00      	nop
 80015d2:	3708      	adds	r7, #8
 80015d4:	46bd      	mov	sp, r7
 80015d6:	bd80      	pop	{r7, pc}
 80015d8:	40023800 	.word	0x40023800

080015dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015dc:	b480      	push	{r7}
 80015de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80015e0:	e7fe      	b.n	80015e0 <NMI_Handler+0x4>

080015e2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015e2:	b480      	push	{r7}
 80015e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015e6:	e7fe      	b.n	80015e6 <HardFault_Handler+0x4>

080015e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015e8:	b480      	push	{r7}
 80015ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015ec:	e7fe      	b.n	80015ec <MemManage_Handler+0x4>

080015ee <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015ee:	b480      	push	{r7}
 80015f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015f2:	e7fe      	b.n	80015f2 <BusFault_Handler+0x4>

080015f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015f4:	b480      	push	{r7}
 80015f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015f8:	e7fe      	b.n	80015f8 <UsageFault_Handler+0x4>

080015fa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80015fa:	b480      	push	{r7}
 80015fc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80015fe:	bf00      	nop
 8001600:	46bd      	mov	sp, r7
 8001602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001606:	4770      	bx	lr

08001608 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001608:	b480      	push	{r7}
 800160a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800160c:	bf00      	nop
 800160e:	46bd      	mov	sp, r7
 8001610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001614:	4770      	bx	lr

08001616 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001616:	b480      	push	{r7}
 8001618:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800161a:	bf00      	nop
 800161c:	46bd      	mov	sp, r7
 800161e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001622:	4770      	bx	lr

08001624 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001628:	f000 f9fc 	bl	8001a24 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800162c:	bf00      	nop
 800162e:	bd80      	pop	{r7, pc}

08001630 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001634:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001638:	f000 fcfc 	bl	8002034 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800163c:	bf00      	nop
 800163e:	bd80      	pop	{r7, pc}

08001640 <FPU_IRQHandler>:

/**
  * @brief This function handles FPU global interrupt.
  */
void FPU_IRQHandler(void)
{
 8001640:	b480      	push	{r7}
 8001642:	af00      	add	r7, sp, #0

  /* USER CODE END FPU_IRQn 0 */
  /* USER CODE BEGIN FPU_IRQn 1 */

  /* USER CODE END FPU_IRQn 1 */
}
 8001644:	bf00      	nop
 8001646:	46bd      	mov	sp, r7
 8001648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164c:	4770      	bx	lr
	...

08001650 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b086      	sub	sp, #24
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001658:	4a14      	ldr	r2, [pc, #80]	; (80016ac <_sbrk+0x5c>)
 800165a:	4b15      	ldr	r3, [pc, #84]	; (80016b0 <_sbrk+0x60>)
 800165c:	1ad3      	subs	r3, r2, r3
 800165e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001660:	697b      	ldr	r3, [r7, #20]
 8001662:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001664:	4b13      	ldr	r3, [pc, #76]	; (80016b4 <_sbrk+0x64>)
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	2b00      	cmp	r3, #0
 800166a:	d102      	bne.n	8001672 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800166c:	4b11      	ldr	r3, [pc, #68]	; (80016b4 <_sbrk+0x64>)
 800166e:	4a12      	ldr	r2, [pc, #72]	; (80016b8 <_sbrk+0x68>)
 8001670:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001672:	4b10      	ldr	r3, [pc, #64]	; (80016b4 <_sbrk+0x64>)
 8001674:	681a      	ldr	r2, [r3, #0]
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	4413      	add	r3, r2
 800167a:	693a      	ldr	r2, [r7, #16]
 800167c:	429a      	cmp	r2, r3
 800167e:	d207      	bcs.n	8001690 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001680:	f002 f96a 	bl	8003958 <__errno>
 8001684:	4602      	mov	r2, r0
 8001686:	230c      	movs	r3, #12
 8001688:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800168a:	f04f 33ff 	mov.w	r3, #4294967295
 800168e:	e009      	b.n	80016a4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001690:	4b08      	ldr	r3, [pc, #32]	; (80016b4 <_sbrk+0x64>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001696:	4b07      	ldr	r3, [pc, #28]	; (80016b4 <_sbrk+0x64>)
 8001698:	681a      	ldr	r2, [r3, #0]
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	4413      	add	r3, r2
 800169e:	4a05      	ldr	r2, [pc, #20]	; (80016b4 <_sbrk+0x64>)
 80016a0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80016a2:	68fb      	ldr	r3, [r7, #12]
}
 80016a4:	4618      	mov	r0, r3
 80016a6:	3718      	adds	r7, #24
 80016a8:	46bd      	mov	sp, r7
 80016aa:	bd80      	pop	{r7, pc}
 80016ac:	20018000 	.word	0x20018000
 80016b0:	00000400 	.word	0x00000400
 80016b4:	20000094 	.word	0x20000094
 80016b8:	20000128 	.word	0x20000128

080016bc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80016bc:	b480      	push	{r7}
 80016be:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80016c0:	4b08      	ldr	r3, [pc, #32]	; (80016e4 <SystemInit+0x28>)
 80016c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80016c6:	4a07      	ldr	r2, [pc, #28]	; (80016e4 <SystemInit+0x28>)
 80016c8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80016cc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80016d0:	4b04      	ldr	r3, [pc, #16]	; (80016e4 <SystemInit+0x28>)
 80016d2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80016d6:	609a      	str	r2, [r3, #8]
#endif
}
 80016d8:	bf00      	nop
 80016da:	46bd      	mov	sp, r7
 80016dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e0:	4770      	bx	lr
 80016e2:	bf00      	nop
 80016e4:	e000ed00 	.word	0xe000ed00

080016e8 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b08a      	sub	sp, #40	; 0x28
 80016ec:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016ee:	f107 0320 	add.w	r3, r7, #32
 80016f2:	2200      	movs	r2, #0
 80016f4:	601a      	str	r2, [r3, #0]
 80016f6:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80016f8:	1d3b      	adds	r3, r7, #4
 80016fa:	2200      	movs	r2, #0
 80016fc:	601a      	str	r2, [r3, #0]
 80016fe:	605a      	str	r2, [r3, #4]
 8001700:	609a      	str	r2, [r3, #8]
 8001702:	60da      	str	r2, [r3, #12]
 8001704:	611a      	str	r2, [r3, #16]
 8001706:	615a      	str	r2, [r3, #20]
 8001708:	619a      	str	r2, [r3, #24]

  htim2.Instance = TIM2;
 800170a:	4b22      	ldr	r3, [pc, #136]	; (8001794 <MX_TIM2_Init+0xac>)
 800170c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001710:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001712:	4b20      	ldr	r3, [pc, #128]	; (8001794 <MX_TIM2_Init+0xac>)
 8001714:	2200      	movs	r2, #0
 8001716:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001718:	4b1e      	ldr	r3, [pc, #120]	; (8001794 <MX_TIM2_Init+0xac>)
 800171a:	2200      	movs	r2, #0
 800171c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 101-1;
 800171e:	4b1d      	ldr	r3, [pc, #116]	; (8001794 <MX_TIM2_Init+0xac>)
 8001720:	2264      	movs	r2, #100	; 0x64
 8001722:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001724:	4b1b      	ldr	r3, [pc, #108]	; (8001794 <MX_TIM2_Init+0xac>)
 8001726:	2200      	movs	r2, #0
 8001728:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800172a:	4b1a      	ldr	r3, [pc, #104]	; (8001794 <MX_TIM2_Init+0xac>)
 800172c:	2200      	movs	r2, #0
 800172e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001730:	4818      	ldr	r0, [pc, #96]	; (8001794 <MX_TIM2_Init+0xac>)
 8001732:	f001 f8f9 	bl	8002928 <HAL_TIM_PWM_Init>
 8001736:	4603      	mov	r3, r0
 8001738:	2b00      	cmp	r3, #0
 800173a:	d001      	beq.n	8001740 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 800173c:	f7ff ff1a 	bl	8001574 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001740:	2300      	movs	r3, #0
 8001742:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001744:	2300      	movs	r3, #0
 8001746:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001748:	f107 0320 	add.w	r3, r7, #32
 800174c:	4619      	mov	r1, r3
 800174e:	4811      	ldr	r0, [pc, #68]	; (8001794 <MX_TIM2_Init+0xac>)
 8001750:	f001 fbe8 	bl	8002f24 <HAL_TIMEx_MasterConfigSynchronization>
 8001754:	4603      	mov	r3, r0
 8001756:	2b00      	cmp	r3, #0
 8001758:	d001      	beq.n	800175e <MX_TIM2_Init+0x76>
  {
    Error_Handler();
 800175a:	f7ff ff0b 	bl	8001574 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800175e:	2360      	movs	r3, #96	; 0x60
 8001760:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001762:	2300      	movs	r3, #0
 8001764:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001766:	2300      	movs	r3, #0
 8001768:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800176a:	2300      	movs	r3, #0
 800176c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800176e:	1d3b      	adds	r3, r7, #4
 8001770:	2200      	movs	r2, #0
 8001772:	4619      	mov	r1, r3
 8001774:	4807      	ldr	r0, [pc, #28]	; (8001794 <MX_TIM2_Init+0xac>)
 8001776:	f001 f903 	bl	8002980 <HAL_TIM_PWM_ConfigChannel>
 800177a:	4603      	mov	r3, r0
 800177c:	2b00      	cmp	r3, #0
 800177e:	d001      	beq.n	8001784 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 8001780:	f7ff fef8 	bl	8001574 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim2);
 8001784:	4803      	ldr	r0, [pc, #12]	; (8001794 <MX_TIM2_Init+0xac>)
 8001786:	f000 f827 	bl	80017d8 <HAL_TIM_MspPostInit>

}
 800178a:	bf00      	nop
 800178c:	3728      	adds	r7, #40	; 0x28
 800178e:	46bd      	mov	sp, r7
 8001790:	bd80      	pop	{r7, pc}
 8001792:	bf00      	nop
 8001794:	200000a0 	.word	0x200000a0

08001798 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8001798:	b480      	push	{r7}
 800179a:	b085      	sub	sp, #20
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80017a8:	d10d      	bne.n	80017c6 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80017aa:	2300      	movs	r3, #0
 80017ac:	60fb      	str	r3, [r7, #12]
 80017ae:	4b09      	ldr	r3, [pc, #36]	; (80017d4 <HAL_TIM_PWM_MspInit+0x3c>)
 80017b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017b2:	4a08      	ldr	r2, [pc, #32]	; (80017d4 <HAL_TIM_PWM_MspInit+0x3c>)
 80017b4:	f043 0301 	orr.w	r3, r3, #1
 80017b8:	6413      	str	r3, [r2, #64]	; 0x40
 80017ba:	4b06      	ldr	r3, [pc, #24]	; (80017d4 <HAL_TIM_PWM_MspInit+0x3c>)
 80017bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017be:	f003 0301 	and.w	r3, r3, #1
 80017c2:	60fb      	str	r3, [r7, #12]
 80017c4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 80017c6:	bf00      	nop
 80017c8:	3714      	adds	r7, #20
 80017ca:	46bd      	mov	sp, r7
 80017cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d0:	4770      	bx	lr
 80017d2:	bf00      	nop
 80017d4:	40023800 	.word	0x40023800

080017d8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b088      	sub	sp, #32
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017e0:	f107 030c 	add.w	r3, r7, #12
 80017e4:	2200      	movs	r2, #0
 80017e6:	601a      	str	r2, [r3, #0]
 80017e8:	605a      	str	r2, [r3, #4]
 80017ea:	609a      	str	r2, [r3, #8]
 80017ec:	60da      	str	r2, [r3, #12]
 80017ee:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80017f8:	d11d      	bne.n	8001836 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017fa:	2300      	movs	r3, #0
 80017fc:	60bb      	str	r3, [r7, #8]
 80017fe:	4b10      	ldr	r3, [pc, #64]	; (8001840 <HAL_TIM_MspPostInit+0x68>)
 8001800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001802:	4a0f      	ldr	r2, [pc, #60]	; (8001840 <HAL_TIM_MspPostInit+0x68>)
 8001804:	f043 0301 	orr.w	r3, r3, #1
 8001808:	6313      	str	r3, [r2, #48]	; 0x30
 800180a:	4b0d      	ldr	r3, [pc, #52]	; (8001840 <HAL_TIM_MspPostInit+0x68>)
 800180c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800180e:	f003 0301 	and.w	r3, r3, #1
 8001812:	60bb      	str	r3, [r7, #8]
 8001814:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001816:	2320      	movs	r3, #32
 8001818:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800181a:	2302      	movs	r3, #2
 800181c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800181e:	2300      	movs	r3, #0
 8001820:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001822:	2300      	movs	r3, #0
 8001824:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001826:	2301      	movs	r3, #1
 8001828:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800182a:	f107 030c 	add.w	r3, r7, #12
 800182e:	4619      	mov	r1, r3
 8001830:	4804      	ldr	r0, [pc, #16]	; (8001844 <HAL_TIM_MspPostInit+0x6c>)
 8001832:	f000 fa4b 	bl	8001ccc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001836:	bf00      	nop
 8001838:	3720      	adds	r7, #32
 800183a:	46bd      	mov	sp, r7
 800183c:	bd80      	pop	{r7, pc}
 800183e:	bf00      	nop
 8001840:	40023800 	.word	0x40023800
 8001844:	40020000 	.word	0x40020000

08001848 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 800184c:	4b11      	ldr	r3, [pc, #68]	; (8001894 <MX_USART2_UART_Init+0x4c>)
 800184e:	4a12      	ldr	r2, [pc, #72]	; (8001898 <MX_USART2_UART_Init+0x50>)
 8001850:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001852:	4b10      	ldr	r3, [pc, #64]	; (8001894 <MX_USART2_UART_Init+0x4c>)
 8001854:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001858:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800185a:	4b0e      	ldr	r3, [pc, #56]	; (8001894 <MX_USART2_UART_Init+0x4c>)
 800185c:	2200      	movs	r2, #0
 800185e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001860:	4b0c      	ldr	r3, [pc, #48]	; (8001894 <MX_USART2_UART_Init+0x4c>)
 8001862:	2200      	movs	r2, #0
 8001864:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001866:	4b0b      	ldr	r3, [pc, #44]	; (8001894 <MX_USART2_UART_Init+0x4c>)
 8001868:	2200      	movs	r2, #0
 800186a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800186c:	4b09      	ldr	r3, [pc, #36]	; (8001894 <MX_USART2_UART_Init+0x4c>)
 800186e:	220c      	movs	r2, #12
 8001870:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001872:	4b08      	ldr	r3, [pc, #32]	; (8001894 <MX_USART2_UART_Init+0x4c>)
 8001874:	2200      	movs	r2, #0
 8001876:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001878:	4b06      	ldr	r3, [pc, #24]	; (8001894 <MX_USART2_UART_Init+0x4c>)
 800187a:	2200      	movs	r2, #0
 800187c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800187e:	4805      	ldr	r0, [pc, #20]	; (8001894 <MX_USART2_UART_Init+0x4c>)
 8001880:	f001 fbbe 	bl	8003000 <HAL_UART_Init>
 8001884:	4603      	mov	r3, r0
 8001886:	2b00      	cmp	r3, #0
 8001888:	d001      	beq.n	800188e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800188a:	f7ff fe73 	bl	8001574 <Error_Handler>
  }

}
 800188e:	bf00      	nop
 8001890:	bd80      	pop	{r7, pc}
 8001892:	bf00      	nop
 8001894:	200000e0 	.word	0x200000e0
 8001898:	40004400 	.word	0x40004400

0800189c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	b08a      	sub	sp, #40	; 0x28
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018a4:	f107 0314 	add.w	r3, r7, #20
 80018a8:	2200      	movs	r2, #0
 80018aa:	601a      	str	r2, [r3, #0]
 80018ac:	605a      	str	r2, [r3, #4]
 80018ae:	609a      	str	r2, [r3, #8]
 80018b0:	60da      	str	r2, [r3, #12]
 80018b2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	4a19      	ldr	r2, [pc, #100]	; (8001920 <HAL_UART_MspInit+0x84>)
 80018ba:	4293      	cmp	r3, r2
 80018bc:	d12b      	bne.n	8001916 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80018be:	2300      	movs	r3, #0
 80018c0:	613b      	str	r3, [r7, #16]
 80018c2:	4b18      	ldr	r3, [pc, #96]	; (8001924 <HAL_UART_MspInit+0x88>)
 80018c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018c6:	4a17      	ldr	r2, [pc, #92]	; (8001924 <HAL_UART_MspInit+0x88>)
 80018c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018cc:	6413      	str	r3, [r2, #64]	; 0x40
 80018ce:	4b15      	ldr	r3, [pc, #84]	; (8001924 <HAL_UART_MspInit+0x88>)
 80018d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018d6:	613b      	str	r3, [r7, #16]
 80018d8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018da:	2300      	movs	r3, #0
 80018dc:	60fb      	str	r3, [r7, #12]
 80018de:	4b11      	ldr	r3, [pc, #68]	; (8001924 <HAL_UART_MspInit+0x88>)
 80018e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018e2:	4a10      	ldr	r2, [pc, #64]	; (8001924 <HAL_UART_MspInit+0x88>)
 80018e4:	f043 0301 	orr.w	r3, r3, #1
 80018e8:	6313      	str	r3, [r2, #48]	; 0x30
 80018ea:	4b0e      	ldr	r3, [pc, #56]	; (8001924 <HAL_UART_MspInit+0x88>)
 80018ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ee:	f003 0301 	and.w	r3, r3, #1
 80018f2:	60fb      	str	r3, [r7, #12]
 80018f4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80018f6:	230c      	movs	r3, #12
 80018f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018fa:	2302      	movs	r3, #2
 80018fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018fe:	2300      	movs	r3, #0
 8001900:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001902:	2300      	movs	r3, #0
 8001904:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001906:	2307      	movs	r3, #7
 8001908:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800190a:	f107 0314 	add.w	r3, r7, #20
 800190e:	4619      	mov	r1, r3
 8001910:	4805      	ldr	r0, [pc, #20]	; (8001928 <HAL_UART_MspInit+0x8c>)
 8001912:	f000 f9db 	bl	8001ccc <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001916:	bf00      	nop
 8001918:	3728      	adds	r7, #40	; 0x28
 800191a:	46bd      	mov	sp, r7
 800191c:	bd80      	pop	{r7, pc}
 800191e:	bf00      	nop
 8001920:	40004400 	.word	0x40004400
 8001924:	40023800 	.word	0x40023800
 8001928:	40020000 	.word	0x40020000

0800192c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800192c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001964 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001930:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001932:	e003      	b.n	800193c <LoopCopyDataInit>

08001934 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001934:	4b0c      	ldr	r3, [pc, #48]	; (8001968 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001936:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001938:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800193a:	3104      	adds	r1, #4

0800193c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800193c:	480b      	ldr	r0, [pc, #44]	; (800196c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800193e:	4b0c      	ldr	r3, [pc, #48]	; (8001970 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001940:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001942:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001944:	d3f6      	bcc.n	8001934 <CopyDataInit>
  ldr  r2, =_sbss
 8001946:	4a0b      	ldr	r2, [pc, #44]	; (8001974 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001948:	e002      	b.n	8001950 <LoopFillZerobss>

0800194a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800194a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800194c:	f842 3b04 	str.w	r3, [r2], #4

08001950 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001950:	4b09      	ldr	r3, [pc, #36]	; (8001978 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001952:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001954:	d3f9      	bcc.n	800194a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001956:	f7ff feb1 	bl	80016bc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800195a:	f002 f803 	bl	8003964 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800195e:	f7ff fd73 	bl	8001448 <main>
  bx  lr    
 8001962:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001964:	20018000 	.word	0x20018000
  ldr  r3, =_sidata
 8001968:	08005380 	.word	0x08005380
  ldr  r0, =_sdata
 800196c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001970:	20000074 	.word	0x20000074
  ldr  r2, =_sbss
 8001974:	20000074 	.word	0x20000074
  ldr  r3, = _ebss
 8001978:	20000128 	.word	0x20000128

0800197c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800197c:	e7fe      	b.n	800197c <ADC_IRQHandler>
	...

08001980 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001984:	4b0e      	ldr	r3, [pc, #56]	; (80019c0 <HAL_Init+0x40>)
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	4a0d      	ldr	r2, [pc, #52]	; (80019c0 <HAL_Init+0x40>)
 800198a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800198e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001990:	4b0b      	ldr	r3, [pc, #44]	; (80019c0 <HAL_Init+0x40>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	4a0a      	ldr	r2, [pc, #40]	; (80019c0 <HAL_Init+0x40>)
 8001996:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800199a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800199c:	4b08      	ldr	r3, [pc, #32]	; (80019c0 <HAL_Init+0x40>)
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	4a07      	ldr	r2, [pc, #28]	; (80019c0 <HAL_Init+0x40>)
 80019a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019a6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019a8:	2003      	movs	r0, #3
 80019aa:	f000 f94d 	bl	8001c48 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80019ae:	2000      	movs	r0, #0
 80019b0:	f000 f808 	bl	80019c4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80019b4:	f7ff fde2 	bl	800157c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80019b8:	2300      	movs	r3, #0
}
 80019ba:	4618      	mov	r0, r3
 80019bc:	bd80      	pop	{r7, pc}
 80019be:	bf00      	nop
 80019c0:	40023c00 	.word	0x40023c00

080019c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b082      	sub	sp, #8
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80019cc:	4b12      	ldr	r3, [pc, #72]	; (8001a18 <HAL_InitTick+0x54>)
 80019ce:	681a      	ldr	r2, [r3, #0]
 80019d0:	4b12      	ldr	r3, [pc, #72]	; (8001a1c <HAL_InitTick+0x58>)
 80019d2:	781b      	ldrb	r3, [r3, #0]
 80019d4:	4619      	mov	r1, r3
 80019d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80019da:	fbb3 f3f1 	udiv	r3, r3, r1
 80019de:	fbb2 f3f3 	udiv	r3, r2, r3
 80019e2:	4618      	mov	r0, r3
 80019e4:	f000 f965 	bl	8001cb2 <HAL_SYSTICK_Config>
 80019e8:	4603      	mov	r3, r0
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d001      	beq.n	80019f2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80019ee:	2301      	movs	r3, #1
 80019f0:	e00e      	b.n	8001a10 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	2b0f      	cmp	r3, #15
 80019f6:	d80a      	bhi.n	8001a0e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80019f8:	2200      	movs	r2, #0
 80019fa:	6879      	ldr	r1, [r7, #4]
 80019fc:	f04f 30ff 	mov.w	r0, #4294967295
 8001a00:	f000 f92d 	bl	8001c5e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a04:	4a06      	ldr	r2, [pc, #24]	; (8001a20 <HAL_InitTick+0x5c>)
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	e000      	b.n	8001a10 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001a0e:	2301      	movs	r3, #1
}
 8001a10:	4618      	mov	r0, r3
 8001a12:	3708      	adds	r7, #8
 8001a14:	46bd      	mov	sp, r7
 8001a16:	bd80      	pop	{r7, pc}
 8001a18:	20000000 	.word	0x20000000
 8001a1c:	20000008 	.word	0x20000008
 8001a20:	20000004 	.word	0x20000004

08001a24 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a24:	b480      	push	{r7}
 8001a26:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a28:	4b06      	ldr	r3, [pc, #24]	; (8001a44 <HAL_IncTick+0x20>)
 8001a2a:	781b      	ldrb	r3, [r3, #0]
 8001a2c:	461a      	mov	r2, r3
 8001a2e:	4b06      	ldr	r3, [pc, #24]	; (8001a48 <HAL_IncTick+0x24>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	4413      	add	r3, r2
 8001a34:	4a04      	ldr	r2, [pc, #16]	; (8001a48 <HAL_IncTick+0x24>)
 8001a36:	6013      	str	r3, [r2, #0]
}
 8001a38:	bf00      	nop
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a40:	4770      	bx	lr
 8001a42:	bf00      	nop
 8001a44:	20000008 	.word	0x20000008
 8001a48:	20000120 	.word	0x20000120

08001a4c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	af00      	add	r7, sp, #0
  return uwTick;
 8001a50:	4b03      	ldr	r3, [pc, #12]	; (8001a60 <HAL_GetTick+0x14>)
 8001a52:	681b      	ldr	r3, [r3, #0]
}
 8001a54:	4618      	mov	r0, r3
 8001a56:	46bd      	mov	sp, r7
 8001a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5c:	4770      	bx	lr
 8001a5e:	bf00      	nop
 8001a60:	20000120 	.word	0x20000120

08001a64 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b084      	sub	sp, #16
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a6c:	f7ff ffee 	bl	8001a4c <HAL_GetTick>
 8001a70:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a7c:	d005      	beq.n	8001a8a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a7e:	4b09      	ldr	r3, [pc, #36]	; (8001aa4 <HAL_Delay+0x40>)
 8001a80:	781b      	ldrb	r3, [r3, #0]
 8001a82:	461a      	mov	r2, r3
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	4413      	add	r3, r2
 8001a88:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001a8a:	bf00      	nop
 8001a8c:	f7ff ffde 	bl	8001a4c <HAL_GetTick>
 8001a90:	4602      	mov	r2, r0
 8001a92:	68bb      	ldr	r3, [r7, #8]
 8001a94:	1ad3      	subs	r3, r2, r3
 8001a96:	68fa      	ldr	r2, [r7, #12]
 8001a98:	429a      	cmp	r2, r3
 8001a9a:	d8f7      	bhi.n	8001a8c <HAL_Delay+0x28>
  {
  }
}
 8001a9c:	bf00      	nop
 8001a9e:	3710      	adds	r7, #16
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	bd80      	pop	{r7, pc}
 8001aa4:	20000008 	.word	0x20000008

08001aa8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	b085      	sub	sp, #20
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	f003 0307 	and.w	r3, r3, #7
 8001ab6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ab8:	4b0c      	ldr	r3, [pc, #48]	; (8001aec <__NVIC_SetPriorityGrouping+0x44>)
 8001aba:	68db      	ldr	r3, [r3, #12]
 8001abc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001abe:	68ba      	ldr	r2, [r7, #8]
 8001ac0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001ac4:	4013      	ands	r3, r2
 8001ac6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001acc:	68bb      	ldr	r3, [r7, #8]
 8001ace:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ad0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001ad4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ad8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ada:	4a04      	ldr	r2, [pc, #16]	; (8001aec <__NVIC_SetPriorityGrouping+0x44>)
 8001adc:	68bb      	ldr	r3, [r7, #8]
 8001ade:	60d3      	str	r3, [r2, #12]
}
 8001ae0:	bf00      	nop
 8001ae2:	3714      	adds	r7, #20
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aea:	4770      	bx	lr
 8001aec:	e000ed00 	.word	0xe000ed00

08001af0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001af0:	b480      	push	{r7}
 8001af2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001af4:	4b04      	ldr	r3, [pc, #16]	; (8001b08 <__NVIC_GetPriorityGrouping+0x18>)
 8001af6:	68db      	ldr	r3, [r3, #12]
 8001af8:	0a1b      	lsrs	r3, r3, #8
 8001afa:	f003 0307 	and.w	r3, r3, #7
}
 8001afe:	4618      	mov	r0, r3
 8001b00:	46bd      	mov	sp, r7
 8001b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b06:	4770      	bx	lr
 8001b08:	e000ed00 	.word	0xe000ed00

08001b0c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b0c:	b480      	push	{r7}
 8001b0e:	b083      	sub	sp, #12
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	4603      	mov	r3, r0
 8001b14:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	db0b      	blt.n	8001b36 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b1e:	79fb      	ldrb	r3, [r7, #7]
 8001b20:	f003 021f 	and.w	r2, r3, #31
 8001b24:	4907      	ldr	r1, [pc, #28]	; (8001b44 <__NVIC_EnableIRQ+0x38>)
 8001b26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b2a:	095b      	lsrs	r3, r3, #5
 8001b2c:	2001      	movs	r0, #1
 8001b2e:	fa00 f202 	lsl.w	r2, r0, r2
 8001b32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001b36:	bf00      	nop
 8001b38:	370c      	adds	r7, #12
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b40:	4770      	bx	lr
 8001b42:	bf00      	nop
 8001b44:	e000e100 	.word	0xe000e100

08001b48 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b48:	b480      	push	{r7}
 8001b4a:	b083      	sub	sp, #12
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	4603      	mov	r3, r0
 8001b50:	6039      	str	r1, [r7, #0]
 8001b52:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	db0a      	blt.n	8001b72 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b5c:	683b      	ldr	r3, [r7, #0]
 8001b5e:	b2da      	uxtb	r2, r3
 8001b60:	490c      	ldr	r1, [pc, #48]	; (8001b94 <__NVIC_SetPriority+0x4c>)
 8001b62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b66:	0112      	lsls	r2, r2, #4
 8001b68:	b2d2      	uxtb	r2, r2
 8001b6a:	440b      	add	r3, r1
 8001b6c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b70:	e00a      	b.n	8001b88 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b72:	683b      	ldr	r3, [r7, #0]
 8001b74:	b2da      	uxtb	r2, r3
 8001b76:	4908      	ldr	r1, [pc, #32]	; (8001b98 <__NVIC_SetPriority+0x50>)
 8001b78:	79fb      	ldrb	r3, [r7, #7]
 8001b7a:	f003 030f 	and.w	r3, r3, #15
 8001b7e:	3b04      	subs	r3, #4
 8001b80:	0112      	lsls	r2, r2, #4
 8001b82:	b2d2      	uxtb	r2, r2
 8001b84:	440b      	add	r3, r1
 8001b86:	761a      	strb	r2, [r3, #24]
}
 8001b88:	bf00      	nop
 8001b8a:	370c      	adds	r7, #12
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b92:	4770      	bx	lr
 8001b94:	e000e100 	.word	0xe000e100
 8001b98:	e000ed00 	.word	0xe000ed00

08001b9c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	b089      	sub	sp, #36	; 0x24
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	60f8      	str	r0, [r7, #12]
 8001ba4:	60b9      	str	r1, [r7, #8]
 8001ba6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	f003 0307 	and.w	r3, r3, #7
 8001bae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001bb0:	69fb      	ldr	r3, [r7, #28]
 8001bb2:	f1c3 0307 	rsb	r3, r3, #7
 8001bb6:	2b04      	cmp	r3, #4
 8001bb8:	bf28      	it	cs
 8001bba:	2304      	movcs	r3, #4
 8001bbc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001bbe:	69fb      	ldr	r3, [r7, #28]
 8001bc0:	3304      	adds	r3, #4
 8001bc2:	2b06      	cmp	r3, #6
 8001bc4:	d902      	bls.n	8001bcc <NVIC_EncodePriority+0x30>
 8001bc6:	69fb      	ldr	r3, [r7, #28]
 8001bc8:	3b03      	subs	r3, #3
 8001bca:	e000      	b.n	8001bce <NVIC_EncodePriority+0x32>
 8001bcc:	2300      	movs	r3, #0
 8001bce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bd0:	f04f 32ff 	mov.w	r2, #4294967295
 8001bd4:	69bb      	ldr	r3, [r7, #24]
 8001bd6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bda:	43da      	mvns	r2, r3
 8001bdc:	68bb      	ldr	r3, [r7, #8]
 8001bde:	401a      	ands	r2, r3
 8001be0:	697b      	ldr	r3, [r7, #20]
 8001be2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001be4:	f04f 31ff 	mov.w	r1, #4294967295
 8001be8:	697b      	ldr	r3, [r7, #20]
 8001bea:	fa01 f303 	lsl.w	r3, r1, r3
 8001bee:	43d9      	mvns	r1, r3
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bf4:	4313      	orrs	r3, r2
         );
}
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	3724      	adds	r7, #36	; 0x24
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c00:	4770      	bx	lr
	...

08001c04 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b082      	sub	sp, #8
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	3b01      	subs	r3, #1
 8001c10:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001c14:	d301      	bcc.n	8001c1a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c16:	2301      	movs	r3, #1
 8001c18:	e00f      	b.n	8001c3a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c1a:	4a0a      	ldr	r2, [pc, #40]	; (8001c44 <SysTick_Config+0x40>)
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	3b01      	subs	r3, #1
 8001c20:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c22:	210f      	movs	r1, #15
 8001c24:	f04f 30ff 	mov.w	r0, #4294967295
 8001c28:	f7ff ff8e 	bl	8001b48 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c2c:	4b05      	ldr	r3, [pc, #20]	; (8001c44 <SysTick_Config+0x40>)
 8001c2e:	2200      	movs	r2, #0
 8001c30:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c32:	4b04      	ldr	r3, [pc, #16]	; (8001c44 <SysTick_Config+0x40>)
 8001c34:	2207      	movs	r2, #7
 8001c36:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c38:	2300      	movs	r3, #0
}
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	3708      	adds	r7, #8
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	bd80      	pop	{r7, pc}
 8001c42:	bf00      	nop
 8001c44:	e000e010 	.word	0xe000e010

08001c48 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b082      	sub	sp, #8
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c50:	6878      	ldr	r0, [r7, #4]
 8001c52:	f7ff ff29 	bl	8001aa8 <__NVIC_SetPriorityGrouping>
}
 8001c56:	bf00      	nop
 8001c58:	3708      	adds	r7, #8
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	bd80      	pop	{r7, pc}

08001c5e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001c5e:	b580      	push	{r7, lr}
 8001c60:	b086      	sub	sp, #24
 8001c62:	af00      	add	r7, sp, #0
 8001c64:	4603      	mov	r3, r0
 8001c66:	60b9      	str	r1, [r7, #8]
 8001c68:	607a      	str	r2, [r7, #4]
 8001c6a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001c70:	f7ff ff3e 	bl	8001af0 <__NVIC_GetPriorityGrouping>
 8001c74:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c76:	687a      	ldr	r2, [r7, #4]
 8001c78:	68b9      	ldr	r1, [r7, #8]
 8001c7a:	6978      	ldr	r0, [r7, #20]
 8001c7c:	f7ff ff8e 	bl	8001b9c <NVIC_EncodePriority>
 8001c80:	4602      	mov	r2, r0
 8001c82:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c86:	4611      	mov	r1, r2
 8001c88:	4618      	mov	r0, r3
 8001c8a:	f7ff ff5d 	bl	8001b48 <__NVIC_SetPriority>
}
 8001c8e:	bf00      	nop
 8001c90:	3718      	adds	r7, #24
 8001c92:	46bd      	mov	sp, r7
 8001c94:	bd80      	pop	{r7, pc}

08001c96 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c96:	b580      	push	{r7, lr}
 8001c98:	b082      	sub	sp, #8
 8001c9a:	af00      	add	r7, sp, #0
 8001c9c:	4603      	mov	r3, r0
 8001c9e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ca0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	f7ff ff31 	bl	8001b0c <__NVIC_EnableIRQ>
}
 8001caa:	bf00      	nop
 8001cac:	3708      	adds	r7, #8
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	bd80      	pop	{r7, pc}

08001cb2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001cb2:	b580      	push	{r7, lr}
 8001cb4:	b082      	sub	sp, #8
 8001cb6:	af00      	add	r7, sp, #0
 8001cb8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001cba:	6878      	ldr	r0, [r7, #4]
 8001cbc:	f7ff ffa2 	bl	8001c04 <SysTick_Config>
 8001cc0:	4603      	mov	r3, r0
}
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	3708      	adds	r7, #8
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	bd80      	pop	{r7, pc}
	...

08001ccc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ccc:	b480      	push	{r7}
 8001cce:	b089      	sub	sp, #36	; 0x24
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
 8001cd4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001cda:	2300      	movs	r3, #0
 8001cdc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001cde:	2300      	movs	r3, #0
 8001ce0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	61fb      	str	r3, [r7, #28]
 8001ce6:	e159      	b.n	8001f9c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001ce8:	2201      	movs	r2, #1
 8001cea:	69fb      	ldr	r3, [r7, #28]
 8001cec:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001cf2:	683b      	ldr	r3, [r7, #0]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	697a      	ldr	r2, [r7, #20]
 8001cf8:	4013      	ands	r3, r2
 8001cfa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001cfc:	693a      	ldr	r2, [r7, #16]
 8001cfe:	697b      	ldr	r3, [r7, #20]
 8001d00:	429a      	cmp	r2, r3
 8001d02:	f040 8148 	bne.w	8001f96 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001d06:	683b      	ldr	r3, [r7, #0]
 8001d08:	685b      	ldr	r3, [r3, #4]
 8001d0a:	2b01      	cmp	r3, #1
 8001d0c:	d00b      	beq.n	8001d26 <HAL_GPIO_Init+0x5a>
 8001d0e:	683b      	ldr	r3, [r7, #0]
 8001d10:	685b      	ldr	r3, [r3, #4]
 8001d12:	2b02      	cmp	r3, #2
 8001d14:	d007      	beq.n	8001d26 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001d16:	683b      	ldr	r3, [r7, #0]
 8001d18:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001d1a:	2b11      	cmp	r3, #17
 8001d1c:	d003      	beq.n	8001d26 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001d1e:	683b      	ldr	r3, [r7, #0]
 8001d20:	685b      	ldr	r3, [r3, #4]
 8001d22:	2b12      	cmp	r3, #18
 8001d24:	d130      	bne.n	8001d88 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	689b      	ldr	r3, [r3, #8]
 8001d2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001d2c:	69fb      	ldr	r3, [r7, #28]
 8001d2e:	005b      	lsls	r3, r3, #1
 8001d30:	2203      	movs	r2, #3
 8001d32:	fa02 f303 	lsl.w	r3, r2, r3
 8001d36:	43db      	mvns	r3, r3
 8001d38:	69ba      	ldr	r2, [r7, #24]
 8001d3a:	4013      	ands	r3, r2
 8001d3c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001d3e:	683b      	ldr	r3, [r7, #0]
 8001d40:	68da      	ldr	r2, [r3, #12]
 8001d42:	69fb      	ldr	r3, [r7, #28]
 8001d44:	005b      	lsls	r3, r3, #1
 8001d46:	fa02 f303 	lsl.w	r3, r2, r3
 8001d4a:	69ba      	ldr	r2, [r7, #24]
 8001d4c:	4313      	orrs	r3, r2
 8001d4e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	69ba      	ldr	r2, [r7, #24]
 8001d54:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	685b      	ldr	r3, [r3, #4]
 8001d5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001d5c:	2201      	movs	r2, #1
 8001d5e:	69fb      	ldr	r3, [r7, #28]
 8001d60:	fa02 f303 	lsl.w	r3, r2, r3
 8001d64:	43db      	mvns	r3, r3
 8001d66:	69ba      	ldr	r2, [r7, #24]
 8001d68:	4013      	ands	r3, r2
 8001d6a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001d6c:	683b      	ldr	r3, [r7, #0]
 8001d6e:	685b      	ldr	r3, [r3, #4]
 8001d70:	091b      	lsrs	r3, r3, #4
 8001d72:	f003 0201 	and.w	r2, r3, #1
 8001d76:	69fb      	ldr	r3, [r7, #28]
 8001d78:	fa02 f303 	lsl.w	r3, r2, r3
 8001d7c:	69ba      	ldr	r2, [r7, #24]
 8001d7e:	4313      	orrs	r3, r2
 8001d80:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	69ba      	ldr	r2, [r7, #24]
 8001d86:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	68db      	ldr	r3, [r3, #12]
 8001d8c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001d8e:	69fb      	ldr	r3, [r7, #28]
 8001d90:	005b      	lsls	r3, r3, #1
 8001d92:	2203      	movs	r2, #3
 8001d94:	fa02 f303 	lsl.w	r3, r2, r3
 8001d98:	43db      	mvns	r3, r3
 8001d9a:	69ba      	ldr	r2, [r7, #24]
 8001d9c:	4013      	ands	r3, r2
 8001d9e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001da0:	683b      	ldr	r3, [r7, #0]
 8001da2:	689a      	ldr	r2, [r3, #8]
 8001da4:	69fb      	ldr	r3, [r7, #28]
 8001da6:	005b      	lsls	r3, r3, #1
 8001da8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dac:	69ba      	ldr	r2, [r7, #24]
 8001dae:	4313      	orrs	r3, r2
 8001db0:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	69ba      	ldr	r2, [r7, #24]
 8001db6:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001db8:	683b      	ldr	r3, [r7, #0]
 8001dba:	685b      	ldr	r3, [r3, #4]
 8001dbc:	2b02      	cmp	r3, #2
 8001dbe:	d003      	beq.n	8001dc8 <HAL_GPIO_Init+0xfc>
 8001dc0:	683b      	ldr	r3, [r7, #0]
 8001dc2:	685b      	ldr	r3, [r3, #4]
 8001dc4:	2b12      	cmp	r3, #18
 8001dc6:	d123      	bne.n	8001e10 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001dc8:	69fb      	ldr	r3, [r7, #28]
 8001dca:	08da      	lsrs	r2, r3, #3
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	3208      	adds	r2, #8
 8001dd0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001dd4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001dd6:	69fb      	ldr	r3, [r7, #28]
 8001dd8:	f003 0307 	and.w	r3, r3, #7
 8001ddc:	009b      	lsls	r3, r3, #2
 8001dde:	220f      	movs	r2, #15
 8001de0:	fa02 f303 	lsl.w	r3, r2, r3
 8001de4:	43db      	mvns	r3, r3
 8001de6:	69ba      	ldr	r2, [r7, #24]
 8001de8:	4013      	ands	r3, r2
 8001dea:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001dec:	683b      	ldr	r3, [r7, #0]
 8001dee:	691a      	ldr	r2, [r3, #16]
 8001df0:	69fb      	ldr	r3, [r7, #28]
 8001df2:	f003 0307 	and.w	r3, r3, #7
 8001df6:	009b      	lsls	r3, r3, #2
 8001df8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dfc:	69ba      	ldr	r2, [r7, #24]
 8001dfe:	4313      	orrs	r3, r2
 8001e00:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001e02:	69fb      	ldr	r3, [r7, #28]
 8001e04:	08da      	lsrs	r2, r3, #3
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	3208      	adds	r2, #8
 8001e0a:	69b9      	ldr	r1, [r7, #24]
 8001e0c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001e16:	69fb      	ldr	r3, [r7, #28]
 8001e18:	005b      	lsls	r3, r3, #1
 8001e1a:	2203      	movs	r2, #3
 8001e1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e20:	43db      	mvns	r3, r3
 8001e22:	69ba      	ldr	r2, [r7, #24]
 8001e24:	4013      	ands	r3, r2
 8001e26:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001e28:	683b      	ldr	r3, [r7, #0]
 8001e2a:	685b      	ldr	r3, [r3, #4]
 8001e2c:	f003 0203 	and.w	r2, r3, #3
 8001e30:	69fb      	ldr	r3, [r7, #28]
 8001e32:	005b      	lsls	r3, r3, #1
 8001e34:	fa02 f303 	lsl.w	r3, r2, r3
 8001e38:	69ba      	ldr	r2, [r7, #24]
 8001e3a:	4313      	orrs	r3, r2
 8001e3c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	69ba      	ldr	r2, [r7, #24]
 8001e42:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001e44:	683b      	ldr	r3, [r7, #0]
 8001e46:	685b      	ldr	r3, [r3, #4]
 8001e48:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	f000 80a2 	beq.w	8001f96 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e52:	2300      	movs	r3, #0
 8001e54:	60fb      	str	r3, [r7, #12]
 8001e56:	4b56      	ldr	r3, [pc, #344]	; (8001fb0 <HAL_GPIO_Init+0x2e4>)
 8001e58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e5a:	4a55      	ldr	r2, [pc, #340]	; (8001fb0 <HAL_GPIO_Init+0x2e4>)
 8001e5c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e60:	6453      	str	r3, [r2, #68]	; 0x44
 8001e62:	4b53      	ldr	r3, [pc, #332]	; (8001fb0 <HAL_GPIO_Init+0x2e4>)
 8001e64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e66:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e6a:	60fb      	str	r3, [r7, #12]
 8001e6c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001e6e:	4a51      	ldr	r2, [pc, #324]	; (8001fb4 <HAL_GPIO_Init+0x2e8>)
 8001e70:	69fb      	ldr	r3, [r7, #28]
 8001e72:	089b      	lsrs	r3, r3, #2
 8001e74:	3302      	adds	r3, #2
 8001e76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001e7c:	69fb      	ldr	r3, [r7, #28]
 8001e7e:	f003 0303 	and.w	r3, r3, #3
 8001e82:	009b      	lsls	r3, r3, #2
 8001e84:	220f      	movs	r2, #15
 8001e86:	fa02 f303 	lsl.w	r3, r2, r3
 8001e8a:	43db      	mvns	r3, r3
 8001e8c:	69ba      	ldr	r2, [r7, #24]
 8001e8e:	4013      	ands	r3, r2
 8001e90:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	4a48      	ldr	r2, [pc, #288]	; (8001fb8 <HAL_GPIO_Init+0x2ec>)
 8001e96:	4293      	cmp	r3, r2
 8001e98:	d019      	beq.n	8001ece <HAL_GPIO_Init+0x202>
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	4a47      	ldr	r2, [pc, #284]	; (8001fbc <HAL_GPIO_Init+0x2f0>)
 8001e9e:	4293      	cmp	r3, r2
 8001ea0:	d013      	beq.n	8001eca <HAL_GPIO_Init+0x1fe>
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	4a46      	ldr	r2, [pc, #280]	; (8001fc0 <HAL_GPIO_Init+0x2f4>)
 8001ea6:	4293      	cmp	r3, r2
 8001ea8:	d00d      	beq.n	8001ec6 <HAL_GPIO_Init+0x1fa>
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	4a45      	ldr	r2, [pc, #276]	; (8001fc4 <HAL_GPIO_Init+0x2f8>)
 8001eae:	4293      	cmp	r3, r2
 8001eb0:	d007      	beq.n	8001ec2 <HAL_GPIO_Init+0x1f6>
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	4a44      	ldr	r2, [pc, #272]	; (8001fc8 <HAL_GPIO_Init+0x2fc>)
 8001eb6:	4293      	cmp	r3, r2
 8001eb8:	d101      	bne.n	8001ebe <HAL_GPIO_Init+0x1f2>
 8001eba:	2304      	movs	r3, #4
 8001ebc:	e008      	b.n	8001ed0 <HAL_GPIO_Init+0x204>
 8001ebe:	2307      	movs	r3, #7
 8001ec0:	e006      	b.n	8001ed0 <HAL_GPIO_Init+0x204>
 8001ec2:	2303      	movs	r3, #3
 8001ec4:	e004      	b.n	8001ed0 <HAL_GPIO_Init+0x204>
 8001ec6:	2302      	movs	r3, #2
 8001ec8:	e002      	b.n	8001ed0 <HAL_GPIO_Init+0x204>
 8001eca:	2301      	movs	r3, #1
 8001ecc:	e000      	b.n	8001ed0 <HAL_GPIO_Init+0x204>
 8001ece:	2300      	movs	r3, #0
 8001ed0:	69fa      	ldr	r2, [r7, #28]
 8001ed2:	f002 0203 	and.w	r2, r2, #3
 8001ed6:	0092      	lsls	r2, r2, #2
 8001ed8:	4093      	lsls	r3, r2
 8001eda:	69ba      	ldr	r2, [r7, #24]
 8001edc:	4313      	orrs	r3, r2
 8001ede:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001ee0:	4934      	ldr	r1, [pc, #208]	; (8001fb4 <HAL_GPIO_Init+0x2e8>)
 8001ee2:	69fb      	ldr	r3, [r7, #28]
 8001ee4:	089b      	lsrs	r3, r3, #2
 8001ee6:	3302      	adds	r3, #2
 8001ee8:	69ba      	ldr	r2, [r7, #24]
 8001eea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001eee:	4b37      	ldr	r3, [pc, #220]	; (8001fcc <HAL_GPIO_Init+0x300>)
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ef4:	693b      	ldr	r3, [r7, #16]
 8001ef6:	43db      	mvns	r3, r3
 8001ef8:	69ba      	ldr	r2, [r7, #24]
 8001efa:	4013      	ands	r3, r2
 8001efc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001efe:	683b      	ldr	r3, [r7, #0]
 8001f00:	685b      	ldr	r3, [r3, #4]
 8001f02:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d003      	beq.n	8001f12 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001f0a:	69ba      	ldr	r2, [r7, #24]
 8001f0c:	693b      	ldr	r3, [r7, #16]
 8001f0e:	4313      	orrs	r3, r2
 8001f10:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001f12:	4a2e      	ldr	r2, [pc, #184]	; (8001fcc <HAL_GPIO_Init+0x300>)
 8001f14:	69bb      	ldr	r3, [r7, #24]
 8001f16:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001f18:	4b2c      	ldr	r3, [pc, #176]	; (8001fcc <HAL_GPIO_Init+0x300>)
 8001f1a:	685b      	ldr	r3, [r3, #4]
 8001f1c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f1e:	693b      	ldr	r3, [r7, #16]
 8001f20:	43db      	mvns	r3, r3
 8001f22:	69ba      	ldr	r2, [r7, #24]
 8001f24:	4013      	ands	r3, r2
 8001f26:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001f28:	683b      	ldr	r3, [r7, #0]
 8001f2a:	685b      	ldr	r3, [r3, #4]
 8001f2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d003      	beq.n	8001f3c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001f34:	69ba      	ldr	r2, [r7, #24]
 8001f36:	693b      	ldr	r3, [r7, #16]
 8001f38:	4313      	orrs	r3, r2
 8001f3a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001f3c:	4a23      	ldr	r2, [pc, #140]	; (8001fcc <HAL_GPIO_Init+0x300>)
 8001f3e:	69bb      	ldr	r3, [r7, #24]
 8001f40:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001f42:	4b22      	ldr	r3, [pc, #136]	; (8001fcc <HAL_GPIO_Init+0x300>)
 8001f44:	689b      	ldr	r3, [r3, #8]
 8001f46:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f48:	693b      	ldr	r3, [r7, #16]
 8001f4a:	43db      	mvns	r3, r3
 8001f4c:	69ba      	ldr	r2, [r7, #24]
 8001f4e:	4013      	ands	r3, r2
 8001f50:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001f52:	683b      	ldr	r3, [r7, #0]
 8001f54:	685b      	ldr	r3, [r3, #4]
 8001f56:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d003      	beq.n	8001f66 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001f5e:	69ba      	ldr	r2, [r7, #24]
 8001f60:	693b      	ldr	r3, [r7, #16]
 8001f62:	4313      	orrs	r3, r2
 8001f64:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001f66:	4a19      	ldr	r2, [pc, #100]	; (8001fcc <HAL_GPIO_Init+0x300>)
 8001f68:	69bb      	ldr	r3, [r7, #24]
 8001f6a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001f6c:	4b17      	ldr	r3, [pc, #92]	; (8001fcc <HAL_GPIO_Init+0x300>)
 8001f6e:	68db      	ldr	r3, [r3, #12]
 8001f70:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f72:	693b      	ldr	r3, [r7, #16]
 8001f74:	43db      	mvns	r3, r3
 8001f76:	69ba      	ldr	r2, [r7, #24]
 8001f78:	4013      	ands	r3, r2
 8001f7a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001f7c:	683b      	ldr	r3, [r7, #0]
 8001f7e:	685b      	ldr	r3, [r3, #4]
 8001f80:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d003      	beq.n	8001f90 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001f88:	69ba      	ldr	r2, [r7, #24]
 8001f8a:	693b      	ldr	r3, [r7, #16]
 8001f8c:	4313      	orrs	r3, r2
 8001f8e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001f90:	4a0e      	ldr	r2, [pc, #56]	; (8001fcc <HAL_GPIO_Init+0x300>)
 8001f92:	69bb      	ldr	r3, [r7, #24]
 8001f94:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f96:	69fb      	ldr	r3, [r7, #28]
 8001f98:	3301      	adds	r3, #1
 8001f9a:	61fb      	str	r3, [r7, #28]
 8001f9c:	69fb      	ldr	r3, [r7, #28]
 8001f9e:	2b0f      	cmp	r3, #15
 8001fa0:	f67f aea2 	bls.w	8001ce8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001fa4:	bf00      	nop
 8001fa6:	3724      	adds	r7, #36	; 0x24
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fae:	4770      	bx	lr
 8001fb0:	40023800 	.word	0x40023800
 8001fb4:	40013800 	.word	0x40013800
 8001fb8:	40020000 	.word	0x40020000
 8001fbc:	40020400 	.word	0x40020400
 8001fc0:	40020800 	.word	0x40020800
 8001fc4:	40020c00 	.word	0x40020c00
 8001fc8:	40021000 	.word	0x40021000
 8001fcc:	40013c00 	.word	0x40013c00

08001fd0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001fd0:	b480      	push	{r7}
 8001fd2:	b085      	sub	sp, #20
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
 8001fd8:	460b      	mov	r3, r1
 8001fda:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	691a      	ldr	r2, [r3, #16]
 8001fe0:	887b      	ldrh	r3, [r7, #2]
 8001fe2:	4013      	ands	r3, r2
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d002      	beq.n	8001fee <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001fe8:	2301      	movs	r3, #1
 8001fea:	73fb      	strb	r3, [r7, #15]
 8001fec:	e001      	b.n	8001ff2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001fee:	2300      	movs	r3, #0
 8001ff0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001ff2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	3714      	adds	r7, #20
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffe:	4770      	bx	lr

08002000 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002000:	b480      	push	{r7}
 8002002:	b083      	sub	sp, #12
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
 8002008:	460b      	mov	r3, r1
 800200a:	807b      	strh	r3, [r7, #2]
 800200c:	4613      	mov	r3, r2
 800200e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002010:	787b      	ldrb	r3, [r7, #1]
 8002012:	2b00      	cmp	r3, #0
 8002014:	d003      	beq.n	800201e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002016:	887a      	ldrh	r2, [r7, #2]
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800201c:	e003      	b.n	8002026 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800201e:	887b      	ldrh	r3, [r7, #2]
 8002020:	041a      	lsls	r2, r3, #16
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	619a      	str	r2, [r3, #24]
}
 8002026:	bf00      	nop
 8002028:	370c      	adds	r7, #12
 800202a:	46bd      	mov	sp, r7
 800202c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002030:	4770      	bx	lr
	...

08002034 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	b082      	sub	sp, #8
 8002038:	af00      	add	r7, sp, #0
 800203a:	4603      	mov	r3, r0
 800203c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800203e:	4b08      	ldr	r3, [pc, #32]	; (8002060 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002040:	695a      	ldr	r2, [r3, #20]
 8002042:	88fb      	ldrh	r3, [r7, #6]
 8002044:	4013      	ands	r3, r2
 8002046:	2b00      	cmp	r3, #0
 8002048:	d006      	beq.n	8002058 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800204a:	4a05      	ldr	r2, [pc, #20]	; (8002060 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800204c:	88fb      	ldrh	r3, [r7, #6]
 800204e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002050:	88fb      	ldrh	r3, [r7, #6]
 8002052:	4618      	mov	r0, r3
 8002054:	f7ff fa7a 	bl	800154c <HAL_GPIO_EXTI_Callback>
  }
}
 8002058:	bf00      	nop
 800205a:	3708      	adds	r7, #8
 800205c:	46bd      	mov	sp, r7
 800205e:	bd80      	pop	{r7, pc}
 8002060:	40013c00 	.word	0x40013c00

08002064 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b086      	sub	sp, #24
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	2b00      	cmp	r3, #0
 8002070:	d101      	bne.n	8002076 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002072:	2301      	movs	r3, #1
 8002074:	e25b      	b.n	800252e <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f003 0301 	and.w	r3, r3, #1
 800207e:	2b00      	cmp	r3, #0
 8002080:	d075      	beq.n	800216e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002082:	4ba3      	ldr	r3, [pc, #652]	; (8002310 <HAL_RCC_OscConfig+0x2ac>)
 8002084:	689b      	ldr	r3, [r3, #8]
 8002086:	f003 030c 	and.w	r3, r3, #12
 800208a:	2b04      	cmp	r3, #4
 800208c:	d00c      	beq.n	80020a8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800208e:	4ba0      	ldr	r3, [pc, #640]	; (8002310 <HAL_RCC_OscConfig+0x2ac>)
 8002090:	689b      	ldr	r3, [r3, #8]
 8002092:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002096:	2b08      	cmp	r3, #8
 8002098:	d112      	bne.n	80020c0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800209a:	4b9d      	ldr	r3, [pc, #628]	; (8002310 <HAL_RCC_OscConfig+0x2ac>)
 800209c:	685b      	ldr	r3, [r3, #4]
 800209e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80020a2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80020a6:	d10b      	bne.n	80020c0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020a8:	4b99      	ldr	r3, [pc, #612]	; (8002310 <HAL_RCC_OscConfig+0x2ac>)
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d05b      	beq.n	800216c <HAL_RCC_OscConfig+0x108>
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	685b      	ldr	r3, [r3, #4]
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d157      	bne.n	800216c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80020bc:	2301      	movs	r3, #1
 80020be:	e236      	b.n	800252e <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	685b      	ldr	r3, [r3, #4]
 80020c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80020c8:	d106      	bne.n	80020d8 <HAL_RCC_OscConfig+0x74>
 80020ca:	4b91      	ldr	r3, [pc, #580]	; (8002310 <HAL_RCC_OscConfig+0x2ac>)
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	4a90      	ldr	r2, [pc, #576]	; (8002310 <HAL_RCC_OscConfig+0x2ac>)
 80020d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020d4:	6013      	str	r3, [r2, #0]
 80020d6:	e01d      	b.n	8002114 <HAL_RCC_OscConfig+0xb0>
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	685b      	ldr	r3, [r3, #4]
 80020dc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80020e0:	d10c      	bne.n	80020fc <HAL_RCC_OscConfig+0x98>
 80020e2:	4b8b      	ldr	r3, [pc, #556]	; (8002310 <HAL_RCC_OscConfig+0x2ac>)
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	4a8a      	ldr	r2, [pc, #552]	; (8002310 <HAL_RCC_OscConfig+0x2ac>)
 80020e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80020ec:	6013      	str	r3, [r2, #0]
 80020ee:	4b88      	ldr	r3, [pc, #544]	; (8002310 <HAL_RCC_OscConfig+0x2ac>)
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	4a87      	ldr	r2, [pc, #540]	; (8002310 <HAL_RCC_OscConfig+0x2ac>)
 80020f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020f8:	6013      	str	r3, [r2, #0]
 80020fa:	e00b      	b.n	8002114 <HAL_RCC_OscConfig+0xb0>
 80020fc:	4b84      	ldr	r3, [pc, #528]	; (8002310 <HAL_RCC_OscConfig+0x2ac>)
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	4a83      	ldr	r2, [pc, #524]	; (8002310 <HAL_RCC_OscConfig+0x2ac>)
 8002102:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002106:	6013      	str	r3, [r2, #0]
 8002108:	4b81      	ldr	r3, [pc, #516]	; (8002310 <HAL_RCC_OscConfig+0x2ac>)
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	4a80      	ldr	r2, [pc, #512]	; (8002310 <HAL_RCC_OscConfig+0x2ac>)
 800210e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002112:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	685b      	ldr	r3, [r3, #4]
 8002118:	2b00      	cmp	r3, #0
 800211a:	d013      	beq.n	8002144 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800211c:	f7ff fc96 	bl	8001a4c <HAL_GetTick>
 8002120:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002122:	e008      	b.n	8002136 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002124:	f7ff fc92 	bl	8001a4c <HAL_GetTick>
 8002128:	4602      	mov	r2, r0
 800212a:	693b      	ldr	r3, [r7, #16]
 800212c:	1ad3      	subs	r3, r2, r3
 800212e:	2b64      	cmp	r3, #100	; 0x64
 8002130:	d901      	bls.n	8002136 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002132:	2303      	movs	r3, #3
 8002134:	e1fb      	b.n	800252e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002136:	4b76      	ldr	r3, [pc, #472]	; (8002310 <HAL_RCC_OscConfig+0x2ac>)
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800213e:	2b00      	cmp	r3, #0
 8002140:	d0f0      	beq.n	8002124 <HAL_RCC_OscConfig+0xc0>
 8002142:	e014      	b.n	800216e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002144:	f7ff fc82 	bl	8001a4c <HAL_GetTick>
 8002148:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800214a:	e008      	b.n	800215e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800214c:	f7ff fc7e 	bl	8001a4c <HAL_GetTick>
 8002150:	4602      	mov	r2, r0
 8002152:	693b      	ldr	r3, [r7, #16]
 8002154:	1ad3      	subs	r3, r2, r3
 8002156:	2b64      	cmp	r3, #100	; 0x64
 8002158:	d901      	bls.n	800215e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800215a:	2303      	movs	r3, #3
 800215c:	e1e7      	b.n	800252e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800215e:	4b6c      	ldr	r3, [pc, #432]	; (8002310 <HAL_RCC_OscConfig+0x2ac>)
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002166:	2b00      	cmp	r3, #0
 8002168:	d1f0      	bne.n	800214c <HAL_RCC_OscConfig+0xe8>
 800216a:	e000      	b.n	800216e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800216c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f003 0302 	and.w	r3, r3, #2
 8002176:	2b00      	cmp	r3, #0
 8002178:	d063      	beq.n	8002242 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800217a:	4b65      	ldr	r3, [pc, #404]	; (8002310 <HAL_RCC_OscConfig+0x2ac>)
 800217c:	689b      	ldr	r3, [r3, #8]
 800217e:	f003 030c 	and.w	r3, r3, #12
 8002182:	2b00      	cmp	r3, #0
 8002184:	d00b      	beq.n	800219e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002186:	4b62      	ldr	r3, [pc, #392]	; (8002310 <HAL_RCC_OscConfig+0x2ac>)
 8002188:	689b      	ldr	r3, [r3, #8]
 800218a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800218e:	2b08      	cmp	r3, #8
 8002190:	d11c      	bne.n	80021cc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002192:	4b5f      	ldr	r3, [pc, #380]	; (8002310 <HAL_RCC_OscConfig+0x2ac>)
 8002194:	685b      	ldr	r3, [r3, #4]
 8002196:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800219a:	2b00      	cmp	r3, #0
 800219c:	d116      	bne.n	80021cc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800219e:	4b5c      	ldr	r3, [pc, #368]	; (8002310 <HAL_RCC_OscConfig+0x2ac>)
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f003 0302 	and.w	r3, r3, #2
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d005      	beq.n	80021b6 <HAL_RCC_OscConfig+0x152>
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	68db      	ldr	r3, [r3, #12]
 80021ae:	2b01      	cmp	r3, #1
 80021b0:	d001      	beq.n	80021b6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80021b2:	2301      	movs	r3, #1
 80021b4:	e1bb      	b.n	800252e <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021b6:	4b56      	ldr	r3, [pc, #344]	; (8002310 <HAL_RCC_OscConfig+0x2ac>)
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	691b      	ldr	r3, [r3, #16]
 80021c2:	00db      	lsls	r3, r3, #3
 80021c4:	4952      	ldr	r1, [pc, #328]	; (8002310 <HAL_RCC_OscConfig+0x2ac>)
 80021c6:	4313      	orrs	r3, r2
 80021c8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80021ca:	e03a      	b.n	8002242 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	68db      	ldr	r3, [r3, #12]
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d020      	beq.n	8002216 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80021d4:	4b4f      	ldr	r3, [pc, #316]	; (8002314 <HAL_RCC_OscConfig+0x2b0>)
 80021d6:	2201      	movs	r2, #1
 80021d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021da:	f7ff fc37 	bl	8001a4c <HAL_GetTick>
 80021de:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021e0:	e008      	b.n	80021f4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80021e2:	f7ff fc33 	bl	8001a4c <HAL_GetTick>
 80021e6:	4602      	mov	r2, r0
 80021e8:	693b      	ldr	r3, [r7, #16]
 80021ea:	1ad3      	subs	r3, r2, r3
 80021ec:	2b02      	cmp	r3, #2
 80021ee:	d901      	bls.n	80021f4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80021f0:	2303      	movs	r3, #3
 80021f2:	e19c      	b.n	800252e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021f4:	4b46      	ldr	r3, [pc, #280]	; (8002310 <HAL_RCC_OscConfig+0x2ac>)
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f003 0302 	and.w	r3, r3, #2
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d0f0      	beq.n	80021e2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002200:	4b43      	ldr	r3, [pc, #268]	; (8002310 <HAL_RCC_OscConfig+0x2ac>)
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	691b      	ldr	r3, [r3, #16]
 800220c:	00db      	lsls	r3, r3, #3
 800220e:	4940      	ldr	r1, [pc, #256]	; (8002310 <HAL_RCC_OscConfig+0x2ac>)
 8002210:	4313      	orrs	r3, r2
 8002212:	600b      	str	r3, [r1, #0]
 8002214:	e015      	b.n	8002242 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002216:	4b3f      	ldr	r3, [pc, #252]	; (8002314 <HAL_RCC_OscConfig+0x2b0>)
 8002218:	2200      	movs	r2, #0
 800221a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800221c:	f7ff fc16 	bl	8001a4c <HAL_GetTick>
 8002220:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002222:	e008      	b.n	8002236 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002224:	f7ff fc12 	bl	8001a4c <HAL_GetTick>
 8002228:	4602      	mov	r2, r0
 800222a:	693b      	ldr	r3, [r7, #16]
 800222c:	1ad3      	subs	r3, r2, r3
 800222e:	2b02      	cmp	r3, #2
 8002230:	d901      	bls.n	8002236 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002232:	2303      	movs	r3, #3
 8002234:	e17b      	b.n	800252e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002236:	4b36      	ldr	r3, [pc, #216]	; (8002310 <HAL_RCC_OscConfig+0x2ac>)
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f003 0302 	and.w	r3, r3, #2
 800223e:	2b00      	cmp	r3, #0
 8002240:	d1f0      	bne.n	8002224 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f003 0308 	and.w	r3, r3, #8
 800224a:	2b00      	cmp	r3, #0
 800224c:	d030      	beq.n	80022b0 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	695b      	ldr	r3, [r3, #20]
 8002252:	2b00      	cmp	r3, #0
 8002254:	d016      	beq.n	8002284 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002256:	4b30      	ldr	r3, [pc, #192]	; (8002318 <HAL_RCC_OscConfig+0x2b4>)
 8002258:	2201      	movs	r2, #1
 800225a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800225c:	f7ff fbf6 	bl	8001a4c <HAL_GetTick>
 8002260:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002262:	e008      	b.n	8002276 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002264:	f7ff fbf2 	bl	8001a4c <HAL_GetTick>
 8002268:	4602      	mov	r2, r0
 800226a:	693b      	ldr	r3, [r7, #16]
 800226c:	1ad3      	subs	r3, r2, r3
 800226e:	2b02      	cmp	r3, #2
 8002270:	d901      	bls.n	8002276 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002272:	2303      	movs	r3, #3
 8002274:	e15b      	b.n	800252e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002276:	4b26      	ldr	r3, [pc, #152]	; (8002310 <HAL_RCC_OscConfig+0x2ac>)
 8002278:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800227a:	f003 0302 	and.w	r3, r3, #2
 800227e:	2b00      	cmp	r3, #0
 8002280:	d0f0      	beq.n	8002264 <HAL_RCC_OscConfig+0x200>
 8002282:	e015      	b.n	80022b0 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002284:	4b24      	ldr	r3, [pc, #144]	; (8002318 <HAL_RCC_OscConfig+0x2b4>)
 8002286:	2200      	movs	r2, #0
 8002288:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800228a:	f7ff fbdf 	bl	8001a4c <HAL_GetTick>
 800228e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002290:	e008      	b.n	80022a4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002292:	f7ff fbdb 	bl	8001a4c <HAL_GetTick>
 8002296:	4602      	mov	r2, r0
 8002298:	693b      	ldr	r3, [r7, #16]
 800229a:	1ad3      	subs	r3, r2, r3
 800229c:	2b02      	cmp	r3, #2
 800229e:	d901      	bls.n	80022a4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80022a0:	2303      	movs	r3, #3
 80022a2:	e144      	b.n	800252e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022a4:	4b1a      	ldr	r3, [pc, #104]	; (8002310 <HAL_RCC_OscConfig+0x2ac>)
 80022a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80022a8:	f003 0302 	and.w	r3, r3, #2
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d1f0      	bne.n	8002292 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f003 0304 	and.w	r3, r3, #4
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	f000 80a0 	beq.w	80023fe <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80022be:	2300      	movs	r3, #0
 80022c0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80022c2:	4b13      	ldr	r3, [pc, #76]	; (8002310 <HAL_RCC_OscConfig+0x2ac>)
 80022c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d10f      	bne.n	80022ee <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80022ce:	2300      	movs	r3, #0
 80022d0:	60bb      	str	r3, [r7, #8]
 80022d2:	4b0f      	ldr	r3, [pc, #60]	; (8002310 <HAL_RCC_OscConfig+0x2ac>)
 80022d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022d6:	4a0e      	ldr	r2, [pc, #56]	; (8002310 <HAL_RCC_OscConfig+0x2ac>)
 80022d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022dc:	6413      	str	r3, [r2, #64]	; 0x40
 80022de:	4b0c      	ldr	r3, [pc, #48]	; (8002310 <HAL_RCC_OscConfig+0x2ac>)
 80022e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022e6:	60bb      	str	r3, [r7, #8]
 80022e8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80022ea:	2301      	movs	r3, #1
 80022ec:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022ee:	4b0b      	ldr	r3, [pc, #44]	; (800231c <HAL_RCC_OscConfig+0x2b8>)
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d121      	bne.n	800233e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80022fa:	4b08      	ldr	r3, [pc, #32]	; (800231c <HAL_RCC_OscConfig+0x2b8>)
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	4a07      	ldr	r2, [pc, #28]	; (800231c <HAL_RCC_OscConfig+0x2b8>)
 8002300:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002304:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002306:	f7ff fba1 	bl	8001a4c <HAL_GetTick>
 800230a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800230c:	e011      	b.n	8002332 <HAL_RCC_OscConfig+0x2ce>
 800230e:	bf00      	nop
 8002310:	40023800 	.word	0x40023800
 8002314:	42470000 	.word	0x42470000
 8002318:	42470e80 	.word	0x42470e80
 800231c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002320:	f7ff fb94 	bl	8001a4c <HAL_GetTick>
 8002324:	4602      	mov	r2, r0
 8002326:	693b      	ldr	r3, [r7, #16]
 8002328:	1ad3      	subs	r3, r2, r3
 800232a:	2b02      	cmp	r3, #2
 800232c:	d901      	bls.n	8002332 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800232e:	2303      	movs	r3, #3
 8002330:	e0fd      	b.n	800252e <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002332:	4b81      	ldr	r3, [pc, #516]	; (8002538 <HAL_RCC_OscConfig+0x4d4>)
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800233a:	2b00      	cmp	r3, #0
 800233c:	d0f0      	beq.n	8002320 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	689b      	ldr	r3, [r3, #8]
 8002342:	2b01      	cmp	r3, #1
 8002344:	d106      	bne.n	8002354 <HAL_RCC_OscConfig+0x2f0>
 8002346:	4b7d      	ldr	r3, [pc, #500]	; (800253c <HAL_RCC_OscConfig+0x4d8>)
 8002348:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800234a:	4a7c      	ldr	r2, [pc, #496]	; (800253c <HAL_RCC_OscConfig+0x4d8>)
 800234c:	f043 0301 	orr.w	r3, r3, #1
 8002350:	6713      	str	r3, [r2, #112]	; 0x70
 8002352:	e01c      	b.n	800238e <HAL_RCC_OscConfig+0x32a>
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	689b      	ldr	r3, [r3, #8]
 8002358:	2b05      	cmp	r3, #5
 800235a:	d10c      	bne.n	8002376 <HAL_RCC_OscConfig+0x312>
 800235c:	4b77      	ldr	r3, [pc, #476]	; (800253c <HAL_RCC_OscConfig+0x4d8>)
 800235e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002360:	4a76      	ldr	r2, [pc, #472]	; (800253c <HAL_RCC_OscConfig+0x4d8>)
 8002362:	f043 0304 	orr.w	r3, r3, #4
 8002366:	6713      	str	r3, [r2, #112]	; 0x70
 8002368:	4b74      	ldr	r3, [pc, #464]	; (800253c <HAL_RCC_OscConfig+0x4d8>)
 800236a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800236c:	4a73      	ldr	r2, [pc, #460]	; (800253c <HAL_RCC_OscConfig+0x4d8>)
 800236e:	f043 0301 	orr.w	r3, r3, #1
 8002372:	6713      	str	r3, [r2, #112]	; 0x70
 8002374:	e00b      	b.n	800238e <HAL_RCC_OscConfig+0x32a>
 8002376:	4b71      	ldr	r3, [pc, #452]	; (800253c <HAL_RCC_OscConfig+0x4d8>)
 8002378:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800237a:	4a70      	ldr	r2, [pc, #448]	; (800253c <HAL_RCC_OscConfig+0x4d8>)
 800237c:	f023 0301 	bic.w	r3, r3, #1
 8002380:	6713      	str	r3, [r2, #112]	; 0x70
 8002382:	4b6e      	ldr	r3, [pc, #440]	; (800253c <HAL_RCC_OscConfig+0x4d8>)
 8002384:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002386:	4a6d      	ldr	r2, [pc, #436]	; (800253c <HAL_RCC_OscConfig+0x4d8>)
 8002388:	f023 0304 	bic.w	r3, r3, #4
 800238c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	689b      	ldr	r3, [r3, #8]
 8002392:	2b00      	cmp	r3, #0
 8002394:	d015      	beq.n	80023c2 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002396:	f7ff fb59 	bl	8001a4c <HAL_GetTick>
 800239a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800239c:	e00a      	b.n	80023b4 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800239e:	f7ff fb55 	bl	8001a4c <HAL_GetTick>
 80023a2:	4602      	mov	r2, r0
 80023a4:	693b      	ldr	r3, [r7, #16]
 80023a6:	1ad3      	subs	r3, r2, r3
 80023a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80023ac:	4293      	cmp	r3, r2
 80023ae:	d901      	bls.n	80023b4 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80023b0:	2303      	movs	r3, #3
 80023b2:	e0bc      	b.n	800252e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023b4:	4b61      	ldr	r3, [pc, #388]	; (800253c <HAL_RCC_OscConfig+0x4d8>)
 80023b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023b8:	f003 0302 	and.w	r3, r3, #2
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d0ee      	beq.n	800239e <HAL_RCC_OscConfig+0x33a>
 80023c0:	e014      	b.n	80023ec <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023c2:	f7ff fb43 	bl	8001a4c <HAL_GetTick>
 80023c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80023c8:	e00a      	b.n	80023e0 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80023ca:	f7ff fb3f 	bl	8001a4c <HAL_GetTick>
 80023ce:	4602      	mov	r2, r0
 80023d0:	693b      	ldr	r3, [r7, #16]
 80023d2:	1ad3      	subs	r3, r2, r3
 80023d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80023d8:	4293      	cmp	r3, r2
 80023da:	d901      	bls.n	80023e0 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80023dc:	2303      	movs	r3, #3
 80023de:	e0a6      	b.n	800252e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80023e0:	4b56      	ldr	r3, [pc, #344]	; (800253c <HAL_RCC_OscConfig+0x4d8>)
 80023e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023e4:	f003 0302 	and.w	r3, r3, #2
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d1ee      	bne.n	80023ca <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80023ec:	7dfb      	ldrb	r3, [r7, #23]
 80023ee:	2b01      	cmp	r3, #1
 80023f0:	d105      	bne.n	80023fe <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80023f2:	4b52      	ldr	r3, [pc, #328]	; (800253c <HAL_RCC_OscConfig+0x4d8>)
 80023f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023f6:	4a51      	ldr	r2, [pc, #324]	; (800253c <HAL_RCC_OscConfig+0x4d8>)
 80023f8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80023fc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	699b      	ldr	r3, [r3, #24]
 8002402:	2b00      	cmp	r3, #0
 8002404:	f000 8092 	beq.w	800252c <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002408:	4b4c      	ldr	r3, [pc, #304]	; (800253c <HAL_RCC_OscConfig+0x4d8>)
 800240a:	689b      	ldr	r3, [r3, #8]
 800240c:	f003 030c 	and.w	r3, r3, #12
 8002410:	2b08      	cmp	r3, #8
 8002412:	d05c      	beq.n	80024ce <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	699b      	ldr	r3, [r3, #24]
 8002418:	2b02      	cmp	r3, #2
 800241a:	d141      	bne.n	80024a0 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800241c:	4b48      	ldr	r3, [pc, #288]	; (8002540 <HAL_RCC_OscConfig+0x4dc>)
 800241e:	2200      	movs	r2, #0
 8002420:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002422:	f7ff fb13 	bl	8001a4c <HAL_GetTick>
 8002426:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002428:	e008      	b.n	800243c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800242a:	f7ff fb0f 	bl	8001a4c <HAL_GetTick>
 800242e:	4602      	mov	r2, r0
 8002430:	693b      	ldr	r3, [r7, #16]
 8002432:	1ad3      	subs	r3, r2, r3
 8002434:	2b02      	cmp	r3, #2
 8002436:	d901      	bls.n	800243c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002438:	2303      	movs	r3, #3
 800243a:	e078      	b.n	800252e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800243c:	4b3f      	ldr	r3, [pc, #252]	; (800253c <HAL_RCC_OscConfig+0x4d8>)
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002444:	2b00      	cmp	r3, #0
 8002446:	d1f0      	bne.n	800242a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	69da      	ldr	r2, [r3, #28]
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	6a1b      	ldr	r3, [r3, #32]
 8002450:	431a      	orrs	r2, r3
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002456:	019b      	lsls	r3, r3, #6
 8002458:	431a      	orrs	r2, r3
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800245e:	085b      	lsrs	r3, r3, #1
 8002460:	3b01      	subs	r3, #1
 8002462:	041b      	lsls	r3, r3, #16
 8002464:	431a      	orrs	r2, r3
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800246a:	061b      	lsls	r3, r3, #24
 800246c:	4933      	ldr	r1, [pc, #204]	; (800253c <HAL_RCC_OscConfig+0x4d8>)
 800246e:	4313      	orrs	r3, r2
 8002470:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002472:	4b33      	ldr	r3, [pc, #204]	; (8002540 <HAL_RCC_OscConfig+0x4dc>)
 8002474:	2201      	movs	r2, #1
 8002476:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002478:	f7ff fae8 	bl	8001a4c <HAL_GetTick>
 800247c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800247e:	e008      	b.n	8002492 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002480:	f7ff fae4 	bl	8001a4c <HAL_GetTick>
 8002484:	4602      	mov	r2, r0
 8002486:	693b      	ldr	r3, [r7, #16]
 8002488:	1ad3      	subs	r3, r2, r3
 800248a:	2b02      	cmp	r3, #2
 800248c:	d901      	bls.n	8002492 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800248e:	2303      	movs	r3, #3
 8002490:	e04d      	b.n	800252e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002492:	4b2a      	ldr	r3, [pc, #168]	; (800253c <HAL_RCC_OscConfig+0x4d8>)
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800249a:	2b00      	cmp	r3, #0
 800249c:	d0f0      	beq.n	8002480 <HAL_RCC_OscConfig+0x41c>
 800249e:	e045      	b.n	800252c <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024a0:	4b27      	ldr	r3, [pc, #156]	; (8002540 <HAL_RCC_OscConfig+0x4dc>)
 80024a2:	2200      	movs	r2, #0
 80024a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024a6:	f7ff fad1 	bl	8001a4c <HAL_GetTick>
 80024aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80024ac:	e008      	b.n	80024c0 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80024ae:	f7ff facd 	bl	8001a4c <HAL_GetTick>
 80024b2:	4602      	mov	r2, r0
 80024b4:	693b      	ldr	r3, [r7, #16]
 80024b6:	1ad3      	subs	r3, r2, r3
 80024b8:	2b02      	cmp	r3, #2
 80024ba:	d901      	bls.n	80024c0 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80024bc:	2303      	movs	r3, #3
 80024be:	e036      	b.n	800252e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80024c0:	4b1e      	ldr	r3, [pc, #120]	; (800253c <HAL_RCC_OscConfig+0x4d8>)
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d1f0      	bne.n	80024ae <HAL_RCC_OscConfig+0x44a>
 80024cc:	e02e      	b.n	800252c <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	699b      	ldr	r3, [r3, #24]
 80024d2:	2b01      	cmp	r3, #1
 80024d4:	d101      	bne.n	80024da <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80024d6:	2301      	movs	r3, #1
 80024d8:	e029      	b.n	800252e <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80024da:	4b18      	ldr	r3, [pc, #96]	; (800253c <HAL_RCC_OscConfig+0x4d8>)
 80024dc:	685b      	ldr	r3, [r3, #4]
 80024de:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	69db      	ldr	r3, [r3, #28]
 80024ea:	429a      	cmp	r2, r3
 80024ec:	d11c      	bne.n	8002528 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024f8:	429a      	cmp	r2, r3
 80024fa:	d115      	bne.n	8002528 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80024fc:	68fa      	ldr	r2, [r7, #12]
 80024fe:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002502:	4013      	ands	r3, r2
 8002504:	687a      	ldr	r2, [r7, #4]
 8002506:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002508:	4293      	cmp	r3, r2
 800250a:	d10d      	bne.n	8002528 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002516:	429a      	cmp	r2, r3
 8002518:	d106      	bne.n	8002528 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002524:	429a      	cmp	r2, r3
 8002526:	d001      	beq.n	800252c <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8002528:	2301      	movs	r3, #1
 800252a:	e000      	b.n	800252e <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 800252c:	2300      	movs	r3, #0
}
 800252e:	4618      	mov	r0, r3
 8002530:	3718      	adds	r7, #24
 8002532:	46bd      	mov	sp, r7
 8002534:	bd80      	pop	{r7, pc}
 8002536:	bf00      	nop
 8002538:	40007000 	.word	0x40007000
 800253c:	40023800 	.word	0x40023800
 8002540:	42470060 	.word	0x42470060

08002544 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	b084      	sub	sp, #16
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
 800254c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	2b00      	cmp	r3, #0
 8002552:	d101      	bne.n	8002558 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002554:	2301      	movs	r3, #1
 8002556:	e0cc      	b.n	80026f2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002558:	4b68      	ldr	r3, [pc, #416]	; (80026fc <HAL_RCC_ClockConfig+0x1b8>)
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f003 030f 	and.w	r3, r3, #15
 8002560:	683a      	ldr	r2, [r7, #0]
 8002562:	429a      	cmp	r2, r3
 8002564:	d90c      	bls.n	8002580 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002566:	4b65      	ldr	r3, [pc, #404]	; (80026fc <HAL_RCC_ClockConfig+0x1b8>)
 8002568:	683a      	ldr	r2, [r7, #0]
 800256a:	b2d2      	uxtb	r2, r2
 800256c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800256e:	4b63      	ldr	r3, [pc, #396]	; (80026fc <HAL_RCC_ClockConfig+0x1b8>)
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f003 030f 	and.w	r3, r3, #15
 8002576:	683a      	ldr	r2, [r7, #0]
 8002578:	429a      	cmp	r2, r3
 800257a:	d001      	beq.n	8002580 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800257c:	2301      	movs	r3, #1
 800257e:	e0b8      	b.n	80026f2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f003 0302 	and.w	r3, r3, #2
 8002588:	2b00      	cmp	r3, #0
 800258a:	d020      	beq.n	80025ce <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f003 0304 	and.w	r3, r3, #4
 8002594:	2b00      	cmp	r3, #0
 8002596:	d005      	beq.n	80025a4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002598:	4b59      	ldr	r3, [pc, #356]	; (8002700 <HAL_RCC_ClockConfig+0x1bc>)
 800259a:	689b      	ldr	r3, [r3, #8]
 800259c:	4a58      	ldr	r2, [pc, #352]	; (8002700 <HAL_RCC_ClockConfig+0x1bc>)
 800259e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80025a2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f003 0308 	and.w	r3, r3, #8
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d005      	beq.n	80025bc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80025b0:	4b53      	ldr	r3, [pc, #332]	; (8002700 <HAL_RCC_ClockConfig+0x1bc>)
 80025b2:	689b      	ldr	r3, [r3, #8]
 80025b4:	4a52      	ldr	r2, [pc, #328]	; (8002700 <HAL_RCC_ClockConfig+0x1bc>)
 80025b6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80025ba:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80025bc:	4b50      	ldr	r3, [pc, #320]	; (8002700 <HAL_RCC_ClockConfig+0x1bc>)
 80025be:	689b      	ldr	r3, [r3, #8]
 80025c0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	689b      	ldr	r3, [r3, #8]
 80025c8:	494d      	ldr	r1, [pc, #308]	; (8002700 <HAL_RCC_ClockConfig+0x1bc>)
 80025ca:	4313      	orrs	r3, r2
 80025cc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f003 0301 	and.w	r3, r3, #1
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d044      	beq.n	8002664 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	685b      	ldr	r3, [r3, #4]
 80025de:	2b01      	cmp	r3, #1
 80025e0:	d107      	bne.n	80025f2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025e2:	4b47      	ldr	r3, [pc, #284]	; (8002700 <HAL_RCC_ClockConfig+0x1bc>)
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d119      	bne.n	8002622 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025ee:	2301      	movs	r3, #1
 80025f0:	e07f      	b.n	80026f2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	685b      	ldr	r3, [r3, #4]
 80025f6:	2b02      	cmp	r3, #2
 80025f8:	d003      	beq.n	8002602 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80025fe:	2b03      	cmp	r3, #3
 8002600:	d107      	bne.n	8002612 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002602:	4b3f      	ldr	r3, [pc, #252]	; (8002700 <HAL_RCC_ClockConfig+0x1bc>)
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800260a:	2b00      	cmp	r3, #0
 800260c:	d109      	bne.n	8002622 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800260e:	2301      	movs	r3, #1
 8002610:	e06f      	b.n	80026f2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002612:	4b3b      	ldr	r3, [pc, #236]	; (8002700 <HAL_RCC_ClockConfig+0x1bc>)
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f003 0302 	and.w	r3, r3, #2
 800261a:	2b00      	cmp	r3, #0
 800261c:	d101      	bne.n	8002622 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800261e:	2301      	movs	r3, #1
 8002620:	e067      	b.n	80026f2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002622:	4b37      	ldr	r3, [pc, #220]	; (8002700 <HAL_RCC_ClockConfig+0x1bc>)
 8002624:	689b      	ldr	r3, [r3, #8]
 8002626:	f023 0203 	bic.w	r2, r3, #3
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	685b      	ldr	r3, [r3, #4]
 800262e:	4934      	ldr	r1, [pc, #208]	; (8002700 <HAL_RCC_ClockConfig+0x1bc>)
 8002630:	4313      	orrs	r3, r2
 8002632:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002634:	f7ff fa0a 	bl	8001a4c <HAL_GetTick>
 8002638:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800263a:	e00a      	b.n	8002652 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800263c:	f7ff fa06 	bl	8001a4c <HAL_GetTick>
 8002640:	4602      	mov	r2, r0
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	1ad3      	subs	r3, r2, r3
 8002646:	f241 3288 	movw	r2, #5000	; 0x1388
 800264a:	4293      	cmp	r3, r2
 800264c:	d901      	bls.n	8002652 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800264e:	2303      	movs	r3, #3
 8002650:	e04f      	b.n	80026f2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002652:	4b2b      	ldr	r3, [pc, #172]	; (8002700 <HAL_RCC_ClockConfig+0x1bc>)
 8002654:	689b      	ldr	r3, [r3, #8]
 8002656:	f003 020c 	and.w	r2, r3, #12
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	685b      	ldr	r3, [r3, #4]
 800265e:	009b      	lsls	r3, r3, #2
 8002660:	429a      	cmp	r2, r3
 8002662:	d1eb      	bne.n	800263c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002664:	4b25      	ldr	r3, [pc, #148]	; (80026fc <HAL_RCC_ClockConfig+0x1b8>)
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f003 030f 	and.w	r3, r3, #15
 800266c:	683a      	ldr	r2, [r7, #0]
 800266e:	429a      	cmp	r2, r3
 8002670:	d20c      	bcs.n	800268c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002672:	4b22      	ldr	r3, [pc, #136]	; (80026fc <HAL_RCC_ClockConfig+0x1b8>)
 8002674:	683a      	ldr	r2, [r7, #0]
 8002676:	b2d2      	uxtb	r2, r2
 8002678:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800267a:	4b20      	ldr	r3, [pc, #128]	; (80026fc <HAL_RCC_ClockConfig+0x1b8>)
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f003 030f 	and.w	r3, r3, #15
 8002682:	683a      	ldr	r2, [r7, #0]
 8002684:	429a      	cmp	r2, r3
 8002686:	d001      	beq.n	800268c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002688:	2301      	movs	r3, #1
 800268a:	e032      	b.n	80026f2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f003 0304 	and.w	r3, r3, #4
 8002694:	2b00      	cmp	r3, #0
 8002696:	d008      	beq.n	80026aa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002698:	4b19      	ldr	r3, [pc, #100]	; (8002700 <HAL_RCC_ClockConfig+0x1bc>)
 800269a:	689b      	ldr	r3, [r3, #8]
 800269c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	68db      	ldr	r3, [r3, #12]
 80026a4:	4916      	ldr	r1, [pc, #88]	; (8002700 <HAL_RCC_ClockConfig+0x1bc>)
 80026a6:	4313      	orrs	r3, r2
 80026a8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f003 0308 	and.w	r3, r3, #8
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d009      	beq.n	80026ca <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80026b6:	4b12      	ldr	r3, [pc, #72]	; (8002700 <HAL_RCC_ClockConfig+0x1bc>)
 80026b8:	689b      	ldr	r3, [r3, #8]
 80026ba:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	691b      	ldr	r3, [r3, #16]
 80026c2:	00db      	lsls	r3, r3, #3
 80026c4:	490e      	ldr	r1, [pc, #56]	; (8002700 <HAL_RCC_ClockConfig+0x1bc>)
 80026c6:	4313      	orrs	r3, r2
 80026c8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80026ca:	f000 f821 	bl	8002710 <HAL_RCC_GetSysClockFreq>
 80026ce:	4601      	mov	r1, r0
 80026d0:	4b0b      	ldr	r3, [pc, #44]	; (8002700 <HAL_RCC_ClockConfig+0x1bc>)
 80026d2:	689b      	ldr	r3, [r3, #8]
 80026d4:	091b      	lsrs	r3, r3, #4
 80026d6:	f003 030f 	and.w	r3, r3, #15
 80026da:	4a0a      	ldr	r2, [pc, #40]	; (8002704 <HAL_RCC_ClockConfig+0x1c0>)
 80026dc:	5cd3      	ldrb	r3, [r2, r3]
 80026de:	fa21 f303 	lsr.w	r3, r1, r3
 80026e2:	4a09      	ldr	r2, [pc, #36]	; (8002708 <HAL_RCC_ClockConfig+0x1c4>)
 80026e4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80026e6:	4b09      	ldr	r3, [pc, #36]	; (800270c <HAL_RCC_ClockConfig+0x1c8>)
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	4618      	mov	r0, r3
 80026ec:	f7ff f96a 	bl	80019c4 <HAL_InitTick>

  return HAL_OK;
 80026f0:	2300      	movs	r3, #0
}
 80026f2:	4618      	mov	r0, r3
 80026f4:	3710      	adds	r7, #16
 80026f6:	46bd      	mov	sp, r7
 80026f8:	bd80      	pop	{r7, pc}
 80026fa:	bf00      	nop
 80026fc:	40023c00 	.word	0x40023c00
 8002700:	40023800 	.word	0x40023800
 8002704:	080052dc 	.word	0x080052dc
 8002708:	20000000 	.word	0x20000000
 800270c:	20000004 	.word	0x20000004

08002710 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002710:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002712:	b085      	sub	sp, #20
 8002714:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002716:	2300      	movs	r3, #0
 8002718:	607b      	str	r3, [r7, #4]
 800271a:	2300      	movs	r3, #0
 800271c:	60fb      	str	r3, [r7, #12]
 800271e:	2300      	movs	r3, #0
 8002720:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002722:	2300      	movs	r3, #0
 8002724:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002726:	4b63      	ldr	r3, [pc, #396]	; (80028b4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002728:	689b      	ldr	r3, [r3, #8]
 800272a:	f003 030c 	and.w	r3, r3, #12
 800272e:	2b04      	cmp	r3, #4
 8002730:	d007      	beq.n	8002742 <HAL_RCC_GetSysClockFreq+0x32>
 8002732:	2b08      	cmp	r3, #8
 8002734:	d008      	beq.n	8002748 <HAL_RCC_GetSysClockFreq+0x38>
 8002736:	2b00      	cmp	r3, #0
 8002738:	f040 80b4 	bne.w	80028a4 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800273c:	4b5e      	ldr	r3, [pc, #376]	; (80028b8 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800273e:	60bb      	str	r3, [r7, #8]
       break;
 8002740:	e0b3      	b.n	80028aa <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002742:	4b5e      	ldr	r3, [pc, #376]	; (80028bc <HAL_RCC_GetSysClockFreq+0x1ac>)
 8002744:	60bb      	str	r3, [r7, #8]
      break;
 8002746:	e0b0      	b.n	80028aa <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002748:	4b5a      	ldr	r3, [pc, #360]	; (80028b4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800274a:	685b      	ldr	r3, [r3, #4]
 800274c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002750:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002752:	4b58      	ldr	r3, [pc, #352]	; (80028b4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002754:	685b      	ldr	r3, [r3, #4]
 8002756:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800275a:	2b00      	cmp	r3, #0
 800275c:	d04a      	beq.n	80027f4 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800275e:	4b55      	ldr	r3, [pc, #340]	; (80028b4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002760:	685b      	ldr	r3, [r3, #4]
 8002762:	099b      	lsrs	r3, r3, #6
 8002764:	f04f 0400 	mov.w	r4, #0
 8002768:	f240 11ff 	movw	r1, #511	; 0x1ff
 800276c:	f04f 0200 	mov.w	r2, #0
 8002770:	ea03 0501 	and.w	r5, r3, r1
 8002774:	ea04 0602 	and.w	r6, r4, r2
 8002778:	4629      	mov	r1, r5
 800277a:	4632      	mov	r2, r6
 800277c:	f04f 0300 	mov.w	r3, #0
 8002780:	f04f 0400 	mov.w	r4, #0
 8002784:	0154      	lsls	r4, r2, #5
 8002786:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800278a:	014b      	lsls	r3, r1, #5
 800278c:	4619      	mov	r1, r3
 800278e:	4622      	mov	r2, r4
 8002790:	1b49      	subs	r1, r1, r5
 8002792:	eb62 0206 	sbc.w	r2, r2, r6
 8002796:	f04f 0300 	mov.w	r3, #0
 800279a:	f04f 0400 	mov.w	r4, #0
 800279e:	0194      	lsls	r4, r2, #6
 80027a0:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80027a4:	018b      	lsls	r3, r1, #6
 80027a6:	1a5b      	subs	r3, r3, r1
 80027a8:	eb64 0402 	sbc.w	r4, r4, r2
 80027ac:	f04f 0100 	mov.w	r1, #0
 80027b0:	f04f 0200 	mov.w	r2, #0
 80027b4:	00e2      	lsls	r2, r4, #3
 80027b6:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80027ba:	00d9      	lsls	r1, r3, #3
 80027bc:	460b      	mov	r3, r1
 80027be:	4614      	mov	r4, r2
 80027c0:	195b      	adds	r3, r3, r5
 80027c2:	eb44 0406 	adc.w	r4, r4, r6
 80027c6:	f04f 0100 	mov.w	r1, #0
 80027ca:	f04f 0200 	mov.w	r2, #0
 80027ce:	0262      	lsls	r2, r4, #9
 80027d0:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80027d4:	0259      	lsls	r1, r3, #9
 80027d6:	460b      	mov	r3, r1
 80027d8:	4614      	mov	r4, r2
 80027da:	4618      	mov	r0, r3
 80027dc:	4621      	mov	r1, r4
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	f04f 0400 	mov.w	r4, #0
 80027e4:	461a      	mov	r2, r3
 80027e6:	4623      	mov	r3, r4
 80027e8:	f7fe f9d6 	bl	8000b98 <__aeabi_uldivmod>
 80027ec:	4603      	mov	r3, r0
 80027ee:	460c      	mov	r4, r1
 80027f0:	60fb      	str	r3, [r7, #12]
 80027f2:	e049      	b.n	8002888 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80027f4:	4b2f      	ldr	r3, [pc, #188]	; (80028b4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80027f6:	685b      	ldr	r3, [r3, #4]
 80027f8:	099b      	lsrs	r3, r3, #6
 80027fa:	f04f 0400 	mov.w	r4, #0
 80027fe:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002802:	f04f 0200 	mov.w	r2, #0
 8002806:	ea03 0501 	and.w	r5, r3, r1
 800280a:	ea04 0602 	and.w	r6, r4, r2
 800280e:	4629      	mov	r1, r5
 8002810:	4632      	mov	r2, r6
 8002812:	f04f 0300 	mov.w	r3, #0
 8002816:	f04f 0400 	mov.w	r4, #0
 800281a:	0154      	lsls	r4, r2, #5
 800281c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002820:	014b      	lsls	r3, r1, #5
 8002822:	4619      	mov	r1, r3
 8002824:	4622      	mov	r2, r4
 8002826:	1b49      	subs	r1, r1, r5
 8002828:	eb62 0206 	sbc.w	r2, r2, r6
 800282c:	f04f 0300 	mov.w	r3, #0
 8002830:	f04f 0400 	mov.w	r4, #0
 8002834:	0194      	lsls	r4, r2, #6
 8002836:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800283a:	018b      	lsls	r3, r1, #6
 800283c:	1a5b      	subs	r3, r3, r1
 800283e:	eb64 0402 	sbc.w	r4, r4, r2
 8002842:	f04f 0100 	mov.w	r1, #0
 8002846:	f04f 0200 	mov.w	r2, #0
 800284a:	00e2      	lsls	r2, r4, #3
 800284c:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002850:	00d9      	lsls	r1, r3, #3
 8002852:	460b      	mov	r3, r1
 8002854:	4614      	mov	r4, r2
 8002856:	195b      	adds	r3, r3, r5
 8002858:	eb44 0406 	adc.w	r4, r4, r6
 800285c:	f04f 0100 	mov.w	r1, #0
 8002860:	f04f 0200 	mov.w	r2, #0
 8002864:	02a2      	lsls	r2, r4, #10
 8002866:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800286a:	0299      	lsls	r1, r3, #10
 800286c:	460b      	mov	r3, r1
 800286e:	4614      	mov	r4, r2
 8002870:	4618      	mov	r0, r3
 8002872:	4621      	mov	r1, r4
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	f04f 0400 	mov.w	r4, #0
 800287a:	461a      	mov	r2, r3
 800287c:	4623      	mov	r3, r4
 800287e:	f7fe f98b 	bl	8000b98 <__aeabi_uldivmod>
 8002882:	4603      	mov	r3, r0
 8002884:	460c      	mov	r4, r1
 8002886:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002888:	4b0a      	ldr	r3, [pc, #40]	; (80028b4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800288a:	685b      	ldr	r3, [r3, #4]
 800288c:	0c1b      	lsrs	r3, r3, #16
 800288e:	f003 0303 	and.w	r3, r3, #3
 8002892:	3301      	adds	r3, #1
 8002894:	005b      	lsls	r3, r3, #1
 8002896:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002898:	68fa      	ldr	r2, [r7, #12]
 800289a:	683b      	ldr	r3, [r7, #0]
 800289c:	fbb2 f3f3 	udiv	r3, r2, r3
 80028a0:	60bb      	str	r3, [r7, #8]
      break;
 80028a2:	e002      	b.n	80028aa <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80028a4:	4b04      	ldr	r3, [pc, #16]	; (80028b8 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80028a6:	60bb      	str	r3, [r7, #8]
      break;
 80028a8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80028aa:	68bb      	ldr	r3, [r7, #8]
}
 80028ac:	4618      	mov	r0, r3
 80028ae:	3714      	adds	r7, #20
 80028b0:	46bd      	mov	sp, r7
 80028b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80028b4:	40023800 	.word	0x40023800
 80028b8:	00f42400 	.word	0x00f42400
 80028bc:	007a1200 	.word	0x007a1200

080028c0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80028c0:	b480      	push	{r7}
 80028c2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80028c4:	4b03      	ldr	r3, [pc, #12]	; (80028d4 <HAL_RCC_GetHCLKFreq+0x14>)
 80028c6:	681b      	ldr	r3, [r3, #0]
}
 80028c8:	4618      	mov	r0, r3
 80028ca:	46bd      	mov	sp, r7
 80028cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d0:	4770      	bx	lr
 80028d2:	bf00      	nop
 80028d4:	20000000 	.word	0x20000000

080028d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80028dc:	f7ff fff0 	bl	80028c0 <HAL_RCC_GetHCLKFreq>
 80028e0:	4601      	mov	r1, r0
 80028e2:	4b05      	ldr	r3, [pc, #20]	; (80028f8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80028e4:	689b      	ldr	r3, [r3, #8]
 80028e6:	0a9b      	lsrs	r3, r3, #10
 80028e8:	f003 0307 	and.w	r3, r3, #7
 80028ec:	4a03      	ldr	r2, [pc, #12]	; (80028fc <HAL_RCC_GetPCLK1Freq+0x24>)
 80028ee:	5cd3      	ldrb	r3, [r2, r3]
 80028f0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80028f4:	4618      	mov	r0, r3
 80028f6:	bd80      	pop	{r7, pc}
 80028f8:	40023800 	.word	0x40023800
 80028fc:	080052ec 	.word	0x080052ec

08002900 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002900:	b580      	push	{r7, lr}
 8002902:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002904:	f7ff ffdc 	bl	80028c0 <HAL_RCC_GetHCLKFreq>
 8002908:	4601      	mov	r1, r0
 800290a:	4b05      	ldr	r3, [pc, #20]	; (8002920 <HAL_RCC_GetPCLK2Freq+0x20>)
 800290c:	689b      	ldr	r3, [r3, #8]
 800290e:	0b5b      	lsrs	r3, r3, #13
 8002910:	f003 0307 	and.w	r3, r3, #7
 8002914:	4a03      	ldr	r2, [pc, #12]	; (8002924 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002916:	5cd3      	ldrb	r3, [r2, r3]
 8002918:	fa21 f303 	lsr.w	r3, r1, r3
}
 800291c:	4618      	mov	r0, r3
 800291e:	bd80      	pop	{r7, pc}
 8002920:	40023800 	.word	0x40023800
 8002924:	080052ec 	.word	0x080052ec

08002928 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002928:	b580      	push	{r7, lr}
 800292a:	b082      	sub	sp, #8
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	2b00      	cmp	r3, #0
 8002934:	d101      	bne.n	800293a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002936:	2301      	movs	r3, #1
 8002938:	e01d      	b.n	8002976 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002940:	b2db      	uxtb	r3, r3
 8002942:	2b00      	cmp	r3, #0
 8002944:	d106      	bne.n	8002954 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	2200      	movs	r2, #0
 800294a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800294e:	6878      	ldr	r0, [r7, #4]
 8002950:	f7fe ff22 	bl	8001798 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	2202      	movs	r2, #2
 8002958:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681a      	ldr	r2, [r3, #0]
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	3304      	adds	r3, #4
 8002964:	4619      	mov	r1, r3
 8002966:	4610      	mov	r0, r2
 8002968:	f000 f8d0 	bl	8002b0c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	2201      	movs	r2, #1
 8002970:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002974:	2300      	movs	r3, #0
}
 8002976:	4618      	mov	r0, r3
 8002978:	3708      	adds	r7, #8
 800297a:	46bd      	mov	sp, r7
 800297c:	bd80      	pop	{r7, pc}
	...

08002980 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002980:	b580      	push	{r7, lr}
 8002982:	b084      	sub	sp, #16
 8002984:	af00      	add	r7, sp, #0
 8002986:	60f8      	str	r0, [r7, #12]
 8002988:	60b9      	str	r1, [r7, #8]
 800298a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002992:	2b01      	cmp	r3, #1
 8002994:	d101      	bne.n	800299a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8002996:	2302      	movs	r3, #2
 8002998:	e0b4      	b.n	8002b04 <HAL_TIM_PWM_ConfigChannel+0x184>
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	2201      	movs	r2, #1
 800299e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	2202      	movs	r2, #2
 80029a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	2b0c      	cmp	r3, #12
 80029ae:	f200 809f 	bhi.w	8002af0 <HAL_TIM_PWM_ConfigChannel+0x170>
 80029b2:	a201      	add	r2, pc, #4	; (adr r2, 80029b8 <HAL_TIM_PWM_ConfigChannel+0x38>)
 80029b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029b8:	080029ed 	.word	0x080029ed
 80029bc:	08002af1 	.word	0x08002af1
 80029c0:	08002af1 	.word	0x08002af1
 80029c4:	08002af1 	.word	0x08002af1
 80029c8:	08002a2d 	.word	0x08002a2d
 80029cc:	08002af1 	.word	0x08002af1
 80029d0:	08002af1 	.word	0x08002af1
 80029d4:	08002af1 	.word	0x08002af1
 80029d8:	08002a6f 	.word	0x08002a6f
 80029dc:	08002af1 	.word	0x08002af1
 80029e0:	08002af1 	.word	0x08002af1
 80029e4:	08002af1 	.word	0x08002af1
 80029e8:	08002aaf 	.word	0x08002aaf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	68b9      	ldr	r1, [r7, #8]
 80029f2:	4618      	mov	r0, r3
 80029f4:	f000 f90a 	bl	8002c0c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	699a      	ldr	r2, [r3, #24]
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f042 0208 	orr.w	r2, r2, #8
 8002a06:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	699a      	ldr	r2, [r3, #24]
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f022 0204 	bic.w	r2, r2, #4
 8002a16:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	6999      	ldr	r1, [r3, #24]
 8002a1e:	68bb      	ldr	r3, [r7, #8]
 8002a20:	691a      	ldr	r2, [r3, #16]
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	430a      	orrs	r2, r1
 8002a28:	619a      	str	r2, [r3, #24]
      break;
 8002a2a:	e062      	b.n	8002af2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	68b9      	ldr	r1, [r7, #8]
 8002a32:	4618      	mov	r0, r3
 8002a34:	f000 f950 	bl	8002cd8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	699a      	ldr	r2, [r3, #24]
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002a46:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	699a      	ldr	r2, [r3, #24]
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002a56:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	6999      	ldr	r1, [r3, #24]
 8002a5e:	68bb      	ldr	r3, [r7, #8]
 8002a60:	691b      	ldr	r3, [r3, #16]
 8002a62:	021a      	lsls	r2, r3, #8
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	430a      	orrs	r2, r1
 8002a6a:	619a      	str	r2, [r3, #24]
      break;
 8002a6c:	e041      	b.n	8002af2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	68b9      	ldr	r1, [r7, #8]
 8002a74:	4618      	mov	r0, r3
 8002a76:	f000 f99b 	bl	8002db0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	69da      	ldr	r2, [r3, #28]
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f042 0208 	orr.w	r2, r2, #8
 8002a88:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	69da      	ldr	r2, [r3, #28]
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f022 0204 	bic.w	r2, r2, #4
 8002a98:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	69d9      	ldr	r1, [r3, #28]
 8002aa0:	68bb      	ldr	r3, [r7, #8]
 8002aa2:	691a      	ldr	r2, [r3, #16]
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	430a      	orrs	r2, r1
 8002aaa:	61da      	str	r2, [r3, #28]
      break;
 8002aac:	e021      	b.n	8002af2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	68b9      	ldr	r1, [r7, #8]
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	f000 f9e5 	bl	8002e84 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	69da      	ldr	r2, [r3, #28]
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002ac8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	69da      	ldr	r2, [r3, #28]
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ad8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	69d9      	ldr	r1, [r3, #28]
 8002ae0:	68bb      	ldr	r3, [r7, #8]
 8002ae2:	691b      	ldr	r3, [r3, #16]
 8002ae4:	021a      	lsls	r2, r3, #8
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	430a      	orrs	r2, r1
 8002aec:	61da      	str	r2, [r3, #28]
      break;
 8002aee:	e000      	b.n	8002af2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8002af0:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	2201      	movs	r2, #1
 8002af6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	2200      	movs	r2, #0
 8002afe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002b02:	2300      	movs	r3, #0
}
 8002b04:	4618      	mov	r0, r3
 8002b06:	3710      	adds	r7, #16
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	bd80      	pop	{r7, pc}

08002b0c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002b0c:	b480      	push	{r7}
 8002b0e:	b085      	sub	sp, #20
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	6078      	str	r0, [r7, #4]
 8002b14:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	4a34      	ldr	r2, [pc, #208]	; (8002bf0 <TIM_Base_SetConfig+0xe4>)
 8002b20:	4293      	cmp	r3, r2
 8002b22:	d00f      	beq.n	8002b44 <TIM_Base_SetConfig+0x38>
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b2a:	d00b      	beq.n	8002b44 <TIM_Base_SetConfig+0x38>
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	4a31      	ldr	r2, [pc, #196]	; (8002bf4 <TIM_Base_SetConfig+0xe8>)
 8002b30:	4293      	cmp	r3, r2
 8002b32:	d007      	beq.n	8002b44 <TIM_Base_SetConfig+0x38>
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	4a30      	ldr	r2, [pc, #192]	; (8002bf8 <TIM_Base_SetConfig+0xec>)
 8002b38:	4293      	cmp	r3, r2
 8002b3a:	d003      	beq.n	8002b44 <TIM_Base_SetConfig+0x38>
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	4a2f      	ldr	r2, [pc, #188]	; (8002bfc <TIM_Base_SetConfig+0xf0>)
 8002b40:	4293      	cmp	r3, r2
 8002b42:	d108      	bne.n	8002b56 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b4a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002b4c:	683b      	ldr	r3, [r7, #0]
 8002b4e:	685b      	ldr	r3, [r3, #4]
 8002b50:	68fa      	ldr	r2, [r7, #12]
 8002b52:	4313      	orrs	r3, r2
 8002b54:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	4a25      	ldr	r2, [pc, #148]	; (8002bf0 <TIM_Base_SetConfig+0xe4>)
 8002b5a:	4293      	cmp	r3, r2
 8002b5c:	d01b      	beq.n	8002b96 <TIM_Base_SetConfig+0x8a>
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b64:	d017      	beq.n	8002b96 <TIM_Base_SetConfig+0x8a>
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	4a22      	ldr	r2, [pc, #136]	; (8002bf4 <TIM_Base_SetConfig+0xe8>)
 8002b6a:	4293      	cmp	r3, r2
 8002b6c:	d013      	beq.n	8002b96 <TIM_Base_SetConfig+0x8a>
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	4a21      	ldr	r2, [pc, #132]	; (8002bf8 <TIM_Base_SetConfig+0xec>)
 8002b72:	4293      	cmp	r3, r2
 8002b74:	d00f      	beq.n	8002b96 <TIM_Base_SetConfig+0x8a>
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	4a20      	ldr	r2, [pc, #128]	; (8002bfc <TIM_Base_SetConfig+0xf0>)
 8002b7a:	4293      	cmp	r3, r2
 8002b7c:	d00b      	beq.n	8002b96 <TIM_Base_SetConfig+0x8a>
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	4a1f      	ldr	r2, [pc, #124]	; (8002c00 <TIM_Base_SetConfig+0xf4>)
 8002b82:	4293      	cmp	r3, r2
 8002b84:	d007      	beq.n	8002b96 <TIM_Base_SetConfig+0x8a>
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	4a1e      	ldr	r2, [pc, #120]	; (8002c04 <TIM_Base_SetConfig+0xf8>)
 8002b8a:	4293      	cmp	r3, r2
 8002b8c:	d003      	beq.n	8002b96 <TIM_Base_SetConfig+0x8a>
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	4a1d      	ldr	r2, [pc, #116]	; (8002c08 <TIM_Base_SetConfig+0xfc>)
 8002b92:	4293      	cmp	r3, r2
 8002b94:	d108      	bne.n	8002ba8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b9c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002b9e:	683b      	ldr	r3, [r7, #0]
 8002ba0:	68db      	ldr	r3, [r3, #12]
 8002ba2:	68fa      	ldr	r2, [r7, #12]
 8002ba4:	4313      	orrs	r3, r2
 8002ba6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002bae:	683b      	ldr	r3, [r7, #0]
 8002bb0:	695b      	ldr	r3, [r3, #20]
 8002bb2:	4313      	orrs	r3, r2
 8002bb4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	68fa      	ldr	r2, [r7, #12]
 8002bba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002bbc:	683b      	ldr	r3, [r7, #0]
 8002bbe:	689a      	ldr	r2, [r3, #8]
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002bc4:	683b      	ldr	r3, [r7, #0]
 8002bc6:	681a      	ldr	r2, [r3, #0]
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	4a08      	ldr	r2, [pc, #32]	; (8002bf0 <TIM_Base_SetConfig+0xe4>)
 8002bd0:	4293      	cmp	r3, r2
 8002bd2:	d103      	bne.n	8002bdc <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002bd4:	683b      	ldr	r3, [r7, #0]
 8002bd6:	691a      	ldr	r2, [r3, #16]
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	2201      	movs	r2, #1
 8002be0:	615a      	str	r2, [r3, #20]
}
 8002be2:	bf00      	nop
 8002be4:	3714      	adds	r7, #20
 8002be6:	46bd      	mov	sp, r7
 8002be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bec:	4770      	bx	lr
 8002bee:	bf00      	nop
 8002bf0:	40010000 	.word	0x40010000
 8002bf4:	40000400 	.word	0x40000400
 8002bf8:	40000800 	.word	0x40000800
 8002bfc:	40000c00 	.word	0x40000c00
 8002c00:	40014000 	.word	0x40014000
 8002c04:	40014400 	.word	0x40014400
 8002c08:	40014800 	.word	0x40014800

08002c0c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002c0c:	b480      	push	{r7}
 8002c0e:	b087      	sub	sp, #28
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]
 8002c14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	6a1b      	ldr	r3, [r3, #32]
 8002c1a:	f023 0201 	bic.w	r2, r3, #1
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	6a1b      	ldr	r3, [r3, #32]
 8002c26:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	685b      	ldr	r3, [r3, #4]
 8002c2c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	699b      	ldr	r3, [r3, #24]
 8002c32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c3a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	f023 0303 	bic.w	r3, r3, #3
 8002c42:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002c44:	683b      	ldr	r3, [r7, #0]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	68fa      	ldr	r2, [r7, #12]
 8002c4a:	4313      	orrs	r3, r2
 8002c4c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002c4e:	697b      	ldr	r3, [r7, #20]
 8002c50:	f023 0302 	bic.w	r3, r3, #2
 8002c54:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002c56:	683b      	ldr	r3, [r7, #0]
 8002c58:	689b      	ldr	r3, [r3, #8]
 8002c5a:	697a      	ldr	r2, [r7, #20]
 8002c5c:	4313      	orrs	r3, r2
 8002c5e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	4a1c      	ldr	r2, [pc, #112]	; (8002cd4 <TIM_OC1_SetConfig+0xc8>)
 8002c64:	4293      	cmp	r3, r2
 8002c66:	d10c      	bne.n	8002c82 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002c68:	697b      	ldr	r3, [r7, #20]
 8002c6a:	f023 0308 	bic.w	r3, r3, #8
 8002c6e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002c70:	683b      	ldr	r3, [r7, #0]
 8002c72:	68db      	ldr	r3, [r3, #12]
 8002c74:	697a      	ldr	r2, [r7, #20]
 8002c76:	4313      	orrs	r3, r2
 8002c78:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002c7a:	697b      	ldr	r3, [r7, #20]
 8002c7c:	f023 0304 	bic.w	r3, r3, #4
 8002c80:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	4a13      	ldr	r2, [pc, #76]	; (8002cd4 <TIM_OC1_SetConfig+0xc8>)
 8002c86:	4293      	cmp	r3, r2
 8002c88:	d111      	bne.n	8002cae <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002c8a:	693b      	ldr	r3, [r7, #16]
 8002c8c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002c90:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002c92:	693b      	ldr	r3, [r7, #16]
 8002c94:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002c98:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002c9a:	683b      	ldr	r3, [r7, #0]
 8002c9c:	695b      	ldr	r3, [r3, #20]
 8002c9e:	693a      	ldr	r2, [r7, #16]
 8002ca0:	4313      	orrs	r3, r2
 8002ca2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002ca4:	683b      	ldr	r3, [r7, #0]
 8002ca6:	699b      	ldr	r3, [r3, #24]
 8002ca8:	693a      	ldr	r2, [r7, #16]
 8002caa:	4313      	orrs	r3, r2
 8002cac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	693a      	ldr	r2, [r7, #16]
 8002cb2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	68fa      	ldr	r2, [r7, #12]
 8002cb8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002cba:	683b      	ldr	r3, [r7, #0]
 8002cbc:	685a      	ldr	r2, [r3, #4]
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	697a      	ldr	r2, [r7, #20]
 8002cc6:	621a      	str	r2, [r3, #32]
}
 8002cc8:	bf00      	nop
 8002cca:	371c      	adds	r7, #28
 8002ccc:	46bd      	mov	sp, r7
 8002cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd2:	4770      	bx	lr
 8002cd4:	40010000 	.word	0x40010000

08002cd8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002cd8:	b480      	push	{r7}
 8002cda:	b087      	sub	sp, #28
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	6078      	str	r0, [r7, #4]
 8002ce0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6a1b      	ldr	r3, [r3, #32]
 8002ce6:	f023 0210 	bic.w	r2, r3, #16
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	6a1b      	ldr	r3, [r3, #32]
 8002cf2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	685b      	ldr	r3, [r3, #4]
 8002cf8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	699b      	ldr	r3, [r3, #24]
 8002cfe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002d06:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d0e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002d10:	683b      	ldr	r3, [r7, #0]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	021b      	lsls	r3, r3, #8
 8002d16:	68fa      	ldr	r2, [r7, #12]
 8002d18:	4313      	orrs	r3, r2
 8002d1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002d1c:	697b      	ldr	r3, [r7, #20]
 8002d1e:	f023 0320 	bic.w	r3, r3, #32
 8002d22:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002d24:	683b      	ldr	r3, [r7, #0]
 8002d26:	689b      	ldr	r3, [r3, #8]
 8002d28:	011b      	lsls	r3, r3, #4
 8002d2a:	697a      	ldr	r2, [r7, #20]
 8002d2c:	4313      	orrs	r3, r2
 8002d2e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	4a1e      	ldr	r2, [pc, #120]	; (8002dac <TIM_OC2_SetConfig+0xd4>)
 8002d34:	4293      	cmp	r3, r2
 8002d36:	d10d      	bne.n	8002d54 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002d38:	697b      	ldr	r3, [r7, #20]
 8002d3a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002d3e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	68db      	ldr	r3, [r3, #12]
 8002d44:	011b      	lsls	r3, r3, #4
 8002d46:	697a      	ldr	r2, [r7, #20]
 8002d48:	4313      	orrs	r3, r2
 8002d4a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002d4c:	697b      	ldr	r3, [r7, #20]
 8002d4e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002d52:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	4a15      	ldr	r2, [pc, #84]	; (8002dac <TIM_OC2_SetConfig+0xd4>)
 8002d58:	4293      	cmp	r3, r2
 8002d5a:	d113      	bne.n	8002d84 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002d5c:	693b      	ldr	r3, [r7, #16]
 8002d5e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002d62:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002d64:	693b      	ldr	r3, [r7, #16]
 8002d66:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002d6a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002d6c:	683b      	ldr	r3, [r7, #0]
 8002d6e:	695b      	ldr	r3, [r3, #20]
 8002d70:	009b      	lsls	r3, r3, #2
 8002d72:	693a      	ldr	r2, [r7, #16]
 8002d74:	4313      	orrs	r3, r2
 8002d76:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002d78:	683b      	ldr	r3, [r7, #0]
 8002d7a:	699b      	ldr	r3, [r3, #24]
 8002d7c:	009b      	lsls	r3, r3, #2
 8002d7e:	693a      	ldr	r2, [r7, #16]
 8002d80:	4313      	orrs	r3, r2
 8002d82:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	693a      	ldr	r2, [r7, #16]
 8002d88:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	68fa      	ldr	r2, [r7, #12]
 8002d8e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002d90:	683b      	ldr	r3, [r7, #0]
 8002d92:	685a      	ldr	r2, [r3, #4]
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	697a      	ldr	r2, [r7, #20]
 8002d9c:	621a      	str	r2, [r3, #32]
}
 8002d9e:	bf00      	nop
 8002da0:	371c      	adds	r7, #28
 8002da2:	46bd      	mov	sp, r7
 8002da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da8:	4770      	bx	lr
 8002daa:	bf00      	nop
 8002dac:	40010000 	.word	0x40010000

08002db0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002db0:	b480      	push	{r7}
 8002db2:	b087      	sub	sp, #28
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]
 8002db8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	6a1b      	ldr	r3, [r3, #32]
 8002dbe:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	6a1b      	ldr	r3, [r3, #32]
 8002dca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	685b      	ldr	r3, [r3, #4]
 8002dd0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	69db      	ldr	r3, [r3, #28]
 8002dd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002dde:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	f023 0303 	bic.w	r3, r3, #3
 8002de6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002de8:	683b      	ldr	r3, [r7, #0]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	68fa      	ldr	r2, [r7, #12]
 8002dee:	4313      	orrs	r3, r2
 8002df0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002df2:	697b      	ldr	r3, [r7, #20]
 8002df4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002df8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002dfa:	683b      	ldr	r3, [r7, #0]
 8002dfc:	689b      	ldr	r3, [r3, #8]
 8002dfe:	021b      	lsls	r3, r3, #8
 8002e00:	697a      	ldr	r2, [r7, #20]
 8002e02:	4313      	orrs	r3, r2
 8002e04:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	4a1d      	ldr	r2, [pc, #116]	; (8002e80 <TIM_OC3_SetConfig+0xd0>)
 8002e0a:	4293      	cmp	r3, r2
 8002e0c:	d10d      	bne.n	8002e2a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002e0e:	697b      	ldr	r3, [r7, #20]
 8002e10:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002e14:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002e16:	683b      	ldr	r3, [r7, #0]
 8002e18:	68db      	ldr	r3, [r3, #12]
 8002e1a:	021b      	lsls	r3, r3, #8
 8002e1c:	697a      	ldr	r2, [r7, #20]
 8002e1e:	4313      	orrs	r3, r2
 8002e20:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002e22:	697b      	ldr	r3, [r7, #20]
 8002e24:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002e28:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	4a14      	ldr	r2, [pc, #80]	; (8002e80 <TIM_OC3_SetConfig+0xd0>)
 8002e2e:	4293      	cmp	r3, r2
 8002e30:	d113      	bne.n	8002e5a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002e32:	693b      	ldr	r3, [r7, #16]
 8002e34:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002e38:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002e3a:	693b      	ldr	r3, [r7, #16]
 8002e3c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002e40:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002e42:	683b      	ldr	r3, [r7, #0]
 8002e44:	695b      	ldr	r3, [r3, #20]
 8002e46:	011b      	lsls	r3, r3, #4
 8002e48:	693a      	ldr	r2, [r7, #16]
 8002e4a:	4313      	orrs	r3, r2
 8002e4c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002e4e:	683b      	ldr	r3, [r7, #0]
 8002e50:	699b      	ldr	r3, [r3, #24]
 8002e52:	011b      	lsls	r3, r3, #4
 8002e54:	693a      	ldr	r2, [r7, #16]
 8002e56:	4313      	orrs	r3, r2
 8002e58:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	693a      	ldr	r2, [r7, #16]
 8002e5e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	68fa      	ldr	r2, [r7, #12]
 8002e64:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002e66:	683b      	ldr	r3, [r7, #0]
 8002e68:	685a      	ldr	r2, [r3, #4]
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	697a      	ldr	r2, [r7, #20]
 8002e72:	621a      	str	r2, [r3, #32]
}
 8002e74:	bf00      	nop
 8002e76:	371c      	adds	r7, #28
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7e:	4770      	bx	lr
 8002e80:	40010000 	.word	0x40010000

08002e84 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002e84:	b480      	push	{r7}
 8002e86:	b087      	sub	sp, #28
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
 8002e8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	6a1b      	ldr	r3, [r3, #32]
 8002e92:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	6a1b      	ldr	r3, [r3, #32]
 8002e9e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	685b      	ldr	r3, [r3, #4]
 8002ea4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	69db      	ldr	r3, [r3, #28]
 8002eaa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002eb2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002eba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002ebc:	683b      	ldr	r3, [r7, #0]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	021b      	lsls	r3, r3, #8
 8002ec2:	68fa      	ldr	r2, [r7, #12]
 8002ec4:	4313      	orrs	r3, r2
 8002ec6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002ec8:	693b      	ldr	r3, [r7, #16]
 8002eca:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002ece:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002ed0:	683b      	ldr	r3, [r7, #0]
 8002ed2:	689b      	ldr	r3, [r3, #8]
 8002ed4:	031b      	lsls	r3, r3, #12
 8002ed6:	693a      	ldr	r2, [r7, #16]
 8002ed8:	4313      	orrs	r3, r2
 8002eda:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	4a10      	ldr	r2, [pc, #64]	; (8002f20 <TIM_OC4_SetConfig+0x9c>)
 8002ee0:	4293      	cmp	r3, r2
 8002ee2:	d109      	bne.n	8002ef8 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002ee4:	697b      	ldr	r3, [r7, #20]
 8002ee6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002eea:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002eec:	683b      	ldr	r3, [r7, #0]
 8002eee:	695b      	ldr	r3, [r3, #20]
 8002ef0:	019b      	lsls	r3, r3, #6
 8002ef2:	697a      	ldr	r2, [r7, #20]
 8002ef4:	4313      	orrs	r3, r2
 8002ef6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	697a      	ldr	r2, [r7, #20]
 8002efc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	68fa      	ldr	r2, [r7, #12]
 8002f02:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002f04:	683b      	ldr	r3, [r7, #0]
 8002f06:	685a      	ldr	r2, [r3, #4]
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	693a      	ldr	r2, [r7, #16]
 8002f10:	621a      	str	r2, [r3, #32]
}
 8002f12:	bf00      	nop
 8002f14:	371c      	adds	r7, #28
 8002f16:	46bd      	mov	sp, r7
 8002f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1c:	4770      	bx	lr
 8002f1e:	bf00      	nop
 8002f20:	40010000 	.word	0x40010000

08002f24 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002f24:	b480      	push	{r7}
 8002f26:	b085      	sub	sp, #20
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	6078      	str	r0, [r7, #4]
 8002f2c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f34:	2b01      	cmp	r3, #1
 8002f36:	d101      	bne.n	8002f3c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002f38:	2302      	movs	r3, #2
 8002f3a:	e050      	b.n	8002fde <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	2201      	movs	r2, #1
 8002f40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	2202      	movs	r2, #2
 8002f48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	685b      	ldr	r3, [r3, #4]
 8002f52:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	689b      	ldr	r3, [r3, #8]
 8002f5a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f62:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002f64:	683b      	ldr	r3, [r7, #0]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	68fa      	ldr	r2, [r7, #12]
 8002f6a:	4313      	orrs	r3, r2
 8002f6c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	68fa      	ldr	r2, [r7, #12]
 8002f74:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	4a1c      	ldr	r2, [pc, #112]	; (8002fec <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8002f7c:	4293      	cmp	r3, r2
 8002f7e:	d018      	beq.n	8002fb2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f88:	d013      	beq.n	8002fb2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	4a18      	ldr	r2, [pc, #96]	; (8002ff0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8002f90:	4293      	cmp	r3, r2
 8002f92:	d00e      	beq.n	8002fb2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	4a16      	ldr	r2, [pc, #88]	; (8002ff4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8002f9a:	4293      	cmp	r3, r2
 8002f9c:	d009      	beq.n	8002fb2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	4a15      	ldr	r2, [pc, #84]	; (8002ff8 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8002fa4:	4293      	cmp	r3, r2
 8002fa6:	d004      	beq.n	8002fb2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	4a13      	ldr	r2, [pc, #76]	; (8002ffc <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8002fae:	4293      	cmp	r3, r2
 8002fb0:	d10c      	bne.n	8002fcc <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002fb2:	68bb      	ldr	r3, [r7, #8]
 8002fb4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002fb8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002fba:	683b      	ldr	r3, [r7, #0]
 8002fbc:	685b      	ldr	r3, [r3, #4]
 8002fbe:	68ba      	ldr	r2, [r7, #8]
 8002fc0:	4313      	orrs	r3, r2
 8002fc2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	68ba      	ldr	r2, [r7, #8]
 8002fca:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	2201      	movs	r2, #1
 8002fd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002fdc:	2300      	movs	r3, #0
}
 8002fde:	4618      	mov	r0, r3
 8002fe0:	3714      	adds	r7, #20
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe8:	4770      	bx	lr
 8002fea:	bf00      	nop
 8002fec:	40010000 	.word	0x40010000
 8002ff0:	40000400 	.word	0x40000400
 8002ff4:	40000800 	.word	0x40000800
 8002ff8:	40000c00 	.word	0x40000c00
 8002ffc:	40014000 	.word	0x40014000

08003000 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003000:	b580      	push	{r7, lr}
 8003002:	b082      	sub	sp, #8
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	2b00      	cmp	r3, #0
 800300c:	d101      	bne.n	8003012 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800300e:	2301      	movs	r3, #1
 8003010:	e03f      	b.n	8003092 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003018:	b2db      	uxtb	r3, r3
 800301a:	2b00      	cmp	r3, #0
 800301c:	d106      	bne.n	800302c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	2200      	movs	r2, #0
 8003022:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003026:	6878      	ldr	r0, [r7, #4]
 8003028:	f7fe fc38 	bl	800189c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	2224      	movs	r2, #36	; 0x24
 8003030:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	68da      	ldr	r2, [r3, #12]
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003042:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003044:	6878      	ldr	r0, [r7, #4]
 8003046:	f000 f90b 	bl	8003260 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	691a      	ldr	r2, [r3, #16]
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003058:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	695a      	ldr	r2, [r3, #20]
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003068:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	68da      	ldr	r2, [r3, #12]
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003078:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	2200      	movs	r2, #0
 800307e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	2220      	movs	r2, #32
 8003084:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	2220      	movs	r2, #32
 800308c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8003090:	2300      	movs	r3, #0
}
 8003092:	4618      	mov	r0, r3
 8003094:	3708      	adds	r7, #8
 8003096:	46bd      	mov	sp, r7
 8003098:	bd80      	pop	{r7, pc}

0800309a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800309a:	b580      	push	{r7, lr}
 800309c:	b088      	sub	sp, #32
 800309e:	af02      	add	r7, sp, #8
 80030a0:	60f8      	str	r0, [r7, #12]
 80030a2:	60b9      	str	r1, [r7, #8]
 80030a4:	603b      	str	r3, [r7, #0]
 80030a6:	4613      	mov	r3, r2
 80030a8:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 80030aa:	2300      	movs	r3, #0
 80030ac:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80030b4:	b2db      	uxtb	r3, r3
 80030b6:	2b20      	cmp	r3, #32
 80030b8:	f040 8083 	bne.w	80031c2 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 80030bc:	68bb      	ldr	r3, [r7, #8]
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d002      	beq.n	80030c8 <HAL_UART_Transmit+0x2e>
 80030c2:	88fb      	ldrh	r3, [r7, #6]
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d101      	bne.n	80030cc <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 80030c8:	2301      	movs	r3, #1
 80030ca:	e07b      	b.n	80031c4 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80030d2:	2b01      	cmp	r3, #1
 80030d4:	d101      	bne.n	80030da <HAL_UART_Transmit+0x40>
 80030d6:	2302      	movs	r3, #2
 80030d8:	e074      	b.n	80031c4 <HAL_UART_Transmit+0x12a>
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	2201      	movs	r2, #1
 80030de:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	2200      	movs	r2, #0
 80030e6:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	2221      	movs	r2, #33	; 0x21
 80030ec:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80030f0:	f7fe fcac 	bl	8001a4c <HAL_GetTick>
 80030f4:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	88fa      	ldrh	r2, [r7, #6]
 80030fa:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	88fa      	ldrh	r2, [r7, #6]
 8003100:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	2200      	movs	r2, #0
 8003106:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 800310a:	e042      	b.n	8003192 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003110:	b29b      	uxth	r3, r3
 8003112:	3b01      	subs	r3, #1
 8003114:	b29a      	uxth	r2, r3
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	689b      	ldr	r3, [r3, #8]
 800311e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003122:	d122      	bne.n	800316a <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003124:	683b      	ldr	r3, [r7, #0]
 8003126:	9300      	str	r3, [sp, #0]
 8003128:	697b      	ldr	r3, [r7, #20]
 800312a:	2200      	movs	r2, #0
 800312c:	2180      	movs	r1, #128	; 0x80
 800312e:	68f8      	ldr	r0, [r7, #12]
 8003130:	f000 f84c 	bl	80031cc <UART_WaitOnFlagUntilTimeout>
 8003134:	4603      	mov	r3, r0
 8003136:	2b00      	cmp	r3, #0
 8003138:	d001      	beq.n	800313e <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 800313a:	2303      	movs	r3, #3
 800313c:	e042      	b.n	80031c4 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 800313e:	68bb      	ldr	r3, [r7, #8]
 8003140:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8003142:	693b      	ldr	r3, [r7, #16]
 8003144:	881b      	ldrh	r3, [r3, #0]
 8003146:	461a      	mov	r2, r3
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003150:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	691b      	ldr	r3, [r3, #16]
 8003156:	2b00      	cmp	r3, #0
 8003158:	d103      	bne.n	8003162 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 800315a:	68bb      	ldr	r3, [r7, #8]
 800315c:	3302      	adds	r3, #2
 800315e:	60bb      	str	r3, [r7, #8]
 8003160:	e017      	b.n	8003192 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8003162:	68bb      	ldr	r3, [r7, #8]
 8003164:	3301      	adds	r3, #1
 8003166:	60bb      	str	r3, [r7, #8]
 8003168:	e013      	b.n	8003192 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800316a:	683b      	ldr	r3, [r7, #0]
 800316c:	9300      	str	r3, [sp, #0]
 800316e:	697b      	ldr	r3, [r7, #20]
 8003170:	2200      	movs	r2, #0
 8003172:	2180      	movs	r1, #128	; 0x80
 8003174:	68f8      	ldr	r0, [r7, #12]
 8003176:	f000 f829 	bl	80031cc <UART_WaitOnFlagUntilTimeout>
 800317a:	4603      	mov	r3, r0
 800317c:	2b00      	cmp	r3, #0
 800317e:	d001      	beq.n	8003184 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8003180:	2303      	movs	r3, #3
 8003182:	e01f      	b.n	80031c4 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8003184:	68bb      	ldr	r3, [r7, #8]
 8003186:	1c5a      	adds	r2, r3, #1
 8003188:	60ba      	str	r2, [r7, #8]
 800318a:	781a      	ldrb	r2, [r3, #0]
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003196:	b29b      	uxth	r3, r3
 8003198:	2b00      	cmp	r3, #0
 800319a:	d1b7      	bne.n	800310c <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800319c:	683b      	ldr	r3, [r7, #0]
 800319e:	9300      	str	r3, [sp, #0]
 80031a0:	697b      	ldr	r3, [r7, #20]
 80031a2:	2200      	movs	r2, #0
 80031a4:	2140      	movs	r1, #64	; 0x40
 80031a6:	68f8      	ldr	r0, [r7, #12]
 80031a8:	f000 f810 	bl	80031cc <UART_WaitOnFlagUntilTimeout>
 80031ac:	4603      	mov	r3, r0
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d001      	beq.n	80031b6 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 80031b2:	2303      	movs	r3, #3
 80031b4:	e006      	b.n	80031c4 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	2220      	movs	r2, #32
 80031ba:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 80031be:	2300      	movs	r3, #0
 80031c0:	e000      	b.n	80031c4 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 80031c2:	2302      	movs	r3, #2
  }
}
 80031c4:	4618      	mov	r0, r3
 80031c6:	3718      	adds	r7, #24
 80031c8:	46bd      	mov	sp, r7
 80031ca:	bd80      	pop	{r7, pc}

080031cc <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80031cc:	b580      	push	{r7, lr}
 80031ce:	b084      	sub	sp, #16
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	60f8      	str	r0, [r7, #12]
 80031d4:	60b9      	str	r1, [r7, #8]
 80031d6:	603b      	str	r3, [r7, #0]
 80031d8:	4613      	mov	r3, r2
 80031da:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80031dc:	e02c      	b.n	8003238 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80031de:	69bb      	ldr	r3, [r7, #24]
 80031e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031e4:	d028      	beq.n	8003238 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80031e6:	69bb      	ldr	r3, [r7, #24]
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d007      	beq.n	80031fc <UART_WaitOnFlagUntilTimeout+0x30>
 80031ec:	f7fe fc2e 	bl	8001a4c <HAL_GetTick>
 80031f0:	4602      	mov	r2, r0
 80031f2:	683b      	ldr	r3, [r7, #0]
 80031f4:	1ad3      	subs	r3, r2, r3
 80031f6:	69ba      	ldr	r2, [r7, #24]
 80031f8:	429a      	cmp	r2, r3
 80031fa:	d21d      	bcs.n	8003238 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	68da      	ldr	r2, [r3, #12]
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800320a:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	695a      	ldr	r2, [r3, #20]
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f022 0201 	bic.w	r2, r2, #1
 800321a:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	2220      	movs	r2, #32
 8003220:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	2220      	movs	r2, #32
 8003228:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	2200      	movs	r2, #0
 8003230:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8003234:	2303      	movs	r3, #3
 8003236:	e00f      	b.n	8003258 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	681a      	ldr	r2, [r3, #0]
 800323e:	68bb      	ldr	r3, [r7, #8]
 8003240:	4013      	ands	r3, r2
 8003242:	68ba      	ldr	r2, [r7, #8]
 8003244:	429a      	cmp	r2, r3
 8003246:	bf0c      	ite	eq
 8003248:	2301      	moveq	r3, #1
 800324a:	2300      	movne	r3, #0
 800324c:	b2db      	uxtb	r3, r3
 800324e:	461a      	mov	r2, r3
 8003250:	79fb      	ldrb	r3, [r7, #7]
 8003252:	429a      	cmp	r2, r3
 8003254:	d0c3      	beq.n	80031de <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003256:	2300      	movs	r3, #0
}
 8003258:	4618      	mov	r0, r3
 800325a:	3710      	adds	r7, #16
 800325c:	46bd      	mov	sp, r7
 800325e:	bd80      	pop	{r7, pc}

08003260 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003260:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003264:	b085      	sub	sp, #20
 8003266:	af00      	add	r7, sp, #0
 8003268:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	691b      	ldr	r3, [r3, #16]
 8003270:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	68da      	ldr	r2, [r3, #12]
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	430a      	orrs	r2, r1
 800327e:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	689a      	ldr	r2, [r3, #8]
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	691b      	ldr	r3, [r3, #16]
 8003288:	431a      	orrs	r2, r3
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	695b      	ldr	r3, [r3, #20]
 800328e:	431a      	orrs	r2, r3
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	69db      	ldr	r3, [r3, #28]
 8003294:	4313      	orrs	r3, r2
 8003296:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	68db      	ldr	r3, [r3, #12]
 800329e:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80032a2:	f023 030c 	bic.w	r3, r3, #12
 80032a6:	687a      	ldr	r2, [r7, #4]
 80032a8:	6812      	ldr	r2, [r2, #0]
 80032aa:	68f9      	ldr	r1, [r7, #12]
 80032ac:	430b      	orrs	r3, r1
 80032ae:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	695b      	ldr	r3, [r3, #20]
 80032b6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	699a      	ldr	r2, [r3, #24]
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	430a      	orrs	r2, r1
 80032c4:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	69db      	ldr	r3, [r3, #28]
 80032ca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80032ce:	f040 818b 	bne.w	80035e8 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	4ac1      	ldr	r2, [pc, #772]	; (80035dc <UART_SetConfig+0x37c>)
 80032d8:	4293      	cmp	r3, r2
 80032da:	d005      	beq.n	80032e8 <UART_SetConfig+0x88>
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	4abf      	ldr	r2, [pc, #764]	; (80035e0 <UART_SetConfig+0x380>)
 80032e2:	4293      	cmp	r3, r2
 80032e4:	f040 80bd 	bne.w	8003462 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80032e8:	f7ff fb0a 	bl	8002900 <HAL_RCC_GetPCLK2Freq>
 80032ec:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80032ee:	68bb      	ldr	r3, [r7, #8]
 80032f0:	461d      	mov	r5, r3
 80032f2:	f04f 0600 	mov.w	r6, #0
 80032f6:	46a8      	mov	r8, r5
 80032f8:	46b1      	mov	r9, r6
 80032fa:	eb18 0308 	adds.w	r3, r8, r8
 80032fe:	eb49 0409 	adc.w	r4, r9, r9
 8003302:	4698      	mov	r8, r3
 8003304:	46a1      	mov	r9, r4
 8003306:	eb18 0805 	adds.w	r8, r8, r5
 800330a:	eb49 0906 	adc.w	r9, r9, r6
 800330e:	f04f 0100 	mov.w	r1, #0
 8003312:	f04f 0200 	mov.w	r2, #0
 8003316:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800331a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800331e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003322:	4688      	mov	r8, r1
 8003324:	4691      	mov	r9, r2
 8003326:	eb18 0005 	adds.w	r0, r8, r5
 800332a:	eb49 0106 	adc.w	r1, r9, r6
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	685b      	ldr	r3, [r3, #4]
 8003332:	461d      	mov	r5, r3
 8003334:	f04f 0600 	mov.w	r6, #0
 8003338:	196b      	adds	r3, r5, r5
 800333a:	eb46 0406 	adc.w	r4, r6, r6
 800333e:	461a      	mov	r2, r3
 8003340:	4623      	mov	r3, r4
 8003342:	f7fd fc29 	bl	8000b98 <__aeabi_uldivmod>
 8003346:	4603      	mov	r3, r0
 8003348:	460c      	mov	r4, r1
 800334a:	461a      	mov	r2, r3
 800334c:	4ba5      	ldr	r3, [pc, #660]	; (80035e4 <UART_SetConfig+0x384>)
 800334e:	fba3 2302 	umull	r2, r3, r3, r2
 8003352:	095b      	lsrs	r3, r3, #5
 8003354:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003358:	68bb      	ldr	r3, [r7, #8]
 800335a:	461d      	mov	r5, r3
 800335c:	f04f 0600 	mov.w	r6, #0
 8003360:	46a9      	mov	r9, r5
 8003362:	46b2      	mov	sl, r6
 8003364:	eb19 0309 	adds.w	r3, r9, r9
 8003368:	eb4a 040a 	adc.w	r4, sl, sl
 800336c:	4699      	mov	r9, r3
 800336e:	46a2      	mov	sl, r4
 8003370:	eb19 0905 	adds.w	r9, r9, r5
 8003374:	eb4a 0a06 	adc.w	sl, sl, r6
 8003378:	f04f 0100 	mov.w	r1, #0
 800337c:	f04f 0200 	mov.w	r2, #0
 8003380:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003384:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003388:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800338c:	4689      	mov	r9, r1
 800338e:	4692      	mov	sl, r2
 8003390:	eb19 0005 	adds.w	r0, r9, r5
 8003394:	eb4a 0106 	adc.w	r1, sl, r6
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	685b      	ldr	r3, [r3, #4]
 800339c:	461d      	mov	r5, r3
 800339e:	f04f 0600 	mov.w	r6, #0
 80033a2:	196b      	adds	r3, r5, r5
 80033a4:	eb46 0406 	adc.w	r4, r6, r6
 80033a8:	461a      	mov	r2, r3
 80033aa:	4623      	mov	r3, r4
 80033ac:	f7fd fbf4 	bl	8000b98 <__aeabi_uldivmod>
 80033b0:	4603      	mov	r3, r0
 80033b2:	460c      	mov	r4, r1
 80033b4:	461a      	mov	r2, r3
 80033b6:	4b8b      	ldr	r3, [pc, #556]	; (80035e4 <UART_SetConfig+0x384>)
 80033b8:	fba3 1302 	umull	r1, r3, r3, r2
 80033bc:	095b      	lsrs	r3, r3, #5
 80033be:	2164      	movs	r1, #100	; 0x64
 80033c0:	fb01 f303 	mul.w	r3, r1, r3
 80033c4:	1ad3      	subs	r3, r2, r3
 80033c6:	00db      	lsls	r3, r3, #3
 80033c8:	3332      	adds	r3, #50	; 0x32
 80033ca:	4a86      	ldr	r2, [pc, #536]	; (80035e4 <UART_SetConfig+0x384>)
 80033cc:	fba2 2303 	umull	r2, r3, r2, r3
 80033d0:	095b      	lsrs	r3, r3, #5
 80033d2:	005b      	lsls	r3, r3, #1
 80033d4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80033d8:	4498      	add	r8, r3
 80033da:	68bb      	ldr	r3, [r7, #8]
 80033dc:	461d      	mov	r5, r3
 80033de:	f04f 0600 	mov.w	r6, #0
 80033e2:	46a9      	mov	r9, r5
 80033e4:	46b2      	mov	sl, r6
 80033e6:	eb19 0309 	adds.w	r3, r9, r9
 80033ea:	eb4a 040a 	adc.w	r4, sl, sl
 80033ee:	4699      	mov	r9, r3
 80033f0:	46a2      	mov	sl, r4
 80033f2:	eb19 0905 	adds.w	r9, r9, r5
 80033f6:	eb4a 0a06 	adc.w	sl, sl, r6
 80033fa:	f04f 0100 	mov.w	r1, #0
 80033fe:	f04f 0200 	mov.w	r2, #0
 8003402:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003406:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800340a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800340e:	4689      	mov	r9, r1
 8003410:	4692      	mov	sl, r2
 8003412:	eb19 0005 	adds.w	r0, r9, r5
 8003416:	eb4a 0106 	adc.w	r1, sl, r6
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	685b      	ldr	r3, [r3, #4]
 800341e:	461d      	mov	r5, r3
 8003420:	f04f 0600 	mov.w	r6, #0
 8003424:	196b      	adds	r3, r5, r5
 8003426:	eb46 0406 	adc.w	r4, r6, r6
 800342a:	461a      	mov	r2, r3
 800342c:	4623      	mov	r3, r4
 800342e:	f7fd fbb3 	bl	8000b98 <__aeabi_uldivmod>
 8003432:	4603      	mov	r3, r0
 8003434:	460c      	mov	r4, r1
 8003436:	461a      	mov	r2, r3
 8003438:	4b6a      	ldr	r3, [pc, #424]	; (80035e4 <UART_SetConfig+0x384>)
 800343a:	fba3 1302 	umull	r1, r3, r3, r2
 800343e:	095b      	lsrs	r3, r3, #5
 8003440:	2164      	movs	r1, #100	; 0x64
 8003442:	fb01 f303 	mul.w	r3, r1, r3
 8003446:	1ad3      	subs	r3, r2, r3
 8003448:	00db      	lsls	r3, r3, #3
 800344a:	3332      	adds	r3, #50	; 0x32
 800344c:	4a65      	ldr	r2, [pc, #404]	; (80035e4 <UART_SetConfig+0x384>)
 800344e:	fba2 2303 	umull	r2, r3, r2, r3
 8003452:	095b      	lsrs	r3, r3, #5
 8003454:	f003 0207 	and.w	r2, r3, #7
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	4442      	add	r2, r8
 800345e:	609a      	str	r2, [r3, #8]
 8003460:	e26f      	b.n	8003942 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003462:	f7ff fa39 	bl	80028d8 <HAL_RCC_GetPCLK1Freq>
 8003466:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003468:	68bb      	ldr	r3, [r7, #8]
 800346a:	461d      	mov	r5, r3
 800346c:	f04f 0600 	mov.w	r6, #0
 8003470:	46a8      	mov	r8, r5
 8003472:	46b1      	mov	r9, r6
 8003474:	eb18 0308 	adds.w	r3, r8, r8
 8003478:	eb49 0409 	adc.w	r4, r9, r9
 800347c:	4698      	mov	r8, r3
 800347e:	46a1      	mov	r9, r4
 8003480:	eb18 0805 	adds.w	r8, r8, r5
 8003484:	eb49 0906 	adc.w	r9, r9, r6
 8003488:	f04f 0100 	mov.w	r1, #0
 800348c:	f04f 0200 	mov.w	r2, #0
 8003490:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003494:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003498:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800349c:	4688      	mov	r8, r1
 800349e:	4691      	mov	r9, r2
 80034a0:	eb18 0005 	adds.w	r0, r8, r5
 80034a4:	eb49 0106 	adc.w	r1, r9, r6
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	685b      	ldr	r3, [r3, #4]
 80034ac:	461d      	mov	r5, r3
 80034ae:	f04f 0600 	mov.w	r6, #0
 80034b2:	196b      	adds	r3, r5, r5
 80034b4:	eb46 0406 	adc.w	r4, r6, r6
 80034b8:	461a      	mov	r2, r3
 80034ba:	4623      	mov	r3, r4
 80034bc:	f7fd fb6c 	bl	8000b98 <__aeabi_uldivmod>
 80034c0:	4603      	mov	r3, r0
 80034c2:	460c      	mov	r4, r1
 80034c4:	461a      	mov	r2, r3
 80034c6:	4b47      	ldr	r3, [pc, #284]	; (80035e4 <UART_SetConfig+0x384>)
 80034c8:	fba3 2302 	umull	r2, r3, r3, r2
 80034cc:	095b      	lsrs	r3, r3, #5
 80034ce:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80034d2:	68bb      	ldr	r3, [r7, #8]
 80034d4:	461d      	mov	r5, r3
 80034d6:	f04f 0600 	mov.w	r6, #0
 80034da:	46a9      	mov	r9, r5
 80034dc:	46b2      	mov	sl, r6
 80034de:	eb19 0309 	adds.w	r3, r9, r9
 80034e2:	eb4a 040a 	adc.w	r4, sl, sl
 80034e6:	4699      	mov	r9, r3
 80034e8:	46a2      	mov	sl, r4
 80034ea:	eb19 0905 	adds.w	r9, r9, r5
 80034ee:	eb4a 0a06 	adc.w	sl, sl, r6
 80034f2:	f04f 0100 	mov.w	r1, #0
 80034f6:	f04f 0200 	mov.w	r2, #0
 80034fa:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80034fe:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003502:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003506:	4689      	mov	r9, r1
 8003508:	4692      	mov	sl, r2
 800350a:	eb19 0005 	adds.w	r0, r9, r5
 800350e:	eb4a 0106 	adc.w	r1, sl, r6
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	685b      	ldr	r3, [r3, #4]
 8003516:	461d      	mov	r5, r3
 8003518:	f04f 0600 	mov.w	r6, #0
 800351c:	196b      	adds	r3, r5, r5
 800351e:	eb46 0406 	adc.w	r4, r6, r6
 8003522:	461a      	mov	r2, r3
 8003524:	4623      	mov	r3, r4
 8003526:	f7fd fb37 	bl	8000b98 <__aeabi_uldivmod>
 800352a:	4603      	mov	r3, r0
 800352c:	460c      	mov	r4, r1
 800352e:	461a      	mov	r2, r3
 8003530:	4b2c      	ldr	r3, [pc, #176]	; (80035e4 <UART_SetConfig+0x384>)
 8003532:	fba3 1302 	umull	r1, r3, r3, r2
 8003536:	095b      	lsrs	r3, r3, #5
 8003538:	2164      	movs	r1, #100	; 0x64
 800353a:	fb01 f303 	mul.w	r3, r1, r3
 800353e:	1ad3      	subs	r3, r2, r3
 8003540:	00db      	lsls	r3, r3, #3
 8003542:	3332      	adds	r3, #50	; 0x32
 8003544:	4a27      	ldr	r2, [pc, #156]	; (80035e4 <UART_SetConfig+0x384>)
 8003546:	fba2 2303 	umull	r2, r3, r2, r3
 800354a:	095b      	lsrs	r3, r3, #5
 800354c:	005b      	lsls	r3, r3, #1
 800354e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003552:	4498      	add	r8, r3
 8003554:	68bb      	ldr	r3, [r7, #8]
 8003556:	461d      	mov	r5, r3
 8003558:	f04f 0600 	mov.w	r6, #0
 800355c:	46a9      	mov	r9, r5
 800355e:	46b2      	mov	sl, r6
 8003560:	eb19 0309 	adds.w	r3, r9, r9
 8003564:	eb4a 040a 	adc.w	r4, sl, sl
 8003568:	4699      	mov	r9, r3
 800356a:	46a2      	mov	sl, r4
 800356c:	eb19 0905 	adds.w	r9, r9, r5
 8003570:	eb4a 0a06 	adc.w	sl, sl, r6
 8003574:	f04f 0100 	mov.w	r1, #0
 8003578:	f04f 0200 	mov.w	r2, #0
 800357c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003580:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003584:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003588:	4689      	mov	r9, r1
 800358a:	4692      	mov	sl, r2
 800358c:	eb19 0005 	adds.w	r0, r9, r5
 8003590:	eb4a 0106 	adc.w	r1, sl, r6
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	685b      	ldr	r3, [r3, #4]
 8003598:	461d      	mov	r5, r3
 800359a:	f04f 0600 	mov.w	r6, #0
 800359e:	196b      	adds	r3, r5, r5
 80035a0:	eb46 0406 	adc.w	r4, r6, r6
 80035a4:	461a      	mov	r2, r3
 80035a6:	4623      	mov	r3, r4
 80035a8:	f7fd faf6 	bl	8000b98 <__aeabi_uldivmod>
 80035ac:	4603      	mov	r3, r0
 80035ae:	460c      	mov	r4, r1
 80035b0:	461a      	mov	r2, r3
 80035b2:	4b0c      	ldr	r3, [pc, #48]	; (80035e4 <UART_SetConfig+0x384>)
 80035b4:	fba3 1302 	umull	r1, r3, r3, r2
 80035b8:	095b      	lsrs	r3, r3, #5
 80035ba:	2164      	movs	r1, #100	; 0x64
 80035bc:	fb01 f303 	mul.w	r3, r1, r3
 80035c0:	1ad3      	subs	r3, r2, r3
 80035c2:	00db      	lsls	r3, r3, #3
 80035c4:	3332      	adds	r3, #50	; 0x32
 80035c6:	4a07      	ldr	r2, [pc, #28]	; (80035e4 <UART_SetConfig+0x384>)
 80035c8:	fba2 2303 	umull	r2, r3, r2, r3
 80035cc:	095b      	lsrs	r3, r3, #5
 80035ce:	f003 0207 	and.w	r2, r3, #7
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	4442      	add	r2, r8
 80035d8:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 80035da:	e1b2      	b.n	8003942 <UART_SetConfig+0x6e2>
 80035dc:	40011000 	.word	0x40011000
 80035e0:	40011400 	.word	0x40011400
 80035e4:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	4ad7      	ldr	r2, [pc, #860]	; (800394c <UART_SetConfig+0x6ec>)
 80035ee:	4293      	cmp	r3, r2
 80035f0:	d005      	beq.n	80035fe <UART_SetConfig+0x39e>
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	4ad6      	ldr	r2, [pc, #856]	; (8003950 <UART_SetConfig+0x6f0>)
 80035f8:	4293      	cmp	r3, r2
 80035fa:	f040 80d1 	bne.w	80037a0 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 80035fe:	f7ff f97f 	bl	8002900 <HAL_RCC_GetPCLK2Freq>
 8003602:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003604:	68bb      	ldr	r3, [r7, #8]
 8003606:	469a      	mov	sl, r3
 8003608:	f04f 0b00 	mov.w	fp, #0
 800360c:	46d0      	mov	r8, sl
 800360e:	46d9      	mov	r9, fp
 8003610:	eb18 0308 	adds.w	r3, r8, r8
 8003614:	eb49 0409 	adc.w	r4, r9, r9
 8003618:	4698      	mov	r8, r3
 800361a:	46a1      	mov	r9, r4
 800361c:	eb18 080a 	adds.w	r8, r8, sl
 8003620:	eb49 090b 	adc.w	r9, r9, fp
 8003624:	f04f 0100 	mov.w	r1, #0
 8003628:	f04f 0200 	mov.w	r2, #0
 800362c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003630:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003634:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003638:	4688      	mov	r8, r1
 800363a:	4691      	mov	r9, r2
 800363c:	eb1a 0508 	adds.w	r5, sl, r8
 8003640:	eb4b 0609 	adc.w	r6, fp, r9
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	685b      	ldr	r3, [r3, #4]
 8003648:	4619      	mov	r1, r3
 800364a:	f04f 0200 	mov.w	r2, #0
 800364e:	f04f 0300 	mov.w	r3, #0
 8003652:	f04f 0400 	mov.w	r4, #0
 8003656:	0094      	lsls	r4, r2, #2
 8003658:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800365c:	008b      	lsls	r3, r1, #2
 800365e:	461a      	mov	r2, r3
 8003660:	4623      	mov	r3, r4
 8003662:	4628      	mov	r0, r5
 8003664:	4631      	mov	r1, r6
 8003666:	f7fd fa97 	bl	8000b98 <__aeabi_uldivmod>
 800366a:	4603      	mov	r3, r0
 800366c:	460c      	mov	r4, r1
 800366e:	461a      	mov	r2, r3
 8003670:	4bb8      	ldr	r3, [pc, #736]	; (8003954 <UART_SetConfig+0x6f4>)
 8003672:	fba3 2302 	umull	r2, r3, r3, r2
 8003676:	095b      	lsrs	r3, r3, #5
 8003678:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800367c:	68bb      	ldr	r3, [r7, #8]
 800367e:	469b      	mov	fp, r3
 8003680:	f04f 0c00 	mov.w	ip, #0
 8003684:	46d9      	mov	r9, fp
 8003686:	46e2      	mov	sl, ip
 8003688:	eb19 0309 	adds.w	r3, r9, r9
 800368c:	eb4a 040a 	adc.w	r4, sl, sl
 8003690:	4699      	mov	r9, r3
 8003692:	46a2      	mov	sl, r4
 8003694:	eb19 090b 	adds.w	r9, r9, fp
 8003698:	eb4a 0a0c 	adc.w	sl, sl, ip
 800369c:	f04f 0100 	mov.w	r1, #0
 80036a0:	f04f 0200 	mov.w	r2, #0
 80036a4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80036a8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80036ac:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80036b0:	4689      	mov	r9, r1
 80036b2:	4692      	mov	sl, r2
 80036b4:	eb1b 0509 	adds.w	r5, fp, r9
 80036b8:	eb4c 060a 	adc.w	r6, ip, sl
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	685b      	ldr	r3, [r3, #4]
 80036c0:	4619      	mov	r1, r3
 80036c2:	f04f 0200 	mov.w	r2, #0
 80036c6:	f04f 0300 	mov.w	r3, #0
 80036ca:	f04f 0400 	mov.w	r4, #0
 80036ce:	0094      	lsls	r4, r2, #2
 80036d0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80036d4:	008b      	lsls	r3, r1, #2
 80036d6:	461a      	mov	r2, r3
 80036d8:	4623      	mov	r3, r4
 80036da:	4628      	mov	r0, r5
 80036dc:	4631      	mov	r1, r6
 80036de:	f7fd fa5b 	bl	8000b98 <__aeabi_uldivmod>
 80036e2:	4603      	mov	r3, r0
 80036e4:	460c      	mov	r4, r1
 80036e6:	461a      	mov	r2, r3
 80036e8:	4b9a      	ldr	r3, [pc, #616]	; (8003954 <UART_SetConfig+0x6f4>)
 80036ea:	fba3 1302 	umull	r1, r3, r3, r2
 80036ee:	095b      	lsrs	r3, r3, #5
 80036f0:	2164      	movs	r1, #100	; 0x64
 80036f2:	fb01 f303 	mul.w	r3, r1, r3
 80036f6:	1ad3      	subs	r3, r2, r3
 80036f8:	011b      	lsls	r3, r3, #4
 80036fa:	3332      	adds	r3, #50	; 0x32
 80036fc:	4a95      	ldr	r2, [pc, #596]	; (8003954 <UART_SetConfig+0x6f4>)
 80036fe:	fba2 2303 	umull	r2, r3, r2, r3
 8003702:	095b      	lsrs	r3, r3, #5
 8003704:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003708:	4498      	add	r8, r3
 800370a:	68bb      	ldr	r3, [r7, #8]
 800370c:	469b      	mov	fp, r3
 800370e:	f04f 0c00 	mov.w	ip, #0
 8003712:	46d9      	mov	r9, fp
 8003714:	46e2      	mov	sl, ip
 8003716:	eb19 0309 	adds.w	r3, r9, r9
 800371a:	eb4a 040a 	adc.w	r4, sl, sl
 800371e:	4699      	mov	r9, r3
 8003720:	46a2      	mov	sl, r4
 8003722:	eb19 090b 	adds.w	r9, r9, fp
 8003726:	eb4a 0a0c 	adc.w	sl, sl, ip
 800372a:	f04f 0100 	mov.w	r1, #0
 800372e:	f04f 0200 	mov.w	r2, #0
 8003732:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003736:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800373a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800373e:	4689      	mov	r9, r1
 8003740:	4692      	mov	sl, r2
 8003742:	eb1b 0509 	adds.w	r5, fp, r9
 8003746:	eb4c 060a 	adc.w	r6, ip, sl
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	685b      	ldr	r3, [r3, #4]
 800374e:	4619      	mov	r1, r3
 8003750:	f04f 0200 	mov.w	r2, #0
 8003754:	f04f 0300 	mov.w	r3, #0
 8003758:	f04f 0400 	mov.w	r4, #0
 800375c:	0094      	lsls	r4, r2, #2
 800375e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003762:	008b      	lsls	r3, r1, #2
 8003764:	461a      	mov	r2, r3
 8003766:	4623      	mov	r3, r4
 8003768:	4628      	mov	r0, r5
 800376a:	4631      	mov	r1, r6
 800376c:	f7fd fa14 	bl	8000b98 <__aeabi_uldivmod>
 8003770:	4603      	mov	r3, r0
 8003772:	460c      	mov	r4, r1
 8003774:	461a      	mov	r2, r3
 8003776:	4b77      	ldr	r3, [pc, #476]	; (8003954 <UART_SetConfig+0x6f4>)
 8003778:	fba3 1302 	umull	r1, r3, r3, r2
 800377c:	095b      	lsrs	r3, r3, #5
 800377e:	2164      	movs	r1, #100	; 0x64
 8003780:	fb01 f303 	mul.w	r3, r1, r3
 8003784:	1ad3      	subs	r3, r2, r3
 8003786:	011b      	lsls	r3, r3, #4
 8003788:	3332      	adds	r3, #50	; 0x32
 800378a:	4a72      	ldr	r2, [pc, #456]	; (8003954 <UART_SetConfig+0x6f4>)
 800378c:	fba2 2303 	umull	r2, r3, r2, r3
 8003790:	095b      	lsrs	r3, r3, #5
 8003792:	f003 020f 	and.w	r2, r3, #15
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	4442      	add	r2, r8
 800379c:	609a      	str	r2, [r3, #8]
 800379e:	e0d0      	b.n	8003942 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 80037a0:	f7ff f89a 	bl	80028d8 <HAL_RCC_GetPCLK1Freq>
 80037a4:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80037a6:	68bb      	ldr	r3, [r7, #8]
 80037a8:	469a      	mov	sl, r3
 80037aa:	f04f 0b00 	mov.w	fp, #0
 80037ae:	46d0      	mov	r8, sl
 80037b0:	46d9      	mov	r9, fp
 80037b2:	eb18 0308 	adds.w	r3, r8, r8
 80037b6:	eb49 0409 	adc.w	r4, r9, r9
 80037ba:	4698      	mov	r8, r3
 80037bc:	46a1      	mov	r9, r4
 80037be:	eb18 080a 	adds.w	r8, r8, sl
 80037c2:	eb49 090b 	adc.w	r9, r9, fp
 80037c6:	f04f 0100 	mov.w	r1, #0
 80037ca:	f04f 0200 	mov.w	r2, #0
 80037ce:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80037d2:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80037d6:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80037da:	4688      	mov	r8, r1
 80037dc:	4691      	mov	r9, r2
 80037de:	eb1a 0508 	adds.w	r5, sl, r8
 80037e2:	eb4b 0609 	adc.w	r6, fp, r9
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	685b      	ldr	r3, [r3, #4]
 80037ea:	4619      	mov	r1, r3
 80037ec:	f04f 0200 	mov.w	r2, #0
 80037f0:	f04f 0300 	mov.w	r3, #0
 80037f4:	f04f 0400 	mov.w	r4, #0
 80037f8:	0094      	lsls	r4, r2, #2
 80037fa:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80037fe:	008b      	lsls	r3, r1, #2
 8003800:	461a      	mov	r2, r3
 8003802:	4623      	mov	r3, r4
 8003804:	4628      	mov	r0, r5
 8003806:	4631      	mov	r1, r6
 8003808:	f7fd f9c6 	bl	8000b98 <__aeabi_uldivmod>
 800380c:	4603      	mov	r3, r0
 800380e:	460c      	mov	r4, r1
 8003810:	461a      	mov	r2, r3
 8003812:	4b50      	ldr	r3, [pc, #320]	; (8003954 <UART_SetConfig+0x6f4>)
 8003814:	fba3 2302 	umull	r2, r3, r3, r2
 8003818:	095b      	lsrs	r3, r3, #5
 800381a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800381e:	68bb      	ldr	r3, [r7, #8]
 8003820:	469b      	mov	fp, r3
 8003822:	f04f 0c00 	mov.w	ip, #0
 8003826:	46d9      	mov	r9, fp
 8003828:	46e2      	mov	sl, ip
 800382a:	eb19 0309 	adds.w	r3, r9, r9
 800382e:	eb4a 040a 	adc.w	r4, sl, sl
 8003832:	4699      	mov	r9, r3
 8003834:	46a2      	mov	sl, r4
 8003836:	eb19 090b 	adds.w	r9, r9, fp
 800383a:	eb4a 0a0c 	adc.w	sl, sl, ip
 800383e:	f04f 0100 	mov.w	r1, #0
 8003842:	f04f 0200 	mov.w	r2, #0
 8003846:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800384a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800384e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003852:	4689      	mov	r9, r1
 8003854:	4692      	mov	sl, r2
 8003856:	eb1b 0509 	adds.w	r5, fp, r9
 800385a:	eb4c 060a 	adc.w	r6, ip, sl
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	685b      	ldr	r3, [r3, #4]
 8003862:	4619      	mov	r1, r3
 8003864:	f04f 0200 	mov.w	r2, #0
 8003868:	f04f 0300 	mov.w	r3, #0
 800386c:	f04f 0400 	mov.w	r4, #0
 8003870:	0094      	lsls	r4, r2, #2
 8003872:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003876:	008b      	lsls	r3, r1, #2
 8003878:	461a      	mov	r2, r3
 800387a:	4623      	mov	r3, r4
 800387c:	4628      	mov	r0, r5
 800387e:	4631      	mov	r1, r6
 8003880:	f7fd f98a 	bl	8000b98 <__aeabi_uldivmod>
 8003884:	4603      	mov	r3, r0
 8003886:	460c      	mov	r4, r1
 8003888:	461a      	mov	r2, r3
 800388a:	4b32      	ldr	r3, [pc, #200]	; (8003954 <UART_SetConfig+0x6f4>)
 800388c:	fba3 1302 	umull	r1, r3, r3, r2
 8003890:	095b      	lsrs	r3, r3, #5
 8003892:	2164      	movs	r1, #100	; 0x64
 8003894:	fb01 f303 	mul.w	r3, r1, r3
 8003898:	1ad3      	subs	r3, r2, r3
 800389a:	011b      	lsls	r3, r3, #4
 800389c:	3332      	adds	r3, #50	; 0x32
 800389e:	4a2d      	ldr	r2, [pc, #180]	; (8003954 <UART_SetConfig+0x6f4>)
 80038a0:	fba2 2303 	umull	r2, r3, r2, r3
 80038a4:	095b      	lsrs	r3, r3, #5
 80038a6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80038aa:	4498      	add	r8, r3
 80038ac:	68bb      	ldr	r3, [r7, #8]
 80038ae:	469b      	mov	fp, r3
 80038b0:	f04f 0c00 	mov.w	ip, #0
 80038b4:	46d9      	mov	r9, fp
 80038b6:	46e2      	mov	sl, ip
 80038b8:	eb19 0309 	adds.w	r3, r9, r9
 80038bc:	eb4a 040a 	adc.w	r4, sl, sl
 80038c0:	4699      	mov	r9, r3
 80038c2:	46a2      	mov	sl, r4
 80038c4:	eb19 090b 	adds.w	r9, r9, fp
 80038c8:	eb4a 0a0c 	adc.w	sl, sl, ip
 80038cc:	f04f 0100 	mov.w	r1, #0
 80038d0:	f04f 0200 	mov.w	r2, #0
 80038d4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80038d8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80038dc:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80038e0:	4689      	mov	r9, r1
 80038e2:	4692      	mov	sl, r2
 80038e4:	eb1b 0509 	adds.w	r5, fp, r9
 80038e8:	eb4c 060a 	adc.w	r6, ip, sl
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	685b      	ldr	r3, [r3, #4]
 80038f0:	4619      	mov	r1, r3
 80038f2:	f04f 0200 	mov.w	r2, #0
 80038f6:	f04f 0300 	mov.w	r3, #0
 80038fa:	f04f 0400 	mov.w	r4, #0
 80038fe:	0094      	lsls	r4, r2, #2
 8003900:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003904:	008b      	lsls	r3, r1, #2
 8003906:	461a      	mov	r2, r3
 8003908:	4623      	mov	r3, r4
 800390a:	4628      	mov	r0, r5
 800390c:	4631      	mov	r1, r6
 800390e:	f7fd f943 	bl	8000b98 <__aeabi_uldivmod>
 8003912:	4603      	mov	r3, r0
 8003914:	460c      	mov	r4, r1
 8003916:	461a      	mov	r2, r3
 8003918:	4b0e      	ldr	r3, [pc, #56]	; (8003954 <UART_SetConfig+0x6f4>)
 800391a:	fba3 1302 	umull	r1, r3, r3, r2
 800391e:	095b      	lsrs	r3, r3, #5
 8003920:	2164      	movs	r1, #100	; 0x64
 8003922:	fb01 f303 	mul.w	r3, r1, r3
 8003926:	1ad3      	subs	r3, r2, r3
 8003928:	011b      	lsls	r3, r3, #4
 800392a:	3332      	adds	r3, #50	; 0x32
 800392c:	4a09      	ldr	r2, [pc, #36]	; (8003954 <UART_SetConfig+0x6f4>)
 800392e:	fba2 2303 	umull	r2, r3, r2, r3
 8003932:	095b      	lsrs	r3, r3, #5
 8003934:	f003 020f 	and.w	r2, r3, #15
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	4442      	add	r2, r8
 800393e:	609a      	str	r2, [r3, #8]
}
 8003940:	e7ff      	b.n	8003942 <UART_SetConfig+0x6e2>
 8003942:	bf00      	nop
 8003944:	3714      	adds	r7, #20
 8003946:	46bd      	mov	sp, r7
 8003948:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800394c:	40011000 	.word	0x40011000
 8003950:	40011400 	.word	0x40011400
 8003954:	51eb851f 	.word	0x51eb851f

08003958 <__errno>:
 8003958:	4b01      	ldr	r3, [pc, #4]	; (8003960 <__errno+0x8>)
 800395a:	6818      	ldr	r0, [r3, #0]
 800395c:	4770      	bx	lr
 800395e:	bf00      	nop
 8003960:	2000000c 	.word	0x2000000c

08003964 <__libc_init_array>:
 8003964:	b570      	push	{r4, r5, r6, lr}
 8003966:	4e0d      	ldr	r6, [pc, #52]	; (800399c <__libc_init_array+0x38>)
 8003968:	4c0d      	ldr	r4, [pc, #52]	; (80039a0 <__libc_init_array+0x3c>)
 800396a:	1ba4      	subs	r4, r4, r6
 800396c:	10a4      	asrs	r4, r4, #2
 800396e:	2500      	movs	r5, #0
 8003970:	42a5      	cmp	r5, r4
 8003972:	d109      	bne.n	8003988 <__libc_init_array+0x24>
 8003974:	4e0b      	ldr	r6, [pc, #44]	; (80039a4 <__libc_init_array+0x40>)
 8003976:	4c0c      	ldr	r4, [pc, #48]	; (80039a8 <__libc_init_array+0x44>)
 8003978:	f001 fc7c 	bl	8005274 <_init>
 800397c:	1ba4      	subs	r4, r4, r6
 800397e:	10a4      	asrs	r4, r4, #2
 8003980:	2500      	movs	r5, #0
 8003982:	42a5      	cmp	r5, r4
 8003984:	d105      	bne.n	8003992 <__libc_init_array+0x2e>
 8003986:	bd70      	pop	{r4, r5, r6, pc}
 8003988:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800398c:	4798      	blx	r3
 800398e:	3501      	adds	r5, #1
 8003990:	e7ee      	b.n	8003970 <__libc_init_array+0xc>
 8003992:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003996:	4798      	blx	r3
 8003998:	3501      	adds	r5, #1
 800399a:	e7f2      	b.n	8003982 <__libc_init_array+0x1e>
 800399c:	08005378 	.word	0x08005378
 80039a0:	08005378 	.word	0x08005378
 80039a4:	08005378 	.word	0x08005378
 80039a8:	0800537c 	.word	0x0800537c

080039ac <memset>:
 80039ac:	4402      	add	r2, r0
 80039ae:	4603      	mov	r3, r0
 80039b0:	4293      	cmp	r3, r2
 80039b2:	d100      	bne.n	80039b6 <memset+0xa>
 80039b4:	4770      	bx	lr
 80039b6:	f803 1b01 	strb.w	r1, [r3], #1
 80039ba:	e7f9      	b.n	80039b0 <memset+0x4>

080039bc <siprintf>:
 80039bc:	b40e      	push	{r1, r2, r3}
 80039be:	b500      	push	{lr}
 80039c0:	b09c      	sub	sp, #112	; 0x70
 80039c2:	ab1d      	add	r3, sp, #116	; 0x74
 80039c4:	9002      	str	r0, [sp, #8]
 80039c6:	9006      	str	r0, [sp, #24]
 80039c8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80039cc:	4809      	ldr	r0, [pc, #36]	; (80039f4 <siprintf+0x38>)
 80039ce:	9107      	str	r1, [sp, #28]
 80039d0:	9104      	str	r1, [sp, #16]
 80039d2:	4909      	ldr	r1, [pc, #36]	; (80039f8 <siprintf+0x3c>)
 80039d4:	f853 2b04 	ldr.w	r2, [r3], #4
 80039d8:	9105      	str	r1, [sp, #20]
 80039da:	6800      	ldr	r0, [r0, #0]
 80039dc:	9301      	str	r3, [sp, #4]
 80039de:	a902      	add	r1, sp, #8
 80039e0:	f000 f866 	bl	8003ab0 <_svfiprintf_r>
 80039e4:	9b02      	ldr	r3, [sp, #8]
 80039e6:	2200      	movs	r2, #0
 80039e8:	701a      	strb	r2, [r3, #0]
 80039ea:	b01c      	add	sp, #112	; 0x70
 80039ec:	f85d eb04 	ldr.w	lr, [sp], #4
 80039f0:	b003      	add	sp, #12
 80039f2:	4770      	bx	lr
 80039f4:	2000000c 	.word	0x2000000c
 80039f8:	ffff0208 	.word	0xffff0208

080039fc <__ssputs_r>:
 80039fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003a00:	688e      	ldr	r6, [r1, #8]
 8003a02:	429e      	cmp	r6, r3
 8003a04:	4682      	mov	sl, r0
 8003a06:	460c      	mov	r4, r1
 8003a08:	4690      	mov	r8, r2
 8003a0a:	4699      	mov	r9, r3
 8003a0c:	d837      	bhi.n	8003a7e <__ssputs_r+0x82>
 8003a0e:	898a      	ldrh	r2, [r1, #12]
 8003a10:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003a14:	d031      	beq.n	8003a7a <__ssputs_r+0x7e>
 8003a16:	6825      	ldr	r5, [r4, #0]
 8003a18:	6909      	ldr	r1, [r1, #16]
 8003a1a:	1a6f      	subs	r7, r5, r1
 8003a1c:	6965      	ldr	r5, [r4, #20]
 8003a1e:	2302      	movs	r3, #2
 8003a20:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003a24:	fb95 f5f3 	sdiv	r5, r5, r3
 8003a28:	f109 0301 	add.w	r3, r9, #1
 8003a2c:	443b      	add	r3, r7
 8003a2e:	429d      	cmp	r5, r3
 8003a30:	bf38      	it	cc
 8003a32:	461d      	movcc	r5, r3
 8003a34:	0553      	lsls	r3, r2, #21
 8003a36:	d530      	bpl.n	8003a9a <__ssputs_r+0x9e>
 8003a38:	4629      	mov	r1, r5
 8003a3a:	f000 fb2b 	bl	8004094 <_malloc_r>
 8003a3e:	4606      	mov	r6, r0
 8003a40:	b950      	cbnz	r0, 8003a58 <__ssputs_r+0x5c>
 8003a42:	230c      	movs	r3, #12
 8003a44:	f8ca 3000 	str.w	r3, [sl]
 8003a48:	89a3      	ldrh	r3, [r4, #12]
 8003a4a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003a4e:	81a3      	strh	r3, [r4, #12]
 8003a50:	f04f 30ff 	mov.w	r0, #4294967295
 8003a54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003a58:	463a      	mov	r2, r7
 8003a5a:	6921      	ldr	r1, [r4, #16]
 8003a5c:	f000 faa8 	bl	8003fb0 <memcpy>
 8003a60:	89a3      	ldrh	r3, [r4, #12]
 8003a62:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003a66:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a6a:	81a3      	strh	r3, [r4, #12]
 8003a6c:	6126      	str	r6, [r4, #16]
 8003a6e:	6165      	str	r5, [r4, #20]
 8003a70:	443e      	add	r6, r7
 8003a72:	1bed      	subs	r5, r5, r7
 8003a74:	6026      	str	r6, [r4, #0]
 8003a76:	60a5      	str	r5, [r4, #8]
 8003a78:	464e      	mov	r6, r9
 8003a7a:	454e      	cmp	r6, r9
 8003a7c:	d900      	bls.n	8003a80 <__ssputs_r+0x84>
 8003a7e:	464e      	mov	r6, r9
 8003a80:	4632      	mov	r2, r6
 8003a82:	4641      	mov	r1, r8
 8003a84:	6820      	ldr	r0, [r4, #0]
 8003a86:	f000 fa9e 	bl	8003fc6 <memmove>
 8003a8a:	68a3      	ldr	r3, [r4, #8]
 8003a8c:	1b9b      	subs	r3, r3, r6
 8003a8e:	60a3      	str	r3, [r4, #8]
 8003a90:	6823      	ldr	r3, [r4, #0]
 8003a92:	441e      	add	r6, r3
 8003a94:	6026      	str	r6, [r4, #0]
 8003a96:	2000      	movs	r0, #0
 8003a98:	e7dc      	b.n	8003a54 <__ssputs_r+0x58>
 8003a9a:	462a      	mov	r2, r5
 8003a9c:	f000 fb54 	bl	8004148 <_realloc_r>
 8003aa0:	4606      	mov	r6, r0
 8003aa2:	2800      	cmp	r0, #0
 8003aa4:	d1e2      	bne.n	8003a6c <__ssputs_r+0x70>
 8003aa6:	6921      	ldr	r1, [r4, #16]
 8003aa8:	4650      	mov	r0, sl
 8003aaa:	f000 faa5 	bl	8003ff8 <_free_r>
 8003aae:	e7c8      	b.n	8003a42 <__ssputs_r+0x46>

08003ab0 <_svfiprintf_r>:
 8003ab0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003ab4:	461d      	mov	r5, r3
 8003ab6:	898b      	ldrh	r3, [r1, #12]
 8003ab8:	061f      	lsls	r7, r3, #24
 8003aba:	b09d      	sub	sp, #116	; 0x74
 8003abc:	4680      	mov	r8, r0
 8003abe:	460c      	mov	r4, r1
 8003ac0:	4616      	mov	r6, r2
 8003ac2:	d50f      	bpl.n	8003ae4 <_svfiprintf_r+0x34>
 8003ac4:	690b      	ldr	r3, [r1, #16]
 8003ac6:	b96b      	cbnz	r3, 8003ae4 <_svfiprintf_r+0x34>
 8003ac8:	2140      	movs	r1, #64	; 0x40
 8003aca:	f000 fae3 	bl	8004094 <_malloc_r>
 8003ace:	6020      	str	r0, [r4, #0]
 8003ad0:	6120      	str	r0, [r4, #16]
 8003ad2:	b928      	cbnz	r0, 8003ae0 <_svfiprintf_r+0x30>
 8003ad4:	230c      	movs	r3, #12
 8003ad6:	f8c8 3000 	str.w	r3, [r8]
 8003ada:	f04f 30ff 	mov.w	r0, #4294967295
 8003ade:	e0c8      	b.n	8003c72 <_svfiprintf_r+0x1c2>
 8003ae0:	2340      	movs	r3, #64	; 0x40
 8003ae2:	6163      	str	r3, [r4, #20]
 8003ae4:	2300      	movs	r3, #0
 8003ae6:	9309      	str	r3, [sp, #36]	; 0x24
 8003ae8:	2320      	movs	r3, #32
 8003aea:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003aee:	2330      	movs	r3, #48	; 0x30
 8003af0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003af4:	9503      	str	r5, [sp, #12]
 8003af6:	f04f 0b01 	mov.w	fp, #1
 8003afa:	4637      	mov	r7, r6
 8003afc:	463d      	mov	r5, r7
 8003afe:	f815 3b01 	ldrb.w	r3, [r5], #1
 8003b02:	b10b      	cbz	r3, 8003b08 <_svfiprintf_r+0x58>
 8003b04:	2b25      	cmp	r3, #37	; 0x25
 8003b06:	d13e      	bne.n	8003b86 <_svfiprintf_r+0xd6>
 8003b08:	ebb7 0a06 	subs.w	sl, r7, r6
 8003b0c:	d00b      	beq.n	8003b26 <_svfiprintf_r+0x76>
 8003b0e:	4653      	mov	r3, sl
 8003b10:	4632      	mov	r2, r6
 8003b12:	4621      	mov	r1, r4
 8003b14:	4640      	mov	r0, r8
 8003b16:	f7ff ff71 	bl	80039fc <__ssputs_r>
 8003b1a:	3001      	adds	r0, #1
 8003b1c:	f000 80a4 	beq.w	8003c68 <_svfiprintf_r+0x1b8>
 8003b20:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003b22:	4453      	add	r3, sl
 8003b24:	9309      	str	r3, [sp, #36]	; 0x24
 8003b26:	783b      	ldrb	r3, [r7, #0]
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	f000 809d 	beq.w	8003c68 <_svfiprintf_r+0x1b8>
 8003b2e:	2300      	movs	r3, #0
 8003b30:	f04f 32ff 	mov.w	r2, #4294967295
 8003b34:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003b38:	9304      	str	r3, [sp, #16]
 8003b3a:	9307      	str	r3, [sp, #28]
 8003b3c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003b40:	931a      	str	r3, [sp, #104]	; 0x68
 8003b42:	462f      	mov	r7, r5
 8003b44:	2205      	movs	r2, #5
 8003b46:	f817 1b01 	ldrb.w	r1, [r7], #1
 8003b4a:	4850      	ldr	r0, [pc, #320]	; (8003c8c <_svfiprintf_r+0x1dc>)
 8003b4c:	f7fc fb48 	bl	80001e0 <memchr>
 8003b50:	9b04      	ldr	r3, [sp, #16]
 8003b52:	b9d0      	cbnz	r0, 8003b8a <_svfiprintf_r+0xda>
 8003b54:	06d9      	lsls	r1, r3, #27
 8003b56:	bf44      	itt	mi
 8003b58:	2220      	movmi	r2, #32
 8003b5a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003b5e:	071a      	lsls	r2, r3, #28
 8003b60:	bf44      	itt	mi
 8003b62:	222b      	movmi	r2, #43	; 0x2b
 8003b64:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003b68:	782a      	ldrb	r2, [r5, #0]
 8003b6a:	2a2a      	cmp	r2, #42	; 0x2a
 8003b6c:	d015      	beq.n	8003b9a <_svfiprintf_r+0xea>
 8003b6e:	9a07      	ldr	r2, [sp, #28]
 8003b70:	462f      	mov	r7, r5
 8003b72:	2000      	movs	r0, #0
 8003b74:	250a      	movs	r5, #10
 8003b76:	4639      	mov	r1, r7
 8003b78:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003b7c:	3b30      	subs	r3, #48	; 0x30
 8003b7e:	2b09      	cmp	r3, #9
 8003b80:	d94d      	bls.n	8003c1e <_svfiprintf_r+0x16e>
 8003b82:	b1b8      	cbz	r0, 8003bb4 <_svfiprintf_r+0x104>
 8003b84:	e00f      	b.n	8003ba6 <_svfiprintf_r+0xf6>
 8003b86:	462f      	mov	r7, r5
 8003b88:	e7b8      	b.n	8003afc <_svfiprintf_r+0x4c>
 8003b8a:	4a40      	ldr	r2, [pc, #256]	; (8003c8c <_svfiprintf_r+0x1dc>)
 8003b8c:	1a80      	subs	r0, r0, r2
 8003b8e:	fa0b f000 	lsl.w	r0, fp, r0
 8003b92:	4318      	orrs	r0, r3
 8003b94:	9004      	str	r0, [sp, #16]
 8003b96:	463d      	mov	r5, r7
 8003b98:	e7d3      	b.n	8003b42 <_svfiprintf_r+0x92>
 8003b9a:	9a03      	ldr	r2, [sp, #12]
 8003b9c:	1d11      	adds	r1, r2, #4
 8003b9e:	6812      	ldr	r2, [r2, #0]
 8003ba0:	9103      	str	r1, [sp, #12]
 8003ba2:	2a00      	cmp	r2, #0
 8003ba4:	db01      	blt.n	8003baa <_svfiprintf_r+0xfa>
 8003ba6:	9207      	str	r2, [sp, #28]
 8003ba8:	e004      	b.n	8003bb4 <_svfiprintf_r+0x104>
 8003baa:	4252      	negs	r2, r2
 8003bac:	f043 0302 	orr.w	r3, r3, #2
 8003bb0:	9207      	str	r2, [sp, #28]
 8003bb2:	9304      	str	r3, [sp, #16]
 8003bb4:	783b      	ldrb	r3, [r7, #0]
 8003bb6:	2b2e      	cmp	r3, #46	; 0x2e
 8003bb8:	d10c      	bne.n	8003bd4 <_svfiprintf_r+0x124>
 8003bba:	787b      	ldrb	r3, [r7, #1]
 8003bbc:	2b2a      	cmp	r3, #42	; 0x2a
 8003bbe:	d133      	bne.n	8003c28 <_svfiprintf_r+0x178>
 8003bc0:	9b03      	ldr	r3, [sp, #12]
 8003bc2:	1d1a      	adds	r2, r3, #4
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	9203      	str	r2, [sp, #12]
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	bfb8      	it	lt
 8003bcc:	f04f 33ff 	movlt.w	r3, #4294967295
 8003bd0:	3702      	adds	r7, #2
 8003bd2:	9305      	str	r3, [sp, #20]
 8003bd4:	4d2e      	ldr	r5, [pc, #184]	; (8003c90 <_svfiprintf_r+0x1e0>)
 8003bd6:	7839      	ldrb	r1, [r7, #0]
 8003bd8:	2203      	movs	r2, #3
 8003bda:	4628      	mov	r0, r5
 8003bdc:	f7fc fb00 	bl	80001e0 <memchr>
 8003be0:	b138      	cbz	r0, 8003bf2 <_svfiprintf_r+0x142>
 8003be2:	2340      	movs	r3, #64	; 0x40
 8003be4:	1b40      	subs	r0, r0, r5
 8003be6:	fa03 f000 	lsl.w	r0, r3, r0
 8003bea:	9b04      	ldr	r3, [sp, #16]
 8003bec:	4303      	orrs	r3, r0
 8003bee:	3701      	adds	r7, #1
 8003bf0:	9304      	str	r3, [sp, #16]
 8003bf2:	7839      	ldrb	r1, [r7, #0]
 8003bf4:	4827      	ldr	r0, [pc, #156]	; (8003c94 <_svfiprintf_r+0x1e4>)
 8003bf6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003bfa:	2206      	movs	r2, #6
 8003bfc:	1c7e      	adds	r6, r7, #1
 8003bfe:	f7fc faef 	bl	80001e0 <memchr>
 8003c02:	2800      	cmp	r0, #0
 8003c04:	d038      	beq.n	8003c78 <_svfiprintf_r+0x1c8>
 8003c06:	4b24      	ldr	r3, [pc, #144]	; (8003c98 <_svfiprintf_r+0x1e8>)
 8003c08:	bb13      	cbnz	r3, 8003c50 <_svfiprintf_r+0x1a0>
 8003c0a:	9b03      	ldr	r3, [sp, #12]
 8003c0c:	3307      	adds	r3, #7
 8003c0e:	f023 0307 	bic.w	r3, r3, #7
 8003c12:	3308      	adds	r3, #8
 8003c14:	9303      	str	r3, [sp, #12]
 8003c16:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003c18:	444b      	add	r3, r9
 8003c1a:	9309      	str	r3, [sp, #36]	; 0x24
 8003c1c:	e76d      	b.n	8003afa <_svfiprintf_r+0x4a>
 8003c1e:	fb05 3202 	mla	r2, r5, r2, r3
 8003c22:	2001      	movs	r0, #1
 8003c24:	460f      	mov	r7, r1
 8003c26:	e7a6      	b.n	8003b76 <_svfiprintf_r+0xc6>
 8003c28:	2300      	movs	r3, #0
 8003c2a:	3701      	adds	r7, #1
 8003c2c:	9305      	str	r3, [sp, #20]
 8003c2e:	4619      	mov	r1, r3
 8003c30:	250a      	movs	r5, #10
 8003c32:	4638      	mov	r0, r7
 8003c34:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003c38:	3a30      	subs	r2, #48	; 0x30
 8003c3a:	2a09      	cmp	r2, #9
 8003c3c:	d903      	bls.n	8003c46 <_svfiprintf_r+0x196>
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d0c8      	beq.n	8003bd4 <_svfiprintf_r+0x124>
 8003c42:	9105      	str	r1, [sp, #20]
 8003c44:	e7c6      	b.n	8003bd4 <_svfiprintf_r+0x124>
 8003c46:	fb05 2101 	mla	r1, r5, r1, r2
 8003c4a:	2301      	movs	r3, #1
 8003c4c:	4607      	mov	r7, r0
 8003c4e:	e7f0      	b.n	8003c32 <_svfiprintf_r+0x182>
 8003c50:	ab03      	add	r3, sp, #12
 8003c52:	9300      	str	r3, [sp, #0]
 8003c54:	4622      	mov	r2, r4
 8003c56:	4b11      	ldr	r3, [pc, #68]	; (8003c9c <_svfiprintf_r+0x1ec>)
 8003c58:	a904      	add	r1, sp, #16
 8003c5a:	4640      	mov	r0, r8
 8003c5c:	f3af 8000 	nop.w
 8003c60:	f1b0 3fff 	cmp.w	r0, #4294967295
 8003c64:	4681      	mov	r9, r0
 8003c66:	d1d6      	bne.n	8003c16 <_svfiprintf_r+0x166>
 8003c68:	89a3      	ldrh	r3, [r4, #12]
 8003c6a:	065b      	lsls	r3, r3, #25
 8003c6c:	f53f af35 	bmi.w	8003ada <_svfiprintf_r+0x2a>
 8003c70:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003c72:	b01d      	add	sp, #116	; 0x74
 8003c74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003c78:	ab03      	add	r3, sp, #12
 8003c7a:	9300      	str	r3, [sp, #0]
 8003c7c:	4622      	mov	r2, r4
 8003c7e:	4b07      	ldr	r3, [pc, #28]	; (8003c9c <_svfiprintf_r+0x1ec>)
 8003c80:	a904      	add	r1, sp, #16
 8003c82:	4640      	mov	r0, r8
 8003c84:	f000 f882 	bl	8003d8c <_printf_i>
 8003c88:	e7ea      	b.n	8003c60 <_svfiprintf_r+0x1b0>
 8003c8a:	bf00      	nop
 8003c8c:	080052f4 	.word	0x080052f4
 8003c90:	080052fa 	.word	0x080052fa
 8003c94:	080052fe 	.word	0x080052fe
 8003c98:	00000000 	.word	0x00000000
 8003c9c:	080039fd 	.word	0x080039fd

08003ca0 <_printf_common>:
 8003ca0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003ca4:	4691      	mov	r9, r2
 8003ca6:	461f      	mov	r7, r3
 8003ca8:	688a      	ldr	r2, [r1, #8]
 8003caa:	690b      	ldr	r3, [r1, #16]
 8003cac:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003cb0:	4293      	cmp	r3, r2
 8003cb2:	bfb8      	it	lt
 8003cb4:	4613      	movlt	r3, r2
 8003cb6:	f8c9 3000 	str.w	r3, [r9]
 8003cba:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003cbe:	4606      	mov	r6, r0
 8003cc0:	460c      	mov	r4, r1
 8003cc2:	b112      	cbz	r2, 8003cca <_printf_common+0x2a>
 8003cc4:	3301      	adds	r3, #1
 8003cc6:	f8c9 3000 	str.w	r3, [r9]
 8003cca:	6823      	ldr	r3, [r4, #0]
 8003ccc:	0699      	lsls	r1, r3, #26
 8003cce:	bf42      	ittt	mi
 8003cd0:	f8d9 3000 	ldrmi.w	r3, [r9]
 8003cd4:	3302      	addmi	r3, #2
 8003cd6:	f8c9 3000 	strmi.w	r3, [r9]
 8003cda:	6825      	ldr	r5, [r4, #0]
 8003cdc:	f015 0506 	ands.w	r5, r5, #6
 8003ce0:	d107      	bne.n	8003cf2 <_printf_common+0x52>
 8003ce2:	f104 0a19 	add.w	sl, r4, #25
 8003ce6:	68e3      	ldr	r3, [r4, #12]
 8003ce8:	f8d9 2000 	ldr.w	r2, [r9]
 8003cec:	1a9b      	subs	r3, r3, r2
 8003cee:	42ab      	cmp	r3, r5
 8003cf0:	dc28      	bgt.n	8003d44 <_printf_common+0xa4>
 8003cf2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8003cf6:	6822      	ldr	r2, [r4, #0]
 8003cf8:	3300      	adds	r3, #0
 8003cfa:	bf18      	it	ne
 8003cfc:	2301      	movne	r3, #1
 8003cfe:	0692      	lsls	r2, r2, #26
 8003d00:	d42d      	bmi.n	8003d5e <_printf_common+0xbe>
 8003d02:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003d06:	4639      	mov	r1, r7
 8003d08:	4630      	mov	r0, r6
 8003d0a:	47c0      	blx	r8
 8003d0c:	3001      	adds	r0, #1
 8003d0e:	d020      	beq.n	8003d52 <_printf_common+0xb2>
 8003d10:	6823      	ldr	r3, [r4, #0]
 8003d12:	68e5      	ldr	r5, [r4, #12]
 8003d14:	f8d9 2000 	ldr.w	r2, [r9]
 8003d18:	f003 0306 	and.w	r3, r3, #6
 8003d1c:	2b04      	cmp	r3, #4
 8003d1e:	bf08      	it	eq
 8003d20:	1aad      	subeq	r5, r5, r2
 8003d22:	68a3      	ldr	r3, [r4, #8]
 8003d24:	6922      	ldr	r2, [r4, #16]
 8003d26:	bf0c      	ite	eq
 8003d28:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003d2c:	2500      	movne	r5, #0
 8003d2e:	4293      	cmp	r3, r2
 8003d30:	bfc4      	itt	gt
 8003d32:	1a9b      	subgt	r3, r3, r2
 8003d34:	18ed      	addgt	r5, r5, r3
 8003d36:	f04f 0900 	mov.w	r9, #0
 8003d3a:	341a      	adds	r4, #26
 8003d3c:	454d      	cmp	r5, r9
 8003d3e:	d11a      	bne.n	8003d76 <_printf_common+0xd6>
 8003d40:	2000      	movs	r0, #0
 8003d42:	e008      	b.n	8003d56 <_printf_common+0xb6>
 8003d44:	2301      	movs	r3, #1
 8003d46:	4652      	mov	r2, sl
 8003d48:	4639      	mov	r1, r7
 8003d4a:	4630      	mov	r0, r6
 8003d4c:	47c0      	blx	r8
 8003d4e:	3001      	adds	r0, #1
 8003d50:	d103      	bne.n	8003d5a <_printf_common+0xba>
 8003d52:	f04f 30ff 	mov.w	r0, #4294967295
 8003d56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003d5a:	3501      	adds	r5, #1
 8003d5c:	e7c3      	b.n	8003ce6 <_printf_common+0x46>
 8003d5e:	18e1      	adds	r1, r4, r3
 8003d60:	1c5a      	adds	r2, r3, #1
 8003d62:	2030      	movs	r0, #48	; 0x30
 8003d64:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003d68:	4422      	add	r2, r4
 8003d6a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003d6e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003d72:	3302      	adds	r3, #2
 8003d74:	e7c5      	b.n	8003d02 <_printf_common+0x62>
 8003d76:	2301      	movs	r3, #1
 8003d78:	4622      	mov	r2, r4
 8003d7a:	4639      	mov	r1, r7
 8003d7c:	4630      	mov	r0, r6
 8003d7e:	47c0      	blx	r8
 8003d80:	3001      	adds	r0, #1
 8003d82:	d0e6      	beq.n	8003d52 <_printf_common+0xb2>
 8003d84:	f109 0901 	add.w	r9, r9, #1
 8003d88:	e7d8      	b.n	8003d3c <_printf_common+0x9c>
	...

08003d8c <_printf_i>:
 8003d8c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003d90:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8003d94:	460c      	mov	r4, r1
 8003d96:	7e09      	ldrb	r1, [r1, #24]
 8003d98:	b085      	sub	sp, #20
 8003d9a:	296e      	cmp	r1, #110	; 0x6e
 8003d9c:	4617      	mov	r7, r2
 8003d9e:	4606      	mov	r6, r0
 8003da0:	4698      	mov	r8, r3
 8003da2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003da4:	f000 80b3 	beq.w	8003f0e <_printf_i+0x182>
 8003da8:	d822      	bhi.n	8003df0 <_printf_i+0x64>
 8003daa:	2963      	cmp	r1, #99	; 0x63
 8003dac:	d036      	beq.n	8003e1c <_printf_i+0x90>
 8003dae:	d80a      	bhi.n	8003dc6 <_printf_i+0x3a>
 8003db0:	2900      	cmp	r1, #0
 8003db2:	f000 80b9 	beq.w	8003f28 <_printf_i+0x19c>
 8003db6:	2958      	cmp	r1, #88	; 0x58
 8003db8:	f000 8083 	beq.w	8003ec2 <_printf_i+0x136>
 8003dbc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003dc0:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8003dc4:	e032      	b.n	8003e2c <_printf_i+0xa0>
 8003dc6:	2964      	cmp	r1, #100	; 0x64
 8003dc8:	d001      	beq.n	8003dce <_printf_i+0x42>
 8003dca:	2969      	cmp	r1, #105	; 0x69
 8003dcc:	d1f6      	bne.n	8003dbc <_printf_i+0x30>
 8003dce:	6820      	ldr	r0, [r4, #0]
 8003dd0:	6813      	ldr	r3, [r2, #0]
 8003dd2:	0605      	lsls	r5, r0, #24
 8003dd4:	f103 0104 	add.w	r1, r3, #4
 8003dd8:	d52a      	bpl.n	8003e30 <_printf_i+0xa4>
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	6011      	str	r1, [r2, #0]
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	da03      	bge.n	8003dea <_printf_i+0x5e>
 8003de2:	222d      	movs	r2, #45	; 0x2d
 8003de4:	425b      	negs	r3, r3
 8003de6:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8003dea:	486f      	ldr	r0, [pc, #444]	; (8003fa8 <_printf_i+0x21c>)
 8003dec:	220a      	movs	r2, #10
 8003dee:	e039      	b.n	8003e64 <_printf_i+0xd8>
 8003df0:	2973      	cmp	r1, #115	; 0x73
 8003df2:	f000 809d 	beq.w	8003f30 <_printf_i+0x1a4>
 8003df6:	d808      	bhi.n	8003e0a <_printf_i+0x7e>
 8003df8:	296f      	cmp	r1, #111	; 0x6f
 8003dfa:	d020      	beq.n	8003e3e <_printf_i+0xb2>
 8003dfc:	2970      	cmp	r1, #112	; 0x70
 8003dfe:	d1dd      	bne.n	8003dbc <_printf_i+0x30>
 8003e00:	6823      	ldr	r3, [r4, #0]
 8003e02:	f043 0320 	orr.w	r3, r3, #32
 8003e06:	6023      	str	r3, [r4, #0]
 8003e08:	e003      	b.n	8003e12 <_printf_i+0x86>
 8003e0a:	2975      	cmp	r1, #117	; 0x75
 8003e0c:	d017      	beq.n	8003e3e <_printf_i+0xb2>
 8003e0e:	2978      	cmp	r1, #120	; 0x78
 8003e10:	d1d4      	bne.n	8003dbc <_printf_i+0x30>
 8003e12:	2378      	movs	r3, #120	; 0x78
 8003e14:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003e18:	4864      	ldr	r0, [pc, #400]	; (8003fac <_printf_i+0x220>)
 8003e1a:	e055      	b.n	8003ec8 <_printf_i+0x13c>
 8003e1c:	6813      	ldr	r3, [r2, #0]
 8003e1e:	1d19      	adds	r1, r3, #4
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	6011      	str	r1, [r2, #0]
 8003e24:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003e28:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003e2c:	2301      	movs	r3, #1
 8003e2e:	e08c      	b.n	8003f4a <_printf_i+0x1be>
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	6011      	str	r1, [r2, #0]
 8003e34:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003e38:	bf18      	it	ne
 8003e3a:	b21b      	sxthne	r3, r3
 8003e3c:	e7cf      	b.n	8003dde <_printf_i+0x52>
 8003e3e:	6813      	ldr	r3, [r2, #0]
 8003e40:	6825      	ldr	r5, [r4, #0]
 8003e42:	1d18      	adds	r0, r3, #4
 8003e44:	6010      	str	r0, [r2, #0]
 8003e46:	0628      	lsls	r0, r5, #24
 8003e48:	d501      	bpl.n	8003e4e <_printf_i+0xc2>
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	e002      	b.n	8003e54 <_printf_i+0xc8>
 8003e4e:	0668      	lsls	r0, r5, #25
 8003e50:	d5fb      	bpl.n	8003e4a <_printf_i+0xbe>
 8003e52:	881b      	ldrh	r3, [r3, #0]
 8003e54:	4854      	ldr	r0, [pc, #336]	; (8003fa8 <_printf_i+0x21c>)
 8003e56:	296f      	cmp	r1, #111	; 0x6f
 8003e58:	bf14      	ite	ne
 8003e5a:	220a      	movne	r2, #10
 8003e5c:	2208      	moveq	r2, #8
 8003e5e:	2100      	movs	r1, #0
 8003e60:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003e64:	6865      	ldr	r5, [r4, #4]
 8003e66:	60a5      	str	r5, [r4, #8]
 8003e68:	2d00      	cmp	r5, #0
 8003e6a:	f2c0 8095 	blt.w	8003f98 <_printf_i+0x20c>
 8003e6e:	6821      	ldr	r1, [r4, #0]
 8003e70:	f021 0104 	bic.w	r1, r1, #4
 8003e74:	6021      	str	r1, [r4, #0]
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d13d      	bne.n	8003ef6 <_printf_i+0x16a>
 8003e7a:	2d00      	cmp	r5, #0
 8003e7c:	f040 808e 	bne.w	8003f9c <_printf_i+0x210>
 8003e80:	4665      	mov	r5, ip
 8003e82:	2a08      	cmp	r2, #8
 8003e84:	d10b      	bne.n	8003e9e <_printf_i+0x112>
 8003e86:	6823      	ldr	r3, [r4, #0]
 8003e88:	07db      	lsls	r3, r3, #31
 8003e8a:	d508      	bpl.n	8003e9e <_printf_i+0x112>
 8003e8c:	6923      	ldr	r3, [r4, #16]
 8003e8e:	6862      	ldr	r2, [r4, #4]
 8003e90:	429a      	cmp	r2, r3
 8003e92:	bfde      	ittt	le
 8003e94:	2330      	movle	r3, #48	; 0x30
 8003e96:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003e9a:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003e9e:	ebac 0305 	sub.w	r3, ip, r5
 8003ea2:	6123      	str	r3, [r4, #16]
 8003ea4:	f8cd 8000 	str.w	r8, [sp]
 8003ea8:	463b      	mov	r3, r7
 8003eaa:	aa03      	add	r2, sp, #12
 8003eac:	4621      	mov	r1, r4
 8003eae:	4630      	mov	r0, r6
 8003eb0:	f7ff fef6 	bl	8003ca0 <_printf_common>
 8003eb4:	3001      	adds	r0, #1
 8003eb6:	d14d      	bne.n	8003f54 <_printf_i+0x1c8>
 8003eb8:	f04f 30ff 	mov.w	r0, #4294967295
 8003ebc:	b005      	add	sp, #20
 8003ebe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003ec2:	4839      	ldr	r0, [pc, #228]	; (8003fa8 <_printf_i+0x21c>)
 8003ec4:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8003ec8:	6813      	ldr	r3, [r2, #0]
 8003eca:	6821      	ldr	r1, [r4, #0]
 8003ecc:	1d1d      	adds	r5, r3, #4
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	6015      	str	r5, [r2, #0]
 8003ed2:	060a      	lsls	r2, r1, #24
 8003ed4:	d50b      	bpl.n	8003eee <_printf_i+0x162>
 8003ed6:	07ca      	lsls	r2, r1, #31
 8003ed8:	bf44      	itt	mi
 8003eda:	f041 0120 	orrmi.w	r1, r1, #32
 8003ede:	6021      	strmi	r1, [r4, #0]
 8003ee0:	b91b      	cbnz	r3, 8003eea <_printf_i+0x15e>
 8003ee2:	6822      	ldr	r2, [r4, #0]
 8003ee4:	f022 0220 	bic.w	r2, r2, #32
 8003ee8:	6022      	str	r2, [r4, #0]
 8003eea:	2210      	movs	r2, #16
 8003eec:	e7b7      	b.n	8003e5e <_printf_i+0xd2>
 8003eee:	064d      	lsls	r5, r1, #25
 8003ef0:	bf48      	it	mi
 8003ef2:	b29b      	uxthmi	r3, r3
 8003ef4:	e7ef      	b.n	8003ed6 <_printf_i+0x14a>
 8003ef6:	4665      	mov	r5, ip
 8003ef8:	fbb3 f1f2 	udiv	r1, r3, r2
 8003efc:	fb02 3311 	mls	r3, r2, r1, r3
 8003f00:	5cc3      	ldrb	r3, [r0, r3]
 8003f02:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8003f06:	460b      	mov	r3, r1
 8003f08:	2900      	cmp	r1, #0
 8003f0a:	d1f5      	bne.n	8003ef8 <_printf_i+0x16c>
 8003f0c:	e7b9      	b.n	8003e82 <_printf_i+0xf6>
 8003f0e:	6813      	ldr	r3, [r2, #0]
 8003f10:	6825      	ldr	r5, [r4, #0]
 8003f12:	6961      	ldr	r1, [r4, #20]
 8003f14:	1d18      	adds	r0, r3, #4
 8003f16:	6010      	str	r0, [r2, #0]
 8003f18:	0628      	lsls	r0, r5, #24
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	d501      	bpl.n	8003f22 <_printf_i+0x196>
 8003f1e:	6019      	str	r1, [r3, #0]
 8003f20:	e002      	b.n	8003f28 <_printf_i+0x19c>
 8003f22:	066a      	lsls	r2, r5, #25
 8003f24:	d5fb      	bpl.n	8003f1e <_printf_i+0x192>
 8003f26:	8019      	strh	r1, [r3, #0]
 8003f28:	2300      	movs	r3, #0
 8003f2a:	6123      	str	r3, [r4, #16]
 8003f2c:	4665      	mov	r5, ip
 8003f2e:	e7b9      	b.n	8003ea4 <_printf_i+0x118>
 8003f30:	6813      	ldr	r3, [r2, #0]
 8003f32:	1d19      	adds	r1, r3, #4
 8003f34:	6011      	str	r1, [r2, #0]
 8003f36:	681d      	ldr	r5, [r3, #0]
 8003f38:	6862      	ldr	r2, [r4, #4]
 8003f3a:	2100      	movs	r1, #0
 8003f3c:	4628      	mov	r0, r5
 8003f3e:	f7fc f94f 	bl	80001e0 <memchr>
 8003f42:	b108      	cbz	r0, 8003f48 <_printf_i+0x1bc>
 8003f44:	1b40      	subs	r0, r0, r5
 8003f46:	6060      	str	r0, [r4, #4]
 8003f48:	6863      	ldr	r3, [r4, #4]
 8003f4a:	6123      	str	r3, [r4, #16]
 8003f4c:	2300      	movs	r3, #0
 8003f4e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003f52:	e7a7      	b.n	8003ea4 <_printf_i+0x118>
 8003f54:	6923      	ldr	r3, [r4, #16]
 8003f56:	462a      	mov	r2, r5
 8003f58:	4639      	mov	r1, r7
 8003f5a:	4630      	mov	r0, r6
 8003f5c:	47c0      	blx	r8
 8003f5e:	3001      	adds	r0, #1
 8003f60:	d0aa      	beq.n	8003eb8 <_printf_i+0x12c>
 8003f62:	6823      	ldr	r3, [r4, #0]
 8003f64:	079b      	lsls	r3, r3, #30
 8003f66:	d413      	bmi.n	8003f90 <_printf_i+0x204>
 8003f68:	68e0      	ldr	r0, [r4, #12]
 8003f6a:	9b03      	ldr	r3, [sp, #12]
 8003f6c:	4298      	cmp	r0, r3
 8003f6e:	bfb8      	it	lt
 8003f70:	4618      	movlt	r0, r3
 8003f72:	e7a3      	b.n	8003ebc <_printf_i+0x130>
 8003f74:	2301      	movs	r3, #1
 8003f76:	464a      	mov	r2, r9
 8003f78:	4639      	mov	r1, r7
 8003f7a:	4630      	mov	r0, r6
 8003f7c:	47c0      	blx	r8
 8003f7e:	3001      	adds	r0, #1
 8003f80:	d09a      	beq.n	8003eb8 <_printf_i+0x12c>
 8003f82:	3501      	adds	r5, #1
 8003f84:	68e3      	ldr	r3, [r4, #12]
 8003f86:	9a03      	ldr	r2, [sp, #12]
 8003f88:	1a9b      	subs	r3, r3, r2
 8003f8a:	42ab      	cmp	r3, r5
 8003f8c:	dcf2      	bgt.n	8003f74 <_printf_i+0x1e8>
 8003f8e:	e7eb      	b.n	8003f68 <_printf_i+0x1dc>
 8003f90:	2500      	movs	r5, #0
 8003f92:	f104 0919 	add.w	r9, r4, #25
 8003f96:	e7f5      	b.n	8003f84 <_printf_i+0x1f8>
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d1ac      	bne.n	8003ef6 <_printf_i+0x16a>
 8003f9c:	7803      	ldrb	r3, [r0, #0]
 8003f9e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003fa2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003fa6:	e76c      	b.n	8003e82 <_printf_i+0xf6>
 8003fa8:	08005305 	.word	0x08005305
 8003fac:	08005316 	.word	0x08005316

08003fb0 <memcpy>:
 8003fb0:	b510      	push	{r4, lr}
 8003fb2:	1e43      	subs	r3, r0, #1
 8003fb4:	440a      	add	r2, r1
 8003fb6:	4291      	cmp	r1, r2
 8003fb8:	d100      	bne.n	8003fbc <memcpy+0xc>
 8003fba:	bd10      	pop	{r4, pc}
 8003fbc:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003fc0:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003fc4:	e7f7      	b.n	8003fb6 <memcpy+0x6>

08003fc6 <memmove>:
 8003fc6:	4288      	cmp	r0, r1
 8003fc8:	b510      	push	{r4, lr}
 8003fca:	eb01 0302 	add.w	r3, r1, r2
 8003fce:	d807      	bhi.n	8003fe0 <memmove+0x1a>
 8003fd0:	1e42      	subs	r2, r0, #1
 8003fd2:	4299      	cmp	r1, r3
 8003fd4:	d00a      	beq.n	8003fec <memmove+0x26>
 8003fd6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003fda:	f802 4f01 	strb.w	r4, [r2, #1]!
 8003fde:	e7f8      	b.n	8003fd2 <memmove+0xc>
 8003fe0:	4283      	cmp	r3, r0
 8003fe2:	d9f5      	bls.n	8003fd0 <memmove+0xa>
 8003fe4:	1881      	adds	r1, r0, r2
 8003fe6:	1ad2      	subs	r2, r2, r3
 8003fe8:	42d3      	cmn	r3, r2
 8003fea:	d100      	bne.n	8003fee <memmove+0x28>
 8003fec:	bd10      	pop	{r4, pc}
 8003fee:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003ff2:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8003ff6:	e7f7      	b.n	8003fe8 <memmove+0x22>

08003ff8 <_free_r>:
 8003ff8:	b538      	push	{r3, r4, r5, lr}
 8003ffa:	4605      	mov	r5, r0
 8003ffc:	2900      	cmp	r1, #0
 8003ffe:	d045      	beq.n	800408c <_free_r+0x94>
 8004000:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004004:	1f0c      	subs	r4, r1, #4
 8004006:	2b00      	cmp	r3, #0
 8004008:	bfb8      	it	lt
 800400a:	18e4      	addlt	r4, r4, r3
 800400c:	f000 f8d2 	bl	80041b4 <__malloc_lock>
 8004010:	4a1f      	ldr	r2, [pc, #124]	; (8004090 <_free_r+0x98>)
 8004012:	6813      	ldr	r3, [r2, #0]
 8004014:	4610      	mov	r0, r2
 8004016:	b933      	cbnz	r3, 8004026 <_free_r+0x2e>
 8004018:	6063      	str	r3, [r4, #4]
 800401a:	6014      	str	r4, [r2, #0]
 800401c:	4628      	mov	r0, r5
 800401e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004022:	f000 b8c8 	b.w	80041b6 <__malloc_unlock>
 8004026:	42a3      	cmp	r3, r4
 8004028:	d90c      	bls.n	8004044 <_free_r+0x4c>
 800402a:	6821      	ldr	r1, [r4, #0]
 800402c:	1862      	adds	r2, r4, r1
 800402e:	4293      	cmp	r3, r2
 8004030:	bf04      	itt	eq
 8004032:	681a      	ldreq	r2, [r3, #0]
 8004034:	685b      	ldreq	r3, [r3, #4]
 8004036:	6063      	str	r3, [r4, #4]
 8004038:	bf04      	itt	eq
 800403a:	1852      	addeq	r2, r2, r1
 800403c:	6022      	streq	r2, [r4, #0]
 800403e:	6004      	str	r4, [r0, #0]
 8004040:	e7ec      	b.n	800401c <_free_r+0x24>
 8004042:	4613      	mov	r3, r2
 8004044:	685a      	ldr	r2, [r3, #4]
 8004046:	b10a      	cbz	r2, 800404c <_free_r+0x54>
 8004048:	42a2      	cmp	r2, r4
 800404a:	d9fa      	bls.n	8004042 <_free_r+0x4a>
 800404c:	6819      	ldr	r1, [r3, #0]
 800404e:	1858      	adds	r0, r3, r1
 8004050:	42a0      	cmp	r0, r4
 8004052:	d10b      	bne.n	800406c <_free_r+0x74>
 8004054:	6820      	ldr	r0, [r4, #0]
 8004056:	4401      	add	r1, r0
 8004058:	1858      	adds	r0, r3, r1
 800405a:	4282      	cmp	r2, r0
 800405c:	6019      	str	r1, [r3, #0]
 800405e:	d1dd      	bne.n	800401c <_free_r+0x24>
 8004060:	6810      	ldr	r0, [r2, #0]
 8004062:	6852      	ldr	r2, [r2, #4]
 8004064:	605a      	str	r2, [r3, #4]
 8004066:	4401      	add	r1, r0
 8004068:	6019      	str	r1, [r3, #0]
 800406a:	e7d7      	b.n	800401c <_free_r+0x24>
 800406c:	d902      	bls.n	8004074 <_free_r+0x7c>
 800406e:	230c      	movs	r3, #12
 8004070:	602b      	str	r3, [r5, #0]
 8004072:	e7d3      	b.n	800401c <_free_r+0x24>
 8004074:	6820      	ldr	r0, [r4, #0]
 8004076:	1821      	adds	r1, r4, r0
 8004078:	428a      	cmp	r2, r1
 800407a:	bf04      	itt	eq
 800407c:	6811      	ldreq	r1, [r2, #0]
 800407e:	6852      	ldreq	r2, [r2, #4]
 8004080:	6062      	str	r2, [r4, #4]
 8004082:	bf04      	itt	eq
 8004084:	1809      	addeq	r1, r1, r0
 8004086:	6021      	streq	r1, [r4, #0]
 8004088:	605c      	str	r4, [r3, #4]
 800408a:	e7c7      	b.n	800401c <_free_r+0x24>
 800408c:	bd38      	pop	{r3, r4, r5, pc}
 800408e:	bf00      	nop
 8004090:	20000098 	.word	0x20000098

08004094 <_malloc_r>:
 8004094:	b570      	push	{r4, r5, r6, lr}
 8004096:	1ccd      	adds	r5, r1, #3
 8004098:	f025 0503 	bic.w	r5, r5, #3
 800409c:	3508      	adds	r5, #8
 800409e:	2d0c      	cmp	r5, #12
 80040a0:	bf38      	it	cc
 80040a2:	250c      	movcc	r5, #12
 80040a4:	2d00      	cmp	r5, #0
 80040a6:	4606      	mov	r6, r0
 80040a8:	db01      	blt.n	80040ae <_malloc_r+0x1a>
 80040aa:	42a9      	cmp	r1, r5
 80040ac:	d903      	bls.n	80040b6 <_malloc_r+0x22>
 80040ae:	230c      	movs	r3, #12
 80040b0:	6033      	str	r3, [r6, #0]
 80040b2:	2000      	movs	r0, #0
 80040b4:	bd70      	pop	{r4, r5, r6, pc}
 80040b6:	f000 f87d 	bl	80041b4 <__malloc_lock>
 80040ba:	4a21      	ldr	r2, [pc, #132]	; (8004140 <_malloc_r+0xac>)
 80040bc:	6814      	ldr	r4, [r2, #0]
 80040be:	4621      	mov	r1, r4
 80040c0:	b991      	cbnz	r1, 80040e8 <_malloc_r+0x54>
 80040c2:	4c20      	ldr	r4, [pc, #128]	; (8004144 <_malloc_r+0xb0>)
 80040c4:	6823      	ldr	r3, [r4, #0]
 80040c6:	b91b      	cbnz	r3, 80040d0 <_malloc_r+0x3c>
 80040c8:	4630      	mov	r0, r6
 80040ca:	f000 f863 	bl	8004194 <_sbrk_r>
 80040ce:	6020      	str	r0, [r4, #0]
 80040d0:	4629      	mov	r1, r5
 80040d2:	4630      	mov	r0, r6
 80040d4:	f000 f85e 	bl	8004194 <_sbrk_r>
 80040d8:	1c43      	adds	r3, r0, #1
 80040da:	d124      	bne.n	8004126 <_malloc_r+0x92>
 80040dc:	230c      	movs	r3, #12
 80040de:	6033      	str	r3, [r6, #0]
 80040e0:	4630      	mov	r0, r6
 80040e2:	f000 f868 	bl	80041b6 <__malloc_unlock>
 80040e6:	e7e4      	b.n	80040b2 <_malloc_r+0x1e>
 80040e8:	680b      	ldr	r3, [r1, #0]
 80040ea:	1b5b      	subs	r3, r3, r5
 80040ec:	d418      	bmi.n	8004120 <_malloc_r+0x8c>
 80040ee:	2b0b      	cmp	r3, #11
 80040f0:	d90f      	bls.n	8004112 <_malloc_r+0x7e>
 80040f2:	600b      	str	r3, [r1, #0]
 80040f4:	50cd      	str	r5, [r1, r3]
 80040f6:	18cc      	adds	r4, r1, r3
 80040f8:	4630      	mov	r0, r6
 80040fa:	f000 f85c 	bl	80041b6 <__malloc_unlock>
 80040fe:	f104 000b 	add.w	r0, r4, #11
 8004102:	1d23      	adds	r3, r4, #4
 8004104:	f020 0007 	bic.w	r0, r0, #7
 8004108:	1ac3      	subs	r3, r0, r3
 800410a:	d0d3      	beq.n	80040b4 <_malloc_r+0x20>
 800410c:	425a      	negs	r2, r3
 800410e:	50e2      	str	r2, [r4, r3]
 8004110:	e7d0      	b.n	80040b4 <_malloc_r+0x20>
 8004112:	428c      	cmp	r4, r1
 8004114:	684b      	ldr	r3, [r1, #4]
 8004116:	bf16      	itet	ne
 8004118:	6063      	strne	r3, [r4, #4]
 800411a:	6013      	streq	r3, [r2, #0]
 800411c:	460c      	movne	r4, r1
 800411e:	e7eb      	b.n	80040f8 <_malloc_r+0x64>
 8004120:	460c      	mov	r4, r1
 8004122:	6849      	ldr	r1, [r1, #4]
 8004124:	e7cc      	b.n	80040c0 <_malloc_r+0x2c>
 8004126:	1cc4      	adds	r4, r0, #3
 8004128:	f024 0403 	bic.w	r4, r4, #3
 800412c:	42a0      	cmp	r0, r4
 800412e:	d005      	beq.n	800413c <_malloc_r+0xa8>
 8004130:	1a21      	subs	r1, r4, r0
 8004132:	4630      	mov	r0, r6
 8004134:	f000 f82e 	bl	8004194 <_sbrk_r>
 8004138:	3001      	adds	r0, #1
 800413a:	d0cf      	beq.n	80040dc <_malloc_r+0x48>
 800413c:	6025      	str	r5, [r4, #0]
 800413e:	e7db      	b.n	80040f8 <_malloc_r+0x64>
 8004140:	20000098 	.word	0x20000098
 8004144:	2000009c 	.word	0x2000009c

08004148 <_realloc_r>:
 8004148:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800414a:	4607      	mov	r7, r0
 800414c:	4614      	mov	r4, r2
 800414e:	460e      	mov	r6, r1
 8004150:	b921      	cbnz	r1, 800415c <_realloc_r+0x14>
 8004152:	4611      	mov	r1, r2
 8004154:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004158:	f7ff bf9c 	b.w	8004094 <_malloc_r>
 800415c:	b922      	cbnz	r2, 8004168 <_realloc_r+0x20>
 800415e:	f7ff ff4b 	bl	8003ff8 <_free_r>
 8004162:	4625      	mov	r5, r4
 8004164:	4628      	mov	r0, r5
 8004166:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004168:	f000 f826 	bl	80041b8 <_malloc_usable_size_r>
 800416c:	42a0      	cmp	r0, r4
 800416e:	d20f      	bcs.n	8004190 <_realloc_r+0x48>
 8004170:	4621      	mov	r1, r4
 8004172:	4638      	mov	r0, r7
 8004174:	f7ff ff8e 	bl	8004094 <_malloc_r>
 8004178:	4605      	mov	r5, r0
 800417a:	2800      	cmp	r0, #0
 800417c:	d0f2      	beq.n	8004164 <_realloc_r+0x1c>
 800417e:	4631      	mov	r1, r6
 8004180:	4622      	mov	r2, r4
 8004182:	f7ff ff15 	bl	8003fb0 <memcpy>
 8004186:	4631      	mov	r1, r6
 8004188:	4638      	mov	r0, r7
 800418a:	f7ff ff35 	bl	8003ff8 <_free_r>
 800418e:	e7e9      	b.n	8004164 <_realloc_r+0x1c>
 8004190:	4635      	mov	r5, r6
 8004192:	e7e7      	b.n	8004164 <_realloc_r+0x1c>

08004194 <_sbrk_r>:
 8004194:	b538      	push	{r3, r4, r5, lr}
 8004196:	4c06      	ldr	r4, [pc, #24]	; (80041b0 <_sbrk_r+0x1c>)
 8004198:	2300      	movs	r3, #0
 800419a:	4605      	mov	r5, r0
 800419c:	4608      	mov	r0, r1
 800419e:	6023      	str	r3, [r4, #0]
 80041a0:	f7fd fa56 	bl	8001650 <_sbrk>
 80041a4:	1c43      	adds	r3, r0, #1
 80041a6:	d102      	bne.n	80041ae <_sbrk_r+0x1a>
 80041a8:	6823      	ldr	r3, [r4, #0]
 80041aa:	b103      	cbz	r3, 80041ae <_sbrk_r+0x1a>
 80041ac:	602b      	str	r3, [r5, #0]
 80041ae:	bd38      	pop	{r3, r4, r5, pc}
 80041b0:	20000124 	.word	0x20000124

080041b4 <__malloc_lock>:
 80041b4:	4770      	bx	lr

080041b6 <__malloc_unlock>:
 80041b6:	4770      	bx	lr

080041b8 <_malloc_usable_size_r>:
 80041b8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80041bc:	1f18      	subs	r0, r3, #4
 80041be:	2b00      	cmp	r3, #0
 80041c0:	bfbc      	itt	lt
 80041c2:	580b      	ldrlt	r3, [r1, r0]
 80041c4:	18c0      	addlt	r0, r0, r3
 80041c6:	4770      	bx	lr

080041c8 <pow>:
 80041c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80041cc:	ed2d 8b04 	vpush	{d8-d9}
 80041d0:	f8df 92d0 	ldr.w	r9, [pc, #720]	; 80044a4 <pow+0x2dc>
 80041d4:	b08d      	sub	sp, #52	; 0x34
 80041d6:	ec57 6b10 	vmov	r6, r7, d0
 80041da:	ec55 4b11 	vmov	r4, r5, d1
 80041de:	f000 f963 	bl	80044a8 <__ieee754_pow>
 80041e2:	f999 3000 	ldrsb.w	r3, [r9]
 80041e6:	9300      	str	r3, [sp, #0]
 80041e8:	3301      	adds	r3, #1
 80041ea:	eeb0 8a40 	vmov.f32	s16, s0
 80041ee:	eef0 8a60 	vmov.f32	s17, s1
 80041f2:	46c8      	mov	r8, r9
 80041f4:	d05f      	beq.n	80042b6 <pow+0xee>
 80041f6:	4622      	mov	r2, r4
 80041f8:	462b      	mov	r3, r5
 80041fa:	4620      	mov	r0, r4
 80041fc:	4629      	mov	r1, r5
 80041fe:	f7fc fc95 	bl	8000b2c <__aeabi_dcmpun>
 8004202:	4683      	mov	fp, r0
 8004204:	2800      	cmp	r0, #0
 8004206:	d156      	bne.n	80042b6 <pow+0xee>
 8004208:	4632      	mov	r2, r6
 800420a:	463b      	mov	r3, r7
 800420c:	4630      	mov	r0, r6
 800420e:	4639      	mov	r1, r7
 8004210:	f7fc fc8c 	bl	8000b2c <__aeabi_dcmpun>
 8004214:	9001      	str	r0, [sp, #4]
 8004216:	b1e8      	cbz	r0, 8004254 <pow+0x8c>
 8004218:	2200      	movs	r2, #0
 800421a:	2300      	movs	r3, #0
 800421c:	4620      	mov	r0, r4
 800421e:	4629      	mov	r1, r5
 8004220:	f7fc fc52 	bl	8000ac8 <__aeabi_dcmpeq>
 8004224:	2800      	cmp	r0, #0
 8004226:	d046      	beq.n	80042b6 <pow+0xee>
 8004228:	2301      	movs	r3, #1
 800422a:	9302      	str	r3, [sp, #8]
 800422c:	4b96      	ldr	r3, [pc, #600]	; (8004488 <pow+0x2c0>)
 800422e:	9303      	str	r3, [sp, #12]
 8004230:	4b96      	ldr	r3, [pc, #600]	; (800448c <pow+0x2c4>)
 8004232:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 8004236:	2200      	movs	r2, #0
 8004238:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800423c:	9b00      	ldr	r3, [sp, #0]
 800423e:	2b02      	cmp	r3, #2
 8004240:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8004244:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8004248:	d033      	beq.n	80042b2 <pow+0xea>
 800424a:	a802      	add	r0, sp, #8
 800424c:	f000 fefb 	bl	8005046 <matherr>
 8004250:	bb48      	cbnz	r0, 80042a6 <pow+0xde>
 8004252:	e05d      	b.n	8004310 <pow+0x148>
 8004254:	f04f 0a00 	mov.w	sl, #0
 8004258:	f04f 0b00 	mov.w	fp, #0
 800425c:	4652      	mov	r2, sl
 800425e:	465b      	mov	r3, fp
 8004260:	4630      	mov	r0, r6
 8004262:	4639      	mov	r1, r7
 8004264:	f7fc fc30 	bl	8000ac8 <__aeabi_dcmpeq>
 8004268:	ec4b ab19 	vmov	d9, sl, fp
 800426c:	2800      	cmp	r0, #0
 800426e:	d054      	beq.n	800431a <pow+0x152>
 8004270:	4652      	mov	r2, sl
 8004272:	465b      	mov	r3, fp
 8004274:	4620      	mov	r0, r4
 8004276:	4629      	mov	r1, r5
 8004278:	f7fc fc26 	bl	8000ac8 <__aeabi_dcmpeq>
 800427c:	4680      	mov	r8, r0
 800427e:	b318      	cbz	r0, 80042c8 <pow+0x100>
 8004280:	2301      	movs	r3, #1
 8004282:	9302      	str	r3, [sp, #8]
 8004284:	4b80      	ldr	r3, [pc, #512]	; (8004488 <pow+0x2c0>)
 8004286:	9303      	str	r3, [sp, #12]
 8004288:	9b01      	ldr	r3, [sp, #4]
 800428a:	930a      	str	r3, [sp, #40]	; 0x28
 800428c:	9b00      	ldr	r3, [sp, #0]
 800428e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8004292:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8004296:	e9cd ab08 	strd	sl, fp, [sp, #32]
 800429a:	2b00      	cmp	r3, #0
 800429c:	d0d5      	beq.n	800424a <pow+0x82>
 800429e:	4b7b      	ldr	r3, [pc, #492]	; (800448c <pow+0x2c4>)
 80042a0:	2200      	movs	r2, #0
 80042a2:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80042a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80042a8:	b11b      	cbz	r3, 80042b2 <pow+0xea>
 80042aa:	f7ff fb55 	bl	8003958 <__errno>
 80042ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80042b0:	6003      	str	r3, [r0, #0]
 80042b2:	ed9d 8b08 	vldr	d8, [sp, #32]
 80042b6:	eeb0 0a48 	vmov.f32	s0, s16
 80042ba:	eef0 0a68 	vmov.f32	s1, s17
 80042be:	b00d      	add	sp, #52	; 0x34
 80042c0:	ecbd 8b04 	vpop	{d8-d9}
 80042c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80042c8:	ec45 4b10 	vmov	d0, r4, r5
 80042cc:	f000 feb3 	bl	8005036 <finite>
 80042d0:	2800      	cmp	r0, #0
 80042d2:	d0f0      	beq.n	80042b6 <pow+0xee>
 80042d4:	4652      	mov	r2, sl
 80042d6:	465b      	mov	r3, fp
 80042d8:	4620      	mov	r0, r4
 80042da:	4629      	mov	r1, r5
 80042dc:	f7fc fbfe 	bl	8000adc <__aeabi_dcmplt>
 80042e0:	2800      	cmp	r0, #0
 80042e2:	d0e8      	beq.n	80042b6 <pow+0xee>
 80042e4:	2301      	movs	r3, #1
 80042e6:	9302      	str	r3, [sp, #8]
 80042e8:	4b67      	ldr	r3, [pc, #412]	; (8004488 <pow+0x2c0>)
 80042ea:	9303      	str	r3, [sp, #12]
 80042ec:	f999 3000 	ldrsb.w	r3, [r9]
 80042f0:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 80042f4:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80042f8:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80042fc:	b913      	cbnz	r3, 8004304 <pow+0x13c>
 80042fe:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8004302:	e7a2      	b.n	800424a <pow+0x82>
 8004304:	4962      	ldr	r1, [pc, #392]	; (8004490 <pow+0x2c8>)
 8004306:	2000      	movs	r0, #0
 8004308:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800430c:	2b02      	cmp	r3, #2
 800430e:	d19c      	bne.n	800424a <pow+0x82>
 8004310:	f7ff fb22 	bl	8003958 <__errno>
 8004314:	2321      	movs	r3, #33	; 0x21
 8004316:	6003      	str	r3, [r0, #0]
 8004318:	e7c5      	b.n	80042a6 <pow+0xde>
 800431a:	eeb0 0a48 	vmov.f32	s0, s16
 800431e:	eef0 0a68 	vmov.f32	s1, s17
 8004322:	f000 fe88 	bl	8005036 <finite>
 8004326:	9000      	str	r0, [sp, #0]
 8004328:	2800      	cmp	r0, #0
 800432a:	f040 8081 	bne.w	8004430 <pow+0x268>
 800432e:	ec47 6b10 	vmov	d0, r6, r7
 8004332:	f000 fe80 	bl	8005036 <finite>
 8004336:	2800      	cmp	r0, #0
 8004338:	d07a      	beq.n	8004430 <pow+0x268>
 800433a:	ec45 4b10 	vmov	d0, r4, r5
 800433e:	f000 fe7a 	bl	8005036 <finite>
 8004342:	2800      	cmp	r0, #0
 8004344:	d074      	beq.n	8004430 <pow+0x268>
 8004346:	ec53 2b18 	vmov	r2, r3, d8
 800434a:	ee18 0a10 	vmov	r0, s16
 800434e:	4619      	mov	r1, r3
 8004350:	f7fc fbec 	bl	8000b2c <__aeabi_dcmpun>
 8004354:	f999 9000 	ldrsb.w	r9, [r9]
 8004358:	4b4b      	ldr	r3, [pc, #300]	; (8004488 <pow+0x2c0>)
 800435a:	b1b0      	cbz	r0, 800438a <pow+0x1c2>
 800435c:	2201      	movs	r2, #1
 800435e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004362:	9b00      	ldr	r3, [sp, #0]
 8004364:	930a      	str	r3, [sp, #40]	; 0x28
 8004366:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800436a:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800436e:	f1b9 0f00 	cmp.w	r9, #0
 8004372:	d0c4      	beq.n	80042fe <pow+0x136>
 8004374:	4652      	mov	r2, sl
 8004376:	465b      	mov	r3, fp
 8004378:	4650      	mov	r0, sl
 800437a:	4659      	mov	r1, fp
 800437c:	f7fc fa66 	bl	800084c <__aeabi_ddiv>
 8004380:	f1b9 0f02 	cmp.w	r9, #2
 8004384:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8004388:	e7c1      	b.n	800430e <pow+0x146>
 800438a:	2203      	movs	r2, #3
 800438c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004390:	900a      	str	r0, [sp, #40]	; 0x28
 8004392:	4629      	mov	r1, r5
 8004394:	4620      	mov	r0, r4
 8004396:	2200      	movs	r2, #0
 8004398:	4b3e      	ldr	r3, [pc, #248]	; (8004494 <pow+0x2cc>)
 800439a:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800439e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80043a2:	f7fc f929 	bl	80005f8 <__aeabi_dmul>
 80043a6:	4604      	mov	r4, r0
 80043a8:	460d      	mov	r5, r1
 80043aa:	f1b9 0f00 	cmp.w	r9, #0
 80043ae:	d124      	bne.n	80043fa <pow+0x232>
 80043b0:	4b39      	ldr	r3, [pc, #228]	; (8004498 <pow+0x2d0>)
 80043b2:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80043b6:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80043ba:	4630      	mov	r0, r6
 80043bc:	4652      	mov	r2, sl
 80043be:	465b      	mov	r3, fp
 80043c0:	4639      	mov	r1, r7
 80043c2:	f7fc fb8b 	bl	8000adc <__aeabi_dcmplt>
 80043c6:	2800      	cmp	r0, #0
 80043c8:	d056      	beq.n	8004478 <pow+0x2b0>
 80043ca:	ec45 4b10 	vmov	d0, r4, r5
 80043ce:	f000 fe47 	bl	8005060 <rint>
 80043d2:	4622      	mov	r2, r4
 80043d4:	462b      	mov	r3, r5
 80043d6:	ec51 0b10 	vmov	r0, r1, d0
 80043da:	f7fc fb75 	bl	8000ac8 <__aeabi_dcmpeq>
 80043de:	b920      	cbnz	r0, 80043ea <pow+0x222>
 80043e0:	4b2e      	ldr	r3, [pc, #184]	; (800449c <pow+0x2d4>)
 80043e2:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80043e6:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80043ea:	f998 3000 	ldrsb.w	r3, [r8]
 80043ee:	2b02      	cmp	r3, #2
 80043f0:	d142      	bne.n	8004478 <pow+0x2b0>
 80043f2:	f7ff fab1 	bl	8003958 <__errno>
 80043f6:	2322      	movs	r3, #34	; 0x22
 80043f8:	e78d      	b.n	8004316 <pow+0x14e>
 80043fa:	4b29      	ldr	r3, [pc, #164]	; (80044a0 <pow+0x2d8>)
 80043fc:	2200      	movs	r2, #0
 80043fe:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8004402:	4630      	mov	r0, r6
 8004404:	4652      	mov	r2, sl
 8004406:	465b      	mov	r3, fp
 8004408:	4639      	mov	r1, r7
 800440a:	f7fc fb67 	bl	8000adc <__aeabi_dcmplt>
 800440e:	2800      	cmp	r0, #0
 8004410:	d0eb      	beq.n	80043ea <pow+0x222>
 8004412:	ec45 4b10 	vmov	d0, r4, r5
 8004416:	f000 fe23 	bl	8005060 <rint>
 800441a:	4622      	mov	r2, r4
 800441c:	462b      	mov	r3, r5
 800441e:	ec51 0b10 	vmov	r0, r1, d0
 8004422:	f7fc fb51 	bl	8000ac8 <__aeabi_dcmpeq>
 8004426:	2800      	cmp	r0, #0
 8004428:	d1df      	bne.n	80043ea <pow+0x222>
 800442a:	2200      	movs	r2, #0
 800442c:	4b18      	ldr	r3, [pc, #96]	; (8004490 <pow+0x2c8>)
 800442e:	e7da      	b.n	80043e6 <pow+0x21e>
 8004430:	2200      	movs	r2, #0
 8004432:	2300      	movs	r3, #0
 8004434:	ec51 0b18 	vmov	r0, r1, d8
 8004438:	f7fc fb46 	bl	8000ac8 <__aeabi_dcmpeq>
 800443c:	2800      	cmp	r0, #0
 800443e:	f43f af3a 	beq.w	80042b6 <pow+0xee>
 8004442:	ec47 6b10 	vmov	d0, r6, r7
 8004446:	f000 fdf6 	bl	8005036 <finite>
 800444a:	2800      	cmp	r0, #0
 800444c:	f43f af33 	beq.w	80042b6 <pow+0xee>
 8004450:	ec45 4b10 	vmov	d0, r4, r5
 8004454:	f000 fdef 	bl	8005036 <finite>
 8004458:	2800      	cmp	r0, #0
 800445a:	f43f af2c 	beq.w	80042b6 <pow+0xee>
 800445e:	2304      	movs	r3, #4
 8004460:	9302      	str	r3, [sp, #8]
 8004462:	4b09      	ldr	r3, [pc, #36]	; (8004488 <pow+0x2c0>)
 8004464:	9303      	str	r3, [sp, #12]
 8004466:	2300      	movs	r3, #0
 8004468:	930a      	str	r3, [sp, #40]	; 0x28
 800446a:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800446e:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8004472:	ed8d 9b08 	vstr	d9, [sp, #32]
 8004476:	e7b8      	b.n	80043ea <pow+0x222>
 8004478:	a802      	add	r0, sp, #8
 800447a:	f000 fde4 	bl	8005046 <matherr>
 800447e:	2800      	cmp	r0, #0
 8004480:	f47f af11 	bne.w	80042a6 <pow+0xde>
 8004484:	e7b5      	b.n	80043f2 <pow+0x22a>
 8004486:	bf00      	nop
 8004488:	08005327 	.word	0x08005327
 800448c:	3ff00000 	.word	0x3ff00000
 8004490:	fff00000 	.word	0xfff00000
 8004494:	3fe00000 	.word	0x3fe00000
 8004498:	47efffff 	.word	0x47efffff
 800449c:	c7efffff 	.word	0xc7efffff
 80044a0:	7ff00000 	.word	0x7ff00000
 80044a4:	20000070 	.word	0x20000070

080044a8 <__ieee754_pow>:
 80044a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80044ac:	b091      	sub	sp, #68	; 0x44
 80044ae:	ed8d 1b00 	vstr	d1, [sp]
 80044b2:	e9dd 2900 	ldrd	r2, r9, [sp]
 80044b6:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 80044ba:	ea58 0302 	orrs.w	r3, r8, r2
 80044be:	ec57 6b10 	vmov	r6, r7, d0
 80044c2:	f000 84be 	beq.w	8004e42 <__ieee754_pow+0x99a>
 80044c6:	4b7a      	ldr	r3, [pc, #488]	; (80046b0 <__ieee754_pow+0x208>)
 80044c8:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 80044cc:	429c      	cmp	r4, r3
 80044ce:	463d      	mov	r5, r7
 80044d0:	ee10 aa10 	vmov	sl, s0
 80044d4:	dc09      	bgt.n	80044ea <__ieee754_pow+0x42>
 80044d6:	d103      	bne.n	80044e0 <__ieee754_pow+0x38>
 80044d8:	b93e      	cbnz	r6, 80044ea <__ieee754_pow+0x42>
 80044da:	45a0      	cmp	r8, r4
 80044dc:	dc0d      	bgt.n	80044fa <__ieee754_pow+0x52>
 80044de:	e001      	b.n	80044e4 <__ieee754_pow+0x3c>
 80044e0:	4598      	cmp	r8, r3
 80044e2:	dc02      	bgt.n	80044ea <__ieee754_pow+0x42>
 80044e4:	4598      	cmp	r8, r3
 80044e6:	d10e      	bne.n	8004506 <__ieee754_pow+0x5e>
 80044e8:	b16a      	cbz	r2, 8004506 <__ieee754_pow+0x5e>
 80044ea:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80044ee:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80044f2:	ea54 030a 	orrs.w	r3, r4, sl
 80044f6:	f000 84a4 	beq.w	8004e42 <__ieee754_pow+0x99a>
 80044fa:	486e      	ldr	r0, [pc, #440]	; (80046b4 <__ieee754_pow+0x20c>)
 80044fc:	b011      	add	sp, #68	; 0x44
 80044fe:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004502:	f000 bda5 	b.w	8005050 <nan>
 8004506:	2d00      	cmp	r5, #0
 8004508:	da53      	bge.n	80045b2 <__ieee754_pow+0x10a>
 800450a:	4b6b      	ldr	r3, [pc, #428]	; (80046b8 <__ieee754_pow+0x210>)
 800450c:	4598      	cmp	r8, r3
 800450e:	dc4d      	bgt.n	80045ac <__ieee754_pow+0x104>
 8004510:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8004514:	4598      	cmp	r8, r3
 8004516:	dd4c      	ble.n	80045b2 <__ieee754_pow+0x10a>
 8004518:	ea4f 5328 	mov.w	r3, r8, asr #20
 800451c:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8004520:	2b14      	cmp	r3, #20
 8004522:	dd26      	ble.n	8004572 <__ieee754_pow+0xca>
 8004524:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8004528:	fa22 f103 	lsr.w	r1, r2, r3
 800452c:	fa01 f303 	lsl.w	r3, r1, r3
 8004530:	4293      	cmp	r3, r2
 8004532:	d13e      	bne.n	80045b2 <__ieee754_pow+0x10a>
 8004534:	f001 0101 	and.w	r1, r1, #1
 8004538:	f1c1 0b02 	rsb	fp, r1, #2
 800453c:	2a00      	cmp	r2, #0
 800453e:	d15b      	bne.n	80045f8 <__ieee754_pow+0x150>
 8004540:	4b5b      	ldr	r3, [pc, #364]	; (80046b0 <__ieee754_pow+0x208>)
 8004542:	4598      	cmp	r8, r3
 8004544:	d124      	bne.n	8004590 <__ieee754_pow+0xe8>
 8004546:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800454a:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800454e:	ea53 030a 	orrs.w	r3, r3, sl
 8004552:	f000 8476 	beq.w	8004e42 <__ieee754_pow+0x99a>
 8004556:	4b59      	ldr	r3, [pc, #356]	; (80046bc <__ieee754_pow+0x214>)
 8004558:	429c      	cmp	r4, r3
 800455a:	dd2d      	ble.n	80045b8 <__ieee754_pow+0x110>
 800455c:	f1b9 0f00 	cmp.w	r9, #0
 8004560:	f280 8473 	bge.w	8004e4a <__ieee754_pow+0x9a2>
 8004564:	2000      	movs	r0, #0
 8004566:	2100      	movs	r1, #0
 8004568:	ec41 0b10 	vmov	d0, r0, r1
 800456c:	b011      	add	sp, #68	; 0x44
 800456e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004572:	2a00      	cmp	r2, #0
 8004574:	d13e      	bne.n	80045f4 <__ieee754_pow+0x14c>
 8004576:	f1c3 0314 	rsb	r3, r3, #20
 800457a:	fa48 f103 	asr.w	r1, r8, r3
 800457e:	fa01 f303 	lsl.w	r3, r1, r3
 8004582:	4543      	cmp	r3, r8
 8004584:	f040 8469 	bne.w	8004e5a <__ieee754_pow+0x9b2>
 8004588:	f001 0101 	and.w	r1, r1, #1
 800458c:	f1c1 0b02 	rsb	fp, r1, #2
 8004590:	4b4b      	ldr	r3, [pc, #300]	; (80046c0 <__ieee754_pow+0x218>)
 8004592:	4598      	cmp	r8, r3
 8004594:	d118      	bne.n	80045c8 <__ieee754_pow+0x120>
 8004596:	f1b9 0f00 	cmp.w	r9, #0
 800459a:	f280 845a 	bge.w	8004e52 <__ieee754_pow+0x9aa>
 800459e:	4948      	ldr	r1, [pc, #288]	; (80046c0 <__ieee754_pow+0x218>)
 80045a0:	4632      	mov	r2, r6
 80045a2:	463b      	mov	r3, r7
 80045a4:	2000      	movs	r0, #0
 80045a6:	f7fc f951 	bl	800084c <__aeabi_ddiv>
 80045aa:	e7dd      	b.n	8004568 <__ieee754_pow+0xc0>
 80045ac:	f04f 0b02 	mov.w	fp, #2
 80045b0:	e7c4      	b.n	800453c <__ieee754_pow+0x94>
 80045b2:	f04f 0b00 	mov.w	fp, #0
 80045b6:	e7c1      	b.n	800453c <__ieee754_pow+0x94>
 80045b8:	f1b9 0f00 	cmp.w	r9, #0
 80045bc:	dad2      	bge.n	8004564 <__ieee754_pow+0xbc>
 80045be:	e9dd 0300 	ldrd	r0, r3, [sp]
 80045c2:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80045c6:	e7cf      	b.n	8004568 <__ieee754_pow+0xc0>
 80045c8:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 80045cc:	d106      	bne.n	80045dc <__ieee754_pow+0x134>
 80045ce:	4632      	mov	r2, r6
 80045d0:	463b      	mov	r3, r7
 80045d2:	4610      	mov	r0, r2
 80045d4:	4619      	mov	r1, r3
 80045d6:	f7fc f80f 	bl	80005f8 <__aeabi_dmul>
 80045da:	e7c5      	b.n	8004568 <__ieee754_pow+0xc0>
 80045dc:	4b39      	ldr	r3, [pc, #228]	; (80046c4 <__ieee754_pow+0x21c>)
 80045de:	4599      	cmp	r9, r3
 80045e0:	d10a      	bne.n	80045f8 <__ieee754_pow+0x150>
 80045e2:	2d00      	cmp	r5, #0
 80045e4:	db08      	blt.n	80045f8 <__ieee754_pow+0x150>
 80045e6:	ec47 6b10 	vmov	d0, r6, r7
 80045ea:	b011      	add	sp, #68	; 0x44
 80045ec:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80045f0:	f000 bc68 	b.w	8004ec4 <__ieee754_sqrt>
 80045f4:	f04f 0b00 	mov.w	fp, #0
 80045f8:	ec47 6b10 	vmov	d0, r6, r7
 80045fc:	f000 fd12 	bl	8005024 <fabs>
 8004600:	ec51 0b10 	vmov	r0, r1, d0
 8004604:	f1ba 0f00 	cmp.w	sl, #0
 8004608:	d127      	bne.n	800465a <__ieee754_pow+0x1b2>
 800460a:	b124      	cbz	r4, 8004616 <__ieee754_pow+0x16e>
 800460c:	4b2c      	ldr	r3, [pc, #176]	; (80046c0 <__ieee754_pow+0x218>)
 800460e:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8004612:	429a      	cmp	r2, r3
 8004614:	d121      	bne.n	800465a <__ieee754_pow+0x1b2>
 8004616:	f1b9 0f00 	cmp.w	r9, #0
 800461a:	da05      	bge.n	8004628 <__ieee754_pow+0x180>
 800461c:	4602      	mov	r2, r0
 800461e:	460b      	mov	r3, r1
 8004620:	2000      	movs	r0, #0
 8004622:	4927      	ldr	r1, [pc, #156]	; (80046c0 <__ieee754_pow+0x218>)
 8004624:	f7fc f912 	bl	800084c <__aeabi_ddiv>
 8004628:	2d00      	cmp	r5, #0
 800462a:	da9d      	bge.n	8004568 <__ieee754_pow+0xc0>
 800462c:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8004630:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8004634:	ea54 030b 	orrs.w	r3, r4, fp
 8004638:	d108      	bne.n	800464c <__ieee754_pow+0x1a4>
 800463a:	4602      	mov	r2, r0
 800463c:	460b      	mov	r3, r1
 800463e:	4610      	mov	r0, r2
 8004640:	4619      	mov	r1, r3
 8004642:	f7fb fe21 	bl	8000288 <__aeabi_dsub>
 8004646:	4602      	mov	r2, r0
 8004648:	460b      	mov	r3, r1
 800464a:	e7ac      	b.n	80045a6 <__ieee754_pow+0xfe>
 800464c:	f1bb 0f01 	cmp.w	fp, #1
 8004650:	d18a      	bne.n	8004568 <__ieee754_pow+0xc0>
 8004652:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004656:	4619      	mov	r1, r3
 8004658:	e786      	b.n	8004568 <__ieee754_pow+0xc0>
 800465a:	0fed      	lsrs	r5, r5, #31
 800465c:	1e6b      	subs	r3, r5, #1
 800465e:	930d      	str	r3, [sp, #52]	; 0x34
 8004660:	ea5b 0303 	orrs.w	r3, fp, r3
 8004664:	d102      	bne.n	800466c <__ieee754_pow+0x1c4>
 8004666:	4632      	mov	r2, r6
 8004668:	463b      	mov	r3, r7
 800466a:	e7e8      	b.n	800463e <__ieee754_pow+0x196>
 800466c:	4b16      	ldr	r3, [pc, #88]	; (80046c8 <__ieee754_pow+0x220>)
 800466e:	4598      	cmp	r8, r3
 8004670:	f340 80fe 	ble.w	8004870 <__ieee754_pow+0x3c8>
 8004674:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8004678:	4598      	cmp	r8, r3
 800467a:	dd0a      	ble.n	8004692 <__ieee754_pow+0x1ea>
 800467c:	4b0f      	ldr	r3, [pc, #60]	; (80046bc <__ieee754_pow+0x214>)
 800467e:	429c      	cmp	r4, r3
 8004680:	dc0d      	bgt.n	800469e <__ieee754_pow+0x1f6>
 8004682:	f1b9 0f00 	cmp.w	r9, #0
 8004686:	f6bf af6d 	bge.w	8004564 <__ieee754_pow+0xbc>
 800468a:	a307      	add	r3, pc, #28	; (adr r3, 80046a8 <__ieee754_pow+0x200>)
 800468c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004690:	e79f      	b.n	80045d2 <__ieee754_pow+0x12a>
 8004692:	4b0e      	ldr	r3, [pc, #56]	; (80046cc <__ieee754_pow+0x224>)
 8004694:	429c      	cmp	r4, r3
 8004696:	ddf4      	ble.n	8004682 <__ieee754_pow+0x1da>
 8004698:	4b09      	ldr	r3, [pc, #36]	; (80046c0 <__ieee754_pow+0x218>)
 800469a:	429c      	cmp	r4, r3
 800469c:	dd18      	ble.n	80046d0 <__ieee754_pow+0x228>
 800469e:	f1b9 0f00 	cmp.w	r9, #0
 80046a2:	dcf2      	bgt.n	800468a <__ieee754_pow+0x1e2>
 80046a4:	e75e      	b.n	8004564 <__ieee754_pow+0xbc>
 80046a6:	bf00      	nop
 80046a8:	8800759c 	.word	0x8800759c
 80046ac:	7e37e43c 	.word	0x7e37e43c
 80046b0:	7ff00000 	.word	0x7ff00000
 80046b4:	080052f9 	.word	0x080052f9
 80046b8:	433fffff 	.word	0x433fffff
 80046bc:	3fefffff 	.word	0x3fefffff
 80046c0:	3ff00000 	.word	0x3ff00000
 80046c4:	3fe00000 	.word	0x3fe00000
 80046c8:	41e00000 	.word	0x41e00000
 80046cc:	3feffffe 	.word	0x3feffffe
 80046d0:	2200      	movs	r2, #0
 80046d2:	4b63      	ldr	r3, [pc, #396]	; (8004860 <__ieee754_pow+0x3b8>)
 80046d4:	f7fb fdd8 	bl	8000288 <__aeabi_dsub>
 80046d8:	a355      	add	r3, pc, #340	; (adr r3, 8004830 <__ieee754_pow+0x388>)
 80046da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046de:	4604      	mov	r4, r0
 80046e0:	460d      	mov	r5, r1
 80046e2:	f7fb ff89 	bl	80005f8 <__aeabi_dmul>
 80046e6:	a354      	add	r3, pc, #336	; (adr r3, 8004838 <__ieee754_pow+0x390>)
 80046e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046ec:	4606      	mov	r6, r0
 80046ee:	460f      	mov	r7, r1
 80046f0:	4620      	mov	r0, r4
 80046f2:	4629      	mov	r1, r5
 80046f4:	f7fb ff80 	bl	80005f8 <__aeabi_dmul>
 80046f8:	2200      	movs	r2, #0
 80046fa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80046fe:	4b59      	ldr	r3, [pc, #356]	; (8004864 <__ieee754_pow+0x3bc>)
 8004700:	4620      	mov	r0, r4
 8004702:	4629      	mov	r1, r5
 8004704:	f7fb ff78 	bl	80005f8 <__aeabi_dmul>
 8004708:	4602      	mov	r2, r0
 800470a:	460b      	mov	r3, r1
 800470c:	a14c      	add	r1, pc, #304	; (adr r1, 8004840 <__ieee754_pow+0x398>)
 800470e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004712:	f7fb fdb9 	bl	8000288 <__aeabi_dsub>
 8004716:	4622      	mov	r2, r4
 8004718:	462b      	mov	r3, r5
 800471a:	f7fb ff6d 	bl	80005f8 <__aeabi_dmul>
 800471e:	4602      	mov	r2, r0
 8004720:	460b      	mov	r3, r1
 8004722:	2000      	movs	r0, #0
 8004724:	4950      	ldr	r1, [pc, #320]	; (8004868 <__ieee754_pow+0x3c0>)
 8004726:	f7fb fdaf 	bl	8000288 <__aeabi_dsub>
 800472a:	4622      	mov	r2, r4
 800472c:	462b      	mov	r3, r5
 800472e:	4680      	mov	r8, r0
 8004730:	4689      	mov	r9, r1
 8004732:	4620      	mov	r0, r4
 8004734:	4629      	mov	r1, r5
 8004736:	f7fb ff5f 	bl	80005f8 <__aeabi_dmul>
 800473a:	4602      	mov	r2, r0
 800473c:	460b      	mov	r3, r1
 800473e:	4640      	mov	r0, r8
 8004740:	4649      	mov	r1, r9
 8004742:	f7fb ff59 	bl	80005f8 <__aeabi_dmul>
 8004746:	a340      	add	r3, pc, #256	; (adr r3, 8004848 <__ieee754_pow+0x3a0>)
 8004748:	e9d3 2300 	ldrd	r2, r3, [r3]
 800474c:	f7fb ff54 	bl	80005f8 <__aeabi_dmul>
 8004750:	4602      	mov	r2, r0
 8004752:	460b      	mov	r3, r1
 8004754:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004758:	f7fb fd96 	bl	8000288 <__aeabi_dsub>
 800475c:	4602      	mov	r2, r0
 800475e:	460b      	mov	r3, r1
 8004760:	4604      	mov	r4, r0
 8004762:	460d      	mov	r5, r1
 8004764:	4630      	mov	r0, r6
 8004766:	4639      	mov	r1, r7
 8004768:	f7fb fd90 	bl	800028c <__adddf3>
 800476c:	2000      	movs	r0, #0
 800476e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004772:	4632      	mov	r2, r6
 8004774:	463b      	mov	r3, r7
 8004776:	f7fb fd87 	bl	8000288 <__aeabi_dsub>
 800477a:	4602      	mov	r2, r0
 800477c:	460b      	mov	r3, r1
 800477e:	4620      	mov	r0, r4
 8004780:	4629      	mov	r1, r5
 8004782:	f7fb fd81 	bl	8000288 <__aeabi_dsub>
 8004786:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8004788:	f10b 33ff 	add.w	r3, fp, #4294967295
 800478c:	4313      	orrs	r3, r2
 800478e:	4606      	mov	r6, r0
 8004790:	460f      	mov	r7, r1
 8004792:	f040 81eb 	bne.w	8004b6c <__ieee754_pow+0x6c4>
 8004796:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 8004850 <__ieee754_pow+0x3a8>
 800479a:	e9dd 4500 	ldrd	r4, r5, [sp]
 800479e:	2400      	movs	r4, #0
 80047a0:	4622      	mov	r2, r4
 80047a2:	462b      	mov	r3, r5
 80047a4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80047a8:	ed8d 7b02 	vstr	d7, [sp, #8]
 80047ac:	f7fb fd6c 	bl	8000288 <__aeabi_dsub>
 80047b0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80047b4:	f7fb ff20 	bl	80005f8 <__aeabi_dmul>
 80047b8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80047bc:	4680      	mov	r8, r0
 80047be:	4689      	mov	r9, r1
 80047c0:	4630      	mov	r0, r6
 80047c2:	4639      	mov	r1, r7
 80047c4:	f7fb ff18 	bl	80005f8 <__aeabi_dmul>
 80047c8:	4602      	mov	r2, r0
 80047ca:	460b      	mov	r3, r1
 80047cc:	4640      	mov	r0, r8
 80047ce:	4649      	mov	r1, r9
 80047d0:	f7fb fd5c 	bl	800028c <__adddf3>
 80047d4:	4622      	mov	r2, r4
 80047d6:	462b      	mov	r3, r5
 80047d8:	4680      	mov	r8, r0
 80047da:	4689      	mov	r9, r1
 80047dc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80047e0:	f7fb ff0a 	bl	80005f8 <__aeabi_dmul>
 80047e4:	460b      	mov	r3, r1
 80047e6:	4604      	mov	r4, r0
 80047e8:	460d      	mov	r5, r1
 80047ea:	4602      	mov	r2, r0
 80047ec:	4649      	mov	r1, r9
 80047ee:	4640      	mov	r0, r8
 80047f0:	e9cd 4500 	strd	r4, r5, [sp]
 80047f4:	f7fb fd4a 	bl	800028c <__adddf3>
 80047f8:	4b1c      	ldr	r3, [pc, #112]	; (800486c <__ieee754_pow+0x3c4>)
 80047fa:	4299      	cmp	r1, r3
 80047fc:	4606      	mov	r6, r0
 80047fe:	460f      	mov	r7, r1
 8004800:	468b      	mov	fp, r1
 8004802:	f340 82f7 	ble.w	8004df4 <__ieee754_pow+0x94c>
 8004806:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800480a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800480e:	4303      	orrs	r3, r0
 8004810:	f000 81ea 	beq.w	8004be8 <__ieee754_pow+0x740>
 8004814:	a310      	add	r3, pc, #64	; (adr r3, 8004858 <__ieee754_pow+0x3b0>)
 8004816:	e9d3 2300 	ldrd	r2, r3, [r3]
 800481a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800481e:	f7fb feeb 	bl	80005f8 <__aeabi_dmul>
 8004822:	a30d      	add	r3, pc, #52	; (adr r3, 8004858 <__ieee754_pow+0x3b0>)
 8004824:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004828:	e6d5      	b.n	80045d6 <__ieee754_pow+0x12e>
 800482a:	bf00      	nop
 800482c:	f3af 8000 	nop.w
 8004830:	60000000 	.word	0x60000000
 8004834:	3ff71547 	.word	0x3ff71547
 8004838:	f85ddf44 	.word	0xf85ddf44
 800483c:	3e54ae0b 	.word	0x3e54ae0b
 8004840:	55555555 	.word	0x55555555
 8004844:	3fd55555 	.word	0x3fd55555
 8004848:	652b82fe 	.word	0x652b82fe
 800484c:	3ff71547 	.word	0x3ff71547
 8004850:	00000000 	.word	0x00000000
 8004854:	bff00000 	.word	0xbff00000
 8004858:	8800759c 	.word	0x8800759c
 800485c:	7e37e43c 	.word	0x7e37e43c
 8004860:	3ff00000 	.word	0x3ff00000
 8004864:	3fd00000 	.word	0x3fd00000
 8004868:	3fe00000 	.word	0x3fe00000
 800486c:	408fffff 	.word	0x408fffff
 8004870:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8004874:	f04f 0200 	mov.w	r2, #0
 8004878:	da05      	bge.n	8004886 <__ieee754_pow+0x3de>
 800487a:	4bd3      	ldr	r3, [pc, #844]	; (8004bc8 <__ieee754_pow+0x720>)
 800487c:	f7fb febc 	bl	80005f8 <__aeabi_dmul>
 8004880:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8004884:	460c      	mov	r4, r1
 8004886:	1523      	asrs	r3, r4, #20
 8004888:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800488c:	4413      	add	r3, r2
 800488e:	9309      	str	r3, [sp, #36]	; 0x24
 8004890:	4bce      	ldr	r3, [pc, #824]	; (8004bcc <__ieee754_pow+0x724>)
 8004892:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8004896:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800489a:	429c      	cmp	r4, r3
 800489c:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80048a0:	dd08      	ble.n	80048b4 <__ieee754_pow+0x40c>
 80048a2:	4bcb      	ldr	r3, [pc, #812]	; (8004bd0 <__ieee754_pow+0x728>)
 80048a4:	429c      	cmp	r4, r3
 80048a6:	f340 815e 	ble.w	8004b66 <__ieee754_pow+0x6be>
 80048aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80048ac:	3301      	adds	r3, #1
 80048ae:	9309      	str	r3, [sp, #36]	; 0x24
 80048b0:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 80048b4:	f04f 0a00 	mov.w	sl, #0
 80048b8:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 80048bc:	930c      	str	r3, [sp, #48]	; 0x30
 80048be:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80048c0:	4bc4      	ldr	r3, [pc, #784]	; (8004bd4 <__ieee754_pow+0x72c>)
 80048c2:	4413      	add	r3, r2
 80048c4:	ed93 7b00 	vldr	d7, [r3]
 80048c8:	4629      	mov	r1, r5
 80048ca:	ec53 2b17 	vmov	r2, r3, d7
 80048ce:	ed8d 7b06 	vstr	d7, [sp, #24]
 80048d2:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80048d6:	f7fb fcd7 	bl	8000288 <__aeabi_dsub>
 80048da:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80048de:	4606      	mov	r6, r0
 80048e0:	460f      	mov	r7, r1
 80048e2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80048e6:	f7fb fcd1 	bl	800028c <__adddf3>
 80048ea:	4602      	mov	r2, r0
 80048ec:	460b      	mov	r3, r1
 80048ee:	2000      	movs	r0, #0
 80048f0:	49b9      	ldr	r1, [pc, #740]	; (8004bd8 <__ieee754_pow+0x730>)
 80048f2:	f7fb ffab 	bl	800084c <__aeabi_ddiv>
 80048f6:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 80048fa:	4602      	mov	r2, r0
 80048fc:	460b      	mov	r3, r1
 80048fe:	4630      	mov	r0, r6
 8004900:	4639      	mov	r1, r7
 8004902:	f7fb fe79 	bl	80005f8 <__aeabi_dmul>
 8004906:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800490a:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800490e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8004912:	2300      	movs	r3, #0
 8004914:	9302      	str	r3, [sp, #8]
 8004916:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800491a:	106d      	asrs	r5, r5, #1
 800491c:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8004920:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8004924:	2200      	movs	r2, #0
 8004926:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 800492a:	4640      	mov	r0, r8
 800492c:	4649      	mov	r1, r9
 800492e:	4614      	mov	r4, r2
 8004930:	461d      	mov	r5, r3
 8004932:	f7fb fe61 	bl	80005f8 <__aeabi_dmul>
 8004936:	4602      	mov	r2, r0
 8004938:	460b      	mov	r3, r1
 800493a:	4630      	mov	r0, r6
 800493c:	4639      	mov	r1, r7
 800493e:	f7fb fca3 	bl	8000288 <__aeabi_dsub>
 8004942:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004946:	4606      	mov	r6, r0
 8004948:	460f      	mov	r7, r1
 800494a:	4620      	mov	r0, r4
 800494c:	4629      	mov	r1, r5
 800494e:	f7fb fc9b 	bl	8000288 <__aeabi_dsub>
 8004952:	4602      	mov	r2, r0
 8004954:	460b      	mov	r3, r1
 8004956:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800495a:	f7fb fc95 	bl	8000288 <__aeabi_dsub>
 800495e:	4642      	mov	r2, r8
 8004960:	464b      	mov	r3, r9
 8004962:	f7fb fe49 	bl	80005f8 <__aeabi_dmul>
 8004966:	4602      	mov	r2, r0
 8004968:	460b      	mov	r3, r1
 800496a:	4630      	mov	r0, r6
 800496c:	4639      	mov	r1, r7
 800496e:	f7fb fc8b 	bl	8000288 <__aeabi_dsub>
 8004972:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8004976:	f7fb fe3f 	bl	80005f8 <__aeabi_dmul>
 800497a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800497e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8004982:	4610      	mov	r0, r2
 8004984:	4619      	mov	r1, r3
 8004986:	f7fb fe37 	bl	80005f8 <__aeabi_dmul>
 800498a:	a37b      	add	r3, pc, #492	; (adr r3, 8004b78 <__ieee754_pow+0x6d0>)
 800498c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004990:	4604      	mov	r4, r0
 8004992:	460d      	mov	r5, r1
 8004994:	f7fb fe30 	bl	80005f8 <__aeabi_dmul>
 8004998:	a379      	add	r3, pc, #484	; (adr r3, 8004b80 <__ieee754_pow+0x6d8>)
 800499a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800499e:	f7fb fc75 	bl	800028c <__adddf3>
 80049a2:	4622      	mov	r2, r4
 80049a4:	462b      	mov	r3, r5
 80049a6:	f7fb fe27 	bl	80005f8 <__aeabi_dmul>
 80049aa:	a377      	add	r3, pc, #476	; (adr r3, 8004b88 <__ieee754_pow+0x6e0>)
 80049ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049b0:	f7fb fc6c 	bl	800028c <__adddf3>
 80049b4:	4622      	mov	r2, r4
 80049b6:	462b      	mov	r3, r5
 80049b8:	f7fb fe1e 	bl	80005f8 <__aeabi_dmul>
 80049bc:	a374      	add	r3, pc, #464	; (adr r3, 8004b90 <__ieee754_pow+0x6e8>)
 80049be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049c2:	f7fb fc63 	bl	800028c <__adddf3>
 80049c6:	4622      	mov	r2, r4
 80049c8:	462b      	mov	r3, r5
 80049ca:	f7fb fe15 	bl	80005f8 <__aeabi_dmul>
 80049ce:	a372      	add	r3, pc, #456	; (adr r3, 8004b98 <__ieee754_pow+0x6f0>)
 80049d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049d4:	f7fb fc5a 	bl	800028c <__adddf3>
 80049d8:	4622      	mov	r2, r4
 80049da:	462b      	mov	r3, r5
 80049dc:	f7fb fe0c 	bl	80005f8 <__aeabi_dmul>
 80049e0:	a36f      	add	r3, pc, #444	; (adr r3, 8004ba0 <__ieee754_pow+0x6f8>)
 80049e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049e6:	f7fb fc51 	bl	800028c <__adddf3>
 80049ea:	4622      	mov	r2, r4
 80049ec:	4606      	mov	r6, r0
 80049ee:	460f      	mov	r7, r1
 80049f0:	462b      	mov	r3, r5
 80049f2:	4620      	mov	r0, r4
 80049f4:	4629      	mov	r1, r5
 80049f6:	f7fb fdff 	bl	80005f8 <__aeabi_dmul>
 80049fa:	4602      	mov	r2, r0
 80049fc:	460b      	mov	r3, r1
 80049fe:	4630      	mov	r0, r6
 8004a00:	4639      	mov	r1, r7
 8004a02:	f7fb fdf9 	bl	80005f8 <__aeabi_dmul>
 8004a06:	4642      	mov	r2, r8
 8004a08:	4604      	mov	r4, r0
 8004a0a:	460d      	mov	r5, r1
 8004a0c:	464b      	mov	r3, r9
 8004a0e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004a12:	f7fb fc3b 	bl	800028c <__adddf3>
 8004a16:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004a1a:	f7fb fded 	bl	80005f8 <__aeabi_dmul>
 8004a1e:	4622      	mov	r2, r4
 8004a20:	462b      	mov	r3, r5
 8004a22:	f7fb fc33 	bl	800028c <__adddf3>
 8004a26:	4642      	mov	r2, r8
 8004a28:	4606      	mov	r6, r0
 8004a2a:	460f      	mov	r7, r1
 8004a2c:	464b      	mov	r3, r9
 8004a2e:	4640      	mov	r0, r8
 8004a30:	4649      	mov	r1, r9
 8004a32:	f7fb fde1 	bl	80005f8 <__aeabi_dmul>
 8004a36:	2200      	movs	r2, #0
 8004a38:	4b68      	ldr	r3, [pc, #416]	; (8004bdc <__ieee754_pow+0x734>)
 8004a3a:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8004a3e:	f7fb fc25 	bl	800028c <__adddf3>
 8004a42:	4632      	mov	r2, r6
 8004a44:	463b      	mov	r3, r7
 8004a46:	f7fb fc21 	bl	800028c <__adddf3>
 8004a4a:	9802      	ldr	r0, [sp, #8]
 8004a4c:	460d      	mov	r5, r1
 8004a4e:	4604      	mov	r4, r0
 8004a50:	4602      	mov	r2, r0
 8004a52:	460b      	mov	r3, r1
 8004a54:	4640      	mov	r0, r8
 8004a56:	4649      	mov	r1, r9
 8004a58:	f7fb fdce 	bl	80005f8 <__aeabi_dmul>
 8004a5c:	2200      	movs	r2, #0
 8004a5e:	4680      	mov	r8, r0
 8004a60:	4689      	mov	r9, r1
 8004a62:	4b5e      	ldr	r3, [pc, #376]	; (8004bdc <__ieee754_pow+0x734>)
 8004a64:	4620      	mov	r0, r4
 8004a66:	4629      	mov	r1, r5
 8004a68:	f7fb fc0e 	bl	8000288 <__aeabi_dsub>
 8004a6c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8004a70:	f7fb fc0a 	bl	8000288 <__aeabi_dsub>
 8004a74:	4602      	mov	r2, r0
 8004a76:	460b      	mov	r3, r1
 8004a78:	4630      	mov	r0, r6
 8004a7a:	4639      	mov	r1, r7
 8004a7c:	f7fb fc04 	bl	8000288 <__aeabi_dsub>
 8004a80:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004a84:	f7fb fdb8 	bl	80005f8 <__aeabi_dmul>
 8004a88:	4622      	mov	r2, r4
 8004a8a:	4606      	mov	r6, r0
 8004a8c:	460f      	mov	r7, r1
 8004a8e:	462b      	mov	r3, r5
 8004a90:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004a94:	f7fb fdb0 	bl	80005f8 <__aeabi_dmul>
 8004a98:	4602      	mov	r2, r0
 8004a9a:	460b      	mov	r3, r1
 8004a9c:	4630      	mov	r0, r6
 8004a9e:	4639      	mov	r1, r7
 8004aa0:	f7fb fbf4 	bl	800028c <__adddf3>
 8004aa4:	4606      	mov	r6, r0
 8004aa6:	460f      	mov	r7, r1
 8004aa8:	4602      	mov	r2, r0
 8004aaa:	460b      	mov	r3, r1
 8004aac:	4640      	mov	r0, r8
 8004aae:	4649      	mov	r1, r9
 8004ab0:	f7fb fbec 	bl	800028c <__adddf3>
 8004ab4:	9802      	ldr	r0, [sp, #8]
 8004ab6:	a33c      	add	r3, pc, #240	; (adr r3, 8004ba8 <__ieee754_pow+0x700>)
 8004ab8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004abc:	4604      	mov	r4, r0
 8004abe:	460d      	mov	r5, r1
 8004ac0:	f7fb fd9a 	bl	80005f8 <__aeabi_dmul>
 8004ac4:	4642      	mov	r2, r8
 8004ac6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8004aca:	464b      	mov	r3, r9
 8004acc:	4620      	mov	r0, r4
 8004ace:	4629      	mov	r1, r5
 8004ad0:	f7fb fbda 	bl	8000288 <__aeabi_dsub>
 8004ad4:	4602      	mov	r2, r0
 8004ad6:	460b      	mov	r3, r1
 8004ad8:	4630      	mov	r0, r6
 8004ada:	4639      	mov	r1, r7
 8004adc:	f7fb fbd4 	bl	8000288 <__aeabi_dsub>
 8004ae0:	a333      	add	r3, pc, #204	; (adr r3, 8004bb0 <__ieee754_pow+0x708>)
 8004ae2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ae6:	f7fb fd87 	bl	80005f8 <__aeabi_dmul>
 8004aea:	a333      	add	r3, pc, #204	; (adr r3, 8004bb8 <__ieee754_pow+0x710>)
 8004aec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004af0:	4606      	mov	r6, r0
 8004af2:	460f      	mov	r7, r1
 8004af4:	4620      	mov	r0, r4
 8004af6:	4629      	mov	r1, r5
 8004af8:	f7fb fd7e 	bl	80005f8 <__aeabi_dmul>
 8004afc:	4602      	mov	r2, r0
 8004afe:	460b      	mov	r3, r1
 8004b00:	4630      	mov	r0, r6
 8004b02:	4639      	mov	r1, r7
 8004b04:	f7fb fbc2 	bl	800028c <__adddf3>
 8004b08:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004b0a:	4b35      	ldr	r3, [pc, #212]	; (8004be0 <__ieee754_pow+0x738>)
 8004b0c:	4413      	add	r3, r2
 8004b0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b12:	f7fb fbbb 	bl	800028c <__adddf3>
 8004b16:	4604      	mov	r4, r0
 8004b18:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004b1a:	460d      	mov	r5, r1
 8004b1c:	f7fb fd02 	bl	8000524 <__aeabi_i2d>
 8004b20:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004b22:	4b30      	ldr	r3, [pc, #192]	; (8004be4 <__ieee754_pow+0x73c>)
 8004b24:	4413      	add	r3, r2
 8004b26:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004b2a:	4606      	mov	r6, r0
 8004b2c:	460f      	mov	r7, r1
 8004b2e:	4622      	mov	r2, r4
 8004b30:	462b      	mov	r3, r5
 8004b32:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004b36:	f7fb fba9 	bl	800028c <__adddf3>
 8004b3a:	4642      	mov	r2, r8
 8004b3c:	464b      	mov	r3, r9
 8004b3e:	f7fb fba5 	bl	800028c <__adddf3>
 8004b42:	4632      	mov	r2, r6
 8004b44:	463b      	mov	r3, r7
 8004b46:	f7fb fba1 	bl	800028c <__adddf3>
 8004b4a:	9802      	ldr	r0, [sp, #8]
 8004b4c:	4632      	mov	r2, r6
 8004b4e:	463b      	mov	r3, r7
 8004b50:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004b54:	f7fb fb98 	bl	8000288 <__aeabi_dsub>
 8004b58:	4642      	mov	r2, r8
 8004b5a:	464b      	mov	r3, r9
 8004b5c:	f7fb fb94 	bl	8000288 <__aeabi_dsub>
 8004b60:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004b64:	e607      	b.n	8004776 <__ieee754_pow+0x2ce>
 8004b66:	f04f 0a01 	mov.w	sl, #1
 8004b6a:	e6a5      	b.n	80048b8 <__ieee754_pow+0x410>
 8004b6c:	ed9f 7b14 	vldr	d7, [pc, #80]	; 8004bc0 <__ieee754_pow+0x718>
 8004b70:	e613      	b.n	800479a <__ieee754_pow+0x2f2>
 8004b72:	bf00      	nop
 8004b74:	f3af 8000 	nop.w
 8004b78:	4a454eef 	.word	0x4a454eef
 8004b7c:	3fca7e28 	.word	0x3fca7e28
 8004b80:	93c9db65 	.word	0x93c9db65
 8004b84:	3fcd864a 	.word	0x3fcd864a
 8004b88:	a91d4101 	.word	0xa91d4101
 8004b8c:	3fd17460 	.word	0x3fd17460
 8004b90:	518f264d 	.word	0x518f264d
 8004b94:	3fd55555 	.word	0x3fd55555
 8004b98:	db6fabff 	.word	0xdb6fabff
 8004b9c:	3fdb6db6 	.word	0x3fdb6db6
 8004ba0:	33333303 	.word	0x33333303
 8004ba4:	3fe33333 	.word	0x3fe33333
 8004ba8:	e0000000 	.word	0xe0000000
 8004bac:	3feec709 	.word	0x3feec709
 8004bb0:	dc3a03fd 	.word	0xdc3a03fd
 8004bb4:	3feec709 	.word	0x3feec709
 8004bb8:	145b01f5 	.word	0x145b01f5
 8004bbc:	be3e2fe0 	.word	0xbe3e2fe0
 8004bc0:	00000000 	.word	0x00000000
 8004bc4:	3ff00000 	.word	0x3ff00000
 8004bc8:	43400000 	.word	0x43400000
 8004bcc:	0003988e 	.word	0x0003988e
 8004bd0:	000bb679 	.word	0x000bb679
 8004bd4:	08005330 	.word	0x08005330
 8004bd8:	3ff00000 	.word	0x3ff00000
 8004bdc:	40080000 	.word	0x40080000
 8004be0:	08005350 	.word	0x08005350
 8004be4:	08005340 	.word	0x08005340
 8004be8:	a3b4      	add	r3, pc, #720	; (adr r3, 8004ebc <__ieee754_pow+0xa14>)
 8004bea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bee:	4640      	mov	r0, r8
 8004bf0:	4649      	mov	r1, r9
 8004bf2:	f7fb fb4b 	bl	800028c <__adddf3>
 8004bf6:	4622      	mov	r2, r4
 8004bf8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004bfc:	462b      	mov	r3, r5
 8004bfe:	4630      	mov	r0, r6
 8004c00:	4639      	mov	r1, r7
 8004c02:	f7fb fb41 	bl	8000288 <__aeabi_dsub>
 8004c06:	4602      	mov	r2, r0
 8004c08:	460b      	mov	r3, r1
 8004c0a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004c0e:	f7fb ff83 	bl	8000b18 <__aeabi_dcmpgt>
 8004c12:	2800      	cmp	r0, #0
 8004c14:	f47f adfe 	bne.w	8004814 <__ieee754_pow+0x36c>
 8004c18:	4aa3      	ldr	r2, [pc, #652]	; (8004ea8 <__ieee754_pow+0xa00>)
 8004c1a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8004c1e:	4293      	cmp	r3, r2
 8004c20:	f340 810a 	ble.w	8004e38 <__ieee754_pow+0x990>
 8004c24:	151b      	asrs	r3, r3, #20
 8004c26:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8004c2a:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8004c2e:	fa4a f303 	asr.w	r3, sl, r3
 8004c32:	445b      	add	r3, fp
 8004c34:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8004c38:	4e9c      	ldr	r6, [pc, #624]	; (8004eac <__ieee754_pow+0xa04>)
 8004c3a:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8004c3e:	4116      	asrs	r6, r2
 8004c40:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8004c44:	2000      	movs	r0, #0
 8004c46:	ea23 0106 	bic.w	r1, r3, r6
 8004c4a:	f1c2 0214 	rsb	r2, r2, #20
 8004c4e:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8004c52:	fa4a fa02 	asr.w	sl, sl, r2
 8004c56:	f1bb 0f00 	cmp.w	fp, #0
 8004c5a:	4602      	mov	r2, r0
 8004c5c:	460b      	mov	r3, r1
 8004c5e:	4620      	mov	r0, r4
 8004c60:	4629      	mov	r1, r5
 8004c62:	bfb8      	it	lt
 8004c64:	f1ca 0a00 	rsblt	sl, sl, #0
 8004c68:	f7fb fb0e 	bl	8000288 <__aeabi_dsub>
 8004c6c:	e9cd 0100 	strd	r0, r1, [sp]
 8004c70:	4642      	mov	r2, r8
 8004c72:	464b      	mov	r3, r9
 8004c74:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004c78:	f7fb fb08 	bl	800028c <__adddf3>
 8004c7c:	2000      	movs	r0, #0
 8004c7e:	a378      	add	r3, pc, #480	; (adr r3, 8004e60 <__ieee754_pow+0x9b8>)
 8004c80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c84:	4604      	mov	r4, r0
 8004c86:	460d      	mov	r5, r1
 8004c88:	f7fb fcb6 	bl	80005f8 <__aeabi_dmul>
 8004c8c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004c90:	4606      	mov	r6, r0
 8004c92:	460f      	mov	r7, r1
 8004c94:	4620      	mov	r0, r4
 8004c96:	4629      	mov	r1, r5
 8004c98:	f7fb faf6 	bl	8000288 <__aeabi_dsub>
 8004c9c:	4602      	mov	r2, r0
 8004c9e:	460b      	mov	r3, r1
 8004ca0:	4640      	mov	r0, r8
 8004ca2:	4649      	mov	r1, r9
 8004ca4:	f7fb faf0 	bl	8000288 <__aeabi_dsub>
 8004ca8:	a36f      	add	r3, pc, #444	; (adr r3, 8004e68 <__ieee754_pow+0x9c0>)
 8004caa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cae:	f7fb fca3 	bl	80005f8 <__aeabi_dmul>
 8004cb2:	a36f      	add	r3, pc, #444	; (adr r3, 8004e70 <__ieee754_pow+0x9c8>)
 8004cb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cb8:	4680      	mov	r8, r0
 8004cba:	4689      	mov	r9, r1
 8004cbc:	4620      	mov	r0, r4
 8004cbe:	4629      	mov	r1, r5
 8004cc0:	f7fb fc9a 	bl	80005f8 <__aeabi_dmul>
 8004cc4:	4602      	mov	r2, r0
 8004cc6:	460b      	mov	r3, r1
 8004cc8:	4640      	mov	r0, r8
 8004cca:	4649      	mov	r1, r9
 8004ccc:	f7fb fade 	bl	800028c <__adddf3>
 8004cd0:	4604      	mov	r4, r0
 8004cd2:	460d      	mov	r5, r1
 8004cd4:	4602      	mov	r2, r0
 8004cd6:	460b      	mov	r3, r1
 8004cd8:	4630      	mov	r0, r6
 8004cda:	4639      	mov	r1, r7
 8004cdc:	f7fb fad6 	bl	800028c <__adddf3>
 8004ce0:	4632      	mov	r2, r6
 8004ce2:	463b      	mov	r3, r7
 8004ce4:	4680      	mov	r8, r0
 8004ce6:	4689      	mov	r9, r1
 8004ce8:	f7fb face 	bl	8000288 <__aeabi_dsub>
 8004cec:	4602      	mov	r2, r0
 8004cee:	460b      	mov	r3, r1
 8004cf0:	4620      	mov	r0, r4
 8004cf2:	4629      	mov	r1, r5
 8004cf4:	f7fb fac8 	bl	8000288 <__aeabi_dsub>
 8004cf8:	4642      	mov	r2, r8
 8004cfa:	4606      	mov	r6, r0
 8004cfc:	460f      	mov	r7, r1
 8004cfe:	464b      	mov	r3, r9
 8004d00:	4640      	mov	r0, r8
 8004d02:	4649      	mov	r1, r9
 8004d04:	f7fb fc78 	bl	80005f8 <__aeabi_dmul>
 8004d08:	a35b      	add	r3, pc, #364	; (adr r3, 8004e78 <__ieee754_pow+0x9d0>)
 8004d0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d0e:	4604      	mov	r4, r0
 8004d10:	460d      	mov	r5, r1
 8004d12:	f7fb fc71 	bl	80005f8 <__aeabi_dmul>
 8004d16:	a35a      	add	r3, pc, #360	; (adr r3, 8004e80 <__ieee754_pow+0x9d8>)
 8004d18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d1c:	f7fb fab4 	bl	8000288 <__aeabi_dsub>
 8004d20:	4622      	mov	r2, r4
 8004d22:	462b      	mov	r3, r5
 8004d24:	f7fb fc68 	bl	80005f8 <__aeabi_dmul>
 8004d28:	a357      	add	r3, pc, #348	; (adr r3, 8004e88 <__ieee754_pow+0x9e0>)
 8004d2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d2e:	f7fb faad 	bl	800028c <__adddf3>
 8004d32:	4622      	mov	r2, r4
 8004d34:	462b      	mov	r3, r5
 8004d36:	f7fb fc5f 	bl	80005f8 <__aeabi_dmul>
 8004d3a:	a355      	add	r3, pc, #340	; (adr r3, 8004e90 <__ieee754_pow+0x9e8>)
 8004d3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d40:	f7fb faa2 	bl	8000288 <__aeabi_dsub>
 8004d44:	4622      	mov	r2, r4
 8004d46:	462b      	mov	r3, r5
 8004d48:	f7fb fc56 	bl	80005f8 <__aeabi_dmul>
 8004d4c:	a352      	add	r3, pc, #328	; (adr r3, 8004e98 <__ieee754_pow+0x9f0>)
 8004d4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d52:	f7fb fa9b 	bl	800028c <__adddf3>
 8004d56:	4622      	mov	r2, r4
 8004d58:	462b      	mov	r3, r5
 8004d5a:	f7fb fc4d 	bl	80005f8 <__aeabi_dmul>
 8004d5e:	4602      	mov	r2, r0
 8004d60:	460b      	mov	r3, r1
 8004d62:	4640      	mov	r0, r8
 8004d64:	4649      	mov	r1, r9
 8004d66:	f7fb fa8f 	bl	8000288 <__aeabi_dsub>
 8004d6a:	4604      	mov	r4, r0
 8004d6c:	460d      	mov	r5, r1
 8004d6e:	4602      	mov	r2, r0
 8004d70:	460b      	mov	r3, r1
 8004d72:	4640      	mov	r0, r8
 8004d74:	4649      	mov	r1, r9
 8004d76:	f7fb fc3f 	bl	80005f8 <__aeabi_dmul>
 8004d7a:	2200      	movs	r2, #0
 8004d7c:	e9cd 0100 	strd	r0, r1, [sp]
 8004d80:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004d84:	4620      	mov	r0, r4
 8004d86:	4629      	mov	r1, r5
 8004d88:	f7fb fa7e 	bl	8000288 <__aeabi_dsub>
 8004d8c:	4602      	mov	r2, r0
 8004d8e:	460b      	mov	r3, r1
 8004d90:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004d94:	f7fb fd5a 	bl	800084c <__aeabi_ddiv>
 8004d98:	4632      	mov	r2, r6
 8004d9a:	4604      	mov	r4, r0
 8004d9c:	460d      	mov	r5, r1
 8004d9e:	463b      	mov	r3, r7
 8004da0:	4640      	mov	r0, r8
 8004da2:	4649      	mov	r1, r9
 8004da4:	f7fb fc28 	bl	80005f8 <__aeabi_dmul>
 8004da8:	4632      	mov	r2, r6
 8004daa:	463b      	mov	r3, r7
 8004dac:	f7fb fa6e 	bl	800028c <__adddf3>
 8004db0:	4602      	mov	r2, r0
 8004db2:	460b      	mov	r3, r1
 8004db4:	4620      	mov	r0, r4
 8004db6:	4629      	mov	r1, r5
 8004db8:	f7fb fa66 	bl	8000288 <__aeabi_dsub>
 8004dbc:	4642      	mov	r2, r8
 8004dbe:	464b      	mov	r3, r9
 8004dc0:	f7fb fa62 	bl	8000288 <__aeabi_dsub>
 8004dc4:	4602      	mov	r2, r0
 8004dc6:	460b      	mov	r3, r1
 8004dc8:	2000      	movs	r0, #0
 8004dca:	4939      	ldr	r1, [pc, #228]	; (8004eb0 <__ieee754_pow+0xa08>)
 8004dcc:	f7fb fa5c 	bl	8000288 <__aeabi_dsub>
 8004dd0:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 8004dd4:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8004dd8:	4602      	mov	r2, r0
 8004dda:	460b      	mov	r3, r1
 8004ddc:	da2f      	bge.n	8004e3e <__ieee754_pow+0x996>
 8004dde:	4650      	mov	r0, sl
 8004de0:	ec43 2b10 	vmov	d0, r2, r3
 8004de4:	f000 f9c0 	bl	8005168 <scalbn>
 8004de8:	ec51 0b10 	vmov	r0, r1, d0
 8004dec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004df0:	f7ff bbf1 	b.w	80045d6 <__ieee754_pow+0x12e>
 8004df4:	4b2f      	ldr	r3, [pc, #188]	; (8004eb4 <__ieee754_pow+0xa0c>)
 8004df6:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8004dfa:	429e      	cmp	r6, r3
 8004dfc:	f77f af0c 	ble.w	8004c18 <__ieee754_pow+0x770>
 8004e00:	4b2d      	ldr	r3, [pc, #180]	; (8004eb8 <__ieee754_pow+0xa10>)
 8004e02:	440b      	add	r3, r1
 8004e04:	4303      	orrs	r3, r0
 8004e06:	d00b      	beq.n	8004e20 <__ieee754_pow+0x978>
 8004e08:	a325      	add	r3, pc, #148	; (adr r3, 8004ea0 <__ieee754_pow+0x9f8>)
 8004e0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e0e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004e12:	f7fb fbf1 	bl	80005f8 <__aeabi_dmul>
 8004e16:	a322      	add	r3, pc, #136	; (adr r3, 8004ea0 <__ieee754_pow+0x9f8>)
 8004e18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e1c:	f7ff bbdb 	b.w	80045d6 <__ieee754_pow+0x12e>
 8004e20:	4622      	mov	r2, r4
 8004e22:	462b      	mov	r3, r5
 8004e24:	f7fb fa30 	bl	8000288 <__aeabi_dsub>
 8004e28:	4642      	mov	r2, r8
 8004e2a:	464b      	mov	r3, r9
 8004e2c:	f7fb fe6a 	bl	8000b04 <__aeabi_dcmpge>
 8004e30:	2800      	cmp	r0, #0
 8004e32:	f43f aef1 	beq.w	8004c18 <__ieee754_pow+0x770>
 8004e36:	e7e7      	b.n	8004e08 <__ieee754_pow+0x960>
 8004e38:	f04f 0a00 	mov.w	sl, #0
 8004e3c:	e718      	b.n	8004c70 <__ieee754_pow+0x7c8>
 8004e3e:	4621      	mov	r1, r4
 8004e40:	e7d4      	b.n	8004dec <__ieee754_pow+0x944>
 8004e42:	2000      	movs	r0, #0
 8004e44:	491a      	ldr	r1, [pc, #104]	; (8004eb0 <__ieee754_pow+0xa08>)
 8004e46:	f7ff bb8f 	b.w	8004568 <__ieee754_pow+0xc0>
 8004e4a:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004e4e:	f7ff bb8b 	b.w	8004568 <__ieee754_pow+0xc0>
 8004e52:	4630      	mov	r0, r6
 8004e54:	4639      	mov	r1, r7
 8004e56:	f7ff bb87 	b.w	8004568 <__ieee754_pow+0xc0>
 8004e5a:	4693      	mov	fp, r2
 8004e5c:	f7ff bb98 	b.w	8004590 <__ieee754_pow+0xe8>
 8004e60:	00000000 	.word	0x00000000
 8004e64:	3fe62e43 	.word	0x3fe62e43
 8004e68:	fefa39ef 	.word	0xfefa39ef
 8004e6c:	3fe62e42 	.word	0x3fe62e42
 8004e70:	0ca86c39 	.word	0x0ca86c39
 8004e74:	be205c61 	.word	0xbe205c61
 8004e78:	72bea4d0 	.word	0x72bea4d0
 8004e7c:	3e663769 	.word	0x3e663769
 8004e80:	c5d26bf1 	.word	0xc5d26bf1
 8004e84:	3ebbbd41 	.word	0x3ebbbd41
 8004e88:	af25de2c 	.word	0xaf25de2c
 8004e8c:	3f11566a 	.word	0x3f11566a
 8004e90:	16bebd93 	.word	0x16bebd93
 8004e94:	3f66c16c 	.word	0x3f66c16c
 8004e98:	5555553e 	.word	0x5555553e
 8004e9c:	3fc55555 	.word	0x3fc55555
 8004ea0:	c2f8f359 	.word	0xc2f8f359
 8004ea4:	01a56e1f 	.word	0x01a56e1f
 8004ea8:	3fe00000 	.word	0x3fe00000
 8004eac:	000fffff 	.word	0x000fffff
 8004eb0:	3ff00000 	.word	0x3ff00000
 8004eb4:	4090cbff 	.word	0x4090cbff
 8004eb8:	3f6f3400 	.word	0x3f6f3400
 8004ebc:	652b82fe 	.word	0x652b82fe
 8004ec0:	3c971547 	.word	0x3c971547

08004ec4 <__ieee754_sqrt>:
 8004ec4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004ec8:	4955      	ldr	r1, [pc, #340]	; (8005020 <__ieee754_sqrt+0x15c>)
 8004eca:	ec55 4b10 	vmov	r4, r5, d0
 8004ece:	43a9      	bics	r1, r5
 8004ed0:	462b      	mov	r3, r5
 8004ed2:	462a      	mov	r2, r5
 8004ed4:	d112      	bne.n	8004efc <__ieee754_sqrt+0x38>
 8004ed6:	ee10 2a10 	vmov	r2, s0
 8004eda:	ee10 0a10 	vmov	r0, s0
 8004ede:	4629      	mov	r1, r5
 8004ee0:	f7fb fb8a 	bl	80005f8 <__aeabi_dmul>
 8004ee4:	4602      	mov	r2, r0
 8004ee6:	460b      	mov	r3, r1
 8004ee8:	4620      	mov	r0, r4
 8004eea:	4629      	mov	r1, r5
 8004eec:	f7fb f9ce 	bl	800028c <__adddf3>
 8004ef0:	4604      	mov	r4, r0
 8004ef2:	460d      	mov	r5, r1
 8004ef4:	ec45 4b10 	vmov	d0, r4, r5
 8004ef8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004efc:	2d00      	cmp	r5, #0
 8004efe:	ee10 0a10 	vmov	r0, s0
 8004f02:	4621      	mov	r1, r4
 8004f04:	dc0f      	bgt.n	8004f26 <__ieee754_sqrt+0x62>
 8004f06:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8004f0a:	4330      	orrs	r0, r6
 8004f0c:	d0f2      	beq.n	8004ef4 <__ieee754_sqrt+0x30>
 8004f0e:	b155      	cbz	r5, 8004f26 <__ieee754_sqrt+0x62>
 8004f10:	ee10 2a10 	vmov	r2, s0
 8004f14:	4620      	mov	r0, r4
 8004f16:	4629      	mov	r1, r5
 8004f18:	f7fb f9b6 	bl	8000288 <__aeabi_dsub>
 8004f1c:	4602      	mov	r2, r0
 8004f1e:	460b      	mov	r3, r1
 8004f20:	f7fb fc94 	bl	800084c <__aeabi_ddiv>
 8004f24:	e7e4      	b.n	8004ef0 <__ieee754_sqrt+0x2c>
 8004f26:	151b      	asrs	r3, r3, #20
 8004f28:	d073      	beq.n	8005012 <__ieee754_sqrt+0x14e>
 8004f2a:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8004f2e:	07dd      	lsls	r5, r3, #31
 8004f30:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8004f34:	bf48      	it	mi
 8004f36:	0fc8      	lsrmi	r0, r1, #31
 8004f38:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8004f3c:	bf44      	itt	mi
 8004f3e:	0049      	lslmi	r1, r1, #1
 8004f40:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 8004f44:	2500      	movs	r5, #0
 8004f46:	1058      	asrs	r0, r3, #1
 8004f48:	0fcb      	lsrs	r3, r1, #31
 8004f4a:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 8004f4e:	0049      	lsls	r1, r1, #1
 8004f50:	2316      	movs	r3, #22
 8004f52:	462c      	mov	r4, r5
 8004f54:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 8004f58:	19a7      	adds	r7, r4, r6
 8004f5a:	4297      	cmp	r7, r2
 8004f5c:	bfde      	ittt	le
 8004f5e:	19bc      	addle	r4, r7, r6
 8004f60:	1bd2      	suble	r2, r2, r7
 8004f62:	19ad      	addle	r5, r5, r6
 8004f64:	0fcf      	lsrs	r7, r1, #31
 8004f66:	3b01      	subs	r3, #1
 8004f68:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 8004f6c:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8004f70:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8004f74:	d1f0      	bne.n	8004f58 <__ieee754_sqrt+0x94>
 8004f76:	f04f 0c20 	mov.w	ip, #32
 8004f7a:	469e      	mov	lr, r3
 8004f7c:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8004f80:	42a2      	cmp	r2, r4
 8004f82:	eb06 070e 	add.w	r7, r6, lr
 8004f86:	dc02      	bgt.n	8004f8e <__ieee754_sqrt+0xca>
 8004f88:	d112      	bne.n	8004fb0 <__ieee754_sqrt+0xec>
 8004f8a:	428f      	cmp	r7, r1
 8004f8c:	d810      	bhi.n	8004fb0 <__ieee754_sqrt+0xec>
 8004f8e:	2f00      	cmp	r7, #0
 8004f90:	eb07 0e06 	add.w	lr, r7, r6
 8004f94:	da42      	bge.n	800501c <__ieee754_sqrt+0x158>
 8004f96:	f1be 0f00 	cmp.w	lr, #0
 8004f9a:	db3f      	blt.n	800501c <__ieee754_sqrt+0x158>
 8004f9c:	f104 0801 	add.w	r8, r4, #1
 8004fa0:	1b12      	subs	r2, r2, r4
 8004fa2:	428f      	cmp	r7, r1
 8004fa4:	bf88      	it	hi
 8004fa6:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8004faa:	1bc9      	subs	r1, r1, r7
 8004fac:	4433      	add	r3, r6
 8004fae:	4644      	mov	r4, r8
 8004fb0:	0052      	lsls	r2, r2, #1
 8004fb2:	f1bc 0c01 	subs.w	ip, ip, #1
 8004fb6:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 8004fba:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8004fbe:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8004fc2:	d1dd      	bne.n	8004f80 <__ieee754_sqrt+0xbc>
 8004fc4:	430a      	orrs	r2, r1
 8004fc6:	d006      	beq.n	8004fd6 <__ieee754_sqrt+0x112>
 8004fc8:	1c5c      	adds	r4, r3, #1
 8004fca:	bf13      	iteet	ne
 8004fcc:	3301      	addne	r3, #1
 8004fce:	3501      	addeq	r5, #1
 8004fd0:	4663      	moveq	r3, ip
 8004fd2:	f023 0301 	bicne.w	r3, r3, #1
 8004fd6:	106a      	asrs	r2, r5, #1
 8004fd8:	085b      	lsrs	r3, r3, #1
 8004fda:	07e9      	lsls	r1, r5, #31
 8004fdc:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8004fe0:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8004fe4:	bf48      	it	mi
 8004fe6:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8004fea:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 8004fee:	461c      	mov	r4, r3
 8004ff0:	e780      	b.n	8004ef4 <__ieee754_sqrt+0x30>
 8004ff2:	0aca      	lsrs	r2, r1, #11
 8004ff4:	3815      	subs	r0, #21
 8004ff6:	0549      	lsls	r1, r1, #21
 8004ff8:	2a00      	cmp	r2, #0
 8004ffa:	d0fa      	beq.n	8004ff2 <__ieee754_sqrt+0x12e>
 8004ffc:	02d6      	lsls	r6, r2, #11
 8004ffe:	d50a      	bpl.n	8005016 <__ieee754_sqrt+0x152>
 8005000:	f1c3 0420 	rsb	r4, r3, #32
 8005004:	fa21 f404 	lsr.w	r4, r1, r4
 8005008:	1e5d      	subs	r5, r3, #1
 800500a:	4099      	lsls	r1, r3
 800500c:	4322      	orrs	r2, r4
 800500e:	1b43      	subs	r3, r0, r5
 8005010:	e78b      	b.n	8004f2a <__ieee754_sqrt+0x66>
 8005012:	4618      	mov	r0, r3
 8005014:	e7f0      	b.n	8004ff8 <__ieee754_sqrt+0x134>
 8005016:	0052      	lsls	r2, r2, #1
 8005018:	3301      	adds	r3, #1
 800501a:	e7ef      	b.n	8004ffc <__ieee754_sqrt+0x138>
 800501c:	46a0      	mov	r8, r4
 800501e:	e7bf      	b.n	8004fa0 <__ieee754_sqrt+0xdc>
 8005020:	7ff00000 	.word	0x7ff00000

08005024 <fabs>:
 8005024:	ec51 0b10 	vmov	r0, r1, d0
 8005028:	ee10 2a10 	vmov	r2, s0
 800502c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8005030:	ec43 2b10 	vmov	d0, r2, r3
 8005034:	4770      	bx	lr

08005036 <finite>:
 8005036:	ee10 3a90 	vmov	r3, s1
 800503a:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
 800503e:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8005042:	0fc0      	lsrs	r0, r0, #31
 8005044:	4770      	bx	lr

08005046 <matherr>:
 8005046:	2000      	movs	r0, #0
 8005048:	4770      	bx	lr
 800504a:	0000      	movs	r0, r0
 800504c:	0000      	movs	r0, r0
	...

08005050 <nan>:
 8005050:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8005058 <nan+0x8>
 8005054:	4770      	bx	lr
 8005056:	bf00      	nop
 8005058:	00000000 	.word	0x00000000
 800505c:	7ff80000 	.word	0x7ff80000

08005060 <rint>:
 8005060:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005062:	ec51 0b10 	vmov	r0, r1, d0
 8005066:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800506a:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 800506e:	2e13      	cmp	r6, #19
 8005070:	460b      	mov	r3, r1
 8005072:	ee10 4a10 	vmov	r4, s0
 8005076:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 800507a:	dc56      	bgt.n	800512a <rint+0xca>
 800507c:	2e00      	cmp	r6, #0
 800507e:	da2b      	bge.n	80050d8 <rint+0x78>
 8005080:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8005084:	4302      	orrs	r2, r0
 8005086:	d023      	beq.n	80050d0 <rint+0x70>
 8005088:	f3c1 0213 	ubfx	r2, r1, #0, #20
 800508c:	4302      	orrs	r2, r0
 800508e:	4254      	negs	r4, r2
 8005090:	4314      	orrs	r4, r2
 8005092:	0c4b      	lsrs	r3, r1, #17
 8005094:	0b24      	lsrs	r4, r4, #12
 8005096:	045b      	lsls	r3, r3, #17
 8005098:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 800509c:	ea44 0103 	orr.w	r1, r4, r3
 80050a0:	460b      	mov	r3, r1
 80050a2:	492f      	ldr	r1, [pc, #188]	; (8005160 <rint+0x100>)
 80050a4:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
 80050a8:	e9d1 6700 	ldrd	r6, r7, [r1]
 80050ac:	4602      	mov	r2, r0
 80050ae:	4639      	mov	r1, r7
 80050b0:	4630      	mov	r0, r6
 80050b2:	f7fb f8eb 	bl	800028c <__adddf3>
 80050b6:	e9cd 0100 	strd	r0, r1, [sp]
 80050ba:	463b      	mov	r3, r7
 80050bc:	4632      	mov	r2, r6
 80050be:	e9dd 0100 	ldrd	r0, r1, [sp]
 80050c2:	f7fb f8e1 	bl	8000288 <__aeabi_dsub>
 80050c6:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80050ca:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 80050ce:	4639      	mov	r1, r7
 80050d0:	ec41 0b10 	vmov	d0, r0, r1
 80050d4:	b003      	add	sp, #12
 80050d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80050d8:	4a22      	ldr	r2, [pc, #136]	; (8005164 <rint+0x104>)
 80050da:	4132      	asrs	r2, r6
 80050dc:	ea01 0702 	and.w	r7, r1, r2
 80050e0:	4307      	orrs	r7, r0
 80050e2:	d0f5      	beq.n	80050d0 <rint+0x70>
 80050e4:	0852      	lsrs	r2, r2, #1
 80050e6:	4011      	ands	r1, r2
 80050e8:	430c      	orrs	r4, r1
 80050ea:	d00b      	beq.n	8005104 <rint+0xa4>
 80050ec:	ea23 0202 	bic.w	r2, r3, r2
 80050f0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80050f4:	2e13      	cmp	r6, #19
 80050f6:	fa43 f306 	asr.w	r3, r3, r6
 80050fa:	bf0c      	ite	eq
 80050fc:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 8005100:	2400      	movne	r4, #0
 8005102:	4313      	orrs	r3, r2
 8005104:	4916      	ldr	r1, [pc, #88]	; (8005160 <rint+0x100>)
 8005106:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 800510a:	4622      	mov	r2, r4
 800510c:	e9d5 4500 	ldrd	r4, r5, [r5]
 8005110:	4620      	mov	r0, r4
 8005112:	4629      	mov	r1, r5
 8005114:	f7fb f8ba 	bl	800028c <__adddf3>
 8005118:	e9cd 0100 	strd	r0, r1, [sp]
 800511c:	4622      	mov	r2, r4
 800511e:	462b      	mov	r3, r5
 8005120:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005124:	f7fb f8b0 	bl	8000288 <__aeabi_dsub>
 8005128:	e7d2      	b.n	80050d0 <rint+0x70>
 800512a:	2e33      	cmp	r6, #51	; 0x33
 800512c:	dd07      	ble.n	800513e <rint+0xde>
 800512e:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8005132:	d1cd      	bne.n	80050d0 <rint+0x70>
 8005134:	ee10 2a10 	vmov	r2, s0
 8005138:	f7fb f8a8 	bl	800028c <__adddf3>
 800513c:	e7c8      	b.n	80050d0 <rint+0x70>
 800513e:	f2a2 4613 	subw	r6, r2, #1043	; 0x413
 8005142:	f04f 32ff 	mov.w	r2, #4294967295
 8005146:	40f2      	lsrs	r2, r6
 8005148:	4210      	tst	r0, r2
 800514a:	d0c1      	beq.n	80050d0 <rint+0x70>
 800514c:	0852      	lsrs	r2, r2, #1
 800514e:	4210      	tst	r0, r2
 8005150:	bf1f      	itttt	ne
 8005152:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 8005156:	ea20 0202 	bicne.w	r2, r0, r2
 800515a:	4134      	asrne	r4, r6
 800515c:	4314      	orrne	r4, r2
 800515e:	e7d1      	b.n	8005104 <rint+0xa4>
 8005160:	08005360 	.word	0x08005360
 8005164:	000fffff 	.word	0x000fffff

08005168 <scalbn>:
 8005168:	b570      	push	{r4, r5, r6, lr}
 800516a:	ec55 4b10 	vmov	r4, r5, d0
 800516e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8005172:	4606      	mov	r6, r0
 8005174:	462b      	mov	r3, r5
 8005176:	b9aa      	cbnz	r2, 80051a4 <scalbn+0x3c>
 8005178:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800517c:	4323      	orrs	r3, r4
 800517e:	d03b      	beq.n	80051f8 <scalbn+0x90>
 8005180:	4b31      	ldr	r3, [pc, #196]	; (8005248 <scalbn+0xe0>)
 8005182:	4629      	mov	r1, r5
 8005184:	2200      	movs	r2, #0
 8005186:	ee10 0a10 	vmov	r0, s0
 800518a:	f7fb fa35 	bl	80005f8 <__aeabi_dmul>
 800518e:	4b2f      	ldr	r3, [pc, #188]	; (800524c <scalbn+0xe4>)
 8005190:	429e      	cmp	r6, r3
 8005192:	4604      	mov	r4, r0
 8005194:	460d      	mov	r5, r1
 8005196:	da12      	bge.n	80051be <scalbn+0x56>
 8005198:	a327      	add	r3, pc, #156	; (adr r3, 8005238 <scalbn+0xd0>)
 800519a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800519e:	f7fb fa2b 	bl	80005f8 <__aeabi_dmul>
 80051a2:	e009      	b.n	80051b8 <scalbn+0x50>
 80051a4:	f240 71ff 	movw	r1, #2047	; 0x7ff
 80051a8:	428a      	cmp	r2, r1
 80051aa:	d10c      	bne.n	80051c6 <scalbn+0x5e>
 80051ac:	ee10 2a10 	vmov	r2, s0
 80051b0:	4620      	mov	r0, r4
 80051b2:	4629      	mov	r1, r5
 80051b4:	f7fb f86a 	bl	800028c <__adddf3>
 80051b8:	4604      	mov	r4, r0
 80051ba:	460d      	mov	r5, r1
 80051bc:	e01c      	b.n	80051f8 <scalbn+0x90>
 80051be:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80051c2:	460b      	mov	r3, r1
 80051c4:	3a36      	subs	r2, #54	; 0x36
 80051c6:	4432      	add	r2, r6
 80051c8:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80051cc:	428a      	cmp	r2, r1
 80051ce:	dd0b      	ble.n	80051e8 <scalbn+0x80>
 80051d0:	ec45 4b11 	vmov	d1, r4, r5
 80051d4:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 8005240 <scalbn+0xd8>
 80051d8:	f000 f83c 	bl	8005254 <copysign>
 80051dc:	a318      	add	r3, pc, #96	; (adr r3, 8005240 <scalbn+0xd8>)
 80051de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051e2:	ec51 0b10 	vmov	r0, r1, d0
 80051e6:	e7da      	b.n	800519e <scalbn+0x36>
 80051e8:	2a00      	cmp	r2, #0
 80051ea:	dd08      	ble.n	80051fe <scalbn+0x96>
 80051ec:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80051f0:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80051f4:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80051f8:	ec45 4b10 	vmov	d0, r4, r5
 80051fc:	bd70      	pop	{r4, r5, r6, pc}
 80051fe:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8005202:	da0d      	bge.n	8005220 <scalbn+0xb8>
 8005204:	f24c 3350 	movw	r3, #50000	; 0xc350
 8005208:	429e      	cmp	r6, r3
 800520a:	ec45 4b11 	vmov	d1, r4, r5
 800520e:	dce1      	bgt.n	80051d4 <scalbn+0x6c>
 8005210:	ed9f 0b09 	vldr	d0, [pc, #36]	; 8005238 <scalbn+0xd0>
 8005214:	f000 f81e 	bl	8005254 <copysign>
 8005218:	a307      	add	r3, pc, #28	; (adr r3, 8005238 <scalbn+0xd0>)
 800521a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800521e:	e7e0      	b.n	80051e2 <scalbn+0x7a>
 8005220:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8005224:	3236      	adds	r2, #54	; 0x36
 8005226:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800522a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800522e:	4620      	mov	r0, r4
 8005230:	4629      	mov	r1, r5
 8005232:	2200      	movs	r2, #0
 8005234:	4b06      	ldr	r3, [pc, #24]	; (8005250 <scalbn+0xe8>)
 8005236:	e7b2      	b.n	800519e <scalbn+0x36>
 8005238:	c2f8f359 	.word	0xc2f8f359
 800523c:	01a56e1f 	.word	0x01a56e1f
 8005240:	8800759c 	.word	0x8800759c
 8005244:	7e37e43c 	.word	0x7e37e43c
 8005248:	43500000 	.word	0x43500000
 800524c:	ffff3cb0 	.word	0xffff3cb0
 8005250:	3c900000 	.word	0x3c900000

08005254 <copysign>:
 8005254:	ec51 0b10 	vmov	r0, r1, d0
 8005258:	ee11 0a90 	vmov	r0, s3
 800525c:	ee10 2a10 	vmov	r2, s0
 8005260:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8005264:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8005268:	ea41 0300 	orr.w	r3, r1, r0
 800526c:	ec43 2b10 	vmov	d0, r2, r3
 8005270:	4770      	bx	lr
	...

08005274 <_init>:
 8005274:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005276:	bf00      	nop
 8005278:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800527a:	bc08      	pop	{r3}
 800527c:	469e      	mov	lr, r3
 800527e:	4770      	bx	lr

08005280 <_fini>:
 8005280:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005282:	bf00      	nop
 8005284:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005286:	bc08      	pop	{r3}
 8005288:	469e      	mov	lr, r3
 800528a:	4770      	bx	lr
