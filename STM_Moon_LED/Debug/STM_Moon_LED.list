
STM_Moon_LED.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000237c4  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000099a0  08023968  08023968  00033968  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0802d308  0802d308  00040074  2**0
                  CONTENTS
  4 .ARM          00000008  0802d308  0802d308  0003d308  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0802d310  0802d310  00040074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0802d310  0802d310  0003d310  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0802d314  0802d314  0003d314  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  0802d318  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000055f0  20000074  0802d38c  00040074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20005664  0802d38c  00045664  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00040074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a705  00000000  00000000  000400a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003432  00000000  00000000  0005a7a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001138  00000000  00000000  0005dbe0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001020  00000000  00000000  0005ed18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000195de  00000000  00000000  0005fd38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000204fa  00000000  00000000  00079316  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00091c1f  00000000  00000000  00099810  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0012b42f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005030  00000000  00000000  0012b484  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000074 	.word	0x20000074
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0802394c 	.word	0x0802394c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000078 	.word	0x20000078
 80001dc:	0802394c 	.word	0x0802394c

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2uiz>:
 8000b68:	004a      	lsls	r2, r1, #1
 8000b6a:	d211      	bcs.n	8000b90 <__aeabi_d2uiz+0x28>
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d211      	bcs.n	8000b96 <__aeabi_d2uiz+0x2e>
 8000b72:	d50d      	bpl.n	8000b90 <__aeabi_d2uiz+0x28>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d40e      	bmi.n	8000b9c <__aeabi_d2uiz+0x34>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b8e:	4770      	bx	lr
 8000b90:	f04f 0000 	mov.w	r0, #0
 8000b94:	4770      	bx	lr
 8000b96:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_d2uiz+0x3a>
 8000b9c:	f04f 30ff 	mov.w	r0, #4294967295
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0000 	mov.w	r0, #0
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b96e 	b.w	8000e9c <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	4604      	mov	r4, r0
 8000be0:	468c      	mov	ip, r1
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	f040 8083 	bne.w	8000cee <__udivmoddi4+0x116>
 8000be8:	428a      	cmp	r2, r1
 8000bea:	4617      	mov	r7, r2
 8000bec:	d947      	bls.n	8000c7e <__udivmoddi4+0xa6>
 8000bee:	fab2 f282 	clz	r2, r2
 8000bf2:	b142      	cbz	r2, 8000c06 <__udivmoddi4+0x2e>
 8000bf4:	f1c2 0020 	rsb	r0, r2, #32
 8000bf8:	fa24 f000 	lsr.w	r0, r4, r0
 8000bfc:	4091      	lsls	r1, r2
 8000bfe:	4097      	lsls	r7, r2
 8000c00:	ea40 0c01 	orr.w	ip, r0, r1
 8000c04:	4094      	lsls	r4, r2
 8000c06:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c0a:	0c23      	lsrs	r3, r4, #16
 8000c0c:	fbbc f6f8 	udiv	r6, ip, r8
 8000c10:	fa1f fe87 	uxth.w	lr, r7
 8000c14:	fb08 c116 	mls	r1, r8, r6, ip
 8000c18:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c1c:	fb06 f10e 	mul.w	r1, r6, lr
 8000c20:	4299      	cmp	r1, r3
 8000c22:	d909      	bls.n	8000c38 <__udivmoddi4+0x60>
 8000c24:	18fb      	adds	r3, r7, r3
 8000c26:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c2a:	f080 8119 	bcs.w	8000e60 <__udivmoddi4+0x288>
 8000c2e:	4299      	cmp	r1, r3
 8000c30:	f240 8116 	bls.w	8000e60 <__udivmoddi4+0x288>
 8000c34:	3e02      	subs	r6, #2
 8000c36:	443b      	add	r3, r7
 8000c38:	1a5b      	subs	r3, r3, r1
 8000c3a:	b2a4      	uxth	r4, r4
 8000c3c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c40:	fb08 3310 	mls	r3, r8, r0, r3
 8000c44:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c48:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c4c:	45a6      	cmp	lr, r4
 8000c4e:	d909      	bls.n	8000c64 <__udivmoddi4+0x8c>
 8000c50:	193c      	adds	r4, r7, r4
 8000c52:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c56:	f080 8105 	bcs.w	8000e64 <__udivmoddi4+0x28c>
 8000c5a:	45a6      	cmp	lr, r4
 8000c5c:	f240 8102 	bls.w	8000e64 <__udivmoddi4+0x28c>
 8000c60:	3802      	subs	r0, #2
 8000c62:	443c      	add	r4, r7
 8000c64:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c68:	eba4 040e 	sub.w	r4, r4, lr
 8000c6c:	2600      	movs	r6, #0
 8000c6e:	b11d      	cbz	r5, 8000c78 <__udivmoddi4+0xa0>
 8000c70:	40d4      	lsrs	r4, r2
 8000c72:	2300      	movs	r3, #0
 8000c74:	e9c5 4300 	strd	r4, r3, [r5]
 8000c78:	4631      	mov	r1, r6
 8000c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7e:	b902      	cbnz	r2, 8000c82 <__udivmoddi4+0xaa>
 8000c80:	deff      	udf	#255	; 0xff
 8000c82:	fab2 f282 	clz	r2, r2
 8000c86:	2a00      	cmp	r2, #0
 8000c88:	d150      	bne.n	8000d2c <__udivmoddi4+0x154>
 8000c8a:	1bcb      	subs	r3, r1, r7
 8000c8c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c90:	fa1f f887 	uxth.w	r8, r7
 8000c94:	2601      	movs	r6, #1
 8000c96:	fbb3 fcfe 	udiv	ip, r3, lr
 8000c9a:	0c21      	lsrs	r1, r4, #16
 8000c9c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000ca0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ca4:	fb08 f30c 	mul.w	r3, r8, ip
 8000ca8:	428b      	cmp	r3, r1
 8000caa:	d907      	bls.n	8000cbc <__udivmoddi4+0xe4>
 8000cac:	1879      	adds	r1, r7, r1
 8000cae:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000cb2:	d202      	bcs.n	8000cba <__udivmoddi4+0xe2>
 8000cb4:	428b      	cmp	r3, r1
 8000cb6:	f200 80e9 	bhi.w	8000e8c <__udivmoddi4+0x2b4>
 8000cba:	4684      	mov	ip, r0
 8000cbc:	1ac9      	subs	r1, r1, r3
 8000cbe:	b2a3      	uxth	r3, r4
 8000cc0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000cc4:	fb0e 1110 	mls	r1, lr, r0, r1
 8000cc8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000ccc:	fb08 f800 	mul.w	r8, r8, r0
 8000cd0:	45a0      	cmp	r8, r4
 8000cd2:	d907      	bls.n	8000ce4 <__udivmoddi4+0x10c>
 8000cd4:	193c      	adds	r4, r7, r4
 8000cd6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cda:	d202      	bcs.n	8000ce2 <__udivmoddi4+0x10a>
 8000cdc:	45a0      	cmp	r8, r4
 8000cde:	f200 80d9 	bhi.w	8000e94 <__udivmoddi4+0x2bc>
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	eba4 0408 	sub.w	r4, r4, r8
 8000ce8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000cec:	e7bf      	b.n	8000c6e <__udivmoddi4+0x96>
 8000cee:	428b      	cmp	r3, r1
 8000cf0:	d909      	bls.n	8000d06 <__udivmoddi4+0x12e>
 8000cf2:	2d00      	cmp	r5, #0
 8000cf4:	f000 80b1 	beq.w	8000e5a <__udivmoddi4+0x282>
 8000cf8:	2600      	movs	r6, #0
 8000cfa:	e9c5 0100 	strd	r0, r1, [r5]
 8000cfe:	4630      	mov	r0, r6
 8000d00:	4631      	mov	r1, r6
 8000d02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d06:	fab3 f683 	clz	r6, r3
 8000d0a:	2e00      	cmp	r6, #0
 8000d0c:	d14a      	bne.n	8000da4 <__udivmoddi4+0x1cc>
 8000d0e:	428b      	cmp	r3, r1
 8000d10:	d302      	bcc.n	8000d18 <__udivmoddi4+0x140>
 8000d12:	4282      	cmp	r2, r0
 8000d14:	f200 80b8 	bhi.w	8000e88 <__udivmoddi4+0x2b0>
 8000d18:	1a84      	subs	r4, r0, r2
 8000d1a:	eb61 0103 	sbc.w	r1, r1, r3
 8000d1e:	2001      	movs	r0, #1
 8000d20:	468c      	mov	ip, r1
 8000d22:	2d00      	cmp	r5, #0
 8000d24:	d0a8      	beq.n	8000c78 <__udivmoddi4+0xa0>
 8000d26:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d2a:	e7a5      	b.n	8000c78 <__udivmoddi4+0xa0>
 8000d2c:	f1c2 0320 	rsb	r3, r2, #32
 8000d30:	fa20 f603 	lsr.w	r6, r0, r3
 8000d34:	4097      	lsls	r7, r2
 8000d36:	fa01 f002 	lsl.w	r0, r1, r2
 8000d3a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d3e:	40d9      	lsrs	r1, r3
 8000d40:	4330      	orrs	r0, r6
 8000d42:	0c03      	lsrs	r3, r0, #16
 8000d44:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d48:	fa1f f887 	uxth.w	r8, r7
 8000d4c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d50:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d54:	fb06 f108 	mul.w	r1, r6, r8
 8000d58:	4299      	cmp	r1, r3
 8000d5a:	fa04 f402 	lsl.w	r4, r4, r2
 8000d5e:	d909      	bls.n	8000d74 <__udivmoddi4+0x19c>
 8000d60:	18fb      	adds	r3, r7, r3
 8000d62:	f106 3cff 	add.w	ip, r6, #4294967295
 8000d66:	f080 808d 	bcs.w	8000e84 <__udivmoddi4+0x2ac>
 8000d6a:	4299      	cmp	r1, r3
 8000d6c:	f240 808a 	bls.w	8000e84 <__udivmoddi4+0x2ac>
 8000d70:	3e02      	subs	r6, #2
 8000d72:	443b      	add	r3, r7
 8000d74:	1a5b      	subs	r3, r3, r1
 8000d76:	b281      	uxth	r1, r0
 8000d78:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d7c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d80:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d84:	fb00 f308 	mul.w	r3, r0, r8
 8000d88:	428b      	cmp	r3, r1
 8000d8a:	d907      	bls.n	8000d9c <__udivmoddi4+0x1c4>
 8000d8c:	1879      	adds	r1, r7, r1
 8000d8e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000d92:	d273      	bcs.n	8000e7c <__udivmoddi4+0x2a4>
 8000d94:	428b      	cmp	r3, r1
 8000d96:	d971      	bls.n	8000e7c <__udivmoddi4+0x2a4>
 8000d98:	3802      	subs	r0, #2
 8000d9a:	4439      	add	r1, r7
 8000d9c:	1acb      	subs	r3, r1, r3
 8000d9e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000da2:	e778      	b.n	8000c96 <__udivmoddi4+0xbe>
 8000da4:	f1c6 0c20 	rsb	ip, r6, #32
 8000da8:	fa03 f406 	lsl.w	r4, r3, r6
 8000dac:	fa22 f30c 	lsr.w	r3, r2, ip
 8000db0:	431c      	orrs	r4, r3
 8000db2:	fa20 f70c 	lsr.w	r7, r0, ip
 8000db6:	fa01 f306 	lsl.w	r3, r1, r6
 8000dba:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000dbe:	fa21 f10c 	lsr.w	r1, r1, ip
 8000dc2:	431f      	orrs	r7, r3
 8000dc4:	0c3b      	lsrs	r3, r7, #16
 8000dc6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000dca:	fa1f f884 	uxth.w	r8, r4
 8000dce:	fb0e 1119 	mls	r1, lr, r9, r1
 8000dd2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000dd6:	fb09 fa08 	mul.w	sl, r9, r8
 8000dda:	458a      	cmp	sl, r1
 8000ddc:	fa02 f206 	lsl.w	r2, r2, r6
 8000de0:	fa00 f306 	lsl.w	r3, r0, r6
 8000de4:	d908      	bls.n	8000df8 <__udivmoddi4+0x220>
 8000de6:	1861      	adds	r1, r4, r1
 8000de8:	f109 30ff 	add.w	r0, r9, #4294967295
 8000dec:	d248      	bcs.n	8000e80 <__udivmoddi4+0x2a8>
 8000dee:	458a      	cmp	sl, r1
 8000df0:	d946      	bls.n	8000e80 <__udivmoddi4+0x2a8>
 8000df2:	f1a9 0902 	sub.w	r9, r9, #2
 8000df6:	4421      	add	r1, r4
 8000df8:	eba1 010a 	sub.w	r1, r1, sl
 8000dfc:	b2bf      	uxth	r7, r7
 8000dfe:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e02:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e06:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e0a:	fb00 f808 	mul.w	r8, r0, r8
 8000e0e:	45b8      	cmp	r8, r7
 8000e10:	d907      	bls.n	8000e22 <__udivmoddi4+0x24a>
 8000e12:	19e7      	adds	r7, r4, r7
 8000e14:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e18:	d22e      	bcs.n	8000e78 <__udivmoddi4+0x2a0>
 8000e1a:	45b8      	cmp	r8, r7
 8000e1c:	d92c      	bls.n	8000e78 <__udivmoddi4+0x2a0>
 8000e1e:	3802      	subs	r0, #2
 8000e20:	4427      	add	r7, r4
 8000e22:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e26:	eba7 0708 	sub.w	r7, r7, r8
 8000e2a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e2e:	454f      	cmp	r7, r9
 8000e30:	46c6      	mov	lr, r8
 8000e32:	4649      	mov	r1, r9
 8000e34:	d31a      	bcc.n	8000e6c <__udivmoddi4+0x294>
 8000e36:	d017      	beq.n	8000e68 <__udivmoddi4+0x290>
 8000e38:	b15d      	cbz	r5, 8000e52 <__udivmoddi4+0x27a>
 8000e3a:	ebb3 020e 	subs.w	r2, r3, lr
 8000e3e:	eb67 0701 	sbc.w	r7, r7, r1
 8000e42:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e46:	40f2      	lsrs	r2, r6
 8000e48:	ea4c 0202 	orr.w	r2, ip, r2
 8000e4c:	40f7      	lsrs	r7, r6
 8000e4e:	e9c5 2700 	strd	r2, r7, [r5]
 8000e52:	2600      	movs	r6, #0
 8000e54:	4631      	mov	r1, r6
 8000e56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e5a:	462e      	mov	r6, r5
 8000e5c:	4628      	mov	r0, r5
 8000e5e:	e70b      	b.n	8000c78 <__udivmoddi4+0xa0>
 8000e60:	4606      	mov	r6, r0
 8000e62:	e6e9      	b.n	8000c38 <__udivmoddi4+0x60>
 8000e64:	4618      	mov	r0, r3
 8000e66:	e6fd      	b.n	8000c64 <__udivmoddi4+0x8c>
 8000e68:	4543      	cmp	r3, r8
 8000e6a:	d2e5      	bcs.n	8000e38 <__udivmoddi4+0x260>
 8000e6c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e70:	eb69 0104 	sbc.w	r1, r9, r4
 8000e74:	3801      	subs	r0, #1
 8000e76:	e7df      	b.n	8000e38 <__udivmoddi4+0x260>
 8000e78:	4608      	mov	r0, r1
 8000e7a:	e7d2      	b.n	8000e22 <__udivmoddi4+0x24a>
 8000e7c:	4660      	mov	r0, ip
 8000e7e:	e78d      	b.n	8000d9c <__udivmoddi4+0x1c4>
 8000e80:	4681      	mov	r9, r0
 8000e82:	e7b9      	b.n	8000df8 <__udivmoddi4+0x220>
 8000e84:	4666      	mov	r6, ip
 8000e86:	e775      	b.n	8000d74 <__udivmoddi4+0x19c>
 8000e88:	4630      	mov	r0, r6
 8000e8a:	e74a      	b.n	8000d22 <__udivmoddi4+0x14a>
 8000e8c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e90:	4439      	add	r1, r7
 8000e92:	e713      	b.n	8000cbc <__udivmoddi4+0xe4>
 8000e94:	3802      	subs	r0, #2
 8000e96:	443c      	add	r4, r7
 8000e98:	e724      	b.n	8000ce4 <__udivmoddi4+0x10c>
 8000e9a:	bf00      	nop

08000e9c <__aeabi_idiv0>:
 8000e9c:	4770      	bx	lr
 8000e9e:	bf00      	nop

08000ea0 <LED_findPos>:
// *******************************************************************
// 					MANIPULATION OF THE LED MATRIX
// *******************************************************************


uint8_t LED_findPos(char letter, uint8_t number){
 8000ea0:	b480      	push	{r7}
 8000ea2:	b085      	sub	sp, #20
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	460a      	mov	r2, r1
 8000eaa:	71fb      	strb	r3, [r7, #7]
 8000eac:	4613      	mov	r3, r2
 8000eae:	71bb      	strb	r3, [r7, #6]

	uint8_t position;

	if (number==1){
 8000eb0:	79bb      	ldrb	r3, [r7, #6]
 8000eb2:	2b01      	cmp	r3, #1
 8000eb4:	d101      	bne.n	8000eba <LED_findPos+0x1a>
		return 0;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	e06d      	b.n	8000f96 <LED_findPos+0xf6>
	}

	switch(letter){
 8000eba:	79fb      	ldrb	r3, [r7, #7]
 8000ebc:	3b41      	subs	r3, #65	; 0x41
 8000ebe:	2b0a      	cmp	r3, #10
 8000ec0:	d865      	bhi.n	8000f8e <LED_findPos+0xee>
 8000ec2:	a201      	add	r2, pc, #4	; (adr r2, 8000ec8 <LED_findPos+0x28>)
 8000ec4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ec8:	08000ef5 	.word	0x08000ef5
 8000ecc:	08000efd 	.word	0x08000efd
 8000ed0:	08000f07 	.word	0x08000f07
 8000ed4:	08000f1d 	.word	0x08000f1d
 8000ed8:	08000f27 	.word	0x08000f27
 8000edc:	08000f2f 	.word	0x08000f2f
 8000ee0:	08000f49 	.word	0x08000f49
 8000ee4:	08000f51 	.word	0x08000f51
 8000ee8:	08000f61 	.word	0x08000f61
 8000eec:	08000f77 	.word	0x08000f77
 8000ef0:	08000f87 	.word	0x08000f87
	case('A'):
		position = number-1;
 8000ef4:	79bb      	ldrb	r3, [r7, #6]
 8000ef6:	3b01      	subs	r3, #1
 8000ef8:	73fb      	strb	r3, [r7, #15]
		break;
 8000efa:	e04b      	b.n	8000f94 <LED_findPos+0xf4>
	case('B'):
		position = 36-number;
 8000efc:	79bb      	ldrb	r3, [r7, #6]
 8000efe:	f1c3 0324 	rsb	r3, r3, #36	; 0x24
 8000f02:	73fb      	strb	r3, [r7, #15]
		break;
 8000f04:	e046      	b.n	8000f94 <LED_findPos+0xf4>
	case('C'):
		if(number < 17){
 8000f06:	79bb      	ldrb	r3, [r7, #6]
 8000f08:	2b10      	cmp	r3, #16
 8000f0a:	d803      	bhi.n	8000f14 <LED_findPos+0x74>
			position = 34+number-1;
 8000f0c:	79bb      	ldrb	r3, [r7, #6]
 8000f0e:	3321      	adds	r3, #33	; 0x21
 8000f10:	73fb      	strb	r3, [r7, #15]
		} else {
			position = 34+number;
		}
		break;
 8000f12:	e03f      	b.n	8000f94 <LED_findPos+0xf4>
			position = 34+number;
 8000f14:	79bb      	ldrb	r3, [r7, #6]
 8000f16:	3322      	adds	r3, #34	; 0x22
 8000f18:	73fb      	strb	r3, [r7, #15]
		break;
 8000f1a:	e03b      	b.n	8000f94 <LED_findPos+0xf4>
	case('D'):
		position = 71-number;
 8000f1c:	79bb      	ldrb	r3, [r7, #6]
 8000f1e:	f1c3 0347 	rsb	r3, r3, #71	; 0x47
 8000f22:	73fb      	strb	r3, [r7, #15]
		break;
 8000f24:	e036      	b.n	8000f94 <LED_findPos+0xf4>
	case('E'):
		position = 69+number;
 8000f26:	79bb      	ldrb	r3, [r7, #6]
 8000f28:	3345      	adds	r3, #69	; 0x45
 8000f2a:	73fb      	strb	r3, [r7, #15]
		break;
 8000f2c:	e032      	b.n	8000f94 <LED_findPos+0xf4>
	case('F'):
		if(number>11){
 8000f2e:	79bb      	ldrb	r3, [r7, #6]
 8000f30:	2b0b      	cmp	r3, #11
 8000f32:	d904      	bls.n	8000f3e <LED_findPos+0x9e>
			position = 106-number;
 8000f34:	79bb      	ldrb	r3, [r7, #6]
 8000f36:	f1c3 036a 	rsb	r3, r3, #106	; 0x6a
 8000f3a:	73fb      	strb	r3, [r7, #15]
		}else{
			position = 107-number;
		}
		break;
 8000f3c:	e02a      	b.n	8000f94 <LED_findPos+0xf4>
			position = 107-number;
 8000f3e:	79bb      	ldrb	r3, [r7, #6]
 8000f40:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8000f44:	73fb      	strb	r3, [r7, #15]
		break;
 8000f46:	e025      	b.n	8000f94 <LED_findPos+0xf4>
	case('G'):
		position = 104+number;
 8000f48:	79bb      	ldrb	r3, [r7, #6]
 8000f4a:	3368      	adds	r3, #104	; 0x68
 8000f4c:	73fb      	strb	r3, [r7, #15]
		break;
 8000f4e:	e021      	b.n	8000f94 <LED_findPos+0xf4>
	case('H'):
		position = 142-number;
 8000f50:	79bb      	ldrb	r3, [r7, #6]
 8000f52:	f1c3 23ff 	rsb	r3, r3, #4278255360	; 0xff00ff00
 8000f56:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 8000f5a:	338e      	adds	r3, #142	; 0x8e
 8000f5c:	73fb      	strb	r3, [r7, #15]
		break;
 8000f5e:	e019      	b.n	8000f94 <LED_findPos+0xf4>
	case('I'):
		if(number>5){
 8000f60:	79bb      	ldrb	r3, [r7, #6]
 8000f62:	2b05      	cmp	r3, #5
 8000f64:	d903      	bls.n	8000f6e <LED_findPos+0xce>
			position = 140+number;
 8000f66:	79bb      	ldrb	r3, [r7, #6]
 8000f68:	3b74      	subs	r3, #116	; 0x74
 8000f6a:	73fb      	strb	r3, [r7, #15]
		}else{
			position = 139+number;
		}
		break;
 8000f6c:	e012      	b.n	8000f94 <LED_findPos+0xf4>
			position = 139+number;
 8000f6e:	79bb      	ldrb	r3, [r7, #6]
 8000f70:	3b75      	subs	r3, #117	; 0x75
 8000f72:	73fb      	strb	r3, [r7, #15]
		break;
 8000f74:	e00e      	b.n	8000f94 <LED_findPos+0xf4>
	case('J'):
		position = 177-number;
 8000f76:	79bb      	ldrb	r3, [r7, #6]
 8000f78:	f1c3 23ff 	rsb	r3, r3, #4278255360	; 0xff00ff00
 8000f7c:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 8000f80:	33b1      	adds	r3, #177	; 0xb1
 8000f82:	73fb      	strb	r3, [r7, #15]
		break;
 8000f84:	e006      	b.n	8000f94 <LED_findPos+0xf4>
	case('K'):
		position = 174+number;
 8000f86:	79bb      	ldrb	r3, [r7, #6]
 8000f88:	3b52      	subs	r3, #82	; 0x52
 8000f8a:	73fb      	strb	r3, [r7, #15]
		break;
 8000f8c:	e002      	b.n	8000f94 <LED_findPos+0xf4>
	default:
		position=0;
 8000f8e:	2300      	movs	r3, #0
 8000f90:	73fb      	strb	r3, [r7, #15]
		break;
 8000f92:	bf00      	nop
	}


	return position;
 8000f94:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f96:	4618      	mov	r0, r3
 8000f98:	3714      	adds	r7, #20
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa0:	4770      	bx	lr
 8000fa2:	bf00      	nop

08000fa4 <convert_digit>:


uint8_t convert_digit(char dig1, char dig2){
 8000fa4:	b480      	push	{r7}
 8000fa6:	b085      	sub	sp, #20
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	4603      	mov	r3, r0
 8000fac:	460a      	mov	r2, r1
 8000fae:	71fb      	strb	r3, [r7, #7]
 8000fb0:	4613      	mov	r3, r2
 8000fb2:	71bb      	strb	r3, [r7, #6]

	uint8_t res=0;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	73fb      	strb	r3, [r7, #15]

	if(dig1 == '1'){
 8000fb8:	79fb      	ldrb	r3, [r7, #7]
 8000fba:	2b31      	cmp	r3, #49	; 0x31
 8000fbc:	d101      	bne.n	8000fc2 <convert_digit+0x1e>
		res = 10;
 8000fbe:	230a      	movs	r3, #10
 8000fc0:	73fb      	strb	r3, [r7, #15]
	}

	if(dig2 == '1'){
 8000fc2:	79bb      	ldrb	r3, [r7, #6]
 8000fc4:	2b31      	cmp	r3, #49	; 0x31
 8000fc6:	d103      	bne.n	8000fd0 <convert_digit+0x2c>
		res += 1;
 8000fc8:	7bfb      	ldrb	r3, [r7, #15]
 8000fca:	3301      	adds	r3, #1
 8000fcc:	73fb      	strb	r3, [r7, #15]
 8000fce:	e039      	b.n	8001044 <convert_digit+0xa0>
	}else if(dig2 == '2'){
 8000fd0:	79bb      	ldrb	r3, [r7, #6]
 8000fd2:	2b32      	cmp	r3, #50	; 0x32
 8000fd4:	d103      	bne.n	8000fde <convert_digit+0x3a>
		res += 2;
 8000fd6:	7bfb      	ldrb	r3, [r7, #15]
 8000fd8:	3302      	adds	r3, #2
 8000fda:	73fb      	strb	r3, [r7, #15]
 8000fdc:	e032      	b.n	8001044 <convert_digit+0xa0>
	}else if(dig2 == '3'){
 8000fde:	79bb      	ldrb	r3, [r7, #6]
 8000fe0:	2b33      	cmp	r3, #51	; 0x33
 8000fe2:	d103      	bne.n	8000fec <convert_digit+0x48>
		res += 3;
 8000fe4:	7bfb      	ldrb	r3, [r7, #15]
 8000fe6:	3303      	adds	r3, #3
 8000fe8:	73fb      	strb	r3, [r7, #15]
 8000fea:	e02b      	b.n	8001044 <convert_digit+0xa0>
	}else if(dig2 == '4'){
 8000fec:	79bb      	ldrb	r3, [r7, #6]
 8000fee:	2b34      	cmp	r3, #52	; 0x34
 8000ff0:	d103      	bne.n	8000ffa <convert_digit+0x56>
		res += 4;
 8000ff2:	7bfb      	ldrb	r3, [r7, #15]
 8000ff4:	3304      	adds	r3, #4
 8000ff6:	73fb      	strb	r3, [r7, #15]
 8000ff8:	e024      	b.n	8001044 <convert_digit+0xa0>
	}else if(dig2 == '5'){
 8000ffa:	79bb      	ldrb	r3, [r7, #6]
 8000ffc:	2b35      	cmp	r3, #53	; 0x35
 8000ffe:	d103      	bne.n	8001008 <convert_digit+0x64>
		res += 5;
 8001000:	7bfb      	ldrb	r3, [r7, #15]
 8001002:	3305      	adds	r3, #5
 8001004:	73fb      	strb	r3, [r7, #15]
 8001006:	e01d      	b.n	8001044 <convert_digit+0xa0>
	}else if(dig2 == '6'){
 8001008:	79bb      	ldrb	r3, [r7, #6]
 800100a:	2b36      	cmp	r3, #54	; 0x36
 800100c:	d103      	bne.n	8001016 <convert_digit+0x72>
		res += 6;
 800100e:	7bfb      	ldrb	r3, [r7, #15]
 8001010:	3306      	adds	r3, #6
 8001012:	73fb      	strb	r3, [r7, #15]
 8001014:	e016      	b.n	8001044 <convert_digit+0xa0>
	}else if(dig2 == '7'){
 8001016:	79bb      	ldrb	r3, [r7, #6]
 8001018:	2b37      	cmp	r3, #55	; 0x37
 800101a:	d103      	bne.n	8001024 <convert_digit+0x80>
		res += 7;
 800101c:	7bfb      	ldrb	r3, [r7, #15]
 800101e:	3307      	adds	r3, #7
 8001020:	73fb      	strb	r3, [r7, #15]
 8001022:	e00f      	b.n	8001044 <convert_digit+0xa0>
	}else if(dig2 == '8'){
 8001024:	79bb      	ldrb	r3, [r7, #6]
 8001026:	2b38      	cmp	r3, #56	; 0x38
 8001028:	d103      	bne.n	8001032 <convert_digit+0x8e>
		res += 8;
 800102a:	7bfb      	ldrb	r3, [r7, #15]
 800102c:	3308      	adds	r3, #8
 800102e:	73fb      	strb	r3, [r7, #15]
 8001030:	e008      	b.n	8001044 <convert_digit+0xa0>
	}else if(dig2 == '9'){
 8001032:	79bb      	ldrb	r3, [r7, #6]
 8001034:	2b39      	cmp	r3, #57	; 0x39
 8001036:	d103      	bne.n	8001040 <convert_digit+0x9c>
		res += 9;
 8001038:	7bfb      	ldrb	r3, [r7, #15]
 800103a:	3309      	adds	r3, #9
 800103c:	73fb      	strb	r3, [r7, #15]
 800103e:	e001      	b.n	8001044 <convert_digit+0xa0>
	}else if(dig2 == '0'){
 8001040:	79bb      	ldrb	r3, [r7, #6]
 8001042:	2b30      	cmp	r3, #48	; 0x30
		res += 0;
	}

	return res;
 8001044:	7bfb      	ldrb	r3, [r7, #15]
}
 8001046:	4618      	mov	r0, r3
 8001048:	3714      	adds	r7, #20
 800104a:	46bd      	mov	sp, r7
 800104c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001050:	4770      	bx	lr
	...

08001054 <problem_genArray>:

void problem_genArray(Problem * p){
 8001054:	b5b0      	push	{r4, r5, r7, lr}
 8001056:	b08c      	sub	sp, #48	; 0x30
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
 800105c:	466b      	mov	r3, sp
 800105e:	461d      	mov	r5, r3

	uint16_t LedPos = 0;
 8001060:	2300      	movs	r3, #0
 8001062:	857b      	strh	r3, [r7, #42]	; 0x2a
	char     lettArr[p->moveSize];
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	681c      	ldr	r4, [r3, #0]
 8001068:	1e63      	subs	r3, r4, #1
 800106a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800106c:	4623      	mov	r3, r4
 800106e:	4618      	mov	r0, r3
 8001070:	f04f 0100 	mov.w	r1, #0
 8001074:	f04f 0200 	mov.w	r2, #0
 8001078:	f04f 0300 	mov.w	r3, #0
 800107c:	00cb      	lsls	r3, r1, #3
 800107e:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8001082:	00c2      	lsls	r2, r0, #3
 8001084:	4623      	mov	r3, r4
 8001086:	4618      	mov	r0, r3
 8001088:	f04f 0100 	mov.w	r1, #0
 800108c:	f04f 0200 	mov.w	r2, #0
 8001090:	f04f 0300 	mov.w	r3, #0
 8001094:	00cb      	lsls	r3, r1, #3
 8001096:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800109a:	00c2      	lsls	r2, r0, #3
 800109c:	4623      	mov	r3, r4
 800109e:	3307      	adds	r3, #7
 80010a0:	08db      	lsrs	r3, r3, #3
 80010a2:	00db      	lsls	r3, r3, #3
 80010a4:	ebad 0d03 	sub.w	sp, sp, r3
 80010a8:	466b      	mov	r3, sp
 80010aa:	3300      	adds	r3, #0
 80010ac:	61bb      	str	r3, [r7, #24]
	uint8_t  numArr[p->moveSize];
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	681c      	ldr	r4, [r3, #0]
 80010b2:	1e63      	subs	r3, r4, #1
 80010b4:	617b      	str	r3, [r7, #20]
 80010b6:	4623      	mov	r3, r4
 80010b8:	4618      	mov	r0, r3
 80010ba:	f04f 0100 	mov.w	r1, #0
 80010be:	f04f 0200 	mov.w	r2, #0
 80010c2:	f04f 0300 	mov.w	r3, #0
 80010c6:	00cb      	lsls	r3, r1, #3
 80010c8:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80010cc:	00c2      	lsls	r2, r0, #3
 80010ce:	4623      	mov	r3, r4
 80010d0:	4618      	mov	r0, r3
 80010d2:	f04f 0100 	mov.w	r1, #0
 80010d6:	f04f 0200 	mov.w	r2, #0
 80010da:	f04f 0300 	mov.w	r3, #0
 80010de:	00cb      	lsls	r3, r1, #3
 80010e0:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80010e4:	00c2      	lsls	r2, r0, #3
 80010e6:	4623      	mov	r3, r4
 80010e8:	3307      	adds	r3, #7
 80010ea:	08db      	lsrs	r3, r3, #3
 80010ec:	00db      	lsls	r3, r3, #3
 80010ee:	ebad 0d03 	sub.w	sp, sp, r3
 80010f2:	466b      	mov	r3, sp
 80010f4:	3300      	adds	r3, #0
 80010f6:	613b      	str	r3, [r7, #16]
	uint8_t  typeArr[p->moveSize];
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	681c      	ldr	r4, [r3, #0]
 80010fc:	1e63      	subs	r3, r4, #1
 80010fe:	60fb      	str	r3, [r7, #12]
 8001100:	4623      	mov	r3, r4
 8001102:	4618      	mov	r0, r3
 8001104:	f04f 0100 	mov.w	r1, #0
 8001108:	f04f 0200 	mov.w	r2, #0
 800110c:	f04f 0300 	mov.w	r3, #0
 8001110:	00cb      	lsls	r3, r1, #3
 8001112:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8001116:	00c2      	lsls	r2, r0, #3
 8001118:	4623      	mov	r3, r4
 800111a:	4618      	mov	r0, r3
 800111c:	f04f 0100 	mov.w	r1, #0
 8001120:	f04f 0200 	mov.w	r2, #0
 8001124:	f04f 0300 	mov.w	r3, #0
 8001128:	00cb      	lsls	r3, r1, #3
 800112a:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800112e:	00c2      	lsls	r2, r0, #3
 8001130:	4623      	mov	r3, r4
 8001132:	3307      	adds	r3, #7
 8001134:	08db      	lsrs	r3, r3, #3
 8001136:	00db      	lsls	r3, r3, #3
 8001138:	ebad 0d03 	sub.w	sp, sp, r3
 800113c:	466b      	mov	r3, sp
 800113e:	3300      	adds	r3, #0
 8001140:	60bb      	str	r3, [r7, #8]

	uint8_t number_iter=0;
 8001142:	2300      	movs	r3, #0
 8001144:	77fb      	strb	r3, [r7, #31]

	LED_setAllBlack();	// put to 0 all the colors for each LED
 8001146:	f000 f8d3 	bl	80012f0 <LED_setAllBlack>

	for(int j=0; j<p->moveSize; j++){
 800114a:	2300      	movs	r3, #0
 800114c:	623b      	str	r3, [r7, #32]
 800114e:	e048      	b.n	80011e2 <problem_genArray+0x18e>
		lettArr[j] = p->moveLetters[j*2];	// extract letter of hold
 8001150:	6a3b      	ldr	r3, [r7, #32]
 8001152:	005b      	lsls	r3, r3, #1
 8001154:	687a      	ldr	r2, [r7, #4]
 8001156:	4413      	add	r3, r2
 8001158:	f893 10a4 	ldrb.w	r1, [r3, #164]	; 0xa4
 800115c:	69ba      	ldr	r2, [r7, #24]
 800115e:	6a3b      	ldr	r3, [r7, #32]
 8001160:	4413      	add	r3, r2
 8001162:	460a      	mov	r2, r1
 8001164:	701a      	strb	r2, [r3, #0]
		typeArr[j] = p->startFinish[j*2];	// extract type of hold
 8001166:	6a3b      	ldr	r3, [r7, #32]
 8001168:	005b      	lsls	r3, r3, #1
 800116a:	687a      	ldr	r2, [r7, #4]
 800116c:	4413      	add	r3, r2
 800116e:	f893 11b3 	ldrb.w	r1, [r3, #435]	; 0x1b3
 8001172:	68ba      	ldr	r2, [r7, #8]
 8001174:	6a3b      	ldr	r3, [r7, #32]
 8001176:	4413      	add	r3, r2
 8001178:	460a      	mov	r2, r1
 800117a:	701a      	strb	r2, [r3, #0]

		if(p->moveNumbers[number_iter+1] != ','){
 800117c:	7ffb      	ldrb	r3, [r7, #31]
 800117e:	3301      	adds	r3, #1
 8001180:	687a      	ldr	r2, [r7, #4]
 8001182:	4413      	add	r3, r2
 8001184:	791b      	ldrb	r3, [r3, #4]
 8001186:	2b2c      	cmp	r3, #44	; 0x2c
 8001188:	d016      	beq.n	80011b8 <problem_genArray+0x164>
			numArr[j] = convert_digit(p->moveNumbers[number_iter], p->moveNumbers[number_iter+1]);
 800118a:	7ffb      	ldrb	r3, [r7, #31]
 800118c:	687a      	ldr	r2, [r7, #4]
 800118e:	4413      	add	r3, r2
 8001190:	7918      	ldrb	r0, [r3, #4]
 8001192:	7ffb      	ldrb	r3, [r7, #31]
 8001194:	3301      	adds	r3, #1
 8001196:	687a      	ldr	r2, [r7, #4]
 8001198:	4413      	add	r3, r2
 800119a:	791b      	ldrb	r3, [r3, #4]
 800119c:	4619      	mov	r1, r3
 800119e:	f7ff ff01 	bl	8000fa4 <convert_digit>
 80011a2:	4603      	mov	r3, r0
 80011a4:	4619      	mov	r1, r3
 80011a6:	693a      	ldr	r2, [r7, #16]
 80011a8:	6a3b      	ldr	r3, [r7, #32]
 80011aa:	4413      	add	r3, r2
 80011ac:	460a      	mov	r2, r1
 80011ae:	701a      	strb	r2, [r3, #0]
			number_iter += 3;
 80011b0:	7ffb      	ldrb	r3, [r7, #31]
 80011b2:	3303      	adds	r3, #3
 80011b4:	77fb      	strb	r3, [r7, #31]
 80011b6:	e011      	b.n	80011dc <problem_genArray+0x188>
		} else {
			numArr[j] = convert_digit('0', p->moveNumbers[number_iter]);
 80011b8:	7ffb      	ldrb	r3, [r7, #31]
 80011ba:	687a      	ldr	r2, [r7, #4]
 80011bc:	4413      	add	r3, r2
 80011be:	791b      	ldrb	r3, [r3, #4]
 80011c0:	4619      	mov	r1, r3
 80011c2:	2030      	movs	r0, #48	; 0x30
 80011c4:	f7ff feee 	bl	8000fa4 <convert_digit>
 80011c8:	4603      	mov	r3, r0
 80011ca:	4619      	mov	r1, r3
 80011cc:	693a      	ldr	r2, [r7, #16]
 80011ce:	6a3b      	ldr	r3, [r7, #32]
 80011d0:	4413      	add	r3, r2
 80011d2:	460a      	mov	r2, r1
 80011d4:	701a      	strb	r2, [r3, #0]
			number_iter += 2;
 80011d6:	7ffb      	ldrb	r3, [r7, #31]
 80011d8:	3302      	adds	r3, #2
 80011da:	77fb      	strb	r3, [r7, #31]
	for(int j=0; j<p->moveSize; j++){
 80011dc:	6a3b      	ldr	r3, [r7, #32]
 80011de:	3301      	adds	r3, #1
 80011e0:	623b      	str	r3, [r7, #32]
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	6a3a      	ldr	r2, [r7, #32]
 80011e8:	429a      	cmp	r2, r3
 80011ea:	dbb1      	blt.n	8001150 <problem_genArray+0xfc>
		}
	}


	// for each move define the color of the corresponding LED
	for(int i=0; i<p->moveSize; i++){
 80011ec:	2300      	movs	r3, #0
 80011ee:	627b      	str	r3, [r7, #36]	; 0x24
 80011f0:	e072      	b.n	80012d8 <problem_genArray+0x284>

		// transform letter and number in the led position
		LedPos = LED_findPos(lettArr[i], numArr[i]);
 80011f2:	69ba      	ldr	r2, [r7, #24]
 80011f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011f6:	4413      	add	r3, r2
 80011f8:	7818      	ldrb	r0, [r3, #0]
 80011fa:	693a      	ldr	r2, [r7, #16]
 80011fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011fe:	4413      	add	r3, r2
 8001200:	781b      	ldrb	r3, [r3, #0]
 8001202:	4619      	mov	r1, r3
 8001204:	f7ff fe4c 	bl	8000ea0 <LED_findPos>
 8001208:	4603      	mov	r3, r0
 800120a:	857b      	strh	r3, [r7, #42]	; 0x2a

		// light the led depending if it's start, top or else
		if(typeArr[i]=='s'){			// START, color green
 800120c:	68ba      	ldr	r2, [r7, #8]
 800120e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001210:	4413      	add	r3, r2
 8001212:	781b      	ldrb	r3, [r3, #0]
 8001214:	2b73      	cmp	r3, #115	; 0x73
 8001216:	d112      	bne.n	800123e <problem_genArray+0x1ea>
			LED_Data[LedPos][1] = 0;
 8001218:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800121a:	4a34      	ldr	r2, [pc, #208]	; (80012ec <problem_genArray+0x298>)
 800121c:	009b      	lsls	r3, r3, #2
 800121e:	4413      	add	r3, r2
 8001220:	2200      	movs	r2, #0
 8001222:	705a      	strb	r2, [r3, #1]
			LED_Data[LedPos][2] = 250;
 8001224:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001226:	4a31      	ldr	r2, [pc, #196]	; (80012ec <problem_genArray+0x298>)
 8001228:	009b      	lsls	r3, r3, #2
 800122a:	4413      	add	r3, r2
 800122c:	22fa      	movs	r2, #250	; 0xfa
 800122e:	709a      	strb	r2, [r3, #2]
			LED_Data[LedPos][3] = 0;
 8001230:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001232:	4a2e      	ldr	r2, [pc, #184]	; (80012ec <problem_genArray+0x298>)
 8001234:	009b      	lsls	r3, r3, #2
 8001236:	4413      	add	r3, r2
 8001238:	2200      	movs	r2, #0
 800123a:	70da      	strb	r2, [r3, #3]
 800123c:	e049      	b.n	80012d2 <problem_genArray+0x27e>
		}else if(typeArr[i]=='e'){		// TOP, color red
 800123e:	68ba      	ldr	r2, [r7, #8]
 8001240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001242:	4413      	add	r3, r2
 8001244:	781b      	ldrb	r3, [r3, #0]
 8001246:	2b65      	cmp	r3, #101	; 0x65
 8001248:	d112      	bne.n	8001270 <problem_genArray+0x21c>
			LED_Data[LedPos][1] = 250;
 800124a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800124c:	4a27      	ldr	r2, [pc, #156]	; (80012ec <problem_genArray+0x298>)
 800124e:	009b      	lsls	r3, r3, #2
 8001250:	4413      	add	r3, r2
 8001252:	22fa      	movs	r2, #250	; 0xfa
 8001254:	705a      	strb	r2, [r3, #1]
			LED_Data[LedPos][2] = 0;
 8001256:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001258:	4a24      	ldr	r2, [pc, #144]	; (80012ec <problem_genArray+0x298>)
 800125a:	009b      	lsls	r3, r3, #2
 800125c:	4413      	add	r3, r2
 800125e:	2200      	movs	r2, #0
 8001260:	709a      	strb	r2, [r3, #2]
			LED_Data[LedPos][3] = 0;
 8001262:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001264:	4a21      	ldr	r2, [pc, #132]	; (80012ec <problem_genArray+0x298>)
 8001266:	009b      	lsls	r3, r3, #2
 8001268:	4413      	add	r3, r2
 800126a:	2200      	movs	r2, #0
 800126c:	70da      	strb	r2, [r3, #3]
 800126e:	e030      	b.n	80012d2 <problem_genArray+0x27e>
		}else if(typeArr[i]=='d'){		// DEFAULT, color blue
 8001270:	68ba      	ldr	r2, [r7, #8]
 8001272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001274:	4413      	add	r3, r2
 8001276:	781b      	ldrb	r3, [r3, #0]
 8001278:	2b64      	cmp	r3, #100	; 0x64
 800127a:	d112      	bne.n	80012a2 <problem_genArray+0x24e>
			LED_Data[LedPos][1] = 0;
 800127c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800127e:	4a1b      	ldr	r2, [pc, #108]	; (80012ec <problem_genArray+0x298>)
 8001280:	009b      	lsls	r3, r3, #2
 8001282:	4413      	add	r3, r2
 8001284:	2200      	movs	r2, #0
 8001286:	705a      	strb	r2, [r3, #1]
			LED_Data[LedPos][2] = 0;
 8001288:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800128a:	4a18      	ldr	r2, [pc, #96]	; (80012ec <problem_genArray+0x298>)
 800128c:	009b      	lsls	r3, r3, #2
 800128e:	4413      	add	r3, r2
 8001290:	2200      	movs	r2, #0
 8001292:	709a      	strb	r2, [r3, #2]
			LED_Data[LedPos][3] = 250;
 8001294:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001296:	4a15      	ldr	r2, [pc, #84]	; (80012ec <problem_genArray+0x298>)
 8001298:	009b      	lsls	r3, r3, #2
 800129a:	4413      	add	r3, r2
 800129c:	22fa      	movs	r2, #250	; 0xfa
 800129e:	70da      	strb	r2, [r3, #3]
 80012a0:	e017      	b.n	80012d2 <problem_genArray+0x27e>
		}else if(typeArr[i]=='c'){		// easter egg, color pink
 80012a2:	68ba      	ldr	r2, [r7, #8]
 80012a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012a6:	4413      	add	r3, r2
 80012a8:	781b      	ldrb	r3, [r3, #0]
 80012aa:	2b63      	cmp	r3, #99	; 0x63
 80012ac:	d111      	bne.n	80012d2 <problem_genArray+0x27e>
			LED_Data[LedPos][1] = 250;
 80012ae:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80012b0:	4a0e      	ldr	r2, [pc, #56]	; (80012ec <problem_genArray+0x298>)
 80012b2:	009b      	lsls	r3, r3, #2
 80012b4:	4413      	add	r3, r2
 80012b6:	22fa      	movs	r2, #250	; 0xfa
 80012b8:	705a      	strb	r2, [r3, #1]
			LED_Data[LedPos][2] = 192;
 80012ba:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80012bc:	4a0b      	ldr	r2, [pc, #44]	; (80012ec <problem_genArray+0x298>)
 80012be:	009b      	lsls	r3, r3, #2
 80012c0:	4413      	add	r3, r2
 80012c2:	22c0      	movs	r2, #192	; 0xc0
 80012c4:	709a      	strb	r2, [r3, #2]
			LED_Data[LedPos][3] = 203;
 80012c6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80012c8:	4a08      	ldr	r2, [pc, #32]	; (80012ec <problem_genArray+0x298>)
 80012ca:	009b      	lsls	r3, r3, #2
 80012cc:	4413      	add	r3, r2
 80012ce:	22cb      	movs	r2, #203	; 0xcb
 80012d0:	70da      	strb	r2, [r3, #3]
	for(int i=0; i<p->moveSize; i++){
 80012d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012d4:	3301      	adds	r3, #1
 80012d6:	627b      	str	r3, [r7, #36]	; 0x24
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80012de:	429a      	cmp	r2, r3
 80012e0:	db87      	blt.n	80011f2 <problem_genArray+0x19e>
 80012e2:	46ad      	mov	sp, r5
		}
	}
}
 80012e4:	bf00      	nop
 80012e6:	3730      	adds	r7, #48	; 0x30
 80012e8:	46bd      	mov	sp, r7
 80012ea:	bdb0      	pop	{r4, r5, r7, pc}
 80012ec:	200000ac 	.word	0x200000ac

080012f0 <LED_setAllBlack>:



void LED_setAllBlack(){
 80012f0:	b480      	push	{r7}
 80012f2:	b083      	sub	sp, #12
 80012f4:	af00      	add	r7, sp, #0

	for(int i=0; i<MAX_LED; i++){
 80012f6:	2300      	movs	r3, #0
 80012f8:	607b      	str	r3, [r7, #4]
 80012fa:	e014      	b.n	8001326 <LED_setAllBlack+0x36>
		LED_Data[i][1]=0;
 80012fc:	4a0f      	ldr	r2, [pc, #60]	; (800133c <LED_setAllBlack+0x4c>)
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	009b      	lsls	r3, r3, #2
 8001302:	4413      	add	r3, r2
 8001304:	2200      	movs	r2, #0
 8001306:	705a      	strb	r2, [r3, #1]
		LED_Data[i][2]=0;
 8001308:	4a0c      	ldr	r2, [pc, #48]	; (800133c <LED_setAllBlack+0x4c>)
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	009b      	lsls	r3, r3, #2
 800130e:	4413      	add	r3, r2
 8001310:	2200      	movs	r2, #0
 8001312:	709a      	strb	r2, [r3, #2]
		LED_Data[i][3]=0;
 8001314:	4a09      	ldr	r2, [pc, #36]	; (800133c <LED_setAllBlack+0x4c>)
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	009b      	lsls	r3, r3, #2
 800131a:	4413      	add	r3, r2
 800131c:	2200      	movs	r2, #0
 800131e:	70da      	strb	r2, [r3, #3]
	for(int i=0; i<MAX_LED; i++){
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	3301      	adds	r3, #1
 8001324:	607b      	str	r3, [r7, #4]
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	2bc5      	cmp	r3, #197	; 0xc5
 800132a:	dde7      	ble.n	80012fc <LED_setAllBlack+0xc>
	}
}
 800132c:	bf00      	nop
 800132e:	bf00      	nop
 8001330:	370c      	adds	r7, #12
 8001332:	46bd      	mov	sp, r7
 8001334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001338:	4770      	bx	lr
 800133a:	bf00      	nop
 800133c:	200000ac 	.word	0x200000ac

08001340 <WS2811_Send>:
// *******************************************************************
// 						GENERATION OF PWM
// *******************************************************************


void WS2811_Send(void){
 8001340:	b580      	push	{r7, lr}
 8001342:	b088      	sub	sp, #32
 8001344:	af00      	add	r7, sp, #0

	uint16_t indx_low = 0;
 8001346:	2300      	movs	r3, #0
 8001348:	83fb      	strh	r3, [r7, #30]
	uint16_t indx_high = 0;
 800134a:	2300      	movs	r3, #0
 800134c:	83bb      	strh	r3, [r7, #28]
	uint32_t color;

	// wait 50 PWM pulses as a RESET before lighting all LED
	for(int i=0; i<40; i++){
 800134e:	2300      	movs	r3, #0
 8001350:	61bb      	str	r3, [r7, #24]
 8001352:	e012      	b.n	800137a <WS2811_Send+0x3a>
		pwmData_low[indx_low] = 0;
 8001354:	8bfb      	ldrh	r3, [r7, #30]
 8001356:	4a53      	ldr	r2, [pc, #332]	; (80014a4 <WS2811_Send+0x164>)
 8001358:	2100      	movs	r1, #0
 800135a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		pwmData_high[indx_high] = 0;
 800135e:	8bbb      	ldrh	r3, [r7, #28]
 8001360:	4a51      	ldr	r2, [pc, #324]	; (80014a8 <WS2811_Send+0x168>)
 8001362:	2100      	movs	r1, #0
 8001364:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

		indx_low++;
 8001368:	8bfb      	ldrh	r3, [r7, #30]
 800136a:	3301      	adds	r3, #1
 800136c:	83fb      	strh	r3, [r7, #30]
		indx_high++;
 800136e:	8bbb      	ldrh	r3, [r7, #28]
 8001370:	3301      	adds	r3, #1
 8001372:	83bb      	strh	r3, [r7, #28]
	for(int i=0; i<40; i++){
 8001374:	69bb      	ldr	r3, [r7, #24]
 8001376:	3301      	adds	r3, #1
 8001378:	61bb      	str	r3, [r7, #24]
 800137a:	69bb      	ldr	r3, [r7, #24]
 800137c:	2b27      	cmp	r3, #39	; 0x27
 800137e:	dde9      	ble.n	8001354 <WS2811_Send+0x14>
	}

	// read from the color matrix each RGB color for each LED
	for(int i=0; i<MAX_LED; i++){
 8001380:	2300      	movs	r3, #0
 8001382:	617b      	str	r3, [r7, #20]
 8001384:	e05a      	b.n	800143c <WS2811_Send+0xfc>
		color = ((LED_Data[i][1]<<16) | (LED_Data[i][2]<<8) | LED_Data[i][3]);
 8001386:	4a49      	ldr	r2, [pc, #292]	; (80014ac <WS2811_Send+0x16c>)
 8001388:	697b      	ldr	r3, [r7, #20]
 800138a:	009b      	lsls	r3, r3, #2
 800138c:	4413      	add	r3, r2
 800138e:	785b      	ldrb	r3, [r3, #1]
 8001390:	041a      	lsls	r2, r3, #16
 8001392:	4946      	ldr	r1, [pc, #280]	; (80014ac <WS2811_Send+0x16c>)
 8001394:	697b      	ldr	r3, [r7, #20]
 8001396:	009b      	lsls	r3, r3, #2
 8001398:	440b      	add	r3, r1
 800139a:	789b      	ldrb	r3, [r3, #2]
 800139c:	021b      	lsls	r3, r3, #8
 800139e:	431a      	orrs	r2, r3
 80013a0:	4942      	ldr	r1, [pc, #264]	; (80014ac <WS2811_Send+0x16c>)
 80013a2:	697b      	ldr	r3, [r7, #20]
 80013a4:	009b      	lsls	r3, r3, #2
 80013a6:	440b      	add	r3, r1
 80013a8:	78db      	ldrb	r3, [r3, #3]
 80013aa:	4313      	orrs	r3, r2
 80013ac:	607b      	str	r3, [r7, #4]

		if(i <= 94){	// LOW PWM DATA
 80013ae:	697b      	ldr	r3, [r7, #20]
 80013b0:	2b5e      	cmp	r3, #94	; 0x5e
 80013b2:	dc20      	bgt.n	80013f6 <WS2811_Send+0xb6>

			for(int i=23; i>=0; i--){
 80013b4:	2317      	movs	r3, #23
 80013b6:	613b      	str	r3, [r7, #16]
 80013b8:	e019      	b.n	80013ee <WS2811_Send+0xae>
				if(color & (1<<i)){
 80013ba:	2201      	movs	r2, #1
 80013bc:	693b      	ldr	r3, [r7, #16]
 80013be:	fa02 f303 	lsl.w	r3, r2, r3
 80013c2:	461a      	mov	r2, r3
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	4013      	ands	r3, r2
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d005      	beq.n	80013d8 <WS2811_Send+0x98>
					pwmData_low[indx_low]=43;
 80013cc:	8bfb      	ldrh	r3, [r7, #30]
 80013ce:	4a35      	ldr	r2, [pc, #212]	; (80014a4 <WS2811_Send+0x164>)
 80013d0:	212b      	movs	r1, #43	; 0x2b
 80013d2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 80013d6:	e004      	b.n	80013e2 <WS2811_Send+0xa2>
				}else{
					pwmData_low[indx_low]=18;
 80013d8:	8bfb      	ldrh	r3, [r7, #30]
 80013da:	4a32      	ldr	r2, [pc, #200]	; (80014a4 <WS2811_Send+0x164>)
 80013dc:	2112      	movs	r1, #18
 80013de:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				}
				indx_low++;
 80013e2:	8bfb      	ldrh	r3, [r7, #30]
 80013e4:	3301      	adds	r3, #1
 80013e6:	83fb      	strh	r3, [r7, #30]
			for(int i=23; i>=0; i--){
 80013e8:	693b      	ldr	r3, [r7, #16]
 80013ea:	3b01      	subs	r3, #1
 80013ec:	613b      	str	r3, [r7, #16]
 80013ee:	693b      	ldr	r3, [r7, #16]
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	dae2      	bge.n	80013ba <WS2811_Send+0x7a>
 80013f4:	e01f      	b.n	8001436 <WS2811_Send+0xf6>
			}

		} else {		// HIGH PWM DATA

			for(int i=23; i>=0; i--){
 80013f6:	2317      	movs	r3, #23
 80013f8:	60fb      	str	r3, [r7, #12]
 80013fa:	e019      	b.n	8001430 <WS2811_Send+0xf0>
				if(color & (1<<i)){
 80013fc:	2201      	movs	r2, #1
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	fa02 f303 	lsl.w	r3, r2, r3
 8001404:	461a      	mov	r2, r3
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	4013      	ands	r3, r2
 800140a:	2b00      	cmp	r3, #0
 800140c:	d005      	beq.n	800141a <WS2811_Send+0xda>
					pwmData_high[indx_high]=43;
 800140e:	8bbb      	ldrh	r3, [r7, #28]
 8001410:	4a25      	ldr	r2, [pc, #148]	; (80014a8 <WS2811_Send+0x168>)
 8001412:	212b      	movs	r1, #43	; 0x2b
 8001414:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8001418:	e004      	b.n	8001424 <WS2811_Send+0xe4>
				}else{
					pwmData_high[indx_high]=18;
 800141a:	8bbb      	ldrh	r3, [r7, #28]
 800141c:	4a22      	ldr	r2, [pc, #136]	; (80014a8 <WS2811_Send+0x168>)
 800141e:	2112      	movs	r1, #18
 8001420:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				}
				indx_high++;
 8001424:	8bbb      	ldrh	r3, [r7, #28]
 8001426:	3301      	adds	r3, #1
 8001428:	83bb      	strh	r3, [r7, #28]
			for(int i=23; i>=0; i--){
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	3b01      	subs	r3, #1
 800142e:	60fb      	str	r3, [r7, #12]
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	2b00      	cmp	r3, #0
 8001434:	dae2      	bge.n	80013fc <WS2811_Send+0xbc>
	for(int i=0; i<MAX_LED; i++){
 8001436:	697b      	ldr	r3, [r7, #20]
 8001438:	3301      	adds	r3, #1
 800143a:	617b      	str	r3, [r7, #20]
 800143c:	697b      	ldr	r3, [r7, #20]
 800143e:	2bc5      	cmp	r3, #197	; 0xc5
 8001440:	dda1      	ble.n	8001386 <WS2811_Send+0x46>


	}

	// wait 50 PWM pulses as a RESET after lighting all LED
	for(int i=0; i<40; i++){
 8001442:	2300      	movs	r3, #0
 8001444:	60bb      	str	r3, [r7, #8]
 8001446:	e012      	b.n	800146e <WS2811_Send+0x12e>
		pwmData_low[indx_low] = 0;
 8001448:	8bfb      	ldrh	r3, [r7, #30]
 800144a:	4a16      	ldr	r2, [pc, #88]	; (80014a4 <WS2811_Send+0x164>)
 800144c:	2100      	movs	r1, #0
 800144e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		pwmData_high[indx_high] = 0;
 8001452:	8bbb      	ldrh	r3, [r7, #28]
 8001454:	4a14      	ldr	r2, [pc, #80]	; (80014a8 <WS2811_Send+0x168>)
 8001456:	2100      	movs	r1, #0
 8001458:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

		indx_low++;
 800145c:	8bfb      	ldrh	r3, [r7, #30]
 800145e:	3301      	adds	r3, #1
 8001460:	83fb      	strh	r3, [r7, #30]
		indx_high++;
 8001462:	8bbb      	ldrh	r3, [r7, #28]
 8001464:	3301      	adds	r3, #1
 8001466:	83bb      	strh	r3, [r7, #28]
	for(int i=0; i<40; i++){
 8001468:	68bb      	ldr	r3, [r7, #8]
 800146a:	3301      	adds	r3, #1
 800146c:	60bb      	str	r3, [r7, #8]
 800146e:	68bb      	ldr	r3, [r7, #8]
 8001470:	2b27      	cmp	r3, #39	; 0x27
 8001472:	dde9      	ble.n	8001448 <WS2811_Send+0x108>
	}

	// start the transmission of the data just created
	HAL_TIM_PWM_Start_DMA(&htim2, TIM_CHANNEL_1, (uint32_t *)pwmData_low, indx_low);
 8001474:	8bfb      	ldrh	r3, [r7, #30]
 8001476:	4a0b      	ldr	r2, [pc, #44]	; (80014a4 <WS2811_Send+0x164>)
 8001478:	2100      	movs	r1, #0
 800147a:	480d      	ldr	r0, [pc, #52]	; (80014b0 <WS2811_Send+0x170>)
 800147c:	f01e fd00 	bl	801fe80 <HAL_TIM_PWM_Start_DMA>
	HAL_TIM_PWM_Start_DMA(&htim3, TIM_CHANNEL_1, (uint32_t *)pwmData_high, indx_high);
 8001480:	8bbb      	ldrh	r3, [r7, #28]
 8001482:	4a09      	ldr	r2, [pc, #36]	; (80014a8 <WS2811_Send+0x168>)
 8001484:	2100      	movs	r1, #0
 8001486:	480b      	ldr	r0, [pc, #44]	; (80014b4 <WS2811_Send+0x174>)
 8001488:	f01e fcfa 	bl	801fe80 <HAL_TIM_PWM_Start_DMA>


	while(!datasentflag){};
 800148c:	bf00      	nop
 800148e:	4b0a      	ldr	r3, [pc, #40]	; (80014b8 <WS2811_Send+0x178>)
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	2b00      	cmp	r3, #0
 8001494:	d0fb      	beq.n	800148e <WS2811_Send+0x14e>
	datasentflag=0;
 8001496:	4b08      	ldr	r3, [pc, #32]	; (80014b8 <WS2811_Send+0x178>)
 8001498:	2200      	movs	r2, #0
 800149a:	601a      	str	r2, [r3, #0]

}
 800149c:	bf00      	nop
 800149e:	3720      	adds	r7, #32
 80014a0:	46bd      	mov	sp, r7
 80014a2:	bd80      	pop	{r7, pc}
 80014a4:	20002d64 	.word	0x20002d64
 80014a8:	200003c4 	.word	0x200003c4
 80014ac:	200000ac 	.word	0x200000ac
 80014b0:	20005580 	.word	0x20005580
 80014b4:	200054d8 	.word	0x200054d8
 80014b8:	20000094 	.word	0x20000094

080014bc <MessageHandler>:

// *******************************************************************
// 						BLUETOOTH RECEIVER
// *******************************************************************

void MessageHandler(Problem * p){
 80014bc:	b590      	push	{r4, r7, lr}
 80014be:	b0a3      	sub	sp, #140	; 0x8c
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]

	char spaces_msg[100];
	for (int i=0; i<100; i++){
 80014c4:	2300      	movs	r3, #0
 80014c6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80014ca:	e00b      	b.n	80014e4 <MessageHandler+0x28>
		spaces_msg[i] = ' ';
 80014cc:	f107 020c 	add.w	r2, r7, #12
 80014d0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80014d4:	4413      	add	r3, r2
 80014d6:	2220      	movs	r2, #32
 80014d8:	701a      	strb	r2, [r3, #0]
	for (int i=0; i<100; i++){
 80014da:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80014de:	3301      	adds	r3, #1
 80014e0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80014e4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80014e8:	2b63      	cmp	r3, #99	; 0x63
 80014ea:	ddef      	ble.n	80014cc <MessageHandler+0x10>
	}

	// NAME
	strcpy(p->name,"           ");
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80014f2:	4a59      	ldr	r2, [pc, #356]	; (8001658 <MessageHandler+0x19c>)
 80014f4:	461c      	mov	r4, r3
 80014f6:	4613      	mov	r3, r2
 80014f8:	cb07      	ldmia	r3!, {r0, r1, r2}
 80014fa:	6020      	str	r0, [r4, #0]
 80014fc:	6061      	str	r1, [r4, #4]
 80014fe:	60a2      	str	r2, [r4, #8]
	for(int i=0; i<11; i++){
 8001500:	2300      	movs	r3, #0
 8001502:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001506:	e011      	b.n	800152c <MessageHandler+0x70>
		p->name[i] = buffer[i+2];
 8001508:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800150c:	3302      	adds	r3, #2
 800150e:	4a53      	ldr	r2, [pc, #332]	; (800165c <MessageHandler+0x1a0>)
 8001510:	5cd1      	ldrb	r1, [r2, r3]
 8001512:	687a      	ldr	r2, [r7, #4]
 8001514:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001518:	4413      	add	r3, r2
 800151a:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800151e:	460a      	mov	r2, r1
 8001520:	701a      	strb	r2, [r3, #0]
	for(int i=0; i<11; i++){
 8001522:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001526:	3301      	adds	r3, #1
 8001528:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800152c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001530:	2b0a      	cmp	r3, #10
 8001532:	dde9      	ble.n	8001508 <MessageHandler+0x4c>
	}

	// GRADE
	strcpy(p->grade, "          ");
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800153a:	4949      	ldr	r1, [pc, #292]	; (8001660 <MessageHandler+0x1a4>)
 800153c:	461a      	mov	r2, r3
 800153e:	460b      	mov	r3, r1
 8001540:	cb03      	ldmia	r3!, {r0, r1}
 8001542:	6010      	str	r0, [r2, #0]
 8001544:	6051      	str	r1, [r2, #4]
 8001546:	8819      	ldrh	r1, [r3, #0]
 8001548:	789b      	ldrb	r3, [r3, #2]
 800154a:	8111      	strh	r1, [r2, #8]
 800154c:	7293      	strb	r3, [r2, #10]
	for(int i=0; i<3; i++){
 800154e:	2300      	movs	r3, #0
 8001550:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001552:	e00d      	b.n	8001570 <MessageHandler+0xb4>
		p->grade[i] = buffer[100+i];
 8001554:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001556:	3364      	adds	r3, #100	; 0x64
 8001558:	4a40      	ldr	r2, [pc, #256]	; (800165c <MessageHandler+0x1a0>)
 800155a:	5cd1      	ldrb	r1, [r2, r3]
 800155c:	687a      	ldr	r2, [r7, #4]
 800155e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001560:	4413      	add	r3, r2
 8001562:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8001566:	460a      	mov	r2, r1
 8001568:	701a      	strb	r2, [r3, #0]
	for(int i=0; i<3; i++){
 800156a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800156c:	3301      	adds	r3, #1
 800156e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001570:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001572:	2b02      	cmp	r3, #2
 8001574:	ddee      	ble.n	8001554 <MessageHandler+0x98>
	}

	// N OF HOLDS
	p->moveSize = buffer[200]*10+buffer[201];
 8001576:	4b39      	ldr	r3, [pc, #228]	; (800165c <MessageHandler+0x1a0>)
 8001578:	f893 30c8 	ldrb.w	r3, [r3, #200]	; 0xc8
 800157c:	461a      	mov	r2, r3
 800157e:	4613      	mov	r3, r2
 8001580:	009b      	lsls	r3, r3, #2
 8001582:	4413      	add	r3, r2
 8001584:	005b      	lsls	r3, r3, #1
 8001586:	461a      	mov	r2, r3
 8001588:	4b34      	ldr	r3, [pc, #208]	; (800165c <MessageHandler+0x1a0>)
 800158a:	f893 30c9 	ldrb.w	r3, [r3, #201]	; 0xc9
 800158e:	441a      	add	r2, r3
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	601a      	str	r2, [r3, #0]

	// LETTERS OF EACH HOLD
	strcpy(p->moveLetters, spaces_msg);
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	33a4      	adds	r3, #164	; 0xa4
 8001598:	f107 020c 	add.w	r2, r7, #12
 800159c:	4611      	mov	r1, r2
 800159e:	4618      	mov	r0, r3
 80015a0:	f020 fdf8 	bl	8022194 <strcpy>
	for(int i=0; i<p->moveSize*2; i++){
 80015a4:	2300      	movs	r3, #0
 80015a6:	67bb      	str	r3, [r7, #120]	; 0x78
 80015a8:	e00d      	b.n	80015c6 <MessageHandler+0x10a>
		p->moveLetters[i] = buffer[300+i];
 80015aa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80015ac:	f503 7396 	add.w	r3, r3, #300	; 0x12c
 80015b0:	4a2a      	ldr	r2, [pc, #168]	; (800165c <MessageHandler+0x1a0>)
 80015b2:	5cd1      	ldrb	r1, [r2, r3]
 80015b4:	687a      	ldr	r2, [r7, #4]
 80015b6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80015b8:	4413      	add	r3, r2
 80015ba:	33a4      	adds	r3, #164	; 0xa4
 80015bc:	460a      	mov	r2, r1
 80015be:	701a      	strb	r2, [r3, #0]
	for(int i=0; i<p->moveSize*2; i++){
 80015c0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80015c2:	3301      	adds	r3, #1
 80015c4:	67bb      	str	r3, [r7, #120]	; 0x78
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	005b      	lsls	r3, r3, #1
 80015cc:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80015ce:	429a      	cmp	r2, r3
 80015d0:	dbeb      	blt.n	80015aa <MessageHandler+0xee>
	}

	// NUMBERS OF EACH HOLD
	strcpy(p->moveNumbers, spaces_msg);
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	3304      	adds	r3, #4
 80015d6:	f107 020c 	add.w	r2, r7, #12
 80015da:	4611      	mov	r1, r2
 80015dc:	4618      	mov	r0, r3
 80015de:	f020 fdd9 	bl	8022194 <strcpy>
	for(int i=0; i<100; i++){
 80015e2:	2300      	movs	r3, #0
 80015e4:	677b      	str	r3, [r7, #116]	; 0x74
 80015e6:	e00d      	b.n	8001604 <MessageHandler+0x148>
		p->moveNumbers[i] = buffer[400+i];
 80015e8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80015ea:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 80015ee:	4a1b      	ldr	r2, [pc, #108]	; (800165c <MessageHandler+0x1a0>)
 80015f0:	5cd1      	ldrb	r1, [r2, r3]
 80015f2:	687a      	ldr	r2, [r7, #4]
 80015f4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80015f6:	4413      	add	r3, r2
 80015f8:	3304      	adds	r3, #4
 80015fa:	460a      	mov	r2, r1
 80015fc:	701a      	strb	r2, [r3, #0]
	for(int i=0; i<100; i++){
 80015fe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001600:	3301      	adds	r3, #1
 8001602:	677b      	str	r3, [r7, #116]	; 0x74
 8001604:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001606:	2b63      	cmp	r3, #99	; 0x63
 8001608:	ddee      	ble.n	80015e8 <MessageHandler+0x12c>
	}

	// TYPE OF EACH HOLD
	strcpy(p->startFinish, spaces_msg);
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8001610:	f107 020c 	add.w	r2, r7, #12
 8001614:	4611      	mov	r1, r2
 8001616:	4618      	mov	r0, r3
 8001618:	f020 fdbc 	bl	8022194 <strcpy>
	for(int i=0; i<p->moveSize*2; i++){
 800161c:	2300      	movs	r3, #0
 800161e:	673b      	str	r3, [r7, #112]	; 0x70
 8001620:	e00e      	b.n	8001640 <MessageHandler+0x184>
		p->startFinish[i] = buffer[500+i];
 8001622:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001624:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8001628:	4a0c      	ldr	r2, [pc, #48]	; (800165c <MessageHandler+0x1a0>)
 800162a:	5cd1      	ldrb	r1, [r2, r3]
 800162c:	687a      	ldr	r2, [r7, #4]
 800162e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001630:	4413      	add	r3, r2
 8001632:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8001636:	460a      	mov	r2, r1
 8001638:	701a      	strb	r2, [r3, #0]
	for(int i=0; i<p->moveSize*2; i++){
 800163a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800163c:	3301      	adds	r3, #1
 800163e:	673b      	str	r3, [r7, #112]	; 0x70
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	005b      	lsls	r3, r3, #1
 8001646:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8001648:	429a      	cmp	r2, r3
 800164a:	dbea      	blt.n	8001622 <MessageHandler+0x166>
	}


}
 800164c:	bf00      	nop
 800164e:	bf00      	nop
 8001650:	378c      	adds	r7, #140	; 0x8c
 8001652:	46bd      	mov	sp, r7
 8001654:	bd90      	pop	{r4, r7, pc}
 8001656:	bf00      	nop
 8001658:	08023968 	.word	0x08023968
 800165c:	20002b08 	.word	0x20002b08
 8001660:	08023974 	.word	0x08023974

08001664 <problem_fetch>:
            break;
        default : break;
    }
}
*/
void problem_fetch(Problem* p, int id){
 8001664:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001666:	b083      	sub	sp, #12
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
 800166c:	6039      	str	r1, [r7, #0]
 800166e:	683b      	ldr	r3, [r7, #0]
 8001670:	f240 3227 	movw	r2, #807	; 0x327
 8001674:	4293      	cmp	r3, r2
 8001676:	f21a 8725 	bhi.w	801c4c4 <problem_fetch+0x1ae60>
 800167a:	a101      	add	r1, pc, #4	; (adr r1, 8001680 <problem_fetch+0x1c>)
 800167c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8001680:	08002321 	.word	0x08002321
 8001684:	08002381 	.word	0x08002381
 8001688:	080023e7 	.word	0x080023e7
 800168c:	0800245d 	.word	0x0800245d
 8001690:	080024dd 	.word	0x080024dd
 8001694:	0800254b 	.word	0x0800254b
 8001698:	080025c5 	.word	0x080025c5
 800169c:	080026b1 	.word	0x080026b1
 80016a0:	08002713 	.word	0x08002713
 80016a4:	08002785 	.word	0x08002785
 80016a8:	080027ff 	.word	0x080027ff
 80016ac:	0800286f 	.word	0x0800286f
 80016b0:	080028e9 	.word	0x080028e9
 80016b4:	080029d5 	.word	0x080029d5
 80016b8:	08002a47 	.word	0x08002a47
 80016bc:	08002ac3 	.word	0x08002ac3
 80016c0:	08002b35 	.word	0x08002b35
 80016c4:	08002b97 	.word	0x08002b97
 80016c8:	08002c05 	.word	0x08002c05
 80016cc:	08002c6f 	.word	0x08002c6f
 80016d0:	08002d55 	.word	0x08002d55
 80016d4:	08002dbf 	.word	0x08002dbf
 80016d8:	08002e37 	.word	0x08002e37
 80016dc:	08002eab 	.word	0x08002eab
 80016e0:	08002f21 	.word	0x08002f21
 80016e4:	08002f91 	.word	0x08002f91
 80016e8:	0800306d 	.word	0x0800306d
 80016ec:	080030d5 	.word	0x080030d5
 80016f0:	0800314b 	.word	0x0800314b
 80016f4:	080031c3 	.word	0x080031c3
 80016f8:	0800322f 	.word	0x0800322f
 80016fc:	0800329d 	.word	0x0800329d
 8001700:	08003379 	.word	0x08003379
 8001704:	080033fb 	.word	0x080033fb
 8001708:	0800346d 	.word	0x0800346d
 800170c:	080034d9 	.word	0x080034d9
 8001710:	08003549 	.word	0x08003549
 8001714:	080035cd 	.word	0x080035cd
 8001718:	080036b5 	.word	0x080036b5
 800171c:	08003731 	.word	0x08003731
 8001720:	080037a5 	.word	0x080037a5
 8001724:	08003827 	.word	0x08003827
 8001728:	0800389b 	.word	0x0800389b
 800172c:	0800390d 	.word	0x0800390d
 8001730:	080039f1 	.word	0x080039f1
 8001734:	08003a5d 	.word	0x08003a5d
 8001738:	08003adb 	.word	0x08003adb
 800173c:	08003b55 	.word	0x08003b55
 8001740:	08003bd3 	.word	0x08003bd3
 8001744:	08003c4d 	.word	0x08003c4d
 8001748:	08003d29 	.word	0x08003d29
 800174c:	08003d93 	.word	0x08003d93
 8001750:	08003e01 	.word	0x08003e01
 8001754:	08003e69 	.word	0x08003e69
 8001758:	08003ed9 	.word	0x08003ed9
 800175c:	08003f4d 	.word	0x08003f4d
 8001760:	08003fb5 	.word	0x08003fb5
 8001764:	080040a1 	.word	0x080040a1
 8001768:	08004115 	.word	0x08004115
 800176c:	08004189 	.word	0x08004189
 8001770:	0800420b 	.word	0x0800420b
 8001774:	0800427f 	.word	0x0800427f
 8001778:	080042e9 	.word	0x080042e9
 800177c:	080043c9 	.word	0x080043c9
 8001780:	08004437 	.word	0x08004437
 8001784:	080044a9 	.word	0x080044a9
 8001788:	08004509 	.word	0x08004509
 800178c:	08004583 	.word	0x08004583
 8001790:	080045fd 	.word	0x080045fd
 8001794:	080046d9 	.word	0x080046d9
 8001798:	08004751 	.word	0x08004751
 800179c:	080047b9 	.word	0x080047b9
 80017a0:	08004833 	.word	0x08004833
 80017a4:	08004899 	.word	0x08004899
 80017a8:	080048fd 	.word	0x080048fd
 80017ac:	08004979 	.word	0x08004979
 80017b0:	08004a5d 	.word	0x08004a5d
 80017b4:	08004acb 	.word	0x08004acb
 80017b8:	08004b4b 	.word	0x08004b4b
 80017bc:	08004bb7 	.word	0x08004bb7
 80017c0:	08004c2f 	.word	0x08004c2f
 80017c4:	08004ca5 	.word	0x08004ca5
 80017c8:	08004d95 	.word	0x08004d95
 80017cc:	08004e05 	.word	0x08004e05
 80017d0:	08004e79 	.word	0x08004e79
 80017d4:	08004eef 	.word	0x08004eef
 80017d8:	08004f65 	.word	0x08004f65
 80017dc:	08004fd3 	.word	0x08004fd3
 80017e0:	080050c5 	.word	0x080050c5
 80017e4:	08005137 	.word	0x08005137
 80017e8:	080051b1 	.word	0x080051b1
 80017ec:	08005225 	.word	0x08005225
 80017f0:	0800528b 	.word	0x0800528b
 80017f4:	08005305 	.word	0x08005305
 80017f8:	080053e5 	.word	0x080053e5
 80017fc:	08005463 	.word	0x08005463
 8001800:	080054d9 	.word	0x080054d9
 8001804:	0800554b 	.word	0x0800554b
 8001808:	080055b7 	.word	0x080055b7
 800180c:	08005641 	.word	0x08005641
 8001810:	08005715 	.word	0x08005715
 8001814:	08005787 	.word	0x08005787
 8001818:	080057f9 	.word	0x080057f9
 800181c:	0800585d 	.word	0x0800585d
 8001820:	080058c5 	.word	0x080058c5
 8001824:	08005933 	.word	0x08005933
 8001828:	0800599d 	.word	0x0800599d
 800182c:	08005a91 	.word	0x08005a91
 8001830:	08005b0d 	.word	0x08005b0d
 8001834:	08005b7f 	.word	0x08005b7f
 8001838:	08005bf5 	.word	0x08005bf5
 800183c:	08005c6b 	.word	0x08005c6b
 8001840:	08005ced 	.word	0x08005ced
 8001844:	08005dcd 	.word	0x08005dcd
 8001848:	08005e3d 	.word	0x08005e3d
 800184c:	08005ead 	.word	0x08005ead
 8001850:	08005f1f 	.word	0x08005f1f
 8001854:	08005fa1 	.word	0x08005fa1
 8001858:	0800601d 	.word	0x0800601d
 800185c:	0800610d 	.word	0x0800610d
 8001860:	0800617b 	.word	0x0800617b
 8001864:	080061f1 	.word	0x080061f1
 8001868:	08006275 	.word	0x08006275
 800186c:	080062ef 	.word	0x080062ef
 8001870:	08006363 	.word	0x08006363
 8001874:	08006449 	.word	0x08006449
 8001878:	080064af 	.word	0x080064af
 800187c:	0800651d 	.word	0x0800651d
 8001880:	08006589 	.word	0x08006589
 8001884:	080065f5 	.word	0x080065f5
 8001888:	0800665f 	.word	0x0800665f
 800188c:	080066d5 	.word	0x080066d5
 8001890:	080067d1 	.word	0x080067d1
 8001894:	08006845 	.word	0x08006845
 8001898:	080068ab 	.word	0x080068ab
 800189c:	0800691d 	.word	0x0800691d
 80018a0:	08006993 	.word	0x08006993
 80018a4:	08006a03 	.word	0x08006a03
 80018a8:	08006a71 	.word	0x08006a71
 80018ac:	08006b61 	.word	0x08006b61
 80018b0:	08006bc7 	.word	0x08006bc7
 80018b4:	08006c31 	.word	0x08006c31
 80018b8:	08006ca5 	.word	0x08006ca5
 80018bc:	08006d0b 	.word	0x08006d0b
 80018c0:	08006d85 	.word	0x08006d85
 80018c4:	08006e03 	.word	0x08006e03
 80018c8:	08006ef9 	.word	0x08006ef9
 80018cc:	08006f65 	.word	0x08006f65
 80018d0:	08006fdf 	.word	0x08006fdf
 80018d4:	0800704b 	.word	0x0800704b
 80018d8:	080070bf 	.word	0x080070bf
 80018dc:	08007133 	.word	0x08007133
 80018e0:	08007225 	.word	0x08007225
 80018e4:	08007293 	.word	0x08007293
 80018e8:	0800730f 	.word	0x0800730f
 80018ec:	08007385 	.word	0x08007385
 80018f0:	080073f1 	.word	0x080073f1
 80018f4:	08007467 	.word	0x08007467
 80018f8:	08007551 	.word	0x08007551
 80018fc:	080075d7 	.word	0x080075d7
 8001900:	08007649 	.word	0x08007649
 8001904:	080076b3 	.word	0x080076b3
 8001908:	08007723 	.word	0x08007723
 800190c:	0800778d 	.word	0x0800778d
 8001910:	08007879 	.word	0x08007879
 8001914:	080078eb 	.word	0x080078eb
 8001918:	0800794b 	.word	0x0800794b
 800191c:	080079b9 	.word	0x080079b9
 8001920:	08007a2b 	.word	0x08007a2b
 8001924:	08007aab 	.word	0x08007aab
 8001928:	08007b8d 	.word	0x08007b8d
 800192c:	08007c01 	.word	0x08007c01
 8001930:	08007c8f 	.word	0x08007c8f
 8001934:	08007cf9 	.word	0x08007cf9
 8001938:	08007d67 	.word	0x08007d67
 800193c:	08007dd1 	.word	0x08007dd1
 8001940:	08007ebd 	.word	0x08007ebd
 8001944:	08007f33 	.word	0x08007f33
 8001948:	08007fb3 	.word	0x08007fb3
 800194c:	08008023 	.word	0x08008023
 8001950:	08008095 	.word	0x08008095
 8001954:	0800810f 	.word	0x0800810f
 8001958:	080081e9 	.word	0x080081e9
 800195c:	08008255 	.word	0x08008255
 8001960:	080082c1 	.word	0x080082c1
 8001964:	0800832b 	.word	0x0800832b
 8001968:	08008397 	.word	0x08008397
 800196c:	080083ff 	.word	0x080083ff
 8001970:	0800847b 	.word	0x0800847b
 8001974:	0800856d 	.word	0x0800856d
 8001978:	080085e5 	.word	0x080085e5
 800197c:	08008659 	.word	0x08008659
 8001980:	080086c3 	.word	0x080086c3
 8001984:	08008723 	.word	0x08008723
 8001988:	08008787 	.word	0x08008787
 800198c:	08008801 	.word	0x08008801
 8001990:	080088f1 	.word	0x080088f1
 8001994:	08008959 	.word	0x08008959
 8001998:	080089d1 	.word	0x080089d1
 800199c:	08008a4d 	.word	0x08008a4d
 80019a0:	08008abd 	.word	0x08008abd
 80019a4:	08008b1d 	.word	0x08008b1d
 80019a8:	08008b81 	.word	0x08008b81
 80019ac:	08008c61 	.word	0x08008c61
 80019b0:	08008ccd 	.word	0x08008ccd
 80019b4:	08008d4d 	.word	0x08008d4d
 80019b8:	08008dbb 	.word	0x08008dbb
 80019bc:	08008e2b 	.word	0x08008e2b
 80019c0:	08008e97 	.word	0x08008e97
 80019c4:	08008f79 	.word	0x08008f79
 80019c8:	08008fed 	.word	0x08008fed
 80019cc:	08009059 	.word	0x08009059
 80019d0:	080090cd 	.word	0x080090cd
 80019d4:	08009149 	.word	0x08009149
 80019d8:	080091b1 	.word	0x080091b1
 80019dc:	0800929d 	.word	0x0800929d
 80019e0:	08009327 	.word	0x08009327
 80019e4:	080093b5 	.word	0x080093b5
 80019e8:	0800943f 	.word	0x0800943f
 80019ec:	080094b7 	.word	0x080094b7
 80019f0:	08009523 	.word	0x08009523
 80019f4:	080095f9 	.word	0x080095f9
 80019f8:	08009669 	.word	0x08009669
 80019fc:	080096e9 	.word	0x080096e9
 8001a00:	08009757 	.word	0x08009757
 8001a04:	080097cf 	.word	0x080097cf
 8001a08:	08009849 	.word	0x08009849
 8001a0c:	08009921 	.word	0x08009921
 8001a10:	08009997 	.word	0x08009997
 8001a14:	08009a09 	.word	0x08009a09
 8001a18:	08009a73 	.word	0x08009a73
 8001a1c:	08009ae1 	.word	0x08009ae1
 8001a20:	08009b61 	.word	0x08009b61
 8001a24:	08009c3d 	.word	0x08009c3d
 8001a28:	08009cbf 	.word	0x08009cbf
 8001a2c:	08009d37 	.word	0x08009d37
 8001a30:	08009dad 	.word	0x08009dad
 8001a34:	08009e3f 	.word	0x08009e3f
 8001a38:	08009ea7 	.word	0x08009ea7
 8001a3c:	08009f89 	.word	0x08009f89
 8001a40:	08009ffd 	.word	0x08009ffd
 8001a44:	0800a073 	.word	0x0800a073
 8001a48:	0800a0f3 	.word	0x0800a0f3
 8001a4c:	0800a16d 	.word	0x0800a16d
 8001a50:	0800a1e3 	.word	0x0800a1e3
 8001a54:	0800a2c9 	.word	0x0800a2c9
 8001a58:	0800a345 	.word	0x0800a345
 8001a5c:	0800a3c3 	.word	0x0800a3c3
 8001a60:	0800a439 	.word	0x0800a439
 8001a64:	0800a4a1 	.word	0x0800a4a1
 8001a68:	0800a509 	.word	0x0800a509
 8001a6c:	0800a5e9 	.word	0x0800a5e9
 8001a70:	0800a661 	.word	0x0800a661
 8001a74:	0800a6cf 	.word	0x0800a6cf
 8001a78:	0800a749 	.word	0x0800a749
 8001a7c:	0800a7b1 	.word	0x0800a7b1
 8001a80:	0800a81d 	.word	0x0800a81d
 8001a84:	0800a887 	.word	0x0800a887
 8001a88:	0800a975 	.word	0x0800a975
 8001a8c:	0800a9e7 	.word	0x0800a9e7
 8001a90:	0800aa5b 	.word	0x0800aa5b
 8001a94:	0800aacb 	.word	0x0800aacb
 8001a98:	0800ab3d 	.word	0x0800ab3d
 8001a9c:	0800abc1 	.word	0x0800abc1
 8001aa0:	0800acb1 	.word	0x0800acb1
 8001aa4:	0800ad31 	.word	0x0800ad31
 8001aa8:	0800ad9b 	.word	0x0800ad9b
 8001aac:	0800ae03 	.word	0x0800ae03
 8001ab0:	0800ae71 	.word	0x0800ae71
 8001ab4:	0800aedd 	.word	0x0800aedd
 8001ab8:	0800af5b 	.word	0x0800af5b
 8001abc:	0800b041 	.word	0x0800b041
 8001ac0:	0800b0af 	.word	0x0800b0af
 8001ac4:	0800b129 	.word	0x0800b129
 8001ac8:	0800b199 	.word	0x0800b199
 8001acc:	0800b20b 	.word	0x0800b20b
 8001ad0:	0800b27f 	.word	0x0800b27f
 8001ad4:	0800b359 	.word	0x0800b359
 8001ad8:	0800b3cf 	.word	0x0800b3cf
 8001adc:	0800b449 	.word	0x0800b449
 8001ae0:	0800b4bd 	.word	0x0800b4bd
 8001ae4:	0800b525 	.word	0x0800b525
 8001ae8:	0800b58f 	.word	0x0800b58f
 8001aec:	0800b67d 	.word	0x0800b67d
 8001af0:	0800b705 	.word	0x0800b705
 8001af4:	0800b77d 	.word	0x0800b77d
 8001af8:	0800b7fb 	.word	0x0800b7fb
 8001afc:	0800b86f 	.word	0x0800b86f
 8001b00:	0800b8e7 	.word	0x0800b8e7
 8001b04:	0800b9b9 	.word	0x0800b9b9
 8001b08:	0800ba2f 	.word	0x0800ba2f
 8001b0c:	0800baa5 	.word	0x0800baa5
 8001b10:	0800bb0f 	.word	0x0800bb0f
 8001b14:	0800bb75 	.word	0x0800bb75
 8001b18:	0800bbcd 	.word	0x0800bbcd
 8001b1c:	0800bc47 	.word	0x0800bc47
 8001b20:	0800bd3d 	.word	0x0800bd3d
 8001b24:	0800bdaf 	.word	0x0800bdaf
 8001b28:	0800be2f 	.word	0x0800be2f
 8001b2c:	0800be9f 	.word	0x0800be9f
 8001b30:	0800bf05 	.word	0x0800bf05
 8001b34:	0800bf75 	.word	0x0800bf75
 8001b38:	0800bfe9 	.word	0x0800bfe9
 8001b3c:	0800c0cd 	.word	0x0800c0cd
 8001b40:	0800c135 	.word	0x0800c135
 8001b44:	0800c1a5 	.word	0x0800c1a5
 8001b48:	0800c213 	.word	0x0800c213
 8001b4c:	0800c283 	.word	0x0800c283
 8001b50:	0800c2ef 	.word	0x0800c2ef
 8001b54:	0800c361 	.word	0x0800c361
 8001b58:	0800c445 	.word	0x0800c445
 8001b5c:	0800c4ab 	.word	0x0800c4ab
 8001b60:	0800c511 	.word	0x0800c511
 8001b64:	0800c583 	.word	0x0800c583
 8001b68:	0800c5f7 	.word	0x0800c5f7
 8001b6c:	0800c65d 	.word	0x0800c65d
 8001b70:	0800c6c7 	.word	0x0800c6c7
 8001b74:	0800c7ad 	.word	0x0800c7ad
 8001b78:	0800c823 	.word	0x0800c823
 8001b7c:	0800c893 	.word	0x0800c893
 8001b80:	0800c903 	.word	0x0800c903
 8001b84:	0800c973 	.word	0x0800c973
 8001b88:	0800c9e3 	.word	0x0800c9e3
 8001b8c:	0800cabd 	.word	0x0800cabd
 8001b90:	0800cb31 	.word	0x0800cb31
 8001b94:	0800cb9b 	.word	0x0800cb9b
 8001b98:	0800cc07 	.word	0x0800cc07
 8001b9c:	0800cc73 	.word	0x0800cc73
 8001ba0:	0800cce5 	.word	0x0800cce5
 8001ba4:	0800cd53 	.word	0x0800cd53
 8001ba8:	0800ce3d 	.word	0x0800ce3d
 8001bac:	0800ceb3 	.word	0x0800ceb3
 8001bb0:	0800cf17 	.word	0x0800cf17
 8001bb4:	0800cf7f 	.word	0x0800cf7f
 8001bb8:	0800cfff 	.word	0x0800cfff
 8001bbc:	0800d075 	.word	0x0800d075
 8001bc0:	0800d159 	.word	0x0800d159
 8001bc4:	0800d1c9 	.word	0x0800d1c9
 8001bc8:	0800d247 	.word	0x0800d247
 8001bcc:	0800d2b3 	.word	0x0800d2b3
 8001bd0:	0800d329 	.word	0x0800d329
 8001bd4:	0800d393 	.word	0x0800d393
 8001bd8:	0800d47d 	.word	0x0800d47d
 8001bdc:	0800d4f7 	.word	0x0800d4f7
 8001be0:	0800d569 	.word	0x0800d569
 8001be4:	0800d5db 	.word	0x0800d5db
 8001be8:	0800d64d 	.word	0x0800d64d
 8001bec:	0800d6bb 	.word	0x0800d6bb
 8001bf0:	0800d795 	.word	0x0800d795
 8001bf4:	0800d80d 	.word	0x0800d80d
 8001bf8:	0800d87f 	.word	0x0800d87f
 8001bfc:	0800d8e3 	.word	0x0800d8e3
 8001c00:	0800d96f 	.word	0x0800d96f
 8001c04:	0800d9d9 	.word	0x0800d9d9
 8001c08:	0800dac1 	.word	0x0800dac1
 8001c0c:	0800db25 	.word	0x0800db25
 8001c10:	0800db93 	.word	0x0800db93
 8001c14:	0800dc01 	.word	0x0800dc01
 8001c18:	0800dc69 	.word	0x0800dc69
 8001c1c:	0800dcd5 	.word	0x0800dcd5
 8001c20:	0800dd4f 	.word	0x0800dd4f
 8001c24:	0800de31 	.word	0x0800de31
 8001c28:	0800deaf 	.word	0x0800deaf
 8001c2c:	0800df23 	.word	0x0800df23
 8001c30:	0800df89 	.word	0x0800df89
 8001c34:	0800dffb 	.word	0x0800dffb
 8001c38:	0800e075 	.word	0x0800e075
 8001c3c:	0800e151 	.word	0x0800e151
 8001c40:	0800e1b5 	.word	0x0800e1b5
 8001c44:	0800e21b 	.word	0x0800e21b
 8001c48:	0800e28f 	.word	0x0800e28f
 8001c4c:	0800e303 	.word	0x0800e303
 8001c50:	0800e37f 	.word	0x0800e37f
 8001c54:	0800e461 	.word	0x0800e461
 8001c58:	0800e4e3 	.word	0x0800e4e3
 8001c5c:	0800e547 	.word	0x0800e547
 8001c60:	0800e5af 	.word	0x0800e5af
 8001c64:	0800e61b 	.word	0x0800e61b
 8001c68:	0800e68b 	.word	0x0800e68b
 8001c6c:	0800e6ef 	.word	0x0800e6ef
 8001c70:	0800e7ed 	.word	0x0800e7ed
 8001c74:	0800e85d 	.word	0x0800e85d
 8001c78:	0800e8cd 	.word	0x0800e8cd
 8001c7c:	0800e967 	.word	0x0800e967
 8001c80:	0800e9d5 	.word	0x0800e9d5
 8001c84:	0800ea3d 	.word	0x0800ea3d
 8001c88:	0800eb09 	.word	0x0800eb09
 8001c8c:	0800eb79 	.word	0x0800eb79
 8001c90:	0800ebdf 	.word	0x0800ebdf
 8001c94:	0800ec49 	.word	0x0800ec49
 8001c98:	0800eca9 	.word	0x0800eca9
 8001c9c:	0800ed19 	.word	0x0800ed19
 8001ca0:	0800ed81 	.word	0x0800ed81
 8001ca4:	0800ee65 	.word	0x0800ee65
 8001ca8:	0800eed5 	.word	0x0800eed5
 8001cac:	0800ef4f 	.word	0x0800ef4f
 8001cb0:	0800efc3 	.word	0x0800efc3
 8001cb4:	0800f037 	.word	0x0800f037
 8001cb8:	0800f0a9 	.word	0x0800f0a9
 8001cbc:	0800f185 	.word	0x0800f185
 8001cc0:	0800f207 	.word	0x0800f207
 8001cc4:	0800f27d 	.word	0x0800f27d
 8001cc8:	0800f2ef 	.word	0x0800f2ef
 8001ccc:	0800f363 	.word	0x0800f363
 8001cd0:	0800f3cf 	.word	0x0800f3cf
 8001cd4:	0800f4a9 	.word	0x0800f4a9
 8001cd8:	0800f521 	.word	0x0800f521
 8001cdc:	0800f58d 	.word	0x0800f58d
 8001ce0:	0800f5f7 	.word	0x0800f5f7
 8001ce4:	0800f663 	.word	0x0800f663
 8001ce8:	0800f6cf 	.word	0x0800f6cf
 8001cec:	0800f7b5 	.word	0x0800f7b5
 8001cf0:	0800f825 	.word	0x0800f825
 8001cf4:	0800f89b 	.word	0x0800f89b
 8001cf8:	0800f915 	.word	0x0800f915
 8001cfc:	0800f993 	.word	0x0800f993
 8001d00:	0800fa07 	.word	0x0800fa07
 8001d04:	0800faed 	.word	0x0800faed
 8001d08:	0800fb53 	.word	0x0800fb53
 8001d0c:	0800fbc3 	.word	0x0800fbc3
 8001d10:	0800fc3b 	.word	0x0800fc3b
 8001d14:	0800fca5 	.word	0x0800fca5
 8001d18:	0800fd1d 	.word	0x0800fd1d
 8001d1c:	0800fe01 	.word	0x0800fe01
 8001d20:	0800fe6b 	.word	0x0800fe6b
 8001d24:	0800fedf 	.word	0x0800fedf
 8001d28:	0800ff4b 	.word	0x0800ff4b
 8001d2c:	0800ffb9 	.word	0x0800ffb9
 8001d30:	0801002f 	.word	0x0801002f
 8001d34:	08010099 	.word	0x08010099
 8001d38:	08010181 	.word	0x08010181
 8001d3c:	080101ed 	.word	0x080101ed
 8001d40:	08010261 	.word	0x08010261
 8001d44:	080102cb 	.word	0x080102cb
 8001d48:	08010337 	.word	0x08010337
 8001d4c:	080103a9 	.word	0x080103a9
 8001d50:	08010423 	.word	0x08010423
 8001d54:	08010509 	.word	0x08010509
 8001d58:	08010581 	.word	0x08010581
 8001d5c:	080105fd 	.word	0x080105fd
 8001d60:	08010671 	.word	0x08010671
 8001d64:	080106ed 	.word	0x080106ed
 8001d68:	08010753 	.word	0x08010753
 8001d6c:	08010829 	.word	0x08010829
 8001d70:	0801089d 	.word	0x0801089d
 8001d74:	08010913 	.word	0x08010913
 8001d78:	08010989 	.word	0x08010989
 8001d7c:	080109f5 	.word	0x080109f5
 8001d80:	08010a65 	.word	0x08010a65
 8001d84:	08010b45 	.word	0x08010b45
 8001d88:	08010bb9 	.word	0x08010bb9
 8001d8c:	08010c27 	.word	0x08010c27
 8001d90:	08010c99 	.word	0x08010c99
 8001d94:	08010d09 	.word	0x08010d09
 8001d98:	08010d7d 	.word	0x08010d7d
 8001d9c:	08010e61 	.word	0x08010e61
 8001da0:	08010ed7 	.word	0x08010ed7
 8001da4:	08010f5f 	.word	0x08010f5f
 8001da8:	08010fd5 	.word	0x08010fd5
 8001dac:	08011045 	.word	0x08011045
 8001db0:	080110ab 	.word	0x080110ab
 8001db4:	08011191 	.word	0x08011191
 8001db8:	08011207 	.word	0x08011207
 8001dbc:	0801128d 	.word	0x0801128d
 8001dc0:	08011307 	.word	0x08011307
 8001dc4:	08011395 	.word	0x08011395
 8001dc8:	0801140b 	.word	0x0801140b
 8001dcc:	080114e9 	.word	0x080114e9
 8001dd0:	08011559 	.word	0x08011559
 8001dd4:	080115c9 	.word	0x080115c9
 8001dd8:	0801164d 	.word	0x0801164d
 8001ddc:	080116bf 	.word	0x080116bf
 8001de0:	08011733 	.word	0x08011733
 8001de4:	08011811 	.word	0x08011811
 8001de8:	0801188d 	.word	0x0801188d
 8001dec:	08011909 	.word	0x08011909
 8001df0:	0801197b 	.word	0x0801197b
 8001df4:	080119f5 	.word	0x080119f5
 8001df8:	08011a67 	.word	0x08011a67
 8001dfc:	08011b39 	.word	0x08011b39
 8001e00:	08011bad 	.word	0x08011bad
 8001e04:	08011c1d 	.word	0x08011c1d
 8001e08:	08011c9f 	.word	0x08011c9f
 8001e0c:	08011d0f 	.word	0x08011d0f
 8001e10:	08011d7d 	.word	0x08011d7d
 8001e14:	08011e61 	.word	0x08011e61
 8001e18:	08011ec1 	.word	0x08011ec1
 8001e1c:	08011f29 	.word	0x08011f29
 8001e20:	08011fa5 	.word	0x08011fa5
 8001e24:	0801202b 	.word	0x0801202b
 8001e28:	080120ab 	.word	0x080120ab
 8001e2c:	08012191 	.word	0x08012191
 8001e30:	0801220f 	.word	0x0801220f
 8001e34:	0801227f 	.word	0x0801227f
 8001e38:	080122eb 	.word	0x080122eb
 8001e3c:	0801235b 	.word	0x0801235b
 8001e40:	080123c9 	.word	0x080123c9
 8001e44:	080124ad 	.word	0x080124ad
 8001e48:	0801252b 	.word	0x0801252b
 8001e4c:	080125b7 	.word	0x080125b7
 8001e50:	08012637 	.word	0x08012637
 8001e54:	080126a9 	.word	0x080126a9
 8001e58:	0801271d 	.word	0x0801271d
 8001e5c:	080127fd 	.word	0x080127fd
 8001e60:	0801286b 	.word	0x0801286b
 8001e64:	080128e3 	.word	0x080128e3
 8001e68:	0801296d 	.word	0x0801296d
 8001e6c:	080129e7 	.word	0x080129e7
 8001e70:	08012a5d 	.word	0x08012a5d
 8001e74:	08012b31 	.word	0x08012b31
 8001e78:	08012ba7 	.word	0x08012ba7
 8001e7c:	08012c11 	.word	0x08012c11
 8001e80:	08012c7f 	.word	0x08012c7f
 8001e84:	08012ced 	.word	0x08012ced
 8001e88:	08012d63 	.word	0x08012d63
 8001e8c:	08012e3d 	.word	0x08012e3d
 8001e90:	08012eb5 	.word	0x08012eb5
 8001e94:	08012f15 	.word	0x08012f15
 8001e98:	08012f81 	.word	0x08012f81
 8001e9c:	08012ff1 	.word	0x08012ff1
 8001ea0:	0801306d 	.word	0x0801306d
 8001ea4:	08013155 	.word	0x08013155
 8001ea8:	080131cf 	.word	0x080131cf
 8001eac:	08013243 	.word	0x08013243
 8001eb0:	080132bb 	.word	0x080132bb
 8001eb4:	0801332b 	.word	0x0801332b
 8001eb8:	0801338f 	.word	0x0801338f
 8001ebc:	08013401 	.word	0x08013401
 8001ec0:	080134ed 	.word	0x080134ed
 8001ec4:	08013571 	.word	0x08013571
 8001ec8:	080135e3 	.word	0x080135e3
 8001ecc:	08013679 	.word	0x08013679
 8001ed0:	08013711 	.word	0x08013711
 8001ed4:	0801377b 	.word	0x0801377b
 8001ed8:	08013861 	.word	0x08013861
 8001edc:	080138e3 	.word	0x080138e3
 8001ee0:	0801395b 	.word	0x0801395b
 8001ee4:	080139d1 	.word	0x080139d1
 8001ee8:	08013a37 	.word	0x08013a37
 8001eec:	08013aa7 	.word	0x08013aa7
 8001ef0:	08013b95 	.word	0x08013b95
 8001ef4:	08013c03 	.word	0x08013c03
 8001ef8:	08013c75 	.word	0x08013c75
 8001efc:	08013ced 	.word	0x08013ced
 8001f00:	08013d65 	.word	0x08013d65
 8001f04:	08013dd1 	.word	0x08013dd1
 8001f08:	08013eb5 	.word	0x08013eb5
 8001f0c:	08013f2f 	.word	0x08013f2f
 8001f10:	08013faf 	.word	0x08013faf
 8001f14:	0801401d 	.word	0x0801401d
 8001f18:	0801408d 	.word	0x0801408d
 8001f1c:	080140fd 	.word	0x080140fd
 8001f20:	080141e5 	.word	0x080141e5
 8001f24:	0801426b 	.word	0x0801426b
 8001f28:	080142df 	.word	0x080142df
 8001f2c:	08014365 	.word	0x08014365
 8001f30:	080143d3 	.word	0x080143d3
 8001f34:	08014449 	.word	0x08014449
 8001f38:	08014539 	.word	0x08014539
 8001f3c:	080145b1 	.word	0x080145b1
 8001f40:	0801461f 	.word	0x0801461f
 8001f44:	0801469b 	.word	0x0801469b
 8001f48:	0801470b 	.word	0x0801470b
 8001f4c:	08014781 	.word	0x08014781
 8001f50:	08014861 	.word	0x08014861
 8001f54:	080148cf 	.word	0x080148cf
 8001f58:	0801493b 	.word	0x0801493b
 8001f5c:	080149cf 	.word	0x080149cf
 8001f60:	08014a43 	.word	0x08014a43
 8001f64:	08014abd 	.word	0x08014abd
 8001f68:	08014b9d 	.word	0x08014b9d
 8001f6c:	08014c09 	.word	0x08014c09
 8001f70:	08014c77 	.word	0x08014c77
 8001f74:	08014ce9 	.word	0x08014ce9
 8001f78:	08014d57 	.word	0x08014d57
 8001f7c:	08014dd1 	.word	0x08014dd1
 8001f80:	08014ea5 	.word	0x08014ea5
 8001f84:	08014f13 	.word	0x08014f13
 8001f88:	08014f89 	.word	0x08014f89
 8001f8c:	08014ff3 	.word	0x08014ff3
 8001f90:	08015077 	.word	0x08015077
 8001f94:	080150ef 	.word	0x080150ef
 8001f98:	080151d5 	.word	0x080151d5
 8001f9c:	0801523f 	.word	0x0801523f
 8001fa0:	080152a5 	.word	0x080152a5
 8001fa4:	0801530f 	.word	0x0801530f
 8001fa8:	08015383 	.word	0x08015383
 8001fac:	08015409 	.word	0x08015409
 8001fb0:	0801546d 	.word	0x0801546d
 8001fb4:	08015559 	.word	0x08015559
 8001fb8:	080155c7 	.word	0x080155c7
 8001fbc:	0801562b 	.word	0x0801562b
 8001fc0:	080156a5 	.word	0x080156a5
 8001fc4:	08015719 	.word	0x08015719
 8001fc8:	0801577b 	.word	0x0801577b
 8001fcc:	0801586d 	.word	0x0801586d
 8001fd0:	080158f1 	.word	0x080158f1
 8001fd4:	0801595f 	.word	0x0801595f
 8001fd8:	080159cf 	.word	0x080159cf
 8001fdc:	08015a3f 	.word	0x08015a3f
 8001fe0:	08015aaf 	.word	0x08015aaf
 8001fe4:	08015b99 	.word	0x08015b99
 8001fe8:	08015c1f 	.word	0x08015c1f
 8001fec:	08015c8b 	.word	0x08015c8b
 8001ff0:	08015d0d 	.word	0x08015d0d
 8001ff4:	08015d75 	.word	0x08015d75
 8001ff8:	08015deb 	.word	0x08015deb
 8001ffc:	08015ebd 	.word	0x08015ebd
 8002000:	08015f35 	.word	0x08015f35
 8002004:	08015fa9 	.word	0x08015fa9
 8002008:	08016009 	.word	0x08016009
 800200c:	0801607f 	.word	0x0801607f
 8002010:	080160ef 	.word	0x080160ef
 8002014:	0801615d 	.word	0x0801615d
 8002018:	08016251 	.word	0x08016251
 800201c:	080162bd 	.word	0x080162bd
 8002020:	0801632b 	.word	0x0801632b
 8002024:	080163a5 	.word	0x080163a5
 8002028:	0801640d 	.word	0x0801640d
 800202c:	0801647d 	.word	0x0801647d
 8002030:	080164e9 	.word	0x080164e9
 8002034:	080165d5 	.word	0x080165d5
 8002038:	08016649 	.word	0x08016649
 800203c:	080166b1 	.word	0x080166b1
 8002040:	08016725 	.word	0x08016725
 8002044:	0801679f 	.word	0x0801679f
 8002048:	0801681b 	.word	0x0801681b
 800204c:	080168dd 	.word	0x080168dd
 8002050:	0801694f 	.word	0x0801694f
 8002054:	080169cf 	.word	0x080169cf
 8002058:	08016a3b 	.word	0x08016a3b
 800205c:	08016aab 	.word	0x08016aab
 8002060:	08016b1b 	.word	0x08016b1b
 8002064:	08016bf5 	.word	0x08016bf5
 8002068:	08016c5d 	.word	0x08016c5d
 800206c:	08016cd9 	.word	0x08016cd9
 8002070:	08016d49 	.word	0x08016d49
 8002074:	08016dc1 	.word	0x08016dc1
 8002078:	08016e23 	.word	0x08016e23
 800207c:	08016e95 	.word	0x08016e95
 8002080:	08016f7d 	.word	0x08016f7d
 8002084:	08016feb 	.word	0x08016feb
 8002088:	08017057 	.word	0x08017057
 800208c:	080170c7 	.word	0x080170c7
 8002090:	08017133 	.word	0x08017133
 8002094:	080171a1 	.word	0x080171a1
 8002098:	08017205 	.word	0x08017205
 800209c:	080172dd 	.word	0x080172dd
 80020a0:	0801734d 	.word	0x0801734d
 80020a4:	080173b7 	.word	0x080173b7
 80020a8:	08017419 	.word	0x08017419
 80020ac:	08017483 	.word	0x08017483
 80020b0:	080174f5 	.word	0x080174f5
 80020b4:	080175fd 	.word	0x080175fd
 80020b8:	08017679 	.word	0x08017679
 80020bc:	080176f1 	.word	0x080176f1
 80020c0:	08017767 	.word	0x08017767
 80020c4:	080177d7 	.word	0x080177d7
 80020c8:	08017841 	.word	0x08017841
 80020cc:	08017915 	.word	0x08017915
 80020d0:	0801798d 	.word	0x0801798d
 80020d4:	08017a0f 	.word	0x08017a0f
 80020d8:	08017a83 	.word	0x08017a83
 80020dc:	08017af3 	.word	0x08017af3
 80020e0:	08017b6f 	.word	0x08017b6f
 80020e4:	08017c4d 	.word	0x08017c4d
 80020e8:	08017cbd 	.word	0x08017cbd
 80020ec:	08017d2d 	.word	0x08017d2d
 80020f0:	08017d9f 	.word	0x08017d9f
 80020f4:	08017e19 	.word	0x08017e19
 80020f8:	08017e87 	.word	0x08017e87
 80020fc:	08017ef9 	.word	0x08017ef9
 8002100:	08017fdd 	.word	0x08017fdd
 8002104:	08018049 	.word	0x08018049
 8002108:	080180bd 	.word	0x080180bd
 800210c:	08018137 	.word	0x08018137
 8002110:	080181af 	.word	0x080181af
 8002114:	08018221 	.word	0x08018221
 8002118:	080182fd 	.word	0x080182fd
 800211c:	0801836d 	.word	0x0801836d
 8002120:	080183e9 	.word	0x080183e9
 8002124:	08018465 	.word	0x08018465
 8002128:	080184c1 	.word	0x080184c1
 800212c:	08018535 	.word	0x08018535
 8002130:	08018619 	.word	0x08018619
 8002134:	08018687 	.word	0x08018687
 8002138:	080186ef 	.word	0x080186ef
 800213c:	08018759 	.word	0x08018759
 8002140:	080187c1 	.word	0x080187c1
 8002144:	08018829 	.word	0x08018829
 8002148:	08018893 	.word	0x08018893
 800214c:	0801897d 	.word	0x0801897d
 8002150:	080189f7 	.word	0x080189f7
 8002154:	08018a71 	.word	0x08018a71
 8002158:	08018ae7 	.word	0x08018ae7
 800215c:	08018b57 	.word	0x08018b57
 8002160:	08018bc1 	.word	0x08018bc1
 8002164:	08018ca9 	.word	0x08018ca9
 8002168:	08018d1b 	.word	0x08018d1b
 800216c:	08018d8d 	.word	0x08018d8d
 8002170:	08018df9 	.word	0x08018df9
 8002174:	08018e65 	.word	0x08018e65
 8002178:	08018ec9 	.word	0x08018ec9
 800217c:	08018f3d 	.word	0x08018f3d
 8002180:	08019025 	.word	0x08019025
 8002184:	0801909b 	.word	0x0801909b
 8002188:	0801910b 	.word	0x0801910b
 800218c:	0801916f 	.word	0x0801916f
 8002190:	080191df 	.word	0x080191df
 8002194:	0801924f 	.word	0x0801924f
 8002198:	080192b5 	.word	0x080192b5
 800219c:	08019395 	.word	0x08019395
 80021a0:	080193f9 	.word	0x080193f9
 80021a4:	08019461 	.word	0x08019461
 80021a8:	080194d1 	.word	0x080194d1
 80021ac:	08019547 	.word	0x08019547
 80021b0:	080195b7 	.word	0x080195b7
 80021b4:	08019629 	.word	0x08019629
 80021b8:	0801971d 	.word	0x0801971d
 80021bc:	08019795 	.word	0x08019795
 80021c0:	0801980b 	.word	0x0801980b
 80021c4:	08019885 	.word	0x08019885
 80021c8:	080198f3 	.word	0x080198f3
 80021cc:	08019969 	.word	0x08019969
 80021d0:	08019a49 	.word	0x08019a49
 80021d4:	08019ab3 	.word	0x08019ab3
 80021d8:	08019b29 	.word	0x08019b29
 80021dc:	08019b99 	.word	0x08019b99
 80021e0:	08019c09 	.word	0x08019c09
 80021e4:	08019c75 	.word	0x08019c75
 80021e8:	08019d5d 	.word	0x08019d5d
 80021ec:	08019dc9 	.word	0x08019dc9
 80021f0:	08019e33 	.word	0x08019e33
 80021f4:	08019e9f 	.word	0x08019e9f
 80021f8:	08019f0d 	.word	0x08019f0d
 80021fc:	08019f87 	.word	0x08019f87
 8002200:	08019ff5 	.word	0x08019ff5
 8002204:	0801a0e5 	.word	0x0801a0e5
 8002208:	0801a153 	.word	0x0801a153
 800220c:	0801a1c9 	.word	0x0801a1c9
 8002210:	0801a251 	.word	0x0801a251
 8002214:	0801a2c5 	.word	0x0801a2c5
 8002218:	0801a327 	.word	0x0801a327
 800221c:	0801a405 	.word	0x0801a405
 8002220:	0801a47b 	.word	0x0801a47b
 8002224:	0801a4e5 	.word	0x0801a4e5
 8002228:	0801a557 	.word	0x0801a557
 800222c:	0801a5cd 	.word	0x0801a5cd
 8002230:	0801a633 	.word	0x0801a633
 8002234:	0801a6a3 	.word	0x0801a6a3
 8002238:	0801a795 	.word	0x0801a795
 800223c:	0801a7f9 	.word	0x0801a7f9
 8002240:	0801a86b 	.word	0x0801a86b
 8002244:	0801a8e1 	.word	0x0801a8e1
 8002248:	0801a947 	.word	0x0801a947
 800224c:	0801a9b9 	.word	0x0801a9b9
 8002250:	0801aa1f 	.word	0x0801aa1f
 8002254:	0801ab15 	.word	0x0801ab15
 8002258:	0801ab85 	.word	0x0801ab85
 800225c:	0801abfb 	.word	0x0801abfb
 8002260:	0801ac73 	.word	0x0801ac73
 8002264:	0801ace3 	.word	0x0801ace3
 8002268:	0801ad5b 	.word	0x0801ad5b
 800226c:	0801ae39 	.word	0x0801ae39
 8002270:	0801aea5 	.word	0x0801aea5
 8002274:	0801af09 	.word	0x0801af09
 8002278:	0801af6f 	.word	0x0801af6f
 800227c:	0801afe9 	.word	0x0801afe9
 8002280:	0801b059 	.word	0x0801b059
 8002284:	0801b0bb 	.word	0x0801b0bb
 8002288:	0801b1a1 	.word	0x0801b1a1
 800228c:	0801b217 	.word	0x0801b217
 8002290:	0801b287 	.word	0x0801b287
 8002294:	0801b2e9 	.word	0x0801b2e9
 8002298:	0801b35d 	.word	0x0801b35d
 800229c:	0801b3d3 	.word	0x0801b3d3
 80022a0:	0801b445 	.word	0x0801b445
 80022a4:	0801b525 	.word	0x0801b525
 80022a8:	0801b595 	.word	0x0801b595
 80022ac:	0801b601 	.word	0x0801b601
 80022b0:	0801b667 	.word	0x0801b667
 80022b4:	0801b6e9 	.word	0x0801b6e9
 80022b8:	0801b759 	.word	0x0801b759
 80022bc:	0801b7bf 	.word	0x0801b7bf
 80022c0:	0801b8b1 	.word	0x0801b8b1
 80022c4:	0801b91f 	.word	0x0801b91f
 80022c8:	0801b97b 	.word	0x0801b97b
 80022cc:	0801b9f3 	.word	0x0801b9f3
 80022d0:	0801ba63 	.word	0x0801ba63
 80022d4:	0801bad3 	.word	0x0801bad3
 80022d8:	0801bbb5 	.word	0x0801bbb5
 80022dc:	0801bc31 	.word	0x0801bc31
 80022e0:	0801bcc7 	.word	0x0801bcc7
 80022e4:	0801bd47 	.word	0x0801bd47
 80022e8:	0801bda9 	.word	0x0801bda9
 80022ec:	0801be1d 	.word	0x0801be1d
 80022f0:	0801befd 	.word	0x0801befd
 80022f4:	0801bf67 	.word	0x0801bf67
 80022f8:	0801bfd3 	.word	0x0801bfd3
 80022fc:	0801c039 	.word	0x0801c039
 8002300:	0801c0b3 	.word	0x0801c0b3
 8002304:	0801c11d 	.word	0x0801c11d
 8002308:	0801c205 	.word	0x0801c205
 800230c:	0801c27d 	.word	0x0801c27d
 8002310:	0801c2e5 	.word	0x0801c2e5
 8002314:	0801c35d 	.word	0x0801c35d
 8002318:	0801c3d1 	.word	0x0801c3d1
 800231c:	0801c445 	.word	0x0801c445
	switch(id){
		case 0 :
			strcpy(p->name,"CAZZONE");
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8002326:	49c3      	ldr	r1, [pc, #780]	; (8002634 <problem_fetch+0xfd0>)
 8002328:	461a      	mov	r2, r3
 800232a:	460b      	mov	r3, r1
 800232c:	cb03      	ldmia	r3!, {r0, r1}
 800232e:	6010      	str	r0, [r2, #0]
 8002330:	6051      	str	r1, [r2, #4]
			strcpy(p->grade,"8=D");
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8002338:	4abf      	ldr	r2, [pc, #764]	; (8002638 <problem_fetch+0xfd4>)
 800233a:	6810      	ldr	r0, [r2, #0]
 800233c:	6018      	str	r0, [r3, #0]
			p->moveSize = 50;
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	2232      	movs	r2, #50	; 0x32
 8002342:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"A,A,B,B,B,B,C,C,E,E,E,E,E,E,E,E,E,E,E,E,E,F,F,F,F,G,G,G,G,H,H,H,H,H,H,H,H,H,H,H,H,H,I,I,J,J,J,J,K,K");
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	33a4      	adds	r3, #164	; 0xa4
 8002348:	4abc      	ldr	r2, [pc, #752]	; (800263c <problem_fetch+0xfd8>)
 800234a:	4618      	mov	r0, r3
 800234c:	4611      	mov	r1, r2
 800234e:	2364      	movs	r3, #100	; 0x64
 8002350:	461a      	mov	r2, r3
 8002352:	f01f fee9 	bl	8022128 <memcpy>
			strcpy(p->moveNumbers,"16,15,18,17,14,13,18,13,18,17,14,13,12,11,10,9,8,7,6,5,4,16,15,5,3,16,15,5,3,18,17,14,13,12,11,10,9,8,7,6,5,4,18,13,18,17,14,13,16,15");
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	3304      	adds	r3, #4
 800235a:	4ab9      	ldr	r2, [pc, #740]	; (8002640 <problem_fetch+0xfdc>)
 800235c:	4618      	mov	r0, r3
 800235e:	4611      	mov	r1, r2
 8002360:	2386      	movs	r3, #134	; 0x86
 8002362:	461a      	mov	r2, r3
 8002364:	f01f fee0 	bl	8022128 <memcpy>
			strcpy(p->startFinish,"c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c");
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800236e:	4ab5      	ldr	r2, [pc, #724]	; (8002644 <problem_fetch+0xfe0>)
 8002370:	4618      	mov	r0, r3
 8002372:	4611      	mov	r1, r2
 8002374:	2364      	movs	r3, #100	; 0x64
 8002376:	461a      	mov	r2, r3
 8002378:	f01f fed6 	bl	8022128 <memcpy>
			break;
 800237c:	f01a b8a2 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 1 :
			strcpy(p->name,"JUMPBUG");
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8002386:	49b0      	ldr	r1, [pc, #704]	; (8002648 <problem_fetch+0xfe4>)
 8002388:	461a      	mov	r2, r3
 800238a:	460b      	mov	r3, r1
 800238c:	cb03      	ldmia	r3!, {r0, r1}
 800238e:	6010      	str	r0, [r2, #0]
 8002390:	6051      	str	r1, [r2, #4]
			strcpy(p->grade,"7A");
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8002398:	4aac      	ldr	r2, [pc, #688]	; (800264c <problem_fetch+0xfe8>)
 800239a:	8811      	ldrh	r1, [r2, #0]
 800239c:	7892      	ldrb	r2, [r2, #2]
 800239e:	8019      	strh	r1, [r3, #0]
 80023a0:	709a      	strb	r2, [r3, #2]
			p->moveSize = 6;
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	2206      	movs	r2, #6
 80023a6:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"E,J,H,F,C,D");
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	33a4      	adds	r3, #164	; 0xa4
 80023ac:	4aa8      	ldr	r2, [pc, #672]	; (8002650 <problem_fetch+0xfec>)
 80023ae:	461c      	mov	r4, r3
 80023b0:	4613      	mov	r3, r2
 80023b2:	cb07      	ldmia	r3!, {r0, r1, r2}
 80023b4:	6020      	str	r0, [r4, #0]
 80023b6:	6061      	str	r1, [r4, #4]
 80023b8:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"6,5,10,11,13,18");
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	3304      	adds	r3, #4
 80023be:	4aa5      	ldr	r2, [pc, #660]	; (8002654 <problem_fetch+0xff0>)
 80023c0:	461c      	mov	r4, r3
 80023c2:	4615      	mov	r5, r2
 80023c4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80023c6:	6020      	str	r0, [r4, #0]
 80023c8:	6061      	str	r1, [r4, #4]
 80023ca:	60a2      	str	r2, [r4, #8]
 80023cc:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,s,d,d,d,e");
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 80023d4:	4aa0      	ldr	r2, [pc, #640]	; (8002658 <problem_fetch+0xff4>)
 80023d6:	461c      	mov	r4, r3
 80023d8:	4613      	mov	r3, r2
 80023da:	cb07      	ldmia	r3!, {r0, r1, r2}
 80023dc:	6020      	str	r0, [r4, #0]
 80023de:	6061      	str	r1, [r4, #4]
 80023e0:	60a2      	str	r2, [r4, #8]
			break;
 80023e2:	f01a b86f 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 2 :
			strcpy(p->name,"JINJA TEMPLATE 2");
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80023ec:	4a9b      	ldr	r2, [pc, #620]	; (800265c <problem_fetch+0xff8>)
 80023ee:	461d      	mov	r5, r3
 80023f0:	4614      	mov	r4, r2
 80023f2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80023f4:	6028      	str	r0, [r5, #0]
 80023f6:	6069      	str	r1, [r5, #4]
 80023f8:	60aa      	str	r2, [r5, #8]
 80023fa:	60eb      	str	r3, [r5, #12]
 80023fc:	7823      	ldrb	r3, [r4, #0]
 80023fe:	742b      	strb	r3, [r5, #16]
			strcpy(p->grade,"6B+");
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8002406:	4a96      	ldr	r2, [pc, #600]	; (8002660 <problem_fetch+0xffc>)
 8002408:	6810      	ldr	r0, [r2, #0]
 800240a:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	2207      	movs	r2, #7
 8002410:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,K,I,J,G,I,G");
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	33a4      	adds	r3, #164	; 0xa4
 8002416:	4a93      	ldr	r2, [pc, #588]	; (8002664 <problem_fetch+0x1000>)
 8002418:	461c      	mov	r4, r3
 800241a:	4613      	mov	r3, r2
 800241c:	cb07      	ldmia	r3!, {r0, r1, r2}
 800241e:	6020      	str	r0, [r4, #0]
 8002420:	6061      	str	r1, [r4, #4]
 8002422:	60a2      	str	r2, [r4, #8]
 8002424:	881b      	ldrh	r3, [r3, #0]
 8002426:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"6,9,9,13,14,18,4");
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	3304      	adds	r3, #4
 800242c:	4a8e      	ldr	r2, [pc, #568]	; (8002668 <problem_fetch+0x1004>)
 800242e:	461d      	mov	r5, r3
 8002430:	4614      	mov	r4, r2
 8002432:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002434:	6028      	str	r0, [r5, #0]
 8002436:	6069      	str	r1, [r5, #4]
 8002438:	60aa      	str	r2, [r5, #8]
 800243a:	60eb      	str	r3, [r5, #12]
 800243c:	7823      	ldrb	r3, [r4, #0]
 800243e:	742b      	strb	r3, [r5, #16]
			strcpy(p->startFinish,"s,d,d,d,d,e,s");
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8002446:	4a89      	ldr	r2, [pc, #548]	; (800266c <problem_fetch+0x1008>)
 8002448:	461c      	mov	r4, r3
 800244a:	4613      	mov	r3, r2
 800244c:	cb07      	ldmia	r3!, {r0, r1, r2}
 800244e:	6020      	str	r0, [r4, #0]
 8002450:	6061      	str	r1, [r4, #4]
 8002452:	60a2      	str	r2, [r4, #8]
 8002454:	881b      	ldrh	r3, [r3, #0]
 8002456:	81a3      	strh	r3, [r4, #12]
			break;
 8002458:	f01a b834 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 3 :
			strcpy(p->name,"BATTLE OF THE PUDGE SHORT");
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8002462:	4a83      	ldr	r2, [pc, #524]	; (8002670 <problem_fetch+0x100c>)
 8002464:	461d      	mov	r5, r3
 8002466:	4614      	mov	r4, r2
 8002468:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800246a:	6028      	str	r0, [r5, #0]
 800246c:	6069      	str	r1, [r5, #4]
 800246e:	60aa      	str	r2, [r5, #8]
 8002470:	60eb      	str	r3, [r5, #12]
 8002472:	cc03      	ldmia	r4!, {r0, r1}
 8002474:	6128      	str	r0, [r5, #16]
 8002476:	6169      	str	r1, [r5, #20]
 8002478:	8823      	ldrh	r3, [r4, #0]
 800247a:	832b      	strh	r3, [r5, #24]
			strcpy(p->grade,"7A");
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8002482:	4a72      	ldr	r2, [pc, #456]	; (800264c <problem_fetch+0xfe8>)
 8002484:	8811      	ldrh	r1, [r2, #0]
 8002486:	7892      	ldrb	r2, [r2, #2]
 8002488:	8019      	strh	r1, [r3, #0]
 800248a:	709a      	strb	r2, [r3, #2]
			p->moveSize = 7;
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	2207      	movs	r2, #7
 8002490:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"C,H,E,I,D,D,D");
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	33a4      	adds	r3, #164	; 0xa4
 8002496:	4a77      	ldr	r2, [pc, #476]	; (8002674 <problem_fetch+0x1010>)
 8002498:	461c      	mov	r4, r3
 800249a:	4613      	mov	r3, r2
 800249c:	cb07      	ldmia	r3!, {r0, r1, r2}
 800249e:	6020      	str	r0, [r4, #0]
 80024a0:	6061      	str	r1, [r4, #4]
 80024a2:	60a2      	str	r2, [r4, #8]
 80024a4:	881b      	ldrh	r3, [r3, #0]
 80024a6:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,5,8,10,11,15,18");
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	3304      	adds	r3, #4
 80024ac:	4a72      	ldr	r2, [pc, #456]	; (8002678 <problem_fetch+0x1014>)
 80024ae:	461d      	mov	r5, r3
 80024b0:	4614      	mov	r4, r2
 80024b2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80024b4:	6028      	str	r0, [r5, #0]
 80024b6:	6069      	str	r1, [r5, #4]
 80024b8:	60aa      	str	r2, [r5, #8]
 80024ba:	60eb      	str	r3, [r5, #12]
 80024bc:	8823      	ldrh	r3, [r4, #0]
 80024be:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,s,d,d,d,d,e");
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 80024c6:	4a6d      	ldr	r2, [pc, #436]	; (800267c <problem_fetch+0x1018>)
 80024c8:	461c      	mov	r4, r3
 80024ca:	4613      	mov	r3, r2
 80024cc:	cb07      	ldmia	r3!, {r0, r1, r2}
 80024ce:	6020      	str	r0, [r4, #0]
 80024d0:	6061      	str	r1, [r4, #4]
 80024d2:	60a2      	str	r2, [r4, #8]
 80024d4:	881b      	ldrh	r3, [r3, #0]
 80024d6:	81a3      	strh	r3, [r4, #12]
			break;
 80024d8:	f019 bff4 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 4 :
			strcpy(p->name,"BLACK PSYCHO");
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80024e2:	4a67      	ldr	r2, [pc, #412]	; (8002680 <problem_fetch+0x101c>)
 80024e4:	461c      	mov	r4, r3
 80024e6:	4613      	mov	r3, r2
 80024e8:	cb07      	ldmia	r3!, {r0, r1, r2}
 80024ea:	6020      	str	r0, [r4, #0]
 80024ec:	6061      	str	r1, [r4, #4]
 80024ee:	60a2      	str	r2, [r4, #8]
 80024f0:	781b      	ldrb	r3, [r3, #0]
 80024f2:	7323      	strb	r3, [r4, #12]
			strcpy(p->grade,"6C+");
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80024fa:	4a62      	ldr	r2, [pc, #392]	; (8002684 <problem_fetch+0x1020>)
 80024fc:	6810      	ldr	r0, [r2, #0]
 80024fe:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	2206      	movs	r2, #6
 8002504:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,C,H,D,G,D");
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	33a4      	adds	r3, #164	; 0xa4
 800250a:	4a5f      	ldr	r2, [pc, #380]	; (8002688 <problem_fetch+0x1024>)
 800250c:	461c      	mov	r4, r3
 800250e:	4613      	mov	r3, r2
 8002510:	cb07      	ldmia	r3!, {r0, r1, r2}
 8002512:	6020      	str	r0, [r4, #0]
 8002514:	6061      	str	r1, [r4, #4]
 8002516:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,5,8,11,14,18");
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	3304      	adds	r3, #4
 800251c:	4a5b      	ldr	r2, [pc, #364]	; (800268c <problem_fetch+0x1028>)
 800251e:	461c      	mov	r4, r3
 8002520:	4613      	mov	r3, r2
 8002522:	cb07      	ldmia	r3!, {r0, r1, r2}
 8002524:	6020      	str	r0, [r4, #0]
 8002526:	6061      	str	r1, [r4, #4]
 8002528:	60a2      	str	r2, [r4, #8]
 800252a:	881a      	ldrh	r2, [r3, #0]
 800252c:	789b      	ldrb	r3, [r3, #2]
 800252e:	81a2      	strh	r2, [r4, #12]
 8002530:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish,"s,s,d,d,d,e");
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8002538:	4a47      	ldr	r2, [pc, #284]	; (8002658 <problem_fetch+0xff4>)
 800253a:	461c      	mov	r4, r3
 800253c:	4613      	mov	r3, r2
 800253e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8002540:	6020      	str	r0, [r4, #0]
 8002542:	6061      	str	r1, [r4, #4]
 8002544:	60a2      	str	r2, [r4, #8]
			break;
 8002546:	f019 bfbd 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 5 :
			strcpy(p->name,"TRIAL ‘N’ ERROR");
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8002550:	4a4f      	ldr	r2, [pc, #316]	; (8002690 <problem_fetch+0x102c>)
 8002552:	461d      	mov	r5, r3
 8002554:	4614      	mov	r4, r2
 8002556:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002558:	6028      	str	r0, [r5, #0]
 800255a:	6069      	str	r1, [r5, #4]
 800255c:	60aa      	str	r2, [r5, #8]
 800255e:	60eb      	str	r3, [r5, #12]
 8002560:	6820      	ldr	r0, [r4, #0]
 8002562:	6128      	str	r0, [r5, #16]
			strcpy(p->grade,"6C");
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800256a:	4a4a      	ldr	r2, [pc, #296]	; (8002694 <problem_fetch+0x1030>)
 800256c:	8811      	ldrh	r1, [r2, #0]
 800256e:	7892      	ldrb	r2, [r2, #2]
 8002570:	8019      	strh	r1, [r3, #0]
 8002572:	709a      	strb	r2, [r3, #2]
			p->moveSize = 7;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	2207      	movs	r2, #7
 8002578:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,B,E,G,E,J,D");
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	33a4      	adds	r3, #164	; 0xa4
 800257e:	4a46      	ldr	r2, [pc, #280]	; (8002698 <problem_fetch+0x1034>)
 8002580:	461c      	mov	r4, r3
 8002582:	4613      	mov	r3, r2
 8002584:	cb07      	ldmia	r3!, {r0, r1, r2}
 8002586:	6020      	str	r0, [r4, #0]
 8002588:	6061      	str	r1, [r4, #4]
 800258a:	60a2      	str	r2, [r4, #8]
 800258c:	881b      	ldrh	r3, [r3, #0]
 800258e:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"6,6,9,10,14,16,18");
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	3304      	adds	r3, #4
 8002594:	4a41      	ldr	r2, [pc, #260]	; (800269c <problem_fetch+0x1038>)
 8002596:	461d      	mov	r5, r3
 8002598:	4614      	mov	r4, r2
 800259a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800259c:	6028      	str	r0, [r5, #0]
 800259e:	6069      	str	r1, [r5, #4]
 80025a0:	60aa      	str	r2, [r5, #8]
 80025a2:	60eb      	str	r3, [r5, #12]
 80025a4:	8823      	ldrh	r3, [r4, #0]
 80025a6:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,s,d,d,d,d,e");
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 80025ae:	4a33      	ldr	r2, [pc, #204]	; (800267c <problem_fetch+0x1018>)
 80025b0:	461c      	mov	r4, r3
 80025b2:	4613      	mov	r3, r2
 80025b4:	cb07      	ldmia	r3!, {r0, r1, r2}
 80025b6:	6020      	str	r0, [r4, #0]
 80025b8:	6061      	str	r1, [r4, #4]
 80025ba:	60a2      	str	r2, [r4, #8]
 80025bc:	881b      	ldrh	r3, [r3, #0]
 80025be:	81a3      	strh	r3, [r4, #12]
			break;
 80025c0:	f019 bf80 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 6 :
			strcpy(p->name,"1985-54");
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80025ca:	4935      	ldr	r1, [pc, #212]	; (80026a0 <problem_fetch+0x103c>)
 80025cc:	461a      	mov	r2, r3
 80025ce:	460b      	mov	r3, r1
 80025d0:	cb03      	ldmia	r3!, {r0, r1}
 80025d2:	6010      	str	r0, [r2, #0]
 80025d4:	6051      	str	r1, [r2, #4]
			strcpy(p->grade,"6B+");
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80025dc:	4a20      	ldr	r2, [pc, #128]	; (8002660 <problem_fetch+0xffc>)
 80025de:	6810      	ldr	r0, [r2, #0]
 80025e0:	6018      	str	r0, [r3, #0]
			p->moveSize = 8;
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	2208      	movs	r2, #8
 80025e6:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"E,H,I,H,J,G,H,D");
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	33a4      	adds	r3, #164	; 0xa4
 80025ec:	4a2d      	ldr	r2, [pc, #180]	; (80026a4 <problem_fetch+0x1040>)
 80025ee:	461c      	mov	r4, r3
 80025f0:	4615      	mov	r5, r2
 80025f2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80025f4:	6020      	str	r0, [r4, #0]
 80025f6:	6061      	str	r1, [r4, #4]
 80025f8:	60a2      	str	r2, [r4, #8]
 80025fa:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"6,5,10,10,13,15,16,18");
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	3304      	adds	r3, #4
 8002600:	4a29      	ldr	r2, [pc, #164]	; (80026a8 <problem_fetch+0x1044>)
 8002602:	461d      	mov	r5, r3
 8002604:	4614      	mov	r4, r2
 8002606:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002608:	6028      	str	r0, [r5, #0]
 800260a:	6069      	str	r1, [r5, #4]
 800260c:	60aa      	str	r2, [r5, #8]
 800260e:	60eb      	str	r3, [r5, #12]
 8002610:	6820      	ldr	r0, [r4, #0]
 8002612:	6128      	str	r0, [r5, #16]
 8002614:	88a3      	ldrh	r3, [r4, #4]
 8002616:	82ab      	strh	r3, [r5, #20]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,e");
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800261e:	4a23      	ldr	r2, [pc, #140]	; (80026ac <problem_fetch+0x1048>)
 8002620:	461c      	mov	r4, r3
 8002622:	4615      	mov	r5, r2
 8002624:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002626:	6020      	str	r0, [r4, #0]
 8002628:	6061      	str	r1, [r4, #4]
 800262a:	60a2      	str	r2, [r4, #8]
 800262c:	60e3      	str	r3, [r4, #12]
			break;
 800262e:	f019 bf49 	b.w	801c4c4 <problem_fetch+0x1ae60>
 8002632:	bf00      	nop
 8002634:	08023980 	.word	0x08023980
 8002638:	08023988 	.word	0x08023988
 800263c:	0802398c 	.word	0x0802398c
 8002640:	080239f0 	.word	0x080239f0
 8002644:	08023a78 	.word	0x08023a78
 8002648:	08023adc 	.word	0x08023adc
 800264c:	08023ae4 	.word	0x08023ae4
 8002650:	08023ae8 	.word	0x08023ae8
 8002654:	08023af4 	.word	0x08023af4
 8002658:	08023b04 	.word	0x08023b04
 800265c:	08023b10 	.word	0x08023b10
 8002660:	08023b24 	.word	0x08023b24
 8002664:	08023b28 	.word	0x08023b28
 8002668:	08023b38 	.word	0x08023b38
 800266c:	08023b4c 	.word	0x08023b4c
 8002670:	08023b5c 	.word	0x08023b5c
 8002674:	08023b78 	.word	0x08023b78
 8002678:	08023b88 	.word	0x08023b88
 800267c:	08023b9c 	.word	0x08023b9c
 8002680:	08023bac 	.word	0x08023bac
 8002684:	08023bbc 	.word	0x08023bbc
 8002688:	08023bc0 	.word	0x08023bc0
 800268c:	08023bcc 	.word	0x08023bcc
 8002690:	08023bdc 	.word	0x08023bdc
 8002694:	08023bf0 	.word	0x08023bf0
 8002698:	08023bf4 	.word	0x08023bf4
 800269c:	08023c04 	.word	0x08023c04
 80026a0:	08023c18 	.word	0x08023c18
 80026a4:	08023c20 	.word	0x08023c20
 80026a8:	08023c30 	.word	0x08023c30
 80026ac:	08023c48 	.word	0x08023c48
		case 7 :
			strcpy(p->name,"PANTHER");
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80026b6:	49ab      	ldr	r1, [pc, #684]	; (8002964 <problem_fetch+0x1300>)
 80026b8:	461a      	mov	r2, r3
 80026ba:	460b      	mov	r3, r1
 80026bc:	cb03      	ldmia	r3!, {r0, r1}
 80026be:	6010      	str	r0, [r2, #0]
 80026c0:	6051      	str	r1, [r2, #4]
			strcpy(p->grade,"7B+");
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80026c8:	4aa7      	ldr	r2, [pc, #668]	; (8002968 <problem_fetch+0x1304>)
 80026ca:	6810      	ldr	r0, [r2, #0]
 80026cc:	6018      	str	r0, [r3, #0]
			p->moveSize = 4;
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	2204      	movs	r2, #4
 80026d2:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"E,G,G,I");
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	33a4      	adds	r3, #164	; 0xa4
 80026d8:	49a4      	ldr	r1, [pc, #656]	; (800296c <problem_fetch+0x1308>)
 80026da:	461a      	mov	r2, r3
 80026dc:	460b      	mov	r3, r1
 80026de:	cb03      	ldmia	r3!, {r0, r1}
 80026e0:	6010      	str	r0, [r2, #0]
 80026e2:	6051      	str	r1, [r2, #4]
			strcpy(p->moveNumbers,"6,10,14,18");
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	3304      	adds	r3, #4
 80026e8:	49a1      	ldr	r1, [pc, #644]	; (8002970 <problem_fetch+0x130c>)
 80026ea:	461a      	mov	r2, r3
 80026ec:	460b      	mov	r3, r1
 80026ee:	cb03      	ldmia	r3!, {r0, r1}
 80026f0:	6010      	str	r0, [r2, #0]
 80026f2:	6051      	str	r1, [r2, #4]
 80026f4:	8819      	ldrh	r1, [r3, #0]
 80026f6:	789b      	ldrb	r3, [r3, #2]
 80026f8:	8111      	strh	r1, [r2, #8]
 80026fa:	7293      	strb	r3, [r2, #10]
			strcpy(p->startFinish,"s,d,d,e");
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8002702:	499c      	ldr	r1, [pc, #624]	; (8002974 <problem_fetch+0x1310>)
 8002704:	461a      	mov	r2, r3
 8002706:	460b      	mov	r3, r1
 8002708:	cb03      	ldmia	r3!, {r0, r1}
 800270a:	6010      	str	r0, [r2, #0]
 800270c:	6051      	str	r1, [r2, #4]
			break;
 800270e:	f019 bed9 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 8 :
			strcpy(p->name,"CHOSS 7");
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8002718:	4997      	ldr	r1, [pc, #604]	; (8002978 <problem_fetch+0x1314>)
 800271a:	461a      	mov	r2, r3
 800271c:	460b      	mov	r3, r1
 800271e:	cb03      	ldmia	r3!, {r0, r1}
 8002720:	6010      	str	r0, [r2, #0]
 8002722:	6051      	str	r1, [r2, #4]
			strcpy(p->grade,"7A");
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800272a:	4a94      	ldr	r2, [pc, #592]	; (800297c <problem_fetch+0x1318>)
 800272c:	8811      	ldrh	r1, [r2, #0]
 800272e:	7892      	ldrb	r2, [r2, #2]
 8002730:	8019      	strh	r1, [r3, #0]
 8002732:	709a      	strb	r2, [r3, #2]
			p->moveSize = 7;
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	2207      	movs	r2, #7
 8002738:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,H,G,C,E,A,D");
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	33a4      	adds	r3, #164	; 0xa4
 800273e:	4a90      	ldr	r2, [pc, #576]	; (8002980 <problem_fetch+0x131c>)
 8002740:	461c      	mov	r4, r3
 8002742:	4613      	mov	r3, r2
 8002744:	cb07      	ldmia	r3!, {r0, r1, r2}
 8002746:	6020      	str	r0, [r4, #0]
 8002748:	6061      	str	r1, [r4, #4]
 800274a:	60a2      	str	r2, [r4, #8]
 800274c:	881b      	ldrh	r3, [r3, #0]
 800274e:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,8,9,8,12,14,18");
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	3304      	adds	r3, #4
 8002754:	4a8b      	ldr	r2, [pc, #556]	; (8002984 <problem_fetch+0x1320>)
 8002756:	461d      	mov	r5, r3
 8002758:	4614      	mov	r4, r2
 800275a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800275c:	6028      	str	r0, [r5, #0]
 800275e:	6069      	str	r1, [r5, #4]
 8002760:	60aa      	str	r2, [r5, #8]
 8002762:	60eb      	str	r3, [r5, #12]
 8002764:	7823      	ldrb	r3, [r4, #0]
 8002766:	742b      	strb	r3, [r5, #16]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800276e:	4a86      	ldr	r2, [pc, #536]	; (8002988 <problem_fetch+0x1324>)
 8002770:	461c      	mov	r4, r3
 8002772:	4613      	mov	r3, r2
 8002774:	cb07      	ldmia	r3!, {r0, r1, r2}
 8002776:	6020      	str	r0, [r4, #0]
 8002778:	6061      	str	r1, [r4, #4]
 800277a:	60a2      	str	r2, [r4, #8]
 800277c:	881b      	ldrh	r3, [r3, #0]
 800277e:	81a3      	strh	r3, [r4, #12]
			break;
 8002780:	f019 bea0 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 9 :
			strcpy(p->name,"ASHES");
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800278a:	4a80      	ldr	r2, [pc, #512]	; (800298c <problem_fetch+0x1328>)
 800278c:	6810      	ldr	r0, [r2, #0]
 800278e:	6018      	str	r0, [r3, #0]
 8002790:	8892      	ldrh	r2, [r2, #4]
 8002792:	809a      	strh	r2, [r3, #4]
			strcpy(p->grade,"7A+");
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800279a:	4a7d      	ldr	r2, [pc, #500]	; (8002990 <problem_fetch+0x132c>)
 800279c:	6810      	ldr	r0, [r2, #0]
 800279e:	6018      	str	r0, [r3, #0]
			p->moveSize = 9;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	2209      	movs	r2, #9
 80027a4:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"H,G,C,B,E,E,I,J,D");
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	33a4      	adds	r3, #164	; 0xa4
 80027aa:	4a7a      	ldr	r2, [pc, #488]	; (8002994 <problem_fetch+0x1330>)
 80027ac:	461d      	mov	r5, r3
 80027ae:	4614      	mov	r4, r2
 80027b0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80027b2:	6028      	str	r0, [r5, #0]
 80027b4:	6069      	str	r1, [r5, #4]
 80027b6:	60aa      	str	r2, [r5, #8]
 80027b8:	60eb      	str	r3, [r5, #12]
 80027ba:	8823      	ldrh	r3, [r4, #0]
 80027bc:	822b      	strh	r3, [r5, #16]
			strcpy(p->moveNumbers,"5,6,5,10,14,16,18,13,7");
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	3304      	adds	r3, #4
 80027c2:	4a75      	ldr	r2, [pc, #468]	; (8002998 <problem_fetch+0x1334>)
 80027c4:	461c      	mov	r4, r3
 80027c6:	4615      	mov	r5, r2
 80027c8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80027ca:	6020      	str	r0, [r4, #0]
 80027cc:	6061      	str	r1, [r4, #4]
 80027ce:	60a2      	str	r2, [r4, #8]
 80027d0:	60e3      	str	r3, [r4, #12]
 80027d2:	6828      	ldr	r0, [r5, #0]
 80027d4:	6120      	str	r0, [r4, #16]
 80027d6:	88ab      	ldrh	r3, [r5, #4]
 80027d8:	79aa      	ldrb	r2, [r5, #6]
 80027da:	82a3      	strh	r3, [r4, #20]
 80027dc:	4613      	mov	r3, r2
 80027de:	75a3      	strb	r3, [r4, #22]
			strcpy(p->startFinish,"s,d,d,d,d,d,e,d,d");
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 80027e6:	4a6d      	ldr	r2, [pc, #436]	; (800299c <problem_fetch+0x1338>)
 80027e8:	461d      	mov	r5, r3
 80027ea:	4614      	mov	r4, r2
 80027ec:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80027ee:	6028      	str	r0, [r5, #0]
 80027f0:	6069      	str	r1, [r5, #4]
 80027f2:	60aa      	str	r2, [r5, #8]
 80027f4:	60eb      	str	r3, [r5, #12]
 80027f6:	8823      	ldrh	r3, [r4, #0]
 80027f8:	822b      	strh	r3, [r5, #16]
			break;
 80027fa:	f019 be63 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 10 :
			strcpy(p->name,"BURNED");
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8002804:	4a66      	ldr	r2, [pc, #408]	; (80029a0 <problem_fetch+0x133c>)
 8002806:	6810      	ldr	r0, [r2, #0]
 8002808:	6018      	str	r0, [r3, #0]
 800280a:	8891      	ldrh	r1, [r2, #4]
 800280c:	7992      	ldrb	r2, [r2, #6]
 800280e:	8099      	strh	r1, [r3, #4]
 8002810:	719a      	strb	r2, [r3, #6]
			strcpy(p->grade,"7A");
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8002818:	4a58      	ldr	r2, [pc, #352]	; (800297c <problem_fetch+0x1318>)
 800281a:	8811      	ldrh	r1, [r2, #0]
 800281c:	7892      	ldrb	r2, [r2, #2]
 800281e:	8019      	strh	r1, [r3, #0]
 8002820:	709a      	strb	r2, [r3, #2]
			p->moveSize = 8;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	2208      	movs	r2, #8
 8002826:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"E,H,G,J,J,G,E,I");
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	33a4      	adds	r3, #164	; 0xa4
 800282c:	4a5d      	ldr	r2, [pc, #372]	; (80029a4 <problem_fetch+0x1340>)
 800282e:	461c      	mov	r4, r3
 8002830:	4615      	mov	r5, r2
 8002832:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002834:	6020      	str	r0, [r4, #0]
 8002836:	6061      	str	r1, [r4, #4]
 8002838:	60a2      	str	r2, [r4, #8]
 800283a:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"6,8,9,5,12,14,16,18");
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	3304      	adds	r3, #4
 8002840:	4a59      	ldr	r2, [pc, #356]	; (80029a8 <problem_fetch+0x1344>)
 8002842:	461d      	mov	r5, r3
 8002844:	4614      	mov	r4, r2
 8002846:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002848:	6028      	str	r0, [r5, #0]
 800284a:	6069      	str	r1, [r5, #4]
 800284c:	60aa      	str	r2, [r5, #8]
 800284e:	60eb      	str	r3, [r5, #12]
 8002850:	6820      	ldr	r0, [r4, #0]
 8002852:	6128      	str	r0, [r5, #16]
			strcpy(p->startFinish,"s,d,d,d,d,d,d,e");
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800285a:	4a54      	ldr	r2, [pc, #336]	; (80029ac <problem_fetch+0x1348>)
 800285c:	461c      	mov	r4, r3
 800285e:	4615      	mov	r5, r2
 8002860:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002862:	6020      	str	r0, [r4, #0]
 8002864:	6061      	str	r1, [r4, #4]
 8002866:	60a2      	str	r2, [r4, #8]
 8002868:	60e3      	str	r3, [r4, #12]
			break;
 800286a:	f019 be2b 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 11 :
			strcpy(p->name,"DER SCHWÄCHLING");
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8002874:	4a4e      	ldr	r2, [pc, #312]	; (80029b0 <problem_fetch+0x134c>)
 8002876:	461d      	mov	r5, r3
 8002878:	4614      	mov	r4, r2
 800287a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800287c:	6028      	str	r0, [r5, #0]
 800287e:	6069      	str	r1, [r5, #4]
 8002880:	60aa      	str	r2, [r5, #8]
 8002882:	60eb      	str	r3, [r5, #12]
 8002884:	7823      	ldrb	r3, [r4, #0]
 8002886:	742b      	strb	r3, [r5, #16]
			strcpy(p->grade,"6C");
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800288e:	4a49      	ldr	r2, [pc, #292]	; (80029b4 <problem_fetch+0x1350>)
 8002890:	8811      	ldrh	r1, [r2, #0]
 8002892:	7892      	ldrb	r2, [r2, #2]
 8002894:	8019      	strh	r1, [r3, #0]
 8002896:	709a      	strb	r2, [r3, #2]
			p->moveSize = 8;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	2208      	movs	r2, #8
 800289c:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,J,K,I,J,G,G,D");
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	33a4      	adds	r3, #164	; 0xa4
 80028a2:	4a45      	ldr	r2, [pc, #276]	; (80029b8 <problem_fetch+0x1354>)
 80028a4:	461c      	mov	r4, r3
 80028a6:	4615      	mov	r5, r2
 80028a8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80028aa:	6020      	str	r0, [r4, #0]
 80028ac:	6061      	str	r1, [r4, #4]
 80028ae:	60a2      	str	r2, [r4, #8]
 80028b0:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,7,9,10,12,14,17,18");
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	3304      	adds	r3, #4
 80028b6:	4a41      	ldr	r2, [pc, #260]	; (80029bc <problem_fetch+0x1358>)
 80028b8:	461d      	mov	r5, r3
 80028ba:	4614      	mov	r4, r2
 80028bc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80028be:	6028      	str	r0, [r5, #0]
 80028c0:	6069      	str	r1, [r5, #4]
 80028c2:	60aa      	str	r2, [r5, #8]
 80028c4:	60eb      	str	r3, [r5, #12]
 80028c6:	6820      	ldr	r0, [r4, #0]
 80028c8:	6128      	str	r0, [r5, #16]
 80028ca:	7923      	ldrb	r3, [r4, #4]
 80028cc:	752b      	strb	r3, [r5, #20]
			strcpy(p->startFinish,"s,d,d,d,d,d,d,e");
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 80028d4:	4a35      	ldr	r2, [pc, #212]	; (80029ac <problem_fetch+0x1348>)
 80028d6:	461c      	mov	r4, r3
 80028d8:	4615      	mov	r5, r2
 80028da:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80028dc:	6020      	str	r0, [r4, #0]
 80028de:	6061      	str	r1, [r4, #4]
 80028e0:	60a2      	str	r2, [r4, #8]
 80028e2:	60e3      	str	r3, [r4, #12]
			break;
 80028e4:	f019 bdee 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 12 :
			strcpy(p->name,"CAMPUSING WITH A BACKPACK");
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80028ee:	4a34      	ldr	r2, [pc, #208]	; (80029c0 <problem_fetch+0x135c>)
 80028f0:	461d      	mov	r5, r3
 80028f2:	4614      	mov	r4, r2
 80028f4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80028f6:	6028      	str	r0, [r5, #0]
 80028f8:	6069      	str	r1, [r5, #4]
 80028fa:	60aa      	str	r2, [r5, #8]
 80028fc:	60eb      	str	r3, [r5, #12]
 80028fe:	cc03      	ldmia	r4!, {r0, r1}
 8002900:	6128      	str	r0, [r5, #16]
 8002902:	6169      	str	r1, [r5, #20]
 8002904:	8823      	ldrh	r3, [r4, #0]
 8002906:	832b      	strh	r3, [r5, #24]
			strcpy(p->grade,"6B+");
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800290e:	4a2d      	ldr	r2, [pc, #180]	; (80029c4 <problem_fetch+0x1360>)
 8002910:	6810      	ldr	r0, [r2, #0]
 8002912:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	2207      	movs	r2, #7
 8002918:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"H,J,E,H,C,D,D");
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	33a4      	adds	r3, #164	; 0xa4
 800291e:	4a2a      	ldr	r2, [pc, #168]	; (80029c8 <problem_fetch+0x1364>)
 8002920:	461c      	mov	r4, r3
 8002922:	4613      	mov	r3, r2
 8002924:	cb07      	ldmia	r3!, {r0, r1, r2}
 8002926:	6020      	str	r0, [r4, #0]
 8002928:	6061      	str	r1, [r4, #4]
 800292a:	60a2      	str	r2, [r4, #8]
 800292c:	881b      	ldrh	r3, [r3, #0]
 800292e:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,5,8,10,13,15,18");
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	3304      	adds	r3, #4
 8002934:	4a25      	ldr	r2, [pc, #148]	; (80029cc <problem_fetch+0x1368>)
 8002936:	461d      	mov	r5, r3
 8002938:	4614      	mov	r4, r2
 800293a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800293c:	6028      	str	r0, [r5, #0]
 800293e:	6069      	str	r1, [r5, #4]
 8002940:	60aa      	str	r2, [r5, #8]
 8002942:	60eb      	str	r3, [r5, #12]
 8002944:	8823      	ldrh	r3, [r4, #0]
 8002946:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,s,d,d,d,d,e");
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800294e:	4a20      	ldr	r2, [pc, #128]	; (80029d0 <problem_fetch+0x136c>)
 8002950:	461c      	mov	r4, r3
 8002952:	4613      	mov	r3, r2
 8002954:	cb07      	ldmia	r3!, {r0, r1, r2}
 8002956:	6020      	str	r0, [r4, #0]
 8002958:	6061      	str	r1, [r4, #4]
 800295a:	60a2      	str	r2, [r4, #8]
 800295c:	881b      	ldrh	r3, [r3, #0]
 800295e:	81a3      	strh	r3, [r4, #12]
			break;
 8002960:	f019 bdb0 	b.w	801c4c4 <problem_fetch+0x1ae60>
 8002964:	08023c58 	.word	0x08023c58
 8002968:	08023c60 	.word	0x08023c60
 800296c:	08023c64 	.word	0x08023c64
 8002970:	08023c6c 	.word	0x08023c6c
 8002974:	08023c78 	.word	0x08023c78
 8002978:	08023c80 	.word	0x08023c80
 800297c:	08023ae4 	.word	0x08023ae4
 8002980:	08023c88 	.word	0x08023c88
 8002984:	08023c98 	.word	0x08023c98
 8002988:	08023cac 	.word	0x08023cac
 800298c:	08023cbc 	.word	0x08023cbc
 8002990:	08023cc4 	.word	0x08023cc4
 8002994:	08023cc8 	.word	0x08023cc8
 8002998:	08023cdc 	.word	0x08023cdc
 800299c:	08023cf4 	.word	0x08023cf4
 80029a0:	08023d08 	.word	0x08023d08
 80029a4:	08023d10 	.word	0x08023d10
 80029a8:	08023d20 	.word	0x08023d20
 80029ac:	08023d34 	.word	0x08023d34
 80029b0:	08023d44 	.word	0x08023d44
 80029b4:	08023bf0 	.word	0x08023bf0
 80029b8:	08023d58 	.word	0x08023d58
 80029bc:	08023d68 	.word	0x08023d68
 80029c0:	08023d80 	.word	0x08023d80
 80029c4:	08023b24 	.word	0x08023b24
 80029c8:	08023d9c 	.word	0x08023d9c
 80029cc:	08023dac 	.word	0x08023dac
 80029d0:	08023b9c 	.word	0x08023b9c
		case 13 :
			strcpy(p->name,"DEAD FISH");
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80029da:	49bf      	ldr	r1, [pc, #764]	; (8002cd8 <problem_fetch+0x1674>)
 80029dc:	461a      	mov	r2, r3
 80029de:	460b      	mov	r3, r1
 80029e0:	cb03      	ldmia	r3!, {r0, r1}
 80029e2:	6010      	str	r0, [r2, #0]
 80029e4:	6051      	str	r1, [r2, #4]
 80029e6:	881b      	ldrh	r3, [r3, #0]
 80029e8:	8113      	strh	r3, [r2, #8]
			strcpy(p->grade,"6C+");
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80029f0:	4aba      	ldr	r2, [pc, #744]	; (8002cdc <problem_fetch+0x1678>)
 80029f2:	6810      	ldr	r0, [r2, #0]
 80029f4:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	2207      	movs	r2, #7
 80029fa:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,E,G,F,I,E,D");
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	33a4      	adds	r3, #164	; 0xa4
 8002a00:	4ab7      	ldr	r2, [pc, #732]	; (8002ce0 <problem_fetch+0x167c>)
 8002a02:	461c      	mov	r4, r3
 8002a04:	4613      	mov	r3, r2
 8002a06:	cb07      	ldmia	r3!, {r0, r1, r2}
 8002a08:	6020      	str	r0, [r4, #0]
 8002a0a:	6061      	str	r1, [r4, #4]
 8002a0c:	60a2      	str	r2, [r4, #8]
 8002a0e:	881b      	ldrh	r3, [r3, #0]
 8002a10:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,6,9,11,14,16,18");
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	3304      	adds	r3, #4
 8002a16:	4ab3      	ldr	r2, [pc, #716]	; (8002ce4 <problem_fetch+0x1680>)
 8002a18:	461d      	mov	r5, r3
 8002a1a:	4614      	mov	r4, r2
 8002a1c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002a1e:	6028      	str	r0, [r5, #0]
 8002a20:	6069      	str	r1, [r5, #4]
 8002a22:	60aa      	str	r2, [r5, #8]
 8002a24:	60eb      	str	r3, [r5, #12]
 8002a26:	8823      	ldrh	r3, [r4, #0]
 8002a28:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,s,d,d,d,d,e");
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8002a30:	4aad      	ldr	r2, [pc, #692]	; (8002ce8 <problem_fetch+0x1684>)
 8002a32:	461c      	mov	r4, r3
 8002a34:	4613      	mov	r3, r2
 8002a36:	cb07      	ldmia	r3!, {r0, r1, r2}
 8002a38:	6020      	str	r0, [r4, #0]
 8002a3a:	6061      	str	r1, [r4, #4]
 8002a3c:	60a2      	str	r2, [r4, #8]
 8002a3e:	881b      	ldrh	r3, [r3, #0]
 8002a40:	81a3      	strh	r3, [r4, #12]
			break;
 8002a42:	f019 bd3f 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 14 :
			strcpy(p->name,"SUSHI ROLL");
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8002a4c:	49a7      	ldr	r1, [pc, #668]	; (8002cec <problem_fetch+0x1688>)
 8002a4e:	461a      	mov	r2, r3
 8002a50:	460b      	mov	r3, r1
 8002a52:	cb03      	ldmia	r3!, {r0, r1}
 8002a54:	6010      	str	r0, [r2, #0]
 8002a56:	6051      	str	r1, [r2, #4]
 8002a58:	8819      	ldrh	r1, [r3, #0]
 8002a5a:	789b      	ldrb	r3, [r3, #2]
 8002a5c:	8111      	strh	r1, [r2, #8]
 8002a5e:	7293      	strb	r3, [r2, #10]
			strcpy(p->grade,"6B+");
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8002a66:	4aa2      	ldr	r2, [pc, #648]	; (8002cf0 <problem_fetch+0x168c>)
 8002a68:	6810      	ldr	r0, [r2, #0]
 8002a6a:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	2207      	movs	r2, #7
 8002a70:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,J,H,C,D,A,D");
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	33a4      	adds	r3, #164	; 0xa4
 8002a76:	4a9f      	ldr	r2, [pc, #636]	; (8002cf4 <problem_fetch+0x1690>)
 8002a78:	461c      	mov	r4, r3
 8002a7a:	4613      	mov	r3, r2
 8002a7c:	cb07      	ldmia	r3!, {r0, r1, r2}
 8002a7e:	6020      	str	r0, [r4, #0]
 8002a80:	6061      	str	r1, [r4, #4]
 8002a82:	60a2      	str	r2, [r4, #8]
 8002a84:	881b      	ldrh	r3, [r3, #0]
 8002a86:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"6,5,10,13,18,18,15");
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	3304      	adds	r3, #4
 8002a8c:	4a9a      	ldr	r2, [pc, #616]	; (8002cf8 <problem_fetch+0x1694>)
 8002a8e:	461d      	mov	r5, r3
 8002a90:	4614      	mov	r4, r2
 8002a92:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002a94:	6028      	str	r0, [r5, #0]
 8002a96:	6069      	str	r1, [r5, #4]
 8002a98:	60aa      	str	r2, [r5, #8]
 8002a9a:	60eb      	str	r3, [r5, #12]
 8002a9c:	8823      	ldrh	r3, [r4, #0]
 8002a9e:	78a2      	ldrb	r2, [r4, #2]
 8002aa0:	822b      	strh	r3, [r5, #16]
 8002aa2:	4613      	mov	r3, r2
 8002aa4:	74ab      	strb	r3, [r5, #18]
			strcpy(p->startFinish,"s,s,d,d,e,e,d");
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8002aac:	4a93      	ldr	r2, [pc, #588]	; (8002cfc <problem_fetch+0x1698>)
 8002aae:	461c      	mov	r4, r3
 8002ab0:	4613      	mov	r3, r2
 8002ab2:	cb07      	ldmia	r3!, {r0, r1, r2}
 8002ab4:	6020      	str	r0, [r4, #0]
 8002ab6:	6061      	str	r1, [r4, #4]
 8002ab8:	60a2      	str	r2, [r4, #8]
 8002aba:	881b      	ldrh	r3, [r3, #0]
 8002abc:	81a3      	strh	r3, [r4, #12]
			break;
 8002abe:	f019 bd01 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 15 :
			strcpy(p->name,"INTERNAL ROTATION");
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8002ac8:	4a8d      	ldr	r2, [pc, #564]	; (8002d00 <problem_fetch+0x169c>)
 8002aca:	461d      	mov	r5, r3
 8002acc:	4614      	mov	r4, r2
 8002ace:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002ad0:	6028      	str	r0, [r5, #0]
 8002ad2:	6069      	str	r1, [r5, #4]
 8002ad4:	60aa      	str	r2, [r5, #8]
 8002ad6:	60eb      	str	r3, [r5, #12]
 8002ad8:	8823      	ldrh	r3, [r4, #0]
 8002ada:	822b      	strh	r3, [r5, #16]
			strcpy(p->grade,"7A+");
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8002ae2:	4a88      	ldr	r2, [pc, #544]	; (8002d04 <problem_fetch+0x16a0>)
 8002ae4:	6810      	ldr	r0, [r2, #0]
 8002ae6:	6018      	str	r0, [r3, #0]
			p->moveSize = 8;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	2208      	movs	r2, #8
 8002aec:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"E,E,H,H,D,G,D,C");
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	33a4      	adds	r3, #164	; 0xa4
 8002af2:	4a85      	ldr	r2, [pc, #532]	; (8002d08 <problem_fetch+0x16a4>)
 8002af4:	461c      	mov	r4, r3
 8002af6:	4615      	mov	r5, r2
 8002af8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002afa:	6020      	str	r0, [r4, #0]
 8002afc:	6061      	str	r1, [r4, #4]
 8002afe:	60a2      	str	r2, [r4, #8]
 8002b00:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"8,9,12,5,15,15,18,5");
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	3304      	adds	r3, #4
 8002b06:	4a81      	ldr	r2, [pc, #516]	; (8002d0c <problem_fetch+0x16a8>)
 8002b08:	461d      	mov	r5, r3
 8002b0a:	4614      	mov	r4, r2
 8002b0c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002b0e:	6028      	str	r0, [r5, #0]
 8002b10:	6069      	str	r1, [r5, #4]
 8002b12:	60aa      	str	r2, [r5, #8]
 8002b14:	60eb      	str	r3, [r5, #12]
 8002b16:	6820      	ldr	r0, [r4, #0]
 8002b18:	6128      	str	r0, [r5, #16]
			strcpy(p->startFinish,"d,d,d,d,d,d,e,s");
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8002b20:	4a7b      	ldr	r2, [pc, #492]	; (8002d10 <problem_fetch+0x16ac>)
 8002b22:	461c      	mov	r4, r3
 8002b24:	4615      	mov	r5, r2
 8002b26:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002b28:	6020      	str	r0, [r4, #0]
 8002b2a:	6061      	str	r1, [r4, #4]
 8002b2c:	60a2      	str	r2, [r4, #8]
 8002b2e:	60e3      	str	r3, [r4, #12]
			break;
 8002b30:	f019 bcc8 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 16 :
			strcpy(p->name,"SIM");
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8002b3a:	4a76      	ldr	r2, [pc, #472]	; (8002d14 <problem_fetch+0x16b0>)
 8002b3c:	6810      	ldr	r0, [r2, #0]
 8002b3e:	6018      	str	r0, [r3, #0]
			strcpy(p->grade,"7A+");
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8002b46:	4a6f      	ldr	r2, [pc, #444]	; (8002d04 <problem_fetch+0x16a0>)
 8002b48:	6810      	ldr	r0, [r2, #0]
 8002b4a:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	2206      	movs	r2, #6
 8002b50:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,E,I,D,E,A");
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	33a4      	adds	r3, #164	; 0xa4
 8002b56:	4a70      	ldr	r2, [pc, #448]	; (8002d18 <problem_fetch+0x16b4>)
 8002b58:	461c      	mov	r4, r3
 8002b5a:	4613      	mov	r3, r2
 8002b5c:	cb07      	ldmia	r3!, {r0, r1, r2}
 8002b5e:	6020      	str	r0, [r4, #0]
 8002b60:	6061      	str	r1, [r4, #4]
 8002b62:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,6,9,11,16,18");
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	3304      	adds	r3, #4
 8002b68:	4a6c      	ldr	r2, [pc, #432]	; (8002d1c <problem_fetch+0x16b8>)
 8002b6a:	461c      	mov	r4, r3
 8002b6c:	4613      	mov	r3, r2
 8002b6e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8002b70:	6020      	str	r0, [r4, #0]
 8002b72:	6061      	str	r1, [r4, #4]
 8002b74:	60a2      	str	r2, [r4, #8]
 8002b76:	881a      	ldrh	r2, [r3, #0]
 8002b78:	789b      	ldrb	r3, [r3, #2]
 8002b7a:	81a2      	strh	r2, [r4, #12]
 8002b7c:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish,"s,s,d,d,d,e");
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8002b84:	4a66      	ldr	r2, [pc, #408]	; (8002d20 <problem_fetch+0x16bc>)
 8002b86:	461c      	mov	r4, r3
 8002b88:	4613      	mov	r3, r2
 8002b8a:	cb07      	ldmia	r3!, {r0, r1, r2}
 8002b8c:	6020      	str	r0, [r4, #0]
 8002b8e:	6061      	str	r1, [r4, #4]
 8002b90:	60a2      	str	r2, [r4, #8]
			break;
 8002b92:	f019 bc97 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 17 :
			strcpy(p->name,"TURBO CALLA");
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8002b9c:	4a61      	ldr	r2, [pc, #388]	; (8002d24 <problem_fetch+0x16c0>)
 8002b9e:	461c      	mov	r4, r3
 8002ba0:	4613      	mov	r3, r2
 8002ba2:	cb07      	ldmia	r3!, {r0, r1, r2}
 8002ba4:	6020      	str	r0, [r4, #0]
 8002ba6:	6061      	str	r1, [r4, #4]
 8002ba8:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade,"7A");
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8002bb0:	4a5d      	ldr	r2, [pc, #372]	; (8002d28 <problem_fetch+0x16c4>)
 8002bb2:	8811      	ldrh	r1, [r2, #0]
 8002bb4:	7892      	ldrb	r2, [r2, #2]
 8002bb6:	8019      	strh	r1, [r3, #0]
 8002bb8:	709a      	strb	r2, [r3, #2]
			p->moveSize = 6;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	2206      	movs	r2, #6
 8002bbe:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,H,C,C,D,A");
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	33a4      	adds	r3, #164	; 0xa4
 8002bc4:	4a59      	ldr	r2, [pc, #356]	; (8002d2c <problem_fetch+0x16c8>)
 8002bc6:	461c      	mov	r4, r3
 8002bc8:	4613      	mov	r3, r2
 8002bca:	cb07      	ldmia	r3!, {r0, r1, r2}
 8002bcc:	6020      	str	r0, [r4, #0]
 8002bce:	6061      	str	r1, [r4, #4]
 8002bd0:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,8,8,13,15,18");
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	3304      	adds	r3, #4
 8002bd6:	4a56      	ldr	r2, [pc, #344]	; (8002d30 <problem_fetch+0x16cc>)
 8002bd8:	461c      	mov	r4, r3
 8002bda:	4613      	mov	r3, r2
 8002bdc:	cb07      	ldmia	r3!, {r0, r1, r2}
 8002bde:	6020      	str	r0, [r4, #0]
 8002be0:	6061      	str	r1, [r4, #4]
 8002be2:	60a2      	str	r2, [r4, #8]
 8002be4:	881a      	ldrh	r2, [r3, #0]
 8002be6:	789b      	ldrb	r3, [r3, #2]
 8002be8:	81a2      	strh	r2, [r4, #12]
 8002bea:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8002bf2:	4a50      	ldr	r2, [pc, #320]	; (8002d34 <problem_fetch+0x16d0>)
 8002bf4:	461c      	mov	r4, r3
 8002bf6:	4613      	mov	r3, r2
 8002bf8:	cb07      	ldmia	r3!, {r0, r1, r2}
 8002bfa:	6020      	str	r0, [r4, #0]
 8002bfc:	6061      	str	r1, [r4, #4]
 8002bfe:	60a2      	str	r2, [r4, #8]
			break;
 8002c00:	f019 bc60 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 18 :
			strcpy(p->name,"BARRET");
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8002c0a:	4a4b      	ldr	r2, [pc, #300]	; (8002d38 <problem_fetch+0x16d4>)
 8002c0c:	6810      	ldr	r0, [r2, #0]
 8002c0e:	6018      	str	r0, [r3, #0]
 8002c10:	8891      	ldrh	r1, [r2, #4]
 8002c12:	7992      	ldrb	r2, [r2, #6]
 8002c14:	8099      	strh	r1, [r3, #4]
 8002c16:	719a      	strb	r2, [r3, #6]
			strcpy(p->grade,"6C+");
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8002c1e:	4a2f      	ldr	r2, [pc, #188]	; (8002cdc <problem_fetch+0x1678>)
 8002c20:	6810      	ldr	r0, [r2, #0]
 8002c22:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	2206      	movs	r2, #6
 8002c28:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"E,D,A,B,A,D");
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	33a4      	adds	r3, #164	; 0xa4
 8002c2e:	4a43      	ldr	r2, [pc, #268]	; (8002d3c <problem_fetch+0x16d8>)
 8002c30:	461c      	mov	r4, r3
 8002c32:	4613      	mov	r3, r2
 8002c34:	cb07      	ldmia	r3!, {r0, r1, r2}
 8002c36:	6020      	str	r0, [r4, #0]
 8002c38:	6061      	str	r1, [r4, #4]
 8002c3a:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"6,7,9,12,14,18");
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	3304      	adds	r3, #4
 8002c40:	4a3f      	ldr	r2, [pc, #252]	; (8002d40 <problem_fetch+0x16dc>)
 8002c42:	461c      	mov	r4, r3
 8002c44:	4613      	mov	r3, r2
 8002c46:	cb07      	ldmia	r3!, {r0, r1, r2}
 8002c48:	6020      	str	r0, [r4, #0]
 8002c4a:	6061      	str	r1, [r4, #4]
 8002c4c:	60a2      	str	r2, [r4, #8]
 8002c4e:	881a      	ldrh	r2, [r3, #0]
 8002c50:	789b      	ldrb	r3, [r3, #2]
 8002c52:	81a2      	strh	r2, [r4, #12]
 8002c54:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8002c5c:	4a35      	ldr	r2, [pc, #212]	; (8002d34 <problem_fetch+0x16d0>)
 8002c5e:	461c      	mov	r4, r3
 8002c60:	4613      	mov	r3, r2
 8002c62:	cb07      	ldmia	r3!, {r0, r1, r2}
 8002c64:	6020      	str	r0, [r4, #0]
 8002c66:	6061      	str	r1, [r4, #4]
 8002c68:	60a2      	str	r2, [r4, #8]
			break;
 8002c6a:	f019 bc2b 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 19 :
			strcpy(p->name,"BLACK LAMP");
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8002c74:	4933      	ldr	r1, [pc, #204]	; (8002d44 <problem_fetch+0x16e0>)
 8002c76:	461a      	mov	r2, r3
 8002c78:	460b      	mov	r3, r1
 8002c7a:	cb03      	ldmia	r3!, {r0, r1}
 8002c7c:	6010      	str	r0, [r2, #0]
 8002c7e:	6051      	str	r1, [r2, #4]
 8002c80:	8819      	ldrh	r1, [r3, #0]
 8002c82:	789b      	ldrb	r3, [r3, #2]
 8002c84:	8111      	strh	r1, [r2, #8]
 8002c86:	7293      	strb	r3, [r2, #10]
			strcpy(p->grade,"6C+");
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8002c8e:	4a13      	ldr	r2, [pc, #76]	; (8002cdc <problem_fetch+0x1678>)
 8002c90:	6810      	ldr	r0, [r2, #0]
 8002c92:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	2206      	movs	r2, #6
 8002c98:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"H,E,I,D,J,E");
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	33a4      	adds	r3, #164	; 0xa4
 8002c9e:	4a2a      	ldr	r2, [pc, #168]	; (8002d48 <problem_fetch+0x16e4>)
 8002ca0:	461c      	mov	r4, r3
 8002ca2:	4613      	mov	r3, r2
 8002ca4:	cb07      	ldmia	r3!, {r0, r1, r2}
 8002ca6:	6020      	str	r0, [r4, #0]
 8002ca8:	6061      	str	r1, [r4, #4]
 8002caa:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"10,14,14,18,5,6");
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	3304      	adds	r3, #4
 8002cb0:	4a26      	ldr	r2, [pc, #152]	; (8002d4c <problem_fetch+0x16e8>)
 8002cb2:	461c      	mov	r4, r3
 8002cb4:	4615      	mov	r5, r2
 8002cb6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002cb8:	6020      	str	r0, [r4, #0]
 8002cba:	6061      	str	r1, [r4, #4]
 8002cbc:	60a2      	str	r2, [r4, #8]
 8002cbe:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"d,d,d,e,s,s");
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8002cc6:	4a22      	ldr	r2, [pc, #136]	; (8002d50 <problem_fetch+0x16ec>)
 8002cc8:	461c      	mov	r4, r3
 8002cca:	4613      	mov	r3, r2
 8002ccc:	cb07      	ldmia	r3!, {r0, r1, r2}
 8002cce:	6020      	str	r0, [r4, #0]
 8002cd0:	6061      	str	r1, [r4, #4]
 8002cd2:	60a2      	str	r2, [r4, #8]
			break;
 8002cd4:	f019 bbf6 	b.w	801c4c4 <problem_fetch+0x1ae60>
 8002cd8:	08023dc0 	.word	0x08023dc0
 8002cdc:	08023bbc 	.word	0x08023bbc
 8002ce0:	08023dcc 	.word	0x08023dcc
 8002ce4:	08023ddc 	.word	0x08023ddc
 8002ce8:	08023b9c 	.word	0x08023b9c
 8002cec:	08023df0 	.word	0x08023df0
 8002cf0:	08023b24 	.word	0x08023b24
 8002cf4:	08023dfc 	.word	0x08023dfc
 8002cf8:	08023e0c 	.word	0x08023e0c
 8002cfc:	08023e20 	.word	0x08023e20
 8002d00:	08023e30 	.word	0x08023e30
 8002d04:	08023cc4 	.word	0x08023cc4
 8002d08:	08023e44 	.word	0x08023e44
 8002d0c:	08023e54 	.word	0x08023e54
 8002d10:	08023e68 	.word	0x08023e68
 8002d14:	08023e78 	.word	0x08023e78
 8002d18:	08023e7c 	.word	0x08023e7c
 8002d1c:	08023e88 	.word	0x08023e88
 8002d20:	08023b04 	.word	0x08023b04
 8002d24:	08023e98 	.word	0x08023e98
 8002d28:	08023ae4 	.word	0x08023ae4
 8002d2c:	08023ea4 	.word	0x08023ea4
 8002d30:	08023eb0 	.word	0x08023eb0
 8002d34:	08023ec0 	.word	0x08023ec0
 8002d38:	08023ecc 	.word	0x08023ecc
 8002d3c:	08023ed4 	.word	0x08023ed4
 8002d40:	08023ee0 	.word	0x08023ee0
 8002d44:	08023ef0 	.word	0x08023ef0
 8002d48:	08023efc 	.word	0x08023efc
 8002d4c:	08023f08 	.word	0x08023f08
 8002d50:	08023f18 	.word	0x08023f18
		case 20 :
			strcpy(p->name,"ALLBLACKS");
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8002d5a:	49a9      	ldr	r1, [pc, #676]	; (8003000 <problem_fetch+0x199c>)
 8002d5c:	461a      	mov	r2, r3
 8002d5e:	460b      	mov	r3, r1
 8002d60:	cb03      	ldmia	r3!, {r0, r1}
 8002d62:	6010      	str	r0, [r2, #0]
 8002d64:	6051      	str	r1, [r2, #4]
 8002d66:	881b      	ldrh	r3, [r3, #0]
 8002d68:	8113      	strh	r3, [r2, #8]
			strcpy(p->grade,"7A");
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8002d70:	4aa4      	ldr	r2, [pc, #656]	; (8003004 <problem_fetch+0x19a0>)
 8002d72:	8811      	ldrh	r1, [r2, #0]
 8002d74:	7892      	ldrb	r2, [r2, #2]
 8002d76:	8019      	strh	r1, [r3, #0]
 8002d78:	709a      	strb	r2, [r3, #2]
			p->moveSize = 6;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	2206      	movs	r2, #6
 8002d7e:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"E,G,H,C,D,A");
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	33a4      	adds	r3, #164	; 0xa4
 8002d84:	4aa0      	ldr	r2, [pc, #640]	; (8003008 <problem_fetch+0x19a4>)
 8002d86:	461c      	mov	r4, r3
 8002d88:	4613      	mov	r3, r2
 8002d8a:	cb07      	ldmia	r3!, {r0, r1, r2}
 8002d8c:	6020      	str	r0, [r4, #0]
 8002d8e:	6061      	str	r1, [r4, #4]
 8002d90:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"6,4,10,13,15,18");
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	3304      	adds	r3, #4
 8002d96:	4a9d      	ldr	r2, [pc, #628]	; (800300c <problem_fetch+0x19a8>)
 8002d98:	461c      	mov	r4, r3
 8002d9a:	4615      	mov	r5, r2
 8002d9c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002d9e:	6020      	str	r0, [r4, #0]
 8002da0:	6061      	str	r1, [r4, #4]
 8002da2:	60a2      	str	r2, [r4, #8]
 8002da4:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,s,d,d,d,e");
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8002dac:	4a98      	ldr	r2, [pc, #608]	; (8003010 <problem_fetch+0x19ac>)
 8002dae:	461c      	mov	r4, r3
 8002db0:	4613      	mov	r3, r2
 8002db2:	cb07      	ldmia	r3!, {r0, r1, r2}
 8002db4:	6020      	str	r0, [r4, #0]
 8002db6:	6061      	str	r1, [r4, #4]
 8002db8:	60a2      	str	r2, [r4, #8]
			break;
 8002dba:	f019 bb83 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 21 :
			strcpy(p->name,"FLEMMING THE BEAST");
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8002dc4:	4a93      	ldr	r2, [pc, #588]	; (8003014 <problem_fetch+0x19b0>)
 8002dc6:	461d      	mov	r5, r3
 8002dc8:	4614      	mov	r4, r2
 8002dca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002dcc:	6028      	str	r0, [r5, #0]
 8002dce:	6069      	str	r1, [r5, #4]
 8002dd0:	60aa      	str	r2, [r5, #8]
 8002dd2:	60eb      	str	r3, [r5, #12]
 8002dd4:	8823      	ldrh	r3, [r4, #0]
 8002dd6:	78a2      	ldrb	r2, [r4, #2]
 8002dd8:	822b      	strh	r3, [r5, #16]
 8002dda:	4613      	mov	r3, r2
 8002ddc:	74ab      	strb	r3, [r5, #18]
			strcpy(p->grade,"6C+");
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8002de4:	4a8c      	ldr	r2, [pc, #560]	; (8003018 <problem_fetch+0x19b4>)
 8002de6:	6810      	ldr	r0, [r2, #0]
 8002de8:	6018      	str	r0, [r3, #0]
			p->moveSize = 8;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	2208      	movs	r2, #8
 8002dee:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,J,G,E,H,A,E,D");
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	33a4      	adds	r3, #164	; 0xa4
 8002df4:	4a89      	ldr	r2, [pc, #548]	; (800301c <problem_fetch+0x19b8>)
 8002df6:	461c      	mov	r4, r3
 8002df8:	4615      	mov	r5, r2
 8002dfa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002dfc:	6020      	str	r0, [r4, #0]
 8002dfe:	6061      	str	r1, [r4, #4]
 8002e00:	60a2      	str	r2, [r4, #8]
 8002e02:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,5,9,12,8,14,16,18");
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	3304      	adds	r3, #4
 8002e08:	4a85      	ldr	r2, [pc, #532]	; (8003020 <problem_fetch+0x19bc>)
 8002e0a:	461d      	mov	r5, r3
 8002e0c:	4614      	mov	r4, r2
 8002e0e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002e10:	6028      	str	r0, [r5, #0]
 8002e12:	6069      	str	r1, [r5, #4]
 8002e14:	60aa      	str	r2, [r5, #8]
 8002e16:	60eb      	str	r3, [r5, #12]
 8002e18:	6820      	ldr	r0, [r4, #0]
 8002e1a:	6128      	str	r0, [r5, #16]
			strcpy(p->startFinish,"s,d,d,d,d,d,d,e");
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8002e22:	4a80      	ldr	r2, [pc, #512]	; (8003024 <problem_fetch+0x19c0>)
 8002e24:	461c      	mov	r4, r3
 8002e26:	4615      	mov	r5, r2
 8002e28:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002e2a:	6020      	str	r0, [r4, #0]
 8002e2c:	6061      	str	r1, [r4, #4]
 8002e2e:	60a2      	str	r2, [r4, #8]
 8002e30:	60e3      	str	r3, [r4, #12]
			break;
 8002e32:	f019 bb47 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 22 :
			strcpy(p->name,"BIG LE MOVIES");
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8002e3c:	4a7a      	ldr	r2, [pc, #488]	; (8003028 <problem_fetch+0x19c4>)
 8002e3e:	461c      	mov	r4, r3
 8002e40:	4613      	mov	r3, r2
 8002e42:	cb07      	ldmia	r3!, {r0, r1, r2}
 8002e44:	6020      	str	r0, [r4, #0]
 8002e46:	6061      	str	r1, [r4, #4]
 8002e48:	60a2      	str	r2, [r4, #8]
 8002e4a:	881b      	ldrh	r3, [r3, #0]
 8002e4c:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade,"6B+");
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8002e54:	4a75      	ldr	r2, [pc, #468]	; (800302c <problem_fetch+0x19c8>)
 8002e56:	6810      	ldr	r0, [r2, #0]
 8002e58:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	2207      	movs	r2, #7
 8002e5e:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,G,J,H,G,G,I");
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	33a4      	adds	r3, #164	; 0xa4
 8002e64:	4a72      	ldr	r2, [pc, #456]	; (8003030 <problem_fetch+0x19cc>)
 8002e66:	461c      	mov	r4, r3
 8002e68:	4613      	mov	r3, r2
 8002e6a:	cb07      	ldmia	r3!, {r0, r1, r2}
 8002e6c:	6020      	str	r0, [r4, #0]
 8002e6e:	6061      	str	r1, [r4, #4]
 8002e70:	60a2      	str	r2, [r4, #8]
 8002e72:	881b      	ldrh	r3, [r3, #0]
 8002e74:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,6,7,10,14,17,18");
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	3304      	adds	r3, #4
 8002e7a:	4a6e      	ldr	r2, [pc, #440]	; (8003034 <problem_fetch+0x19d0>)
 8002e7c:	461d      	mov	r5, r3
 8002e7e:	4614      	mov	r4, r2
 8002e80:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002e82:	6028      	str	r0, [r5, #0]
 8002e84:	6069      	str	r1, [r5, #4]
 8002e86:	60aa      	str	r2, [r5, #8]
 8002e88:	60eb      	str	r3, [r5, #12]
 8002e8a:	8823      	ldrh	r3, [r4, #0]
 8002e8c:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8002e94:	4a68      	ldr	r2, [pc, #416]	; (8003038 <problem_fetch+0x19d4>)
 8002e96:	461c      	mov	r4, r3
 8002e98:	4613      	mov	r3, r2
 8002e9a:	cb07      	ldmia	r3!, {r0, r1, r2}
 8002e9c:	6020      	str	r0, [r4, #0]
 8002e9e:	6061      	str	r1, [r4, #4]
 8002ea0:	60a2      	str	r2, [r4, #8]
 8002ea2:	881b      	ldrh	r3, [r3, #0]
 8002ea4:	81a3      	strh	r3, [r4, #12]
			break;
 8002ea6:	f019 bb0d 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 23 :
			strcpy(p->name,"FIRST COME, FIRST SERVED");
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8002eb0:	4a62      	ldr	r2, [pc, #392]	; (800303c <problem_fetch+0x19d8>)
 8002eb2:	461d      	mov	r5, r3
 8002eb4:	4614      	mov	r4, r2
 8002eb6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002eb8:	6028      	str	r0, [r5, #0]
 8002eba:	6069      	str	r1, [r5, #4]
 8002ebc:	60aa      	str	r2, [r5, #8]
 8002ebe:	60eb      	str	r3, [r5, #12]
 8002ec0:	cc03      	ldmia	r4!, {r0, r1}
 8002ec2:	6128      	str	r0, [r5, #16]
 8002ec4:	6169      	str	r1, [r5, #20]
 8002ec6:	7823      	ldrb	r3, [r4, #0]
 8002ec8:	762b      	strb	r3, [r5, #24]
			strcpy(p->grade,"7B+");
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8002ed0:	4a5b      	ldr	r2, [pc, #364]	; (8003040 <problem_fetch+0x19dc>)
 8002ed2:	6810      	ldr	r0, [r2, #0]
 8002ed4:	6018      	str	r0, [r3, #0]
			p->moveSize = 5;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	2205      	movs	r2, #5
 8002eda:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,G,F,A,D");
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	33a4      	adds	r3, #164	; 0xa4
 8002ee0:	4958      	ldr	r1, [pc, #352]	; (8003044 <problem_fetch+0x19e0>)
 8002ee2:	461a      	mov	r2, r3
 8002ee4:	460b      	mov	r3, r1
 8002ee6:	cb03      	ldmia	r3!, {r0, r1}
 8002ee8:	6010      	str	r0, [r2, #0]
 8002eea:	6051      	str	r1, [r2, #4]
 8002eec:	881b      	ldrh	r3, [r3, #0]
 8002eee:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"5,10,11,14,18");
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	3304      	adds	r3, #4
 8002ef4:	4a54      	ldr	r2, [pc, #336]	; (8003048 <problem_fetch+0x19e4>)
 8002ef6:	461c      	mov	r4, r3
 8002ef8:	4613      	mov	r3, r2
 8002efa:	cb07      	ldmia	r3!, {r0, r1, r2}
 8002efc:	6020      	str	r0, [r4, #0]
 8002efe:	6061      	str	r1, [r4, #4]
 8002f00:	60a2      	str	r2, [r4, #8]
 8002f02:	881b      	ldrh	r3, [r3, #0]
 8002f04:	81a3      	strh	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,e");
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8002f0c:	494f      	ldr	r1, [pc, #316]	; (800304c <problem_fetch+0x19e8>)
 8002f0e:	461a      	mov	r2, r3
 8002f10:	460b      	mov	r3, r1
 8002f12:	cb03      	ldmia	r3!, {r0, r1}
 8002f14:	6010      	str	r0, [r2, #0]
 8002f16:	6051      	str	r1, [r2, #4]
 8002f18:	881b      	ldrh	r3, [r3, #0]
 8002f1a:	8113      	strh	r3, [r2, #8]
			break;
 8002f1c:	f019 bad2 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 24 :
			strcpy(p->name,"SALAD APOCALYPSE");
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8002f26:	4a4a      	ldr	r2, [pc, #296]	; (8003050 <problem_fetch+0x19ec>)
 8002f28:	461d      	mov	r5, r3
 8002f2a:	4614      	mov	r4, r2
 8002f2c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002f2e:	6028      	str	r0, [r5, #0]
 8002f30:	6069      	str	r1, [r5, #4]
 8002f32:	60aa      	str	r2, [r5, #8]
 8002f34:	60eb      	str	r3, [r5, #12]
 8002f36:	7823      	ldrb	r3, [r4, #0]
 8002f38:	742b      	strb	r3, [r5, #16]
			strcpy(p->grade,"7B+");
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8002f40:	4a3f      	ldr	r2, [pc, #252]	; (8003040 <problem_fetch+0x19dc>)
 8002f42:	6810      	ldr	r0, [r2, #0]
 8002f44:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	2206      	movs	r2, #6
 8002f4a:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"C,B,E,H,D,A");
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	33a4      	adds	r3, #164	; 0xa4
 8002f50:	4a40      	ldr	r2, [pc, #256]	; (8003054 <problem_fetch+0x19f0>)
 8002f52:	461c      	mov	r4, r3
 8002f54:	4613      	mov	r3, r2
 8002f56:	cb07      	ldmia	r3!, {r0, r1, r2}
 8002f58:	6020      	str	r0, [r4, #0]
 8002f5a:	6061      	str	r1, [r4, #4]
 8002f5c:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,6,8,12,15,18");
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	3304      	adds	r3, #4
 8002f62:	4a3d      	ldr	r2, [pc, #244]	; (8003058 <problem_fetch+0x19f4>)
 8002f64:	461c      	mov	r4, r3
 8002f66:	4613      	mov	r3, r2
 8002f68:	cb07      	ldmia	r3!, {r0, r1, r2}
 8002f6a:	6020      	str	r0, [r4, #0]
 8002f6c:	6061      	str	r1, [r4, #4]
 8002f6e:	60a2      	str	r2, [r4, #8]
 8002f70:	881a      	ldrh	r2, [r3, #0]
 8002f72:	789b      	ldrb	r3, [r3, #2]
 8002f74:	81a2      	strh	r2, [r4, #12]
 8002f76:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish,"s,s,d,d,d,e");
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8002f7e:	4a24      	ldr	r2, [pc, #144]	; (8003010 <problem_fetch+0x19ac>)
 8002f80:	461c      	mov	r4, r3
 8002f82:	4613      	mov	r3, r2
 8002f84:	cb07      	ldmia	r3!, {r0, r1, r2}
 8002f86:	6020      	str	r0, [r4, #0]
 8002f88:	6061      	str	r1, [r4, #4]
 8002f8a:	60a2      	str	r2, [r4, #8]
			break;
 8002f8c:	f019 ba9a 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 25 :
			strcpy(p->name,"VISUALIZZA VERS2");
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8002f96:	4a31      	ldr	r2, [pc, #196]	; (800305c <problem_fetch+0x19f8>)
 8002f98:	461d      	mov	r5, r3
 8002f9a:	4614      	mov	r4, r2
 8002f9c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002f9e:	6028      	str	r0, [r5, #0]
 8002fa0:	6069      	str	r1, [r5, #4]
 8002fa2:	60aa      	str	r2, [r5, #8]
 8002fa4:	60eb      	str	r3, [r5, #12]
 8002fa6:	7823      	ldrb	r3, [r4, #0]
 8002fa8:	742b      	strb	r3, [r5, #16]
			strcpy(p->grade,"7B+");
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8002fb0:	4a23      	ldr	r2, [pc, #140]	; (8003040 <problem_fetch+0x19dc>)
 8002fb2:	6810      	ldr	r0, [r2, #0]
 8002fb4:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	2206      	movs	r2, #6
 8002fba:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,H,E,H,E,D");
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	33a4      	adds	r3, #164	; 0xa4
 8002fc0:	4a27      	ldr	r2, [pc, #156]	; (8003060 <problem_fetch+0x19fc>)
 8002fc2:	461c      	mov	r4, r3
 8002fc4:	4613      	mov	r3, r2
 8002fc6:	cb07      	ldmia	r3!, {r0, r1, r2}
 8002fc8:	6020      	str	r0, [r4, #0]
 8002fca:	6061      	str	r1, [r4, #4]
 8002fcc:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,8,9,12,14,18");
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	3304      	adds	r3, #4
 8002fd2:	4a24      	ldr	r2, [pc, #144]	; (8003064 <problem_fetch+0x1a00>)
 8002fd4:	461c      	mov	r4, r3
 8002fd6:	4613      	mov	r3, r2
 8002fd8:	cb07      	ldmia	r3!, {r0, r1, r2}
 8002fda:	6020      	str	r0, [r4, #0]
 8002fdc:	6061      	str	r1, [r4, #4]
 8002fde:	60a2      	str	r2, [r4, #8]
 8002fe0:	881a      	ldrh	r2, [r3, #0]
 8002fe2:	789b      	ldrb	r3, [r3, #2]
 8002fe4:	81a2      	strh	r2, [r4, #12]
 8002fe6:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8002fee:	4a1e      	ldr	r2, [pc, #120]	; (8003068 <problem_fetch+0x1a04>)
 8002ff0:	461c      	mov	r4, r3
 8002ff2:	4613      	mov	r3, r2
 8002ff4:	cb07      	ldmia	r3!, {r0, r1, r2}
 8002ff6:	6020      	str	r0, [r4, #0]
 8002ff8:	6061      	str	r1, [r4, #4]
 8002ffa:	60a2      	str	r2, [r4, #8]
			break;
 8002ffc:	f019 ba62 	b.w	801c4c4 <problem_fetch+0x1ae60>
 8003000:	08023f24 	.word	0x08023f24
 8003004:	08023ae4 	.word	0x08023ae4
 8003008:	08023f30 	.word	0x08023f30
 800300c:	08023f3c 	.word	0x08023f3c
 8003010:	08023b04 	.word	0x08023b04
 8003014:	08023f4c 	.word	0x08023f4c
 8003018:	08023bbc 	.word	0x08023bbc
 800301c:	08023f60 	.word	0x08023f60
 8003020:	08023f70 	.word	0x08023f70
 8003024:	08023d34 	.word	0x08023d34
 8003028:	08023f84 	.word	0x08023f84
 800302c:	08023b24 	.word	0x08023b24
 8003030:	08023f94 	.word	0x08023f94
 8003034:	08023fa4 	.word	0x08023fa4
 8003038:	08023cac 	.word	0x08023cac
 800303c:	08023fb8 	.word	0x08023fb8
 8003040:	08023c60 	.word	0x08023c60
 8003044:	08023fd4 	.word	0x08023fd4
 8003048:	08023fe0 	.word	0x08023fe0
 800304c:	08023ff0 	.word	0x08023ff0
 8003050:	08023ffc 	.word	0x08023ffc
 8003054:	08024010 	.word	0x08024010
 8003058:	0802401c 	.word	0x0802401c
 800305c:	0802402c 	.word	0x0802402c
 8003060:	08024040 	.word	0x08024040
 8003064:	0802404c 	.word	0x0802404c
 8003068:	08023ec0 	.word	0x08023ec0
		case 26 :
			strcpy(p->name,"PSYCHO MANTIS");
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8003072:	4aa7      	ldr	r2, [pc, #668]	; (8003310 <problem_fetch+0x1cac>)
 8003074:	461c      	mov	r4, r3
 8003076:	4613      	mov	r3, r2
 8003078:	cb07      	ldmia	r3!, {r0, r1, r2}
 800307a:	6020      	str	r0, [r4, #0]
 800307c:	6061      	str	r1, [r4, #4]
 800307e:	60a2      	str	r2, [r4, #8]
 8003080:	881b      	ldrh	r3, [r3, #0]
 8003082:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade,"6C+");
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800308a:	4aa2      	ldr	r2, [pc, #648]	; (8003314 <problem_fetch+0x1cb0>)
 800308c:	6810      	ldr	r0, [r2, #0]
 800308e:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	2206      	movs	r2, #6
 8003094:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"H,D,G,B,E,D");
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	33a4      	adds	r3, #164	; 0xa4
 800309a:	4a9f      	ldr	r2, [pc, #636]	; (8003318 <problem_fetch+0x1cb4>)
 800309c:	461c      	mov	r4, r3
 800309e:	4613      	mov	r3, r2
 80030a0:	cb07      	ldmia	r3!, {r0, r1, r2}
 80030a2:	6020      	str	r0, [r4, #0]
 80030a4:	6061      	str	r1, [r4, #4]
 80030a6:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,7,10,10,14,18");
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	3304      	adds	r3, #4
 80030ac:	4a9b      	ldr	r2, [pc, #620]	; (800331c <problem_fetch+0x1cb8>)
 80030ae:	461c      	mov	r4, r3
 80030b0:	4615      	mov	r5, r2
 80030b2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80030b4:	6020      	str	r0, [r4, #0]
 80030b6:	6061      	str	r1, [r4, #4]
 80030b8:	60a2      	str	r2, [r4, #8]
 80030ba:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 80030c2:	4a97      	ldr	r2, [pc, #604]	; (8003320 <problem_fetch+0x1cbc>)
 80030c4:	461c      	mov	r4, r3
 80030c6:	4613      	mov	r3, r2
 80030c8:	cb07      	ldmia	r3!, {r0, r1, r2}
 80030ca:	6020      	str	r0, [r4, #0]
 80030cc:	6061      	str	r1, [r4, #4]
 80030ce:	60a2      	str	r2, [r4, #8]
			break;
 80030d0:	f019 b9f8 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 27 :
			strcpy(p->name,"STOUT LITE");
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80030da:	4992      	ldr	r1, [pc, #584]	; (8003324 <problem_fetch+0x1cc0>)
 80030dc:	461a      	mov	r2, r3
 80030de:	460b      	mov	r3, r1
 80030e0:	cb03      	ldmia	r3!, {r0, r1}
 80030e2:	6010      	str	r0, [r2, #0]
 80030e4:	6051      	str	r1, [r2, #4]
 80030e6:	8819      	ldrh	r1, [r3, #0]
 80030e8:	789b      	ldrb	r3, [r3, #2]
 80030ea:	8111      	strh	r1, [r2, #8]
 80030ec:	7293      	strb	r3, [r2, #10]
			strcpy(p->grade,"6C+");
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80030f4:	4a87      	ldr	r2, [pc, #540]	; (8003314 <problem_fetch+0x1cb0>)
 80030f6:	6810      	ldr	r0, [r2, #0]
 80030f8:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	2207      	movs	r2, #7
 80030fe:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,D,G,D,G,G,I");
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	33a4      	adds	r3, #164	; 0xa4
 8003104:	4a88      	ldr	r2, [pc, #544]	; (8003328 <problem_fetch+0x1cc4>)
 8003106:	461c      	mov	r4, r3
 8003108:	4613      	mov	r3, r2
 800310a:	cb07      	ldmia	r3!, {r0, r1, r2}
 800310c:	6020      	str	r0, [r4, #0]
 800310e:	6061      	str	r1, [r4, #4]
 8003110:	60a2      	str	r2, [r4, #8]
 8003112:	881b      	ldrh	r3, [r3, #0]
 8003114:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,7,9,11,14,15,18");
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	3304      	adds	r3, #4
 800311a:	4a84      	ldr	r2, [pc, #528]	; (800332c <problem_fetch+0x1cc8>)
 800311c:	461d      	mov	r5, r3
 800311e:	4614      	mov	r4, r2
 8003120:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003122:	6028      	str	r0, [r5, #0]
 8003124:	6069      	str	r1, [r5, #4]
 8003126:	60aa      	str	r2, [r5, #8]
 8003128:	60eb      	str	r3, [r5, #12]
 800312a:	8823      	ldrh	r3, [r4, #0]
 800312c:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8003134:	4a7e      	ldr	r2, [pc, #504]	; (8003330 <problem_fetch+0x1ccc>)
 8003136:	461c      	mov	r4, r3
 8003138:	4613      	mov	r3, r2
 800313a:	cb07      	ldmia	r3!, {r0, r1, r2}
 800313c:	6020      	str	r0, [r4, #0]
 800313e:	6061      	str	r1, [r4, #4]
 8003140:	60a2      	str	r2, [r4, #8]
 8003142:	881b      	ldrh	r3, [r3, #0]
 8003144:	81a3      	strh	r3, [r4, #12]
			break;
 8003146:	f019 b9bd 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 28 :
			strcpy(p->name,"BLACKROCK");
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8003150:	4978      	ldr	r1, [pc, #480]	; (8003334 <problem_fetch+0x1cd0>)
 8003152:	461a      	mov	r2, r3
 8003154:	460b      	mov	r3, r1
 8003156:	cb03      	ldmia	r3!, {r0, r1}
 8003158:	6010      	str	r0, [r2, #0]
 800315a:	6051      	str	r1, [r2, #4]
 800315c:	881b      	ldrh	r3, [r3, #0]
 800315e:	8113      	strh	r3, [r2, #8]
			strcpy(p->grade,"6C+");
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8003166:	4a6b      	ldr	r2, [pc, #428]	; (8003314 <problem_fetch+0x1cb0>)
 8003168:	6810      	ldr	r0, [r2, #0]
 800316a:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	2207      	movs	r2, #7
 8003170:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,G,I,D,E,B,D");
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	33a4      	adds	r3, #164	; 0xa4
 8003176:	4a70      	ldr	r2, [pc, #448]	; (8003338 <problem_fetch+0x1cd4>)
 8003178:	461c      	mov	r4, r3
 800317a:	4613      	mov	r3, r2
 800317c:	cb07      	ldmia	r3!, {r0, r1, r2}
 800317e:	6020      	str	r0, [r4, #0]
 8003180:	6061      	str	r1, [r4, #4]
 8003182:	60a2      	str	r2, [r4, #8]
 8003184:	881b      	ldrh	r3, [r3, #0]
 8003186:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,6,10,11,12,15,18");
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	3304      	adds	r3, #4
 800318c:	4a6b      	ldr	r2, [pc, #428]	; (800333c <problem_fetch+0x1cd8>)
 800318e:	461d      	mov	r5, r3
 8003190:	4614      	mov	r4, r2
 8003192:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003194:	6028      	str	r0, [r5, #0]
 8003196:	6069      	str	r1, [r5, #4]
 8003198:	60aa      	str	r2, [r5, #8]
 800319a:	60eb      	str	r3, [r5, #12]
 800319c:	8823      	ldrh	r3, [r4, #0]
 800319e:	78a2      	ldrb	r2, [r4, #2]
 80031a0:	822b      	strh	r3, [r5, #16]
 80031a2:	4613      	mov	r3, r2
 80031a4:	74ab      	strb	r3, [r5, #18]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 80031ac:	4a60      	ldr	r2, [pc, #384]	; (8003330 <problem_fetch+0x1ccc>)
 80031ae:	461c      	mov	r4, r3
 80031b0:	4613      	mov	r3, r2
 80031b2:	cb07      	ldmia	r3!, {r0, r1, r2}
 80031b4:	6020      	str	r0, [r4, #0]
 80031b6:	6061      	str	r1, [r4, #4]
 80031b8:	60a2      	str	r2, [r4, #8]
 80031ba:	881b      	ldrh	r3, [r3, #0]
 80031bc:	81a3      	strh	r3, [r4, #12]
			break;
 80031be:	f019 b981 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 29 :
			strcpy(p->name,"BO4");
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80031c8:	4a5d      	ldr	r2, [pc, #372]	; (8003340 <problem_fetch+0x1cdc>)
 80031ca:	6810      	ldr	r0, [r2, #0]
 80031cc:	6018      	str	r0, [r3, #0]
			strcpy(p->grade,"7A");
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80031d4:	4a5b      	ldr	r2, [pc, #364]	; (8003344 <problem_fetch+0x1ce0>)
 80031d6:	8811      	ldrh	r1, [r2, #0]
 80031d8:	7892      	ldrb	r2, [r2, #2]
 80031da:	8019      	strh	r1, [r3, #0]
 80031dc:	709a      	strb	r2, [r3, #2]
			p->moveSize = 7;
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	2207      	movs	r2, #7
 80031e2:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"C,E,F,H,G,I,H");
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	33a4      	adds	r3, #164	; 0xa4
 80031e8:	4a57      	ldr	r2, [pc, #348]	; (8003348 <problem_fetch+0x1ce4>)
 80031ea:	461c      	mov	r4, r3
 80031ec:	4613      	mov	r3, r2
 80031ee:	cb07      	ldmia	r3!, {r0, r1, r2}
 80031f0:	6020      	str	r0, [r4, #0]
 80031f2:	6061      	str	r1, [r4, #4]
 80031f4:	60a2      	str	r2, [r4, #8]
 80031f6:	881b      	ldrh	r3, [r3, #0]
 80031f8:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,9,11,5,15,18,12");
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	3304      	adds	r3, #4
 80031fe:	4a53      	ldr	r2, [pc, #332]	; (800334c <problem_fetch+0x1ce8>)
 8003200:	461d      	mov	r5, r3
 8003202:	4614      	mov	r4, r2
 8003204:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003206:	6028      	str	r0, [r5, #0]
 8003208:	6069      	str	r1, [r5, #4]
 800320a:	60aa      	str	r2, [r5, #8]
 800320c:	60eb      	str	r3, [r5, #12]
 800320e:	8823      	ldrh	r3, [r4, #0]
 8003210:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,d,d,s,d,e,d");
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8003218:	4a4d      	ldr	r2, [pc, #308]	; (8003350 <problem_fetch+0x1cec>)
 800321a:	461c      	mov	r4, r3
 800321c:	4613      	mov	r3, r2
 800321e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8003220:	6020      	str	r0, [r4, #0]
 8003222:	6061      	str	r1, [r4, #4]
 8003224:	60a2      	str	r2, [r4, #8]
 8003226:	881b      	ldrh	r3, [r3, #0]
 8003228:	81a3      	strh	r3, [r4, #12]
			break;
 800322a:	f019 b94b 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 30 :
			strcpy(p->name,"UP MY SLEEVES");
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8003234:	4a47      	ldr	r2, [pc, #284]	; (8003354 <problem_fetch+0x1cf0>)
 8003236:	461c      	mov	r4, r3
 8003238:	4613      	mov	r3, r2
 800323a:	cb07      	ldmia	r3!, {r0, r1, r2}
 800323c:	6020      	str	r0, [r4, #0]
 800323e:	6061      	str	r1, [r4, #4]
 8003240:	60a2      	str	r2, [r4, #8]
 8003242:	881b      	ldrh	r3, [r3, #0]
 8003244:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade,"7C+");
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800324c:	4a42      	ldr	r2, [pc, #264]	; (8003358 <problem_fetch+0x1cf4>)
 800324e:	6810      	ldr	r0, [r2, #0]
 8003250:	6018      	str	r0, [r3, #0]
			p->moveSize = 5;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	2205      	movs	r2, #5
 8003256:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,G,J,E,A");
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	33a4      	adds	r3, #164	; 0xa4
 800325c:	493f      	ldr	r1, [pc, #252]	; (800335c <problem_fetch+0x1cf8>)
 800325e:	461a      	mov	r2, r3
 8003260:	460b      	mov	r3, r1
 8003262:	cb03      	ldmia	r3!, {r0, r1}
 8003264:	6010      	str	r0, [r2, #0]
 8003266:	6051      	str	r1, [r2, #4]
 8003268:	881b      	ldrh	r3, [r3, #0]
 800326a:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"5,9,12,14,18");
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	3304      	adds	r3, #4
 8003270:	4a3b      	ldr	r2, [pc, #236]	; (8003360 <problem_fetch+0x1cfc>)
 8003272:	461c      	mov	r4, r3
 8003274:	4613      	mov	r3, r2
 8003276:	cb07      	ldmia	r3!, {r0, r1, r2}
 8003278:	6020      	str	r0, [r4, #0]
 800327a:	6061      	str	r1, [r4, #4]
 800327c:	60a2      	str	r2, [r4, #8]
 800327e:	781b      	ldrb	r3, [r3, #0]
 8003280:	7323      	strb	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,e");
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8003288:	4936      	ldr	r1, [pc, #216]	; (8003364 <problem_fetch+0x1d00>)
 800328a:	461a      	mov	r2, r3
 800328c:	460b      	mov	r3, r1
 800328e:	cb03      	ldmia	r3!, {r0, r1}
 8003290:	6010      	str	r0, [r2, #0]
 8003292:	6051      	str	r1, [r2, #4]
 8003294:	881b      	ldrh	r3, [r3, #0]
 8003296:	8113      	strh	r3, [r2, #8]
			break;
 8003298:	f019 b914 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 31 :
			strcpy(p->name,"ULTRAVIOLENCE");
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80032a2:	4a31      	ldr	r2, [pc, #196]	; (8003368 <problem_fetch+0x1d04>)
 80032a4:	461c      	mov	r4, r3
 80032a6:	4613      	mov	r3, r2
 80032a8:	cb07      	ldmia	r3!, {r0, r1, r2}
 80032aa:	6020      	str	r0, [r4, #0]
 80032ac:	6061      	str	r1, [r4, #4]
 80032ae:	60a2      	str	r2, [r4, #8]
 80032b0:	881b      	ldrh	r3, [r3, #0]
 80032b2:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade,"6C+");
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80032ba:	4a16      	ldr	r2, [pc, #88]	; (8003314 <problem_fetch+0x1cb0>)
 80032bc:	6810      	ldr	r0, [r2, #0]
 80032be:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	2207      	movs	r2, #7
 80032c4:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,E,C,F,E,J,D");
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	33a4      	adds	r3, #164	; 0xa4
 80032ca:	4a28      	ldr	r2, [pc, #160]	; (800336c <problem_fetch+0x1d08>)
 80032cc:	461c      	mov	r4, r3
 80032ce:	4613      	mov	r3, r2
 80032d0:	cb07      	ldmia	r3!, {r0, r1, r2}
 80032d2:	6020      	str	r0, [r4, #0]
 80032d4:	6061      	str	r1, [r4, #4]
 80032d6:	60a2      	str	r2, [r4, #8]
 80032d8:	881b      	ldrh	r3, [r3, #0]
 80032da:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"6,6,8,11,14,16,18");
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	3304      	adds	r3, #4
 80032e0:	4a23      	ldr	r2, [pc, #140]	; (8003370 <problem_fetch+0x1d0c>)
 80032e2:	461d      	mov	r5, r3
 80032e4:	4614      	mov	r4, r2
 80032e6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80032e8:	6028      	str	r0, [r5, #0]
 80032ea:	6069      	str	r1, [r5, #4]
 80032ec:	60aa      	str	r2, [r5, #8]
 80032ee:	60eb      	str	r3, [r5, #12]
 80032f0:	8823      	ldrh	r3, [r4, #0]
 80032f2:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,s,d,d,d,d,e");
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 80032fa:	4a1e      	ldr	r2, [pc, #120]	; (8003374 <problem_fetch+0x1d10>)
 80032fc:	461c      	mov	r4, r3
 80032fe:	4613      	mov	r3, r2
 8003300:	cb07      	ldmia	r3!, {r0, r1, r2}
 8003302:	6020      	str	r0, [r4, #0]
 8003304:	6061      	str	r1, [r4, #4]
 8003306:	60a2      	str	r2, [r4, #8]
 8003308:	881b      	ldrh	r3, [r3, #0]
 800330a:	81a3      	strh	r3, [r4, #12]
			break;
 800330c:	f019 b8da 	b.w	801c4c4 <problem_fetch+0x1ae60>
 8003310:	0802405c 	.word	0x0802405c
 8003314:	08023bbc 	.word	0x08023bbc
 8003318:	0802406c 	.word	0x0802406c
 800331c:	08024078 	.word	0x08024078
 8003320:	08023ec0 	.word	0x08023ec0
 8003324:	08024088 	.word	0x08024088
 8003328:	08024094 	.word	0x08024094
 800332c:	080240a4 	.word	0x080240a4
 8003330:	08023cac 	.word	0x08023cac
 8003334:	080240b8 	.word	0x080240b8
 8003338:	080240c4 	.word	0x080240c4
 800333c:	080240d4 	.word	0x080240d4
 8003340:	080240e8 	.word	0x080240e8
 8003344:	08023ae4 	.word	0x08023ae4
 8003348:	080240ec 	.word	0x080240ec
 800334c:	080240fc 	.word	0x080240fc
 8003350:	08024110 	.word	0x08024110
 8003354:	08024120 	.word	0x08024120
 8003358:	08024130 	.word	0x08024130
 800335c:	08024134 	.word	0x08024134
 8003360:	08024140 	.word	0x08024140
 8003364:	08023ff0 	.word	0x08023ff0
 8003368:	08024150 	.word	0x08024150
 800336c:	08024160 	.word	0x08024160
 8003370:	08024170 	.word	0x08024170
 8003374:	08023b9c 	.word	0x08023b9c
		case 32 :
			strcpy(p->name,"DJWUDHDJWJCJDJE");
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800337e:	4ab0      	ldr	r2, [pc, #704]	; (8003640 <problem_fetch+0x1fdc>)
 8003380:	461c      	mov	r4, r3
 8003382:	4615      	mov	r5, r2
 8003384:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003386:	6020      	str	r0, [r4, #0]
 8003388:	6061      	str	r1, [r4, #4]
 800338a:	60a2      	str	r2, [r4, #8]
 800338c:	60e3      	str	r3, [r4, #12]
			strcpy(p->grade,"6B+");
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8003394:	4aab      	ldr	r2, [pc, #684]	; (8003644 <problem_fetch+0x1fe0>)
 8003396:	6810      	ldr	r0, [r2, #0]
 8003398:	6018      	str	r0, [r3, #0]
			p->moveSize = 10;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	220a      	movs	r2, #10
 800339e:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,E,C,B,C,E,D,B,A,D");
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	33a4      	adds	r3, #164	; 0xa4
 80033a4:	4aa8      	ldr	r2, [pc, #672]	; (8003648 <problem_fetch+0x1fe4>)
 80033a6:	461d      	mov	r5, r3
 80033a8:	4614      	mov	r4, r2
 80033aa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80033ac:	6028      	str	r0, [r5, #0]
 80033ae:	6069      	str	r1, [r5, #4]
 80033b0:	60aa      	str	r2, [r5, #8]
 80033b2:	60eb      	str	r3, [r5, #12]
 80033b4:	6820      	ldr	r0, [r4, #0]
 80033b6:	6128      	str	r0, [r5, #16]
			strcpy(p->moveNumbers,"4,6,8,10,13,12,15,15,18,18");
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	3304      	adds	r3, #4
 80033bc:	4aa3      	ldr	r2, [pc, #652]	; (800364c <problem_fetch+0x1fe8>)
 80033be:	461d      	mov	r5, r3
 80033c0:	4614      	mov	r4, r2
 80033c2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80033c4:	6028      	str	r0, [r5, #0]
 80033c6:	6069      	str	r1, [r5, #4]
 80033c8:	60aa      	str	r2, [r5, #8]
 80033ca:	60eb      	str	r3, [r5, #12]
 80033cc:	cc03      	ldmia	r4!, {r0, r1}
 80033ce:	6128      	str	r0, [r5, #16]
 80033d0:	6169      	str	r1, [r5, #20]
 80033d2:	8823      	ldrh	r3, [r4, #0]
 80033d4:	78a2      	ldrb	r2, [r4, #2]
 80033d6:	832b      	strh	r3, [r5, #24]
 80033d8:	4613      	mov	r3, r2
 80033da:	76ab      	strb	r3, [r5, #26]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,d,e,e");
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 80033e2:	4a9b      	ldr	r2, [pc, #620]	; (8003650 <problem_fetch+0x1fec>)
 80033e4:	461d      	mov	r5, r3
 80033e6:	4614      	mov	r4, r2
 80033e8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80033ea:	6028      	str	r0, [r5, #0]
 80033ec:	6069      	str	r1, [r5, #4]
 80033ee:	60aa      	str	r2, [r5, #8]
 80033f0:	60eb      	str	r3, [r5, #12]
 80033f2:	6820      	ldr	r0, [r4, #0]
 80033f4:	6128      	str	r0, [r5, #16]
			break;
 80033f6:	f019 b865 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 33 :
			strcpy(p->name,"I ❤️ ELLIA");
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8003400:	4a94      	ldr	r2, [pc, #592]	; (8003654 <problem_fetch+0x1ff0>)
 8003402:	461c      	mov	r4, r3
 8003404:	4613      	mov	r3, r2
 8003406:	cb07      	ldmia	r3!, {r0, r1, r2}
 8003408:	6020      	str	r0, [r4, #0]
 800340a:	6061      	str	r1, [r4, #4]
 800340c:	60a2      	str	r2, [r4, #8]
 800340e:	881a      	ldrh	r2, [r3, #0]
 8003410:	789b      	ldrb	r3, [r3, #2]
 8003412:	81a2      	strh	r2, [r4, #12]
 8003414:	73a3      	strb	r3, [r4, #14]
			strcpy(p->grade,"7A+");
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800341c:	4a8e      	ldr	r2, [pc, #568]	; (8003658 <problem_fetch+0x1ff4>)
 800341e:	6810      	ldr	r0, [r2, #0]
 8003420:	6018      	str	r0, [r3, #0]
			p->moveSize = 5;
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	2205      	movs	r2, #5
 8003426:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,G,G,C,D");
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	33a4      	adds	r3, #164	; 0xa4
 800342c:	498b      	ldr	r1, [pc, #556]	; (800365c <problem_fetch+0x1ff8>)
 800342e:	461a      	mov	r2, r3
 8003430:	460b      	mov	r3, r1
 8003432:	cb03      	ldmia	r3!, {r0, r1}
 8003434:	6010      	str	r0, [r2, #0]
 8003436:	6051      	str	r1, [r2, #4]
 8003438:	881b      	ldrh	r3, [r3, #0]
 800343a:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"5,6,10,13,18");
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	3304      	adds	r3, #4
 8003440:	4a87      	ldr	r2, [pc, #540]	; (8003660 <problem_fetch+0x1ffc>)
 8003442:	461c      	mov	r4, r3
 8003444:	4613      	mov	r3, r2
 8003446:	cb07      	ldmia	r3!, {r0, r1, r2}
 8003448:	6020      	str	r0, [r4, #0]
 800344a:	6061      	str	r1, [r4, #4]
 800344c:	60a2      	str	r2, [r4, #8]
 800344e:	781b      	ldrb	r3, [r3, #0]
 8003450:	7323      	strb	r3, [r4, #12]
			strcpy(p->startFinish,"s,s,d,d,e");
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8003458:	4982      	ldr	r1, [pc, #520]	; (8003664 <problem_fetch+0x2000>)
 800345a:	461a      	mov	r2, r3
 800345c:	460b      	mov	r3, r1
 800345e:	cb03      	ldmia	r3!, {r0, r1}
 8003460:	6010      	str	r0, [r2, #0]
 8003462:	6051      	str	r1, [r2, #4]
 8003464:	881b      	ldrh	r3, [r3, #0]
 8003466:	8113      	strh	r3, [r2, #8]
			break;
 8003468:	f019 b82c 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 34 :
			strcpy(p->name,"LIZZY BLACK");
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8003472:	4a7d      	ldr	r2, [pc, #500]	; (8003668 <problem_fetch+0x2004>)
 8003474:	461c      	mov	r4, r3
 8003476:	4613      	mov	r3, r2
 8003478:	cb07      	ldmia	r3!, {r0, r1, r2}
 800347a:	6020      	str	r0, [r4, #0]
 800347c:	6061      	str	r1, [r4, #4]
 800347e:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade,"7B");
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8003486:	4a79      	ldr	r2, [pc, #484]	; (800366c <problem_fetch+0x2008>)
 8003488:	8811      	ldrh	r1, [r2, #0]
 800348a:	7892      	ldrb	r2, [r2, #2]
 800348c:	8019      	strh	r1, [r3, #0]
 800348e:	709a      	strb	r2, [r3, #2]
			p->moveSize = 6;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	2206      	movs	r2, #6
 8003494:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,I,F,E,D,I");
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	33a4      	adds	r3, #164	; 0xa4
 800349a:	4a75      	ldr	r2, [pc, #468]	; (8003670 <problem_fetch+0x200c>)
 800349c:	461c      	mov	r4, r3
 800349e:	4613      	mov	r3, r2
 80034a0:	cb07      	ldmia	r3!, {r0, r1, r2}
 80034a2:	6020      	str	r0, [r4, #0]
 80034a4:	6061      	str	r1, [r4, #4]
 80034a6:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,10,13,12,15,18");
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	3304      	adds	r3, #4
 80034ac:	4a71      	ldr	r2, [pc, #452]	; (8003674 <problem_fetch+0x2010>)
 80034ae:	461d      	mov	r5, r3
 80034b0:	4614      	mov	r4, r2
 80034b2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80034b4:	6028      	str	r0, [r5, #0]
 80034b6:	6069      	str	r1, [r5, #4]
 80034b8:	60aa      	str	r2, [r5, #8]
 80034ba:	60eb      	str	r3, [r5, #12]
 80034bc:	7823      	ldrb	r3, [r4, #0]
 80034be:	742b      	strb	r3, [r5, #16]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 80034c6:	4a6c      	ldr	r2, [pc, #432]	; (8003678 <problem_fetch+0x2014>)
 80034c8:	461c      	mov	r4, r3
 80034ca:	4613      	mov	r3, r2
 80034cc:	cb07      	ldmia	r3!, {r0, r1, r2}
 80034ce:	6020      	str	r0, [r4, #0]
 80034d0:	6061      	str	r1, [r4, #4]
 80034d2:	60a2      	str	r2, [r4, #8]
			break;
 80034d4:	f018 bff6 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 35 :
			strcpy(p->name,"NOT FOR HOONY");
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80034de:	4a67      	ldr	r2, [pc, #412]	; (800367c <problem_fetch+0x2018>)
 80034e0:	461c      	mov	r4, r3
 80034e2:	4613      	mov	r3, r2
 80034e4:	cb07      	ldmia	r3!, {r0, r1, r2}
 80034e6:	6020      	str	r0, [r4, #0]
 80034e8:	6061      	str	r1, [r4, #4]
 80034ea:	60a2      	str	r2, [r4, #8]
 80034ec:	881b      	ldrh	r3, [r3, #0]
 80034ee:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade,"7A+");
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80034f6:	4a58      	ldr	r2, [pc, #352]	; (8003658 <problem_fetch+0x1ff4>)
 80034f8:	6810      	ldr	r0, [r2, #0]
 80034fa:	6018      	str	r0, [r3, #0]
			p->moveSize = 8;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	2208      	movs	r2, #8
 8003500:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,E,E,C,G,A,I,H");
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	33a4      	adds	r3, #164	; 0xa4
 8003506:	4a5e      	ldr	r2, [pc, #376]	; (8003680 <problem_fetch+0x201c>)
 8003508:	461c      	mov	r4, r3
 800350a:	4615      	mov	r5, r2
 800350c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800350e:	6020      	str	r0, [r4, #0]
 8003510:	6061      	str	r1, [r4, #4]
 8003512:	60a2      	str	r2, [r4, #8]
 8003514:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,6,9,13,17,9,18,16");
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	3304      	adds	r3, #4
 800351a:	4a5a      	ldr	r2, [pc, #360]	; (8003684 <problem_fetch+0x2020>)
 800351c:	461d      	mov	r5, r3
 800351e:	4614      	mov	r4, r2
 8003520:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003522:	6028      	str	r0, [r5, #0]
 8003524:	6069      	str	r1, [r5, #4]
 8003526:	60aa      	str	r2, [r5, #8]
 8003528:	60eb      	str	r3, [r5, #12]
 800352a:	6820      	ldr	r0, [r4, #0]
 800352c:	6128      	str	r0, [r5, #16]
			strcpy(p->startFinish,"s,d,d,d,d,d,e,d");
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8003534:	4a54      	ldr	r2, [pc, #336]	; (8003688 <problem_fetch+0x2024>)
 8003536:	461c      	mov	r4, r3
 8003538:	4615      	mov	r5, r2
 800353a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800353c:	6020      	str	r0, [r4, #0]
 800353e:	6061      	str	r1, [r4, #4]
 8003540:	60a2      	str	r2, [r4, #8]
 8003542:	60e3      	str	r3, [r4, #12]
			break;
 8003544:	f018 bfbe 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 36 :
			strcpy(p->name,"L’HEURE SOMBRE");
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800354e:	4a4f      	ldr	r2, [pc, #316]	; (800368c <problem_fetch+0x2028>)
 8003550:	461d      	mov	r5, r3
 8003552:	4614      	mov	r4, r2
 8003554:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003556:	6028      	str	r0, [r5, #0]
 8003558:	6069      	str	r1, [r5, #4]
 800355a:	60aa      	str	r2, [r5, #8]
 800355c:	60eb      	str	r3, [r5, #12]
 800355e:	7823      	ldrb	r3, [r4, #0]
 8003560:	742b      	strb	r3, [r5, #16]
			strcpy(p->grade,"7B+");
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8003568:	4a49      	ldr	r2, [pc, #292]	; (8003690 <problem_fetch+0x202c>)
 800356a:	6810      	ldr	r0, [r2, #0]
 800356c:	6018      	str	r0, [r3, #0]
			p->moveSize = 9;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	2209      	movs	r2, #9
 8003572:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"C,D,E,D,E,B,C,A,B");
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	33a4      	adds	r3, #164	; 0xa4
 8003578:	4a46      	ldr	r2, [pc, #280]	; (8003694 <problem_fetch+0x2030>)
 800357a:	461d      	mov	r5, r3
 800357c:	4614      	mov	r4, r2
 800357e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003580:	6028      	str	r0, [r5, #0]
 8003582:	6069      	str	r1, [r5, #4]
 8003584:	60aa      	str	r2, [r5, #8]
 8003586:	60eb      	str	r3, [r5, #12]
 8003588:	8823      	ldrh	r3, [r4, #0]
 800358a:	822b      	strh	r3, [r5, #16]
			strcpy(p->moveNumbers,"5,7,9,11,14,12,16,18,6");
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	3304      	adds	r3, #4
 8003590:	4a41      	ldr	r2, [pc, #260]	; (8003698 <problem_fetch+0x2034>)
 8003592:	461c      	mov	r4, r3
 8003594:	4615      	mov	r5, r2
 8003596:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003598:	6020      	str	r0, [r4, #0]
 800359a:	6061      	str	r1, [r4, #4]
 800359c:	60a2      	str	r2, [r4, #8]
 800359e:	60e3      	str	r3, [r4, #12]
 80035a0:	6828      	ldr	r0, [r5, #0]
 80035a2:	6120      	str	r0, [r4, #16]
 80035a4:	88ab      	ldrh	r3, [r5, #4]
 80035a6:	79aa      	ldrb	r2, [r5, #6]
 80035a8:	82a3      	strh	r3, [r4, #20]
 80035aa:	4613      	mov	r3, r2
 80035ac:	75a3      	strb	r3, [r4, #22]
			strcpy(p->startFinish,"s,d,d,d,d,d,d,e,s");
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 80035b4:	4a39      	ldr	r2, [pc, #228]	; (800369c <problem_fetch+0x2038>)
 80035b6:	461d      	mov	r5, r3
 80035b8:	4614      	mov	r4, r2
 80035ba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80035bc:	6028      	str	r0, [r5, #0]
 80035be:	6069      	str	r1, [r5, #4]
 80035c0:	60aa      	str	r2, [r5, #8]
 80035c2:	60eb      	str	r3, [r5, #12]
 80035c4:	8823      	ldrh	r3, [r4, #0]
 80035c6:	822b      	strh	r3, [r5, #16]
			break;
 80035c8:	f018 bf7c 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 37 :
			strcpy(p->name,"MOMMSEN'S#2");
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80035d2:	4a33      	ldr	r2, [pc, #204]	; (80036a0 <problem_fetch+0x203c>)
 80035d4:	461c      	mov	r4, r3
 80035d6:	4613      	mov	r3, r2
 80035d8:	cb07      	ldmia	r3!, {r0, r1, r2}
 80035da:	6020      	str	r0, [r4, #0]
 80035dc:	6061      	str	r1, [r4, #4]
 80035de:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade,"6C");
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80035e6:	4a2f      	ldr	r2, [pc, #188]	; (80036a4 <problem_fetch+0x2040>)
 80035e8:	8811      	ldrh	r1, [r2, #0]
 80035ea:	7892      	ldrb	r2, [r2, #2]
 80035ec:	8019      	strh	r1, [r3, #0]
 80035ee:	709a      	strb	r2, [r3, #2]
			p->moveSize = 7;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	2207      	movs	r2, #7
 80035f4:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,G,G,E,I,G,I");
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	33a4      	adds	r3, #164	; 0xa4
 80035fa:	4a2b      	ldr	r2, [pc, #172]	; (80036a8 <problem_fetch+0x2044>)
 80035fc:	461c      	mov	r4, r3
 80035fe:	4613      	mov	r3, r2
 8003600:	cb07      	ldmia	r3!, {r0, r1, r2}
 8003602:	6020      	str	r0, [r4, #0]
 8003604:	6061      	str	r1, [r4, #4]
 8003606:	60a2      	str	r2, [r4, #8]
 8003608:	881b      	ldrh	r3, [r3, #0]
 800360a:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,6,9,12,14,15,18");
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	3304      	adds	r3, #4
 8003610:	4a26      	ldr	r2, [pc, #152]	; (80036ac <problem_fetch+0x2048>)
 8003612:	461d      	mov	r5, r3
 8003614:	4614      	mov	r4, r2
 8003616:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003618:	6028      	str	r0, [r5, #0]
 800361a:	6069      	str	r1, [r5, #4]
 800361c:	60aa      	str	r2, [r5, #8]
 800361e:	60eb      	str	r3, [r5, #12]
 8003620:	8823      	ldrh	r3, [r4, #0]
 8003622:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800362a:	4a21      	ldr	r2, [pc, #132]	; (80036b0 <problem_fetch+0x204c>)
 800362c:	461c      	mov	r4, r3
 800362e:	4613      	mov	r3, r2
 8003630:	cb07      	ldmia	r3!, {r0, r1, r2}
 8003632:	6020      	str	r0, [r4, #0]
 8003634:	6061      	str	r1, [r4, #4]
 8003636:	60a2      	str	r2, [r4, #8]
 8003638:	881b      	ldrh	r3, [r3, #0]
 800363a:	81a3      	strh	r3, [r4, #12]
			break;
 800363c:	f018 bf42 	b.w	801c4c4 <problem_fetch+0x1ae60>
 8003640:	08024184 	.word	0x08024184
 8003644:	08023b24 	.word	0x08023b24
 8003648:	08024194 	.word	0x08024194
 800364c:	080241a8 	.word	0x080241a8
 8003650:	080241c4 	.word	0x080241c4
 8003654:	080241d8 	.word	0x080241d8
 8003658:	08023cc4 	.word	0x08023cc4
 800365c:	080241e8 	.word	0x080241e8
 8003660:	080241f4 	.word	0x080241f4
 8003664:	08024204 	.word	0x08024204
 8003668:	08024210 	.word	0x08024210
 800366c:	0802421c 	.word	0x0802421c
 8003670:	08024220 	.word	0x08024220
 8003674:	0802422c 	.word	0x0802422c
 8003678:	08023ec0 	.word	0x08023ec0
 800367c:	08024240 	.word	0x08024240
 8003680:	08024250 	.word	0x08024250
 8003684:	08024260 	.word	0x08024260
 8003688:	08024274 	.word	0x08024274
 800368c:	08024284 	.word	0x08024284
 8003690:	08023c60 	.word	0x08023c60
 8003694:	08024298 	.word	0x08024298
 8003698:	080242ac 	.word	0x080242ac
 800369c:	080242c4 	.word	0x080242c4
 80036a0:	080242d8 	.word	0x080242d8
 80036a4:	08023bf0 	.word	0x08023bf0
 80036a8:	080242e4 	.word	0x080242e4
 80036ac:	080242f4 	.word	0x080242f4
 80036b0:	08023cac 	.word	0x08023cac
		case 38 :
			strcpy(p->name,"GGGGGGH");
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80036ba:	49af      	ldr	r1, [pc, #700]	; (8003978 <problem_fetch+0x2314>)
 80036bc:	461a      	mov	r2, r3
 80036be:	460b      	mov	r3, r1
 80036c0:	cb03      	ldmia	r3!, {r0, r1}
 80036c2:	6010      	str	r0, [r2, #0]
 80036c4:	6051      	str	r1, [r2, #4]
			strcpy(p->grade,"6B+");
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80036cc:	4aab      	ldr	r2, [pc, #684]	; (800397c <problem_fetch+0x2318>)
 80036ce:	6810      	ldr	r0, [r2, #0]
 80036d0:	6018      	str	r0, [r3, #0]
			p->moveSize = 9;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	2209      	movs	r2, #9
 80036d6:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,H,I,K,H,J,I,J,K");
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	33a4      	adds	r3, #164	; 0xa4
 80036dc:	4aa8      	ldr	r2, [pc, #672]	; (8003980 <problem_fetch+0x231c>)
 80036de:	461d      	mov	r5, r3
 80036e0:	4614      	mov	r4, r2
 80036e2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80036e4:	6028      	str	r0, [r5, #0]
 80036e6:	6069      	str	r1, [r5, #4]
 80036e8:	60aa      	str	r2, [r5, #8]
 80036ea:	60eb      	str	r3, [r5, #12]
 80036ec:	8823      	ldrh	r3, [r4, #0]
 80036ee:	822b      	strh	r3, [r5, #16]
			strcpy(p->moveNumbers,"4,5,7,9,10,13,18,16,16");
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	3304      	adds	r3, #4
 80036f4:	4aa3      	ldr	r2, [pc, #652]	; (8003984 <problem_fetch+0x2320>)
 80036f6:	461c      	mov	r4, r3
 80036f8:	4615      	mov	r5, r2
 80036fa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80036fc:	6020      	str	r0, [r4, #0]
 80036fe:	6061      	str	r1, [r4, #4]
 8003700:	60a2      	str	r2, [r4, #8]
 8003702:	60e3      	str	r3, [r4, #12]
 8003704:	6828      	ldr	r0, [r5, #0]
 8003706:	6120      	str	r0, [r4, #16]
 8003708:	88ab      	ldrh	r3, [r5, #4]
 800370a:	79aa      	ldrb	r2, [r5, #6]
 800370c:	82a3      	strh	r3, [r4, #20]
 800370e:	4613      	mov	r3, r2
 8003710:	75a3      	strb	r3, [r4, #22]
			strcpy(p->startFinish,"s,s,d,d,d,d,e,d,d");
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8003718:	4a9b      	ldr	r2, [pc, #620]	; (8003988 <problem_fetch+0x2324>)
 800371a:	461d      	mov	r5, r3
 800371c:	4614      	mov	r4, r2
 800371e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003720:	6028      	str	r0, [r5, #0]
 8003722:	6069      	str	r1, [r5, #4]
 8003724:	60aa      	str	r2, [r5, #8]
 8003726:	60eb      	str	r3, [r5, #12]
 8003728:	8823      	ldrh	r3, [r4, #0]
 800372a:	822b      	strh	r3, [r5, #16]
			break;
 800372c:	f018 beca 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 39 :
			strcpy(p->name,"19-1.2");
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8003736:	4a95      	ldr	r2, [pc, #596]	; (800398c <problem_fetch+0x2328>)
 8003738:	6810      	ldr	r0, [r2, #0]
 800373a:	6018      	str	r0, [r3, #0]
 800373c:	8891      	ldrh	r1, [r2, #4]
 800373e:	7992      	ldrb	r2, [r2, #6]
 8003740:	8099      	strh	r1, [r3, #4]
 8003742:	719a      	strb	r2, [r3, #6]
			strcpy(p->grade,"7C");
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800374a:	4a91      	ldr	r2, [pc, #580]	; (8003990 <problem_fetch+0x232c>)
 800374c:	8811      	ldrh	r1, [r2, #0]
 800374e:	7892      	ldrb	r2, [r2, #2]
 8003750:	8019      	strh	r1, [r3, #0]
 8003752:	709a      	strb	r2, [r3, #2]
			p->moveSize = 8;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	2208      	movs	r2, #8
 8003758:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"B,G,D,B,C,G,I,J");
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	33a4      	adds	r3, #164	; 0xa4
 800375e:	4a8d      	ldr	r2, [pc, #564]	; (8003994 <problem_fetch+0x2330>)
 8003760:	461c      	mov	r4, r3
 8003762:	4615      	mov	r5, r2
 8003764:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003766:	6020      	str	r0, [r4, #0]
 8003768:	6061      	str	r1, [r4, #4]
 800376a:	60a2      	str	r2, [r4, #8]
 800376c:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"6,6,7,10,13,14,18,16");
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	3304      	adds	r3, #4
 8003772:	4a89      	ldr	r2, [pc, #548]	; (8003998 <problem_fetch+0x2334>)
 8003774:	461d      	mov	r5, r3
 8003776:	4614      	mov	r4, r2
 8003778:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800377a:	6028      	str	r0, [r5, #0]
 800377c:	6069      	str	r1, [r5, #4]
 800377e:	60aa      	str	r2, [r5, #8]
 8003780:	60eb      	str	r3, [r5, #12]
 8003782:	6820      	ldr	r0, [r4, #0]
 8003784:	6128      	str	r0, [r5, #16]
 8003786:	7923      	ldrb	r3, [r4, #4]
 8003788:	752b      	strb	r3, [r5, #20]
			strcpy(p->startFinish,"s,s,d,d,d,d,e,d");
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8003790:	4a82      	ldr	r2, [pc, #520]	; (800399c <problem_fetch+0x2338>)
 8003792:	461c      	mov	r4, r3
 8003794:	4615      	mov	r5, r2
 8003796:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003798:	6020      	str	r0, [r4, #0]
 800379a:	6061      	str	r1, [r4, #4]
 800379c:	60a2      	str	r2, [r4, #8]
 800379e:	60e3      	str	r3, [r4, #12]
			break;
 80037a0:	f018 be90 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 40 :
			strcpy(p->name,"BASTION");
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80037aa:	497d      	ldr	r1, [pc, #500]	; (80039a0 <problem_fetch+0x233c>)
 80037ac:	461a      	mov	r2, r3
 80037ae:	460b      	mov	r3, r1
 80037b0:	cb03      	ldmia	r3!, {r0, r1}
 80037b2:	6010      	str	r0, [r2, #0]
 80037b4:	6051      	str	r1, [r2, #4]
			strcpy(p->grade,"6C");
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80037bc:	4a79      	ldr	r2, [pc, #484]	; (80039a4 <problem_fetch+0x2340>)
 80037be:	8811      	ldrh	r1, [r2, #0]
 80037c0:	7892      	ldrb	r2, [r2, #2]
 80037c2:	8019      	strh	r1, [r3, #0]
 80037c4:	709a      	strb	r2, [r3, #2]
			p->moveSize = 10;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	220a      	movs	r2, #10
 80037ca:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"H,J,E,F,B,E,B,G,E,I");
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	33a4      	adds	r3, #164	; 0xa4
 80037d0:	4a75      	ldr	r2, [pc, #468]	; (80039a8 <problem_fetch+0x2344>)
 80037d2:	461d      	mov	r5, r3
 80037d4:	4614      	mov	r4, r2
 80037d6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80037d8:	6028      	str	r0, [r5, #0]
 80037da:	6069      	str	r1, [r5, #4]
 80037dc:	60aa      	str	r2, [r5, #8]
 80037de:	60eb      	str	r3, [r5, #12]
 80037e0:	6820      	ldr	r0, [r4, #0]
 80037e2:	6128      	str	r0, [r5, #16]
			strcpy(p->moveNumbers,"5,5,8,11,12,12,15,17,16,18");
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	3304      	adds	r3, #4
 80037e8:	4a70      	ldr	r2, [pc, #448]	; (80039ac <problem_fetch+0x2348>)
 80037ea:	461d      	mov	r5, r3
 80037ec:	4614      	mov	r4, r2
 80037ee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80037f0:	6028      	str	r0, [r5, #0]
 80037f2:	6069      	str	r1, [r5, #4]
 80037f4:	60aa      	str	r2, [r5, #8]
 80037f6:	60eb      	str	r3, [r5, #12]
 80037f8:	cc03      	ldmia	r4!, {r0, r1}
 80037fa:	6128      	str	r0, [r5, #16]
 80037fc:	6169      	str	r1, [r5, #20]
 80037fe:	8823      	ldrh	r3, [r4, #0]
 8003800:	78a2      	ldrb	r2, [r4, #2]
 8003802:	832b      	strh	r3, [r5, #24]
 8003804:	4613      	mov	r3, r2
 8003806:	76ab      	strb	r3, [r5, #26]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,d,d,e");
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800380e:	4a68      	ldr	r2, [pc, #416]	; (80039b0 <problem_fetch+0x234c>)
 8003810:	461d      	mov	r5, r3
 8003812:	4614      	mov	r4, r2
 8003814:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003816:	6028      	str	r0, [r5, #0]
 8003818:	6069      	str	r1, [r5, #4]
 800381a:	60aa      	str	r2, [r5, #8]
 800381c:	60eb      	str	r3, [r5, #12]
 800381e:	6820      	ldr	r0, [r4, #0]
 8003820:	6128      	str	r0, [r5, #16]
			break;
 8003822:	f018 be4f 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 41 :
			strcpy(p->name,"GOBRIGHT SPECIAL");
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800382c:	4a61      	ldr	r2, [pc, #388]	; (80039b4 <problem_fetch+0x2350>)
 800382e:	461d      	mov	r5, r3
 8003830:	4614      	mov	r4, r2
 8003832:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003834:	6028      	str	r0, [r5, #0]
 8003836:	6069      	str	r1, [r5, #4]
 8003838:	60aa      	str	r2, [r5, #8]
 800383a:	60eb      	str	r3, [r5, #12]
 800383c:	7823      	ldrb	r3, [r4, #0]
 800383e:	742b      	strb	r3, [r5, #16]
			strcpy(p->grade,"7A");
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8003846:	4a5c      	ldr	r2, [pc, #368]	; (80039b8 <problem_fetch+0x2354>)
 8003848:	8811      	ldrh	r1, [r2, #0]
 800384a:	7892      	ldrb	r2, [r2, #2]
 800384c:	8019      	strh	r1, [r3, #0]
 800384e:	709a      	strb	r2, [r3, #2]
			p->moveSize = 5;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	2205      	movs	r2, #5
 8003854:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"B,H,H,C,D");
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	33a4      	adds	r3, #164	; 0xa4
 800385a:	4958      	ldr	r1, [pc, #352]	; (80039bc <problem_fetch+0x2358>)
 800385c:	461a      	mov	r2, r3
 800385e:	460b      	mov	r3, r1
 8003860:	cb03      	ldmia	r3!, {r0, r1}
 8003862:	6010      	str	r0, [r2, #0]
 8003864:	6051      	str	r1, [r2, #4]
 8003866:	881b      	ldrh	r3, [r3, #0]
 8003868:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"6,5,10,13,18");
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	3304      	adds	r3, #4
 800386e:	4a54      	ldr	r2, [pc, #336]	; (80039c0 <problem_fetch+0x235c>)
 8003870:	461c      	mov	r4, r3
 8003872:	4613      	mov	r3, r2
 8003874:	cb07      	ldmia	r3!, {r0, r1, r2}
 8003876:	6020      	str	r0, [r4, #0]
 8003878:	6061      	str	r1, [r4, #4]
 800387a:	60a2      	str	r2, [r4, #8]
 800387c:	781b      	ldrb	r3, [r3, #0]
 800387e:	7323      	strb	r3, [r4, #12]
			strcpy(p->startFinish,"s,s,d,d,e");
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8003886:	494f      	ldr	r1, [pc, #316]	; (80039c4 <problem_fetch+0x2360>)
 8003888:	461a      	mov	r2, r3
 800388a:	460b      	mov	r3, r1
 800388c:	cb03      	ldmia	r3!, {r0, r1}
 800388e:	6010      	str	r0, [r2, #0]
 8003890:	6051      	str	r1, [r2, #4]
 8003892:	881b      	ldrh	r3, [r3, #0]
 8003894:	8113      	strh	r3, [r2, #8]
			break;
 8003896:	f018 be15 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 42 :
			strcpy(p->name,"BLACK CAT");
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80038a0:	4949      	ldr	r1, [pc, #292]	; (80039c8 <problem_fetch+0x2364>)
 80038a2:	461a      	mov	r2, r3
 80038a4:	460b      	mov	r3, r1
 80038a6:	cb03      	ldmia	r3!, {r0, r1}
 80038a8:	6010      	str	r0, [r2, #0]
 80038aa:	6051      	str	r1, [r2, #4]
 80038ac:	881b      	ldrh	r3, [r3, #0]
 80038ae:	8113      	strh	r3, [r2, #8]
			strcpy(p->grade,"7B+");
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80038b6:	4a45      	ldr	r2, [pc, #276]	; (80039cc <problem_fetch+0x2368>)
 80038b8:	6810      	ldr	r0, [r2, #0]
 80038ba:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	2207      	movs	r2, #7
 80038c0:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,H,I,E,E,J,I");
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	33a4      	adds	r3, #164	; 0xa4
 80038c6:	4a42      	ldr	r2, [pc, #264]	; (80039d0 <problem_fetch+0x236c>)
 80038c8:	461c      	mov	r4, r3
 80038ca:	4613      	mov	r3, r2
 80038cc:	cb07      	ldmia	r3!, {r0, r1, r2}
 80038ce:	6020      	str	r0, [r4, #0]
 80038d0:	6061      	str	r1, [r4, #4]
 80038d2:	60a2      	str	r2, [r4, #8]
 80038d4:	881b      	ldrh	r3, [r3, #0]
 80038d6:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,8,9,12,14,16,18");
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	3304      	adds	r3, #4
 80038dc:	4a3d      	ldr	r2, [pc, #244]	; (80039d4 <problem_fetch+0x2370>)
 80038de:	461d      	mov	r5, r3
 80038e0:	4614      	mov	r4, r2
 80038e2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80038e4:	6028      	str	r0, [r5, #0]
 80038e6:	6069      	str	r1, [r5, #4]
 80038e8:	60aa      	str	r2, [r5, #8]
 80038ea:	60eb      	str	r3, [r5, #12]
 80038ec:	8823      	ldrh	r3, [r4, #0]
 80038ee:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 80038f6:	4a38      	ldr	r2, [pc, #224]	; (80039d8 <problem_fetch+0x2374>)
 80038f8:	461c      	mov	r4, r3
 80038fa:	4613      	mov	r3, r2
 80038fc:	cb07      	ldmia	r3!, {r0, r1, r2}
 80038fe:	6020      	str	r0, [r4, #0]
 8003900:	6061      	str	r1, [r4, #4]
 8003902:	60a2      	str	r2, [r4, #8]
 8003904:	881b      	ldrh	r3, [r3, #0]
 8003906:	81a3      	strh	r3, [r4, #12]
			break;
 8003908:	f018 bddc 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 43 :
			strcpy(p->name,"WING SPANDEX");
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8003912:	4a32      	ldr	r2, [pc, #200]	; (80039dc <problem_fetch+0x2378>)
 8003914:	461c      	mov	r4, r3
 8003916:	4613      	mov	r3, r2
 8003918:	cb07      	ldmia	r3!, {r0, r1, r2}
 800391a:	6020      	str	r0, [r4, #0]
 800391c:	6061      	str	r1, [r4, #4]
 800391e:	60a2      	str	r2, [r4, #8]
 8003920:	781b      	ldrb	r3, [r3, #0]
 8003922:	7323      	strb	r3, [r4, #12]
			strcpy(p->grade,"7B");
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800392a:	4a2d      	ldr	r2, [pc, #180]	; (80039e0 <problem_fetch+0x237c>)
 800392c:	8811      	ldrh	r1, [r2, #0]
 800392e:	7892      	ldrb	r2, [r2, #2]
 8003930:	8019      	strh	r1, [r3, #0]
 8003932:	709a      	strb	r2, [r3, #2]
			p->moveSize = 6;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	2206      	movs	r2, #6
 8003938:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"E,C,F,C,G,A");
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	33a4      	adds	r3, #164	; 0xa4
 800393e:	4a29      	ldr	r2, [pc, #164]	; (80039e4 <problem_fetch+0x2380>)
 8003940:	461c      	mov	r4, r3
 8003942:	4613      	mov	r3, r2
 8003944:	cb07      	ldmia	r3!, {r0, r1, r2}
 8003946:	6020      	str	r0, [r4, #0]
 8003948:	6061      	str	r1, [r4, #4]
 800394a:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"6,8,11,13,17,18");
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	3304      	adds	r3, #4
 8003950:	4a25      	ldr	r2, [pc, #148]	; (80039e8 <problem_fetch+0x2384>)
 8003952:	461c      	mov	r4, r3
 8003954:	4615      	mov	r5, r2
 8003956:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003958:	6020      	str	r0, [r4, #0]
 800395a:	6061      	str	r1, [r4, #4]
 800395c:	60a2      	str	r2, [r4, #8]
 800395e:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8003966:	4a21      	ldr	r2, [pc, #132]	; (80039ec <problem_fetch+0x2388>)
 8003968:	461c      	mov	r4, r3
 800396a:	4613      	mov	r3, r2
 800396c:	cb07      	ldmia	r3!, {r0, r1, r2}
 800396e:	6020      	str	r0, [r4, #0]
 8003970:	6061      	str	r1, [r4, #4]
 8003972:	60a2      	str	r2, [r4, #8]
			break;
 8003974:	f018 bda6 	b.w	801c4c4 <problem_fetch+0x1ae60>
 8003978:	08024308 	.word	0x08024308
 800397c:	08023b24 	.word	0x08023b24
 8003980:	08024310 	.word	0x08024310
 8003984:	08024324 	.word	0x08024324
 8003988:	0802433c 	.word	0x0802433c
 800398c:	08024350 	.word	0x08024350
 8003990:	08024358 	.word	0x08024358
 8003994:	0802435c 	.word	0x0802435c
 8003998:	0802436c 	.word	0x0802436c
 800399c:	08024384 	.word	0x08024384
 80039a0:	08024394 	.word	0x08024394
 80039a4:	08023bf0 	.word	0x08023bf0
 80039a8:	0802439c 	.word	0x0802439c
 80039ac:	080243b0 	.word	0x080243b0
 80039b0:	080243cc 	.word	0x080243cc
 80039b4:	080243e0 	.word	0x080243e0
 80039b8:	08023ae4 	.word	0x08023ae4
 80039bc:	080243f4 	.word	0x080243f4
 80039c0:	08024400 	.word	0x08024400
 80039c4:	08024204 	.word	0x08024204
 80039c8:	08024410 	.word	0x08024410
 80039cc:	08023c60 	.word	0x08023c60
 80039d0:	0802441c 	.word	0x0802441c
 80039d4:	0802442c 	.word	0x0802442c
 80039d8:	08023cac 	.word	0x08023cac
 80039dc:	08024440 	.word	0x08024440
 80039e0:	0802421c 	.word	0x0802421c
 80039e4:	08024450 	.word	0x08024450
 80039e8:	0802445c 	.word	0x0802445c
 80039ec:	08023ec0 	.word	0x08023ec0
		case 44 :
			strcpy(p->name,"CAVATELLI");
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80039f6:	49b2      	ldr	r1, [pc, #712]	; (8003cc0 <problem_fetch+0x265c>)
 80039f8:	461a      	mov	r2, r3
 80039fa:	460b      	mov	r3, r1
 80039fc:	cb03      	ldmia	r3!, {r0, r1}
 80039fe:	6010      	str	r0, [r2, #0]
 8003a00:	6051      	str	r1, [r2, #4]
 8003a02:	881b      	ldrh	r3, [r3, #0]
 8003a04:	8113      	strh	r3, [r2, #8]
			strcpy(p->grade,"6C+");
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8003a0c:	4aad      	ldr	r2, [pc, #692]	; (8003cc4 <problem_fetch+0x2660>)
 8003a0e:	6810      	ldr	r0, [r2, #0]
 8003a10:	6018      	str	r0, [r3, #0]
			p->moveSize = 5;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	2205      	movs	r2, #5
 8003a16:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,I,F,J,D");
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	33a4      	adds	r3, #164	; 0xa4
 8003a1c:	49aa      	ldr	r1, [pc, #680]	; (8003cc8 <problem_fetch+0x2664>)
 8003a1e:	461a      	mov	r2, r3
 8003a20:	460b      	mov	r3, r1
 8003a22:	cb03      	ldmia	r3!, {r0, r1}
 8003a24:	6010      	str	r0, [r2, #0]
 8003a26:	6051      	str	r1, [r2, #4]
 8003a28:	881b      	ldrh	r3, [r3, #0]
 8003a2a:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"5,10,13,16,18");
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	3304      	adds	r3, #4
 8003a30:	4aa6      	ldr	r2, [pc, #664]	; (8003ccc <problem_fetch+0x2668>)
 8003a32:	461c      	mov	r4, r3
 8003a34:	4613      	mov	r3, r2
 8003a36:	cb07      	ldmia	r3!, {r0, r1, r2}
 8003a38:	6020      	str	r0, [r4, #0]
 8003a3a:	6061      	str	r1, [r4, #4]
 8003a3c:	60a2      	str	r2, [r4, #8]
 8003a3e:	881b      	ldrh	r3, [r3, #0]
 8003a40:	81a3      	strh	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,e");
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8003a48:	49a1      	ldr	r1, [pc, #644]	; (8003cd0 <problem_fetch+0x266c>)
 8003a4a:	461a      	mov	r2, r3
 8003a4c:	460b      	mov	r3, r1
 8003a4e:	cb03      	ldmia	r3!, {r0, r1}
 8003a50:	6010      	str	r0, [r2, #0]
 8003a52:	6051      	str	r1, [r2, #4]
 8003a54:	881b      	ldrh	r3, [r3, #0]
 8003a56:	8113      	strh	r3, [r2, #8]
			break;
 8003a58:	f018 bd34 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 45 :
			strcpy(p->name,"THE BIRTH OF TRAGEDY");
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8003a62:	4a9c      	ldr	r2, [pc, #624]	; (8003cd4 <problem_fetch+0x2670>)
 8003a64:	461d      	mov	r5, r3
 8003a66:	4614      	mov	r4, r2
 8003a68:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003a6a:	6028      	str	r0, [r5, #0]
 8003a6c:	6069      	str	r1, [r5, #4]
 8003a6e:	60aa      	str	r2, [r5, #8]
 8003a70:	60eb      	str	r3, [r5, #12]
 8003a72:	6820      	ldr	r0, [r4, #0]
 8003a74:	6128      	str	r0, [r5, #16]
 8003a76:	7923      	ldrb	r3, [r4, #4]
 8003a78:	752b      	strb	r3, [r5, #20]
			strcpy(p->grade,"6C");
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8003a80:	4a95      	ldr	r2, [pc, #596]	; (8003cd8 <problem_fetch+0x2674>)
 8003a82:	8811      	ldrh	r1, [r2, #0]
 8003a84:	7892      	ldrb	r2, [r2, #2]
 8003a86:	8019      	strh	r1, [r3, #0]
 8003a88:	709a      	strb	r2, [r3, #2]
			p->moveSize = 7;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	2207      	movs	r2, #7
 8003a8e:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,J,G,G,C,D,A");
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	33a4      	adds	r3, #164	; 0xa4
 8003a94:	4a91      	ldr	r2, [pc, #580]	; (8003cdc <problem_fetch+0x2678>)
 8003a96:	461c      	mov	r4, r3
 8003a98:	4613      	mov	r3, r2
 8003a9a:	cb07      	ldmia	r3!, {r0, r1, r2}
 8003a9c:	6020      	str	r0, [r4, #0]
 8003a9e:	6061      	str	r1, [r4, #4]
 8003aa0:	60a2      	str	r2, [r4, #8]
 8003aa2:	881b      	ldrh	r3, [r3, #0]
 8003aa4:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,7,9,10,13,15,18");
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	3304      	adds	r3, #4
 8003aaa:	4a8d      	ldr	r2, [pc, #564]	; (8003ce0 <problem_fetch+0x267c>)
 8003aac:	461d      	mov	r5, r3
 8003aae:	4614      	mov	r4, r2
 8003ab0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003ab2:	6028      	str	r0, [r5, #0]
 8003ab4:	6069      	str	r1, [r5, #4]
 8003ab6:	60aa      	str	r2, [r5, #8]
 8003ab8:	60eb      	str	r3, [r5, #12]
 8003aba:	8823      	ldrh	r3, [r4, #0]
 8003abc:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8003ac4:	4a87      	ldr	r2, [pc, #540]	; (8003ce4 <problem_fetch+0x2680>)
 8003ac6:	461c      	mov	r4, r3
 8003ac8:	4613      	mov	r3, r2
 8003aca:	cb07      	ldmia	r3!, {r0, r1, r2}
 8003acc:	6020      	str	r0, [r4, #0]
 8003ace:	6061      	str	r1, [r4, #4]
 8003ad0:	60a2      	str	r2, [r4, #8]
 8003ad2:	881b      	ldrh	r3, [r3, #0]
 8003ad4:	81a3      	strh	r3, [r4, #12]
			break;
 8003ad6:	f018 bcf5 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 46 :
			strcpy(p->name,"THE WILL TO POWER");
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8003ae0:	4a81      	ldr	r2, [pc, #516]	; (8003ce8 <problem_fetch+0x2684>)
 8003ae2:	461d      	mov	r5, r3
 8003ae4:	4614      	mov	r4, r2
 8003ae6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003ae8:	6028      	str	r0, [r5, #0]
 8003aea:	6069      	str	r1, [r5, #4]
 8003aec:	60aa      	str	r2, [r5, #8]
 8003aee:	60eb      	str	r3, [r5, #12]
 8003af0:	8823      	ldrh	r3, [r4, #0]
 8003af2:	822b      	strh	r3, [r5, #16]
			strcpy(p->grade,"6C");
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8003afa:	4a77      	ldr	r2, [pc, #476]	; (8003cd8 <problem_fetch+0x2674>)
 8003afc:	8811      	ldrh	r1, [r2, #0]
 8003afe:	7892      	ldrb	r2, [r2, #2]
 8003b00:	8019      	strh	r1, [r3, #0]
 8003b02:	709a      	strb	r2, [r3, #2]
			p->moveSize = 8;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	2208      	movs	r2, #8
 8003b08:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"H,E,G,H,K,G,H,D");
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	33a4      	adds	r3, #164	; 0xa4
 8003b0e:	4a77      	ldr	r2, [pc, #476]	; (8003cec <problem_fetch+0x2688>)
 8003b10:	461c      	mov	r4, r3
 8003b12:	4615      	mov	r5, r2
 8003b14:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003b16:	6020      	str	r0, [r4, #0]
 8003b18:	6061      	str	r1, [r4, #4]
 8003b1a:	60a2      	str	r2, [r4, #8]
 8003b1c:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,6,9,12,14,17,16,18");
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	3304      	adds	r3, #4
 8003b22:	4a73      	ldr	r2, [pc, #460]	; (8003cf0 <problem_fetch+0x268c>)
 8003b24:	461d      	mov	r5, r3
 8003b26:	4614      	mov	r4, r2
 8003b28:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003b2a:	6028      	str	r0, [r5, #0]
 8003b2c:	6069      	str	r1, [r5, #4]
 8003b2e:	60aa      	str	r2, [r5, #8]
 8003b30:	60eb      	str	r3, [r5, #12]
 8003b32:	6820      	ldr	r0, [r4, #0]
 8003b34:	6128      	str	r0, [r5, #16]
 8003b36:	7923      	ldrb	r3, [r4, #4]
 8003b38:	752b      	strb	r3, [r5, #20]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,e");
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8003b40:	4a6c      	ldr	r2, [pc, #432]	; (8003cf4 <problem_fetch+0x2690>)
 8003b42:	461c      	mov	r4, r3
 8003b44:	4615      	mov	r5, r2
 8003b46:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003b48:	6020      	str	r0, [r4, #0]
 8003b4a:	6061      	str	r1, [r4, #4]
 8003b4c:	60a2      	str	r2, [r4, #8]
 8003b4e:	60e3      	str	r3, [r4, #12]
			break;
 8003b50:	f018 bcb8 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 47 :
			strcpy(p->name,"BEYOND GOOD AND EVIL");
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8003b5a:	4a67      	ldr	r2, [pc, #412]	; (8003cf8 <problem_fetch+0x2694>)
 8003b5c:	461d      	mov	r5, r3
 8003b5e:	4614      	mov	r4, r2
 8003b60:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003b62:	6028      	str	r0, [r5, #0]
 8003b64:	6069      	str	r1, [r5, #4]
 8003b66:	60aa      	str	r2, [r5, #8]
 8003b68:	60eb      	str	r3, [r5, #12]
 8003b6a:	6820      	ldr	r0, [r4, #0]
 8003b6c:	6128      	str	r0, [r5, #16]
 8003b6e:	7923      	ldrb	r3, [r4, #4]
 8003b70:	752b      	strb	r3, [r5, #20]
			strcpy(p->grade,"6C");
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8003b78:	4a57      	ldr	r2, [pc, #348]	; (8003cd8 <problem_fetch+0x2674>)
 8003b7a:	8811      	ldrh	r1, [r2, #0]
 8003b7c:	7892      	ldrb	r2, [r2, #2]
 8003b7e:	8019      	strh	r1, [r3, #0]
 8003b80:	709a      	strb	r2, [r3, #2]
			p->moveSize = 8;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	2208      	movs	r2, #8
 8003b86:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"E,G,G,E,B,G,E,I");
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	33a4      	adds	r3, #164	; 0xa4
 8003b8c:	4a5b      	ldr	r2, [pc, #364]	; (8003cfc <problem_fetch+0x2698>)
 8003b8e:	461c      	mov	r4, r3
 8003b90:	4615      	mov	r5, r2
 8003b92:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003b94:	6020      	str	r0, [r4, #0]
 8003b96:	6061      	str	r1, [r4, #4]
 8003b98:	60a2      	str	r2, [r4, #8]
 8003b9a:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"8,4,6,12,15,17,16,18");
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	3304      	adds	r3, #4
 8003ba0:	4a57      	ldr	r2, [pc, #348]	; (8003d00 <problem_fetch+0x269c>)
 8003ba2:	461d      	mov	r5, r3
 8003ba4:	4614      	mov	r4, r2
 8003ba6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003ba8:	6028      	str	r0, [r5, #0]
 8003baa:	6069      	str	r1, [r5, #4]
 8003bac:	60aa      	str	r2, [r5, #8]
 8003bae:	60eb      	str	r3, [r5, #12]
 8003bb0:	6820      	ldr	r0, [r4, #0]
 8003bb2:	6128      	str	r0, [r5, #16]
 8003bb4:	7923      	ldrb	r3, [r4, #4]
 8003bb6:	752b      	strb	r3, [r5, #20]
			strcpy(p->startFinish,"d,s,s,d,d,d,d,e");
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8003bbe:	4a51      	ldr	r2, [pc, #324]	; (8003d04 <problem_fetch+0x26a0>)
 8003bc0:	461c      	mov	r4, r3
 8003bc2:	4615      	mov	r5, r2
 8003bc4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003bc6:	6020      	str	r0, [r4, #0]
 8003bc8:	6061      	str	r1, [r4, #4]
 8003bca:	60a2      	str	r2, [r4, #8]
 8003bcc:	60e3      	str	r3, [r4, #12]
			break;
 8003bce:	f018 bc79 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 48 :
			strcpy(p->name,"BLACK CHAMBER ORDER");
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8003bd8:	4a4b      	ldr	r2, [pc, #300]	; (8003d08 <problem_fetch+0x26a4>)
 8003bda:	461d      	mov	r5, r3
 8003bdc:	4614      	mov	r4, r2
 8003bde:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003be0:	6028      	str	r0, [r5, #0]
 8003be2:	6069      	str	r1, [r5, #4]
 8003be4:	60aa      	str	r2, [r5, #8]
 8003be6:	60eb      	str	r3, [r5, #12]
 8003be8:	6820      	ldr	r0, [r4, #0]
 8003bea:	6128      	str	r0, [r5, #16]
			strcpy(p->grade,"7A");
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8003bf2:	4a46      	ldr	r2, [pc, #280]	; (8003d0c <problem_fetch+0x26a8>)
 8003bf4:	8811      	ldrh	r1, [r2, #0]
 8003bf6:	7892      	ldrb	r2, [r2, #2]
 8003bf8:	8019      	strh	r1, [r3, #0]
 8003bfa:	709a      	strb	r2, [r3, #2]
			p->moveSize = 7;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	2207      	movs	r2, #7
 8003c00:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"C,E,C,E,B,D,A");
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	33a4      	adds	r3, #164	; 0xa4
 8003c06:	4a42      	ldr	r2, [pc, #264]	; (8003d10 <problem_fetch+0x26ac>)
 8003c08:	461c      	mov	r4, r3
 8003c0a:	4613      	mov	r3, r2
 8003c0c:	cb07      	ldmia	r3!, {r0, r1, r2}
 8003c0e:	6020      	str	r0, [r4, #0]
 8003c10:	6061      	str	r1, [r4, #4]
 8003c12:	60a2      	str	r2, [r4, #8]
 8003c14:	881b      	ldrh	r3, [r3, #0]
 8003c16:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,6,8,9,12,15,18");
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	3304      	adds	r3, #4
 8003c1c:	4a3d      	ldr	r2, [pc, #244]	; (8003d14 <problem_fetch+0x26b0>)
 8003c1e:	461d      	mov	r5, r3
 8003c20:	4614      	mov	r4, r2
 8003c22:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003c24:	6028      	str	r0, [r5, #0]
 8003c26:	6069      	str	r1, [r5, #4]
 8003c28:	60aa      	str	r2, [r5, #8]
 8003c2a:	60eb      	str	r3, [r5, #12]
 8003c2c:	7823      	ldrb	r3, [r4, #0]
 8003c2e:	742b      	strb	r3, [r5, #16]
			strcpy(p->startFinish,"s,s,d,d,d,d,e");
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8003c36:	4a38      	ldr	r2, [pc, #224]	; (8003d18 <problem_fetch+0x26b4>)
 8003c38:	461c      	mov	r4, r3
 8003c3a:	4613      	mov	r3, r2
 8003c3c:	cb07      	ldmia	r3!, {r0, r1, r2}
 8003c3e:	6020      	str	r0, [r4, #0]
 8003c40:	6061      	str	r1, [r4, #4]
 8003c42:	60a2      	str	r2, [r4, #8]
 8003c44:	881b      	ldrh	r3, [r3, #0]
 8003c46:	81a3      	strh	r3, [r4, #12]
			break;
 8003c48:	f018 bc3c 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 49 :
			strcpy(p->name,"CALCULO");
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8003c52:	4932      	ldr	r1, [pc, #200]	; (8003d1c <problem_fetch+0x26b8>)
 8003c54:	461a      	mov	r2, r3
 8003c56:	460b      	mov	r3, r1
 8003c58:	cb03      	ldmia	r3!, {r0, r1}
 8003c5a:	6010      	str	r0, [r2, #0]
 8003c5c:	6051      	str	r1, [r2, #4]
			strcpy(p->grade,"6C");
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8003c64:	4a1c      	ldr	r2, [pc, #112]	; (8003cd8 <problem_fetch+0x2674>)
 8003c66:	8811      	ldrh	r1, [r2, #0]
 8003c68:	7892      	ldrb	r2, [r2, #2]
 8003c6a:	8019      	strh	r1, [r3, #0]
 8003c6c:	709a      	strb	r2, [r3, #2]
			p->moveSize = 7;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	2207      	movs	r2, #7
 8003c72:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,E,E,E,F,G,I");
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	33a4      	adds	r3, #164	; 0xa4
 8003c78:	4a29      	ldr	r2, [pc, #164]	; (8003d20 <problem_fetch+0x26bc>)
 8003c7a:	461c      	mov	r4, r3
 8003c7c:	4613      	mov	r3, r2
 8003c7e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8003c80:	6020      	str	r0, [r4, #0]
 8003c82:	6061      	str	r1, [r4, #4]
 8003c84:	60a2      	str	r2, [r4, #8]
 8003c86:	881b      	ldrh	r3, [r3, #0]
 8003c88:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,6,9,12,13,15,18");
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	3304      	adds	r3, #4
 8003c8e:	4a25      	ldr	r2, [pc, #148]	; (8003d24 <problem_fetch+0x26c0>)
 8003c90:	461d      	mov	r5, r3
 8003c92:	4614      	mov	r4, r2
 8003c94:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003c96:	6028      	str	r0, [r5, #0]
 8003c98:	6069      	str	r1, [r5, #4]
 8003c9a:	60aa      	str	r2, [r5, #8]
 8003c9c:	60eb      	str	r3, [r5, #12]
 8003c9e:	8823      	ldrh	r3, [r4, #0]
 8003ca0:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8003ca8:	4a0e      	ldr	r2, [pc, #56]	; (8003ce4 <problem_fetch+0x2680>)
 8003caa:	461c      	mov	r4, r3
 8003cac:	4613      	mov	r3, r2
 8003cae:	cb07      	ldmia	r3!, {r0, r1, r2}
 8003cb0:	6020      	str	r0, [r4, #0]
 8003cb2:	6061      	str	r1, [r4, #4]
 8003cb4:	60a2      	str	r2, [r4, #8]
 8003cb6:	881b      	ldrh	r3, [r3, #0]
 8003cb8:	81a3      	strh	r3, [r4, #12]
			break;
 8003cba:	f018 bc03 	b.w	801c4c4 <problem_fetch+0x1ae60>
 8003cbe:	bf00      	nop
 8003cc0:	0802446c 	.word	0x0802446c
 8003cc4:	08023bbc 	.word	0x08023bbc
 8003cc8:	08024478 	.word	0x08024478
 8003ccc:	08024484 	.word	0x08024484
 8003cd0:	08023ff0 	.word	0x08023ff0
 8003cd4:	08024494 	.word	0x08024494
 8003cd8:	08023bf0 	.word	0x08023bf0
 8003cdc:	080244ac 	.word	0x080244ac
 8003ce0:	080244bc 	.word	0x080244bc
 8003ce4:	08023cac 	.word	0x08023cac
 8003ce8:	080244d0 	.word	0x080244d0
 8003cec:	080244e4 	.word	0x080244e4
 8003cf0:	080244f4 	.word	0x080244f4
 8003cf4:	08023c48 	.word	0x08023c48
 8003cf8:	0802450c 	.word	0x0802450c
 8003cfc:	08024524 	.word	0x08024524
 8003d00:	08024534 	.word	0x08024534
 8003d04:	0802454c 	.word	0x0802454c
 8003d08:	0802455c 	.word	0x0802455c
 8003d0c:	08023ae4 	.word	0x08023ae4
 8003d10:	08024570 	.word	0x08024570
 8003d14:	08024580 	.word	0x08024580
 8003d18:	08023b9c 	.word	0x08023b9c
 8003d1c:	08024594 	.word	0x08024594
 8003d20:	0802459c 	.word	0x0802459c
 8003d24:	080245ac 	.word	0x080245ac
		case 50 :
			strcpy(p->name,"LONG BLACK");
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8003d2e:	49bd      	ldr	r1, [pc, #756]	; (8004024 <problem_fetch+0x29c0>)
 8003d30:	461a      	mov	r2, r3
 8003d32:	460b      	mov	r3, r1
 8003d34:	cb03      	ldmia	r3!, {r0, r1}
 8003d36:	6010      	str	r0, [r2, #0]
 8003d38:	6051      	str	r1, [r2, #4]
 8003d3a:	8819      	ldrh	r1, [r3, #0]
 8003d3c:	789b      	ldrb	r3, [r3, #2]
 8003d3e:	8111      	strh	r1, [r2, #8]
 8003d40:	7293      	strb	r3, [r2, #10]
			strcpy(p->grade,"6B+");
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8003d48:	4ab7      	ldr	r2, [pc, #732]	; (8004028 <problem_fetch+0x29c4>)
 8003d4a:	6810      	ldr	r0, [r2, #0]
 8003d4c:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	2206      	movs	r2, #6
 8003d52:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,E,H,E,E,D");
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	33a4      	adds	r3, #164	; 0xa4
 8003d58:	4ab4      	ldr	r2, [pc, #720]	; (800402c <problem_fetch+0x29c8>)
 8003d5a:	461c      	mov	r4, r3
 8003d5c:	4613      	mov	r3, r2
 8003d5e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8003d60:	6020      	str	r0, [r4, #0]
 8003d62:	6061      	str	r1, [r4, #4]
 8003d64:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,6,10,14,16,18");
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	3304      	adds	r3, #4
 8003d6a:	4ab1      	ldr	r2, [pc, #708]	; (8004030 <problem_fetch+0x29cc>)
 8003d6c:	461c      	mov	r4, r3
 8003d6e:	4615      	mov	r5, r2
 8003d70:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003d72:	6020      	str	r0, [r4, #0]
 8003d74:	6061      	str	r1, [r4, #4]
 8003d76:	60a2      	str	r2, [r4, #8]
 8003d78:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,s,d,d,d,e");
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8003d80:	4aac      	ldr	r2, [pc, #688]	; (8004034 <problem_fetch+0x29d0>)
 8003d82:	461c      	mov	r4, r3
 8003d84:	4613      	mov	r3, r2
 8003d86:	cb07      	ldmia	r3!, {r0, r1, r2}
 8003d88:	6020      	str	r0, [r4, #0]
 8003d8a:	6061      	str	r1, [r4, #4]
 8003d8c:	60a2      	str	r2, [r4, #8]
			break;
 8003d8e:	f018 bb99 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 51 :
			strcpy(p->name,"BLACK JACK");
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8003d98:	49a7      	ldr	r1, [pc, #668]	; (8004038 <problem_fetch+0x29d4>)
 8003d9a:	461a      	mov	r2, r3
 8003d9c:	460b      	mov	r3, r1
 8003d9e:	cb03      	ldmia	r3!, {r0, r1}
 8003da0:	6010      	str	r0, [r2, #0]
 8003da2:	6051      	str	r1, [r2, #4]
 8003da4:	8819      	ldrh	r1, [r3, #0]
 8003da6:	789b      	ldrb	r3, [r3, #2]
 8003da8:	8111      	strh	r1, [r2, #8]
 8003daa:	7293      	strb	r3, [r2, #10]
			strcpy(p->grade,"7A");
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8003db2:	4aa2      	ldr	r2, [pc, #648]	; (800403c <problem_fetch+0x29d8>)
 8003db4:	8811      	ldrh	r1, [r2, #0]
 8003db6:	7892      	ldrb	r2, [r2, #2]
 8003db8:	8019      	strh	r1, [r3, #0]
 8003dba:	709a      	strb	r2, [r3, #2]
			p->moveSize = 6;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	2206      	movs	r2, #6
 8003dc0:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"C,G,E,F,A,D");
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	33a4      	adds	r3, #164	; 0xa4
 8003dc6:	4a9e      	ldr	r2, [pc, #632]	; (8004040 <problem_fetch+0x29dc>)
 8003dc8:	461c      	mov	r4, r3
 8003dca:	4613      	mov	r3, r2
 8003dcc:	cb07      	ldmia	r3!, {r0, r1, r2}
 8003dce:	6020      	str	r0, [r4, #0]
 8003dd0:	6061      	str	r1, [r4, #4]
 8003dd2:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,9,12,13,14,18");
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	3304      	adds	r3, #4
 8003dd8:	4a9a      	ldr	r2, [pc, #616]	; (8004044 <problem_fetch+0x29e0>)
 8003dda:	461c      	mov	r4, r3
 8003ddc:	4615      	mov	r5, r2
 8003dde:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003de0:	6020      	str	r0, [r4, #0]
 8003de2:	6061      	str	r1, [r4, #4]
 8003de4:	60a2      	str	r2, [r4, #8]
 8003de6:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8003dee:	4a96      	ldr	r2, [pc, #600]	; (8004048 <problem_fetch+0x29e4>)
 8003df0:	461c      	mov	r4, r3
 8003df2:	4613      	mov	r3, r2
 8003df4:	cb07      	ldmia	r3!, {r0, r1, r2}
 8003df6:	6020      	str	r0, [r4, #0]
 8003df8:	6061      	str	r1, [r4, #4]
 8003dfa:	60a2      	str	r2, [r4, #8]
			break;
 8003dfc:	f018 bb62 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 52 :
			strcpy(p->name,"DITA DI BURRO");
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8003e06:	4a91      	ldr	r2, [pc, #580]	; (800404c <problem_fetch+0x29e8>)
 8003e08:	461c      	mov	r4, r3
 8003e0a:	4613      	mov	r3, r2
 8003e0c:	cb07      	ldmia	r3!, {r0, r1, r2}
 8003e0e:	6020      	str	r0, [r4, #0]
 8003e10:	6061      	str	r1, [r4, #4]
 8003e12:	60a2      	str	r2, [r4, #8]
 8003e14:	881b      	ldrh	r3, [r3, #0]
 8003e16:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade,"7A");
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8003e1e:	4a87      	ldr	r2, [pc, #540]	; (800403c <problem_fetch+0x29d8>)
 8003e20:	8811      	ldrh	r1, [r2, #0]
 8003e22:	7892      	ldrb	r2, [r2, #2]
 8003e24:	8019      	strh	r1, [r3, #0]
 8003e26:	709a      	strb	r2, [r3, #2]
			p->moveSize = 4;
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	2204      	movs	r2, #4
 8003e2c:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,J,C,D");
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	33a4      	adds	r3, #164	; 0xa4
 8003e32:	4987      	ldr	r1, [pc, #540]	; (8004050 <problem_fetch+0x29ec>)
 8003e34:	461a      	mov	r2, r3
 8003e36:	460b      	mov	r3, r1
 8003e38:	cb03      	ldmia	r3!, {r0, r1}
 8003e3a:	6010      	str	r0, [r2, #0]
 8003e3c:	6051      	str	r1, [r2, #4]
			strcpy(p->moveNumbers,"9,5,13,18");
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	3304      	adds	r3, #4
 8003e42:	4984      	ldr	r1, [pc, #528]	; (8004054 <problem_fetch+0x29f0>)
 8003e44:	461a      	mov	r2, r3
 8003e46:	460b      	mov	r3, r1
 8003e48:	cb03      	ldmia	r3!, {r0, r1}
 8003e4a:	6010      	str	r0, [r2, #0]
 8003e4c:	6051      	str	r1, [r2, #4]
 8003e4e:	881b      	ldrh	r3, [r3, #0]
 8003e50:	8113      	strh	r3, [r2, #8]
			strcpy(p->startFinish,"d,s,d,e");
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8003e58:	497f      	ldr	r1, [pc, #508]	; (8004058 <problem_fetch+0x29f4>)
 8003e5a:	461a      	mov	r2, r3
 8003e5c:	460b      	mov	r3, r1
 8003e5e:	cb03      	ldmia	r3!, {r0, r1}
 8003e60:	6010      	str	r0, [r2, #0]
 8003e62:	6051      	str	r1, [r2, #4]
			break;
 8003e64:	f018 bb2e 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 53 :
			strcpy(p->name,"ELBOW GREASE VAR");
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8003e6e:	4a7b      	ldr	r2, [pc, #492]	; (800405c <problem_fetch+0x29f8>)
 8003e70:	461d      	mov	r5, r3
 8003e72:	4614      	mov	r4, r2
 8003e74:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003e76:	6028      	str	r0, [r5, #0]
 8003e78:	6069      	str	r1, [r5, #4]
 8003e7a:	60aa      	str	r2, [r5, #8]
 8003e7c:	60eb      	str	r3, [r5, #12]
 8003e7e:	7823      	ldrb	r3, [r4, #0]
 8003e80:	742b      	strb	r3, [r5, #16]
			strcpy(p->grade,"7C+");
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8003e88:	4a75      	ldr	r2, [pc, #468]	; (8004060 <problem_fetch+0x29fc>)
 8003e8a:	6810      	ldr	r0, [r2, #0]
 8003e8c:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	2206      	movs	r2, #6
 8003e92:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,H,G,D,D,A");
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	33a4      	adds	r3, #164	; 0xa4
 8003e98:	4a72      	ldr	r2, [pc, #456]	; (8004064 <problem_fetch+0x2a00>)
 8003e9a:	461c      	mov	r4, r3
 8003e9c:	4613      	mov	r3, r2
 8003e9e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8003ea0:	6020      	str	r0, [r4, #0]
 8003ea2:	6061      	str	r1, [r4, #4]
 8003ea4:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,8,9,11,15,18");
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	3304      	adds	r3, #4
 8003eaa:	4a6f      	ldr	r2, [pc, #444]	; (8004068 <problem_fetch+0x2a04>)
 8003eac:	461c      	mov	r4, r3
 8003eae:	4613      	mov	r3, r2
 8003eb0:	cb07      	ldmia	r3!, {r0, r1, r2}
 8003eb2:	6020      	str	r0, [r4, #0]
 8003eb4:	6061      	str	r1, [r4, #4]
 8003eb6:	60a2      	str	r2, [r4, #8]
 8003eb8:	881a      	ldrh	r2, [r3, #0]
 8003eba:	789b      	ldrb	r3, [r3, #2]
 8003ebc:	81a2      	strh	r2, [r4, #12]
 8003ebe:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8003ec6:	4a60      	ldr	r2, [pc, #384]	; (8004048 <problem_fetch+0x29e4>)
 8003ec8:	461c      	mov	r4, r3
 8003eca:	4613      	mov	r3, r2
 8003ecc:	cb07      	ldmia	r3!, {r0, r1, r2}
 8003ece:	6020      	str	r0, [r4, #0]
 8003ed0:	6061      	str	r1, [r4, #4]
 8003ed2:	60a2      	str	r2, [r4, #8]
			break;
 8003ed4:	f018 baf6 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 54 :
			strcpy(p->name,"ELBOW GREASE");
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8003ede:	4a63      	ldr	r2, [pc, #396]	; (800406c <problem_fetch+0x2a08>)
 8003ee0:	461c      	mov	r4, r3
 8003ee2:	4613      	mov	r3, r2
 8003ee4:	cb07      	ldmia	r3!, {r0, r1, r2}
 8003ee6:	6020      	str	r0, [r4, #0]
 8003ee8:	6061      	str	r1, [r4, #4]
 8003eea:	60a2      	str	r2, [r4, #8]
 8003eec:	781b      	ldrb	r3, [r3, #0]
 8003eee:	7323      	strb	r3, [r4, #12]
			strcpy(p->grade,"7B+");
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8003ef6:	4a5e      	ldr	r2, [pc, #376]	; (8004070 <problem_fetch+0x2a0c>)
 8003ef8:	6810      	ldr	r0, [r2, #0]
 8003efa:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	2207      	movs	r2, #7
 8003f00:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,H,G,D,D,C,A");
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	33a4      	adds	r3, #164	; 0xa4
 8003f06:	4a5b      	ldr	r2, [pc, #364]	; (8004074 <problem_fetch+0x2a10>)
 8003f08:	461c      	mov	r4, r3
 8003f0a:	4613      	mov	r3, r2
 8003f0c:	cb07      	ldmia	r3!, {r0, r1, r2}
 8003f0e:	6020      	str	r0, [r4, #0]
 8003f10:	6061      	str	r1, [r4, #4]
 8003f12:	60a2      	str	r2, [r4, #8]
 8003f14:	881b      	ldrh	r3, [r3, #0]
 8003f16:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,8,9,11,15,5,18");
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	3304      	adds	r3, #4
 8003f1c:	4a56      	ldr	r2, [pc, #344]	; (8004078 <problem_fetch+0x2a14>)
 8003f1e:	461d      	mov	r5, r3
 8003f20:	4614      	mov	r4, r2
 8003f22:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003f24:	6028      	str	r0, [r5, #0]
 8003f26:	6069      	str	r1, [r5, #4]
 8003f28:	60aa      	str	r2, [r5, #8]
 8003f2a:	60eb      	str	r3, [r5, #12]
 8003f2c:	7823      	ldrb	r3, [r4, #0]
 8003f2e:	742b      	strb	r3, [r5, #16]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8003f36:	4a51      	ldr	r2, [pc, #324]	; (800407c <problem_fetch+0x2a18>)
 8003f38:	461c      	mov	r4, r3
 8003f3a:	4613      	mov	r3, r2
 8003f3c:	cb07      	ldmia	r3!, {r0, r1, r2}
 8003f3e:	6020      	str	r0, [r4, #0]
 8003f40:	6061      	str	r1, [r4, #4]
 8003f42:	60a2      	str	r2, [r4, #8]
 8003f44:	881b      	ldrh	r3, [r3, #0]
 8003f46:	81a3      	strh	r3, [r4, #12]
			break;
 8003f48:	f018 babc 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 55 :
			strcpy(p->name,"MY FLOW");
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8003f52:	494b      	ldr	r1, [pc, #300]	; (8004080 <problem_fetch+0x2a1c>)
 8003f54:	461a      	mov	r2, r3
 8003f56:	460b      	mov	r3, r1
 8003f58:	cb03      	ldmia	r3!, {r0, r1}
 8003f5a:	6010      	str	r0, [r2, #0]
 8003f5c:	6051      	str	r1, [r2, #4]
			strcpy(p->grade,"7A+");
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8003f64:	4a47      	ldr	r2, [pc, #284]	; (8004084 <problem_fetch+0x2a20>)
 8003f66:	6810      	ldr	r0, [r2, #0]
 8003f68:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	2206      	movs	r2, #6
 8003f6e:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,H,E,E,A,D");
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	33a4      	adds	r3, #164	; 0xa4
 8003f74:	4a44      	ldr	r2, [pc, #272]	; (8004088 <problem_fetch+0x2a24>)
 8003f76:	461c      	mov	r4, r3
 8003f78:	4613      	mov	r3, r2
 8003f7a:	cb07      	ldmia	r3!, {r0, r1, r2}
 8003f7c:	6020      	str	r0, [r4, #0]
 8003f7e:	6061      	str	r1, [r4, #4]
 8003f80:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,8,9,12,14,18");
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	3304      	adds	r3, #4
 8003f86:	4a41      	ldr	r2, [pc, #260]	; (800408c <problem_fetch+0x2a28>)
 8003f88:	461c      	mov	r4, r3
 8003f8a:	4613      	mov	r3, r2
 8003f8c:	cb07      	ldmia	r3!, {r0, r1, r2}
 8003f8e:	6020      	str	r0, [r4, #0]
 8003f90:	6061      	str	r1, [r4, #4]
 8003f92:	60a2      	str	r2, [r4, #8]
 8003f94:	881a      	ldrh	r2, [r3, #0]
 8003f96:	789b      	ldrb	r3, [r3, #2]
 8003f98:	81a2      	strh	r2, [r4, #12]
 8003f9a:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8003fa2:	4a29      	ldr	r2, [pc, #164]	; (8004048 <problem_fetch+0x29e4>)
 8003fa4:	461c      	mov	r4, r3
 8003fa6:	4613      	mov	r3, r2
 8003fa8:	cb07      	ldmia	r3!, {r0, r1, r2}
 8003faa:	6020      	str	r0, [r4, #0]
 8003fac:	6061      	str	r1, [r4, #4]
 8003fae:	60a2      	str	r2, [r4, #8]
			break;
 8003fb0:	f018 ba88 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 56 :
			strcpy(p->name,"BLACK ARE GOOD");
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8003fba:	4a35      	ldr	r2, [pc, #212]	; (8004090 <problem_fetch+0x2a2c>)
 8003fbc:	461c      	mov	r4, r3
 8003fbe:	4613      	mov	r3, r2
 8003fc0:	cb07      	ldmia	r3!, {r0, r1, r2}
 8003fc2:	6020      	str	r0, [r4, #0]
 8003fc4:	6061      	str	r1, [r4, #4]
 8003fc6:	60a2      	str	r2, [r4, #8]
 8003fc8:	881a      	ldrh	r2, [r3, #0]
 8003fca:	789b      	ldrb	r3, [r3, #2]
 8003fcc:	81a2      	strh	r2, [r4, #12]
 8003fce:	73a3      	strb	r3, [r4, #14]
			strcpy(p->grade,"6C");
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8003fd6:	4a2f      	ldr	r2, [pc, #188]	; (8004094 <problem_fetch+0x2a30>)
 8003fd8:	8811      	ldrh	r1, [r2, #0]
 8003fda:	7892      	ldrb	r2, [r2, #2]
 8003fdc:	8019      	strh	r1, [r3, #0]
 8003fde:	709a      	strb	r2, [r3, #2]
			p->moveSize = 6;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	2206      	movs	r2, #6
 8003fe4:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,J,I,J,G,I");
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	33a4      	adds	r3, #164	; 0xa4
 8003fea:	4a2b      	ldr	r2, [pc, #172]	; (8004098 <problem_fetch+0x2a34>)
 8003fec:	461c      	mov	r4, r3
 8003fee:	4613      	mov	r3, r2
 8003ff0:	cb07      	ldmia	r3!, {r0, r1, r2}
 8003ff2:	6020      	str	r0, [r4, #0]
 8003ff4:	6061      	str	r1, [r4, #4]
 8003ff6:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,7,10,12,15,18");
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	3304      	adds	r3, #4
 8003ffc:	4a27      	ldr	r2, [pc, #156]	; (800409c <problem_fetch+0x2a38>)
 8003ffe:	461c      	mov	r4, r3
 8004000:	4615      	mov	r5, r2
 8004002:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004004:	6020      	str	r0, [r4, #0]
 8004006:	6061      	str	r1, [r4, #4]
 8004008:	60a2      	str	r2, [r4, #8]
 800400a:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8004012:	4a0d      	ldr	r2, [pc, #52]	; (8004048 <problem_fetch+0x29e4>)
 8004014:	461c      	mov	r4, r3
 8004016:	4613      	mov	r3, r2
 8004018:	cb07      	ldmia	r3!, {r0, r1, r2}
 800401a:	6020      	str	r0, [r4, #0]
 800401c:	6061      	str	r1, [r4, #4]
 800401e:	60a2      	str	r2, [r4, #8]
			break;
 8004020:	f018 ba50 	b.w	801c4c4 <problem_fetch+0x1ae60>
 8004024:	080245c0 	.word	0x080245c0
 8004028:	08023b24 	.word	0x08023b24
 800402c:	080245cc 	.word	0x080245cc
 8004030:	080245d8 	.word	0x080245d8
 8004034:	08023b04 	.word	0x08023b04
 8004038:	080245e8 	.word	0x080245e8
 800403c:	08023ae4 	.word	0x08023ae4
 8004040:	080245f4 	.word	0x080245f4
 8004044:	08024600 	.word	0x08024600
 8004048:	08023ec0 	.word	0x08023ec0
 800404c:	08024610 	.word	0x08024610
 8004050:	08024620 	.word	0x08024620
 8004054:	08024628 	.word	0x08024628
 8004058:	08024634 	.word	0x08024634
 800405c:	0802463c 	.word	0x0802463c
 8004060:	08024130 	.word	0x08024130
 8004064:	08024650 	.word	0x08024650
 8004068:	0802465c 	.word	0x0802465c
 800406c:	0802466c 	.word	0x0802466c
 8004070:	08023c60 	.word	0x08023c60
 8004074:	0802467c 	.word	0x0802467c
 8004078:	0802468c 	.word	0x0802468c
 800407c:	08023cac 	.word	0x08023cac
 8004080:	080246a0 	.word	0x080246a0
 8004084:	08023cc4 	.word	0x08023cc4
 8004088:	080246a8 	.word	0x080246a8
 800408c:	0802404c 	.word	0x0802404c
 8004090:	080246b4 	.word	0x080246b4
 8004094:	08023bf0 	.word	0x08023bf0
 8004098:	080246c4 	.word	0x080246c4
 800409c:	080246d0 	.word	0x080246d0
		case 57 :
			strcpy(p->name,"THE DARK ARTS DIRECT");
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80040a6:	4aad      	ldr	r2, [pc, #692]	; (800435c <problem_fetch+0x2cf8>)
 80040a8:	461d      	mov	r5, r3
 80040aa:	4614      	mov	r4, r2
 80040ac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80040ae:	6028      	str	r0, [r5, #0]
 80040b0:	6069      	str	r1, [r5, #4]
 80040b2:	60aa      	str	r2, [r5, #8]
 80040b4:	60eb      	str	r3, [r5, #12]
 80040b6:	6820      	ldr	r0, [r4, #0]
 80040b8:	6128      	str	r0, [r5, #16]
 80040ba:	7923      	ldrb	r3, [r4, #4]
 80040bc:	752b      	strb	r3, [r5, #20]
			strcpy(p->grade,"7C+");
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80040c4:	4aa6      	ldr	r2, [pc, #664]	; (8004360 <problem_fetch+0x2cfc>)
 80040c6:	6810      	ldr	r0, [r2, #0]
 80040c8:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	2206      	movs	r2, #6
 80040ce:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,G,H,C,G,I");
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	33a4      	adds	r3, #164	; 0xa4
 80040d4:	4aa3      	ldr	r2, [pc, #652]	; (8004364 <problem_fetch+0x2d00>)
 80040d6:	461c      	mov	r4, r3
 80040d8:	4613      	mov	r3, r2
 80040da:	cb07      	ldmia	r3!, {r0, r1, r2}
 80040dc:	6020      	str	r0, [r4, #0]
 80040de:	6061      	str	r1, [r4, #4]
 80040e0:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,6,8,13,17,18");
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	3304      	adds	r3, #4
 80040e6:	4aa0      	ldr	r2, [pc, #640]	; (8004368 <problem_fetch+0x2d04>)
 80040e8:	461c      	mov	r4, r3
 80040ea:	4613      	mov	r3, r2
 80040ec:	cb07      	ldmia	r3!, {r0, r1, r2}
 80040ee:	6020      	str	r0, [r4, #0]
 80040f0:	6061      	str	r1, [r4, #4]
 80040f2:	60a2      	str	r2, [r4, #8]
 80040f4:	881a      	ldrh	r2, [r3, #0]
 80040f6:	789b      	ldrb	r3, [r3, #2]
 80040f8:	81a2      	strh	r2, [r4, #12]
 80040fa:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish,"s,s,d,d,d,e");
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8004102:	4a9a      	ldr	r2, [pc, #616]	; (800436c <problem_fetch+0x2d08>)
 8004104:	461c      	mov	r4, r3
 8004106:	4613      	mov	r3, r2
 8004108:	cb07      	ldmia	r3!, {r0, r1, r2}
 800410a:	6020      	str	r0, [r4, #0]
 800410c:	6061      	str	r1, [r4, #4]
 800410e:	60a2      	str	r2, [r4, #8]
			break;
 8004110:	f018 b9d8 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 58 :
			strcpy(p->name,"THE MOST HIGH");
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800411a:	4a95      	ldr	r2, [pc, #596]	; (8004370 <problem_fetch+0x2d0c>)
 800411c:	461c      	mov	r4, r3
 800411e:	4613      	mov	r3, r2
 8004120:	cb07      	ldmia	r3!, {r0, r1, r2}
 8004122:	6020      	str	r0, [r4, #0]
 8004124:	6061      	str	r1, [r4, #4]
 8004126:	60a2      	str	r2, [r4, #8]
 8004128:	881b      	ldrh	r3, [r3, #0]
 800412a:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade,"6C+");
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8004132:	4a90      	ldr	r2, [pc, #576]	; (8004374 <problem_fetch+0x2d10>)
 8004134:	6810      	ldr	r0, [r2, #0]
 8004136:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	2207      	movs	r2, #7
 800413c:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"E,H,G,D,G,E,I");
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	33a4      	adds	r3, #164	; 0xa4
 8004142:	4a8d      	ldr	r2, [pc, #564]	; (8004378 <problem_fetch+0x2d14>)
 8004144:	461c      	mov	r4, r3
 8004146:	4613      	mov	r3, r2
 8004148:	cb07      	ldmia	r3!, {r0, r1, r2}
 800414a:	6020      	str	r0, [r4, #0]
 800414c:	6061      	str	r1, [r4, #4]
 800414e:	60a2      	str	r2, [r4, #8]
 8004150:	881b      	ldrh	r3, [r3, #0]
 8004152:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"6,5,9,11,14,16,18");
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	3304      	adds	r3, #4
 8004158:	4a88      	ldr	r2, [pc, #544]	; (800437c <problem_fetch+0x2d18>)
 800415a:	461d      	mov	r5, r3
 800415c:	4614      	mov	r4, r2
 800415e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004160:	6028      	str	r0, [r5, #0]
 8004162:	6069      	str	r1, [r5, #4]
 8004164:	60aa      	str	r2, [r5, #8]
 8004166:	60eb      	str	r3, [r5, #12]
 8004168:	8823      	ldrh	r3, [r4, #0]
 800416a:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,s,d,d,d,d,e");
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8004172:	4a83      	ldr	r2, [pc, #524]	; (8004380 <problem_fetch+0x2d1c>)
 8004174:	461c      	mov	r4, r3
 8004176:	4613      	mov	r3, r2
 8004178:	cb07      	ldmia	r3!, {r0, r1, r2}
 800417a:	6020      	str	r0, [r4, #0]
 800417c:	6061      	str	r1, [r4, #4]
 800417e:	60a2      	str	r2, [r4, #8]
 8004180:	881b      	ldrh	r3, [r3, #0]
 8004182:	81a3      	strh	r3, [r4, #12]
			break;
 8004184:	f018 b99e 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 59 :
			strcpy(p->name,"MAN IN BLACK");
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800418e:	4a7d      	ldr	r2, [pc, #500]	; (8004384 <problem_fetch+0x2d20>)
 8004190:	461c      	mov	r4, r3
 8004192:	4613      	mov	r3, r2
 8004194:	cb07      	ldmia	r3!, {r0, r1, r2}
 8004196:	6020      	str	r0, [r4, #0]
 8004198:	6061      	str	r1, [r4, #4]
 800419a:	60a2      	str	r2, [r4, #8]
 800419c:	781b      	ldrb	r3, [r3, #0]
 800419e:	7323      	strb	r3, [r4, #12]
			strcpy(p->grade,"6B+");
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80041a6:	4a78      	ldr	r2, [pc, #480]	; (8004388 <problem_fetch+0x2d24>)
 80041a8:	6810      	ldr	r0, [r2, #0]
 80041aa:	6018      	str	r0, [r3, #0]
			p->moveSize = 9;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	2209      	movs	r2, #9
 80041b0:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,J,K,H,I,I,K,I,G");
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	33a4      	adds	r3, #164	; 0xa4
 80041b6:	4a75      	ldr	r2, [pc, #468]	; (800438c <problem_fetch+0x2d28>)
 80041b8:	461d      	mov	r5, r3
 80041ba:	4614      	mov	r4, r2
 80041bc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80041be:	6028      	str	r0, [r5, #0]
 80041c0:	6069      	str	r1, [r5, #4]
 80041c2:	60aa      	str	r2, [r5, #8]
 80041c4:	60eb      	str	r3, [r5, #12]
 80041c6:	8823      	ldrh	r3, [r4, #0]
 80041c8:	822b      	strh	r3, [r5, #16]
			strcpy(p->moveNumbers,"5,7,9,12,14,15,16,18,4");
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	3304      	adds	r3, #4
 80041ce:	4a70      	ldr	r2, [pc, #448]	; (8004390 <problem_fetch+0x2d2c>)
 80041d0:	461c      	mov	r4, r3
 80041d2:	4615      	mov	r5, r2
 80041d4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80041d6:	6020      	str	r0, [r4, #0]
 80041d8:	6061      	str	r1, [r4, #4]
 80041da:	60a2      	str	r2, [r4, #8]
 80041dc:	60e3      	str	r3, [r4, #12]
 80041de:	6828      	ldr	r0, [r5, #0]
 80041e0:	6120      	str	r0, [r4, #16]
 80041e2:	88ab      	ldrh	r3, [r5, #4]
 80041e4:	79aa      	ldrb	r2, [r5, #6]
 80041e6:	82a3      	strh	r3, [r4, #20]
 80041e8:	4613      	mov	r3, r2
 80041ea:	75a3      	strb	r3, [r4, #22]
			strcpy(p->startFinish,"s,d,d,d,d,d,d,e,s");
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 80041f2:	4a68      	ldr	r2, [pc, #416]	; (8004394 <problem_fetch+0x2d30>)
 80041f4:	461d      	mov	r5, r3
 80041f6:	4614      	mov	r4, r2
 80041f8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80041fa:	6028      	str	r0, [r5, #0]
 80041fc:	6069      	str	r1, [r5, #4]
 80041fe:	60aa      	str	r2, [r5, #8]
 8004200:	60eb      	str	r3, [r5, #12]
 8004202:	8823      	ldrh	r3, [r4, #0]
 8004204:	822b      	strh	r3, [r5, #16]
			break;
 8004206:	f018 b95d 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 60 :
			strcpy(p->name,"STRIZZANGELES");
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8004210:	4a61      	ldr	r2, [pc, #388]	; (8004398 <problem_fetch+0x2d34>)
 8004212:	461c      	mov	r4, r3
 8004214:	4613      	mov	r3, r2
 8004216:	cb07      	ldmia	r3!, {r0, r1, r2}
 8004218:	6020      	str	r0, [r4, #0]
 800421a:	6061      	str	r1, [r4, #4]
 800421c:	60a2      	str	r2, [r4, #8]
 800421e:	881b      	ldrh	r3, [r3, #0]
 8004220:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade,"6C+");
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8004228:	4a52      	ldr	r2, [pc, #328]	; (8004374 <problem_fetch+0x2d10>)
 800422a:	6810      	ldr	r0, [r2, #0]
 800422c:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	2207      	movs	r2, #7
 8004232:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,C,F,G,J,E,I");
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	33a4      	adds	r3, #164	; 0xa4
 8004238:	4a58      	ldr	r2, [pc, #352]	; (800439c <problem_fetch+0x2d38>)
 800423a:	461c      	mov	r4, r3
 800423c:	4613      	mov	r3, r2
 800423e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8004240:	6020      	str	r0, [r4, #0]
 8004242:	6061      	str	r1, [r4, #4]
 8004244:	60a2      	str	r2, [r4, #8]
 8004246:	881b      	ldrh	r3, [r3, #0]
 8004248:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,8,11,14,7,16,18");
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	3304      	adds	r3, #4
 800424e:	4a54      	ldr	r2, [pc, #336]	; (80043a0 <problem_fetch+0x2d3c>)
 8004250:	461d      	mov	r5, r3
 8004252:	4614      	mov	r4, r2
 8004254:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004256:	6028      	str	r0, [r5, #0]
 8004258:	6069      	str	r1, [r5, #4]
 800425a:	60aa      	str	r2, [r5, #8]
 800425c:	60eb      	str	r3, [r5, #12]
 800425e:	8823      	ldrh	r3, [r4, #0]
 8004260:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8004268:	4a4e      	ldr	r2, [pc, #312]	; (80043a4 <problem_fetch+0x2d40>)
 800426a:	461c      	mov	r4, r3
 800426c:	4613      	mov	r3, r2
 800426e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8004270:	6020      	str	r0, [r4, #0]
 8004272:	6061      	str	r1, [r4, #4]
 8004274:	60a2      	str	r2, [r4, #8]
 8004276:	881b      	ldrh	r3, [r3, #0]
 8004278:	81a3      	strh	r3, [r4, #12]
			break;
 800427a:	f018 b923 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 61 :
			strcpy(p->name,"BOARDMEETING 3.0");
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8004284:	4a48      	ldr	r2, [pc, #288]	; (80043a8 <problem_fetch+0x2d44>)
 8004286:	461d      	mov	r5, r3
 8004288:	4614      	mov	r4, r2
 800428a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800428c:	6028      	str	r0, [r5, #0]
 800428e:	6069      	str	r1, [r5, #4]
 8004290:	60aa      	str	r2, [r5, #8]
 8004292:	60eb      	str	r3, [r5, #12]
 8004294:	7823      	ldrb	r3, [r4, #0]
 8004296:	742b      	strb	r3, [r5, #16]
			strcpy(p->grade,"6C+");
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800429e:	4a35      	ldr	r2, [pc, #212]	; (8004374 <problem_fetch+0x2d10>)
 80042a0:	6810      	ldr	r0, [r2, #0]
 80042a2:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	2206      	movs	r2, #6
 80042a8:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,H,H,G,H,D");
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	33a4      	adds	r3, #164	; 0xa4
 80042ae:	4a3f      	ldr	r2, [pc, #252]	; (80043ac <problem_fetch+0x2d48>)
 80042b0:	461c      	mov	r4, r3
 80042b2:	4613      	mov	r3, r2
 80042b4:	cb07      	ldmia	r3!, {r0, r1, r2}
 80042b6:	6020      	str	r0, [r4, #0]
 80042b8:	6061      	str	r1, [r4, #4]
 80042ba:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"6,5,10,14,16,18");
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	3304      	adds	r3, #4
 80042c0:	4a3b      	ldr	r2, [pc, #236]	; (80043b0 <problem_fetch+0x2d4c>)
 80042c2:	461c      	mov	r4, r3
 80042c4:	4615      	mov	r5, r2
 80042c6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80042c8:	6020      	str	r0, [r4, #0]
 80042ca:	6061      	str	r1, [r4, #4]
 80042cc:	60a2      	str	r2, [r4, #8]
 80042ce:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,s,d,d,d,e");
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 80042d6:	4a25      	ldr	r2, [pc, #148]	; (800436c <problem_fetch+0x2d08>)
 80042d8:	461c      	mov	r4, r3
 80042da:	4613      	mov	r3, r2
 80042dc:	cb07      	ldmia	r3!, {r0, r1, r2}
 80042de:	6020      	str	r0, [r4, #0]
 80042e0:	6061      	str	r1, [r4, #4]
 80042e2:	60a2      	str	r2, [r4, #8]
			break;
 80042e4:	f018 b8ee 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 62 :
			strcpy(p->name,"CANIGAN");
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80042ee:	4931      	ldr	r1, [pc, #196]	; (80043b4 <problem_fetch+0x2d50>)
 80042f0:	461a      	mov	r2, r3
 80042f2:	460b      	mov	r3, r1
 80042f4:	cb03      	ldmia	r3!, {r0, r1}
 80042f6:	6010      	str	r0, [r2, #0]
 80042f8:	6051      	str	r1, [r2, #4]
			strcpy(p->grade,"7A");
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8004300:	4a2d      	ldr	r2, [pc, #180]	; (80043b8 <problem_fetch+0x2d54>)
 8004302:	8811      	ldrh	r1, [r2, #0]
 8004304:	7892      	ldrb	r2, [r2, #2]
 8004306:	8019      	strh	r1, [r3, #0]
 8004308:	709a      	strb	r2, [r3, #2]
			p->moveSize = 8;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	2208      	movs	r2, #8
 800430e:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,K,G,I,F,K,H,I");
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	33a4      	adds	r3, #164	; 0xa4
 8004314:	4a29      	ldr	r2, [pc, #164]	; (80043bc <problem_fetch+0x2d58>)
 8004316:	461c      	mov	r4, r3
 8004318:	4615      	mov	r5, r2
 800431a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800431c:	6020      	str	r0, [r4, #0]
 800431e:	6061      	str	r1, [r4, #4]
 8004320:	60a2      	str	r2, [r4, #8]
 8004322:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,9,9,10,13,14,16,18");
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	3304      	adds	r3, #4
 8004328:	4a25      	ldr	r2, [pc, #148]	; (80043c0 <problem_fetch+0x2d5c>)
 800432a:	461d      	mov	r5, r3
 800432c:	4614      	mov	r4, r2
 800432e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004330:	6028      	str	r0, [r5, #0]
 8004332:	6069      	str	r1, [r5, #4]
 8004334:	60aa      	str	r2, [r5, #8]
 8004336:	60eb      	str	r3, [r5, #12]
 8004338:	6820      	ldr	r0, [r4, #0]
 800433a:	6128      	str	r0, [r5, #16]
 800433c:	7923      	ldrb	r3, [r4, #4]
 800433e:	752b      	strb	r3, [r5, #20]
			strcpy(p->startFinish,"s,d,d,d,d,d,d,e");
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8004346:	4a1f      	ldr	r2, [pc, #124]	; (80043c4 <problem_fetch+0x2d60>)
 8004348:	461c      	mov	r4, r3
 800434a:	4615      	mov	r5, r2
 800434c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800434e:	6020      	str	r0, [r4, #0]
 8004350:	6061      	str	r1, [r4, #4]
 8004352:	60a2      	str	r2, [r4, #8]
 8004354:	60e3      	str	r3, [r4, #12]
			break;
 8004356:	f018 b8b5 	b.w	801c4c4 <problem_fetch+0x1ae60>
 800435a:	bf00      	nop
 800435c:	080246e0 	.word	0x080246e0
 8004360:	08024130 	.word	0x08024130
 8004364:	080246f8 	.word	0x080246f8
 8004368:	08024704 	.word	0x08024704
 800436c:	08023b04 	.word	0x08023b04
 8004370:	08024714 	.word	0x08024714
 8004374:	08023bbc 	.word	0x08023bbc
 8004378:	08024724 	.word	0x08024724
 800437c:	08024734 	.word	0x08024734
 8004380:	08023b9c 	.word	0x08023b9c
 8004384:	08024748 	.word	0x08024748
 8004388:	08023b24 	.word	0x08023b24
 800438c:	08024758 	.word	0x08024758
 8004390:	0802476c 	.word	0x0802476c
 8004394:	080242c4 	.word	0x080242c4
 8004398:	08024784 	.word	0x08024784
 800439c:	08024794 	.word	0x08024794
 80043a0:	080247a4 	.word	0x080247a4
 80043a4:	08023cac 	.word	0x08023cac
 80043a8:	080247b8 	.word	0x080247b8
 80043ac:	080247cc 	.word	0x080247cc
 80043b0:	080247d8 	.word	0x080247d8
 80043b4:	080247e8 	.word	0x080247e8
 80043b8:	08023ae4 	.word	0x08023ae4
 80043bc:	080247f0 	.word	0x080247f0
 80043c0:	08024800 	.word	0x08024800
 80043c4:	08023d34 	.word	0x08023d34
		case 63 :
			strcpy(p->name,"KOKURYU");
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80043ce:	49a6      	ldr	r1, [pc, #664]	; (8004668 <problem_fetch+0x3004>)
 80043d0:	461a      	mov	r2, r3
 80043d2:	460b      	mov	r3, r1
 80043d4:	cb03      	ldmia	r3!, {r0, r1}
 80043d6:	6010      	str	r0, [r2, #0]
 80043d8:	6051      	str	r1, [r2, #4]
			strcpy(p->grade,"6B+");
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80043e0:	4aa2      	ldr	r2, [pc, #648]	; (800466c <problem_fetch+0x3008>)
 80043e2:	6810      	ldr	r0, [r2, #0]
 80043e4:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	2207      	movs	r2, #7
 80043ea:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,E,G,D,G,E,I");
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	33a4      	adds	r3, #164	; 0xa4
 80043f0:	4a9f      	ldr	r2, [pc, #636]	; (8004670 <problem_fetch+0x300c>)
 80043f2:	461c      	mov	r4, r3
 80043f4:	4613      	mov	r3, r2
 80043f6:	cb07      	ldmia	r3!, {r0, r1, r2}
 80043f8:	6020      	str	r0, [r4, #0]
 80043fa:	6061      	str	r1, [r4, #4]
 80043fc:	60a2      	str	r2, [r4, #8]
 80043fe:	881b      	ldrh	r3, [r3, #0]
 8004400:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,6,9,11,14,16,18");
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	3304      	adds	r3, #4
 8004406:	4a9b      	ldr	r2, [pc, #620]	; (8004674 <problem_fetch+0x3010>)
 8004408:	461d      	mov	r5, r3
 800440a:	4614      	mov	r4, r2
 800440c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800440e:	6028      	str	r0, [r5, #0]
 8004410:	6069      	str	r1, [r5, #4]
 8004412:	60aa      	str	r2, [r5, #8]
 8004414:	60eb      	str	r3, [r5, #12]
 8004416:	8823      	ldrh	r3, [r4, #0]
 8004418:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,s,d,d,d,d,e");
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8004420:	4a95      	ldr	r2, [pc, #596]	; (8004678 <problem_fetch+0x3014>)
 8004422:	461c      	mov	r4, r3
 8004424:	4613      	mov	r3, r2
 8004426:	cb07      	ldmia	r3!, {r0, r1, r2}
 8004428:	6020      	str	r0, [r4, #0]
 800442a:	6061      	str	r1, [r4, #4]
 800442c:	60a2      	str	r2, [r4, #8]
 800442e:	881b      	ldrh	r3, [r3, #0]
 8004430:	81a3      	strh	r3, [r4, #12]
			break;
 8004432:	f018 b847 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 64 :
			strcpy(p->name,"V7 ANOS DE AEP");
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800443c:	4a8f      	ldr	r2, [pc, #572]	; (800467c <problem_fetch+0x3018>)
 800443e:	461c      	mov	r4, r3
 8004440:	4613      	mov	r3, r2
 8004442:	cb07      	ldmia	r3!, {r0, r1, r2}
 8004444:	6020      	str	r0, [r4, #0]
 8004446:	6061      	str	r1, [r4, #4]
 8004448:	60a2      	str	r2, [r4, #8]
 800444a:	881a      	ldrh	r2, [r3, #0]
 800444c:	789b      	ldrb	r3, [r3, #2]
 800444e:	81a2      	strh	r2, [r4, #12]
 8004450:	73a3      	strb	r3, [r4, #14]
			strcpy(p->grade,"7A+");
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8004458:	4a89      	ldr	r2, [pc, #548]	; (8004680 <problem_fetch+0x301c>)
 800445a:	6810      	ldr	r0, [r2, #0]
 800445c:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	2206      	movs	r2, #6
 8004462:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,G,H,J,G,I");
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	33a4      	adds	r3, #164	; 0xa4
 8004468:	4a86      	ldr	r2, [pc, #536]	; (8004684 <problem_fetch+0x3020>)
 800446a:	461c      	mov	r4, r3
 800446c:	4613      	mov	r3, r2
 800446e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8004470:	6020      	str	r0, [r4, #0]
 8004472:	6061      	str	r1, [r4, #4]
 8004474:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,9,8,12,15,18");
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	3304      	adds	r3, #4
 800447a:	4a83      	ldr	r2, [pc, #524]	; (8004688 <problem_fetch+0x3024>)
 800447c:	461c      	mov	r4, r3
 800447e:	4613      	mov	r3, r2
 8004480:	cb07      	ldmia	r3!, {r0, r1, r2}
 8004482:	6020      	str	r0, [r4, #0]
 8004484:	6061      	str	r1, [r4, #4]
 8004486:	60a2      	str	r2, [r4, #8]
 8004488:	881a      	ldrh	r2, [r3, #0]
 800448a:	789b      	ldrb	r3, [r3, #2]
 800448c:	81a2      	strh	r2, [r4, #12]
 800448e:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8004496:	4a7d      	ldr	r2, [pc, #500]	; (800468c <problem_fetch+0x3028>)
 8004498:	461c      	mov	r4, r3
 800449a:	4613      	mov	r3, r2
 800449c:	cb07      	ldmia	r3!, {r0, r1, r2}
 800449e:	6020      	str	r0, [r4, #0]
 80044a0:	6061      	str	r1, [r4, #4]
 80044a2:	60a2      	str	r2, [r4, #8]
			break;
 80044a4:	f018 b80e 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 65 :
			strcpy(p->name,"YURP");
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80044ae:	4a78      	ldr	r2, [pc, #480]	; (8004690 <problem_fetch+0x302c>)
 80044b0:	6810      	ldr	r0, [r2, #0]
 80044b2:	6018      	str	r0, [r3, #0]
 80044b4:	7912      	ldrb	r2, [r2, #4]
 80044b6:	711a      	strb	r2, [r3, #4]
			strcpy(p->grade,"6B+");
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80044be:	4a6b      	ldr	r2, [pc, #428]	; (800466c <problem_fetch+0x3008>)
 80044c0:	6810      	ldr	r0, [r2, #0]
 80044c2:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	2206      	movs	r2, #6
 80044c8:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,H,G,J,G,I");
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	33a4      	adds	r3, #164	; 0xa4
 80044ce:	4a71      	ldr	r2, [pc, #452]	; (8004694 <problem_fetch+0x3030>)
 80044d0:	461c      	mov	r4, r3
 80044d2:	4613      	mov	r3, r2
 80044d4:	cb07      	ldmia	r3!, {r0, r1, r2}
 80044d6:	6020      	str	r0, [r4, #0]
 80044d8:	6061      	str	r1, [r4, #4]
 80044da:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,8,10,12,14,18");
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	3304      	adds	r3, #4
 80044e0:	4a6d      	ldr	r2, [pc, #436]	; (8004698 <problem_fetch+0x3034>)
 80044e2:	461c      	mov	r4, r3
 80044e4:	4615      	mov	r5, r2
 80044e6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80044e8:	6020      	str	r0, [r4, #0]
 80044ea:	6061      	str	r1, [r4, #4]
 80044ec:	60a2      	str	r2, [r4, #8]
 80044ee:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 80044f6:	4a65      	ldr	r2, [pc, #404]	; (800468c <problem_fetch+0x3028>)
 80044f8:	461c      	mov	r4, r3
 80044fa:	4613      	mov	r3, r2
 80044fc:	cb07      	ldmia	r3!, {r0, r1, r2}
 80044fe:	6020      	str	r0, [r4, #0]
 8004500:	6061      	str	r1, [r4, #4]
 8004502:	60a2      	str	r2, [r4, #8]
			break;
 8004504:	f017 bfde 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 66 :
			strcpy(p->name,"POALET");
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800450e:	4a63      	ldr	r2, [pc, #396]	; (800469c <problem_fetch+0x3038>)
 8004510:	6810      	ldr	r0, [r2, #0]
 8004512:	6018      	str	r0, [r3, #0]
 8004514:	8891      	ldrh	r1, [r2, #4]
 8004516:	7992      	ldrb	r2, [r2, #6]
 8004518:	8099      	strh	r1, [r3, #4]
 800451a:	719a      	strb	r2, [r3, #6]
			strcpy(p->grade,"6C");
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8004522:	4a5f      	ldr	r2, [pc, #380]	; (80046a0 <problem_fetch+0x303c>)
 8004524:	8811      	ldrh	r1, [r2, #0]
 8004526:	7892      	ldrb	r2, [r2, #2]
 8004528:	8019      	strh	r1, [r3, #0]
 800452a:	709a      	strb	r2, [r3, #2]
			p->moveSize = 7;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	2207      	movs	r2, #7
 8004530:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"H,D,I,E,I,J,G");
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	33a4      	adds	r3, #164	; 0xa4
 8004536:	4a5b      	ldr	r2, [pc, #364]	; (80046a4 <problem_fetch+0x3040>)
 8004538:	461c      	mov	r4, r3
 800453a:	4613      	mov	r3, r2
 800453c:	cb07      	ldmia	r3!, {r0, r1, r2}
 800453e:	6020      	str	r0, [r4, #0]
 8004540:	6061      	str	r1, [r4, #4]
 8004542:	60a2      	str	r2, [r4, #8]
 8004544:	881b      	ldrh	r3, [r3, #0]
 8004546:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"10,11,14,16,18,7,6");
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	3304      	adds	r3, #4
 800454c:	4a56      	ldr	r2, [pc, #344]	; (80046a8 <problem_fetch+0x3044>)
 800454e:	461d      	mov	r5, r3
 8004550:	4614      	mov	r4, r2
 8004552:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004554:	6028      	str	r0, [r5, #0]
 8004556:	6069      	str	r1, [r5, #4]
 8004558:	60aa      	str	r2, [r5, #8]
 800455a:	60eb      	str	r3, [r5, #12]
 800455c:	8823      	ldrh	r3, [r4, #0]
 800455e:	78a2      	ldrb	r2, [r4, #2]
 8004560:	822b      	strh	r3, [r5, #16]
 8004562:	4613      	mov	r3, r2
 8004564:	74ab      	strb	r3, [r5, #18]
			strcpy(p->startFinish,"d,d,d,d,e,d,s");
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800456c:	4a4f      	ldr	r2, [pc, #316]	; (80046ac <problem_fetch+0x3048>)
 800456e:	461c      	mov	r4, r3
 8004570:	4613      	mov	r3, r2
 8004572:	cb07      	ldmia	r3!, {r0, r1, r2}
 8004574:	6020      	str	r0, [r4, #0]
 8004576:	6061      	str	r1, [r4, #4]
 8004578:	60a2      	str	r2, [r4, #8]
 800457a:	881b      	ldrh	r3, [r3, #0]
 800457c:	81a3      	strh	r3, [r4, #12]
			break;
 800457e:	f017 bfa1 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 67 :
			strcpy(p->name,"TORCI SPALLA");
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8004588:	4a49      	ldr	r2, [pc, #292]	; (80046b0 <problem_fetch+0x304c>)
 800458a:	461c      	mov	r4, r3
 800458c:	4613      	mov	r3, r2
 800458e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8004590:	6020      	str	r0, [r4, #0]
 8004592:	6061      	str	r1, [r4, #4]
 8004594:	60a2      	str	r2, [r4, #8]
 8004596:	781b      	ldrb	r3, [r3, #0]
 8004598:	7323      	strb	r3, [r4, #12]
			strcpy(p->grade,"7B+");
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80045a0:	4a44      	ldr	r2, [pc, #272]	; (80046b4 <problem_fetch+0x3050>)
 80045a2:	6810      	ldr	r0, [r2, #0]
 80045a4:	6018      	str	r0, [r3, #0]
			p->moveSize = 8;
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	2208      	movs	r2, #8
 80045aa:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"E,H,F,E,A,B,G,I");
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	33a4      	adds	r3, #164	; 0xa4
 80045b0:	4a41      	ldr	r2, [pc, #260]	; (80046b8 <problem_fetch+0x3054>)
 80045b2:	461c      	mov	r4, r3
 80045b4:	4615      	mov	r5, r2
 80045b6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80045b8:	6020      	str	r0, [r4, #0]
 80045ba:	6061      	str	r1, [r4, #4]
 80045bc:	60a2      	str	r2, [r4, #8]
 80045be:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"6,10,11,12,14,15,17,18");
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	3304      	adds	r3, #4
 80045c4:	4a3d      	ldr	r2, [pc, #244]	; (80046bc <problem_fetch+0x3058>)
 80045c6:	461c      	mov	r4, r3
 80045c8:	4615      	mov	r5, r2
 80045ca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80045cc:	6020      	str	r0, [r4, #0]
 80045ce:	6061      	str	r1, [r4, #4]
 80045d0:	60a2      	str	r2, [r4, #8]
 80045d2:	60e3      	str	r3, [r4, #12]
 80045d4:	6828      	ldr	r0, [r5, #0]
 80045d6:	6120      	str	r0, [r4, #16]
 80045d8:	88ab      	ldrh	r3, [r5, #4]
 80045da:	79aa      	ldrb	r2, [r5, #6]
 80045dc:	82a3      	strh	r3, [r4, #20]
 80045de:	4613      	mov	r3, r2
 80045e0:	75a3      	strb	r3, [r4, #22]
			strcpy(p->startFinish,"s,d,d,d,d,d,d,e");
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 80045e8:	4a35      	ldr	r2, [pc, #212]	; (80046c0 <problem_fetch+0x305c>)
 80045ea:	461c      	mov	r4, r3
 80045ec:	4615      	mov	r5, r2
 80045ee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80045f0:	6020      	str	r0, [r4, #0]
 80045f2:	6061      	str	r1, [r4, #4]
 80045f4:	60a2      	str	r2, [r4, #8]
 80045f6:	60e3      	str	r3, [r4, #12]
			break;
 80045f8:	f017 bf64 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 68 :
			strcpy(p->name,"INVERTIDOSO");
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8004602:	4a30      	ldr	r2, [pc, #192]	; (80046c4 <problem_fetch+0x3060>)
 8004604:	461c      	mov	r4, r3
 8004606:	4613      	mov	r3, r2
 8004608:	cb07      	ldmia	r3!, {r0, r1, r2}
 800460a:	6020      	str	r0, [r4, #0]
 800460c:	6061      	str	r1, [r4, #4]
 800460e:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade,"7B");
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8004616:	4a2c      	ldr	r2, [pc, #176]	; (80046c8 <problem_fetch+0x3064>)
 8004618:	8811      	ldrh	r1, [r2, #0]
 800461a:	7892      	ldrb	r2, [r2, #2]
 800461c:	8019      	strh	r1, [r3, #0]
 800461e:	709a      	strb	r2, [r3, #2]
			p->moveSize = 5;
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	2205      	movs	r2, #5
 8004624:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,C,I,F,I");
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	33a4      	adds	r3, #164	; 0xa4
 800462a:	4928      	ldr	r1, [pc, #160]	; (80046cc <problem_fetch+0x3068>)
 800462c:	461a      	mov	r2, r3
 800462e:	460b      	mov	r3, r1
 8004630:	cb03      	ldmia	r3!, {r0, r1}
 8004632:	6010      	str	r0, [r2, #0]
 8004634:	6051      	str	r1, [r2, #4]
 8004636:	881b      	ldrh	r3, [r3, #0]
 8004638:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"4,8,9,13,18");
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	3304      	adds	r3, #4
 800463e:	4a24      	ldr	r2, [pc, #144]	; (80046d0 <problem_fetch+0x306c>)
 8004640:	461c      	mov	r4, r3
 8004642:	4613      	mov	r3, r2
 8004644:	cb07      	ldmia	r3!, {r0, r1, r2}
 8004646:	6020      	str	r0, [r4, #0]
 8004648:	6061      	str	r1, [r4, #4]
 800464a:	60a2      	str	r2, [r4, #8]
			strcpy(p->startFinish,"s,d,d,d,e");
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8004652:	4920      	ldr	r1, [pc, #128]	; (80046d4 <problem_fetch+0x3070>)
 8004654:	461a      	mov	r2, r3
 8004656:	460b      	mov	r3, r1
 8004658:	cb03      	ldmia	r3!, {r0, r1}
 800465a:	6010      	str	r0, [r2, #0]
 800465c:	6051      	str	r1, [r2, #4]
 800465e:	881b      	ldrh	r3, [r3, #0]
 8004660:	8113      	strh	r3, [r2, #8]
			break;
 8004662:	f017 bf2f 	b.w	801c4c4 <problem_fetch+0x1ae60>
 8004666:	bf00      	nop
 8004668:	08024818 	.word	0x08024818
 800466c:	08023b24 	.word	0x08023b24
 8004670:	08024820 	.word	0x08024820
 8004674:	08024830 	.word	0x08024830
 8004678:	08023b9c 	.word	0x08023b9c
 800467c:	08024844 	.word	0x08024844
 8004680:	08023cc4 	.word	0x08023cc4
 8004684:	08024854 	.word	0x08024854
 8004688:	08024860 	.word	0x08024860
 800468c:	08023ec0 	.word	0x08023ec0
 8004690:	08024870 	.word	0x08024870
 8004694:	08024878 	.word	0x08024878
 8004698:	08024884 	.word	0x08024884
 800469c:	08024894 	.word	0x08024894
 80046a0:	08023bf0 	.word	0x08023bf0
 80046a4:	0802489c 	.word	0x0802489c
 80046a8:	080248ac 	.word	0x080248ac
 80046ac:	080248c0 	.word	0x080248c0
 80046b0:	080248d0 	.word	0x080248d0
 80046b4:	08023c60 	.word	0x08023c60
 80046b8:	080248e0 	.word	0x080248e0
 80046bc:	080248f0 	.word	0x080248f0
 80046c0:	08023d34 	.word	0x08023d34
 80046c4:	08024908 	.word	0x08024908
 80046c8:	0802421c 	.word	0x0802421c
 80046cc:	08024914 	.word	0x08024914
 80046d0:	08024920 	.word	0x08024920
 80046d4:	08023ff0 	.word	0x08023ff0
		case 69 :
			strcpy(p->name,"BLACK BLOCK X");
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80046de:	4ac0      	ldr	r2, [pc, #768]	; (80049e0 <problem_fetch+0x337c>)
 80046e0:	461c      	mov	r4, r3
 80046e2:	4613      	mov	r3, r2
 80046e4:	cb07      	ldmia	r3!, {r0, r1, r2}
 80046e6:	6020      	str	r0, [r4, #0]
 80046e8:	6061      	str	r1, [r4, #4]
 80046ea:	60a2      	str	r2, [r4, #8]
 80046ec:	881b      	ldrh	r3, [r3, #0]
 80046ee:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade,"6C");
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80046f6:	4abb      	ldr	r2, [pc, #748]	; (80049e4 <problem_fetch+0x3380>)
 80046f8:	8811      	ldrh	r1, [r2, #0]
 80046fa:	7892      	ldrb	r2, [r2, #2]
 80046fc:	8019      	strh	r1, [r3, #0]
 80046fe:	709a      	strb	r2, [r3, #2]
			p->moveSize = 8;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	2208      	movs	r2, #8
 8004704:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,E,H,H,I,G,I,E");
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	33a4      	adds	r3, #164	; 0xa4
 800470a:	4ab7      	ldr	r2, [pc, #732]	; (80049e8 <problem_fetch+0x3384>)
 800470c:	461c      	mov	r4, r3
 800470e:	4615      	mov	r5, r2
 8004710:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004712:	6020      	str	r0, [r4, #0]
 8004714:	6061      	str	r1, [r4, #4]
 8004716:	60a2      	str	r2, [r4, #8]
 8004718:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,8,10,12,14,17,18,6");
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	3304      	adds	r3, #4
 800471e:	4ab3      	ldr	r2, [pc, #716]	; (80049ec <problem_fetch+0x3388>)
 8004720:	461d      	mov	r5, r3
 8004722:	4614      	mov	r4, r2
 8004724:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004726:	6028      	str	r0, [r5, #0]
 8004728:	6069      	str	r1, [r5, #4]
 800472a:	60aa      	str	r2, [r5, #8]
 800472c:	60eb      	str	r3, [r5, #12]
 800472e:	6820      	ldr	r0, [r4, #0]
 8004730:	6128      	str	r0, [r5, #16]
 8004732:	7923      	ldrb	r3, [r4, #4]
 8004734:	752b      	strb	r3, [r5, #20]
			strcpy(p->startFinish,"s,d,d,d,d,d,e,s");
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800473c:	4aac      	ldr	r2, [pc, #688]	; (80049f0 <problem_fetch+0x338c>)
 800473e:	461c      	mov	r4, r3
 8004740:	4615      	mov	r5, r2
 8004742:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004744:	6020      	str	r0, [r4, #0]
 8004746:	6061      	str	r1, [r4, #4]
 8004748:	60a2      	str	r2, [r4, #8]
 800474a:	60e3      	str	r3, [r4, #12]
			break;
 800474c:	f017 beba 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 70 :
			strcpy(p->name,"LADYBUG CLEAN");
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8004756:	4aa7      	ldr	r2, [pc, #668]	; (80049f4 <problem_fetch+0x3390>)
 8004758:	461c      	mov	r4, r3
 800475a:	4613      	mov	r3, r2
 800475c:	cb07      	ldmia	r3!, {r0, r1, r2}
 800475e:	6020      	str	r0, [r4, #0]
 8004760:	6061      	str	r1, [r4, #4]
 8004762:	60a2      	str	r2, [r4, #8]
 8004764:	881b      	ldrh	r3, [r3, #0]
 8004766:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade,"7A+");
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800476e:	4aa2      	ldr	r2, [pc, #648]	; (80049f8 <problem_fetch+0x3394>)
 8004770:	6810      	ldr	r0, [r2, #0]
 8004772:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	2206      	movs	r2, #6
 8004778:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,G,H,F,C,D");
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	33a4      	adds	r3, #164	; 0xa4
 800477e:	4a9f      	ldr	r2, [pc, #636]	; (80049fc <problem_fetch+0x3398>)
 8004780:	461c      	mov	r4, r3
 8004782:	4613      	mov	r3, r2
 8004784:	cb07      	ldmia	r3!, {r0, r1, r2}
 8004786:	6020      	str	r0, [r4, #0]
 8004788:	6061      	str	r1, [r4, #4]
 800478a:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,6,10,11,13,18");
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	3304      	adds	r3, #4
 8004790:	4a9b      	ldr	r2, [pc, #620]	; (8004a00 <problem_fetch+0x339c>)
 8004792:	461c      	mov	r4, r3
 8004794:	4615      	mov	r5, r2
 8004796:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004798:	6020      	str	r0, [r4, #0]
 800479a:	6061      	str	r1, [r4, #4]
 800479c:	60a2      	str	r2, [r4, #8]
 800479e:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,s,d,d,d,e");
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 80047a6:	4a97      	ldr	r2, [pc, #604]	; (8004a04 <problem_fetch+0x33a0>)
 80047a8:	461c      	mov	r4, r3
 80047aa:	4613      	mov	r3, r2
 80047ac:	cb07      	ldmia	r3!, {r0, r1, r2}
 80047ae:	6020      	str	r0, [r4, #0]
 80047b0:	6061      	str	r1, [r4, #4]
 80047b2:	60a2      	str	r2, [r4, #8]
			break;
 80047b4:	f017 be86 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 71 :
			strcpy(p->name,"POCKET FULL OF DREAMS");
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80047be:	4a92      	ldr	r2, [pc, #584]	; (8004a08 <problem_fetch+0x33a4>)
 80047c0:	461d      	mov	r5, r3
 80047c2:	4614      	mov	r4, r2
 80047c4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80047c6:	6028      	str	r0, [r5, #0]
 80047c8:	6069      	str	r1, [r5, #4]
 80047ca:	60aa      	str	r2, [r5, #8]
 80047cc:	60eb      	str	r3, [r5, #12]
 80047ce:	6820      	ldr	r0, [r4, #0]
 80047d0:	6128      	str	r0, [r5, #16]
 80047d2:	88a3      	ldrh	r3, [r4, #4]
 80047d4:	82ab      	strh	r3, [r5, #20]
			strcpy(p->grade,"6B+");
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80047dc:	4a8b      	ldr	r2, [pc, #556]	; (8004a0c <problem_fetch+0x33a8>)
 80047de:	6810      	ldr	r0, [r2, #0]
 80047e0:	6018      	str	r0, [r3, #0]
			p->moveSize = 8;
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	2208      	movs	r2, #8
 80047e6:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,E,E,B,B,A,E,D");
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	33a4      	adds	r3, #164	; 0xa4
 80047ec:	4a88      	ldr	r2, [pc, #544]	; (8004a10 <problem_fetch+0x33ac>)
 80047ee:	461c      	mov	r4, r3
 80047f0:	4615      	mov	r5, r2
 80047f2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80047f4:	6020      	str	r0, [r4, #0]
 80047f6:	6061      	str	r1, [r4, #4]
 80047f8:	60a2      	str	r2, [r4, #8]
 80047fa:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,8,9,10,12,14,14,18");
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	3304      	adds	r3, #4
 8004800:	4a84      	ldr	r2, [pc, #528]	; (8004a14 <problem_fetch+0x33b0>)
 8004802:	461d      	mov	r5, r3
 8004804:	4614      	mov	r4, r2
 8004806:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004808:	6028      	str	r0, [r5, #0]
 800480a:	6069      	str	r1, [r5, #4]
 800480c:	60aa      	str	r2, [r5, #8]
 800480e:	60eb      	str	r3, [r5, #12]
 8004810:	6820      	ldr	r0, [r4, #0]
 8004812:	6128      	str	r0, [r5, #16]
 8004814:	7923      	ldrb	r3, [r4, #4]
 8004816:	752b      	strb	r3, [r5, #20]
			strcpy(p->startFinish,"s,d,d,d,d,d,d,e");
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800481e:	4a7e      	ldr	r2, [pc, #504]	; (8004a18 <problem_fetch+0x33b4>)
 8004820:	461c      	mov	r4, r3
 8004822:	4615      	mov	r5, r2
 8004824:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004826:	6020      	str	r0, [r4, #0]
 8004828:	6061      	str	r1, [r4, #4]
 800482a:	60a2      	str	r2, [r4, #8]
 800482c:	60e3      	str	r3, [r4, #12]
			break;
 800482e:	f017 be49 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 72 :
			strcpy(p->name,"TAFFO");
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8004838:	4a78      	ldr	r2, [pc, #480]	; (8004a1c <problem_fetch+0x33b8>)
 800483a:	6810      	ldr	r0, [r2, #0]
 800483c:	6018      	str	r0, [r3, #0]
 800483e:	8892      	ldrh	r2, [r2, #4]
 8004840:	809a      	strh	r2, [r3, #4]
			strcpy(p->grade,"6B+");
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8004848:	4a70      	ldr	r2, [pc, #448]	; (8004a0c <problem_fetch+0x33a8>)
 800484a:	6810      	ldr	r0, [r2, #0]
 800484c:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	2206      	movs	r2, #6
 8004852:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,G,C,C,D,A");
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	33a4      	adds	r3, #164	; 0xa4
 8004858:	4a71      	ldr	r2, [pc, #452]	; (8004a20 <problem_fetch+0x33bc>)
 800485a:	461c      	mov	r4, r3
 800485c:	4613      	mov	r3, r2
 800485e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8004860:	6020      	str	r0, [r4, #0]
 8004862:	6061      	str	r1, [r4, #4]
 8004864:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,9,8,13,15,18");
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	3304      	adds	r3, #4
 800486a:	4a6e      	ldr	r2, [pc, #440]	; (8004a24 <problem_fetch+0x33c0>)
 800486c:	461c      	mov	r4, r3
 800486e:	4613      	mov	r3, r2
 8004870:	cb07      	ldmia	r3!, {r0, r1, r2}
 8004872:	6020      	str	r0, [r4, #0]
 8004874:	6061      	str	r1, [r4, #4]
 8004876:	60a2      	str	r2, [r4, #8]
 8004878:	881a      	ldrh	r2, [r3, #0]
 800487a:	789b      	ldrb	r3, [r3, #2]
 800487c:	81a2      	strh	r2, [r4, #12]
 800487e:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8004886:	4a68      	ldr	r2, [pc, #416]	; (8004a28 <problem_fetch+0x33c4>)
 8004888:	461c      	mov	r4, r3
 800488a:	4613      	mov	r3, r2
 800488c:	cb07      	ldmia	r3!, {r0, r1, r2}
 800488e:	6020      	str	r0, [r4, #0]
 8004890:	6061      	str	r1, [r4, #4]
 8004892:	60a2      	str	r2, [r4, #8]
			break;
 8004894:	f017 be16 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 73 :
			strcpy(p->name,"BLACK GECKO");
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800489e:	4a63      	ldr	r2, [pc, #396]	; (8004a2c <problem_fetch+0x33c8>)
 80048a0:	461c      	mov	r4, r3
 80048a2:	4613      	mov	r3, r2
 80048a4:	cb07      	ldmia	r3!, {r0, r1, r2}
 80048a6:	6020      	str	r0, [r4, #0]
 80048a8:	6061      	str	r1, [r4, #4]
 80048aa:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade,"6C+");
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80048b2:	4a5f      	ldr	r2, [pc, #380]	; (8004a30 <problem_fetch+0x33cc>)
 80048b4:	6810      	ldr	r0, [r2, #0]
 80048b6:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	2206      	movs	r2, #6
 80048bc:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,E,H,C,E,D");
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	33a4      	adds	r3, #164	; 0xa4
 80048c2:	4a5c      	ldr	r2, [pc, #368]	; (8004a34 <problem_fetch+0x33d0>)
 80048c4:	461c      	mov	r4, r3
 80048c6:	4613      	mov	r3, r2
 80048c8:	cb07      	ldmia	r3!, {r0, r1, r2}
 80048ca:	6020      	str	r0, [r4, #0]
 80048cc:	6061      	str	r1, [r4, #4]
 80048ce:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,6,10,13,14,18");
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	3304      	adds	r3, #4
 80048d4:	4a58      	ldr	r2, [pc, #352]	; (8004a38 <problem_fetch+0x33d4>)
 80048d6:	461c      	mov	r4, r3
 80048d8:	4615      	mov	r5, r2
 80048da:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80048dc:	6020      	str	r0, [r4, #0]
 80048de:	6061      	str	r1, [r4, #4]
 80048e0:	60a2      	str	r2, [r4, #8]
 80048e2:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,s,d,d,d,e");
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 80048ea:	4a46      	ldr	r2, [pc, #280]	; (8004a04 <problem_fetch+0x33a0>)
 80048ec:	461c      	mov	r4, r3
 80048ee:	4613      	mov	r3, r2
 80048f0:	cb07      	ldmia	r3!, {r0, r1, r2}
 80048f2:	6020      	str	r0, [r4, #0]
 80048f4:	6061      	str	r1, [r4, #4]
 80048f6:	60a2      	str	r2, [r4, #8]
			break;
 80048f8:	f017 bde4 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 74 :
			strcpy(p->name,"BREATHE");
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8004902:	494e      	ldr	r1, [pc, #312]	; (8004a3c <problem_fetch+0x33d8>)
 8004904:	461a      	mov	r2, r3
 8004906:	460b      	mov	r3, r1
 8004908:	cb03      	ldmia	r3!, {r0, r1}
 800490a:	6010      	str	r0, [r2, #0]
 800490c:	6051      	str	r1, [r2, #4]
			strcpy(p->grade,"7A");
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8004914:	4a4a      	ldr	r2, [pc, #296]	; (8004a40 <problem_fetch+0x33dc>)
 8004916:	8811      	ldrh	r1, [r2, #0]
 8004918:	7892      	ldrb	r2, [r2, #2]
 800491a:	8019      	strh	r1, [r3, #0]
 800491c:	709a      	strb	r2, [r3, #2]
			p->moveSize = 10;
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	220a      	movs	r2, #10
 8004922:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"E,E,E,H,C,B,F,G,I,J");
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	33a4      	adds	r3, #164	; 0xa4
 8004928:	4a46      	ldr	r2, [pc, #280]	; (8004a44 <problem_fetch+0x33e0>)
 800492a:	461d      	mov	r5, r3
 800492c:	4614      	mov	r4, r2
 800492e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004930:	6028      	str	r0, [r5, #0]
 8004932:	6069      	str	r1, [r5, #4]
 8004934:	60aa      	str	r2, [r5, #8]
 8004936:	60eb      	str	r3, [r5, #12]
 8004938:	6820      	ldr	r0, [r4, #0]
 800493a:	6128      	str	r0, [r5, #16]
			strcpy(p->moveNumbers,"8,9,12,5,5,6,13,15,18,12");
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	3304      	adds	r3, #4
 8004940:	4a41      	ldr	r2, [pc, #260]	; (8004a48 <problem_fetch+0x33e4>)
 8004942:	461d      	mov	r5, r3
 8004944:	4614      	mov	r4, r2
 8004946:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004948:	6028      	str	r0, [r5, #0]
 800494a:	6069      	str	r1, [r5, #4]
 800494c:	60aa      	str	r2, [r5, #8]
 800494e:	60eb      	str	r3, [r5, #12]
 8004950:	cc03      	ldmia	r4!, {r0, r1}
 8004952:	6128      	str	r0, [r5, #16]
 8004954:	6169      	str	r1, [r5, #20]
 8004956:	7823      	ldrb	r3, [r4, #0]
 8004958:	762b      	strb	r3, [r5, #24]
			strcpy(p->startFinish,"d,d,d,d,s,s,d,d,e,d");
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8004960:	4a3a      	ldr	r2, [pc, #232]	; (8004a4c <problem_fetch+0x33e8>)
 8004962:	461d      	mov	r5, r3
 8004964:	4614      	mov	r4, r2
 8004966:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004968:	6028      	str	r0, [r5, #0]
 800496a:	6069      	str	r1, [r5, #4]
 800496c:	60aa      	str	r2, [r5, #8]
 800496e:	60eb      	str	r3, [r5, #12]
 8004970:	6820      	ldr	r0, [r4, #0]
 8004972:	6128      	str	r0, [r5, #16]
			break;
 8004974:	f017 bda6 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 75 :
			strcpy(p->name,"THE GRANARY");
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800497e:	4a34      	ldr	r2, [pc, #208]	; (8004a50 <problem_fetch+0x33ec>)
 8004980:	461c      	mov	r4, r3
 8004982:	4613      	mov	r3, r2
 8004984:	cb07      	ldmia	r3!, {r0, r1, r2}
 8004986:	6020      	str	r0, [r4, #0]
 8004988:	6061      	str	r1, [r4, #4]
 800498a:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade,"7A");
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8004992:	4a2b      	ldr	r2, [pc, #172]	; (8004a40 <problem_fetch+0x33dc>)
 8004994:	8811      	ldrh	r1, [r2, #0]
 8004996:	7892      	ldrb	r2, [r2, #2]
 8004998:	8019      	strh	r1, [r3, #0]
 800499a:	709a      	strb	r2, [r3, #2]
			p->moveSize = 6;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	2206      	movs	r2, #6
 80049a0:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,E,F,C,D,D");
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	33a4      	adds	r3, #164	; 0xa4
 80049a6:	4a2b      	ldr	r2, [pc, #172]	; (8004a54 <problem_fetch+0x33f0>)
 80049a8:	461c      	mov	r4, r3
 80049aa:	4613      	mov	r3, r2
 80049ac:	cb07      	ldmia	r3!, {r0, r1, r2}
 80049ae:	6020      	str	r0, [r4, #0]
 80049b0:	6061      	str	r1, [r4, #4]
 80049b2:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,6,11,13,15,18");
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	3304      	adds	r3, #4
 80049b8:	4a27      	ldr	r2, [pc, #156]	; (8004a58 <problem_fetch+0x33f4>)
 80049ba:	461c      	mov	r4, r3
 80049bc:	4615      	mov	r5, r2
 80049be:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80049c0:	6020      	str	r0, [r4, #0]
 80049c2:	6061      	str	r1, [r4, #4]
 80049c4:	60a2      	str	r2, [r4, #8]
 80049c6:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,s,d,d,d,e");
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 80049ce:	4a0d      	ldr	r2, [pc, #52]	; (8004a04 <problem_fetch+0x33a0>)
 80049d0:	461c      	mov	r4, r3
 80049d2:	4613      	mov	r3, r2
 80049d4:	cb07      	ldmia	r3!, {r0, r1, r2}
 80049d6:	6020      	str	r0, [r4, #0]
 80049d8:	6061      	str	r1, [r4, #4]
 80049da:	60a2      	str	r2, [r4, #8]
			break;
 80049dc:	f017 bd72 	b.w	801c4c4 <problem_fetch+0x1ae60>
 80049e0:	0802492c 	.word	0x0802492c
 80049e4:	08023bf0 	.word	0x08023bf0
 80049e8:	0802493c 	.word	0x0802493c
 80049ec:	0802494c 	.word	0x0802494c
 80049f0:	08024964 	.word	0x08024964
 80049f4:	08024974 	.word	0x08024974
 80049f8:	08023cc4 	.word	0x08023cc4
 80049fc:	08024984 	.word	0x08024984
 8004a00:	08024990 	.word	0x08024990
 8004a04:	08023b04 	.word	0x08023b04
 8004a08:	080249a0 	.word	0x080249a0
 8004a0c:	08023b24 	.word	0x08023b24
 8004a10:	080249b8 	.word	0x080249b8
 8004a14:	080249c8 	.word	0x080249c8
 8004a18:	08023d34 	.word	0x08023d34
 8004a1c:	080249e0 	.word	0x080249e0
 8004a20:	080249e8 	.word	0x080249e8
 8004a24:	080249f4 	.word	0x080249f4
 8004a28:	08023ec0 	.word	0x08023ec0
 8004a2c:	08024a04 	.word	0x08024a04
 8004a30:	08023bbc 	.word	0x08023bbc
 8004a34:	08024a10 	.word	0x08024a10
 8004a38:	08024a1c 	.word	0x08024a1c
 8004a3c:	08024a2c 	.word	0x08024a2c
 8004a40:	08023ae4 	.word	0x08023ae4
 8004a44:	08024a34 	.word	0x08024a34
 8004a48:	08024a48 	.word	0x08024a48
 8004a4c:	08024a64 	.word	0x08024a64
 8004a50:	08024a78 	.word	0x08024a78
 8004a54:	08024a84 	.word	0x08024a84
 8004a58:	08024a90 	.word	0x08024a90
		case 76 :
			strcpy(p->name,"SMALL HOT 3 SPLENDA");
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8004a62:	4aaf      	ldr	r2, [pc, #700]	; (8004d20 <problem_fetch+0x36bc>)
 8004a64:	461d      	mov	r5, r3
 8004a66:	4614      	mov	r4, r2
 8004a68:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004a6a:	6028      	str	r0, [r5, #0]
 8004a6c:	6069      	str	r1, [r5, #4]
 8004a6e:	60aa      	str	r2, [r5, #8]
 8004a70:	60eb      	str	r3, [r5, #12]
 8004a72:	6820      	ldr	r0, [r4, #0]
 8004a74:	6128      	str	r0, [r5, #16]
			strcpy(p->grade,"6B+");
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8004a7c:	4aa9      	ldr	r2, [pc, #676]	; (8004d24 <problem_fetch+0x36c0>)
 8004a7e:	6810      	ldr	r0, [r2, #0]
 8004a80:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	2206      	movs	r2, #6
 8004a86:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"E,H,D,I,E,D");
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	33a4      	adds	r3, #164	; 0xa4
 8004a8c:	4aa6      	ldr	r2, [pc, #664]	; (8004d28 <problem_fetch+0x36c4>)
 8004a8e:	461c      	mov	r4, r3
 8004a90:	4613      	mov	r3, r2
 8004a92:	cb07      	ldmia	r3!, {r0, r1, r2}
 8004a94:	6020      	str	r0, [r4, #0]
 8004a96:	6061      	str	r1, [r4, #4]
 8004a98:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"6,10,11,14,16,18");
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	3304      	adds	r3, #4
 8004a9e:	4aa3      	ldr	r2, [pc, #652]	; (8004d2c <problem_fetch+0x36c8>)
 8004aa0:	461d      	mov	r5, r3
 8004aa2:	4614      	mov	r4, r2
 8004aa4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004aa6:	6028      	str	r0, [r5, #0]
 8004aa8:	6069      	str	r1, [r5, #4]
 8004aaa:	60aa      	str	r2, [r5, #8]
 8004aac:	60eb      	str	r3, [r5, #12]
 8004aae:	7823      	ldrb	r3, [r4, #0]
 8004ab0:	742b      	strb	r3, [r5, #16]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8004ab8:	4a9d      	ldr	r2, [pc, #628]	; (8004d30 <problem_fetch+0x36cc>)
 8004aba:	461c      	mov	r4, r3
 8004abc:	4613      	mov	r3, r2
 8004abe:	cb07      	ldmia	r3!, {r0, r1, r2}
 8004ac0:	6020      	str	r0, [r4, #0]
 8004ac2:	6061      	str	r1, [r4, #4]
 8004ac4:	60a2      	str	r2, [r4, #8]
			break;
 8004ac6:	f017 bcfd 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 77 :
			strcpy(p->name,"WALLABY");
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8004ad0:	4998      	ldr	r1, [pc, #608]	; (8004d34 <problem_fetch+0x36d0>)
 8004ad2:	461a      	mov	r2, r3
 8004ad4:	460b      	mov	r3, r1
 8004ad6:	cb03      	ldmia	r3!, {r0, r1}
 8004ad8:	6010      	str	r0, [r2, #0]
 8004ada:	6051      	str	r1, [r2, #4]
			strcpy(p->grade,"6C");
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8004ae2:	4a95      	ldr	r2, [pc, #596]	; (8004d38 <problem_fetch+0x36d4>)
 8004ae4:	8811      	ldrh	r1, [r2, #0]
 8004ae6:	7892      	ldrb	r2, [r2, #2]
 8004ae8:	8019      	strh	r1, [r3, #0]
 8004aea:	709a      	strb	r2, [r3, #2]
			p->moveSize = 9;
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	2209      	movs	r2, #9
 8004af0:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"E,G,E,F,E,J,I,H,I");
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	33a4      	adds	r3, #164	; 0xa4
 8004af6:	4a91      	ldr	r2, [pc, #580]	; (8004d3c <problem_fetch+0x36d8>)
 8004af8:	461d      	mov	r5, r3
 8004afa:	4614      	mov	r4, r2
 8004afc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004afe:	6028      	str	r0, [r5, #0]
 8004b00:	6069      	str	r1, [r5, #4]
 8004b02:	60aa      	str	r2, [r5, #8]
 8004b04:	60eb      	str	r3, [r5, #12]
 8004b06:	8823      	ldrh	r3, [r4, #0]
 8004b08:	822b      	strh	r3, [r5, #16]
			strcpy(p->moveNumbers,"6,6,8,11,12,7,14,16,18");
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	3304      	adds	r3, #4
 8004b0e:	4a8c      	ldr	r2, [pc, #560]	; (8004d40 <problem_fetch+0x36dc>)
 8004b10:	461c      	mov	r4, r3
 8004b12:	4615      	mov	r5, r2
 8004b14:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004b16:	6020      	str	r0, [r4, #0]
 8004b18:	6061      	str	r1, [r4, #4]
 8004b1a:	60a2      	str	r2, [r4, #8]
 8004b1c:	60e3      	str	r3, [r4, #12]
 8004b1e:	6828      	ldr	r0, [r5, #0]
 8004b20:	6120      	str	r0, [r4, #16]
 8004b22:	88ab      	ldrh	r3, [r5, #4]
 8004b24:	79aa      	ldrb	r2, [r5, #6]
 8004b26:	82a3      	strh	r3, [r4, #20]
 8004b28:	4613      	mov	r3, r2
 8004b2a:	75a3      	strb	r3, [r4, #22]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,d,e");
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8004b32:	4a84      	ldr	r2, [pc, #528]	; (8004d44 <problem_fetch+0x36e0>)
 8004b34:	461d      	mov	r5, r3
 8004b36:	4614      	mov	r4, r2
 8004b38:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004b3a:	6028      	str	r0, [r5, #0]
 8004b3c:	6069      	str	r1, [r5, #4]
 8004b3e:	60aa      	str	r2, [r5, #8]
 8004b40:	60eb      	str	r3, [r5, #12]
 8004b42:	8823      	ldrh	r3, [r4, #0]
 8004b44:	822b      	strh	r3, [r5, #16]
			break;
 8004b46:	f017 bcbd 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 78 :
			strcpy(p->name,"ESSEK");
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8004b50:	4a7d      	ldr	r2, [pc, #500]	; (8004d48 <problem_fetch+0x36e4>)
 8004b52:	6810      	ldr	r0, [r2, #0]
 8004b54:	6018      	str	r0, [r3, #0]
 8004b56:	8892      	ldrh	r2, [r2, #4]
 8004b58:	809a      	strh	r2, [r3, #4]
			strcpy(p->grade,"6C+");
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8004b60:	4a7a      	ldr	r2, [pc, #488]	; (8004d4c <problem_fetch+0x36e8>)
 8004b62:	6810      	ldr	r0, [r2, #0]
 8004b64:	6018      	str	r0, [r3, #0]
			p->moveSize = 8;
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	2208      	movs	r2, #8
 8004b6a:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,J,H,E,G,G,G,D");
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	33a4      	adds	r3, #164	; 0xa4
 8004b70:	4a77      	ldr	r2, [pc, #476]	; (8004d50 <problem_fetch+0x36ec>)
 8004b72:	461c      	mov	r4, r3
 8004b74:	4615      	mov	r5, r2
 8004b76:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004b78:	6020      	str	r0, [r4, #0]
 8004b7a:	6061      	str	r1, [r4, #4]
 8004b7c:	60a2      	str	r2, [r4, #8]
 8004b7e:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"6,5,10,12,14,15,17,18");
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	3304      	adds	r3, #4
 8004b84:	4a73      	ldr	r2, [pc, #460]	; (8004d54 <problem_fetch+0x36f0>)
 8004b86:	461d      	mov	r5, r3
 8004b88:	4614      	mov	r4, r2
 8004b8a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004b8c:	6028      	str	r0, [r5, #0]
 8004b8e:	6069      	str	r1, [r5, #4]
 8004b90:	60aa      	str	r2, [r5, #8]
 8004b92:	60eb      	str	r3, [r5, #12]
 8004b94:	6820      	ldr	r0, [r4, #0]
 8004b96:	6128      	str	r0, [r5, #16]
 8004b98:	88a3      	ldrh	r3, [r4, #4]
 8004b9a:	82ab      	strh	r3, [r5, #20]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,e");
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8004ba2:	4a6d      	ldr	r2, [pc, #436]	; (8004d58 <problem_fetch+0x36f4>)
 8004ba4:	461c      	mov	r4, r3
 8004ba6:	4615      	mov	r5, r2
 8004ba8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004baa:	6020      	str	r0, [r4, #0]
 8004bac:	6061      	str	r1, [r4, #4]
 8004bae:	60a2      	str	r2, [r4, #8]
 8004bb0:	60e3      	str	r3, [r4, #12]
			break;
 8004bb2:	f017 bc87 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 79 :
			strcpy(p->name,"BLACK MIRROR");
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8004bbc:	4a67      	ldr	r2, [pc, #412]	; (8004d5c <problem_fetch+0x36f8>)
 8004bbe:	461c      	mov	r4, r3
 8004bc0:	4613      	mov	r3, r2
 8004bc2:	cb07      	ldmia	r3!, {r0, r1, r2}
 8004bc4:	6020      	str	r0, [r4, #0]
 8004bc6:	6061      	str	r1, [r4, #4]
 8004bc8:	60a2      	str	r2, [r4, #8]
 8004bca:	781b      	ldrb	r3, [r3, #0]
 8004bcc:	7323      	strb	r3, [r4, #12]
			strcpy(p->grade,"7C");
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8004bd4:	4a62      	ldr	r2, [pc, #392]	; (8004d60 <problem_fetch+0x36fc>)
 8004bd6:	8811      	ldrh	r1, [r2, #0]
 8004bd8:	7892      	ldrb	r2, [r2, #2]
 8004bda:	8019      	strh	r1, [r3, #0]
 8004bdc:	709a      	strb	r2, [r3, #2]
			p->moveSize = 8;
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	2208      	movs	r2, #8
 8004be2:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,H,I,F,E,D,G,I");
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	33a4      	adds	r3, #164	; 0xa4
 8004be8:	4a5e      	ldr	r2, [pc, #376]	; (8004d64 <problem_fetch+0x3700>)
 8004bea:	461c      	mov	r4, r3
 8004bec:	4615      	mov	r5, r2
 8004bee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004bf0:	6020      	str	r0, [r4, #0]
 8004bf2:	6061      	str	r1, [r4, #4]
 8004bf4:	60a2      	str	r2, [r4, #8]
 8004bf6:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,8,9,11,12,15,17,18");
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	3304      	adds	r3, #4
 8004bfc:	4a5a      	ldr	r2, [pc, #360]	; (8004d68 <problem_fetch+0x3704>)
 8004bfe:	461d      	mov	r5, r3
 8004c00:	4614      	mov	r4, r2
 8004c02:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004c04:	6028      	str	r0, [r5, #0]
 8004c06:	6069      	str	r1, [r5, #4]
 8004c08:	60aa      	str	r2, [r5, #8]
 8004c0a:	60eb      	str	r3, [r5, #12]
 8004c0c:	6820      	ldr	r0, [r4, #0]
 8004c0e:	6128      	str	r0, [r5, #16]
 8004c10:	7923      	ldrb	r3, [r4, #4]
 8004c12:	752b      	strb	r3, [r5, #20]
			strcpy(p->startFinish,"s,d,d,d,d,d,d,e");
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8004c1a:	4a54      	ldr	r2, [pc, #336]	; (8004d6c <problem_fetch+0x3708>)
 8004c1c:	461c      	mov	r4, r3
 8004c1e:	4615      	mov	r5, r2
 8004c20:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004c22:	6020      	str	r0, [r4, #0]
 8004c24:	6061      	str	r1, [r4, #4]
 8004c26:	60a2      	str	r2, [r4, #8]
 8004c28:	60e3      	str	r3, [r4, #12]
			break;
 8004c2a:	f017 bc4b 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 80 :
			strcpy(p->name,"Z3GZAG");
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8004c34:	4a4e      	ldr	r2, [pc, #312]	; (8004d70 <problem_fetch+0x370c>)
 8004c36:	6810      	ldr	r0, [r2, #0]
 8004c38:	6018      	str	r0, [r3, #0]
 8004c3a:	8891      	ldrh	r1, [r2, #4]
 8004c3c:	7992      	ldrb	r2, [r2, #6]
 8004c3e:	8099      	strh	r1, [r3, #4]
 8004c40:	719a      	strb	r2, [r3, #6]
			strcpy(p->grade,"6B+");
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8004c48:	4a36      	ldr	r2, [pc, #216]	; (8004d24 <problem_fetch+0x36c0>)
 8004c4a:	6810      	ldr	r0, [r2, #0]
 8004c4c:	6018      	str	r0, [r3, #0]
			p->moveSize = 9;
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	2209      	movs	r2, #9
 8004c52:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,H,H,H,I,G,G,D,E");
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	33a4      	adds	r3, #164	; 0xa4
 8004c58:	4a46      	ldr	r2, [pc, #280]	; (8004d74 <problem_fetch+0x3710>)
 8004c5a:	461d      	mov	r5, r3
 8004c5c:	4614      	mov	r4, r2
 8004c5e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004c60:	6028      	str	r0, [r5, #0]
 8004c62:	6069      	str	r1, [r5, #4]
 8004c64:	60aa      	str	r2, [r5, #8]
 8004c66:	60eb      	str	r3, [r5, #12]
 8004c68:	8823      	ldrh	r3, [r4, #0]
 8004c6a:	822b      	strh	r3, [r5, #16]
			strcpy(p->moveNumbers,"4,8,10,12,14,15,17,18,6");
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	3304      	adds	r3, #4
 8004c70:	4a41      	ldr	r2, [pc, #260]	; (8004d78 <problem_fetch+0x3714>)
 8004c72:	461d      	mov	r5, r3
 8004c74:	4614      	mov	r4, r2
 8004c76:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004c78:	6028      	str	r0, [r5, #0]
 8004c7a:	6069      	str	r1, [r5, #4]
 8004c7c:	60aa      	str	r2, [r5, #8]
 8004c7e:	60eb      	str	r3, [r5, #12]
 8004c80:	cc03      	ldmia	r4!, {r0, r1}
 8004c82:	6128      	str	r0, [r5, #16]
 8004c84:	6169      	str	r1, [r5, #20]
			strcpy(p->startFinish,"s,d,d,d,d,d,d,e,s");
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8004c8c:	4a3b      	ldr	r2, [pc, #236]	; (8004d7c <problem_fetch+0x3718>)
 8004c8e:	461d      	mov	r5, r3
 8004c90:	4614      	mov	r4, r2
 8004c92:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004c94:	6028      	str	r0, [r5, #0]
 8004c96:	6069      	str	r1, [r5, #4]
 8004c98:	60aa      	str	r2, [r5, #8]
 8004c9a:	60eb      	str	r3, [r5, #12]
 8004c9c:	8823      	ldrh	r3, [r4, #0]
 8004c9e:	822b      	strh	r3, [r5, #16]
			break;
 8004ca0:	f017 bc10 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 81 :
			strcpy(p->name,"WHO NEEDS DR. GREG");
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8004caa:	4a35      	ldr	r2, [pc, #212]	; (8004d80 <problem_fetch+0x371c>)
 8004cac:	461d      	mov	r5, r3
 8004cae:	4614      	mov	r4, r2
 8004cb0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004cb2:	6028      	str	r0, [r5, #0]
 8004cb4:	6069      	str	r1, [r5, #4]
 8004cb6:	60aa      	str	r2, [r5, #8]
 8004cb8:	60eb      	str	r3, [r5, #12]
 8004cba:	8823      	ldrh	r3, [r4, #0]
 8004cbc:	78a2      	ldrb	r2, [r4, #2]
 8004cbe:	822b      	strh	r3, [r5, #16]
 8004cc0:	4613      	mov	r3, r2
 8004cc2:	74ab      	strb	r3, [r5, #18]
			strcpy(p->grade,"7A+");
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8004cca:	4a2e      	ldr	r2, [pc, #184]	; (8004d84 <problem_fetch+0x3720>)
 8004ccc:	6810      	ldr	r0, [r2, #0]
 8004cce:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	2207      	movs	r2, #7
 8004cd4:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"E,J,E,D,G,H,D");
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	33a4      	adds	r3, #164	; 0xa4
 8004cda:	4a2b      	ldr	r2, [pc, #172]	; (8004d88 <problem_fetch+0x3724>)
 8004cdc:	461c      	mov	r4, r3
 8004cde:	4613      	mov	r3, r2
 8004ce0:	cb07      	ldmia	r3!, {r0, r1, r2}
 8004ce2:	6020      	str	r0, [r4, #0]
 8004ce4:	6061      	str	r1, [r4, #4]
 8004ce6:	60a2      	str	r2, [r4, #8]
 8004ce8:	881b      	ldrh	r3, [r3, #0]
 8004cea:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"6,5,14,18,9,12,11");
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	3304      	adds	r3, #4
 8004cf0:	4a26      	ldr	r2, [pc, #152]	; (8004d8c <problem_fetch+0x3728>)
 8004cf2:	461d      	mov	r5, r3
 8004cf4:	4614      	mov	r4, r2
 8004cf6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004cf8:	6028      	str	r0, [r5, #0]
 8004cfa:	6069      	str	r1, [r5, #4]
 8004cfc:	60aa      	str	r2, [r5, #8]
 8004cfe:	60eb      	str	r3, [r5, #12]
 8004d00:	8823      	ldrh	r3, [r4, #0]
 8004d02:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,s,d,e,d,d,d");
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8004d0a:	4a21      	ldr	r2, [pc, #132]	; (8004d90 <problem_fetch+0x372c>)
 8004d0c:	461c      	mov	r4, r3
 8004d0e:	4613      	mov	r3, r2
 8004d10:	cb07      	ldmia	r3!, {r0, r1, r2}
 8004d12:	6020      	str	r0, [r4, #0]
 8004d14:	6061      	str	r1, [r4, #4]
 8004d16:	60a2      	str	r2, [r4, #8]
 8004d18:	881b      	ldrh	r3, [r3, #0]
 8004d1a:	81a3      	strh	r3, [r4, #12]
			break;
 8004d1c:	f017 bbd2 	b.w	801c4c4 <problem_fetch+0x1ae60>
 8004d20:	08024aa0 	.word	0x08024aa0
 8004d24:	08023b24 	.word	0x08023b24
 8004d28:	08024ab4 	.word	0x08024ab4
 8004d2c:	08024ac0 	.word	0x08024ac0
 8004d30:	08023ec0 	.word	0x08023ec0
 8004d34:	08024ad4 	.word	0x08024ad4
 8004d38:	08023bf0 	.word	0x08023bf0
 8004d3c:	08024adc 	.word	0x08024adc
 8004d40:	08024af0 	.word	0x08024af0
 8004d44:	08024b08 	.word	0x08024b08
 8004d48:	08024b1c 	.word	0x08024b1c
 8004d4c:	08023bbc 	.word	0x08023bbc
 8004d50:	08024b24 	.word	0x08024b24
 8004d54:	08024b34 	.word	0x08024b34
 8004d58:	08023c48 	.word	0x08023c48
 8004d5c:	08024b4c 	.word	0x08024b4c
 8004d60:	08024358 	.word	0x08024358
 8004d64:	08024b5c 	.word	0x08024b5c
 8004d68:	08024b6c 	.word	0x08024b6c
 8004d6c:	08023d34 	.word	0x08023d34
 8004d70:	08024b84 	.word	0x08024b84
 8004d74:	08024b8c 	.word	0x08024b8c
 8004d78:	08024ba0 	.word	0x08024ba0
 8004d7c:	080242c4 	.word	0x080242c4
 8004d80:	08024bb8 	.word	0x08024bb8
 8004d84:	08023cc4 	.word	0x08023cc4
 8004d88:	08024bcc 	.word	0x08024bcc
 8004d8c:	08024bdc 	.word	0x08024bdc
 8004d90:	08024bf0 	.word	0x08024bf0
		case 82 :
			strcpy(p->name,"BLACKTOP");
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8004d9a:	49af      	ldr	r1, [pc, #700]	; (8005058 <problem_fetch+0x39f4>)
 8004d9c:	461a      	mov	r2, r3
 8004d9e:	460b      	mov	r3, r1
 8004da0:	cb03      	ldmia	r3!, {r0, r1}
 8004da2:	6010      	str	r0, [r2, #0]
 8004da4:	6051      	str	r1, [r2, #4]
 8004da6:	781b      	ldrb	r3, [r3, #0]
 8004da8:	7213      	strb	r3, [r2, #8]
			strcpy(p->grade,"7A");
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8004db0:	4aaa      	ldr	r2, [pc, #680]	; (800505c <problem_fetch+0x39f8>)
 8004db2:	8811      	ldrh	r1, [r2, #0]
 8004db4:	7892      	ldrb	r2, [r2, #2]
 8004db6:	8019      	strh	r1, [r3, #0]
 8004db8:	709a      	strb	r2, [r3, #2]
			p->moveSize = 6;
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	2206      	movs	r2, #6
 8004dbe:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,K,I,I,D,D");
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	33a4      	adds	r3, #164	; 0xa4
 8004dc4:	4aa6      	ldr	r2, [pc, #664]	; (8005060 <problem_fetch+0x39fc>)
 8004dc6:	461c      	mov	r4, r3
 8004dc8:	4613      	mov	r3, r2
 8004dca:	cb07      	ldmia	r3!, {r0, r1, r2}
 8004dcc:	6020      	str	r0, [r4, #0]
 8004dce:	6061      	str	r1, [r4, #4]
 8004dd0:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,9,9,14,11,18");
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	3304      	adds	r3, #4
 8004dd6:	4aa3      	ldr	r2, [pc, #652]	; (8005064 <problem_fetch+0x3a00>)
 8004dd8:	461c      	mov	r4, r3
 8004dda:	4613      	mov	r3, r2
 8004ddc:	cb07      	ldmia	r3!, {r0, r1, r2}
 8004dde:	6020      	str	r0, [r4, #0]
 8004de0:	6061      	str	r1, [r4, #4]
 8004de2:	60a2      	str	r2, [r4, #8]
 8004de4:	881a      	ldrh	r2, [r3, #0]
 8004de6:	789b      	ldrb	r3, [r3, #2]
 8004de8:	81a2      	strh	r2, [r4, #12]
 8004dea:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8004df2:	4a9d      	ldr	r2, [pc, #628]	; (8005068 <problem_fetch+0x3a04>)
 8004df4:	461c      	mov	r4, r3
 8004df6:	4613      	mov	r3, r2
 8004df8:	cb07      	ldmia	r3!, {r0, r1, r2}
 8004dfa:	6020      	str	r0, [r4, #0]
 8004dfc:	6061      	str	r1, [r4, #4]
 8004dfe:	60a2      	str	r2, [r4, #8]
			break;
 8004e00:	f017 bb60 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 83 :
			strcpy(p->name,"MURPHY STINKS");
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8004e0a:	4a98      	ldr	r2, [pc, #608]	; (800506c <problem_fetch+0x3a08>)
 8004e0c:	461c      	mov	r4, r3
 8004e0e:	4613      	mov	r3, r2
 8004e10:	cb07      	ldmia	r3!, {r0, r1, r2}
 8004e12:	6020      	str	r0, [r4, #0]
 8004e14:	6061      	str	r1, [r4, #4]
 8004e16:	60a2      	str	r2, [r4, #8]
 8004e18:	881b      	ldrh	r3, [r3, #0]
 8004e1a:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade,"6B+");
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8004e22:	4a93      	ldr	r2, [pc, #588]	; (8005070 <problem_fetch+0x3a0c>)
 8004e24:	6810      	ldr	r0, [r2, #0]
 8004e26:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	2207      	movs	r2, #7
 8004e2c:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"H,H,I,J,I,J,J");
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	33a4      	adds	r3, #164	; 0xa4
 8004e32:	4a90      	ldr	r2, [pc, #576]	; (8005074 <problem_fetch+0x3a10>)
 8004e34:	461c      	mov	r4, r3
 8004e36:	4613      	mov	r3, r2
 8004e38:	cb07      	ldmia	r3!, {r0, r1, r2}
 8004e3a:	6020      	str	r0, [r4, #0]
 8004e3c:	6061      	str	r1, [r4, #4]
 8004e3e:	60a2      	str	r2, [r4, #8]
 8004e40:	881b      	ldrh	r3, [r3, #0]
 8004e42:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"8,10,14,12,18,7,5");
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	3304      	adds	r3, #4
 8004e48:	4a8b      	ldr	r2, [pc, #556]	; (8005078 <problem_fetch+0x3a14>)
 8004e4a:	461d      	mov	r5, r3
 8004e4c:	4614      	mov	r4, r2
 8004e4e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004e50:	6028      	str	r0, [r5, #0]
 8004e52:	6069      	str	r1, [r5, #4]
 8004e54:	60aa      	str	r2, [r5, #8]
 8004e56:	60eb      	str	r3, [r5, #12]
 8004e58:	8823      	ldrh	r3, [r4, #0]
 8004e5a:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"d,d,d,d,e,d,s");
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8004e62:	4a86      	ldr	r2, [pc, #536]	; (800507c <problem_fetch+0x3a18>)
 8004e64:	461c      	mov	r4, r3
 8004e66:	4613      	mov	r3, r2
 8004e68:	cb07      	ldmia	r3!, {r0, r1, r2}
 8004e6a:	6020      	str	r0, [r4, #0]
 8004e6c:	6061      	str	r1, [r4, #4]
 8004e6e:	60a2      	str	r2, [r4, #8]
 8004e70:	881b      	ldrh	r3, [r3, #0]
 8004e72:	81a3      	strh	r3, [r4, #12]
			break;
 8004e74:	f017 bb26 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 84 :
			strcpy(p->name,"BLACK HORSE");
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8004e7e:	4a80      	ldr	r2, [pc, #512]	; (8005080 <problem_fetch+0x3a1c>)
 8004e80:	461c      	mov	r4, r3
 8004e82:	4613      	mov	r3, r2
 8004e84:	cb07      	ldmia	r3!, {r0, r1, r2}
 8004e86:	6020      	str	r0, [r4, #0]
 8004e88:	6061      	str	r1, [r4, #4]
 8004e8a:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade,"6C+");
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8004e92:	4a7c      	ldr	r2, [pc, #496]	; (8005084 <problem_fetch+0x3a20>)
 8004e94:	6810      	ldr	r0, [r2, #0]
 8004e96:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	2207      	movs	r2, #7
 8004e9c:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,K,H,D,E,A,I");
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	33a4      	adds	r3, #164	; 0xa4
 8004ea2:	4a79      	ldr	r2, [pc, #484]	; (8005088 <problem_fetch+0x3a24>)
 8004ea4:	461c      	mov	r4, r3
 8004ea6:	4613      	mov	r3, r2
 8004ea8:	cb07      	ldmia	r3!, {r0, r1, r2}
 8004eaa:	6020      	str	r0, [r4, #0]
 8004eac:	6061      	str	r1, [r4, #4]
 8004eae:	60a2      	str	r2, [r4, #8]
 8004eb0:	881b      	ldrh	r3, [r3, #0]
 8004eb2:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,9,12,15,16,18,14");
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	3304      	adds	r3, #4
 8004eb8:	4a74      	ldr	r2, [pc, #464]	; (800508c <problem_fetch+0x3a28>)
 8004eba:	461d      	mov	r5, r3
 8004ebc:	4614      	mov	r4, r2
 8004ebe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004ec0:	6028      	str	r0, [r5, #0]
 8004ec2:	6069      	str	r1, [r5, #4]
 8004ec4:	60aa      	str	r2, [r5, #8]
 8004ec6:	60eb      	str	r3, [r5, #12]
 8004ec8:	8823      	ldrh	r3, [r4, #0]
 8004eca:	78a2      	ldrb	r2, [r4, #2]
 8004ecc:	822b      	strh	r3, [r5, #16]
 8004ece:	4613      	mov	r3, r2
 8004ed0:	74ab      	strb	r3, [r5, #18]
			strcpy(p->startFinish,"s,d,d,d,d,e,d");
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8004ed8:	4a6d      	ldr	r2, [pc, #436]	; (8005090 <problem_fetch+0x3a2c>)
 8004eda:	461c      	mov	r4, r3
 8004edc:	4613      	mov	r3, r2
 8004ede:	cb07      	ldmia	r3!, {r0, r1, r2}
 8004ee0:	6020      	str	r0, [r4, #0]
 8004ee2:	6061      	str	r1, [r4, #4]
 8004ee4:	60a2      	str	r2, [r4, #8]
 8004ee6:	881b      	ldrh	r3, [r3, #0]
 8004ee8:	81a3      	strh	r3, [r4, #12]
			break;
 8004eea:	f017 baeb 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 85 :
			strcpy(p->name,"BLACK 1.1");
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8004ef4:	4967      	ldr	r1, [pc, #412]	; (8005094 <problem_fetch+0x3a30>)
 8004ef6:	461a      	mov	r2, r3
 8004ef8:	460b      	mov	r3, r1
 8004efa:	cb03      	ldmia	r3!, {r0, r1}
 8004efc:	6010      	str	r0, [r2, #0]
 8004efe:	6051      	str	r1, [r2, #4]
 8004f00:	881b      	ldrh	r3, [r3, #0]
 8004f02:	8113      	strh	r3, [r2, #8]
			strcpy(p->grade,"7A");
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8004f0a:	4a54      	ldr	r2, [pc, #336]	; (800505c <problem_fetch+0x39f8>)
 8004f0c:	8811      	ldrh	r1, [r2, #0]
 8004f0e:	7892      	ldrb	r2, [r2, #2]
 8004f10:	8019      	strh	r1, [r3, #0]
 8004f12:	709a      	strb	r2, [r3, #2]
			p->moveSize = 7;
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	2207      	movs	r2, #7
 8004f18:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,J,K,H,I,E,D");
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	33a4      	adds	r3, #164	; 0xa4
 8004f1e:	4a5e      	ldr	r2, [pc, #376]	; (8005098 <problem_fetch+0x3a34>)
 8004f20:	461c      	mov	r4, r3
 8004f22:	4613      	mov	r3, r2
 8004f24:	cb07      	ldmia	r3!, {r0, r1, r2}
 8004f26:	6020      	str	r0, [r4, #0]
 8004f28:	6061      	str	r1, [r4, #4]
 8004f2a:	60a2      	str	r2, [r4, #8]
 8004f2c:	881b      	ldrh	r3, [r3, #0]
 8004f2e:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"6,5,9,12,14,14,18");
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	3304      	adds	r3, #4
 8004f34:	4a59      	ldr	r2, [pc, #356]	; (800509c <problem_fetch+0x3a38>)
 8004f36:	461d      	mov	r5, r3
 8004f38:	4614      	mov	r4, r2
 8004f3a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004f3c:	6028      	str	r0, [r5, #0]
 8004f3e:	6069      	str	r1, [r5, #4]
 8004f40:	60aa      	str	r2, [r5, #8]
 8004f42:	60eb      	str	r3, [r5, #12]
 8004f44:	8823      	ldrh	r3, [r4, #0]
 8004f46:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,s,d,d,d,d,e");
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8004f4e:	4a54      	ldr	r2, [pc, #336]	; (80050a0 <problem_fetch+0x3a3c>)
 8004f50:	461c      	mov	r4, r3
 8004f52:	4613      	mov	r3, r2
 8004f54:	cb07      	ldmia	r3!, {r0, r1, r2}
 8004f56:	6020      	str	r0, [r4, #0]
 8004f58:	6061      	str	r1, [r4, #4]
 8004f5a:	60a2      	str	r2, [r4, #8]
 8004f5c:	881b      	ldrh	r3, [r3, #0]
 8004f5e:	81a3      	strh	r3, [r4, #12]
			break;
 8004f60:	f017 bab0 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 86 :
			strcpy(p->name,"BLACK 1");
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8004f6a:	494e      	ldr	r1, [pc, #312]	; (80050a4 <problem_fetch+0x3a40>)
 8004f6c:	461a      	mov	r2, r3
 8004f6e:	460b      	mov	r3, r1
 8004f70:	cb03      	ldmia	r3!, {r0, r1}
 8004f72:	6010      	str	r0, [r2, #0]
 8004f74:	6051      	str	r1, [r2, #4]
			strcpy(p->grade,"6B+");
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8004f7c:	4a3c      	ldr	r2, [pc, #240]	; (8005070 <problem_fetch+0x3a0c>)
 8004f7e:	6810      	ldr	r0, [r2, #0]
 8004f80:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	2207      	movs	r2, #7
 8004f86:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"D,E,G,B,B,A,D");
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	33a4      	adds	r3, #164	; 0xa4
 8004f8c:	4a46      	ldr	r2, [pc, #280]	; (80050a8 <problem_fetch+0x3a44>)
 8004f8e:	461c      	mov	r4, r3
 8004f90:	4613      	mov	r3, r2
 8004f92:	cb07      	ldmia	r3!, {r0, r1, r2}
 8004f94:	6020      	str	r0, [r4, #0]
 8004f96:	6061      	str	r1, [r4, #4]
 8004f98:	60a2      	str	r2, [r4, #8]
 8004f9a:	881b      	ldrh	r3, [r3, #0]
 8004f9c:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"7,8,4,10,12,14,18");
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	3304      	adds	r3, #4
 8004fa2:	4a42      	ldr	r2, [pc, #264]	; (80050ac <problem_fetch+0x3a48>)
 8004fa4:	461d      	mov	r5, r3
 8004fa6:	4614      	mov	r4, r2
 8004fa8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004faa:	6028      	str	r0, [r5, #0]
 8004fac:	6069      	str	r1, [r5, #4]
 8004fae:	60aa      	str	r2, [r5, #8]
 8004fb0:	60eb      	str	r3, [r5, #12]
 8004fb2:	8823      	ldrh	r3, [r4, #0]
 8004fb4:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"d,d,s,d,d,d,e");
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8004fbc:	4a3c      	ldr	r2, [pc, #240]	; (80050b0 <problem_fetch+0x3a4c>)
 8004fbe:	461c      	mov	r4, r3
 8004fc0:	4613      	mov	r3, r2
 8004fc2:	cb07      	ldmia	r3!, {r0, r1, r2}
 8004fc4:	6020      	str	r0, [r4, #0]
 8004fc6:	6061      	str	r1, [r4, #4]
 8004fc8:	60a2      	str	r2, [r4, #8]
 8004fca:	881b      	ldrh	r3, [r3, #0]
 8004fcc:	81a3      	strh	r3, [r4, #12]
			break;
 8004fce:	f017 ba79 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 87 :
			strcpy(p->name,"BLACKBOARD");
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8004fd8:	4936      	ldr	r1, [pc, #216]	; (80050b4 <problem_fetch+0x3a50>)
 8004fda:	461a      	mov	r2, r3
 8004fdc:	460b      	mov	r3, r1
 8004fde:	cb03      	ldmia	r3!, {r0, r1}
 8004fe0:	6010      	str	r0, [r2, #0]
 8004fe2:	6051      	str	r1, [r2, #4]
 8004fe4:	8819      	ldrh	r1, [r3, #0]
 8004fe6:	789b      	ldrb	r3, [r3, #2]
 8004fe8:	8111      	strh	r1, [r2, #8]
 8004fea:	7293      	strb	r3, [r2, #10]
			strcpy(p->grade,"7A");
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8004ff2:	4a1a      	ldr	r2, [pc, #104]	; (800505c <problem_fetch+0x39f8>)
 8004ff4:	8811      	ldrh	r1, [r2, #0]
 8004ff6:	7892      	ldrb	r2, [r2, #2]
 8004ff8:	8019      	strh	r1, [r3, #0]
 8004ffa:	709a      	strb	r2, [r3, #2]
			p->moveSize = 10;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	220a      	movs	r2, #10
 8005000:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"B,C,H,G,K,J,K,H,G,D");
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	33a4      	adds	r3, #164	; 0xa4
 8005006:	4a2c      	ldr	r2, [pc, #176]	; (80050b8 <problem_fetch+0x3a54>)
 8005008:	461d      	mov	r5, r3
 800500a:	4614      	mov	r4, r2
 800500c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800500e:	6028      	str	r0, [r5, #0]
 8005010:	6069      	str	r1, [r5, #4]
 8005012:	60aa      	str	r2, [r5, #8]
 8005014:	60eb      	str	r3, [r5, #12]
 8005016:	6820      	ldr	r0, [r4, #0]
 8005018:	6128      	str	r0, [r5, #16]
			strcpy(p->moveNumbers,"6,5,5,6,9,13,16,16,17,18");
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	3304      	adds	r3, #4
 800501e:	4a27      	ldr	r2, [pc, #156]	; (80050bc <problem_fetch+0x3a58>)
 8005020:	461d      	mov	r5, r3
 8005022:	4614      	mov	r4, r2
 8005024:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005026:	6028      	str	r0, [r5, #0]
 8005028:	6069      	str	r1, [r5, #4]
 800502a:	60aa      	str	r2, [r5, #8]
 800502c:	60eb      	str	r3, [r5, #12]
 800502e:	cc03      	ldmia	r4!, {r0, r1}
 8005030:	6128      	str	r0, [r5, #16]
 8005032:	6169      	str	r1, [r5, #20]
 8005034:	7823      	ldrb	r3, [r4, #0]
 8005036:	762b      	strb	r3, [r5, #24]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,d,d,e");
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800503e:	4a20      	ldr	r2, [pc, #128]	; (80050c0 <problem_fetch+0x3a5c>)
 8005040:	461d      	mov	r5, r3
 8005042:	4614      	mov	r4, r2
 8005044:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005046:	6028      	str	r0, [r5, #0]
 8005048:	6069      	str	r1, [r5, #4]
 800504a:	60aa      	str	r2, [r5, #8]
 800504c:	60eb      	str	r3, [r5, #12]
 800504e:	6820      	ldr	r0, [r4, #0]
 8005050:	6128      	str	r0, [r5, #16]
			break;
 8005052:	f017 ba37 	b.w	801c4c4 <problem_fetch+0x1ae60>
 8005056:	bf00      	nop
 8005058:	08024c00 	.word	0x08024c00
 800505c:	08023ae4 	.word	0x08023ae4
 8005060:	08024c0c 	.word	0x08024c0c
 8005064:	08024c18 	.word	0x08024c18
 8005068:	08023ec0 	.word	0x08023ec0
 800506c:	08024c28 	.word	0x08024c28
 8005070:	08023b24 	.word	0x08023b24
 8005074:	08024c38 	.word	0x08024c38
 8005078:	08024c48 	.word	0x08024c48
 800507c:	080248c0 	.word	0x080248c0
 8005080:	08024c5c 	.word	0x08024c5c
 8005084:	08023bbc 	.word	0x08023bbc
 8005088:	08024c68 	.word	0x08024c68
 800508c:	08024c78 	.word	0x08024c78
 8005090:	08024c8c 	.word	0x08024c8c
 8005094:	08024c9c 	.word	0x08024c9c
 8005098:	08024ca8 	.word	0x08024ca8
 800509c:	08024cb8 	.word	0x08024cb8
 80050a0:	08023b9c 	.word	0x08023b9c
 80050a4:	08024ccc 	.word	0x08024ccc
 80050a8:	08024cd4 	.word	0x08024cd4
 80050ac:	08024ce4 	.word	0x08024ce4
 80050b0:	08024cf8 	.word	0x08024cf8
 80050b4:	08024d08 	.word	0x08024d08
 80050b8:	08024d14 	.word	0x08024d14
 80050bc:	08024d28 	.word	0x08024d28
 80050c0:	080243cc 	.word	0x080243cc
		case 88 :
			strcpy(p->name,"JA ICH BIN NOCH");
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80050ca:	4aaa      	ldr	r2, [pc, #680]	; (8005374 <problem_fetch+0x3d10>)
 80050cc:	461c      	mov	r4, r3
 80050ce:	4615      	mov	r5, r2
 80050d0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80050d2:	6020      	str	r0, [r4, #0]
 80050d4:	6061      	str	r1, [r4, #4]
 80050d6:	60a2      	str	r2, [r4, #8]
 80050d8:	60e3      	str	r3, [r4, #12]
			strcpy(p->grade,"6B+");
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80050e0:	4aa5      	ldr	r2, [pc, #660]	; (8005378 <problem_fetch+0x3d14>)
 80050e2:	6810      	ldr	r0, [r2, #0]
 80050e4:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	2207      	movs	r2, #7
 80050ea:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"H,E,G,E,E,E,I");
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	33a4      	adds	r3, #164	; 0xa4
 80050f0:	4aa2      	ldr	r2, [pc, #648]	; (800537c <problem_fetch+0x3d18>)
 80050f2:	461c      	mov	r4, r3
 80050f4:	4613      	mov	r3, r2
 80050f6:	cb07      	ldmia	r3!, {r0, r1, r2}
 80050f8:	6020      	str	r0, [r4, #0]
 80050fa:	6061      	str	r1, [r4, #4]
 80050fc:	60a2      	str	r2, [r4, #8]
 80050fe:	881b      	ldrh	r3, [r3, #0]
 8005100:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,6,9,12,14,16,18");
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	3304      	adds	r3, #4
 8005106:	4a9e      	ldr	r2, [pc, #632]	; (8005380 <problem_fetch+0x3d1c>)
 8005108:	461d      	mov	r5, r3
 800510a:	4614      	mov	r4, r2
 800510c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800510e:	6028      	str	r0, [r5, #0]
 8005110:	6069      	str	r1, [r5, #4]
 8005112:	60aa      	str	r2, [r5, #8]
 8005114:	60eb      	str	r3, [r5, #12]
 8005116:	8823      	ldrh	r3, [r4, #0]
 8005118:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,s,d,d,d,d,e");
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8005120:	4a98      	ldr	r2, [pc, #608]	; (8005384 <problem_fetch+0x3d20>)
 8005122:	461c      	mov	r4, r3
 8005124:	4613      	mov	r3, r2
 8005126:	cb07      	ldmia	r3!, {r0, r1, r2}
 8005128:	6020      	str	r0, [r4, #0]
 800512a:	6061      	str	r1, [r4, #4]
 800512c:	60a2      	str	r2, [r4, #8]
 800512e:	881b      	ldrh	r3, [r3, #0]
 8005130:	81a3      	strh	r3, [r4, #12]
			break;
 8005132:	f017 b9c7 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 89 :
			strcpy(p->name,"GORILA");
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800513c:	4a92      	ldr	r2, [pc, #584]	; (8005388 <problem_fetch+0x3d24>)
 800513e:	6810      	ldr	r0, [r2, #0]
 8005140:	6018      	str	r0, [r3, #0]
 8005142:	8891      	ldrh	r1, [r2, #4]
 8005144:	7992      	ldrb	r2, [r2, #6]
 8005146:	8099      	strh	r1, [r3, #4]
 8005148:	719a      	strb	r2, [r3, #6]
			strcpy(p->grade,"7B");
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8005150:	4a8e      	ldr	r2, [pc, #568]	; (800538c <problem_fetch+0x3d28>)
 8005152:	8811      	ldrh	r1, [r2, #0]
 8005154:	7892      	ldrb	r2, [r2, #2]
 8005156:	8019      	strh	r1, [r3, #0]
 8005158:	709a      	strb	r2, [r3, #2]
			p->moveSize = 7;
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	2207      	movs	r2, #7
 800515e:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,J,G,F,C,E,D");
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	33a4      	adds	r3, #164	; 0xa4
 8005164:	4a8a      	ldr	r2, [pc, #552]	; (8005390 <problem_fetch+0x3d2c>)
 8005166:	461c      	mov	r4, r3
 8005168:	4613      	mov	r3, r2
 800516a:	cb07      	ldmia	r3!, {r0, r1, r2}
 800516c:	6020      	str	r0, [r4, #0]
 800516e:	6061      	str	r1, [r4, #4]
 8005170:	60a2      	str	r2, [r4, #8]
 8005172:	881b      	ldrh	r3, [r3, #0]
 8005174:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,7,10,11,13,14,18");
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	3304      	adds	r3, #4
 800517a:	4a86      	ldr	r2, [pc, #536]	; (8005394 <problem_fetch+0x3d30>)
 800517c:	461d      	mov	r5, r3
 800517e:	4614      	mov	r4, r2
 8005180:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005182:	6028      	str	r0, [r5, #0]
 8005184:	6069      	str	r1, [r5, #4]
 8005186:	60aa      	str	r2, [r5, #8]
 8005188:	60eb      	str	r3, [r5, #12]
 800518a:	8823      	ldrh	r3, [r4, #0]
 800518c:	78a2      	ldrb	r2, [r4, #2]
 800518e:	822b      	strh	r3, [r5, #16]
 8005190:	4613      	mov	r3, r2
 8005192:	74ab      	strb	r3, [r5, #18]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800519a:	4a7f      	ldr	r2, [pc, #508]	; (8005398 <problem_fetch+0x3d34>)
 800519c:	461c      	mov	r4, r3
 800519e:	4613      	mov	r3, r2
 80051a0:	cb07      	ldmia	r3!, {r0, r1, r2}
 80051a2:	6020      	str	r0, [r4, #0]
 80051a4:	6061      	str	r1, [r4, #4]
 80051a6:	60a2      	str	r2, [r4, #8]
 80051a8:	881b      	ldrh	r3, [r3, #0]
 80051aa:	81a3      	strh	r3, [r4, #12]
			break;
 80051ac:	f017 b98a 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 90 :
			strcpy(p->name,"URBAN WALL");
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80051b6:	4979      	ldr	r1, [pc, #484]	; (800539c <problem_fetch+0x3d38>)
 80051b8:	461a      	mov	r2, r3
 80051ba:	460b      	mov	r3, r1
 80051bc:	cb03      	ldmia	r3!, {r0, r1}
 80051be:	6010      	str	r0, [r2, #0]
 80051c0:	6051      	str	r1, [r2, #4]
 80051c2:	8819      	ldrh	r1, [r3, #0]
 80051c4:	789b      	ldrb	r3, [r3, #2]
 80051c6:	8111      	strh	r1, [r2, #8]
 80051c8:	7293      	strb	r3, [r2, #10]
			strcpy(p->grade,"6C");
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80051d0:	4a73      	ldr	r2, [pc, #460]	; (80053a0 <problem_fetch+0x3d3c>)
 80051d2:	8811      	ldrh	r1, [r2, #0]
 80051d4:	7892      	ldrb	r2, [r2, #2]
 80051d6:	8019      	strh	r1, [r3, #0]
 80051d8:	709a      	strb	r2, [r3, #2]
			p->moveSize = 6;
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	2206      	movs	r2, #6
 80051de:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,J,E,F,A,D");
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	33a4      	adds	r3, #164	; 0xa4
 80051e4:	4a6f      	ldr	r2, [pc, #444]	; (80053a4 <problem_fetch+0x3d40>)
 80051e6:	461c      	mov	r4, r3
 80051e8:	4613      	mov	r3, r2
 80051ea:	cb07      	ldmia	r3!, {r0, r1, r2}
 80051ec:	6020      	str	r0, [r4, #0]
 80051ee:	6061      	str	r1, [r4, #4]
 80051f0:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,5,8,11,14,18");
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	3304      	adds	r3, #4
 80051f6:	4a6c      	ldr	r2, [pc, #432]	; (80053a8 <problem_fetch+0x3d44>)
 80051f8:	461c      	mov	r4, r3
 80051fa:	4613      	mov	r3, r2
 80051fc:	cb07      	ldmia	r3!, {r0, r1, r2}
 80051fe:	6020      	str	r0, [r4, #0]
 8005200:	6061      	str	r1, [r4, #4]
 8005202:	60a2      	str	r2, [r4, #8]
 8005204:	881a      	ldrh	r2, [r3, #0]
 8005206:	789b      	ldrb	r3, [r3, #2]
 8005208:	81a2      	strh	r2, [r4, #12]
 800520a:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish,"s,s,d,d,d,e");
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8005212:	4a66      	ldr	r2, [pc, #408]	; (80053ac <problem_fetch+0x3d48>)
 8005214:	461c      	mov	r4, r3
 8005216:	4613      	mov	r3, r2
 8005218:	cb07      	ldmia	r3!, {r0, r1, r2}
 800521a:	6020      	str	r0, [r4, #0]
 800521c:	6061      	str	r1, [r4, #4]
 800521e:	60a2      	str	r2, [r4, #8]
			break;
 8005220:	f017 b950 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 91 :
			strcpy(p->name,"BLACKER");
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800522a:	4961      	ldr	r1, [pc, #388]	; (80053b0 <problem_fetch+0x3d4c>)
 800522c:	461a      	mov	r2, r3
 800522e:	460b      	mov	r3, r1
 8005230:	cb03      	ldmia	r3!, {r0, r1}
 8005232:	6010      	str	r0, [r2, #0]
 8005234:	6051      	str	r1, [r2, #4]
			strcpy(p->grade,"7A");
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800523c:	4a5d      	ldr	r2, [pc, #372]	; (80053b4 <problem_fetch+0x3d50>)
 800523e:	8811      	ldrh	r1, [r2, #0]
 8005240:	7892      	ldrb	r2, [r2, #2]
 8005242:	8019      	strh	r1, [r3, #0]
 8005244:	709a      	strb	r2, [r3, #2]
			p->moveSize = 6;
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	2206      	movs	r2, #6
 800524a:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"H,G,H,C,H,D");
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	33a4      	adds	r3, #164	; 0xa4
 8005250:	4a59      	ldr	r2, [pc, #356]	; (80053b8 <problem_fetch+0x3d54>)
 8005252:	461c      	mov	r4, r3
 8005254:	4613      	mov	r3, r2
 8005256:	cb07      	ldmia	r3!, {r0, r1, r2}
 8005258:	6020      	str	r0, [r4, #0]
 800525a:	6061      	str	r1, [r4, #4]
 800525c:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,4,10,13,16,18");
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	3304      	adds	r3, #4
 8005262:	4a56      	ldr	r2, [pc, #344]	; (80053bc <problem_fetch+0x3d58>)
 8005264:	461c      	mov	r4, r3
 8005266:	4615      	mov	r5, r2
 8005268:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800526a:	6020      	str	r0, [r4, #0]
 800526c:	6061      	str	r1, [r4, #4]
 800526e:	60a2      	str	r2, [r4, #8]
 8005270:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,s,d,d,d,e");
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8005278:	4a4c      	ldr	r2, [pc, #304]	; (80053ac <problem_fetch+0x3d48>)
 800527a:	461c      	mov	r4, r3
 800527c:	4613      	mov	r3, r2
 800527e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8005280:	6020      	str	r0, [r4, #0]
 8005282:	6061      	str	r1, [r4, #4]
 8005284:	60a2      	str	r2, [r4, #8]
			break;
 8005286:	f017 b91d 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 92 :
			strcpy(p->name,"DURANGO TANGO");
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8005290:	4a4b      	ldr	r2, [pc, #300]	; (80053c0 <problem_fetch+0x3d5c>)
 8005292:	461c      	mov	r4, r3
 8005294:	4613      	mov	r3, r2
 8005296:	cb07      	ldmia	r3!, {r0, r1, r2}
 8005298:	6020      	str	r0, [r4, #0]
 800529a:	6061      	str	r1, [r4, #4]
 800529c:	60a2      	str	r2, [r4, #8]
 800529e:	881b      	ldrh	r3, [r3, #0]
 80052a0:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade,"6C+");
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80052a8:	4a46      	ldr	r2, [pc, #280]	; (80053c4 <problem_fetch+0x3d60>)
 80052aa:	6810      	ldr	r0, [r2, #0]
 80052ac:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	2207      	movs	r2, #7
 80052b2:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,H,E,E,G,H,I");
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	33a4      	adds	r3, #164	; 0xa4
 80052b8:	4a43      	ldr	r2, [pc, #268]	; (80053c8 <problem_fetch+0x3d64>)
 80052ba:	461c      	mov	r4, r3
 80052bc:	4613      	mov	r3, r2
 80052be:	cb07      	ldmia	r3!, {r0, r1, r2}
 80052c0:	6020      	str	r0, [r4, #0]
 80052c2:	6061      	str	r1, [r4, #4]
 80052c4:	60a2      	str	r2, [r4, #8]
 80052c6:	881b      	ldrh	r3, [r3, #0]
 80052c8:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,10,12,9,15,16,18");
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	3304      	adds	r3, #4
 80052ce:	4a3f      	ldr	r2, [pc, #252]	; (80053cc <problem_fetch+0x3d68>)
 80052d0:	461d      	mov	r5, r3
 80052d2:	4614      	mov	r4, r2
 80052d4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80052d6:	6028      	str	r0, [r5, #0]
 80052d8:	6069      	str	r1, [r5, #4]
 80052da:	60aa      	str	r2, [r5, #8]
 80052dc:	60eb      	str	r3, [r5, #12]
 80052de:	8823      	ldrh	r3, [r4, #0]
 80052e0:	78a2      	ldrb	r2, [r4, #2]
 80052e2:	822b      	strh	r3, [r5, #16]
 80052e4:	4613      	mov	r3, r2
 80052e6:	74ab      	strb	r3, [r5, #18]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 80052ee:	4a2a      	ldr	r2, [pc, #168]	; (8005398 <problem_fetch+0x3d34>)
 80052f0:	461c      	mov	r4, r3
 80052f2:	4613      	mov	r3, r2
 80052f4:	cb07      	ldmia	r3!, {r0, r1, r2}
 80052f6:	6020      	str	r0, [r4, #0]
 80052f8:	6061      	str	r1, [r4, #4]
 80052fa:	60a2      	str	r2, [r4, #8]
 80052fc:	881b      	ldrh	r3, [r3, #0]
 80052fe:	81a3      	strh	r3, [r4, #12]
			break;
 8005300:	f017 b8e0 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 93 :
			strcpy(p->name,"DARK MAGIC");
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800530a:	4931      	ldr	r1, [pc, #196]	; (80053d0 <problem_fetch+0x3d6c>)
 800530c:	461a      	mov	r2, r3
 800530e:	460b      	mov	r3, r1
 8005310:	cb03      	ldmia	r3!, {r0, r1}
 8005312:	6010      	str	r0, [r2, #0]
 8005314:	6051      	str	r1, [r2, #4]
 8005316:	8819      	ldrh	r1, [r3, #0]
 8005318:	789b      	ldrb	r3, [r3, #2]
 800531a:	8111      	strh	r1, [r2, #8]
 800531c:	7293      	strb	r3, [r2, #10]
			strcpy(p->grade,"7B+");
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8005324:	4a2b      	ldr	r2, [pc, #172]	; (80053d4 <problem_fetch+0x3d70>)
 8005326:	6810      	ldr	r0, [r2, #0]
 8005328:	6018      	str	r0, [r3, #0]
			p->moveSize = 5;
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	2205      	movs	r2, #5
 800532e:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"C,C,G,E,I");
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	33a4      	adds	r3, #164	; 0xa4
 8005334:	4928      	ldr	r1, [pc, #160]	; (80053d8 <problem_fetch+0x3d74>)
 8005336:	461a      	mov	r2, r3
 8005338:	460b      	mov	r3, r1
 800533a:	cb03      	ldmia	r3!, {r0, r1}
 800533c:	6010      	str	r0, [r2, #0]
 800533e:	6051      	str	r1, [r2, #4]
 8005340:	881b      	ldrh	r3, [r3, #0]
 8005342:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"5,8,10,14,18");
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	3304      	adds	r3, #4
 8005348:	4a24      	ldr	r2, [pc, #144]	; (80053dc <problem_fetch+0x3d78>)
 800534a:	461c      	mov	r4, r3
 800534c:	4613      	mov	r3, r2
 800534e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8005350:	6020      	str	r0, [r4, #0]
 8005352:	6061      	str	r1, [r4, #4]
 8005354:	60a2      	str	r2, [r4, #8]
 8005356:	781b      	ldrb	r3, [r3, #0]
 8005358:	7323      	strb	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,e");
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8005360:	491f      	ldr	r1, [pc, #124]	; (80053e0 <problem_fetch+0x3d7c>)
 8005362:	461a      	mov	r2, r3
 8005364:	460b      	mov	r3, r1
 8005366:	cb03      	ldmia	r3!, {r0, r1}
 8005368:	6010      	str	r0, [r2, #0]
 800536a:	6051      	str	r1, [r2, #4]
 800536c:	881b      	ldrh	r3, [r3, #0]
 800536e:	8113      	strh	r3, [r2, #8]
			break;
 8005370:	f017 b8a8 	b.w	801c4c4 <problem_fetch+0x1ae60>
 8005374:	08024d44 	.word	0x08024d44
 8005378:	08023b24 	.word	0x08023b24
 800537c:	08024d54 	.word	0x08024d54
 8005380:	08024d64 	.word	0x08024d64
 8005384:	08023b9c 	.word	0x08023b9c
 8005388:	08024d78 	.word	0x08024d78
 800538c:	0802421c 	.word	0x0802421c
 8005390:	08024d80 	.word	0x08024d80
 8005394:	08024d90 	.word	0x08024d90
 8005398:	08023cac 	.word	0x08023cac
 800539c:	08024da4 	.word	0x08024da4
 80053a0:	08023bf0 	.word	0x08023bf0
 80053a4:	08024db0 	.word	0x08024db0
 80053a8:	08023bcc 	.word	0x08023bcc
 80053ac:	08023b04 	.word	0x08023b04
 80053b0:	08024dbc 	.word	0x08024dbc
 80053b4:	08023ae4 	.word	0x08023ae4
 80053b8:	08024dc4 	.word	0x08024dc4
 80053bc:	08024dd0 	.word	0x08024dd0
 80053c0:	08024de0 	.word	0x08024de0
 80053c4:	08023bbc 	.word	0x08023bbc
 80053c8:	08024df0 	.word	0x08024df0
 80053cc:	08024e00 	.word	0x08024e00
 80053d0:	08024e14 	.word	0x08024e14
 80053d4:	08023c60 	.word	0x08023c60
 80053d8:	08024e20 	.word	0x08024e20
 80053dc:	08024e2c 	.word	0x08024e2c
 80053e0:	08023ff0 	.word	0x08023ff0
		case 94 :
			strcpy(p->name,"LITTLE DIDDY");
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80053ea:	4ab0      	ldr	r2, [pc, #704]	; (80056ac <problem_fetch+0x4048>)
 80053ec:	461c      	mov	r4, r3
 80053ee:	4613      	mov	r3, r2
 80053f0:	cb07      	ldmia	r3!, {r0, r1, r2}
 80053f2:	6020      	str	r0, [r4, #0]
 80053f4:	6061      	str	r1, [r4, #4]
 80053f6:	60a2      	str	r2, [r4, #8]
 80053f8:	781b      	ldrb	r3, [r3, #0]
 80053fa:	7323      	strb	r3, [r4, #12]
			strcpy(p->grade,"7B+");
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8005402:	4aab      	ldr	r2, [pc, #684]	; (80056b0 <problem_fetch+0x404c>)
 8005404:	6810      	ldr	r0, [r2, #0]
 8005406:	6018      	str	r0, [r3, #0]
			p->moveSize = 10;
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	220a      	movs	r2, #10
 800540c:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"C,D,A,D,B,F,J,K,J,I");
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	33a4      	adds	r3, #164	; 0xa4
 8005412:	4aa8      	ldr	r2, [pc, #672]	; (80056b4 <problem_fetch+0x4050>)
 8005414:	461d      	mov	r5, r3
 8005416:	4614      	mov	r4, r2
 8005418:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800541a:	6028      	str	r0, [r5, #0]
 800541c:	6069      	str	r1, [r5, #4]
 800541e:	60aa      	str	r2, [r5, #8]
 8005420:	60eb      	str	r3, [r5, #12]
 8005422:	6820      	ldr	r0, [r4, #0]
 8005424:	6128      	str	r0, [r5, #16]
			strcpy(p->moveNumbers,"5,7,9,11,12,13,12,9,16,18");
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	3304      	adds	r3, #4
 800542a:	4aa3      	ldr	r2, [pc, #652]	; (80056b8 <problem_fetch+0x4054>)
 800542c:	461d      	mov	r5, r3
 800542e:	4614      	mov	r4, r2
 8005430:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005432:	6028      	str	r0, [r5, #0]
 8005434:	6069      	str	r1, [r5, #4]
 8005436:	60aa      	str	r2, [r5, #8]
 8005438:	60eb      	str	r3, [r5, #12]
 800543a:	cc03      	ldmia	r4!, {r0, r1}
 800543c:	6128      	str	r0, [r5, #16]
 800543e:	6169      	str	r1, [r5, #20]
 8005440:	8823      	ldrh	r3, [r4, #0]
 8005442:	832b      	strh	r3, [r5, #24]
			strcpy(p->startFinish,"s,d,d,d,d,d,d,d,d,e");
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800544a:	4a9c      	ldr	r2, [pc, #624]	; (80056bc <problem_fetch+0x4058>)
 800544c:	461d      	mov	r5, r3
 800544e:	4614      	mov	r4, r2
 8005450:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005452:	6028      	str	r0, [r5, #0]
 8005454:	6069      	str	r1, [r5, #4]
 8005456:	60aa      	str	r2, [r5, #8]
 8005458:	60eb      	str	r3, [r5, #12]
 800545a:	6820      	ldr	r0, [r4, #0]
 800545c:	6128      	str	r0, [r5, #16]
			break;
 800545e:	f017 b831 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 95 :
			strcpy(p->name,"MOMOGO");
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8005468:	4a95      	ldr	r2, [pc, #596]	; (80056c0 <problem_fetch+0x405c>)
 800546a:	6810      	ldr	r0, [r2, #0]
 800546c:	6018      	str	r0, [r3, #0]
 800546e:	8891      	ldrh	r1, [r2, #4]
 8005470:	7992      	ldrb	r2, [r2, #6]
 8005472:	8099      	strh	r1, [r3, #4]
 8005474:	719a      	strb	r2, [r3, #6]
			strcpy(p->grade,"6B+");
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800547c:	4a91      	ldr	r2, [pc, #580]	; (80056c4 <problem_fetch+0x4060>)
 800547e:	6810      	ldr	r0, [r2, #0]
 8005480:	6018      	str	r0, [r3, #0]
			p->moveSize = 9;
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	2209      	movs	r2, #9
 8005486:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,H,K,I,J,F,I,H,I");
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	33a4      	adds	r3, #164	; 0xa4
 800548c:	4a8e      	ldr	r2, [pc, #568]	; (80056c8 <problem_fetch+0x4064>)
 800548e:	461d      	mov	r5, r3
 8005490:	4614      	mov	r4, r2
 8005492:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005494:	6028      	str	r0, [r5, #0]
 8005496:	6069      	str	r1, [r5, #4]
 8005498:	60aa      	str	r2, [r5, #8]
 800549a:	60eb      	str	r3, [r5, #12]
 800549c:	8823      	ldrh	r3, [r4, #0]
 800549e:	822b      	strh	r3, [r5, #16]
			strcpy(p->moveNumbers,"5,5,9,10,12,13,14,16,18");
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	3304      	adds	r3, #4
 80054a4:	4a89      	ldr	r2, [pc, #548]	; (80056cc <problem_fetch+0x4068>)
 80054a6:	461d      	mov	r5, r3
 80054a8:	4614      	mov	r4, r2
 80054aa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80054ac:	6028      	str	r0, [r5, #0]
 80054ae:	6069      	str	r1, [r5, #4]
 80054b0:	60aa      	str	r2, [r5, #8]
 80054b2:	60eb      	str	r3, [r5, #12]
 80054b4:	cc03      	ldmia	r4!, {r0, r1}
 80054b6:	6128      	str	r0, [r5, #16]
 80054b8:	6169      	str	r1, [r5, #20]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,d,e");
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 80054c0:	4a83      	ldr	r2, [pc, #524]	; (80056d0 <problem_fetch+0x406c>)
 80054c2:	461d      	mov	r5, r3
 80054c4:	4614      	mov	r4, r2
 80054c6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80054c8:	6028      	str	r0, [r5, #0]
 80054ca:	6069      	str	r1, [r5, #4]
 80054cc:	60aa      	str	r2, [r5, #8]
 80054ce:	60eb      	str	r3, [r5, #12]
 80054d0:	8823      	ldrh	r3, [r4, #0]
 80054d2:	822b      	strh	r3, [r5, #16]
			break;
 80054d4:	f016 bff6 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 96 :
			strcpy(p->name,"COW FUNK");
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80054de:	497d      	ldr	r1, [pc, #500]	; (80056d4 <problem_fetch+0x4070>)
 80054e0:	461a      	mov	r2, r3
 80054e2:	460b      	mov	r3, r1
 80054e4:	cb03      	ldmia	r3!, {r0, r1}
 80054e6:	6010      	str	r0, [r2, #0]
 80054e8:	6051      	str	r1, [r2, #4]
 80054ea:	781b      	ldrb	r3, [r3, #0]
 80054ec:	7213      	strb	r3, [r2, #8]
			strcpy(p->grade,"6B+");
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80054f4:	4a73      	ldr	r2, [pc, #460]	; (80056c4 <problem_fetch+0x4060>)
 80054f6:	6810      	ldr	r0, [r2, #0]
 80054f8:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	2207      	movs	r2, #7
 80054fe:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,E,E,A,E,A,D");
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	33a4      	adds	r3, #164	; 0xa4
 8005504:	4a74      	ldr	r2, [pc, #464]	; (80056d8 <problem_fetch+0x4074>)
 8005506:	461c      	mov	r4, r3
 8005508:	4613      	mov	r3, r2
 800550a:	cb07      	ldmia	r3!, {r0, r1, r2}
 800550c:	6020      	str	r0, [r4, #0]
 800550e:	6061      	str	r1, [r4, #4]
 8005510:	60a2      	str	r2, [r4, #8]
 8005512:	881b      	ldrh	r3, [r3, #0]
 8005514:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,6,8,9,12,14,18");
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	3304      	adds	r3, #4
 800551a:	4a70      	ldr	r2, [pc, #448]	; (80056dc <problem_fetch+0x4078>)
 800551c:	461d      	mov	r5, r3
 800551e:	4614      	mov	r4, r2
 8005520:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005522:	6028      	str	r0, [r5, #0]
 8005524:	6069      	str	r1, [r5, #4]
 8005526:	60aa      	str	r2, [r5, #8]
 8005528:	60eb      	str	r3, [r5, #12]
 800552a:	7823      	ldrb	r3, [r4, #0]
 800552c:	742b      	strb	r3, [r5, #16]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8005534:	4a6a      	ldr	r2, [pc, #424]	; (80056e0 <problem_fetch+0x407c>)
 8005536:	461c      	mov	r4, r3
 8005538:	4613      	mov	r3, r2
 800553a:	cb07      	ldmia	r3!, {r0, r1, r2}
 800553c:	6020      	str	r0, [r4, #0]
 800553e:	6061      	str	r1, [r4, #4]
 8005540:	60a2      	str	r2, [r4, #8]
 8005542:	881b      	ldrh	r3, [r3, #0]
 8005544:	81a3      	strh	r3, [r4, #12]
			break;
 8005546:	f016 bfbd 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 97 :
			strcpy(p->name,"CERBERO");
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8005550:	4964      	ldr	r1, [pc, #400]	; (80056e4 <problem_fetch+0x4080>)
 8005552:	461a      	mov	r2, r3
 8005554:	460b      	mov	r3, r1
 8005556:	cb03      	ldmia	r3!, {r0, r1}
 8005558:	6010      	str	r0, [r2, #0]
 800555a:	6051      	str	r1, [r2, #4]
			strcpy(p->grade,"7A");
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8005562:	4a61      	ldr	r2, [pc, #388]	; (80056e8 <problem_fetch+0x4084>)
 8005564:	8811      	ldrh	r1, [r2, #0]
 8005566:	7892      	ldrb	r2, [r2, #2]
 8005568:	8019      	strh	r1, [r3, #0]
 800556a:	709a      	strb	r2, [r3, #2]
			p->moveSize = 5;
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	2205      	movs	r2, #5
 8005570:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,I,H,K,I");
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	33a4      	adds	r3, #164	; 0xa4
 8005576:	495d      	ldr	r1, [pc, #372]	; (80056ec <problem_fetch+0x4088>)
 8005578:	461a      	mov	r2, r3
 800557a:	460b      	mov	r3, r1
 800557c:	cb03      	ldmia	r3!, {r0, r1}
 800557e:	6010      	str	r0, [r2, #0]
 8005580:	6051      	str	r1, [r2, #4]
 8005582:	881b      	ldrh	r3, [r3, #0]
 8005584:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"4,10,12,14,18");
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	3304      	adds	r3, #4
 800558a:	4a59      	ldr	r2, [pc, #356]	; (80056f0 <problem_fetch+0x408c>)
 800558c:	461c      	mov	r4, r3
 800558e:	4613      	mov	r3, r2
 8005590:	cb07      	ldmia	r3!, {r0, r1, r2}
 8005592:	6020      	str	r0, [r4, #0]
 8005594:	6061      	str	r1, [r4, #4]
 8005596:	60a2      	str	r2, [r4, #8]
 8005598:	881b      	ldrh	r3, [r3, #0]
 800559a:	81a3      	strh	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,e");
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 80055a2:	4954      	ldr	r1, [pc, #336]	; (80056f4 <problem_fetch+0x4090>)
 80055a4:	461a      	mov	r2, r3
 80055a6:	460b      	mov	r3, r1
 80055a8:	cb03      	ldmia	r3!, {r0, r1}
 80055aa:	6010      	str	r0, [r2, #0]
 80055ac:	6051      	str	r1, [r2, #4]
 80055ae:	881b      	ldrh	r3, [r3, #0]
 80055b0:	8113      	strh	r3, [r2, #8]
			break;
 80055b2:	f016 bf87 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 98 :
			strcpy(p->name,"ZONED IN (H10 FOOT ONLY)");
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80055bc:	4a4e      	ldr	r2, [pc, #312]	; (80056f8 <problem_fetch+0x4094>)
 80055be:	461d      	mov	r5, r3
 80055c0:	4614      	mov	r4, r2
 80055c2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80055c4:	6028      	str	r0, [r5, #0]
 80055c6:	6069      	str	r1, [r5, #4]
 80055c8:	60aa      	str	r2, [r5, #8]
 80055ca:	60eb      	str	r3, [r5, #12]
 80055cc:	cc03      	ldmia	r4!, {r0, r1}
 80055ce:	6128      	str	r0, [r5, #16]
 80055d0:	6169      	str	r1, [r5, #20]
 80055d2:	7823      	ldrb	r3, [r4, #0]
 80055d4:	762b      	strb	r3, [r5, #24]
			strcpy(p->grade,"6B+");
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80055dc:	4a39      	ldr	r2, [pc, #228]	; (80056c4 <problem_fetch+0x4060>)
 80055de:	6810      	ldr	r0, [r2, #0]
 80055e0:	6018      	str	r0, [r3, #0]
			p->moveSize = 9;
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	2209      	movs	r2, #9
 80055e6:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,E,H,H,C,F,C,E,D");
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	33a4      	adds	r3, #164	; 0xa4
 80055ec:	4a43      	ldr	r2, [pc, #268]	; (80056fc <problem_fetch+0x4098>)
 80055ee:	461d      	mov	r5, r3
 80055f0:	4614      	mov	r4, r2
 80055f2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80055f4:	6028      	str	r0, [r5, #0]
 80055f6:	6069      	str	r1, [r5, #4]
 80055f8:	60aa      	str	r2, [r5, #8]
 80055fa:	60eb      	str	r3, [r5, #12]
 80055fc:	8823      	ldrh	r3, [r4, #0]
 80055fe:	822b      	strh	r3, [r5, #16]
			strcpy(p->moveNumbers,"4,6,8,10,8,11,13,16,18");
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	3304      	adds	r3, #4
 8005604:	4a3e      	ldr	r2, [pc, #248]	; (8005700 <problem_fetch+0x409c>)
 8005606:	461c      	mov	r4, r3
 8005608:	4615      	mov	r5, r2
 800560a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800560c:	6020      	str	r0, [r4, #0]
 800560e:	6061      	str	r1, [r4, #4]
 8005610:	60a2      	str	r2, [r4, #8]
 8005612:	60e3      	str	r3, [r4, #12]
 8005614:	6828      	ldr	r0, [r5, #0]
 8005616:	6120      	str	r0, [r4, #16]
 8005618:	88ab      	ldrh	r3, [r5, #4]
 800561a:	79aa      	ldrb	r2, [r5, #6]
 800561c:	82a3      	strh	r3, [r4, #20]
 800561e:	4613      	mov	r3, r2
 8005620:	75a3      	strb	r3, [r4, #22]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,d,e");
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8005628:	4a29      	ldr	r2, [pc, #164]	; (80056d0 <problem_fetch+0x406c>)
 800562a:	461d      	mov	r5, r3
 800562c:	4614      	mov	r4, r2
 800562e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005630:	6028      	str	r0, [r5, #0]
 8005632:	6069      	str	r1, [r5, #4]
 8005634:	60aa      	str	r2, [r5, #8]
 8005636:	60eb      	str	r3, [r5, #12]
 8005638:	8823      	ldrh	r3, [r4, #0]
 800563a:	822b      	strh	r3, [r5, #16]
			break;
 800563c:	f016 bf42 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 99 :
			strcpy(p->name,"FLAPJACKS");
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8005646:	492f      	ldr	r1, [pc, #188]	; (8005704 <problem_fetch+0x40a0>)
 8005648:	461a      	mov	r2, r3
 800564a:	460b      	mov	r3, r1
 800564c:	cb03      	ldmia	r3!, {r0, r1}
 800564e:	6010      	str	r0, [r2, #0]
 8005650:	6051      	str	r1, [r2, #4]
 8005652:	881b      	ldrh	r3, [r3, #0]
 8005654:	8113      	strh	r3, [r2, #8]
			strcpy(p->grade,"6B+");
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800565c:	4a19      	ldr	r2, [pc, #100]	; (80056c4 <problem_fetch+0x4060>)
 800565e:	6810      	ldr	r0, [r2, #0]
 8005660:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	2206      	movs	r2, #6
 8005666:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,E,H,D,E,A");
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	33a4      	adds	r3, #164	; 0xa4
 800566c:	4a26      	ldr	r2, [pc, #152]	; (8005708 <problem_fetch+0x40a4>)
 800566e:	461c      	mov	r4, r3
 8005670:	4613      	mov	r3, r2
 8005672:	cb07      	ldmia	r3!, {r0, r1, r2}
 8005674:	6020      	str	r0, [r4, #0]
 8005676:	6061      	str	r1, [r4, #4]
 8005678:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,6,8,11,14,18");
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	3304      	adds	r3, #4
 800567e:	4a23      	ldr	r2, [pc, #140]	; (800570c <problem_fetch+0x40a8>)
 8005680:	461c      	mov	r4, r3
 8005682:	4613      	mov	r3, r2
 8005684:	cb07      	ldmia	r3!, {r0, r1, r2}
 8005686:	6020      	str	r0, [r4, #0]
 8005688:	6061      	str	r1, [r4, #4]
 800568a:	60a2      	str	r2, [r4, #8]
 800568c:	881a      	ldrh	r2, [r3, #0]
 800568e:	789b      	ldrb	r3, [r3, #2]
 8005690:	81a2      	strh	r2, [r4, #12]
 8005692:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish,"s,s,d,d,d,e");
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800569a:	4a1d      	ldr	r2, [pc, #116]	; (8005710 <problem_fetch+0x40ac>)
 800569c:	461c      	mov	r4, r3
 800569e:	4613      	mov	r3, r2
 80056a0:	cb07      	ldmia	r3!, {r0, r1, r2}
 80056a2:	6020      	str	r0, [r4, #0]
 80056a4:	6061      	str	r1, [r4, #4]
 80056a6:	60a2      	str	r2, [r4, #8]
			break;
 80056a8:	f016 bf0c 	b.w	801c4c4 <problem_fetch+0x1ae60>
 80056ac:	08024e3c 	.word	0x08024e3c
 80056b0:	08023c60 	.word	0x08023c60
 80056b4:	08024e4c 	.word	0x08024e4c
 80056b8:	08024e60 	.word	0x08024e60
 80056bc:	08024e7c 	.word	0x08024e7c
 80056c0:	08024e90 	.word	0x08024e90
 80056c4:	08023b24 	.word	0x08023b24
 80056c8:	08024e98 	.word	0x08024e98
 80056cc:	08024eac 	.word	0x08024eac
 80056d0:	08024b08 	.word	0x08024b08
 80056d4:	08024ec4 	.word	0x08024ec4
 80056d8:	08024ed0 	.word	0x08024ed0
 80056dc:	08024ee0 	.word	0x08024ee0
 80056e0:	08023cac 	.word	0x08023cac
 80056e4:	08024ef4 	.word	0x08024ef4
 80056e8:	08023ae4 	.word	0x08023ae4
 80056ec:	08024efc 	.word	0x08024efc
 80056f0:	08024f08 	.word	0x08024f08
 80056f4:	08023ff0 	.word	0x08023ff0
 80056f8:	08024f18 	.word	0x08024f18
 80056fc:	08024f34 	.word	0x08024f34
 8005700:	08024f48 	.word	0x08024f48
 8005704:	08024f60 	.word	0x08024f60
 8005708:	08024f6c 	.word	0x08024f6c
 800570c:	08024f78 	.word	0x08024f78
 8005710:	08023b04 	.word	0x08023b04
		case 100 :
			strcpy(p->name,"TESTJ");
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800571a:	4abd      	ldr	r2, [pc, #756]	; (8005a10 <problem_fetch+0x43ac>)
 800571c:	6810      	ldr	r0, [r2, #0]
 800571e:	6018      	str	r0, [r3, #0]
 8005720:	8892      	ldrh	r2, [r2, #4]
 8005722:	809a      	strh	r2, [r3, #4]
			strcpy(p->grade,"6B+");
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800572a:	4aba      	ldr	r2, [pc, #744]	; (8005a14 <problem_fetch+0x43b0>)
 800572c:	6810      	ldr	r0, [r2, #0]
 800572e:	6018      	str	r0, [r3, #0]
			p->moveSize = 9;
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	2209      	movs	r2, #9
 8005734:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,J,H,F,H,E,G,D,A");
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	33a4      	adds	r3, #164	; 0xa4
 800573a:	4ab7      	ldr	r2, [pc, #732]	; (8005a18 <problem_fetch+0x43b4>)
 800573c:	461d      	mov	r5, r3
 800573e:	4614      	mov	r4, r2
 8005740:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005742:	6028      	str	r0, [r5, #0]
 8005744:	6069      	str	r1, [r5, #4]
 8005746:	60aa      	str	r2, [r5, #8]
 8005748:	60eb      	str	r3, [r5, #12]
 800574a:	8823      	ldrh	r3, [r4, #0]
 800574c:	822b      	strh	r3, [r5, #16]
			strcpy(p->moveNumbers,"4,5,8,11,13,14,17,18,14");
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	3304      	adds	r3, #4
 8005752:	4ab2      	ldr	r2, [pc, #712]	; (8005a1c <problem_fetch+0x43b8>)
 8005754:	461d      	mov	r5, r3
 8005756:	4614      	mov	r4, r2
 8005758:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800575a:	6028      	str	r0, [r5, #0]
 800575c:	6069      	str	r1, [r5, #4]
 800575e:	60aa      	str	r2, [r5, #8]
 8005760:	60eb      	str	r3, [r5, #12]
 8005762:	cc03      	ldmia	r4!, {r0, r1}
 8005764:	6128      	str	r0, [r5, #16]
 8005766:	6169      	str	r1, [r5, #20]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,e,d");
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800576e:	4aac      	ldr	r2, [pc, #688]	; (8005a20 <problem_fetch+0x43bc>)
 8005770:	461d      	mov	r5, r3
 8005772:	4614      	mov	r4, r2
 8005774:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005776:	6028      	str	r0, [r5, #0]
 8005778:	6069      	str	r1, [r5, #4]
 800577a:	60aa      	str	r2, [r5, #8]
 800577c:	60eb      	str	r3, [r5, #12]
 800577e:	8823      	ldrh	r3, [r4, #0]
 8005780:	822b      	strh	r3, [r5, #16]
			break;
 8005782:	f016 be9f 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 101 :
			strcpy(p->name,"MISSILE");
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800578c:	49a5      	ldr	r1, [pc, #660]	; (8005a24 <problem_fetch+0x43c0>)
 800578e:	461a      	mov	r2, r3
 8005790:	460b      	mov	r3, r1
 8005792:	cb03      	ldmia	r3!, {r0, r1}
 8005794:	6010      	str	r0, [r2, #0]
 8005796:	6051      	str	r1, [r2, #4]
			strcpy(p->grade,"7A");
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800579e:	4aa2      	ldr	r2, [pc, #648]	; (8005a28 <problem_fetch+0x43c4>)
 80057a0:	8811      	ldrh	r1, [r2, #0]
 80057a2:	7892      	ldrb	r2, [r2, #2]
 80057a4:	8019      	strh	r1, [r3, #0]
 80057a6:	709a      	strb	r2, [r3, #2]
			p->moveSize = 7;
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	2207      	movs	r2, #7
 80057ac:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,E,G,B,E,C,D");
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	33a4      	adds	r3, #164	; 0xa4
 80057b2:	4a9e      	ldr	r2, [pc, #632]	; (8005a2c <problem_fetch+0x43c8>)
 80057b4:	461c      	mov	r4, r3
 80057b6:	4613      	mov	r3, r2
 80057b8:	cb07      	ldmia	r3!, {r0, r1, r2}
 80057ba:	6020      	str	r0, [r4, #0]
 80057bc:	6061      	str	r1, [r4, #4]
 80057be:	60a2      	str	r2, [r4, #8]
 80057c0:	881b      	ldrh	r3, [r3, #0]
 80057c2:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,6,9,10,12,13,18");
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	3304      	adds	r3, #4
 80057c8:	4a99      	ldr	r2, [pc, #612]	; (8005a30 <problem_fetch+0x43cc>)
 80057ca:	461d      	mov	r5, r3
 80057cc:	4614      	mov	r4, r2
 80057ce:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80057d0:	6028      	str	r0, [r5, #0]
 80057d2:	6069      	str	r1, [r5, #4]
 80057d4:	60aa      	str	r2, [r5, #8]
 80057d6:	60eb      	str	r3, [r5, #12]
 80057d8:	8823      	ldrh	r3, [r4, #0]
 80057da:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 80057e2:	4a94      	ldr	r2, [pc, #592]	; (8005a34 <problem_fetch+0x43d0>)
 80057e4:	461c      	mov	r4, r3
 80057e6:	4613      	mov	r3, r2
 80057e8:	cb07      	ldmia	r3!, {r0, r1, r2}
 80057ea:	6020      	str	r0, [r4, #0]
 80057ec:	6061      	str	r1, [r4, #4]
 80057ee:	60a2      	str	r2, [r4, #8]
 80057f0:	881b      	ldrh	r3, [r3, #0]
 80057f2:	81a3      	strh	r3, [r4, #12]
			break;
 80057f4:	f016 be66 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 102 :
			strcpy(p->name,"MOFOS");
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80057fe:	4a8e      	ldr	r2, [pc, #568]	; (8005a38 <problem_fetch+0x43d4>)
 8005800:	6810      	ldr	r0, [r2, #0]
 8005802:	6018      	str	r0, [r3, #0]
 8005804:	8892      	ldrh	r2, [r2, #4]
 8005806:	809a      	strh	r2, [r3, #4]
			strcpy(p->grade,"6C");
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800580e:	4a8b      	ldr	r2, [pc, #556]	; (8005a3c <problem_fetch+0x43d8>)
 8005810:	8811      	ldrh	r1, [r2, #0]
 8005812:	7892      	ldrb	r2, [r2, #2]
 8005814:	8019      	strh	r1, [r3, #0]
 8005816:	709a      	strb	r2, [r3, #2]
			p->moveSize = 6;
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	2206      	movs	r2, #6
 800581c:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"H,J,H,C,D,D");
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	33a4      	adds	r3, #164	; 0xa4
 8005822:	4a87      	ldr	r2, [pc, #540]	; (8005a40 <problem_fetch+0x43dc>)
 8005824:	461c      	mov	r4, r3
 8005826:	4613      	mov	r3, r2
 8005828:	cb07      	ldmia	r3!, {r0, r1, r2}
 800582a:	6020      	str	r0, [r4, #0]
 800582c:	6061      	str	r1, [r4, #4]
 800582e:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,5,10,13,15,18");
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	3304      	adds	r3, #4
 8005834:	4a83      	ldr	r2, [pc, #524]	; (8005a44 <problem_fetch+0x43e0>)
 8005836:	461c      	mov	r4, r3
 8005838:	4615      	mov	r5, r2
 800583a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800583c:	6020      	str	r0, [r4, #0]
 800583e:	6061      	str	r1, [r4, #4]
 8005840:	60a2      	str	r2, [r4, #8]
 8005842:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,s,d,d,d,e");
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800584a:	4a7f      	ldr	r2, [pc, #508]	; (8005a48 <problem_fetch+0x43e4>)
 800584c:	461c      	mov	r4, r3
 800584e:	4613      	mov	r3, r2
 8005850:	cb07      	ldmia	r3!, {r0, r1, r2}
 8005852:	6020      	str	r0, [r4, #0]
 8005854:	6061      	str	r1, [r4, #4]
 8005856:	60a2      	str	r2, [r4, #8]
			break;
 8005858:	f016 be34 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 103 :
			strcpy(p->name,"LI VARDASCI");
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8005862:	4a7a      	ldr	r2, [pc, #488]	; (8005a4c <problem_fetch+0x43e8>)
 8005864:	461c      	mov	r4, r3
 8005866:	4613      	mov	r3, r2
 8005868:	cb07      	ldmia	r3!, {r0, r1, r2}
 800586a:	6020      	str	r0, [r4, #0]
 800586c:	6061      	str	r1, [r4, #4]
 800586e:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade,"7B");
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8005876:	4a76      	ldr	r2, [pc, #472]	; (8005a50 <problem_fetch+0x43ec>)
 8005878:	8811      	ldrh	r1, [r2, #0]
 800587a:	7892      	ldrb	r2, [r2, #2]
 800587c:	8019      	strh	r1, [r3, #0]
 800587e:	709a      	strb	r2, [r3, #2]
			p->moveSize = 4;
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	2204      	movs	r2, #4
 8005884:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,H,G,D");
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	33a4      	adds	r3, #164	; 0xa4
 800588a:	4972      	ldr	r1, [pc, #456]	; (8005a54 <problem_fetch+0x43f0>)
 800588c:	461a      	mov	r2, r3
 800588e:	460b      	mov	r3, r1
 8005890:	cb03      	ldmia	r3!, {r0, r1}
 8005892:	6010      	str	r0, [r2, #0]
 8005894:	6051      	str	r1, [r2, #4]
			strcpy(p->moveNumbers,"4,10,14,18");
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	3304      	adds	r3, #4
 800589a:	496f      	ldr	r1, [pc, #444]	; (8005a58 <problem_fetch+0x43f4>)
 800589c:	461a      	mov	r2, r3
 800589e:	460b      	mov	r3, r1
 80058a0:	cb03      	ldmia	r3!, {r0, r1}
 80058a2:	6010      	str	r0, [r2, #0]
 80058a4:	6051      	str	r1, [r2, #4]
 80058a6:	8819      	ldrh	r1, [r3, #0]
 80058a8:	789b      	ldrb	r3, [r3, #2]
 80058aa:	8111      	strh	r1, [r2, #8]
 80058ac:	7293      	strb	r3, [r2, #10]
			strcpy(p->startFinish,"s,d,d,e");
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 80058b4:	4969      	ldr	r1, [pc, #420]	; (8005a5c <problem_fetch+0x43f8>)
 80058b6:	461a      	mov	r2, r3
 80058b8:	460b      	mov	r3, r1
 80058ba:	cb03      	ldmia	r3!, {r0, r1}
 80058bc:	6010      	str	r0, [r2, #0]
 80058be:	6051      	str	r1, [r2, #4]
			break;
 80058c0:	f016 be00 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 104 :
			strcpy(p->name,"LA FRICHINA");
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80058ca:	4a65      	ldr	r2, [pc, #404]	; (8005a60 <problem_fetch+0x43fc>)
 80058cc:	461c      	mov	r4, r3
 80058ce:	4613      	mov	r3, r2
 80058d0:	cb07      	ldmia	r3!, {r0, r1, r2}
 80058d2:	6020      	str	r0, [r4, #0]
 80058d4:	6061      	str	r1, [r4, #4]
 80058d6:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade,"7A");
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80058de:	4a52      	ldr	r2, [pc, #328]	; (8005a28 <problem_fetch+0x43c4>)
 80058e0:	8811      	ldrh	r1, [r2, #0]
 80058e2:	7892      	ldrb	r2, [r2, #2]
 80058e4:	8019      	strh	r1, [r3, #0]
 80058e6:	709a      	strb	r2, [r3, #2]
			p->moveSize = 5;
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	2205      	movs	r2, #5
 80058ec:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,H,G,H,I");
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	33a4      	adds	r3, #164	; 0xa4
 80058f2:	495c      	ldr	r1, [pc, #368]	; (8005a64 <problem_fetch+0x4400>)
 80058f4:	461a      	mov	r2, r3
 80058f6:	460b      	mov	r3, r1
 80058f8:	cb03      	ldmia	r3!, {r0, r1}
 80058fa:	6010      	str	r0, [r2, #0]
 80058fc:	6051      	str	r1, [r2, #4]
 80058fe:	881b      	ldrh	r3, [r3, #0]
 8005900:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"4,10,14,13,18");
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	3304      	adds	r3, #4
 8005906:	4a58      	ldr	r2, [pc, #352]	; (8005a68 <problem_fetch+0x4404>)
 8005908:	461c      	mov	r4, r3
 800590a:	4613      	mov	r3, r2
 800590c:	cb07      	ldmia	r3!, {r0, r1, r2}
 800590e:	6020      	str	r0, [r4, #0]
 8005910:	6061      	str	r1, [r4, #4]
 8005912:	60a2      	str	r2, [r4, #8]
 8005914:	881b      	ldrh	r3, [r3, #0]
 8005916:	81a3      	strh	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,e");
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800591e:	4953      	ldr	r1, [pc, #332]	; (8005a6c <problem_fetch+0x4408>)
 8005920:	461a      	mov	r2, r3
 8005922:	460b      	mov	r3, r1
 8005924:	cb03      	ldmia	r3!, {r0, r1}
 8005926:	6010      	str	r0, [r2, #0]
 8005928:	6051      	str	r1, [r2, #4]
 800592a:	881b      	ldrh	r3, [r3, #0]
 800592c:	8113      	strh	r3, [r2, #8]
			break;
 800592e:	f016 bdc9 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 105 :
			strcpy(p->name,"BLACKNANA OLDNANA");
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8005938:	4a4d      	ldr	r2, [pc, #308]	; (8005a70 <problem_fetch+0x440c>)
 800593a:	461d      	mov	r5, r3
 800593c:	4614      	mov	r4, r2
 800593e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005940:	6028      	str	r0, [r5, #0]
 8005942:	6069      	str	r1, [r5, #4]
 8005944:	60aa      	str	r2, [r5, #8]
 8005946:	60eb      	str	r3, [r5, #12]
 8005948:	8823      	ldrh	r3, [r4, #0]
 800594a:	822b      	strh	r3, [r5, #16]
			strcpy(p->grade,"7B+");
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8005952:	4a48      	ldr	r2, [pc, #288]	; (8005a74 <problem_fetch+0x4410>)
 8005954:	6810      	ldr	r0, [r2, #0]
 8005956:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	2206      	movs	r2, #6
 800595c:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,I,I,H,D,D");
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	33a4      	adds	r3, #164	; 0xa4
 8005962:	4a45      	ldr	r2, [pc, #276]	; (8005a78 <problem_fetch+0x4414>)
 8005964:	461c      	mov	r4, r3
 8005966:	4613      	mov	r3, r2
 8005968:	cb07      	ldmia	r3!, {r0, r1, r2}
 800596a:	6020      	str	r0, [r4, #0]
 800596c:	6061      	str	r1, [r4, #4]
 800596e:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,10,9,13,15,18");
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	3304      	adds	r3, #4
 8005974:	4a41      	ldr	r2, [pc, #260]	; (8005a7c <problem_fetch+0x4418>)
 8005976:	461c      	mov	r4, r3
 8005978:	4615      	mov	r5, r2
 800597a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800597c:	6020      	str	r0, [r4, #0]
 800597e:	6061      	str	r1, [r4, #4]
 8005980:	60a2      	str	r2, [r4, #8]
 8005982:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800598a:	4a3d      	ldr	r2, [pc, #244]	; (8005a80 <problem_fetch+0x441c>)
 800598c:	461c      	mov	r4, r3
 800598e:	4613      	mov	r3, r2
 8005990:	cb07      	ldmia	r3!, {r0, r1, r2}
 8005992:	6020      	str	r0, [r4, #0]
 8005994:	6061      	str	r1, [r4, #4]
 8005996:	60a2      	str	r2, [r4, #8]
			break;
 8005998:	f016 bd94 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 106 :
			strcpy(p->name,"MONOLITH");
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80059a2:	4938      	ldr	r1, [pc, #224]	; (8005a84 <problem_fetch+0x4420>)
 80059a4:	461a      	mov	r2, r3
 80059a6:	460b      	mov	r3, r1
 80059a8:	cb03      	ldmia	r3!, {r0, r1}
 80059aa:	6010      	str	r0, [r2, #0]
 80059ac:	6051      	str	r1, [r2, #4]
 80059ae:	781b      	ldrb	r3, [r3, #0]
 80059b0:	7213      	strb	r3, [r2, #8]
			strcpy(p->grade,"6B+");
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80059b8:	4a16      	ldr	r2, [pc, #88]	; (8005a14 <problem_fetch+0x43b0>)
 80059ba:	6810      	ldr	r0, [r2, #0]
 80059bc:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	2207      	movs	r2, #7
 80059c2:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,H,E,F,C,E,D");
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	33a4      	adds	r3, #164	; 0xa4
 80059c8:	4a2f      	ldr	r2, [pc, #188]	; (8005a88 <problem_fetch+0x4424>)
 80059ca:	461c      	mov	r4, r3
 80059cc:	4613      	mov	r3, r2
 80059ce:	cb07      	ldmia	r3!, {r0, r1, r2}
 80059d0:	6020      	str	r0, [r4, #0]
 80059d2:	6061      	str	r1, [r4, #4]
 80059d4:	60a2      	str	r2, [r4, #8]
 80059d6:	881b      	ldrh	r3, [r3, #0]
 80059d8:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,8,8,11,13,16,18");
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	3304      	adds	r3, #4
 80059de:	4a2b      	ldr	r2, [pc, #172]	; (8005a8c <problem_fetch+0x4428>)
 80059e0:	461d      	mov	r5, r3
 80059e2:	4614      	mov	r4, r2
 80059e4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80059e6:	6028      	str	r0, [r5, #0]
 80059e8:	6069      	str	r1, [r5, #4]
 80059ea:	60aa      	str	r2, [r5, #8]
 80059ec:	60eb      	str	r3, [r5, #12]
 80059ee:	8823      	ldrh	r3, [r4, #0]
 80059f0:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 80059f8:	4a0e      	ldr	r2, [pc, #56]	; (8005a34 <problem_fetch+0x43d0>)
 80059fa:	461c      	mov	r4, r3
 80059fc:	4613      	mov	r3, r2
 80059fe:	cb07      	ldmia	r3!, {r0, r1, r2}
 8005a00:	6020      	str	r0, [r4, #0]
 8005a02:	6061      	str	r1, [r4, #4]
 8005a04:	60a2      	str	r2, [r4, #8]
 8005a06:	881b      	ldrh	r3, [r3, #0]
 8005a08:	81a3      	strh	r3, [r4, #12]
			break;
 8005a0a:	f016 bd5b 	b.w	801c4c4 <problem_fetch+0x1ae60>
 8005a0e:	bf00      	nop
 8005a10:	08024f88 	.word	0x08024f88
 8005a14:	08023b24 	.word	0x08023b24
 8005a18:	08024f90 	.word	0x08024f90
 8005a1c:	08024fa4 	.word	0x08024fa4
 8005a20:	08024fbc 	.word	0x08024fbc
 8005a24:	08024fd0 	.word	0x08024fd0
 8005a28:	08023ae4 	.word	0x08023ae4
 8005a2c:	08024fd8 	.word	0x08024fd8
 8005a30:	08024fe8 	.word	0x08024fe8
 8005a34:	08023cac 	.word	0x08023cac
 8005a38:	08024ffc 	.word	0x08024ffc
 8005a3c:	08023bf0 	.word	0x08023bf0
 8005a40:	08025004 	.word	0x08025004
 8005a44:	08025010 	.word	0x08025010
 8005a48:	08023b04 	.word	0x08023b04
 8005a4c:	08025020 	.word	0x08025020
 8005a50:	0802421c 	.word	0x0802421c
 8005a54:	0802502c 	.word	0x0802502c
 8005a58:	08025034 	.word	0x08025034
 8005a5c:	08023c78 	.word	0x08023c78
 8005a60:	08025040 	.word	0x08025040
 8005a64:	0802504c 	.word	0x0802504c
 8005a68:	08025058 	.word	0x08025058
 8005a6c:	08023ff0 	.word	0x08023ff0
 8005a70:	08025068 	.word	0x08025068
 8005a74:	08023c60 	.word	0x08023c60
 8005a78:	0802507c 	.word	0x0802507c
 8005a7c:	08025088 	.word	0x08025088
 8005a80:	08023ec0 	.word	0x08023ec0
 8005a84:	08025098 	.word	0x08025098
 8005a88:	080250a4 	.word	0x080250a4
 8005a8c:	080250b4 	.word	0x080250b4
		case 107 :
			strcpy(p->name,"ZONING IN (ALT. START)");
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8005a96:	4ab2      	ldr	r2, [pc, #712]	; (8005d60 <problem_fetch+0x46fc>)
 8005a98:	461c      	mov	r4, r3
 8005a9a:	4615      	mov	r5, r2
 8005a9c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005a9e:	6020      	str	r0, [r4, #0]
 8005aa0:	6061      	str	r1, [r4, #4]
 8005aa2:	60a2      	str	r2, [r4, #8]
 8005aa4:	60e3      	str	r3, [r4, #12]
 8005aa6:	6828      	ldr	r0, [r5, #0]
 8005aa8:	6120      	str	r0, [r4, #16]
 8005aaa:	88ab      	ldrh	r3, [r5, #4]
 8005aac:	79aa      	ldrb	r2, [r5, #6]
 8005aae:	82a3      	strh	r3, [r4, #20]
 8005ab0:	4613      	mov	r3, r2
 8005ab2:	75a3      	strb	r3, [r4, #22]
			strcpy(p->grade,"6B+");
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8005aba:	4aaa      	ldr	r2, [pc, #680]	; (8005d64 <problem_fetch+0x4700>)
 8005abc:	6810      	ldr	r0, [r2, #0]
 8005abe:	6018      	str	r0, [r3, #0]
			p->moveSize = 8;
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	2208      	movs	r2, #8
 8005ac4:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"E,G,H,C,E,C,E,D");
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	33a4      	adds	r3, #164	; 0xa4
 8005aca:	4aa7      	ldr	r2, [pc, #668]	; (8005d68 <problem_fetch+0x4704>)
 8005acc:	461c      	mov	r4, r3
 8005ace:	4615      	mov	r5, r2
 8005ad0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005ad2:	6020      	str	r0, [r4, #0]
 8005ad4:	6061      	str	r1, [r4, #4]
 8005ad6:	60a2      	str	r2, [r4, #8]
 8005ad8:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"6,4,8,8,12,13,16,18");
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	3304      	adds	r3, #4
 8005ade:	4aa3      	ldr	r2, [pc, #652]	; (8005d6c <problem_fetch+0x4708>)
 8005ae0:	461d      	mov	r5, r3
 8005ae2:	4614      	mov	r4, r2
 8005ae4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005ae6:	6028      	str	r0, [r5, #0]
 8005ae8:	6069      	str	r1, [r5, #4]
 8005aea:	60aa      	str	r2, [r5, #8]
 8005aec:	60eb      	str	r3, [r5, #12]
 8005aee:	6820      	ldr	r0, [r4, #0]
 8005af0:	6128      	str	r0, [r5, #16]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,e");
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8005af8:	4a9d      	ldr	r2, [pc, #628]	; (8005d70 <problem_fetch+0x470c>)
 8005afa:	461c      	mov	r4, r3
 8005afc:	4615      	mov	r5, r2
 8005afe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005b00:	6020      	str	r0, [r4, #0]
 8005b02:	6061      	str	r1, [r4, #4]
 8005b04:	60a2      	str	r2, [r4, #8]
 8005b06:	60e3      	str	r3, [r4, #12]
			break;
 8005b08:	f016 bcdc 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 108 :
			strcpy(p->name,"ZONING IN");
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8005b12:	4998      	ldr	r1, [pc, #608]	; (8005d74 <problem_fetch+0x4710>)
 8005b14:	461a      	mov	r2, r3
 8005b16:	460b      	mov	r3, r1
 8005b18:	cb03      	ldmia	r3!, {r0, r1}
 8005b1a:	6010      	str	r0, [r2, #0]
 8005b1c:	6051      	str	r1, [r2, #4]
 8005b1e:	881b      	ldrh	r3, [r3, #0]
 8005b20:	8113      	strh	r3, [r2, #8]
			strcpy(p->grade,"6B+");
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8005b28:	4a8e      	ldr	r2, [pc, #568]	; (8005d64 <problem_fetch+0x4700>)
 8005b2a:	6810      	ldr	r0, [r2, #0]
 8005b2c:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	2207      	movs	r2, #7
 8005b32:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,C,E,H,C,E,D");
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	33a4      	adds	r3, #164	; 0xa4
 8005b38:	4a8f      	ldr	r2, [pc, #572]	; (8005d78 <problem_fetch+0x4714>)
 8005b3a:	461c      	mov	r4, r3
 8005b3c:	4613      	mov	r3, r2
 8005b3e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8005b40:	6020      	str	r0, [r4, #0]
 8005b42:	6061      	str	r1, [r4, #4]
 8005b44:	60a2      	str	r2, [r4, #8]
 8005b46:	881b      	ldrh	r3, [r3, #0]
 8005b48:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,8,12,8,13,16,18");
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	3304      	adds	r3, #4
 8005b4e:	4a8b      	ldr	r2, [pc, #556]	; (8005d7c <problem_fetch+0x4718>)
 8005b50:	461d      	mov	r5, r3
 8005b52:	4614      	mov	r4, r2
 8005b54:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005b56:	6028      	str	r0, [r5, #0]
 8005b58:	6069      	str	r1, [r5, #4]
 8005b5a:	60aa      	str	r2, [r5, #8]
 8005b5c:	60eb      	str	r3, [r5, #12]
 8005b5e:	8823      	ldrh	r3, [r4, #0]
 8005b60:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8005b68:	4a85      	ldr	r2, [pc, #532]	; (8005d80 <problem_fetch+0x471c>)
 8005b6a:	461c      	mov	r4, r3
 8005b6c:	4613      	mov	r3, r2
 8005b6e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8005b70:	6020      	str	r0, [r4, #0]
 8005b72:	6061      	str	r1, [r4, #4]
 8005b74:	60a2      	str	r2, [r4, #8]
 8005b76:	881b      	ldrh	r3, [r3, #0]
 8005b78:	81a3      	strh	r3, [r4, #12]
			break;
 8005b7a:	f016 bca3 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 109 :
			strcpy(p->name,"ORANGE IS THE NEW BLACK");
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8005b84:	4a7f      	ldr	r2, [pc, #508]	; (8005d84 <problem_fetch+0x4720>)
 8005b86:	461d      	mov	r5, r3
 8005b88:	4614      	mov	r4, r2
 8005b8a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005b8c:	6028      	str	r0, [r5, #0]
 8005b8e:	6069      	str	r1, [r5, #4]
 8005b90:	60aa      	str	r2, [r5, #8]
 8005b92:	60eb      	str	r3, [r5, #12]
 8005b94:	cc03      	ldmia	r4!, {r0, r1}
 8005b96:	6128      	str	r0, [r5, #16]
 8005b98:	6169      	str	r1, [r5, #20]
			strcpy(p->grade,"7B");
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8005ba0:	4a79      	ldr	r2, [pc, #484]	; (8005d88 <problem_fetch+0x4724>)
 8005ba2:	8811      	ldrh	r1, [r2, #0]
 8005ba4:	7892      	ldrb	r2, [r2, #2]
 8005ba6:	8019      	strh	r1, [r3, #0]
 8005ba8:	709a      	strb	r2, [r3, #2]
			p->moveSize = 6;
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	2206      	movs	r2, #6
 8005bae:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,G,F,G,C,D");
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	33a4      	adds	r3, #164	; 0xa4
 8005bb4:	4a75      	ldr	r2, [pc, #468]	; (8005d8c <problem_fetch+0x4728>)
 8005bb6:	461c      	mov	r4, r3
 8005bb8:	4613      	mov	r3, r2
 8005bba:	cb07      	ldmia	r3!, {r0, r1, r2}
 8005bbc:	6020      	str	r0, [r4, #0]
 8005bbe:	6061      	str	r1, [r4, #4]
 8005bc0:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,6,11,14,8,18");
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	3304      	adds	r3, #4
 8005bc6:	4a72      	ldr	r2, [pc, #456]	; (8005d90 <problem_fetch+0x472c>)
 8005bc8:	461c      	mov	r4, r3
 8005bca:	4613      	mov	r3, r2
 8005bcc:	cb07      	ldmia	r3!, {r0, r1, r2}
 8005bce:	6020      	str	r0, [r4, #0]
 8005bd0:	6061      	str	r1, [r4, #4]
 8005bd2:	60a2      	str	r2, [r4, #8]
 8005bd4:	881a      	ldrh	r2, [r3, #0]
 8005bd6:	789b      	ldrb	r3, [r3, #2]
 8005bd8:	81a2      	strh	r2, [r4, #12]
 8005bda:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8005be2:	4a6c      	ldr	r2, [pc, #432]	; (8005d94 <problem_fetch+0x4730>)
 8005be4:	461c      	mov	r4, r3
 8005be6:	4613      	mov	r3, r2
 8005be8:	cb07      	ldmia	r3!, {r0, r1, r2}
 8005bea:	6020      	str	r0, [r4, #0]
 8005bec:	6061      	str	r1, [r4, #4]
 8005bee:	60a2      	str	r2, [r4, #8]
			break;
 8005bf0:	f016 bc68 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 110 :
			strcpy(p->name,"COCA COLA");
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8005bfa:	4967      	ldr	r1, [pc, #412]	; (8005d98 <problem_fetch+0x4734>)
 8005bfc:	461a      	mov	r2, r3
 8005bfe:	460b      	mov	r3, r1
 8005c00:	cb03      	ldmia	r3!, {r0, r1}
 8005c02:	6010      	str	r0, [r2, #0]
 8005c04:	6051      	str	r1, [r2, #4]
 8005c06:	881b      	ldrh	r3, [r3, #0]
 8005c08:	8113      	strh	r3, [r2, #8]
			strcpy(p->grade,"7A");
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8005c10:	4a62      	ldr	r2, [pc, #392]	; (8005d9c <problem_fetch+0x4738>)
 8005c12:	8811      	ldrh	r1, [r2, #0]
 8005c14:	7892      	ldrb	r2, [r2, #2]
 8005c16:	8019      	strh	r1, [r3, #0]
 8005c18:	709a      	strb	r2, [r3, #2]
			p->moveSize = 7;
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	2207      	movs	r2, #7
 8005c1e:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,G,F,E,G,D,C");
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	33a4      	adds	r3, #164	; 0xa4
 8005c24:	4a5e      	ldr	r2, [pc, #376]	; (8005da0 <problem_fetch+0x473c>)
 8005c26:	461c      	mov	r4, r3
 8005c28:	4613      	mov	r3, r2
 8005c2a:	cb07      	ldmia	r3!, {r0, r1, r2}
 8005c2c:	6020      	str	r0, [r4, #0]
 8005c2e:	6061      	str	r1, [r4, #4]
 8005c30:	60a2      	str	r2, [r4, #8]
 8005c32:	881b      	ldrh	r3, [r3, #0]
 8005c34:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,6,11,12,15,18,8");
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	3304      	adds	r3, #4
 8005c3a:	4a5a      	ldr	r2, [pc, #360]	; (8005da4 <problem_fetch+0x4740>)
 8005c3c:	461d      	mov	r5, r3
 8005c3e:	4614      	mov	r4, r2
 8005c40:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005c42:	6028      	str	r0, [r5, #0]
 8005c44:	6069      	str	r1, [r5, #4]
 8005c46:	60aa      	str	r2, [r5, #8]
 8005c48:	60eb      	str	r3, [r5, #12]
 8005c4a:	8823      	ldrh	r3, [r4, #0]
 8005c4c:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,d,d,d,d,e,d");
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8005c54:	4a54      	ldr	r2, [pc, #336]	; (8005da8 <problem_fetch+0x4744>)
 8005c56:	461c      	mov	r4, r3
 8005c58:	4613      	mov	r3, r2
 8005c5a:	cb07      	ldmia	r3!, {r0, r1, r2}
 8005c5c:	6020      	str	r0, [r4, #0]
 8005c5e:	6061      	str	r1, [r4, #4]
 8005c60:	60a2      	str	r2, [r4, #8]
 8005c62:	881b      	ldrh	r3, [r3, #0]
 8005c64:	81a3      	strh	r3, [r4, #12]
			break;
 8005c66:	f016 bc2d 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 111 :
			strcpy(p->name,"OINTMENT 007");
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8005c70:	4a4e      	ldr	r2, [pc, #312]	; (8005dac <problem_fetch+0x4748>)
 8005c72:	461c      	mov	r4, r3
 8005c74:	4613      	mov	r3, r2
 8005c76:	cb07      	ldmia	r3!, {r0, r1, r2}
 8005c78:	6020      	str	r0, [r4, #0]
 8005c7a:	6061      	str	r1, [r4, #4]
 8005c7c:	60a2      	str	r2, [r4, #8]
 8005c7e:	781b      	ldrb	r3, [r3, #0]
 8005c80:	7323      	strb	r3, [r4, #12]
			strcpy(p->grade,"6B+");
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8005c88:	4a36      	ldr	r2, [pc, #216]	; (8005d64 <problem_fetch+0x4700>)
 8005c8a:	6810      	ldr	r0, [r2, #0]
 8005c8c:	6018      	str	r0, [r3, #0]
			p->moveSize = 9;
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	2209      	movs	r2, #9
 8005c92:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,E,E,G,H,G,I,G,I");
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	33a4      	adds	r3, #164	; 0xa4
 8005c98:	4a45      	ldr	r2, [pc, #276]	; (8005db0 <problem_fetch+0x474c>)
 8005c9a:	461d      	mov	r5, r3
 8005c9c:	4614      	mov	r4, r2
 8005c9e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005ca0:	6028      	str	r0, [r5, #0]
 8005ca2:	6069      	str	r1, [r5, #4]
 8005ca4:	60aa      	str	r2, [r5, #8]
 8005ca6:	60eb      	str	r3, [r5, #12]
 8005ca8:	8823      	ldrh	r3, [r4, #0]
 8005caa:	822b      	strh	r3, [r5, #16]
			strcpy(p->moveNumbers,"4,6,8,9,10,14,14,15,18");
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	3304      	adds	r3, #4
 8005cb0:	4a40      	ldr	r2, [pc, #256]	; (8005db4 <problem_fetch+0x4750>)
 8005cb2:	461c      	mov	r4, r3
 8005cb4:	4615      	mov	r5, r2
 8005cb6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005cb8:	6020      	str	r0, [r4, #0]
 8005cba:	6061      	str	r1, [r4, #4]
 8005cbc:	60a2      	str	r2, [r4, #8]
 8005cbe:	60e3      	str	r3, [r4, #12]
 8005cc0:	6828      	ldr	r0, [r5, #0]
 8005cc2:	6120      	str	r0, [r4, #16]
 8005cc4:	88ab      	ldrh	r3, [r5, #4]
 8005cc6:	79aa      	ldrb	r2, [r5, #6]
 8005cc8:	82a3      	strh	r3, [r4, #20]
 8005cca:	4613      	mov	r3, r2
 8005ccc:	75a3      	strb	r3, [r4, #22]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,d,e");
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8005cd4:	4a38      	ldr	r2, [pc, #224]	; (8005db8 <problem_fetch+0x4754>)
 8005cd6:	461d      	mov	r5, r3
 8005cd8:	4614      	mov	r4, r2
 8005cda:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005cdc:	6028      	str	r0, [r5, #0]
 8005cde:	6069      	str	r1, [r5, #4]
 8005ce0:	60aa      	str	r2, [r5, #8]
 8005ce2:	60eb      	str	r3, [r5, #12]
 8005ce4:	8823      	ldrh	r3, [r4, #0]
 8005ce6:	822b      	strh	r3, [r5, #16]
			break;
 8005ce8:	f016 bbec 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 112 :
			strcpy(p->name,"WARM UP STUFF");
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8005cf2:	4a32      	ldr	r2, [pc, #200]	; (8005dbc <problem_fetch+0x4758>)
 8005cf4:	461c      	mov	r4, r3
 8005cf6:	4613      	mov	r3, r2
 8005cf8:	cb07      	ldmia	r3!, {r0, r1, r2}
 8005cfa:	6020      	str	r0, [r4, #0]
 8005cfc:	6061      	str	r1, [r4, #4]
 8005cfe:	60a2      	str	r2, [r4, #8]
 8005d00:	881b      	ldrh	r3, [r3, #0]
 8005d02:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade,"6B+");
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8005d0a:	4a16      	ldr	r2, [pc, #88]	; (8005d64 <problem_fetch+0x4700>)
 8005d0c:	6810      	ldr	r0, [r2, #0]
 8005d0e:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	2207      	movs	r2, #7
 8005d14:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"C,E,E,D,E,A,D");
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	33a4      	adds	r3, #164	; 0xa4
 8005d1a:	4a29      	ldr	r2, [pc, #164]	; (8005dc0 <problem_fetch+0x475c>)
 8005d1c:	461c      	mov	r4, r3
 8005d1e:	4613      	mov	r3, r2
 8005d20:	cb07      	ldmia	r3!, {r0, r1, r2}
 8005d22:	6020      	str	r0, [r4, #0]
 8005d24:	6061      	str	r1, [r4, #4]
 8005d26:	60a2      	str	r2, [r4, #8]
 8005d28:	881b      	ldrh	r3, [r3, #0]
 8005d2a:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,6,8,11,12,14,18");
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	3304      	adds	r3, #4
 8005d30:	4a24      	ldr	r2, [pc, #144]	; (8005dc4 <problem_fetch+0x4760>)
 8005d32:	461d      	mov	r5, r3
 8005d34:	4614      	mov	r4, r2
 8005d36:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005d38:	6028      	str	r0, [r5, #0]
 8005d3a:	6069      	str	r1, [r5, #4]
 8005d3c:	60aa      	str	r2, [r5, #8]
 8005d3e:	60eb      	str	r3, [r5, #12]
 8005d40:	8823      	ldrh	r3, [r4, #0]
 8005d42:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,s,d,d,d,d,e");
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8005d4a:	4a1f      	ldr	r2, [pc, #124]	; (8005dc8 <problem_fetch+0x4764>)
 8005d4c:	461c      	mov	r4, r3
 8005d4e:	4613      	mov	r3, r2
 8005d50:	cb07      	ldmia	r3!, {r0, r1, r2}
 8005d52:	6020      	str	r0, [r4, #0]
 8005d54:	6061      	str	r1, [r4, #4]
 8005d56:	60a2      	str	r2, [r4, #8]
 8005d58:	881b      	ldrh	r3, [r3, #0]
 8005d5a:	81a3      	strh	r3, [r4, #12]
			break;
 8005d5c:	f016 bbb2 	b.w	801c4c4 <problem_fetch+0x1ae60>
 8005d60:	080250c8 	.word	0x080250c8
 8005d64:	08023b24 	.word	0x08023b24
 8005d68:	080250e0 	.word	0x080250e0
 8005d6c:	080250f0 	.word	0x080250f0
 8005d70:	08023c48 	.word	0x08023c48
 8005d74:	08025104 	.word	0x08025104
 8005d78:	08025110 	.word	0x08025110
 8005d7c:	08025120 	.word	0x08025120
 8005d80:	08023cac 	.word	0x08023cac
 8005d84:	08025134 	.word	0x08025134
 8005d88:	0802421c 	.word	0x0802421c
 8005d8c:	0802514c 	.word	0x0802514c
 8005d90:	08025158 	.word	0x08025158
 8005d94:	08023ec0 	.word	0x08023ec0
 8005d98:	08025168 	.word	0x08025168
 8005d9c:	08023ae4 	.word	0x08023ae4
 8005da0:	08025174 	.word	0x08025174
 8005da4:	08025184 	.word	0x08025184
 8005da8:	08024c8c 	.word	0x08024c8c
 8005dac:	08025198 	.word	0x08025198
 8005db0:	080251a8 	.word	0x080251a8
 8005db4:	080251bc 	.word	0x080251bc
 8005db8:	08024b08 	.word	0x08024b08
 8005dbc:	080251d4 	.word	0x080251d4
 8005dc0:	080251e4 	.word	0x080251e4
 8005dc4:	080251f4 	.word	0x080251f4
 8005dc8:	08023b9c 	.word	0x08023b9c
		case 113 :
			strcpy(p->name,"VANTABLACK");
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8005dd2:	49b1      	ldr	r1, [pc, #708]	; (8006098 <problem_fetch+0x4a34>)
 8005dd4:	461a      	mov	r2, r3
 8005dd6:	460b      	mov	r3, r1
 8005dd8:	cb03      	ldmia	r3!, {r0, r1}
 8005dda:	6010      	str	r0, [r2, #0]
 8005ddc:	6051      	str	r1, [r2, #4]
 8005dde:	8819      	ldrh	r1, [r3, #0]
 8005de0:	789b      	ldrb	r3, [r3, #2]
 8005de2:	8111      	strh	r1, [r2, #8]
 8005de4:	7293      	strb	r3, [r2, #10]
			strcpy(p->grade,"7B+");
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8005dec:	4aab      	ldr	r2, [pc, #684]	; (800609c <problem_fetch+0x4a38>)
 8005dee:	6810      	ldr	r0, [r2, #0]
 8005df0:	6018      	str	r0, [r3, #0]
			p->moveSize = 5;
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	2205      	movs	r2, #5
 8005df6:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"H,B,D,A,G");
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	33a4      	adds	r3, #164	; 0xa4
 8005dfc:	49a8      	ldr	r1, [pc, #672]	; (80060a0 <problem_fetch+0x4a3c>)
 8005dfe:	461a      	mov	r2, r3
 8005e00:	460b      	mov	r3, r1
 8005e02:	cb03      	ldmia	r3!, {r0, r1}
 8005e04:	6010      	str	r0, [r2, #0]
 8005e06:	6051      	str	r1, [r2, #4]
 8005e08:	881b      	ldrh	r3, [r3, #0]
 8005e0a:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"8,10,15,18,4");
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	3304      	adds	r3, #4
 8005e10:	4aa4      	ldr	r2, [pc, #656]	; (80060a4 <problem_fetch+0x4a40>)
 8005e12:	461c      	mov	r4, r3
 8005e14:	4613      	mov	r3, r2
 8005e16:	cb07      	ldmia	r3!, {r0, r1, r2}
 8005e18:	6020      	str	r0, [r4, #0]
 8005e1a:	6061      	str	r1, [r4, #4]
 8005e1c:	60a2      	str	r2, [r4, #8]
 8005e1e:	781b      	ldrb	r3, [r3, #0]
 8005e20:	7323      	strb	r3, [r4, #12]
			strcpy(p->startFinish,"d,d,d,e,s");
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8005e28:	499f      	ldr	r1, [pc, #636]	; (80060a8 <problem_fetch+0x4a44>)
 8005e2a:	461a      	mov	r2, r3
 8005e2c:	460b      	mov	r3, r1
 8005e2e:	cb03      	ldmia	r3!, {r0, r1}
 8005e30:	6010      	str	r0, [r2, #0]
 8005e32:	6051      	str	r1, [r2, #4]
 8005e34:	881b      	ldrh	r3, [r3, #0]
 8005e36:	8113      	strh	r3, [r2, #8]
			break;
 8005e38:	f016 bb44 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 114 :
			strcpy(p->name,"ORDERLY HOUSING");
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8005e42:	4a9a      	ldr	r2, [pc, #616]	; (80060ac <problem_fetch+0x4a48>)
 8005e44:	461c      	mov	r4, r3
 8005e46:	4615      	mov	r5, r2
 8005e48:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005e4a:	6020      	str	r0, [r4, #0]
 8005e4c:	6061      	str	r1, [r4, #4]
 8005e4e:	60a2      	str	r2, [r4, #8]
 8005e50:	60e3      	str	r3, [r4, #12]
			strcpy(p->grade,"7C");
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8005e58:	4a95      	ldr	r2, [pc, #596]	; (80060b0 <problem_fetch+0x4a4c>)
 8005e5a:	8811      	ldrh	r1, [r2, #0]
 8005e5c:	7892      	ldrb	r2, [r2, #2]
 8005e5e:	8019      	strh	r1, [r3, #0]
 8005e60:	709a      	strb	r2, [r3, #2]
			p->moveSize = 5;
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	2205      	movs	r2, #5
 8005e66:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,C,F,E,D");
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	33a4      	adds	r3, #164	; 0xa4
 8005e6c:	4991      	ldr	r1, [pc, #580]	; (80060b4 <problem_fetch+0x4a50>)
 8005e6e:	461a      	mov	r2, r3
 8005e70:	460b      	mov	r3, r1
 8005e72:	cb03      	ldmia	r3!, {r0, r1}
 8005e74:	6010      	str	r0, [r2, #0]
 8005e76:	6051      	str	r1, [r2, #4]
 8005e78:	881b      	ldrh	r3, [r3, #0]
 8005e7a:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"4,8,11,14,18");
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	3304      	adds	r3, #4
 8005e80:	4a8d      	ldr	r2, [pc, #564]	; (80060b8 <problem_fetch+0x4a54>)
 8005e82:	461c      	mov	r4, r3
 8005e84:	4613      	mov	r3, r2
 8005e86:	cb07      	ldmia	r3!, {r0, r1, r2}
 8005e88:	6020      	str	r0, [r4, #0]
 8005e8a:	6061      	str	r1, [r4, #4]
 8005e8c:	60a2      	str	r2, [r4, #8]
 8005e8e:	781b      	ldrb	r3, [r3, #0]
 8005e90:	7323      	strb	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,e");
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8005e98:	4988      	ldr	r1, [pc, #544]	; (80060bc <problem_fetch+0x4a58>)
 8005e9a:	461a      	mov	r2, r3
 8005e9c:	460b      	mov	r3, r1
 8005e9e:	cb03      	ldmia	r3!, {r0, r1}
 8005ea0:	6010      	str	r0, [r2, #0]
 8005ea2:	6051      	str	r1, [r2, #4]
 8005ea4:	881b      	ldrh	r3, [r3, #0]
 8005ea6:	8113      	strh	r3, [r2, #8]
			break;
 8005ea8:	f016 bb0c 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 115 :
			strcpy(p->name,"CATCH AND PULL");
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8005eb2:	4a83      	ldr	r2, [pc, #524]	; (80060c0 <problem_fetch+0x4a5c>)
 8005eb4:	461c      	mov	r4, r3
 8005eb6:	4613      	mov	r3, r2
 8005eb8:	cb07      	ldmia	r3!, {r0, r1, r2}
 8005eba:	6020      	str	r0, [r4, #0]
 8005ebc:	6061      	str	r1, [r4, #4]
 8005ebe:	60a2      	str	r2, [r4, #8]
 8005ec0:	881a      	ldrh	r2, [r3, #0]
 8005ec2:	789b      	ldrb	r3, [r3, #2]
 8005ec4:	81a2      	strh	r2, [r4, #12]
 8005ec6:	73a3      	strb	r3, [r4, #14]
			strcpy(p->grade,"7B");
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8005ece:	4a7d      	ldr	r2, [pc, #500]	; (80060c4 <problem_fetch+0x4a60>)
 8005ed0:	8811      	ldrh	r1, [r2, #0]
 8005ed2:	7892      	ldrb	r2, [r2, #2]
 8005ed4:	8019      	strh	r1, [r3, #0]
 8005ed6:	709a      	strb	r2, [r3, #2]
			p->moveSize = 5;
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	2205      	movs	r2, #5
 8005edc:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,E,G,D,I");
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	33a4      	adds	r3, #164	; 0xa4
 8005ee2:	4979      	ldr	r1, [pc, #484]	; (80060c8 <problem_fetch+0x4a64>)
 8005ee4:	461a      	mov	r2, r3
 8005ee6:	460b      	mov	r3, r1
 8005ee8:	cb03      	ldmia	r3!, {r0, r1}
 8005eea:	6010      	str	r0, [r2, #0]
 8005eec:	6051      	str	r1, [r2, #4]
 8005eee:	881b      	ldrh	r3, [r3, #0]
 8005ef0:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"14,8,4,18,9");
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	3304      	adds	r3, #4
 8005ef6:	4a75      	ldr	r2, [pc, #468]	; (80060cc <problem_fetch+0x4a68>)
 8005ef8:	461c      	mov	r4, r3
 8005efa:	4613      	mov	r3, r2
 8005efc:	cb07      	ldmia	r3!, {r0, r1, r2}
 8005efe:	6020      	str	r0, [r4, #0]
 8005f00:	6061      	str	r1, [r4, #4]
 8005f02:	60a2      	str	r2, [r4, #8]
			strcpy(p->startFinish,"d,d,s,e,d");
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8005f0a:	4971      	ldr	r1, [pc, #452]	; (80060d0 <problem_fetch+0x4a6c>)
 8005f0c:	461a      	mov	r2, r3
 8005f0e:	460b      	mov	r3, r1
 8005f10:	cb03      	ldmia	r3!, {r0, r1}
 8005f12:	6010      	str	r0, [r2, #0]
 8005f14:	6051      	str	r1, [r2, #4]
 8005f16:	881b      	ldrh	r3, [r3, #0]
 8005f18:	8113      	strh	r3, [r2, #8]
			break;
 8005f1a:	f016 bad3 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 116 :
			strcpy(p->name,"WHERE'S YOUR BERRY");
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8005f24:	4a6b      	ldr	r2, [pc, #428]	; (80060d4 <problem_fetch+0x4a70>)
 8005f26:	461d      	mov	r5, r3
 8005f28:	4614      	mov	r4, r2
 8005f2a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005f2c:	6028      	str	r0, [r5, #0]
 8005f2e:	6069      	str	r1, [r5, #4]
 8005f30:	60aa      	str	r2, [r5, #8]
 8005f32:	60eb      	str	r3, [r5, #12]
 8005f34:	8823      	ldrh	r3, [r4, #0]
 8005f36:	78a2      	ldrb	r2, [r4, #2]
 8005f38:	822b      	strh	r3, [r5, #16]
 8005f3a:	4613      	mov	r3, r2
 8005f3c:	74ab      	strb	r3, [r5, #18]
			strcpy(p->grade,"6B+");
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8005f44:	4a64      	ldr	r2, [pc, #400]	; (80060d8 <problem_fetch+0x4a74>)
 8005f46:	6810      	ldr	r0, [r2, #0]
 8005f48:	6018      	str	r0, [r3, #0]
			p->moveSize = 9;
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	2209      	movs	r2, #9
 8005f4e:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"C,D,I,E,F,C,B,E,B");
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	33a4      	adds	r3, #164	; 0xa4
 8005f54:	4a61      	ldr	r2, [pc, #388]	; (80060dc <problem_fetch+0x4a78>)
 8005f56:	461d      	mov	r5, r3
 8005f58:	4614      	mov	r4, r2
 8005f5a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005f5c:	6028      	str	r0, [r5, #0]
 8005f5e:	6069      	str	r1, [r5, #4]
 8005f60:	60aa      	str	r2, [r5, #8]
 8005f62:	60eb      	str	r3, [r5, #12]
 8005f64:	8823      	ldrh	r3, [r4, #0]
 8005f66:	822b      	strh	r3, [r5, #16]
			strcpy(p->moveNumbers,"5,15,18,16,11,13,10,8,6");
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	3304      	adds	r3, #4
 8005f6c:	4a5c      	ldr	r2, [pc, #368]	; (80060e0 <problem_fetch+0x4a7c>)
 8005f6e:	461d      	mov	r5, r3
 8005f70:	4614      	mov	r4, r2
 8005f72:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005f74:	6028      	str	r0, [r5, #0]
 8005f76:	6069      	str	r1, [r5, #4]
 8005f78:	60aa      	str	r2, [r5, #8]
 8005f7a:	60eb      	str	r3, [r5, #12]
 8005f7c:	cc03      	ldmia	r4!, {r0, r1}
 8005f7e:	6128      	str	r0, [r5, #16]
 8005f80:	6169      	str	r1, [r5, #20]
			strcpy(p->startFinish,"s,d,e,d,d,d,d,d,s");
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8005f88:	4a56      	ldr	r2, [pc, #344]	; (80060e4 <problem_fetch+0x4a80>)
 8005f8a:	461d      	mov	r5, r3
 8005f8c:	4614      	mov	r4, r2
 8005f8e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005f90:	6028      	str	r0, [r5, #0]
 8005f92:	6069      	str	r1, [r5, #4]
 8005f94:	60aa      	str	r2, [r5, #8]
 8005f96:	60eb      	str	r3, [r5, #12]
 8005f98:	8823      	ldrh	r3, [r4, #0]
 8005f9a:	822b      	strh	r3, [r5, #16]
			break;
 8005f9c:	f016 ba92 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 117 :
			strcpy(p->name,"PURPLE NURPLE BOYS");
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8005fa6:	4a50      	ldr	r2, [pc, #320]	; (80060e8 <problem_fetch+0x4a84>)
 8005fa8:	461d      	mov	r5, r3
 8005faa:	4614      	mov	r4, r2
 8005fac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005fae:	6028      	str	r0, [r5, #0]
 8005fb0:	6069      	str	r1, [r5, #4]
 8005fb2:	60aa      	str	r2, [r5, #8]
 8005fb4:	60eb      	str	r3, [r5, #12]
 8005fb6:	8823      	ldrh	r3, [r4, #0]
 8005fb8:	78a2      	ldrb	r2, [r4, #2]
 8005fba:	822b      	strh	r3, [r5, #16]
 8005fbc:	4613      	mov	r3, r2
 8005fbe:	74ab      	strb	r3, [r5, #18]
			strcpy(p->grade,"6C+");
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8005fc6:	4a49      	ldr	r2, [pc, #292]	; (80060ec <problem_fetch+0x4a88>)
 8005fc8:	6810      	ldr	r0, [r2, #0]
 8005fca:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	2207      	movs	r2, #7
 8005fd0:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,G,G,E,I,G,I");
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	33a4      	adds	r3, #164	; 0xa4
 8005fd6:	4a46      	ldr	r2, [pc, #280]	; (80060f0 <problem_fetch+0x4a8c>)
 8005fd8:	461c      	mov	r4, r3
 8005fda:	4613      	mov	r3, r2
 8005fdc:	cb07      	ldmia	r3!, {r0, r1, r2}
 8005fde:	6020      	str	r0, [r4, #0]
 8005fe0:	6061      	str	r1, [r4, #4]
 8005fe2:	60a2      	str	r2, [r4, #8]
 8005fe4:	881b      	ldrh	r3, [r3, #0]
 8005fe6:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,6,9,12,14,15,18");
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	3304      	adds	r3, #4
 8005fec:	4a41      	ldr	r2, [pc, #260]	; (80060f4 <problem_fetch+0x4a90>)
 8005fee:	461d      	mov	r5, r3
 8005ff0:	4614      	mov	r4, r2
 8005ff2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005ff4:	6028      	str	r0, [r5, #0]
 8005ff6:	6069      	str	r1, [r5, #4]
 8005ff8:	60aa      	str	r2, [r5, #8]
 8005ffa:	60eb      	str	r3, [r5, #12]
 8005ffc:	8823      	ldrh	r3, [r4, #0]
 8005ffe:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,s,d,d,d,d,e");
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8006006:	4a3c      	ldr	r2, [pc, #240]	; (80060f8 <problem_fetch+0x4a94>)
 8006008:	461c      	mov	r4, r3
 800600a:	4613      	mov	r3, r2
 800600c:	cb07      	ldmia	r3!, {r0, r1, r2}
 800600e:	6020      	str	r0, [r4, #0]
 8006010:	6061      	str	r1, [r4, #4]
 8006012:	60a2      	str	r2, [r4, #8]
 8006014:	881b      	ldrh	r3, [r3, #0]
 8006016:	81a3      	strh	r3, [r4, #12]
			break;
 8006018:	f016 ba54 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 118 :
			strcpy(p->name,"DUMBADUMBA EASY");
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8006022:	4a36      	ldr	r2, [pc, #216]	; (80060fc <problem_fetch+0x4a98>)
 8006024:	461c      	mov	r4, r3
 8006026:	4615      	mov	r5, r2
 8006028:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800602a:	6020      	str	r0, [r4, #0]
 800602c:	6061      	str	r1, [r4, #4]
 800602e:	60a2      	str	r2, [r4, #8]
 8006030:	60e3      	str	r3, [r4, #12]
			strcpy(p->grade,"6B+");
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8006038:	4a27      	ldr	r2, [pc, #156]	; (80060d8 <problem_fetch+0x4a74>)
 800603a:	6810      	ldr	r0, [r2, #0]
 800603c:	6018      	str	r0, [r3, #0]
			p->moveSize = 9;
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	2209      	movs	r2, #9
 8006042:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,J,E,F,C,D,D,E,C");
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	33a4      	adds	r3, #164	; 0xa4
 8006048:	4a2d      	ldr	r2, [pc, #180]	; (8006100 <problem_fetch+0x4a9c>)
 800604a:	461d      	mov	r5, r3
 800604c:	4614      	mov	r4, r2
 800604e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006050:	6028      	str	r0, [r5, #0]
 8006052:	6069      	str	r1, [r5, #4]
 8006054:	60aa      	str	r2, [r5, #8]
 8006056:	60eb      	str	r3, [r5, #12]
 8006058:	8823      	ldrh	r3, [r4, #0]
 800605a:	822b      	strh	r3, [r5, #16]
			strcpy(p->moveNumbers,"4,5,8,11,13,15,18,6,5");
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	3304      	adds	r3, #4
 8006060:	4a28      	ldr	r2, [pc, #160]	; (8006104 <problem_fetch+0x4aa0>)
 8006062:	461d      	mov	r5, r3
 8006064:	4614      	mov	r4, r2
 8006066:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006068:	6028      	str	r0, [r5, #0]
 800606a:	6069      	str	r1, [r5, #4]
 800606c:	60aa      	str	r2, [r5, #8]
 800606e:	60eb      	str	r3, [r5, #12]
 8006070:	6820      	ldr	r0, [r4, #0]
 8006072:	6128      	str	r0, [r5, #16]
 8006074:	88a3      	ldrh	r3, [r4, #4]
 8006076:	82ab      	strh	r3, [r5, #20]
			strcpy(p->startFinish,"s,d,d,d,d,d,e,s,d");
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800607e:	4a22      	ldr	r2, [pc, #136]	; (8006108 <problem_fetch+0x4aa4>)
 8006080:	461d      	mov	r5, r3
 8006082:	4614      	mov	r4, r2
 8006084:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006086:	6028      	str	r0, [r5, #0]
 8006088:	6069      	str	r1, [r5, #4]
 800608a:	60aa      	str	r2, [r5, #8]
 800608c:	60eb      	str	r3, [r5, #12]
 800608e:	8823      	ldrh	r3, [r4, #0]
 8006090:	822b      	strh	r3, [r5, #16]
			break;
 8006092:	f016 ba17 	b.w	801c4c4 <problem_fetch+0x1ae60>
 8006096:	bf00      	nop
 8006098:	08025208 	.word	0x08025208
 800609c:	08023c60 	.word	0x08023c60
 80060a0:	08025214 	.word	0x08025214
 80060a4:	08025220 	.word	0x08025220
 80060a8:	08025230 	.word	0x08025230
 80060ac:	0802523c 	.word	0x0802523c
 80060b0:	08024358 	.word	0x08024358
 80060b4:	0802524c 	.word	0x0802524c
 80060b8:	08025258 	.word	0x08025258
 80060bc:	08023ff0 	.word	0x08023ff0
 80060c0:	08025268 	.word	0x08025268
 80060c4:	0802421c 	.word	0x0802421c
 80060c8:	08025278 	.word	0x08025278
 80060cc:	08025284 	.word	0x08025284
 80060d0:	08025290 	.word	0x08025290
 80060d4:	0802529c 	.word	0x0802529c
 80060d8:	08023b24 	.word	0x08023b24
 80060dc:	080252b0 	.word	0x080252b0
 80060e0:	080252c4 	.word	0x080252c4
 80060e4:	080252dc 	.word	0x080252dc
 80060e8:	080252f0 	.word	0x080252f0
 80060ec:	08023bbc 	.word	0x08023bbc
 80060f0:	08025304 	.word	0x08025304
 80060f4:	08025314 	.word	0x08025314
 80060f8:	08023b9c 	.word	0x08023b9c
 80060fc:	08025328 	.word	0x08025328
 8006100:	08025338 	.word	0x08025338
 8006104:	0802534c 	.word	0x0802534c
 8006108:	08025364 	.word	0x08025364
		case 119 :
			strcpy(p->name,"ANTI JULIE");
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8006112:	49b0      	ldr	r1, [pc, #704]	; (80063d4 <problem_fetch+0x4d70>)
 8006114:	461a      	mov	r2, r3
 8006116:	460b      	mov	r3, r1
 8006118:	cb03      	ldmia	r3!, {r0, r1}
 800611a:	6010      	str	r0, [r2, #0]
 800611c:	6051      	str	r1, [r2, #4]
 800611e:	8819      	ldrh	r1, [r3, #0]
 8006120:	789b      	ldrb	r3, [r3, #2]
 8006122:	8111      	strh	r1, [r2, #8]
 8006124:	7293      	strb	r3, [r2, #10]
			strcpy(p->grade,"7A");
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800612c:	4aaa      	ldr	r2, [pc, #680]	; (80063d8 <problem_fetch+0x4d74>)
 800612e:	8811      	ldrh	r1, [r2, #0]
 8006130:	7892      	ldrb	r2, [r2, #2]
 8006132:	8019      	strh	r1, [r3, #0]
 8006134:	709a      	strb	r2, [r3, #2]
			p->moveSize = 6;
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	2206      	movs	r2, #6
 800613a:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,H,C,G,A,B");
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	33a4      	adds	r3, #164	; 0xa4
 8006140:	4aa6      	ldr	r2, [pc, #664]	; (80063dc <problem_fetch+0x4d78>)
 8006142:	461c      	mov	r4, r3
 8006144:	4613      	mov	r3, r2
 8006146:	cb07      	ldmia	r3!, {r0, r1, r2}
 8006148:	6020      	str	r0, [r4, #0]
 800614a:	6061      	str	r1, [r4, #4]
 800614c:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,10,13,17,18,6");
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	3304      	adds	r3, #4
 8006152:	4aa3      	ldr	r2, [pc, #652]	; (80063e0 <problem_fetch+0x4d7c>)
 8006154:	461c      	mov	r4, r3
 8006156:	4615      	mov	r5, r2
 8006158:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800615a:	6020      	str	r0, [r4, #0]
 800615c:	6061      	str	r1, [r4, #4]
 800615e:	60a2      	str	r2, [r4, #8]
 8006160:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,e,d");
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8006168:	4a9e      	ldr	r2, [pc, #632]	; (80063e4 <problem_fetch+0x4d80>)
 800616a:	461c      	mov	r4, r3
 800616c:	4613      	mov	r3, r2
 800616e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8006170:	6020      	str	r0, [r4, #0]
 8006172:	6061      	str	r1, [r4, #4]
 8006174:	60a2      	str	r2, [r4, #8]
			break;
 8006176:	f016 b9a5 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 120 :
			strcpy(p->name,"BROWN DIRTY WATER");
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8006180:	4a99      	ldr	r2, [pc, #612]	; (80063e8 <problem_fetch+0x4d84>)
 8006182:	461d      	mov	r5, r3
 8006184:	4614      	mov	r4, r2
 8006186:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006188:	6028      	str	r0, [r5, #0]
 800618a:	6069      	str	r1, [r5, #4]
 800618c:	60aa      	str	r2, [r5, #8]
 800618e:	60eb      	str	r3, [r5, #12]
 8006190:	8823      	ldrh	r3, [r4, #0]
 8006192:	822b      	strh	r3, [r5, #16]
			strcpy(p->grade,"6C+");
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800619a:	4a94      	ldr	r2, [pc, #592]	; (80063ec <problem_fetch+0x4d88>)
 800619c:	6810      	ldr	r0, [r2, #0]
 800619e:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	2207      	movs	r2, #7
 80061a4:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,J,H,C,F,A,D");
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	33a4      	adds	r3, #164	; 0xa4
 80061aa:	4a91      	ldr	r2, [pc, #580]	; (80063f0 <problem_fetch+0x4d8c>)
 80061ac:	461c      	mov	r4, r3
 80061ae:	4613      	mov	r3, r2
 80061b0:	cb07      	ldmia	r3!, {r0, r1, r2}
 80061b2:	6020      	str	r0, [r4, #0]
 80061b4:	6061      	str	r1, [r4, #4]
 80061b6:	60a2      	str	r2, [r4, #8]
 80061b8:	881b      	ldrh	r3, [r3, #0]
 80061ba:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"6,5,8,8,11,14,18");
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	3304      	adds	r3, #4
 80061c0:	4a8c      	ldr	r2, [pc, #560]	; (80063f4 <problem_fetch+0x4d90>)
 80061c2:	461d      	mov	r5, r3
 80061c4:	4614      	mov	r4, r2
 80061c6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80061c8:	6028      	str	r0, [r5, #0]
 80061ca:	6069      	str	r1, [r5, #4]
 80061cc:	60aa      	str	r2, [r5, #8]
 80061ce:	60eb      	str	r3, [r5, #12]
 80061d0:	7823      	ldrb	r3, [r4, #0]
 80061d2:	742b      	strb	r3, [r5, #16]
			strcpy(p->startFinish,"s,s,d,d,d,d,e");
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 80061da:	4a87      	ldr	r2, [pc, #540]	; (80063f8 <problem_fetch+0x4d94>)
 80061dc:	461c      	mov	r4, r3
 80061de:	4613      	mov	r3, r2
 80061e0:	cb07      	ldmia	r3!, {r0, r1, r2}
 80061e2:	6020      	str	r0, [r4, #0]
 80061e4:	6061      	str	r1, [r4, #4]
 80061e6:	60a2      	str	r2, [r4, #8]
 80061e8:	881b      	ldrh	r3, [r3, #0]
 80061ea:	81a3      	strh	r3, [r4, #12]
			break;
 80061ec:	f016 b96a 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 121 :
			strcpy(p->name,"INNSMOUTH HORROR");
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80061f6:	4a81      	ldr	r2, [pc, #516]	; (80063fc <problem_fetch+0x4d98>)
 80061f8:	461d      	mov	r5, r3
 80061fa:	4614      	mov	r4, r2
 80061fc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80061fe:	6028      	str	r0, [r5, #0]
 8006200:	6069      	str	r1, [r5, #4]
 8006202:	60aa      	str	r2, [r5, #8]
 8006204:	60eb      	str	r3, [r5, #12]
 8006206:	7823      	ldrb	r3, [r4, #0]
 8006208:	742b      	strb	r3, [r5, #16]
			strcpy(p->grade,"6B+");
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8006210:	4a7b      	ldr	r2, [pc, #492]	; (8006400 <problem_fetch+0x4d9c>)
 8006212:	6810      	ldr	r0, [r2, #0]
 8006214:	6018      	str	r0, [r3, #0]
			p->moveSize = 9;
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	2209      	movs	r2, #9
 800621a:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"C,E,F,E,G,E,I,I,E");
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	33a4      	adds	r3, #164	; 0xa4
 8006220:	4a78      	ldr	r2, [pc, #480]	; (8006404 <problem_fetch+0x4da0>)
 8006222:	461d      	mov	r5, r3
 8006224:	4614      	mov	r4, r2
 8006226:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006228:	6028      	str	r0, [r5, #0]
 800622a:	6069      	str	r1, [r5, #4]
 800622c:	60aa      	str	r2, [r5, #8]
 800622e:	60eb      	str	r3, [r5, #12]
 8006230:	8823      	ldrh	r3, [r4, #0]
 8006232:	822b      	strh	r3, [r5, #16]
			strcpy(p->moveNumbers,"5,8,11,12,14,16,18,7,6");
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	3304      	adds	r3, #4
 8006238:	4a73      	ldr	r2, [pc, #460]	; (8006408 <problem_fetch+0x4da4>)
 800623a:	461c      	mov	r4, r3
 800623c:	4615      	mov	r5, r2
 800623e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006240:	6020      	str	r0, [r4, #0]
 8006242:	6061      	str	r1, [r4, #4]
 8006244:	60a2      	str	r2, [r4, #8]
 8006246:	60e3      	str	r3, [r4, #12]
 8006248:	6828      	ldr	r0, [r5, #0]
 800624a:	6120      	str	r0, [r4, #16]
 800624c:	88ab      	ldrh	r3, [r5, #4]
 800624e:	79aa      	ldrb	r2, [r5, #6]
 8006250:	82a3      	strh	r3, [r4, #20]
 8006252:	4613      	mov	r3, r2
 8006254:	75a3      	strb	r3, [r4, #22]
			strcpy(p->startFinish,"s,d,d,d,d,d,e,d,s");
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800625c:	4a6b      	ldr	r2, [pc, #428]	; (800640c <problem_fetch+0x4da8>)
 800625e:	461d      	mov	r5, r3
 8006260:	4614      	mov	r4, r2
 8006262:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006264:	6028      	str	r0, [r5, #0]
 8006266:	6069      	str	r1, [r5, #4]
 8006268:	60aa      	str	r2, [r5, #8]
 800626a:	60eb      	str	r3, [r5, #12]
 800626c:	8823      	ldrh	r3, [r4, #0]
 800626e:	822b      	strh	r3, [r5, #16]
			break;
 8006270:	f016 b928 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 122 :
			strcpy(p->name,"PB AND JELLY");
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800627a:	4a65      	ldr	r2, [pc, #404]	; (8006410 <problem_fetch+0x4dac>)
 800627c:	461c      	mov	r4, r3
 800627e:	4613      	mov	r3, r2
 8006280:	cb07      	ldmia	r3!, {r0, r1, r2}
 8006282:	6020      	str	r0, [r4, #0]
 8006284:	6061      	str	r1, [r4, #4]
 8006286:	60a2      	str	r2, [r4, #8]
 8006288:	781b      	ldrb	r3, [r3, #0]
 800628a:	7323      	strb	r3, [r4, #12]
			strcpy(p->grade,"6C+");
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8006292:	4a56      	ldr	r2, [pc, #344]	; (80063ec <problem_fetch+0x4d88>)
 8006294:	6810      	ldr	r0, [r2, #0]
 8006296:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	2207      	movs	r2, #7
 800629c:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,E,I,E,H,I,D");
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	33a4      	adds	r3, #164	; 0xa4
 80062a2:	4a5c      	ldr	r2, [pc, #368]	; (8006414 <problem_fetch+0x4db0>)
 80062a4:	461c      	mov	r4, r3
 80062a6:	4613      	mov	r3, r2
 80062a8:	cb07      	ldmia	r3!, {r0, r1, r2}
 80062aa:	6020      	str	r0, [r4, #0]
 80062ac:	6061      	str	r1, [r4, #4]
 80062ae:	60a2      	str	r2, [r4, #8]
 80062b0:	881b      	ldrh	r3, [r3, #0]
 80062b2:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,8,10,14,12,14,18");
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	3304      	adds	r3, #4
 80062b8:	4a57      	ldr	r2, [pc, #348]	; (8006418 <problem_fetch+0x4db4>)
 80062ba:	461d      	mov	r5, r3
 80062bc:	4614      	mov	r4, r2
 80062be:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80062c0:	6028      	str	r0, [r5, #0]
 80062c2:	6069      	str	r1, [r5, #4]
 80062c4:	60aa      	str	r2, [r5, #8]
 80062c6:	60eb      	str	r3, [r5, #12]
 80062c8:	8823      	ldrh	r3, [r4, #0]
 80062ca:	78a2      	ldrb	r2, [r4, #2]
 80062cc:	822b      	strh	r3, [r5, #16]
 80062ce:	4613      	mov	r3, r2
 80062d0:	74ab      	strb	r3, [r5, #18]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 80062d8:	4a50      	ldr	r2, [pc, #320]	; (800641c <problem_fetch+0x4db8>)
 80062da:	461c      	mov	r4, r3
 80062dc:	4613      	mov	r3, r2
 80062de:	cb07      	ldmia	r3!, {r0, r1, r2}
 80062e0:	6020      	str	r0, [r4, #0]
 80062e2:	6061      	str	r1, [r4, #4]
 80062e4:	60a2      	str	r2, [r4, #8]
 80062e6:	881b      	ldrh	r3, [r3, #0]
 80062e8:	81a3      	strh	r3, [r4, #12]
			break;
 80062ea:	f016 b8eb 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 123 :
			strcpy(p->name,"APRITI");
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80062f4:	4a4a      	ldr	r2, [pc, #296]	; (8006420 <problem_fetch+0x4dbc>)
 80062f6:	6810      	ldr	r0, [r2, #0]
 80062f8:	6018      	str	r0, [r3, #0]
 80062fa:	8891      	ldrh	r1, [r2, #4]
 80062fc:	7992      	ldrb	r2, [r2, #6]
 80062fe:	8099      	strh	r1, [r3, #4]
 8006300:	719a      	strb	r2, [r3, #6]
			strcpy(p->grade,"6C");
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8006308:	4a46      	ldr	r2, [pc, #280]	; (8006424 <problem_fetch+0x4dc0>)
 800630a:	8811      	ldrh	r1, [r2, #0]
 800630c:	7892      	ldrb	r2, [r2, #2]
 800630e:	8019      	strh	r1, [r3, #0]
 8006310:	709a      	strb	r2, [r3, #2]
			p->moveSize = 8;
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	2208      	movs	r2, #8
 8006316:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"C,E,E,H,D,C,D,D");
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	33a4      	adds	r3, #164	; 0xa4
 800631c:	4a42      	ldr	r2, [pc, #264]	; (8006428 <problem_fetch+0x4dc4>)
 800631e:	461c      	mov	r4, r3
 8006320:	4615      	mov	r5, r2
 8006322:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006324:	6020      	str	r0, [r4, #0]
 8006326:	6061      	str	r1, [r4, #4]
 8006328:	60a2      	str	r2, [r4, #8]
 800632a:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,6,8,10,11,13,15,18");
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	3304      	adds	r3, #4
 8006330:	4a3e      	ldr	r2, [pc, #248]	; (800642c <problem_fetch+0x4dc8>)
 8006332:	461d      	mov	r5, r3
 8006334:	4614      	mov	r4, r2
 8006336:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006338:	6028      	str	r0, [r5, #0]
 800633a:	6069      	str	r1, [r5, #4]
 800633c:	60aa      	str	r2, [r5, #8]
 800633e:	60eb      	str	r3, [r5, #12]
 8006340:	6820      	ldr	r0, [r4, #0]
 8006342:	6128      	str	r0, [r5, #16]
 8006344:	7923      	ldrb	r3, [r4, #4]
 8006346:	752b      	strb	r3, [r5, #20]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,e");
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800634e:	4a38      	ldr	r2, [pc, #224]	; (8006430 <problem_fetch+0x4dcc>)
 8006350:	461c      	mov	r4, r3
 8006352:	4615      	mov	r5, r2
 8006354:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006356:	6020      	str	r0, [r4, #0]
 8006358:	6061      	str	r1, [r4, #4]
 800635a:	60a2      	str	r2, [r4, #8]
 800635c:	60e3      	str	r3, [r4, #12]
			break;
 800635e:	f016 b8b1 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 124 :
			strcpy(p->name,"LADYBUG DIRECT");
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8006368:	4a32      	ldr	r2, [pc, #200]	; (8006434 <problem_fetch+0x4dd0>)
 800636a:	461c      	mov	r4, r3
 800636c:	4613      	mov	r3, r2
 800636e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8006370:	6020      	str	r0, [r4, #0]
 8006372:	6061      	str	r1, [r4, #4]
 8006374:	60a2      	str	r2, [r4, #8]
 8006376:	881a      	ldrh	r2, [r3, #0]
 8006378:	789b      	ldrb	r3, [r3, #2]
 800637a:	81a2      	strh	r2, [r4, #12]
 800637c:	73a3      	strb	r3, [r4, #14]
			strcpy(p->grade,"7A+");
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8006384:	4a2c      	ldr	r2, [pc, #176]	; (8006438 <problem_fetch+0x4dd4>)
 8006386:	6810      	ldr	r0, [r2, #0]
 8006388:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	2206      	movs	r2, #6
 800638e:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,J,H,C,D,A");
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	33a4      	adds	r3, #164	; 0xa4
 8006394:	4a29      	ldr	r2, [pc, #164]	; (800643c <problem_fetch+0x4dd8>)
 8006396:	461c      	mov	r4, r3
 8006398:	4613      	mov	r3, r2
 800639a:	cb07      	ldmia	r3!, {r0, r1, r2}
 800639c:	6020      	str	r0, [r4, #0]
 800639e:	6061      	str	r1, [r4, #4]
 80063a0:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"6,5,10,13,18,9");
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	3304      	adds	r3, #4
 80063a6:	4a26      	ldr	r2, [pc, #152]	; (8006440 <problem_fetch+0x4ddc>)
 80063a8:	461c      	mov	r4, r3
 80063aa:	4613      	mov	r3, r2
 80063ac:	cb07      	ldmia	r3!, {r0, r1, r2}
 80063ae:	6020      	str	r0, [r4, #0]
 80063b0:	6061      	str	r1, [r4, #4]
 80063b2:	60a2      	str	r2, [r4, #8]
 80063b4:	881a      	ldrh	r2, [r3, #0]
 80063b6:	789b      	ldrb	r3, [r3, #2]
 80063b8:	81a2      	strh	r2, [r4, #12]
 80063ba:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish,"s,s,d,d,e,d");
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 80063c2:	4a20      	ldr	r2, [pc, #128]	; (8006444 <problem_fetch+0x4de0>)
 80063c4:	461c      	mov	r4, r3
 80063c6:	4613      	mov	r3, r2
 80063c8:	cb07      	ldmia	r3!, {r0, r1, r2}
 80063ca:	6020      	str	r0, [r4, #0]
 80063cc:	6061      	str	r1, [r4, #4]
 80063ce:	60a2      	str	r2, [r4, #8]
			break;
 80063d0:	f016 b878 	b.w	801c4c4 <problem_fetch+0x1ae60>
 80063d4:	08025378 	.word	0x08025378
 80063d8:	08023ae4 	.word	0x08023ae4
 80063dc:	08025384 	.word	0x08025384
 80063e0:	08025390 	.word	0x08025390
 80063e4:	080253a0 	.word	0x080253a0
 80063e8:	080253ac 	.word	0x080253ac
 80063ec:	08023bbc 	.word	0x08023bbc
 80063f0:	080253c0 	.word	0x080253c0
 80063f4:	080253d0 	.word	0x080253d0
 80063f8:	08023b9c 	.word	0x08023b9c
 80063fc:	080253e4 	.word	0x080253e4
 8006400:	08023b24 	.word	0x08023b24
 8006404:	080253f8 	.word	0x080253f8
 8006408:	0802540c 	.word	0x0802540c
 800640c:	08025424 	.word	0x08025424
 8006410:	08025438 	.word	0x08025438
 8006414:	08025448 	.word	0x08025448
 8006418:	08025458 	.word	0x08025458
 800641c:	08023cac 	.word	0x08023cac
 8006420:	0802546c 	.word	0x0802546c
 8006424:	08023bf0 	.word	0x08023bf0
 8006428:	08025474 	.word	0x08025474
 800642c:	08025484 	.word	0x08025484
 8006430:	08023c48 	.word	0x08023c48
 8006434:	0802549c 	.word	0x0802549c
 8006438:	08023cc4 	.word	0x08023cc4
 800643c:	080254ac 	.word	0x080254ac
 8006440:	080254b8 	.word	0x080254b8
 8006444:	080254c8 	.word	0x080254c8
		case 125 :
			strcpy(p->name,"CATA");
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800644e:	4abf      	ldr	r2, [pc, #764]	; (800674c <problem_fetch+0x50e8>)
 8006450:	6810      	ldr	r0, [r2, #0]
 8006452:	6018      	str	r0, [r3, #0]
 8006454:	7912      	ldrb	r2, [r2, #4]
 8006456:	711a      	strb	r2, [r3, #4]
			strcpy(p->grade,"7A+");
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800645e:	4abc      	ldr	r2, [pc, #752]	; (8006750 <problem_fetch+0x50ec>)
 8006460:	6810      	ldr	r0, [r2, #0]
 8006462:	6018      	str	r0, [r3, #0]
			p->moveSize = 5;
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	2205      	movs	r2, #5
 8006468:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,J,F,A,D");
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	33a4      	adds	r3, #164	; 0xa4
 800646e:	49b9      	ldr	r1, [pc, #740]	; (8006754 <problem_fetch+0x50f0>)
 8006470:	461a      	mov	r2, r3
 8006472:	460b      	mov	r3, r1
 8006474:	cb03      	ldmia	r3!, {r0, r1}
 8006476:	6010      	str	r0, [r2, #0]
 8006478:	6051      	str	r1, [r2, #4]
 800647a:	881b      	ldrh	r3, [r3, #0]
 800647c:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"6,7,11,14,18");
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	3304      	adds	r3, #4
 8006482:	4ab5      	ldr	r2, [pc, #724]	; (8006758 <problem_fetch+0x50f4>)
 8006484:	461c      	mov	r4, r3
 8006486:	4613      	mov	r3, r2
 8006488:	cb07      	ldmia	r3!, {r0, r1, r2}
 800648a:	6020      	str	r0, [r4, #0]
 800648c:	6061      	str	r1, [r4, #4]
 800648e:	60a2      	str	r2, [r4, #8]
 8006490:	781b      	ldrb	r3, [r3, #0]
 8006492:	7323      	strb	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,e");
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800649a:	49b0      	ldr	r1, [pc, #704]	; (800675c <problem_fetch+0x50f8>)
 800649c:	461a      	mov	r2, r3
 800649e:	460b      	mov	r3, r1
 80064a0:	cb03      	ldmia	r3!, {r0, r1}
 80064a2:	6010      	str	r0, [r2, #0]
 80064a4:	6051      	str	r1, [r2, #4]
 80064a6:	881b      	ldrh	r3, [r3, #0]
 80064a8:	8113      	strh	r3, [r2, #8]
			break;
 80064aa:	f016 b80b 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 126 :
			strcpy(p->name,"TRØNDERSPOTT");
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80064b4:	4aaa      	ldr	r2, [pc, #680]	; (8006760 <problem_fetch+0x50fc>)
 80064b6:	461c      	mov	r4, r3
 80064b8:	4613      	mov	r3, r2
 80064ba:	cb07      	ldmia	r3!, {r0, r1, r2}
 80064bc:	6020      	str	r0, [r4, #0]
 80064be:	6061      	str	r1, [r4, #4]
 80064c0:	60a2      	str	r2, [r4, #8]
 80064c2:	881b      	ldrh	r3, [r3, #0]
 80064c4:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade,"6B+");
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80064cc:	4aa5      	ldr	r2, [pc, #660]	; (8006764 <problem_fetch+0x5100>)
 80064ce:	6810      	ldr	r0, [r2, #0]
 80064d0:	6018      	str	r0, [r3, #0]
			p->moveSize = 5;
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	2205      	movs	r2, #5
 80064d6:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,E,H,C,D");
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	33a4      	adds	r3, #164	; 0xa4
 80064dc:	49a2      	ldr	r1, [pc, #648]	; (8006768 <problem_fetch+0x5104>)
 80064de:	461a      	mov	r2, r3
 80064e0:	460b      	mov	r3, r1
 80064e2:	cb03      	ldmia	r3!, {r0, r1}
 80064e4:	6010      	str	r0, [r2, #0]
 80064e6:	6051      	str	r1, [r2, #4]
 80064e8:	881b      	ldrh	r3, [r3, #0]
 80064ea:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"4,6,10,13,18");
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	3304      	adds	r3, #4
 80064f0:	4a9e      	ldr	r2, [pc, #632]	; (800676c <problem_fetch+0x5108>)
 80064f2:	461c      	mov	r4, r3
 80064f4:	4613      	mov	r3, r2
 80064f6:	cb07      	ldmia	r3!, {r0, r1, r2}
 80064f8:	6020      	str	r0, [r4, #0]
 80064fa:	6061      	str	r1, [r4, #4]
 80064fc:	60a2      	str	r2, [r4, #8]
 80064fe:	781b      	ldrb	r3, [r3, #0]
 8006500:	7323      	strb	r3, [r4, #12]
			strcpy(p->startFinish,"s,s,d,d,e");
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8006508:	4999      	ldr	r1, [pc, #612]	; (8006770 <problem_fetch+0x510c>)
 800650a:	461a      	mov	r2, r3
 800650c:	460b      	mov	r3, r1
 800650e:	cb03      	ldmia	r3!, {r0, r1}
 8006510:	6010      	str	r0, [r2, #0]
 8006512:	6051      	str	r1, [r2, #4]
 8006514:	881b      	ldrh	r3, [r3, #0]
 8006516:	8113      	strh	r3, [r2, #8]
			break;
 8006518:	f015 bfd4 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 127 :
			strcpy(p->name,"RYEBREAD");
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8006522:	4994      	ldr	r1, [pc, #592]	; (8006774 <problem_fetch+0x5110>)
 8006524:	461a      	mov	r2, r3
 8006526:	460b      	mov	r3, r1
 8006528:	cb03      	ldmia	r3!, {r0, r1}
 800652a:	6010      	str	r0, [r2, #0]
 800652c:	6051      	str	r1, [r2, #4]
 800652e:	781b      	ldrb	r3, [r3, #0]
 8006530:	7213      	strb	r3, [r2, #8]
			strcpy(p->grade,"7C+");
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8006538:	4a8f      	ldr	r2, [pc, #572]	; (8006778 <problem_fetch+0x5114>)
 800653a:	6810      	ldr	r0, [r2, #0]
 800653c:	6018      	str	r0, [r3, #0]
			p->moveSize = 5;
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	2205      	movs	r2, #5
 8006542:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,F,C,A,A");
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	33a4      	adds	r3, #164	; 0xa4
 8006548:	498c      	ldr	r1, [pc, #560]	; (800677c <problem_fetch+0x5118>)
 800654a:	461a      	mov	r2, r3
 800654c:	460b      	mov	r3, r1
 800654e:	cb03      	ldmia	r3!, {r0, r1}
 8006550:	6010      	str	r0, [r2, #0]
 8006552:	6051      	str	r1, [r2, #4]
 8006554:	881b      	ldrh	r3, [r3, #0]
 8006556:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"4,11,5,14,18");
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	3304      	adds	r3, #4
 800655c:	4a88      	ldr	r2, [pc, #544]	; (8006780 <problem_fetch+0x511c>)
 800655e:	461c      	mov	r4, r3
 8006560:	4613      	mov	r3, r2
 8006562:	cb07      	ldmia	r3!, {r0, r1, r2}
 8006564:	6020      	str	r0, [r4, #0]
 8006566:	6061      	str	r1, [r4, #4]
 8006568:	60a2      	str	r2, [r4, #8]
 800656a:	781b      	ldrb	r3, [r3, #0]
 800656c:	7323      	strb	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,e");
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8006574:	4979      	ldr	r1, [pc, #484]	; (800675c <problem_fetch+0x50f8>)
 8006576:	461a      	mov	r2, r3
 8006578:	460b      	mov	r3, r1
 800657a:	cb03      	ldmia	r3!, {r0, r1}
 800657c:	6010      	str	r0, [r2, #0]
 800657e:	6051      	str	r1, [r2, #4]
 8006580:	881b      	ldrh	r3, [r3, #0]
 8006582:	8113      	strh	r3, [r2, #8]
			break;
 8006584:	f015 bf9e 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 128 :
			strcpy(p->name,"SUPE");
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800658e:	4a7d      	ldr	r2, [pc, #500]	; (8006784 <problem_fetch+0x5120>)
 8006590:	6810      	ldr	r0, [r2, #0]
 8006592:	6018      	str	r0, [r3, #0]
 8006594:	7912      	ldrb	r2, [r2, #4]
 8006596:	711a      	strb	r2, [r3, #4]
			strcpy(p->grade,"6C+");
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800659e:	4a7a      	ldr	r2, [pc, #488]	; (8006788 <problem_fetch+0x5124>)
 80065a0:	6810      	ldr	r0, [r2, #0]
 80065a2:	6018      	str	r0, [r3, #0]
			p->moveSize = 8;
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	2208      	movs	r2, #8
 80065a8:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,I,G,G,C,G,E,I");
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	33a4      	adds	r3, #164	; 0xa4
 80065ae:	4a77      	ldr	r2, [pc, #476]	; (800678c <problem_fetch+0x5128>)
 80065b0:	461c      	mov	r4, r3
 80065b2:	4615      	mov	r5, r2
 80065b4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80065b6:	6020      	str	r0, [r4, #0]
 80065b8:	6061      	str	r1, [r4, #4]
 80065ba:	60a2      	str	r2, [r4, #8]
 80065bc:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,7,6,10,13,14,16,18");
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	3304      	adds	r3, #4
 80065c2:	4a73      	ldr	r2, [pc, #460]	; (8006790 <problem_fetch+0x512c>)
 80065c4:	461d      	mov	r5, r3
 80065c6:	4614      	mov	r4, r2
 80065c8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80065ca:	6028      	str	r0, [r5, #0]
 80065cc:	6069      	str	r1, [r5, #4]
 80065ce:	60aa      	str	r2, [r5, #8]
 80065d0:	60eb      	str	r3, [r5, #12]
 80065d2:	6820      	ldr	r0, [r4, #0]
 80065d4:	6128      	str	r0, [r5, #16]
 80065d6:	7923      	ldrb	r3, [r4, #4]
 80065d8:	752b      	strb	r3, [r5, #20]
			strcpy(p->startFinish,"s,d,d,d,d,d,d,e");
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 80065e0:	4a6c      	ldr	r2, [pc, #432]	; (8006794 <problem_fetch+0x5130>)
 80065e2:	461c      	mov	r4, r3
 80065e4:	4615      	mov	r5, r2
 80065e6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80065e8:	6020      	str	r0, [r4, #0]
 80065ea:	6061      	str	r1, [r4, #4]
 80065ec:	60a2      	str	r2, [r4, #8]
 80065ee:	60e3      	str	r3, [r4, #12]
			break;
 80065f0:	f015 bf68 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 129 :
			strcpy(p->name,"LONG BOI 2");
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80065fa:	4967      	ldr	r1, [pc, #412]	; (8006798 <problem_fetch+0x5134>)
 80065fc:	461a      	mov	r2, r3
 80065fe:	460b      	mov	r3, r1
 8006600:	cb03      	ldmia	r3!, {r0, r1}
 8006602:	6010      	str	r0, [r2, #0]
 8006604:	6051      	str	r1, [r2, #4]
 8006606:	8819      	ldrh	r1, [r3, #0]
 8006608:	789b      	ldrb	r3, [r3, #2]
 800660a:	8111      	strh	r1, [r2, #8]
 800660c:	7293      	strb	r3, [r2, #10]
			strcpy(p->grade,"7A+");
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8006614:	4a4e      	ldr	r2, [pc, #312]	; (8006750 <problem_fetch+0x50ec>)
 8006616:	6810      	ldr	r0, [r2, #0]
 8006618:	6018      	str	r0, [r3, #0]
			p->moveSize = 4;
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	2204      	movs	r2, #4
 800661e:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"E,H,G,I");
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	33a4      	adds	r3, #164	; 0xa4
 8006624:	495d      	ldr	r1, [pc, #372]	; (800679c <problem_fetch+0x5138>)
 8006626:	461a      	mov	r2, r3
 8006628:	460b      	mov	r3, r1
 800662a:	cb03      	ldmia	r3!, {r0, r1}
 800662c:	6010      	str	r0, [r2, #0]
 800662e:	6051      	str	r1, [r2, #4]
			strcpy(p->moveNumbers,"6,10,15,18");
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	3304      	adds	r3, #4
 8006634:	495a      	ldr	r1, [pc, #360]	; (80067a0 <problem_fetch+0x513c>)
 8006636:	461a      	mov	r2, r3
 8006638:	460b      	mov	r3, r1
 800663a:	cb03      	ldmia	r3!, {r0, r1}
 800663c:	6010      	str	r0, [r2, #0]
 800663e:	6051      	str	r1, [r2, #4]
 8006640:	8819      	ldrh	r1, [r3, #0]
 8006642:	789b      	ldrb	r3, [r3, #2]
 8006644:	8111      	strh	r1, [r2, #8]
 8006646:	7293      	strb	r3, [r2, #10]
			strcpy(p->startFinish,"s,d,d,e");
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800664e:	4955      	ldr	r1, [pc, #340]	; (80067a4 <problem_fetch+0x5140>)
 8006650:	461a      	mov	r2, r3
 8006652:	460b      	mov	r3, r1
 8006654:	cb03      	ldmia	r3!, {r0, r1}
 8006656:	6010      	str	r0, [r2, #0]
 8006658:	6051      	str	r1, [r2, #4]
			break;
 800665a:	f015 bf33 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 130 :
			strcpy(p->name,"PHILLING SHIFTS");
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8006664:	4a50      	ldr	r2, [pc, #320]	; (80067a8 <problem_fetch+0x5144>)
 8006666:	461c      	mov	r4, r3
 8006668:	4615      	mov	r5, r2
 800666a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800666c:	6020      	str	r0, [r4, #0]
 800666e:	6061      	str	r1, [r4, #4]
 8006670:	60a2      	str	r2, [r4, #8]
 8006672:	60e3      	str	r3, [r4, #12]
			strcpy(p->grade,"7C");
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800667a:	4a4c      	ldr	r2, [pc, #304]	; (80067ac <problem_fetch+0x5148>)
 800667c:	8811      	ldrh	r1, [r2, #0]
 800667e:	7892      	ldrb	r2, [r2, #2]
 8006680:	8019      	strh	r1, [r3, #0]
 8006682:	709a      	strb	r2, [r3, #2]
			p->moveSize = 7;
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	2207      	movs	r2, #7
 8006688:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"A,D,E,J,H,K,G");
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	33a4      	adds	r3, #164	; 0xa4
 800668e:	4a48      	ldr	r2, [pc, #288]	; (80067b0 <problem_fetch+0x514c>)
 8006690:	461c      	mov	r4, r3
 8006692:	4613      	mov	r3, r2
 8006694:	cb07      	ldmia	r3!, {r0, r1, r2}
 8006696:	6020      	str	r0, [r4, #0]
 8006698:	6061      	str	r1, [r4, #4]
 800669a:	60a2      	str	r2, [r4, #8]
 800669c:	881b      	ldrh	r3, [r3, #0]
 800669e:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"18,18,14,12,8,9,4");
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	3304      	adds	r3, #4
 80066a4:	4a43      	ldr	r2, [pc, #268]	; (80067b4 <problem_fetch+0x5150>)
 80066a6:	461d      	mov	r5, r3
 80066a8:	4614      	mov	r4, r2
 80066aa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80066ac:	6028      	str	r0, [r5, #0]
 80066ae:	6069      	str	r1, [r5, #4]
 80066b0:	60aa      	str	r2, [r5, #8]
 80066b2:	60eb      	str	r3, [r5, #12]
 80066b4:	8823      	ldrh	r3, [r4, #0]
 80066b6:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"e,e,d,d,d,d,s");
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 80066be:	4a3e      	ldr	r2, [pc, #248]	; (80067b8 <problem_fetch+0x5154>)
 80066c0:	461c      	mov	r4, r3
 80066c2:	4613      	mov	r3, r2
 80066c4:	cb07      	ldmia	r3!, {r0, r1, r2}
 80066c6:	6020      	str	r0, [r4, #0]
 80066c8:	6061      	str	r1, [r4, #4]
 80066ca:	60a2      	str	r2, [r4, #8]
 80066cc:	881b      	ldrh	r3, [r3, #0]
 80066ce:	81a3      	strh	r3, [r4, #12]
			break;
 80066d0:	f015 bef8 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 131 :
			strcpy(p->name,"HOJAR KLUBBEN");
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80066da:	4a38      	ldr	r2, [pc, #224]	; (80067bc <problem_fetch+0x5158>)
 80066dc:	461c      	mov	r4, r3
 80066de:	4613      	mov	r3, r2
 80066e0:	cb07      	ldmia	r3!, {r0, r1, r2}
 80066e2:	6020      	str	r0, [r4, #0]
 80066e4:	6061      	str	r1, [r4, #4]
 80066e6:	60a2      	str	r2, [r4, #8]
 80066e8:	881b      	ldrh	r3, [r3, #0]
 80066ea:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade,"7B");
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80066f2:	4a33      	ldr	r2, [pc, #204]	; (80067c0 <problem_fetch+0x515c>)
 80066f4:	8811      	ldrh	r1, [r2, #0]
 80066f6:	7892      	ldrb	r2, [r2, #2]
 80066f8:	8019      	strh	r1, [r3, #0]
 80066fa:	709a      	strb	r2, [r3, #2]
			p->moveSize = 7;
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	2207      	movs	r2, #7
 8006700:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"E,H,J,G,H,G,I");
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	33a4      	adds	r3, #164	; 0xa4
 8006706:	4a2f      	ldr	r2, [pc, #188]	; (80067c4 <problem_fetch+0x5160>)
 8006708:	461c      	mov	r4, r3
 800670a:	4613      	mov	r3, r2
 800670c:	cb07      	ldmia	r3!, {r0, r1, r2}
 800670e:	6020      	str	r0, [r4, #0]
 8006710:	6061      	str	r1, [r4, #4]
 8006712:	60a2      	str	r2, [r4, #8]
 8006714:	881b      	ldrh	r3, [r3, #0]
 8006716:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"6,10,13,15,16,17,18");
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	3304      	adds	r3, #4
 800671c:	4a2a      	ldr	r2, [pc, #168]	; (80067c8 <problem_fetch+0x5164>)
 800671e:	461d      	mov	r5, r3
 8006720:	4614      	mov	r4, r2
 8006722:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006724:	6028      	str	r0, [r5, #0]
 8006726:	6069      	str	r1, [r5, #4]
 8006728:	60aa      	str	r2, [r5, #8]
 800672a:	60eb      	str	r3, [r5, #12]
 800672c:	6820      	ldr	r0, [r4, #0]
 800672e:	6128      	str	r0, [r5, #16]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8006736:	4a25      	ldr	r2, [pc, #148]	; (80067cc <problem_fetch+0x5168>)
 8006738:	461c      	mov	r4, r3
 800673a:	4613      	mov	r3, r2
 800673c:	cb07      	ldmia	r3!, {r0, r1, r2}
 800673e:	6020      	str	r0, [r4, #0]
 8006740:	6061      	str	r1, [r4, #4]
 8006742:	60a2      	str	r2, [r4, #8]
 8006744:	881b      	ldrh	r3, [r3, #0]
 8006746:	81a3      	strh	r3, [r4, #12]
			break;
 8006748:	f015 bebc 	b.w	801c4c4 <problem_fetch+0x1ae60>
 800674c:	080254d4 	.word	0x080254d4
 8006750:	08023cc4 	.word	0x08023cc4
 8006754:	080254dc 	.word	0x080254dc
 8006758:	080254e8 	.word	0x080254e8
 800675c:	08023ff0 	.word	0x08023ff0
 8006760:	080254f8 	.word	0x080254f8
 8006764:	08023b24 	.word	0x08023b24
 8006768:	08025508 	.word	0x08025508
 800676c:	08025514 	.word	0x08025514
 8006770:	08024204 	.word	0x08024204
 8006774:	08025524 	.word	0x08025524
 8006778:	08024130 	.word	0x08024130
 800677c:	08025530 	.word	0x08025530
 8006780:	0802553c 	.word	0x0802553c
 8006784:	0802554c 	.word	0x0802554c
 8006788:	08023bbc 	.word	0x08023bbc
 800678c:	08025554 	.word	0x08025554
 8006790:	08025564 	.word	0x08025564
 8006794:	08023d34 	.word	0x08023d34
 8006798:	0802557c 	.word	0x0802557c
 800679c:	08025588 	.word	0x08025588
 80067a0:	08025590 	.word	0x08025590
 80067a4:	08023c78 	.word	0x08023c78
 80067a8:	0802559c 	.word	0x0802559c
 80067ac:	08024358 	.word	0x08024358
 80067b0:	080255ac 	.word	0x080255ac
 80067b4:	080255bc 	.word	0x080255bc
 80067b8:	080255d0 	.word	0x080255d0
 80067bc:	080255e0 	.word	0x080255e0
 80067c0:	0802421c 	.word	0x0802421c
 80067c4:	080255f0 	.word	0x080255f0
 80067c8:	08025600 	.word	0x08025600
 80067cc:	08023cac 	.word	0x08023cac
		case 132 :
			strcpy(p->name,"TRIP4");
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80067d6:	4ac3      	ldr	r2, [pc, #780]	; (8006ae4 <problem_fetch+0x5480>)
 80067d8:	6810      	ldr	r0, [r2, #0]
 80067da:	6018      	str	r0, [r3, #0]
 80067dc:	8892      	ldrh	r2, [r2, #4]
 80067de:	809a      	strh	r2, [r3, #4]
			strcpy(p->grade,"7C+");
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80067e6:	4ac0      	ldr	r2, [pc, #768]	; (8006ae8 <problem_fetch+0x5484>)
 80067e8:	6810      	ldr	r0, [r2, #0]
 80067ea:	6018      	str	r0, [r3, #0]
			p->moveSize = 9;
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	2209      	movs	r2, #9
 80067f0:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"H,J,K,J,H,D,D,I,D");
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	33a4      	adds	r3, #164	; 0xa4
 80067f6:	4abd      	ldr	r2, [pc, #756]	; (8006aec <problem_fetch+0x5488>)
 80067f8:	461d      	mov	r5, r3
 80067fa:	4614      	mov	r4, r2
 80067fc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80067fe:	6028      	str	r0, [r5, #0]
 8006800:	6069      	str	r1, [r5, #4]
 8006802:	60aa      	str	r2, [r5, #8]
 8006804:	60eb      	str	r3, [r5, #12]
 8006806:	8823      	ldrh	r3, [r4, #0]
 8006808:	822b      	strh	r3, [r5, #16]
			strcpy(p->moveNumbers,"5,5,9,13,12,11,7,7,18");
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	3304      	adds	r3, #4
 800680e:	4ab8      	ldr	r2, [pc, #736]	; (8006af0 <problem_fetch+0x548c>)
 8006810:	461d      	mov	r5, r3
 8006812:	4614      	mov	r4, r2
 8006814:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006816:	6028      	str	r0, [r5, #0]
 8006818:	6069      	str	r1, [r5, #4]
 800681a:	60aa      	str	r2, [r5, #8]
 800681c:	60eb      	str	r3, [r5, #12]
 800681e:	6820      	ldr	r0, [r4, #0]
 8006820:	6128      	str	r0, [r5, #16]
 8006822:	88a3      	ldrh	r3, [r4, #4]
 8006824:	82ab      	strh	r3, [r5, #20]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,d,e");
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800682c:	4ab1      	ldr	r2, [pc, #708]	; (8006af4 <problem_fetch+0x5490>)
 800682e:	461d      	mov	r5, r3
 8006830:	4614      	mov	r4, r2
 8006832:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006834:	6028      	str	r0, [r5, #0]
 8006836:	6069      	str	r1, [r5, #4]
 8006838:	60aa      	str	r2, [r5, #8]
 800683a:	60eb      	str	r3, [r5, #12]
 800683c:	8823      	ldrh	r3, [r4, #0]
 800683e:	822b      	strh	r3, [r5, #16]
			break;
 8006840:	f015 be40 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 133 :
			strcpy(p->name,"TRIP3");
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800684a:	4aab      	ldr	r2, [pc, #684]	; (8006af8 <problem_fetch+0x5494>)
 800684c:	6810      	ldr	r0, [r2, #0]
 800684e:	6018      	str	r0, [r3, #0]
 8006850:	8892      	ldrh	r2, [r2, #4]
 8006852:	809a      	strh	r2, [r3, #4]
			strcpy(p->grade,"7A+");
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800685a:	4aa8      	ldr	r2, [pc, #672]	; (8006afc <problem_fetch+0x5498>)
 800685c:	6810      	ldr	r0, [r2, #0]
 800685e:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	2206      	movs	r2, #6
 8006864:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"E,E,B,C,C,D");
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	33a4      	adds	r3, #164	; 0xa4
 800686a:	4aa5      	ldr	r2, [pc, #660]	; (8006b00 <problem_fetch+0x549c>)
 800686c:	461c      	mov	r4, r3
 800686e:	4613      	mov	r3, r2
 8006870:	cb07      	ldmia	r3!, {r0, r1, r2}
 8006872:	6020      	str	r0, [r4, #0]
 8006874:	6061      	str	r1, [r4, #4]
 8006876:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"12,6,10,8,5,18");
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	3304      	adds	r3, #4
 800687c:	4aa1      	ldr	r2, [pc, #644]	; (8006b04 <problem_fetch+0x54a0>)
 800687e:	461c      	mov	r4, r3
 8006880:	4613      	mov	r3, r2
 8006882:	cb07      	ldmia	r3!, {r0, r1, r2}
 8006884:	6020      	str	r0, [r4, #0]
 8006886:	6061      	str	r1, [r4, #4]
 8006888:	60a2      	str	r2, [r4, #8]
 800688a:	881a      	ldrh	r2, [r3, #0]
 800688c:	789b      	ldrb	r3, [r3, #2]
 800688e:	81a2      	strh	r2, [r4, #12]
 8006890:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish,"d,s,d,d,s,e");
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8006898:	4a9b      	ldr	r2, [pc, #620]	; (8006b08 <problem_fetch+0x54a4>)
 800689a:	461c      	mov	r4, r3
 800689c:	4613      	mov	r3, r2
 800689e:	cb07      	ldmia	r3!, {r0, r1, r2}
 80068a0:	6020      	str	r0, [r4, #0]
 80068a2:	6061      	str	r1, [r4, #4]
 80068a4:	60a2      	str	r2, [r4, #8]
			break;
 80068a6:	f015 be0d 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 134 :
			strcpy(p->name,"LEVITATOR MUSIC");
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80068b0:	4a96      	ldr	r2, [pc, #600]	; (8006b0c <problem_fetch+0x54a8>)
 80068b2:	461c      	mov	r4, r3
 80068b4:	4615      	mov	r5, r2
 80068b6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80068b8:	6020      	str	r0, [r4, #0]
 80068ba:	6061      	str	r1, [r4, #4]
 80068bc:	60a2      	str	r2, [r4, #8]
 80068be:	60e3      	str	r3, [r4, #12]
			strcpy(p->grade,"7A+");
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80068c6:	4a8d      	ldr	r2, [pc, #564]	; (8006afc <problem_fetch+0x5498>)
 80068c8:	6810      	ldr	r0, [r2, #0]
 80068ca:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	2207      	movs	r2, #7
 80068d0:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,A,A,F,K,J,I");
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	33a4      	adds	r3, #164	; 0xa4
 80068d6:	4a8e      	ldr	r2, [pc, #568]	; (8006b10 <problem_fetch+0x54ac>)
 80068d8:	461c      	mov	r4, r3
 80068da:	4613      	mov	r3, r2
 80068dc:	cb07      	ldmia	r3!, {r0, r1, r2}
 80068de:	6020      	str	r0, [r4, #0]
 80068e0:	6061      	str	r1, [r4, #4]
 80068e2:	60a2      	str	r2, [r4, #8]
 80068e4:	881b      	ldrh	r3, [r3, #0]
 80068e6:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"14,14,18,11,9,5,7");
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	3304      	adds	r3, #4
 80068ec:	4a89      	ldr	r2, [pc, #548]	; (8006b14 <problem_fetch+0x54b0>)
 80068ee:	461d      	mov	r5, r3
 80068f0:	4614      	mov	r4, r2
 80068f2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80068f4:	6028      	str	r0, [r5, #0]
 80068f6:	6069      	str	r1, [r5, #4]
 80068f8:	60aa      	str	r2, [r5, #8]
 80068fa:	60eb      	str	r3, [r5, #12]
 80068fc:	8823      	ldrh	r3, [r4, #0]
 80068fe:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"d,d,e,d,d,s,d");
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8006906:	4a84      	ldr	r2, [pc, #528]	; (8006b18 <problem_fetch+0x54b4>)
 8006908:	461c      	mov	r4, r3
 800690a:	4613      	mov	r3, r2
 800690c:	cb07      	ldmia	r3!, {r0, r1, r2}
 800690e:	6020      	str	r0, [r4, #0]
 8006910:	6061      	str	r1, [r4, #4]
 8006912:	60a2      	str	r2, [r4, #8]
 8006914:	881b      	ldrh	r3, [r3, #0]
 8006916:	81a3      	strh	r3, [r4, #12]
			break;
 8006918:	f015 bdd4 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 135 :
			strcpy(p->name,"ELEVATOR MUSIC");
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8006922:	4a7e      	ldr	r2, [pc, #504]	; (8006b1c <problem_fetch+0x54b8>)
 8006924:	461c      	mov	r4, r3
 8006926:	4613      	mov	r3, r2
 8006928:	cb07      	ldmia	r3!, {r0, r1, r2}
 800692a:	6020      	str	r0, [r4, #0]
 800692c:	6061      	str	r1, [r4, #4]
 800692e:	60a2      	str	r2, [r4, #8]
 8006930:	881a      	ldrh	r2, [r3, #0]
 8006932:	789b      	ldrb	r3, [r3, #2]
 8006934:	81a2      	strh	r2, [r4, #12]
 8006936:	73a3      	strb	r3, [r4, #14]
			strcpy(p->grade,"7A");
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800693e:	4a78      	ldr	r2, [pc, #480]	; (8006b20 <problem_fetch+0x54bc>)
 8006940:	8811      	ldrh	r1, [r2, #0]
 8006942:	7892      	ldrb	r2, [r2, #2]
 8006944:	8019      	strh	r1, [r3, #0]
 8006946:	709a      	strb	r2, [r3, #2]
			p->moveSize = 6;
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	2206      	movs	r2, #6
 800694c:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"D,G,K,J,F,I");
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	33a4      	adds	r3, #164	; 0xa4
 8006952:	4a74      	ldr	r2, [pc, #464]	; (8006b24 <problem_fetch+0x54c0>)
 8006954:	461c      	mov	r4, r3
 8006956:	4613      	mov	r3, r2
 8006958:	cb07      	ldmia	r3!, {r0, r1, r2}
 800695a:	6020      	str	r0, [r4, #0]
 800695c:	6061      	str	r1, [r4, #4]
 800695e:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"18,14,9,5,11,7");
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	3304      	adds	r3, #4
 8006964:	4a70      	ldr	r2, [pc, #448]	; (8006b28 <problem_fetch+0x54c4>)
 8006966:	461c      	mov	r4, r3
 8006968:	4613      	mov	r3, r2
 800696a:	cb07      	ldmia	r3!, {r0, r1, r2}
 800696c:	6020      	str	r0, [r4, #0]
 800696e:	6061      	str	r1, [r4, #4]
 8006970:	60a2      	str	r2, [r4, #8]
 8006972:	881a      	ldrh	r2, [r3, #0]
 8006974:	789b      	ldrb	r3, [r3, #2]
 8006976:	81a2      	strh	r2, [r4, #12]
 8006978:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish,"e,d,d,s,d,d");
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8006980:	4a6a      	ldr	r2, [pc, #424]	; (8006b2c <problem_fetch+0x54c8>)
 8006982:	461c      	mov	r4, r3
 8006984:	4613      	mov	r3, r2
 8006986:	cb07      	ldmia	r3!, {r0, r1, r2}
 8006988:	6020      	str	r0, [r4, #0]
 800698a:	6061      	str	r1, [r4, #4]
 800698c:	60a2      	str	r2, [r4, #8]
			break;
 800698e:	f015 bd99 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 136 :
			strcpy(p->name,"POPPED A XAN-DON");
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8006998:	4a65      	ldr	r2, [pc, #404]	; (8006b30 <problem_fetch+0x54cc>)
 800699a:	461d      	mov	r5, r3
 800699c:	4614      	mov	r4, r2
 800699e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80069a0:	6028      	str	r0, [r5, #0]
 80069a2:	6069      	str	r1, [r5, #4]
 80069a4:	60aa      	str	r2, [r5, #8]
 80069a6:	60eb      	str	r3, [r5, #12]
 80069a8:	7823      	ldrb	r3, [r4, #0]
 80069aa:	742b      	strb	r3, [r5, #16]
			strcpy(p->grade,"7B+");
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80069b2:	4a60      	ldr	r2, [pc, #384]	; (8006b34 <problem_fetch+0x54d0>)
 80069b4:	6810      	ldr	r0, [r2, #0]
 80069b6:	6018      	str	r0, [r3, #0]
			p->moveSize = 5;
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	2205      	movs	r2, #5
 80069bc:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"C,G,H,K,I");
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	33a4      	adds	r3, #164	; 0xa4
 80069c2:	495d      	ldr	r1, [pc, #372]	; (8006b38 <problem_fetch+0x54d4>)
 80069c4:	461a      	mov	r2, r3
 80069c6:	460b      	mov	r3, r1
 80069c8:	cb03      	ldmia	r3!, {r0, r1}
 80069ca:	6010      	str	r0, [r2, #0]
 80069cc:	6051      	str	r1, [r2, #4]
 80069ce:	881b      	ldrh	r3, [r3, #0]
 80069d0:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"5,9,12,14,18");
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	3304      	adds	r3, #4
 80069d6:	4a59      	ldr	r2, [pc, #356]	; (8006b3c <problem_fetch+0x54d8>)
 80069d8:	461c      	mov	r4, r3
 80069da:	4613      	mov	r3, r2
 80069dc:	cb07      	ldmia	r3!, {r0, r1, r2}
 80069de:	6020      	str	r0, [r4, #0]
 80069e0:	6061      	str	r1, [r4, #4]
 80069e2:	60a2      	str	r2, [r4, #8]
 80069e4:	781b      	ldrb	r3, [r3, #0]
 80069e6:	7323      	strb	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,e");
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 80069ee:	4954      	ldr	r1, [pc, #336]	; (8006b40 <problem_fetch+0x54dc>)
 80069f0:	461a      	mov	r2, r3
 80069f2:	460b      	mov	r3, r1
 80069f4:	cb03      	ldmia	r3!, {r0, r1}
 80069f6:	6010      	str	r0, [r2, #0]
 80069f8:	6051      	str	r1, [r2, #4]
 80069fa:	881b      	ldrh	r3, [r3, #0]
 80069fc:	8113      	strh	r3, [r2, #8]
			break;
 80069fe:	f015 bd61 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 137 :
			strcpy(p->name,"DOMINOS PINZA");
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8006a08:	4a4e      	ldr	r2, [pc, #312]	; (8006b44 <problem_fetch+0x54e0>)
 8006a0a:	461c      	mov	r4, r3
 8006a0c:	4613      	mov	r3, r2
 8006a0e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8006a10:	6020      	str	r0, [r4, #0]
 8006a12:	6061      	str	r1, [r4, #4]
 8006a14:	60a2      	str	r2, [r4, #8]
 8006a16:	881b      	ldrh	r3, [r3, #0]
 8006a18:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade,"7B+");
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8006a20:	4a44      	ldr	r2, [pc, #272]	; (8006b34 <problem_fetch+0x54d0>)
 8006a22:	6810      	ldr	r0, [r2, #0]
 8006a24:	6018      	str	r0, [r3, #0]
			p->moveSize = 5;
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	2205      	movs	r2, #5
 8006a2a:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"B,G,D,I,I");
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	33a4      	adds	r3, #164	; 0xa4
 8006a30:	4945      	ldr	r1, [pc, #276]	; (8006b48 <problem_fetch+0x54e4>)
 8006a32:	461a      	mov	r2, r3
 8006a34:	460b      	mov	r3, r1
 8006a36:	cb03      	ldmia	r3!, {r0, r1}
 8006a38:	6010      	str	r0, [r2, #0]
 8006a3a:	6051      	str	r1, [r2, #4]
 8006a3c:	881b      	ldrh	r3, [r3, #0]
 8006a3e:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"6,9,11,14,18");
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	3304      	adds	r3, #4
 8006a44:	4a41      	ldr	r2, [pc, #260]	; (8006b4c <problem_fetch+0x54e8>)
 8006a46:	461c      	mov	r4, r3
 8006a48:	4613      	mov	r3, r2
 8006a4a:	cb07      	ldmia	r3!, {r0, r1, r2}
 8006a4c:	6020      	str	r0, [r4, #0]
 8006a4e:	6061      	str	r1, [r4, #4]
 8006a50:	60a2      	str	r2, [r4, #8]
 8006a52:	781b      	ldrb	r3, [r3, #0]
 8006a54:	7323      	strb	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,e");
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8006a5c:	4938      	ldr	r1, [pc, #224]	; (8006b40 <problem_fetch+0x54dc>)
 8006a5e:	461a      	mov	r2, r3
 8006a60:	460b      	mov	r3, r1
 8006a62:	cb03      	ldmia	r3!, {r0, r1}
 8006a64:	6010      	str	r0, [r2, #0]
 8006a66:	6051      	str	r1, [r2, #4]
 8006a68:	881b      	ldrh	r3, [r3, #0]
 8006a6a:	8113      	strh	r3, [r2, #8]
			break;
 8006a6c:	f015 bd2a 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 138 :
			strcpy(p->name,"HOWARD THE ALIEN");
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8006a76:	4a36      	ldr	r2, [pc, #216]	; (8006b50 <problem_fetch+0x54ec>)
 8006a78:	461d      	mov	r5, r3
 8006a7a:	4614      	mov	r4, r2
 8006a7c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006a7e:	6028      	str	r0, [r5, #0]
 8006a80:	6069      	str	r1, [r5, #4]
 8006a82:	60aa      	str	r2, [r5, #8]
 8006a84:	60eb      	str	r3, [r5, #12]
 8006a86:	7823      	ldrb	r3, [r4, #0]
 8006a88:	742b      	strb	r3, [r5, #16]
			strcpy(p->grade,"7C");
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8006a90:	4a30      	ldr	r2, [pc, #192]	; (8006b54 <problem_fetch+0x54f0>)
 8006a92:	8811      	ldrh	r1, [r2, #0]
 8006a94:	7892      	ldrb	r2, [r2, #2]
 8006a96:	8019      	strh	r1, [r3, #0]
 8006a98:	709a      	strb	r2, [r3, #2]
			p->moveSize = 5;
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	2205      	movs	r2, #5
 8006a9e:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,G,C,I,D");
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	33a4      	adds	r3, #164	; 0xa4
 8006aa4:	492c      	ldr	r1, [pc, #176]	; (8006b58 <problem_fetch+0x54f4>)
 8006aa6:	461a      	mov	r2, r3
 8006aa8:	460b      	mov	r3, r1
 8006aaa:	cb03      	ldmia	r3!, {r0, r1}
 8006aac:	6010      	str	r0, [r2, #0]
 8006aae:	6051      	str	r1, [r2, #4]
 8006ab0:	881b      	ldrh	r3, [r3, #0]
 8006ab2:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"5,9,13,14,18");
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	3304      	adds	r3, #4
 8006ab8:	4a28      	ldr	r2, [pc, #160]	; (8006b5c <problem_fetch+0x54f8>)
 8006aba:	461c      	mov	r4, r3
 8006abc:	4613      	mov	r3, r2
 8006abe:	cb07      	ldmia	r3!, {r0, r1, r2}
 8006ac0:	6020      	str	r0, [r4, #0]
 8006ac2:	6061      	str	r1, [r4, #4]
 8006ac4:	60a2      	str	r2, [r4, #8]
 8006ac6:	781b      	ldrb	r3, [r3, #0]
 8006ac8:	7323      	strb	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,e");
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8006ad0:	491b      	ldr	r1, [pc, #108]	; (8006b40 <problem_fetch+0x54dc>)
 8006ad2:	461a      	mov	r2, r3
 8006ad4:	460b      	mov	r3, r1
 8006ad6:	cb03      	ldmia	r3!, {r0, r1}
 8006ad8:	6010      	str	r0, [r2, #0]
 8006ada:	6051      	str	r1, [r2, #4]
 8006adc:	881b      	ldrh	r3, [r3, #0]
 8006ade:	8113      	strh	r3, [r2, #8]
			break;
 8006ae0:	f015 bcf0 	b.w	801c4c4 <problem_fetch+0x1ae60>
 8006ae4:	08025614 	.word	0x08025614
 8006ae8:	08024130 	.word	0x08024130
 8006aec:	0802561c 	.word	0x0802561c
 8006af0:	08025630 	.word	0x08025630
 8006af4:	08024b08 	.word	0x08024b08
 8006af8:	08025648 	.word	0x08025648
 8006afc:	08023cc4 	.word	0x08023cc4
 8006b00:	08025650 	.word	0x08025650
 8006b04:	0802565c 	.word	0x0802565c
 8006b08:	0802566c 	.word	0x0802566c
 8006b0c:	08025678 	.word	0x08025678
 8006b10:	08025688 	.word	0x08025688
 8006b14:	08025698 	.word	0x08025698
 8006b18:	080256ac 	.word	0x080256ac
 8006b1c:	080256bc 	.word	0x080256bc
 8006b20:	08023ae4 	.word	0x08023ae4
 8006b24:	080256cc 	.word	0x080256cc
 8006b28:	080256d8 	.word	0x080256d8
 8006b2c:	080256e8 	.word	0x080256e8
 8006b30:	080256f4 	.word	0x080256f4
 8006b34:	08023c60 	.word	0x08023c60
 8006b38:	08025708 	.word	0x08025708
 8006b3c:	08024140 	.word	0x08024140
 8006b40:	08023ff0 	.word	0x08023ff0
 8006b44:	08025714 	.word	0x08025714
 8006b48:	08025724 	.word	0x08025724
 8006b4c:	08025730 	.word	0x08025730
 8006b50:	08025740 	.word	0x08025740
 8006b54:	08024358 	.word	0x08024358
 8006b58:	08025754 	.word	0x08025754
 8006b5c:	08025760 	.word	0x08025760
		case 139 :
			strcpy(p->name,"EZ CLAP");
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8006b66:	49c4      	ldr	r1, [pc, #784]	; (8006e78 <problem_fetch+0x5814>)
 8006b68:	461a      	mov	r2, r3
 8006b6a:	460b      	mov	r3, r1
 8006b6c:	cb03      	ldmia	r3!, {r0, r1}
 8006b6e:	6010      	str	r0, [r2, #0]
 8006b70:	6051      	str	r1, [r2, #4]
			strcpy(p->grade,"7A");
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8006b78:	4ac0      	ldr	r2, [pc, #768]	; (8006e7c <problem_fetch+0x5818>)
 8006b7a:	8811      	ldrh	r1, [r2, #0]
 8006b7c:	7892      	ldrb	r2, [r2, #2]
 8006b7e:	8019      	strh	r1, [r3, #0]
 8006b80:	709a      	strb	r2, [r3, #2]
			p->moveSize = 6;
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	2206      	movs	r2, #6
 8006b86:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,J,H,C,D,E");
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	33a4      	adds	r3, #164	; 0xa4
 8006b8c:	4abc      	ldr	r2, [pc, #752]	; (8006e80 <problem_fetch+0x581c>)
 8006b8e:	461c      	mov	r4, r3
 8006b90:	4613      	mov	r3, r2
 8006b92:	cb07      	ldmia	r3!, {r0, r1, r2}
 8006b94:	6020      	str	r0, [r4, #0]
 8006b96:	6061      	str	r1, [r4, #4]
 8006b98:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,5,10,13,18,14");
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	3304      	adds	r3, #4
 8006b9e:	4ab9      	ldr	r2, [pc, #740]	; (8006e84 <problem_fetch+0x5820>)
 8006ba0:	461c      	mov	r4, r3
 8006ba2:	4615      	mov	r5, r2
 8006ba4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006ba6:	6020      	str	r0, [r4, #0]
 8006ba8:	6061      	str	r1, [r4, #4]
 8006baa:	60a2      	str	r2, [r4, #8]
 8006bac:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,s,d,d,e,d");
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8006bb4:	4ab4      	ldr	r2, [pc, #720]	; (8006e88 <problem_fetch+0x5824>)
 8006bb6:	461c      	mov	r4, r3
 8006bb8:	4613      	mov	r3, r2
 8006bba:	cb07      	ldmia	r3!, {r0, r1, r2}
 8006bbc:	6020      	str	r0, [r4, #0]
 8006bbe:	6061      	str	r1, [r4, #4]
 8006bc0:	60a2      	str	r2, [r4, #8]
			break;
 8006bc2:	f015 bc7f 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 140 :
			strcpy(p->name,"BRUTE");
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8006bcc:	4aaf      	ldr	r2, [pc, #700]	; (8006e8c <problem_fetch+0x5828>)
 8006bce:	6810      	ldr	r0, [r2, #0]
 8006bd0:	6018      	str	r0, [r3, #0]
 8006bd2:	8892      	ldrh	r2, [r2, #4]
 8006bd4:	809a      	strh	r2, [r3, #4]
			strcpy(p->grade,"7C");
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8006bdc:	4aac      	ldr	r2, [pc, #688]	; (8006e90 <problem_fetch+0x582c>)
 8006bde:	8811      	ldrh	r1, [r2, #0]
 8006be0:	7892      	ldrb	r2, [r2, #2]
 8006be2:	8019      	strh	r1, [r3, #0]
 8006be4:	709a      	strb	r2, [r3, #2]
			p->moveSize = 5;
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	2205      	movs	r2, #5
 8006bea:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"C,B,B,G,I");
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	33a4      	adds	r3, #164	; 0xa4
 8006bf0:	49a8      	ldr	r1, [pc, #672]	; (8006e94 <problem_fetch+0x5830>)
 8006bf2:	461a      	mov	r2, r3
 8006bf4:	460b      	mov	r3, r1
 8006bf6:	cb03      	ldmia	r3!, {r0, r1}
 8006bf8:	6010      	str	r0, [r2, #0]
 8006bfa:	6051      	str	r1, [r2, #4]
 8006bfc:	881b      	ldrh	r3, [r3, #0]
 8006bfe:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"5,6,10,14,18");
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	3304      	adds	r3, #4
 8006c04:	4aa4      	ldr	r2, [pc, #656]	; (8006e98 <problem_fetch+0x5834>)
 8006c06:	461c      	mov	r4, r3
 8006c08:	4613      	mov	r3, r2
 8006c0a:	cb07      	ldmia	r3!, {r0, r1, r2}
 8006c0c:	6020      	str	r0, [r4, #0]
 8006c0e:	6061      	str	r1, [r4, #4]
 8006c10:	60a2      	str	r2, [r4, #8]
 8006c12:	781b      	ldrb	r3, [r3, #0]
 8006c14:	7323      	strb	r3, [r4, #12]
			strcpy(p->startFinish,"s,s,d,d,e");
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8006c1c:	499f      	ldr	r1, [pc, #636]	; (8006e9c <problem_fetch+0x5838>)
 8006c1e:	461a      	mov	r2, r3
 8006c20:	460b      	mov	r3, r1
 8006c22:	cb03      	ldmia	r3!, {r0, r1}
 8006c24:	6010      	str	r0, [r2, #0]
 8006c26:	6051      	str	r1, [r2, #4]
 8006c28:	881b      	ldrh	r3, [r3, #0]
 8006c2a:	8113      	strh	r3, [r2, #8]
			break;
 8006c2c:	f015 bc4a 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 141 :
			strcpy(p->name,"MASTERFUL GAP ALT");
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8006c36:	4a9a      	ldr	r2, [pc, #616]	; (8006ea0 <problem_fetch+0x583c>)
 8006c38:	461d      	mov	r5, r3
 8006c3a:	4614      	mov	r4, r2
 8006c3c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006c3e:	6028      	str	r0, [r5, #0]
 8006c40:	6069      	str	r1, [r5, #4]
 8006c42:	60aa      	str	r2, [r5, #8]
 8006c44:	60eb      	str	r3, [r5, #12]
 8006c46:	8823      	ldrh	r3, [r4, #0]
 8006c48:	822b      	strh	r3, [r5, #16]
			strcpy(p->grade,"7C");
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8006c50:	4a8f      	ldr	r2, [pc, #572]	; (8006e90 <problem_fetch+0x582c>)
 8006c52:	8811      	ldrh	r1, [r2, #0]
 8006c54:	7892      	ldrb	r2, [r2, #2]
 8006c56:	8019      	strh	r1, [r3, #0]
 8006c58:	709a      	strb	r2, [r3, #2]
			p->moveSize = 6;
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	2206      	movs	r2, #6
 8006c5e:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"A,B,C,E,F,I");
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	33a4      	adds	r3, #164	; 0xa4
 8006c64:	4a8f      	ldr	r2, [pc, #572]	; (8006ea4 <problem_fetch+0x5840>)
 8006c66:	461c      	mov	r4, r3
 8006c68:	4613      	mov	r3, r2
 8006c6a:	cb07      	ldmia	r3!, {r0, r1, r2}
 8006c6c:	6020      	str	r0, [r4, #0]
 8006c6e:	6061      	str	r1, [r4, #4]
 8006c70:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"9,6,5,16,11,18");
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	3304      	adds	r3, #4
 8006c76:	4a8c      	ldr	r2, [pc, #560]	; (8006ea8 <problem_fetch+0x5844>)
 8006c78:	461c      	mov	r4, r3
 8006c7a:	4613      	mov	r3, r2
 8006c7c:	cb07      	ldmia	r3!, {r0, r1, r2}
 8006c7e:	6020      	str	r0, [r4, #0]
 8006c80:	6061      	str	r1, [r4, #4]
 8006c82:	60a2      	str	r2, [r4, #8]
 8006c84:	881a      	ldrh	r2, [r3, #0]
 8006c86:	789b      	ldrb	r3, [r3, #2]
 8006c88:	81a2      	strh	r2, [r4, #12]
 8006c8a:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish,"d,s,s,d,d,e");
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8006c92:	4a86      	ldr	r2, [pc, #536]	; (8006eac <problem_fetch+0x5848>)
 8006c94:	461c      	mov	r4, r3
 8006c96:	4613      	mov	r3, r2
 8006c98:	cb07      	ldmia	r3!, {r0, r1, r2}
 8006c9a:	6020      	str	r0, [r4, #0]
 8006c9c:	6061      	str	r1, [r4, #4]
 8006c9e:	60a2      	str	r2, [r4, #8]
			break;
 8006ca0:	f015 bc10 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 142 :
			strcpy(p->name,"RIVER RAT");
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8006caa:	4981      	ldr	r1, [pc, #516]	; (8006eb0 <problem_fetch+0x584c>)
 8006cac:	461a      	mov	r2, r3
 8006cae:	460b      	mov	r3, r1
 8006cb0:	cb03      	ldmia	r3!, {r0, r1}
 8006cb2:	6010      	str	r0, [r2, #0]
 8006cb4:	6051      	str	r1, [r2, #4]
 8006cb6:	881b      	ldrh	r3, [r3, #0]
 8006cb8:	8113      	strh	r3, [r2, #8]
			strcpy(p->grade,"7A+");
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8006cc0:	4a7c      	ldr	r2, [pc, #496]	; (8006eb4 <problem_fetch+0x5850>)
 8006cc2:	6810      	ldr	r0, [r2, #0]
 8006cc4:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	2206      	movs	r2, #6
 8006cca:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,C,E,D,E,A");
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	33a4      	adds	r3, #164	; 0xa4
 8006cd0:	4a79      	ldr	r2, [pc, #484]	; (8006eb8 <problem_fetch+0x5854>)
 8006cd2:	461c      	mov	r4, r3
 8006cd4:	4613      	mov	r3, r2
 8006cd6:	cb07      	ldmia	r3!, {r0, r1, r2}
 8006cd8:	6020      	str	r0, [r4, #0]
 8006cda:	6061      	str	r1, [r4, #4]
 8006cdc:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,8,12,11,16,18");
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	3304      	adds	r3, #4
 8006ce2:	4a76      	ldr	r2, [pc, #472]	; (8006ebc <problem_fetch+0x5858>)
 8006ce4:	461c      	mov	r4, r3
 8006ce6:	4615      	mov	r5, r2
 8006ce8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006cea:	6020      	str	r0, [r4, #0]
 8006cec:	6061      	str	r1, [r4, #4]
 8006cee:	60a2      	str	r2, [r4, #8]
 8006cf0:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8006cf8:	4a71      	ldr	r2, [pc, #452]	; (8006ec0 <problem_fetch+0x585c>)
 8006cfa:	461c      	mov	r4, r3
 8006cfc:	4613      	mov	r3, r2
 8006cfe:	cb07      	ldmia	r3!, {r0, r1, r2}
 8006d00:	6020      	str	r0, [r4, #0]
 8006d02:	6061      	str	r1, [r4, #4]
 8006d04:	60a2      	str	r2, [r4, #8]
			break;
 8006d06:	f015 bbdd 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 143 :
			strcpy(p->name,"BIG DAWWWWG");
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8006d10:	4a6c      	ldr	r2, [pc, #432]	; (8006ec4 <problem_fetch+0x5860>)
 8006d12:	461c      	mov	r4, r3
 8006d14:	4613      	mov	r3, r2
 8006d16:	cb07      	ldmia	r3!, {r0, r1, r2}
 8006d18:	6020      	str	r0, [r4, #0]
 8006d1a:	6061      	str	r1, [r4, #4]
 8006d1c:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade,"6C");
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8006d24:	4a68      	ldr	r2, [pc, #416]	; (8006ec8 <problem_fetch+0x5864>)
 8006d26:	8811      	ldrh	r1, [r2, #0]
 8006d28:	7892      	ldrb	r2, [r2, #2]
 8006d2a:	8019      	strh	r1, [r3, #0]
 8006d2c:	709a      	strb	r2, [r3, #2]
			p->moveSize = 7;
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	2207      	movs	r2, #7
 8006d32:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,D,H,C,H,H,I");
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	33a4      	adds	r3, #164	; 0xa4
 8006d38:	4a64      	ldr	r2, [pc, #400]	; (8006ecc <problem_fetch+0x5868>)
 8006d3a:	461c      	mov	r4, r3
 8006d3c:	4613      	mov	r3, r2
 8006d3e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8006d40:	6020      	str	r0, [r4, #0]
 8006d42:	6061      	str	r1, [r4, #4]
 8006d44:	60a2      	str	r2, [r4, #8]
 8006d46:	881b      	ldrh	r3, [r3, #0]
 8006d48:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,7,10,13,13,16,18");
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	3304      	adds	r3, #4
 8006d4e:	4a60      	ldr	r2, [pc, #384]	; (8006ed0 <problem_fetch+0x586c>)
 8006d50:	461d      	mov	r5, r3
 8006d52:	4614      	mov	r4, r2
 8006d54:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006d56:	6028      	str	r0, [r5, #0]
 8006d58:	6069      	str	r1, [r5, #4]
 8006d5a:	60aa      	str	r2, [r5, #8]
 8006d5c:	60eb      	str	r3, [r5, #12]
 8006d5e:	8823      	ldrh	r3, [r4, #0]
 8006d60:	78a2      	ldrb	r2, [r4, #2]
 8006d62:	822b      	strh	r3, [r5, #16]
 8006d64:	4613      	mov	r3, r2
 8006d66:	74ab      	strb	r3, [r5, #18]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8006d6e:	4a59      	ldr	r2, [pc, #356]	; (8006ed4 <problem_fetch+0x5870>)
 8006d70:	461c      	mov	r4, r3
 8006d72:	4613      	mov	r3, r2
 8006d74:	cb07      	ldmia	r3!, {r0, r1, r2}
 8006d76:	6020      	str	r0, [r4, #0]
 8006d78:	6061      	str	r1, [r4, #4]
 8006d7a:	60a2      	str	r2, [r4, #8]
 8006d7c:	881b      	ldrh	r3, [r3, #0]
 8006d7e:	81a3      	strh	r3, [r4, #12]
			break;
 8006d80:	f015 bba0 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 144 :
			strcpy(p->name,"BACK TO BASICS");
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8006d8a:	4a53      	ldr	r2, [pc, #332]	; (8006ed8 <problem_fetch+0x5874>)
 8006d8c:	461c      	mov	r4, r3
 8006d8e:	4613      	mov	r3, r2
 8006d90:	cb07      	ldmia	r3!, {r0, r1, r2}
 8006d92:	6020      	str	r0, [r4, #0]
 8006d94:	6061      	str	r1, [r4, #4]
 8006d96:	60a2      	str	r2, [r4, #8]
 8006d98:	881a      	ldrh	r2, [r3, #0]
 8006d9a:	789b      	ldrb	r3, [r3, #2]
 8006d9c:	81a2      	strh	r2, [r4, #12]
 8006d9e:	73a3      	strb	r3, [r4, #14]
			strcpy(p->grade,"6B+");
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8006da6:	4a4d      	ldr	r2, [pc, #308]	; (8006edc <problem_fetch+0x5878>)
 8006da8:	6810      	ldr	r0, [r2, #0]
 8006daa:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	2207      	movs	r2, #7
 8006db0:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"H,K,H,K,G,G,D");
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	33a4      	adds	r3, #164	; 0xa4
 8006db6:	4a4a      	ldr	r2, [pc, #296]	; (8006ee0 <problem_fetch+0x587c>)
 8006db8:	461c      	mov	r4, r3
 8006dba:	4613      	mov	r3, r2
 8006dbc:	cb07      	ldmia	r3!, {r0, r1, r2}
 8006dbe:	6020      	str	r0, [r4, #0]
 8006dc0:	6061      	str	r1, [r4, #4]
 8006dc2:	60a2      	str	r2, [r4, #8]
 8006dc4:	881b      	ldrh	r3, [r3, #0]
 8006dc6:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,9,12,14,15,17,18");
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	3304      	adds	r3, #4
 8006dcc:	4a45      	ldr	r2, [pc, #276]	; (8006ee4 <problem_fetch+0x5880>)
 8006dce:	461d      	mov	r5, r3
 8006dd0:	4614      	mov	r4, r2
 8006dd2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006dd4:	6028      	str	r0, [r5, #0]
 8006dd6:	6069      	str	r1, [r5, #4]
 8006dd8:	60aa      	str	r2, [r5, #8]
 8006dda:	60eb      	str	r3, [r5, #12]
 8006ddc:	8823      	ldrh	r3, [r4, #0]
 8006dde:	78a2      	ldrb	r2, [r4, #2]
 8006de0:	822b      	strh	r3, [r5, #16]
 8006de2:	4613      	mov	r3, r2
 8006de4:	74ab      	strb	r3, [r5, #18]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8006dec:	4a39      	ldr	r2, [pc, #228]	; (8006ed4 <problem_fetch+0x5870>)
 8006dee:	461c      	mov	r4, r3
 8006df0:	4613      	mov	r3, r2
 8006df2:	cb07      	ldmia	r3!, {r0, r1, r2}
 8006df4:	6020      	str	r0, [r4, #0]
 8006df6:	6061      	str	r1, [r4, #4]
 8006df8:	60a2      	str	r2, [r4, #8]
 8006dfa:	881b      	ldrh	r3, [r3, #0]
 8006dfc:	81a3      	strh	r3, [r4, #12]
			break;
 8006dfe:	f015 bb61 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 145 :
			strcpy(p->name,"ROADWAY");
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8006e08:	4937      	ldr	r1, [pc, #220]	; (8006ee8 <problem_fetch+0x5884>)
 8006e0a:	461a      	mov	r2, r3
 8006e0c:	460b      	mov	r3, r1
 8006e0e:	cb03      	ldmia	r3!, {r0, r1}
 8006e10:	6010      	str	r0, [r2, #0]
 8006e12:	6051      	str	r1, [r2, #4]
			strcpy(p->grade,"6B+");
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8006e1a:	4a30      	ldr	r2, [pc, #192]	; (8006edc <problem_fetch+0x5878>)
 8006e1c:	6810      	ldr	r0, [r2, #0]
 8006e1e:	6018      	str	r0, [r3, #0]
			p->moveSize = 9;
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	2209      	movs	r2, #9
 8006e24:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,J,G,F,I,E,G,D,I");
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	33a4      	adds	r3, #164	; 0xa4
 8006e2a:	4a30      	ldr	r2, [pc, #192]	; (8006eec <problem_fetch+0x5888>)
 8006e2c:	461d      	mov	r5, r3
 8006e2e:	4614      	mov	r4, r2
 8006e30:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006e32:	6028      	str	r0, [r5, #0]
 8006e34:	6069      	str	r1, [r5, #4]
 8006e36:	60aa      	str	r2, [r5, #8]
 8006e38:	60eb      	str	r3, [r5, #12]
 8006e3a:	8823      	ldrh	r3, [r4, #0]
 8006e3c:	822b      	strh	r3, [r5, #16]
			strcpy(p->moveNumbers,"4,5,9,13,14,16,17,18,10");
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	3304      	adds	r3, #4
 8006e42:	4a2b      	ldr	r2, [pc, #172]	; (8006ef0 <problem_fetch+0x588c>)
 8006e44:	461d      	mov	r5, r3
 8006e46:	4614      	mov	r4, r2
 8006e48:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006e4a:	6028      	str	r0, [r5, #0]
 8006e4c:	6069      	str	r1, [r5, #4]
 8006e4e:	60aa      	str	r2, [r5, #8]
 8006e50:	60eb      	str	r3, [r5, #12]
 8006e52:	cc03      	ldmia	r4!, {r0, r1}
 8006e54:	6128      	str	r0, [r5, #16]
 8006e56:	6169      	str	r1, [r5, #20]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,e,d");
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8006e5e:	4a25      	ldr	r2, [pc, #148]	; (8006ef4 <problem_fetch+0x5890>)
 8006e60:	461d      	mov	r5, r3
 8006e62:	4614      	mov	r4, r2
 8006e64:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006e66:	6028      	str	r0, [r5, #0]
 8006e68:	6069      	str	r1, [r5, #4]
 8006e6a:	60aa      	str	r2, [r5, #8]
 8006e6c:	60eb      	str	r3, [r5, #12]
 8006e6e:	8823      	ldrh	r3, [r4, #0]
 8006e70:	822b      	strh	r3, [r5, #16]
			break;
 8006e72:	f015 bb27 	b.w	801c4c4 <problem_fetch+0x1ae60>
 8006e76:	bf00      	nop
 8006e78:	08025770 	.word	0x08025770
 8006e7c:	08023ae4 	.word	0x08023ae4
 8006e80:	08025778 	.word	0x08025778
 8006e84:	08025784 	.word	0x08025784
 8006e88:	080254c8 	.word	0x080254c8
 8006e8c:	08025794 	.word	0x08025794
 8006e90:	08024358 	.word	0x08024358
 8006e94:	0802579c 	.word	0x0802579c
 8006e98:	080257a8 	.word	0x080257a8
 8006e9c:	08024204 	.word	0x08024204
 8006ea0:	080257b8 	.word	0x080257b8
 8006ea4:	080257cc 	.word	0x080257cc
 8006ea8:	080257d8 	.word	0x080257d8
 8006eac:	080257e8 	.word	0x080257e8
 8006eb0:	080257f4 	.word	0x080257f4
 8006eb4:	08023cc4 	.word	0x08023cc4
 8006eb8:	08025800 	.word	0x08025800
 8006ebc:	0802580c 	.word	0x0802580c
 8006ec0:	08023ec0 	.word	0x08023ec0
 8006ec4:	0802581c 	.word	0x0802581c
 8006ec8:	08023bf0 	.word	0x08023bf0
 8006ecc:	08025828 	.word	0x08025828
 8006ed0:	08025838 	.word	0x08025838
 8006ed4:	08023cac 	.word	0x08023cac
 8006ed8:	0802584c 	.word	0x0802584c
 8006edc:	08023b24 	.word	0x08023b24
 8006ee0:	0802585c 	.word	0x0802585c
 8006ee4:	0802586c 	.word	0x0802586c
 8006ee8:	08025880 	.word	0x08025880
 8006eec:	08025888 	.word	0x08025888
 8006ef0:	0802589c 	.word	0x0802589c
 8006ef4:	08024fbc 	.word	0x08024fbc
		case 146 :
			strcpy(p->name,"MEN IN BLACK");
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8006efe:	4aae      	ldr	r2, [pc, #696]	; (80071b8 <problem_fetch+0x5b54>)
 8006f00:	461c      	mov	r4, r3
 8006f02:	4613      	mov	r3, r2
 8006f04:	cb07      	ldmia	r3!, {r0, r1, r2}
 8006f06:	6020      	str	r0, [r4, #0]
 8006f08:	6061      	str	r1, [r4, #4]
 8006f0a:	60a2      	str	r2, [r4, #8]
 8006f0c:	781b      	ldrb	r3, [r3, #0]
 8006f0e:	7323      	strb	r3, [r4, #12]
			strcpy(p->grade,"7A");
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8006f16:	4aa9      	ldr	r2, [pc, #676]	; (80071bc <problem_fetch+0x5b58>)
 8006f18:	8811      	ldrh	r1, [r2, #0]
 8006f1a:	7892      	ldrb	r2, [r2, #2]
 8006f1c:	8019      	strh	r1, [r3, #0]
 8006f1e:	709a      	strb	r2, [r3, #2]
			p->moveSize = 6;
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	2206      	movs	r2, #6
 8006f24:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,G,H,I,E,D");
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	33a4      	adds	r3, #164	; 0xa4
 8006f2a:	4aa5      	ldr	r2, [pc, #660]	; (80071c0 <problem_fetch+0x5b5c>)
 8006f2c:	461c      	mov	r4, r3
 8006f2e:	4613      	mov	r3, r2
 8006f30:	cb07      	ldmia	r3!, {r0, r1, r2}
 8006f32:	6020      	str	r0, [r4, #0]
 8006f34:	6061      	str	r1, [r4, #4]
 8006f36:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,9,12,14,16,18");
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	3304      	adds	r3, #4
 8006f3c:	4aa1      	ldr	r2, [pc, #644]	; (80071c4 <problem_fetch+0x5b60>)
 8006f3e:	461c      	mov	r4, r3
 8006f40:	4615      	mov	r5, r2
 8006f42:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006f44:	6020      	str	r0, [r4, #0]
 8006f46:	6061      	str	r1, [r4, #4]
 8006f48:	60a2      	str	r2, [r4, #8]
 8006f4a:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8006f52:	4a9d      	ldr	r2, [pc, #628]	; (80071c8 <problem_fetch+0x5b64>)
 8006f54:	461c      	mov	r4, r3
 8006f56:	4613      	mov	r3, r2
 8006f58:	cb07      	ldmia	r3!, {r0, r1, r2}
 8006f5a:	6020      	str	r0, [r4, #0]
 8006f5c:	6061      	str	r1, [r4, #4]
 8006f5e:	60a2      	str	r2, [r4, #8]
			break;
 8006f60:	f015 bab0 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 147 :
			strcpy(p->name,"SET1");
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8006f6a:	4a98      	ldr	r2, [pc, #608]	; (80071cc <problem_fetch+0x5b68>)
 8006f6c:	6810      	ldr	r0, [r2, #0]
 8006f6e:	6018      	str	r0, [r3, #0]
 8006f70:	7912      	ldrb	r2, [r2, #4]
 8006f72:	711a      	strb	r2, [r3, #4]
			strcpy(p->grade,"6B+");
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8006f7a:	4a95      	ldr	r2, [pc, #596]	; (80071d0 <problem_fetch+0x5b6c>)
 8006f7c:	6810      	ldr	r0, [r2, #0]
 8006f7e:	6018      	str	r0, [r3, #0]
			p->moveSize = 9;
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	2209      	movs	r2, #9
 8006f84:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"C,E,E,H,F,I,G,I,J");
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	33a4      	adds	r3, #164	; 0xa4
 8006f8a:	4a92      	ldr	r2, [pc, #584]	; (80071d4 <problem_fetch+0x5b70>)
 8006f8c:	461d      	mov	r5, r3
 8006f8e:	4614      	mov	r4, r2
 8006f90:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006f92:	6028      	str	r0, [r5, #0]
 8006f94:	6069      	str	r1, [r5, #4]
 8006f96:	60aa      	str	r2, [r5, #8]
 8006f98:	60eb      	str	r3, [r5, #12]
 8006f9a:	8823      	ldrh	r3, [r4, #0]
 8006f9c:	822b      	strh	r3, [r5, #16]
			strcpy(p->moveNumbers,"5,6,8,10,13,14,17,18,5");
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	3304      	adds	r3, #4
 8006fa2:	4a8d      	ldr	r2, [pc, #564]	; (80071d8 <problem_fetch+0x5b74>)
 8006fa4:	461c      	mov	r4, r3
 8006fa6:	4615      	mov	r5, r2
 8006fa8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006faa:	6020      	str	r0, [r4, #0]
 8006fac:	6061      	str	r1, [r4, #4]
 8006fae:	60a2      	str	r2, [r4, #8]
 8006fb0:	60e3      	str	r3, [r4, #12]
 8006fb2:	6828      	ldr	r0, [r5, #0]
 8006fb4:	6120      	str	r0, [r4, #16]
 8006fb6:	88ab      	ldrh	r3, [r5, #4]
 8006fb8:	79aa      	ldrb	r2, [r5, #6]
 8006fba:	82a3      	strh	r3, [r4, #20]
 8006fbc:	4613      	mov	r3, r2
 8006fbe:	75a3      	strb	r3, [r4, #22]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,e,d");
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8006fc6:	4a85      	ldr	r2, [pc, #532]	; (80071dc <problem_fetch+0x5b78>)
 8006fc8:	461d      	mov	r5, r3
 8006fca:	4614      	mov	r4, r2
 8006fcc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006fce:	6028      	str	r0, [r5, #0]
 8006fd0:	6069      	str	r1, [r5, #4]
 8006fd2:	60aa      	str	r2, [r5, #8]
 8006fd4:	60eb      	str	r3, [r5, #12]
 8006fd6:	8823      	ldrh	r3, [r4, #0]
 8006fd8:	822b      	strh	r3, [r5, #16]
			break;
 8006fda:	f015 ba73 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 148 :
			strcpy(p->name,"MÁVROS K2");
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8006fe4:	497e      	ldr	r1, [pc, #504]	; (80071e0 <problem_fetch+0x5b7c>)
 8006fe6:	461a      	mov	r2, r3
 8006fe8:	460b      	mov	r3, r1
 8006fea:	cb03      	ldmia	r3!, {r0, r1}
 8006fec:	6010      	str	r0, [r2, #0]
 8006fee:	6051      	str	r1, [r2, #4]
 8006ff0:	8819      	ldrh	r1, [r3, #0]
 8006ff2:	789b      	ldrb	r3, [r3, #2]
 8006ff4:	8111      	strh	r1, [r2, #8]
 8006ff6:	7293      	strb	r3, [r2, #10]
			strcpy(p->grade,"6C+");
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8006ffe:	4a79      	ldr	r2, [pc, #484]	; (80071e4 <problem_fetch+0x5b80>)
 8007000:	6810      	ldr	r0, [r2, #0]
 8007002:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	2206      	movs	r2, #6
 8007008:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,E,G,C,C,D");
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	33a4      	adds	r3, #164	; 0xa4
 800700e:	4a76      	ldr	r2, [pc, #472]	; (80071e8 <problem_fetch+0x5b84>)
 8007010:	461c      	mov	r4, r3
 8007012:	4613      	mov	r3, r2
 8007014:	cb07      	ldmia	r3!, {r0, r1, r2}
 8007016:	6020      	str	r0, [r4, #0]
 8007018:	6061      	str	r1, [r4, #4]
 800701a:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,6,9,8,13,18");
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	3304      	adds	r3, #4
 8007020:	4a72      	ldr	r2, [pc, #456]	; (80071ec <problem_fetch+0x5b88>)
 8007022:	461c      	mov	r4, r3
 8007024:	4613      	mov	r3, r2
 8007026:	cb07      	ldmia	r3!, {r0, r1, r2}
 8007028:	6020      	str	r0, [r4, #0]
 800702a:	6061      	str	r1, [r4, #4]
 800702c:	60a2      	str	r2, [r4, #8]
 800702e:	881b      	ldrh	r3, [r3, #0]
 8007030:	81a3      	strh	r3, [r4, #12]
			strcpy(p->startFinish,"s,s,d,d,d,e");
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8007038:	4a6d      	ldr	r2, [pc, #436]	; (80071f0 <problem_fetch+0x5b8c>)
 800703a:	461c      	mov	r4, r3
 800703c:	4613      	mov	r3, r2
 800703e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8007040:	6020      	str	r0, [r4, #0]
 8007042:	6061      	str	r1, [r4, #4]
 8007044:	60a2      	str	r2, [r4, #8]
			break;
 8007046:	f015 ba3d 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 149 :
			strcpy(p->name,"GARAGE DAYS");
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8007050:	4a68      	ldr	r2, [pc, #416]	; (80071f4 <problem_fetch+0x5b90>)
 8007052:	461c      	mov	r4, r3
 8007054:	4613      	mov	r3, r2
 8007056:	cb07      	ldmia	r3!, {r0, r1, r2}
 8007058:	6020      	str	r0, [r4, #0]
 800705a:	6061      	str	r1, [r4, #4]
 800705c:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade,"6C");
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8007064:	4a64      	ldr	r2, [pc, #400]	; (80071f8 <problem_fetch+0x5b94>)
 8007066:	8811      	ldrh	r1, [r2, #0]
 8007068:	7892      	ldrb	r2, [r2, #2]
 800706a:	8019      	strh	r1, [r3, #0]
 800706c:	709a      	strb	r2, [r3, #2]
			p->moveSize = 7;
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	2207      	movs	r2, #7
 8007072:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"E,H,K,H,I,E,D");
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	33a4      	adds	r3, #164	; 0xa4
 8007078:	4a60      	ldr	r2, [pc, #384]	; (80071fc <problem_fetch+0x5b98>)
 800707a:	461c      	mov	r4, r3
 800707c:	4613      	mov	r3, r2
 800707e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8007080:	6020      	str	r0, [r4, #0]
 8007082:	6061      	str	r1, [r4, #4]
 8007084:	60a2      	str	r2, [r4, #8]
 8007086:	881b      	ldrh	r3, [r3, #0]
 8007088:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"6,5,9,12,14,16,18");
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	3304      	adds	r3, #4
 800708e:	4a5c      	ldr	r2, [pc, #368]	; (8007200 <problem_fetch+0x5b9c>)
 8007090:	461d      	mov	r5, r3
 8007092:	4614      	mov	r4, r2
 8007094:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007096:	6028      	str	r0, [r5, #0]
 8007098:	6069      	str	r1, [r5, #4]
 800709a:	60aa      	str	r2, [r5, #8]
 800709c:	60eb      	str	r3, [r5, #12]
 800709e:	8823      	ldrh	r3, [r4, #0]
 80070a0:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,s,d,d,d,d,e");
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 80070a8:	4a56      	ldr	r2, [pc, #344]	; (8007204 <problem_fetch+0x5ba0>)
 80070aa:	461c      	mov	r4, r3
 80070ac:	4613      	mov	r3, r2
 80070ae:	cb07      	ldmia	r3!, {r0, r1, r2}
 80070b0:	6020      	str	r0, [r4, #0]
 80070b2:	6061      	str	r1, [r4, #4]
 80070b4:	60a2      	str	r2, [r4, #8]
 80070b6:	881b      	ldrh	r3, [r3, #0]
 80070b8:	81a3      	strh	r3, [r4, #12]
			break;
 80070ba:	f015 ba03 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 150 :
			strcpy(p->name,"ELEMENTS OF STYLE");
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80070c4:	4a50      	ldr	r2, [pc, #320]	; (8007208 <problem_fetch+0x5ba4>)
 80070c6:	461d      	mov	r5, r3
 80070c8:	4614      	mov	r4, r2
 80070ca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80070cc:	6028      	str	r0, [r5, #0]
 80070ce:	6069      	str	r1, [r5, #4]
 80070d0:	60aa      	str	r2, [r5, #8]
 80070d2:	60eb      	str	r3, [r5, #12]
 80070d4:	8823      	ldrh	r3, [r4, #0]
 80070d6:	822b      	strh	r3, [r5, #16]
			strcpy(p->grade,"7A");
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80070de:	4a37      	ldr	r2, [pc, #220]	; (80071bc <problem_fetch+0x5b58>)
 80070e0:	8811      	ldrh	r1, [r2, #0]
 80070e2:	7892      	ldrb	r2, [r2, #2]
 80070e4:	8019      	strh	r1, [r3, #0]
 80070e6:	709a      	strb	r2, [r3, #2]
			p->moveSize = 6;
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	2206      	movs	r2, #6
 80070ec:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"H,J,D,F,A,D");
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	33a4      	adds	r3, #164	; 0xa4
 80070f2:	4a46      	ldr	r2, [pc, #280]	; (800720c <problem_fetch+0x5ba8>)
 80070f4:	461c      	mov	r4, r3
 80070f6:	4613      	mov	r3, r2
 80070f8:	cb07      	ldmia	r3!, {r0, r1, r2}
 80070fa:	6020      	str	r0, [r4, #0]
 80070fc:	6061      	str	r1, [r4, #4]
 80070fe:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,5,7,11,14,18");
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	3304      	adds	r3, #4
 8007104:	4a42      	ldr	r2, [pc, #264]	; (8007210 <problem_fetch+0x5bac>)
 8007106:	461c      	mov	r4, r3
 8007108:	4613      	mov	r3, r2
 800710a:	cb07      	ldmia	r3!, {r0, r1, r2}
 800710c:	6020      	str	r0, [r4, #0]
 800710e:	6061      	str	r1, [r4, #4]
 8007110:	60a2      	str	r2, [r4, #8]
 8007112:	881a      	ldrh	r2, [r3, #0]
 8007114:	789b      	ldrb	r3, [r3, #2]
 8007116:	81a2      	strh	r2, [r4, #12]
 8007118:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8007120:	4a29      	ldr	r2, [pc, #164]	; (80071c8 <problem_fetch+0x5b64>)
 8007122:	461c      	mov	r4, r3
 8007124:	4613      	mov	r3, r2
 8007126:	cb07      	ldmia	r3!, {r0, r1, r2}
 8007128:	6020      	str	r0, [r4, #0]
 800712a:	6061      	str	r1, [r4, #4]
 800712c:	60a2      	str	r2, [r4, #8]
			break;
 800712e:	f015 b9c9 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 151 :
			strcpy(p->name,"OLI'S YELLOW FEVA");
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8007138:	4a36      	ldr	r2, [pc, #216]	; (8007214 <problem_fetch+0x5bb0>)
 800713a:	461d      	mov	r5, r3
 800713c:	4614      	mov	r4, r2
 800713e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007140:	6028      	str	r0, [r5, #0]
 8007142:	6069      	str	r1, [r5, #4]
 8007144:	60aa      	str	r2, [r5, #8]
 8007146:	60eb      	str	r3, [r5, #12]
 8007148:	8823      	ldrh	r3, [r4, #0]
 800714a:	822b      	strh	r3, [r5, #16]
			strcpy(p->grade,"6B+");
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8007152:	4a1f      	ldr	r2, [pc, #124]	; (80071d0 <problem_fetch+0x5b6c>)
 8007154:	6810      	ldr	r0, [r2, #0]
 8007156:	6018      	str	r0, [r3, #0]
			p->moveSize = 9;
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	2209      	movs	r2, #9
 800715c:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,E,E,H,H,F,G,I,I");
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	33a4      	adds	r3, #164	; 0xa4
 8007162:	4a2d      	ldr	r2, [pc, #180]	; (8007218 <problem_fetch+0x5bb4>)
 8007164:	461d      	mov	r5, r3
 8007166:	4614      	mov	r4, r2
 8007168:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800716a:	6028      	str	r0, [r5, #0]
 800716c:	6069      	str	r1, [r5, #4]
 800716e:	60aa      	str	r2, [r5, #8]
 8007170:	60eb      	str	r3, [r5, #12]
 8007172:	8823      	ldrh	r3, [r4, #0]
 8007174:	822b      	strh	r3, [r5, #16]
			strcpy(p->moveNumbers,"4,6,8,5,10,11,14,14,18");
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	3304      	adds	r3, #4
 800717a:	4a28      	ldr	r2, [pc, #160]	; (800721c <problem_fetch+0x5bb8>)
 800717c:	461c      	mov	r4, r3
 800717e:	4615      	mov	r5, r2
 8007180:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007182:	6020      	str	r0, [r4, #0]
 8007184:	6061      	str	r1, [r4, #4]
 8007186:	60a2      	str	r2, [r4, #8]
 8007188:	60e3      	str	r3, [r4, #12]
 800718a:	6828      	ldr	r0, [r5, #0]
 800718c:	6120      	str	r0, [r4, #16]
 800718e:	88ab      	ldrh	r3, [r5, #4]
 8007190:	79aa      	ldrb	r2, [r5, #6]
 8007192:	82a3      	strh	r3, [r4, #20]
 8007194:	4613      	mov	r3, r2
 8007196:	75a3      	strb	r3, [r4, #22]
			strcpy(p->startFinish,"s,d,d,d,d,d,d,d,e");
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800719e:	4a20      	ldr	r2, [pc, #128]	; (8007220 <problem_fetch+0x5bbc>)
 80071a0:	461d      	mov	r5, r3
 80071a2:	4614      	mov	r4, r2
 80071a4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80071a6:	6028      	str	r0, [r5, #0]
 80071a8:	6069      	str	r1, [r5, #4]
 80071aa:	60aa      	str	r2, [r5, #8]
 80071ac:	60eb      	str	r3, [r5, #12]
 80071ae:	8823      	ldrh	r3, [r4, #0]
 80071b0:	822b      	strh	r3, [r5, #16]
			break;
 80071b2:	f015 b987 	b.w	801c4c4 <problem_fetch+0x1ae60>
 80071b6:	bf00      	nop
 80071b8:	080258b4 	.word	0x080258b4
 80071bc:	08023ae4 	.word	0x08023ae4
 80071c0:	080258c4 	.word	0x080258c4
 80071c4:	080258d0 	.word	0x080258d0
 80071c8:	08023ec0 	.word	0x08023ec0
 80071cc:	080258e0 	.word	0x080258e0
 80071d0:	08023b24 	.word	0x08023b24
 80071d4:	080258e8 	.word	0x080258e8
 80071d8:	080258fc 	.word	0x080258fc
 80071dc:	08024fbc 	.word	0x08024fbc
 80071e0:	08025914 	.word	0x08025914
 80071e4:	08023bbc 	.word	0x08023bbc
 80071e8:	08025920 	.word	0x08025920
 80071ec:	0802592c 	.word	0x0802592c
 80071f0:	08023b04 	.word	0x08023b04
 80071f4:	0802593c 	.word	0x0802593c
 80071f8:	08023bf0 	.word	0x08023bf0
 80071fc:	08025948 	.word	0x08025948
 8007200:	08025958 	.word	0x08025958
 8007204:	08023b9c 	.word	0x08023b9c
 8007208:	0802596c 	.word	0x0802596c
 800720c:	08025980 	.word	0x08025980
 8007210:	0802598c 	.word	0x0802598c
 8007214:	0802599c 	.word	0x0802599c
 8007218:	080259b0 	.word	0x080259b0
 800721c:	080259c4 	.word	0x080259c4
 8007220:	080259dc 	.word	0x080259dc
		case 152 :
			strcpy(p->name,"GAMBIT");
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800722a:	4aac      	ldr	r2, [pc, #688]	; (80074dc <problem_fetch+0x5e78>)
 800722c:	6810      	ldr	r0, [r2, #0]
 800722e:	6018      	str	r0, [r3, #0]
 8007230:	8891      	ldrh	r1, [r2, #4]
 8007232:	7992      	ldrb	r2, [r2, #6]
 8007234:	8099      	strh	r1, [r3, #4]
 8007236:	719a      	strb	r2, [r3, #6]
			strcpy(p->grade,"7A");
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800723e:	4aa8      	ldr	r2, [pc, #672]	; (80074e0 <problem_fetch+0x5e7c>)
 8007240:	8811      	ldrh	r1, [r2, #0]
 8007242:	7892      	ldrb	r2, [r2, #2]
 8007244:	8019      	strh	r1, [r3, #0]
 8007246:	709a      	strb	r2, [r3, #2]
			p->moveSize = 5;
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	2205      	movs	r2, #5
 800724c:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"H,I,E,D,A");
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	33a4      	adds	r3, #164	; 0xa4
 8007252:	49a4      	ldr	r1, [pc, #656]	; (80074e4 <problem_fetch+0x5e80>)
 8007254:	461a      	mov	r2, r3
 8007256:	460b      	mov	r3, r1
 8007258:	cb03      	ldmia	r3!, {r0, r1}
 800725a:	6010      	str	r0, [r2, #0]
 800725c:	6051      	str	r1, [r2, #4]
 800725e:	881b      	ldrh	r3, [r3, #0]
 8007260:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"5,10,12,15,18");
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	3304      	adds	r3, #4
 8007266:	4aa0      	ldr	r2, [pc, #640]	; (80074e8 <problem_fetch+0x5e84>)
 8007268:	461c      	mov	r4, r3
 800726a:	4613      	mov	r3, r2
 800726c:	cb07      	ldmia	r3!, {r0, r1, r2}
 800726e:	6020      	str	r0, [r4, #0]
 8007270:	6061      	str	r1, [r4, #4]
 8007272:	60a2      	str	r2, [r4, #8]
 8007274:	881b      	ldrh	r3, [r3, #0]
 8007276:	81a3      	strh	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,e");
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800727e:	499b      	ldr	r1, [pc, #620]	; (80074ec <problem_fetch+0x5e88>)
 8007280:	461a      	mov	r2, r3
 8007282:	460b      	mov	r3, r1
 8007284:	cb03      	ldmia	r3!, {r0, r1}
 8007286:	6010      	str	r0, [r2, #0]
 8007288:	6051      	str	r1, [r2, #4]
 800728a:	881b      	ldrh	r3, [r3, #0]
 800728c:	8113      	strh	r3, [r2, #8]
			break;
 800728e:	f015 b919 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 153 :
			strcpy(p->name,"THE FORGOTTEN ONES");
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8007298:	4a95      	ldr	r2, [pc, #596]	; (80074f0 <problem_fetch+0x5e8c>)
 800729a:	461d      	mov	r5, r3
 800729c:	4614      	mov	r4, r2
 800729e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80072a0:	6028      	str	r0, [r5, #0]
 80072a2:	6069      	str	r1, [r5, #4]
 80072a4:	60aa      	str	r2, [r5, #8]
 80072a6:	60eb      	str	r3, [r5, #12]
 80072a8:	8823      	ldrh	r3, [r4, #0]
 80072aa:	78a2      	ldrb	r2, [r4, #2]
 80072ac:	822b      	strh	r3, [r5, #16]
 80072ae:	4613      	mov	r3, r2
 80072b0:	74ab      	strb	r3, [r5, #18]
			strcpy(p->grade,"7A+");
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80072b8:	4a8e      	ldr	r2, [pc, #568]	; (80074f4 <problem_fetch+0x5e90>)
 80072ba:	6810      	ldr	r0, [r2, #0]
 80072bc:	6018      	str	r0, [r3, #0]
			p->moveSize = 8;
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	2208      	movs	r2, #8
 80072c2:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"C,B,A,F,F,K,I,I");
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	33a4      	adds	r3, #164	; 0xa4
 80072c8:	4a8b      	ldr	r2, [pc, #556]	; (80074f8 <problem_fetch+0x5e94>)
 80072ca:	461c      	mov	r4, r3
 80072cc:	4615      	mov	r5, r2
 80072ce:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80072d0:	6020      	str	r0, [r4, #0]
 80072d2:	6061      	str	r1, [r4, #4]
 80072d4:	60a2      	str	r2, [r4, #8]
 80072d6:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,6,9,11,13,14,15,18");
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	3304      	adds	r3, #4
 80072dc:	4a87      	ldr	r2, [pc, #540]	; (80074fc <problem_fetch+0x5e98>)
 80072de:	461d      	mov	r5, r3
 80072e0:	4614      	mov	r4, r2
 80072e2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80072e4:	6028      	str	r0, [r5, #0]
 80072e6:	6069      	str	r1, [r5, #4]
 80072e8:	60aa      	str	r2, [r5, #8]
 80072ea:	60eb      	str	r3, [r5, #12]
 80072ec:	6820      	ldr	r0, [r4, #0]
 80072ee:	6128      	str	r0, [r5, #16]
 80072f0:	7923      	ldrb	r3, [r4, #4]
 80072f2:	752b      	strb	r3, [r5, #20]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,e");
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 80072fa:	4a81      	ldr	r2, [pc, #516]	; (8007500 <problem_fetch+0x5e9c>)
 80072fc:	461c      	mov	r4, r3
 80072fe:	4615      	mov	r5, r2
 8007300:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007302:	6020      	str	r0, [r4, #0]
 8007304:	6061      	str	r1, [r4, #4]
 8007306:	60a2      	str	r2, [r4, #8]
 8007308:	60e3      	str	r3, [r4, #12]
			break;
 800730a:	f015 b8db 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 154 :
			strcpy(p->name,"BLUE BOWLS");
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8007314:	497b      	ldr	r1, [pc, #492]	; (8007504 <problem_fetch+0x5ea0>)
 8007316:	461a      	mov	r2, r3
 8007318:	460b      	mov	r3, r1
 800731a:	cb03      	ldmia	r3!, {r0, r1}
 800731c:	6010      	str	r0, [r2, #0]
 800731e:	6051      	str	r1, [r2, #4]
 8007320:	8819      	ldrh	r1, [r3, #0]
 8007322:	789b      	ldrb	r3, [r3, #2]
 8007324:	8111      	strh	r1, [r2, #8]
 8007326:	7293      	strb	r3, [r2, #10]
			strcpy(p->grade,"6C+");
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800732e:	4a76      	ldr	r2, [pc, #472]	; (8007508 <problem_fetch+0x5ea4>)
 8007330:	6810      	ldr	r0, [r2, #0]
 8007332:	6018      	str	r0, [r3, #0]
			p->moveSize = 8;
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	2208      	movs	r2, #8
 8007338:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,E,I,H,G,D,H,J");
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	33a4      	adds	r3, #164	; 0xa4
 800733e:	4a73      	ldr	r2, [pc, #460]	; (800750c <problem_fetch+0x5ea8>)
 8007340:	461c      	mov	r4, r3
 8007342:	4615      	mov	r5, r2
 8007344:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007346:	6020      	str	r0, [r4, #0]
 8007348:	6061      	str	r1, [r4, #4]
 800734a:	60a2      	str	r2, [r4, #8]
 800734c:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"9,12,14,16,17,18,5,5");
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	3304      	adds	r3, #4
 8007352:	4a6f      	ldr	r2, [pc, #444]	; (8007510 <problem_fetch+0x5eac>)
 8007354:	461d      	mov	r5, r3
 8007356:	4614      	mov	r4, r2
 8007358:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800735a:	6028      	str	r0, [r5, #0]
 800735c:	6069      	str	r1, [r5, #4]
 800735e:	60aa      	str	r2, [r5, #8]
 8007360:	60eb      	str	r3, [r5, #12]
 8007362:	6820      	ldr	r0, [r4, #0]
 8007364:	6128      	str	r0, [r5, #16]
 8007366:	7923      	ldrb	r3, [r4, #4]
 8007368:	752b      	strb	r3, [r5, #20]
			strcpy(p->startFinish,"d,d,d,d,d,e,s,s");
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8007370:	4a68      	ldr	r2, [pc, #416]	; (8007514 <problem_fetch+0x5eb0>)
 8007372:	461c      	mov	r4, r3
 8007374:	4615      	mov	r5, r2
 8007376:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007378:	6020      	str	r0, [r4, #0]
 800737a:	6061      	str	r1, [r4, #4]
 800737c:	60a2      	str	r2, [r4, #8]
 800737e:	60e3      	str	r3, [r4, #12]
			break;
 8007380:	f015 b8a0 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 155 :
			strcpy(p->name,"GILDA");
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800738a:	4a63      	ldr	r2, [pc, #396]	; (8007518 <problem_fetch+0x5eb4>)
 800738c:	6810      	ldr	r0, [r2, #0]
 800738e:	6018      	str	r0, [r3, #0]
 8007390:	8892      	ldrh	r2, [r2, #4]
 8007392:	809a      	strh	r2, [r3, #4]
			strcpy(p->grade,"6C");
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800739a:	4a60      	ldr	r2, [pc, #384]	; (800751c <problem_fetch+0x5eb8>)
 800739c:	8811      	ldrh	r1, [r2, #0]
 800739e:	7892      	ldrb	r2, [r2, #2]
 80073a0:	8019      	strh	r1, [r3, #0]
 80073a2:	709a      	strb	r2, [r3, #2]
			p->moveSize = 8;
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	2208      	movs	r2, #8
 80073a8:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,G,J,G,E,I,H,I");
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	33a4      	adds	r3, #164	; 0xa4
 80073ae:	4a5c      	ldr	r2, [pc, #368]	; (8007520 <problem_fetch+0x5ebc>)
 80073b0:	461c      	mov	r4, r3
 80073b2:	4615      	mov	r5, r2
 80073b4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80073b6:	6020      	str	r0, [r4, #0]
 80073b8:	6061      	str	r1, [r4, #4]
 80073ba:	60a2      	str	r2, [r4, #8]
 80073bc:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,6,7,9,12,14,16,18");
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	3304      	adds	r3, #4
 80073c2:	4a58      	ldr	r2, [pc, #352]	; (8007524 <problem_fetch+0x5ec0>)
 80073c4:	461d      	mov	r5, r3
 80073c6:	4614      	mov	r4, r2
 80073c8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80073ca:	6028      	str	r0, [r5, #0]
 80073cc:	6069      	str	r1, [r5, #4]
 80073ce:	60aa      	str	r2, [r5, #8]
 80073d0:	60eb      	str	r3, [r5, #12]
 80073d2:	6820      	ldr	r0, [r4, #0]
 80073d4:	6128      	str	r0, [r5, #16]
			strcpy(p->startFinish,"s,d,d,d,d,d,d,e");
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 80073dc:	4a52      	ldr	r2, [pc, #328]	; (8007528 <problem_fetch+0x5ec4>)
 80073de:	461c      	mov	r4, r3
 80073e0:	4615      	mov	r5, r2
 80073e2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80073e4:	6020      	str	r0, [r4, #0]
 80073e6:	6061      	str	r1, [r4, #4]
 80073e8:	60a2      	str	r2, [r4, #8]
 80073ea:	60e3      	str	r3, [r4, #12]
			break;
 80073ec:	f015 b86a 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 156 :
			strcpy(p->name,"DARK HORSE");
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80073f6:	494d      	ldr	r1, [pc, #308]	; (800752c <problem_fetch+0x5ec8>)
 80073f8:	461a      	mov	r2, r3
 80073fa:	460b      	mov	r3, r1
 80073fc:	cb03      	ldmia	r3!, {r0, r1}
 80073fe:	6010      	str	r0, [r2, #0]
 8007400:	6051      	str	r1, [r2, #4]
 8007402:	8819      	ldrh	r1, [r3, #0]
 8007404:	789b      	ldrb	r3, [r3, #2]
 8007406:	8111      	strh	r1, [r2, #8]
 8007408:	7293      	strb	r3, [r2, #10]
			strcpy(p->grade,"7B+");
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8007410:	4a47      	ldr	r2, [pc, #284]	; (8007530 <problem_fetch+0x5ecc>)
 8007412:	6810      	ldr	r0, [r2, #0]
 8007414:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	2207      	movs	r2, #7
 800741a:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"C,G,H,F,I,D,E");
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	33a4      	adds	r3, #164	; 0xa4
 8007420:	4a44      	ldr	r2, [pc, #272]	; (8007534 <problem_fetch+0x5ed0>)
 8007422:	461c      	mov	r4, r3
 8007424:	4613      	mov	r3, r2
 8007426:	cb07      	ldmia	r3!, {r0, r1, r2}
 8007428:	6020      	str	r0, [r4, #0]
 800742a:	6061      	str	r1, [r4, #4]
 800742c:	60a2      	str	r2, [r4, #8]
 800742e:	881b      	ldrh	r3, [r3, #0]
 8007430:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,6,8,13,10,18,16");
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	3304      	adds	r3, #4
 8007436:	4a40      	ldr	r2, [pc, #256]	; (8007538 <problem_fetch+0x5ed4>)
 8007438:	461d      	mov	r5, r3
 800743a:	4614      	mov	r4, r2
 800743c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800743e:	6028      	str	r0, [r5, #0]
 8007440:	6069      	str	r1, [r5, #4]
 8007442:	60aa      	str	r2, [r5, #8]
 8007444:	60eb      	str	r3, [r5, #12]
 8007446:	8823      	ldrh	r3, [r4, #0]
 8007448:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,d,d,d,d,e,d");
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8007450:	4a3a      	ldr	r2, [pc, #232]	; (800753c <problem_fetch+0x5ed8>)
 8007452:	461c      	mov	r4, r3
 8007454:	4613      	mov	r3, r2
 8007456:	cb07      	ldmia	r3!, {r0, r1, r2}
 8007458:	6020      	str	r0, [r4, #0]
 800745a:	6061      	str	r1, [r4, #4]
 800745c:	60a2      	str	r2, [r4, #8]
 800745e:	881b      	ldrh	r3, [r3, #0]
 8007460:	81a3      	strh	r3, [r4, #12]
			break;
 8007462:	f015 b82f 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 157 :
			strcpy(p->name,"LAP OF LUXURY");
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800746c:	4a34      	ldr	r2, [pc, #208]	; (8007540 <problem_fetch+0x5edc>)
 800746e:	461c      	mov	r4, r3
 8007470:	4613      	mov	r3, r2
 8007472:	cb07      	ldmia	r3!, {r0, r1, r2}
 8007474:	6020      	str	r0, [r4, #0]
 8007476:	6061      	str	r1, [r4, #4]
 8007478:	60a2      	str	r2, [r4, #8]
 800747a:	881b      	ldrh	r3, [r3, #0]
 800747c:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade,"6C+");
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8007484:	4a20      	ldr	r2, [pc, #128]	; (8007508 <problem_fetch+0x5ea4>)
 8007486:	6810      	ldr	r0, [r2, #0]
 8007488:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	2207      	movs	r2, #7
 800748e:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"H,D,E,B,E,E,I");
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	33a4      	adds	r3, #164	; 0xa4
 8007494:	4a2b      	ldr	r2, [pc, #172]	; (8007544 <problem_fetch+0x5ee0>)
 8007496:	461c      	mov	r4, r3
 8007498:	4613      	mov	r3, r2
 800749a:	cb07      	ldmia	r3!, {r0, r1, r2}
 800749c:	6020      	str	r0, [r4, #0]
 800749e:	6061      	str	r1, [r4, #4]
 80074a0:	60a2      	str	r2, [r4, #8]
 80074a2:	881b      	ldrh	r3, [r3, #0]
 80074a4:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,7,9,10,12,16,18");
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	3304      	adds	r3, #4
 80074aa:	4a27      	ldr	r2, [pc, #156]	; (8007548 <problem_fetch+0x5ee4>)
 80074ac:	461d      	mov	r5, r3
 80074ae:	4614      	mov	r4, r2
 80074b0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80074b2:	6028      	str	r0, [r5, #0]
 80074b4:	6069      	str	r1, [r5, #4]
 80074b6:	60aa      	str	r2, [r5, #8]
 80074b8:	60eb      	str	r3, [r5, #12]
 80074ba:	8823      	ldrh	r3, [r4, #0]
 80074bc:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 80074c4:	4a21      	ldr	r2, [pc, #132]	; (800754c <problem_fetch+0x5ee8>)
 80074c6:	461c      	mov	r4, r3
 80074c8:	4613      	mov	r3, r2
 80074ca:	cb07      	ldmia	r3!, {r0, r1, r2}
 80074cc:	6020      	str	r0, [r4, #0]
 80074ce:	6061      	str	r1, [r4, #4]
 80074d0:	60a2      	str	r2, [r4, #8]
 80074d2:	881b      	ldrh	r3, [r3, #0]
 80074d4:	81a3      	strh	r3, [r4, #12]
			break;
 80074d6:	f014 bff5 	b.w	801c4c4 <problem_fetch+0x1ae60>
 80074da:	bf00      	nop
 80074dc:	080259f0 	.word	0x080259f0
 80074e0:	08023ae4 	.word	0x08023ae4
 80074e4:	080259f8 	.word	0x080259f8
 80074e8:	08025a04 	.word	0x08025a04
 80074ec:	08023ff0 	.word	0x08023ff0
 80074f0:	08025a14 	.word	0x08025a14
 80074f4:	08023cc4 	.word	0x08023cc4
 80074f8:	08025a28 	.word	0x08025a28
 80074fc:	08025a38 	.word	0x08025a38
 8007500:	08023c48 	.word	0x08023c48
 8007504:	08025a50 	.word	0x08025a50
 8007508:	08023bbc 	.word	0x08023bbc
 800750c:	08025a5c 	.word	0x08025a5c
 8007510:	08025a6c 	.word	0x08025a6c
 8007514:	08025a84 	.word	0x08025a84
 8007518:	08025a94 	.word	0x08025a94
 800751c:	08023bf0 	.word	0x08023bf0
 8007520:	08025a9c 	.word	0x08025a9c
 8007524:	08025aac 	.word	0x08025aac
 8007528:	08023d34 	.word	0x08023d34
 800752c:	08025ac0 	.word	0x08025ac0
 8007530:	08023c60 	.word	0x08023c60
 8007534:	08025acc 	.word	0x08025acc
 8007538:	08025adc 	.word	0x08025adc
 800753c:	08024c8c 	.word	0x08024c8c
 8007540:	08025af0 	.word	0x08025af0
 8007544:	08025b00 	.word	0x08025b00
 8007548:	08025b10 	.word	0x08025b10
 800754c:	08023cac 	.word	0x08023cac
		case 158 :
			strcpy(p->name,"EASE OF ACCESS");
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8007556:	4aab      	ldr	r2, [pc, #684]	; (8007804 <problem_fetch+0x61a0>)
 8007558:	461c      	mov	r4, r3
 800755a:	4613      	mov	r3, r2
 800755c:	cb07      	ldmia	r3!, {r0, r1, r2}
 800755e:	6020      	str	r0, [r4, #0]
 8007560:	6061      	str	r1, [r4, #4]
 8007562:	60a2      	str	r2, [r4, #8]
 8007564:	881a      	ldrh	r2, [r3, #0]
 8007566:	789b      	ldrb	r3, [r3, #2]
 8007568:	81a2      	strh	r2, [r4, #12]
 800756a:	73a3      	strb	r3, [r4, #14]
			strcpy(p->grade,"6C+");
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8007572:	4aa5      	ldr	r2, [pc, #660]	; (8007808 <problem_fetch+0x61a4>)
 8007574:	6810      	ldr	r0, [r2, #0]
 8007576:	6018      	str	r0, [r3, #0]
			p->moveSize = 9;
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	2209      	movs	r2, #9
 800757c:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"H,K,J,E,J,J,H,E,D");
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	33a4      	adds	r3, #164	; 0xa4
 8007582:	4aa2      	ldr	r2, [pc, #648]	; (800780c <problem_fetch+0x61a8>)
 8007584:	461d      	mov	r5, r3
 8007586:	4614      	mov	r4, r2
 8007588:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800758a:	6028      	str	r0, [r5, #0]
 800758c:	6069      	str	r1, [r5, #4]
 800758e:	60aa      	str	r2, [r5, #8]
 8007590:	60eb      	str	r3, [r5, #12]
 8007592:	8823      	ldrh	r3, [r4, #0]
 8007594:	822b      	strh	r3, [r5, #16]
			strcpy(p->moveNumbers,"5,9,7,9,13,16,16,16,18");
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	3304      	adds	r3, #4
 800759a:	4a9d      	ldr	r2, [pc, #628]	; (8007810 <problem_fetch+0x61ac>)
 800759c:	461c      	mov	r4, r3
 800759e:	4615      	mov	r5, r2
 80075a0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80075a2:	6020      	str	r0, [r4, #0]
 80075a4:	6061      	str	r1, [r4, #4]
 80075a6:	60a2      	str	r2, [r4, #8]
 80075a8:	60e3      	str	r3, [r4, #12]
 80075aa:	6828      	ldr	r0, [r5, #0]
 80075ac:	6120      	str	r0, [r4, #16]
 80075ae:	88ab      	ldrh	r3, [r5, #4]
 80075b0:	79aa      	ldrb	r2, [r5, #6]
 80075b2:	82a3      	strh	r3, [r4, #20]
 80075b4:	4613      	mov	r3, r2
 80075b6:	75a3      	strb	r3, [r4, #22]
			strcpy(p->startFinish,"s,d,d,d,d,d,d,d,e");
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 80075be:	4a95      	ldr	r2, [pc, #596]	; (8007814 <problem_fetch+0x61b0>)
 80075c0:	461d      	mov	r5, r3
 80075c2:	4614      	mov	r4, r2
 80075c4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80075c6:	6028      	str	r0, [r5, #0]
 80075c8:	6069      	str	r1, [r5, #4]
 80075ca:	60aa      	str	r2, [r5, #8]
 80075cc:	60eb      	str	r3, [r5, #12]
 80075ce:	8823      	ldrh	r3, [r4, #0]
 80075d0:	822b      	strh	r3, [r5, #16]
			break;
 80075d2:	f014 bf77 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 159 :
			strcpy(p->name,"OLYMPUS");
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80075dc:	498e      	ldr	r1, [pc, #568]	; (8007818 <problem_fetch+0x61b4>)
 80075de:	461a      	mov	r2, r3
 80075e0:	460b      	mov	r3, r1
 80075e2:	cb03      	ldmia	r3!, {r0, r1}
 80075e4:	6010      	str	r0, [r2, #0]
 80075e6:	6051      	str	r1, [r2, #4]
			strcpy(p->grade,"7C");
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80075ee:	4a8b      	ldr	r2, [pc, #556]	; (800781c <problem_fetch+0x61b8>)
 80075f0:	8811      	ldrh	r1, [r2, #0]
 80075f2:	7892      	ldrb	r2, [r2, #2]
 80075f4:	8019      	strh	r1, [r3, #0]
 80075f6:	709a      	strb	r2, [r3, #2]
			p->moveSize = 7;
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	2207      	movs	r2, #7
 80075fc:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"H,B,E,D,F,G,I");
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	33a4      	adds	r3, #164	; 0xa4
 8007602:	4a87      	ldr	r2, [pc, #540]	; (8007820 <problem_fetch+0x61bc>)
 8007604:	461c      	mov	r4, r3
 8007606:	4613      	mov	r3, r2
 8007608:	cb07      	ldmia	r3!, {r0, r1, r2}
 800760a:	6020      	str	r0, [r4, #0]
 800760c:	6061      	str	r1, [r4, #4]
 800760e:	60a2      	str	r2, [r4, #8]
 8007610:	881b      	ldrh	r3, [r3, #0]
 8007612:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,6,9,11,13,15,18");
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	3304      	adds	r3, #4
 8007618:	4a82      	ldr	r2, [pc, #520]	; (8007824 <problem_fetch+0x61c0>)
 800761a:	461d      	mov	r5, r3
 800761c:	4614      	mov	r4, r2
 800761e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007620:	6028      	str	r0, [r5, #0]
 8007622:	6069      	str	r1, [r5, #4]
 8007624:	60aa      	str	r2, [r5, #8]
 8007626:	60eb      	str	r3, [r5, #12]
 8007628:	8823      	ldrh	r3, [r4, #0]
 800762a:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8007632:	4a7d      	ldr	r2, [pc, #500]	; (8007828 <problem_fetch+0x61c4>)
 8007634:	461c      	mov	r4, r3
 8007636:	4613      	mov	r3, r2
 8007638:	cb07      	ldmia	r3!, {r0, r1, r2}
 800763a:	6020      	str	r0, [r4, #0]
 800763c:	6061      	str	r1, [r4, #4]
 800763e:	60a2      	str	r2, [r4, #8]
 8007640:	881b      	ldrh	r3, [r3, #0]
 8007642:	81a3      	strh	r3, [r4, #12]
			break;
 8007644:	f014 bf3e 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 160 :
			strcpy(p->name,"FRUIT CAKE");
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800764e:	4977      	ldr	r1, [pc, #476]	; (800782c <problem_fetch+0x61c8>)
 8007650:	461a      	mov	r2, r3
 8007652:	460b      	mov	r3, r1
 8007654:	cb03      	ldmia	r3!, {r0, r1}
 8007656:	6010      	str	r0, [r2, #0]
 8007658:	6051      	str	r1, [r2, #4]
 800765a:	8819      	ldrh	r1, [r3, #0]
 800765c:	789b      	ldrb	r3, [r3, #2]
 800765e:	8111      	strh	r1, [r2, #8]
 8007660:	7293      	strb	r3, [r2, #10]
			strcpy(p->grade,"6B+");
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8007668:	4a71      	ldr	r2, [pc, #452]	; (8007830 <problem_fetch+0x61cc>)
 800766a:	6810      	ldr	r0, [r2, #0]
 800766c:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	2206      	movs	r2, #6
 8007672:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,E,F,E,D,D");
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	33a4      	adds	r3, #164	; 0xa4
 8007678:	4a6e      	ldr	r2, [pc, #440]	; (8007834 <problem_fetch+0x61d0>)
 800767a:	461c      	mov	r4, r3
 800767c:	4613      	mov	r3, r2
 800767e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8007680:	6020      	str	r0, [r4, #0]
 8007682:	6061      	str	r1, [r4, #4]
 8007684:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,8,11,12,15,18");
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	3304      	adds	r3, #4
 800768a:	4a6b      	ldr	r2, [pc, #428]	; (8007838 <problem_fetch+0x61d4>)
 800768c:	461c      	mov	r4, r3
 800768e:	4615      	mov	r5, r2
 8007690:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007692:	6020      	str	r0, [r4, #0]
 8007694:	6061      	str	r1, [r4, #4]
 8007696:	60a2      	str	r2, [r4, #8]
 8007698:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 80076a0:	4a66      	ldr	r2, [pc, #408]	; (800783c <problem_fetch+0x61d8>)
 80076a2:	461c      	mov	r4, r3
 80076a4:	4613      	mov	r3, r2
 80076a6:	cb07      	ldmia	r3!, {r0, r1, r2}
 80076a8:	6020      	str	r0, [r4, #0]
 80076aa:	6061      	str	r1, [r4, #4]
 80076ac:	60a2      	str	r2, [r4, #8]
			break;
 80076ae:	f014 bf09 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 161 :
			strcpy(p->name,"LA MARY ME PAGA");
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80076b8:	4a61      	ldr	r2, [pc, #388]	; (8007840 <problem_fetch+0x61dc>)
 80076ba:	461c      	mov	r4, r3
 80076bc:	4615      	mov	r5, r2
 80076be:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80076c0:	6020      	str	r0, [r4, #0]
 80076c2:	6061      	str	r1, [r4, #4]
 80076c4:	60a2      	str	r2, [r4, #8]
 80076c6:	60e3      	str	r3, [r4, #12]
			strcpy(p->grade,"7B");
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80076ce:	4a5d      	ldr	r2, [pc, #372]	; (8007844 <problem_fetch+0x61e0>)
 80076d0:	8811      	ldrh	r1, [r2, #0]
 80076d2:	7892      	ldrb	r2, [r2, #2]
 80076d4:	8019      	strh	r1, [r3, #0]
 80076d6:	709a      	strb	r2, [r3, #2]
			p->moveSize = 6;
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	2206      	movs	r2, #6
 80076dc:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"C,E,E,B,E,D");
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	33a4      	adds	r3, #164	; 0xa4
 80076e2:	4a59      	ldr	r2, [pc, #356]	; (8007848 <problem_fetch+0x61e4>)
 80076e4:	461c      	mov	r4, r3
 80076e6:	4613      	mov	r3, r2
 80076e8:	cb07      	ldmia	r3!, {r0, r1, r2}
 80076ea:	6020      	str	r0, [r4, #0]
 80076ec:	6061      	str	r1, [r4, #4]
 80076ee:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,6,9,10,14,18");
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	3304      	adds	r3, #4
 80076f4:	4a55      	ldr	r2, [pc, #340]	; (800784c <problem_fetch+0x61e8>)
 80076f6:	461c      	mov	r4, r3
 80076f8:	4613      	mov	r3, r2
 80076fa:	cb07      	ldmia	r3!, {r0, r1, r2}
 80076fc:	6020      	str	r0, [r4, #0]
 80076fe:	6061      	str	r1, [r4, #4]
 8007700:	60a2      	str	r2, [r4, #8]
 8007702:	881a      	ldrh	r2, [r3, #0]
 8007704:	789b      	ldrb	r3, [r3, #2]
 8007706:	81a2      	strh	r2, [r4, #12]
 8007708:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish,"s,s,d,d,d,e");
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8007710:	4a4f      	ldr	r2, [pc, #316]	; (8007850 <problem_fetch+0x61ec>)
 8007712:	461c      	mov	r4, r3
 8007714:	4613      	mov	r3, r2
 8007716:	cb07      	ldmia	r3!, {r0, r1, r2}
 8007718:	6020      	str	r0, [r4, #0]
 800771a:	6061      	str	r1, [r4, #4]
 800771c:	60a2      	str	r2, [r4, #8]
			break;
 800771e:	f014 bed1 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 162 :
			strcpy(p->name,"WILD BILL");
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8007728:	494a      	ldr	r1, [pc, #296]	; (8007854 <problem_fetch+0x61f0>)
 800772a:	461a      	mov	r2, r3
 800772c:	460b      	mov	r3, r1
 800772e:	cb03      	ldmia	r3!, {r0, r1}
 8007730:	6010      	str	r0, [r2, #0]
 8007732:	6051      	str	r1, [r2, #4]
 8007734:	881b      	ldrh	r3, [r3, #0]
 8007736:	8113      	strh	r3, [r2, #8]
			strcpy(p->grade,"7B");
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800773e:	4a41      	ldr	r2, [pc, #260]	; (8007844 <problem_fetch+0x61e0>)
 8007740:	8811      	ldrh	r1, [r2, #0]
 8007742:	7892      	ldrb	r2, [r2, #2]
 8007744:	8019      	strh	r1, [r3, #0]
 8007746:	709a      	strb	r2, [r3, #2]
			p->moveSize = 6;
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	2206      	movs	r2, #6
 800774c:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"H,K,G,D,D,A");
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	33a4      	adds	r3, #164	; 0xa4
 8007752:	4a41      	ldr	r2, [pc, #260]	; (8007858 <problem_fetch+0x61f4>)
 8007754:	461c      	mov	r4, r3
 8007756:	4613      	mov	r3, r2
 8007758:	cb07      	ldmia	r3!, {r0, r1, r2}
 800775a:	6020      	str	r0, [r4, #0]
 800775c:	6061      	str	r1, [r4, #4]
 800775e:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,9,14,15,18,18");
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	3304      	adds	r3, #4
 8007764:	4a3d      	ldr	r2, [pc, #244]	; (800785c <problem_fetch+0x61f8>)
 8007766:	461c      	mov	r4, r3
 8007768:	4615      	mov	r5, r2
 800776a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800776c:	6020      	str	r0, [r4, #0]
 800776e:	6061      	str	r1, [r4, #4]
 8007770:	60a2      	str	r2, [r4, #8]
 8007772:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,e,e");
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800777a:	4a39      	ldr	r2, [pc, #228]	; (8007860 <problem_fetch+0x61fc>)
 800777c:	461c      	mov	r4, r3
 800777e:	4613      	mov	r3, r2
 8007780:	cb07      	ldmia	r3!, {r0, r1, r2}
 8007782:	6020      	str	r0, [r4, #0]
 8007784:	6061      	str	r1, [r4, #4]
 8007786:	60a2      	str	r2, [r4, #8]
			break;
 8007788:	f014 be9c 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 163 :
			strcpy(p->name,"DARK DAYS");
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8007792:	4934      	ldr	r1, [pc, #208]	; (8007864 <problem_fetch+0x6200>)
 8007794:	461a      	mov	r2, r3
 8007796:	460b      	mov	r3, r1
 8007798:	cb03      	ldmia	r3!, {r0, r1}
 800779a:	6010      	str	r0, [r2, #0]
 800779c:	6051      	str	r1, [r2, #4]
 800779e:	881b      	ldrh	r3, [r3, #0]
 80077a0:	8113      	strh	r3, [r2, #8]
			strcpy(p->grade,"7A+");
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80077a8:	4a2f      	ldr	r2, [pc, #188]	; (8007868 <problem_fetch+0x6204>)
 80077aa:	6810      	ldr	r0, [r2, #0]
 80077ac:	6018      	str	r0, [r3, #0]
			p->moveSize = 9;
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	2209      	movs	r2, #9
 80077b2:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"B,D,B,E,D,I,K,I,I");
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	33a4      	adds	r3, #164	; 0xa4
 80077b8:	4a2c      	ldr	r2, [pc, #176]	; (800786c <problem_fetch+0x6208>)
 80077ba:	461d      	mov	r5, r3
 80077bc:	4614      	mov	r4, r2
 80077be:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80077c0:	6028      	str	r0, [r5, #0]
 80077c2:	6069      	str	r1, [r5, #4]
 80077c4:	60aa      	str	r2, [r5, #8]
 80077c6:	60eb      	str	r3, [r5, #12]
 80077c8:	8823      	ldrh	r3, [r4, #0]
 80077ca:	822b      	strh	r3, [r5, #16]
			strcpy(p->moveNumbers,"6,7,10,14,15,15,14,18,7");
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	3304      	adds	r3, #4
 80077d0:	4a27      	ldr	r2, [pc, #156]	; (8007870 <problem_fetch+0x620c>)
 80077d2:	461d      	mov	r5, r3
 80077d4:	4614      	mov	r4, r2
 80077d6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80077d8:	6028      	str	r0, [r5, #0]
 80077da:	6069      	str	r1, [r5, #4]
 80077dc:	60aa      	str	r2, [r5, #8]
 80077de:	60eb      	str	r3, [r5, #12]
 80077e0:	cc03      	ldmia	r4!, {r0, r1}
 80077e2:	6128      	str	r0, [r5, #16]
 80077e4:	6169      	str	r1, [r5, #20]
			strcpy(p->startFinish,"s,d,d,d,d,d,d,e,d");
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 80077ec:	4a21      	ldr	r2, [pc, #132]	; (8007874 <problem_fetch+0x6210>)
 80077ee:	461d      	mov	r5, r3
 80077f0:	4614      	mov	r4, r2
 80077f2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80077f4:	6028      	str	r0, [r5, #0]
 80077f6:	6069      	str	r1, [r5, #4]
 80077f8:	60aa      	str	r2, [r5, #8]
 80077fa:	60eb      	str	r3, [r5, #12]
 80077fc:	8823      	ldrh	r3, [r4, #0]
 80077fe:	822b      	strh	r3, [r5, #16]
			break;
 8007800:	f014 be60 	b.w	801c4c4 <problem_fetch+0x1ae60>
 8007804:	08025b24 	.word	0x08025b24
 8007808:	08023bbc 	.word	0x08023bbc
 800780c:	08025b34 	.word	0x08025b34
 8007810:	08025b48 	.word	0x08025b48
 8007814:	080259dc 	.word	0x080259dc
 8007818:	08025b60 	.word	0x08025b60
 800781c:	08024358 	.word	0x08024358
 8007820:	08025b68 	.word	0x08025b68
 8007824:	08025b78 	.word	0x08025b78
 8007828:	08023cac 	.word	0x08023cac
 800782c:	08025b8c 	.word	0x08025b8c
 8007830:	08023b24 	.word	0x08023b24
 8007834:	08025b98 	.word	0x08025b98
 8007838:	08025ba4 	.word	0x08025ba4
 800783c:	08023ec0 	.word	0x08023ec0
 8007840:	08025bb4 	.word	0x08025bb4
 8007844:	0802421c 	.word	0x0802421c
 8007848:	08025bc4 	.word	0x08025bc4
 800784c:	08025bd0 	.word	0x08025bd0
 8007850:	08023b04 	.word	0x08023b04
 8007854:	08025be0 	.word	0x08025be0
 8007858:	08025bec 	.word	0x08025bec
 800785c:	08025bf8 	.word	0x08025bf8
 8007860:	08025c08 	.word	0x08025c08
 8007864:	08025c14 	.word	0x08025c14
 8007868:	08023cc4 	.word	0x08023cc4
 800786c:	08025c20 	.word	0x08025c20
 8007870:	08025c34 	.word	0x08025c34
 8007874:	08025c4c 	.word	0x08025c4c
		case 164 :
			strcpy(p->name,"PINPANPUN");
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800787e:	49a8      	ldr	r1, [pc, #672]	; (8007b20 <problem_fetch+0x64bc>)
 8007880:	461a      	mov	r2, r3
 8007882:	460b      	mov	r3, r1
 8007884:	cb03      	ldmia	r3!, {r0, r1}
 8007886:	6010      	str	r0, [r2, #0]
 8007888:	6051      	str	r1, [r2, #4]
 800788a:	881b      	ldrh	r3, [r3, #0]
 800788c:	8113      	strh	r3, [r2, #8]
			strcpy(p->grade,"7A+");
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8007894:	4aa3      	ldr	r2, [pc, #652]	; (8007b24 <problem_fetch+0x64c0>)
 8007896:	6810      	ldr	r0, [r2, #0]
 8007898:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	2207      	movs	r2, #7
 800789e:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"B,C,E,A,E,A,D");
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	33a4      	adds	r3, #164	; 0xa4
 80078a4:	4aa0      	ldr	r2, [pc, #640]	; (8007b28 <problem_fetch+0x64c4>)
 80078a6:	461c      	mov	r4, r3
 80078a8:	4613      	mov	r3, r2
 80078aa:	cb07      	ldmia	r3!, {r0, r1, r2}
 80078ac:	6020      	str	r0, [r4, #0]
 80078ae:	6061      	str	r1, [r4, #4]
 80078b0:	60a2      	str	r2, [r4, #8]
 80078b2:	881b      	ldrh	r3, [r3, #0]
 80078b4:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"6,5,9,9,12,14,18");
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	3304      	adds	r3, #4
 80078ba:	4a9c      	ldr	r2, [pc, #624]	; (8007b2c <problem_fetch+0x64c8>)
 80078bc:	461d      	mov	r5, r3
 80078be:	4614      	mov	r4, r2
 80078c0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80078c2:	6028      	str	r0, [r5, #0]
 80078c4:	6069      	str	r1, [r5, #4]
 80078c6:	60aa      	str	r2, [r5, #8]
 80078c8:	60eb      	str	r3, [r5, #12]
 80078ca:	7823      	ldrb	r3, [r4, #0]
 80078cc:	742b      	strb	r3, [r5, #16]
			strcpy(p->startFinish,"s,s,d,d,d,d,e");
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 80078d4:	4a96      	ldr	r2, [pc, #600]	; (8007b30 <problem_fetch+0x64cc>)
 80078d6:	461c      	mov	r4, r3
 80078d8:	4613      	mov	r3, r2
 80078da:	cb07      	ldmia	r3!, {r0, r1, r2}
 80078dc:	6020      	str	r0, [r4, #0]
 80078de:	6061      	str	r1, [r4, #4]
 80078e0:	60a2      	str	r2, [r4, #8]
 80078e2:	881b      	ldrh	r3, [r3, #0]
 80078e4:	81a3      	strh	r3, [r4, #12]
			break;
 80078e6:	f014 bded 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 165 :
			strcpy(p->name,"CK");
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80078f0:	4a90      	ldr	r2, [pc, #576]	; (8007b34 <problem_fetch+0x64d0>)
 80078f2:	8811      	ldrh	r1, [r2, #0]
 80078f4:	7892      	ldrb	r2, [r2, #2]
 80078f6:	8019      	strh	r1, [r3, #0]
 80078f8:	709a      	strb	r2, [r3, #2]
			strcpy(p->grade,"6C+");
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8007900:	4a8d      	ldr	r2, [pc, #564]	; (8007b38 <problem_fetch+0x64d4>)
 8007902:	6810      	ldr	r0, [r2, #0]
 8007904:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	2206      	movs	r2, #6
 800790a:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,H,J,F,G,D");
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	33a4      	adds	r3, #164	; 0xa4
 8007910:	4a8a      	ldr	r2, [pc, #552]	; (8007b3c <problem_fetch+0x64d8>)
 8007912:	461c      	mov	r4, r3
 8007914:	4613      	mov	r3, r2
 8007916:	cb07      	ldmia	r3!, {r0, r1, r2}
 8007918:	6020      	str	r0, [r4, #0]
 800791a:	6061      	str	r1, [r4, #4]
 800791c:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,8,12,13,17,18");
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	3304      	adds	r3, #4
 8007922:	4a87      	ldr	r2, [pc, #540]	; (8007b40 <problem_fetch+0x64dc>)
 8007924:	461c      	mov	r4, r3
 8007926:	4615      	mov	r5, r2
 8007928:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800792a:	6020      	str	r0, [r4, #0]
 800792c:	6061      	str	r1, [r4, #4]
 800792e:	60a2      	str	r2, [r4, #8]
 8007930:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8007938:	4a82      	ldr	r2, [pc, #520]	; (8007b44 <problem_fetch+0x64e0>)
 800793a:	461c      	mov	r4, r3
 800793c:	4613      	mov	r3, r2
 800793e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8007940:	6020      	str	r0, [r4, #0]
 8007942:	6061      	str	r1, [r4, #4]
 8007944:	60a2      	str	r2, [r4, #8]
			break;
 8007946:	f014 bdbd 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 166 :
			strcpy(p->name,"TRIO TERNURA");
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8007950:	4a7d      	ldr	r2, [pc, #500]	; (8007b48 <problem_fetch+0x64e4>)
 8007952:	461c      	mov	r4, r3
 8007954:	4613      	mov	r3, r2
 8007956:	cb07      	ldmia	r3!, {r0, r1, r2}
 8007958:	6020      	str	r0, [r4, #0]
 800795a:	6061      	str	r1, [r4, #4]
 800795c:	60a2      	str	r2, [r4, #8]
 800795e:	781b      	ldrb	r3, [r3, #0]
 8007960:	7323      	strb	r3, [r4, #12]
			strcpy(p->grade,"7B+");
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8007968:	4a78      	ldr	r2, [pc, #480]	; (8007b4c <problem_fetch+0x64e8>)
 800796a:	6810      	ldr	r0, [r2, #0]
 800796c:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	2206      	movs	r2, #6
 8007972:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,E,H,E,A,A");
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	33a4      	adds	r3, #164	; 0xa4
 8007978:	4a75      	ldr	r2, [pc, #468]	; (8007b50 <problem_fetch+0x64ec>)
 800797a:	461c      	mov	r4, r3
 800797c:	4613      	mov	r3, r2
 800797e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8007980:	6020      	str	r0, [r4, #0]
 8007982:	6061      	str	r1, [r4, #4]
 8007984:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,6,8,12,14,18");
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	3304      	adds	r3, #4
 800798a:	4a72      	ldr	r2, [pc, #456]	; (8007b54 <problem_fetch+0x64f0>)
 800798c:	461c      	mov	r4, r3
 800798e:	4613      	mov	r3, r2
 8007990:	cb07      	ldmia	r3!, {r0, r1, r2}
 8007992:	6020      	str	r0, [r4, #0]
 8007994:	6061      	str	r1, [r4, #4]
 8007996:	60a2      	str	r2, [r4, #8]
 8007998:	881a      	ldrh	r2, [r3, #0]
 800799a:	789b      	ldrb	r3, [r3, #2]
 800799c:	81a2      	strh	r2, [r4, #12]
 800799e:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 80079a6:	4a67      	ldr	r2, [pc, #412]	; (8007b44 <problem_fetch+0x64e0>)
 80079a8:	461c      	mov	r4, r3
 80079aa:	4613      	mov	r3, r2
 80079ac:	cb07      	ldmia	r3!, {r0, r1, r2}
 80079ae:	6020      	str	r0, [r4, #0]
 80079b0:	6061      	str	r1, [r4, #4]
 80079b2:	60a2      	str	r2, [r4, #8]
			break;
 80079b4:	f014 bd86 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 167 :
			strcpy(p->name,"BLACK PROJECT");
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80079be:	4a66      	ldr	r2, [pc, #408]	; (8007b58 <problem_fetch+0x64f4>)
 80079c0:	461c      	mov	r4, r3
 80079c2:	4613      	mov	r3, r2
 80079c4:	cb07      	ldmia	r3!, {r0, r1, r2}
 80079c6:	6020      	str	r0, [r4, #0]
 80079c8:	6061      	str	r1, [r4, #4]
 80079ca:	60a2      	str	r2, [r4, #8]
 80079cc:	881b      	ldrh	r3, [r3, #0]
 80079ce:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade,"7A");
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80079d6:	4a61      	ldr	r2, [pc, #388]	; (8007b5c <problem_fetch+0x64f8>)
 80079d8:	8811      	ldrh	r1, [r2, #0]
 80079da:	7892      	ldrb	r2, [r2, #2]
 80079dc:	8019      	strh	r1, [r3, #0]
 80079de:	709a      	strb	r2, [r3, #2]
			p->moveSize = 5;
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	2205      	movs	r2, #5
 80079e4:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"H,H,H,H,I");
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	33a4      	adds	r3, #164	; 0xa4
 80079ea:	495d      	ldr	r1, [pc, #372]	; (8007b60 <problem_fetch+0x64fc>)
 80079ec:	461a      	mov	r2, r3
 80079ee:	460b      	mov	r3, r1
 80079f0:	cb03      	ldmia	r3!, {r0, r1}
 80079f2:	6010      	str	r0, [r2, #0]
 80079f4:	6051      	str	r1, [r2, #4]
 80079f6:	881b      	ldrh	r3, [r3, #0]
 80079f8:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"5,10,12,16,18");
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	3304      	adds	r3, #4
 80079fe:	4a59      	ldr	r2, [pc, #356]	; (8007b64 <problem_fetch+0x6500>)
 8007a00:	461c      	mov	r4, r3
 8007a02:	4613      	mov	r3, r2
 8007a04:	cb07      	ldmia	r3!, {r0, r1, r2}
 8007a06:	6020      	str	r0, [r4, #0]
 8007a08:	6061      	str	r1, [r4, #4]
 8007a0a:	60a2      	str	r2, [r4, #8]
 8007a0c:	881b      	ldrh	r3, [r3, #0]
 8007a0e:	81a3      	strh	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,e");
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8007a16:	4954      	ldr	r1, [pc, #336]	; (8007b68 <problem_fetch+0x6504>)
 8007a18:	461a      	mov	r2, r3
 8007a1a:	460b      	mov	r3, r1
 8007a1c:	cb03      	ldmia	r3!, {r0, r1}
 8007a1e:	6010      	str	r0, [r2, #0]
 8007a20:	6051      	str	r1, [r2, #4]
 8007a22:	881b      	ldrh	r3, [r3, #0]
 8007a24:	8113      	strh	r3, [r2, #8]
			break;
 8007a26:	f014 bd4d 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 168 :
			strcpy(p->name,"BLACK-OUT");
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8007a30:	494e      	ldr	r1, [pc, #312]	; (8007b6c <problem_fetch+0x6508>)
 8007a32:	461a      	mov	r2, r3
 8007a34:	460b      	mov	r3, r1
 8007a36:	cb03      	ldmia	r3!, {r0, r1}
 8007a38:	6010      	str	r0, [r2, #0]
 8007a3a:	6051      	str	r1, [r2, #4]
 8007a3c:	881b      	ldrh	r3, [r3, #0]
 8007a3e:	8113      	strh	r3, [r2, #8]
			strcpy(p->grade,"6B+");
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8007a46:	4a4a      	ldr	r2, [pc, #296]	; (8007b70 <problem_fetch+0x650c>)
 8007a48:	6810      	ldr	r0, [r2, #0]
 8007a4a:	6018      	str	r0, [r3, #0]
			p->moveSize = 9;
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	2209      	movs	r2, #9
 8007a50:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,E,E,A,F,B,A,E,D");
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	33a4      	adds	r3, #164	; 0xa4
 8007a56:	4a47      	ldr	r2, [pc, #284]	; (8007b74 <problem_fetch+0x6510>)
 8007a58:	461d      	mov	r5, r3
 8007a5a:	4614      	mov	r4, r2
 8007a5c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007a5e:	6028      	str	r0, [r5, #0]
 8007a60:	6069      	str	r1, [r5, #4]
 8007a62:	60aa      	str	r2, [r5, #8]
 8007a64:	60eb      	str	r3, [r5, #12]
 8007a66:	8823      	ldrh	r3, [r4, #0]
 8007a68:	822b      	strh	r3, [r5, #16]
			strcpy(p->moveNumbers,"4,6,8,9,11,12,14,16,18");
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	3304      	adds	r3, #4
 8007a6e:	4a42      	ldr	r2, [pc, #264]	; (8007b78 <problem_fetch+0x6514>)
 8007a70:	461c      	mov	r4, r3
 8007a72:	4615      	mov	r5, r2
 8007a74:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007a76:	6020      	str	r0, [r4, #0]
 8007a78:	6061      	str	r1, [r4, #4]
 8007a7a:	60a2      	str	r2, [r4, #8]
 8007a7c:	60e3      	str	r3, [r4, #12]
 8007a7e:	6828      	ldr	r0, [r5, #0]
 8007a80:	6120      	str	r0, [r4, #16]
 8007a82:	88ab      	ldrh	r3, [r5, #4]
 8007a84:	79aa      	ldrb	r2, [r5, #6]
 8007a86:	82a3      	strh	r3, [r4, #20]
 8007a88:	4613      	mov	r3, r2
 8007a8a:	75a3      	strb	r3, [r4, #22]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,d,e");
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8007a92:	4a3a      	ldr	r2, [pc, #232]	; (8007b7c <problem_fetch+0x6518>)
 8007a94:	461d      	mov	r5, r3
 8007a96:	4614      	mov	r4, r2
 8007a98:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007a9a:	6028      	str	r0, [r5, #0]
 8007a9c:	6069      	str	r1, [r5, #4]
 8007a9e:	60aa      	str	r2, [r5, #8]
 8007aa0:	60eb      	str	r3, [r5, #12]
 8007aa2:	8823      	ldrh	r3, [r4, #0]
 8007aa4:	822b      	strh	r3, [r5, #16]
			break;
 8007aa6:	f014 bd0d 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 169 :
			strcpy(p->name,"YET ANOTHER WASTE OF SKIN");
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8007ab0:	4a33      	ldr	r2, [pc, #204]	; (8007b80 <problem_fetch+0x651c>)
 8007ab2:	461d      	mov	r5, r3
 8007ab4:	4614      	mov	r4, r2
 8007ab6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007ab8:	6028      	str	r0, [r5, #0]
 8007aba:	6069      	str	r1, [r5, #4]
 8007abc:	60aa      	str	r2, [r5, #8]
 8007abe:	60eb      	str	r3, [r5, #12]
 8007ac0:	cc03      	ldmia	r4!, {r0, r1}
 8007ac2:	6128      	str	r0, [r5, #16]
 8007ac4:	6169      	str	r1, [r5, #20]
 8007ac6:	8823      	ldrh	r3, [r4, #0]
 8007ac8:	832b      	strh	r3, [r5, #24]
			strcpy(p->grade,"7B+");
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8007ad0:	4a1e      	ldr	r2, [pc, #120]	; (8007b4c <problem_fetch+0x64e8>)
 8007ad2:	6810      	ldr	r0, [r2, #0]
 8007ad4:	6018      	str	r0, [r3, #0]
			p->moveSize = 5;
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	2205      	movs	r2, #5
 8007ada:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,I,E,D,A");
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	33a4      	adds	r3, #164	; 0xa4
 8007ae0:	4928      	ldr	r1, [pc, #160]	; (8007b84 <problem_fetch+0x6520>)
 8007ae2:	461a      	mov	r2, r3
 8007ae4:	460b      	mov	r3, r1
 8007ae6:	cb03      	ldmia	r3!, {r0, r1}
 8007ae8:	6010      	str	r0, [r2, #0]
 8007aea:	6051      	str	r1, [r2, #4]
 8007aec:	881b      	ldrh	r3, [r3, #0]
 8007aee:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"5,10,12,15,18");
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	3304      	adds	r3, #4
 8007af4:	4a24      	ldr	r2, [pc, #144]	; (8007b88 <problem_fetch+0x6524>)
 8007af6:	461c      	mov	r4, r3
 8007af8:	4613      	mov	r3, r2
 8007afa:	cb07      	ldmia	r3!, {r0, r1, r2}
 8007afc:	6020      	str	r0, [r4, #0]
 8007afe:	6061      	str	r1, [r4, #4]
 8007b00:	60a2      	str	r2, [r4, #8]
 8007b02:	881b      	ldrh	r3, [r3, #0]
 8007b04:	81a3      	strh	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,e");
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8007b0c:	4916      	ldr	r1, [pc, #88]	; (8007b68 <problem_fetch+0x6504>)
 8007b0e:	461a      	mov	r2, r3
 8007b10:	460b      	mov	r3, r1
 8007b12:	cb03      	ldmia	r3!, {r0, r1}
 8007b14:	6010      	str	r0, [r2, #0]
 8007b16:	6051      	str	r1, [r2, #4]
 8007b18:	881b      	ldrh	r3, [r3, #0]
 8007b1a:	8113      	strh	r3, [r2, #8]
			break;
 8007b1c:	f014 bcd2 	b.w	801c4c4 <problem_fetch+0x1ae60>
 8007b20:	08025c60 	.word	0x08025c60
 8007b24:	08023cc4 	.word	0x08023cc4
 8007b28:	08025c6c 	.word	0x08025c6c
 8007b2c:	08025c7c 	.word	0x08025c7c
 8007b30:	08023b9c 	.word	0x08023b9c
 8007b34:	08025c90 	.word	0x08025c90
 8007b38:	08023bbc 	.word	0x08023bbc
 8007b3c:	08025c94 	.word	0x08025c94
 8007b40:	08025ca0 	.word	0x08025ca0
 8007b44:	08023ec0 	.word	0x08023ec0
 8007b48:	08025cb0 	.word	0x08025cb0
 8007b4c:	08023c60 	.word	0x08023c60
 8007b50:	08025cc0 	.word	0x08025cc0
 8007b54:	08025ccc 	.word	0x08025ccc
 8007b58:	08025cdc 	.word	0x08025cdc
 8007b5c:	08023ae4 	.word	0x08023ae4
 8007b60:	08025cec 	.word	0x08025cec
 8007b64:	08025cf8 	.word	0x08025cf8
 8007b68:	08023ff0 	.word	0x08023ff0
 8007b6c:	08025d08 	.word	0x08025d08
 8007b70:	08023b24 	.word	0x08023b24
 8007b74:	08025d14 	.word	0x08025d14
 8007b78:	08025d28 	.word	0x08025d28
 8007b7c:	08024b08 	.word	0x08024b08
 8007b80:	08025d40 	.word	0x08025d40
 8007b84:	08025d5c 	.word	0x08025d5c
 8007b88:	08025a04 	.word	0x08025a04
		case 170 :
			strcpy(p->name,"SCIENTIFIC PROGRESS");
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8007b92:	4aae      	ldr	r2, [pc, #696]	; (8007e4c <problem_fetch+0x67e8>)
 8007b94:	461d      	mov	r5, r3
 8007b96:	4614      	mov	r4, r2
 8007b98:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007b9a:	6028      	str	r0, [r5, #0]
 8007b9c:	6069      	str	r1, [r5, #4]
 8007b9e:	60aa      	str	r2, [r5, #8]
 8007ba0:	60eb      	str	r3, [r5, #12]
 8007ba2:	6820      	ldr	r0, [r4, #0]
 8007ba4:	6128      	str	r0, [r5, #16]
			strcpy(p->grade,"7A");
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8007bac:	4aa8      	ldr	r2, [pc, #672]	; (8007e50 <problem_fetch+0x67ec>)
 8007bae:	8811      	ldrh	r1, [r2, #0]
 8007bb0:	7892      	ldrb	r2, [r2, #2]
 8007bb2:	8019      	strh	r1, [r3, #0]
 8007bb4:	709a      	strb	r2, [r3, #2]
			p->moveSize = 5;
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	2205      	movs	r2, #5
 8007bba:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"E,C,F,A,A");
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	33a4      	adds	r3, #164	; 0xa4
 8007bc0:	49a4      	ldr	r1, [pc, #656]	; (8007e54 <problem_fetch+0x67f0>)
 8007bc2:	461a      	mov	r2, r3
 8007bc4:	460b      	mov	r3, r1
 8007bc6:	cb03      	ldmia	r3!, {r0, r1}
 8007bc8:	6010      	str	r0, [r2, #0]
 8007bca:	6051      	str	r1, [r2, #4]
 8007bcc:	881b      	ldrh	r3, [r3, #0]
 8007bce:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"6,8,11,14,18");
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	3304      	adds	r3, #4
 8007bd4:	4aa0      	ldr	r2, [pc, #640]	; (8007e58 <problem_fetch+0x67f4>)
 8007bd6:	461c      	mov	r4, r3
 8007bd8:	4613      	mov	r3, r2
 8007bda:	cb07      	ldmia	r3!, {r0, r1, r2}
 8007bdc:	6020      	str	r0, [r4, #0]
 8007bde:	6061      	str	r1, [r4, #4]
 8007be0:	60a2      	str	r2, [r4, #8]
 8007be2:	781b      	ldrb	r3, [r3, #0]
 8007be4:	7323      	strb	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,e");
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8007bec:	499b      	ldr	r1, [pc, #620]	; (8007e5c <problem_fetch+0x67f8>)
 8007bee:	461a      	mov	r2, r3
 8007bf0:	460b      	mov	r3, r1
 8007bf2:	cb03      	ldmia	r3!, {r0, r1}
 8007bf4:	6010      	str	r0, [r2, #0]
 8007bf6:	6051      	str	r1, [r2, #4]
 8007bf8:	881b      	ldrh	r3, [r3, #0]
 8007bfa:	8113      	strh	r3, [r2, #8]
			break;
 8007bfc:	f014 bc62 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 171 :
			strcpy(p->name,"THE BLACK MAMBA 🐍");
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8007c06:	4a96      	ldr	r2, [pc, #600]	; (8007e60 <problem_fetch+0x67fc>)
 8007c08:	461d      	mov	r5, r3
 8007c0a:	4614      	mov	r4, r2
 8007c0c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007c0e:	6028      	str	r0, [r5, #0]
 8007c10:	6069      	str	r1, [r5, #4]
 8007c12:	60aa      	str	r2, [r5, #8]
 8007c14:	60eb      	str	r3, [r5, #12]
 8007c16:	6820      	ldr	r0, [r4, #0]
 8007c18:	6128      	str	r0, [r5, #16]
 8007c1a:	7923      	ldrb	r3, [r4, #4]
 8007c1c:	752b      	strb	r3, [r5, #20]
			strcpy(p->grade,"6B+");
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8007c24:	4a8f      	ldr	r2, [pc, #572]	; (8007e64 <problem_fetch+0x6800>)
 8007c26:	6810      	ldr	r0, [r2, #0]
 8007c28:	6018      	str	r0, [r3, #0]
			p->moveSize = 11;
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	220b      	movs	r2, #11
 8007c2e:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,E,G,C,B,E,C,D,B,D,A");
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	33a4      	adds	r3, #164	; 0xa4
 8007c34:	4a8c      	ldr	r2, [pc, #560]	; (8007e68 <problem_fetch+0x6804>)
 8007c36:	461d      	mov	r5, r3
 8007c38:	4614      	mov	r4, r2
 8007c3a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007c3c:	6028      	str	r0, [r5, #0]
 8007c3e:	6069      	str	r1, [r5, #4]
 8007c40:	60aa      	str	r2, [r5, #8]
 8007c42:	60eb      	str	r3, [r5, #12]
 8007c44:	6820      	ldr	r0, [r4, #0]
 8007c46:	6128      	str	r0, [r5, #16]
 8007c48:	88a3      	ldrh	r3, [r4, #4]
 8007c4a:	82ab      	strh	r3, [r5, #20]
			strcpy(p->moveNumbers,"4,6,9,8,10,12,13,15,15,18,18");
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	3304      	adds	r3, #4
 8007c50:	4a86      	ldr	r2, [pc, #536]	; (8007e6c <problem_fetch+0x6808>)
 8007c52:	461d      	mov	r5, r3
 8007c54:	4614      	mov	r4, r2
 8007c56:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007c58:	6028      	str	r0, [r5, #0]
 8007c5a:	6069      	str	r1, [r5, #4]
 8007c5c:	60aa      	str	r2, [r5, #8]
 8007c5e:	60eb      	str	r3, [r5, #12]
 8007c60:	cc07      	ldmia	r4!, {r0, r1, r2}
 8007c62:	6128      	str	r0, [r5, #16]
 8007c64:	6169      	str	r1, [r5, #20]
 8007c66:	61aa      	str	r2, [r5, #24]
 8007c68:	7823      	ldrb	r3, [r4, #0]
 8007c6a:	772b      	strb	r3, [r5, #28]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,d,d,e,e");
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8007c72:	4a7f      	ldr	r2, [pc, #508]	; (8007e70 <problem_fetch+0x680c>)
 8007c74:	461d      	mov	r5, r3
 8007c76:	4614      	mov	r4, r2
 8007c78:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007c7a:	6028      	str	r0, [r5, #0]
 8007c7c:	6069      	str	r1, [r5, #4]
 8007c7e:	60aa      	str	r2, [r5, #8]
 8007c80:	60eb      	str	r3, [r5, #12]
 8007c82:	6820      	ldr	r0, [r4, #0]
 8007c84:	6128      	str	r0, [r5, #16]
 8007c86:	88a3      	ldrh	r3, [r4, #4]
 8007c88:	82ab      	strh	r3, [r5, #20]
			break;
 8007c8a:	f014 bc1b 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 172 :
			strcpy(p->name,"PINCH THE PINCH");
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8007c94:	4a77      	ldr	r2, [pc, #476]	; (8007e74 <problem_fetch+0x6810>)
 8007c96:	461c      	mov	r4, r3
 8007c98:	4615      	mov	r5, r2
 8007c9a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007c9c:	6020      	str	r0, [r4, #0]
 8007c9e:	6061      	str	r1, [r4, #4]
 8007ca0:	60a2      	str	r2, [r4, #8]
 8007ca2:	60e3      	str	r3, [r4, #12]
			strcpy(p->grade,"7A");
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8007caa:	4a69      	ldr	r2, [pc, #420]	; (8007e50 <problem_fetch+0x67ec>)
 8007cac:	8811      	ldrh	r1, [r2, #0]
 8007cae:	7892      	ldrb	r2, [r2, #2]
 8007cb0:	8019      	strh	r1, [r3, #0]
 8007cb2:	709a      	strb	r2, [r3, #2]
			p->moveSize = 4;
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	2204      	movs	r2, #4
 8007cb8:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,H,G,D");
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	33a4      	adds	r3, #164	; 0xa4
 8007cbe:	496e      	ldr	r1, [pc, #440]	; (8007e78 <problem_fetch+0x6814>)
 8007cc0:	461a      	mov	r2, r3
 8007cc2:	460b      	mov	r3, r1
 8007cc4:	cb03      	ldmia	r3!, {r0, r1}
 8007cc6:	6010      	str	r0, [r2, #0]
 8007cc8:	6051      	str	r1, [r2, #4]
			strcpy(p->moveNumbers,"5,10,14,18");
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	3304      	adds	r3, #4
 8007cce:	496b      	ldr	r1, [pc, #428]	; (8007e7c <problem_fetch+0x6818>)
 8007cd0:	461a      	mov	r2, r3
 8007cd2:	460b      	mov	r3, r1
 8007cd4:	cb03      	ldmia	r3!, {r0, r1}
 8007cd6:	6010      	str	r0, [r2, #0]
 8007cd8:	6051      	str	r1, [r2, #4]
 8007cda:	8819      	ldrh	r1, [r3, #0]
 8007cdc:	789b      	ldrb	r3, [r3, #2]
 8007cde:	8111      	strh	r1, [r2, #8]
 8007ce0:	7293      	strb	r3, [r2, #10]
			strcpy(p->startFinish,"s,d,d,e");
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8007ce8:	4965      	ldr	r1, [pc, #404]	; (8007e80 <problem_fetch+0x681c>)
 8007cea:	461a      	mov	r2, r3
 8007cec:	460b      	mov	r3, r1
 8007cee:	cb03      	ldmia	r3!, {r0, r1}
 8007cf0:	6010      	str	r0, [r2, #0]
 8007cf2:	6051      	str	r1, [r2, #4]
			break;
 8007cf4:	f014 bbe6 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 173 :
			strcpy(p->name,"OLD SCHOOL BLACK");
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8007cfe:	4a61      	ldr	r2, [pc, #388]	; (8007e84 <problem_fetch+0x6820>)
 8007d00:	461d      	mov	r5, r3
 8007d02:	4614      	mov	r4, r2
 8007d04:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007d06:	6028      	str	r0, [r5, #0]
 8007d08:	6069      	str	r1, [r5, #4]
 8007d0a:	60aa      	str	r2, [r5, #8]
 8007d0c:	60eb      	str	r3, [r5, #12]
 8007d0e:	7823      	ldrb	r3, [r4, #0]
 8007d10:	742b      	strb	r3, [r5, #16]
			strcpy(p->grade,"7A");
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8007d18:	4a4d      	ldr	r2, [pc, #308]	; (8007e50 <problem_fetch+0x67ec>)
 8007d1a:	8811      	ldrh	r1, [r2, #0]
 8007d1c:	7892      	ldrb	r2, [r2, #2]
 8007d1e:	8019      	strh	r1, [r3, #0]
 8007d20:	709a      	strb	r2, [r3, #2]
			p->moveSize = 6;
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	2206      	movs	r2, #6
 8007d26:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,H,I,G,G,D");
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	33a4      	adds	r3, #164	; 0xa4
 8007d2c:	4a56      	ldr	r2, [pc, #344]	; (8007e88 <problem_fetch+0x6824>)
 8007d2e:	461c      	mov	r4, r3
 8007d30:	4613      	mov	r3, r2
 8007d32:	cb07      	ldmia	r3!, {r0, r1, r2}
 8007d34:	6020      	str	r0, [r4, #0]
 8007d36:	6061      	str	r1, [r4, #4]
 8007d38:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,5,10,14,17,18");
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	3304      	adds	r3, #4
 8007d3e:	4a53      	ldr	r2, [pc, #332]	; (8007e8c <problem_fetch+0x6828>)
 8007d40:	461c      	mov	r4, r3
 8007d42:	4615      	mov	r5, r2
 8007d44:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007d46:	6020      	str	r0, [r4, #0]
 8007d48:	6061      	str	r1, [r4, #4]
 8007d4a:	60a2      	str	r2, [r4, #8]
 8007d4c:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,s,d,d,d,e");
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8007d54:	4a4e      	ldr	r2, [pc, #312]	; (8007e90 <problem_fetch+0x682c>)
 8007d56:	461c      	mov	r4, r3
 8007d58:	4613      	mov	r3, r2
 8007d5a:	cb07      	ldmia	r3!, {r0, r1, r2}
 8007d5c:	6020      	str	r0, [r4, #0]
 8007d5e:	6061      	str	r1, [r4, #4]
 8007d60:	60a2      	str	r2, [r4, #8]
			break;
 8007d62:	f014 bbaf 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 174 :
			strcpy(p->name,"MÖRCSÖG");
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8007d6c:	4949      	ldr	r1, [pc, #292]	; (8007e94 <problem_fetch+0x6830>)
 8007d6e:	461a      	mov	r2, r3
 8007d70:	460b      	mov	r3, r1
 8007d72:	cb03      	ldmia	r3!, {r0, r1}
 8007d74:	6010      	str	r0, [r2, #0]
 8007d76:	6051      	str	r1, [r2, #4]
 8007d78:	881b      	ldrh	r3, [r3, #0]
 8007d7a:	8113      	strh	r3, [r2, #8]
			strcpy(p->grade,"7B");
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8007d82:	4a45      	ldr	r2, [pc, #276]	; (8007e98 <problem_fetch+0x6834>)
 8007d84:	8811      	ldrh	r1, [r2, #0]
 8007d86:	7892      	ldrb	r2, [r2, #2]
 8007d88:	8019      	strh	r1, [r3, #0]
 8007d8a:	709a      	strb	r2, [r3, #2]
			p->moveSize = 6;
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	2206      	movs	r2, #6
 8007d90:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,E,F,E,G,D");
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	33a4      	adds	r3, #164	; 0xa4
 8007d96:	4a41      	ldr	r2, [pc, #260]	; (8007e9c <problem_fetch+0x6838>)
 8007d98:	461c      	mov	r4, r3
 8007d9a:	4613      	mov	r3, r2
 8007d9c:	cb07      	ldmia	r3!, {r0, r1, r2}
 8007d9e:	6020      	str	r0, [r4, #0]
 8007da0:	6061      	str	r1, [r4, #4]
 8007da2:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,8,11,14,15,18");
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	3304      	adds	r3, #4
 8007da8:	4a3d      	ldr	r2, [pc, #244]	; (8007ea0 <problem_fetch+0x683c>)
 8007daa:	461c      	mov	r4, r3
 8007dac:	4615      	mov	r5, r2
 8007dae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007db0:	6020      	str	r0, [r4, #0]
 8007db2:	6061      	str	r1, [r4, #4]
 8007db4:	60a2      	str	r2, [r4, #8]
 8007db6:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8007dbe:	4a39      	ldr	r2, [pc, #228]	; (8007ea4 <problem_fetch+0x6840>)
 8007dc0:	461c      	mov	r4, r3
 8007dc2:	4613      	mov	r3, r2
 8007dc4:	cb07      	ldmia	r3!, {r0, r1, r2}
 8007dc6:	6020      	str	r0, [r4, #0]
 8007dc8:	6061      	str	r1, [r4, #4]
 8007dca:	60a2      	str	r2, [r4, #8]
			break;
 8007dcc:	f014 bb7a 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 175 :
			strcpy(p->name,"BLACKSWING");
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8007dd6:	4934      	ldr	r1, [pc, #208]	; (8007ea8 <problem_fetch+0x6844>)
 8007dd8:	461a      	mov	r2, r3
 8007dda:	460b      	mov	r3, r1
 8007ddc:	cb03      	ldmia	r3!, {r0, r1}
 8007dde:	6010      	str	r0, [r2, #0]
 8007de0:	6051      	str	r1, [r2, #4]
 8007de2:	8819      	ldrh	r1, [r3, #0]
 8007de4:	789b      	ldrb	r3, [r3, #2]
 8007de6:	8111      	strh	r1, [r2, #8]
 8007de8:	7293      	strb	r3, [r2, #10]
			strcpy(p->grade,"8A");
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8007df0:	4a2e      	ldr	r2, [pc, #184]	; (8007eac <problem_fetch+0x6848>)
 8007df2:	8811      	ldrh	r1, [r2, #0]
 8007df4:	7892      	ldrb	r2, [r2, #2]
 8007df6:	8019      	strh	r1, [r3, #0]
 8007df8:	709a      	strb	r2, [r3, #2]
			p->moveSize = 7;
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	2207      	movs	r2, #7
 8007dfe:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"C,B,A,D,C,E,D");
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	33a4      	adds	r3, #164	; 0xa4
 8007e04:	4a2a      	ldr	r2, [pc, #168]	; (8007eb0 <problem_fetch+0x684c>)
 8007e06:	461c      	mov	r4, r3
 8007e08:	4613      	mov	r3, r2
 8007e0a:	cb07      	ldmia	r3!, {r0, r1, r2}
 8007e0c:	6020      	str	r0, [r4, #0]
 8007e0e:	6061      	str	r1, [r4, #4]
 8007e10:	60a2      	str	r2, [r4, #8]
 8007e12:	881b      	ldrh	r3, [r3, #0]
 8007e14:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,6,9,11,13,14,18");
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	3304      	adds	r3, #4
 8007e1a:	4a26      	ldr	r2, [pc, #152]	; (8007eb4 <problem_fetch+0x6850>)
 8007e1c:	461d      	mov	r5, r3
 8007e1e:	4614      	mov	r4, r2
 8007e20:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007e22:	6028      	str	r0, [r5, #0]
 8007e24:	6069      	str	r1, [r5, #4]
 8007e26:	60aa      	str	r2, [r5, #8]
 8007e28:	60eb      	str	r3, [r5, #12]
 8007e2a:	8823      	ldrh	r3, [r4, #0]
 8007e2c:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,s,d,d,d,d,e");
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8007e34:	4a20      	ldr	r2, [pc, #128]	; (8007eb8 <problem_fetch+0x6854>)
 8007e36:	461c      	mov	r4, r3
 8007e38:	4613      	mov	r3, r2
 8007e3a:	cb07      	ldmia	r3!, {r0, r1, r2}
 8007e3c:	6020      	str	r0, [r4, #0]
 8007e3e:	6061      	str	r1, [r4, #4]
 8007e40:	60a2      	str	r2, [r4, #8]
 8007e42:	881b      	ldrh	r3, [r3, #0]
 8007e44:	81a3      	strh	r3, [r4, #12]
			break;
 8007e46:	f014 bb3d 	b.w	801c4c4 <problem_fetch+0x1ae60>
 8007e4a:	bf00      	nop
 8007e4c:	08025d68 	.word	0x08025d68
 8007e50:	08023ae4 	.word	0x08023ae4
 8007e54:	08025d7c 	.word	0x08025d7c
 8007e58:	08025d88 	.word	0x08025d88
 8007e5c:	08023ff0 	.word	0x08023ff0
 8007e60:	08025d98 	.word	0x08025d98
 8007e64:	08023b24 	.word	0x08023b24
 8007e68:	08025db0 	.word	0x08025db0
 8007e6c:	08025dc8 	.word	0x08025dc8
 8007e70:	08025de8 	.word	0x08025de8
 8007e74:	08025e00 	.word	0x08025e00
 8007e78:	08025e10 	.word	0x08025e10
 8007e7c:	08025e18 	.word	0x08025e18
 8007e80:	08023c78 	.word	0x08023c78
 8007e84:	08025e24 	.word	0x08025e24
 8007e88:	08025e38 	.word	0x08025e38
 8007e8c:	08025e44 	.word	0x08025e44
 8007e90:	08023b04 	.word	0x08023b04
 8007e94:	08025e54 	.word	0x08025e54
 8007e98:	0802421c 	.word	0x0802421c
 8007e9c:	08025e60 	.word	0x08025e60
 8007ea0:	08025e6c 	.word	0x08025e6c
 8007ea4:	08023ec0 	.word	0x08023ec0
 8007ea8:	08025e7c 	.word	0x08025e7c
 8007eac:	08025e88 	.word	0x08025e88
 8007eb0:	08025e8c 	.word	0x08025e8c
 8007eb4:	08025e9c 	.word	0x08025e9c
 8007eb8:	08023b9c 	.word	0x08023b9c
		case 176 :
			strcpy(p->name,"FREAKING MAIMED");
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8007ec2:	4aad      	ldr	r2, [pc, #692]	; (8008178 <problem_fetch+0x6b14>)
 8007ec4:	461c      	mov	r4, r3
 8007ec6:	4615      	mov	r5, r2
 8007ec8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007eca:	6020      	str	r0, [r4, #0]
 8007ecc:	6061      	str	r1, [r4, #4]
 8007ece:	60a2      	str	r2, [r4, #8]
 8007ed0:	60e3      	str	r3, [r4, #12]
			strcpy(p->grade,"7C");
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8007ed8:	4aa8      	ldr	r2, [pc, #672]	; (800817c <problem_fetch+0x6b18>)
 8007eda:	8811      	ldrh	r1, [r2, #0]
 8007edc:	7892      	ldrb	r2, [r2, #2]
 8007ede:	8019      	strh	r1, [r3, #0]
 8007ee0:	709a      	strb	r2, [r3, #2]
			p->moveSize = 7;
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	2207      	movs	r2, #7
 8007ee6:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,G,E,C,G,H,I");
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	33a4      	adds	r3, #164	; 0xa4
 8007eec:	4aa4      	ldr	r2, [pc, #656]	; (8008180 <problem_fetch+0x6b1c>)
 8007eee:	461c      	mov	r4, r3
 8007ef0:	4613      	mov	r3, r2
 8007ef2:	cb07      	ldmia	r3!, {r0, r1, r2}
 8007ef4:	6020      	str	r0, [r4, #0]
 8007ef6:	6061      	str	r1, [r4, #4]
 8007ef8:	60a2      	str	r2, [r4, #8]
 8007efa:	881b      	ldrh	r3, [r3, #0]
 8007efc:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,9,9,13,17,16,18");
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	3304      	adds	r3, #4
 8007f02:	4aa0      	ldr	r2, [pc, #640]	; (8008184 <problem_fetch+0x6b20>)
 8007f04:	461d      	mov	r5, r3
 8007f06:	4614      	mov	r4, r2
 8007f08:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007f0a:	6028      	str	r0, [r5, #0]
 8007f0c:	6069      	str	r1, [r5, #4]
 8007f0e:	60aa      	str	r2, [r5, #8]
 8007f10:	60eb      	str	r3, [r5, #12]
 8007f12:	8823      	ldrh	r3, [r4, #0]
 8007f14:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8007f1c:	4a9a      	ldr	r2, [pc, #616]	; (8008188 <problem_fetch+0x6b24>)
 8007f1e:	461c      	mov	r4, r3
 8007f20:	4613      	mov	r3, r2
 8007f22:	cb07      	ldmia	r3!, {r0, r1, r2}
 8007f24:	6020      	str	r0, [r4, #0]
 8007f26:	6061      	str	r1, [r4, #4]
 8007f28:	60a2      	str	r2, [r4, #8]
 8007f2a:	881b      	ldrh	r3, [r3, #0]
 8007f2c:	81a3      	strh	r3, [r4, #12]
			break;
 8007f2e:	f014 bac9 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 177 :
			strcpy(p->name,"CAN’T REMEMBER THE NAME");
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8007f38:	4a94      	ldr	r2, [pc, #592]	; (800818c <problem_fetch+0x6b28>)
 8007f3a:	461d      	mov	r5, r3
 8007f3c:	4614      	mov	r4, r2
 8007f3e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007f40:	6028      	str	r0, [r5, #0]
 8007f42:	6069      	str	r1, [r5, #4]
 8007f44:	60aa      	str	r2, [r5, #8]
 8007f46:	60eb      	str	r3, [r5, #12]
 8007f48:	cc03      	ldmia	r4!, {r0, r1}
 8007f4a:	6128      	str	r0, [r5, #16]
 8007f4c:	6169      	str	r1, [r5, #20]
 8007f4e:	8823      	ldrh	r3, [r4, #0]
 8007f50:	832b      	strh	r3, [r5, #24]
			strcpy(p->grade,"7A");
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8007f58:	4a8d      	ldr	r2, [pc, #564]	; (8008190 <problem_fetch+0x6b2c>)
 8007f5a:	8811      	ldrh	r1, [r2, #0]
 8007f5c:	7892      	ldrb	r2, [r2, #2]
 8007f5e:	8019      	strh	r1, [r3, #0]
 8007f60:	709a      	strb	r2, [r3, #2]
			p->moveSize = 7;
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	2207      	movs	r2, #7
 8007f66:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"E,E,I,G,D,E,A");
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	33a4      	adds	r3, #164	; 0xa4
 8007f6c:	4a89      	ldr	r2, [pc, #548]	; (8008194 <problem_fetch+0x6b30>)
 8007f6e:	461c      	mov	r4, r3
 8007f70:	4613      	mov	r3, r2
 8007f72:	cb07      	ldmia	r3!, {r0, r1, r2}
 8007f74:	6020      	str	r0, [r4, #0]
 8007f76:	6061      	str	r1, [r4, #4]
 8007f78:	60a2      	str	r2, [r4, #8]
 8007f7a:	881b      	ldrh	r3, [r3, #0]
 8007f7c:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"6,8,10,6,11,16,18");
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	3304      	adds	r3, #4
 8007f82:	4a85      	ldr	r2, [pc, #532]	; (8008198 <problem_fetch+0x6b34>)
 8007f84:	461d      	mov	r5, r3
 8007f86:	4614      	mov	r4, r2
 8007f88:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007f8a:	6028      	str	r0, [r5, #0]
 8007f8c:	6069      	str	r1, [r5, #4]
 8007f8e:	60aa      	str	r2, [r5, #8]
 8007f90:	60eb      	str	r3, [r5, #12]
 8007f92:	8823      	ldrh	r3, [r4, #0]
 8007f94:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,d,d,s,d,d,e");
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8007f9c:	4a7f      	ldr	r2, [pc, #508]	; (800819c <problem_fetch+0x6b38>)
 8007f9e:	461c      	mov	r4, r3
 8007fa0:	4613      	mov	r3, r2
 8007fa2:	cb07      	ldmia	r3!, {r0, r1, r2}
 8007fa4:	6020      	str	r0, [r4, #0]
 8007fa6:	6061      	str	r1, [r4, #4]
 8007fa8:	60a2      	str	r2, [r4, #8]
 8007faa:	881b      	ldrh	r3, [r3, #0]
 8007fac:	81a3      	strh	r3, [r4, #12]
			break;
 8007fae:	f014 ba89 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 178 :
			strcpy(p->name,"FOUR");
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8007fb8:	4a79      	ldr	r2, [pc, #484]	; (80081a0 <problem_fetch+0x6b3c>)
 8007fba:	6810      	ldr	r0, [r2, #0]
 8007fbc:	6018      	str	r0, [r3, #0]
 8007fbe:	7912      	ldrb	r2, [r2, #4]
 8007fc0:	711a      	strb	r2, [r3, #4]
			strcpy(p->grade,"7A");
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8007fc8:	4a71      	ldr	r2, [pc, #452]	; (8008190 <problem_fetch+0x6b2c>)
 8007fca:	8811      	ldrh	r1, [r2, #0]
 8007fcc:	7892      	ldrb	r2, [r2, #2]
 8007fce:	8019      	strh	r1, [r3, #0]
 8007fd0:	709a      	strb	r2, [r3, #2]
			p->moveSize = 7;
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	2207      	movs	r2, #7
 8007fd6:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"C,G,E,D,I,H,I");
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	33a4      	adds	r3, #164	; 0xa4
 8007fdc:	4a71      	ldr	r2, [pc, #452]	; (80081a4 <problem_fetch+0x6b40>)
 8007fde:	461c      	mov	r4, r3
 8007fe0:	4613      	mov	r3, r2
 8007fe2:	cb07      	ldmia	r3!, {r0, r1, r2}
 8007fe4:	6020      	str	r0, [r4, #0]
 8007fe6:	6061      	str	r1, [r4, #4]
 8007fe8:	60a2      	str	r2, [r4, #8]
 8007fea:	881b      	ldrh	r3, [r3, #0]
 8007fec:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,4,9,11,14,16,18");
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	3304      	adds	r3, #4
 8007ff2:	4a6d      	ldr	r2, [pc, #436]	; (80081a8 <problem_fetch+0x6b44>)
 8007ff4:	461d      	mov	r5, r3
 8007ff6:	4614      	mov	r4, r2
 8007ff8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007ffa:	6028      	str	r0, [r5, #0]
 8007ffc:	6069      	str	r1, [r5, #4]
 8007ffe:	60aa      	str	r2, [r5, #8]
 8008000:	60eb      	str	r3, [r5, #12]
 8008002:	8823      	ldrh	r3, [r4, #0]
 8008004:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,s,d,d,d,d,e");
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800800c:	4a67      	ldr	r2, [pc, #412]	; (80081ac <problem_fetch+0x6b48>)
 800800e:	461c      	mov	r4, r3
 8008010:	4613      	mov	r3, r2
 8008012:	cb07      	ldmia	r3!, {r0, r1, r2}
 8008014:	6020      	str	r0, [r4, #0]
 8008016:	6061      	str	r1, [r4, #4]
 8008018:	60a2      	str	r2, [r4, #8]
 800801a:	881b      	ldrh	r3, [r3, #0]
 800801c:	81a3      	strh	r3, [r4, #12]
			break;
 800801e:	f014 ba51 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 179 :
			strcpy(p->name,"SALMON SNAKE");
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8008028:	4a61      	ldr	r2, [pc, #388]	; (80081b0 <problem_fetch+0x6b4c>)
 800802a:	461c      	mov	r4, r3
 800802c:	4613      	mov	r3, r2
 800802e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8008030:	6020      	str	r0, [r4, #0]
 8008032:	6061      	str	r1, [r4, #4]
 8008034:	60a2      	str	r2, [r4, #8]
 8008036:	781b      	ldrb	r3, [r3, #0]
 8008038:	7323      	strb	r3, [r4, #12]
			strcpy(p->grade,"7A");
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8008040:	4a53      	ldr	r2, [pc, #332]	; (8008190 <problem_fetch+0x6b2c>)
 8008042:	8811      	ldrh	r1, [r2, #0]
 8008044:	7892      	ldrb	r2, [r2, #2]
 8008046:	8019      	strh	r1, [r3, #0]
 8008048:	709a      	strb	r2, [r3, #2]
			p->moveSize = 5;
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	2205      	movs	r2, #5
 800804e:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,G,F,D,A");
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	33a4      	adds	r3, #164	; 0xa4
 8008054:	4957      	ldr	r1, [pc, #348]	; (80081b4 <problem_fetch+0x6b50>)
 8008056:	461a      	mov	r2, r3
 8008058:	460b      	mov	r3, r1
 800805a:	cb03      	ldmia	r3!, {r0, r1}
 800805c:	6010      	str	r0, [r2, #0]
 800805e:	6051      	str	r1, [r2, #4]
 8008060:	881b      	ldrh	r3, [r3, #0]
 8008062:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"5,9,11,15,18");
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	3304      	adds	r3, #4
 8008068:	4a53      	ldr	r2, [pc, #332]	; (80081b8 <problem_fetch+0x6b54>)
 800806a:	461c      	mov	r4, r3
 800806c:	4613      	mov	r3, r2
 800806e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8008070:	6020      	str	r0, [r4, #0]
 8008072:	6061      	str	r1, [r4, #4]
 8008074:	60a2      	str	r2, [r4, #8]
 8008076:	781b      	ldrb	r3, [r3, #0]
 8008078:	7323      	strb	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,e");
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8008080:	494e      	ldr	r1, [pc, #312]	; (80081bc <problem_fetch+0x6b58>)
 8008082:	461a      	mov	r2, r3
 8008084:	460b      	mov	r3, r1
 8008086:	cb03      	ldmia	r3!, {r0, r1}
 8008088:	6010      	str	r0, [r2, #0]
 800808a:	6051      	str	r1, [r2, #4]
 800808c:	881b      	ldrh	r3, [r3, #0]
 800808e:	8113      	strh	r3, [r2, #8]
			break;
 8008090:	f014 ba18 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 180 :
			strcpy(p->name,"COSTA NEGRA");
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800809a:	4a49      	ldr	r2, [pc, #292]	; (80081c0 <problem_fetch+0x6b5c>)
 800809c:	461c      	mov	r4, r3
 800809e:	4613      	mov	r3, r2
 80080a0:	cb07      	ldmia	r3!, {r0, r1, r2}
 80080a2:	6020      	str	r0, [r4, #0]
 80080a4:	6061      	str	r1, [r4, #4]
 80080a6:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade,"6C");
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80080ae:	4a45      	ldr	r2, [pc, #276]	; (80081c4 <problem_fetch+0x6b60>)
 80080b0:	8811      	ldrh	r1, [r2, #0]
 80080b2:	7892      	ldrb	r2, [r2, #2]
 80080b4:	8019      	strh	r1, [r3, #0]
 80080b6:	709a      	strb	r2, [r3, #2]
			p->moveSize = 9;
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	2209      	movs	r2, #9
 80080bc:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,E,E,B,E,C,I,G,I");
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	33a4      	adds	r3, #164	; 0xa4
 80080c2:	4a41      	ldr	r2, [pc, #260]	; (80081c8 <problem_fetch+0x6b64>)
 80080c4:	461d      	mov	r5, r3
 80080c6:	4614      	mov	r4, r2
 80080c8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80080ca:	6028      	str	r0, [r5, #0]
 80080cc:	6069      	str	r1, [r5, #4]
 80080ce:	60aa      	str	r2, [r5, #8]
 80080d0:	60eb      	str	r3, [r5, #12]
 80080d2:	8823      	ldrh	r3, [r4, #0]
 80080d4:	822b      	strh	r3, [r5, #16]
			strcpy(p->moveNumbers,"4,6,8,10,12,13,14,15,18");
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	3304      	adds	r3, #4
 80080da:	4a3c      	ldr	r2, [pc, #240]	; (80081cc <problem_fetch+0x6b68>)
 80080dc:	461d      	mov	r5, r3
 80080de:	4614      	mov	r4, r2
 80080e0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80080e2:	6028      	str	r0, [r5, #0]
 80080e4:	6069      	str	r1, [r5, #4]
 80080e6:	60aa      	str	r2, [r5, #8]
 80080e8:	60eb      	str	r3, [r5, #12]
 80080ea:	cc03      	ldmia	r4!, {r0, r1}
 80080ec:	6128      	str	r0, [r5, #16]
 80080ee:	6169      	str	r1, [r5, #20]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,d,e");
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 80080f6:	4a36      	ldr	r2, [pc, #216]	; (80081d0 <problem_fetch+0x6b6c>)
 80080f8:	461d      	mov	r5, r3
 80080fa:	4614      	mov	r4, r2
 80080fc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80080fe:	6028      	str	r0, [r5, #0]
 8008100:	6069      	str	r1, [r5, #4]
 8008102:	60aa      	str	r2, [r5, #8]
 8008104:	60eb      	str	r3, [r5, #12]
 8008106:	8823      	ldrh	r3, [r4, #0]
 8008108:	822b      	strh	r3, [r5, #16]
			break;
 800810a:	f014 b9db 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 181 :
			strcpy(p->name,"LOPPULÄMPPÄ");
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8008114:	4a2f      	ldr	r2, [pc, #188]	; (80081d4 <problem_fetch+0x6b70>)
 8008116:	461c      	mov	r4, r3
 8008118:	4613      	mov	r3, r2
 800811a:	cb07      	ldmia	r3!, {r0, r1, r2}
 800811c:	6020      	str	r0, [r4, #0]
 800811e:	6061      	str	r1, [r4, #4]
 8008120:	60a2      	str	r2, [r4, #8]
 8008122:	881b      	ldrh	r3, [r3, #0]
 8008124:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade,"7A+");
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800812c:	4a2a      	ldr	r2, [pc, #168]	; (80081d8 <problem_fetch+0x6b74>)
 800812e:	6810      	ldr	r0, [r2, #0]
 8008130:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	2206      	movs	r2, #6
 8008136:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,E,E,D,G,I");
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	33a4      	adds	r3, #164	; 0xa4
 800813c:	4a27      	ldr	r2, [pc, #156]	; (80081dc <problem_fetch+0x6b78>)
 800813e:	461c      	mov	r4, r3
 8008140:	4613      	mov	r3, r2
 8008142:	cb07      	ldmia	r3!, {r0, r1, r2}
 8008144:	6020      	str	r0, [r4, #0]
 8008146:	6061      	str	r1, [r4, #4]
 8008148:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,8,12,11,17,18");
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	3304      	adds	r3, #4
 800814e:	4a24      	ldr	r2, [pc, #144]	; (80081e0 <problem_fetch+0x6b7c>)
 8008150:	461c      	mov	r4, r3
 8008152:	4615      	mov	r5, r2
 8008154:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008156:	6020      	str	r0, [r4, #0]
 8008158:	6061      	str	r1, [r4, #4]
 800815a:	60a2      	str	r2, [r4, #8]
 800815c:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8008164:	4a1f      	ldr	r2, [pc, #124]	; (80081e4 <problem_fetch+0x6b80>)
 8008166:	461c      	mov	r4, r3
 8008168:	4613      	mov	r3, r2
 800816a:	cb07      	ldmia	r3!, {r0, r1, r2}
 800816c:	6020      	str	r0, [r4, #0]
 800816e:	6061      	str	r1, [r4, #4]
 8008170:	60a2      	str	r2, [r4, #8]
			break;
 8008172:	f014 b9a7 	b.w	801c4c4 <problem_fetch+0x1ae60>
 8008176:	bf00      	nop
 8008178:	08025eb0 	.word	0x08025eb0
 800817c:	08024358 	.word	0x08024358
 8008180:	08025ec0 	.word	0x08025ec0
 8008184:	08025ed0 	.word	0x08025ed0
 8008188:	08023cac 	.word	0x08023cac
 800818c:	08025ee4 	.word	0x08025ee4
 8008190:	08023ae4 	.word	0x08023ae4
 8008194:	08025f00 	.word	0x08025f00
 8008198:	08025f10 	.word	0x08025f10
 800819c:	08025f24 	.word	0x08025f24
 80081a0:	08025f34 	.word	0x08025f34
 80081a4:	08025f3c 	.word	0x08025f3c
 80081a8:	08025f4c 	.word	0x08025f4c
 80081ac:	08023b9c 	.word	0x08023b9c
 80081b0:	08025f60 	.word	0x08025f60
 80081b4:	08025f70 	.word	0x08025f70
 80081b8:	08025f7c 	.word	0x08025f7c
 80081bc:	08023ff0 	.word	0x08023ff0
 80081c0:	08025f8c 	.word	0x08025f8c
 80081c4:	08023bf0 	.word	0x08023bf0
 80081c8:	08025f98 	.word	0x08025f98
 80081cc:	08025fac 	.word	0x08025fac
 80081d0:	08024b08 	.word	0x08024b08
 80081d4:	08025fc4 	.word	0x08025fc4
 80081d8:	08023cc4 	.word	0x08023cc4
 80081dc:	08025fd4 	.word	0x08025fd4
 80081e0:	08025fe0 	.word	0x08025fe0
 80081e4:	08023ec0 	.word	0x08023ec0
		case 182 :
			strcpy(p->name,"MEK");
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80081ee:	4ac1      	ldr	r2, [pc, #772]	; (80084f4 <problem_fetch+0x6e90>)
 80081f0:	6810      	ldr	r0, [r2, #0]
 80081f2:	6018      	str	r0, [r3, #0]
			strcpy(p->grade,"7A");
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80081fa:	4abf      	ldr	r2, [pc, #764]	; (80084f8 <problem_fetch+0x6e94>)
 80081fc:	8811      	ldrh	r1, [r2, #0]
 80081fe:	7892      	ldrb	r2, [r2, #2]
 8008200:	8019      	strh	r1, [r3, #0]
 8008202:	709a      	strb	r2, [r3, #2]
			p->moveSize = 8;
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	2208      	movs	r2, #8
 8008208:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,H,D,B,D,G,E,I");
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	33a4      	adds	r3, #164	; 0xa4
 800820e:	4abb      	ldr	r2, [pc, #748]	; (80084fc <problem_fetch+0x6e98>)
 8008210:	461c      	mov	r4, r3
 8008212:	4615      	mov	r5, r2
 8008214:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008216:	6020      	str	r0, [r4, #0]
 8008218:	6061      	str	r1, [r4, #4]
 800821a:	60a2      	str	r2, [r4, #8]
 800821c:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"10,13,11,6,7,4,16,18");
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	3304      	adds	r3, #4
 8008222:	4ab7      	ldr	r2, [pc, #732]	; (8008500 <problem_fetch+0x6e9c>)
 8008224:	461d      	mov	r5, r3
 8008226:	4614      	mov	r4, r2
 8008228:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800822a:	6028      	str	r0, [r5, #0]
 800822c:	6069      	str	r1, [r5, #4]
 800822e:	60aa      	str	r2, [r5, #8]
 8008230:	60eb      	str	r3, [r5, #12]
 8008232:	6820      	ldr	r0, [r4, #0]
 8008234:	6128      	str	r0, [r5, #16]
 8008236:	7923      	ldrb	r3, [r4, #4]
 8008238:	752b      	strb	r3, [r5, #20]
			strcpy(p->startFinish,"d,d,d,s,d,s,d,e");
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8008240:	4ab0      	ldr	r2, [pc, #704]	; (8008504 <problem_fetch+0x6ea0>)
 8008242:	461c      	mov	r4, r3
 8008244:	4615      	mov	r5, r2
 8008246:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008248:	6020      	str	r0, [r4, #0]
 800824a:	6061      	str	r1, [r4, #4]
 800824c:	60a2      	str	r2, [r4, #8]
 800824e:	60e3      	str	r3, [r4, #12]
			break;
 8008250:	f014 b938 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 183 :
			strcpy(p->name,"5WL^4/(384EI)");
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800825a:	4aab      	ldr	r2, [pc, #684]	; (8008508 <problem_fetch+0x6ea4>)
 800825c:	461c      	mov	r4, r3
 800825e:	4613      	mov	r3, r2
 8008260:	cb07      	ldmia	r3!, {r0, r1, r2}
 8008262:	6020      	str	r0, [r4, #0]
 8008264:	6061      	str	r1, [r4, #4]
 8008266:	60a2      	str	r2, [r4, #8]
 8008268:	881b      	ldrh	r3, [r3, #0]
 800826a:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade,"7C");
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8008272:	4aa6      	ldr	r2, [pc, #664]	; (800850c <problem_fetch+0x6ea8>)
 8008274:	8811      	ldrh	r1, [r2, #0]
 8008276:	7892      	ldrb	r2, [r2, #2]
 8008278:	8019      	strh	r1, [r3, #0]
 800827a:	709a      	strb	r2, [r3, #2]
			p->moveSize = 6;
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	2206      	movs	r2, #6
 8008280:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,H,F,A,B,A");
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	33a4      	adds	r3, #164	; 0xa4
 8008286:	4aa2      	ldr	r2, [pc, #648]	; (8008510 <problem_fetch+0x6eac>)
 8008288:	461c      	mov	r4, r3
 800828a:	4613      	mov	r3, r2
 800828c:	cb07      	ldmia	r3!, {r0, r1, r2}
 800828e:	6020      	str	r0, [r4, #0]
 8008290:	6061      	str	r1, [r4, #4]
 8008292:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,8,11,14,15,18");
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	3304      	adds	r3, #4
 8008298:	4a9e      	ldr	r2, [pc, #632]	; (8008514 <problem_fetch+0x6eb0>)
 800829a:	461c      	mov	r4, r3
 800829c:	4615      	mov	r5, r2
 800829e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80082a0:	6020      	str	r0, [r4, #0]
 80082a2:	6061      	str	r1, [r4, #4]
 80082a4:	60a2      	str	r2, [r4, #8]
 80082a6:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 80082ae:	4a9a      	ldr	r2, [pc, #616]	; (8008518 <problem_fetch+0x6eb4>)
 80082b0:	461c      	mov	r4, r3
 80082b2:	4613      	mov	r3, r2
 80082b4:	cb07      	ldmia	r3!, {r0, r1, r2}
 80082b6:	6020      	str	r0, [r4, #0]
 80082b8:	6061      	str	r1, [r4, #4]
 80082ba:	60a2      	str	r2, [r4, #8]
			break;
 80082bc:	f014 b902 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 184 :
			strcpy(p->name,"ATLANTIC SEA NETTLE");
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80082c6:	4a95      	ldr	r2, [pc, #596]	; (800851c <problem_fetch+0x6eb8>)
 80082c8:	461d      	mov	r5, r3
 80082ca:	4614      	mov	r4, r2
 80082cc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80082ce:	6028      	str	r0, [r5, #0]
 80082d0:	6069      	str	r1, [r5, #4]
 80082d2:	60aa      	str	r2, [r5, #8]
 80082d4:	60eb      	str	r3, [r5, #12]
 80082d6:	6820      	ldr	r0, [r4, #0]
 80082d8:	6128      	str	r0, [r5, #16]
			strcpy(p->grade,"6C+");
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80082e0:	4a8f      	ldr	r2, [pc, #572]	; (8008520 <problem_fetch+0x6ebc>)
 80082e2:	6810      	ldr	r0, [r2, #0]
 80082e4:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	2206      	movs	r2, #6
 80082ea:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"E,C,F,B,D,A");
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	33a4      	adds	r3, #164	; 0xa4
 80082f0:	4a8c      	ldr	r2, [pc, #560]	; (8008524 <problem_fetch+0x6ec0>)
 80082f2:	461c      	mov	r4, r3
 80082f4:	4613      	mov	r3, r2
 80082f6:	cb07      	ldmia	r3!, {r0, r1, r2}
 80082f8:	6020      	str	r0, [r4, #0]
 80082fa:	6061      	str	r1, [r4, #4]
 80082fc:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"6,8,11,12,15,18");
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	3304      	adds	r3, #4
 8008302:	4a89      	ldr	r2, [pc, #548]	; (8008528 <problem_fetch+0x6ec4>)
 8008304:	461c      	mov	r4, r3
 8008306:	4615      	mov	r5, r2
 8008308:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800830a:	6020      	str	r0, [r4, #0]
 800830c:	6061      	str	r1, [r4, #4]
 800830e:	60a2      	str	r2, [r4, #8]
 8008310:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8008318:	4a7f      	ldr	r2, [pc, #508]	; (8008518 <problem_fetch+0x6eb4>)
 800831a:	461c      	mov	r4, r3
 800831c:	4613      	mov	r3, r2
 800831e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8008320:	6020      	str	r0, [r4, #0]
 8008322:	6061      	str	r1, [r4, #4]
 8008324:	60a2      	str	r2, [r4, #8]
			break;
 8008326:	f014 b8cd 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 185 :
			strcpy(p->name,"WOA");
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8008330:	4a7e      	ldr	r2, [pc, #504]	; (800852c <problem_fetch+0x6ec8>)
 8008332:	6810      	ldr	r0, [r2, #0]
 8008334:	6018      	str	r0, [r3, #0]
			strcpy(p->grade,"7A");
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800833c:	4a6e      	ldr	r2, [pc, #440]	; (80084f8 <problem_fetch+0x6e94>)
 800833e:	8811      	ldrh	r1, [r2, #0]
 8008340:	7892      	ldrb	r2, [r2, #2]
 8008342:	8019      	strh	r1, [r3, #0]
 8008344:	709a      	strb	r2, [r3, #2]
			p->moveSize = 7;
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	2207      	movs	r2, #7
 800834a:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,C,E,D,F,G,I");
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	33a4      	adds	r3, #164	; 0xa4
 8008350:	4a77      	ldr	r2, [pc, #476]	; (8008530 <problem_fetch+0x6ecc>)
 8008352:	461c      	mov	r4, r3
 8008354:	4613      	mov	r3, r2
 8008356:	cb07      	ldmia	r3!, {r0, r1, r2}
 8008358:	6020      	str	r0, [r4, #0]
 800835a:	6061      	str	r1, [r4, #4]
 800835c:	60a2      	str	r2, [r4, #8]
 800835e:	881b      	ldrh	r3, [r3, #0]
 8008360:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,5,9,11,13,15,18");
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	3304      	adds	r3, #4
 8008366:	4a73      	ldr	r2, [pc, #460]	; (8008534 <problem_fetch+0x6ed0>)
 8008368:	461d      	mov	r5, r3
 800836a:	4614      	mov	r4, r2
 800836c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800836e:	6028      	str	r0, [r5, #0]
 8008370:	6069      	str	r1, [r5, #4]
 8008372:	60aa      	str	r2, [r5, #8]
 8008374:	60eb      	str	r3, [r5, #12]
 8008376:	8823      	ldrh	r3, [r4, #0]
 8008378:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8008380:	4a6d      	ldr	r2, [pc, #436]	; (8008538 <problem_fetch+0x6ed4>)
 8008382:	461c      	mov	r4, r3
 8008384:	4613      	mov	r3, r2
 8008386:	cb07      	ldmia	r3!, {r0, r1, r2}
 8008388:	6020      	str	r0, [r4, #0]
 800838a:	6061      	str	r1, [r4, #4]
 800838c:	60a2      	str	r2, [r4, #8]
 800838e:	881b      	ldrh	r3, [r3, #0]
 8008390:	81a3      	strh	r3, [r4, #12]
			break;
 8008392:	f014 b897 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 186 :
			strcpy(p->name,"GJ2");
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800839c:	4a67      	ldr	r2, [pc, #412]	; (800853c <problem_fetch+0x6ed8>)
 800839e:	6810      	ldr	r0, [r2, #0]
 80083a0:	6018      	str	r0, [r3, #0]
			strcpy(p->grade,"6B+");
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80083a8:	4a65      	ldr	r2, [pc, #404]	; (8008540 <problem_fetch+0x6edc>)
 80083aa:	6810      	ldr	r0, [r2, #0]
 80083ac:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	2207      	movs	r2, #7
 80083b2:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,C,H,F,C,D,A");
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	33a4      	adds	r3, #164	; 0xa4
 80083b8:	4a62      	ldr	r2, [pc, #392]	; (8008544 <problem_fetch+0x6ee0>)
 80083ba:	461c      	mov	r4, r3
 80083bc:	4613      	mov	r3, r2
 80083be:	cb07      	ldmia	r3!, {r0, r1, r2}
 80083c0:	6020      	str	r0, [r4, #0]
 80083c2:	6061      	str	r1, [r4, #4]
 80083c4:	60a2      	str	r2, [r4, #8]
 80083c6:	881b      	ldrh	r3, [r3, #0]
 80083c8:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,8,8,11,13,15,18");
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	3304      	adds	r3, #4
 80083ce:	4a5e      	ldr	r2, [pc, #376]	; (8008548 <problem_fetch+0x6ee4>)
 80083d0:	461d      	mov	r5, r3
 80083d2:	4614      	mov	r4, r2
 80083d4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80083d6:	6028      	str	r0, [r5, #0]
 80083d8:	6069      	str	r1, [r5, #4]
 80083da:	60aa      	str	r2, [r5, #8]
 80083dc:	60eb      	str	r3, [r5, #12]
 80083de:	8823      	ldrh	r3, [r4, #0]
 80083e0:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 80083e8:	4a53      	ldr	r2, [pc, #332]	; (8008538 <problem_fetch+0x6ed4>)
 80083ea:	461c      	mov	r4, r3
 80083ec:	4613      	mov	r3, r2
 80083ee:	cb07      	ldmia	r3!, {r0, r1, r2}
 80083f0:	6020      	str	r0, [r4, #0]
 80083f2:	6061      	str	r1, [r4, #4]
 80083f4:	60a2      	str	r2, [r4, #8]
 80083f6:	881b      	ldrh	r3, [r3, #0]
 80083f8:	81a3      	strh	r3, [r4, #12]
			break;
 80083fa:	f014 b863 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 187 :
			strcpy(p->name,"CHEESE AND PICKLE");
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8008404:	4a51      	ldr	r2, [pc, #324]	; (800854c <problem_fetch+0x6ee8>)
 8008406:	461d      	mov	r5, r3
 8008408:	4614      	mov	r4, r2
 800840a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800840c:	6028      	str	r0, [r5, #0]
 800840e:	6069      	str	r1, [r5, #4]
 8008410:	60aa      	str	r2, [r5, #8]
 8008412:	60eb      	str	r3, [r5, #12]
 8008414:	8823      	ldrh	r3, [r4, #0]
 8008416:	822b      	strh	r3, [r5, #16]
			strcpy(p->grade,"6C+");
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800841e:	4a40      	ldr	r2, [pc, #256]	; (8008520 <problem_fetch+0x6ebc>)
 8008420:	6810      	ldr	r0, [r2, #0]
 8008422:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	2207      	movs	r2, #7
 8008428:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"E,E,B,E,A,E,A");
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	33a4      	adds	r3, #164	; 0xa4
 800842e:	4a48      	ldr	r2, [pc, #288]	; (8008550 <problem_fetch+0x6eec>)
 8008430:	461c      	mov	r4, r3
 8008432:	4613      	mov	r3, r2
 8008434:	cb07      	ldmia	r3!, {r0, r1, r2}
 8008436:	6020      	str	r0, [r4, #0]
 8008438:	6061      	str	r1, [r4, #4]
 800843a:	60a2      	str	r2, [r4, #8]
 800843c:	881b      	ldrh	r3, [r3, #0]
 800843e:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"6,9,10,12,14,16,18");
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	3304      	adds	r3, #4
 8008444:	4a43      	ldr	r2, [pc, #268]	; (8008554 <problem_fetch+0x6ef0>)
 8008446:	461d      	mov	r5, r3
 8008448:	4614      	mov	r4, r2
 800844a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800844c:	6028      	str	r0, [r5, #0]
 800844e:	6069      	str	r1, [r5, #4]
 8008450:	60aa      	str	r2, [r5, #8]
 8008452:	60eb      	str	r3, [r5, #12]
 8008454:	8823      	ldrh	r3, [r4, #0]
 8008456:	78a2      	ldrb	r2, [r4, #2]
 8008458:	822b      	strh	r3, [r5, #16]
 800845a:	4613      	mov	r3, r2
 800845c:	74ab      	strb	r3, [r5, #18]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8008464:	4a34      	ldr	r2, [pc, #208]	; (8008538 <problem_fetch+0x6ed4>)
 8008466:	461c      	mov	r4, r3
 8008468:	4613      	mov	r3, r2
 800846a:	cb07      	ldmia	r3!, {r0, r1, r2}
 800846c:	6020      	str	r0, [r4, #0]
 800846e:	6061      	str	r1, [r4, #4]
 8008470:	60a2      	str	r2, [r4, #8]
 8008472:	881b      	ldrh	r3, [r3, #0]
 8008474:	81a3      	strh	r3, [r4, #12]
			break;
 8008476:	f014 b825 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 188 :
			strcpy(p->name,"A MATCH MADE IN HEAVEN");
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8008480:	4a35      	ldr	r2, [pc, #212]	; (8008558 <problem_fetch+0x6ef4>)
 8008482:	461c      	mov	r4, r3
 8008484:	4615      	mov	r5, r2
 8008486:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008488:	6020      	str	r0, [r4, #0]
 800848a:	6061      	str	r1, [r4, #4]
 800848c:	60a2      	str	r2, [r4, #8]
 800848e:	60e3      	str	r3, [r4, #12]
 8008490:	6828      	ldr	r0, [r5, #0]
 8008492:	6120      	str	r0, [r4, #16]
 8008494:	88ab      	ldrh	r3, [r5, #4]
 8008496:	79aa      	ldrb	r2, [r5, #6]
 8008498:	82a3      	strh	r3, [r4, #20]
 800849a:	4613      	mov	r3, r2
 800849c:	75a3      	strb	r3, [r4, #22]
			strcpy(p->grade,"7B+");
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80084a4:	4a2d      	ldr	r2, [pc, #180]	; (800855c <problem_fetch+0x6ef8>)
 80084a6:	6810      	ldr	r0, [r2, #0]
 80084a8:	6018      	str	r0, [r3, #0]
			p->moveSize = 5;
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	2205      	movs	r2, #5
 80084ae:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,E,F,D,D");
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	33a4      	adds	r3, #164	; 0xa4
 80084b4:	492a      	ldr	r1, [pc, #168]	; (8008560 <problem_fetch+0x6efc>)
 80084b6:	461a      	mov	r2, r3
 80084b8:	460b      	mov	r3, r1
 80084ba:	cb03      	ldmia	r3!, {r0, r1}
 80084bc:	6010      	str	r0, [r2, #0]
 80084be:	6051      	str	r1, [r2, #4]
 80084c0:	881b      	ldrh	r3, [r3, #0]
 80084c2:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"4,6,11,15,18");
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	3304      	adds	r3, #4
 80084c8:	4a26      	ldr	r2, [pc, #152]	; (8008564 <problem_fetch+0x6f00>)
 80084ca:	461c      	mov	r4, r3
 80084cc:	4613      	mov	r3, r2
 80084ce:	cb07      	ldmia	r3!, {r0, r1, r2}
 80084d0:	6020      	str	r0, [r4, #0]
 80084d2:	6061      	str	r1, [r4, #4]
 80084d4:	60a2      	str	r2, [r4, #8]
 80084d6:	781b      	ldrb	r3, [r3, #0]
 80084d8:	7323      	strb	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,e");
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 80084e0:	4921      	ldr	r1, [pc, #132]	; (8008568 <problem_fetch+0x6f04>)
 80084e2:	461a      	mov	r2, r3
 80084e4:	460b      	mov	r3, r1
 80084e6:	cb03      	ldmia	r3!, {r0, r1}
 80084e8:	6010      	str	r0, [r2, #0]
 80084ea:	6051      	str	r1, [r2, #4]
 80084ec:	881b      	ldrh	r3, [r3, #0]
 80084ee:	8113      	strh	r3, [r2, #8]
			break;
 80084f0:	f013 bfe8 	b.w	801c4c4 <problem_fetch+0x1ae60>
 80084f4:	08025ff0 	.word	0x08025ff0
 80084f8:	08023ae4 	.word	0x08023ae4
 80084fc:	08025ff4 	.word	0x08025ff4
 8008500:	08026004 	.word	0x08026004
 8008504:	0802601c 	.word	0x0802601c
 8008508:	0802602c 	.word	0x0802602c
 800850c:	08024358 	.word	0x08024358
 8008510:	0802603c 	.word	0x0802603c
 8008514:	08025e6c 	.word	0x08025e6c
 8008518:	08023ec0 	.word	0x08023ec0
 800851c:	08026048 	.word	0x08026048
 8008520:	08023bbc 	.word	0x08023bbc
 8008524:	0802605c 	.word	0x0802605c
 8008528:	08026068 	.word	0x08026068
 800852c:	08026078 	.word	0x08026078
 8008530:	0802607c 	.word	0x0802607c
 8008534:	0802608c 	.word	0x0802608c
 8008538:	08023cac 	.word	0x08023cac
 800853c:	080260a0 	.word	0x080260a0
 8008540:	08023b24 	.word	0x08023b24
 8008544:	080260a4 	.word	0x080260a4
 8008548:	080260b4 	.word	0x080260b4
 800854c:	080260c8 	.word	0x080260c8
 8008550:	080260dc 	.word	0x080260dc
 8008554:	080260ec 	.word	0x080260ec
 8008558:	08026100 	.word	0x08026100
 800855c:	08023c60 	.word	0x08023c60
 8008560:	08026118 	.word	0x08026118
 8008564:	08026124 	.word	0x08026124
 8008568:	08023ff0 	.word	0x08023ff0
		case 189 :
			strcpy(p->name,"DUDDY QUALIFIED");
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8008572:	4ac1      	ldr	r2, [pc, #772]	; (8008878 <problem_fetch+0x7214>)
 8008574:	461c      	mov	r4, r3
 8008576:	4615      	mov	r5, r2
 8008578:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800857a:	6020      	str	r0, [r4, #0]
 800857c:	6061      	str	r1, [r4, #4]
 800857e:	60a2      	str	r2, [r4, #8]
 8008580:	60e3      	str	r3, [r4, #12]
			strcpy(p->grade,"7A+");
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8008588:	4abc      	ldr	r2, [pc, #752]	; (800887c <problem_fetch+0x7218>)
 800858a:	6810      	ldr	r0, [r2, #0]
 800858c:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	2207      	movs	r2, #7
 8008592:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,G,F,A,D,E,I");
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	33a4      	adds	r3, #164	; 0xa4
 8008598:	4ab9      	ldr	r2, [pc, #740]	; (8008880 <problem_fetch+0x721c>)
 800859a:	461c      	mov	r4, r3
 800859c:	4613      	mov	r3, r2
 800859e:	cb07      	ldmia	r3!, {r0, r1, r2}
 80085a0:	6020      	str	r0, [r4, #0]
 80085a2:	6061      	str	r1, [r4, #4]
 80085a4:	60a2      	str	r2, [r4, #8]
 80085a6:	881b      	ldrh	r3, [r3, #0]
 80085a8:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,9,11,14,15,16,18");
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	3304      	adds	r3, #4
 80085ae:	4ab5      	ldr	r2, [pc, #724]	; (8008884 <problem_fetch+0x7220>)
 80085b0:	461d      	mov	r5, r3
 80085b2:	4614      	mov	r4, r2
 80085b4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80085b6:	6028      	str	r0, [r5, #0]
 80085b8:	6069      	str	r1, [r5, #4]
 80085ba:	60aa      	str	r2, [r5, #8]
 80085bc:	60eb      	str	r3, [r5, #12]
 80085be:	8823      	ldrh	r3, [r4, #0]
 80085c0:	78a2      	ldrb	r2, [r4, #2]
 80085c2:	822b      	strh	r3, [r5, #16]
 80085c4:	4613      	mov	r3, r2
 80085c6:	74ab      	strb	r3, [r5, #18]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 80085ce:	4aae      	ldr	r2, [pc, #696]	; (8008888 <problem_fetch+0x7224>)
 80085d0:	461c      	mov	r4, r3
 80085d2:	4613      	mov	r3, r2
 80085d4:	cb07      	ldmia	r3!, {r0, r1, r2}
 80085d6:	6020      	str	r0, [r4, #0]
 80085d8:	6061      	str	r1, [r4, #4]
 80085da:	60a2      	str	r2, [r4, #8]
 80085dc:	881b      	ldrh	r3, [r3, #0]
 80085de:	81a3      	strh	r3, [r4, #12]
			break;
 80085e0:	f013 bf70 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 190 :
			strcpy(p->name,"EM'S BUNNY");
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80085ea:	49a8      	ldr	r1, [pc, #672]	; (800888c <problem_fetch+0x7228>)
 80085ec:	461a      	mov	r2, r3
 80085ee:	460b      	mov	r3, r1
 80085f0:	cb03      	ldmia	r3!, {r0, r1}
 80085f2:	6010      	str	r0, [r2, #0]
 80085f4:	6051      	str	r1, [r2, #4]
 80085f6:	8819      	ldrh	r1, [r3, #0]
 80085f8:	789b      	ldrb	r3, [r3, #2]
 80085fa:	8111      	strh	r1, [r2, #8]
 80085fc:	7293      	strb	r3, [r2, #10]
			strcpy(p->grade,"6C");
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8008604:	4aa2      	ldr	r2, [pc, #648]	; (8008890 <problem_fetch+0x722c>)
 8008606:	8811      	ldrh	r1, [r2, #0]
 8008608:	7892      	ldrb	r2, [r2, #2]
 800860a:	8019      	strh	r1, [r3, #0]
 800860c:	709a      	strb	r2, [r3, #2]
			p->moveSize = 6;
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	2206      	movs	r2, #6
 8008612:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,D,H,I,E,I");
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	33a4      	adds	r3, #164	; 0xa4
 8008618:	4a9e      	ldr	r2, [pc, #632]	; (8008894 <problem_fetch+0x7230>)
 800861a:	461c      	mov	r4, r3
 800861c:	4613      	mov	r3, r2
 800861e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8008620:	6020      	str	r0, [r4, #0]
 8008622:	6061      	str	r1, [r4, #4]
 8008624:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,7,8,10,14,18");
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	3304      	adds	r3, #4
 800862a:	4a9b      	ldr	r2, [pc, #620]	; (8008898 <problem_fetch+0x7234>)
 800862c:	461c      	mov	r4, r3
 800862e:	4613      	mov	r3, r2
 8008630:	cb07      	ldmia	r3!, {r0, r1, r2}
 8008632:	6020      	str	r0, [r4, #0]
 8008634:	6061      	str	r1, [r4, #4]
 8008636:	60a2      	str	r2, [r4, #8]
 8008638:	881a      	ldrh	r2, [r3, #0]
 800863a:	789b      	ldrb	r3, [r3, #2]
 800863c:	81a2      	strh	r2, [r4, #12]
 800863e:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8008646:	4a95      	ldr	r2, [pc, #596]	; (800889c <problem_fetch+0x7238>)
 8008648:	461c      	mov	r4, r3
 800864a:	4613      	mov	r3, r2
 800864c:	cb07      	ldmia	r3!, {r0, r1, r2}
 800864e:	6020      	str	r0, [r4, #0]
 8008650:	6061      	str	r1, [r4, #4]
 8008652:	60a2      	str	r2, [r4, #8]
			break;
 8008654:	f013 bf36 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 191 :
			strcpy(p->name,"DUST IN THE WIND");
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800865e:	4a90      	ldr	r2, [pc, #576]	; (80088a0 <problem_fetch+0x723c>)
 8008660:	461d      	mov	r5, r3
 8008662:	4614      	mov	r4, r2
 8008664:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008666:	6028      	str	r0, [r5, #0]
 8008668:	6069      	str	r1, [r5, #4]
 800866a:	60aa      	str	r2, [r5, #8]
 800866c:	60eb      	str	r3, [r5, #12]
 800866e:	7823      	ldrb	r3, [r4, #0]
 8008670:	742b      	strb	r3, [r5, #16]
			strcpy(p->grade,"6C+");
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8008678:	4a8a      	ldr	r2, [pc, #552]	; (80088a4 <problem_fetch+0x7240>)
 800867a:	6810      	ldr	r0, [r2, #0]
 800867c:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	2206      	movs	r2, #6
 8008682:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,E,H,E,G,D");
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	33a4      	adds	r3, #164	; 0xa4
 8008688:	4a87      	ldr	r2, [pc, #540]	; (80088a8 <problem_fetch+0x7244>)
 800868a:	461c      	mov	r4, r3
 800868c:	4613      	mov	r3, r2
 800868e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8008690:	6020      	str	r0, [r4, #0]
 8008692:	6061      	str	r1, [r4, #4]
 8008694:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,6,10,14,17,18");
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	3304      	adds	r3, #4
 800869a:	4a84      	ldr	r2, [pc, #528]	; (80088ac <problem_fetch+0x7248>)
 800869c:	461c      	mov	r4, r3
 800869e:	4615      	mov	r5, r2
 80086a0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80086a2:	6020      	str	r0, [r4, #0]
 80086a4:	6061      	str	r1, [r4, #4]
 80086a6:	60a2      	str	r2, [r4, #8]
 80086a8:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 80086b0:	4a7a      	ldr	r2, [pc, #488]	; (800889c <problem_fetch+0x7238>)
 80086b2:	461c      	mov	r4, r3
 80086b4:	4613      	mov	r3, r2
 80086b6:	cb07      	ldmia	r3!, {r0, r1, r2}
 80086b8:	6020      	str	r0, [r4, #0]
 80086ba:	6061      	str	r1, [r4, #4]
 80086bc:	60a2      	str	r2, [r4, #8]
			break;
 80086be:	f013 bf01 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 192 :
			strcpy(p->name,"THREE");
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80086c8:	4a79      	ldr	r2, [pc, #484]	; (80088b0 <problem_fetch+0x724c>)
 80086ca:	6810      	ldr	r0, [r2, #0]
 80086cc:	6018      	str	r0, [r3, #0]
 80086ce:	8892      	ldrh	r2, [r2, #4]
 80086d0:	809a      	strh	r2, [r3, #4]
			strcpy(p->grade,"6C+");
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80086d8:	4a72      	ldr	r2, [pc, #456]	; (80088a4 <problem_fetch+0x7240>)
 80086da:	6810      	ldr	r0, [r2, #0]
 80086dc:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	2206      	movs	r2, #6
 80086e2:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,J,H,C,E,A");
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	33a4      	adds	r3, #164	; 0xa4
 80086e8:	4a72      	ldr	r2, [pc, #456]	; (80088b4 <problem_fetch+0x7250>)
 80086ea:	461c      	mov	r4, r3
 80086ec:	4613      	mov	r3, r2
 80086ee:	cb07      	ldmia	r3!, {r0, r1, r2}
 80086f0:	6020      	str	r0, [r4, #0]
 80086f2:	6061      	str	r1, [r4, #4]
 80086f4:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"6,5,10,13,16,18");
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	3304      	adds	r3, #4
 80086fa:	4a6f      	ldr	r2, [pc, #444]	; (80088b8 <problem_fetch+0x7254>)
 80086fc:	461c      	mov	r4, r3
 80086fe:	4615      	mov	r5, r2
 8008700:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008702:	6020      	str	r0, [r4, #0]
 8008704:	6061      	str	r1, [r4, #4]
 8008706:	60a2      	str	r2, [r4, #8]
 8008708:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,s,d,d,d,e");
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8008710:	4a6a      	ldr	r2, [pc, #424]	; (80088bc <problem_fetch+0x7258>)
 8008712:	461c      	mov	r4, r3
 8008714:	4613      	mov	r3, r2
 8008716:	cb07      	ldmia	r3!, {r0, r1, r2}
 8008718:	6020      	str	r0, [r4, #0]
 800871a:	6061      	str	r1, [r4, #4]
 800871c:	60a2      	str	r2, [r4, #8]
			break;
 800871e:	f013 bed1 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 193 :
			strcpy(p->name,"GRO1");
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8008728:	4a65      	ldr	r2, [pc, #404]	; (80088c0 <problem_fetch+0x725c>)
 800872a:	6810      	ldr	r0, [r2, #0]
 800872c:	6018      	str	r0, [r3, #0]
 800872e:	7912      	ldrb	r2, [r2, #4]
 8008730:	711a      	strb	r2, [r3, #4]
			strcpy(p->grade,"6C");
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8008738:	4a55      	ldr	r2, [pc, #340]	; (8008890 <problem_fetch+0x722c>)
 800873a:	8811      	ldrh	r1, [r2, #0]
 800873c:	7892      	ldrb	r2, [r2, #2]
 800873e:	8019      	strh	r1, [r3, #0]
 8008740:	709a      	strb	r2, [r3, #2]
			p->moveSize = 6;
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	2206      	movs	r2, #6
 8008746:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,C,H,C,E,D");
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	33a4      	adds	r3, #164	; 0xa4
 800874c:	4a5d      	ldr	r2, [pc, #372]	; (80088c4 <problem_fetch+0x7260>)
 800874e:	461c      	mov	r4, r3
 8008750:	4613      	mov	r3, r2
 8008752:	cb07      	ldmia	r3!, {r0, r1, r2}
 8008754:	6020      	str	r0, [r4, #0]
 8008756:	6061      	str	r1, [r4, #4]
 8008758:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,8,10,13,16,18");
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	3304      	adds	r3, #4
 800875e:	4a5a      	ldr	r2, [pc, #360]	; (80088c8 <problem_fetch+0x7264>)
 8008760:	461c      	mov	r4, r3
 8008762:	4615      	mov	r5, r2
 8008764:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008766:	6020      	str	r0, [r4, #0]
 8008768:	6061      	str	r1, [r4, #4]
 800876a:	60a2      	str	r2, [r4, #8]
 800876c:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8008774:	4a49      	ldr	r2, [pc, #292]	; (800889c <problem_fetch+0x7238>)
 8008776:	461c      	mov	r4, r3
 8008778:	4613      	mov	r3, r2
 800877a:	cb07      	ldmia	r3!, {r0, r1, r2}
 800877c:	6020      	str	r0, [r4, #0]
 800877e:	6061      	str	r1, [r4, #4]
 8008780:	60a2      	str	r2, [r4, #8]
			break;
 8008782:	f013 be9f 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 194 :
			strcpy(p->name,"INTO THE SHADOW DUST");
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800878c:	4a4f      	ldr	r2, [pc, #316]	; (80088cc <problem_fetch+0x7268>)
 800878e:	461d      	mov	r5, r3
 8008790:	4614      	mov	r4, r2
 8008792:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008794:	6028      	str	r0, [r5, #0]
 8008796:	6069      	str	r1, [r5, #4]
 8008798:	60aa      	str	r2, [r5, #8]
 800879a:	60eb      	str	r3, [r5, #12]
 800879c:	6820      	ldr	r0, [r4, #0]
 800879e:	6128      	str	r0, [r5, #16]
 80087a0:	7923      	ldrb	r3, [r4, #4]
 80087a2:	752b      	strb	r3, [r5, #20]
			strcpy(p->grade,"6B+");
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80087aa:	4a49      	ldr	r2, [pc, #292]	; (80088d0 <problem_fetch+0x726c>)
 80087ac:	6810      	ldr	r0, [r2, #0]
 80087ae:	6018      	str	r0, [r3, #0]
			p->moveSize = 8;
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	2208      	movs	r2, #8
 80087b4:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,E,H,F,C,G,G,I");
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	33a4      	adds	r3, #164	; 0xa4
 80087ba:	4a46      	ldr	r2, [pc, #280]	; (80088d4 <problem_fetch+0x7270>)
 80087bc:	461c      	mov	r4, r3
 80087be:	4615      	mov	r5, r2
 80087c0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80087c2:	6020      	str	r0, [r4, #0]
 80087c4:	6061      	str	r1, [r4, #4]
 80087c6:	60a2      	str	r2, [r4, #8]
 80087c8:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,8,8,11,13,14,17,18");
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	3304      	adds	r3, #4
 80087ce:	4a42      	ldr	r2, [pc, #264]	; (80088d8 <problem_fetch+0x7274>)
 80087d0:	461d      	mov	r5, r3
 80087d2:	4614      	mov	r4, r2
 80087d4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80087d6:	6028      	str	r0, [r5, #0]
 80087d8:	6069      	str	r1, [r5, #4]
 80087da:	60aa      	str	r2, [r5, #8]
 80087dc:	60eb      	str	r3, [r5, #12]
 80087de:	6820      	ldr	r0, [r4, #0]
 80087e0:	6128      	str	r0, [r5, #16]
 80087e2:	7923      	ldrb	r3, [r4, #4]
 80087e4:	752b      	strb	r3, [r5, #20]
			strcpy(p->startFinish,"s,d,d,d,d,d,d,e");
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 80087ec:	4a3b      	ldr	r2, [pc, #236]	; (80088dc <problem_fetch+0x7278>)
 80087ee:	461c      	mov	r4, r3
 80087f0:	4615      	mov	r5, r2
 80087f2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80087f4:	6020      	str	r0, [r4, #0]
 80087f6:	6061      	str	r1, [r4, #4]
 80087f8:	60a2      	str	r2, [r4, #8]
 80087fa:	60e3      	str	r3, [r4, #12]
			break;
 80087fc:	f013 be62 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 195 :
			strcpy(p->name,"BILLIONS AND BILLIONS");
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8008806:	4a36      	ldr	r2, [pc, #216]	; (80088e0 <problem_fetch+0x727c>)
 8008808:	461d      	mov	r5, r3
 800880a:	4614      	mov	r4, r2
 800880c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800880e:	6028      	str	r0, [r5, #0]
 8008810:	6069      	str	r1, [r5, #4]
 8008812:	60aa      	str	r2, [r5, #8]
 8008814:	60eb      	str	r3, [r5, #12]
 8008816:	6820      	ldr	r0, [r4, #0]
 8008818:	6128      	str	r0, [r5, #16]
 800881a:	88a3      	ldrh	r3, [r4, #4]
 800881c:	82ab      	strh	r3, [r5, #20]
			strcpy(p->grade,"7A");
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8008824:	4a2f      	ldr	r2, [pc, #188]	; (80088e4 <problem_fetch+0x7280>)
 8008826:	8811      	ldrh	r1, [r2, #0]
 8008828:	7892      	ldrb	r2, [r2, #2]
 800882a:	8019      	strh	r1, [r3, #0]
 800882c:	709a      	strb	r2, [r3, #2]
			p->moveSize = 6;
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	2206      	movs	r2, #6
 8008832:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,H,K,H,G,D");
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	33a4      	adds	r3, #164	; 0xa4
 8008838:	4a2b      	ldr	r2, [pc, #172]	; (80088e8 <problem_fetch+0x7284>)
 800883a:	461c      	mov	r4, r3
 800883c:	4613      	mov	r3, r2
 800883e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8008840:	6020      	str	r0, [r4, #0]
 8008842:	6061      	str	r1, [r4, #4]
 8008844:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,5,9,12,14,18");
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	3304      	adds	r3, #4
 800884a:	4a28      	ldr	r2, [pc, #160]	; (80088ec <problem_fetch+0x7288>)
 800884c:	461c      	mov	r4, r3
 800884e:	4613      	mov	r3, r2
 8008850:	cb07      	ldmia	r3!, {r0, r1, r2}
 8008852:	6020      	str	r0, [r4, #0]
 8008854:	6061      	str	r1, [r4, #4]
 8008856:	60a2      	str	r2, [r4, #8]
 8008858:	881a      	ldrh	r2, [r3, #0]
 800885a:	789b      	ldrb	r3, [r3, #2]
 800885c:	81a2      	strh	r2, [r4, #12]
 800885e:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish,"s,s,d,d,d,e");
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8008866:	4a15      	ldr	r2, [pc, #84]	; (80088bc <problem_fetch+0x7258>)
 8008868:	461c      	mov	r4, r3
 800886a:	4613      	mov	r3, r2
 800886c:	cb07      	ldmia	r3!, {r0, r1, r2}
 800886e:	6020      	str	r0, [r4, #0]
 8008870:	6061      	str	r1, [r4, #4]
 8008872:	60a2      	str	r2, [r4, #8]
			break;
 8008874:	f013 be26 	b.w	801c4c4 <problem_fetch+0x1ae60>
 8008878:	08026134 	.word	0x08026134
 800887c:	08023cc4 	.word	0x08023cc4
 8008880:	08026144 	.word	0x08026144
 8008884:	08026154 	.word	0x08026154
 8008888:	08023cac 	.word	0x08023cac
 800888c:	08026168 	.word	0x08026168
 8008890:	08023bf0 	.word	0x08023bf0
 8008894:	08026174 	.word	0x08026174
 8008898:	08026180 	.word	0x08026180
 800889c:	08023ec0 	.word	0x08023ec0
 80088a0:	08026190 	.word	0x08026190
 80088a4:	08023bbc 	.word	0x08023bbc
 80088a8:	080261a4 	.word	0x080261a4
 80088ac:	080261b0 	.word	0x080261b0
 80088b0:	080261c0 	.word	0x080261c0
 80088b4:	080261c8 	.word	0x080261c8
 80088b8:	080261d4 	.word	0x080261d4
 80088bc:	08023b04 	.word	0x08023b04
 80088c0:	080261e4 	.word	0x080261e4
 80088c4:	080261ec 	.word	0x080261ec
 80088c8:	080261f8 	.word	0x080261f8
 80088cc:	08026208 	.word	0x08026208
 80088d0:	08023b24 	.word	0x08023b24
 80088d4:	08026220 	.word	0x08026220
 80088d8:	08026230 	.word	0x08026230
 80088dc:	08023d34 	.word	0x08023d34
 80088e0:	08026248 	.word	0x08026248
 80088e4:	08023ae4 	.word	0x08023ae4
 80088e8:	08026260 	.word	0x08026260
 80088ec:	0802626c 	.word	0x0802626c
		case 196 :
			strcpy(p->name,"TWO");
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80088f6:	4abd      	ldr	r2, [pc, #756]	; (8008bec <problem_fetch+0x7588>)
 80088f8:	6810      	ldr	r0, [r2, #0]
 80088fa:	6018      	str	r0, [r3, #0]
			strcpy(p->grade,"6C+");
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8008902:	4abb      	ldr	r2, [pc, #748]	; (8008bf0 <problem_fetch+0x758c>)
 8008904:	6810      	ldr	r0, [r2, #0]
 8008906:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	2207      	movs	r2, #7
 800890c:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"C,E,E,F,E,I,I");
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	33a4      	adds	r3, #164	; 0xa4
 8008912:	4ab8      	ldr	r2, [pc, #736]	; (8008bf4 <problem_fetch+0x7590>)
 8008914:	461c      	mov	r4, r3
 8008916:	4613      	mov	r3, r2
 8008918:	cb07      	ldmia	r3!, {r0, r1, r2}
 800891a:	6020      	str	r0, [r4, #0]
 800891c:	6061      	str	r1, [r4, #4]
 800891e:	60a2      	str	r2, [r4, #8]
 8008920:	881b      	ldrh	r3, [r3, #0]
 8008922:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,6,8,11,14,14,18");
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	3304      	adds	r3, #4
 8008928:	4ab3      	ldr	r2, [pc, #716]	; (8008bf8 <problem_fetch+0x7594>)
 800892a:	461d      	mov	r5, r3
 800892c:	4614      	mov	r4, r2
 800892e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008930:	6028      	str	r0, [r5, #0]
 8008932:	6069      	str	r1, [r5, #4]
 8008934:	60aa      	str	r2, [r5, #8]
 8008936:	60eb      	str	r3, [r5, #12]
 8008938:	8823      	ldrh	r3, [r4, #0]
 800893a:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,s,d,d,d,d,e");
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8008942:	4aae      	ldr	r2, [pc, #696]	; (8008bfc <problem_fetch+0x7598>)
 8008944:	461c      	mov	r4, r3
 8008946:	4613      	mov	r3, r2
 8008948:	cb07      	ldmia	r3!, {r0, r1, r2}
 800894a:	6020      	str	r0, [r4, #0]
 800894c:	6061      	str	r1, [r4, #4]
 800894e:	60a2      	str	r2, [r4, #8]
 8008950:	881b      	ldrh	r3, [r3, #0]
 8008952:	81a3      	strh	r3, [r4, #12]
			break;
 8008954:	f013 bdb6 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 197 :
			strcpy(p->name,"CHINGA SU ES TO MADRE");
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800895e:	4aa8      	ldr	r2, [pc, #672]	; (8008c00 <problem_fetch+0x759c>)
 8008960:	461d      	mov	r5, r3
 8008962:	4614      	mov	r4, r2
 8008964:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008966:	6028      	str	r0, [r5, #0]
 8008968:	6069      	str	r1, [r5, #4]
 800896a:	60aa      	str	r2, [r5, #8]
 800896c:	60eb      	str	r3, [r5, #12]
 800896e:	6820      	ldr	r0, [r4, #0]
 8008970:	6128      	str	r0, [r5, #16]
 8008972:	88a3      	ldrh	r3, [r4, #4]
 8008974:	82ab      	strh	r3, [r5, #20]
			strcpy(p->grade,"7C");
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800897c:	4aa1      	ldr	r2, [pc, #644]	; (8008c04 <problem_fetch+0x75a0>)
 800897e:	8811      	ldrh	r1, [r2, #0]
 8008980:	7892      	ldrb	r2, [r2, #2]
 8008982:	8019      	strh	r1, [r3, #0]
 8008984:	709a      	strb	r2, [r3, #2]
			p->moveSize = 5;
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	2205      	movs	r2, #5
 800898a:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"E,F,B,A,B");
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	33a4      	adds	r3, #164	; 0xa4
 8008990:	499d      	ldr	r1, [pc, #628]	; (8008c08 <problem_fetch+0x75a4>)
 8008992:	461a      	mov	r2, r3
 8008994:	460b      	mov	r3, r1
 8008996:	cb03      	ldmia	r3!, {r0, r1}
 8008998:	6010      	str	r0, [r2, #0]
 800899a:	6051      	str	r1, [r2, #4]
 800899c:	881b      	ldrh	r3, [r3, #0]
 800899e:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"6,11,12,18,15");
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	3304      	adds	r3, #4
 80089a4:	4a99      	ldr	r2, [pc, #612]	; (8008c0c <problem_fetch+0x75a8>)
 80089a6:	461c      	mov	r4, r3
 80089a8:	4613      	mov	r3, r2
 80089aa:	cb07      	ldmia	r3!, {r0, r1, r2}
 80089ac:	6020      	str	r0, [r4, #0]
 80089ae:	6061      	str	r1, [r4, #4]
 80089b0:	60a2      	str	r2, [r4, #8]
 80089b2:	881b      	ldrh	r3, [r3, #0]
 80089b4:	81a3      	strh	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,e,d");
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 80089bc:	4994      	ldr	r1, [pc, #592]	; (8008c10 <problem_fetch+0x75ac>)
 80089be:	461a      	mov	r2, r3
 80089c0:	460b      	mov	r3, r1
 80089c2:	cb03      	ldmia	r3!, {r0, r1}
 80089c4:	6010      	str	r0, [r2, #0]
 80089c6:	6051      	str	r1, [r2, #4]
 80089c8:	881b      	ldrh	r3, [r3, #0]
 80089ca:	8113      	strh	r3, [r2, #8]
			break;
 80089cc:	f013 bd7a 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 198 :
			strcpy(p->name,"DON'T BLACKOUT");
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80089d6:	4a8f      	ldr	r2, [pc, #572]	; (8008c14 <problem_fetch+0x75b0>)
 80089d8:	461c      	mov	r4, r3
 80089da:	4613      	mov	r3, r2
 80089dc:	cb07      	ldmia	r3!, {r0, r1, r2}
 80089de:	6020      	str	r0, [r4, #0]
 80089e0:	6061      	str	r1, [r4, #4]
 80089e2:	60a2      	str	r2, [r4, #8]
 80089e4:	881a      	ldrh	r2, [r3, #0]
 80089e6:	789b      	ldrb	r3, [r3, #2]
 80089e8:	81a2      	strh	r2, [r4, #12]
 80089ea:	73a3      	strb	r3, [r4, #14]
			strcpy(p->grade,"7A");
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80089f2:	4a89      	ldr	r2, [pc, #548]	; (8008c18 <problem_fetch+0x75b4>)
 80089f4:	8811      	ldrh	r1, [r2, #0]
 80089f6:	7892      	ldrb	r2, [r2, #2]
 80089f8:	8019      	strh	r1, [r3, #0]
 80089fa:	709a      	strb	r2, [r3, #2]
			p->moveSize = 7;
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	2207      	movs	r2, #7
 8008a00:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,E,F,A,D,H,A");
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	33a4      	adds	r3, #164	; 0xa4
 8008a06:	4a85      	ldr	r2, [pc, #532]	; (8008c1c <problem_fetch+0x75b8>)
 8008a08:	461c      	mov	r4, r3
 8008a0a:	4613      	mov	r3, r2
 8008a0c:	cb07      	ldmia	r3!, {r0, r1, r2}
 8008a0e:	6020      	str	r0, [r4, #0]
 8008a10:	6061      	str	r1, [r4, #4]
 8008a12:	60a2      	str	r2, [r4, #8]
 8008a14:	881b      	ldrh	r3, [r3, #0]
 8008a16:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,6,11,9,15,10,18");
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	3304      	adds	r3, #4
 8008a1c:	4a80      	ldr	r2, [pc, #512]	; (8008c20 <problem_fetch+0x75bc>)
 8008a1e:	461d      	mov	r5, r3
 8008a20:	4614      	mov	r4, r2
 8008a22:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008a24:	6028      	str	r0, [r5, #0]
 8008a26:	6069      	str	r1, [r5, #4]
 8008a28:	60aa      	str	r2, [r5, #8]
 8008a2a:	60eb      	str	r3, [r5, #12]
 8008a2c:	8823      	ldrh	r3, [r4, #0]
 8008a2e:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,s,d,d,d,d,e");
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8008a36:	4a71      	ldr	r2, [pc, #452]	; (8008bfc <problem_fetch+0x7598>)
 8008a38:	461c      	mov	r4, r3
 8008a3a:	4613      	mov	r3, r2
 8008a3c:	cb07      	ldmia	r3!, {r0, r1, r2}
 8008a3e:	6020      	str	r0, [r4, #0]
 8008a40:	6061      	str	r1, [r4, #4]
 8008a42:	60a2      	str	r2, [r4, #8]
 8008a44:	881b      	ldrh	r3, [r3, #0]
 8008a46:	81a3      	strh	r3, [r4, #12]
			break;
 8008a48:	f013 bd3c 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 199 :
			strcpy(p->name,"LUCID NONSENSE");
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8008a52:	4a74      	ldr	r2, [pc, #464]	; (8008c24 <problem_fetch+0x75c0>)
 8008a54:	461c      	mov	r4, r3
 8008a56:	4613      	mov	r3, r2
 8008a58:	cb07      	ldmia	r3!, {r0, r1, r2}
 8008a5a:	6020      	str	r0, [r4, #0]
 8008a5c:	6061      	str	r1, [r4, #4]
 8008a5e:	60a2      	str	r2, [r4, #8]
 8008a60:	881a      	ldrh	r2, [r3, #0]
 8008a62:	789b      	ldrb	r3, [r3, #2]
 8008a64:	81a2      	strh	r2, [r4, #12]
 8008a66:	73a3      	strb	r3, [r4, #14]
			strcpy(p->grade,"7A");
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8008a6e:	4a6a      	ldr	r2, [pc, #424]	; (8008c18 <problem_fetch+0x75b4>)
 8008a70:	8811      	ldrh	r1, [r2, #0]
 8008a72:	7892      	ldrb	r2, [r2, #2]
 8008a74:	8019      	strh	r1, [r3, #0]
 8008a76:	709a      	strb	r2, [r3, #2]
			p->moveSize = 6;
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	2206      	movs	r2, #6
 8008a7c:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,E,D,E,B,I");
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	33a4      	adds	r3, #164	; 0xa4
 8008a82:	4a69      	ldr	r2, [pc, #420]	; (8008c28 <problem_fetch+0x75c4>)
 8008a84:	461c      	mov	r4, r3
 8008a86:	4613      	mov	r3, r2
 8008a88:	cb07      	ldmia	r3!, {r0, r1, r2}
 8008a8a:	6020      	str	r0, [r4, #0]
 8008a8c:	6061      	str	r1, [r4, #4]
 8008a8e:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,8,15,16,10,18");
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	3304      	adds	r3, #4
 8008a94:	4a65      	ldr	r2, [pc, #404]	; (8008c2c <problem_fetch+0x75c8>)
 8008a96:	461c      	mov	r4, r3
 8008a98:	4615      	mov	r5, r2
 8008a9a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008a9c:	6020      	str	r0, [r4, #0]
 8008a9e:	6061      	str	r1, [r4, #4]
 8008aa0:	60a2      	str	r2, [r4, #8]
 8008aa2:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8008aaa:	4a61      	ldr	r2, [pc, #388]	; (8008c30 <problem_fetch+0x75cc>)
 8008aac:	461c      	mov	r4, r3
 8008aae:	4613      	mov	r3, r2
 8008ab0:	cb07      	ldmia	r3!, {r0, r1, r2}
 8008ab2:	6020      	str	r0, [r4, #0]
 8008ab4:	6061      	str	r1, [r4, #4]
 8008ab6:	60a2      	str	r2, [r4, #8]
			break;
 8008ab8:	f013 bd04 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 200 :
			strcpy(p->name,"SNAP");
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8008ac2:	4a5c      	ldr	r2, [pc, #368]	; (8008c34 <problem_fetch+0x75d0>)
 8008ac4:	6810      	ldr	r0, [r2, #0]
 8008ac6:	6018      	str	r0, [r3, #0]
 8008ac8:	7912      	ldrb	r2, [r2, #4]
 8008aca:	711a      	strb	r2, [r3, #4]
			strcpy(p->grade,"7A+");
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8008ad2:	4a59      	ldr	r2, [pc, #356]	; (8008c38 <problem_fetch+0x75d4>)
 8008ad4:	6810      	ldr	r0, [r2, #0]
 8008ad6:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	2206      	movs	r2, #6
 8008adc:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"B,D,B,E,A,D");
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	33a4      	adds	r3, #164	; 0xa4
 8008ae2:	4a56      	ldr	r2, [pc, #344]	; (8008c3c <problem_fetch+0x75d8>)
 8008ae4:	461c      	mov	r4, r3
 8008ae6:	4613      	mov	r3, r2
 8008ae8:	cb07      	ldmia	r3!, {r0, r1, r2}
 8008aea:	6020      	str	r0, [r4, #0]
 8008aec:	6061      	str	r1, [r4, #4]
 8008aee:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"6,7,10,12,14,18");
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	3304      	adds	r3, #4
 8008af4:	4a52      	ldr	r2, [pc, #328]	; (8008c40 <problem_fetch+0x75dc>)
 8008af6:	461c      	mov	r4, r3
 8008af8:	4615      	mov	r5, r2
 8008afa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008afc:	6020      	str	r0, [r4, #0]
 8008afe:	6061      	str	r1, [r4, #4]
 8008b00:	60a2      	str	r2, [r4, #8]
 8008b02:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8008b0a:	4a49      	ldr	r2, [pc, #292]	; (8008c30 <problem_fetch+0x75cc>)
 8008b0c:	461c      	mov	r4, r3
 8008b0e:	4613      	mov	r3, r2
 8008b10:	cb07      	ldmia	r3!, {r0, r1, r2}
 8008b12:	6020      	str	r0, [r4, #0]
 8008b14:	6061      	str	r1, [r4, #4]
 8008b16:	60a2      	str	r2, [r4, #8]
			break;
 8008b18:	f013 bcd4 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 201 :
			strcpy(p->name,"FAT 'N WEAK");
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8008b22:	4a48      	ldr	r2, [pc, #288]	; (8008c44 <problem_fetch+0x75e0>)
 8008b24:	461c      	mov	r4, r3
 8008b26:	4613      	mov	r3, r2
 8008b28:	cb07      	ldmia	r3!, {r0, r1, r2}
 8008b2a:	6020      	str	r0, [r4, #0]
 8008b2c:	6061      	str	r1, [r4, #4]
 8008b2e:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade,"6C+");
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8008b36:	4a2e      	ldr	r2, [pc, #184]	; (8008bf0 <problem_fetch+0x758c>)
 8008b38:	6810      	ldr	r0, [r2, #0]
 8008b3a:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	2206      	movs	r2, #6
 8008b40:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,E,E,A,E,A");
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	33a4      	adds	r3, #164	; 0xa4
 8008b46:	4a40      	ldr	r2, [pc, #256]	; (8008c48 <problem_fetch+0x75e4>)
 8008b48:	461c      	mov	r4, r3
 8008b4a:	4613      	mov	r3, r2
 8008b4c:	cb07      	ldmia	r3!, {r0, r1, r2}
 8008b4e:	6020      	str	r0, [r4, #0]
 8008b50:	6061      	str	r1, [r4, #4]
 8008b52:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,8,12,14,16,18");
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	3304      	adds	r3, #4
 8008b58:	4a3c      	ldr	r2, [pc, #240]	; (8008c4c <problem_fetch+0x75e8>)
 8008b5a:	461c      	mov	r4, r3
 8008b5c:	4615      	mov	r5, r2
 8008b5e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008b60:	6020      	str	r0, [r4, #0]
 8008b62:	6061      	str	r1, [r4, #4]
 8008b64:	60a2      	str	r2, [r4, #8]
 8008b66:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8008b6e:	4a30      	ldr	r2, [pc, #192]	; (8008c30 <problem_fetch+0x75cc>)
 8008b70:	461c      	mov	r4, r3
 8008b72:	4613      	mov	r3, r2
 8008b74:	cb07      	ldmia	r3!, {r0, r1, r2}
 8008b76:	6020      	str	r0, [r4, #0]
 8008b78:	6061      	str	r1, [r4, #4]
 8008b7a:	60a2      	str	r2, [r4, #8]
			break;
 8008b7c:	f013 bca2 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 202 :
			strcpy(p->name,"MSFTS");
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8008b86:	4a32      	ldr	r2, [pc, #200]	; (8008c50 <problem_fetch+0x75ec>)
 8008b88:	6810      	ldr	r0, [r2, #0]
 8008b8a:	6018      	str	r0, [r3, #0]
 8008b8c:	8892      	ldrh	r2, [r2, #4]
 8008b8e:	809a      	strh	r2, [r3, #4]
			strcpy(p->grade,"6C+");
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8008b96:	4a16      	ldr	r2, [pc, #88]	; (8008bf0 <problem_fetch+0x758c>)
 8008b98:	6810      	ldr	r0, [r2, #0]
 8008b9a:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	2207      	movs	r2, #7
 8008ba0:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"H,G,E,J,J,H,I");
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	33a4      	adds	r3, #164	; 0xa4
 8008ba6:	4a2b      	ldr	r2, [pc, #172]	; (8008c54 <problem_fetch+0x75f0>)
 8008ba8:	461c      	mov	r4, r3
 8008baa:	4613      	mov	r3, r2
 8008bac:	cb07      	ldmia	r3!, {r0, r1, r2}
 8008bae:	6020      	str	r0, [r4, #0]
 8008bb0:	6061      	str	r1, [r4, #4]
 8008bb2:	60a2      	str	r2, [r4, #8]
 8008bb4:	881b      	ldrh	r3, [r3, #0]
 8008bb6:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,9,12,5,13,16,18");
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	3304      	adds	r3, #4
 8008bbc:	4a26      	ldr	r2, [pc, #152]	; (8008c58 <problem_fetch+0x75f4>)
 8008bbe:	461d      	mov	r5, r3
 8008bc0:	4614      	mov	r4, r2
 8008bc2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008bc4:	6028      	str	r0, [r5, #0]
 8008bc6:	6069      	str	r1, [r5, #4]
 8008bc8:	60aa      	str	r2, [r5, #8]
 8008bca:	60eb      	str	r3, [r5, #12]
 8008bcc:	8823      	ldrh	r3, [r4, #0]
 8008bce:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,d,d,s,d,d,e");
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8008bd6:	4a21      	ldr	r2, [pc, #132]	; (8008c5c <problem_fetch+0x75f8>)
 8008bd8:	461c      	mov	r4, r3
 8008bda:	4613      	mov	r3, r2
 8008bdc:	cb07      	ldmia	r3!, {r0, r1, r2}
 8008bde:	6020      	str	r0, [r4, #0]
 8008be0:	6061      	str	r1, [r4, #4]
 8008be2:	60a2      	str	r2, [r4, #8]
 8008be4:	881b      	ldrh	r3, [r3, #0]
 8008be6:	81a3      	strh	r3, [r4, #12]
			break;
 8008be8:	f013 bc6c 	b.w	801c4c4 <problem_fetch+0x1ae60>
 8008bec:	0802627c 	.word	0x0802627c
 8008bf0:	08023bbc 	.word	0x08023bbc
 8008bf4:	08026280 	.word	0x08026280
 8008bf8:	08026290 	.word	0x08026290
 8008bfc:	08023b9c 	.word	0x08023b9c
 8008c00:	080262a4 	.word	0x080262a4
 8008c04:	08024358 	.word	0x08024358
 8008c08:	080262bc 	.word	0x080262bc
 8008c0c:	080262c8 	.word	0x080262c8
 8008c10:	080262d8 	.word	0x080262d8
 8008c14:	080262e4 	.word	0x080262e4
 8008c18:	08023ae4 	.word	0x08023ae4
 8008c1c:	080262f4 	.word	0x080262f4
 8008c20:	08026304 	.word	0x08026304
 8008c24:	08026318 	.word	0x08026318
 8008c28:	08026328 	.word	0x08026328
 8008c2c:	08026334 	.word	0x08026334
 8008c30:	08023ec0 	.word	0x08023ec0
 8008c34:	08026344 	.word	0x08026344
 8008c38:	08023cc4 	.word	0x08023cc4
 8008c3c:	0802634c 	.word	0x0802634c
 8008c40:	08026358 	.word	0x08026358
 8008c44:	08026368 	.word	0x08026368
 8008c48:	08026374 	.word	0x08026374
 8008c4c:	08026380 	.word	0x08026380
 8008c50:	08026390 	.word	0x08026390
 8008c54:	08026398 	.word	0x08026398
 8008c58:	080263a8 	.word	0x080263a8
 8008c5c:	08025f24 	.word	0x08025f24
		case 203 :
			strcpy(p->name,"ITIM");
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8008c66:	4aaa      	ldr	r2, [pc, #680]	; (8008f10 <problem_fetch+0x78ac>)
 8008c68:	6810      	ldr	r0, [r2, #0]
 8008c6a:	6018      	str	r0, [r3, #0]
 8008c6c:	7912      	ldrb	r2, [r2, #4]
 8008c6e:	711a      	strb	r2, [r3, #4]
			strcpy(p->grade,"7A+");
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8008c76:	4aa7      	ldr	r2, [pc, #668]	; (8008f14 <problem_fetch+0x78b0>)
 8008c78:	6810      	ldr	r0, [r2, #0]
 8008c7a:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	2207      	movs	r2, #7
 8008c80:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"C,I,E,E,G,E,G");
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	33a4      	adds	r3, #164	; 0xa4
 8008c86:	4aa4      	ldr	r2, [pc, #656]	; (8008f18 <problem_fetch+0x78b4>)
 8008c88:	461c      	mov	r4, r3
 8008c8a:	4613      	mov	r3, r2
 8008c8c:	cb07      	ldmia	r3!, {r0, r1, r2}
 8008c8e:	6020      	str	r0, [r4, #0]
 8008c90:	6061      	str	r1, [r4, #4]
 8008c92:	60a2      	str	r2, [r4, #8]
 8008c94:	881b      	ldrh	r3, [r3, #0]
 8008c96:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"13,18,9,16,14,8,4");
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	3304      	adds	r3, #4
 8008c9c:	4a9f      	ldr	r2, [pc, #636]	; (8008f1c <problem_fetch+0x78b8>)
 8008c9e:	461d      	mov	r5, r3
 8008ca0:	4614      	mov	r4, r2
 8008ca2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008ca4:	6028      	str	r0, [r5, #0]
 8008ca6:	6069      	str	r1, [r5, #4]
 8008ca8:	60aa      	str	r2, [r5, #8]
 8008caa:	60eb      	str	r3, [r5, #12]
 8008cac:	8823      	ldrh	r3, [r4, #0]
 8008cae:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"d,e,d,d,d,d,s");
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8008cb6:	4a9a      	ldr	r2, [pc, #616]	; (8008f20 <problem_fetch+0x78bc>)
 8008cb8:	461c      	mov	r4, r3
 8008cba:	4613      	mov	r3, r2
 8008cbc:	cb07      	ldmia	r3!, {r0, r1, r2}
 8008cbe:	6020      	str	r0, [r4, #0]
 8008cc0:	6061      	str	r1, [r4, #4]
 8008cc2:	60a2      	str	r2, [r4, #8]
 8008cc4:	881b      	ldrh	r3, [r3, #0]
 8008cc6:	81a3      	strh	r3, [r4, #12]
			break;
 8008cc8:	f013 bbfc 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 204 :
			strcpy(p->name,"SIDEPULL SIDEWALK");
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8008cd2:	4a94      	ldr	r2, [pc, #592]	; (8008f24 <problem_fetch+0x78c0>)
 8008cd4:	461d      	mov	r5, r3
 8008cd6:	4614      	mov	r4, r2
 8008cd8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008cda:	6028      	str	r0, [r5, #0]
 8008cdc:	6069      	str	r1, [r5, #4]
 8008cde:	60aa      	str	r2, [r5, #8]
 8008ce0:	60eb      	str	r3, [r5, #12]
 8008ce2:	8823      	ldrh	r3, [r4, #0]
 8008ce4:	822b      	strh	r3, [r5, #16]
			strcpy(p->grade,"6B+");
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8008cec:	4a8e      	ldr	r2, [pc, #568]	; (8008f28 <problem_fetch+0x78c4>)
 8008cee:	6810      	ldr	r0, [r2, #0]
 8008cf0:	6018      	str	r0, [r3, #0]
			p->moveSize = 10;
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	220a      	movs	r2, #10
 8008cf6:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,J,G,H,G,H,F,I,G,I");
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	33a4      	adds	r3, #164	; 0xa4
 8008cfc:	4a8b      	ldr	r2, [pc, #556]	; (8008f2c <problem_fetch+0x78c8>)
 8008cfe:	461d      	mov	r5, r3
 8008d00:	4614      	mov	r4, r2
 8008d02:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008d04:	6028      	str	r0, [r5, #0]
 8008d06:	6069      	str	r1, [r5, #4]
 8008d08:	60aa      	str	r2, [r5, #8]
 8008d0a:	60eb      	str	r3, [r5, #12]
 8008d0c:	6820      	ldr	r0, [r4, #0]
 8008d0e:	6128      	str	r0, [r5, #16]
			strcpy(p->moveNumbers,"4,5,6,8,9,10,11,14,15,18");
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	3304      	adds	r3, #4
 8008d14:	4a86      	ldr	r2, [pc, #536]	; (8008f30 <problem_fetch+0x78cc>)
 8008d16:	461d      	mov	r5, r3
 8008d18:	4614      	mov	r4, r2
 8008d1a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008d1c:	6028      	str	r0, [r5, #0]
 8008d1e:	6069      	str	r1, [r5, #4]
 8008d20:	60aa      	str	r2, [r5, #8]
 8008d22:	60eb      	str	r3, [r5, #12]
 8008d24:	cc03      	ldmia	r4!, {r0, r1}
 8008d26:	6128      	str	r0, [r5, #16]
 8008d28:	6169      	str	r1, [r5, #20]
 8008d2a:	7823      	ldrb	r3, [r4, #0]
 8008d2c:	762b      	strb	r3, [r5, #24]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,d,d,e");
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8008d34:	4a7f      	ldr	r2, [pc, #508]	; (8008f34 <problem_fetch+0x78d0>)
 8008d36:	461d      	mov	r5, r3
 8008d38:	4614      	mov	r4, r2
 8008d3a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008d3c:	6028      	str	r0, [r5, #0]
 8008d3e:	6069      	str	r1, [r5, #4]
 8008d40:	60aa      	str	r2, [r5, #8]
 8008d42:	60eb      	str	r3, [r5, #12]
 8008d44:	6820      	ldr	r0, [r4, #0]
 8008d46:	6128      	str	r0, [r5, #16]
			break;
 8008d48:	f013 bbbc 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 205 :
			strcpy(p->name,"DROPPIN SOAP");
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8008d52:	4a79      	ldr	r2, [pc, #484]	; (8008f38 <problem_fetch+0x78d4>)
 8008d54:	461c      	mov	r4, r3
 8008d56:	4613      	mov	r3, r2
 8008d58:	cb07      	ldmia	r3!, {r0, r1, r2}
 8008d5a:	6020      	str	r0, [r4, #0]
 8008d5c:	6061      	str	r1, [r4, #4]
 8008d5e:	60a2      	str	r2, [r4, #8]
 8008d60:	781b      	ldrb	r3, [r3, #0]
 8008d62:	7323      	strb	r3, [r4, #12]
			strcpy(p->grade,"7A+");
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8008d6a:	4a6a      	ldr	r2, [pc, #424]	; (8008f14 <problem_fetch+0x78b0>)
 8008d6c:	6810      	ldr	r0, [r2, #0]
 8008d6e:	6018      	str	r0, [r3, #0]
			p->moveSize = 5;
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	2205      	movs	r2, #5
 8008d74:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,G,E,H,I");
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	33a4      	adds	r3, #164	; 0xa4
 8008d7a:	4970      	ldr	r1, [pc, #448]	; (8008f3c <problem_fetch+0x78d8>)
 8008d7c:	461a      	mov	r2, r3
 8008d7e:	460b      	mov	r3, r1
 8008d80:	cb03      	ldmia	r3!, {r0, r1}
 8008d82:	6010      	str	r0, [r2, #0]
 8008d84:	6051      	str	r1, [r2, #4]
 8008d86:	881b      	ldrh	r3, [r3, #0]
 8008d88:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"5,9,14,12,18");
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	3304      	adds	r3, #4
 8008d8e:	4a6c      	ldr	r2, [pc, #432]	; (8008f40 <problem_fetch+0x78dc>)
 8008d90:	461c      	mov	r4, r3
 8008d92:	4613      	mov	r3, r2
 8008d94:	cb07      	ldmia	r3!, {r0, r1, r2}
 8008d96:	6020      	str	r0, [r4, #0]
 8008d98:	6061      	str	r1, [r4, #4]
 8008d9a:	60a2      	str	r2, [r4, #8]
 8008d9c:	781b      	ldrb	r3, [r3, #0]
 8008d9e:	7323      	strb	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,e");
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8008da6:	4967      	ldr	r1, [pc, #412]	; (8008f44 <problem_fetch+0x78e0>)
 8008da8:	461a      	mov	r2, r3
 8008daa:	460b      	mov	r3, r1
 8008dac:	cb03      	ldmia	r3!, {r0, r1}
 8008dae:	6010      	str	r0, [r2, #0]
 8008db0:	6051      	str	r1, [r2, #4]
 8008db2:	881b      	ldrh	r3, [r3, #0]
 8008db4:	8113      	strh	r3, [r2, #8]
			break;
 8008db6:	f013 bb85 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 206 :
			strcpy(p->name,"BLACK #268162639");
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8008dc0:	4a61      	ldr	r2, [pc, #388]	; (8008f48 <problem_fetch+0x78e4>)
 8008dc2:	461d      	mov	r5, r3
 8008dc4:	4614      	mov	r4, r2
 8008dc6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008dc8:	6028      	str	r0, [r5, #0]
 8008dca:	6069      	str	r1, [r5, #4]
 8008dcc:	60aa      	str	r2, [r5, #8]
 8008dce:	60eb      	str	r3, [r5, #12]
 8008dd0:	7823      	ldrb	r3, [r4, #0]
 8008dd2:	742b      	strb	r3, [r5, #16]
			strcpy(p->grade,"7A+");
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8008dda:	4a4e      	ldr	r2, [pc, #312]	; (8008f14 <problem_fetch+0x78b0>)
 8008ddc:	6810      	ldr	r0, [r2, #0]
 8008dde:	6018      	str	r0, [r3, #0]
			p->moveSize = 5;
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	2205      	movs	r2, #5
 8008de4:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,I,H,J,D");
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	33a4      	adds	r3, #164	; 0xa4
 8008dea:	4958      	ldr	r1, [pc, #352]	; (8008f4c <problem_fetch+0x78e8>)
 8008dec:	461a      	mov	r2, r3
 8008dee:	460b      	mov	r3, r1
 8008df0:	cb03      	ldmia	r3!, {r0, r1}
 8008df2:	6010      	str	r0, [r2, #0]
 8008df4:	6051      	str	r1, [r2, #4]
 8008df6:	881b      	ldrh	r3, [r3, #0]
 8008df8:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"4,10,12,16,18");
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	3304      	adds	r3, #4
 8008dfe:	4a54      	ldr	r2, [pc, #336]	; (8008f50 <problem_fetch+0x78ec>)
 8008e00:	461c      	mov	r4, r3
 8008e02:	4613      	mov	r3, r2
 8008e04:	cb07      	ldmia	r3!, {r0, r1, r2}
 8008e06:	6020      	str	r0, [r4, #0]
 8008e08:	6061      	str	r1, [r4, #4]
 8008e0a:	60a2      	str	r2, [r4, #8]
 8008e0c:	881b      	ldrh	r3, [r3, #0]
 8008e0e:	81a3      	strh	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,e");
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8008e16:	494b      	ldr	r1, [pc, #300]	; (8008f44 <problem_fetch+0x78e0>)
 8008e18:	461a      	mov	r2, r3
 8008e1a:	460b      	mov	r3, r1
 8008e1c:	cb03      	ldmia	r3!, {r0, r1}
 8008e1e:	6010      	str	r0, [r2, #0]
 8008e20:	6051      	str	r1, [r2, #4]
 8008e22:	881b      	ldrh	r3, [r3, #0]
 8008e24:	8113      	strh	r3, [r2, #8]
			break;
 8008e26:	f013 bb4d 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 207 :
			strcpy(p->name,"MBT1RIGHT");
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8008e30:	4948      	ldr	r1, [pc, #288]	; (8008f54 <problem_fetch+0x78f0>)
 8008e32:	461a      	mov	r2, r3
 8008e34:	460b      	mov	r3, r1
 8008e36:	cb03      	ldmia	r3!, {r0, r1}
 8008e38:	6010      	str	r0, [r2, #0]
 8008e3a:	6051      	str	r1, [r2, #4]
 8008e3c:	881b      	ldrh	r3, [r3, #0]
 8008e3e:	8113      	strh	r3, [r2, #8]
			strcpy(p->grade,"6C+");
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8008e46:	4a44      	ldr	r2, [pc, #272]	; (8008f58 <problem_fetch+0x78f4>)
 8008e48:	6810      	ldr	r0, [r2, #0]
 8008e4a:	6018      	str	r0, [r3, #0]
			p->moveSize = 5;
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	2205      	movs	r2, #5
 8008e50:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,G,G,D,I");
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	33a4      	adds	r3, #164	; 0xa4
 8008e56:	4941      	ldr	r1, [pc, #260]	; (8008f5c <problem_fetch+0x78f8>)
 8008e58:	461a      	mov	r2, r3
 8008e5a:	460b      	mov	r3, r1
 8008e5c:	cb03      	ldmia	r3!, {r0, r1}
 8008e5e:	6010      	str	r0, [r2, #0]
 8008e60:	6051      	str	r1, [r2, #4]
 8008e62:	881b      	ldrh	r3, [r3, #0]
 8008e64:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"4,9,14,11,18");
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	3304      	adds	r3, #4
 8008e6a:	4a3d      	ldr	r2, [pc, #244]	; (8008f60 <problem_fetch+0x78fc>)
 8008e6c:	461c      	mov	r4, r3
 8008e6e:	4613      	mov	r3, r2
 8008e70:	cb07      	ldmia	r3!, {r0, r1, r2}
 8008e72:	6020      	str	r0, [r4, #0]
 8008e74:	6061      	str	r1, [r4, #4]
 8008e76:	60a2      	str	r2, [r4, #8]
 8008e78:	781b      	ldrb	r3, [r3, #0]
 8008e7a:	7323      	strb	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,e");
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8008e82:	4930      	ldr	r1, [pc, #192]	; (8008f44 <problem_fetch+0x78e0>)
 8008e84:	461a      	mov	r2, r3
 8008e86:	460b      	mov	r3, r1
 8008e88:	cb03      	ldmia	r3!, {r0, r1}
 8008e8a:	6010      	str	r0, [r2, #0]
 8008e8c:	6051      	str	r1, [r2, #4]
 8008e8e:	881b      	ldrh	r3, [r3, #0]
 8008e90:	8113      	strh	r3, [r2, #8]
			break;
 8008e92:	f013 bb17 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 208 :
			strcpy(p->name,"BROKEN RECORD");
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8008e9c:	4a31      	ldr	r2, [pc, #196]	; (8008f64 <problem_fetch+0x7900>)
 8008e9e:	461c      	mov	r4, r3
 8008ea0:	4613      	mov	r3, r2
 8008ea2:	cb07      	ldmia	r3!, {r0, r1, r2}
 8008ea4:	6020      	str	r0, [r4, #0]
 8008ea6:	6061      	str	r1, [r4, #4]
 8008ea8:	60a2      	str	r2, [r4, #8]
 8008eaa:	881b      	ldrh	r3, [r3, #0]
 8008eac:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade,"6C");
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8008eb4:	4a2c      	ldr	r2, [pc, #176]	; (8008f68 <problem_fetch+0x7904>)
 8008eb6:	8811      	ldrh	r1, [r2, #0]
 8008eb8:	7892      	ldrb	r2, [r2, #2]
 8008eba:	8019      	strh	r1, [r3, #0]
 8008ebc:	709a      	strb	r2, [r3, #2]
			p->moveSize = 7;
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	2207      	movs	r2, #7
 8008ec2:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,H,C,E,A,D,A");
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	33a4      	adds	r3, #164	; 0xa4
 8008ec8:	4a28      	ldr	r2, [pc, #160]	; (8008f6c <problem_fetch+0x7908>)
 8008eca:	461c      	mov	r4, r3
 8008ecc:	4613      	mov	r3, r2
 8008ece:	cb07      	ldmia	r3!, {r0, r1, r2}
 8008ed0:	6020      	str	r0, [r4, #0]
 8008ed2:	6061      	str	r1, [r4, #4]
 8008ed4:	60a2      	str	r2, [r4, #8]
 8008ed6:	881b      	ldrh	r3, [r3, #0]
 8008ed8:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,8,8,12,14,15,18");
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	3304      	adds	r3, #4
 8008ede:	4a24      	ldr	r2, [pc, #144]	; (8008f70 <problem_fetch+0x790c>)
 8008ee0:	461d      	mov	r5, r3
 8008ee2:	4614      	mov	r4, r2
 8008ee4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008ee6:	6028      	str	r0, [r5, #0]
 8008ee8:	6069      	str	r1, [r5, #4]
 8008eea:	60aa      	str	r2, [r5, #8]
 8008eec:	60eb      	str	r3, [r5, #12]
 8008eee:	8823      	ldrh	r3, [r4, #0]
 8008ef0:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8008ef8:	4a1e      	ldr	r2, [pc, #120]	; (8008f74 <problem_fetch+0x7910>)
 8008efa:	461c      	mov	r4, r3
 8008efc:	4613      	mov	r3, r2
 8008efe:	cb07      	ldmia	r3!, {r0, r1, r2}
 8008f00:	6020      	str	r0, [r4, #0]
 8008f02:	6061      	str	r1, [r4, #4]
 8008f04:	60a2      	str	r2, [r4, #8]
 8008f06:	881b      	ldrh	r3, [r3, #0]
 8008f08:	81a3      	strh	r3, [r4, #12]
			break;
 8008f0a:	f013 badb 	b.w	801c4c4 <problem_fetch+0x1ae60>
 8008f0e:	bf00      	nop
 8008f10:	080263bc 	.word	0x080263bc
 8008f14:	08023cc4 	.word	0x08023cc4
 8008f18:	080263c4 	.word	0x080263c4
 8008f1c:	080263d4 	.word	0x080263d4
 8008f20:	080263e8 	.word	0x080263e8
 8008f24:	080263f8 	.word	0x080263f8
 8008f28:	08023b24 	.word	0x08023b24
 8008f2c:	0802640c 	.word	0x0802640c
 8008f30:	08026420 	.word	0x08026420
 8008f34:	080243cc 	.word	0x080243cc
 8008f38:	0802643c 	.word	0x0802643c
 8008f3c:	0802644c 	.word	0x0802644c
 8008f40:	08026458 	.word	0x08026458
 8008f44:	08023ff0 	.word	0x08023ff0
 8008f48:	08026468 	.word	0x08026468
 8008f4c:	0802647c 	.word	0x0802647c
 8008f50:	08026488 	.word	0x08026488
 8008f54:	08026498 	.word	0x08026498
 8008f58:	08023bbc 	.word	0x08023bbc
 8008f5c:	080264a4 	.word	0x080264a4
 8008f60:	080264b0 	.word	0x080264b0
 8008f64:	080264c0 	.word	0x080264c0
 8008f68:	08023bf0 	.word	0x08023bf0
 8008f6c:	080264d0 	.word	0x080264d0
 8008f70:	080264e0 	.word	0x080264e0
 8008f74:	08023cac 	.word	0x08023cac
		case 209 :
			strcpy(p->name,"BLACK 2");
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8008f7e:	49ab      	ldr	r1, [pc, #684]	; (800922c <problem_fetch+0x7bc8>)
 8008f80:	461a      	mov	r2, r3
 8008f82:	460b      	mov	r3, r1
 8008f84:	cb03      	ldmia	r3!, {r0, r1}
 8008f86:	6010      	str	r0, [r2, #0]
 8008f88:	6051      	str	r1, [r2, #4]
			strcpy(p->grade,"6C+");
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8008f90:	4aa7      	ldr	r2, [pc, #668]	; (8009230 <problem_fetch+0x7bcc>)
 8008f92:	6810      	ldr	r0, [r2, #0]
 8008f94:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	2207      	movs	r2, #7
 8008f9a:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,D,G,H,E,G,D");
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	33a4      	adds	r3, #164	; 0xa4
 8008fa0:	4aa4      	ldr	r2, [pc, #656]	; (8009234 <problem_fetch+0x7bd0>)
 8008fa2:	461c      	mov	r4, r3
 8008fa4:	4613      	mov	r3, r2
 8008fa6:	cb07      	ldmia	r3!, {r0, r1, r2}
 8008fa8:	6020      	str	r0, [r4, #0]
 8008faa:	6061      	str	r1, [r4, #4]
 8008fac:	60a2      	str	r2, [r4, #8]
 8008fae:	881b      	ldrh	r3, [r3, #0]
 8008fb0:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,7,10,13,14,17,18");
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	3304      	adds	r3, #4
 8008fb6:	4aa0      	ldr	r2, [pc, #640]	; (8009238 <problem_fetch+0x7bd4>)
 8008fb8:	461d      	mov	r5, r3
 8008fba:	4614      	mov	r4, r2
 8008fbc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008fbe:	6028      	str	r0, [r5, #0]
 8008fc0:	6069      	str	r1, [r5, #4]
 8008fc2:	60aa      	str	r2, [r5, #8]
 8008fc4:	60eb      	str	r3, [r5, #12]
 8008fc6:	8823      	ldrh	r3, [r4, #0]
 8008fc8:	78a2      	ldrb	r2, [r4, #2]
 8008fca:	822b      	strh	r3, [r5, #16]
 8008fcc:	4613      	mov	r3, r2
 8008fce:	74ab      	strb	r3, [r5, #18]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8008fd6:	4a99      	ldr	r2, [pc, #612]	; (800923c <problem_fetch+0x7bd8>)
 8008fd8:	461c      	mov	r4, r3
 8008fda:	4613      	mov	r3, r2
 8008fdc:	cb07      	ldmia	r3!, {r0, r1, r2}
 8008fde:	6020      	str	r0, [r4, #0]
 8008fe0:	6061      	str	r1, [r4, #4]
 8008fe2:	60a2      	str	r2, [r4, #8]
 8008fe4:	881b      	ldrh	r3, [r3, #0]
 8008fe6:	81a3      	strh	r3, [r4, #12]
			break;
 8008fe8:	f013 ba6c 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 210 :
			strcpy(p->name,"ROLLING PEAS");
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8008ff2:	4a93      	ldr	r2, [pc, #588]	; (8009240 <problem_fetch+0x7bdc>)
 8008ff4:	461c      	mov	r4, r3
 8008ff6:	4613      	mov	r3, r2
 8008ff8:	cb07      	ldmia	r3!, {r0, r1, r2}
 8008ffa:	6020      	str	r0, [r4, #0]
 8008ffc:	6061      	str	r1, [r4, #4]
 8008ffe:	60a2      	str	r2, [r4, #8]
 8009000:	781b      	ldrb	r3, [r3, #0]
 8009002:	7323      	strb	r3, [r4, #12]
			strcpy(p->grade,"6C");
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800900a:	4a8e      	ldr	r2, [pc, #568]	; (8009244 <problem_fetch+0x7be0>)
 800900c:	8811      	ldrh	r1, [r2, #0]
 800900e:	7892      	ldrb	r2, [r2, #2]
 8009010:	8019      	strh	r1, [r3, #0]
 8009012:	709a      	strb	r2, [r3, #2]
			p->moveSize = 6;
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	2206      	movs	r2, #6
 8009018:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,E,H,C,D,D");
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	33a4      	adds	r3, #164	; 0xa4
 800901e:	4a8a      	ldr	r2, [pc, #552]	; (8009248 <problem_fetch+0x7be4>)
 8009020:	461c      	mov	r4, r3
 8009022:	4613      	mov	r3, r2
 8009024:	cb07      	ldmia	r3!, {r0, r1, r2}
 8009026:	6020      	str	r0, [r4, #0]
 8009028:	6061      	str	r1, [r4, #4]
 800902a:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,6,10,13,15,18");
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	3304      	adds	r3, #4
 8009030:	4a86      	ldr	r2, [pc, #536]	; (800924c <problem_fetch+0x7be8>)
 8009032:	461c      	mov	r4, r3
 8009034:	4615      	mov	r5, r2
 8009036:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009038:	6020      	str	r0, [r4, #0]
 800903a:	6061      	str	r1, [r4, #4]
 800903c:	60a2      	str	r2, [r4, #8]
 800903e:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,s,d,d,d,e");
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8009046:	4a82      	ldr	r2, [pc, #520]	; (8009250 <problem_fetch+0x7bec>)
 8009048:	461c      	mov	r4, r3
 800904a:	4613      	mov	r3, r2
 800904c:	cb07      	ldmia	r3!, {r0, r1, r2}
 800904e:	6020      	str	r0, [r4, #0]
 8009050:	6061      	str	r1, [r4, #4]
 8009052:	60a2      	str	r2, [r4, #8]
			break;
 8009054:	f013 ba36 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 211 :
			strcpy(p->name,"SQUASHED PEAS");
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800905e:	4a7d      	ldr	r2, [pc, #500]	; (8009254 <problem_fetch+0x7bf0>)
 8009060:	461c      	mov	r4, r3
 8009062:	4613      	mov	r3, r2
 8009064:	cb07      	ldmia	r3!, {r0, r1, r2}
 8009066:	6020      	str	r0, [r4, #0]
 8009068:	6061      	str	r1, [r4, #4]
 800906a:	60a2      	str	r2, [r4, #8]
 800906c:	881b      	ldrh	r3, [r3, #0]
 800906e:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade,"6C+");
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8009076:	4a6e      	ldr	r2, [pc, #440]	; (8009230 <problem_fetch+0x7bcc>)
 8009078:	6810      	ldr	r0, [r2, #0]
 800907a:	6018      	str	r0, [r3, #0]
			p->moveSize = 8;
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	2208      	movs	r2, #8
 8009080:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,G,I,H,I,E,G,D");
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	33a4      	adds	r3, #164	; 0xa4
 8009086:	4a74      	ldr	r2, [pc, #464]	; (8009258 <problem_fetch+0x7bf4>)
 8009088:	461c      	mov	r4, r3
 800908a:	4615      	mov	r5, r2
 800908c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800908e:	6020      	str	r0, [r4, #0]
 8009090:	6061      	str	r1, [r4, #4]
 8009092:	60a2      	str	r2, [r4, #8]
 8009094:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,6,10,12,14,14,17,18");
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	3304      	adds	r3, #4
 800909a:	4a70      	ldr	r2, [pc, #448]	; (800925c <problem_fetch+0x7bf8>)
 800909c:	461d      	mov	r5, r3
 800909e:	4614      	mov	r4, r2
 80090a0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80090a2:	6028      	str	r0, [r5, #0]
 80090a4:	6069      	str	r1, [r5, #4]
 80090a6:	60aa      	str	r2, [r5, #8]
 80090a8:	60eb      	str	r3, [r5, #12]
 80090aa:	6820      	ldr	r0, [r4, #0]
 80090ac:	6128      	str	r0, [r5, #16]
 80090ae:	88a3      	ldrh	r3, [r4, #4]
 80090b0:	82ab      	strh	r3, [r5, #20]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,e");
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 80090b8:	4a69      	ldr	r2, [pc, #420]	; (8009260 <problem_fetch+0x7bfc>)
 80090ba:	461c      	mov	r4, r3
 80090bc:	4615      	mov	r5, r2
 80090be:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80090c0:	6020      	str	r0, [r4, #0]
 80090c2:	6061      	str	r1, [r4, #4]
 80090c4:	60a2      	str	r2, [r4, #8]
 80090c6:	60e3      	str	r3, [r4, #12]
			break;
 80090c8:	f013 b9fc 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 212 :
			strcpy(p->name,"LAST PEA");
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80090d2:	4964      	ldr	r1, [pc, #400]	; (8009264 <problem_fetch+0x7c00>)
 80090d4:	461a      	mov	r2, r3
 80090d6:	460b      	mov	r3, r1
 80090d8:	cb03      	ldmia	r3!, {r0, r1}
 80090da:	6010      	str	r0, [r2, #0]
 80090dc:	6051      	str	r1, [r2, #4]
 80090de:	781b      	ldrb	r3, [r3, #0]
 80090e0:	7213      	strb	r3, [r2, #8]
			strcpy(p->grade,"7A");
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80090e8:	4a5f      	ldr	r2, [pc, #380]	; (8009268 <problem_fetch+0x7c04>)
 80090ea:	8811      	ldrh	r1, [r2, #0]
 80090ec:	7892      	ldrb	r2, [r2, #2]
 80090ee:	8019      	strh	r1, [r3, #0]
 80090f0:	709a      	strb	r2, [r3, #2]
			p->moveSize = 9;
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	2209      	movs	r2, #9
 80090f6:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,B,E,B,E,D,I,E,I");
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	33a4      	adds	r3, #164	; 0xa4
 80090fc:	4a5b      	ldr	r2, [pc, #364]	; (800926c <problem_fetch+0x7c08>)
 80090fe:	461d      	mov	r5, r3
 8009100:	4614      	mov	r4, r2
 8009102:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009104:	6028      	str	r0, [r5, #0]
 8009106:	6069      	str	r1, [r5, #4]
 8009108:	60aa      	str	r2, [r5, #8]
 800910a:	60eb      	str	r3, [r5, #12]
 800910c:	8823      	ldrh	r3, [r4, #0]
 800910e:	822b      	strh	r3, [r5, #16]
			strcpy(p->moveNumbers,"4,6,8,10,12,11,14,16,18");
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	3304      	adds	r3, #4
 8009114:	4a56      	ldr	r2, [pc, #344]	; (8009270 <problem_fetch+0x7c0c>)
 8009116:	461d      	mov	r5, r3
 8009118:	4614      	mov	r4, r2
 800911a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800911c:	6028      	str	r0, [r5, #0]
 800911e:	6069      	str	r1, [r5, #4]
 8009120:	60aa      	str	r2, [r5, #8]
 8009122:	60eb      	str	r3, [r5, #12]
 8009124:	cc03      	ldmia	r4!, {r0, r1}
 8009126:	6128      	str	r0, [r5, #16]
 8009128:	6169      	str	r1, [r5, #20]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,d,e");
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8009130:	4a50      	ldr	r2, [pc, #320]	; (8009274 <problem_fetch+0x7c10>)
 8009132:	461d      	mov	r5, r3
 8009134:	4614      	mov	r4, r2
 8009136:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009138:	6028      	str	r0, [r5, #0]
 800913a:	6069      	str	r1, [r5, #4]
 800913c:	60aa      	str	r2, [r5, #8]
 800913e:	60eb      	str	r3, [r5, #12]
 8009140:	8823      	ldrh	r3, [r4, #0]
 8009142:	822b      	strh	r3, [r5, #16]
			break;
 8009144:	f013 b9be 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 213 :
			strcpy(p->name,"DIAGO");
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800914e:	4a4a      	ldr	r2, [pc, #296]	; (8009278 <problem_fetch+0x7c14>)
 8009150:	6810      	ldr	r0, [r2, #0]
 8009152:	6018      	str	r0, [r3, #0]
 8009154:	8892      	ldrh	r2, [r2, #4]
 8009156:	809a      	strh	r2, [r3, #4]
			strcpy(p->grade,"7B+");
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800915e:	4a47      	ldr	r2, [pc, #284]	; (800927c <problem_fetch+0x7c18>)
 8009160:	6810      	ldr	r0, [r2, #0]
 8009162:	6018      	str	r0, [r3, #0]
			p->moveSize = 8;
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	2208      	movs	r2, #8
 8009168:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,G,G,H,E,F,D,A");
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	33a4      	adds	r3, #164	; 0xa4
 800916e:	4a44      	ldr	r2, [pc, #272]	; (8009280 <problem_fetch+0x7c1c>)
 8009170:	461c      	mov	r4, r3
 8009172:	4615      	mov	r5, r2
 8009174:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009176:	6020      	str	r0, [r4, #0]
 8009178:	6061      	str	r1, [r4, #4]
 800917a:	60a2      	str	r2, [r4, #8]
 800917c:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,4,9,8,12,11,15,18");
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	3304      	adds	r3, #4
 8009182:	4a40      	ldr	r2, [pc, #256]	; (8009284 <problem_fetch+0x7c20>)
 8009184:	461d      	mov	r5, r3
 8009186:	4614      	mov	r4, r2
 8009188:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800918a:	6028      	str	r0, [r5, #0]
 800918c:	6069      	str	r1, [r5, #4]
 800918e:	60aa      	str	r2, [r5, #8]
 8009190:	60eb      	str	r3, [r5, #12]
 8009192:	6820      	ldr	r0, [r4, #0]
 8009194:	6128      	str	r0, [r5, #16]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,e");
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800919c:	4a30      	ldr	r2, [pc, #192]	; (8009260 <problem_fetch+0x7bfc>)
 800919e:	461c      	mov	r4, r3
 80091a0:	4615      	mov	r5, r2
 80091a2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80091a4:	6020      	str	r0, [r4, #0]
 80091a6:	6061      	str	r1, [r4, #4]
 80091a8:	60a2      	str	r2, [r4, #8]
 80091aa:	60e3      	str	r3, [r4, #12]
			break;
 80091ac:	f013 b98a 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 214 :
			strcpy(p->name,"IV");
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80091b6:	4a34      	ldr	r2, [pc, #208]	; (8009288 <problem_fetch+0x7c24>)
 80091b8:	8811      	ldrh	r1, [r2, #0]
 80091ba:	7892      	ldrb	r2, [r2, #2]
 80091bc:	8019      	strh	r1, [r3, #0]
 80091be:	709a      	strb	r2, [r3, #2]
			strcpy(p->grade,"6B+");
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80091c6:	4a31      	ldr	r2, [pc, #196]	; (800928c <problem_fetch+0x7c28>)
 80091c8:	6810      	ldr	r0, [r2, #0]
 80091ca:	6018      	str	r0, [r3, #0]
			p->moveSize = 12;
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	220c      	movs	r2, #12
 80091d0:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"H,C,E,E,A,A,B,A,D,C,J,C");
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	33a4      	adds	r3, #164	; 0xa4
 80091d6:	4a2e      	ldr	r2, [pc, #184]	; (8009290 <problem_fetch+0x7c2c>)
 80091d8:	461d      	mov	r5, r3
 80091da:	4614      	mov	r4, r2
 80091dc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80091de:	6028      	str	r0, [r5, #0]
 80091e0:	6069      	str	r1, [r5, #4]
 80091e2:	60aa      	str	r2, [r5, #8]
 80091e4:	60eb      	str	r3, [r5, #12]
 80091e6:	cc03      	ldmia	r4!, {r0, r1}
 80091e8:	6128      	str	r0, [r5, #16]
 80091ea:	6169      	str	r1, [r5, #20]
			strcpy(p->moveNumbers,"8,8,6,9,9,14,15,18,11,13,5,5");
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	3304      	adds	r3, #4
 80091f0:	4a28      	ldr	r2, [pc, #160]	; (8009294 <problem_fetch+0x7c30>)
 80091f2:	461d      	mov	r5, r3
 80091f4:	4614      	mov	r4, r2
 80091f6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80091f8:	6028      	str	r0, [r5, #0]
 80091fa:	6069      	str	r1, [r5, #4]
 80091fc:	60aa      	str	r2, [r5, #8]
 80091fe:	60eb      	str	r3, [r5, #12]
 8009200:	cc07      	ldmia	r4!, {r0, r1, r2}
 8009202:	6128      	str	r0, [r5, #16]
 8009204:	6169      	str	r1, [r5, #20]
 8009206:	61aa      	str	r2, [r5, #24]
 8009208:	7823      	ldrb	r3, [r4, #0]
 800920a:	772b      	strb	r3, [r5, #28]
			strcpy(p->startFinish,"d,d,s,d,d,d,d,e,d,d,s,d");
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8009212:	4a21      	ldr	r2, [pc, #132]	; (8009298 <problem_fetch+0x7c34>)
 8009214:	461d      	mov	r5, r3
 8009216:	4614      	mov	r4, r2
 8009218:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800921a:	6028      	str	r0, [r5, #0]
 800921c:	6069      	str	r1, [r5, #4]
 800921e:	60aa      	str	r2, [r5, #8]
 8009220:	60eb      	str	r3, [r5, #12]
 8009222:	cc03      	ldmia	r4!, {r0, r1}
 8009224:	6128      	str	r0, [r5, #16]
 8009226:	6169      	str	r1, [r5, #20]
			break;
 8009228:	f013 b94c 	b.w	801c4c4 <problem_fetch+0x1ae60>
 800922c:	080264f4 	.word	0x080264f4
 8009230:	08023bbc 	.word	0x08023bbc
 8009234:	080264fc 	.word	0x080264fc
 8009238:	0802650c 	.word	0x0802650c
 800923c:	08023cac 	.word	0x08023cac
 8009240:	08026520 	.word	0x08026520
 8009244:	08023bf0 	.word	0x08023bf0
 8009248:	08026530 	.word	0x08026530
 800924c:	0802653c 	.word	0x0802653c
 8009250:	08023b04 	.word	0x08023b04
 8009254:	0802654c 	.word	0x0802654c
 8009258:	0802655c 	.word	0x0802655c
 800925c:	0802656c 	.word	0x0802656c
 8009260:	08023c48 	.word	0x08023c48
 8009264:	08026584 	.word	0x08026584
 8009268:	08023ae4 	.word	0x08023ae4
 800926c:	08026590 	.word	0x08026590
 8009270:	080265a4 	.word	0x080265a4
 8009274:	08024b08 	.word	0x08024b08
 8009278:	080265bc 	.word	0x080265bc
 800927c:	08023c60 	.word	0x08023c60
 8009280:	080265c4 	.word	0x080265c4
 8009284:	080265d4 	.word	0x080265d4
 8009288:	080265e8 	.word	0x080265e8
 800928c:	08023b24 	.word	0x08023b24
 8009290:	080265ec 	.word	0x080265ec
 8009294:	08026604 	.word	0x08026604
 8009298:	08026624 	.word	0x08026624
		case 215 :
			strcpy(p->name,"III");
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80092a2:	4aba      	ldr	r2, [pc, #744]	; (800958c <problem_fetch+0x7f28>)
 80092a4:	6810      	ldr	r0, [r2, #0]
 80092a6:	6018      	str	r0, [r3, #0]
			strcpy(p->grade,"6B+");
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80092ae:	4ab8      	ldr	r2, [pc, #736]	; (8009590 <problem_fetch+0x7f2c>)
 80092b0:	6810      	ldr	r0, [r2, #0]
 80092b2:	6018      	str	r0, [r3, #0]
			p->moveSize = 14;
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	220e      	movs	r2, #14
 80092b8:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,E,D,G,E,C,B,C,H,H,H,K,J,J");
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	33a4      	adds	r3, #164	; 0xa4
 80092be:	4ab5      	ldr	r2, [pc, #724]	; (8009594 <problem_fetch+0x7f30>)
 80092c0:	461d      	mov	r5, r3
 80092c2:	4614      	mov	r4, r2
 80092c4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80092c6:	6028      	str	r0, [r5, #0]
 80092c8:	6069      	str	r1, [r5, #4]
 80092ca:	60aa      	str	r2, [r5, #8]
 80092cc:	60eb      	str	r3, [r5, #12]
 80092ce:	cc07      	ldmia	r4!, {r0, r1, r2}
 80092d0:	6128      	str	r0, [r5, #16]
 80092d2:	6169      	str	r1, [r5, #20]
 80092d4:	61aa      	str	r2, [r5, #24]
			strcpy(p->moveNumbers,"16,16,18,9,8,8,6,5,10,16,12,14,12,7");
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	3304      	adds	r3, #4
 80092da:	4aaf      	ldr	r2, [pc, #700]	; (8009598 <problem_fetch+0x7f34>)
 80092dc:	4614      	mov	r4, r2
 80092de:	469c      	mov	ip, r3
 80092e0:	f104 0e20 	add.w	lr, r4, #32
 80092e4:	4665      	mov	r5, ip
 80092e6:	4626      	mov	r6, r4
 80092e8:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80092ea:	6028      	str	r0, [r5, #0]
 80092ec:	6069      	str	r1, [r5, #4]
 80092ee:	60aa      	str	r2, [r5, #8]
 80092f0:	60eb      	str	r3, [r5, #12]
 80092f2:	3410      	adds	r4, #16
 80092f4:	f10c 0c10 	add.w	ip, ip, #16
 80092f8:	4574      	cmp	r4, lr
 80092fa:	d1f3      	bne.n	80092e4 <problem_fetch+0x7c80>
 80092fc:	4663      	mov	r3, ip
 80092fe:	4622      	mov	r2, r4
 8009300:	6810      	ldr	r0, [r2, #0]
 8009302:	6018      	str	r0, [r3, #0]
			strcpy(p->startFinish,"d,d,e,d,d,d,s,s,d,d,d,d,d,d");
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800930a:	4aa4      	ldr	r2, [pc, #656]	; (800959c <problem_fetch+0x7f38>)
 800930c:	461d      	mov	r5, r3
 800930e:	4614      	mov	r4, r2
 8009310:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009312:	6028      	str	r0, [r5, #0]
 8009314:	6069      	str	r1, [r5, #4]
 8009316:	60aa      	str	r2, [r5, #8]
 8009318:	60eb      	str	r3, [r5, #12]
 800931a:	cc07      	ldmia	r4!, {r0, r1, r2}
 800931c:	6128      	str	r0, [r5, #16]
 800931e:	6169      	str	r1, [r5, #20]
 8009320:	61aa      	str	r2, [r5, #24]
			break;
 8009322:	f013 b8cf 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 216 :
			strcpy(p->name,"I");
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800932c:	499c      	ldr	r1, [pc, #624]	; (80095a0 <problem_fetch+0x7f3c>)
 800932e:	461a      	mov	r2, r3
 8009330:	460b      	mov	r3, r1
 8009332:	881b      	ldrh	r3, [r3, #0]
 8009334:	8013      	strh	r3, [r2, #0]
			strcpy(p->grade,"6B+");
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800933c:	4a94      	ldr	r2, [pc, #592]	; (8009590 <problem_fetch+0x7f2c>)
 800933e:	6810      	ldr	r0, [r2, #0]
 8009340:	6018      	str	r0, [r3, #0]
			p->moveSize = 14;
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	220e      	movs	r2, #14
 8009346:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,E,H,J,G,G,J,J,I,I,E,H,E,D");
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	33a4      	adds	r3, #164	; 0xa4
 800934c:	4a95      	ldr	r2, [pc, #596]	; (80095a4 <problem_fetch+0x7f40>)
 800934e:	461d      	mov	r5, r3
 8009350:	4614      	mov	r4, r2
 8009352:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009354:	6028      	str	r0, [r5, #0]
 8009356:	6069      	str	r1, [r5, #4]
 8009358:	60aa      	str	r2, [r5, #8]
 800935a:	60eb      	str	r3, [r5, #12]
 800935c:	cc07      	ldmia	r4!, {r0, r1, r2}
 800935e:	6128      	str	r0, [r5, #16]
 8009360:	6169      	str	r1, [r5, #20]
 8009362:	61aa      	str	r2, [r5, #24]
			strcpy(p->moveNumbers,"14,14,12,12,4,9,7,5,7,9,8,5,16,18");
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	3304      	adds	r3, #4
 8009368:	4a8f      	ldr	r2, [pc, #572]	; (80095a8 <problem_fetch+0x7f44>)
 800936a:	4614      	mov	r4, r2
 800936c:	469c      	mov	ip, r3
 800936e:	f104 0e20 	add.w	lr, r4, #32
 8009372:	4665      	mov	r5, ip
 8009374:	4626      	mov	r6, r4
 8009376:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8009378:	6028      	str	r0, [r5, #0]
 800937a:	6069      	str	r1, [r5, #4]
 800937c:	60aa      	str	r2, [r5, #8]
 800937e:	60eb      	str	r3, [r5, #12]
 8009380:	3410      	adds	r4, #16
 8009382:	f10c 0c10 	add.w	ip, ip, #16
 8009386:	4574      	cmp	r4, lr
 8009388:	d1f3      	bne.n	8009372 <problem_fetch+0x7d0e>
 800938a:	4662      	mov	r2, ip
 800938c:	4623      	mov	r3, r4
 800938e:	881b      	ldrh	r3, [r3, #0]
 8009390:	8013      	strh	r3, [r2, #0]
			strcpy(p->startFinish,"d,d,d,d,s,d,d,d,d,d,d,d,d,e");
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8009398:	4a84      	ldr	r2, [pc, #528]	; (80095ac <problem_fetch+0x7f48>)
 800939a:	461d      	mov	r5, r3
 800939c:	4614      	mov	r4, r2
 800939e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80093a0:	6028      	str	r0, [r5, #0]
 80093a2:	6069      	str	r1, [r5, #4]
 80093a4:	60aa      	str	r2, [r5, #8]
 80093a6:	60eb      	str	r3, [r5, #12]
 80093a8:	cc07      	ldmia	r4!, {r0, r1, r2}
 80093aa:	6128      	str	r0, [r5, #16]
 80093ac:	6169      	str	r1, [r5, #20]
 80093ae:	61aa      	str	r2, [r5, #24]
			break;
 80093b0:	f013 b888 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 217 :
			strcpy(p->name,"NEW");
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80093ba:	4a7d      	ldr	r2, [pc, #500]	; (80095b0 <problem_fetch+0x7f4c>)
 80093bc:	6810      	ldr	r0, [r2, #0]
 80093be:	6018      	str	r0, [r3, #0]
			strcpy(p->grade,"6B+");
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80093c6:	4a72      	ldr	r2, [pc, #456]	; (8009590 <problem_fetch+0x7f2c>)
 80093c8:	6810      	ldr	r0, [r2, #0]
 80093ca:	6018      	str	r0, [r3, #0]
			p->moveSize = 14;
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	220e      	movs	r2, #14
 80093d0:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,H,G,I,H,G,H,I,H,H,I,I,I,J");
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	33a4      	adds	r3, #164	; 0xa4
 80093d6:	4a77      	ldr	r2, [pc, #476]	; (80095b4 <problem_fetch+0x7f50>)
 80093d8:	461d      	mov	r5, r3
 80093da:	4614      	mov	r4, r2
 80093dc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80093de:	6028      	str	r0, [r5, #0]
 80093e0:	6069      	str	r1, [r5, #4]
 80093e2:	60aa      	str	r2, [r5, #8]
 80093e4:	60eb      	str	r3, [r5, #12]
 80093e6:	cc07      	ldmia	r4!, {r0, r1, r2}
 80093e8:	6128      	str	r0, [r5, #16]
 80093ea:	6169      	str	r1, [r5, #20]
 80093ec:	61aa      	str	r2, [r5, #24]
			strcpy(p->moveNumbers,"4,5,6,7,8,9,10,10,12,13,14,15,18,16");
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	3304      	adds	r3, #4
 80093f2:	4a71      	ldr	r2, [pc, #452]	; (80095b8 <problem_fetch+0x7f54>)
 80093f4:	4614      	mov	r4, r2
 80093f6:	469c      	mov	ip, r3
 80093f8:	f104 0e20 	add.w	lr, r4, #32
 80093fc:	4665      	mov	r5, ip
 80093fe:	4626      	mov	r6, r4
 8009400:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8009402:	6028      	str	r0, [r5, #0]
 8009404:	6069      	str	r1, [r5, #4]
 8009406:	60aa      	str	r2, [r5, #8]
 8009408:	60eb      	str	r3, [r5, #12]
 800940a:	3410      	adds	r4, #16
 800940c:	f10c 0c10 	add.w	ip, ip, #16
 8009410:	4574      	cmp	r4, lr
 8009412:	d1f3      	bne.n	80093fc <problem_fetch+0x7d98>
 8009414:	4663      	mov	r3, ip
 8009416:	4622      	mov	r2, r4
 8009418:	6810      	ldr	r0, [r2, #0]
 800941a:	6018      	str	r0, [r3, #0]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,d,d,d,d,d,e,d");
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8009422:	4a66      	ldr	r2, [pc, #408]	; (80095bc <problem_fetch+0x7f58>)
 8009424:	461d      	mov	r5, r3
 8009426:	4614      	mov	r4, r2
 8009428:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800942a:	6028      	str	r0, [r5, #0]
 800942c:	6069      	str	r1, [r5, #4]
 800942e:	60aa      	str	r2, [r5, #8]
 8009430:	60eb      	str	r3, [r5, #12]
 8009432:	cc07      	ldmia	r4!, {r0, r1, r2}
 8009434:	6128      	str	r0, [r5, #16]
 8009436:	6169      	str	r1, [r5, #20]
 8009438:	61aa      	str	r2, [r5, #24]
			break;
 800943a:	f013 b843 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 218 :
			strcpy(p->name,"THE BLACK");
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8009444:	495e      	ldr	r1, [pc, #376]	; (80095c0 <problem_fetch+0x7f5c>)
 8009446:	461a      	mov	r2, r3
 8009448:	460b      	mov	r3, r1
 800944a:	cb03      	ldmia	r3!, {r0, r1}
 800944c:	6010      	str	r0, [r2, #0]
 800944e:	6051      	str	r1, [r2, #4]
 8009450:	881b      	ldrh	r3, [r3, #0]
 8009452:	8113      	strh	r3, [r2, #8]
			strcpy(p->grade,"7A+");
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800945a:	4a5a      	ldr	r2, [pc, #360]	; (80095c4 <problem_fetch+0x7f60>)
 800945c:	6810      	ldr	r0, [r2, #0]
 800945e:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	2207      	movs	r2, #7
 8009464:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,D,B,C,H,K,I");
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	33a4      	adds	r3, #164	; 0xa4
 800946a:	4a57      	ldr	r2, [pc, #348]	; (80095c8 <problem_fetch+0x7f64>)
 800946c:	461c      	mov	r4, r3
 800946e:	4613      	mov	r3, r2
 8009470:	cb07      	ldmia	r3!, {r0, r1, r2}
 8009472:	6020      	str	r0, [r4, #0]
 8009474:	6061      	str	r1, [r4, #4]
 8009476:	60a2      	str	r2, [r4, #8]
 8009478:	881b      	ldrh	r3, [r3, #0]
 800947a:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,7,10,13,13,16,18");
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	3304      	adds	r3, #4
 8009480:	4a52      	ldr	r2, [pc, #328]	; (80095cc <problem_fetch+0x7f68>)
 8009482:	461d      	mov	r5, r3
 8009484:	4614      	mov	r4, r2
 8009486:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009488:	6028      	str	r0, [r5, #0]
 800948a:	6069      	str	r1, [r5, #4]
 800948c:	60aa      	str	r2, [r5, #8]
 800948e:	60eb      	str	r3, [r5, #12]
 8009490:	8823      	ldrh	r3, [r4, #0]
 8009492:	78a2      	ldrb	r2, [r4, #2]
 8009494:	822b      	strh	r3, [r5, #16]
 8009496:	4613      	mov	r3, r2
 8009498:	74ab      	strb	r3, [r5, #18]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 80094a0:	4a4b      	ldr	r2, [pc, #300]	; (80095d0 <problem_fetch+0x7f6c>)
 80094a2:	461c      	mov	r4, r3
 80094a4:	4613      	mov	r3, r2
 80094a6:	cb07      	ldmia	r3!, {r0, r1, r2}
 80094a8:	6020      	str	r0, [r4, #0]
 80094aa:	6061      	str	r1, [r4, #4]
 80094ac:	60a2      	str	r2, [r4, #8]
 80094ae:	881b      	ldrh	r3, [r3, #0]
 80094b0:	81a3      	strh	r3, [r4, #12]
			break;
 80094b2:	f013 b807 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 219 :
			strcpy(p->name,"KLIK IT");
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80094bc:	4945      	ldr	r1, [pc, #276]	; (80095d4 <problem_fetch+0x7f70>)
 80094be:	461a      	mov	r2, r3
 80094c0:	460b      	mov	r3, r1
 80094c2:	cb03      	ldmia	r3!, {r0, r1}
 80094c4:	6010      	str	r0, [r2, #0]
 80094c6:	6051      	str	r1, [r2, #4]
			strcpy(p->grade,"7C");
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80094ce:	4a42      	ldr	r2, [pc, #264]	; (80095d8 <problem_fetch+0x7f74>)
 80094d0:	8811      	ldrh	r1, [r2, #0]
 80094d2:	7892      	ldrb	r2, [r2, #2]
 80094d4:	8019      	strh	r1, [r3, #0]
 80094d6:	709a      	strb	r2, [r3, #2]
			p->moveSize = 5;
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	2205      	movs	r2, #5
 80094dc:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,C,F,A,D");
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	33a4      	adds	r3, #164	; 0xa4
 80094e2:	493e      	ldr	r1, [pc, #248]	; (80095dc <problem_fetch+0x7f78>)
 80094e4:	461a      	mov	r2, r3
 80094e6:	460b      	mov	r3, r1
 80094e8:	cb03      	ldmia	r3!, {r0, r1}
 80094ea:	6010      	str	r0, [r2, #0]
 80094ec:	6051      	str	r1, [r2, #4]
 80094ee:	881b      	ldrh	r3, [r3, #0]
 80094f0:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"4,8,11,14,18");
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	3304      	adds	r3, #4
 80094f6:	4a3a      	ldr	r2, [pc, #232]	; (80095e0 <problem_fetch+0x7f7c>)
 80094f8:	461c      	mov	r4, r3
 80094fa:	4613      	mov	r3, r2
 80094fc:	cb07      	ldmia	r3!, {r0, r1, r2}
 80094fe:	6020      	str	r0, [r4, #0]
 8009500:	6061      	str	r1, [r4, #4]
 8009502:	60a2      	str	r2, [r4, #8]
 8009504:	781b      	ldrb	r3, [r3, #0]
 8009506:	7323      	strb	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,e");
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800950e:	4935      	ldr	r1, [pc, #212]	; (80095e4 <problem_fetch+0x7f80>)
 8009510:	461a      	mov	r2, r3
 8009512:	460b      	mov	r3, r1
 8009514:	cb03      	ldmia	r3!, {r0, r1}
 8009516:	6010      	str	r0, [r2, #0]
 8009518:	6051      	str	r1, [r2, #4]
 800951a:	881b      	ldrh	r3, [r3, #0]
 800951c:	8113      	strh	r3, [r2, #8]
			break;
 800951e:	f012 bfd1 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 220 :
			strcpy(p->name,"SOFA 3");
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8009528:	4a2f      	ldr	r2, [pc, #188]	; (80095e8 <problem_fetch+0x7f84>)
 800952a:	6810      	ldr	r0, [r2, #0]
 800952c:	6018      	str	r0, [r3, #0]
 800952e:	8891      	ldrh	r1, [r2, #4]
 8009530:	7992      	ldrb	r2, [r2, #6]
 8009532:	8099      	strh	r1, [r3, #4]
 8009534:	719a      	strb	r2, [r3, #6]
			strcpy(p->grade,"7B+");
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800953c:	4a2b      	ldr	r2, [pc, #172]	; (80095ec <problem_fetch+0x7f88>)
 800953e:	6810      	ldr	r0, [r2, #0]
 8009540:	6018      	str	r0, [r3, #0]
			p->moveSize = 5;
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	2205      	movs	r2, #5
 8009546:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"B,G,H,J,I");
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	33a4      	adds	r3, #164	; 0xa4
 800954c:	4928      	ldr	r1, [pc, #160]	; (80095f0 <problem_fetch+0x7f8c>)
 800954e:	461a      	mov	r2, r3
 8009550:	460b      	mov	r3, r1
 8009552:	cb03      	ldmia	r3!, {r0, r1}
 8009554:	6010      	str	r0, [r2, #0]
 8009556:	6051      	str	r1, [r2, #4]
 8009558:	881b      	ldrh	r3, [r3, #0]
 800955a:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"6,9,12,13,18");
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	3304      	adds	r3, #4
 8009560:	4a24      	ldr	r2, [pc, #144]	; (80095f4 <problem_fetch+0x7f90>)
 8009562:	461c      	mov	r4, r3
 8009564:	4613      	mov	r3, r2
 8009566:	cb07      	ldmia	r3!, {r0, r1, r2}
 8009568:	6020      	str	r0, [r4, #0]
 800956a:	6061      	str	r1, [r4, #4]
 800956c:	60a2      	str	r2, [r4, #8]
 800956e:	781b      	ldrb	r3, [r3, #0]
 8009570:	7323      	strb	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,e");
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8009578:	491a      	ldr	r1, [pc, #104]	; (80095e4 <problem_fetch+0x7f80>)
 800957a:	461a      	mov	r2, r3
 800957c:	460b      	mov	r3, r1
 800957e:	cb03      	ldmia	r3!, {r0, r1}
 8009580:	6010      	str	r0, [r2, #0]
 8009582:	6051      	str	r1, [r2, #4]
 8009584:	881b      	ldrh	r3, [r3, #0]
 8009586:	8113      	strh	r3, [r2, #8]
			break;
 8009588:	f012 bf9c 	b.w	801c4c4 <problem_fetch+0x1ae60>
 800958c:	0802663c 	.word	0x0802663c
 8009590:	08023b24 	.word	0x08023b24
 8009594:	08026640 	.word	0x08026640
 8009598:	0802665c 	.word	0x0802665c
 800959c:	08026680 	.word	0x08026680
 80095a0:	0802669c 	.word	0x0802669c
 80095a4:	080266a0 	.word	0x080266a0
 80095a8:	080266bc 	.word	0x080266bc
 80095ac:	080266e0 	.word	0x080266e0
 80095b0:	080266fc 	.word	0x080266fc
 80095b4:	08026700 	.word	0x08026700
 80095b8:	0802671c 	.word	0x0802671c
 80095bc:	08026740 	.word	0x08026740
 80095c0:	0802675c 	.word	0x0802675c
 80095c4:	08023cc4 	.word	0x08023cc4
 80095c8:	08026768 	.word	0x08026768
 80095cc:	08025838 	.word	0x08025838
 80095d0:	08023cac 	.word	0x08023cac
 80095d4:	08026778 	.word	0x08026778
 80095d8:	08024358 	.word	0x08024358
 80095dc:	08026780 	.word	0x08026780
 80095e0:	08025258 	.word	0x08025258
 80095e4:	08023ff0 	.word	0x08023ff0
 80095e8:	0802678c 	.word	0x0802678c
 80095ec:	08023c60 	.word	0x08023c60
 80095f0:	08026794 	.word	0x08026794
 80095f4:	080267a0 	.word	0x080267a0
		case 221 :
			strcpy(p->name,"ET");
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80095fe:	4aad      	ldr	r2, [pc, #692]	; (80098b4 <problem_fetch+0x8250>)
 8009600:	8811      	ldrh	r1, [r2, #0]
 8009602:	7892      	ldrb	r2, [r2, #2]
 8009604:	8019      	strh	r1, [r3, #0]
 8009606:	709a      	strb	r2, [r3, #2]
			strcpy(p->grade,"6C");
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800960e:	4aaa      	ldr	r2, [pc, #680]	; (80098b8 <problem_fetch+0x8254>)
 8009610:	8811      	ldrh	r1, [r2, #0]
 8009612:	7892      	ldrb	r2, [r2, #2]
 8009614:	8019      	strh	r1, [r3, #0]
 8009616:	709a      	strb	r2, [r3, #2]
			p->moveSize = 7;
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	2207      	movs	r2, #7
 800961c:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,E,E,B,E,E,I");
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	33a4      	adds	r3, #164	; 0xa4
 8009622:	4aa6      	ldr	r2, [pc, #664]	; (80098bc <problem_fetch+0x8258>)
 8009624:	461c      	mov	r4, r3
 8009626:	4613      	mov	r3, r2
 8009628:	cb07      	ldmia	r3!, {r0, r1, r2}
 800962a:	6020      	str	r0, [r4, #0]
 800962c:	6061      	str	r1, [r4, #4]
 800962e:	60a2      	str	r2, [r4, #8]
 8009630:	881b      	ldrh	r3, [r3, #0]
 8009632:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,6,8,10,12,16,18");
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	3304      	adds	r3, #4
 8009638:	4aa1      	ldr	r2, [pc, #644]	; (80098c0 <problem_fetch+0x825c>)
 800963a:	461d      	mov	r5, r3
 800963c:	4614      	mov	r4, r2
 800963e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009640:	6028      	str	r0, [r5, #0]
 8009642:	6069      	str	r1, [r5, #4]
 8009644:	60aa      	str	r2, [r5, #8]
 8009646:	60eb      	str	r3, [r5, #12]
 8009648:	8823      	ldrh	r3, [r4, #0]
 800964a:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8009652:	4a9c      	ldr	r2, [pc, #624]	; (80098c4 <problem_fetch+0x8260>)
 8009654:	461c      	mov	r4, r3
 8009656:	4613      	mov	r3, r2
 8009658:	cb07      	ldmia	r3!, {r0, r1, r2}
 800965a:	6020      	str	r0, [r4, #0]
 800965c:	6061      	str	r1, [r4, #4]
 800965e:	60a2      	str	r2, [r4, #8]
 8009660:	881b      	ldrh	r3, [r3, #0]
 8009662:	81a3      	strh	r3, [r4, #12]
			break;
 8009664:	f012 bf2e 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 222 :
			strcpy(p->name,"THE WALL 1");
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800966e:	4996      	ldr	r1, [pc, #600]	; (80098c8 <problem_fetch+0x8264>)
 8009670:	461a      	mov	r2, r3
 8009672:	460b      	mov	r3, r1
 8009674:	cb03      	ldmia	r3!, {r0, r1}
 8009676:	6010      	str	r0, [r2, #0]
 8009678:	6051      	str	r1, [r2, #4]
 800967a:	8819      	ldrh	r1, [r3, #0]
 800967c:	789b      	ldrb	r3, [r3, #2]
 800967e:	8111      	strh	r1, [r2, #8]
 8009680:	7293      	strb	r3, [r2, #10]
			strcpy(p->grade,"6C");
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8009688:	4a8b      	ldr	r2, [pc, #556]	; (80098b8 <problem_fetch+0x8254>)
 800968a:	8811      	ldrh	r1, [r2, #0]
 800968c:	7892      	ldrb	r2, [r2, #2]
 800968e:	8019      	strh	r1, [r3, #0]
 8009690:	709a      	strb	r2, [r3, #2]
			p->moveSize = 9;
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	2209      	movs	r2, #9
 8009696:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"B,G,G,B,F,F,I,E,I");
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	33a4      	adds	r3, #164	; 0xa4
 800969c:	4a8b      	ldr	r2, [pc, #556]	; (80098cc <problem_fetch+0x8268>)
 800969e:	461d      	mov	r5, r3
 80096a0:	4614      	mov	r4, r2
 80096a2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80096a4:	6028      	str	r0, [r5, #0]
 80096a6:	6069      	str	r1, [r5, #4]
 80096a8:	60aa      	str	r2, [r5, #8]
 80096aa:	60eb      	str	r3, [r5, #12]
 80096ac:	8823      	ldrh	r3, [r4, #0]
 80096ae:	822b      	strh	r3, [r5, #16]
			strcpy(p->moveNumbers,"6,4,9,10,11,13,14,16,18");
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	3304      	adds	r3, #4
 80096b4:	4a86      	ldr	r2, [pc, #536]	; (80098d0 <problem_fetch+0x826c>)
 80096b6:	461d      	mov	r5, r3
 80096b8:	4614      	mov	r4, r2
 80096ba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80096bc:	6028      	str	r0, [r5, #0]
 80096be:	6069      	str	r1, [r5, #4]
 80096c0:	60aa      	str	r2, [r5, #8]
 80096c2:	60eb      	str	r3, [r5, #12]
 80096c4:	cc03      	ldmia	r4!, {r0, r1}
 80096c6:	6128      	str	r0, [r5, #16]
 80096c8:	6169      	str	r1, [r5, #20]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,d,e");
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 80096d0:	4a80      	ldr	r2, [pc, #512]	; (80098d4 <problem_fetch+0x8270>)
 80096d2:	461d      	mov	r5, r3
 80096d4:	4614      	mov	r4, r2
 80096d6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80096d8:	6028      	str	r0, [r5, #0]
 80096da:	6069      	str	r1, [r5, #4]
 80096dc:	60aa      	str	r2, [r5, #8]
 80096de:	60eb      	str	r3, [r5, #12]
 80096e0:	8823      	ldrh	r3, [r4, #0]
 80096e2:	822b      	strh	r3, [r5, #16]
			break;
 80096e4:	f012 beee 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 223 :
			strcpy(p->name,"OACHKAZL");
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80096ee:	497a      	ldr	r1, [pc, #488]	; (80098d8 <problem_fetch+0x8274>)
 80096f0:	461a      	mov	r2, r3
 80096f2:	460b      	mov	r3, r1
 80096f4:	cb03      	ldmia	r3!, {r0, r1}
 80096f6:	6010      	str	r0, [r2, #0]
 80096f8:	6051      	str	r1, [r2, #4]
 80096fa:	781b      	ldrb	r3, [r3, #0]
 80096fc:	7213      	strb	r3, [r2, #8]
			strcpy(p->grade,"7A+");
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8009704:	4a75      	ldr	r2, [pc, #468]	; (80098dc <problem_fetch+0x8278>)
 8009706:	6810      	ldr	r0, [r2, #0]
 8009708:	6018      	str	r0, [r3, #0]
			p->moveSize = 8;
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	2208      	movs	r2, #8
 800970e:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,H,G,B,C,D,D,C");
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	33a4      	adds	r3, #164	; 0xa4
 8009714:	4a72      	ldr	r2, [pc, #456]	; (80098e0 <problem_fetch+0x827c>)
 8009716:	461c      	mov	r4, r3
 8009718:	4615      	mov	r5, r2
 800971a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800971c:	6020      	str	r0, [r4, #0]
 800971e:	6061      	str	r1, [r4, #4]
 8009720:	60a2      	str	r2, [r4, #8]
 8009722:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,8,9,12,16,18,15,8");
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	3304      	adds	r3, #4
 8009728:	4a6e      	ldr	r2, [pc, #440]	; (80098e4 <problem_fetch+0x8280>)
 800972a:	461d      	mov	r5, r3
 800972c:	4614      	mov	r4, r2
 800972e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009730:	6028      	str	r0, [r5, #0]
 8009732:	6069      	str	r1, [r5, #4]
 8009734:	60aa      	str	r2, [r5, #8]
 8009736:	60eb      	str	r3, [r5, #12]
 8009738:	6820      	ldr	r0, [r4, #0]
 800973a:	6128      	str	r0, [r5, #16]
			strcpy(p->startFinish,"s,d,d,d,d,e,d,d");
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8009742:	4a69      	ldr	r2, [pc, #420]	; (80098e8 <problem_fetch+0x8284>)
 8009744:	461c      	mov	r4, r3
 8009746:	4615      	mov	r5, r2
 8009748:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800974a:	6020      	str	r0, [r4, #0]
 800974c:	6061      	str	r1, [r4, #4]
 800974e:	60a2      	str	r2, [r4, #8]
 8009750:	60e3      	str	r3, [r4, #12]
			break;
 8009752:	f012 beb7 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 224 :
			strcpy(p->name,"LA BANDA DEL PATIO");
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800975c:	4a63      	ldr	r2, [pc, #396]	; (80098ec <problem_fetch+0x8288>)
 800975e:	461d      	mov	r5, r3
 8009760:	4614      	mov	r4, r2
 8009762:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009764:	6028      	str	r0, [r5, #0]
 8009766:	6069      	str	r1, [r5, #4]
 8009768:	60aa      	str	r2, [r5, #8]
 800976a:	60eb      	str	r3, [r5, #12]
 800976c:	8823      	ldrh	r3, [r4, #0]
 800976e:	78a2      	ldrb	r2, [r4, #2]
 8009770:	822b      	strh	r3, [r5, #16]
 8009772:	4613      	mov	r3, r2
 8009774:	74ab      	strb	r3, [r5, #18]
			strcpy(p->grade,"6B+");
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800977c:	4a5c      	ldr	r2, [pc, #368]	; (80098f0 <problem_fetch+0x828c>)
 800977e:	6810      	ldr	r0, [r2, #0]
 8009780:	6018      	str	r0, [r3, #0]
			p->moveSize = 8;
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	2208      	movs	r2, #8
 8009786:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,J,G,C,B,E,A,D");
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	33a4      	adds	r3, #164	; 0xa4
 800978c:	4a59      	ldr	r2, [pc, #356]	; (80098f4 <problem_fetch+0x8290>)
 800978e:	461c      	mov	r4, r3
 8009790:	4615      	mov	r5, r2
 8009792:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009794:	6020      	str	r0, [r4, #0]
 8009796:	6061      	str	r1, [r4, #4]
 8009798:	60a2      	str	r2, [r4, #8]
 800979a:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,5,9,8,12,12,14,18");
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	3304      	adds	r3, #4
 80097a0:	4a55      	ldr	r2, [pc, #340]	; (80098f8 <problem_fetch+0x8294>)
 80097a2:	461d      	mov	r5, r3
 80097a4:	4614      	mov	r4, r2
 80097a6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80097a8:	6028      	str	r0, [r5, #0]
 80097aa:	6069      	str	r1, [r5, #4]
 80097ac:	60aa      	str	r2, [r5, #8]
 80097ae:	60eb      	str	r3, [r5, #12]
 80097b0:	6820      	ldr	r0, [r4, #0]
 80097b2:	6128      	str	r0, [r5, #16]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,e");
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 80097ba:	4a50      	ldr	r2, [pc, #320]	; (80098fc <problem_fetch+0x8298>)
 80097bc:	461c      	mov	r4, r3
 80097be:	4615      	mov	r5, r2
 80097c0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80097c2:	6020      	str	r0, [r4, #0]
 80097c4:	6061      	str	r1, [r4, #4]
 80097c6:	60a2      	str	r2, [r4, #8]
 80097c8:	60e3      	str	r3, [r4, #12]
			break;
 80097ca:	f012 be7b 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 225 :
			strcpy(p->name,"GLUTAMATO MONOSODICO");
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80097d4:	4a4a      	ldr	r2, [pc, #296]	; (8009900 <problem_fetch+0x829c>)
 80097d6:	461d      	mov	r5, r3
 80097d8:	4614      	mov	r4, r2
 80097da:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80097dc:	6028      	str	r0, [r5, #0]
 80097de:	6069      	str	r1, [r5, #4]
 80097e0:	60aa      	str	r2, [r5, #8]
 80097e2:	60eb      	str	r3, [r5, #12]
 80097e4:	6820      	ldr	r0, [r4, #0]
 80097e6:	6128      	str	r0, [r5, #16]
 80097e8:	7923      	ldrb	r3, [r4, #4]
 80097ea:	752b      	strb	r3, [r5, #20]
			strcpy(p->grade,"6B+");
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80097f2:	4a3f      	ldr	r2, [pc, #252]	; (80098f0 <problem_fetch+0x828c>)
 80097f4:	6810      	ldr	r0, [r2, #0]
 80097f6:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	2207      	movs	r2, #7
 80097fc:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,G,G,C,B,E,D");
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	33a4      	adds	r3, #164	; 0xa4
 8009802:	4a40      	ldr	r2, [pc, #256]	; (8009904 <problem_fetch+0x82a0>)
 8009804:	461c      	mov	r4, r3
 8009806:	4613      	mov	r3, r2
 8009808:	cb07      	ldmia	r3!, {r0, r1, r2}
 800980a:	6020      	str	r0, [r4, #0]
 800980c:	6061      	str	r1, [r4, #4]
 800980e:	60a2      	str	r2, [r4, #8]
 8009810:	881b      	ldrh	r3, [r3, #0]
 8009812:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,4,9,8,12,12,18");
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	3304      	adds	r3, #4
 8009818:	4a3b      	ldr	r2, [pc, #236]	; (8009908 <problem_fetch+0x82a4>)
 800981a:	461d      	mov	r5, r3
 800981c:	4614      	mov	r4, r2
 800981e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009820:	6028      	str	r0, [r5, #0]
 8009822:	6069      	str	r1, [r5, #4]
 8009824:	60aa      	str	r2, [r5, #8]
 8009826:	60eb      	str	r3, [r5, #12]
 8009828:	7823      	ldrb	r3, [r4, #0]
 800982a:	742b      	strb	r3, [r5, #16]
			strcpy(p->startFinish,"s,s,d,d,d,d,e");
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8009832:	4a36      	ldr	r2, [pc, #216]	; (800990c <problem_fetch+0x82a8>)
 8009834:	461c      	mov	r4, r3
 8009836:	4613      	mov	r3, r2
 8009838:	cb07      	ldmia	r3!, {r0, r1, r2}
 800983a:	6020      	str	r0, [r4, #0]
 800983c:	6061      	str	r1, [r4, #4]
 800983e:	60a2      	str	r2, [r4, #8]
 8009840:	881b      	ldrh	r3, [r3, #0]
 8009842:	81a3      	strh	r3, [r4, #12]
			break;
 8009844:	f012 be3e 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 226 :
			strcpy(p->name,"LOST DAY");
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800984e:	4930      	ldr	r1, [pc, #192]	; (8009910 <problem_fetch+0x82ac>)
 8009850:	461a      	mov	r2, r3
 8009852:	460b      	mov	r3, r1
 8009854:	cb03      	ldmia	r3!, {r0, r1}
 8009856:	6010      	str	r0, [r2, #0]
 8009858:	6051      	str	r1, [r2, #4]
 800985a:	781b      	ldrb	r3, [r3, #0]
 800985c:	7213      	strb	r3, [r2, #8]
			strcpy(p->grade,"6C");
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8009864:	4a14      	ldr	r2, [pc, #80]	; (80098b8 <problem_fetch+0x8254>)
 8009866:	8811      	ldrh	r1, [r2, #0]
 8009868:	7892      	ldrb	r2, [r2, #2]
 800986a:	8019      	strh	r1, [r3, #0]
 800986c:	709a      	strb	r2, [r3, #2]
			p->moveSize = 6;
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	2206      	movs	r2, #6
 8009872:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"E,J,H,C,D,D");
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	33a4      	adds	r3, #164	; 0xa4
 8009878:	4a26      	ldr	r2, [pc, #152]	; (8009914 <problem_fetch+0x82b0>)
 800987a:	461c      	mov	r4, r3
 800987c:	4613      	mov	r3, r2
 800987e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8009880:	6020      	str	r0, [r4, #0]
 8009882:	6061      	str	r1, [r4, #4]
 8009884:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"6,5,10,13,15,18");
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	3304      	adds	r3, #4
 800988a:	4a23      	ldr	r2, [pc, #140]	; (8009918 <problem_fetch+0x82b4>)
 800988c:	461c      	mov	r4, r3
 800988e:	4615      	mov	r5, r2
 8009890:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009892:	6020      	str	r0, [r4, #0]
 8009894:	6061      	str	r1, [r4, #4]
 8009896:	60a2      	str	r2, [r4, #8]
 8009898:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,s,d,d,d,e");
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 80098a0:	4a1e      	ldr	r2, [pc, #120]	; (800991c <problem_fetch+0x82b8>)
 80098a2:	461c      	mov	r4, r3
 80098a4:	4613      	mov	r3, r2
 80098a6:	cb07      	ldmia	r3!, {r0, r1, r2}
 80098a8:	6020      	str	r0, [r4, #0]
 80098aa:	6061      	str	r1, [r4, #4]
 80098ac:	60a2      	str	r2, [r4, #8]
			break;
 80098ae:	f012 be09 	b.w	801c4c4 <problem_fetch+0x1ae60>
 80098b2:	bf00      	nop
 80098b4:	080267b0 	.word	0x080267b0
 80098b8:	08023bf0 	.word	0x08023bf0
 80098bc:	080267b4 	.word	0x080267b4
 80098c0:	080267c4 	.word	0x080267c4
 80098c4:	08023cac 	.word	0x08023cac
 80098c8:	080267d8 	.word	0x080267d8
 80098cc:	080267e4 	.word	0x080267e4
 80098d0:	080267f8 	.word	0x080267f8
 80098d4:	08024b08 	.word	0x08024b08
 80098d8:	08026810 	.word	0x08026810
 80098dc:	08023cc4 	.word	0x08023cc4
 80098e0:	0802681c 	.word	0x0802681c
 80098e4:	0802682c 	.word	0x0802682c
 80098e8:	08026840 	.word	0x08026840
 80098ec:	08026850 	.word	0x08026850
 80098f0:	08023b24 	.word	0x08023b24
 80098f4:	08026864 	.word	0x08026864
 80098f8:	08026874 	.word	0x08026874
 80098fc:	08023c48 	.word	0x08023c48
 8009900:	08026888 	.word	0x08026888
 8009904:	080268a0 	.word	0x080268a0
 8009908:	080268b0 	.word	0x080268b0
 800990c:	08023b9c 	.word	0x08023b9c
 8009910:	080268c4 	.word	0x080268c4
 8009914:	080268d0 	.word	0x080268d0
 8009918:	080268dc 	.word	0x080268dc
 800991c:	08023b04 	.word	0x08023b04
		case 227 :
			strcpy(p->name,"FOR BEGINNERS - 3");
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8009926:	4aab      	ldr	r2, [pc, #684]	; (8009bd4 <problem_fetch+0x8570>)
 8009928:	461d      	mov	r5, r3
 800992a:	4614      	mov	r4, r2
 800992c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800992e:	6028      	str	r0, [r5, #0]
 8009930:	6069      	str	r1, [r5, #4]
 8009932:	60aa      	str	r2, [r5, #8]
 8009934:	60eb      	str	r3, [r5, #12]
 8009936:	8823      	ldrh	r3, [r4, #0]
 8009938:	822b      	strh	r3, [r5, #16]
			strcpy(p->grade,"6B+");
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8009940:	4aa5      	ldr	r2, [pc, #660]	; (8009bd8 <problem_fetch+0x8574>)
 8009942:	6810      	ldr	r0, [r2, #0]
 8009944:	6018      	str	r0, [r3, #0]
			p->moveSize = 8;
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	2208      	movs	r2, #8
 800994a:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"E,G,I,F,I,H,E,D");
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	33a4      	adds	r3, #164	; 0xa4
 8009950:	4aa2      	ldr	r2, [pc, #648]	; (8009bdc <problem_fetch+0x8578>)
 8009952:	461c      	mov	r4, r3
 8009954:	4615      	mov	r5, r2
 8009956:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009958:	6020      	str	r0, [r4, #0]
 800995a:	6061      	str	r1, [r4, #4]
 800995c:	60a2      	str	r2, [r4, #8]
 800995e:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"8,4,10,13,14,12,16,18");
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	3304      	adds	r3, #4
 8009964:	4a9e      	ldr	r2, [pc, #632]	; (8009be0 <problem_fetch+0x857c>)
 8009966:	461d      	mov	r5, r3
 8009968:	4614      	mov	r4, r2
 800996a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800996c:	6028      	str	r0, [r5, #0]
 800996e:	6069      	str	r1, [r5, #4]
 8009970:	60aa      	str	r2, [r5, #8]
 8009972:	60eb      	str	r3, [r5, #12]
 8009974:	6820      	ldr	r0, [r4, #0]
 8009976:	6128      	str	r0, [r5, #16]
 8009978:	88a3      	ldrh	r3, [r4, #4]
 800997a:	82ab      	strh	r3, [r5, #20]
			strcpy(p->startFinish,"d,s,d,d,d,d,d,e");
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8009982:	4a98      	ldr	r2, [pc, #608]	; (8009be4 <problem_fetch+0x8580>)
 8009984:	461c      	mov	r4, r3
 8009986:	4615      	mov	r5, r2
 8009988:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800998a:	6020      	str	r0, [r4, #0]
 800998c:	6061      	str	r1, [r4, #4]
 800998e:	60a2      	str	r2, [r4, #8]
 8009990:	60e3      	str	r3, [r4, #12]
			break;
 8009992:	f012 bd97 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 228 :
			strcpy(p->name,"JUDGEMENT RAINS");
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800999c:	4a92      	ldr	r2, [pc, #584]	; (8009be8 <problem_fetch+0x8584>)
 800999e:	461c      	mov	r4, r3
 80099a0:	4615      	mov	r5, r2
 80099a2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80099a4:	6020      	str	r0, [r4, #0]
 80099a6:	6061      	str	r1, [r4, #4]
 80099a8:	60a2      	str	r2, [r4, #8]
 80099aa:	60e3      	str	r3, [r4, #12]
			strcpy(p->grade,"7A+");
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80099b2:	4a8e      	ldr	r2, [pc, #568]	; (8009bec <problem_fetch+0x8588>)
 80099b4:	6810      	ldr	r0, [r2, #0]
 80099b6:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	2207      	movs	r2, #7
 80099bc:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"C,E,E,H,H,K,I");
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	33a4      	adds	r3, #164	; 0xa4
 80099c2:	4a8b      	ldr	r2, [pc, #556]	; (8009bf0 <problem_fetch+0x858c>)
 80099c4:	461c      	mov	r4, r3
 80099c6:	4613      	mov	r3, r2
 80099c8:	cb07      	ldmia	r3!, {r0, r1, r2}
 80099ca:	6020      	str	r0, [r4, #0]
 80099cc:	6061      	str	r1, [r4, #4]
 80099ce:	60a2      	str	r2, [r4, #8]
 80099d0:	881b      	ldrh	r3, [r3, #0]
 80099d2:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,6,8,10,12,14,18");
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	3304      	adds	r3, #4
 80099d8:	4a86      	ldr	r2, [pc, #536]	; (8009bf4 <problem_fetch+0x8590>)
 80099da:	461d      	mov	r5, r3
 80099dc:	4614      	mov	r4, r2
 80099de:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80099e0:	6028      	str	r0, [r5, #0]
 80099e2:	6069      	str	r1, [r5, #4]
 80099e4:	60aa      	str	r2, [r5, #8]
 80099e6:	60eb      	str	r3, [r5, #12]
 80099e8:	8823      	ldrh	r3, [r4, #0]
 80099ea:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,s,d,d,d,d,e");
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 80099f2:	4a81      	ldr	r2, [pc, #516]	; (8009bf8 <problem_fetch+0x8594>)
 80099f4:	461c      	mov	r4, r3
 80099f6:	4613      	mov	r3, r2
 80099f8:	cb07      	ldmia	r3!, {r0, r1, r2}
 80099fa:	6020      	str	r0, [r4, #0]
 80099fc:	6061      	str	r1, [r4, #4]
 80099fe:	60a2      	str	r2, [r4, #8]
 8009a00:	881b      	ldrh	r3, [r3, #0]
 8009a02:	81a3      	strh	r3, [r4, #12]
			break;
 8009a04:	f012 bd5e 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 229 :
			strcpy(p->name,"LEAVE OR FOLLOW");
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8009a0e:	4a7b      	ldr	r2, [pc, #492]	; (8009bfc <problem_fetch+0x8598>)
 8009a10:	461c      	mov	r4, r3
 8009a12:	4615      	mov	r5, r2
 8009a14:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009a16:	6020      	str	r0, [r4, #0]
 8009a18:	6061      	str	r1, [r4, #4]
 8009a1a:	60a2      	str	r2, [r4, #8]
 8009a1c:	60e3      	str	r3, [r4, #12]
			strcpy(p->grade,"6C");
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8009a24:	4a76      	ldr	r2, [pc, #472]	; (8009c00 <problem_fetch+0x859c>)
 8009a26:	8811      	ldrh	r1, [r2, #0]
 8009a28:	7892      	ldrb	r2, [r2, #2]
 8009a2a:	8019      	strh	r1, [r3, #0]
 8009a2c:	709a      	strb	r2, [r3, #2]
			p->moveSize = 6;
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	2206      	movs	r2, #6
 8009a32:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"H,J,I,J,G,I");
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	33a4      	adds	r3, #164	; 0xa4
 8009a38:	4a72      	ldr	r2, [pc, #456]	; (8009c04 <problem_fetch+0x85a0>)
 8009a3a:	461c      	mov	r4, r3
 8009a3c:	4613      	mov	r3, r2
 8009a3e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8009a40:	6020      	str	r0, [r4, #0]
 8009a42:	6061      	str	r1, [r4, #4]
 8009a44:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,7,10,13,15,18");
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	3304      	adds	r3, #4
 8009a4a:	4a6f      	ldr	r2, [pc, #444]	; (8009c08 <problem_fetch+0x85a4>)
 8009a4c:	461c      	mov	r4, r3
 8009a4e:	4615      	mov	r5, r2
 8009a50:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009a52:	6020      	str	r0, [r4, #0]
 8009a54:	6061      	str	r1, [r4, #4]
 8009a56:	60a2      	str	r2, [r4, #8]
 8009a58:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8009a60:	4a6a      	ldr	r2, [pc, #424]	; (8009c0c <problem_fetch+0x85a8>)
 8009a62:	461c      	mov	r4, r3
 8009a64:	4613      	mov	r3, r2
 8009a66:	cb07      	ldmia	r3!, {r0, r1, r2}
 8009a68:	6020      	str	r0, [r4, #0]
 8009a6a:	6061      	str	r1, [r4, #4]
 8009a6c:	60a2      	str	r2, [r4, #8]
			break;
 8009a6e:	f012 bd29 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 230 :
			strcpy(p->name,"EASY GO");
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8009a78:	4965      	ldr	r1, [pc, #404]	; (8009c10 <problem_fetch+0x85ac>)
 8009a7a:	461a      	mov	r2, r3
 8009a7c:	460b      	mov	r3, r1
 8009a7e:	cb03      	ldmia	r3!, {r0, r1}
 8009a80:	6010      	str	r0, [r2, #0]
 8009a82:	6051      	str	r1, [r2, #4]
			strcpy(p->grade,"6B+");
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8009a8a:	4a53      	ldr	r2, [pc, #332]	; (8009bd8 <problem_fetch+0x8574>)
 8009a8c:	6810      	ldr	r0, [r2, #0]
 8009a8e:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	2207      	movs	r2, #7
 8009a94:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"C,E,E,H,F,C,D");
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	33a4      	adds	r3, #164	; 0xa4
 8009a9a:	4a5e      	ldr	r2, [pc, #376]	; (8009c14 <problem_fetch+0x85b0>)
 8009a9c:	461c      	mov	r4, r3
 8009a9e:	4613      	mov	r3, r2
 8009aa0:	cb07      	ldmia	r3!, {r0, r1, r2}
 8009aa2:	6020      	str	r0, [r4, #0]
 8009aa4:	6061      	str	r1, [r4, #4]
 8009aa6:	60a2      	str	r2, [r4, #8]
 8009aa8:	881b      	ldrh	r3, [r3, #0]
 8009aaa:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,6,8,8,11,13,18");
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	3304      	adds	r3, #4
 8009ab0:	4a59      	ldr	r2, [pc, #356]	; (8009c18 <problem_fetch+0x85b4>)
 8009ab2:	461d      	mov	r5, r3
 8009ab4:	4614      	mov	r4, r2
 8009ab6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009ab8:	6028      	str	r0, [r5, #0]
 8009aba:	6069      	str	r1, [r5, #4]
 8009abc:	60aa      	str	r2, [r5, #8]
 8009abe:	60eb      	str	r3, [r5, #12]
 8009ac0:	7823      	ldrb	r3, [r4, #0]
 8009ac2:	742b      	strb	r3, [r5, #16]
			strcpy(p->startFinish,"s,s,d,d,d,d,e");
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8009aca:	4a4b      	ldr	r2, [pc, #300]	; (8009bf8 <problem_fetch+0x8594>)
 8009acc:	461c      	mov	r4, r3
 8009ace:	4613      	mov	r3, r2
 8009ad0:	cb07      	ldmia	r3!, {r0, r1, r2}
 8009ad2:	6020      	str	r0, [r4, #0]
 8009ad4:	6061      	str	r1, [r4, #4]
 8009ad6:	60a2      	str	r2, [r4, #8]
 8009ad8:	881b      	ldrh	r3, [r3, #0]
 8009ada:	81a3      	strh	r3, [r4, #12]
			break;
 8009adc:	f012 bcf2 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 231 :
			strcpy(p->name,"UPRISING");
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8009ae6:	494d      	ldr	r1, [pc, #308]	; (8009c1c <problem_fetch+0x85b8>)
 8009ae8:	461a      	mov	r2, r3
 8009aea:	460b      	mov	r3, r1
 8009aec:	cb03      	ldmia	r3!, {r0, r1}
 8009aee:	6010      	str	r0, [r2, #0]
 8009af0:	6051      	str	r1, [r2, #4]
 8009af2:	781b      	ldrb	r3, [r3, #0]
 8009af4:	7213      	strb	r3, [r2, #8]
			strcpy(p->grade,"6B+");
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8009afc:	4a36      	ldr	r2, [pc, #216]	; (8009bd8 <problem_fetch+0x8574>)
 8009afe:	6810      	ldr	r0, [r2, #0]
 8009b00:	6018      	str	r0, [r3, #0]
			p->moveSize = 9;
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	2209      	movs	r2, #9
 8009b06:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,J,H,G,E,F,G,H,I");
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	33a4      	adds	r3, #164	; 0xa4
 8009b0c:	4a44      	ldr	r2, [pc, #272]	; (8009c20 <problem_fetch+0x85bc>)
 8009b0e:	461d      	mov	r5, r3
 8009b10:	4614      	mov	r4, r2
 8009b12:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009b14:	6028      	str	r0, [r5, #0]
 8009b16:	6069      	str	r1, [r5, #4]
 8009b18:	60aa      	str	r2, [r5, #8]
 8009b1a:	60eb      	str	r3, [r5, #12]
 8009b1c:	8823      	ldrh	r3, [r4, #0]
 8009b1e:	822b      	strh	r3, [r5, #16]
			strcpy(p->moveNumbers,"4,5,8,9,12,13,14,16,18");
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	3304      	adds	r3, #4
 8009b24:	4a3f      	ldr	r2, [pc, #252]	; (8009c24 <problem_fetch+0x85c0>)
 8009b26:	461c      	mov	r4, r3
 8009b28:	4615      	mov	r5, r2
 8009b2a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009b2c:	6020      	str	r0, [r4, #0]
 8009b2e:	6061      	str	r1, [r4, #4]
 8009b30:	60a2      	str	r2, [r4, #8]
 8009b32:	60e3      	str	r3, [r4, #12]
 8009b34:	6828      	ldr	r0, [r5, #0]
 8009b36:	6120      	str	r0, [r4, #16]
 8009b38:	88ab      	ldrh	r3, [r5, #4]
 8009b3a:	79aa      	ldrb	r2, [r5, #6]
 8009b3c:	82a3      	strh	r3, [r4, #20]
 8009b3e:	4613      	mov	r3, r2
 8009b40:	75a3      	strb	r3, [r4, #22]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,d,e");
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8009b48:	4a37      	ldr	r2, [pc, #220]	; (8009c28 <problem_fetch+0x85c4>)
 8009b4a:	461d      	mov	r5, r3
 8009b4c:	4614      	mov	r4, r2
 8009b4e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009b50:	6028      	str	r0, [r5, #0]
 8009b52:	6069      	str	r1, [r5, #4]
 8009b54:	60aa      	str	r2, [r5, #8]
 8009b56:	60eb      	str	r3, [r5, #12]
 8009b58:	8823      	ldrh	r3, [r4, #0]
 8009b5a:	822b      	strh	r3, [r5, #16]
			break;
 8009b5c:	f012 bcb2 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 232 :
			strcpy(p->name,"SILENT MEDIA");
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8009b66:	4a31      	ldr	r2, [pc, #196]	; (8009c2c <problem_fetch+0x85c8>)
 8009b68:	461c      	mov	r4, r3
 8009b6a:	4613      	mov	r3, r2
 8009b6c:	cb07      	ldmia	r3!, {r0, r1, r2}
 8009b6e:	6020      	str	r0, [r4, #0]
 8009b70:	6061      	str	r1, [r4, #4]
 8009b72:	60a2      	str	r2, [r4, #8]
 8009b74:	781b      	ldrb	r3, [r3, #0]
 8009b76:	7323      	strb	r3, [r4, #12]
			strcpy(p->grade,"6B+");
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8009b7e:	4a16      	ldr	r2, [pc, #88]	; (8009bd8 <problem_fetch+0x8574>)
 8009b80:	6810      	ldr	r0, [r2, #0]
 8009b82:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	2207      	movs	r2, #7
 8009b88:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,E,H,G,I,H,I");
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	33a4      	adds	r3, #164	; 0xa4
 8009b8e:	4a28      	ldr	r2, [pc, #160]	; (8009c30 <problem_fetch+0x85cc>)
 8009b90:	461c      	mov	r4, r3
 8009b92:	4613      	mov	r3, r2
 8009b94:	cb07      	ldmia	r3!, {r0, r1, r2}
 8009b96:	6020      	str	r0, [r4, #0]
 8009b98:	6061      	str	r1, [r4, #4]
 8009b9a:	60a2      	str	r2, [r4, #8]
 8009b9c:	881b      	ldrh	r3, [r3, #0]
 8009b9e:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,6,10,9,14,16,18");
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	3304      	adds	r3, #4
 8009ba4:	4a23      	ldr	r2, [pc, #140]	; (8009c34 <problem_fetch+0x85d0>)
 8009ba6:	461d      	mov	r5, r3
 8009ba8:	4614      	mov	r4, r2
 8009baa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009bac:	6028      	str	r0, [r5, #0]
 8009bae:	6069      	str	r1, [r5, #4]
 8009bb0:	60aa      	str	r2, [r5, #8]
 8009bb2:	60eb      	str	r3, [r5, #12]
 8009bb4:	8823      	ldrh	r3, [r4, #0]
 8009bb6:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8009bbe:	4a1e      	ldr	r2, [pc, #120]	; (8009c38 <problem_fetch+0x85d4>)
 8009bc0:	461c      	mov	r4, r3
 8009bc2:	4613      	mov	r3, r2
 8009bc4:	cb07      	ldmia	r3!, {r0, r1, r2}
 8009bc6:	6020      	str	r0, [r4, #0]
 8009bc8:	6061      	str	r1, [r4, #4]
 8009bca:	60a2      	str	r2, [r4, #8]
 8009bcc:	881b      	ldrh	r3, [r3, #0]
 8009bce:	81a3      	strh	r3, [r4, #12]
			break;
 8009bd0:	f012 bc78 	b.w	801c4c4 <problem_fetch+0x1ae60>
 8009bd4:	080268ec 	.word	0x080268ec
 8009bd8:	08023b24 	.word	0x08023b24
 8009bdc:	08026900 	.word	0x08026900
 8009be0:	08026910 	.word	0x08026910
 8009be4:	08026928 	.word	0x08026928
 8009be8:	08026938 	.word	0x08026938
 8009bec:	08023cc4 	.word	0x08023cc4
 8009bf0:	08026948 	.word	0x08026948
 8009bf4:	08026958 	.word	0x08026958
 8009bf8:	08023b9c 	.word	0x08023b9c
 8009bfc:	0802696c 	.word	0x0802696c
 8009c00:	08023bf0 	.word	0x08023bf0
 8009c04:	0802697c 	.word	0x0802697c
 8009c08:	08026988 	.word	0x08026988
 8009c0c:	08023ec0 	.word	0x08023ec0
 8009c10:	08026998 	.word	0x08026998
 8009c14:	080269a0 	.word	0x080269a0
 8009c18:	080269b0 	.word	0x080269b0
 8009c1c:	080269c4 	.word	0x080269c4
 8009c20:	080269d0 	.word	0x080269d0
 8009c24:	080269e4 	.word	0x080269e4
 8009c28:	08024b08 	.word	0x08024b08
 8009c2c:	080269fc 	.word	0x080269fc
 8009c30:	08026a0c 	.word	0x08026a0c
 8009c34:	08026a1c 	.word	0x08026a1c
 8009c38:	08023cac 	.word	0x08023cac
		case 233 :
			strcpy(p->name,"HOONGA (REMAKE)");
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8009c42:	4ab5      	ldr	r2, [pc, #724]	; (8009f18 <problem_fetch+0x88b4>)
 8009c44:	461c      	mov	r4, r3
 8009c46:	4615      	mov	r5, r2
 8009c48:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009c4a:	6020      	str	r0, [r4, #0]
 8009c4c:	6061      	str	r1, [r4, #4]
 8009c4e:	60a2      	str	r2, [r4, #8]
 8009c50:	60e3      	str	r3, [r4, #12]
			strcpy(p->grade,"7B+");
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8009c58:	4ab0      	ldr	r2, [pc, #704]	; (8009f1c <problem_fetch+0x88b8>)
 8009c5a:	6810      	ldr	r0, [r2, #0]
 8009c5c:	6018      	str	r0, [r3, #0]
			p->moveSize = 10;
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	220a      	movs	r2, #10
 8009c62:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"B,C,D,B,E,D,H,G,H,I");
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	33a4      	adds	r3, #164	; 0xa4
 8009c68:	4aad      	ldr	r2, [pc, #692]	; (8009f20 <problem_fetch+0x88bc>)
 8009c6a:	461d      	mov	r5, r3
 8009c6c:	4614      	mov	r4, r2
 8009c6e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009c70:	6028      	str	r0, [r5, #0]
 8009c72:	6069      	str	r1, [r5, #4]
 8009c74:	60aa      	str	r2, [r5, #8]
 8009c76:	60eb      	str	r3, [r5, #12]
 8009c78:	6820      	ldr	r0, [r4, #0]
 8009c7a:	6128      	str	r0, [r5, #16]
			strcpy(p->moveNumbers,"6,5,7,10,12,11,13,14,16,18");
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	3304      	adds	r3, #4
 8009c80:	4aa8      	ldr	r2, [pc, #672]	; (8009f24 <problem_fetch+0x88c0>)
 8009c82:	461d      	mov	r5, r3
 8009c84:	4614      	mov	r4, r2
 8009c86:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009c88:	6028      	str	r0, [r5, #0]
 8009c8a:	6069      	str	r1, [r5, #4]
 8009c8c:	60aa      	str	r2, [r5, #8]
 8009c8e:	60eb      	str	r3, [r5, #12]
 8009c90:	cc03      	ldmia	r4!, {r0, r1}
 8009c92:	6128      	str	r0, [r5, #16]
 8009c94:	6169      	str	r1, [r5, #20]
 8009c96:	8823      	ldrh	r3, [r4, #0]
 8009c98:	78a2      	ldrb	r2, [r4, #2]
 8009c9a:	832b      	strh	r3, [r5, #24]
 8009c9c:	4613      	mov	r3, r2
 8009c9e:	76ab      	strb	r3, [r5, #26]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,d,d,e");
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8009ca6:	4aa0      	ldr	r2, [pc, #640]	; (8009f28 <problem_fetch+0x88c4>)
 8009ca8:	461d      	mov	r5, r3
 8009caa:	4614      	mov	r4, r2
 8009cac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009cae:	6028      	str	r0, [r5, #0]
 8009cb0:	6069      	str	r1, [r5, #4]
 8009cb2:	60aa      	str	r2, [r5, #8]
 8009cb4:	60eb      	str	r3, [r5, #12]
 8009cb6:	6820      	ldr	r0, [r4, #0]
 8009cb8:	6128      	str	r0, [r5, #16]
			break;
 8009cba:	f012 bc03 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 234 :
			strcpy(p->name,"EDITHS BOULDER");
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8009cc4:	4a99      	ldr	r2, [pc, #612]	; (8009f2c <problem_fetch+0x88c8>)
 8009cc6:	461c      	mov	r4, r3
 8009cc8:	4613      	mov	r3, r2
 8009cca:	cb07      	ldmia	r3!, {r0, r1, r2}
 8009ccc:	6020      	str	r0, [r4, #0]
 8009cce:	6061      	str	r1, [r4, #4]
 8009cd0:	60a2      	str	r2, [r4, #8]
 8009cd2:	881a      	ldrh	r2, [r3, #0]
 8009cd4:	789b      	ldrb	r3, [r3, #2]
 8009cd6:	81a2      	strh	r2, [r4, #12]
 8009cd8:	73a3      	strb	r3, [r4, #14]
			strcpy(p->grade,"6C+");
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8009ce0:	4a93      	ldr	r2, [pc, #588]	; (8009f30 <problem_fetch+0x88cc>)
 8009ce2:	6810      	ldr	r0, [r2, #0]
 8009ce4:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	2207      	movs	r2, #7
 8009cea:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"E,I,E,J,D,E,A");
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	33a4      	adds	r3, #164	; 0xa4
 8009cf0:	4a90      	ldr	r2, [pc, #576]	; (8009f34 <problem_fetch+0x88d0>)
 8009cf2:	461c      	mov	r4, r3
 8009cf4:	4613      	mov	r3, r2
 8009cf6:	cb07      	ldmia	r3!, {r0, r1, r2}
 8009cf8:	6020      	str	r0, [r4, #0]
 8009cfa:	6061      	str	r1, [r4, #4]
 8009cfc:	60a2      	str	r2, [r4, #8]
 8009cfe:	881b      	ldrh	r3, [r3, #0]
 8009d00:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"12,7,8,5,15,16,18");
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	3304      	adds	r3, #4
 8009d06:	4a8c      	ldr	r2, [pc, #560]	; (8009f38 <problem_fetch+0x88d4>)
 8009d08:	461d      	mov	r5, r3
 8009d0a:	4614      	mov	r4, r2
 8009d0c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009d0e:	6028      	str	r0, [r5, #0]
 8009d10:	6069      	str	r1, [r5, #4]
 8009d12:	60aa      	str	r2, [r5, #8]
 8009d14:	60eb      	str	r3, [r5, #12]
 8009d16:	8823      	ldrh	r3, [r4, #0]
 8009d18:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"d,d,d,s,d,d,e");
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8009d20:	4a86      	ldr	r2, [pc, #536]	; (8009f3c <problem_fetch+0x88d8>)
 8009d22:	461c      	mov	r4, r3
 8009d24:	4613      	mov	r3, r2
 8009d26:	cb07      	ldmia	r3!, {r0, r1, r2}
 8009d28:	6020      	str	r0, [r4, #0]
 8009d2a:	6061      	str	r1, [r4, #4]
 8009d2c:	60a2      	str	r2, [r4, #8]
 8009d2e:	881b      	ldrh	r3, [r3, #0]
 8009d30:	81a3      	strh	r3, [r4, #12]
			break;
 8009d32:	f012 bbc7 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 235 :
			strcpy(p->name,"IGNORANT STYLE");
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8009d3c:	4a80      	ldr	r2, [pc, #512]	; (8009f40 <problem_fetch+0x88dc>)
 8009d3e:	461c      	mov	r4, r3
 8009d40:	4613      	mov	r3, r2
 8009d42:	cb07      	ldmia	r3!, {r0, r1, r2}
 8009d44:	6020      	str	r0, [r4, #0]
 8009d46:	6061      	str	r1, [r4, #4]
 8009d48:	60a2      	str	r2, [r4, #8]
 8009d4a:	881a      	ldrh	r2, [r3, #0]
 8009d4c:	789b      	ldrb	r3, [r3, #2]
 8009d4e:	81a2      	strh	r2, [r4, #12]
 8009d50:	73a3      	strb	r3, [r4, #14]
			strcpy(p->grade,"7A");
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8009d58:	4a7a      	ldr	r2, [pc, #488]	; (8009f44 <problem_fetch+0x88e0>)
 8009d5a:	8811      	ldrh	r1, [r2, #0]
 8009d5c:	7892      	ldrb	r2, [r2, #2]
 8009d5e:	8019      	strh	r1, [r3, #0]
 8009d60:	709a      	strb	r2, [r3, #2]
			p->moveSize = 6;
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	2206      	movs	r2, #6
 8009d66:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,G,E,F,I,I");
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	33a4      	adds	r3, #164	; 0xa4
 8009d6c:	4a76      	ldr	r2, [pc, #472]	; (8009f48 <problem_fetch+0x88e4>)
 8009d6e:	461c      	mov	r4, r3
 8009d70:	4613      	mov	r3, r2
 8009d72:	cb07      	ldmia	r3!, {r0, r1, r2}
 8009d74:	6020      	str	r0, [r4, #0]
 8009d76:	6061      	str	r1, [r4, #4]
 8009d78:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,6,8,11,14,18");
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	3304      	adds	r3, #4
 8009d7e:	4a73      	ldr	r2, [pc, #460]	; (8009f4c <problem_fetch+0x88e8>)
 8009d80:	461c      	mov	r4, r3
 8009d82:	4613      	mov	r3, r2
 8009d84:	cb07      	ldmia	r3!, {r0, r1, r2}
 8009d86:	6020      	str	r0, [r4, #0]
 8009d88:	6061      	str	r1, [r4, #4]
 8009d8a:	60a2      	str	r2, [r4, #8]
 8009d8c:	881a      	ldrh	r2, [r3, #0]
 8009d8e:	789b      	ldrb	r3, [r3, #2]
 8009d90:	81a2      	strh	r2, [r4, #12]
 8009d92:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8009d9a:	4a6d      	ldr	r2, [pc, #436]	; (8009f50 <problem_fetch+0x88ec>)
 8009d9c:	461c      	mov	r4, r3
 8009d9e:	4613      	mov	r3, r2
 8009da0:	cb07      	ldmia	r3!, {r0, r1, r2}
 8009da2:	6020      	str	r0, [r4, #0]
 8009da4:	6061      	str	r1, [r4, #4]
 8009da6:	60a2      	str	r2, [r4, #8]
			break;
 8009da8:	f012 bb8c 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 236 :
			strcpy(p->name,"FUN1");
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8009db2:	4a68      	ldr	r2, [pc, #416]	; (8009f54 <problem_fetch+0x88f0>)
 8009db4:	6810      	ldr	r0, [r2, #0]
 8009db6:	6018      	str	r0, [r3, #0]
 8009db8:	7912      	ldrb	r2, [r2, #4]
 8009dba:	711a      	strb	r2, [r3, #4]
			strcpy(p->grade,"6B+");
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8009dc2:	4a65      	ldr	r2, [pc, #404]	; (8009f58 <problem_fetch+0x88f4>)
 8009dc4:	6810      	ldr	r0, [r2, #0]
 8009dc6:	6018      	str	r0, [r3, #0]
			p->moveSize = 14;
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	220e      	movs	r2, #14
 8009dcc:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,C,E,C,E,D,F,H,F,I,I,G,H,I");
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	33a4      	adds	r3, #164	; 0xa4
 8009dd2:	4a62      	ldr	r2, [pc, #392]	; (8009f5c <problem_fetch+0x88f8>)
 8009dd4:	461d      	mov	r5, r3
 8009dd6:	4614      	mov	r4, r2
 8009dd8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009dda:	6028      	str	r0, [r5, #0]
 8009ddc:	6069      	str	r1, [r5, #4]
 8009dde:	60aa      	str	r2, [r5, #8]
 8009de0:	60eb      	str	r3, [r5, #12]
 8009de2:	cc07      	ldmia	r4!, {r0, r1, r2}
 8009de4:	6128      	str	r0, [r5, #16]
 8009de6:	6169      	str	r1, [r5, #20]
 8009de8:	61aa      	str	r2, [r5, #24]
			strcpy(p->moveNumbers,"4,5,8,8,9,11,11,12,13,14,15,15,16,18");
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	3304      	adds	r3, #4
 8009dee:	4a5c      	ldr	r2, [pc, #368]	; (8009f60 <problem_fetch+0x88fc>)
 8009df0:	4614      	mov	r4, r2
 8009df2:	469c      	mov	ip, r3
 8009df4:	f104 0e20 	add.w	lr, r4, #32
 8009df8:	4665      	mov	r5, ip
 8009dfa:	4626      	mov	r6, r4
 8009dfc:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8009dfe:	6028      	str	r0, [r5, #0]
 8009e00:	6069      	str	r1, [r5, #4]
 8009e02:	60aa      	str	r2, [r5, #8]
 8009e04:	60eb      	str	r3, [r5, #12]
 8009e06:	3410      	adds	r4, #16
 8009e08:	f10c 0c10 	add.w	ip, ip, #16
 8009e0c:	4574      	cmp	r4, lr
 8009e0e:	d1f3      	bne.n	8009df8 <problem_fetch+0x8794>
 8009e10:	4663      	mov	r3, ip
 8009e12:	4622      	mov	r2, r4
 8009e14:	6810      	ldr	r0, [r2, #0]
 8009e16:	6018      	str	r0, [r3, #0]
 8009e18:	7912      	ldrb	r2, [r2, #4]
 8009e1a:	711a      	strb	r2, [r3, #4]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,d,d,d,d,d,d,e");
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8009e22:	4a50      	ldr	r2, [pc, #320]	; (8009f64 <problem_fetch+0x8900>)
 8009e24:	461d      	mov	r5, r3
 8009e26:	4614      	mov	r4, r2
 8009e28:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009e2a:	6028      	str	r0, [r5, #0]
 8009e2c:	6069      	str	r1, [r5, #4]
 8009e2e:	60aa      	str	r2, [r5, #8]
 8009e30:	60eb      	str	r3, [r5, #12]
 8009e32:	cc07      	ldmia	r4!, {r0, r1, r2}
 8009e34:	6128      	str	r0, [r5, #16]
 8009e36:	6169      	str	r1, [r5, #20]
 8009e38:	61aa      	str	r2, [r5, #24]
			break;
 8009e3a:	f012 bb43 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 237 :
			strcpy(p->name,"MALEDICTION");
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8009e44:	4a48      	ldr	r2, [pc, #288]	; (8009f68 <problem_fetch+0x8904>)
 8009e46:	461c      	mov	r4, r3
 8009e48:	4613      	mov	r3, r2
 8009e4a:	cb07      	ldmia	r3!, {r0, r1, r2}
 8009e4c:	6020      	str	r0, [r4, #0]
 8009e4e:	6061      	str	r1, [r4, #4]
 8009e50:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade,"7A+");
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8009e58:	4a44      	ldr	r2, [pc, #272]	; (8009f6c <problem_fetch+0x8908>)
 8009e5a:	6810      	ldr	r0, [r2, #0]
 8009e5c:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	2206      	movs	r2, #6
 8009e62:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"E,F,B,G,I,D");
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	33a4      	adds	r3, #164	; 0xa4
 8009e68:	4a41      	ldr	r2, [pc, #260]	; (8009f70 <problem_fetch+0x890c>)
 8009e6a:	461c      	mov	r4, r3
 8009e6c:	4613      	mov	r3, r2
 8009e6e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8009e70:	6020      	str	r0, [r4, #0]
 8009e72:	6061      	str	r1, [r4, #4]
 8009e74:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"6,11,12,15,15,18");
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	3304      	adds	r3, #4
 8009e7a:	4a3e      	ldr	r2, [pc, #248]	; (8009f74 <problem_fetch+0x8910>)
 8009e7c:	461d      	mov	r5, r3
 8009e7e:	4614      	mov	r4, r2
 8009e80:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009e82:	6028      	str	r0, [r5, #0]
 8009e84:	6069      	str	r1, [r5, #4]
 8009e86:	60aa      	str	r2, [r5, #8]
 8009e88:	60eb      	str	r3, [r5, #12]
 8009e8a:	7823      	ldrb	r3, [r4, #0]
 8009e8c:	742b      	strb	r3, [r5, #16]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8009e94:	4a2e      	ldr	r2, [pc, #184]	; (8009f50 <problem_fetch+0x88ec>)
 8009e96:	461c      	mov	r4, r3
 8009e98:	4613      	mov	r3, r2
 8009e9a:	cb07      	ldmia	r3!, {r0, r1, r2}
 8009e9c:	6020      	str	r0, [r4, #0]
 8009e9e:	6061      	str	r1, [r4, #4]
 8009ea0:	60a2      	str	r2, [r4, #8]
			break;
 8009ea2:	f012 bb0f 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 238 :
			strcpy(p->name,"KYLO REN");
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8009eac:	4932      	ldr	r1, [pc, #200]	; (8009f78 <problem_fetch+0x8914>)
 8009eae:	461a      	mov	r2, r3
 8009eb0:	460b      	mov	r3, r1
 8009eb2:	cb03      	ldmia	r3!, {r0, r1}
 8009eb4:	6010      	str	r0, [r2, #0]
 8009eb6:	6051      	str	r1, [r2, #4]
 8009eb8:	781b      	ldrb	r3, [r3, #0]
 8009eba:	7213      	strb	r3, [r2, #8]
			strcpy(p->grade,"7A");
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8009ec2:	4a20      	ldr	r2, [pc, #128]	; (8009f44 <problem_fetch+0x88e0>)
 8009ec4:	8811      	ldrh	r1, [r2, #0]
 8009ec6:	7892      	ldrb	r2, [r2, #2]
 8009ec8:	8019      	strh	r1, [r3, #0]
 8009eca:	709a      	strb	r2, [r3, #2]
			p->moveSize = 8;
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	2208      	movs	r2, #8
 8009ed0:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,H,E,F,G,E,I,E");
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	33a4      	adds	r3, #164	; 0xa4
 8009ed6:	4a29      	ldr	r2, [pc, #164]	; (8009f7c <problem_fetch+0x8918>)
 8009ed8:	461c      	mov	r4, r3
 8009eda:	4615      	mov	r5, r2
 8009edc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009ede:	6020      	str	r0, [r4, #0]
 8009ee0:	6061      	str	r1, [r4, #4]
 8009ee2:	60a2      	str	r2, [r4, #8]
 8009ee4:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,5,8,11,14,16,18,9");
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	3304      	adds	r3, #4
 8009eea:	4a25      	ldr	r2, [pc, #148]	; (8009f80 <problem_fetch+0x891c>)
 8009eec:	461d      	mov	r5, r3
 8009eee:	4614      	mov	r4, r2
 8009ef0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009ef2:	6028      	str	r0, [r5, #0]
 8009ef4:	6069      	str	r1, [r5, #4]
 8009ef6:	60aa      	str	r2, [r5, #8]
 8009ef8:	60eb      	str	r3, [r5, #12]
 8009efa:	6820      	ldr	r0, [r4, #0]
 8009efc:	6128      	str	r0, [r5, #16]
			strcpy(p->startFinish,"s,s,d,d,d,d,e,d");
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8009f04:	4a1f      	ldr	r2, [pc, #124]	; (8009f84 <problem_fetch+0x8920>)
 8009f06:	461c      	mov	r4, r3
 8009f08:	4615      	mov	r5, r2
 8009f0a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009f0c:	6020      	str	r0, [r4, #0]
 8009f0e:	6061      	str	r1, [r4, #4]
 8009f10:	60a2      	str	r2, [r4, #8]
 8009f12:	60e3      	str	r3, [r4, #12]
			break;
 8009f14:	f012 bad6 	b.w	801c4c4 <problem_fetch+0x1ae60>
 8009f18:	08026a30 	.word	0x08026a30
 8009f1c:	08023c60 	.word	0x08023c60
 8009f20:	08026a40 	.word	0x08026a40
 8009f24:	08026a54 	.word	0x08026a54
 8009f28:	080243cc 	.word	0x080243cc
 8009f2c:	08026a70 	.word	0x08026a70
 8009f30:	08023bbc 	.word	0x08023bbc
 8009f34:	08026a80 	.word	0x08026a80
 8009f38:	08026a90 	.word	0x08026a90
 8009f3c:	08026aa4 	.word	0x08026aa4
 8009f40:	08026ab4 	.word	0x08026ab4
 8009f44:	08023ae4 	.word	0x08023ae4
 8009f48:	08026ac4 	.word	0x08026ac4
 8009f4c:	08026ad0 	.word	0x08026ad0
 8009f50:	08023ec0 	.word	0x08023ec0
 8009f54:	08026ae0 	.word	0x08026ae0
 8009f58:	08023b24 	.word	0x08023b24
 8009f5c:	08026ae8 	.word	0x08026ae8
 8009f60:	08026b04 	.word	0x08026b04
 8009f64:	08026b2c 	.word	0x08026b2c
 8009f68:	08026b48 	.word	0x08026b48
 8009f6c:	08023cc4 	.word	0x08023cc4
 8009f70:	08026b54 	.word	0x08026b54
 8009f74:	08026b60 	.word	0x08026b60
 8009f78:	08026b74 	.word	0x08026b74
 8009f7c:	08026b80 	.word	0x08026b80
 8009f80:	08026b90 	.word	0x08026b90
 8009f84:	08024384 	.word	0x08024384
		case 239 :
			strcpy(p->name,"STRAIGHTER THAN YOU");
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8009f8e:	4ab2      	ldr	r2, [pc, #712]	; (800a258 <problem_fetch+0x8bf4>)
 8009f90:	461d      	mov	r5, r3
 8009f92:	4614      	mov	r4, r2
 8009f94:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009f96:	6028      	str	r0, [r5, #0]
 8009f98:	6069      	str	r1, [r5, #4]
 8009f9a:	60aa      	str	r2, [r5, #8]
 8009f9c:	60eb      	str	r3, [r5, #12]
 8009f9e:	6820      	ldr	r0, [r4, #0]
 8009fa0:	6128      	str	r0, [r5, #16]
			strcpy(p->grade,"7C");
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8009fa8:	4aac      	ldr	r2, [pc, #688]	; (800a25c <problem_fetch+0x8bf8>)
 8009faa:	8811      	ldrh	r1, [r2, #0]
 8009fac:	7892      	ldrb	r2, [r2, #2]
 8009fae:	8019      	strh	r1, [r3, #0]
 8009fb0:	709a      	strb	r2, [r3, #2]
			p->moveSize = 5;
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	2205      	movs	r2, #5
 8009fb6:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,I,H,K,I");
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	33a4      	adds	r3, #164	; 0xa4
 8009fbc:	49a8      	ldr	r1, [pc, #672]	; (800a260 <problem_fetch+0x8bfc>)
 8009fbe:	461a      	mov	r2, r3
 8009fc0:	460b      	mov	r3, r1
 8009fc2:	cb03      	ldmia	r3!, {r0, r1}
 8009fc4:	6010      	str	r0, [r2, #0]
 8009fc6:	6051      	str	r1, [r2, #4]
 8009fc8:	881b      	ldrh	r3, [r3, #0]
 8009fca:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"5,9,13,16,18");
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	3304      	adds	r3, #4
 8009fd0:	4aa4      	ldr	r2, [pc, #656]	; (800a264 <problem_fetch+0x8c00>)
 8009fd2:	461c      	mov	r4, r3
 8009fd4:	4613      	mov	r3, r2
 8009fd6:	cb07      	ldmia	r3!, {r0, r1, r2}
 8009fd8:	6020      	str	r0, [r4, #0]
 8009fda:	6061      	str	r1, [r4, #4]
 8009fdc:	60a2      	str	r2, [r4, #8]
 8009fde:	781b      	ldrb	r3, [r3, #0]
 8009fe0:	7323      	strb	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,e");
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8009fe8:	499f      	ldr	r1, [pc, #636]	; (800a268 <problem_fetch+0x8c04>)
 8009fea:	461a      	mov	r2, r3
 8009fec:	460b      	mov	r3, r1
 8009fee:	cb03      	ldmia	r3!, {r0, r1}
 8009ff0:	6010      	str	r0, [r2, #0]
 8009ff2:	6051      	str	r1, [r2, #4]
 8009ff4:	881b      	ldrh	r3, [r3, #0]
 8009ff6:	8113      	strh	r3, [r2, #8]
			break;
 8009ff8:	f012 ba64 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 240 :
			strcpy(p->name,"JAM FUNK");
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800a002:	499a      	ldr	r1, [pc, #616]	; (800a26c <problem_fetch+0x8c08>)
 800a004:	461a      	mov	r2, r3
 800a006:	460b      	mov	r3, r1
 800a008:	cb03      	ldmia	r3!, {r0, r1}
 800a00a:	6010      	str	r0, [r2, #0]
 800a00c:	6051      	str	r1, [r2, #4]
 800a00e:	781b      	ldrb	r3, [r3, #0]
 800a010:	7213      	strb	r3, [r2, #8]
			strcpy(p->grade,"8A");
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800a018:	4a95      	ldr	r2, [pc, #596]	; (800a270 <problem_fetch+0x8c0c>)
 800a01a:	8811      	ldrh	r1, [r2, #0]
 800a01c:	7892      	ldrb	r2, [r2, #2]
 800a01e:	8019      	strh	r1, [r3, #0]
 800a020:	709a      	strb	r2, [r3, #2]
			p->moveSize = 8;
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	2208      	movs	r2, #8
 800a026:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"B,G,H,B,C,D,B,D");
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	33a4      	adds	r3, #164	; 0xa4
 800a02c:	4a91      	ldr	r2, [pc, #580]	; (800a274 <problem_fetch+0x8c10>)
 800a02e:	461c      	mov	r4, r3
 800a030:	4615      	mov	r5, r2
 800a032:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a034:	6020      	str	r0, [r4, #0]
 800a036:	6061      	str	r1, [r4, #4]
 800a038:	60a2      	str	r2, [r4, #8]
 800a03a:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"10,10,13,12,16,18,6,7");
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	3304      	adds	r3, #4
 800a040:	4a8d      	ldr	r2, [pc, #564]	; (800a278 <problem_fetch+0x8c14>)
 800a042:	461d      	mov	r5, r3
 800a044:	4614      	mov	r4, r2
 800a046:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a048:	6028      	str	r0, [r5, #0]
 800a04a:	6069      	str	r1, [r5, #4]
 800a04c:	60aa      	str	r2, [r5, #8]
 800a04e:	60eb      	str	r3, [r5, #12]
 800a050:	6820      	ldr	r0, [r4, #0]
 800a052:	6128      	str	r0, [r5, #16]
 800a054:	88a3      	ldrh	r3, [r4, #4]
 800a056:	82ab      	strh	r3, [r5, #20]
			strcpy(p->startFinish,"d,d,d,d,d,e,s,d");
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800a05e:	4a87      	ldr	r2, [pc, #540]	; (800a27c <problem_fetch+0x8c18>)
 800a060:	461c      	mov	r4, r3
 800a062:	4615      	mov	r5, r2
 800a064:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a066:	6020      	str	r0, [r4, #0]
 800a068:	6061      	str	r1, [r4, #4]
 800a06a:	60a2      	str	r2, [r4, #8]
 800a06c:	60e3      	str	r3, [r4, #12]
			break;
 800a06e:	f012 ba29 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 241 :
			strcpy(p->name,"PROBLEM#148");
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800a078:	4a81      	ldr	r2, [pc, #516]	; (800a280 <problem_fetch+0x8c1c>)
 800a07a:	461c      	mov	r4, r3
 800a07c:	4613      	mov	r3, r2
 800a07e:	cb07      	ldmia	r3!, {r0, r1, r2}
 800a080:	6020      	str	r0, [r4, #0]
 800a082:	6061      	str	r1, [r4, #4]
 800a084:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade,"6B+");
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800a08c:	4a7d      	ldr	r2, [pc, #500]	; (800a284 <problem_fetch+0x8c20>)
 800a08e:	6810      	ldr	r0, [r2, #0]
 800a090:	6018      	str	r0, [r3, #0]
			p->moveSize = 10;
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	220a      	movs	r2, #10
 800a096:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"H,I,E,F,E,I,D,E,B,A");
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	33a4      	adds	r3, #164	; 0xa4
 800a09c:	4a7a      	ldr	r2, [pc, #488]	; (800a288 <problem_fetch+0x8c24>)
 800a09e:	461d      	mov	r5, r3
 800a0a0:	4614      	mov	r4, r2
 800a0a2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a0a4:	6028      	str	r0, [r5, #0]
 800a0a6:	6069      	str	r1, [r5, #4]
 800a0a8:	60aa      	str	r2, [r5, #8]
 800a0aa:	60eb      	str	r3, [r5, #12]
 800a0ac:	6820      	ldr	r0, [r4, #0]
 800a0ae:	6128      	str	r0, [r5, #16]
			strcpy(p->moveNumbers,"5,7,8,11,12,14,15,16,15,18");
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	3304      	adds	r3, #4
 800a0b4:	4a75      	ldr	r2, [pc, #468]	; (800a28c <problem_fetch+0x8c28>)
 800a0b6:	461d      	mov	r5, r3
 800a0b8:	4614      	mov	r4, r2
 800a0ba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a0bc:	6028      	str	r0, [r5, #0]
 800a0be:	6069      	str	r1, [r5, #4]
 800a0c0:	60aa      	str	r2, [r5, #8]
 800a0c2:	60eb      	str	r3, [r5, #12]
 800a0c4:	cc03      	ldmia	r4!, {r0, r1}
 800a0c6:	6128      	str	r0, [r5, #16]
 800a0c8:	6169      	str	r1, [r5, #20]
 800a0ca:	8823      	ldrh	r3, [r4, #0]
 800a0cc:	78a2      	ldrb	r2, [r4, #2]
 800a0ce:	832b      	strh	r3, [r5, #24]
 800a0d0:	4613      	mov	r3, r2
 800a0d2:	76ab      	strb	r3, [r5, #26]
			strcpy(p->startFinish,"s,d,d,d,d,d,d,d,d,e");
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800a0da:	4a6d      	ldr	r2, [pc, #436]	; (800a290 <problem_fetch+0x8c2c>)
 800a0dc:	461d      	mov	r5, r3
 800a0de:	4614      	mov	r4, r2
 800a0e0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a0e2:	6028      	str	r0, [r5, #0]
 800a0e4:	6069      	str	r1, [r5, #4]
 800a0e6:	60aa      	str	r2, [r5, #8]
 800a0e8:	60eb      	str	r3, [r5, #12]
 800a0ea:	6820      	ldr	r0, [r4, #0]
 800a0ec:	6128      	str	r0, [r5, #16]
			break;
 800a0ee:	f012 b9e9 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 242 :
			strcpy(p->name,"HOONGA");
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800a0f8:	4a66      	ldr	r2, [pc, #408]	; (800a294 <problem_fetch+0x8c30>)
 800a0fa:	6810      	ldr	r0, [r2, #0]
 800a0fc:	6018      	str	r0, [r3, #0]
 800a0fe:	8891      	ldrh	r1, [r2, #4]
 800a100:	7992      	ldrb	r2, [r2, #6]
 800a102:	8099      	strh	r1, [r3, #4]
 800a104:	719a      	strb	r2, [r3, #6]
			strcpy(p->grade,"7C");
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800a10c:	4a53      	ldr	r2, [pc, #332]	; (800a25c <problem_fetch+0x8bf8>)
 800a10e:	8811      	ldrh	r1, [r2, #0]
 800a110:	7892      	ldrb	r2, [r2, #2]
 800a112:	8019      	strh	r1, [r3, #0]
 800a114:	709a      	strb	r2, [r3, #2]
			p->moveSize = 9;
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	2209      	movs	r2, #9
 800a11a:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"B,D,B,C,D,H,G,H,I");
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	33a4      	adds	r3, #164	; 0xa4
 800a120:	4a5d      	ldr	r2, [pc, #372]	; (800a298 <problem_fetch+0x8c34>)
 800a122:	461d      	mov	r5, r3
 800a124:	4614      	mov	r4, r2
 800a126:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a128:	6028      	str	r0, [r5, #0]
 800a12a:	6069      	str	r1, [r5, #4]
 800a12c:	60aa      	str	r2, [r5, #8]
 800a12e:	60eb      	str	r3, [r5, #12]
 800a130:	8823      	ldrh	r3, [r4, #0]
 800a132:	822b      	strh	r3, [r5, #16]
			strcpy(p->moveNumbers,"6,7,10,5,11,13,14,16,18");
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	3304      	adds	r3, #4
 800a138:	4a58      	ldr	r2, [pc, #352]	; (800a29c <problem_fetch+0x8c38>)
 800a13a:	461d      	mov	r5, r3
 800a13c:	4614      	mov	r4, r2
 800a13e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a140:	6028      	str	r0, [r5, #0]
 800a142:	6069      	str	r1, [r5, #4]
 800a144:	60aa      	str	r2, [r5, #8]
 800a146:	60eb      	str	r3, [r5, #12]
 800a148:	cc03      	ldmia	r4!, {r0, r1}
 800a14a:	6128      	str	r0, [r5, #16]
 800a14c:	6169      	str	r1, [r5, #20]
			strcpy(p->startFinish,"s,d,d,s,d,d,d,d,e");
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800a154:	4a52      	ldr	r2, [pc, #328]	; (800a2a0 <problem_fetch+0x8c3c>)
 800a156:	461d      	mov	r5, r3
 800a158:	4614      	mov	r4, r2
 800a15a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a15c:	6028      	str	r0, [r5, #0]
 800a15e:	6069      	str	r1, [r5, #4]
 800a160:	60aa      	str	r2, [r5, #8]
 800a162:	60eb      	str	r3, [r5, #12]
 800a164:	8823      	ldrh	r3, [r4, #0]
 800a166:	822b      	strh	r3, [r5, #16]
			break;
 800a168:	f012 b9ac 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 243 :
			strcpy(p->name,"TAR");
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800a172:	4a4c      	ldr	r2, [pc, #304]	; (800a2a4 <problem_fetch+0x8c40>)
 800a174:	6810      	ldr	r0, [r2, #0]
 800a176:	6018      	str	r0, [r3, #0]
			strcpy(p->grade,"7A+");
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800a17e:	4a4a      	ldr	r2, [pc, #296]	; (800a2a8 <problem_fetch+0x8c44>)
 800a180:	6810      	ldr	r0, [r2, #0]
 800a182:	6018      	str	r0, [r3, #0]
			p->moveSize = 9;
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	2209      	movs	r2, #9
 800a188:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,C,D,B,D,I,H,E,F");
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	33a4      	adds	r3, #164	; 0xa4
 800a18e:	4a47      	ldr	r2, [pc, #284]	; (800a2ac <problem_fetch+0x8c48>)
 800a190:	461d      	mov	r5, r3
 800a192:	4614      	mov	r4, r2
 800a194:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a196:	6028      	str	r0, [r5, #0]
 800a198:	6069      	str	r1, [r5, #4]
 800a19a:	60aa      	str	r2, [r5, #8]
 800a19c:	60eb      	str	r3, [r5, #12]
 800a19e:	8823      	ldrh	r3, [r4, #0]
 800a1a0:	822b      	strh	r3, [r5, #16]
			strcpy(p->moveNumbers,"4,13,15,15,18,7,8,9,11");
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	3304      	adds	r3, #4
 800a1a6:	4a42      	ldr	r2, [pc, #264]	; (800a2b0 <problem_fetch+0x8c4c>)
 800a1a8:	461c      	mov	r4, r3
 800a1aa:	4615      	mov	r5, r2
 800a1ac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a1ae:	6020      	str	r0, [r4, #0]
 800a1b0:	6061      	str	r1, [r4, #4]
 800a1b2:	60a2      	str	r2, [r4, #8]
 800a1b4:	60e3      	str	r3, [r4, #12]
 800a1b6:	6828      	ldr	r0, [r5, #0]
 800a1b8:	6120      	str	r0, [r4, #16]
 800a1ba:	88ab      	ldrh	r3, [r5, #4]
 800a1bc:	79aa      	ldrb	r2, [r5, #6]
 800a1be:	82a3      	strh	r3, [r4, #20]
 800a1c0:	4613      	mov	r3, r2
 800a1c2:	75a3      	strb	r3, [r4, #22]
			strcpy(p->startFinish,"s,d,d,d,e,d,d,d,d");
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800a1ca:	4a3a      	ldr	r2, [pc, #232]	; (800a2b4 <problem_fetch+0x8c50>)
 800a1cc:	461d      	mov	r5, r3
 800a1ce:	4614      	mov	r4, r2
 800a1d0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a1d2:	6028      	str	r0, [r5, #0]
 800a1d4:	6069      	str	r1, [r5, #4]
 800a1d6:	60aa      	str	r2, [r5, #8]
 800a1d8:	60eb      	str	r3, [r5, #12]
 800a1da:	8823      	ldrh	r3, [r4, #0]
 800a1dc:	822b      	strh	r3, [r5, #16]
			break;
 800a1de:	f012 b971 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 244 :
			strcpy(p->name,"FIRST SNOW");
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800a1e8:	4933      	ldr	r1, [pc, #204]	; (800a2b8 <problem_fetch+0x8c54>)
 800a1ea:	461a      	mov	r2, r3
 800a1ec:	460b      	mov	r3, r1
 800a1ee:	cb03      	ldmia	r3!, {r0, r1}
 800a1f0:	6010      	str	r0, [r2, #0]
 800a1f2:	6051      	str	r1, [r2, #4]
 800a1f4:	8819      	ldrh	r1, [r3, #0]
 800a1f6:	789b      	ldrb	r3, [r3, #2]
 800a1f8:	8111      	strh	r1, [r2, #8]
 800a1fa:	7293      	strb	r3, [r2, #10]
			strcpy(p->grade,"7A");
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800a202:	4a2e      	ldr	r2, [pc, #184]	; (800a2bc <problem_fetch+0x8c58>)
 800a204:	8811      	ldrh	r1, [r2, #0]
 800a206:	7892      	ldrb	r2, [r2, #2]
 800a208:	8019      	strh	r1, [r3, #0]
 800a20a:	709a      	strb	r2, [r3, #2]
			p->moveSize = 5;
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	2205      	movs	r2, #5
 800a210:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"B,B,B,B,D");
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	33a4      	adds	r3, #164	; 0xa4
 800a216:	492a      	ldr	r1, [pc, #168]	; (800a2c0 <problem_fetch+0x8c5c>)
 800a218:	461a      	mov	r2, r3
 800a21a:	460b      	mov	r3, r1
 800a21c:	cb03      	ldmia	r3!, {r0, r1}
 800a21e:	6010      	str	r0, [r2, #0]
 800a220:	6051      	str	r1, [r2, #4]
 800a222:	881b      	ldrh	r3, [r3, #0]
 800a224:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"6,10,12,15,18");
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	3304      	adds	r3, #4
 800a22a:	4a26      	ldr	r2, [pc, #152]	; (800a2c4 <problem_fetch+0x8c60>)
 800a22c:	461c      	mov	r4, r3
 800a22e:	4613      	mov	r3, r2
 800a230:	cb07      	ldmia	r3!, {r0, r1, r2}
 800a232:	6020      	str	r0, [r4, #0]
 800a234:	6061      	str	r1, [r4, #4]
 800a236:	60a2      	str	r2, [r4, #8]
 800a238:	881b      	ldrh	r3, [r3, #0]
 800a23a:	81a3      	strh	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,e");
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800a242:	4909      	ldr	r1, [pc, #36]	; (800a268 <problem_fetch+0x8c04>)
 800a244:	461a      	mov	r2, r3
 800a246:	460b      	mov	r3, r1
 800a248:	cb03      	ldmia	r3!, {r0, r1}
 800a24a:	6010      	str	r0, [r2, #0]
 800a24c:	6051      	str	r1, [r2, #4]
 800a24e:	881b      	ldrh	r3, [r3, #0]
 800a250:	8113      	strh	r3, [r2, #8]
			break;
 800a252:	f012 b937 	b.w	801c4c4 <problem_fetch+0x1ae60>
 800a256:	bf00      	nop
 800a258:	08026ba4 	.word	0x08026ba4
 800a25c:	08024358 	.word	0x08024358
 800a260:	08026bb8 	.word	0x08026bb8
 800a264:	08026bc4 	.word	0x08026bc4
 800a268:	08023ff0 	.word	0x08023ff0
 800a26c:	08026bd4 	.word	0x08026bd4
 800a270:	08025e88 	.word	0x08025e88
 800a274:	08026be0 	.word	0x08026be0
 800a278:	08026bf0 	.word	0x08026bf0
 800a27c:	08026c08 	.word	0x08026c08
 800a280:	08026c18 	.word	0x08026c18
 800a284:	08023b24 	.word	0x08023b24
 800a288:	08026c24 	.word	0x08026c24
 800a28c:	08026c38 	.word	0x08026c38
 800a290:	08024e7c 	.word	0x08024e7c
 800a294:	08026c54 	.word	0x08026c54
 800a298:	08026c5c 	.word	0x08026c5c
 800a29c:	08026c70 	.word	0x08026c70
 800a2a0:	08026c88 	.word	0x08026c88
 800a2a4:	08026c9c 	.word	0x08026c9c
 800a2a8:	08023cc4 	.word	0x08023cc4
 800a2ac:	08026ca0 	.word	0x08026ca0
 800a2b0:	08026cb4 	.word	0x08026cb4
 800a2b4:	08026ccc 	.word	0x08026ccc
 800a2b8:	08026ce0 	.word	0x08026ce0
 800a2bc:	08023ae4 	.word	0x08023ae4
 800a2c0:	08026cec 	.word	0x08026cec
 800a2c4:	08026cf8 	.word	0x08026cf8
		case 245 :
			strcpy(p->name,"WHAT IS YOUR PROBLEM???");
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800a2ce:	4aab      	ldr	r2, [pc, #684]	; (800a57c <problem_fetch+0x8f18>)
 800a2d0:	461d      	mov	r5, r3
 800a2d2:	4614      	mov	r4, r2
 800a2d4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a2d6:	6028      	str	r0, [r5, #0]
 800a2d8:	6069      	str	r1, [r5, #4]
 800a2da:	60aa      	str	r2, [r5, #8]
 800a2dc:	60eb      	str	r3, [r5, #12]
 800a2de:	cc03      	ldmia	r4!, {r0, r1}
 800a2e0:	6128      	str	r0, [r5, #16]
 800a2e2:	6169      	str	r1, [r5, #20]
			strcpy(p->grade,"6C");
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800a2ea:	4aa5      	ldr	r2, [pc, #660]	; (800a580 <problem_fetch+0x8f1c>)
 800a2ec:	8811      	ldrh	r1, [r2, #0]
 800a2ee:	7892      	ldrb	r2, [r2, #2]
 800a2f0:	8019      	strh	r1, [r3, #0]
 800a2f2:	709a      	strb	r2, [r3, #2]
			p->moveSize = 8;
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	2208      	movs	r2, #8
 800a2f8:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"C,G,E,D,F,I,F,I");
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	33a4      	adds	r3, #164	; 0xa4
 800a2fe:	4aa1      	ldr	r2, [pc, #644]	; (800a584 <problem_fetch+0x8f20>)
 800a300:	461c      	mov	r4, r3
 800a302:	4615      	mov	r5, r2
 800a304:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a306:	6020      	str	r0, [r4, #0]
 800a308:	6061      	str	r1, [r4, #4]
 800a30a:	60a2      	str	r2, [r4, #8]
 800a30c:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,6,8,11,11,14,13,18");
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	3304      	adds	r3, #4
 800a312:	4a9d      	ldr	r2, [pc, #628]	; (800a588 <problem_fetch+0x8f24>)
 800a314:	461d      	mov	r5, r3
 800a316:	4614      	mov	r4, r2
 800a318:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a31a:	6028      	str	r0, [r5, #0]
 800a31c:	6069      	str	r1, [r5, #4]
 800a31e:	60aa      	str	r2, [r5, #8]
 800a320:	60eb      	str	r3, [r5, #12]
 800a322:	6820      	ldr	r0, [r4, #0]
 800a324:	6128      	str	r0, [r5, #16]
 800a326:	7923      	ldrb	r3, [r4, #4]
 800a328:	752b      	strb	r3, [r5, #20]
			strcpy(p->startFinish,"d,s,d,d,d,d,d,e");
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800a330:	4a96      	ldr	r2, [pc, #600]	; (800a58c <problem_fetch+0x8f28>)
 800a332:	461c      	mov	r4, r3
 800a334:	4615      	mov	r5, r2
 800a336:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a338:	6020      	str	r0, [r4, #0]
 800a33a:	6061      	str	r1, [r4, #4]
 800a33c:	60a2      	str	r2, [r4, #8]
 800a33e:	60e3      	str	r3, [r4, #12]
			break;
 800a340:	f012 b8c0 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 246 :
			strcpy(p->name,"BLACK IS WHERE YOU AT");
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800a34a:	4a91      	ldr	r2, [pc, #580]	; (800a590 <problem_fetch+0x8f2c>)
 800a34c:	461d      	mov	r5, r3
 800a34e:	4614      	mov	r4, r2
 800a350:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a352:	6028      	str	r0, [r5, #0]
 800a354:	6069      	str	r1, [r5, #4]
 800a356:	60aa      	str	r2, [r5, #8]
 800a358:	60eb      	str	r3, [r5, #12]
 800a35a:	6820      	ldr	r0, [r4, #0]
 800a35c:	6128      	str	r0, [r5, #16]
 800a35e:	88a3      	ldrh	r3, [r4, #4]
 800a360:	82ab      	strh	r3, [r5, #20]
			strcpy(p->grade,"7A");
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800a368:	4a8a      	ldr	r2, [pc, #552]	; (800a594 <problem_fetch+0x8f30>)
 800a36a:	8811      	ldrh	r1, [r2, #0]
 800a36c:	7892      	ldrb	r2, [r2, #2]
 800a36e:	8019      	strh	r1, [r3, #0]
 800a370:	709a      	strb	r2, [r3, #2]
			p->moveSize = 8;
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	2208      	movs	r2, #8
 800a376:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"E,G,E,E,B,D,B,E");
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	33a4      	adds	r3, #164	; 0xa4
 800a37c:	4a86      	ldr	r2, [pc, #536]	; (800a598 <problem_fetch+0x8f34>)
 800a37e:	461c      	mov	r4, r3
 800a380:	4615      	mov	r5, r2
 800a382:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a384:	6020      	str	r0, [r4, #0]
 800a386:	6061      	str	r1, [r4, #4]
 800a388:	60a2      	str	r2, [r4, #8]
 800a38a:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"6,4,9,12,15,18,12,16");
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	3304      	adds	r3, #4
 800a390:	4a82      	ldr	r2, [pc, #520]	; (800a59c <problem_fetch+0x8f38>)
 800a392:	461d      	mov	r5, r3
 800a394:	4614      	mov	r4, r2
 800a396:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a398:	6028      	str	r0, [r5, #0]
 800a39a:	6069      	str	r1, [r5, #4]
 800a39c:	60aa      	str	r2, [r5, #8]
 800a39e:	60eb      	str	r3, [r5, #12]
 800a3a0:	6820      	ldr	r0, [r4, #0]
 800a3a2:	6128      	str	r0, [r5, #16]
 800a3a4:	7923      	ldrb	r3, [r4, #4]
 800a3a6:	752b      	strb	r3, [r5, #20]
			strcpy(p->startFinish,"s,s,d,d,d,e,d,d");
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800a3ae:	4a7c      	ldr	r2, [pc, #496]	; (800a5a0 <problem_fetch+0x8f3c>)
 800a3b0:	461c      	mov	r4, r3
 800a3b2:	4615      	mov	r5, r2
 800a3b4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a3b6:	6020      	str	r0, [r4, #0]
 800a3b8:	6061      	str	r1, [r4, #4]
 800a3ba:	60a2      	str	r2, [r4, #8]
 800a3bc:	60e3      	str	r3, [r4, #12]
			break;
 800a3be:	f012 b881 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 247 :
			strcpy(p->name,"LORD VADER");
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800a3c8:	4976      	ldr	r1, [pc, #472]	; (800a5a4 <problem_fetch+0x8f40>)
 800a3ca:	461a      	mov	r2, r3
 800a3cc:	460b      	mov	r3, r1
 800a3ce:	cb03      	ldmia	r3!, {r0, r1}
 800a3d0:	6010      	str	r0, [r2, #0]
 800a3d2:	6051      	str	r1, [r2, #4]
 800a3d4:	8819      	ldrh	r1, [r3, #0]
 800a3d6:	789b      	ldrb	r3, [r3, #2]
 800a3d8:	8111      	strh	r1, [r2, #8]
 800a3da:	7293      	strb	r3, [r2, #10]
			strcpy(p->grade,"6C+");
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800a3e2:	4a71      	ldr	r2, [pc, #452]	; (800a5a8 <problem_fetch+0x8f44>)
 800a3e4:	6810      	ldr	r0, [r2, #0]
 800a3e6:	6018      	str	r0, [r3, #0]
			p->moveSize = 8;
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	2208      	movs	r2, #8
 800a3ec:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"C,C,H,F,E,G,D,D");
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	33a4      	adds	r3, #164	; 0xa4
 800a3f2:	4a6e      	ldr	r2, [pc, #440]	; (800a5ac <problem_fetch+0x8f48>)
 800a3f4:	461c      	mov	r4, r3
 800a3f6:	4615      	mov	r5, r2
 800a3f8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a3fa:	6020      	str	r0, [r4, #0]
 800a3fc:	6061      	str	r1, [r4, #4]
 800a3fe:	60a2      	str	r2, [r4, #8]
 800a400:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,8,10,13,6,14,15,18");
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	3304      	adds	r3, #4
 800a406:	4a6a      	ldr	r2, [pc, #424]	; (800a5b0 <problem_fetch+0x8f4c>)
 800a408:	461d      	mov	r5, r3
 800a40a:	4614      	mov	r4, r2
 800a40c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a40e:	6028      	str	r0, [r5, #0]
 800a410:	6069      	str	r1, [r5, #4]
 800a412:	60aa      	str	r2, [r5, #8]
 800a414:	60eb      	str	r3, [r5, #12]
 800a416:	6820      	ldr	r0, [r4, #0]
 800a418:	6128      	str	r0, [r5, #16]
 800a41a:	7923      	ldrb	r3, [r4, #4]
 800a41c:	752b      	strb	r3, [r5, #20]
			strcpy(p->startFinish,"s,d,d,d,s,d,d,e");
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800a424:	4a63      	ldr	r2, [pc, #396]	; (800a5b4 <problem_fetch+0x8f50>)
 800a426:	461c      	mov	r4, r3
 800a428:	4615      	mov	r5, r2
 800a42a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a42c:	6020      	str	r0, [r4, #0]
 800a42e:	6061      	str	r1, [r4, #4]
 800a430:	60a2      	str	r2, [r4, #8]
 800a432:	60e3      	str	r3, [r4, #12]
			break;
 800a434:	f012 b846 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 248 :
			strcpy(p->name,"WOOO");
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800a43e:	4a5e      	ldr	r2, [pc, #376]	; (800a5b8 <problem_fetch+0x8f54>)
 800a440:	6810      	ldr	r0, [r2, #0]
 800a442:	6018      	str	r0, [r3, #0]
 800a444:	7912      	ldrb	r2, [r2, #4]
 800a446:	711a      	strb	r2, [r3, #4]
			strcpy(p->grade,"6B+");
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800a44e:	4a5b      	ldr	r2, [pc, #364]	; (800a5bc <problem_fetch+0x8f58>)
 800a450:	6810      	ldr	r0, [r2, #0]
 800a452:	6018      	str	r0, [r3, #0]
			p->moveSize = 8;
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	2208      	movs	r2, #8
 800a458:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,J,H,G,F,H,G,I");
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	33a4      	adds	r3, #164	; 0xa4
 800a45e:	4a58      	ldr	r2, [pc, #352]	; (800a5c0 <problem_fetch+0x8f5c>)
 800a460:	461c      	mov	r4, r3
 800a462:	4615      	mov	r5, r2
 800a464:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a466:	6020      	str	r0, [r4, #0]
 800a468:	6061      	str	r1, [r4, #4]
 800a46a:	60a2      	str	r2, [r4, #8]
 800a46c:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,5,8,9,13,16,17,18");
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	3304      	adds	r3, #4
 800a472:	4a54      	ldr	r2, [pc, #336]	; (800a5c4 <problem_fetch+0x8f60>)
 800a474:	461d      	mov	r5, r3
 800a476:	4614      	mov	r4, r2
 800a478:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a47a:	6028      	str	r0, [r5, #0]
 800a47c:	6069      	str	r1, [r5, #4]
 800a47e:	60aa      	str	r2, [r5, #8]
 800a480:	60eb      	str	r3, [r5, #12]
 800a482:	6820      	ldr	r0, [r4, #0]
 800a484:	6128      	str	r0, [r5, #16]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,e");
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800a48c:	4a4e      	ldr	r2, [pc, #312]	; (800a5c8 <problem_fetch+0x8f64>)
 800a48e:	461c      	mov	r4, r3
 800a490:	4615      	mov	r5, r2
 800a492:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a494:	6020      	str	r0, [r4, #0]
 800a496:	6061      	str	r1, [r4, #4]
 800a498:	60a2      	str	r2, [r4, #8]
 800a49a:	60e3      	str	r3, [r4, #12]
			break;
 800a49c:	f012 b812 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 249 :
			strcpy(p->name,"YAYYY");
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800a4a6:	4a49      	ldr	r2, [pc, #292]	; (800a5cc <problem_fetch+0x8f68>)
 800a4a8:	6810      	ldr	r0, [r2, #0]
 800a4aa:	6018      	str	r0, [r3, #0]
 800a4ac:	8892      	ldrh	r2, [r2, #4]
 800a4ae:	809a      	strh	r2, [r3, #4]
			strcpy(p->grade,"6B+");
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800a4b6:	4a41      	ldr	r2, [pc, #260]	; (800a5bc <problem_fetch+0x8f58>)
 800a4b8:	6810      	ldr	r0, [r2, #0]
 800a4ba:	6018      	str	r0, [r3, #0]
			p->moveSize = 8;
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	2208      	movs	r2, #8
 800a4c0:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,J,H,G,H,G,H,I");
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	33a4      	adds	r3, #164	; 0xa4
 800a4c6:	4a42      	ldr	r2, [pc, #264]	; (800a5d0 <problem_fetch+0x8f6c>)
 800a4c8:	461c      	mov	r4, r3
 800a4ca:	4615      	mov	r5, r2
 800a4cc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a4ce:	6020      	str	r0, [r4, #0]
 800a4d0:	6061      	str	r1, [r4, #4]
 800a4d2:	60a2      	str	r2, [r4, #8]
 800a4d4:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,5,8,9,12,15,16,18");
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	3304      	adds	r3, #4
 800a4da:	4a3e      	ldr	r2, [pc, #248]	; (800a5d4 <problem_fetch+0x8f70>)
 800a4dc:	461d      	mov	r5, r3
 800a4de:	4614      	mov	r4, r2
 800a4e0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a4e2:	6028      	str	r0, [r5, #0]
 800a4e4:	6069      	str	r1, [r5, #4]
 800a4e6:	60aa      	str	r2, [r5, #8]
 800a4e8:	60eb      	str	r3, [r5, #12]
 800a4ea:	6820      	ldr	r0, [r4, #0]
 800a4ec:	6128      	str	r0, [r5, #16]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,e");
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800a4f4:	4a34      	ldr	r2, [pc, #208]	; (800a5c8 <problem_fetch+0x8f64>)
 800a4f6:	461c      	mov	r4, r3
 800a4f8:	4615      	mov	r5, r2
 800a4fa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a4fc:	6020      	str	r0, [r4, #0]
 800a4fe:	6061      	str	r1, [r4, #4]
 800a500:	60a2      	str	r2, [r4, #8]
 800a502:	60e3      	str	r3, [r4, #12]
			break;
 800a504:	f011 bfde 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 250 :
			strcpy(p->name,"BEST PROBLEM 567");
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800a50e:	4a32      	ldr	r2, [pc, #200]	; (800a5d8 <problem_fetch+0x8f74>)
 800a510:	461d      	mov	r5, r3
 800a512:	4614      	mov	r4, r2
 800a514:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a516:	6028      	str	r0, [r5, #0]
 800a518:	6069      	str	r1, [r5, #4]
 800a51a:	60aa      	str	r2, [r5, #8]
 800a51c:	60eb      	str	r3, [r5, #12]
 800a51e:	7823      	ldrb	r3, [r4, #0]
 800a520:	742b      	strb	r3, [r5, #16]
			strcpy(p->grade,"6C");
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800a528:	4a15      	ldr	r2, [pc, #84]	; (800a580 <problem_fetch+0x8f1c>)
 800a52a:	8811      	ldrh	r1, [r2, #0]
 800a52c:	7892      	ldrb	r2, [r2, #2]
 800a52e:	8019      	strh	r1, [r3, #0]
 800a530:	709a      	strb	r2, [r3, #2]
			p->moveSize = 6;
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	2206      	movs	r2, #6
 800a536:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"E,E,H,E,A,G");
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	33a4      	adds	r3, #164	; 0xa4
 800a53c:	4a27      	ldr	r2, [pc, #156]	; (800a5dc <problem_fetch+0x8f78>)
 800a53e:	461c      	mov	r4, r3
 800a540:	4613      	mov	r3, r2
 800a542:	cb07      	ldmia	r3!, {r0, r1, r2}
 800a544:	6020      	str	r0, [r4, #0]
 800a546:	6061      	str	r1, [r4, #4]
 800a548:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"6,8,13,14,18,4");
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	3304      	adds	r3, #4
 800a54e:	4a24      	ldr	r2, [pc, #144]	; (800a5e0 <problem_fetch+0x8f7c>)
 800a550:	461c      	mov	r4, r3
 800a552:	4613      	mov	r3, r2
 800a554:	cb07      	ldmia	r3!, {r0, r1, r2}
 800a556:	6020      	str	r0, [r4, #0]
 800a558:	6061      	str	r1, [r4, #4]
 800a55a:	60a2      	str	r2, [r4, #8]
 800a55c:	881a      	ldrh	r2, [r3, #0]
 800a55e:	789b      	ldrb	r3, [r3, #2]
 800a560:	81a2      	strh	r2, [r4, #12]
 800a562:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish,"d,d,d,d,e,s");
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800a56a:	4a1e      	ldr	r2, [pc, #120]	; (800a5e4 <problem_fetch+0x8f80>)
 800a56c:	461c      	mov	r4, r3
 800a56e:	4613      	mov	r3, r2
 800a570:	cb07      	ldmia	r3!, {r0, r1, r2}
 800a572:	6020      	str	r0, [r4, #0]
 800a574:	6061      	str	r1, [r4, #4]
 800a576:	60a2      	str	r2, [r4, #8]
			break;
 800a578:	f011 bfa4 	b.w	801c4c4 <problem_fetch+0x1ae60>
 800a57c:	08026d08 	.word	0x08026d08
 800a580:	08023bf0 	.word	0x08023bf0
 800a584:	08026d20 	.word	0x08026d20
 800a588:	08026d30 	.word	0x08026d30
 800a58c:	08026928 	.word	0x08026928
 800a590:	08026d48 	.word	0x08026d48
 800a594:	08023ae4 	.word	0x08023ae4
 800a598:	08026d60 	.word	0x08026d60
 800a59c:	08026d70 	.word	0x08026d70
 800a5a0:	08026d88 	.word	0x08026d88
 800a5a4:	08026d98 	.word	0x08026d98
 800a5a8:	08023bbc 	.word	0x08023bbc
 800a5ac:	08026da4 	.word	0x08026da4
 800a5b0:	08026db4 	.word	0x08026db4
 800a5b4:	08026dcc 	.word	0x08026dcc
 800a5b8:	08026ddc 	.word	0x08026ddc
 800a5bc:	08023b24 	.word	0x08023b24
 800a5c0:	08026de4 	.word	0x08026de4
 800a5c4:	08026df4 	.word	0x08026df4
 800a5c8:	08023c48 	.word	0x08023c48
 800a5cc:	08026e08 	.word	0x08026e08
 800a5d0:	08026e10 	.word	0x08026e10
 800a5d4:	08026e20 	.word	0x08026e20
 800a5d8:	08026e34 	.word	0x08026e34
 800a5dc:	08026e48 	.word	0x08026e48
 800a5e0:	08026e54 	.word	0x08026e54
 800a5e4:	08026e64 	.word	0x08026e64
		case 251 :
			strcpy(p->name,"WORLD CUP");
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800a5ee:	49c2      	ldr	r1, [pc, #776]	; (800a8f8 <problem_fetch+0x9294>)
 800a5f0:	461a      	mov	r2, r3
 800a5f2:	460b      	mov	r3, r1
 800a5f4:	cb03      	ldmia	r3!, {r0, r1}
 800a5f6:	6010      	str	r0, [r2, #0]
 800a5f8:	6051      	str	r1, [r2, #4]
 800a5fa:	881b      	ldrh	r3, [r3, #0]
 800a5fc:	8113      	strh	r3, [r2, #8]
			strcpy(p->grade,"6B+");
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800a604:	4abd      	ldr	r2, [pc, #756]	; (800a8fc <problem_fetch+0x9298>)
 800a606:	6810      	ldr	r0, [r2, #0]
 800a608:	6018      	str	r0, [r3, #0]
			p->moveSize = 9;
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	2209      	movs	r2, #9
 800a60e:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,G,H,H,I,J,G,J,I");
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	33a4      	adds	r3, #164	; 0xa4
 800a614:	4aba      	ldr	r2, [pc, #744]	; (800a900 <problem_fetch+0x929c>)
 800a616:	461d      	mov	r5, r3
 800a618:	4614      	mov	r4, r2
 800a61a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a61c:	6028      	str	r0, [r5, #0]
 800a61e:	6069      	str	r1, [r5, #4]
 800a620:	60aa      	str	r2, [r5, #8]
 800a622:	60eb      	str	r3, [r5, #12]
 800a624:	8823      	ldrh	r3, [r4, #0]
 800a626:	822b      	strh	r3, [r5, #16]
			strcpy(p->moveNumbers,"5,6,5,10,10,13,15,16,18");
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	3304      	adds	r3, #4
 800a62c:	4ab5      	ldr	r2, [pc, #724]	; (800a904 <problem_fetch+0x92a0>)
 800a62e:	461d      	mov	r5, r3
 800a630:	4614      	mov	r4, r2
 800a632:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a634:	6028      	str	r0, [r5, #0]
 800a636:	6069      	str	r1, [r5, #4]
 800a638:	60aa      	str	r2, [r5, #8]
 800a63a:	60eb      	str	r3, [r5, #12]
 800a63c:	cc03      	ldmia	r4!, {r0, r1}
 800a63e:	6128      	str	r0, [r5, #16]
 800a640:	6169      	str	r1, [r5, #20]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,d,e");
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800a648:	4aaf      	ldr	r2, [pc, #700]	; (800a908 <problem_fetch+0x92a4>)
 800a64a:	461d      	mov	r5, r3
 800a64c:	4614      	mov	r4, r2
 800a64e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a650:	6028      	str	r0, [r5, #0]
 800a652:	6069      	str	r1, [r5, #4]
 800a654:	60aa      	str	r2, [r5, #8]
 800a656:	60eb      	str	r3, [r5, #12]
 800a658:	8823      	ldrh	r3, [r4, #0]
 800a65a:	822b      	strh	r3, [r5, #16]
			break;
 800a65c:	f011 bf32 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 252 :
			strcpy(p->name,"ALONE IN THE DARK");
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800a666:	4aa9      	ldr	r2, [pc, #676]	; (800a90c <problem_fetch+0x92a8>)
 800a668:	461d      	mov	r5, r3
 800a66a:	4614      	mov	r4, r2
 800a66c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a66e:	6028      	str	r0, [r5, #0]
 800a670:	6069      	str	r1, [r5, #4]
 800a672:	60aa      	str	r2, [r5, #8]
 800a674:	60eb      	str	r3, [r5, #12]
 800a676:	8823      	ldrh	r3, [r4, #0]
 800a678:	822b      	strh	r3, [r5, #16]
			strcpy(p->grade,"7A");
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800a680:	4aa3      	ldr	r2, [pc, #652]	; (800a910 <problem_fetch+0x92ac>)
 800a682:	8811      	ldrh	r1, [r2, #0]
 800a684:	7892      	ldrb	r2, [r2, #2]
 800a686:	8019      	strh	r1, [r3, #0]
 800a688:	709a      	strb	r2, [r3, #2]
			p->moveSize = 6;
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	2206      	movs	r2, #6
 800a68e:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,E,I,G,I,I");
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	33a4      	adds	r3, #164	; 0xa4
 800a694:	4a9f      	ldr	r2, [pc, #636]	; (800a914 <problem_fetch+0x92b0>)
 800a696:	461c      	mov	r4, r3
 800a698:	4613      	mov	r3, r2
 800a69a:	cb07      	ldmia	r3!, {r0, r1, r2}
 800a69c:	6020      	str	r0, [r4, #0]
 800a69e:	6061      	str	r1, [r4, #4]
 800a6a0:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,8,10,14,14,18");
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	3304      	adds	r3, #4
 800a6a6:	4a9c      	ldr	r2, [pc, #624]	; (800a918 <problem_fetch+0x92b4>)
 800a6a8:	461c      	mov	r4, r3
 800a6aa:	4615      	mov	r5, r2
 800a6ac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a6ae:	6020      	str	r0, [r4, #0]
 800a6b0:	6061      	str	r1, [r4, #4]
 800a6b2:	60a2      	str	r2, [r4, #8]
 800a6b4:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800a6bc:	4a97      	ldr	r2, [pc, #604]	; (800a91c <problem_fetch+0x92b8>)
 800a6be:	461c      	mov	r4, r3
 800a6c0:	4613      	mov	r3, r2
 800a6c2:	cb07      	ldmia	r3!, {r0, r1, r2}
 800a6c4:	6020      	str	r0, [r4, #0]
 800a6c6:	6061      	str	r1, [r4, #4]
 800a6c8:	60a2      	str	r2, [r4, #8]
			break;
 800a6ca:	f011 befb 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 253 :
			strcpy(p->name,"JUDEMANDUD");
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800a6d4:	4992      	ldr	r1, [pc, #584]	; (800a920 <problem_fetch+0x92bc>)
 800a6d6:	461a      	mov	r2, r3
 800a6d8:	460b      	mov	r3, r1
 800a6da:	cb03      	ldmia	r3!, {r0, r1}
 800a6dc:	6010      	str	r0, [r2, #0]
 800a6de:	6051      	str	r1, [r2, #4]
 800a6e0:	8819      	ldrh	r1, [r3, #0]
 800a6e2:	789b      	ldrb	r3, [r3, #2]
 800a6e4:	8111      	strh	r1, [r2, #8]
 800a6e6:	7293      	strb	r3, [r2, #10]
			strcpy(p->grade,"7A");
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800a6ee:	4a88      	ldr	r2, [pc, #544]	; (800a910 <problem_fetch+0x92ac>)
 800a6f0:	8811      	ldrh	r1, [r2, #0]
 800a6f2:	7892      	ldrb	r2, [r2, #2]
 800a6f4:	8019      	strh	r1, [r3, #0]
 800a6f6:	709a      	strb	r2, [r3, #2]
			p->moveSize = 7;
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	2207      	movs	r2, #7
 800a6fc:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"H,E,E,A,B,B,A");
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	33a4      	adds	r3, #164	; 0xa4
 800a702:	4a88      	ldr	r2, [pc, #544]	; (800a924 <problem_fetch+0x92c0>)
 800a704:	461c      	mov	r4, r3
 800a706:	4613      	mov	r3, r2
 800a708:	cb07      	ldmia	r3!, {r0, r1, r2}
 800a70a:	6020      	str	r0, [r4, #0]
 800a70c:	6061      	str	r1, [r4, #4]
 800a70e:	60a2      	str	r2, [r4, #8]
 800a710:	881b      	ldrh	r3, [r3, #0]
 800a712:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,9,6,9,12,15,18");
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	3304      	adds	r3, #4
 800a718:	4a83      	ldr	r2, [pc, #524]	; (800a928 <problem_fetch+0x92c4>)
 800a71a:	461d      	mov	r5, r3
 800a71c:	4614      	mov	r4, r2
 800a71e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a720:	6028      	str	r0, [r5, #0]
 800a722:	6069      	str	r1, [r5, #4]
 800a724:	60aa      	str	r2, [r5, #8]
 800a726:	60eb      	str	r3, [r5, #12]
 800a728:	7823      	ldrb	r3, [r4, #0]
 800a72a:	742b      	strb	r3, [r5, #16]
			strcpy(p->startFinish,"s,d,s,d,d,d,e");
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800a732:	4a7e      	ldr	r2, [pc, #504]	; (800a92c <problem_fetch+0x92c8>)
 800a734:	461c      	mov	r4, r3
 800a736:	4613      	mov	r3, r2
 800a738:	cb07      	ldmia	r3!, {r0, r1, r2}
 800a73a:	6020      	str	r0, [r4, #0]
 800a73c:	6061      	str	r1, [r4, #4]
 800a73e:	60a2      	str	r2, [r4, #8]
 800a740:	881b      	ldrh	r3, [r3, #0]
 800a742:	81a3      	strh	r3, [r4, #12]
			break;
 800a744:	f011 bebe 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 254 :
			strcpy(p->name,"BLACK MARINO");
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800a74e:	4a78      	ldr	r2, [pc, #480]	; (800a930 <problem_fetch+0x92cc>)
 800a750:	461c      	mov	r4, r3
 800a752:	4613      	mov	r3, r2
 800a754:	cb07      	ldmia	r3!, {r0, r1, r2}
 800a756:	6020      	str	r0, [r4, #0]
 800a758:	6061      	str	r1, [r4, #4]
 800a75a:	60a2      	str	r2, [r4, #8]
 800a75c:	781b      	ldrb	r3, [r3, #0]
 800a75e:	7323      	strb	r3, [r4, #12]
			strcpy(p->grade,"6C+");
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800a766:	4a73      	ldr	r2, [pc, #460]	; (800a934 <problem_fetch+0x92d0>)
 800a768:	6810      	ldr	r0, [r2, #0]
 800a76a:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	2206      	movs	r2, #6
 800a770:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"E,J,H,C,E,D");
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	33a4      	adds	r3, #164	; 0xa4
 800a776:	4a70      	ldr	r2, [pc, #448]	; (800a938 <problem_fetch+0x92d4>)
 800a778:	461c      	mov	r4, r3
 800a77a:	4613      	mov	r3, r2
 800a77c:	cb07      	ldmia	r3!, {r0, r1, r2}
 800a77e:	6020      	str	r0, [r4, #0]
 800a780:	6061      	str	r1, [r4, #4]
 800a782:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"6,5,10,13,16,18");
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	3304      	adds	r3, #4
 800a788:	4a6c      	ldr	r2, [pc, #432]	; (800a93c <problem_fetch+0x92d8>)
 800a78a:	461c      	mov	r4, r3
 800a78c:	4615      	mov	r5, r2
 800a78e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a790:	6020      	str	r0, [r4, #0]
 800a792:	6061      	str	r1, [r4, #4]
 800a794:	60a2      	str	r2, [r4, #8]
 800a796:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,s,d,d,d,e");
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800a79e:	4a68      	ldr	r2, [pc, #416]	; (800a940 <problem_fetch+0x92dc>)
 800a7a0:	461c      	mov	r4, r3
 800a7a2:	4613      	mov	r3, r2
 800a7a4:	cb07      	ldmia	r3!, {r0, r1, r2}
 800a7a6:	6020      	str	r0, [r4, #0]
 800a7a8:	6061      	str	r1, [r4, #4]
 800a7aa:	60a2      	str	r2, [r4, #8]
			break;
 800a7ac:	f011 be8a 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 255 :
			strcpy(p->name,"KIWAK");
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800a7b6:	4a63      	ldr	r2, [pc, #396]	; (800a944 <problem_fetch+0x92e0>)
 800a7b8:	6810      	ldr	r0, [r2, #0]
 800a7ba:	6018      	str	r0, [r3, #0]
 800a7bc:	8892      	ldrh	r2, [r2, #4]
 800a7be:	809a      	strh	r2, [r3, #4]
			strcpy(p->grade,"6B+");
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800a7c6:	4a4d      	ldr	r2, [pc, #308]	; (800a8fc <problem_fetch+0x9298>)
 800a7c8:	6810      	ldr	r0, [r2, #0]
 800a7ca:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	2207      	movs	r2, #7
 800a7d0:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,G,H,E,G,D,A");
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	33a4      	adds	r3, #164	; 0xa4
 800a7d6:	4a5c      	ldr	r2, [pc, #368]	; (800a948 <problem_fetch+0x92e4>)
 800a7d8:	461c      	mov	r4, r3
 800a7da:	4613      	mov	r3, r2
 800a7dc:	cb07      	ldmia	r3!, {r0, r1, r2}
 800a7de:	6020      	str	r0, [r4, #0]
 800a7e0:	6061      	str	r1, [r4, #4]
 800a7e2:	60a2      	str	r2, [r4, #8]
 800a7e4:	881b      	ldrh	r3, [r3, #0]
 800a7e6:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,6,12,14,9,15,18");
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	3304      	adds	r3, #4
 800a7ec:	4a57      	ldr	r2, [pc, #348]	; (800a94c <problem_fetch+0x92e8>)
 800a7ee:	461d      	mov	r5, r3
 800a7f0:	4614      	mov	r4, r2
 800a7f2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a7f4:	6028      	str	r0, [r5, #0]
 800a7f6:	6069      	str	r1, [r5, #4]
 800a7f8:	60aa      	str	r2, [r5, #8]
 800a7fa:	60eb      	str	r3, [r5, #12]
 800a7fc:	8823      	ldrh	r3, [r4, #0]
 800a7fe:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800a806:	4a52      	ldr	r2, [pc, #328]	; (800a950 <problem_fetch+0x92ec>)
 800a808:	461c      	mov	r4, r3
 800a80a:	4613      	mov	r3, r2
 800a80c:	cb07      	ldmia	r3!, {r0, r1, r2}
 800a80e:	6020      	str	r0, [r4, #0]
 800a810:	6061      	str	r1, [r4, #4]
 800a812:	60a2      	str	r2, [r4, #8]
 800a814:	881b      	ldrh	r3, [r3, #0]
 800a816:	81a3      	strh	r3, [r4, #12]
			break;
 800a818:	f011 be54 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 256 :
			strcpy(p->name,"RIESKO");
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800a822:	4a4c      	ldr	r2, [pc, #304]	; (800a954 <problem_fetch+0x92f0>)
 800a824:	6810      	ldr	r0, [r2, #0]
 800a826:	6018      	str	r0, [r3, #0]
 800a828:	8891      	ldrh	r1, [r2, #4]
 800a82a:	7992      	ldrb	r2, [r2, #6]
 800a82c:	8099      	strh	r1, [r3, #4]
 800a82e:	719a      	strb	r2, [r3, #6]
			strcpy(p->grade,"6B+");
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800a836:	4a31      	ldr	r2, [pc, #196]	; (800a8fc <problem_fetch+0x9298>)
 800a838:	6810      	ldr	r0, [r2, #0]
 800a83a:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	2206      	movs	r2, #6
 800a840:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,G,K,F,E,A");
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	33a4      	adds	r3, #164	; 0xa4
 800a846:	4a44      	ldr	r2, [pc, #272]	; (800a958 <problem_fetch+0x92f4>)
 800a848:	461c      	mov	r4, r3
 800a84a:	4613      	mov	r3, r2
 800a84c:	cb07      	ldmia	r3!, {r0, r1, r2}
 800a84e:	6020      	str	r0, [r4, #0]
 800a850:	6061      	str	r1, [r4, #4]
 800a852:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,6,9,11,14,18");
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	3304      	adds	r3, #4
 800a858:	4a40      	ldr	r2, [pc, #256]	; (800a95c <problem_fetch+0x92f8>)
 800a85a:	461c      	mov	r4, r3
 800a85c:	4613      	mov	r3, r2
 800a85e:	cb07      	ldmia	r3!, {r0, r1, r2}
 800a860:	6020      	str	r0, [r4, #0]
 800a862:	6061      	str	r1, [r4, #4]
 800a864:	60a2      	str	r2, [r4, #8]
 800a866:	881a      	ldrh	r2, [r3, #0]
 800a868:	789b      	ldrb	r3, [r3, #2]
 800a86a:	81a2      	strh	r2, [r4, #12]
 800a86c:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish,"s,s,d,d,d,e");
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800a874:	4a32      	ldr	r2, [pc, #200]	; (800a940 <problem_fetch+0x92dc>)
 800a876:	461c      	mov	r4, r3
 800a878:	4613      	mov	r3, r2
 800a87a:	cb07      	ldmia	r3!, {r0, r1, r2}
 800a87c:	6020      	str	r0, [r4, #0]
 800a87e:	6061      	str	r1, [r4, #4]
 800a880:	60a2      	str	r2, [r4, #8]
			break;
 800a882:	f011 be1f 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 257 :
			strcpy(p->name,"XCRAG");
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800a88c:	4a34      	ldr	r2, [pc, #208]	; (800a960 <problem_fetch+0x92fc>)
 800a88e:	6810      	ldr	r0, [r2, #0]
 800a890:	6018      	str	r0, [r3, #0]
 800a892:	8892      	ldrh	r2, [r2, #4]
 800a894:	809a      	strh	r2, [r3, #4]
			strcpy(p->grade,"6C");
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800a89c:	4a31      	ldr	r2, [pc, #196]	; (800a964 <problem_fetch+0x9300>)
 800a89e:	8811      	ldrh	r1, [r2, #0]
 800a8a0:	7892      	ldrb	r2, [r2, #2]
 800a8a2:	8019      	strh	r1, [r3, #0]
 800a8a4:	709a      	strb	r2, [r3, #2]
			p->moveSize = 7;
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	2207      	movs	r2, #7
 800a8aa:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,J,H,G,C,E,I");
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	33a4      	adds	r3, #164	; 0xa4
 800a8b0:	4a2d      	ldr	r2, [pc, #180]	; (800a968 <problem_fetch+0x9304>)
 800a8b2:	461c      	mov	r4, r3
 800a8b4:	4613      	mov	r3, r2
 800a8b6:	cb07      	ldmia	r3!, {r0, r1, r2}
 800a8b8:	6020      	str	r0, [r4, #0]
 800a8ba:	6061      	str	r1, [r4, #4]
 800a8bc:	60a2      	str	r2, [r4, #8]
 800a8be:	881b      	ldrh	r3, [r3, #0]
 800a8c0:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,5,8,10,13,14,18");
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	3304      	adds	r3, #4
 800a8c6:	4a29      	ldr	r2, [pc, #164]	; (800a96c <problem_fetch+0x9308>)
 800a8c8:	461d      	mov	r5, r3
 800a8ca:	4614      	mov	r4, r2
 800a8cc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a8ce:	6028      	str	r0, [r5, #0]
 800a8d0:	6069      	str	r1, [r5, #4]
 800a8d2:	60aa      	str	r2, [r5, #8]
 800a8d4:	60eb      	str	r3, [r5, #12]
 800a8d6:	8823      	ldrh	r3, [r4, #0]
 800a8d8:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,s,d,d,d,d,e");
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800a8e0:	4a23      	ldr	r2, [pc, #140]	; (800a970 <problem_fetch+0x930c>)
 800a8e2:	461c      	mov	r4, r3
 800a8e4:	4613      	mov	r3, r2
 800a8e6:	cb07      	ldmia	r3!, {r0, r1, r2}
 800a8e8:	6020      	str	r0, [r4, #0]
 800a8ea:	6061      	str	r1, [r4, #4]
 800a8ec:	60a2      	str	r2, [r4, #8]
 800a8ee:	881b      	ldrh	r3, [r3, #0]
 800a8f0:	81a3      	strh	r3, [r4, #12]
			break;
 800a8f2:	f011 bde7 	b.w	801c4c4 <problem_fetch+0x1ae60>
 800a8f6:	bf00      	nop
 800a8f8:	08026e70 	.word	0x08026e70
 800a8fc:	08023b24 	.word	0x08023b24
 800a900:	08026e7c 	.word	0x08026e7c
 800a904:	08026e90 	.word	0x08026e90
 800a908:	08024b08 	.word	0x08024b08
 800a90c:	08026ea8 	.word	0x08026ea8
 800a910:	08023ae4 	.word	0x08023ae4
 800a914:	08026ebc 	.word	0x08026ebc
 800a918:	08026ec8 	.word	0x08026ec8
 800a91c:	08023ec0 	.word	0x08023ec0
 800a920:	08026ed8 	.word	0x08026ed8
 800a924:	08026ee4 	.word	0x08026ee4
 800a928:	08026ef4 	.word	0x08026ef4
 800a92c:	08026f08 	.word	0x08026f08
 800a930:	08026f18 	.word	0x08026f18
 800a934:	08023bbc 	.word	0x08023bbc
 800a938:	08026f28 	.word	0x08026f28
 800a93c:	080261d4 	.word	0x080261d4
 800a940:	08023b04 	.word	0x08023b04
 800a944:	08026f34 	.word	0x08026f34
 800a948:	08026f3c 	.word	0x08026f3c
 800a94c:	08026f4c 	.word	0x08026f4c
 800a950:	08023cac 	.word	0x08023cac
 800a954:	08026f60 	.word	0x08026f60
 800a958:	08026f68 	.word	0x08026f68
 800a95c:	08026f74 	.word	0x08026f74
 800a960:	08026f84 	.word	0x08026f84
 800a964:	08023bf0 	.word	0x08023bf0
 800a968:	08026f8c 	.word	0x08026f8c
 800a96c:	08026f9c 	.word	0x08026f9c
 800a970:	08023b9c 	.word	0x08023b9c
		case 258 :
			strcpy(p->name,"LITTLE MAN ON CAMPUS");
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800a97a:	4ab2      	ldr	r2, [pc, #712]	; (800ac44 <problem_fetch+0x95e0>)
 800a97c:	461d      	mov	r5, r3
 800a97e:	4614      	mov	r4, r2
 800a980:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a982:	6028      	str	r0, [r5, #0]
 800a984:	6069      	str	r1, [r5, #4]
 800a986:	60aa      	str	r2, [r5, #8]
 800a988:	60eb      	str	r3, [r5, #12]
 800a98a:	6820      	ldr	r0, [r4, #0]
 800a98c:	6128      	str	r0, [r5, #16]
 800a98e:	7923      	ldrb	r3, [r4, #4]
 800a990:	752b      	strb	r3, [r5, #20]
			strcpy(p->grade,"7B");
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800a998:	4aab      	ldr	r2, [pc, #684]	; (800ac48 <problem_fetch+0x95e4>)
 800a99a:	8811      	ldrh	r1, [r2, #0]
 800a99c:	7892      	ldrb	r2, [r2, #2]
 800a99e:	8019      	strh	r1, [r3, #0]
 800a9a0:	709a      	strb	r2, [r3, #2]
			p->moveSize = 6;
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	2206      	movs	r2, #6
 800a9a6:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,B,F,H,K,I");
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	33a4      	adds	r3, #164	; 0xa4
 800a9ac:	4aa7      	ldr	r2, [pc, #668]	; (800ac4c <problem_fetch+0x95e8>)
 800a9ae:	461c      	mov	r4, r3
 800a9b0:	4613      	mov	r3, r2
 800a9b2:	cb07      	ldmia	r3!, {r0, r1, r2}
 800a9b4:	6020      	str	r0, [r4, #0]
 800a9b6:	6061      	str	r1, [r4, #4]
 800a9b8:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,6,11,12,14,18");
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	3304      	adds	r3, #4
 800a9be:	4aa4      	ldr	r2, [pc, #656]	; (800ac50 <problem_fetch+0x95ec>)
 800a9c0:	461c      	mov	r4, r3
 800a9c2:	4615      	mov	r5, r2
 800a9c4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a9c6:	6020      	str	r0, [r4, #0]
 800a9c8:	6061      	str	r1, [r4, #4]
 800a9ca:	60a2      	str	r2, [r4, #8]
 800a9cc:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800a9d4:	4a9f      	ldr	r2, [pc, #636]	; (800ac54 <problem_fetch+0x95f0>)
 800a9d6:	461c      	mov	r4, r3
 800a9d8:	4613      	mov	r3, r2
 800a9da:	cb07      	ldmia	r3!, {r0, r1, r2}
 800a9dc:	6020      	str	r0, [r4, #0]
 800a9de:	6061      	str	r1, [r4, #4]
 800a9e0:	60a2      	str	r2, [r4, #8]
			break;
 800a9e2:	f011 bd6f 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 259 :
			strcpy(p->name,"KILL HIM YOUR LEGS");
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800a9ec:	4a9a      	ldr	r2, [pc, #616]	; (800ac58 <problem_fetch+0x95f4>)
 800a9ee:	461d      	mov	r5, r3
 800a9f0:	4614      	mov	r4, r2
 800a9f2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a9f4:	6028      	str	r0, [r5, #0]
 800a9f6:	6069      	str	r1, [r5, #4]
 800a9f8:	60aa      	str	r2, [r5, #8]
 800a9fa:	60eb      	str	r3, [r5, #12]
 800a9fc:	8823      	ldrh	r3, [r4, #0]
 800a9fe:	78a2      	ldrb	r2, [r4, #2]
 800aa00:	822b      	strh	r3, [r5, #16]
 800aa02:	4613      	mov	r3, r2
 800aa04:	74ab      	strb	r3, [r5, #18]
			strcpy(p->grade,"7B");
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800aa0c:	4a8e      	ldr	r2, [pc, #568]	; (800ac48 <problem_fetch+0x95e4>)
 800aa0e:	8811      	ldrh	r1, [r2, #0]
 800aa10:	7892      	ldrb	r2, [r2, #2]
 800aa12:	8019      	strh	r1, [r3, #0]
 800aa14:	709a      	strb	r2, [r3, #2]
			p->moveSize = 4;
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	2204      	movs	r2, #4
 800aa1a:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,H,C,I");
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	33a4      	adds	r3, #164	; 0xa4
 800aa20:	498e      	ldr	r1, [pc, #568]	; (800ac5c <problem_fetch+0x95f8>)
 800aa22:	461a      	mov	r2, r3
 800aa24:	460b      	mov	r3, r1
 800aa26:	cb03      	ldmia	r3!, {r0, r1}
 800aa28:	6010      	str	r0, [r2, #0]
 800aa2a:	6051      	str	r1, [r2, #4]
			strcpy(p->moveNumbers,"4,10,13,18");
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	3304      	adds	r3, #4
 800aa30:	498b      	ldr	r1, [pc, #556]	; (800ac60 <problem_fetch+0x95fc>)
 800aa32:	461a      	mov	r2, r3
 800aa34:	460b      	mov	r3, r1
 800aa36:	cb03      	ldmia	r3!, {r0, r1}
 800aa38:	6010      	str	r0, [r2, #0]
 800aa3a:	6051      	str	r1, [r2, #4]
 800aa3c:	8819      	ldrh	r1, [r3, #0]
 800aa3e:	789b      	ldrb	r3, [r3, #2]
 800aa40:	8111      	strh	r1, [r2, #8]
 800aa42:	7293      	strb	r3, [r2, #10]
			strcpy(p->startFinish,"s,d,d,e");
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800aa4a:	4986      	ldr	r1, [pc, #536]	; (800ac64 <problem_fetch+0x9600>)
 800aa4c:	461a      	mov	r2, r3
 800aa4e:	460b      	mov	r3, r1
 800aa50:	cb03      	ldmia	r3!, {r0, r1}
 800aa52:	6010      	str	r0, [r2, #0]
 800aa54:	6051      	str	r1, [r2, #4]
			break;
 800aa56:	f011 bd35 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 260 :
			strcpy(p->name,"HOG TROUGH");
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800aa60:	4981      	ldr	r1, [pc, #516]	; (800ac68 <problem_fetch+0x9604>)
 800aa62:	461a      	mov	r2, r3
 800aa64:	460b      	mov	r3, r1
 800aa66:	cb03      	ldmia	r3!, {r0, r1}
 800aa68:	6010      	str	r0, [r2, #0]
 800aa6a:	6051      	str	r1, [r2, #4]
 800aa6c:	8819      	ldrh	r1, [r3, #0]
 800aa6e:	789b      	ldrb	r3, [r3, #2]
 800aa70:	8111      	strh	r1, [r2, #8]
 800aa72:	7293      	strb	r3, [r2, #10]
			strcpy(p->grade,"6B+");
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800aa7a:	4a7c      	ldr	r2, [pc, #496]	; (800ac6c <problem_fetch+0x9608>)
 800aa7c:	6810      	ldr	r0, [r2, #0]
 800aa7e:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	2206      	movs	r2, #6
 800aa84:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,D,G,C,D,D");
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	33a4      	adds	r3, #164	; 0xa4
 800aa8a:	4a79      	ldr	r2, [pc, #484]	; (800ac70 <problem_fetch+0x960c>)
 800aa8c:	461c      	mov	r4, r3
 800aa8e:	4613      	mov	r3, r2
 800aa90:	cb07      	ldmia	r3!, {r0, r1, r2}
 800aa92:	6020      	str	r0, [r4, #0]
 800aa94:	6061      	str	r1, [r4, #4]
 800aa96:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,7,9,13,15,18");
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	3304      	adds	r3, #4
 800aa9c:	4a75      	ldr	r2, [pc, #468]	; (800ac74 <problem_fetch+0x9610>)
 800aa9e:	461c      	mov	r4, r3
 800aaa0:	4613      	mov	r3, r2
 800aaa2:	cb07      	ldmia	r3!, {r0, r1, r2}
 800aaa4:	6020      	str	r0, [r4, #0]
 800aaa6:	6061      	str	r1, [r4, #4]
 800aaa8:	60a2      	str	r2, [r4, #8]
 800aaaa:	881a      	ldrh	r2, [r3, #0]
 800aaac:	789b      	ldrb	r3, [r3, #2]
 800aaae:	81a2      	strh	r2, [r4, #12]
 800aab0:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800aab8:	4a66      	ldr	r2, [pc, #408]	; (800ac54 <problem_fetch+0x95f0>)
 800aaba:	461c      	mov	r4, r3
 800aabc:	4613      	mov	r3, r2
 800aabe:	cb07      	ldmia	r3!, {r0, r1, r2}
 800aac0:	6020      	str	r0, [r4, #0]
 800aac2:	6061      	str	r1, [r4, #4]
 800aac4:	60a2      	str	r2, [r4, #8]
			break;
 800aac6:	f011 bcfd 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 261 :
			strcpy(p->name,"FLOOZY DOO");
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800aad0:	4969      	ldr	r1, [pc, #420]	; (800ac78 <problem_fetch+0x9614>)
 800aad2:	461a      	mov	r2, r3
 800aad4:	460b      	mov	r3, r1
 800aad6:	cb03      	ldmia	r3!, {r0, r1}
 800aad8:	6010      	str	r0, [r2, #0]
 800aada:	6051      	str	r1, [r2, #4]
 800aadc:	8819      	ldrh	r1, [r3, #0]
 800aade:	789b      	ldrb	r3, [r3, #2]
 800aae0:	8111      	strh	r1, [r2, #8]
 800aae2:	7293      	strb	r3, [r2, #10]
			strcpy(p->grade,"7A+");
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800aaea:	4a64      	ldr	r2, [pc, #400]	; (800ac7c <problem_fetch+0x9618>)
 800aaec:	6810      	ldr	r0, [r2, #0]
 800aaee:	6018      	str	r0, [r3, #0]
			p->moveSize = 8;
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	2208      	movs	r2, #8
 800aaf4:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,H,G,F,A,C,A,D");
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	33a4      	adds	r3, #164	; 0xa4
 800aafa:	4a61      	ldr	r2, [pc, #388]	; (800ac80 <problem_fetch+0x961c>)
 800aafc:	461c      	mov	r4, r3
 800aafe:	4615      	mov	r5, r2
 800ab00:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ab02:	6020      	str	r0, [r4, #0]
 800ab04:	6061      	str	r1, [r4, #4]
 800ab06:	60a2      	str	r2, [r4, #8]
 800ab08:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,8,9,11,9,13,14,18");
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	3304      	adds	r3, #4
 800ab0e:	4a5d      	ldr	r2, [pc, #372]	; (800ac84 <problem_fetch+0x9620>)
 800ab10:	461d      	mov	r5, r3
 800ab12:	4614      	mov	r4, r2
 800ab14:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800ab16:	6028      	str	r0, [r5, #0]
 800ab18:	6069      	str	r1, [r5, #4]
 800ab1a:	60aa      	str	r2, [r5, #8]
 800ab1c:	60eb      	str	r3, [r5, #12]
 800ab1e:	6820      	ldr	r0, [r4, #0]
 800ab20:	6128      	str	r0, [r5, #16]
			strcpy(p->startFinish,"s,d,d,d,d,d,d,e");
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800ab28:	4a57      	ldr	r2, [pc, #348]	; (800ac88 <problem_fetch+0x9624>)
 800ab2a:	461c      	mov	r4, r3
 800ab2c:	4615      	mov	r5, r2
 800ab2e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ab30:	6020      	str	r0, [r4, #0]
 800ab32:	6061      	str	r1, [r4, #4]
 800ab34:	60a2      	str	r2, [r4, #8]
 800ab36:	60e3      	str	r3, [r4, #12]
			break;
 800ab38:	f011 bcc4 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 262 :
			strcpy(p->name,"SZECHUAN");
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800ab42:	4952      	ldr	r1, [pc, #328]	; (800ac8c <problem_fetch+0x9628>)
 800ab44:	461a      	mov	r2, r3
 800ab46:	460b      	mov	r3, r1
 800ab48:	cb03      	ldmia	r3!, {r0, r1}
 800ab4a:	6010      	str	r0, [r2, #0]
 800ab4c:	6051      	str	r1, [r2, #4]
 800ab4e:	781b      	ldrb	r3, [r3, #0]
 800ab50:	7213      	strb	r3, [r2, #8]
			strcpy(p->grade,"7B");
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800ab58:	4a3b      	ldr	r2, [pc, #236]	; (800ac48 <problem_fetch+0x95e4>)
 800ab5a:	8811      	ldrh	r1, [r2, #0]
 800ab5c:	7892      	ldrb	r2, [r2, #2]
 800ab5e:	8019      	strh	r1, [r3, #0]
 800ab60:	709a      	strb	r2, [r3, #2]
			p->moveSize = 9;
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	2209      	movs	r2, #9
 800ab66:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,C,A,C,E,A,D,G,I");
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	33a4      	adds	r3, #164	; 0xa4
 800ab6c:	4a48      	ldr	r2, [pc, #288]	; (800ac90 <problem_fetch+0x962c>)
 800ab6e:	461d      	mov	r5, r3
 800ab70:	4614      	mov	r4, r2
 800ab72:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800ab74:	6028      	str	r0, [r5, #0]
 800ab76:	6069      	str	r1, [r5, #4]
 800ab78:	60aa      	str	r2, [r5, #8]
 800ab7a:	60eb      	str	r3, [r5, #12]
 800ab7c:	8823      	ldrh	r3, [r4, #0]
 800ab7e:	822b      	strh	r3, [r5, #16]
			strcpy(p->moveNumbers,"4,8,9,5,12,14,15,17,18");
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	3304      	adds	r3, #4
 800ab84:	4a43      	ldr	r2, [pc, #268]	; (800ac94 <problem_fetch+0x9630>)
 800ab86:	461c      	mov	r4, r3
 800ab88:	4615      	mov	r5, r2
 800ab8a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ab8c:	6020      	str	r0, [r4, #0]
 800ab8e:	6061      	str	r1, [r4, #4]
 800ab90:	60a2      	str	r2, [r4, #8]
 800ab92:	60e3      	str	r3, [r4, #12]
 800ab94:	6828      	ldr	r0, [r5, #0]
 800ab96:	6120      	str	r0, [r4, #16]
 800ab98:	88ab      	ldrh	r3, [r5, #4]
 800ab9a:	79aa      	ldrb	r2, [r5, #6]
 800ab9c:	82a3      	strh	r3, [r4, #20]
 800ab9e:	4613      	mov	r3, r2
 800aba0:	75a3      	strb	r3, [r4, #22]
			strcpy(p->startFinish,"s,d,d,d,d,d,d,d,e");
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800aba8:	4a3b      	ldr	r2, [pc, #236]	; (800ac98 <problem_fetch+0x9634>)
 800abaa:	461d      	mov	r5, r3
 800abac:	4614      	mov	r4, r2
 800abae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800abb0:	6028      	str	r0, [r5, #0]
 800abb2:	6069      	str	r1, [r5, #4]
 800abb4:	60aa      	str	r2, [r5, #8]
 800abb6:	60eb      	str	r3, [r5, #12]
 800abb8:	8823      	ldrh	r3, [r4, #0]
 800abba:	822b      	strh	r3, [r5, #16]
			break;
 800abbc:	f011 bc82 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 263 :
			strcpy(p->name,"BLACK.HO");
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800abc6:	4935      	ldr	r1, [pc, #212]	; (800ac9c <problem_fetch+0x9638>)
 800abc8:	461a      	mov	r2, r3
 800abca:	460b      	mov	r3, r1
 800abcc:	cb03      	ldmia	r3!, {r0, r1}
 800abce:	6010      	str	r0, [r2, #0]
 800abd0:	6051      	str	r1, [r2, #4]
 800abd2:	781b      	ldrb	r3, [r3, #0]
 800abd4:	7213      	strb	r3, [r2, #8]
			strcpy(p->grade,"7C");
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800abdc:	4a30      	ldr	r2, [pc, #192]	; (800aca0 <problem_fetch+0x963c>)
 800abde:	8811      	ldrh	r1, [r2, #0]
 800abe0:	7892      	ldrb	r2, [r2, #2]
 800abe2:	8019      	strh	r1, [r3, #0]
 800abe4:	709a      	strb	r2, [r3, #2]
			p->moveSize = 9;
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	2209      	movs	r2, #9
 800abea:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"H,C,A,E,I,A,E,G,H");
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	33a4      	adds	r3, #164	; 0xa4
 800abf0:	4a2c      	ldr	r2, [pc, #176]	; (800aca4 <problem_fetch+0x9640>)
 800abf2:	461d      	mov	r5, r3
 800abf4:	4614      	mov	r4, r2
 800abf6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800abf8:	6028      	str	r0, [r5, #0]
 800abfa:	6069      	str	r1, [r5, #4]
 800abfc:	60aa      	str	r2, [r5, #8]
 800abfe:	60eb      	str	r3, [r5, #12]
 800ac00:	8823      	ldrh	r3, [r4, #0]
 800ac02:	822b      	strh	r3, [r5, #16]
			strcpy(p->moveNumbers,"5,5,9,9,18,14,16,17,12");
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	3304      	adds	r3, #4
 800ac08:	4a27      	ldr	r2, [pc, #156]	; (800aca8 <problem_fetch+0x9644>)
 800ac0a:	461c      	mov	r4, r3
 800ac0c:	4615      	mov	r5, r2
 800ac0e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ac10:	6020      	str	r0, [r4, #0]
 800ac12:	6061      	str	r1, [r4, #4]
 800ac14:	60a2      	str	r2, [r4, #8]
 800ac16:	60e3      	str	r3, [r4, #12]
 800ac18:	6828      	ldr	r0, [r5, #0]
 800ac1a:	6120      	str	r0, [r4, #16]
 800ac1c:	88ab      	ldrh	r3, [r5, #4]
 800ac1e:	79aa      	ldrb	r2, [r5, #6]
 800ac20:	82a3      	strh	r3, [r4, #20]
 800ac22:	4613      	mov	r3, r2
 800ac24:	75a3      	strb	r3, [r4, #22]
			strcpy(p->startFinish,"s,d,d,d,e,d,d,d,d");
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800ac2c:	4a1f      	ldr	r2, [pc, #124]	; (800acac <problem_fetch+0x9648>)
 800ac2e:	461d      	mov	r5, r3
 800ac30:	4614      	mov	r4, r2
 800ac32:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800ac34:	6028      	str	r0, [r5, #0]
 800ac36:	6069      	str	r1, [r5, #4]
 800ac38:	60aa      	str	r2, [r5, #8]
 800ac3a:	60eb      	str	r3, [r5, #12]
 800ac3c:	8823      	ldrh	r3, [r4, #0]
 800ac3e:	822b      	strh	r3, [r5, #16]
			break;
 800ac40:	f011 bc40 	b.w	801c4c4 <problem_fetch+0x1ae60>
 800ac44:	08026fb0 	.word	0x08026fb0
 800ac48:	0802421c 	.word	0x0802421c
 800ac4c:	08026fc8 	.word	0x08026fc8
 800ac50:	08026fd4 	.word	0x08026fd4
 800ac54:	08023ec0 	.word	0x08023ec0
 800ac58:	08026fe4 	.word	0x08026fe4
 800ac5c:	08026ff8 	.word	0x08026ff8
 800ac60:	08027000 	.word	0x08027000
 800ac64:	08023c78 	.word	0x08023c78
 800ac68:	0802700c 	.word	0x0802700c
 800ac6c:	08023b24 	.word	0x08023b24
 800ac70:	08027018 	.word	0x08027018
 800ac74:	08027024 	.word	0x08027024
 800ac78:	08027034 	.word	0x08027034
 800ac7c:	08023cc4 	.word	0x08023cc4
 800ac80:	08027040 	.word	0x08027040
 800ac84:	08027050 	.word	0x08027050
 800ac88:	08023d34 	.word	0x08023d34
 800ac8c:	08027064 	.word	0x08027064
 800ac90:	08027070 	.word	0x08027070
 800ac94:	08027084 	.word	0x08027084
 800ac98:	080259dc 	.word	0x080259dc
 800ac9c:	0802709c 	.word	0x0802709c
 800aca0:	08024358 	.word	0x08024358
 800aca4:	080270a8 	.word	0x080270a8
 800aca8:	080270bc 	.word	0x080270bc
 800acac:	08026ccc 	.word	0x08026ccc
		case 264 :
			strcpy(p->name,"SLIPPERY WHEN WET");
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800acb6:	4ac4      	ldr	r2, [pc, #784]	; (800afc8 <problem_fetch+0x9964>)
 800acb8:	461d      	mov	r5, r3
 800acba:	4614      	mov	r4, r2
 800acbc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800acbe:	6028      	str	r0, [r5, #0]
 800acc0:	6069      	str	r1, [r5, #4]
 800acc2:	60aa      	str	r2, [r5, #8]
 800acc4:	60eb      	str	r3, [r5, #12]
 800acc6:	8823      	ldrh	r3, [r4, #0]
 800acc8:	822b      	strh	r3, [r5, #16]
			strcpy(p->grade,"7A");
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800acd0:	4abe      	ldr	r2, [pc, #760]	; (800afcc <problem_fetch+0x9968>)
 800acd2:	8811      	ldrh	r1, [r2, #0]
 800acd4:	7892      	ldrb	r2, [r2, #2]
 800acd6:	8019      	strh	r1, [r3, #0]
 800acd8:	709a      	strb	r2, [r3, #2]
			p->moveSize = 7;
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	2207      	movs	r2, #7
 800acde:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,C,H,G,D,D,A");
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	33a4      	adds	r3, #164	; 0xa4
 800ace4:	4aba      	ldr	r2, [pc, #744]	; (800afd0 <problem_fetch+0x996c>)
 800ace6:	461c      	mov	r4, r3
 800ace8:	4613      	mov	r3, r2
 800acea:	cb07      	ldmia	r3!, {r0, r1, r2}
 800acec:	6020      	str	r0, [r4, #0]
 800acee:	6061      	str	r1, [r4, #4]
 800acf0:	60a2      	str	r2, [r4, #8]
 800acf2:	881b      	ldrh	r3, [r3, #0]
 800acf4:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,8,10,14,15,18,18");
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	3304      	adds	r3, #4
 800acfa:	4ab6      	ldr	r2, [pc, #728]	; (800afd4 <problem_fetch+0x9970>)
 800acfc:	461d      	mov	r5, r3
 800acfe:	4614      	mov	r4, r2
 800ad00:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800ad02:	6028      	str	r0, [r5, #0]
 800ad04:	6069      	str	r1, [r5, #4]
 800ad06:	60aa      	str	r2, [r5, #8]
 800ad08:	60eb      	str	r3, [r5, #12]
 800ad0a:	8823      	ldrh	r3, [r4, #0]
 800ad0c:	78a2      	ldrb	r2, [r4, #2]
 800ad0e:	822b      	strh	r3, [r5, #16]
 800ad10:	4613      	mov	r3, r2
 800ad12:	74ab      	strb	r3, [r5, #18]
			strcpy(p->startFinish,"s,d,d,d,d,e,e");
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800ad1a:	4aaf      	ldr	r2, [pc, #700]	; (800afd8 <problem_fetch+0x9974>)
 800ad1c:	461c      	mov	r4, r3
 800ad1e:	4613      	mov	r3, r2
 800ad20:	cb07      	ldmia	r3!, {r0, r1, r2}
 800ad22:	6020      	str	r0, [r4, #0]
 800ad24:	6061      	str	r1, [r4, #4]
 800ad26:	60a2      	str	r2, [r4, #8]
 800ad28:	881b      	ldrh	r3, [r3, #0]
 800ad2a:	81a3      	strh	r3, [r4, #12]
			break;
 800ad2c:	f011 bbca 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 265 :
			strcpy(p->name,"UNSULLIED");
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800ad36:	49a9      	ldr	r1, [pc, #676]	; (800afdc <problem_fetch+0x9978>)
 800ad38:	461a      	mov	r2, r3
 800ad3a:	460b      	mov	r3, r1
 800ad3c:	cb03      	ldmia	r3!, {r0, r1}
 800ad3e:	6010      	str	r0, [r2, #0]
 800ad40:	6051      	str	r1, [r2, #4]
 800ad42:	881b      	ldrh	r3, [r3, #0]
 800ad44:	8113      	strh	r3, [r2, #8]
			strcpy(p->grade,"7A");
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800ad4c:	4a9f      	ldr	r2, [pc, #636]	; (800afcc <problem_fetch+0x9968>)
 800ad4e:	8811      	ldrh	r1, [r2, #0]
 800ad50:	7892      	ldrb	r2, [r2, #2]
 800ad52:	8019      	strh	r1, [r3, #0]
 800ad54:	709a      	strb	r2, [r3, #2]
			p->moveSize = 4;
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	2204      	movs	r2, #4
 800ad5a:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"E,G,C,D");
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	33a4      	adds	r3, #164	; 0xa4
 800ad60:	499f      	ldr	r1, [pc, #636]	; (800afe0 <problem_fetch+0x997c>)
 800ad62:	461a      	mov	r2, r3
 800ad64:	460b      	mov	r3, r1
 800ad66:	cb03      	ldmia	r3!, {r0, r1}
 800ad68:	6010      	str	r0, [r2, #0]
 800ad6a:	6051      	str	r1, [r2, #4]
			strcpy(p->moveNumbers,"6,10,13,18");
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	3304      	adds	r3, #4
 800ad70:	499c      	ldr	r1, [pc, #624]	; (800afe4 <problem_fetch+0x9980>)
 800ad72:	461a      	mov	r2, r3
 800ad74:	460b      	mov	r3, r1
 800ad76:	cb03      	ldmia	r3!, {r0, r1}
 800ad78:	6010      	str	r0, [r2, #0]
 800ad7a:	6051      	str	r1, [r2, #4]
 800ad7c:	8819      	ldrh	r1, [r3, #0]
 800ad7e:	789b      	ldrb	r3, [r3, #2]
 800ad80:	8111      	strh	r1, [r2, #8]
 800ad82:	7293      	strb	r3, [r2, #10]
			strcpy(p->startFinish,"s,d,d,e");
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800ad8a:	4997      	ldr	r1, [pc, #604]	; (800afe8 <problem_fetch+0x9984>)
 800ad8c:	461a      	mov	r2, r3
 800ad8e:	460b      	mov	r3, r1
 800ad90:	cb03      	ldmia	r3!, {r0, r1}
 800ad92:	6010      	str	r0, [r2, #0]
 800ad94:	6051      	str	r1, [r2, #4]
			break;
 800ad96:	f011 bb95 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 266 :
			strcpy(p->name,"HEAVY LIFTING");
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800ada0:	4a92      	ldr	r2, [pc, #584]	; (800afec <problem_fetch+0x9988>)
 800ada2:	461c      	mov	r4, r3
 800ada4:	4613      	mov	r3, r2
 800ada6:	cb07      	ldmia	r3!, {r0, r1, r2}
 800ada8:	6020      	str	r0, [r4, #0]
 800adaa:	6061      	str	r1, [r4, #4]
 800adac:	60a2      	str	r2, [r4, #8]
 800adae:	881b      	ldrh	r3, [r3, #0]
 800adb0:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade,"7A+");
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800adb8:	4a8d      	ldr	r2, [pc, #564]	; (800aff0 <problem_fetch+0x998c>)
 800adba:	6810      	ldr	r0, [r2, #0]
 800adbc:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	2206      	movs	r2, #6
 800adc2:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"E,G,H,G,D,D");
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	33a4      	adds	r3, #164	; 0xa4
 800adc8:	4a8a      	ldr	r2, [pc, #552]	; (800aff4 <problem_fetch+0x9990>)
 800adca:	461c      	mov	r4, r3
 800adcc:	4613      	mov	r3, r2
 800adce:	cb07      	ldmia	r3!, {r0, r1, r2}
 800add0:	6020      	str	r0, [r4, #0]
 800add2:	6061      	str	r1, [r4, #4]
 800add4:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"6,6,10,14,15,18");
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	3304      	adds	r3, #4
 800adda:	4a87      	ldr	r2, [pc, #540]	; (800aff8 <problem_fetch+0x9994>)
 800addc:	461c      	mov	r4, r3
 800adde:	4615      	mov	r5, r2
 800ade0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ade2:	6020      	str	r0, [r4, #0]
 800ade4:	6061      	str	r1, [r4, #4]
 800ade6:	60a2      	str	r2, [r4, #8]
 800ade8:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,s,d,d,d,e");
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800adf0:	4a82      	ldr	r2, [pc, #520]	; (800affc <problem_fetch+0x9998>)
 800adf2:	461c      	mov	r4, r3
 800adf4:	4613      	mov	r3, r2
 800adf6:	cb07      	ldmia	r3!, {r0, r1, r2}
 800adf8:	6020      	str	r0, [r4, #0]
 800adfa:	6061      	str	r1, [r4, #4]
 800adfc:	60a2      	str	r2, [r4, #8]
			break;
 800adfe:	f011 bb61 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 267 :
			strcpy(p->name,"SOFA KING SNAKED");
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800ae08:	4a7d      	ldr	r2, [pc, #500]	; (800b000 <problem_fetch+0x999c>)
 800ae0a:	461d      	mov	r5, r3
 800ae0c:	4614      	mov	r4, r2
 800ae0e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800ae10:	6028      	str	r0, [r5, #0]
 800ae12:	6069      	str	r1, [r5, #4]
 800ae14:	60aa      	str	r2, [r5, #8]
 800ae16:	60eb      	str	r3, [r5, #12]
 800ae18:	7823      	ldrb	r3, [r4, #0]
 800ae1a:	742b      	strb	r3, [r5, #16]
			strcpy(p->grade,"7B");
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800ae22:	4a78      	ldr	r2, [pc, #480]	; (800b004 <problem_fetch+0x99a0>)
 800ae24:	8811      	ldrh	r1, [r2, #0]
 800ae26:	7892      	ldrb	r2, [r2, #2]
 800ae28:	8019      	strh	r1, [r3, #0]
 800ae2a:	709a      	strb	r2, [r3, #2]
			p->moveSize = 6;
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	2206      	movs	r2, #6
 800ae30:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,E,E,D,I,D");
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	33a4      	adds	r3, #164	; 0xa4
 800ae36:	4a74      	ldr	r2, [pc, #464]	; (800b008 <problem_fetch+0x99a4>)
 800ae38:	461c      	mov	r4, r3
 800ae3a:	4613      	mov	r3, r2
 800ae3c:	cb07      	ldmia	r3!, {r0, r1, r2}
 800ae3e:	6020      	str	r0, [r4, #0]
 800ae40:	6061      	str	r1, [r4, #4]
 800ae42:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,8,12,11,14,18");
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	3304      	adds	r3, #4
 800ae48:	4a70      	ldr	r2, [pc, #448]	; (800b00c <problem_fetch+0x99a8>)
 800ae4a:	461c      	mov	r4, r3
 800ae4c:	4615      	mov	r5, r2
 800ae4e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ae50:	6020      	str	r0, [r4, #0]
 800ae52:	6061      	str	r1, [r4, #4]
 800ae54:	60a2      	str	r2, [r4, #8]
 800ae56:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800ae5e:	4a6c      	ldr	r2, [pc, #432]	; (800b010 <problem_fetch+0x99ac>)
 800ae60:	461c      	mov	r4, r3
 800ae62:	4613      	mov	r3, r2
 800ae64:	cb07      	ldmia	r3!, {r0, r1, r2}
 800ae66:	6020      	str	r0, [r4, #0]
 800ae68:	6061      	str	r1, [r4, #4]
 800ae6a:	60a2      	str	r2, [r4, #8]
			break;
 800ae6c:	f011 bb2a 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 268 :
			strcpy(p->name,"SOFA KING JUGGY");
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800ae76:	4a67      	ldr	r2, [pc, #412]	; (800b014 <problem_fetch+0x99b0>)
 800ae78:	461c      	mov	r4, r3
 800ae7a:	4615      	mov	r5, r2
 800ae7c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ae7e:	6020      	str	r0, [r4, #0]
 800ae80:	6061      	str	r1, [r4, #4]
 800ae82:	60a2      	str	r2, [r4, #8]
 800ae84:	60e3      	str	r3, [r4, #12]
			strcpy(p->grade,"7B+");
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800ae8c:	4a62      	ldr	r2, [pc, #392]	; (800b018 <problem_fetch+0x99b4>)
 800ae8e:	6810      	ldr	r0, [r2, #0]
 800ae90:	6018      	str	r0, [r3, #0]
			p->moveSize = 5;
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	2205      	movs	r2, #5
 800ae96:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,H,H,H,D");
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	33a4      	adds	r3, #164	; 0xa4
 800ae9c:	495f      	ldr	r1, [pc, #380]	; (800b01c <problem_fetch+0x99b8>)
 800ae9e:	461a      	mov	r2, r3
 800aea0:	460b      	mov	r3, r1
 800aea2:	cb03      	ldmia	r3!, {r0, r1}
 800aea4:	6010      	str	r0, [r2, #0]
 800aea6:	6051      	str	r1, [r2, #4]
 800aea8:	881b      	ldrh	r3, [r3, #0]
 800aeaa:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"4,10,12,16,18");
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	3304      	adds	r3, #4
 800aeb0:	4a5b      	ldr	r2, [pc, #364]	; (800b020 <problem_fetch+0x99bc>)
 800aeb2:	461c      	mov	r4, r3
 800aeb4:	4613      	mov	r3, r2
 800aeb6:	cb07      	ldmia	r3!, {r0, r1, r2}
 800aeb8:	6020      	str	r0, [r4, #0]
 800aeba:	6061      	str	r1, [r4, #4]
 800aebc:	60a2      	str	r2, [r4, #8]
 800aebe:	881b      	ldrh	r3, [r3, #0]
 800aec0:	81a3      	strh	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,e");
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800aec8:	4956      	ldr	r1, [pc, #344]	; (800b024 <problem_fetch+0x99c0>)
 800aeca:	461a      	mov	r2, r3
 800aecc:	460b      	mov	r3, r1
 800aece:	cb03      	ldmia	r3!, {r0, r1}
 800aed0:	6010      	str	r0, [r2, #0]
 800aed2:	6051      	str	r1, [r2, #4]
 800aed4:	881b      	ldrh	r3, [r3, #0]
 800aed6:	8113      	strh	r3, [r2, #8]
			break;
 800aed8:	f011 baf4 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 269 :
			strcpy(p->name,"THE PEOPLE'S HEEL HOOK");
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800aee2:	4a51      	ldr	r2, [pc, #324]	; (800b028 <problem_fetch+0x99c4>)
 800aee4:	461c      	mov	r4, r3
 800aee6:	4615      	mov	r5, r2
 800aee8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800aeea:	6020      	str	r0, [r4, #0]
 800aeec:	6061      	str	r1, [r4, #4]
 800aeee:	60a2      	str	r2, [r4, #8]
 800aef0:	60e3      	str	r3, [r4, #12]
 800aef2:	6828      	ldr	r0, [r5, #0]
 800aef4:	6120      	str	r0, [r4, #16]
 800aef6:	88ab      	ldrh	r3, [r5, #4]
 800aef8:	79aa      	ldrb	r2, [r5, #6]
 800aefa:	82a3      	strh	r3, [r4, #20]
 800aefc:	4613      	mov	r3, r2
 800aefe:	75a3      	strb	r3, [r4, #22]
			strcpy(p->grade,"7A");
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800af06:	4a31      	ldr	r2, [pc, #196]	; (800afcc <problem_fetch+0x9968>)
 800af08:	8811      	ldrh	r1, [r2, #0]
 800af0a:	7892      	ldrb	r2, [r2, #2]
 800af0c:	8019      	strh	r1, [r3, #0]
 800af0e:	709a      	strb	r2, [r3, #2]
			p->moveSize = 5;
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	2205      	movs	r2, #5
 800af14:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,C,E,E,I");
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	33a4      	adds	r3, #164	; 0xa4
 800af1a:	4944      	ldr	r1, [pc, #272]	; (800b02c <problem_fetch+0x99c8>)
 800af1c:	461a      	mov	r2, r3
 800af1e:	460b      	mov	r3, r1
 800af20:	cb03      	ldmia	r3!, {r0, r1}
 800af22:	6010      	str	r0, [r2, #0]
 800af24:	6051      	str	r1, [r2, #4]
 800af26:	881b      	ldrh	r3, [r3, #0]
 800af28:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"4,8,12,14,18");
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	3304      	adds	r3, #4
 800af2e:	4a40      	ldr	r2, [pc, #256]	; (800b030 <problem_fetch+0x99cc>)
 800af30:	461c      	mov	r4, r3
 800af32:	4613      	mov	r3, r2
 800af34:	cb07      	ldmia	r3!, {r0, r1, r2}
 800af36:	6020      	str	r0, [r4, #0]
 800af38:	6061      	str	r1, [r4, #4]
 800af3a:	60a2      	str	r2, [r4, #8]
 800af3c:	781b      	ldrb	r3, [r3, #0]
 800af3e:	7323      	strb	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,e");
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800af46:	4937      	ldr	r1, [pc, #220]	; (800b024 <problem_fetch+0x99c0>)
 800af48:	461a      	mov	r2, r3
 800af4a:	460b      	mov	r3, r1
 800af4c:	cb03      	ldmia	r3!, {r0, r1}
 800af4e:	6010      	str	r0, [r2, #0]
 800af50:	6051      	str	r1, [r2, #4]
 800af52:	881b      	ldrh	r3, [r3, #0]
 800af54:	8113      	strh	r3, [r2, #8]
			break;
 800af56:	f011 bab5 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 270 :
			strcpy(p->name,"ZIO BENNY");
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800af60:	4934      	ldr	r1, [pc, #208]	; (800b034 <problem_fetch+0x99d0>)
 800af62:	461a      	mov	r2, r3
 800af64:	460b      	mov	r3, r1
 800af66:	cb03      	ldmia	r3!, {r0, r1}
 800af68:	6010      	str	r0, [r2, #0]
 800af6a:	6051      	str	r1, [r2, #4]
 800af6c:	881b      	ldrh	r3, [r3, #0]
 800af6e:	8113      	strh	r3, [r2, #8]
			strcpy(p->grade,"7A+");
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800af76:	4a1e      	ldr	r2, [pc, #120]	; (800aff0 <problem_fetch+0x998c>)
 800af78:	6810      	ldr	r0, [r2, #0]
 800af7a:	6018      	str	r0, [r3, #0]
			p->moveSize = 5;
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	2205      	movs	r2, #5
 800af80:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,G,H,E,D");
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	33a4      	adds	r3, #164	; 0xa4
 800af86:	492c      	ldr	r1, [pc, #176]	; (800b038 <problem_fetch+0x99d4>)
 800af88:	461a      	mov	r2, r3
 800af8a:	460b      	mov	r3, r1
 800af8c:	cb03      	ldmia	r3!, {r0, r1}
 800af8e:	6010      	str	r0, [r2, #0]
 800af90:	6051      	str	r1, [r2, #4]
 800af92:	881b      	ldrh	r3, [r3, #0]
 800af94:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"5,9,13,14,18");
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	3304      	adds	r3, #4
 800af9a:	4a28      	ldr	r2, [pc, #160]	; (800b03c <problem_fetch+0x99d8>)
 800af9c:	461c      	mov	r4, r3
 800af9e:	4613      	mov	r3, r2
 800afa0:	cb07      	ldmia	r3!, {r0, r1, r2}
 800afa2:	6020      	str	r0, [r4, #0]
 800afa4:	6061      	str	r1, [r4, #4]
 800afa6:	60a2      	str	r2, [r4, #8]
 800afa8:	781b      	ldrb	r3, [r3, #0]
 800afaa:	7323      	strb	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,e");
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800afb2:	491c      	ldr	r1, [pc, #112]	; (800b024 <problem_fetch+0x99c0>)
 800afb4:	461a      	mov	r2, r3
 800afb6:	460b      	mov	r3, r1
 800afb8:	cb03      	ldmia	r3!, {r0, r1}
 800afba:	6010      	str	r0, [r2, #0]
 800afbc:	6051      	str	r1, [r2, #4]
 800afbe:	881b      	ldrh	r3, [r3, #0]
 800afc0:	8113      	strh	r3, [r2, #8]
			break;
 800afc2:	f011 ba7f 	b.w	801c4c4 <problem_fetch+0x1ae60>
 800afc6:	bf00      	nop
 800afc8:	080270d4 	.word	0x080270d4
 800afcc:	08023ae4 	.word	0x08023ae4
 800afd0:	080270e8 	.word	0x080270e8
 800afd4:	080270f8 	.word	0x080270f8
 800afd8:	0802710c 	.word	0x0802710c
 800afdc:	0802711c 	.word	0x0802711c
 800afe0:	08027128 	.word	0x08027128
 800afe4:	08027130 	.word	0x08027130
 800afe8:	08023c78 	.word	0x08023c78
 800afec:	0802713c 	.word	0x0802713c
 800aff0:	08023cc4 	.word	0x08023cc4
 800aff4:	0802714c 	.word	0x0802714c
 800aff8:	08027158 	.word	0x08027158
 800affc:	08023b04 	.word	0x08023b04
 800b000:	08027168 	.word	0x08027168
 800b004:	0802421c 	.word	0x0802421c
 800b008:	0802717c 	.word	0x0802717c
 800b00c:	08027188 	.word	0x08027188
 800b010:	08023ec0 	.word	0x08023ec0
 800b014:	08027198 	.word	0x08027198
 800b018:	08023c60 	.word	0x08023c60
 800b01c:	080271a8 	.word	0x080271a8
 800b020:	08026488 	.word	0x08026488
 800b024:	08023ff0 	.word	0x08023ff0
 800b028:	080271b4 	.word	0x080271b4
 800b02c:	080271cc 	.word	0x080271cc
 800b030:	080271d8 	.word	0x080271d8
 800b034:	080271e8 	.word	0x080271e8
 800b038:	080271f4 	.word	0x080271f4
 800b03c:	08025760 	.word	0x08025760
		case 271 :
			strcpy(p->name,"ONE DAY");
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800b046:	49a9      	ldr	r1, [pc, #676]	; (800b2ec <problem_fetch+0x9c88>)
 800b048:	461a      	mov	r2, r3
 800b04a:	460b      	mov	r3, r1
 800b04c:	cb03      	ldmia	r3!, {r0, r1}
 800b04e:	6010      	str	r0, [r2, #0]
 800b050:	6051      	str	r1, [r2, #4]
			strcpy(p->grade,"6B+");
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800b058:	4aa5      	ldr	r2, [pc, #660]	; (800b2f0 <problem_fetch+0x9c8c>)
 800b05a:	6810      	ldr	r0, [r2, #0]
 800b05c:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	2207      	movs	r2, #7
 800b062:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,H,E,B,H,C,I");
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	33a4      	adds	r3, #164	; 0xa4
 800b068:	4aa2      	ldr	r2, [pc, #648]	; (800b2f4 <problem_fetch+0x9c90>)
 800b06a:	461c      	mov	r4, r3
 800b06c:	4613      	mov	r3, r2
 800b06e:	cb07      	ldmia	r3!, {r0, r1, r2}
 800b070:	6020      	str	r0, [r4, #0]
 800b072:	6061      	str	r1, [r4, #4]
 800b074:	60a2      	str	r2, [r4, #8]
 800b076:	881b      	ldrh	r3, [r3, #0]
 800b078:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,8,9,10,13,13,18");
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	3304      	adds	r3, #4
 800b07e:	4a9e      	ldr	r2, [pc, #632]	; (800b2f8 <problem_fetch+0x9c94>)
 800b080:	461d      	mov	r5, r3
 800b082:	4614      	mov	r4, r2
 800b084:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800b086:	6028      	str	r0, [r5, #0]
 800b088:	6069      	str	r1, [r5, #4]
 800b08a:	60aa      	str	r2, [r5, #8]
 800b08c:	60eb      	str	r3, [r5, #12]
 800b08e:	8823      	ldrh	r3, [r4, #0]
 800b090:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800b098:	4a98      	ldr	r2, [pc, #608]	; (800b2fc <problem_fetch+0x9c98>)
 800b09a:	461c      	mov	r4, r3
 800b09c:	4613      	mov	r3, r2
 800b09e:	cb07      	ldmia	r3!, {r0, r1, r2}
 800b0a0:	6020      	str	r0, [r4, #0]
 800b0a2:	6061      	str	r1, [r4, #4]
 800b0a4:	60a2      	str	r2, [r4, #8]
 800b0a6:	881b      	ldrh	r3, [r3, #0]
 800b0a8:	81a3      	strh	r3, [r4, #12]
			break;
 800b0aa:	f011 ba0b 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 272 :
			strcpy(p->name,"HEART OF THE SEA");
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800b0b4:	4a92      	ldr	r2, [pc, #584]	; (800b300 <problem_fetch+0x9c9c>)
 800b0b6:	461d      	mov	r5, r3
 800b0b8:	4614      	mov	r4, r2
 800b0ba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800b0bc:	6028      	str	r0, [r5, #0]
 800b0be:	6069      	str	r1, [r5, #4]
 800b0c0:	60aa      	str	r2, [r5, #8]
 800b0c2:	60eb      	str	r3, [r5, #12]
 800b0c4:	7823      	ldrb	r3, [r4, #0]
 800b0c6:	742b      	strb	r3, [r5, #16]
			strcpy(p->grade,"7A");
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800b0ce:	4a8d      	ldr	r2, [pc, #564]	; (800b304 <problem_fetch+0x9ca0>)
 800b0d0:	8811      	ldrh	r1, [r2, #0]
 800b0d2:	7892      	ldrb	r2, [r2, #2]
 800b0d4:	8019      	strh	r1, [r3, #0]
 800b0d6:	709a      	strb	r2, [r3, #2]
			p->moveSize = 7;
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	2207      	movs	r2, #7
 800b0dc:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"C,A,E,B,F,A,D");
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	33a4      	adds	r3, #164	; 0xa4
 800b0e2:	4a89      	ldr	r2, [pc, #548]	; (800b308 <problem_fetch+0x9ca4>)
 800b0e4:	461c      	mov	r4, r3
 800b0e6:	4613      	mov	r3, r2
 800b0e8:	cb07      	ldmia	r3!, {r0, r1, r2}
 800b0ea:	6020      	str	r0, [r4, #0]
 800b0ec:	6061      	str	r1, [r4, #4]
 800b0ee:	60a2      	str	r2, [r4, #8]
 800b0f0:	881b      	ldrh	r3, [r3, #0]
 800b0f2:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,9,9,6,11,14,18");
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	3304      	adds	r3, #4
 800b0f8:	4a84      	ldr	r2, [pc, #528]	; (800b30c <problem_fetch+0x9ca8>)
 800b0fa:	461d      	mov	r5, r3
 800b0fc:	4614      	mov	r4, r2
 800b0fe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800b100:	6028      	str	r0, [r5, #0]
 800b102:	6069      	str	r1, [r5, #4]
 800b104:	60aa      	str	r2, [r5, #8]
 800b106:	60eb      	str	r3, [r5, #12]
 800b108:	7823      	ldrb	r3, [r4, #0]
 800b10a:	742b      	strb	r3, [r5, #16]
			strcpy(p->startFinish,"s,d,d,s,d,d,e");
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800b112:	4a7f      	ldr	r2, [pc, #508]	; (800b310 <problem_fetch+0x9cac>)
 800b114:	461c      	mov	r4, r3
 800b116:	4613      	mov	r3, r2
 800b118:	cb07      	ldmia	r3!, {r0, r1, r2}
 800b11a:	6020      	str	r0, [r4, #0]
 800b11c:	6061      	str	r1, [r4, #4]
 800b11e:	60a2      	str	r2, [r4, #8]
 800b120:	881b      	ldrh	r3, [r3, #0]
 800b122:	81a3      	strh	r3, [r4, #12]
			break;
 800b124:	f011 b9ce 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 273 :
			strcpy(p->name,"SNEAKER JUICE DEUX");
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800b12e:	4a79      	ldr	r2, [pc, #484]	; (800b314 <problem_fetch+0x9cb0>)
 800b130:	461d      	mov	r5, r3
 800b132:	4614      	mov	r4, r2
 800b134:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800b136:	6028      	str	r0, [r5, #0]
 800b138:	6069      	str	r1, [r5, #4]
 800b13a:	60aa      	str	r2, [r5, #8]
 800b13c:	60eb      	str	r3, [r5, #12]
 800b13e:	8823      	ldrh	r3, [r4, #0]
 800b140:	78a2      	ldrb	r2, [r4, #2]
 800b142:	822b      	strh	r3, [r5, #16]
 800b144:	4613      	mov	r3, r2
 800b146:	74ab      	strb	r3, [r5, #18]
			strcpy(p->grade,"6C+");
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800b14e:	4a72      	ldr	r2, [pc, #456]	; (800b318 <problem_fetch+0x9cb4>)
 800b150:	6810      	ldr	r0, [r2, #0]
 800b152:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	2206      	movs	r2, #6
 800b158:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,E,I,F,K,I");
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	33a4      	adds	r3, #164	; 0xa4
 800b15e:	4a6f      	ldr	r2, [pc, #444]	; (800b31c <problem_fetch+0x9cb8>)
 800b160:	461c      	mov	r4, r3
 800b162:	4613      	mov	r3, r2
 800b164:	cb07      	ldmia	r3!, {r0, r1, r2}
 800b166:	6020      	str	r0, [r4, #0]
 800b168:	6061      	str	r1, [r4, #4]
 800b16a:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,8,10,13,14,18");
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	3304      	adds	r3, #4
 800b170:	4a6b      	ldr	r2, [pc, #428]	; (800b320 <problem_fetch+0x9cbc>)
 800b172:	461c      	mov	r4, r3
 800b174:	4615      	mov	r5, r2
 800b176:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b178:	6020      	str	r0, [r4, #0]
 800b17a:	6061      	str	r1, [r4, #4]
 800b17c:	60a2      	str	r2, [r4, #8]
 800b17e:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800b186:	4a67      	ldr	r2, [pc, #412]	; (800b324 <problem_fetch+0x9cc0>)
 800b188:	461c      	mov	r4, r3
 800b18a:	4613      	mov	r3, r2
 800b18c:	cb07      	ldmia	r3!, {r0, r1, r2}
 800b18e:	6020      	str	r0, [r4, #0]
 800b190:	6061      	str	r1, [r4, #4]
 800b192:	60a2      	str	r2, [r4, #8]
			break;
 800b194:	f011 b996 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 274 :
			strcpy(p->name,"THREE OF CUPS");
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800b19e:	4a62      	ldr	r2, [pc, #392]	; (800b328 <problem_fetch+0x9cc4>)
 800b1a0:	461c      	mov	r4, r3
 800b1a2:	4613      	mov	r3, r2
 800b1a4:	cb07      	ldmia	r3!, {r0, r1, r2}
 800b1a6:	6020      	str	r0, [r4, #0]
 800b1a8:	6061      	str	r1, [r4, #4]
 800b1aa:	60a2      	str	r2, [r4, #8]
 800b1ac:	881b      	ldrh	r3, [r3, #0]
 800b1ae:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade,"7A");
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800b1b6:	4a53      	ldr	r2, [pc, #332]	; (800b304 <problem_fetch+0x9ca0>)
 800b1b8:	8811      	ldrh	r1, [r2, #0]
 800b1ba:	7892      	ldrb	r2, [r2, #2]
 800b1bc:	8019      	strh	r1, [r3, #0]
 800b1be:	709a      	strb	r2, [r3, #2]
			p->moveSize = 5;
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	2205      	movs	r2, #5
 800b1c4:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"H,C,F,A,D");
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	33a4      	adds	r3, #164	; 0xa4
 800b1ca:	4958      	ldr	r1, [pc, #352]	; (800b32c <problem_fetch+0x9cc8>)
 800b1cc:	461a      	mov	r2, r3
 800b1ce:	460b      	mov	r3, r1
 800b1d0:	cb03      	ldmia	r3!, {r0, r1}
 800b1d2:	6010      	str	r0, [r2, #0]
 800b1d4:	6051      	str	r1, [r2, #4]
 800b1d6:	881b      	ldrh	r3, [r3, #0]
 800b1d8:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"5,8,11,14,18");
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	3304      	adds	r3, #4
 800b1de:	4a54      	ldr	r2, [pc, #336]	; (800b330 <problem_fetch+0x9ccc>)
 800b1e0:	461c      	mov	r4, r3
 800b1e2:	4613      	mov	r3, r2
 800b1e4:	cb07      	ldmia	r3!, {r0, r1, r2}
 800b1e6:	6020      	str	r0, [r4, #0]
 800b1e8:	6061      	str	r1, [r4, #4]
 800b1ea:	60a2      	str	r2, [r4, #8]
 800b1ec:	781b      	ldrb	r3, [r3, #0]
 800b1ee:	7323      	strb	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,e");
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800b1f6:	494f      	ldr	r1, [pc, #316]	; (800b334 <problem_fetch+0x9cd0>)
 800b1f8:	461a      	mov	r2, r3
 800b1fa:	460b      	mov	r3, r1
 800b1fc:	cb03      	ldmia	r3!, {r0, r1}
 800b1fe:	6010      	str	r0, [r2, #0]
 800b200:	6051      	str	r1, [r2, #4]
 800b202:	881b      	ldrh	r3, [r3, #0]
 800b204:	8113      	strh	r3, [r2, #8]
			break;
 800b206:	f011 b95d 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 275 :
			strcpy(p->name,"BRICK TAMLAND");
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800b210:	4a49      	ldr	r2, [pc, #292]	; (800b338 <problem_fetch+0x9cd4>)
 800b212:	461c      	mov	r4, r3
 800b214:	4613      	mov	r3, r2
 800b216:	cb07      	ldmia	r3!, {r0, r1, r2}
 800b218:	6020      	str	r0, [r4, #0]
 800b21a:	6061      	str	r1, [r4, #4]
 800b21c:	60a2      	str	r2, [r4, #8]
 800b21e:	881b      	ldrh	r3, [r3, #0]
 800b220:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade,"6C+");
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800b228:	4a3b      	ldr	r2, [pc, #236]	; (800b318 <problem_fetch+0x9cb4>)
 800b22a:	6810      	ldr	r0, [r2, #0]
 800b22c:	6018      	str	r0, [r3, #0]
			p->moveSize = 8;
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	2208      	movs	r2, #8
 800b232:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"E,G,G,J,H,G,D,G");
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	33a4      	adds	r3, #164	; 0xa4
 800b238:	4a40      	ldr	r2, [pc, #256]	; (800b33c <problem_fetch+0x9cd8>)
 800b23a:	461c      	mov	r4, r3
 800b23c:	4615      	mov	r5, r2
 800b23e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b240:	6020      	str	r0, [r4, #0]
 800b242:	6061      	str	r1, [r4, #4]
 800b244:	60a2      	str	r2, [r4, #8]
 800b246:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"6,9,10,5,12,17,18,15");
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	3304      	adds	r3, #4
 800b24c:	4a3c      	ldr	r2, [pc, #240]	; (800b340 <problem_fetch+0x9cdc>)
 800b24e:	461d      	mov	r5, r3
 800b250:	4614      	mov	r4, r2
 800b252:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800b254:	6028      	str	r0, [r5, #0]
 800b256:	6069      	str	r1, [r5, #4]
 800b258:	60aa      	str	r2, [r5, #8]
 800b25a:	60eb      	str	r3, [r5, #12]
 800b25c:	6820      	ldr	r0, [r4, #0]
 800b25e:	6128      	str	r0, [r5, #16]
 800b260:	7923      	ldrb	r3, [r4, #4]
 800b262:	752b      	strb	r3, [r5, #20]
			strcpy(p->startFinish,"s,d,d,d,d,d,e,d");
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800b26a:	4a36      	ldr	r2, [pc, #216]	; (800b344 <problem_fetch+0x9ce0>)
 800b26c:	461c      	mov	r4, r3
 800b26e:	4615      	mov	r5, r2
 800b270:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b272:	6020      	str	r0, [r4, #0]
 800b274:	6061      	str	r1, [r4, #4]
 800b276:	60a2      	str	r2, [r4, #8]
 800b278:	60e3      	str	r3, [r4, #12]
			break;
 800b27a:	f011 b923 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 276 :
			strcpy(p->name,"GET WITH IT");
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800b284:	4a30      	ldr	r2, [pc, #192]	; (800b348 <problem_fetch+0x9ce4>)
 800b286:	461c      	mov	r4, r3
 800b288:	4613      	mov	r3, r2
 800b28a:	cb07      	ldmia	r3!, {r0, r1, r2}
 800b28c:	6020      	str	r0, [r4, #0]
 800b28e:	6061      	str	r1, [r4, #4]
 800b290:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade,"7A");
 800b292:	687b      	ldr	r3, [r7, #4]
 800b294:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800b298:	4a1a      	ldr	r2, [pc, #104]	; (800b304 <problem_fetch+0x9ca0>)
 800b29a:	8811      	ldrh	r1, [r2, #0]
 800b29c:	7892      	ldrb	r2, [r2, #2]
 800b29e:	8019      	strh	r1, [r3, #0]
 800b2a0:	709a      	strb	r2, [r3, #2]
			p->moveSize = 6;
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	2206      	movs	r2, #6
 800b2a6:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"E,B,A,E,D,A");
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	33a4      	adds	r3, #164	; 0xa4
 800b2ac:	4a27      	ldr	r2, [pc, #156]	; (800b34c <problem_fetch+0x9ce8>)
 800b2ae:	461c      	mov	r4, r3
 800b2b0:	4613      	mov	r3, r2
 800b2b2:	cb07      	ldmia	r3!, {r0, r1, r2}
 800b2b4:	6020      	str	r0, [r4, #0]
 800b2b6:	6061      	str	r1, [r4, #4]
 800b2b8:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"6,12,14,8,18,9");
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	3304      	adds	r3, #4
 800b2be:	4a24      	ldr	r2, [pc, #144]	; (800b350 <problem_fetch+0x9cec>)
 800b2c0:	461c      	mov	r4, r3
 800b2c2:	4613      	mov	r3, r2
 800b2c4:	cb07      	ldmia	r3!, {r0, r1, r2}
 800b2c6:	6020      	str	r0, [r4, #0]
 800b2c8:	6061      	str	r1, [r4, #4]
 800b2ca:	60a2      	str	r2, [r4, #8]
 800b2cc:	881a      	ldrh	r2, [r3, #0]
 800b2ce:	789b      	ldrb	r3, [r3, #2]
 800b2d0:	81a2      	strh	r2, [r4, #12]
 800b2d2:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish,"s,d,d,d,e,d");
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800b2da:	4a1e      	ldr	r2, [pc, #120]	; (800b354 <problem_fetch+0x9cf0>)
 800b2dc:	461c      	mov	r4, r3
 800b2de:	4613      	mov	r3, r2
 800b2e0:	cb07      	ldmia	r3!, {r0, r1, r2}
 800b2e2:	6020      	str	r0, [r4, #0]
 800b2e4:	6061      	str	r1, [r4, #4]
 800b2e6:	60a2      	str	r2, [r4, #8]
			break;
 800b2e8:	f011 b8ec 	b.w	801c4c4 <problem_fetch+0x1ae60>
 800b2ec:	08027200 	.word	0x08027200
 800b2f0:	08023b24 	.word	0x08023b24
 800b2f4:	08027208 	.word	0x08027208
 800b2f8:	08027218 	.word	0x08027218
 800b2fc:	08023cac 	.word	0x08023cac
 800b300:	0802722c 	.word	0x0802722c
 800b304:	08023ae4 	.word	0x08023ae4
 800b308:	08027240 	.word	0x08027240
 800b30c:	08027250 	.word	0x08027250
 800b310:	08025f24 	.word	0x08025f24
 800b314:	08027264 	.word	0x08027264
 800b318:	08023bbc 	.word	0x08023bbc
 800b31c:	08027278 	.word	0x08027278
 800b320:	08027284 	.word	0x08027284
 800b324:	08023ec0 	.word	0x08023ec0
 800b328:	08027294 	.word	0x08027294
 800b32c:	080272a4 	.word	0x080272a4
 800b330:	080272b0 	.word	0x080272b0
 800b334:	08023ff0 	.word	0x08023ff0
 800b338:	080272c0 	.word	0x080272c0
 800b33c:	080272d0 	.word	0x080272d0
 800b340:	080272e0 	.word	0x080272e0
 800b344:	08024274 	.word	0x08024274
 800b348:	080272f8 	.word	0x080272f8
 800b34c:	08027304 	.word	0x08027304
 800b350:	08027310 	.word	0x08027310
 800b354:	080253a0 	.word	0x080253a0
		case 277 :
			strcpy(p->name,"MOTIVATION");
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800b35e:	49ab      	ldr	r1, [pc, #684]	; (800b60c <problem_fetch+0x9fa8>)
 800b360:	461a      	mov	r2, r3
 800b362:	460b      	mov	r3, r1
 800b364:	cb03      	ldmia	r3!, {r0, r1}
 800b366:	6010      	str	r0, [r2, #0]
 800b368:	6051      	str	r1, [r2, #4]
 800b36a:	8819      	ldrh	r1, [r3, #0]
 800b36c:	789b      	ldrb	r3, [r3, #2]
 800b36e:	8111      	strh	r1, [r2, #8]
 800b370:	7293      	strb	r3, [r2, #10]
			strcpy(p->grade,"6C+");
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800b378:	4aa5      	ldr	r2, [pc, #660]	; (800b610 <problem_fetch+0x9fac>)
 800b37a:	6810      	ldr	r0, [r2, #0]
 800b37c:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	2207      	movs	r2, #7
 800b382:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"H,J,E,E,B,B,D");
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	33a4      	adds	r3, #164	; 0xa4
 800b388:	4aa2      	ldr	r2, [pc, #648]	; (800b614 <problem_fetch+0x9fb0>)
 800b38a:	461c      	mov	r4, r3
 800b38c:	4613      	mov	r3, r2
 800b38e:	cb07      	ldmia	r3!, {r0, r1, r2}
 800b390:	6020      	str	r0, [r4, #0]
 800b392:	6061      	str	r1, [r4, #4]
 800b394:	60a2      	str	r2, [r4, #8]
 800b396:	881b      	ldrh	r3, [r3, #0]
 800b398:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,5,8,12,12,15,18");
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	3304      	adds	r3, #4
 800b39e:	4a9e      	ldr	r2, [pc, #632]	; (800b618 <problem_fetch+0x9fb4>)
 800b3a0:	461d      	mov	r5, r3
 800b3a2:	4614      	mov	r4, r2
 800b3a4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800b3a6:	6028      	str	r0, [r5, #0]
 800b3a8:	6069      	str	r1, [r5, #4]
 800b3aa:	60aa      	str	r2, [r5, #8]
 800b3ac:	60eb      	str	r3, [r5, #12]
 800b3ae:	8823      	ldrh	r3, [r4, #0]
 800b3b0:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,s,d,d,d,d,e");
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800b3b8:	4a98      	ldr	r2, [pc, #608]	; (800b61c <problem_fetch+0x9fb8>)
 800b3ba:	461c      	mov	r4, r3
 800b3bc:	4613      	mov	r3, r2
 800b3be:	cb07      	ldmia	r3!, {r0, r1, r2}
 800b3c0:	6020      	str	r0, [r4, #0]
 800b3c2:	6061      	str	r1, [r4, #4]
 800b3c4:	60a2      	str	r2, [r4, #8]
 800b3c6:	881b      	ldrh	r3, [r3, #0]
 800b3c8:	81a3      	strh	r3, [r4, #12]
			break;
 800b3ca:	f011 b87b 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 278 :
			strcpy(p->name,"SNEAKER JUICE");
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800b3d4:	4a92      	ldr	r2, [pc, #584]	; (800b620 <problem_fetch+0x9fbc>)
 800b3d6:	461c      	mov	r4, r3
 800b3d8:	4613      	mov	r3, r2
 800b3da:	cb07      	ldmia	r3!, {r0, r1, r2}
 800b3dc:	6020      	str	r0, [r4, #0]
 800b3de:	6061      	str	r1, [r4, #4]
 800b3e0:	60a2      	str	r2, [r4, #8]
 800b3e2:	881b      	ldrh	r3, [r3, #0]
 800b3e4:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade,"6B+");
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800b3ec:	4a8d      	ldr	r2, [pc, #564]	; (800b624 <problem_fetch+0x9fc0>)
 800b3ee:	6810      	ldr	r0, [r2, #0]
 800b3f0:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	2207      	movs	r2, #7
 800b3f6:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,E,K,H,I,F,I");
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	33a4      	adds	r3, #164	; 0xa4
 800b3fc:	4a8a      	ldr	r2, [pc, #552]	; (800b628 <problem_fetch+0x9fc4>)
 800b3fe:	461c      	mov	r4, r3
 800b400:	4613      	mov	r3, r2
 800b402:	cb07      	ldmia	r3!, {r0, r1, r2}
 800b404:	6020      	str	r0, [r4, #0]
 800b406:	6061      	str	r1, [r4, #4]
 800b408:	60a2      	str	r2, [r4, #8]
 800b40a:	881b      	ldrh	r3, [r3, #0]
 800b40c:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,6,14,16,18,11,10");
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	3304      	adds	r3, #4
 800b412:	4a86      	ldr	r2, [pc, #536]	; (800b62c <problem_fetch+0x9fc8>)
 800b414:	461d      	mov	r5, r3
 800b416:	4614      	mov	r4, r2
 800b418:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800b41a:	6028      	str	r0, [r5, #0]
 800b41c:	6069      	str	r1, [r5, #4]
 800b41e:	60aa      	str	r2, [r5, #8]
 800b420:	60eb      	str	r3, [r5, #12]
 800b422:	8823      	ldrh	r3, [r4, #0]
 800b424:	78a2      	ldrb	r2, [r4, #2]
 800b426:	822b      	strh	r3, [r5, #16]
 800b428:	4613      	mov	r3, r2
 800b42a:	74ab      	strb	r3, [r5, #18]
			strcpy(p->startFinish,"s,d,d,d,e,d,d");
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800b432:	4a7f      	ldr	r2, [pc, #508]	; (800b630 <problem_fetch+0x9fcc>)
 800b434:	461c      	mov	r4, r3
 800b436:	4613      	mov	r3, r2
 800b438:	cb07      	ldmia	r3!, {r0, r1, r2}
 800b43a:	6020      	str	r0, [r4, #0]
 800b43c:	6061      	str	r1, [r4, #4]
 800b43e:	60a2      	str	r2, [r4, #8]
 800b440:	881b      	ldrh	r3, [r3, #0]
 800b442:	81a3      	strh	r3, [r4, #12]
			break;
 800b444:	f011 b83e 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 279 :
			strcpy(p->name,"BUNNY GRAHAMS");
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800b44e:	4a79      	ldr	r2, [pc, #484]	; (800b634 <problem_fetch+0x9fd0>)
 800b450:	461c      	mov	r4, r3
 800b452:	4613      	mov	r3, r2
 800b454:	cb07      	ldmia	r3!, {r0, r1, r2}
 800b456:	6020      	str	r0, [r4, #0]
 800b458:	6061      	str	r1, [r4, #4]
 800b45a:	60a2      	str	r2, [r4, #8]
 800b45c:	881b      	ldrh	r3, [r3, #0]
 800b45e:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade,"6B+");
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800b466:	4a6f      	ldr	r2, [pc, #444]	; (800b624 <problem_fetch+0x9fc0>)
 800b468:	6810      	ldr	r0, [r2, #0]
 800b46a:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	2207      	movs	r2, #7
 800b470:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,E,H,J,K,I,H");
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	33a4      	adds	r3, #164	; 0xa4
 800b476:	4a70      	ldr	r2, [pc, #448]	; (800b638 <problem_fetch+0x9fd4>)
 800b478:	461c      	mov	r4, r3
 800b47a:	4613      	mov	r3, r2
 800b47c:	cb07      	ldmia	r3!, {r0, r1, r2}
 800b47e:	6020      	str	r0, [r4, #0]
 800b480:	6061      	str	r1, [r4, #4]
 800b482:	60a2      	str	r2, [r4, #8]
 800b484:	881b      	ldrh	r3, [r3, #0]
 800b486:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,6,12,13,16,18,8");
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	3304      	adds	r3, #4
 800b48c:	4a6b      	ldr	r2, [pc, #428]	; (800b63c <problem_fetch+0x9fd8>)
 800b48e:	461d      	mov	r5, r3
 800b490:	4614      	mov	r4, r2
 800b492:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800b494:	6028      	str	r0, [r5, #0]
 800b496:	6069      	str	r1, [r5, #4]
 800b498:	60aa      	str	r2, [r5, #8]
 800b49a:	60eb      	str	r3, [r5, #12]
 800b49c:	8823      	ldrh	r3, [r4, #0]
 800b49e:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,s,d,d,d,e,d");
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800b4a6:	4a66      	ldr	r2, [pc, #408]	; (800b640 <problem_fetch+0x9fdc>)
 800b4a8:	461c      	mov	r4, r3
 800b4aa:	4613      	mov	r3, r2
 800b4ac:	cb07      	ldmia	r3!, {r0, r1, r2}
 800b4ae:	6020      	str	r0, [r4, #0]
 800b4b0:	6061      	str	r1, [r4, #4]
 800b4b2:	60a2      	str	r2, [r4, #8]
 800b4b4:	881b      	ldrh	r3, [r3, #0]
 800b4b6:	81a3      	strh	r3, [r4, #12]
			break;
 800b4b8:	f011 b804 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 280 :
			strcpy(p->name,"LOOK UP TO ME");
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800b4c2:	4a60      	ldr	r2, [pc, #384]	; (800b644 <problem_fetch+0x9fe0>)
 800b4c4:	461c      	mov	r4, r3
 800b4c6:	4613      	mov	r3, r2
 800b4c8:	cb07      	ldmia	r3!, {r0, r1, r2}
 800b4ca:	6020      	str	r0, [r4, #0]
 800b4cc:	6061      	str	r1, [r4, #4]
 800b4ce:	60a2      	str	r2, [r4, #8]
 800b4d0:	881b      	ldrh	r3, [r3, #0]
 800b4d2:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade,"6C+");
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800b4da:	4a4d      	ldr	r2, [pc, #308]	; (800b610 <problem_fetch+0x9fac>)
 800b4dc:	6810      	ldr	r0, [r2, #0]
 800b4de:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	2206      	movs	r2, #6
 800b4e4:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,G,H,G,G,D");
 800b4e6:	687b      	ldr	r3, [r7, #4]
 800b4e8:	33a4      	adds	r3, #164	; 0xa4
 800b4ea:	4a57      	ldr	r2, [pc, #348]	; (800b648 <problem_fetch+0x9fe4>)
 800b4ec:	461c      	mov	r4, r3
 800b4ee:	4613      	mov	r3, r2
 800b4f0:	cb07      	ldmia	r3!, {r0, r1, r2}
 800b4f2:	6020      	str	r0, [r4, #0]
 800b4f4:	6061      	str	r1, [r4, #4]
 800b4f6:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,6,10,14,17,18");
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	3304      	adds	r3, #4
 800b4fc:	4a53      	ldr	r2, [pc, #332]	; (800b64c <problem_fetch+0x9fe8>)
 800b4fe:	461c      	mov	r4, r3
 800b500:	4615      	mov	r5, r2
 800b502:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b504:	6020      	str	r0, [r4, #0]
 800b506:	6061      	str	r1, [r4, #4]
 800b508:	60a2      	str	r2, [r4, #8]
 800b50a:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,s,d,d,d,e");
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800b512:	4a4f      	ldr	r2, [pc, #316]	; (800b650 <problem_fetch+0x9fec>)
 800b514:	461c      	mov	r4, r3
 800b516:	4613      	mov	r3, r2
 800b518:	cb07      	ldmia	r3!, {r0, r1, r2}
 800b51a:	6020      	str	r0, [r4, #0]
 800b51c:	6061      	str	r1, [r4, #4]
 800b51e:	60a2      	str	r2, [r4, #8]
			break;
 800b520:	f010 bfd0 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 281 :
			strcpy(p->name,"BOOKA");
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800b52a:	4a4a      	ldr	r2, [pc, #296]	; (800b654 <problem_fetch+0x9ff0>)
 800b52c:	6810      	ldr	r0, [r2, #0]
 800b52e:	6018      	str	r0, [r3, #0]
 800b530:	8892      	ldrh	r2, [r2, #4]
 800b532:	809a      	strh	r2, [r3, #4]
			strcpy(p->grade,"7A");
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800b53a:	4a47      	ldr	r2, [pc, #284]	; (800b658 <problem_fetch+0x9ff4>)
 800b53c:	8811      	ldrh	r1, [r2, #0]
 800b53e:	7892      	ldrb	r2, [r2, #2]
 800b540:	8019      	strh	r1, [r3, #0]
 800b542:	709a      	strb	r2, [r3, #2]
			p->moveSize = 6;
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	2206      	movs	r2, #6
 800b548:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"H,H,E,E,A,D");
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	33a4      	adds	r3, #164	; 0xa4
 800b54e:	4a43      	ldr	r2, [pc, #268]	; (800b65c <problem_fetch+0x9ff8>)
 800b550:	461c      	mov	r4, r3
 800b552:	4613      	mov	r3, r2
 800b554:	cb07      	ldmia	r3!, {r0, r1, r2}
 800b556:	6020      	str	r0, [r4, #0]
 800b558:	6061      	str	r1, [r4, #4]
 800b55a:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,8,9,12,14,18");
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	3304      	adds	r3, #4
 800b560:	4a3f      	ldr	r2, [pc, #252]	; (800b660 <problem_fetch+0x9ffc>)
 800b562:	461c      	mov	r4, r3
 800b564:	4613      	mov	r3, r2
 800b566:	cb07      	ldmia	r3!, {r0, r1, r2}
 800b568:	6020      	str	r0, [r4, #0]
 800b56a:	6061      	str	r1, [r4, #4]
 800b56c:	60a2      	str	r2, [r4, #8]
 800b56e:	881a      	ldrh	r2, [r3, #0]
 800b570:	789b      	ldrb	r3, [r3, #2]
 800b572:	81a2      	strh	r2, [r4, #12]
 800b574:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800b57c:	4a39      	ldr	r2, [pc, #228]	; (800b664 <problem_fetch+0xa000>)
 800b57e:	461c      	mov	r4, r3
 800b580:	4613      	mov	r3, r2
 800b582:	cb07      	ldmia	r3!, {r0, r1, r2}
 800b584:	6020      	str	r0, [r4, #0]
 800b586:	6061      	str	r1, [r4, #4]
 800b588:	60a2      	str	r2, [r4, #8]
			break;
 800b58a:	f010 bf9b 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 282 :
			strcpy(p->name,"FIVEB PROJ 2");
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800b594:	4a34      	ldr	r2, [pc, #208]	; (800b668 <problem_fetch+0xa004>)
 800b596:	461c      	mov	r4, r3
 800b598:	4613      	mov	r3, r2
 800b59a:	cb07      	ldmia	r3!, {r0, r1, r2}
 800b59c:	6020      	str	r0, [r4, #0]
 800b59e:	6061      	str	r1, [r4, #4]
 800b5a0:	60a2      	str	r2, [r4, #8]
 800b5a2:	781b      	ldrb	r3, [r3, #0]
 800b5a4:	7323      	strb	r3, [r4, #12]
			strcpy(p->grade,"7A+");
 800b5a6:	687b      	ldr	r3, [r7, #4]
 800b5a8:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800b5ac:	4a2f      	ldr	r2, [pc, #188]	; (800b66c <problem_fetch+0xa008>)
 800b5ae:	6810      	ldr	r0, [r2, #0]
 800b5b0:	6018      	str	r0, [r3, #0]
			p->moveSize = 10;
 800b5b2:	687b      	ldr	r3, [r7, #4]
 800b5b4:	220a      	movs	r2, #10
 800b5b6:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,J,J,H,H,F,J,G,G,D");
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	33a4      	adds	r3, #164	; 0xa4
 800b5bc:	4a2c      	ldr	r2, [pc, #176]	; (800b670 <problem_fetch+0xa00c>)
 800b5be:	461d      	mov	r5, r3
 800b5c0:	4614      	mov	r4, r2
 800b5c2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800b5c4:	6028      	str	r0, [r5, #0]
 800b5c6:	6069      	str	r1, [r5, #4]
 800b5c8:	60aa      	str	r2, [r5, #8]
 800b5ca:	60eb      	str	r3, [r5, #12]
 800b5cc:	6820      	ldr	r0, [r4, #0]
 800b5ce:	6128      	str	r0, [r5, #16]
			strcpy(p->moveNumbers,"4,5,7,8,10,11,12,15,17,18");
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	3304      	adds	r3, #4
 800b5d4:	4a27      	ldr	r2, [pc, #156]	; (800b674 <problem_fetch+0xa010>)
 800b5d6:	461d      	mov	r5, r3
 800b5d8:	4614      	mov	r4, r2
 800b5da:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800b5dc:	6028      	str	r0, [r5, #0]
 800b5de:	6069      	str	r1, [r5, #4]
 800b5e0:	60aa      	str	r2, [r5, #8]
 800b5e2:	60eb      	str	r3, [r5, #12]
 800b5e4:	cc03      	ldmia	r4!, {r0, r1}
 800b5e6:	6128      	str	r0, [r5, #16]
 800b5e8:	6169      	str	r1, [r5, #20]
 800b5ea:	8823      	ldrh	r3, [r4, #0]
 800b5ec:	832b      	strh	r3, [r5, #24]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,d,d,e");
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800b5f4:	4a20      	ldr	r2, [pc, #128]	; (800b678 <problem_fetch+0xa014>)
 800b5f6:	461d      	mov	r5, r3
 800b5f8:	4614      	mov	r4, r2
 800b5fa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800b5fc:	6028      	str	r0, [r5, #0]
 800b5fe:	6069      	str	r1, [r5, #4]
 800b600:	60aa      	str	r2, [r5, #8]
 800b602:	60eb      	str	r3, [r5, #12]
 800b604:	6820      	ldr	r0, [r4, #0]
 800b606:	6128      	str	r0, [r5, #16]
			break;
 800b608:	f010 bf5c 	b.w	801c4c4 <problem_fetch+0x1ae60>
 800b60c:	08027320 	.word	0x08027320
 800b610:	08023bbc 	.word	0x08023bbc
 800b614:	0802732c 	.word	0x0802732c
 800b618:	0802733c 	.word	0x0802733c
 800b61c:	08023b9c 	.word	0x08023b9c
 800b620:	08027350 	.word	0x08027350
 800b624:	08023b24 	.word	0x08023b24
 800b628:	08027360 	.word	0x08027360
 800b62c:	08027370 	.word	0x08027370
 800b630:	08027384 	.word	0x08027384
 800b634:	08027394 	.word	0x08027394
 800b638:	080273a4 	.word	0x080273a4
 800b63c:	080273b4 	.word	0x080273b4
 800b640:	080273c8 	.word	0x080273c8
 800b644:	080273d8 	.word	0x080273d8
 800b648:	080273e8 	.word	0x080273e8
 800b64c:	080261b0 	.word	0x080261b0
 800b650:	08023b04 	.word	0x08023b04
 800b654:	080273f4 	.word	0x080273f4
 800b658:	08023ae4 	.word	0x08023ae4
 800b65c:	080273fc 	.word	0x080273fc
 800b660:	0802404c 	.word	0x0802404c
 800b664:	08023ec0 	.word	0x08023ec0
 800b668:	08027408 	.word	0x08027408
 800b66c:	08023cc4 	.word	0x08023cc4
 800b670:	08027418 	.word	0x08027418
 800b674:	0802742c 	.word	0x0802742c
 800b678:	080243cc 	.word	0x080243cc
		case 283 :
			strcpy(p->name,"MÄX 2");
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800b682:	4ab5      	ldr	r2, [pc, #724]	; (800b958 <problem_fetch+0xa2f4>)
 800b684:	6810      	ldr	r0, [r2, #0]
 800b686:	6018      	str	r0, [r3, #0]
 800b688:	8891      	ldrh	r1, [r2, #4]
 800b68a:	7992      	ldrb	r2, [r2, #6]
 800b68c:	8099      	strh	r1, [r3, #4]
 800b68e:	719a      	strb	r2, [r3, #6]
			strcpy(p->grade,"6B+");
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800b696:	4ab1      	ldr	r2, [pc, #708]	; (800b95c <problem_fetch+0xa2f8>)
 800b698:	6810      	ldr	r0, [r2, #0]
 800b69a:	6018      	str	r0, [r3, #0]
			p->moveSize = 11;
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	220b      	movs	r2, #11
 800b6a0:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,G,H,G,F,C,D,A,C,A,A");
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	33a4      	adds	r3, #164	; 0xa4
 800b6a6:	4aae      	ldr	r2, [pc, #696]	; (800b960 <problem_fetch+0xa2fc>)
 800b6a8:	461d      	mov	r5, r3
 800b6aa:	4614      	mov	r4, r2
 800b6ac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800b6ae:	6028      	str	r0, [r5, #0]
 800b6b0:	6069      	str	r1, [r5, #4]
 800b6b2:	60aa      	str	r2, [r5, #8]
 800b6b4:	60eb      	str	r3, [r5, #12]
 800b6b6:	6820      	ldr	r0, [r4, #0]
 800b6b8:	6128      	str	r0, [r5, #16]
 800b6ba:	88a3      	ldrh	r3, [r4, #4]
 800b6bc:	82ab      	strh	r3, [r5, #20]
			strcpy(p->moveNumbers,"5,4,8,9,11,13,15,9,5,14,18");
 800b6be:	687b      	ldr	r3, [r7, #4]
 800b6c0:	3304      	adds	r3, #4
 800b6c2:	4aa8      	ldr	r2, [pc, #672]	; (800b964 <problem_fetch+0xa300>)
 800b6c4:	461d      	mov	r5, r3
 800b6c6:	4614      	mov	r4, r2
 800b6c8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800b6ca:	6028      	str	r0, [r5, #0]
 800b6cc:	6069      	str	r1, [r5, #4]
 800b6ce:	60aa      	str	r2, [r5, #8]
 800b6d0:	60eb      	str	r3, [r5, #12]
 800b6d2:	cc03      	ldmia	r4!, {r0, r1}
 800b6d4:	6128      	str	r0, [r5, #16]
 800b6d6:	6169      	str	r1, [r5, #20]
 800b6d8:	8823      	ldrh	r3, [r4, #0]
 800b6da:	78a2      	ldrb	r2, [r4, #2]
 800b6dc:	832b      	strh	r3, [r5, #24]
 800b6de:	4613      	mov	r3, r2
 800b6e0:	76ab      	strb	r3, [r5, #26]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,d,d,d,e");
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800b6e8:	4a9f      	ldr	r2, [pc, #636]	; (800b968 <problem_fetch+0xa304>)
 800b6ea:	461d      	mov	r5, r3
 800b6ec:	4614      	mov	r4, r2
 800b6ee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800b6f0:	6028      	str	r0, [r5, #0]
 800b6f2:	6069      	str	r1, [r5, #4]
 800b6f4:	60aa      	str	r2, [r5, #8]
 800b6f6:	60eb      	str	r3, [r5, #12]
 800b6f8:	6820      	ldr	r0, [r4, #0]
 800b6fa:	6128      	str	r0, [r5, #16]
 800b6fc:	88a3      	ldrh	r3, [r4, #4]
 800b6fe:	82ab      	strh	r3, [r5, #20]
			break;
 800b700:	f010 bee0 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 284 :
			strcpy(p->name,"BACK IN ACTION");
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800b70a:	4a98      	ldr	r2, [pc, #608]	; (800b96c <problem_fetch+0xa308>)
 800b70c:	461c      	mov	r4, r3
 800b70e:	4613      	mov	r3, r2
 800b710:	cb07      	ldmia	r3!, {r0, r1, r2}
 800b712:	6020      	str	r0, [r4, #0]
 800b714:	6061      	str	r1, [r4, #4]
 800b716:	60a2      	str	r2, [r4, #8]
 800b718:	881a      	ldrh	r2, [r3, #0]
 800b71a:	789b      	ldrb	r3, [r3, #2]
 800b71c:	81a2      	strh	r2, [r4, #12]
 800b71e:	73a3      	strb	r3, [r4, #14]
			strcpy(p->grade,"6B+");
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800b726:	4a8d      	ldr	r2, [pc, #564]	; (800b95c <problem_fetch+0xa2f8>)
 800b728:	6810      	ldr	r0, [r2, #0]
 800b72a:	6018      	str	r0, [r3, #0]
			p->moveSize = 8;
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	2208      	movs	r2, #8
 800b730:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"C,E,E,B,E,C,E,D");
 800b732:	687b      	ldr	r3, [r7, #4]
 800b734:	33a4      	adds	r3, #164	; 0xa4
 800b736:	4a8e      	ldr	r2, [pc, #568]	; (800b970 <problem_fetch+0xa30c>)
 800b738:	461c      	mov	r4, r3
 800b73a:	4615      	mov	r5, r2
 800b73c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b73e:	6020      	str	r0, [r4, #0]
 800b740:	6061      	str	r1, [r4, #4]
 800b742:	60a2      	str	r2, [r4, #8]
 800b744:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,6,8,10,12,13,16,18");
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	3304      	adds	r3, #4
 800b74a:	4a8a      	ldr	r2, [pc, #552]	; (800b974 <problem_fetch+0xa310>)
 800b74c:	461d      	mov	r5, r3
 800b74e:	4614      	mov	r4, r2
 800b750:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800b752:	6028      	str	r0, [r5, #0]
 800b754:	6069      	str	r1, [r5, #4]
 800b756:	60aa      	str	r2, [r5, #8]
 800b758:	60eb      	str	r3, [r5, #12]
 800b75a:	6820      	ldr	r0, [r4, #0]
 800b75c:	6128      	str	r0, [r5, #16]
 800b75e:	7923      	ldrb	r3, [r4, #4]
 800b760:	752b      	strb	r3, [r5, #20]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,e");
 800b762:	687b      	ldr	r3, [r7, #4]
 800b764:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800b768:	4a83      	ldr	r2, [pc, #524]	; (800b978 <problem_fetch+0xa314>)
 800b76a:	461c      	mov	r4, r3
 800b76c:	4615      	mov	r5, r2
 800b76e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b770:	6020      	str	r0, [r4, #0]
 800b772:	6061      	str	r1, [r4, #4]
 800b774:	60a2      	str	r2, [r4, #8]
 800b776:	60e3      	str	r3, [r4, #12]
			break;
 800b778:	f010 bea4 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 285 :
			strcpy(p->name,"THE REAL SIRIUS BLACK");
 800b77c:	687b      	ldr	r3, [r7, #4]
 800b77e:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800b782:	4a7e      	ldr	r2, [pc, #504]	; (800b97c <problem_fetch+0xa318>)
 800b784:	461d      	mov	r5, r3
 800b786:	4614      	mov	r4, r2
 800b788:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800b78a:	6028      	str	r0, [r5, #0]
 800b78c:	6069      	str	r1, [r5, #4]
 800b78e:	60aa      	str	r2, [r5, #8]
 800b790:	60eb      	str	r3, [r5, #12]
 800b792:	6820      	ldr	r0, [r4, #0]
 800b794:	6128      	str	r0, [r5, #16]
 800b796:	88a3      	ldrh	r3, [r4, #4]
 800b798:	82ab      	strh	r3, [r5, #20]
			strcpy(p->grade,"7A");
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800b7a0:	4a77      	ldr	r2, [pc, #476]	; (800b980 <problem_fetch+0xa31c>)
 800b7a2:	8811      	ldrh	r1, [r2, #0]
 800b7a4:	7892      	ldrb	r2, [r2, #2]
 800b7a6:	8019      	strh	r1, [r3, #0]
 800b7a8:	709a      	strb	r2, [r3, #2]
			p->moveSize = 7;
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	2207      	movs	r2, #7
 800b7ae:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"C,E,J,E,F,C,D");
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	33a4      	adds	r3, #164	; 0xa4
 800b7b4:	4a73      	ldr	r2, [pc, #460]	; (800b984 <problem_fetch+0xa320>)
 800b7b6:	461c      	mov	r4, r3
 800b7b8:	4613      	mov	r3, r2
 800b7ba:	cb07      	ldmia	r3!, {r0, r1, r2}
 800b7bc:	6020      	str	r0, [r4, #0]
 800b7be:	6061      	str	r1, [r4, #4]
 800b7c0:	60a2      	str	r2, [r4, #8]
 800b7c2:	881b      	ldrh	r3, [r3, #0]
 800b7c4:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,6,5,9,11,13,18");
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	3304      	adds	r3, #4
 800b7ca:	4a6f      	ldr	r2, [pc, #444]	; (800b988 <problem_fetch+0xa324>)
 800b7cc:	461d      	mov	r5, r3
 800b7ce:	4614      	mov	r4, r2
 800b7d0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800b7d2:	6028      	str	r0, [r5, #0]
 800b7d4:	6069      	str	r1, [r5, #4]
 800b7d6:	60aa      	str	r2, [r5, #8]
 800b7d8:	60eb      	str	r3, [r5, #12]
 800b7da:	7823      	ldrb	r3, [r4, #0]
 800b7dc:	742b      	strb	r3, [r5, #16]
			strcpy(p->startFinish,"s,s,d,d,d,d,e");
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800b7e4:	4a69      	ldr	r2, [pc, #420]	; (800b98c <problem_fetch+0xa328>)
 800b7e6:	461c      	mov	r4, r3
 800b7e8:	4613      	mov	r3, r2
 800b7ea:	cb07      	ldmia	r3!, {r0, r1, r2}
 800b7ec:	6020      	str	r0, [r4, #0]
 800b7ee:	6061      	str	r1, [r4, #4]
 800b7f0:	60a2      	str	r2, [r4, #8]
 800b7f2:	881b      	ldrh	r3, [r3, #0]
 800b7f4:	81a3      	strh	r3, [r4, #12]
			break;
 800b7f6:	f010 be65 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 286 :
			strcpy(p->name,"REAL SIRIUS BLACK");
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800b800:	4a63      	ldr	r2, [pc, #396]	; (800b990 <problem_fetch+0xa32c>)
 800b802:	461d      	mov	r5, r3
 800b804:	4614      	mov	r4, r2
 800b806:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800b808:	6028      	str	r0, [r5, #0]
 800b80a:	6069      	str	r1, [r5, #4]
 800b80c:	60aa      	str	r2, [r5, #8]
 800b80e:	60eb      	str	r3, [r5, #12]
 800b810:	8823      	ldrh	r3, [r4, #0]
 800b812:	822b      	strh	r3, [r5, #16]
			strcpy(p->grade,"7A");
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800b81a:	4a59      	ldr	r2, [pc, #356]	; (800b980 <problem_fetch+0xa31c>)
 800b81c:	8811      	ldrh	r1, [r2, #0]
 800b81e:	7892      	ldrb	r2, [r2, #2]
 800b820:	8019      	strh	r1, [r3, #0]
 800b822:	709a      	strb	r2, [r3, #2]
			p->moveSize = 6;
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	2206      	movs	r2, #6
 800b828:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"C,E,E,F,C,D");
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	33a4      	adds	r3, #164	; 0xa4
 800b82e:	4a59      	ldr	r2, [pc, #356]	; (800b994 <problem_fetch+0xa330>)
 800b830:	461c      	mov	r4, r3
 800b832:	4613      	mov	r3, r2
 800b834:	cb07      	ldmia	r3!, {r0, r1, r2}
 800b836:	6020      	str	r0, [r4, #0]
 800b838:	6061      	str	r1, [r4, #4]
 800b83a:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,6,9,11,13,18");
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	3304      	adds	r3, #4
 800b840:	4a55      	ldr	r2, [pc, #340]	; (800b998 <problem_fetch+0xa334>)
 800b842:	461c      	mov	r4, r3
 800b844:	4613      	mov	r3, r2
 800b846:	cb07      	ldmia	r3!, {r0, r1, r2}
 800b848:	6020      	str	r0, [r4, #0]
 800b84a:	6061      	str	r1, [r4, #4]
 800b84c:	60a2      	str	r2, [r4, #8]
 800b84e:	881a      	ldrh	r2, [r3, #0]
 800b850:	789b      	ldrb	r3, [r3, #2]
 800b852:	81a2      	strh	r2, [r4, #12]
 800b854:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish,"s,s,d,d,d,e");
 800b856:	687b      	ldr	r3, [r7, #4]
 800b858:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800b85c:	4a4f      	ldr	r2, [pc, #316]	; (800b99c <problem_fetch+0xa338>)
 800b85e:	461c      	mov	r4, r3
 800b860:	4613      	mov	r3, r2
 800b862:	cb07      	ldmia	r3!, {r0, r1, r2}
 800b864:	6020      	str	r0, [r4, #0]
 800b866:	6061      	str	r1, [r4, #4]
 800b868:	60a2      	str	r2, [r4, #8]
			break;
 800b86a:	f010 be2b 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 287 :
			strcpy(p->name,"SIRIUS BLACK");
 800b86e:	687b      	ldr	r3, [r7, #4]
 800b870:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800b874:	4a4a      	ldr	r2, [pc, #296]	; (800b9a0 <problem_fetch+0xa33c>)
 800b876:	461c      	mov	r4, r3
 800b878:	4613      	mov	r3, r2
 800b87a:	cb07      	ldmia	r3!, {r0, r1, r2}
 800b87c:	6020      	str	r0, [r4, #0]
 800b87e:	6061      	str	r1, [r4, #4]
 800b880:	60a2      	str	r2, [r4, #8]
 800b882:	781b      	ldrb	r3, [r3, #0]
 800b884:	7323      	strb	r3, [r4, #12]
			strcpy(p->grade,"7A");
 800b886:	687b      	ldr	r3, [r7, #4]
 800b888:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800b88c:	4a3c      	ldr	r2, [pc, #240]	; (800b980 <problem_fetch+0xa31c>)
 800b88e:	8811      	ldrh	r1, [r2, #0]
 800b890:	7892      	ldrb	r2, [r2, #2]
 800b892:	8019      	strh	r1, [r3, #0]
 800b894:	709a      	strb	r2, [r3, #2]
			p->moveSize = 7;
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	2207      	movs	r2, #7
 800b89a:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"C,H,E,F,J,C,D");
 800b89c:	687b      	ldr	r3, [r7, #4]
 800b89e:	33a4      	adds	r3, #164	; 0xa4
 800b8a0:	4a40      	ldr	r2, [pc, #256]	; (800b9a4 <problem_fetch+0xa340>)
 800b8a2:	461c      	mov	r4, r3
 800b8a4:	4613      	mov	r3, r2
 800b8a6:	cb07      	ldmia	r3!, {r0, r1, r2}
 800b8a8:	6020      	str	r0, [r4, #0]
 800b8aa:	6061      	str	r1, [r4, #4]
 800b8ac:	60a2      	str	r2, [r4, #8]
 800b8ae:	881b      	ldrh	r3, [r3, #0]
 800b8b0:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,5,9,11,5,13,18");
 800b8b2:	687b      	ldr	r3, [r7, #4]
 800b8b4:	3304      	adds	r3, #4
 800b8b6:	4a3c      	ldr	r2, [pc, #240]	; (800b9a8 <problem_fetch+0xa344>)
 800b8b8:	461d      	mov	r5, r3
 800b8ba:	4614      	mov	r4, r2
 800b8bc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800b8be:	6028      	str	r0, [r5, #0]
 800b8c0:	6069      	str	r1, [r5, #4]
 800b8c2:	60aa      	str	r2, [r5, #8]
 800b8c4:	60eb      	str	r3, [r5, #12]
 800b8c6:	7823      	ldrb	r3, [r4, #0]
 800b8c8:	742b      	strb	r3, [r5, #16]
			strcpy(p->startFinish,"s,s,d,d,d,d,e");
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800b8d0:	4a2e      	ldr	r2, [pc, #184]	; (800b98c <problem_fetch+0xa328>)
 800b8d2:	461c      	mov	r4, r3
 800b8d4:	4613      	mov	r3, r2
 800b8d6:	cb07      	ldmia	r3!, {r0, r1, r2}
 800b8d8:	6020      	str	r0, [r4, #0]
 800b8da:	6061      	str	r1, [r4, #4]
 800b8dc:	60a2      	str	r2, [r4, #8]
 800b8de:	881b      	ldrh	r3, [r3, #0]
 800b8e0:	81a3      	strh	r3, [r4, #12]
			break;
 800b8e2:	f010 bdef 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 288 :
			strcpy(p->name,"SUCK IT ELLIOTT");
 800b8e6:	687b      	ldr	r3, [r7, #4]
 800b8e8:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800b8ec:	4a2f      	ldr	r2, [pc, #188]	; (800b9ac <problem_fetch+0xa348>)
 800b8ee:	461c      	mov	r4, r3
 800b8f0:	4615      	mov	r5, r2
 800b8f2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b8f4:	6020      	str	r0, [r4, #0]
 800b8f6:	6061      	str	r1, [r4, #4]
 800b8f8:	60a2      	str	r2, [r4, #8]
 800b8fa:	60e3      	str	r3, [r4, #12]
			strcpy(p->grade,"7A");
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800b902:	4a1f      	ldr	r2, [pc, #124]	; (800b980 <problem_fetch+0xa31c>)
 800b904:	8811      	ldrh	r1, [r2, #0]
 800b906:	7892      	ldrb	r2, [r2, #2]
 800b908:	8019      	strh	r1, [r3, #0]
 800b90a:	709a      	strb	r2, [r3, #2]
			p->moveSize = 6;
 800b90c:	687b      	ldr	r3, [r7, #4]
 800b90e:	2206      	movs	r2, #6
 800b910:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,E,H,D,D,D");
 800b912:	687b      	ldr	r3, [r7, #4]
 800b914:	33a4      	adds	r3, #164	; 0xa4
 800b916:	4a26      	ldr	r2, [pc, #152]	; (800b9b0 <problem_fetch+0xa34c>)
 800b918:	461c      	mov	r4, r3
 800b91a:	4613      	mov	r3, r2
 800b91c:	cb07      	ldmia	r3!, {r0, r1, r2}
 800b91e:	6020      	str	r0, [r4, #0]
 800b920:	6061      	str	r1, [r4, #4]
 800b922:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,6,8,11,15,18");
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	3304      	adds	r3, #4
 800b928:	4a22      	ldr	r2, [pc, #136]	; (800b9b4 <problem_fetch+0xa350>)
 800b92a:	461c      	mov	r4, r3
 800b92c:	4613      	mov	r3, r2
 800b92e:	cb07      	ldmia	r3!, {r0, r1, r2}
 800b930:	6020      	str	r0, [r4, #0]
 800b932:	6061      	str	r1, [r4, #4]
 800b934:	60a2      	str	r2, [r4, #8]
 800b936:	881a      	ldrh	r2, [r3, #0]
 800b938:	789b      	ldrb	r3, [r3, #2]
 800b93a:	81a2      	strh	r2, [r4, #12]
 800b93c:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish,"s,s,d,d,d,e");
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800b944:	4a15      	ldr	r2, [pc, #84]	; (800b99c <problem_fetch+0xa338>)
 800b946:	461c      	mov	r4, r3
 800b948:	4613      	mov	r3, r2
 800b94a:	cb07      	ldmia	r3!, {r0, r1, r2}
 800b94c:	6020      	str	r0, [r4, #0]
 800b94e:	6061      	str	r1, [r4, #4]
 800b950:	60a2      	str	r2, [r4, #8]
			break;
 800b952:	f010 bdb7 	b.w	801c4c4 <problem_fetch+0x1ae60>
 800b956:	bf00      	nop
 800b958:	08027448 	.word	0x08027448
 800b95c:	08023b24 	.word	0x08023b24
 800b960:	08027450 	.word	0x08027450
 800b964:	08027468 	.word	0x08027468
 800b968:	08027484 	.word	0x08027484
 800b96c:	0802749c 	.word	0x0802749c
 800b970:	080274ac 	.word	0x080274ac
 800b974:	080274bc 	.word	0x080274bc
 800b978:	08023c48 	.word	0x08023c48
 800b97c:	080274d4 	.word	0x080274d4
 800b980:	08023ae4 	.word	0x08023ae4
 800b984:	080274ec 	.word	0x080274ec
 800b988:	080274fc 	.word	0x080274fc
 800b98c:	08023b9c 	.word	0x08023b9c
 800b990:	08027510 	.word	0x08027510
 800b994:	08027524 	.word	0x08027524
 800b998:	08027530 	.word	0x08027530
 800b99c:	08023b04 	.word	0x08023b04
 800b9a0:	08027540 	.word	0x08027540
 800b9a4:	08027550 	.word	0x08027550
 800b9a8:	08027560 	.word	0x08027560
 800b9ac:	08027574 	.word	0x08027574
 800b9b0:	08027584 	.word	0x08027584
 800b9b4:	08027590 	.word	0x08027590
		case 289 :
			strcpy(p->name,"SPALLA&AMP;PIATTA");
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800b9be:	4abe      	ldr	r2, [pc, #760]	; (800bcb8 <problem_fetch+0xa654>)
 800b9c0:	461d      	mov	r5, r3
 800b9c2:	4614      	mov	r4, r2
 800b9c4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800b9c6:	6028      	str	r0, [r5, #0]
 800b9c8:	6069      	str	r1, [r5, #4]
 800b9ca:	60aa      	str	r2, [r5, #8]
 800b9cc:	60eb      	str	r3, [r5, #12]
 800b9ce:	8823      	ldrh	r3, [r4, #0]
 800b9d0:	822b      	strh	r3, [r5, #16]
			strcpy(p->grade,"7A+");
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800b9d8:	4ab8      	ldr	r2, [pc, #736]	; (800bcbc <problem_fetch+0xa658>)
 800b9da:	6810      	ldr	r0, [r2, #0]
 800b9dc:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	2207      	movs	r2, #7
 800b9e2:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,H,K,F,G,D,D");
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	33a4      	adds	r3, #164	; 0xa4
 800b9e8:	4ab5      	ldr	r2, [pc, #724]	; (800bcc0 <problem_fetch+0xa65c>)
 800b9ea:	461c      	mov	r4, r3
 800b9ec:	4613      	mov	r3, r2
 800b9ee:	cb07      	ldmia	r3!, {r0, r1, r2}
 800b9f0:	6020      	str	r0, [r4, #0]
 800b9f2:	6061      	str	r1, [r4, #4]
 800b9f4:	60a2      	str	r2, [r4, #8]
 800b9f6:	881b      	ldrh	r3, [r3, #0]
 800b9f8:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,5,9,11,14,15,18");
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	3304      	adds	r3, #4
 800b9fe:	4ab1      	ldr	r2, [pc, #708]	; (800bcc4 <problem_fetch+0xa660>)
 800ba00:	461d      	mov	r5, r3
 800ba02:	4614      	mov	r4, r2
 800ba04:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800ba06:	6028      	str	r0, [r5, #0]
 800ba08:	6069      	str	r1, [r5, #4]
 800ba0a:	60aa      	str	r2, [r5, #8]
 800ba0c:	60eb      	str	r3, [r5, #12]
 800ba0e:	8823      	ldrh	r3, [r4, #0]
 800ba10:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,s,d,d,d,d,e");
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800ba18:	4aab      	ldr	r2, [pc, #684]	; (800bcc8 <problem_fetch+0xa664>)
 800ba1a:	461c      	mov	r4, r3
 800ba1c:	4613      	mov	r3, r2
 800ba1e:	cb07      	ldmia	r3!, {r0, r1, r2}
 800ba20:	6020      	str	r0, [r4, #0]
 800ba22:	6061      	str	r1, [r4, #4]
 800ba24:	60a2      	str	r2, [r4, #8]
 800ba26:	881b      	ldrh	r3, [r3, #0]
 800ba28:	81a3      	strh	r3, [r4, #12]
			break;
 800ba2a:	f010 bd4b 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 290 :
			strcpy(p->name,"몰라여");
 800ba2e:	687b      	ldr	r3, [r7, #4]
 800ba30:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800ba34:	49a5      	ldr	r1, [pc, #660]	; (800bccc <problem_fetch+0xa668>)
 800ba36:	461a      	mov	r2, r3
 800ba38:	460b      	mov	r3, r1
 800ba3a:	cb03      	ldmia	r3!, {r0, r1}
 800ba3c:	6010      	str	r0, [r2, #0]
 800ba3e:	6051      	str	r1, [r2, #4]
 800ba40:	881b      	ldrh	r3, [r3, #0]
 800ba42:	8113      	strh	r3, [r2, #8]
			strcpy(p->grade,"7A");
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800ba4a:	4aa1      	ldr	r2, [pc, #644]	; (800bcd0 <problem_fetch+0xa66c>)
 800ba4c:	8811      	ldrh	r1, [r2, #0]
 800ba4e:	7892      	ldrb	r2, [r2, #2]
 800ba50:	8019      	strh	r1, [r3, #0]
 800ba52:	709a      	strb	r2, [r3, #2]
			p->moveSize = 7;
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	2207      	movs	r2, #7
 800ba58:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"B,C,A,G,C,E,I");
 800ba5a:	687b      	ldr	r3, [r7, #4]
 800ba5c:	33a4      	adds	r3, #164	; 0xa4
 800ba5e:	4a9d      	ldr	r2, [pc, #628]	; (800bcd4 <problem_fetch+0xa670>)
 800ba60:	461c      	mov	r4, r3
 800ba62:	4613      	mov	r3, r2
 800ba64:	cb07      	ldmia	r3!, {r0, r1, r2}
 800ba66:	6020      	str	r0, [r4, #0]
 800ba68:	6061      	str	r1, [r4, #4]
 800ba6a:	60a2      	str	r2, [r4, #8]
 800ba6c:	881b      	ldrh	r3, [r3, #0]
 800ba6e:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"6,5,9,9,13,16,18");
 800ba70:	687b      	ldr	r3, [r7, #4]
 800ba72:	3304      	adds	r3, #4
 800ba74:	4a98      	ldr	r2, [pc, #608]	; (800bcd8 <problem_fetch+0xa674>)
 800ba76:	461d      	mov	r5, r3
 800ba78:	4614      	mov	r4, r2
 800ba7a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800ba7c:	6028      	str	r0, [r5, #0]
 800ba7e:	6069      	str	r1, [r5, #4]
 800ba80:	60aa      	str	r2, [r5, #8]
 800ba82:	60eb      	str	r3, [r5, #12]
 800ba84:	7823      	ldrb	r3, [r4, #0]
 800ba86:	742b      	strb	r3, [r5, #16]
			strcpy(p->startFinish,"s,s,d,d,d,d,e");
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800ba8e:	4a8e      	ldr	r2, [pc, #568]	; (800bcc8 <problem_fetch+0xa664>)
 800ba90:	461c      	mov	r4, r3
 800ba92:	4613      	mov	r3, r2
 800ba94:	cb07      	ldmia	r3!, {r0, r1, r2}
 800ba96:	6020      	str	r0, [r4, #0]
 800ba98:	6061      	str	r1, [r4, #4]
 800ba9a:	60a2      	str	r2, [r4, #8]
 800ba9c:	881b      	ldrh	r3, [r3, #0]
 800ba9e:	81a3      	strh	r3, [r4, #12]
			break;
 800baa0:	f010 bd10 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 291 :
			strcpy(p->name,"I'M RON BURGUNDY?");
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800baaa:	4a8c      	ldr	r2, [pc, #560]	; (800bcdc <problem_fetch+0xa678>)
 800baac:	461d      	mov	r5, r3
 800baae:	4614      	mov	r4, r2
 800bab0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800bab2:	6028      	str	r0, [r5, #0]
 800bab4:	6069      	str	r1, [r5, #4]
 800bab6:	60aa      	str	r2, [r5, #8]
 800bab8:	60eb      	str	r3, [r5, #12]
 800baba:	8823      	ldrh	r3, [r4, #0]
 800babc:	822b      	strh	r3, [r5, #16]
			strcpy(p->grade,"6C+");
 800babe:	687b      	ldr	r3, [r7, #4]
 800bac0:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800bac4:	4a86      	ldr	r2, [pc, #536]	; (800bce0 <problem_fetch+0xa67c>)
 800bac6:	6810      	ldr	r0, [r2, #0]
 800bac8:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	2206      	movs	r2, #6
 800bace:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,G,E,F,D,A");
 800bad0:	687b      	ldr	r3, [r7, #4]
 800bad2:	33a4      	adds	r3, #164	; 0xa4
 800bad4:	4a83      	ldr	r2, [pc, #524]	; (800bce4 <problem_fetch+0xa680>)
 800bad6:	461c      	mov	r4, r3
 800bad8:	4613      	mov	r3, r2
 800bada:	cb07      	ldmia	r3!, {r0, r1, r2}
 800badc:	6020      	str	r0, [r4, #0]
 800bade:	6061      	str	r1, [r4, #4]
 800bae0:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,9,12,13,15,18");
 800bae2:	687b      	ldr	r3, [r7, #4]
 800bae4:	3304      	adds	r3, #4
 800bae6:	4a80      	ldr	r2, [pc, #512]	; (800bce8 <problem_fetch+0xa684>)
 800bae8:	461c      	mov	r4, r3
 800baea:	4615      	mov	r5, r2
 800baec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800baee:	6020      	str	r0, [r4, #0]
 800baf0:	6061      	str	r1, [r4, #4]
 800baf2:	60a2      	str	r2, [r4, #8]
 800baf4:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 800baf6:	687b      	ldr	r3, [r7, #4]
 800baf8:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800bafc:	4a7b      	ldr	r2, [pc, #492]	; (800bcec <problem_fetch+0xa688>)
 800bafe:	461c      	mov	r4, r3
 800bb00:	4613      	mov	r3, r2
 800bb02:	cb07      	ldmia	r3!, {r0, r1, r2}
 800bb04:	6020      	str	r0, [r4, #0]
 800bb06:	6061      	str	r1, [r4, #4]
 800bb08:	60a2      	str	r2, [r4, #8]
			break;
 800bb0a:	f010 bcdb 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 292 :
			strcpy(p->name,"FUNNY");
 800bb0e:	687b      	ldr	r3, [r7, #4]
 800bb10:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800bb14:	4a76      	ldr	r2, [pc, #472]	; (800bcf0 <problem_fetch+0xa68c>)
 800bb16:	6810      	ldr	r0, [r2, #0]
 800bb18:	6018      	str	r0, [r3, #0]
 800bb1a:	8892      	ldrh	r2, [r2, #4]
 800bb1c:	809a      	strh	r2, [r3, #4]
			strcpy(p->grade,"7C");
 800bb1e:	687b      	ldr	r3, [r7, #4]
 800bb20:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800bb24:	4a73      	ldr	r2, [pc, #460]	; (800bcf4 <problem_fetch+0xa690>)
 800bb26:	8811      	ldrh	r1, [r2, #0]
 800bb28:	7892      	ldrb	r2, [r2, #2]
 800bb2a:	8019      	strh	r1, [r3, #0]
 800bb2c:	709a      	strb	r2, [r3, #2]
			p->moveSize = 5;
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	2205      	movs	r2, #5
 800bb32:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,C,I,G,I");
 800bb34:	687b      	ldr	r3, [r7, #4]
 800bb36:	33a4      	adds	r3, #164	; 0xa4
 800bb38:	496f      	ldr	r1, [pc, #444]	; (800bcf8 <problem_fetch+0xa694>)
 800bb3a:	461a      	mov	r2, r3
 800bb3c:	460b      	mov	r3, r1
 800bb3e:	cb03      	ldmia	r3!, {r0, r1}
 800bb40:	6010      	str	r0, [r2, #0]
 800bb42:	6051      	str	r1, [r2, #4]
 800bb44:	881b      	ldrh	r3, [r3, #0]
 800bb46:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"4,8,7,14,18");
 800bb48:	687b      	ldr	r3, [r7, #4]
 800bb4a:	3304      	adds	r3, #4
 800bb4c:	4a6b      	ldr	r2, [pc, #428]	; (800bcfc <problem_fetch+0xa698>)
 800bb4e:	461c      	mov	r4, r3
 800bb50:	4613      	mov	r3, r2
 800bb52:	cb07      	ldmia	r3!, {r0, r1, r2}
 800bb54:	6020      	str	r0, [r4, #0]
 800bb56:	6061      	str	r1, [r4, #4]
 800bb58:	60a2      	str	r2, [r4, #8]
			strcpy(p->startFinish,"s,d,d,d,e");
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800bb60:	4967      	ldr	r1, [pc, #412]	; (800bd00 <problem_fetch+0xa69c>)
 800bb62:	461a      	mov	r2, r3
 800bb64:	460b      	mov	r3, r1
 800bb66:	cb03      	ldmia	r3!, {r0, r1}
 800bb68:	6010      	str	r0, [r2, #0]
 800bb6a:	6051      	str	r1, [r2, #4]
 800bb6c:	881b      	ldrh	r3, [r3, #0]
 800bb6e:	8113      	strh	r3, [r2, #8]
			break;
 800bb70:	f010 bca8 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 293 :
			strcpy(p->name,"NUN");
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800bb7a:	4a62      	ldr	r2, [pc, #392]	; (800bd04 <problem_fetch+0xa6a0>)
 800bb7c:	6810      	ldr	r0, [r2, #0]
 800bb7e:	6018      	str	r0, [r3, #0]
			strcpy(p->grade,"7A+");
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800bb86:	4a4d      	ldr	r2, [pc, #308]	; (800bcbc <problem_fetch+0xa658>)
 800bb88:	6810      	ldr	r0, [r2, #0]
 800bb8a:	6018      	str	r0, [r3, #0]
			p->moveSize = 4;
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	2204      	movs	r2, #4
 800bb90:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"C,E,C,D");
 800bb92:	687b      	ldr	r3, [r7, #4]
 800bb94:	33a4      	adds	r3, #164	; 0xa4
 800bb96:	495c      	ldr	r1, [pc, #368]	; (800bd08 <problem_fetch+0xa6a4>)
 800bb98:	461a      	mov	r2, r3
 800bb9a:	460b      	mov	r3, r1
 800bb9c:	cb03      	ldmia	r3!, {r0, r1}
 800bb9e:	6010      	str	r0, [r2, #0]
 800bba0:	6051      	str	r1, [r2, #4]
			strcpy(p->moveNumbers,"5,8,13,18");
 800bba2:	687b      	ldr	r3, [r7, #4]
 800bba4:	3304      	adds	r3, #4
 800bba6:	4959      	ldr	r1, [pc, #356]	; (800bd0c <problem_fetch+0xa6a8>)
 800bba8:	461a      	mov	r2, r3
 800bbaa:	460b      	mov	r3, r1
 800bbac:	cb03      	ldmia	r3!, {r0, r1}
 800bbae:	6010      	str	r0, [r2, #0]
 800bbb0:	6051      	str	r1, [r2, #4]
 800bbb2:	881b      	ldrh	r3, [r3, #0]
 800bbb4:	8113      	strh	r3, [r2, #8]
			strcpy(p->startFinish,"s,d,d,e");
 800bbb6:	687b      	ldr	r3, [r7, #4]
 800bbb8:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800bbbc:	4954      	ldr	r1, [pc, #336]	; (800bd10 <problem_fetch+0xa6ac>)
 800bbbe:	461a      	mov	r2, r3
 800bbc0:	460b      	mov	r3, r1
 800bbc2:	cb03      	ldmia	r3!, {r0, r1}
 800bbc4:	6010      	str	r0, [r2, #0]
 800bbc6:	6051      	str	r1, [r2, #4]
			break;
 800bbc8:	f010 bc7c 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 294 :
			strcpy(p->name,"THE LAST PEA");
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800bbd2:	4a50      	ldr	r2, [pc, #320]	; (800bd14 <problem_fetch+0xa6b0>)
 800bbd4:	461c      	mov	r4, r3
 800bbd6:	4613      	mov	r3, r2
 800bbd8:	cb07      	ldmia	r3!, {r0, r1, r2}
 800bbda:	6020      	str	r0, [r4, #0]
 800bbdc:	6061      	str	r1, [r4, #4]
 800bbde:	60a2      	str	r2, [r4, #8]
 800bbe0:	781b      	ldrb	r3, [r3, #0]
 800bbe2:	7323      	strb	r3, [r4, #12]
			strcpy(p->grade,"6B+");
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800bbea:	4a4b      	ldr	r2, [pc, #300]	; (800bd18 <problem_fetch+0xa6b4>)
 800bbec:	6810      	ldr	r0, [r2, #0]
 800bbee:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	2207      	movs	r2, #7
 800bbf4:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"E,E,B,E,C,D,A");
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	33a4      	adds	r3, #164	; 0xa4
 800bbfa:	4a48      	ldr	r2, [pc, #288]	; (800bd1c <problem_fetch+0xa6b8>)
 800bbfc:	461c      	mov	r4, r3
 800bbfe:	4613      	mov	r3, r2
 800bc00:	cb07      	ldmia	r3!, {r0, r1, r2}
 800bc02:	6020      	str	r0, [r4, #0]
 800bc04:	6061      	str	r1, [r4, #4]
 800bc06:	60a2      	str	r2, [r4, #8]
 800bc08:	881b      	ldrh	r3, [r3, #0]
 800bc0a:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"6,8,10,12,13,15,18");
 800bc0c:	687b      	ldr	r3, [r7, #4]
 800bc0e:	3304      	adds	r3, #4
 800bc10:	4a43      	ldr	r2, [pc, #268]	; (800bd20 <problem_fetch+0xa6bc>)
 800bc12:	461d      	mov	r5, r3
 800bc14:	4614      	mov	r4, r2
 800bc16:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800bc18:	6028      	str	r0, [r5, #0]
 800bc1a:	6069      	str	r1, [r5, #4]
 800bc1c:	60aa      	str	r2, [r5, #8]
 800bc1e:	60eb      	str	r3, [r5, #12]
 800bc20:	8823      	ldrh	r3, [r4, #0]
 800bc22:	78a2      	ldrb	r2, [r4, #2]
 800bc24:	822b      	strh	r3, [r5, #16]
 800bc26:	4613      	mov	r3, r2
 800bc28:	74ab      	strb	r3, [r5, #18]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 800bc2a:	687b      	ldr	r3, [r7, #4]
 800bc2c:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800bc30:	4a3c      	ldr	r2, [pc, #240]	; (800bd24 <problem_fetch+0xa6c0>)
 800bc32:	461c      	mov	r4, r3
 800bc34:	4613      	mov	r3, r2
 800bc36:	cb07      	ldmia	r3!, {r0, r1, r2}
 800bc38:	6020      	str	r0, [r4, #0]
 800bc3a:	6061      	str	r1, [r4, #4]
 800bc3c:	60a2      	str	r2, [r4, #8]
 800bc3e:	881b      	ldrh	r3, [r3, #0]
 800bc40:	81a3      	strh	r3, [r4, #12]
			break;
 800bc42:	f010 bc3f 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 295 :
			strcpy(p->name,"PEAS AND GRAVY");
 800bc46:	687b      	ldr	r3, [r7, #4]
 800bc48:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800bc4c:	4a36      	ldr	r2, [pc, #216]	; (800bd28 <problem_fetch+0xa6c4>)
 800bc4e:	461c      	mov	r4, r3
 800bc50:	4613      	mov	r3, r2
 800bc52:	cb07      	ldmia	r3!, {r0, r1, r2}
 800bc54:	6020      	str	r0, [r4, #0]
 800bc56:	6061      	str	r1, [r4, #4]
 800bc58:	60a2      	str	r2, [r4, #8]
 800bc5a:	881a      	ldrh	r2, [r3, #0]
 800bc5c:	789b      	ldrb	r3, [r3, #2]
 800bc5e:	81a2      	strh	r2, [r4, #12]
 800bc60:	73a3      	strb	r3, [r4, #14]
			strcpy(p->grade,"6C");
 800bc62:	687b      	ldr	r3, [r7, #4]
 800bc64:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800bc68:	4a30      	ldr	r2, [pc, #192]	; (800bd2c <problem_fetch+0xa6c8>)
 800bc6a:	8811      	ldrh	r1, [r2, #0]
 800bc6c:	7892      	ldrb	r2, [r2, #2]
 800bc6e:	8019      	strh	r1, [r3, #0]
 800bc70:	709a      	strb	r2, [r3, #2]
			p->moveSize = 6;
 800bc72:	687b      	ldr	r3, [r7, #4]
 800bc74:	2206      	movs	r2, #6
 800bc76:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"E,J,H,C,D,A");
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	33a4      	adds	r3, #164	; 0xa4
 800bc7c:	4a2c      	ldr	r2, [pc, #176]	; (800bd30 <problem_fetch+0xa6cc>)
 800bc7e:	461c      	mov	r4, r3
 800bc80:	4613      	mov	r3, r2
 800bc82:	cb07      	ldmia	r3!, {r0, r1, r2}
 800bc84:	6020      	str	r0, [r4, #0]
 800bc86:	6061      	str	r1, [r4, #4]
 800bc88:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"6,5,10,13,15,18");
 800bc8a:	687b      	ldr	r3, [r7, #4]
 800bc8c:	3304      	adds	r3, #4
 800bc8e:	4a29      	ldr	r2, [pc, #164]	; (800bd34 <problem_fetch+0xa6d0>)
 800bc90:	461c      	mov	r4, r3
 800bc92:	4615      	mov	r5, r2
 800bc94:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800bc96:	6020      	str	r0, [r4, #0]
 800bc98:	6061      	str	r1, [r4, #4]
 800bc9a:	60a2      	str	r2, [r4, #8]
 800bc9c:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,s,d,d,d,e");
 800bc9e:	687b      	ldr	r3, [r7, #4]
 800bca0:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800bca4:	4a24      	ldr	r2, [pc, #144]	; (800bd38 <problem_fetch+0xa6d4>)
 800bca6:	461c      	mov	r4, r3
 800bca8:	4613      	mov	r3, r2
 800bcaa:	cb07      	ldmia	r3!, {r0, r1, r2}
 800bcac:	6020      	str	r0, [r4, #0]
 800bcae:	6061      	str	r1, [r4, #4]
 800bcb0:	60a2      	str	r2, [r4, #8]
			break;
 800bcb2:	f010 bc07 	b.w	801c4c4 <problem_fetch+0x1ae60>
 800bcb6:	bf00      	nop
 800bcb8:	080275a0 	.word	0x080275a0
 800bcbc:	08023cc4 	.word	0x08023cc4
 800bcc0:	080275b4 	.word	0x080275b4
 800bcc4:	080275c4 	.word	0x080275c4
 800bcc8:	08023b9c 	.word	0x08023b9c
 800bccc:	080275d8 	.word	0x080275d8
 800bcd0:	08023ae4 	.word	0x08023ae4
 800bcd4:	080275e4 	.word	0x080275e4
 800bcd8:	080275f4 	.word	0x080275f4
 800bcdc:	08027608 	.word	0x08027608
 800bce0:	08023bbc 	.word	0x08023bbc
 800bce4:	0802761c 	.word	0x0802761c
 800bce8:	08027628 	.word	0x08027628
 800bcec:	08023ec0 	.word	0x08023ec0
 800bcf0:	08027638 	.word	0x08027638
 800bcf4:	08024358 	.word	0x08024358
 800bcf8:	08027640 	.word	0x08027640
 800bcfc:	0802764c 	.word	0x0802764c
 800bd00:	08023ff0 	.word	0x08023ff0
 800bd04:	08027658 	.word	0x08027658
 800bd08:	0802765c 	.word	0x0802765c
 800bd0c:	08027664 	.word	0x08027664
 800bd10:	08023c78 	.word	0x08023c78
 800bd14:	08027670 	.word	0x08027670
 800bd18:	08023b24 	.word	0x08023b24
 800bd1c:	08027680 	.word	0x08027680
 800bd20:	08027690 	.word	0x08027690
 800bd24:	08023cac 	.word	0x08023cac
 800bd28:	080276a4 	.word	0x080276a4
 800bd2c:	08023bf0 	.word	0x08023bf0
 800bd30:	080276b4 	.word	0x080276b4
 800bd34:	080268dc 	.word	0x080268dc
 800bd38:	08023b04 	.word	0x08023b04
		case 296 :
			strcpy(p->name,"TEST111");
 800bd3c:	687b      	ldr	r3, [r7, #4]
 800bd3e:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800bd42:	49c2      	ldr	r1, [pc, #776]	; (800c04c <problem_fetch+0xa9e8>)
 800bd44:	461a      	mov	r2, r3
 800bd46:	460b      	mov	r3, r1
 800bd48:	cb03      	ldmia	r3!, {r0, r1}
 800bd4a:	6010      	str	r0, [r2, #0]
 800bd4c:	6051      	str	r1, [r2, #4]
			strcpy(p->grade,"6C");
 800bd4e:	687b      	ldr	r3, [r7, #4]
 800bd50:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800bd54:	4abe      	ldr	r2, [pc, #760]	; (800c050 <problem_fetch+0xa9ec>)
 800bd56:	8811      	ldrh	r1, [r2, #0]
 800bd58:	7892      	ldrb	r2, [r2, #2]
 800bd5a:	8019      	strh	r1, [r3, #0]
 800bd5c:	709a      	strb	r2, [r3, #2]
			p->moveSize = 7;
 800bd5e:	687b      	ldr	r3, [r7, #4]
 800bd60:	2207      	movs	r2, #7
 800bd62:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,I,H,F,E,D,A");
 800bd64:	687b      	ldr	r3, [r7, #4]
 800bd66:	33a4      	adds	r3, #164	; 0xa4
 800bd68:	4aba      	ldr	r2, [pc, #744]	; (800c054 <problem_fetch+0xa9f0>)
 800bd6a:	461c      	mov	r4, r3
 800bd6c:	4613      	mov	r3, r2
 800bd6e:	cb07      	ldmia	r3!, {r0, r1, r2}
 800bd70:	6020      	str	r0, [r4, #0]
 800bd72:	6061      	str	r1, [r4, #4]
 800bd74:	60a2      	str	r2, [r4, #8]
 800bd76:	881b      	ldrh	r3, [r3, #0]
 800bd78:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,7,8,11,12,15,18");
 800bd7a:	687b      	ldr	r3, [r7, #4]
 800bd7c:	3304      	adds	r3, #4
 800bd7e:	4ab6      	ldr	r2, [pc, #728]	; (800c058 <problem_fetch+0xa9f4>)
 800bd80:	461d      	mov	r5, r3
 800bd82:	4614      	mov	r4, r2
 800bd84:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800bd86:	6028      	str	r0, [r5, #0]
 800bd88:	6069      	str	r1, [r5, #4]
 800bd8a:	60aa      	str	r2, [r5, #8]
 800bd8c:	60eb      	str	r3, [r5, #12]
 800bd8e:	8823      	ldrh	r3, [r4, #0]
 800bd90:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 800bd92:	687b      	ldr	r3, [r7, #4]
 800bd94:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800bd98:	4ab0      	ldr	r2, [pc, #704]	; (800c05c <problem_fetch+0xa9f8>)
 800bd9a:	461c      	mov	r4, r3
 800bd9c:	4613      	mov	r3, r2
 800bd9e:	cb07      	ldmia	r3!, {r0, r1, r2}
 800bda0:	6020      	str	r0, [r4, #0]
 800bda2:	6061      	str	r1, [r4, #4]
 800bda4:	60a2      	str	r2, [r4, #8]
 800bda6:	881b      	ldrh	r3, [r3, #0]
 800bda8:	81a3      	strh	r3, [r4, #12]
			break;
 800bdaa:	f010 bb8b 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 297 :
			strcpy(p->name,"FAMILY MAN");
 800bdae:	687b      	ldr	r3, [r7, #4]
 800bdb0:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800bdb4:	49aa      	ldr	r1, [pc, #680]	; (800c060 <problem_fetch+0xa9fc>)
 800bdb6:	461a      	mov	r2, r3
 800bdb8:	460b      	mov	r3, r1
 800bdba:	cb03      	ldmia	r3!, {r0, r1}
 800bdbc:	6010      	str	r0, [r2, #0]
 800bdbe:	6051      	str	r1, [r2, #4]
 800bdc0:	8819      	ldrh	r1, [r3, #0]
 800bdc2:	789b      	ldrb	r3, [r3, #2]
 800bdc4:	8111      	strh	r1, [r2, #8]
 800bdc6:	7293      	strb	r3, [r2, #10]
			strcpy(p->grade,"6C");
 800bdc8:	687b      	ldr	r3, [r7, #4]
 800bdca:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800bdce:	4aa0      	ldr	r2, [pc, #640]	; (800c050 <problem_fetch+0xa9ec>)
 800bdd0:	8811      	ldrh	r1, [r2, #0]
 800bdd2:	7892      	ldrb	r2, [r2, #2]
 800bdd4:	8019      	strh	r1, [r3, #0]
 800bdd6:	709a      	strb	r2, [r3, #2]
			p->moveSize = 7;
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	2207      	movs	r2, #7
 800bddc:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"B,D,E,E,H,I,J");
 800bdde:	687b      	ldr	r3, [r7, #4]
 800bde0:	33a4      	adds	r3, #164	; 0xa4
 800bde2:	4aa0      	ldr	r2, [pc, #640]	; (800c064 <problem_fetch+0xaa00>)
 800bde4:	461c      	mov	r4, r3
 800bde6:	4613      	mov	r3, r2
 800bde8:	cb07      	ldmia	r3!, {r0, r1, r2}
 800bdea:	6020      	str	r0, [r4, #0]
 800bdec:	6061      	str	r1, [r4, #4]
 800bdee:	60a2      	str	r2, [r4, #8]
 800bdf0:	881b      	ldrh	r3, [r3, #0]
 800bdf2:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"15,18,12,14,5,10,5");
 800bdf4:	687b      	ldr	r3, [r7, #4]
 800bdf6:	3304      	adds	r3, #4
 800bdf8:	4a9b      	ldr	r2, [pc, #620]	; (800c068 <problem_fetch+0xaa04>)
 800bdfa:	461d      	mov	r5, r3
 800bdfc:	4614      	mov	r4, r2
 800bdfe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800be00:	6028      	str	r0, [r5, #0]
 800be02:	6069      	str	r1, [r5, #4]
 800be04:	60aa      	str	r2, [r5, #8]
 800be06:	60eb      	str	r3, [r5, #12]
 800be08:	8823      	ldrh	r3, [r4, #0]
 800be0a:	78a2      	ldrb	r2, [r4, #2]
 800be0c:	822b      	strh	r3, [r5, #16]
 800be0e:	4613      	mov	r3, r2
 800be10:	74ab      	strb	r3, [r5, #18]
			strcpy(p->startFinish,"d,e,d,d,s,d,s");
 800be12:	687b      	ldr	r3, [r7, #4]
 800be14:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800be18:	4a94      	ldr	r2, [pc, #592]	; (800c06c <problem_fetch+0xaa08>)
 800be1a:	461c      	mov	r4, r3
 800be1c:	4613      	mov	r3, r2
 800be1e:	cb07      	ldmia	r3!, {r0, r1, r2}
 800be20:	6020      	str	r0, [r4, #0]
 800be22:	6061      	str	r1, [r4, #4]
 800be24:	60a2      	str	r2, [r4, #8]
 800be26:	881b      	ldrh	r3, [r3, #0]
 800be28:	81a3      	strh	r3, [r4, #12]
			break;
 800be2a:	f010 bb4b 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 298 :
			strcpy(p->name,"FROGGERTON GOES TO SCHOOL");
 800be2e:	687b      	ldr	r3, [r7, #4]
 800be30:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800be34:	4a8e      	ldr	r2, [pc, #568]	; (800c070 <problem_fetch+0xaa0c>)
 800be36:	461d      	mov	r5, r3
 800be38:	4614      	mov	r4, r2
 800be3a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800be3c:	6028      	str	r0, [r5, #0]
 800be3e:	6069      	str	r1, [r5, #4]
 800be40:	60aa      	str	r2, [r5, #8]
 800be42:	60eb      	str	r3, [r5, #12]
 800be44:	cc03      	ldmia	r4!, {r0, r1}
 800be46:	6128      	str	r0, [r5, #16]
 800be48:	6169      	str	r1, [r5, #20]
 800be4a:	8823      	ldrh	r3, [r4, #0]
 800be4c:	832b      	strh	r3, [r5, #24]
			strcpy(p->grade,"6B+");
 800be4e:	687b      	ldr	r3, [r7, #4]
 800be50:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800be54:	4a87      	ldr	r2, [pc, #540]	; (800c074 <problem_fetch+0xaa10>)
 800be56:	6810      	ldr	r0, [r2, #0]
 800be58:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 800be5a:	687b      	ldr	r3, [r7, #4]
 800be5c:	2206      	movs	r2, #6
 800be5e:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,E,D,C,A,A");
 800be60:	687b      	ldr	r3, [r7, #4]
 800be62:	33a4      	adds	r3, #164	; 0xa4
 800be64:	4a84      	ldr	r2, [pc, #528]	; (800c078 <problem_fetch+0xaa14>)
 800be66:	461c      	mov	r4, r3
 800be68:	4613      	mov	r3, r2
 800be6a:	cb07      	ldmia	r3!, {r0, r1, r2}
 800be6c:	6020      	str	r0, [r4, #0]
 800be6e:	6061      	str	r1, [r4, #4]
 800be70:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,8,11,13,14,18");
 800be72:	687b      	ldr	r3, [r7, #4]
 800be74:	3304      	adds	r3, #4
 800be76:	4a81      	ldr	r2, [pc, #516]	; (800c07c <problem_fetch+0xaa18>)
 800be78:	461c      	mov	r4, r3
 800be7a:	4615      	mov	r5, r2
 800be7c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800be7e:	6020      	str	r0, [r4, #0]
 800be80:	6061      	str	r1, [r4, #4]
 800be82:	60a2      	str	r2, [r4, #8]
 800be84:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 800be86:	687b      	ldr	r3, [r7, #4]
 800be88:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800be8c:	4a7c      	ldr	r2, [pc, #496]	; (800c080 <problem_fetch+0xaa1c>)
 800be8e:	461c      	mov	r4, r3
 800be90:	4613      	mov	r3, r2
 800be92:	cb07      	ldmia	r3!, {r0, r1, r2}
 800be94:	6020      	str	r0, [r4, #0]
 800be96:	6061      	str	r1, [r4, #4]
 800be98:	60a2      	str	r2, [r4, #8]
			break;
 800be9a:	f010 bb13 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 299 :
			strcpy(p->name,"BOCHANPOWER");
 800be9e:	687b      	ldr	r3, [r7, #4]
 800bea0:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800bea4:	4a77      	ldr	r2, [pc, #476]	; (800c084 <problem_fetch+0xaa20>)
 800bea6:	461c      	mov	r4, r3
 800bea8:	4613      	mov	r3, r2
 800beaa:	cb07      	ldmia	r3!, {r0, r1, r2}
 800beac:	6020      	str	r0, [r4, #0]
 800beae:	6061      	str	r1, [r4, #4]
 800beb0:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade,"7A+");
 800beb2:	687b      	ldr	r3, [r7, #4]
 800beb4:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800beb8:	4a73      	ldr	r2, [pc, #460]	; (800c088 <problem_fetch+0xaa24>)
 800beba:	6810      	ldr	r0, [r2, #0]
 800bebc:	6018      	str	r0, [r3, #0]
			p->moveSize = 5;
 800bebe:	687b      	ldr	r3, [r7, #4]
 800bec0:	2205      	movs	r2, #5
 800bec2:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,G,E,G,D");
 800bec4:	687b      	ldr	r3, [r7, #4]
 800bec6:	33a4      	adds	r3, #164	; 0xa4
 800bec8:	4970      	ldr	r1, [pc, #448]	; (800c08c <problem_fetch+0xaa28>)
 800beca:	461a      	mov	r2, r3
 800becc:	460b      	mov	r3, r1
 800bece:	cb03      	ldmia	r3!, {r0, r1}
 800bed0:	6010      	str	r0, [r2, #0]
 800bed2:	6051      	str	r1, [r2, #4]
 800bed4:	881b      	ldrh	r3, [r3, #0]
 800bed6:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"4,9,8,14,18");
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	3304      	adds	r3, #4
 800bedc:	4a6c      	ldr	r2, [pc, #432]	; (800c090 <problem_fetch+0xaa2c>)
 800bede:	461c      	mov	r4, r3
 800bee0:	4613      	mov	r3, r2
 800bee2:	cb07      	ldmia	r3!, {r0, r1, r2}
 800bee4:	6020      	str	r0, [r4, #0]
 800bee6:	6061      	str	r1, [r4, #4]
 800bee8:	60a2      	str	r2, [r4, #8]
			strcpy(p->startFinish,"s,d,d,d,e");
 800beea:	687b      	ldr	r3, [r7, #4]
 800beec:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800bef0:	4968      	ldr	r1, [pc, #416]	; (800c094 <problem_fetch+0xaa30>)
 800bef2:	461a      	mov	r2, r3
 800bef4:	460b      	mov	r3, r1
 800bef6:	cb03      	ldmia	r3!, {r0, r1}
 800bef8:	6010      	str	r0, [r2, #0]
 800befa:	6051      	str	r1, [r2, #4]
 800befc:	881b      	ldrh	r3, [r3, #0]
 800befe:	8113      	strh	r3, [r2, #8]
			break;
 800bf00:	f010 bae0 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 300 :
			strcpy(p->name,"ENRON");
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800bf0a:	4a63      	ldr	r2, [pc, #396]	; (800c098 <problem_fetch+0xaa34>)
 800bf0c:	6810      	ldr	r0, [r2, #0]
 800bf0e:	6018      	str	r0, [r3, #0]
 800bf10:	8892      	ldrh	r2, [r2, #4]
 800bf12:	809a      	strh	r2, [r3, #4]
			strcpy(p->grade,"7A");
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800bf1a:	4a60      	ldr	r2, [pc, #384]	; (800c09c <problem_fetch+0xaa38>)
 800bf1c:	8811      	ldrh	r1, [r2, #0]
 800bf1e:	7892      	ldrb	r2, [r2, #2]
 800bf20:	8019      	strh	r1, [r3, #0]
 800bf22:	709a      	strb	r2, [r3, #2]
			p->moveSize = 7;
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	2207      	movs	r2, #7
 800bf28:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,E,E,B,E,B,D");
 800bf2a:	687b      	ldr	r3, [r7, #4]
 800bf2c:	33a4      	adds	r3, #164	; 0xa4
 800bf2e:	4a5c      	ldr	r2, [pc, #368]	; (800c0a0 <problem_fetch+0xaa3c>)
 800bf30:	461c      	mov	r4, r3
 800bf32:	4613      	mov	r3, r2
 800bf34:	cb07      	ldmia	r3!, {r0, r1, r2}
 800bf36:	6020      	str	r0, [r4, #0]
 800bf38:	6061      	str	r1, [r4, #4]
 800bf3a:	60a2      	str	r2, [r4, #8]
 800bf3c:	881b      	ldrh	r3, [r3, #0]
 800bf3e:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,6,9,12,12,15,18");
 800bf40:	687b      	ldr	r3, [r7, #4]
 800bf42:	3304      	adds	r3, #4
 800bf44:	4a57      	ldr	r2, [pc, #348]	; (800c0a4 <problem_fetch+0xaa40>)
 800bf46:	461d      	mov	r5, r3
 800bf48:	4614      	mov	r4, r2
 800bf4a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800bf4c:	6028      	str	r0, [r5, #0]
 800bf4e:	6069      	str	r1, [r5, #4]
 800bf50:	60aa      	str	r2, [r5, #8]
 800bf52:	60eb      	str	r3, [r5, #12]
 800bf54:	8823      	ldrh	r3, [r4, #0]
 800bf56:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,s,d,d,d,d,e");
 800bf58:	687b      	ldr	r3, [r7, #4]
 800bf5a:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800bf5e:	4a52      	ldr	r2, [pc, #328]	; (800c0a8 <problem_fetch+0xaa44>)
 800bf60:	461c      	mov	r4, r3
 800bf62:	4613      	mov	r3, r2
 800bf64:	cb07      	ldmia	r3!, {r0, r1, r2}
 800bf66:	6020      	str	r0, [r4, #0]
 800bf68:	6061      	str	r1, [r4, #4]
 800bf6a:	60a2      	str	r2, [r4, #8]
 800bf6c:	881b      	ldrh	r3, [r3, #0]
 800bf6e:	81a3      	strh	r3, [r4, #12]
			break;
 800bf70:	f010 baa8 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 301 :
			strcpy(p->name,"RON DUC DONG");
 800bf74:	687b      	ldr	r3, [r7, #4]
 800bf76:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800bf7a:	4a4c      	ldr	r2, [pc, #304]	; (800c0ac <problem_fetch+0xaa48>)
 800bf7c:	461c      	mov	r4, r3
 800bf7e:	4613      	mov	r3, r2
 800bf80:	cb07      	ldmia	r3!, {r0, r1, r2}
 800bf82:	6020      	str	r0, [r4, #0]
 800bf84:	6061      	str	r1, [r4, #4]
 800bf86:	60a2      	str	r2, [r4, #8]
 800bf88:	781b      	ldrb	r3, [r3, #0]
 800bf8a:	7323      	strb	r3, [r4, #12]
			strcpy(p->grade,"6C+");
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800bf92:	4a47      	ldr	r2, [pc, #284]	; (800c0b0 <problem_fetch+0xaa4c>)
 800bf94:	6810      	ldr	r0, [r2, #0]
 800bf96:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	2207      	movs	r2, #7
 800bf9c:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"H,J,G,E,I,E,D");
 800bf9e:	687b      	ldr	r3, [r7, #4]
 800bfa0:	33a4      	adds	r3, #164	; 0xa4
 800bfa2:	4a44      	ldr	r2, [pc, #272]	; (800c0b4 <problem_fetch+0xaa50>)
 800bfa4:	461c      	mov	r4, r3
 800bfa6:	4613      	mov	r3, r2
 800bfa8:	cb07      	ldmia	r3!, {r0, r1, r2}
 800bfaa:	6020      	str	r0, [r4, #0]
 800bfac:	6061      	str	r1, [r4, #4]
 800bfae:	60a2      	str	r2, [r4, #8]
 800bfb0:	881b      	ldrh	r3, [r3, #0]
 800bfb2:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,5,9,12,14,16,18");
 800bfb4:	687b      	ldr	r3, [r7, #4]
 800bfb6:	3304      	adds	r3, #4
 800bfb8:	4a3f      	ldr	r2, [pc, #252]	; (800c0b8 <problem_fetch+0xaa54>)
 800bfba:	461d      	mov	r5, r3
 800bfbc:	4614      	mov	r4, r2
 800bfbe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800bfc0:	6028      	str	r0, [r5, #0]
 800bfc2:	6069      	str	r1, [r5, #4]
 800bfc4:	60aa      	str	r2, [r5, #8]
 800bfc6:	60eb      	str	r3, [r5, #12]
 800bfc8:	8823      	ldrh	r3, [r4, #0]
 800bfca:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,s,d,d,d,d,e");
 800bfcc:	687b      	ldr	r3, [r7, #4]
 800bfce:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800bfd2:	4a35      	ldr	r2, [pc, #212]	; (800c0a8 <problem_fetch+0xaa44>)
 800bfd4:	461c      	mov	r4, r3
 800bfd6:	4613      	mov	r3, r2
 800bfd8:	cb07      	ldmia	r3!, {r0, r1, r2}
 800bfda:	6020      	str	r0, [r4, #0]
 800bfdc:	6061      	str	r1, [r4, #4]
 800bfde:	60a2      	str	r2, [r4, #8]
 800bfe0:	881b      	ldrh	r3, [r3, #0]
 800bfe2:	81a3      	strh	r3, [r4, #12]
			break;
 800bfe4:	f010 ba6e 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 302 :
			strcpy(p->name,"OKTRY");
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800bfee:	4a33      	ldr	r2, [pc, #204]	; (800c0bc <problem_fetch+0xaa58>)
 800bff0:	6810      	ldr	r0, [r2, #0]
 800bff2:	6018      	str	r0, [r3, #0]
 800bff4:	8892      	ldrh	r2, [r2, #4]
 800bff6:	809a      	strh	r2, [r3, #4]
			strcpy(p->grade,"6B+");
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800bffe:	4a1d      	ldr	r2, [pc, #116]	; (800c074 <problem_fetch+0xaa10>)
 800c000:	6810      	ldr	r0, [r2, #0]
 800c002:	6018      	str	r0, [r3, #0]
			p->moveSize = 5;
 800c004:	687b      	ldr	r3, [r7, #4]
 800c006:	2205      	movs	r2, #5
 800c008:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"C,E,C,C,D");
 800c00a:	687b      	ldr	r3, [r7, #4]
 800c00c:	33a4      	adds	r3, #164	; 0xa4
 800c00e:	492c      	ldr	r1, [pc, #176]	; (800c0c0 <problem_fetch+0xaa5c>)
 800c010:	461a      	mov	r2, r3
 800c012:	460b      	mov	r3, r1
 800c014:	cb03      	ldmia	r3!, {r0, r1}
 800c016:	6010      	str	r0, [r2, #0]
 800c018:	6051      	str	r1, [r2, #4]
 800c01a:	881b      	ldrh	r3, [r3, #0]
 800c01c:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"5,6,8,13,18");
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	3304      	adds	r3, #4
 800c022:	4a28      	ldr	r2, [pc, #160]	; (800c0c4 <problem_fetch+0xaa60>)
 800c024:	461c      	mov	r4, r3
 800c026:	4613      	mov	r3, r2
 800c028:	cb07      	ldmia	r3!, {r0, r1, r2}
 800c02a:	6020      	str	r0, [r4, #0]
 800c02c:	6061      	str	r1, [r4, #4]
 800c02e:	60a2      	str	r2, [r4, #8]
			strcpy(p->startFinish,"s,s,d,d,e");
 800c030:	687b      	ldr	r3, [r7, #4]
 800c032:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800c036:	4924      	ldr	r1, [pc, #144]	; (800c0c8 <problem_fetch+0xaa64>)
 800c038:	461a      	mov	r2, r3
 800c03a:	460b      	mov	r3, r1
 800c03c:	cb03      	ldmia	r3!, {r0, r1}
 800c03e:	6010      	str	r0, [r2, #0]
 800c040:	6051      	str	r1, [r2, #4]
 800c042:	881b      	ldrh	r3, [r3, #0]
 800c044:	8113      	strh	r3, [r2, #8]
			break;
 800c046:	f010 ba3d 	b.w	801c4c4 <problem_fetch+0x1ae60>
 800c04a:	bf00      	nop
 800c04c:	080276c0 	.word	0x080276c0
 800c050:	08023bf0 	.word	0x08023bf0
 800c054:	080276c8 	.word	0x080276c8
 800c058:	080276d8 	.word	0x080276d8
 800c05c:	08023cac 	.word	0x08023cac
 800c060:	080276ec 	.word	0x080276ec
 800c064:	080276f8 	.word	0x080276f8
 800c068:	08027708 	.word	0x08027708
 800c06c:	0802771c 	.word	0x0802771c
 800c070:	0802772c 	.word	0x0802772c
 800c074:	08023b24 	.word	0x08023b24
 800c078:	08027748 	.word	0x08027748
 800c07c:	08027754 	.word	0x08027754
 800c080:	08023ec0 	.word	0x08023ec0
 800c084:	08027764 	.word	0x08027764
 800c088:	08023cc4 	.word	0x08023cc4
 800c08c:	08027770 	.word	0x08027770
 800c090:	0802777c 	.word	0x0802777c
 800c094:	08023ff0 	.word	0x08023ff0
 800c098:	08027788 	.word	0x08027788
 800c09c:	08023ae4 	.word	0x08023ae4
 800c0a0:	08027790 	.word	0x08027790
 800c0a4:	080277a0 	.word	0x080277a0
 800c0a8:	08023b9c 	.word	0x08023b9c
 800c0ac:	080277b4 	.word	0x080277b4
 800c0b0:	08023bbc 	.word	0x08023bbc
 800c0b4:	080277c4 	.word	0x080277c4
 800c0b8:	080277d4 	.word	0x080277d4
 800c0bc:	080277e8 	.word	0x080277e8
 800c0c0:	080277f0 	.word	0x080277f0
 800c0c4:	080277fc 	.word	0x080277fc
 800c0c8:	08024204 	.word	0x08024204
		case 303 :
			strcpy(p->name,"TRYTRYTRY");
 800c0cc:	687b      	ldr	r3, [r7, #4]
 800c0ce:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800c0d2:	49be      	ldr	r1, [pc, #760]	; (800c3cc <problem_fetch+0xad68>)
 800c0d4:	461a      	mov	r2, r3
 800c0d6:	460b      	mov	r3, r1
 800c0d8:	cb03      	ldmia	r3!, {r0, r1}
 800c0da:	6010      	str	r0, [r2, #0]
 800c0dc:	6051      	str	r1, [r2, #4]
 800c0de:	881b      	ldrh	r3, [r3, #0]
 800c0e0:	8113      	strh	r3, [r2, #8]
			strcpy(p->grade,"6B+");
 800c0e2:	687b      	ldr	r3, [r7, #4]
 800c0e4:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800c0e8:	4ab9      	ldr	r2, [pc, #740]	; (800c3d0 <problem_fetch+0xad6c>)
 800c0ea:	6810      	ldr	r0, [r2, #0]
 800c0ec:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 800c0ee:	687b      	ldr	r3, [r7, #4]
 800c0f0:	2206      	movs	r2, #6
 800c0f2:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"C,E,C,E,G,D");
 800c0f4:	687b      	ldr	r3, [r7, #4]
 800c0f6:	33a4      	adds	r3, #164	; 0xa4
 800c0f8:	4ab6      	ldr	r2, [pc, #728]	; (800c3d4 <problem_fetch+0xad70>)
 800c0fa:	461c      	mov	r4, r3
 800c0fc:	4613      	mov	r3, r2
 800c0fe:	cb07      	ldmia	r3!, {r0, r1, r2}
 800c100:	6020      	str	r0, [r4, #0]
 800c102:	6061      	str	r1, [r4, #4]
 800c104:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,6,13,8,9,18");
 800c106:	687b      	ldr	r3, [r7, #4]
 800c108:	3304      	adds	r3, #4
 800c10a:	4ab3      	ldr	r2, [pc, #716]	; (800c3d8 <problem_fetch+0xad74>)
 800c10c:	461c      	mov	r4, r3
 800c10e:	4613      	mov	r3, r2
 800c110:	cb07      	ldmia	r3!, {r0, r1, r2}
 800c112:	6020      	str	r0, [r4, #0]
 800c114:	6061      	str	r1, [r4, #4]
 800c116:	60a2      	str	r2, [r4, #8]
 800c118:	881b      	ldrh	r3, [r3, #0]
 800c11a:	81a3      	strh	r3, [r4, #12]
			strcpy(p->startFinish,"s,s,d,d,d,e");
 800c11c:	687b      	ldr	r3, [r7, #4]
 800c11e:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800c122:	4aae      	ldr	r2, [pc, #696]	; (800c3dc <problem_fetch+0xad78>)
 800c124:	461c      	mov	r4, r3
 800c126:	4613      	mov	r3, r2
 800c128:	cb07      	ldmia	r3!, {r0, r1, r2}
 800c12a:	6020      	str	r0, [r4, #0]
 800c12c:	6061      	str	r1, [r4, #4]
 800c12e:	60a2      	str	r2, [r4, #8]
			break;
 800c130:	f010 b9c8 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 304 :
			strcpy(p->name,"TRYTRY");
 800c134:	687b      	ldr	r3, [r7, #4]
 800c136:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800c13a:	4aa9      	ldr	r2, [pc, #676]	; (800c3e0 <problem_fetch+0xad7c>)
 800c13c:	6810      	ldr	r0, [r2, #0]
 800c13e:	6018      	str	r0, [r3, #0]
 800c140:	8891      	ldrh	r1, [r2, #4]
 800c142:	7992      	ldrb	r2, [r2, #6]
 800c144:	8099      	strh	r1, [r3, #4]
 800c146:	719a      	strb	r2, [r3, #6]
			strcpy(p->grade,"6B+");
 800c148:	687b      	ldr	r3, [r7, #4]
 800c14a:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800c14e:	4aa0      	ldr	r2, [pc, #640]	; (800c3d0 <problem_fetch+0xad6c>)
 800c150:	6810      	ldr	r0, [r2, #0]
 800c152:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 800c154:	687b      	ldr	r3, [r7, #4]
 800c156:	2207      	movs	r2, #7
 800c158:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,C,C,B,C,C,A");
 800c15a:	687b      	ldr	r3, [r7, #4]
 800c15c:	33a4      	adds	r3, #164	; 0xa4
 800c15e:	4aa1      	ldr	r2, [pc, #644]	; (800c3e4 <problem_fetch+0xad80>)
 800c160:	461c      	mov	r4, r3
 800c162:	4613      	mov	r3, r2
 800c164:	cb07      	ldmia	r3!, {r0, r1, r2}
 800c166:	6020      	str	r0, [r4, #0]
 800c168:	6061      	str	r1, [r4, #4]
 800c16a:	60a2      	str	r2, [r4, #8]
 800c16c:	881b      	ldrh	r3, [r3, #0]
 800c16e:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,5,8,10,13,16,18");
 800c170:	687b      	ldr	r3, [r7, #4]
 800c172:	3304      	adds	r3, #4
 800c174:	4a9c      	ldr	r2, [pc, #624]	; (800c3e8 <problem_fetch+0xad84>)
 800c176:	461d      	mov	r5, r3
 800c178:	4614      	mov	r4, r2
 800c17a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800c17c:	6028      	str	r0, [r5, #0]
 800c17e:	6069      	str	r1, [r5, #4]
 800c180:	60aa      	str	r2, [r5, #8]
 800c182:	60eb      	str	r3, [r5, #12]
 800c184:	8823      	ldrh	r3, [r4, #0]
 800c186:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,s,d,d,d,d,e");
 800c188:	687b      	ldr	r3, [r7, #4]
 800c18a:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800c18e:	4a97      	ldr	r2, [pc, #604]	; (800c3ec <problem_fetch+0xad88>)
 800c190:	461c      	mov	r4, r3
 800c192:	4613      	mov	r3, r2
 800c194:	cb07      	ldmia	r3!, {r0, r1, r2}
 800c196:	6020      	str	r0, [r4, #0]
 800c198:	6061      	str	r1, [r4, #4]
 800c19a:	60a2      	str	r2, [r4, #8]
 800c19c:	881b      	ldrh	r3, [r3, #0]
 800c19e:	81a3      	strh	r3, [r4, #12]
			break;
 800c1a0:	f010 b990 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 305 :
			strcpy(p->name,"FOLLIA1");
 800c1a4:	687b      	ldr	r3, [r7, #4]
 800c1a6:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800c1aa:	4991      	ldr	r1, [pc, #580]	; (800c3f0 <problem_fetch+0xad8c>)
 800c1ac:	461a      	mov	r2, r3
 800c1ae:	460b      	mov	r3, r1
 800c1b0:	cb03      	ldmia	r3!, {r0, r1}
 800c1b2:	6010      	str	r0, [r2, #0]
 800c1b4:	6051      	str	r1, [r2, #4]
			strcpy(p->grade,"6B+");
 800c1b6:	687b      	ldr	r3, [r7, #4]
 800c1b8:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800c1bc:	4a84      	ldr	r2, [pc, #528]	; (800c3d0 <problem_fetch+0xad6c>)
 800c1be:	6810      	ldr	r0, [r2, #0]
 800c1c0:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 800c1c2:	687b      	ldr	r3, [r7, #4]
 800c1c4:	2207      	movs	r2, #7
 800c1c6:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,G,H,G,H,G,I");
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	33a4      	adds	r3, #164	; 0xa4
 800c1cc:	4a89      	ldr	r2, [pc, #548]	; (800c3f4 <problem_fetch+0xad90>)
 800c1ce:	461c      	mov	r4, r3
 800c1d0:	4613      	mov	r3, r2
 800c1d2:	cb07      	ldmia	r3!, {r0, r1, r2}
 800c1d4:	6020      	str	r0, [r4, #0]
 800c1d6:	6061      	str	r1, [r4, #4]
 800c1d8:	60a2      	str	r2, [r4, #8]
 800c1da:	881b      	ldrh	r3, [r3, #0]
 800c1dc:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,6,8,10,13,14,18");
 800c1de:	687b      	ldr	r3, [r7, #4]
 800c1e0:	3304      	adds	r3, #4
 800c1e2:	4a85      	ldr	r2, [pc, #532]	; (800c3f8 <problem_fetch+0xad94>)
 800c1e4:	461d      	mov	r5, r3
 800c1e6:	4614      	mov	r4, r2
 800c1e8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800c1ea:	6028      	str	r0, [r5, #0]
 800c1ec:	6069      	str	r1, [r5, #4]
 800c1ee:	60aa      	str	r2, [r5, #8]
 800c1f0:	60eb      	str	r3, [r5, #12]
 800c1f2:	8823      	ldrh	r3, [r4, #0]
 800c1f4:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,s,d,d,d,d,e");
 800c1f6:	687b      	ldr	r3, [r7, #4]
 800c1f8:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800c1fc:	4a7b      	ldr	r2, [pc, #492]	; (800c3ec <problem_fetch+0xad88>)
 800c1fe:	461c      	mov	r4, r3
 800c200:	4613      	mov	r3, r2
 800c202:	cb07      	ldmia	r3!, {r0, r1, r2}
 800c204:	6020      	str	r0, [r4, #0]
 800c206:	6061      	str	r1, [r4, #4]
 800c208:	60a2      	str	r2, [r4, #8]
 800c20a:	881b      	ldrh	r3, [r3, #0]
 800c20c:	81a3      	strh	r3, [r4, #12]
			break;
 800c20e:	f010 b959 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 306 :
			strcpy(p->name,"JH 1.0");
 800c212:	687b      	ldr	r3, [r7, #4]
 800c214:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800c218:	4a78      	ldr	r2, [pc, #480]	; (800c3fc <problem_fetch+0xad98>)
 800c21a:	6810      	ldr	r0, [r2, #0]
 800c21c:	6018      	str	r0, [r3, #0]
 800c21e:	8891      	ldrh	r1, [r2, #4]
 800c220:	7992      	ldrb	r2, [r2, #6]
 800c222:	8099      	strh	r1, [r3, #4]
 800c224:	719a      	strb	r2, [r3, #6]
			strcpy(p->grade,"7B+");
 800c226:	687b      	ldr	r3, [r7, #4]
 800c228:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800c22c:	4a74      	ldr	r2, [pc, #464]	; (800c400 <problem_fetch+0xad9c>)
 800c22e:	6810      	ldr	r0, [r2, #0]
 800c230:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 800c232:	687b      	ldr	r3, [r7, #4]
 800c234:	2207      	movs	r2, #7
 800c236:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,H,C,E,B,G,I");
 800c238:	687b      	ldr	r3, [r7, #4]
 800c23a:	33a4      	adds	r3, #164	; 0xa4
 800c23c:	4a71      	ldr	r2, [pc, #452]	; (800c404 <problem_fetch+0xada0>)
 800c23e:	461c      	mov	r4, r3
 800c240:	4613      	mov	r3, r2
 800c242:	cb07      	ldmia	r3!, {r0, r1, r2}
 800c244:	6020      	str	r0, [r4, #0]
 800c246:	6061      	str	r1, [r4, #4]
 800c248:	60a2      	str	r2, [r4, #8]
 800c24a:	881b      	ldrh	r3, [r3, #0]
 800c24c:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,8,8,12,15,17,18");
 800c24e:	687b      	ldr	r3, [r7, #4]
 800c250:	3304      	adds	r3, #4
 800c252:	4a6d      	ldr	r2, [pc, #436]	; (800c408 <problem_fetch+0xada4>)
 800c254:	461d      	mov	r5, r3
 800c256:	4614      	mov	r4, r2
 800c258:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800c25a:	6028      	str	r0, [r5, #0]
 800c25c:	6069      	str	r1, [r5, #4]
 800c25e:	60aa      	str	r2, [r5, #8]
 800c260:	60eb      	str	r3, [r5, #12]
 800c262:	8823      	ldrh	r3, [r4, #0]
 800c264:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 800c266:	687b      	ldr	r3, [r7, #4]
 800c268:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800c26c:	4a67      	ldr	r2, [pc, #412]	; (800c40c <problem_fetch+0xada8>)
 800c26e:	461c      	mov	r4, r3
 800c270:	4613      	mov	r3, r2
 800c272:	cb07      	ldmia	r3!, {r0, r1, r2}
 800c274:	6020      	str	r0, [r4, #0]
 800c276:	6061      	str	r1, [r4, #4]
 800c278:	60a2      	str	r2, [r4, #8]
 800c27a:	881b      	ldrh	r3, [r3, #0]
 800c27c:	81a3      	strh	r3, [r4, #12]
			break;
 800c27e:	f010 b921 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 307 :
			strcpy(p->name,"FROSTED AFRO");
 800c282:	687b      	ldr	r3, [r7, #4]
 800c284:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800c288:	4a61      	ldr	r2, [pc, #388]	; (800c410 <problem_fetch+0xadac>)
 800c28a:	461c      	mov	r4, r3
 800c28c:	4613      	mov	r3, r2
 800c28e:	cb07      	ldmia	r3!, {r0, r1, r2}
 800c290:	6020      	str	r0, [r4, #0]
 800c292:	6061      	str	r1, [r4, #4]
 800c294:	60a2      	str	r2, [r4, #8]
 800c296:	781b      	ldrb	r3, [r3, #0]
 800c298:	7323      	strb	r3, [r4, #12]
			strcpy(p->grade,"7A");
 800c29a:	687b      	ldr	r3, [r7, #4]
 800c29c:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800c2a0:	4a5c      	ldr	r2, [pc, #368]	; (800c414 <problem_fetch+0xadb0>)
 800c2a2:	8811      	ldrh	r1, [r2, #0]
 800c2a4:	7892      	ldrb	r2, [r2, #2]
 800c2a6:	8019      	strh	r1, [r3, #0]
 800c2a8:	709a      	strb	r2, [r3, #2]
			p->moveSize = 6;
 800c2aa:	687b      	ldr	r3, [r7, #4]
 800c2ac:	2206      	movs	r2, #6
 800c2ae:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,E,F,E,J,D");
 800c2b0:	687b      	ldr	r3, [r7, #4]
 800c2b2:	33a4      	adds	r3, #164	; 0xa4
 800c2b4:	4a58      	ldr	r2, [pc, #352]	; (800c418 <problem_fetch+0xadb4>)
 800c2b6:	461c      	mov	r4, r3
 800c2b8:	4613      	mov	r3, r2
 800c2ba:	cb07      	ldmia	r3!, {r0, r1, r2}
 800c2bc:	6020      	str	r0, [r4, #0]
 800c2be:	6061      	str	r1, [r4, #4]
 800c2c0:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,6,11,14,16,18");
 800c2c2:	687b      	ldr	r3, [r7, #4]
 800c2c4:	3304      	adds	r3, #4
 800c2c6:	4a55      	ldr	r2, [pc, #340]	; (800c41c <problem_fetch+0xadb8>)
 800c2c8:	461c      	mov	r4, r3
 800c2ca:	4615      	mov	r5, r2
 800c2cc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c2ce:	6020      	str	r0, [r4, #0]
 800c2d0:	6061      	str	r1, [r4, #4]
 800c2d2:	60a2      	str	r2, [r4, #8]
 800c2d4:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,s,d,d,d,e");
 800c2d6:	687b      	ldr	r3, [r7, #4]
 800c2d8:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800c2dc:	4a3f      	ldr	r2, [pc, #252]	; (800c3dc <problem_fetch+0xad78>)
 800c2de:	461c      	mov	r4, r3
 800c2e0:	4613      	mov	r3, r2
 800c2e2:	cb07      	ldmia	r3!, {r0, r1, r2}
 800c2e4:	6020      	str	r0, [r4, #0]
 800c2e6:	6061      	str	r1, [r4, #4]
 800c2e8:	60a2      	str	r2, [r4, #8]
			break;
 800c2ea:	f010 b8eb 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 308 :
			strcpy(p->name,"FLYING  BUDDAH");
 800c2ee:	687b      	ldr	r3, [r7, #4]
 800c2f0:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800c2f4:	4a4a      	ldr	r2, [pc, #296]	; (800c420 <problem_fetch+0xadbc>)
 800c2f6:	461c      	mov	r4, r3
 800c2f8:	4613      	mov	r3, r2
 800c2fa:	cb07      	ldmia	r3!, {r0, r1, r2}
 800c2fc:	6020      	str	r0, [r4, #0]
 800c2fe:	6061      	str	r1, [r4, #4]
 800c300:	60a2      	str	r2, [r4, #8]
 800c302:	881a      	ldrh	r2, [r3, #0]
 800c304:	789b      	ldrb	r3, [r3, #2]
 800c306:	81a2      	strh	r2, [r4, #12]
 800c308:	73a3      	strb	r3, [r4, #14]
			strcpy(p->grade,"7A+");
 800c30a:	687b      	ldr	r3, [r7, #4]
 800c30c:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800c310:	4a44      	ldr	r2, [pc, #272]	; (800c424 <problem_fetch+0xadc0>)
 800c312:	6810      	ldr	r0, [r2, #0]
 800c314:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 800c316:	687b      	ldr	r3, [r7, #4]
 800c318:	2206      	movs	r2, #6
 800c31a:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,H,G,F,I,D");
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	33a4      	adds	r3, #164	; 0xa4
 800c320:	4a41      	ldr	r2, [pc, #260]	; (800c428 <problem_fetch+0xadc4>)
 800c322:	461c      	mov	r4, r3
 800c324:	4613      	mov	r3, r2
 800c326:	cb07      	ldmia	r3!, {r0, r1, r2}
 800c328:	6020      	str	r0, [r4, #0]
 800c32a:	6061      	str	r1, [r4, #4]
 800c32c:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"6,5,9,13,14,18");
 800c32e:	687b      	ldr	r3, [r7, #4]
 800c330:	3304      	adds	r3, #4
 800c332:	4a3e      	ldr	r2, [pc, #248]	; (800c42c <problem_fetch+0xadc8>)
 800c334:	461c      	mov	r4, r3
 800c336:	4613      	mov	r3, r2
 800c338:	cb07      	ldmia	r3!, {r0, r1, r2}
 800c33a:	6020      	str	r0, [r4, #0]
 800c33c:	6061      	str	r1, [r4, #4]
 800c33e:	60a2      	str	r2, [r4, #8]
 800c340:	881a      	ldrh	r2, [r3, #0]
 800c342:	789b      	ldrb	r3, [r3, #2]
 800c344:	81a2      	strh	r2, [r4, #12]
 800c346:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish,"s,s,d,d,d,e");
 800c348:	687b      	ldr	r3, [r7, #4]
 800c34a:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800c34e:	4a23      	ldr	r2, [pc, #140]	; (800c3dc <problem_fetch+0xad78>)
 800c350:	461c      	mov	r4, r3
 800c352:	4613      	mov	r3, r2
 800c354:	cb07      	ldmia	r3!, {r0, r1, r2}
 800c356:	6020      	str	r0, [r4, #0]
 800c358:	6061      	str	r1, [r4, #4]
 800c35a:	60a2      	str	r2, [r4, #8]
			break;
 800c35c:	f010 b8b2 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 309 :
			strcpy(p->name,"KAKAKAKA");
 800c360:	687b      	ldr	r3, [r7, #4]
 800c362:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800c366:	4932      	ldr	r1, [pc, #200]	; (800c430 <problem_fetch+0xadcc>)
 800c368:	461a      	mov	r2, r3
 800c36a:	460b      	mov	r3, r1
 800c36c:	cb03      	ldmia	r3!, {r0, r1}
 800c36e:	6010      	str	r0, [r2, #0]
 800c370:	6051      	str	r1, [r2, #4]
 800c372:	781b      	ldrb	r3, [r3, #0]
 800c374:	7213      	strb	r3, [r2, #8]
			strcpy(p->grade,"6C+");
 800c376:	687b      	ldr	r3, [r7, #4]
 800c378:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800c37c:	4a2d      	ldr	r2, [pc, #180]	; (800c434 <problem_fetch+0xadd0>)
 800c37e:	6810      	ldr	r0, [r2, #0]
 800c380:	6018      	str	r0, [r3, #0]
			p->moveSize = 5;
 800c382:	687b      	ldr	r3, [r7, #4]
 800c384:	2205      	movs	r2, #5
 800c386:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,I,F,I,D");
 800c388:	687b      	ldr	r3, [r7, #4]
 800c38a:	33a4      	adds	r3, #164	; 0xa4
 800c38c:	492a      	ldr	r1, [pc, #168]	; (800c438 <problem_fetch+0xadd4>)
 800c38e:	461a      	mov	r2, r3
 800c390:	460b      	mov	r3, r1
 800c392:	cb03      	ldmia	r3!, {r0, r1}
 800c394:	6010      	str	r0, [r2, #0]
 800c396:	6051      	str	r1, [r2, #4]
 800c398:	881b      	ldrh	r3, [r3, #0]
 800c39a:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"5,10,13,14,18");
 800c39c:	687b      	ldr	r3, [r7, #4]
 800c39e:	3304      	adds	r3, #4
 800c3a0:	4a26      	ldr	r2, [pc, #152]	; (800c43c <problem_fetch+0xadd8>)
 800c3a2:	461c      	mov	r4, r3
 800c3a4:	4613      	mov	r3, r2
 800c3a6:	cb07      	ldmia	r3!, {r0, r1, r2}
 800c3a8:	6020      	str	r0, [r4, #0]
 800c3aa:	6061      	str	r1, [r4, #4]
 800c3ac:	60a2      	str	r2, [r4, #8]
 800c3ae:	881b      	ldrh	r3, [r3, #0]
 800c3b0:	81a3      	strh	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,e");
 800c3b2:	687b      	ldr	r3, [r7, #4]
 800c3b4:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800c3b8:	4921      	ldr	r1, [pc, #132]	; (800c440 <problem_fetch+0xaddc>)
 800c3ba:	461a      	mov	r2, r3
 800c3bc:	460b      	mov	r3, r1
 800c3be:	cb03      	ldmia	r3!, {r0, r1}
 800c3c0:	6010      	str	r0, [r2, #0]
 800c3c2:	6051      	str	r1, [r2, #4]
 800c3c4:	881b      	ldrh	r3, [r3, #0]
 800c3c6:	8113      	strh	r3, [r2, #8]
			break;
 800c3c8:	f010 b87c 	b.w	801c4c4 <problem_fetch+0x1ae60>
 800c3cc:	08027808 	.word	0x08027808
 800c3d0:	08023b24 	.word	0x08023b24
 800c3d4:	08027814 	.word	0x08027814
 800c3d8:	08027820 	.word	0x08027820
 800c3dc:	08023b04 	.word	0x08023b04
 800c3e0:	08027830 	.word	0x08027830
 800c3e4:	08027838 	.word	0x08027838
 800c3e8:	08027848 	.word	0x08027848
 800c3ec:	08023b9c 	.word	0x08023b9c
 800c3f0:	0802785c 	.word	0x0802785c
 800c3f4:	08027864 	.word	0x08027864
 800c3f8:	08027874 	.word	0x08027874
 800c3fc:	08027888 	.word	0x08027888
 800c400:	08023c60 	.word	0x08023c60
 800c404:	08027890 	.word	0x08027890
 800c408:	080278a0 	.word	0x080278a0
 800c40c:	08023cac 	.word	0x08023cac
 800c410:	080278b4 	.word	0x080278b4
 800c414:	08023ae4 	.word	0x08023ae4
 800c418:	080278c4 	.word	0x080278c4
 800c41c:	080278d0 	.word	0x080278d0
 800c420:	080278e0 	.word	0x080278e0
 800c424:	08023cc4 	.word	0x08023cc4
 800c428:	080278f0 	.word	0x080278f0
 800c42c:	080278fc 	.word	0x080278fc
 800c430:	0802790c 	.word	0x0802790c
 800c434:	08023bbc 	.word	0x08023bbc
 800c438:	08027918 	.word	0x08027918
 800c43c:	08027924 	.word	0x08027924
 800c440:	08023ff0 	.word	0x08023ff0
		case 310 :
			strcpy(p->name,"FIRSTEASY");
 800c444:	687b      	ldr	r3, [r7, #4]
 800c446:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800c44a:	49ba      	ldr	r1, [pc, #744]	; (800c734 <problem_fetch+0xb0d0>)
 800c44c:	461a      	mov	r2, r3
 800c44e:	460b      	mov	r3, r1
 800c450:	cb03      	ldmia	r3!, {r0, r1}
 800c452:	6010      	str	r0, [r2, #0]
 800c454:	6051      	str	r1, [r2, #4]
 800c456:	881b      	ldrh	r3, [r3, #0]
 800c458:	8113      	strh	r3, [r2, #8]
			strcpy(p->grade,"6B+");
 800c45a:	687b      	ldr	r3, [r7, #4]
 800c45c:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800c460:	4ab5      	ldr	r2, [pc, #724]	; (800c738 <problem_fetch+0xb0d4>)
 800c462:	6810      	ldr	r0, [r2, #0]
 800c464:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 800c466:	687b      	ldr	r3, [r7, #4]
 800c468:	2206      	movs	r2, #6
 800c46a:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,E,H,C,E,D");
 800c46c:	687b      	ldr	r3, [r7, #4]
 800c46e:	33a4      	adds	r3, #164	; 0xa4
 800c470:	4ab2      	ldr	r2, [pc, #712]	; (800c73c <problem_fetch+0xb0d8>)
 800c472:	461c      	mov	r4, r3
 800c474:	4613      	mov	r3, r2
 800c476:	cb07      	ldmia	r3!, {r0, r1, r2}
 800c478:	6020      	str	r0, [r4, #0]
 800c47a:	6061      	str	r1, [r4, #4]
 800c47c:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,8,10,13,16,18");
 800c47e:	687b      	ldr	r3, [r7, #4]
 800c480:	3304      	adds	r3, #4
 800c482:	4aaf      	ldr	r2, [pc, #700]	; (800c740 <problem_fetch+0xb0dc>)
 800c484:	461c      	mov	r4, r3
 800c486:	4615      	mov	r5, r2
 800c488:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c48a:	6020      	str	r0, [r4, #0]
 800c48c:	6061      	str	r1, [r4, #4]
 800c48e:	60a2      	str	r2, [r4, #8]
 800c490:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 800c492:	687b      	ldr	r3, [r7, #4]
 800c494:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800c498:	4aaa      	ldr	r2, [pc, #680]	; (800c744 <problem_fetch+0xb0e0>)
 800c49a:	461c      	mov	r4, r3
 800c49c:	4613      	mov	r3, r2
 800c49e:	cb07      	ldmia	r3!, {r0, r1, r2}
 800c4a0:	6020      	str	r0, [r4, #0]
 800c4a2:	6061      	str	r1, [r4, #4]
 800c4a4:	60a2      	str	r2, [r4, #8]
			break;
 800c4a6:	f010 b80d 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 311 :
			strcpy(p->name,"MATTS");
 800c4aa:	687b      	ldr	r3, [r7, #4]
 800c4ac:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800c4b0:	4aa5      	ldr	r2, [pc, #660]	; (800c748 <problem_fetch+0xb0e4>)
 800c4b2:	6810      	ldr	r0, [r2, #0]
 800c4b4:	6018      	str	r0, [r3, #0]
 800c4b6:	8892      	ldrh	r2, [r2, #4]
 800c4b8:	809a      	strh	r2, [r3, #4]
			strcpy(p->grade,"8B+");
 800c4ba:	687b      	ldr	r3, [r7, #4]
 800c4bc:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800c4c0:	4aa2      	ldr	r2, [pc, #648]	; (800c74c <problem_fetch+0xb0e8>)
 800c4c2:	6810      	ldr	r0, [r2, #0]
 800c4c4:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 800c4c6:	687b      	ldr	r3, [r7, #4]
 800c4c8:	2206      	movs	r2, #6
 800c4ca:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,D,I,K,I,I");
 800c4cc:	687b      	ldr	r3, [r7, #4]
 800c4ce:	33a4      	adds	r3, #164	; 0xa4
 800c4d0:	4a9f      	ldr	r2, [pc, #636]	; (800c750 <problem_fetch+0xb0ec>)
 800c4d2:	461c      	mov	r4, r3
 800c4d4:	4613      	mov	r3, r2
 800c4d6:	cb07      	ldmia	r3!, {r0, r1, r2}
 800c4d8:	6020      	str	r0, [r4, #0]
 800c4da:	6061      	str	r1, [r4, #4]
 800c4dc:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,11,7,14,9,18");
 800c4de:	687b      	ldr	r3, [r7, #4]
 800c4e0:	3304      	adds	r3, #4
 800c4e2:	4a9c      	ldr	r2, [pc, #624]	; (800c754 <problem_fetch+0xb0f0>)
 800c4e4:	461c      	mov	r4, r3
 800c4e6:	4613      	mov	r3, r2
 800c4e8:	cb07      	ldmia	r3!, {r0, r1, r2}
 800c4ea:	6020      	str	r0, [r4, #0]
 800c4ec:	6061      	str	r1, [r4, #4]
 800c4ee:	60a2      	str	r2, [r4, #8]
 800c4f0:	881a      	ldrh	r2, [r3, #0]
 800c4f2:	789b      	ldrb	r3, [r3, #2]
 800c4f4:	81a2      	strh	r2, [r4, #12]
 800c4f6:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 800c4f8:	687b      	ldr	r3, [r7, #4]
 800c4fa:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800c4fe:	4a91      	ldr	r2, [pc, #580]	; (800c744 <problem_fetch+0xb0e0>)
 800c500:	461c      	mov	r4, r3
 800c502:	4613      	mov	r3, r2
 800c504:	cb07      	ldmia	r3!, {r0, r1, r2}
 800c506:	6020      	str	r0, [r4, #0]
 800c508:	6061      	str	r1, [r4, #4]
 800c50a:	60a2      	str	r2, [r4, #8]
			break;
 800c50c:	f00f bfda 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 312 :
			strcpy(p->name,"SO YOU THINK YOU CAN DYNO");
 800c510:	687b      	ldr	r3, [r7, #4]
 800c512:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800c516:	4a90      	ldr	r2, [pc, #576]	; (800c758 <problem_fetch+0xb0f4>)
 800c518:	461d      	mov	r5, r3
 800c51a:	4614      	mov	r4, r2
 800c51c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800c51e:	6028      	str	r0, [r5, #0]
 800c520:	6069      	str	r1, [r5, #4]
 800c522:	60aa      	str	r2, [r5, #8]
 800c524:	60eb      	str	r3, [r5, #12]
 800c526:	cc03      	ldmia	r4!, {r0, r1}
 800c528:	6128      	str	r0, [r5, #16]
 800c52a:	6169      	str	r1, [r5, #20]
 800c52c:	8823      	ldrh	r3, [r4, #0]
 800c52e:	832b      	strh	r3, [r5, #24]
			strcpy(p->grade,"7B+");
 800c530:	687b      	ldr	r3, [r7, #4]
 800c532:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800c536:	4a89      	ldr	r2, [pc, #548]	; (800c75c <problem_fetch+0xb0f8>)
 800c538:	6810      	ldr	r0, [r2, #0]
 800c53a:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 800c53c:	687b      	ldr	r3, [r7, #4]
 800c53e:	2206      	movs	r2, #6
 800c540:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,C,C,H,C,I");
 800c542:	687b      	ldr	r3, [r7, #4]
 800c544:	33a4      	adds	r3, #164	; 0xa4
 800c546:	4a86      	ldr	r2, [pc, #536]	; (800c760 <problem_fetch+0xb0fc>)
 800c548:	461c      	mov	r4, r3
 800c54a:	4613      	mov	r3, r2
 800c54c:	cb07      	ldmia	r3!, {r0, r1, r2}
 800c54e:	6020      	str	r0, [r4, #0]
 800c550:	6061      	str	r1, [r4, #4]
 800c552:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,5,13,8,8,18");
 800c554:	687b      	ldr	r3, [r7, #4]
 800c556:	3304      	adds	r3, #4
 800c558:	4a82      	ldr	r2, [pc, #520]	; (800c764 <problem_fetch+0xb100>)
 800c55a:	461c      	mov	r4, r3
 800c55c:	4613      	mov	r3, r2
 800c55e:	cb07      	ldmia	r3!, {r0, r1, r2}
 800c560:	6020      	str	r0, [r4, #0]
 800c562:	6061      	str	r1, [r4, #4]
 800c564:	60a2      	str	r2, [r4, #8]
 800c566:	881b      	ldrh	r3, [r3, #0]
 800c568:	81a3      	strh	r3, [r4, #12]
			strcpy(p->startFinish,"s,s,d,d,d,e");
 800c56a:	687b      	ldr	r3, [r7, #4]
 800c56c:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800c570:	4a7d      	ldr	r2, [pc, #500]	; (800c768 <problem_fetch+0xb104>)
 800c572:	461c      	mov	r4, r3
 800c574:	4613      	mov	r3, r2
 800c576:	cb07      	ldmia	r3!, {r0, r1, r2}
 800c578:	6020      	str	r0, [r4, #0]
 800c57a:	6061      	str	r1, [r4, #4]
 800c57c:	60a2      	str	r2, [r4, #8]
			break;
 800c57e:	f00f bfa1 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 313 :
			strcpy(p->name,"THE TROLLOC WARS");
 800c582:	687b      	ldr	r3, [r7, #4]
 800c584:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800c588:	4a78      	ldr	r2, [pc, #480]	; (800c76c <problem_fetch+0xb108>)
 800c58a:	461d      	mov	r5, r3
 800c58c:	4614      	mov	r4, r2
 800c58e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800c590:	6028      	str	r0, [r5, #0]
 800c592:	6069      	str	r1, [r5, #4]
 800c594:	60aa      	str	r2, [r5, #8]
 800c596:	60eb      	str	r3, [r5, #12]
 800c598:	7823      	ldrb	r3, [r4, #0]
 800c59a:	742b      	strb	r3, [r5, #16]
			strcpy(p->grade,"7A");
 800c59c:	687b      	ldr	r3, [r7, #4]
 800c59e:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800c5a2:	4a73      	ldr	r2, [pc, #460]	; (800c770 <problem_fetch+0xb10c>)
 800c5a4:	8811      	ldrh	r1, [r2, #0]
 800c5a6:	7892      	ldrb	r2, [r2, #2]
 800c5a8:	8019      	strh	r1, [r3, #0]
 800c5aa:	709a      	strb	r2, [r3, #2]
			p->moveSize = 5;
 800c5ac:	687b      	ldr	r3, [r7, #4]
 800c5ae:	2205      	movs	r2, #5
 800c5b0:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"E,J,F,A,D");
 800c5b2:	687b      	ldr	r3, [r7, #4]
 800c5b4:	33a4      	adds	r3, #164	; 0xa4
 800c5b6:	496f      	ldr	r1, [pc, #444]	; (800c774 <problem_fetch+0xb110>)
 800c5b8:	461a      	mov	r2, r3
 800c5ba:	460b      	mov	r3, r1
 800c5bc:	cb03      	ldmia	r3!, {r0, r1}
 800c5be:	6010      	str	r0, [r2, #0]
 800c5c0:	6051      	str	r1, [r2, #4]
 800c5c2:	881b      	ldrh	r3, [r3, #0]
 800c5c4:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"6,5,11,14,18");
 800c5c6:	687b      	ldr	r3, [r7, #4]
 800c5c8:	3304      	adds	r3, #4
 800c5ca:	4a6b      	ldr	r2, [pc, #428]	; (800c778 <problem_fetch+0xb114>)
 800c5cc:	461c      	mov	r4, r3
 800c5ce:	4613      	mov	r3, r2
 800c5d0:	cb07      	ldmia	r3!, {r0, r1, r2}
 800c5d2:	6020      	str	r0, [r4, #0]
 800c5d4:	6061      	str	r1, [r4, #4]
 800c5d6:	60a2      	str	r2, [r4, #8]
 800c5d8:	781b      	ldrb	r3, [r3, #0]
 800c5da:	7323      	strb	r3, [r4, #12]
			strcpy(p->startFinish,"s,s,d,d,e");
 800c5dc:	687b      	ldr	r3, [r7, #4]
 800c5de:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800c5e2:	4966      	ldr	r1, [pc, #408]	; (800c77c <problem_fetch+0xb118>)
 800c5e4:	461a      	mov	r2, r3
 800c5e6:	460b      	mov	r3, r1
 800c5e8:	cb03      	ldmia	r3!, {r0, r1}
 800c5ea:	6010      	str	r0, [r2, #0]
 800c5ec:	6051      	str	r1, [r2, #4]
 800c5ee:	881b      	ldrh	r3, [r3, #0]
 800c5f0:	8113      	strh	r3, [r2, #8]
			break;
 800c5f2:	f00f bf67 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 314 :
			strcpy(p->name,"BRETT'S PROBLEM");
 800c5f6:	687b      	ldr	r3, [r7, #4]
 800c5f8:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800c5fc:	4a60      	ldr	r2, [pc, #384]	; (800c780 <problem_fetch+0xb11c>)
 800c5fe:	461c      	mov	r4, r3
 800c600:	4615      	mov	r5, r2
 800c602:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c604:	6020      	str	r0, [r4, #0]
 800c606:	6061      	str	r1, [r4, #4]
 800c608:	60a2      	str	r2, [r4, #8]
 800c60a:	60e3      	str	r3, [r4, #12]
			strcpy(p->grade,"7B+");
 800c60c:	687b      	ldr	r3, [r7, #4]
 800c60e:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800c612:	4a52      	ldr	r2, [pc, #328]	; (800c75c <problem_fetch+0xb0f8>)
 800c614:	6810      	ldr	r0, [r2, #0]
 800c616:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 800c618:	687b      	ldr	r3, [r7, #4]
 800c61a:	2206      	movs	r2, #6
 800c61c:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,B,G,B,C,D");
 800c61e:	687b      	ldr	r3, [r7, #4]
 800c620:	33a4      	adds	r3, #164	; 0xa4
 800c622:	4a58      	ldr	r2, [pc, #352]	; (800c784 <problem_fetch+0xb120>)
 800c624:	461c      	mov	r4, r3
 800c626:	4613      	mov	r3, r2
 800c628:	cb07      	ldmia	r3!, {r0, r1, r2}
 800c62a:	6020      	str	r0, [r4, #0]
 800c62c:	6061      	str	r1, [r4, #4]
 800c62e:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,6,10,10,13,18");
 800c630:	687b      	ldr	r3, [r7, #4]
 800c632:	3304      	adds	r3, #4
 800c634:	4a54      	ldr	r2, [pc, #336]	; (800c788 <problem_fetch+0xb124>)
 800c636:	461c      	mov	r4, r3
 800c638:	4615      	mov	r5, r2
 800c63a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c63c:	6020      	str	r0, [r4, #0]
 800c63e:	6061      	str	r1, [r4, #4]
 800c640:	60a2      	str	r2, [r4, #8]
 800c642:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 800c644:	687b      	ldr	r3, [r7, #4]
 800c646:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800c64a:	4a3e      	ldr	r2, [pc, #248]	; (800c744 <problem_fetch+0xb0e0>)
 800c64c:	461c      	mov	r4, r3
 800c64e:	4613      	mov	r3, r2
 800c650:	cb07      	ldmia	r3!, {r0, r1, r2}
 800c652:	6020      	str	r0, [r4, #0]
 800c654:	6061      	str	r1, [r4, #4]
 800c656:	60a2      	str	r2, [r4, #8]
			break;
 800c658:	f00f bf34 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 315 :
			strcpy(p->name,"GNOCCHE AL RAGÙ");
 800c65c:	687b      	ldr	r3, [r7, #4]
 800c65e:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800c662:	4a4a      	ldr	r2, [pc, #296]	; (800c78c <problem_fetch+0xb128>)
 800c664:	461d      	mov	r5, r3
 800c666:	4614      	mov	r4, r2
 800c668:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800c66a:	6028      	str	r0, [r5, #0]
 800c66c:	6069      	str	r1, [r5, #4]
 800c66e:	60aa      	str	r2, [r5, #8]
 800c670:	60eb      	str	r3, [r5, #12]
 800c672:	7823      	ldrb	r3, [r4, #0]
 800c674:	742b      	strb	r3, [r5, #16]
			strcpy(p->grade,"7A+");
 800c676:	687b      	ldr	r3, [r7, #4]
 800c678:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800c67c:	4a44      	ldr	r2, [pc, #272]	; (800c790 <problem_fetch+0xb12c>)
 800c67e:	6810      	ldr	r0, [r2, #0]
 800c680:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 800c682:	687b      	ldr	r3, [r7, #4]
 800c684:	2206      	movs	r2, #6
 800c686:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,D,G,H,K,I");
 800c688:	687b      	ldr	r3, [r7, #4]
 800c68a:	33a4      	adds	r3, #164	; 0xa4
 800c68c:	4a41      	ldr	r2, [pc, #260]	; (800c794 <problem_fetch+0xb130>)
 800c68e:	461c      	mov	r4, r3
 800c690:	4613      	mov	r3, r2
 800c692:	cb07      	ldmia	r3!, {r0, r1, r2}
 800c694:	6020      	str	r0, [r4, #0]
 800c696:	6061      	str	r1, [r4, #4]
 800c698:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,7,10,12,14,18");
 800c69a:	687b      	ldr	r3, [r7, #4]
 800c69c:	3304      	adds	r3, #4
 800c69e:	4a3e      	ldr	r2, [pc, #248]	; (800c798 <problem_fetch+0xb134>)
 800c6a0:	461c      	mov	r4, r3
 800c6a2:	4615      	mov	r5, r2
 800c6a4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c6a6:	6020      	str	r0, [r4, #0]
 800c6a8:	6061      	str	r1, [r4, #4]
 800c6aa:	60a2      	str	r2, [r4, #8]
 800c6ac:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 800c6ae:	687b      	ldr	r3, [r7, #4]
 800c6b0:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800c6b4:	4a23      	ldr	r2, [pc, #140]	; (800c744 <problem_fetch+0xb0e0>)
 800c6b6:	461c      	mov	r4, r3
 800c6b8:	4613      	mov	r3, r2
 800c6ba:	cb07      	ldmia	r3!, {r0, r1, r2}
 800c6bc:	6020      	str	r0, [r4, #0]
 800c6be:	6061      	str	r1, [r4, #4]
 800c6c0:	60a2      	str	r2, [r4, #8]
			break;
 800c6c2:	f00f beff 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 316 :
			strcpy(p->name,"A SAFE PLACE");
 800c6c6:	687b      	ldr	r3, [r7, #4]
 800c6c8:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800c6cc:	4a33      	ldr	r2, [pc, #204]	; (800c79c <problem_fetch+0xb138>)
 800c6ce:	461c      	mov	r4, r3
 800c6d0:	4613      	mov	r3, r2
 800c6d2:	cb07      	ldmia	r3!, {r0, r1, r2}
 800c6d4:	6020      	str	r0, [r4, #0]
 800c6d6:	6061      	str	r1, [r4, #4]
 800c6d8:	60a2      	str	r2, [r4, #8]
 800c6da:	781b      	ldrb	r3, [r3, #0]
 800c6dc:	7323      	strb	r3, [r4, #12]
			strcpy(p->grade,"6C");
 800c6de:	687b      	ldr	r3, [r7, #4]
 800c6e0:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800c6e4:	4a2e      	ldr	r2, [pc, #184]	; (800c7a0 <problem_fetch+0xb13c>)
 800c6e6:	8811      	ldrh	r1, [r2, #0]
 800c6e8:	7892      	ldrb	r2, [r2, #2]
 800c6ea:	8019      	strh	r1, [r3, #0]
 800c6ec:	709a      	strb	r2, [r3, #2]
			p->moveSize = 6;
 800c6ee:	687b      	ldr	r3, [r7, #4]
 800c6f0:	2206      	movs	r2, #6
 800c6f2:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"H,G,D,G,E,D");
 800c6f4:	687b      	ldr	r3, [r7, #4]
 800c6f6:	33a4      	adds	r3, #164	; 0xa4
 800c6f8:	4a2a      	ldr	r2, [pc, #168]	; (800c7a4 <problem_fetch+0xb140>)
 800c6fa:	461c      	mov	r4, r3
 800c6fc:	4613      	mov	r3, r2
 800c6fe:	cb07      	ldmia	r3!, {r0, r1, r2}
 800c700:	6020      	str	r0, [r4, #0]
 800c702:	6061      	str	r1, [r4, #4]
 800c704:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,9,11,14,16,18");
 800c706:	687b      	ldr	r3, [r7, #4]
 800c708:	3304      	adds	r3, #4
 800c70a:	4a27      	ldr	r2, [pc, #156]	; (800c7a8 <problem_fetch+0xb144>)
 800c70c:	461c      	mov	r4, r3
 800c70e:	4615      	mov	r5, r2
 800c710:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c712:	6020      	str	r0, [r4, #0]
 800c714:	6061      	str	r1, [r4, #4]
 800c716:	60a2      	str	r2, [r4, #8]
 800c718:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 800c71a:	687b      	ldr	r3, [r7, #4]
 800c71c:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800c720:	4a08      	ldr	r2, [pc, #32]	; (800c744 <problem_fetch+0xb0e0>)
 800c722:	461c      	mov	r4, r3
 800c724:	4613      	mov	r3, r2
 800c726:	cb07      	ldmia	r3!, {r0, r1, r2}
 800c728:	6020      	str	r0, [r4, #0]
 800c72a:	6061      	str	r1, [r4, #4]
 800c72c:	60a2      	str	r2, [r4, #8]
			break;
 800c72e:	f00f bec9 	b.w	801c4c4 <problem_fetch+0x1ae60>
 800c732:	bf00      	nop
 800c734:	08027934 	.word	0x08027934
 800c738:	08023b24 	.word	0x08023b24
 800c73c:	08027940 	.word	0x08027940
 800c740:	080261f8 	.word	0x080261f8
 800c744:	08023ec0 	.word	0x08023ec0
 800c748:	0802794c 	.word	0x0802794c
 800c74c:	08027954 	.word	0x08027954
 800c750:	08027958 	.word	0x08027958
 800c754:	08027964 	.word	0x08027964
 800c758:	08027974 	.word	0x08027974
 800c75c:	08023c60 	.word	0x08023c60
 800c760:	08027990 	.word	0x08027990
 800c764:	0802799c 	.word	0x0802799c
 800c768:	08023b04 	.word	0x08023b04
 800c76c:	080279ac 	.word	0x080279ac
 800c770:	08023ae4 	.word	0x08023ae4
 800c774:	080279c0 	.word	0x080279c0
 800c778:	080279cc 	.word	0x080279cc
 800c77c:	08024204 	.word	0x08024204
 800c780:	080279dc 	.word	0x080279dc
 800c784:	080279ec 	.word	0x080279ec
 800c788:	080279f8 	.word	0x080279f8
 800c78c:	08027a08 	.word	0x08027a08
 800c790:	08023cc4 	.word	0x08023cc4
 800c794:	08027a1c 	.word	0x08027a1c
 800c798:	08027a28 	.word	0x08027a28
 800c79c:	08027a38 	.word	0x08027a38
 800c7a0:	08023bf0 	.word	0x08023bf0
 800c7a4:	08027a48 	.word	0x08027a48
 800c7a8:	08027a54 	.word	0x08027a54
		case 317 :
			strcpy(p->name,"CRONENBERG");
 800c7ac:	687b      	ldr	r3, [r7, #4]
 800c7ae:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800c7b2:	49a8      	ldr	r1, [pc, #672]	; (800ca54 <problem_fetch+0xb3f0>)
 800c7b4:	461a      	mov	r2, r3
 800c7b6:	460b      	mov	r3, r1
 800c7b8:	cb03      	ldmia	r3!, {r0, r1}
 800c7ba:	6010      	str	r0, [r2, #0]
 800c7bc:	6051      	str	r1, [r2, #4]
 800c7be:	8819      	ldrh	r1, [r3, #0]
 800c7c0:	789b      	ldrb	r3, [r3, #2]
 800c7c2:	8111      	strh	r1, [r2, #8]
 800c7c4:	7293      	strb	r3, [r2, #10]
			strcpy(p->grade,"6C+");
 800c7c6:	687b      	ldr	r3, [r7, #4]
 800c7c8:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800c7cc:	4aa2      	ldr	r2, [pc, #648]	; (800ca58 <problem_fetch+0xb3f4>)
 800c7ce:	6810      	ldr	r0, [r2, #0]
 800c7d0:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 800c7d2:	687b      	ldr	r3, [r7, #4]
 800c7d4:	2207      	movs	r2, #7
 800c7d6:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,E,E,A,E,E,I");
 800c7d8:	687b      	ldr	r3, [r7, #4]
 800c7da:	33a4      	adds	r3, #164	; 0xa4
 800c7dc:	4a9f      	ldr	r2, [pc, #636]	; (800ca5c <problem_fetch+0xb3f8>)
 800c7de:	461c      	mov	r4, r3
 800c7e0:	4613      	mov	r3, r2
 800c7e2:	cb07      	ldmia	r3!, {r0, r1, r2}
 800c7e4:	6020      	str	r0, [r4, #0]
 800c7e6:	6061      	str	r1, [r4, #4]
 800c7e8:	60a2      	str	r2, [r4, #8]
 800c7ea:	881b      	ldrh	r3, [r3, #0]
 800c7ec:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,8,9,9,12,16,18");
 800c7ee:	687b      	ldr	r3, [r7, #4]
 800c7f0:	3304      	adds	r3, #4
 800c7f2:	4a9b      	ldr	r2, [pc, #620]	; (800ca60 <problem_fetch+0xb3fc>)
 800c7f4:	461d      	mov	r5, r3
 800c7f6:	4614      	mov	r4, r2
 800c7f8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800c7fa:	6028      	str	r0, [r5, #0]
 800c7fc:	6069      	str	r1, [r5, #4]
 800c7fe:	60aa      	str	r2, [r5, #8]
 800c800:	60eb      	str	r3, [r5, #12]
 800c802:	7823      	ldrb	r3, [r4, #0]
 800c804:	742b      	strb	r3, [r5, #16]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 800c806:	687b      	ldr	r3, [r7, #4]
 800c808:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800c80c:	4a95      	ldr	r2, [pc, #596]	; (800ca64 <problem_fetch+0xb400>)
 800c80e:	461c      	mov	r4, r3
 800c810:	4613      	mov	r3, r2
 800c812:	cb07      	ldmia	r3!, {r0, r1, r2}
 800c814:	6020      	str	r0, [r4, #0]
 800c816:	6061      	str	r1, [r4, #4]
 800c818:	60a2      	str	r2, [r4, #8]
 800c81a:	881b      	ldrh	r3, [r3, #0]
 800c81c:	81a3      	strh	r3, [r4, #12]
			break;
 800c81e:	f00f be51 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 318 :
			strcpy(p->name,"ALLES IST MÖGLICH");
 800c822:	687b      	ldr	r3, [r7, #4]
 800c824:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800c828:	4a8f      	ldr	r2, [pc, #572]	; (800ca68 <problem_fetch+0xb404>)
 800c82a:	461d      	mov	r5, r3
 800c82c:	4614      	mov	r4, r2
 800c82e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800c830:	6028      	str	r0, [r5, #0]
 800c832:	6069      	str	r1, [r5, #4]
 800c834:	60aa      	str	r2, [r5, #8]
 800c836:	60eb      	str	r3, [r5, #12]
 800c838:	8823      	ldrh	r3, [r4, #0]
 800c83a:	78a2      	ldrb	r2, [r4, #2]
 800c83c:	822b      	strh	r3, [r5, #16]
 800c83e:	4613      	mov	r3, r2
 800c840:	74ab      	strb	r3, [r5, #18]
			strcpy(p->grade,"7B+");
 800c842:	687b      	ldr	r3, [r7, #4]
 800c844:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800c848:	4a88      	ldr	r2, [pc, #544]	; (800ca6c <problem_fetch+0xb408>)
 800c84a:	6810      	ldr	r0, [r2, #0]
 800c84c:	6018      	str	r0, [r3, #0]
			p->moveSize = 4;
 800c84e:	687b      	ldr	r3, [r7, #4]
 800c850:	2204      	movs	r2, #4
 800c852:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"E,F,E,D");
 800c854:	687b      	ldr	r3, [r7, #4]
 800c856:	33a4      	adds	r3, #164	; 0xa4
 800c858:	4985      	ldr	r1, [pc, #532]	; (800ca70 <problem_fetch+0xb40c>)
 800c85a:	461a      	mov	r2, r3
 800c85c:	460b      	mov	r3, r1
 800c85e:	cb03      	ldmia	r3!, {r0, r1}
 800c860:	6010      	str	r0, [r2, #0]
 800c862:	6051      	str	r1, [r2, #4]
			strcpy(p->moveNumbers,"6,11,14,18");
 800c864:	687b      	ldr	r3, [r7, #4]
 800c866:	3304      	adds	r3, #4
 800c868:	4982      	ldr	r1, [pc, #520]	; (800ca74 <problem_fetch+0xb410>)
 800c86a:	461a      	mov	r2, r3
 800c86c:	460b      	mov	r3, r1
 800c86e:	cb03      	ldmia	r3!, {r0, r1}
 800c870:	6010      	str	r0, [r2, #0]
 800c872:	6051      	str	r1, [r2, #4]
 800c874:	8819      	ldrh	r1, [r3, #0]
 800c876:	789b      	ldrb	r3, [r3, #2]
 800c878:	8111      	strh	r1, [r2, #8]
 800c87a:	7293      	strb	r3, [r2, #10]
			strcpy(p->startFinish,"s,d,d,e");
 800c87c:	687b      	ldr	r3, [r7, #4]
 800c87e:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800c882:	497d      	ldr	r1, [pc, #500]	; (800ca78 <problem_fetch+0xb414>)
 800c884:	461a      	mov	r2, r3
 800c886:	460b      	mov	r3, r1
 800c888:	cb03      	ldmia	r3!, {r0, r1}
 800c88a:	6010      	str	r0, [r2, #0]
 800c88c:	6051      	str	r1, [r2, #4]
			break;
 800c88e:	f00f be19 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 319 :
			strcpy(p->name,"KKSBSKAN");
 800c892:	687b      	ldr	r3, [r7, #4]
 800c894:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800c898:	4978      	ldr	r1, [pc, #480]	; (800ca7c <problem_fetch+0xb418>)
 800c89a:	461a      	mov	r2, r3
 800c89c:	460b      	mov	r3, r1
 800c89e:	cb03      	ldmia	r3!, {r0, r1}
 800c8a0:	6010      	str	r0, [r2, #0]
 800c8a2:	6051      	str	r1, [r2, #4]
 800c8a4:	781b      	ldrb	r3, [r3, #0]
 800c8a6:	7213      	strb	r3, [r2, #8]
			strcpy(p->grade,"7C");
 800c8a8:	687b      	ldr	r3, [r7, #4]
 800c8aa:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800c8ae:	4a74      	ldr	r2, [pc, #464]	; (800ca80 <problem_fetch+0xb41c>)
 800c8b0:	8811      	ldrh	r1, [r2, #0]
 800c8b2:	7892      	ldrb	r2, [r2, #2]
 800c8b4:	8019      	strh	r1, [r3, #0]
 800c8b6:	709a      	strb	r2, [r3, #2]
			p->moveSize = 5;
 800c8b8:	687b      	ldr	r3, [r7, #4]
 800c8ba:	2205      	movs	r2, #5
 800c8bc:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,C,D,C,I");
 800c8be:	687b      	ldr	r3, [r7, #4]
 800c8c0:	33a4      	adds	r3, #164	; 0xa4
 800c8c2:	4970      	ldr	r1, [pc, #448]	; (800ca84 <problem_fetch+0xb420>)
 800c8c4:	461a      	mov	r2, r3
 800c8c6:	460b      	mov	r3, r1
 800c8c8:	cb03      	ldmia	r3!, {r0, r1}
 800c8ca:	6010      	str	r0, [r2, #0]
 800c8cc:	6051      	str	r1, [r2, #4]
 800c8ce:	881b      	ldrh	r3, [r3, #0]
 800c8d0:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"4,8,11,16,18");
 800c8d2:	687b      	ldr	r3, [r7, #4]
 800c8d4:	3304      	adds	r3, #4
 800c8d6:	4a6c      	ldr	r2, [pc, #432]	; (800ca88 <problem_fetch+0xb424>)
 800c8d8:	461c      	mov	r4, r3
 800c8da:	4613      	mov	r3, r2
 800c8dc:	cb07      	ldmia	r3!, {r0, r1, r2}
 800c8de:	6020      	str	r0, [r4, #0]
 800c8e0:	6061      	str	r1, [r4, #4]
 800c8e2:	60a2      	str	r2, [r4, #8]
 800c8e4:	781b      	ldrb	r3, [r3, #0]
 800c8e6:	7323      	strb	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,e");
 800c8e8:	687b      	ldr	r3, [r7, #4]
 800c8ea:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800c8ee:	4967      	ldr	r1, [pc, #412]	; (800ca8c <problem_fetch+0xb428>)
 800c8f0:	461a      	mov	r2, r3
 800c8f2:	460b      	mov	r3, r1
 800c8f4:	cb03      	ldmia	r3!, {r0, r1}
 800c8f6:	6010      	str	r0, [r2, #0]
 800c8f8:	6051      	str	r1, [r2, #4]
 800c8fa:	881b      	ldrh	r3, [r3, #0]
 800c8fc:	8113      	strh	r3, [r2, #8]
			break;
 800c8fe:	f00f bde1 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 320 :
			strcpy(p->name,"MATCHCATCH");
 800c902:	687b      	ldr	r3, [r7, #4]
 800c904:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800c908:	4961      	ldr	r1, [pc, #388]	; (800ca90 <problem_fetch+0xb42c>)
 800c90a:	461a      	mov	r2, r3
 800c90c:	460b      	mov	r3, r1
 800c90e:	cb03      	ldmia	r3!, {r0, r1}
 800c910:	6010      	str	r0, [r2, #0]
 800c912:	6051      	str	r1, [r2, #4]
 800c914:	8819      	ldrh	r1, [r3, #0]
 800c916:	789b      	ldrb	r3, [r3, #2]
 800c918:	8111      	strh	r1, [r2, #8]
 800c91a:	7293      	strb	r3, [r2, #10]
			strcpy(p->grade,"6C+");
 800c91c:	687b      	ldr	r3, [r7, #4]
 800c91e:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800c922:	4a4d      	ldr	r2, [pc, #308]	; (800ca58 <problem_fetch+0xb3f4>)
 800c924:	6810      	ldr	r0, [r2, #0]
 800c926:	6018      	str	r0, [r3, #0]
			p->moveSize = 5;
 800c928:	687b      	ldr	r3, [r7, #4]
 800c92a:	2205      	movs	r2, #5
 800c92c:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"H,I,J,G,I");
 800c92e:	687b      	ldr	r3, [r7, #4]
 800c930:	33a4      	adds	r3, #164	; 0xa4
 800c932:	4958      	ldr	r1, [pc, #352]	; (800ca94 <problem_fetch+0xb430>)
 800c934:	461a      	mov	r2, r3
 800c936:	460b      	mov	r3, r1
 800c938:	cb03      	ldmia	r3!, {r0, r1}
 800c93a:	6010      	str	r0, [r2, #0]
 800c93c:	6051      	str	r1, [r2, #4]
 800c93e:	881b      	ldrh	r3, [r3, #0]
 800c940:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"5,10,13,14,18");
 800c942:	687b      	ldr	r3, [r7, #4]
 800c944:	3304      	adds	r3, #4
 800c946:	4a54      	ldr	r2, [pc, #336]	; (800ca98 <problem_fetch+0xb434>)
 800c948:	461c      	mov	r4, r3
 800c94a:	4613      	mov	r3, r2
 800c94c:	cb07      	ldmia	r3!, {r0, r1, r2}
 800c94e:	6020      	str	r0, [r4, #0]
 800c950:	6061      	str	r1, [r4, #4]
 800c952:	60a2      	str	r2, [r4, #8]
 800c954:	881b      	ldrh	r3, [r3, #0]
 800c956:	81a3      	strh	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,e");
 800c958:	687b      	ldr	r3, [r7, #4]
 800c95a:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800c95e:	494b      	ldr	r1, [pc, #300]	; (800ca8c <problem_fetch+0xb428>)
 800c960:	461a      	mov	r2, r3
 800c962:	460b      	mov	r3, r1
 800c964:	cb03      	ldmia	r3!, {r0, r1}
 800c966:	6010      	str	r0, [r2, #0]
 800c968:	6051      	str	r1, [r2, #4]
 800c96a:	881b      	ldrh	r3, [r3, #0]
 800c96c:	8113      	strh	r3, [r2, #8]
			break;
 800c96e:	f00f bda9 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 321 :
			strcpy(p->name,"CAPTAIN AUBREY VAR.");
 800c972:	687b      	ldr	r3, [r7, #4]
 800c974:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800c978:	4a48      	ldr	r2, [pc, #288]	; (800ca9c <problem_fetch+0xb438>)
 800c97a:	461d      	mov	r5, r3
 800c97c:	4614      	mov	r4, r2
 800c97e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800c980:	6028      	str	r0, [r5, #0]
 800c982:	6069      	str	r1, [r5, #4]
 800c984:	60aa      	str	r2, [r5, #8]
 800c986:	60eb      	str	r3, [r5, #12]
 800c988:	6820      	ldr	r0, [r4, #0]
 800c98a:	6128      	str	r0, [r5, #16]
			strcpy(p->grade,"7A+");
 800c98c:	687b      	ldr	r3, [r7, #4]
 800c98e:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800c992:	4a43      	ldr	r2, [pc, #268]	; (800caa0 <problem_fetch+0xb43c>)
 800c994:	6810      	ldr	r0, [r2, #0]
 800c996:	6018      	str	r0, [r3, #0]
			p->moveSize = 5;
 800c998:	687b      	ldr	r3, [r7, #4]
 800c99a:	2205      	movs	r2, #5
 800c99c:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,H,E,I,I");
 800c99e:	687b      	ldr	r3, [r7, #4]
 800c9a0:	33a4      	adds	r3, #164	; 0xa4
 800c9a2:	4940      	ldr	r1, [pc, #256]	; (800caa4 <problem_fetch+0xb440>)
 800c9a4:	461a      	mov	r2, r3
 800c9a6:	460b      	mov	r3, r1
 800c9a8:	cb03      	ldmia	r3!, {r0, r1}
 800c9aa:	6010      	str	r0, [r2, #0]
 800c9ac:	6051      	str	r1, [r2, #4]
 800c9ae:	881b      	ldrh	r3, [r3, #0]
 800c9b0:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"5,8,12,14,18");
 800c9b2:	687b      	ldr	r3, [r7, #4]
 800c9b4:	3304      	adds	r3, #4
 800c9b6:	4a3c      	ldr	r2, [pc, #240]	; (800caa8 <problem_fetch+0xb444>)
 800c9b8:	461c      	mov	r4, r3
 800c9ba:	4613      	mov	r3, r2
 800c9bc:	cb07      	ldmia	r3!, {r0, r1, r2}
 800c9be:	6020      	str	r0, [r4, #0]
 800c9c0:	6061      	str	r1, [r4, #4]
 800c9c2:	60a2      	str	r2, [r4, #8]
 800c9c4:	781b      	ldrb	r3, [r3, #0]
 800c9c6:	7323      	strb	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,e");
 800c9c8:	687b      	ldr	r3, [r7, #4]
 800c9ca:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800c9ce:	492f      	ldr	r1, [pc, #188]	; (800ca8c <problem_fetch+0xb428>)
 800c9d0:	461a      	mov	r2, r3
 800c9d2:	460b      	mov	r3, r1
 800c9d4:	cb03      	ldmia	r3!, {r0, r1}
 800c9d6:	6010      	str	r0, [r2, #0]
 800c9d8:	6051      	str	r1, [r2, #4]
 800c9da:	881b      	ldrh	r3, [r3, #0]
 800c9dc:	8113      	strh	r3, [r2, #8]
			break;
 800c9de:	f00f bd71 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 322 :
			strcpy(p->name,"OKLAHOMA");
 800c9e2:	687b      	ldr	r3, [r7, #4]
 800c9e4:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800c9e8:	4930      	ldr	r1, [pc, #192]	; (800caac <problem_fetch+0xb448>)
 800c9ea:	461a      	mov	r2, r3
 800c9ec:	460b      	mov	r3, r1
 800c9ee:	cb03      	ldmia	r3!, {r0, r1}
 800c9f0:	6010      	str	r0, [r2, #0]
 800c9f2:	6051      	str	r1, [r2, #4]
 800c9f4:	781b      	ldrb	r3, [r3, #0]
 800c9f6:	7213      	strb	r3, [r2, #8]
			strcpy(p->grade,"7A");
 800c9f8:	687b      	ldr	r3, [r7, #4]
 800c9fa:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800c9fe:	4a2c      	ldr	r2, [pc, #176]	; (800cab0 <problem_fetch+0xb44c>)
 800ca00:	8811      	ldrh	r1, [r2, #0]
 800ca02:	7892      	ldrb	r2, [r2, #2]
 800ca04:	8019      	strh	r1, [r3, #0]
 800ca06:	709a      	strb	r2, [r3, #2]
			p->moveSize = 5;
 800ca08:	687b      	ldr	r3, [r7, #4]
 800ca0a:	2205      	movs	r2, #5
 800ca0c:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,H,G,D,A");
 800ca0e:	687b      	ldr	r3, [r7, #4]
 800ca10:	33a4      	adds	r3, #164	; 0xa4
 800ca12:	4928      	ldr	r1, [pc, #160]	; (800cab4 <problem_fetch+0xb450>)
 800ca14:	461a      	mov	r2, r3
 800ca16:	460b      	mov	r3, r1
 800ca18:	cb03      	ldmia	r3!, {r0, r1}
 800ca1a:	6010      	str	r0, [r2, #0]
 800ca1c:	6051      	str	r1, [r2, #4]
 800ca1e:	881b      	ldrh	r3, [r3, #0]
 800ca20:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"5,10,14,15,18");
 800ca22:	687b      	ldr	r3, [r7, #4]
 800ca24:	3304      	adds	r3, #4
 800ca26:	4a24      	ldr	r2, [pc, #144]	; (800cab8 <problem_fetch+0xb454>)
 800ca28:	461c      	mov	r4, r3
 800ca2a:	4613      	mov	r3, r2
 800ca2c:	cb07      	ldmia	r3!, {r0, r1, r2}
 800ca2e:	6020      	str	r0, [r4, #0]
 800ca30:	6061      	str	r1, [r4, #4]
 800ca32:	60a2      	str	r2, [r4, #8]
 800ca34:	881b      	ldrh	r3, [r3, #0]
 800ca36:	81a3      	strh	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,e");
 800ca38:	687b      	ldr	r3, [r7, #4]
 800ca3a:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800ca3e:	4913      	ldr	r1, [pc, #76]	; (800ca8c <problem_fetch+0xb428>)
 800ca40:	461a      	mov	r2, r3
 800ca42:	460b      	mov	r3, r1
 800ca44:	cb03      	ldmia	r3!, {r0, r1}
 800ca46:	6010      	str	r0, [r2, #0]
 800ca48:	6051      	str	r1, [r2, #4]
 800ca4a:	881b      	ldrh	r3, [r3, #0]
 800ca4c:	8113      	strh	r3, [r2, #8]
			break;
 800ca4e:	f00f bd39 	b.w	801c4c4 <problem_fetch+0x1ae60>
 800ca52:	bf00      	nop
 800ca54:	08027a64 	.word	0x08027a64
 800ca58:	08023bbc 	.word	0x08023bbc
 800ca5c:	08027a70 	.word	0x08027a70
 800ca60:	08027a80 	.word	0x08027a80
 800ca64:	08023cac 	.word	0x08023cac
 800ca68:	08027a94 	.word	0x08027a94
 800ca6c:	08023c60 	.word	0x08023c60
 800ca70:	08027aa8 	.word	0x08027aa8
 800ca74:	08027ab0 	.word	0x08027ab0
 800ca78:	08023c78 	.word	0x08023c78
 800ca7c:	08027abc 	.word	0x08027abc
 800ca80:	08024358 	.word	0x08024358
 800ca84:	08027ac8 	.word	0x08027ac8
 800ca88:	08027ad4 	.word	0x08027ad4
 800ca8c:	08023ff0 	.word	0x08023ff0
 800ca90:	08027ae4 	.word	0x08027ae4
 800ca94:	08027af0 	.word	0x08027af0
 800ca98:	08027924 	.word	0x08027924
 800ca9c:	08027afc 	.word	0x08027afc
 800caa0:	08023cc4 	.word	0x08023cc4
 800caa4:	08027b10 	.word	0x08027b10
 800caa8:	08027b1c 	.word	0x08027b1c
 800caac:	08027b2c 	.word	0x08027b2c
 800cab0:	08023ae4 	.word	0x08023ae4
 800cab4:	08027b38 	.word	0x08027b38
 800cab8:	08027b44 	.word	0x08027b44
		case 323 :
			strcpy(p->name,"BLACK PHENOMENON");
 800cabc:	687b      	ldr	r3, [r7, #4]
 800cabe:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800cac2:	4ac0      	ldr	r2, [pc, #768]	; (800cdc4 <problem_fetch+0xb760>)
 800cac4:	461d      	mov	r5, r3
 800cac6:	4614      	mov	r4, r2
 800cac8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800caca:	6028      	str	r0, [r5, #0]
 800cacc:	6069      	str	r1, [r5, #4]
 800cace:	60aa      	str	r2, [r5, #8]
 800cad0:	60eb      	str	r3, [r5, #12]
 800cad2:	7823      	ldrb	r3, [r4, #0]
 800cad4:	742b      	strb	r3, [r5, #16]
			strcpy(p->grade,"8A");
 800cad6:	687b      	ldr	r3, [r7, #4]
 800cad8:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800cadc:	4aba      	ldr	r2, [pc, #744]	; (800cdc8 <problem_fetch+0xb764>)
 800cade:	8811      	ldrh	r1, [r2, #0]
 800cae0:	7892      	ldrb	r2, [r2, #2]
 800cae2:	8019      	strh	r1, [r3, #0]
 800cae4:	709a      	strb	r2, [r3, #2]
			p->moveSize = 6;
 800cae6:	687b      	ldr	r3, [r7, #4]
 800cae8:	2206      	movs	r2, #6
 800caea:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,G,B,G,B,D");
 800caec:	687b      	ldr	r3, [r7, #4]
 800caee:	33a4      	adds	r3, #164	; 0xa4
 800caf0:	4ab6      	ldr	r2, [pc, #728]	; (800cdcc <problem_fetch+0xb768>)
 800caf2:	461c      	mov	r4, r3
 800caf4:	4613      	mov	r3, r2
 800caf6:	cb07      	ldmia	r3!, {r0, r1, r2}
 800caf8:	6020      	str	r0, [r4, #0]
 800cafa:	6061      	str	r1, [r4, #4]
 800cafc:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,6,6,10,10,18");
 800cafe:	687b      	ldr	r3, [r7, #4]
 800cb00:	3304      	adds	r3, #4
 800cb02:	4ab3      	ldr	r2, [pc, #716]	; (800cdd0 <problem_fetch+0xb76c>)
 800cb04:	461c      	mov	r4, r3
 800cb06:	4613      	mov	r3, r2
 800cb08:	cb07      	ldmia	r3!, {r0, r1, r2}
 800cb0a:	6020      	str	r0, [r4, #0]
 800cb0c:	6061      	str	r1, [r4, #4]
 800cb0e:	60a2      	str	r2, [r4, #8]
 800cb10:	881a      	ldrh	r2, [r3, #0]
 800cb12:	789b      	ldrb	r3, [r3, #2]
 800cb14:	81a2      	strh	r2, [r4, #12]
 800cb16:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 800cb18:	687b      	ldr	r3, [r7, #4]
 800cb1a:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800cb1e:	4aad      	ldr	r2, [pc, #692]	; (800cdd4 <problem_fetch+0xb770>)
 800cb20:	461c      	mov	r4, r3
 800cb22:	4613      	mov	r3, r2
 800cb24:	cb07      	ldmia	r3!, {r0, r1, r2}
 800cb26:	6020      	str	r0, [r4, #0]
 800cb28:	6061      	str	r1, [r4, #4]
 800cb2a:	60a2      	str	r2, [r4, #8]
			break;
 800cb2c:	f00f bcca 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 324 :
			strcpy(p->name,"KHAZAD DUM");
 800cb30:	687b      	ldr	r3, [r7, #4]
 800cb32:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800cb36:	49a8      	ldr	r1, [pc, #672]	; (800cdd8 <problem_fetch+0xb774>)
 800cb38:	461a      	mov	r2, r3
 800cb3a:	460b      	mov	r3, r1
 800cb3c:	cb03      	ldmia	r3!, {r0, r1}
 800cb3e:	6010      	str	r0, [r2, #0]
 800cb40:	6051      	str	r1, [r2, #4]
 800cb42:	8819      	ldrh	r1, [r3, #0]
 800cb44:	789b      	ldrb	r3, [r3, #2]
 800cb46:	8111      	strh	r1, [r2, #8]
 800cb48:	7293      	strb	r3, [r2, #10]
			strcpy(p->grade,"6B+");
 800cb4a:	687b      	ldr	r3, [r7, #4]
 800cb4c:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800cb50:	4aa2      	ldr	r2, [pc, #648]	; (800cddc <problem_fetch+0xb778>)
 800cb52:	6810      	ldr	r0, [r2, #0]
 800cb54:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 800cb56:	687b      	ldr	r3, [r7, #4]
 800cb58:	2206      	movs	r2, #6
 800cb5a:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,G,F,C,D,A");
 800cb5c:	687b      	ldr	r3, [r7, #4]
 800cb5e:	33a4      	adds	r3, #164	; 0xa4
 800cb60:	4a9f      	ldr	r2, [pc, #636]	; (800cde0 <problem_fetch+0xb77c>)
 800cb62:	461c      	mov	r4, r3
 800cb64:	4613      	mov	r3, r2
 800cb66:	cb07      	ldmia	r3!, {r0, r1, r2}
 800cb68:	6020      	str	r0, [r4, #0]
 800cb6a:	6061      	str	r1, [r4, #4]
 800cb6c:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,9,11,13,15,18");
 800cb6e:	687b      	ldr	r3, [r7, #4]
 800cb70:	3304      	adds	r3, #4
 800cb72:	4a9c      	ldr	r2, [pc, #624]	; (800cde4 <problem_fetch+0xb780>)
 800cb74:	461c      	mov	r4, r3
 800cb76:	4615      	mov	r5, r2
 800cb78:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800cb7a:	6020      	str	r0, [r4, #0]
 800cb7c:	6061      	str	r1, [r4, #4]
 800cb7e:	60a2      	str	r2, [r4, #8]
 800cb80:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 800cb82:	687b      	ldr	r3, [r7, #4]
 800cb84:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800cb88:	4a92      	ldr	r2, [pc, #584]	; (800cdd4 <problem_fetch+0xb770>)
 800cb8a:	461c      	mov	r4, r3
 800cb8c:	4613      	mov	r3, r2
 800cb8e:	cb07      	ldmia	r3!, {r0, r1, r2}
 800cb90:	6020      	str	r0, [r4, #0]
 800cb92:	6061      	str	r1, [r4, #4]
 800cb94:	60a2      	str	r2, [r4, #8]
			break;
 800cb96:	f00f bc95 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 325 :
			strcpy(p->name,"TESSME 4");
 800cb9a:	687b      	ldr	r3, [r7, #4]
 800cb9c:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800cba0:	4991      	ldr	r1, [pc, #580]	; (800cde8 <problem_fetch+0xb784>)
 800cba2:	461a      	mov	r2, r3
 800cba4:	460b      	mov	r3, r1
 800cba6:	cb03      	ldmia	r3!, {r0, r1}
 800cba8:	6010      	str	r0, [r2, #0]
 800cbaa:	6051      	str	r1, [r2, #4]
 800cbac:	781b      	ldrb	r3, [r3, #0]
 800cbae:	7213      	strb	r3, [r2, #8]
			strcpy(p->grade,"7B+");
 800cbb0:	687b      	ldr	r3, [r7, #4]
 800cbb2:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800cbb6:	4a8d      	ldr	r2, [pc, #564]	; (800cdec <problem_fetch+0xb788>)
 800cbb8:	6810      	ldr	r0, [r2, #0]
 800cbba:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 800cbbc:	687b      	ldr	r3, [r7, #4]
 800cbbe:	2206      	movs	r2, #6
 800cbc0:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,H,E,I,D,I");
 800cbc2:	687b      	ldr	r3, [r7, #4]
 800cbc4:	33a4      	adds	r3, #164	; 0xa4
 800cbc6:	4a8a      	ldr	r2, [pc, #552]	; (800cdf0 <problem_fetch+0xb78c>)
 800cbc8:	461c      	mov	r4, r3
 800cbca:	4613      	mov	r3, r2
 800cbcc:	cb07      	ldmia	r3!, {r0, r1, r2}
 800cbce:	6020      	str	r0, [r4, #0]
 800cbd0:	6061      	str	r1, [r4, #4]
 800cbd2:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,8,12,14,7,18");
 800cbd4:	687b      	ldr	r3, [r7, #4]
 800cbd6:	3304      	adds	r3, #4
 800cbd8:	4a86      	ldr	r2, [pc, #536]	; (800cdf4 <problem_fetch+0xb790>)
 800cbda:	461c      	mov	r4, r3
 800cbdc:	4613      	mov	r3, r2
 800cbde:	cb07      	ldmia	r3!, {r0, r1, r2}
 800cbe0:	6020      	str	r0, [r4, #0]
 800cbe2:	6061      	str	r1, [r4, #4]
 800cbe4:	60a2      	str	r2, [r4, #8]
 800cbe6:	881a      	ldrh	r2, [r3, #0]
 800cbe8:	789b      	ldrb	r3, [r3, #2]
 800cbea:	81a2      	strh	r2, [r4, #12]
 800cbec:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 800cbee:	687b      	ldr	r3, [r7, #4]
 800cbf0:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800cbf4:	4a77      	ldr	r2, [pc, #476]	; (800cdd4 <problem_fetch+0xb770>)
 800cbf6:	461c      	mov	r4, r3
 800cbf8:	4613      	mov	r3, r2
 800cbfa:	cb07      	ldmia	r3!, {r0, r1, r2}
 800cbfc:	6020      	str	r0, [r4, #0]
 800cbfe:	6061      	str	r1, [r4, #4]
 800cc00:	60a2      	str	r2, [r4, #8]
			break;
 800cc02:	f00f bc5f 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 326 :
			strcpy(p->name,"TESSME 3");
 800cc06:	687b      	ldr	r3, [r7, #4]
 800cc08:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800cc0c:	497a      	ldr	r1, [pc, #488]	; (800cdf8 <problem_fetch+0xb794>)
 800cc0e:	461a      	mov	r2, r3
 800cc10:	460b      	mov	r3, r1
 800cc12:	cb03      	ldmia	r3!, {r0, r1}
 800cc14:	6010      	str	r0, [r2, #0]
 800cc16:	6051      	str	r1, [r2, #4]
 800cc18:	781b      	ldrb	r3, [r3, #0]
 800cc1a:	7213      	strb	r3, [r2, #8]
			strcpy(p->grade,"7A+");
 800cc1c:	687b      	ldr	r3, [r7, #4]
 800cc1e:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800cc22:	4a76      	ldr	r2, [pc, #472]	; (800cdfc <problem_fetch+0xb798>)
 800cc24:	6810      	ldr	r0, [r2, #0]
 800cc26:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 800cc28:	687b      	ldr	r3, [r7, #4]
 800cc2a:	2206      	movs	r2, #6
 800cc2c:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,H,I,E,E,I");
 800cc2e:	687b      	ldr	r3, [r7, #4]
 800cc30:	33a4      	adds	r3, #164	; 0xa4
 800cc32:	4a73      	ldr	r2, [pc, #460]	; (800ce00 <problem_fetch+0xb79c>)
 800cc34:	461c      	mov	r4, r3
 800cc36:	4613      	mov	r3, r2
 800cc38:	cb07      	ldmia	r3!, {r0, r1, r2}
 800cc3a:	6020      	str	r0, [r4, #0]
 800cc3c:	6061      	str	r1, [r4, #4]
 800cc3e:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,8,14,12,9,18");
 800cc40:	687b      	ldr	r3, [r7, #4]
 800cc42:	3304      	adds	r3, #4
 800cc44:	4a6f      	ldr	r2, [pc, #444]	; (800ce04 <problem_fetch+0xb7a0>)
 800cc46:	461c      	mov	r4, r3
 800cc48:	4613      	mov	r3, r2
 800cc4a:	cb07      	ldmia	r3!, {r0, r1, r2}
 800cc4c:	6020      	str	r0, [r4, #0]
 800cc4e:	6061      	str	r1, [r4, #4]
 800cc50:	60a2      	str	r2, [r4, #8]
 800cc52:	881a      	ldrh	r2, [r3, #0]
 800cc54:	789b      	ldrb	r3, [r3, #2]
 800cc56:	81a2      	strh	r2, [r4, #12]
 800cc58:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 800cc5a:	687b      	ldr	r3, [r7, #4]
 800cc5c:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800cc60:	4a5c      	ldr	r2, [pc, #368]	; (800cdd4 <problem_fetch+0xb770>)
 800cc62:	461c      	mov	r4, r3
 800cc64:	4613      	mov	r3, r2
 800cc66:	cb07      	ldmia	r3!, {r0, r1, r2}
 800cc68:	6020      	str	r0, [r4, #0]
 800cc6a:	6061      	str	r1, [r4, #4]
 800cc6c:	60a2      	str	r2, [r4, #8]
			break;
 800cc6e:	f00f bc29 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 327 :
			strcpy(p->name,"TESSME 1");
 800cc72:	687b      	ldr	r3, [r7, #4]
 800cc74:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800cc78:	4963      	ldr	r1, [pc, #396]	; (800ce08 <problem_fetch+0xb7a4>)
 800cc7a:	461a      	mov	r2, r3
 800cc7c:	460b      	mov	r3, r1
 800cc7e:	cb03      	ldmia	r3!, {r0, r1}
 800cc80:	6010      	str	r0, [r2, #0]
 800cc82:	6051      	str	r1, [r2, #4]
 800cc84:	781b      	ldrb	r3, [r3, #0]
 800cc86:	7213      	strb	r3, [r2, #8]
			strcpy(p->grade,"6B+");
 800cc88:	687b      	ldr	r3, [r7, #4]
 800cc8a:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800cc8e:	4a53      	ldr	r2, [pc, #332]	; (800cddc <problem_fetch+0xb778>)
 800cc90:	6810      	ldr	r0, [r2, #0]
 800cc92:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 800cc94:	687b      	ldr	r3, [r7, #4]
 800cc96:	2207      	movs	r2, #7
 800cc98:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,H,E,F,J,H,I");
 800cc9a:	687b      	ldr	r3, [r7, #4]
 800cc9c:	33a4      	adds	r3, #164	; 0xa4
 800cc9e:	4a5b      	ldr	r2, [pc, #364]	; (800ce0c <problem_fetch+0xb7a8>)
 800cca0:	461c      	mov	r4, r3
 800cca2:	4613      	mov	r3, r2
 800cca4:	cb07      	ldmia	r3!, {r0, r1, r2}
 800cca6:	6020      	str	r0, [r4, #0]
 800cca8:	6061      	str	r1, [r4, #4]
 800ccaa:	60a2      	str	r2, [r4, #8]
 800ccac:	881b      	ldrh	r3, [r3, #0]
 800ccae:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,8,8,11,13,16,18");
 800ccb0:	687b      	ldr	r3, [r7, #4]
 800ccb2:	3304      	adds	r3, #4
 800ccb4:	4a56      	ldr	r2, [pc, #344]	; (800ce10 <problem_fetch+0xb7ac>)
 800ccb6:	461d      	mov	r5, r3
 800ccb8:	4614      	mov	r4, r2
 800ccba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800ccbc:	6028      	str	r0, [r5, #0]
 800ccbe:	6069      	str	r1, [r5, #4]
 800ccc0:	60aa      	str	r2, [r5, #8]
 800ccc2:	60eb      	str	r3, [r5, #12]
 800ccc4:	8823      	ldrh	r3, [r4, #0]
 800ccc6:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 800ccc8:	687b      	ldr	r3, [r7, #4]
 800ccca:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800ccce:	4a51      	ldr	r2, [pc, #324]	; (800ce14 <problem_fetch+0xb7b0>)
 800ccd0:	461c      	mov	r4, r3
 800ccd2:	4613      	mov	r3, r2
 800ccd4:	cb07      	ldmia	r3!, {r0, r1, r2}
 800ccd6:	6020      	str	r0, [r4, #0]
 800ccd8:	6061      	str	r1, [r4, #4]
 800ccda:	60a2      	str	r2, [r4, #8]
 800ccdc:	881b      	ldrh	r3, [r3, #0]
 800ccde:	81a3      	strh	r3, [r4, #12]
			break;
 800cce0:	f00f bbf0 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 328 :
			strcpy(p->name,"RONSTOPPABLE");
 800cce4:	687b      	ldr	r3, [r7, #4]
 800cce6:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800ccea:	4a4b      	ldr	r2, [pc, #300]	; (800ce18 <problem_fetch+0xb7b4>)
 800ccec:	461c      	mov	r4, r3
 800ccee:	4613      	mov	r3, r2
 800ccf0:	cb07      	ldmia	r3!, {r0, r1, r2}
 800ccf2:	6020      	str	r0, [r4, #0]
 800ccf4:	6061      	str	r1, [r4, #4]
 800ccf6:	60a2      	str	r2, [r4, #8]
 800ccf8:	781b      	ldrb	r3, [r3, #0]
 800ccfa:	7323      	strb	r3, [r4, #12]
			strcpy(p->grade,"6C+");
 800ccfc:	687b      	ldr	r3, [r7, #4]
 800ccfe:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800cd02:	4a46      	ldr	r2, [pc, #280]	; (800ce1c <problem_fetch+0xb7b8>)
 800cd04:	6810      	ldr	r0, [r2, #0]
 800cd06:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 800cd08:	687b      	ldr	r3, [r7, #4]
 800cd0a:	2206      	movs	r2, #6
 800cd0c:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,H,C,E,B,D");
 800cd0e:	687b      	ldr	r3, [r7, #4]
 800cd10:	33a4      	adds	r3, #164	; 0xa4
 800cd12:	4a43      	ldr	r2, [pc, #268]	; (800ce20 <problem_fetch+0xb7bc>)
 800cd14:	461c      	mov	r4, r3
 800cd16:	4613      	mov	r3, r2
 800cd18:	cb07      	ldmia	r3!, {r0, r1, r2}
 800cd1a:	6020      	str	r0, [r4, #0]
 800cd1c:	6061      	str	r1, [r4, #4]
 800cd1e:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,8,8,12,15,18");
 800cd20:	687b      	ldr	r3, [r7, #4]
 800cd22:	3304      	adds	r3, #4
 800cd24:	4a3f      	ldr	r2, [pc, #252]	; (800ce24 <problem_fetch+0xb7c0>)
 800cd26:	461c      	mov	r4, r3
 800cd28:	4613      	mov	r3, r2
 800cd2a:	cb07      	ldmia	r3!, {r0, r1, r2}
 800cd2c:	6020      	str	r0, [r4, #0]
 800cd2e:	6061      	str	r1, [r4, #4]
 800cd30:	60a2      	str	r2, [r4, #8]
 800cd32:	881a      	ldrh	r2, [r3, #0]
 800cd34:	789b      	ldrb	r3, [r3, #2]
 800cd36:	81a2      	strh	r2, [r4, #12]
 800cd38:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 800cd3a:	687b      	ldr	r3, [r7, #4]
 800cd3c:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800cd40:	4a24      	ldr	r2, [pc, #144]	; (800cdd4 <problem_fetch+0xb770>)
 800cd42:	461c      	mov	r4, r3
 800cd44:	4613      	mov	r3, r2
 800cd46:	cb07      	ldmia	r3!, {r0, r1, r2}
 800cd48:	6020      	str	r0, [r4, #0]
 800cd4a:	6061      	str	r1, [r4, #4]
 800cd4c:	60a2      	str	r2, [r4, #8]
			break;
 800cd4e:	f00f bbb9 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 329 :
			strcpy(p->name,"MO'RON");
 800cd52:	687b      	ldr	r3, [r7, #4]
 800cd54:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800cd58:	4a33      	ldr	r2, [pc, #204]	; (800ce28 <problem_fetch+0xb7c4>)
 800cd5a:	6810      	ldr	r0, [r2, #0]
 800cd5c:	6018      	str	r0, [r3, #0]
 800cd5e:	8891      	ldrh	r1, [r2, #4]
 800cd60:	7992      	ldrb	r2, [r2, #6]
 800cd62:	8099      	strh	r1, [r3, #4]
 800cd64:	719a      	strb	r2, [r3, #6]
			strcpy(p->grade,"7A");
 800cd66:	687b      	ldr	r3, [r7, #4]
 800cd68:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800cd6c:	4a2f      	ldr	r2, [pc, #188]	; (800ce2c <problem_fetch+0xb7c8>)
 800cd6e:	8811      	ldrh	r1, [r2, #0]
 800cd70:	7892      	ldrb	r2, [r2, #2]
 800cd72:	8019      	strh	r1, [r3, #0]
 800cd74:	709a      	strb	r2, [r3, #2]
			p->moveSize = 8;
 800cd76:	687b      	ldr	r3, [r7, #4]
 800cd78:	2208      	movs	r2, #8
 800cd7a:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"E,G,E,A,E,E,G,D");
 800cd7c:	687b      	ldr	r3, [r7, #4]
 800cd7e:	33a4      	adds	r3, #164	; 0xa4
 800cd80:	4a2b      	ldr	r2, [pc, #172]	; (800ce30 <problem_fetch+0xb7cc>)
 800cd82:	461c      	mov	r4, r3
 800cd84:	4615      	mov	r5, r2
 800cd86:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800cd88:	6020      	str	r0, [r4, #0]
 800cd8a:	6061      	str	r1, [r4, #4]
 800cd8c:	60a2      	str	r2, [r4, #8]
 800cd8e:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"6,4,8,9,12,14,17,18");
 800cd90:	687b      	ldr	r3, [r7, #4]
 800cd92:	3304      	adds	r3, #4
 800cd94:	4a27      	ldr	r2, [pc, #156]	; (800ce34 <problem_fetch+0xb7d0>)
 800cd96:	461d      	mov	r5, r3
 800cd98:	4614      	mov	r4, r2
 800cd9a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800cd9c:	6028      	str	r0, [r5, #0]
 800cd9e:	6069      	str	r1, [r5, #4]
 800cda0:	60aa      	str	r2, [r5, #8]
 800cda2:	60eb      	str	r3, [r5, #12]
 800cda4:	6820      	ldr	r0, [r4, #0]
 800cda6:	6128      	str	r0, [r5, #16]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,e");
 800cda8:	687b      	ldr	r3, [r7, #4]
 800cdaa:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800cdae:	4a22      	ldr	r2, [pc, #136]	; (800ce38 <problem_fetch+0xb7d4>)
 800cdb0:	461c      	mov	r4, r3
 800cdb2:	4615      	mov	r5, r2
 800cdb4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800cdb6:	6020      	str	r0, [r4, #0]
 800cdb8:	6061      	str	r1, [r4, #4]
 800cdba:	60a2      	str	r2, [r4, #8]
 800cdbc:	60e3      	str	r3, [r4, #12]
			break;
 800cdbe:	f00f bb81 	b.w	801c4c4 <problem_fetch+0x1ae60>
 800cdc2:	bf00      	nop
 800cdc4:	08027b54 	.word	0x08027b54
 800cdc8:	08025e88 	.word	0x08025e88
 800cdcc:	08027b68 	.word	0x08027b68
 800cdd0:	08027b74 	.word	0x08027b74
 800cdd4:	08023ec0 	.word	0x08023ec0
 800cdd8:	08027b84 	.word	0x08027b84
 800cddc:	08023b24 	.word	0x08023b24
 800cde0:	08027b90 	.word	0x08027b90
 800cde4:	08027b9c 	.word	0x08027b9c
 800cde8:	08027bac 	.word	0x08027bac
 800cdec:	08023c60 	.word	0x08023c60
 800cdf0:	08027bb8 	.word	0x08027bb8
 800cdf4:	08027bc4 	.word	0x08027bc4
 800cdf8:	08027bd4 	.word	0x08027bd4
 800cdfc:	08023cc4 	.word	0x08023cc4
 800ce00:	08027be0 	.word	0x08027be0
 800ce04:	08027bec 	.word	0x08027bec
 800ce08:	08027bfc 	.word	0x08027bfc
 800ce0c:	08027c08 	.word	0x08027c08
 800ce10:	080250b4 	.word	0x080250b4
 800ce14:	08023cac 	.word	0x08023cac
 800ce18:	08027c18 	.word	0x08027c18
 800ce1c:	08023bbc 	.word	0x08023bbc
 800ce20:	08027c28 	.word	0x08027c28
 800ce24:	08027c34 	.word	0x08027c34
 800ce28:	08027c44 	.word	0x08027c44
 800ce2c:	08023ae4 	.word	0x08023ae4
 800ce30:	08027c4c 	.word	0x08027c4c
 800ce34:	08027c5c 	.word	0x08027c5c
 800ce38:	08023c48 	.word	0x08023c48
		case 330 :
			strcpy(p->name,"SLIGHTLY LESS BASIC B*TCH");
 800ce3c:	687b      	ldr	r3, [r7, #4]
 800ce3e:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800ce42:	4aa9      	ldr	r2, [pc, #676]	; (800d0e8 <problem_fetch+0xba84>)
 800ce44:	461d      	mov	r5, r3
 800ce46:	4614      	mov	r4, r2
 800ce48:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800ce4a:	6028      	str	r0, [r5, #0]
 800ce4c:	6069      	str	r1, [r5, #4]
 800ce4e:	60aa      	str	r2, [r5, #8]
 800ce50:	60eb      	str	r3, [r5, #12]
 800ce52:	cc03      	ldmia	r4!, {r0, r1}
 800ce54:	6128      	str	r0, [r5, #16]
 800ce56:	6169      	str	r1, [r5, #20]
 800ce58:	8823      	ldrh	r3, [r4, #0]
 800ce5a:	832b      	strh	r3, [r5, #24]
			strcpy(p->grade,"7A+");
 800ce5c:	687b      	ldr	r3, [r7, #4]
 800ce5e:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800ce62:	4aa2      	ldr	r2, [pc, #648]	; (800d0ec <problem_fetch+0xba88>)
 800ce64:	6810      	ldr	r0, [r2, #0]
 800ce66:	6018      	str	r0, [r3, #0]
			p->moveSize = 5;
 800ce68:	687b      	ldr	r3, [r7, #4]
 800ce6a:	2205      	movs	r2, #5
 800ce6c:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,H,C,G,I");
 800ce6e:	687b      	ldr	r3, [r7, #4]
 800ce70:	33a4      	adds	r3, #164	; 0xa4
 800ce72:	499f      	ldr	r1, [pc, #636]	; (800d0f0 <problem_fetch+0xba8c>)
 800ce74:	461a      	mov	r2, r3
 800ce76:	460b      	mov	r3, r1
 800ce78:	cb03      	ldmia	r3!, {r0, r1}
 800ce7a:	6010      	str	r0, [r2, #0]
 800ce7c:	6051      	str	r1, [r2, #4]
 800ce7e:	881b      	ldrh	r3, [r3, #0]
 800ce80:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"5,10,13,17,18");
 800ce82:	687b      	ldr	r3, [r7, #4]
 800ce84:	3304      	adds	r3, #4
 800ce86:	4a9b      	ldr	r2, [pc, #620]	; (800d0f4 <problem_fetch+0xba90>)
 800ce88:	461c      	mov	r4, r3
 800ce8a:	4613      	mov	r3, r2
 800ce8c:	cb07      	ldmia	r3!, {r0, r1, r2}
 800ce8e:	6020      	str	r0, [r4, #0]
 800ce90:	6061      	str	r1, [r4, #4]
 800ce92:	60a2      	str	r2, [r4, #8]
 800ce94:	881b      	ldrh	r3, [r3, #0]
 800ce96:	81a3      	strh	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,e");
 800ce98:	687b      	ldr	r3, [r7, #4]
 800ce9a:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800ce9e:	4996      	ldr	r1, [pc, #600]	; (800d0f8 <problem_fetch+0xba94>)
 800cea0:	461a      	mov	r2, r3
 800cea2:	460b      	mov	r3, r1
 800cea4:	cb03      	ldmia	r3!, {r0, r1}
 800cea6:	6010      	str	r0, [r2, #0]
 800cea8:	6051      	str	r1, [r2, #4]
 800ceaa:	881b      	ldrh	r3, [r3, #0]
 800ceac:	8113      	strh	r3, [r2, #8]
			break;
 800ceae:	f00f bb09 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 331 :
			strcpy(p->name,"BASIC B*TCH");
 800ceb2:	687b      	ldr	r3, [r7, #4]
 800ceb4:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800ceb8:	4a90      	ldr	r2, [pc, #576]	; (800d0fc <problem_fetch+0xba98>)
 800ceba:	461c      	mov	r4, r3
 800cebc:	4613      	mov	r3, r2
 800cebe:	cb07      	ldmia	r3!, {r0, r1, r2}
 800cec0:	6020      	str	r0, [r4, #0]
 800cec2:	6061      	str	r1, [r4, #4]
 800cec4:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade,"7A+");
 800cec6:	687b      	ldr	r3, [r7, #4]
 800cec8:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800cecc:	4a87      	ldr	r2, [pc, #540]	; (800d0ec <problem_fetch+0xba88>)
 800cece:	6810      	ldr	r0, [r2, #0]
 800ced0:	6018      	str	r0, [r3, #0]
			p->moveSize = 4;
 800ced2:	687b      	ldr	r3, [r7, #4]
 800ced4:	2204      	movs	r2, #4
 800ced6:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,H,C,D");
 800ced8:	687b      	ldr	r3, [r7, #4]
 800ceda:	33a4      	adds	r3, #164	; 0xa4
 800cedc:	4988      	ldr	r1, [pc, #544]	; (800d100 <problem_fetch+0xba9c>)
 800cede:	461a      	mov	r2, r3
 800cee0:	460b      	mov	r3, r1
 800cee2:	cb03      	ldmia	r3!, {r0, r1}
 800cee4:	6010      	str	r0, [r2, #0]
 800cee6:	6051      	str	r1, [r2, #4]
			strcpy(p->moveNumbers,"5,10,13,18");
 800cee8:	687b      	ldr	r3, [r7, #4]
 800ceea:	3304      	adds	r3, #4
 800ceec:	4985      	ldr	r1, [pc, #532]	; (800d104 <problem_fetch+0xbaa0>)
 800ceee:	461a      	mov	r2, r3
 800cef0:	460b      	mov	r3, r1
 800cef2:	cb03      	ldmia	r3!, {r0, r1}
 800cef4:	6010      	str	r0, [r2, #0]
 800cef6:	6051      	str	r1, [r2, #4]
 800cef8:	8819      	ldrh	r1, [r3, #0]
 800cefa:	789b      	ldrb	r3, [r3, #2]
 800cefc:	8111      	strh	r1, [r2, #8]
 800cefe:	7293      	strb	r3, [r2, #10]
			strcpy(p->startFinish,"s,d,d,e");
 800cf00:	687b      	ldr	r3, [r7, #4]
 800cf02:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800cf06:	4980      	ldr	r1, [pc, #512]	; (800d108 <problem_fetch+0xbaa4>)
 800cf08:	461a      	mov	r2, r3
 800cf0a:	460b      	mov	r3, r1
 800cf0c:	cb03      	ldmia	r3!, {r0, r1}
 800cf0e:	6010      	str	r0, [r2, #0]
 800cf10:	6051      	str	r1, [r2, #4]
			break;
 800cf12:	f00f bad7 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 332 :
			strcpy(p->name,"ANY GIVEN DAY");
 800cf16:	687b      	ldr	r3, [r7, #4]
 800cf18:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800cf1c:	4a7b      	ldr	r2, [pc, #492]	; (800d10c <problem_fetch+0xbaa8>)
 800cf1e:	461c      	mov	r4, r3
 800cf20:	4613      	mov	r3, r2
 800cf22:	cb07      	ldmia	r3!, {r0, r1, r2}
 800cf24:	6020      	str	r0, [r4, #0]
 800cf26:	6061      	str	r1, [r4, #4]
 800cf28:	60a2      	str	r2, [r4, #8]
 800cf2a:	881b      	ldrh	r3, [r3, #0]
 800cf2c:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade,"6B+");
 800cf2e:	687b      	ldr	r3, [r7, #4]
 800cf30:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800cf34:	4a76      	ldr	r2, [pc, #472]	; (800d110 <problem_fetch+0xbaac>)
 800cf36:	6810      	ldr	r0, [r2, #0]
 800cf38:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 800cf3a:	687b      	ldr	r3, [r7, #4]
 800cf3c:	2206      	movs	r2, #6
 800cf3e:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,E,H,C,D,D");
 800cf40:	687b      	ldr	r3, [r7, #4]
 800cf42:	33a4      	adds	r3, #164	; 0xa4
 800cf44:	4a73      	ldr	r2, [pc, #460]	; (800d114 <problem_fetch+0xbab0>)
 800cf46:	461c      	mov	r4, r3
 800cf48:	4613      	mov	r3, r2
 800cf4a:	cb07      	ldmia	r3!, {r0, r1, r2}
 800cf4c:	6020      	str	r0, [r4, #0]
 800cf4e:	6061      	str	r1, [r4, #4]
 800cf50:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,8,10,13,15,18");
 800cf52:	687b      	ldr	r3, [r7, #4]
 800cf54:	3304      	adds	r3, #4
 800cf56:	4a70      	ldr	r2, [pc, #448]	; (800d118 <problem_fetch+0xbab4>)
 800cf58:	461c      	mov	r4, r3
 800cf5a:	4615      	mov	r5, r2
 800cf5c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800cf5e:	6020      	str	r0, [r4, #0]
 800cf60:	6061      	str	r1, [r4, #4]
 800cf62:	60a2      	str	r2, [r4, #8]
 800cf64:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 800cf66:	687b      	ldr	r3, [r7, #4]
 800cf68:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800cf6c:	4a6b      	ldr	r2, [pc, #428]	; (800d11c <problem_fetch+0xbab8>)
 800cf6e:	461c      	mov	r4, r3
 800cf70:	4613      	mov	r3, r2
 800cf72:	cb07      	ldmia	r3!, {r0, r1, r2}
 800cf74:	6020      	str	r0, [r4, #0]
 800cf76:	6061      	str	r1, [r4, #4]
 800cf78:	60a2      	str	r2, [r4, #8]
			break;
 800cf7a:	f00f baa3 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 333 :
			strcpy(p->name,"GS");
 800cf7e:	687b      	ldr	r3, [r7, #4]
 800cf80:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800cf84:	4a66      	ldr	r2, [pc, #408]	; (800d120 <problem_fetch+0xbabc>)
 800cf86:	8811      	ldrh	r1, [r2, #0]
 800cf88:	7892      	ldrb	r2, [r2, #2]
 800cf8a:	8019      	strh	r1, [r3, #0]
 800cf8c:	709a      	strb	r2, [r3, #2]
			strcpy(p->grade,"6C");
 800cf8e:	687b      	ldr	r3, [r7, #4]
 800cf90:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800cf94:	4a63      	ldr	r2, [pc, #396]	; (800d124 <problem_fetch+0xbac0>)
 800cf96:	8811      	ldrh	r1, [r2, #0]
 800cf98:	7892      	ldrb	r2, [r2, #2]
 800cf9a:	8019      	strh	r1, [r3, #0]
 800cf9c:	709a      	strb	r2, [r3, #2]
			p->moveSize = 10;
 800cf9e:	687b      	ldr	r3, [r7, #4]
 800cfa0:	220a      	movs	r2, #10
 800cfa2:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"E,H,H,H,F,C,E,A,E,A");
 800cfa4:	687b      	ldr	r3, [r7, #4]
 800cfa6:	33a4      	adds	r3, #164	; 0xa4
 800cfa8:	4a5f      	ldr	r2, [pc, #380]	; (800d128 <problem_fetch+0xbac4>)
 800cfaa:	461d      	mov	r5, r3
 800cfac:	4614      	mov	r4, r2
 800cfae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800cfb0:	6028      	str	r0, [r5, #0]
 800cfb2:	6069      	str	r1, [r5, #4]
 800cfb4:	60aa      	str	r2, [r5, #8]
 800cfb6:	60eb      	str	r3, [r5, #12]
 800cfb8:	6820      	ldr	r0, [r4, #0]
 800cfba:	6128      	str	r0, [r5, #16]
			strcpy(p->moveNumbers,"6,5,8,10,11,13,14,14,16,18");
 800cfbc:	687b      	ldr	r3, [r7, #4]
 800cfbe:	3304      	adds	r3, #4
 800cfc0:	4a5a      	ldr	r2, [pc, #360]	; (800d12c <problem_fetch+0xbac8>)
 800cfc2:	461d      	mov	r5, r3
 800cfc4:	4614      	mov	r4, r2
 800cfc6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800cfc8:	6028      	str	r0, [r5, #0]
 800cfca:	6069      	str	r1, [r5, #4]
 800cfcc:	60aa      	str	r2, [r5, #8]
 800cfce:	60eb      	str	r3, [r5, #12]
 800cfd0:	cc03      	ldmia	r4!, {r0, r1}
 800cfd2:	6128      	str	r0, [r5, #16]
 800cfd4:	6169      	str	r1, [r5, #20]
 800cfd6:	8823      	ldrh	r3, [r4, #0]
 800cfd8:	78a2      	ldrb	r2, [r4, #2]
 800cfda:	832b      	strh	r3, [r5, #24]
 800cfdc:	4613      	mov	r3, r2
 800cfde:	76ab      	strb	r3, [r5, #26]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,d,d,e");
 800cfe0:	687b      	ldr	r3, [r7, #4]
 800cfe2:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800cfe6:	4a52      	ldr	r2, [pc, #328]	; (800d130 <problem_fetch+0xbacc>)
 800cfe8:	461d      	mov	r5, r3
 800cfea:	4614      	mov	r4, r2
 800cfec:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800cfee:	6028      	str	r0, [r5, #0]
 800cff0:	6069      	str	r1, [r5, #4]
 800cff2:	60aa      	str	r2, [r5, #8]
 800cff4:	60eb      	str	r3, [r5, #12]
 800cff6:	6820      	ldr	r0, [r4, #0]
 800cff8:	6128      	str	r0, [r5, #16]
			break;
 800cffa:	f00f ba63 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 334 :
			strcpy(p->name,"VALGULIOUS");
 800cffe:	687b      	ldr	r3, [r7, #4]
 800d000:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800d004:	494b      	ldr	r1, [pc, #300]	; (800d134 <problem_fetch+0xbad0>)
 800d006:	461a      	mov	r2, r3
 800d008:	460b      	mov	r3, r1
 800d00a:	cb03      	ldmia	r3!, {r0, r1}
 800d00c:	6010      	str	r0, [r2, #0]
 800d00e:	6051      	str	r1, [r2, #4]
 800d010:	8819      	ldrh	r1, [r3, #0]
 800d012:	789b      	ldrb	r3, [r3, #2]
 800d014:	8111      	strh	r1, [r2, #8]
 800d016:	7293      	strb	r3, [r2, #10]
			strcpy(p->grade,"7A+");
 800d018:	687b      	ldr	r3, [r7, #4]
 800d01a:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800d01e:	4a33      	ldr	r2, [pc, #204]	; (800d0ec <problem_fetch+0xba88>)
 800d020:	6810      	ldr	r0, [r2, #0]
 800d022:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 800d024:	687b      	ldr	r3, [r7, #4]
 800d026:	2207      	movs	r2, #7
 800d028:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"C,C,G,J,J,I,I");
 800d02a:	687b      	ldr	r3, [r7, #4]
 800d02c:	33a4      	adds	r3, #164	; 0xa4
 800d02e:	4a42      	ldr	r2, [pc, #264]	; (800d138 <problem_fetch+0xbad4>)
 800d030:	461c      	mov	r4, r3
 800d032:	4613      	mov	r3, r2
 800d034:	cb07      	ldmia	r3!, {r0, r1, r2}
 800d036:	6020      	str	r0, [r4, #0]
 800d038:	6061      	str	r1, [r4, #4]
 800d03a:	60a2      	str	r2, [r4, #8]
 800d03c:	881b      	ldrh	r3, [r3, #0]
 800d03e:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,8,9,5,12,15,18");
 800d040:	687b      	ldr	r3, [r7, #4]
 800d042:	3304      	adds	r3, #4
 800d044:	4a3d      	ldr	r2, [pc, #244]	; (800d13c <problem_fetch+0xbad8>)
 800d046:	461d      	mov	r5, r3
 800d048:	4614      	mov	r4, r2
 800d04a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d04c:	6028      	str	r0, [r5, #0]
 800d04e:	6069      	str	r1, [r5, #4]
 800d050:	60aa      	str	r2, [r5, #8]
 800d052:	60eb      	str	r3, [r5, #12]
 800d054:	7823      	ldrb	r3, [r4, #0]
 800d056:	742b      	strb	r3, [r5, #16]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 800d058:	687b      	ldr	r3, [r7, #4]
 800d05a:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800d05e:	4a38      	ldr	r2, [pc, #224]	; (800d140 <problem_fetch+0xbadc>)
 800d060:	461c      	mov	r4, r3
 800d062:	4613      	mov	r3, r2
 800d064:	cb07      	ldmia	r3!, {r0, r1, r2}
 800d066:	6020      	str	r0, [r4, #0]
 800d068:	6061      	str	r1, [r4, #4]
 800d06a:	60a2      	str	r2, [r4, #8]
 800d06c:	881b      	ldrh	r3, [r3, #0]
 800d06e:	81a3      	strh	r3, [r4, #12]
			break;
 800d070:	f00f ba28 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 335 :
			strcpy(p->name,"POWER HUNGRY");
 800d074:	687b      	ldr	r3, [r7, #4]
 800d076:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800d07a:	4a32      	ldr	r2, [pc, #200]	; (800d144 <problem_fetch+0xbae0>)
 800d07c:	461c      	mov	r4, r3
 800d07e:	4613      	mov	r3, r2
 800d080:	cb07      	ldmia	r3!, {r0, r1, r2}
 800d082:	6020      	str	r0, [r4, #0]
 800d084:	6061      	str	r1, [r4, #4]
 800d086:	60a2      	str	r2, [r4, #8]
 800d088:	781b      	ldrb	r3, [r3, #0]
 800d08a:	7323      	strb	r3, [r4, #12]
			strcpy(p->grade,"7C");
 800d08c:	687b      	ldr	r3, [r7, #4]
 800d08e:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800d092:	4a2d      	ldr	r2, [pc, #180]	; (800d148 <problem_fetch+0xbae4>)
 800d094:	8811      	ldrh	r1, [r2, #0]
 800d096:	7892      	ldrb	r2, [r2, #2]
 800d098:	8019      	strh	r1, [r3, #0]
 800d09a:	709a      	strb	r2, [r3, #2]
			p->moveSize = 6;
 800d09c:	687b      	ldr	r3, [r7, #4]
 800d09e:	2206      	movs	r2, #6
 800d0a0:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"H,G,K,D,I,D");
 800d0a2:	687b      	ldr	r3, [r7, #4]
 800d0a4:	33a4      	adds	r3, #164	; 0xa4
 800d0a6:	4a29      	ldr	r2, [pc, #164]	; (800d14c <problem_fetch+0xbae8>)
 800d0a8:	461c      	mov	r4, r3
 800d0aa:	4613      	mov	r3, r2
 800d0ac:	cb07      	ldmia	r3!, {r0, r1, r2}
 800d0ae:	6020      	str	r0, [r4, #0]
 800d0b0:	6061      	str	r1, [r4, #4]
 800d0b2:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,4,9,11,14,18");
 800d0b4:	687b      	ldr	r3, [r7, #4]
 800d0b6:	3304      	adds	r3, #4
 800d0b8:	4a25      	ldr	r2, [pc, #148]	; (800d150 <problem_fetch+0xbaec>)
 800d0ba:	461c      	mov	r4, r3
 800d0bc:	4613      	mov	r3, r2
 800d0be:	cb07      	ldmia	r3!, {r0, r1, r2}
 800d0c0:	6020      	str	r0, [r4, #0]
 800d0c2:	6061      	str	r1, [r4, #4]
 800d0c4:	60a2      	str	r2, [r4, #8]
 800d0c6:	881a      	ldrh	r2, [r3, #0]
 800d0c8:	789b      	ldrb	r3, [r3, #2]
 800d0ca:	81a2      	strh	r2, [r4, #12]
 800d0cc:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish,"s,s,d,d,d,e");
 800d0ce:	687b      	ldr	r3, [r7, #4]
 800d0d0:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800d0d4:	4a1f      	ldr	r2, [pc, #124]	; (800d154 <problem_fetch+0xbaf0>)
 800d0d6:	461c      	mov	r4, r3
 800d0d8:	4613      	mov	r3, r2
 800d0da:	cb07      	ldmia	r3!, {r0, r1, r2}
 800d0dc:	6020      	str	r0, [r4, #0]
 800d0de:	6061      	str	r1, [r4, #4]
 800d0e0:	60a2      	str	r2, [r4, #8]
			break;
 800d0e2:	f00f b9ef 	b.w	801c4c4 <problem_fetch+0x1ae60>
 800d0e6:	bf00      	nop
 800d0e8:	08027c70 	.word	0x08027c70
 800d0ec:	08023cc4 	.word	0x08023cc4
 800d0f0:	08027c8c 	.word	0x08027c8c
 800d0f4:	08027c98 	.word	0x08027c98
 800d0f8:	08023ff0 	.word	0x08023ff0
 800d0fc:	08027ca8 	.word	0x08027ca8
 800d100:	08027cb4 	.word	0x08027cb4
 800d104:	08027cbc 	.word	0x08027cbc
 800d108:	08023c78 	.word	0x08023c78
 800d10c:	08027cc8 	.word	0x08027cc8
 800d110:	08023b24 	.word	0x08023b24
 800d114:	08026530 	.word	0x08026530
 800d118:	08027cd8 	.word	0x08027cd8
 800d11c:	08023ec0 	.word	0x08023ec0
 800d120:	08027ce8 	.word	0x08027ce8
 800d124:	08023bf0 	.word	0x08023bf0
 800d128:	08027cec 	.word	0x08027cec
 800d12c:	08027d00 	.word	0x08027d00
 800d130:	080243cc 	.word	0x080243cc
 800d134:	08027d1c 	.word	0x08027d1c
 800d138:	08027d28 	.word	0x08027d28
 800d13c:	08027d38 	.word	0x08027d38
 800d140:	08023cac 	.word	0x08023cac
 800d144:	08027d4c 	.word	0x08027d4c
 800d148:	08024358 	.word	0x08024358
 800d14c:	08027d5c 	.word	0x08027d5c
 800d150:	08027d68 	.word	0x08027d68
 800d154:	08023b04 	.word	0x08023b04
		case 336 :
			strcpy(p->name,"INTERESTING");
 800d158:	687b      	ldr	r3, [r7, #4]
 800d15a:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800d15e:	4aac      	ldr	r2, [pc, #688]	; (800d410 <problem_fetch+0xbdac>)
 800d160:	461c      	mov	r4, r3
 800d162:	4613      	mov	r3, r2
 800d164:	cb07      	ldmia	r3!, {r0, r1, r2}
 800d166:	6020      	str	r0, [r4, #0]
 800d168:	6061      	str	r1, [r4, #4]
 800d16a:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade,"6C+");
 800d16c:	687b      	ldr	r3, [r7, #4]
 800d16e:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800d172:	4aa8      	ldr	r2, [pc, #672]	; (800d414 <problem_fetch+0xbdb0>)
 800d174:	6810      	ldr	r0, [r2, #0]
 800d176:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 800d178:	687b      	ldr	r3, [r7, #4]
 800d17a:	2207      	movs	r2, #7
 800d17c:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,H,H,G,H,E,I");
 800d17e:	687b      	ldr	r3, [r7, #4]
 800d180:	33a4      	adds	r3, #164	; 0xa4
 800d182:	4aa5      	ldr	r2, [pc, #660]	; (800d418 <problem_fetch+0xbdb4>)
 800d184:	461c      	mov	r4, r3
 800d186:	4613      	mov	r3, r2
 800d188:	cb07      	ldmia	r3!, {r0, r1, r2}
 800d18a:	6020      	str	r0, [r4, #0]
 800d18c:	6061      	str	r1, [r4, #4]
 800d18e:	60a2      	str	r2, [r4, #8]
 800d190:	881b      	ldrh	r3, [r3, #0]
 800d192:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,5,8,10,13,16,18");
 800d194:	687b      	ldr	r3, [r7, #4]
 800d196:	3304      	adds	r3, #4
 800d198:	4aa0      	ldr	r2, [pc, #640]	; (800d41c <problem_fetch+0xbdb8>)
 800d19a:	461d      	mov	r5, r3
 800d19c:	4614      	mov	r4, r2
 800d19e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d1a0:	6028      	str	r0, [r5, #0]
 800d1a2:	6069      	str	r1, [r5, #4]
 800d1a4:	60aa      	str	r2, [r5, #8]
 800d1a6:	60eb      	str	r3, [r5, #12]
 800d1a8:	8823      	ldrh	r3, [r4, #0]
 800d1aa:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,s,d,d,d,d,e");
 800d1ac:	687b      	ldr	r3, [r7, #4]
 800d1ae:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800d1b2:	4a9b      	ldr	r2, [pc, #620]	; (800d420 <problem_fetch+0xbdbc>)
 800d1b4:	461c      	mov	r4, r3
 800d1b6:	4613      	mov	r3, r2
 800d1b8:	cb07      	ldmia	r3!, {r0, r1, r2}
 800d1ba:	6020      	str	r0, [r4, #0]
 800d1bc:	6061      	str	r1, [r4, #4]
 800d1be:	60a2      	str	r2, [r4, #8]
 800d1c0:	881b      	ldrh	r3, [r3, #0]
 800d1c2:	81a3      	strh	r3, [r4, #12]
			break;
 800d1c4:	f00f b97e 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 337 :
			strcpy(p->name,"BLACK WINGS");
 800d1c8:	687b      	ldr	r3, [r7, #4]
 800d1ca:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800d1ce:	4a95      	ldr	r2, [pc, #596]	; (800d424 <problem_fetch+0xbdc0>)
 800d1d0:	461c      	mov	r4, r3
 800d1d2:	4613      	mov	r3, r2
 800d1d4:	cb07      	ldmia	r3!, {r0, r1, r2}
 800d1d6:	6020      	str	r0, [r4, #0]
 800d1d8:	6061      	str	r1, [r4, #4]
 800d1da:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade,"6B+");
 800d1dc:	687b      	ldr	r3, [r7, #4]
 800d1de:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800d1e2:	4a91      	ldr	r2, [pc, #580]	; (800d428 <problem_fetch+0xbdc4>)
 800d1e4:	6810      	ldr	r0, [r2, #0]
 800d1e6:	6018      	str	r0, [r3, #0]
			p->moveSize = 9;
 800d1e8:	687b      	ldr	r3, [r7, #4]
 800d1ea:	2209      	movs	r2, #9
 800d1ec:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"C,E,D,C,H,C,E,H,I");
 800d1ee:	687b      	ldr	r3, [r7, #4]
 800d1f0:	33a4      	adds	r3, #164	; 0xa4
 800d1f2:	4a8e      	ldr	r2, [pc, #568]	; (800d42c <problem_fetch+0xbdc8>)
 800d1f4:	461d      	mov	r5, r3
 800d1f6:	4614      	mov	r4, r2
 800d1f8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d1fa:	6028      	str	r0, [r5, #0]
 800d1fc:	6069      	str	r1, [r5, #4]
 800d1fe:	60aa      	str	r2, [r5, #8]
 800d200:	60eb      	str	r3, [r5, #12]
 800d202:	8823      	ldrh	r3, [r4, #0]
 800d204:	822b      	strh	r3, [r5, #16]
			strcpy(p->moveNumbers,"5,6,15,8,10,13,16,5,18");
 800d206:	687b      	ldr	r3, [r7, #4]
 800d208:	3304      	adds	r3, #4
 800d20a:	4a89      	ldr	r2, [pc, #548]	; (800d430 <problem_fetch+0xbdcc>)
 800d20c:	461c      	mov	r4, r3
 800d20e:	4615      	mov	r5, r2
 800d210:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d212:	6020      	str	r0, [r4, #0]
 800d214:	6061      	str	r1, [r4, #4]
 800d216:	60a2      	str	r2, [r4, #8]
 800d218:	60e3      	str	r3, [r4, #12]
 800d21a:	6828      	ldr	r0, [r5, #0]
 800d21c:	6120      	str	r0, [r4, #16]
 800d21e:	88ab      	ldrh	r3, [r5, #4]
 800d220:	79aa      	ldrb	r2, [r5, #6]
 800d222:	82a3      	strh	r3, [r4, #20]
 800d224:	4613      	mov	r3, r2
 800d226:	75a3      	strb	r3, [r4, #22]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,d,e");
 800d228:	687b      	ldr	r3, [r7, #4]
 800d22a:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800d22e:	4a81      	ldr	r2, [pc, #516]	; (800d434 <problem_fetch+0xbdd0>)
 800d230:	461d      	mov	r5, r3
 800d232:	4614      	mov	r4, r2
 800d234:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d236:	6028      	str	r0, [r5, #0]
 800d238:	6069      	str	r1, [r5, #4]
 800d23a:	60aa      	str	r2, [r5, #8]
 800d23c:	60eb      	str	r3, [r5, #12]
 800d23e:	8823      	ldrh	r3, [r4, #0]
 800d240:	822b      	strh	r3, [r5, #16]
			break;
 800d242:	f00f b93f 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 338 :
			strcpy(p->name,"TVÅ");
 800d246:	687b      	ldr	r3, [r7, #4]
 800d248:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800d24c:	4a7a      	ldr	r2, [pc, #488]	; (800d438 <problem_fetch+0xbdd4>)
 800d24e:	6810      	ldr	r0, [r2, #0]
 800d250:	6018      	str	r0, [r3, #0]
 800d252:	7912      	ldrb	r2, [r2, #4]
 800d254:	711a      	strb	r2, [r3, #4]
			strcpy(p->grade,"6B+");
 800d256:	687b      	ldr	r3, [r7, #4]
 800d258:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800d25c:	4a72      	ldr	r2, [pc, #456]	; (800d428 <problem_fetch+0xbdc4>)
 800d25e:	6810      	ldr	r0, [r2, #0]
 800d260:	6018      	str	r0, [r3, #0]
			p->moveSize = 8;
 800d262:	687b      	ldr	r3, [r7, #4]
 800d264:	2208      	movs	r2, #8
 800d266:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,H,H,E,E,G,D,D");
 800d268:	687b      	ldr	r3, [r7, #4]
 800d26a:	33a4      	adds	r3, #164	; 0xa4
 800d26c:	4a73      	ldr	r2, [pc, #460]	; (800d43c <problem_fetch+0xbdd8>)
 800d26e:	461c      	mov	r4, r3
 800d270:	4615      	mov	r5, r2
 800d272:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d274:	6020      	str	r0, [r4, #0]
 800d276:	6061      	str	r1, [r4, #4]
 800d278:	60a2      	str	r2, [r4, #8]
 800d27a:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,10,8,8,12,14,15,18");
 800d27c:	687b      	ldr	r3, [r7, #4]
 800d27e:	3304      	adds	r3, #4
 800d280:	4a6f      	ldr	r2, [pc, #444]	; (800d440 <problem_fetch+0xbddc>)
 800d282:	461d      	mov	r5, r3
 800d284:	4614      	mov	r4, r2
 800d286:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d288:	6028      	str	r0, [r5, #0]
 800d28a:	6069      	str	r1, [r5, #4]
 800d28c:	60aa      	str	r2, [r5, #8]
 800d28e:	60eb      	str	r3, [r5, #12]
 800d290:	6820      	ldr	r0, [r4, #0]
 800d292:	6128      	str	r0, [r5, #16]
 800d294:	7923      	ldrb	r3, [r4, #4]
 800d296:	752b      	strb	r3, [r5, #20]
			strcpy(p->startFinish,"s,d,d,d,d,d,d,e");
 800d298:	687b      	ldr	r3, [r7, #4]
 800d29a:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800d29e:	4a69      	ldr	r2, [pc, #420]	; (800d444 <problem_fetch+0xbde0>)
 800d2a0:	461c      	mov	r4, r3
 800d2a2:	4615      	mov	r5, r2
 800d2a4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d2a6:	6020      	str	r0, [r4, #0]
 800d2a8:	6061      	str	r1, [r4, #4]
 800d2aa:	60a2      	str	r2, [r4, #8]
 800d2ac:	60e3      	str	r3, [r4, #12]
			break;
 800d2ae:	f00f b909 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 339 :
			strcpy(p->name,"HIGH STEP IF YOU CAN");
 800d2b2:	687b      	ldr	r3, [r7, #4]
 800d2b4:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800d2b8:	4a63      	ldr	r2, [pc, #396]	; (800d448 <problem_fetch+0xbde4>)
 800d2ba:	461d      	mov	r5, r3
 800d2bc:	4614      	mov	r4, r2
 800d2be:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d2c0:	6028      	str	r0, [r5, #0]
 800d2c2:	6069      	str	r1, [r5, #4]
 800d2c4:	60aa      	str	r2, [r5, #8]
 800d2c6:	60eb      	str	r3, [r5, #12]
 800d2c8:	6820      	ldr	r0, [r4, #0]
 800d2ca:	6128      	str	r0, [r5, #16]
 800d2cc:	7923      	ldrb	r3, [r4, #4]
 800d2ce:	752b      	strb	r3, [r5, #20]
			strcpy(p->grade,"6B+");
 800d2d0:	687b      	ldr	r3, [r7, #4]
 800d2d2:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800d2d6:	4a54      	ldr	r2, [pc, #336]	; (800d428 <problem_fetch+0xbdc4>)
 800d2d8:	6810      	ldr	r0, [r2, #0]
 800d2da:	6018      	str	r0, [r3, #0]
			p->moveSize = 8;
 800d2dc:	687b      	ldr	r3, [r7, #4]
 800d2de:	2208      	movs	r2, #8
 800d2e0:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,J,B,E,E,B,E,D");
 800d2e2:	687b      	ldr	r3, [r7, #4]
 800d2e4:	33a4      	adds	r3, #164	; 0xa4
 800d2e6:	4a59      	ldr	r2, [pc, #356]	; (800d44c <problem_fetch+0xbde8>)
 800d2e8:	461c      	mov	r4, r3
 800d2ea:	4615      	mov	r5, r2
 800d2ec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d2ee:	6020      	str	r0, [r4, #0]
 800d2f0:	6061      	str	r1, [r4, #4]
 800d2f2:	60a2      	str	r2, [r4, #8]
 800d2f4:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,5,10,8,12,15,6,18");
 800d2f6:	687b      	ldr	r3, [r7, #4]
 800d2f8:	3304      	adds	r3, #4
 800d2fa:	4a55      	ldr	r2, [pc, #340]	; (800d450 <problem_fetch+0xbdec>)
 800d2fc:	461d      	mov	r5, r3
 800d2fe:	4614      	mov	r4, r2
 800d300:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d302:	6028      	str	r0, [r5, #0]
 800d304:	6069      	str	r1, [r5, #4]
 800d306:	60aa      	str	r2, [r5, #8]
 800d308:	60eb      	str	r3, [r5, #12]
 800d30a:	6820      	ldr	r0, [r4, #0]
 800d30c:	6128      	str	r0, [r5, #16]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,e");
 800d30e:	687b      	ldr	r3, [r7, #4]
 800d310:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800d314:	4a4f      	ldr	r2, [pc, #316]	; (800d454 <problem_fetch+0xbdf0>)
 800d316:	461c      	mov	r4, r3
 800d318:	4615      	mov	r5, r2
 800d31a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d31c:	6020      	str	r0, [r4, #0]
 800d31e:	6061      	str	r1, [r4, #4]
 800d320:	60a2      	str	r2, [r4, #8]
 800d322:	60e3      	str	r3, [r4, #12]
			break;
 800d324:	f00f b8ce 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 340 :
			strcpy(p->name,"APPLE PIE");
 800d328:	687b      	ldr	r3, [r7, #4]
 800d32a:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800d32e:	494a      	ldr	r1, [pc, #296]	; (800d458 <problem_fetch+0xbdf4>)
 800d330:	461a      	mov	r2, r3
 800d332:	460b      	mov	r3, r1
 800d334:	cb03      	ldmia	r3!, {r0, r1}
 800d336:	6010      	str	r0, [r2, #0]
 800d338:	6051      	str	r1, [r2, #4]
 800d33a:	881b      	ldrh	r3, [r3, #0]
 800d33c:	8113      	strh	r3, [r2, #8]
			strcpy(p->grade,"7A");
 800d33e:	687b      	ldr	r3, [r7, #4]
 800d340:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800d344:	4a45      	ldr	r2, [pc, #276]	; (800d45c <problem_fetch+0xbdf8>)
 800d346:	8811      	ldrh	r1, [r2, #0]
 800d348:	7892      	ldrb	r2, [r2, #2]
 800d34a:	8019      	strh	r1, [r3, #0]
 800d34c:	709a      	strb	r2, [r3, #2]
			p->moveSize = 6;
 800d34e:	687b      	ldr	r3, [r7, #4]
 800d350:	2206      	movs	r2, #6
 800d352:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,E,I,F,J,I");
 800d354:	687b      	ldr	r3, [r7, #4]
 800d356:	33a4      	adds	r3, #164	; 0xa4
 800d358:	4a41      	ldr	r2, [pc, #260]	; (800d460 <problem_fetch+0xbdfc>)
 800d35a:	461c      	mov	r4, r3
 800d35c:	4613      	mov	r3, r2
 800d35e:	cb07      	ldmia	r3!, {r0, r1, r2}
 800d360:	6020      	str	r0, [r4, #0]
 800d362:	6061      	str	r1, [r4, #4]
 800d364:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,8,10,13,16,18");
 800d366:	687b      	ldr	r3, [r7, #4]
 800d368:	3304      	adds	r3, #4
 800d36a:	4a3e      	ldr	r2, [pc, #248]	; (800d464 <problem_fetch+0xbe00>)
 800d36c:	461c      	mov	r4, r3
 800d36e:	4615      	mov	r5, r2
 800d370:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d372:	6020      	str	r0, [r4, #0]
 800d374:	6061      	str	r1, [r4, #4]
 800d376:	60a2      	str	r2, [r4, #8]
 800d378:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 800d37a:	687b      	ldr	r3, [r7, #4]
 800d37c:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800d380:	4a39      	ldr	r2, [pc, #228]	; (800d468 <problem_fetch+0xbe04>)
 800d382:	461c      	mov	r4, r3
 800d384:	4613      	mov	r3, r2
 800d386:	cb07      	ldmia	r3!, {r0, r1, r2}
 800d388:	6020      	str	r0, [r4, #0]
 800d38a:	6061      	str	r1, [r4, #4]
 800d38c:	60a2      	str	r2, [r4, #8]
			break;
 800d38e:	f00f b899 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 341 :
			strcpy(p->name,"NOT A FIRSTIMER");
 800d392:	687b      	ldr	r3, [r7, #4]
 800d394:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800d398:	4a34      	ldr	r2, [pc, #208]	; (800d46c <problem_fetch+0xbe08>)
 800d39a:	461c      	mov	r4, r3
 800d39c:	4615      	mov	r5, r2
 800d39e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d3a0:	6020      	str	r0, [r4, #0]
 800d3a2:	6061      	str	r1, [r4, #4]
 800d3a4:	60a2      	str	r2, [r4, #8]
 800d3a6:	60e3      	str	r3, [r4, #12]
			strcpy(p->grade,"6B+");
 800d3a8:	687b      	ldr	r3, [r7, #4]
 800d3aa:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800d3ae:	4a1e      	ldr	r2, [pc, #120]	; (800d428 <problem_fetch+0xbdc4>)
 800d3b0:	6810      	ldr	r0, [r2, #0]
 800d3b2:	6018      	str	r0, [r3, #0]
			p->moveSize = 10;
 800d3b4:	687b      	ldr	r3, [r7, #4]
 800d3b6:	220a      	movs	r2, #10
 800d3b8:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,E,H,E,C,I,G,G,J,I");
 800d3ba:	687b      	ldr	r3, [r7, #4]
 800d3bc:	33a4      	adds	r3, #164	; 0xa4
 800d3be:	4a2c      	ldr	r2, [pc, #176]	; (800d470 <problem_fetch+0xbe0c>)
 800d3c0:	461d      	mov	r5, r3
 800d3c2:	4614      	mov	r4, r2
 800d3c4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d3c6:	6028      	str	r0, [r5, #0]
 800d3c8:	6069      	str	r1, [r5, #4]
 800d3ca:	60aa      	str	r2, [r5, #8]
 800d3cc:	60eb      	str	r3, [r5, #12]
 800d3ce:	6820      	ldr	r0, [r4, #0]
 800d3d0:	6128      	str	r0, [r5, #16]
			strcpy(p->moveNumbers,"5,6,10,8,13,14,15,17,7,18");
 800d3d2:	687b      	ldr	r3, [r7, #4]
 800d3d4:	3304      	adds	r3, #4
 800d3d6:	4a27      	ldr	r2, [pc, #156]	; (800d474 <problem_fetch+0xbe10>)
 800d3d8:	461d      	mov	r5, r3
 800d3da:	4614      	mov	r4, r2
 800d3dc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d3de:	6028      	str	r0, [r5, #0]
 800d3e0:	6069      	str	r1, [r5, #4]
 800d3e2:	60aa      	str	r2, [r5, #8]
 800d3e4:	60eb      	str	r3, [r5, #12]
 800d3e6:	cc03      	ldmia	r4!, {r0, r1}
 800d3e8:	6128      	str	r0, [r5, #16]
 800d3ea:	6169      	str	r1, [r5, #20]
 800d3ec:	8823      	ldrh	r3, [r4, #0]
 800d3ee:	832b      	strh	r3, [r5, #24]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,d,d,e");
 800d3f0:	687b      	ldr	r3, [r7, #4]
 800d3f2:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800d3f6:	4a20      	ldr	r2, [pc, #128]	; (800d478 <problem_fetch+0xbe14>)
 800d3f8:	461d      	mov	r5, r3
 800d3fa:	4614      	mov	r4, r2
 800d3fc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d3fe:	6028      	str	r0, [r5, #0]
 800d400:	6069      	str	r1, [r5, #4]
 800d402:	60aa      	str	r2, [r5, #8]
 800d404:	60eb      	str	r3, [r5, #12]
 800d406:	6820      	ldr	r0, [r4, #0]
 800d408:	6128      	str	r0, [r5, #16]
			break;
 800d40a:	f00f b85b 	b.w	801c4c4 <problem_fetch+0x1ae60>
 800d40e:	bf00      	nop
 800d410:	08027d78 	.word	0x08027d78
 800d414:	08023bbc 	.word	0x08023bbc
 800d418:	08027d84 	.word	0x08027d84
 800d41c:	08027d94 	.word	0x08027d94
 800d420:	08023b9c 	.word	0x08023b9c
 800d424:	08027da8 	.word	0x08027da8
 800d428:	08023b24 	.word	0x08023b24
 800d42c:	08027db4 	.word	0x08027db4
 800d430:	08027dc8 	.word	0x08027dc8
 800d434:	08024b08 	.word	0x08024b08
 800d438:	08027de0 	.word	0x08027de0
 800d43c:	08027de8 	.word	0x08027de8
 800d440:	08027df8 	.word	0x08027df8
 800d444:	08023d34 	.word	0x08023d34
 800d448:	08027e10 	.word	0x08027e10
 800d44c:	08027e28 	.word	0x08027e28
 800d450:	08027e38 	.word	0x08027e38
 800d454:	08023c48 	.word	0x08023c48
 800d458:	08027e4c 	.word	0x08027e4c
 800d45c:	08023ae4 	.word	0x08023ae4
 800d460:	08027e58 	.word	0x08027e58
 800d464:	080261f8 	.word	0x080261f8
 800d468:	08023ec0 	.word	0x08023ec0
 800d46c:	08027e64 	.word	0x08027e64
 800d470:	08027e74 	.word	0x08027e74
 800d474:	08027e88 	.word	0x08027e88
 800d478:	080243cc 	.word	0x080243cc
		case 342 :
			strcpy(p->name,"PICTURES ON MY PHONE");
 800d47c:	687b      	ldr	r3, [r7, #4]
 800d47e:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800d482:	4aa9      	ldr	r2, [pc, #676]	; (800d728 <problem_fetch+0xc0c4>)
 800d484:	461d      	mov	r5, r3
 800d486:	4614      	mov	r4, r2
 800d488:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d48a:	6028      	str	r0, [r5, #0]
 800d48c:	6069      	str	r1, [r5, #4]
 800d48e:	60aa      	str	r2, [r5, #8]
 800d490:	60eb      	str	r3, [r5, #12]
 800d492:	6820      	ldr	r0, [r4, #0]
 800d494:	6128      	str	r0, [r5, #16]
 800d496:	7923      	ldrb	r3, [r4, #4]
 800d498:	752b      	strb	r3, [r5, #20]
			strcpy(p->grade,"6B+");
 800d49a:	687b      	ldr	r3, [r7, #4]
 800d49c:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800d4a0:	4aa2      	ldr	r2, [pc, #648]	; (800d72c <problem_fetch+0xc0c8>)
 800d4a2:	6810      	ldr	r0, [r2, #0]
 800d4a4:	6018      	str	r0, [r3, #0]
			p->moveSize = 8;
 800d4a6:	687b      	ldr	r3, [r7, #4]
 800d4a8:	2208      	movs	r2, #8
 800d4aa:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,H,E,H,C,I,G,I");
 800d4ac:	687b      	ldr	r3, [r7, #4]
 800d4ae:	33a4      	adds	r3, #164	; 0xa4
 800d4b0:	4a9f      	ldr	r2, [pc, #636]	; (800d730 <problem_fetch+0xc0cc>)
 800d4b2:	461c      	mov	r4, r3
 800d4b4:	4615      	mov	r5, r2
 800d4b6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d4b8:	6020      	str	r0, [r4, #0]
 800d4ba:	6061      	str	r1, [r4, #4]
 800d4bc:	60a2      	str	r2, [r4, #8]
 800d4be:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,5,8,10,13,14,17,18");
 800d4c0:	687b      	ldr	r3, [r7, #4]
 800d4c2:	3304      	adds	r3, #4
 800d4c4:	4a9b      	ldr	r2, [pc, #620]	; (800d734 <problem_fetch+0xc0d0>)
 800d4c6:	461d      	mov	r5, r3
 800d4c8:	4614      	mov	r4, r2
 800d4ca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d4cc:	6028      	str	r0, [r5, #0]
 800d4ce:	6069      	str	r1, [r5, #4]
 800d4d0:	60aa      	str	r2, [r5, #8]
 800d4d2:	60eb      	str	r3, [r5, #12]
 800d4d4:	6820      	ldr	r0, [r4, #0]
 800d4d6:	6128      	str	r0, [r5, #16]
 800d4d8:	7923      	ldrb	r3, [r4, #4]
 800d4da:	752b      	strb	r3, [r5, #20]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,e");
 800d4dc:	687b      	ldr	r3, [r7, #4]
 800d4de:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800d4e2:	4a95      	ldr	r2, [pc, #596]	; (800d738 <problem_fetch+0xc0d4>)
 800d4e4:	461c      	mov	r4, r3
 800d4e6:	4615      	mov	r5, r2
 800d4e8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d4ea:	6020      	str	r0, [r4, #0]
 800d4ec:	6061      	str	r1, [r4, #4]
 800d4ee:	60a2      	str	r2, [r4, #8]
 800d4f0:	60e3      	str	r3, [r4, #12]
			break;
 800d4f2:	f00e bfe7 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 343 :
			strcpy(p->name,"ONE CRIMP");
 800d4f6:	687b      	ldr	r3, [r7, #4]
 800d4f8:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800d4fc:	498f      	ldr	r1, [pc, #572]	; (800d73c <problem_fetch+0xc0d8>)
 800d4fe:	461a      	mov	r2, r3
 800d500:	460b      	mov	r3, r1
 800d502:	cb03      	ldmia	r3!, {r0, r1}
 800d504:	6010      	str	r0, [r2, #0]
 800d506:	6051      	str	r1, [r2, #4]
 800d508:	881b      	ldrh	r3, [r3, #0]
 800d50a:	8113      	strh	r3, [r2, #8]
			strcpy(p->grade,"7A+");
 800d50c:	687b      	ldr	r3, [r7, #4]
 800d50e:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800d512:	4a8b      	ldr	r2, [pc, #556]	; (800d740 <problem_fetch+0xc0dc>)
 800d514:	6810      	ldr	r0, [r2, #0]
 800d516:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 800d518:	687b      	ldr	r3, [r7, #4]
 800d51a:	2207      	movs	r2, #7
 800d51c:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,H,I,H,G,D,D");
 800d51e:	687b      	ldr	r3, [r7, #4]
 800d520:	33a4      	adds	r3, #164	; 0xa4
 800d522:	4a88      	ldr	r2, [pc, #544]	; (800d744 <problem_fetch+0xc0e0>)
 800d524:	461c      	mov	r4, r3
 800d526:	4613      	mov	r3, r2
 800d528:	cb07      	ldmia	r3!, {r0, r1, r2}
 800d52a:	6020      	str	r0, [r4, #0]
 800d52c:	6061      	str	r1, [r4, #4]
 800d52e:	60a2      	str	r2, [r4, #8]
 800d530:	881b      	ldrh	r3, [r3, #0]
 800d532:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,8,9,12,15,15,18");
 800d534:	687b      	ldr	r3, [r7, #4]
 800d536:	3304      	adds	r3, #4
 800d538:	4a83      	ldr	r2, [pc, #524]	; (800d748 <problem_fetch+0xc0e4>)
 800d53a:	461d      	mov	r5, r3
 800d53c:	4614      	mov	r4, r2
 800d53e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d540:	6028      	str	r0, [r5, #0]
 800d542:	6069      	str	r1, [r5, #4]
 800d544:	60aa      	str	r2, [r5, #8]
 800d546:	60eb      	str	r3, [r5, #12]
 800d548:	8823      	ldrh	r3, [r4, #0]
 800d54a:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 800d54c:	687b      	ldr	r3, [r7, #4]
 800d54e:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800d552:	4a7e      	ldr	r2, [pc, #504]	; (800d74c <problem_fetch+0xc0e8>)
 800d554:	461c      	mov	r4, r3
 800d556:	4613      	mov	r3, r2
 800d558:	cb07      	ldmia	r3!, {r0, r1, r2}
 800d55a:	6020      	str	r0, [r4, #0]
 800d55c:	6061      	str	r1, [r4, #4]
 800d55e:	60a2      	str	r2, [r4, #8]
 800d560:	881b      	ldrh	r3, [r3, #0]
 800d562:	81a3      	strh	r3, [r4, #12]
			break;
 800d564:	f00e bfae 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 344 :
			strcpy(p->name,"GHASTLY");
 800d568:	687b      	ldr	r3, [r7, #4]
 800d56a:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800d56e:	4978      	ldr	r1, [pc, #480]	; (800d750 <problem_fetch+0xc0ec>)
 800d570:	461a      	mov	r2, r3
 800d572:	460b      	mov	r3, r1
 800d574:	cb03      	ldmia	r3!, {r0, r1}
 800d576:	6010      	str	r0, [r2, #0]
 800d578:	6051      	str	r1, [r2, #4]
			strcpy(p->grade,"7A");
 800d57a:	687b      	ldr	r3, [r7, #4]
 800d57c:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800d580:	4a74      	ldr	r2, [pc, #464]	; (800d754 <problem_fetch+0xc0f0>)
 800d582:	8811      	ldrh	r1, [r2, #0]
 800d584:	7892      	ldrb	r2, [r2, #2]
 800d586:	8019      	strh	r1, [r3, #0]
 800d588:	709a      	strb	r2, [r3, #2]
			p->moveSize = 8;
 800d58a:	687b      	ldr	r3, [r7, #4]
 800d58c:	2208      	movs	r2, #8
 800d58e:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,H,K,J,K,E,G,D");
 800d590:	687b      	ldr	r3, [r7, #4]
 800d592:	33a4      	adds	r3, #164	; 0xa4
 800d594:	4a70      	ldr	r2, [pc, #448]	; (800d758 <problem_fetch+0xc0f4>)
 800d596:	461c      	mov	r4, r3
 800d598:	4615      	mov	r5, r2
 800d59a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d59c:	6020      	str	r0, [r4, #0]
 800d59e:	6061      	str	r1, [r4, #4]
 800d5a0:	60a2      	str	r2, [r4, #8]
 800d5a2:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"6,5,9,12,14,14,17,18");
 800d5a4:	687b      	ldr	r3, [r7, #4]
 800d5a6:	3304      	adds	r3, #4
 800d5a8:	4a6c      	ldr	r2, [pc, #432]	; (800d75c <problem_fetch+0xc0f8>)
 800d5aa:	461d      	mov	r5, r3
 800d5ac:	4614      	mov	r4, r2
 800d5ae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d5b0:	6028      	str	r0, [r5, #0]
 800d5b2:	6069      	str	r1, [r5, #4]
 800d5b4:	60aa      	str	r2, [r5, #8]
 800d5b6:	60eb      	str	r3, [r5, #12]
 800d5b8:	6820      	ldr	r0, [r4, #0]
 800d5ba:	6128      	str	r0, [r5, #16]
 800d5bc:	7923      	ldrb	r3, [r4, #4]
 800d5be:	752b      	strb	r3, [r5, #20]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,e");
 800d5c0:	687b      	ldr	r3, [r7, #4]
 800d5c2:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800d5c6:	4a5c      	ldr	r2, [pc, #368]	; (800d738 <problem_fetch+0xc0d4>)
 800d5c8:	461c      	mov	r4, r3
 800d5ca:	4615      	mov	r5, r2
 800d5cc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d5ce:	6020      	str	r0, [r4, #0]
 800d5d0:	6061      	str	r1, [r4, #4]
 800d5d2:	60a2      	str	r2, [r4, #8]
 800d5d4:	60e3      	str	r3, [r4, #12]
			break;
 800d5d6:	f00e bf75 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 345 :
			strcpy(p->name,"ELECTRIC HEEL");
 800d5da:	687b      	ldr	r3, [r7, #4]
 800d5dc:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800d5e0:	4a5f      	ldr	r2, [pc, #380]	; (800d760 <problem_fetch+0xc0fc>)
 800d5e2:	461c      	mov	r4, r3
 800d5e4:	4613      	mov	r3, r2
 800d5e6:	cb07      	ldmia	r3!, {r0, r1, r2}
 800d5e8:	6020      	str	r0, [r4, #0]
 800d5ea:	6061      	str	r1, [r4, #4]
 800d5ec:	60a2      	str	r2, [r4, #8]
 800d5ee:	881b      	ldrh	r3, [r3, #0]
 800d5f0:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade,"7A");
 800d5f2:	687b      	ldr	r3, [r7, #4]
 800d5f4:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800d5f8:	4a56      	ldr	r2, [pc, #344]	; (800d754 <problem_fetch+0xc0f0>)
 800d5fa:	8811      	ldrh	r1, [r2, #0]
 800d5fc:	7892      	ldrb	r2, [r2, #2]
 800d5fe:	8019      	strh	r1, [r3, #0]
 800d600:	709a      	strb	r2, [r3, #2]
			p->moveSize = 6;
 800d602:	687b      	ldr	r3, [r7, #4]
 800d604:	2206      	movs	r2, #6
 800d606:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,H,G,E,C,D");
 800d608:	687b      	ldr	r3, [r7, #4]
 800d60a:	33a4      	adds	r3, #164	; 0xa4
 800d60c:	4a55      	ldr	r2, [pc, #340]	; (800d764 <problem_fetch+0xc100>)
 800d60e:	461c      	mov	r4, r3
 800d610:	4613      	mov	r3, r2
 800d612:	cb07      	ldmia	r3!, {r0, r1, r2}
 800d614:	6020      	str	r0, [r4, #0]
 800d616:	6061      	str	r1, [r4, #4]
 800d618:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,8,9,12,13,18");
 800d61a:	687b      	ldr	r3, [r7, #4]
 800d61c:	3304      	adds	r3, #4
 800d61e:	4a52      	ldr	r2, [pc, #328]	; (800d768 <problem_fetch+0xc104>)
 800d620:	461c      	mov	r4, r3
 800d622:	4613      	mov	r3, r2
 800d624:	cb07      	ldmia	r3!, {r0, r1, r2}
 800d626:	6020      	str	r0, [r4, #0]
 800d628:	6061      	str	r1, [r4, #4]
 800d62a:	60a2      	str	r2, [r4, #8]
 800d62c:	881a      	ldrh	r2, [r3, #0]
 800d62e:	789b      	ldrb	r3, [r3, #2]
 800d630:	81a2      	strh	r2, [r4, #12]
 800d632:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 800d634:	687b      	ldr	r3, [r7, #4]
 800d636:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800d63a:	4a4c      	ldr	r2, [pc, #304]	; (800d76c <problem_fetch+0xc108>)
 800d63c:	461c      	mov	r4, r3
 800d63e:	4613      	mov	r3, r2
 800d640:	cb07      	ldmia	r3!, {r0, r1, r2}
 800d642:	6020      	str	r0, [r4, #0]
 800d644:	6061      	str	r1, [r4, #4]
 800d646:	60a2      	str	r2, [r4, #8]
			break;
 800d648:	f00e bf3c 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 346 :
			strcpy(p->name,"WIND BENEATH MY WINGS");
 800d64c:	687b      	ldr	r3, [r7, #4]
 800d64e:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800d652:	4a47      	ldr	r2, [pc, #284]	; (800d770 <problem_fetch+0xc10c>)
 800d654:	461d      	mov	r5, r3
 800d656:	4614      	mov	r4, r2
 800d658:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d65a:	6028      	str	r0, [r5, #0]
 800d65c:	6069      	str	r1, [r5, #4]
 800d65e:	60aa      	str	r2, [r5, #8]
 800d660:	60eb      	str	r3, [r5, #12]
 800d662:	6820      	ldr	r0, [r4, #0]
 800d664:	6128      	str	r0, [r5, #16]
 800d666:	88a3      	ldrh	r3, [r4, #4]
 800d668:	82ab      	strh	r3, [r5, #20]
			strcpy(p->grade,"7C");
 800d66a:	687b      	ldr	r3, [r7, #4]
 800d66c:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800d670:	4a40      	ldr	r2, [pc, #256]	; (800d774 <problem_fetch+0xc110>)
 800d672:	8811      	ldrh	r1, [r2, #0]
 800d674:	7892      	ldrb	r2, [r2, #2]
 800d676:	8019      	strh	r1, [r3, #0]
 800d678:	709a      	strb	r2, [r3, #2]
			p->moveSize = 4;
 800d67a:	687b      	ldr	r3, [r7, #4]
 800d67c:	2204      	movs	r2, #4
 800d67e:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,I,G,D");
 800d680:	687b      	ldr	r3, [r7, #4]
 800d682:	33a4      	adds	r3, #164	; 0xa4
 800d684:	493c      	ldr	r1, [pc, #240]	; (800d778 <problem_fetch+0xc114>)
 800d686:	461a      	mov	r2, r3
 800d688:	460b      	mov	r3, r1
 800d68a:	cb03      	ldmia	r3!, {r0, r1}
 800d68c:	6010      	str	r0, [r2, #0]
 800d68e:	6051      	str	r1, [r2, #4]
			strcpy(p->moveNumbers,"5,9,14,18");
 800d690:	687b      	ldr	r3, [r7, #4]
 800d692:	3304      	adds	r3, #4
 800d694:	4939      	ldr	r1, [pc, #228]	; (800d77c <problem_fetch+0xc118>)
 800d696:	461a      	mov	r2, r3
 800d698:	460b      	mov	r3, r1
 800d69a:	cb03      	ldmia	r3!, {r0, r1}
 800d69c:	6010      	str	r0, [r2, #0]
 800d69e:	6051      	str	r1, [r2, #4]
 800d6a0:	881b      	ldrh	r3, [r3, #0]
 800d6a2:	8113      	strh	r3, [r2, #8]
			strcpy(p->startFinish,"s,d,d,e");
 800d6a4:	687b      	ldr	r3, [r7, #4]
 800d6a6:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800d6aa:	4935      	ldr	r1, [pc, #212]	; (800d780 <problem_fetch+0xc11c>)
 800d6ac:	461a      	mov	r2, r3
 800d6ae:	460b      	mov	r3, r1
 800d6b0:	cb03      	ldmia	r3!, {r0, r1}
 800d6b2:	6010      	str	r0, [r2, #0]
 800d6b4:	6051      	str	r1, [r2, #4]
			break;
 800d6b6:	f00e bf05 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 347 :
			strcpy(p->name,"TAKEOFF");
 800d6ba:	687b      	ldr	r3, [r7, #4]
 800d6bc:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800d6c0:	4930      	ldr	r1, [pc, #192]	; (800d784 <problem_fetch+0xc120>)
 800d6c2:	461a      	mov	r2, r3
 800d6c4:	460b      	mov	r3, r1
 800d6c6:	cb03      	ldmia	r3!, {r0, r1}
 800d6c8:	6010      	str	r0, [r2, #0]
 800d6ca:	6051      	str	r1, [r2, #4]
			strcpy(p->grade,"7A");
 800d6cc:	687b      	ldr	r3, [r7, #4]
 800d6ce:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800d6d2:	4a20      	ldr	r2, [pc, #128]	; (800d754 <problem_fetch+0xc0f0>)
 800d6d4:	8811      	ldrh	r1, [r2, #0]
 800d6d6:	7892      	ldrb	r2, [r2, #2]
 800d6d8:	8019      	strh	r1, [r3, #0]
 800d6da:	709a      	strb	r2, [r3, #2]
			p->moveSize = 5;
 800d6dc:	687b      	ldr	r3, [r7, #4]
 800d6de:	2205      	movs	r2, #5
 800d6e0:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,H,H,G,I");
 800d6e2:	687b      	ldr	r3, [r7, #4]
 800d6e4:	33a4      	adds	r3, #164	; 0xa4
 800d6e6:	4928      	ldr	r1, [pc, #160]	; (800d788 <problem_fetch+0xc124>)
 800d6e8:	461a      	mov	r2, r3
 800d6ea:	460b      	mov	r3, r1
 800d6ec:	cb03      	ldmia	r3!, {r0, r1}
 800d6ee:	6010      	str	r0, [r2, #0]
 800d6f0:	6051      	str	r1, [r2, #4]
 800d6f2:	881b      	ldrh	r3, [r3, #0]
 800d6f4:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"5,5,10,14,18");
 800d6f6:	687b      	ldr	r3, [r7, #4]
 800d6f8:	3304      	adds	r3, #4
 800d6fa:	4a24      	ldr	r2, [pc, #144]	; (800d78c <problem_fetch+0xc128>)
 800d6fc:	461c      	mov	r4, r3
 800d6fe:	4613      	mov	r3, r2
 800d700:	cb07      	ldmia	r3!, {r0, r1, r2}
 800d702:	6020      	str	r0, [r4, #0]
 800d704:	6061      	str	r1, [r4, #4]
 800d706:	60a2      	str	r2, [r4, #8]
 800d708:	781b      	ldrb	r3, [r3, #0]
 800d70a:	7323      	strb	r3, [r4, #12]
			strcpy(p->startFinish,"s,s,d,d,e");
 800d70c:	687b      	ldr	r3, [r7, #4]
 800d70e:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800d712:	491f      	ldr	r1, [pc, #124]	; (800d790 <problem_fetch+0xc12c>)
 800d714:	461a      	mov	r2, r3
 800d716:	460b      	mov	r3, r1
 800d718:	cb03      	ldmia	r3!, {r0, r1}
 800d71a:	6010      	str	r0, [r2, #0]
 800d71c:	6051      	str	r1, [r2, #4]
 800d71e:	881b      	ldrh	r3, [r3, #0]
 800d720:	8113      	strh	r3, [r2, #8]
			break;
 800d722:	f00e becf 	b.w	801c4c4 <problem_fetch+0x1ae60>
 800d726:	bf00      	nop
 800d728:	08027ea4 	.word	0x08027ea4
 800d72c:	08023b24 	.word	0x08023b24
 800d730:	08027ebc 	.word	0x08027ebc
 800d734:	08027ecc 	.word	0x08027ecc
 800d738:	08023c48 	.word	0x08023c48
 800d73c:	08027ee4 	.word	0x08027ee4
 800d740:	08023cc4 	.word	0x08023cc4
 800d744:	08027ef0 	.word	0x08027ef0
 800d748:	08027f00 	.word	0x08027f00
 800d74c:	08023cac 	.word	0x08023cac
 800d750:	08027f14 	.word	0x08027f14
 800d754:	08023ae4 	.word	0x08023ae4
 800d758:	08027f1c 	.word	0x08027f1c
 800d75c:	08027f2c 	.word	0x08027f2c
 800d760:	08027f44 	.word	0x08027f44
 800d764:	08027f54 	.word	0x08027f54
 800d768:	08027f60 	.word	0x08027f60
 800d76c:	08023ec0 	.word	0x08023ec0
 800d770:	08027f70 	.word	0x08027f70
 800d774:	08024358 	.word	0x08024358
 800d778:	08027f88 	.word	0x08027f88
 800d77c:	08027f90 	.word	0x08027f90
 800d780:	08023c78 	.word	0x08023c78
 800d784:	08027f9c 	.word	0x08027f9c
 800d788:	08027fa4 	.word	0x08027fa4
 800d78c:	08027fb0 	.word	0x08027fb0
 800d790:	08024204 	.word	0x08024204
		case 348 :
			strcpy(p->name,"CREAKY SQUEAKY");
 800d794:	687b      	ldr	r3, [r7, #4]
 800d796:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800d79a:	4aae      	ldr	r2, [pc, #696]	; (800da54 <problem_fetch+0xc3f0>)
 800d79c:	461c      	mov	r4, r3
 800d79e:	4613      	mov	r3, r2
 800d7a0:	cb07      	ldmia	r3!, {r0, r1, r2}
 800d7a2:	6020      	str	r0, [r4, #0]
 800d7a4:	6061      	str	r1, [r4, #4]
 800d7a6:	60a2      	str	r2, [r4, #8]
 800d7a8:	881a      	ldrh	r2, [r3, #0]
 800d7aa:	789b      	ldrb	r3, [r3, #2]
 800d7ac:	81a2      	strh	r2, [r4, #12]
 800d7ae:	73a3      	strb	r3, [r4, #14]
			strcpy(p->grade,"6C+");
 800d7b0:	687b      	ldr	r3, [r7, #4]
 800d7b2:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800d7b6:	4aa8      	ldr	r2, [pc, #672]	; (800da58 <problem_fetch+0xc3f4>)
 800d7b8:	6810      	ldr	r0, [r2, #0]
 800d7ba:	6018      	str	r0, [r3, #0]
			p->moveSize = 8;
 800d7bc:	687b      	ldr	r3, [r7, #4]
 800d7be:	2208      	movs	r2, #8
 800d7c0:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"H,B,E,B,E,F,H,D");
 800d7c2:	687b      	ldr	r3, [r7, #4]
 800d7c4:	33a4      	adds	r3, #164	; 0xa4
 800d7c6:	4aa5      	ldr	r2, [pc, #660]	; (800da5c <problem_fetch+0xc3f8>)
 800d7c8:	461c      	mov	r4, r3
 800d7ca:	4615      	mov	r5, r2
 800d7cc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d7ce:	6020      	str	r0, [r4, #0]
 800d7d0:	6061      	str	r1, [r4, #4]
 800d7d2:	60a2      	str	r2, [r4, #8]
 800d7d4:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,6,9,12,12,13,16,18");
 800d7d6:	687b      	ldr	r3, [r7, #4]
 800d7d8:	3304      	adds	r3, #4
 800d7da:	4aa1      	ldr	r2, [pc, #644]	; (800da60 <problem_fetch+0xc3fc>)
 800d7dc:	461d      	mov	r5, r3
 800d7de:	4614      	mov	r4, r2
 800d7e0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d7e2:	6028      	str	r0, [r5, #0]
 800d7e4:	6069      	str	r1, [r5, #4]
 800d7e6:	60aa      	str	r2, [r5, #8]
 800d7e8:	60eb      	str	r3, [r5, #12]
 800d7ea:	6820      	ldr	r0, [r4, #0]
 800d7ec:	6128      	str	r0, [r5, #16]
 800d7ee:	7923      	ldrb	r3, [r4, #4]
 800d7f0:	752b      	strb	r3, [r5, #20]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,e");
 800d7f2:	687b      	ldr	r3, [r7, #4]
 800d7f4:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800d7f8:	4a9a      	ldr	r2, [pc, #616]	; (800da64 <problem_fetch+0xc400>)
 800d7fa:	461c      	mov	r4, r3
 800d7fc:	4615      	mov	r5, r2
 800d7fe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d800:	6020      	str	r0, [r4, #0]
 800d802:	6061      	str	r1, [r4, #4]
 800d804:	60a2      	str	r2, [r4, #8]
 800d806:	60e3      	str	r3, [r4, #12]
			break;
 800d808:	f00e be5c 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 349 :
			strcpy(p->name,"SLUG TRAIL");
 800d80c:	687b      	ldr	r3, [r7, #4]
 800d80e:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800d812:	4995      	ldr	r1, [pc, #596]	; (800da68 <problem_fetch+0xc404>)
 800d814:	461a      	mov	r2, r3
 800d816:	460b      	mov	r3, r1
 800d818:	cb03      	ldmia	r3!, {r0, r1}
 800d81a:	6010      	str	r0, [r2, #0]
 800d81c:	6051      	str	r1, [r2, #4]
 800d81e:	8819      	ldrh	r1, [r3, #0]
 800d820:	789b      	ldrb	r3, [r3, #2]
 800d822:	8111      	strh	r1, [r2, #8]
 800d824:	7293      	strb	r3, [r2, #10]
			strcpy(p->grade,"6B+");
 800d826:	687b      	ldr	r3, [r7, #4]
 800d828:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800d82c:	4a8f      	ldr	r2, [pc, #572]	; (800da6c <problem_fetch+0xc408>)
 800d82e:	6810      	ldr	r0, [r2, #0]
 800d830:	6018      	str	r0, [r3, #0]
			p->moveSize = 8;
 800d832:	687b      	ldr	r3, [r7, #4]
 800d834:	2208      	movs	r2, #8
 800d836:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"C,G,E,F,A,A,E,A");
 800d838:	687b      	ldr	r3, [r7, #4]
 800d83a:	33a4      	adds	r3, #164	; 0xa4
 800d83c:	4a8c      	ldr	r2, [pc, #560]	; (800da70 <problem_fetch+0xc40c>)
 800d83e:	461c      	mov	r4, r3
 800d840:	4615      	mov	r5, r2
 800d842:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d844:	6020      	str	r0, [r4, #0]
 800d846:	6061      	str	r1, [r4, #4]
 800d848:	60a2      	str	r2, [r4, #8]
 800d84a:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,6,8,11,9,14,14,18");
 800d84c:	687b      	ldr	r3, [r7, #4]
 800d84e:	3304      	adds	r3, #4
 800d850:	4a88      	ldr	r2, [pc, #544]	; (800da74 <problem_fetch+0xc410>)
 800d852:	461d      	mov	r5, r3
 800d854:	4614      	mov	r4, r2
 800d856:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d858:	6028      	str	r0, [r5, #0]
 800d85a:	6069      	str	r1, [r5, #4]
 800d85c:	60aa      	str	r2, [r5, #8]
 800d85e:	60eb      	str	r3, [r5, #12]
 800d860:	6820      	ldr	r0, [r4, #0]
 800d862:	6128      	str	r0, [r5, #16]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,e");
 800d864:	687b      	ldr	r3, [r7, #4]
 800d866:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800d86a:	4a7e      	ldr	r2, [pc, #504]	; (800da64 <problem_fetch+0xc400>)
 800d86c:	461c      	mov	r4, r3
 800d86e:	4615      	mov	r5, r2
 800d870:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d872:	6020      	str	r0, [r4, #0]
 800d874:	6061      	str	r1, [r4, #4]
 800d876:	60a2      	str	r2, [r4, #8]
 800d878:	60e3      	str	r3, [r4, #12]
			break;
 800d87a:	f00e be23 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 350 :
			strcpy(p->name,"GRAPE THIEF");
 800d87e:	687b      	ldr	r3, [r7, #4]
 800d880:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800d884:	4a7c      	ldr	r2, [pc, #496]	; (800da78 <problem_fetch+0xc414>)
 800d886:	461c      	mov	r4, r3
 800d888:	4613      	mov	r3, r2
 800d88a:	cb07      	ldmia	r3!, {r0, r1, r2}
 800d88c:	6020      	str	r0, [r4, #0]
 800d88e:	6061      	str	r1, [r4, #4]
 800d890:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade,"7C");
 800d892:	687b      	ldr	r3, [r7, #4]
 800d894:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800d898:	4a78      	ldr	r2, [pc, #480]	; (800da7c <problem_fetch+0xc418>)
 800d89a:	8811      	ldrh	r1, [r2, #0]
 800d89c:	7892      	ldrb	r2, [r2, #2]
 800d89e:	8019      	strh	r1, [r3, #0]
 800d8a0:	709a      	strb	r2, [r3, #2]
			p->moveSize = 4;
 800d8a2:	687b      	ldr	r3, [r7, #4]
 800d8a4:	2204      	movs	r2, #4
 800d8a6:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"E,G,G,I");
 800d8a8:	687b      	ldr	r3, [r7, #4]
 800d8aa:	33a4      	adds	r3, #164	; 0xa4
 800d8ac:	4974      	ldr	r1, [pc, #464]	; (800da80 <problem_fetch+0xc41c>)
 800d8ae:	461a      	mov	r2, r3
 800d8b0:	460b      	mov	r3, r1
 800d8b2:	cb03      	ldmia	r3!, {r0, r1}
 800d8b4:	6010      	str	r0, [r2, #0]
 800d8b6:	6051      	str	r1, [r2, #4]
			strcpy(p->moveNumbers,"6,14,9,18");
 800d8b8:	687b      	ldr	r3, [r7, #4]
 800d8ba:	3304      	adds	r3, #4
 800d8bc:	4971      	ldr	r1, [pc, #452]	; (800da84 <problem_fetch+0xc420>)
 800d8be:	461a      	mov	r2, r3
 800d8c0:	460b      	mov	r3, r1
 800d8c2:	cb03      	ldmia	r3!, {r0, r1}
 800d8c4:	6010      	str	r0, [r2, #0]
 800d8c6:	6051      	str	r1, [r2, #4]
 800d8c8:	881b      	ldrh	r3, [r3, #0]
 800d8ca:	8113      	strh	r3, [r2, #8]
			strcpy(p->startFinish,"s,d,d,e");
 800d8cc:	687b      	ldr	r3, [r7, #4]
 800d8ce:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800d8d2:	496d      	ldr	r1, [pc, #436]	; (800da88 <problem_fetch+0xc424>)
 800d8d4:	461a      	mov	r2, r3
 800d8d6:	460b      	mov	r3, r1
 800d8d8:	cb03      	ldmia	r3!, {r0, r1}
 800d8da:	6010      	str	r0, [r2, #0]
 800d8dc:	6051      	str	r1, [r2, #4]
			break;
 800d8de:	f00e bdf1 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 351 :
			strcpy(p->name,"CALL ME A FOOL WILL YOU?");
 800d8e2:	687b      	ldr	r3, [r7, #4]
 800d8e4:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800d8e8:	4a68      	ldr	r2, [pc, #416]	; (800da8c <problem_fetch+0xc428>)
 800d8ea:	461d      	mov	r5, r3
 800d8ec:	4614      	mov	r4, r2
 800d8ee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d8f0:	6028      	str	r0, [r5, #0]
 800d8f2:	6069      	str	r1, [r5, #4]
 800d8f4:	60aa      	str	r2, [r5, #8]
 800d8f6:	60eb      	str	r3, [r5, #12]
 800d8f8:	cc03      	ldmia	r4!, {r0, r1}
 800d8fa:	6128      	str	r0, [r5, #16]
 800d8fc:	6169      	str	r1, [r5, #20]
 800d8fe:	7823      	ldrb	r3, [r4, #0]
 800d900:	762b      	strb	r3, [r5, #24]
			strcpy(p->grade,"6B+");
 800d902:	687b      	ldr	r3, [r7, #4]
 800d904:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800d908:	4a58      	ldr	r2, [pc, #352]	; (800da6c <problem_fetch+0xc408>)
 800d90a:	6810      	ldr	r0, [r2, #0]
 800d90c:	6018      	str	r0, [r3, #0]
			p->moveSize = 11;
 800d90e:	687b      	ldr	r3, [r7, #4]
 800d910:	220b      	movs	r2, #11
 800d912:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,G,J,G,I,J,H,G,F,E,I");
 800d914:	687b      	ldr	r3, [r7, #4]
 800d916:	33a4      	adds	r3, #164	; 0xa4
 800d918:	4a5d      	ldr	r2, [pc, #372]	; (800da90 <problem_fetch+0xc42c>)
 800d91a:	461d      	mov	r5, r3
 800d91c:	4614      	mov	r4, r2
 800d91e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d920:	6028      	str	r0, [r5, #0]
 800d922:	6069      	str	r1, [r5, #4]
 800d924:	60aa      	str	r2, [r5, #8]
 800d926:	60eb      	str	r3, [r5, #12]
 800d928:	6820      	ldr	r0, [r4, #0]
 800d92a:	6128      	str	r0, [r5, #16]
 800d92c:	88a3      	ldrh	r3, [r4, #4]
 800d92e:	82ab      	strh	r3, [r5, #20]
			strcpy(p->moveNumbers,"6,4,5,15,14,16,8,9,11,12,18");
 800d930:	687b      	ldr	r3, [r7, #4]
 800d932:	3304      	adds	r3, #4
 800d934:	4a57      	ldr	r2, [pc, #348]	; (800da94 <problem_fetch+0xc430>)
 800d936:	461d      	mov	r5, r3
 800d938:	4614      	mov	r4, r2
 800d93a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d93c:	6028      	str	r0, [r5, #0]
 800d93e:	6069      	str	r1, [r5, #4]
 800d940:	60aa      	str	r2, [r5, #8]
 800d942:	60eb      	str	r3, [r5, #12]
 800d944:	cc07      	ldmia	r4!, {r0, r1, r2}
 800d946:	6128      	str	r0, [r5, #16]
 800d948:	6169      	str	r1, [r5, #20]
 800d94a:	61aa      	str	r2, [r5, #24]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,d,d,d,e");
 800d94c:	687b      	ldr	r3, [r7, #4]
 800d94e:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800d952:	4a51      	ldr	r2, [pc, #324]	; (800da98 <problem_fetch+0xc434>)
 800d954:	461d      	mov	r5, r3
 800d956:	4614      	mov	r4, r2
 800d958:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d95a:	6028      	str	r0, [r5, #0]
 800d95c:	6069      	str	r1, [r5, #4]
 800d95e:	60aa      	str	r2, [r5, #8]
 800d960:	60eb      	str	r3, [r5, #12]
 800d962:	6820      	ldr	r0, [r4, #0]
 800d964:	6128      	str	r0, [r5, #16]
 800d966:	88a3      	ldrh	r3, [r4, #4]
 800d968:	82ab      	strh	r3, [r5, #20]
			break;
 800d96a:	f00e bdab 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 352 :
			strcpy(p->name,"DESERT ROSE");
 800d96e:	687b      	ldr	r3, [r7, #4]
 800d970:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800d974:	4a49      	ldr	r2, [pc, #292]	; (800da9c <problem_fetch+0xc438>)
 800d976:	461c      	mov	r4, r3
 800d978:	4613      	mov	r3, r2
 800d97a:	cb07      	ldmia	r3!, {r0, r1, r2}
 800d97c:	6020      	str	r0, [r4, #0]
 800d97e:	6061      	str	r1, [r4, #4]
 800d980:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade,"6C+");
 800d982:	687b      	ldr	r3, [r7, #4]
 800d984:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800d988:	4a33      	ldr	r2, [pc, #204]	; (800da58 <problem_fetch+0xc3f4>)
 800d98a:	6810      	ldr	r0, [r2, #0]
 800d98c:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 800d98e:	687b      	ldr	r3, [r7, #4]
 800d990:	2206      	movs	r2, #6
 800d992:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,H,G,J,G,I");
 800d994:	687b      	ldr	r3, [r7, #4]
 800d996:	33a4      	adds	r3, #164	; 0xa4
 800d998:	4a41      	ldr	r2, [pc, #260]	; (800daa0 <problem_fetch+0xc43c>)
 800d99a:	461c      	mov	r4, r3
 800d99c:	4613      	mov	r3, r2
 800d99e:	cb07      	ldmia	r3!, {r0, r1, r2}
 800d9a0:	6020      	str	r0, [r4, #0]
 800d9a2:	6061      	str	r1, [r4, #4]
 800d9a4:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,8,9,12,15,18");
 800d9a6:	687b      	ldr	r3, [r7, #4]
 800d9a8:	3304      	adds	r3, #4
 800d9aa:	4a3e      	ldr	r2, [pc, #248]	; (800daa4 <problem_fetch+0xc440>)
 800d9ac:	461c      	mov	r4, r3
 800d9ae:	4613      	mov	r3, r2
 800d9b0:	cb07      	ldmia	r3!, {r0, r1, r2}
 800d9b2:	6020      	str	r0, [r4, #0]
 800d9b4:	6061      	str	r1, [r4, #4]
 800d9b6:	60a2      	str	r2, [r4, #8]
 800d9b8:	881a      	ldrh	r2, [r3, #0]
 800d9ba:	789b      	ldrb	r3, [r3, #2]
 800d9bc:	81a2      	strh	r2, [r4, #12]
 800d9be:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 800d9c0:	687b      	ldr	r3, [r7, #4]
 800d9c2:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800d9c6:	4a38      	ldr	r2, [pc, #224]	; (800daa8 <problem_fetch+0xc444>)
 800d9c8:	461c      	mov	r4, r3
 800d9ca:	4613      	mov	r3, r2
 800d9cc:	cb07      	ldmia	r3!, {r0, r1, r2}
 800d9ce:	6020      	str	r0, [r4, #0]
 800d9d0:	6061      	str	r1, [r4, #4]
 800d9d2:	60a2      	str	r2, [r4, #8]
			break;
 800d9d4:	f00e bd76 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 353 :
			strcpy(p->name,"BUMPIN GO");
 800d9d8:	687b      	ldr	r3, [r7, #4]
 800d9da:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800d9de:	4933      	ldr	r1, [pc, #204]	; (800daac <problem_fetch+0xc448>)
 800d9e0:	461a      	mov	r2, r3
 800d9e2:	460b      	mov	r3, r1
 800d9e4:	cb03      	ldmia	r3!, {r0, r1}
 800d9e6:	6010      	str	r0, [r2, #0]
 800d9e8:	6051      	str	r1, [r2, #4]
 800d9ea:	881b      	ldrh	r3, [r3, #0]
 800d9ec:	8113      	strh	r3, [r2, #8]
			strcpy(p->grade,"7A");
 800d9ee:	687b      	ldr	r3, [r7, #4]
 800d9f0:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800d9f4:	4a2e      	ldr	r2, [pc, #184]	; (800dab0 <problem_fetch+0xc44c>)
 800d9f6:	8811      	ldrh	r1, [r2, #0]
 800d9f8:	7892      	ldrb	r2, [r2, #2]
 800d9fa:	8019      	strh	r1, [r3, #0]
 800d9fc:	709a      	strb	r2, [r3, #2]
			p->moveSize = 7;
 800d9fe:	687b      	ldr	r3, [r7, #4]
 800da00:	2207      	movs	r2, #7
 800da02:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,J,H,H,I,G,I");
 800da04:	687b      	ldr	r3, [r7, #4]
 800da06:	33a4      	adds	r3, #164	; 0xa4
 800da08:	4a2a      	ldr	r2, [pc, #168]	; (800dab4 <problem_fetch+0xc450>)
 800da0a:	461c      	mov	r4, r3
 800da0c:	4613      	mov	r3, r2
 800da0e:	cb07      	ldmia	r3!, {r0, r1, r2}
 800da10:	6020      	str	r0, [r4, #0]
 800da12:	6061      	str	r1, [r4, #4]
 800da14:	60a2      	str	r2, [r4, #8]
 800da16:	881b      	ldrh	r3, [r3, #0]
 800da18:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,7,10,12,14,17,18");
 800da1a:	687b      	ldr	r3, [r7, #4]
 800da1c:	3304      	adds	r3, #4
 800da1e:	4a26      	ldr	r2, [pc, #152]	; (800dab8 <problem_fetch+0xc454>)
 800da20:	461d      	mov	r5, r3
 800da22:	4614      	mov	r4, r2
 800da24:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800da26:	6028      	str	r0, [r5, #0]
 800da28:	6069      	str	r1, [r5, #4]
 800da2a:	60aa      	str	r2, [r5, #8]
 800da2c:	60eb      	str	r3, [r5, #12]
 800da2e:	8823      	ldrh	r3, [r4, #0]
 800da30:	78a2      	ldrb	r2, [r4, #2]
 800da32:	822b      	strh	r3, [r5, #16]
 800da34:	4613      	mov	r3, r2
 800da36:	74ab      	strb	r3, [r5, #18]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 800da38:	687b      	ldr	r3, [r7, #4]
 800da3a:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800da3e:	4a1f      	ldr	r2, [pc, #124]	; (800dabc <problem_fetch+0xc458>)
 800da40:	461c      	mov	r4, r3
 800da42:	4613      	mov	r3, r2
 800da44:	cb07      	ldmia	r3!, {r0, r1, r2}
 800da46:	6020      	str	r0, [r4, #0]
 800da48:	6061      	str	r1, [r4, #4]
 800da4a:	60a2      	str	r2, [r4, #8]
 800da4c:	881b      	ldrh	r3, [r3, #0]
 800da4e:	81a3      	strh	r3, [r4, #12]
			break;
 800da50:	f00e bd38 	b.w	801c4c4 <problem_fetch+0x1ae60>
 800da54:	08027fc0 	.word	0x08027fc0
 800da58:	08023bbc 	.word	0x08023bbc
 800da5c:	08027fd0 	.word	0x08027fd0
 800da60:	08027fe0 	.word	0x08027fe0
 800da64:	08023c48 	.word	0x08023c48
 800da68:	08027ff8 	.word	0x08027ff8
 800da6c:	08023b24 	.word	0x08023b24
 800da70:	08028004 	.word	0x08028004
 800da74:	08028014 	.word	0x08028014
 800da78:	08028028 	.word	0x08028028
 800da7c:	08024358 	.word	0x08024358
 800da80:	08023c64 	.word	0x08023c64
 800da84:	08028034 	.word	0x08028034
 800da88:	08023c78 	.word	0x08023c78
 800da8c:	08028040 	.word	0x08028040
 800da90:	0802805c 	.word	0x0802805c
 800da94:	08028074 	.word	0x08028074
 800da98:	08027484 	.word	0x08027484
 800da9c:	08028090 	.word	0x08028090
 800daa0:	0802809c 	.word	0x0802809c
 800daa4:	080280a8 	.word	0x080280a8
 800daa8:	08023ec0 	.word	0x08023ec0
 800daac:	080280b8 	.word	0x080280b8
 800dab0:	08023ae4 	.word	0x08023ae4
 800dab4:	080280c4 	.word	0x080280c4
 800dab8:	080280d4 	.word	0x080280d4
 800dabc:	08023cac 	.word	0x08023cac
		case 354 :
			strcpy(p->name,"BLACKLISTED");
 800dac0:	687b      	ldr	r3, [r7, #4]
 800dac2:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800dac6:	4abd      	ldr	r2, [pc, #756]	; (800ddbc <problem_fetch+0xc758>)
 800dac8:	461c      	mov	r4, r3
 800daca:	4613      	mov	r3, r2
 800dacc:	cb07      	ldmia	r3!, {r0, r1, r2}
 800dace:	6020      	str	r0, [r4, #0]
 800dad0:	6061      	str	r1, [r4, #4]
 800dad2:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade,"6C+");
 800dad4:	687b      	ldr	r3, [r7, #4]
 800dad6:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800dada:	4ab9      	ldr	r2, [pc, #740]	; (800ddc0 <problem_fetch+0xc75c>)
 800dadc:	6810      	ldr	r0, [r2, #0]
 800dade:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 800dae0:	687b      	ldr	r3, [r7, #4]
 800dae2:	2206      	movs	r2, #6
 800dae4:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,E,G,C,D,A");
 800dae6:	687b      	ldr	r3, [r7, #4]
 800dae8:	33a4      	adds	r3, #164	; 0xa4
 800daea:	4ab6      	ldr	r2, [pc, #728]	; (800ddc4 <problem_fetch+0xc760>)
 800daec:	461c      	mov	r4, r3
 800daee:	4613      	mov	r3, r2
 800daf0:	cb07      	ldmia	r3!, {r0, r1, r2}
 800daf2:	6020      	str	r0, [r4, #0]
 800daf4:	6061      	str	r1, [r4, #4]
 800daf6:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,8,10,13,15,18");
 800daf8:	687b      	ldr	r3, [r7, #4]
 800dafa:	3304      	adds	r3, #4
 800dafc:	4ab2      	ldr	r2, [pc, #712]	; (800ddc8 <problem_fetch+0xc764>)
 800dafe:	461c      	mov	r4, r3
 800db00:	4615      	mov	r5, r2
 800db02:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800db04:	6020      	str	r0, [r4, #0]
 800db06:	6061      	str	r1, [r4, #4]
 800db08:	60a2      	str	r2, [r4, #8]
 800db0a:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 800db0c:	687b      	ldr	r3, [r7, #4]
 800db0e:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800db12:	4aae      	ldr	r2, [pc, #696]	; (800ddcc <problem_fetch+0xc768>)
 800db14:	461c      	mov	r4, r3
 800db16:	4613      	mov	r3, r2
 800db18:	cb07      	ldmia	r3!, {r0, r1, r2}
 800db1a:	6020      	str	r0, [r4, #0]
 800db1c:	6061      	str	r1, [r4, #4]
 800db1e:	60a2      	str	r2, [r4, #8]
			break;
 800db20:	f00e bcd0 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 355 :
			strcpy(p->name,"THE EASY EASY");
 800db24:	687b      	ldr	r3, [r7, #4]
 800db26:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800db2a:	4aa9      	ldr	r2, [pc, #676]	; (800ddd0 <problem_fetch+0xc76c>)
 800db2c:	461c      	mov	r4, r3
 800db2e:	4613      	mov	r3, r2
 800db30:	cb07      	ldmia	r3!, {r0, r1, r2}
 800db32:	6020      	str	r0, [r4, #0]
 800db34:	6061      	str	r1, [r4, #4]
 800db36:	60a2      	str	r2, [r4, #8]
 800db38:	881b      	ldrh	r3, [r3, #0]
 800db3a:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade,"6B+");
 800db3c:	687b      	ldr	r3, [r7, #4]
 800db3e:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800db42:	4aa4      	ldr	r2, [pc, #656]	; (800ddd4 <problem_fetch+0xc770>)
 800db44:	6810      	ldr	r0, [r2, #0]
 800db46:	6018      	str	r0, [r3, #0]
			p->moveSize = 5;
 800db48:	687b      	ldr	r3, [r7, #4]
 800db4a:	2205      	movs	r2, #5
 800db4c:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,H,G,E,I");
 800db4e:	687b      	ldr	r3, [r7, #4]
 800db50:	33a4      	adds	r3, #164	; 0xa4
 800db52:	49a1      	ldr	r1, [pc, #644]	; (800ddd8 <problem_fetch+0xc774>)
 800db54:	461a      	mov	r2, r3
 800db56:	460b      	mov	r3, r1
 800db58:	cb03      	ldmia	r3!, {r0, r1}
 800db5a:	6010      	str	r0, [r2, #0]
 800db5c:	6051      	str	r1, [r2, #4]
 800db5e:	881b      	ldrh	r3, [r3, #0]
 800db60:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"6,10,14,8,18");
 800db62:	687b      	ldr	r3, [r7, #4]
 800db64:	3304      	adds	r3, #4
 800db66:	4a9d      	ldr	r2, [pc, #628]	; (800dddc <problem_fetch+0xc778>)
 800db68:	461c      	mov	r4, r3
 800db6a:	4613      	mov	r3, r2
 800db6c:	cb07      	ldmia	r3!, {r0, r1, r2}
 800db6e:	6020      	str	r0, [r4, #0]
 800db70:	6061      	str	r1, [r4, #4]
 800db72:	60a2      	str	r2, [r4, #8]
 800db74:	781b      	ldrb	r3, [r3, #0]
 800db76:	7323      	strb	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,e");
 800db78:	687b      	ldr	r3, [r7, #4]
 800db7a:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800db7e:	4998      	ldr	r1, [pc, #608]	; (800dde0 <problem_fetch+0xc77c>)
 800db80:	461a      	mov	r2, r3
 800db82:	460b      	mov	r3, r1
 800db84:	cb03      	ldmia	r3!, {r0, r1}
 800db86:	6010      	str	r0, [r2, #0]
 800db88:	6051      	str	r1, [r2, #4]
 800db8a:	881b      	ldrh	r3, [r3, #0]
 800db8c:	8113      	strh	r3, [r2, #8]
			break;
 800db8e:	f00e bc99 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 356 :
			strcpy(p->name,"BOOTHY TOOTHY");
 800db92:	687b      	ldr	r3, [r7, #4]
 800db94:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800db98:	4a92      	ldr	r2, [pc, #584]	; (800dde4 <problem_fetch+0xc780>)
 800db9a:	461c      	mov	r4, r3
 800db9c:	4613      	mov	r3, r2
 800db9e:	cb07      	ldmia	r3!, {r0, r1, r2}
 800dba0:	6020      	str	r0, [r4, #0]
 800dba2:	6061      	str	r1, [r4, #4]
 800dba4:	60a2      	str	r2, [r4, #8]
 800dba6:	881b      	ldrh	r3, [r3, #0]
 800dba8:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade,"6B+");
 800dbaa:	687b      	ldr	r3, [r7, #4]
 800dbac:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800dbb0:	4a88      	ldr	r2, [pc, #544]	; (800ddd4 <problem_fetch+0xc770>)
 800dbb2:	6810      	ldr	r0, [r2, #0]
 800dbb4:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 800dbb6:	687b      	ldr	r3, [r7, #4]
 800dbb8:	2206      	movs	r2, #6
 800dbba:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"B,G,E,J,E,I");
 800dbbc:	687b      	ldr	r3, [r7, #4]
 800dbbe:	33a4      	adds	r3, #164	; 0xa4
 800dbc0:	4a89      	ldr	r2, [pc, #548]	; (800dde8 <problem_fetch+0xc784>)
 800dbc2:	461c      	mov	r4, r3
 800dbc4:	4613      	mov	r3, r2
 800dbc6:	cb07      	ldmia	r3!, {r0, r1, r2}
 800dbc8:	6020      	str	r0, [r4, #0]
 800dbca:	6061      	str	r1, [r4, #4]
 800dbcc:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"6,6,9,12,14,18");
 800dbce:	687b      	ldr	r3, [r7, #4]
 800dbd0:	3304      	adds	r3, #4
 800dbd2:	4a86      	ldr	r2, [pc, #536]	; (800ddec <problem_fetch+0xc788>)
 800dbd4:	461c      	mov	r4, r3
 800dbd6:	4613      	mov	r3, r2
 800dbd8:	cb07      	ldmia	r3!, {r0, r1, r2}
 800dbda:	6020      	str	r0, [r4, #0]
 800dbdc:	6061      	str	r1, [r4, #4]
 800dbde:	60a2      	str	r2, [r4, #8]
 800dbe0:	881a      	ldrh	r2, [r3, #0]
 800dbe2:	789b      	ldrb	r3, [r3, #2]
 800dbe4:	81a2      	strh	r2, [r4, #12]
 800dbe6:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish,"s,s,d,d,d,e");
 800dbe8:	687b      	ldr	r3, [r7, #4]
 800dbea:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800dbee:	4a80      	ldr	r2, [pc, #512]	; (800ddf0 <problem_fetch+0xc78c>)
 800dbf0:	461c      	mov	r4, r3
 800dbf2:	4613      	mov	r3, r2
 800dbf4:	cb07      	ldmia	r3!, {r0, r1, r2}
 800dbf6:	6020      	str	r0, [r4, #0]
 800dbf8:	6061      	str	r1, [r4, #4]
 800dbfa:	60a2      	str	r2, [r4, #8]
			break;
 800dbfc:	f00e bc62 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 357 :
			strcpy(p->name,"LOCK IT DOWN");
 800dc00:	687b      	ldr	r3, [r7, #4]
 800dc02:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800dc06:	4a7b      	ldr	r2, [pc, #492]	; (800ddf4 <problem_fetch+0xc790>)
 800dc08:	461c      	mov	r4, r3
 800dc0a:	4613      	mov	r3, r2
 800dc0c:	cb07      	ldmia	r3!, {r0, r1, r2}
 800dc0e:	6020      	str	r0, [r4, #0]
 800dc10:	6061      	str	r1, [r4, #4]
 800dc12:	60a2      	str	r2, [r4, #8]
 800dc14:	781b      	ldrb	r3, [r3, #0]
 800dc16:	7323      	strb	r3, [r4, #12]
			strcpy(p->grade,"7A+");
 800dc18:	687b      	ldr	r3, [r7, #4]
 800dc1a:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800dc1e:	4a76      	ldr	r2, [pc, #472]	; (800ddf8 <problem_fetch+0xc794>)
 800dc20:	6810      	ldr	r0, [r2, #0]
 800dc22:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 800dc24:	687b      	ldr	r3, [r7, #4]
 800dc26:	2206      	movs	r2, #6
 800dc28:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,K,J,E,H,D");
 800dc2a:	687b      	ldr	r3, [r7, #4]
 800dc2c:	33a4      	adds	r3, #164	; 0xa4
 800dc2e:	4a73      	ldr	r2, [pc, #460]	; (800ddfc <problem_fetch+0xc798>)
 800dc30:	461c      	mov	r4, r3
 800dc32:	4613      	mov	r3, r2
 800dc34:	cb07      	ldmia	r3!, {r0, r1, r2}
 800dc36:	6020      	str	r0, [r4, #0]
 800dc38:	6061      	str	r1, [r4, #4]
 800dc3a:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,9,12,12,16,18");
 800dc3c:	687b      	ldr	r3, [r7, #4]
 800dc3e:	3304      	adds	r3, #4
 800dc40:	4a6f      	ldr	r2, [pc, #444]	; (800de00 <problem_fetch+0xc79c>)
 800dc42:	461c      	mov	r4, r3
 800dc44:	4615      	mov	r5, r2
 800dc46:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800dc48:	6020      	str	r0, [r4, #0]
 800dc4a:	6061      	str	r1, [r4, #4]
 800dc4c:	60a2      	str	r2, [r4, #8]
 800dc4e:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 800dc50:	687b      	ldr	r3, [r7, #4]
 800dc52:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800dc56:	4a5d      	ldr	r2, [pc, #372]	; (800ddcc <problem_fetch+0xc768>)
 800dc58:	461c      	mov	r4, r3
 800dc5a:	4613      	mov	r3, r2
 800dc5c:	cb07      	ldmia	r3!, {r0, r1, r2}
 800dc5e:	6020      	str	r0, [r4, #0]
 800dc60:	6061      	str	r1, [r4, #4]
 800dc62:	60a2      	str	r2, [r4, #8]
			break;
 800dc64:	f00e bc2e 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 358 :
			strcpy(p->name,"RECHARGE");
 800dc68:	687b      	ldr	r3, [r7, #4]
 800dc6a:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800dc6e:	4965      	ldr	r1, [pc, #404]	; (800de04 <problem_fetch+0xc7a0>)
 800dc70:	461a      	mov	r2, r3
 800dc72:	460b      	mov	r3, r1
 800dc74:	cb03      	ldmia	r3!, {r0, r1}
 800dc76:	6010      	str	r0, [r2, #0]
 800dc78:	6051      	str	r1, [r2, #4]
 800dc7a:	781b      	ldrb	r3, [r3, #0]
 800dc7c:	7213      	strb	r3, [r2, #8]
			strcpy(p->grade,"7A+");
 800dc7e:	687b      	ldr	r3, [r7, #4]
 800dc80:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800dc84:	4a5c      	ldr	r2, [pc, #368]	; (800ddf8 <problem_fetch+0xc794>)
 800dc86:	6810      	ldr	r0, [r2, #0]
 800dc88:	6018      	str	r0, [r3, #0]
			p->moveSize = 5;
 800dc8a:	687b      	ldr	r3, [r7, #4]
 800dc8c:	2205      	movs	r2, #5
 800dc8e:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"E,H,G,G,A");
 800dc90:	687b      	ldr	r3, [r7, #4]
 800dc92:	33a4      	adds	r3, #164	; 0xa4
 800dc94:	495c      	ldr	r1, [pc, #368]	; (800de08 <problem_fetch+0xc7a4>)
 800dc96:	461a      	mov	r2, r3
 800dc98:	460b      	mov	r3, r1
 800dc9a:	cb03      	ldmia	r3!, {r0, r1}
 800dc9c:	6010      	str	r0, [r2, #0]
 800dc9e:	6051      	str	r1, [r2, #4]
 800dca0:	881b      	ldrh	r3, [r3, #0]
 800dca2:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"6,10,14,17,18");
 800dca4:	687b      	ldr	r3, [r7, #4]
 800dca6:	3304      	adds	r3, #4
 800dca8:	4a58      	ldr	r2, [pc, #352]	; (800de0c <problem_fetch+0xc7a8>)
 800dcaa:	461c      	mov	r4, r3
 800dcac:	4613      	mov	r3, r2
 800dcae:	cb07      	ldmia	r3!, {r0, r1, r2}
 800dcb0:	6020      	str	r0, [r4, #0]
 800dcb2:	6061      	str	r1, [r4, #4]
 800dcb4:	60a2      	str	r2, [r4, #8]
 800dcb6:	881b      	ldrh	r3, [r3, #0]
 800dcb8:	81a3      	strh	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,e");
 800dcba:	687b      	ldr	r3, [r7, #4]
 800dcbc:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800dcc0:	4947      	ldr	r1, [pc, #284]	; (800dde0 <problem_fetch+0xc77c>)
 800dcc2:	461a      	mov	r2, r3
 800dcc4:	460b      	mov	r3, r1
 800dcc6:	cb03      	ldmia	r3!, {r0, r1}
 800dcc8:	6010      	str	r0, [r2, #0]
 800dcca:	6051      	str	r1, [r2, #4]
 800dccc:	881b      	ldrh	r3, [r3, #0]
 800dcce:	8113      	strh	r3, [r2, #8]
			break;
 800dcd0:	f00e bbf8 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 359 :
			strcpy(p->name,"QUARTER PAST MIDNIGHT");
 800dcd4:	687b      	ldr	r3, [r7, #4]
 800dcd6:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800dcda:	4a4d      	ldr	r2, [pc, #308]	; (800de10 <problem_fetch+0xc7ac>)
 800dcdc:	461d      	mov	r5, r3
 800dcde:	4614      	mov	r4, r2
 800dce0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800dce2:	6028      	str	r0, [r5, #0]
 800dce4:	6069      	str	r1, [r5, #4]
 800dce6:	60aa      	str	r2, [r5, #8]
 800dce8:	60eb      	str	r3, [r5, #12]
 800dcea:	6820      	ldr	r0, [r4, #0]
 800dcec:	6128      	str	r0, [r5, #16]
 800dcee:	88a3      	ldrh	r3, [r4, #4]
 800dcf0:	82ab      	strh	r3, [r5, #20]
			strcpy(p->grade,"6C+");
 800dcf2:	687b      	ldr	r3, [r7, #4]
 800dcf4:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800dcf8:	4a31      	ldr	r2, [pc, #196]	; (800ddc0 <problem_fetch+0xc75c>)
 800dcfa:	6810      	ldr	r0, [r2, #0]
 800dcfc:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 800dcfe:	687b      	ldr	r3, [r7, #4]
 800dd00:	2207      	movs	r2, #7
 800dd02:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,H,G,F,J,G,I");
 800dd04:	687b      	ldr	r3, [r7, #4]
 800dd06:	33a4      	adds	r3, #164	; 0xa4
 800dd08:	4a42      	ldr	r2, [pc, #264]	; (800de14 <problem_fetch+0xc7b0>)
 800dd0a:	461c      	mov	r4, r3
 800dd0c:	4613      	mov	r3, r2
 800dd0e:	cb07      	ldmia	r3!, {r0, r1, r2}
 800dd10:	6020      	str	r0, [r4, #0]
 800dd12:	6061      	str	r1, [r4, #4]
 800dd14:	60a2      	str	r2, [r4, #8]
 800dd16:	881b      	ldrh	r3, [r3, #0]
 800dd18:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,5,9,11,13,15,18");
 800dd1a:	687b      	ldr	r3, [r7, #4]
 800dd1c:	3304      	adds	r3, #4
 800dd1e:	4a3e      	ldr	r2, [pc, #248]	; (800de18 <problem_fetch+0xc7b4>)
 800dd20:	461d      	mov	r5, r3
 800dd22:	4614      	mov	r4, r2
 800dd24:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800dd26:	6028      	str	r0, [r5, #0]
 800dd28:	6069      	str	r1, [r5, #4]
 800dd2a:	60aa      	str	r2, [r5, #8]
 800dd2c:	60eb      	str	r3, [r5, #12]
 800dd2e:	8823      	ldrh	r3, [r4, #0]
 800dd30:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,s,d,d,d,d,e");
 800dd32:	687b      	ldr	r3, [r7, #4]
 800dd34:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800dd38:	4a38      	ldr	r2, [pc, #224]	; (800de1c <problem_fetch+0xc7b8>)
 800dd3a:	461c      	mov	r4, r3
 800dd3c:	4613      	mov	r3, r2
 800dd3e:	cb07      	ldmia	r3!, {r0, r1, r2}
 800dd40:	6020      	str	r0, [r4, #0]
 800dd42:	6061      	str	r1, [r4, #4]
 800dd44:	60a2      	str	r2, [r4, #8]
 800dd46:	881b      	ldrh	r3, [r3, #0]
 800dd48:	81a3      	strh	r3, [r4, #12]
			break;
 800dd4a:	f00e bbbb 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 360 :
			strcpy(p->name,"FINGERY BY NATURE");
 800dd4e:	687b      	ldr	r3, [r7, #4]
 800dd50:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800dd54:	4a32      	ldr	r2, [pc, #200]	; (800de20 <problem_fetch+0xc7bc>)
 800dd56:	461d      	mov	r5, r3
 800dd58:	4614      	mov	r4, r2
 800dd5a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800dd5c:	6028      	str	r0, [r5, #0]
 800dd5e:	6069      	str	r1, [r5, #4]
 800dd60:	60aa      	str	r2, [r5, #8]
 800dd62:	60eb      	str	r3, [r5, #12]
 800dd64:	8823      	ldrh	r3, [r4, #0]
 800dd66:	822b      	strh	r3, [r5, #16]
			strcpy(p->grade,"7A");
 800dd68:	687b      	ldr	r3, [r7, #4]
 800dd6a:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800dd6e:	4a2d      	ldr	r2, [pc, #180]	; (800de24 <problem_fetch+0xc7c0>)
 800dd70:	8811      	ldrh	r1, [r2, #0]
 800dd72:	7892      	ldrb	r2, [r2, #2]
 800dd74:	8019      	strh	r1, [r3, #0]
 800dd76:	709a      	strb	r2, [r3, #2]
			p->moveSize = 6;
 800dd78:	687b      	ldr	r3, [r7, #4]
 800dd7a:	2206      	movs	r2, #6
 800dd7c:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,E,G,B,E,D");
 800dd7e:	687b      	ldr	r3, [r7, #4]
 800dd80:	33a4      	adds	r3, #164	; 0xa4
 800dd82:	4a29      	ldr	r2, [pc, #164]	; (800de28 <problem_fetch+0xc7c4>)
 800dd84:	461c      	mov	r4, r3
 800dd86:	4613      	mov	r3, r2
 800dd88:	cb07      	ldmia	r3!, {r0, r1, r2}
 800dd8a:	6020      	str	r0, [r4, #0]
 800dd8c:	6061      	str	r1, [r4, #4]
 800dd8e:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,6,10,10,14,18");
 800dd90:	687b      	ldr	r3, [r7, #4]
 800dd92:	3304      	adds	r3, #4
 800dd94:	4a25      	ldr	r2, [pc, #148]	; (800de2c <problem_fetch+0xc7c8>)
 800dd96:	461c      	mov	r4, r3
 800dd98:	4615      	mov	r5, r2
 800dd9a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800dd9c:	6020      	str	r0, [r4, #0]
 800dd9e:	6061      	str	r1, [r4, #4]
 800dda0:	60a2      	str	r2, [r4, #8]
 800dda2:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 800dda4:	687b      	ldr	r3, [r7, #4]
 800dda6:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800ddaa:	4a08      	ldr	r2, [pc, #32]	; (800ddcc <problem_fetch+0xc768>)
 800ddac:	461c      	mov	r4, r3
 800ddae:	4613      	mov	r3, r2
 800ddb0:	cb07      	ldmia	r3!, {r0, r1, r2}
 800ddb2:	6020      	str	r0, [r4, #0]
 800ddb4:	6061      	str	r1, [r4, #4]
 800ddb6:	60a2      	str	r2, [r4, #8]
			break;
 800ddb8:	f00e bb84 	b.w	801c4c4 <problem_fetch+0x1ae60>
 800ddbc:	080280e8 	.word	0x080280e8
 800ddc0:	08023bbc 	.word	0x08023bbc
 800ddc4:	080280f4 	.word	0x080280f4
 800ddc8:	08027cd8 	.word	0x08027cd8
 800ddcc:	08023ec0 	.word	0x08023ec0
 800ddd0:	08028100 	.word	0x08028100
 800ddd4:	08023b24 	.word	0x08023b24
 800ddd8:	08028110 	.word	0x08028110
 800dddc:	0802811c 	.word	0x0802811c
 800dde0:	08023ff0 	.word	0x08023ff0
 800dde4:	0802812c 	.word	0x0802812c
 800dde8:	0802813c 	.word	0x0802813c
 800ddec:	08028148 	.word	0x08028148
 800ddf0:	08023b04 	.word	0x08023b04
 800ddf4:	08028158 	.word	0x08028158
 800ddf8:	08023cc4 	.word	0x08023cc4
 800ddfc:	08028168 	.word	0x08028168
 800de00:	08028174 	.word	0x08028174
 800de04:	08028184 	.word	0x08028184
 800de08:	08028190 	.word	0x08028190
 800de0c:	0802819c 	.word	0x0802819c
 800de10:	080281ac 	.word	0x080281ac
 800de14:	080281c4 	.word	0x080281c4
 800de18:	080281d4 	.word	0x080281d4
 800de1c:	08023b9c 	.word	0x08023b9c
 800de20:	080281e8 	.word	0x080281e8
 800de24:	08023ae4 	.word	0x08023ae4
 800de28:	080281fc 	.word	0x080281fc
 800de2c:	08028208 	.word	0x08028208
		case 361 :
			strcpy(p->name,"FROCENZO A ROCCAMORICE");
 800de30:	687b      	ldr	r3, [r7, #4]
 800de32:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800de36:	4aae      	ldr	r2, [pc, #696]	; (800e0f0 <problem_fetch+0xca8c>)
 800de38:	461c      	mov	r4, r3
 800de3a:	4615      	mov	r5, r2
 800de3c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800de3e:	6020      	str	r0, [r4, #0]
 800de40:	6061      	str	r1, [r4, #4]
 800de42:	60a2      	str	r2, [r4, #8]
 800de44:	60e3      	str	r3, [r4, #12]
 800de46:	6828      	ldr	r0, [r5, #0]
 800de48:	6120      	str	r0, [r4, #16]
 800de4a:	88ab      	ldrh	r3, [r5, #4]
 800de4c:	79aa      	ldrb	r2, [r5, #6]
 800de4e:	82a3      	strh	r3, [r4, #20]
 800de50:	4613      	mov	r3, r2
 800de52:	75a3      	strb	r3, [r4, #22]
			strcpy(p->grade,"7A");
 800de54:	687b      	ldr	r3, [r7, #4]
 800de56:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800de5a:	4aa6      	ldr	r2, [pc, #664]	; (800e0f4 <problem_fetch+0xca90>)
 800de5c:	8811      	ldrh	r1, [r2, #0]
 800de5e:	7892      	ldrb	r2, [r2, #2]
 800de60:	8019      	strh	r1, [r3, #0]
 800de62:	709a      	strb	r2, [r3, #2]
			p->moveSize = 5;
 800de64:	687b      	ldr	r3, [r7, #4]
 800de66:	2205      	movs	r2, #5
 800de68:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"E,E,B,D,A");
 800de6a:	687b      	ldr	r3, [r7, #4]
 800de6c:	33a4      	adds	r3, #164	; 0xa4
 800de6e:	49a2      	ldr	r1, [pc, #648]	; (800e0f8 <problem_fetch+0xca94>)
 800de70:	461a      	mov	r2, r3
 800de72:	460b      	mov	r3, r1
 800de74:	cb03      	ldmia	r3!, {r0, r1}
 800de76:	6010      	str	r0, [r2, #0]
 800de78:	6051      	str	r1, [r2, #4]
 800de7a:	881b      	ldrh	r3, [r3, #0]
 800de7c:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"6,8,12,15,18");
 800de7e:	687b      	ldr	r3, [r7, #4]
 800de80:	3304      	adds	r3, #4
 800de82:	4a9e      	ldr	r2, [pc, #632]	; (800e0fc <problem_fetch+0xca98>)
 800de84:	461c      	mov	r4, r3
 800de86:	4613      	mov	r3, r2
 800de88:	cb07      	ldmia	r3!, {r0, r1, r2}
 800de8a:	6020      	str	r0, [r4, #0]
 800de8c:	6061      	str	r1, [r4, #4]
 800de8e:	60a2      	str	r2, [r4, #8]
 800de90:	781b      	ldrb	r3, [r3, #0]
 800de92:	7323      	strb	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,e");
 800de94:	687b      	ldr	r3, [r7, #4]
 800de96:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800de9a:	4999      	ldr	r1, [pc, #612]	; (800e100 <problem_fetch+0xca9c>)
 800de9c:	461a      	mov	r2, r3
 800de9e:	460b      	mov	r3, r1
 800dea0:	cb03      	ldmia	r3!, {r0, r1}
 800dea2:	6010      	str	r0, [r2, #0]
 800dea4:	6051      	str	r1, [r2, #4]
 800dea6:	881b      	ldrh	r3, [r3, #0]
 800dea8:	8113      	strh	r3, [r2, #8]
			break;
 800deaa:	f00e bb0b 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 362 :
			strcpy(p->name,"SLING SHOT");
 800deae:	687b      	ldr	r3, [r7, #4]
 800deb0:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800deb4:	4993      	ldr	r1, [pc, #588]	; (800e104 <problem_fetch+0xcaa0>)
 800deb6:	461a      	mov	r2, r3
 800deb8:	460b      	mov	r3, r1
 800deba:	cb03      	ldmia	r3!, {r0, r1}
 800debc:	6010      	str	r0, [r2, #0]
 800debe:	6051      	str	r1, [r2, #4]
 800dec0:	8819      	ldrh	r1, [r3, #0]
 800dec2:	789b      	ldrb	r3, [r3, #2]
 800dec4:	8111      	strh	r1, [r2, #8]
 800dec6:	7293      	strb	r3, [r2, #10]
			strcpy(p->grade,"6C");
 800dec8:	687b      	ldr	r3, [r7, #4]
 800deca:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800dece:	4a8e      	ldr	r2, [pc, #568]	; (800e108 <problem_fetch+0xcaa4>)
 800ded0:	8811      	ldrh	r1, [r2, #0]
 800ded2:	7892      	ldrb	r2, [r2, #2]
 800ded4:	8019      	strh	r1, [r3, #0]
 800ded6:	709a      	strb	r2, [r3, #2]
			p->moveSize = 5;
 800ded8:	687b      	ldr	r3, [r7, #4]
 800deda:	2205      	movs	r2, #5
 800dedc:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,C,F,G,I");
 800dede:	687b      	ldr	r3, [r7, #4]
 800dee0:	33a4      	adds	r3, #164	; 0xa4
 800dee2:	498a      	ldr	r1, [pc, #552]	; (800e10c <problem_fetch+0xcaa8>)
 800dee4:	461a      	mov	r2, r3
 800dee6:	460b      	mov	r3, r1
 800dee8:	cb03      	ldmia	r3!, {r0, r1}
 800deea:	6010      	str	r0, [r2, #0]
 800deec:	6051      	str	r1, [r2, #4]
 800deee:	881b      	ldrh	r3, [r3, #0]
 800def0:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"4,8,11,14,18");
 800def2:	687b      	ldr	r3, [r7, #4]
 800def4:	3304      	adds	r3, #4
 800def6:	4a86      	ldr	r2, [pc, #536]	; (800e110 <problem_fetch+0xcaac>)
 800def8:	461c      	mov	r4, r3
 800defa:	4613      	mov	r3, r2
 800defc:	cb07      	ldmia	r3!, {r0, r1, r2}
 800defe:	6020      	str	r0, [r4, #0]
 800df00:	6061      	str	r1, [r4, #4]
 800df02:	60a2      	str	r2, [r4, #8]
 800df04:	781b      	ldrb	r3, [r3, #0]
 800df06:	7323      	strb	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,e");
 800df08:	687b      	ldr	r3, [r7, #4]
 800df0a:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800df0e:	497c      	ldr	r1, [pc, #496]	; (800e100 <problem_fetch+0xca9c>)
 800df10:	461a      	mov	r2, r3
 800df12:	460b      	mov	r3, r1
 800df14:	cb03      	ldmia	r3!, {r0, r1}
 800df16:	6010      	str	r0, [r2, #0]
 800df18:	6051      	str	r1, [r2, #4]
 800df1a:	881b      	ldrh	r3, [r3, #0]
 800df1c:	8113      	strh	r3, [r2, #8]
			break;
 800df1e:	f00e bad1 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 363 :
			strcpy(p->name,"VANDO");
 800df22:	687b      	ldr	r3, [r7, #4]
 800df24:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800df28:	4a7a      	ldr	r2, [pc, #488]	; (800e114 <problem_fetch+0xcab0>)
 800df2a:	6810      	ldr	r0, [r2, #0]
 800df2c:	6018      	str	r0, [r3, #0]
 800df2e:	8892      	ldrh	r2, [r2, #4]
 800df30:	809a      	strh	r2, [r3, #4]
			strcpy(p->grade,"6B+");
 800df32:	687b      	ldr	r3, [r7, #4]
 800df34:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800df38:	4a77      	ldr	r2, [pc, #476]	; (800e118 <problem_fetch+0xcab4>)
 800df3a:	6810      	ldr	r0, [r2, #0]
 800df3c:	6018      	str	r0, [r3, #0]
			p->moveSize = 5;
 800df3e:	687b      	ldr	r3, [r7, #4]
 800df40:	2205      	movs	r2, #5
 800df42:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,I,G,D,D");
 800df44:	687b      	ldr	r3, [r7, #4]
 800df46:	33a4      	adds	r3, #164	; 0xa4
 800df48:	4974      	ldr	r1, [pc, #464]	; (800e11c <problem_fetch+0xcab8>)
 800df4a:	461a      	mov	r2, r3
 800df4c:	460b      	mov	r3, r1
 800df4e:	cb03      	ldmia	r3!, {r0, r1}
 800df50:	6010      	str	r0, [r2, #0]
 800df52:	6051      	str	r1, [r2, #4]
 800df54:	881b      	ldrh	r3, [r3, #0]
 800df56:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"5,10,14,15,18");
 800df58:	687b      	ldr	r3, [r7, #4]
 800df5a:	3304      	adds	r3, #4
 800df5c:	4a70      	ldr	r2, [pc, #448]	; (800e120 <problem_fetch+0xcabc>)
 800df5e:	461c      	mov	r4, r3
 800df60:	4613      	mov	r3, r2
 800df62:	cb07      	ldmia	r3!, {r0, r1, r2}
 800df64:	6020      	str	r0, [r4, #0]
 800df66:	6061      	str	r1, [r4, #4]
 800df68:	60a2      	str	r2, [r4, #8]
 800df6a:	881b      	ldrh	r3, [r3, #0]
 800df6c:	81a3      	strh	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,e");
 800df6e:	687b      	ldr	r3, [r7, #4]
 800df70:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800df74:	4962      	ldr	r1, [pc, #392]	; (800e100 <problem_fetch+0xca9c>)
 800df76:	461a      	mov	r2, r3
 800df78:	460b      	mov	r3, r1
 800df7a:	cb03      	ldmia	r3!, {r0, r1}
 800df7c:	6010      	str	r0, [r2, #0]
 800df7e:	6051      	str	r1, [r2, #4]
 800df80:	881b      	ldrh	r3, [r3, #0]
 800df82:	8113      	strh	r3, [r2, #8]
			break;
 800df84:	f00e ba9e 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 364 :
			strcpy(p->name,"WARM UP BB");
 800df88:	687b      	ldr	r3, [r7, #4]
 800df8a:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800df8e:	4965      	ldr	r1, [pc, #404]	; (800e124 <problem_fetch+0xcac0>)
 800df90:	461a      	mov	r2, r3
 800df92:	460b      	mov	r3, r1
 800df94:	cb03      	ldmia	r3!, {r0, r1}
 800df96:	6010      	str	r0, [r2, #0]
 800df98:	6051      	str	r1, [r2, #4]
 800df9a:	8819      	ldrh	r1, [r3, #0]
 800df9c:	789b      	ldrb	r3, [r3, #2]
 800df9e:	8111      	strh	r1, [r2, #8]
 800dfa0:	7293      	strb	r3, [r2, #10]
			strcpy(p->grade,"6B+");
 800dfa2:	687b      	ldr	r3, [r7, #4]
 800dfa4:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800dfa8:	4a5b      	ldr	r2, [pc, #364]	; (800e118 <problem_fetch+0xcab4>)
 800dfaa:	6810      	ldr	r0, [r2, #0]
 800dfac:	6018      	str	r0, [r3, #0]
			p->moveSize = 8;
 800dfae:	687b      	ldr	r3, [r7, #4]
 800dfb0:	2208      	movs	r2, #8
 800dfb2:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"E,G,G,E,G,D,G,D");
 800dfb4:	687b      	ldr	r3, [r7, #4]
 800dfb6:	33a4      	adds	r3, #164	; 0xa4
 800dfb8:	4a5b      	ldr	r2, [pc, #364]	; (800e128 <problem_fetch+0xcac4>)
 800dfba:	461c      	mov	r4, r3
 800dfbc:	4615      	mov	r5, r2
 800dfbe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800dfc0:	6020      	str	r0, [r4, #0]
 800dfc2:	6061      	str	r1, [r4, #4]
 800dfc4:	60a2      	str	r2, [r4, #8]
 800dfc6:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"6,4,9,8,14,15,17,18");
 800dfc8:	687b      	ldr	r3, [r7, #4]
 800dfca:	3304      	adds	r3, #4
 800dfcc:	4a57      	ldr	r2, [pc, #348]	; (800e12c <problem_fetch+0xcac8>)
 800dfce:	461d      	mov	r5, r3
 800dfd0:	4614      	mov	r4, r2
 800dfd2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800dfd4:	6028      	str	r0, [r5, #0]
 800dfd6:	6069      	str	r1, [r5, #4]
 800dfd8:	60aa      	str	r2, [r5, #8]
 800dfda:	60eb      	str	r3, [r5, #12]
 800dfdc:	6820      	ldr	r0, [r4, #0]
 800dfde:	6128      	str	r0, [r5, #16]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,e");
 800dfe0:	687b      	ldr	r3, [r7, #4]
 800dfe2:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800dfe6:	4a52      	ldr	r2, [pc, #328]	; (800e130 <problem_fetch+0xcacc>)
 800dfe8:	461c      	mov	r4, r3
 800dfea:	4615      	mov	r5, r2
 800dfec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800dfee:	6020      	str	r0, [r4, #0]
 800dff0:	6061      	str	r1, [r4, #4]
 800dff2:	60a2      	str	r2, [r4, #8]
 800dff4:	60e3      	str	r3, [r4, #12]
			break;
 800dff6:	f00e ba65 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 365 :
			strcpy(p->name,"SHARK FIN");
 800dffa:	687b      	ldr	r3, [r7, #4]
 800dffc:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800e000:	494c      	ldr	r1, [pc, #304]	; (800e134 <problem_fetch+0xcad0>)
 800e002:	461a      	mov	r2, r3
 800e004:	460b      	mov	r3, r1
 800e006:	cb03      	ldmia	r3!, {r0, r1}
 800e008:	6010      	str	r0, [r2, #0]
 800e00a:	6051      	str	r1, [r2, #4]
 800e00c:	881b      	ldrh	r3, [r3, #0]
 800e00e:	8113      	strh	r3, [r2, #8]
			strcpy(p->grade,"6B+");
 800e010:	687b      	ldr	r3, [r7, #4]
 800e012:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800e016:	4a40      	ldr	r2, [pc, #256]	; (800e118 <problem_fetch+0xcab4>)
 800e018:	6810      	ldr	r0, [r2, #0]
 800e01a:	6018      	str	r0, [r3, #0]
			p->moveSize = 9;
 800e01c:	687b      	ldr	r3, [r7, #4]
 800e01e:	2209      	movs	r2, #9
 800e020:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,H,C,G,D,H,G,C,I");
 800e022:	687b      	ldr	r3, [r7, #4]
 800e024:	33a4      	adds	r3, #164	; 0xa4
 800e026:	4a44      	ldr	r2, [pc, #272]	; (800e138 <problem_fetch+0xcad4>)
 800e028:	461d      	mov	r5, r3
 800e02a:	4614      	mov	r4, r2
 800e02c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800e02e:	6028      	str	r0, [r5, #0]
 800e030:	6069      	str	r1, [r5, #4]
 800e032:	60aa      	str	r2, [r5, #8]
 800e034:	60eb      	str	r3, [r5, #12]
 800e036:	8823      	ldrh	r3, [r4, #0]
 800e038:	822b      	strh	r3, [r5, #16]
			strcpy(p->moveNumbers,"5,5,8,9,11,13,15,5,18");
 800e03a:	687b      	ldr	r3, [r7, #4]
 800e03c:	3304      	adds	r3, #4
 800e03e:	4a3f      	ldr	r2, [pc, #252]	; (800e13c <problem_fetch+0xcad8>)
 800e040:	461d      	mov	r5, r3
 800e042:	4614      	mov	r4, r2
 800e044:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800e046:	6028      	str	r0, [r5, #0]
 800e048:	6069      	str	r1, [r5, #4]
 800e04a:	60aa      	str	r2, [r5, #8]
 800e04c:	60eb      	str	r3, [r5, #12]
 800e04e:	6820      	ldr	r0, [r4, #0]
 800e050:	6128      	str	r0, [r5, #16]
 800e052:	88a3      	ldrh	r3, [r4, #4]
 800e054:	82ab      	strh	r3, [r5, #20]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,d,e");
 800e056:	687b      	ldr	r3, [r7, #4]
 800e058:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800e05c:	4a38      	ldr	r2, [pc, #224]	; (800e140 <problem_fetch+0xcadc>)
 800e05e:	461d      	mov	r5, r3
 800e060:	4614      	mov	r4, r2
 800e062:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800e064:	6028      	str	r0, [r5, #0]
 800e066:	6069      	str	r1, [r5, #4]
 800e068:	60aa      	str	r2, [r5, #8]
 800e06a:	60eb      	str	r3, [r5, #12]
 800e06c:	8823      	ldrh	r3, [r4, #0]
 800e06e:	822b      	strh	r3, [r5, #16]
			break;
 800e070:	f00e ba28 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 366 :
			strcpy(p->name,"FUDGE YEAH");
 800e074:	687b      	ldr	r3, [r7, #4]
 800e076:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800e07a:	4932      	ldr	r1, [pc, #200]	; (800e144 <problem_fetch+0xcae0>)
 800e07c:	461a      	mov	r2, r3
 800e07e:	460b      	mov	r3, r1
 800e080:	cb03      	ldmia	r3!, {r0, r1}
 800e082:	6010      	str	r0, [r2, #0]
 800e084:	6051      	str	r1, [r2, #4]
 800e086:	8819      	ldrh	r1, [r3, #0]
 800e088:	789b      	ldrb	r3, [r3, #2]
 800e08a:	8111      	strh	r1, [r2, #8]
 800e08c:	7293      	strb	r3, [r2, #10]
			strcpy(p->grade,"6B+");
 800e08e:	687b      	ldr	r3, [r7, #4]
 800e090:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800e094:	4a20      	ldr	r2, [pc, #128]	; (800e118 <problem_fetch+0xcab4>)
 800e096:	6810      	ldr	r0, [r2, #0]
 800e098:	6018      	str	r0, [r3, #0]
			p->moveSize = 9;
 800e09a:	687b      	ldr	r3, [r7, #4]
 800e09c:	2209      	movs	r2, #9
 800e09e:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,G,H,G,H,G,I,H,I");
 800e0a0:	687b      	ldr	r3, [r7, #4]
 800e0a2:	33a4      	adds	r3, #164	; 0xa4
 800e0a4:	4a28      	ldr	r2, [pc, #160]	; (800e148 <problem_fetch+0xcae4>)
 800e0a6:	461d      	mov	r5, r3
 800e0a8:	4614      	mov	r4, r2
 800e0aa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800e0ac:	6028      	str	r0, [r5, #0]
 800e0ae:	6069      	str	r1, [r5, #4]
 800e0b0:	60aa      	str	r2, [r5, #8]
 800e0b2:	60eb      	str	r3, [r5, #12]
 800e0b4:	8823      	ldrh	r3, [r4, #0]
 800e0b6:	822b      	strh	r3, [r5, #16]
			strcpy(p->moveNumbers,"5,6,8,10,12,14,14,16,18");
 800e0b8:	687b      	ldr	r3, [r7, #4]
 800e0ba:	3304      	adds	r3, #4
 800e0bc:	4a23      	ldr	r2, [pc, #140]	; (800e14c <problem_fetch+0xcae8>)
 800e0be:	461d      	mov	r5, r3
 800e0c0:	4614      	mov	r4, r2
 800e0c2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800e0c4:	6028      	str	r0, [r5, #0]
 800e0c6:	6069      	str	r1, [r5, #4]
 800e0c8:	60aa      	str	r2, [r5, #8]
 800e0ca:	60eb      	str	r3, [r5, #12]
 800e0cc:	cc03      	ldmia	r4!, {r0, r1}
 800e0ce:	6128      	str	r0, [r5, #16]
 800e0d0:	6169      	str	r1, [r5, #20]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,d,e");
 800e0d2:	687b      	ldr	r3, [r7, #4]
 800e0d4:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800e0d8:	4a19      	ldr	r2, [pc, #100]	; (800e140 <problem_fetch+0xcadc>)
 800e0da:	461d      	mov	r5, r3
 800e0dc:	4614      	mov	r4, r2
 800e0de:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800e0e0:	6028      	str	r0, [r5, #0]
 800e0e2:	6069      	str	r1, [r5, #4]
 800e0e4:	60aa      	str	r2, [r5, #8]
 800e0e6:	60eb      	str	r3, [r5, #12]
 800e0e8:	8823      	ldrh	r3, [r4, #0]
 800e0ea:	822b      	strh	r3, [r5, #16]
			break;
 800e0ec:	f00e b9ea 	b.w	801c4c4 <problem_fetch+0x1ae60>
 800e0f0:	08028218 	.word	0x08028218
 800e0f4:	08023ae4 	.word	0x08023ae4
 800e0f8:	08028230 	.word	0x08028230
 800e0fc:	0802823c 	.word	0x0802823c
 800e100:	08023ff0 	.word	0x08023ff0
 800e104:	0802824c 	.word	0x0802824c
 800e108:	08023bf0 	.word	0x08023bf0
 800e10c:	08028258 	.word	0x08028258
 800e110:	08025258 	.word	0x08025258
 800e114:	08028264 	.word	0x08028264
 800e118:	08023b24 	.word	0x08023b24
 800e11c:	0802826c 	.word	0x0802826c
 800e120:	08027b44 	.word	0x08027b44
 800e124:	08028278 	.word	0x08028278
 800e128:	08028284 	.word	0x08028284
 800e12c:	08028294 	.word	0x08028294
 800e130:	08023c48 	.word	0x08023c48
 800e134:	080282a8 	.word	0x080282a8
 800e138:	080282b4 	.word	0x080282b4
 800e13c:	080282c8 	.word	0x080282c8
 800e140:	08024b08 	.word	0x08024b08
 800e144:	080282e0 	.word	0x080282e0
 800e148:	080282ec 	.word	0x080282ec
 800e14c:	08028300 	.word	0x08028300
		case 367 :
			strcpy(p->name,"VITAMIN B12");
 800e150:	687b      	ldr	r3, [r7, #4]
 800e152:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800e156:	4aa8      	ldr	r2, [pc, #672]	; (800e3f8 <problem_fetch+0xcd94>)
 800e158:	461c      	mov	r4, r3
 800e15a:	4613      	mov	r3, r2
 800e15c:	cb07      	ldmia	r3!, {r0, r1, r2}
 800e15e:	6020      	str	r0, [r4, #0]
 800e160:	6061      	str	r1, [r4, #4]
 800e162:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade,"7A+");
 800e164:	687b      	ldr	r3, [r7, #4]
 800e166:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800e16a:	4aa4      	ldr	r2, [pc, #656]	; (800e3fc <problem_fetch+0xcd98>)
 800e16c:	6810      	ldr	r0, [r2, #0]
 800e16e:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 800e170:	687b      	ldr	r3, [r7, #4]
 800e172:	2206      	movs	r2, #6
 800e174:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"C,A,F,B,E,I");
 800e176:	687b      	ldr	r3, [r7, #4]
 800e178:	33a4      	adds	r3, #164	; 0xa4
 800e17a:	4aa1      	ldr	r2, [pc, #644]	; (800e400 <problem_fetch+0xcd9c>)
 800e17c:	461c      	mov	r4, r3
 800e17e:	4613      	mov	r3, r2
 800e180:	cb07      	ldmia	r3!, {r0, r1, r2}
 800e182:	6020      	str	r0, [r4, #0]
 800e184:	6061      	str	r1, [r4, #4]
 800e186:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,9,11,12,16,18");
 800e188:	687b      	ldr	r3, [r7, #4]
 800e18a:	3304      	adds	r3, #4
 800e18c:	4a9d      	ldr	r2, [pc, #628]	; (800e404 <problem_fetch+0xcda0>)
 800e18e:	461c      	mov	r4, r3
 800e190:	4615      	mov	r5, r2
 800e192:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e194:	6020      	str	r0, [r4, #0]
 800e196:	6061      	str	r1, [r4, #4]
 800e198:	60a2      	str	r2, [r4, #8]
 800e19a:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 800e19c:	687b      	ldr	r3, [r7, #4]
 800e19e:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800e1a2:	4a99      	ldr	r2, [pc, #612]	; (800e408 <problem_fetch+0xcda4>)
 800e1a4:	461c      	mov	r4, r3
 800e1a6:	4613      	mov	r3, r2
 800e1a8:	cb07      	ldmia	r3!, {r0, r1, r2}
 800e1aa:	6020      	str	r0, [r4, #0]
 800e1ac:	6061      	str	r1, [r4, #4]
 800e1ae:	60a2      	str	r2, [r4, #8]
			break;
 800e1b0:	f00e b988 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 368 :
			strcpy(p->name,"HUFFING BUBBLES");
 800e1b4:	687b      	ldr	r3, [r7, #4]
 800e1b6:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800e1ba:	4a94      	ldr	r2, [pc, #592]	; (800e40c <problem_fetch+0xcda8>)
 800e1bc:	461c      	mov	r4, r3
 800e1be:	4615      	mov	r5, r2
 800e1c0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e1c2:	6020      	str	r0, [r4, #0]
 800e1c4:	6061      	str	r1, [r4, #4]
 800e1c6:	60a2      	str	r2, [r4, #8]
 800e1c8:	60e3      	str	r3, [r4, #12]
			strcpy(p->grade,"7B+");
 800e1ca:	687b      	ldr	r3, [r7, #4]
 800e1cc:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800e1d0:	4a8f      	ldr	r2, [pc, #572]	; (800e410 <problem_fetch+0xcdac>)
 800e1d2:	6810      	ldr	r0, [r2, #0]
 800e1d4:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 800e1d6:	687b      	ldr	r3, [r7, #4]
 800e1d8:	2206      	movs	r2, #6
 800e1da:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,F,B,D,E,A");
 800e1dc:	687b      	ldr	r3, [r7, #4]
 800e1de:	33a4      	adds	r3, #164	; 0xa4
 800e1e0:	4a8c      	ldr	r2, [pc, #560]	; (800e414 <problem_fetch+0xcdb0>)
 800e1e2:	461c      	mov	r4, r3
 800e1e4:	4613      	mov	r3, r2
 800e1e6:	cb07      	ldmia	r3!, {r0, r1, r2}
 800e1e8:	6020      	str	r0, [r4, #0]
 800e1ea:	6061      	str	r1, [r4, #4]
 800e1ec:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,11,10,15,6,18");
 800e1ee:	687b      	ldr	r3, [r7, #4]
 800e1f0:	3304      	adds	r3, #4
 800e1f2:	4a89      	ldr	r2, [pc, #548]	; (800e418 <problem_fetch+0xcdb4>)
 800e1f4:	461c      	mov	r4, r3
 800e1f6:	4615      	mov	r5, r2
 800e1f8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e1fa:	6020      	str	r0, [r4, #0]
 800e1fc:	6061      	str	r1, [r4, #4]
 800e1fe:	60a2      	str	r2, [r4, #8]
 800e200:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 800e202:	687b      	ldr	r3, [r7, #4]
 800e204:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800e208:	4a7f      	ldr	r2, [pc, #508]	; (800e408 <problem_fetch+0xcda4>)
 800e20a:	461c      	mov	r4, r3
 800e20c:	4613      	mov	r3, r2
 800e20e:	cb07      	ldmia	r3!, {r0, r1, r2}
 800e210:	6020      	str	r0, [r4, #0]
 800e212:	6061      	str	r1, [r4, #4]
 800e214:	60a2      	str	r2, [r4, #8]
			break;
 800e216:	f00e b955 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 369 :
			strcpy(p->name,"A SIDE OF FRIES?");
 800e21a:	687b      	ldr	r3, [r7, #4]
 800e21c:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800e220:	4a7e      	ldr	r2, [pc, #504]	; (800e41c <problem_fetch+0xcdb8>)
 800e222:	461d      	mov	r5, r3
 800e224:	4614      	mov	r4, r2
 800e226:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800e228:	6028      	str	r0, [r5, #0]
 800e22a:	6069      	str	r1, [r5, #4]
 800e22c:	60aa      	str	r2, [r5, #8]
 800e22e:	60eb      	str	r3, [r5, #12]
 800e230:	7823      	ldrb	r3, [r4, #0]
 800e232:	742b      	strb	r3, [r5, #16]
			strcpy(p->grade,"7A");
 800e234:	687b      	ldr	r3, [r7, #4]
 800e236:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800e23a:	4a79      	ldr	r2, [pc, #484]	; (800e420 <problem_fetch+0xcdbc>)
 800e23c:	8811      	ldrh	r1, [r2, #0]
 800e23e:	7892      	ldrb	r2, [r2, #2]
 800e240:	8019      	strh	r1, [r3, #0]
 800e242:	709a      	strb	r2, [r3, #2]
			p->moveSize = 5;
 800e244:	687b      	ldr	r3, [r7, #4]
 800e246:	2205      	movs	r2, #5
 800e248:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"C,E,E,G,I");
 800e24a:	687b      	ldr	r3, [r7, #4]
 800e24c:	33a4      	adds	r3, #164	; 0xa4
 800e24e:	4975      	ldr	r1, [pc, #468]	; (800e424 <problem_fetch+0xcdc0>)
 800e250:	461a      	mov	r2, r3
 800e252:	460b      	mov	r3, r1
 800e254:	cb03      	ldmia	r3!, {r0, r1}
 800e256:	6010      	str	r0, [r2, #0]
 800e258:	6051      	str	r1, [r2, #4]
 800e25a:	881b      	ldrh	r3, [r3, #0]
 800e25c:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"5,8,12,14,18");
 800e25e:	687b      	ldr	r3, [r7, #4]
 800e260:	3304      	adds	r3, #4
 800e262:	4a71      	ldr	r2, [pc, #452]	; (800e428 <problem_fetch+0xcdc4>)
 800e264:	461c      	mov	r4, r3
 800e266:	4613      	mov	r3, r2
 800e268:	cb07      	ldmia	r3!, {r0, r1, r2}
 800e26a:	6020      	str	r0, [r4, #0]
 800e26c:	6061      	str	r1, [r4, #4]
 800e26e:	60a2      	str	r2, [r4, #8]
 800e270:	781b      	ldrb	r3, [r3, #0]
 800e272:	7323      	strb	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,e");
 800e274:	687b      	ldr	r3, [r7, #4]
 800e276:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800e27a:	496c      	ldr	r1, [pc, #432]	; (800e42c <problem_fetch+0xcdc8>)
 800e27c:	461a      	mov	r2, r3
 800e27e:	460b      	mov	r3, r1
 800e280:	cb03      	ldmia	r3!, {r0, r1}
 800e282:	6010      	str	r0, [r2, #0]
 800e284:	6051      	str	r1, [r2, #4]
 800e286:	881b      	ldrh	r3, [r3, #0]
 800e288:	8113      	strh	r3, [r2, #8]
			break;
 800e28a:	f00e b91b 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 370 :
			strcpy(p->name,"PINCH WARM UP");
 800e28e:	687b      	ldr	r3, [r7, #4]
 800e290:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800e294:	4a66      	ldr	r2, [pc, #408]	; (800e430 <problem_fetch+0xcdcc>)
 800e296:	461c      	mov	r4, r3
 800e298:	4613      	mov	r3, r2
 800e29a:	cb07      	ldmia	r3!, {r0, r1, r2}
 800e29c:	6020      	str	r0, [r4, #0]
 800e29e:	6061      	str	r1, [r4, #4]
 800e2a0:	60a2      	str	r2, [r4, #8]
 800e2a2:	881b      	ldrh	r3, [r3, #0]
 800e2a4:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade,"6B+");
 800e2a6:	687b      	ldr	r3, [r7, #4]
 800e2a8:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800e2ac:	4a61      	ldr	r2, [pc, #388]	; (800e434 <problem_fetch+0xcdd0>)
 800e2ae:	6810      	ldr	r0, [r2, #0]
 800e2b0:	6018      	str	r0, [r3, #0]
			p->moveSize = 8;
 800e2b2:	687b      	ldr	r3, [r7, #4]
 800e2b4:	2208      	movs	r2, #8
 800e2b6:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,E,H,D,C,D,A,D");
 800e2b8:	687b      	ldr	r3, [r7, #4]
 800e2ba:	33a4      	adds	r3, #164	; 0xa4
 800e2bc:	4a5e      	ldr	r2, [pc, #376]	; (800e438 <problem_fetch+0xcdd4>)
 800e2be:	461c      	mov	r4, r3
 800e2c0:	4615      	mov	r5, r2
 800e2c2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e2c4:	6020      	str	r0, [r4, #0]
 800e2c6:	6061      	str	r1, [r4, #4]
 800e2c8:	60a2      	str	r2, [r4, #8]
 800e2ca:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,6,10,11,13,15,14,18");
 800e2cc:	687b      	ldr	r3, [r7, #4]
 800e2ce:	3304      	adds	r3, #4
 800e2d0:	4a5a      	ldr	r2, [pc, #360]	; (800e43c <problem_fetch+0xcdd8>)
 800e2d2:	461d      	mov	r5, r3
 800e2d4:	4614      	mov	r4, r2
 800e2d6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800e2d8:	6028      	str	r0, [r5, #0]
 800e2da:	6069      	str	r1, [r5, #4]
 800e2dc:	60aa      	str	r2, [r5, #8]
 800e2de:	60eb      	str	r3, [r5, #12]
 800e2e0:	6820      	ldr	r0, [r4, #0]
 800e2e2:	6128      	str	r0, [r5, #16]
 800e2e4:	88a3      	ldrh	r3, [r4, #4]
 800e2e6:	82ab      	strh	r3, [r5, #20]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,e");
 800e2e8:	687b      	ldr	r3, [r7, #4]
 800e2ea:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800e2ee:	4a54      	ldr	r2, [pc, #336]	; (800e440 <problem_fetch+0xcddc>)
 800e2f0:	461c      	mov	r4, r3
 800e2f2:	4615      	mov	r5, r2
 800e2f4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e2f6:	6020      	str	r0, [r4, #0]
 800e2f8:	6061      	str	r1, [r4, #4]
 800e2fa:	60a2      	str	r2, [r4, #8]
 800e2fc:	60e3      	str	r3, [r4, #12]
			break;
 800e2fe:	f00e b8e1 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 371 :
			strcpy(p->name,"PINCH &AMP; REACH");
 800e302:	687b      	ldr	r3, [r7, #4]
 800e304:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800e308:	4a4e      	ldr	r2, [pc, #312]	; (800e444 <problem_fetch+0xcde0>)
 800e30a:	461d      	mov	r5, r3
 800e30c:	4614      	mov	r4, r2
 800e30e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800e310:	6028      	str	r0, [r5, #0]
 800e312:	6069      	str	r1, [r5, #4]
 800e314:	60aa      	str	r2, [r5, #8]
 800e316:	60eb      	str	r3, [r5, #12]
 800e318:	8823      	ldrh	r3, [r4, #0]
 800e31a:	822b      	strh	r3, [r5, #16]
			strcpy(p->grade,"6B+");
 800e31c:	687b      	ldr	r3, [r7, #4]
 800e31e:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800e322:	4a44      	ldr	r2, [pc, #272]	; (800e434 <problem_fetch+0xcdd0>)
 800e324:	6810      	ldr	r0, [r2, #0]
 800e326:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 800e328:	687b      	ldr	r3, [r7, #4]
 800e32a:	2207      	movs	r2, #7
 800e32c:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,E,H,D,C,D,D");
 800e32e:	687b      	ldr	r3, [r7, #4]
 800e330:	33a4      	adds	r3, #164	; 0xa4
 800e332:	4a45      	ldr	r2, [pc, #276]	; (800e448 <problem_fetch+0xcde4>)
 800e334:	461c      	mov	r4, r3
 800e336:	4613      	mov	r3, r2
 800e338:	cb07      	ldmia	r3!, {r0, r1, r2}
 800e33a:	6020      	str	r0, [r4, #0]
 800e33c:	6061      	str	r1, [r4, #4]
 800e33e:	60a2      	str	r2, [r4, #8]
 800e340:	881b      	ldrh	r3, [r3, #0]
 800e342:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,6,10,11,13,15,18");
 800e344:	687b      	ldr	r3, [r7, #4]
 800e346:	3304      	adds	r3, #4
 800e348:	4a40      	ldr	r2, [pc, #256]	; (800e44c <problem_fetch+0xcde8>)
 800e34a:	461d      	mov	r5, r3
 800e34c:	4614      	mov	r4, r2
 800e34e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800e350:	6028      	str	r0, [r5, #0]
 800e352:	6069      	str	r1, [r5, #4]
 800e354:	60aa      	str	r2, [r5, #8]
 800e356:	60eb      	str	r3, [r5, #12]
 800e358:	8823      	ldrh	r3, [r4, #0]
 800e35a:	78a2      	ldrb	r2, [r4, #2]
 800e35c:	822b      	strh	r3, [r5, #16]
 800e35e:	4613      	mov	r3, r2
 800e360:	74ab      	strb	r3, [r5, #18]
			strcpy(p->startFinish,"s,s,d,d,d,d,e");
 800e362:	687b      	ldr	r3, [r7, #4]
 800e364:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800e368:	4a39      	ldr	r2, [pc, #228]	; (800e450 <problem_fetch+0xcdec>)
 800e36a:	461c      	mov	r4, r3
 800e36c:	4613      	mov	r3, r2
 800e36e:	cb07      	ldmia	r3!, {r0, r1, r2}
 800e370:	6020      	str	r0, [r4, #0]
 800e372:	6061      	str	r1, [r4, #4]
 800e374:	60a2      	str	r2, [r4, #8]
 800e376:	881b      	ldrh	r3, [r3, #0]
 800e378:	81a3      	strh	r3, [r4, #12]
			break;
 800e37a:	f00e b8a3 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 372 :
			strcpy(p->name,"LAYBACK WARM UP");
 800e37e:	687b      	ldr	r3, [r7, #4]
 800e380:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800e384:	4a33      	ldr	r2, [pc, #204]	; (800e454 <problem_fetch+0xcdf0>)
 800e386:	461c      	mov	r4, r3
 800e388:	4615      	mov	r5, r2
 800e38a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e38c:	6020      	str	r0, [r4, #0]
 800e38e:	6061      	str	r1, [r4, #4]
 800e390:	60a2      	str	r2, [r4, #8]
 800e392:	60e3      	str	r3, [r4, #12]
			strcpy(p->grade,"6B+");
 800e394:	687b      	ldr	r3, [r7, #4]
 800e396:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800e39a:	4a26      	ldr	r2, [pc, #152]	; (800e434 <problem_fetch+0xcdd0>)
 800e39c:	6810      	ldr	r0, [r2, #0]
 800e39e:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 800e3a0:	687b      	ldr	r3, [r7, #4]
 800e3a2:	2207      	movs	r2, #7
 800e3a4:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,E,H,C,D,A,D");
 800e3a6:	687b      	ldr	r3, [r7, #4]
 800e3a8:	33a4      	adds	r3, #164	; 0xa4
 800e3aa:	4a2b      	ldr	r2, [pc, #172]	; (800e458 <problem_fetch+0xcdf4>)
 800e3ac:	461c      	mov	r4, r3
 800e3ae:	4613      	mov	r3, r2
 800e3b0:	cb07      	ldmia	r3!, {r0, r1, r2}
 800e3b2:	6020      	str	r0, [r4, #0]
 800e3b4:	6061      	str	r1, [r4, #4]
 800e3b6:	60a2      	str	r2, [r4, #8]
 800e3b8:	881b      	ldrh	r3, [r3, #0]
 800e3ba:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,6,10,13,11,14,18");
 800e3bc:	687b      	ldr	r3, [r7, #4]
 800e3be:	3304      	adds	r3, #4
 800e3c0:	4a26      	ldr	r2, [pc, #152]	; (800e45c <problem_fetch+0xcdf8>)
 800e3c2:	461d      	mov	r5, r3
 800e3c4:	4614      	mov	r4, r2
 800e3c6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800e3c8:	6028      	str	r0, [r5, #0]
 800e3ca:	6069      	str	r1, [r5, #4]
 800e3cc:	60aa      	str	r2, [r5, #8]
 800e3ce:	60eb      	str	r3, [r5, #12]
 800e3d0:	8823      	ldrh	r3, [r4, #0]
 800e3d2:	78a2      	ldrb	r2, [r4, #2]
 800e3d4:	822b      	strh	r3, [r5, #16]
 800e3d6:	4613      	mov	r3, r2
 800e3d8:	74ab      	strb	r3, [r5, #18]
			strcpy(p->startFinish,"s,s,d,d,d,d,e");
 800e3da:	687b      	ldr	r3, [r7, #4]
 800e3dc:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800e3e0:	4a1b      	ldr	r2, [pc, #108]	; (800e450 <problem_fetch+0xcdec>)
 800e3e2:	461c      	mov	r4, r3
 800e3e4:	4613      	mov	r3, r2
 800e3e6:	cb07      	ldmia	r3!, {r0, r1, r2}
 800e3e8:	6020      	str	r0, [r4, #0]
 800e3ea:	6061      	str	r1, [r4, #4]
 800e3ec:	60a2      	str	r2, [r4, #8]
 800e3ee:	881b      	ldrh	r3, [r3, #0]
 800e3f0:	81a3      	strh	r3, [r4, #12]
			break;
 800e3f2:	f00e b867 	b.w	801c4c4 <problem_fetch+0x1ae60>
 800e3f6:	bf00      	nop
 800e3f8:	08028318 	.word	0x08028318
 800e3fc:	08023cc4 	.word	0x08023cc4
 800e400:	08028324 	.word	0x08028324
 800e404:	08028330 	.word	0x08028330
 800e408:	08023ec0 	.word	0x08023ec0
 800e40c:	08028340 	.word	0x08028340
 800e410:	08023c60 	.word	0x08023c60
 800e414:	08028350 	.word	0x08028350
 800e418:	0802835c 	.word	0x0802835c
 800e41c:	0802836c 	.word	0x0802836c
 800e420:	08023ae4 	.word	0x08023ae4
 800e424:	08028380 	.word	0x08028380
 800e428:	08027b1c 	.word	0x08027b1c
 800e42c:	08023ff0 	.word	0x08023ff0
 800e430:	0802838c 	.word	0x0802838c
 800e434:	08023b24 	.word	0x08023b24
 800e438:	0802839c 	.word	0x0802839c
 800e43c:	080283ac 	.word	0x080283ac
 800e440:	08023c48 	.word	0x08023c48
 800e444:	080283c4 	.word	0x080283c4
 800e448:	080283d8 	.word	0x080283d8
 800e44c:	080283e8 	.word	0x080283e8
 800e450:	08023b9c 	.word	0x08023b9c
 800e454:	080283fc 	.word	0x080283fc
 800e458:	0802840c 	.word	0x0802840c
 800e45c:	0802841c 	.word	0x0802841c
		case 373 :
			strcpy(p->name,"COMMITTING WARM UP");
 800e460:	687b      	ldr	r3, [r7, #4]
 800e462:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800e466:	4ac2      	ldr	r2, [pc, #776]	; (800e770 <problem_fetch+0xd10c>)
 800e468:	461d      	mov	r5, r3
 800e46a:	4614      	mov	r4, r2
 800e46c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800e46e:	6028      	str	r0, [r5, #0]
 800e470:	6069      	str	r1, [r5, #4]
 800e472:	60aa      	str	r2, [r5, #8]
 800e474:	60eb      	str	r3, [r5, #12]
 800e476:	8823      	ldrh	r3, [r4, #0]
 800e478:	78a2      	ldrb	r2, [r4, #2]
 800e47a:	822b      	strh	r3, [r5, #16]
 800e47c:	4613      	mov	r3, r2
 800e47e:	74ab      	strb	r3, [r5, #18]
			strcpy(p->grade,"6B+");
 800e480:	687b      	ldr	r3, [r7, #4]
 800e482:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800e486:	4abb      	ldr	r2, [pc, #748]	; (800e774 <problem_fetch+0xd110>)
 800e488:	6810      	ldr	r0, [r2, #0]
 800e48a:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 800e48c:	687b      	ldr	r3, [r7, #4]
 800e48e:	2207      	movs	r2, #7
 800e490:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,E,H,D,C,I,D");
 800e492:	687b      	ldr	r3, [r7, #4]
 800e494:	33a4      	adds	r3, #164	; 0xa4
 800e496:	4ab8      	ldr	r2, [pc, #736]	; (800e778 <problem_fetch+0xd114>)
 800e498:	461c      	mov	r4, r3
 800e49a:	4613      	mov	r3, r2
 800e49c:	cb07      	ldmia	r3!, {r0, r1, r2}
 800e49e:	6020      	str	r0, [r4, #0]
 800e4a0:	6061      	str	r1, [r4, #4]
 800e4a2:	60a2      	str	r2, [r4, #8]
 800e4a4:	881b      	ldrh	r3, [r3, #0]
 800e4a6:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,6,10,11,13,14,18");
 800e4a8:	687b      	ldr	r3, [r7, #4]
 800e4aa:	3304      	adds	r3, #4
 800e4ac:	4ab3      	ldr	r2, [pc, #716]	; (800e77c <problem_fetch+0xd118>)
 800e4ae:	461d      	mov	r5, r3
 800e4b0:	4614      	mov	r4, r2
 800e4b2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800e4b4:	6028      	str	r0, [r5, #0]
 800e4b6:	6069      	str	r1, [r5, #4]
 800e4b8:	60aa      	str	r2, [r5, #8]
 800e4ba:	60eb      	str	r3, [r5, #12]
 800e4bc:	8823      	ldrh	r3, [r4, #0]
 800e4be:	78a2      	ldrb	r2, [r4, #2]
 800e4c0:	822b      	strh	r3, [r5, #16]
 800e4c2:	4613      	mov	r3, r2
 800e4c4:	74ab      	strb	r3, [r5, #18]
			strcpy(p->startFinish,"s,s,d,d,d,d,e");
 800e4c6:	687b      	ldr	r3, [r7, #4]
 800e4c8:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800e4cc:	4aac      	ldr	r2, [pc, #688]	; (800e780 <problem_fetch+0xd11c>)
 800e4ce:	461c      	mov	r4, r3
 800e4d0:	4613      	mov	r3, r2
 800e4d2:	cb07      	ldmia	r3!, {r0, r1, r2}
 800e4d4:	6020      	str	r0, [r4, #0]
 800e4d6:	6061      	str	r1, [r4, #4]
 800e4d8:	60a2      	str	r2, [r4, #8]
 800e4da:	881b      	ldrh	r3, [r3, #0]
 800e4dc:	81a3      	strh	r3, [r4, #12]
			break;
 800e4de:	f00d bff1 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 374 :
			strcpy(p->name,"APEX");
 800e4e2:	687b      	ldr	r3, [r7, #4]
 800e4e4:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800e4e8:	4aa6      	ldr	r2, [pc, #664]	; (800e784 <problem_fetch+0xd120>)
 800e4ea:	6810      	ldr	r0, [r2, #0]
 800e4ec:	6018      	str	r0, [r3, #0]
 800e4ee:	7912      	ldrb	r2, [r2, #4]
 800e4f0:	711a      	strb	r2, [r3, #4]
			strcpy(p->grade,"7C");
 800e4f2:	687b      	ldr	r3, [r7, #4]
 800e4f4:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800e4f8:	4aa3      	ldr	r2, [pc, #652]	; (800e788 <problem_fetch+0xd124>)
 800e4fa:	8811      	ldrh	r1, [r2, #0]
 800e4fc:	7892      	ldrb	r2, [r2, #2]
 800e4fe:	8019      	strh	r1, [r3, #0]
 800e500:	709a      	strb	r2, [r3, #2]
			p->moveSize = 4;
 800e502:	687b      	ldr	r3, [r7, #4]
 800e504:	2204      	movs	r2, #4
 800e506:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"E,F,E,I");
 800e508:	687b      	ldr	r3, [r7, #4]
 800e50a:	33a4      	adds	r3, #164	; 0xa4
 800e50c:	499f      	ldr	r1, [pc, #636]	; (800e78c <problem_fetch+0xd128>)
 800e50e:	461a      	mov	r2, r3
 800e510:	460b      	mov	r3, r1
 800e512:	cb03      	ldmia	r3!, {r0, r1}
 800e514:	6010      	str	r0, [r2, #0]
 800e516:	6051      	str	r1, [r2, #4]
			strcpy(p->moveNumbers,"6,11,14,18");
 800e518:	687b      	ldr	r3, [r7, #4]
 800e51a:	3304      	adds	r3, #4
 800e51c:	499c      	ldr	r1, [pc, #624]	; (800e790 <problem_fetch+0xd12c>)
 800e51e:	461a      	mov	r2, r3
 800e520:	460b      	mov	r3, r1
 800e522:	cb03      	ldmia	r3!, {r0, r1}
 800e524:	6010      	str	r0, [r2, #0]
 800e526:	6051      	str	r1, [r2, #4]
 800e528:	8819      	ldrh	r1, [r3, #0]
 800e52a:	789b      	ldrb	r3, [r3, #2]
 800e52c:	8111      	strh	r1, [r2, #8]
 800e52e:	7293      	strb	r3, [r2, #10]
			strcpy(p->startFinish,"s,d,d,e");
 800e530:	687b      	ldr	r3, [r7, #4]
 800e532:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800e536:	4997      	ldr	r1, [pc, #604]	; (800e794 <problem_fetch+0xd130>)
 800e538:	461a      	mov	r2, r3
 800e53a:	460b      	mov	r3, r1
 800e53c:	cb03      	ldmia	r3!, {r0, r1}
 800e53e:	6010      	str	r0, [r2, #0]
 800e540:	6051      	str	r1, [r2, #4]
			break;
 800e542:	f00d bfbf 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 375 :
			strcpy(p->name,"MEH");
 800e546:	687b      	ldr	r3, [r7, #4]
 800e548:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800e54c:	4a92      	ldr	r2, [pc, #584]	; (800e798 <problem_fetch+0xd134>)
 800e54e:	6810      	ldr	r0, [r2, #0]
 800e550:	6018      	str	r0, [r3, #0]
			strcpy(p->grade,"6B+");
 800e552:	687b      	ldr	r3, [r7, #4]
 800e554:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800e558:	4a86      	ldr	r2, [pc, #536]	; (800e774 <problem_fetch+0xd110>)
 800e55a:	6810      	ldr	r0, [r2, #0]
 800e55c:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 800e55e:	687b      	ldr	r3, [r7, #4]
 800e560:	2207      	movs	r2, #7
 800e562:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"C,B,E,D,F,G,I");
 800e564:	687b      	ldr	r3, [r7, #4]
 800e566:	33a4      	adds	r3, #164	; 0xa4
 800e568:	4a8c      	ldr	r2, [pc, #560]	; (800e79c <problem_fetch+0xd138>)
 800e56a:	461c      	mov	r4, r3
 800e56c:	4613      	mov	r3, r2
 800e56e:	cb07      	ldmia	r3!, {r0, r1, r2}
 800e570:	6020      	str	r0, [r4, #0]
 800e572:	6061      	str	r1, [r4, #4]
 800e574:	60a2      	str	r2, [r4, #8]
 800e576:	881b      	ldrh	r3, [r3, #0]
 800e578:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,6,8,11,13,15,18");
 800e57a:	687b      	ldr	r3, [r7, #4]
 800e57c:	3304      	adds	r3, #4
 800e57e:	4a88      	ldr	r2, [pc, #544]	; (800e7a0 <problem_fetch+0xd13c>)
 800e580:	461d      	mov	r5, r3
 800e582:	4614      	mov	r4, r2
 800e584:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800e586:	6028      	str	r0, [r5, #0]
 800e588:	6069      	str	r1, [r5, #4]
 800e58a:	60aa      	str	r2, [r5, #8]
 800e58c:	60eb      	str	r3, [r5, #12]
 800e58e:	8823      	ldrh	r3, [r4, #0]
 800e590:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,s,d,d,d,d,e");
 800e592:	687b      	ldr	r3, [r7, #4]
 800e594:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800e598:	4a79      	ldr	r2, [pc, #484]	; (800e780 <problem_fetch+0xd11c>)
 800e59a:	461c      	mov	r4, r3
 800e59c:	4613      	mov	r3, r2
 800e59e:	cb07      	ldmia	r3!, {r0, r1, r2}
 800e5a0:	6020      	str	r0, [r4, #0]
 800e5a2:	6061      	str	r1, [r4, #4]
 800e5a4:	60a2      	str	r2, [r4, #8]
 800e5a6:	881b      	ldrh	r3, [r3, #0]
 800e5a8:	81a3      	strh	r3, [r4, #12]
			break;
 800e5aa:	f00d bf8b 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 376 :
			strcpy(p->name,"TE LA TAMALANCH");
 800e5ae:	687b      	ldr	r3, [r7, #4]
 800e5b0:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800e5b4:	4a7b      	ldr	r2, [pc, #492]	; (800e7a4 <problem_fetch+0xd140>)
 800e5b6:	461c      	mov	r4, r3
 800e5b8:	4615      	mov	r5, r2
 800e5ba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e5bc:	6020      	str	r0, [r4, #0]
 800e5be:	6061      	str	r1, [r4, #4]
 800e5c0:	60a2      	str	r2, [r4, #8]
 800e5c2:	60e3      	str	r3, [r4, #12]
			strcpy(p->grade,"7A+");
 800e5c4:	687b      	ldr	r3, [r7, #4]
 800e5c6:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800e5ca:	4a77      	ldr	r2, [pc, #476]	; (800e7a8 <problem_fetch+0xd144>)
 800e5cc:	6810      	ldr	r0, [r2, #0]
 800e5ce:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 800e5d0:	687b      	ldr	r3, [r7, #4]
 800e5d2:	2206      	movs	r2, #6
 800e5d4:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,E,G,D,D,A");
 800e5d6:	687b      	ldr	r3, [r7, #4]
 800e5d8:	33a4      	adds	r3, #164	; 0xa4
 800e5da:	4a74      	ldr	r2, [pc, #464]	; (800e7ac <problem_fetch+0xd148>)
 800e5dc:	461c      	mov	r4, r3
 800e5de:	4613      	mov	r3, r2
 800e5e0:	cb07      	ldmia	r3!, {r0, r1, r2}
 800e5e2:	6020      	str	r0, [r4, #0]
 800e5e4:	6061      	str	r1, [r4, #4]
 800e5e6:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,6,9,11,15,18");
 800e5e8:	687b      	ldr	r3, [r7, #4]
 800e5ea:	3304      	adds	r3, #4
 800e5ec:	4a70      	ldr	r2, [pc, #448]	; (800e7b0 <problem_fetch+0xd14c>)
 800e5ee:	461c      	mov	r4, r3
 800e5f0:	4613      	mov	r3, r2
 800e5f2:	cb07      	ldmia	r3!, {r0, r1, r2}
 800e5f4:	6020      	str	r0, [r4, #0]
 800e5f6:	6061      	str	r1, [r4, #4]
 800e5f8:	60a2      	str	r2, [r4, #8]
 800e5fa:	881a      	ldrh	r2, [r3, #0]
 800e5fc:	789b      	ldrb	r3, [r3, #2]
 800e5fe:	81a2      	strh	r2, [r4, #12]
 800e600:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 800e602:	687b      	ldr	r3, [r7, #4]
 800e604:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800e608:	4a6a      	ldr	r2, [pc, #424]	; (800e7b4 <problem_fetch+0xd150>)
 800e60a:	461c      	mov	r4, r3
 800e60c:	4613      	mov	r3, r2
 800e60e:	cb07      	ldmia	r3!, {r0, r1, r2}
 800e610:	6020      	str	r0, [r4, #0]
 800e612:	6061      	str	r1, [r4, #4]
 800e614:	60a2      	str	r2, [r4, #8]
			break;
 800e616:	f00d bf55 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 377 :
			strcpy(p->name,"BITE YOUR NAILS");
 800e61a:	687b      	ldr	r3, [r7, #4]
 800e61c:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800e620:	4a65      	ldr	r2, [pc, #404]	; (800e7b8 <problem_fetch+0xd154>)
 800e622:	461c      	mov	r4, r3
 800e624:	4615      	mov	r5, r2
 800e626:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e628:	6020      	str	r0, [r4, #0]
 800e62a:	6061      	str	r1, [r4, #4]
 800e62c:	60a2      	str	r2, [r4, #8]
 800e62e:	60e3      	str	r3, [r4, #12]
			strcpy(p->grade,"7B");
 800e630:	687b      	ldr	r3, [r7, #4]
 800e632:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800e636:	4a61      	ldr	r2, [pc, #388]	; (800e7bc <problem_fetch+0xd158>)
 800e638:	8811      	ldrh	r1, [r2, #0]
 800e63a:	7892      	ldrb	r2, [r2, #2]
 800e63c:	8019      	strh	r1, [r3, #0]
 800e63e:	709a      	strb	r2, [r3, #2]
			p->moveSize = 6;
 800e640:	687b      	ldr	r3, [r7, #4]
 800e642:	2206      	movs	r2, #6
 800e644:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,B,E,C,E,D");
 800e646:	687b      	ldr	r3, [r7, #4]
 800e648:	33a4      	adds	r3, #164	; 0xa4
 800e64a:	4a5d      	ldr	r2, [pc, #372]	; (800e7c0 <problem_fetch+0xd15c>)
 800e64c:	461c      	mov	r4, r3
 800e64e:	4613      	mov	r3, r2
 800e650:	cb07      	ldmia	r3!, {r0, r1, r2}
 800e652:	6020      	str	r0, [r4, #0]
 800e654:	6061      	str	r1, [r4, #4]
 800e656:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,6,9,13,16,18");
 800e658:	687b      	ldr	r3, [r7, #4]
 800e65a:	3304      	adds	r3, #4
 800e65c:	4a59      	ldr	r2, [pc, #356]	; (800e7c4 <problem_fetch+0xd160>)
 800e65e:	461c      	mov	r4, r3
 800e660:	4613      	mov	r3, r2
 800e662:	cb07      	ldmia	r3!, {r0, r1, r2}
 800e664:	6020      	str	r0, [r4, #0]
 800e666:	6061      	str	r1, [r4, #4]
 800e668:	60a2      	str	r2, [r4, #8]
 800e66a:	881a      	ldrh	r2, [r3, #0]
 800e66c:	789b      	ldrb	r3, [r3, #2]
 800e66e:	81a2      	strh	r2, [r4, #12]
 800e670:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish,"s,s,d,d,d,e");
 800e672:	687b      	ldr	r3, [r7, #4]
 800e674:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800e678:	4a53      	ldr	r2, [pc, #332]	; (800e7c8 <problem_fetch+0xd164>)
 800e67a:	461c      	mov	r4, r3
 800e67c:	4613      	mov	r3, r2
 800e67e:	cb07      	ldmia	r3!, {r0, r1, r2}
 800e680:	6020      	str	r0, [r4, #0]
 800e682:	6061      	str	r1, [r4, #4]
 800e684:	60a2      	str	r2, [r4, #8]
			break;
 800e686:	f00d bf1d 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 378 :
			strcpy(p->name,"BIT OF SIDE");
 800e68a:	687b      	ldr	r3, [r7, #4]
 800e68c:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800e690:	4a4e      	ldr	r2, [pc, #312]	; (800e7cc <problem_fetch+0xd168>)
 800e692:	461c      	mov	r4, r3
 800e694:	4613      	mov	r3, r2
 800e696:	cb07      	ldmia	r3!, {r0, r1, r2}
 800e698:	6020      	str	r0, [r4, #0]
 800e69a:	6061      	str	r1, [r4, #4]
 800e69c:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade,"6B+");
 800e69e:	687b      	ldr	r3, [r7, #4]
 800e6a0:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800e6a4:	4a33      	ldr	r2, [pc, #204]	; (800e774 <problem_fetch+0xd110>)
 800e6a6:	6810      	ldr	r0, [r2, #0]
 800e6a8:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 800e6aa:	687b      	ldr	r3, [r7, #4]
 800e6ac:	2206      	movs	r2, #6
 800e6ae:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,G,H,C,D,A");
 800e6b0:	687b      	ldr	r3, [r7, #4]
 800e6b2:	33a4      	adds	r3, #164	; 0xa4
 800e6b4:	4a46      	ldr	r2, [pc, #280]	; (800e7d0 <problem_fetch+0xd16c>)
 800e6b6:	461c      	mov	r4, r3
 800e6b8:	4613      	mov	r3, r2
 800e6ba:	cb07      	ldmia	r3!, {r0, r1, r2}
 800e6bc:	6020      	str	r0, [r4, #0]
 800e6be:	6061      	str	r1, [r4, #4]
 800e6c0:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,6,10,13,15,18");
 800e6c2:	687b      	ldr	r3, [r7, #4]
 800e6c4:	3304      	adds	r3, #4
 800e6c6:	4a43      	ldr	r2, [pc, #268]	; (800e7d4 <problem_fetch+0xd170>)
 800e6c8:	461c      	mov	r4, r3
 800e6ca:	4615      	mov	r5, r2
 800e6cc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e6ce:	6020      	str	r0, [r4, #0]
 800e6d0:	6061      	str	r1, [r4, #4]
 800e6d2:	60a2      	str	r2, [r4, #8]
 800e6d4:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,s,d,d,d,e");
 800e6d6:	687b      	ldr	r3, [r7, #4]
 800e6d8:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800e6dc:	4a3a      	ldr	r2, [pc, #232]	; (800e7c8 <problem_fetch+0xd164>)
 800e6de:	461c      	mov	r4, r3
 800e6e0:	4613      	mov	r3, r2
 800e6e2:	cb07      	ldmia	r3!, {r0, r1, r2}
 800e6e4:	6020      	str	r0, [r4, #0]
 800e6e6:	6061      	str	r1, [r4, #4]
 800e6e8:	60a2      	str	r2, [r4, #8]
			break;
 800e6ea:	f00d beeb 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 379 :
			strcpy(p->name,"LIZARD 3");
 800e6ee:	687b      	ldr	r3, [r7, #4]
 800e6f0:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800e6f4:	4938      	ldr	r1, [pc, #224]	; (800e7d8 <problem_fetch+0xd174>)
 800e6f6:	461a      	mov	r2, r3
 800e6f8:	460b      	mov	r3, r1
 800e6fa:	cb03      	ldmia	r3!, {r0, r1}
 800e6fc:	6010      	str	r0, [r2, #0]
 800e6fe:	6051      	str	r1, [r2, #4]
 800e700:	781b      	ldrb	r3, [r3, #0]
 800e702:	7213      	strb	r3, [r2, #8]
			strcpy(p->grade,"6C+");
 800e704:	687b      	ldr	r3, [r7, #4]
 800e706:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800e70a:	4a34      	ldr	r2, [pc, #208]	; (800e7dc <problem_fetch+0xd178>)
 800e70c:	6810      	ldr	r0, [r2, #0]
 800e70e:	6018      	str	r0, [r3, #0]
			p->moveSize = 12;
 800e710:	687b      	ldr	r3, [r7, #4]
 800e712:	220c      	movs	r2, #12
 800e714:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,H,J,I,H,F,E,C,D,B,A,A");
 800e716:	687b      	ldr	r3, [r7, #4]
 800e718:	33a4      	adds	r3, #164	; 0xa4
 800e71a:	4a31      	ldr	r2, [pc, #196]	; (800e7e0 <problem_fetch+0xd17c>)
 800e71c:	461d      	mov	r5, r3
 800e71e:	4614      	mov	r4, r2
 800e720:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800e722:	6028      	str	r0, [r5, #0]
 800e724:	6069      	str	r1, [r5, #4]
 800e726:	60aa      	str	r2, [r5, #8]
 800e728:	60eb      	str	r3, [r5, #12]
 800e72a:	cc03      	ldmia	r4!, {r0, r1}
 800e72c:	6128      	str	r0, [r5, #16]
 800e72e:	6169      	str	r1, [r5, #20]
			strcpy(p->moveNumbers,"4,5,5,10,10,11,12,13,15,15,9,18");
 800e730:	687b      	ldr	r3, [r7, #4]
 800e732:	3304      	adds	r3, #4
 800e734:	4a2b      	ldr	r2, [pc, #172]	; (800e7e4 <problem_fetch+0xd180>)
 800e736:	461c      	mov	r4, r3
 800e738:	4615      	mov	r5, r2
 800e73a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e73c:	6020      	str	r0, [r4, #0]
 800e73e:	6061      	str	r1, [r4, #4]
 800e740:	60a2      	str	r2, [r4, #8]
 800e742:	60e3      	str	r3, [r4, #12]
 800e744:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e746:	6120      	str	r0, [r4, #16]
 800e748:	6161      	str	r1, [r4, #20]
 800e74a:	61a2      	str	r2, [r4, #24]
 800e74c:	61e3      	str	r3, [r4, #28]
			strcpy(p->startFinish,"s,d,d,d,d,d,d,d,d,d,d,e");
 800e74e:	687b      	ldr	r3, [r7, #4]
 800e750:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800e754:	4a24      	ldr	r2, [pc, #144]	; (800e7e8 <problem_fetch+0xd184>)
 800e756:	461d      	mov	r5, r3
 800e758:	4614      	mov	r4, r2
 800e75a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800e75c:	6028      	str	r0, [r5, #0]
 800e75e:	6069      	str	r1, [r5, #4]
 800e760:	60aa      	str	r2, [r5, #8]
 800e762:	60eb      	str	r3, [r5, #12]
 800e764:	cc03      	ldmia	r4!, {r0, r1}
 800e766:	6128      	str	r0, [r5, #16]
 800e768:	6169      	str	r1, [r5, #20]
			break;
 800e76a:	f00d beab 	b.w	801c4c4 <problem_fetch+0x1ae60>
 800e76e:	bf00      	nop
 800e770:	08028430 	.word	0x08028430
 800e774:	08023b24 	.word	0x08023b24
 800e778:	08028444 	.word	0x08028444
 800e77c:	08028454 	.word	0x08028454
 800e780:	08023b9c 	.word	0x08023b9c
 800e784:	08028468 	.word	0x08028468
 800e788:	08024358 	.word	0x08024358
 800e78c:	08028470 	.word	0x08028470
 800e790:	08027ab0 	.word	0x08027ab0
 800e794:	08023c78 	.word	0x08023c78
 800e798:	08028478 	.word	0x08028478
 800e79c:	0802847c 	.word	0x0802847c
 800e7a0:	0802848c 	.word	0x0802848c
 800e7a4:	080284a0 	.word	0x080284a0
 800e7a8:	08023cc4 	.word	0x08023cc4
 800e7ac:	080284b0 	.word	0x080284b0
 800e7b0:	080284bc 	.word	0x080284bc
 800e7b4:	08023ec0 	.word	0x08023ec0
 800e7b8:	080284cc 	.word	0x080284cc
 800e7bc:	0802421c 	.word	0x0802421c
 800e7c0:	080284dc 	.word	0x080284dc
 800e7c4:	080284e8 	.word	0x080284e8
 800e7c8:	08023b04 	.word	0x08023b04
 800e7cc:	080284f8 	.word	0x080284f8
 800e7d0:	08028504 	.word	0x08028504
 800e7d4:	08028510 	.word	0x08028510
 800e7d8:	08028520 	.word	0x08028520
 800e7dc:	08023bbc 	.word	0x08023bbc
 800e7e0:	0802852c 	.word	0x0802852c
 800e7e4:	08028544 	.word	0x08028544
 800e7e8:	08028564 	.word	0x08028564
		case 380 :
			strcpy(p->name,"MOLOTOV COCKTEASE");
 800e7ec:	687b      	ldr	r3, [r7, #4]
 800e7ee:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800e7f2:	4aab      	ldr	r2, [pc, #684]	; (800eaa0 <problem_fetch+0xd43c>)
 800e7f4:	461d      	mov	r5, r3
 800e7f6:	4614      	mov	r4, r2
 800e7f8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800e7fa:	6028      	str	r0, [r5, #0]
 800e7fc:	6069      	str	r1, [r5, #4]
 800e7fe:	60aa      	str	r2, [r5, #8]
 800e800:	60eb      	str	r3, [r5, #12]
 800e802:	8823      	ldrh	r3, [r4, #0]
 800e804:	822b      	strh	r3, [r5, #16]
			strcpy(p->grade,"7C+");
 800e806:	687b      	ldr	r3, [r7, #4]
 800e808:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800e80c:	4aa5      	ldr	r2, [pc, #660]	; (800eaa4 <problem_fetch+0xd440>)
 800e80e:	6810      	ldr	r0, [r2, #0]
 800e810:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 800e812:	687b      	ldr	r3, [r7, #4]
 800e814:	2206      	movs	r2, #6
 800e816:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"E,G,I,G,K,I");
 800e818:	687b      	ldr	r3, [r7, #4]
 800e81a:	33a4      	adds	r3, #164	; 0xa4
 800e81c:	4aa2      	ldr	r2, [pc, #648]	; (800eaa8 <problem_fetch+0xd444>)
 800e81e:	461c      	mov	r4, r3
 800e820:	4613      	mov	r3, r2
 800e822:	cb07      	ldmia	r3!, {r0, r1, r2}
 800e824:	6020      	str	r0, [r4, #0]
 800e826:	6061      	str	r1, [r4, #4]
 800e828:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"6,9,7,14,14,18");
 800e82a:	687b      	ldr	r3, [r7, #4]
 800e82c:	3304      	adds	r3, #4
 800e82e:	4a9f      	ldr	r2, [pc, #636]	; (800eaac <problem_fetch+0xd448>)
 800e830:	461c      	mov	r4, r3
 800e832:	4613      	mov	r3, r2
 800e834:	cb07      	ldmia	r3!, {r0, r1, r2}
 800e836:	6020      	str	r0, [r4, #0]
 800e838:	6061      	str	r1, [r4, #4]
 800e83a:	60a2      	str	r2, [r4, #8]
 800e83c:	881a      	ldrh	r2, [r3, #0]
 800e83e:	789b      	ldrb	r3, [r3, #2]
 800e840:	81a2      	strh	r2, [r4, #12]
 800e842:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 800e844:	687b      	ldr	r3, [r7, #4]
 800e846:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800e84a:	4a99      	ldr	r2, [pc, #612]	; (800eab0 <problem_fetch+0xd44c>)
 800e84c:	461c      	mov	r4, r3
 800e84e:	4613      	mov	r3, r2
 800e850:	cb07      	ldmia	r3!, {r0, r1, r2}
 800e852:	6020      	str	r0, [r4, #0]
 800e854:	6061      	str	r1, [r4, #4]
 800e856:	60a2      	str	r2, [r4, #8]
			break;
 800e858:	f00d be34 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 381 :
			strcpy(p->name,"BIROBIDJAN");
 800e85c:	687b      	ldr	r3, [r7, #4]
 800e85e:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800e862:	4994      	ldr	r1, [pc, #592]	; (800eab4 <problem_fetch+0xd450>)
 800e864:	461a      	mov	r2, r3
 800e866:	460b      	mov	r3, r1
 800e868:	cb03      	ldmia	r3!, {r0, r1}
 800e86a:	6010      	str	r0, [r2, #0]
 800e86c:	6051      	str	r1, [r2, #4]
 800e86e:	8819      	ldrh	r1, [r3, #0]
 800e870:	789b      	ldrb	r3, [r3, #2]
 800e872:	8111      	strh	r1, [r2, #8]
 800e874:	7293      	strb	r3, [r2, #10]
			strcpy(p->grade,"6C+");
 800e876:	687b      	ldr	r3, [r7, #4]
 800e878:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800e87c:	4a8e      	ldr	r2, [pc, #568]	; (800eab8 <problem_fetch+0xd454>)
 800e87e:	6810      	ldr	r0, [r2, #0]
 800e880:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 800e882:	687b      	ldr	r3, [r7, #4]
 800e884:	2206      	movs	r2, #6
 800e886:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,E,E,C,E,A");
 800e888:	687b      	ldr	r3, [r7, #4]
 800e88a:	33a4      	adds	r3, #164	; 0xa4
 800e88c:	4a8b      	ldr	r2, [pc, #556]	; (800eabc <problem_fetch+0xd458>)
 800e88e:	461c      	mov	r4, r3
 800e890:	4613      	mov	r3, r2
 800e892:	cb07      	ldmia	r3!, {r0, r1, r2}
 800e894:	6020      	str	r0, [r4, #0]
 800e896:	6061      	str	r1, [r4, #4]
 800e898:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,8,9,13,16,18");
 800e89a:	687b      	ldr	r3, [r7, #4]
 800e89c:	3304      	adds	r3, #4
 800e89e:	4a88      	ldr	r2, [pc, #544]	; (800eac0 <problem_fetch+0xd45c>)
 800e8a0:	461c      	mov	r4, r3
 800e8a2:	4613      	mov	r3, r2
 800e8a4:	cb07      	ldmia	r3!, {r0, r1, r2}
 800e8a6:	6020      	str	r0, [r4, #0]
 800e8a8:	6061      	str	r1, [r4, #4]
 800e8aa:	60a2      	str	r2, [r4, #8]
 800e8ac:	881a      	ldrh	r2, [r3, #0]
 800e8ae:	789b      	ldrb	r3, [r3, #2]
 800e8b0:	81a2      	strh	r2, [r4, #12]
 800e8b2:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 800e8b4:	687b      	ldr	r3, [r7, #4]
 800e8b6:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800e8ba:	4a7d      	ldr	r2, [pc, #500]	; (800eab0 <problem_fetch+0xd44c>)
 800e8bc:	461c      	mov	r4, r3
 800e8be:	4613      	mov	r3, r2
 800e8c0:	cb07      	ldmia	r3!, {r0, r1, r2}
 800e8c2:	6020      	str	r0, [r4, #0]
 800e8c4:	6061      	str	r1, [r4, #4]
 800e8c6:	60a2      	str	r2, [r4, #8]
			break;
 800e8c8:	f00d bdfc 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 382 :
			strcpy(p->name,"BLACK PANTHER");
 800e8cc:	687b      	ldr	r3, [r7, #4]
 800e8ce:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800e8d2:	4a7c      	ldr	r2, [pc, #496]	; (800eac4 <problem_fetch+0xd460>)
 800e8d4:	461c      	mov	r4, r3
 800e8d6:	4613      	mov	r3, r2
 800e8d8:	cb07      	ldmia	r3!, {r0, r1, r2}
 800e8da:	6020      	str	r0, [r4, #0]
 800e8dc:	6061      	str	r1, [r4, #4]
 800e8de:	60a2      	str	r2, [r4, #8]
 800e8e0:	881b      	ldrh	r3, [r3, #0]
 800e8e2:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade,"6B+");
 800e8e4:	687b      	ldr	r3, [r7, #4]
 800e8e6:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800e8ea:	4a77      	ldr	r2, [pc, #476]	; (800eac8 <problem_fetch+0xd464>)
 800e8ec:	6810      	ldr	r0, [r2, #0]
 800e8ee:	6018      	str	r0, [r3, #0]
			p->moveSize = 13;
 800e8f0:	687b      	ldr	r3, [r7, #4]
 800e8f2:	220d      	movs	r2, #13
 800e8f4:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,H,E,G,C,B,H,C,D,D,F,G,A");
 800e8f6:	687b      	ldr	r3, [r7, #4]
 800e8f8:	33a4      	adds	r3, #164	; 0xa4
 800e8fa:	4a74      	ldr	r2, [pc, #464]	; (800eacc <problem_fetch+0xd468>)
 800e8fc:	461d      	mov	r5, r3
 800e8fe:	4614      	mov	r4, r2
 800e900:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800e902:	6028      	str	r0, [r5, #0]
 800e904:	6069      	str	r1, [r5, #4]
 800e906:	60aa      	str	r2, [r5, #8]
 800e908:	60eb      	str	r3, [r5, #12]
 800e90a:	cc03      	ldmia	r4!, {r0, r1}
 800e90c:	6128      	str	r0, [r5, #16]
 800e90e:	6169      	str	r1, [r5, #20]
 800e910:	8823      	ldrh	r3, [r4, #0]
 800e912:	832b      	strh	r3, [r5, #24]
			strcpy(p->moveNumbers,"4,5,8,9,16,15,8,13,11,15,11,6,18");
 800e914:	687b      	ldr	r3, [r7, #4]
 800e916:	3304      	adds	r3, #4
 800e918:	4a6d      	ldr	r2, [pc, #436]	; (800ead0 <problem_fetch+0xd46c>)
 800e91a:	4614      	mov	r4, r2
 800e91c:	469c      	mov	ip, r3
 800e91e:	f104 0e20 	add.w	lr, r4, #32
 800e922:	4665      	mov	r5, ip
 800e924:	4626      	mov	r6, r4
 800e926:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800e928:	6028      	str	r0, [r5, #0]
 800e92a:	6069      	str	r1, [r5, #4]
 800e92c:	60aa      	str	r2, [r5, #8]
 800e92e:	60eb      	str	r3, [r5, #12]
 800e930:	3410      	adds	r4, #16
 800e932:	f10c 0c10 	add.w	ip, ip, #16
 800e936:	4574      	cmp	r4, lr
 800e938:	d1f3      	bne.n	800e922 <problem_fetch+0xd2be>
 800e93a:	4663      	mov	r3, ip
 800e93c:	4622      	mov	r2, r4
 800e93e:	7812      	ldrb	r2, [r2, #0]
 800e940:	701a      	strb	r2, [r3, #0]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,d,d,d,d,d,e");
 800e942:	687b      	ldr	r3, [r7, #4]
 800e944:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800e948:	4a62      	ldr	r2, [pc, #392]	; (800ead4 <problem_fetch+0xd470>)
 800e94a:	461d      	mov	r5, r3
 800e94c:	4614      	mov	r4, r2
 800e94e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800e950:	6028      	str	r0, [r5, #0]
 800e952:	6069      	str	r1, [r5, #4]
 800e954:	60aa      	str	r2, [r5, #8]
 800e956:	60eb      	str	r3, [r5, #12]
 800e958:	cc03      	ldmia	r4!, {r0, r1}
 800e95a:	6128      	str	r0, [r5, #16]
 800e95c:	6169      	str	r1, [r5, #20]
 800e95e:	8823      	ldrh	r3, [r4, #0]
 800e960:	832b      	strh	r3, [r5, #24]
			break;
 800e962:	f00d bdaf 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 383 :
			strcpy(p->name,"HOLE IN FOUR");
 800e966:	687b      	ldr	r3, [r7, #4]
 800e968:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800e96c:	4a5a      	ldr	r2, [pc, #360]	; (800ead8 <problem_fetch+0xd474>)
 800e96e:	461c      	mov	r4, r3
 800e970:	4613      	mov	r3, r2
 800e972:	cb07      	ldmia	r3!, {r0, r1, r2}
 800e974:	6020      	str	r0, [r4, #0]
 800e976:	6061      	str	r1, [r4, #4]
 800e978:	60a2      	str	r2, [r4, #8]
 800e97a:	781b      	ldrb	r3, [r3, #0]
 800e97c:	7323      	strb	r3, [r4, #12]
			strcpy(p->grade,"7A+");
 800e97e:	687b      	ldr	r3, [r7, #4]
 800e980:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800e984:	4a55      	ldr	r2, [pc, #340]	; (800eadc <problem_fetch+0xd478>)
 800e986:	6810      	ldr	r0, [r2, #0]
 800e988:	6018      	str	r0, [r3, #0]
			p->moveSize = 5;
 800e98a:	687b      	ldr	r3, [r7, #4]
 800e98c:	2205      	movs	r2, #5
 800e98e:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"E,G,B,D,A");
 800e990:	687b      	ldr	r3, [r7, #4]
 800e992:	33a4      	adds	r3, #164	; 0xa4
 800e994:	4952      	ldr	r1, [pc, #328]	; (800eae0 <problem_fetch+0xd47c>)
 800e996:	461a      	mov	r2, r3
 800e998:	460b      	mov	r3, r1
 800e99a:	cb03      	ldmia	r3!, {r0, r1}
 800e99c:	6010      	str	r0, [r2, #0]
 800e99e:	6051      	str	r1, [r2, #4]
 800e9a0:	881b      	ldrh	r3, [r3, #0]
 800e9a2:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"6,10,10,15,18");
 800e9a4:	687b      	ldr	r3, [r7, #4]
 800e9a6:	3304      	adds	r3, #4
 800e9a8:	4a4e      	ldr	r2, [pc, #312]	; (800eae4 <problem_fetch+0xd480>)
 800e9aa:	461c      	mov	r4, r3
 800e9ac:	4613      	mov	r3, r2
 800e9ae:	cb07      	ldmia	r3!, {r0, r1, r2}
 800e9b0:	6020      	str	r0, [r4, #0]
 800e9b2:	6061      	str	r1, [r4, #4]
 800e9b4:	60a2      	str	r2, [r4, #8]
 800e9b6:	881b      	ldrh	r3, [r3, #0]
 800e9b8:	81a3      	strh	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,e");
 800e9ba:	687b      	ldr	r3, [r7, #4]
 800e9bc:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800e9c0:	4949      	ldr	r1, [pc, #292]	; (800eae8 <problem_fetch+0xd484>)
 800e9c2:	461a      	mov	r2, r3
 800e9c4:	460b      	mov	r3, r1
 800e9c6:	cb03      	ldmia	r3!, {r0, r1}
 800e9c8:	6010      	str	r0, [r2, #0]
 800e9ca:	6051      	str	r1, [r2, #4]
 800e9cc:	881b      	ldrh	r3, [r3, #0]
 800e9ce:	8113      	strh	r3, [r2, #8]
			break;
 800e9d0:	f00d bd78 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 384 :
			strcpy(p->name,"POLARIS");
 800e9d4:	687b      	ldr	r3, [r7, #4]
 800e9d6:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800e9da:	4944      	ldr	r1, [pc, #272]	; (800eaec <problem_fetch+0xd488>)
 800e9dc:	461a      	mov	r2, r3
 800e9de:	460b      	mov	r3, r1
 800e9e0:	cb03      	ldmia	r3!, {r0, r1}
 800e9e2:	6010      	str	r0, [r2, #0]
 800e9e4:	6051      	str	r1, [r2, #4]
			strcpy(p->grade,"7A+");
 800e9e6:	687b      	ldr	r3, [r7, #4]
 800e9e8:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800e9ec:	4a3b      	ldr	r2, [pc, #236]	; (800eadc <problem_fetch+0xd478>)
 800e9ee:	6810      	ldr	r0, [r2, #0]
 800e9f0:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 800e9f2:	687b      	ldr	r3, [r7, #4]
 800e9f4:	2206      	movs	r2, #6
 800e9f6:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,H,C,F,A,D");
 800e9f8:	687b      	ldr	r3, [r7, #4]
 800e9fa:	33a4      	adds	r3, #164	; 0xa4
 800e9fc:	4a3c      	ldr	r2, [pc, #240]	; (800eaf0 <problem_fetch+0xd48c>)
 800e9fe:	461c      	mov	r4, r3
 800ea00:	4613      	mov	r3, r2
 800ea02:	cb07      	ldmia	r3!, {r0, r1, r2}
 800ea04:	6020      	str	r0, [r4, #0]
 800ea06:	6061      	str	r1, [r4, #4]
 800ea08:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,8,8,11,14,18");
 800ea0a:	687b      	ldr	r3, [r7, #4]
 800ea0c:	3304      	adds	r3, #4
 800ea0e:	4a39      	ldr	r2, [pc, #228]	; (800eaf4 <problem_fetch+0xd490>)
 800ea10:	461c      	mov	r4, r3
 800ea12:	4613      	mov	r3, r2
 800ea14:	cb07      	ldmia	r3!, {r0, r1, r2}
 800ea16:	6020      	str	r0, [r4, #0]
 800ea18:	6061      	str	r1, [r4, #4]
 800ea1a:	60a2      	str	r2, [r4, #8]
 800ea1c:	881a      	ldrh	r2, [r3, #0]
 800ea1e:	789b      	ldrb	r3, [r3, #2]
 800ea20:	81a2      	strh	r2, [r4, #12]
 800ea22:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 800ea24:	687b      	ldr	r3, [r7, #4]
 800ea26:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800ea2a:	4a21      	ldr	r2, [pc, #132]	; (800eab0 <problem_fetch+0xd44c>)
 800ea2c:	461c      	mov	r4, r3
 800ea2e:	4613      	mov	r3, r2
 800ea30:	cb07      	ldmia	r3!, {r0, r1, r2}
 800ea32:	6020      	str	r0, [r4, #0]
 800ea34:	6061      	str	r1, [r4, #4]
 800ea36:	60a2      	str	r2, [r4, #8]
			break;
 800ea38:	f00d bd44 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 385 :
			strcpy(p->name,"REACHY");
 800ea3c:	687b      	ldr	r3, [r7, #4]
 800ea3e:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800ea42:	4a2d      	ldr	r2, [pc, #180]	; (800eaf8 <problem_fetch+0xd494>)
 800ea44:	6810      	ldr	r0, [r2, #0]
 800ea46:	6018      	str	r0, [r3, #0]
 800ea48:	8891      	ldrh	r1, [r2, #4]
 800ea4a:	7992      	ldrb	r2, [r2, #6]
 800ea4c:	8099      	strh	r1, [r3, #4]
 800ea4e:	719a      	strb	r2, [r3, #6]
			strcpy(p->grade,"6B+");
 800ea50:	687b      	ldr	r3, [r7, #4]
 800ea52:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800ea56:	4a1c      	ldr	r2, [pc, #112]	; (800eac8 <problem_fetch+0xd464>)
 800ea58:	6810      	ldr	r0, [r2, #0]
 800ea5a:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 800ea5c:	687b      	ldr	r3, [r7, #4]
 800ea5e:	2206      	movs	r2, #6
 800ea60:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,E,H,D,D,A");
 800ea62:	687b      	ldr	r3, [r7, #4]
 800ea64:	33a4      	adds	r3, #164	; 0xa4
 800ea66:	4a25      	ldr	r2, [pc, #148]	; (800eafc <problem_fetch+0xd498>)
 800ea68:	461c      	mov	r4, r3
 800ea6a:	4613      	mov	r3, r2
 800ea6c:	cb07      	ldmia	r3!, {r0, r1, r2}
 800ea6e:	6020      	str	r0, [r4, #0]
 800ea70:	6061      	str	r1, [r4, #4]
 800ea72:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,6,10,11,15,18");
 800ea74:	687b      	ldr	r3, [r7, #4]
 800ea76:	3304      	adds	r3, #4
 800ea78:	4a21      	ldr	r2, [pc, #132]	; (800eb00 <problem_fetch+0xd49c>)
 800ea7a:	461c      	mov	r4, r3
 800ea7c:	4615      	mov	r5, r2
 800ea7e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ea80:	6020      	str	r0, [r4, #0]
 800ea82:	6061      	str	r1, [r4, #4]
 800ea84:	60a2      	str	r2, [r4, #8]
 800ea86:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,s,d,d,d,e");
 800ea88:	687b      	ldr	r3, [r7, #4]
 800ea8a:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800ea8e:	4a1d      	ldr	r2, [pc, #116]	; (800eb04 <problem_fetch+0xd4a0>)
 800ea90:	461c      	mov	r4, r3
 800ea92:	4613      	mov	r3, r2
 800ea94:	cb07      	ldmia	r3!, {r0, r1, r2}
 800ea96:	6020      	str	r0, [r4, #0]
 800ea98:	6061      	str	r1, [r4, #4]
 800ea9a:	60a2      	str	r2, [r4, #8]
			break;
 800ea9c:	f00d bd12 	b.w	801c4c4 <problem_fetch+0x1ae60>
 800eaa0:	0802857c 	.word	0x0802857c
 800eaa4:	08024130 	.word	0x08024130
 800eaa8:	08028590 	.word	0x08028590
 800eaac:	0802859c 	.word	0x0802859c
 800eab0:	08023ec0 	.word	0x08023ec0
 800eab4:	080285ac 	.word	0x080285ac
 800eab8:	08023bbc 	.word	0x08023bbc
 800eabc:	080285b8 	.word	0x080285b8
 800eac0:	080285c4 	.word	0x080285c4
 800eac4:	080285d4 	.word	0x080285d4
 800eac8:	08023b24 	.word	0x08023b24
 800eacc:	080285e4 	.word	0x080285e4
 800ead0:	08028600 	.word	0x08028600
 800ead4:	08028624 	.word	0x08028624
 800ead8:	08028640 	.word	0x08028640
 800eadc:	08023cc4 	.word	0x08023cc4
 800eae0:	08028650 	.word	0x08028650
 800eae4:	0802865c 	.word	0x0802865c
 800eae8:	08023ff0 	.word	0x08023ff0
 800eaec:	0802866c 	.word	0x0802866c
 800eaf0:	08028674 	.word	0x08028674
 800eaf4:	08028680 	.word	0x08028680
 800eaf8:	08028690 	.word	0x08028690
 800eafc:	08028698 	.word	0x08028698
 800eb00:	080286a4 	.word	0x080286a4
 800eb04:	08023b04 	.word	0x08023b04
		case 386 :
			strcpy(p->name,"JUST JUMP AND PINCH");
 800eb08:	687b      	ldr	r3, [r7, #4]
 800eb0a:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800eb0e:	4ab7      	ldr	r2, [pc, #732]	; (800edec <problem_fetch+0xd788>)
 800eb10:	461d      	mov	r5, r3
 800eb12:	4614      	mov	r4, r2
 800eb14:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800eb16:	6028      	str	r0, [r5, #0]
 800eb18:	6069      	str	r1, [r5, #4]
 800eb1a:	60aa      	str	r2, [r5, #8]
 800eb1c:	60eb      	str	r3, [r5, #12]
 800eb1e:	6820      	ldr	r0, [r4, #0]
 800eb20:	6128      	str	r0, [r5, #16]
			strcpy(p->grade,"7B+");
 800eb22:	687b      	ldr	r3, [r7, #4]
 800eb24:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800eb28:	4ab1      	ldr	r2, [pc, #708]	; (800edf0 <problem_fetch+0xd78c>)
 800eb2a:	6810      	ldr	r0, [r2, #0]
 800eb2c:	6018      	str	r0, [r3, #0]
			p->moveSize = 5;
 800eb2e:	687b      	ldr	r3, [r7, #4]
 800eb30:	2205      	movs	r2, #5
 800eb32:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"E,H,F,A,D");
 800eb34:	687b      	ldr	r3, [r7, #4]
 800eb36:	33a4      	adds	r3, #164	; 0xa4
 800eb38:	49ae      	ldr	r1, [pc, #696]	; (800edf4 <problem_fetch+0xd790>)
 800eb3a:	461a      	mov	r2, r3
 800eb3c:	460b      	mov	r3, r1
 800eb3e:	cb03      	ldmia	r3!, {r0, r1}
 800eb40:	6010      	str	r0, [r2, #0]
 800eb42:	6051      	str	r1, [r2, #4]
 800eb44:	881b      	ldrh	r3, [r3, #0]
 800eb46:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"6,5,11,14,18");
 800eb48:	687b      	ldr	r3, [r7, #4]
 800eb4a:	3304      	adds	r3, #4
 800eb4c:	4aaa      	ldr	r2, [pc, #680]	; (800edf8 <problem_fetch+0xd794>)
 800eb4e:	461c      	mov	r4, r3
 800eb50:	4613      	mov	r3, r2
 800eb52:	cb07      	ldmia	r3!, {r0, r1, r2}
 800eb54:	6020      	str	r0, [r4, #0]
 800eb56:	6061      	str	r1, [r4, #4]
 800eb58:	60a2      	str	r2, [r4, #8]
 800eb5a:	781b      	ldrb	r3, [r3, #0]
 800eb5c:	7323      	strb	r3, [r4, #12]
			strcpy(p->startFinish,"s,s,d,d,e");
 800eb5e:	687b      	ldr	r3, [r7, #4]
 800eb60:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800eb64:	49a5      	ldr	r1, [pc, #660]	; (800edfc <problem_fetch+0xd798>)
 800eb66:	461a      	mov	r2, r3
 800eb68:	460b      	mov	r3, r1
 800eb6a:	cb03      	ldmia	r3!, {r0, r1}
 800eb6c:	6010      	str	r0, [r2, #0]
 800eb6e:	6051      	str	r1, [r2, #4]
 800eb70:	881b      	ldrh	r3, [r3, #0]
 800eb72:	8113      	strh	r3, [r2, #8]
			break;
 800eb74:	f00d bca6 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 387 :
			strcpy(p->name,"JUMP MAN");
 800eb78:	687b      	ldr	r3, [r7, #4]
 800eb7a:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800eb7e:	49a0      	ldr	r1, [pc, #640]	; (800ee00 <problem_fetch+0xd79c>)
 800eb80:	461a      	mov	r2, r3
 800eb82:	460b      	mov	r3, r1
 800eb84:	cb03      	ldmia	r3!, {r0, r1}
 800eb86:	6010      	str	r0, [r2, #0]
 800eb88:	6051      	str	r1, [r2, #4]
 800eb8a:	781b      	ldrb	r3, [r3, #0]
 800eb8c:	7213      	strb	r3, [r2, #8]
			strcpy(p->grade,"7B+");
 800eb8e:	687b      	ldr	r3, [r7, #4]
 800eb90:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800eb94:	4a96      	ldr	r2, [pc, #600]	; (800edf0 <problem_fetch+0xd78c>)
 800eb96:	6810      	ldr	r0, [r2, #0]
 800eb98:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 800eb9a:	687b      	ldr	r3, [r7, #4]
 800eb9c:	2206      	movs	r2, #6
 800eb9e:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,I,I,G,D,D");
 800eba0:	687b      	ldr	r3, [r7, #4]
 800eba2:	33a4      	adds	r3, #164	; 0xa4
 800eba4:	4a97      	ldr	r2, [pc, #604]	; (800ee04 <problem_fetch+0xd7a0>)
 800eba6:	461c      	mov	r4, r3
 800eba8:	4613      	mov	r3, r2
 800ebaa:	cb07      	ldmia	r3!, {r0, r1, r2}
 800ebac:	6020      	str	r0, [r4, #0]
 800ebae:	6061      	str	r1, [r4, #4]
 800ebb0:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,10,9,15,15,18");
 800ebb2:	687b      	ldr	r3, [r7, #4]
 800ebb4:	3304      	adds	r3, #4
 800ebb6:	4a94      	ldr	r2, [pc, #592]	; (800ee08 <problem_fetch+0xd7a4>)
 800ebb8:	461c      	mov	r4, r3
 800ebba:	4615      	mov	r5, r2
 800ebbc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ebbe:	6020      	str	r0, [r4, #0]
 800ebc0:	6061      	str	r1, [r4, #4]
 800ebc2:	60a2      	str	r2, [r4, #8]
 800ebc4:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 800ebc6:	687b      	ldr	r3, [r7, #4]
 800ebc8:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800ebcc:	4a8f      	ldr	r2, [pc, #572]	; (800ee0c <problem_fetch+0xd7a8>)
 800ebce:	461c      	mov	r4, r3
 800ebd0:	4613      	mov	r3, r2
 800ebd2:	cb07      	ldmia	r3!, {r0, r1, r2}
 800ebd4:	6020      	str	r0, [r4, #0]
 800ebd6:	6061      	str	r1, [r4, #4]
 800ebd8:	60a2      	str	r2, [r4, #8]
			break;
 800ebda:	f00d bc73 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 388 :
			strcpy(p->name,"BAMBA");
 800ebde:	687b      	ldr	r3, [r7, #4]
 800ebe0:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800ebe4:	4a8a      	ldr	r2, [pc, #552]	; (800ee10 <problem_fetch+0xd7ac>)
 800ebe6:	6810      	ldr	r0, [r2, #0]
 800ebe8:	6018      	str	r0, [r3, #0]
 800ebea:	8892      	ldrh	r2, [r2, #4]
 800ebec:	809a      	strh	r2, [r3, #4]
			strcpy(p->grade,"6C");
 800ebee:	687b      	ldr	r3, [r7, #4]
 800ebf0:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800ebf4:	4a87      	ldr	r2, [pc, #540]	; (800ee14 <problem_fetch+0xd7b0>)
 800ebf6:	8811      	ldrh	r1, [r2, #0]
 800ebf8:	7892      	ldrb	r2, [r2, #2]
 800ebfa:	8019      	strh	r1, [r3, #0]
 800ebfc:	709a      	strb	r2, [r3, #2]
			p->moveSize = 5;
 800ebfe:	687b      	ldr	r3, [r7, #4]
 800ec00:	2205      	movs	r2, #5
 800ec02:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,I,I,E,D");
 800ec04:	687b      	ldr	r3, [r7, #4]
 800ec06:	33a4      	adds	r3, #164	; 0xa4
 800ec08:	4983      	ldr	r1, [pc, #524]	; (800ee18 <problem_fetch+0xd7b4>)
 800ec0a:	461a      	mov	r2, r3
 800ec0c:	460b      	mov	r3, r1
 800ec0e:	cb03      	ldmia	r3!, {r0, r1}
 800ec10:	6010      	str	r0, [r2, #0]
 800ec12:	6051      	str	r1, [r2, #4]
 800ec14:	881b      	ldrh	r3, [r3, #0]
 800ec16:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"5,10,14,16,18");
 800ec18:	687b      	ldr	r3, [r7, #4]
 800ec1a:	3304      	adds	r3, #4
 800ec1c:	4a7f      	ldr	r2, [pc, #508]	; (800ee1c <problem_fetch+0xd7b8>)
 800ec1e:	461c      	mov	r4, r3
 800ec20:	4613      	mov	r3, r2
 800ec22:	cb07      	ldmia	r3!, {r0, r1, r2}
 800ec24:	6020      	str	r0, [r4, #0]
 800ec26:	6061      	str	r1, [r4, #4]
 800ec28:	60a2      	str	r2, [r4, #8]
 800ec2a:	881b      	ldrh	r3, [r3, #0]
 800ec2c:	81a3      	strh	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,e");
 800ec2e:	687b      	ldr	r3, [r7, #4]
 800ec30:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800ec34:	497a      	ldr	r1, [pc, #488]	; (800ee20 <problem_fetch+0xd7bc>)
 800ec36:	461a      	mov	r2, r3
 800ec38:	460b      	mov	r3, r1
 800ec3a:	cb03      	ldmia	r3!, {r0, r1}
 800ec3c:	6010      	str	r0, [r2, #0]
 800ec3e:	6051      	str	r1, [r2, #4]
 800ec40:	881b      	ldrh	r3, [r3, #0]
 800ec42:	8113      	strh	r3, [r2, #8]
			break;
 800ec44:	f00d bc3e 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 389 :
			strcpy(p->name,"BO");
 800ec48:	687b      	ldr	r3, [r7, #4]
 800ec4a:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800ec4e:	4a75      	ldr	r2, [pc, #468]	; (800ee24 <problem_fetch+0xd7c0>)
 800ec50:	8811      	ldrh	r1, [r2, #0]
 800ec52:	7892      	ldrb	r2, [r2, #2]
 800ec54:	8019      	strh	r1, [r3, #0]
 800ec56:	709a      	strb	r2, [r3, #2]
			strcpy(p->grade,"6C+");
 800ec58:	687b      	ldr	r3, [r7, #4]
 800ec5a:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800ec5e:	4a72      	ldr	r2, [pc, #456]	; (800ee28 <problem_fetch+0xd7c4>)
 800ec60:	6810      	ldr	r0, [r2, #0]
 800ec62:	6018      	str	r0, [r3, #0]
			p->moveSize = 4;
 800ec64:	687b      	ldr	r3, [r7, #4]
 800ec66:	2204      	movs	r2, #4
 800ec68:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"E,I,G,I");
 800ec6a:	687b      	ldr	r3, [r7, #4]
 800ec6c:	33a4      	adds	r3, #164	; 0xa4
 800ec6e:	496f      	ldr	r1, [pc, #444]	; (800ee2c <problem_fetch+0xd7c8>)
 800ec70:	461a      	mov	r2, r3
 800ec72:	460b      	mov	r3, r1
 800ec74:	cb03      	ldmia	r3!, {r0, r1}
 800ec76:	6010      	str	r0, [r2, #0]
 800ec78:	6051      	str	r1, [r2, #4]
			strcpy(p->moveNumbers,"6,10,14,18");
 800ec7a:	687b      	ldr	r3, [r7, #4]
 800ec7c:	3304      	adds	r3, #4
 800ec7e:	496c      	ldr	r1, [pc, #432]	; (800ee30 <problem_fetch+0xd7cc>)
 800ec80:	461a      	mov	r2, r3
 800ec82:	460b      	mov	r3, r1
 800ec84:	cb03      	ldmia	r3!, {r0, r1}
 800ec86:	6010      	str	r0, [r2, #0]
 800ec88:	6051      	str	r1, [r2, #4]
 800ec8a:	8819      	ldrh	r1, [r3, #0]
 800ec8c:	789b      	ldrb	r3, [r3, #2]
 800ec8e:	8111      	strh	r1, [r2, #8]
 800ec90:	7293      	strb	r3, [r2, #10]
			strcpy(p->startFinish,"s,d,d,e");
 800ec92:	687b      	ldr	r3, [r7, #4]
 800ec94:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800ec98:	4966      	ldr	r1, [pc, #408]	; (800ee34 <problem_fetch+0xd7d0>)
 800ec9a:	461a      	mov	r2, r3
 800ec9c:	460b      	mov	r3, r1
 800ec9e:	cb03      	ldmia	r3!, {r0, r1}
 800eca0:	6010      	str	r0, [r2, #0]
 800eca2:	6051      	str	r1, [r2, #4]
			break;
 800eca4:	f00d bc0e 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 390 :
			strcpy(p->name,"REACH FOR THE SKY");
 800eca8:	687b      	ldr	r3, [r7, #4]
 800ecaa:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800ecae:	4a62      	ldr	r2, [pc, #392]	; (800ee38 <problem_fetch+0xd7d4>)
 800ecb0:	461d      	mov	r5, r3
 800ecb2:	4614      	mov	r4, r2
 800ecb4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800ecb6:	6028      	str	r0, [r5, #0]
 800ecb8:	6069      	str	r1, [r5, #4]
 800ecba:	60aa      	str	r2, [r5, #8]
 800ecbc:	60eb      	str	r3, [r5, #12]
 800ecbe:	8823      	ldrh	r3, [r4, #0]
 800ecc0:	822b      	strh	r3, [r5, #16]
			strcpy(p->grade,"7A");
 800ecc2:	687b      	ldr	r3, [r7, #4]
 800ecc4:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800ecc8:	4a5c      	ldr	r2, [pc, #368]	; (800ee3c <problem_fetch+0xd7d8>)
 800ecca:	8811      	ldrh	r1, [r2, #0]
 800eccc:	7892      	ldrb	r2, [r2, #2]
 800ecce:	8019      	strh	r1, [r3, #0]
 800ecd0:	709a      	strb	r2, [r3, #2]
			p->moveSize = 5;
 800ecd2:	687b      	ldr	r3, [r7, #4]
 800ecd4:	2205      	movs	r2, #5
 800ecd6:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,E,G,C,D");
 800ecd8:	687b      	ldr	r3, [r7, #4]
 800ecda:	33a4      	adds	r3, #164	; 0xa4
 800ecdc:	4958      	ldr	r1, [pc, #352]	; (800ee40 <problem_fetch+0xd7dc>)
 800ecde:	461a      	mov	r2, r3
 800ece0:	460b      	mov	r3, r1
 800ece2:	cb03      	ldmia	r3!, {r0, r1}
 800ece4:	6010      	str	r0, [r2, #0]
 800ece6:	6051      	str	r1, [r2, #4]
 800ece8:	881b      	ldrh	r3, [r3, #0]
 800ecea:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"4,8,9,13,18");
 800ecec:	687b      	ldr	r3, [r7, #4]
 800ecee:	3304      	adds	r3, #4
 800ecf0:	4a54      	ldr	r2, [pc, #336]	; (800ee44 <problem_fetch+0xd7e0>)
 800ecf2:	461c      	mov	r4, r3
 800ecf4:	4613      	mov	r3, r2
 800ecf6:	cb07      	ldmia	r3!, {r0, r1, r2}
 800ecf8:	6020      	str	r0, [r4, #0]
 800ecfa:	6061      	str	r1, [r4, #4]
 800ecfc:	60a2      	str	r2, [r4, #8]
			strcpy(p->startFinish,"s,d,d,d,e");
 800ecfe:	687b      	ldr	r3, [r7, #4]
 800ed00:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800ed04:	4946      	ldr	r1, [pc, #280]	; (800ee20 <problem_fetch+0xd7bc>)
 800ed06:	461a      	mov	r2, r3
 800ed08:	460b      	mov	r3, r1
 800ed0a:	cb03      	ldmia	r3!, {r0, r1}
 800ed0c:	6010      	str	r0, [r2, #0]
 800ed0e:	6051      	str	r1, [r2, #4]
 800ed10:	881b      	ldrh	r3, [r3, #0]
 800ed12:	8113      	strh	r3, [r2, #8]
			break;
 800ed14:	f00d bbd6 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 391 :
			strcpy(p->name,"CHIVAS");
 800ed18:	687b      	ldr	r3, [r7, #4]
 800ed1a:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800ed1e:	4a4a      	ldr	r2, [pc, #296]	; (800ee48 <problem_fetch+0xd7e4>)
 800ed20:	6810      	ldr	r0, [r2, #0]
 800ed22:	6018      	str	r0, [r3, #0]
 800ed24:	8891      	ldrh	r1, [r2, #4]
 800ed26:	7992      	ldrb	r2, [r2, #6]
 800ed28:	8099      	strh	r1, [r3, #4]
 800ed2a:	719a      	strb	r2, [r3, #6]
			strcpy(p->grade,"7B");
 800ed2c:	687b      	ldr	r3, [r7, #4]
 800ed2e:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800ed32:	4a46      	ldr	r2, [pc, #280]	; (800ee4c <problem_fetch+0xd7e8>)
 800ed34:	8811      	ldrh	r1, [r2, #0]
 800ed36:	7892      	ldrb	r2, [r2, #2]
 800ed38:	8019      	strh	r1, [r3, #0]
 800ed3a:	709a      	strb	r2, [r3, #2]
			p->moveSize = 4;
 800ed3c:	687b      	ldr	r3, [r7, #4]
 800ed3e:	2204      	movs	r2, #4
 800ed40:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,F,A,A");
 800ed42:	687b      	ldr	r3, [r7, #4]
 800ed44:	33a4      	adds	r3, #164	; 0xa4
 800ed46:	4942      	ldr	r1, [pc, #264]	; (800ee50 <problem_fetch+0xd7ec>)
 800ed48:	461a      	mov	r2, r3
 800ed4a:	460b      	mov	r3, r1
 800ed4c:	cb03      	ldmia	r3!, {r0, r1}
 800ed4e:	6010      	str	r0, [r2, #0]
 800ed50:	6051      	str	r1, [r2, #4]
			strcpy(p->moveNumbers,"6,11,14,18");
 800ed52:	687b      	ldr	r3, [r7, #4]
 800ed54:	3304      	adds	r3, #4
 800ed56:	493f      	ldr	r1, [pc, #252]	; (800ee54 <problem_fetch+0xd7f0>)
 800ed58:	461a      	mov	r2, r3
 800ed5a:	460b      	mov	r3, r1
 800ed5c:	cb03      	ldmia	r3!, {r0, r1}
 800ed5e:	6010      	str	r0, [r2, #0]
 800ed60:	6051      	str	r1, [r2, #4]
 800ed62:	8819      	ldrh	r1, [r3, #0]
 800ed64:	789b      	ldrb	r3, [r3, #2]
 800ed66:	8111      	strh	r1, [r2, #8]
 800ed68:	7293      	strb	r3, [r2, #10]
			strcpy(p->startFinish,"s,d,d,e");
 800ed6a:	687b      	ldr	r3, [r7, #4]
 800ed6c:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800ed70:	4930      	ldr	r1, [pc, #192]	; (800ee34 <problem_fetch+0xd7d0>)
 800ed72:	461a      	mov	r2, r3
 800ed74:	460b      	mov	r3, r1
 800ed76:	cb03      	ldmia	r3!, {r0, r1}
 800ed78:	6010      	str	r0, [r2, #0]
 800ed7a:	6051      	str	r1, [r2, #4]
			break;
 800ed7c:	f00d bba2 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 392 :
			strcpy(p->name,"SPAIN IN VAIN");
 800ed80:	687b      	ldr	r3, [r7, #4]
 800ed82:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800ed86:	4a34      	ldr	r2, [pc, #208]	; (800ee58 <problem_fetch+0xd7f4>)
 800ed88:	461c      	mov	r4, r3
 800ed8a:	4613      	mov	r3, r2
 800ed8c:	cb07      	ldmia	r3!, {r0, r1, r2}
 800ed8e:	6020      	str	r0, [r4, #0]
 800ed90:	6061      	str	r1, [r4, #4]
 800ed92:	60a2      	str	r2, [r4, #8]
 800ed94:	881b      	ldrh	r3, [r3, #0]
 800ed96:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade,"7A");
 800ed98:	687b      	ldr	r3, [r7, #4]
 800ed9a:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800ed9e:	4a27      	ldr	r2, [pc, #156]	; (800ee3c <problem_fetch+0xd7d8>)
 800eda0:	8811      	ldrh	r1, [r2, #0]
 800eda2:	7892      	ldrb	r2, [r2, #2]
 800eda4:	8019      	strh	r1, [r3, #0]
 800eda6:	709a      	strb	r2, [r3, #2]
			p->moveSize = 6;
 800eda8:	687b      	ldr	r3, [r7, #4]
 800edaa:	2206      	movs	r2, #6
 800edac:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,H,F,E,A,D");
 800edae:	687b      	ldr	r3, [r7, #4]
 800edb0:	33a4      	adds	r3, #164	; 0xa4
 800edb2:	4a2a      	ldr	r2, [pc, #168]	; (800ee5c <problem_fetch+0xd7f8>)
 800edb4:	461c      	mov	r4, r3
 800edb6:	4613      	mov	r3, r2
 800edb8:	cb07      	ldmia	r3!, {r0, r1, r2}
 800edba:	6020      	str	r0, [r4, #0]
 800edbc:	6061      	str	r1, [r4, #4]
 800edbe:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,8,11,12,14,18");
 800edc0:	687b      	ldr	r3, [r7, #4]
 800edc2:	3304      	adds	r3, #4
 800edc4:	4a26      	ldr	r2, [pc, #152]	; (800ee60 <problem_fetch+0xd7fc>)
 800edc6:	461c      	mov	r4, r3
 800edc8:	4615      	mov	r5, r2
 800edca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800edcc:	6020      	str	r0, [r4, #0]
 800edce:	6061      	str	r1, [r4, #4]
 800edd0:	60a2      	str	r2, [r4, #8]
 800edd2:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 800edd4:	687b      	ldr	r3, [r7, #4]
 800edd6:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800edda:	4a0c      	ldr	r2, [pc, #48]	; (800ee0c <problem_fetch+0xd7a8>)
 800eddc:	461c      	mov	r4, r3
 800edde:	4613      	mov	r3, r2
 800ede0:	cb07      	ldmia	r3!, {r0, r1, r2}
 800ede2:	6020      	str	r0, [r4, #0]
 800ede4:	6061      	str	r1, [r4, #4]
 800ede6:	60a2      	str	r2, [r4, #8]
			break;
 800ede8:	f00d bb6c 	b.w	801c4c4 <problem_fetch+0x1ae60>
 800edec:	080286b4 	.word	0x080286b4
 800edf0:	08023c60 	.word	0x08023c60
 800edf4:	080286c8 	.word	0x080286c8
 800edf8:	080279cc 	.word	0x080279cc
 800edfc:	08024204 	.word	0x08024204
 800ee00:	080286d4 	.word	0x080286d4
 800ee04:	080286e0 	.word	0x080286e0
 800ee08:	080286ec 	.word	0x080286ec
 800ee0c:	08023ec0 	.word	0x08023ec0
 800ee10:	080286fc 	.word	0x080286fc
 800ee14:	08023bf0 	.word	0x08023bf0
 800ee18:	08028704 	.word	0x08028704
 800ee1c:	08028710 	.word	0x08028710
 800ee20:	08023ff0 	.word	0x08023ff0
 800ee24:	08028720 	.word	0x08028720
 800ee28:	08023bbc 	.word	0x08023bbc
 800ee2c:	08028724 	.word	0x08028724
 800ee30:	08023c6c 	.word	0x08023c6c
 800ee34:	08023c78 	.word	0x08023c78
 800ee38:	0802872c 	.word	0x0802872c
 800ee3c:	08023ae4 	.word	0x08023ae4
 800ee40:	08028740 	.word	0x08028740
 800ee44:	08024920 	.word	0x08024920
 800ee48:	0802874c 	.word	0x0802874c
 800ee4c:	0802421c 	.word	0x0802421c
 800ee50:	08028754 	.word	0x08028754
 800ee54:	08027ab0 	.word	0x08027ab0
 800ee58:	0802875c 	.word	0x0802875c
 800ee5c:	0802876c 	.word	0x0802876c
 800ee60:	08028778 	.word	0x08028778
		case 393 :
			strcpy(p->name,"LE VOYAGE");
 800ee64:	687b      	ldr	r3, [r7, #4]
 800ee66:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800ee6a:	49ac      	ldr	r1, [pc, #688]	; (800f11c <problem_fetch+0xdab8>)
 800ee6c:	461a      	mov	r2, r3
 800ee6e:	460b      	mov	r3, r1
 800ee70:	cb03      	ldmia	r3!, {r0, r1}
 800ee72:	6010      	str	r0, [r2, #0]
 800ee74:	6051      	str	r1, [r2, #4]
 800ee76:	881b      	ldrh	r3, [r3, #0]
 800ee78:	8113      	strh	r3, [r2, #8]
			strcpy(p->grade,"6C");
 800ee7a:	687b      	ldr	r3, [r7, #4]
 800ee7c:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800ee80:	4aa7      	ldr	r2, [pc, #668]	; (800f120 <problem_fetch+0xdabc>)
 800ee82:	8811      	ldrh	r1, [r2, #0]
 800ee84:	7892      	ldrb	r2, [r2, #2]
 800ee86:	8019      	strh	r1, [r3, #0]
 800ee88:	709a      	strb	r2, [r3, #2]
			p->moveSize = 6;
 800ee8a:	687b      	ldr	r3, [r7, #4]
 800ee8c:	2206      	movs	r2, #6
 800ee8e:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,H,E,A,C,D");
 800ee90:	687b      	ldr	r3, [r7, #4]
 800ee92:	33a4      	adds	r3, #164	; 0xa4
 800ee94:	4aa3      	ldr	r2, [pc, #652]	; (800f124 <problem_fetch+0xdac0>)
 800ee96:	461c      	mov	r4, r3
 800ee98:	4613      	mov	r3, r2
 800ee9a:	cb07      	ldmia	r3!, {r0, r1, r2}
 800ee9c:	6020      	str	r0, [r4, #0]
 800ee9e:	6061      	str	r1, [r4, #4]
 800eea0:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,8,12,14,8,18");
 800eea2:	687b      	ldr	r3, [r7, #4]
 800eea4:	3304      	adds	r3, #4
 800eea6:	4aa0      	ldr	r2, [pc, #640]	; (800f128 <problem_fetch+0xdac4>)
 800eea8:	461c      	mov	r4, r3
 800eeaa:	4613      	mov	r3, r2
 800eeac:	cb07      	ldmia	r3!, {r0, r1, r2}
 800eeae:	6020      	str	r0, [r4, #0]
 800eeb0:	6061      	str	r1, [r4, #4]
 800eeb2:	60a2      	str	r2, [r4, #8]
 800eeb4:	881a      	ldrh	r2, [r3, #0]
 800eeb6:	789b      	ldrb	r3, [r3, #2]
 800eeb8:	81a2      	strh	r2, [r4, #12]
 800eeba:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 800eebc:	687b      	ldr	r3, [r7, #4]
 800eebe:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800eec2:	4a9a      	ldr	r2, [pc, #616]	; (800f12c <problem_fetch+0xdac8>)
 800eec4:	461c      	mov	r4, r3
 800eec6:	4613      	mov	r3, r2
 800eec8:	cb07      	ldmia	r3!, {r0, r1, r2}
 800eeca:	6020      	str	r0, [r4, #0]
 800eecc:	6061      	str	r1, [r4, #4]
 800eece:	60a2      	str	r2, [r4, #8]
			break;
 800eed0:	f00d baf8 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 394 :
			strcpy(p->name,"SOFT LIKE BUTTER");
 800eed4:	687b      	ldr	r3, [r7, #4]
 800eed6:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800eeda:	4a95      	ldr	r2, [pc, #596]	; (800f130 <problem_fetch+0xdacc>)
 800eedc:	461d      	mov	r5, r3
 800eede:	4614      	mov	r4, r2
 800eee0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800eee2:	6028      	str	r0, [r5, #0]
 800eee4:	6069      	str	r1, [r5, #4]
 800eee6:	60aa      	str	r2, [r5, #8]
 800eee8:	60eb      	str	r3, [r5, #12]
 800eeea:	7823      	ldrb	r3, [r4, #0]
 800eeec:	742b      	strb	r3, [r5, #16]
			strcpy(p->grade,"6C");
 800eeee:	687b      	ldr	r3, [r7, #4]
 800eef0:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800eef4:	4a8a      	ldr	r2, [pc, #552]	; (800f120 <problem_fetch+0xdabc>)
 800eef6:	8811      	ldrh	r1, [r2, #0]
 800eef8:	7892      	ldrb	r2, [r2, #2]
 800eefa:	8019      	strh	r1, [r3, #0]
 800eefc:	709a      	strb	r2, [r3, #2]
			p->moveSize = 8;
 800eefe:	687b      	ldr	r3, [r7, #4]
 800ef00:	2208      	movs	r2, #8
 800ef02:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,E,I,H,J,E,G,D");
 800ef04:	687b      	ldr	r3, [r7, #4]
 800ef06:	33a4      	adds	r3, #164	; 0xa4
 800ef08:	4a8a      	ldr	r2, [pc, #552]	; (800f134 <problem_fetch+0xdad0>)
 800ef0a:	461c      	mov	r4, r3
 800ef0c:	4615      	mov	r5, r2
 800ef0e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ef10:	6020      	str	r0, [r4, #0]
 800ef12:	6061      	str	r1, [r4, #4]
 800ef14:	60a2      	str	r2, [r4, #8]
 800ef16:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,8,10,12,13,14,17,18");
 800ef18:	687b      	ldr	r3, [r7, #4]
 800ef1a:	3304      	adds	r3, #4
 800ef1c:	4a86      	ldr	r2, [pc, #536]	; (800f138 <problem_fetch+0xdad4>)
 800ef1e:	461d      	mov	r5, r3
 800ef20:	4614      	mov	r4, r2
 800ef22:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800ef24:	6028      	str	r0, [r5, #0]
 800ef26:	6069      	str	r1, [r5, #4]
 800ef28:	60aa      	str	r2, [r5, #8]
 800ef2a:	60eb      	str	r3, [r5, #12]
 800ef2c:	6820      	ldr	r0, [r4, #0]
 800ef2e:	6128      	str	r0, [r5, #16]
 800ef30:	88a3      	ldrh	r3, [r4, #4]
 800ef32:	82ab      	strh	r3, [r5, #20]
			strcpy(p->startFinish,"s,d,d,d,d,d,d,e");
 800ef34:	687b      	ldr	r3, [r7, #4]
 800ef36:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800ef3a:	4a80      	ldr	r2, [pc, #512]	; (800f13c <problem_fetch+0xdad8>)
 800ef3c:	461c      	mov	r4, r3
 800ef3e:	4615      	mov	r5, r2
 800ef40:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ef42:	6020      	str	r0, [r4, #0]
 800ef44:	6061      	str	r1, [r4, #4]
 800ef46:	60a2      	str	r2, [r4, #8]
 800ef48:	60e3      	str	r3, [r4, #12]
			break;
 800ef4a:	f00d babb 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 395 :
			strcpy(p->name,"PINCHY PINCH");
 800ef4e:	687b      	ldr	r3, [r7, #4]
 800ef50:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800ef54:	4a7a      	ldr	r2, [pc, #488]	; (800f140 <problem_fetch+0xdadc>)
 800ef56:	461c      	mov	r4, r3
 800ef58:	4613      	mov	r3, r2
 800ef5a:	cb07      	ldmia	r3!, {r0, r1, r2}
 800ef5c:	6020      	str	r0, [r4, #0]
 800ef5e:	6061      	str	r1, [r4, #4]
 800ef60:	60a2      	str	r2, [r4, #8]
 800ef62:	781b      	ldrb	r3, [r3, #0]
 800ef64:	7323      	strb	r3, [r4, #12]
			strcpy(p->grade,"6C+");
 800ef66:	687b      	ldr	r3, [r7, #4]
 800ef68:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800ef6c:	4a75      	ldr	r2, [pc, #468]	; (800f144 <problem_fetch+0xdae0>)
 800ef6e:	6810      	ldr	r0, [r2, #0]
 800ef70:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 800ef72:	687b      	ldr	r3, [r7, #4]
 800ef74:	2207      	movs	r2, #7
 800ef76:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,H,C,F,C,D,A");
 800ef78:	687b      	ldr	r3, [r7, #4]
 800ef7a:	33a4      	adds	r3, #164	; 0xa4
 800ef7c:	4a72      	ldr	r2, [pc, #456]	; (800f148 <problem_fetch+0xdae4>)
 800ef7e:	461c      	mov	r4, r3
 800ef80:	4613      	mov	r3, r2
 800ef82:	cb07      	ldmia	r3!, {r0, r1, r2}
 800ef84:	6020      	str	r0, [r4, #0]
 800ef86:	6061      	str	r1, [r4, #4]
 800ef88:	60a2      	str	r2, [r4, #8]
 800ef8a:	881b      	ldrh	r3, [r3, #0]
 800ef8c:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,8,8,11,13,15,18");
 800ef8e:	687b      	ldr	r3, [r7, #4]
 800ef90:	3304      	adds	r3, #4
 800ef92:	4a6e      	ldr	r2, [pc, #440]	; (800f14c <problem_fetch+0xdae8>)
 800ef94:	461d      	mov	r5, r3
 800ef96:	4614      	mov	r4, r2
 800ef98:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800ef9a:	6028      	str	r0, [r5, #0]
 800ef9c:	6069      	str	r1, [r5, #4]
 800ef9e:	60aa      	str	r2, [r5, #8]
 800efa0:	60eb      	str	r3, [r5, #12]
 800efa2:	8823      	ldrh	r3, [r4, #0]
 800efa4:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 800efa6:	687b      	ldr	r3, [r7, #4]
 800efa8:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800efac:	4a68      	ldr	r2, [pc, #416]	; (800f150 <problem_fetch+0xdaec>)
 800efae:	461c      	mov	r4, r3
 800efb0:	4613      	mov	r3, r2
 800efb2:	cb07      	ldmia	r3!, {r0, r1, r2}
 800efb4:	6020      	str	r0, [r4, #0]
 800efb6:	6061      	str	r1, [r4, #4]
 800efb8:	60a2      	str	r2, [r4, #8]
 800efba:	881b      	ldrh	r3, [r3, #0]
 800efbc:	81a3      	strh	r3, [r4, #12]
			break;
 800efbe:	f00d ba81 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 396 :
			strcpy(p->name,"ONE LINE");
 800efc2:	687b      	ldr	r3, [r7, #4]
 800efc4:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800efc8:	4962      	ldr	r1, [pc, #392]	; (800f154 <problem_fetch+0xdaf0>)
 800efca:	461a      	mov	r2, r3
 800efcc:	460b      	mov	r3, r1
 800efce:	cb03      	ldmia	r3!, {r0, r1}
 800efd0:	6010      	str	r0, [r2, #0]
 800efd2:	6051      	str	r1, [r2, #4]
 800efd4:	781b      	ldrb	r3, [r3, #0]
 800efd6:	7213      	strb	r3, [r2, #8]
			strcpy(p->grade,"7A+");
 800efd8:	687b      	ldr	r3, [r7, #4]
 800efda:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800efde:	4a5e      	ldr	r2, [pc, #376]	; (800f158 <problem_fetch+0xdaf4>)
 800efe0:	6810      	ldr	r0, [r2, #0]
 800efe2:	6018      	str	r0, [r3, #0]
			p->moveSize = 8;
 800efe4:	687b      	ldr	r3, [r7, #4]
 800efe6:	2208      	movs	r2, #8
 800efe8:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"C,E,H,K,E,I,J,I");
 800efea:	687b      	ldr	r3, [r7, #4]
 800efec:	33a4      	adds	r3, #164	; 0xa4
 800efee:	4a5b      	ldr	r2, [pc, #364]	; (800f15c <problem_fetch+0xdaf8>)
 800eff0:	461c      	mov	r4, r3
 800eff2:	4615      	mov	r5, r2
 800eff4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800eff6:	6020      	str	r0, [r4, #0]
 800eff8:	6061      	str	r1, [r4, #4]
 800effa:	60a2      	str	r2, [r4, #8]
 800effc:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,6,12,16,9,9,5,18");
 800effe:	687b      	ldr	r3, [r7, #4]
 800f000:	3304      	adds	r3, #4
 800f002:	4a57      	ldr	r2, [pc, #348]	; (800f160 <problem_fetch+0xdafc>)
 800f004:	461d      	mov	r5, r3
 800f006:	4614      	mov	r4, r2
 800f008:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800f00a:	6028      	str	r0, [r5, #0]
 800f00c:	6069      	str	r1, [r5, #4]
 800f00e:	60aa      	str	r2, [r5, #8]
 800f010:	60eb      	str	r3, [r5, #12]
 800f012:	8823      	ldrh	r3, [r4, #0]
 800f014:	78a2      	ldrb	r2, [r4, #2]
 800f016:	822b      	strh	r3, [r5, #16]
 800f018:	4613      	mov	r3, r2
 800f01a:	74ab      	strb	r3, [r5, #18]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,e");
 800f01c:	687b      	ldr	r3, [r7, #4]
 800f01e:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800f022:	4a50      	ldr	r2, [pc, #320]	; (800f164 <problem_fetch+0xdb00>)
 800f024:	461c      	mov	r4, r3
 800f026:	4615      	mov	r5, r2
 800f028:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f02a:	6020      	str	r0, [r4, #0]
 800f02c:	6061      	str	r1, [r4, #4]
 800f02e:	60a2      	str	r2, [r4, #8]
 800f030:	60e3      	str	r3, [r4, #12]
			break;
 800f032:	f00d ba47 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 397 :
			strcpy(p->name,"RASTAMAN");
 800f036:	687b      	ldr	r3, [r7, #4]
 800f038:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800f03c:	494a      	ldr	r1, [pc, #296]	; (800f168 <problem_fetch+0xdb04>)
 800f03e:	461a      	mov	r2, r3
 800f040:	460b      	mov	r3, r1
 800f042:	cb03      	ldmia	r3!, {r0, r1}
 800f044:	6010      	str	r0, [r2, #0]
 800f046:	6051      	str	r1, [r2, #4]
 800f048:	781b      	ldrb	r3, [r3, #0]
 800f04a:	7213      	strb	r3, [r2, #8]
			strcpy(p->grade,"6B+");
 800f04c:	687b      	ldr	r3, [r7, #4]
 800f04e:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800f052:	4a46      	ldr	r2, [pc, #280]	; (800f16c <problem_fetch+0xdb08>)
 800f054:	6810      	ldr	r0, [r2, #0]
 800f056:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 800f058:	687b      	ldr	r3, [r7, #4]
 800f05a:	2207      	movs	r2, #7
 800f05c:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,H,C,F,C,E,A");
 800f05e:	687b      	ldr	r3, [r7, #4]
 800f060:	33a4      	adds	r3, #164	; 0xa4
 800f062:	4a43      	ldr	r2, [pc, #268]	; (800f170 <problem_fetch+0xdb0c>)
 800f064:	461c      	mov	r4, r3
 800f066:	4613      	mov	r3, r2
 800f068:	cb07      	ldmia	r3!, {r0, r1, r2}
 800f06a:	6020      	str	r0, [r4, #0]
 800f06c:	6061      	str	r1, [r4, #4]
 800f06e:	60a2      	str	r2, [r4, #8]
 800f070:	881b      	ldrh	r3, [r3, #0]
 800f072:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,8,8,11,13,16,18");
 800f074:	687b      	ldr	r3, [r7, #4]
 800f076:	3304      	adds	r3, #4
 800f078:	4a3e      	ldr	r2, [pc, #248]	; (800f174 <problem_fetch+0xdb10>)
 800f07a:	461d      	mov	r5, r3
 800f07c:	4614      	mov	r4, r2
 800f07e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800f080:	6028      	str	r0, [r5, #0]
 800f082:	6069      	str	r1, [r5, #4]
 800f084:	60aa      	str	r2, [r5, #8]
 800f086:	60eb      	str	r3, [r5, #12]
 800f088:	8823      	ldrh	r3, [r4, #0]
 800f08a:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 800f08c:	687b      	ldr	r3, [r7, #4]
 800f08e:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800f092:	4a2f      	ldr	r2, [pc, #188]	; (800f150 <problem_fetch+0xdaec>)
 800f094:	461c      	mov	r4, r3
 800f096:	4613      	mov	r3, r2
 800f098:	cb07      	ldmia	r3!, {r0, r1, r2}
 800f09a:	6020      	str	r0, [r4, #0]
 800f09c:	6061      	str	r1, [r4, #4]
 800f09e:	60a2      	str	r2, [r4, #8]
 800f0a0:	881b      	ldrh	r3, [r3, #0]
 800f0a2:	81a3      	strh	r3, [r4, #12]
			break;
 800f0a4:	f00d ba0e 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 398 :
			strcpy(p->name,"TURKMENISTAN");
 800f0a8:	687b      	ldr	r3, [r7, #4]
 800f0aa:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800f0ae:	4a32      	ldr	r2, [pc, #200]	; (800f178 <problem_fetch+0xdb14>)
 800f0b0:	461c      	mov	r4, r3
 800f0b2:	4613      	mov	r3, r2
 800f0b4:	cb07      	ldmia	r3!, {r0, r1, r2}
 800f0b6:	6020      	str	r0, [r4, #0]
 800f0b8:	6061      	str	r1, [r4, #4]
 800f0ba:	60a2      	str	r2, [r4, #8]
 800f0bc:	781b      	ldrb	r3, [r3, #0]
 800f0be:	7323      	strb	r3, [r4, #12]
			strcpy(p->grade,"6B+");
 800f0c0:	687b      	ldr	r3, [r7, #4]
 800f0c2:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800f0c6:	4a29      	ldr	r2, [pc, #164]	; (800f16c <problem_fetch+0xdb08>)
 800f0c8:	6810      	ldr	r0, [r2, #0]
 800f0ca:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 800f0cc:	687b      	ldr	r3, [r7, #4]
 800f0ce:	2207      	movs	r2, #7
 800f0d0:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,E,I,J,E,H,D");
 800f0d2:	687b      	ldr	r3, [r7, #4]
 800f0d4:	33a4      	adds	r3, #164	; 0xa4
 800f0d6:	4a29      	ldr	r2, [pc, #164]	; (800f17c <problem_fetch+0xdb18>)
 800f0d8:	461c      	mov	r4, r3
 800f0da:	4613      	mov	r3, r2
 800f0dc:	cb07      	ldmia	r3!, {r0, r1, r2}
 800f0de:	6020      	str	r0, [r4, #0]
 800f0e0:	6061      	str	r1, [r4, #4]
 800f0e2:	60a2      	str	r2, [r4, #8]
 800f0e4:	881b      	ldrh	r3, [r3, #0]
 800f0e6:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,8,10,7,12,16,18");
 800f0e8:	687b      	ldr	r3, [r7, #4]
 800f0ea:	3304      	adds	r3, #4
 800f0ec:	4a24      	ldr	r2, [pc, #144]	; (800f180 <problem_fetch+0xdb1c>)
 800f0ee:	461d      	mov	r5, r3
 800f0f0:	4614      	mov	r4, r2
 800f0f2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800f0f4:	6028      	str	r0, [r5, #0]
 800f0f6:	6069      	str	r1, [r5, #4]
 800f0f8:	60aa      	str	r2, [r5, #8]
 800f0fa:	60eb      	str	r3, [r5, #12]
 800f0fc:	8823      	ldrh	r3, [r4, #0]
 800f0fe:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 800f100:	687b      	ldr	r3, [r7, #4]
 800f102:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800f106:	4a12      	ldr	r2, [pc, #72]	; (800f150 <problem_fetch+0xdaec>)
 800f108:	461c      	mov	r4, r3
 800f10a:	4613      	mov	r3, r2
 800f10c:	cb07      	ldmia	r3!, {r0, r1, r2}
 800f10e:	6020      	str	r0, [r4, #0]
 800f110:	6061      	str	r1, [r4, #4]
 800f112:	60a2      	str	r2, [r4, #8]
 800f114:	881b      	ldrh	r3, [r3, #0]
 800f116:	81a3      	strh	r3, [r4, #12]
			break;
 800f118:	f00d b9d4 	b.w	801c4c4 <problem_fetch+0x1ae60>
 800f11c:	08028788 	.word	0x08028788
 800f120:	08023bf0 	.word	0x08023bf0
 800f124:	08028794 	.word	0x08028794
 800f128:	080287a0 	.word	0x080287a0
 800f12c:	08023ec0 	.word	0x08023ec0
 800f130:	080287b0 	.word	0x080287b0
 800f134:	080287c4 	.word	0x080287c4
 800f138:	080287d4 	.word	0x080287d4
 800f13c:	08023d34 	.word	0x08023d34
 800f140:	080287ec 	.word	0x080287ec
 800f144:	08023bbc 	.word	0x08023bbc
 800f148:	080287fc 	.word	0x080287fc
 800f14c:	0802880c 	.word	0x0802880c
 800f150:	08023cac 	.word	0x08023cac
 800f154:	08028820 	.word	0x08028820
 800f158:	08023cc4 	.word	0x08023cc4
 800f15c:	0802882c 	.word	0x0802882c
 800f160:	0802883c 	.word	0x0802883c
 800f164:	08023c48 	.word	0x08023c48
 800f168:	08028850 	.word	0x08028850
 800f16c:	08023b24 	.word	0x08023b24
 800f170:	0802885c 	.word	0x0802885c
 800f174:	0802886c 	.word	0x0802886c
 800f178:	08028880 	.word	0x08028880
 800f17c:	08028890 	.word	0x08028890
 800f180:	080288a0 	.word	0x080288a0
		case 399 :
			strcpy(p->name,"MAIDENATOR2");
 800f184:	687b      	ldr	r3, [r7, #4]
 800f186:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800f18a:	4aad      	ldr	r2, [pc, #692]	; (800f440 <problem_fetch+0xdddc>)
 800f18c:	461c      	mov	r4, r3
 800f18e:	4613      	mov	r3, r2
 800f190:	cb07      	ldmia	r3!, {r0, r1, r2}
 800f192:	6020      	str	r0, [r4, #0]
 800f194:	6061      	str	r1, [r4, #4]
 800f196:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade,"6C");
 800f198:	687b      	ldr	r3, [r7, #4]
 800f19a:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800f19e:	4aa9      	ldr	r2, [pc, #676]	; (800f444 <problem_fetch+0xdde0>)
 800f1a0:	8811      	ldrh	r1, [r2, #0]
 800f1a2:	7892      	ldrb	r2, [r2, #2]
 800f1a4:	8019      	strh	r1, [r3, #0]
 800f1a6:	709a      	strb	r2, [r3, #2]
			p->moveSize = 9;
 800f1a8:	687b      	ldr	r3, [r7, #4]
 800f1aa:	2209      	movs	r2, #9
 800f1ac:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,C,C,H,C,F,A,B,A");
 800f1ae:	687b      	ldr	r3, [r7, #4]
 800f1b0:	33a4      	adds	r3, #164	; 0xa4
 800f1b2:	4aa5      	ldr	r2, [pc, #660]	; (800f448 <problem_fetch+0xdde4>)
 800f1b4:	461d      	mov	r5, r3
 800f1b6:	4614      	mov	r4, r2
 800f1b8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800f1ba:	6028      	str	r0, [r5, #0]
 800f1bc:	6069      	str	r1, [r5, #4]
 800f1be:	60aa      	str	r2, [r5, #8]
 800f1c0:	60eb      	str	r3, [r5, #12]
 800f1c2:	8823      	ldrh	r3, [r4, #0]
 800f1c4:	822b      	strh	r3, [r5, #16]
			strcpy(p->moveNumbers,"4,5,8,8,13,11,14,15,18");
 800f1c6:	687b      	ldr	r3, [r7, #4]
 800f1c8:	3304      	adds	r3, #4
 800f1ca:	4aa0      	ldr	r2, [pc, #640]	; (800f44c <problem_fetch+0xdde8>)
 800f1cc:	461c      	mov	r4, r3
 800f1ce:	4615      	mov	r5, r2
 800f1d0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f1d2:	6020      	str	r0, [r4, #0]
 800f1d4:	6061      	str	r1, [r4, #4]
 800f1d6:	60a2      	str	r2, [r4, #8]
 800f1d8:	60e3      	str	r3, [r4, #12]
 800f1da:	6828      	ldr	r0, [r5, #0]
 800f1dc:	6120      	str	r0, [r4, #16]
 800f1de:	88ab      	ldrh	r3, [r5, #4]
 800f1e0:	79aa      	ldrb	r2, [r5, #6]
 800f1e2:	82a3      	strh	r3, [r4, #20]
 800f1e4:	4613      	mov	r3, r2
 800f1e6:	75a3      	strb	r3, [r4, #22]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,d,e");
 800f1e8:	687b      	ldr	r3, [r7, #4]
 800f1ea:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800f1ee:	4a98      	ldr	r2, [pc, #608]	; (800f450 <problem_fetch+0xddec>)
 800f1f0:	461d      	mov	r5, r3
 800f1f2:	4614      	mov	r4, r2
 800f1f4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800f1f6:	6028      	str	r0, [r5, #0]
 800f1f8:	6069      	str	r1, [r5, #4]
 800f1fa:	60aa      	str	r2, [r5, #8]
 800f1fc:	60eb      	str	r3, [r5, #12]
 800f1fe:	8823      	ldrh	r3, [r4, #0]
 800f200:	822b      	strh	r3, [r5, #16]
			break;
 800f202:	f00d b95f 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 400 :
			strcpy(p->name,"CHALK DUST");
 800f206:	687b      	ldr	r3, [r7, #4]
 800f208:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800f20c:	4991      	ldr	r1, [pc, #580]	; (800f454 <problem_fetch+0xddf0>)
 800f20e:	461a      	mov	r2, r3
 800f210:	460b      	mov	r3, r1
 800f212:	cb03      	ldmia	r3!, {r0, r1}
 800f214:	6010      	str	r0, [r2, #0]
 800f216:	6051      	str	r1, [r2, #4]
 800f218:	8819      	ldrh	r1, [r3, #0]
 800f21a:	789b      	ldrb	r3, [r3, #2]
 800f21c:	8111      	strh	r1, [r2, #8]
 800f21e:	7293      	strb	r3, [r2, #10]
			strcpy(p->grade,"6B+");
 800f220:	687b      	ldr	r3, [r7, #4]
 800f222:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800f226:	4a8c      	ldr	r2, [pc, #560]	; (800f458 <problem_fetch+0xddf4>)
 800f228:	6810      	ldr	r0, [r2, #0]
 800f22a:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 800f22c:	687b      	ldr	r3, [r7, #4]
 800f22e:	2207      	movs	r2, #7
 800f230:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"C,B,E,B,E,E,I");
 800f232:	687b      	ldr	r3, [r7, #4]
 800f234:	33a4      	adds	r3, #164	; 0xa4
 800f236:	4a89      	ldr	r2, [pc, #548]	; (800f45c <problem_fetch+0xddf8>)
 800f238:	461c      	mov	r4, r3
 800f23a:	4613      	mov	r3, r2
 800f23c:	cb07      	ldmia	r3!, {r0, r1, r2}
 800f23e:	6020      	str	r0, [r4, #0]
 800f240:	6061      	str	r1, [r4, #4]
 800f242:	60a2      	str	r2, [r4, #8]
 800f244:	881b      	ldrh	r3, [r3, #0]
 800f246:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,6,8,10,12,16,18");
 800f248:	687b      	ldr	r3, [r7, #4]
 800f24a:	3304      	adds	r3, #4
 800f24c:	4a84      	ldr	r2, [pc, #528]	; (800f460 <problem_fetch+0xddfc>)
 800f24e:	461d      	mov	r5, r3
 800f250:	4614      	mov	r4, r2
 800f252:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800f254:	6028      	str	r0, [r5, #0]
 800f256:	6069      	str	r1, [r5, #4]
 800f258:	60aa      	str	r2, [r5, #8]
 800f25a:	60eb      	str	r3, [r5, #12]
 800f25c:	8823      	ldrh	r3, [r4, #0]
 800f25e:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,s,d,d,d,d,e");
 800f260:	687b      	ldr	r3, [r7, #4]
 800f262:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800f266:	4a7f      	ldr	r2, [pc, #508]	; (800f464 <problem_fetch+0xde00>)
 800f268:	461c      	mov	r4, r3
 800f26a:	4613      	mov	r3, r2
 800f26c:	cb07      	ldmia	r3!, {r0, r1, r2}
 800f26e:	6020      	str	r0, [r4, #0]
 800f270:	6061      	str	r1, [r4, #4]
 800f272:	60a2      	str	r2, [r4, #8]
 800f274:	881b      	ldrh	r3, [r3, #0]
 800f276:	81a3      	strh	r3, [r4, #12]
			break;
 800f278:	f00d b924 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 401 :
			strcpy(p->name,"LAPPNOR");
 800f27c:	687b      	ldr	r3, [r7, #4]
 800f27e:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800f282:	4979      	ldr	r1, [pc, #484]	; (800f468 <problem_fetch+0xde04>)
 800f284:	461a      	mov	r2, r3
 800f286:	460b      	mov	r3, r1
 800f288:	cb03      	ldmia	r3!, {r0, r1}
 800f28a:	6010      	str	r0, [r2, #0]
 800f28c:	6051      	str	r1, [r2, #4]
			strcpy(p->grade,"7A");
 800f28e:	687b      	ldr	r3, [r7, #4]
 800f290:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800f294:	4a75      	ldr	r2, [pc, #468]	; (800f46c <problem_fetch+0xde08>)
 800f296:	8811      	ldrh	r1, [r2, #0]
 800f298:	7892      	ldrb	r2, [r2, #2]
 800f29a:	8019      	strh	r1, [r3, #0]
 800f29c:	709a      	strb	r2, [r3, #2]
			p->moveSize = 7;
 800f29e:	687b      	ldr	r3, [r7, #4]
 800f2a0:	2207      	movs	r2, #7
 800f2a2:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,E,I,H,J,G,I");
 800f2a4:	687b      	ldr	r3, [r7, #4]
 800f2a6:	33a4      	adds	r3, #164	; 0xa4
 800f2a8:	4a71      	ldr	r2, [pc, #452]	; (800f470 <problem_fetch+0xde0c>)
 800f2aa:	461c      	mov	r4, r3
 800f2ac:	4613      	mov	r3, r2
 800f2ae:	cb07      	ldmia	r3!, {r0, r1, r2}
 800f2b0:	6020      	str	r0, [r4, #0]
 800f2b2:	6061      	str	r1, [r4, #4]
 800f2b4:	60a2      	str	r2, [r4, #8]
 800f2b6:	881b      	ldrh	r3, [r3, #0]
 800f2b8:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,8,9,12,12,15,18");
 800f2ba:	687b      	ldr	r3, [r7, #4]
 800f2bc:	3304      	adds	r3, #4
 800f2be:	4a6d      	ldr	r2, [pc, #436]	; (800f474 <problem_fetch+0xde10>)
 800f2c0:	461d      	mov	r5, r3
 800f2c2:	4614      	mov	r4, r2
 800f2c4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800f2c6:	6028      	str	r0, [r5, #0]
 800f2c8:	6069      	str	r1, [r5, #4]
 800f2ca:	60aa      	str	r2, [r5, #8]
 800f2cc:	60eb      	str	r3, [r5, #12]
 800f2ce:	8823      	ldrh	r3, [r4, #0]
 800f2d0:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 800f2d2:	687b      	ldr	r3, [r7, #4]
 800f2d4:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800f2d8:	4a67      	ldr	r2, [pc, #412]	; (800f478 <problem_fetch+0xde14>)
 800f2da:	461c      	mov	r4, r3
 800f2dc:	4613      	mov	r3, r2
 800f2de:	cb07      	ldmia	r3!, {r0, r1, r2}
 800f2e0:	6020      	str	r0, [r4, #0]
 800f2e2:	6061      	str	r1, [r4, #4]
 800f2e4:	60a2      	str	r2, [r4, #8]
 800f2e6:	881b      	ldrh	r3, [r3, #0]
 800f2e8:	81a3      	strh	r3, [r4, #12]
			break;
 800f2ea:	f00d b8eb 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 402 :
			strcpy(p->name,"CHAMONIX BAD DAY");
 800f2ee:	687b      	ldr	r3, [r7, #4]
 800f2f0:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800f2f4:	4a61      	ldr	r2, [pc, #388]	; (800f47c <problem_fetch+0xde18>)
 800f2f6:	461d      	mov	r5, r3
 800f2f8:	4614      	mov	r4, r2
 800f2fa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800f2fc:	6028      	str	r0, [r5, #0]
 800f2fe:	6069      	str	r1, [r5, #4]
 800f300:	60aa      	str	r2, [r5, #8]
 800f302:	60eb      	str	r3, [r5, #12]
 800f304:	7823      	ldrb	r3, [r4, #0]
 800f306:	742b      	strb	r3, [r5, #16]
			strcpy(p->grade,"6C");
 800f308:	687b      	ldr	r3, [r7, #4]
 800f30a:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800f30e:	4a4d      	ldr	r2, [pc, #308]	; (800f444 <problem_fetch+0xdde0>)
 800f310:	8811      	ldrh	r1, [r2, #0]
 800f312:	7892      	ldrb	r2, [r2, #2]
 800f314:	8019      	strh	r1, [r3, #0]
 800f316:	709a      	strb	r2, [r3, #2]
			p->moveSize = 6;
 800f318:	687b      	ldr	r3, [r7, #4]
 800f31a:	2206      	movs	r2, #6
 800f31c:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,H,E,E,A,D");
 800f31e:	687b      	ldr	r3, [r7, #4]
 800f320:	33a4      	adds	r3, #164	; 0xa4
 800f322:	4a57      	ldr	r2, [pc, #348]	; (800f480 <problem_fetch+0xde1c>)
 800f324:	461c      	mov	r4, r3
 800f326:	4613      	mov	r3, r2
 800f328:	cb07      	ldmia	r3!, {r0, r1, r2}
 800f32a:	6020      	str	r0, [r4, #0]
 800f32c:	6061      	str	r1, [r4, #4]
 800f32e:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,8,8,12,14,18");
 800f330:	687b      	ldr	r3, [r7, #4]
 800f332:	3304      	adds	r3, #4
 800f334:	4a53      	ldr	r2, [pc, #332]	; (800f484 <problem_fetch+0xde20>)
 800f336:	461c      	mov	r4, r3
 800f338:	4613      	mov	r3, r2
 800f33a:	cb07      	ldmia	r3!, {r0, r1, r2}
 800f33c:	6020      	str	r0, [r4, #0]
 800f33e:	6061      	str	r1, [r4, #4]
 800f340:	60a2      	str	r2, [r4, #8]
 800f342:	881a      	ldrh	r2, [r3, #0]
 800f344:	789b      	ldrb	r3, [r3, #2]
 800f346:	81a2      	strh	r2, [r4, #12]
 800f348:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 800f34a:	687b      	ldr	r3, [r7, #4]
 800f34c:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800f350:	4a4d      	ldr	r2, [pc, #308]	; (800f488 <problem_fetch+0xde24>)
 800f352:	461c      	mov	r4, r3
 800f354:	4613      	mov	r3, r2
 800f356:	cb07      	ldmia	r3!, {r0, r1, r2}
 800f358:	6020      	str	r0, [r4, #0]
 800f35a:	6061      	str	r1, [r4, #4]
 800f35c:	60a2      	str	r2, [r4, #8]
			break;
 800f35e:	f00d b8b1 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 403 :
			strcpy(p->name,"CHARGER");
 800f362:	687b      	ldr	r3, [r7, #4]
 800f364:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800f368:	4948      	ldr	r1, [pc, #288]	; (800f48c <problem_fetch+0xde28>)
 800f36a:	461a      	mov	r2, r3
 800f36c:	460b      	mov	r3, r1
 800f36e:	cb03      	ldmia	r3!, {r0, r1}
 800f370:	6010      	str	r0, [r2, #0]
 800f372:	6051      	str	r1, [r2, #4]
			strcpy(p->grade,"6C");
 800f374:	687b      	ldr	r3, [r7, #4]
 800f376:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800f37a:	4a32      	ldr	r2, [pc, #200]	; (800f444 <problem_fetch+0xdde0>)
 800f37c:	8811      	ldrh	r1, [r2, #0]
 800f37e:	7892      	ldrb	r2, [r2, #2]
 800f380:	8019      	strh	r1, [r3, #0]
 800f382:	709a      	strb	r2, [r3, #2]
			p->moveSize = 6;
 800f384:	687b      	ldr	r3, [r7, #4]
 800f386:	2206      	movs	r2, #6
 800f388:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,I,E,E,B,D");
 800f38a:	687b      	ldr	r3, [r7, #4]
 800f38c:	33a4      	adds	r3, #164	; 0xa4
 800f38e:	4a40      	ldr	r2, [pc, #256]	; (800f490 <problem_fetch+0xde2c>)
 800f390:	461c      	mov	r4, r3
 800f392:	4613      	mov	r3, r2
 800f394:	cb07      	ldmia	r3!, {r0, r1, r2}
 800f396:	6020      	str	r0, [r4, #0]
 800f398:	6061      	str	r1, [r4, #4]
 800f39a:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,7,8,12,15,18");
 800f39c:	687b      	ldr	r3, [r7, #4]
 800f39e:	3304      	adds	r3, #4
 800f3a0:	4a3c      	ldr	r2, [pc, #240]	; (800f494 <problem_fetch+0xde30>)
 800f3a2:	461c      	mov	r4, r3
 800f3a4:	4613      	mov	r3, r2
 800f3a6:	cb07      	ldmia	r3!, {r0, r1, r2}
 800f3a8:	6020      	str	r0, [r4, #0]
 800f3aa:	6061      	str	r1, [r4, #4]
 800f3ac:	60a2      	str	r2, [r4, #8]
 800f3ae:	881a      	ldrh	r2, [r3, #0]
 800f3b0:	789b      	ldrb	r3, [r3, #2]
 800f3b2:	81a2      	strh	r2, [r4, #12]
 800f3b4:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 800f3b6:	687b      	ldr	r3, [r7, #4]
 800f3b8:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800f3bc:	4a32      	ldr	r2, [pc, #200]	; (800f488 <problem_fetch+0xde24>)
 800f3be:	461c      	mov	r4, r3
 800f3c0:	4613      	mov	r3, r2
 800f3c2:	cb07      	ldmia	r3!, {r0, r1, r2}
 800f3c4:	6020      	str	r0, [r4, #0]
 800f3c6:	6061      	str	r1, [r4, #4]
 800f3c8:	60a2      	str	r2, [r4, #8]
			break;
 800f3ca:	f00d b87b 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 404 :
			strcpy(p->name,"(S)ENDING");
 800f3ce:	687b      	ldr	r3, [r7, #4]
 800f3d0:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800f3d4:	4930      	ldr	r1, [pc, #192]	; (800f498 <problem_fetch+0xde34>)
 800f3d6:	461a      	mov	r2, r3
 800f3d8:	460b      	mov	r3, r1
 800f3da:	cb03      	ldmia	r3!, {r0, r1}
 800f3dc:	6010      	str	r0, [r2, #0]
 800f3de:	6051      	str	r1, [r2, #4]
 800f3e0:	881b      	ldrh	r3, [r3, #0]
 800f3e2:	8113      	strh	r3, [r2, #8]
			strcpy(p->grade,"7A+");
 800f3e4:	687b      	ldr	r3, [r7, #4]
 800f3e6:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800f3ea:	4a2c      	ldr	r2, [pc, #176]	; (800f49c <problem_fetch+0xde38>)
 800f3ec:	6810      	ldr	r0, [r2, #0]
 800f3ee:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 800f3f0:	687b      	ldr	r3, [r7, #4]
 800f3f2:	2207      	movs	r2, #7
 800f3f4:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"H,I,E,J,G,G,D");
 800f3f6:	687b      	ldr	r3, [r7, #4]
 800f3f8:	33a4      	adds	r3, #164	; 0xa4
 800f3fa:	4a29      	ldr	r2, [pc, #164]	; (800f4a0 <problem_fetch+0xde3c>)
 800f3fc:	461c      	mov	r4, r3
 800f3fe:	4613      	mov	r3, r2
 800f400:	cb07      	ldmia	r3!, {r0, r1, r2}
 800f402:	6020      	str	r0, [r4, #0]
 800f404:	6061      	str	r1, [r4, #4]
 800f406:	60a2      	str	r2, [r4, #8]
 800f408:	881b      	ldrh	r3, [r3, #0]
 800f40a:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,7,9,12,15,17,18");
 800f40c:	687b      	ldr	r3, [r7, #4]
 800f40e:	3304      	adds	r3, #4
 800f410:	4a24      	ldr	r2, [pc, #144]	; (800f4a4 <problem_fetch+0xde40>)
 800f412:	461d      	mov	r5, r3
 800f414:	4614      	mov	r4, r2
 800f416:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800f418:	6028      	str	r0, [r5, #0]
 800f41a:	6069      	str	r1, [r5, #4]
 800f41c:	60aa      	str	r2, [r5, #8]
 800f41e:	60eb      	str	r3, [r5, #12]
 800f420:	8823      	ldrh	r3, [r4, #0]
 800f422:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 800f424:	687b      	ldr	r3, [r7, #4]
 800f426:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800f42a:	4a13      	ldr	r2, [pc, #76]	; (800f478 <problem_fetch+0xde14>)
 800f42c:	461c      	mov	r4, r3
 800f42e:	4613      	mov	r3, r2
 800f430:	cb07      	ldmia	r3!, {r0, r1, r2}
 800f432:	6020      	str	r0, [r4, #0]
 800f434:	6061      	str	r1, [r4, #4]
 800f436:	60a2      	str	r2, [r4, #8]
 800f438:	881b      	ldrh	r3, [r3, #0]
 800f43a:	81a3      	strh	r3, [r4, #12]
			break;
 800f43c:	f00d b842 	b.w	801c4c4 <problem_fetch+0x1ae60>
 800f440:	080288b4 	.word	0x080288b4
 800f444:	08023bf0 	.word	0x08023bf0
 800f448:	080288c0 	.word	0x080288c0
 800f44c:	080288d4 	.word	0x080288d4
 800f450:	08024b08 	.word	0x08024b08
 800f454:	080288ec 	.word	0x080288ec
 800f458:	08023b24 	.word	0x08023b24
 800f45c:	080288f8 	.word	0x080288f8
 800f460:	080267c4 	.word	0x080267c4
 800f464:	08023b9c 	.word	0x08023b9c
 800f468:	08028908 	.word	0x08028908
 800f46c:	08023ae4 	.word	0x08023ae4
 800f470:	08028910 	.word	0x08028910
 800f474:	08028920 	.word	0x08028920
 800f478:	08023cac 	.word	0x08023cac
 800f47c:	08028934 	.word	0x08028934
 800f480:	080246a8 	.word	0x080246a8
 800f484:	08028948 	.word	0x08028948
 800f488:	08023ec0 	.word	0x08023ec0
 800f48c:	08028958 	.word	0x08028958
 800f490:	08028960 	.word	0x08028960
 800f494:	0802896c 	.word	0x0802896c
 800f498:	0802897c 	.word	0x0802897c
 800f49c:	08023cc4 	.word	0x08023cc4
 800f4a0:	08028988 	.word	0x08028988
 800f4a4:	08028998 	.word	0x08028998
		case 405 :
			strcpy(p->name,"WEEL OF WOLVO");
 800f4a8:	687b      	ldr	r3, [r7, #4]
 800f4aa:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800f4ae:	4aa8      	ldr	r2, [pc, #672]	; (800f750 <problem_fetch+0xe0ec>)
 800f4b0:	461c      	mov	r4, r3
 800f4b2:	4613      	mov	r3, r2
 800f4b4:	cb07      	ldmia	r3!, {r0, r1, r2}
 800f4b6:	6020      	str	r0, [r4, #0]
 800f4b8:	6061      	str	r1, [r4, #4]
 800f4ba:	60a2      	str	r2, [r4, #8]
 800f4bc:	881b      	ldrh	r3, [r3, #0]
 800f4be:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade,"7B");
 800f4c0:	687b      	ldr	r3, [r7, #4]
 800f4c2:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800f4c6:	4aa3      	ldr	r2, [pc, #652]	; (800f754 <problem_fetch+0xe0f0>)
 800f4c8:	8811      	ldrh	r1, [r2, #0]
 800f4ca:	7892      	ldrb	r2, [r2, #2]
 800f4cc:	8019      	strh	r1, [r3, #0]
 800f4ce:	709a      	strb	r2, [r3, #2]
			p->moveSize = 7;
 800f4d0:	687b      	ldr	r3, [r7, #4]
 800f4d2:	2207      	movs	r2, #7
 800f4d4:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"C,E,H,F,H,G,I");
 800f4d6:	687b      	ldr	r3, [r7, #4]
 800f4d8:	33a4      	adds	r3, #164	; 0xa4
 800f4da:	4a9f      	ldr	r2, [pc, #636]	; (800f758 <problem_fetch+0xe0f4>)
 800f4dc:	461c      	mov	r4, r3
 800f4de:	4613      	mov	r3, r2
 800f4e0:	cb07      	ldmia	r3!, {r0, r1, r2}
 800f4e2:	6020      	str	r0, [r4, #0]
 800f4e4:	6061      	str	r1, [r4, #4]
 800f4e6:	60a2      	str	r2, [r4, #8]
 800f4e8:	881b      	ldrh	r3, [r3, #0]
 800f4ea:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,9,5,11,12,15,18");
 800f4ec:	687b      	ldr	r3, [r7, #4]
 800f4ee:	3304      	adds	r3, #4
 800f4f0:	4a9a      	ldr	r2, [pc, #616]	; (800f75c <problem_fetch+0xe0f8>)
 800f4f2:	461d      	mov	r5, r3
 800f4f4:	4614      	mov	r4, r2
 800f4f6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800f4f8:	6028      	str	r0, [r5, #0]
 800f4fa:	6069      	str	r1, [r5, #4]
 800f4fc:	60aa      	str	r2, [r5, #8]
 800f4fe:	60eb      	str	r3, [r5, #12]
 800f500:	8823      	ldrh	r3, [r4, #0]
 800f502:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 800f504:	687b      	ldr	r3, [r7, #4]
 800f506:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800f50a:	4a95      	ldr	r2, [pc, #596]	; (800f760 <problem_fetch+0xe0fc>)
 800f50c:	461c      	mov	r4, r3
 800f50e:	4613      	mov	r3, r2
 800f510:	cb07      	ldmia	r3!, {r0, r1, r2}
 800f512:	6020      	str	r0, [r4, #0]
 800f514:	6061      	str	r1, [r4, #4]
 800f516:	60a2      	str	r2, [r4, #8]
 800f518:	881b      	ldrh	r3, [r3, #0]
 800f51a:	81a3      	strh	r3, [r4, #12]
			break;
 800f51c:	f00c bfd2 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 406 :
			strcpy(p->name,"IMPACT");
 800f520:	687b      	ldr	r3, [r7, #4]
 800f522:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800f526:	4a8f      	ldr	r2, [pc, #572]	; (800f764 <problem_fetch+0xe100>)
 800f528:	6810      	ldr	r0, [r2, #0]
 800f52a:	6018      	str	r0, [r3, #0]
 800f52c:	8891      	ldrh	r1, [r2, #4]
 800f52e:	7992      	ldrb	r2, [r2, #6]
 800f530:	8099      	strh	r1, [r3, #4]
 800f532:	719a      	strb	r2, [r3, #6]
			strcpy(p->grade,"6B+");
 800f534:	687b      	ldr	r3, [r7, #4]
 800f536:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800f53a:	4a8b      	ldr	r2, [pc, #556]	; (800f768 <problem_fetch+0xe104>)
 800f53c:	6810      	ldr	r0, [r2, #0]
 800f53e:	6018      	str	r0, [r3, #0]
			p->moveSize = 8;
 800f540:	687b      	ldr	r3, [r7, #4]
 800f542:	2208      	movs	r2, #8
 800f544:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,H,E,J,E,B,E,D");
 800f546:	687b      	ldr	r3, [r7, #4]
 800f548:	33a4      	adds	r3, #164	; 0xa4
 800f54a:	4a88      	ldr	r2, [pc, #544]	; (800f76c <problem_fetch+0xe108>)
 800f54c:	461c      	mov	r4, r3
 800f54e:	4615      	mov	r5, r2
 800f550:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f552:	6020      	str	r0, [r4, #0]
 800f554:	6061      	str	r1, [r4, #4]
 800f556:	60a2      	str	r2, [r4, #8]
 800f558:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,8,8,7,12,15,14,18");
 800f55a:	687b      	ldr	r3, [r7, #4]
 800f55c:	3304      	adds	r3, #4
 800f55e:	4a84      	ldr	r2, [pc, #528]	; (800f770 <problem_fetch+0xe10c>)
 800f560:	461d      	mov	r5, r3
 800f562:	4614      	mov	r4, r2
 800f564:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800f566:	6028      	str	r0, [r5, #0]
 800f568:	6069      	str	r1, [r5, #4]
 800f56a:	60aa      	str	r2, [r5, #8]
 800f56c:	60eb      	str	r3, [r5, #12]
 800f56e:	6820      	ldr	r0, [r4, #0]
 800f570:	6128      	str	r0, [r5, #16]
			strcpy(p->startFinish,"s,d,d,d,d,d,d,e");
 800f572:	687b      	ldr	r3, [r7, #4]
 800f574:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800f578:	4a7e      	ldr	r2, [pc, #504]	; (800f774 <problem_fetch+0xe110>)
 800f57a:	461c      	mov	r4, r3
 800f57c:	4615      	mov	r5, r2
 800f57e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f580:	6020      	str	r0, [r4, #0]
 800f582:	6061      	str	r1, [r4, #4]
 800f584:	60a2      	str	r2, [r4, #8]
 800f586:	60e3      	str	r3, [r4, #12]
			break;
 800f588:	f00c bf9c 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 407 :
			strcpy(p->name,"HUBBLE");
 800f58c:	687b      	ldr	r3, [r7, #4]
 800f58e:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800f592:	4a79      	ldr	r2, [pc, #484]	; (800f778 <problem_fetch+0xe114>)
 800f594:	6810      	ldr	r0, [r2, #0]
 800f596:	6018      	str	r0, [r3, #0]
 800f598:	8891      	ldrh	r1, [r2, #4]
 800f59a:	7992      	ldrb	r2, [r2, #6]
 800f59c:	8099      	strh	r1, [r3, #4]
 800f59e:	719a      	strb	r2, [r3, #6]
			strcpy(p->grade,"7A+");
 800f5a0:	687b      	ldr	r3, [r7, #4]
 800f5a2:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800f5a6:	4a75      	ldr	r2, [pc, #468]	; (800f77c <problem_fetch+0xe118>)
 800f5a8:	6810      	ldr	r0, [r2, #0]
 800f5aa:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 800f5ac:	687b      	ldr	r3, [r7, #4]
 800f5ae:	2206      	movs	r2, #6
 800f5b0:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,G,I,H,K,I");
 800f5b2:	687b      	ldr	r3, [r7, #4]
 800f5b4:	33a4      	adds	r3, #164	; 0xa4
 800f5b6:	4a72      	ldr	r2, [pc, #456]	; (800f780 <problem_fetch+0xe11c>)
 800f5b8:	461c      	mov	r4, r3
 800f5ba:	4613      	mov	r3, r2
 800f5bc:	cb07      	ldmia	r3!, {r0, r1, r2}
 800f5be:	6020      	str	r0, [r4, #0]
 800f5c0:	6061      	str	r1, [r4, #4]
 800f5c2:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,6,9,12,14,18");
 800f5c4:	687b      	ldr	r3, [r7, #4]
 800f5c6:	3304      	adds	r3, #4
 800f5c8:	4a6e      	ldr	r2, [pc, #440]	; (800f784 <problem_fetch+0xe120>)
 800f5ca:	461c      	mov	r4, r3
 800f5cc:	4613      	mov	r3, r2
 800f5ce:	cb07      	ldmia	r3!, {r0, r1, r2}
 800f5d0:	6020      	str	r0, [r4, #0]
 800f5d2:	6061      	str	r1, [r4, #4]
 800f5d4:	60a2      	str	r2, [r4, #8]
 800f5d6:	881a      	ldrh	r2, [r3, #0]
 800f5d8:	789b      	ldrb	r3, [r3, #2]
 800f5da:	81a2      	strh	r2, [r4, #12]
 800f5dc:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish,"s,s,d,d,d,e");
 800f5de:	687b      	ldr	r3, [r7, #4]
 800f5e0:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800f5e4:	4a68      	ldr	r2, [pc, #416]	; (800f788 <problem_fetch+0xe124>)
 800f5e6:	461c      	mov	r4, r3
 800f5e8:	4613      	mov	r3, r2
 800f5ea:	cb07      	ldmia	r3!, {r0, r1, r2}
 800f5ec:	6020      	str	r0, [r4, #0]
 800f5ee:	6061      	str	r1, [r4, #4]
 800f5f0:	60a2      	str	r2, [r4, #8]
			break;
 800f5f2:	f00c bf67 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 408 :
			strcpy(p->name,"FREERIDER");
 800f5f6:	687b      	ldr	r3, [r7, #4]
 800f5f8:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800f5fc:	4963      	ldr	r1, [pc, #396]	; (800f78c <problem_fetch+0xe128>)
 800f5fe:	461a      	mov	r2, r3
 800f600:	460b      	mov	r3, r1
 800f602:	cb03      	ldmia	r3!, {r0, r1}
 800f604:	6010      	str	r0, [r2, #0]
 800f606:	6051      	str	r1, [r2, #4]
 800f608:	881b      	ldrh	r3, [r3, #0]
 800f60a:	8113      	strh	r3, [r2, #8]
			strcpy(p->grade,"7A+");
 800f60c:	687b      	ldr	r3, [r7, #4]
 800f60e:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800f612:	4a5a      	ldr	r2, [pc, #360]	; (800f77c <problem_fetch+0xe118>)
 800f614:	6810      	ldr	r0, [r2, #0]
 800f616:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 800f618:	687b      	ldr	r3, [r7, #4]
 800f61a:	2206      	movs	r2, #6
 800f61c:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,E,I,H,H,D");
 800f61e:	687b      	ldr	r3, [r7, #4]
 800f620:	33a4      	adds	r3, #164	; 0xa4
 800f622:	4a5b      	ldr	r2, [pc, #364]	; (800f790 <problem_fetch+0xe12c>)
 800f624:	461c      	mov	r4, r3
 800f626:	4613      	mov	r3, r2
 800f628:	cb07      	ldmia	r3!, {r0, r1, r2}
 800f62a:	6020      	str	r0, [r4, #0]
 800f62c:	6061      	str	r1, [r4, #4]
 800f62e:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,8,9,12,16,18");
 800f630:	687b      	ldr	r3, [r7, #4]
 800f632:	3304      	adds	r3, #4
 800f634:	4a57      	ldr	r2, [pc, #348]	; (800f794 <problem_fetch+0xe130>)
 800f636:	461c      	mov	r4, r3
 800f638:	4613      	mov	r3, r2
 800f63a:	cb07      	ldmia	r3!, {r0, r1, r2}
 800f63c:	6020      	str	r0, [r4, #0]
 800f63e:	6061      	str	r1, [r4, #4]
 800f640:	60a2      	str	r2, [r4, #8]
 800f642:	881a      	ldrh	r2, [r3, #0]
 800f644:	789b      	ldrb	r3, [r3, #2]
 800f646:	81a2      	strh	r2, [r4, #12]
 800f648:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 800f64a:	687b      	ldr	r3, [r7, #4]
 800f64c:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800f650:	4a51      	ldr	r2, [pc, #324]	; (800f798 <problem_fetch+0xe134>)
 800f652:	461c      	mov	r4, r3
 800f654:	4613      	mov	r3, r2
 800f656:	cb07      	ldmia	r3!, {r0, r1, r2}
 800f658:	6020      	str	r0, [r4, #0]
 800f65a:	6061      	str	r1, [r4, #4]
 800f65c:	60a2      	str	r2, [r4, #8]
			break;
 800f65e:	f00c bf31 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 409 :
			strcpy(p->name,"LAST HOPE");
 800f662:	687b      	ldr	r3, [r7, #4]
 800f664:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800f668:	494c      	ldr	r1, [pc, #304]	; (800f79c <problem_fetch+0xe138>)
 800f66a:	461a      	mov	r2, r3
 800f66c:	460b      	mov	r3, r1
 800f66e:	cb03      	ldmia	r3!, {r0, r1}
 800f670:	6010      	str	r0, [r2, #0]
 800f672:	6051      	str	r1, [r2, #4]
 800f674:	881b      	ldrh	r3, [r3, #0]
 800f676:	8113      	strh	r3, [r2, #8]
			strcpy(p->grade,"7A+");
 800f678:	687b      	ldr	r3, [r7, #4]
 800f67a:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800f67e:	4a3f      	ldr	r2, [pc, #252]	; (800f77c <problem_fetch+0xe118>)
 800f680:	6810      	ldr	r0, [r2, #0]
 800f682:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 800f684:	687b      	ldr	r3, [r7, #4]
 800f686:	2206      	movs	r2, #6
 800f688:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,E,I,H,K,I");
 800f68a:	687b      	ldr	r3, [r7, #4]
 800f68c:	33a4      	adds	r3, #164	; 0xa4
 800f68e:	4a44      	ldr	r2, [pc, #272]	; (800f7a0 <problem_fetch+0xe13c>)
 800f690:	461c      	mov	r4, r3
 800f692:	4613      	mov	r3, r2
 800f694:	cb07      	ldmia	r3!, {r0, r1, r2}
 800f696:	6020      	str	r0, [r4, #0]
 800f698:	6061      	str	r1, [r4, #4]
 800f69a:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,8,9,12,14,18");
 800f69c:	687b      	ldr	r3, [r7, #4]
 800f69e:	3304      	adds	r3, #4
 800f6a0:	4a40      	ldr	r2, [pc, #256]	; (800f7a4 <problem_fetch+0xe140>)
 800f6a2:	461c      	mov	r4, r3
 800f6a4:	4613      	mov	r3, r2
 800f6a6:	cb07      	ldmia	r3!, {r0, r1, r2}
 800f6a8:	6020      	str	r0, [r4, #0]
 800f6aa:	6061      	str	r1, [r4, #4]
 800f6ac:	60a2      	str	r2, [r4, #8]
 800f6ae:	881a      	ldrh	r2, [r3, #0]
 800f6b0:	789b      	ldrb	r3, [r3, #2]
 800f6b2:	81a2      	strh	r2, [r4, #12]
 800f6b4:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 800f6b6:	687b      	ldr	r3, [r7, #4]
 800f6b8:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800f6bc:	4a36      	ldr	r2, [pc, #216]	; (800f798 <problem_fetch+0xe134>)
 800f6be:	461c      	mov	r4, r3
 800f6c0:	4613      	mov	r3, r2
 800f6c2:	cb07      	ldmia	r3!, {r0, r1, r2}
 800f6c4:	6020      	str	r0, [r4, #0]
 800f6c6:	6061      	str	r1, [r4, #4]
 800f6c8:	60a2      	str	r2, [r4, #8]
			break;
 800f6ca:	f00c befb 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 410 :
			strcpy(p->name,"RAINING MEANS TRAINING");
 800f6ce:	687b      	ldr	r3, [r7, #4]
 800f6d0:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800f6d4:	4a34      	ldr	r2, [pc, #208]	; (800f7a8 <problem_fetch+0xe144>)
 800f6d6:	461c      	mov	r4, r3
 800f6d8:	4615      	mov	r5, r2
 800f6da:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f6dc:	6020      	str	r0, [r4, #0]
 800f6de:	6061      	str	r1, [r4, #4]
 800f6e0:	60a2      	str	r2, [r4, #8]
 800f6e2:	60e3      	str	r3, [r4, #12]
 800f6e4:	6828      	ldr	r0, [r5, #0]
 800f6e6:	6120      	str	r0, [r4, #16]
 800f6e8:	88ab      	ldrh	r3, [r5, #4]
 800f6ea:	79aa      	ldrb	r2, [r5, #6]
 800f6ec:	82a3      	strh	r3, [r4, #20]
 800f6ee:	4613      	mov	r3, r2
 800f6f0:	75a3      	strb	r3, [r4, #22]
			strcpy(p->grade,"7A+");
 800f6f2:	687b      	ldr	r3, [r7, #4]
 800f6f4:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800f6f8:	4a20      	ldr	r2, [pc, #128]	; (800f77c <problem_fetch+0xe118>)
 800f6fa:	6810      	ldr	r0, [r2, #0]
 800f6fc:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 800f6fe:	687b      	ldr	r3, [r7, #4]
 800f700:	2207      	movs	r2, #7
 800f702:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,E,I,H,H,I,D");
 800f704:	687b      	ldr	r3, [r7, #4]
 800f706:	33a4      	adds	r3, #164	; 0xa4
 800f708:	4a28      	ldr	r2, [pc, #160]	; (800f7ac <problem_fetch+0xe148>)
 800f70a:	461c      	mov	r4, r3
 800f70c:	4613      	mov	r3, r2
 800f70e:	cb07      	ldmia	r3!, {r0, r1, r2}
 800f710:	6020      	str	r0, [r4, #0]
 800f712:	6061      	str	r1, [r4, #4]
 800f714:	60a2      	str	r2, [r4, #8]
 800f716:	881b      	ldrh	r3, [r3, #0]
 800f718:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,9,9,12,16,7,18");
 800f71a:	687b      	ldr	r3, [r7, #4]
 800f71c:	3304      	adds	r3, #4
 800f71e:	4a24      	ldr	r2, [pc, #144]	; (800f7b0 <problem_fetch+0xe14c>)
 800f720:	461d      	mov	r5, r3
 800f722:	4614      	mov	r4, r2
 800f724:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800f726:	6028      	str	r0, [r5, #0]
 800f728:	6069      	str	r1, [r5, #4]
 800f72a:	60aa      	str	r2, [r5, #8]
 800f72c:	60eb      	str	r3, [r5, #12]
 800f72e:	7823      	ldrb	r3, [r4, #0]
 800f730:	742b      	strb	r3, [r5, #16]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 800f732:	687b      	ldr	r3, [r7, #4]
 800f734:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800f738:	4a09      	ldr	r2, [pc, #36]	; (800f760 <problem_fetch+0xe0fc>)
 800f73a:	461c      	mov	r4, r3
 800f73c:	4613      	mov	r3, r2
 800f73e:	cb07      	ldmia	r3!, {r0, r1, r2}
 800f740:	6020      	str	r0, [r4, #0]
 800f742:	6061      	str	r1, [r4, #4]
 800f744:	60a2      	str	r2, [r4, #8]
 800f746:	881b      	ldrh	r3, [r3, #0]
 800f748:	81a3      	strh	r3, [r4, #12]
			break;
 800f74a:	f00c bebb 	b.w	801c4c4 <problem_fetch+0x1ae60>
 800f74e:	bf00      	nop
 800f750:	080289ac 	.word	0x080289ac
 800f754:	0802421c 	.word	0x0802421c
 800f758:	080289bc 	.word	0x080289bc
 800f75c:	080289cc 	.word	0x080289cc
 800f760:	08023cac 	.word	0x08023cac
 800f764:	080289e0 	.word	0x080289e0
 800f768:	08023b24 	.word	0x08023b24
 800f76c:	080289e8 	.word	0x080289e8
 800f770:	080289f8 	.word	0x080289f8
 800f774:	08023d34 	.word	0x08023d34
 800f778:	08028a0c 	.word	0x08028a0c
 800f77c:	08023cc4 	.word	0x08023cc4
 800f780:	08028a14 	.word	0x08028a14
 800f784:	08028a20 	.word	0x08028a20
 800f788:	08023b04 	.word	0x08023b04
 800f78c:	08028a30 	.word	0x08028a30
 800f790:	08028a3c 	.word	0x08028a3c
 800f794:	08028a48 	.word	0x08028a48
 800f798:	08023ec0 	.word	0x08023ec0
 800f79c:	08028a58 	.word	0x08028a58
 800f7a0:	08028a64 	.word	0x08028a64
 800f7a4:	0802404c 	.word	0x0802404c
 800f7a8:	08028a70 	.word	0x08028a70
 800f7ac:	08028a88 	.word	0x08028a88
 800f7b0:	08028a98 	.word	0x08028a98
		case 411 :
			strcpy(p->name,"MADISH");
 800f7b4:	687b      	ldr	r3, [r7, #4]
 800f7b6:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800f7ba:	4ab0      	ldr	r2, [pc, #704]	; (800fa7c <problem_fetch+0xe418>)
 800f7bc:	6810      	ldr	r0, [r2, #0]
 800f7be:	6018      	str	r0, [r3, #0]
 800f7c0:	8891      	ldrh	r1, [r2, #4]
 800f7c2:	7992      	ldrb	r2, [r2, #6]
 800f7c4:	8099      	strh	r1, [r3, #4]
 800f7c6:	719a      	strb	r2, [r3, #6]
			strcpy(p->grade,"6B+");
 800f7c8:	687b      	ldr	r3, [r7, #4]
 800f7ca:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800f7ce:	4aac      	ldr	r2, [pc, #688]	; (800fa80 <problem_fetch+0xe41c>)
 800f7d0:	6810      	ldr	r0, [r2, #0]
 800f7d2:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 800f7d4:	687b      	ldr	r3, [r7, #4]
 800f7d6:	2207      	movs	r2, #7
 800f7d8:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"E,C,E,F,C,E,D");
 800f7da:	687b      	ldr	r3, [r7, #4]
 800f7dc:	33a4      	adds	r3, #164	; 0xa4
 800f7de:	4aa9      	ldr	r2, [pc, #676]	; (800fa84 <problem_fetch+0xe420>)
 800f7e0:	461c      	mov	r4, r3
 800f7e2:	4613      	mov	r3, r2
 800f7e4:	cb07      	ldmia	r3!, {r0, r1, r2}
 800f7e6:	6020      	str	r0, [r4, #0]
 800f7e8:	6061      	str	r1, [r4, #4]
 800f7ea:	60a2      	str	r2, [r4, #8]
 800f7ec:	881b      	ldrh	r3, [r3, #0]
 800f7ee:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"6,5,8,11,13,16,18");
 800f7f0:	687b      	ldr	r3, [r7, #4]
 800f7f2:	3304      	adds	r3, #4
 800f7f4:	4aa4      	ldr	r2, [pc, #656]	; (800fa88 <problem_fetch+0xe424>)
 800f7f6:	461d      	mov	r5, r3
 800f7f8:	4614      	mov	r4, r2
 800f7fa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800f7fc:	6028      	str	r0, [r5, #0]
 800f7fe:	6069      	str	r1, [r5, #4]
 800f800:	60aa      	str	r2, [r5, #8]
 800f802:	60eb      	str	r3, [r5, #12]
 800f804:	8823      	ldrh	r3, [r4, #0]
 800f806:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,s,d,d,d,d,e");
 800f808:	687b      	ldr	r3, [r7, #4]
 800f80a:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800f80e:	4a9f      	ldr	r2, [pc, #636]	; (800fa8c <problem_fetch+0xe428>)
 800f810:	461c      	mov	r4, r3
 800f812:	4613      	mov	r3, r2
 800f814:	cb07      	ldmia	r3!, {r0, r1, r2}
 800f816:	6020      	str	r0, [r4, #0]
 800f818:	6061      	str	r1, [r4, #4]
 800f81a:	60a2      	str	r2, [r4, #8]
 800f81c:	881b      	ldrh	r3, [r3, #0]
 800f81e:	81a3      	strh	r3, [r4, #12]
			break;
 800f820:	f00c be50 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 412 :
			strcpy(p->name,"BAGHEERA");
 800f824:	687b      	ldr	r3, [r7, #4]
 800f826:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800f82a:	4999      	ldr	r1, [pc, #612]	; (800fa90 <problem_fetch+0xe42c>)
 800f82c:	461a      	mov	r2, r3
 800f82e:	460b      	mov	r3, r1
 800f830:	cb03      	ldmia	r3!, {r0, r1}
 800f832:	6010      	str	r0, [r2, #0]
 800f834:	6051      	str	r1, [r2, #4]
 800f836:	781b      	ldrb	r3, [r3, #0]
 800f838:	7213      	strb	r3, [r2, #8]
			strcpy(p->grade,"7A");
 800f83a:	687b      	ldr	r3, [r7, #4]
 800f83c:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800f840:	4a94      	ldr	r2, [pc, #592]	; (800fa94 <problem_fetch+0xe430>)
 800f842:	8811      	ldrh	r1, [r2, #0]
 800f844:	7892      	ldrb	r2, [r2, #2]
 800f846:	8019      	strh	r1, [r3, #0]
 800f848:	709a      	strb	r2, [r3, #2]
			p->moveSize = 7;
 800f84a:	687b      	ldr	r3, [r7, #4]
 800f84c:	2207      	movs	r2, #7
 800f84e:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"C,D,G,I,G,G,D");
 800f850:	687b      	ldr	r3, [r7, #4]
 800f852:	33a4      	adds	r3, #164	; 0xa4
 800f854:	4a90      	ldr	r2, [pc, #576]	; (800fa98 <problem_fetch+0xe434>)
 800f856:	461c      	mov	r4, r3
 800f858:	4613      	mov	r3, r2
 800f85a:	cb07      	ldmia	r3!, {r0, r1, r2}
 800f85c:	6020      	str	r0, [r4, #0]
 800f85e:	6061      	str	r1, [r4, #4]
 800f860:	60a2      	str	r2, [r4, #8]
 800f862:	881b      	ldrh	r3, [r3, #0]
 800f864:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,7,9,14,14,17,18");
 800f866:	687b      	ldr	r3, [r7, #4]
 800f868:	3304      	adds	r3, #4
 800f86a:	4a8c      	ldr	r2, [pc, #560]	; (800fa9c <problem_fetch+0xe438>)
 800f86c:	461d      	mov	r5, r3
 800f86e:	4614      	mov	r4, r2
 800f870:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800f872:	6028      	str	r0, [r5, #0]
 800f874:	6069      	str	r1, [r5, #4]
 800f876:	60aa      	str	r2, [r5, #8]
 800f878:	60eb      	str	r3, [r5, #12]
 800f87a:	8823      	ldrh	r3, [r4, #0]
 800f87c:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 800f87e:	687b      	ldr	r3, [r7, #4]
 800f880:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800f884:	4a86      	ldr	r2, [pc, #536]	; (800faa0 <problem_fetch+0xe43c>)
 800f886:	461c      	mov	r4, r3
 800f888:	4613      	mov	r3, r2
 800f88a:	cb07      	ldmia	r3!, {r0, r1, r2}
 800f88c:	6020      	str	r0, [r4, #0]
 800f88e:	6061      	str	r1, [r4, #4]
 800f890:	60a2      	str	r2, [r4, #8]
 800f892:	881b      	ldrh	r3, [r3, #0]
 800f894:	81a3      	strh	r3, [r4, #12]
			break;
 800f896:	f00c be15 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 413 :
			strcpy(p->name,"BLACK CAVIAR");
 800f89a:	687b      	ldr	r3, [r7, #4]
 800f89c:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800f8a0:	4a80      	ldr	r2, [pc, #512]	; (800faa4 <problem_fetch+0xe440>)
 800f8a2:	461c      	mov	r4, r3
 800f8a4:	4613      	mov	r3, r2
 800f8a6:	cb07      	ldmia	r3!, {r0, r1, r2}
 800f8a8:	6020      	str	r0, [r4, #0]
 800f8aa:	6061      	str	r1, [r4, #4]
 800f8ac:	60a2      	str	r2, [r4, #8]
 800f8ae:	781b      	ldrb	r3, [r3, #0]
 800f8b0:	7323      	strb	r3, [r4, #12]
			strcpy(p->grade,"6C");
 800f8b2:	687b      	ldr	r3, [r7, #4]
 800f8b4:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800f8b8:	4a7b      	ldr	r2, [pc, #492]	; (800faa8 <problem_fetch+0xe444>)
 800f8ba:	8811      	ldrh	r1, [r2, #0]
 800f8bc:	7892      	ldrb	r2, [r2, #2]
 800f8be:	8019      	strh	r1, [r3, #0]
 800f8c0:	709a      	strb	r2, [r3, #2]
			p->moveSize = 8;
 800f8c2:	687b      	ldr	r3, [r7, #4]
 800f8c4:	2208      	movs	r2, #8
 800f8c6:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,J,E,A,A,H,F,D");
 800f8c8:	687b      	ldr	r3, [r7, #4]
 800f8ca:	33a4      	adds	r3, #164	; 0xa4
 800f8cc:	4a77      	ldr	r2, [pc, #476]	; (800faac <problem_fetch+0xe448>)
 800f8ce:	461c      	mov	r4, r3
 800f8d0:	4615      	mov	r5, r2
 800f8d2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f8d4:	6020      	str	r0, [r4, #0]
 800f8d6:	6061      	str	r1, [r4, #4]
 800f8d8:	60a2      	str	r2, [r4, #8]
 800f8da:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,5,6,9,14,8,11,18");
 800f8dc:	687b      	ldr	r3, [r7, #4]
 800f8de:	3304      	adds	r3, #4
 800f8e0:	4a73      	ldr	r2, [pc, #460]	; (800fab0 <problem_fetch+0xe44c>)
 800f8e2:	461d      	mov	r5, r3
 800f8e4:	4614      	mov	r4, r2
 800f8e6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800f8e8:	6028      	str	r0, [r5, #0]
 800f8ea:	6069      	str	r1, [r5, #4]
 800f8ec:	60aa      	str	r2, [r5, #8]
 800f8ee:	60eb      	str	r3, [r5, #12]
 800f8f0:	8823      	ldrh	r3, [r4, #0]
 800f8f2:	78a2      	ldrb	r2, [r4, #2]
 800f8f4:	822b      	strh	r3, [r5, #16]
 800f8f6:	4613      	mov	r3, r2
 800f8f8:	74ab      	strb	r3, [r5, #18]
			strcpy(p->startFinish,"s,d,d,d,d,d,d,e");
 800f8fa:	687b      	ldr	r3, [r7, #4]
 800f8fc:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800f900:	4a6c      	ldr	r2, [pc, #432]	; (800fab4 <problem_fetch+0xe450>)
 800f902:	461c      	mov	r4, r3
 800f904:	4615      	mov	r5, r2
 800f906:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f908:	6020      	str	r0, [r4, #0]
 800f90a:	6061      	str	r1, [r4, #4]
 800f90c:	60a2      	str	r2, [r4, #8]
 800f90e:	60e3      	str	r3, [r4, #12]
			break;
 800f910:	f00c bdd8 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 414 :
			strcpy(p->name,"HYPNOTIZED MINDS");
 800f914:	687b      	ldr	r3, [r7, #4]
 800f916:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800f91a:	4a67      	ldr	r2, [pc, #412]	; (800fab8 <problem_fetch+0xe454>)
 800f91c:	461d      	mov	r5, r3
 800f91e:	4614      	mov	r4, r2
 800f920:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800f922:	6028      	str	r0, [r5, #0]
 800f924:	6069      	str	r1, [r5, #4]
 800f926:	60aa      	str	r2, [r5, #8]
 800f928:	60eb      	str	r3, [r5, #12]
 800f92a:	7823      	ldrb	r3, [r4, #0]
 800f92c:	742b      	strb	r3, [r5, #16]
			strcpy(p->grade,"6B+");
 800f92e:	687b      	ldr	r3, [r7, #4]
 800f930:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800f934:	4a52      	ldr	r2, [pc, #328]	; (800fa80 <problem_fetch+0xe41c>)
 800f936:	6810      	ldr	r0, [r2, #0]
 800f938:	6018      	str	r0, [r3, #0]
			p->moveSize = 9;
 800f93a:	687b      	ldr	r3, [r7, #4]
 800f93c:	2209      	movs	r2, #9
 800f93e:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"B,C,G,J,I,C,H,J,I");
 800f940:	687b      	ldr	r3, [r7, #4]
 800f942:	33a4      	adds	r3, #164	; 0xa4
 800f944:	4a5d      	ldr	r2, [pc, #372]	; (800fabc <problem_fetch+0xe458>)
 800f946:	461d      	mov	r5, r3
 800f948:	4614      	mov	r4, r2
 800f94a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800f94c:	6028      	str	r0, [r5, #0]
 800f94e:	6069      	str	r1, [r5, #4]
 800f950:	60aa      	str	r2, [r5, #8]
 800f952:	60eb      	str	r3, [r5, #12]
 800f954:	8823      	ldrh	r3, [r4, #0]
 800f956:	822b      	strh	r3, [r5, #16]
			strcpy(p->moveNumbers,"6,5,9,12,15,8,8,5,18");
 800f958:	687b      	ldr	r3, [r7, #4]
 800f95a:	3304      	adds	r3, #4
 800f95c:	4a58      	ldr	r2, [pc, #352]	; (800fac0 <problem_fetch+0xe45c>)
 800f95e:	461d      	mov	r5, r3
 800f960:	4614      	mov	r4, r2
 800f962:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800f964:	6028      	str	r0, [r5, #0]
 800f966:	6069      	str	r1, [r5, #4]
 800f968:	60aa      	str	r2, [r5, #8]
 800f96a:	60eb      	str	r3, [r5, #12]
 800f96c:	6820      	ldr	r0, [r4, #0]
 800f96e:	6128      	str	r0, [r5, #16]
 800f970:	7923      	ldrb	r3, [r4, #4]
 800f972:	752b      	strb	r3, [r5, #20]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,d,e");
 800f974:	687b      	ldr	r3, [r7, #4]
 800f976:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800f97a:	4a52      	ldr	r2, [pc, #328]	; (800fac4 <problem_fetch+0xe460>)
 800f97c:	461d      	mov	r5, r3
 800f97e:	4614      	mov	r4, r2
 800f980:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800f982:	6028      	str	r0, [r5, #0]
 800f984:	6069      	str	r1, [r5, #4]
 800f986:	60aa      	str	r2, [r5, #8]
 800f988:	60eb      	str	r3, [r5, #12]
 800f98a:	8823      	ldrh	r3, [r4, #0]
 800f98c:	822b      	strh	r3, [r5, #16]
			break;
 800f98e:	f00c bd99 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 415 :
			strcpy(p->name,"CHRIS THE STRONGEST");
 800f992:	687b      	ldr	r3, [r7, #4]
 800f994:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800f998:	4a4b      	ldr	r2, [pc, #300]	; (800fac8 <problem_fetch+0xe464>)
 800f99a:	461d      	mov	r5, r3
 800f99c:	4614      	mov	r4, r2
 800f99e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800f9a0:	6028      	str	r0, [r5, #0]
 800f9a2:	6069      	str	r1, [r5, #4]
 800f9a4:	60aa      	str	r2, [r5, #8]
 800f9a6:	60eb      	str	r3, [r5, #12]
 800f9a8:	6820      	ldr	r0, [r4, #0]
 800f9aa:	6128      	str	r0, [r5, #16]
			strcpy(p->grade,"7C");
 800f9ac:	687b      	ldr	r3, [r7, #4]
 800f9ae:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800f9b2:	4a46      	ldr	r2, [pc, #280]	; (800facc <problem_fetch+0xe468>)
 800f9b4:	8811      	ldrh	r1, [r2, #0]
 800f9b6:	7892      	ldrb	r2, [r2, #2]
 800f9b8:	8019      	strh	r1, [r3, #0]
 800f9ba:	709a      	strb	r2, [r3, #2]
			p->moveSize = 5;
 800f9bc:	687b      	ldr	r3, [r7, #4]
 800f9be:	2205      	movs	r2, #5
 800f9c0:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,J,F,G,D");
 800f9c2:	687b      	ldr	r3, [r7, #4]
 800f9c4:	33a4      	adds	r3, #164	; 0xa4
 800f9c6:	4942      	ldr	r1, [pc, #264]	; (800fad0 <problem_fetch+0xe46c>)
 800f9c8:	461a      	mov	r2, r3
 800f9ca:	460b      	mov	r3, r1
 800f9cc:	cb03      	ldmia	r3!, {r0, r1}
 800f9ce:	6010      	str	r0, [r2, #0]
 800f9d0:	6051      	str	r1, [r2, #4]
 800f9d2:	881b      	ldrh	r3, [r3, #0]
 800f9d4:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"4,5,11,14,18");
 800f9d6:	687b      	ldr	r3, [r7, #4]
 800f9d8:	3304      	adds	r3, #4
 800f9da:	4a3e      	ldr	r2, [pc, #248]	; (800fad4 <problem_fetch+0xe470>)
 800f9dc:	461c      	mov	r4, r3
 800f9de:	4613      	mov	r3, r2
 800f9e0:	cb07      	ldmia	r3!, {r0, r1, r2}
 800f9e2:	6020      	str	r0, [r4, #0]
 800f9e4:	6061      	str	r1, [r4, #4]
 800f9e6:	60a2      	str	r2, [r4, #8]
 800f9e8:	781b      	ldrb	r3, [r3, #0]
 800f9ea:	7323      	strb	r3, [r4, #12]
			strcpy(p->startFinish,"s,s,d,d,e");
 800f9ec:	687b      	ldr	r3, [r7, #4]
 800f9ee:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800f9f2:	4939      	ldr	r1, [pc, #228]	; (800fad8 <problem_fetch+0xe474>)
 800f9f4:	461a      	mov	r2, r3
 800f9f6:	460b      	mov	r3, r1
 800f9f8:	cb03      	ldmia	r3!, {r0, r1}
 800f9fa:	6010      	str	r0, [r2, #0]
 800f9fc:	6051      	str	r1, [r2, #4]
 800f9fe:	881b      	ldrh	r3, [r3, #0]
 800fa00:	8113      	strh	r3, [r2, #8]
			break;
 800fa02:	f00c bd5f 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 416 :
			strcpy(p->name,"LE DOIGHT");
 800fa06:	687b      	ldr	r3, [r7, #4]
 800fa08:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800fa0c:	4933      	ldr	r1, [pc, #204]	; (800fadc <problem_fetch+0xe478>)
 800fa0e:	461a      	mov	r2, r3
 800fa10:	460b      	mov	r3, r1
 800fa12:	cb03      	ldmia	r3!, {r0, r1}
 800fa14:	6010      	str	r0, [r2, #0]
 800fa16:	6051      	str	r1, [r2, #4]
 800fa18:	881b      	ldrh	r3, [r3, #0]
 800fa1a:	8113      	strh	r3, [r2, #8]
			strcpy(p->grade,"7A");
 800fa1c:	687b      	ldr	r3, [r7, #4]
 800fa1e:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800fa22:	4a1c      	ldr	r2, [pc, #112]	; (800fa94 <problem_fetch+0xe430>)
 800fa24:	8811      	ldrh	r1, [r2, #0]
 800fa26:	7892      	ldrb	r2, [r2, #2]
 800fa28:	8019      	strh	r1, [r3, #0]
 800fa2a:	709a      	strb	r2, [r3, #2]
			p->moveSize = 8;
 800fa2c:	687b      	ldr	r3, [r7, #4]
 800fa2e:	2208      	movs	r2, #8
 800fa30:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"C,B,D,B,E,C,G,I");
 800fa32:	687b      	ldr	r3, [r7, #4]
 800fa34:	33a4      	adds	r3, #164	; 0xa4
 800fa36:	4a2a      	ldr	r2, [pc, #168]	; (800fae0 <problem_fetch+0xe47c>)
 800fa38:	461c      	mov	r4, r3
 800fa3a:	4615      	mov	r5, r2
 800fa3c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800fa3e:	6020      	str	r0, [r4, #0]
 800fa40:	6061      	str	r1, [r4, #4]
 800fa42:	60a2      	str	r2, [r4, #8]
 800fa44:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,6,7,10,12,16,17,18");
 800fa46:	687b      	ldr	r3, [r7, #4]
 800fa48:	3304      	adds	r3, #4
 800fa4a:	4a26      	ldr	r2, [pc, #152]	; (800fae4 <problem_fetch+0xe480>)
 800fa4c:	461d      	mov	r5, r3
 800fa4e:	4614      	mov	r4, r2
 800fa50:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800fa52:	6028      	str	r0, [r5, #0]
 800fa54:	6069      	str	r1, [r5, #4]
 800fa56:	60aa      	str	r2, [r5, #8]
 800fa58:	60eb      	str	r3, [r5, #12]
 800fa5a:	6820      	ldr	r0, [r4, #0]
 800fa5c:	6128      	str	r0, [r5, #16]
 800fa5e:	7923      	ldrb	r3, [r4, #4]
 800fa60:	752b      	strb	r3, [r5, #20]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,e");
 800fa62:	687b      	ldr	r3, [r7, #4]
 800fa64:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800fa68:	4a1f      	ldr	r2, [pc, #124]	; (800fae8 <problem_fetch+0xe484>)
 800fa6a:	461c      	mov	r4, r3
 800fa6c:	4615      	mov	r5, r2
 800fa6e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800fa70:	6020      	str	r0, [r4, #0]
 800fa72:	6061      	str	r1, [r4, #4]
 800fa74:	60a2      	str	r2, [r4, #8]
 800fa76:	60e3      	str	r3, [r4, #12]
			break;
 800fa78:	f00c bd24 	b.w	801c4c4 <problem_fetch+0x1ae60>
 800fa7c:	08028aac 	.word	0x08028aac
 800fa80:	08023b24 	.word	0x08023b24
 800fa84:	08028ab4 	.word	0x08028ab4
 800fa88:	08028ac4 	.word	0x08028ac4
 800fa8c:	08023b9c 	.word	0x08023b9c
 800fa90:	08028ad8 	.word	0x08028ad8
 800fa94:	08023ae4 	.word	0x08023ae4
 800fa98:	08028ae4 	.word	0x08028ae4
 800fa9c:	08028af4 	.word	0x08028af4
 800faa0:	08023cac 	.word	0x08023cac
 800faa4:	08028b08 	.word	0x08028b08
 800faa8:	08023bf0 	.word	0x08023bf0
 800faac:	08028b18 	.word	0x08028b18
 800fab0:	08028b28 	.word	0x08028b28
 800fab4:	08023d34 	.word	0x08023d34
 800fab8:	08028b3c 	.word	0x08028b3c
 800fabc:	08028b50 	.word	0x08028b50
 800fac0:	08028b64 	.word	0x08028b64
 800fac4:	08024b08 	.word	0x08024b08
 800fac8:	08028b7c 	.word	0x08028b7c
 800facc:	08024358 	.word	0x08024358
 800fad0:	08028b90 	.word	0x08028b90
 800fad4:	08028b9c 	.word	0x08028b9c
 800fad8:	08024204 	.word	0x08024204
 800fadc:	08028bac 	.word	0x08028bac
 800fae0:	08028bb8 	.word	0x08028bb8
 800fae4:	08028bc8 	.word	0x08028bc8
 800fae8:	08023c48 	.word	0x08023c48
		case 417 :
			strcpy(p->name,"LAPINERIE");
 800faec:	687b      	ldr	r3, [r7, #4]
 800faee:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800faf2:	49a9      	ldr	r1, [pc, #676]	; (800fd98 <problem_fetch+0xe734>)
 800faf4:	461a      	mov	r2, r3
 800faf6:	460b      	mov	r3, r1
 800faf8:	cb03      	ldmia	r3!, {r0, r1}
 800fafa:	6010      	str	r0, [r2, #0]
 800fafc:	6051      	str	r1, [r2, #4]
 800fafe:	881b      	ldrh	r3, [r3, #0]
 800fb00:	8113      	strh	r3, [r2, #8]
			strcpy(p->grade,"7B+");
 800fb02:	687b      	ldr	r3, [r7, #4]
 800fb04:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800fb08:	4aa4      	ldr	r2, [pc, #656]	; (800fd9c <problem_fetch+0xe738>)
 800fb0a:	6810      	ldr	r0, [r2, #0]
 800fb0c:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 800fb0e:	687b      	ldr	r3, [r7, #4]
 800fb10:	2206      	movs	r2, #6
 800fb12:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"C,E,B,E,E,I");
 800fb14:	687b      	ldr	r3, [r7, #4]
 800fb16:	33a4      	adds	r3, #164	; 0xa4
 800fb18:	4aa1      	ldr	r2, [pc, #644]	; (800fda0 <problem_fetch+0xe73c>)
 800fb1a:	461c      	mov	r4, r3
 800fb1c:	4613      	mov	r3, r2
 800fb1e:	cb07      	ldmia	r3!, {r0, r1, r2}
 800fb20:	6020      	str	r0, [r4, #0]
 800fb22:	6061      	str	r1, [r4, #4]
 800fb24:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,9,12,14,16,18");
 800fb26:	687b      	ldr	r3, [r7, #4]
 800fb28:	3304      	adds	r3, #4
 800fb2a:	4a9e      	ldr	r2, [pc, #632]	; (800fda4 <problem_fetch+0xe740>)
 800fb2c:	461c      	mov	r4, r3
 800fb2e:	4615      	mov	r5, r2
 800fb30:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800fb32:	6020      	str	r0, [r4, #0]
 800fb34:	6061      	str	r1, [r4, #4]
 800fb36:	60a2      	str	r2, [r4, #8]
 800fb38:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 800fb3a:	687b      	ldr	r3, [r7, #4]
 800fb3c:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800fb40:	4a99      	ldr	r2, [pc, #612]	; (800fda8 <problem_fetch+0xe744>)
 800fb42:	461c      	mov	r4, r3
 800fb44:	4613      	mov	r3, r2
 800fb46:	cb07      	ldmia	r3!, {r0, r1, r2}
 800fb48:	6020      	str	r0, [r4, #0]
 800fb4a:	6061      	str	r1, [r4, #4]
 800fb4c:	60a2      	str	r2, [r4, #8]
			break;
 800fb4e:	f00c bcb9 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 418 :
			strcpy(p->name,"IL DOMANI");
 800fb52:	687b      	ldr	r3, [r7, #4]
 800fb54:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800fb58:	4994      	ldr	r1, [pc, #592]	; (800fdac <problem_fetch+0xe748>)
 800fb5a:	461a      	mov	r2, r3
 800fb5c:	460b      	mov	r3, r1
 800fb5e:	cb03      	ldmia	r3!, {r0, r1}
 800fb60:	6010      	str	r0, [r2, #0]
 800fb62:	6051      	str	r1, [r2, #4]
 800fb64:	881b      	ldrh	r3, [r3, #0]
 800fb66:	8113      	strh	r3, [r2, #8]
			strcpy(p->grade,"7C");
 800fb68:	687b      	ldr	r3, [r7, #4]
 800fb6a:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800fb6e:	4a90      	ldr	r2, [pc, #576]	; (800fdb0 <problem_fetch+0xe74c>)
 800fb70:	8811      	ldrh	r1, [r2, #0]
 800fb72:	7892      	ldrb	r2, [r2, #2]
 800fb74:	8019      	strh	r1, [r3, #0]
 800fb76:	709a      	strb	r2, [r3, #2]
			p->moveSize = 5;
 800fb78:	687b      	ldr	r3, [r7, #4]
 800fb7a:	2205      	movs	r2, #5
 800fb7c:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"H,E,H,E,I");
 800fb7e:	687b      	ldr	r3, [r7, #4]
 800fb80:	33a4      	adds	r3, #164	; 0xa4
 800fb82:	498c      	ldr	r1, [pc, #560]	; (800fdb4 <problem_fetch+0xe750>)
 800fb84:	461a      	mov	r2, r3
 800fb86:	460b      	mov	r3, r1
 800fb88:	cb03      	ldmia	r3!, {r0, r1}
 800fb8a:	6010      	str	r0, [r2, #0]
 800fb8c:	6051      	str	r1, [r2, #4]
 800fb8e:	881b      	ldrh	r3, [r3, #0]
 800fb90:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"5,9,12,14,18");
 800fb92:	687b      	ldr	r3, [r7, #4]
 800fb94:	3304      	adds	r3, #4
 800fb96:	4a88      	ldr	r2, [pc, #544]	; (800fdb8 <problem_fetch+0xe754>)
 800fb98:	461c      	mov	r4, r3
 800fb9a:	4613      	mov	r3, r2
 800fb9c:	cb07      	ldmia	r3!, {r0, r1, r2}
 800fb9e:	6020      	str	r0, [r4, #0]
 800fba0:	6061      	str	r1, [r4, #4]
 800fba2:	60a2      	str	r2, [r4, #8]
 800fba4:	781b      	ldrb	r3, [r3, #0]
 800fba6:	7323      	strb	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,e");
 800fba8:	687b      	ldr	r3, [r7, #4]
 800fbaa:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800fbae:	4983      	ldr	r1, [pc, #524]	; (800fdbc <problem_fetch+0xe758>)
 800fbb0:	461a      	mov	r2, r3
 800fbb2:	460b      	mov	r3, r1
 800fbb4:	cb03      	ldmia	r3!, {r0, r1}
 800fbb6:	6010      	str	r0, [r2, #0]
 800fbb8:	6051      	str	r1, [r2, #4]
 800fbba:	881b      	ldrh	r3, [r3, #0]
 800fbbc:	8113      	strh	r3, [r2, #8]
			break;
 800fbbe:	f00c bc81 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 419 :
			strcpy(p->name,"BLACK BEAN");
 800fbc2:	687b      	ldr	r3, [r7, #4]
 800fbc4:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800fbc8:	497d      	ldr	r1, [pc, #500]	; (800fdc0 <problem_fetch+0xe75c>)
 800fbca:	461a      	mov	r2, r3
 800fbcc:	460b      	mov	r3, r1
 800fbce:	cb03      	ldmia	r3!, {r0, r1}
 800fbd0:	6010      	str	r0, [r2, #0]
 800fbd2:	6051      	str	r1, [r2, #4]
 800fbd4:	8819      	ldrh	r1, [r3, #0]
 800fbd6:	789b      	ldrb	r3, [r3, #2]
 800fbd8:	8111      	strh	r1, [r2, #8]
 800fbda:	7293      	strb	r3, [r2, #10]
			strcpy(p->grade,"7A+");
 800fbdc:	687b      	ldr	r3, [r7, #4]
 800fbde:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800fbe2:	4a78      	ldr	r2, [pc, #480]	; (800fdc4 <problem_fetch+0xe760>)
 800fbe4:	6810      	ldr	r0, [r2, #0]
 800fbe6:	6018      	str	r0, [r3, #0]
			p->moveSize = 8;
 800fbe8:	687b      	ldr	r3, [r7, #4]
 800fbea:	2208      	movs	r2, #8
 800fbec:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"C,E,H,K,E,I,J,I");
 800fbee:	687b      	ldr	r3, [r7, #4]
 800fbf0:	33a4      	adds	r3, #164	; 0xa4
 800fbf2:	4a75      	ldr	r2, [pc, #468]	; (800fdc8 <problem_fetch+0xe764>)
 800fbf4:	461c      	mov	r4, r3
 800fbf6:	4615      	mov	r5, r2
 800fbf8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800fbfa:	6020      	str	r0, [r4, #0]
 800fbfc:	6061      	str	r1, [r4, #4]
 800fbfe:	60a2      	str	r2, [r4, #8]
 800fc00:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,6,12,14,9,9,5,18");
 800fc02:	687b      	ldr	r3, [r7, #4]
 800fc04:	3304      	adds	r3, #4
 800fc06:	4a71      	ldr	r2, [pc, #452]	; (800fdcc <problem_fetch+0xe768>)
 800fc08:	461d      	mov	r5, r3
 800fc0a:	4614      	mov	r4, r2
 800fc0c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800fc0e:	6028      	str	r0, [r5, #0]
 800fc10:	6069      	str	r1, [r5, #4]
 800fc12:	60aa      	str	r2, [r5, #8]
 800fc14:	60eb      	str	r3, [r5, #12]
 800fc16:	8823      	ldrh	r3, [r4, #0]
 800fc18:	78a2      	ldrb	r2, [r4, #2]
 800fc1a:	822b      	strh	r3, [r5, #16]
 800fc1c:	4613      	mov	r3, r2
 800fc1e:	74ab      	strb	r3, [r5, #18]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,e");
 800fc20:	687b      	ldr	r3, [r7, #4]
 800fc22:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800fc26:	4a6a      	ldr	r2, [pc, #424]	; (800fdd0 <problem_fetch+0xe76c>)
 800fc28:	461c      	mov	r4, r3
 800fc2a:	4615      	mov	r5, r2
 800fc2c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800fc2e:	6020      	str	r0, [r4, #0]
 800fc30:	6061      	str	r1, [r4, #4]
 800fc32:	60a2      	str	r2, [r4, #8]
 800fc34:	60e3      	str	r3, [r4, #12]
			break;
 800fc36:	f00c bc45 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 420 :
			strcpy(p->name,"CLASSY");
 800fc3a:	687b      	ldr	r3, [r7, #4]
 800fc3c:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800fc40:	4a64      	ldr	r2, [pc, #400]	; (800fdd4 <problem_fetch+0xe770>)
 800fc42:	6810      	ldr	r0, [r2, #0]
 800fc44:	6018      	str	r0, [r3, #0]
 800fc46:	8891      	ldrh	r1, [r2, #4]
 800fc48:	7992      	ldrb	r2, [r2, #6]
 800fc4a:	8099      	strh	r1, [r3, #4]
 800fc4c:	719a      	strb	r2, [r3, #6]
			strcpy(p->grade,"6B+");
 800fc4e:	687b      	ldr	r3, [r7, #4]
 800fc50:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800fc54:	4a60      	ldr	r2, [pc, #384]	; (800fdd8 <problem_fetch+0xe774>)
 800fc56:	6810      	ldr	r0, [r2, #0]
 800fc58:	6018      	str	r0, [r3, #0]
			p->moveSize = 5;
 800fc5a:	687b      	ldr	r3, [r7, #4]
 800fc5c:	2205      	movs	r2, #5
 800fc5e:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,E,F,C,D");
 800fc60:	687b      	ldr	r3, [r7, #4]
 800fc62:	33a4      	adds	r3, #164	; 0xa4
 800fc64:	495d      	ldr	r1, [pc, #372]	; (800fddc <problem_fetch+0xe778>)
 800fc66:	461a      	mov	r2, r3
 800fc68:	460b      	mov	r3, r1
 800fc6a:	cb03      	ldmia	r3!, {r0, r1}
 800fc6c:	6010      	str	r0, [r2, #0]
 800fc6e:	6051      	str	r1, [r2, #4]
 800fc70:	881b      	ldrh	r3, [r3, #0]
 800fc72:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"4,8,11,13,18");
 800fc74:	687b      	ldr	r3, [r7, #4]
 800fc76:	3304      	adds	r3, #4
 800fc78:	4a59      	ldr	r2, [pc, #356]	; (800fde0 <problem_fetch+0xe77c>)
 800fc7a:	461c      	mov	r4, r3
 800fc7c:	4613      	mov	r3, r2
 800fc7e:	cb07      	ldmia	r3!, {r0, r1, r2}
 800fc80:	6020      	str	r0, [r4, #0]
 800fc82:	6061      	str	r1, [r4, #4]
 800fc84:	60a2      	str	r2, [r4, #8]
 800fc86:	781b      	ldrb	r3, [r3, #0]
 800fc88:	7323      	strb	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,e");
 800fc8a:	687b      	ldr	r3, [r7, #4]
 800fc8c:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800fc90:	494a      	ldr	r1, [pc, #296]	; (800fdbc <problem_fetch+0xe758>)
 800fc92:	461a      	mov	r2, r3
 800fc94:	460b      	mov	r3, r1
 800fc96:	cb03      	ldmia	r3!, {r0, r1}
 800fc98:	6010      	str	r0, [r2, #0]
 800fc9a:	6051      	str	r1, [r2, #4]
 800fc9c:	881b      	ldrh	r3, [r3, #0]
 800fc9e:	8113      	strh	r3, [r2, #8]
			break;
 800fca0:	f00c bc10 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 421 :
			strcpy(p->name,"THE 45 SECRETS");
 800fca4:	687b      	ldr	r3, [r7, #4]
 800fca6:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800fcaa:	4a4e      	ldr	r2, [pc, #312]	; (800fde4 <problem_fetch+0xe780>)
 800fcac:	461c      	mov	r4, r3
 800fcae:	4613      	mov	r3, r2
 800fcb0:	cb07      	ldmia	r3!, {r0, r1, r2}
 800fcb2:	6020      	str	r0, [r4, #0]
 800fcb4:	6061      	str	r1, [r4, #4]
 800fcb6:	60a2      	str	r2, [r4, #8]
 800fcb8:	881a      	ldrh	r2, [r3, #0]
 800fcba:	789b      	ldrb	r3, [r3, #2]
 800fcbc:	81a2      	strh	r2, [r4, #12]
 800fcbe:	73a3      	strb	r3, [r4, #14]
			strcpy(p->grade,"6B+");
 800fcc0:	687b      	ldr	r3, [r7, #4]
 800fcc2:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800fcc6:	4a44      	ldr	r2, [pc, #272]	; (800fdd8 <problem_fetch+0xe774>)
 800fcc8:	6810      	ldr	r0, [r2, #0]
 800fcca:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 800fccc:	687b      	ldr	r3, [r7, #4]
 800fcce:	2207      	movs	r2, #7
 800fcd0:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,H,E,J,E,A,A");
 800fcd2:	687b      	ldr	r3, [r7, #4]
 800fcd4:	33a4      	adds	r3, #164	; 0xa4
 800fcd6:	4a44      	ldr	r2, [pc, #272]	; (800fde8 <problem_fetch+0xe784>)
 800fcd8:	461c      	mov	r4, r3
 800fcda:	4613      	mov	r3, r2
 800fcdc:	cb07      	ldmia	r3!, {r0, r1, r2}
 800fcde:	6020      	str	r0, [r4, #0]
 800fce0:	6061      	str	r1, [r4, #4]
 800fce2:	60a2      	str	r2, [r4, #8]
 800fce4:	881b      	ldrh	r3, [r3, #0]
 800fce6:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,8,8,7,12,14,18");
 800fce8:	687b      	ldr	r3, [r7, #4]
 800fcea:	3304      	adds	r3, #4
 800fcec:	4a3f      	ldr	r2, [pc, #252]	; (800fdec <problem_fetch+0xe788>)
 800fcee:	461d      	mov	r5, r3
 800fcf0:	4614      	mov	r4, r2
 800fcf2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800fcf4:	6028      	str	r0, [r5, #0]
 800fcf6:	6069      	str	r1, [r5, #4]
 800fcf8:	60aa      	str	r2, [r5, #8]
 800fcfa:	60eb      	str	r3, [r5, #12]
 800fcfc:	7823      	ldrb	r3, [r4, #0]
 800fcfe:	742b      	strb	r3, [r5, #16]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 800fd00:	687b      	ldr	r3, [r7, #4]
 800fd02:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800fd06:	4a3a      	ldr	r2, [pc, #232]	; (800fdf0 <problem_fetch+0xe78c>)
 800fd08:	461c      	mov	r4, r3
 800fd0a:	4613      	mov	r3, r2
 800fd0c:	cb07      	ldmia	r3!, {r0, r1, r2}
 800fd0e:	6020      	str	r0, [r4, #0]
 800fd10:	6061      	str	r1, [r4, #4]
 800fd12:	60a2      	str	r2, [r4, #8]
 800fd14:	881b      	ldrh	r3, [r3, #0]
 800fd16:	81a3      	strh	r3, [r4, #12]
			break;
 800fd18:	f00c bbd4 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 422 :
			strcpy(p->name,"YOUR LAST PIECE OF CHALK");
 800fd1c:	687b      	ldr	r3, [r7, #4]
 800fd1e:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800fd22:	4a34      	ldr	r2, [pc, #208]	; (800fdf4 <problem_fetch+0xe790>)
 800fd24:	461d      	mov	r5, r3
 800fd26:	4614      	mov	r4, r2
 800fd28:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800fd2a:	6028      	str	r0, [r5, #0]
 800fd2c:	6069      	str	r1, [r5, #4]
 800fd2e:	60aa      	str	r2, [r5, #8]
 800fd30:	60eb      	str	r3, [r5, #12]
 800fd32:	cc03      	ldmia	r4!, {r0, r1}
 800fd34:	6128      	str	r0, [r5, #16]
 800fd36:	6169      	str	r1, [r5, #20]
 800fd38:	7823      	ldrb	r3, [r4, #0]
 800fd3a:	762b      	strb	r3, [r5, #24]
			strcpy(p->grade,"6B+");
 800fd3c:	687b      	ldr	r3, [r7, #4]
 800fd3e:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800fd42:	4a25      	ldr	r2, [pc, #148]	; (800fdd8 <problem_fetch+0xe774>)
 800fd44:	6810      	ldr	r0, [r2, #0]
 800fd46:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 800fd48:	687b      	ldr	r3, [r7, #4]
 800fd4a:	2207      	movs	r2, #7
 800fd4c:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,E,E,K,I,F,I");
 800fd4e:	687b      	ldr	r3, [r7, #4]
 800fd50:	33a4      	adds	r3, #164	; 0xa4
 800fd52:	4a29      	ldr	r2, [pc, #164]	; (800fdf8 <problem_fetch+0xe794>)
 800fd54:	461c      	mov	r4, r3
 800fd56:	4613      	mov	r3, r2
 800fd58:	cb07      	ldmia	r3!, {r0, r1, r2}
 800fd5a:	6020      	str	r0, [r4, #0]
 800fd5c:	6061      	str	r1, [r4, #4]
 800fd5e:	60a2      	str	r2, [r4, #8]
 800fd60:	881b      	ldrh	r3, [r3, #0]
 800fd62:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,8,12,9,14,11,18");
 800fd64:	687b      	ldr	r3, [r7, #4]
 800fd66:	3304      	adds	r3, #4
 800fd68:	4a24      	ldr	r2, [pc, #144]	; (800fdfc <problem_fetch+0xe798>)
 800fd6a:	461d      	mov	r5, r3
 800fd6c:	4614      	mov	r4, r2
 800fd6e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800fd70:	6028      	str	r0, [r5, #0]
 800fd72:	6069      	str	r1, [r5, #4]
 800fd74:	60aa      	str	r2, [r5, #8]
 800fd76:	60eb      	str	r3, [r5, #12]
 800fd78:	8823      	ldrh	r3, [r4, #0]
 800fd7a:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 800fd7c:	687b      	ldr	r3, [r7, #4]
 800fd7e:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800fd82:	4a1b      	ldr	r2, [pc, #108]	; (800fdf0 <problem_fetch+0xe78c>)
 800fd84:	461c      	mov	r4, r3
 800fd86:	4613      	mov	r3, r2
 800fd88:	cb07      	ldmia	r3!, {r0, r1, r2}
 800fd8a:	6020      	str	r0, [r4, #0]
 800fd8c:	6061      	str	r1, [r4, #4]
 800fd8e:	60a2      	str	r2, [r4, #8]
 800fd90:	881b      	ldrh	r3, [r3, #0]
 800fd92:	81a3      	strh	r3, [r4, #12]
			break;
 800fd94:	f00c bb96 	b.w	801c4c4 <problem_fetch+0x1ae60>
 800fd98:	08028be0 	.word	0x08028be0
 800fd9c:	08023c60 	.word	0x08023c60
 800fda0:	08028bec 	.word	0x08028bec
 800fda4:	08028bf8 	.word	0x08028bf8
 800fda8:	08023ec0 	.word	0x08023ec0
 800fdac:	08028c08 	.word	0x08028c08
 800fdb0:	08024358 	.word	0x08024358
 800fdb4:	08028c14 	.word	0x08028c14
 800fdb8:	08024140 	.word	0x08024140
 800fdbc:	08023ff0 	.word	0x08023ff0
 800fdc0:	08028c20 	.word	0x08028c20
 800fdc4:	08023cc4 	.word	0x08023cc4
 800fdc8:	0802882c 	.word	0x0802882c
 800fdcc:	08028c2c 	.word	0x08028c2c
 800fdd0:	08023c48 	.word	0x08023c48
 800fdd4:	08028c40 	.word	0x08028c40
 800fdd8:	08023b24 	.word	0x08023b24
 800fddc:	08028c48 	.word	0x08028c48
 800fde0:	08028c54 	.word	0x08028c54
 800fde4:	08028c64 	.word	0x08028c64
 800fde8:	08028c74 	.word	0x08028c74
 800fdec:	08028c84 	.word	0x08028c84
 800fdf0:	08023cac 	.word	0x08023cac
 800fdf4:	08028c98 	.word	0x08028c98
 800fdf8:	08028cb4 	.word	0x08028cb4
 800fdfc:	08028cc4 	.word	0x08028cc4
		case 423 :
			strcpy(p->name,"CASSIN");
 800fe00:	687b      	ldr	r3, [r7, #4]
 800fe02:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800fe06:	4ac0      	ldr	r2, [pc, #768]	; (8010108 <problem_fetch+0xeaa4>)
 800fe08:	6810      	ldr	r0, [r2, #0]
 800fe0a:	6018      	str	r0, [r3, #0]
 800fe0c:	8891      	ldrh	r1, [r2, #4]
 800fe0e:	7992      	ldrb	r2, [r2, #6]
 800fe10:	8099      	strh	r1, [r3, #4]
 800fe12:	719a      	strb	r2, [r3, #6]
			strcpy(p->grade,"7A+");
 800fe14:	687b      	ldr	r3, [r7, #4]
 800fe16:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800fe1a:	4abc      	ldr	r2, [pc, #752]	; (801010c <problem_fetch+0xeaa8>)
 800fe1c:	6810      	ldr	r0, [r2, #0]
 800fe1e:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 800fe20:	687b      	ldr	r3, [r7, #4]
 800fe22:	2206      	movs	r2, #6
 800fe24:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"B,C,E,B,E,A");
 800fe26:	687b      	ldr	r3, [r7, #4]
 800fe28:	33a4      	adds	r3, #164	; 0xa4
 800fe2a:	4ab9      	ldr	r2, [pc, #740]	; (8010110 <problem_fetch+0xeaac>)
 800fe2c:	461c      	mov	r4, r3
 800fe2e:	4613      	mov	r3, r2
 800fe30:	cb07      	ldmia	r3!, {r0, r1, r2}
 800fe32:	6020      	str	r0, [r4, #0]
 800fe34:	6061      	str	r1, [r4, #4]
 800fe36:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"6,5,9,12,14,18");
 800fe38:	687b      	ldr	r3, [r7, #4]
 800fe3a:	3304      	adds	r3, #4
 800fe3c:	4ab5      	ldr	r2, [pc, #724]	; (8010114 <problem_fetch+0xeab0>)
 800fe3e:	461c      	mov	r4, r3
 800fe40:	4613      	mov	r3, r2
 800fe42:	cb07      	ldmia	r3!, {r0, r1, r2}
 800fe44:	6020      	str	r0, [r4, #0]
 800fe46:	6061      	str	r1, [r4, #4]
 800fe48:	60a2      	str	r2, [r4, #8]
 800fe4a:	881a      	ldrh	r2, [r3, #0]
 800fe4c:	789b      	ldrb	r3, [r3, #2]
 800fe4e:	81a2      	strh	r2, [r4, #12]
 800fe50:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish,"s,s,d,d,d,e");
 800fe52:	687b      	ldr	r3, [r7, #4]
 800fe54:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800fe58:	4aaf      	ldr	r2, [pc, #700]	; (8010118 <problem_fetch+0xeab4>)
 800fe5a:	461c      	mov	r4, r3
 800fe5c:	4613      	mov	r3, r2
 800fe5e:	cb07      	ldmia	r3!, {r0, r1, r2}
 800fe60:	6020      	str	r0, [r4, #0]
 800fe62:	6061      	str	r1, [r4, #4]
 800fe64:	60a2      	str	r2, [r4, #8]
			break;
 800fe66:	f00c bb2d 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 424 :
			strcpy(p->name,"HOTEL SOPRAMONTE");
 800fe6a:	687b      	ldr	r3, [r7, #4]
 800fe6c:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800fe70:	4aaa      	ldr	r2, [pc, #680]	; (801011c <problem_fetch+0xeab8>)
 800fe72:	461d      	mov	r5, r3
 800fe74:	4614      	mov	r4, r2
 800fe76:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800fe78:	6028      	str	r0, [r5, #0]
 800fe7a:	6069      	str	r1, [r5, #4]
 800fe7c:	60aa      	str	r2, [r5, #8]
 800fe7e:	60eb      	str	r3, [r5, #12]
 800fe80:	7823      	ldrb	r3, [r4, #0]
 800fe82:	742b      	strb	r3, [r5, #16]
			strcpy(p->grade,"7B");
 800fe84:	687b      	ldr	r3, [r7, #4]
 800fe86:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800fe8a:	4aa5      	ldr	r2, [pc, #660]	; (8010120 <problem_fetch+0xeabc>)
 800fe8c:	8811      	ldrh	r1, [r2, #0]
 800fe8e:	7892      	ldrb	r2, [r2, #2]
 800fe90:	8019      	strh	r1, [r3, #0]
 800fe92:	709a      	strb	r2, [r3, #2]
			p->moveSize = 5;
 800fe94:	687b      	ldr	r3, [r7, #4]
 800fe96:	2205      	movs	r2, #5
 800fe98:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,C,G,G,I");
 800fe9a:	687b      	ldr	r3, [r7, #4]
 800fe9c:	33a4      	adds	r3, #164	; 0xa4
 800fe9e:	49a1      	ldr	r1, [pc, #644]	; (8010124 <problem_fetch+0xeac0>)
 800fea0:	461a      	mov	r2, r3
 800fea2:	460b      	mov	r3, r1
 800fea4:	cb03      	ldmia	r3!, {r0, r1}
 800fea6:	6010      	str	r0, [r2, #0]
 800fea8:	6051      	str	r1, [r2, #4]
 800feaa:	881b      	ldrh	r3, [r3, #0]
 800feac:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"4,8,10,15,18");
 800feae:	687b      	ldr	r3, [r7, #4]
 800feb0:	3304      	adds	r3, #4
 800feb2:	4a9d      	ldr	r2, [pc, #628]	; (8010128 <problem_fetch+0xeac4>)
 800feb4:	461c      	mov	r4, r3
 800feb6:	4613      	mov	r3, r2
 800feb8:	cb07      	ldmia	r3!, {r0, r1, r2}
 800feba:	6020      	str	r0, [r4, #0]
 800febc:	6061      	str	r1, [r4, #4]
 800febe:	60a2      	str	r2, [r4, #8]
 800fec0:	781b      	ldrb	r3, [r3, #0]
 800fec2:	7323      	strb	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,e");
 800fec4:	687b      	ldr	r3, [r7, #4]
 800fec6:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800feca:	4998      	ldr	r1, [pc, #608]	; (801012c <problem_fetch+0xeac8>)
 800fecc:	461a      	mov	r2, r3
 800fece:	460b      	mov	r3, r1
 800fed0:	cb03      	ldmia	r3!, {r0, r1}
 800fed2:	6010      	str	r0, [r2, #0]
 800fed4:	6051      	str	r1, [r2, #4]
 800fed6:	881b      	ldrh	r3, [r3, #0]
 800fed8:	8113      	strh	r3, [r2, #8]
			break;
 800feda:	f00c baf3 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 425 :
			strcpy(p->name,"THE GOLDEN GATE");
 800fede:	687b      	ldr	r3, [r7, #4]
 800fee0:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800fee4:	4a92      	ldr	r2, [pc, #584]	; (8010130 <problem_fetch+0xeacc>)
 800fee6:	461c      	mov	r4, r3
 800fee8:	4615      	mov	r5, r2
 800feea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800feec:	6020      	str	r0, [r4, #0]
 800feee:	6061      	str	r1, [r4, #4]
 800fef0:	60a2      	str	r2, [r4, #8]
 800fef2:	60e3      	str	r3, [r4, #12]
			strcpy(p->grade,"6B+");
 800fef4:	687b      	ldr	r3, [r7, #4]
 800fef6:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800fefa:	4a8e      	ldr	r2, [pc, #568]	; (8010134 <problem_fetch+0xead0>)
 800fefc:	6810      	ldr	r0, [r2, #0]
 800fefe:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 800ff00:	687b      	ldr	r3, [r7, #4]
 800ff02:	2206      	movs	r2, #6
 800ff04:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,H,C,E,B,D");
 800ff06:	687b      	ldr	r3, [r7, #4]
 800ff08:	33a4      	adds	r3, #164	; 0xa4
 800ff0a:	4a8b      	ldr	r2, [pc, #556]	; (8010138 <problem_fetch+0xead4>)
 800ff0c:	461c      	mov	r4, r3
 800ff0e:	4613      	mov	r3, r2
 800ff10:	cb07      	ldmia	r3!, {r0, r1, r2}
 800ff12:	6020      	str	r0, [r4, #0]
 800ff14:	6061      	str	r1, [r4, #4]
 800ff16:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,8,8,12,15,18");
 800ff18:	687b      	ldr	r3, [r7, #4]
 800ff1a:	3304      	adds	r3, #4
 800ff1c:	4a87      	ldr	r2, [pc, #540]	; (801013c <problem_fetch+0xead8>)
 800ff1e:	461c      	mov	r4, r3
 800ff20:	4613      	mov	r3, r2
 800ff22:	cb07      	ldmia	r3!, {r0, r1, r2}
 800ff24:	6020      	str	r0, [r4, #0]
 800ff26:	6061      	str	r1, [r4, #4]
 800ff28:	60a2      	str	r2, [r4, #8]
 800ff2a:	881a      	ldrh	r2, [r3, #0]
 800ff2c:	789b      	ldrb	r3, [r3, #2]
 800ff2e:	81a2      	strh	r2, [r4, #12]
 800ff30:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 800ff32:	687b      	ldr	r3, [r7, #4]
 800ff34:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800ff38:	4a81      	ldr	r2, [pc, #516]	; (8010140 <problem_fetch+0xeadc>)
 800ff3a:	461c      	mov	r4, r3
 800ff3c:	4613      	mov	r3, r2
 800ff3e:	cb07      	ldmia	r3!, {r0, r1, r2}
 800ff40:	6020      	str	r0, [r4, #0]
 800ff42:	6061      	str	r1, [r4, #4]
 800ff44:	60a2      	str	r2, [r4, #8]
			break;
 800ff46:	f00c babd 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 426 :
			strcpy(p->name,"VASIL VASIL");
 800ff4a:	687b      	ldr	r3, [r7, #4]
 800ff4c:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800ff50:	4a7c      	ldr	r2, [pc, #496]	; (8010144 <problem_fetch+0xeae0>)
 800ff52:	461c      	mov	r4, r3
 800ff54:	4613      	mov	r3, r2
 800ff56:	cb07      	ldmia	r3!, {r0, r1, r2}
 800ff58:	6020      	str	r0, [r4, #0]
 800ff5a:	6061      	str	r1, [r4, #4]
 800ff5c:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade,"7B");
 800ff5e:	687b      	ldr	r3, [r7, #4]
 800ff60:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800ff64:	4a6e      	ldr	r2, [pc, #440]	; (8010120 <problem_fetch+0xeabc>)
 800ff66:	8811      	ldrh	r1, [r2, #0]
 800ff68:	7892      	ldrb	r2, [r2, #2]
 800ff6a:	8019      	strh	r1, [r3, #0]
 800ff6c:	709a      	strb	r2, [r3, #2]
			p->moveSize = 6;
 800ff6e:	687b      	ldr	r3, [r7, #4]
 800ff70:	2206      	movs	r2, #6
 800ff72:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,J,E,J,H,I");
 800ff74:	687b      	ldr	r3, [r7, #4]
 800ff76:	33a4      	adds	r3, #164	; 0xa4
 800ff78:	4a73      	ldr	r2, [pc, #460]	; (8010148 <problem_fetch+0xeae4>)
 800ff7a:	461c      	mov	r4, r3
 800ff7c:	4613      	mov	r3, r2
 800ff7e:	cb07      	ldmia	r3!, {r0, r1, r2}
 800ff80:	6020      	str	r0, [r4, #0]
 800ff82:	6061      	str	r1, [r4, #4]
 800ff84:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,7,9,12,16,18");
 800ff86:	687b      	ldr	r3, [r7, #4]
 800ff88:	3304      	adds	r3, #4
 800ff8a:	4a70      	ldr	r2, [pc, #448]	; (801014c <problem_fetch+0xeae8>)
 800ff8c:	461c      	mov	r4, r3
 800ff8e:	4613      	mov	r3, r2
 800ff90:	cb07      	ldmia	r3!, {r0, r1, r2}
 800ff92:	6020      	str	r0, [r4, #0]
 800ff94:	6061      	str	r1, [r4, #4]
 800ff96:	60a2      	str	r2, [r4, #8]
 800ff98:	881a      	ldrh	r2, [r3, #0]
 800ff9a:	789b      	ldrb	r3, [r3, #2]
 800ff9c:	81a2      	strh	r2, [r4, #12]
 800ff9e:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 800ffa0:	687b      	ldr	r3, [r7, #4]
 800ffa2:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800ffa6:	4a66      	ldr	r2, [pc, #408]	; (8010140 <problem_fetch+0xeadc>)
 800ffa8:	461c      	mov	r4, r3
 800ffaa:	4613      	mov	r3, r2
 800ffac:	cb07      	ldmia	r3!, {r0, r1, r2}
 800ffae:	6020      	str	r0, [r4, #0]
 800ffb0:	6061      	str	r1, [r4, #4]
 800ffb2:	60a2      	str	r2, [r4, #8]
			break;
 800ffb4:	f00c ba86 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 427 :
			strcpy(p->name,"WITNESS THE FITNESS");
 800ffb8:	687b      	ldr	r3, [r7, #4]
 800ffba:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800ffbe:	4a64      	ldr	r2, [pc, #400]	; (8010150 <problem_fetch+0xeaec>)
 800ffc0:	461d      	mov	r5, r3
 800ffc2:	4614      	mov	r4, r2
 800ffc4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800ffc6:	6028      	str	r0, [r5, #0]
 800ffc8:	6069      	str	r1, [r5, #4]
 800ffca:	60aa      	str	r2, [r5, #8]
 800ffcc:	60eb      	str	r3, [r5, #12]
 800ffce:	6820      	ldr	r0, [r4, #0]
 800ffd0:	6128      	str	r0, [r5, #16]
			strcpy(p->grade,"6B+");
 800ffd2:	687b      	ldr	r3, [r7, #4]
 800ffd4:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800ffd8:	4a56      	ldr	r2, [pc, #344]	; (8010134 <problem_fetch+0xead0>)
 800ffda:	6810      	ldr	r0, [r2, #0]
 800ffdc:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 800ffde:	687b      	ldr	r3, [r7, #4]
 800ffe0:	2207      	movs	r2, #7
 800ffe2:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,D,B,E,B,E,D");
 800ffe4:	687b      	ldr	r3, [r7, #4]
 800ffe6:	33a4      	adds	r3, #164	; 0xa4
 800ffe8:	4a5a      	ldr	r2, [pc, #360]	; (8010154 <problem_fetch+0xeaf0>)
 800ffea:	461c      	mov	r4, r3
 800ffec:	4613      	mov	r3, r2
 800ffee:	cb07      	ldmia	r3!, {r0, r1, r2}
 800fff0:	6020      	str	r0, [r4, #0]
 800fff2:	6061      	str	r1, [r4, #4]
 800fff4:	60a2      	str	r2, [r4, #8]
 800fff6:	881b      	ldrh	r3, [r3, #0]
 800fff8:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,7,10,12,15,6,18");
 800fffa:	687b      	ldr	r3, [r7, #4]
 800fffc:	3304      	adds	r3, #4
 800fffe:	4a56      	ldr	r2, [pc, #344]	; (8010158 <problem_fetch+0xeaf4>)
 8010000:	461d      	mov	r5, r3
 8010002:	4614      	mov	r4, r2
 8010004:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8010006:	6028      	str	r0, [r5, #0]
 8010008:	6069      	str	r1, [r5, #4]
 801000a:	60aa      	str	r2, [r5, #8]
 801000c:	60eb      	str	r3, [r5, #12]
 801000e:	8823      	ldrh	r3, [r4, #0]
 8010010:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 8010012:	687b      	ldr	r3, [r7, #4]
 8010014:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8010018:	4a50      	ldr	r2, [pc, #320]	; (801015c <problem_fetch+0xeaf8>)
 801001a:	461c      	mov	r4, r3
 801001c:	4613      	mov	r3, r2
 801001e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8010020:	6020      	str	r0, [r4, #0]
 8010022:	6061      	str	r1, [r4, #4]
 8010024:	60a2      	str	r2, [r4, #8]
 8010026:	881b      	ldrh	r3, [r3, #0]
 8010028:	81a3      	strh	r3, [r4, #12]
			break;
 801002a:	f00c ba4b 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 428 :
			strcpy(p->name,"LAST MOMENT");
 801002e:	687b      	ldr	r3, [r7, #4]
 8010030:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8010034:	4a4a      	ldr	r2, [pc, #296]	; (8010160 <problem_fetch+0xeafc>)
 8010036:	461c      	mov	r4, r3
 8010038:	4613      	mov	r3, r2
 801003a:	cb07      	ldmia	r3!, {r0, r1, r2}
 801003c:	6020      	str	r0, [r4, #0]
 801003e:	6061      	str	r1, [r4, #4]
 8010040:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade,"6B+");
 8010042:	687b      	ldr	r3, [r7, #4]
 8010044:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8010048:	4a3a      	ldr	r2, [pc, #232]	; (8010134 <problem_fetch+0xead0>)
 801004a:	6810      	ldr	r0, [r2, #0]
 801004c:	6018      	str	r0, [r3, #0]
			p->moveSize = 5;
 801004e:	687b      	ldr	r3, [r7, #4]
 8010050:	2205      	movs	r2, #5
 8010052:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,E,I,G,I");
 8010054:	687b      	ldr	r3, [r7, #4]
 8010056:	33a4      	adds	r3, #164	; 0xa4
 8010058:	4942      	ldr	r1, [pc, #264]	; (8010164 <problem_fetch+0xeb00>)
 801005a:	461a      	mov	r2, r3
 801005c:	460b      	mov	r3, r1
 801005e:	cb03      	ldmia	r3!, {r0, r1}
 8010060:	6010      	str	r0, [r2, #0]
 8010062:	6051      	str	r1, [r2, #4]
 8010064:	881b      	ldrh	r3, [r3, #0]
 8010066:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"4,8,10,14,18");
 8010068:	687b      	ldr	r3, [r7, #4]
 801006a:	3304      	adds	r3, #4
 801006c:	4a3e      	ldr	r2, [pc, #248]	; (8010168 <problem_fetch+0xeb04>)
 801006e:	461c      	mov	r4, r3
 8010070:	4613      	mov	r3, r2
 8010072:	cb07      	ldmia	r3!, {r0, r1, r2}
 8010074:	6020      	str	r0, [r4, #0]
 8010076:	6061      	str	r1, [r4, #4]
 8010078:	60a2      	str	r2, [r4, #8]
 801007a:	781b      	ldrb	r3, [r3, #0]
 801007c:	7323      	strb	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,e");
 801007e:	687b      	ldr	r3, [r7, #4]
 8010080:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8010084:	4929      	ldr	r1, [pc, #164]	; (801012c <problem_fetch+0xeac8>)
 8010086:	461a      	mov	r2, r3
 8010088:	460b      	mov	r3, r1
 801008a:	cb03      	ldmia	r3!, {r0, r1}
 801008c:	6010      	str	r0, [r2, #0]
 801008e:	6051      	str	r1, [r2, #4]
 8010090:	881b      	ldrh	r3, [r3, #0]
 8010092:	8113      	strh	r3, [r2, #8]
			break;
 8010094:	f00c ba16 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 429 :
			strcpy(p->name,"THE PROCESS");
 8010098:	687b      	ldr	r3, [r7, #4]
 801009a:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801009e:	4a33      	ldr	r2, [pc, #204]	; (801016c <problem_fetch+0xeb08>)
 80100a0:	461c      	mov	r4, r3
 80100a2:	4613      	mov	r3, r2
 80100a4:	cb07      	ldmia	r3!, {r0, r1, r2}
 80100a6:	6020      	str	r0, [r4, #0]
 80100a8:	6061      	str	r1, [r4, #4]
 80100aa:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade,"6C+");
 80100ac:	687b      	ldr	r3, [r7, #4]
 80100ae:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80100b2:	4a2f      	ldr	r2, [pc, #188]	; (8010170 <problem_fetch+0xeb0c>)
 80100b4:	6810      	ldr	r0, [r2, #0]
 80100b6:	6018      	str	r0, [r3, #0]
			p->moveSize = 8;
 80100b8:	687b      	ldr	r3, [r7, #4]
 80100ba:	2208      	movs	r2, #8
 80100bc:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,G,K,J,G,K,H,D");
 80100be:	687b      	ldr	r3, [r7, #4]
 80100c0:	33a4      	adds	r3, #164	; 0xa4
 80100c2:	4a2c      	ldr	r2, [pc, #176]	; (8010174 <problem_fetch+0xeb10>)
 80100c4:	461c      	mov	r4, r3
 80100c6:	4615      	mov	r5, r2
 80100c8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80100ca:	6020      	str	r0, [r4, #0]
 80100cc:	6061      	str	r1, [r4, #4]
 80100ce:	60a2      	str	r2, [r4, #8]
 80100d0:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,6,9,13,17,16,16,18");
 80100d2:	687b      	ldr	r3, [r7, #4]
 80100d4:	3304      	adds	r3, #4
 80100d6:	4a28      	ldr	r2, [pc, #160]	; (8010178 <problem_fetch+0xeb14>)
 80100d8:	461d      	mov	r5, r3
 80100da:	4614      	mov	r4, r2
 80100dc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80100de:	6028      	str	r0, [r5, #0]
 80100e0:	6069      	str	r1, [r5, #4]
 80100e2:	60aa      	str	r2, [r5, #8]
 80100e4:	60eb      	str	r3, [r5, #12]
 80100e6:	6820      	ldr	r0, [r4, #0]
 80100e8:	6128      	str	r0, [r5, #16]
 80100ea:	7923      	ldrb	r3, [r4, #4]
 80100ec:	752b      	strb	r3, [r5, #20]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,e");
 80100ee:	687b      	ldr	r3, [r7, #4]
 80100f0:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 80100f4:	4a21      	ldr	r2, [pc, #132]	; (801017c <problem_fetch+0xeb18>)
 80100f6:	461c      	mov	r4, r3
 80100f8:	4615      	mov	r5, r2
 80100fa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80100fc:	6020      	str	r0, [r4, #0]
 80100fe:	6061      	str	r1, [r4, #4]
 8010100:	60a2      	str	r2, [r4, #8]
 8010102:	60e3      	str	r3, [r4, #12]
			break;
 8010104:	f00c b9de 	b.w	801c4c4 <problem_fetch+0x1ae60>
 8010108:	08028cd8 	.word	0x08028cd8
 801010c:	08023cc4 	.word	0x08023cc4
 8010110:	08028ce0 	.word	0x08028ce0
 8010114:	08028cec 	.word	0x08028cec
 8010118:	08023b04 	.word	0x08023b04
 801011c:	08028cfc 	.word	0x08028cfc
 8010120:	0802421c 	.word	0x0802421c
 8010124:	08028d10 	.word	0x08028d10
 8010128:	08028d1c 	.word	0x08028d1c
 801012c:	08023ff0 	.word	0x08023ff0
 8010130:	08028d2c 	.word	0x08028d2c
 8010134:	08023b24 	.word	0x08023b24
 8010138:	08028d3c 	.word	0x08028d3c
 801013c:	08028d48 	.word	0x08028d48
 8010140:	08023ec0 	.word	0x08023ec0
 8010144:	08028d58 	.word	0x08028d58
 8010148:	08028d64 	.word	0x08028d64
 801014c:	08028d70 	.word	0x08028d70
 8010150:	08028d80 	.word	0x08028d80
 8010154:	08028d94 	.word	0x08028d94
 8010158:	08028da4 	.word	0x08028da4
 801015c:	08023cac 	.word	0x08023cac
 8010160:	08028db8 	.word	0x08028db8
 8010164:	08028dc4 	.word	0x08028dc4
 8010168:	08028dd0 	.word	0x08028dd0
 801016c:	08028de0 	.word	0x08028de0
 8010170:	08023bbc 	.word	0x08023bbc
 8010174:	08028dec 	.word	0x08028dec
 8010178:	08028dfc 	.word	0x08028dfc
 801017c:	08023c48 	.word	0x08023c48
		case 430 :
			strcpy(p->name,"THE FUNERAL (RIP PINCH)");
 8010180:	687b      	ldr	r3, [r7, #4]
 8010182:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8010186:	4ac3      	ldr	r2, [pc, #780]	; (8010494 <problem_fetch+0xee30>)
 8010188:	461d      	mov	r5, r3
 801018a:	4614      	mov	r4, r2
 801018c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801018e:	6028      	str	r0, [r5, #0]
 8010190:	6069      	str	r1, [r5, #4]
 8010192:	60aa      	str	r2, [r5, #8]
 8010194:	60eb      	str	r3, [r5, #12]
 8010196:	cc03      	ldmia	r4!, {r0, r1}
 8010198:	6128      	str	r0, [r5, #16]
 801019a:	6169      	str	r1, [r5, #20]
			strcpy(p->grade,"6C+");
 801019c:	687b      	ldr	r3, [r7, #4]
 801019e:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80101a2:	4abd      	ldr	r2, [pc, #756]	; (8010498 <problem_fetch+0xee34>)
 80101a4:	6810      	ldr	r0, [r2, #0]
 80101a6:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 80101a8:	687b      	ldr	r3, [r7, #4]
 80101aa:	2206      	movs	r2, #6
 80101ac:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,D,G,D,G,I");
 80101ae:	687b      	ldr	r3, [r7, #4]
 80101b0:	33a4      	adds	r3, #164	; 0xa4
 80101b2:	4aba      	ldr	r2, [pc, #744]	; (801049c <problem_fetch+0xee38>)
 80101b4:	461c      	mov	r4, r3
 80101b6:	4613      	mov	r3, r2
 80101b8:	cb07      	ldmia	r3!, {r0, r1, r2}
 80101ba:	6020      	str	r0, [r4, #0]
 80101bc:	6061      	str	r1, [r4, #4]
 80101be:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,7,10,11,15,18");
 80101c0:	687b      	ldr	r3, [r7, #4]
 80101c2:	3304      	adds	r3, #4
 80101c4:	4ab6      	ldr	r2, [pc, #728]	; (80104a0 <problem_fetch+0xee3c>)
 80101c6:	461c      	mov	r4, r3
 80101c8:	4615      	mov	r5, r2
 80101ca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80101cc:	6020      	str	r0, [r4, #0]
 80101ce:	6061      	str	r1, [r4, #4]
 80101d0:	60a2      	str	r2, [r4, #8]
 80101d2:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 80101d4:	687b      	ldr	r3, [r7, #4]
 80101d6:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 80101da:	4ab2      	ldr	r2, [pc, #712]	; (80104a4 <problem_fetch+0xee40>)
 80101dc:	461c      	mov	r4, r3
 80101de:	4613      	mov	r3, r2
 80101e0:	cb07      	ldmia	r3!, {r0, r1, r2}
 80101e2:	6020      	str	r0, [r4, #0]
 80101e4:	6061      	str	r1, [r4, #4]
 80101e6:	60a2      	str	r2, [r4, #8]
			break;
 80101e8:	f00c b96c 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 431 :
			strcpy(p->name,"THE PINCH OF DEATH");
 80101ec:	687b      	ldr	r3, [r7, #4]
 80101ee:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80101f2:	4aad      	ldr	r2, [pc, #692]	; (80104a8 <problem_fetch+0xee44>)
 80101f4:	461d      	mov	r5, r3
 80101f6:	4614      	mov	r4, r2
 80101f8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80101fa:	6028      	str	r0, [r5, #0]
 80101fc:	6069      	str	r1, [r5, #4]
 80101fe:	60aa      	str	r2, [r5, #8]
 8010200:	60eb      	str	r3, [r5, #12]
 8010202:	8823      	ldrh	r3, [r4, #0]
 8010204:	78a2      	ldrb	r2, [r4, #2]
 8010206:	822b      	strh	r3, [r5, #16]
 8010208:	4613      	mov	r3, r2
 801020a:	74ab      	strb	r3, [r5, #18]
			strcpy(p->grade,"6C");
 801020c:	687b      	ldr	r3, [r7, #4]
 801020e:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8010212:	4aa6      	ldr	r2, [pc, #664]	; (80104ac <problem_fetch+0xee48>)
 8010214:	8811      	ldrh	r1, [r2, #0]
 8010216:	7892      	ldrb	r2, [r2, #2]
 8010218:	8019      	strh	r1, [r3, #0]
 801021a:	709a      	strb	r2, [r3, #2]
			p->moveSize = 6;
 801021c:	687b      	ldr	r3, [r7, #4]
 801021e:	2206      	movs	r2, #6
 8010220:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,D,G,D,D,A");
 8010222:	687b      	ldr	r3, [r7, #4]
 8010224:	33a4      	adds	r3, #164	; 0xa4
 8010226:	4aa2      	ldr	r2, [pc, #648]	; (80104b0 <problem_fetch+0xee4c>)
 8010228:	461c      	mov	r4, r3
 801022a:	4613      	mov	r3, r2
 801022c:	cb07      	ldmia	r3!, {r0, r1, r2}
 801022e:	6020      	str	r0, [r4, #0]
 8010230:	6061      	str	r1, [r4, #4]
 8010232:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,7,10,11,15,18");
 8010234:	687b      	ldr	r3, [r7, #4]
 8010236:	3304      	adds	r3, #4
 8010238:	4a99      	ldr	r2, [pc, #612]	; (80104a0 <problem_fetch+0xee3c>)
 801023a:	461c      	mov	r4, r3
 801023c:	4615      	mov	r5, r2
 801023e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010240:	6020      	str	r0, [r4, #0]
 8010242:	6061      	str	r1, [r4, #4]
 8010244:	60a2      	str	r2, [r4, #8]
 8010246:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 8010248:	687b      	ldr	r3, [r7, #4]
 801024a:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 801024e:	4a95      	ldr	r2, [pc, #596]	; (80104a4 <problem_fetch+0xee40>)
 8010250:	461c      	mov	r4, r3
 8010252:	4613      	mov	r3, r2
 8010254:	cb07      	ldmia	r3!, {r0, r1, r2}
 8010256:	6020      	str	r0, [r4, #0]
 8010258:	6061      	str	r1, [r4, #4]
 801025a:	60a2      	str	r2, [r4, #8]
			break;
 801025c:	f00c b932 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 432 :
			strcpy(p->name,"COBRA REALE");
 8010260:	687b      	ldr	r3, [r7, #4]
 8010262:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8010266:	4a93      	ldr	r2, [pc, #588]	; (80104b4 <problem_fetch+0xee50>)
 8010268:	461c      	mov	r4, r3
 801026a:	4613      	mov	r3, r2
 801026c:	cb07      	ldmia	r3!, {r0, r1, r2}
 801026e:	6020      	str	r0, [r4, #0]
 8010270:	6061      	str	r1, [r4, #4]
 8010272:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade,"7A+");
 8010274:	687b      	ldr	r3, [r7, #4]
 8010276:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801027a:	4a8f      	ldr	r2, [pc, #572]	; (80104b8 <problem_fetch+0xee54>)
 801027c:	6810      	ldr	r0, [r2, #0]
 801027e:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 8010280:	687b      	ldr	r3, [r7, #4]
 8010282:	2206      	movs	r2, #6
 8010284:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,E,E,B,E,A");
 8010286:	687b      	ldr	r3, [r7, #4]
 8010288:	33a4      	adds	r3, #164	; 0xa4
 801028a:	4a8c      	ldr	r2, [pc, #560]	; (80104bc <problem_fetch+0xee58>)
 801028c:	461c      	mov	r4, r3
 801028e:	4613      	mov	r3, r2
 8010290:	cb07      	ldmia	r3!, {r0, r1, r2}
 8010292:	6020      	str	r0, [r4, #0]
 8010294:	6061      	str	r1, [r4, #4]
 8010296:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,6,9,12,14,18");
 8010298:	687b      	ldr	r3, [r7, #4]
 801029a:	3304      	adds	r3, #4
 801029c:	4a88      	ldr	r2, [pc, #544]	; (80104c0 <problem_fetch+0xee5c>)
 801029e:	461c      	mov	r4, r3
 80102a0:	4613      	mov	r3, r2
 80102a2:	cb07      	ldmia	r3!, {r0, r1, r2}
 80102a4:	6020      	str	r0, [r4, #0]
 80102a6:	6061      	str	r1, [r4, #4]
 80102a8:	60a2      	str	r2, [r4, #8]
 80102aa:	881a      	ldrh	r2, [r3, #0]
 80102ac:	789b      	ldrb	r3, [r3, #2]
 80102ae:	81a2      	strh	r2, [r4, #12]
 80102b0:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish,"s,s,d,d,d,e");
 80102b2:	687b      	ldr	r3, [r7, #4]
 80102b4:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 80102b8:	4a82      	ldr	r2, [pc, #520]	; (80104c4 <problem_fetch+0xee60>)
 80102ba:	461c      	mov	r4, r3
 80102bc:	4613      	mov	r3, r2
 80102be:	cb07      	ldmia	r3!, {r0, r1, r2}
 80102c0:	6020      	str	r0, [r4, #0]
 80102c2:	6061      	str	r1, [r4, #4]
 80102c4:	60a2      	str	r2, [r4, #8]
			break;
 80102c6:	f00c b8fd 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 433 :
			strcpy(p->name,"OMBRA");
 80102ca:	687b      	ldr	r3, [r7, #4]
 80102cc:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80102d0:	4a7d      	ldr	r2, [pc, #500]	; (80104c8 <problem_fetch+0xee64>)
 80102d2:	6810      	ldr	r0, [r2, #0]
 80102d4:	6018      	str	r0, [r3, #0]
 80102d6:	8892      	ldrh	r2, [r2, #4]
 80102d8:	809a      	strh	r2, [r3, #4]
			strcpy(p->grade,"6C+");
 80102da:	687b      	ldr	r3, [r7, #4]
 80102dc:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80102e0:	4a6d      	ldr	r2, [pc, #436]	; (8010498 <problem_fetch+0xee34>)
 80102e2:	6810      	ldr	r0, [r2, #0]
 80102e4:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 80102e6:	687b      	ldr	r3, [r7, #4]
 80102e8:	2207      	movs	r2, #7
 80102ea:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,H,E,F,E,G,D");
 80102ec:	687b      	ldr	r3, [r7, #4]
 80102ee:	33a4      	adds	r3, #164	; 0xa4
 80102f0:	4a76      	ldr	r2, [pc, #472]	; (80104cc <problem_fetch+0xee68>)
 80102f2:	461c      	mov	r4, r3
 80102f4:	4613      	mov	r3, r2
 80102f6:	cb07      	ldmia	r3!, {r0, r1, r2}
 80102f8:	6020      	str	r0, [r4, #0]
 80102fa:	6061      	str	r1, [r4, #4]
 80102fc:	60a2      	str	r2, [r4, #8]
 80102fe:	881b      	ldrh	r3, [r3, #0]
 8010300:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,8,8,11,14,17,18");
 8010302:	687b      	ldr	r3, [r7, #4]
 8010304:	3304      	adds	r3, #4
 8010306:	4a72      	ldr	r2, [pc, #456]	; (80104d0 <problem_fetch+0xee6c>)
 8010308:	461d      	mov	r5, r3
 801030a:	4614      	mov	r4, r2
 801030c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801030e:	6028      	str	r0, [r5, #0]
 8010310:	6069      	str	r1, [r5, #4]
 8010312:	60aa      	str	r2, [r5, #8]
 8010314:	60eb      	str	r3, [r5, #12]
 8010316:	8823      	ldrh	r3, [r4, #0]
 8010318:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 801031a:	687b      	ldr	r3, [r7, #4]
 801031c:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8010320:	4a6c      	ldr	r2, [pc, #432]	; (80104d4 <problem_fetch+0xee70>)
 8010322:	461c      	mov	r4, r3
 8010324:	4613      	mov	r3, r2
 8010326:	cb07      	ldmia	r3!, {r0, r1, r2}
 8010328:	6020      	str	r0, [r4, #0]
 801032a:	6061      	str	r1, [r4, #4]
 801032c:	60a2      	str	r2, [r4, #8]
 801032e:	881b      	ldrh	r3, [r3, #0]
 8010330:	81a3      	strh	r3, [r4, #12]
			break;
 8010332:	f00c b8c7 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 434 :
			strcpy(p->name,"CORNALBA");
 8010336:	687b      	ldr	r3, [r7, #4]
 8010338:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801033c:	4966      	ldr	r1, [pc, #408]	; (80104d8 <problem_fetch+0xee74>)
 801033e:	461a      	mov	r2, r3
 8010340:	460b      	mov	r3, r1
 8010342:	cb03      	ldmia	r3!, {r0, r1}
 8010344:	6010      	str	r0, [r2, #0]
 8010346:	6051      	str	r1, [r2, #4]
 8010348:	781b      	ldrb	r3, [r3, #0]
 801034a:	7213      	strb	r3, [r2, #8]
			strcpy(p->grade,"7A+");
 801034c:	687b      	ldr	r3, [r7, #4]
 801034e:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8010352:	4a59      	ldr	r2, [pc, #356]	; (80104b8 <problem_fetch+0xee54>)
 8010354:	6810      	ldr	r0, [r2, #0]
 8010356:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 8010358:	687b      	ldr	r3, [r7, #4]
 801035a:	2207      	movs	r2, #7
 801035c:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"C,E,H,H,J,K,I");
 801035e:	687b      	ldr	r3, [r7, #4]
 8010360:	33a4      	adds	r3, #164	; 0xa4
 8010362:	4a5e      	ldr	r2, [pc, #376]	; (80104dc <problem_fetch+0xee78>)
 8010364:	461c      	mov	r4, r3
 8010366:	4613      	mov	r3, r2
 8010368:	cb07      	ldmia	r3!, {r0, r1, r2}
 801036a:	6020      	str	r0, [r4, #0]
 801036c:	6061      	str	r1, [r4, #4]
 801036e:	60a2      	str	r2, [r4, #8]
 8010370:	881b      	ldrh	r3, [r3, #0]
 8010372:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,6,8,12,12,16,18");
 8010374:	687b      	ldr	r3, [r7, #4]
 8010376:	3304      	adds	r3, #4
 8010378:	4a59      	ldr	r2, [pc, #356]	; (80104e0 <problem_fetch+0xee7c>)
 801037a:	461d      	mov	r5, r3
 801037c:	4614      	mov	r4, r2
 801037e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8010380:	6028      	str	r0, [r5, #0]
 8010382:	6069      	str	r1, [r5, #4]
 8010384:	60aa      	str	r2, [r5, #8]
 8010386:	60eb      	str	r3, [r5, #12]
 8010388:	8823      	ldrh	r3, [r4, #0]
 801038a:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,s,d,d,d,d,e");
 801038c:	687b      	ldr	r3, [r7, #4]
 801038e:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8010392:	4a54      	ldr	r2, [pc, #336]	; (80104e4 <problem_fetch+0xee80>)
 8010394:	461c      	mov	r4, r3
 8010396:	4613      	mov	r3, r2
 8010398:	cb07      	ldmia	r3!, {r0, r1, r2}
 801039a:	6020      	str	r0, [r4, #0]
 801039c:	6061      	str	r1, [r4, #4]
 801039e:	60a2      	str	r2, [r4, #8]
 80103a0:	881b      	ldrh	r3, [r3, #0]
 80103a2:	81a3      	strh	r3, [r4, #12]
			break;
 80103a4:	f00c b88e 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 435 :
			strcpy(p->name,"BIOGRAPHIE");
 80103a8:	687b      	ldr	r3, [r7, #4]
 80103aa:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80103ae:	494e      	ldr	r1, [pc, #312]	; (80104e8 <problem_fetch+0xee84>)
 80103b0:	461a      	mov	r2, r3
 80103b2:	460b      	mov	r3, r1
 80103b4:	cb03      	ldmia	r3!, {r0, r1}
 80103b6:	6010      	str	r0, [r2, #0]
 80103b8:	6051      	str	r1, [r2, #4]
 80103ba:	8819      	ldrh	r1, [r3, #0]
 80103bc:	789b      	ldrb	r3, [r3, #2]
 80103be:	8111      	strh	r1, [r2, #8]
 80103c0:	7293      	strb	r3, [r2, #10]
			strcpy(p->grade,"7A");
 80103c2:	687b      	ldr	r3, [r7, #4]
 80103c4:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80103c8:	4a48      	ldr	r2, [pc, #288]	; (80104ec <problem_fetch+0xee88>)
 80103ca:	8811      	ldrh	r1, [r2, #0]
 80103cc:	7892      	ldrb	r2, [r2, #2]
 80103ce:	8019      	strh	r1, [r3, #0]
 80103d0:	709a      	strb	r2, [r3, #2]
			p->moveSize = 7;
 80103d2:	687b      	ldr	r3, [r7, #4]
 80103d4:	2207      	movs	r2, #7
 80103d6:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,J,K,H,H,E,D");
 80103d8:	687b      	ldr	r3, [r7, #4]
 80103da:	33a4      	adds	r3, #164	; 0xa4
 80103dc:	4a44      	ldr	r2, [pc, #272]	; (80104f0 <problem_fetch+0xee8c>)
 80103de:	461c      	mov	r4, r3
 80103e0:	4613      	mov	r3, r2
 80103e2:	cb07      	ldmia	r3!, {r0, r1, r2}
 80103e4:	6020      	str	r0, [r4, #0]
 80103e6:	6061      	str	r1, [r4, #4]
 80103e8:	60a2      	str	r2, [r4, #8]
 80103ea:	881b      	ldrh	r3, [r3, #0]
 80103ec:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"6,5,9,12,16,16,18");
 80103ee:	687b      	ldr	r3, [r7, #4]
 80103f0:	3304      	adds	r3, #4
 80103f2:	4a40      	ldr	r2, [pc, #256]	; (80104f4 <problem_fetch+0xee90>)
 80103f4:	461d      	mov	r5, r3
 80103f6:	4614      	mov	r4, r2
 80103f8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80103fa:	6028      	str	r0, [r5, #0]
 80103fc:	6069      	str	r1, [r5, #4]
 80103fe:	60aa      	str	r2, [r5, #8]
 8010400:	60eb      	str	r3, [r5, #12]
 8010402:	8823      	ldrh	r3, [r4, #0]
 8010404:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,s,d,d,d,d,e");
 8010406:	687b      	ldr	r3, [r7, #4]
 8010408:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 801040c:	4a35      	ldr	r2, [pc, #212]	; (80104e4 <problem_fetch+0xee80>)
 801040e:	461c      	mov	r4, r3
 8010410:	4613      	mov	r3, r2
 8010412:	cb07      	ldmia	r3!, {r0, r1, r2}
 8010414:	6020      	str	r0, [r4, #0]
 8010416:	6061      	str	r1, [r4, #4]
 8010418:	60a2      	str	r2, [r4, #8]
 801041a:	881b      	ldrh	r3, [r3, #0]
 801041c:	81a3      	strh	r3, [r4, #12]
			break;
 801041e:	f00c b851 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 436 :
			strcpy(p->name,"LITTLEFINGER");
 8010422:	687b      	ldr	r3, [r7, #4]
 8010424:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8010428:	4a33      	ldr	r2, [pc, #204]	; (80104f8 <problem_fetch+0xee94>)
 801042a:	461c      	mov	r4, r3
 801042c:	4613      	mov	r3, r2
 801042e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8010430:	6020      	str	r0, [r4, #0]
 8010432:	6061      	str	r1, [r4, #4]
 8010434:	60a2      	str	r2, [r4, #8]
 8010436:	781b      	ldrb	r3, [r3, #0]
 8010438:	7323      	strb	r3, [r4, #12]
			strcpy(p->grade,"6C");
 801043a:	687b      	ldr	r3, [r7, #4]
 801043c:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8010440:	4a1a      	ldr	r2, [pc, #104]	; (80104ac <problem_fetch+0xee48>)
 8010442:	8811      	ldrh	r1, [r2, #0]
 8010444:	7892      	ldrb	r2, [r2, #2]
 8010446:	8019      	strh	r1, [r3, #0]
 8010448:	709a      	strb	r2, [r3, #2]
			p->moveSize = 5;
 801044a:	687b      	ldr	r3, [r7, #4]
 801044c:	2205      	movs	r2, #5
 801044e:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,E,H,H,I");
 8010450:	687b      	ldr	r3, [r7, #4]
 8010452:	33a4      	adds	r3, #164	; 0xa4
 8010454:	4929      	ldr	r1, [pc, #164]	; (80104fc <problem_fetch+0xee98>)
 8010456:	461a      	mov	r2, r3
 8010458:	460b      	mov	r3, r1
 801045a:	cb03      	ldmia	r3!, {r0, r1}
 801045c:	6010      	str	r0, [r2, #0]
 801045e:	6051      	str	r1, [r2, #4]
 8010460:	881b      	ldrh	r3, [r3, #0]
 8010462:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"4,8,13,16,18");
 8010464:	687b      	ldr	r3, [r7, #4]
 8010466:	3304      	adds	r3, #4
 8010468:	4a25      	ldr	r2, [pc, #148]	; (8010500 <problem_fetch+0xee9c>)
 801046a:	461c      	mov	r4, r3
 801046c:	4613      	mov	r3, r2
 801046e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8010470:	6020      	str	r0, [r4, #0]
 8010472:	6061      	str	r1, [r4, #4]
 8010474:	60a2      	str	r2, [r4, #8]
 8010476:	781b      	ldrb	r3, [r3, #0]
 8010478:	7323      	strb	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,e");
 801047a:	687b      	ldr	r3, [r7, #4]
 801047c:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8010480:	4920      	ldr	r1, [pc, #128]	; (8010504 <problem_fetch+0xeea0>)
 8010482:	461a      	mov	r2, r3
 8010484:	460b      	mov	r3, r1
 8010486:	cb03      	ldmia	r3!, {r0, r1}
 8010488:	6010      	str	r0, [r2, #0]
 801048a:	6051      	str	r1, [r2, #4]
 801048c:	881b      	ldrh	r3, [r3, #0]
 801048e:	8113      	strh	r3, [r2, #8]
			break;
 8010490:	f00c b818 	b.w	801c4c4 <problem_fetch+0x1ae60>
 8010494:	08028e14 	.word	0x08028e14
 8010498:	08023bbc 	.word	0x08023bbc
 801049c:	08028e2c 	.word	0x08028e2c
 80104a0:	08028e38 	.word	0x08028e38
 80104a4:	08023ec0 	.word	0x08023ec0
 80104a8:	08028e48 	.word	0x08028e48
 80104ac:	08023bf0 	.word	0x08023bf0
 80104b0:	08028e5c 	.word	0x08028e5c
 80104b4:	08028e68 	.word	0x08028e68
 80104b8:	08023cc4 	.word	0x08023cc4
 80104bc:	08028e74 	.word	0x08028e74
 80104c0:	08028e80 	.word	0x08028e80
 80104c4:	08023b04 	.word	0x08023b04
 80104c8:	08028e90 	.word	0x08028e90
 80104cc:	08028e98 	.word	0x08028e98
 80104d0:	08028ea8 	.word	0x08028ea8
 80104d4:	08023cac 	.word	0x08023cac
 80104d8:	08028ebc 	.word	0x08028ebc
 80104dc:	08028ec8 	.word	0x08028ec8
 80104e0:	08028ed8 	.word	0x08028ed8
 80104e4:	08023b9c 	.word	0x08023b9c
 80104e8:	08028eec 	.word	0x08028eec
 80104ec:	08023ae4 	.word	0x08023ae4
 80104f0:	08028ef8 	.word	0x08028ef8
 80104f4:	08028f08 	.word	0x08028f08
 80104f8:	08028f1c 	.word	0x08028f1c
 80104fc:	08028f2c 	.word	0x08028f2c
 8010500:	08028f38 	.word	0x08028f38
 8010504:	08023ff0 	.word	0x08023ff0
		case 437 :
			strcpy(p->name,"THE POWER OF 9");
 8010508:	687b      	ldr	r3, [r7, #4]
 801050a:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801050e:	4aad      	ldr	r2, [pc, #692]	; (80107c4 <problem_fetch+0xf160>)
 8010510:	461c      	mov	r4, r3
 8010512:	4613      	mov	r3, r2
 8010514:	cb07      	ldmia	r3!, {r0, r1, r2}
 8010516:	6020      	str	r0, [r4, #0]
 8010518:	6061      	str	r1, [r4, #4]
 801051a:	60a2      	str	r2, [r4, #8]
 801051c:	881a      	ldrh	r2, [r3, #0]
 801051e:	789b      	ldrb	r3, [r3, #2]
 8010520:	81a2      	strh	r2, [r4, #12]
 8010522:	73a3      	strb	r3, [r4, #14]
			strcpy(p->grade,"6B+");
 8010524:	687b      	ldr	r3, [r7, #4]
 8010526:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801052a:	4aa7      	ldr	r2, [pc, #668]	; (80107c8 <problem_fetch+0xf164>)
 801052c:	6810      	ldr	r0, [r2, #0]
 801052e:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 8010530:	687b      	ldr	r3, [r7, #4]
 8010532:	2207      	movs	r2, #7
 8010534:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"H,J,H,E,E,E,I");
 8010536:	687b      	ldr	r3, [r7, #4]
 8010538:	33a4      	adds	r3, #164	; 0xa4
 801053a:	4aa4      	ldr	r2, [pc, #656]	; (80107cc <problem_fetch+0xf168>)
 801053c:	461c      	mov	r4, r3
 801053e:	4613      	mov	r3, r2
 8010540:	cb07      	ldmia	r3!, {r0, r1, r2}
 8010542:	6020      	str	r0, [r4, #0]
 8010544:	6061      	str	r1, [r4, #4]
 8010546:	60a2      	str	r2, [r4, #8]
 8010548:	881b      	ldrh	r3, [r3, #0]
 801054a:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,5,8,8,12,16,18");
 801054c:	687b      	ldr	r3, [r7, #4]
 801054e:	3304      	adds	r3, #4
 8010550:	4a9f      	ldr	r2, [pc, #636]	; (80107d0 <problem_fetch+0xf16c>)
 8010552:	461d      	mov	r5, r3
 8010554:	4614      	mov	r4, r2
 8010556:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8010558:	6028      	str	r0, [r5, #0]
 801055a:	6069      	str	r1, [r5, #4]
 801055c:	60aa      	str	r2, [r5, #8]
 801055e:	60eb      	str	r3, [r5, #12]
 8010560:	7823      	ldrb	r3, [r4, #0]
 8010562:	742b      	strb	r3, [r5, #16]
			strcpy(p->startFinish,"s,s,d,d,d,d,e");
 8010564:	687b      	ldr	r3, [r7, #4]
 8010566:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 801056a:	4a9a      	ldr	r2, [pc, #616]	; (80107d4 <problem_fetch+0xf170>)
 801056c:	461c      	mov	r4, r3
 801056e:	4613      	mov	r3, r2
 8010570:	cb07      	ldmia	r3!, {r0, r1, r2}
 8010572:	6020      	str	r0, [r4, #0]
 8010574:	6061      	str	r1, [r4, #4]
 8010576:	60a2      	str	r2, [r4, #8]
 8010578:	881b      	ldrh	r3, [r3, #0]
 801057a:	81a3      	strh	r3, [r4, #12]
			break;
 801057c:	f00b bfa2 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 438 :
			strcpy(p->name,"PUSSY DAVAILLE");
 8010580:	687b      	ldr	r3, [r7, #4]
 8010582:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8010586:	4a94      	ldr	r2, [pc, #592]	; (80107d8 <problem_fetch+0xf174>)
 8010588:	461c      	mov	r4, r3
 801058a:	4613      	mov	r3, r2
 801058c:	cb07      	ldmia	r3!, {r0, r1, r2}
 801058e:	6020      	str	r0, [r4, #0]
 8010590:	6061      	str	r1, [r4, #4]
 8010592:	60a2      	str	r2, [r4, #8]
 8010594:	881a      	ldrh	r2, [r3, #0]
 8010596:	789b      	ldrb	r3, [r3, #2]
 8010598:	81a2      	strh	r2, [r4, #12]
 801059a:	73a3      	strb	r3, [r4, #14]
			strcpy(p->grade,"6C");
 801059c:	687b      	ldr	r3, [r7, #4]
 801059e:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80105a2:	4a8e      	ldr	r2, [pc, #568]	; (80107dc <problem_fetch+0xf178>)
 80105a4:	8811      	ldrh	r1, [r2, #0]
 80105a6:	7892      	ldrb	r2, [r2, #2]
 80105a8:	8019      	strh	r1, [r3, #0]
 80105aa:	709a      	strb	r2, [r3, #2]
			p->moveSize = 7;
 80105ac:	687b      	ldr	r3, [r7, #4]
 80105ae:	2207      	movs	r2, #7
 80105b0:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"E,C,C,G,E,B,D");
 80105b2:	687b      	ldr	r3, [r7, #4]
 80105b4:	33a4      	adds	r3, #164	; 0xa4
 80105b6:	4a8a      	ldr	r2, [pc, #552]	; (80107e0 <problem_fetch+0xf17c>)
 80105b8:	461c      	mov	r4, r3
 80105ba:	4613      	mov	r3, r2
 80105bc:	cb07      	ldmia	r3!, {r0, r1, r2}
 80105be:	6020      	str	r0, [r4, #0]
 80105c0:	6061      	str	r1, [r4, #4]
 80105c2:	60a2      	str	r2, [r4, #8]
 80105c4:	881b      	ldrh	r3, [r3, #0]
 80105c6:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"6,5,8,9,12,15,18");
 80105c8:	687b      	ldr	r3, [r7, #4]
 80105ca:	3304      	adds	r3, #4
 80105cc:	4a85      	ldr	r2, [pc, #532]	; (80107e4 <problem_fetch+0xf180>)
 80105ce:	461d      	mov	r5, r3
 80105d0:	4614      	mov	r4, r2
 80105d2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80105d4:	6028      	str	r0, [r5, #0]
 80105d6:	6069      	str	r1, [r5, #4]
 80105d8:	60aa      	str	r2, [r5, #8]
 80105da:	60eb      	str	r3, [r5, #12]
 80105dc:	7823      	ldrb	r3, [r4, #0]
 80105de:	742b      	strb	r3, [r5, #16]
			strcpy(p->startFinish,"s,s,d,d,d,d,e");
 80105e0:	687b      	ldr	r3, [r7, #4]
 80105e2:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 80105e6:	4a7b      	ldr	r2, [pc, #492]	; (80107d4 <problem_fetch+0xf170>)
 80105e8:	461c      	mov	r4, r3
 80105ea:	4613      	mov	r3, r2
 80105ec:	cb07      	ldmia	r3!, {r0, r1, r2}
 80105ee:	6020      	str	r0, [r4, #0]
 80105f0:	6061      	str	r1, [r4, #4]
 80105f2:	60a2      	str	r2, [r4, #8]
 80105f4:	881b      	ldrh	r3, [r3, #0]
 80105f6:	81a3      	strh	r3, [r4, #12]
			break;
 80105f8:	f00b bf64 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 439 :
			strcpy(p->name,"IN THE PINES");
 80105fc:	687b      	ldr	r3, [r7, #4]
 80105fe:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8010602:	4a79      	ldr	r2, [pc, #484]	; (80107e8 <problem_fetch+0xf184>)
 8010604:	461c      	mov	r4, r3
 8010606:	4613      	mov	r3, r2
 8010608:	cb07      	ldmia	r3!, {r0, r1, r2}
 801060a:	6020      	str	r0, [r4, #0]
 801060c:	6061      	str	r1, [r4, #4]
 801060e:	60a2      	str	r2, [r4, #8]
 8010610:	781b      	ldrb	r3, [r3, #0]
 8010612:	7323      	strb	r3, [r4, #12]
			strcpy(p->grade,"6B+");
 8010614:	687b      	ldr	r3, [r7, #4]
 8010616:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801061a:	4a6b      	ldr	r2, [pc, #428]	; (80107c8 <problem_fetch+0xf164>)
 801061c:	6810      	ldr	r0, [r2, #0]
 801061e:	6018      	str	r0, [r3, #0]
			p->moveSize = 8;
 8010620:	687b      	ldr	r3, [r7, #4]
 8010622:	2208      	movs	r2, #8
 8010624:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,E,I,H,K,G,G,D");
 8010626:	687b      	ldr	r3, [r7, #4]
 8010628:	33a4      	adds	r3, #164	; 0xa4
 801062a:	4a70      	ldr	r2, [pc, #448]	; (80107ec <problem_fetch+0xf188>)
 801062c:	461c      	mov	r4, r3
 801062e:	4615      	mov	r5, r2
 8010630:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010632:	6020      	str	r0, [r4, #0]
 8010634:	6061      	str	r1, [r4, #4]
 8010636:	60a2      	str	r2, [r4, #8]
 8010638:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,8,10,12,14,15,17,18");
 801063a:	687b      	ldr	r3, [r7, #4]
 801063c:	3304      	adds	r3, #4
 801063e:	4a6c      	ldr	r2, [pc, #432]	; (80107f0 <problem_fetch+0xf18c>)
 8010640:	461d      	mov	r5, r3
 8010642:	4614      	mov	r4, r2
 8010644:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8010646:	6028      	str	r0, [r5, #0]
 8010648:	6069      	str	r1, [r5, #4]
 801064a:	60aa      	str	r2, [r5, #8]
 801064c:	60eb      	str	r3, [r5, #12]
 801064e:	6820      	ldr	r0, [r4, #0]
 8010650:	6128      	str	r0, [r5, #16]
 8010652:	88a3      	ldrh	r3, [r4, #4]
 8010654:	82ab      	strh	r3, [r5, #20]
			strcpy(p->startFinish,"s,d,d,d,d,d,d,e");
 8010656:	687b      	ldr	r3, [r7, #4]
 8010658:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 801065c:	4a65      	ldr	r2, [pc, #404]	; (80107f4 <problem_fetch+0xf190>)
 801065e:	461c      	mov	r4, r3
 8010660:	4615      	mov	r5, r2
 8010662:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010664:	6020      	str	r0, [r4, #0]
 8010666:	6061      	str	r1, [r4, #4]
 8010668:	60a2      	str	r2, [r4, #8]
 801066a:	60e3      	str	r3, [r4, #12]
			break;
 801066c:	f00b bf2a 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 440 :
			strcpy(p->name,"THE ONLY LIGHT");
 8010670:	687b      	ldr	r3, [r7, #4]
 8010672:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8010676:	4a60      	ldr	r2, [pc, #384]	; (80107f8 <problem_fetch+0xf194>)
 8010678:	461c      	mov	r4, r3
 801067a:	4613      	mov	r3, r2
 801067c:	cb07      	ldmia	r3!, {r0, r1, r2}
 801067e:	6020      	str	r0, [r4, #0]
 8010680:	6061      	str	r1, [r4, #4]
 8010682:	60a2      	str	r2, [r4, #8]
 8010684:	881a      	ldrh	r2, [r3, #0]
 8010686:	789b      	ldrb	r3, [r3, #2]
 8010688:	81a2      	strh	r2, [r4, #12]
 801068a:	73a3      	strb	r3, [r4, #14]
			strcpy(p->grade,"6C");
 801068c:	687b      	ldr	r3, [r7, #4]
 801068e:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8010692:	4a52      	ldr	r2, [pc, #328]	; (80107dc <problem_fetch+0xf178>)
 8010694:	8811      	ldrh	r1, [r2, #0]
 8010696:	7892      	ldrb	r2, [r2, #2]
 8010698:	8019      	strh	r1, [r3, #0]
 801069a:	709a      	strb	r2, [r3, #2]
			p->moveSize = 7;
 801069c:	687b      	ldr	r3, [r7, #4]
 801069e:	2207      	movs	r2, #7
 80106a0:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"E,G,H,F,H,E,D");
 80106a2:	687b      	ldr	r3, [r7, #4]
 80106a4:	33a4      	adds	r3, #164	; 0xa4
 80106a6:	4a55      	ldr	r2, [pc, #340]	; (80107fc <problem_fetch+0xf198>)
 80106a8:	461c      	mov	r4, r3
 80106aa:	4613      	mov	r3, r2
 80106ac:	cb07      	ldmia	r3!, {r0, r1, r2}
 80106ae:	6020      	str	r0, [r4, #0]
 80106b0:	6061      	str	r1, [r4, #4]
 80106b2:	60a2      	str	r2, [r4, #8]
 80106b4:	881b      	ldrh	r3, [r3, #0]
 80106b6:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"6,6,8,11,13,16,18");
 80106b8:	687b      	ldr	r3, [r7, #4]
 80106ba:	3304      	adds	r3, #4
 80106bc:	4a50      	ldr	r2, [pc, #320]	; (8010800 <problem_fetch+0xf19c>)
 80106be:	461d      	mov	r5, r3
 80106c0:	4614      	mov	r4, r2
 80106c2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80106c4:	6028      	str	r0, [r5, #0]
 80106c6:	6069      	str	r1, [r5, #4]
 80106c8:	60aa      	str	r2, [r5, #8]
 80106ca:	60eb      	str	r3, [r5, #12]
 80106cc:	8823      	ldrh	r3, [r4, #0]
 80106ce:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,s,d,d,d,d,e");
 80106d0:	687b      	ldr	r3, [r7, #4]
 80106d2:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 80106d6:	4a3f      	ldr	r2, [pc, #252]	; (80107d4 <problem_fetch+0xf170>)
 80106d8:	461c      	mov	r4, r3
 80106da:	4613      	mov	r3, r2
 80106dc:	cb07      	ldmia	r3!, {r0, r1, r2}
 80106de:	6020      	str	r0, [r4, #0]
 80106e0:	6061      	str	r1, [r4, #4]
 80106e2:	60a2      	str	r2, [r4, #8]
 80106e4:	881b      	ldrh	r3, [r3, #0]
 80106e6:	81a3      	strh	r3, [r4, #12]
			break;
 80106e8:	f00b beec 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 441 :
			strcpy(p->name,"DEFYING GRAVITY");
 80106ec:	687b      	ldr	r3, [r7, #4]
 80106ee:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80106f2:	4a44      	ldr	r2, [pc, #272]	; (8010804 <problem_fetch+0xf1a0>)
 80106f4:	461c      	mov	r4, r3
 80106f6:	4615      	mov	r5, r2
 80106f8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80106fa:	6020      	str	r0, [r4, #0]
 80106fc:	6061      	str	r1, [r4, #4]
 80106fe:	60a2      	str	r2, [r4, #8]
 8010700:	60e3      	str	r3, [r4, #12]
			strcpy(p->grade,"6C+");
 8010702:	687b      	ldr	r3, [r7, #4]
 8010704:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8010708:	4a3f      	ldr	r2, [pc, #252]	; (8010808 <problem_fetch+0xf1a4>)
 801070a:	6810      	ldr	r0, [r2, #0]
 801070c:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 801070e:	687b      	ldr	r3, [r7, #4]
 8010710:	2206      	movs	r2, #6
 8010712:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,I,F,H,E,D");
 8010714:	687b      	ldr	r3, [r7, #4]
 8010716:	33a4      	adds	r3, #164	; 0xa4
 8010718:	4a3c      	ldr	r2, [pc, #240]	; (801080c <problem_fetch+0xf1a8>)
 801071a:	461c      	mov	r4, r3
 801071c:	4613      	mov	r3, r2
 801071e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8010720:	6020      	str	r0, [r4, #0]
 8010722:	6061      	str	r1, [r4, #4]
 8010724:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,10,13,16,8,18");
 8010726:	687b      	ldr	r3, [r7, #4]
 8010728:	3304      	adds	r3, #4
 801072a:	4a39      	ldr	r2, [pc, #228]	; (8010810 <problem_fetch+0xf1ac>)
 801072c:	461c      	mov	r4, r3
 801072e:	4615      	mov	r5, r2
 8010730:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010732:	6020      	str	r0, [r4, #0]
 8010734:	6061      	str	r1, [r4, #4]
 8010736:	60a2      	str	r2, [r4, #8]
 8010738:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 801073a:	687b      	ldr	r3, [r7, #4]
 801073c:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8010740:	4a34      	ldr	r2, [pc, #208]	; (8010814 <problem_fetch+0xf1b0>)
 8010742:	461c      	mov	r4, r3
 8010744:	4613      	mov	r3, r2
 8010746:	cb07      	ldmia	r3!, {r0, r1, r2}
 8010748:	6020      	str	r0, [r4, #0]
 801074a:	6061      	str	r1, [r4, #4]
 801074c:	60a2      	str	r2, [r4, #8]
			break;
 801074e:	f00b beb9 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 442 :
			strcpy(p->name,"BIG PAW");
 8010752:	687b      	ldr	r3, [r7, #4]
 8010754:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8010758:	492f      	ldr	r1, [pc, #188]	; (8010818 <problem_fetch+0xf1b4>)
 801075a:	461a      	mov	r2, r3
 801075c:	460b      	mov	r3, r1
 801075e:	cb03      	ldmia	r3!, {r0, r1}
 8010760:	6010      	str	r0, [r2, #0]
 8010762:	6051      	str	r1, [r2, #4]
			strcpy(p->grade,"7B");
 8010764:	687b      	ldr	r3, [r7, #4]
 8010766:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801076a:	4a2c      	ldr	r2, [pc, #176]	; (801081c <problem_fetch+0xf1b8>)
 801076c:	8811      	ldrh	r1, [r2, #0]
 801076e:	7892      	ldrb	r2, [r2, #2]
 8010770:	8019      	strh	r1, [r3, #0]
 8010772:	709a      	strb	r2, [r3, #2]
			p->moveSize = 7;
 8010774:	687b      	ldr	r3, [r7, #4]
 8010776:	2207      	movs	r2, #7
 8010778:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"E,C,I,H,K,E,I");
 801077a:	687b      	ldr	r3, [r7, #4]
 801077c:	33a4      	adds	r3, #164	; 0xa4
 801077e:	4a28      	ldr	r2, [pc, #160]	; (8010820 <problem_fetch+0xf1bc>)
 8010780:	461c      	mov	r4, r3
 8010782:	4613      	mov	r3, r2
 8010784:	cb07      	ldmia	r3!, {r0, r1, r2}
 8010786:	6020      	str	r0, [r4, #0]
 8010788:	6061      	str	r1, [r4, #4]
 801078a:	60a2      	str	r2, [r4, #8]
 801078c:	881b      	ldrh	r3, [r3, #0]
 801078e:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"6,5,9,12,16,9,18");
 8010790:	687b      	ldr	r3, [r7, #4]
 8010792:	3304      	adds	r3, #4
 8010794:	4a23      	ldr	r2, [pc, #140]	; (8010824 <problem_fetch+0xf1c0>)
 8010796:	461d      	mov	r5, r3
 8010798:	4614      	mov	r4, r2
 801079a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801079c:	6028      	str	r0, [r5, #0]
 801079e:	6069      	str	r1, [r5, #4]
 80107a0:	60aa      	str	r2, [r5, #8]
 80107a2:	60eb      	str	r3, [r5, #12]
 80107a4:	7823      	ldrb	r3, [r4, #0]
 80107a6:	742b      	strb	r3, [r5, #16]
			strcpy(p->startFinish,"s,s,d,d,d,d,e");
 80107a8:	687b      	ldr	r3, [r7, #4]
 80107aa:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 80107ae:	4a09      	ldr	r2, [pc, #36]	; (80107d4 <problem_fetch+0xf170>)
 80107b0:	461c      	mov	r4, r3
 80107b2:	4613      	mov	r3, r2
 80107b4:	cb07      	ldmia	r3!, {r0, r1, r2}
 80107b6:	6020      	str	r0, [r4, #0]
 80107b8:	6061      	str	r1, [r4, #4]
 80107ba:	60a2      	str	r2, [r4, #8]
 80107bc:	881b      	ldrh	r3, [r3, #0]
 80107be:	81a3      	strh	r3, [r4, #12]
			break;
 80107c0:	f00b be80 	b.w	801c4c4 <problem_fetch+0x1ae60>
 80107c4:	08028f48 	.word	0x08028f48
 80107c8:	08023b24 	.word	0x08023b24
 80107cc:	08028f58 	.word	0x08028f58
 80107d0:	08028f68 	.word	0x08028f68
 80107d4:	08023b9c 	.word	0x08023b9c
 80107d8:	08028f7c 	.word	0x08028f7c
 80107dc:	08023bf0 	.word	0x08023bf0
 80107e0:	08028f8c 	.word	0x08028f8c
 80107e4:	08028f9c 	.word	0x08028f9c
 80107e8:	08028fb0 	.word	0x08028fb0
 80107ec:	08028fc0 	.word	0x08028fc0
 80107f0:	08028fd0 	.word	0x08028fd0
 80107f4:	08023d34 	.word	0x08023d34
 80107f8:	08028fe8 	.word	0x08028fe8
 80107fc:	08028ff8 	.word	0x08028ff8
 8010800:	08029008 	.word	0x08029008
 8010804:	0802901c 	.word	0x0802901c
 8010808:	08023bbc 	.word	0x08023bbc
 801080c:	0802902c 	.word	0x0802902c
 8010810:	08029038 	.word	0x08029038
 8010814:	08023ec0 	.word	0x08023ec0
 8010818:	08029048 	.word	0x08029048
 801081c:	0802421c 	.word	0x0802421c
 8010820:	08029050 	.word	0x08029050
 8010824:	08029060 	.word	0x08029060
		case 443 :
			strcpy(p->name,"UGLY LITTLE PROBLEM");
 8010828:	687b      	ldr	r3, [r7, #4]
 801082a:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801082e:	4aaa      	ldr	r2, [pc, #680]	; (8010ad8 <problem_fetch+0xf474>)
 8010830:	461d      	mov	r5, r3
 8010832:	4614      	mov	r4, r2
 8010834:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8010836:	6028      	str	r0, [r5, #0]
 8010838:	6069      	str	r1, [r5, #4]
 801083a:	60aa      	str	r2, [r5, #8]
 801083c:	60eb      	str	r3, [r5, #12]
 801083e:	6820      	ldr	r0, [r4, #0]
 8010840:	6128      	str	r0, [r5, #16]
			strcpy(p->grade,"7A");
 8010842:	687b      	ldr	r3, [r7, #4]
 8010844:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8010848:	4aa4      	ldr	r2, [pc, #656]	; (8010adc <problem_fetch+0xf478>)
 801084a:	8811      	ldrh	r1, [r2, #0]
 801084c:	7892      	ldrb	r2, [r2, #2]
 801084e:	8019      	strh	r1, [r3, #0]
 8010850:	709a      	strb	r2, [r3, #2]
			p->moveSize = 5;
 8010852:	687b      	ldr	r3, [r7, #4]
 8010854:	2205      	movs	r2, #5
 8010856:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"C,D,B,B,A");
 8010858:	687b      	ldr	r3, [r7, #4]
 801085a:	33a4      	adds	r3, #164	; 0xa4
 801085c:	49a0      	ldr	r1, [pc, #640]	; (8010ae0 <problem_fetch+0xf47c>)
 801085e:	461a      	mov	r2, r3
 8010860:	460b      	mov	r3, r1
 8010862:	cb03      	ldmia	r3!, {r0, r1}
 8010864:	6010      	str	r0, [r2, #0]
 8010866:	6051      	str	r1, [r2, #4]
 8010868:	881b      	ldrh	r3, [r3, #0]
 801086a:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"5,7,10,15,18");
 801086c:	687b      	ldr	r3, [r7, #4]
 801086e:	3304      	adds	r3, #4
 8010870:	4a9c      	ldr	r2, [pc, #624]	; (8010ae4 <problem_fetch+0xf480>)
 8010872:	461c      	mov	r4, r3
 8010874:	4613      	mov	r3, r2
 8010876:	cb07      	ldmia	r3!, {r0, r1, r2}
 8010878:	6020      	str	r0, [r4, #0]
 801087a:	6061      	str	r1, [r4, #4]
 801087c:	60a2      	str	r2, [r4, #8]
 801087e:	781b      	ldrb	r3, [r3, #0]
 8010880:	7323      	strb	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,e");
 8010882:	687b      	ldr	r3, [r7, #4]
 8010884:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8010888:	4997      	ldr	r1, [pc, #604]	; (8010ae8 <problem_fetch+0xf484>)
 801088a:	461a      	mov	r2, r3
 801088c:	460b      	mov	r3, r1
 801088e:	cb03      	ldmia	r3!, {r0, r1}
 8010890:	6010      	str	r0, [r2, #0]
 8010892:	6051      	str	r1, [r2, #4]
 8010894:	881b      	ldrh	r3, [r3, #0]
 8010896:	8113      	strh	r3, [r2, #8]
			break;
 8010898:	f00b be14 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 444 :
			strcpy(p->name,"SHOULDER STRIKE");
 801089c:	687b      	ldr	r3, [r7, #4]
 801089e:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80108a2:	4a92      	ldr	r2, [pc, #584]	; (8010aec <problem_fetch+0xf488>)
 80108a4:	461c      	mov	r4, r3
 80108a6:	4615      	mov	r5, r2
 80108a8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80108aa:	6020      	str	r0, [r4, #0]
 80108ac:	6061      	str	r1, [r4, #4]
 80108ae:	60a2      	str	r2, [r4, #8]
 80108b0:	60e3      	str	r3, [r4, #12]
			strcpy(p->grade,"7B");
 80108b2:	687b      	ldr	r3, [r7, #4]
 80108b4:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80108b8:	4a8d      	ldr	r2, [pc, #564]	; (8010af0 <problem_fetch+0xf48c>)
 80108ba:	8811      	ldrh	r1, [r2, #0]
 80108bc:	7892      	ldrb	r2, [r2, #2]
 80108be:	8019      	strh	r1, [r3, #0]
 80108c0:	709a      	strb	r2, [r3, #2]
			p->moveSize = 7;
 80108c2:	687b      	ldr	r3, [r7, #4]
 80108c4:	2207      	movs	r2, #7
 80108c6:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,E,H,G,H,I,I");
 80108c8:	687b      	ldr	r3, [r7, #4]
 80108ca:	33a4      	adds	r3, #164	; 0xa4
 80108cc:	4a89      	ldr	r2, [pc, #548]	; (8010af4 <problem_fetch+0xf490>)
 80108ce:	461c      	mov	r4, r3
 80108d0:	4613      	mov	r3, r2
 80108d2:	cb07      	ldmia	r3!, {r0, r1, r2}
 80108d4:	6020      	str	r0, [r4, #0]
 80108d6:	6061      	str	r1, [r4, #4]
 80108d8:	60a2      	str	r2, [r4, #8]
 80108da:	881b      	ldrh	r3, [r3, #0]
 80108dc:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,9,12,15,5,7,18");
 80108de:	687b      	ldr	r3, [r7, #4]
 80108e0:	3304      	adds	r3, #4
 80108e2:	4a85      	ldr	r2, [pc, #532]	; (8010af8 <problem_fetch+0xf494>)
 80108e4:	461d      	mov	r5, r3
 80108e6:	4614      	mov	r4, r2
 80108e8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80108ea:	6028      	str	r0, [r5, #0]
 80108ec:	6069      	str	r1, [r5, #4]
 80108ee:	60aa      	str	r2, [r5, #8]
 80108f0:	60eb      	str	r3, [r5, #12]
 80108f2:	7823      	ldrb	r3, [r4, #0]
 80108f4:	742b      	strb	r3, [r5, #16]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 80108f6:	687b      	ldr	r3, [r7, #4]
 80108f8:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 80108fc:	4a7f      	ldr	r2, [pc, #508]	; (8010afc <problem_fetch+0xf498>)
 80108fe:	461c      	mov	r4, r3
 8010900:	4613      	mov	r3, r2
 8010902:	cb07      	ldmia	r3!, {r0, r1, r2}
 8010904:	6020      	str	r0, [r4, #0]
 8010906:	6061      	str	r1, [r4, #4]
 8010908:	60a2      	str	r2, [r4, #8]
 801090a:	881b      	ldrh	r3, [r3, #0]
 801090c:	81a3      	strh	r3, [r4, #12]
			break;
 801090e:	f00b bdd9 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 445 :
			strcpy(p->name,"CRUXY E9");
 8010912:	687b      	ldr	r3, [r7, #4]
 8010914:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8010918:	4979      	ldr	r1, [pc, #484]	; (8010b00 <problem_fetch+0xf49c>)
 801091a:	461a      	mov	r2, r3
 801091c:	460b      	mov	r3, r1
 801091e:	cb03      	ldmia	r3!, {r0, r1}
 8010920:	6010      	str	r0, [r2, #0]
 8010922:	6051      	str	r1, [r2, #4]
 8010924:	781b      	ldrb	r3, [r3, #0]
 8010926:	7213      	strb	r3, [r2, #8]
			strcpy(p->grade,"7B");
 8010928:	687b      	ldr	r3, [r7, #4]
 801092a:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801092e:	4a70      	ldr	r2, [pc, #448]	; (8010af0 <problem_fetch+0xf48c>)
 8010930:	8811      	ldrh	r1, [r2, #0]
 8010932:	7892      	ldrb	r2, [r2, #2]
 8010934:	8019      	strh	r1, [r3, #0]
 8010936:	709a      	strb	r2, [r3, #2]
			p->moveSize = 7;
 8010938:	687b      	ldr	r3, [r7, #4]
 801093a:	2207      	movs	r2, #7
 801093c:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,I,E,I,E,B,A");
 801093e:	687b      	ldr	r3, [r7, #4]
 8010940:	33a4      	adds	r3, #164	; 0xa4
 8010942:	4a70      	ldr	r2, [pc, #448]	; (8010b04 <problem_fetch+0xf4a0>)
 8010944:	461c      	mov	r4, r3
 8010946:	4613      	mov	r3, r2
 8010948:	cb07      	ldmia	r3!, {r0, r1, r2}
 801094a:	6020      	str	r0, [r4, #0]
 801094c:	6061      	str	r1, [r4, #4]
 801094e:	60a2      	str	r2, [r4, #8]
 8010950:	881b      	ldrh	r3, [r3, #0]
 8010952:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,9,9,7,12,15,18");
 8010954:	687b      	ldr	r3, [r7, #4]
 8010956:	3304      	adds	r3, #4
 8010958:	4a6b      	ldr	r2, [pc, #428]	; (8010b08 <problem_fetch+0xf4a4>)
 801095a:	461d      	mov	r5, r3
 801095c:	4614      	mov	r4, r2
 801095e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8010960:	6028      	str	r0, [r5, #0]
 8010962:	6069      	str	r1, [r5, #4]
 8010964:	60aa      	str	r2, [r5, #8]
 8010966:	60eb      	str	r3, [r5, #12]
 8010968:	7823      	ldrb	r3, [r4, #0]
 801096a:	742b      	strb	r3, [r5, #16]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 801096c:	687b      	ldr	r3, [r7, #4]
 801096e:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8010972:	4a62      	ldr	r2, [pc, #392]	; (8010afc <problem_fetch+0xf498>)
 8010974:	461c      	mov	r4, r3
 8010976:	4613      	mov	r3, r2
 8010978:	cb07      	ldmia	r3!, {r0, r1, r2}
 801097a:	6020      	str	r0, [r4, #0]
 801097c:	6061      	str	r1, [r4, #4]
 801097e:	60a2      	str	r2, [r4, #8]
 8010980:	881b      	ldrh	r3, [r3, #0]
 8010982:	81a3      	strh	r3, [r4, #12]
			break;
 8010984:	f00b bd9e 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 446 :
			strcpy(p->name,"RECOVERY DRINK");
 8010988:	687b      	ldr	r3, [r7, #4]
 801098a:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801098e:	4a5f      	ldr	r2, [pc, #380]	; (8010b0c <problem_fetch+0xf4a8>)
 8010990:	461c      	mov	r4, r3
 8010992:	4613      	mov	r3, r2
 8010994:	cb07      	ldmia	r3!, {r0, r1, r2}
 8010996:	6020      	str	r0, [r4, #0]
 8010998:	6061      	str	r1, [r4, #4]
 801099a:	60a2      	str	r2, [r4, #8]
 801099c:	881a      	ldrh	r2, [r3, #0]
 801099e:	789b      	ldrb	r3, [r3, #2]
 80109a0:	81a2      	strh	r2, [r4, #12]
 80109a2:	73a3      	strb	r3, [r4, #14]
			strcpy(p->grade,"7B+");
 80109a4:	687b      	ldr	r3, [r7, #4]
 80109a6:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80109aa:	4a59      	ldr	r2, [pc, #356]	; (8010b10 <problem_fetch+0xf4ac>)
 80109ac:	6810      	ldr	r0, [r2, #0]
 80109ae:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 80109b0:	687b      	ldr	r3, [r7, #4]
 80109b2:	2206      	movs	r2, #6
 80109b4:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"C,E,D,H,I,I");
 80109b6:	687b      	ldr	r3, [r7, #4]
 80109b8:	33a4      	adds	r3, #164	; 0xa4
 80109ba:	4a56      	ldr	r2, [pc, #344]	; (8010b14 <problem_fetch+0xf4b0>)
 80109bc:	461c      	mov	r4, r3
 80109be:	4613      	mov	r3, r2
 80109c0:	cb07      	ldmia	r3!, {r0, r1, r2}
 80109c2:	6020      	str	r0, [r4, #0]
 80109c4:	6061      	str	r1, [r4, #4]
 80109c6:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,9,11,12,15,18");
 80109c8:	687b      	ldr	r3, [r7, #4]
 80109ca:	3304      	adds	r3, #4
 80109cc:	4a52      	ldr	r2, [pc, #328]	; (8010b18 <problem_fetch+0xf4b4>)
 80109ce:	461c      	mov	r4, r3
 80109d0:	4615      	mov	r5, r2
 80109d2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80109d4:	6020      	str	r0, [r4, #0]
 80109d6:	6061      	str	r1, [r4, #4]
 80109d8:	60a2      	str	r2, [r4, #8]
 80109da:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 80109dc:	687b      	ldr	r3, [r7, #4]
 80109de:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 80109e2:	4a4e      	ldr	r2, [pc, #312]	; (8010b1c <problem_fetch+0xf4b8>)
 80109e4:	461c      	mov	r4, r3
 80109e6:	4613      	mov	r3, r2
 80109e8:	cb07      	ldmia	r3!, {r0, r1, r2}
 80109ea:	6020      	str	r0, [r4, #0]
 80109ec:	6061      	str	r1, [r4, #4]
 80109ee:	60a2      	str	r2, [r4, #8]
			break;
 80109f0:	f00b bd68 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 447 :
			strcpy(p->name,"PACHIMAMA");
 80109f4:	687b      	ldr	r3, [r7, #4]
 80109f6:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80109fa:	4949      	ldr	r1, [pc, #292]	; (8010b20 <problem_fetch+0xf4bc>)
 80109fc:	461a      	mov	r2, r3
 80109fe:	460b      	mov	r3, r1
 8010a00:	cb03      	ldmia	r3!, {r0, r1}
 8010a02:	6010      	str	r0, [r2, #0]
 8010a04:	6051      	str	r1, [r2, #4]
 8010a06:	881b      	ldrh	r3, [r3, #0]
 8010a08:	8113      	strh	r3, [r2, #8]
			strcpy(p->grade,"7A");
 8010a0a:	687b      	ldr	r3, [r7, #4]
 8010a0c:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8010a10:	4a32      	ldr	r2, [pc, #200]	; (8010adc <problem_fetch+0xf478>)
 8010a12:	8811      	ldrh	r1, [r2, #0]
 8010a14:	7892      	ldrb	r2, [r2, #2]
 8010a16:	8019      	strh	r1, [r3, #0]
 8010a18:	709a      	strb	r2, [r3, #2]
			p->moveSize = 6;
 8010a1a:	687b      	ldr	r3, [r7, #4]
 8010a1c:	2206      	movs	r2, #6
 8010a1e:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,J,K,H,K,I");
 8010a20:	687b      	ldr	r3, [r7, #4]
 8010a22:	33a4      	adds	r3, #164	; 0xa4
 8010a24:	4a3f      	ldr	r2, [pc, #252]	; (8010b24 <problem_fetch+0xf4c0>)
 8010a26:	461c      	mov	r4, r3
 8010a28:	4613      	mov	r3, r2
 8010a2a:	cb07      	ldmia	r3!, {r0, r1, r2}
 8010a2c:	6020      	str	r0, [r4, #0]
 8010a2e:	6061      	str	r1, [r4, #4]
 8010a30:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"6,5,9,12,14,18");
 8010a32:	687b      	ldr	r3, [r7, #4]
 8010a34:	3304      	adds	r3, #4
 8010a36:	4a3c      	ldr	r2, [pc, #240]	; (8010b28 <problem_fetch+0xf4c4>)
 8010a38:	461c      	mov	r4, r3
 8010a3a:	4613      	mov	r3, r2
 8010a3c:	cb07      	ldmia	r3!, {r0, r1, r2}
 8010a3e:	6020      	str	r0, [r4, #0]
 8010a40:	6061      	str	r1, [r4, #4]
 8010a42:	60a2      	str	r2, [r4, #8]
 8010a44:	881a      	ldrh	r2, [r3, #0]
 8010a46:	789b      	ldrb	r3, [r3, #2]
 8010a48:	81a2      	strh	r2, [r4, #12]
 8010a4a:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish,"s,s,d,d,d,e");
 8010a4c:	687b      	ldr	r3, [r7, #4]
 8010a4e:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8010a52:	4a36      	ldr	r2, [pc, #216]	; (8010b2c <problem_fetch+0xf4c8>)
 8010a54:	461c      	mov	r4, r3
 8010a56:	4613      	mov	r3, r2
 8010a58:	cb07      	ldmia	r3!, {r0, r1, r2}
 8010a5a:	6020      	str	r0, [r4, #0]
 8010a5c:	6061      	str	r1, [r4, #4]
 8010a5e:	60a2      	str	r2, [r4, #8]
			break;
 8010a60:	f00b bd30 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 448 :
			strcpy(p->name,"CRAZYCRACKER");
 8010a64:	687b      	ldr	r3, [r7, #4]
 8010a66:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8010a6a:	4a31      	ldr	r2, [pc, #196]	; (8010b30 <problem_fetch+0xf4cc>)
 8010a6c:	461c      	mov	r4, r3
 8010a6e:	4613      	mov	r3, r2
 8010a70:	cb07      	ldmia	r3!, {r0, r1, r2}
 8010a72:	6020      	str	r0, [r4, #0]
 8010a74:	6061      	str	r1, [r4, #4]
 8010a76:	60a2      	str	r2, [r4, #8]
 8010a78:	781b      	ldrb	r3, [r3, #0]
 8010a7a:	7323      	strb	r3, [r4, #12]
			strcpy(p->grade,"7A+");
 8010a7c:	687b      	ldr	r3, [r7, #4]
 8010a7e:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8010a82:	4a2c      	ldr	r2, [pc, #176]	; (8010b34 <problem_fetch+0xf4d0>)
 8010a84:	6810      	ldr	r0, [r2, #0]
 8010a86:	6018      	str	r0, [r3, #0]
			p->moveSize = 8;
 8010a88:	687b      	ldr	r3, [r7, #4]
 8010a8a:	2208      	movs	r2, #8
 8010a8c:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"C,E,I,G,J,H,G,D");
 8010a8e:	687b      	ldr	r3, [r7, #4]
 8010a90:	33a4      	adds	r3, #164	; 0xa4
 8010a92:	4a29      	ldr	r2, [pc, #164]	; (8010b38 <problem_fetch+0xf4d4>)
 8010a94:	461c      	mov	r4, r3
 8010a96:	4615      	mov	r5, r2
 8010a98:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010a9a:	6020      	str	r0, [r4, #0]
 8010a9c:	6061      	str	r1, [r4, #4]
 8010a9e:	60a2      	str	r2, [r4, #8]
 8010aa0:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,6,7,10,12,16,17,18");
 8010aa2:	687b      	ldr	r3, [r7, #4]
 8010aa4:	3304      	adds	r3, #4
 8010aa6:	4a25      	ldr	r2, [pc, #148]	; (8010b3c <problem_fetch+0xf4d8>)
 8010aa8:	461d      	mov	r5, r3
 8010aaa:	4614      	mov	r4, r2
 8010aac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8010aae:	6028      	str	r0, [r5, #0]
 8010ab0:	6069      	str	r1, [r5, #4]
 8010ab2:	60aa      	str	r2, [r5, #8]
 8010ab4:	60eb      	str	r3, [r5, #12]
 8010ab6:	6820      	ldr	r0, [r4, #0]
 8010ab8:	6128      	str	r0, [r5, #16]
 8010aba:	7923      	ldrb	r3, [r4, #4]
 8010abc:	752b      	strb	r3, [r5, #20]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,e");
 8010abe:	687b      	ldr	r3, [r7, #4]
 8010ac0:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8010ac4:	4a1e      	ldr	r2, [pc, #120]	; (8010b40 <problem_fetch+0xf4dc>)
 8010ac6:	461c      	mov	r4, r3
 8010ac8:	4615      	mov	r5, r2
 8010aca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010acc:	6020      	str	r0, [r4, #0]
 8010ace:	6061      	str	r1, [r4, #4]
 8010ad0:	60a2      	str	r2, [r4, #8]
 8010ad2:	60e3      	str	r3, [r4, #12]
			break;
 8010ad4:	f00b bcf6 	b.w	801c4c4 <problem_fetch+0x1ae60>
 8010ad8:	08029074 	.word	0x08029074
 8010adc:	08023ae4 	.word	0x08023ae4
 8010ae0:	08029088 	.word	0x08029088
 8010ae4:	08029094 	.word	0x08029094
 8010ae8:	08023ff0 	.word	0x08023ff0
 8010aec:	080290a4 	.word	0x080290a4
 8010af0:	0802421c 	.word	0x0802421c
 8010af4:	080290b4 	.word	0x080290b4
 8010af8:	080290c4 	.word	0x080290c4
 8010afc:	08023cac 	.word	0x08023cac
 8010b00:	080290d8 	.word	0x080290d8
 8010b04:	080290e4 	.word	0x080290e4
 8010b08:	080290f4 	.word	0x080290f4
 8010b0c:	08029108 	.word	0x08029108
 8010b10:	08023c60 	.word	0x08023c60
 8010b14:	08029118 	.word	0x08029118
 8010b18:	08029124 	.word	0x08029124
 8010b1c:	08023ec0 	.word	0x08023ec0
 8010b20:	08029134 	.word	0x08029134
 8010b24:	08029140 	.word	0x08029140
 8010b28:	08028cec 	.word	0x08028cec
 8010b2c:	08023b04 	.word	0x08023b04
 8010b30:	0802914c 	.word	0x0802914c
 8010b34:	08023cc4 	.word	0x08023cc4
 8010b38:	0802915c 	.word	0x0802915c
 8010b3c:	08028bc8 	.word	0x08028bc8
 8010b40:	08023c48 	.word	0x08023c48
		case 449 :
			strcpy(p->name,"CLIMBING ON BLANK");
 8010b44:	687b      	ldr	r3, [r7, #4]
 8010b46:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8010b4a:	4aaa      	ldr	r2, [pc, #680]	; (8010df4 <problem_fetch+0xf790>)
 8010b4c:	461d      	mov	r5, r3
 8010b4e:	4614      	mov	r4, r2
 8010b50:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8010b52:	6028      	str	r0, [r5, #0]
 8010b54:	6069      	str	r1, [r5, #4]
 8010b56:	60aa      	str	r2, [r5, #8]
 8010b58:	60eb      	str	r3, [r5, #12]
 8010b5a:	8823      	ldrh	r3, [r4, #0]
 8010b5c:	822b      	strh	r3, [r5, #16]
			strcpy(p->grade,"7A");
 8010b5e:	687b      	ldr	r3, [r7, #4]
 8010b60:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8010b64:	4aa4      	ldr	r2, [pc, #656]	; (8010df8 <problem_fetch+0xf794>)
 8010b66:	8811      	ldrh	r1, [r2, #0]
 8010b68:	7892      	ldrb	r2, [r2, #2]
 8010b6a:	8019      	strh	r1, [r3, #0]
 8010b6c:	709a      	strb	r2, [r3, #2]
			p->moveSize = 6;
 8010b6e:	687b      	ldr	r3, [r7, #4]
 8010b70:	2206      	movs	r2, #6
 8010b72:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"C,D,A,E,E,I");
 8010b74:	687b      	ldr	r3, [r7, #4]
 8010b76:	33a4      	adds	r3, #164	; 0xa4
 8010b78:	4aa0      	ldr	r2, [pc, #640]	; (8010dfc <problem_fetch+0xf798>)
 8010b7a:	461c      	mov	r4, r3
 8010b7c:	4613      	mov	r3, r2
 8010b7e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8010b80:	6020      	str	r0, [r4, #0]
 8010b82:	6061      	str	r1, [r4, #4]
 8010b84:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,7,9,12,16,18");
 8010b86:	687b      	ldr	r3, [r7, #4]
 8010b88:	3304      	adds	r3, #4
 8010b8a:	4a9d      	ldr	r2, [pc, #628]	; (8010e00 <problem_fetch+0xf79c>)
 8010b8c:	461c      	mov	r4, r3
 8010b8e:	4613      	mov	r3, r2
 8010b90:	cb07      	ldmia	r3!, {r0, r1, r2}
 8010b92:	6020      	str	r0, [r4, #0]
 8010b94:	6061      	str	r1, [r4, #4]
 8010b96:	60a2      	str	r2, [r4, #8]
 8010b98:	881a      	ldrh	r2, [r3, #0]
 8010b9a:	789b      	ldrb	r3, [r3, #2]
 8010b9c:	81a2      	strh	r2, [r4, #12]
 8010b9e:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 8010ba0:	687b      	ldr	r3, [r7, #4]
 8010ba2:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8010ba6:	4a97      	ldr	r2, [pc, #604]	; (8010e04 <problem_fetch+0xf7a0>)
 8010ba8:	461c      	mov	r4, r3
 8010baa:	4613      	mov	r3, r2
 8010bac:	cb07      	ldmia	r3!, {r0, r1, r2}
 8010bae:	6020      	str	r0, [r4, #0]
 8010bb0:	6061      	str	r1, [r4, #4]
 8010bb2:	60a2      	str	r2, [r4, #8]
			break;
 8010bb4:	f00b bc86 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 450 :
			strcpy(p->name,"PHSYCHO");
 8010bb8:	687b      	ldr	r3, [r7, #4]
 8010bba:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8010bbe:	4992      	ldr	r1, [pc, #584]	; (8010e08 <problem_fetch+0xf7a4>)
 8010bc0:	461a      	mov	r2, r3
 8010bc2:	460b      	mov	r3, r1
 8010bc4:	cb03      	ldmia	r3!, {r0, r1}
 8010bc6:	6010      	str	r0, [r2, #0]
 8010bc8:	6051      	str	r1, [r2, #4]
			strcpy(p->grade,"7A+");
 8010bca:	687b      	ldr	r3, [r7, #4]
 8010bcc:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8010bd0:	4a8e      	ldr	r2, [pc, #568]	; (8010e0c <problem_fetch+0xf7a8>)
 8010bd2:	6810      	ldr	r0, [r2, #0]
 8010bd4:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 8010bd6:	687b      	ldr	r3, [r7, #4]
 8010bd8:	2207      	movs	r2, #7
 8010bda:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"B,E,F,G,D,G,D");
 8010bdc:	687b      	ldr	r3, [r7, #4]
 8010bde:	33a4      	adds	r3, #164	; 0xa4
 8010be0:	4a8b      	ldr	r2, [pc, #556]	; (8010e10 <problem_fetch+0xf7ac>)
 8010be2:	461c      	mov	r4, r3
 8010be4:	4613      	mov	r3, r2
 8010be6:	cb07      	ldmia	r3!, {r0, r1, r2}
 8010be8:	6020      	str	r0, [r4, #0]
 8010bea:	6061      	str	r1, [r4, #4]
 8010bec:	60a2      	str	r2, [r4, #8]
 8010bee:	881b      	ldrh	r3, [r3, #0]
 8010bf0:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"6,6,13,17,7,10,18");
 8010bf2:	687b      	ldr	r3, [r7, #4]
 8010bf4:	3304      	adds	r3, #4
 8010bf6:	4a87      	ldr	r2, [pc, #540]	; (8010e14 <problem_fetch+0xf7b0>)
 8010bf8:	461d      	mov	r5, r3
 8010bfa:	4614      	mov	r4, r2
 8010bfc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8010bfe:	6028      	str	r0, [r5, #0]
 8010c00:	6069      	str	r1, [r5, #4]
 8010c02:	60aa      	str	r2, [r5, #8]
 8010c04:	60eb      	str	r3, [r5, #12]
 8010c06:	8823      	ldrh	r3, [r4, #0]
 8010c08:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,s,d,d,d,d,e");
 8010c0a:	687b      	ldr	r3, [r7, #4]
 8010c0c:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8010c10:	4a81      	ldr	r2, [pc, #516]	; (8010e18 <problem_fetch+0xf7b4>)
 8010c12:	461c      	mov	r4, r3
 8010c14:	4613      	mov	r3, r2
 8010c16:	cb07      	ldmia	r3!, {r0, r1, r2}
 8010c18:	6020      	str	r0, [r4, #0]
 8010c1a:	6061      	str	r1, [r4, #4]
 8010c1c:	60a2      	str	r2, [r4, #8]
 8010c1e:	881b      	ldrh	r3, [r3, #0]
 8010c20:	81a3      	strh	r3, [r4, #12]
			break;
 8010c22:	f00b bc4f 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 451 :
			strcpy(p->name,"THE UNREAL THING");
 8010c26:	687b      	ldr	r3, [r7, #4]
 8010c28:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8010c2c:	4a7b      	ldr	r2, [pc, #492]	; (8010e1c <problem_fetch+0xf7b8>)
 8010c2e:	461d      	mov	r5, r3
 8010c30:	4614      	mov	r4, r2
 8010c32:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8010c34:	6028      	str	r0, [r5, #0]
 8010c36:	6069      	str	r1, [r5, #4]
 8010c38:	60aa      	str	r2, [r5, #8]
 8010c3a:	60eb      	str	r3, [r5, #12]
 8010c3c:	7823      	ldrb	r3, [r4, #0]
 8010c3e:	742b      	strb	r3, [r5, #16]
			strcpy(p->grade,"6B+");
 8010c40:	687b      	ldr	r3, [r7, #4]
 8010c42:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8010c46:	4a76      	ldr	r2, [pc, #472]	; (8010e20 <problem_fetch+0xf7bc>)
 8010c48:	6810      	ldr	r0, [r2, #0]
 8010c4a:	6018      	str	r0, [r3, #0]
			p->moveSize = 8;
 8010c4c:	687b      	ldr	r3, [r7, #4]
 8010c4e:	2208      	movs	r2, #8
 8010c50:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,E,H,J,E,A,D,A");
 8010c52:	687b      	ldr	r3, [r7, #4]
 8010c54:	33a4      	adds	r3, #164	; 0xa4
 8010c56:	4a73      	ldr	r2, [pc, #460]	; (8010e24 <problem_fetch+0xf7c0>)
 8010c58:	461c      	mov	r4, r3
 8010c5a:	4615      	mov	r5, r2
 8010c5c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010c5e:	6020      	str	r0, [r4, #0]
 8010c60:	6061      	str	r1, [r4, #4]
 8010c62:	60a2      	str	r2, [r4, #8]
 8010c64:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,8,8,7,12,14,15,18");
 8010c66:	687b      	ldr	r3, [r7, #4]
 8010c68:	3304      	adds	r3, #4
 8010c6a:	4a6f      	ldr	r2, [pc, #444]	; (8010e28 <problem_fetch+0xf7c4>)
 8010c6c:	461d      	mov	r5, r3
 8010c6e:	4614      	mov	r4, r2
 8010c70:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8010c72:	6028      	str	r0, [r5, #0]
 8010c74:	6069      	str	r1, [r5, #4]
 8010c76:	60aa      	str	r2, [r5, #8]
 8010c78:	60eb      	str	r3, [r5, #12]
 8010c7a:	6820      	ldr	r0, [r4, #0]
 8010c7c:	6128      	str	r0, [r5, #16]
			strcpy(p->startFinish,"s,d,d,d,d,d,d,e");
 8010c7e:	687b      	ldr	r3, [r7, #4]
 8010c80:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8010c84:	4a69      	ldr	r2, [pc, #420]	; (8010e2c <problem_fetch+0xf7c8>)
 8010c86:	461c      	mov	r4, r3
 8010c88:	4615      	mov	r5, r2
 8010c8a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010c8c:	6020      	str	r0, [r4, #0]
 8010c8e:	6061      	str	r1, [r4, #4]
 8010c90:	60a2      	str	r2, [r4, #8]
 8010c92:	60e3      	str	r3, [r4, #12]
			break;
 8010c94:	f00b bc16 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 452 :
			strcpy(p->name,"THE NIGHTMARE");
 8010c98:	687b      	ldr	r3, [r7, #4]
 8010c9a:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8010c9e:	4a64      	ldr	r2, [pc, #400]	; (8010e30 <problem_fetch+0xf7cc>)
 8010ca0:	461c      	mov	r4, r3
 8010ca2:	4613      	mov	r3, r2
 8010ca4:	cb07      	ldmia	r3!, {r0, r1, r2}
 8010ca6:	6020      	str	r0, [r4, #0]
 8010ca8:	6061      	str	r1, [r4, #4]
 8010caa:	60a2      	str	r2, [r4, #8]
 8010cac:	881b      	ldrh	r3, [r3, #0]
 8010cae:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade,"6C+");
 8010cb0:	687b      	ldr	r3, [r7, #4]
 8010cb2:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8010cb6:	4a5f      	ldr	r2, [pc, #380]	; (8010e34 <problem_fetch+0xf7d0>)
 8010cb8:	6810      	ldr	r0, [r2, #0]
 8010cba:	6018      	str	r0, [r3, #0]
			p->moveSize = 8;
 8010cbc:	687b      	ldr	r3, [r7, #4]
 8010cbe:	2208      	movs	r2, #8
 8010cc0:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,J,I,I,B,E,F,D");
 8010cc2:	687b      	ldr	r3, [r7, #4]
 8010cc4:	33a4      	adds	r3, #164	; 0xa4
 8010cc6:	4a5c      	ldr	r2, [pc, #368]	; (8010e38 <problem_fetch+0xf7d4>)
 8010cc8:	461c      	mov	r4, r3
 8010cca:	4615      	mov	r5, r2
 8010ccc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010cce:	6020      	str	r0, [r4, #0]
 8010cd0:	6061      	str	r1, [r4, #4]
 8010cd2:	60a2      	str	r2, [r4, #8]
 8010cd4:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,5,7,9,15,12,11,18");
 8010cd6:	687b      	ldr	r3, [r7, #4]
 8010cd8:	3304      	adds	r3, #4
 8010cda:	4a58      	ldr	r2, [pc, #352]	; (8010e3c <problem_fetch+0xf7d8>)
 8010cdc:	461d      	mov	r5, r3
 8010cde:	4614      	mov	r4, r2
 8010ce0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8010ce2:	6028      	str	r0, [r5, #0]
 8010ce4:	6069      	str	r1, [r5, #4]
 8010ce6:	60aa      	str	r2, [r5, #8]
 8010ce8:	60eb      	str	r3, [r5, #12]
 8010cea:	6820      	ldr	r0, [r4, #0]
 8010cec:	6128      	str	r0, [r5, #16]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,e");
 8010cee:	687b      	ldr	r3, [r7, #4]
 8010cf0:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8010cf4:	4a52      	ldr	r2, [pc, #328]	; (8010e40 <problem_fetch+0xf7dc>)
 8010cf6:	461c      	mov	r4, r3
 8010cf8:	4615      	mov	r5, r2
 8010cfa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010cfc:	6020      	str	r0, [r4, #0]
 8010cfe:	6061      	str	r1, [r4, #4]
 8010d00:	60a2      	str	r2, [r4, #8]
 8010d02:	60e3      	str	r3, [r4, #12]
			break;
 8010d04:	f00b bbde 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 453 :
			strcpy(p->name,"THE BIG DREAM");
 8010d08:	687b      	ldr	r3, [r7, #4]
 8010d0a:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8010d0e:	4a4d      	ldr	r2, [pc, #308]	; (8010e44 <problem_fetch+0xf7e0>)
 8010d10:	461c      	mov	r4, r3
 8010d12:	4613      	mov	r3, r2
 8010d14:	cb07      	ldmia	r3!, {r0, r1, r2}
 8010d16:	6020      	str	r0, [r4, #0]
 8010d18:	6061      	str	r1, [r4, #4]
 8010d1a:	60a2      	str	r2, [r4, #8]
 8010d1c:	881b      	ldrh	r3, [r3, #0]
 8010d1e:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade,"6C");
 8010d20:	687b      	ldr	r3, [r7, #4]
 8010d22:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8010d26:	4a48      	ldr	r2, [pc, #288]	; (8010e48 <problem_fetch+0xf7e4>)
 8010d28:	8811      	ldrh	r1, [r2, #0]
 8010d2a:	7892      	ldrb	r2, [r2, #2]
 8010d2c:	8019      	strh	r1, [r3, #0]
 8010d2e:	709a      	strb	r2, [r3, #2]
			p->moveSize = 8;
 8010d30:	687b      	ldr	r3, [r7, #4]
 8010d32:	2208      	movs	r2, #8
 8010d34:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,G,H,C,E,F,I,I");
 8010d36:	687b      	ldr	r3, [r7, #4]
 8010d38:	33a4      	adds	r3, #164	; 0xa4
 8010d3a:	4a44      	ldr	r2, [pc, #272]	; (8010e4c <problem_fetch+0xf7e8>)
 8010d3c:	461c      	mov	r4, r3
 8010d3e:	4615      	mov	r5, r2
 8010d40:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010d42:	6020      	str	r0, [r4, #0]
 8010d44:	6061      	str	r1, [r4, #4]
 8010d46:	60a2      	str	r2, [r4, #8]
 8010d48:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,6,8,8,12,13,14,18");
 8010d4a:	687b      	ldr	r3, [r7, #4]
 8010d4c:	3304      	adds	r3, #4
 8010d4e:	4a40      	ldr	r2, [pc, #256]	; (8010e50 <problem_fetch+0xf7ec>)
 8010d50:	461d      	mov	r5, r3
 8010d52:	4614      	mov	r4, r2
 8010d54:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8010d56:	6028      	str	r0, [r5, #0]
 8010d58:	6069      	str	r1, [r5, #4]
 8010d5a:	60aa      	str	r2, [r5, #8]
 8010d5c:	60eb      	str	r3, [r5, #12]
 8010d5e:	6820      	ldr	r0, [r4, #0]
 8010d60:	6128      	str	r0, [r5, #16]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,e");
 8010d62:	687b      	ldr	r3, [r7, #4]
 8010d64:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8010d68:	4a35      	ldr	r2, [pc, #212]	; (8010e40 <problem_fetch+0xf7dc>)
 8010d6a:	461c      	mov	r4, r3
 8010d6c:	4615      	mov	r5, r2
 8010d6e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010d70:	6020      	str	r0, [r4, #0]
 8010d72:	6061      	str	r1, [r4, #4]
 8010d74:	60a2      	str	r2, [r4, #8]
 8010d76:	60e3      	str	r3, [r4, #12]
			break;
 8010d78:	f00b bba4 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 454 :
			strcpy(p->name,"THE LAPSUS SISTER");
 8010d7c:	687b      	ldr	r3, [r7, #4]
 8010d7e:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8010d82:	4a34      	ldr	r2, [pc, #208]	; (8010e54 <problem_fetch+0xf7f0>)
 8010d84:	461d      	mov	r5, r3
 8010d86:	4614      	mov	r4, r2
 8010d88:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8010d8a:	6028      	str	r0, [r5, #0]
 8010d8c:	6069      	str	r1, [r5, #4]
 8010d8e:	60aa      	str	r2, [r5, #8]
 8010d90:	60eb      	str	r3, [r5, #12]
 8010d92:	8823      	ldrh	r3, [r4, #0]
 8010d94:	822b      	strh	r3, [r5, #16]
			strcpy(p->grade,"6B+");
 8010d96:	687b      	ldr	r3, [r7, #4]
 8010d98:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8010d9c:	4a20      	ldr	r2, [pc, #128]	; (8010e20 <problem_fetch+0xf7bc>)
 8010d9e:	6810      	ldr	r0, [r2, #0]
 8010da0:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 8010da2:	687b      	ldr	r3, [r7, #4]
 8010da4:	2207      	movs	r2, #7
 8010da6:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"B,C,B,E,B,D,D");
 8010da8:	687b      	ldr	r3, [r7, #4]
 8010daa:	33a4      	adds	r3, #164	; 0xa4
 8010dac:	4a2a      	ldr	r2, [pc, #168]	; (8010e58 <problem_fetch+0xf7f4>)
 8010dae:	461c      	mov	r4, r3
 8010db0:	4613      	mov	r3, r2
 8010db2:	cb07      	ldmia	r3!, {r0, r1, r2}
 8010db4:	6020      	str	r0, [r4, #0]
 8010db6:	6061      	str	r1, [r4, #4]
 8010db8:	60a2      	str	r2, [r4, #8]
 8010dba:	881b      	ldrh	r3, [r3, #0]
 8010dbc:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"6,5,10,12,15,7,18");
 8010dbe:	687b      	ldr	r3, [r7, #4]
 8010dc0:	3304      	adds	r3, #4
 8010dc2:	4a26      	ldr	r2, [pc, #152]	; (8010e5c <problem_fetch+0xf7f8>)
 8010dc4:	461d      	mov	r5, r3
 8010dc6:	4614      	mov	r4, r2
 8010dc8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8010dca:	6028      	str	r0, [r5, #0]
 8010dcc:	6069      	str	r1, [r5, #4]
 8010dce:	60aa      	str	r2, [r5, #8]
 8010dd0:	60eb      	str	r3, [r5, #12]
 8010dd2:	8823      	ldrh	r3, [r4, #0]
 8010dd4:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,s,d,d,d,d,e");
 8010dd6:	687b      	ldr	r3, [r7, #4]
 8010dd8:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8010ddc:	4a0e      	ldr	r2, [pc, #56]	; (8010e18 <problem_fetch+0xf7b4>)
 8010dde:	461c      	mov	r4, r3
 8010de0:	4613      	mov	r3, r2
 8010de2:	cb07      	ldmia	r3!, {r0, r1, r2}
 8010de4:	6020      	str	r0, [r4, #0]
 8010de6:	6061      	str	r1, [r4, #4]
 8010de8:	60a2      	str	r2, [r4, #8]
 8010dea:	881b      	ldrh	r3, [r3, #0]
 8010dec:	81a3      	strh	r3, [r4, #12]
			break;
 8010dee:	f00b bb69 	b.w	801c4c4 <problem_fetch+0x1ae60>
 8010df2:	bf00      	nop
 8010df4:	0802916c 	.word	0x0802916c
 8010df8:	08023ae4 	.word	0x08023ae4
 8010dfc:	08029180 	.word	0x08029180
 8010e00:	0802918c 	.word	0x0802918c
 8010e04:	08023ec0 	.word	0x08023ec0
 8010e08:	0802919c 	.word	0x0802919c
 8010e0c:	08023cc4 	.word	0x08023cc4
 8010e10:	080291a4 	.word	0x080291a4
 8010e14:	080291b4 	.word	0x080291b4
 8010e18:	08023b9c 	.word	0x08023b9c
 8010e1c:	080291c8 	.word	0x080291c8
 8010e20:	08023b24 	.word	0x08023b24
 8010e24:	080291dc 	.word	0x080291dc
 8010e28:	080291ec 	.word	0x080291ec
 8010e2c:	08023d34 	.word	0x08023d34
 8010e30:	08029200 	.word	0x08029200
 8010e34:	08023bbc 	.word	0x08023bbc
 8010e38:	08029210 	.word	0x08029210
 8010e3c:	08029220 	.word	0x08029220
 8010e40:	08023c48 	.word	0x08023c48
 8010e44:	08029234 	.word	0x08029234
 8010e48:	08023bf0 	.word	0x08023bf0
 8010e4c:	08029244 	.word	0x08029244
 8010e50:	08029254 	.word	0x08029254
 8010e54:	08029268 	.word	0x08029268
 8010e58:	0802927c 	.word	0x0802927c
 8010e5c:	0802928c 	.word	0x0802928c
		case 455 :
			strcpy(p->name,"TENDON DAY");
 8010e60:	687b      	ldr	r3, [r7, #4]
 8010e62:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8010e66:	49b0      	ldr	r1, [pc, #704]	; (8011128 <problem_fetch+0xfac4>)
 8010e68:	461a      	mov	r2, r3
 8010e6a:	460b      	mov	r3, r1
 8010e6c:	cb03      	ldmia	r3!, {r0, r1}
 8010e6e:	6010      	str	r0, [r2, #0]
 8010e70:	6051      	str	r1, [r2, #4]
 8010e72:	8819      	ldrh	r1, [r3, #0]
 8010e74:	789b      	ldrb	r3, [r3, #2]
 8010e76:	8111      	strh	r1, [r2, #8]
 8010e78:	7293      	strb	r3, [r2, #10]
			strcpy(p->grade,"7A");
 8010e7a:	687b      	ldr	r3, [r7, #4]
 8010e7c:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8010e80:	4aaa      	ldr	r2, [pc, #680]	; (801112c <problem_fetch+0xfac8>)
 8010e82:	8811      	ldrh	r1, [r2, #0]
 8010e84:	7892      	ldrb	r2, [r2, #2]
 8010e86:	8019      	strh	r1, [r3, #0]
 8010e88:	709a      	strb	r2, [r3, #2]
			p->moveSize = 8;
 8010e8a:	687b      	ldr	r3, [r7, #4]
 8010e8c:	2208      	movs	r2, #8
 8010e8e:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,G,G,C,E,A,E,A");
 8010e90:	687b      	ldr	r3, [r7, #4]
 8010e92:	33a4      	adds	r3, #164	; 0xa4
 8010e94:	4aa6      	ldr	r2, [pc, #664]	; (8011130 <problem_fetch+0xfacc>)
 8010e96:	461c      	mov	r4, r3
 8010e98:	4615      	mov	r5, r2
 8010e9a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010e9c:	6020      	str	r0, [r4, #0]
 8010e9e:	6061      	str	r1, [r4, #4]
 8010ea0:	60a2      	str	r2, [r4, #8]
 8010ea2:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,6,9,8,12,14,14,18");
 8010ea4:	687b      	ldr	r3, [r7, #4]
 8010ea6:	3304      	adds	r3, #4
 8010ea8:	4aa2      	ldr	r2, [pc, #648]	; (8011134 <problem_fetch+0xfad0>)
 8010eaa:	461d      	mov	r5, r3
 8010eac:	4614      	mov	r4, r2
 8010eae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8010eb0:	6028      	str	r0, [r5, #0]
 8010eb2:	6069      	str	r1, [r5, #4]
 8010eb4:	60aa      	str	r2, [r5, #8]
 8010eb6:	60eb      	str	r3, [r5, #12]
 8010eb8:	6820      	ldr	r0, [r4, #0]
 8010eba:	6128      	str	r0, [r5, #16]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,e");
 8010ebc:	687b      	ldr	r3, [r7, #4]
 8010ebe:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8010ec2:	4a9d      	ldr	r2, [pc, #628]	; (8011138 <problem_fetch+0xfad4>)
 8010ec4:	461c      	mov	r4, r3
 8010ec6:	4615      	mov	r5, r2
 8010ec8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010eca:	6020      	str	r0, [r4, #0]
 8010ecc:	6061      	str	r1, [r4, #4]
 8010ece:	60a2      	str	r2, [r4, #8]
 8010ed0:	60e3      	str	r3, [r4, #12]
			break;
 8010ed2:	f00b baf7 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 456 :
			strcpy(p->name,"LESS REST MORE INJURY");
 8010ed6:	687b      	ldr	r3, [r7, #4]
 8010ed8:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8010edc:	4a97      	ldr	r2, [pc, #604]	; (801113c <problem_fetch+0xfad8>)
 8010ede:	461d      	mov	r5, r3
 8010ee0:	4614      	mov	r4, r2
 8010ee2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8010ee4:	6028      	str	r0, [r5, #0]
 8010ee6:	6069      	str	r1, [r5, #4]
 8010ee8:	60aa      	str	r2, [r5, #8]
 8010eea:	60eb      	str	r3, [r5, #12]
 8010eec:	6820      	ldr	r0, [r4, #0]
 8010eee:	6128      	str	r0, [r5, #16]
 8010ef0:	88a3      	ldrh	r3, [r4, #4]
 8010ef2:	82ab      	strh	r3, [r5, #20]
			strcpy(p->grade,"6C+");
 8010ef4:	687b      	ldr	r3, [r7, #4]
 8010ef6:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8010efa:	4a91      	ldr	r2, [pc, #580]	; (8011140 <problem_fetch+0xfadc>)
 8010efc:	6810      	ldr	r0, [r2, #0]
 8010efe:	6018      	str	r0, [r3, #0]
			p->moveSize = 9;
 8010f00:	687b      	ldr	r3, [r7, #4]
 8010f02:	2209      	movs	r2, #9
 8010f04:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,E,J,G,F,G,J,G,D");
 8010f06:	687b      	ldr	r3, [r7, #4]
 8010f08:	33a4      	adds	r3, #164	; 0xa4
 8010f0a:	4a8e      	ldr	r2, [pc, #568]	; (8011144 <problem_fetch+0xfae0>)
 8010f0c:	461d      	mov	r5, r3
 8010f0e:	4614      	mov	r4, r2
 8010f10:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8010f12:	6028      	str	r0, [r5, #0]
 8010f14:	6069      	str	r1, [r5, #4]
 8010f16:	60aa      	str	r2, [r5, #8]
 8010f18:	60eb      	str	r3, [r5, #12]
 8010f1a:	8823      	ldrh	r3, [r4, #0]
 8010f1c:	822b      	strh	r3, [r5, #16]
			strcpy(p->moveNumbers,"6,6,7,9,11,17,13,15,18");
 8010f1e:	687b      	ldr	r3, [r7, #4]
 8010f20:	3304      	adds	r3, #4
 8010f22:	4a89      	ldr	r2, [pc, #548]	; (8011148 <problem_fetch+0xfae4>)
 8010f24:	461c      	mov	r4, r3
 8010f26:	4615      	mov	r5, r2
 8010f28:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010f2a:	6020      	str	r0, [r4, #0]
 8010f2c:	6061      	str	r1, [r4, #4]
 8010f2e:	60a2      	str	r2, [r4, #8]
 8010f30:	60e3      	str	r3, [r4, #12]
 8010f32:	6828      	ldr	r0, [r5, #0]
 8010f34:	6120      	str	r0, [r4, #16]
 8010f36:	88ab      	ldrh	r3, [r5, #4]
 8010f38:	79aa      	ldrb	r2, [r5, #6]
 8010f3a:	82a3      	strh	r3, [r4, #20]
 8010f3c:	4613      	mov	r3, r2
 8010f3e:	75a3      	strb	r3, [r4, #22]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,d,e");
 8010f40:	687b      	ldr	r3, [r7, #4]
 8010f42:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8010f46:	4a81      	ldr	r2, [pc, #516]	; (801114c <problem_fetch+0xfae8>)
 8010f48:	461d      	mov	r5, r3
 8010f4a:	4614      	mov	r4, r2
 8010f4c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8010f4e:	6028      	str	r0, [r5, #0]
 8010f50:	6069      	str	r1, [r5, #4]
 8010f52:	60aa      	str	r2, [r5, #8]
 8010f54:	60eb      	str	r3, [r5, #12]
 8010f56:	8823      	ldrh	r3, [r4, #0]
 8010f58:	822b      	strh	r3, [r5, #16]
			break;
 8010f5a:	f00b bab3 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 457 :
			strcpy(p->name,"MORE EFFORT LESS SKIN");
 8010f5e:	687b      	ldr	r3, [r7, #4]
 8010f60:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8010f64:	4a7a      	ldr	r2, [pc, #488]	; (8011150 <problem_fetch+0xfaec>)
 8010f66:	461d      	mov	r5, r3
 8010f68:	4614      	mov	r4, r2
 8010f6a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8010f6c:	6028      	str	r0, [r5, #0]
 8010f6e:	6069      	str	r1, [r5, #4]
 8010f70:	60aa      	str	r2, [r5, #8]
 8010f72:	60eb      	str	r3, [r5, #12]
 8010f74:	6820      	ldr	r0, [r4, #0]
 8010f76:	6128      	str	r0, [r5, #16]
 8010f78:	88a3      	ldrh	r3, [r4, #4]
 8010f7a:	82ab      	strh	r3, [r5, #20]
			strcpy(p->grade,"6C+");
 8010f7c:	687b      	ldr	r3, [r7, #4]
 8010f7e:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8010f82:	4a6f      	ldr	r2, [pc, #444]	; (8011140 <problem_fetch+0xfadc>)
 8010f84:	6810      	ldr	r0, [r2, #0]
 8010f86:	6018      	str	r0, [r3, #0]
			p->moveSize = 8;
 8010f88:	687b      	ldr	r3, [r7, #4]
 8010f8a:	2208      	movs	r2, #8
 8010f8c:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"E,G,H,J,F,G,J,I");
 8010f8e:	687b      	ldr	r3, [r7, #4]
 8010f90:	33a4      	adds	r3, #164	; 0xa4
 8010f92:	4a70      	ldr	r2, [pc, #448]	; (8011154 <problem_fetch+0xfaf0>)
 8010f94:	461c      	mov	r4, r3
 8010f96:	4615      	mov	r5, r2
 8010f98:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010f9a:	6020      	str	r0, [r4, #0]
 8010f9c:	6061      	str	r1, [r4, #4]
 8010f9e:	60a2      	str	r2, [r4, #8]
 8010fa0:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"6,6,16,13,11,9,7,18");
 8010fa2:	687b      	ldr	r3, [r7, #4]
 8010fa4:	3304      	adds	r3, #4
 8010fa6:	4a6c      	ldr	r2, [pc, #432]	; (8011158 <problem_fetch+0xfaf4>)
 8010fa8:	461d      	mov	r5, r3
 8010faa:	4614      	mov	r4, r2
 8010fac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8010fae:	6028      	str	r0, [r5, #0]
 8010fb0:	6069      	str	r1, [r5, #4]
 8010fb2:	60aa      	str	r2, [r5, #8]
 8010fb4:	60eb      	str	r3, [r5, #12]
 8010fb6:	6820      	ldr	r0, [r4, #0]
 8010fb8:	6128      	str	r0, [r5, #16]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,e");
 8010fba:	687b      	ldr	r3, [r7, #4]
 8010fbc:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8010fc0:	4a5d      	ldr	r2, [pc, #372]	; (8011138 <problem_fetch+0xfad4>)
 8010fc2:	461c      	mov	r4, r3
 8010fc4:	4615      	mov	r5, r2
 8010fc6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010fc8:	6020      	str	r0, [r4, #0]
 8010fca:	6061      	str	r1, [r4, #4]
 8010fcc:	60a2      	str	r2, [r4, #8]
 8010fce:	60e3      	str	r3, [r4, #12]
			break;
 8010fd0:	f00b ba78 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 458 :
			strcpy(p->name,"SKWAMA");
 8010fd4:	687b      	ldr	r3, [r7, #4]
 8010fd6:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8010fda:	4a60      	ldr	r2, [pc, #384]	; (801115c <problem_fetch+0xfaf8>)
 8010fdc:	6810      	ldr	r0, [r2, #0]
 8010fde:	6018      	str	r0, [r3, #0]
 8010fe0:	8891      	ldrh	r1, [r2, #4]
 8010fe2:	7992      	ldrb	r2, [r2, #6]
 8010fe4:	8099      	strh	r1, [r3, #4]
 8010fe6:	719a      	strb	r2, [r3, #6]
			strcpy(p->grade,"6B+");
 8010fe8:	687b      	ldr	r3, [r7, #4]
 8010fea:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8010fee:	4a5c      	ldr	r2, [pc, #368]	; (8011160 <problem_fetch+0xfafc>)
 8010ff0:	6810      	ldr	r0, [r2, #0]
 8010ff2:	6018      	str	r0, [r3, #0]
			p->moveSize = 8;
 8010ff4:	687b      	ldr	r3, [r7, #4]
 8010ff6:	2208      	movs	r2, #8
 8010ff8:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,E,I,J,H,K,G,I");
 8010ffa:	687b      	ldr	r3, [r7, #4]
 8010ffc:	33a4      	adds	r3, #164	; 0xa4
 8010ffe:	4a59      	ldr	r2, [pc, #356]	; (8011164 <problem_fetch+0xfb00>)
 8011000:	461c      	mov	r4, r3
 8011002:	4615      	mov	r5, r2
 8011004:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011006:	6020      	str	r0, [r4, #0]
 8011008:	6061      	str	r1, [r4, #4]
 801100a:	60a2      	str	r2, [r4, #8]
 801100c:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,8,10,7,12,14,15,18");
 801100e:	687b      	ldr	r3, [r7, #4]
 8011010:	3304      	adds	r3, #4
 8011012:	4a55      	ldr	r2, [pc, #340]	; (8011168 <problem_fetch+0xfb04>)
 8011014:	461d      	mov	r5, r3
 8011016:	4614      	mov	r4, r2
 8011018:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801101a:	6028      	str	r0, [r5, #0]
 801101c:	6069      	str	r1, [r5, #4]
 801101e:	60aa      	str	r2, [r5, #8]
 8011020:	60eb      	str	r3, [r5, #12]
 8011022:	6820      	ldr	r0, [r4, #0]
 8011024:	6128      	str	r0, [r5, #16]
 8011026:	7923      	ldrb	r3, [r4, #4]
 8011028:	752b      	strb	r3, [r5, #20]
			strcpy(p->startFinish,"s,d,d,d,d,d,d,e");
 801102a:	687b      	ldr	r3, [r7, #4]
 801102c:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8011030:	4a4e      	ldr	r2, [pc, #312]	; (801116c <problem_fetch+0xfb08>)
 8011032:	461c      	mov	r4, r3
 8011034:	4615      	mov	r5, r2
 8011036:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011038:	6020      	str	r0, [r4, #0]
 801103a:	6061      	str	r1, [r4, #4]
 801103c:	60a2      	str	r2, [r4, #8]
 801103e:	60e3      	str	r3, [r4, #12]
			break;
 8011040:	f00b ba40 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 459 :
			strcpy(p->name,"NOIA");
 8011044:	687b      	ldr	r3, [r7, #4]
 8011046:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801104a:	4a49      	ldr	r2, [pc, #292]	; (8011170 <problem_fetch+0xfb0c>)
 801104c:	6810      	ldr	r0, [r2, #0]
 801104e:	6018      	str	r0, [r3, #0]
 8011050:	7912      	ldrb	r2, [r2, #4]
 8011052:	711a      	strb	r2, [r3, #4]
			strcpy(p->grade,"6C+");
 8011054:	687b      	ldr	r3, [r7, #4]
 8011056:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801105a:	4a39      	ldr	r2, [pc, #228]	; (8011140 <problem_fetch+0xfadc>)
 801105c:	6810      	ldr	r0, [r2, #0]
 801105e:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 8011060:	687b      	ldr	r3, [r7, #4]
 8011062:	2206      	movs	r2, #6
 8011064:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,G,C,E,A,A");
 8011066:	687b      	ldr	r3, [r7, #4]
 8011068:	33a4      	adds	r3, #164	; 0xa4
 801106a:	4a42      	ldr	r2, [pc, #264]	; (8011174 <problem_fetch+0xfb10>)
 801106c:	461c      	mov	r4, r3
 801106e:	4613      	mov	r3, r2
 8011070:	cb07      	ldmia	r3!, {r0, r1, r2}
 8011072:	6020      	str	r0, [r4, #0]
 8011074:	6061      	str	r1, [r4, #4]
 8011076:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"6,4,8,12,14,18");
 8011078:	687b      	ldr	r3, [r7, #4]
 801107a:	3304      	adds	r3, #4
 801107c:	4a3e      	ldr	r2, [pc, #248]	; (8011178 <problem_fetch+0xfb14>)
 801107e:	461c      	mov	r4, r3
 8011080:	4613      	mov	r3, r2
 8011082:	cb07      	ldmia	r3!, {r0, r1, r2}
 8011084:	6020      	str	r0, [r4, #0]
 8011086:	6061      	str	r1, [r4, #4]
 8011088:	60a2      	str	r2, [r4, #8]
 801108a:	881a      	ldrh	r2, [r3, #0]
 801108c:	789b      	ldrb	r3, [r3, #2]
 801108e:	81a2      	strh	r2, [r4, #12]
 8011090:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish,"s,s,d,d,d,e");
 8011092:	687b      	ldr	r3, [r7, #4]
 8011094:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8011098:	4a38      	ldr	r2, [pc, #224]	; (801117c <problem_fetch+0xfb18>)
 801109a:	461c      	mov	r4, r3
 801109c:	4613      	mov	r3, r2
 801109e:	cb07      	ldmia	r3!, {r0, r1, r2}
 80110a0:	6020      	str	r0, [r4, #0]
 80110a2:	6061      	str	r1, [r4, #4]
 80110a4:	60a2      	str	r2, [r4, #8]
			break;
 80110a6:	f00b ba0d 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 460 :
			strcpy(p->name,"LES DRUS");
 80110aa:	687b      	ldr	r3, [r7, #4]
 80110ac:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80110b0:	4933      	ldr	r1, [pc, #204]	; (8011180 <problem_fetch+0xfb1c>)
 80110b2:	461a      	mov	r2, r3
 80110b4:	460b      	mov	r3, r1
 80110b6:	cb03      	ldmia	r3!, {r0, r1}
 80110b8:	6010      	str	r0, [r2, #0]
 80110ba:	6051      	str	r1, [r2, #4]
 80110bc:	781b      	ldrb	r3, [r3, #0]
 80110be:	7213      	strb	r3, [r2, #8]
			strcpy(p->grade,"7A");
 80110c0:	687b      	ldr	r3, [r7, #4]
 80110c2:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80110c6:	4a19      	ldr	r2, [pc, #100]	; (801112c <problem_fetch+0xfac8>)
 80110c8:	8811      	ldrh	r1, [r2, #0]
 80110ca:	7892      	ldrb	r2, [r2, #2]
 80110cc:	8019      	strh	r1, [r3, #0]
 80110ce:	709a      	strb	r2, [r3, #2]
			p->moveSize = 7;
 80110d0:	687b      	ldr	r3, [r7, #4]
 80110d2:	2207      	movs	r2, #7
 80110d4:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,G,H,E,I,I,D");
 80110d6:	687b      	ldr	r3, [r7, #4]
 80110d8:	33a4      	adds	r3, #164	; 0xa4
 80110da:	4a2a      	ldr	r2, [pc, #168]	; (8011184 <problem_fetch+0xfb20>)
 80110dc:	461c      	mov	r4, r3
 80110de:	4613      	mov	r3, r2
 80110e0:	cb07      	ldmia	r3!, {r0, r1, r2}
 80110e2:	6020      	str	r0, [r4, #0]
 80110e4:	6061      	str	r1, [r4, #4]
 80110e6:	60a2      	str	r2, [r4, #8]
 80110e8:	881b      	ldrh	r3, [r3, #0]
 80110ea:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,15,16,12,10,7,18");
 80110ec:	687b      	ldr	r3, [r7, #4]
 80110ee:	3304      	adds	r3, #4
 80110f0:	4a25      	ldr	r2, [pc, #148]	; (8011188 <problem_fetch+0xfb24>)
 80110f2:	461d      	mov	r5, r3
 80110f4:	4614      	mov	r4, r2
 80110f6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80110f8:	6028      	str	r0, [r5, #0]
 80110fa:	6069      	str	r1, [r5, #4]
 80110fc:	60aa      	str	r2, [r5, #8]
 80110fe:	60eb      	str	r3, [r5, #12]
 8011100:	8823      	ldrh	r3, [r4, #0]
 8011102:	78a2      	ldrb	r2, [r4, #2]
 8011104:	822b      	strh	r3, [r5, #16]
 8011106:	4613      	mov	r3, r2
 8011108:	74ab      	strb	r3, [r5, #18]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 801110a:	687b      	ldr	r3, [r7, #4]
 801110c:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8011110:	4a1e      	ldr	r2, [pc, #120]	; (801118c <problem_fetch+0xfb28>)
 8011112:	461c      	mov	r4, r3
 8011114:	4613      	mov	r3, r2
 8011116:	cb07      	ldmia	r3!, {r0, r1, r2}
 8011118:	6020      	str	r0, [r4, #0]
 801111a:	6061      	str	r1, [r4, #4]
 801111c:	60a2      	str	r2, [r4, #8]
 801111e:	881b      	ldrh	r3, [r3, #0]
 8011120:	81a3      	strh	r3, [r4, #12]
			break;
 8011122:	f00b b9cf 	b.w	801c4c4 <problem_fetch+0x1ae60>
 8011126:	bf00      	nop
 8011128:	080292a0 	.word	0x080292a0
 801112c:	08023ae4 	.word	0x08023ae4
 8011130:	080292ac 	.word	0x080292ac
 8011134:	080292bc 	.word	0x080292bc
 8011138:	08023c48 	.word	0x08023c48
 801113c:	080292d0 	.word	0x080292d0
 8011140:	08023bbc 	.word	0x08023bbc
 8011144:	080292e8 	.word	0x080292e8
 8011148:	080292fc 	.word	0x080292fc
 801114c:	08024b08 	.word	0x08024b08
 8011150:	08029314 	.word	0x08029314
 8011154:	0802932c 	.word	0x0802932c
 8011158:	0802933c 	.word	0x0802933c
 801115c:	08029350 	.word	0x08029350
 8011160:	08023b24 	.word	0x08023b24
 8011164:	08029358 	.word	0x08029358
 8011168:	08029368 	.word	0x08029368
 801116c:	08023d34 	.word	0x08023d34
 8011170:	08029380 	.word	0x08029380
 8011174:	08029388 	.word	0x08029388
 8011178:	08029394 	.word	0x08029394
 801117c:	08023b04 	.word	0x08023b04
 8011180:	080293a4 	.word	0x080293a4
 8011184:	080293b0 	.word	0x080293b0
 8011188:	080293c0 	.word	0x080293c0
 801118c:	08023cac 	.word	0x08023cac
		case 461 :
			strcpy(p->name,"GTC&AMP;TCT");
 8011190:	687b      	ldr	r3, [r7, #4]
 8011192:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8011196:	4aba      	ldr	r2, [pc, #744]	; (8011480 <problem_fetch+0xfe1c>)
 8011198:	461c      	mov	r4, r3
 801119a:	4613      	mov	r3, r2
 801119c:	cb07      	ldmia	r3!, {r0, r1, r2}
 801119e:	6020      	str	r0, [r4, #0]
 80111a0:	6061      	str	r1, [r4, #4]
 80111a2:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade,"6C+");
 80111a4:	687b      	ldr	r3, [r7, #4]
 80111a6:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80111aa:	4ab6      	ldr	r2, [pc, #728]	; (8011484 <problem_fetch+0xfe20>)
 80111ac:	6810      	ldr	r0, [r2, #0]
 80111ae:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 80111b0:	687b      	ldr	r3, [r7, #4]
 80111b2:	2207      	movs	r2, #7
 80111b4:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,F,G,J,I,J,D");
 80111b6:	687b      	ldr	r3, [r7, #4]
 80111b8:	33a4      	adds	r3, #164	; 0xa4
 80111ba:	4ab3      	ldr	r2, [pc, #716]	; (8011488 <problem_fetch+0xfe24>)
 80111bc:	461c      	mov	r4, r3
 80111be:	4613      	mov	r3, r2
 80111c0:	cb07      	ldmia	r3!, {r0, r1, r2}
 80111c2:	6020      	str	r0, [r4, #0]
 80111c4:	6061      	str	r1, [r4, #4]
 80111c6:	60a2      	str	r2, [r4, #8]
 80111c8:	881b      	ldrh	r3, [r3, #0]
 80111ca:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,13,17,12,10,7,18");
 80111cc:	687b      	ldr	r3, [r7, #4]
 80111ce:	3304      	adds	r3, #4
 80111d0:	4aae      	ldr	r2, [pc, #696]	; (801148c <problem_fetch+0xfe28>)
 80111d2:	461d      	mov	r5, r3
 80111d4:	4614      	mov	r4, r2
 80111d6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80111d8:	6028      	str	r0, [r5, #0]
 80111da:	6069      	str	r1, [r5, #4]
 80111dc:	60aa      	str	r2, [r5, #8]
 80111de:	60eb      	str	r3, [r5, #12]
 80111e0:	8823      	ldrh	r3, [r4, #0]
 80111e2:	78a2      	ldrb	r2, [r4, #2]
 80111e4:	822b      	strh	r3, [r5, #16]
 80111e6:	4613      	mov	r3, r2
 80111e8:	74ab      	strb	r3, [r5, #18]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 80111ea:	687b      	ldr	r3, [r7, #4]
 80111ec:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 80111f0:	4aa7      	ldr	r2, [pc, #668]	; (8011490 <problem_fetch+0xfe2c>)
 80111f2:	461c      	mov	r4, r3
 80111f4:	4613      	mov	r3, r2
 80111f6:	cb07      	ldmia	r3!, {r0, r1, r2}
 80111f8:	6020      	str	r0, [r4, #0]
 80111fa:	6061      	str	r1, [r4, #4]
 80111fc:	60a2      	str	r2, [r4, #8]
 80111fe:	881b      	ldrh	r3, [r3, #0]
 8011200:	81a3      	strh	r3, [r4, #12]
			break;
 8011202:	f00b b95f 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 462 :
			strcpy(p->name,"LA COSA NOSTRA");
 8011206:	687b      	ldr	r3, [r7, #4]
 8011208:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801120c:	4aa1      	ldr	r2, [pc, #644]	; (8011494 <problem_fetch+0xfe30>)
 801120e:	461c      	mov	r4, r3
 8011210:	4613      	mov	r3, r2
 8011212:	cb07      	ldmia	r3!, {r0, r1, r2}
 8011214:	6020      	str	r0, [r4, #0]
 8011216:	6061      	str	r1, [r4, #4]
 8011218:	60a2      	str	r2, [r4, #8]
 801121a:	881a      	ldrh	r2, [r3, #0]
 801121c:	789b      	ldrb	r3, [r3, #2]
 801121e:	81a2      	strh	r2, [r4, #12]
 8011220:	73a3      	strb	r3, [r4, #14]
			strcpy(p->grade,"6C+");
 8011222:	687b      	ldr	r3, [r7, #4]
 8011224:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8011228:	4a96      	ldr	r2, [pc, #600]	; (8011484 <problem_fetch+0xfe20>)
 801122a:	6810      	ldr	r0, [r2, #0]
 801122c:	6018      	str	r0, [r3, #0]
			p->moveSize = 9;
 801122e:	687b      	ldr	r3, [r7, #4]
 8011230:	2209      	movs	r2, #9
 8011232:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,G,E,F,J,J,H,G,D");
 8011234:	687b      	ldr	r3, [r7, #4]
 8011236:	33a4      	adds	r3, #164	; 0xa4
 8011238:	4a97      	ldr	r2, [pc, #604]	; (8011498 <problem_fetch+0xfe34>)
 801123a:	461d      	mov	r5, r3
 801123c:	4614      	mov	r4, r2
 801123e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8011240:	6028      	str	r0, [r5, #0]
 8011242:	6069      	str	r1, [r5, #4]
 8011244:	60aa      	str	r2, [r5, #8]
 8011246:	60eb      	str	r3, [r5, #12]
 8011248:	8823      	ldrh	r3, [r4, #0]
 801124a:	822b      	strh	r3, [r5, #16]
			strcpy(p->moveNumbers,"4,9,6,11,7,13,16,17,18");
 801124c:	687b      	ldr	r3, [r7, #4]
 801124e:	3304      	adds	r3, #4
 8011250:	4a92      	ldr	r2, [pc, #584]	; (801149c <problem_fetch+0xfe38>)
 8011252:	461c      	mov	r4, r3
 8011254:	4615      	mov	r5, r2
 8011256:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011258:	6020      	str	r0, [r4, #0]
 801125a:	6061      	str	r1, [r4, #4]
 801125c:	60a2      	str	r2, [r4, #8]
 801125e:	60e3      	str	r3, [r4, #12]
 8011260:	6828      	ldr	r0, [r5, #0]
 8011262:	6120      	str	r0, [r4, #16]
 8011264:	88ab      	ldrh	r3, [r5, #4]
 8011266:	79aa      	ldrb	r2, [r5, #6]
 8011268:	82a3      	strh	r3, [r4, #20]
 801126a:	4613      	mov	r3, r2
 801126c:	75a3      	strb	r3, [r4, #22]
			strcpy(p->startFinish,"s,d,d,d,d,d,d,d,e");
 801126e:	687b      	ldr	r3, [r7, #4]
 8011270:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8011274:	4a8a      	ldr	r2, [pc, #552]	; (80114a0 <problem_fetch+0xfe3c>)
 8011276:	461d      	mov	r5, r3
 8011278:	4614      	mov	r4, r2
 801127a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801127c:	6028      	str	r0, [r5, #0]
 801127e:	6069      	str	r1, [r5, #4]
 8011280:	60aa      	str	r2, [r5, #8]
 8011282:	60eb      	str	r3, [r5, #12]
 8011284:	8823      	ldrh	r3, [r4, #0]
 8011286:	822b      	strh	r3, [r5, #16]
			break;
 8011288:	f00b b91c 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 463 :
			strcpy(p->name,"SMALL COSA NOSTRA");
 801128c:	687b      	ldr	r3, [r7, #4]
 801128e:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8011292:	4a84      	ldr	r2, [pc, #528]	; (80114a4 <problem_fetch+0xfe40>)
 8011294:	461d      	mov	r5, r3
 8011296:	4614      	mov	r4, r2
 8011298:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801129a:	6028      	str	r0, [r5, #0]
 801129c:	6069      	str	r1, [r5, #4]
 801129e:	60aa      	str	r2, [r5, #8]
 80112a0:	60eb      	str	r3, [r5, #12]
 80112a2:	8823      	ldrh	r3, [r4, #0]
 80112a4:	822b      	strh	r3, [r5, #16]
			strcpy(p->grade,"6C");
 80112a6:	687b      	ldr	r3, [r7, #4]
 80112a8:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80112ac:	4a7e      	ldr	r2, [pc, #504]	; (80114a8 <problem_fetch+0xfe44>)
 80112ae:	8811      	ldrh	r1, [r2, #0]
 80112b0:	7892      	ldrb	r2, [r2, #2]
 80112b2:	8019      	strh	r1, [r3, #0]
 80112b4:	709a      	strb	r2, [r3, #2]
			p->moveSize = 8;
 80112b6:	687b      	ldr	r3, [r7, #4]
 80112b8:	2208      	movs	r2, #8
 80112ba:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,E,J,F,E,J,H,I");
 80112bc:	687b      	ldr	r3, [r7, #4]
 80112be:	33a4      	adds	r3, #164	; 0xa4
 80112c0:	4a7a      	ldr	r2, [pc, #488]	; (80114ac <problem_fetch+0xfe48>)
 80112c2:	461c      	mov	r4, r3
 80112c4:	4615      	mov	r5, r2
 80112c6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80112c8:	6020      	str	r0, [r4, #0]
 80112ca:	6061      	str	r1, [r4, #4]
 80112cc:	60a2      	str	r2, [r4, #8]
 80112ce:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,8,7,11,12,13,16,18");
 80112d0:	687b      	ldr	r3, [r7, #4]
 80112d2:	3304      	adds	r3, #4
 80112d4:	4a76      	ldr	r2, [pc, #472]	; (80114b0 <problem_fetch+0xfe4c>)
 80112d6:	461d      	mov	r5, r3
 80112d8:	4614      	mov	r4, r2
 80112da:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80112dc:	6028      	str	r0, [r5, #0]
 80112de:	6069      	str	r1, [r5, #4]
 80112e0:	60aa      	str	r2, [r5, #8]
 80112e2:	60eb      	str	r3, [r5, #12]
 80112e4:	6820      	ldr	r0, [r4, #0]
 80112e6:	6128      	str	r0, [r5, #16]
 80112e8:	7923      	ldrb	r3, [r4, #4]
 80112ea:	752b      	strb	r3, [r5, #20]
			strcpy(p->startFinish,"s,d,d,d,d,d,d,e");
 80112ec:	687b      	ldr	r3, [r7, #4]
 80112ee:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 80112f2:	4a70      	ldr	r2, [pc, #448]	; (80114b4 <problem_fetch+0xfe50>)
 80112f4:	461c      	mov	r4, r3
 80112f6:	4615      	mov	r5, r2
 80112f8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80112fa:	6020      	str	r0, [r4, #0]
 80112fc:	6061      	str	r1, [r4, #4]
 80112fe:	60a2      	str	r2, [r4, #8]
 8011300:	60e3      	str	r3, [r4, #12]
			break;
 8011302:	f00b b8df 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 464 :
			strcpy(p->name,"LITTLE COSA NOSTRA");
 8011306:	687b      	ldr	r3, [r7, #4]
 8011308:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801130c:	4a6a      	ldr	r2, [pc, #424]	; (80114b8 <problem_fetch+0xfe54>)
 801130e:	461d      	mov	r5, r3
 8011310:	4614      	mov	r4, r2
 8011312:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8011314:	6028      	str	r0, [r5, #0]
 8011316:	6069      	str	r1, [r5, #4]
 8011318:	60aa      	str	r2, [r5, #8]
 801131a:	60eb      	str	r3, [r5, #12]
 801131c:	8823      	ldrh	r3, [r4, #0]
 801131e:	78a2      	ldrb	r2, [r4, #2]
 8011320:	822b      	strh	r3, [r5, #16]
 8011322:	4613      	mov	r3, r2
 8011324:	74ab      	strb	r3, [r5, #18]
			strcpy(p->grade,"6C");
 8011326:	687b      	ldr	r3, [r7, #4]
 8011328:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801132c:	4a5e      	ldr	r2, [pc, #376]	; (80114a8 <problem_fetch+0xfe44>)
 801132e:	8811      	ldrh	r1, [r2, #0]
 8011330:	7892      	ldrb	r2, [r2, #2]
 8011332:	8019      	strh	r1, [r3, #0]
 8011334:	709a      	strb	r2, [r3, #2]
			p->moveSize = 9;
 8011336:	687b      	ldr	r3, [r7, #4]
 8011338:	2209      	movs	r2, #9
 801133a:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"C,E,C,F,K,G,I,E,D");
 801133c:	687b      	ldr	r3, [r7, #4]
 801133e:	33a4      	adds	r3, #164	; 0xa4
 8011340:	4a5e      	ldr	r2, [pc, #376]	; (80114bc <problem_fetch+0xfe58>)
 8011342:	461d      	mov	r5, r3
 8011344:	4614      	mov	r4, r2
 8011346:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8011348:	6028      	str	r0, [r5, #0]
 801134a:	6069      	str	r1, [r5, #4]
 801134c:	60aa      	str	r2, [r5, #8]
 801134e:	60eb      	str	r3, [r5, #12]
 8011350:	8823      	ldrh	r3, [r4, #0]
 8011352:	822b      	strh	r3, [r5, #16]
			strcpy(p->moveNumbers,"5,6,8,11,9,10,14,16,18");
 8011354:	687b      	ldr	r3, [r7, #4]
 8011356:	3304      	adds	r3, #4
 8011358:	4a59      	ldr	r2, [pc, #356]	; (80114c0 <problem_fetch+0xfe5c>)
 801135a:	461c      	mov	r4, r3
 801135c:	4615      	mov	r5, r2
 801135e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011360:	6020      	str	r0, [r4, #0]
 8011362:	6061      	str	r1, [r4, #4]
 8011364:	60a2      	str	r2, [r4, #8]
 8011366:	60e3      	str	r3, [r4, #12]
 8011368:	6828      	ldr	r0, [r5, #0]
 801136a:	6120      	str	r0, [r4, #16]
 801136c:	88ab      	ldrh	r3, [r5, #4]
 801136e:	79aa      	ldrb	r2, [r5, #6]
 8011370:	82a3      	strh	r3, [r4, #20]
 8011372:	4613      	mov	r3, r2
 8011374:	75a3      	strb	r3, [r4, #22]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,d,e");
 8011376:	687b      	ldr	r3, [r7, #4]
 8011378:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 801137c:	4a51      	ldr	r2, [pc, #324]	; (80114c4 <problem_fetch+0xfe60>)
 801137e:	461d      	mov	r5, r3
 8011380:	4614      	mov	r4, r2
 8011382:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8011384:	6028      	str	r0, [r5, #0]
 8011386:	6069      	str	r1, [r5, #4]
 8011388:	60aa      	str	r2, [r5, #8]
 801138a:	60eb      	str	r3, [r5, #12]
 801138c:	8823      	ldrh	r3, [r4, #0]
 801138e:	822b      	strh	r3, [r5, #16]
			break;
 8011390:	f00b b898 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 465 :
			strcpy(p->name,"THE MOVE");
 8011394:	687b      	ldr	r3, [r7, #4]
 8011396:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801139a:	494b      	ldr	r1, [pc, #300]	; (80114c8 <problem_fetch+0xfe64>)
 801139c:	461a      	mov	r2, r3
 801139e:	460b      	mov	r3, r1
 80113a0:	cb03      	ldmia	r3!, {r0, r1}
 80113a2:	6010      	str	r0, [r2, #0]
 80113a4:	6051      	str	r1, [r2, #4]
 80113a6:	781b      	ldrb	r3, [r3, #0]
 80113a8:	7213      	strb	r3, [r2, #8]
			strcpy(p->grade,"6C");
 80113aa:	687b      	ldr	r3, [r7, #4]
 80113ac:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80113b0:	4a3d      	ldr	r2, [pc, #244]	; (80114a8 <problem_fetch+0xfe44>)
 80113b2:	8811      	ldrh	r1, [r2, #0]
 80113b4:	7892      	ldrb	r2, [r2, #2]
 80113b6:	8019      	strh	r1, [r3, #0]
 80113b8:	709a      	strb	r2, [r3, #2]
			p->moveSize = 7;
 80113ba:	687b      	ldr	r3, [r7, #4]
 80113bc:	2207      	movs	r2, #7
 80113be:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,E,E,E,H,H,I");
 80113c0:	687b      	ldr	r3, [r7, #4]
 80113c2:	33a4      	adds	r3, #164	; 0xa4
 80113c4:	4a41      	ldr	r2, [pc, #260]	; (80114cc <problem_fetch+0xfe68>)
 80113c6:	461c      	mov	r4, r3
 80113c8:	4613      	mov	r3, r2
 80113ca:	cb07      	ldmia	r3!, {r0, r1, r2}
 80113cc:	6020      	str	r0, [r4, #0]
 80113ce:	6061      	str	r1, [r4, #4]
 80113d0:	60a2      	str	r2, [r4, #8]
 80113d2:	881b      	ldrh	r3, [r3, #0]
 80113d4:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,6,9,12,12,16,18");
 80113d6:	687b      	ldr	r3, [r7, #4]
 80113d8:	3304      	adds	r3, #4
 80113da:	4a3d      	ldr	r2, [pc, #244]	; (80114d0 <problem_fetch+0xfe6c>)
 80113dc:	461d      	mov	r5, r3
 80113de:	4614      	mov	r4, r2
 80113e0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80113e2:	6028      	str	r0, [r5, #0]
 80113e4:	6069      	str	r1, [r5, #4]
 80113e6:	60aa      	str	r2, [r5, #8]
 80113e8:	60eb      	str	r3, [r5, #12]
 80113ea:	8823      	ldrh	r3, [r4, #0]
 80113ec:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 80113ee:	687b      	ldr	r3, [r7, #4]
 80113f0:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 80113f4:	4a26      	ldr	r2, [pc, #152]	; (8011490 <problem_fetch+0xfe2c>)
 80113f6:	461c      	mov	r4, r3
 80113f8:	4613      	mov	r3, r2
 80113fa:	cb07      	ldmia	r3!, {r0, r1, r2}
 80113fc:	6020      	str	r0, [r4, #0]
 80113fe:	6061      	str	r1, [r4, #4]
 8011400:	60a2      	str	r2, [r4, #8]
 8011402:	881b      	ldrh	r3, [r3, #0]
 8011404:	81a3      	strh	r3, [r4, #12]
			break;
 8011406:	f00b b85d 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 466 :
			strcpy(p->name,"THE LITTLE ISLAND");
 801140a:	687b      	ldr	r3, [r7, #4]
 801140c:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8011410:	4a30      	ldr	r2, [pc, #192]	; (80114d4 <problem_fetch+0xfe70>)
 8011412:	461d      	mov	r5, r3
 8011414:	4614      	mov	r4, r2
 8011416:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8011418:	6028      	str	r0, [r5, #0]
 801141a:	6069      	str	r1, [r5, #4]
 801141c:	60aa      	str	r2, [r5, #8]
 801141e:	60eb      	str	r3, [r5, #12]
 8011420:	8823      	ldrh	r3, [r4, #0]
 8011422:	822b      	strh	r3, [r5, #16]
			strcpy(p->grade,"7B");
 8011424:	687b      	ldr	r3, [r7, #4]
 8011426:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801142a:	4a2b      	ldr	r2, [pc, #172]	; (80114d8 <problem_fetch+0xfe74>)
 801142c:	8811      	ldrh	r1, [r2, #0]
 801142e:	7892      	ldrb	r2, [r2, #2]
 8011430:	8019      	strh	r1, [r3, #0]
 8011432:	709a      	strb	r2, [r3, #2]
			p->moveSize = 6;
 8011434:	687b      	ldr	r3, [r7, #4]
 8011436:	2206      	movs	r2, #6
 8011438:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,G,K,H,G,D");
 801143a:	687b      	ldr	r3, [r7, #4]
 801143c:	33a4      	adds	r3, #164	; 0xa4
 801143e:	4a27      	ldr	r2, [pc, #156]	; (80114dc <problem_fetch+0xfe78>)
 8011440:	461c      	mov	r4, r3
 8011442:	4613      	mov	r3, r2
 8011444:	cb07      	ldmia	r3!, {r0, r1, r2}
 8011446:	6020      	str	r0, [r4, #0]
 8011448:	6061      	str	r1, [r4, #4]
 801144a:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,6,9,12,17,18");
 801144c:	687b      	ldr	r3, [r7, #4]
 801144e:	3304      	adds	r3, #4
 8011450:	4a23      	ldr	r2, [pc, #140]	; (80114e0 <problem_fetch+0xfe7c>)
 8011452:	461c      	mov	r4, r3
 8011454:	4613      	mov	r3, r2
 8011456:	cb07      	ldmia	r3!, {r0, r1, r2}
 8011458:	6020      	str	r0, [r4, #0]
 801145a:	6061      	str	r1, [r4, #4]
 801145c:	60a2      	str	r2, [r4, #8]
 801145e:	881a      	ldrh	r2, [r3, #0]
 8011460:	789b      	ldrb	r3, [r3, #2]
 8011462:	81a2      	strh	r2, [r4, #12]
 8011464:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 8011466:	687b      	ldr	r3, [r7, #4]
 8011468:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 801146c:	4a1d      	ldr	r2, [pc, #116]	; (80114e4 <problem_fetch+0xfe80>)
 801146e:	461c      	mov	r4, r3
 8011470:	4613      	mov	r3, r2
 8011472:	cb07      	ldmia	r3!, {r0, r1, r2}
 8011474:	6020      	str	r0, [r4, #0]
 8011476:	6061      	str	r1, [r4, #4]
 8011478:	60a2      	str	r2, [r4, #8]
			break;
 801147a:	f00b b823 	b.w	801c4c4 <problem_fetch+0x1ae60>
 801147e:	bf00      	nop
 8011480:	080293d4 	.word	0x080293d4
 8011484:	08023bbc 	.word	0x08023bbc
 8011488:	080293e0 	.word	0x080293e0
 801148c:	080293f0 	.word	0x080293f0
 8011490:	08023cac 	.word	0x08023cac
 8011494:	08029404 	.word	0x08029404
 8011498:	08029414 	.word	0x08029414
 801149c:	08029428 	.word	0x08029428
 80114a0:	080259dc 	.word	0x080259dc
 80114a4:	08029440 	.word	0x08029440
 80114a8:	08023bf0 	.word	0x08023bf0
 80114ac:	08029454 	.word	0x08029454
 80114b0:	08029464 	.word	0x08029464
 80114b4:	08023d34 	.word	0x08023d34
 80114b8:	0802947c 	.word	0x0802947c
 80114bc:	08029490 	.word	0x08029490
 80114c0:	080294a4 	.word	0x080294a4
 80114c4:	08024b08 	.word	0x08024b08
 80114c8:	080294bc 	.word	0x080294bc
 80114cc:	080294c8 	.word	0x080294c8
 80114d0:	080294d8 	.word	0x080294d8
 80114d4:	080294ec 	.word	0x080294ec
 80114d8:	0802421c 	.word	0x0802421c
 80114dc:	08029500 	.word	0x08029500
 80114e0:	0802950c 	.word	0x0802950c
 80114e4:	08023ec0 	.word	0x08023ec0
		case 467 :
			strcpy(p->name,"FACE DE RAT");
 80114e8:	687b      	ldr	r3, [r7, #4]
 80114ea:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80114ee:	4aad      	ldr	r2, [pc, #692]	; (80117a4 <problem_fetch+0x10140>)
 80114f0:	461c      	mov	r4, r3
 80114f2:	4613      	mov	r3, r2
 80114f4:	cb07      	ldmia	r3!, {r0, r1, r2}
 80114f6:	6020      	str	r0, [r4, #0]
 80114f8:	6061      	str	r1, [r4, #4]
 80114fa:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade,"6C");
 80114fc:	687b      	ldr	r3, [r7, #4]
 80114fe:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8011502:	4aa9      	ldr	r2, [pc, #676]	; (80117a8 <problem_fetch+0x10144>)
 8011504:	8811      	ldrh	r1, [r2, #0]
 8011506:	7892      	ldrb	r2, [r2, #2]
 8011508:	8019      	strh	r1, [r3, #0]
 801150a:	709a      	strb	r2, [r3, #2]
			p->moveSize = 8;
 801150c:	687b      	ldr	r3, [r7, #4]
 801150e:	2208      	movs	r2, #8
 8011510:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,E,E,A,E,F,I,I");
 8011512:	687b      	ldr	r3, [r7, #4]
 8011514:	33a4      	adds	r3, #164	; 0xa4
 8011516:	4aa5      	ldr	r2, [pc, #660]	; (80117ac <problem_fetch+0x10148>)
 8011518:	461c      	mov	r4, r3
 801151a:	4615      	mov	r5, r2
 801151c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801151e:	6020      	str	r0, [r4, #0]
 8011520:	6061      	str	r1, [r4, #4]
 8011522:	60a2      	str	r2, [r4, #8]
 8011524:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,6,8,9,12,13,14,18");
 8011526:	687b      	ldr	r3, [r7, #4]
 8011528:	3304      	adds	r3, #4
 801152a:	4aa1      	ldr	r2, [pc, #644]	; (80117b0 <problem_fetch+0x1014c>)
 801152c:	461d      	mov	r5, r3
 801152e:	4614      	mov	r4, r2
 8011530:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8011532:	6028      	str	r0, [r5, #0]
 8011534:	6069      	str	r1, [r5, #4]
 8011536:	60aa      	str	r2, [r5, #8]
 8011538:	60eb      	str	r3, [r5, #12]
 801153a:	6820      	ldr	r0, [r4, #0]
 801153c:	6128      	str	r0, [r5, #16]
			strcpy(p->startFinish,"s,d,d,d,d,d,d,e");
 801153e:	687b      	ldr	r3, [r7, #4]
 8011540:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8011544:	4a9b      	ldr	r2, [pc, #620]	; (80117b4 <problem_fetch+0x10150>)
 8011546:	461c      	mov	r4, r3
 8011548:	4615      	mov	r5, r2
 801154a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801154c:	6020      	str	r0, [r4, #0]
 801154e:	6061      	str	r1, [r4, #4]
 8011550:	60a2      	str	r2, [r4, #8]
 8011552:	60e3      	str	r3, [r4, #12]
			break;
 8011554:	f00a bfb6 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 468 :
			strcpy(p->name,"THE F(L)IGHT");
 8011558:	687b      	ldr	r3, [r7, #4]
 801155a:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801155e:	4a96      	ldr	r2, [pc, #600]	; (80117b8 <problem_fetch+0x10154>)
 8011560:	461c      	mov	r4, r3
 8011562:	4613      	mov	r3, r2
 8011564:	cb07      	ldmia	r3!, {r0, r1, r2}
 8011566:	6020      	str	r0, [r4, #0]
 8011568:	6061      	str	r1, [r4, #4]
 801156a:	60a2      	str	r2, [r4, #8]
 801156c:	781b      	ldrb	r3, [r3, #0]
 801156e:	7323      	strb	r3, [r4, #12]
			strcpy(p->grade,"7A+");
 8011570:	687b      	ldr	r3, [r7, #4]
 8011572:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8011576:	4a91      	ldr	r2, [pc, #580]	; (80117bc <problem_fetch+0x10158>)
 8011578:	6810      	ldr	r0, [r2, #0]
 801157a:	6018      	str	r0, [r3, #0]
			p->moveSize = 8;
 801157c:	687b      	ldr	r3, [r7, #4]
 801157e:	2208      	movs	r2, #8
 8011580:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"C,B,G,F,J,J,E,I");
 8011582:	687b      	ldr	r3, [r7, #4]
 8011584:	33a4      	adds	r3, #164	; 0xa4
 8011586:	4a8e      	ldr	r2, [pc, #568]	; (80117c0 <problem_fetch+0x1015c>)
 8011588:	461c      	mov	r4, r3
 801158a:	4615      	mov	r5, r2
 801158c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801158e:	6020      	str	r0, [r4, #0]
 8011590:	6061      	str	r1, [r4, #4]
 8011592:	60a2      	str	r2, [r4, #8]
 8011594:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,6,15,11,13,7,9,18");
 8011596:	687b      	ldr	r3, [r7, #4]
 8011598:	3304      	adds	r3, #4
 801159a:	4a8a      	ldr	r2, [pc, #552]	; (80117c4 <problem_fetch+0x10160>)
 801159c:	461d      	mov	r5, r3
 801159e:	4614      	mov	r4, r2
 80115a0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80115a2:	6028      	str	r0, [r5, #0]
 80115a4:	6069      	str	r1, [r5, #4]
 80115a6:	60aa      	str	r2, [r5, #8]
 80115a8:	60eb      	str	r3, [r5, #12]
 80115aa:	6820      	ldr	r0, [r4, #0]
 80115ac:	6128      	str	r0, [r5, #16]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,e");
 80115ae:	687b      	ldr	r3, [r7, #4]
 80115b0:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 80115b4:	4a84      	ldr	r2, [pc, #528]	; (80117c8 <problem_fetch+0x10164>)
 80115b6:	461c      	mov	r4, r3
 80115b8:	4615      	mov	r5, r2
 80115ba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80115bc:	6020      	str	r0, [r4, #0]
 80115be:	6061      	str	r1, [r4, #4]
 80115c0:	60a2      	str	r2, [r4, #8]
 80115c2:	60e3      	str	r3, [r4, #12]
			break;
 80115c4:	f00a bf7e 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 469 :
			strcpy(p->name,"ONE PUNCH");
 80115c8:	687b      	ldr	r3, [r7, #4]
 80115ca:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80115ce:	497f      	ldr	r1, [pc, #508]	; (80117cc <problem_fetch+0x10168>)
 80115d0:	461a      	mov	r2, r3
 80115d2:	460b      	mov	r3, r1
 80115d4:	cb03      	ldmia	r3!, {r0, r1}
 80115d6:	6010      	str	r0, [r2, #0]
 80115d8:	6051      	str	r1, [r2, #4]
 80115da:	881b      	ldrh	r3, [r3, #0]
 80115dc:	8113      	strh	r3, [r2, #8]
			strcpy(p->grade,"6C");
 80115de:	687b      	ldr	r3, [r7, #4]
 80115e0:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80115e4:	4a70      	ldr	r2, [pc, #448]	; (80117a8 <problem_fetch+0x10144>)
 80115e6:	8811      	ldrh	r1, [r2, #0]
 80115e8:	7892      	ldrb	r2, [r2, #2]
 80115ea:	8019      	strh	r1, [r3, #0]
 80115ec:	709a      	strb	r2, [r3, #2]
			p->moveSize = 9;
 80115ee:	687b      	ldr	r3, [r7, #4]
 80115f0:	2209      	movs	r2, #9
 80115f2:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,J,G,K,H,K,G,I,D");
 80115f4:	687b      	ldr	r3, [r7, #4]
 80115f6:	33a4      	adds	r3, #164	; 0xa4
 80115f8:	4a75      	ldr	r2, [pc, #468]	; (80117d0 <problem_fetch+0x1016c>)
 80115fa:	461d      	mov	r5, r3
 80115fc:	4614      	mov	r4, r2
 80115fe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8011600:	6028      	str	r0, [r5, #0]
 8011602:	6069      	str	r1, [r5, #4]
 8011604:	60aa      	str	r2, [r5, #8]
 8011606:	60eb      	str	r3, [r5, #12]
 8011608:	8823      	ldrh	r3, [r4, #0]
 801160a:	822b      	strh	r3, [r5, #16]
			strcpy(p->moveNumbers,"4,5,15,9,12,14,17,7,18");
 801160c:	687b      	ldr	r3, [r7, #4]
 801160e:	3304      	adds	r3, #4
 8011610:	4a70      	ldr	r2, [pc, #448]	; (80117d4 <problem_fetch+0x10170>)
 8011612:	461c      	mov	r4, r3
 8011614:	4615      	mov	r5, r2
 8011616:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011618:	6020      	str	r0, [r4, #0]
 801161a:	6061      	str	r1, [r4, #4]
 801161c:	60a2      	str	r2, [r4, #8]
 801161e:	60e3      	str	r3, [r4, #12]
 8011620:	6828      	ldr	r0, [r5, #0]
 8011622:	6120      	str	r0, [r4, #16]
 8011624:	88ab      	ldrh	r3, [r5, #4]
 8011626:	79aa      	ldrb	r2, [r5, #6]
 8011628:	82a3      	strh	r3, [r4, #20]
 801162a:	4613      	mov	r3, r2
 801162c:	75a3      	strb	r3, [r4, #22]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,d,e");
 801162e:	687b      	ldr	r3, [r7, #4]
 8011630:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8011634:	4a68      	ldr	r2, [pc, #416]	; (80117d8 <problem_fetch+0x10174>)
 8011636:	461d      	mov	r5, r3
 8011638:	4614      	mov	r4, r2
 801163a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801163c:	6028      	str	r0, [r5, #0]
 801163e:	6069      	str	r1, [r5, #4]
 8011640:	60aa      	str	r2, [r5, #8]
 8011642:	60eb      	str	r3, [r5, #12]
 8011644:	8823      	ldrh	r3, [r4, #0]
 8011646:	822b      	strh	r3, [r5, #16]
			break;
 8011648:	f00a bf3c 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 470 :
			strcpy(p->name,"PIZZAPUNT");
 801164c:	687b      	ldr	r3, [r7, #4]
 801164e:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8011652:	4962      	ldr	r1, [pc, #392]	; (80117dc <problem_fetch+0x10178>)
 8011654:	461a      	mov	r2, r3
 8011656:	460b      	mov	r3, r1
 8011658:	cb03      	ldmia	r3!, {r0, r1}
 801165a:	6010      	str	r0, [r2, #0]
 801165c:	6051      	str	r1, [r2, #4]
 801165e:	881b      	ldrh	r3, [r3, #0]
 8011660:	8113      	strh	r3, [r2, #8]
			strcpy(p->grade,"6B+");
 8011662:	687b      	ldr	r3, [r7, #4]
 8011664:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8011668:	4a5d      	ldr	r2, [pc, #372]	; (80117e0 <problem_fetch+0x1017c>)
 801166a:	6810      	ldr	r0, [r2, #0]
 801166c:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 801166e:	687b      	ldr	r3, [r7, #4]
 8011670:	2207      	movs	r2, #7
 8011672:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,E,E,A,E,B,D");
 8011674:	687b      	ldr	r3, [r7, #4]
 8011676:	33a4      	adds	r3, #164	; 0xa4
 8011678:	4a5a      	ldr	r2, [pc, #360]	; (80117e4 <problem_fetch+0x10180>)
 801167a:	461c      	mov	r4, r3
 801167c:	4613      	mov	r3, r2
 801167e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8011680:	6020      	str	r0, [r4, #0]
 8011682:	6061      	str	r1, [r4, #4]
 8011684:	60a2      	str	r2, [r4, #8]
 8011686:	881b      	ldrh	r3, [r3, #0]
 8011688:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,6,8,9,12,15,18");
 801168a:	687b      	ldr	r3, [r7, #4]
 801168c:	3304      	adds	r3, #4
 801168e:	4a56      	ldr	r2, [pc, #344]	; (80117e8 <problem_fetch+0x10184>)
 8011690:	461d      	mov	r5, r3
 8011692:	4614      	mov	r4, r2
 8011694:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8011696:	6028      	str	r0, [r5, #0]
 8011698:	6069      	str	r1, [r5, #4]
 801169a:	60aa      	str	r2, [r5, #8]
 801169c:	60eb      	str	r3, [r5, #12]
 801169e:	7823      	ldrb	r3, [r4, #0]
 80116a0:	742b      	strb	r3, [r5, #16]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 80116a2:	687b      	ldr	r3, [r7, #4]
 80116a4:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 80116a8:	4a50      	ldr	r2, [pc, #320]	; (80117ec <problem_fetch+0x10188>)
 80116aa:	461c      	mov	r4, r3
 80116ac:	4613      	mov	r3, r2
 80116ae:	cb07      	ldmia	r3!, {r0, r1, r2}
 80116b0:	6020      	str	r0, [r4, #0]
 80116b2:	6061      	str	r1, [r4, #4]
 80116b4:	60a2      	str	r2, [r4, #8]
 80116b6:	881b      	ldrh	r3, [r3, #0]
 80116b8:	81a3      	strh	r3, [r4, #12]
			break;
 80116ba:	f00a bf03 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 471 :
			strcpy(p->name,"A BIT REACHY");
 80116be:	687b      	ldr	r3, [r7, #4]
 80116c0:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80116c4:	4a4a      	ldr	r2, [pc, #296]	; (80117f0 <problem_fetch+0x1018c>)
 80116c6:	461c      	mov	r4, r3
 80116c8:	4613      	mov	r3, r2
 80116ca:	cb07      	ldmia	r3!, {r0, r1, r2}
 80116cc:	6020      	str	r0, [r4, #0]
 80116ce:	6061      	str	r1, [r4, #4]
 80116d0:	60a2      	str	r2, [r4, #8]
 80116d2:	781b      	ldrb	r3, [r3, #0]
 80116d4:	7323      	strb	r3, [r4, #12]
			strcpy(p->grade,"6B+");
 80116d6:	687b      	ldr	r3, [r7, #4]
 80116d8:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80116dc:	4a40      	ldr	r2, [pc, #256]	; (80117e0 <problem_fetch+0x1017c>)
 80116de:	6810      	ldr	r0, [r2, #0]
 80116e0:	6018      	str	r0, [r3, #0]
			p->moveSize = 8;
 80116e2:	687b      	ldr	r3, [r7, #4]
 80116e4:	2208      	movs	r2, #8
 80116e6:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,G,G,H,G,I,G,I");
 80116e8:	687b      	ldr	r3, [r7, #4]
 80116ea:	33a4      	adds	r3, #164	; 0xa4
 80116ec:	4a41      	ldr	r2, [pc, #260]	; (80117f4 <problem_fetch+0x10190>)
 80116ee:	461c      	mov	r4, r3
 80116f0:	4615      	mov	r5, r2
 80116f2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80116f4:	6020      	str	r0, [r4, #0]
 80116f6:	6061      	str	r1, [r4, #4]
 80116f8:	60a2      	str	r2, [r4, #8]
 80116fa:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,6,9,10,14,14,15,18");
 80116fc:	687b      	ldr	r3, [r7, #4]
 80116fe:	3304      	adds	r3, #4
 8011700:	4a3d      	ldr	r2, [pc, #244]	; (80117f8 <problem_fetch+0x10194>)
 8011702:	461d      	mov	r5, r3
 8011704:	4614      	mov	r4, r2
 8011706:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8011708:	6028      	str	r0, [r5, #0]
 801170a:	6069      	str	r1, [r5, #4]
 801170c:	60aa      	str	r2, [r5, #8]
 801170e:	60eb      	str	r3, [r5, #12]
 8011710:	6820      	ldr	r0, [r4, #0]
 8011712:	6128      	str	r0, [r5, #16]
 8011714:	7923      	ldrb	r3, [r4, #4]
 8011716:	752b      	strb	r3, [r5, #20]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,e");
 8011718:	687b      	ldr	r3, [r7, #4]
 801171a:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 801171e:	4a2a      	ldr	r2, [pc, #168]	; (80117c8 <problem_fetch+0x10164>)
 8011720:	461c      	mov	r4, r3
 8011722:	4615      	mov	r5, r2
 8011724:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011726:	6020      	str	r0, [r4, #0]
 8011728:	6061      	str	r1, [r4, #4]
 801172a:	60a2      	str	r2, [r4, #8]
 801172c:	60e3      	str	r3, [r4, #12]
			break;
 801172e:	f00a bec9 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 472 :
			strcpy(p->name,"NIC_LAICALADDER");
 8011732:	687b      	ldr	r3, [r7, #4]
 8011734:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8011738:	4a30      	ldr	r2, [pc, #192]	; (80117fc <problem_fetch+0x10198>)
 801173a:	461c      	mov	r4, r3
 801173c:	4615      	mov	r5, r2
 801173e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011740:	6020      	str	r0, [r4, #0]
 8011742:	6061      	str	r1, [r4, #4]
 8011744:	60a2      	str	r2, [r4, #8]
 8011746:	60e3      	str	r3, [r4, #12]
			strcpy(p->grade,"7A");
 8011748:	687b      	ldr	r3, [r7, #4]
 801174a:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801174e:	4a2c      	ldr	r2, [pc, #176]	; (8011800 <problem_fetch+0x1019c>)
 8011750:	8811      	ldrh	r1, [r2, #0]
 8011752:	7892      	ldrb	r2, [r2, #2]
 8011754:	8019      	strh	r1, [r3, #0]
 8011756:	709a      	strb	r2, [r3, #2]
			p->moveSize = 5;
 8011758:	687b      	ldr	r3, [r7, #4]
 801175a:	2205      	movs	r2, #5
 801175c:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"E,I,G,J,I");
 801175e:	687b      	ldr	r3, [r7, #4]
 8011760:	33a4      	adds	r3, #164	; 0xa4
 8011762:	4928      	ldr	r1, [pc, #160]	; (8011804 <problem_fetch+0x101a0>)
 8011764:	461a      	mov	r2, r3
 8011766:	460b      	mov	r3, r1
 8011768:	cb03      	ldmia	r3!, {r0, r1}
 801176a:	6010      	str	r0, [r2, #0]
 801176c:	6051      	str	r1, [r2, #4]
 801176e:	881b      	ldrh	r3, [r3, #0]
 8011770:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"6,10,14,16,18");
 8011772:	687b      	ldr	r3, [r7, #4]
 8011774:	3304      	adds	r3, #4
 8011776:	4a24      	ldr	r2, [pc, #144]	; (8011808 <problem_fetch+0x101a4>)
 8011778:	461c      	mov	r4, r3
 801177a:	4613      	mov	r3, r2
 801177c:	cb07      	ldmia	r3!, {r0, r1, r2}
 801177e:	6020      	str	r0, [r4, #0]
 8011780:	6061      	str	r1, [r4, #4]
 8011782:	60a2      	str	r2, [r4, #8]
 8011784:	881b      	ldrh	r3, [r3, #0]
 8011786:	81a3      	strh	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,e");
 8011788:	687b      	ldr	r3, [r7, #4]
 801178a:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 801178e:	491f      	ldr	r1, [pc, #124]	; (801180c <problem_fetch+0x101a8>)
 8011790:	461a      	mov	r2, r3
 8011792:	460b      	mov	r3, r1
 8011794:	cb03      	ldmia	r3!, {r0, r1}
 8011796:	6010      	str	r0, [r2, #0]
 8011798:	6051      	str	r1, [r2, #4]
 801179a:	881b      	ldrh	r3, [r3, #0]
 801179c:	8113      	strh	r3, [r2, #8]
			break;
 801179e:	f00a be91 	b.w	801c4c4 <problem_fetch+0x1ae60>
 80117a2:	bf00      	nop
 80117a4:	0802951c 	.word	0x0802951c
 80117a8:	08023bf0 	.word	0x08023bf0
 80117ac:	08029528 	.word	0x08029528
 80117b0:	08029538 	.word	0x08029538
 80117b4:	08023d34 	.word	0x08023d34
 80117b8:	0802954c 	.word	0x0802954c
 80117bc:	08023cc4 	.word	0x08023cc4
 80117c0:	0802955c 	.word	0x0802955c
 80117c4:	0802956c 	.word	0x0802956c
 80117c8:	08023c48 	.word	0x08023c48
 80117cc:	08029580 	.word	0x08029580
 80117d0:	0802958c 	.word	0x0802958c
 80117d4:	080295a0 	.word	0x080295a0
 80117d8:	08024b08 	.word	0x08024b08
 80117dc:	080295b8 	.word	0x080295b8
 80117e0:	08023b24 	.word	0x08023b24
 80117e4:	080295c4 	.word	0x080295c4
 80117e8:	080295d4 	.word	0x080295d4
 80117ec:	08023cac 	.word	0x08023cac
 80117f0:	080295e8 	.word	0x080295e8
 80117f4:	080295f8 	.word	0x080295f8
 80117f8:	08029608 	.word	0x08029608
 80117fc:	08029620 	.word	0x08029620
 8011800:	08023ae4 	.word	0x08023ae4
 8011804:	08029630 	.word	0x08029630
 8011808:	0802963c 	.word	0x0802963c
 801180c:	08023ff0 	.word	0x08023ff0
		case 473 :
			strcpy(p->name,"GIUDA BALLERINI");
 8011810:	687b      	ldr	r3, [r7, #4]
 8011812:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8011816:	4aae      	ldr	r2, [pc, #696]	; (8011ad0 <problem_fetch+0x1046c>)
 8011818:	461c      	mov	r4, r3
 801181a:	4615      	mov	r5, r2
 801181c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801181e:	6020      	str	r0, [r4, #0]
 8011820:	6061      	str	r1, [r4, #4]
 8011822:	60a2      	str	r2, [r4, #8]
 8011824:	60e3      	str	r3, [r4, #12]
			strcpy(p->grade,"7B");
 8011826:	687b      	ldr	r3, [r7, #4]
 8011828:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801182c:	4aa9      	ldr	r2, [pc, #676]	; (8011ad4 <problem_fetch+0x10470>)
 801182e:	8811      	ldrh	r1, [r2, #0]
 8011830:	7892      	ldrb	r2, [r2, #2]
 8011832:	8019      	strh	r1, [r3, #0]
 8011834:	709a      	strb	r2, [r3, #2]
			p->moveSize = 7;
 8011836:	687b      	ldr	r3, [r7, #4]
 8011838:	2207      	movs	r2, #7
 801183a:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,D,F,F,I,G,D");
 801183c:	687b      	ldr	r3, [r7, #4]
 801183e:	33a4      	adds	r3, #164	; 0xa4
 8011840:	4aa5      	ldr	r2, [pc, #660]	; (8011ad8 <problem_fetch+0x10474>)
 8011842:	461c      	mov	r4, r3
 8011844:	4613      	mov	r3, r2
 8011846:	cb07      	ldmia	r3!, {r0, r1, r2}
 8011848:	6020      	str	r0, [r4, #0]
 801184a:	6061      	str	r1, [r4, #4]
 801184c:	60a2      	str	r2, [r4, #8]
 801184e:	881b      	ldrh	r3, [r3, #0]
 8011850:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,7,11,13,14,17,18");
 8011852:	687b      	ldr	r3, [r7, #4]
 8011854:	3304      	adds	r3, #4
 8011856:	4aa1      	ldr	r2, [pc, #644]	; (8011adc <problem_fetch+0x10478>)
 8011858:	461d      	mov	r5, r3
 801185a:	4614      	mov	r4, r2
 801185c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801185e:	6028      	str	r0, [r5, #0]
 8011860:	6069      	str	r1, [r5, #4]
 8011862:	60aa      	str	r2, [r5, #8]
 8011864:	60eb      	str	r3, [r5, #12]
 8011866:	8823      	ldrh	r3, [r4, #0]
 8011868:	78a2      	ldrb	r2, [r4, #2]
 801186a:	822b      	strh	r3, [r5, #16]
 801186c:	4613      	mov	r3, r2
 801186e:	74ab      	strb	r3, [r5, #18]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 8011870:	687b      	ldr	r3, [r7, #4]
 8011872:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8011876:	4a9a      	ldr	r2, [pc, #616]	; (8011ae0 <problem_fetch+0x1047c>)
 8011878:	461c      	mov	r4, r3
 801187a:	4613      	mov	r3, r2
 801187c:	cb07      	ldmia	r3!, {r0, r1, r2}
 801187e:	6020      	str	r0, [r4, #0]
 8011880:	6061      	str	r1, [r4, #4]
 8011882:	60a2      	str	r2, [r4, #8]
 8011884:	881b      	ldrh	r3, [r3, #0]
 8011886:	81a3      	strh	r3, [r4, #12]
			break;
 8011888:	f00a be1c 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 474 :
			strcpy(p->name,"PINCHINGPANDA");
 801188c:	687b      	ldr	r3, [r7, #4]
 801188e:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8011892:	4a94      	ldr	r2, [pc, #592]	; (8011ae4 <problem_fetch+0x10480>)
 8011894:	461c      	mov	r4, r3
 8011896:	4613      	mov	r3, r2
 8011898:	cb07      	ldmia	r3!, {r0, r1, r2}
 801189a:	6020      	str	r0, [r4, #0]
 801189c:	6061      	str	r1, [r4, #4]
 801189e:	60a2      	str	r2, [r4, #8]
 80118a0:	881b      	ldrh	r3, [r3, #0]
 80118a2:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade,"6B+");
 80118a4:	687b      	ldr	r3, [r7, #4]
 80118a6:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80118aa:	4a8f      	ldr	r2, [pc, #572]	; (8011ae8 <problem_fetch+0x10484>)
 80118ac:	6810      	ldr	r0, [r2, #0]
 80118ae:	6018      	str	r0, [r3, #0]
			p->moveSize = 9;
 80118b0:	687b      	ldr	r3, [r7, #4]
 80118b2:	2209      	movs	r2, #9
 80118b4:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,H,H,C,F,C,D,G,A");
 80118b6:	687b      	ldr	r3, [r7, #4]
 80118b8:	33a4      	adds	r3, #164	; 0xa4
 80118ba:	4a8c      	ldr	r2, [pc, #560]	; (8011aec <problem_fetch+0x10488>)
 80118bc:	461d      	mov	r5, r3
 80118be:	4614      	mov	r4, r2
 80118c0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80118c2:	6028      	str	r0, [r5, #0]
 80118c4:	6069      	str	r1, [r5, #4]
 80118c6:	60aa      	str	r2, [r5, #8]
 80118c8:	60eb      	str	r3, [r5, #12]
 80118ca:	8823      	ldrh	r3, [r4, #0]
 80118cc:	822b      	strh	r3, [r5, #16]
			strcpy(p->moveNumbers,"5,5,8,8,11,13,15,9,18");
 80118ce:	687b      	ldr	r3, [r7, #4]
 80118d0:	3304      	adds	r3, #4
 80118d2:	4a87      	ldr	r2, [pc, #540]	; (8011af0 <problem_fetch+0x1048c>)
 80118d4:	461d      	mov	r5, r3
 80118d6:	4614      	mov	r4, r2
 80118d8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80118da:	6028      	str	r0, [r5, #0]
 80118dc:	6069      	str	r1, [r5, #4]
 80118de:	60aa      	str	r2, [r5, #8]
 80118e0:	60eb      	str	r3, [r5, #12]
 80118e2:	6820      	ldr	r0, [r4, #0]
 80118e4:	6128      	str	r0, [r5, #16]
 80118e6:	88a3      	ldrh	r3, [r4, #4]
 80118e8:	82ab      	strh	r3, [r5, #20]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,d,e");
 80118ea:	687b      	ldr	r3, [r7, #4]
 80118ec:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 80118f0:	4a80      	ldr	r2, [pc, #512]	; (8011af4 <problem_fetch+0x10490>)
 80118f2:	461d      	mov	r5, r3
 80118f4:	4614      	mov	r4, r2
 80118f6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80118f8:	6028      	str	r0, [r5, #0]
 80118fa:	6069      	str	r1, [r5, #4]
 80118fc:	60aa      	str	r2, [r5, #8]
 80118fe:	60eb      	str	r3, [r5, #12]
 8011900:	8823      	ldrh	r3, [r4, #0]
 8011902:	822b      	strh	r3, [r5, #16]
			break;
 8011904:	f00a bdde 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 475 :
			strcpy(p->name,"GOT PINCH?");
 8011908:	687b      	ldr	r3, [r7, #4]
 801190a:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801190e:	497a      	ldr	r1, [pc, #488]	; (8011af8 <problem_fetch+0x10494>)
 8011910:	461a      	mov	r2, r3
 8011912:	460b      	mov	r3, r1
 8011914:	cb03      	ldmia	r3!, {r0, r1}
 8011916:	6010      	str	r0, [r2, #0]
 8011918:	6051      	str	r1, [r2, #4]
 801191a:	8819      	ldrh	r1, [r3, #0]
 801191c:	789b      	ldrb	r3, [r3, #2]
 801191e:	8111      	strh	r1, [r2, #8]
 8011920:	7293      	strb	r3, [r2, #10]
			strcpy(p->grade,"6B+");
 8011922:	687b      	ldr	r3, [r7, #4]
 8011924:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8011928:	4a6f      	ldr	r2, [pc, #444]	; (8011ae8 <problem_fetch+0x10484>)
 801192a:	6810      	ldr	r0, [r2, #0]
 801192c:	6018      	str	r0, [r3, #0]
			p->moveSize = 8;
 801192e:	687b      	ldr	r3, [r7, #4]
 8011930:	2208      	movs	r2, #8
 8011932:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,H,H,C,F,C,D,A");
 8011934:	687b      	ldr	r3, [r7, #4]
 8011936:	33a4      	adds	r3, #164	; 0xa4
 8011938:	4a70      	ldr	r2, [pc, #448]	; (8011afc <problem_fetch+0x10498>)
 801193a:	461c      	mov	r4, r3
 801193c:	4615      	mov	r5, r2
 801193e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011940:	6020      	str	r0, [r4, #0]
 8011942:	6061      	str	r1, [r4, #4]
 8011944:	60a2      	str	r2, [r4, #8]
 8011946:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,5,8,8,11,13,15,18");
 8011948:	687b      	ldr	r3, [r7, #4]
 801194a:	3304      	adds	r3, #4
 801194c:	4a6c      	ldr	r2, [pc, #432]	; (8011b00 <problem_fetch+0x1049c>)
 801194e:	461d      	mov	r5, r3
 8011950:	4614      	mov	r4, r2
 8011952:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8011954:	6028      	str	r0, [r5, #0]
 8011956:	6069      	str	r1, [r5, #4]
 8011958:	60aa      	str	r2, [r5, #8]
 801195a:	60eb      	str	r3, [r5, #12]
 801195c:	6820      	ldr	r0, [r4, #0]
 801195e:	6128      	str	r0, [r5, #16]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,e");
 8011960:	687b      	ldr	r3, [r7, #4]
 8011962:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8011966:	4a67      	ldr	r2, [pc, #412]	; (8011b04 <problem_fetch+0x104a0>)
 8011968:	461c      	mov	r4, r3
 801196a:	4615      	mov	r5, r2
 801196c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801196e:	6020      	str	r0, [r4, #0]
 8011970:	6061      	str	r1, [r4, #4]
 8011972:	60a2      	str	r2, [r4, #8]
 8011974:	60e3      	str	r3, [r4, #12]
			break;
 8011976:	f00a bda5 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 476 :
			strcpy(p->name,"HUMPA");
 801197a:	687b      	ldr	r3, [r7, #4]
 801197c:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8011980:	4a61      	ldr	r2, [pc, #388]	; (8011b08 <problem_fetch+0x104a4>)
 8011982:	6810      	ldr	r0, [r2, #0]
 8011984:	6018      	str	r0, [r3, #0]
 8011986:	8892      	ldrh	r2, [r2, #4]
 8011988:	809a      	strh	r2, [r3, #4]
			strcpy(p->grade,"6B+");
 801198a:	687b      	ldr	r3, [r7, #4]
 801198c:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8011990:	4a55      	ldr	r2, [pc, #340]	; (8011ae8 <problem_fetch+0x10484>)
 8011992:	6810      	ldr	r0, [r2, #0]
 8011994:	6018      	str	r0, [r3, #0]
			p->moveSize = 9;
 8011996:	687b      	ldr	r3, [r7, #4]
 8011998:	2209      	movs	r2, #9
 801199a:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,J,H,F,I,G,E,H,I");
 801199c:	687b      	ldr	r3, [r7, #4]
 801199e:	33a4      	adds	r3, #164	; 0xa4
 80119a0:	4a5a      	ldr	r2, [pc, #360]	; (8011b0c <problem_fetch+0x104a8>)
 80119a2:	461d      	mov	r5, r3
 80119a4:	4614      	mov	r4, r2
 80119a6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80119a8:	6028      	str	r0, [r5, #0]
 80119aa:	6069      	str	r1, [r5, #4]
 80119ac:	60aa      	str	r2, [r5, #8]
 80119ae:	60eb      	str	r3, [r5, #12]
 80119b0:	8823      	ldrh	r3, [r4, #0]
 80119b2:	822b      	strh	r3, [r5, #16]
			strcpy(p->moveNumbers,"4,5,8,11,14,15,8,10,18");
 80119b4:	687b      	ldr	r3, [r7, #4]
 80119b6:	3304      	adds	r3, #4
 80119b8:	4a55      	ldr	r2, [pc, #340]	; (8011b10 <problem_fetch+0x104ac>)
 80119ba:	461c      	mov	r4, r3
 80119bc:	4615      	mov	r5, r2
 80119be:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80119c0:	6020      	str	r0, [r4, #0]
 80119c2:	6061      	str	r1, [r4, #4]
 80119c4:	60a2      	str	r2, [r4, #8]
 80119c6:	60e3      	str	r3, [r4, #12]
 80119c8:	6828      	ldr	r0, [r5, #0]
 80119ca:	6120      	str	r0, [r4, #16]
 80119cc:	88ab      	ldrh	r3, [r5, #4]
 80119ce:	79aa      	ldrb	r2, [r5, #6]
 80119d0:	82a3      	strh	r3, [r4, #20]
 80119d2:	4613      	mov	r3, r2
 80119d4:	75a3      	strb	r3, [r4, #22]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,d,e");
 80119d6:	687b      	ldr	r3, [r7, #4]
 80119d8:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 80119dc:	4a45      	ldr	r2, [pc, #276]	; (8011af4 <problem_fetch+0x10490>)
 80119de:	461d      	mov	r5, r3
 80119e0:	4614      	mov	r4, r2
 80119e2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80119e4:	6028      	str	r0, [r5, #0]
 80119e6:	6069      	str	r1, [r5, #4]
 80119e8:	60aa      	str	r2, [r5, #8]
 80119ea:	60eb      	str	r3, [r5, #12]
 80119ec:	8823      	ldrh	r3, [r4, #0]
 80119ee:	822b      	strh	r3, [r5, #16]
			break;
 80119f0:	f00a bd68 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 477 :
			strcpy(p->name,"OH MY FAT FINGERS...");
 80119f4:	687b      	ldr	r3, [r7, #4]
 80119f6:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80119fa:	4a46      	ldr	r2, [pc, #280]	; (8011b14 <problem_fetch+0x104b0>)
 80119fc:	461d      	mov	r5, r3
 80119fe:	4614      	mov	r4, r2
 8011a00:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8011a02:	6028      	str	r0, [r5, #0]
 8011a04:	6069      	str	r1, [r5, #4]
 8011a06:	60aa      	str	r2, [r5, #8]
 8011a08:	60eb      	str	r3, [r5, #12]
 8011a0a:	6820      	ldr	r0, [r4, #0]
 8011a0c:	6128      	str	r0, [r5, #16]
 8011a0e:	7923      	ldrb	r3, [r4, #4]
 8011a10:	752b      	strb	r3, [r5, #20]
			strcpy(p->grade,"6C");
 8011a12:	687b      	ldr	r3, [r7, #4]
 8011a14:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8011a18:	4a3f      	ldr	r2, [pc, #252]	; (8011b18 <problem_fetch+0x104b4>)
 8011a1a:	8811      	ldrh	r1, [r2, #0]
 8011a1c:	7892      	ldrb	r2, [r2, #2]
 8011a1e:	8019      	strh	r1, [r3, #0]
 8011a20:	709a      	strb	r2, [r3, #2]
			p->moveSize = 6;
 8011a22:	687b      	ldr	r3, [r7, #4]
 8011a24:	2206      	movs	r2, #6
 8011a26:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,G,F,K,E,I");
 8011a28:	687b      	ldr	r3, [r7, #4]
 8011a2a:	33a4      	adds	r3, #164	; 0xa4
 8011a2c:	4a3b      	ldr	r2, [pc, #236]	; (8011b1c <problem_fetch+0x104b8>)
 8011a2e:	461c      	mov	r4, r3
 8011a30:	4613      	mov	r3, r2
 8011a32:	cb07      	ldmia	r3!, {r0, r1, r2}
 8011a34:	6020      	str	r0, [r4, #0]
 8011a36:	6061      	str	r1, [r4, #4]
 8011a38:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,10,13,14,8,18");
 8011a3a:	687b      	ldr	r3, [r7, #4]
 8011a3c:	3304      	adds	r3, #4
 8011a3e:	4a38      	ldr	r2, [pc, #224]	; (8011b20 <problem_fetch+0x104bc>)
 8011a40:	461c      	mov	r4, r3
 8011a42:	4615      	mov	r5, r2
 8011a44:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011a46:	6020      	str	r0, [r4, #0]
 8011a48:	6061      	str	r1, [r4, #4]
 8011a4a:	60a2      	str	r2, [r4, #8]
 8011a4c:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 8011a4e:	687b      	ldr	r3, [r7, #4]
 8011a50:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8011a54:	4a33      	ldr	r2, [pc, #204]	; (8011b24 <problem_fetch+0x104c0>)
 8011a56:	461c      	mov	r4, r3
 8011a58:	4613      	mov	r3, r2
 8011a5a:	cb07      	ldmia	r3!, {r0, r1, r2}
 8011a5c:	6020      	str	r0, [r4, #0]
 8011a5e:	6061      	str	r1, [r4, #4]
 8011a60:	60a2      	str	r2, [r4, #8]
			break;
 8011a62:	f00a bd2f 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 478 :
			strcpy(p->name,"SOFT SERVE");
 8011a66:	687b      	ldr	r3, [r7, #4]
 8011a68:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8011a6c:	492e      	ldr	r1, [pc, #184]	; (8011b28 <problem_fetch+0x104c4>)
 8011a6e:	461a      	mov	r2, r3
 8011a70:	460b      	mov	r3, r1
 8011a72:	cb03      	ldmia	r3!, {r0, r1}
 8011a74:	6010      	str	r0, [r2, #0]
 8011a76:	6051      	str	r1, [r2, #4]
 8011a78:	8819      	ldrh	r1, [r3, #0]
 8011a7a:	789b      	ldrb	r3, [r3, #2]
 8011a7c:	8111      	strh	r1, [r2, #8]
 8011a7e:	7293      	strb	r3, [r2, #10]
			strcpy(p->grade,"7A+");
 8011a80:	687b      	ldr	r3, [r7, #4]
 8011a82:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8011a86:	4a29      	ldr	r2, [pc, #164]	; (8011b2c <problem_fetch+0x104c8>)
 8011a88:	6810      	ldr	r0, [r2, #0]
 8011a8a:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 8011a8c:	687b      	ldr	r3, [r7, #4]
 8011a8e:	2206      	movs	r2, #6
 8011a90:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,H,D,D,E,I");
 8011a92:	687b      	ldr	r3, [r7, #4]
 8011a94:	33a4      	adds	r3, #164	; 0xa4
 8011a96:	4a26      	ldr	r2, [pc, #152]	; (8011b30 <problem_fetch+0x104cc>)
 8011a98:	461c      	mov	r4, r3
 8011a9a:	4613      	mov	r3, r2
 8011a9c:	cb07      	ldmia	r3!, {r0, r1, r2}
 8011a9e:	6020      	str	r0, [r4, #0]
 8011aa0:	6061      	str	r1, [r4, #4]
 8011aa2:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"6,8,11,15,16,18");
 8011aa4:	687b      	ldr	r3, [r7, #4]
 8011aa6:	3304      	adds	r3, #4
 8011aa8:	4a22      	ldr	r2, [pc, #136]	; (8011b34 <problem_fetch+0x104d0>)
 8011aaa:	461c      	mov	r4, r3
 8011aac:	4615      	mov	r5, r2
 8011aae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011ab0:	6020      	str	r0, [r4, #0]
 8011ab2:	6061      	str	r1, [r4, #4]
 8011ab4:	60a2      	str	r2, [r4, #8]
 8011ab6:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 8011ab8:	687b      	ldr	r3, [r7, #4]
 8011aba:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8011abe:	4a19      	ldr	r2, [pc, #100]	; (8011b24 <problem_fetch+0x104c0>)
 8011ac0:	461c      	mov	r4, r3
 8011ac2:	4613      	mov	r3, r2
 8011ac4:	cb07      	ldmia	r3!, {r0, r1, r2}
 8011ac6:	6020      	str	r0, [r4, #0]
 8011ac8:	6061      	str	r1, [r4, #4]
 8011aca:	60a2      	str	r2, [r4, #8]
			break;
 8011acc:	f00a bcfa 	b.w	801c4c4 <problem_fetch+0x1ae60>
 8011ad0:	0802964c 	.word	0x0802964c
 8011ad4:	0802421c 	.word	0x0802421c
 8011ad8:	0802965c 	.word	0x0802965c
 8011adc:	0802966c 	.word	0x0802966c
 8011ae0:	08023cac 	.word	0x08023cac
 8011ae4:	08029680 	.word	0x08029680
 8011ae8:	08023b24 	.word	0x08023b24
 8011aec:	08029690 	.word	0x08029690
 8011af0:	080296a4 	.word	0x080296a4
 8011af4:	08024b08 	.word	0x08024b08
 8011af8:	080296bc 	.word	0x080296bc
 8011afc:	080296c8 	.word	0x080296c8
 8011b00:	080296d8 	.word	0x080296d8
 8011b04:	08023c48 	.word	0x08023c48
 8011b08:	080296ec 	.word	0x080296ec
 8011b0c:	080296f4 	.word	0x080296f4
 8011b10:	08029708 	.word	0x08029708
 8011b14:	08029720 	.word	0x08029720
 8011b18:	08023bf0 	.word	0x08023bf0
 8011b1c:	08029738 	.word	0x08029738
 8011b20:	08029744 	.word	0x08029744
 8011b24:	08023ec0 	.word	0x08023ec0
 8011b28:	08029754 	.word	0x08029754
 8011b2c:	08023cc4 	.word	0x08023cc4
 8011b30:	08029760 	.word	0x08029760
 8011b34:	0802976c 	.word	0x0802976c
		case 479 :
			strcpy(p->name,"SCRUMPY MCBUTTERBALLS");
 8011b38:	687b      	ldr	r3, [r7, #4]
 8011b3a:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8011b3e:	4aac      	ldr	r2, [pc, #688]	; (8011df0 <problem_fetch+0x1078c>)
 8011b40:	461d      	mov	r5, r3
 8011b42:	4614      	mov	r4, r2
 8011b44:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8011b46:	6028      	str	r0, [r5, #0]
 8011b48:	6069      	str	r1, [r5, #4]
 8011b4a:	60aa      	str	r2, [r5, #8]
 8011b4c:	60eb      	str	r3, [r5, #12]
 8011b4e:	6820      	ldr	r0, [r4, #0]
 8011b50:	6128      	str	r0, [r5, #16]
 8011b52:	88a3      	ldrh	r3, [r4, #4]
 8011b54:	82ab      	strh	r3, [r5, #20]
			strcpy(p->grade,"7A+");
 8011b56:	687b      	ldr	r3, [r7, #4]
 8011b58:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8011b5c:	4aa5      	ldr	r2, [pc, #660]	; (8011df4 <problem_fetch+0x10790>)
 8011b5e:	6810      	ldr	r0, [r2, #0]
 8011b60:	6018      	str	r0, [r3, #0]
			p->moveSize = 5;
 8011b62:	687b      	ldr	r3, [r7, #4]
 8011b64:	2205      	movs	r2, #5
 8011b66:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"C,C,H,G,D");
 8011b68:	687b      	ldr	r3, [r7, #4]
 8011b6a:	33a4      	adds	r3, #164	; 0xa4
 8011b6c:	49a2      	ldr	r1, [pc, #648]	; (8011df8 <problem_fetch+0x10794>)
 8011b6e:	461a      	mov	r2, r3
 8011b70:	460b      	mov	r3, r1
 8011b72:	cb03      	ldmia	r3!, {r0, r1}
 8011b74:	6010      	str	r0, [r2, #0]
 8011b76:	6051      	str	r1, [r2, #4]
 8011b78:	881b      	ldrh	r3, [r3, #0]
 8011b7a:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"5,8,10,14,18");
 8011b7c:	687b      	ldr	r3, [r7, #4]
 8011b7e:	3304      	adds	r3, #4
 8011b80:	4a9e      	ldr	r2, [pc, #632]	; (8011dfc <problem_fetch+0x10798>)
 8011b82:	461c      	mov	r4, r3
 8011b84:	4613      	mov	r3, r2
 8011b86:	cb07      	ldmia	r3!, {r0, r1, r2}
 8011b88:	6020      	str	r0, [r4, #0]
 8011b8a:	6061      	str	r1, [r4, #4]
 8011b8c:	60a2      	str	r2, [r4, #8]
 8011b8e:	781b      	ldrb	r3, [r3, #0]
 8011b90:	7323      	strb	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,e");
 8011b92:	687b      	ldr	r3, [r7, #4]
 8011b94:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8011b98:	4999      	ldr	r1, [pc, #612]	; (8011e00 <problem_fetch+0x1079c>)
 8011b9a:	461a      	mov	r2, r3
 8011b9c:	460b      	mov	r3, r1
 8011b9e:	cb03      	ldmia	r3!, {r0, r1}
 8011ba0:	6010      	str	r0, [r2, #0]
 8011ba2:	6051      	str	r1, [r2, #4]
 8011ba4:	881b      	ldrh	r3, [r3, #0]
 8011ba6:	8113      	strh	r3, [r2, #8]
			break;
 8011ba8:	f00a bc8c 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 480 :
			strcpy(p->name,"JAB 2017");
 8011bac:	687b      	ldr	r3, [r7, #4]
 8011bae:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8011bb2:	4994      	ldr	r1, [pc, #592]	; (8011e04 <problem_fetch+0x107a0>)
 8011bb4:	461a      	mov	r2, r3
 8011bb6:	460b      	mov	r3, r1
 8011bb8:	cb03      	ldmia	r3!, {r0, r1}
 8011bba:	6010      	str	r0, [r2, #0]
 8011bbc:	6051      	str	r1, [r2, #4]
 8011bbe:	781b      	ldrb	r3, [r3, #0]
 8011bc0:	7213      	strb	r3, [r2, #8]
			strcpy(p->grade,"7B");
 8011bc2:	687b      	ldr	r3, [r7, #4]
 8011bc4:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8011bc8:	4a8f      	ldr	r2, [pc, #572]	; (8011e08 <problem_fetch+0x107a4>)
 8011bca:	8811      	ldrh	r1, [r2, #0]
 8011bcc:	7892      	ldrb	r2, [r2, #2]
 8011bce:	8019      	strh	r1, [r3, #0]
 8011bd0:	709a      	strb	r2, [r3, #2]
			p->moveSize = 5;
 8011bd2:	687b      	ldr	r3, [r7, #4]
 8011bd4:	2205      	movs	r2, #5
 8011bd6:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,E,G,G,I");
 8011bd8:	687b      	ldr	r3, [r7, #4]
 8011bda:	33a4      	adds	r3, #164	; 0xa4
 8011bdc:	498b      	ldr	r1, [pc, #556]	; (8011e0c <problem_fetch+0x107a8>)
 8011bde:	461a      	mov	r2, r3
 8011be0:	460b      	mov	r3, r1
 8011be2:	cb03      	ldmia	r3!, {r0, r1}
 8011be4:	6010      	str	r0, [r2, #0]
 8011be6:	6051      	str	r1, [r2, #4]
 8011be8:	881b      	ldrh	r3, [r3, #0]
 8011bea:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"4,8,10,15,18");
 8011bec:	687b      	ldr	r3, [r7, #4]
 8011bee:	3304      	adds	r3, #4
 8011bf0:	4a87      	ldr	r2, [pc, #540]	; (8011e10 <problem_fetch+0x107ac>)
 8011bf2:	461c      	mov	r4, r3
 8011bf4:	4613      	mov	r3, r2
 8011bf6:	cb07      	ldmia	r3!, {r0, r1, r2}
 8011bf8:	6020      	str	r0, [r4, #0]
 8011bfa:	6061      	str	r1, [r4, #4]
 8011bfc:	60a2      	str	r2, [r4, #8]
 8011bfe:	781b      	ldrb	r3, [r3, #0]
 8011c00:	7323      	strb	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,e");
 8011c02:	687b      	ldr	r3, [r7, #4]
 8011c04:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8011c08:	497d      	ldr	r1, [pc, #500]	; (8011e00 <problem_fetch+0x1079c>)
 8011c0a:	461a      	mov	r2, r3
 8011c0c:	460b      	mov	r3, r1
 8011c0e:	cb03      	ldmia	r3!, {r0, r1}
 8011c10:	6010      	str	r0, [r2, #0]
 8011c12:	6051      	str	r1, [r2, #4]
 8011c14:	881b      	ldrh	r3, [r3, #0]
 8011c16:	8113      	strh	r3, [r2, #8]
			break;
 8011c18:	f00a bc54 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 481 :
			strcpy(p->name,"BADMOTORFINGER");
 8011c1c:	687b      	ldr	r3, [r7, #4]
 8011c1e:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8011c22:	4a7c      	ldr	r2, [pc, #496]	; (8011e14 <problem_fetch+0x107b0>)
 8011c24:	461c      	mov	r4, r3
 8011c26:	4613      	mov	r3, r2
 8011c28:	cb07      	ldmia	r3!, {r0, r1, r2}
 8011c2a:	6020      	str	r0, [r4, #0]
 8011c2c:	6061      	str	r1, [r4, #4]
 8011c2e:	60a2      	str	r2, [r4, #8]
 8011c30:	881a      	ldrh	r2, [r3, #0]
 8011c32:	789b      	ldrb	r3, [r3, #2]
 8011c34:	81a2      	strh	r2, [r4, #12]
 8011c36:	73a3      	strb	r3, [r4, #14]
			strcpy(p->grade,"7A");
 8011c38:	687b      	ldr	r3, [r7, #4]
 8011c3a:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8011c3e:	4a76      	ldr	r2, [pc, #472]	; (8011e18 <problem_fetch+0x107b4>)
 8011c40:	8811      	ldrh	r1, [r2, #0]
 8011c42:	7892      	ldrb	r2, [r2, #2]
 8011c44:	8019      	strh	r1, [r3, #0]
 8011c46:	709a      	strb	r2, [r3, #2]
			p->moveSize = 7;
 8011c48:	687b      	ldr	r3, [r7, #4]
 8011c4a:	2207      	movs	r2, #7
 8011c4c:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"E,C,F,F,J,E,D");
 8011c4e:	687b      	ldr	r3, [r7, #4]
 8011c50:	33a4      	adds	r3, #164	; 0xa4
 8011c52:	4a72      	ldr	r2, [pc, #456]	; (8011e1c <problem_fetch+0x107b8>)
 8011c54:	461c      	mov	r4, r3
 8011c56:	4613      	mov	r3, r2
 8011c58:	cb07      	ldmia	r3!, {r0, r1, r2}
 8011c5a:	6020      	str	r0, [r4, #0]
 8011c5c:	6061      	str	r1, [r4, #4]
 8011c5e:	60a2      	str	r2, [r4, #8]
 8011c60:	881b      	ldrh	r3, [r3, #0]
 8011c62:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"6,8,11,13,13,16,18");
 8011c64:	687b      	ldr	r3, [r7, #4]
 8011c66:	3304      	adds	r3, #4
 8011c68:	4a6d      	ldr	r2, [pc, #436]	; (8011e20 <problem_fetch+0x107bc>)
 8011c6a:	461d      	mov	r5, r3
 8011c6c:	4614      	mov	r4, r2
 8011c6e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8011c70:	6028      	str	r0, [r5, #0]
 8011c72:	6069      	str	r1, [r5, #4]
 8011c74:	60aa      	str	r2, [r5, #8]
 8011c76:	60eb      	str	r3, [r5, #12]
 8011c78:	8823      	ldrh	r3, [r4, #0]
 8011c7a:	78a2      	ldrb	r2, [r4, #2]
 8011c7c:	822b      	strh	r3, [r5, #16]
 8011c7e:	4613      	mov	r3, r2
 8011c80:	74ab      	strb	r3, [r5, #18]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 8011c82:	687b      	ldr	r3, [r7, #4]
 8011c84:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8011c88:	4a66      	ldr	r2, [pc, #408]	; (8011e24 <problem_fetch+0x107c0>)
 8011c8a:	461c      	mov	r4, r3
 8011c8c:	4613      	mov	r3, r2
 8011c8e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8011c90:	6020      	str	r0, [r4, #0]
 8011c92:	6061      	str	r1, [r4, #4]
 8011c94:	60a2      	str	r2, [r4, #8]
 8011c96:	881b      	ldrh	r3, [r3, #0]
 8011c98:	81a3      	strh	r3, [r4, #12]
			break;
 8011c9a:	f00a bc13 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 482 :
			strcpy(p->name,"ACG79");
 8011c9e:	687b      	ldr	r3, [r7, #4]
 8011ca0:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8011ca4:	4a60      	ldr	r2, [pc, #384]	; (8011e28 <problem_fetch+0x107c4>)
 8011ca6:	6810      	ldr	r0, [r2, #0]
 8011ca8:	6018      	str	r0, [r3, #0]
 8011caa:	8892      	ldrh	r2, [r2, #4]
 8011cac:	809a      	strh	r2, [r3, #4]
			strcpy(p->grade,"7A");
 8011cae:	687b      	ldr	r3, [r7, #4]
 8011cb0:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8011cb4:	4a58      	ldr	r2, [pc, #352]	; (8011e18 <problem_fetch+0x107b4>)
 8011cb6:	8811      	ldrh	r1, [r2, #0]
 8011cb8:	7892      	ldrb	r2, [r2, #2]
 8011cba:	8019      	strh	r1, [r3, #0]
 8011cbc:	709a      	strb	r2, [r3, #2]
			p->moveSize = 7;
 8011cbe:	687b      	ldr	r3, [r7, #4]
 8011cc0:	2207      	movs	r2, #7
 8011cc2:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,G,E,I,F,H,D");
 8011cc4:	687b      	ldr	r3, [r7, #4]
 8011cc6:	33a4      	adds	r3, #164	; 0xa4
 8011cc8:	4a58      	ldr	r2, [pc, #352]	; (8011e2c <problem_fetch+0x107c8>)
 8011cca:	461c      	mov	r4, r3
 8011ccc:	4613      	mov	r3, r2
 8011cce:	cb07      	ldmia	r3!, {r0, r1, r2}
 8011cd0:	6020      	str	r0, [r4, #0]
 8011cd2:	6061      	str	r1, [r4, #4]
 8011cd4:	60a2      	str	r2, [r4, #8]
 8011cd6:	881b      	ldrh	r3, [r3, #0]
 8011cd8:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,4,8,9,13,16,18");
 8011cda:	687b      	ldr	r3, [r7, #4]
 8011cdc:	3304      	adds	r3, #4
 8011cde:	4a54      	ldr	r2, [pc, #336]	; (8011e30 <problem_fetch+0x107cc>)
 8011ce0:	461d      	mov	r5, r3
 8011ce2:	4614      	mov	r4, r2
 8011ce4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8011ce6:	6028      	str	r0, [r5, #0]
 8011ce8:	6069      	str	r1, [r5, #4]
 8011cea:	60aa      	str	r2, [r5, #8]
 8011cec:	60eb      	str	r3, [r5, #12]
 8011cee:	7823      	ldrb	r3, [r4, #0]
 8011cf0:	742b      	strb	r3, [r5, #16]
			strcpy(p->startFinish,"s,s,d,d,d,d,e");
 8011cf2:	687b      	ldr	r3, [r7, #4]
 8011cf4:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8011cf8:	4a4e      	ldr	r2, [pc, #312]	; (8011e34 <problem_fetch+0x107d0>)
 8011cfa:	461c      	mov	r4, r3
 8011cfc:	4613      	mov	r3, r2
 8011cfe:	cb07      	ldmia	r3!, {r0, r1, r2}
 8011d00:	6020      	str	r0, [r4, #0]
 8011d02:	6061      	str	r1, [r4, #4]
 8011d04:	60a2      	str	r2, [r4, #8]
 8011d06:	881b      	ldrh	r3, [r3, #0]
 8011d08:	81a3      	strh	r3, [r4, #12]
			break;
 8011d0a:	f00a bbdb 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 483 :
			strcpy(p->name,"COMEBACK 4.0");
 8011d0e:	687b      	ldr	r3, [r7, #4]
 8011d10:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8011d14:	4a48      	ldr	r2, [pc, #288]	; (8011e38 <problem_fetch+0x107d4>)
 8011d16:	461c      	mov	r4, r3
 8011d18:	4613      	mov	r3, r2
 8011d1a:	cb07      	ldmia	r3!, {r0, r1, r2}
 8011d1c:	6020      	str	r0, [r4, #0]
 8011d1e:	6061      	str	r1, [r4, #4]
 8011d20:	60a2      	str	r2, [r4, #8]
 8011d22:	781b      	ldrb	r3, [r3, #0]
 8011d24:	7323      	strb	r3, [r4, #12]
			strcpy(p->grade,"6C+");
 8011d26:	687b      	ldr	r3, [r7, #4]
 8011d28:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8011d2c:	4a43      	ldr	r2, [pc, #268]	; (8011e3c <problem_fetch+0x107d8>)
 8011d2e:	6810      	ldr	r0, [r2, #0]
 8011d30:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 8011d32:	687b      	ldr	r3, [r7, #4]
 8011d34:	2206      	movs	r2, #6
 8011d36:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,D,E,B,D,D");
 8011d38:	687b      	ldr	r3, [r7, #4]
 8011d3a:	33a4      	adds	r3, #164	; 0xa4
 8011d3c:	4a40      	ldr	r2, [pc, #256]	; (8011e40 <problem_fetch+0x107dc>)
 8011d3e:	461c      	mov	r4, r3
 8011d40:	4613      	mov	r3, r2
 8011d42:	cb07      	ldmia	r3!, {r0, r1, r2}
 8011d44:	6020      	str	r0, [r4, #0]
 8011d46:	6061      	str	r1, [r4, #4]
 8011d48:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,7,9,12,15,18");
 8011d4a:	687b      	ldr	r3, [r7, #4]
 8011d4c:	3304      	adds	r3, #4
 8011d4e:	4a3d      	ldr	r2, [pc, #244]	; (8011e44 <problem_fetch+0x107e0>)
 8011d50:	461c      	mov	r4, r3
 8011d52:	4613      	mov	r3, r2
 8011d54:	cb07      	ldmia	r3!, {r0, r1, r2}
 8011d56:	6020      	str	r0, [r4, #0]
 8011d58:	6061      	str	r1, [r4, #4]
 8011d5a:	60a2      	str	r2, [r4, #8]
 8011d5c:	881a      	ldrh	r2, [r3, #0]
 8011d5e:	789b      	ldrb	r3, [r3, #2]
 8011d60:	81a2      	strh	r2, [r4, #12]
 8011d62:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 8011d64:	687b      	ldr	r3, [r7, #4]
 8011d66:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8011d6a:	4a37      	ldr	r2, [pc, #220]	; (8011e48 <problem_fetch+0x107e4>)
 8011d6c:	461c      	mov	r4, r3
 8011d6e:	4613      	mov	r3, r2
 8011d70:	cb07      	ldmia	r3!, {r0, r1, r2}
 8011d72:	6020      	str	r0, [r4, #0]
 8011d74:	6061      	str	r1, [r4, #4]
 8011d76:	60a2      	str	r2, [r4, #8]
			break;
 8011d78:	f00a bba4 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 484 :
			strcpy(p->name,"COMEBACK 3.5");
 8011d7c:	687b      	ldr	r3, [r7, #4]
 8011d7e:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8011d82:	4a32      	ldr	r2, [pc, #200]	; (8011e4c <problem_fetch+0x107e8>)
 8011d84:	461c      	mov	r4, r3
 8011d86:	4613      	mov	r3, r2
 8011d88:	cb07      	ldmia	r3!, {r0, r1, r2}
 8011d8a:	6020      	str	r0, [r4, #0]
 8011d8c:	6061      	str	r1, [r4, #4]
 8011d8e:	60a2      	str	r2, [r4, #8]
 8011d90:	781b      	ldrb	r3, [r3, #0]
 8011d92:	7323      	strb	r3, [r4, #12]
			strcpy(p->grade,"6B+");
 8011d94:	687b      	ldr	r3, [r7, #4]
 8011d96:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8011d9a:	4a2d      	ldr	r2, [pc, #180]	; (8011e50 <problem_fetch+0x107ec>)
 8011d9c:	6810      	ldr	r0, [r2, #0]
 8011d9e:	6018      	str	r0, [r3, #0]
			p->moveSize = 8;
 8011da0:	687b      	ldr	r3, [r7, #4]
 8011da2:	2208      	movs	r2, #8
 8011da4:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,J,G,G,C,D,E,I");
 8011da6:	687b      	ldr	r3, [r7, #4]
 8011da8:	33a4      	adds	r3, #164	; 0xa4
 8011daa:	4a2a      	ldr	r2, [pc, #168]	; (8011e54 <problem_fetch+0x107f0>)
 8011dac:	461c      	mov	r4, r3
 8011dae:	4615      	mov	r5, r2
 8011db0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011db2:	6020      	str	r0, [r4, #0]
 8011db4:	6061      	str	r1, [r4, #4]
 8011db6:	60a2      	str	r2, [r4, #8]
 8011db8:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,7,9,10,13,15,16,18");
 8011dba:	687b      	ldr	r3, [r7, #4]
 8011dbc:	3304      	adds	r3, #4
 8011dbe:	4a26      	ldr	r2, [pc, #152]	; (8011e58 <problem_fetch+0x107f4>)
 8011dc0:	461d      	mov	r5, r3
 8011dc2:	4614      	mov	r4, r2
 8011dc4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8011dc6:	6028      	str	r0, [r5, #0]
 8011dc8:	6069      	str	r1, [r5, #4]
 8011dca:	60aa      	str	r2, [r5, #8]
 8011dcc:	60eb      	str	r3, [r5, #12]
 8011dce:	6820      	ldr	r0, [r4, #0]
 8011dd0:	6128      	str	r0, [r5, #16]
 8011dd2:	7923      	ldrb	r3, [r4, #4]
 8011dd4:	752b      	strb	r3, [r5, #20]
			strcpy(p->startFinish,"s,d,d,d,d,d,d,e");
 8011dd6:	687b      	ldr	r3, [r7, #4]
 8011dd8:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8011ddc:	4a1f      	ldr	r2, [pc, #124]	; (8011e5c <problem_fetch+0x107f8>)
 8011dde:	461c      	mov	r4, r3
 8011de0:	4615      	mov	r5, r2
 8011de2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011de4:	6020      	str	r0, [r4, #0]
 8011de6:	6061      	str	r1, [r4, #4]
 8011de8:	60a2      	str	r2, [r4, #8]
 8011dea:	60e3      	str	r3, [r4, #12]
			break;
 8011dec:	f00a bb6a 	b.w	801c4c4 <problem_fetch+0x1ae60>
 8011df0:	0802977c 	.word	0x0802977c
 8011df4:	08023cc4 	.word	0x08023cc4
 8011df8:	08029794 	.word	0x08029794
 8011dfc:	08024e2c 	.word	0x08024e2c
 8011e00:	08023ff0 	.word	0x08023ff0
 8011e04:	080297a0 	.word	0x080297a0
 8011e08:	0802421c 	.word	0x0802421c
 8011e0c:	080297ac 	.word	0x080297ac
 8011e10:	08028d1c 	.word	0x08028d1c
 8011e14:	080297b8 	.word	0x080297b8
 8011e18:	08023ae4 	.word	0x08023ae4
 8011e1c:	080297c8 	.word	0x080297c8
 8011e20:	080297d8 	.word	0x080297d8
 8011e24:	08023cac 	.word	0x08023cac
 8011e28:	080297ec 	.word	0x080297ec
 8011e2c:	080297f4 	.word	0x080297f4
 8011e30:	08029804 	.word	0x08029804
 8011e34:	08023b9c 	.word	0x08023b9c
 8011e38:	08029818 	.word	0x08029818
 8011e3c:	08023bbc 	.word	0x08023bbc
 8011e40:	08029828 	.word	0x08029828
 8011e44:	08029834 	.word	0x08029834
 8011e48:	08023ec0 	.word	0x08023ec0
 8011e4c:	08029844 	.word	0x08029844
 8011e50:	08023b24 	.word	0x08023b24
 8011e54:	08029854 	.word	0x08029854
 8011e58:	08029864 	.word	0x08029864
 8011e5c:	08023d34 	.word	0x08023d34
		case 485 :
			strcpy(p->name,"MUCCA");
 8011e60:	687b      	ldr	r3, [r7, #4]
 8011e62:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8011e66:	4aae      	ldr	r2, [pc, #696]	; (8012120 <problem_fetch+0x10abc>)
 8011e68:	6810      	ldr	r0, [r2, #0]
 8011e6a:	6018      	str	r0, [r3, #0]
 8011e6c:	8892      	ldrh	r2, [r2, #4]
 8011e6e:	809a      	strh	r2, [r3, #4]
			strcpy(p->grade,"7A+");
 8011e70:	687b      	ldr	r3, [r7, #4]
 8011e72:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8011e76:	4aab      	ldr	r2, [pc, #684]	; (8012124 <problem_fetch+0x10ac0>)
 8011e78:	6810      	ldr	r0, [r2, #0]
 8011e7a:	6018      	str	r0, [r3, #0]
			p->moveSize = 4;
 8011e7c:	687b      	ldr	r3, [r7, #4]
 8011e7e:	2204      	movs	r2, #4
 8011e80:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,H,G,I");
 8011e82:	687b      	ldr	r3, [r7, #4]
 8011e84:	33a4      	adds	r3, #164	; 0xa4
 8011e86:	49a8      	ldr	r1, [pc, #672]	; (8012128 <problem_fetch+0x10ac4>)
 8011e88:	461a      	mov	r2, r3
 8011e8a:	460b      	mov	r3, r1
 8011e8c:	cb03      	ldmia	r3!, {r0, r1}
 8011e8e:	6010      	str	r0, [r2, #0]
 8011e90:	6051      	str	r1, [r2, #4]
			strcpy(p->moveNumbers,"4,10,14,18");
 8011e92:	687b      	ldr	r3, [r7, #4]
 8011e94:	3304      	adds	r3, #4
 8011e96:	49a5      	ldr	r1, [pc, #660]	; (801212c <problem_fetch+0x10ac8>)
 8011e98:	461a      	mov	r2, r3
 8011e9a:	460b      	mov	r3, r1
 8011e9c:	cb03      	ldmia	r3!, {r0, r1}
 8011e9e:	6010      	str	r0, [r2, #0]
 8011ea0:	6051      	str	r1, [r2, #4]
 8011ea2:	8819      	ldrh	r1, [r3, #0]
 8011ea4:	789b      	ldrb	r3, [r3, #2]
 8011ea6:	8111      	strh	r1, [r2, #8]
 8011ea8:	7293      	strb	r3, [r2, #10]
			strcpy(p->startFinish,"s,d,d,e");
 8011eaa:	687b      	ldr	r3, [r7, #4]
 8011eac:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8011eb0:	499f      	ldr	r1, [pc, #636]	; (8012130 <problem_fetch+0x10acc>)
 8011eb2:	461a      	mov	r2, r3
 8011eb4:	460b      	mov	r3, r1
 8011eb6:	cb03      	ldmia	r3!, {r0, r1}
 8011eb8:	6010      	str	r0, [r2, #0]
 8011eba:	6051      	str	r1, [r2, #4]
			break;
 8011ebc:	f00a bb02 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 486 :
			strcpy(p->name,"MR PINCH");
 8011ec0:	687b      	ldr	r3, [r7, #4]
 8011ec2:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8011ec6:	499b      	ldr	r1, [pc, #620]	; (8012134 <problem_fetch+0x10ad0>)
 8011ec8:	461a      	mov	r2, r3
 8011eca:	460b      	mov	r3, r1
 8011ecc:	cb03      	ldmia	r3!, {r0, r1}
 8011ece:	6010      	str	r0, [r2, #0]
 8011ed0:	6051      	str	r1, [r2, #4]
 8011ed2:	781b      	ldrb	r3, [r3, #0]
 8011ed4:	7213      	strb	r3, [r2, #8]
			strcpy(p->grade,"7B+");
 8011ed6:	687b      	ldr	r3, [r7, #4]
 8011ed8:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8011edc:	4a96      	ldr	r2, [pc, #600]	; (8012138 <problem_fetch+0x10ad4>)
 8011ede:	6810      	ldr	r0, [r2, #0]
 8011ee0:	6018      	str	r0, [r3, #0]
			p->moveSize = 5;
 8011ee2:	687b      	ldr	r3, [r7, #4]
 8011ee4:	2205      	movs	r2, #5
 8011ee6:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,C,G,E,D");
 8011ee8:	687b      	ldr	r3, [r7, #4]
 8011eea:	33a4      	adds	r3, #164	; 0xa4
 8011eec:	4993      	ldr	r1, [pc, #588]	; (801213c <problem_fetch+0x10ad8>)
 8011eee:	461a      	mov	r2, r3
 8011ef0:	460b      	mov	r3, r1
 8011ef2:	cb03      	ldmia	r3!, {r0, r1}
 8011ef4:	6010      	str	r0, [r2, #0]
 8011ef6:	6051      	str	r1, [r2, #4]
 8011ef8:	881b      	ldrh	r3, [r3, #0]
 8011efa:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"4,8,9,14,18");
 8011efc:	687b      	ldr	r3, [r7, #4]
 8011efe:	3304      	adds	r3, #4
 8011f00:	4a8f      	ldr	r2, [pc, #572]	; (8012140 <problem_fetch+0x10adc>)
 8011f02:	461c      	mov	r4, r3
 8011f04:	4613      	mov	r3, r2
 8011f06:	cb07      	ldmia	r3!, {r0, r1, r2}
 8011f08:	6020      	str	r0, [r4, #0]
 8011f0a:	6061      	str	r1, [r4, #4]
 8011f0c:	60a2      	str	r2, [r4, #8]
			strcpy(p->startFinish,"s,d,d,d,e");
 8011f0e:	687b      	ldr	r3, [r7, #4]
 8011f10:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8011f14:	498b      	ldr	r1, [pc, #556]	; (8012144 <problem_fetch+0x10ae0>)
 8011f16:	461a      	mov	r2, r3
 8011f18:	460b      	mov	r3, r1
 8011f1a:	cb03      	ldmia	r3!, {r0, r1}
 8011f1c:	6010      	str	r0, [r2, #0]
 8011f1e:	6051      	str	r1, [r2, #4]
 8011f20:	881b      	ldrh	r3, [r3, #0]
 8011f22:	8113      	strh	r3, [r2, #8]
			break;
 8011f24:	f00a bace 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 487 :
			strcpy(p->name,"PROJECT V1");
 8011f28:	687b      	ldr	r3, [r7, #4]
 8011f2a:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8011f2e:	4986      	ldr	r1, [pc, #536]	; (8012148 <problem_fetch+0x10ae4>)
 8011f30:	461a      	mov	r2, r3
 8011f32:	460b      	mov	r3, r1
 8011f34:	cb03      	ldmia	r3!, {r0, r1}
 8011f36:	6010      	str	r0, [r2, #0]
 8011f38:	6051      	str	r1, [r2, #4]
 8011f3a:	8819      	ldrh	r1, [r3, #0]
 8011f3c:	789b      	ldrb	r3, [r3, #2]
 8011f3e:	8111      	strh	r1, [r2, #8]
 8011f40:	7293      	strb	r3, [r2, #10]
			strcpy(p->grade,"7B+");
 8011f42:	687b      	ldr	r3, [r7, #4]
 8011f44:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8011f48:	4a7b      	ldr	r2, [pc, #492]	; (8012138 <problem_fetch+0x10ad4>)
 8011f4a:	6810      	ldr	r0, [r2, #0]
 8011f4c:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 8011f4e:	687b      	ldr	r3, [r7, #4]
 8011f50:	2207      	movs	r2, #7
 8011f52:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,C,F,F,I,G,D");
 8011f54:	687b      	ldr	r3, [r7, #4]
 8011f56:	33a4      	adds	r3, #164	; 0xa4
 8011f58:	4a7c      	ldr	r2, [pc, #496]	; (801214c <problem_fetch+0x10ae8>)
 8011f5a:	461c      	mov	r4, r3
 8011f5c:	4613      	mov	r3, r2
 8011f5e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8011f60:	6020      	str	r0, [r4, #0]
 8011f62:	6061      	str	r1, [r4, #4]
 8011f64:	60a2      	str	r2, [r4, #8]
 8011f66:	881b      	ldrh	r3, [r3, #0]
 8011f68:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,8,11,13,14,17,18");
 8011f6a:	687b      	ldr	r3, [r7, #4]
 8011f6c:	3304      	adds	r3, #4
 8011f6e:	4a78      	ldr	r2, [pc, #480]	; (8012150 <problem_fetch+0x10aec>)
 8011f70:	461d      	mov	r5, r3
 8011f72:	4614      	mov	r4, r2
 8011f74:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8011f76:	6028      	str	r0, [r5, #0]
 8011f78:	6069      	str	r1, [r5, #4]
 8011f7a:	60aa      	str	r2, [r5, #8]
 8011f7c:	60eb      	str	r3, [r5, #12]
 8011f7e:	8823      	ldrh	r3, [r4, #0]
 8011f80:	78a2      	ldrb	r2, [r4, #2]
 8011f82:	822b      	strh	r3, [r5, #16]
 8011f84:	4613      	mov	r3, r2
 8011f86:	74ab      	strb	r3, [r5, #18]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 8011f88:	687b      	ldr	r3, [r7, #4]
 8011f8a:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8011f8e:	4a71      	ldr	r2, [pc, #452]	; (8012154 <problem_fetch+0x10af0>)
 8011f90:	461c      	mov	r4, r3
 8011f92:	4613      	mov	r3, r2
 8011f94:	cb07      	ldmia	r3!, {r0, r1, r2}
 8011f96:	6020      	str	r0, [r4, #0]
 8011f98:	6061      	str	r1, [r4, #4]
 8011f9a:	60a2      	str	r2, [r4, #8]
 8011f9c:	881b      	ldrh	r3, [r3, #0]
 8011f9e:	81a3      	strh	r3, [r4, #12]
			break;
 8011fa0:	f00a ba90 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 488 :
			strcpy(p->name,"PAUNCH PINCHER");
 8011fa4:	687b      	ldr	r3, [r7, #4]
 8011fa6:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8011faa:	4a6b      	ldr	r2, [pc, #428]	; (8012158 <problem_fetch+0x10af4>)
 8011fac:	461c      	mov	r4, r3
 8011fae:	4613      	mov	r3, r2
 8011fb0:	cb07      	ldmia	r3!, {r0, r1, r2}
 8011fb2:	6020      	str	r0, [r4, #0]
 8011fb4:	6061      	str	r1, [r4, #4]
 8011fb6:	60a2      	str	r2, [r4, #8]
 8011fb8:	881a      	ldrh	r2, [r3, #0]
 8011fba:	789b      	ldrb	r3, [r3, #2]
 8011fbc:	81a2      	strh	r2, [r4, #12]
 8011fbe:	73a3      	strb	r3, [r4, #14]
			strcpy(p->grade,"6C");
 8011fc0:	687b      	ldr	r3, [r7, #4]
 8011fc2:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8011fc6:	4a65      	ldr	r2, [pc, #404]	; (801215c <problem_fetch+0x10af8>)
 8011fc8:	8811      	ldrh	r1, [r2, #0]
 8011fca:	7892      	ldrb	r2, [r2, #2]
 8011fcc:	8019      	strh	r1, [r3, #0]
 8011fce:	709a      	strb	r2, [r3, #2]
			p->moveSize = 10;
 8011fd0:	687b      	ldr	r3, [r7, #4]
 8011fd2:	220a      	movs	r2, #10
 8011fd4:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,H,H,F,C,F,G,C,K,I");
 8011fd6:	687b      	ldr	r3, [r7, #4]
 8011fd8:	33a4      	adds	r3, #164	; 0xa4
 8011fda:	4a61      	ldr	r2, [pc, #388]	; (8012160 <problem_fetch+0x10afc>)
 8011fdc:	461d      	mov	r5, r3
 8011fde:	4614      	mov	r4, r2
 8011fe0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8011fe2:	6028      	str	r0, [r5, #0]
 8011fe4:	6069      	str	r1, [r5, #4]
 8011fe6:	60aa      	str	r2, [r5, #8]
 8011fe8:	60eb      	str	r3, [r5, #12]
 8011fea:	6820      	ldr	r0, [r4, #0]
 8011fec:	6128      	str	r0, [r5, #16]
			strcpy(p->moveNumbers,"5,5,8,11,8,13,15,5,14,18");
 8011fee:	687b      	ldr	r3, [r7, #4]
 8011ff0:	3304      	adds	r3, #4
 8011ff2:	4a5c      	ldr	r2, [pc, #368]	; (8012164 <problem_fetch+0x10b00>)
 8011ff4:	461d      	mov	r5, r3
 8011ff6:	4614      	mov	r4, r2
 8011ff8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8011ffa:	6028      	str	r0, [r5, #0]
 8011ffc:	6069      	str	r1, [r5, #4]
 8011ffe:	60aa      	str	r2, [r5, #8]
 8012000:	60eb      	str	r3, [r5, #12]
 8012002:	cc03      	ldmia	r4!, {r0, r1}
 8012004:	6128      	str	r0, [r5, #16]
 8012006:	6169      	str	r1, [r5, #20]
 8012008:	7823      	ldrb	r3, [r4, #0]
 801200a:	762b      	strb	r3, [r5, #24]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,d,d,e");
 801200c:	687b      	ldr	r3, [r7, #4]
 801200e:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8012012:	4a55      	ldr	r2, [pc, #340]	; (8012168 <problem_fetch+0x10b04>)
 8012014:	461d      	mov	r5, r3
 8012016:	4614      	mov	r4, r2
 8012018:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801201a:	6028      	str	r0, [r5, #0]
 801201c:	6069      	str	r1, [r5, #4]
 801201e:	60aa      	str	r2, [r5, #8]
 8012020:	60eb      	str	r3, [r5, #12]
 8012022:	6820      	ldr	r0, [r4, #0]
 8012024:	6128      	str	r0, [r5, #16]
			break;
 8012026:	f00a ba4d 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 489 :
			strcpy(p->name,"CHAKA MAKA");
 801202a:	687b      	ldr	r3, [r7, #4]
 801202c:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8012030:	494e      	ldr	r1, [pc, #312]	; (801216c <problem_fetch+0x10b08>)
 8012032:	461a      	mov	r2, r3
 8012034:	460b      	mov	r3, r1
 8012036:	cb03      	ldmia	r3!, {r0, r1}
 8012038:	6010      	str	r0, [r2, #0]
 801203a:	6051      	str	r1, [r2, #4]
 801203c:	8819      	ldrh	r1, [r3, #0]
 801203e:	789b      	ldrb	r3, [r3, #2]
 8012040:	8111      	strh	r1, [r2, #8]
 8012042:	7293      	strb	r3, [r2, #10]
			strcpy(p->grade,"7B");
 8012044:	687b      	ldr	r3, [r7, #4]
 8012046:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801204a:	4a49      	ldr	r2, [pc, #292]	; (8012170 <problem_fetch+0x10b0c>)
 801204c:	8811      	ldrh	r1, [r2, #0]
 801204e:	7892      	ldrb	r2, [r2, #2]
 8012050:	8019      	strh	r1, [r3, #0]
 8012052:	709a      	strb	r2, [r3, #2]
			p->moveSize = 7;
 8012054:	687b      	ldr	r3, [r7, #4]
 8012056:	2207      	movs	r2, #7
 8012058:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"C,B,G,H,I,G,I");
 801205a:	687b      	ldr	r3, [r7, #4]
 801205c:	33a4      	adds	r3, #164	; 0xa4
 801205e:	4a45      	ldr	r2, [pc, #276]	; (8012174 <problem_fetch+0x10b10>)
 8012060:	461c      	mov	r4, r3
 8012062:	4613      	mov	r3, r2
 8012064:	cb07      	ldmia	r3!, {r0, r1, r2}
 8012066:	6020      	str	r0, [r4, #0]
 8012068:	6061      	str	r1, [r4, #4]
 801206a:	60a2      	str	r2, [r4, #8]
 801206c:	881b      	ldrh	r3, [r3, #0]
 801206e:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,10,10,13,7,17,18");
 8012070:	687b      	ldr	r3, [r7, #4]
 8012072:	3304      	adds	r3, #4
 8012074:	4a40      	ldr	r2, [pc, #256]	; (8012178 <problem_fetch+0x10b14>)
 8012076:	461d      	mov	r5, r3
 8012078:	4614      	mov	r4, r2
 801207a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801207c:	6028      	str	r0, [r5, #0]
 801207e:	6069      	str	r1, [r5, #4]
 8012080:	60aa      	str	r2, [r5, #8]
 8012082:	60eb      	str	r3, [r5, #12]
 8012084:	8823      	ldrh	r3, [r4, #0]
 8012086:	78a2      	ldrb	r2, [r4, #2]
 8012088:	822b      	strh	r3, [r5, #16]
 801208a:	4613      	mov	r3, r2
 801208c:	74ab      	strb	r3, [r5, #18]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 801208e:	687b      	ldr	r3, [r7, #4]
 8012090:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8012094:	4a2f      	ldr	r2, [pc, #188]	; (8012154 <problem_fetch+0x10af0>)
 8012096:	461c      	mov	r4, r3
 8012098:	4613      	mov	r3, r2
 801209a:	cb07      	ldmia	r3!, {r0, r1, r2}
 801209c:	6020      	str	r0, [r4, #0]
 801209e:	6061      	str	r1, [r4, #4]
 80120a0:	60a2      	str	r2, [r4, #8]
 80120a2:	881b      	ldrh	r3, [r3, #0]
 80120a4:	81a3      	strh	r3, [r4, #12]
			break;
 80120a6:	f00a ba0d 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 490 :
			strcpy(p->name,"SHOULDER 'SPLODER");
 80120aa:	687b      	ldr	r3, [r7, #4]
 80120ac:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80120b0:	4a32      	ldr	r2, [pc, #200]	; (801217c <problem_fetch+0x10b18>)
 80120b2:	461d      	mov	r5, r3
 80120b4:	4614      	mov	r4, r2
 80120b6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80120b8:	6028      	str	r0, [r5, #0]
 80120ba:	6069      	str	r1, [r5, #4]
 80120bc:	60aa      	str	r2, [r5, #8]
 80120be:	60eb      	str	r3, [r5, #12]
 80120c0:	8823      	ldrh	r3, [r4, #0]
 80120c2:	822b      	strh	r3, [r5, #16]
			strcpy(p->grade,"7C");
 80120c4:	687b      	ldr	r3, [r7, #4]
 80120c6:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80120ca:	4a2d      	ldr	r2, [pc, #180]	; (8012180 <problem_fetch+0x10b1c>)
 80120cc:	8811      	ldrh	r1, [r2, #0]
 80120ce:	7892      	ldrb	r2, [r2, #2]
 80120d0:	8019      	strh	r1, [r3, #0]
 80120d2:	709a      	strb	r2, [r3, #2]
			p->moveSize = 6;
 80120d4:	687b      	ldr	r3, [r7, #4]
 80120d6:	2206      	movs	r2, #6
 80120d8:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,J,E,J,E,D");
 80120da:	687b      	ldr	r3, [r7, #4]
 80120dc:	33a4      	adds	r3, #164	; 0xa4
 80120de:	4a29      	ldr	r2, [pc, #164]	; (8012184 <problem_fetch+0x10b20>)
 80120e0:	461c      	mov	r4, r3
 80120e2:	4613      	mov	r3, r2
 80120e4:	cb07      	ldmia	r3!, {r0, r1, r2}
 80120e6:	6020      	str	r0, [r4, #0]
 80120e8:	6061      	str	r1, [r4, #4]
 80120ea:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,7,9,12,14,18");
 80120ec:	687b      	ldr	r3, [r7, #4]
 80120ee:	3304      	adds	r3, #4
 80120f0:	4a25      	ldr	r2, [pc, #148]	; (8012188 <problem_fetch+0x10b24>)
 80120f2:	461c      	mov	r4, r3
 80120f4:	4613      	mov	r3, r2
 80120f6:	cb07      	ldmia	r3!, {r0, r1, r2}
 80120f8:	6020      	str	r0, [r4, #0]
 80120fa:	6061      	str	r1, [r4, #4]
 80120fc:	60a2      	str	r2, [r4, #8]
 80120fe:	881a      	ldrh	r2, [r3, #0]
 8012100:	789b      	ldrb	r3, [r3, #2]
 8012102:	81a2      	strh	r2, [r4, #12]
 8012104:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 8012106:	687b      	ldr	r3, [r7, #4]
 8012108:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 801210c:	4a1f      	ldr	r2, [pc, #124]	; (801218c <problem_fetch+0x10b28>)
 801210e:	461c      	mov	r4, r3
 8012110:	4613      	mov	r3, r2
 8012112:	cb07      	ldmia	r3!, {r0, r1, r2}
 8012114:	6020      	str	r0, [r4, #0]
 8012116:	6061      	str	r1, [r4, #4]
 8012118:	60a2      	str	r2, [r4, #8]
			break;
 801211a:	f00a b9d3 	b.w	801c4c4 <problem_fetch+0x1ae60>
 801211e:	bf00      	nop
 8012120:	0802987c 	.word	0x0802987c
 8012124:	08023cc4 	.word	0x08023cc4
 8012128:	08029884 	.word	0x08029884
 801212c:	08025034 	.word	0x08025034
 8012130:	08023c78 	.word	0x08023c78
 8012134:	0802988c 	.word	0x0802988c
 8012138:	08023c60 	.word	0x08023c60
 801213c:	08029898 	.word	0x08029898
 8012140:	080298a4 	.word	0x080298a4
 8012144:	08023ff0 	.word	0x08023ff0
 8012148:	080298b0 	.word	0x080298b0
 801214c:	080298bc 	.word	0x080298bc
 8012150:	080298cc 	.word	0x080298cc
 8012154:	08023cac 	.word	0x08023cac
 8012158:	080298e0 	.word	0x080298e0
 801215c:	08023bf0 	.word	0x08023bf0
 8012160:	080298f0 	.word	0x080298f0
 8012164:	08029904 	.word	0x08029904
 8012168:	080243cc 	.word	0x080243cc
 801216c:	08029920 	.word	0x08029920
 8012170:	0802421c 	.word	0x0802421c
 8012174:	0802992c 	.word	0x0802992c
 8012178:	0802993c 	.word	0x0802993c
 801217c:	08029950 	.word	0x08029950
 8012180:	08024358 	.word	0x08024358
 8012184:	08029964 	.word	0x08029964
 8012188:	08029970 	.word	0x08029970
 801218c:	08023ec0 	.word	0x08023ec0
		case 491 :
			strcpy(p->name,"BIG TIME BRUH");
 8012190:	687b      	ldr	r3, [r7, #4]
 8012192:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8012196:	4aaa      	ldr	r2, [pc, #680]	; (8012440 <problem_fetch+0x10ddc>)
 8012198:	461c      	mov	r4, r3
 801219a:	4613      	mov	r3, r2
 801219c:	cb07      	ldmia	r3!, {r0, r1, r2}
 801219e:	6020      	str	r0, [r4, #0]
 80121a0:	6061      	str	r1, [r4, #4]
 80121a2:	60a2      	str	r2, [r4, #8]
 80121a4:	881b      	ldrh	r3, [r3, #0]
 80121a6:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade,"6C");
 80121a8:	687b      	ldr	r3, [r7, #4]
 80121aa:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80121ae:	4aa5      	ldr	r2, [pc, #660]	; (8012444 <problem_fetch+0x10de0>)
 80121b0:	8811      	ldrh	r1, [r2, #0]
 80121b2:	7892      	ldrb	r2, [r2, #2]
 80121b4:	8019      	strh	r1, [r3, #0]
 80121b6:	709a      	strb	r2, [r3, #2]
			p->moveSize = 7;
 80121b8:	687b      	ldr	r3, [r7, #4]
 80121ba:	2207      	movs	r2, #7
 80121bc:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,E,H,C,I,E,I");
 80121be:	687b      	ldr	r3, [r7, #4]
 80121c0:	33a4      	adds	r3, #164	; 0xa4
 80121c2:	4aa1      	ldr	r2, [pc, #644]	; (8012448 <problem_fetch+0x10de4>)
 80121c4:	461c      	mov	r4, r3
 80121c6:	4613      	mov	r3, r2
 80121c8:	cb07      	ldmia	r3!, {r0, r1, r2}
 80121ca:	6020      	str	r0, [r4, #0]
 80121cc:	6061      	str	r1, [r4, #4]
 80121ce:	60a2      	str	r2, [r4, #8]
 80121d0:	881b      	ldrh	r3, [r3, #0]
 80121d2:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,6,10,13,14,16,18");
 80121d4:	687b      	ldr	r3, [r7, #4]
 80121d6:	3304      	adds	r3, #4
 80121d8:	4a9c      	ldr	r2, [pc, #624]	; (801244c <problem_fetch+0x10de8>)
 80121da:	461d      	mov	r5, r3
 80121dc:	4614      	mov	r4, r2
 80121de:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80121e0:	6028      	str	r0, [r5, #0]
 80121e2:	6069      	str	r1, [r5, #4]
 80121e4:	60aa      	str	r2, [r5, #8]
 80121e6:	60eb      	str	r3, [r5, #12]
 80121e8:	8823      	ldrh	r3, [r4, #0]
 80121ea:	78a2      	ldrb	r2, [r4, #2]
 80121ec:	822b      	strh	r3, [r5, #16]
 80121ee:	4613      	mov	r3, r2
 80121f0:	74ab      	strb	r3, [r5, #18]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 80121f2:	687b      	ldr	r3, [r7, #4]
 80121f4:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 80121f8:	4a95      	ldr	r2, [pc, #596]	; (8012450 <problem_fetch+0x10dec>)
 80121fa:	461c      	mov	r4, r3
 80121fc:	4613      	mov	r3, r2
 80121fe:	cb07      	ldmia	r3!, {r0, r1, r2}
 8012200:	6020      	str	r0, [r4, #0]
 8012202:	6061      	str	r1, [r4, #4]
 8012204:	60a2      	str	r2, [r4, #8]
 8012206:	881b      	ldrh	r3, [r3, #0]
 8012208:	81a3      	strh	r3, [r4, #12]
			break;
 801220a:	f00a b95b 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 492 :
			strcpy(p->name,"THE HUMAN FLAG");
 801220e:	687b      	ldr	r3, [r7, #4]
 8012210:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8012214:	4a8f      	ldr	r2, [pc, #572]	; (8012454 <problem_fetch+0x10df0>)
 8012216:	461c      	mov	r4, r3
 8012218:	4613      	mov	r3, r2
 801221a:	cb07      	ldmia	r3!, {r0, r1, r2}
 801221c:	6020      	str	r0, [r4, #0]
 801221e:	6061      	str	r1, [r4, #4]
 8012220:	60a2      	str	r2, [r4, #8]
 8012222:	881a      	ldrh	r2, [r3, #0]
 8012224:	789b      	ldrb	r3, [r3, #2]
 8012226:	81a2      	strh	r2, [r4, #12]
 8012228:	73a3      	strb	r3, [r4, #14]
			strcpy(p->grade,"7A");
 801222a:	687b      	ldr	r3, [r7, #4]
 801222c:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8012230:	4a89      	ldr	r2, [pc, #548]	; (8012458 <problem_fetch+0x10df4>)
 8012232:	8811      	ldrh	r1, [r2, #0]
 8012234:	7892      	ldrb	r2, [r2, #2]
 8012236:	8019      	strh	r1, [r3, #0]
 8012238:	709a      	strb	r2, [r3, #2]
			p->moveSize = 4;
 801223a:	687b      	ldr	r3, [r7, #4]
 801223c:	2204      	movs	r2, #4
 801223e:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,H,C,D");
 8012240:	687b      	ldr	r3, [r7, #4]
 8012242:	33a4      	adds	r3, #164	; 0xa4
 8012244:	4985      	ldr	r1, [pc, #532]	; (801245c <problem_fetch+0x10df8>)
 8012246:	461a      	mov	r2, r3
 8012248:	460b      	mov	r3, r1
 801224a:	cb03      	ldmia	r3!, {r0, r1}
 801224c:	6010      	str	r0, [r2, #0]
 801224e:	6051      	str	r1, [r2, #4]
			strcpy(p->moveNumbers,"6,10,13,18");
 8012250:	687b      	ldr	r3, [r7, #4]
 8012252:	3304      	adds	r3, #4
 8012254:	4982      	ldr	r1, [pc, #520]	; (8012460 <problem_fetch+0x10dfc>)
 8012256:	461a      	mov	r2, r3
 8012258:	460b      	mov	r3, r1
 801225a:	cb03      	ldmia	r3!, {r0, r1}
 801225c:	6010      	str	r0, [r2, #0]
 801225e:	6051      	str	r1, [r2, #4]
 8012260:	8819      	ldrh	r1, [r3, #0]
 8012262:	789b      	ldrb	r3, [r3, #2]
 8012264:	8111      	strh	r1, [r2, #8]
 8012266:	7293      	strb	r3, [r2, #10]
			strcpy(p->startFinish,"s,d,d,e");
 8012268:	687b      	ldr	r3, [r7, #4]
 801226a:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 801226e:	497d      	ldr	r1, [pc, #500]	; (8012464 <problem_fetch+0x10e00>)
 8012270:	461a      	mov	r2, r3
 8012272:	460b      	mov	r3, r1
 8012274:	cb03      	ldmia	r3!, {r0, r1}
 8012276:	6010      	str	r0, [r2, #0]
 8012278:	6051      	str	r1, [r2, #4]
			break;
 801227a:	f00a b923 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 493 :
			strcpy(p->name,"WINGSPAN");
 801227e:	687b      	ldr	r3, [r7, #4]
 8012280:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8012284:	4978      	ldr	r1, [pc, #480]	; (8012468 <problem_fetch+0x10e04>)
 8012286:	461a      	mov	r2, r3
 8012288:	460b      	mov	r3, r1
 801228a:	cb03      	ldmia	r3!, {r0, r1}
 801228c:	6010      	str	r0, [r2, #0]
 801228e:	6051      	str	r1, [r2, #4]
 8012290:	781b      	ldrb	r3, [r3, #0]
 8012292:	7213      	strb	r3, [r2, #8]
			strcpy(p->grade,"7A+");
 8012294:	687b      	ldr	r3, [r7, #4]
 8012296:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801229a:	4a74      	ldr	r2, [pc, #464]	; (801246c <problem_fetch+0x10e08>)
 801229c:	6810      	ldr	r0, [r2, #0]
 801229e:	6018      	str	r0, [r3, #0]
			p->moveSize = 5;
 80122a0:	687b      	ldr	r3, [r7, #4]
 80122a2:	2205      	movs	r2, #5
 80122a4:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"C,C,F,A,D");
 80122a6:	687b      	ldr	r3, [r7, #4]
 80122a8:	33a4      	adds	r3, #164	; 0xa4
 80122aa:	4971      	ldr	r1, [pc, #452]	; (8012470 <problem_fetch+0x10e0c>)
 80122ac:	461a      	mov	r2, r3
 80122ae:	460b      	mov	r3, r1
 80122b0:	cb03      	ldmia	r3!, {r0, r1}
 80122b2:	6010      	str	r0, [r2, #0]
 80122b4:	6051      	str	r1, [r2, #4]
 80122b6:	881b      	ldrh	r3, [r3, #0]
 80122b8:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"5,8,11,14,18");
 80122ba:	687b      	ldr	r3, [r7, #4]
 80122bc:	3304      	adds	r3, #4
 80122be:	4a6d      	ldr	r2, [pc, #436]	; (8012474 <problem_fetch+0x10e10>)
 80122c0:	461c      	mov	r4, r3
 80122c2:	4613      	mov	r3, r2
 80122c4:	cb07      	ldmia	r3!, {r0, r1, r2}
 80122c6:	6020      	str	r0, [r4, #0]
 80122c8:	6061      	str	r1, [r4, #4]
 80122ca:	60a2      	str	r2, [r4, #8]
 80122cc:	781b      	ldrb	r3, [r3, #0]
 80122ce:	7323      	strb	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,e");
 80122d0:	687b      	ldr	r3, [r7, #4]
 80122d2:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 80122d6:	4968      	ldr	r1, [pc, #416]	; (8012478 <problem_fetch+0x10e14>)
 80122d8:	461a      	mov	r2, r3
 80122da:	460b      	mov	r3, r1
 80122dc:	cb03      	ldmia	r3!, {r0, r1}
 80122de:	6010      	str	r0, [r2, #0]
 80122e0:	6051      	str	r1, [r2, #4]
 80122e2:	881b      	ldrh	r3, [r3, #0]
 80122e4:	8113      	strh	r3, [r2, #8]
			break;
 80122e6:	f00a b8ed 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 494 :
			strcpy(p->name,"BELLE NOIRE");
 80122ea:	687b      	ldr	r3, [r7, #4]
 80122ec:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80122f0:	4a62      	ldr	r2, [pc, #392]	; (801247c <problem_fetch+0x10e18>)
 80122f2:	461c      	mov	r4, r3
 80122f4:	4613      	mov	r3, r2
 80122f6:	cb07      	ldmia	r3!, {r0, r1, r2}
 80122f8:	6020      	str	r0, [r4, #0]
 80122fa:	6061      	str	r1, [r4, #4]
 80122fc:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade,"7A+");
 80122fe:	687b      	ldr	r3, [r7, #4]
 8012300:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8012304:	4a59      	ldr	r2, [pc, #356]	; (801246c <problem_fetch+0x10e08>)
 8012306:	6810      	ldr	r0, [r2, #0]
 8012308:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 801230a:	687b      	ldr	r3, [r7, #4]
 801230c:	2207      	movs	r2, #7
 801230e:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,E,E,E,J,I,I");
 8012310:	687b      	ldr	r3, [r7, #4]
 8012312:	33a4      	adds	r3, #164	; 0xa4
 8012314:	4a5a      	ldr	r2, [pc, #360]	; (8012480 <problem_fetch+0x10e1c>)
 8012316:	461c      	mov	r4, r3
 8012318:	4613      	mov	r3, r2
 801231a:	cb07      	ldmia	r3!, {r0, r1, r2}
 801231c:	6020      	str	r0, [r4, #0]
 801231e:	6061      	str	r1, [r4, #4]
 8012320:	60a2      	str	r2, [r4, #8]
 8012322:	881b      	ldrh	r3, [r3, #0]
 8012324:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,8,9,12,13,15,18");
 8012326:	687b      	ldr	r3, [r7, #4]
 8012328:	3304      	adds	r3, #4
 801232a:	4a56      	ldr	r2, [pc, #344]	; (8012484 <problem_fetch+0x10e20>)
 801232c:	461d      	mov	r5, r3
 801232e:	4614      	mov	r4, r2
 8012330:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8012332:	6028      	str	r0, [r5, #0]
 8012334:	6069      	str	r1, [r5, #4]
 8012336:	60aa      	str	r2, [r5, #8]
 8012338:	60eb      	str	r3, [r5, #12]
 801233a:	8823      	ldrh	r3, [r4, #0]
 801233c:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 801233e:	687b      	ldr	r3, [r7, #4]
 8012340:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8012344:	4a42      	ldr	r2, [pc, #264]	; (8012450 <problem_fetch+0x10dec>)
 8012346:	461c      	mov	r4, r3
 8012348:	4613      	mov	r3, r2
 801234a:	cb07      	ldmia	r3!, {r0, r1, r2}
 801234c:	6020      	str	r0, [r4, #0]
 801234e:	6061      	str	r1, [r4, #4]
 8012350:	60a2      	str	r2, [r4, #8]
 8012352:	881b      	ldrh	r3, [r3, #0]
 8012354:	81a3      	strh	r3, [r4, #12]
			break;
 8012356:	f00a b8b5 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 495 :
			strcpy(p->name,"VORPAL SWORD");
 801235a:	687b      	ldr	r3, [r7, #4]
 801235c:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8012360:	4a49      	ldr	r2, [pc, #292]	; (8012488 <problem_fetch+0x10e24>)
 8012362:	461c      	mov	r4, r3
 8012364:	4613      	mov	r3, r2
 8012366:	cb07      	ldmia	r3!, {r0, r1, r2}
 8012368:	6020      	str	r0, [r4, #0]
 801236a:	6061      	str	r1, [r4, #4]
 801236c:	60a2      	str	r2, [r4, #8]
 801236e:	781b      	ldrb	r3, [r3, #0]
 8012370:	7323      	strb	r3, [r4, #12]
			strcpy(p->grade,"7A+");
 8012372:	687b      	ldr	r3, [r7, #4]
 8012374:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8012378:	4a3c      	ldr	r2, [pc, #240]	; (801246c <problem_fetch+0x10e08>)
 801237a:	6810      	ldr	r0, [r2, #0]
 801237c:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 801237e:	687b      	ldr	r3, [r7, #4]
 8012380:	2206      	movs	r2, #6
 8012382:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,E,G,H,H,I");
 8012384:	687b      	ldr	r3, [r7, #4]
 8012386:	33a4      	adds	r3, #164	; 0xa4
 8012388:	4a40      	ldr	r2, [pc, #256]	; (801248c <problem_fetch+0x10e28>)
 801238a:	461c      	mov	r4, r3
 801238c:	4613      	mov	r3, r2
 801238e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8012390:	6020      	str	r0, [r4, #0]
 8012392:	6061      	str	r1, [r4, #4]
 8012394:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,8,9,12,16,18");
 8012396:	687b      	ldr	r3, [r7, #4]
 8012398:	3304      	adds	r3, #4
 801239a:	4a3d      	ldr	r2, [pc, #244]	; (8012490 <problem_fetch+0x10e2c>)
 801239c:	461c      	mov	r4, r3
 801239e:	4613      	mov	r3, r2
 80123a0:	cb07      	ldmia	r3!, {r0, r1, r2}
 80123a2:	6020      	str	r0, [r4, #0]
 80123a4:	6061      	str	r1, [r4, #4]
 80123a6:	60a2      	str	r2, [r4, #8]
 80123a8:	881a      	ldrh	r2, [r3, #0]
 80123aa:	789b      	ldrb	r3, [r3, #2]
 80123ac:	81a2      	strh	r2, [r4, #12]
 80123ae:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 80123b0:	687b      	ldr	r3, [r7, #4]
 80123b2:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 80123b6:	4a37      	ldr	r2, [pc, #220]	; (8012494 <problem_fetch+0x10e30>)
 80123b8:	461c      	mov	r4, r3
 80123ba:	4613      	mov	r3, r2
 80123bc:	cb07      	ldmia	r3!, {r0, r1, r2}
 80123be:	6020      	str	r0, [r4, #0]
 80123c0:	6061      	str	r1, [r4, #4]
 80123c2:	60a2      	str	r2, [r4, #8]
			break;
 80123c4:	f00a b87e 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 496 :
			strcpy(p->name,"INSANE IN THE BRAIN");
 80123c8:	687b      	ldr	r3, [r7, #4]
 80123ca:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80123ce:	4a32      	ldr	r2, [pc, #200]	; (8012498 <problem_fetch+0x10e34>)
 80123d0:	461d      	mov	r5, r3
 80123d2:	4614      	mov	r4, r2
 80123d4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80123d6:	6028      	str	r0, [r5, #0]
 80123d8:	6069      	str	r1, [r5, #4]
 80123da:	60aa      	str	r2, [r5, #8]
 80123dc:	60eb      	str	r3, [r5, #12]
 80123de:	6820      	ldr	r0, [r4, #0]
 80123e0:	6128      	str	r0, [r5, #16]
			strcpy(p->grade,"6B+");
 80123e2:	687b      	ldr	r3, [r7, #4]
 80123e4:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80123e8:	4a2c      	ldr	r2, [pc, #176]	; (801249c <problem_fetch+0x10e38>)
 80123ea:	6810      	ldr	r0, [r2, #0]
 80123ec:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 80123ee:	687b      	ldr	r3, [r7, #4]
 80123f0:	2207      	movs	r2, #7
 80123f2:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,E,E,E,B,A,D");
 80123f4:	687b      	ldr	r3, [r7, #4]
 80123f6:	33a4      	adds	r3, #164	; 0xa4
 80123f8:	4a29      	ldr	r2, [pc, #164]	; (80124a0 <problem_fetch+0x10e3c>)
 80123fa:	461c      	mov	r4, r3
 80123fc:	4613      	mov	r3, r2
 80123fe:	cb07      	ldmia	r3!, {r0, r1, r2}
 8012400:	6020      	str	r0, [r4, #0]
 8012402:	6061      	str	r1, [r4, #4]
 8012404:	60a2      	str	r2, [r4, #8]
 8012406:	881b      	ldrh	r3, [r3, #0]
 8012408:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,6,12,8,10,14,18");
 801240a:	687b      	ldr	r3, [r7, #4]
 801240c:	3304      	adds	r3, #4
 801240e:	4a25      	ldr	r2, [pc, #148]	; (80124a4 <problem_fetch+0x10e40>)
 8012410:	461d      	mov	r5, r3
 8012412:	4614      	mov	r4, r2
 8012414:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8012416:	6028      	str	r0, [r5, #0]
 8012418:	6069      	str	r1, [r5, #4]
 801241a:	60aa      	str	r2, [r5, #8]
 801241c:	60eb      	str	r3, [r5, #12]
 801241e:	8823      	ldrh	r3, [r4, #0]
 8012420:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,s,d,d,d,d,e");
 8012422:	687b      	ldr	r3, [r7, #4]
 8012424:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8012428:	4a1f      	ldr	r2, [pc, #124]	; (80124a8 <problem_fetch+0x10e44>)
 801242a:	461c      	mov	r4, r3
 801242c:	4613      	mov	r3, r2
 801242e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8012430:	6020      	str	r0, [r4, #0]
 8012432:	6061      	str	r1, [r4, #4]
 8012434:	60a2      	str	r2, [r4, #8]
 8012436:	881b      	ldrh	r3, [r3, #0]
 8012438:	81a3      	strh	r3, [r4, #12]
			break;
 801243a:	f00a b843 	b.w	801c4c4 <problem_fetch+0x1ae60>
 801243e:	bf00      	nop
 8012440:	08029980 	.word	0x08029980
 8012444:	08023bf0 	.word	0x08023bf0
 8012448:	08029990 	.word	0x08029990
 801244c:	080299a0 	.word	0x080299a0
 8012450:	08023cac 	.word	0x08023cac
 8012454:	080299b4 	.word	0x080299b4
 8012458:	08023ae4 	.word	0x08023ae4
 801245c:	080299c4 	.word	0x080299c4
 8012460:	08027130 	.word	0x08027130
 8012464:	08023c78 	.word	0x08023c78
 8012468:	080299cc 	.word	0x080299cc
 801246c:	08023cc4 	.word	0x08023cc4
 8012470:	080299d8 	.word	0x080299d8
 8012474:	080272b0 	.word	0x080272b0
 8012478:	08023ff0 	.word	0x08023ff0
 801247c:	080299e4 	.word	0x080299e4
 8012480:	080299f0 	.word	0x080299f0
 8012484:	08029a00 	.word	0x08029a00
 8012488:	08029a14 	.word	0x08029a14
 801248c:	08029a24 	.word	0x08029a24
 8012490:	08028a48 	.word	0x08028a48
 8012494:	08023ec0 	.word	0x08023ec0
 8012498:	08029a30 	.word	0x08029a30
 801249c:	08023b24 	.word	0x08023b24
 80124a0:	08029a44 	.word	0x08029a44
 80124a4:	08029a54 	.word	0x08029a54
 80124a8:	08023b9c 	.word	0x08023b9c
		case 497 :
			strcpy(p->name,"MARCUS IS THE PROBLEM");
 80124ac:	687b      	ldr	r3, [r7, #4]
 80124ae:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80124b2:	4ab6      	ldr	r2, [pc, #728]	; (801278c <problem_fetch+0x11128>)
 80124b4:	461d      	mov	r5, r3
 80124b6:	4614      	mov	r4, r2
 80124b8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80124ba:	6028      	str	r0, [r5, #0]
 80124bc:	6069      	str	r1, [r5, #4]
 80124be:	60aa      	str	r2, [r5, #8]
 80124c0:	60eb      	str	r3, [r5, #12]
 80124c2:	6820      	ldr	r0, [r4, #0]
 80124c4:	6128      	str	r0, [r5, #16]
 80124c6:	88a3      	ldrh	r3, [r4, #4]
 80124c8:	82ab      	strh	r3, [r5, #20]
			strcpy(p->grade,"6C");
 80124ca:	687b      	ldr	r3, [r7, #4]
 80124cc:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80124d0:	4aaf      	ldr	r2, [pc, #700]	; (8012790 <problem_fetch+0x1112c>)
 80124d2:	8811      	ldrh	r1, [r2, #0]
 80124d4:	7892      	ldrb	r2, [r2, #2]
 80124d6:	8019      	strh	r1, [r3, #0]
 80124d8:	709a      	strb	r2, [r3, #2]
			p->moveSize = 8;
 80124da:	687b      	ldr	r3, [r7, #4]
 80124dc:	2208      	movs	r2, #8
 80124de:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"E,H,G,D,E,A,E,D");
 80124e0:	687b      	ldr	r3, [r7, #4]
 80124e2:	33a4      	adds	r3, #164	; 0xa4
 80124e4:	4aab      	ldr	r2, [pc, #684]	; (8012794 <problem_fetch+0x11130>)
 80124e6:	461c      	mov	r4, r3
 80124e8:	4615      	mov	r5, r2
 80124ea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80124ec:	6020      	str	r0, [r4, #0]
 80124ee:	6061      	str	r1, [r4, #4]
 80124f0:	60a2      	str	r2, [r4, #8]
 80124f2:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"6,5,9,11,12,14,16,18");
 80124f4:	687b      	ldr	r3, [r7, #4]
 80124f6:	3304      	adds	r3, #4
 80124f8:	4aa7      	ldr	r2, [pc, #668]	; (8012798 <problem_fetch+0x11134>)
 80124fa:	461d      	mov	r5, r3
 80124fc:	4614      	mov	r4, r2
 80124fe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8012500:	6028      	str	r0, [r5, #0]
 8012502:	6069      	str	r1, [r5, #4]
 8012504:	60aa      	str	r2, [r5, #8]
 8012506:	60eb      	str	r3, [r5, #12]
 8012508:	6820      	ldr	r0, [r4, #0]
 801250a:	6128      	str	r0, [r5, #16]
 801250c:	7923      	ldrb	r3, [r4, #4]
 801250e:	752b      	strb	r3, [r5, #20]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,e");
 8012510:	687b      	ldr	r3, [r7, #4]
 8012512:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8012516:	4aa1      	ldr	r2, [pc, #644]	; (801279c <problem_fetch+0x11138>)
 8012518:	461c      	mov	r4, r3
 801251a:	4615      	mov	r5, r2
 801251c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801251e:	6020      	str	r0, [r4, #0]
 8012520:	6061      	str	r1, [r4, #4]
 8012522:	60a2      	str	r2, [r4, #8]
 8012524:	60e3      	str	r3, [r4, #12]
			break;
 8012526:	f009 bfcd 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 498 :
			strcpy(p->name,"SACRED COW");
 801252a:	687b      	ldr	r3, [r7, #4]
 801252c:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8012530:	499b      	ldr	r1, [pc, #620]	; (80127a0 <problem_fetch+0x1113c>)
 8012532:	461a      	mov	r2, r3
 8012534:	460b      	mov	r3, r1
 8012536:	cb03      	ldmia	r3!, {r0, r1}
 8012538:	6010      	str	r0, [r2, #0]
 801253a:	6051      	str	r1, [r2, #4]
 801253c:	8819      	ldrh	r1, [r3, #0]
 801253e:	789b      	ldrb	r3, [r3, #2]
 8012540:	8111      	strh	r1, [r2, #8]
 8012542:	7293      	strb	r3, [r2, #10]
			strcpy(p->grade,"7A");
 8012544:	687b      	ldr	r3, [r7, #4]
 8012546:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801254a:	4a96      	ldr	r2, [pc, #600]	; (80127a4 <problem_fetch+0x11140>)
 801254c:	8811      	ldrh	r1, [r2, #0]
 801254e:	7892      	ldrb	r2, [r2, #2]
 8012550:	8019      	strh	r1, [r3, #0]
 8012552:	709a      	strb	r2, [r3, #2]
			p->moveSize = 11;
 8012554:	687b      	ldr	r3, [r7, #4]
 8012556:	220b      	movs	r2, #11
 8012558:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"E,G,I,C,A,C,H,G,H,I,I");
 801255a:	687b      	ldr	r3, [r7, #4]
 801255c:	33a4      	adds	r3, #164	; 0xa4
 801255e:	4a92      	ldr	r2, [pc, #584]	; (80127a8 <problem_fetch+0x11144>)
 8012560:	461d      	mov	r5, r3
 8012562:	4614      	mov	r4, r2
 8012564:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8012566:	6028      	str	r0, [r5, #0]
 8012568:	6069      	str	r1, [r5, #4]
 801256a:	60aa      	str	r2, [r5, #8]
 801256c:	60eb      	str	r3, [r5, #12]
 801256e:	6820      	ldr	r0, [r4, #0]
 8012570:	6128      	str	r0, [r5, #16]
 8012572:	88a3      	ldrh	r3, [r4, #4]
 8012574:	82ab      	strh	r3, [r5, #20]
			strcpy(p->moveNumbers,"6,4,14,13,9,8,10,9,8,7,18");
 8012576:	687b      	ldr	r3, [r7, #4]
 8012578:	3304      	adds	r3, #4
 801257a:	4a8c      	ldr	r2, [pc, #560]	; (80127ac <problem_fetch+0x11148>)
 801257c:	461d      	mov	r5, r3
 801257e:	4614      	mov	r4, r2
 8012580:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8012582:	6028      	str	r0, [r5, #0]
 8012584:	6069      	str	r1, [r5, #4]
 8012586:	60aa      	str	r2, [r5, #8]
 8012588:	60eb      	str	r3, [r5, #12]
 801258a:	cc03      	ldmia	r4!, {r0, r1}
 801258c:	6128      	str	r0, [r5, #16]
 801258e:	6169      	str	r1, [r5, #20]
 8012590:	8823      	ldrh	r3, [r4, #0]
 8012592:	832b      	strh	r3, [r5, #24]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,d,d,d,e");
 8012594:	687b      	ldr	r3, [r7, #4]
 8012596:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 801259a:	4a85      	ldr	r2, [pc, #532]	; (80127b0 <problem_fetch+0x1114c>)
 801259c:	461d      	mov	r5, r3
 801259e:	4614      	mov	r4, r2
 80125a0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80125a2:	6028      	str	r0, [r5, #0]
 80125a4:	6069      	str	r1, [r5, #4]
 80125a6:	60aa      	str	r2, [r5, #8]
 80125a8:	60eb      	str	r3, [r5, #12]
 80125aa:	6820      	ldr	r0, [r4, #0]
 80125ac:	6128      	str	r0, [r5, #16]
 80125ae:	88a3      	ldrh	r3, [r4, #4]
 80125b0:	82ab      	strh	r3, [r5, #20]
			break;
 80125b2:	f009 bf87 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 499 :
			strcpy(p->name,"BABA BLACK SHEEP");
 80125b6:	687b      	ldr	r3, [r7, #4]
 80125b8:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80125bc:	4a7d      	ldr	r2, [pc, #500]	; (80127b4 <problem_fetch+0x11150>)
 80125be:	461d      	mov	r5, r3
 80125c0:	4614      	mov	r4, r2
 80125c2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80125c4:	6028      	str	r0, [r5, #0]
 80125c6:	6069      	str	r1, [r5, #4]
 80125c8:	60aa      	str	r2, [r5, #8]
 80125ca:	60eb      	str	r3, [r5, #12]
 80125cc:	7823      	ldrb	r3, [r4, #0]
 80125ce:	742b      	strb	r3, [r5, #16]
			strcpy(p->grade,"7A");
 80125d0:	687b      	ldr	r3, [r7, #4]
 80125d2:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80125d6:	4a73      	ldr	r2, [pc, #460]	; (80127a4 <problem_fetch+0x11140>)
 80125d8:	8811      	ldrh	r1, [r2, #0]
 80125da:	7892      	ldrb	r2, [r2, #2]
 80125dc:	8019      	strh	r1, [r3, #0]
 80125de:	709a      	strb	r2, [r3, #2]
			p->moveSize = 10;
 80125e0:	687b      	ldr	r3, [r7, #4]
 80125e2:	220a      	movs	r2, #10
 80125e4:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"E,G,C,I,H,G,H,I,C,I");
 80125e6:	687b      	ldr	r3, [r7, #4]
 80125e8:	33a4      	adds	r3, #164	; 0xa4
 80125ea:	4a73      	ldr	r2, [pc, #460]	; (80127b8 <problem_fetch+0x11154>)
 80125ec:	461d      	mov	r5, r3
 80125ee:	4614      	mov	r4, r2
 80125f0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80125f2:	6028      	str	r0, [r5, #0]
 80125f4:	6069      	str	r1, [r5, #4]
 80125f6:	60aa      	str	r2, [r5, #8]
 80125f8:	60eb      	str	r3, [r5, #12]
 80125fa:	6820      	ldr	r0, [r4, #0]
 80125fc:	6128      	str	r0, [r5, #16]
			strcpy(p->moveNumbers,"6,4,13,14,10,9,8,7,8,18");
 80125fe:	687b      	ldr	r3, [r7, #4]
 8012600:	3304      	adds	r3, #4
 8012602:	4a6e      	ldr	r2, [pc, #440]	; (80127bc <problem_fetch+0x11158>)
 8012604:	461d      	mov	r5, r3
 8012606:	4614      	mov	r4, r2
 8012608:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801260a:	6028      	str	r0, [r5, #0]
 801260c:	6069      	str	r1, [r5, #4]
 801260e:	60aa      	str	r2, [r5, #8]
 8012610:	60eb      	str	r3, [r5, #12]
 8012612:	cc03      	ldmia	r4!, {r0, r1}
 8012614:	6128      	str	r0, [r5, #16]
 8012616:	6169      	str	r1, [r5, #20]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,d,d,e");
 8012618:	687b      	ldr	r3, [r7, #4]
 801261a:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 801261e:	4a68      	ldr	r2, [pc, #416]	; (80127c0 <problem_fetch+0x1115c>)
 8012620:	461d      	mov	r5, r3
 8012622:	4614      	mov	r4, r2
 8012624:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8012626:	6028      	str	r0, [r5, #0]
 8012628:	6069      	str	r1, [r5, #4]
 801262a:	60aa      	str	r2, [r5, #8]
 801262c:	60eb      	str	r3, [r5, #12]
 801262e:	6820      	ldr	r0, [r4, #0]
 8012630:	6128      	str	r0, [r5, #16]
			break;
 8012632:	f009 bf47 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 500 :
			strcpy(p->name,"BLACK SHEEP");
 8012636:	687b      	ldr	r3, [r7, #4]
 8012638:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801263c:	4a61      	ldr	r2, [pc, #388]	; (80127c4 <problem_fetch+0x11160>)
 801263e:	461c      	mov	r4, r3
 8012640:	4613      	mov	r3, r2
 8012642:	cb07      	ldmia	r3!, {r0, r1, r2}
 8012644:	6020      	str	r0, [r4, #0]
 8012646:	6061      	str	r1, [r4, #4]
 8012648:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade,"6B+");
 801264a:	687b      	ldr	r3, [r7, #4]
 801264c:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8012650:	4a5d      	ldr	r2, [pc, #372]	; (80127c8 <problem_fetch+0x11164>)
 8012652:	6810      	ldr	r0, [r2, #0]
 8012654:	6018      	str	r0, [r3, #0]
			p->moveSize = 8;
 8012656:	687b      	ldr	r3, [r7, #4]
 8012658:	2208      	movs	r2, #8
 801265a:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,C,H,G,H,I,C,I");
 801265c:	687b      	ldr	r3, [r7, #4]
 801265e:	33a4      	adds	r3, #164	; 0xa4
 8012660:	4a5a      	ldr	r2, [pc, #360]	; (80127cc <problem_fetch+0x11168>)
 8012662:	461c      	mov	r4, r3
 8012664:	4615      	mov	r5, r2
 8012666:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8012668:	6020      	str	r0, [r4, #0]
 801266a:	6061      	str	r1, [r4, #4]
 801266c:	60a2      	str	r2, [r4, #8]
 801266e:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,13,10,9,8,7,8,18");
 8012670:	687b      	ldr	r3, [r7, #4]
 8012672:	3304      	adds	r3, #4
 8012674:	4a56      	ldr	r2, [pc, #344]	; (80127d0 <problem_fetch+0x1116c>)
 8012676:	461d      	mov	r5, r3
 8012678:	4614      	mov	r4, r2
 801267a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801267c:	6028      	str	r0, [r5, #0]
 801267e:	6069      	str	r1, [r5, #4]
 8012680:	60aa      	str	r2, [r5, #8]
 8012682:	60eb      	str	r3, [r5, #12]
 8012684:	8823      	ldrh	r3, [r4, #0]
 8012686:	78a2      	ldrb	r2, [r4, #2]
 8012688:	822b      	strh	r3, [r5, #16]
 801268a:	4613      	mov	r3, r2
 801268c:	74ab      	strb	r3, [r5, #18]
			strcpy(p->startFinish,"s,d,d,d,d,d,d,e");
 801268e:	687b      	ldr	r3, [r7, #4]
 8012690:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8012694:	4a4f      	ldr	r2, [pc, #316]	; (80127d4 <problem_fetch+0x11170>)
 8012696:	461c      	mov	r4, r3
 8012698:	4615      	mov	r5, r2
 801269a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801269c:	6020      	str	r0, [r4, #0]
 801269e:	6061      	str	r1, [r4, #4]
 80126a0:	60a2      	str	r2, [r4, #8]
 80126a2:	60e3      	str	r3, [r4, #12]
			break;
 80126a4:	f009 bf0e 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 501 :
			strcpy(p->name,"TIGELLA OF DREAM");
 80126a8:	687b      	ldr	r3, [r7, #4]
 80126aa:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80126ae:	4a4a      	ldr	r2, [pc, #296]	; (80127d8 <problem_fetch+0x11174>)
 80126b0:	461d      	mov	r5, r3
 80126b2:	4614      	mov	r4, r2
 80126b4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80126b6:	6028      	str	r0, [r5, #0]
 80126b8:	6069      	str	r1, [r5, #4]
 80126ba:	60aa      	str	r2, [r5, #8]
 80126bc:	60eb      	str	r3, [r5, #12]
 80126be:	7823      	ldrb	r3, [r4, #0]
 80126c0:	742b      	strb	r3, [r5, #16]
			strcpy(p->grade,"7A");
 80126c2:	687b      	ldr	r3, [r7, #4]
 80126c4:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80126c8:	4a36      	ldr	r2, [pc, #216]	; (80127a4 <problem_fetch+0x11140>)
 80126ca:	8811      	ldrh	r1, [r2, #0]
 80126cc:	7892      	ldrb	r2, [r2, #2]
 80126ce:	8019      	strh	r1, [r3, #0]
 80126d0:	709a      	strb	r2, [r3, #2]
			p->moveSize = 5;
 80126d2:	687b      	ldr	r3, [r7, #4]
 80126d4:	2205      	movs	r2, #5
 80126d6:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"H,F,C,E,D");
 80126d8:	687b      	ldr	r3, [r7, #4]
 80126da:	33a4      	adds	r3, #164	; 0xa4
 80126dc:	493f      	ldr	r1, [pc, #252]	; (80127dc <problem_fetch+0x11178>)
 80126de:	461a      	mov	r2, r3
 80126e0:	460b      	mov	r3, r1
 80126e2:	cb03      	ldmia	r3!, {r0, r1}
 80126e4:	6010      	str	r0, [r2, #0]
 80126e6:	6051      	str	r1, [r2, #4]
 80126e8:	881b      	ldrh	r3, [r3, #0]
 80126ea:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"5,11,13,6,18");
 80126ec:	687b      	ldr	r3, [r7, #4]
 80126ee:	3304      	adds	r3, #4
 80126f0:	4a3b      	ldr	r2, [pc, #236]	; (80127e0 <problem_fetch+0x1117c>)
 80126f2:	461c      	mov	r4, r3
 80126f4:	4613      	mov	r3, r2
 80126f6:	cb07      	ldmia	r3!, {r0, r1, r2}
 80126f8:	6020      	str	r0, [r4, #0]
 80126fa:	6061      	str	r1, [r4, #4]
 80126fc:	60a2      	str	r2, [r4, #8]
 80126fe:	781b      	ldrb	r3, [r3, #0]
 8012700:	7323      	strb	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,e");
 8012702:	687b      	ldr	r3, [r7, #4]
 8012704:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8012708:	4936      	ldr	r1, [pc, #216]	; (80127e4 <problem_fetch+0x11180>)
 801270a:	461a      	mov	r2, r3
 801270c:	460b      	mov	r3, r1
 801270e:	cb03      	ldmia	r3!, {r0, r1}
 8012710:	6010      	str	r0, [r2, #0]
 8012712:	6051      	str	r1, [r2, #4]
 8012714:	881b      	ldrh	r3, [r3, #0]
 8012716:	8113      	strh	r3, [r2, #8]
			break;
 8012718:	f009 bed4 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 502 :
			strcpy(p->name,"AGRO-VATED");
 801271c:	687b      	ldr	r3, [r7, #4]
 801271e:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8012722:	4931      	ldr	r1, [pc, #196]	; (80127e8 <problem_fetch+0x11184>)
 8012724:	461a      	mov	r2, r3
 8012726:	460b      	mov	r3, r1
 8012728:	cb03      	ldmia	r3!, {r0, r1}
 801272a:	6010      	str	r0, [r2, #0]
 801272c:	6051      	str	r1, [r2, #4]
 801272e:	8819      	ldrh	r1, [r3, #0]
 8012730:	789b      	ldrb	r3, [r3, #2]
 8012732:	8111      	strh	r1, [r2, #8]
 8012734:	7293      	strb	r3, [r2, #10]
			strcpy(p->grade,"7A+");
 8012736:	687b      	ldr	r3, [r7, #4]
 8012738:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801273c:	4a2b      	ldr	r2, [pc, #172]	; (80127ec <problem_fetch+0x11188>)
 801273e:	6810      	ldr	r0, [r2, #0]
 8012740:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 8012742:	687b      	ldr	r3, [r7, #4]
 8012744:	2206      	movs	r2, #6
 8012746:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,I,E,E,G,I");
 8012748:	687b      	ldr	r3, [r7, #4]
 801274a:	33a4      	adds	r3, #164	; 0xa4
 801274c:	4a28      	ldr	r2, [pc, #160]	; (80127f0 <problem_fetch+0x1118c>)
 801274e:	461c      	mov	r4, r3
 8012750:	4613      	mov	r3, r2
 8012752:	cb07      	ldmia	r3!, {r0, r1, r2}
 8012754:	6020      	str	r0, [r4, #0]
 8012756:	6061      	str	r1, [r4, #4]
 8012758:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,7,8,12,14,18");
 801275a:	687b      	ldr	r3, [r7, #4]
 801275c:	3304      	adds	r3, #4
 801275e:	4a25      	ldr	r2, [pc, #148]	; (80127f4 <problem_fetch+0x11190>)
 8012760:	461c      	mov	r4, r3
 8012762:	4613      	mov	r3, r2
 8012764:	cb07      	ldmia	r3!, {r0, r1, r2}
 8012766:	6020      	str	r0, [r4, #0]
 8012768:	6061      	str	r1, [r4, #4]
 801276a:	60a2      	str	r2, [r4, #8]
 801276c:	881a      	ldrh	r2, [r3, #0]
 801276e:	789b      	ldrb	r3, [r3, #2]
 8012770:	81a2      	strh	r2, [r4, #12]
 8012772:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 8012774:	687b      	ldr	r3, [r7, #4]
 8012776:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 801277a:	4a1f      	ldr	r2, [pc, #124]	; (80127f8 <problem_fetch+0x11194>)
 801277c:	461c      	mov	r4, r3
 801277e:	4613      	mov	r3, r2
 8012780:	cb07      	ldmia	r3!, {r0, r1, r2}
 8012782:	6020      	str	r0, [r4, #0]
 8012784:	6061      	str	r1, [r4, #4]
 8012786:	60a2      	str	r2, [r4, #8]
			break;
 8012788:	f009 be9c 	b.w	801c4c4 <problem_fetch+0x1ae60>
 801278c:	08029a68 	.word	0x08029a68
 8012790:	08023bf0 	.word	0x08023bf0
 8012794:	08029a80 	.word	0x08029a80
 8012798:	08029a90 	.word	0x08029a90
 801279c:	08023c48 	.word	0x08023c48
 80127a0:	08029aa8 	.word	0x08029aa8
 80127a4:	08023ae4 	.word	0x08023ae4
 80127a8:	08029ab4 	.word	0x08029ab4
 80127ac:	08029acc 	.word	0x08029acc
 80127b0:	08027484 	.word	0x08027484
 80127b4:	08029ae8 	.word	0x08029ae8
 80127b8:	08029afc 	.word	0x08029afc
 80127bc:	08029b10 	.word	0x08029b10
 80127c0:	080243cc 	.word	0x080243cc
 80127c4:	08029b28 	.word	0x08029b28
 80127c8:	08023b24 	.word	0x08023b24
 80127cc:	08029b34 	.word	0x08029b34
 80127d0:	08029b44 	.word	0x08029b44
 80127d4:	08023d34 	.word	0x08023d34
 80127d8:	08029b58 	.word	0x08029b58
 80127dc:	08029b6c 	.word	0x08029b6c
 80127e0:	08029b78 	.word	0x08029b78
 80127e4:	08023ff0 	.word	0x08023ff0
 80127e8:	08029b88 	.word	0x08029b88
 80127ec:	08023cc4 	.word	0x08023cc4
 80127f0:	08029b94 	.word	0x08029b94
 80127f4:	08029ba0 	.word	0x08029ba0
 80127f8:	08023ec0 	.word	0x08023ec0
		case 503 :
			strcpy(p->name,"TONE'S THROW");
 80127fc:	687b      	ldr	r3, [r7, #4]
 80127fe:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8012802:	4ab1      	ldr	r2, [pc, #708]	; (8012ac8 <problem_fetch+0x11464>)
 8012804:	461c      	mov	r4, r3
 8012806:	4613      	mov	r3, r2
 8012808:	cb07      	ldmia	r3!, {r0, r1, r2}
 801280a:	6020      	str	r0, [r4, #0]
 801280c:	6061      	str	r1, [r4, #4]
 801280e:	60a2      	str	r2, [r4, #8]
 8012810:	781b      	ldrb	r3, [r3, #0]
 8012812:	7323      	strb	r3, [r4, #12]
			strcpy(p->grade,"6C+");
 8012814:	687b      	ldr	r3, [r7, #4]
 8012816:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801281a:	4aac      	ldr	r2, [pc, #688]	; (8012acc <problem_fetch+0x11468>)
 801281c:	6810      	ldr	r0, [r2, #0]
 801281e:	6018      	str	r0, [r3, #0]
			p->moveSize = 5;
 8012820:	687b      	ldr	r3, [r7, #4]
 8012822:	2205      	movs	r2, #5
 8012824:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"C,A,E,A,D");
 8012826:	687b      	ldr	r3, [r7, #4]
 8012828:	33a4      	adds	r3, #164	; 0xa4
 801282a:	49a9      	ldr	r1, [pc, #676]	; (8012ad0 <problem_fetch+0x1146c>)
 801282c:	461a      	mov	r2, r3
 801282e:	460b      	mov	r3, r1
 8012830:	cb03      	ldmia	r3!, {r0, r1}
 8012832:	6010      	str	r0, [r2, #0]
 8012834:	6051      	str	r1, [r2, #4]
 8012836:	881b      	ldrh	r3, [r3, #0]
 8012838:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"5,9,12,14,18");
 801283a:	687b      	ldr	r3, [r7, #4]
 801283c:	3304      	adds	r3, #4
 801283e:	4aa5      	ldr	r2, [pc, #660]	; (8012ad4 <problem_fetch+0x11470>)
 8012840:	461c      	mov	r4, r3
 8012842:	4613      	mov	r3, r2
 8012844:	cb07      	ldmia	r3!, {r0, r1, r2}
 8012846:	6020      	str	r0, [r4, #0]
 8012848:	6061      	str	r1, [r4, #4]
 801284a:	60a2      	str	r2, [r4, #8]
 801284c:	781b      	ldrb	r3, [r3, #0]
 801284e:	7323      	strb	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,e");
 8012850:	687b      	ldr	r3, [r7, #4]
 8012852:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8012856:	49a0      	ldr	r1, [pc, #640]	; (8012ad8 <problem_fetch+0x11474>)
 8012858:	461a      	mov	r2, r3
 801285a:	460b      	mov	r3, r1
 801285c:	cb03      	ldmia	r3!, {r0, r1}
 801285e:	6010      	str	r0, [r2, #0]
 8012860:	6051      	str	r1, [r2, #4]
 8012862:	881b      	ldrh	r3, [r3, #0]
 8012864:	8113      	strh	r3, [r2, #8]
			break;
 8012866:	f009 be2d 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 504 :
			strcpy(p->name,"BLACK PEPPER");
 801286a:	687b      	ldr	r3, [r7, #4]
 801286c:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8012870:	4a9a      	ldr	r2, [pc, #616]	; (8012adc <problem_fetch+0x11478>)
 8012872:	461c      	mov	r4, r3
 8012874:	4613      	mov	r3, r2
 8012876:	cb07      	ldmia	r3!, {r0, r1, r2}
 8012878:	6020      	str	r0, [r4, #0]
 801287a:	6061      	str	r1, [r4, #4]
 801287c:	60a2      	str	r2, [r4, #8]
 801287e:	781b      	ldrb	r3, [r3, #0]
 8012880:	7323      	strb	r3, [r4, #12]
			strcpy(p->grade,"7A");
 8012882:	687b      	ldr	r3, [r7, #4]
 8012884:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8012888:	4a95      	ldr	r2, [pc, #596]	; (8012ae0 <problem_fetch+0x1147c>)
 801288a:	8811      	ldrh	r1, [r2, #0]
 801288c:	7892      	ldrb	r2, [r2, #2]
 801288e:	8019      	strh	r1, [r3, #0]
 8012890:	709a      	strb	r2, [r3, #2]
			p->moveSize = 7;
 8012892:	687b      	ldr	r3, [r7, #4]
 8012894:	2207      	movs	r2, #7
 8012896:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"H,E,E,A,C,D,D");
 8012898:	687b      	ldr	r3, [r7, #4]
 801289a:	33a4      	adds	r3, #164	; 0xa4
 801289c:	4a91      	ldr	r2, [pc, #580]	; (8012ae4 <problem_fetch+0x11480>)
 801289e:	461c      	mov	r4, r3
 80128a0:	4613      	mov	r3, r2
 80128a2:	cb07      	ldmia	r3!, {r0, r1, r2}
 80128a4:	6020      	str	r0, [r4, #0]
 80128a6:	6061      	str	r1, [r4, #4]
 80128a8:	60a2      	str	r2, [r4, #8]
 80128aa:	881b      	ldrh	r3, [r3, #0]
 80128ac:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,8,9,9,13,15,18");
 80128ae:	687b      	ldr	r3, [r7, #4]
 80128b0:	3304      	adds	r3, #4
 80128b2:	4a8d      	ldr	r2, [pc, #564]	; (8012ae8 <problem_fetch+0x11484>)
 80128b4:	461d      	mov	r5, r3
 80128b6:	4614      	mov	r4, r2
 80128b8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80128ba:	6028      	str	r0, [r5, #0]
 80128bc:	6069      	str	r1, [r5, #4]
 80128be:	60aa      	str	r2, [r5, #8]
 80128c0:	60eb      	str	r3, [r5, #12]
 80128c2:	7823      	ldrb	r3, [r4, #0]
 80128c4:	742b      	strb	r3, [r5, #16]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 80128c6:	687b      	ldr	r3, [r7, #4]
 80128c8:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 80128cc:	4a87      	ldr	r2, [pc, #540]	; (8012aec <problem_fetch+0x11488>)
 80128ce:	461c      	mov	r4, r3
 80128d0:	4613      	mov	r3, r2
 80128d2:	cb07      	ldmia	r3!, {r0, r1, r2}
 80128d4:	6020      	str	r0, [r4, #0]
 80128d6:	6061      	str	r1, [r4, #4]
 80128d8:	60a2      	str	r2, [r4, #8]
 80128da:	881b      	ldrh	r3, [r3, #0]
 80128dc:	81a3      	strh	r3, [r4, #12]
			break;
 80128de:	f009 bdf1 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 505 :
			strcpy(p->name,"GASTON GRADE PLEASE");
 80128e2:	687b      	ldr	r3, [r7, #4]
 80128e4:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80128e8:	4a81      	ldr	r2, [pc, #516]	; (8012af0 <problem_fetch+0x1148c>)
 80128ea:	461d      	mov	r5, r3
 80128ec:	4614      	mov	r4, r2
 80128ee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80128f0:	6028      	str	r0, [r5, #0]
 80128f2:	6069      	str	r1, [r5, #4]
 80128f4:	60aa      	str	r2, [r5, #8]
 80128f6:	60eb      	str	r3, [r5, #12]
 80128f8:	6820      	ldr	r0, [r4, #0]
 80128fa:	6128      	str	r0, [r5, #16]
			strcpy(p->grade,"6C+");
 80128fc:	687b      	ldr	r3, [r7, #4]
 80128fe:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8012902:	4a72      	ldr	r2, [pc, #456]	; (8012acc <problem_fetch+0x11468>)
 8012904:	6810      	ldr	r0, [r2, #0]
 8012906:	6018      	str	r0, [r3, #0]
			p->moveSize = 11;
 8012908:	687b      	ldr	r3, [r7, #4]
 801290a:	220b      	movs	r2, #11
 801290c:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"H,E,E,G,F,H,G,I,E,G,D");
 801290e:	687b      	ldr	r3, [r7, #4]
 8012910:	33a4      	adds	r3, #164	; 0xa4
 8012912:	4a78      	ldr	r2, [pc, #480]	; (8012af4 <problem_fetch+0x11490>)
 8012914:	461d      	mov	r5, r3
 8012916:	4614      	mov	r4, r2
 8012918:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801291a:	6028      	str	r0, [r5, #0]
 801291c:	6069      	str	r1, [r5, #4]
 801291e:	60aa      	str	r2, [r5, #8]
 8012920:	60eb      	str	r3, [r5, #12]
 8012922:	6820      	ldr	r0, [r4, #0]
 8012924:	6128      	str	r0, [r5, #16]
 8012926:	88a3      	ldrh	r3, [r4, #4]
 8012928:	82ab      	strh	r3, [r5, #20]
			strcpy(p->moveNumbers,"5,6,8,9,11,12,14,14,16,17,18");
 801292a:	687b      	ldr	r3, [r7, #4]
 801292c:	3304      	adds	r3, #4
 801292e:	4a72      	ldr	r2, [pc, #456]	; (8012af8 <problem_fetch+0x11494>)
 8012930:	461d      	mov	r5, r3
 8012932:	4614      	mov	r4, r2
 8012934:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8012936:	6028      	str	r0, [r5, #0]
 8012938:	6069      	str	r1, [r5, #4]
 801293a:	60aa      	str	r2, [r5, #8]
 801293c:	60eb      	str	r3, [r5, #12]
 801293e:	cc07      	ldmia	r4!, {r0, r1, r2}
 8012940:	6128      	str	r0, [r5, #16]
 8012942:	6169      	str	r1, [r5, #20]
 8012944:	61aa      	str	r2, [r5, #24]
 8012946:	7823      	ldrb	r3, [r4, #0]
 8012948:	772b      	strb	r3, [r5, #28]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,d,d,d,e");
 801294a:	687b      	ldr	r3, [r7, #4]
 801294c:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8012950:	4a6a      	ldr	r2, [pc, #424]	; (8012afc <problem_fetch+0x11498>)
 8012952:	461d      	mov	r5, r3
 8012954:	4614      	mov	r4, r2
 8012956:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8012958:	6028      	str	r0, [r5, #0]
 801295a:	6069      	str	r1, [r5, #4]
 801295c:	60aa      	str	r2, [r5, #8]
 801295e:	60eb      	str	r3, [r5, #12]
 8012960:	6820      	ldr	r0, [r4, #0]
 8012962:	6128      	str	r0, [r5, #16]
 8012964:	88a3      	ldrh	r3, [r4, #4]
 8012966:	82ab      	strh	r3, [r5, #20]
			break;
 8012968:	f009 bdac 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 506 :
			strcpy(p->name,"SALUHALLEN 11");
 801296c:	687b      	ldr	r3, [r7, #4]
 801296e:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8012972:	4a63      	ldr	r2, [pc, #396]	; (8012b00 <problem_fetch+0x1149c>)
 8012974:	461c      	mov	r4, r3
 8012976:	4613      	mov	r3, r2
 8012978:	cb07      	ldmia	r3!, {r0, r1, r2}
 801297a:	6020      	str	r0, [r4, #0]
 801297c:	6061      	str	r1, [r4, #4]
 801297e:	60a2      	str	r2, [r4, #8]
 8012980:	881b      	ldrh	r3, [r3, #0]
 8012982:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade,"6B+");
 8012984:	687b      	ldr	r3, [r7, #4]
 8012986:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801298a:	4a5e      	ldr	r2, [pc, #376]	; (8012b04 <problem_fetch+0x114a0>)
 801298c:	6810      	ldr	r0, [r2, #0]
 801298e:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 8012990:	687b      	ldr	r3, [r7, #4]
 8012992:	2207      	movs	r2, #7
 8012994:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,J,H,J,G,G,D");
 8012996:	687b      	ldr	r3, [r7, #4]
 8012998:	33a4      	adds	r3, #164	; 0xa4
 801299a:	4a5b      	ldr	r2, [pc, #364]	; (8012b08 <problem_fetch+0x114a4>)
 801299c:	461c      	mov	r4, r3
 801299e:	4613      	mov	r3, r2
 80129a0:	cb07      	ldmia	r3!, {r0, r1, r2}
 80129a2:	6020      	str	r0, [r4, #0]
 80129a4:	6061      	str	r1, [r4, #4]
 80129a6:	60a2      	str	r2, [r4, #8]
 80129a8:	881b      	ldrh	r3, [r3, #0]
 80129aa:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,7,10,12,14,15,18");
 80129ac:	687b      	ldr	r3, [r7, #4]
 80129ae:	3304      	adds	r3, #4
 80129b0:	4a56      	ldr	r2, [pc, #344]	; (8012b0c <problem_fetch+0x114a8>)
 80129b2:	461d      	mov	r5, r3
 80129b4:	4614      	mov	r4, r2
 80129b6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80129b8:	6028      	str	r0, [r5, #0]
 80129ba:	6069      	str	r1, [r5, #4]
 80129bc:	60aa      	str	r2, [r5, #8]
 80129be:	60eb      	str	r3, [r5, #12]
 80129c0:	8823      	ldrh	r3, [r4, #0]
 80129c2:	78a2      	ldrb	r2, [r4, #2]
 80129c4:	822b      	strh	r3, [r5, #16]
 80129c6:	4613      	mov	r3, r2
 80129c8:	74ab      	strb	r3, [r5, #18]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 80129ca:	687b      	ldr	r3, [r7, #4]
 80129cc:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 80129d0:	4a46      	ldr	r2, [pc, #280]	; (8012aec <problem_fetch+0x11488>)
 80129d2:	461c      	mov	r4, r3
 80129d4:	4613      	mov	r3, r2
 80129d6:	cb07      	ldmia	r3!, {r0, r1, r2}
 80129d8:	6020      	str	r0, [r4, #0]
 80129da:	6061      	str	r1, [r4, #4]
 80129dc:	60a2      	str	r2, [r4, #8]
 80129de:	881b      	ldrh	r3, [r3, #0]
 80129e0:	81a3      	strh	r3, [r4, #12]
			break;
 80129e2:	f009 bd6f 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 507 :
			strcpy(p->name,"BULA 3");
 80129e6:	687b      	ldr	r3, [r7, #4]
 80129e8:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80129ec:	4a48      	ldr	r2, [pc, #288]	; (8012b10 <problem_fetch+0x114ac>)
 80129ee:	6810      	ldr	r0, [r2, #0]
 80129f0:	6018      	str	r0, [r3, #0]
 80129f2:	8891      	ldrh	r1, [r2, #4]
 80129f4:	7992      	ldrb	r2, [r2, #6]
 80129f6:	8099      	strh	r1, [r3, #4]
 80129f8:	719a      	strb	r2, [r3, #6]
			strcpy(p->grade,"6B+");
 80129fa:	687b      	ldr	r3, [r7, #4]
 80129fc:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8012a00:	4a40      	ldr	r2, [pc, #256]	; (8012b04 <problem_fetch+0x114a0>)
 8012a02:	6810      	ldr	r0, [r2, #0]
 8012a04:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 8012a06:	687b      	ldr	r3, [r7, #4]
 8012a08:	2207      	movs	r2, #7
 8012a0a:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,E,H,F,I,E,I");
 8012a0c:	687b      	ldr	r3, [r7, #4]
 8012a0e:	33a4      	adds	r3, #164	; 0xa4
 8012a10:	4a40      	ldr	r2, [pc, #256]	; (8012b14 <problem_fetch+0x114b0>)
 8012a12:	461c      	mov	r4, r3
 8012a14:	4613      	mov	r3, r2
 8012a16:	cb07      	ldmia	r3!, {r0, r1, r2}
 8012a18:	6020      	str	r0, [r4, #0]
 8012a1a:	6061      	str	r1, [r4, #4]
 8012a1c:	60a2      	str	r2, [r4, #8]
 8012a1e:	881b      	ldrh	r3, [r3, #0]
 8012a20:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,8,10,13,14,16,18");
 8012a22:	687b      	ldr	r3, [r7, #4]
 8012a24:	3304      	adds	r3, #4
 8012a26:	4a3c      	ldr	r2, [pc, #240]	; (8012b18 <problem_fetch+0x114b4>)
 8012a28:	461d      	mov	r5, r3
 8012a2a:	4614      	mov	r4, r2
 8012a2c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8012a2e:	6028      	str	r0, [r5, #0]
 8012a30:	6069      	str	r1, [r5, #4]
 8012a32:	60aa      	str	r2, [r5, #8]
 8012a34:	60eb      	str	r3, [r5, #12]
 8012a36:	8823      	ldrh	r3, [r4, #0]
 8012a38:	78a2      	ldrb	r2, [r4, #2]
 8012a3a:	822b      	strh	r3, [r5, #16]
 8012a3c:	4613      	mov	r3, r2
 8012a3e:	74ab      	strb	r3, [r5, #18]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 8012a40:	687b      	ldr	r3, [r7, #4]
 8012a42:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8012a46:	4a29      	ldr	r2, [pc, #164]	; (8012aec <problem_fetch+0x11488>)
 8012a48:	461c      	mov	r4, r3
 8012a4a:	4613      	mov	r3, r2
 8012a4c:	cb07      	ldmia	r3!, {r0, r1, r2}
 8012a4e:	6020      	str	r0, [r4, #0]
 8012a50:	6061      	str	r1, [r4, #4]
 8012a52:	60a2      	str	r2, [r4, #8]
 8012a54:	881b      	ldrh	r3, [r3, #0]
 8012a56:	81a3      	strh	r3, [r4, #12]
			break;
 8012a58:	f009 bd34 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 508 :
			strcpy(p->name,"CHICKUGA");
 8012a5c:	687b      	ldr	r3, [r7, #4]
 8012a5e:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8012a62:	492e      	ldr	r1, [pc, #184]	; (8012b1c <problem_fetch+0x114b8>)
 8012a64:	461a      	mov	r2, r3
 8012a66:	460b      	mov	r3, r1
 8012a68:	cb03      	ldmia	r3!, {r0, r1}
 8012a6a:	6010      	str	r0, [r2, #0]
 8012a6c:	6051      	str	r1, [r2, #4]
 8012a6e:	781b      	ldrb	r3, [r3, #0]
 8012a70:	7213      	strb	r3, [r2, #8]
			strcpy(p->grade,"7B+");
 8012a72:	687b      	ldr	r3, [r7, #4]
 8012a74:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8012a78:	4a29      	ldr	r2, [pc, #164]	; (8012b20 <problem_fetch+0x114bc>)
 8012a7a:	6810      	ldr	r0, [r2, #0]
 8012a7c:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 8012a7e:	687b      	ldr	r3, [r7, #4]
 8012a80:	2206      	movs	r2, #6
 8012a82:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,C,E,C,E,D");
 8012a84:	687b      	ldr	r3, [r7, #4]
 8012a86:	33a4      	adds	r3, #164	; 0xa4
 8012a88:	4a26      	ldr	r2, [pc, #152]	; (8012b24 <problem_fetch+0x114c0>)
 8012a8a:	461c      	mov	r4, r3
 8012a8c:	4613      	mov	r3, r2
 8012a8e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8012a90:	6020      	str	r0, [r4, #0]
 8012a92:	6061      	str	r1, [r4, #4]
 8012a94:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,8,9,13,14,18");
 8012a96:	687b      	ldr	r3, [r7, #4]
 8012a98:	3304      	adds	r3, #4
 8012a9a:	4a23      	ldr	r2, [pc, #140]	; (8012b28 <problem_fetch+0x114c4>)
 8012a9c:	461c      	mov	r4, r3
 8012a9e:	4613      	mov	r3, r2
 8012aa0:	cb07      	ldmia	r3!, {r0, r1, r2}
 8012aa2:	6020      	str	r0, [r4, #0]
 8012aa4:	6061      	str	r1, [r4, #4]
 8012aa6:	60a2      	str	r2, [r4, #8]
 8012aa8:	881a      	ldrh	r2, [r3, #0]
 8012aaa:	789b      	ldrb	r3, [r3, #2]
 8012aac:	81a2      	strh	r2, [r4, #12]
 8012aae:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 8012ab0:	687b      	ldr	r3, [r7, #4]
 8012ab2:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8012ab6:	4a1d      	ldr	r2, [pc, #116]	; (8012b2c <problem_fetch+0x114c8>)
 8012ab8:	461c      	mov	r4, r3
 8012aba:	4613      	mov	r3, r2
 8012abc:	cb07      	ldmia	r3!, {r0, r1, r2}
 8012abe:	6020      	str	r0, [r4, #0]
 8012ac0:	6061      	str	r1, [r4, #4]
 8012ac2:	60a2      	str	r2, [r4, #8]
			break;
 8012ac4:	f009 bcfe 	b.w	801c4c4 <problem_fetch+0x1ae60>
 8012ac8:	08029bb0 	.word	0x08029bb0
 8012acc:	08023bbc 	.word	0x08023bbc
 8012ad0:	08029bc0 	.word	0x08029bc0
 8012ad4:	08024140 	.word	0x08024140
 8012ad8:	08023ff0 	.word	0x08023ff0
 8012adc:	08029bcc 	.word	0x08029bcc
 8012ae0:	08023ae4 	.word	0x08023ae4
 8012ae4:	08029bdc 	.word	0x08029bdc
 8012ae8:	08029bec 	.word	0x08029bec
 8012aec:	08023cac 	.word	0x08023cac
 8012af0:	08029c00 	.word	0x08029c00
 8012af4:	08029c14 	.word	0x08029c14
 8012af8:	08029c2c 	.word	0x08029c2c
 8012afc:	08027484 	.word	0x08027484
 8012b00:	08029c4c 	.word	0x08029c4c
 8012b04:	08023b24 	.word	0x08023b24
 8012b08:	08029c5c 	.word	0x08029c5c
 8012b0c:	08029c6c 	.word	0x08029c6c
 8012b10:	08029c80 	.word	0x08029c80
 8012b14:	08029c88 	.word	0x08029c88
 8012b18:	08029c98 	.word	0x08029c98
 8012b1c:	08029cac 	.word	0x08029cac
 8012b20:	08023c60 	.word	0x08023c60
 8012b24:	08029cb8 	.word	0x08029cb8
 8012b28:	08029cc4 	.word	0x08029cc4
 8012b2c:	08023ec0 	.word	0x08023ec0
		case 509 :
			strcpy(p->name,"MASTERFUL GAP 2.0");
 8012b30:	687b      	ldr	r3, [r7, #4]
 8012b32:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8012b36:	4aa6      	ldr	r2, [pc, #664]	; (8012dd0 <problem_fetch+0x1176c>)
 8012b38:	461d      	mov	r5, r3
 8012b3a:	4614      	mov	r4, r2
 8012b3c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8012b3e:	6028      	str	r0, [r5, #0]
 8012b40:	6069      	str	r1, [r5, #4]
 8012b42:	60aa      	str	r2, [r5, #8]
 8012b44:	60eb      	str	r3, [r5, #12]
 8012b46:	8823      	ldrh	r3, [r4, #0]
 8012b48:	822b      	strh	r3, [r5, #16]
			strcpy(p->grade,"7B+");
 8012b4a:	687b      	ldr	r3, [r7, #4]
 8012b4c:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8012b50:	4aa0      	ldr	r2, [pc, #640]	; (8012dd4 <problem_fetch+0x11770>)
 8012b52:	6810      	ldr	r0, [r2, #0]
 8012b54:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 8012b56:	687b      	ldr	r3, [r7, #4]
 8012b58:	2207      	movs	r2, #7
 8012b5a:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"C,B,A,F,E,A,I");
 8012b5c:	687b      	ldr	r3, [r7, #4]
 8012b5e:	33a4      	adds	r3, #164	; 0xa4
 8012b60:	4a9d      	ldr	r2, [pc, #628]	; (8012dd8 <problem_fetch+0x11774>)
 8012b62:	461c      	mov	r4, r3
 8012b64:	4613      	mov	r3, r2
 8012b66:	cb07      	ldmia	r3!, {r0, r1, r2}
 8012b68:	6020      	str	r0, [r4, #0]
 8012b6a:	6061      	str	r1, [r4, #4]
 8012b6c:	60a2      	str	r2, [r4, #8]
 8012b6e:	881b      	ldrh	r3, [r3, #0]
 8012b70:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,6,9,11,16,14,18");
 8012b72:	687b      	ldr	r3, [r7, #4]
 8012b74:	3304      	adds	r3, #4
 8012b76:	4a99      	ldr	r2, [pc, #612]	; (8012ddc <problem_fetch+0x11778>)
 8012b78:	461d      	mov	r5, r3
 8012b7a:	4614      	mov	r4, r2
 8012b7c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8012b7e:	6028      	str	r0, [r5, #0]
 8012b80:	6069      	str	r1, [r5, #4]
 8012b82:	60aa      	str	r2, [r5, #8]
 8012b84:	60eb      	str	r3, [r5, #12]
 8012b86:	8823      	ldrh	r3, [r4, #0]
 8012b88:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,s,d,d,d,d,e");
 8012b8a:	687b      	ldr	r3, [r7, #4]
 8012b8c:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8012b90:	4a93      	ldr	r2, [pc, #588]	; (8012de0 <problem_fetch+0x1177c>)
 8012b92:	461c      	mov	r4, r3
 8012b94:	4613      	mov	r3, r2
 8012b96:	cb07      	ldmia	r3!, {r0, r1, r2}
 8012b98:	6020      	str	r0, [r4, #0]
 8012b9a:	6061      	str	r1, [r4, #4]
 8012b9c:	60a2      	str	r2, [r4, #8]
 8012b9e:	881b      	ldrh	r3, [r3, #0]
 8012ba0:	81a3      	strh	r3, [r4, #12]
			break;
 8012ba2:	f009 bc8f 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 510 :
			strcpy(p->name,"BLACK DOJO MINI");
 8012ba6:	687b      	ldr	r3, [r7, #4]
 8012ba8:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8012bac:	4a8d      	ldr	r2, [pc, #564]	; (8012de4 <problem_fetch+0x11780>)
 8012bae:	461c      	mov	r4, r3
 8012bb0:	4615      	mov	r5, r2
 8012bb2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8012bb4:	6020      	str	r0, [r4, #0]
 8012bb6:	6061      	str	r1, [r4, #4]
 8012bb8:	60a2      	str	r2, [r4, #8]
 8012bba:	60e3      	str	r3, [r4, #12]
			strcpy(p->grade,"7A");
 8012bbc:	687b      	ldr	r3, [r7, #4]
 8012bbe:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8012bc2:	4a89      	ldr	r2, [pc, #548]	; (8012de8 <problem_fetch+0x11784>)
 8012bc4:	8811      	ldrh	r1, [r2, #0]
 8012bc6:	7892      	ldrb	r2, [r2, #2]
 8012bc8:	8019      	strh	r1, [r3, #0]
 8012bca:	709a      	strb	r2, [r3, #2]
			p->moveSize = 6;
 8012bcc:	687b      	ldr	r3, [r7, #4]
 8012bce:	2206      	movs	r2, #6
 8012bd0:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,J,F,C,E,A");
 8012bd2:	687b      	ldr	r3, [r7, #4]
 8012bd4:	33a4      	adds	r3, #164	; 0xa4
 8012bd6:	4a85      	ldr	r2, [pc, #532]	; (8012dec <problem_fetch+0x11788>)
 8012bd8:	461c      	mov	r4, r3
 8012bda:	4613      	mov	r3, r2
 8012bdc:	cb07      	ldmia	r3!, {r0, r1, r2}
 8012bde:	6020      	str	r0, [r4, #0]
 8012be0:	6061      	str	r1, [r4, #4]
 8012be2:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"6,5,11,13,16,18");
 8012be4:	687b      	ldr	r3, [r7, #4]
 8012be6:	3304      	adds	r3, #4
 8012be8:	4a81      	ldr	r2, [pc, #516]	; (8012df0 <problem_fetch+0x1178c>)
 8012bea:	461c      	mov	r4, r3
 8012bec:	4615      	mov	r5, r2
 8012bee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8012bf0:	6020      	str	r0, [r4, #0]
 8012bf2:	6061      	str	r1, [r4, #4]
 8012bf4:	60a2      	str	r2, [r4, #8]
 8012bf6:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,s,d,d,d,e");
 8012bf8:	687b      	ldr	r3, [r7, #4]
 8012bfa:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8012bfe:	4a7d      	ldr	r2, [pc, #500]	; (8012df4 <problem_fetch+0x11790>)
 8012c00:	461c      	mov	r4, r3
 8012c02:	4613      	mov	r3, r2
 8012c04:	cb07      	ldmia	r3!, {r0, r1, r2}
 8012c06:	6020      	str	r0, [r4, #0]
 8012c08:	6061      	str	r1, [r4, #4]
 8012c0a:	60a2      	str	r2, [r4, #8]
			break;
 8012c0c:	f009 bc5a 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 511 :
			strcpy(p->name,"ANACONDA MALT LIQUOR");
 8012c10:	687b      	ldr	r3, [r7, #4]
 8012c12:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8012c16:	4a78      	ldr	r2, [pc, #480]	; (8012df8 <problem_fetch+0x11794>)
 8012c18:	461d      	mov	r5, r3
 8012c1a:	4614      	mov	r4, r2
 8012c1c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8012c1e:	6028      	str	r0, [r5, #0]
 8012c20:	6069      	str	r1, [r5, #4]
 8012c22:	60aa      	str	r2, [r5, #8]
 8012c24:	60eb      	str	r3, [r5, #12]
 8012c26:	6820      	ldr	r0, [r4, #0]
 8012c28:	6128      	str	r0, [r5, #16]
 8012c2a:	7923      	ldrb	r3, [r4, #4]
 8012c2c:	752b      	strb	r3, [r5, #20]
			strcpy(p->grade,"6B+");
 8012c2e:	687b      	ldr	r3, [r7, #4]
 8012c30:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8012c34:	4a71      	ldr	r2, [pc, #452]	; (8012dfc <problem_fetch+0x11798>)
 8012c36:	6810      	ldr	r0, [r2, #0]
 8012c38:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 8012c3a:	687b      	ldr	r3, [r7, #4]
 8012c3c:	2206      	movs	r2, #6
 8012c3e:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,J,I,H,E,D");
 8012c40:	687b      	ldr	r3, [r7, #4]
 8012c42:	33a4      	adds	r3, #164	; 0xa4
 8012c44:	4a6e      	ldr	r2, [pc, #440]	; (8012e00 <problem_fetch+0x1179c>)
 8012c46:	461c      	mov	r4, r3
 8012c48:	4613      	mov	r3, r2
 8012c4a:	cb07      	ldmia	r3!, {r0, r1, r2}
 8012c4c:	6020      	str	r0, [r4, #0]
 8012c4e:	6061      	str	r1, [r4, #4]
 8012c50:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,5,14,10,16,18");
 8012c52:	687b      	ldr	r3, [r7, #4]
 8012c54:	3304      	adds	r3, #4
 8012c56:	4a6b      	ldr	r2, [pc, #428]	; (8012e04 <problem_fetch+0x117a0>)
 8012c58:	461c      	mov	r4, r3
 8012c5a:	4615      	mov	r5, r2
 8012c5c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8012c5e:	6020      	str	r0, [r4, #0]
 8012c60:	6061      	str	r1, [r4, #4]
 8012c62:	60a2      	str	r2, [r4, #8]
 8012c64:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,s,d,d,d,e");
 8012c66:	687b      	ldr	r3, [r7, #4]
 8012c68:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8012c6c:	4a61      	ldr	r2, [pc, #388]	; (8012df4 <problem_fetch+0x11790>)
 8012c6e:	461c      	mov	r4, r3
 8012c70:	4613      	mov	r3, r2
 8012c72:	cb07      	ldmia	r3!, {r0, r1, r2}
 8012c74:	6020      	str	r0, [r4, #0]
 8012c76:	6061      	str	r1, [r4, #4]
 8012c78:	60a2      	str	r2, [r4, #8]
			break;
 8012c7a:	f009 bc23 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 512 :
			strcpy(p->name,"GREAT DANE ZANE");
 8012c7e:	687b      	ldr	r3, [r7, #4]
 8012c80:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8012c84:	4a60      	ldr	r2, [pc, #384]	; (8012e08 <problem_fetch+0x117a4>)
 8012c86:	461c      	mov	r4, r3
 8012c88:	4615      	mov	r5, r2
 8012c8a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8012c8c:	6020      	str	r0, [r4, #0]
 8012c8e:	6061      	str	r1, [r4, #4]
 8012c90:	60a2      	str	r2, [r4, #8]
 8012c92:	60e3      	str	r3, [r4, #12]
			strcpy(p->grade,"7A+");
 8012c94:	687b      	ldr	r3, [r7, #4]
 8012c96:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8012c9a:	4a5c      	ldr	r2, [pc, #368]	; (8012e0c <problem_fetch+0x117a8>)
 8012c9c:	6810      	ldr	r0, [r2, #0]
 8012c9e:	6018      	str	r0, [r3, #0]
			p->moveSize = 8;
 8012ca0:	687b      	ldr	r3, [r7, #4]
 8012ca2:	2208      	movs	r2, #8
 8012ca4:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"C,B,F,G,E,B,G,I");
 8012ca6:	687b      	ldr	r3, [r7, #4]
 8012ca8:	33a4      	adds	r3, #164	; 0xa4
 8012caa:	4a59      	ldr	r2, [pc, #356]	; (8012e10 <problem_fetch+0x117ac>)
 8012cac:	461c      	mov	r4, r3
 8012cae:	4615      	mov	r5, r2
 8012cb0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8012cb2:	6020      	str	r0, [r4, #0]
 8012cb4:	6061      	str	r1, [r4, #4]
 8012cb6:	60a2      	str	r2, [r4, #8]
 8012cb8:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,6,13,15,9,12,4,18");
 8012cba:	687b      	ldr	r3, [r7, #4]
 8012cbc:	3304      	adds	r3, #4
 8012cbe:	4a55      	ldr	r2, [pc, #340]	; (8012e14 <problem_fetch+0x117b0>)
 8012cc0:	461d      	mov	r5, r3
 8012cc2:	4614      	mov	r4, r2
 8012cc4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8012cc6:	6028      	str	r0, [r5, #0]
 8012cc8:	6069      	str	r1, [r5, #4]
 8012cca:	60aa      	str	r2, [r5, #8]
 8012ccc:	60eb      	str	r3, [r5, #12]
 8012cce:	6820      	ldr	r0, [r4, #0]
 8012cd0:	6128      	str	r0, [r5, #16]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,e");
 8012cd2:	687b      	ldr	r3, [r7, #4]
 8012cd4:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8012cd8:	4a4f      	ldr	r2, [pc, #316]	; (8012e18 <problem_fetch+0x117b4>)
 8012cda:	461c      	mov	r4, r3
 8012cdc:	4615      	mov	r5, r2
 8012cde:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8012ce0:	6020      	str	r0, [r4, #0]
 8012ce2:	6061      	str	r1, [r4, #4]
 8012ce4:	60a2      	str	r2, [r4, #8]
 8012ce6:	60e3      	str	r3, [r4, #12]
			break;
 8012ce8:	f009 bbec 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 513 :
			strcpy(p->name,"BOULDER AND EMIKO");
 8012cec:	687b      	ldr	r3, [r7, #4]
 8012cee:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8012cf2:	4a4a      	ldr	r2, [pc, #296]	; (8012e1c <problem_fetch+0x117b8>)
 8012cf4:	461d      	mov	r5, r3
 8012cf6:	4614      	mov	r4, r2
 8012cf8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8012cfa:	6028      	str	r0, [r5, #0]
 8012cfc:	6069      	str	r1, [r5, #4]
 8012cfe:	60aa      	str	r2, [r5, #8]
 8012d00:	60eb      	str	r3, [r5, #12]
 8012d02:	8823      	ldrh	r3, [r4, #0]
 8012d04:	822b      	strh	r3, [r5, #16]
			strcpy(p->grade,"6C+");
 8012d06:	687b      	ldr	r3, [r7, #4]
 8012d08:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8012d0c:	4a44      	ldr	r2, [pc, #272]	; (8012e20 <problem_fetch+0x117bc>)
 8012d0e:	6810      	ldr	r0, [r2, #0]
 8012d10:	6018      	str	r0, [r3, #0]
			p->moveSize = 8;
 8012d12:	687b      	ldr	r3, [r7, #4]
 8012d14:	2208      	movs	r2, #8
 8012d16:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,G,E,F,D,I,E,I");
 8012d18:	687b      	ldr	r3, [r7, #4]
 8012d1a:	33a4      	adds	r3, #164	; 0xa4
 8012d1c:	4a41      	ldr	r2, [pc, #260]	; (8012e24 <problem_fetch+0x117c0>)
 8012d1e:	461c      	mov	r4, r3
 8012d20:	4615      	mov	r5, r2
 8012d22:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8012d24:	6020      	str	r0, [r4, #0]
 8012d26:	6061      	str	r1, [r4, #4]
 8012d28:	60a2      	str	r2, [r4, #8]
 8012d2a:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,4,8,11,11,14,14,18");
 8012d2c:	687b      	ldr	r3, [r7, #4]
 8012d2e:	3304      	adds	r3, #4
 8012d30:	4a3d      	ldr	r2, [pc, #244]	; (8012e28 <problem_fetch+0x117c4>)
 8012d32:	461d      	mov	r5, r3
 8012d34:	4614      	mov	r4, r2
 8012d36:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8012d38:	6028      	str	r0, [r5, #0]
 8012d3a:	6069      	str	r1, [r5, #4]
 8012d3c:	60aa      	str	r2, [r5, #8]
 8012d3e:	60eb      	str	r3, [r5, #12]
 8012d40:	6820      	ldr	r0, [r4, #0]
 8012d42:	6128      	str	r0, [r5, #16]
 8012d44:	7923      	ldrb	r3, [r4, #4]
 8012d46:	752b      	strb	r3, [r5, #20]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,e");
 8012d48:	687b      	ldr	r3, [r7, #4]
 8012d4a:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8012d4e:	4a32      	ldr	r2, [pc, #200]	; (8012e18 <problem_fetch+0x117b4>)
 8012d50:	461c      	mov	r4, r3
 8012d52:	4615      	mov	r5, r2
 8012d54:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8012d56:	6020      	str	r0, [r4, #0]
 8012d58:	6061      	str	r1, [r4, #4]
 8012d5a:	60a2      	str	r2, [r4, #8]
 8012d5c:	60e3      	str	r3, [r4, #12]
			break;
 8012d5e:	f009 bbb1 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 514 :
			strcpy(p->name,"MORNING SHAKE");
 8012d62:	687b      	ldr	r3, [r7, #4]
 8012d64:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8012d68:	4a30      	ldr	r2, [pc, #192]	; (8012e2c <problem_fetch+0x117c8>)
 8012d6a:	461c      	mov	r4, r3
 8012d6c:	4613      	mov	r3, r2
 8012d6e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8012d70:	6020      	str	r0, [r4, #0]
 8012d72:	6061      	str	r1, [r4, #4]
 8012d74:	60a2      	str	r2, [r4, #8]
 8012d76:	881b      	ldrh	r3, [r3, #0]
 8012d78:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade,"6C+");
 8012d7a:	687b      	ldr	r3, [r7, #4]
 8012d7c:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8012d80:	4a27      	ldr	r2, [pc, #156]	; (8012e20 <problem_fetch+0x117bc>)
 8012d82:	6810      	ldr	r0, [r2, #0]
 8012d84:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 8012d86:	687b      	ldr	r3, [r7, #4]
 8012d88:	2206      	movs	r2, #6
 8012d8a:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,E,E,B,D,D");
 8012d8c:	687b      	ldr	r3, [r7, #4]
 8012d8e:	33a4      	adds	r3, #164	; 0xa4
 8012d90:	4a27      	ldr	r2, [pc, #156]	; (8012e30 <problem_fetch+0x117cc>)
 8012d92:	461c      	mov	r4, r3
 8012d94:	4613      	mov	r3, r2
 8012d96:	cb07      	ldmia	r3!, {r0, r1, r2}
 8012d98:	6020      	str	r0, [r4, #0]
 8012d9a:	6061      	str	r1, [r4, #4]
 8012d9c:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,8,9,12,15,18");
 8012d9e:	687b      	ldr	r3, [r7, #4]
 8012da0:	3304      	adds	r3, #4
 8012da2:	4a24      	ldr	r2, [pc, #144]	; (8012e34 <problem_fetch+0x117d0>)
 8012da4:	461c      	mov	r4, r3
 8012da6:	4613      	mov	r3, r2
 8012da8:	cb07      	ldmia	r3!, {r0, r1, r2}
 8012daa:	6020      	str	r0, [r4, #0]
 8012dac:	6061      	str	r1, [r4, #4]
 8012dae:	60a2      	str	r2, [r4, #8]
 8012db0:	881a      	ldrh	r2, [r3, #0]
 8012db2:	789b      	ldrb	r3, [r3, #2]
 8012db4:	81a2      	strh	r2, [r4, #12]
 8012db6:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 8012db8:	687b      	ldr	r3, [r7, #4]
 8012dba:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8012dbe:	4a1e      	ldr	r2, [pc, #120]	; (8012e38 <problem_fetch+0x117d4>)
 8012dc0:	461c      	mov	r4, r3
 8012dc2:	4613      	mov	r3, r2
 8012dc4:	cb07      	ldmia	r3!, {r0, r1, r2}
 8012dc6:	6020      	str	r0, [r4, #0]
 8012dc8:	6061      	str	r1, [r4, #4]
 8012dca:	60a2      	str	r2, [r4, #8]
			break;
 8012dcc:	f009 bb7a 	b.w	801c4c4 <problem_fetch+0x1ae60>
 8012dd0:	08029cd4 	.word	0x08029cd4
 8012dd4:	08023c60 	.word	0x08023c60
 8012dd8:	08029ce8 	.word	0x08029ce8
 8012ddc:	08029cf8 	.word	0x08029cf8
 8012de0:	08023b9c 	.word	0x08023b9c
 8012de4:	08029d0c 	.word	0x08029d0c
 8012de8:	08023ae4 	.word	0x08023ae4
 8012dec:	08029d1c 	.word	0x08029d1c
 8012df0:	08029d28 	.word	0x08029d28
 8012df4:	08023b04 	.word	0x08023b04
 8012df8:	08029d38 	.word	0x08029d38
 8012dfc:	08023b24 	.word	0x08023b24
 8012e00:	08029d50 	.word	0x08029d50
 8012e04:	08029d5c 	.word	0x08029d5c
 8012e08:	08029d6c 	.word	0x08029d6c
 8012e0c:	08023cc4 	.word	0x08023cc4
 8012e10:	08029d7c 	.word	0x08029d7c
 8012e14:	08029d8c 	.word	0x08029d8c
 8012e18:	08023c48 	.word	0x08023c48
 8012e1c:	08029da0 	.word	0x08029da0
 8012e20:	08023bbc 	.word	0x08023bbc
 8012e24:	08029db4 	.word	0x08029db4
 8012e28:	08029dc4 	.word	0x08029dc4
 8012e2c:	08029ddc 	.word	0x08029ddc
 8012e30:	08029dec 	.word	0x08029dec
 8012e34:	08029df8 	.word	0x08029df8
 8012e38:	08023ec0 	.word	0x08023ec0
		case 515 :
			strcpy(p->name,"YAY POCKETS!");
 8012e3c:	687b      	ldr	r3, [r7, #4]
 8012e3e:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8012e42:	4aa8      	ldr	r2, [pc, #672]	; (80130e4 <problem_fetch+0x11a80>)
 8012e44:	461c      	mov	r4, r3
 8012e46:	4613      	mov	r3, r2
 8012e48:	cb07      	ldmia	r3!, {r0, r1, r2}
 8012e4a:	6020      	str	r0, [r4, #0]
 8012e4c:	6061      	str	r1, [r4, #4]
 8012e4e:	60a2      	str	r2, [r4, #8]
 8012e50:	781b      	ldrb	r3, [r3, #0]
 8012e52:	7323      	strb	r3, [r4, #12]
			strcpy(p->grade,"6C");
 8012e54:	687b      	ldr	r3, [r7, #4]
 8012e56:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8012e5a:	4aa3      	ldr	r2, [pc, #652]	; (80130e8 <problem_fetch+0x11a84>)
 8012e5c:	8811      	ldrh	r1, [r2, #0]
 8012e5e:	7892      	ldrb	r2, [r2, #2]
 8012e60:	8019      	strh	r1, [r3, #0]
 8012e62:	709a      	strb	r2, [r3, #2]
			p->moveSize = 7;
 8012e64:	687b      	ldr	r3, [r7, #4]
 8012e66:	2207      	movs	r2, #7
 8012e68:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"B,C,E,B,E,B,D");
 8012e6a:	687b      	ldr	r3, [r7, #4]
 8012e6c:	33a4      	adds	r3, #164	; 0xa4
 8012e6e:	4a9f      	ldr	r2, [pc, #636]	; (80130ec <problem_fetch+0x11a88>)
 8012e70:	461c      	mov	r4, r3
 8012e72:	4613      	mov	r3, r2
 8012e74:	cb07      	ldmia	r3!, {r0, r1, r2}
 8012e76:	6020      	str	r0, [r4, #0]
 8012e78:	6061      	str	r1, [r4, #4]
 8012e7a:	60a2      	str	r2, [r4, #8]
 8012e7c:	881b      	ldrh	r3, [r3, #0]
 8012e7e:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"6,5,8,10,12,15,18");
 8012e80:	687b      	ldr	r3, [r7, #4]
 8012e82:	3304      	adds	r3, #4
 8012e84:	4a9a      	ldr	r2, [pc, #616]	; (80130f0 <problem_fetch+0x11a8c>)
 8012e86:	461d      	mov	r5, r3
 8012e88:	4614      	mov	r4, r2
 8012e8a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8012e8c:	6028      	str	r0, [r5, #0]
 8012e8e:	6069      	str	r1, [r5, #4]
 8012e90:	60aa      	str	r2, [r5, #8]
 8012e92:	60eb      	str	r3, [r5, #12]
 8012e94:	8823      	ldrh	r3, [r4, #0]
 8012e96:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,s,d,d,d,d,e");
 8012e98:	687b      	ldr	r3, [r7, #4]
 8012e9a:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8012e9e:	4a95      	ldr	r2, [pc, #596]	; (80130f4 <problem_fetch+0x11a90>)
 8012ea0:	461c      	mov	r4, r3
 8012ea2:	4613      	mov	r3, r2
 8012ea4:	cb07      	ldmia	r3!, {r0, r1, r2}
 8012ea6:	6020      	str	r0, [r4, #0]
 8012ea8:	6061      	str	r1, [r4, #4]
 8012eaa:	60a2      	str	r2, [r4, #8]
 8012eac:	881b      	ldrh	r3, [r3, #0]
 8012eae:	81a3      	strh	r3, [r4, #12]
			break;
 8012eb0:	f009 bb08 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 516 :
			strcpy(p->name,"SEX LANCHEZ");
 8012eb4:	687b      	ldr	r3, [r7, #4]
 8012eb6:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8012eba:	4a8f      	ldr	r2, [pc, #572]	; (80130f8 <problem_fetch+0x11a94>)
 8012ebc:	461c      	mov	r4, r3
 8012ebe:	4613      	mov	r3, r2
 8012ec0:	cb07      	ldmia	r3!, {r0, r1, r2}
 8012ec2:	6020      	str	r0, [r4, #0]
 8012ec4:	6061      	str	r1, [r4, #4]
 8012ec6:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade,"7C+");
 8012ec8:	687b      	ldr	r3, [r7, #4]
 8012eca:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8012ece:	4a8b      	ldr	r2, [pc, #556]	; (80130fc <problem_fetch+0x11a98>)
 8012ed0:	6810      	ldr	r0, [r2, #0]
 8012ed2:	6018      	str	r0, [r3, #0]
			p->moveSize = 4;
 8012ed4:	687b      	ldr	r3, [r7, #4]
 8012ed6:	2204      	movs	r2, #4
 8012ed8:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,E,G,D");
 8012eda:	687b      	ldr	r3, [r7, #4]
 8012edc:	33a4      	adds	r3, #164	; 0xa4
 8012ede:	4988      	ldr	r1, [pc, #544]	; (8013100 <problem_fetch+0x11a9c>)
 8012ee0:	461a      	mov	r2, r3
 8012ee2:	460b      	mov	r3, r1
 8012ee4:	cb03      	ldmia	r3!, {r0, r1}
 8012ee6:	6010      	str	r0, [r2, #0]
 8012ee8:	6051      	str	r1, [r2, #4]
			strcpy(p->moveNumbers,"4,8,14,18");
 8012eea:	687b      	ldr	r3, [r7, #4]
 8012eec:	3304      	adds	r3, #4
 8012eee:	4985      	ldr	r1, [pc, #532]	; (8013104 <problem_fetch+0x11aa0>)
 8012ef0:	461a      	mov	r2, r3
 8012ef2:	460b      	mov	r3, r1
 8012ef4:	cb03      	ldmia	r3!, {r0, r1}
 8012ef6:	6010      	str	r0, [r2, #0]
 8012ef8:	6051      	str	r1, [r2, #4]
 8012efa:	881b      	ldrh	r3, [r3, #0]
 8012efc:	8113      	strh	r3, [r2, #8]
			strcpy(p->startFinish,"s,d,d,e");
 8012efe:	687b      	ldr	r3, [r7, #4]
 8012f00:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8012f04:	4980      	ldr	r1, [pc, #512]	; (8013108 <problem_fetch+0x11aa4>)
 8012f06:	461a      	mov	r2, r3
 8012f08:	460b      	mov	r3, r1
 8012f0a:	cb03      	ldmia	r3!, {r0, r1}
 8012f0c:	6010      	str	r0, [r2, #0]
 8012f0e:	6051      	str	r1, [r2, #4]
			break;
 8012f10:	f009 bad8 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 517 :
			strcpy(p->name,"BOUNCE EZ");
 8012f14:	687b      	ldr	r3, [r7, #4]
 8012f16:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8012f1a:	497c      	ldr	r1, [pc, #496]	; (801310c <problem_fetch+0x11aa8>)
 8012f1c:	461a      	mov	r2, r3
 8012f1e:	460b      	mov	r3, r1
 8012f20:	cb03      	ldmia	r3!, {r0, r1}
 8012f22:	6010      	str	r0, [r2, #0]
 8012f24:	6051      	str	r1, [r2, #4]
 8012f26:	881b      	ldrh	r3, [r3, #0]
 8012f28:	8113      	strh	r3, [r2, #8]
			strcpy(p->grade,"6C+");
 8012f2a:	687b      	ldr	r3, [r7, #4]
 8012f2c:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8012f30:	4a77      	ldr	r2, [pc, #476]	; (8013110 <problem_fetch+0x11aac>)
 8012f32:	6810      	ldr	r0, [r2, #0]
 8012f34:	6018      	str	r0, [r3, #0]
			p->moveSize = 5;
 8012f36:	687b      	ldr	r3, [r7, #4]
 8012f38:	2205      	movs	r2, #5
 8012f3a:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"E,J,H,C,D");
 8012f3c:	687b      	ldr	r3, [r7, #4]
 8012f3e:	33a4      	adds	r3, #164	; 0xa4
 8012f40:	4974      	ldr	r1, [pc, #464]	; (8013114 <problem_fetch+0x11ab0>)
 8012f42:	461a      	mov	r2, r3
 8012f44:	460b      	mov	r3, r1
 8012f46:	cb03      	ldmia	r3!, {r0, r1}
 8012f48:	6010      	str	r0, [r2, #0]
 8012f4a:	6051      	str	r1, [r2, #4]
 8012f4c:	881b      	ldrh	r3, [r3, #0]
 8012f4e:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"6,5,10,13,18");
 8012f50:	687b      	ldr	r3, [r7, #4]
 8012f52:	3304      	adds	r3, #4
 8012f54:	4a70      	ldr	r2, [pc, #448]	; (8013118 <problem_fetch+0x11ab4>)
 8012f56:	461c      	mov	r4, r3
 8012f58:	4613      	mov	r3, r2
 8012f5a:	cb07      	ldmia	r3!, {r0, r1, r2}
 8012f5c:	6020      	str	r0, [r4, #0]
 8012f5e:	6061      	str	r1, [r4, #4]
 8012f60:	60a2      	str	r2, [r4, #8]
 8012f62:	781b      	ldrb	r3, [r3, #0]
 8012f64:	7323      	strb	r3, [r4, #12]
			strcpy(p->startFinish,"s,s,d,d,e");
 8012f66:	687b      	ldr	r3, [r7, #4]
 8012f68:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8012f6c:	496b      	ldr	r1, [pc, #428]	; (801311c <problem_fetch+0x11ab8>)
 8012f6e:	461a      	mov	r2, r3
 8012f70:	460b      	mov	r3, r1
 8012f72:	cb03      	ldmia	r3!, {r0, r1}
 8012f74:	6010      	str	r0, [r2, #0]
 8012f76:	6051      	str	r1, [r2, #4]
 8012f78:	881b      	ldrh	r3, [r3, #0]
 8012f7a:	8113      	strh	r3, [r2, #8]
			break;
 8012f7c:	f009 baa2 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 518 :
			strcpy(p->name,"WARM UP A6");
 8012f80:	687b      	ldr	r3, [r7, #4]
 8012f82:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8012f86:	4966      	ldr	r1, [pc, #408]	; (8013120 <problem_fetch+0x11abc>)
 8012f88:	461a      	mov	r2, r3
 8012f8a:	460b      	mov	r3, r1
 8012f8c:	cb03      	ldmia	r3!, {r0, r1}
 8012f8e:	6010      	str	r0, [r2, #0]
 8012f90:	6051      	str	r1, [r2, #4]
 8012f92:	8819      	ldrh	r1, [r3, #0]
 8012f94:	789b      	ldrb	r3, [r3, #2]
 8012f96:	8111      	strh	r1, [r2, #8]
 8012f98:	7293      	strb	r3, [r2, #10]
			strcpy(p->grade,"6B+");
 8012f9a:	687b      	ldr	r3, [r7, #4]
 8012f9c:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8012fa0:	4a60      	ldr	r2, [pc, #384]	; (8013124 <problem_fetch+0x11ac0>)
 8012fa2:	6810      	ldr	r0, [r2, #0]
 8012fa4:	6018      	str	r0, [r3, #0]
			p->moveSize = 5;
 8012fa6:	687b      	ldr	r3, [r7, #4]
 8012fa8:	2205      	movs	r2, #5
 8012faa:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,J,I,I,I");
 8012fac:	687b      	ldr	r3, [r7, #4]
 8012fae:	33a4      	adds	r3, #164	; 0xa4
 8012fb0:	495d      	ldr	r1, [pc, #372]	; (8013128 <problem_fetch+0x11ac4>)
 8012fb2:	461a      	mov	r2, r3
 8012fb4:	460b      	mov	r3, r1
 8012fb6:	cb03      	ldmia	r3!, {r0, r1}
 8012fb8:	6010      	str	r0, [r2, #0]
 8012fba:	6051      	str	r1, [r2, #4]
 8012fbc:	881b      	ldrh	r3, [r3, #0]
 8012fbe:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"4,7,10,14,18");
 8012fc0:	687b      	ldr	r3, [r7, #4]
 8012fc2:	3304      	adds	r3, #4
 8012fc4:	4a59      	ldr	r2, [pc, #356]	; (801312c <problem_fetch+0x11ac8>)
 8012fc6:	461c      	mov	r4, r3
 8012fc8:	4613      	mov	r3, r2
 8012fca:	cb07      	ldmia	r3!, {r0, r1, r2}
 8012fcc:	6020      	str	r0, [r4, #0]
 8012fce:	6061      	str	r1, [r4, #4]
 8012fd0:	60a2      	str	r2, [r4, #8]
 8012fd2:	781b      	ldrb	r3, [r3, #0]
 8012fd4:	7323      	strb	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,e");
 8012fd6:	687b      	ldr	r3, [r7, #4]
 8012fd8:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8012fdc:	4954      	ldr	r1, [pc, #336]	; (8013130 <problem_fetch+0x11acc>)
 8012fde:	461a      	mov	r2, r3
 8012fe0:	460b      	mov	r3, r1
 8012fe2:	cb03      	ldmia	r3!, {r0, r1}
 8012fe4:	6010      	str	r0, [r2, #0]
 8012fe6:	6051      	str	r1, [r2, #4]
 8012fe8:	881b      	ldrh	r3, [r3, #0]
 8012fea:	8113      	strh	r3, [r2, #8]
			break;
 8012fec:	f009 ba6a 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 519 :
			strcpy(p->name,"L'UOMO BISATTA");
 8012ff0:	687b      	ldr	r3, [r7, #4]
 8012ff2:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8012ff6:	4a4f      	ldr	r2, [pc, #316]	; (8013134 <problem_fetch+0x11ad0>)
 8012ff8:	461c      	mov	r4, r3
 8012ffa:	4613      	mov	r3, r2
 8012ffc:	cb07      	ldmia	r3!, {r0, r1, r2}
 8012ffe:	6020      	str	r0, [r4, #0]
 8013000:	6061      	str	r1, [r4, #4]
 8013002:	60a2      	str	r2, [r4, #8]
 8013004:	881a      	ldrh	r2, [r3, #0]
 8013006:	789b      	ldrb	r3, [r3, #2]
 8013008:	81a2      	strh	r2, [r4, #12]
 801300a:	73a3      	strb	r3, [r4, #14]
			strcpy(p->grade,"7B");
 801300c:	687b      	ldr	r3, [r7, #4]
 801300e:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8013012:	4a49      	ldr	r2, [pc, #292]	; (8013138 <problem_fetch+0x11ad4>)
 8013014:	8811      	ldrh	r1, [r2, #0]
 8013016:	7892      	ldrb	r2, [r2, #2]
 8013018:	8019      	strh	r1, [r3, #0]
 801301a:	709a      	strb	r2, [r3, #2]
			p->moveSize = 7;
 801301c:	687b      	ldr	r3, [r7, #4]
 801301e:	2207      	movs	r2, #7
 8013020:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,G,G,H,C,H,D");
 8013022:	687b      	ldr	r3, [r7, #4]
 8013024:	33a4      	adds	r3, #164	; 0xa4
 8013026:	4a45      	ldr	r2, [pc, #276]	; (801313c <problem_fetch+0x11ad8>)
 8013028:	461c      	mov	r4, r3
 801302a:	4613      	mov	r3, r2
 801302c:	cb07      	ldmia	r3!, {r0, r1, r2}
 801302e:	6020      	str	r0, [r4, #0]
 8013030:	6061      	str	r1, [r4, #4]
 8013032:	60a2      	str	r2, [r4, #8]
 8013034:	881b      	ldrh	r3, [r3, #0]
 8013036:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,6,9,12,8,16,18");
 8013038:	687b      	ldr	r3, [r7, #4]
 801303a:	3304      	adds	r3, #4
 801303c:	4a40      	ldr	r2, [pc, #256]	; (8013140 <problem_fetch+0x11adc>)
 801303e:	461d      	mov	r5, r3
 8013040:	4614      	mov	r4, r2
 8013042:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8013044:	6028      	str	r0, [r5, #0]
 8013046:	6069      	str	r1, [r5, #4]
 8013048:	60aa      	str	r2, [r5, #8]
 801304a:	60eb      	str	r3, [r5, #12]
 801304c:	7823      	ldrb	r3, [r4, #0]
 801304e:	742b      	strb	r3, [r5, #16]
			strcpy(p->startFinish,"s,s,d,d,d,d,e");
 8013050:	687b      	ldr	r3, [r7, #4]
 8013052:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8013056:	4a27      	ldr	r2, [pc, #156]	; (80130f4 <problem_fetch+0x11a90>)
 8013058:	461c      	mov	r4, r3
 801305a:	4613      	mov	r3, r2
 801305c:	cb07      	ldmia	r3!, {r0, r1, r2}
 801305e:	6020      	str	r0, [r4, #0]
 8013060:	6061      	str	r1, [r4, #4]
 8013062:	60a2      	str	r2, [r4, #8]
 8013064:	881b      	ldrh	r3, [r3, #0]
 8013066:	81a3      	strh	r3, [r4, #12]
			break;
 8013068:	f009 ba2c 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 520 :
			strcpy(p->name,"PONTUSBADET 2");
 801306c:	687b      	ldr	r3, [r7, #4]
 801306e:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8013072:	4a34      	ldr	r2, [pc, #208]	; (8013144 <problem_fetch+0x11ae0>)
 8013074:	461c      	mov	r4, r3
 8013076:	4613      	mov	r3, r2
 8013078:	cb07      	ldmia	r3!, {r0, r1, r2}
 801307a:	6020      	str	r0, [r4, #0]
 801307c:	6061      	str	r1, [r4, #4]
 801307e:	60a2      	str	r2, [r4, #8]
 8013080:	881b      	ldrh	r3, [r3, #0]
 8013082:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade,"6C");
 8013084:	687b      	ldr	r3, [r7, #4]
 8013086:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801308a:	4a17      	ldr	r2, [pc, #92]	; (80130e8 <problem_fetch+0x11a84>)
 801308c:	8811      	ldrh	r1, [r2, #0]
 801308e:	7892      	ldrb	r2, [r2, #2]
 8013090:	8019      	strh	r1, [r3, #0]
 8013092:	709a      	strb	r2, [r3, #2]
			p->moveSize = 8;
 8013094:	687b      	ldr	r3, [r7, #4]
 8013096:	2208      	movs	r2, #8
 8013098:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,E,E,C,I,G,G,D");
 801309a:	687b      	ldr	r3, [r7, #4]
 801309c:	33a4      	adds	r3, #164	; 0xa4
 801309e:	4a2a      	ldr	r2, [pc, #168]	; (8013148 <problem_fetch+0x11ae4>)
 80130a0:	461c      	mov	r4, r3
 80130a2:	4615      	mov	r5, r2
 80130a4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80130a6:	6020      	str	r0, [r4, #0]
 80130a8:	6061      	str	r1, [r4, #4]
 80130aa:	60a2      	str	r2, [r4, #8]
 80130ac:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,8,12,13,14,15,17,18");
 80130ae:	687b      	ldr	r3, [r7, #4]
 80130b0:	3304      	adds	r3, #4
 80130b2:	4a26      	ldr	r2, [pc, #152]	; (801314c <problem_fetch+0x11ae8>)
 80130b4:	461d      	mov	r5, r3
 80130b6:	4614      	mov	r4, r2
 80130b8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80130ba:	6028      	str	r0, [r5, #0]
 80130bc:	6069      	str	r1, [r5, #4]
 80130be:	60aa      	str	r2, [r5, #8]
 80130c0:	60eb      	str	r3, [r5, #12]
 80130c2:	6820      	ldr	r0, [r4, #0]
 80130c4:	6128      	str	r0, [r5, #16]
 80130c6:	88a3      	ldrh	r3, [r4, #4]
 80130c8:	82ab      	strh	r3, [r5, #20]
			strcpy(p->startFinish,"s,d,d,d,d,d,d,e");
 80130ca:	687b      	ldr	r3, [r7, #4]
 80130cc:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 80130d0:	4a1f      	ldr	r2, [pc, #124]	; (8013150 <problem_fetch+0x11aec>)
 80130d2:	461c      	mov	r4, r3
 80130d4:	4615      	mov	r5, r2
 80130d6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80130d8:	6020      	str	r0, [r4, #0]
 80130da:	6061      	str	r1, [r4, #4]
 80130dc:	60a2      	str	r2, [r4, #8]
 80130de:	60e3      	str	r3, [r4, #12]
			break;
 80130e0:	f009 b9f0 	b.w	801c4c4 <problem_fetch+0x1ae60>
 80130e4:	08029e08 	.word	0x08029e08
 80130e8:	08023bf0 	.word	0x08023bf0
 80130ec:	08029e18 	.word	0x08029e18
 80130f0:	08029e28 	.word	0x08029e28
 80130f4:	08023b9c 	.word	0x08023b9c
 80130f8:	08029e3c 	.word	0x08029e3c
 80130fc:	08024130 	.word	0x08024130
 8013100:	08029e48 	.word	0x08029e48
 8013104:	08029e50 	.word	0x08029e50
 8013108:	08023c78 	.word	0x08023c78
 801310c:	08029e5c 	.word	0x08029e5c
 8013110:	08023bbc 	.word	0x08023bbc
 8013114:	08029e68 	.word	0x08029e68
 8013118:	08024400 	.word	0x08024400
 801311c:	08024204 	.word	0x08024204
 8013120:	08029e74 	.word	0x08029e74
 8013124:	08023b24 	.word	0x08023b24
 8013128:	08029e80 	.word	0x08029e80
 801312c:	08029e8c 	.word	0x08029e8c
 8013130:	08023ff0 	.word	0x08023ff0
 8013134:	08029e9c 	.word	0x08029e9c
 8013138:	0802421c 	.word	0x0802421c
 801313c:	08029eac 	.word	0x08029eac
 8013140:	08029ebc 	.word	0x08029ebc
 8013144:	08029ed0 	.word	0x08029ed0
 8013148:	08029ee0 	.word	0x08029ee0
 801314c:	08029ef0 	.word	0x08029ef0
 8013150:	08023d34 	.word	0x08023d34
		case 521 :
			strcpy(p->name,"ROSA PARKS");
 8013154:	687b      	ldr	r3, [r7, #4]
 8013156:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801315a:	49c3      	ldr	r1, [pc, #780]	; (8013468 <problem_fetch+0x11e04>)
 801315c:	461a      	mov	r2, r3
 801315e:	460b      	mov	r3, r1
 8013160:	cb03      	ldmia	r3!, {r0, r1}
 8013162:	6010      	str	r0, [r2, #0]
 8013164:	6051      	str	r1, [r2, #4]
 8013166:	8819      	ldrh	r1, [r3, #0]
 8013168:	789b      	ldrb	r3, [r3, #2]
 801316a:	8111      	strh	r1, [r2, #8]
 801316c:	7293      	strb	r3, [r2, #10]
			strcpy(p->grade,"6C");
 801316e:	687b      	ldr	r3, [r7, #4]
 8013170:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8013174:	4abd      	ldr	r2, [pc, #756]	; (801346c <problem_fetch+0x11e08>)
 8013176:	8811      	ldrh	r1, [r2, #0]
 8013178:	7892      	ldrb	r2, [r2, #2]
 801317a:	8019      	strh	r1, [r3, #0]
 801317c:	709a      	strb	r2, [r3, #2]
			p->moveSize = 7;
 801317e:	687b      	ldr	r3, [r7, #4]
 8013180:	2207      	movs	r2, #7
 8013182:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,J,D,C,H,G,A");
 8013184:	687b      	ldr	r3, [r7, #4]
 8013186:	33a4      	adds	r3, #164	; 0xa4
 8013188:	4ab9      	ldr	r2, [pc, #740]	; (8013470 <problem_fetch+0x11e0c>)
 801318a:	461c      	mov	r4, r3
 801318c:	4613      	mov	r3, r2
 801318e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8013190:	6020      	str	r0, [r4, #0]
 8013192:	6061      	str	r1, [r4, #4]
 8013194:	60a2      	str	r2, [r4, #8]
 8013196:	881b      	ldrh	r3, [r3, #0]
 8013198:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,7,15,13,10,9,18");
 801319a:	687b      	ldr	r3, [r7, #4]
 801319c:	3304      	adds	r3, #4
 801319e:	4ab5      	ldr	r2, [pc, #724]	; (8013474 <problem_fetch+0x11e10>)
 80131a0:	461d      	mov	r5, r3
 80131a2:	4614      	mov	r4, r2
 80131a4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80131a6:	6028      	str	r0, [r5, #0]
 80131a8:	6069      	str	r1, [r5, #4]
 80131aa:	60aa      	str	r2, [r5, #8]
 80131ac:	60eb      	str	r3, [r5, #12]
 80131ae:	8823      	ldrh	r3, [r4, #0]
 80131b0:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 80131b2:	687b      	ldr	r3, [r7, #4]
 80131b4:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 80131b8:	4aaf      	ldr	r2, [pc, #700]	; (8013478 <problem_fetch+0x11e14>)
 80131ba:	461c      	mov	r4, r3
 80131bc:	4613      	mov	r3, r2
 80131be:	cb07      	ldmia	r3!, {r0, r1, r2}
 80131c0:	6020      	str	r0, [r4, #0]
 80131c2:	6061      	str	r1, [r4, #4]
 80131c4:	60a2      	str	r2, [r4, #8]
 80131c6:	881b      	ldrh	r3, [r3, #0]
 80131c8:	81a3      	strh	r3, [r4, #12]
			break;
 80131ca:	f009 b97b 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 522 :
			strcpy(p->name,"PONTUSBADET");
 80131ce:	687b      	ldr	r3, [r7, #4]
 80131d0:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80131d4:	4aa9      	ldr	r2, [pc, #676]	; (801347c <problem_fetch+0x11e18>)
 80131d6:	461c      	mov	r4, r3
 80131d8:	4613      	mov	r3, r2
 80131da:	cb07      	ldmia	r3!, {r0, r1, r2}
 80131dc:	6020      	str	r0, [r4, #0]
 80131de:	6061      	str	r1, [r4, #4]
 80131e0:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade,"7A");
 80131e2:	687b      	ldr	r3, [r7, #4]
 80131e4:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80131e8:	4aa5      	ldr	r2, [pc, #660]	; (8013480 <problem_fetch+0x11e1c>)
 80131ea:	8811      	ldrh	r1, [r2, #0]
 80131ec:	7892      	ldrb	r2, [r2, #2]
 80131ee:	8019      	strh	r1, [r3, #0]
 80131f0:	709a      	strb	r2, [r3, #2]
			p->moveSize = 7;
 80131f2:	687b      	ldr	r3, [r7, #4]
 80131f4:	2207      	movs	r2, #7
 80131f6:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,E,I,H,J,H,I");
 80131f8:	687b      	ldr	r3, [r7, #4]
 80131fa:	33a4      	adds	r3, #164	; 0xa4
 80131fc:	4aa1      	ldr	r2, [pc, #644]	; (8013484 <problem_fetch+0x11e20>)
 80131fe:	461c      	mov	r4, r3
 8013200:	4613      	mov	r3, r2
 8013202:	cb07      	ldmia	r3!, {r0, r1, r2}
 8013204:	6020      	str	r0, [r4, #0]
 8013206:	6061      	str	r1, [r4, #4]
 8013208:	60a2      	str	r2, [r4, #8]
 801320a:	881b      	ldrh	r3, [r3, #0]
 801320c:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,8,9,12,12,16,18");
 801320e:	687b      	ldr	r3, [r7, #4]
 8013210:	3304      	adds	r3, #4
 8013212:	4a9d      	ldr	r2, [pc, #628]	; (8013488 <problem_fetch+0x11e24>)
 8013214:	461d      	mov	r5, r3
 8013216:	4614      	mov	r4, r2
 8013218:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801321a:	6028      	str	r0, [r5, #0]
 801321c:	6069      	str	r1, [r5, #4]
 801321e:	60aa      	str	r2, [r5, #8]
 8013220:	60eb      	str	r3, [r5, #12]
 8013222:	8823      	ldrh	r3, [r4, #0]
 8013224:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 8013226:	687b      	ldr	r3, [r7, #4]
 8013228:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 801322c:	4a92      	ldr	r2, [pc, #584]	; (8013478 <problem_fetch+0x11e14>)
 801322e:	461c      	mov	r4, r3
 8013230:	4613      	mov	r3, r2
 8013232:	cb07      	ldmia	r3!, {r0, r1, r2}
 8013234:	6020      	str	r0, [r4, #0]
 8013236:	6061      	str	r1, [r4, #4]
 8013238:	60a2      	str	r2, [r4, #8]
 801323a:	881b      	ldrh	r3, [r3, #0]
 801323c:	81a3      	strh	r3, [r4, #12]
			break;
 801323e:	f009 b941 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 523 :
			strcpy(p->name,"FORSØK 25");
 8013242:	687b      	ldr	r3, [r7, #4]
 8013244:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8013248:	4990      	ldr	r1, [pc, #576]	; (801348c <problem_fetch+0x11e28>)
 801324a:	461a      	mov	r2, r3
 801324c:	460b      	mov	r3, r1
 801324e:	cb03      	ldmia	r3!, {r0, r1}
 8013250:	6010      	str	r0, [r2, #0]
 8013252:	6051      	str	r1, [r2, #4]
 8013254:	8819      	ldrh	r1, [r3, #0]
 8013256:	789b      	ldrb	r3, [r3, #2]
 8013258:	8111      	strh	r1, [r2, #8]
 801325a:	7293      	strb	r3, [r2, #10]
			strcpy(p->grade,"6B+");
 801325c:	687b      	ldr	r3, [r7, #4]
 801325e:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8013262:	4a8b      	ldr	r2, [pc, #556]	; (8013490 <problem_fetch+0x11e2c>)
 8013264:	6810      	ldr	r0, [r2, #0]
 8013266:	6018      	str	r0, [r3, #0]
			p->moveSize = 8;
 8013268:	687b      	ldr	r3, [r7, #4]
 801326a:	2208      	movs	r2, #8
 801326c:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"A,C,D,E,E,E,H,J");
 801326e:	687b      	ldr	r3, [r7, #4]
 8013270:	33a4      	adds	r3, #164	; 0xa4
 8013272:	4a88      	ldr	r2, [pc, #544]	; (8013494 <problem_fetch+0x11e30>)
 8013274:	461c      	mov	r4, r3
 8013276:	4615      	mov	r5, r2
 8013278:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801327a:	6020      	str	r0, [r4, #0]
 801327c:	6061      	str	r1, [r4, #4]
 801327e:	60a2      	str	r2, [r4, #8]
 8013280:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"14,5,18,6,8,12,8,5");
 8013282:	687b      	ldr	r3, [r7, #4]
 8013284:	3304      	adds	r3, #4
 8013286:	4a84      	ldr	r2, [pc, #528]	; (8013498 <problem_fetch+0x11e34>)
 8013288:	461d      	mov	r5, r3
 801328a:	4614      	mov	r4, r2
 801328c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801328e:	6028      	str	r0, [r5, #0]
 8013290:	6069      	str	r1, [r5, #4]
 8013292:	60aa      	str	r2, [r5, #8]
 8013294:	60eb      	str	r3, [r5, #12]
 8013296:	8823      	ldrh	r3, [r4, #0]
 8013298:	78a2      	ldrb	r2, [r4, #2]
 801329a:	822b      	strh	r3, [r5, #16]
 801329c:	4613      	mov	r3, r2
 801329e:	74ab      	strb	r3, [r5, #18]
			strcpy(p->startFinish,"d,s,e,s,d,d,d,d");
 80132a0:	687b      	ldr	r3, [r7, #4]
 80132a2:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 80132a6:	4a7d      	ldr	r2, [pc, #500]	; (801349c <problem_fetch+0x11e38>)
 80132a8:	461c      	mov	r4, r3
 80132aa:	4615      	mov	r5, r2
 80132ac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80132ae:	6020      	str	r0, [r4, #0]
 80132b0:	6061      	str	r1, [r4, #4]
 80132b2:	60a2      	str	r2, [r4, #8]
 80132b4:	60e3      	str	r3, [r4, #12]
			break;
 80132b6:	f009 b905 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 524 :
			strcpy(p->name,"S1");
 80132ba:	687b      	ldr	r3, [r7, #4]
 80132bc:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80132c0:	4a77      	ldr	r2, [pc, #476]	; (80134a0 <problem_fetch+0x11e3c>)
 80132c2:	8811      	ldrh	r1, [r2, #0]
 80132c4:	7892      	ldrb	r2, [r2, #2]
 80132c6:	8019      	strh	r1, [r3, #0]
 80132c8:	709a      	strb	r2, [r3, #2]
			strcpy(p->grade,"7B");
 80132ca:	687b      	ldr	r3, [r7, #4]
 80132cc:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80132d0:	4a74      	ldr	r2, [pc, #464]	; (80134a4 <problem_fetch+0x11e40>)
 80132d2:	8811      	ldrh	r1, [r2, #0]
 80132d4:	7892      	ldrb	r2, [r2, #2]
 80132d6:	8019      	strh	r1, [r3, #0]
 80132d8:	709a      	strb	r2, [r3, #2]
			p->moveSize = 7;
 80132da:	687b      	ldr	r3, [r7, #4]
 80132dc:	2207      	movs	r2, #7
 80132de:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,J,H,D,D,B,A");
 80132e0:	687b      	ldr	r3, [r7, #4]
 80132e2:	33a4      	adds	r3, #164	; 0xa4
 80132e4:	4a70      	ldr	r2, [pc, #448]	; (80134a8 <problem_fetch+0x11e44>)
 80132e6:	461c      	mov	r4, r3
 80132e8:	4613      	mov	r3, r2
 80132ea:	cb07      	ldmia	r3!, {r0, r1, r2}
 80132ec:	6020      	str	r0, [r4, #0]
 80132ee:	6061      	str	r1, [r4, #4]
 80132f0:	60a2      	str	r2, [r4, #8]
 80132f2:	881b      	ldrh	r3, [r3, #0]
 80132f4:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"6,5,8,11,15,6,18");
 80132f6:	687b      	ldr	r3, [r7, #4]
 80132f8:	3304      	adds	r3, #4
 80132fa:	4a6c      	ldr	r2, [pc, #432]	; (80134ac <problem_fetch+0x11e48>)
 80132fc:	461d      	mov	r5, r3
 80132fe:	4614      	mov	r4, r2
 8013300:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8013302:	6028      	str	r0, [r5, #0]
 8013304:	6069      	str	r1, [r5, #4]
 8013306:	60aa      	str	r2, [r5, #8]
 8013308:	60eb      	str	r3, [r5, #12]
 801330a:	7823      	ldrb	r3, [r4, #0]
 801330c:	742b      	strb	r3, [r5, #16]
			strcpy(p->startFinish,"s,s,d,d,d,d,e");
 801330e:	687b      	ldr	r3, [r7, #4]
 8013310:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8013314:	4a66      	ldr	r2, [pc, #408]	; (80134b0 <problem_fetch+0x11e4c>)
 8013316:	461c      	mov	r4, r3
 8013318:	4613      	mov	r3, r2
 801331a:	cb07      	ldmia	r3!, {r0, r1, r2}
 801331c:	6020      	str	r0, [r4, #0]
 801331e:	6061      	str	r1, [r4, #4]
 8013320:	60a2      	str	r2, [r4, #8]
 8013322:	881b      	ldrh	r3, [r3, #0]
 8013324:	81a3      	strh	r3, [r4, #12]
			break;
 8013326:	f009 b8cd 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 525 :
			strcpy(p->name,"YE BOI");
 801332a:	687b      	ldr	r3, [r7, #4]
 801332c:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8013330:	4a60      	ldr	r2, [pc, #384]	; (80134b4 <problem_fetch+0x11e50>)
 8013332:	6810      	ldr	r0, [r2, #0]
 8013334:	6018      	str	r0, [r3, #0]
 8013336:	8891      	ldrh	r1, [r2, #4]
 8013338:	7992      	ldrb	r2, [r2, #6]
 801333a:	8099      	strh	r1, [r3, #4]
 801333c:	719a      	strb	r2, [r3, #6]
			strcpy(p->grade,"6C+");
 801333e:	687b      	ldr	r3, [r7, #4]
 8013340:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8013344:	4a5c      	ldr	r2, [pc, #368]	; (80134b8 <problem_fetch+0x11e54>)
 8013346:	6810      	ldr	r0, [r2, #0]
 8013348:	6018      	str	r0, [r3, #0]
			p->moveSize = 4;
 801334a:	687b      	ldr	r3, [r7, #4]
 801334c:	2204      	movs	r2, #4
 801334e:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,H,C,D");
 8013350:	687b      	ldr	r3, [r7, #4]
 8013352:	33a4      	adds	r3, #164	; 0xa4
 8013354:	4959      	ldr	r1, [pc, #356]	; (80134bc <problem_fetch+0x11e58>)
 8013356:	461a      	mov	r2, r3
 8013358:	460b      	mov	r3, r1
 801335a:	cb03      	ldmia	r3!, {r0, r1}
 801335c:	6010      	str	r0, [r2, #0]
 801335e:	6051      	str	r1, [r2, #4]
			strcpy(p->moveNumbers,"4,10,13,18");
 8013360:	687b      	ldr	r3, [r7, #4]
 8013362:	3304      	adds	r3, #4
 8013364:	4956      	ldr	r1, [pc, #344]	; (80134c0 <problem_fetch+0x11e5c>)
 8013366:	461a      	mov	r2, r3
 8013368:	460b      	mov	r3, r1
 801336a:	cb03      	ldmia	r3!, {r0, r1}
 801336c:	6010      	str	r0, [r2, #0]
 801336e:	6051      	str	r1, [r2, #4]
 8013370:	8819      	ldrh	r1, [r3, #0]
 8013372:	789b      	ldrb	r3, [r3, #2]
 8013374:	8111      	strh	r1, [r2, #8]
 8013376:	7293      	strb	r3, [r2, #10]
			strcpy(p->startFinish,"s,d,d,e");
 8013378:	687b      	ldr	r3, [r7, #4]
 801337a:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 801337e:	4951      	ldr	r1, [pc, #324]	; (80134c4 <problem_fetch+0x11e60>)
 8013380:	461a      	mov	r2, r3
 8013382:	460b      	mov	r3, r1
 8013384:	cb03      	ldmia	r3!, {r0, r1}
 8013386:	6010      	str	r0, [r2, #0]
 8013388:	6051      	str	r1, [r2, #4]
			break;
 801338a:	f009 b89b 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 526 :
			strcpy(p->name,"PLAYING TINDER");
 801338e:	687b      	ldr	r3, [r7, #4]
 8013390:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8013394:	4a4c      	ldr	r2, [pc, #304]	; (80134c8 <problem_fetch+0x11e64>)
 8013396:	461c      	mov	r4, r3
 8013398:	4613      	mov	r3, r2
 801339a:	cb07      	ldmia	r3!, {r0, r1, r2}
 801339c:	6020      	str	r0, [r4, #0]
 801339e:	6061      	str	r1, [r4, #4]
 80133a0:	60a2      	str	r2, [r4, #8]
 80133a2:	881a      	ldrh	r2, [r3, #0]
 80133a4:	789b      	ldrb	r3, [r3, #2]
 80133a6:	81a2      	strh	r2, [r4, #12]
 80133a8:	73a3      	strb	r3, [r4, #14]
			strcpy(p->grade,"7B+");
 80133aa:	687b      	ldr	r3, [r7, #4]
 80133ac:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80133b0:	4a46      	ldr	r2, [pc, #280]	; (80134cc <problem_fetch+0x11e68>)
 80133b2:	6810      	ldr	r0, [r2, #0]
 80133b4:	6018      	str	r0, [r3, #0]
			p->moveSize = 5;
 80133b6:	687b      	ldr	r3, [r7, #4]
 80133b8:	2205      	movs	r2, #5
 80133ba:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"C,E,B,B,A");
 80133bc:	687b      	ldr	r3, [r7, #4]
 80133be:	33a4      	adds	r3, #164	; 0xa4
 80133c0:	4943      	ldr	r1, [pc, #268]	; (80134d0 <problem_fetch+0x11e6c>)
 80133c2:	461a      	mov	r2, r3
 80133c4:	460b      	mov	r3, r1
 80133c6:	cb03      	ldmia	r3!, {r0, r1}
 80133c8:	6010      	str	r0, [r2, #0]
 80133ca:	6051      	str	r1, [r2, #4]
 80133cc:	881b      	ldrh	r3, [r3, #0]
 80133ce:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"5,9,10,15,18");
 80133d0:	687b      	ldr	r3, [r7, #4]
 80133d2:	3304      	adds	r3, #4
 80133d4:	4a3f      	ldr	r2, [pc, #252]	; (80134d4 <problem_fetch+0x11e70>)
 80133d6:	461c      	mov	r4, r3
 80133d8:	4613      	mov	r3, r2
 80133da:	cb07      	ldmia	r3!, {r0, r1, r2}
 80133dc:	6020      	str	r0, [r4, #0]
 80133de:	6061      	str	r1, [r4, #4]
 80133e0:	60a2      	str	r2, [r4, #8]
 80133e2:	781b      	ldrb	r3, [r3, #0]
 80133e4:	7323      	strb	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,e");
 80133e6:	687b      	ldr	r3, [r7, #4]
 80133e8:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 80133ec:	493a      	ldr	r1, [pc, #232]	; (80134d8 <problem_fetch+0x11e74>)
 80133ee:	461a      	mov	r2, r3
 80133f0:	460b      	mov	r3, r1
 80133f2:	cb03      	ldmia	r3!, {r0, r1}
 80133f4:	6010      	str	r0, [r2, #0]
 80133f6:	6051      	str	r1, [r2, #4]
 80133f8:	881b      	ldrh	r3, [r3, #0]
 80133fa:	8113      	strh	r3, [r2, #8]
			break;
 80133fc:	f009 b862 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 527 :
			strcpy(p->name,"EXIT");
 8013400:	687b      	ldr	r3, [r7, #4]
 8013402:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8013406:	4a35      	ldr	r2, [pc, #212]	; (80134dc <problem_fetch+0x11e78>)
 8013408:	6810      	ldr	r0, [r2, #0]
 801340a:	6018      	str	r0, [r3, #0]
 801340c:	7912      	ldrb	r2, [r2, #4]
 801340e:	711a      	strb	r2, [r3, #4]
			strcpy(p->grade,"7A+");
 8013410:	687b      	ldr	r3, [r7, #4]
 8013412:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8013416:	4a32      	ldr	r2, [pc, #200]	; (80134e0 <problem_fetch+0x11e7c>)
 8013418:	6810      	ldr	r0, [r2, #0]
 801341a:	6018      	str	r0, [r3, #0]
			p->moveSize = 5;
 801341c:	687b      	ldr	r3, [r7, #4]
 801341e:	2205      	movs	r2, #5
 8013420:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,E,E,A,A");
 8013422:	687b      	ldr	r3, [r7, #4]
 8013424:	33a4      	adds	r3, #164	; 0xa4
 8013426:	492f      	ldr	r1, [pc, #188]	; (80134e4 <problem_fetch+0x11e80>)
 8013428:	461a      	mov	r2, r3
 801342a:	460b      	mov	r3, r1
 801342c:	cb03      	ldmia	r3!, {r0, r1}
 801342e:	6010      	str	r0, [r2, #0]
 8013430:	6051      	str	r1, [r2, #4]
 8013432:	881b      	ldrh	r3, [r3, #0]
 8013434:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"5,8,12,14,18");
 8013436:	687b      	ldr	r3, [r7, #4]
 8013438:	3304      	adds	r3, #4
 801343a:	4a2b      	ldr	r2, [pc, #172]	; (80134e8 <problem_fetch+0x11e84>)
 801343c:	461c      	mov	r4, r3
 801343e:	4613      	mov	r3, r2
 8013440:	cb07      	ldmia	r3!, {r0, r1, r2}
 8013442:	6020      	str	r0, [r4, #0]
 8013444:	6061      	str	r1, [r4, #4]
 8013446:	60a2      	str	r2, [r4, #8]
 8013448:	781b      	ldrb	r3, [r3, #0]
 801344a:	7323      	strb	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,e");
 801344c:	687b      	ldr	r3, [r7, #4]
 801344e:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8013452:	4921      	ldr	r1, [pc, #132]	; (80134d8 <problem_fetch+0x11e74>)
 8013454:	461a      	mov	r2, r3
 8013456:	460b      	mov	r3, r1
 8013458:	cb03      	ldmia	r3!, {r0, r1}
 801345a:	6010      	str	r0, [r2, #0]
 801345c:	6051      	str	r1, [r2, #4]
 801345e:	881b      	ldrh	r3, [r3, #0]
 8013460:	8113      	strh	r3, [r2, #8]
			break;
 8013462:	f009 b82f 	b.w	801c4c4 <problem_fetch+0x1ae60>
 8013466:	bf00      	nop
 8013468:	08029f08 	.word	0x08029f08
 801346c:	08023bf0 	.word	0x08023bf0
 8013470:	08029f14 	.word	0x08029f14
 8013474:	08029f24 	.word	0x08029f24
 8013478:	08023cac 	.word	0x08023cac
 801347c:	08029f38 	.word	0x08029f38
 8013480:	08023ae4 	.word	0x08023ae4
 8013484:	08029f44 	.word	0x08029f44
 8013488:	08029f54 	.word	0x08029f54
 801348c:	08029f68 	.word	0x08029f68
 8013490:	08023b24 	.word	0x08023b24
 8013494:	08029f74 	.word	0x08029f74
 8013498:	08029f84 	.word	0x08029f84
 801349c:	08029f98 	.word	0x08029f98
 80134a0:	08029fa8 	.word	0x08029fa8
 80134a4:	0802421c 	.word	0x0802421c
 80134a8:	08029fac 	.word	0x08029fac
 80134ac:	08029fbc 	.word	0x08029fbc
 80134b0:	08023b9c 	.word	0x08023b9c
 80134b4:	08029fd0 	.word	0x08029fd0
 80134b8:	08023bbc 	.word	0x08023bbc
 80134bc:	080299c4 	.word	0x080299c4
 80134c0:	08027000 	.word	0x08027000
 80134c4:	08023c78 	.word	0x08023c78
 80134c8:	08029fd8 	.word	0x08029fd8
 80134cc:	08023c60 	.word	0x08023c60
 80134d0:	08029fe8 	.word	0x08029fe8
 80134d4:	08029ff4 	.word	0x08029ff4
 80134d8:	08023ff0 	.word	0x08023ff0
 80134dc:	0802a004 	.word	0x0802a004
 80134e0:	08023cc4 	.word	0x08023cc4
 80134e4:	0802a00c 	.word	0x0802a00c
 80134e8:	08027b1c 	.word	0x08027b1c
		case 528 :
			strcpy(p->name,"AKAHN N LIL CEASY");
 80134ec:	687b      	ldr	r3, [r7, #4]
 80134ee:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80134f2:	4ac1      	ldr	r2, [pc, #772]	; (80137f8 <problem_fetch+0x12194>)
 80134f4:	461d      	mov	r5, r3
 80134f6:	4614      	mov	r4, r2
 80134f8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80134fa:	6028      	str	r0, [r5, #0]
 80134fc:	6069      	str	r1, [r5, #4]
 80134fe:	60aa      	str	r2, [r5, #8]
 8013500:	60eb      	str	r3, [r5, #12]
 8013502:	8823      	ldrh	r3, [r4, #0]
 8013504:	822b      	strh	r3, [r5, #16]
			strcpy(p->grade,"6B+");
 8013506:	687b      	ldr	r3, [r7, #4]
 8013508:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801350c:	4abb      	ldr	r2, [pc, #748]	; (80137fc <problem_fetch+0x12198>)
 801350e:	6810      	ldr	r0, [r2, #0]
 8013510:	6018      	str	r0, [r3, #0]
			p->moveSize = 9;
 8013512:	687b      	ldr	r3, [r7, #4]
 8013514:	2209      	movs	r2, #9
 8013516:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,H,E,F,E,J,I,E,D");
 8013518:	687b      	ldr	r3, [r7, #4]
 801351a:	33a4      	adds	r3, #164	; 0xa4
 801351c:	4ab8      	ldr	r2, [pc, #736]	; (8013800 <problem_fetch+0x1219c>)
 801351e:	461d      	mov	r5, r3
 8013520:	4614      	mov	r4, r2
 8013522:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8013524:	6028      	str	r0, [r5, #0]
 8013526:	6069      	str	r1, [r5, #4]
 8013528:	60aa      	str	r2, [r5, #8]
 801352a:	60eb      	str	r3, [r5, #12]
 801352c:	8823      	ldrh	r3, [r4, #0]
 801352e:	822b      	strh	r3, [r5, #16]
			strcpy(p->moveNumbers,"4,8,8,11,12,7,14,16,18");
 8013530:	687b      	ldr	r3, [r7, #4]
 8013532:	3304      	adds	r3, #4
 8013534:	4ab3      	ldr	r2, [pc, #716]	; (8013804 <problem_fetch+0x121a0>)
 8013536:	461c      	mov	r4, r3
 8013538:	4615      	mov	r5, r2
 801353a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801353c:	6020      	str	r0, [r4, #0]
 801353e:	6061      	str	r1, [r4, #4]
 8013540:	60a2      	str	r2, [r4, #8]
 8013542:	60e3      	str	r3, [r4, #12]
 8013544:	6828      	ldr	r0, [r5, #0]
 8013546:	6120      	str	r0, [r4, #16]
 8013548:	88ab      	ldrh	r3, [r5, #4]
 801354a:	79aa      	ldrb	r2, [r5, #6]
 801354c:	82a3      	strh	r3, [r4, #20]
 801354e:	4613      	mov	r3, r2
 8013550:	75a3      	strb	r3, [r4, #22]
			strcpy(p->startFinish,"s,d,d,d,d,d,d,d,e");
 8013552:	687b      	ldr	r3, [r7, #4]
 8013554:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8013558:	4aab      	ldr	r2, [pc, #684]	; (8013808 <problem_fetch+0x121a4>)
 801355a:	461d      	mov	r5, r3
 801355c:	4614      	mov	r4, r2
 801355e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8013560:	6028      	str	r0, [r5, #0]
 8013562:	6069      	str	r1, [r5, #4]
 8013564:	60aa      	str	r2, [r5, #8]
 8013566:	60eb      	str	r3, [r5, #12]
 8013568:	8823      	ldrh	r3, [r4, #0]
 801356a:	822b      	strh	r3, [r5, #16]
			break;
 801356c:	f008 bfaa 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 529 :
			strcpy(p->name,"TECH");
 8013570:	687b      	ldr	r3, [r7, #4]
 8013572:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8013576:	4aa5      	ldr	r2, [pc, #660]	; (801380c <problem_fetch+0x121a8>)
 8013578:	6810      	ldr	r0, [r2, #0]
 801357a:	6018      	str	r0, [r3, #0]
 801357c:	7912      	ldrb	r2, [r2, #4]
 801357e:	711a      	strb	r2, [r3, #4]
			strcpy(p->grade,"7A+");
 8013580:	687b      	ldr	r3, [r7, #4]
 8013582:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8013586:	4aa2      	ldr	r2, [pc, #648]	; (8013810 <problem_fetch+0x121ac>)
 8013588:	6810      	ldr	r0, [r2, #0]
 801358a:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 801358c:	687b      	ldr	r3, [r7, #4]
 801358e:	2207      	movs	r2, #7
 8013590:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,E,F,E,H,G,I");
 8013592:	687b      	ldr	r3, [r7, #4]
 8013594:	33a4      	adds	r3, #164	; 0xa4
 8013596:	4a9f      	ldr	r2, [pc, #636]	; (8013814 <problem_fetch+0x121b0>)
 8013598:	461c      	mov	r4, r3
 801359a:	4613      	mov	r3, r2
 801359c:	cb07      	ldmia	r3!, {r0, r1, r2}
 801359e:	6020      	str	r0, [r4, #0]
 80135a0:	6061      	str	r1, [r4, #4]
 80135a2:	60a2      	str	r2, [r4, #8]
 80135a4:	881b      	ldrh	r3, [r3, #0]
 80135a6:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,8,11,12,12,15,18");
 80135a8:	687b      	ldr	r3, [r7, #4]
 80135aa:	3304      	adds	r3, #4
 80135ac:	4a9a      	ldr	r2, [pc, #616]	; (8013818 <problem_fetch+0x121b4>)
 80135ae:	461d      	mov	r5, r3
 80135b0:	4614      	mov	r4, r2
 80135b2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80135b4:	6028      	str	r0, [r5, #0]
 80135b6:	6069      	str	r1, [r5, #4]
 80135b8:	60aa      	str	r2, [r5, #8]
 80135ba:	60eb      	str	r3, [r5, #12]
 80135bc:	8823      	ldrh	r3, [r4, #0]
 80135be:	78a2      	ldrb	r2, [r4, #2]
 80135c0:	822b      	strh	r3, [r5, #16]
 80135c2:	4613      	mov	r3, r2
 80135c4:	74ab      	strb	r3, [r5, #18]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 80135c6:	687b      	ldr	r3, [r7, #4]
 80135c8:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 80135cc:	4a93      	ldr	r2, [pc, #588]	; (801381c <problem_fetch+0x121b8>)
 80135ce:	461c      	mov	r4, r3
 80135d0:	4613      	mov	r3, r2
 80135d2:	cb07      	ldmia	r3!, {r0, r1, r2}
 80135d4:	6020      	str	r0, [r4, #0]
 80135d6:	6061      	str	r1, [r4, #4]
 80135d8:	60a2      	str	r2, [r4, #8]
 80135da:	881b      	ldrh	r3, [r3, #0]
 80135dc:	81a3      	strh	r3, [r4, #12]
			break;
 80135de:	f008 bf71 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 530 :
			strcpy(p->name,"FIRST PROB.");
 80135e2:	687b      	ldr	r3, [r7, #4]
 80135e4:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80135e8:	4a8d      	ldr	r2, [pc, #564]	; (8013820 <problem_fetch+0x121bc>)
 80135ea:	461c      	mov	r4, r3
 80135ec:	4613      	mov	r3, r2
 80135ee:	cb07      	ldmia	r3!, {r0, r1, r2}
 80135f0:	6020      	str	r0, [r4, #0]
 80135f2:	6061      	str	r1, [r4, #4]
 80135f4:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade,"6B+");
 80135f6:	687b      	ldr	r3, [r7, #4]
 80135f8:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80135fc:	4a7f      	ldr	r2, [pc, #508]	; (80137fc <problem_fetch+0x12198>)
 80135fe:	6810      	ldr	r0, [r2, #0]
 8013600:	6018      	str	r0, [r3, #0]
			p->moveSize = 13;
 8013602:	687b      	ldr	r3, [r7, #4]
 8013604:	220d      	movs	r2, #13
 8013606:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,C,C,E,G,G,D,C,A,D,C,E,A");
 8013608:	687b      	ldr	r3, [r7, #4]
 801360a:	33a4      	adds	r3, #164	; 0xa4
 801360c:	4a85      	ldr	r2, [pc, #532]	; (8013824 <problem_fetch+0x121c0>)
 801360e:	461d      	mov	r5, r3
 8013610:	4614      	mov	r4, r2
 8013612:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8013614:	6028      	str	r0, [r5, #0]
 8013616:	6069      	str	r1, [r5, #4]
 8013618:	60aa      	str	r2, [r5, #8]
 801361a:	60eb      	str	r3, [r5, #12]
 801361c:	cc03      	ldmia	r4!, {r0, r1}
 801361e:	6128      	str	r0, [r5, #16]
 8013620:	6169      	str	r1, [r5, #20]
 8013622:	8823      	ldrh	r3, [r4, #0]
 8013624:	832b      	strh	r3, [r5, #24]
			strcpy(p->moveNumbers,"4,5,8,9,9,10,11,16,14,15,13,12,18");
 8013626:	687b      	ldr	r3, [r7, #4]
 8013628:	3304      	adds	r3, #4
 801362a:	4a7f      	ldr	r2, [pc, #508]	; (8013828 <problem_fetch+0x121c4>)
 801362c:	4614      	mov	r4, r2
 801362e:	469c      	mov	ip, r3
 8013630:	f104 0e20 	add.w	lr, r4, #32
 8013634:	4665      	mov	r5, ip
 8013636:	4626      	mov	r6, r4
 8013638:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 801363a:	6028      	str	r0, [r5, #0]
 801363c:	6069      	str	r1, [r5, #4]
 801363e:	60aa      	str	r2, [r5, #8]
 8013640:	60eb      	str	r3, [r5, #12]
 8013642:	3410      	adds	r4, #16
 8013644:	f10c 0c10 	add.w	ip, ip, #16
 8013648:	4574      	cmp	r4, lr
 801364a:	d1f3      	bne.n	8013634 <problem_fetch+0x11fd0>
 801364c:	4662      	mov	r2, ip
 801364e:	4623      	mov	r3, r4
 8013650:	881b      	ldrh	r3, [r3, #0]
 8013652:	8013      	strh	r3, [r2, #0]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,d,d,d,d,d,e");
 8013654:	687b      	ldr	r3, [r7, #4]
 8013656:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 801365a:	4a74      	ldr	r2, [pc, #464]	; (801382c <problem_fetch+0x121c8>)
 801365c:	461d      	mov	r5, r3
 801365e:	4614      	mov	r4, r2
 8013660:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8013662:	6028      	str	r0, [r5, #0]
 8013664:	6069      	str	r1, [r5, #4]
 8013666:	60aa      	str	r2, [r5, #8]
 8013668:	60eb      	str	r3, [r5, #12]
 801366a:	cc03      	ldmia	r4!, {r0, r1}
 801366c:	6128      	str	r0, [r5, #16]
 801366e:	6169      	str	r1, [r5, #20]
 8013670:	8823      	ldrh	r3, [r4, #0]
 8013672:	832b      	strh	r3, [r5, #24]
			break;
 8013674:	f008 bf26 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 531 :
			strcpy(p->name,"NEW PROB");
 8013678:	687b      	ldr	r3, [r7, #4]
 801367a:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801367e:	496c      	ldr	r1, [pc, #432]	; (8013830 <problem_fetch+0x121cc>)
 8013680:	461a      	mov	r2, r3
 8013682:	460b      	mov	r3, r1
 8013684:	cb03      	ldmia	r3!, {r0, r1}
 8013686:	6010      	str	r0, [r2, #0]
 8013688:	6051      	str	r1, [r2, #4]
 801368a:	781b      	ldrb	r3, [r3, #0]
 801368c:	7213      	strb	r3, [r2, #8]
			strcpy(p->grade,"6B+");
 801368e:	687b      	ldr	r3, [r7, #4]
 8013690:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8013694:	4a59      	ldr	r2, [pc, #356]	; (80137fc <problem_fetch+0x12198>)
 8013696:	6810      	ldr	r0, [r2, #0]
 8013698:	6018      	str	r0, [r3, #0]
			p->moveSize = 13;
 801369a:	687b      	ldr	r3, [r7, #4]
 801369c:	220d      	movs	r2, #13
 801369e:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,C,C,A,B,C,B,A,D,C,E,D,A");
 80136a0:	687b      	ldr	r3, [r7, #4]
 80136a2:	33a4      	adds	r3, #164	; 0xa4
 80136a4:	4a63      	ldr	r2, [pc, #396]	; (8013834 <problem_fetch+0x121d0>)
 80136a6:	461d      	mov	r5, r3
 80136a8:	4614      	mov	r4, r2
 80136aa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80136ac:	6028      	str	r0, [r5, #0]
 80136ae:	6069      	str	r1, [r5, #4]
 80136b0:	60aa      	str	r2, [r5, #8]
 80136b2:	60eb      	str	r3, [r5, #12]
 80136b4:	cc03      	ldmia	r4!, {r0, r1}
 80136b6:	6128      	str	r0, [r5, #16]
 80136b8:	6169      	str	r1, [r5, #20]
 80136ba:	8823      	ldrh	r3, [r4, #0]
 80136bc:	832b      	strh	r3, [r5, #24]
			strcpy(p->moveNumbers,"4,5,16,14,15,13,10,9,7,8,8,11,18");
 80136be:	687b      	ldr	r3, [r7, #4]
 80136c0:	3304      	adds	r3, #4
 80136c2:	4a5d      	ldr	r2, [pc, #372]	; (8013838 <problem_fetch+0x121d4>)
 80136c4:	4614      	mov	r4, r2
 80136c6:	469c      	mov	ip, r3
 80136c8:	f104 0e20 	add.w	lr, r4, #32
 80136cc:	4665      	mov	r5, ip
 80136ce:	4626      	mov	r6, r4
 80136d0:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80136d2:	6028      	str	r0, [r5, #0]
 80136d4:	6069      	str	r1, [r5, #4]
 80136d6:	60aa      	str	r2, [r5, #8]
 80136d8:	60eb      	str	r3, [r5, #12]
 80136da:	3410      	adds	r4, #16
 80136dc:	f10c 0c10 	add.w	ip, ip, #16
 80136e0:	4574      	cmp	r4, lr
 80136e2:	d1f3      	bne.n	80136cc <problem_fetch+0x12068>
 80136e4:	4663      	mov	r3, ip
 80136e6:	4622      	mov	r2, r4
 80136e8:	7812      	ldrb	r2, [r2, #0]
 80136ea:	701a      	strb	r2, [r3, #0]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,d,d,d,d,d,e");
 80136ec:	687b      	ldr	r3, [r7, #4]
 80136ee:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 80136f2:	4a4e      	ldr	r2, [pc, #312]	; (801382c <problem_fetch+0x121c8>)
 80136f4:	461d      	mov	r5, r3
 80136f6:	4614      	mov	r4, r2
 80136f8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80136fa:	6028      	str	r0, [r5, #0]
 80136fc:	6069      	str	r1, [r5, #4]
 80136fe:	60aa      	str	r2, [r5, #8]
 8013700:	60eb      	str	r3, [r5, #12]
 8013702:	cc03      	ldmia	r4!, {r0, r1}
 8013704:	6128      	str	r0, [r5, #16]
 8013706:	6169      	str	r1, [r5, #20]
 8013708:	8823      	ldrh	r3, [r4, #0]
 801370a:	832b      	strh	r3, [r5, #24]
			break;
 801370c:	f008 beda 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 532 :
			strcpy(p->name,"BLACK HEART");
 8013710:	687b      	ldr	r3, [r7, #4]
 8013712:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8013716:	4a49      	ldr	r2, [pc, #292]	; (801383c <problem_fetch+0x121d8>)
 8013718:	461c      	mov	r4, r3
 801371a:	4613      	mov	r3, r2
 801371c:	cb07      	ldmia	r3!, {r0, r1, r2}
 801371e:	6020      	str	r0, [r4, #0]
 8013720:	6061      	str	r1, [r4, #4]
 8013722:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade,"6C+");
 8013724:	687b      	ldr	r3, [r7, #4]
 8013726:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801372a:	4a45      	ldr	r2, [pc, #276]	; (8013840 <problem_fetch+0x121dc>)
 801372c:	6810      	ldr	r0, [r2, #0]
 801372e:	6018      	str	r0, [r3, #0]
			p->moveSize = 5;
 8013730:	687b      	ldr	r3, [r7, #4]
 8013732:	2205      	movs	r2, #5
 8013734:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,I,I,G,I");
 8013736:	687b      	ldr	r3, [r7, #4]
 8013738:	33a4      	adds	r3, #164	; 0xa4
 801373a:	4942      	ldr	r1, [pc, #264]	; (8013844 <problem_fetch+0x121e0>)
 801373c:	461a      	mov	r2, r3
 801373e:	460b      	mov	r3, r1
 8013740:	cb03      	ldmia	r3!, {r0, r1}
 8013742:	6010      	str	r0, [r2, #0]
 8013744:	6051      	str	r1, [r2, #4]
 8013746:	881b      	ldrh	r3, [r3, #0]
 8013748:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"5,10,14,17,18");
 801374a:	687b      	ldr	r3, [r7, #4]
 801374c:	3304      	adds	r3, #4
 801374e:	4a3e      	ldr	r2, [pc, #248]	; (8013848 <problem_fetch+0x121e4>)
 8013750:	461c      	mov	r4, r3
 8013752:	4613      	mov	r3, r2
 8013754:	cb07      	ldmia	r3!, {r0, r1, r2}
 8013756:	6020      	str	r0, [r4, #0]
 8013758:	6061      	str	r1, [r4, #4]
 801375a:	60a2      	str	r2, [r4, #8]
 801375c:	881b      	ldrh	r3, [r3, #0]
 801375e:	81a3      	strh	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,e");
 8013760:	687b      	ldr	r3, [r7, #4]
 8013762:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8013766:	4939      	ldr	r1, [pc, #228]	; (801384c <problem_fetch+0x121e8>)
 8013768:	461a      	mov	r2, r3
 801376a:	460b      	mov	r3, r1
 801376c:	cb03      	ldmia	r3!, {r0, r1}
 801376e:	6010      	str	r0, [r2, #0]
 8013770:	6051      	str	r1, [r2, #4]
 8013772:	881b      	ldrh	r3, [r3, #0]
 8013774:	8113      	strh	r3, [r2, #8]
			break;
 8013776:	f008 bea5 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 533 :
			strcpy(p->name,"MONOTHEISM");
 801377a:	687b      	ldr	r3, [r7, #4]
 801377c:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8013780:	4933      	ldr	r1, [pc, #204]	; (8013850 <problem_fetch+0x121ec>)
 8013782:	461a      	mov	r2, r3
 8013784:	460b      	mov	r3, r1
 8013786:	cb03      	ldmia	r3!, {r0, r1}
 8013788:	6010      	str	r0, [r2, #0]
 801378a:	6051      	str	r1, [r2, #4]
 801378c:	8819      	ldrh	r1, [r3, #0]
 801378e:	789b      	ldrb	r3, [r3, #2]
 8013790:	8111      	strh	r1, [r2, #8]
 8013792:	7293      	strb	r3, [r2, #10]
			strcpy(p->grade,"7A+");
 8013794:	687b      	ldr	r3, [r7, #4]
 8013796:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801379a:	4a1d      	ldr	r2, [pc, #116]	; (8013810 <problem_fetch+0x121ac>)
 801379c:	6810      	ldr	r0, [r2, #0]
 801379e:	6018      	str	r0, [r3, #0]
			p->moveSize = 9;
 80137a0:	687b      	ldr	r3, [r7, #4]
 80137a2:	2209      	movs	r2, #9
 80137a4:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"E,G,K,H,C,C,I,D,A");
 80137a6:	687b      	ldr	r3, [r7, #4]
 80137a8:	33a4      	adds	r3, #164	; 0xa4
 80137aa:	4a2a      	ldr	r2, [pc, #168]	; (8013854 <problem_fetch+0x121f0>)
 80137ac:	461d      	mov	r5, r3
 80137ae:	4614      	mov	r4, r2
 80137b0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80137b2:	6028      	str	r0, [r5, #0]
 80137b4:	6069      	str	r1, [r5, #4]
 80137b6:	60aa      	str	r2, [r5, #8]
 80137b8:	60eb      	str	r3, [r5, #12]
 80137ba:	8823      	ldrh	r3, [r4, #0]
 80137bc:	822b      	strh	r3, [r5, #16]
			strcpy(p->moveNumbers,"6,4,9,13,13,16,14,11,18");
 80137be:	687b      	ldr	r3, [r7, #4]
 80137c0:	3304      	adds	r3, #4
 80137c2:	4a25      	ldr	r2, [pc, #148]	; (8013858 <problem_fetch+0x121f4>)
 80137c4:	461d      	mov	r5, r3
 80137c6:	4614      	mov	r4, r2
 80137c8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80137ca:	6028      	str	r0, [r5, #0]
 80137cc:	6069      	str	r1, [r5, #4]
 80137ce:	60aa      	str	r2, [r5, #8]
 80137d0:	60eb      	str	r3, [r5, #12]
 80137d2:	cc03      	ldmia	r4!, {r0, r1}
 80137d4:	6128      	str	r0, [r5, #16]
 80137d6:	6169      	str	r1, [r5, #20]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,d,e");
 80137d8:	687b      	ldr	r3, [r7, #4]
 80137da:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 80137de:	4a1f      	ldr	r2, [pc, #124]	; (801385c <problem_fetch+0x121f8>)
 80137e0:	461d      	mov	r5, r3
 80137e2:	4614      	mov	r4, r2
 80137e4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80137e6:	6028      	str	r0, [r5, #0]
 80137e8:	6069      	str	r1, [r5, #4]
 80137ea:	60aa      	str	r2, [r5, #8]
 80137ec:	60eb      	str	r3, [r5, #12]
 80137ee:	8823      	ldrh	r3, [r4, #0]
 80137f0:	822b      	strh	r3, [r5, #16]
			break;
 80137f2:	f008 be67 	b.w	801c4c4 <problem_fetch+0x1ae60>
 80137f6:	bf00      	nop
 80137f8:	0802a018 	.word	0x0802a018
 80137fc:	08023b24 	.word	0x08023b24
 8013800:	0802a02c 	.word	0x0802a02c
 8013804:	0802a040 	.word	0x0802a040
 8013808:	080259dc 	.word	0x080259dc
 801380c:	0802a058 	.word	0x0802a058
 8013810:	08023cc4 	.word	0x08023cc4
 8013814:	0802a060 	.word	0x0802a060
 8013818:	0802a070 	.word	0x0802a070
 801381c:	08023cac 	.word	0x08023cac
 8013820:	0802a084 	.word	0x0802a084
 8013824:	0802a090 	.word	0x0802a090
 8013828:	0802a0ac 	.word	0x0802a0ac
 801382c:	08028624 	.word	0x08028624
 8013830:	0802a0d0 	.word	0x0802a0d0
 8013834:	0802a0dc 	.word	0x0802a0dc
 8013838:	0802a0f8 	.word	0x0802a0f8
 801383c:	0802a11c 	.word	0x0802a11c
 8013840:	08023bbc 	.word	0x08023bbc
 8013844:	0802a128 	.word	0x0802a128
 8013848:	0802a134 	.word	0x0802a134
 801384c:	08023ff0 	.word	0x08023ff0
 8013850:	0802a144 	.word	0x0802a144
 8013854:	0802a150 	.word	0x0802a150
 8013858:	0802a164 	.word	0x0802a164
 801385c:	08024b08 	.word	0x08024b08
		case 534 :
			strcpy(p->name,"GIVE ME SOMETHING BETTER");
 8013860:	687b      	ldr	r3, [r7, #4]
 8013862:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8013866:	4aae      	ldr	r2, [pc, #696]	; (8013b20 <problem_fetch+0x124bc>)
 8013868:	461d      	mov	r5, r3
 801386a:	4614      	mov	r4, r2
 801386c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801386e:	6028      	str	r0, [r5, #0]
 8013870:	6069      	str	r1, [r5, #4]
 8013872:	60aa      	str	r2, [r5, #8]
 8013874:	60eb      	str	r3, [r5, #12]
 8013876:	cc03      	ldmia	r4!, {r0, r1}
 8013878:	6128      	str	r0, [r5, #16]
 801387a:	6169      	str	r1, [r5, #20]
 801387c:	7823      	ldrb	r3, [r4, #0]
 801387e:	762b      	strb	r3, [r5, #24]
			strcpy(p->grade,"6C+");
 8013880:	687b      	ldr	r3, [r7, #4]
 8013882:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8013886:	4aa7      	ldr	r2, [pc, #668]	; (8013b24 <problem_fetch+0x124c0>)
 8013888:	6810      	ldr	r0, [r2, #0]
 801388a:	6018      	str	r0, [r3, #0]
			p->moveSize = 9;
 801388c:	687b      	ldr	r3, [r7, #4]
 801388e:	2209      	movs	r2, #9
 8013890:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"E,G,K,H,I,C,D,B,A");
 8013892:	687b      	ldr	r3, [r7, #4]
 8013894:	33a4      	adds	r3, #164	; 0xa4
 8013896:	4aa4      	ldr	r2, [pc, #656]	; (8013b28 <problem_fetch+0x124c4>)
 8013898:	461d      	mov	r5, r3
 801389a:	4614      	mov	r4, r2
 801389c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801389e:	6028      	str	r0, [r5, #0]
 80138a0:	6069      	str	r1, [r5, #4]
 80138a2:	60aa      	str	r2, [r5, #8]
 80138a4:	60eb      	str	r3, [r5, #12]
 80138a6:	8823      	ldrh	r3, [r4, #0]
 80138a8:	822b      	strh	r3, [r5, #16]
			strcpy(p->moveNumbers,"6,4,9,13,14,13,15,12,18");
 80138aa:	687b      	ldr	r3, [r7, #4]
 80138ac:	3304      	adds	r3, #4
 80138ae:	4a9f      	ldr	r2, [pc, #636]	; (8013b2c <problem_fetch+0x124c8>)
 80138b0:	461d      	mov	r5, r3
 80138b2:	4614      	mov	r4, r2
 80138b4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80138b6:	6028      	str	r0, [r5, #0]
 80138b8:	6069      	str	r1, [r5, #4]
 80138ba:	60aa      	str	r2, [r5, #8]
 80138bc:	60eb      	str	r3, [r5, #12]
 80138be:	cc03      	ldmia	r4!, {r0, r1}
 80138c0:	6128      	str	r0, [r5, #16]
 80138c2:	6169      	str	r1, [r5, #20]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,d,e");
 80138c4:	687b      	ldr	r3, [r7, #4]
 80138c6:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 80138ca:	4a99      	ldr	r2, [pc, #612]	; (8013b30 <problem_fetch+0x124cc>)
 80138cc:	461d      	mov	r5, r3
 80138ce:	4614      	mov	r4, r2
 80138d0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80138d2:	6028      	str	r0, [r5, #0]
 80138d4:	6069      	str	r1, [r5, #4]
 80138d6:	60aa      	str	r2, [r5, #8]
 80138d8:	60eb      	str	r3, [r5, #12]
 80138da:	8823      	ldrh	r3, [r4, #0]
 80138dc:	822b      	strh	r3, [r5, #16]
			break;
 80138de:	f008 bdf1 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 535 :
			strcpy(p->name,"POOP TWISTER");
 80138e2:	687b      	ldr	r3, [r7, #4]
 80138e4:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80138e8:	4a92      	ldr	r2, [pc, #584]	; (8013b34 <problem_fetch+0x124d0>)
 80138ea:	461c      	mov	r4, r3
 80138ec:	4613      	mov	r3, r2
 80138ee:	cb07      	ldmia	r3!, {r0, r1, r2}
 80138f0:	6020      	str	r0, [r4, #0]
 80138f2:	6061      	str	r1, [r4, #4]
 80138f4:	60a2      	str	r2, [r4, #8]
 80138f6:	781b      	ldrb	r3, [r3, #0]
 80138f8:	7323      	strb	r3, [r4, #12]
			strcpy(p->grade,"6C");
 80138fa:	687b      	ldr	r3, [r7, #4]
 80138fc:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8013900:	4a8d      	ldr	r2, [pc, #564]	; (8013b38 <problem_fetch+0x124d4>)
 8013902:	8811      	ldrh	r1, [r2, #0]
 8013904:	7892      	ldrb	r2, [r2, #2]
 8013906:	8019      	strh	r1, [r3, #0]
 8013908:	709a      	strb	r2, [r3, #2]
			p->moveSize = 7;
 801390a:	687b      	ldr	r3, [r7, #4]
 801390c:	2207      	movs	r2, #7
 801390e:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"E,J,G,D,G,E,I");
 8013910:	687b      	ldr	r3, [r7, #4]
 8013912:	33a4      	adds	r3, #164	; 0xa4
 8013914:	4a89      	ldr	r2, [pc, #548]	; (8013b3c <problem_fetch+0x124d8>)
 8013916:	461c      	mov	r4, r3
 8013918:	4613      	mov	r3, r2
 801391a:	cb07      	ldmia	r3!, {r0, r1, r2}
 801391c:	6020      	str	r0, [r4, #0]
 801391e:	6061      	str	r1, [r4, #4]
 8013920:	60a2      	str	r2, [r4, #8]
 8013922:	881b      	ldrh	r3, [r3, #0]
 8013924:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"6,5,9,11,14,16,18");
 8013926:	687b      	ldr	r3, [r7, #4]
 8013928:	3304      	adds	r3, #4
 801392a:	4a85      	ldr	r2, [pc, #532]	; (8013b40 <problem_fetch+0x124dc>)
 801392c:	461d      	mov	r5, r3
 801392e:	4614      	mov	r4, r2
 8013930:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8013932:	6028      	str	r0, [r5, #0]
 8013934:	6069      	str	r1, [r5, #4]
 8013936:	60aa      	str	r2, [r5, #8]
 8013938:	60eb      	str	r3, [r5, #12]
 801393a:	8823      	ldrh	r3, [r4, #0]
 801393c:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,s,d,d,d,d,e");
 801393e:	687b      	ldr	r3, [r7, #4]
 8013940:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8013944:	4a7f      	ldr	r2, [pc, #508]	; (8013b44 <problem_fetch+0x124e0>)
 8013946:	461c      	mov	r4, r3
 8013948:	4613      	mov	r3, r2
 801394a:	cb07      	ldmia	r3!, {r0, r1, r2}
 801394c:	6020      	str	r0, [r4, #0]
 801394e:	6061      	str	r1, [r4, #4]
 8013950:	60a2      	str	r2, [r4, #8]
 8013952:	881b      	ldrh	r3, [r3, #0]
 8013954:	81a3      	strh	r3, [r4, #12]
			break;
 8013956:	f008 bdb5 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 536 :
			strcpy(p->name,"TAMOA NARASAKI BOMB");
 801395a:	687b      	ldr	r3, [r7, #4]
 801395c:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8013960:	4a79      	ldr	r2, [pc, #484]	; (8013b48 <problem_fetch+0x124e4>)
 8013962:	461d      	mov	r5, r3
 8013964:	4614      	mov	r4, r2
 8013966:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8013968:	6028      	str	r0, [r5, #0]
 801396a:	6069      	str	r1, [r5, #4]
 801396c:	60aa      	str	r2, [r5, #8]
 801396e:	60eb      	str	r3, [r5, #12]
 8013970:	6820      	ldr	r0, [r4, #0]
 8013972:	6128      	str	r0, [r5, #16]
			strcpy(p->grade,"7B+");
 8013974:	687b      	ldr	r3, [r7, #4]
 8013976:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801397a:	4a74      	ldr	r2, [pc, #464]	; (8013b4c <problem_fetch+0x124e8>)
 801397c:	6810      	ldr	r0, [r2, #0]
 801397e:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 8013980:	687b      	ldr	r3, [r7, #4]
 8013982:	2207      	movs	r2, #7
 8013984:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,H,C,I,E,C,A");
 8013986:	687b      	ldr	r3, [r7, #4]
 8013988:	33a4      	adds	r3, #164	; 0xa4
 801398a:	4a71      	ldr	r2, [pc, #452]	; (8013b50 <problem_fetch+0x124ec>)
 801398c:	461c      	mov	r4, r3
 801398e:	4613      	mov	r3, r2
 8013990:	cb07      	ldmia	r3!, {r0, r1, r2}
 8013992:	6020      	str	r0, [r4, #0]
 8013994:	6061      	str	r1, [r4, #4]
 8013996:	60a2      	str	r2, [r4, #8]
 8013998:	881b      	ldrh	r3, [r3, #0]
 801399a:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,8,8,9,16,13,18");
 801399c:	687b      	ldr	r3, [r7, #4]
 801399e:	3304      	adds	r3, #4
 80139a0:	4a6c      	ldr	r2, [pc, #432]	; (8013b54 <problem_fetch+0x124f0>)
 80139a2:	461d      	mov	r5, r3
 80139a4:	4614      	mov	r4, r2
 80139a6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80139a8:	6028      	str	r0, [r5, #0]
 80139aa:	6069      	str	r1, [r5, #4]
 80139ac:	60aa      	str	r2, [r5, #8]
 80139ae:	60eb      	str	r3, [r5, #12]
 80139b0:	7823      	ldrb	r3, [r4, #0]
 80139b2:	742b      	strb	r3, [r5, #16]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 80139b4:	687b      	ldr	r3, [r7, #4]
 80139b6:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 80139ba:	4a67      	ldr	r2, [pc, #412]	; (8013b58 <problem_fetch+0x124f4>)
 80139bc:	461c      	mov	r4, r3
 80139be:	4613      	mov	r3, r2
 80139c0:	cb07      	ldmia	r3!, {r0, r1, r2}
 80139c2:	6020      	str	r0, [r4, #0]
 80139c4:	6061      	str	r1, [r4, #4]
 80139c6:	60a2      	str	r2, [r4, #8]
 80139c8:	881b      	ldrh	r3, [r3, #0]
 80139ca:	81a3      	strh	r3, [r4, #12]
			break;
 80139cc:	f008 bd7a 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 537 :
			strcpy(p->name,"ON BLACK");
 80139d0:	687b      	ldr	r3, [r7, #4]
 80139d2:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80139d6:	4961      	ldr	r1, [pc, #388]	; (8013b5c <problem_fetch+0x124f8>)
 80139d8:	461a      	mov	r2, r3
 80139da:	460b      	mov	r3, r1
 80139dc:	cb03      	ldmia	r3!, {r0, r1}
 80139de:	6010      	str	r0, [r2, #0]
 80139e0:	6051      	str	r1, [r2, #4]
 80139e2:	781b      	ldrb	r3, [r3, #0]
 80139e4:	7213      	strb	r3, [r2, #8]
			strcpy(p->grade,"6B+");
 80139e6:	687b      	ldr	r3, [r7, #4]
 80139e8:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80139ec:	4a5c      	ldr	r2, [pc, #368]	; (8013b60 <problem_fetch+0x124fc>)
 80139ee:	6810      	ldr	r0, [r2, #0]
 80139f0:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 80139f2:	687b      	ldr	r3, [r7, #4]
 80139f4:	2206      	movs	r2, #6
 80139f6:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,E,F,C,D,A");
 80139f8:	687b      	ldr	r3, [r7, #4]
 80139fa:	33a4      	adds	r3, #164	; 0xa4
 80139fc:	4a59      	ldr	r2, [pc, #356]	; (8013b64 <problem_fetch+0x12500>)
 80139fe:	461c      	mov	r4, r3
 8013a00:	4613      	mov	r3, r2
 8013a02:	cb07      	ldmia	r3!, {r0, r1, r2}
 8013a04:	6020      	str	r0, [r4, #0]
 8013a06:	6061      	str	r1, [r4, #4]
 8013a08:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,8,11,13,15,18");
 8013a0a:	687b      	ldr	r3, [r7, #4]
 8013a0c:	3304      	adds	r3, #4
 8013a0e:	4a56      	ldr	r2, [pc, #344]	; (8013b68 <problem_fetch+0x12504>)
 8013a10:	461c      	mov	r4, r3
 8013a12:	4615      	mov	r5, r2
 8013a14:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8013a16:	6020      	str	r0, [r4, #0]
 8013a18:	6061      	str	r1, [r4, #4]
 8013a1a:	60a2      	str	r2, [r4, #8]
 8013a1c:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 8013a1e:	687b      	ldr	r3, [r7, #4]
 8013a20:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8013a24:	4a51      	ldr	r2, [pc, #324]	; (8013b6c <problem_fetch+0x12508>)
 8013a26:	461c      	mov	r4, r3
 8013a28:	4613      	mov	r3, r2
 8013a2a:	cb07      	ldmia	r3!, {r0, r1, r2}
 8013a2c:	6020      	str	r0, [r4, #0]
 8013a2e:	6061      	str	r1, [r4, #4]
 8013a30:	60a2      	str	r2, [r4, #8]
			break;
 8013a32:	f008 bd47 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 538 :
			strcpy(p->name,"SMOKING AREA HARD");
 8013a36:	687b      	ldr	r3, [r7, #4]
 8013a38:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8013a3c:	4a4c      	ldr	r2, [pc, #304]	; (8013b70 <problem_fetch+0x1250c>)
 8013a3e:	461d      	mov	r5, r3
 8013a40:	4614      	mov	r4, r2
 8013a42:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8013a44:	6028      	str	r0, [r5, #0]
 8013a46:	6069      	str	r1, [r5, #4]
 8013a48:	60aa      	str	r2, [r5, #8]
 8013a4a:	60eb      	str	r3, [r5, #12]
 8013a4c:	8823      	ldrh	r3, [r4, #0]
 8013a4e:	822b      	strh	r3, [r5, #16]
			strcpy(p->grade,"7A+");
 8013a50:	687b      	ldr	r3, [r7, #4]
 8013a52:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8013a56:	4a47      	ldr	r2, [pc, #284]	; (8013b74 <problem_fetch+0x12510>)
 8013a58:	6810      	ldr	r0, [r2, #0]
 8013a5a:	6018      	str	r0, [r3, #0]
			p->moveSize = 5;
 8013a5c:	687b      	ldr	r3, [r7, #4]
 8013a5e:	2205      	movs	r2, #5
 8013a60:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,C,E,E,I");
 8013a62:	687b      	ldr	r3, [r7, #4]
 8013a64:	33a4      	adds	r3, #164	; 0xa4
 8013a66:	4944      	ldr	r1, [pc, #272]	; (8013b78 <problem_fetch+0x12514>)
 8013a68:	461a      	mov	r2, r3
 8013a6a:	460b      	mov	r3, r1
 8013a6c:	cb03      	ldmia	r3!, {r0, r1}
 8013a6e:	6010      	str	r0, [r2, #0]
 8013a70:	6051      	str	r1, [r2, #4]
 8013a72:	881b      	ldrh	r3, [r3, #0]
 8013a74:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"4,8,12,16,18");
 8013a76:	687b      	ldr	r3, [r7, #4]
 8013a78:	3304      	adds	r3, #4
 8013a7a:	4a40      	ldr	r2, [pc, #256]	; (8013b7c <problem_fetch+0x12518>)
 8013a7c:	461c      	mov	r4, r3
 8013a7e:	4613      	mov	r3, r2
 8013a80:	cb07      	ldmia	r3!, {r0, r1, r2}
 8013a82:	6020      	str	r0, [r4, #0]
 8013a84:	6061      	str	r1, [r4, #4]
 8013a86:	60a2      	str	r2, [r4, #8]
 8013a88:	781b      	ldrb	r3, [r3, #0]
 8013a8a:	7323      	strb	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,e");
 8013a8c:	687b      	ldr	r3, [r7, #4]
 8013a8e:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8013a92:	493b      	ldr	r1, [pc, #236]	; (8013b80 <problem_fetch+0x1251c>)
 8013a94:	461a      	mov	r2, r3
 8013a96:	460b      	mov	r3, r1
 8013a98:	cb03      	ldmia	r3!, {r0, r1}
 8013a9a:	6010      	str	r0, [r2, #0]
 8013a9c:	6051      	str	r1, [r2, #4]
 8013a9e:	881b      	ldrh	r3, [r3, #0]
 8013aa0:	8113      	strh	r3, [r2, #8]
			break;
 8013aa2:	f008 bd0f 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 539 :
			strcpy(p->name,"THE WIZARD");
 8013aa6:	687b      	ldr	r3, [r7, #4]
 8013aa8:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8013aac:	4935      	ldr	r1, [pc, #212]	; (8013b84 <problem_fetch+0x12520>)
 8013aae:	461a      	mov	r2, r3
 8013ab0:	460b      	mov	r3, r1
 8013ab2:	cb03      	ldmia	r3!, {r0, r1}
 8013ab4:	6010      	str	r0, [r2, #0]
 8013ab6:	6051      	str	r1, [r2, #4]
 8013ab8:	8819      	ldrh	r1, [r3, #0]
 8013aba:	789b      	ldrb	r3, [r3, #2]
 8013abc:	8111      	strh	r1, [r2, #8]
 8013abe:	7293      	strb	r3, [r2, #10]
			strcpy(p->grade,"6C");
 8013ac0:	687b      	ldr	r3, [r7, #4]
 8013ac2:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8013ac6:	4a1c      	ldr	r2, [pc, #112]	; (8013b38 <problem_fetch+0x124d4>)
 8013ac8:	8811      	ldrh	r1, [r2, #0]
 8013aca:	7892      	ldrb	r2, [r2, #2]
 8013acc:	8019      	strh	r1, [r3, #0]
 8013ace:	709a      	strb	r2, [r3, #2]
			p->moveSize = 8;
 8013ad0:	687b      	ldr	r3, [r7, #4]
 8013ad2:	2208      	movs	r2, #8
 8013ad4:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,J,E,H,F,H,E,I");
 8013ad6:	687b      	ldr	r3, [r7, #4]
 8013ad8:	33a4      	adds	r3, #164	; 0xa4
 8013ada:	4a2b      	ldr	r2, [pc, #172]	; (8013b88 <problem_fetch+0x12524>)
 8013adc:	461c      	mov	r4, r3
 8013ade:	4615      	mov	r5, r2
 8013ae0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8013ae2:	6020      	str	r0, [r4, #0]
 8013ae4:	6061      	str	r1, [r4, #4]
 8013ae6:	60a2      	str	r2, [r4, #8]
 8013ae8:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,7,8,10,11,13,16,18");
 8013aea:	687b      	ldr	r3, [r7, #4]
 8013aec:	3304      	adds	r3, #4
 8013aee:	4a27      	ldr	r2, [pc, #156]	; (8013b8c <problem_fetch+0x12528>)
 8013af0:	461d      	mov	r5, r3
 8013af2:	4614      	mov	r4, r2
 8013af4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8013af6:	6028      	str	r0, [r5, #0]
 8013af8:	6069      	str	r1, [r5, #4]
 8013afa:	60aa      	str	r2, [r5, #8]
 8013afc:	60eb      	str	r3, [r5, #12]
 8013afe:	6820      	ldr	r0, [r4, #0]
 8013b00:	6128      	str	r0, [r5, #16]
 8013b02:	7923      	ldrb	r3, [r4, #4]
 8013b04:	752b      	strb	r3, [r5, #20]
			strcpy(p->startFinish,"s,d,d,d,d,d,d,e");
 8013b06:	687b      	ldr	r3, [r7, #4]
 8013b08:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8013b0c:	4a20      	ldr	r2, [pc, #128]	; (8013b90 <problem_fetch+0x1252c>)
 8013b0e:	461c      	mov	r4, r3
 8013b10:	4615      	mov	r5, r2
 8013b12:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8013b14:	6020      	str	r0, [r4, #0]
 8013b16:	6061      	str	r1, [r4, #4]
 8013b18:	60a2      	str	r2, [r4, #8]
 8013b1a:	60e3      	str	r3, [r4, #12]
			break;
 8013b1c:	f008 bcd2 	b.w	801c4c4 <problem_fetch+0x1ae60>
 8013b20:	0802a17c 	.word	0x0802a17c
 8013b24:	08023bbc 	.word	0x08023bbc
 8013b28:	0802a198 	.word	0x0802a198
 8013b2c:	0802a1ac 	.word	0x0802a1ac
 8013b30:	08024b08 	.word	0x08024b08
 8013b34:	0802a1c4 	.word	0x0802a1c4
 8013b38:	08023bf0 	.word	0x08023bf0
 8013b3c:	0802a1d4 	.word	0x0802a1d4
 8013b40:	08024734 	.word	0x08024734
 8013b44:	08023b9c 	.word	0x08023b9c
 8013b48:	0802a1e4 	.word	0x0802a1e4
 8013b4c:	08023c60 	.word	0x08023c60
 8013b50:	0802a1f8 	.word	0x0802a1f8
 8013b54:	0802a208 	.word	0x0802a208
 8013b58:	08023cac 	.word	0x08023cac
 8013b5c:	0802a21c 	.word	0x0802a21c
 8013b60:	08023b24 	.word	0x08023b24
 8013b64:	0802a228 	.word	0x0802a228
 8013b68:	0802a234 	.word	0x0802a234
 8013b6c:	08023ec0 	.word	0x08023ec0
 8013b70:	0802a244 	.word	0x0802a244
 8013b74:	08023cc4 	.word	0x08023cc4
 8013b78:	080271cc 	.word	0x080271cc
 8013b7c:	0802a258 	.word	0x0802a258
 8013b80:	08023ff0 	.word	0x08023ff0
 8013b84:	0802a268 	.word	0x0802a268
 8013b88:	0802a274 	.word	0x0802a274
 8013b8c:	0802a284 	.word	0x0802a284
 8013b90:	08023d34 	.word	0x08023d34
		case 540 :
			strcpy(p->name,"GYUUUUUN");
 8013b94:	687b      	ldr	r3, [r7, #4]
 8013b96:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8013b9a:	49ab      	ldr	r1, [pc, #684]	; (8013e48 <problem_fetch+0x127e4>)
 8013b9c:	461a      	mov	r2, r3
 8013b9e:	460b      	mov	r3, r1
 8013ba0:	cb03      	ldmia	r3!, {r0, r1}
 8013ba2:	6010      	str	r0, [r2, #0]
 8013ba4:	6051      	str	r1, [r2, #4]
 8013ba6:	781b      	ldrb	r3, [r3, #0]
 8013ba8:	7213      	strb	r3, [r2, #8]
			strcpy(p->grade,"6C");
 8013baa:	687b      	ldr	r3, [r7, #4]
 8013bac:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8013bb0:	4aa6      	ldr	r2, [pc, #664]	; (8013e4c <problem_fetch+0x127e8>)
 8013bb2:	8811      	ldrh	r1, [r2, #0]
 8013bb4:	7892      	ldrb	r2, [r2, #2]
 8013bb6:	8019      	strh	r1, [r3, #0]
 8013bb8:	709a      	strb	r2, [r3, #2]
			p->moveSize = 6;
 8013bba:	687b      	ldr	r3, [r7, #4]
 8013bbc:	2206      	movs	r2, #6
 8013bbe:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"E,H,D,E,E,I");
 8013bc0:	687b      	ldr	r3, [r7, #4]
 8013bc2:	33a4      	adds	r3, #164	; 0xa4
 8013bc4:	4aa2      	ldr	r2, [pc, #648]	; (8013e50 <problem_fetch+0x127ec>)
 8013bc6:	461c      	mov	r4, r3
 8013bc8:	4613      	mov	r3, r2
 8013bca:	cb07      	ldmia	r3!, {r0, r1, r2}
 8013bcc:	6020      	str	r0, [r4, #0]
 8013bce:	6061      	str	r1, [r4, #4]
 8013bd0:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"6,10,11,14,16,18");
 8013bd2:	687b      	ldr	r3, [r7, #4]
 8013bd4:	3304      	adds	r3, #4
 8013bd6:	4a9f      	ldr	r2, [pc, #636]	; (8013e54 <problem_fetch+0x127f0>)
 8013bd8:	461d      	mov	r5, r3
 8013bda:	4614      	mov	r4, r2
 8013bdc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8013bde:	6028      	str	r0, [r5, #0]
 8013be0:	6069      	str	r1, [r5, #4]
 8013be2:	60aa      	str	r2, [r5, #8]
 8013be4:	60eb      	str	r3, [r5, #12]
 8013be6:	7823      	ldrb	r3, [r4, #0]
 8013be8:	742b      	strb	r3, [r5, #16]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 8013bea:	687b      	ldr	r3, [r7, #4]
 8013bec:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8013bf0:	4a99      	ldr	r2, [pc, #612]	; (8013e58 <problem_fetch+0x127f4>)
 8013bf2:	461c      	mov	r4, r3
 8013bf4:	4613      	mov	r3, r2
 8013bf6:	cb07      	ldmia	r3!, {r0, r1, r2}
 8013bf8:	6020      	str	r0, [r4, #0]
 8013bfa:	6061      	str	r1, [r4, #4]
 8013bfc:	60a2      	str	r2, [r4, #8]
			break;
 8013bfe:	f008 bc61 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 541 :
			strcpy(p->name,"A LITTLE CROSSING");
 8013c02:	687b      	ldr	r3, [r7, #4]
 8013c04:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8013c08:	4a94      	ldr	r2, [pc, #592]	; (8013e5c <problem_fetch+0x127f8>)
 8013c0a:	461d      	mov	r5, r3
 8013c0c:	4614      	mov	r4, r2
 8013c0e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8013c10:	6028      	str	r0, [r5, #0]
 8013c12:	6069      	str	r1, [r5, #4]
 8013c14:	60aa      	str	r2, [r5, #8]
 8013c16:	60eb      	str	r3, [r5, #12]
 8013c18:	8823      	ldrh	r3, [r4, #0]
 8013c1a:	822b      	strh	r3, [r5, #16]
			strcpy(p->grade,"6C+");
 8013c1c:	687b      	ldr	r3, [r7, #4]
 8013c1e:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8013c22:	4a8f      	ldr	r2, [pc, #572]	; (8013e60 <problem_fetch+0x127fc>)
 8013c24:	6810      	ldr	r0, [r2, #0]
 8013c26:	6018      	str	r0, [r3, #0]
			p->moveSize = 8;
 8013c28:	687b      	ldr	r3, [r7, #4]
 8013c2a:	2208      	movs	r2, #8
 8013c2c:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,G,E,G,H,K,H,I");
 8013c2e:	687b      	ldr	r3, [r7, #4]
 8013c30:	33a4      	adds	r3, #164	; 0xa4
 8013c32:	4a8c      	ldr	r2, [pc, #560]	; (8013e64 <problem_fetch+0x12800>)
 8013c34:	461c      	mov	r4, r3
 8013c36:	4615      	mov	r5, r2
 8013c38:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8013c3a:	6020      	str	r0, [r4, #0]
 8013c3c:	6061      	str	r1, [r4, #4]
 8013c3e:	60a2      	str	r2, [r4, #8]
 8013c40:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,4,8,9,12,14,16,18");
 8013c42:	687b      	ldr	r3, [r7, #4]
 8013c44:	3304      	adds	r3, #4
 8013c46:	4a88      	ldr	r2, [pc, #544]	; (8013e68 <problem_fetch+0x12804>)
 8013c48:	461d      	mov	r5, r3
 8013c4a:	4614      	mov	r4, r2
 8013c4c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8013c4e:	6028      	str	r0, [r5, #0]
 8013c50:	6069      	str	r1, [r5, #4]
 8013c52:	60aa      	str	r2, [r5, #8]
 8013c54:	60eb      	str	r3, [r5, #12]
 8013c56:	6820      	ldr	r0, [r4, #0]
 8013c58:	6128      	str	r0, [r5, #16]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,e");
 8013c5a:	687b      	ldr	r3, [r7, #4]
 8013c5c:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8013c60:	4a82      	ldr	r2, [pc, #520]	; (8013e6c <problem_fetch+0x12808>)
 8013c62:	461c      	mov	r4, r3
 8013c64:	4615      	mov	r5, r2
 8013c66:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8013c68:	6020      	str	r0, [r4, #0]
 8013c6a:	6061      	str	r1, [r4, #4]
 8013c6c:	60a2      	str	r2, [r4, #8]
 8013c6e:	60e3      	str	r3, [r4, #12]
			break;
 8013c70:	f008 bc28 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 542 :
			strcpy(p->name,"ZANZARE, NEBBIA E VIN");
 8013c74:	687b      	ldr	r3, [r7, #4]
 8013c76:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8013c7a:	4a7d      	ldr	r2, [pc, #500]	; (8013e70 <problem_fetch+0x1280c>)
 8013c7c:	461d      	mov	r5, r3
 8013c7e:	4614      	mov	r4, r2
 8013c80:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8013c82:	6028      	str	r0, [r5, #0]
 8013c84:	6069      	str	r1, [r5, #4]
 8013c86:	60aa      	str	r2, [r5, #8]
 8013c88:	60eb      	str	r3, [r5, #12]
 8013c8a:	6820      	ldr	r0, [r4, #0]
 8013c8c:	6128      	str	r0, [r5, #16]
 8013c8e:	88a3      	ldrh	r3, [r4, #4]
 8013c90:	82ab      	strh	r3, [r5, #20]
			strcpy(p->grade,"6C");
 8013c92:	687b      	ldr	r3, [r7, #4]
 8013c94:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8013c98:	4a6c      	ldr	r2, [pc, #432]	; (8013e4c <problem_fetch+0x127e8>)
 8013c9a:	8811      	ldrh	r1, [r2, #0]
 8013c9c:	7892      	ldrb	r2, [r2, #2]
 8013c9e:	8019      	strh	r1, [r3, #0]
 8013ca0:	709a      	strb	r2, [r3, #2]
			p->moveSize = 5;
 8013ca2:	687b      	ldr	r3, [r7, #4]
 8013ca4:	2205      	movs	r2, #5
 8013ca6:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,I,F,H,D");
 8013ca8:	687b      	ldr	r3, [r7, #4]
 8013caa:	33a4      	adds	r3, #164	; 0xa4
 8013cac:	4971      	ldr	r1, [pc, #452]	; (8013e74 <problem_fetch+0x12810>)
 8013cae:	461a      	mov	r2, r3
 8013cb0:	460b      	mov	r3, r1
 8013cb2:	cb03      	ldmia	r3!, {r0, r1}
 8013cb4:	6010      	str	r0, [r2, #0]
 8013cb6:	6051      	str	r1, [r2, #4]
 8013cb8:	881b      	ldrh	r3, [r3, #0]
 8013cba:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"6,10,13,16,18");
 8013cbc:	687b      	ldr	r3, [r7, #4]
 8013cbe:	3304      	adds	r3, #4
 8013cc0:	4a6d      	ldr	r2, [pc, #436]	; (8013e78 <problem_fetch+0x12814>)
 8013cc2:	461c      	mov	r4, r3
 8013cc4:	4613      	mov	r3, r2
 8013cc6:	cb07      	ldmia	r3!, {r0, r1, r2}
 8013cc8:	6020      	str	r0, [r4, #0]
 8013cca:	6061      	str	r1, [r4, #4]
 8013ccc:	60a2      	str	r2, [r4, #8]
 8013cce:	881b      	ldrh	r3, [r3, #0]
 8013cd0:	81a3      	strh	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,e");
 8013cd2:	687b      	ldr	r3, [r7, #4]
 8013cd4:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8013cd8:	4968      	ldr	r1, [pc, #416]	; (8013e7c <problem_fetch+0x12818>)
 8013cda:	461a      	mov	r2, r3
 8013cdc:	460b      	mov	r3, r1
 8013cde:	cb03      	ldmia	r3!, {r0, r1}
 8013ce0:	6010      	str	r0, [r2, #0]
 8013ce2:	6051      	str	r1, [r2, #4]
 8013ce4:	881b      	ldrh	r3, [r3, #0]
 8013ce6:	8113      	strh	r3, [r2, #8]
			break;
 8013ce8:	f008 bbec 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 543 :
			strcpy(p->name,"STRATIFICAZIONI SOCIALI");
 8013cec:	687b      	ldr	r3, [r7, #4]
 8013cee:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8013cf2:	4a63      	ldr	r2, [pc, #396]	; (8013e80 <problem_fetch+0x1281c>)
 8013cf4:	461d      	mov	r5, r3
 8013cf6:	4614      	mov	r4, r2
 8013cf8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8013cfa:	6028      	str	r0, [r5, #0]
 8013cfc:	6069      	str	r1, [r5, #4]
 8013cfe:	60aa      	str	r2, [r5, #8]
 8013d00:	60eb      	str	r3, [r5, #12]
 8013d02:	cc03      	ldmia	r4!, {r0, r1}
 8013d04:	6128      	str	r0, [r5, #16]
 8013d06:	6169      	str	r1, [r5, #20]
			strcpy(p->grade,"6C+");
 8013d08:	687b      	ldr	r3, [r7, #4]
 8013d0a:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8013d0e:	4a54      	ldr	r2, [pc, #336]	; (8013e60 <problem_fetch+0x127fc>)
 8013d10:	6810      	ldr	r0, [r2, #0]
 8013d12:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 8013d14:	687b      	ldr	r3, [r7, #4]
 8013d16:	2207      	movs	r2, #7
 8013d18:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,K,H,G,C,C,D");
 8013d1a:	687b      	ldr	r3, [r7, #4]
 8013d1c:	33a4      	adds	r3, #164	; 0xa4
 8013d1e:	4a59      	ldr	r2, [pc, #356]	; (8013e84 <problem_fetch+0x12820>)
 8013d20:	461c      	mov	r4, r3
 8013d22:	4613      	mov	r3, r2
 8013d24:	cb07      	ldmia	r3!, {r0, r1, r2}
 8013d26:	6020      	str	r0, [r4, #0]
 8013d28:	6061      	str	r1, [r4, #4]
 8013d2a:	60a2      	str	r2, [r4, #8]
 8013d2c:	881b      	ldrh	r3, [r3, #0]
 8013d2e:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,9,12,14,8,16,18");
 8013d30:	687b      	ldr	r3, [r7, #4]
 8013d32:	3304      	adds	r3, #4
 8013d34:	4a54      	ldr	r2, [pc, #336]	; (8013e88 <problem_fetch+0x12824>)
 8013d36:	461d      	mov	r5, r3
 8013d38:	4614      	mov	r4, r2
 8013d3a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8013d3c:	6028      	str	r0, [r5, #0]
 8013d3e:	6069      	str	r1, [r5, #4]
 8013d40:	60aa      	str	r2, [r5, #8]
 8013d42:	60eb      	str	r3, [r5, #12]
 8013d44:	8823      	ldrh	r3, [r4, #0]
 8013d46:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 8013d48:	687b      	ldr	r3, [r7, #4]
 8013d4a:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8013d4e:	4a4f      	ldr	r2, [pc, #316]	; (8013e8c <problem_fetch+0x12828>)
 8013d50:	461c      	mov	r4, r3
 8013d52:	4613      	mov	r3, r2
 8013d54:	cb07      	ldmia	r3!, {r0, r1, r2}
 8013d56:	6020      	str	r0, [r4, #0]
 8013d58:	6061      	str	r1, [r4, #4]
 8013d5a:	60a2      	str	r2, [r4, #8]
 8013d5c:	881b      	ldrh	r3, [r3, #0]
 8013d5e:	81a3      	strh	r3, [r4, #12]
			break;
 8013d60:	f008 bbb0 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 544 :
			strcpy(p->name,"CICCIOSPRUZZO");
 8013d64:	687b      	ldr	r3, [r7, #4]
 8013d66:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8013d6a:	4a49      	ldr	r2, [pc, #292]	; (8013e90 <problem_fetch+0x1282c>)
 8013d6c:	461c      	mov	r4, r3
 8013d6e:	4613      	mov	r3, r2
 8013d70:	cb07      	ldmia	r3!, {r0, r1, r2}
 8013d72:	6020      	str	r0, [r4, #0]
 8013d74:	6061      	str	r1, [r4, #4]
 8013d76:	60a2      	str	r2, [r4, #8]
 8013d78:	881b      	ldrh	r3, [r3, #0]
 8013d7a:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade,"7A");
 8013d7c:	687b      	ldr	r3, [r7, #4]
 8013d7e:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8013d82:	4a44      	ldr	r2, [pc, #272]	; (8013e94 <problem_fetch+0x12830>)
 8013d84:	8811      	ldrh	r1, [r2, #0]
 8013d86:	7892      	ldrb	r2, [r2, #2]
 8013d88:	8019      	strh	r1, [r3, #0]
 8013d8a:	709a      	strb	r2, [r3, #2]
			p->moveSize = 6;
 8013d8c:	687b      	ldr	r3, [r7, #4]
 8013d8e:	2206      	movs	r2, #6
 8013d90:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"C,A,F,A,E,D");
 8013d92:	687b      	ldr	r3, [r7, #4]
 8013d94:	33a4      	adds	r3, #164	; 0xa4
 8013d96:	4a40      	ldr	r2, [pc, #256]	; (8013e98 <problem_fetch+0x12834>)
 8013d98:	461c      	mov	r4, r3
 8013d9a:	4613      	mov	r3, r2
 8013d9c:	cb07      	ldmia	r3!, {r0, r1, r2}
 8013d9e:	6020      	str	r0, [r4, #0]
 8013da0:	6061      	str	r1, [r4, #4]
 8013da2:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,9,11,14,16,18");
 8013da4:	687b      	ldr	r3, [r7, #4]
 8013da6:	3304      	adds	r3, #4
 8013da8:	4a3c      	ldr	r2, [pc, #240]	; (8013e9c <problem_fetch+0x12838>)
 8013daa:	461c      	mov	r4, r3
 8013dac:	4615      	mov	r5, r2
 8013dae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8013db0:	6020      	str	r0, [r4, #0]
 8013db2:	6061      	str	r1, [r4, #4]
 8013db4:	60a2      	str	r2, [r4, #8]
 8013db6:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 8013db8:	687b      	ldr	r3, [r7, #4]
 8013dba:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8013dbe:	4a26      	ldr	r2, [pc, #152]	; (8013e58 <problem_fetch+0x127f4>)
 8013dc0:	461c      	mov	r4, r3
 8013dc2:	4613      	mov	r3, r2
 8013dc4:	cb07      	ldmia	r3!, {r0, r1, r2}
 8013dc6:	6020      	str	r0, [r4, #0]
 8013dc8:	6061      	str	r1, [r4, #4]
 8013dca:	60a2      	str	r2, [r4, #8]
			break;
 8013dcc:	f008 bb7a 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 545 :
			strcpy(p->name,"DOJO BLACK");
 8013dd0:	687b      	ldr	r3, [r7, #4]
 8013dd2:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8013dd6:	4932      	ldr	r1, [pc, #200]	; (8013ea0 <problem_fetch+0x1283c>)
 8013dd8:	461a      	mov	r2, r3
 8013dda:	460b      	mov	r3, r1
 8013ddc:	cb03      	ldmia	r3!, {r0, r1}
 8013dde:	6010      	str	r0, [r2, #0]
 8013de0:	6051      	str	r1, [r2, #4]
 8013de2:	8819      	ldrh	r1, [r3, #0]
 8013de4:	789b      	ldrb	r3, [r3, #2]
 8013de6:	8111      	strh	r1, [r2, #8]
 8013de8:	7293      	strb	r3, [r2, #10]
			strcpy(p->grade,"7A+");
 8013dea:	687b      	ldr	r3, [r7, #4]
 8013dec:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8013df0:	4a2c      	ldr	r2, [pc, #176]	; (8013ea4 <problem_fetch+0x12840>)
 8013df2:	6810      	ldr	r0, [r2, #0]
 8013df4:	6018      	str	r0, [r3, #0]
			p->moveSize = 8;
 8013df6:	687b      	ldr	r3, [r7, #4]
 8013df8:	2208      	movs	r2, #8
 8013dfa:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"H,K,I,J,D,G,C,D");
 8013dfc:	687b      	ldr	r3, [r7, #4]
 8013dfe:	33a4      	adds	r3, #164	; 0xa4
 8013e00:	4a29      	ldr	r2, [pc, #164]	; (8013ea8 <problem_fetch+0x12844>)
 8013e02:	461c      	mov	r4, r3
 8013e04:	4615      	mov	r5, r2
 8013e06:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8013e08:	6020      	str	r0, [r4, #0]
 8013e0a:	6061      	str	r1, [r4, #4]
 8013e0c:	60a2      	str	r2, [r4, #8]
 8013e0e:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,9,10,13,11,17,5,18");
 8013e10:	687b      	ldr	r3, [r7, #4]
 8013e12:	3304      	adds	r3, #4
 8013e14:	4a25      	ldr	r2, [pc, #148]	; (8013eac <problem_fetch+0x12848>)
 8013e16:	461d      	mov	r5, r3
 8013e18:	4614      	mov	r4, r2
 8013e1a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8013e1c:	6028      	str	r0, [r5, #0]
 8013e1e:	6069      	str	r1, [r5, #4]
 8013e20:	60aa      	str	r2, [r5, #8]
 8013e22:	60eb      	str	r3, [r5, #12]
 8013e24:	6820      	ldr	r0, [r4, #0]
 8013e26:	6128      	str	r0, [r5, #16]
 8013e28:	7923      	ldrb	r3, [r4, #4]
 8013e2a:	752b      	strb	r3, [r5, #20]
			strcpy(p->startFinish,"s,d,d,d,d,d,d,e");
 8013e2c:	687b      	ldr	r3, [r7, #4]
 8013e2e:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8013e32:	4a1f      	ldr	r2, [pc, #124]	; (8013eb0 <problem_fetch+0x1284c>)
 8013e34:	461c      	mov	r4, r3
 8013e36:	4615      	mov	r5, r2
 8013e38:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8013e3a:	6020      	str	r0, [r4, #0]
 8013e3c:	6061      	str	r1, [r4, #4]
 8013e3e:	60a2      	str	r2, [r4, #8]
 8013e40:	60e3      	str	r3, [r4, #12]
			break;
 8013e42:	f008 bb3f 	b.w	801c4c4 <problem_fetch+0x1ae60>
 8013e46:	bf00      	nop
 8013e48:	0802a29c 	.word	0x0802a29c
 8013e4c:	08023bf0 	.word	0x08023bf0
 8013e50:	0802a2a8 	.word	0x0802a2a8
 8013e54:	08024ac0 	.word	0x08024ac0
 8013e58:	08023ec0 	.word	0x08023ec0
 8013e5c:	0802a2b4 	.word	0x0802a2b4
 8013e60:	08023bbc 	.word	0x08023bbc
 8013e64:	0802a2c8 	.word	0x0802a2c8
 8013e68:	0802a2d8 	.word	0x0802a2d8
 8013e6c:	08023c48 	.word	0x08023c48
 8013e70:	0802a2ec 	.word	0x0802a2ec
 8013e74:	0802a304 	.word	0x0802a304
 8013e78:	0802a310 	.word	0x0802a310
 8013e7c:	08023ff0 	.word	0x08023ff0
 8013e80:	0802a320 	.word	0x0802a320
 8013e84:	0802a338 	.word	0x0802a338
 8013e88:	0802a348 	.word	0x0802a348
 8013e8c:	08023cac 	.word	0x08023cac
 8013e90:	0802a35c 	.word	0x0802a35c
 8013e94:	08023ae4 	.word	0x08023ae4
 8013e98:	0802a36c 	.word	0x0802a36c
 8013e9c:	08027a54 	.word	0x08027a54
 8013ea0:	0802a378 	.word	0x0802a378
 8013ea4:	08023cc4 	.word	0x08023cc4
 8013ea8:	0802a384 	.word	0x0802a384
 8013eac:	0802a394 	.word	0x0802a394
 8013eb0:	08023d34 	.word	0x08023d34
		case 546 :
			strcpy(p->name,"WOKE UP FEELIN FROGGY");
 8013eb4:	687b      	ldr	r3, [r7, #4]
 8013eb6:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8013eba:	4aae      	ldr	r2, [pc, #696]	; (8014174 <problem_fetch+0x12b10>)
 8013ebc:	461d      	mov	r5, r3
 8013ebe:	4614      	mov	r4, r2
 8013ec0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8013ec2:	6028      	str	r0, [r5, #0]
 8013ec4:	6069      	str	r1, [r5, #4]
 8013ec6:	60aa      	str	r2, [r5, #8]
 8013ec8:	60eb      	str	r3, [r5, #12]
 8013eca:	6820      	ldr	r0, [r4, #0]
 8013ecc:	6128      	str	r0, [r5, #16]
 8013ece:	88a3      	ldrh	r3, [r4, #4]
 8013ed0:	82ab      	strh	r3, [r5, #20]
			strcpy(p->grade,"7B+");
 8013ed2:	687b      	ldr	r3, [r7, #4]
 8013ed4:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8013ed8:	4aa7      	ldr	r2, [pc, #668]	; (8014178 <problem_fetch+0x12b14>)
 8013eda:	6810      	ldr	r0, [r2, #0]
 8013edc:	6018      	str	r0, [r3, #0]
			p->moveSize = 8;
 8013ede:	687b      	ldr	r3, [r7, #4]
 8013ee0:	2208      	movs	r2, #8
 8013ee2:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,E,F,E,J,K,I,I");
 8013ee4:	687b      	ldr	r3, [r7, #4]
 8013ee6:	33a4      	adds	r3, #164	; 0xa4
 8013ee8:	4aa4      	ldr	r2, [pc, #656]	; (801417c <problem_fetch+0x12b18>)
 8013eea:	461c      	mov	r4, r3
 8013eec:	4615      	mov	r5, r2
 8013eee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8013ef0:	6020      	str	r0, [r4, #0]
 8013ef2:	6061      	str	r1, [r4, #4]
 8013ef4:	60a2      	str	r2, [r4, #8]
 8013ef6:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,6,11,12,13,14,7,18");
 8013ef8:	687b      	ldr	r3, [r7, #4]
 8013efa:	3304      	adds	r3, #4
 8013efc:	4aa0      	ldr	r2, [pc, #640]	; (8014180 <problem_fetch+0x12b1c>)
 8013efe:	461d      	mov	r5, r3
 8013f00:	4614      	mov	r4, r2
 8013f02:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8013f04:	6028      	str	r0, [r5, #0]
 8013f06:	6069      	str	r1, [r5, #4]
 8013f08:	60aa      	str	r2, [r5, #8]
 8013f0a:	60eb      	str	r3, [r5, #12]
 8013f0c:	6820      	ldr	r0, [r4, #0]
 8013f0e:	6128      	str	r0, [r5, #16]
 8013f10:	7923      	ldrb	r3, [r4, #4]
 8013f12:	752b      	strb	r3, [r5, #20]
			strcpy(p->startFinish,"s,d,d,d,d,d,d,e");
 8013f14:	687b      	ldr	r3, [r7, #4]
 8013f16:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8013f1a:	4a9a      	ldr	r2, [pc, #616]	; (8014184 <problem_fetch+0x12b20>)
 8013f1c:	461c      	mov	r4, r3
 8013f1e:	4615      	mov	r5, r2
 8013f20:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8013f22:	6020      	str	r0, [r4, #0]
 8013f24:	6061      	str	r1, [r4, #4]
 8013f26:	60a2      	str	r2, [r4, #8]
 8013f28:	60e3      	str	r3, [r4, #12]
			break;
 8013f2a:	f008 bacb 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 547 :
			strcpy(p->name,"DDD");
 8013f2e:	687b      	ldr	r3, [r7, #4]
 8013f30:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8013f34:	4a94      	ldr	r2, [pc, #592]	; (8014188 <problem_fetch+0x12b24>)
 8013f36:	6810      	ldr	r0, [r2, #0]
 8013f38:	6018      	str	r0, [r3, #0]
			strcpy(p->grade,"6C");
 8013f3a:	687b      	ldr	r3, [r7, #4]
 8013f3c:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8013f40:	4a92      	ldr	r2, [pc, #584]	; (801418c <problem_fetch+0x12b28>)
 8013f42:	8811      	ldrh	r1, [r2, #0]
 8013f44:	7892      	ldrb	r2, [r2, #2]
 8013f46:	8019      	strh	r1, [r3, #0]
 8013f48:	709a      	strb	r2, [r3, #2]
			p->moveSize = 11;
 8013f4a:	687b      	ldr	r3, [r7, #4]
 8013f4c:	220b      	movs	r2, #11
 8013f4e:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,G,H,H,G,H,G,G,H,G,I");
 8013f50:	687b      	ldr	r3, [r7, #4]
 8013f52:	33a4      	adds	r3, #164	; 0xa4
 8013f54:	4a8e      	ldr	r2, [pc, #568]	; (8014190 <problem_fetch+0x12b2c>)
 8013f56:	461d      	mov	r5, r3
 8013f58:	4614      	mov	r4, r2
 8013f5a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8013f5c:	6028      	str	r0, [r5, #0]
 8013f5e:	6069      	str	r1, [r5, #4]
 8013f60:	60aa      	str	r2, [r5, #8]
 8013f62:	60eb      	str	r3, [r5, #12]
 8013f64:	6820      	ldr	r0, [r4, #0]
 8013f66:	6128      	str	r0, [r5, #16]
 8013f68:	88a3      	ldrh	r3, [r4, #4]
 8013f6a:	82ab      	strh	r3, [r5, #20]
			strcpy(p->moveNumbers,"4,6,8,10,10,13,14,15,16,17,18");
 8013f6c:	687b      	ldr	r3, [r7, #4]
 8013f6e:	3304      	adds	r3, #4
 8013f70:	4a88      	ldr	r2, [pc, #544]	; (8014194 <problem_fetch+0x12b30>)
 8013f72:	461d      	mov	r5, r3
 8013f74:	4614      	mov	r4, r2
 8013f76:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8013f78:	6028      	str	r0, [r5, #0]
 8013f7a:	6069      	str	r1, [r5, #4]
 8013f7c:	60aa      	str	r2, [r5, #8]
 8013f7e:	60eb      	str	r3, [r5, #12]
 8013f80:	cc07      	ldmia	r4!, {r0, r1, r2}
 8013f82:	6128      	str	r0, [r5, #16]
 8013f84:	6169      	str	r1, [r5, #20]
 8013f86:	61aa      	str	r2, [r5, #24]
 8013f88:	8823      	ldrh	r3, [r4, #0]
 8013f8a:	83ab      	strh	r3, [r5, #28]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,d,d,d,e");
 8013f8c:	687b      	ldr	r3, [r7, #4]
 8013f8e:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8013f92:	4a81      	ldr	r2, [pc, #516]	; (8014198 <problem_fetch+0x12b34>)
 8013f94:	461d      	mov	r5, r3
 8013f96:	4614      	mov	r4, r2
 8013f98:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8013f9a:	6028      	str	r0, [r5, #0]
 8013f9c:	6069      	str	r1, [r5, #4]
 8013f9e:	60aa      	str	r2, [r5, #8]
 8013fa0:	60eb      	str	r3, [r5, #12]
 8013fa2:	6820      	ldr	r0, [r4, #0]
 8013fa4:	6128      	str	r0, [r5, #16]
 8013fa6:	88a3      	ldrh	r3, [r4, #4]
 8013fa8:	82ab      	strh	r3, [r5, #20]
			break;
 8013faa:	f008 ba8b 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 548 :
			strcpy(p->name,"CHIAPPO");
 8013fae:	687b      	ldr	r3, [r7, #4]
 8013fb0:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8013fb4:	4979      	ldr	r1, [pc, #484]	; (801419c <problem_fetch+0x12b38>)
 8013fb6:	461a      	mov	r2, r3
 8013fb8:	460b      	mov	r3, r1
 8013fba:	cb03      	ldmia	r3!, {r0, r1}
 8013fbc:	6010      	str	r0, [r2, #0]
 8013fbe:	6051      	str	r1, [r2, #4]
			strcpy(p->grade,"6B+");
 8013fc0:	687b      	ldr	r3, [r7, #4]
 8013fc2:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8013fc6:	4a76      	ldr	r2, [pc, #472]	; (80141a0 <problem_fetch+0x12b3c>)
 8013fc8:	6810      	ldr	r0, [r2, #0]
 8013fca:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 8013fcc:	687b      	ldr	r3, [r7, #4]
 8013fce:	2207      	movs	r2, #7
 8013fd0:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,H,C,F,C,E,D");
 8013fd2:	687b      	ldr	r3, [r7, #4]
 8013fd4:	33a4      	adds	r3, #164	; 0xa4
 8013fd6:	4a73      	ldr	r2, [pc, #460]	; (80141a4 <problem_fetch+0x12b40>)
 8013fd8:	461c      	mov	r4, r3
 8013fda:	4613      	mov	r3, r2
 8013fdc:	cb07      	ldmia	r3!, {r0, r1, r2}
 8013fde:	6020      	str	r0, [r4, #0]
 8013fe0:	6061      	str	r1, [r4, #4]
 8013fe2:	60a2      	str	r2, [r4, #8]
 8013fe4:	881b      	ldrh	r3, [r3, #0]
 8013fe6:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,8,8,11,13,16,18");
 8013fe8:	687b      	ldr	r3, [r7, #4]
 8013fea:	3304      	adds	r3, #4
 8013fec:	4a6e      	ldr	r2, [pc, #440]	; (80141a8 <problem_fetch+0x12b44>)
 8013fee:	461d      	mov	r5, r3
 8013ff0:	4614      	mov	r4, r2
 8013ff2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8013ff4:	6028      	str	r0, [r5, #0]
 8013ff6:	6069      	str	r1, [r5, #4]
 8013ff8:	60aa      	str	r2, [r5, #8]
 8013ffa:	60eb      	str	r3, [r5, #12]
 8013ffc:	8823      	ldrh	r3, [r4, #0]
 8013ffe:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 8014000:	687b      	ldr	r3, [r7, #4]
 8014002:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8014006:	4a69      	ldr	r2, [pc, #420]	; (80141ac <problem_fetch+0x12b48>)
 8014008:	461c      	mov	r4, r3
 801400a:	4613      	mov	r3, r2
 801400c:	cb07      	ldmia	r3!, {r0, r1, r2}
 801400e:	6020      	str	r0, [r4, #0]
 8014010:	6061      	str	r1, [r4, #4]
 8014012:	60a2      	str	r2, [r4, #8]
 8014014:	881b      	ldrh	r3, [r3, #0]
 8014016:	81a3      	strh	r3, [r4, #12]
			break;
 8014018:	f008 ba54 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 549 :
			strcpy(p->name,"BIFFOSMEG");
 801401c:	687b      	ldr	r3, [r7, #4]
 801401e:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8014022:	4963      	ldr	r1, [pc, #396]	; (80141b0 <problem_fetch+0x12b4c>)
 8014024:	461a      	mov	r2, r3
 8014026:	460b      	mov	r3, r1
 8014028:	cb03      	ldmia	r3!, {r0, r1}
 801402a:	6010      	str	r0, [r2, #0]
 801402c:	6051      	str	r1, [r2, #4]
 801402e:	881b      	ldrh	r3, [r3, #0]
 8014030:	8113      	strh	r3, [r2, #8]
			strcpy(p->grade,"6C");
 8014032:	687b      	ldr	r3, [r7, #4]
 8014034:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8014038:	4a54      	ldr	r2, [pc, #336]	; (801418c <problem_fetch+0x12b28>)
 801403a:	8811      	ldrh	r1, [r2, #0]
 801403c:	7892      	ldrb	r2, [r2, #2]
 801403e:	8019      	strh	r1, [r3, #0]
 8014040:	709a      	strb	r2, [r3, #2]
			p->moveSize = 6;
 8014042:	687b      	ldr	r3, [r7, #4]
 8014044:	2206      	movs	r2, #6
 8014046:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,D,G,C,E,A");
 8014048:	687b      	ldr	r3, [r7, #4]
 801404a:	33a4      	adds	r3, #164	; 0xa4
 801404c:	4a59      	ldr	r2, [pc, #356]	; (80141b4 <problem_fetch+0x12b50>)
 801404e:	461c      	mov	r4, r3
 8014050:	4613      	mov	r3, r2
 8014052:	cb07      	ldmia	r3!, {r0, r1, r2}
 8014054:	6020      	str	r0, [r4, #0]
 8014056:	6061      	str	r1, [r4, #4]
 8014058:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,7,9,13,16,18");
 801405a:	687b      	ldr	r3, [r7, #4]
 801405c:	3304      	adds	r3, #4
 801405e:	4a56      	ldr	r2, [pc, #344]	; (80141b8 <problem_fetch+0x12b54>)
 8014060:	461c      	mov	r4, r3
 8014062:	4613      	mov	r3, r2
 8014064:	cb07      	ldmia	r3!, {r0, r1, r2}
 8014066:	6020      	str	r0, [r4, #0]
 8014068:	6061      	str	r1, [r4, #4]
 801406a:	60a2      	str	r2, [r4, #8]
 801406c:	881a      	ldrh	r2, [r3, #0]
 801406e:	789b      	ldrb	r3, [r3, #2]
 8014070:	81a2      	strh	r2, [r4, #12]
 8014072:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 8014074:	687b      	ldr	r3, [r7, #4]
 8014076:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 801407a:	4a50      	ldr	r2, [pc, #320]	; (80141bc <problem_fetch+0x12b58>)
 801407c:	461c      	mov	r4, r3
 801407e:	4613      	mov	r3, r2
 8014080:	cb07      	ldmia	r3!, {r0, r1, r2}
 8014082:	6020      	str	r0, [r4, #0]
 8014084:	6061      	str	r1, [r4, #4]
 8014086:	60a2      	str	r2, [r4, #8]
			break;
 8014088:	f008 ba1c 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 550 :
			strcpy(p->name,"HAY IS FOR HORSES");
 801408c:	687b      	ldr	r3, [r7, #4]
 801408e:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8014092:	4a4b      	ldr	r2, [pc, #300]	; (80141c0 <problem_fetch+0x12b5c>)
 8014094:	461d      	mov	r5, r3
 8014096:	4614      	mov	r4, r2
 8014098:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801409a:	6028      	str	r0, [r5, #0]
 801409c:	6069      	str	r1, [r5, #4]
 801409e:	60aa      	str	r2, [r5, #8]
 80140a0:	60eb      	str	r3, [r5, #12]
 80140a2:	8823      	ldrh	r3, [r4, #0]
 80140a4:	822b      	strh	r3, [r5, #16]
			strcpy(p->grade,"6C+");
 80140a6:	687b      	ldr	r3, [r7, #4]
 80140a8:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80140ac:	4a45      	ldr	r2, [pc, #276]	; (80141c4 <problem_fetch+0x12b60>)
 80140ae:	6810      	ldr	r0, [r2, #0]
 80140b0:	6018      	str	r0, [r3, #0]
			p->moveSize = 5;
 80140b2:	687b      	ldr	r3, [r7, #4]
 80140b4:	2205      	movs	r2, #5
 80140b6:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,H,G,D,D");
 80140b8:	687b      	ldr	r3, [r7, #4]
 80140ba:	33a4      	adds	r3, #164	; 0xa4
 80140bc:	4942      	ldr	r1, [pc, #264]	; (80141c8 <problem_fetch+0x12b64>)
 80140be:	461a      	mov	r2, r3
 80140c0:	460b      	mov	r3, r1
 80140c2:	cb03      	ldmia	r3!, {r0, r1}
 80140c4:	6010      	str	r0, [r2, #0]
 80140c6:	6051      	str	r1, [r2, #4]
 80140c8:	881b      	ldrh	r3, [r3, #0]
 80140ca:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"5,10,14,15,18");
 80140cc:	687b      	ldr	r3, [r7, #4]
 80140ce:	3304      	adds	r3, #4
 80140d0:	4a3e      	ldr	r2, [pc, #248]	; (80141cc <problem_fetch+0x12b68>)
 80140d2:	461c      	mov	r4, r3
 80140d4:	4613      	mov	r3, r2
 80140d6:	cb07      	ldmia	r3!, {r0, r1, r2}
 80140d8:	6020      	str	r0, [r4, #0]
 80140da:	6061      	str	r1, [r4, #4]
 80140dc:	60a2      	str	r2, [r4, #8]
 80140de:	881b      	ldrh	r3, [r3, #0]
 80140e0:	81a3      	strh	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,e");
 80140e2:	687b      	ldr	r3, [r7, #4]
 80140e4:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 80140e8:	4939      	ldr	r1, [pc, #228]	; (80141d0 <problem_fetch+0x12b6c>)
 80140ea:	461a      	mov	r2, r3
 80140ec:	460b      	mov	r3, r1
 80140ee:	cb03      	ldmia	r3!, {r0, r1}
 80140f0:	6010      	str	r0, [r2, #0]
 80140f2:	6051      	str	r1, [r2, #4]
 80140f4:	881b      	ldrh	r3, [r3, #0]
 80140f6:	8113      	strh	r3, [r2, #8]
			break;
 80140f8:	f008 b9e4 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 551 :
			strcpy(p->name,"IL LADRO DI POLLI");
 80140fc:	687b      	ldr	r3, [r7, #4]
 80140fe:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8014102:	4a34      	ldr	r2, [pc, #208]	; (80141d4 <problem_fetch+0x12b70>)
 8014104:	461d      	mov	r5, r3
 8014106:	4614      	mov	r4, r2
 8014108:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801410a:	6028      	str	r0, [r5, #0]
 801410c:	6069      	str	r1, [r5, #4]
 801410e:	60aa      	str	r2, [r5, #8]
 8014110:	60eb      	str	r3, [r5, #12]
 8014112:	8823      	ldrh	r3, [r4, #0]
 8014114:	822b      	strh	r3, [r5, #16]
			strcpy(p->grade,"6C+");
 8014116:	687b      	ldr	r3, [r7, #4]
 8014118:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801411c:	4a29      	ldr	r2, [pc, #164]	; (80141c4 <problem_fetch+0x12b60>)
 801411e:	6810      	ldr	r0, [r2, #0]
 8014120:	6018      	str	r0, [r3, #0]
			p->moveSize = 8;
 8014122:	687b      	ldr	r3, [r7, #4]
 8014124:	2208      	movs	r2, #8
 8014126:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"C,B,E,E,J,E,E,D");
 8014128:	687b      	ldr	r3, [r7, #4]
 801412a:	33a4      	adds	r3, #164	; 0xa4
 801412c:	4a2a      	ldr	r2, [pc, #168]	; (80141d8 <problem_fetch+0x12b74>)
 801412e:	461c      	mov	r4, r3
 8014130:	4615      	mov	r5, r2
 8014132:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8014134:	6020      	str	r0, [r4, #0]
 8014136:	6061      	str	r1, [r4, #4]
 8014138:	60a2      	str	r2, [r4, #8]
 801413a:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,6,8,9,7,12,16,18");
 801413c:	687b      	ldr	r3, [r7, #4]
 801413e:	3304      	adds	r3, #4
 8014140:	4a26      	ldr	r2, [pc, #152]	; (80141dc <problem_fetch+0x12b78>)
 8014142:	461d      	mov	r5, r3
 8014144:	4614      	mov	r4, r2
 8014146:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8014148:	6028      	str	r0, [r5, #0]
 801414a:	6069      	str	r1, [r5, #4]
 801414c:	60aa      	str	r2, [r5, #8]
 801414e:	60eb      	str	r3, [r5, #12]
 8014150:	8823      	ldrh	r3, [r4, #0]
 8014152:	78a2      	ldrb	r2, [r4, #2]
 8014154:	822b      	strh	r3, [r5, #16]
 8014156:	4613      	mov	r3, r2
 8014158:	74ab      	strb	r3, [r5, #18]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,e");
 801415a:	687b      	ldr	r3, [r7, #4]
 801415c:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8014160:	4a1f      	ldr	r2, [pc, #124]	; (80141e0 <problem_fetch+0x12b7c>)
 8014162:	461c      	mov	r4, r3
 8014164:	4615      	mov	r5, r2
 8014166:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8014168:	6020      	str	r0, [r4, #0]
 801416a:	6061      	str	r1, [r4, #4]
 801416c:	60a2      	str	r2, [r4, #8]
 801416e:	60e3      	str	r3, [r4, #12]
			break;
 8014170:	f008 b9a8 	b.w	801c4c4 <problem_fetch+0x1ae60>
 8014174:	0802a3ac 	.word	0x0802a3ac
 8014178:	08023c60 	.word	0x08023c60
 801417c:	0802a3c4 	.word	0x0802a3c4
 8014180:	0802a3d4 	.word	0x0802a3d4
 8014184:	08023d34 	.word	0x08023d34
 8014188:	0802a3ec 	.word	0x0802a3ec
 801418c:	08023bf0 	.word	0x08023bf0
 8014190:	0802a3f0 	.word	0x0802a3f0
 8014194:	0802a408 	.word	0x0802a408
 8014198:	08027484 	.word	0x08027484
 801419c:	0802a428 	.word	0x0802a428
 80141a0:	08023b24 	.word	0x08023b24
 80141a4:	0802a430 	.word	0x0802a430
 80141a8:	0802886c 	.word	0x0802886c
 80141ac:	08023cac 	.word	0x08023cac
 80141b0:	0802a440 	.word	0x0802a440
 80141b4:	0802a44c 	.word	0x0802a44c
 80141b8:	0802a458 	.word	0x0802a458
 80141bc:	08023ec0 	.word	0x08023ec0
 80141c0:	0802a468 	.word	0x0802a468
 80141c4:	08023bbc 	.word	0x08023bbc
 80141c8:	0802a47c 	.word	0x0802a47c
 80141cc:	08027b44 	.word	0x08027b44
 80141d0:	08023ff0 	.word	0x08023ff0
 80141d4:	0802a488 	.word	0x0802a488
 80141d8:	0802a49c 	.word	0x0802a49c
 80141dc:	0802a4ac 	.word	0x0802a4ac
 80141e0:	08023c48 	.word	0x08023c48
		case 552 :
			strcpy(p->name,"EVERY WHICH WAY BUT RIGHT");
 80141e4:	687b      	ldr	r3, [r7, #4]
 80141e6:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80141ea:	4ab6      	ldr	r2, [pc, #728]	; (80144c4 <problem_fetch+0x12e60>)
 80141ec:	461d      	mov	r5, r3
 80141ee:	4614      	mov	r4, r2
 80141f0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80141f2:	6028      	str	r0, [r5, #0]
 80141f4:	6069      	str	r1, [r5, #4]
 80141f6:	60aa      	str	r2, [r5, #8]
 80141f8:	60eb      	str	r3, [r5, #12]
 80141fa:	cc03      	ldmia	r4!, {r0, r1}
 80141fc:	6128      	str	r0, [r5, #16]
 80141fe:	6169      	str	r1, [r5, #20]
 8014200:	8823      	ldrh	r3, [r4, #0]
 8014202:	832b      	strh	r3, [r5, #24]
			strcpy(p->grade,"7A+");
 8014204:	687b      	ldr	r3, [r7, #4]
 8014206:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801420a:	4aaf      	ldr	r2, [pc, #700]	; (80144c8 <problem_fetch+0x12e64>)
 801420c:	6810      	ldr	r0, [r2, #0]
 801420e:	6018      	str	r0, [r3, #0]
			p->moveSize = 10;
 8014210:	687b      	ldr	r3, [r7, #4]
 8014212:	220a      	movs	r2, #10
 8014214:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,B,C,A,C,B,I,G,G,I");
 8014216:	687b      	ldr	r3, [r7, #4]
 8014218:	33a4      	adds	r3, #164	; 0xa4
 801421a:	4aac      	ldr	r2, [pc, #688]	; (80144cc <problem_fetch+0x12e68>)
 801421c:	461d      	mov	r5, r3
 801421e:	4614      	mov	r4, r2
 8014220:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8014222:	6028      	str	r0, [r5, #0]
 8014224:	6069      	str	r1, [r5, #4]
 8014226:	60aa      	str	r2, [r5, #8]
 8014228:	60eb      	str	r3, [r5, #12]
 801422a:	6820      	ldr	r0, [r4, #0]
 801422c:	6128      	str	r0, [r5, #16]
			strcpy(p->moveNumbers,"4,6,8,9,13,15,10,15,17,18");
 801422e:	687b      	ldr	r3, [r7, #4]
 8014230:	3304      	adds	r3, #4
 8014232:	4aa7      	ldr	r2, [pc, #668]	; (80144d0 <problem_fetch+0x12e6c>)
 8014234:	461d      	mov	r5, r3
 8014236:	4614      	mov	r4, r2
 8014238:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801423a:	6028      	str	r0, [r5, #0]
 801423c:	6069      	str	r1, [r5, #4]
 801423e:	60aa      	str	r2, [r5, #8]
 8014240:	60eb      	str	r3, [r5, #12]
 8014242:	cc03      	ldmia	r4!, {r0, r1}
 8014244:	6128      	str	r0, [r5, #16]
 8014246:	6169      	str	r1, [r5, #20]
 8014248:	8823      	ldrh	r3, [r4, #0]
 801424a:	832b      	strh	r3, [r5, #24]
			strcpy(p->startFinish,"s,d,d,d,d,d,d,d,d,e");
 801424c:	687b      	ldr	r3, [r7, #4]
 801424e:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8014252:	4aa0      	ldr	r2, [pc, #640]	; (80144d4 <problem_fetch+0x12e70>)
 8014254:	461d      	mov	r5, r3
 8014256:	4614      	mov	r4, r2
 8014258:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801425a:	6028      	str	r0, [r5, #0]
 801425c:	6069      	str	r1, [r5, #4]
 801425e:	60aa      	str	r2, [r5, #8]
 8014260:	60eb      	str	r3, [r5, #12]
 8014262:	6820      	ldr	r0, [r4, #0]
 8014264:	6128      	str	r0, [r5, #16]
			break;
 8014266:	f008 b92d 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 553 :
			strcpy(p->name,"180 CAMPUS");
 801426a:	687b      	ldr	r3, [r7, #4]
 801426c:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8014270:	4999      	ldr	r1, [pc, #612]	; (80144d8 <problem_fetch+0x12e74>)
 8014272:	461a      	mov	r2, r3
 8014274:	460b      	mov	r3, r1
 8014276:	cb03      	ldmia	r3!, {r0, r1}
 8014278:	6010      	str	r0, [r2, #0]
 801427a:	6051      	str	r1, [r2, #4]
 801427c:	8819      	ldrh	r1, [r3, #0]
 801427e:	789b      	ldrb	r3, [r3, #2]
 8014280:	8111      	strh	r1, [r2, #8]
 8014282:	7293      	strb	r3, [r2, #10]
			strcpy(p->grade,"7A");
 8014284:	687b      	ldr	r3, [r7, #4]
 8014286:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801428a:	4a94      	ldr	r2, [pc, #592]	; (80144dc <problem_fetch+0x12e78>)
 801428c:	8811      	ldrh	r1, [r2, #0]
 801428e:	7892      	ldrb	r2, [r2, #2]
 8014290:	8019      	strh	r1, [r3, #0]
 8014292:	709a      	strb	r2, [r3, #2]
			p->moveSize = 5;
 8014294:	687b      	ldr	r3, [r7, #4]
 8014296:	2205      	movs	r2, #5
 8014298:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,K,H,I,D");
 801429a:	687b      	ldr	r3, [r7, #4]
 801429c:	33a4      	adds	r3, #164	; 0xa4
 801429e:	4990      	ldr	r1, [pc, #576]	; (80144e0 <problem_fetch+0x12e7c>)
 80142a0:	461a      	mov	r2, r3
 80142a2:	460b      	mov	r3, r1
 80142a4:	cb03      	ldmia	r3!, {r0, r1}
 80142a6:	6010      	str	r0, [r2, #0]
 80142a8:	6051      	str	r1, [r2, #4]
 80142aa:	881b      	ldrh	r3, [r3, #0]
 80142ac:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"5,9,13,14,18");
 80142ae:	687b      	ldr	r3, [r7, #4]
 80142b0:	3304      	adds	r3, #4
 80142b2:	4a8c      	ldr	r2, [pc, #560]	; (80144e4 <problem_fetch+0x12e80>)
 80142b4:	461c      	mov	r4, r3
 80142b6:	4613      	mov	r3, r2
 80142b8:	cb07      	ldmia	r3!, {r0, r1, r2}
 80142ba:	6020      	str	r0, [r4, #0]
 80142bc:	6061      	str	r1, [r4, #4]
 80142be:	60a2      	str	r2, [r4, #8]
 80142c0:	781b      	ldrb	r3, [r3, #0]
 80142c2:	7323      	strb	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,e");
 80142c4:	687b      	ldr	r3, [r7, #4]
 80142c6:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 80142ca:	4987      	ldr	r1, [pc, #540]	; (80144e8 <problem_fetch+0x12e84>)
 80142cc:	461a      	mov	r2, r3
 80142ce:	460b      	mov	r3, r1
 80142d0:	cb03      	ldmia	r3!, {r0, r1}
 80142d2:	6010      	str	r0, [r2, #0]
 80142d4:	6051      	str	r1, [r2, #4]
 80142d6:	881b      	ldrh	r3, [r3, #0]
 80142d8:	8113      	strh	r3, [r2, #8]
			break;
 80142da:	f008 b8f3 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 554 :
			strcpy(p->name,"JOHNNY REHAB 4");
 80142de:	687b      	ldr	r3, [r7, #4]
 80142e0:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80142e4:	4a81      	ldr	r2, [pc, #516]	; (80144ec <problem_fetch+0x12e88>)
 80142e6:	461c      	mov	r4, r3
 80142e8:	4613      	mov	r3, r2
 80142ea:	cb07      	ldmia	r3!, {r0, r1, r2}
 80142ec:	6020      	str	r0, [r4, #0]
 80142ee:	6061      	str	r1, [r4, #4]
 80142f0:	60a2      	str	r2, [r4, #8]
 80142f2:	881a      	ldrh	r2, [r3, #0]
 80142f4:	789b      	ldrb	r3, [r3, #2]
 80142f6:	81a2      	strh	r2, [r4, #12]
 80142f8:	73a3      	strb	r3, [r4, #14]
			strcpy(p->grade,"6C+");
 80142fa:	687b      	ldr	r3, [r7, #4]
 80142fc:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8014300:	4a7b      	ldr	r2, [pc, #492]	; (80144f0 <problem_fetch+0x12e8c>)
 8014302:	6810      	ldr	r0, [r2, #0]
 8014304:	6018      	str	r0, [r3, #0]
			p->moveSize = 9;
 8014306:	687b      	ldr	r3, [r7, #4]
 8014308:	2209      	movs	r2, #9
 801430a:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,J,H,K,J,I,E,J,D");
 801430c:	687b      	ldr	r3, [r7, #4]
 801430e:	33a4      	adds	r3, #164	; 0xa4
 8014310:	4a78      	ldr	r2, [pc, #480]	; (80144f4 <problem_fetch+0x12e90>)
 8014312:	461d      	mov	r5, r3
 8014314:	4614      	mov	r4, r2
 8014316:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8014318:	6028      	str	r0, [r5, #0]
 801431a:	6069      	str	r1, [r5, #4]
 801431c:	60aa      	str	r2, [r5, #8]
 801431e:	60eb      	str	r3, [r5, #12]
 8014320:	8823      	ldrh	r3, [r4, #0]
 8014322:	822b      	strh	r3, [r5, #16]
			strcpy(p->moveNumbers,"4,5,10,9,12,14,8,16,18");
 8014324:	687b      	ldr	r3, [r7, #4]
 8014326:	3304      	adds	r3, #4
 8014328:	4a73      	ldr	r2, [pc, #460]	; (80144f8 <problem_fetch+0x12e94>)
 801432a:	461c      	mov	r4, r3
 801432c:	4615      	mov	r5, r2
 801432e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8014330:	6020      	str	r0, [r4, #0]
 8014332:	6061      	str	r1, [r4, #4]
 8014334:	60a2      	str	r2, [r4, #8]
 8014336:	60e3      	str	r3, [r4, #12]
 8014338:	6828      	ldr	r0, [r5, #0]
 801433a:	6120      	str	r0, [r4, #16]
 801433c:	88ab      	ldrh	r3, [r5, #4]
 801433e:	79aa      	ldrb	r2, [r5, #6]
 8014340:	82a3      	strh	r3, [r4, #20]
 8014342:	4613      	mov	r3, r2
 8014344:	75a3      	strb	r3, [r4, #22]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,d,e");
 8014346:	687b      	ldr	r3, [r7, #4]
 8014348:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 801434c:	4a6b      	ldr	r2, [pc, #428]	; (80144fc <problem_fetch+0x12e98>)
 801434e:	461d      	mov	r5, r3
 8014350:	4614      	mov	r4, r2
 8014352:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8014354:	6028      	str	r0, [r5, #0]
 8014356:	6069      	str	r1, [r5, #4]
 8014358:	60aa      	str	r2, [r5, #8]
 801435a:	60eb      	str	r3, [r5, #12]
 801435c:	8823      	ldrh	r3, [r4, #0]
 801435e:	822b      	strh	r3, [r5, #16]
			break;
 8014360:	f008 b8b0 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 555 :
			strcpy(p->name,"FULCRO HARD");
 8014364:	687b      	ldr	r3, [r7, #4]
 8014366:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801436a:	4a65      	ldr	r2, [pc, #404]	; (8014500 <problem_fetch+0x12e9c>)
 801436c:	461c      	mov	r4, r3
 801436e:	4613      	mov	r3, r2
 8014370:	cb07      	ldmia	r3!, {r0, r1, r2}
 8014372:	6020      	str	r0, [r4, #0]
 8014374:	6061      	str	r1, [r4, #4]
 8014376:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade,"7C");
 8014378:	687b      	ldr	r3, [r7, #4]
 801437a:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801437e:	4a61      	ldr	r2, [pc, #388]	; (8014504 <problem_fetch+0x12ea0>)
 8014380:	8811      	ldrh	r1, [r2, #0]
 8014382:	7892      	ldrb	r2, [r2, #2]
 8014384:	8019      	strh	r1, [r3, #0]
 8014386:	709a      	strb	r2, [r3, #2]
			p->moveSize = 6;
 8014388:	687b      	ldr	r3, [r7, #4]
 801438a:	2206      	movs	r2, #6
 801438c:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,G,I,D,E,D");
 801438e:	687b      	ldr	r3, [r7, #4]
 8014390:	33a4      	adds	r3, #164	; 0xa4
 8014392:	4a5d      	ldr	r2, [pc, #372]	; (8014508 <problem_fetch+0x12ea4>)
 8014394:	461c      	mov	r4, r3
 8014396:	4613      	mov	r3, r2
 8014398:	cb07      	ldmia	r3!, {r0, r1, r2}
 801439a:	6020      	str	r0, [r4, #0]
 801439c:	6061      	str	r1, [r4, #4]
 801439e:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,6,9,11,16,18");
 80143a0:	687b      	ldr	r3, [r7, #4]
 80143a2:	3304      	adds	r3, #4
 80143a4:	4a59      	ldr	r2, [pc, #356]	; (801450c <problem_fetch+0x12ea8>)
 80143a6:	461c      	mov	r4, r3
 80143a8:	4613      	mov	r3, r2
 80143aa:	cb07      	ldmia	r3!, {r0, r1, r2}
 80143ac:	6020      	str	r0, [r4, #0]
 80143ae:	6061      	str	r1, [r4, #4]
 80143b0:	60a2      	str	r2, [r4, #8]
 80143b2:	881a      	ldrh	r2, [r3, #0]
 80143b4:	789b      	ldrb	r3, [r3, #2]
 80143b6:	81a2      	strh	r2, [r4, #12]
 80143b8:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish,"s,s,d,d,d,e");
 80143ba:	687b      	ldr	r3, [r7, #4]
 80143bc:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 80143c0:	4a53      	ldr	r2, [pc, #332]	; (8014510 <problem_fetch+0x12eac>)
 80143c2:	461c      	mov	r4, r3
 80143c4:	4613      	mov	r3, r2
 80143c6:	cb07      	ldmia	r3!, {r0, r1, r2}
 80143c8:	6020      	str	r0, [r4, #0]
 80143ca:	6061      	str	r1, [r4, #4]
 80143cc:	60a2      	str	r2, [r4, #8]
			break;
 80143ce:	f008 b879 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 556 :
			strcpy(p->name,"FORSØK 15");
 80143d2:	687b      	ldr	r3, [r7, #4]
 80143d4:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80143d8:	494e      	ldr	r1, [pc, #312]	; (8014514 <problem_fetch+0x12eb0>)
 80143da:	461a      	mov	r2, r3
 80143dc:	460b      	mov	r3, r1
 80143de:	cb03      	ldmia	r3!, {r0, r1}
 80143e0:	6010      	str	r0, [r2, #0]
 80143e2:	6051      	str	r1, [r2, #4]
 80143e4:	8819      	ldrh	r1, [r3, #0]
 80143e6:	789b      	ldrb	r3, [r3, #2]
 80143e8:	8111      	strh	r1, [r2, #8]
 80143ea:	7293      	strb	r3, [r2, #10]
			strcpy(p->grade,"6C+");
 80143ec:	687b      	ldr	r3, [r7, #4]
 80143ee:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80143f2:	4a3f      	ldr	r2, [pc, #252]	; (80144f0 <problem_fetch+0x12e8c>)
 80143f4:	6810      	ldr	r0, [r2, #0]
 80143f6:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 80143f8:	687b      	ldr	r3, [r7, #4]
 80143fa:	2207      	movs	r2, #7
 80143fc:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"H,H,C,F,C,D,A");
 80143fe:	687b      	ldr	r3, [r7, #4]
 8014400:	33a4      	adds	r3, #164	; 0xa4
 8014402:	4a45      	ldr	r2, [pc, #276]	; (8014518 <problem_fetch+0x12eb4>)
 8014404:	461c      	mov	r4, r3
 8014406:	4613      	mov	r3, r2
 8014408:	cb07      	ldmia	r3!, {r0, r1, r2}
 801440a:	6020      	str	r0, [r4, #0]
 801440c:	6061      	str	r1, [r4, #4]
 801440e:	60a2      	str	r2, [r4, #8]
 8014410:	881b      	ldrh	r3, [r3, #0]
 8014412:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,8,8,11,13,15,18");
 8014414:	687b      	ldr	r3, [r7, #4]
 8014416:	3304      	adds	r3, #4
 8014418:	4a40      	ldr	r2, [pc, #256]	; (801451c <problem_fetch+0x12eb8>)
 801441a:	461d      	mov	r5, r3
 801441c:	4614      	mov	r4, r2
 801441e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8014420:	6028      	str	r0, [r5, #0]
 8014422:	6069      	str	r1, [r5, #4]
 8014424:	60aa      	str	r2, [r5, #8]
 8014426:	60eb      	str	r3, [r5, #12]
 8014428:	8823      	ldrh	r3, [r4, #0]
 801442a:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 801442c:	687b      	ldr	r3, [r7, #4]
 801442e:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8014432:	4a3b      	ldr	r2, [pc, #236]	; (8014520 <problem_fetch+0x12ebc>)
 8014434:	461c      	mov	r4, r3
 8014436:	4613      	mov	r3, r2
 8014438:	cb07      	ldmia	r3!, {r0, r1, r2}
 801443a:	6020      	str	r0, [r4, #0]
 801443c:	6061      	str	r1, [r4, #4]
 801443e:	60a2      	str	r2, [r4, #8]
 8014440:	881b      	ldrh	r3, [r3, #0]
 8014442:	81a3      	strh	r3, [r4, #12]
			break;
 8014444:	f008 b83e 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 557 :
			strcpy(p->name,"ALEXS PROBLEM NUMBER ONE");
 8014448:	687b      	ldr	r3, [r7, #4]
 801444a:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801444e:	4a35      	ldr	r2, [pc, #212]	; (8014524 <problem_fetch+0x12ec0>)
 8014450:	461d      	mov	r5, r3
 8014452:	4614      	mov	r4, r2
 8014454:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8014456:	6028      	str	r0, [r5, #0]
 8014458:	6069      	str	r1, [r5, #4]
 801445a:	60aa      	str	r2, [r5, #8]
 801445c:	60eb      	str	r3, [r5, #12]
 801445e:	cc03      	ldmia	r4!, {r0, r1}
 8014460:	6128      	str	r0, [r5, #16]
 8014462:	6169      	str	r1, [r5, #20]
 8014464:	7823      	ldrb	r3, [r4, #0]
 8014466:	762b      	strb	r3, [r5, #24]
			strcpy(p->grade,"6B+");
 8014468:	687b      	ldr	r3, [r7, #4]
 801446a:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801446e:	4a2e      	ldr	r2, [pc, #184]	; (8014528 <problem_fetch+0x12ec4>)
 8014470:	6810      	ldr	r0, [r2, #0]
 8014472:	6018      	str	r0, [r3, #0]
			p->moveSize = 8;
 8014474:	687b      	ldr	r3, [r7, #4]
 8014476:	2208      	movs	r2, #8
 8014478:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"B,E,E,B,E,A,D,D");
 801447a:	687b      	ldr	r3, [r7, #4]
 801447c:	33a4      	adds	r3, #164	; 0xa4
 801447e:	4a2b      	ldr	r2, [pc, #172]	; (801452c <problem_fetch+0x12ec8>)
 8014480:	461c      	mov	r4, r3
 8014482:	4615      	mov	r5, r2
 8014484:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8014486:	6020      	str	r0, [r4, #0]
 8014488:	6061      	str	r1, [r4, #4]
 801448a:	60a2      	str	r2, [r4, #8]
 801448c:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"6,6,8,10,12,14,15,18");
 801448e:	687b      	ldr	r3, [r7, #4]
 8014490:	3304      	adds	r3, #4
 8014492:	4a27      	ldr	r2, [pc, #156]	; (8014530 <problem_fetch+0x12ecc>)
 8014494:	461d      	mov	r5, r3
 8014496:	4614      	mov	r4, r2
 8014498:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801449a:	6028      	str	r0, [r5, #0]
 801449c:	6069      	str	r1, [r5, #4]
 801449e:	60aa      	str	r2, [r5, #8]
 80144a0:	60eb      	str	r3, [r5, #12]
 80144a2:	6820      	ldr	r0, [r4, #0]
 80144a4:	6128      	str	r0, [r5, #16]
 80144a6:	7923      	ldrb	r3, [r4, #4]
 80144a8:	752b      	strb	r3, [r5, #20]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,e");
 80144aa:	687b      	ldr	r3, [r7, #4]
 80144ac:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 80144b0:	4a20      	ldr	r2, [pc, #128]	; (8014534 <problem_fetch+0x12ed0>)
 80144b2:	461c      	mov	r4, r3
 80144b4:	4615      	mov	r5, r2
 80144b6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80144b8:	6020      	str	r0, [r4, #0]
 80144ba:	6061      	str	r1, [r4, #4]
 80144bc:	60a2      	str	r2, [r4, #8]
 80144be:	60e3      	str	r3, [r4, #12]
			break;
 80144c0:	f008 b800 	b.w	801c4c4 <problem_fetch+0x1ae60>
 80144c4:	0802a4c0 	.word	0x0802a4c0
 80144c8:	08023cc4 	.word	0x08023cc4
 80144cc:	0802a4dc 	.word	0x0802a4dc
 80144d0:	0802a4f0 	.word	0x0802a4f0
 80144d4:	08024e7c 	.word	0x08024e7c
 80144d8:	0802a50c 	.word	0x0802a50c
 80144dc:	08023ae4 	.word	0x08023ae4
 80144e0:	0802a518 	.word	0x0802a518
 80144e4:	08025760 	.word	0x08025760
 80144e8:	08023ff0 	.word	0x08023ff0
 80144ec:	0802a524 	.word	0x0802a524
 80144f0:	08023bbc 	.word	0x08023bbc
 80144f4:	0802a534 	.word	0x0802a534
 80144f8:	0802a548 	.word	0x0802a548
 80144fc:	08024b08 	.word	0x08024b08
 8014500:	0802a560 	.word	0x0802a560
 8014504:	08024358 	.word	0x08024358
 8014508:	0802a56c 	.word	0x0802a56c
 801450c:	08023e88 	.word	0x08023e88
 8014510:	08023b04 	.word	0x08023b04
 8014514:	0802a578 	.word	0x0802a578
 8014518:	0802a584 	.word	0x0802a584
 801451c:	0802880c 	.word	0x0802880c
 8014520:	08023cac 	.word	0x08023cac
 8014524:	0802a594 	.word	0x0802a594
 8014528:	08023b24 	.word	0x08023b24
 801452c:	0802a5b0 	.word	0x0802a5b0
 8014530:	0802a5c0 	.word	0x0802a5c0
 8014534:	08023c48 	.word	0x08023c48
		case 558 :
			strcpy(p->name,"BLABLUB");
 8014538:	687b      	ldr	r3, [r7, #4]
 801453a:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801453e:	49ab      	ldr	r1, [pc, #684]	; (80147ec <problem_fetch+0x13188>)
 8014540:	461a      	mov	r2, r3
 8014542:	460b      	mov	r3, r1
 8014544:	cb03      	ldmia	r3!, {r0, r1}
 8014546:	6010      	str	r0, [r2, #0]
 8014548:	6051      	str	r1, [r2, #4]
			strcpy(p->grade,"6C");
 801454a:	687b      	ldr	r3, [r7, #4]
 801454c:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8014550:	4aa7      	ldr	r2, [pc, #668]	; (80147f0 <problem_fetch+0x1318c>)
 8014552:	8811      	ldrh	r1, [r2, #0]
 8014554:	7892      	ldrb	r2, [r2, #2]
 8014556:	8019      	strh	r1, [r3, #0]
 8014558:	709a      	strb	r2, [r3, #2]
			p->moveSize = 7;
 801455a:	687b      	ldr	r3, [r7, #4]
 801455c:	2207      	movs	r2, #7
 801455e:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"B,E,B,E,A,D,D");
 8014560:	687b      	ldr	r3, [r7, #4]
 8014562:	33a4      	adds	r3, #164	; 0xa4
 8014564:	4aa3      	ldr	r2, [pc, #652]	; (80147f4 <problem_fetch+0x13190>)
 8014566:	461c      	mov	r4, r3
 8014568:	4613      	mov	r3, r2
 801456a:	cb07      	ldmia	r3!, {r0, r1, r2}
 801456c:	6020      	str	r0, [r4, #0]
 801456e:	6061      	str	r1, [r4, #4]
 8014570:	60a2      	str	r2, [r4, #8]
 8014572:	881b      	ldrh	r3, [r3, #0]
 8014574:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"6,6,10,12,14,15,18");
 8014576:	687b      	ldr	r3, [r7, #4]
 8014578:	3304      	adds	r3, #4
 801457a:	4a9f      	ldr	r2, [pc, #636]	; (80147f8 <problem_fetch+0x13194>)
 801457c:	461d      	mov	r5, r3
 801457e:	4614      	mov	r4, r2
 8014580:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8014582:	6028      	str	r0, [r5, #0]
 8014584:	6069      	str	r1, [r5, #4]
 8014586:	60aa      	str	r2, [r5, #8]
 8014588:	60eb      	str	r3, [r5, #12]
 801458a:	8823      	ldrh	r3, [r4, #0]
 801458c:	78a2      	ldrb	r2, [r4, #2]
 801458e:	822b      	strh	r3, [r5, #16]
 8014590:	4613      	mov	r3, r2
 8014592:	74ab      	strb	r3, [r5, #18]
			strcpy(p->startFinish,"s,s,d,d,d,d,e");
 8014594:	687b      	ldr	r3, [r7, #4]
 8014596:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 801459a:	4a98      	ldr	r2, [pc, #608]	; (80147fc <problem_fetch+0x13198>)
 801459c:	461c      	mov	r4, r3
 801459e:	4613      	mov	r3, r2
 80145a0:	cb07      	ldmia	r3!, {r0, r1, r2}
 80145a2:	6020      	str	r0, [r4, #0]
 80145a4:	6061      	str	r1, [r4, #4]
 80145a6:	60a2      	str	r2, [r4, #8]
 80145a8:	881b      	ldrh	r3, [r3, #0]
 80145aa:	81a3      	strh	r3, [r4, #12]
			break;
 80145ac:	f007 bf8a 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 559 :
			strcpy(p->name,"CRANK IT UP A NOTCH!");
 80145b0:	687b      	ldr	r3, [r7, #4]
 80145b2:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80145b6:	4a92      	ldr	r2, [pc, #584]	; (8014800 <problem_fetch+0x1319c>)
 80145b8:	461d      	mov	r5, r3
 80145ba:	4614      	mov	r4, r2
 80145bc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80145be:	6028      	str	r0, [r5, #0]
 80145c0:	6069      	str	r1, [r5, #4]
 80145c2:	60aa      	str	r2, [r5, #8]
 80145c4:	60eb      	str	r3, [r5, #12]
 80145c6:	6820      	ldr	r0, [r4, #0]
 80145c8:	6128      	str	r0, [r5, #16]
 80145ca:	7923      	ldrb	r3, [r4, #4]
 80145cc:	752b      	strb	r3, [r5, #20]
			strcpy(p->grade,"7A+");
 80145ce:	687b      	ldr	r3, [r7, #4]
 80145d0:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80145d4:	4a8b      	ldr	r2, [pc, #556]	; (8014804 <problem_fetch+0x131a0>)
 80145d6:	6810      	ldr	r0, [r2, #0]
 80145d8:	6018      	str	r0, [r3, #0]
			p->moveSize = 4;
 80145da:	687b      	ldr	r3, [r7, #4]
 80145dc:	2204      	movs	r2, #4
 80145de:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,F,C,D");
 80145e0:	687b      	ldr	r3, [r7, #4]
 80145e2:	33a4      	adds	r3, #164	; 0xa4
 80145e4:	4988      	ldr	r1, [pc, #544]	; (8014808 <problem_fetch+0x131a4>)
 80145e6:	461a      	mov	r2, r3
 80145e8:	460b      	mov	r3, r1
 80145ea:	cb03      	ldmia	r3!, {r0, r1}
 80145ec:	6010      	str	r0, [r2, #0]
 80145ee:	6051      	str	r1, [r2, #4]
			strcpy(p->moveNumbers,"6,11,13,18");
 80145f0:	687b      	ldr	r3, [r7, #4]
 80145f2:	3304      	adds	r3, #4
 80145f4:	4985      	ldr	r1, [pc, #532]	; (801480c <problem_fetch+0x131a8>)
 80145f6:	461a      	mov	r2, r3
 80145f8:	460b      	mov	r3, r1
 80145fa:	cb03      	ldmia	r3!, {r0, r1}
 80145fc:	6010      	str	r0, [r2, #0]
 80145fe:	6051      	str	r1, [r2, #4]
 8014600:	8819      	ldrh	r1, [r3, #0]
 8014602:	789b      	ldrb	r3, [r3, #2]
 8014604:	8111      	strh	r1, [r2, #8]
 8014606:	7293      	strb	r3, [r2, #10]
			strcpy(p->startFinish,"s,d,d,e");
 8014608:	687b      	ldr	r3, [r7, #4]
 801460a:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 801460e:	4980      	ldr	r1, [pc, #512]	; (8014810 <problem_fetch+0x131ac>)
 8014610:	461a      	mov	r2, r3
 8014612:	460b      	mov	r3, r1
 8014614:	cb03      	ldmia	r3!, {r0, r1}
 8014616:	6010      	str	r0, [r2, #0]
 8014618:	6051      	str	r1, [r2, #4]
			break;
 801461a:	f007 bf53 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 560 :
			strcpy(p->name,"HOLY IWAN");
 801461e:	687b      	ldr	r3, [r7, #4]
 8014620:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8014624:	497b      	ldr	r1, [pc, #492]	; (8014814 <problem_fetch+0x131b0>)
 8014626:	461a      	mov	r2, r3
 8014628:	460b      	mov	r3, r1
 801462a:	cb03      	ldmia	r3!, {r0, r1}
 801462c:	6010      	str	r0, [r2, #0]
 801462e:	6051      	str	r1, [r2, #4]
 8014630:	881b      	ldrh	r3, [r3, #0]
 8014632:	8113      	strh	r3, [r2, #8]
			strcpy(p->grade,"6B+");
 8014634:	687b      	ldr	r3, [r7, #4]
 8014636:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801463a:	4a77      	ldr	r2, [pc, #476]	; (8014818 <problem_fetch+0x131b4>)
 801463c:	6810      	ldr	r0, [r2, #0]
 801463e:	6018      	str	r0, [r3, #0]
			p->moveSize = 10;
 8014640:	687b      	ldr	r3, [r7, #4]
 8014642:	220a      	movs	r2, #10
 8014644:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"B,E,E,C,B,E,C,D,C,D");
 8014646:	687b      	ldr	r3, [r7, #4]
 8014648:	33a4      	adds	r3, #164	; 0xa4
 801464a:	4a74      	ldr	r2, [pc, #464]	; (801481c <problem_fetch+0x131b8>)
 801464c:	461d      	mov	r5, r3
 801464e:	4614      	mov	r4, r2
 8014650:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8014652:	6028      	str	r0, [r5, #0]
 8014654:	6069      	str	r1, [r5, #4]
 8014656:	60aa      	str	r2, [r5, #8]
 8014658:	60eb      	str	r3, [r5, #12]
 801465a:	6820      	ldr	r0, [r4, #0]
 801465c:	6128      	str	r0, [r5, #16]
			strcpy(p->moveNumbers,"6,6,8,8,10,12,13,15,16,18");
 801465e:	687b      	ldr	r3, [r7, #4]
 8014660:	3304      	adds	r3, #4
 8014662:	4a6f      	ldr	r2, [pc, #444]	; (8014820 <problem_fetch+0x131bc>)
 8014664:	461d      	mov	r5, r3
 8014666:	4614      	mov	r4, r2
 8014668:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801466a:	6028      	str	r0, [r5, #0]
 801466c:	6069      	str	r1, [r5, #4]
 801466e:	60aa      	str	r2, [r5, #8]
 8014670:	60eb      	str	r3, [r5, #12]
 8014672:	cc03      	ldmia	r4!, {r0, r1}
 8014674:	6128      	str	r0, [r5, #16]
 8014676:	6169      	str	r1, [r5, #20]
 8014678:	8823      	ldrh	r3, [r4, #0]
 801467a:	832b      	strh	r3, [r5, #24]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,d,d,e");
 801467c:	687b      	ldr	r3, [r7, #4]
 801467e:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8014682:	4a68      	ldr	r2, [pc, #416]	; (8014824 <problem_fetch+0x131c0>)
 8014684:	461d      	mov	r5, r3
 8014686:	4614      	mov	r4, r2
 8014688:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801468a:	6028      	str	r0, [r5, #0]
 801468c:	6069      	str	r1, [r5, #4]
 801468e:	60aa      	str	r2, [r5, #8]
 8014690:	60eb      	str	r3, [r5, #12]
 8014692:	6820      	ldr	r0, [r4, #0]
 8014694:	6128      	str	r0, [r5, #16]
			break;
 8014696:	f007 bf15 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 561 :
			strcpy(p->name,"BLACK HOLE SUN");
 801469a:	687b      	ldr	r3, [r7, #4]
 801469c:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80146a0:	4a61      	ldr	r2, [pc, #388]	; (8014828 <problem_fetch+0x131c4>)
 80146a2:	461c      	mov	r4, r3
 80146a4:	4613      	mov	r3, r2
 80146a6:	cb07      	ldmia	r3!, {r0, r1, r2}
 80146a8:	6020      	str	r0, [r4, #0]
 80146aa:	6061      	str	r1, [r4, #4]
 80146ac:	60a2      	str	r2, [r4, #8]
 80146ae:	881a      	ldrh	r2, [r3, #0]
 80146b0:	789b      	ldrb	r3, [r3, #2]
 80146b2:	81a2      	strh	r2, [r4, #12]
 80146b4:	73a3      	strb	r3, [r4, #14]
			strcpy(p->grade,"7A");
 80146b6:	687b      	ldr	r3, [r7, #4]
 80146b8:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80146bc:	4a5b      	ldr	r2, [pc, #364]	; (801482c <problem_fetch+0x131c8>)
 80146be:	8811      	ldrh	r1, [r2, #0]
 80146c0:	7892      	ldrb	r2, [r2, #2]
 80146c2:	8019      	strh	r1, [r3, #0]
 80146c4:	709a      	strb	r2, [r3, #2]
			p->moveSize = 6;
 80146c6:	687b      	ldr	r3, [r7, #4]
 80146c8:	2206      	movs	r2, #6
 80146ca:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,D,G,C,B,A");
 80146cc:	687b      	ldr	r3, [r7, #4]
 80146ce:	33a4      	adds	r3, #164	; 0xa4
 80146d0:	4a57      	ldr	r2, [pc, #348]	; (8014830 <problem_fetch+0x131cc>)
 80146d2:	461c      	mov	r4, r3
 80146d4:	4613      	mov	r3, r2
 80146d6:	cb07      	ldmia	r3!, {r0, r1, r2}
 80146d8:	6020      	str	r0, [r4, #0]
 80146da:	6061      	str	r1, [r4, #4]
 80146dc:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,7,10,13,15,18");
 80146de:	687b      	ldr	r3, [r7, #4]
 80146e0:	3304      	adds	r3, #4
 80146e2:	4a54      	ldr	r2, [pc, #336]	; (8014834 <problem_fetch+0x131d0>)
 80146e4:	461c      	mov	r4, r3
 80146e6:	4615      	mov	r5, r2
 80146e8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80146ea:	6020      	str	r0, [r4, #0]
 80146ec:	6061      	str	r1, [r4, #4]
 80146ee:	60a2      	str	r2, [r4, #8]
 80146f0:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 80146f2:	687b      	ldr	r3, [r7, #4]
 80146f4:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 80146f8:	4a4f      	ldr	r2, [pc, #316]	; (8014838 <problem_fetch+0x131d4>)
 80146fa:	461c      	mov	r4, r3
 80146fc:	4613      	mov	r3, r2
 80146fe:	cb07      	ldmia	r3!, {r0, r1, r2}
 8014700:	6020      	str	r0, [r4, #0]
 8014702:	6061      	str	r1, [r4, #4]
 8014704:	60a2      	str	r2, [r4, #8]
			break;
 8014706:	f007 bedd 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 562 :
			strcpy(p->name,"모리");
 801470a:	687b      	ldr	r3, [r7, #4]
 801470c:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8014710:	4a4a      	ldr	r2, [pc, #296]	; (801483c <problem_fetch+0x131d8>)
 8014712:	6810      	ldr	r0, [r2, #0]
 8014714:	6018      	str	r0, [r3, #0]
 8014716:	8891      	ldrh	r1, [r2, #4]
 8014718:	7992      	ldrb	r2, [r2, #6]
 801471a:	8099      	strh	r1, [r3, #4]
 801471c:	719a      	strb	r2, [r3, #6]
			strcpy(p->grade,"6C+");
 801471e:	687b      	ldr	r3, [r7, #4]
 8014720:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8014724:	4a46      	ldr	r2, [pc, #280]	; (8014840 <problem_fetch+0x131dc>)
 8014726:	6810      	ldr	r0, [r2, #0]
 8014728:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 801472a:	687b      	ldr	r3, [r7, #4]
 801472c:	2207      	movs	r2, #7
 801472e:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,E,F,B,D,E,I");
 8014730:	687b      	ldr	r3, [r7, #4]
 8014732:	33a4      	adds	r3, #164	; 0xa4
 8014734:	4a43      	ldr	r2, [pc, #268]	; (8014844 <problem_fetch+0x131e0>)
 8014736:	461c      	mov	r4, r3
 8014738:	4613      	mov	r3, r2
 801473a:	cb07      	ldmia	r3!, {r0, r1, r2}
 801473c:	6020      	str	r0, [r4, #0]
 801473e:	6061      	str	r1, [r4, #4]
 8014740:	60a2      	str	r2, [r4, #8]
 8014742:	881b      	ldrh	r3, [r3, #0]
 8014744:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,8,11,12,15,16,18");
 8014746:	687b      	ldr	r3, [r7, #4]
 8014748:	3304      	adds	r3, #4
 801474a:	4a3f      	ldr	r2, [pc, #252]	; (8014848 <problem_fetch+0x131e4>)
 801474c:	461d      	mov	r5, r3
 801474e:	4614      	mov	r4, r2
 8014750:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8014752:	6028      	str	r0, [r5, #0]
 8014754:	6069      	str	r1, [r5, #4]
 8014756:	60aa      	str	r2, [r5, #8]
 8014758:	60eb      	str	r3, [r5, #12]
 801475a:	8823      	ldrh	r3, [r4, #0]
 801475c:	78a2      	ldrb	r2, [r4, #2]
 801475e:	822b      	strh	r3, [r5, #16]
 8014760:	4613      	mov	r3, r2
 8014762:	74ab      	strb	r3, [r5, #18]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 8014764:	687b      	ldr	r3, [r7, #4]
 8014766:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 801476a:	4a38      	ldr	r2, [pc, #224]	; (801484c <problem_fetch+0x131e8>)
 801476c:	461c      	mov	r4, r3
 801476e:	4613      	mov	r3, r2
 8014770:	cb07      	ldmia	r3!, {r0, r1, r2}
 8014772:	6020      	str	r0, [r4, #0]
 8014774:	6061      	str	r1, [r4, #4]
 8014776:	60a2      	str	r2, [r4, #8]
 8014778:	881b      	ldrh	r3, [r3, #0]
 801477a:	81a3      	strh	r3, [r4, #12]
			break;
 801477c:	f007 bea2 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 563 :
			strcpy(p->name,"DAN1");
 8014780:	687b      	ldr	r3, [r7, #4]
 8014782:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8014786:	4a32      	ldr	r2, [pc, #200]	; (8014850 <problem_fetch+0x131ec>)
 8014788:	6810      	ldr	r0, [r2, #0]
 801478a:	6018      	str	r0, [r3, #0]
 801478c:	7912      	ldrb	r2, [r2, #4]
 801478e:	711a      	strb	r2, [r3, #4]
			strcpy(p->grade,"6C+");
 8014790:	687b      	ldr	r3, [r7, #4]
 8014792:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8014796:	4a2a      	ldr	r2, [pc, #168]	; (8014840 <problem_fetch+0x131dc>)
 8014798:	6810      	ldr	r0, [r2, #0]
 801479a:	6018      	str	r0, [r3, #0]
			p->moveSize = 8;
 801479c:	687b      	ldr	r3, [r7, #4]
 801479e:	2208      	movs	r2, #8
 80147a0:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,H,G,F,E,C,D,D");
 80147a2:	687b      	ldr	r3, [r7, #4]
 80147a4:	33a4      	adds	r3, #164	; 0xa4
 80147a6:	4a2b      	ldr	r2, [pc, #172]	; (8014854 <problem_fetch+0x131f0>)
 80147a8:	461c      	mov	r4, r3
 80147aa:	4615      	mov	r5, r2
 80147ac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80147ae:	6020      	str	r0, [r4, #0]
 80147b0:	6061      	str	r1, [r4, #4]
 80147b2:	60a2      	str	r2, [r4, #8]
 80147b4:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,8,9,11,12,13,15,18");
 80147b6:	687b      	ldr	r3, [r7, #4]
 80147b8:	3304      	adds	r3, #4
 80147ba:	4a27      	ldr	r2, [pc, #156]	; (8014858 <problem_fetch+0x131f4>)
 80147bc:	461d      	mov	r5, r3
 80147be:	4614      	mov	r4, r2
 80147c0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80147c2:	6028      	str	r0, [r5, #0]
 80147c4:	6069      	str	r1, [r5, #4]
 80147c6:	60aa      	str	r2, [r5, #8]
 80147c8:	60eb      	str	r3, [r5, #12]
 80147ca:	6820      	ldr	r0, [r4, #0]
 80147cc:	6128      	str	r0, [r5, #16]
 80147ce:	7923      	ldrb	r3, [r4, #4]
 80147d0:	752b      	strb	r3, [r5, #20]
			strcpy(p->startFinish,"s,d,d,d,d,d,d,e");
 80147d2:	687b      	ldr	r3, [r7, #4]
 80147d4:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 80147d8:	4a20      	ldr	r2, [pc, #128]	; (801485c <problem_fetch+0x131f8>)
 80147da:	461c      	mov	r4, r3
 80147dc:	4615      	mov	r5, r2
 80147de:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80147e0:	6020      	str	r0, [r4, #0]
 80147e2:	6061      	str	r1, [r4, #4]
 80147e4:	60a2      	str	r2, [r4, #8]
 80147e6:	60e3      	str	r3, [r4, #12]
			break;
 80147e8:	f007 be6c 	b.w	801c4c4 <problem_fetch+0x1ae60>
 80147ec:	0802a5d8 	.word	0x0802a5d8
 80147f0:	08023bf0 	.word	0x08023bf0
 80147f4:	0802a5e0 	.word	0x0802a5e0
 80147f8:	0802a5f0 	.word	0x0802a5f0
 80147fc:	08023b9c 	.word	0x08023b9c
 8014800:	0802a604 	.word	0x0802a604
 8014804:	08023cc4 	.word	0x08023cc4
 8014808:	0802a61c 	.word	0x0802a61c
 801480c:	0802a624 	.word	0x0802a624
 8014810:	08023c78 	.word	0x08023c78
 8014814:	0802a630 	.word	0x0802a630
 8014818:	08023b24 	.word	0x08023b24
 801481c:	0802a63c 	.word	0x0802a63c
 8014820:	0802a650 	.word	0x0802a650
 8014824:	080243cc 	.word	0x080243cc
 8014828:	0802a66c 	.word	0x0802a66c
 801482c:	08023ae4 	.word	0x08023ae4
 8014830:	0802a67c 	.word	0x0802a67c
 8014834:	0802a688 	.word	0x0802a688
 8014838:	08023ec0 	.word	0x08023ec0
 801483c:	0802a698 	.word	0x0802a698
 8014840:	08023bbc 	.word	0x08023bbc
 8014844:	0802a6a0 	.word	0x0802a6a0
 8014848:	0802a6b0 	.word	0x0802a6b0
 801484c:	08023cac 	.word	0x08023cac
 8014850:	0802a6c4 	.word	0x0802a6c4
 8014854:	0802a6cc 	.word	0x0802a6cc
 8014858:	0802a6dc 	.word	0x0802a6dc
 801485c:	08023d34 	.word	0x08023d34
		case 564 :
			strcpy(p->name,"BLACK DOJO");
 8014860:	687b      	ldr	r3, [r7, #4]
 8014862:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8014866:	49b0      	ldr	r1, [pc, #704]	; (8014b28 <problem_fetch+0x134c4>)
 8014868:	461a      	mov	r2, r3
 801486a:	460b      	mov	r3, r1
 801486c:	cb03      	ldmia	r3!, {r0, r1}
 801486e:	6010      	str	r0, [r2, #0]
 8014870:	6051      	str	r1, [r2, #4]
 8014872:	8819      	ldrh	r1, [r3, #0]
 8014874:	789b      	ldrb	r3, [r3, #2]
 8014876:	8111      	strh	r1, [r2, #8]
 8014878:	7293      	strb	r3, [r2, #10]
			strcpy(p->grade,"7B");
 801487a:	687b      	ldr	r3, [r7, #4]
 801487c:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8014880:	4aaa      	ldr	r2, [pc, #680]	; (8014b2c <problem_fetch+0x134c8>)
 8014882:	8811      	ldrh	r1, [r2, #0]
 8014884:	7892      	ldrb	r2, [r2, #2]
 8014886:	8019      	strh	r1, [r3, #0]
 8014888:	709a      	strb	r2, [r3, #2]
			p->moveSize = 6;
 801488a:	687b      	ldr	r3, [r7, #4]
 801488c:	2206      	movs	r2, #6
 801488e:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,J,E,F,B,A");
 8014890:	687b      	ldr	r3, [r7, #4]
 8014892:	33a4      	adds	r3, #164	; 0xa4
 8014894:	4aa6      	ldr	r2, [pc, #664]	; (8014b30 <problem_fetch+0x134cc>)
 8014896:	461c      	mov	r4, r3
 8014898:	4613      	mov	r3, r2
 801489a:	cb07      	ldmia	r3!, {r0, r1, r2}
 801489c:	6020      	str	r0, [r4, #0]
 801489e:	6061      	str	r1, [r4, #4]
 80148a0:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"6,5,16,11,10,18");
 80148a2:	687b      	ldr	r3, [r7, #4]
 80148a4:	3304      	adds	r3, #4
 80148a6:	4aa3      	ldr	r2, [pc, #652]	; (8014b34 <problem_fetch+0x134d0>)
 80148a8:	461c      	mov	r4, r3
 80148aa:	4615      	mov	r5, r2
 80148ac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80148ae:	6020      	str	r0, [r4, #0]
 80148b0:	6061      	str	r1, [r4, #4]
 80148b2:	60a2      	str	r2, [r4, #8]
 80148b4:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,s,d,d,d,e");
 80148b6:	687b      	ldr	r3, [r7, #4]
 80148b8:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 80148bc:	4a9e      	ldr	r2, [pc, #632]	; (8014b38 <problem_fetch+0x134d4>)
 80148be:	461c      	mov	r4, r3
 80148c0:	4613      	mov	r3, r2
 80148c2:	cb07      	ldmia	r3!, {r0, r1, r2}
 80148c4:	6020      	str	r0, [r4, #0]
 80148c6:	6061      	str	r1, [r4, #4]
 80148c8:	60a2      	str	r2, [r4, #8]
			break;
 80148ca:	f007 bdfb 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 565 :
			strcpy(p->name,"SIMON");
 80148ce:	687b      	ldr	r3, [r7, #4]
 80148d0:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80148d4:	4a99      	ldr	r2, [pc, #612]	; (8014b3c <problem_fetch+0x134d8>)
 80148d6:	6810      	ldr	r0, [r2, #0]
 80148d8:	6018      	str	r0, [r3, #0]
 80148da:	8892      	ldrh	r2, [r2, #4]
 80148dc:	809a      	strh	r2, [r3, #4]
			strcpy(p->grade,"7C+");
 80148de:	687b      	ldr	r3, [r7, #4]
 80148e0:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80148e4:	4a96      	ldr	r2, [pc, #600]	; (8014b40 <problem_fetch+0x134dc>)
 80148e6:	6810      	ldr	r0, [r2, #0]
 80148e8:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 80148ea:	687b      	ldr	r3, [r7, #4]
 80148ec:	2207      	movs	r2, #7
 80148ee:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"B,C,I,F,B,G,A");
 80148f0:	687b      	ldr	r3, [r7, #4]
 80148f2:	33a4      	adds	r3, #164	; 0xa4
 80148f4:	4a93      	ldr	r2, [pc, #588]	; (8014b44 <problem_fetch+0x134e0>)
 80148f6:	461c      	mov	r4, r3
 80148f8:	4613      	mov	r3, r2
 80148fa:	cb07      	ldmia	r3!, {r0, r1, r2}
 80148fc:	6020      	str	r0, [r4, #0]
 80148fe:	6061      	str	r1, [r4, #4]
 8014900:	60a2      	str	r2, [r4, #8]
 8014902:	881b      	ldrh	r3, [r3, #0]
 8014904:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"6,5,7,11,12,17,18");
 8014906:	687b      	ldr	r3, [r7, #4]
 8014908:	3304      	adds	r3, #4
 801490a:	4a8f      	ldr	r2, [pc, #572]	; (8014b48 <problem_fetch+0x134e4>)
 801490c:	461d      	mov	r5, r3
 801490e:	4614      	mov	r4, r2
 8014910:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8014912:	6028      	str	r0, [r5, #0]
 8014914:	6069      	str	r1, [r5, #4]
 8014916:	60aa      	str	r2, [r5, #8]
 8014918:	60eb      	str	r3, [r5, #12]
 801491a:	8823      	ldrh	r3, [r4, #0]
 801491c:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,s,d,d,d,d,e");
 801491e:	687b      	ldr	r3, [r7, #4]
 8014920:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8014924:	4a89      	ldr	r2, [pc, #548]	; (8014b4c <problem_fetch+0x134e8>)
 8014926:	461c      	mov	r4, r3
 8014928:	4613      	mov	r3, r2
 801492a:	cb07      	ldmia	r3!, {r0, r1, r2}
 801492c:	6020      	str	r0, [r4, #0]
 801492e:	6061      	str	r1, [r4, #4]
 8014930:	60a2      	str	r2, [r4, #8]
 8014932:	881b      	ldrh	r3, [r3, #0]
 8014934:	81a3      	strh	r3, [r4, #12]
			break;
 8014936:	f007 bdc5 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 566 :
			strcpy(p->name,"BLACK HOLDS MATTER");
 801493a:	687b      	ldr	r3, [r7, #4]
 801493c:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8014940:	4a83      	ldr	r2, [pc, #524]	; (8014b50 <problem_fetch+0x134ec>)
 8014942:	461d      	mov	r5, r3
 8014944:	4614      	mov	r4, r2
 8014946:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8014948:	6028      	str	r0, [r5, #0]
 801494a:	6069      	str	r1, [r5, #4]
 801494c:	60aa      	str	r2, [r5, #8]
 801494e:	60eb      	str	r3, [r5, #12]
 8014950:	8823      	ldrh	r3, [r4, #0]
 8014952:	78a2      	ldrb	r2, [r4, #2]
 8014954:	822b      	strh	r3, [r5, #16]
 8014956:	4613      	mov	r3, r2
 8014958:	74ab      	strb	r3, [r5, #18]
			strcpy(p->grade,"6C");
 801495a:	687b      	ldr	r3, [r7, #4]
 801495c:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8014960:	4a7c      	ldr	r2, [pc, #496]	; (8014b54 <problem_fetch+0x134f0>)
 8014962:	8811      	ldrh	r1, [r2, #0]
 8014964:	7892      	ldrb	r2, [r2, #2]
 8014966:	8019      	strh	r1, [r3, #0]
 8014968:	709a      	strb	r2, [r3, #2]
			p->moveSize = 11;
 801496a:	687b      	ldr	r3, [r7, #4]
 801496c:	220b      	movs	r2, #11
 801496e:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,J,J,H,H,F,J,K,G,G,I");
 8014970:	687b      	ldr	r3, [r7, #4]
 8014972:	33a4      	adds	r3, #164	; 0xa4
 8014974:	4a78      	ldr	r2, [pc, #480]	; (8014b58 <problem_fetch+0x134f4>)
 8014976:	461d      	mov	r5, r3
 8014978:	4614      	mov	r4, r2
 801497a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801497c:	6028      	str	r0, [r5, #0]
 801497e:	6069      	str	r1, [r5, #4]
 8014980:	60aa      	str	r2, [r5, #8]
 8014982:	60eb      	str	r3, [r5, #12]
 8014984:	6820      	ldr	r0, [r4, #0]
 8014986:	6128      	str	r0, [r5, #16]
 8014988:	88a3      	ldrh	r3, [r4, #4]
 801498a:	82ab      	strh	r3, [r5, #20]
			strcpy(p->moveNumbers,"4,5,7,8,10,11,12,14,17,15,18");
 801498c:	687b      	ldr	r3, [r7, #4]
 801498e:	3304      	adds	r3, #4
 8014990:	4a72      	ldr	r2, [pc, #456]	; (8014b5c <problem_fetch+0x134f8>)
 8014992:	461d      	mov	r5, r3
 8014994:	4614      	mov	r4, r2
 8014996:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8014998:	6028      	str	r0, [r5, #0]
 801499a:	6069      	str	r1, [r5, #4]
 801499c:	60aa      	str	r2, [r5, #8]
 801499e:	60eb      	str	r3, [r5, #12]
 80149a0:	cc07      	ldmia	r4!, {r0, r1, r2}
 80149a2:	6128      	str	r0, [r5, #16]
 80149a4:	6169      	str	r1, [r5, #20]
 80149a6:	61aa      	str	r2, [r5, #24]
 80149a8:	7823      	ldrb	r3, [r4, #0]
 80149aa:	772b      	strb	r3, [r5, #28]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,d,d,d,e");
 80149ac:	687b      	ldr	r3, [r7, #4]
 80149ae:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 80149b2:	4a6b      	ldr	r2, [pc, #428]	; (8014b60 <problem_fetch+0x134fc>)
 80149b4:	461d      	mov	r5, r3
 80149b6:	4614      	mov	r4, r2
 80149b8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80149ba:	6028      	str	r0, [r5, #0]
 80149bc:	6069      	str	r1, [r5, #4]
 80149be:	60aa      	str	r2, [r5, #8]
 80149c0:	60eb      	str	r3, [r5, #12]
 80149c2:	6820      	ldr	r0, [r4, #0]
 80149c4:	6128      	str	r0, [r5, #16]
 80149c6:	88a3      	ldrh	r3, [r4, #4]
 80149c8:	82ab      	strh	r3, [r5, #20]
			break;
 80149ca:	f007 bd7b 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 567 :
			strcpy(p->name,"SEANN'S START");
 80149ce:	687b      	ldr	r3, [r7, #4]
 80149d0:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80149d4:	4a63      	ldr	r2, [pc, #396]	; (8014b64 <problem_fetch+0x13500>)
 80149d6:	461c      	mov	r4, r3
 80149d8:	4613      	mov	r3, r2
 80149da:	cb07      	ldmia	r3!, {r0, r1, r2}
 80149dc:	6020      	str	r0, [r4, #0]
 80149de:	6061      	str	r1, [r4, #4]
 80149e0:	60a2      	str	r2, [r4, #8]
 80149e2:	881b      	ldrh	r3, [r3, #0]
 80149e4:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade,"6B+");
 80149e6:	687b      	ldr	r3, [r7, #4]
 80149e8:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80149ec:	4a5e      	ldr	r2, [pc, #376]	; (8014b68 <problem_fetch+0x13504>)
 80149ee:	6810      	ldr	r0, [r2, #0]
 80149f0:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 80149f2:	687b      	ldr	r3, [r7, #4]
 80149f4:	2207      	movs	r2, #7
 80149f6:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,E,C,E,E,G,D");
 80149f8:	687b      	ldr	r3, [r7, #4]
 80149fa:	33a4      	adds	r3, #164	; 0xa4
 80149fc:	4a5b      	ldr	r2, [pc, #364]	; (8014b6c <problem_fetch+0x13508>)
 80149fe:	461c      	mov	r4, r3
 8014a00:	4613      	mov	r3, r2
 8014a02:	cb07      	ldmia	r3!, {r0, r1, r2}
 8014a04:	6020      	str	r0, [r4, #0]
 8014a06:	6061      	str	r1, [r4, #4]
 8014a08:	60a2      	str	r2, [r4, #8]
 8014a0a:	881b      	ldrh	r3, [r3, #0]
 8014a0c:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,8,13,12,16,9,18");
 8014a0e:	687b      	ldr	r3, [r7, #4]
 8014a10:	3304      	adds	r3, #4
 8014a12:	4a57      	ldr	r2, [pc, #348]	; (8014b70 <problem_fetch+0x1350c>)
 8014a14:	461d      	mov	r5, r3
 8014a16:	4614      	mov	r4, r2
 8014a18:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8014a1a:	6028      	str	r0, [r5, #0]
 8014a1c:	6069      	str	r1, [r5, #4]
 8014a1e:	60aa      	str	r2, [r5, #8]
 8014a20:	60eb      	str	r3, [r5, #12]
 8014a22:	8823      	ldrh	r3, [r4, #0]
 8014a24:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 8014a26:	687b      	ldr	r3, [r7, #4]
 8014a28:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8014a2c:	4a51      	ldr	r2, [pc, #324]	; (8014b74 <problem_fetch+0x13510>)
 8014a2e:	461c      	mov	r4, r3
 8014a30:	4613      	mov	r3, r2
 8014a32:	cb07      	ldmia	r3!, {r0, r1, r2}
 8014a34:	6020      	str	r0, [r4, #0]
 8014a36:	6061      	str	r1, [r4, #4]
 8014a38:	60a2      	str	r2, [r4, #8]
 8014a3a:	881b      	ldrh	r3, [r3, #0]
 8014a3c:	81a3      	strh	r3, [r4, #12]
			break;
 8014a3e:	f007 bd41 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 568 :
			strcpy(p->name,"BLACK POCKETS MATTER");
 8014a42:	687b      	ldr	r3, [r7, #4]
 8014a44:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8014a48:	4a4b      	ldr	r2, [pc, #300]	; (8014b78 <problem_fetch+0x13514>)
 8014a4a:	461d      	mov	r5, r3
 8014a4c:	4614      	mov	r4, r2
 8014a4e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8014a50:	6028      	str	r0, [r5, #0]
 8014a52:	6069      	str	r1, [r5, #4]
 8014a54:	60aa      	str	r2, [r5, #8]
 8014a56:	60eb      	str	r3, [r5, #12]
 8014a58:	6820      	ldr	r0, [r4, #0]
 8014a5a:	6128      	str	r0, [r5, #16]
 8014a5c:	7923      	ldrb	r3, [r4, #4]
 8014a5e:	752b      	strb	r3, [r5, #20]
			strcpy(p->grade,"7A+");
 8014a60:	687b      	ldr	r3, [r7, #4]
 8014a62:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8014a66:	4a45      	ldr	r2, [pc, #276]	; (8014b7c <problem_fetch+0x13518>)
 8014a68:	6810      	ldr	r0, [r2, #0]
 8014a6a:	6018      	str	r0, [r3, #0]
			p->moveSize = 8;
 8014a6c:	687b      	ldr	r3, [r7, #4]
 8014a6e:	2208      	movs	r2, #8
 8014a70:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"C,B,D,B,G,H,C,D");
 8014a72:	687b      	ldr	r3, [r7, #4]
 8014a74:	33a4      	adds	r3, #164	; 0xa4
 8014a76:	4a42      	ldr	r2, [pc, #264]	; (8014b80 <problem_fetch+0x1351c>)
 8014a78:	461c      	mov	r4, r3
 8014a7a:	4615      	mov	r5, r2
 8014a7c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8014a7e:	6020      	str	r0, [r4, #0]
 8014a80:	6061      	str	r1, [r4, #4]
 8014a82:	60a2      	str	r2, [r4, #8]
 8014a84:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,6,7,10,10,13,16,18");
 8014a86:	687b      	ldr	r3, [r7, #4]
 8014a88:	3304      	adds	r3, #4
 8014a8a:	4a3e      	ldr	r2, [pc, #248]	; (8014b84 <problem_fetch+0x13520>)
 8014a8c:	461d      	mov	r5, r3
 8014a8e:	4614      	mov	r4, r2
 8014a90:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8014a92:	6028      	str	r0, [r5, #0]
 8014a94:	6069      	str	r1, [r5, #4]
 8014a96:	60aa      	str	r2, [r5, #8]
 8014a98:	60eb      	str	r3, [r5, #12]
 8014a9a:	6820      	ldr	r0, [r4, #0]
 8014a9c:	6128      	str	r0, [r5, #16]
 8014a9e:	7923      	ldrb	r3, [r4, #4]
 8014aa0:	752b      	strb	r3, [r5, #20]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,e");
 8014aa2:	687b      	ldr	r3, [r7, #4]
 8014aa4:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8014aa8:	4a37      	ldr	r2, [pc, #220]	; (8014b88 <problem_fetch+0x13524>)
 8014aaa:	461c      	mov	r4, r3
 8014aac:	4615      	mov	r5, r2
 8014aae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8014ab0:	6020      	str	r0, [r4, #0]
 8014ab2:	6061      	str	r1, [r4, #4]
 8014ab4:	60a2      	str	r2, [r4, #8]
 8014ab6:	60e3      	str	r3, [r4, #12]
			break;
 8014ab8:	f007 bd04 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 569 :
			strcpy(p->name,"CAD");
 8014abc:	687b      	ldr	r3, [r7, #4]
 8014abe:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8014ac2:	4a32      	ldr	r2, [pc, #200]	; (8014b8c <problem_fetch+0x13528>)
 8014ac4:	6810      	ldr	r0, [r2, #0]
 8014ac6:	6018      	str	r0, [r3, #0]
			strcpy(p->grade,"7A");
 8014ac8:	687b      	ldr	r3, [r7, #4]
 8014aca:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8014ace:	4a30      	ldr	r2, [pc, #192]	; (8014b90 <problem_fetch+0x1352c>)
 8014ad0:	8811      	ldrh	r1, [r2, #0]
 8014ad2:	7892      	ldrb	r2, [r2, #2]
 8014ad4:	8019      	strh	r1, [r3, #0]
 8014ad6:	709a      	strb	r2, [r3, #2]
			p->moveSize = 8;
 8014ad8:	687b      	ldr	r3, [r7, #4]
 8014ada:	2208      	movs	r2, #8
 8014adc:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,H,K,J,H,E,G,D");
 8014ade:	687b      	ldr	r3, [r7, #4]
 8014ae0:	33a4      	adds	r3, #164	; 0xa4
 8014ae2:	4a2c      	ldr	r2, [pc, #176]	; (8014b94 <problem_fetch+0x13530>)
 8014ae4:	461c      	mov	r4, r3
 8014ae6:	4615      	mov	r5, r2
 8014ae8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8014aea:	6020      	str	r0, [r4, #0]
 8014aec:	6061      	str	r1, [r4, #4]
 8014aee:	60a2      	str	r2, [r4, #8]
 8014af0:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,5,9,12,12,14,17,18");
 8014af2:	687b      	ldr	r3, [r7, #4]
 8014af4:	3304      	adds	r3, #4
 8014af6:	4a28      	ldr	r2, [pc, #160]	; (8014b98 <problem_fetch+0x13534>)
 8014af8:	461d      	mov	r5, r3
 8014afa:	4614      	mov	r4, r2
 8014afc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8014afe:	6028      	str	r0, [r5, #0]
 8014b00:	6069      	str	r1, [r5, #4]
 8014b02:	60aa      	str	r2, [r5, #8]
 8014b04:	60eb      	str	r3, [r5, #12]
 8014b06:	6820      	ldr	r0, [r4, #0]
 8014b08:	6128      	str	r0, [r5, #16]
 8014b0a:	7923      	ldrb	r3, [r4, #4]
 8014b0c:	752b      	strb	r3, [r5, #20]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,e");
 8014b0e:	687b      	ldr	r3, [r7, #4]
 8014b10:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8014b14:	4a1c      	ldr	r2, [pc, #112]	; (8014b88 <problem_fetch+0x13524>)
 8014b16:	461c      	mov	r4, r3
 8014b18:	4615      	mov	r5, r2
 8014b1a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8014b1c:	6020      	str	r0, [r4, #0]
 8014b1e:	6061      	str	r1, [r4, #4]
 8014b20:	60a2      	str	r2, [r4, #8]
 8014b22:	60e3      	str	r3, [r4, #12]
			break;
 8014b24:	f007 bcce 	b.w	801c4c4 <problem_fetch+0x1ae60>
 8014b28:	0802a6f4 	.word	0x0802a6f4
 8014b2c:	0802421c 	.word	0x0802421c
 8014b30:	0802a700 	.word	0x0802a700
 8014b34:	0802a70c 	.word	0x0802a70c
 8014b38:	08023b04 	.word	0x08023b04
 8014b3c:	0802a71c 	.word	0x0802a71c
 8014b40:	08024130 	.word	0x08024130
 8014b44:	0802a724 	.word	0x0802a724
 8014b48:	0802a734 	.word	0x0802a734
 8014b4c:	08023b9c 	.word	0x08023b9c
 8014b50:	0802a748 	.word	0x0802a748
 8014b54:	08023bf0 	.word	0x08023bf0
 8014b58:	0802a75c 	.word	0x0802a75c
 8014b5c:	0802a774 	.word	0x0802a774
 8014b60:	08027484 	.word	0x08027484
 8014b64:	0802a794 	.word	0x0802a794
 8014b68:	08023b24 	.word	0x08023b24
 8014b6c:	0802a7a4 	.word	0x0802a7a4
 8014b70:	0802a7b4 	.word	0x0802a7b4
 8014b74:	08023cac 	.word	0x08023cac
 8014b78:	0802a7c8 	.word	0x0802a7c8
 8014b7c:	08023cc4 	.word	0x08023cc4
 8014b80:	0802a7e0 	.word	0x0802a7e0
 8014b84:	0802a7f0 	.word	0x0802a7f0
 8014b88:	08023c48 	.word	0x08023c48
 8014b8c:	0802a808 	.word	0x0802a808
 8014b90:	08023ae4 	.word	0x08023ae4
 8014b94:	0802a80c 	.word	0x0802a80c
 8014b98:	0802a81c 	.word	0x0802a81c
		case 570 :
			strcpy(p->name,"CAD");
 8014b9c:	687b      	ldr	r3, [r7, #4]
 8014b9e:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8014ba2:	4aa8      	ldr	r2, [pc, #672]	; (8014e44 <problem_fetch+0x137e0>)
 8014ba4:	6810      	ldr	r0, [r2, #0]
 8014ba6:	6018      	str	r0, [r3, #0]
			strcpy(p->grade,"7A");
 8014ba8:	687b      	ldr	r3, [r7, #4]
 8014baa:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8014bae:	4aa6      	ldr	r2, [pc, #664]	; (8014e48 <problem_fetch+0x137e4>)
 8014bb0:	8811      	ldrh	r1, [r2, #0]
 8014bb2:	7892      	ldrb	r2, [r2, #2]
 8014bb4:	8019      	strh	r1, [r3, #0]
 8014bb6:	709a      	strb	r2, [r3, #2]
			p->moveSize = 8;
 8014bb8:	687b      	ldr	r3, [r7, #4]
 8014bba:	2208      	movs	r2, #8
 8014bbc:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,H,K,J,H,E,G,D");
 8014bbe:	687b      	ldr	r3, [r7, #4]
 8014bc0:	33a4      	adds	r3, #164	; 0xa4
 8014bc2:	4aa2      	ldr	r2, [pc, #648]	; (8014e4c <problem_fetch+0x137e8>)
 8014bc4:	461c      	mov	r4, r3
 8014bc6:	4615      	mov	r5, r2
 8014bc8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8014bca:	6020      	str	r0, [r4, #0]
 8014bcc:	6061      	str	r1, [r4, #4]
 8014bce:	60a2      	str	r2, [r4, #8]
 8014bd0:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,5,9,12,12,14,17,18");
 8014bd2:	687b      	ldr	r3, [r7, #4]
 8014bd4:	3304      	adds	r3, #4
 8014bd6:	4a9e      	ldr	r2, [pc, #632]	; (8014e50 <problem_fetch+0x137ec>)
 8014bd8:	461d      	mov	r5, r3
 8014bda:	4614      	mov	r4, r2
 8014bdc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8014bde:	6028      	str	r0, [r5, #0]
 8014be0:	6069      	str	r1, [r5, #4]
 8014be2:	60aa      	str	r2, [r5, #8]
 8014be4:	60eb      	str	r3, [r5, #12]
 8014be6:	6820      	ldr	r0, [r4, #0]
 8014be8:	6128      	str	r0, [r5, #16]
 8014bea:	7923      	ldrb	r3, [r4, #4]
 8014bec:	752b      	strb	r3, [r5, #20]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,e");
 8014bee:	687b      	ldr	r3, [r7, #4]
 8014bf0:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8014bf4:	4a97      	ldr	r2, [pc, #604]	; (8014e54 <problem_fetch+0x137f0>)
 8014bf6:	461c      	mov	r4, r3
 8014bf8:	4615      	mov	r5, r2
 8014bfa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8014bfc:	6020      	str	r0, [r4, #0]
 8014bfe:	6061      	str	r1, [r4, #4]
 8014c00:	60a2      	str	r2, [r4, #8]
 8014c02:	60e3      	str	r3, [r4, #12]
			break;
 8014c04:	f007 bc5e 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 571 :
			strcpy(p->name,"TIGHT BOX");
 8014c08:	687b      	ldr	r3, [r7, #4]
 8014c0a:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8014c0e:	4992      	ldr	r1, [pc, #584]	; (8014e58 <problem_fetch+0x137f4>)
 8014c10:	461a      	mov	r2, r3
 8014c12:	460b      	mov	r3, r1
 8014c14:	cb03      	ldmia	r3!, {r0, r1}
 8014c16:	6010      	str	r0, [r2, #0]
 8014c18:	6051      	str	r1, [r2, #4]
 8014c1a:	881b      	ldrh	r3, [r3, #0]
 8014c1c:	8113      	strh	r3, [r2, #8]
			strcpy(p->grade,"6C+");
 8014c1e:	687b      	ldr	r3, [r7, #4]
 8014c20:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8014c24:	4a8d      	ldr	r2, [pc, #564]	; (8014e5c <problem_fetch+0x137f8>)
 8014c26:	6810      	ldr	r0, [r2, #0]
 8014c28:	6018      	str	r0, [r3, #0]
			p->moveSize = 8;
 8014c2a:	687b      	ldr	r3, [r7, #4]
 8014c2c:	2208      	movs	r2, #8
 8014c2e:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"C,B,D,A,D,E,G,D");
 8014c30:	687b      	ldr	r3, [r7, #4]
 8014c32:	33a4      	adds	r3, #164	; 0xa4
 8014c34:	4a8a      	ldr	r2, [pc, #552]	; (8014e60 <problem_fetch+0x137fc>)
 8014c36:	461c      	mov	r4, r3
 8014c38:	4615      	mov	r5, r2
 8014c3a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8014c3c:	6020      	str	r0, [r4, #0]
 8014c3e:	6061      	str	r1, [r4, #4]
 8014c40:	60a2      	str	r2, [r4, #8]
 8014c42:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,6,7,9,11,12,17,18");
 8014c44:	687b      	ldr	r3, [r7, #4]
 8014c46:	3304      	adds	r3, #4
 8014c48:	4a86      	ldr	r2, [pc, #536]	; (8014e64 <problem_fetch+0x13800>)
 8014c4a:	461d      	mov	r5, r3
 8014c4c:	4614      	mov	r4, r2
 8014c4e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8014c50:	6028      	str	r0, [r5, #0]
 8014c52:	6069      	str	r1, [r5, #4]
 8014c54:	60aa      	str	r2, [r5, #8]
 8014c56:	60eb      	str	r3, [r5, #12]
 8014c58:	6820      	ldr	r0, [r4, #0]
 8014c5a:	6128      	str	r0, [r5, #16]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,e");
 8014c5c:	687b      	ldr	r3, [r7, #4]
 8014c5e:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8014c62:	4a7c      	ldr	r2, [pc, #496]	; (8014e54 <problem_fetch+0x137f0>)
 8014c64:	461c      	mov	r4, r3
 8014c66:	4615      	mov	r5, r2
 8014c68:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8014c6a:	6020      	str	r0, [r4, #0]
 8014c6c:	6061      	str	r1, [r4, #4]
 8014c6e:	60a2      	str	r2, [r4, #8]
 8014c70:	60e3      	str	r3, [r4, #12]
			break;
 8014c72:	f007 bc27 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 572 :
			strcpy(p->name,"TIGER");
 8014c76:	687b      	ldr	r3, [r7, #4]
 8014c78:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8014c7c:	4a7a      	ldr	r2, [pc, #488]	; (8014e68 <problem_fetch+0x13804>)
 8014c7e:	6810      	ldr	r0, [r2, #0]
 8014c80:	6018      	str	r0, [r3, #0]
 8014c82:	8892      	ldrh	r2, [r2, #4]
 8014c84:	809a      	strh	r2, [r3, #4]
			strcpy(p->grade,"6C+");
 8014c86:	687b      	ldr	r3, [r7, #4]
 8014c88:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8014c8c:	4a73      	ldr	r2, [pc, #460]	; (8014e5c <problem_fetch+0x137f8>)
 8014c8e:	6810      	ldr	r0, [r2, #0]
 8014c90:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 8014c92:	687b      	ldr	r3, [r7, #4]
 8014c94:	2207      	movs	r2, #7
 8014c96:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"B,D,G,H,C,C,A");
 8014c98:	687b      	ldr	r3, [r7, #4]
 8014c9a:	33a4      	adds	r3, #164	; 0xa4
 8014c9c:	4a73      	ldr	r2, [pc, #460]	; (8014e6c <problem_fetch+0x13808>)
 8014c9e:	461c      	mov	r4, r3
 8014ca0:	4613      	mov	r3, r2
 8014ca2:	cb07      	ldmia	r3!, {r0, r1, r2}
 8014ca4:	6020      	str	r0, [r4, #0]
 8014ca6:	6061      	str	r1, [r4, #4]
 8014ca8:	60a2      	str	r2, [r4, #8]
 8014caa:	881b      	ldrh	r3, [r3, #0]
 8014cac:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"6,7,10,13,16,13,18");
 8014cae:	687b      	ldr	r3, [r7, #4]
 8014cb0:	3304      	adds	r3, #4
 8014cb2:	4a6f      	ldr	r2, [pc, #444]	; (8014e70 <problem_fetch+0x1380c>)
 8014cb4:	461d      	mov	r5, r3
 8014cb6:	4614      	mov	r4, r2
 8014cb8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8014cba:	6028      	str	r0, [r5, #0]
 8014cbc:	6069      	str	r1, [r5, #4]
 8014cbe:	60aa      	str	r2, [r5, #8]
 8014cc0:	60eb      	str	r3, [r5, #12]
 8014cc2:	8823      	ldrh	r3, [r4, #0]
 8014cc4:	78a2      	ldrb	r2, [r4, #2]
 8014cc6:	822b      	strh	r3, [r5, #16]
 8014cc8:	4613      	mov	r3, r2
 8014cca:	74ab      	strb	r3, [r5, #18]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 8014ccc:	687b      	ldr	r3, [r7, #4]
 8014cce:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8014cd2:	4a68      	ldr	r2, [pc, #416]	; (8014e74 <problem_fetch+0x13810>)
 8014cd4:	461c      	mov	r4, r3
 8014cd6:	4613      	mov	r3, r2
 8014cd8:	cb07      	ldmia	r3!, {r0, r1, r2}
 8014cda:	6020      	str	r0, [r4, #0]
 8014cdc:	6061      	str	r1, [r4, #4]
 8014cde:	60a2      	str	r2, [r4, #8]
 8014ce0:	881b      	ldrh	r3, [r3, #0]
 8014ce2:	81a3      	strh	r3, [r4, #12]
			break;
 8014ce4:	f007 bbee 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 573 :
			strcpy(p->name,"V1.");
 8014ce8:	687b      	ldr	r3, [r7, #4]
 8014cea:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8014cee:	4a62      	ldr	r2, [pc, #392]	; (8014e78 <problem_fetch+0x13814>)
 8014cf0:	6810      	ldr	r0, [r2, #0]
 8014cf2:	6018      	str	r0, [r3, #0]
			strcpy(p->grade,"6B+");
 8014cf4:	687b      	ldr	r3, [r7, #4]
 8014cf6:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8014cfa:	4a60      	ldr	r2, [pc, #384]	; (8014e7c <problem_fetch+0x13818>)
 8014cfc:	6810      	ldr	r0, [r2, #0]
 8014cfe:	6018      	str	r0, [r3, #0]
			p->moveSize = 9;
 8014d00:	687b      	ldr	r3, [r7, #4]
 8014d02:	2209      	movs	r2, #9
 8014d04:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"E,H,C,G,C,E,A,C,A");
 8014d06:	687b      	ldr	r3, [r7, #4]
 8014d08:	33a4      	adds	r3, #164	; 0xa4
 8014d0a:	4a5d      	ldr	r2, [pc, #372]	; (8014e80 <problem_fetch+0x1381c>)
 8014d0c:	461d      	mov	r5, r3
 8014d0e:	4614      	mov	r4, r2
 8014d10:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8014d12:	6028      	str	r0, [r5, #0]
 8014d14:	6069      	str	r1, [r5, #4]
 8014d16:	60aa      	str	r2, [r5, #8]
 8014d18:	60eb      	str	r3, [r5, #12]
 8014d1a:	8823      	ldrh	r3, [r4, #0]
 8014d1c:	822b      	strh	r3, [r5, #16]
			strcpy(p->moveNumbers,"6,5,8,10,13,14,14,16,18");
 8014d1e:	687b      	ldr	r3, [r7, #4]
 8014d20:	3304      	adds	r3, #4
 8014d22:	4a58      	ldr	r2, [pc, #352]	; (8014e84 <problem_fetch+0x13820>)
 8014d24:	461d      	mov	r5, r3
 8014d26:	4614      	mov	r4, r2
 8014d28:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8014d2a:	6028      	str	r0, [r5, #0]
 8014d2c:	6069      	str	r1, [r5, #4]
 8014d2e:	60aa      	str	r2, [r5, #8]
 8014d30:	60eb      	str	r3, [r5, #12]
 8014d32:	cc03      	ldmia	r4!, {r0, r1}
 8014d34:	6128      	str	r0, [r5, #16]
 8014d36:	6169      	str	r1, [r5, #20]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,d,e");
 8014d38:	687b      	ldr	r3, [r7, #4]
 8014d3a:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8014d3e:	4a52      	ldr	r2, [pc, #328]	; (8014e88 <problem_fetch+0x13824>)
 8014d40:	461d      	mov	r5, r3
 8014d42:	4614      	mov	r4, r2
 8014d44:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8014d46:	6028      	str	r0, [r5, #0]
 8014d48:	6069      	str	r1, [r5, #4]
 8014d4a:	60aa      	str	r2, [r5, #8]
 8014d4c:	60eb      	str	r3, [r5, #12]
 8014d4e:	8823      	ldrh	r3, [r4, #0]
 8014d50:	822b      	strh	r3, [r5, #16]
			break;
 8014d52:	f007 bbb7 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 574 :
			strcpy(p->name,"FOUL LANGUAGE");
 8014d56:	687b      	ldr	r3, [r7, #4]
 8014d58:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8014d5c:	4a4b      	ldr	r2, [pc, #300]	; (8014e8c <problem_fetch+0x13828>)
 8014d5e:	461c      	mov	r4, r3
 8014d60:	4613      	mov	r3, r2
 8014d62:	cb07      	ldmia	r3!, {r0, r1, r2}
 8014d64:	6020      	str	r0, [r4, #0]
 8014d66:	6061      	str	r1, [r4, #4]
 8014d68:	60a2      	str	r2, [r4, #8]
 8014d6a:	881b      	ldrh	r3, [r3, #0]
 8014d6c:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade,"6C+");
 8014d6e:	687b      	ldr	r3, [r7, #4]
 8014d70:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8014d74:	4a39      	ldr	r2, [pc, #228]	; (8014e5c <problem_fetch+0x137f8>)
 8014d76:	6810      	ldr	r0, [r2, #0]
 8014d78:	6018      	str	r0, [r3, #0]
			p->moveSize = 9;
 8014d7a:	687b      	ldr	r3, [r7, #4]
 8014d7c:	2209      	movs	r2, #9
 8014d7e:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,H,K,H,K,G,G,B,D");
 8014d80:	687b      	ldr	r3, [r7, #4]
 8014d82:	33a4      	adds	r3, #164	; 0xa4
 8014d84:	4a42      	ldr	r2, [pc, #264]	; (8014e90 <problem_fetch+0x1382c>)
 8014d86:	461d      	mov	r5, r3
 8014d88:	4614      	mov	r4, r2
 8014d8a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8014d8c:	6028      	str	r0, [r5, #0]
 8014d8e:	6069      	str	r1, [r5, #4]
 8014d90:	60aa      	str	r2, [r5, #8]
 8014d92:	60eb      	str	r3, [r5, #12]
 8014d94:	8823      	ldrh	r3, [r4, #0]
 8014d96:	822b      	strh	r3, [r5, #16]
			strcpy(p->moveNumbers,"4,5,9,12,14,14,17,12,18");
 8014d98:	687b      	ldr	r3, [r7, #4]
 8014d9a:	3304      	adds	r3, #4
 8014d9c:	4a3d      	ldr	r2, [pc, #244]	; (8014e94 <problem_fetch+0x13830>)
 8014d9e:	461d      	mov	r5, r3
 8014da0:	4614      	mov	r4, r2
 8014da2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8014da4:	6028      	str	r0, [r5, #0]
 8014da6:	6069      	str	r1, [r5, #4]
 8014da8:	60aa      	str	r2, [r5, #8]
 8014daa:	60eb      	str	r3, [r5, #12]
 8014dac:	cc03      	ldmia	r4!, {r0, r1}
 8014dae:	6128      	str	r0, [r5, #16]
 8014db0:	6169      	str	r1, [r5, #20]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,d,e");
 8014db2:	687b      	ldr	r3, [r7, #4]
 8014db4:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8014db8:	4a33      	ldr	r2, [pc, #204]	; (8014e88 <problem_fetch+0x13824>)
 8014dba:	461d      	mov	r5, r3
 8014dbc:	4614      	mov	r4, r2
 8014dbe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8014dc0:	6028      	str	r0, [r5, #0]
 8014dc2:	6069      	str	r1, [r5, #4]
 8014dc4:	60aa      	str	r2, [r5, #8]
 8014dc6:	60eb      	str	r3, [r5, #12]
 8014dc8:	8823      	ldrh	r3, [r4, #0]
 8014dca:	822b      	strh	r3, [r5, #16]
			break;
 8014dcc:	f007 bb7a 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 575 :
			strcpy(p->name,"BLACK HAWK DOWN");
 8014dd0:	687b      	ldr	r3, [r7, #4]
 8014dd2:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8014dd6:	4a30      	ldr	r2, [pc, #192]	; (8014e98 <problem_fetch+0x13834>)
 8014dd8:	461c      	mov	r4, r3
 8014dda:	4615      	mov	r5, r2
 8014ddc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8014dde:	6020      	str	r0, [r4, #0]
 8014de0:	6061      	str	r1, [r4, #4]
 8014de2:	60a2      	str	r2, [r4, #8]
 8014de4:	60e3      	str	r3, [r4, #12]
			strcpy(p->grade,"6C+");
 8014de6:	687b      	ldr	r3, [r7, #4]
 8014de8:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8014dec:	4a1b      	ldr	r2, [pc, #108]	; (8014e5c <problem_fetch+0x137f8>)
 8014dee:	6810      	ldr	r0, [r2, #0]
 8014df0:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 8014df2:	687b      	ldr	r3, [r7, #4]
 8014df4:	2207      	movs	r2, #7
 8014df6:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,H,D,G,D,E,D");
 8014df8:	687b      	ldr	r3, [r7, #4]
 8014dfa:	33a4      	adds	r3, #164	; 0xa4
 8014dfc:	4a27      	ldr	r2, [pc, #156]	; (8014e9c <problem_fetch+0x13838>)
 8014dfe:	461c      	mov	r4, r3
 8014e00:	4613      	mov	r3, r2
 8014e02:	cb07      	ldmia	r3!, {r0, r1, r2}
 8014e04:	6020      	str	r0, [r4, #0]
 8014e06:	6061      	str	r1, [r4, #4]
 8014e08:	60a2      	str	r2, [r4, #8]
 8014e0a:	881b      	ldrh	r3, [r3, #0]
 8014e0c:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,8,15,9,11,14,18");
 8014e0e:	687b      	ldr	r3, [r7, #4]
 8014e10:	3304      	adds	r3, #4
 8014e12:	4a23      	ldr	r2, [pc, #140]	; (8014ea0 <problem_fetch+0x1383c>)
 8014e14:	461d      	mov	r5, r3
 8014e16:	4614      	mov	r4, r2
 8014e18:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8014e1a:	6028      	str	r0, [r5, #0]
 8014e1c:	6069      	str	r1, [r5, #4]
 8014e1e:	60aa      	str	r2, [r5, #8]
 8014e20:	60eb      	str	r3, [r5, #12]
 8014e22:	8823      	ldrh	r3, [r4, #0]
 8014e24:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 8014e26:	687b      	ldr	r3, [r7, #4]
 8014e28:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8014e2c:	4a11      	ldr	r2, [pc, #68]	; (8014e74 <problem_fetch+0x13810>)
 8014e2e:	461c      	mov	r4, r3
 8014e30:	4613      	mov	r3, r2
 8014e32:	cb07      	ldmia	r3!, {r0, r1, r2}
 8014e34:	6020      	str	r0, [r4, #0]
 8014e36:	6061      	str	r1, [r4, #4]
 8014e38:	60a2      	str	r2, [r4, #8]
 8014e3a:	881b      	ldrh	r3, [r3, #0]
 8014e3c:	81a3      	strh	r3, [r4, #12]
			break;
 8014e3e:	f007 bb41 	b.w	801c4c4 <problem_fetch+0x1ae60>
 8014e42:	bf00      	nop
 8014e44:	0802a808 	.word	0x0802a808
 8014e48:	08023ae4 	.word	0x08023ae4
 8014e4c:	0802a80c 	.word	0x0802a80c
 8014e50:	0802a81c 	.word	0x0802a81c
 8014e54:	08023c48 	.word	0x08023c48
 8014e58:	0802a834 	.word	0x0802a834
 8014e5c:	08023bbc 	.word	0x08023bbc
 8014e60:	0802a840 	.word	0x0802a840
 8014e64:	0802a850 	.word	0x0802a850
 8014e68:	0802a864 	.word	0x0802a864
 8014e6c:	0802a86c 	.word	0x0802a86c
 8014e70:	0802a87c 	.word	0x0802a87c
 8014e74:	08023cac 	.word	0x08023cac
 8014e78:	0802a890 	.word	0x0802a890
 8014e7c:	08023b24 	.word	0x08023b24
 8014e80:	0802a894 	.word	0x0802a894
 8014e84:	0802a8a8 	.word	0x0802a8a8
 8014e88:	08024b08 	.word	0x08024b08
 8014e8c:	0802a8c0 	.word	0x0802a8c0
 8014e90:	0802a8d0 	.word	0x0802a8d0
 8014e94:	0802a8e4 	.word	0x0802a8e4
 8014e98:	0802a8fc 	.word	0x0802a8fc
 8014e9c:	0802a90c 	.word	0x0802a90c
 8014ea0:	0802a91c 	.word	0x0802a91c
		case 576 :
			strcpy(p->name,"2 BLACK 2 HARD");
 8014ea4:	687b      	ldr	r3, [r7, #4]
 8014ea6:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8014eaa:	4aae      	ldr	r2, [pc, #696]	; (8015164 <problem_fetch+0x13b00>)
 8014eac:	461c      	mov	r4, r3
 8014eae:	4613      	mov	r3, r2
 8014eb0:	cb07      	ldmia	r3!, {r0, r1, r2}
 8014eb2:	6020      	str	r0, [r4, #0]
 8014eb4:	6061      	str	r1, [r4, #4]
 8014eb6:	60a2      	str	r2, [r4, #8]
 8014eb8:	881a      	ldrh	r2, [r3, #0]
 8014eba:	789b      	ldrb	r3, [r3, #2]
 8014ebc:	81a2      	strh	r2, [r4, #12]
 8014ebe:	73a3      	strb	r3, [r4, #14]
			strcpy(p->grade,"8A+");
 8014ec0:	687b      	ldr	r3, [r7, #4]
 8014ec2:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8014ec6:	4aa8      	ldr	r2, [pc, #672]	; (8015168 <problem_fetch+0x13b04>)
 8014ec8:	6810      	ldr	r0, [r2, #0]
 8014eca:	6018      	str	r0, [r3, #0]
			p->moveSize = 5;
 8014ecc:	687b      	ldr	r3, [r7, #4]
 8014ece:	2205      	movs	r2, #5
 8014ed0:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,H,E,D,A");
 8014ed2:	687b      	ldr	r3, [r7, #4]
 8014ed4:	33a4      	adds	r3, #164	; 0xa4
 8014ed6:	49a5      	ldr	r1, [pc, #660]	; (801516c <problem_fetch+0x13b08>)
 8014ed8:	461a      	mov	r2, r3
 8014eda:	460b      	mov	r3, r1
 8014edc:	cb03      	ldmia	r3!, {r0, r1}
 8014ede:	6010      	str	r0, [r2, #0]
 8014ee0:	6051      	str	r1, [r2, #4]
 8014ee2:	881b      	ldrh	r3, [r3, #0]
 8014ee4:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"5,5,9,15,18");
 8014ee6:	687b      	ldr	r3, [r7, #4]
 8014ee8:	3304      	adds	r3, #4
 8014eea:	4aa1      	ldr	r2, [pc, #644]	; (8015170 <problem_fetch+0x13b0c>)
 8014eec:	461c      	mov	r4, r3
 8014eee:	4613      	mov	r3, r2
 8014ef0:	cb07      	ldmia	r3!, {r0, r1, r2}
 8014ef2:	6020      	str	r0, [r4, #0]
 8014ef4:	6061      	str	r1, [r4, #4]
 8014ef6:	60a2      	str	r2, [r4, #8]
			strcpy(p->startFinish,"s,s,d,d,e");
 8014ef8:	687b      	ldr	r3, [r7, #4]
 8014efa:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8014efe:	499d      	ldr	r1, [pc, #628]	; (8015174 <problem_fetch+0x13b10>)
 8014f00:	461a      	mov	r2, r3
 8014f02:	460b      	mov	r3, r1
 8014f04:	cb03      	ldmia	r3!, {r0, r1}
 8014f06:	6010      	str	r0, [r2, #0]
 8014f08:	6051      	str	r1, [r2, #4]
 8014f0a:	881b      	ldrh	r3, [r3, #0]
 8014f0c:	8113      	strh	r3, [r2, #8]
			break;
 8014f0e:	f007 bad9 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 577 :
			strcpy(p->name,"カラス");
 8014f12:	687b      	ldr	r3, [r7, #4]
 8014f14:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8014f18:	4997      	ldr	r1, [pc, #604]	; (8015178 <problem_fetch+0x13b14>)
 8014f1a:	461a      	mov	r2, r3
 8014f1c:	460b      	mov	r3, r1
 8014f1e:	cb03      	ldmia	r3!, {r0, r1}
 8014f20:	6010      	str	r0, [r2, #0]
 8014f22:	6051      	str	r1, [r2, #4]
 8014f24:	881b      	ldrh	r3, [r3, #0]
 8014f26:	8113      	strh	r3, [r2, #8]
			strcpy(p->grade,"7A");
 8014f28:	687b      	ldr	r3, [r7, #4]
 8014f2a:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8014f2e:	4a93      	ldr	r2, [pc, #588]	; (801517c <problem_fetch+0x13b18>)
 8014f30:	8811      	ldrh	r1, [r2, #0]
 8014f32:	7892      	ldrb	r2, [r2, #2]
 8014f34:	8019      	strh	r1, [r3, #0]
 8014f36:	709a      	strb	r2, [r3, #2]
			p->moveSize = 7;
 8014f38:	687b      	ldr	r3, [r7, #4]
 8014f3a:	2207      	movs	r2, #7
 8014f3c:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"H,J,K,H,I,E,D");
 8014f3e:	687b      	ldr	r3, [r7, #4]
 8014f40:	33a4      	adds	r3, #164	; 0xa4
 8014f42:	4a8f      	ldr	r2, [pc, #572]	; (8015180 <problem_fetch+0x13b1c>)
 8014f44:	461c      	mov	r4, r3
 8014f46:	4613      	mov	r3, r2
 8014f48:	cb07      	ldmia	r3!, {r0, r1, r2}
 8014f4a:	6020      	str	r0, [r4, #0]
 8014f4c:	6061      	str	r1, [r4, #4]
 8014f4e:	60a2      	str	r2, [r4, #8]
 8014f50:	881b      	ldrh	r3, [r3, #0]
 8014f52:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,7,9,12,14,16,18");
 8014f54:	687b      	ldr	r3, [r7, #4]
 8014f56:	3304      	adds	r3, #4
 8014f58:	4a8a      	ldr	r2, [pc, #552]	; (8015184 <problem_fetch+0x13b20>)
 8014f5a:	461d      	mov	r5, r3
 8014f5c:	4614      	mov	r4, r2
 8014f5e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8014f60:	6028      	str	r0, [r5, #0]
 8014f62:	6069      	str	r1, [r5, #4]
 8014f64:	60aa      	str	r2, [r5, #8]
 8014f66:	60eb      	str	r3, [r5, #12]
 8014f68:	8823      	ldrh	r3, [r4, #0]
 8014f6a:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 8014f6c:	687b      	ldr	r3, [r7, #4]
 8014f6e:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8014f72:	4a85      	ldr	r2, [pc, #532]	; (8015188 <problem_fetch+0x13b24>)
 8014f74:	461c      	mov	r4, r3
 8014f76:	4613      	mov	r3, r2
 8014f78:	cb07      	ldmia	r3!, {r0, r1, r2}
 8014f7a:	6020      	str	r0, [r4, #0]
 8014f7c:	6061      	str	r1, [r4, #4]
 8014f7e:	60a2      	str	r2, [r4, #8]
 8014f80:	881b      	ldrh	r3, [r3, #0]
 8014f82:	81a3      	strh	r3, [r4, #12]
			break;
 8014f84:	f007 ba9e 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 578 :
			strcpy(p->name,"TOMTOM");
 8014f88:	687b      	ldr	r3, [r7, #4]
 8014f8a:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8014f8e:	4a7f      	ldr	r2, [pc, #508]	; (801518c <problem_fetch+0x13b28>)
 8014f90:	6810      	ldr	r0, [r2, #0]
 8014f92:	6018      	str	r0, [r3, #0]
 8014f94:	8891      	ldrh	r1, [r2, #4]
 8014f96:	7992      	ldrb	r2, [r2, #6]
 8014f98:	8099      	strh	r1, [r3, #4]
 8014f9a:	719a      	strb	r2, [r3, #6]
			strcpy(p->grade,"6C+");
 8014f9c:	687b      	ldr	r3, [r7, #4]
 8014f9e:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8014fa2:	4a7b      	ldr	r2, [pc, #492]	; (8015190 <problem_fetch+0x13b2c>)
 8014fa4:	6810      	ldr	r0, [r2, #0]
 8014fa6:	6018      	str	r0, [r3, #0]
			p->moveSize = 5;
 8014fa8:	687b      	ldr	r3, [r7, #4]
 8014faa:	2205      	movs	r2, #5
 8014fac:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,H,C,D,A");
 8014fae:	687b      	ldr	r3, [r7, #4]
 8014fb0:	33a4      	adds	r3, #164	; 0xa4
 8014fb2:	4978      	ldr	r1, [pc, #480]	; (8015194 <problem_fetch+0x13b30>)
 8014fb4:	461a      	mov	r2, r3
 8014fb6:	460b      	mov	r3, r1
 8014fb8:	cb03      	ldmia	r3!, {r0, r1}
 8014fba:	6010      	str	r0, [r2, #0]
 8014fbc:	6051      	str	r1, [r2, #4]
 8014fbe:	881b      	ldrh	r3, [r3, #0]
 8014fc0:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"5,10,13,15,18");
 8014fc2:	687b      	ldr	r3, [r7, #4]
 8014fc4:	3304      	adds	r3, #4
 8014fc6:	4a74      	ldr	r2, [pc, #464]	; (8015198 <problem_fetch+0x13b34>)
 8014fc8:	461c      	mov	r4, r3
 8014fca:	4613      	mov	r3, r2
 8014fcc:	cb07      	ldmia	r3!, {r0, r1, r2}
 8014fce:	6020      	str	r0, [r4, #0]
 8014fd0:	6061      	str	r1, [r4, #4]
 8014fd2:	60a2      	str	r2, [r4, #8]
 8014fd4:	881b      	ldrh	r3, [r3, #0]
 8014fd6:	81a3      	strh	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,e");
 8014fd8:	687b      	ldr	r3, [r7, #4]
 8014fda:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8014fde:	496f      	ldr	r1, [pc, #444]	; (801519c <problem_fetch+0x13b38>)
 8014fe0:	461a      	mov	r2, r3
 8014fe2:	460b      	mov	r3, r1
 8014fe4:	cb03      	ldmia	r3!, {r0, r1}
 8014fe6:	6010      	str	r0, [r2, #0]
 8014fe8:	6051      	str	r1, [r2, #4]
 8014fea:	881b      	ldrh	r3, [r3, #0]
 8014fec:	8113      	strh	r3, [r2, #8]
			break;
 8014fee:	f007 ba69 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 579 :
			strcpy(p->name,"THE GREAT HAMBINO");
 8014ff2:	687b      	ldr	r3, [r7, #4]
 8014ff4:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8014ff8:	4a69      	ldr	r2, [pc, #420]	; (80151a0 <problem_fetch+0x13b3c>)
 8014ffa:	461d      	mov	r5, r3
 8014ffc:	4614      	mov	r4, r2
 8014ffe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8015000:	6028      	str	r0, [r5, #0]
 8015002:	6069      	str	r1, [r5, #4]
 8015004:	60aa      	str	r2, [r5, #8]
 8015006:	60eb      	str	r3, [r5, #12]
 8015008:	8823      	ldrh	r3, [r4, #0]
 801500a:	822b      	strh	r3, [r5, #16]
			strcpy(p->grade,"6B+");
 801500c:	687b      	ldr	r3, [r7, #4]
 801500e:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8015012:	4a64      	ldr	r2, [pc, #400]	; (80151a4 <problem_fetch+0x13b40>)
 8015014:	6810      	ldr	r0, [r2, #0]
 8015016:	6018      	str	r0, [r3, #0]
			p->moveSize = 9;
 8015018:	687b      	ldr	r3, [r7, #4]
 801501a:	2209      	movs	r2, #9
 801501c:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,E,H,C,F,E,G,G,I");
 801501e:	687b      	ldr	r3, [r7, #4]
 8015020:	33a4      	adds	r3, #164	; 0xa4
 8015022:	4a61      	ldr	r2, [pc, #388]	; (80151a8 <problem_fetch+0x13b44>)
 8015024:	461d      	mov	r5, r3
 8015026:	4614      	mov	r4, r2
 8015028:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801502a:	6028      	str	r0, [r5, #0]
 801502c:	6069      	str	r1, [r5, #4]
 801502e:	60aa      	str	r2, [r5, #8]
 8015030:	60eb      	str	r3, [r5, #12]
 8015032:	8823      	ldrh	r3, [r4, #0]
 8015034:	822b      	strh	r3, [r5, #16]
			strcpy(p->moveNumbers,"4,6,8,8,11,12,14,15,18");
 8015036:	687b      	ldr	r3, [r7, #4]
 8015038:	3304      	adds	r3, #4
 801503a:	4a5c      	ldr	r2, [pc, #368]	; (80151ac <problem_fetch+0x13b48>)
 801503c:	461c      	mov	r4, r3
 801503e:	4615      	mov	r5, r2
 8015040:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8015042:	6020      	str	r0, [r4, #0]
 8015044:	6061      	str	r1, [r4, #4]
 8015046:	60a2      	str	r2, [r4, #8]
 8015048:	60e3      	str	r3, [r4, #12]
 801504a:	6828      	ldr	r0, [r5, #0]
 801504c:	6120      	str	r0, [r4, #16]
 801504e:	88ab      	ldrh	r3, [r5, #4]
 8015050:	79aa      	ldrb	r2, [r5, #6]
 8015052:	82a3      	strh	r3, [r4, #20]
 8015054:	4613      	mov	r3, r2
 8015056:	75a3      	strb	r3, [r4, #22]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,d,e");
 8015058:	687b      	ldr	r3, [r7, #4]
 801505a:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 801505e:	4a54      	ldr	r2, [pc, #336]	; (80151b0 <problem_fetch+0x13b4c>)
 8015060:	461d      	mov	r5, r3
 8015062:	4614      	mov	r4, r2
 8015064:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8015066:	6028      	str	r0, [r5, #0]
 8015068:	6069      	str	r1, [r5, #4]
 801506a:	60aa      	str	r2, [r5, #8]
 801506c:	60eb      	str	r3, [r5, #12]
 801506e:	8823      	ldrh	r3, [r4, #0]
 8015070:	822b      	strh	r3, [r5, #16]
			break;
 8015072:	f007 ba27 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 580 :
			strcpy(p->name,"OUT THERE");
 8015076:	687b      	ldr	r3, [r7, #4]
 8015078:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801507c:	494d      	ldr	r1, [pc, #308]	; (80151b4 <problem_fetch+0x13b50>)
 801507e:	461a      	mov	r2, r3
 8015080:	460b      	mov	r3, r1
 8015082:	cb03      	ldmia	r3!, {r0, r1}
 8015084:	6010      	str	r0, [r2, #0]
 8015086:	6051      	str	r1, [r2, #4]
 8015088:	881b      	ldrh	r3, [r3, #0]
 801508a:	8113      	strh	r3, [r2, #8]
			strcpy(p->grade,"6B+");
 801508c:	687b      	ldr	r3, [r7, #4]
 801508e:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8015092:	4a44      	ldr	r2, [pc, #272]	; (80151a4 <problem_fetch+0x13b40>)
 8015094:	6810      	ldr	r0, [r2, #0]
 8015096:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 8015098:	687b      	ldr	r3, [r7, #4]
 801509a:	2207      	movs	r2, #7
 801509c:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,G,H,C,D,B,D");
 801509e:	687b      	ldr	r3, [r7, #4]
 80150a0:	33a4      	adds	r3, #164	; 0xa4
 80150a2:	4a45      	ldr	r2, [pc, #276]	; (80151b8 <problem_fetch+0x13b54>)
 80150a4:	461c      	mov	r4, r3
 80150a6:	4613      	mov	r3, r2
 80150a8:	cb07      	ldmia	r3!, {r0, r1, r2}
 80150aa:	6020      	str	r0, [r4, #0]
 80150ac:	6061      	str	r1, [r4, #4]
 80150ae:	60a2      	str	r2, [r4, #8]
 80150b0:	881b      	ldrh	r3, [r3, #0]
 80150b2:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,6,10,13,15,15,18");
 80150b4:	687b      	ldr	r3, [r7, #4]
 80150b6:	3304      	adds	r3, #4
 80150b8:	4a40      	ldr	r2, [pc, #256]	; (80151bc <problem_fetch+0x13b58>)
 80150ba:	461d      	mov	r5, r3
 80150bc:	4614      	mov	r4, r2
 80150be:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80150c0:	6028      	str	r0, [r5, #0]
 80150c2:	6069      	str	r1, [r5, #4]
 80150c4:	60aa      	str	r2, [r5, #8]
 80150c6:	60eb      	str	r3, [r5, #12]
 80150c8:	8823      	ldrh	r3, [r4, #0]
 80150ca:	78a2      	ldrb	r2, [r4, #2]
 80150cc:	822b      	strh	r3, [r5, #16]
 80150ce:	4613      	mov	r3, r2
 80150d0:	74ab      	strb	r3, [r5, #18]
			strcpy(p->startFinish,"s,s,d,d,d,d,e");
 80150d2:	687b      	ldr	r3, [r7, #4]
 80150d4:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 80150d8:	4a39      	ldr	r2, [pc, #228]	; (80151c0 <problem_fetch+0x13b5c>)
 80150da:	461c      	mov	r4, r3
 80150dc:	4613      	mov	r3, r2
 80150de:	cb07      	ldmia	r3!, {r0, r1, r2}
 80150e0:	6020      	str	r0, [r4, #0]
 80150e2:	6061      	str	r1, [r4, #4]
 80150e4:	60a2      	str	r2, [r4, #8]
 80150e6:	881b      	ldrh	r3, [r3, #0]
 80150e8:	81a3      	strh	r3, [r4, #12]
			break;
 80150ea:	f007 b9eb 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 581 :
			strcpy(p->name,"OPPOSITES");
 80150ee:	687b      	ldr	r3, [r7, #4]
 80150f0:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80150f4:	4933      	ldr	r1, [pc, #204]	; (80151c4 <problem_fetch+0x13b60>)
 80150f6:	461a      	mov	r2, r3
 80150f8:	460b      	mov	r3, r1
 80150fa:	cb03      	ldmia	r3!, {r0, r1}
 80150fc:	6010      	str	r0, [r2, #0]
 80150fe:	6051      	str	r1, [r2, #4]
 8015100:	881b      	ldrh	r3, [r3, #0]
 8015102:	8113      	strh	r3, [r2, #8]
			strcpy(p->grade,"7B");
 8015104:	687b      	ldr	r3, [r7, #4]
 8015106:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801510a:	4a2f      	ldr	r2, [pc, #188]	; (80151c8 <problem_fetch+0x13b64>)
 801510c:	8811      	ldrh	r1, [r2, #0]
 801510e:	7892      	ldrb	r2, [r2, #2]
 8015110:	8019      	strh	r1, [r3, #0]
 8015112:	709a      	strb	r2, [r3, #2]
			p->moveSize = 7;
 8015114:	687b      	ldr	r3, [r7, #4]
 8015116:	2207      	movs	r2, #7
 8015118:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,G,H,J,F,G,D");
 801511a:	687b      	ldr	r3, [r7, #4]
 801511c:	33a4      	adds	r3, #164	; 0xa4
 801511e:	4a2b      	ldr	r2, [pc, #172]	; (80151cc <problem_fetch+0x13b68>)
 8015120:	461c      	mov	r4, r3
 8015122:	4613      	mov	r3, r2
 8015124:	cb07      	ldmia	r3!, {r0, r1, r2}
 8015126:	6020      	str	r0, [r4, #0]
 8015128:	6061      	str	r1, [r4, #4]
 801512a:	60a2      	str	r2, [r4, #8]
 801512c:	881b      	ldrh	r3, [r3, #0]
 801512e:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,9,8,12,13,15,18");
 8015130:	687b      	ldr	r3, [r7, #4]
 8015132:	3304      	adds	r3, #4
 8015134:	4a26      	ldr	r2, [pc, #152]	; (80151d0 <problem_fetch+0x13b6c>)
 8015136:	461d      	mov	r5, r3
 8015138:	4614      	mov	r4, r2
 801513a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801513c:	6028      	str	r0, [r5, #0]
 801513e:	6069      	str	r1, [r5, #4]
 8015140:	60aa      	str	r2, [r5, #8]
 8015142:	60eb      	str	r3, [r5, #12]
 8015144:	8823      	ldrh	r3, [r4, #0]
 8015146:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 8015148:	687b      	ldr	r3, [r7, #4]
 801514a:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 801514e:	4a0e      	ldr	r2, [pc, #56]	; (8015188 <problem_fetch+0x13b24>)
 8015150:	461c      	mov	r4, r3
 8015152:	4613      	mov	r3, r2
 8015154:	cb07      	ldmia	r3!, {r0, r1, r2}
 8015156:	6020      	str	r0, [r4, #0]
 8015158:	6061      	str	r1, [r4, #4]
 801515a:	60a2      	str	r2, [r4, #8]
 801515c:	881b      	ldrh	r3, [r3, #0]
 801515e:	81a3      	strh	r3, [r4, #12]
			break;
 8015160:	f007 b9b0 	b.w	801c4c4 <problem_fetch+0x1ae60>
 8015164:	0802a930 	.word	0x0802a930
 8015168:	0802a940 	.word	0x0802a940
 801516c:	0802a944 	.word	0x0802a944
 8015170:	0802a950 	.word	0x0802a950
 8015174:	08024204 	.word	0x08024204
 8015178:	0802a95c 	.word	0x0802a95c
 801517c:	08023ae4 	.word	0x08023ae4
 8015180:	0802a968 	.word	0x0802a968
 8015184:	0802a978 	.word	0x0802a978
 8015188:	08023cac 	.word	0x08023cac
 801518c:	0802a98c 	.word	0x0802a98c
 8015190:	08023bbc 	.word	0x08023bbc
 8015194:	0802a994 	.word	0x0802a994
 8015198:	0802a9a0 	.word	0x0802a9a0
 801519c:	08023ff0 	.word	0x08023ff0
 80151a0:	0802a9b0 	.word	0x0802a9b0
 80151a4:	08023b24 	.word	0x08023b24
 80151a8:	0802a9c4 	.word	0x0802a9c4
 80151ac:	0802a9d8 	.word	0x0802a9d8
 80151b0:	08024b08 	.word	0x08024b08
 80151b4:	0802a9f0 	.word	0x0802a9f0
 80151b8:	0802a9fc 	.word	0x0802a9fc
 80151bc:	0802aa0c 	.word	0x0802aa0c
 80151c0:	08023b9c 	.word	0x08023b9c
 80151c4:	0802aa20 	.word	0x0802aa20
 80151c8:	0802421c 	.word	0x0802421c
 80151cc:	0802aa2c 	.word	0x0802aa2c
 80151d0:	0802aa3c 	.word	0x0802aa3c
		case 582 :
			strcpy(p->name,"BISCUITS RETURNS");
 80151d4:	687b      	ldr	r3, [r7, #4]
 80151d6:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80151da:	4ac1      	ldr	r2, [pc, #772]	; (80154e0 <problem_fetch+0x13e7c>)
 80151dc:	461d      	mov	r5, r3
 80151de:	4614      	mov	r4, r2
 80151e0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80151e2:	6028      	str	r0, [r5, #0]
 80151e4:	6069      	str	r1, [r5, #4]
 80151e6:	60aa      	str	r2, [r5, #8]
 80151e8:	60eb      	str	r3, [r5, #12]
 80151ea:	7823      	ldrb	r3, [r4, #0]
 80151ec:	742b      	strb	r3, [r5, #16]
			strcpy(p->grade,"6B+");
 80151ee:	687b      	ldr	r3, [r7, #4]
 80151f0:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80151f4:	4abb      	ldr	r2, [pc, #748]	; (80154e4 <problem_fetch+0x13e80>)
 80151f6:	6810      	ldr	r0, [r2, #0]
 80151f8:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 80151fa:	687b      	ldr	r3, [r7, #4]
 80151fc:	2206      	movs	r2, #6
 80151fe:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,G,H,C,D,D");
 8015200:	687b      	ldr	r3, [r7, #4]
 8015202:	33a4      	adds	r3, #164	; 0xa4
 8015204:	4ab8      	ldr	r2, [pc, #736]	; (80154e8 <problem_fetch+0x13e84>)
 8015206:	461c      	mov	r4, r3
 8015208:	4613      	mov	r3, r2
 801520a:	cb07      	ldmia	r3!, {r0, r1, r2}
 801520c:	6020      	str	r0, [r4, #0]
 801520e:	6061      	str	r1, [r4, #4]
 8015210:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,6,10,13,15,18");
 8015212:	687b      	ldr	r3, [r7, #4]
 8015214:	3304      	adds	r3, #4
 8015216:	4ab5      	ldr	r2, [pc, #724]	; (80154ec <problem_fetch+0x13e88>)
 8015218:	461c      	mov	r4, r3
 801521a:	4615      	mov	r5, r2
 801521c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801521e:	6020      	str	r0, [r4, #0]
 8015220:	6061      	str	r1, [r4, #4]
 8015222:	60a2      	str	r2, [r4, #8]
 8015224:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,s,d,d,d,e");
 8015226:	687b      	ldr	r3, [r7, #4]
 8015228:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 801522c:	4ab0      	ldr	r2, [pc, #704]	; (80154f0 <problem_fetch+0x13e8c>)
 801522e:	461c      	mov	r4, r3
 8015230:	4613      	mov	r3, r2
 8015232:	cb07      	ldmia	r3!, {r0, r1, r2}
 8015234:	6020      	str	r0, [r4, #0]
 8015236:	6061      	str	r1, [r4, #4]
 8015238:	60a2      	str	r2, [r4, #8]
			break;
 801523a:	f007 b943 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 583 :
			strcpy(p->name,"STREETS OF GOLD");
 801523e:	687b      	ldr	r3, [r7, #4]
 8015240:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8015244:	4aab      	ldr	r2, [pc, #684]	; (80154f4 <problem_fetch+0x13e90>)
 8015246:	461c      	mov	r4, r3
 8015248:	4615      	mov	r5, r2
 801524a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801524c:	6020      	str	r0, [r4, #0]
 801524e:	6061      	str	r1, [r4, #4]
 8015250:	60a2      	str	r2, [r4, #8]
 8015252:	60e3      	str	r3, [r4, #12]
			strcpy(p->grade,"7B+");
 8015254:	687b      	ldr	r3, [r7, #4]
 8015256:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801525a:	4aa7      	ldr	r2, [pc, #668]	; (80154f8 <problem_fetch+0x13e94>)
 801525c:	6810      	ldr	r0, [r2, #0]
 801525e:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 8015260:	687b      	ldr	r3, [r7, #4]
 8015262:	2206      	movs	r2, #6
 8015264:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"H,C,K,F,B,A");
 8015266:	687b      	ldr	r3, [r7, #4]
 8015268:	33a4      	adds	r3, #164	; 0xa4
 801526a:	4aa4      	ldr	r2, [pc, #656]	; (80154fc <problem_fetch+0x13e98>)
 801526c:	461c      	mov	r4, r3
 801526e:	4613      	mov	r3, r2
 8015270:	cb07      	ldmia	r3!, {r0, r1, r2}
 8015272:	6020      	str	r0, [r4, #0]
 8015274:	6061      	str	r1, [r4, #4]
 8015276:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,16,9,11,15,18");
 8015278:	687b      	ldr	r3, [r7, #4]
 801527a:	3304      	adds	r3, #4
 801527c:	4aa0      	ldr	r2, [pc, #640]	; (8015500 <problem_fetch+0x13e9c>)
 801527e:	461c      	mov	r4, r3
 8015280:	4615      	mov	r5, r2
 8015282:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8015284:	6020      	str	r0, [r4, #0]
 8015286:	6061      	str	r1, [r4, #4]
 8015288:	60a2      	str	r2, [r4, #8]
 801528a:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 801528c:	687b      	ldr	r3, [r7, #4]
 801528e:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8015292:	4a9c      	ldr	r2, [pc, #624]	; (8015504 <problem_fetch+0x13ea0>)
 8015294:	461c      	mov	r4, r3
 8015296:	4613      	mov	r3, r2
 8015298:	cb07      	ldmia	r3!, {r0, r1, r2}
 801529a:	6020      	str	r0, [r4, #0]
 801529c:	6061      	str	r1, [r4, #4]
 801529e:	60a2      	str	r2, [r4, #8]
			break;
 80152a0:	f007 b910 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 584 :
			strcpy(p->name,"BLACK TIGER");
 80152a4:	687b      	ldr	r3, [r7, #4]
 80152a6:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80152aa:	4a97      	ldr	r2, [pc, #604]	; (8015508 <problem_fetch+0x13ea4>)
 80152ac:	461c      	mov	r4, r3
 80152ae:	4613      	mov	r3, r2
 80152b0:	cb07      	ldmia	r3!, {r0, r1, r2}
 80152b2:	6020      	str	r0, [r4, #0]
 80152b4:	6061      	str	r1, [r4, #4]
 80152b6:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade,"6C+");
 80152b8:	687b      	ldr	r3, [r7, #4]
 80152ba:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80152be:	4a93      	ldr	r2, [pc, #588]	; (801550c <problem_fetch+0x13ea8>)
 80152c0:	6810      	ldr	r0, [r2, #0]
 80152c2:	6018      	str	r0, [r3, #0]
			p->moveSize = 5;
 80152c4:	687b      	ldr	r3, [r7, #4]
 80152c6:	2205      	movs	r2, #5
 80152c8:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"H,K,H,K,I");
 80152ca:	687b      	ldr	r3, [r7, #4]
 80152cc:	33a4      	adds	r3, #164	; 0xa4
 80152ce:	4990      	ldr	r1, [pc, #576]	; (8015510 <problem_fetch+0x13eac>)
 80152d0:	461a      	mov	r2, r3
 80152d2:	460b      	mov	r3, r1
 80152d4:	cb03      	ldmia	r3!, {r0, r1}
 80152d6:	6010      	str	r0, [r2, #0]
 80152d8:	6051      	str	r1, [r2, #4]
 80152da:	881b      	ldrh	r3, [r3, #0]
 80152dc:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"5,9,12,14,18");
 80152de:	687b      	ldr	r3, [r7, #4]
 80152e0:	3304      	adds	r3, #4
 80152e2:	4a8c      	ldr	r2, [pc, #560]	; (8015514 <problem_fetch+0x13eb0>)
 80152e4:	461c      	mov	r4, r3
 80152e6:	4613      	mov	r3, r2
 80152e8:	cb07      	ldmia	r3!, {r0, r1, r2}
 80152ea:	6020      	str	r0, [r4, #0]
 80152ec:	6061      	str	r1, [r4, #4]
 80152ee:	60a2      	str	r2, [r4, #8]
 80152f0:	781b      	ldrb	r3, [r3, #0]
 80152f2:	7323      	strb	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,e");
 80152f4:	687b      	ldr	r3, [r7, #4]
 80152f6:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 80152fa:	4987      	ldr	r1, [pc, #540]	; (8015518 <problem_fetch+0x13eb4>)
 80152fc:	461a      	mov	r2, r3
 80152fe:	460b      	mov	r3, r1
 8015300:	cb03      	ldmia	r3!, {r0, r1}
 8015302:	6010      	str	r0, [r2, #0]
 8015304:	6051      	str	r1, [r2, #4]
 8015306:	881b      	ldrh	r3, [r3, #0]
 8015308:	8113      	strh	r3, [r2, #8]
			break;
 801530a:	f007 b8db 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 585 :
			strcpy(p->name,"THE REAL ONE");
 801530e:	687b      	ldr	r3, [r7, #4]
 8015310:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8015314:	4a81      	ldr	r2, [pc, #516]	; (801551c <problem_fetch+0x13eb8>)
 8015316:	461c      	mov	r4, r3
 8015318:	4613      	mov	r3, r2
 801531a:	cb07      	ldmia	r3!, {r0, r1, r2}
 801531c:	6020      	str	r0, [r4, #0]
 801531e:	6061      	str	r1, [r4, #4]
 8015320:	60a2      	str	r2, [r4, #8]
 8015322:	781b      	ldrb	r3, [r3, #0]
 8015324:	7323      	strb	r3, [r4, #12]
			strcpy(p->grade,"6B+");
 8015326:	687b      	ldr	r3, [r7, #4]
 8015328:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801532c:	4a6d      	ldr	r2, [pc, #436]	; (80154e4 <problem_fetch+0x13e80>)
 801532e:	6810      	ldr	r0, [r2, #0]
 8015330:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 8015332:	687b      	ldr	r3, [r7, #4]
 8015334:	2207      	movs	r2, #7
 8015336:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,E,E,C,E,E,I");
 8015338:	687b      	ldr	r3, [r7, #4]
 801533a:	33a4      	adds	r3, #164	; 0xa4
 801533c:	4a78      	ldr	r2, [pc, #480]	; (8015520 <problem_fetch+0x13ebc>)
 801533e:	461c      	mov	r4, r3
 8015340:	4613      	mov	r3, r2
 8015342:	cb07      	ldmia	r3!, {r0, r1, r2}
 8015344:	6020      	str	r0, [r4, #0]
 8015346:	6061      	str	r1, [r4, #4]
 8015348:	60a2      	str	r2, [r4, #8]
 801534a:	881b      	ldrh	r3, [r3, #0]
 801534c:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,8,9,13,14,16,18");
 801534e:	687b      	ldr	r3, [r7, #4]
 8015350:	3304      	adds	r3, #4
 8015352:	4a74      	ldr	r2, [pc, #464]	; (8015524 <problem_fetch+0x13ec0>)
 8015354:	461d      	mov	r5, r3
 8015356:	4614      	mov	r4, r2
 8015358:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801535a:	6028      	str	r0, [r5, #0]
 801535c:	6069      	str	r1, [r5, #4]
 801535e:	60aa      	str	r2, [r5, #8]
 8015360:	60eb      	str	r3, [r5, #12]
 8015362:	8823      	ldrh	r3, [r4, #0]
 8015364:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 8015366:	687b      	ldr	r3, [r7, #4]
 8015368:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 801536c:	4a6e      	ldr	r2, [pc, #440]	; (8015528 <problem_fetch+0x13ec4>)
 801536e:	461c      	mov	r4, r3
 8015370:	4613      	mov	r3, r2
 8015372:	cb07      	ldmia	r3!, {r0, r1, r2}
 8015374:	6020      	str	r0, [r4, #0]
 8015376:	6061      	str	r1, [r4, #4]
 8015378:	60a2      	str	r2, [r4, #8]
 801537a:	881b      	ldrh	r3, [r3, #0]
 801537c:	81a3      	strh	r3, [r4, #12]
			break;
 801537e:	f007 b8a1 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 586 :
			strcpy(p->name,"PURPLE IN THE OPEN");
 8015382:	687b      	ldr	r3, [r7, #4]
 8015384:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8015388:	4a68      	ldr	r2, [pc, #416]	; (801552c <problem_fetch+0x13ec8>)
 801538a:	461d      	mov	r5, r3
 801538c:	4614      	mov	r4, r2
 801538e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8015390:	6028      	str	r0, [r5, #0]
 8015392:	6069      	str	r1, [r5, #4]
 8015394:	60aa      	str	r2, [r5, #8]
 8015396:	60eb      	str	r3, [r5, #12]
 8015398:	8823      	ldrh	r3, [r4, #0]
 801539a:	78a2      	ldrb	r2, [r4, #2]
 801539c:	822b      	strh	r3, [r5, #16]
 801539e:	4613      	mov	r3, r2
 80153a0:	74ab      	strb	r3, [r5, #18]
			strcpy(p->grade,"7B");
 80153a2:	687b      	ldr	r3, [r7, #4]
 80153a4:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80153a8:	4a61      	ldr	r2, [pc, #388]	; (8015530 <problem_fetch+0x13ecc>)
 80153aa:	8811      	ldrh	r1, [r2, #0]
 80153ac:	7892      	ldrb	r2, [r2, #2]
 80153ae:	8019      	strh	r1, [r3, #0]
 80153b0:	709a      	strb	r2, [r3, #2]
			p->moveSize = 7;
 80153b2:	687b      	ldr	r3, [r7, #4]
 80153b4:	2207      	movs	r2, #7
 80153b6:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"E,C,E,D,I,H,I");
 80153b8:	687b      	ldr	r3, [r7, #4]
 80153ba:	33a4      	adds	r3, #164	; 0xa4
 80153bc:	4a5d      	ldr	r2, [pc, #372]	; (8015534 <problem_fetch+0x13ed0>)
 80153be:	461c      	mov	r4, r3
 80153c0:	4613      	mov	r3, r2
 80153c2:	cb07      	ldmia	r3!, {r0, r1, r2}
 80153c4:	6020      	str	r0, [r4, #0]
 80153c6:	6061      	str	r1, [r4, #4]
 80153c8:	60a2      	str	r2, [r4, #8]
 80153ca:	881b      	ldrh	r3, [r3, #0]
 80153cc:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"6,8,12,11,14,16,18");
 80153ce:	687b      	ldr	r3, [r7, #4]
 80153d0:	3304      	adds	r3, #4
 80153d2:	4a59      	ldr	r2, [pc, #356]	; (8015538 <problem_fetch+0x13ed4>)
 80153d4:	461d      	mov	r5, r3
 80153d6:	4614      	mov	r4, r2
 80153d8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80153da:	6028      	str	r0, [r5, #0]
 80153dc:	6069      	str	r1, [r5, #4]
 80153de:	60aa      	str	r2, [r5, #8]
 80153e0:	60eb      	str	r3, [r5, #12]
 80153e2:	8823      	ldrh	r3, [r4, #0]
 80153e4:	78a2      	ldrb	r2, [r4, #2]
 80153e6:	822b      	strh	r3, [r5, #16]
 80153e8:	4613      	mov	r3, r2
 80153ea:	74ab      	strb	r3, [r5, #18]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 80153ec:	687b      	ldr	r3, [r7, #4]
 80153ee:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 80153f2:	4a4d      	ldr	r2, [pc, #308]	; (8015528 <problem_fetch+0x13ec4>)
 80153f4:	461c      	mov	r4, r3
 80153f6:	4613      	mov	r3, r2
 80153f8:	cb07      	ldmia	r3!, {r0, r1, r2}
 80153fa:	6020      	str	r0, [r4, #0]
 80153fc:	6061      	str	r1, [r4, #4]
 80153fe:	60a2      	str	r2, [r4, #8]
 8015400:	881b      	ldrh	r3, [r3, #0]
 8015402:	81a3      	strh	r3, [r4, #12]
			break;
 8015404:	f007 b85e 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 587 :
			strcpy(p->name,"BOUJEE");
 8015408:	687b      	ldr	r3, [r7, #4]
 801540a:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801540e:	4a4b      	ldr	r2, [pc, #300]	; (801553c <problem_fetch+0x13ed8>)
 8015410:	6810      	ldr	r0, [r2, #0]
 8015412:	6018      	str	r0, [r3, #0]
 8015414:	8891      	ldrh	r1, [r2, #4]
 8015416:	7992      	ldrb	r2, [r2, #6]
 8015418:	8099      	strh	r1, [r3, #4]
 801541a:	719a      	strb	r2, [r3, #6]
			strcpy(p->grade,"7A+");
 801541c:	687b      	ldr	r3, [r7, #4]
 801541e:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8015422:	4a47      	ldr	r2, [pc, #284]	; (8015540 <problem_fetch+0x13edc>)
 8015424:	6810      	ldr	r0, [r2, #0]
 8015426:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 8015428:	687b      	ldr	r3, [r7, #4]
 801542a:	2206      	movs	r2, #6
 801542c:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,C,D,H,C,D");
 801542e:	687b      	ldr	r3, [r7, #4]
 8015430:	33a4      	adds	r3, #164	; 0xa4
 8015432:	4a44      	ldr	r2, [pc, #272]	; (8015544 <problem_fetch+0x13ee0>)
 8015434:	461c      	mov	r4, r3
 8015436:	4613      	mov	r3, r2
 8015438:	cb07      	ldmia	r3!, {r0, r1, r2}
 801543a:	6020      	str	r0, [r4, #0]
 801543c:	6061      	str	r1, [r4, #4]
 801543e:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,13,15,10,8,18");
 8015440:	687b      	ldr	r3, [r7, #4]
 8015442:	3304      	adds	r3, #4
 8015444:	4a40      	ldr	r2, [pc, #256]	; (8015548 <problem_fetch+0x13ee4>)
 8015446:	461c      	mov	r4, r3
 8015448:	4615      	mov	r5, r2
 801544a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801544c:	6020      	str	r0, [r4, #0]
 801544e:	6061      	str	r1, [r4, #4]
 8015450:	60a2      	str	r2, [r4, #8]
 8015452:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 8015454:	687b      	ldr	r3, [r7, #4]
 8015456:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 801545a:	4a2a      	ldr	r2, [pc, #168]	; (8015504 <problem_fetch+0x13ea0>)
 801545c:	461c      	mov	r4, r3
 801545e:	4613      	mov	r3, r2
 8015460:	cb07      	ldmia	r3!, {r0, r1, r2}
 8015462:	6020      	str	r0, [r4, #0]
 8015464:	6061      	str	r1, [r4, #4]
 8015466:	60a2      	str	r2, [r4, #8]
			break;
 8015468:	f007 b82c 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 588 :
			strcpy(p->name,"CAPTAIN AUBREY");
 801546c:	687b      	ldr	r3, [r7, #4]
 801546e:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8015472:	4a36      	ldr	r2, [pc, #216]	; (801554c <problem_fetch+0x13ee8>)
 8015474:	461c      	mov	r4, r3
 8015476:	4613      	mov	r3, r2
 8015478:	cb07      	ldmia	r3!, {r0, r1, r2}
 801547a:	6020      	str	r0, [r4, #0]
 801547c:	6061      	str	r1, [r4, #4]
 801547e:	60a2      	str	r2, [r4, #8]
 8015480:	881a      	ldrh	r2, [r3, #0]
 8015482:	789b      	ldrb	r3, [r3, #2]
 8015484:	81a2      	strh	r2, [r4, #12]
 8015486:	73a3      	strb	r3, [r4, #14]
			strcpy(p->grade,"7A+");
 8015488:	687b      	ldr	r3, [r7, #4]
 801548a:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801548e:	4a2c      	ldr	r2, [pc, #176]	; (8015540 <problem_fetch+0x13edc>)
 8015490:	6810      	ldr	r0, [r2, #0]
 8015492:	6018      	str	r0, [r3, #0]
			p->moveSize = 5;
 8015494:	687b      	ldr	r3, [r7, #4]
 8015496:	2205      	movs	r2, #5
 8015498:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,H,F,I,I");
 801549a:	687b      	ldr	r3, [r7, #4]
 801549c:	33a4      	adds	r3, #164	; 0xa4
 801549e:	492c      	ldr	r1, [pc, #176]	; (8015550 <problem_fetch+0x13eec>)
 80154a0:	461a      	mov	r2, r3
 80154a2:	460b      	mov	r3, r1
 80154a4:	cb03      	ldmia	r3!, {r0, r1}
 80154a6:	6010      	str	r0, [r2, #0]
 80154a8:	6051      	str	r1, [r2, #4]
 80154aa:	881b      	ldrh	r3, [r3, #0]
 80154ac:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"5,8,11,14,18");
 80154ae:	687b      	ldr	r3, [r7, #4]
 80154b0:	3304      	adds	r3, #4
 80154b2:	4a28      	ldr	r2, [pc, #160]	; (8015554 <problem_fetch+0x13ef0>)
 80154b4:	461c      	mov	r4, r3
 80154b6:	4613      	mov	r3, r2
 80154b8:	cb07      	ldmia	r3!, {r0, r1, r2}
 80154ba:	6020      	str	r0, [r4, #0]
 80154bc:	6061      	str	r1, [r4, #4]
 80154be:	60a2      	str	r2, [r4, #8]
 80154c0:	781b      	ldrb	r3, [r3, #0]
 80154c2:	7323      	strb	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,e");
 80154c4:	687b      	ldr	r3, [r7, #4]
 80154c6:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 80154ca:	4913      	ldr	r1, [pc, #76]	; (8015518 <problem_fetch+0x13eb4>)
 80154cc:	461a      	mov	r2, r3
 80154ce:	460b      	mov	r3, r1
 80154d0:	cb03      	ldmia	r3!, {r0, r1}
 80154d2:	6010      	str	r0, [r2, #0]
 80154d4:	6051      	str	r1, [r2, #4]
 80154d6:	881b      	ldrh	r3, [r3, #0]
 80154d8:	8113      	strh	r3, [r2, #8]
			break;
 80154da:	f006 bff3 	b.w	801c4c4 <problem_fetch+0x1ae60>
 80154de:	bf00      	nop
 80154e0:	0802aa50 	.word	0x0802aa50
 80154e4:	08023b24 	.word	0x08023b24
 80154e8:	0802aa64 	.word	0x0802aa64
 80154ec:	08028510 	.word	0x08028510
 80154f0:	08023b04 	.word	0x08023b04
 80154f4:	0802aa70 	.word	0x0802aa70
 80154f8:	08023c60 	.word	0x08023c60
 80154fc:	0802aa80 	.word	0x0802aa80
 8015500:	0802aa8c 	.word	0x0802aa8c
 8015504:	08023ec0 	.word	0x08023ec0
 8015508:	0802aa9c 	.word	0x0802aa9c
 801550c:	08023bbc 	.word	0x08023bbc
 8015510:	0802aaa8 	.word	0x0802aaa8
 8015514:	08024140 	.word	0x08024140
 8015518:	08023ff0 	.word	0x08023ff0
 801551c:	0802aab4 	.word	0x0802aab4
 8015520:	0802aac4 	.word	0x0802aac4
 8015524:	0802aad4 	.word	0x0802aad4
 8015528:	08023cac 	.word	0x08023cac
 801552c:	0802aae8 	.word	0x0802aae8
 8015530:	0802421c 	.word	0x0802421c
 8015534:	0802aafc 	.word	0x0802aafc
 8015538:	0802ab0c 	.word	0x0802ab0c
 801553c:	0802ab20 	.word	0x0802ab20
 8015540:	08023cc4 	.word	0x08023cc4
 8015544:	0802ab28 	.word	0x0802ab28
 8015548:	0802ab34 	.word	0x0802ab34
 801554c:	0802ab44 	.word	0x0802ab44
 8015550:	0802ab54 	.word	0x0802ab54
 8015554:	080272b0 	.word	0x080272b0
		case 589 :
			strcpy(p->name,"LONDON FROG");
 8015558:	687b      	ldr	r3, [r7, #4]
 801555a:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801555e:	4aa8      	ldr	r2, [pc, #672]	; (8015800 <problem_fetch+0x1419c>)
 8015560:	461c      	mov	r4, r3
 8015562:	4613      	mov	r3, r2
 8015564:	cb07      	ldmia	r3!, {r0, r1, r2}
 8015566:	6020      	str	r0, [r4, #0]
 8015568:	6061      	str	r1, [r4, #4]
 801556a:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade,"7A");
 801556c:	687b      	ldr	r3, [r7, #4]
 801556e:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8015572:	4aa4      	ldr	r2, [pc, #656]	; (8015804 <problem_fetch+0x141a0>)
 8015574:	8811      	ldrh	r1, [r2, #0]
 8015576:	7892      	ldrb	r2, [r2, #2]
 8015578:	8019      	strh	r1, [r3, #0]
 801557a:	709a      	strb	r2, [r3, #2]
			p->moveSize = 6;
 801557c:	687b      	ldr	r3, [r7, #4]
 801557e:	2206      	movs	r2, #6
 8015580:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,J,G,F,I,I");
 8015582:	687b      	ldr	r3, [r7, #4]
 8015584:	33a4      	adds	r3, #164	; 0xa4
 8015586:	4aa0      	ldr	r2, [pc, #640]	; (8015808 <problem_fetch+0x141a4>)
 8015588:	461c      	mov	r4, r3
 801558a:	4613      	mov	r3, r2
 801558c:	cb07      	ldmia	r3!, {r0, r1, r2}
 801558e:	6020      	str	r0, [r4, #0]
 8015590:	6061      	str	r1, [r4, #4]
 8015592:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,7,9,11,14,18");
 8015594:	687b      	ldr	r3, [r7, #4]
 8015596:	3304      	adds	r3, #4
 8015598:	4a9c      	ldr	r2, [pc, #624]	; (801580c <problem_fetch+0x141a8>)
 801559a:	461c      	mov	r4, r3
 801559c:	4613      	mov	r3, r2
 801559e:	cb07      	ldmia	r3!, {r0, r1, r2}
 80155a0:	6020      	str	r0, [r4, #0]
 80155a2:	6061      	str	r1, [r4, #4]
 80155a4:	60a2      	str	r2, [r4, #8]
 80155a6:	881a      	ldrh	r2, [r3, #0]
 80155a8:	789b      	ldrb	r3, [r3, #2]
 80155aa:	81a2      	strh	r2, [r4, #12]
 80155ac:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 80155ae:	687b      	ldr	r3, [r7, #4]
 80155b0:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 80155b4:	4a96      	ldr	r2, [pc, #600]	; (8015810 <problem_fetch+0x141ac>)
 80155b6:	461c      	mov	r4, r3
 80155b8:	4613      	mov	r3, r2
 80155ba:	cb07      	ldmia	r3!, {r0, r1, r2}
 80155bc:	6020      	str	r0, [r4, #0]
 80155be:	6061      	str	r1, [r4, #4]
 80155c0:	60a2      	str	r2, [r4, #8]
			break;
 80155c2:	f006 bf7f 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 590 :
			strcpy(p->name,"MO6.1");
 80155c6:	687b      	ldr	r3, [r7, #4]
 80155c8:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80155cc:	4a91      	ldr	r2, [pc, #580]	; (8015814 <problem_fetch+0x141b0>)
 80155ce:	6810      	ldr	r0, [r2, #0]
 80155d0:	6018      	str	r0, [r3, #0]
 80155d2:	8892      	ldrh	r2, [r2, #4]
 80155d4:	809a      	strh	r2, [r3, #4]
			strcpy(p->grade,"7A");
 80155d6:	687b      	ldr	r3, [r7, #4]
 80155d8:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80155dc:	4a89      	ldr	r2, [pc, #548]	; (8015804 <problem_fetch+0x141a0>)
 80155de:	8811      	ldrh	r1, [r2, #0]
 80155e0:	7892      	ldrb	r2, [r2, #2]
 80155e2:	8019      	strh	r1, [r3, #0]
 80155e4:	709a      	strb	r2, [r3, #2]
			p->moveSize = 6;
 80155e6:	687b      	ldr	r3, [r7, #4]
 80155e8:	2206      	movs	r2, #6
 80155ea:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,H,H,D,D,D");
 80155ec:	687b      	ldr	r3, [r7, #4]
 80155ee:	33a4      	adds	r3, #164	; 0xa4
 80155f0:	4a89      	ldr	r2, [pc, #548]	; (8015818 <problem_fetch+0x141b4>)
 80155f2:	461c      	mov	r4, r3
 80155f4:	4613      	mov	r3, r2
 80155f6:	cb07      	ldmia	r3!, {r0, r1, r2}
 80155f8:	6020      	str	r0, [r4, #0]
 80155fa:	6061      	str	r1, [r4, #4]
 80155fc:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,5,10,15,11,18");
 80155fe:	687b      	ldr	r3, [r7, #4]
 8015600:	3304      	adds	r3, #4
 8015602:	4a86      	ldr	r2, [pc, #536]	; (801581c <problem_fetch+0x141b8>)
 8015604:	461c      	mov	r4, r3
 8015606:	4615      	mov	r5, r2
 8015608:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801560a:	6020      	str	r0, [r4, #0]
 801560c:	6061      	str	r1, [r4, #4]
 801560e:	60a2      	str	r2, [r4, #8]
 8015610:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 8015612:	687b      	ldr	r3, [r7, #4]
 8015614:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8015618:	4a7d      	ldr	r2, [pc, #500]	; (8015810 <problem_fetch+0x141ac>)
 801561a:	461c      	mov	r4, r3
 801561c:	4613      	mov	r3, r2
 801561e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8015620:	6020      	str	r0, [r4, #0]
 8015622:	6061      	str	r1, [r4, #4]
 8015624:	60a2      	str	r2, [r4, #8]
			break;
 8015626:	f006 bf4d 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 591 :
			strcpy(p->name,"ALL BLACK ERRTHANG");
 801562a:	687b      	ldr	r3, [r7, #4]
 801562c:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8015630:	4a7b      	ldr	r2, [pc, #492]	; (8015820 <problem_fetch+0x141bc>)
 8015632:	461d      	mov	r5, r3
 8015634:	4614      	mov	r4, r2
 8015636:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8015638:	6028      	str	r0, [r5, #0]
 801563a:	6069      	str	r1, [r5, #4]
 801563c:	60aa      	str	r2, [r5, #8]
 801563e:	60eb      	str	r3, [r5, #12]
 8015640:	8823      	ldrh	r3, [r4, #0]
 8015642:	78a2      	ldrb	r2, [r4, #2]
 8015644:	822b      	strh	r3, [r5, #16]
 8015646:	4613      	mov	r3, r2
 8015648:	74ab      	strb	r3, [r5, #18]
			strcpy(p->grade,"7C");
 801564a:	687b      	ldr	r3, [r7, #4]
 801564c:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8015650:	4a74      	ldr	r2, [pc, #464]	; (8015824 <problem_fetch+0x141c0>)
 8015652:	8811      	ldrh	r1, [r2, #0]
 8015654:	7892      	ldrb	r2, [r2, #2]
 8015656:	8019      	strh	r1, [r3, #0]
 8015658:	709a      	strb	r2, [r3, #2]
			p->moveSize = 5;
 801565a:	687b      	ldr	r3, [r7, #4]
 801565c:	2205      	movs	r2, #5
 801565e:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,I,E,G,A");
 8015660:	687b      	ldr	r3, [r7, #4]
 8015662:	33a4      	adds	r3, #164	; 0xa4
 8015664:	4970      	ldr	r1, [pc, #448]	; (8015828 <problem_fetch+0x141c4>)
 8015666:	461a      	mov	r2, r3
 8015668:	460b      	mov	r3, r1
 801566a:	cb03      	ldmia	r3!, {r0, r1}
 801566c:	6010      	str	r0, [r2, #0]
 801566e:	6051      	str	r1, [r2, #4]
 8015670:	881b      	ldrh	r3, [r3, #0]
 8015672:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"5,10,14,17,18");
 8015674:	687b      	ldr	r3, [r7, #4]
 8015676:	3304      	adds	r3, #4
 8015678:	4a6c      	ldr	r2, [pc, #432]	; (801582c <problem_fetch+0x141c8>)
 801567a:	461c      	mov	r4, r3
 801567c:	4613      	mov	r3, r2
 801567e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8015680:	6020      	str	r0, [r4, #0]
 8015682:	6061      	str	r1, [r4, #4]
 8015684:	60a2      	str	r2, [r4, #8]
 8015686:	881b      	ldrh	r3, [r3, #0]
 8015688:	81a3      	strh	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,e");
 801568a:	687b      	ldr	r3, [r7, #4]
 801568c:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8015690:	4967      	ldr	r1, [pc, #412]	; (8015830 <problem_fetch+0x141cc>)
 8015692:	461a      	mov	r2, r3
 8015694:	460b      	mov	r3, r1
 8015696:	cb03      	ldmia	r3!, {r0, r1}
 8015698:	6010      	str	r0, [r2, #0]
 801569a:	6051      	str	r1, [r2, #4]
 801569c:	881b      	ldrh	r3, [r3, #0]
 801569e:	8113      	strh	r3, [r2, #8]
			break;
 80156a0:	f006 bf10 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 592 :
			strcpy(p->name,"BLACK ON RICE");
 80156a4:	687b      	ldr	r3, [r7, #4]
 80156a6:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80156aa:	4a62      	ldr	r2, [pc, #392]	; (8015834 <problem_fetch+0x141d0>)
 80156ac:	461c      	mov	r4, r3
 80156ae:	4613      	mov	r3, r2
 80156b0:	cb07      	ldmia	r3!, {r0, r1, r2}
 80156b2:	6020      	str	r0, [r4, #0]
 80156b4:	6061      	str	r1, [r4, #4]
 80156b6:	60a2      	str	r2, [r4, #8]
 80156b8:	881b      	ldrh	r3, [r3, #0]
 80156ba:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade,"6C+");
 80156bc:	687b      	ldr	r3, [r7, #4]
 80156be:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80156c2:	4a5d      	ldr	r2, [pc, #372]	; (8015838 <problem_fetch+0x141d4>)
 80156c4:	6810      	ldr	r0, [r2, #0]
 80156c6:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 80156c8:	687b      	ldr	r3, [r7, #4]
 80156ca:	2207      	movs	r2, #7
 80156cc:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,G,E,H,E,C,A");
 80156ce:	687b      	ldr	r3, [r7, #4]
 80156d0:	33a4      	adds	r3, #164	; 0xa4
 80156d2:	4a5a      	ldr	r2, [pc, #360]	; (801583c <problem_fetch+0x141d8>)
 80156d4:	461c      	mov	r4, r3
 80156d6:	4613      	mov	r3, r2
 80156d8:	cb07      	ldmia	r3!, {r0, r1, r2}
 80156da:	6020      	str	r0, [r4, #0]
 80156dc:	6061      	str	r1, [r4, #4]
 80156de:	60a2      	str	r2, [r4, #8]
 80156e0:	881b      	ldrh	r3, [r3, #0]
 80156e2:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,4,8,10,16,13,18");
 80156e4:	687b      	ldr	r3, [r7, #4]
 80156e6:	3304      	adds	r3, #4
 80156e8:	4a55      	ldr	r2, [pc, #340]	; (8015840 <problem_fetch+0x141dc>)
 80156ea:	461d      	mov	r5, r3
 80156ec:	4614      	mov	r4, r2
 80156ee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80156f0:	6028      	str	r0, [r5, #0]
 80156f2:	6069      	str	r1, [r5, #4]
 80156f4:	60aa      	str	r2, [r5, #8]
 80156f6:	60eb      	str	r3, [r5, #12]
 80156f8:	8823      	ldrh	r3, [r4, #0]
 80156fa:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,s,d,d,d,d,e");
 80156fc:	687b      	ldr	r3, [r7, #4]
 80156fe:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8015702:	4a50      	ldr	r2, [pc, #320]	; (8015844 <problem_fetch+0x141e0>)
 8015704:	461c      	mov	r4, r3
 8015706:	4613      	mov	r3, r2
 8015708:	cb07      	ldmia	r3!, {r0, r1, r2}
 801570a:	6020      	str	r0, [r4, #0]
 801570c:	6061      	str	r1, [r4, #4]
 801570e:	60a2      	str	r2, [r4, #8]
 8015710:	881b      	ldrh	r3, [r3, #0]
 8015712:	81a3      	strh	r3, [r4, #12]
			break;
 8015714:	f006 bed6 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 593 :
			strcpy(p->name,"BAMBINI");
 8015718:	687b      	ldr	r3, [r7, #4]
 801571a:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801571e:	494a      	ldr	r1, [pc, #296]	; (8015848 <problem_fetch+0x141e4>)
 8015720:	461a      	mov	r2, r3
 8015722:	460b      	mov	r3, r1
 8015724:	cb03      	ldmia	r3!, {r0, r1}
 8015726:	6010      	str	r0, [r2, #0]
 8015728:	6051      	str	r1, [r2, #4]
			strcpy(p->grade,"6B+");
 801572a:	687b      	ldr	r3, [r7, #4]
 801572c:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8015730:	4a46      	ldr	r2, [pc, #280]	; (801584c <problem_fetch+0x141e8>)
 8015732:	6810      	ldr	r0, [r2, #0]
 8015734:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 8015736:	687b      	ldr	r3, [r7, #4]
 8015738:	2206      	movs	r2, #6
 801573a:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,E,F,C,D,D");
 801573c:	687b      	ldr	r3, [r7, #4]
 801573e:	33a4      	adds	r3, #164	; 0xa4
 8015740:	4a43      	ldr	r2, [pc, #268]	; (8015850 <problem_fetch+0x141ec>)
 8015742:	461c      	mov	r4, r3
 8015744:	4613      	mov	r3, r2
 8015746:	cb07      	ldmia	r3!, {r0, r1, r2}
 8015748:	6020      	str	r0, [r4, #0]
 801574a:	6061      	str	r1, [r4, #4]
 801574c:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,8,11,13,15,18");
 801574e:	687b      	ldr	r3, [r7, #4]
 8015750:	3304      	adds	r3, #4
 8015752:	4a40      	ldr	r2, [pc, #256]	; (8015854 <problem_fetch+0x141f0>)
 8015754:	461c      	mov	r4, r3
 8015756:	4615      	mov	r5, r2
 8015758:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801575a:	6020      	str	r0, [r4, #0]
 801575c:	6061      	str	r1, [r4, #4]
 801575e:	60a2      	str	r2, [r4, #8]
 8015760:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 8015762:	687b      	ldr	r3, [r7, #4]
 8015764:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8015768:	4a29      	ldr	r2, [pc, #164]	; (8015810 <problem_fetch+0x141ac>)
 801576a:	461c      	mov	r4, r3
 801576c:	4613      	mov	r3, r2
 801576e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8015770:	6020      	str	r0, [r4, #0]
 8015772:	6061      	str	r1, [r4, #4]
 8015774:	60a2      	str	r2, [r4, #8]
			break;
 8015776:	f006 bea5 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 594 :
			strcpy(p->name,"TRAVEQUE II");
 801577a:	687b      	ldr	r3, [r7, #4]
 801577c:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8015780:	4a35      	ldr	r2, [pc, #212]	; (8015858 <problem_fetch+0x141f4>)
 8015782:	461c      	mov	r4, r3
 8015784:	4613      	mov	r3, r2
 8015786:	cb07      	ldmia	r3!, {r0, r1, r2}
 8015788:	6020      	str	r0, [r4, #0]
 801578a:	6061      	str	r1, [r4, #4]
 801578c:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade,"6C");
 801578e:	687b      	ldr	r3, [r7, #4]
 8015790:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8015794:	4a31      	ldr	r2, [pc, #196]	; (801585c <problem_fetch+0x141f8>)
 8015796:	8811      	ldrh	r1, [r2, #0]
 8015798:	7892      	ldrb	r2, [r2, #2]
 801579a:	8019      	strh	r1, [r3, #0]
 801579c:	709a      	strb	r2, [r3, #2]
			p->moveSize = 11;
 801579e:	687b      	ldr	r3, [r7, #4]
 80157a0:	220b      	movs	r2, #11
 80157a2:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"C,B,G,C,D,K,H,H,K,G,I");
 80157a4:	687b      	ldr	r3, [r7, #4]
 80157a6:	33a4      	adds	r3, #164	; 0xa4
 80157a8:	4a2d      	ldr	r2, [pc, #180]	; (8015860 <problem_fetch+0x141fc>)
 80157aa:	461d      	mov	r5, r3
 80157ac:	4614      	mov	r4, r2
 80157ae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80157b0:	6028      	str	r0, [r5, #0]
 80157b2:	6069      	str	r1, [r5, #4]
 80157b4:	60aa      	str	r2, [r5, #8]
 80157b6:	60eb      	str	r3, [r5, #12]
 80157b8:	6820      	ldr	r0, [r4, #0]
 80157ba:	6128      	str	r0, [r5, #16]
 80157bc:	88a3      	ldrh	r3, [r4, #4]
 80157be:	82ab      	strh	r3, [r5, #20]
			strcpy(p->moveNumbers,"5,6,4,8,7,9,8,12,14,15,18");
 80157c0:	687b      	ldr	r3, [r7, #4]
 80157c2:	3304      	adds	r3, #4
 80157c4:	4a27      	ldr	r2, [pc, #156]	; (8015864 <problem_fetch+0x14200>)
 80157c6:	461d      	mov	r5, r3
 80157c8:	4614      	mov	r4, r2
 80157ca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80157cc:	6028      	str	r0, [r5, #0]
 80157ce:	6069      	str	r1, [r5, #4]
 80157d0:	60aa      	str	r2, [r5, #8]
 80157d2:	60eb      	str	r3, [r5, #12]
 80157d4:	cc03      	ldmia	r4!, {r0, r1}
 80157d6:	6128      	str	r0, [r5, #16]
 80157d8:	6169      	str	r1, [r5, #20]
 80157da:	8823      	ldrh	r3, [r4, #0]
 80157dc:	832b      	strh	r3, [r5, #24]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,d,d,d,e");
 80157de:	687b      	ldr	r3, [r7, #4]
 80157e0:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 80157e4:	4a20      	ldr	r2, [pc, #128]	; (8015868 <problem_fetch+0x14204>)
 80157e6:	461d      	mov	r5, r3
 80157e8:	4614      	mov	r4, r2
 80157ea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80157ec:	6028      	str	r0, [r5, #0]
 80157ee:	6069      	str	r1, [r5, #4]
 80157f0:	60aa      	str	r2, [r5, #8]
 80157f2:	60eb      	str	r3, [r5, #12]
 80157f4:	6820      	ldr	r0, [r4, #0]
 80157f6:	6128      	str	r0, [r5, #16]
 80157f8:	88a3      	ldrh	r3, [r4, #4]
 80157fa:	82ab      	strh	r3, [r5, #20]
			break;
 80157fc:	f006 be62 	b.w	801c4c4 <problem_fetch+0x1ae60>
 8015800:	0802ab60 	.word	0x0802ab60
 8015804:	08023ae4 	.word	0x08023ae4
 8015808:	0802ab6c 	.word	0x0802ab6c
 801580c:	0802ab78 	.word	0x0802ab78
 8015810:	08023ec0 	.word	0x08023ec0
 8015814:	0802ab88 	.word	0x0802ab88
 8015818:	0802ab90 	.word	0x0802ab90
 801581c:	0802ab9c 	.word	0x0802ab9c
 8015820:	0802abac 	.word	0x0802abac
 8015824:	08024358 	.word	0x08024358
 8015828:	0802abc0 	.word	0x0802abc0
 801582c:	0802a134 	.word	0x0802a134
 8015830:	08023ff0 	.word	0x08023ff0
 8015834:	0802abcc 	.word	0x0802abcc
 8015838:	08023bbc 	.word	0x08023bbc
 801583c:	0802abdc 	.word	0x0802abdc
 8015840:	0802abec 	.word	0x0802abec
 8015844:	08023b9c 	.word	0x08023b9c
 8015848:	0802ac00 	.word	0x0802ac00
 801584c:	08023b24 	.word	0x08023b24
 8015850:	0802ac08 	.word	0x0802ac08
 8015854:	0802a234 	.word	0x0802a234
 8015858:	0802ac14 	.word	0x0802ac14
 801585c:	08023bf0 	.word	0x08023bf0
 8015860:	0802ac20 	.word	0x0802ac20
 8015864:	0802ac38 	.word	0x0802ac38
 8015868:	08027484 	.word	0x08027484
		case 595 :
			strcpy(p->name,"TRAVEQUE");
 801586c:	687b      	ldr	r3, [r7, #4]
 801586e:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8015872:	49ac      	ldr	r1, [pc, #688]	; (8015b24 <problem_fetch+0x144c0>)
 8015874:	461a      	mov	r2, r3
 8015876:	460b      	mov	r3, r1
 8015878:	cb03      	ldmia	r3!, {r0, r1}
 801587a:	6010      	str	r0, [r2, #0]
 801587c:	6051      	str	r1, [r2, #4]
 801587e:	781b      	ldrb	r3, [r3, #0]
 8015880:	7213      	strb	r3, [r2, #8]
			strcpy(p->grade,"6C");
 8015882:	687b      	ldr	r3, [r7, #4]
 8015884:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8015888:	4aa7      	ldr	r2, [pc, #668]	; (8015b28 <problem_fetch+0x144c4>)
 801588a:	8811      	ldrh	r1, [r2, #0]
 801588c:	7892      	ldrb	r2, [r2, #2]
 801588e:	8019      	strh	r1, [r3, #0]
 8015890:	709a      	strb	r2, [r3, #2]
			p->moveSize = 10;
 8015892:	687b      	ldr	r3, [r7, #4]
 8015894:	220a      	movs	r2, #10
 8015896:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"B,C,J,H,H,H,G,E,H,I");
 8015898:	687b      	ldr	r3, [r7, #4]
 801589a:	33a4      	adds	r3, #164	; 0xa4
 801589c:	4aa3      	ldr	r2, [pc, #652]	; (8015b2c <problem_fetch+0x144c8>)
 801589e:	461d      	mov	r5, r3
 80158a0:	4614      	mov	r4, r2
 80158a2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80158a4:	6028      	str	r0, [r5, #0]
 80158a6:	6069      	str	r1, [r5, #4]
 80158a8:	60aa      	str	r2, [r5, #8]
 80158aa:	60eb      	str	r3, [r5, #12]
 80158ac:	6820      	ldr	r0, [r4, #0]
 80158ae:	6128      	str	r0, [r5, #16]
			strcpy(p->moveNumbers,"6,5,7,16,12,8,4,6,5,18");
 80158b0:	687b      	ldr	r3, [r7, #4]
 80158b2:	3304      	adds	r3, #4
 80158b4:	4a9e      	ldr	r2, [pc, #632]	; (8015b30 <problem_fetch+0x144cc>)
 80158b6:	461c      	mov	r4, r3
 80158b8:	4615      	mov	r5, r2
 80158ba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80158bc:	6020      	str	r0, [r4, #0]
 80158be:	6061      	str	r1, [r4, #4]
 80158c0:	60a2      	str	r2, [r4, #8]
 80158c2:	60e3      	str	r3, [r4, #12]
 80158c4:	6828      	ldr	r0, [r5, #0]
 80158c6:	6120      	str	r0, [r4, #16]
 80158c8:	88ab      	ldrh	r3, [r5, #4]
 80158ca:	79aa      	ldrb	r2, [r5, #6]
 80158cc:	82a3      	strh	r3, [r4, #20]
 80158ce:	4613      	mov	r3, r2
 80158d0:	75a3      	strb	r3, [r4, #22]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,d,d,e");
 80158d2:	687b      	ldr	r3, [r7, #4]
 80158d4:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 80158d8:	4a96      	ldr	r2, [pc, #600]	; (8015b34 <problem_fetch+0x144d0>)
 80158da:	461d      	mov	r5, r3
 80158dc:	4614      	mov	r4, r2
 80158de:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80158e0:	6028      	str	r0, [r5, #0]
 80158e2:	6069      	str	r1, [r5, #4]
 80158e4:	60aa      	str	r2, [r5, #8]
 80158e6:	60eb      	str	r3, [r5, #12]
 80158e8:	6820      	ldr	r0, [r4, #0]
 80158ea:	6128      	str	r0, [r5, #16]
			break;
 80158ec:	f006 bdea 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 596 :
			strcpy(p->name,"YAYABLACK");
 80158f0:	687b      	ldr	r3, [r7, #4]
 80158f2:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80158f6:	4990      	ldr	r1, [pc, #576]	; (8015b38 <problem_fetch+0x144d4>)
 80158f8:	461a      	mov	r2, r3
 80158fa:	460b      	mov	r3, r1
 80158fc:	cb03      	ldmia	r3!, {r0, r1}
 80158fe:	6010      	str	r0, [r2, #0]
 8015900:	6051      	str	r1, [r2, #4]
 8015902:	881b      	ldrh	r3, [r3, #0]
 8015904:	8113      	strh	r3, [r2, #8]
			strcpy(p->grade,"6B+");
 8015906:	687b      	ldr	r3, [r7, #4]
 8015908:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801590c:	4a8b      	ldr	r2, [pc, #556]	; (8015b3c <problem_fetch+0x144d8>)
 801590e:	6810      	ldr	r0, [r2, #0]
 8015910:	6018      	str	r0, [r3, #0]
			p->moveSize = 8;
 8015912:	687b      	ldr	r3, [r7, #4]
 8015914:	2208      	movs	r2, #8
 8015916:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"H,J,J,E,H,C,D,D");
 8015918:	687b      	ldr	r3, [r7, #4]
 801591a:	33a4      	adds	r3, #164	; 0xa4
 801591c:	4a88      	ldr	r2, [pc, #544]	; (8015b40 <problem_fetch+0x144dc>)
 801591e:	461c      	mov	r4, r3
 8015920:	4615      	mov	r5, r2
 8015922:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8015924:	6020      	str	r0, [r4, #0]
 8015926:	6061      	str	r1, [r4, #4]
 8015928:	60a2      	str	r2, [r4, #8]
 801592a:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,5,7,8,10,13,15,18");
 801592c:	687b      	ldr	r3, [r7, #4]
 801592e:	3304      	adds	r3, #4
 8015930:	4a84      	ldr	r2, [pc, #528]	; (8015b44 <problem_fetch+0x144e0>)
 8015932:	461d      	mov	r5, r3
 8015934:	4614      	mov	r4, r2
 8015936:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8015938:	6028      	str	r0, [r5, #0]
 801593a:	6069      	str	r1, [r5, #4]
 801593c:	60aa      	str	r2, [r5, #8]
 801593e:	60eb      	str	r3, [r5, #12]
 8015940:	6820      	ldr	r0, [r4, #0]
 8015942:	6128      	str	r0, [r5, #16]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,e");
 8015944:	687b      	ldr	r3, [r7, #4]
 8015946:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 801594a:	4a7f      	ldr	r2, [pc, #508]	; (8015b48 <problem_fetch+0x144e4>)
 801594c:	461c      	mov	r4, r3
 801594e:	4615      	mov	r5, r2
 8015950:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8015952:	6020      	str	r0, [r4, #0]
 8015954:	6061      	str	r1, [r4, #4]
 8015956:	60a2      	str	r2, [r4, #8]
 8015958:	60e3      	str	r3, [r4, #12]
			break;
 801595a:	f006 bdb3 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 597 :
			strcpy(p->name,"SPORGASSE, GRAZ");
 801595e:	687b      	ldr	r3, [r7, #4]
 8015960:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8015964:	4a79      	ldr	r2, [pc, #484]	; (8015b4c <problem_fetch+0x144e8>)
 8015966:	461c      	mov	r4, r3
 8015968:	4615      	mov	r5, r2
 801596a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801596c:	6020      	str	r0, [r4, #0]
 801596e:	6061      	str	r1, [r4, #4]
 8015970:	60a2      	str	r2, [r4, #8]
 8015972:	60e3      	str	r3, [r4, #12]
			strcpy(p->grade,"7B");
 8015974:	687b      	ldr	r3, [r7, #4]
 8015976:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801597a:	4a75      	ldr	r2, [pc, #468]	; (8015b50 <problem_fetch+0x144ec>)
 801597c:	8811      	ldrh	r1, [r2, #0]
 801597e:	7892      	ldrb	r2, [r2, #2]
 8015980:	8019      	strh	r1, [r3, #0]
 8015982:	709a      	strb	r2, [r3, #2]
			p->moveSize = 5;
 8015984:	687b      	ldr	r3, [r7, #4]
 8015986:	2205      	movs	r2, #5
 8015988:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"E,H,F,E,D");
 801598a:	687b      	ldr	r3, [r7, #4]
 801598c:	33a4      	adds	r3, #164	; 0xa4
 801598e:	4971      	ldr	r1, [pc, #452]	; (8015b54 <problem_fetch+0x144f0>)
 8015990:	461a      	mov	r2, r3
 8015992:	460b      	mov	r3, r1
 8015994:	cb03      	ldmia	r3!, {r0, r1}
 8015996:	6010      	str	r0, [r2, #0]
 8015998:	6051      	str	r1, [r2, #4]
 801599a:	881b      	ldrh	r3, [r3, #0]
 801599c:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"6,5,11,16,18");
 801599e:	687b      	ldr	r3, [r7, #4]
 80159a0:	3304      	adds	r3, #4
 80159a2:	4a6d      	ldr	r2, [pc, #436]	; (8015b58 <problem_fetch+0x144f4>)
 80159a4:	461c      	mov	r4, r3
 80159a6:	4613      	mov	r3, r2
 80159a8:	cb07      	ldmia	r3!, {r0, r1, r2}
 80159aa:	6020      	str	r0, [r4, #0]
 80159ac:	6061      	str	r1, [r4, #4]
 80159ae:	60a2      	str	r2, [r4, #8]
 80159b0:	781b      	ldrb	r3, [r3, #0]
 80159b2:	7323      	strb	r3, [r4, #12]
			strcpy(p->startFinish,"s,s,d,d,e");
 80159b4:	687b      	ldr	r3, [r7, #4]
 80159b6:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 80159ba:	4968      	ldr	r1, [pc, #416]	; (8015b5c <problem_fetch+0x144f8>)
 80159bc:	461a      	mov	r2, r3
 80159be:	460b      	mov	r3, r1
 80159c0:	cb03      	ldmia	r3!, {r0, r1}
 80159c2:	6010      	str	r0, [r2, #0]
 80159c4:	6051      	str	r1, [r2, #4]
 80159c6:	881b      	ldrh	r3, [r3, #0]
 80159c8:	8113      	strh	r3, [r2, #8]
			break;
 80159ca:	f006 bd7b 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 598 :
			strcpy(p->name,"BACKSLASH");
 80159ce:	687b      	ldr	r3, [r7, #4]
 80159d0:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80159d4:	4962      	ldr	r1, [pc, #392]	; (8015b60 <problem_fetch+0x144fc>)
 80159d6:	461a      	mov	r2, r3
 80159d8:	460b      	mov	r3, r1
 80159da:	cb03      	ldmia	r3!, {r0, r1}
 80159dc:	6010      	str	r0, [r2, #0]
 80159de:	6051      	str	r1, [r2, #4]
 80159e0:	881b      	ldrh	r3, [r3, #0]
 80159e2:	8113      	strh	r3, [r2, #8]
			strcpy(p->grade,"7A");
 80159e4:	687b      	ldr	r3, [r7, #4]
 80159e6:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80159ea:	4a5e      	ldr	r2, [pc, #376]	; (8015b64 <problem_fetch+0x14500>)
 80159ec:	8811      	ldrh	r1, [r2, #0]
 80159ee:	7892      	ldrb	r2, [r2, #2]
 80159f0:	8019      	strh	r1, [r3, #0]
 80159f2:	709a      	strb	r2, [r3, #2]
			p->moveSize = 6;
 80159f4:	687b      	ldr	r3, [r7, #4]
 80159f6:	2206      	movs	r2, #6
 80159f8:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,H,G,J,I,I");
 80159fa:	687b      	ldr	r3, [r7, #4]
 80159fc:	33a4      	adds	r3, #164	; 0xa4
 80159fe:	4a5a      	ldr	r2, [pc, #360]	; (8015b68 <problem_fetch+0x14504>)
 8015a00:	461c      	mov	r4, r3
 8015a02:	4613      	mov	r3, r2
 8015a04:	cb07      	ldmia	r3!, {r0, r1, r2}
 8015a06:	6020      	str	r0, [r4, #0]
 8015a08:	6061      	str	r1, [r4, #4]
 8015a0a:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,8,9,12,14,18");
 8015a0c:	687b      	ldr	r3, [r7, #4]
 8015a0e:	3304      	adds	r3, #4
 8015a10:	4a56      	ldr	r2, [pc, #344]	; (8015b6c <problem_fetch+0x14508>)
 8015a12:	461c      	mov	r4, r3
 8015a14:	4613      	mov	r3, r2
 8015a16:	cb07      	ldmia	r3!, {r0, r1, r2}
 8015a18:	6020      	str	r0, [r4, #0]
 8015a1a:	6061      	str	r1, [r4, #4]
 8015a1c:	60a2      	str	r2, [r4, #8]
 8015a1e:	881a      	ldrh	r2, [r3, #0]
 8015a20:	789b      	ldrb	r3, [r3, #2]
 8015a22:	81a2      	strh	r2, [r4, #12]
 8015a24:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 8015a26:	687b      	ldr	r3, [r7, #4]
 8015a28:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8015a2c:	4a50      	ldr	r2, [pc, #320]	; (8015b70 <problem_fetch+0x1450c>)
 8015a2e:	461c      	mov	r4, r3
 8015a30:	4613      	mov	r3, r2
 8015a32:	cb07      	ldmia	r3!, {r0, r1, r2}
 8015a34:	6020      	str	r0, [r4, #0]
 8015a36:	6061      	str	r1, [r4, #4]
 8015a38:	60a2      	str	r2, [r4, #8]
			break;
 8015a3a:	f006 bd43 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 599 :
			strcpy(p->name,"SLASHSLASH");
 8015a3e:	687b      	ldr	r3, [r7, #4]
 8015a40:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8015a44:	494b      	ldr	r1, [pc, #300]	; (8015b74 <problem_fetch+0x14510>)
 8015a46:	461a      	mov	r2, r3
 8015a48:	460b      	mov	r3, r1
 8015a4a:	cb03      	ldmia	r3!, {r0, r1}
 8015a4c:	6010      	str	r0, [r2, #0]
 8015a4e:	6051      	str	r1, [r2, #4]
 8015a50:	8819      	ldrh	r1, [r3, #0]
 8015a52:	789b      	ldrb	r3, [r3, #2]
 8015a54:	8111      	strh	r1, [r2, #8]
 8015a56:	7293      	strb	r3, [r2, #10]
			strcpy(p->grade,"7B+");
 8015a58:	687b      	ldr	r3, [r7, #4]
 8015a5a:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8015a5e:	4a46      	ldr	r2, [pc, #280]	; (8015b78 <problem_fetch+0x14514>)
 8015a60:	6810      	ldr	r0, [r2, #0]
 8015a62:	6018      	str	r0, [r3, #0]
			p->moveSize = 5;
 8015a64:	687b      	ldr	r3, [r7, #4]
 8015a66:	2205      	movs	r2, #5
 8015a68:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"E,A,C,A,A");
 8015a6a:	687b      	ldr	r3, [r7, #4]
 8015a6c:	33a4      	adds	r3, #164	; 0xa4
 8015a6e:	4943      	ldr	r1, [pc, #268]	; (8015b7c <problem_fetch+0x14518>)
 8015a70:	461a      	mov	r2, r3
 8015a72:	460b      	mov	r3, r1
 8015a74:	cb03      	ldmia	r3!, {r0, r1}
 8015a76:	6010      	str	r0, [r2, #0]
 8015a78:	6051      	str	r1, [r2, #4]
 8015a7a:	881b      	ldrh	r3, [r3, #0]
 8015a7c:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"6,9,13,14,18");
 8015a7e:	687b      	ldr	r3, [r7, #4]
 8015a80:	3304      	adds	r3, #4
 8015a82:	4a3f      	ldr	r2, [pc, #252]	; (8015b80 <problem_fetch+0x1451c>)
 8015a84:	461c      	mov	r4, r3
 8015a86:	4613      	mov	r3, r2
 8015a88:	cb07      	ldmia	r3!, {r0, r1, r2}
 8015a8a:	6020      	str	r0, [r4, #0]
 8015a8c:	6061      	str	r1, [r4, #4]
 8015a8e:	60a2      	str	r2, [r4, #8]
 8015a90:	781b      	ldrb	r3, [r3, #0]
 8015a92:	7323      	strb	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,e");
 8015a94:	687b      	ldr	r3, [r7, #4]
 8015a96:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8015a9a:	493a      	ldr	r1, [pc, #232]	; (8015b84 <problem_fetch+0x14520>)
 8015a9c:	461a      	mov	r2, r3
 8015a9e:	460b      	mov	r3, r1
 8015aa0:	cb03      	ldmia	r3!, {r0, r1}
 8015aa2:	6010      	str	r0, [r2, #0]
 8015aa4:	6051      	str	r1, [r2, #4]
 8015aa6:	881b      	ldrh	r3, [r3, #0]
 8015aa8:	8113      	strh	r3, [r2, #8]
			break;
 8015aaa:	f006 bd0b 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 600 :
			strcpy(p->name,"WORLDSTAR");
 8015aae:	687b      	ldr	r3, [r7, #4]
 8015ab0:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8015ab4:	4934      	ldr	r1, [pc, #208]	; (8015b88 <problem_fetch+0x14524>)
 8015ab6:	461a      	mov	r2, r3
 8015ab8:	460b      	mov	r3, r1
 8015aba:	cb03      	ldmia	r3!, {r0, r1}
 8015abc:	6010      	str	r0, [r2, #0]
 8015abe:	6051      	str	r1, [r2, #4]
 8015ac0:	881b      	ldrh	r3, [r3, #0]
 8015ac2:	8113      	strh	r3, [r2, #8]
			strcpy(p->grade,"7A");
 8015ac4:	687b      	ldr	r3, [r7, #4]
 8015ac6:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8015aca:	4a26      	ldr	r2, [pc, #152]	; (8015b64 <problem_fetch+0x14500>)
 8015acc:	8811      	ldrh	r1, [r2, #0]
 8015ace:	7892      	ldrb	r2, [r2, #2]
 8015ad0:	8019      	strh	r1, [r3, #0]
 8015ad2:	709a      	strb	r2, [r3, #2]
			p->moveSize = 7;
 8015ad4:	687b      	ldr	r3, [r7, #4]
 8015ad6:	2207      	movs	r2, #7
 8015ad8:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,H,A,E,A,D,A");
 8015ada:	687b      	ldr	r3, [r7, #4]
 8015adc:	33a4      	adds	r3, #164	; 0xa4
 8015ade:	4a2b      	ldr	r2, [pc, #172]	; (8015b8c <problem_fetch+0x14528>)
 8015ae0:	461c      	mov	r4, r3
 8015ae2:	4613      	mov	r3, r2
 8015ae4:	cb07      	ldmia	r3!, {r0, r1, r2}
 8015ae6:	6020      	str	r0, [r4, #0]
 8015ae8:	6061      	str	r1, [r4, #4]
 8015aea:	60a2      	str	r2, [r4, #8]
 8015aec:	881b      	ldrh	r3, [r3, #0]
 8015aee:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,8,9,12,14,15,18");
 8015af0:	687b      	ldr	r3, [r7, #4]
 8015af2:	3304      	adds	r3, #4
 8015af4:	4a26      	ldr	r2, [pc, #152]	; (8015b90 <problem_fetch+0x1452c>)
 8015af6:	461d      	mov	r5, r3
 8015af8:	4614      	mov	r4, r2
 8015afa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8015afc:	6028      	str	r0, [r5, #0]
 8015afe:	6069      	str	r1, [r5, #4]
 8015b00:	60aa      	str	r2, [r5, #8]
 8015b02:	60eb      	str	r3, [r5, #12]
 8015b04:	8823      	ldrh	r3, [r4, #0]
 8015b06:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 8015b08:	687b      	ldr	r3, [r7, #4]
 8015b0a:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8015b0e:	4a21      	ldr	r2, [pc, #132]	; (8015b94 <problem_fetch+0x14530>)
 8015b10:	461c      	mov	r4, r3
 8015b12:	4613      	mov	r3, r2
 8015b14:	cb07      	ldmia	r3!, {r0, r1, r2}
 8015b16:	6020      	str	r0, [r4, #0]
 8015b18:	6061      	str	r1, [r4, #4]
 8015b1a:	60a2      	str	r2, [r4, #8]
 8015b1c:	881b      	ldrh	r3, [r3, #0]
 8015b1e:	81a3      	strh	r3, [r4, #12]
			break;
 8015b20:	f006 bcd0 	b.w	801c4c4 <problem_fetch+0x1ae60>
 8015b24:	0802ac54 	.word	0x0802ac54
 8015b28:	08023bf0 	.word	0x08023bf0
 8015b2c:	0802ac60 	.word	0x0802ac60
 8015b30:	0802ac74 	.word	0x0802ac74
 8015b34:	080243cc 	.word	0x080243cc
 8015b38:	0802ac8c 	.word	0x0802ac8c
 8015b3c:	08023b24 	.word	0x08023b24
 8015b40:	0802ac98 	.word	0x0802ac98
 8015b44:	0802aca8 	.word	0x0802aca8
 8015b48:	08023c48 	.word	0x08023c48
 8015b4c:	0802acbc 	.word	0x0802acbc
 8015b50:	0802421c 	.word	0x0802421c
 8015b54:	0802accc 	.word	0x0802accc
 8015b58:	0802acd8 	.word	0x0802acd8
 8015b5c:	08024204 	.word	0x08024204
 8015b60:	0802ace8 	.word	0x0802ace8
 8015b64:	08023ae4 	.word	0x08023ae4
 8015b68:	0802acf4 	.word	0x0802acf4
 8015b6c:	0802ad00 	.word	0x0802ad00
 8015b70:	08023ec0 	.word	0x08023ec0
 8015b74:	0802ad10 	.word	0x0802ad10
 8015b78:	08023c60 	.word	0x08023c60
 8015b7c:	0802ad1c 	.word	0x0802ad1c
 8015b80:	0802ad28 	.word	0x0802ad28
 8015b84:	08023ff0 	.word	0x08023ff0
 8015b88:	0802ad38 	.word	0x0802ad38
 8015b8c:	0802ad44 	.word	0x0802ad44
 8015b90:	0802ad54 	.word	0x0802ad54
 8015b94:	08023cac 	.word	0x08023cac
		case 601 :
			strcpy(p->name,"NINO LA RONCHIA");
 8015b98:	687b      	ldr	r3, [r7, #4]
 8015b9a:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8015b9e:	4aac      	ldr	r2, [pc, #688]	; (8015e50 <problem_fetch+0x147ec>)
 8015ba0:	461c      	mov	r4, r3
 8015ba2:	4615      	mov	r5, r2
 8015ba4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8015ba6:	6020      	str	r0, [r4, #0]
 8015ba8:	6061      	str	r1, [r4, #4]
 8015baa:	60a2      	str	r2, [r4, #8]
 8015bac:	60e3      	str	r3, [r4, #12]
			strcpy(p->grade,"7A");
 8015bae:	687b      	ldr	r3, [r7, #4]
 8015bb0:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8015bb4:	4aa7      	ldr	r2, [pc, #668]	; (8015e54 <problem_fetch+0x147f0>)
 8015bb6:	8811      	ldrh	r1, [r2, #0]
 8015bb8:	7892      	ldrb	r2, [r2, #2]
 8015bba:	8019      	strh	r1, [r3, #0]
 8015bbc:	709a      	strb	r2, [r3, #2]
			p->moveSize = 11;
 8015bbe:	687b      	ldr	r3, [r7, #4]
 8015bc0:	220b      	movs	r2, #11
 8015bc2:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"B,C,K,H,H,D,B,G,H,J,I");
 8015bc4:	687b      	ldr	r3, [r7, #4]
 8015bc6:	33a4      	adds	r3, #164	; 0xa4
 8015bc8:	4aa3      	ldr	r2, [pc, #652]	; (8015e58 <problem_fetch+0x147f4>)
 8015bca:	461d      	mov	r5, r3
 8015bcc:	4614      	mov	r4, r2
 8015bce:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8015bd0:	6028      	str	r0, [r5, #0]
 8015bd2:	6069      	str	r1, [r5, #4]
 8015bd4:	60aa      	str	r2, [r5, #8]
 8015bd6:	60eb      	str	r3, [r5, #12]
 8015bd8:	6820      	ldr	r0, [r4, #0]
 8015bda:	6128      	str	r0, [r5, #16]
 8015bdc:	88a3      	ldrh	r3, [r4, #4]
 8015bde:	82ab      	strh	r3, [r5, #20]
			strcpy(p->moveNumbers,"6,5,9,13,16,7,10,10,10,5,18");
 8015be0:	687b      	ldr	r3, [r7, #4]
 8015be2:	3304      	adds	r3, #4
 8015be4:	4a9d      	ldr	r2, [pc, #628]	; (8015e5c <problem_fetch+0x147f8>)
 8015be6:	461d      	mov	r5, r3
 8015be8:	4614      	mov	r4, r2
 8015bea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8015bec:	6028      	str	r0, [r5, #0]
 8015bee:	6069      	str	r1, [r5, #4]
 8015bf0:	60aa      	str	r2, [r5, #8]
 8015bf2:	60eb      	str	r3, [r5, #12]
 8015bf4:	cc07      	ldmia	r4!, {r0, r1, r2}
 8015bf6:	6128      	str	r0, [r5, #16]
 8015bf8:	6169      	str	r1, [r5, #20]
 8015bfa:	61aa      	str	r2, [r5, #24]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,d,d,d,e");
 8015bfc:	687b      	ldr	r3, [r7, #4]
 8015bfe:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8015c02:	4a97      	ldr	r2, [pc, #604]	; (8015e60 <problem_fetch+0x147fc>)
 8015c04:	461d      	mov	r5, r3
 8015c06:	4614      	mov	r4, r2
 8015c08:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8015c0a:	6028      	str	r0, [r5, #0]
 8015c0c:	6069      	str	r1, [r5, #4]
 8015c0e:	60aa      	str	r2, [r5, #8]
 8015c10:	60eb      	str	r3, [r5, #12]
 8015c12:	6820      	ldr	r0, [r4, #0]
 8015c14:	6128      	str	r0, [r5, #16]
 8015c16:	88a3      	ldrh	r3, [r4, #4]
 8015c18:	82ab      	strh	r3, [r5, #20]
			break;
 8015c1a:	f006 bc53 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 602 :
			strcpy(p->name,"BOBBI'S STRETCH");
 8015c1e:	687b      	ldr	r3, [r7, #4]
 8015c20:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8015c24:	4a8f      	ldr	r2, [pc, #572]	; (8015e64 <problem_fetch+0x14800>)
 8015c26:	461c      	mov	r4, r3
 8015c28:	4615      	mov	r5, r2
 8015c2a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8015c2c:	6020      	str	r0, [r4, #0]
 8015c2e:	6061      	str	r1, [r4, #4]
 8015c30:	60a2      	str	r2, [r4, #8]
 8015c32:	60e3      	str	r3, [r4, #12]
			strcpy(p->grade,"7A+");
 8015c34:	687b      	ldr	r3, [r7, #4]
 8015c36:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8015c3a:	4a8b      	ldr	r2, [pc, #556]	; (8015e68 <problem_fetch+0x14804>)
 8015c3c:	6810      	ldr	r0, [r2, #0]
 8015c3e:	6018      	str	r0, [r3, #0]
			p->moveSize = 5;
 8015c40:	687b      	ldr	r3, [r7, #4]
 8015c42:	2205      	movs	r2, #5
 8015c44:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"E,F,D,E,A");
 8015c46:	687b      	ldr	r3, [r7, #4]
 8015c48:	33a4      	adds	r3, #164	; 0xa4
 8015c4a:	4988      	ldr	r1, [pc, #544]	; (8015e6c <problem_fetch+0x14808>)
 8015c4c:	461a      	mov	r2, r3
 8015c4e:	460b      	mov	r3, r1
 8015c50:	cb03      	ldmia	r3!, {r0, r1}
 8015c52:	6010      	str	r0, [r2, #0]
 8015c54:	6051      	str	r1, [r2, #4]
 8015c56:	881b      	ldrh	r3, [r3, #0]
 8015c58:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"6,11,15,16,18");
 8015c5a:	687b      	ldr	r3, [r7, #4]
 8015c5c:	3304      	adds	r3, #4
 8015c5e:	4a84      	ldr	r2, [pc, #528]	; (8015e70 <problem_fetch+0x1480c>)
 8015c60:	461c      	mov	r4, r3
 8015c62:	4613      	mov	r3, r2
 8015c64:	cb07      	ldmia	r3!, {r0, r1, r2}
 8015c66:	6020      	str	r0, [r4, #0]
 8015c68:	6061      	str	r1, [r4, #4]
 8015c6a:	60a2      	str	r2, [r4, #8]
 8015c6c:	881b      	ldrh	r3, [r3, #0]
 8015c6e:	81a3      	strh	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,e");
 8015c70:	687b      	ldr	r3, [r7, #4]
 8015c72:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8015c76:	497f      	ldr	r1, [pc, #508]	; (8015e74 <problem_fetch+0x14810>)
 8015c78:	461a      	mov	r2, r3
 8015c7a:	460b      	mov	r3, r1
 8015c7c:	cb03      	ldmia	r3!, {r0, r1}
 8015c7e:	6010      	str	r0, [r2, #0]
 8015c80:	6051      	str	r1, [r2, #4]
 8015c82:	881b      	ldrh	r3, [r3, #0]
 8015c84:	8113      	strh	r3, [r2, #8]
			break;
 8015c86:	f006 bc1d 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 603 :
			strcpy(p->name,"A SPY WHO LOVED ME");
 8015c8a:	687b      	ldr	r3, [r7, #4]
 8015c8c:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8015c90:	4a79      	ldr	r2, [pc, #484]	; (8015e78 <problem_fetch+0x14814>)
 8015c92:	461d      	mov	r5, r3
 8015c94:	4614      	mov	r4, r2
 8015c96:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8015c98:	6028      	str	r0, [r5, #0]
 8015c9a:	6069      	str	r1, [r5, #4]
 8015c9c:	60aa      	str	r2, [r5, #8]
 8015c9e:	60eb      	str	r3, [r5, #12]
 8015ca0:	8823      	ldrh	r3, [r4, #0]
 8015ca2:	78a2      	ldrb	r2, [r4, #2]
 8015ca4:	822b      	strh	r3, [r5, #16]
 8015ca6:	4613      	mov	r3, r2
 8015ca8:	74ab      	strb	r3, [r5, #18]
			strcpy(p->grade,"7A+");
 8015caa:	687b      	ldr	r3, [r7, #4]
 8015cac:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8015cb0:	4a6d      	ldr	r2, [pc, #436]	; (8015e68 <problem_fetch+0x14804>)
 8015cb2:	6810      	ldr	r0, [r2, #0]
 8015cb4:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 8015cb6:	687b      	ldr	r3, [r7, #4]
 8015cb8:	2207      	movs	r2, #7
 8015cba:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"C,C,F,D,G,I,I");
 8015cbc:	687b      	ldr	r3, [r7, #4]
 8015cbe:	33a4      	adds	r3, #164	; 0xa4
 8015cc0:	4a6e      	ldr	r2, [pc, #440]	; (8015e7c <problem_fetch+0x14818>)
 8015cc2:	461c      	mov	r4, r3
 8015cc4:	4613      	mov	r3, r2
 8015cc6:	cb07      	ldmia	r3!, {r0, r1, r2}
 8015cc8:	6020      	str	r0, [r4, #0]
 8015cca:	6061      	str	r1, [r4, #4]
 8015ccc:	60a2      	str	r2, [r4, #8]
 8015cce:	881b      	ldrh	r3, [r3, #0]
 8015cd0:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,8,11,15,15,10,18");
 8015cd2:	687b      	ldr	r3, [r7, #4]
 8015cd4:	3304      	adds	r3, #4
 8015cd6:	4a6a      	ldr	r2, [pc, #424]	; (8015e80 <problem_fetch+0x1481c>)
 8015cd8:	461d      	mov	r5, r3
 8015cda:	4614      	mov	r4, r2
 8015cdc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8015cde:	6028      	str	r0, [r5, #0]
 8015ce0:	6069      	str	r1, [r5, #4]
 8015ce2:	60aa      	str	r2, [r5, #8]
 8015ce4:	60eb      	str	r3, [r5, #12]
 8015ce6:	8823      	ldrh	r3, [r4, #0]
 8015ce8:	78a2      	ldrb	r2, [r4, #2]
 8015cea:	822b      	strh	r3, [r5, #16]
 8015cec:	4613      	mov	r3, r2
 8015cee:	74ab      	strb	r3, [r5, #18]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 8015cf0:	687b      	ldr	r3, [r7, #4]
 8015cf2:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8015cf6:	4a63      	ldr	r2, [pc, #396]	; (8015e84 <problem_fetch+0x14820>)
 8015cf8:	461c      	mov	r4, r3
 8015cfa:	4613      	mov	r3, r2
 8015cfc:	cb07      	ldmia	r3!, {r0, r1, r2}
 8015cfe:	6020      	str	r0, [r4, #0]
 8015d00:	6061      	str	r1, [r4, #4]
 8015d02:	60a2      	str	r2, [r4, #8]
 8015d04:	881b      	ldrh	r3, [r3, #0]
 8015d06:	81a3      	strh	r3, [r4, #12]
			break;
 8015d08:	f006 bbdc 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 604 :
			strcpy(p->name,"ALLIE WARM UP");
 8015d0c:	687b      	ldr	r3, [r7, #4]
 8015d0e:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8015d12:	4a5d      	ldr	r2, [pc, #372]	; (8015e88 <problem_fetch+0x14824>)
 8015d14:	461c      	mov	r4, r3
 8015d16:	4613      	mov	r3, r2
 8015d18:	cb07      	ldmia	r3!, {r0, r1, r2}
 8015d1a:	6020      	str	r0, [r4, #0]
 8015d1c:	6061      	str	r1, [r4, #4]
 8015d1e:	60a2      	str	r2, [r4, #8]
 8015d20:	881b      	ldrh	r3, [r3, #0]
 8015d22:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade,"6B+");
 8015d24:	687b      	ldr	r3, [r7, #4]
 8015d26:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8015d2a:	4a58      	ldr	r2, [pc, #352]	; (8015e8c <problem_fetch+0x14828>)
 8015d2c:	6810      	ldr	r0, [r2, #0]
 8015d2e:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 8015d30:	687b      	ldr	r3, [r7, #4]
 8015d32:	2206      	movs	r2, #6
 8015d34:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"C,E,D,G,J,I");
 8015d36:	687b      	ldr	r3, [r7, #4]
 8015d38:	33a4      	adds	r3, #164	; 0xa4
 8015d3a:	4a55      	ldr	r2, [pc, #340]	; (8015e90 <problem_fetch+0x1482c>)
 8015d3c:	461c      	mov	r4, r3
 8015d3e:	4613      	mov	r3, r2
 8015d40:	cb07      	ldmia	r3!, {r0, r1, r2}
 8015d42:	6020      	str	r0, [r4, #0]
 8015d44:	6061      	str	r1, [r4, #4]
 8015d46:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,8,11,14,16,18");
 8015d48:	687b      	ldr	r3, [r7, #4]
 8015d4a:	3304      	adds	r3, #4
 8015d4c:	4a51      	ldr	r2, [pc, #324]	; (8015e94 <problem_fetch+0x14830>)
 8015d4e:	461c      	mov	r4, r3
 8015d50:	4615      	mov	r5, r2
 8015d52:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8015d54:	6020      	str	r0, [r4, #0]
 8015d56:	6061      	str	r1, [r4, #4]
 8015d58:	60a2      	str	r2, [r4, #8]
 8015d5a:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 8015d5c:	687b      	ldr	r3, [r7, #4]
 8015d5e:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8015d62:	4a4d      	ldr	r2, [pc, #308]	; (8015e98 <problem_fetch+0x14834>)
 8015d64:	461c      	mov	r4, r3
 8015d66:	4613      	mov	r3, r2
 8015d68:	cb07      	ldmia	r3!, {r0, r1, r2}
 8015d6a:	6020      	str	r0, [r4, #0]
 8015d6c:	6061      	str	r1, [r4, #4]
 8015d6e:	60a2      	str	r2, [r4, #8]
			break;
 8015d70:	f006 bba8 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 605 :
			strcpy(p->name,"NEW YEARS DELUSIONS");
 8015d74:	687b      	ldr	r3, [r7, #4]
 8015d76:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8015d7a:	4a48      	ldr	r2, [pc, #288]	; (8015e9c <problem_fetch+0x14838>)
 8015d7c:	461d      	mov	r5, r3
 8015d7e:	4614      	mov	r4, r2
 8015d80:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8015d82:	6028      	str	r0, [r5, #0]
 8015d84:	6069      	str	r1, [r5, #4]
 8015d86:	60aa      	str	r2, [r5, #8]
 8015d88:	60eb      	str	r3, [r5, #12]
 8015d8a:	6820      	ldr	r0, [r4, #0]
 8015d8c:	6128      	str	r0, [r5, #16]
			strcpy(p->grade,"7B+");
 8015d8e:	687b      	ldr	r3, [r7, #4]
 8015d90:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8015d94:	4a42      	ldr	r2, [pc, #264]	; (8015ea0 <problem_fetch+0x1483c>)
 8015d96:	6810      	ldr	r0, [r2, #0]
 8015d98:	6018      	str	r0, [r3, #0]
			p->moveSize = 8;
 8015d9a:	687b      	ldr	r3, [r7, #4]
 8015d9c:	2208      	movs	r2, #8
 8015d9e:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,J,F,G,A,H,D,A");
 8015da0:	687b      	ldr	r3, [r7, #4]
 8015da2:	33a4      	adds	r3, #164	; 0xa4
 8015da4:	4a3f      	ldr	r2, [pc, #252]	; (8015ea4 <problem_fetch+0x14840>)
 8015da6:	461c      	mov	r4, r3
 8015da8:	4615      	mov	r5, r2
 8015daa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8015dac:	6020      	str	r0, [r4, #0]
 8015dae:	6061      	str	r1, [r4, #4]
 8015db0:	60a2      	str	r2, [r4, #8]
 8015db2:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,7,11,15,14,8,15,18");
 8015db4:	687b      	ldr	r3, [r7, #4]
 8015db6:	3304      	adds	r3, #4
 8015db8:	4a3b      	ldr	r2, [pc, #236]	; (8015ea8 <problem_fetch+0x14844>)
 8015dba:	461d      	mov	r5, r3
 8015dbc:	4614      	mov	r4, r2
 8015dbe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8015dc0:	6028      	str	r0, [r5, #0]
 8015dc2:	6069      	str	r1, [r5, #4]
 8015dc4:	60aa      	str	r2, [r5, #8]
 8015dc6:	60eb      	str	r3, [r5, #12]
 8015dc8:	6820      	ldr	r0, [r4, #0]
 8015dca:	6128      	str	r0, [r5, #16]
 8015dcc:	7923      	ldrb	r3, [r4, #4]
 8015dce:	752b      	strb	r3, [r5, #20]
			strcpy(p->startFinish,"s,d,d,d,d,d,d,e");
 8015dd0:	687b      	ldr	r3, [r7, #4]
 8015dd2:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8015dd6:	4a35      	ldr	r2, [pc, #212]	; (8015eac <problem_fetch+0x14848>)
 8015dd8:	461c      	mov	r4, r3
 8015dda:	4615      	mov	r5, r2
 8015ddc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8015dde:	6020      	str	r0, [r4, #0]
 8015de0:	6061      	str	r1, [r4, #4]
 8015de2:	60a2      	str	r2, [r4, #8]
 8015de4:	60e3      	str	r3, [r4, #12]
			break;
 8015de6:	f006 bb6d 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 606 :
			strcpy(p->name,"EAZEEPEAZEE");
 8015dea:	687b      	ldr	r3, [r7, #4]
 8015dec:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8015df0:	4a2f      	ldr	r2, [pc, #188]	; (8015eb0 <problem_fetch+0x1484c>)
 8015df2:	461c      	mov	r4, r3
 8015df4:	4613      	mov	r3, r2
 8015df6:	cb07      	ldmia	r3!, {r0, r1, r2}
 8015df8:	6020      	str	r0, [r4, #0]
 8015dfa:	6061      	str	r1, [r4, #4]
 8015dfc:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade,"6B+");
 8015dfe:	687b      	ldr	r3, [r7, #4]
 8015e00:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8015e04:	4a21      	ldr	r2, [pc, #132]	; (8015e8c <problem_fetch+0x14828>)
 8015e06:	6810      	ldr	r0, [r2, #0]
 8015e08:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 8015e0a:	687b      	ldr	r3, [r7, #4]
 8015e0c:	2206      	movs	r2, #6
 8015e0e:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,J,I,J,H,I");
 8015e10:	687b      	ldr	r3, [r7, #4]
 8015e12:	33a4      	adds	r3, #164	; 0xa4
 8015e14:	4a27      	ldr	r2, [pc, #156]	; (8015eb4 <problem_fetch+0x14850>)
 8015e16:	461c      	mov	r4, r3
 8015e18:	4613      	mov	r3, r2
 8015e1a:	cb07      	ldmia	r3!, {r0, r1, r2}
 8015e1c:	6020      	str	r0, [r4, #0]
 8015e1e:	6061      	str	r1, [r4, #4]
 8015e20:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,7,10,13,16,18");
 8015e22:	687b      	ldr	r3, [r7, #4]
 8015e24:	3304      	adds	r3, #4
 8015e26:	4a24      	ldr	r2, [pc, #144]	; (8015eb8 <problem_fetch+0x14854>)
 8015e28:	461c      	mov	r4, r3
 8015e2a:	4615      	mov	r5, r2
 8015e2c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8015e2e:	6020      	str	r0, [r4, #0]
 8015e30:	6061      	str	r1, [r4, #4]
 8015e32:	60a2      	str	r2, [r4, #8]
 8015e34:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 8015e36:	687b      	ldr	r3, [r7, #4]
 8015e38:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8015e3c:	4a16      	ldr	r2, [pc, #88]	; (8015e98 <problem_fetch+0x14834>)
 8015e3e:	461c      	mov	r4, r3
 8015e40:	4613      	mov	r3, r2
 8015e42:	cb07      	ldmia	r3!, {r0, r1, r2}
 8015e44:	6020      	str	r0, [r4, #0]
 8015e46:	6061      	str	r1, [r4, #4]
 8015e48:	60a2      	str	r2, [r4, #8]
			break;
 8015e4a:	f006 bb3b 	b.w	801c4c4 <problem_fetch+0x1ae60>
 8015e4e:	bf00      	nop
 8015e50:	0802ad68 	.word	0x0802ad68
 8015e54:	08023ae4 	.word	0x08023ae4
 8015e58:	0802ad78 	.word	0x0802ad78
 8015e5c:	0802ad90 	.word	0x0802ad90
 8015e60:	08027484 	.word	0x08027484
 8015e64:	0802adac 	.word	0x0802adac
 8015e68:	08023cc4 	.word	0x08023cc4
 8015e6c:	0802adbc 	.word	0x0802adbc
 8015e70:	0802adc8 	.word	0x0802adc8
 8015e74:	08023ff0 	.word	0x08023ff0
 8015e78:	0802add8 	.word	0x0802add8
 8015e7c:	0802adec 	.word	0x0802adec
 8015e80:	0802adfc 	.word	0x0802adfc
 8015e84:	08023cac 	.word	0x08023cac
 8015e88:	0802ae10 	.word	0x0802ae10
 8015e8c:	08023b24 	.word	0x08023b24
 8015e90:	0802ae20 	.word	0x0802ae20
 8015e94:	0802ae2c 	.word	0x0802ae2c
 8015e98:	08023ec0 	.word	0x08023ec0
 8015e9c:	0802ae3c 	.word	0x0802ae3c
 8015ea0:	08023c60 	.word	0x08023c60
 8015ea4:	0802ae50 	.word	0x0802ae50
 8015ea8:	0802ae60 	.word	0x0802ae60
 8015eac:	08023d34 	.word	0x08023d34
 8015eb0:	0802ae78 	.word	0x0802ae78
 8015eb4:	0802ae84 	.word	0x0802ae84
 8015eb8:	0802ae90 	.word	0x0802ae90
		case 607 :
			strcpy(p->name,"THE YEAR OF THE ROOSTER");
 8015ebc:	687b      	ldr	r3, [r7, #4]
 8015ebe:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8015ec2:	4ac3      	ldr	r2, [pc, #780]	; (80161d0 <problem_fetch+0x14b6c>)
 8015ec4:	461d      	mov	r5, r3
 8015ec6:	4614      	mov	r4, r2
 8015ec8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8015eca:	6028      	str	r0, [r5, #0]
 8015ecc:	6069      	str	r1, [r5, #4]
 8015ece:	60aa      	str	r2, [r5, #8]
 8015ed0:	60eb      	str	r3, [r5, #12]
 8015ed2:	cc03      	ldmia	r4!, {r0, r1}
 8015ed4:	6128      	str	r0, [r5, #16]
 8015ed6:	6169      	str	r1, [r5, #20]
			strcpy(p->grade,"7B+");
 8015ed8:	687b      	ldr	r3, [r7, #4]
 8015eda:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8015ede:	4abd      	ldr	r2, [pc, #756]	; (80161d4 <problem_fetch+0x14b70>)
 8015ee0:	6810      	ldr	r0, [r2, #0]
 8015ee2:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 8015ee4:	687b      	ldr	r3, [r7, #4]
 8015ee6:	2207      	movs	r2, #7
 8015ee8:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"B,C,E,E,F,G,I");
 8015eea:	687b      	ldr	r3, [r7, #4]
 8015eec:	33a4      	adds	r3, #164	; 0xa4
 8015eee:	4aba      	ldr	r2, [pc, #744]	; (80161d8 <problem_fetch+0x14b74>)
 8015ef0:	461c      	mov	r4, r3
 8015ef2:	4613      	mov	r3, r2
 8015ef4:	cb07      	ldmia	r3!, {r0, r1, r2}
 8015ef6:	6020      	str	r0, [r4, #0]
 8015ef8:	6061      	str	r1, [r4, #4]
 8015efa:	60a2      	str	r2, [r4, #8]
 8015efc:	881b      	ldrh	r3, [r3, #0]
 8015efe:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"12,5,9,14,13,6,18");
 8015f00:	687b      	ldr	r3, [r7, #4]
 8015f02:	3304      	adds	r3, #4
 8015f04:	4ab5      	ldr	r2, [pc, #724]	; (80161dc <problem_fetch+0x14b78>)
 8015f06:	461d      	mov	r5, r3
 8015f08:	4614      	mov	r4, r2
 8015f0a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8015f0c:	6028      	str	r0, [r5, #0]
 8015f0e:	6069      	str	r1, [r5, #4]
 8015f10:	60aa      	str	r2, [r5, #8]
 8015f12:	60eb      	str	r3, [r5, #12]
 8015f14:	8823      	ldrh	r3, [r4, #0]
 8015f16:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"d,d,d,d,d,s,e");
 8015f18:	687b      	ldr	r3, [r7, #4]
 8015f1a:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8015f1e:	4ab0      	ldr	r2, [pc, #704]	; (80161e0 <problem_fetch+0x14b7c>)
 8015f20:	461c      	mov	r4, r3
 8015f22:	4613      	mov	r3, r2
 8015f24:	cb07      	ldmia	r3!, {r0, r1, r2}
 8015f26:	6020      	str	r0, [r4, #0]
 8015f28:	6061      	str	r1, [r4, #4]
 8015f2a:	60a2      	str	r2, [r4, #8]
 8015f2c:	881b      	ldrh	r3, [r3, #0]
 8015f2e:	81a3      	strh	r3, [r4, #12]
			break;
 8015f30:	f006 bac8 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 608 :
			strcpy(p->name,"PEACHY");
 8015f34:	687b      	ldr	r3, [r7, #4]
 8015f36:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8015f3a:	4aaa      	ldr	r2, [pc, #680]	; (80161e4 <problem_fetch+0x14b80>)
 8015f3c:	6810      	ldr	r0, [r2, #0]
 8015f3e:	6018      	str	r0, [r3, #0]
 8015f40:	8891      	ldrh	r1, [r2, #4]
 8015f42:	7992      	ldrb	r2, [r2, #6]
 8015f44:	8099      	strh	r1, [r3, #4]
 8015f46:	719a      	strb	r2, [r3, #6]
			strcpy(p->grade,"6C");
 8015f48:	687b      	ldr	r3, [r7, #4]
 8015f4a:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8015f4e:	4aa6      	ldr	r2, [pc, #664]	; (80161e8 <problem_fetch+0x14b84>)
 8015f50:	8811      	ldrh	r1, [r2, #0]
 8015f52:	7892      	ldrb	r2, [r2, #2]
 8015f54:	8019      	strh	r1, [r3, #0]
 8015f56:	709a      	strb	r2, [r3, #2]
			p->moveSize = 7;
 8015f58:	687b      	ldr	r3, [r7, #4]
 8015f5a:	2207      	movs	r2, #7
 8015f5c:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"H,H,C,F,C,D,A");
 8015f5e:	687b      	ldr	r3, [r7, #4]
 8015f60:	33a4      	adds	r3, #164	; 0xa4
 8015f62:	4aa2      	ldr	r2, [pc, #648]	; (80161ec <problem_fetch+0x14b88>)
 8015f64:	461c      	mov	r4, r3
 8015f66:	4613      	mov	r3, r2
 8015f68:	cb07      	ldmia	r3!, {r0, r1, r2}
 8015f6a:	6020      	str	r0, [r4, #0]
 8015f6c:	6061      	str	r1, [r4, #4]
 8015f6e:	60a2      	str	r2, [r4, #8]
 8015f70:	881b      	ldrh	r3, [r3, #0]
 8015f72:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,8,8,11,13,15,18");
 8015f74:	687b      	ldr	r3, [r7, #4]
 8015f76:	3304      	adds	r3, #4
 8015f78:	4a9d      	ldr	r2, [pc, #628]	; (80161f0 <problem_fetch+0x14b8c>)
 8015f7a:	461d      	mov	r5, r3
 8015f7c:	4614      	mov	r4, r2
 8015f7e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8015f80:	6028      	str	r0, [r5, #0]
 8015f82:	6069      	str	r1, [r5, #4]
 8015f84:	60aa      	str	r2, [r5, #8]
 8015f86:	60eb      	str	r3, [r5, #12]
 8015f88:	8823      	ldrh	r3, [r4, #0]
 8015f8a:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 8015f8c:	687b      	ldr	r3, [r7, #4]
 8015f8e:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8015f92:	4a98      	ldr	r2, [pc, #608]	; (80161f4 <problem_fetch+0x14b90>)
 8015f94:	461c      	mov	r4, r3
 8015f96:	4613      	mov	r3, r2
 8015f98:	cb07      	ldmia	r3!, {r0, r1, r2}
 8015f9a:	6020      	str	r0, [r4, #0]
 8015f9c:	6061      	str	r1, [r4, #4]
 8015f9e:	60a2      	str	r2, [r4, #8]
 8015fa0:	881b      	ldrh	r3, [r3, #0]
 8015fa2:	81a3      	strh	r3, [r4, #12]
			break;
 8015fa4:	f006 ba8e 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 609 :
			strcpy(p->name,"UFO@5");
 8015fa8:	687b      	ldr	r3, [r7, #4]
 8015faa:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8015fae:	4a92      	ldr	r2, [pc, #584]	; (80161f8 <problem_fetch+0x14b94>)
 8015fb0:	6810      	ldr	r0, [r2, #0]
 8015fb2:	6018      	str	r0, [r3, #0]
 8015fb4:	8892      	ldrh	r2, [r2, #4]
 8015fb6:	809a      	strh	r2, [r3, #4]
			strcpy(p->grade,"6B+");
 8015fb8:	687b      	ldr	r3, [r7, #4]
 8015fba:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8015fbe:	4a8f      	ldr	r2, [pc, #572]	; (80161fc <problem_fetch+0x14b98>)
 8015fc0:	6810      	ldr	r0, [r2, #0]
 8015fc2:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 8015fc4:	687b      	ldr	r3, [r7, #4]
 8015fc6:	2206      	movs	r2, #6
 8015fc8:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,K,I,I,E,D");
 8015fca:	687b      	ldr	r3, [r7, #4]
 8015fcc:	33a4      	adds	r3, #164	; 0xa4
 8015fce:	4a8c      	ldr	r2, [pc, #560]	; (8016200 <problem_fetch+0x14b9c>)
 8015fd0:	461c      	mov	r4, r3
 8015fd2:	4613      	mov	r3, r2
 8015fd4:	cb07      	ldmia	r3!, {r0, r1, r2}
 8015fd6:	6020      	str	r0, [r4, #0]
 8015fd8:	6061      	str	r1, [r4, #4]
 8015fda:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,9,10,14,16,18");
 8015fdc:	687b      	ldr	r3, [r7, #4]
 8015fde:	3304      	adds	r3, #4
 8015fe0:	4a88      	ldr	r2, [pc, #544]	; (8016204 <problem_fetch+0x14ba0>)
 8015fe2:	461c      	mov	r4, r3
 8015fe4:	4615      	mov	r5, r2
 8015fe6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8015fe8:	6020      	str	r0, [r4, #0]
 8015fea:	6061      	str	r1, [r4, #4]
 8015fec:	60a2      	str	r2, [r4, #8]
 8015fee:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 8015ff0:	687b      	ldr	r3, [r7, #4]
 8015ff2:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8015ff6:	4a84      	ldr	r2, [pc, #528]	; (8016208 <problem_fetch+0x14ba4>)
 8015ff8:	461c      	mov	r4, r3
 8015ffa:	4613      	mov	r3, r2
 8015ffc:	cb07      	ldmia	r3!, {r0, r1, r2}
 8015ffe:	6020      	str	r0, [r4, #0]
 8016000:	6061      	str	r1, [r4, #4]
 8016002:	60a2      	str	r2, [r4, #8]
			break;
 8016004:	f006 ba5e 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 610 :
			strcpy(p->name,"HUNTED BY GUSTAV");
 8016008:	687b      	ldr	r3, [r7, #4]
 801600a:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801600e:	4a7f      	ldr	r2, [pc, #508]	; (801620c <problem_fetch+0x14ba8>)
 8016010:	461d      	mov	r5, r3
 8016012:	4614      	mov	r4, r2
 8016014:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8016016:	6028      	str	r0, [r5, #0]
 8016018:	6069      	str	r1, [r5, #4]
 801601a:	60aa      	str	r2, [r5, #8]
 801601c:	60eb      	str	r3, [r5, #12]
 801601e:	7823      	ldrb	r3, [r4, #0]
 8016020:	742b      	strb	r3, [r5, #16]
			strcpy(p->grade,"6C+");
 8016022:	687b      	ldr	r3, [r7, #4]
 8016024:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8016028:	4a79      	ldr	r2, [pc, #484]	; (8016210 <problem_fetch+0x14bac>)
 801602a:	6810      	ldr	r0, [r2, #0]
 801602c:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 801602e:	687b      	ldr	r3, [r7, #4]
 8016030:	2207      	movs	r2, #7
 8016032:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,H,C,F,A,D,A");
 8016034:	687b      	ldr	r3, [r7, #4]
 8016036:	33a4      	adds	r3, #164	; 0xa4
 8016038:	4a76      	ldr	r2, [pc, #472]	; (8016214 <problem_fetch+0x14bb0>)
 801603a:	461c      	mov	r4, r3
 801603c:	4613      	mov	r3, r2
 801603e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8016040:	6020      	str	r0, [r4, #0]
 8016042:	6061      	str	r1, [r4, #4]
 8016044:	60a2      	str	r2, [r4, #8]
 8016046:	881b      	ldrh	r3, [r3, #0]
 8016048:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,8,8,11,14,15,18");
 801604a:	687b      	ldr	r3, [r7, #4]
 801604c:	3304      	adds	r3, #4
 801604e:	4a72      	ldr	r2, [pc, #456]	; (8016218 <problem_fetch+0x14bb4>)
 8016050:	461d      	mov	r5, r3
 8016052:	4614      	mov	r4, r2
 8016054:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8016056:	6028      	str	r0, [r5, #0]
 8016058:	6069      	str	r1, [r5, #4]
 801605a:	60aa      	str	r2, [r5, #8]
 801605c:	60eb      	str	r3, [r5, #12]
 801605e:	8823      	ldrh	r3, [r4, #0]
 8016060:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 8016062:	687b      	ldr	r3, [r7, #4]
 8016064:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8016068:	4a62      	ldr	r2, [pc, #392]	; (80161f4 <problem_fetch+0x14b90>)
 801606a:	461c      	mov	r4, r3
 801606c:	4613      	mov	r3, r2
 801606e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8016070:	6020      	str	r0, [r4, #0]
 8016072:	6061      	str	r1, [r4, #4]
 8016074:	60a2      	str	r2, [r4, #8]
 8016076:	881b      	ldrh	r3, [r3, #0]
 8016078:	81a3      	strh	r3, [r4, #12]
			break;
 801607a:	f006 ba23 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 611 :
			strcpy(p->name,"BOTTLE SERVICE");
 801607e:	687b      	ldr	r3, [r7, #4]
 8016080:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8016084:	4a65      	ldr	r2, [pc, #404]	; (801621c <problem_fetch+0x14bb8>)
 8016086:	461c      	mov	r4, r3
 8016088:	4613      	mov	r3, r2
 801608a:	cb07      	ldmia	r3!, {r0, r1, r2}
 801608c:	6020      	str	r0, [r4, #0]
 801608e:	6061      	str	r1, [r4, #4]
 8016090:	60a2      	str	r2, [r4, #8]
 8016092:	881a      	ldrh	r2, [r3, #0]
 8016094:	789b      	ldrb	r3, [r3, #2]
 8016096:	81a2      	strh	r2, [r4, #12]
 8016098:	73a3      	strb	r3, [r4, #14]
			strcpy(p->grade,"7A");
 801609a:	687b      	ldr	r3, [r7, #4]
 801609c:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80160a0:	4a5f      	ldr	r2, [pc, #380]	; (8016220 <problem_fetch+0x14bbc>)
 80160a2:	8811      	ldrh	r1, [r2, #0]
 80160a4:	7892      	ldrb	r2, [r2, #2]
 80160a6:	8019      	strh	r1, [r3, #0]
 80160a8:	709a      	strb	r2, [r3, #2]
			p->moveSize = 6;
 80160aa:	687b      	ldr	r3, [r7, #4]
 80160ac:	2206      	movs	r2, #6
 80160ae:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,J,I,K,G,I");
 80160b0:	687b      	ldr	r3, [r7, #4]
 80160b2:	33a4      	adds	r3, #164	; 0xa4
 80160b4:	4a5b      	ldr	r2, [pc, #364]	; (8016224 <problem_fetch+0x14bc0>)
 80160b6:	461c      	mov	r4, r3
 80160b8:	4613      	mov	r3, r2
 80160ba:	cb07      	ldmia	r3!, {r0, r1, r2}
 80160bc:	6020      	str	r0, [r4, #0]
 80160be:	6061      	str	r1, [r4, #4]
 80160c0:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,5,10,14,15,18");
 80160c2:	687b      	ldr	r3, [r7, #4]
 80160c4:	3304      	adds	r3, #4
 80160c6:	4a58      	ldr	r2, [pc, #352]	; (8016228 <problem_fetch+0x14bc4>)
 80160c8:	461c      	mov	r4, r3
 80160ca:	4615      	mov	r5, r2
 80160cc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80160ce:	6020      	str	r0, [r4, #0]
 80160d0:	6061      	str	r1, [r4, #4]
 80160d2:	60a2      	str	r2, [r4, #8]
 80160d4:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,s,d,d,d,e");
 80160d6:	687b      	ldr	r3, [r7, #4]
 80160d8:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 80160dc:	4a53      	ldr	r2, [pc, #332]	; (801622c <problem_fetch+0x14bc8>)
 80160de:	461c      	mov	r4, r3
 80160e0:	4613      	mov	r3, r2
 80160e2:	cb07      	ldmia	r3!, {r0, r1, r2}
 80160e4:	6020      	str	r0, [r4, #0]
 80160e6:	6061      	str	r1, [r4, #4]
 80160e8:	60a2      	str	r2, [r4, #8]
			break;
 80160ea:	f006 b9eb 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 612 :
			strcpy(p->name,"FOX AND JAX");
 80160ee:	687b      	ldr	r3, [r7, #4]
 80160f0:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80160f4:	4a4e      	ldr	r2, [pc, #312]	; (8016230 <problem_fetch+0x14bcc>)
 80160f6:	461c      	mov	r4, r3
 80160f8:	4613      	mov	r3, r2
 80160fa:	cb07      	ldmia	r3!, {r0, r1, r2}
 80160fc:	6020      	str	r0, [r4, #0]
 80160fe:	6061      	str	r1, [r4, #4]
 8016100:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade,"6C");
 8016102:	687b      	ldr	r3, [r7, #4]
 8016104:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8016108:	4a37      	ldr	r2, [pc, #220]	; (80161e8 <problem_fetch+0x14b84>)
 801610a:	8811      	ldrh	r1, [r2, #0]
 801610c:	7892      	ldrb	r2, [r2, #2]
 801610e:	8019      	strh	r1, [r3, #0]
 8016110:	709a      	strb	r2, [r3, #2]
			p->moveSize = 5;
 8016112:	687b      	ldr	r3, [r7, #4]
 8016114:	2205      	movs	r2, #5
 8016116:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,H,F,I,I");
 8016118:	687b      	ldr	r3, [r7, #4]
 801611a:	33a4      	adds	r3, #164	; 0xa4
 801611c:	4945      	ldr	r1, [pc, #276]	; (8016234 <problem_fetch+0x14bd0>)
 801611e:	461a      	mov	r2, r3
 8016120:	460b      	mov	r3, r1
 8016122:	cb03      	ldmia	r3!, {r0, r1}
 8016124:	6010      	str	r0, [r2, #0]
 8016126:	6051      	str	r1, [r2, #4]
 8016128:	881b      	ldrh	r3, [r3, #0]
 801612a:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"4,8,11,14,18");
 801612c:	687b      	ldr	r3, [r7, #4]
 801612e:	3304      	adds	r3, #4
 8016130:	4a41      	ldr	r2, [pc, #260]	; (8016238 <problem_fetch+0x14bd4>)
 8016132:	461c      	mov	r4, r3
 8016134:	4613      	mov	r3, r2
 8016136:	cb07      	ldmia	r3!, {r0, r1, r2}
 8016138:	6020      	str	r0, [r4, #0]
 801613a:	6061      	str	r1, [r4, #4]
 801613c:	60a2      	str	r2, [r4, #8]
 801613e:	781b      	ldrb	r3, [r3, #0]
 8016140:	7323      	strb	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,e");
 8016142:	687b      	ldr	r3, [r7, #4]
 8016144:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8016148:	493c      	ldr	r1, [pc, #240]	; (801623c <problem_fetch+0x14bd8>)
 801614a:	461a      	mov	r2, r3
 801614c:	460b      	mov	r3, r1
 801614e:	cb03      	ldmia	r3!, {r0, r1}
 8016150:	6010      	str	r0, [r2, #0]
 8016152:	6051      	str	r1, [r2, #4]
 8016154:	881b      	ldrh	r3, [r3, #0]
 8016156:	8113      	strh	r3, [r2, #8]
			break;
 8016158:	f006 b9b4 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 613 :
			strcpy(p->name,"GOT A LICENSE TO KILL");
 801615c:	687b      	ldr	r3, [r7, #4]
 801615e:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8016162:	4a37      	ldr	r2, [pc, #220]	; (8016240 <problem_fetch+0x14bdc>)
 8016164:	461d      	mov	r5, r3
 8016166:	4614      	mov	r4, r2
 8016168:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801616a:	6028      	str	r0, [r5, #0]
 801616c:	6069      	str	r1, [r5, #4]
 801616e:	60aa      	str	r2, [r5, #8]
 8016170:	60eb      	str	r3, [r5, #12]
 8016172:	6820      	ldr	r0, [r4, #0]
 8016174:	6128      	str	r0, [r5, #16]
 8016176:	88a3      	ldrh	r3, [r4, #4]
 8016178:	82ab      	strh	r3, [r5, #20]
			strcpy(p->grade,"7C");
 801617a:	687b      	ldr	r3, [r7, #4]
 801617c:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8016180:	4a30      	ldr	r2, [pc, #192]	; (8016244 <problem_fetch+0x14be0>)
 8016182:	8811      	ldrh	r1, [r2, #0]
 8016184:	7892      	ldrb	r2, [r2, #2]
 8016186:	8019      	strh	r1, [r3, #0]
 8016188:	709a      	strb	r2, [r3, #2]
			p->moveSize = 6;
 801618a:	687b      	ldr	r3, [r7, #4]
 801618c:	2206      	movs	r2, #6
 801618e:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,I,G,B,F,A");
 8016190:	687b      	ldr	r3, [r7, #4]
 8016192:	33a4      	adds	r3, #164	; 0xa4
 8016194:	4a2c      	ldr	r2, [pc, #176]	; (8016248 <problem_fetch+0x14be4>)
 8016196:	461c      	mov	r4, r3
 8016198:	4613      	mov	r3, r2
 801619a:	cb07      	ldmia	r3!, {r0, r1, r2}
 801619c:	6020      	str	r0, [r4, #0]
 801619e:	6061      	str	r1, [r4, #4]
 80161a0:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,9,14,15,11,18");
 80161a2:	687b      	ldr	r3, [r7, #4]
 80161a4:	3304      	adds	r3, #4
 80161a6:	4a29      	ldr	r2, [pc, #164]	; (801624c <problem_fetch+0x14be8>)
 80161a8:	461c      	mov	r4, r3
 80161aa:	4615      	mov	r5, r2
 80161ac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80161ae:	6020      	str	r0, [r4, #0]
 80161b0:	6061      	str	r1, [r4, #4]
 80161b2:	60a2      	str	r2, [r4, #8]
 80161b4:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 80161b6:	687b      	ldr	r3, [r7, #4]
 80161b8:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 80161bc:	4a12      	ldr	r2, [pc, #72]	; (8016208 <problem_fetch+0x14ba4>)
 80161be:	461c      	mov	r4, r3
 80161c0:	4613      	mov	r3, r2
 80161c2:	cb07      	ldmia	r3!, {r0, r1, r2}
 80161c4:	6020      	str	r0, [r4, #0]
 80161c6:	6061      	str	r1, [r4, #4]
 80161c8:	60a2      	str	r2, [r4, #8]
			break;
 80161ca:	f006 b97b 	b.w	801c4c4 <problem_fetch+0x1ae60>
 80161ce:	bf00      	nop
 80161d0:	0802aea0 	.word	0x0802aea0
 80161d4:	08023c60 	.word	0x08023c60
 80161d8:	0802aeb8 	.word	0x0802aeb8
 80161dc:	0802aec8 	.word	0x0802aec8
 80161e0:	0802aedc 	.word	0x0802aedc
 80161e4:	0802aeec 	.word	0x0802aeec
 80161e8:	08023bf0 	.word	0x08023bf0
 80161ec:	0802a584 	.word	0x0802a584
 80161f0:	0802880c 	.word	0x0802880c
 80161f4:	08023cac 	.word	0x08023cac
 80161f8:	0802aef4 	.word	0x0802aef4
 80161fc:	08023b24 	.word	0x08023b24
 8016200:	0802aefc 	.word	0x0802aefc
 8016204:	0802af08 	.word	0x0802af08
 8016208:	08023ec0 	.word	0x08023ec0
 801620c:	0802af18 	.word	0x0802af18
 8016210:	08023bbc 	.word	0x08023bbc
 8016214:	0802af2c 	.word	0x0802af2c
 8016218:	0802af3c 	.word	0x0802af3c
 801621c:	0802af50 	.word	0x0802af50
 8016220:	08023ae4 	.word	0x08023ae4
 8016224:	0802af60 	.word	0x0802af60
 8016228:	0802af6c 	.word	0x0802af6c
 801622c:	08023b04 	.word	0x08023b04
 8016230:	0802af7c 	.word	0x0802af7c
 8016234:	0802af88 	.word	0x0802af88
 8016238:	08025258 	.word	0x08025258
 801623c:	08023ff0 	.word	0x08023ff0
 8016240:	0802af94 	.word	0x0802af94
 8016244:	08024358 	.word	0x08024358
 8016248:	0802afac 	.word	0x0802afac
 801624c:	0802afb8 	.word	0x0802afb8
		case 614 :
			strcpy(p->name,"JET-BLACK HAIR");
 8016250:	687b      	ldr	r3, [r7, #4]
 8016252:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8016256:	4ac1      	ldr	r2, [pc, #772]	; (801655c <problem_fetch+0x14ef8>)
 8016258:	461c      	mov	r4, r3
 801625a:	4613      	mov	r3, r2
 801625c:	cb07      	ldmia	r3!, {r0, r1, r2}
 801625e:	6020      	str	r0, [r4, #0]
 8016260:	6061      	str	r1, [r4, #4]
 8016262:	60a2      	str	r2, [r4, #8]
 8016264:	881a      	ldrh	r2, [r3, #0]
 8016266:	789b      	ldrb	r3, [r3, #2]
 8016268:	81a2      	strh	r2, [r4, #12]
 801626a:	73a3      	strb	r3, [r4, #14]
			strcpy(p->grade,"7B+");
 801626c:	687b      	ldr	r3, [r7, #4]
 801626e:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8016272:	4abb      	ldr	r2, [pc, #748]	; (8016560 <problem_fetch+0x14efc>)
 8016274:	6810      	ldr	r0, [r2, #0]
 8016276:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 8016278:	687b      	ldr	r3, [r7, #4]
 801627a:	2206      	movs	r2, #6
 801627c:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,I,H,G,D,A");
 801627e:	687b      	ldr	r3, [r7, #4]
 8016280:	33a4      	adds	r3, #164	; 0xa4
 8016282:	4ab8      	ldr	r2, [pc, #736]	; (8016564 <problem_fetch+0x14f00>)
 8016284:	461c      	mov	r4, r3
 8016286:	4613      	mov	r3, r2
 8016288:	cb07      	ldmia	r3!, {r0, r1, r2}
 801628a:	6020      	str	r0, [r4, #0]
 801628c:	6061      	str	r1, [r4, #4]
 801628e:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,9,12,14,15,18");
 8016290:	687b      	ldr	r3, [r7, #4]
 8016292:	3304      	adds	r3, #4
 8016294:	4ab4      	ldr	r2, [pc, #720]	; (8016568 <problem_fetch+0x14f04>)
 8016296:	461c      	mov	r4, r3
 8016298:	4615      	mov	r5, r2
 801629a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801629c:	6020      	str	r0, [r4, #0]
 801629e:	6061      	str	r1, [r4, #4]
 80162a0:	60a2      	str	r2, [r4, #8]
 80162a2:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 80162a4:	687b      	ldr	r3, [r7, #4]
 80162a6:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 80162aa:	4ab0      	ldr	r2, [pc, #704]	; (801656c <problem_fetch+0x14f08>)
 80162ac:	461c      	mov	r4, r3
 80162ae:	4613      	mov	r3, r2
 80162b0:	cb07      	ldmia	r3!, {r0, r1, r2}
 80162b2:	6020      	str	r0, [r4, #0]
 80162b4:	6061      	str	r1, [r4, #4]
 80162b6:	60a2      	str	r2, [r4, #8]
			break;
 80162b8:	f006 b904 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 615 :
			strcpy(p->name,"BLACK CRAPPIE");
 80162bc:	687b      	ldr	r3, [r7, #4]
 80162be:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80162c2:	4aab      	ldr	r2, [pc, #684]	; (8016570 <problem_fetch+0x14f0c>)
 80162c4:	461c      	mov	r4, r3
 80162c6:	4613      	mov	r3, r2
 80162c8:	cb07      	ldmia	r3!, {r0, r1, r2}
 80162ca:	6020      	str	r0, [r4, #0]
 80162cc:	6061      	str	r1, [r4, #4]
 80162ce:	60a2      	str	r2, [r4, #8]
 80162d0:	881b      	ldrh	r3, [r3, #0]
 80162d2:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade,"6C+");
 80162d4:	687b      	ldr	r3, [r7, #4]
 80162d6:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80162da:	4aa6      	ldr	r2, [pc, #664]	; (8016574 <problem_fetch+0x14f10>)
 80162dc:	6810      	ldr	r0, [r2, #0]
 80162de:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 80162e0:	687b      	ldr	r3, [r7, #4]
 80162e2:	2206      	movs	r2, #6
 80162e4:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,G,A,E,A,D");
 80162e6:	687b      	ldr	r3, [r7, #4]
 80162e8:	33a4      	adds	r3, #164	; 0xa4
 80162ea:	4aa3      	ldr	r2, [pc, #652]	; (8016578 <problem_fetch+0x14f14>)
 80162ec:	461c      	mov	r4, r3
 80162ee:	4613      	mov	r3, r2
 80162f0:	cb07      	ldmia	r3!, {r0, r1, r2}
 80162f2:	6020      	str	r0, [r4, #0]
 80162f4:	6061      	str	r1, [r4, #4]
 80162f6:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,9,9,12,14,18");
 80162f8:	687b      	ldr	r3, [r7, #4]
 80162fa:	3304      	adds	r3, #4
 80162fc:	4a9f      	ldr	r2, [pc, #636]	; (801657c <problem_fetch+0x14f18>)
 80162fe:	461c      	mov	r4, r3
 8016300:	4613      	mov	r3, r2
 8016302:	cb07      	ldmia	r3!, {r0, r1, r2}
 8016304:	6020      	str	r0, [r4, #0]
 8016306:	6061      	str	r1, [r4, #4]
 8016308:	60a2      	str	r2, [r4, #8]
 801630a:	881a      	ldrh	r2, [r3, #0]
 801630c:	789b      	ldrb	r3, [r3, #2]
 801630e:	81a2      	strh	r2, [r4, #12]
 8016310:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 8016312:	687b      	ldr	r3, [r7, #4]
 8016314:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8016318:	4a94      	ldr	r2, [pc, #592]	; (801656c <problem_fetch+0x14f08>)
 801631a:	461c      	mov	r4, r3
 801631c:	4613      	mov	r3, r2
 801631e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8016320:	6020      	str	r0, [r4, #0]
 8016322:	6061      	str	r1, [r4, #4]
 8016324:	60a2      	str	r2, [r4, #8]
			break;
 8016326:	f006 b8cd 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 616 :
			strcpy(p->name,"BLACK KISS BLACK");
 801632a:	687b      	ldr	r3, [r7, #4]
 801632c:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8016330:	4a93      	ldr	r2, [pc, #588]	; (8016580 <problem_fetch+0x14f1c>)
 8016332:	461d      	mov	r5, r3
 8016334:	4614      	mov	r4, r2
 8016336:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8016338:	6028      	str	r0, [r5, #0]
 801633a:	6069      	str	r1, [r5, #4]
 801633c:	60aa      	str	r2, [r5, #8]
 801633e:	60eb      	str	r3, [r5, #12]
 8016340:	7823      	ldrb	r3, [r4, #0]
 8016342:	742b      	strb	r3, [r5, #16]
			strcpy(p->grade,"6C");
 8016344:	687b      	ldr	r3, [r7, #4]
 8016346:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801634a:	4a8e      	ldr	r2, [pc, #568]	; (8016584 <problem_fetch+0x14f20>)
 801634c:	8811      	ldrh	r1, [r2, #0]
 801634e:	7892      	ldrb	r2, [r2, #2]
 8016350:	8019      	strh	r1, [r3, #0]
 8016352:	709a      	strb	r2, [r3, #2]
			p->moveSize = 8;
 8016354:	687b      	ldr	r3, [r7, #4]
 8016356:	2208      	movs	r2, #8
 8016358:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,H,C,H,C,G,E,I");
 801635a:	687b      	ldr	r3, [r7, #4]
 801635c:	33a4      	adds	r3, #164	; 0xa4
 801635e:	4a8a      	ldr	r2, [pc, #552]	; (8016588 <problem_fetch+0x14f24>)
 8016360:	461c      	mov	r4, r3
 8016362:	4615      	mov	r5, r2
 8016364:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8016366:	6020      	str	r0, [r4, #0]
 8016368:	6061      	str	r1, [r4, #4]
 801636a:	60a2      	str	r2, [r4, #8]
 801636c:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,8,8,10,13,14,16,18");
 801636e:	687b      	ldr	r3, [r7, #4]
 8016370:	3304      	adds	r3, #4
 8016372:	4a86      	ldr	r2, [pc, #536]	; (801658c <problem_fetch+0x14f28>)
 8016374:	461d      	mov	r5, r3
 8016376:	4614      	mov	r4, r2
 8016378:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801637a:	6028      	str	r0, [r5, #0]
 801637c:	6069      	str	r1, [r5, #4]
 801637e:	60aa      	str	r2, [r5, #8]
 8016380:	60eb      	str	r3, [r5, #12]
 8016382:	6820      	ldr	r0, [r4, #0]
 8016384:	6128      	str	r0, [r5, #16]
 8016386:	7923      	ldrb	r3, [r4, #4]
 8016388:	752b      	strb	r3, [r5, #20]
			strcpy(p->startFinish,"s,d,d,d,d,d,d,e");
 801638a:	687b      	ldr	r3, [r7, #4]
 801638c:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8016390:	4a7f      	ldr	r2, [pc, #508]	; (8016590 <problem_fetch+0x14f2c>)
 8016392:	461c      	mov	r4, r3
 8016394:	4615      	mov	r5, r2
 8016396:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8016398:	6020      	str	r0, [r4, #0]
 801639a:	6061      	str	r1, [r4, #4]
 801639c:	60a2      	str	r2, [r4, #8]
 801639e:	60e3      	str	r3, [r4, #12]
			break;
 80163a0:	f006 b890 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 617 :
			strcpy(p->name,"GORILLA NR.2");
 80163a4:	687b      	ldr	r3, [r7, #4]
 80163a6:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80163aa:	4a7a      	ldr	r2, [pc, #488]	; (8016594 <problem_fetch+0x14f30>)
 80163ac:	461c      	mov	r4, r3
 80163ae:	4613      	mov	r3, r2
 80163b0:	cb07      	ldmia	r3!, {r0, r1, r2}
 80163b2:	6020      	str	r0, [r4, #0]
 80163b4:	6061      	str	r1, [r4, #4]
 80163b6:	60a2      	str	r2, [r4, #8]
 80163b8:	781b      	ldrb	r3, [r3, #0]
 80163ba:	7323      	strb	r3, [r4, #12]
			strcpy(p->grade,"7A+");
 80163bc:	687b      	ldr	r3, [r7, #4]
 80163be:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80163c2:	4a75      	ldr	r2, [pc, #468]	; (8016598 <problem_fetch+0x14f34>)
 80163c4:	6810      	ldr	r0, [r2, #0]
 80163c6:	6018      	str	r0, [r3, #0]
			p->moveSize = 4;
 80163c8:	687b      	ldr	r3, [r7, #4]
 80163ca:	2204      	movs	r2, #4
 80163cc:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"E,I,G,D");
 80163ce:	687b      	ldr	r3, [r7, #4]
 80163d0:	33a4      	adds	r3, #164	; 0xa4
 80163d2:	4972      	ldr	r1, [pc, #456]	; (801659c <problem_fetch+0x14f38>)
 80163d4:	461a      	mov	r2, r3
 80163d6:	460b      	mov	r3, r1
 80163d8:	cb03      	ldmia	r3!, {r0, r1}
 80163da:	6010      	str	r0, [r2, #0]
 80163dc:	6051      	str	r1, [r2, #4]
			strcpy(p->moveNumbers,"6,10,14,18");
 80163de:	687b      	ldr	r3, [r7, #4]
 80163e0:	3304      	adds	r3, #4
 80163e2:	496f      	ldr	r1, [pc, #444]	; (80165a0 <problem_fetch+0x14f3c>)
 80163e4:	461a      	mov	r2, r3
 80163e6:	460b      	mov	r3, r1
 80163e8:	cb03      	ldmia	r3!, {r0, r1}
 80163ea:	6010      	str	r0, [r2, #0]
 80163ec:	6051      	str	r1, [r2, #4]
 80163ee:	8819      	ldrh	r1, [r3, #0]
 80163f0:	789b      	ldrb	r3, [r3, #2]
 80163f2:	8111      	strh	r1, [r2, #8]
 80163f4:	7293      	strb	r3, [r2, #10]
			strcpy(p->startFinish,"s,d,d,e");
 80163f6:	687b      	ldr	r3, [r7, #4]
 80163f8:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 80163fc:	4969      	ldr	r1, [pc, #420]	; (80165a4 <problem_fetch+0x14f40>)
 80163fe:	461a      	mov	r2, r3
 8016400:	460b      	mov	r3, r1
 8016402:	cb03      	ldmia	r3!, {r0, r1}
 8016404:	6010      	str	r0, [r2, #0]
 8016406:	6051      	str	r1, [r2, #4]
			break;
 8016408:	f006 b85c 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 618 :
			strcpy(p->name,"BLACK MAGIC");
 801640c:	687b      	ldr	r3, [r7, #4]
 801640e:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8016412:	4a65      	ldr	r2, [pc, #404]	; (80165a8 <problem_fetch+0x14f44>)
 8016414:	461c      	mov	r4, r3
 8016416:	4613      	mov	r3, r2
 8016418:	cb07      	ldmia	r3!, {r0, r1, r2}
 801641a:	6020      	str	r0, [r4, #0]
 801641c:	6061      	str	r1, [r4, #4]
 801641e:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade,"7A+");
 8016420:	687b      	ldr	r3, [r7, #4]
 8016422:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8016426:	4a5c      	ldr	r2, [pc, #368]	; (8016598 <problem_fetch+0x14f34>)
 8016428:	6810      	ldr	r0, [r2, #0]
 801642a:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 801642c:	687b      	ldr	r3, [r7, #4]
 801642e:	2207      	movs	r2, #7
 8016430:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"C,G,C,H,F,H,I");
 8016432:	687b      	ldr	r3, [r7, #4]
 8016434:	33a4      	adds	r3, #164	; 0xa4
 8016436:	4a5d      	ldr	r2, [pc, #372]	; (80165ac <problem_fetch+0x14f48>)
 8016438:	461c      	mov	r4, r3
 801643a:	4613      	mov	r3, r2
 801643c:	cb07      	ldmia	r3!, {r0, r1, r2}
 801643e:	6020      	str	r0, [r4, #0]
 8016440:	6061      	str	r1, [r4, #4]
 8016442:	60a2      	str	r2, [r4, #8]
 8016444:	881b      	ldrh	r3, [r3, #0]
 8016446:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,4,8,10,13,16,18");
 8016448:	687b      	ldr	r3, [r7, #4]
 801644a:	3304      	adds	r3, #4
 801644c:	4a58      	ldr	r2, [pc, #352]	; (80165b0 <problem_fetch+0x14f4c>)
 801644e:	461d      	mov	r5, r3
 8016450:	4614      	mov	r4, r2
 8016452:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8016454:	6028      	str	r0, [r5, #0]
 8016456:	6069      	str	r1, [r5, #4]
 8016458:	60aa      	str	r2, [r5, #8]
 801645a:	60eb      	str	r3, [r5, #12]
 801645c:	8823      	ldrh	r3, [r4, #0]
 801645e:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 8016460:	687b      	ldr	r3, [r7, #4]
 8016462:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8016466:	4a53      	ldr	r2, [pc, #332]	; (80165b4 <problem_fetch+0x14f50>)
 8016468:	461c      	mov	r4, r3
 801646a:	4613      	mov	r3, r2
 801646c:	cb07      	ldmia	r3!, {r0, r1, r2}
 801646e:	6020      	str	r0, [r4, #0]
 8016470:	6061      	str	r1, [r4, #4]
 8016472:	60a2      	str	r2, [r4, #8]
 8016474:	881b      	ldrh	r3, [r3, #0]
 8016476:	81a3      	strh	r3, [r4, #12]
			break;
 8016478:	f006 b824 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 619 :
			strcpy(p->name,"GOOD LIFE");
 801647c:	687b      	ldr	r3, [r7, #4]
 801647e:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8016482:	494d      	ldr	r1, [pc, #308]	; (80165b8 <problem_fetch+0x14f54>)
 8016484:	461a      	mov	r2, r3
 8016486:	460b      	mov	r3, r1
 8016488:	cb03      	ldmia	r3!, {r0, r1}
 801648a:	6010      	str	r0, [r2, #0]
 801648c:	6051      	str	r1, [r2, #4]
 801648e:	881b      	ldrh	r3, [r3, #0]
 8016490:	8113      	strh	r3, [r2, #8]
			strcpy(p->grade,"7A+");
 8016492:	687b      	ldr	r3, [r7, #4]
 8016494:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8016498:	4a3f      	ldr	r2, [pc, #252]	; (8016598 <problem_fetch+0x14f34>)
 801649a:	6810      	ldr	r0, [r2, #0]
 801649c:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 801649e:	687b      	ldr	r3, [r7, #4]
 80164a0:	2206      	movs	r2, #6
 80164a2:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,H,C,D,F,A");
 80164a4:	687b      	ldr	r3, [r7, #4]
 80164a6:	33a4      	adds	r3, #164	; 0xa4
 80164a8:	4a44      	ldr	r2, [pc, #272]	; (80165bc <problem_fetch+0x14f58>)
 80164aa:	461c      	mov	r4, r3
 80164ac:	4613      	mov	r3, r2
 80164ae:	cb07      	ldmia	r3!, {r0, r1, r2}
 80164b0:	6020      	str	r0, [r4, #0]
 80164b2:	6061      	str	r1, [r4, #4]
 80164b4:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,8,8,15,11,18");
 80164b6:	687b      	ldr	r3, [r7, #4]
 80164b8:	3304      	adds	r3, #4
 80164ba:	4a41      	ldr	r2, [pc, #260]	; (80165c0 <problem_fetch+0x14f5c>)
 80164bc:	461c      	mov	r4, r3
 80164be:	4613      	mov	r3, r2
 80164c0:	cb07      	ldmia	r3!, {r0, r1, r2}
 80164c2:	6020      	str	r0, [r4, #0]
 80164c4:	6061      	str	r1, [r4, #4]
 80164c6:	60a2      	str	r2, [r4, #8]
 80164c8:	881a      	ldrh	r2, [r3, #0]
 80164ca:	789b      	ldrb	r3, [r3, #2]
 80164cc:	81a2      	strh	r2, [r4, #12]
 80164ce:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 80164d0:	687b      	ldr	r3, [r7, #4]
 80164d2:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 80164d6:	4a25      	ldr	r2, [pc, #148]	; (801656c <problem_fetch+0x14f08>)
 80164d8:	461c      	mov	r4, r3
 80164da:	4613      	mov	r3, r2
 80164dc:	cb07      	ldmia	r3!, {r0, r1, r2}
 80164de:	6020      	str	r0, [r4, #0]
 80164e0:	6061      	str	r1, [r4, #4]
 80164e2:	60a2      	str	r2, [r4, #8]
			break;
 80164e4:	f005 bfee 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 620 :
			strcpy(p->name,"CALCIUM20");
 80164e8:	687b      	ldr	r3, [r7, #4]
 80164ea:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80164ee:	4935      	ldr	r1, [pc, #212]	; (80165c4 <problem_fetch+0x14f60>)
 80164f0:	461a      	mov	r2, r3
 80164f2:	460b      	mov	r3, r1
 80164f4:	cb03      	ldmia	r3!, {r0, r1}
 80164f6:	6010      	str	r0, [r2, #0]
 80164f8:	6051      	str	r1, [r2, #4]
 80164fa:	881b      	ldrh	r3, [r3, #0]
 80164fc:	8113      	strh	r3, [r2, #8]
			strcpy(p->grade,"6C+");
 80164fe:	687b      	ldr	r3, [r7, #4]
 8016500:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8016504:	4a1b      	ldr	r2, [pc, #108]	; (8016574 <problem_fetch+0x14f10>)
 8016506:	6810      	ldr	r0, [r2, #0]
 8016508:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 801650a:	687b      	ldr	r3, [r7, #4]
 801650c:	2207      	movs	r2, #7
 801650e:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"B,G,G,B,D,B,D");
 8016510:	687b      	ldr	r3, [r7, #4]
 8016512:	33a4      	adds	r3, #164	; 0xa4
 8016514:	4a2c      	ldr	r2, [pc, #176]	; (80165c8 <problem_fetch+0x14f64>)
 8016516:	461c      	mov	r4, r3
 8016518:	4613      	mov	r3, r2
 801651a:	cb07      	ldmia	r3!, {r0, r1, r2}
 801651c:	6020      	str	r0, [r4, #0]
 801651e:	6061      	str	r1, [r4, #4]
 8016520:	60a2      	str	r2, [r4, #8]
 8016522:	881b      	ldrh	r3, [r3, #0]
 8016524:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"6,4,9,10,15,15,18");
 8016526:	687b      	ldr	r3, [r7, #4]
 8016528:	3304      	adds	r3, #4
 801652a:	4a28      	ldr	r2, [pc, #160]	; (80165cc <problem_fetch+0x14f68>)
 801652c:	461d      	mov	r5, r3
 801652e:	4614      	mov	r4, r2
 8016530:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8016532:	6028      	str	r0, [r5, #0]
 8016534:	6069      	str	r1, [r5, #4]
 8016536:	60aa      	str	r2, [r5, #8]
 8016538:	60eb      	str	r3, [r5, #12]
 801653a:	8823      	ldrh	r3, [r4, #0]
 801653c:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,s,d,d,d,d,e");
 801653e:	687b      	ldr	r3, [r7, #4]
 8016540:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8016544:	4a22      	ldr	r2, [pc, #136]	; (80165d0 <problem_fetch+0x14f6c>)
 8016546:	461c      	mov	r4, r3
 8016548:	4613      	mov	r3, r2
 801654a:	cb07      	ldmia	r3!, {r0, r1, r2}
 801654c:	6020      	str	r0, [r4, #0]
 801654e:	6061      	str	r1, [r4, #4]
 8016550:	60a2      	str	r2, [r4, #8]
 8016552:	881b      	ldrh	r3, [r3, #0]
 8016554:	81a3      	strh	r3, [r4, #12]
			break;
 8016556:	f005 bfb5 	b.w	801c4c4 <problem_fetch+0x1ae60>
 801655a:	bf00      	nop
 801655c:	0802afc8 	.word	0x0802afc8
 8016560:	08023c60 	.word	0x08023c60
 8016564:	0802afd8 	.word	0x0802afd8
 8016568:	0802afe4 	.word	0x0802afe4
 801656c:	08023ec0 	.word	0x08023ec0
 8016570:	0802aff4 	.word	0x0802aff4
 8016574:	08023bbc 	.word	0x08023bbc
 8016578:	0802b004 	.word	0x0802b004
 801657c:	0802b010 	.word	0x0802b010
 8016580:	0802b020 	.word	0x0802b020
 8016584:	08023bf0 	.word	0x08023bf0
 8016588:	0802b034 	.word	0x0802b034
 801658c:	0802b044 	.word	0x0802b044
 8016590:	08023d34 	.word	0x08023d34
 8016594:	0802b05c 	.word	0x0802b05c
 8016598:	08023cc4 	.word	0x08023cc4
 801659c:	0802b06c 	.word	0x0802b06c
 80165a0:	08023c6c 	.word	0x08023c6c
 80165a4:	08023c78 	.word	0x08023c78
 80165a8:	0802b074 	.word	0x0802b074
 80165ac:	0802b080 	.word	0x0802b080
 80165b0:	0802b090 	.word	0x0802b090
 80165b4:	08023cac 	.word	0x08023cac
 80165b8:	0802b0a4 	.word	0x0802b0a4
 80165bc:	0802b0b0 	.word	0x0802b0b0
 80165c0:	0802b0bc 	.word	0x0802b0bc
 80165c4:	0802b0cc 	.word	0x0802b0cc
 80165c8:	0802b0d8 	.word	0x0802b0d8
 80165cc:	0802b0e8 	.word	0x0802b0e8
 80165d0:	08023b9c 	.word	0x08023b9c
		case 621 :
			strcpy(p->name,"BLACK IS BACK");
 80165d4:	687b      	ldr	r3, [r7, #4]
 80165d6:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80165da:	4aa8      	ldr	r2, [pc, #672]	; (801687c <problem_fetch+0x15218>)
 80165dc:	461c      	mov	r4, r3
 80165de:	4613      	mov	r3, r2
 80165e0:	cb07      	ldmia	r3!, {r0, r1, r2}
 80165e2:	6020      	str	r0, [r4, #0]
 80165e4:	6061      	str	r1, [r4, #4]
 80165e6:	60a2      	str	r2, [r4, #8]
 80165e8:	881b      	ldrh	r3, [r3, #0]
 80165ea:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade,"6C+");
 80165ec:	687b      	ldr	r3, [r7, #4]
 80165ee:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80165f2:	4aa3      	ldr	r2, [pc, #652]	; (8016880 <problem_fetch+0x1521c>)
 80165f4:	6810      	ldr	r0, [r2, #0]
 80165f6:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 80165f8:	687b      	ldr	r3, [r7, #4]
 80165fa:	2207      	movs	r2, #7
 80165fc:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,H,G,B,C,I,D");
 80165fe:	687b      	ldr	r3, [r7, #4]
 8016600:	33a4      	adds	r3, #164	; 0xa4
 8016602:	4aa0      	ldr	r2, [pc, #640]	; (8016884 <problem_fetch+0x15220>)
 8016604:	461c      	mov	r4, r3
 8016606:	4613      	mov	r3, r2
 8016608:	cb07      	ldmia	r3!, {r0, r1, r2}
 801660a:	6020      	str	r0, [r4, #0]
 801660c:	6061      	str	r1, [r4, #4]
 801660e:	60a2      	str	r2, [r4, #8]
 8016610:	881b      	ldrh	r3, [r3, #0]
 8016612:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,8,9,10,13,14,18");
 8016614:	687b      	ldr	r3, [r7, #4]
 8016616:	3304      	adds	r3, #4
 8016618:	4a9b      	ldr	r2, [pc, #620]	; (8016888 <problem_fetch+0x15224>)
 801661a:	461d      	mov	r5, r3
 801661c:	4614      	mov	r4, r2
 801661e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8016620:	6028      	str	r0, [r5, #0]
 8016622:	6069      	str	r1, [r5, #4]
 8016624:	60aa      	str	r2, [r5, #8]
 8016626:	60eb      	str	r3, [r5, #12]
 8016628:	8823      	ldrh	r3, [r4, #0]
 801662a:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 801662c:	687b      	ldr	r3, [r7, #4]
 801662e:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8016632:	4a96      	ldr	r2, [pc, #600]	; (801688c <problem_fetch+0x15228>)
 8016634:	461c      	mov	r4, r3
 8016636:	4613      	mov	r3, r2
 8016638:	cb07      	ldmia	r3!, {r0, r1, r2}
 801663a:	6020      	str	r0, [r4, #0]
 801663c:	6061      	str	r1, [r4, #4]
 801663e:	60a2      	str	r2, [r4, #8]
 8016640:	881b      	ldrh	r3, [r3, #0]
 8016642:	81a3      	strh	r3, [r4, #12]
			break;
 8016644:	f005 bf3e 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 622 :
			strcpy(p->name,"CAPTAIN RILEY");
 8016648:	687b      	ldr	r3, [r7, #4]
 801664a:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801664e:	4a90      	ldr	r2, [pc, #576]	; (8016890 <problem_fetch+0x1522c>)
 8016650:	461c      	mov	r4, r3
 8016652:	4613      	mov	r3, r2
 8016654:	cb07      	ldmia	r3!, {r0, r1, r2}
 8016656:	6020      	str	r0, [r4, #0]
 8016658:	6061      	str	r1, [r4, #4]
 801665a:	60a2      	str	r2, [r4, #8]
 801665c:	881b      	ldrh	r3, [r3, #0]
 801665e:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade,"6B+");
 8016660:	687b      	ldr	r3, [r7, #4]
 8016662:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8016666:	4a8b      	ldr	r2, [pc, #556]	; (8016894 <problem_fetch+0x15230>)
 8016668:	6810      	ldr	r0, [r2, #0]
 801666a:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 801666c:	687b      	ldr	r3, [r7, #4]
 801666e:	2206      	movs	r2, #6
 8016670:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,E,F,C,E,A");
 8016672:	687b      	ldr	r3, [r7, #4]
 8016674:	33a4      	adds	r3, #164	; 0xa4
 8016676:	4a88      	ldr	r2, [pc, #544]	; (8016898 <problem_fetch+0x15234>)
 8016678:	461c      	mov	r4, r3
 801667a:	4613      	mov	r3, r2
 801667c:	cb07      	ldmia	r3!, {r0, r1, r2}
 801667e:	6020      	str	r0, [r4, #0]
 8016680:	6061      	str	r1, [r4, #4]
 8016682:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,8,11,13,16,18");
 8016684:	687b      	ldr	r3, [r7, #4]
 8016686:	3304      	adds	r3, #4
 8016688:	4a84      	ldr	r2, [pc, #528]	; (801689c <problem_fetch+0x15238>)
 801668a:	461c      	mov	r4, r3
 801668c:	4615      	mov	r5, r2
 801668e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8016690:	6020      	str	r0, [r4, #0]
 8016692:	6061      	str	r1, [r4, #4]
 8016694:	60a2      	str	r2, [r4, #8]
 8016696:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 8016698:	687b      	ldr	r3, [r7, #4]
 801669a:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 801669e:	4a80      	ldr	r2, [pc, #512]	; (80168a0 <problem_fetch+0x1523c>)
 80166a0:	461c      	mov	r4, r3
 80166a2:	4613      	mov	r3, r2
 80166a4:	cb07      	ldmia	r3!, {r0, r1, r2}
 80166a6:	6020      	str	r0, [r4, #0]
 80166a8:	6061      	str	r1, [r4, #4]
 80166aa:	60a2      	str	r2, [r4, #8]
			break;
 80166ac:	f005 bf0a 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 623 :
			strcpy(p->name,"WPOLOGIM 2");
 80166b0:	687b      	ldr	r3, [r7, #4]
 80166b2:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80166b6:	497b      	ldr	r1, [pc, #492]	; (80168a4 <problem_fetch+0x15240>)
 80166b8:	461a      	mov	r2, r3
 80166ba:	460b      	mov	r3, r1
 80166bc:	cb03      	ldmia	r3!, {r0, r1}
 80166be:	6010      	str	r0, [r2, #0]
 80166c0:	6051      	str	r1, [r2, #4]
 80166c2:	8819      	ldrh	r1, [r3, #0]
 80166c4:	789b      	ldrb	r3, [r3, #2]
 80166c6:	8111      	strh	r1, [r2, #8]
 80166c8:	7293      	strb	r3, [r2, #10]
			strcpy(p->grade,"7B");
 80166ca:	687b      	ldr	r3, [r7, #4]
 80166cc:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80166d0:	4a75      	ldr	r2, [pc, #468]	; (80168a8 <problem_fetch+0x15244>)
 80166d2:	8811      	ldrh	r1, [r2, #0]
 80166d4:	7892      	ldrb	r2, [r2, #2]
 80166d6:	8019      	strh	r1, [r3, #0]
 80166d8:	709a      	strb	r2, [r3, #2]
			p->moveSize = 6;
 80166da:	687b      	ldr	r3, [r7, #4]
 80166dc:	2206      	movs	r2, #6
 80166de:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,E,I,H,I,D");
 80166e0:	687b      	ldr	r3, [r7, #4]
 80166e2:	33a4      	adds	r3, #164	; 0xa4
 80166e4:	4a71      	ldr	r2, [pc, #452]	; (80168ac <problem_fetch+0x15248>)
 80166e6:	461c      	mov	r4, r3
 80166e8:	4613      	mov	r3, r2
 80166ea:	cb07      	ldmia	r3!, {r0, r1, r2}
 80166ec:	6020      	str	r0, [r4, #0]
 80166ee:	6061      	str	r1, [r4, #4]
 80166f0:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,8,9,12,15,18");
 80166f2:	687b      	ldr	r3, [r7, #4]
 80166f4:	3304      	adds	r3, #4
 80166f6:	4a6e      	ldr	r2, [pc, #440]	; (80168b0 <problem_fetch+0x1524c>)
 80166f8:	461c      	mov	r4, r3
 80166fa:	4613      	mov	r3, r2
 80166fc:	cb07      	ldmia	r3!, {r0, r1, r2}
 80166fe:	6020      	str	r0, [r4, #0]
 8016700:	6061      	str	r1, [r4, #4]
 8016702:	60a2      	str	r2, [r4, #8]
 8016704:	881a      	ldrh	r2, [r3, #0]
 8016706:	789b      	ldrb	r3, [r3, #2]
 8016708:	81a2      	strh	r2, [r4, #12]
 801670a:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 801670c:	687b      	ldr	r3, [r7, #4]
 801670e:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8016712:	4a63      	ldr	r2, [pc, #396]	; (80168a0 <problem_fetch+0x1523c>)
 8016714:	461c      	mov	r4, r3
 8016716:	4613      	mov	r3, r2
 8016718:	cb07      	ldmia	r3!, {r0, r1, r2}
 801671a:	6020      	str	r0, [r4, #0]
 801671c:	6061      	str	r1, [r4, #4]
 801671e:	60a2      	str	r2, [r4, #8]
			break;
 8016720:	f005 bed0 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 624 :
			strcpy(p->name,"I LOVE ROCK AND ROLL");
 8016724:	687b      	ldr	r3, [r7, #4]
 8016726:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801672a:	4a62      	ldr	r2, [pc, #392]	; (80168b4 <problem_fetch+0x15250>)
 801672c:	461d      	mov	r5, r3
 801672e:	4614      	mov	r4, r2
 8016730:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8016732:	6028      	str	r0, [r5, #0]
 8016734:	6069      	str	r1, [r5, #4]
 8016736:	60aa      	str	r2, [r5, #8]
 8016738:	60eb      	str	r3, [r5, #12]
 801673a:	6820      	ldr	r0, [r4, #0]
 801673c:	6128      	str	r0, [r5, #16]
 801673e:	7923      	ldrb	r3, [r4, #4]
 8016740:	752b      	strb	r3, [r5, #20]
			strcpy(p->grade,"6C+");
 8016742:	687b      	ldr	r3, [r7, #4]
 8016744:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8016748:	4a4d      	ldr	r2, [pc, #308]	; (8016880 <problem_fetch+0x1521c>)
 801674a:	6810      	ldr	r0, [r2, #0]
 801674c:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 801674e:	687b      	ldr	r3, [r7, #4]
 8016750:	2207      	movs	r2, #7
 8016752:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"E,E,F,G,I,I,J");
 8016754:	687b      	ldr	r3, [r7, #4]
 8016756:	33a4      	adds	r3, #164	; 0xa4
 8016758:	4a57      	ldr	r2, [pc, #348]	; (80168b8 <problem_fetch+0x15254>)
 801675a:	461c      	mov	r4, r3
 801675c:	4613      	mov	r3, r2
 801675e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8016760:	6020      	str	r0, [r4, #0]
 8016762:	6061      	str	r1, [r4, #4]
 8016764:	60a2      	str	r2, [r4, #8]
 8016766:	881b      	ldrh	r3, [r3, #0]
 8016768:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"8,16,11,9,14,18,5");
 801676a:	687b      	ldr	r3, [r7, #4]
 801676c:	3304      	adds	r3, #4
 801676e:	4a53      	ldr	r2, [pc, #332]	; (80168bc <problem_fetch+0x15258>)
 8016770:	461d      	mov	r5, r3
 8016772:	4614      	mov	r4, r2
 8016774:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8016776:	6028      	str	r0, [r5, #0]
 8016778:	6069      	str	r1, [r5, #4]
 801677a:	60aa      	str	r2, [r5, #8]
 801677c:	60eb      	str	r3, [r5, #12]
 801677e:	8823      	ldrh	r3, [r4, #0]
 8016780:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"d,d,d,d,d,e,s");
 8016782:	687b      	ldr	r3, [r7, #4]
 8016784:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8016788:	4a4d      	ldr	r2, [pc, #308]	; (80168c0 <problem_fetch+0x1525c>)
 801678a:	461c      	mov	r4, r3
 801678c:	4613      	mov	r3, r2
 801678e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8016790:	6020      	str	r0, [r4, #0]
 8016792:	6061      	str	r1, [r4, #4]
 8016794:	60a2      	str	r2, [r4, #8]
 8016796:	881b      	ldrh	r3, [r3, #0]
 8016798:	81a3      	strh	r3, [r4, #12]
			break;
 801679a:	f005 be93 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 625 :
			strcpy(p->name,"THE DAILY RATION");
 801679e:	687b      	ldr	r3, [r7, #4]
 80167a0:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80167a4:	4a47      	ldr	r2, [pc, #284]	; (80168c4 <problem_fetch+0x15260>)
 80167a6:	461d      	mov	r5, r3
 80167a8:	4614      	mov	r4, r2
 80167aa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80167ac:	6028      	str	r0, [r5, #0]
 80167ae:	6069      	str	r1, [r5, #4]
 80167b0:	60aa      	str	r2, [r5, #8]
 80167b2:	60eb      	str	r3, [r5, #12]
 80167b4:	7823      	ldrb	r3, [r4, #0]
 80167b6:	742b      	strb	r3, [r5, #16]
			strcpy(p->grade,"6C+");
 80167b8:	687b      	ldr	r3, [r7, #4]
 80167ba:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80167be:	4a30      	ldr	r2, [pc, #192]	; (8016880 <problem_fetch+0x1521c>)
 80167c0:	6810      	ldr	r0, [r2, #0]
 80167c2:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 80167c4:	687b      	ldr	r3, [r7, #4]
 80167c6:	2207      	movs	r2, #7
 80167c8:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,K,G,G,H,J,D");
 80167ca:	687b      	ldr	r3, [r7, #4]
 80167cc:	33a4      	adds	r3, #164	; 0xa4
 80167ce:	4a3e      	ldr	r2, [pc, #248]	; (80168c8 <problem_fetch+0x15264>)
 80167d0:	461c      	mov	r4, r3
 80167d2:	4613      	mov	r3, r2
 80167d4:	cb07      	ldmia	r3!, {r0, r1, r2}
 80167d6:	6020      	str	r0, [r4, #0]
 80167d8:	6061      	str	r1, [r4, #4]
 80167da:	60a2      	str	r2, [r4, #8]
 80167dc:	881b      	ldrh	r3, [r3, #0]
 80167de:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,14,17,15,10,7,18");
 80167e0:	687b      	ldr	r3, [r7, #4]
 80167e2:	3304      	adds	r3, #4
 80167e4:	4a39      	ldr	r2, [pc, #228]	; (80168cc <problem_fetch+0x15268>)
 80167e6:	461d      	mov	r5, r3
 80167e8:	4614      	mov	r4, r2
 80167ea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80167ec:	6028      	str	r0, [r5, #0]
 80167ee:	6069      	str	r1, [r5, #4]
 80167f0:	60aa      	str	r2, [r5, #8]
 80167f2:	60eb      	str	r3, [r5, #12]
 80167f4:	8823      	ldrh	r3, [r4, #0]
 80167f6:	78a2      	ldrb	r2, [r4, #2]
 80167f8:	822b      	strh	r3, [r5, #16]
 80167fa:	4613      	mov	r3, r2
 80167fc:	74ab      	strb	r3, [r5, #18]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 80167fe:	687b      	ldr	r3, [r7, #4]
 8016800:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8016804:	4a21      	ldr	r2, [pc, #132]	; (801688c <problem_fetch+0x15228>)
 8016806:	461c      	mov	r4, r3
 8016808:	4613      	mov	r3, r2
 801680a:	cb07      	ldmia	r3!, {r0, r1, r2}
 801680c:	6020      	str	r0, [r4, #0]
 801680e:	6061      	str	r1, [r4, #4]
 8016810:	60a2      	str	r2, [r4, #8]
 8016812:	881b      	ldrh	r3, [r3, #0]
 8016814:	81a3      	strh	r3, [r4, #12]
			break;
 8016816:	f005 be55 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 626 :
			strcpy(p->name,"ZLATI");
 801681a:	687b      	ldr	r3, [r7, #4]
 801681c:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8016820:	4a2b      	ldr	r2, [pc, #172]	; (80168d0 <problem_fetch+0x1526c>)
 8016822:	6810      	ldr	r0, [r2, #0]
 8016824:	6018      	str	r0, [r3, #0]
 8016826:	8892      	ldrh	r2, [r2, #4]
 8016828:	809a      	strh	r2, [r3, #4]
			strcpy(p->grade,"6C+");
 801682a:	687b      	ldr	r3, [r7, #4]
 801682c:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8016830:	4a13      	ldr	r2, [pc, #76]	; (8016880 <problem_fetch+0x1521c>)
 8016832:	6810      	ldr	r0, [r2, #0]
 8016834:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 8016836:	687b      	ldr	r3, [r7, #4]
 8016838:	2206      	movs	r2, #6
 801683a:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,G,H,C,E,D");
 801683c:	687b      	ldr	r3, [r7, #4]
 801683e:	33a4      	adds	r3, #164	; 0xa4
 8016840:	4a24      	ldr	r2, [pc, #144]	; (80168d4 <problem_fetch+0x15270>)
 8016842:	461c      	mov	r4, r3
 8016844:	4613      	mov	r3, r2
 8016846:	cb07      	ldmia	r3!, {r0, r1, r2}
 8016848:	6020      	str	r0, [r4, #0]
 801684a:	6061      	str	r1, [r4, #4]
 801684c:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,9,10,13,12,18");
 801684e:	687b      	ldr	r3, [r7, #4]
 8016850:	3304      	adds	r3, #4
 8016852:	4a21      	ldr	r2, [pc, #132]	; (80168d8 <problem_fetch+0x15274>)
 8016854:	461c      	mov	r4, r3
 8016856:	4615      	mov	r5, r2
 8016858:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801685a:	6020      	str	r0, [r4, #0]
 801685c:	6061      	str	r1, [r4, #4]
 801685e:	60a2      	str	r2, [r4, #8]
 8016860:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 8016862:	687b      	ldr	r3, [r7, #4]
 8016864:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8016868:	4a0d      	ldr	r2, [pc, #52]	; (80168a0 <problem_fetch+0x1523c>)
 801686a:	461c      	mov	r4, r3
 801686c:	4613      	mov	r3, r2
 801686e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8016870:	6020      	str	r0, [r4, #0]
 8016872:	6061      	str	r1, [r4, #4]
 8016874:	60a2      	str	r2, [r4, #8]
			break;
 8016876:	f005 be25 	b.w	801c4c4 <problem_fetch+0x1ae60>
 801687a:	bf00      	nop
 801687c:	0802b0fc 	.word	0x0802b0fc
 8016880:	08023bbc 	.word	0x08023bbc
 8016884:	0802b10c 	.word	0x0802b10c
 8016888:	0802b11c 	.word	0x0802b11c
 801688c:	08023cac 	.word	0x08023cac
 8016890:	0802b130 	.word	0x0802b130
 8016894:	08023b24 	.word	0x08023b24
 8016898:	0802b140 	.word	0x0802b140
 801689c:	0802b14c 	.word	0x0802b14c
 80168a0:	08023ec0 	.word	0x08023ec0
 80168a4:	0802b15c 	.word	0x0802b15c
 80168a8:	0802421c 	.word	0x0802421c
 80168ac:	0802b168 	.word	0x0802b168
 80168b0:	080280a8 	.word	0x080280a8
 80168b4:	0802b174 	.word	0x0802b174
 80168b8:	0802b18c 	.word	0x0802b18c
 80168bc:	0802b19c 	.word	0x0802b19c
 80168c0:	0802b1b0 	.word	0x0802b1b0
 80168c4:	0802b1c0 	.word	0x0802b1c0
 80168c8:	0802b1d4 	.word	0x0802b1d4
 80168cc:	0802b1e4 	.word	0x0802b1e4
 80168d0:	0802b1f8 	.word	0x0802b1f8
 80168d4:	0802b200 	.word	0x0802b200
 80168d8:	0802b20c 	.word	0x0802b20c
		case 627 :
			strcpy(p->name,"FISHIN FOR A COMPLIMENT");
 80168dc:	687b      	ldr	r3, [r7, #4]
 80168de:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80168e2:	4aaa      	ldr	r2, [pc, #680]	; (8016b8c <problem_fetch+0x15528>)
 80168e4:	461d      	mov	r5, r3
 80168e6:	4614      	mov	r4, r2
 80168e8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80168ea:	6028      	str	r0, [r5, #0]
 80168ec:	6069      	str	r1, [r5, #4]
 80168ee:	60aa      	str	r2, [r5, #8]
 80168f0:	60eb      	str	r3, [r5, #12]
 80168f2:	cc03      	ldmia	r4!, {r0, r1}
 80168f4:	6128      	str	r0, [r5, #16]
 80168f6:	6169      	str	r1, [r5, #20]
			strcpy(p->grade,"6C+");
 80168f8:	687b      	ldr	r3, [r7, #4]
 80168fa:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80168fe:	4aa4      	ldr	r2, [pc, #656]	; (8016b90 <problem_fetch+0x1552c>)
 8016900:	6810      	ldr	r0, [r2, #0]
 8016902:	6018      	str	r0, [r3, #0]
			p->moveSize = 5;
 8016904:	687b      	ldr	r3, [r7, #4]
 8016906:	2205      	movs	r2, #5
 8016908:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,E,E,C,D");
 801690a:	687b      	ldr	r3, [r7, #4]
 801690c:	33a4      	adds	r3, #164	; 0xa4
 801690e:	49a1      	ldr	r1, [pc, #644]	; (8016b94 <problem_fetch+0x15530>)
 8016910:	461a      	mov	r2, r3
 8016912:	460b      	mov	r3, r1
 8016914:	cb03      	ldmia	r3!, {r0, r1}
 8016916:	6010      	str	r0, [r2, #0]
 8016918:	6051      	str	r1, [r2, #4]
 801691a:	881b      	ldrh	r3, [r3, #0]
 801691c:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"4,8,12,13,18");
 801691e:	687b      	ldr	r3, [r7, #4]
 8016920:	3304      	adds	r3, #4
 8016922:	4a9d      	ldr	r2, [pc, #628]	; (8016b98 <problem_fetch+0x15534>)
 8016924:	461c      	mov	r4, r3
 8016926:	4613      	mov	r3, r2
 8016928:	cb07      	ldmia	r3!, {r0, r1, r2}
 801692a:	6020      	str	r0, [r4, #0]
 801692c:	6061      	str	r1, [r4, #4]
 801692e:	60a2      	str	r2, [r4, #8]
 8016930:	781b      	ldrb	r3, [r3, #0]
 8016932:	7323      	strb	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,e");
 8016934:	687b      	ldr	r3, [r7, #4]
 8016936:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 801693a:	4998      	ldr	r1, [pc, #608]	; (8016b9c <problem_fetch+0x15538>)
 801693c:	461a      	mov	r2, r3
 801693e:	460b      	mov	r3, r1
 8016940:	cb03      	ldmia	r3!, {r0, r1}
 8016942:	6010      	str	r0, [r2, #0]
 8016944:	6051      	str	r1, [r2, #4]
 8016946:	881b      	ldrh	r3, [r3, #0]
 8016948:	8113      	strh	r3, [r2, #8]
			break;
 801694a:	f005 bdbb 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 628 :
			strcpy(p->name,"サミシクナイト");
 801694e:	687b      	ldr	r3, [r7, #4]
 8016950:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8016954:	4a92      	ldr	r2, [pc, #584]	; (8016ba0 <problem_fetch+0x1553c>)
 8016956:	461d      	mov	r5, r3
 8016958:	4614      	mov	r4, r2
 801695a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801695c:	6028      	str	r0, [r5, #0]
 801695e:	6069      	str	r1, [r5, #4]
 8016960:	60aa      	str	r2, [r5, #8]
 8016962:	60eb      	str	r3, [r5, #12]
 8016964:	6820      	ldr	r0, [r4, #0]
 8016966:	6128      	str	r0, [r5, #16]
 8016968:	88a3      	ldrh	r3, [r4, #4]
 801696a:	82ab      	strh	r3, [r5, #20]
			strcpy(p->grade,"6B+");
 801696c:	687b      	ldr	r3, [r7, #4]
 801696e:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8016972:	4a8c      	ldr	r2, [pc, #560]	; (8016ba4 <problem_fetch+0x15540>)
 8016974:	6810      	ldr	r0, [r2, #0]
 8016976:	6018      	str	r0, [r3, #0]
			p->moveSize = 9;
 8016978:	687b      	ldr	r3, [r7, #4]
 801697a:	2209      	movs	r2, #9
 801697c:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"E,H,G,B,E,C,G,G,I");
 801697e:	687b      	ldr	r3, [r7, #4]
 8016980:	33a4      	adds	r3, #164	; 0xa4
 8016982:	4a89      	ldr	r2, [pc, #548]	; (8016ba8 <problem_fetch+0x15544>)
 8016984:	461d      	mov	r5, r3
 8016986:	4614      	mov	r4, r2
 8016988:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801698a:	6028      	str	r0, [r5, #0]
 801698c:	6069      	str	r1, [r5, #4]
 801698e:	60aa      	str	r2, [r5, #8]
 8016990:	60eb      	str	r3, [r5, #12]
 8016992:	8823      	ldrh	r3, [r4, #0]
 8016994:	822b      	strh	r3, [r5, #16]
			strcpy(p->moveNumbers,"6,5,9,10,12,13,15,17,18");
 8016996:	687b      	ldr	r3, [r7, #4]
 8016998:	3304      	adds	r3, #4
 801699a:	4a84      	ldr	r2, [pc, #528]	; (8016bac <problem_fetch+0x15548>)
 801699c:	461d      	mov	r5, r3
 801699e:	4614      	mov	r4, r2
 80169a0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80169a2:	6028      	str	r0, [r5, #0]
 80169a4:	6069      	str	r1, [r5, #4]
 80169a6:	60aa      	str	r2, [r5, #8]
 80169a8:	60eb      	str	r3, [r5, #12]
 80169aa:	cc03      	ldmia	r4!, {r0, r1}
 80169ac:	6128      	str	r0, [r5, #16]
 80169ae:	6169      	str	r1, [r5, #20]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,d,e");
 80169b0:	687b      	ldr	r3, [r7, #4]
 80169b2:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 80169b6:	4a7e      	ldr	r2, [pc, #504]	; (8016bb0 <problem_fetch+0x1554c>)
 80169b8:	461d      	mov	r5, r3
 80169ba:	4614      	mov	r4, r2
 80169bc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80169be:	6028      	str	r0, [r5, #0]
 80169c0:	6069      	str	r1, [r5, #4]
 80169c2:	60aa      	str	r2, [r5, #8]
 80169c4:	60eb      	str	r3, [r5, #12]
 80169c6:	8823      	ldrh	r3, [r4, #0]
 80169c8:	822b      	strh	r3, [r5, #16]
			break;
 80169ca:	f005 bd7b 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 629 :
			strcpy(p->name,"NEIL1");
 80169ce:	687b      	ldr	r3, [r7, #4]
 80169d0:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80169d4:	4a77      	ldr	r2, [pc, #476]	; (8016bb4 <problem_fetch+0x15550>)
 80169d6:	6810      	ldr	r0, [r2, #0]
 80169d8:	6018      	str	r0, [r3, #0]
 80169da:	8892      	ldrh	r2, [r2, #4]
 80169dc:	809a      	strh	r2, [r3, #4]
			strcpy(p->grade,"6B+");
 80169de:	687b      	ldr	r3, [r7, #4]
 80169e0:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80169e4:	4a6f      	ldr	r2, [pc, #444]	; (8016ba4 <problem_fetch+0x15540>)
 80169e6:	6810      	ldr	r0, [r2, #0]
 80169e8:	6018      	str	r0, [r3, #0]
			p->moveSize = 8;
 80169ea:	687b      	ldr	r3, [r7, #4]
 80169ec:	2208      	movs	r2, #8
 80169ee:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,E,C,B,C,D,C,A");
 80169f0:	687b      	ldr	r3, [r7, #4]
 80169f2:	33a4      	adds	r3, #164	; 0xa4
 80169f4:	4a70      	ldr	r2, [pc, #448]	; (8016bb8 <problem_fetch+0x15554>)
 80169f6:	461c      	mov	r4, r3
 80169f8:	4615      	mov	r5, r2
 80169fa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80169fc:	6020      	str	r0, [r4, #0]
 80169fe:	6061      	str	r1, [r4, #4]
 8016a00:	60a2      	str	r2, [r4, #8]
 8016a02:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"6,6,8,10,13,11,16,18");
 8016a04:	687b      	ldr	r3, [r7, #4]
 8016a06:	3304      	adds	r3, #4
 8016a08:	4a6c      	ldr	r2, [pc, #432]	; (8016bbc <problem_fetch+0x15558>)
 8016a0a:	461d      	mov	r5, r3
 8016a0c:	4614      	mov	r4, r2
 8016a0e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8016a10:	6028      	str	r0, [r5, #0]
 8016a12:	6069      	str	r1, [r5, #4]
 8016a14:	60aa      	str	r2, [r5, #8]
 8016a16:	60eb      	str	r3, [r5, #12]
 8016a18:	6820      	ldr	r0, [r4, #0]
 8016a1a:	6128      	str	r0, [r5, #16]
 8016a1c:	7923      	ldrb	r3, [r4, #4]
 8016a1e:	752b      	strb	r3, [r5, #20]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,e");
 8016a20:	687b      	ldr	r3, [r7, #4]
 8016a22:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8016a26:	4a66      	ldr	r2, [pc, #408]	; (8016bc0 <problem_fetch+0x1555c>)
 8016a28:	461c      	mov	r4, r3
 8016a2a:	4615      	mov	r5, r2
 8016a2c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8016a2e:	6020      	str	r0, [r4, #0]
 8016a30:	6061      	str	r1, [r4, #4]
 8016a32:	60a2      	str	r2, [r4, #8]
 8016a34:	60e3      	str	r3, [r4, #12]
			break;
 8016a36:	f005 bd45 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 630 :
			strcpy(p->name,"TIAMAT");
 8016a3a:	687b      	ldr	r3, [r7, #4]
 8016a3c:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8016a40:	4a60      	ldr	r2, [pc, #384]	; (8016bc4 <problem_fetch+0x15560>)
 8016a42:	6810      	ldr	r0, [r2, #0]
 8016a44:	6018      	str	r0, [r3, #0]
 8016a46:	8891      	ldrh	r1, [r2, #4]
 8016a48:	7992      	ldrb	r2, [r2, #6]
 8016a4a:	8099      	strh	r1, [r3, #4]
 8016a4c:	719a      	strb	r2, [r3, #6]
			strcpy(p->grade,"6B+");
 8016a4e:	687b      	ldr	r3, [r7, #4]
 8016a50:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8016a54:	4a53      	ldr	r2, [pc, #332]	; (8016ba4 <problem_fetch+0x15540>)
 8016a56:	6810      	ldr	r0, [r2, #0]
 8016a58:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 8016a5a:	687b      	ldr	r3, [r7, #4]
 8016a5c:	2207      	movs	r2, #7
 8016a5e:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"H,E,G,E,I,G,I");
 8016a60:	687b      	ldr	r3, [r7, #4]
 8016a62:	33a4      	adds	r3, #164	; 0xa4
 8016a64:	4a58      	ldr	r2, [pc, #352]	; (8016bc8 <problem_fetch+0x15564>)
 8016a66:	461c      	mov	r4, r3
 8016a68:	4613      	mov	r3, r2
 8016a6a:	cb07      	ldmia	r3!, {r0, r1, r2}
 8016a6c:	6020      	str	r0, [r4, #0]
 8016a6e:	6061      	str	r1, [r4, #4]
 8016a70:	60a2      	str	r2, [r4, #8]
 8016a72:	881b      	ldrh	r3, [r3, #0]
 8016a74:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,6,9,12,14,15,18");
 8016a76:	687b      	ldr	r3, [r7, #4]
 8016a78:	3304      	adds	r3, #4
 8016a7a:	4a54      	ldr	r2, [pc, #336]	; (8016bcc <problem_fetch+0x15568>)
 8016a7c:	461d      	mov	r5, r3
 8016a7e:	4614      	mov	r4, r2
 8016a80:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8016a82:	6028      	str	r0, [r5, #0]
 8016a84:	6069      	str	r1, [r5, #4]
 8016a86:	60aa      	str	r2, [r5, #8]
 8016a88:	60eb      	str	r3, [r5, #12]
 8016a8a:	8823      	ldrh	r3, [r4, #0]
 8016a8c:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,s,d,d,d,d,e");
 8016a8e:	687b      	ldr	r3, [r7, #4]
 8016a90:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8016a94:	4a4e      	ldr	r2, [pc, #312]	; (8016bd0 <problem_fetch+0x1556c>)
 8016a96:	461c      	mov	r4, r3
 8016a98:	4613      	mov	r3, r2
 8016a9a:	cb07      	ldmia	r3!, {r0, r1, r2}
 8016a9c:	6020      	str	r0, [r4, #0]
 8016a9e:	6061      	str	r1, [r4, #4]
 8016aa0:	60a2      	str	r2, [r4, #8]
 8016aa2:	881b      	ldrh	r3, [r3, #0]
 8016aa4:	81a3      	strh	r3, [r4, #12]
			break;
 8016aa6:	f005 bd0d 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 631 :
			strcpy(p->name,"MOON SHADOW");
 8016aaa:	687b      	ldr	r3, [r7, #4]
 8016aac:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8016ab0:	4a48      	ldr	r2, [pc, #288]	; (8016bd4 <problem_fetch+0x15570>)
 8016ab2:	461c      	mov	r4, r3
 8016ab4:	4613      	mov	r3, r2
 8016ab6:	cb07      	ldmia	r3!, {r0, r1, r2}
 8016ab8:	6020      	str	r0, [r4, #0]
 8016aba:	6061      	str	r1, [r4, #4]
 8016abc:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade,"6C+");
 8016abe:	687b      	ldr	r3, [r7, #4]
 8016ac0:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8016ac4:	4a32      	ldr	r2, [pc, #200]	; (8016b90 <problem_fetch+0x1552c>)
 8016ac6:	6810      	ldr	r0, [r2, #0]
 8016ac8:	6018      	str	r0, [r3, #0]
			p->moveSize = 8;
 8016aca:	687b      	ldr	r3, [r7, #4]
 8016acc:	2208      	movs	r2, #8
 8016ace:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"C,E,C,F,I,D,G,I");
 8016ad0:	687b      	ldr	r3, [r7, #4]
 8016ad2:	33a4      	adds	r3, #164	; 0xa4
 8016ad4:	4a40      	ldr	r2, [pc, #256]	; (8016bd8 <problem_fetch+0x15574>)
 8016ad6:	461c      	mov	r4, r3
 8016ad8:	4615      	mov	r5, r2
 8016ada:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8016adc:	6020      	str	r0, [r4, #0]
 8016ade:	6061      	str	r1, [r4, #4]
 8016ae0:	60a2      	str	r2, [r4, #8]
 8016ae2:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,6,8,11,14,11,15,18");
 8016ae4:	687b      	ldr	r3, [r7, #4]
 8016ae6:	3304      	adds	r3, #4
 8016ae8:	4a3c      	ldr	r2, [pc, #240]	; (8016bdc <problem_fetch+0x15578>)
 8016aea:	461d      	mov	r5, r3
 8016aec:	4614      	mov	r4, r2
 8016aee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8016af0:	6028      	str	r0, [r5, #0]
 8016af2:	6069      	str	r1, [r5, #4]
 8016af4:	60aa      	str	r2, [r5, #8]
 8016af6:	60eb      	str	r3, [r5, #12]
 8016af8:	6820      	ldr	r0, [r4, #0]
 8016afa:	6128      	str	r0, [r5, #16]
 8016afc:	7923      	ldrb	r3, [r4, #4]
 8016afe:	752b      	strb	r3, [r5, #20]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,e");
 8016b00:	687b      	ldr	r3, [r7, #4]
 8016b02:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8016b06:	4a2e      	ldr	r2, [pc, #184]	; (8016bc0 <problem_fetch+0x1555c>)
 8016b08:	461c      	mov	r4, r3
 8016b0a:	4615      	mov	r5, r2
 8016b0c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8016b0e:	6020      	str	r0, [r4, #0]
 8016b10:	6061      	str	r1, [r4, #4]
 8016b12:	60a2      	str	r2, [r4, #8]
 8016b14:	60e3      	str	r3, [r4, #12]
			break;
 8016b16:	f005 bcd5 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 632 :
			strcpy(p->name,"DAS SCHNITZEL ALT");
 8016b1a:	687b      	ldr	r3, [r7, #4]
 8016b1c:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8016b20:	4a2f      	ldr	r2, [pc, #188]	; (8016be0 <problem_fetch+0x1557c>)
 8016b22:	461d      	mov	r5, r3
 8016b24:	4614      	mov	r4, r2
 8016b26:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8016b28:	6028      	str	r0, [r5, #0]
 8016b2a:	6069      	str	r1, [r5, #4]
 8016b2c:	60aa      	str	r2, [r5, #8]
 8016b2e:	60eb      	str	r3, [r5, #12]
 8016b30:	8823      	ldrh	r3, [r4, #0]
 8016b32:	822b      	strh	r3, [r5, #16]
			strcpy(p->grade,"7B+");
 8016b34:	687b      	ldr	r3, [r7, #4]
 8016b36:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8016b3a:	4a2a      	ldr	r2, [pc, #168]	; (8016be4 <problem_fetch+0x15580>)
 8016b3c:	6810      	ldr	r0, [r2, #0]
 8016b3e:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 8016b40:	687b      	ldr	r3, [r7, #4]
 8016b42:	2206      	movs	r2, #6
 8016b44:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,G,I,F,G,D");
 8016b46:	687b      	ldr	r3, [r7, #4]
 8016b48:	33a4      	adds	r3, #164	; 0xa4
 8016b4a:	4a27      	ldr	r2, [pc, #156]	; (8016be8 <problem_fetch+0x15584>)
 8016b4c:	461c      	mov	r4, r3
 8016b4e:	4613      	mov	r3, r2
 8016b50:	cb07      	ldmia	r3!, {r0, r1, r2}
 8016b52:	6020      	str	r0, [r4, #0]
 8016b54:	6061      	str	r1, [r4, #4]
 8016b56:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,6,9,13,14,18");
 8016b58:	687b      	ldr	r3, [r7, #4]
 8016b5a:	3304      	adds	r3, #4
 8016b5c:	4a23      	ldr	r2, [pc, #140]	; (8016bec <problem_fetch+0x15588>)
 8016b5e:	461c      	mov	r4, r3
 8016b60:	4613      	mov	r3, r2
 8016b62:	cb07      	ldmia	r3!, {r0, r1, r2}
 8016b64:	6020      	str	r0, [r4, #0]
 8016b66:	6061      	str	r1, [r4, #4]
 8016b68:	60a2      	str	r2, [r4, #8]
 8016b6a:	881a      	ldrh	r2, [r3, #0]
 8016b6c:	789b      	ldrb	r3, [r3, #2]
 8016b6e:	81a2      	strh	r2, [r4, #12]
 8016b70:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish,"s,s,d,d,d,e");
 8016b72:	687b      	ldr	r3, [r7, #4]
 8016b74:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8016b78:	4a1d      	ldr	r2, [pc, #116]	; (8016bf0 <problem_fetch+0x1558c>)
 8016b7a:	461c      	mov	r4, r3
 8016b7c:	4613      	mov	r3, r2
 8016b7e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8016b80:	6020      	str	r0, [r4, #0]
 8016b82:	6061      	str	r1, [r4, #4]
 8016b84:	60a2      	str	r2, [r4, #8]
			break;
 8016b86:	f005 bc9d 	b.w	801c4c4 <problem_fetch+0x1ae60>
 8016b8a:	bf00      	nop
 8016b8c:	0802b21c 	.word	0x0802b21c
 8016b90:	08023bbc 	.word	0x08023bbc
 8016b94:	0802b234 	.word	0x0802b234
 8016b98:	0802b240 	.word	0x0802b240
 8016b9c:	08023ff0 	.word	0x08023ff0
 8016ba0:	0802b250 	.word	0x0802b250
 8016ba4:	08023b24 	.word	0x08023b24
 8016ba8:	0802b268 	.word	0x0802b268
 8016bac:	0802b27c 	.word	0x0802b27c
 8016bb0:	08024b08 	.word	0x08024b08
 8016bb4:	0802b294 	.word	0x0802b294
 8016bb8:	0802b29c 	.word	0x0802b29c
 8016bbc:	0802b2ac 	.word	0x0802b2ac
 8016bc0:	08023c48 	.word	0x08023c48
 8016bc4:	0802b2c4 	.word	0x0802b2c4
 8016bc8:	0802b2cc 	.word	0x0802b2cc
 8016bcc:	080242f4 	.word	0x080242f4
 8016bd0:	08023b9c 	.word	0x08023b9c
 8016bd4:	0802b2dc 	.word	0x0802b2dc
 8016bd8:	0802b2e8 	.word	0x0802b2e8
 8016bdc:	0802b2f8 	.word	0x0802b2f8
 8016be0:	0802b310 	.word	0x0802b310
 8016be4:	08023c60 	.word	0x08023c60
 8016be8:	0802b324 	.word	0x0802b324
 8016bec:	0802b330 	.word	0x0802b330
 8016bf0:	08023b04 	.word	0x08023b04
		case 633 :
			strcpy(p->name,"ACG68");
 8016bf4:	687b      	ldr	r3, [r7, #4]
 8016bf6:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8016bfa:	4ac2      	ldr	r2, [pc, #776]	; (8016f04 <problem_fetch+0x158a0>)
 8016bfc:	6810      	ldr	r0, [r2, #0]
 8016bfe:	6018      	str	r0, [r3, #0]
 8016c00:	8892      	ldrh	r2, [r2, #4]
 8016c02:	809a      	strh	r2, [r3, #4]
			strcpy(p->grade,"6C+");
 8016c04:	687b      	ldr	r3, [r7, #4]
 8016c06:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8016c0a:	4abf      	ldr	r2, [pc, #764]	; (8016f08 <problem_fetch+0x158a4>)
 8016c0c:	6810      	ldr	r0, [r2, #0]
 8016c0e:	6018      	str	r0, [r3, #0]
			p->moveSize = 8;
 8016c10:	687b      	ldr	r3, [r7, #4]
 8016c12:	2208      	movs	r2, #8
 8016c14:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,G,E,F,D,B,E,A");
 8016c16:	687b      	ldr	r3, [r7, #4]
 8016c18:	33a4      	adds	r3, #164	; 0xa4
 8016c1a:	4abc      	ldr	r2, [pc, #752]	; (8016f0c <problem_fetch+0x158a8>)
 8016c1c:	461c      	mov	r4, r3
 8016c1e:	4615      	mov	r5, r2
 8016c20:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8016c22:	6020      	str	r0, [r4, #0]
 8016c24:	6061      	str	r1, [r4, #4]
 8016c26:	60a2      	str	r2, [r4, #8]
 8016c28:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,6,8,11,11,6,16,18");
 8016c2a:	687b      	ldr	r3, [r7, #4]
 8016c2c:	3304      	adds	r3, #4
 8016c2e:	4ab8      	ldr	r2, [pc, #736]	; (8016f10 <problem_fetch+0x158ac>)
 8016c30:	461d      	mov	r5, r3
 8016c32:	4614      	mov	r4, r2
 8016c34:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8016c36:	6028      	str	r0, [r5, #0]
 8016c38:	6069      	str	r1, [r5, #4]
 8016c3a:	60aa      	str	r2, [r5, #8]
 8016c3c:	60eb      	str	r3, [r5, #12]
 8016c3e:	6820      	ldr	r0, [r4, #0]
 8016c40:	6128      	str	r0, [r5, #16]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,e");
 8016c42:	687b      	ldr	r3, [r7, #4]
 8016c44:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8016c48:	4ab2      	ldr	r2, [pc, #712]	; (8016f14 <problem_fetch+0x158b0>)
 8016c4a:	461c      	mov	r4, r3
 8016c4c:	4615      	mov	r5, r2
 8016c4e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8016c50:	6020      	str	r0, [r4, #0]
 8016c52:	6061      	str	r1, [r4, #4]
 8016c54:	60a2      	str	r2, [r4, #8]
 8016c56:	60e3      	str	r3, [r4, #12]
			break;
 8016c58:	f005 bc34 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 634 :
			strcpy(p->name,"ROBERTDS#1");
 8016c5c:	687b      	ldr	r3, [r7, #4]
 8016c5e:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8016c62:	49ad      	ldr	r1, [pc, #692]	; (8016f18 <problem_fetch+0x158b4>)
 8016c64:	461a      	mov	r2, r3
 8016c66:	460b      	mov	r3, r1
 8016c68:	cb03      	ldmia	r3!, {r0, r1}
 8016c6a:	6010      	str	r0, [r2, #0]
 8016c6c:	6051      	str	r1, [r2, #4]
 8016c6e:	8819      	ldrh	r1, [r3, #0]
 8016c70:	789b      	ldrb	r3, [r3, #2]
 8016c72:	8111      	strh	r1, [r2, #8]
 8016c74:	7293      	strb	r3, [r2, #10]
			strcpy(p->grade,"6B+");
 8016c76:	687b      	ldr	r3, [r7, #4]
 8016c78:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8016c7c:	4aa7      	ldr	r2, [pc, #668]	; (8016f1c <problem_fetch+0x158b8>)
 8016c7e:	6810      	ldr	r0, [r2, #0]
 8016c80:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 8016c82:	687b      	ldr	r3, [r7, #4]
 8016c84:	2207      	movs	r2, #7
 8016c86:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"B,E,B,D,B,D,D");
 8016c88:	687b      	ldr	r3, [r7, #4]
 8016c8a:	33a4      	adds	r3, #164	; 0xa4
 8016c8c:	4aa4      	ldr	r2, [pc, #656]	; (8016f20 <problem_fetch+0x158bc>)
 8016c8e:	461c      	mov	r4, r3
 8016c90:	4613      	mov	r3, r2
 8016c92:	cb07      	ldmia	r3!, {r0, r1, r2}
 8016c94:	6020      	str	r0, [r4, #0]
 8016c96:	6061      	str	r1, [r4, #4]
 8016c98:	60a2      	str	r2, [r4, #8]
 8016c9a:	881b      	ldrh	r3, [r3, #0]
 8016c9c:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"6,8,10,11,12,15,18");
 8016c9e:	687b      	ldr	r3, [r7, #4]
 8016ca0:	3304      	adds	r3, #4
 8016ca2:	4aa0      	ldr	r2, [pc, #640]	; (8016f24 <problem_fetch+0x158c0>)
 8016ca4:	461d      	mov	r5, r3
 8016ca6:	4614      	mov	r4, r2
 8016ca8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8016caa:	6028      	str	r0, [r5, #0]
 8016cac:	6069      	str	r1, [r5, #4]
 8016cae:	60aa      	str	r2, [r5, #8]
 8016cb0:	60eb      	str	r3, [r5, #12]
 8016cb2:	8823      	ldrh	r3, [r4, #0]
 8016cb4:	78a2      	ldrb	r2, [r4, #2]
 8016cb6:	822b      	strh	r3, [r5, #16]
 8016cb8:	4613      	mov	r3, r2
 8016cba:	74ab      	strb	r3, [r5, #18]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 8016cbc:	687b      	ldr	r3, [r7, #4]
 8016cbe:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8016cc2:	4a99      	ldr	r2, [pc, #612]	; (8016f28 <problem_fetch+0x158c4>)
 8016cc4:	461c      	mov	r4, r3
 8016cc6:	4613      	mov	r3, r2
 8016cc8:	cb07      	ldmia	r3!, {r0, r1, r2}
 8016cca:	6020      	str	r0, [r4, #0]
 8016ccc:	6061      	str	r1, [r4, #4]
 8016cce:	60a2      	str	r2, [r4, #8]
 8016cd0:	881b      	ldrh	r3, [r3, #0]
 8016cd2:	81a3      	strh	r3, [r4, #12]
			break;
 8016cd4:	f005 bbf6 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 635 :
			strcpy(p->name,"DEATH EATER");
 8016cd8:	687b      	ldr	r3, [r7, #4]
 8016cda:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8016cde:	4a93      	ldr	r2, [pc, #588]	; (8016f2c <problem_fetch+0x158c8>)
 8016ce0:	461c      	mov	r4, r3
 8016ce2:	4613      	mov	r3, r2
 8016ce4:	cb07      	ldmia	r3!, {r0, r1, r2}
 8016ce6:	6020      	str	r0, [r4, #0]
 8016ce8:	6061      	str	r1, [r4, #4]
 8016cea:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade,"6B+");
 8016cec:	687b      	ldr	r3, [r7, #4]
 8016cee:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8016cf2:	4a8a      	ldr	r2, [pc, #552]	; (8016f1c <problem_fetch+0x158b8>)
 8016cf4:	6810      	ldr	r0, [r2, #0]
 8016cf6:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 8016cf8:	687b      	ldr	r3, [r7, #4]
 8016cfa:	2207      	movs	r2, #7
 8016cfc:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,E,H,I,J,G,I");
 8016cfe:	687b      	ldr	r3, [r7, #4]
 8016d00:	33a4      	adds	r3, #164	; 0xa4
 8016d02:	4a8b      	ldr	r2, [pc, #556]	; (8016f30 <problem_fetch+0x158cc>)
 8016d04:	461c      	mov	r4, r3
 8016d06:	4613      	mov	r3, r2
 8016d08:	cb07      	ldmia	r3!, {r0, r1, r2}
 8016d0a:	6020      	str	r0, [r4, #0]
 8016d0c:	6061      	str	r1, [r4, #4]
 8016d0e:	60a2      	str	r2, [r4, #8]
 8016d10:	881b      	ldrh	r3, [r3, #0]
 8016d12:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,6,8,10,13,15,18");
 8016d14:	687b      	ldr	r3, [r7, #4]
 8016d16:	3304      	adds	r3, #4
 8016d18:	4a86      	ldr	r2, [pc, #536]	; (8016f34 <problem_fetch+0x158d0>)
 8016d1a:	461d      	mov	r5, r3
 8016d1c:	4614      	mov	r4, r2
 8016d1e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8016d20:	6028      	str	r0, [r5, #0]
 8016d22:	6069      	str	r1, [r5, #4]
 8016d24:	60aa      	str	r2, [r5, #8]
 8016d26:	60eb      	str	r3, [r5, #12]
 8016d28:	8823      	ldrh	r3, [r4, #0]
 8016d2a:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,s,d,d,d,d,e");
 8016d2c:	687b      	ldr	r3, [r7, #4]
 8016d2e:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8016d32:	4a81      	ldr	r2, [pc, #516]	; (8016f38 <problem_fetch+0x158d4>)
 8016d34:	461c      	mov	r4, r3
 8016d36:	4613      	mov	r3, r2
 8016d38:	cb07      	ldmia	r3!, {r0, r1, r2}
 8016d3a:	6020      	str	r0, [r4, #0]
 8016d3c:	6061      	str	r1, [r4, #4]
 8016d3e:	60a2      	str	r2, [r4, #8]
 8016d40:	881b      	ldrh	r3, [r3, #0]
 8016d42:	81a3      	strh	r3, [r4, #12]
			break;
 8016d44:	f005 bbbe 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 636 :
			strcpy(p->name,"VISUALIZZA STOC......");
 8016d48:	687b      	ldr	r3, [r7, #4]
 8016d4a:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8016d4e:	4a7b      	ldr	r2, [pc, #492]	; (8016f3c <problem_fetch+0x158d8>)
 8016d50:	461d      	mov	r5, r3
 8016d52:	4614      	mov	r4, r2
 8016d54:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8016d56:	6028      	str	r0, [r5, #0]
 8016d58:	6069      	str	r1, [r5, #4]
 8016d5a:	60aa      	str	r2, [r5, #8]
 8016d5c:	60eb      	str	r3, [r5, #12]
 8016d5e:	6820      	ldr	r0, [r4, #0]
 8016d60:	6128      	str	r0, [r5, #16]
 8016d62:	88a3      	ldrh	r3, [r4, #4]
 8016d64:	82ab      	strh	r3, [r5, #20]
			strcpy(p->grade,"7B");
 8016d66:	687b      	ldr	r3, [r7, #4]
 8016d68:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8016d6c:	4a74      	ldr	r2, [pc, #464]	; (8016f40 <problem_fetch+0x158dc>)
 8016d6e:	8811      	ldrh	r1, [r2, #0]
 8016d70:	7892      	ldrb	r2, [r2, #2]
 8016d72:	8019      	strh	r1, [r3, #0]
 8016d74:	709a      	strb	r2, [r3, #2]
			p->moveSize = 6;
 8016d76:	687b      	ldr	r3, [r7, #4]
 8016d78:	2206      	movs	r2, #6
 8016d7a:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,H,E,H,F,I");
 8016d7c:	687b      	ldr	r3, [r7, #4]
 8016d7e:	33a4      	adds	r3, #164	; 0xa4
 8016d80:	4a70      	ldr	r2, [pc, #448]	; (8016f44 <problem_fetch+0x158e0>)
 8016d82:	461c      	mov	r4, r3
 8016d84:	4613      	mov	r3, r2
 8016d86:	cb07      	ldmia	r3!, {r0, r1, r2}
 8016d88:	6020      	str	r0, [r4, #0]
 8016d8a:	6061      	str	r1, [r4, #4]
 8016d8c:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,8,9,12,13,18");
 8016d8e:	687b      	ldr	r3, [r7, #4]
 8016d90:	3304      	adds	r3, #4
 8016d92:	4a6d      	ldr	r2, [pc, #436]	; (8016f48 <problem_fetch+0x158e4>)
 8016d94:	461c      	mov	r4, r3
 8016d96:	4613      	mov	r3, r2
 8016d98:	cb07      	ldmia	r3!, {r0, r1, r2}
 8016d9a:	6020      	str	r0, [r4, #0]
 8016d9c:	6061      	str	r1, [r4, #4]
 8016d9e:	60a2      	str	r2, [r4, #8]
 8016da0:	881a      	ldrh	r2, [r3, #0]
 8016da2:	789b      	ldrb	r3, [r3, #2]
 8016da4:	81a2      	strh	r2, [r4, #12]
 8016da6:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 8016da8:	687b      	ldr	r3, [r7, #4]
 8016daa:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8016dae:	4a67      	ldr	r2, [pc, #412]	; (8016f4c <problem_fetch+0x158e8>)
 8016db0:	461c      	mov	r4, r3
 8016db2:	4613      	mov	r3, r2
 8016db4:	cb07      	ldmia	r3!, {r0, r1, r2}
 8016db6:	6020      	str	r0, [r4, #0]
 8016db8:	6061      	str	r1, [r4, #4]
 8016dba:	60a2      	str	r2, [r4, #8]
			break;
 8016dbc:	f005 bb82 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 637 :
			strcpy(p->name,"SHRINE1");
 8016dc0:	687b      	ldr	r3, [r7, #4]
 8016dc2:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8016dc6:	4962      	ldr	r1, [pc, #392]	; (8016f50 <problem_fetch+0x158ec>)
 8016dc8:	461a      	mov	r2, r3
 8016dca:	460b      	mov	r3, r1
 8016dcc:	cb03      	ldmia	r3!, {r0, r1}
 8016dce:	6010      	str	r0, [r2, #0]
 8016dd0:	6051      	str	r1, [r2, #4]
			strcpy(p->grade,"7B+");
 8016dd2:	687b      	ldr	r3, [r7, #4]
 8016dd4:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8016dd8:	4a5e      	ldr	r2, [pc, #376]	; (8016f54 <problem_fetch+0x158f0>)
 8016dda:	6810      	ldr	r0, [r2, #0]
 8016ddc:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 8016dde:	687b      	ldr	r3, [r7, #4]
 8016de0:	2206      	movs	r2, #6
 8016de2:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"C,C,F,F,J,I");
 8016de4:	687b      	ldr	r3, [r7, #4]
 8016de6:	33a4      	adds	r3, #164	; 0xa4
 8016de8:	4a5b      	ldr	r2, [pc, #364]	; (8016f58 <problem_fetch+0x158f4>)
 8016dea:	461c      	mov	r4, r3
 8016dec:	4613      	mov	r3, r2
 8016dee:	cb07      	ldmia	r3!, {r0, r1, r2}
 8016df0:	6020      	str	r0, [r4, #0]
 8016df2:	6061      	str	r1, [r4, #4]
 8016df4:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,8,11,13,16,18");
 8016df6:	687b      	ldr	r3, [r7, #4]
 8016df8:	3304      	adds	r3, #4
 8016dfa:	4a58      	ldr	r2, [pc, #352]	; (8016f5c <problem_fetch+0x158f8>)
 8016dfc:	461c      	mov	r4, r3
 8016dfe:	4615      	mov	r5, r2
 8016e00:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8016e02:	6020      	str	r0, [r4, #0]
 8016e04:	6061      	str	r1, [r4, #4]
 8016e06:	60a2      	str	r2, [r4, #8]
 8016e08:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 8016e0a:	687b      	ldr	r3, [r7, #4]
 8016e0c:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8016e10:	4a4e      	ldr	r2, [pc, #312]	; (8016f4c <problem_fetch+0x158e8>)
 8016e12:	461c      	mov	r4, r3
 8016e14:	4613      	mov	r3, r2
 8016e16:	cb07      	ldmia	r3!, {r0, r1, r2}
 8016e18:	6020      	str	r0, [r4, #0]
 8016e1a:	6061      	str	r1, [r4, #4]
 8016e1c:	60a2      	str	r2, [r4, #8]
			break;
 8016e1e:	f005 bb51 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 638 :
			strcpy(p->name,"SQUINCHER");
 8016e22:	687b      	ldr	r3, [r7, #4]
 8016e24:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8016e28:	494d      	ldr	r1, [pc, #308]	; (8016f60 <problem_fetch+0x158fc>)
 8016e2a:	461a      	mov	r2, r3
 8016e2c:	460b      	mov	r3, r1
 8016e2e:	cb03      	ldmia	r3!, {r0, r1}
 8016e30:	6010      	str	r0, [r2, #0]
 8016e32:	6051      	str	r1, [r2, #4]
 8016e34:	881b      	ldrh	r3, [r3, #0]
 8016e36:	8113      	strh	r3, [r2, #8]
			strcpy(p->grade,"6B+");
 8016e38:	687b      	ldr	r3, [r7, #4]
 8016e3a:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8016e3e:	4a37      	ldr	r2, [pc, #220]	; (8016f1c <problem_fetch+0x158b8>)
 8016e40:	6810      	ldr	r0, [r2, #0]
 8016e42:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 8016e44:	687b      	ldr	r3, [r7, #4]
 8016e46:	2207      	movs	r2, #7
 8016e48:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,H,G,F,C,D,D");
 8016e4a:	687b      	ldr	r3, [r7, #4]
 8016e4c:	33a4      	adds	r3, #164	; 0xa4
 8016e4e:	4a45      	ldr	r2, [pc, #276]	; (8016f64 <problem_fetch+0x15900>)
 8016e50:	461c      	mov	r4, r3
 8016e52:	4613      	mov	r3, r2
 8016e54:	cb07      	ldmia	r3!, {r0, r1, r2}
 8016e56:	6020      	str	r0, [r4, #0]
 8016e58:	6061      	str	r1, [r4, #4]
 8016e5a:	60a2      	str	r2, [r4, #8]
 8016e5c:	881b      	ldrh	r3, [r3, #0]
 8016e5e:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,8,9,11,13,15,18");
 8016e60:	687b      	ldr	r3, [r7, #4]
 8016e62:	3304      	adds	r3, #4
 8016e64:	4a40      	ldr	r2, [pc, #256]	; (8016f68 <problem_fetch+0x15904>)
 8016e66:	461d      	mov	r5, r3
 8016e68:	4614      	mov	r4, r2
 8016e6a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8016e6c:	6028      	str	r0, [r5, #0]
 8016e6e:	6069      	str	r1, [r5, #4]
 8016e70:	60aa      	str	r2, [r5, #8]
 8016e72:	60eb      	str	r3, [r5, #12]
 8016e74:	8823      	ldrh	r3, [r4, #0]
 8016e76:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 8016e78:	687b      	ldr	r3, [r7, #4]
 8016e7a:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8016e7e:	4a2a      	ldr	r2, [pc, #168]	; (8016f28 <problem_fetch+0x158c4>)
 8016e80:	461c      	mov	r4, r3
 8016e82:	4613      	mov	r3, r2
 8016e84:	cb07      	ldmia	r3!, {r0, r1, r2}
 8016e86:	6020      	str	r0, [r4, #0]
 8016e88:	6061      	str	r1, [r4, #4]
 8016e8a:	60a2      	str	r2, [r4, #8]
 8016e8c:	881b      	ldrh	r3, [r3, #0]
 8016e8e:	81a3      	strh	r3, [r4, #12]
			break;
 8016e90:	f005 bb18 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 639 :
			strcpy(p->name,"ACG6 PLUS");
 8016e94:	687b      	ldr	r3, [r7, #4]
 8016e96:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8016e9a:	4934      	ldr	r1, [pc, #208]	; (8016f6c <problem_fetch+0x15908>)
 8016e9c:	461a      	mov	r2, r3
 8016e9e:	460b      	mov	r3, r1
 8016ea0:	cb03      	ldmia	r3!, {r0, r1}
 8016ea2:	6010      	str	r0, [r2, #0]
 8016ea4:	6051      	str	r1, [r2, #4]
 8016ea6:	881b      	ldrh	r3, [r3, #0]
 8016ea8:	8113      	strh	r3, [r2, #8]
			strcpy(p->grade,"7A");
 8016eaa:	687b      	ldr	r3, [r7, #4]
 8016eac:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8016eb0:	4a2f      	ldr	r2, [pc, #188]	; (8016f70 <problem_fetch+0x1590c>)
 8016eb2:	8811      	ldrh	r1, [r2, #0]
 8016eb4:	7892      	ldrb	r2, [r2, #2]
 8016eb6:	8019      	strh	r1, [r3, #0]
 8016eb8:	709a      	strb	r2, [r3, #2]
			p->moveSize = 6;
 8016eba:	687b      	ldr	r3, [r7, #4]
 8016ebc:	2206      	movs	r2, #6
 8016ebe:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,H,C,E,C,I");
 8016ec0:	687b      	ldr	r3, [r7, #4]
 8016ec2:	33a4      	adds	r3, #164	; 0xa4
 8016ec4:	4a2b      	ldr	r2, [pc, #172]	; (8016f74 <problem_fetch+0x15910>)
 8016ec6:	461c      	mov	r4, r3
 8016ec8:	4613      	mov	r3, r2
 8016eca:	cb07      	ldmia	r3!, {r0, r1, r2}
 8016ecc:	6020      	str	r0, [r4, #0]
 8016ece:	6061      	str	r1, [r4, #4]
 8016ed0:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,10,13,16,16,18");
 8016ed2:	687b      	ldr	r3, [r7, #4]
 8016ed4:	3304      	adds	r3, #4
 8016ed6:	4a28      	ldr	r2, [pc, #160]	; (8016f78 <problem_fetch+0x15914>)
 8016ed8:	461d      	mov	r5, r3
 8016eda:	4614      	mov	r4, r2
 8016edc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8016ede:	6028      	str	r0, [r5, #0]
 8016ee0:	6069      	str	r1, [r5, #4]
 8016ee2:	60aa      	str	r2, [r5, #8]
 8016ee4:	60eb      	str	r3, [r5, #12]
 8016ee6:	7823      	ldrb	r3, [r4, #0]
 8016ee8:	742b      	strb	r3, [r5, #16]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 8016eea:	687b      	ldr	r3, [r7, #4]
 8016eec:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8016ef0:	4a16      	ldr	r2, [pc, #88]	; (8016f4c <problem_fetch+0x158e8>)
 8016ef2:	461c      	mov	r4, r3
 8016ef4:	4613      	mov	r3, r2
 8016ef6:	cb07      	ldmia	r3!, {r0, r1, r2}
 8016ef8:	6020      	str	r0, [r4, #0]
 8016efa:	6061      	str	r1, [r4, #4]
 8016efc:	60a2      	str	r2, [r4, #8]
			break;
 8016efe:	f005 bae1 	b.w	801c4c4 <problem_fetch+0x1ae60>
 8016f02:	bf00      	nop
 8016f04:	0802b340 	.word	0x0802b340
 8016f08:	08023bbc 	.word	0x08023bbc
 8016f0c:	0802b348 	.word	0x0802b348
 8016f10:	0802b358 	.word	0x0802b358
 8016f14:	08023c48 	.word	0x08023c48
 8016f18:	0802b36c 	.word	0x0802b36c
 8016f1c:	08023b24 	.word	0x08023b24
 8016f20:	0802b378 	.word	0x0802b378
 8016f24:	0802b388 	.word	0x0802b388
 8016f28:	08023cac 	.word	0x08023cac
 8016f2c:	0802b39c 	.word	0x0802b39c
 8016f30:	0802b3a8 	.word	0x0802b3a8
 8016f34:	0802b3b8 	.word	0x0802b3b8
 8016f38:	08023b9c 	.word	0x08023b9c
 8016f3c:	0802b3cc 	.word	0x0802b3cc
 8016f40:	0802421c 	.word	0x0802421c
 8016f44:	0802b3e4 	.word	0x0802b3e4
 8016f48:	08027f60 	.word	0x08027f60
 8016f4c:	08023ec0 	.word	0x08023ec0
 8016f50:	0802b3f0 	.word	0x0802b3f0
 8016f54:	08023c60 	.word	0x08023c60
 8016f58:	0802b3f8 	.word	0x0802b3f8
 8016f5c:	0802b404 	.word	0x0802b404
 8016f60:	0802b414 	.word	0x0802b414
 8016f64:	0802b420 	.word	0x0802b420
 8016f68:	0802b430 	.word	0x0802b430
 8016f6c:	0802b444 	.word	0x0802b444
 8016f70:	08023ae4 	.word	0x08023ae4
 8016f74:	0802b450 	.word	0x0802b450
 8016f78:	0802b45c 	.word	0x0802b45c
		case 640 :
			strcpy(p->name,"ROCKET");
 8016f7c:	687b      	ldr	r3, [r7, #4]
 8016f7e:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8016f82:	4aba      	ldr	r2, [pc, #744]	; (801726c <problem_fetch+0x15c08>)
 8016f84:	6810      	ldr	r0, [r2, #0]
 8016f86:	6018      	str	r0, [r3, #0]
 8016f88:	8891      	ldrh	r1, [r2, #4]
 8016f8a:	7992      	ldrb	r2, [r2, #6]
 8016f8c:	8099      	strh	r1, [r3, #4]
 8016f8e:	719a      	strb	r2, [r3, #6]
			strcpy(p->grade,"7A");
 8016f90:	687b      	ldr	r3, [r7, #4]
 8016f92:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8016f96:	4ab6      	ldr	r2, [pc, #728]	; (8017270 <problem_fetch+0x15c0c>)
 8016f98:	8811      	ldrh	r1, [r2, #0]
 8016f9a:	7892      	ldrb	r2, [r2, #2]
 8016f9c:	8019      	strh	r1, [r3, #0]
 8016f9e:	709a      	strb	r2, [r3, #2]
			p->moveSize = 5;
 8016fa0:	687b      	ldr	r3, [r7, #4]
 8016fa2:	2205      	movs	r2, #5
 8016fa4:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"B,E,H,F,I");
 8016fa6:	687b      	ldr	r3, [r7, #4]
 8016fa8:	33a4      	adds	r3, #164	; 0xa4
 8016faa:	49b2      	ldr	r1, [pc, #712]	; (8017274 <problem_fetch+0x15c10>)
 8016fac:	461a      	mov	r2, r3
 8016fae:	460b      	mov	r3, r1
 8016fb0:	cb03      	ldmia	r3!, {r0, r1}
 8016fb2:	6010      	str	r0, [r2, #0]
 8016fb4:	6051      	str	r1, [r2, #4]
 8016fb6:	881b      	ldrh	r3, [r3, #0]
 8016fb8:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"6,6,10,13,18");
 8016fba:	687b      	ldr	r3, [r7, #4]
 8016fbc:	3304      	adds	r3, #4
 8016fbe:	4aae      	ldr	r2, [pc, #696]	; (8017278 <problem_fetch+0x15c14>)
 8016fc0:	461c      	mov	r4, r3
 8016fc2:	4613      	mov	r3, r2
 8016fc4:	cb07      	ldmia	r3!, {r0, r1, r2}
 8016fc6:	6020      	str	r0, [r4, #0]
 8016fc8:	6061      	str	r1, [r4, #4]
 8016fca:	60a2      	str	r2, [r4, #8]
 8016fcc:	781b      	ldrb	r3, [r3, #0]
 8016fce:	7323      	strb	r3, [r4, #12]
			strcpy(p->startFinish,"s,s,d,d,e");
 8016fd0:	687b      	ldr	r3, [r7, #4]
 8016fd2:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8016fd6:	49a9      	ldr	r1, [pc, #676]	; (801727c <problem_fetch+0x15c18>)
 8016fd8:	461a      	mov	r2, r3
 8016fda:	460b      	mov	r3, r1
 8016fdc:	cb03      	ldmia	r3!, {r0, r1}
 8016fde:	6010      	str	r0, [r2, #0]
 8016fe0:	6051      	str	r1, [r2, #4]
 8016fe2:	881b      	ldrh	r3, [r3, #0]
 8016fe4:	8113      	strh	r3, [r2, #8]
			break;
 8016fe6:	f005 ba6d 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 641 :
			strcpy(p->name,"GAMBERO");
 8016fea:	687b      	ldr	r3, [r7, #4]
 8016fec:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8016ff0:	49a3      	ldr	r1, [pc, #652]	; (8017280 <problem_fetch+0x15c1c>)
 8016ff2:	461a      	mov	r2, r3
 8016ff4:	460b      	mov	r3, r1
 8016ff6:	cb03      	ldmia	r3!, {r0, r1}
 8016ff8:	6010      	str	r0, [r2, #0]
 8016ffa:	6051      	str	r1, [r2, #4]
			strcpy(p->grade,"7C");
 8016ffc:	687b      	ldr	r3, [r7, #4]
 8016ffe:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8017002:	4aa0      	ldr	r2, [pc, #640]	; (8017284 <problem_fetch+0x15c20>)
 8017004:	8811      	ldrh	r1, [r2, #0]
 8017006:	7892      	ldrb	r2, [r2, #2]
 8017008:	8019      	strh	r1, [r3, #0]
 801700a:	709a      	strb	r2, [r3, #2]
			p->moveSize = 6;
 801700c:	687b      	ldr	r3, [r7, #4]
 801700e:	2206      	movs	r2, #6
 8017010:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,G,E,B,E,A");
 8017012:	687b      	ldr	r3, [r7, #4]
 8017014:	33a4      	adds	r3, #164	; 0xa4
 8017016:	4a9c      	ldr	r2, [pc, #624]	; (8017288 <problem_fetch+0x15c24>)
 8017018:	461c      	mov	r4, r3
 801701a:	4613      	mov	r3, r2
 801701c:	cb07      	ldmia	r3!, {r0, r1, r2}
 801701e:	6020      	str	r0, [r4, #0]
 8017020:	6061      	str	r1, [r4, #4]
 8017022:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,6,9,12,14,18");
 8017024:	687b      	ldr	r3, [r7, #4]
 8017026:	3304      	adds	r3, #4
 8017028:	4a98      	ldr	r2, [pc, #608]	; (801728c <problem_fetch+0x15c28>)
 801702a:	461c      	mov	r4, r3
 801702c:	4613      	mov	r3, r2
 801702e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8017030:	6020      	str	r0, [r4, #0]
 8017032:	6061      	str	r1, [r4, #4]
 8017034:	60a2      	str	r2, [r4, #8]
 8017036:	881a      	ldrh	r2, [r3, #0]
 8017038:	789b      	ldrb	r3, [r3, #2]
 801703a:	81a2      	strh	r2, [r4, #12]
 801703c:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 801703e:	687b      	ldr	r3, [r7, #4]
 8017040:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8017044:	4a92      	ldr	r2, [pc, #584]	; (8017290 <problem_fetch+0x15c2c>)
 8017046:	461c      	mov	r4, r3
 8017048:	4613      	mov	r3, r2
 801704a:	cb07      	ldmia	r3!, {r0, r1, r2}
 801704c:	6020      	str	r0, [r4, #0]
 801704e:	6061      	str	r1, [r4, #4]
 8017050:	60a2      	str	r2, [r4, #8]
			break;
 8017052:	f005 ba37 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 642 :
			strcpy(p->name,"FIRST WORLD PROBLEM");
 8017056:	687b      	ldr	r3, [r7, #4]
 8017058:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801705c:	4a8d      	ldr	r2, [pc, #564]	; (8017294 <problem_fetch+0x15c30>)
 801705e:	461d      	mov	r5, r3
 8017060:	4614      	mov	r4, r2
 8017062:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8017064:	6028      	str	r0, [r5, #0]
 8017066:	6069      	str	r1, [r5, #4]
 8017068:	60aa      	str	r2, [r5, #8]
 801706a:	60eb      	str	r3, [r5, #12]
 801706c:	6820      	ldr	r0, [r4, #0]
 801706e:	6128      	str	r0, [r5, #16]
			strcpy(p->grade,"6C+");
 8017070:	687b      	ldr	r3, [r7, #4]
 8017072:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8017076:	4a88      	ldr	r2, [pc, #544]	; (8017298 <problem_fetch+0x15c34>)
 8017078:	6810      	ldr	r0, [r2, #0]
 801707a:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 801707c:	687b      	ldr	r3, [r7, #4]
 801707e:	2206      	movs	r2, #6
 8017080:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"E,E,C,E,C,D");
 8017082:	687b      	ldr	r3, [r7, #4]
 8017084:	33a4      	adds	r3, #164	; 0xa4
 8017086:	4a85      	ldr	r2, [pc, #532]	; (801729c <problem_fetch+0x15c38>)
 8017088:	461c      	mov	r4, r3
 801708a:	4613      	mov	r3, r2
 801708c:	cb07      	ldmia	r3!, {r0, r1, r2}
 801708e:	6020      	str	r0, [r4, #0]
 8017090:	6061      	str	r1, [r4, #4]
 8017092:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"6,9,8,14,13,18");
 8017094:	687b      	ldr	r3, [r7, #4]
 8017096:	3304      	adds	r3, #4
 8017098:	4a81      	ldr	r2, [pc, #516]	; (80172a0 <problem_fetch+0x15c3c>)
 801709a:	461c      	mov	r4, r3
 801709c:	4613      	mov	r3, r2
 801709e:	cb07      	ldmia	r3!, {r0, r1, r2}
 80170a0:	6020      	str	r0, [r4, #0]
 80170a2:	6061      	str	r1, [r4, #4]
 80170a4:	60a2      	str	r2, [r4, #8]
 80170a6:	881a      	ldrh	r2, [r3, #0]
 80170a8:	789b      	ldrb	r3, [r3, #2]
 80170aa:	81a2      	strh	r2, [r4, #12]
 80170ac:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 80170ae:	687b      	ldr	r3, [r7, #4]
 80170b0:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 80170b4:	4a76      	ldr	r2, [pc, #472]	; (8017290 <problem_fetch+0x15c2c>)
 80170b6:	461c      	mov	r4, r3
 80170b8:	4613      	mov	r3, r2
 80170ba:	cb07      	ldmia	r3!, {r0, r1, r2}
 80170bc:	6020      	str	r0, [r4, #0]
 80170be:	6061      	str	r1, [r4, #4]
 80170c0:	60a2      	str	r2, [r4, #8]
			break;
 80170c2:	f005 b9ff 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 643 :
			strcpy(p->name,"POCKETLAND 2");
 80170c6:	687b      	ldr	r3, [r7, #4]
 80170c8:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80170cc:	4a75      	ldr	r2, [pc, #468]	; (80172a4 <problem_fetch+0x15c40>)
 80170ce:	461c      	mov	r4, r3
 80170d0:	4613      	mov	r3, r2
 80170d2:	cb07      	ldmia	r3!, {r0, r1, r2}
 80170d4:	6020      	str	r0, [r4, #0]
 80170d6:	6061      	str	r1, [r4, #4]
 80170d8:	60a2      	str	r2, [r4, #8]
 80170da:	781b      	ldrb	r3, [r3, #0]
 80170dc:	7323      	strb	r3, [r4, #12]
			strcpy(p->grade,"7C");
 80170de:	687b      	ldr	r3, [r7, #4]
 80170e0:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80170e4:	4a67      	ldr	r2, [pc, #412]	; (8017284 <problem_fetch+0x15c20>)
 80170e6:	8811      	ldrh	r1, [r2, #0]
 80170e8:	7892      	ldrb	r2, [r2, #2]
 80170ea:	8019      	strh	r1, [r3, #0]
 80170ec:	709a      	strb	r2, [r3, #2]
			p->moveSize = 6;
 80170ee:	687b      	ldr	r3, [r7, #4]
 80170f0:	2206      	movs	r2, #6
 80170f2:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"H,D,G,H,E,I");
 80170f4:	687b      	ldr	r3, [r7, #4]
 80170f6:	33a4      	adds	r3, #164	; 0xa4
 80170f8:	4a6b      	ldr	r2, [pc, #428]	; (80172a8 <problem_fetch+0x15c44>)
 80170fa:	461c      	mov	r4, r3
 80170fc:	4613      	mov	r3, r2
 80170fe:	cb07      	ldmia	r3!, {r0, r1, r2}
 8017100:	6020      	str	r0, [r4, #0]
 8017102:	6061      	str	r1, [r4, #4]
 8017104:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,7,10,13,16,18");
 8017106:	687b      	ldr	r3, [r7, #4]
 8017108:	3304      	adds	r3, #4
 801710a:	4a68      	ldr	r2, [pc, #416]	; (80172ac <problem_fetch+0x15c48>)
 801710c:	461c      	mov	r4, r3
 801710e:	4615      	mov	r5, r2
 8017110:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8017112:	6020      	str	r0, [r4, #0]
 8017114:	6061      	str	r1, [r4, #4]
 8017116:	60a2      	str	r2, [r4, #8]
 8017118:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 801711a:	687b      	ldr	r3, [r7, #4]
 801711c:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8017120:	4a5b      	ldr	r2, [pc, #364]	; (8017290 <problem_fetch+0x15c2c>)
 8017122:	461c      	mov	r4, r3
 8017124:	4613      	mov	r3, r2
 8017126:	cb07      	ldmia	r3!, {r0, r1, r2}
 8017128:	6020      	str	r0, [r4, #0]
 801712a:	6061      	str	r1, [r4, #4]
 801712c:	60a2      	str	r2, [r4, #8]
			break;
 801712e:	f005 b9c9 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 644 :
			strcpy(p->name,"POCKETLAND");
 8017132:	687b      	ldr	r3, [r7, #4]
 8017134:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8017138:	495d      	ldr	r1, [pc, #372]	; (80172b0 <problem_fetch+0x15c4c>)
 801713a:	461a      	mov	r2, r3
 801713c:	460b      	mov	r3, r1
 801713e:	cb03      	ldmia	r3!, {r0, r1}
 8017140:	6010      	str	r0, [r2, #0]
 8017142:	6051      	str	r1, [r2, #4]
 8017144:	8819      	ldrh	r1, [r3, #0]
 8017146:	789b      	ldrb	r3, [r3, #2]
 8017148:	8111      	strh	r1, [r2, #8]
 801714a:	7293      	strb	r3, [r2, #10]
			strcpy(p->grade,"7B");
 801714c:	687b      	ldr	r3, [r7, #4]
 801714e:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8017152:	4a58      	ldr	r2, [pc, #352]	; (80172b4 <problem_fetch+0x15c50>)
 8017154:	8811      	ldrh	r1, [r2, #0]
 8017156:	7892      	ldrb	r2, [r2, #2]
 8017158:	8019      	strh	r1, [r3, #0]
 801715a:	709a      	strb	r2, [r3, #2]
			p->moveSize = 6;
 801715c:	687b      	ldr	r3, [r7, #4]
 801715e:	2206      	movs	r2, #6
 8017160:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,D,G,G,G,A");
 8017162:	687b      	ldr	r3, [r7, #4]
 8017164:	33a4      	adds	r3, #164	; 0xa4
 8017166:	4a54      	ldr	r2, [pc, #336]	; (80172b8 <problem_fetch+0x15c54>)
 8017168:	461c      	mov	r4, r3
 801716a:	4613      	mov	r3, r2
 801716c:	cb07      	ldmia	r3!, {r0, r1, r2}
 801716e:	6020      	str	r0, [r4, #0]
 8017170:	6061      	str	r1, [r4, #4]
 8017172:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,7,10,14,17,18");
 8017174:	687b      	ldr	r3, [r7, #4]
 8017176:	3304      	adds	r3, #4
 8017178:	4a50      	ldr	r2, [pc, #320]	; (80172bc <problem_fetch+0x15c58>)
 801717a:	461c      	mov	r4, r3
 801717c:	4615      	mov	r5, r2
 801717e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8017180:	6020      	str	r0, [r4, #0]
 8017182:	6061      	str	r1, [r4, #4]
 8017184:	60a2      	str	r2, [r4, #8]
 8017186:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 8017188:	687b      	ldr	r3, [r7, #4]
 801718a:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 801718e:	4a40      	ldr	r2, [pc, #256]	; (8017290 <problem_fetch+0x15c2c>)
 8017190:	461c      	mov	r4, r3
 8017192:	4613      	mov	r3, r2
 8017194:	cb07      	ldmia	r3!, {r0, r1, r2}
 8017196:	6020      	str	r0, [r4, #0]
 8017198:	6061      	str	r1, [r4, #4]
 801719a:	60a2      	str	r2, [r4, #8]
			break;
 801719c:	f005 b992 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 645 :
			strcpy(p->name,"WLF46");
 80171a0:	687b      	ldr	r3, [r7, #4]
 80171a2:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80171a6:	4a46      	ldr	r2, [pc, #280]	; (80172c0 <problem_fetch+0x15c5c>)
 80171a8:	6810      	ldr	r0, [r2, #0]
 80171aa:	6018      	str	r0, [r3, #0]
 80171ac:	8892      	ldrh	r2, [r2, #4]
 80171ae:	809a      	strh	r2, [r3, #4]
			strcpy(p->grade,"7A");
 80171b0:	687b      	ldr	r3, [r7, #4]
 80171b2:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80171b6:	4a2e      	ldr	r2, [pc, #184]	; (8017270 <problem_fetch+0x15c0c>)
 80171b8:	8811      	ldrh	r1, [r2, #0]
 80171ba:	7892      	ldrb	r2, [r2, #2]
 80171bc:	8019      	strh	r1, [r3, #0]
 80171be:	709a      	strb	r2, [r3, #2]
			p->moveSize = 6;
 80171c0:	687b      	ldr	r3, [r7, #4]
 80171c2:	2206      	movs	r2, #6
 80171c4:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,J,I,H,G,I");
 80171c6:	687b      	ldr	r3, [r7, #4]
 80171c8:	33a4      	adds	r3, #164	; 0xa4
 80171ca:	4a3e      	ldr	r2, [pc, #248]	; (80172c4 <problem_fetch+0x15c60>)
 80171cc:	461c      	mov	r4, r3
 80171ce:	4613      	mov	r3, r2
 80171d0:	cb07      	ldmia	r3!, {r0, r1, r2}
 80171d2:	6020      	str	r0, [r4, #0]
 80171d4:	6061      	str	r1, [r4, #4]
 80171d6:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,7,10,13,17,18");
 80171d8:	687b      	ldr	r3, [r7, #4]
 80171da:	3304      	adds	r3, #4
 80171dc:	4a3a      	ldr	r2, [pc, #232]	; (80172c8 <problem_fetch+0x15c64>)
 80171de:	461c      	mov	r4, r3
 80171e0:	4615      	mov	r5, r2
 80171e2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80171e4:	6020      	str	r0, [r4, #0]
 80171e6:	6061      	str	r1, [r4, #4]
 80171e8:	60a2      	str	r2, [r4, #8]
 80171ea:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 80171ec:	687b      	ldr	r3, [r7, #4]
 80171ee:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 80171f2:	4a27      	ldr	r2, [pc, #156]	; (8017290 <problem_fetch+0x15c2c>)
 80171f4:	461c      	mov	r4, r3
 80171f6:	4613      	mov	r3, r2
 80171f8:	cb07      	ldmia	r3!, {r0, r1, r2}
 80171fa:	6020      	str	r0, [r4, #0]
 80171fc:	6061      	str	r1, [r4, #4]
 80171fe:	60a2      	str	r2, [r4, #8]
			break;
 8017200:	f005 b960 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 646 :
			strcpy(p->name,"HIEROGRIPIC");
 8017204:	687b      	ldr	r3, [r7, #4]
 8017206:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801720a:	4a30      	ldr	r2, [pc, #192]	; (80172cc <problem_fetch+0x15c68>)
 801720c:	461c      	mov	r4, r3
 801720e:	4613      	mov	r3, r2
 8017210:	cb07      	ldmia	r3!, {r0, r1, r2}
 8017212:	6020      	str	r0, [r4, #0]
 8017214:	6061      	str	r1, [r4, #4]
 8017216:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade,"7A");
 8017218:	687b      	ldr	r3, [r7, #4]
 801721a:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801721e:	4a14      	ldr	r2, [pc, #80]	; (8017270 <problem_fetch+0x15c0c>)
 8017220:	8811      	ldrh	r1, [r2, #0]
 8017222:	7892      	ldrb	r2, [r2, #2]
 8017224:	8019      	strh	r1, [r3, #0]
 8017226:	709a      	strb	r2, [r3, #2]
			p->moveSize = 6;
 8017228:	687b      	ldr	r3, [r7, #4]
 801722a:	2206      	movs	r2, #6
 801722c:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,G,F,C,A,A");
 801722e:	687b      	ldr	r3, [r7, #4]
 8017230:	33a4      	adds	r3, #164	; 0xa4
 8017232:	4a27      	ldr	r2, [pc, #156]	; (80172d0 <problem_fetch+0x15c6c>)
 8017234:	461c      	mov	r4, r3
 8017236:	4613      	mov	r3, r2
 8017238:	cb07      	ldmia	r3!, {r0, r1, r2}
 801723a:	6020      	str	r0, [r4, #0]
 801723c:	6061      	str	r1, [r4, #4]
 801723e:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,6,11,13,14,18");
 8017240:	687b      	ldr	r3, [r7, #4]
 8017242:	3304      	adds	r3, #4
 8017244:	4a23      	ldr	r2, [pc, #140]	; (80172d4 <problem_fetch+0x15c70>)
 8017246:	461c      	mov	r4, r3
 8017248:	4615      	mov	r5, r2
 801724a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801724c:	6020      	str	r0, [r4, #0]
 801724e:	6061      	str	r1, [r4, #4]
 8017250:	60a2      	str	r2, [r4, #8]
 8017252:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,s,d,d,d,e");
 8017254:	687b      	ldr	r3, [r7, #4]
 8017256:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 801725a:	4a1f      	ldr	r2, [pc, #124]	; (80172d8 <problem_fetch+0x15c74>)
 801725c:	461c      	mov	r4, r3
 801725e:	4613      	mov	r3, r2
 8017260:	cb07      	ldmia	r3!, {r0, r1, r2}
 8017262:	6020      	str	r0, [r4, #0]
 8017264:	6061      	str	r1, [r4, #4]
 8017266:	60a2      	str	r2, [r4, #8]
			break;
 8017268:	f005 b92c 	b.w	801c4c4 <problem_fetch+0x1ae60>
 801726c:	0802b470 	.word	0x0802b470
 8017270:	08023ae4 	.word	0x08023ae4
 8017274:	0802b478 	.word	0x0802b478
 8017278:	0802b484 	.word	0x0802b484
 801727c:	08024204 	.word	0x08024204
 8017280:	0802b494 	.word	0x0802b494
 8017284:	08024358 	.word	0x08024358
 8017288:	0802b49c 	.word	0x0802b49c
 801728c:	08028a20 	.word	0x08028a20
 8017290:	08023ec0 	.word	0x08023ec0
 8017294:	0802b4a8 	.word	0x0802b4a8
 8017298:	08023bbc 	.word	0x08023bbc
 801729c:	0802b4bc 	.word	0x0802b4bc
 80172a0:	0802b4c8 	.word	0x0802b4c8
 80172a4:	0802b4d8 	.word	0x0802b4d8
 80172a8:	0802b4e8 	.word	0x0802b4e8
 80172ac:	0802b4f4 	.word	0x0802b4f4
 80172b0:	0802b504 	.word	0x0802b504
 80172b4:	0802421c 	.word	0x0802421c
 80172b8:	0802b510 	.word	0x0802b510
 80172bc:	0802b51c 	.word	0x0802b51c
 80172c0:	0802b52c 	.word	0x0802b52c
 80172c4:	0802b534 	.word	0x0802b534
 80172c8:	0802b540 	.word	0x0802b540
 80172cc:	0802b550 	.word	0x0802b550
 80172d0:	0802b55c 	.word	0x0802b55c
 80172d4:	0802b568 	.word	0x0802b568
 80172d8:	08023b04 	.word	0x08023b04
		case 647 :
			strcpy(p->name,"FRENCH INDUCED COMA");
 80172dc:	687b      	ldr	r3, [r7, #4]
 80172de:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80172e2:	4aab      	ldr	r2, [pc, #684]	; (8017590 <problem_fetch+0x15f2c>)
 80172e4:	461d      	mov	r5, r3
 80172e6:	4614      	mov	r4, r2
 80172e8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80172ea:	6028      	str	r0, [r5, #0]
 80172ec:	6069      	str	r1, [r5, #4]
 80172ee:	60aa      	str	r2, [r5, #8]
 80172f0:	60eb      	str	r3, [r5, #12]
 80172f2:	6820      	ldr	r0, [r4, #0]
 80172f4:	6128      	str	r0, [r5, #16]
			strcpy(p->grade,"6B+");
 80172f6:	687b      	ldr	r3, [r7, #4]
 80172f8:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80172fc:	4aa5      	ldr	r2, [pc, #660]	; (8017594 <problem_fetch+0x15f30>)
 80172fe:	6810      	ldr	r0, [r2, #0]
 8017300:	6018      	str	r0, [r3, #0]
			p->moveSize = 5;
 8017302:	687b      	ldr	r3, [r7, #4]
 8017304:	2205      	movs	r2, #5
 8017306:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"E,H,D,D,A");
 8017308:	687b      	ldr	r3, [r7, #4]
 801730a:	33a4      	adds	r3, #164	; 0xa4
 801730c:	49a2      	ldr	r1, [pc, #648]	; (8017598 <problem_fetch+0x15f34>)
 801730e:	461a      	mov	r2, r3
 8017310:	460b      	mov	r3, r1
 8017312:	cb03      	ldmia	r3!, {r0, r1}
 8017314:	6010      	str	r0, [r2, #0]
 8017316:	6051      	str	r1, [r2, #4]
 8017318:	881b      	ldrh	r3, [r3, #0]
 801731a:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"6,10,11,15,18");
 801731c:	687b      	ldr	r3, [r7, #4]
 801731e:	3304      	adds	r3, #4
 8017320:	4a9e      	ldr	r2, [pc, #632]	; (801759c <problem_fetch+0x15f38>)
 8017322:	461c      	mov	r4, r3
 8017324:	4613      	mov	r3, r2
 8017326:	cb07      	ldmia	r3!, {r0, r1, r2}
 8017328:	6020      	str	r0, [r4, #0]
 801732a:	6061      	str	r1, [r4, #4]
 801732c:	60a2      	str	r2, [r4, #8]
 801732e:	881b      	ldrh	r3, [r3, #0]
 8017330:	81a3      	strh	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,e");
 8017332:	687b      	ldr	r3, [r7, #4]
 8017334:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8017338:	4999      	ldr	r1, [pc, #612]	; (80175a0 <problem_fetch+0x15f3c>)
 801733a:	461a      	mov	r2, r3
 801733c:	460b      	mov	r3, r1
 801733e:	cb03      	ldmia	r3!, {r0, r1}
 8017340:	6010      	str	r0, [r2, #0]
 8017342:	6051      	str	r1, [r2, #4]
 8017344:	881b      	ldrh	r3, [r3, #0]
 8017346:	8113      	strh	r3, [r2, #8]
			break;
 8017348:	f005 b8bc 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 648 :
			strcpy(p->name,"YEEEEAHHH");
 801734c:	687b      	ldr	r3, [r7, #4]
 801734e:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8017352:	4994      	ldr	r1, [pc, #592]	; (80175a4 <problem_fetch+0x15f40>)
 8017354:	461a      	mov	r2, r3
 8017356:	460b      	mov	r3, r1
 8017358:	cb03      	ldmia	r3!, {r0, r1}
 801735a:	6010      	str	r0, [r2, #0]
 801735c:	6051      	str	r1, [r2, #4]
 801735e:	881b      	ldrh	r3, [r3, #0]
 8017360:	8113      	strh	r3, [r2, #8]
			strcpy(p->grade,"7A");
 8017362:	687b      	ldr	r3, [r7, #4]
 8017364:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8017368:	4a8f      	ldr	r2, [pc, #572]	; (80175a8 <problem_fetch+0x15f44>)
 801736a:	8811      	ldrh	r1, [r2, #0]
 801736c:	7892      	ldrb	r2, [r2, #2]
 801736e:	8019      	strh	r1, [r3, #0]
 8017370:	709a      	strb	r2, [r3, #2]
			p->moveSize = 4;
 8017372:	687b      	ldr	r3, [r7, #4]
 8017374:	2204      	movs	r2, #4
 8017376:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,I,G,I");
 8017378:	687b      	ldr	r3, [r7, #4]
 801737a:	33a4      	adds	r3, #164	; 0xa4
 801737c:	498b      	ldr	r1, [pc, #556]	; (80175ac <problem_fetch+0x15f48>)
 801737e:	461a      	mov	r2, r3
 8017380:	460b      	mov	r3, r1
 8017382:	cb03      	ldmia	r3!, {r0, r1}
 8017384:	6010      	str	r0, [r2, #0]
 8017386:	6051      	str	r1, [r2, #4]
			strcpy(p->moveNumbers,"4,10,14,18");
 8017388:	687b      	ldr	r3, [r7, #4]
 801738a:	3304      	adds	r3, #4
 801738c:	4988      	ldr	r1, [pc, #544]	; (80175b0 <problem_fetch+0x15f4c>)
 801738e:	461a      	mov	r2, r3
 8017390:	460b      	mov	r3, r1
 8017392:	cb03      	ldmia	r3!, {r0, r1}
 8017394:	6010      	str	r0, [r2, #0]
 8017396:	6051      	str	r1, [r2, #4]
 8017398:	8819      	ldrh	r1, [r3, #0]
 801739a:	789b      	ldrb	r3, [r3, #2]
 801739c:	8111      	strh	r1, [r2, #8]
 801739e:	7293      	strb	r3, [r2, #10]
			strcpy(p->startFinish,"s,d,d,e");
 80173a0:	687b      	ldr	r3, [r7, #4]
 80173a2:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 80173a6:	4983      	ldr	r1, [pc, #524]	; (80175b4 <problem_fetch+0x15f50>)
 80173a8:	461a      	mov	r2, r3
 80173aa:	460b      	mov	r3, r1
 80173ac:	cb03      	ldmia	r3!, {r0, r1}
 80173ae:	6010      	str	r0, [r2, #0]
 80173b0:	6051      	str	r1, [r2, #4]
			break;
 80173b2:	f005 b887 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 649 :
			strcpy(p->name,"OFD");
 80173b6:	687b      	ldr	r3, [r7, #4]
 80173b8:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80173bc:	4a7e      	ldr	r2, [pc, #504]	; (80175b8 <problem_fetch+0x15f54>)
 80173be:	6810      	ldr	r0, [r2, #0]
 80173c0:	6018      	str	r0, [r3, #0]
			strcpy(p->grade,"7A+");
 80173c2:	687b      	ldr	r3, [r7, #4]
 80173c4:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80173c8:	4a7c      	ldr	r2, [pc, #496]	; (80175bc <problem_fetch+0x15f58>)
 80173ca:	6810      	ldr	r0, [r2, #0]
 80173cc:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 80173ce:	687b      	ldr	r3, [r7, #4]
 80173d0:	2206      	movs	r2, #6
 80173d2:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,C,E,E,I,I");
 80173d4:	687b      	ldr	r3, [r7, #4]
 80173d6:	33a4      	adds	r3, #164	; 0xa4
 80173d8:	4a79      	ldr	r2, [pc, #484]	; (80175c0 <problem_fetch+0x15f5c>)
 80173da:	461c      	mov	r4, r3
 80173dc:	4613      	mov	r3, r2
 80173de:	cb07      	ldmia	r3!, {r0, r1, r2}
 80173e0:	6020      	str	r0, [r4, #0]
 80173e2:	6061      	str	r1, [r4, #4]
 80173e4:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,8,9,12,14,18");
 80173e6:	687b      	ldr	r3, [r7, #4]
 80173e8:	3304      	adds	r3, #4
 80173ea:	4a76      	ldr	r2, [pc, #472]	; (80175c4 <problem_fetch+0x15f60>)
 80173ec:	461c      	mov	r4, r3
 80173ee:	4613      	mov	r3, r2
 80173f0:	cb07      	ldmia	r3!, {r0, r1, r2}
 80173f2:	6020      	str	r0, [r4, #0]
 80173f4:	6061      	str	r1, [r4, #4]
 80173f6:	60a2      	str	r2, [r4, #8]
 80173f8:	881a      	ldrh	r2, [r3, #0]
 80173fa:	789b      	ldrb	r3, [r3, #2]
 80173fc:	81a2      	strh	r2, [r4, #12]
 80173fe:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 8017400:	687b      	ldr	r3, [r7, #4]
 8017402:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8017406:	4a70      	ldr	r2, [pc, #448]	; (80175c8 <problem_fetch+0x15f64>)
 8017408:	461c      	mov	r4, r3
 801740a:	4613      	mov	r3, r2
 801740c:	cb07      	ldmia	r3!, {r0, r1, r2}
 801740e:	6020      	str	r0, [r4, #0]
 8017410:	6061      	str	r1, [r4, #4]
 8017412:	60a2      	str	r2, [r4, #8]
			break;
 8017414:	f005 b856 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 650 :
			strcpy(p->name,"GO BIG");
 8017418:	687b      	ldr	r3, [r7, #4]
 801741a:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801741e:	4a6b      	ldr	r2, [pc, #428]	; (80175cc <problem_fetch+0x15f68>)
 8017420:	6810      	ldr	r0, [r2, #0]
 8017422:	6018      	str	r0, [r3, #0]
 8017424:	8891      	ldrh	r1, [r2, #4]
 8017426:	7992      	ldrb	r2, [r2, #6]
 8017428:	8099      	strh	r1, [r3, #4]
 801742a:	719a      	strb	r2, [r3, #6]
			strcpy(p->grade,"7B+");
 801742c:	687b      	ldr	r3, [r7, #4]
 801742e:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8017432:	4a67      	ldr	r2, [pc, #412]	; (80175d0 <problem_fetch+0x15f6c>)
 8017434:	6810      	ldr	r0, [r2, #0]
 8017436:	6018      	str	r0, [r3, #0]
			p->moveSize = 5;
 8017438:	687b      	ldr	r3, [r7, #4]
 801743a:	2205      	movs	r2, #5
 801743c:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,K,G,A,A");
 801743e:	687b      	ldr	r3, [r7, #4]
 8017440:	33a4      	adds	r3, #164	; 0xa4
 8017442:	4964      	ldr	r1, [pc, #400]	; (80175d4 <problem_fetch+0x15f70>)
 8017444:	461a      	mov	r2, r3
 8017446:	460b      	mov	r3, r1
 8017448:	cb03      	ldmia	r3!, {r0, r1}
 801744a:	6010      	str	r0, [r2, #0]
 801744c:	6051      	str	r1, [r2, #4]
 801744e:	881b      	ldrh	r3, [r3, #0]
 8017450:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"6,9,14,14,18");
 8017452:	687b      	ldr	r3, [r7, #4]
 8017454:	3304      	adds	r3, #4
 8017456:	4a60      	ldr	r2, [pc, #384]	; (80175d8 <problem_fetch+0x15f74>)
 8017458:	461c      	mov	r4, r3
 801745a:	4613      	mov	r3, r2
 801745c:	cb07      	ldmia	r3!, {r0, r1, r2}
 801745e:	6020      	str	r0, [r4, #0]
 8017460:	6061      	str	r1, [r4, #4]
 8017462:	60a2      	str	r2, [r4, #8]
 8017464:	781b      	ldrb	r3, [r3, #0]
 8017466:	7323      	strb	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,e");
 8017468:	687b      	ldr	r3, [r7, #4]
 801746a:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 801746e:	494c      	ldr	r1, [pc, #304]	; (80175a0 <problem_fetch+0x15f3c>)
 8017470:	461a      	mov	r2, r3
 8017472:	460b      	mov	r3, r1
 8017474:	cb03      	ldmia	r3!, {r0, r1}
 8017476:	6010      	str	r0, [r2, #0]
 8017478:	6051      	str	r1, [r2, #4]
 801747a:	881b      	ldrh	r3, [r3, #0]
 801747c:	8113      	strh	r3, [r2, #8]
			break;
 801747e:	f005 b821 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 651 :
			strcpy(p->name,"VARIATION 2 6B+");
 8017482:	687b      	ldr	r3, [r7, #4]
 8017484:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8017488:	4a54      	ldr	r2, [pc, #336]	; (80175dc <problem_fetch+0x15f78>)
 801748a:	461c      	mov	r4, r3
 801748c:	4615      	mov	r5, r2
 801748e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8017490:	6020      	str	r0, [r4, #0]
 8017492:	6061      	str	r1, [r4, #4]
 8017494:	60a2      	str	r2, [r4, #8]
 8017496:	60e3      	str	r3, [r4, #12]
			strcpy(p->grade,"6B+");
 8017498:	687b      	ldr	r3, [r7, #4]
 801749a:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801749e:	4a3d      	ldr	r2, [pc, #244]	; (8017594 <problem_fetch+0x15f30>)
 80174a0:	6810      	ldr	r0, [r2, #0]
 80174a2:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 80174a4:	687b      	ldr	r3, [r7, #4]
 80174a6:	2207      	movs	r2, #7
 80174a8:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"E,G,E,B,C,A,A");
 80174aa:	687b      	ldr	r3, [r7, #4]
 80174ac:	33a4      	adds	r3, #164	; 0xa4
 80174ae:	4a4c      	ldr	r2, [pc, #304]	; (80175e0 <problem_fetch+0x15f7c>)
 80174b0:	461c      	mov	r4, r3
 80174b2:	4613      	mov	r3, r2
 80174b4:	cb07      	ldmia	r3!, {r0, r1, r2}
 80174b6:	6020      	str	r0, [r4, #0]
 80174b8:	6061      	str	r1, [r4, #4]
 80174ba:	60a2      	str	r2, [r4, #8]
 80174bc:	881b      	ldrh	r3, [r3, #0]
 80174be:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"6,6,8,10,13,14,18");
 80174c0:	687b      	ldr	r3, [r7, #4]
 80174c2:	3304      	adds	r3, #4
 80174c4:	4a47      	ldr	r2, [pc, #284]	; (80175e4 <problem_fetch+0x15f80>)
 80174c6:	461d      	mov	r5, r3
 80174c8:	4614      	mov	r4, r2
 80174ca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80174cc:	6028      	str	r0, [r5, #0]
 80174ce:	6069      	str	r1, [r5, #4]
 80174d0:	60aa      	str	r2, [r5, #8]
 80174d2:	60eb      	str	r3, [r5, #12]
 80174d4:	8823      	ldrh	r3, [r4, #0]
 80174d6:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,s,d,d,d,d,e");
 80174d8:	687b      	ldr	r3, [r7, #4]
 80174da:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 80174de:	4a42      	ldr	r2, [pc, #264]	; (80175e8 <problem_fetch+0x15f84>)
 80174e0:	461c      	mov	r4, r3
 80174e2:	4613      	mov	r3, r2
 80174e4:	cb07      	ldmia	r3!, {r0, r1, r2}
 80174e6:	6020      	str	r0, [r4, #0]
 80174e8:	6061      	str	r1, [r4, #4]
 80174ea:	60a2      	str	r2, [r4, #8]
 80174ec:	881b      	ldrh	r3, [r3, #0]
 80174ee:	81a3      	strh	r3, [r4, #12]
			break;
 80174f0:	f004 bfe8 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 652 :
			strcpy(p->name,"ENDUROV6");
 80174f4:	687b      	ldr	r3, [r7, #4]
 80174f6:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80174fa:	493c      	ldr	r1, [pc, #240]	; (80175ec <problem_fetch+0x15f88>)
 80174fc:	461a      	mov	r2, r3
 80174fe:	460b      	mov	r3, r1
 8017500:	cb03      	ldmia	r3!, {r0, r1}
 8017502:	6010      	str	r0, [r2, #0]
 8017504:	6051      	str	r1, [r2, #4]
 8017506:	781b      	ldrb	r3, [r3, #0]
 8017508:	7213      	strb	r3, [r2, #8]
			strcpy(p->grade,"7A");
 801750a:	687b      	ldr	r3, [r7, #4]
 801750c:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8017510:	4a25      	ldr	r2, [pc, #148]	; (80175a8 <problem_fetch+0x15f44>)
 8017512:	8811      	ldrh	r1, [r2, #0]
 8017514:	7892      	ldrb	r2, [r2, #2]
 8017516:	8019      	strh	r1, [r3, #0]
 8017518:	709a      	strb	r2, [r3, #2]
			p->moveSize = 13;
 801751a:	687b      	ldr	r3, [r7, #4]
 801751c:	220d      	movs	r2, #13
 801751e:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,J,H,G,F,A,D,E,G,C,B,E,I");
 8017520:	687b      	ldr	r3, [r7, #4]
 8017522:	33a4      	adds	r3, #164	; 0xa4
 8017524:	4a32      	ldr	r2, [pc, #200]	; (80175f0 <problem_fetch+0x15f8c>)
 8017526:	461d      	mov	r5, r3
 8017528:	4614      	mov	r4, r2
 801752a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801752c:	6028      	str	r0, [r5, #0]
 801752e:	6069      	str	r1, [r5, #4]
 8017530:	60aa      	str	r2, [r5, #8]
 8017532:	60eb      	str	r3, [r5, #12]
 8017534:	cc03      	ldmia	r4!, {r0, r1}
 8017536:	6128      	str	r0, [r5, #16]
 8017538:	6169      	str	r1, [r5, #20]
 801753a:	8823      	ldrh	r3, [r4, #0]
 801753c:	832b      	strh	r3, [r5, #24]
			strcpy(p->moveNumbers,"5,7,8,9,11,14,15,16,17,5,10,8,18");
 801753e:	687b      	ldr	r3, [r7, #4]
 8017540:	3304      	adds	r3, #4
 8017542:	4a2c      	ldr	r2, [pc, #176]	; (80175f4 <problem_fetch+0x15f90>)
 8017544:	4614      	mov	r4, r2
 8017546:	469c      	mov	ip, r3
 8017548:	f104 0e20 	add.w	lr, r4, #32
 801754c:	4665      	mov	r5, ip
 801754e:	4626      	mov	r6, r4
 8017550:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8017552:	6028      	str	r0, [r5, #0]
 8017554:	6069      	str	r1, [r5, #4]
 8017556:	60aa      	str	r2, [r5, #8]
 8017558:	60eb      	str	r3, [r5, #12]
 801755a:	3410      	adds	r4, #16
 801755c:	f10c 0c10 	add.w	ip, ip, #16
 8017560:	4574      	cmp	r4, lr
 8017562:	d1f3      	bne.n	801754c <problem_fetch+0x15ee8>
 8017564:	4663      	mov	r3, ip
 8017566:	4622      	mov	r2, r4
 8017568:	7812      	ldrb	r2, [r2, #0]
 801756a:	701a      	strb	r2, [r3, #0]
			strcpy(p->startFinish,"s,d,d,d,d,d,d,d,d,d,d,d,e");
 801756c:	687b      	ldr	r3, [r7, #4]
 801756e:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8017572:	4a21      	ldr	r2, [pc, #132]	; (80175f8 <problem_fetch+0x15f94>)
 8017574:	461d      	mov	r5, r3
 8017576:	4614      	mov	r4, r2
 8017578:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801757a:	6028      	str	r0, [r5, #0]
 801757c:	6069      	str	r1, [r5, #4]
 801757e:	60aa      	str	r2, [r5, #8]
 8017580:	60eb      	str	r3, [r5, #12]
 8017582:	cc03      	ldmia	r4!, {r0, r1}
 8017584:	6128      	str	r0, [r5, #16]
 8017586:	6169      	str	r1, [r5, #20]
 8017588:	8823      	ldrh	r3, [r4, #0]
 801758a:	832b      	strh	r3, [r5, #24]
			break;
 801758c:	f004 bf9a 	b.w	801c4c4 <problem_fetch+0x1ae60>
 8017590:	0802b578 	.word	0x0802b578
 8017594:	08023b24 	.word	0x08023b24
 8017598:	0802b58c 	.word	0x0802b58c
 801759c:	0802b598 	.word	0x0802b598
 80175a0:	08023ff0 	.word	0x08023ff0
 80175a4:	0802b5a8 	.word	0x0802b5a8
 80175a8:	08023ae4 	.word	0x08023ae4
 80175ac:	0802b5b4 	.word	0x0802b5b4
 80175b0:	08025034 	.word	0x08025034
 80175b4:	08023c78 	.word	0x08023c78
 80175b8:	0802b5bc 	.word	0x0802b5bc
 80175bc:	08023cc4 	.word	0x08023cc4
 80175c0:	0802b5c0 	.word	0x0802b5c0
 80175c4:	0802ad00 	.word	0x0802ad00
 80175c8:	08023ec0 	.word	0x08023ec0
 80175cc:	0802b5cc 	.word	0x0802b5cc
 80175d0:	08023c60 	.word	0x08023c60
 80175d4:	0802b5d4 	.word	0x0802b5d4
 80175d8:	0802b5e0 	.word	0x0802b5e0
 80175dc:	0802b5f0 	.word	0x0802b5f0
 80175e0:	0802b600 	.word	0x0802b600
 80175e4:	0802b610 	.word	0x0802b610
 80175e8:	08023b9c 	.word	0x08023b9c
 80175ec:	0802b624 	.word	0x0802b624
 80175f0:	0802b630 	.word	0x0802b630
 80175f4:	0802b64c 	.word	0x0802b64c
 80175f8:	0802b670 	.word	0x0802b670
		case 653 :
			strcpy(p->name,"OLDENBOAD4");
 80175fc:	687b      	ldr	r3, [r7, #4]
 80175fe:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8017602:	49aa      	ldr	r1, [pc, #680]	; (80178ac <problem_fetch+0x16248>)
 8017604:	461a      	mov	r2, r3
 8017606:	460b      	mov	r3, r1
 8017608:	cb03      	ldmia	r3!, {r0, r1}
 801760a:	6010      	str	r0, [r2, #0]
 801760c:	6051      	str	r1, [r2, #4]
 801760e:	8819      	ldrh	r1, [r3, #0]
 8017610:	789b      	ldrb	r3, [r3, #2]
 8017612:	8111      	strh	r1, [r2, #8]
 8017614:	7293      	strb	r3, [r2, #10]
			strcpy(p->grade,"6C+");
 8017616:	687b      	ldr	r3, [r7, #4]
 8017618:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801761c:	4aa4      	ldr	r2, [pc, #656]	; (80178b0 <problem_fetch+0x1624c>)
 801761e:	6810      	ldr	r0, [r2, #0]
 8017620:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 8017622:	687b      	ldr	r3, [r7, #4]
 8017624:	2207      	movs	r2, #7
 8017626:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,G,F,C,E,H,D");
 8017628:	687b      	ldr	r3, [r7, #4]
 801762a:	33a4      	adds	r3, #164	; 0xa4
 801762c:	4aa1      	ldr	r2, [pc, #644]	; (80178b4 <problem_fetch+0x16250>)
 801762e:	461c      	mov	r4, r3
 8017630:	4613      	mov	r3, r2
 8017632:	cb07      	ldmia	r3!, {r0, r1, r2}
 8017634:	6020      	str	r0, [r4, #0]
 8017636:	6061      	str	r1, [r4, #4]
 8017638:	60a2      	str	r2, [r4, #8]
 801763a:	881b      	ldrh	r3, [r3, #0]
 801763c:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,6,11,13,16,10,18");
 801763e:	687b      	ldr	r3, [r7, #4]
 8017640:	3304      	adds	r3, #4
 8017642:	4a9d      	ldr	r2, [pc, #628]	; (80178b8 <problem_fetch+0x16254>)
 8017644:	461d      	mov	r5, r3
 8017646:	4614      	mov	r4, r2
 8017648:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801764a:	6028      	str	r0, [r5, #0]
 801764c:	6069      	str	r1, [r5, #4]
 801764e:	60aa      	str	r2, [r5, #8]
 8017650:	60eb      	str	r3, [r5, #12]
 8017652:	8823      	ldrh	r3, [r4, #0]
 8017654:	78a2      	ldrb	r2, [r4, #2]
 8017656:	822b      	strh	r3, [r5, #16]
 8017658:	4613      	mov	r3, r2
 801765a:	74ab      	strb	r3, [r5, #18]
			strcpy(p->startFinish,"s,s,d,d,d,d,e");
 801765c:	687b      	ldr	r3, [r7, #4]
 801765e:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8017662:	4a96      	ldr	r2, [pc, #600]	; (80178bc <problem_fetch+0x16258>)
 8017664:	461c      	mov	r4, r3
 8017666:	4613      	mov	r3, r2
 8017668:	cb07      	ldmia	r3!, {r0, r1, r2}
 801766a:	6020      	str	r0, [r4, #0]
 801766c:	6061      	str	r1, [r4, #4]
 801766e:	60a2      	str	r2, [r4, #8]
 8017670:	881b      	ldrh	r3, [r3, #0]
 8017672:	81a3      	strh	r3, [r4, #12]
			break;
 8017674:	f004 bf26 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 654 :
			strcpy(p->name,"TB SAGA");
 8017678:	687b      	ldr	r3, [r7, #4]
 801767a:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801767e:	4990      	ldr	r1, [pc, #576]	; (80178c0 <problem_fetch+0x1625c>)
 8017680:	461a      	mov	r2, r3
 8017682:	460b      	mov	r3, r1
 8017684:	cb03      	ldmia	r3!, {r0, r1}
 8017686:	6010      	str	r0, [r2, #0]
 8017688:	6051      	str	r1, [r2, #4]
			strcpy(p->grade,"6C");
 801768a:	687b      	ldr	r3, [r7, #4]
 801768c:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8017690:	4a8c      	ldr	r2, [pc, #560]	; (80178c4 <problem_fetch+0x16260>)
 8017692:	8811      	ldrh	r1, [r2, #0]
 8017694:	7892      	ldrb	r2, [r2, #2]
 8017696:	8019      	strh	r1, [r3, #0]
 8017698:	709a      	strb	r2, [r3, #2]
			p->moveSize = 7;
 801769a:	687b      	ldr	r3, [r7, #4]
 801769c:	2207      	movs	r2, #7
 801769e:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,J,H,J,G,H,D");
 80176a0:	687b      	ldr	r3, [r7, #4]
 80176a2:	33a4      	adds	r3, #164	; 0xa4
 80176a4:	4a88      	ldr	r2, [pc, #544]	; (80178c8 <problem_fetch+0x16264>)
 80176a6:	461c      	mov	r4, r3
 80176a8:	4613      	mov	r3, r2
 80176aa:	cb07      	ldmia	r3!, {r0, r1, r2}
 80176ac:	6020      	str	r0, [r4, #0]
 80176ae:	6061      	str	r1, [r4, #4]
 80176b0:	60a2      	str	r2, [r4, #8]
 80176b2:	881b      	ldrh	r3, [r3, #0]
 80176b4:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,7,10,13,15,16,18");
 80176b6:	687b      	ldr	r3, [r7, #4]
 80176b8:	3304      	adds	r3, #4
 80176ba:	4a84      	ldr	r2, [pc, #528]	; (80178cc <problem_fetch+0x16268>)
 80176bc:	461d      	mov	r5, r3
 80176be:	4614      	mov	r4, r2
 80176c0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80176c2:	6028      	str	r0, [r5, #0]
 80176c4:	6069      	str	r1, [r5, #4]
 80176c6:	60aa      	str	r2, [r5, #8]
 80176c8:	60eb      	str	r3, [r5, #12]
 80176ca:	8823      	ldrh	r3, [r4, #0]
 80176cc:	78a2      	ldrb	r2, [r4, #2]
 80176ce:	822b      	strh	r3, [r5, #16]
 80176d0:	4613      	mov	r3, r2
 80176d2:	74ab      	strb	r3, [r5, #18]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 80176d4:	687b      	ldr	r3, [r7, #4]
 80176d6:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 80176da:	4a7d      	ldr	r2, [pc, #500]	; (80178d0 <problem_fetch+0x1626c>)
 80176dc:	461c      	mov	r4, r3
 80176de:	4613      	mov	r3, r2
 80176e0:	cb07      	ldmia	r3!, {r0, r1, r2}
 80176e2:	6020      	str	r0, [r4, #0]
 80176e4:	6061      	str	r1, [r4, #4]
 80176e6:	60a2      	str	r2, [r4, #8]
 80176e8:	881b      	ldrh	r3, [r3, #0]
 80176ea:	81a3      	strh	r3, [r4, #12]
			break;
 80176ec:	f004 beea 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 655 :
			strcpy(p->name,"THE WING");
 80176f0:	687b      	ldr	r3, [r7, #4]
 80176f2:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80176f6:	4977      	ldr	r1, [pc, #476]	; (80178d4 <problem_fetch+0x16270>)
 80176f8:	461a      	mov	r2, r3
 80176fa:	460b      	mov	r3, r1
 80176fc:	cb03      	ldmia	r3!, {r0, r1}
 80176fe:	6010      	str	r0, [r2, #0]
 8017700:	6051      	str	r1, [r2, #4]
 8017702:	781b      	ldrb	r3, [r3, #0]
 8017704:	7213      	strb	r3, [r2, #8]
			strcpy(p->grade,"6C");
 8017706:	687b      	ldr	r3, [r7, #4]
 8017708:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801770c:	4a6d      	ldr	r2, [pc, #436]	; (80178c4 <problem_fetch+0x16260>)
 801770e:	8811      	ldrh	r1, [r2, #0]
 8017710:	7892      	ldrb	r2, [r2, #2]
 8017712:	8019      	strh	r1, [r3, #0]
 8017714:	709a      	strb	r2, [r3, #2]
			p->moveSize = 7;
 8017716:	687b      	ldr	r3, [r7, #4]
 8017718:	2207      	movs	r2, #7
 801771a:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"C,E,C,F,D,D,D");
 801771c:	687b      	ldr	r3, [r7, #4]
 801771e:	33a4      	adds	r3, #164	; 0xa4
 8017720:	4a6d      	ldr	r2, [pc, #436]	; (80178d8 <problem_fetch+0x16274>)
 8017722:	461c      	mov	r4, r3
 8017724:	4613      	mov	r3, r2
 8017726:	cb07      	ldmia	r3!, {r0, r1, r2}
 8017728:	6020      	str	r0, [r4, #0]
 801772a:	6061      	str	r1, [r4, #4]
 801772c:	60a2      	str	r2, [r4, #8]
 801772e:	881b      	ldrh	r3, [r3, #0]
 8017730:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,6,8,11,11,15,18");
 8017732:	687b      	ldr	r3, [r7, #4]
 8017734:	3304      	adds	r3, #4
 8017736:	4a69      	ldr	r2, [pc, #420]	; (80178dc <problem_fetch+0x16278>)
 8017738:	461d      	mov	r5, r3
 801773a:	4614      	mov	r4, r2
 801773c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801773e:	6028      	str	r0, [r5, #0]
 8017740:	6069      	str	r1, [r5, #4]
 8017742:	60aa      	str	r2, [r5, #8]
 8017744:	60eb      	str	r3, [r5, #12]
 8017746:	8823      	ldrh	r3, [r4, #0]
 8017748:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,s,d,d,d,d,e");
 801774a:	687b      	ldr	r3, [r7, #4]
 801774c:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8017750:	4a5a      	ldr	r2, [pc, #360]	; (80178bc <problem_fetch+0x16258>)
 8017752:	461c      	mov	r4, r3
 8017754:	4613      	mov	r3, r2
 8017756:	cb07      	ldmia	r3!, {r0, r1, r2}
 8017758:	6020      	str	r0, [r4, #0]
 801775a:	6061      	str	r1, [r4, #4]
 801775c:	60a2      	str	r2, [r4, #8]
 801775e:	881b      	ldrh	r3, [r3, #0]
 8017760:	81a3      	strh	r3, [r4, #12]
			break;
 8017762:	f004 beaf 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 656 :
			strcpy(p->name,"HER COMES THE QUEEN");
 8017766:	687b      	ldr	r3, [r7, #4]
 8017768:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801776c:	4a5c      	ldr	r2, [pc, #368]	; (80178e0 <problem_fetch+0x1627c>)
 801776e:	461d      	mov	r5, r3
 8017770:	4614      	mov	r4, r2
 8017772:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8017774:	6028      	str	r0, [r5, #0]
 8017776:	6069      	str	r1, [r5, #4]
 8017778:	60aa      	str	r2, [r5, #8]
 801777a:	60eb      	str	r3, [r5, #12]
 801777c:	6820      	ldr	r0, [r4, #0]
 801777e:	6128      	str	r0, [r5, #16]
			strcpy(p->grade,"6C+");
 8017780:	687b      	ldr	r3, [r7, #4]
 8017782:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8017786:	4a4a      	ldr	r2, [pc, #296]	; (80178b0 <problem_fetch+0x1624c>)
 8017788:	6810      	ldr	r0, [r2, #0]
 801778a:	6018      	str	r0, [r3, #0]
			p->moveSize = 5;
 801778c:	687b      	ldr	r3, [r7, #4]
 801778e:	2205      	movs	r2, #5
 8017790:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,E,F,A,D");
 8017792:	687b      	ldr	r3, [r7, #4]
 8017794:	33a4      	adds	r3, #164	; 0xa4
 8017796:	4953      	ldr	r1, [pc, #332]	; (80178e4 <problem_fetch+0x16280>)
 8017798:	461a      	mov	r2, r3
 801779a:	460b      	mov	r3, r1
 801779c:	cb03      	ldmia	r3!, {r0, r1}
 801779e:	6010      	str	r0, [r2, #0]
 80177a0:	6051      	str	r1, [r2, #4]
 80177a2:	881b      	ldrh	r3, [r3, #0]
 80177a4:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"4,8,11,14,18");
 80177a6:	687b      	ldr	r3, [r7, #4]
 80177a8:	3304      	adds	r3, #4
 80177aa:	4a4f      	ldr	r2, [pc, #316]	; (80178e8 <problem_fetch+0x16284>)
 80177ac:	461c      	mov	r4, r3
 80177ae:	4613      	mov	r3, r2
 80177b0:	cb07      	ldmia	r3!, {r0, r1, r2}
 80177b2:	6020      	str	r0, [r4, #0]
 80177b4:	6061      	str	r1, [r4, #4]
 80177b6:	60a2      	str	r2, [r4, #8]
 80177b8:	781b      	ldrb	r3, [r3, #0]
 80177ba:	7323      	strb	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,e");
 80177bc:	687b      	ldr	r3, [r7, #4]
 80177be:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 80177c2:	494a      	ldr	r1, [pc, #296]	; (80178ec <problem_fetch+0x16288>)
 80177c4:	461a      	mov	r2, r3
 80177c6:	460b      	mov	r3, r1
 80177c8:	cb03      	ldmia	r3!, {r0, r1}
 80177ca:	6010      	str	r0, [r2, #0]
 80177cc:	6051      	str	r1, [r2, #4]
 80177ce:	881b      	ldrh	r3, [r3, #0]
 80177d0:	8113      	strh	r3, [r2, #8]
			break;
 80177d2:	f004 be77 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 657 :
			strcpy(p->name,"EASY PINCH");
 80177d6:	687b      	ldr	r3, [r7, #4]
 80177d8:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80177dc:	4944      	ldr	r1, [pc, #272]	; (80178f0 <problem_fetch+0x1628c>)
 80177de:	461a      	mov	r2, r3
 80177e0:	460b      	mov	r3, r1
 80177e2:	cb03      	ldmia	r3!, {r0, r1}
 80177e4:	6010      	str	r0, [r2, #0]
 80177e6:	6051      	str	r1, [r2, #4]
 80177e8:	8819      	ldrh	r1, [r3, #0]
 80177ea:	789b      	ldrb	r3, [r3, #2]
 80177ec:	8111      	strh	r1, [r2, #8]
 80177ee:	7293      	strb	r3, [r2, #10]
			strcpy(p->grade,"7A+");
 80177f0:	687b      	ldr	r3, [r7, #4]
 80177f2:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80177f6:	4a3f      	ldr	r2, [pc, #252]	; (80178f4 <problem_fetch+0x16290>)
 80177f8:	6810      	ldr	r0, [r2, #0]
 80177fa:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 80177fc:	687b      	ldr	r3, [r7, #4]
 80177fe:	2206      	movs	r2, #6
 8017800:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,D,G,F,E,I");
 8017802:	687b      	ldr	r3, [r7, #4]
 8017804:	33a4      	adds	r3, #164	; 0xa4
 8017806:	4a3c      	ldr	r2, [pc, #240]	; (80178f8 <problem_fetch+0x16294>)
 8017808:	461c      	mov	r4, r3
 801780a:	4613      	mov	r3, r2
 801780c:	cb07      	ldmia	r3!, {r0, r1, r2}
 801780e:	6020      	str	r0, [r4, #0]
 8017810:	6061      	str	r1, [r4, #4]
 8017812:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,7,10,13,14,18");
 8017814:	687b      	ldr	r3, [r7, #4]
 8017816:	3304      	adds	r3, #4
 8017818:	4a38      	ldr	r2, [pc, #224]	; (80178fc <problem_fetch+0x16298>)
 801781a:	461c      	mov	r4, r3
 801781c:	4615      	mov	r5, r2
 801781e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8017820:	6020      	str	r0, [r4, #0]
 8017822:	6061      	str	r1, [r4, #4]
 8017824:	60a2      	str	r2, [r4, #8]
 8017826:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 8017828:	687b      	ldr	r3, [r7, #4]
 801782a:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 801782e:	4a34      	ldr	r2, [pc, #208]	; (8017900 <problem_fetch+0x1629c>)
 8017830:	461c      	mov	r4, r3
 8017832:	4613      	mov	r3, r2
 8017834:	cb07      	ldmia	r3!, {r0, r1, r2}
 8017836:	6020      	str	r0, [r4, #0]
 8017838:	6061      	str	r1, [r4, #4]
 801783a:	60a2      	str	r2, [r4, #8]
			break;
 801783c:	f004 be42 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 658 :
			strcpy(p->name,"TIRARONCHIE");
 8017840:	687b      	ldr	r3, [r7, #4]
 8017842:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8017846:	4a2f      	ldr	r2, [pc, #188]	; (8017904 <problem_fetch+0x162a0>)
 8017848:	461c      	mov	r4, r3
 801784a:	4613      	mov	r3, r2
 801784c:	cb07      	ldmia	r3!, {r0, r1, r2}
 801784e:	6020      	str	r0, [r4, #0]
 8017850:	6061      	str	r1, [r4, #4]
 8017852:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade,"7A+");
 8017854:	687b      	ldr	r3, [r7, #4]
 8017856:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801785a:	4a26      	ldr	r2, [pc, #152]	; (80178f4 <problem_fetch+0x16290>)
 801785c:	6810      	ldr	r0, [r2, #0]
 801785e:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 8017860:	687b      	ldr	r3, [r7, #4]
 8017862:	2206      	movs	r2, #6
 8017864:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,E,I,H,H,D");
 8017866:	687b      	ldr	r3, [r7, #4]
 8017868:	33a4      	adds	r3, #164	; 0xa4
 801786a:	4a27      	ldr	r2, [pc, #156]	; (8017908 <problem_fetch+0x162a4>)
 801786c:	461c      	mov	r4, r3
 801786e:	4613      	mov	r3, r2
 8017870:	cb07      	ldmia	r3!, {r0, r1, r2}
 8017872:	6020      	str	r0, [r4, #0]
 8017874:	6061      	str	r1, [r4, #4]
 8017876:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,6,9,12,16,18");
 8017878:	687b      	ldr	r3, [r7, #4]
 801787a:	3304      	adds	r3, #4
 801787c:	4a23      	ldr	r2, [pc, #140]	; (801790c <problem_fetch+0x162a8>)
 801787e:	461c      	mov	r4, r3
 8017880:	4613      	mov	r3, r2
 8017882:	cb07      	ldmia	r3!, {r0, r1, r2}
 8017884:	6020      	str	r0, [r4, #0]
 8017886:	6061      	str	r1, [r4, #4]
 8017888:	60a2      	str	r2, [r4, #8]
 801788a:	881a      	ldrh	r2, [r3, #0]
 801788c:	789b      	ldrb	r3, [r3, #2]
 801788e:	81a2      	strh	r2, [r4, #12]
 8017890:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish,"s,s,d,d,d,e");
 8017892:	687b      	ldr	r3, [r7, #4]
 8017894:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8017898:	4a1d      	ldr	r2, [pc, #116]	; (8017910 <problem_fetch+0x162ac>)
 801789a:	461c      	mov	r4, r3
 801789c:	4613      	mov	r3, r2
 801789e:	cb07      	ldmia	r3!, {r0, r1, r2}
 80178a0:	6020      	str	r0, [r4, #0]
 80178a2:	6061      	str	r1, [r4, #4]
 80178a4:	60a2      	str	r2, [r4, #8]
			break;
 80178a6:	f004 be0d 	b.w	801c4c4 <problem_fetch+0x1ae60>
 80178aa:	bf00      	nop
 80178ac:	0802b68c 	.word	0x0802b68c
 80178b0:	08023bbc 	.word	0x08023bbc
 80178b4:	0802b698 	.word	0x0802b698
 80178b8:	0802b6a8 	.word	0x0802b6a8
 80178bc:	08023b9c 	.word	0x08023b9c
 80178c0:	0802b6bc 	.word	0x0802b6bc
 80178c4:	08023bf0 	.word	0x08023bf0
 80178c8:	0802b6c4 	.word	0x0802b6c4
 80178cc:	0802b6d4 	.word	0x0802b6d4
 80178d0:	08023cac 	.word	0x08023cac
 80178d4:	0802b6e8 	.word	0x0802b6e8
 80178d8:	0802b6f4 	.word	0x0802b6f4
 80178dc:	0802b704 	.word	0x0802b704
 80178e0:	0802b718 	.word	0x0802b718
 80178e4:	0802b72c 	.word	0x0802b72c
 80178e8:	08025258 	.word	0x08025258
 80178ec:	08023ff0 	.word	0x08023ff0
 80178f0:	0802b738 	.word	0x0802b738
 80178f4:	08023cc4 	.word	0x08023cc4
 80178f8:	0802b744 	.word	0x0802b744
 80178fc:	0802b750 	.word	0x0802b750
 8017900:	08023ec0 	.word	0x08023ec0
 8017904:	0802b760 	.word	0x0802b760
 8017908:	08028a3c 	.word	0x08028a3c
 801790c:	0802b76c 	.word	0x0802b76c
 8017910:	08023b04 	.word	0x08023b04
		case 659 :
			strcpy(p->name,"THE REAL DEAL");
 8017914:	687b      	ldr	r3, [r7, #4]
 8017916:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801791a:	4ab1      	ldr	r2, [pc, #708]	; (8017be0 <problem_fetch+0x1657c>)
 801791c:	461c      	mov	r4, r3
 801791e:	4613      	mov	r3, r2
 8017920:	cb07      	ldmia	r3!, {r0, r1, r2}
 8017922:	6020      	str	r0, [r4, #0]
 8017924:	6061      	str	r1, [r4, #4]
 8017926:	60a2      	str	r2, [r4, #8]
 8017928:	881b      	ldrh	r3, [r3, #0]
 801792a:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade,"8A");
 801792c:	687b      	ldr	r3, [r7, #4]
 801792e:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8017932:	4aac      	ldr	r2, [pc, #688]	; (8017be4 <problem_fetch+0x16580>)
 8017934:	8811      	ldrh	r1, [r2, #0]
 8017936:	7892      	ldrb	r2, [r2, #2]
 8017938:	8019      	strh	r1, [r3, #0]
 801793a:	709a      	strb	r2, [r3, #2]
			p->moveSize = 8;
 801793c:	687b      	ldr	r3, [r7, #4]
 801793e:	2208      	movs	r2, #8
 8017940:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"C,D,I,H,I,E,B,A");
 8017942:	687b      	ldr	r3, [r7, #4]
 8017944:	33a4      	adds	r3, #164	; 0xa4
 8017946:	4aa8      	ldr	r2, [pc, #672]	; (8017be8 <problem_fetch+0x16584>)
 8017948:	461c      	mov	r4, r3
 801794a:	4615      	mov	r5, r2
 801794c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801794e:	6020      	str	r0, [r4, #0]
 8017950:	6061      	str	r1, [r4, #4]
 8017952:	60a2      	str	r2, [r4, #8]
 8017954:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,7,7,12,15,14,12,18");
 8017956:	687b      	ldr	r3, [r7, #4]
 8017958:	3304      	adds	r3, #4
 801795a:	4aa4      	ldr	r2, [pc, #656]	; (8017bec <problem_fetch+0x16588>)
 801795c:	461d      	mov	r5, r3
 801795e:	4614      	mov	r4, r2
 8017960:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8017962:	6028      	str	r0, [r5, #0]
 8017964:	6069      	str	r1, [r5, #4]
 8017966:	60aa      	str	r2, [r5, #8]
 8017968:	60eb      	str	r3, [r5, #12]
 801796a:	6820      	ldr	r0, [r4, #0]
 801796c:	6128      	str	r0, [r5, #16]
 801796e:	7923      	ldrb	r3, [r4, #4]
 8017970:	752b      	strb	r3, [r5, #20]
			strcpy(p->startFinish,"s,d,d,d,d,d,d,e");
 8017972:	687b      	ldr	r3, [r7, #4]
 8017974:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8017978:	4a9d      	ldr	r2, [pc, #628]	; (8017bf0 <problem_fetch+0x1658c>)
 801797a:	461c      	mov	r4, r3
 801797c:	4615      	mov	r5, r2
 801797e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8017980:	6020      	str	r0, [r4, #0]
 8017982:	6061      	str	r1, [r4, #4]
 8017984:	60a2      	str	r2, [r4, #8]
 8017986:	60e3      	str	r3, [r4, #12]
			break;
 8017988:	f004 bd9c 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 660 :
			strcpy(p->name,"AF CHRISTMAS TUBERCULOSIS");
 801798c:	687b      	ldr	r3, [r7, #4]
 801798e:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8017992:	4a98      	ldr	r2, [pc, #608]	; (8017bf4 <problem_fetch+0x16590>)
 8017994:	461d      	mov	r5, r3
 8017996:	4614      	mov	r4, r2
 8017998:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801799a:	6028      	str	r0, [r5, #0]
 801799c:	6069      	str	r1, [r5, #4]
 801799e:	60aa      	str	r2, [r5, #8]
 80179a0:	60eb      	str	r3, [r5, #12]
 80179a2:	cc03      	ldmia	r4!, {r0, r1}
 80179a4:	6128      	str	r0, [r5, #16]
 80179a6:	6169      	str	r1, [r5, #20]
 80179a8:	8823      	ldrh	r3, [r4, #0]
 80179aa:	832b      	strh	r3, [r5, #24]
			strcpy(p->grade,"6C+");
 80179ac:	687b      	ldr	r3, [r7, #4]
 80179ae:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80179b2:	4a91      	ldr	r2, [pc, #580]	; (8017bf8 <problem_fetch+0x16594>)
 80179b4:	6810      	ldr	r0, [r2, #0]
 80179b6:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 80179b8:	687b      	ldr	r3, [r7, #4]
 80179ba:	2207      	movs	r2, #7
 80179bc:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,J,H,F,I,I,I");
 80179be:	687b      	ldr	r3, [r7, #4]
 80179c0:	33a4      	adds	r3, #164	; 0xa4
 80179c2:	4a8e      	ldr	r2, [pc, #568]	; (8017bfc <problem_fetch+0x16598>)
 80179c4:	461c      	mov	r4, r3
 80179c6:	4613      	mov	r3, r2
 80179c8:	cb07      	ldmia	r3!, {r0, r1, r2}
 80179ca:	6020      	str	r0, [r4, #0]
 80179cc:	6061      	str	r1, [r4, #4]
 80179ce:	60a2      	str	r2, [r4, #8]
 80179d0:	881b      	ldrh	r3, [r3, #0]
 80179d2:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"6,7,10,11,14,15,18");
 80179d4:	687b      	ldr	r3, [r7, #4]
 80179d6:	3304      	adds	r3, #4
 80179d8:	4a89      	ldr	r2, [pc, #548]	; (8017c00 <problem_fetch+0x1659c>)
 80179da:	461d      	mov	r5, r3
 80179dc:	4614      	mov	r4, r2
 80179de:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80179e0:	6028      	str	r0, [r5, #0]
 80179e2:	6069      	str	r1, [r5, #4]
 80179e4:	60aa      	str	r2, [r5, #8]
 80179e6:	60eb      	str	r3, [r5, #12]
 80179e8:	8823      	ldrh	r3, [r4, #0]
 80179ea:	78a2      	ldrb	r2, [r4, #2]
 80179ec:	822b      	strh	r3, [r5, #16]
 80179ee:	4613      	mov	r3, r2
 80179f0:	74ab      	strb	r3, [r5, #18]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 80179f2:	687b      	ldr	r3, [r7, #4]
 80179f4:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 80179f8:	4a82      	ldr	r2, [pc, #520]	; (8017c04 <problem_fetch+0x165a0>)
 80179fa:	461c      	mov	r4, r3
 80179fc:	4613      	mov	r3, r2
 80179fe:	cb07      	ldmia	r3!, {r0, r1, r2}
 8017a00:	6020      	str	r0, [r4, #0]
 8017a02:	6061      	str	r1, [r4, #4]
 8017a04:	60a2      	str	r2, [r4, #8]
 8017a06:	881b      	ldrh	r3, [r3, #0]
 8017a08:	81a3      	strh	r3, [r4, #12]
			break;
 8017a0a:	f004 bd5b 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 661 :
			strcpy(p->name,"AF EASY FOUR");
 8017a0e:	687b      	ldr	r3, [r7, #4]
 8017a10:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8017a14:	4a7c      	ldr	r2, [pc, #496]	; (8017c08 <problem_fetch+0x165a4>)
 8017a16:	461c      	mov	r4, r3
 8017a18:	4613      	mov	r3, r2
 8017a1a:	cb07      	ldmia	r3!, {r0, r1, r2}
 8017a1c:	6020      	str	r0, [r4, #0]
 8017a1e:	6061      	str	r1, [r4, #4]
 8017a20:	60a2      	str	r2, [r4, #8]
 8017a22:	781b      	ldrb	r3, [r3, #0]
 8017a24:	7323      	strb	r3, [r4, #12]
			strcpy(p->grade,"6B+");
 8017a26:	687b      	ldr	r3, [r7, #4]
 8017a28:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8017a2c:	4a77      	ldr	r2, [pc, #476]	; (8017c0c <problem_fetch+0x165a8>)
 8017a2e:	6810      	ldr	r0, [r2, #0]
 8017a30:	6018      	str	r0, [r3, #0]
			p->moveSize = 8;
 8017a32:	687b      	ldr	r3, [r7, #4]
 8017a34:	2208      	movs	r2, #8
 8017a36:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,E,H,H,F,I,G,I");
 8017a38:	687b      	ldr	r3, [r7, #4]
 8017a3a:	33a4      	adds	r3, #164	; 0xa4
 8017a3c:	4a74      	ldr	r2, [pc, #464]	; (8017c10 <problem_fetch+0x165ac>)
 8017a3e:	461c      	mov	r4, r3
 8017a40:	4615      	mov	r5, r2
 8017a42:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8017a44:	6020      	str	r0, [r4, #0]
 8017a46:	6061      	str	r1, [r4, #4]
 8017a48:	60a2      	str	r2, [r4, #8]
 8017a4a:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,6,8,10,13,14,15,18");
 8017a4c:	687b      	ldr	r3, [r7, #4]
 8017a4e:	3304      	adds	r3, #4
 8017a50:	4a70      	ldr	r2, [pc, #448]	; (8017c14 <problem_fetch+0x165b0>)
 8017a52:	461d      	mov	r5, r3
 8017a54:	4614      	mov	r4, r2
 8017a56:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8017a58:	6028      	str	r0, [r5, #0]
 8017a5a:	6069      	str	r1, [r5, #4]
 8017a5c:	60aa      	str	r2, [r5, #8]
 8017a5e:	60eb      	str	r3, [r5, #12]
 8017a60:	6820      	ldr	r0, [r4, #0]
 8017a62:	6128      	str	r0, [r5, #16]
 8017a64:	7923      	ldrb	r3, [r4, #4]
 8017a66:	752b      	strb	r3, [r5, #20]
			strcpy(p->startFinish,"s,d,d,d,d,d,d,e");
 8017a68:	687b      	ldr	r3, [r7, #4]
 8017a6a:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8017a6e:	4a60      	ldr	r2, [pc, #384]	; (8017bf0 <problem_fetch+0x1658c>)
 8017a70:	461c      	mov	r4, r3
 8017a72:	4615      	mov	r5, r2
 8017a74:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8017a76:	6020      	str	r0, [r4, #0]
 8017a78:	6061      	str	r1, [r4, #4]
 8017a7a:	60a2      	str	r2, [r4, #8]
 8017a7c:	60e3      	str	r3, [r4, #12]
			break;
 8017a7e:	f004 bd21 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 662 :
			strcpy(p->name,"AF EASY ONE");
 8017a82:	687b      	ldr	r3, [r7, #4]
 8017a84:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8017a88:	4a63      	ldr	r2, [pc, #396]	; (8017c18 <problem_fetch+0x165b4>)
 8017a8a:	461c      	mov	r4, r3
 8017a8c:	4613      	mov	r3, r2
 8017a8e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8017a90:	6020      	str	r0, [r4, #0]
 8017a92:	6061      	str	r1, [r4, #4]
 8017a94:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade,"6B+");
 8017a96:	687b      	ldr	r3, [r7, #4]
 8017a98:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8017a9c:	4a5b      	ldr	r2, [pc, #364]	; (8017c0c <problem_fetch+0x165a8>)
 8017a9e:	6810      	ldr	r0, [r2, #0]
 8017aa0:	6018      	str	r0, [r3, #0]
			p->moveSize = 8;
 8017aa2:	687b      	ldr	r3, [r7, #4]
 8017aa4:	2208      	movs	r2, #8
 8017aa6:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,J,K,H,J,G,K,I");
 8017aa8:	687b      	ldr	r3, [r7, #4]
 8017aaa:	33a4      	adds	r3, #164	; 0xa4
 8017aac:	4a5b      	ldr	r2, [pc, #364]	; (8017c1c <problem_fetch+0x165b8>)
 8017aae:	461c      	mov	r4, r3
 8017ab0:	4615      	mov	r5, r2
 8017ab2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8017ab4:	6020      	str	r0, [r4, #0]
 8017ab6:	6061      	str	r1, [r4, #4]
 8017ab8:	60a2      	str	r2, [r4, #8]
 8017aba:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,7,9,10,12,14,16,18");
 8017abc:	687b      	ldr	r3, [r7, #4]
 8017abe:	3304      	adds	r3, #4
 8017ac0:	4a57      	ldr	r2, [pc, #348]	; (8017c20 <problem_fetch+0x165bc>)
 8017ac2:	461d      	mov	r5, r3
 8017ac4:	4614      	mov	r4, r2
 8017ac6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8017ac8:	6028      	str	r0, [r5, #0]
 8017aca:	6069      	str	r1, [r5, #4]
 8017acc:	60aa      	str	r2, [r5, #8]
 8017ace:	60eb      	str	r3, [r5, #12]
 8017ad0:	6820      	ldr	r0, [r4, #0]
 8017ad2:	6128      	str	r0, [r5, #16]
 8017ad4:	7923      	ldrb	r3, [r4, #4]
 8017ad6:	752b      	strb	r3, [r5, #20]
			strcpy(p->startFinish,"s,d,d,d,d,d,d,e");
 8017ad8:	687b      	ldr	r3, [r7, #4]
 8017ada:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8017ade:	4a44      	ldr	r2, [pc, #272]	; (8017bf0 <problem_fetch+0x1658c>)
 8017ae0:	461c      	mov	r4, r3
 8017ae2:	4615      	mov	r5, r2
 8017ae4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8017ae6:	6020      	str	r0, [r4, #0]
 8017ae8:	6061      	str	r1, [r4, #4]
 8017aea:	60a2      	str	r2, [r4, #8]
 8017aec:	60e3      	str	r3, [r4, #12]
			break;
 8017aee:	f004 bce9 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 663 :
			strcpy(p->name,"HOLD THE SWING");
 8017af2:	687b      	ldr	r3, [r7, #4]
 8017af4:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8017af8:	4a4a      	ldr	r2, [pc, #296]	; (8017c24 <problem_fetch+0x165c0>)
 8017afa:	461c      	mov	r4, r3
 8017afc:	4613      	mov	r3, r2
 8017afe:	cb07      	ldmia	r3!, {r0, r1, r2}
 8017b00:	6020      	str	r0, [r4, #0]
 8017b02:	6061      	str	r1, [r4, #4]
 8017b04:	60a2      	str	r2, [r4, #8]
 8017b06:	881a      	ldrh	r2, [r3, #0]
 8017b08:	789b      	ldrb	r3, [r3, #2]
 8017b0a:	81a2      	strh	r2, [r4, #12]
 8017b0c:	73a3      	strb	r3, [r4, #14]
			strcpy(p->grade,"6C");
 8017b0e:	687b      	ldr	r3, [r7, #4]
 8017b10:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8017b14:	4a44      	ldr	r2, [pc, #272]	; (8017c28 <problem_fetch+0x165c4>)
 8017b16:	8811      	ldrh	r1, [r2, #0]
 8017b18:	7892      	ldrb	r2, [r2, #2]
 8017b1a:	8019      	strh	r1, [r3, #0]
 8017b1c:	709a      	strb	r2, [r3, #2]
			p->moveSize = 7;
 8017b1e:	687b      	ldr	r3, [r7, #4]
 8017b20:	2207      	movs	r2, #7
 8017b22:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,E,G,E,I,E,I");
 8017b24:	687b      	ldr	r3, [r7, #4]
 8017b26:	33a4      	adds	r3, #164	; 0xa4
 8017b28:	4a40      	ldr	r2, [pc, #256]	; (8017c2c <problem_fetch+0x165c8>)
 8017b2a:	461c      	mov	r4, r3
 8017b2c:	4613      	mov	r3, r2
 8017b2e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8017b30:	6020      	str	r0, [r4, #0]
 8017b32:	6061      	str	r1, [r4, #4]
 8017b34:	60a2      	str	r2, [r4, #8]
 8017b36:	881b      	ldrh	r3, [r3, #0]
 8017b38:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,6,9,12,14,14,18");
 8017b3a:	687b      	ldr	r3, [r7, #4]
 8017b3c:	3304      	adds	r3, #4
 8017b3e:	4a3c      	ldr	r2, [pc, #240]	; (8017c30 <problem_fetch+0x165cc>)
 8017b40:	461d      	mov	r5, r3
 8017b42:	4614      	mov	r4, r2
 8017b44:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8017b46:	6028      	str	r0, [r5, #0]
 8017b48:	6069      	str	r1, [r5, #4]
 8017b4a:	60aa      	str	r2, [r5, #8]
 8017b4c:	60eb      	str	r3, [r5, #12]
 8017b4e:	8823      	ldrh	r3, [r4, #0]
 8017b50:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,s,d,d,d,d,e");
 8017b52:	687b      	ldr	r3, [r7, #4]
 8017b54:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8017b58:	4a36      	ldr	r2, [pc, #216]	; (8017c34 <problem_fetch+0x165d0>)
 8017b5a:	461c      	mov	r4, r3
 8017b5c:	4613      	mov	r3, r2
 8017b5e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8017b60:	6020      	str	r0, [r4, #0]
 8017b62:	6061      	str	r1, [r4, #4]
 8017b64:	60a2      	str	r2, [r4, #8]
 8017b66:	881b      	ldrh	r3, [r3, #0]
 8017b68:	81a3      	strh	r3, [r4, #12]
			break;
 8017b6a:	f004 bcab 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 664 :
			strcpy(p->name,"DIAGONALE");
 8017b6e:	687b      	ldr	r3, [r7, #4]
 8017b70:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8017b74:	4930      	ldr	r1, [pc, #192]	; (8017c38 <problem_fetch+0x165d4>)
 8017b76:	461a      	mov	r2, r3
 8017b78:	460b      	mov	r3, r1
 8017b7a:	cb03      	ldmia	r3!, {r0, r1}
 8017b7c:	6010      	str	r0, [r2, #0]
 8017b7e:	6051      	str	r1, [r2, #4]
 8017b80:	881b      	ldrh	r3, [r3, #0]
 8017b82:	8113      	strh	r3, [r2, #8]
			strcpy(p->grade,"7B");
 8017b84:	687b      	ldr	r3, [r7, #4]
 8017b86:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8017b8a:	4a2c      	ldr	r2, [pc, #176]	; (8017c3c <problem_fetch+0x165d8>)
 8017b8c:	8811      	ldrh	r1, [r2, #0]
 8017b8e:	7892      	ldrb	r2, [r2, #2]
 8017b90:	8019      	strh	r1, [r3, #0]
 8017b92:	709a      	strb	r2, [r3, #2]
			p->moveSize = 5;
 8017b94:	687b      	ldr	r3, [r7, #4]
 8017b96:	2205      	movs	r2, #5
 8017b98:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,H,F,D,A");
 8017b9a:	687b      	ldr	r3, [r7, #4]
 8017b9c:	33a4      	adds	r3, #164	; 0xa4
 8017b9e:	4928      	ldr	r1, [pc, #160]	; (8017c40 <problem_fetch+0x165dc>)
 8017ba0:	461a      	mov	r2, r3
 8017ba2:	460b      	mov	r3, r1
 8017ba4:	cb03      	ldmia	r3!, {r0, r1}
 8017ba6:	6010      	str	r0, [r2, #0]
 8017ba8:	6051      	str	r1, [r2, #4]
 8017baa:	881b      	ldrh	r3, [r3, #0]
 8017bac:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"5,8,11,15,18");
 8017bae:	687b      	ldr	r3, [r7, #4]
 8017bb0:	3304      	adds	r3, #4
 8017bb2:	4a24      	ldr	r2, [pc, #144]	; (8017c44 <problem_fetch+0x165e0>)
 8017bb4:	461c      	mov	r4, r3
 8017bb6:	4613      	mov	r3, r2
 8017bb8:	cb07      	ldmia	r3!, {r0, r1, r2}
 8017bba:	6020      	str	r0, [r4, #0]
 8017bbc:	6061      	str	r1, [r4, #4]
 8017bbe:	60a2      	str	r2, [r4, #8]
 8017bc0:	781b      	ldrb	r3, [r3, #0]
 8017bc2:	7323      	strb	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,e");
 8017bc4:	687b      	ldr	r3, [r7, #4]
 8017bc6:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8017bca:	491f      	ldr	r1, [pc, #124]	; (8017c48 <problem_fetch+0x165e4>)
 8017bcc:	461a      	mov	r2, r3
 8017bce:	460b      	mov	r3, r1
 8017bd0:	cb03      	ldmia	r3!, {r0, r1}
 8017bd2:	6010      	str	r0, [r2, #0]
 8017bd4:	6051      	str	r1, [r2, #4]
 8017bd6:	881b      	ldrh	r3, [r3, #0]
 8017bd8:	8113      	strh	r3, [r2, #8]
			break;
 8017bda:	f004 bc73 	b.w	801c4c4 <problem_fetch+0x1ae60>
 8017bde:	bf00      	nop
 8017be0:	0802b77c 	.word	0x0802b77c
 8017be4:	08025e88 	.word	0x08025e88
 8017be8:	0802b78c 	.word	0x0802b78c
 8017bec:	0802b79c 	.word	0x0802b79c
 8017bf0:	08023d34 	.word	0x08023d34
 8017bf4:	0802b7b4 	.word	0x0802b7b4
 8017bf8:	08023bbc 	.word	0x08023bbc
 8017bfc:	0802b7d0 	.word	0x0802b7d0
 8017c00:	0802b7e0 	.word	0x0802b7e0
 8017c04:	08023cac 	.word	0x08023cac
 8017c08:	0802b7f4 	.word	0x0802b7f4
 8017c0c:	08023b24 	.word	0x08023b24
 8017c10:	0802b804 	.word	0x0802b804
 8017c14:	0802b814 	.word	0x0802b814
 8017c18:	0802b82c 	.word	0x0802b82c
 8017c1c:	0802b838 	.word	0x0802b838
 8017c20:	0802b848 	.word	0x0802b848
 8017c24:	0802b860 	.word	0x0802b860
 8017c28:	08023bf0 	.word	0x08023bf0
 8017c2c:	0802b870 	.word	0x0802b870
 8017c30:	0802b880 	.word	0x0802b880
 8017c34:	08023b9c 	.word	0x08023b9c
 8017c38:	0802b894 	.word	0x0802b894
 8017c3c:	0802421c 	.word	0x0802421c
 8017c40:	0802b8a0 	.word	0x0802b8a0
 8017c44:	0802b8ac 	.word	0x0802b8ac
 8017c48:	08023ff0 	.word	0x08023ff0
		case 665 :
			strcpy(p->name,"ACG59");
 8017c4c:	687b      	ldr	r3, [r7, #4]
 8017c4e:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8017c52:	4ac3      	ldr	r2, [pc, #780]	; (8017f60 <problem_fetch+0x168fc>)
 8017c54:	6810      	ldr	r0, [r2, #0]
 8017c56:	6018      	str	r0, [r3, #0]
 8017c58:	8892      	ldrh	r2, [r2, #4]
 8017c5a:	809a      	strh	r2, [r3, #4]
			strcpy(p->grade,"6C");
 8017c5c:	687b      	ldr	r3, [r7, #4]
 8017c5e:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8017c62:	4ac0      	ldr	r2, [pc, #768]	; (8017f64 <problem_fetch+0x16900>)
 8017c64:	8811      	ldrh	r1, [r2, #0]
 8017c66:	7892      	ldrb	r2, [r2, #2]
 8017c68:	8019      	strh	r1, [r3, #0]
 8017c6a:	709a      	strb	r2, [r3, #2]
			p->moveSize = 8;
 8017c6c:	687b      	ldr	r3, [r7, #4]
 8017c6e:	2208      	movs	r2, #8
 8017c70:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"H,C,E,B,D,E,F,I");
 8017c72:	687b      	ldr	r3, [r7, #4]
 8017c74:	33a4      	adds	r3, #164	; 0xa4
 8017c76:	4abc      	ldr	r2, [pc, #752]	; (8017f68 <problem_fetch+0x16904>)
 8017c78:	461c      	mov	r4, r3
 8017c7a:	4615      	mov	r5, r2
 8017c7c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8017c7e:	6020      	str	r0, [r4, #0]
 8017c80:	6061      	str	r1, [r4, #4]
 8017c82:	60a2      	str	r2, [r4, #8]
 8017c84:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,5,8,10,15,16,11,18");
 8017c86:	687b      	ldr	r3, [r7, #4]
 8017c88:	3304      	adds	r3, #4
 8017c8a:	4ab8      	ldr	r2, [pc, #736]	; (8017f6c <problem_fetch+0x16908>)
 8017c8c:	461d      	mov	r5, r3
 8017c8e:	4614      	mov	r4, r2
 8017c90:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8017c92:	6028      	str	r0, [r5, #0]
 8017c94:	6069      	str	r1, [r5, #4]
 8017c96:	60aa      	str	r2, [r5, #8]
 8017c98:	60eb      	str	r3, [r5, #12]
 8017c9a:	6820      	ldr	r0, [r4, #0]
 8017c9c:	6128      	str	r0, [r5, #16]
 8017c9e:	7923      	ldrb	r3, [r4, #4]
 8017ca0:	752b      	strb	r3, [r5, #20]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,e");
 8017ca2:	687b      	ldr	r3, [r7, #4]
 8017ca4:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8017ca8:	4ab1      	ldr	r2, [pc, #708]	; (8017f70 <problem_fetch+0x1690c>)
 8017caa:	461c      	mov	r4, r3
 8017cac:	4615      	mov	r5, r2
 8017cae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8017cb0:	6020      	str	r0, [r4, #0]
 8017cb2:	6061      	str	r1, [r4, #4]
 8017cb4:	60a2      	str	r2, [r4, #8]
 8017cb6:	60e3      	str	r3, [r4, #12]
			break;
 8017cb8:	f004 bc04 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 666 :
			strcpy(p->name,"ACG56");
 8017cbc:	687b      	ldr	r3, [r7, #4]
 8017cbe:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8017cc2:	4aac      	ldr	r2, [pc, #688]	; (8017f74 <problem_fetch+0x16910>)
 8017cc4:	6810      	ldr	r0, [r2, #0]
 8017cc6:	6018      	str	r0, [r3, #0]
 8017cc8:	8892      	ldrh	r2, [r2, #4]
 8017cca:	809a      	strh	r2, [r3, #4]
			strcpy(p->grade,"7A");
 8017ccc:	687b      	ldr	r3, [r7, #4]
 8017cce:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8017cd2:	4aa9      	ldr	r2, [pc, #676]	; (8017f78 <problem_fetch+0x16914>)
 8017cd4:	8811      	ldrh	r1, [r2, #0]
 8017cd6:	7892      	ldrb	r2, [r2, #2]
 8017cd8:	8019      	strh	r1, [r3, #0]
 8017cda:	709a      	strb	r2, [r3, #2]
			p->moveSize = 7;
 8017cdc:	687b      	ldr	r3, [r7, #4]
 8017cde:	2207      	movs	r2, #7
 8017ce0:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,I,H,E,C,B,A");
 8017ce2:	687b      	ldr	r3, [r7, #4]
 8017ce4:	33a4      	adds	r3, #164	; 0xa4
 8017ce6:	4aa5      	ldr	r2, [pc, #660]	; (8017f7c <problem_fetch+0x16918>)
 8017ce8:	461c      	mov	r4, r3
 8017cea:	4613      	mov	r3, r2
 8017cec:	cb07      	ldmia	r3!, {r0, r1, r2}
 8017cee:	6020      	str	r0, [r4, #0]
 8017cf0:	6061      	str	r1, [r4, #4]
 8017cf2:	60a2      	str	r2, [r4, #8]
 8017cf4:	881b      	ldrh	r3, [r3, #0]
 8017cf6:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,10,13,16,16,10,18");
 8017cf8:	687b      	ldr	r3, [r7, #4]
 8017cfa:	3304      	adds	r3, #4
 8017cfc:	4aa0      	ldr	r2, [pc, #640]	; (8017f80 <problem_fetch+0x1691c>)
 8017cfe:	461d      	mov	r5, r3
 8017d00:	4614      	mov	r4, r2
 8017d02:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8017d04:	6028      	str	r0, [r5, #0]
 8017d06:	6069      	str	r1, [r5, #4]
 8017d08:	60aa      	str	r2, [r5, #8]
 8017d0a:	60eb      	str	r3, [r5, #12]
 8017d0c:	6820      	ldr	r0, [r4, #0]
 8017d0e:	6128      	str	r0, [r5, #16]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 8017d10:	687b      	ldr	r3, [r7, #4]
 8017d12:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8017d16:	4a9b      	ldr	r2, [pc, #620]	; (8017f84 <problem_fetch+0x16920>)
 8017d18:	461c      	mov	r4, r3
 8017d1a:	4613      	mov	r3, r2
 8017d1c:	cb07      	ldmia	r3!, {r0, r1, r2}
 8017d1e:	6020      	str	r0, [r4, #0]
 8017d20:	6061      	str	r1, [r4, #4]
 8017d22:	60a2      	str	r2, [r4, #8]
 8017d24:	881b      	ldrh	r3, [r3, #0]
 8017d26:	81a3      	strh	r3, [r4, #12]
			break;
 8017d28:	f004 bbcc 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 667 :
			strcpy(p->name,"LAGO NERO");
 8017d2c:	687b      	ldr	r3, [r7, #4]
 8017d2e:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8017d32:	4995      	ldr	r1, [pc, #596]	; (8017f88 <problem_fetch+0x16924>)
 8017d34:	461a      	mov	r2, r3
 8017d36:	460b      	mov	r3, r1
 8017d38:	cb03      	ldmia	r3!, {r0, r1}
 8017d3a:	6010      	str	r0, [r2, #0]
 8017d3c:	6051      	str	r1, [r2, #4]
 8017d3e:	881b      	ldrh	r3, [r3, #0]
 8017d40:	8113      	strh	r3, [r2, #8]
			strcpy(p->grade,"6B+");
 8017d42:	687b      	ldr	r3, [r7, #4]
 8017d44:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8017d48:	4a90      	ldr	r2, [pc, #576]	; (8017f8c <problem_fetch+0x16928>)
 8017d4a:	6810      	ldr	r0, [r2, #0]
 8017d4c:	6018      	str	r0, [r3, #0]
			p->moveSize = 8;
 8017d4e:	687b      	ldr	r3, [r7, #4]
 8017d50:	2208      	movs	r2, #8
 8017d52:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,E,E,F,C,D,E,D");
 8017d54:	687b      	ldr	r3, [r7, #4]
 8017d56:	33a4      	adds	r3, #164	; 0xa4
 8017d58:	4a8d      	ldr	r2, [pc, #564]	; (8017f90 <problem_fetch+0x1692c>)
 8017d5a:	461c      	mov	r4, r3
 8017d5c:	4615      	mov	r5, r2
 8017d5e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8017d60:	6020      	str	r0, [r4, #0]
 8017d62:	6061      	str	r1, [r4, #4]
 8017d64:	60a2      	str	r2, [r4, #8]
 8017d66:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,6,8,11,13,15,16,18");
 8017d68:	687b      	ldr	r3, [r7, #4]
 8017d6a:	3304      	adds	r3, #4
 8017d6c:	4a89      	ldr	r2, [pc, #548]	; (8017f94 <problem_fetch+0x16930>)
 8017d6e:	461d      	mov	r5, r3
 8017d70:	4614      	mov	r4, r2
 8017d72:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8017d74:	6028      	str	r0, [r5, #0]
 8017d76:	6069      	str	r1, [r5, #4]
 8017d78:	60aa      	str	r2, [r5, #8]
 8017d7a:	60eb      	str	r3, [r5, #12]
 8017d7c:	6820      	ldr	r0, [r4, #0]
 8017d7e:	6128      	str	r0, [r5, #16]
 8017d80:	7923      	ldrb	r3, [r4, #4]
 8017d82:	752b      	strb	r3, [r5, #20]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,e");
 8017d84:	687b      	ldr	r3, [r7, #4]
 8017d86:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8017d8a:	4a79      	ldr	r2, [pc, #484]	; (8017f70 <problem_fetch+0x1690c>)
 8017d8c:	461c      	mov	r4, r3
 8017d8e:	4615      	mov	r5, r2
 8017d90:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8017d92:	6020      	str	r0, [r4, #0]
 8017d94:	6061      	str	r1, [r4, #4]
 8017d96:	60a2      	str	r2, [r4, #8]
 8017d98:	60e3      	str	r3, [r4, #12]
			break;
 8017d9a:	f004 bb93 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 668 :
			strcpy(p->name,"BP");
 8017d9e:	687b      	ldr	r3, [r7, #4]
 8017da0:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8017da4:	4a7c      	ldr	r2, [pc, #496]	; (8017f98 <problem_fetch+0x16934>)
 8017da6:	8811      	ldrh	r1, [r2, #0]
 8017da8:	7892      	ldrb	r2, [r2, #2]
 8017daa:	8019      	strh	r1, [r3, #0]
 8017dac:	709a      	strb	r2, [r3, #2]
			strcpy(p->grade,"6B+");
 8017dae:	687b      	ldr	r3, [r7, #4]
 8017db0:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8017db4:	4a75      	ldr	r2, [pc, #468]	; (8017f8c <problem_fetch+0x16928>)
 8017db6:	6810      	ldr	r0, [r2, #0]
 8017db8:	6018      	str	r0, [r3, #0]
			p->moveSize = 9;
 8017dba:	687b      	ldr	r3, [r7, #4]
 8017dbc:	2209      	movs	r2, #9
 8017dbe:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"C,B,E,E,I,H,J,H,I");
 8017dc0:	687b      	ldr	r3, [r7, #4]
 8017dc2:	33a4      	adds	r3, #164	; 0xa4
 8017dc4:	4a75      	ldr	r2, [pc, #468]	; (8017f9c <problem_fetch+0x16938>)
 8017dc6:	461d      	mov	r5, r3
 8017dc8:	4614      	mov	r4, r2
 8017dca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8017dcc:	6028      	str	r0, [r5, #0]
 8017dce:	6069      	str	r1, [r5, #4]
 8017dd0:	60aa      	str	r2, [r5, #8]
 8017dd2:	60eb      	str	r3, [r5, #12]
 8017dd4:	8823      	ldrh	r3, [r4, #0]
 8017dd6:	822b      	strh	r3, [r5, #16]
			strcpy(p->moveNumbers,"5,6,9,8,10,12,13,16,18");
 8017dd8:	687b      	ldr	r3, [r7, #4]
 8017dda:	3304      	adds	r3, #4
 8017ddc:	4a70      	ldr	r2, [pc, #448]	; (8017fa0 <problem_fetch+0x1693c>)
 8017dde:	461c      	mov	r4, r3
 8017de0:	4615      	mov	r5, r2
 8017de2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8017de4:	6020      	str	r0, [r4, #0]
 8017de6:	6061      	str	r1, [r4, #4]
 8017de8:	60a2      	str	r2, [r4, #8]
 8017dea:	60e3      	str	r3, [r4, #12]
 8017dec:	6828      	ldr	r0, [r5, #0]
 8017dee:	6120      	str	r0, [r4, #16]
 8017df0:	88ab      	ldrh	r3, [r5, #4]
 8017df2:	79aa      	ldrb	r2, [r5, #6]
 8017df4:	82a3      	strh	r3, [r4, #20]
 8017df6:	4613      	mov	r3, r2
 8017df8:	75a3      	strb	r3, [r4, #22]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,d,e");
 8017dfa:	687b      	ldr	r3, [r7, #4]
 8017dfc:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8017e00:	4a68      	ldr	r2, [pc, #416]	; (8017fa4 <problem_fetch+0x16940>)
 8017e02:	461d      	mov	r5, r3
 8017e04:	4614      	mov	r4, r2
 8017e06:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8017e08:	6028      	str	r0, [r5, #0]
 8017e0a:	6069      	str	r1, [r5, #4]
 8017e0c:	60aa      	str	r2, [r5, #8]
 8017e0e:	60eb      	str	r3, [r5, #12]
 8017e10:	8823      	ldrh	r3, [r4, #0]
 8017e12:	822b      	strh	r3, [r5, #16]
			break;
 8017e14:	f004 bb56 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 669 :
			strcpy(p->name,"JAGUAR SHARK HARD");
 8017e18:	687b      	ldr	r3, [r7, #4]
 8017e1a:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8017e1e:	4a62      	ldr	r2, [pc, #392]	; (8017fa8 <problem_fetch+0x16944>)
 8017e20:	461d      	mov	r5, r3
 8017e22:	4614      	mov	r4, r2
 8017e24:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8017e26:	6028      	str	r0, [r5, #0]
 8017e28:	6069      	str	r1, [r5, #4]
 8017e2a:	60aa      	str	r2, [r5, #8]
 8017e2c:	60eb      	str	r3, [r5, #12]
 8017e2e:	8823      	ldrh	r3, [r4, #0]
 8017e30:	822b      	strh	r3, [r5, #16]
			strcpy(p->grade,"7B+");
 8017e32:	687b      	ldr	r3, [r7, #4]
 8017e34:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8017e38:	4a5c      	ldr	r2, [pc, #368]	; (8017fac <problem_fetch+0x16948>)
 8017e3a:	6810      	ldr	r0, [r2, #0]
 8017e3c:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 8017e3e:	687b      	ldr	r3, [r7, #4]
 8017e40:	2206      	movs	r2, #6
 8017e42:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,H,E,C,E,I");
 8017e44:	687b      	ldr	r3, [r7, #4]
 8017e46:	33a4      	adds	r3, #164	; 0xa4
 8017e48:	4a59      	ldr	r2, [pc, #356]	; (8017fb0 <problem_fetch+0x1694c>)
 8017e4a:	461c      	mov	r4, r3
 8017e4c:	4613      	mov	r3, r2
 8017e4e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8017e50:	6020      	str	r0, [r4, #0]
 8017e52:	6061      	str	r1, [r4, #4]
 8017e54:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,10,12,13,16,18");
 8017e56:	687b      	ldr	r3, [r7, #4]
 8017e58:	3304      	adds	r3, #4
 8017e5a:	4a56      	ldr	r2, [pc, #344]	; (8017fb4 <problem_fetch+0x16950>)
 8017e5c:	461d      	mov	r5, r3
 8017e5e:	4614      	mov	r4, r2
 8017e60:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8017e62:	6028      	str	r0, [r5, #0]
 8017e64:	6069      	str	r1, [r5, #4]
 8017e66:	60aa      	str	r2, [r5, #8]
 8017e68:	60eb      	str	r3, [r5, #12]
 8017e6a:	7823      	ldrb	r3, [r4, #0]
 8017e6c:	742b      	strb	r3, [r5, #16]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 8017e6e:	687b      	ldr	r3, [r7, #4]
 8017e70:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8017e74:	4a50      	ldr	r2, [pc, #320]	; (8017fb8 <problem_fetch+0x16954>)
 8017e76:	461c      	mov	r4, r3
 8017e78:	4613      	mov	r3, r2
 8017e7a:	cb07      	ldmia	r3!, {r0, r1, r2}
 8017e7c:	6020      	str	r0, [r4, #0]
 8017e7e:	6061      	str	r1, [r4, #4]
 8017e80:	60a2      	str	r2, [r4, #8]
			break;
 8017e82:	f004 bb1f 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 670 :
			strcpy(p->name,"IL MANFRUITO");
 8017e86:	687b      	ldr	r3, [r7, #4]
 8017e88:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8017e8c:	4a4b      	ldr	r2, [pc, #300]	; (8017fbc <problem_fetch+0x16958>)
 8017e8e:	461c      	mov	r4, r3
 8017e90:	4613      	mov	r3, r2
 8017e92:	cb07      	ldmia	r3!, {r0, r1, r2}
 8017e94:	6020      	str	r0, [r4, #0]
 8017e96:	6061      	str	r1, [r4, #4]
 8017e98:	60a2      	str	r2, [r4, #8]
 8017e9a:	781b      	ldrb	r3, [r3, #0]
 8017e9c:	7323      	strb	r3, [r4, #12]
			strcpy(p->grade,"7C");
 8017e9e:	687b      	ldr	r3, [r7, #4]
 8017ea0:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8017ea4:	4a46      	ldr	r2, [pc, #280]	; (8017fc0 <problem_fetch+0x1695c>)
 8017ea6:	8811      	ldrh	r1, [r2, #0]
 8017ea8:	7892      	ldrb	r2, [r2, #2]
 8017eaa:	8019      	strh	r1, [r3, #0]
 8017eac:	709a      	strb	r2, [r3, #2]
			p->moveSize = 6;
 8017eae:	687b      	ldr	r3, [r7, #4]
 8017eb0:	2206      	movs	r2, #6
 8017eb2:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"A,E,E,F,G,G");
 8017eb4:	687b      	ldr	r3, [r7, #4]
 8017eb6:	33a4      	adds	r3, #164	; 0xa4
 8017eb8:	4a42      	ldr	r2, [pc, #264]	; (8017fc4 <problem_fetch+0x16960>)
 8017eba:	461c      	mov	r4, r3
 8017ebc:	4613      	mov	r3, r2
 8017ebe:	cb07      	ldmia	r3!, {r0, r1, r2}
 8017ec0:	6020      	str	r0, [r4, #0]
 8017ec2:	6061      	str	r1, [r4, #4]
 8017ec4:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"18,6,9,13,4,17");
 8017ec6:	687b      	ldr	r3, [r7, #4]
 8017ec8:	3304      	adds	r3, #4
 8017eca:	4a3f      	ldr	r2, [pc, #252]	; (8017fc8 <problem_fetch+0x16964>)
 8017ecc:	461c      	mov	r4, r3
 8017ece:	4613      	mov	r3, r2
 8017ed0:	cb07      	ldmia	r3!, {r0, r1, r2}
 8017ed2:	6020      	str	r0, [r4, #0]
 8017ed4:	6061      	str	r1, [r4, #4]
 8017ed6:	60a2      	str	r2, [r4, #8]
 8017ed8:	881a      	ldrh	r2, [r3, #0]
 8017eda:	789b      	ldrb	r3, [r3, #2]
 8017edc:	81a2      	strh	r2, [r4, #12]
 8017ede:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish,"e,s,d,d,s,d");
 8017ee0:	687b      	ldr	r3, [r7, #4]
 8017ee2:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8017ee6:	4a39      	ldr	r2, [pc, #228]	; (8017fcc <problem_fetch+0x16968>)
 8017ee8:	461c      	mov	r4, r3
 8017eea:	4613      	mov	r3, r2
 8017eec:	cb07      	ldmia	r3!, {r0, r1, r2}
 8017eee:	6020      	str	r0, [r4, #0]
 8017ef0:	6061      	str	r1, [r4, #4]
 8017ef2:	60a2      	str	r2, [r4, #8]
			break;
 8017ef4:	f004 bae6 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 671 :
			strcpy(p->name,"ROCK N LOCK");
 8017ef8:	687b      	ldr	r3, [r7, #4]
 8017efa:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8017efe:	4a34      	ldr	r2, [pc, #208]	; (8017fd0 <problem_fetch+0x1696c>)
 8017f00:	461c      	mov	r4, r3
 8017f02:	4613      	mov	r3, r2
 8017f04:	cb07      	ldmia	r3!, {r0, r1, r2}
 8017f06:	6020      	str	r0, [r4, #0]
 8017f08:	6061      	str	r1, [r4, #4]
 8017f0a:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade,"6C");
 8017f0c:	687b      	ldr	r3, [r7, #4]
 8017f0e:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8017f12:	4a14      	ldr	r2, [pc, #80]	; (8017f64 <problem_fetch+0x16900>)
 8017f14:	8811      	ldrh	r1, [r2, #0]
 8017f16:	7892      	ldrb	r2, [r2, #2]
 8017f18:	8019      	strh	r1, [r3, #0]
 8017f1a:	709a      	strb	r2, [r3, #2]
			p->moveSize = 6;
 8017f1c:	687b      	ldr	r3, [r7, #4]
 8017f1e:	2206      	movs	r2, #6
 8017f20:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,J,H,I,G,I");
 8017f22:	687b      	ldr	r3, [r7, #4]
 8017f24:	33a4      	adds	r3, #164	; 0xa4
 8017f26:	4a2b      	ldr	r2, [pc, #172]	; (8017fd4 <problem_fetch+0x16970>)
 8017f28:	461c      	mov	r4, r3
 8017f2a:	4613      	mov	r3, r2
 8017f2c:	cb07      	ldmia	r3!, {r0, r1, r2}
 8017f2e:	6020      	str	r0, [r4, #0]
 8017f30:	6061      	str	r1, [r4, #4]
 8017f32:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,7,10,14,17,18");
 8017f34:	687b      	ldr	r3, [r7, #4]
 8017f36:	3304      	adds	r3, #4
 8017f38:	4a27      	ldr	r2, [pc, #156]	; (8017fd8 <problem_fetch+0x16974>)
 8017f3a:	461c      	mov	r4, r3
 8017f3c:	4615      	mov	r5, r2
 8017f3e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8017f40:	6020      	str	r0, [r4, #0]
 8017f42:	6061      	str	r1, [r4, #4]
 8017f44:	60a2      	str	r2, [r4, #8]
 8017f46:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 8017f48:	687b      	ldr	r3, [r7, #4]
 8017f4a:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8017f4e:	4a1a      	ldr	r2, [pc, #104]	; (8017fb8 <problem_fetch+0x16954>)
 8017f50:	461c      	mov	r4, r3
 8017f52:	4613      	mov	r3, r2
 8017f54:	cb07      	ldmia	r3!, {r0, r1, r2}
 8017f56:	6020      	str	r0, [r4, #0]
 8017f58:	6061      	str	r1, [r4, #4]
 8017f5a:	60a2      	str	r2, [r4, #8]
			break;
 8017f5c:	f004 bab2 	b.w	801c4c4 <problem_fetch+0x1ae60>
 8017f60:	0802b8bc 	.word	0x0802b8bc
 8017f64:	08023bf0 	.word	0x08023bf0
 8017f68:	0802b8c4 	.word	0x0802b8c4
 8017f6c:	0802b8d4 	.word	0x0802b8d4
 8017f70:	08023c48 	.word	0x08023c48
 8017f74:	0802b8ec 	.word	0x0802b8ec
 8017f78:	08023ae4 	.word	0x08023ae4
 8017f7c:	0802b8f4 	.word	0x0802b8f4
 8017f80:	0802b904 	.word	0x0802b904
 8017f84:	08023cac 	.word	0x08023cac
 8017f88:	0802b918 	.word	0x0802b918
 8017f8c:	08023b24 	.word	0x08023b24
 8017f90:	0802b924 	.word	0x0802b924
 8017f94:	0802b934 	.word	0x0802b934
 8017f98:	0802b94c 	.word	0x0802b94c
 8017f9c:	0802b950 	.word	0x0802b950
 8017fa0:	0802b964 	.word	0x0802b964
 8017fa4:	08024b08 	.word	0x08024b08
 8017fa8:	0802b97c 	.word	0x0802b97c
 8017fac:	08023c60 	.word	0x08023c60
 8017fb0:	0802b990 	.word	0x0802b990
 8017fb4:	0802b99c 	.word	0x0802b99c
 8017fb8:	08023ec0 	.word	0x08023ec0
 8017fbc:	0802b9b0 	.word	0x0802b9b0
 8017fc0:	08024358 	.word	0x08024358
 8017fc4:	0802b9c0 	.word	0x0802b9c0
 8017fc8:	0802b9cc 	.word	0x0802b9cc
 8017fcc:	0802b9dc 	.word	0x0802b9dc
 8017fd0:	0802b9e8 	.word	0x0802b9e8
 8017fd4:	0802b9f4 	.word	0x0802b9f4
 8017fd8:	0802b51c 	.word	0x0802b51c
		case 672 :
			strcpy(p->name,"CRAYON PONYFISH");
 8017fdc:	687b      	ldr	r3, [r7, #4]
 8017fde:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8017fe2:	4aab      	ldr	r2, [pc, #684]	; (8018290 <problem_fetch+0x16c2c>)
 8017fe4:	461c      	mov	r4, r3
 8017fe6:	4615      	mov	r5, r2
 8017fe8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8017fea:	6020      	str	r0, [r4, #0]
 8017fec:	6061      	str	r1, [r4, #4]
 8017fee:	60a2      	str	r2, [r4, #8]
 8017ff0:	60e3      	str	r3, [r4, #12]
			strcpy(p->grade,"7A+");
 8017ff2:	687b      	ldr	r3, [r7, #4]
 8017ff4:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8017ff8:	4aa6      	ldr	r2, [pc, #664]	; (8018294 <problem_fetch+0x16c30>)
 8017ffa:	6810      	ldr	r0, [r2, #0]
 8017ffc:	6018      	str	r0, [r3, #0]
			p->moveSize = 5;
 8017ffe:	687b      	ldr	r3, [r7, #4]
 8018000:	2205      	movs	r2, #5
 8018002:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,H,C,I,D");
 8018004:	687b      	ldr	r3, [r7, #4]
 8018006:	33a4      	adds	r3, #164	; 0xa4
 8018008:	49a3      	ldr	r1, [pc, #652]	; (8018298 <problem_fetch+0x16c34>)
 801800a:	461a      	mov	r2, r3
 801800c:	460b      	mov	r3, r1
 801800e:	cb03      	ldmia	r3!, {r0, r1}
 8018010:	6010      	str	r0, [r2, #0]
 8018012:	6051      	str	r1, [r2, #4]
 8018014:	881b      	ldrh	r3, [r3, #0]
 8018016:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"5,10,13,14,18");
 8018018:	687b      	ldr	r3, [r7, #4]
 801801a:	3304      	adds	r3, #4
 801801c:	4a9f      	ldr	r2, [pc, #636]	; (801829c <problem_fetch+0x16c38>)
 801801e:	461c      	mov	r4, r3
 8018020:	4613      	mov	r3, r2
 8018022:	cb07      	ldmia	r3!, {r0, r1, r2}
 8018024:	6020      	str	r0, [r4, #0]
 8018026:	6061      	str	r1, [r4, #4]
 8018028:	60a2      	str	r2, [r4, #8]
 801802a:	881b      	ldrh	r3, [r3, #0]
 801802c:	81a3      	strh	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,e");
 801802e:	687b      	ldr	r3, [r7, #4]
 8018030:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8018034:	499a      	ldr	r1, [pc, #616]	; (80182a0 <problem_fetch+0x16c3c>)
 8018036:	461a      	mov	r2, r3
 8018038:	460b      	mov	r3, r1
 801803a:	cb03      	ldmia	r3!, {r0, r1}
 801803c:	6010      	str	r0, [r2, #0]
 801803e:	6051      	str	r1, [r2, #4]
 8018040:	881b      	ldrh	r3, [r3, #0]
 8018042:	8113      	strh	r3, [r2, #8]
			break;
 8018044:	f004 ba3e 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 673 :
			strcpy(p->name,"JAGUAR SHARK");
 8018048:	687b      	ldr	r3, [r7, #4]
 801804a:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801804e:	4a95      	ldr	r2, [pc, #596]	; (80182a4 <problem_fetch+0x16c40>)
 8018050:	461c      	mov	r4, r3
 8018052:	4613      	mov	r3, r2
 8018054:	cb07      	ldmia	r3!, {r0, r1, r2}
 8018056:	6020      	str	r0, [r4, #0]
 8018058:	6061      	str	r1, [r4, #4]
 801805a:	60a2      	str	r2, [r4, #8]
 801805c:	781b      	ldrb	r3, [r3, #0]
 801805e:	7323      	strb	r3, [r4, #12]
			strcpy(p->grade,"7A+");
 8018060:	687b      	ldr	r3, [r7, #4]
 8018062:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8018066:	4a8b      	ldr	r2, [pc, #556]	; (8018294 <problem_fetch+0x16c30>)
 8018068:	6810      	ldr	r0, [r2, #0]
 801806a:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 801806c:	687b      	ldr	r3, [r7, #4]
 801806e:	2207      	movs	r2, #7
 8018070:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,H,E,C,D,E,I");
 8018072:	687b      	ldr	r3, [r7, #4]
 8018074:	33a4      	adds	r3, #164	; 0xa4
 8018076:	4a8c      	ldr	r2, [pc, #560]	; (80182a8 <problem_fetch+0x16c44>)
 8018078:	461c      	mov	r4, r3
 801807a:	4613      	mov	r3, r2
 801807c:	cb07      	ldmia	r3!, {r0, r1, r2}
 801807e:	6020      	str	r0, [r4, #0]
 8018080:	6061      	str	r1, [r4, #4]
 8018082:	60a2      	str	r2, [r4, #8]
 8018084:	881b      	ldrh	r3, [r3, #0]
 8018086:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,10,12,13,15,16,18");
 8018088:	687b      	ldr	r3, [r7, #4]
 801808a:	3304      	adds	r3, #4
 801808c:	4a87      	ldr	r2, [pc, #540]	; (80182ac <problem_fetch+0x16c48>)
 801808e:	461d      	mov	r5, r3
 8018090:	4614      	mov	r4, r2
 8018092:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8018094:	6028      	str	r0, [r5, #0]
 8018096:	6069      	str	r1, [r5, #4]
 8018098:	60aa      	str	r2, [r5, #8]
 801809a:	60eb      	str	r3, [r5, #12]
 801809c:	6820      	ldr	r0, [r4, #0]
 801809e:	6128      	str	r0, [r5, #16]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 80180a0:	687b      	ldr	r3, [r7, #4]
 80180a2:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 80180a6:	4a82      	ldr	r2, [pc, #520]	; (80182b0 <problem_fetch+0x16c4c>)
 80180a8:	461c      	mov	r4, r3
 80180aa:	4613      	mov	r3, r2
 80180ac:	cb07      	ldmia	r3!, {r0, r1, r2}
 80180ae:	6020      	str	r0, [r4, #0]
 80180b0:	6061      	str	r1, [r4, #4]
 80180b2:	60a2      	str	r2, [r4, #8]
 80180b4:	881b      	ldrh	r3, [r3, #0]
 80180b6:	81a3      	strh	r3, [r4, #12]
			break;
 80180b8:	f004 ba04 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 674 :
			strcpy(p->name,"CEPPODE...");
 80180bc:	687b      	ldr	r3, [r7, #4]
 80180be:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80180c2:	497c      	ldr	r1, [pc, #496]	; (80182b4 <problem_fetch+0x16c50>)
 80180c4:	461a      	mov	r2, r3
 80180c6:	460b      	mov	r3, r1
 80180c8:	cb03      	ldmia	r3!, {r0, r1}
 80180ca:	6010      	str	r0, [r2, #0]
 80180cc:	6051      	str	r1, [r2, #4]
 80180ce:	8819      	ldrh	r1, [r3, #0]
 80180d0:	789b      	ldrb	r3, [r3, #2]
 80180d2:	8111      	strh	r1, [r2, #8]
 80180d4:	7293      	strb	r3, [r2, #10]
			strcpy(p->grade,"7A");
 80180d6:	687b      	ldr	r3, [r7, #4]
 80180d8:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80180dc:	4a76      	ldr	r2, [pc, #472]	; (80182b8 <problem_fetch+0x16c54>)
 80180de:	8811      	ldrh	r1, [r2, #0]
 80180e0:	7892      	ldrb	r2, [r2, #2]
 80180e2:	8019      	strh	r1, [r3, #0]
 80180e4:	709a      	strb	r2, [r3, #2]
			p->moveSize = 7;
 80180e6:	687b      	ldr	r3, [r7, #4]
 80180e8:	2207      	movs	r2, #7
 80180ea:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"C,H,H,E,H,D,D");
 80180ec:	687b      	ldr	r3, [r7, #4]
 80180ee:	33a4      	adds	r3, #164	; 0xa4
 80180f0:	4a72      	ldr	r2, [pc, #456]	; (80182bc <problem_fetch+0x16c58>)
 80180f2:	461c      	mov	r4, r3
 80180f4:	4613      	mov	r3, r2
 80180f6:	cb07      	ldmia	r3!, {r0, r1, r2}
 80180f8:	6020      	str	r0, [r4, #0]
 80180fa:	6061      	str	r1, [r4, #4]
 80180fc:	60a2      	str	r2, [r4, #8]
 80180fe:	881b      	ldrh	r3, [r3, #0]
 8018100:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,5,8,9,12,15,18");
 8018102:	687b      	ldr	r3, [r7, #4]
 8018104:	3304      	adds	r3, #4
 8018106:	4a6e      	ldr	r2, [pc, #440]	; (80182c0 <problem_fetch+0x16c5c>)
 8018108:	461d      	mov	r5, r3
 801810a:	4614      	mov	r4, r2
 801810c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801810e:	6028      	str	r0, [r5, #0]
 8018110:	6069      	str	r1, [r5, #4]
 8018112:	60aa      	str	r2, [r5, #8]
 8018114:	60eb      	str	r3, [r5, #12]
 8018116:	7823      	ldrb	r3, [r4, #0]
 8018118:	742b      	strb	r3, [r5, #16]
			strcpy(p->startFinish,"s,s,d,d,d,d,e");
 801811a:	687b      	ldr	r3, [r7, #4]
 801811c:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8018120:	4a68      	ldr	r2, [pc, #416]	; (80182c4 <problem_fetch+0x16c60>)
 8018122:	461c      	mov	r4, r3
 8018124:	4613      	mov	r3, r2
 8018126:	cb07      	ldmia	r3!, {r0, r1, r2}
 8018128:	6020      	str	r0, [r4, #0]
 801812a:	6061      	str	r1, [r4, #4]
 801812c:	60a2      	str	r2, [r4, #8]
 801812e:	881b      	ldrh	r3, [r3, #0]
 8018130:	81a3      	strh	r3, [r4, #12]
			break;
 8018132:	f004 b9c7 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 675 :
			strcpy(p->name,"NITERÓI 01");
 8018136:	687b      	ldr	r3, [r7, #4]
 8018138:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801813c:	4a62      	ldr	r2, [pc, #392]	; (80182c8 <problem_fetch+0x16c64>)
 801813e:	461c      	mov	r4, r3
 8018140:	4613      	mov	r3, r2
 8018142:	cb07      	ldmia	r3!, {r0, r1, r2}
 8018144:	6020      	str	r0, [r4, #0]
 8018146:	6061      	str	r1, [r4, #4]
 8018148:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade,"6C+");
 801814a:	687b      	ldr	r3, [r7, #4]
 801814c:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8018150:	4a5e      	ldr	r2, [pc, #376]	; (80182cc <problem_fetch+0x16c68>)
 8018152:	6810      	ldr	r0, [r2, #0]
 8018154:	6018      	str	r0, [r3, #0]
			p->moveSize = 9;
 8018156:	687b      	ldr	r3, [r7, #4]
 8018158:	2209      	movs	r2, #9
 801815a:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"C,B,D,C,E,D,G,G,I");
 801815c:	687b      	ldr	r3, [r7, #4]
 801815e:	33a4      	adds	r3, #164	; 0xa4
 8018160:	4a5b      	ldr	r2, [pc, #364]	; (80182d0 <problem_fetch+0x16c6c>)
 8018162:	461d      	mov	r5, r3
 8018164:	4614      	mov	r4, r2
 8018166:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8018168:	6028      	str	r0, [r5, #0]
 801816a:	6069      	str	r1, [r5, #4]
 801816c:	60aa      	str	r2, [r5, #8]
 801816e:	60eb      	str	r3, [r5, #12]
 8018170:	8823      	ldrh	r3, [r4, #0]
 8018172:	822b      	strh	r3, [r5, #16]
			strcpy(p->moveNumbers,"5,6,7,8,9,11,14,15,18");
 8018174:	687b      	ldr	r3, [r7, #4]
 8018176:	3304      	adds	r3, #4
 8018178:	4a56      	ldr	r2, [pc, #344]	; (80182d4 <problem_fetch+0x16c70>)
 801817a:	461d      	mov	r5, r3
 801817c:	4614      	mov	r4, r2
 801817e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8018180:	6028      	str	r0, [r5, #0]
 8018182:	6069      	str	r1, [r5, #4]
 8018184:	60aa      	str	r2, [r5, #8]
 8018186:	60eb      	str	r3, [r5, #12]
 8018188:	6820      	ldr	r0, [r4, #0]
 801818a:	6128      	str	r0, [r5, #16]
 801818c:	88a3      	ldrh	r3, [r4, #4]
 801818e:	82ab      	strh	r3, [r5, #20]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,d,e");
 8018190:	687b      	ldr	r3, [r7, #4]
 8018192:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8018196:	4a50      	ldr	r2, [pc, #320]	; (80182d8 <problem_fetch+0x16c74>)
 8018198:	461d      	mov	r5, r3
 801819a:	4614      	mov	r4, r2
 801819c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801819e:	6028      	str	r0, [r5, #0]
 80181a0:	6069      	str	r1, [r5, #4]
 80181a2:	60aa      	str	r2, [r5, #8]
 80181a4:	60eb      	str	r3, [r5, #12]
 80181a6:	8823      	ldrh	r3, [r4, #0]
 80181a8:	822b      	strh	r3, [r5, #16]
			break;
 80181aa:	f004 b98b 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 676 :
			strcpy(p->name,"HAMPUS NEDERLAG");
 80181ae:	687b      	ldr	r3, [r7, #4]
 80181b0:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80181b4:	4a49      	ldr	r2, [pc, #292]	; (80182dc <problem_fetch+0x16c78>)
 80181b6:	461c      	mov	r4, r3
 80181b8:	4615      	mov	r5, r2
 80181ba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80181bc:	6020      	str	r0, [r4, #0]
 80181be:	6061      	str	r1, [r4, #4]
 80181c0:	60a2      	str	r2, [r4, #8]
 80181c2:	60e3      	str	r3, [r4, #12]
			strcpy(p->grade,"6B+");
 80181c4:	687b      	ldr	r3, [r7, #4]
 80181c6:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80181ca:	4a45      	ldr	r2, [pc, #276]	; (80182e0 <problem_fetch+0x16c7c>)
 80181cc:	6810      	ldr	r0, [r2, #0]
 80181ce:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 80181d0:	687b      	ldr	r3, [r7, #4]
 80181d2:	2207      	movs	r2, #7
 80181d4:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"H,E,G,D,E,B,D");
 80181d6:	687b      	ldr	r3, [r7, #4]
 80181d8:	33a4      	adds	r3, #164	; 0xa4
 80181da:	4a42      	ldr	r2, [pc, #264]	; (80182e4 <problem_fetch+0x16c80>)
 80181dc:	461c      	mov	r4, r3
 80181de:	4613      	mov	r3, r2
 80181e0:	cb07      	ldmia	r3!, {r0, r1, r2}
 80181e2:	6020      	str	r0, [r4, #0]
 80181e4:	6061      	str	r1, [r4, #4]
 80181e6:	60a2      	str	r2, [r4, #8]
 80181e8:	881b      	ldrh	r3, [r3, #0]
 80181ea:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,6,9,11,12,15,18");
 80181ec:	687b      	ldr	r3, [r7, #4]
 80181ee:	3304      	adds	r3, #4
 80181f0:	4a3d      	ldr	r2, [pc, #244]	; (80182e8 <problem_fetch+0x16c84>)
 80181f2:	461d      	mov	r5, r3
 80181f4:	4614      	mov	r4, r2
 80181f6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80181f8:	6028      	str	r0, [r5, #0]
 80181fa:	6069      	str	r1, [r5, #4]
 80181fc:	60aa      	str	r2, [r5, #8]
 80181fe:	60eb      	str	r3, [r5, #12]
 8018200:	8823      	ldrh	r3, [r4, #0]
 8018202:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,s,d,d,d,d,e");
 8018204:	687b      	ldr	r3, [r7, #4]
 8018206:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 801820a:	4a2e      	ldr	r2, [pc, #184]	; (80182c4 <problem_fetch+0x16c60>)
 801820c:	461c      	mov	r4, r3
 801820e:	4613      	mov	r3, r2
 8018210:	cb07      	ldmia	r3!, {r0, r1, r2}
 8018212:	6020      	str	r0, [r4, #0]
 8018214:	6061      	str	r1, [r4, #4]
 8018216:	60a2      	str	r2, [r4, #8]
 8018218:	881b      	ldrh	r3, [r3, #0]
 801821a:	81a3      	strh	r3, [r4, #12]
			break;
 801821c:	f004 b952 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 677 :
			strcpy(p->name,"GRAYLING");
 8018220:	687b      	ldr	r3, [r7, #4]
 8018222:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8018226:	4931      	ldr	r1, [pc, #196]	; (80182ec <problem_fetch+0x16c88>)
 8018228:	461a      	mov	r2, r3
 801822a:	460b      	mov	r3, r1
 801822c:	cb03      	ldmia	r3!, {r0, r1}
 801822e:	6010      	str	r0, [r2, #0]
 8018230:	6051      	str	r1, [r2, #4]
 8018232:	781b      	ldrb	r3, [r3, #0]
 8018234:	7213      	strb	r3, [r2, #8]
			strcpy(p->grade,"6C+");
 8018236:	687b      	ldr	r3, [r7, #4]
 8018238:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801823c:	4a23      	ldr	r2, [pc, #140]	; (80182cc <problem_fetch+0x16c68>)
 801823e:	6810      	ldr	r0, [r2, #0]
 8018240:	6018      	str	r0, [r3, #0]
			p->moveSize = 8;
 8018242:	687b      	ldr	r3, [r7, #4]
 8018244:	2208      	movs	r2, #8
 8018246:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,I,H,G,F,E,D,D");
 8018248:	687b      	ldr	r3, [r7, #4]
 801824a:	33a4      	adds	r3, #164	; 0xa4
 801824c:	4a28      	ldr	r2, [pc, #160]	; (80182f0 <problem_fetch+0x16c8c>)
 801824e:	461c      	mov	r4, r3
 8018250:	4615      	mov	r5, r2
 8018252:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8018254:	6020      	str	r0, [r4, #0]
 8018256:	6061      	str	r1, [r4, #4]
 8018258:	60a2      	str	r2, [r4, #8]
 801825a:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,7,8,9,11,12,15,18");
 801825c:	687b      	ldr	r3, [r7, #4]
 801825e:	3304      	adds	r3, #4
 8018260:	4a24      	ldr	r2, [pc, #144]	; (80182f4 <problem_fetch+0x16c90>)
 8018262:	461d      	mov	r5, r3
 8018264:	4614      	mov	r4, r2
 8018266:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8018268:	6028      	str	r0, [r5, #0]
 801826a:	6069      	str	r1, [r5, #4]
 801826c:	60aa      	str	r2, [r5, #8]
 801826e:	60eb      	str	r3, [r5, #12]
 8018270:	6820      	ldr	r0, [r4, #0]
 8018272:	6128      	str	r0, [r5, #16]
			strcpy(p->startFinish,"s,d,d,d,d,d,d,e");
 8018274:	687b      	ldr	r3, [r7, #4]
 8018276:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 801827a:	4a1f      	ldr	r2, [pc, #124]	; (80182f8 <problem_fetch+0x16c94>)
 801827c:	461c      	mov	r4, r3
 801827e:	4615      	mov	r5, r2
 8018280:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8018282:	6020      	str	r0, [r4, #0]
 8018284:	6061      	str	r1, [r4, #4]
 8018286:	60a2      	str	r2, [r4, #8]
 8018288:	60e3      	str	r3, [r4, #12]
			break;
 801828a:	f004 b91b 	b.w	801c4c4 <problem_fetch+0x1ae60>
 801828e:	bf00      	nop
 8018290:	0802ba00 	.word	0x0802ba00
 8018294:	08023cc4 	.word	0x08023cc4
 8018298:	0802ba10 	.word	0x0802ba10
 801829c:	08027924 	.word	0x08027924
 80182a0:	08023ff0 	.word	0x08023ff0
 80182a4:	0802ba1c 	.word	0x0802ba1c
 80182a8:	0802ba2c 	.word	0x0802ba2c
 80182ac:	0802ba3c 	.word	0x0802ba3c
 80182b0:	08023cac 	.word	0x08023cac
 80182b4:	0802ba50 	.word	0x0802ba50
 80182b8:	08023ae4 	.word	0x08023ae4
 80182bc:	0802ba5c 	.word	0x0802ba5c
 80182c0:	0802ba6c 	.word	0x0802ba6c
 80182c4:	08023b9c 	.word	0x08023b9c
 80182c8:	0802ba80 	.word	0x0802ba80
 80182cc:	08023bbc 	.word	0x08023bbc
 80182d0:	0802ba8c 	.word	0x0802ba8c
 80182d4:	0802baa0 	.word	0x0802baa0
 80182d8:	08024b08 	.word	0x08024b08
 80182dc:	0802bab8 	.word	0x0802bab8
 80182e0:	08023b24 	.word	0x08023b24
 80182e4:	0802bac8 	.word	0x0802bac8
 80182e8:	0802bad8 	.word	0x0802bad8
 80182ec:	0802baec 	.word	0x0802baec
 80182f0:	0802baf8 	.word	0x0802baf8
 80182f4:	0802bb08 	.word	0x0802bb08
 80182f8:	08023d34 	.word	0x08023d34
		case 678 :
			strcpy(p->name,"TAMAS DYNOMITE");
 80182fc:	687b      	ldr	r3, [r7, #4]
 80182fe:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8018302:	4aaa      	ldr	r2, [pc, #680]	; (80185ac <problem_fetch+0x16f48>)
 8018304:	461c      	mov	r4, r3
 8018306:	4613      	mov	r3, r2
 8018308:	cb07      	ldmia	r3!, {r0, r1, r2}
 801830a:	6020      	str	r0, [r4, #0]
 801830c:	6061      	str	r1, [r4, #4]
 801830e:	60a2      	str	r2, [r4, #8]
 8018310:	881a      	ldrh	r2, [r3, #0]
 8018312:	789b      	ldrb	r3, [r3, #2]
 8018314:	81a2      	strh	r2, [r4, #12]
 8018316:	73a3      	strb	r3, [r4, #14]
			strcpy(p->grade,"6C");
 8018318:	687b      	ldr	r3, [r7, #4]
 801831a:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801831e:	4aa4      	ldr	r2, [pc, #656]	; (80185b0 <problem_fetch+0x16f4c>)
 8018320:	8811      	ldrh	r1, [r2, #0]
 8018322:	7892      	ldrb	r2, [r2, #2]
 8018324:	8019      	strh	r1, [r3, #0]
 8018326:	709a      	strb	r2, [r3, #2]
			p->moveSize = 6;
 8018328:	687b      	ldr	r3, [r7, #4]
 801832a:	2206      	movs	r2, #6
 801832c:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,J,H,C,D,D");
 801832e:	687b      	ldr	r3, [r7, #4]
 8018330:	33a4      	adds	r3, #164	; 0xa4
 8018332:	4aa0      	ldr	r2, [pc, #640]	; (80185b4 <problem_fetch+0x16f50>)
 8018334:	461c      	mov	r4, r3
 8018336:	4613      	mov	r3, r2
 8018338:	cb07      	ldmia	r3!, {r0, r1, r2}
 801833a:	6020      	str	r0, [r4, #0]
 801833c:	6061      	str	r1, [r4, #4]
 801833e:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,5,10,13,15,18");
 8018340:	687b      	ldr	r3, [r7, #4]
 8018342:	3304      	adds	r3, #4
 8018344:	4a9c      	ldr	r2, [pc, #624]	; (80185b8 <problem_fetch+0x16f54>)
 8018346:	461c      	mov	r4, r3
 8018348:	4615      	mov	r5, r2
 801834a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801834c:	6020      	str	r0, [r4, #0]
 801834e:	6061      	str	r1, [r4, #4]
 8018350:	60a2      	str	r2, [r4, #8]
 8018352:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,s,d,d,d,e");
 8018354:	687b      	ldr	r3, [r7, #4]
 8018356:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 801835a:	4a98      	ldr	r2, [pc, #608]	; (80185bc <problem_fetch+0x16f58>)
 801835c:	461c      	mov	r4, r3
 801835e:	4613      	mov	r3, r2
 8018360:	cb07      	ldmia	r3!, {r0, r1, r2}
 8018362:	6020      	str	r0, [r4, #0]
 8018364:	6061      	str	r1, [r4, #4]
 8018366:	60a2      	str	r2, [r4, #8]
			break;
 8018368:	f004 b8ac 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 679 :
			strcpy(p->name,"SCHWERE LEITER");
 801836c:	687b      	ldr	r3, [r7, #4]
 801836e:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8018372:	4a93      	ldr	r2, [pc, #588]	; (80185c0 <problem_fetch+0x16f5c>)
 8018374:	461c      	mov	r4, r3
 8018376:	4613      	mov	r3, r2
 8018378:	cb07      	ldmia	r3!, {r0, r1, r2}
 801837a:	6020      	str	r0, [r4, #0]
 801837c:	6061      	str	r1, [r4, #4]
 801837e:	60a2      	str	r2, [r4, #8]
 8018380:	881a      	ldrh	r2, [r3, #0]
 8018382:	789b      	ldrb	r3, [r3, #2]
 8018384:	81a2      	strh	r2, [r4, #12]
 8018386:	73a3      	strb	r3, [r4, #14]
			strcpy(p->grade,"7A");
 8018388:	687b      	ldr	r3, [r7, #4]
 801838a:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801838e:	4a8d      	ldr	r2, [pc, #564]	; (80185c4 <problem_fetch+0x16f60>)
 8018390:	8811      	ldrh	r1, [r2, #0]
 8018392:	7892      	ldrb	r2, [r2, #2]
 8018394:	8019      	strh	r1, [r3, #0]
 8018396:	709a      	strb	r2, [r3, #2]
			p->moveSize = 7;
 8018398:	687b      	ldr	r3, [r7, #4]
 801839a:	2207      	movs	r2, #7
 801839c:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"E,E,E,E,E,E,D");
 801839e:	687b      	ldr	r3, [r7, #4]
 80183a0:	33a4      	adds	r3, #164	; 0xa4
 80183a2:	4a89      	ldr	r2, [pc, #548]	; (80185c8 <problem_fetch+0x16f64>)
 80183a4:	461c      	mov	r4, r3
 80183a6:	4613      	mov	r3, r2
 80183a8:	cb07      	ldmia	r3!, {r0, r1, r2}
 80183aa:	6020      	str	r0, [r4, #0]
 80183ac:	6061      	str	r1, [r4, #4]
 80183ae:	60a2      	str	r2, [r4, #8]
 80183b0:	881b      	ldrh	r3, [r3, #0]
 80183b2:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"6,8,9,12,14,16,18");
 80183b4:	687b      	ldr	r3, [r7, #4]
 80183b6:	3304      	adds	r3, #4
 80183b8:	4a84      	ldr	r2, [pc, #528]	; (80185cc <problem_fetch+0x16f68>)
 80183ba:	461d      	mov	r5, r3
 80183bc:	4614      	mov	r4, r2
 80183be:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80183c0:	6028      	str	r0, [r5, #0]
 80183c2:	6069      	str	r1, [r5, #4]
 80183c4:	60aa      	str	r2, [r5, #8]
 80183c6:	60eb      	str	r3, [r5, #12]
 80183c8:	8823      	ldrh	r3, [r4, #0]
 80183ca:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 80183cc:	687b      	ldr	r3, [r7, #4]
 80183ce:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 80183d2:	4a7f      	ldr	r2, [pc, #508]	; (80185d0 <problem_fetch+0x16f6c>)
 80183d4:	461c      	mov	r4, r3
 80183d6:	4613      	mov	r3, r2
 80183d8:	cb07      	ldmia	r3!, {r0, r1, r2}
 80183da:	6020      	str	r0, [r4, #0]
 80183dc:	6061      	str	r1, [r4, #4]
 80183de:	60a2      	str	r2, [r4, #8]
 80183e0:	881b      	ldrh	r3, [r3, #0]
 80183e2:	81a3      	strh	r3, [r4, #12]
			break;
 80183e4:	f004 b86e 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 680 :
			strcpy(p->name,"MARK'S FAVORITE PROBLEM");
 80183e8:	687b      	ldr	r3, [r7, #4]
 80183ea:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80183ee:	4a79      	ldr	r2, [pc, #484]	; (80185d4 <problem_fetch+0x16f70>)
 80183f0:	461d      	mov	r5, r3
 80183f2:	4614      	mov	r4, r2
 80183f4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80183f6:	6028      	str	r0, [r5, #0]
 80183f8:	6069      	str	r1, [r5, #4]
 80183fa:	60aa      	str	r2, [r5, #8]
 80183fc:	60eb      	str	r3, [r5, #12]
 80183fe:	cc03      	ldmia	r4!, {r0, r1}
 8018400:	6128      	str	r0, [r5, #16]
 8018402:	6169      	str	r1, [r5, #20]
			strcpy(p->grade,"7B");
 8018404:	687b      	ldr	r3, [r7, #4]
 8018406:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801840a:	4a73      	ldr	r2, [pc, #460]	; (80185d8 <problem_fetch+0x16f74>)
 801840c:	8811      	ldrh	r1, [r2, #0]
 801840e:	7892      	ldrb	r2, [r2, #2]
 8018410:	8019      	strh	r1, [r3, #0]
 8018412:	709a      	strb	r2, [r3, #2]
			p->moveSize = 7;
 8018414:	687b      	ldr	r3, [r7, #4]
 8018416:	2207      	movs	r2, #7
 8018418:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"A,C,D,E,F,F,G");
 801841a:	687b      	ldr	r3, [r7, #4]
 801841c:	33a4      	adds	r3, #164	; 0xa4
 801841e:	4a6f      	ldr	r2, [pc, #444]	; (80185dc <problem_fetch+0x16f78>)
 8018420:	461c      	mov	r4, r3
 8018422:	4613      	mov	r3, r2
 8018424:	cb07      	ldmia	r3!, {r0, r1, r2}
 8018426:	6020      	str	r0, [r4, #0]
 8018428:	6061      	str	r1, [r4, #4]
 801842a:	60a2      	str	r2, [r4, #8]
 801842c:	881b      	ldrh	r3, [r3, #0]
 801842e:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"9,5,18,6,13,11,15");
 8018430:	687b      	ldr	r3, [r7, #4]
 8018432:	3304      	adds	r3, #4
 8018434:	4a6a      	ldr	r2, [pc, #424]	; (80185e0 <problem_fetch+0x16f7c>)
 8018436:	461d      	mov	r5, r3
 8018438:	4614      	mov	r4, r2
 801843a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801843c:	6028      	str	r0, [r5, #0]
 801843e:	6069      	str	r1, [r5, #4]
 8018440:	60aa      	str	r2, [r5, #8]
 8018442:	60eb      	str	r3, [r5, #12]
 8018444:	8823      	ldrh	r3, [r4, #0]
 8018446:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"d,s,e,s,d,d,d");
 8018448:	687b      	ldr	r3, [r7, #4]
 801844a:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 801844e:	4a65      	ldr	r2, [pc, #404]	; (80185e4 <problem_fetch+0x16f80>)
 8018450:	461c      	mov	r4, r3
 8018452:	4613      	mov	r3, r2
 8018454:	cb07      	ldmia	r3!, {r0, r1, r2}
 8018456:	6020      	str	r0, [r4, #0]
 8018458:	6061      	str	r1, [r4, #4]
 801845a:	60a2      	str	r2, [r4, #8]
 801845c:	881b      	ldrh	r3, [r3, #0]
 801845e:	81a3      	strh	r3, [r4, #12]
			break;
 8018460:	f004 b830 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 681 :
			strcpy(p->name,"SUC");
 8018464:	687b      	ldr	r3, [r7, #4]
 8018466:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801846a:	4a5f      	ldr	r2, [pc, #380]	; (80185e8 <problem_fetch+0x16f84>)
 801846c:	6810      	ldr	r0, [r2, #0]
 801846e:	6018      	str	r0, [r3, #0]
			strcpy(p->grade,"7A+");
 8018470:	687b      	ldr	r3, [r7, #4]
 8018472:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8018476:	4a5d      	ldr	r2, [pc, #372]	; (80185ec <problem_fetch+0x16f88>)
 8018478:	6810      	ldr	r0, [r2, #0]
 801847a:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 801847c:	687b      	ldr	r3, [r7, #4]
 801847e:	2206      	movs	r2, #6
 8018480:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"E,J,F,B,G,I");
 8018482:	687b      	ldr	r3, [r7, #4]
 8018484:	33a4      	adds	r3, #164	; 0xa4
 8018486:	4a5a      	ldr	r2, [pc, #360]	; (80185f0 <problem_fetch+0x16f8c>)
 8018488:	461c      	mov	r4, r3
 801848a:	4613      	mov	r3, r2
 801848c:	cb07      	ldmia	r3!, {r0, r1, r2}
 801848e:	6020      	str	r0, [r4, #0]
 8018490:	6061      	str	r1, [r4, #4]
 8018492:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"6,5,11,15,17,18");
 8018494:	687b      	ldr	r3, [r7, #4]
 8018496:	3304      	adds	r3, #4
 8018498:	4a56      	ldr	r2, [pc, #344]	; (80185f4 <problem_fetch+0x16f90>)
 801849a:	461c      	mov	r4, r3
 801849c:	4615      	mov	r5, r2
 801849e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80184a0:	6020      	str	r0, [r4, #0]
 80184a2:	6061      	str	r1, [r4, #4]
 80184a4:	60a2      	str	r2, [r4, #8]
 80184a6:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,s,d,d,d,e");
 80184a8:	687b      	ldr	r3, [r7, #4]
 80184aa:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 80184ae:	4a43      	ldr	r2, [pc, #268]	; (80185bc <problem_fetch+0x16f58>)
 80184b0:	461c      	mov	r4, r3
 80184b2:	4613      	mov	r3, r2
 80184b4:	cb07      	ldmia	r3!, {r0, r1, r2}
 80184b6:	6020      	str	r0, [r4, #0]
 80184b8:	6061      	str	r1, [r4, #4]
 80184ba:	60a2      	str	r2, [r4, #8]
			break;
 80184bc:	f004 b802 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 682 :
			strcpy(p->name,"ON OUR HEEL");
 80184c0:	687b      	ldr	r3, [r7, #4]
 80184c2:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80184c6:	4a4c      	ldr	r2, [pc, #304]	; (80185f8 <problem_fetch+0x16f94>)
 80184c8:	461c      	mov	r4, r3
 80184ca:	4613      	mov	r3, r2
 80184cc:	cb07      	ldmia	r3!, {r0, r1, r2}
 80184ce:	6020      	str	r0, [r4, #0]
 80184d0:	6061      	str	r1, [r4, #4]
 80184d2:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade,"6C");
 80184d4:	687b      	ldr	r3, [r7, #4]
 80184d6:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80184da:	4a35      	ldr	r2, [pc, #212]	; (80185b0 <problem_fetch+0x16f4c>)
 80184dc:	8811      	ldrh	r1, [r2, #0]
 80184de:	7892      	ldrb	r2, [r2, #2]
 80184e0:	8019      	strh	r1, [r3, #0]
 80184e2:	709a      	strb	r2, [r3, #2]
			p->moveSize = 7;
 80184e4:	687b      	ldr	r3, [r7, #4]
 80184e6:	2207      	movs	r2, #7
 80184e8:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,G,K,H,C,E,D");
 80184ea:	687b      	ldr	r3, [r7, #4]
 80184ec:	33a4      	adds	r3, #164	; 0xa4
 80184ee:	4a43      	ldr	r2, [pc, #268]	; (80185fc <problem_fetch+0x16f98>)
 80184f0:	461c      	mov	r4, r3
 80184f2:	4613      	mov	r3, r2
 80184f4:	cb07      	ldmia	r3!, {r0, r1, r2}
 80184f6:	6020      	str	r0, [r4, #0]
 80184f8:	6061      	str	r1, [r4, #4]
 80184fa:	60a2      	str	r2, [r4, #8]
 80184fc:	881b      	ldrh	r3, [r3, #0]
 80184fe:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,6,9,10,13,16,18");
 8018500:	687b      	ldr	r3, [r7, #4]
 8018502:	3304      	adds	r3, #4
 8018504:	4a3e      	ldr	r2, [pc, #248]	; (8018600 <problem_fetch+0x16f9c>)
 8018506:	461d      	mov	r5, r3
 8018508:	4614      	mov	r4, r2
 801850a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801850c:	6028      	str	r0, [r5, #0]
 801850e:	6069      	str	r1, [r5, #4]
 8018510:	60aa      	str	r2, [r5, #8]
 8018512:	60eb      	str	r3, [r5, #12]
 8018514:	8823      	ldrh	r3, [r4, #0]
 8018516:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,s,d,d,d,d,e");
 8018518:	687b      	ldr	r3, [r7, #4]
 801851a:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 801851e:	4a39      	ldr	r2, [pc, #228]	; (8018604 <problem_fetch+0x16fa0>)
 8018520:	461c      	mov	r4, r3
 8018522:	4613      	mov	r3, r2
 8018524:	cb07      	ldmia	r3!, {r0, r1, r2}
 8018526:	6020      	str	r0, [r4, #0]
 8018528:	6061      	str	r1, [r4, #4]
 801852a:	60a2      	str	r2, [r4, #8]
 801852c:	881b      	ldrh	r3, [r3, #0]
 801852e:	81a3      	strh	r3, [r4, #12]
			break;
 8018530:	f003 bfc8 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 683 :
			strcpy(p->name,"LOUDREIGN");
 8018534:	687b      	ldr	r3, [r7, #4]
 8018536:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801853a:	4933      	ldr	r1, [pc, #204]	; (8018608 <problem_fetch+0x16fa4>)
 801853c:	461a      	mov	r2, r3
 801853e:	460b      	mov	r3, r1
 8018540:	cb03      	ldmia	r3!, {r0, r1}
 8018542:	6010      	str	r0, [r2, #0]
 8018544:	6051      	str	r1, [r2, #4]
 8018546:	881b      	ldrh	r3, [r3, #0]
 8018548:	8113      	strh	r3, [r2, #8]
			strcpy(p->grade,"6B+");
 801854a:	687b      	ldr	r3, [r7, #4]
 801854c:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8018550:	4a2e      	ldr	r2, [pc, #184]	; (801860c <problem_fetch+0x16fa8>)
 8018552:	6810      	ldr	r0, [r2, #0]
 8018554:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 8018556:	687b      	ldr	r3, [r7, #4]
 8018558:	2207      	movs	r2, #7
 801855a:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,H,I,J,E,E,A");
 801855c:	687b      	ldr	r3, [r7, #4]
 801855e:	33a4      	adds	r3, #164	; 0xa4
 8018560:	4a2b      	ldr	r2, [pc, #172]	; (8018610 <problem_fetch+0x16fac>)
 8018562:	461c      	mov	r4, r3
 8018564:	4613      	mov	r3, r2
 8018566:	cb07      	ldmia	r3!, {r0, r1, r2}
 8018568:	6020      	str	r0, [r4, #0]
 801856a:	6061      	str	r1, [r4, #4]
 801856c:	60a2      	str	r2, [r4, #8]
 801856e:	881b      	ldrh	r3, [r3, #0]
 8018570:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,8,10,12,14,16,18");
 8018572:	687b      	ldr	r3, [r7, #4]
 8018574:	3304      	adds	r3, #4
 8018576:	4a27      	ldr	r2, [pc, #156]	; (8018614 <problem_fetch+0x16fb0>)
 8018578:	461d      	mov	r5, r3
 801857a:	4614      	mov	r4, r2
 801857c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801857e:	6028      	str	r0, [r5, #0]
 8018580:	6069      	str	r1, [r5, #4]
 8018582:	60aa      	str	r2, [r5, #8]
 8018584:	60eb      	str	r3, [r5, #12]
 8018586:	8823      	ldrh	r3, [r4, #0]
 8018588:	78a2      	ldrb	r2, [r4, #2]
 801858a:	822b      	strh	r3, [r5, #16]
 801858c:	4613      	mov	r3, r2
 801858e:	74ab      	strb	r3, [r5, #18]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 8018590:	687b      	ldr	r3, [r7, #4]
 8018592:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8018596:	4a0e      	ldr	r2, [pc, #56]	; (80185d0 <problem_fetch+0x16f6c>)
 8018598:	461c      	mov	r4, r3
 801859a:	4613      	mov	r3, r2
 801859c:	cb07      	ldmia	r3!, {r0, r1, r2}
 801859e:	6020      	str	r0, [r4, #0]
 80185a0:	6061      	str	r1, [r4, #4]
 80185a2:	60a2      	str	r2, [r4, #8]
 80185a4:	881b      	ldrh	r3, [r3, #0]
 80185a6:	81a3      	strh	r3, [r4, #12]
			break;
 80185a8:	f003 bf8c 	b.w	801c4c4 <problem_fetch+0x1ae60>
 80185ac:	0802bb1c 	.word	0x0802bb1c
 80185b0:	08023bf0 	.word	0x08023bf0
 80185b4:	0802bb2c 	.word	0x0802bb2c
 80185b8:	0802bb38 	.word	0x0802bb38
 80185bc:	08023b04 	.word	0x08023b04
 80185c0:	0802bb48 	.word	0x0802bb48
 80185c4:	08023ae4 	.word	0x08023ae4
 80185c8:	0802bb58 	.word	0x0802bb58
 80185cc:	0802bb68 	.word	0x0802bb68
 80185d0:	08023cac 	.word	0x08023cac
 80185d4:	0802bb7c 	.word	0x0802bb7c
 80185d8:	0802421c 	.word	0x0802421c
 80185dc:	0802bb94 	.word	0x0802bb94
 80185e0:	0802bba4 	.word	0x0802bba4
 80185e4:	0802bbb8 	.word	0x0802bbb8
 80185e8:	0802bbc8 	.word	0x0802bbc8
 80185ec:	08023cc4 	.word	0x08023cc4
 80185f0:	0802bbcc 	.word	0x0802bbcc
 80185f4:	0802bbd8 	.word	0x0802bbd8
 80185f8:	0802bbe8 	.word	0x0802bbe8
 80185fc:	0802bbf4 	.word	0x0802bbf4
 8018600:	0802bc04 	.word	0x0802bc04
 8018604:	08023b9c 	.word	0x08023b9c
 8018608:	0802bc18 	.word	0x0802bc18
 801860c:	08023b24 	.word	0x08023b24
 8018610:	0802bc24 	.word	0x0802bc24
 8018614:	0802bc34 	.word	0x0802bc34
		case 684 :
			strcpy(p->name,"AB4");
 8018618:	687b      	ldr	r3, [r7, #4]
 801861a:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801861e:	4ab8      	ldr	r2, [pc, #736]	; (8018900 <problem_fetch+0x1729c>)
 8018620:	6810      	ldr	r0, [r2, #0]
 8018622:	6018      	str	r0, [r3, #0]
			strcpy(p->grade,"6B+");
 8018624:	687b      	ldr	r3, [r7, #4]
 8018626:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801862a:	4ab6      	ldr	r2, [pc, #728]	; (8018904 <problem_fetch+0x172a0>)
 801862c:	6810      	ldr	r0, [r2, #0]
 801862e:	6018      	str	r0, [r3, #0]
			p->moveSize = 9;
 8018630:	687b      	ldr	r3, [r7, #4]
 8018632:	2209      	movs	r2, #9
 8018634:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"C,E,E,F,F,I,I,K,I");
 8018636:	687b      	ldr	r3, [r7, #4]
 8018638:	33a4      	adds	r3, #164	; 0xa4
 801863a:	4ab3      	ldr	r2, [pc, #716]	; (8018908 <problem_fetch+0x172a4>)
 801863c:	461d      	mov	r5, r3
 801863e:	4614      	mov	r4, r2
 8018640:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8018642:	6028      	str	r0, [r5, #0]
 8018644:	6069      	str	r1, [r5, #4]
 8018646:	60aa      	str	r2, [r5, #8]
 8018648:	60eb      	str	r3, [r5, #12]
 801864a:	8823      	ldrh	r3, [r4, #0]
 801864c:	822b      	strh	r3, [r5, #16]
			strcpy(p->moveNumbers,"5,6,8,11,13,14,15,16,18");
 801864e:	687b      	ldr	r3, [r7, #4]
 8018650:	3304      	adds	r3, #4
 8018652:	4aae      	ldr	r2, [pc, #696]	; (801890c <problem_fetch+0x172a8>)
 8018654:	461d      	mov	r5, r3
 8018656:	4614      	mov	r4, r2
 8018658:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801865a:	6028      	str	r0, [r5, #0]
 801865c:	6069      	str	r1, [r5, #4]
 801865e:	60aa      	str	r2, [r5, #8]
 8018660:	60eb      	str	r3, [r5, #12]
 8018662:	cc03      	ldmia	r4!, {r0, r1}
 8018664:	6128      	str	r0, [r5, #16]
 8018666:	6169      	str	r1, [r5, #20]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,d,e");
 8018668:	687b      	ldr	r3, [r7, #4]
 801866a:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 801866e:	4aa8      	ldr	r2, [pc, #672]	; (8018910 <problem_fetch+0x172ac>)
 8018670:	461d      	mov	r5, r3
 8018672:	4614      	mov	r4, r2
 8018674:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8018676:	6028      	str	r0, [r5, #0]
 8018678:	6069      	str	r1, [r5, #4]
 801867a:	60aa      	str	r2, [r5, #8]
 801867c:	60eb      	str	r3, [r5, #12]
 801867e:	8823      	ldrh	r3, [r4, #0]
 8018680:	822b      	strh	r3, [r5, #16]
			break;
 8018682:	f003 bf1f 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 685 :
			strcpy(p->name,"LACERQUA");
 8018686:	687b      	ldr	r3, [r7, #4]
 8018688:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801868c:	49a1      	ldr	r1, [pc, #644]	; (8018914 <problem_fetch+0x172b0>)
 801868e:	461a      	mov	r2, r3
 8018690:	460b      	mov	r3, r1
 8018692:	cb03      	ldmia	r3!, {r0, r1}
 8018694:	6010      	str	r0, [r2, #0]
 8018696:	6051      	str	r1, [r2, #4]
 8018698:	781b      	ldrb	r3, [r3, #0]
 801869a:	7213      	strb	r3, [r2, #8]
			strcpy(p->grade,"7B+");
 801869c:	687b      	ldr	r3, [r7, #4]
 801869e:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80186a2:	4a9d      	ldr	r2, [pc, #628]	; (8018918 <problem_fetch+0x172b4>)
 80186a4:	6810      	ldr	r0, [r2, #0]
 80186a6:	6018      	str	r0, [r3, #0]
			p->moveSize = 5;
 80186a8:	687b      	ldr	r3, [r7, #4]
 80186aa:	2205      	movs	r2, #5
 80186ac:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,H,E,G,D");
 80186ae:	687b      	ldr	r3, [r7, #4]
 80186b0:	33a4      	adds	r3, #164	; 0xa4
 80186b2:	499a      	ldr	r1, [pc, #616]	; (801891c <problem_fetch+0x172b8>)
 80186b4:	461a      	mov	r2, r3
 80186b6:	460b      	mov	r3, r1
 80186b8:	cb03      	ldmia	r3!, {r0, r1}
 80186ba:	6010      	str	r0, [r2, #0]
 80186bc:	6051      	str	r1, [r2, #4]
 80186be:	881b      	ldrh	r3, [r3, #0]
 80186c0:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"5,8,9,14,18");
 80186c2:	687b      	ldr	r3, [r7, #4]
 80186c4:	3304      	adds	r3, #4
 80186c6:	4a96      	ldr	r2, [pc, #600]	; (8018920 <problem_fetch+0x172bc>)
 80186c8:	461c      	mov	r4, r3
 80186ca:	4613      	mov	r3, r2
 80186cc:	cb07      	ldmia	r3!, {r0, r1, r2}
 80186ce:	6020      	str	r0, [r4, #0]
 80186d0:	6061      	str	r1, [r4, #4]
 80186d2:	60a2      	str	r2, [r4, #8]
			strcpy(p->startFinish,"s,d,d,d,e");
 80186d4:	687b      	ldr	r3, [r7, #4]
 80186d6:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 80186da:	4992      	ldr	r1, [pc, #584]	; (8018924 <problem_fetch+0x172c0>)
 80186dc:	461a      	mov	r2, r3
 80186de:	460b      	mov	r3, r1
 80186e0:	cb03      	ldmia	r3!, {r0, r1}
 80186e2:	6010      	str	r0, [r2, #0]
 80186e4:	6051      	str	r1, [r2, #4]
 80186e6:	881b      	ldrh	r3, [r3, #0]
 80186e8:	8113      	strh	r3, [r2, #8]
			break;
 80186ea:	f003 beeb 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 686 :
			strcpy(p->name,"ZEUS");
 80186ee:	687b      	ldr	r3, [r7, #4]
 80186f0:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80186f4:	4a8c      	ldr	r2, [pc, #560]	; (8018928 <problem_fetch+0x172c4>)
 80186f6:	6810      	ldr	r0, [r2, #0]
 80186f8:	6018      	str	r0, [r3, #0]
 80186fa:	7912      	ldrb	r2, [r2, #4]
 80186fc:	711a      	strb	r2, [r3, #4]
			strcpy(p->grade,"6C");
 80186fe:	687b      	ldr	r3, [r7, #4]
 8018700:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8018704:	4a89      	ldr	r2, [pc, #548]	; (801892c <problem_fetch+0x172c8>)
 8018706:	8811      	ldrh	r1, [r2, #0]
 8018708:	7892      	ldrb	r2, [r2, #2]
 801870a:	8019      	strh	r1, [r3, #0]
 801870c:	709a      	strb	r2, [r3, #2]
			p->moveSize = 5;
 801870e:	687b      	ldr	r3, [r7, #4]
 8018710:	2205      	movs	r2, #5
 8018712:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"E,H,B,D,D");
 8018714:	687b      	ldr	r3, [r7, #4]
 8018716:	33a4      	adds	r3, #164	; 0xa4
 8018718:	4985      	ldr	r1, [pc, #532]	; (8018930 <problem_fetch+0x172cc>)
 801871a:	461a      	mov	r2, r3
 801871c:	460b      	mov	r3, r1
 801871e:	cb03      	ldmia	r3!, {r0, r1}
 8018720:	6010      	str	r0, [r2, #0]
 8018722:	6051      	str	r1, [r2, #4]
 8018724:	881b      	ldrh	r3, [r3, #0]
 8018726:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"6,10,10,15,18");
 8018728:	687b      	ldr	r3, [r7, #4]
 801872a:	3304      	adds	r3, #4
 801872c:	4a81      	ldr	r2, [pc, #516]	; (8018934 <problem_fetch+0x172d0>)
 801872e:	461c      	mov	r4, r3
 8018730:	4613      	mov	r3, r2
 8018732:	cb07      	ldmia	r3!, {r0, r1, r2}
 8018734:	6020      	str	r0, [r4, #0]
 8018736:	6061      	str	r1, [r4, #4]
 8018738:	60a2      	str	r2, [r4, #8]
 801873a:	881b      	ldrh	r3, [r3, #0]
 801873c:	81a3      	strh	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,e");
 801873e:	687b      	ldr	r3, [r7, #4]
 8018740:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8018744:	4977      	ldr	r1, [pc, #476]	; (8018924 <problem_fetch+0x172c0>)
 8018746:	461a      	mov	r2, r3
 8018748:	460b      	mov	r3, r1
 801874a:	cb03      	ldmia	r3!, {r0, r1}
 801874c:	6010      	str	r0, [r2, #0]
 801874e:	6051      	str	r1, [r2, #4]
 8018750:	881b      	ldrh	r3, [r3, #0]
 8018752:	8113      	strh	r3, [r2, #8]
			break;
 8018754:	f003 beb6 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 687 :
			strcpy(p->name,"AB3");
 8018758:	687b      	ldr	r3, [r7, #4]
 801875a:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801875e:	4a76      	ldr	r2, [pc, #472]	; (8018938 <problem_fetch+0x172d4>)
 8018760:	6810      	ldr	r0, [r2, #0]
 8018762:	6018      	str	r0, [r3, #0]
			strcpy(p->grade,"6B+");
 8018764:	687b      	ldr	r3, [r7, #4]
 8018766:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801876a:	4a66      	ldr	r2, [pc, #408]	; (8018904 <problem_fetch+0x172a0>)
 801876c:	6810      	ldr	r0, [r2, #0]
 801876e:	6018      	str	r0, [r3, #0]
			p->moveSize = 8;
 8018770:	687b      	ldr	r3, [r7, #4]
 8018772:	2208      	movs	r2, #8
 8018774:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"C,E,E,H,F,G,E,I");
 8018776:	687b      	ldr	r3, [r7, #4]
 8018778:	33a4      	adds	r3, #164	; 0xa4
 801877a:	4a70      	ldr	r2, [pc, #448]	; (801893c <problem_fetch+0x172d8>)
 801877c:	461c      	mov	r4, r3
 801877e:	4615      	mov	r5, r2
 8018780:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8018782:	6020      	str	r0, [r4, #0]
 8018784:	6061      	str	r1, [r4, #4]
 8018786:	60a2      	str	r2, [r4, #8]
 8018788:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,6,8,10,13,14,16,18");
 801878a:	687b      	ldr	r3, [r7, #4]
 801878c:	3304      	adds	r3, #4
 801878e:	4a6c      	ldr	r2, [pc, #432]	; (8018940 <problem_fetch+0x172dc>)
 8018790:	461d      	mov	r5, r3
 8018792:	4614      	mov	r4, r2
 8018794:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8018796:	6028      	str	r0, [r5, #0]
 8018798:	6069      	str	r1, [r5, #4]
 801879a:	60aa      	str	r2, [r5, #8]
 801879c:	60eb      	str	r3, [r5, #12]
 801879e:	6820      	ldr	r0, [r4, #0]
 80187a0:	6128      	str	r0, [r5, #16]
 80187a2:	7923      	ldrb	r3, [r4, #4]
 80187a4:	752b      	strb	r3, [r5, #20]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,e");
 80187a6:	687b      	ldr	r3, [r7, #4]
 80187a8:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 80187ac:	4a65      	ldr	r2, [pc, #404]	; (8018944 <problem_fetch+0x172e0>)
 80187ae:	461c      	mov	r4, r3
 80187b0:	4615      	mov	r5, r2
 80187b2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80187b4:	6020      	str	r0, [r4, #0]
 80187b6:	6061      	str	r1, [r4, #4]
 80187b8:	60a2      	str	r2, [r4, #8]
 80187ba:	60e3      	str	r3, [r4, #12]
			break;
 80187bc:	f003 be82 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 688 :
			strcpy(p->name,"SAREVOK");
 80187c0:	687b      	ldr	r3, [r7, #4]
 80187c2:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80187c6:	4960      	ldr	r1, [pc, #384]	; (8018948 <problem_fetch+0x172e4>)
 80187c8:	461a      	mov	r2, r3
 80187ca:	460b      	mov	r3, r1
 80187cc:	cb03      	ldmia	r3!, {r0, r1}
 80187ce:	6010      	str	r0, [r2, #0]
 80187d0:	6051      	str	r1, [r2, #4]
			strcpy(p->grade,"7C");
 80187d2:	687b      	ldr	r3, [r7, #4]
 80187d4:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80187d8:	4a5c      	ldr	r2, [pc, #368]	; (801894c <problem_fetch+0x172e8>)
 80187da:	8811      	ldrh	r1, [r2, #0]
 80187dc:	7892      	ldrb	r2, [r2, #2]
 80187de:	8019      	strh	r1, [r3, #0]
 80187e0:	709a      	strb	r2, [r3, #2]
			p->moveSize = 5;
 80187e2:	687b      	ldr	r3, [r7, #4]
 80187e4:	2205      	movs	r2, #5
 80187e6:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,C,I,G,I");
 80187e8:	687b      	ldr	r3, [r7, #4]
 80187ea:	33a4      	adds	r3, #164	; 0xa4
 80187ec:	4958      	ldr	r1, [pc, #352]	; (8018950 <problem_fetch+0x172ec>)
 80187ee:	461a      	mov	r2, r3
 80187f0:	460b      	mov	r3, r1
 80187f2:	cb03      	ldmia	r3!, {r0, r1}
 80187f4:	6010      	str	r0, [r2, #0]
 80187f6:	6051      	str	r1, [r2, #4]
 80187f8:	881b      	ldrh	r3, [r3, #0]
 80187fa:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"4,8,9,14,18");
 80187fc:	687b      	ldr	r3, [r7, #4]
 80187fe:	3304      	adds	r3, #4
 8018800:	4a54      	ldr	r2, [pc, #336]	; (8018954 <problem_fetch+0x172f0>)
 8018802:	461c      	mov	r4, r3
 8018804:	4613      	mov	r3, r2
 8018806:	cb07      	ldmia	r3!, {r0, r1, r2}
 8018808:	6020      	str	r0, [r4, #0]
 801880a:	6061      	str	r1, [r4, #4]
 801880c:	60a2      	str	r2, [r4, #8]
			strcpy(p->startFinish,"s,d,d,d,e");
 801880e:	687b      	ldr	r3, [r7, #4]
 8018810:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8018814:	4943      	ldr	r1, [pc, #268]	; (8018924 <problem_fetch+0x172c0>)
 8018816:	461a      	mov	r2, r3
 8018818:	460b      	mov	r3, r1
 801881a:	cb03      	ldmia	r3!, {r0, r1}
 801881c:	6010      	str	r0, [r2, #0]
 801881e:	6051      	str	r1, [r2, #4]
 8018820:	881b      	ldrh	r3, [r3, #0]
 8018822:	8113      	strh	r3, [r2, #8]
			break;
 8018824:	f003 be4e 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 689 :
			strcpy(p->name,"KEEP IT TIGHT, YO");
 8018828:	687b      	ldr	r3, [r7, #4]
 801882a:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801882e:	4a4a      	ldr	r2, [pc, #296]	; (8018958 <problem_fetch+0x172f4>)
 8018830:	461d      	mov	r5, r3
 8018832:	4614      	mov	r4, r2
 8018834:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8018836:	6028      	str	r0, [r5, #0]
 8018838:	6069      	str	r1, [r5, #4]
 801883a:	60aa      	str	r2, [r5, #8]
 801883c:	60eb      	str	r3, [r5, #12]
 801883e:	8823      	ldrh	r3, [r4, #0]
 8018840:	822b      	strh	r3, [r5, #16]
			strcpy(p->grade,"7A+");
 8018842:	687b      	ldr	r3, [r7, #4]
 8018844:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8018848:	4a44      	ldr	r2, [pc, #272]	; (801895c <problem_fetch+0x172f8>)
 801884a:	6810      	ldr	r0, [r2, #0]
 801884c:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 801884e:	687b      	ldr	r3, [r7, #4]
 8018850:	2206      	movs	r2, #6
 8018852:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,E,G,F,G,D");
 8018854:	687b      	ldr	r3, [r7, #4]
 8018856:	33a4      	adds	r3, #164	; 0xa4
 8018858:	4a41      	ldr	r2, [pc, #260]	; (8018960 <problem_fetch+0x172fc>)
 801885a:	461c      	mov	r4, r3
 801885c:	4613      	mov	r3, r2
 801885e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8018860:	6020      	str	r0, [r4, #0]
 8018862:	6061      	str	r1, [r4, #4]
 8018864:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,8,10,13,15,18");
 8018866:	687b      	ldr	r3, [r7, #4]
 8018868:	3304      	adds	r3, #4
 801886a:	4a3e      	ldr	r2, [pc, #248]	; (8018964 <problem_fetch+0x17300>)
 801886c:	461c      	mov	r4, r3
 801886e:	4615      	mov	r5, r2
 8018870:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8018872:	6020      	str	r0, [r4, #0]
 8018874:	6061      	str	r1, [r4, #4]
 8018876:	60a2      	str	r2, [r4, #8]
 8018878:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 801887a:	687b      	ldr	r3, [r7, #4]
 801887c:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8018880:	4a39      	ldr	r2, [pc, #228]	; (8018968 <problem_fetch+0x17304>)
 8018882:	461c      	mov	r4, r3
 8018884:	4613      	mov	r3, r2
 8018886:	cb07      	ldmia	r3!, {r0, r1, r2}
 8018888:	6020      	str	r0, [r4, #0]
 801888a:	6061      	str	r1, [r4, #4]
 801888c:	60a2      	str	r2, [r4, #8]
			break;
 801888e:	f003 be19 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 690 :
			strcpy(p->name,"ACG49");
 8018892:	687b      	ldr	r3, [r7, #4]
 8018894:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8018898:	4a34      	ldr	r2, [pc, #208]	; (801896c <problem_fetch+0x17308>)
 801889a:	6810      	ldr	r0, [r2, #0]
 801889c:	6018      	str	r0, [r3, #0]
 801889e:	8892      	ldrh	r2, [r2, #4]
 80188a0:	809a      	strh	r2, [r3, #4]
			strcpy(p->grade,"6C+");
 80188a2:	687b      	ldr	r3, [r7, #4]
 80188a4:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80188a8:	4a31      	ldr	r2, [pc, #196]	; (8018970 <problem_fetch+0x1730c>)
 80188aa:	6810      	ldr	r0, [r2, #0]
 80188ac:	6018      	str	r0, [r3, #0]
			p->moveSize = 8;
 80188ae:	687b      	ldr	r3, [r7, #4]
 80188b0:	2208      	movs	r2, #8
 80188b2:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,G,D,E,I,D,B,I");
 80188b4:	687b      	ldr	r3, [r7, #4]
 80188b6:	33a4      	adds	r3, #164	; 0xa4
 80188b8:	4a2e      	ldr	r2, [pc, #184]	; (8018974 <problem_fetch+0x17310>)
 80188ba:	461c      	mov	r4, r3
 80188bc:	4615      	mov	r5, r2
 80188be:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80188c0:	6020      	str	r0, [r4, #0]
 80188c2:	6061      	str	r1, [r4, #4]
 80188c4:	60a2      	str	r2, [r4, #8]
 80188c6:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,6,15,16,10,11,6,18");
 80188c8:	687b      	ldr	r3, [r7, #4]
 80188ca:	3304      	adds	r3, #4
 80188cc:	4a2a      	ldr	r2, [pc, #168]	; (8018978 <problem_fetch+0x17314>)
 80188ce:	461d      	mov	r5, r3
 80188d0:	4614      	mov	r4, r2
 80188d2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80188d4:	6028      	str	r0, [r5, #0]
 80188d6:	6069      	str	r1, [r5, #4]
 80188d8:	60aa      	str	r2, [r5, #8]
 80188da:	60eb      	str	r3, [r5, #12]
 80188dc:	6820      	ldr	r0, [r4, #0]
 80188de:	6128      	str	r0, [r5, #16]
 80188e0:	7923      	ldrb	r3, [r4, #4]
 80188e2:	752b      	strb	r3, [r5, #20]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,e");
 80188e4:	687b      	ldr	r3, [r7, #4]
 80188e6:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 80188ea:	4a16      	ldr	r2, [pc, #88]	; (8018944 <problem_fetch+0x172e0>)
 80188ec:	461c      	mov	r4, r3
 80188ee:	4615      	mov	r5, r2
 80188f0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80188f2:	6020      	str	r0, [r4, #0]
 80188f4:	6061      	str	r1, [r4, #4]
 80188f6:	60a2      	str	r2, [r4, #8]
 80188f8:	60e3      	str	r3, [r4, #12]
			break;
 80188fa:	f003 bde3 	b.w	801c4c4 <problem_fetch+0x1ae60>
 80188fe:	bf00      	nop
 8018900:	0802bc48 	.word	0x0802bc48
 8018904:	08023b24 	.word	0x08023b24
 8018908:	0802bc4c 	.word	0x0802bc4c
 801890c:	0802bc60 	.word	0x0802bc60
 8018910:	08024b08 	.word	0x08024b08
 8018914:	0802bc78 	.word	0x0802bc78
 8018918:	08023c60 	.word	0x08023c60
 801891c:	0802bc84 	.word	0x0802bc84
 8018920:	0802bc90 	.word	0x0802bc90
 8018924:	08023ff0 	.word	0x08023ff0
 8018928:	0802bc9c 	.word	0x0802bc9c
 801892c:	08023bf0 	.word	0x08023bf0
 8018930:	0802bca4 	.word	0x0802bca4
 8018934:	0802865c 	.word	0x0802865c
 8018938:	0802bcb0 	.word	0x0802bcb0
 801893c:	0802bcb4 	.word	0x0802bcb4
 8018940:	0802bcc4 	.word	0x0802bcc4
 8018944:	08023c48 	.word	0x08023c48
 8018948:	0802bcdc 	.word	0x0802bcdc
 801894c:	08024358 	.word	0x08024358
 8018950:	08027640 	.word	0x08027640
 8018954:	080298a4 	.word	0x080298a4
 8018958:	0802bce4 	.word	0x0802bce4
 801895c:	08023cc4 	.word	0x08023cc4
 8018960:	0802bcf8 	.word	0x0802bcf8
 8018964:	08027cd8 	.word	0x08027cd8
 8018968:	08023ec0 	.word	0x08023ec0
 801896c:	0802bd04 	.word	0x0802bd04
 8018970:	08023bbc 	.word	0x08023bbc
 8018974:	0802bd0c 	.word	0x0802bd0c
 8018978:	0802bd1c 	.word	0x0802bd1c
		case 691 :
			strcpy(p->name,"FUNKED JAM");
 801897c:	687b      	ldr	r3, [r7, #4]
 801897e:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8018982:	49ae      	ldr	r1, [pc, #696]	; (8018c3c <problem_fetch+0x175d8>)
 8018984:	461a      	mov	r2, r3
 8018986:	460b      	mov	r3, r1
 8018988:	cb03      	ldmia	r3!, {r0, r1}
 801898a:	6010      	str	r0, [r2, #0]
 801898c:	6051      	str	r1, [r2, #4]
 801898e:	8819      	ldrh	r1, [r3, #0]
 8018990:	789b      	ldrb	r3, [r3, #2]
 8018992:	8111      	strh	r1, [r2, #8]
 8018994:	7293      	strb	r3, [r2, #10]
			strcpy(p->grade,"8A");
 8018996:	687b      	ldr	r3, [r7, #4]
 8018998:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801899c:	4aa8      	ldr	r2, [pc, #672]	; (8018c40 <problem_fetch+0x175dc>)
 801899e:	8811      	ldrh	r1, [r2, #0]
 80189a0:	7892      	ldrb	r2, [r2, #2]
 80189a2:	8019      	strh	r1, [r3, #0]
 80189a4:	709a      	strb	r2, [r3, #2]
			p->moveSize = 8;
 80189a6:	687b      	ldr	r3, [r7, #4]
 80189a8:	2208      	movs	r2, #8
 80189aa:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"B,C,D,B,G,H,C,D");
 80189ac:	687b      	ldr	r3, [r7, #4]
 80189ae:	33a4      	adds	r3, #164	; 0xa4
 80189b0:	4aa4      	ldr	r2, [pc, #656]	; (8018c44 <problem_fetch+0x175e0>)
 80189b2:	461c      	mov	r4, r3
 80189b4:	4615      	mov	r5, r2
 80189b6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80189b8:	6020      	str	r0, [r4, #0]
 80189ba:	6061      	str	r1, [r4, #4]
 80189bc:	60a2      	str	r2, [r4, #8]
 80189be:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"6,5,7,10,10,13,16,18");
 80189c0:	687b      	ldr	r3, [r7, #4]
 80189c2:	3304      	adds	r3, #4
 80189c4:	4aa0      	ldr	r2, [pc, #640]	; (8018c48 <problem_fetch+0x175e4>)
 80189c6:	461d      	mov	r5, r3
 80189c8:	4614      	mov	r4, r2
 80189ca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80189cc:	6028      	str	r0, [r5, #0]
 80189ce:	6069      	str	r1, [r5, #4]
 80189d0:	60aa      	str	r2, [r5, #8]
 80189d2:	60eb      	str	r3, [r5, #12]
 80189d4:	6820      	ldr	r0, [r4, #0]
 80189d6:	6128      	str	r0, [r5, #16]
 80189d8:	7923      	ldrb	r3, [r4, #4]
 80189da:	752b      	strb	r3, [r5, #20]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,e");
 80189dc:	687b      	ldr	r3, [r7, #4]
 80189de:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 80189e2:	4a9a      	ldr	r2, [pc, #616]	; (8018c4c <problem_fetch+0x175e8>)
 80189e4:	461c      	mov	r4, r3
 80189e6:	4615      	mov	r5, r2
 80189e8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80189ea:	6020      	str	r0, [r4, #0]
 80189ec:	6061      	str	r1, [r4, #4]
 80189ee:	60a2      	str	r2, [r4, #8]
 80189f0:	60e3      	str	r3, [r4, #12]
			break;
 80189f2:	f003 bd67 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 692 :
			strcpy(p->name,"SNIFFING DOG");
 80189f6:	687b      	ldr	r3, [r7, #4]
 80189f8:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80189fc:	4a94      	ldr	r2, [pc, #592]	; (8018c50 <problem_fetch+0x175ec>)
 80189fe:	461c      	mov	r4, r3
 8018a00:	4613      	mov	r3, r2
 8018a02:	cb07      	ldmia	r3!, {r0, r1, r2}
 8018a04:	6020      	str	r0, [r4, #0]
 8018a06:	6061      	str	r1, [r4, #4]
 8018a08:	60a2      	str	r2, [r4, #8]
 8018a0a:	781b      	ldrb	r3, [r3, #0]
 8018a0c:	7323      	strb	r3, [r4, #12]
			strcpy(p->grade,"6B+");
 8018a0e:	687b      	ldr	r3, [r7, #4]
 8018a10:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8018a14:	4a8f      	ldr	r2, [pc, #572]	; (8018c54 <problem_fetch+0x175f0>)
 8018a16:	6810      	ldr	r0, [r2, #0]
 8018a18:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 8018a1a:	687b      	ldr	r3, [r7, #4]
 8018a1c:	2207      	movs	r2, #7
 8018a1e:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"H,J,I,J,I,J,I");
 8018a20:	687b      	ldr	r3, [r7, #4]
 8018a22:	33a4      	adds	r3, #164	; 0xa4
 8018a24:	4a8c      	ldr	r2, [pc, #560]	; (8018c58 <problem_fetch+0x175f4>)
 8018a26:	461c      	mov	r4, r3
 8018a28:	4613      	mov	r3, r2
 8018a2a:	cb07      	ldmia	r3!, {r0, r1, r2}
 8018a2c:	6020      	str	r0, [r4, #0]
 8018a2e:	6061      	str	r1, [r4, #4]
 8018a30:	60a2      	str	r2, [r4, #8]
 8018a32:	881b      	ldrh	r3, [r3, #0]
 8018a34:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,7,10,13,15,16,18");
 8018a36:	687b      	ldr	r3, [r7, #4]
 8018a38:	3304      	adds	r3, #4
 8018a3a:	4a88      	ldr	r2, [pc, #544]	; (8018c5c <problem_fetch+0x175f8>)
 8018a3c:	461d      	mov	r5, r3
 8018a3e:	4614      	mov	r4, r2
 8018a40:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8018a42:	6028      	str	r0, [r5, #0]
 8018a44:	6069      	str	r1, [r5, #4]
 8018a46:	60aa      	str	r2, [r5, #8]
 8018a48:	60eb      	str	r3, [r5, #12]
 8018a4a:	8823      	ldrh	r3, [r4, #0]
 8018a4c:	78a2      	ldrb	r2, [r4, #2]
 8018a4e:	822b      	strh	r3, [r5, #16]
 8018a50:	4613      	mov	r3, r2
 8018a52:	74ab      	strb	r3, [r5, #18]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 8018a54:	687b      	ldr	r3, [r7, #4]
 8018a56:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8018a5a:	4a81      	ldr	r2, [pc, #516]	; (8018c60 <problem_fetch+0x175fc>)
 8018a5c:	461c      	mov	r4, r3
 8018a5e:	4613      	mov	r3, r2
 8018a60:	cb07      	ldmia	r3!, {r0, r1, r2}
 8018a62:	6020      	str	r0, [r4, #0]
 8018a64:	6061      	str	r1, [r4, #4]
 8018a66:	60a2      	str	r2, [r4, #8]
 8018a68:	881b      	ldrh	r3, [r3, #0]
 8018a6a:	81a3      	strh	r3, [r4, #12]
			break;
 8018a6c:	f003 bd2a 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 693 :
			strcpy(p->name,"ACG48");
 8018a70:	687b      	ldr	r3, [r7, #4]
 8018a72:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8018a76:	4a7b      	ldr	r2, [pc, #492]	; (8018c64 <problem_fetch+0x17600>)
 8018a78:	6810      	ldr	r0, [r2, #0]
 8018a7a:	6018      	str	r0, [r3, #0]
 8018a7c:	8892      	ldrh	r2, [r2, #4]
 8018a7e:	809a      	strh	r2, [r3, #4]
			strcpy(p->grade,"7A");
 8018a80:	687b      	ldr	r3, [r7, #4]
 8018a82:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8018a86:	4a78      	ldr	r2, [pc, #480]	; (8018c68 <problem_fetch+0x17604>)
 8018a88:	8811      	ldrh	r1, [r2, #0]
 8018a8a:	7892      	ldrb	r2, [r2, #2]
 8018a8c:	8019      	strh	r1, [r3, #0]
 8018a8e:	709a      	strb	r2, [r3, #2]
			p->moveSize = 7;
 8018a90:	687b      	ldr	r3, [r7, #4]
 8018a92:	2207      	movs	r2, #7
 8018a94:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,K,H,F,B,D,A");
 8018a96:	687b      	ldr	r3, [r7, #4]
 8018a98:	33a4      	adds	r3, #164	; 0xa4
 8018a9a:	4a74      	ldr	r2, [pc, #464]	; (8018c6c <problem_fetch+0x17608>)
 8018a9c:	461c      	mov	r4, r3
 8018a9e:	4613      	mov	r3, r2
 8018aa0:	cb07      	ldmia	r3!, {r0, r1, r2}
 8018aa2:	6020      	str	r0, [r4, #0]
 8018aa4:	6061      	str	r1, [r4, #4]
 8018aa6:	60a2      	str	r2, [r4, #8]
 8018aa8:	881b      	ldrh	r3, [r3, #0]
 8018aaa:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,9,10,11,12,15,18");
 8018aac:	687b      	ldr	r3, [r7, #4]
 8018aae:	3304      	adds	r3, #4
 8018ab0:	4a6f      	ldr	r2, [pc, #444]	; (8018c70 <problem_fetch+0x1760c>)
 8018ab2:	461d      	mov	r5, r3
 8018ab4:	4614      	mov	r4, r2
 8018ab6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8018ab8:	6028      	str	r0, [r5, #0]
 8018aba:	6069      	str	r1, [r5, #4]
 8018abc:	60aa      	str	r2, [r5, #8]
 8018abe:	60eb      	str	r3, [r5, #12]
 8018ac0:	8823      	ldrh	r3, [r4, #0]
 8018ac2:	78a2      	ldrb	r2, [r4, #2]
 8018ac4:	822b      	strh	r3, [r5, #16]
 8018ac6:	4613      	mov	r3, r2
 8018ac8:	74ab      	strb	r3, [r5, #18]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 8018aca:	687b      	ldr	r3, [r7, #4]
 8018acc:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8018ad0:	4a63      	ldr	r2, [pc, #396]	; (8018c60 <problem_fetch+0x175fc>)
 8018ad2:	461c      	mov	r4, r3
 8018ad4:	4613      	mov	r3, r2
 8018ad6:	cb07      	ldmia	r3!, {r0, r1, r2}
 8018ad8:	6020      	str	r0, [r4, #0]
 8018ada:	6061      	str	r1, [r4, #4]
 8018adc:	60a2      	str	r2, [r4, #8]
 8018ade:	881b      	ldrh	r3, [r3, #0]
 8018ae0:	81a3      	strh	r3, [r4, #12]
			break;
 8018ae2:	f003 bcef 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 694 :
			strcpy(p->name,"ROCK LOBSTER");
 8018ae6:	687b      	ldr	r3, [r7, #4]
 8018ae8:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8018aec:	4a61      	ldr	r2, [pc, #388]	; (8018c74 <problem_fetch+0x17610>)
 8018aee:	461c      	mov	r4, r3
 8018af0:	4613      	mov	r3, r2
 8018af2:	cb07      	ldmia	r3!, {r0, r1, r2}
 8018af4:	6020      	str	r0, [r4, #0]
 8018af6:	6061      	str	r1, [r4, #4]
 8018af8:	60a2      	str	r2, [r4, #8]
 8018afa:	781b      	ldrb	r3, [r3, #0]
 8018afc:	7323      	strb	r3, [r4, #12]
			strcpy(p->grade,"6C+");
 8018afe:	687b      	ldr	r3, [r7, #4]
 8018b00:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8018b04:	4a5c      	ldr	r2, [pc, #368]	; (8018c78 <problem_fetch+0x17614>)
 8018b06:	6810      	ldr	r0, [r2, #0]
 8018b08:	6018      	str	r0, [r3, #0]
			p->moveSize = 8;
 8018b0a:	687b      	ldr	r3, [r7, #4]
 8018b0c:	2208      	movs	r2, #8
 8018b0e:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"H,E,E,A,E,A,E,I");
 8018b10:	687b      	ldr	r3, [r7, #4]
 8018b12:	33a4      	adds	r3, #164	; 0xa4
 8018b14:	4a59      	ldr	r2, [pc, #356]	; (8018c7c <problem_fetch+0x17618>)
 8018b16:	461c      	mov	r4, r3
 8018b18:	4615      	mov	r5, r2
 8018b1a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8018b1c:	6020      	str	r0, [r4, #0]
 8018b1e:	6061      	str	r1, [r4, #4]
 8018b20:	60a2      	str	r2, [r4, #8]
 8018b22:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,6,8,9,12,14,16,18");
 8018b24:	687b      	ldr	r3, [r7, #4]
 8018b26:	3304      	adds	r3, #4
 8018b28:	4a55      	ldr	r2, [pc, #340]	; (8018c80 <problem_fetch+0x1761c>)
 8018b2a:	461d      	mov	r5, r3
 8018b2c:	4614      	mov	r4, r2
 8018b2e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8018b30:	6028      	str	r0, [r5, #0]
 8018b32:	6069      	str	r1, [r5, #4]
 8018b34:	60aa      	str	r2, [r5, #8]
 8018b36:	60eb      	str	r3, [r5, #12]
 8018b38:	6820      	ldr	r0, [r4, #0]
 8018b3a:	6128      	str	r0, [r5, #16]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,e");
 8018b3c:	687b      	ldr	r3, [r7, #4]
 8018b3e:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8018b42:	4a42      	ldr	r2, [pc, #264]	; (8018c4c <problem_fetch+0x175e8>)
 8018b44:	461c      	mov	r4, r3
 8018b46:	4615      	mov	r5, r2
 8018b48:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8018b4a:	6020      	str	r0, [r4, #0]
 8018b4c:	6061      	str	r1, [r4, #4]
 8018b4e:	60a2      	str	r2, [r4, #8]
 8018b50:	60e3      	str	r3, [r4, #12]
			break;
 8018b52:	f003 bcb7 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 695 :
			strcpy(p->name,"UNKNOWN");
 8018b56:	687b      	ldr	r3, [r7, #4]
 8018b58:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8018b5c:	4949      	ldr	r1, [pc, #292]	; (8018c84 <problem_fetch+0x17620>)
 8018b5e:	461a      	mov	r2, r3
 8018b60:	460b      	mov	r3, r1
 8018b62:	cb03      	ldmia	r3!, {r0, r1}
 8018b64:	6010      	str	r0, [r2, #0]
 8018b66:	6051      	str	r1, [r2, #4]
			strcpy(p->grade,"6C+");
 8018b68:	687b      	ldr	r3, [r7, #4]
 8018b6a:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8018b6e:	4a42      	ldr	r2, [pc, #264]	; (8018c78 <problem_fetch+0x17614>)
 8018b70:	6810      	ldr	r0, [r2, #0]
 8018b72:	6018      	str	r0, [r3, #0]
			p->moveSize = 8;
 8018b74:	687b      	ldr	r3, [r7, #4]
 8018b76:	2208      	movs	r2, #8
 8018b78:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,D,H,J,E,I,D,I");
 8018b7a:	687b      	ldr	r3, [r7, #4]
 8018b7c:	33a4      	adds	r3, #164	; 0xa4
 8018b7e:	4a42      	ldr	r2, [pc, #264]	; (8018c88 <problem_fetch+0x17624>)
 8018b80:	461c      	mov	r4, r3
 8018b82:	4615      	mov	r5, r2
 8018b84:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8018b86:	6020      	str	r0, [r4, #0]
 8018b88:	6061      	str	r1, [r4, #4]
 8018b8a:	60a2      	str	r2, [r4, #8]
 8018b8c:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,7,8,7,12,15,18,18");
 8018b8e:	687b      	ldr	r3, [r7, #4]
 8018b90:	3304      	adds	r3, #4
 8018b92:	4a3e      	ldr	r2, [pc, #248]	; (8018c8c <problem_fetch+0x17628>)
 8018b94:	461d      	mov	r5, r3
 8018b96:	4614      	mov	r4, r2
 8018b98:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8018b9a:	6028      	str	r0, [r5, #0]
 8018b9c:	6069      	str	r1, [r5, #4]
 8018b9e:	60aa      	str	r2, [r5, #8]
 8018ba0:	60eb      	str	r3, [r5, #12]
 8018ba2:	6820      	ldr	r0, [r4, #0]
 8018ba4:	6128      	str	r0, [r5, #16]
			strcpy(p->startFinish,"s,d,d,d,d,d,e,e");
 8018ba6:	687b      	ldr	r3, [r7, #4]
 8018ba8:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8018bac:	4a38      	ldr	r2, [pc, #224]	; (8018c90 <problem_fetch+0x1762c>)
 8018bae:	461c      	mov	r4, r3
 8018bb0:	4615      	mov	r5, r2
 8018bb2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8018bb4:	6020      	str	r0, [r4, #0]
 8018bb6:	6061      	str	r1, [r4, #4]
 8018bb8:	60a2      	str	r2, [r4, #8]
 8018bba:	60e3      	str	r3, [r4, #12]
			break;
 8018bbc:	f003 bc82 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 696 :
			strcpy(p->name,"ACG46");
 8018bc0:	687b      	ldr	r3, [r7, #4]
 8018bc2:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8018bc6:	4a33      	ldr	r2, [pc, #204]	; (8018c94 <problem_fetch+0x17630>)
 8018bc8:	6810      	ldr	r0, [r2, #0]
 8018bca:	6018      	str	r0, [r3, #0]
 8018bcc:	8892      	ldrh	r2, [r2, #4]
 8018bce:	809a      	strh	r2, [r3, #4]
			strcpy(p->grade,"6C");
 8018bd0:	687b      	ldr	r3, [r7, #4]
 8018bd2:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8018bd6:	4a30      	ldr	r2, [pc, #192]	; (8018c98 <problem_fetch+0x17634>)
 8018bd8:	8811      	ldrh	r1, [r2, #0]
 8018bda:	7892      	ldrb	r2, [r2, #2]
 8018bdc:	8019      	strh	r1, [r3, #0]
 8018bde:	709a      	strb	r2, [r3, #2]
			p->moveSize = 10;
 8018be0:	687b      	ldr	r3, [r7, #4]
 8018be2:	220a      	movs	r2, #10
 8018be4:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"C,B,A,B,G,F,I,E,I,D");
 8018be6:	687b      	ldr	r3, [r7, #4]
 8018be8:	33a4      	adds	r3, #164	; 0xa4
 8018bea:	4a2c      	ldr	r2, [pc, #176]	; (8018c9c <problem_fetch+0x17638>)
 8018bec:	461d      	mov	r5, r3
 8018bee:	4614      	mov	r4, r2
 8018bf0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8018bf2:	6028      	str	r0, [r5, #0]
 8018bf4:	6069      	str	r1, [r5, #4]
 8018bf6:	60aa      	str	r2, [r5, #8]
 8018bf8:	60eb      	str	r3, [r5, #12]
 8018bfa:	6820      	ldr	r0, [r4, #0]
 8018bfc:	6128      	str	r0, [r5, #16]
			strcpy(p->moveNumbers,"5,6,9,10,10,13,14,16,7,18");
 8018bfe:	687b      	ldr	r3, [r7, #4]
 8018c00:	3304      	adds	r3, #4
 8018c02:	4a27      	ldr	r2, [pc, #156]	; (8018ca0 <problem_fetch+0x1763c>)
 8018c04:	461d      	mov	r5, r3
 8018c06:	4614      	mov	r4, r2
 8018c08:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8018c0a:	6028      	str	r0, [r5, #0]
 8018c0c:	6069      	str	r1, [r5, #4]
 8018c0e:	60aa      	str	r2, [r5, #8]
 8018c10:	60eb      	str	r3, [r5, #12]
 8018c12:	cc03      	ldmia	r4!, {r0, r1}
 8018c14:	6128      	str	r0, [r5, #16]
 8018c16:	6169      	str	r1, [r5, #20]
 8018c18:	8823      	ldrh	r3, [r4, #0]
 8018c1a:	832b      	strh	r3, [r5, #24]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,d,d,e");
 8018c1c:	687b      	ldr	r3, [r7, #4]
 8018c1e:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8018c22:	4a20      	ldr	r2, [pc, #128]	; (8018ca4 <problem_fetch+0x17640>)
 8018c24:	461d      	mov	r5, r3
 8018c26:	4614      	mov	r4, r2
 8018c28:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8018c2a:	6028      	str	r0, [r5, #0]
 8018c2c:	6069      	str	r1, [r5, #4]
 8018c2e:	60aa      	str	r2, [r5, #8]
 8018c30:	60eb      	str	r3, [r5, #12]
 8018c32:	6820      	ldr	r0, [r4, #0]
 8018c34:	6128      	str	r0, [r5, #16]
			break;
 8018c36:	f003 bc45 	b.w	801c4c4 <problem_fetch+0x1ae60>
 8018c3a:	bf00      	nop
 8018c3c:	0802bd34 	.word	0x0802bd34
 8018c40:	08025e88 	.word	0x08025e88
 8018c44:	0802bd40 	.word	0x0802bd40
 8018c48:	0802bd50 	.word	0x0802bd50
 8018c4c:	08023c48 	.word	0x08023c48
 8018c50:	0802bd68 	.word	0x0802bd68
 8018c54:	08023b24 	.word	0x08023b24
 8018c58:	0802bd78 	.word	0x0802bd78
 8018c5c:	0802bd88 	.word	0x0802bd88
 8018c60:	08023cac 	.word	0x08023cac
 8018c64:	0802bd9c 	.word	0x0802bd9c
 8018c68:	08023ae4 	.word	0x08023ae4
 8018c6c:	0802bda4 	.word	0x0802bda4
 8018c70:	0802bdb4 	.word	0x0802bdb4
 8018c74:	0802bdc8 	.word	0x0802bdc8
 8018c78:	08023bbc 	.word	0x08023bbc
 8018c7c:	0802bdd8 	.word	0x0802bdd8
 8018c80:	0802bde8 	.word	0x0802bde8
 8018c84:	0802bdfc 	.word	0x0802bdfc
 8018c88:	0802be04 	.word	0x0802be04
 8018c8c:	0802be14 	.word	0x0802be14
 8018c90:	0802be28 	.word	0x0802be28
 8018c94:	0802be38 	.word	0x0802be38
 8018c98:	08023bf0 	.word	0x08023bf0
 8018c9c:	0802be40 	.word	0x0802be40
 8018ca0:	0802be54 	.word	0x0802be54
 8018ca4:	080243cc 	.word	0x080243cc
		case 697 :
			strcpy(p->name,"GS VR #1");
 8018ca8:	687b      	ldr	r3, [r7, #4]
 8018caa:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8018cae:	49bf      	ldr	r1, [pc, #764]	; (8018fac <problem_fetch+0x17948>)
 8018cb0:	461a      	mov	r2, r3
 8018cb2:	460b      	mov	r3, r1
 8018cb4:	cb03      	ldmia	r3!, {r0, r1}
 8018cb6:	6010      	str	r0, [r2, #0]
 8018cb8:	6051      	str	r1, [r2, #4]
 8018cba:	781b      	ldrb	r3, [r3, #0]
 8018cbc:	7213      	strb	r3, [r2, #8]
			strcpy(p->grade,"6B+");
 8018cbe:	687b      	ldr	r3, [r7, #4]
 8018cc0:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8018cc4:	4aba      	ldr	r2, [pc, #744]	; (8018fb0 <problem_fetch+0x1794c>)
 8018cc6:	6810      	ldr	r0, [r2, #0]
 8018cc8:	6018      	str	r0, [r3, #0]
			p->moveSize = 8;
 8018cca:	687b      	ldr	r3, [r7, #4]
 8018ccc:	2208      	movs	r2, #8
 8018cce:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,E,E,B,E,C,E,D");
 8018cd0:	687b      	ldr	r3, [r7, #4]
 8018cd2:	33a4      	adds	r3, #164	; 0xa4
 8018cd4:	4ab7      	ldr	r2, [pc, #732]	; (8018fb4 <problem_fetch+0x17950>)
 8018cd6:	461c      	mov	r4, r3
 8018cd8:	4615      	mov	r5, r2
 8018cda:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8018cdc:	6020      	str	r0, [r4, #0]
 8018cde:	6061      	str	r1, [r4, #4]
 8018ce0:	60a2      	str	r2, [r4, #8]
 8018ce2:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,6,8,10,12,13,16,18");
 8018ce4:	687b      	ldr	r3, [r7, #4]
 8018ce6:	3304      	adds	r3, #4
 8018ce8:	4ab3      	ldr	r2, [pc, #716]	; (8018fb8 <problem_fetch+0x17954>)
 8018cea:	461d      	mov	r5, r3
 8018cec:	4614      	mov	r4, r2
 8018cee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8018cf0:	6028      	str	r0, [r5, #0]
 8018cf2:	6069      	str	r1, [r5, #4]
 8018cf4:	60aa      	str	r2, [r5, #8]
 8018cf6:	60eb      	str	r3, [r5, #12]
 8018cf8:	6820      	ldr	r0, [r4, #0]
 8018cfa:	6128      	str	r0, [r5, #16]
 8018cfc:	7923      	ldrb	r3, [r4, #4]
 8018cfe:	752b      	strb	r3, [r5, #20]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,e");
 8018d00:	687b      	ldr	r3, [r7, #4]
 8018d02:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8018d06:	4aad      	ldr	r2, [pc, #692]	; (8018fbc <problem_fetch+0x17958>)
 8018d08:	461c      	mov	r4, r3
 8018d0a:	4615      	mov	r5, r2
 8018d0c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8018d0e:	6020      	str	r0, [r4, #0]
 8018d10:	6061      	str	r1, [r4, #4]
 8018d12:	60a2      	str	r2, [r4, #8]
 8018d14:	60e3      	str	r3, [r4, #12]
			break;
 8018d16:	f003 bbd5 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 698 :
			strcpy(p->name,"COLPA DEL NONNO");
 8018d1a:	687b      	ldr	r3, [r7, #4]
 8018d1c:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8018d20:	4aa7      	ldr	r2, [pc, #668]	; (8018fc0 <problem_fetch+0x1795c>)
 8018d22:	461c      	mov	r4, r3
 8018d24:	4615      	mov	r5, r2
 8018d26:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8018d28:	6020      	str	r0, [r4, #0]
 8018d2a:	6061      	str	r1, [r4, #4]
 8018d2c:	60a2      	str	r2, [r4, #8]
 8018d2e:	60e3      	str	r3, [r4, #12]
			strcpy(p->grade,"6B+");
 8018d30:	687b      	ldr	r3, [r7, #4]
 8018d32:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8018d36:	4a9e      	ldr	r2, [pc, #632]	; (8018fb0 <problem_fetch+0x1794c>)
 8018d38:	6810      	ldr	r0, [r2, #0]
 8018d3a:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 8018d3c:	687b      	ldr	r3, [r7, #4]
 8018d3e:	2207      	movs	r2, #7
 8018d40:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"B,C,E,B,E,B,D");
 8018d42:	687b      	ldr	r3, [r7, #4]
 8018d44:	33a4      	adds	r3, #164	; 0xa4
 8018d46:	4a9f      	ldr	r2, [pc, #636]	; (8018fc4 <problem_fetch+0x17960>)
 8018d48:	461c      	mov	r4, r3
 8018d4a:	4613      	mov	r3, r2
 8018d4c:	cb07      	ldmia	r3!, {r0, r1, r2}
 8018d4e:	6020      	str	r0, [r4, #0]
 8018d50:	6061      	str	r1, [r4, #4]
 8018d52:	60a2      	str	r2, [r4, #8]
 8018d54:	881b      	ldrh	r3, [r3, #0]
 8018d56:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"6,5,9,10,14,15,18");
 8018d58:	687b      	ldr	r3, [r7, #4]
 8018d5a:	3304      	adds	r3, #4
 8018d5c:	4a9a      	ldr	r2, [pc, #616]	; (8018fc8 <problem_fetch+0x17964>)
 8018d5e:	461d      	mov	r5, r3
 8018d60:	4614      	mov	r4, r2
 8018d62:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8018d64:	6028      	str	r0, [r5, #0]
 8018d66:	6069      	str	r1, [r5, #4]
 8018d68:	60aa      	str	r2, [r5, #8]
 8018d6a:	60eb      	str	r3, [r5, #12]
 8018d6c:	8823      	ldrh	r3, [r4, #0]
 8018d6e:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,s,d,d,d,d,e");
 8018d70:	687b      	ldr	r3, [r7, #4]
 8018d72:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8018d76:	4a95      	ldr	r2, [pc, #596]	; (8018fcc <problem_fetch+0x17968>)
 8018d78:	461c      	mov	r4, r3
 8018d7a:	4613      	mov	r3, r2
 8018d7c:	cb07      	ldmia	r3!, {r0, r1, r2}
 8018d7e:	6020      	str	r0, [r4, #0]
 8018d80:	6061      	str	r1, [r4, #4]
 8018d82:	60a2      	str	r2, [r4, #8]
 8018d84:	881b      	ldrh	r3, [r3, #0]
 8018d86:	81a3      	strh	r3, [r4, #12]
			break;
 8018d88:	f003 bb9c 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 699 :
			strcpy(p->name,"LIP GRIP");
 8018d8c:	687b      	ldr	r3, [r7, #4]
 8018d8e:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8018d92:	498f      	ldr	r1, [pc, #572]	; (8018fd0 <problem_fetch+0x1796c>)
 8018d94:	461a      	mov	r2, r3
 8018d96:	460b      	mov	r3, r1
 8018d98:	cb03      	ldmia	r3!, {r0, r1}
 8018d9a:	6010      	str	r0, [r2, #0]
 8018d9c:	6051      	str	r1, [r2, #4]
 8018d9e:	781b      	ldrb	r3, [r3, #0]
 8018da0:	7213      	strb	r3, [r2, #8]
			strcpy(p->grade,"7A+");
 8018da2:	687b      	ldr	r3, [r7, #4]
 8018da4:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8018da8:	4a8a      	ldr	r2, [pc, #552]	; (8018fd4 <problem_fetch+0x17970>)
 8018daa:	6810      	ldr	r0, [r2, #0]
 8018dac:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 8018dae:	687b      	ldr	r3, [r7, #4]
 8018db0:	2206      	movs	r2, #6
 8018db2:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,G,K,H,K,I");
 8018db4:	687b      	ldr	r3, [r7, #4]
 8018db6:	33a4      	adds	r3, #164	; 0xa4
 8018db8:	4a87      	ldr	r2, [pc, #540]	; (8018fd8 <problem_fetch+0x17974>)
 8018dba:	461c      	mov	r4, r3
 8018dbc:	4613      	mov	r3, r2
 8018dbe:	cb07      	ldmia	r3!, {r0, r1, r2}
 8018dc0:	6020      	str	r0, [r4, #0]
 8018dc2:	6061      	str	r1, [r4, #4]
 8018dc4:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,4,9,13,14,18");
 8018dc6:	687b      	ldr	r3, [r7, #4]
 8018dc8:	3304      	adds	r3, #4
 8018dca:	4a84      	ldr	r2, [pc, #528]	; (8018fdc <problem_fetch+0x17978>)
 8018dcc:	461c      	mov	r4, r3
 8018dce:	4613      	mov	r3, r2
 8018dd0:	cb07      	ldmia	r3!, {r0, r1, r2}
 8018dd2:	6020      	str	r0, [r4, #0]
 8018dd4:	6061      	str	r1, [r4, #4]
 8018dd6:	60a2      	str	r2, [r4, #8]
 8018dd8:	881a      	ldrh	r2, [r3, #0]
 8018dda:	789b      	ldrb	r3, [r3, #2]
 8018ddc:	81a2      	strh	r2, [r4, #12]
 8018dde:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 8018de0:	687b      	ldr	r3, [r7, #4]
 8018de2:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8018de6:	4a7e      	ldr	r2, [pc, #504]	; (8018fe0 <problem_fetch+0x1797c>)
 8018de8:	461c      	mov	r4, r3
 8018dea:	4613      	mov	r3, r2
 8018dec:	cb07      	ldmia	r3!, {r0, r1, r2}
 8018dee:	6020      	str	r0, [r4, #0]
 8018df0:	6061      	str	r1, [r4, #4]
 8018df2:	60a2      	str	r2, [r4, #8]
			break;
 8018df4:	f003 bb66 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 700 :
			strcpy(p->name,"ACG43");
 8018df8:	687b      	ldr	r3, [r7, #4]
 8018dfa:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8018dfe:	4a79      	ldr	r2, [pc, #484]	; (8018fe4 <problem_fetch+0x17980>)
 8018e00:	6810      	ldr	r0, [r2, #0]
 8018e02:	6018      	str	r0, [r3, #0]
 8018e04:	8892      	ldrh	r2, [r2, #4]
 8018e06:	809a      	strh	r2, [r3, #4]
			strcpy(p->grade,"6C+");
 8018e08:	687b      	ldr	r3, [r7, #4]
 8018e0a:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8018e0e:	4a76      	ldr	r2, [pc, #472]	; (8018fe8 <problem_fetch+0x17984>)
 8018e10:	6810      	ldr	r0, [r2, #0]
 8018e12:	6018      	str	r0, [r3, #0]
			p->moveSize = 8;
 8018e14:	687b      	ldr	r3, [r7, #4]
 8018e16:	2208      	movs	r2, #8
 8018e18:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,I,D,E,A,A,B,D");
 8018e1a:	687b      	ldr	r3, [r7, #4]
 8018e1c:	33a4      	adds	r3, #164	; 0xa4
 8018e1e:	4a73      	ldr	r2, [pc, #460]	; (8018fec <problem_fetch+0x17988>)
 8018e20:	461c      	mov	r4, r3
 8018e22:	4615      	mov	r5, r2
 8018e24:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8018e26:	6020      	str	r0, [r4, #0]
 8018e28:	6061      	str	r1, [r4, #4]
 8018e2a:	60a2      	str	r2, [r4, #8]
 8018e2c:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,10,11,14,14,9,6,18");
 8018e2e:	687b      	ldr	r3, [r7, #4]
 8018e30:	3304      	adds	r3, #4
 8018e32:	4a6f      	ldr	r2, [pc, #444]	; (8018ff0 <problem_fetch+0x1798c>)
 8018e34:	461d      	mov	r5, r3
 8018e36:	4614      	mov	r4, r2
 8018e38:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8018e3a:	6028      	str	r0, [r5, #0]
 8018e3c:	6069      	str	r1, [r5, #4]
 8018e3e:	60aa      	str	r2, [r5, #8]
 8018e40:	60eb      	str	r3, [r5, #12]
 8018e42:	6820      	ldr	r0, [r4, #0]
 8018e44:	6128      	str	r0, [r5, #16]
 8018e46:	7923      	ldrb	r3, [r4, #4]
 8018e48:	752b      	strb	r3, [r5, #20]
			strcpy(p->startFinish,"s,d,d,d,d,d,d,e");
 8018e4a:	687b      	ldr	r3, [r7, #4]
 8018e4c:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8018e50:	4a68      	ldr	r2, [pc, #416]	; (8018ff4 <problem_fetch+0x17990>)
 8018e52:	461c      	mov	r4, r3
 8018e54:	4615      	mov	r5, r2
 8018e56:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8018e58:	6020      	str	r0, [r4, #0]
 8018e5a:	6061      	str	r1, [r4, #4]
 8018e5c:	60a2      	str	r2, [r4, #8]
 8018e5e:	60e3      	str	r3, [r4, #12]
			break;
 8018e60:	f003 bb30 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 701 :
			strcpy(p->name,"AB1");
 8018e64:	687b      	ldr	r3, [r7, #4]
 8018e66:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8018e6a:	4a63      	ldr	r2, [pc, #396]	; (8018ff8 <problem_fetch+0x17994>)
 8018e6c:	6810      	ldr	r0, [r2, #0]
 8018e6e:	6018      	str	r0, [r3, #0]
			strcpy(p->grade,"6B+");
 8018e70:	687b      	ldr	r3, [r7, #4]
 8018e72:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8018e76:	4a4e      	ldr	r2, [pc, #312]	; (8018fb0 <problem_fetch+0x1794c>)
 8018e78:	6810      	ldr	r0, [r2, #0]
 8018e7a:	6018      	str	r0, [r3, #0]
			p->moveSize = 8;
 8018e7c:	687b      	ldr	r3, [r7, #4]
 8018e7e:	2208      	movs	r2, #8
 8018e80:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,E,E,A,E,A,D,A");
 8018e82:	687b      	ldr	r3, [r7, #4]
 8018e84:	33a4      	adds	r3, #164	; 0xa4
 8018e86:	4a5d      	ldr	r2, [pc, #372]	; (8018ffc <problem_fetch+0x17998>)
 8018e88:	461c      	mov	r4, r3
 8018e8a:	4615      	mov	r5, r2
 8018e8c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8018e8e:	6020      	str	r0, [r4, #0]
 8018e90:	6061      	str	r1, [r4, #4]
 8018e92:	60a2      	str	r2, [r4, #8]
 8018e94:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,6,8,9,12,14,15,18");
 8018e96:	687b      	ldr	r3, [r7, #4]
 8018e98:	3304      	adds	r3, #4
 8018e9a:	4a59      	ldr	r2, [pc, #356]	; (8019000 <problem_fetch+0x1799c>)
 8018e9c:	461d      	mov	r5, r3
 8018e9e:	4614      	mov	r4, r2
 8018ea0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8018ea2:	6028      	str	r0, [r5, #0]
 8018ea4:	6069      	str	r1, [r5, #4]
 8018ea6:	60aa      	str	r2, [r5, #8]
 8018ea8:	60eb      	str	r3, [r5, #12]
 8018eaa:	6820      	ldr	r0, [r4, #0]
 8018eac:	6128      	str	r0, [r5, #16]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,e");
 8018eae:	687b      	ldr	r3, [r7, #4]
 8018eb0:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8018eb4:	4a41      	ldr	r2, [pc, #260]	; (8018fbc <problem_fetch+0x17958>)
 8018eb6:	461c      	mov	r4, r3
 8018eb8:	4615      	mov	r5, r2
 8018eba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8018ebc:	6020      	str	r0, [r4, #0]
 8018ebe:	6061      	str	r1, [r4, #4]
 8018ec0:	60a2      	str	r2, [r4, #8]
 8018ec2:	60e3      	str	r3, [r4, #12]
			break;
 8018ec4:	f003 bafe 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 702 :
			strcpy(p->name,"CAROLYN");
 8018ec8:	687b      	ldr	r3, [r7, #4]
 8018eca:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8018ece:	494d      	ldr	r1, [pc, #308]	; (8019004 <problem_fetch+0x179a0>)
 8018ed0:	461a      	mov	r2, r3
 8018ed2:	460b      	mov	r3, r1
 8018ed4:	cb03      	ldmia	r3!, {r0, r1}
 8018ed6:	6010      	str	r0, [r2, #0]
 8018ed8:	6051      	str	r1, [r2, #4]
			strcpy(p->grade,"6B+");
 8018eda:	687b      	ldr	r3, [r7, #4]
 8018edc:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8018ee0:	4a33      	ldr	r2, [pc, #204]	; (8018fb0 <problem_fetch+0x1794c>)
 8018ee2:	6810      	ldr	r0, [r2, #0]
 8018ee4:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 8018ee6:	687b      	ldr	r3, [r7, #4]
 8018ee8:	2207      	movs	r2, #7
 8018eea:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,J,H,C,I,G,I");
 8018eec:	687b      	ldr	r3, [r7, #4]
 8018eee:	33a4      	adds	r3, #164	; 0xa4
 8018ef0:	4a45      	ldr	r2, [pc, #276]	; (8019008 <problem_fetch+0x179a4>)
 8018ef2:	461c      	mov	r4, r3
 8018ef4:	4613      	mov	r3, r2
 8018ef6:	cb07      	ldmia	r3!, {r0, r1, r2}
 8018ef8:	6020      	str	r0, [r4, #0]
 8018efa:	6061      	str	r1, [r4, #4]
 8018efc:	60a2      	str	r2, [r4, #8]
 8018efe:	881b      	ldrh	r3, [r3, #0]
 8018f00:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,7,10,13,14,17,18");
 8018f02:	687b      	ldr	r3, [r7, #4]
 8018f04:	3304      	adds	r3, #4
 8018f06:	4a41      	ldr	r2, [pc, #260]	; (801900c <problem_fetch+0x179a8>)
 8018f08:	461d      	mov	r5, r3
 8018f0a:	4614      	mov	r4, r2
 8018f0c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8018f0e:	6028      	str	r0, [r5, #0]
 8018f10:	6069      	str	r1, [r5, #4]
 8018f12:	60aa      	str	r2, [r5, #8]
 8018f14:	60eb      	str	r3, [r5, #12]
 8018f16:	8823      	ldrh	r3, [r4, #0]
 8018f18:	78a2      	ldrb	r2, [r4, #2]
 8018f1a:	822b      	strh	r3, [r5, #16]
 8018f1c:	4613      	mov	r3, r2
 8018f1e:	74ab      	strb	r3, [r5, #18]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 8018f20:	687b      	ldr	r3, [r7, #4]
 8018f22:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8018f26:	4a3a      	ldr	r2, [pc, #232]	; (8019010 <problem_fetch+0x179ac>)
 8018f28:	461c      	mov	r4, r3
 8018f2a:	4613      	mov	r3, r2
 8018f2c:	cb07      	ldmia	r3!, {r0, r1, r2}
 8018f2e:	6020      	str	r0, [r4, #0]
 8018f30:	6061      	str	r1, [r4, #4]
 8018f32:	60a2      	str	r2, [r4, #8]
 8018f34:	881b      	ldrh	r3, [r3, #0]
 8018f36:	81a3      	strh	r3, [r4, #12]
			break;
 8018f38:	f003 bac4 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 703 :
			strcpy(p->name,"ACG37");
 8018f3c:	687b      	ldr	r3, [r7, #4]
 8018f3e:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8018f42:	4a34      	ldr	r2, [pc, #208]	; (8019014 <problem_fetch+0x179b0>)
 8018f44:	6810      	ldr	r0, [r2, #0]
 8018f46:	6018      	str	r0, [r3, #0]
 8018f48:	8892      	ldrh	r2, [r2, #4]
 8018f4a:	809a      	strh	r2, [r3, #4]
			strcpy(p->grade,"7A");
 8018f4c:	687b      	ldr	r3, [r7, #4]
 8018f4e:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8018f52:	4a31      	ldr	r2, [pc, #196]	; (8019018 <problem_fetch+0x179b4>)
 8018f54:	8811      	ldrh	r1, [r2, #0]
 8018f56:	7892      	ldrb	r2, [r2, #2]
 8018f58:	8019      	strh	r1, [r3, #0]
 8018f5a:	709a      	strb	r2, [r3, #2]
			p->moveSize = 8;
 8018f5c:	687b      	ldr	r3, [r7, #4]
 8018f5e:	2208      	movs	r2, #8
 8018f60:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"H,J,I,J,G,C,C,A");
 8018f62:	687b      	ldr	r3, [r7, #4]
 8018f64:	33a4      	adds	r3, #164	; 0xa4
 8018f66:	4a2d      	ldr	r2, [pc, #180]	; (801901c <problem_fetch+0x179b8>)
 8018f68:	461c      	mov	r4, r3
 8018f6a:	4615      	mov	r5, r2
 8018f6c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8018f6e:	6020      	str	r0, [r4, #0]
 8018f70:	6061      	str	r1, [r4, #4]
 8018f72:	60a2      	str	r2, [r4, #8]
 8018f74:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,7,10,13,14,16,13,18");
 8018f76:	687b      	ldr	r3, [r7, #4]
 8018f78:	3304      	adds	r3, #4
 8018f7a:	4a29      	ldr	r2, [pc, #164]	; (8019020 <problem_fetch+0x179bc>)
 8018f7c:	461d      	mov	r5, r3
 8018f7e:	4614      	mov	r4, r2
 8018f80:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8018f82:	6028      	str	r0, [r5, #0]
 8018f84:	6069      	str	r1, [r5, #4]
 8018f86:	60aa      	str	r2, [r5, #8]
 8018f88:	60eb      	str	r3, [r5, #12]
 8018f8a:	6820      	ldr	r0, [r4, #0]
 8018f8c:	6128      	str	r0, [r5, #16]
 8018f8e:	88a3      	ldrh	r3, [r4, #4]
 8018f90:	82ab      	strh	r3, [r5, #20]
			strcpy(p->startFinish,"s,d,d,d,d,d,d,e");
 8018f92:	687b      	ldr	r3, [r7, #4]
 8018f94:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8018f98:	4a16      	ldr	r2, [pc, #88]	; (8018ff4 <problem_fetch+0x17990>)
 8018f9a:	461c      	mov	r4, r3
 8018f9c:	4615      	mov	r5, r2
 8018f9e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8018fa0:	6020      	str	r0, [r4, #0]
 8018fa2:	6061      	str	r1, [r4, #4]
 8018fa4:	60a2      	str	r2, [r4, #8]
 8018fa6:	60e3      	str	r3, [r4, #12]
			break;
 8018fa8:	f003 ba8c 	b.w	801c4c4 <problem_fetch+0x1ae60>
 8018fac:	0802be70 	.word	0x0802be70
 8018fb0:	08023b24 	.word	0x08023b24
 8018fb4:	0802be7c 	.word	0x0802be7c
 8018fb8:	0802be8c 	.word	0x0802be8c
 8018fbc:	08023c48 	.word	0x08023c48
 8018fc0:	0802bea4 	.word	0x0802bea4
 8018fc4:	08029e18 	.word	0x08029e18
 8018fc8:	0802beb4 	.word	0x0802beb4
 8018fcc:	08023b9c 	.word	0x08023b9c
 8018fd0:	0802bec8 	.word	0x0802bec8
 8018fd4:	08023cc4 	.word	0x08023cc4
 8018fd8:	0802bed4 	.word	0x0802bed4
 8018fdc:	0802bee0 	.word	0x0802bee0
 8018fe0:	08023ec0 	.word	0x08023ec0
 8018fe4:	0802bef0 	.word	0x0802bef0
 8018fe8:	08023bbc 	.word	0x08023bbc
 8018fec:	0802bef8 	.word	0x0802bef8
 8018ff0:	0802bf08 	.word	0x0802bf08
 8018ff4:	08023d34 	.word	0x08023d34
 8018ff8:	0802bf20 	.word	0x0802bf20
 8018ffc:	0802bf24 	.word	0x0802bf24
 8019000:	0802bf34 	.word	0x0802bf34
 8019004:	0802bf48 	.word	0x0802bf48
 8019008:	0802bf50 	.word	0x0802bf50
 801900c:	0802650c 	.word	0x0802650c
 8019010:	08023cac 	.word	0x08023cac
 8019014:	0802bf60 	.word	0x0802bf60
 8019018:	08023ae4 	.word	0x08023ae4
 801901c:	0802bf68 	.word	0x0802bf68
 8019020:	0802bf78 	.word	0x0802bf78
		case 704 :
			strcpy(p->name,"BATTLE OF THE PUDGE");
 8019024:	687b      	ldr	r3, [r7, #4]
 8019026:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801902a:	4abc      	ldr	r2, [pc, #752]	; (801931c <problem_fetch+0x17cb8>)
 801902c:	461d      	mov	r5, r3
 801902e:	4614      	mov	r4, r2
 8019030:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8019032:	6028      	str	r0, [r5, #0]
 8019034:	6069      	str	r1, [r5, #4]
 8019036:	60aa      	str	r2, [r5, #8]
 8019038:	60eb      	str	r3, [r5, #12]
 801903a:	6820      	ldr	r0, [r4, #0]
 801903c:	6128      	str	r0, [r5, #16]
			strcpy(p->grade,"7A+");
 801903e:	687b      	ldr	r3, [r7, #4]
 8019040:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8019044:	4ab6      	ldr	r2, [pc, #728]	; (8019320 <problem_fetch+0x17cbc>)
 8019046:	6810      	ldr	r0, [r2, #0]
 8019048:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 801904a:	687b      	ldr	r3, [r7, #4]
 801904c:	2207      	movs	r2, #7
 801904e:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"A,C,D,E,E,H,I");
 8019050:	687b      	ldr	r3, [r7, #4]
 8019052:	33a4      	adds	r3, #164	; 0xa4
 8019054:	4ab3      	ldr	r2, [pc, #716]	; (8019324 <problem_fetch+0x17cc0>)
 8019056:	461c      	mov	r4, r3
 8019058:	4613      	mov	r3, r2
 801905a:	cb07      	ldmia	r3!, {r0, r1, r2}
 801905c:	6020      	str	r0, [r4, #0]
 801905e:	6061      	str	r1, [r4, #4]
 8019060:	60a2      	str	r2, [r4, #8]
 8019062:	881b      	ldrh	r3, [r3, #0]
 8019064:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"18,5,11,8,16,5,10");
 8019066:	687b      	ldr	r3, [r7, #4]
 8019068:	3304      	adds	r3, #4
 801906a:	4aaf      	ldr	r2, [pc, #700]	; (8019328 <problem_fetch+0x17cc4>)
 801906c:	461d      	mov	r5, r3
 801906e:	4614      	mov	r4, r2
 8019070:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8019072:	6028      	str	r0, [r5, #0]
 8019074:	6069      	str	r1, [r5, #4]
 8019076:	60aa      	str	r2, [r5, #8]
 8019078:	60eb      	str	r3, [r5, #12]
 801907a:	8823      	ldrh	r3, [r4, #0]
 801907c:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"e,s,d,d,d,s,d");
 801907e:	687b      	ldr	r3, [r7, #4]
 8019080:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8019084:	4aa9      	ldr	r2, [pc, #676]	; (801932c <problem_fetch+0x17cc8>)
 8019086:	461c      	mov	r4, r3
 8019088:	4613      	mov	r3, r2
 801908a:	cb07      	ldmia	r3!, {r0, r1, r2}
 801908c:	6020      	str	r0, [r4, #0]
 801908e:	6061      	str	r1, [r4, #4]
 8019090:	60a2      	str	r2, [r4, #8]
 8019092:	881b      	ldrh	r3, [r3, #0]
 8019094:	81a3      	strh	r3, [r4, #12]
			break;
 8019096:	f003 ba15 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 705 :
			strcpy(p->name,"THIS IS NOW...");
 801909a:	687b      	ldr	r3, [r7, #4]
 801909c:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80190a0:	4aa3      	ldr	r2, [pc, #652]	; (8019330 <problem_fetch+0x17ccc>)
 80190a2:	461c      	mov	r4, r3
 80190a4:	4613      	mov	r3, r2
 80190a6:	cb07      	ldmia	r3!, {r0, r1, r2}
 80190a8:	6020      	str	r0, [r4, #0]
 80190aa:	6061      	str	r1, [r4, #4]
 80190ac:	60a2      	str	r2, [r4, #8]
 80190ae:	881a      	ldrh	r2, [r3, #0]
 80190b0:	789b      	ldrb	r3, [r3, #2]
 80190b2:	81a2      	strh	r2, [r4, #12]
 80190b4:	73a3      	strb	r3, [r4, #14]
			strcpy(p->grade,"6C+");
 80190b6:	687b      	ldr	r3, [r7, #4]
 80190b8:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80190bc:	4a9d      	ldr	r2, [pc, #628]	; (8019334 <problem_fetch+0x17cd0>)
 80190be:	6810      	ldr	r0, [r2, #0]
 80190c0:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 80190c2:	687b      	ldr	r3, [r7, #4]
 80190c4:	2206      	movs	r2, #6
 80190c6:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"H,I,E,D,B,D");
 80190c8:	687b      	ldr	r3, [r7, #4]
 80190ca:	33a4      	adds	r3, #164	; 0xa4
 80190cc:	4a9a      	ldr	r2, [pc, #616]	; (8019338 <problem_fetch+0x17cd4>)
 80190ce:	461c      	mov	r4, r3
 80190d0:	4613      	mov	r3, r2
 80190d2:	cb07      	ldmia	r3!, {r0, r1, r2}
 80190d4:	6020      	str	r0, [r4, #0]
 80190d6:	6061      	str	r1, [r4, #4]
 80190d8:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,10,12,15,15,18");
 80190da:	687b      	ldr	r3, [r7, #4]
 80190dc:	3304      	adds	r3, #4
 80190de:	4a97      	ldr	r2, [pc, #604]	; (801933c <problem_fetch+0x17cd8>)
 80190e0:	461d      	mov	r5, r3
 80190e2:	4614      	mov	r4, r2
 80190e4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80190e6:	6028      	str	r0, [r5, #0]
 80190e8:	6069      	str	r1, [r5, #4]
 80190ea:	60aa      	str	r2, [r5, #8]
 80190ec:	60eb      	str	r3, [r5, #12]
 80190ee:	7823      	ldrb	r3, [r4, #0]
 80190f0:	742b      	strb	r3, [r5, #16]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 80190f2:	687b      	ldr	r3, [r7, #4]
 80190f4:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 80190f8:	4a91      	ldr	r2, [pc, #580]	; (8019340 <problem_fetch+0x17cdc>)
 80190fa:	461c      	mov	r4, r3
 80190fc:	4613      	mov	r3, r2
 80190fe:	cb07      	ldmia	r3!, {r0, r1, r2}
 8019100:	6020      	str	r0, [r4, #0]
 8019102:	6061      	str	r1, [r4, #4]
 8019104:	60a2      	str	r2, [r4, #8]
			break;
 8019106:	f003 b9dd 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 706 :
			strcpy(p->name,"ACG31");
 801910a:	687b      	ldr	r3, [r7, #4]
 801910c:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8019110:	4a8c      	ldr	r2, [pc, #560]	; (8019344 <problem_fetch+0x17ce0>)
 8019112:	6810      	ldr	r0, [r2, #0]
 8019114:	6018      	str	r0, [r3, #0]
 8019116:	8892      	ldrh	r2, [r2, #4]
 8019118:	809a      	strh	r2, [r3, #4]
			strcpy(p->grade,"6C+");
 801911a:	687b      	ldr	r3, [r7, #4]
 801911c:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8019120:	4a84      	ldr	r2, [pc, #528]	; (8019334 <problem_fetch+0x17cd0>)
 8019122:	6810      	ldr	r0, [r2, #0]
 8019124:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 8019126:	687b      	ldr	r3, [r7, #4]
 8019128:	2206      	movs	r2, #6
 801912a:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,I,H,C,E,A");
 801912c:	687b      	ldr	r3, [r7, #4]
 801912e:	33a4      	adds	r3, #164	; 0xa4
 8019130:	4a85      	ldr	r2, [pc, #532]	; (8019348 <problem_fetch+0x17ce4>)
 8019132:	461c      	mov	r4, r3
 8019134:	4613      	mov	r3, r2
 8019136:	cb07      	ldmia	r3!, {r0, r1, r2}
 8019138:	6020      	str	r0, [r4, #0]
 801913a:	6061      	str	r1, [r4, #4]
 801913c:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,10,13,13,16,18");
 801913e:	687b      	ldr	r3, [r7, #4]
 8019140:	3304      	adds	r3, #4
 8019142:	4a82      	ldr	r2, [pc, #520]	; (801934c <problem_fetch+0x17ce8>)
 8019144:	461d      	mov	r5, r3
 8019146:	4614      	mov	r4, r2
 8019148:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801914a:	6028      	str	r0, [r5, #0]
 801914c:	6069      	str	r1, [r5, #4]
 801914e:	60aa      	str	r2, [r5, #8]
 8019150:	60eb      	str	r3, [r5, #12]
 8019152:	7823      	ldrb	r3, [r4, #0]
 8019154:	742b      	strb	r3, [r5, #16]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 8019156:	687b      	ldr	r3, [r7, #4]
 8019158:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 801915c:	4a78      	ldr	r2, [pc, #480]	; (8019340 <problem_fetch+0x17cdc>)
 801915e:	461c      	mov	r4, r3
 8019160:	4613      	mov	r3, r2
 8019162:	cb07      	ldmia	r3!, {r0, r1, r2}
 8019164:	6020      	str	r0, [r4, #0]
 8019166:	6061      	str	r1, [r4, #4]
 8019168:	60a2      	str	r2, [r4, #8]
			break;
 801916a:	f003 b9ab 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 707 :
			strcpy(p->name,"ACG30");
 801916e:	687b      	ldr	r3, [r7, #4]
 8019170:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8019174:	4a76      	ldr	r2, [pc, #472]	; (8019350 <problem_fetch+0x17cec>)
 8019176:	6810      	ldr	r0, [r2, #0]
 8019178:	6018      	str	r0, [r3, #0]
 801917a:	8892      	ldrh	r2, [r2, #4]
 801917c:	809a      	strh	r2, [r3, #4]
			strcpy(p->grade,"6C");
 801917e:	687b      	ldr	r3, [r7, #4]
 8019180:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8019184:	4a73      	ldr	r2, [pc, #460]	; (8019354 <problem_fetch+0x17cf0>)
 8019186:	8811      	ldrh	r1, [r2, #0]
 8019188:	7892      	ldrb	r2, [r2, #2]
 801918a:	8019      	strh	r1, [r3, #0]
 801918c:	709a      	strb	r2, [r3, #2]
			p->moveSize = 8;
 801918e:	687b      	ldr	r3, [r7, #4]
 8019190:	2208      	movs	r2, #8
 8019192:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"C,D,E,F,G,G,I,I");
 8019194:	687b      	ldr	r3, [r7, #4]
 8019196:	33a4      	adds	r3, #164	; 0xa4
 8019198:	4a6f      	ldr	r2, [pc, #444]	; (8019358 <problem_fetch+0x17cf4>)
 801919a:	461c      	mov	r4, r3
 801919c:	4615      	mov	r5, r2
 801919e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80191a0:	6020      	str	r0, [r4, #0]
 80191a2:	6061      	str	r1, [r4, #4]
 80191a4:	60a2      	str	r2, [r4, #8]
 80191a6:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,11,8,11,6,15,14,18");
 80191a8:	687b      	ldr	r3, [r7, #4]
 80191aa:	3304      	adds	r3, #4
 80191ac:	4a6b      	ldr	r2, [pc, #428]	; (801935c <problem_fetch+0x17cf8>)
 80191ae:	461d      	mov	r5, r3
 80191b0:	4614      	mov	r4, r2
 80191b2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80191b4:	6028      	str	r0, [r5, #0]
 80191b6:	6069      	str	r1, [r5, #4]
 80191b8:	60aa      	str	r2, [r5, #8]
 80191ba:	60eb      	str	r3, [r5, #12]
 80191bc:	6820      	ldr	r0, [r4, #0]
 80191be:	6128      	str	r0, [r5, #16]
 80191c0:	7923      	ldrb	r3, [r4, #4]
 80191c2:	752b      	strb	r3, [r5, #20]
			strcpy(p->startFinish,"s,d,d,d,s,d,d,e");
 80191c4:	687b      	ldr	r3, [r7, #4]
 80191c6:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 80191ca:	4a65      	ldr	r2, [pc, #404]	; (8019360 <problem_fetch+0x17cfc>)
 80191cc:	461c      	mov	r4, r3
 80191ce:	4615      	mov	r5, r2
 80191d0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80191d2:	6020      	str	r0, [r4, #0]
 80191d4:	6061      	str	r1, [r4, #4]
 80191d6:	60a2      	str	r2, [r4, #8]
 80191d8:	60e3      	str	r3, [r4, #12]
			break;
 80191da:	f003 b973 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 708 :
			strcpy(p->name,"ACG29");
 80191de:	687b      	ldr	r3, [r7, #4]
 80191e0:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80191e4:	4a5f      	ldr	r2, [pc, #380]	; (8019364 <problem_fetch+0x17d00>)
 80191e6:	6810      	ldr	r0, [r2, #0]
 80191e8:	6018      	str	r0, [r3, #0]
 80191ea:	8892      	ldrh	r2, [r2, #4]
 80191ec:	809a      	strh	r2, [r3, #4]
			strcpy(p->grade,"6C");
 80191ee:	687b      	ldr	r3, [r7, #4]
 80191f0:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80191f4:	4a57      	ldr	r2, [pc, #348]	; (8019354 <problem_fetch+0x17cf0>)
 80191f6:	8811      	ldrh	r1, [r2, #0]
 80191f8:	7892      	ldrb	r2, [r2, #2]
 80191fa:	8019      	strh	r1, [r3, #0]
 80191fc:	709a      	strb	r2, [r3, #2]
			p->moveSize = 7;
 80191fe:	687b      	ldr	r3, [r7, #4]
 8019200:	2207      	movs	r2, #7
 8019202:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,H,E,F,E,H,D");
 8019204:	687b      	ldr	r3, [r7, #4]
 8019206:	33a4      	adds	r3, #164	; 0xa4
 8019208:	4a57      	ldr	r2, [pc, #348]	; (8019368 <problem_fetch+0x17d04>)
 801920a:	461c      	mov	r4, r3
 801920c:	4613      	mov	r3, r2
 801920e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8019210:	6020      	str	r0, [r4, #0]
 8019212:	6061      	str	r1, [r4, #4]
 8019214:	60a2      	str	r2, [r4, #8]
 8019216:	881b      	ldrh	r3, [r3, #0]
 8019218:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,5,8,11,14,16,18");
 801921a:	687b      	ldr	r3, [r7, #4]
 801921c:	3304      	adds	r3, #4
 801921e:	4a53      	ldr	r2, [pc, #332]	; (801936c <problem_fetch+0x17d08>)
 8019220:	461d      	mov	r5, r3
 8019222:	4614      	mov	r4, r2
 8019224:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8019226:	6028      	str	r0, [r5, #0]
 8019228:	6069      	str	r1, [r5, #4]
 801922a:	60aa      	str	r2, [r5, #8]
 801922c:	60eb      	str	r3, [r5, #12]
 801922e:	8823      	ldrh	r3, [r4, #0]
 8019230:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,s,d,d,d,d,e");
 8019232:	687b      	ldr	r3, [r7, #4]
 8019234:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8019238:	4a4d      	ldr	r2, [pc, #308]	; (8019370 <problem_fetch+0x17d0c>)
 801923a:	461c      	mov	r4, r3
 801923c:	4613      	mov	r3, r2
 801923e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8019240:	6020      	str	r0, [r4, #0]
 8019242:	6061      	str	r1, [r4, #4]
 8019244:	60a2      	str	r2, [r4, #8]
 8019246:	881b      	ldrh	r3, [r3, #0]
 8019248:	81a3      	strh	r3, [r4, #12]
			break;
 801924a:	f003 b93b 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 709 :
			strcpy(p->name,"L9");
 801924e:	687b      	ldr	r3, [r7, #4]
 8019250:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8019254:	4a47      	ldr	r2, [pc, #284]	; (8019374 <problem_fetch+0x17d10>)
 8019256:	8811      	ldrh	r1, [r2, #0]
 8019258:	7892      	ldrb	r2, [r2, #2]
 801925a:	8019      	strh	r1, [r3, #0]
 801925c:	709a      	strb	r2, [r3, #2]
			strcpy(p->grade,"6B+");
 801925e:	687b      	ldr	r3, [r7, #4]
 8019260:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8019264:	4a44      	ldr	r2, [pc, #272]	; (8019378 <problem_fetch+0x17d14>)
 8019266:	6810      	ldr	r0, [r2, #0]
 8019268:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 801926a:	687b      	ldr	r3, [r7, #4]
 801926c:	2206      	movs	r2, #6
 801926e:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,E,C,E,C,D");
 8019270:	687b      	ldr	r3, [r7, #4]
 8019272:	33a4      	adds	r3, #164	; 0xa4
 8019274:	4a41      	ldr	r2, [pc, #260]	; (801937c <problem_fetch+0x17d18>)
 8019276:	461c      	mov	r4, r3
 8019278:	4613      	mov	r3, r2
 801927a:	cb07      	ldmia	r3!, {r0, r1, r2}
 801927c:	6020      	str	r0, [r4, #0]
 801927e:	6061      	str	r1, [r4, #4]
 8019280:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,8,8,12,13,18");
 8019282:	687b      	ldr	r3, [r7, #4]
 8019284:	3304      	adds	r3, #4
 8019286:	4a3e      	ldr	r2, [pc, #248]	; (8019380 <problem_fetch+0x17d1c>)
 8019288:	461c      	mov	r4, r3
 801928a:	4613      	mov	r3, r2
 801928c:	cb07      	ldmia	r3!, {r0, r1, r2}
 801928e:	6020      	str	r0, [r4, #0]
 8019290:	6061      	str	r1, [r4, #4]
 8019292:	60a2      	str	r2, [r4, #8]
 8019294:	881a      	ldrh	r2, [r3, #0]
 8019296:	789b      	ldrb	r3, [r3, #2]
 8019298:	81a2      	strh	r2, [r4, #12]
 801929a:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 801929c:	687b      	ldr	r3, [r7, #4]
 801929e:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 80192a2:	4a27      	ldr	r2, [pc, #156]	; (8019340 <problem_fetch+0x17cdc>)
 80192a4:	461c      	mov	r4, r3
 80192a6:	4613      	mov	r3, r2
 80192a8:	cb07      	ldmia	r3!, {r0, r1, r2}
 80192aa:	6020      	str	r0, [r4, #0]
 80192ac:	6061      	str	r1, [r4, #4]
 80192ae:	60a2      	str	r2, [r4, #8]
			break;
 80192b0:	f003 b908 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 710 :
			strcpy(p->name,"FLAPODROM");
 80192b4:	687b      	ldr	r3, [r7, #4]
 80192b6:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80192ba:	4932      	ldr	r1, [pc, #200]	; (8019384 <problem_fetch+0x17d20>)
 80192bc:	461a      	mov	r2, r3
 80192be:	460b      	mov	r3, r1
 80192c0:	cb03      	ldmia	r3!, {r0, r1}
 80192c2:	6010      	str	r0, [r2, #0]
 80192c4:	6051      	str	r1, [r2, #4]
 80192c6:	881b      	ldrh	r3, [r3, #0]
 80192c8:	8113      	strh	r3, [r2, #8]
			strcpy(p->grade,"6C+");
 80192ca:	687b      	ldr	r3, [r7, #4]
 80192cc:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80192d0:	4a18      	ldr	r2, [pc, #96]	; (8019334 <problem_fetch+0x17cd0>)
 80192d2:	6810      	ldr	r0, [r2, #0]
 80192d4:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 80192d6:	687b      	ldr	r3, [r7, #4]
 80192d8:	2206      	movs	r2, #6
 80192da:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"E,J,H,E,I,I");
 80192dc:	687b      	ldr	r3, [r7, #4]
 80192de:	33a4      	adds	r3, #164	; 0xa4
 80192e0:	4a29      	ldr	r2, [pc, #164]	; (8019388 <problem_fetch+0x17d24>)
 80192e2:	461c      	mov	r4, r3
 80192e4:	4613      	mov	r3, r2
 80192e6:	cb07      	ldmia	r3!, {r0, r1, r2}
 80192e8:	6020      	str	r0, [r4, #0]
 80192ea:	6061      	str	r1, [r4, #4]
 80192ec:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"6,5,10,14,14,18");
 80192ee:	687b      	ldr	r3, [r7, #4]
 80192f0:	3304      	adds	r3, #4
 80192f2:	4a26      	ldr	r2, [pc, #152]	; (801938c <problem_fetch+0x17d28>)
 80192f4:	461c      	mov	r4, r3
 80192f6:	4615      	mov	r5, r2
 80192f8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80192fa:	6020      	str	r0, [r4, #0]
 80192fc:	6061      	str	r1, [r4, #4]
 80192fe:	60a2      	str	r2, [r4, #8]
 8019300:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,s,d,d,d,e");
 8019302:	687b      	ldr	r3, [r7, #4]
 8019304:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8019308:	4a21      	ldr	r2, [pc, #132]	; (8019390 <problem_fetch+0x17d2c>)
 801930a:	461c      	mov	r4, r3
 801930c:	4613      	mov	r3, r2
 801930e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8019310:	6020      	str	r0, [r4, #0]
 8019312:	6061      	str	r1, [r4, #4]
 8019314:	60a2      	str	r2, [r4, #8]
			break;
 8019316:	f003 b8d5 	b.w	801c4c4 <problem_fetch+0x1ae60>
 801931a:	bf00      	nop
 801931c:	0802bf90 	.word	0x0802bf90
 8019320:	08023cc4 	.word	0x08023cc4
 8019324:	0802bfa4 	.word	0x0802bfa4
 8019328:	0802bfb4 	.word	0x0802bfb4
 801932c:	0802bfc8 	.word	0x0802bfc8
 8019330:	0802bfd8 	.word	0x0802bfd8
 8019334:	08023bbc 	.word	0x08023bbc
 8019338:	0802bfe8 	.word	0x0802bfe8
 801933c:	0802bff4 	.word	0x0802bff4
 8019340:	08023ec0 	.word	0x08023ec0
 8019344:	0802c008 	.word	0x0802c008
 8019348:	0802c010 	.word	0x0802c010
 801934c:	0802c01c 	.word	0x0802c01c
 8019350:	0802c030 	.word	0x0802c030
 8019354:	08023bf0 	.word	0x08023bf0
 8019358:	0802c038 	.word	0x0802c038
 801935c:	0802c048 	.word	0x0802c048
 8019360:	08026dcc 	.word	0x08026dcc
 8019364:	0802c060 	.word	0x0802c060
 8019368:	0802c068 	.word	0x0802c068
 801936c:	0802c078 	.word	0x0802c078
 8019370:	08023b9c 	.word	0x08023b9c
 8019374:	0802c08c 	.word	0x0802c08c
 8019378:	08023b24 	.word	0x08023b24
 801937c:	0802c090 	.word	0x0802c090
 8019380:	0802c09c 	.word	0x0802c09c
 8019384:	0802c0ac 	.word	0x0802c0ac
 8019388:	0802c0b8 	.word	0x0802c0b8
 801938c:	0802c0c4 	.word	0x0802c0c4
 8019390:	08023b04 	.word	0x08023b04
		case 711 :
			strcpy(p->name,"SWIM AND GO");
 8019394:	687b      	ldr	r3, [r7, #4]
 8019396:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801939a:	4ac0      	ldr	r2, [pc, #768]	; (801969c <problem_fetch+0x18038>)
 801939c:	461c      	mov	r4, r3
 801939e:	4613      	mov	r3, r2
 80193a0:	cb07      	ldmia	r3!, {r0, r1, r2}
 80193a2:	6020      	str	r0, [r4, #0]
 80193a4:	6061      	str	r1, [r4, #4]
 80193a6:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade,"6B+");
 80193a8:	687b      	ldr	r3, [r7, #4]
 80193aa:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80193ae:	4abc      	ldr	r2, [pc, #752]	; (80196a0 <problem_fetch+0x1803c>)
 80193b0:	6810      	ldr	r0, [r2, #0]
 80193b2:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 80193b4:	687b      	ldr	r3, [r7, #4]
 80193b6:	2206      	movs	r2, #6
 80193b8:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,E,H,C,I,D");
 80193ba:	687b      	ldr	r3, [r7, #4]
 80193bc:	33a4      	adds	r3, #164	; 0xa4
 80193be:	4ab9      	ldr	r2, [pc, #740]	; (80196a4 <problem_fetch+0x18040>)
 80193c0:	461c      	mov	r4, r3
 80193c2:	4613      	mov	r3, r2
 80193c4:	cb07      	ldmia	r3!, {r0, r1, r2}
 80193c6:	6020      	str	r0, [r4, #0]
 80193c8:	6061      	str	r1, [r4, #4]
 80193ca:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,6,10,13,14,18");
 80193cc:	687b      	ldr	r3, [r7, #4]
 80193ce:	3304      	adds	r3, #4
 80193d0:	4ab5      	ldr	r2, [pc, #724]	; (80196a8 <problem_fetch+0x18044>)
 80193d2:	461c      	mov	r4, r3
 80193d4:	4615      	mov	r5, r2
 80193d6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80193d8:	6020      	str	r0, [r4, #0]
 80193da:	6061      	str	r1, [r4, #4]
 80193dc:	60a2      	str	r2, [r4, #8]
 80193de:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,s,d,d,d,e");
 80193e0:	687b      	ldr	r3, [r7, #4]
 80193e2:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 80193e6:	4ab1      	ldr	r2, [pc, #708]	; (80196ac <problem_fetch+0x18048>)
 80193e8:	461c      	mov	r4, r3
 80193ea:	4613      	mov	r3, r2
 80193ec:	cb07      	ldmia	r3!, {r0, r1, r2}
 80193ee:	6020      	str	r0, [r4, #0]
 80193f0:	6061      	str	r1, [r4, #4]
 80193f2:	60a2      	str	r2, [r4, #8]
			break;
 80193f4:	f003 b866 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 712 :
			strcpy(p->name,"SWIMMING GOAT");
 80193f8:	687b      	ldr	r3, [r7, #4]
 80193fa:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80193fe:	4aac      	ldr	r2, [pc, #688]	; (80196b0 <problem_fetch+0x1804c>)
 8019400:	461c      	mov	r4, r3
 8019402:	4613      	mov	r3, r2
 8019404:	cb07      	ldmia	r3!, {r0, r1, r2}
 8019406:	6020      	str	r0, [r4, #0]
 8019408:	6061      	str	r1, [r4, #4]
 801940a:	60a2      	str	r2, [r4, #8]
 801940c:	881b      	ldrh	r3, [r3, #0]
 801940e:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade,"6B+");
 8019410:	687b      	ldr	r3, [r7, #4]
 8019412:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8019416:	4aa2      	ldr	r2, [pc, #648]	; (80196a0 <problem_fetch+0x1803c>)
 8019418:	6810      	ldr	r0, [r2, #0]
 801941a:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 801941c:	687b      	ldr	r3, [r7, #4]
 801941e:	2206      	movs	r2, #6
 8019420:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,H,C,I,I,D");
 8019422:	687b      	ldr	r3, [r7, #4]
 8019424:	33a4      	adds	r3, #164	; 0xa4
 8019426:	4aa3      	ldr	r2, [pc, #652]	; (80196b4 <problem_fetch+0x18050>)
 8019428:	461c      	mov	r4, r3
 801942a:	4613      	mov	r3, r2
 801942c:	cb07      	ldmia	r3!, {r0, r1, r2}
 801942e:	6020      	str	r0, [r4, #0]
 8019430:	6061      	str	r1, [r4, #4]
 8019432:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,10,13,14,7,18");
 8019434:	687b      	ldr	r3, [r7, #4]
 8019436:	3304      	adds	r3, #4
 8019438:	4a9f      	ldr	r2, [pc, #636]	; (80196b8 <problem_fetch+0x18054>)
 801943a:	461c      	mov	r4, r3
 801943c:	4615      	mov	r5, r2
 801943e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8019440:	6020      	str	r0, [r4, #0]
 8019442:	6061      	str	r1, [r4, #4]
 8019444:	60a2      	str	r2, [r4, #8]
 8019446:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 8019448:	687b      	ldr	r3, [r7, #4]
 801944a:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 801944e:	4a9b      	ldr	r2, [pc, #620]	; (80196bc <problem_fetch+0x18058>)
 8019450:	461c      	mov	r4, r3
 8019452:	4613      	mov	r3, r2
 8019454:	cb07      	ldmia	r3!, {r0, r1, r2}
 8019456:	6020      	str	r0, [r4, #0]
 8019458:	6061      	str	r1, [r4, #4]
 801945a:	60a2      	str	r2, [r4, #8]
			break;
 801945c:	f003 b832 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 713 :
			strcpy(p->name,"NORTHSIDE");
 8019460:	687b      	ldr	r3, [r7, #4]
 8019462:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8019466:	4996      	ldr	r1, [pc, #600]	; (80196c0 <problem_fetch+0x1805c>)
 8019468:	461a      	mov	r2, r3
 801946a:	460b      	mov	r3, r1
 801946c:	cb03      	ldmia	r3!, {r0, r1}
 801946e:	6010      	str	r0, [r2, #0]
 8019470:	6051      	str	r1, [r2, #4]
 8019472:	881b      	ldrh	r3, [r3, #0]
 8019474:	8113      	strh	r3, [r2, #8]
			strcpy(p->grade,"7A");
 8019476:	687b      	ldr	r3, [r7, #4]
 8019478:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801947c:	4a91      	ldr	r2, [pc, #580]	; (80196c4 <problem_fetch+0x18060>)
 801947e:	8811      	ldrh	r1, [r2, #0]
 8019480:	7892      	ldrb	r2, [r2, #2]
 8019482:	8019      	strh	r1, [r3, #0]
 8019484:	709a      	strb	r2, [r3, #2]
			p->moveSize = 6;
 8019486:	687b      	ldr	r3, [r7, #4]
 8019488:	2206      	movs	r2, #6
 801948a:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"B,D,E,E,H,J");
 801948c:	687b      	ldr	r3, [r7, #4]
 801948e:	33a4      	adds	r3, #164	; 0xa4
 8019490:	4a8d      	ldr	r2, [pc, #564]	; (80196c8 <problem_fetch+0x18064>)
 8019492:	461c      	mov	r4, r3
 8019494:	4613      	mov	r3, r2
 8019496:	cb07      	ldmia	r3!, {r0, r1, r2}
 8019498:	6020      	str	r0, [r4, #0]
 801949a:	6061      	str	r1, [r4, #4]
 801949c:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"15,18,8,12,5,5");
 801949e:	687b      	ldr	r3, [r7, #4]
 80194a0:	3304      	adds	r3, #4
 80194a2:	4a8a      	ldr	r2, [pc, #552]	; (80196cc <problem_fetch+0x18068>)
 80194a4:	461c      	mov	r4, r3
 80194a6:	4613      	mov	r3, r2
 80194a8:	cb07      	ldmia	r3!, {r0, r1, r2}
 80194aa:	6020      	str	r0, [r4, #0]
 80194ac:	6061      	str	r1, [r4, #4]
 80194ae:	60a2      	str	r2, [r4, #8]
 80194b0:	881a      	ldrh	r2, [r3, #0]
 80194b2:	789b      	ldrb	r3, [r3, #2]
 80194b4:	81a2      	strh	r2, [r4, #12]
 80194b6:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish,"d,e,d,d,s,s");
 80194b8:	687b      	ldr	r3, [r7, #4]
 80194ba:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 80194be:	4a84      	ldr	r2, [pc, #528]	; (80196d0 <problem_fetch+0x1806c>)
 80194c0:	461c      	mov	r4, r3
 80194c2:	4613      	mov	r3, r2
 80194c4:	cb07      	ldmia	r3!, {r0, r1, r2}
 80194c6:	6020      	str	r0, [r4, #0]
 80194c8:	6061      	str	r1, [r4, #4]
 80194ca:	60a2      	str	r2, [r4, #8]
			break;
 80194cc:	f002 bffa 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 714 :
			strcpy(p->name,"DESTINY'S GRANDMA");
 80194d0:	687b      	ldr	r3, [r7, #4]
 80194d2:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80194d6:	4a7f      	ldr	r2, [pc, #508]	; (80196d4 <problem_fetch+0x18070>)
 80194d8:	461d      	mov	r5, r3
 80194da:	4614      	mov	r4, r2
 80194dc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80194de:	6028      	str	r0, [r5, #0]
 80194e0:	6069      	str	r1, [r5, #4]
 80194e2:	60aa      	str	r2, [r5, #8]
 80194e4:	60eb      	str	r3, [r5, #12]
 80194e6:	8823      	ldrh	r3, [r4, #0]
 80194e8:	822b      	strh	r3, [r5, #16]
			strcpy(p->grade,"6B+");
 80194ea:	687b      	ldr	r3, [r7, #4]
 80194ec:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80194f0:	4a6b      	ldr	r2, [pc, #428]	; (80196a0 <problem_fetch+0x1803c>)
 80194f2:	6810      	ldr	r0, [r2, #0]
 80194f4:	6018      	str	r0, [r3, #0]
			p->moveSize = 8;
 80194f6:	687b      	ldr	r3, [r7, #4]
 80194f8:	2208      	movs	r2, #8
 80194fa:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,J,G,H,G,I,G,I");
 80194fc:	687b      	ldr	r3, [r7, #4]
 80194fe:	33a4      	adds	r3, #164	; 0xa4
 8019500:	4a75      	ldr	r2, [pc, #468]	; (80196d8 <problem_fetch+0x18074>)
 8019502:	461c      	mov	r4, r3
 8019504:	4615      	mov	r5, r2
 8019506:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8019508:	6020      	str	r0, [r4, #0]
 801950a:	6061      	str	r1, [r4, #4]
 801950c:	60a2      	str	r2, [r4, #8]
 801950e:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,7,9,10,14,14,17,18");
 8019510:	687b      	ldr	r3, [r7, #4]
 8019512:	3304      	adds	r3, #4
 8019514:	4a71      	ldr	r2, [pc, #452]	; (80196dc <problem_fetch+0x18078>)
 8019516:	461d      	mov	r5, r3
 8019518:	4614      	mov	r4, r2
 801951a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801951c:	6028      	str	r0, [r5, #0]
 801951e:	6069      	str	r1, [r5, #4]
 8019520:	60aa      	str	r2, [r5, #8]
 8019522:	60eb      	str	r3, [r5, #12]
 8019524:	6820      	ldr	r0, [r4, #0]
 8019526:	6128      	str	r0, [r5, #16]
 8019528:	7923      	ldrb	r3, [r4, #4]
 801952a:	752b      	strb	r3, [r5, #20]
			strcpy(p->startFinish,"s,d,d,d,d,d,d,e");
 801952c:	687b      	ldr	r3, [r7, #4]
 801952e:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8019532:	4a6b      	ldr	r2, [pc, #428]	; (80196e0 <problem_fetch+0x1807c>)
 8019534:	461c      	mov	r4, r3
 8019536:	4615      	mov	r5, r2
 8019538:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801953a:	6020      	str	r0, [r4, #0]
 801953c:	6061      	str	r1, [r4, #4]
 801953e:	60a2      	str	r2, [r4, #8]
 8019540:	60e3      	str	r3, [r4, #12]
			break;
 8019542:	f002 bfbf 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 715 :
			strcpy(p->name,"3/5TH A MAN");
 8019546:	687b      	ldr	r3, [r7, #4]
 8019548:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801954c:	4a65      	ldr	r2, [pc, #404]	; (80196e4 <problem_fetch+0x18080>)
 801954e:	461c      	mov	r4, r3
 8019550:	4613      	mov	r3, r2
 8019552:	cb07      	ldmia	r3!, {r0, r1, r2}
 8019554:	6020      	str	r0, [r4, #0]
 8019556:	6061      	str	r1, [r4, #4]
 8019558:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade,"7A+");
 801955a:	687b      	ldr	r3, [r7, #4]
 801955c:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8019560:	4a61      	ldr	r2, [pc, #388]	; (80196e8 <problem_fetch+0x18084>)
 8019562:	6810      	ldr	r0, [r2, #0]
 8019564:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 8019566:	687b      	ldr	r3, [r7, #4]
 8019568:	2207      	movs	r2, #7
 801956a:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,H,K,E,I,H,I");
 801956c:	687b      	ldr	r3, [r7, #4]
 801956e:	33a4      	adds	r3, #164	; 0xa4
 8019570:	4a5e      	ldr	r2, [pc, #376]	; (80196ec <problem_fetch+0x18088>)
 8019572:	461c      	mov	r4, r3
 8019574:	4613      	mov	r3, r2
 8019576:	cb07      	ldmia	r3!, {r0, r1, r2}
 8019578:	6020      	str	r0, [r4, #0]
 801957a:	6061      	str	r1, [r4, #4]
 801957c:	60a2      	str	r2, [r4, #8]
 801957e:	881b      	ldrh	r3, [r3, #0]
 8019580:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,12,14,8,9,16,18");
 8019582:	687b      	ldr	r3, [r7, #4]
 8019584:	3304      	adds	r3, #4
 8019586:	4a5a      	ldr	r2, [pc, #360]	; (80196f0 <problem_fetch+0x1808c>)
 8019588:	461d      	mov	r5, r3
 801958a:	4614      	mov	r4, r2
 801958c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801958e:	6028      	str	r0, [r5, #0]
 8019590:	6069      	str	r1, [r5, #4]
 8019592:	60aa      	str	r2, [r5, #8]
 8019594:	60eb      	str	r3, [r5, #12]
 8019596:	8823      	ldrh	r3, [r4, #0]
 8019598:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 801959a:	687b      	ldr	r3, [r7, #4]
 801959c:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 80195a0:	4a54      	ldr	r2, [pc, #336]	; (80196f4 <problem_fetch+0x18090>)
 80195a2:	461c      	mov	r4, r3
 80195a4:	4613      	mov	r3, r2
 80195a6:	cb07      	ldmia	r3!, {r0, r1, r2}
 80195a8:	6020      	str	r0, [r4, #0]
 80195aa:	6061      	str	r1, [r4, #4]
 80195ac:	60a2      	str	r2, [r4, #8]
 80195ae:	881b      	ldrh	r3, [r3, #0]
 80195b0:	81a3      	strh	r3, [r4, #12]
			break;
 80195b2:	f002 bf87 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 716 :
			strcpy(p->name,"5 FINGER DISCOUNT");
 80195b6:	687b      	ldr	r3, [r7, #4]
 80195b8:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80195bc:	4a4e      	ldr	r2, [pc, #312]	; (80196f8 <problem_fetch+0x18094>)
 80195be:	461d      	mov	r5, r3
 80195c0:	4614      	mov	r4, r2
 80195c2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80195c4:	6028      	str	r0, [r5, #0]
 80195c6:	6069      	str	r1, [r5, #4]
 80195c8:	60aa      	str	r2, [r5, #8]
 80195ca:	60eb      	str	r3, [r5, #12]
 80195cc:	8823      	ldrh	r3, [r4, #0]
 80195ce:	822b      	strh	r3, [r5, #16]
			strcpy(p->grade,"7A+");
 80195d0:	687b      	ldr	r3, [r7, #4]
 80195d2:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80195d6:	4a44      	ldr	r2, [pc, #272]	; (80196e8 <problem_fetch+0x18084>)
 80195d8:	6810      	ldr	r0, [r2, #0]
 80195da:	6018      	str	r0, [r3, #0]
			p->moveSize = 8;
 80195dc:	687b      	ldr	r3, [r7, #4]
 80195de:	2208      	movs	r2, #8
 80195e0:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"A,A,B,D,E,E,E,G");
 80195e2:	687b      	ldr	r3, [r7, #4]
 80195e4:	33a4      	adds	r3, #164	; 0xa4
 80195e6:	4a45      	ldr	r2, [pc, #276]	; (80196fc <problem_fetch+0x18098>)
 80195e8:	461c      	mov	r4, r3
 80195ea:	4615      	mov	r5, r2
 80195ec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80195ee:	6020      	str	r0, [r4, #0]
 80195f0:	6061      	str	r1, [r4, #4]
 80195f2:	60a2      	str	r2, [r4, #8]
 80195f4:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"9,14,12,18,6,8,14,4");
 80195f6:	687b      	ldr	r3, [r7, #4]
 80195f8:	3304      	adds	r3, #4
 80195fa:	4a41      	ldr	r2, [pc, #260]	; (8019700 <problem_fetch+0x1809c>)
 80195fc:	461d      	mov	r5, r3
 80195fe:	4614      	mov	r4, r2
 8019600:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8019602:	6028      	str	r0, [r5, #0]
 8019604:	6069      	str	r1, [r5, #4]
 8019606:	60aa      	str	r2, [r5, #8]
 8019608:	60eb      	str	r3, [r5, #12]
 801960a:	6820      	ldr	r0, [r4, #0]
 801960c:	6128      	str	r0, [r5, #16]
			strcpy(p->startFinish,"d,d,d,e,d,d,d,s");
 801960e:	687b      	ldr	r3, [r7, #4]
 8019610:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8019614:	4a3b      	ldr	r2, [pc, #236]	; (8019704 <problem_fetch+0x180a0>)
 8019616:	461c      	mov	r4, r3
 8019618:	4615      	mov	r5, r2
 801961a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801961c:	6020      	str	r0, [r4, #0]
 801961e:	6061      	str	r1, [r4, #4]
 8019620:	60a2      	str	r2, [r4, #8]
 8019622:	60e3      	str	r3, [r4, #12]
			break;
 8019624:	f002 bf4e 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 717 :
			strcpy(p->name,"THE SENDTRAIN");
 8019628:	687b      	ldr	r3, [r7, #4]
 801962a:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801962e:	4a36      	ldr	r2, [pc, #216]	; (8019708 <problem_fetch+0x180a4>)
 8019630:	461c      	mov	r4, r3
 8019632:	4613      	mov	r3, r2
 8019634:	cb07      	ldmia	r3!, {r0, r1, r2}
 8019636:	6020      	str	r0, [r4, #0]
 8019638:	6061      	str	r1, [r4, #4]
 801963a:	60a2      	str	r2, [r4, #8]
 801963c:	881b      	ldrh	r3, [r3, #0]
 801963e:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade,"6C");
 8019640:	687b      	ldr	r3, [r7, #4]
 8019642:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8019646:	4a31      	ldr	r2, [pc, #196]	; (801970c <problem_fetch+0x180a8>)
 8019648:	8811      	ldrh	r1, [r2, #0]
 801964a:	7892      	ldrb	r2, [r2, #2]
 801964c:	8019      	strh	r1, [r3, #0]
 801964e:	709a      	strb	r2, [r3, #2]
			p->moveSize = 8;
 8019650:	687b      	ldr	r3, [r7, #4]
 8019652:	2208      	movs	r2, #8
 8019654:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"E,G,G,G,G,I,I,J");
 8019656:	687b      	ldr	r3, [r7, #4]
 8019658:	33a4      	adds	r3, #164	; 0xa4
 801965a:	4a2d      	ldr	r2, [pc, #180]	; (8019710 <problem_fetch+0x180ac>)
 801965c:	461c      	mov	r4, r3
 801965e:	4615      	mov	r5, r2
 8019660:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8019662:	6020      	str	r0, [r4, #0]
 8019664:	6061      	str	r1, [r4, #4]
 8019666:	60a2      	str	r2, [r4, #8]
 8019668:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"12,4,6,9,15,14,18,7");
 801966a:	687b      	ldr	r3, [r7, #4]
 801966c:	3304      	adds	r3, #4
 801966e:	4a29      	ldr	r2, [pc, #164]	; (8019714 <problem_fetch+0x180b0>)
 8019670:	461d      	mov	r5, r3
 8019672:	4614      	mov	r4, r2
 8019674:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8019676:	6028      	str	r0, [r5, #0]
 8019678:	6069      	str	r1, [r5, #4]
 801967a:	60aa      	str	r2, [r5, #8]
 801967c:	60eb      	str	r3, [r5, #12]
 801967e:	6820      	ldr	r0, [r4, #0]
 8019680:	6128      	str	r0, [r5, #16]
			strcpy(p->startFinish,"d,s,d,d,d,d,e,d");
 8019682:	687b      	ldr	r3, [r7, #4]
 8019684:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8019688:	4a23      	ldr	r2, [pc, #140]	; (8019718 <problem_fetch+0x180b4>)
 801968a:	461c      	mov	r4, r3
 801968c:	4615      	mov	r5, r2
 801968e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8019690:	6020      	str	r0, [r4, #0]
 8019692:	6061      	str	r1, [r4, #4]
 8019694:	60a2      	str	r2, [r4, #8]
 8019696:	60e3      	str	r3, [r4, #12]
			break;
 8019698:	f002 bf14 	b.w	801c4c4 <problem_fetch+0x1ae60>
 801969c:	0802c0d4 	.word	0x0802c0d4
 80196a0:	08023b24 	.word	0x08023b24
 80196a4:	0802c0e0 	.word	0x0802c0e0
 80196a8:	0802c0ec 	.word	0x0802c0ec
 80196ac:	08023b04 	.word	0x08023b04
 80196b0:	0802c0fc 	.word	0x0802c0fc
 80196b4:	0802c10c 	.word	0x0802c10c
 80196b8:	0802c118 	.word	0x0802c118
 80196bc:	08023ec0 	.word	0x08023ec0
 80196c0:	0802c128 	.word	0x0802c128
 80196c4:	08023ae4 	.word	0x08023ae4
 80196c8:	0802c134 	.word	0x0802c134
 80196cc:	0802c140 	.word	0x0802c140
 80196d0:	0802c150 	.word	0x0802c150
 80196d4:	0802c15c 	.word	0x0802c15c
 80196d8:	0802c170 	.word	0x0802c170
 80196dc:	0802c180 	.word	0x0802c180
 80196e0:	08023d34 	.word	0x08023d34
 80196e4:	0802c198 	.word	0x0802c198
 80196e8:	08023cc4 	.word	0x08023cc4
 80196ec:	0802c1a4 	.word	0x0802c1a4
 80196f0:	0802c1b4 	.word	0x0802c1b4
 80196f4:	08023cac 	.word	0x08023cac
 80196f8:	0802c1c8 	.word	0x0802c1c8
 80196fc:	0802c1dc 	.word	0x0802c1dc
 8019700:	0802c1ec 	.word	0x0802c1ec
 8019704:	0802c200 	.word	0x0802c200
 8019708:	0802c210 	.word	0x0802c210
 801970c:	08023bf0 	.word	0x08023bf0
 8019710:	0802c220 	.word	0x0802c220
 8019714:	0802c230 	.word	0x0802c230
 8019718:	0802c244 	.word	0x0802c244
		case 718 :
			strcpy(p->name,"SANTOKU SNATCH");
 801971c:	687b      	ldr	r3, [r7, #4]
 801971e:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8019722:	4aaf      	ldr	r2, [pc, #700]	; (80199e0 <problem_fetch+0x1837c>)
 8019724:	461c      	mov	r4, r3
 8019726:	4613      	mov	r3, r2
 8019728:	cb07      	ldmia	r3!, {r0, r1, r2}
 801972a:	6020      	str	r0, [r4, #0]
 801972c:	6061      	str	r1, [r4, #4]
 801972e:	60a2      	str	r2, [r4, #8]
 8019730:	881a      	ldrh	r2, [r3, #0]
 8019732:	789b      	ldrb	r3, [r3, #2]
 8019734:	81a2      	strh	r2, [r4, #12]
 8019736:	73a3      	strb	r3, [r4, #14]
			strcpy(p->grade,"7A+");
 8019738:	687b      	ldr	r3, [r7, #4]
 801973a:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801973e:	4aa9      	ldr	r2, [pc, #676]	; (80199e4 <problem_fetch+0x18380>)
 8019740:	6810      	ldr	r0, [r2, #0]
 8019742:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 8019744:	687b      	ldr	r3, [r7, #4]
 8019746:	2207      	movs	r2, #7
 8019748:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"H,H,C,F,F,J,I");
 801974a:	687b      	ldr	r3, [r7, #4]
 801974c:	33a4      	adds	r3, #164	; 0xa4
 801974e:	4aa6      	ldr	r2, [pc, #664]	; (80199e8 <problem_fetch+0x18384>)
 8019750:	461c      	mov	r4, r3
 8019752:	4613      	mov	r3, r2
 8019754:	cb07      	ldmia	r3!, {r0, r1, r2}
 8019756:	6020      	str	r0, [r4, #0]
 8019758:	6061      	str	r1, [r4, #4]
 801975a:	60a2      	str	r2, [r4, #8]
 801975c:	881b      	ldrh	r3, [r3, #0]
 801975e:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,8,8,11,13,16,18");
 8019760:	687b      	ldr	r3, [r7, #4]
 8019762:	3304      	adds	r3, #4
 8019764:	4aa1      	ldr	r2, [pc, #644]	; (80199ec <problem_fetch+0x18388>)
 8019766:	461d      	mov	r5, r3
 8019768:	4614      	mov	r4, r2
 801976a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801976c:	6028      	str	r0, [r5, #0]
 801976e:	6069      	str	r1, [r5, #4]
 8019770:	60aa      	str	r2, [r5, #8]
 8019772:	60eb      	str	r3, [r5, #12]
 8019774:	8823      	ldrh	r3, [r4, #0]
 8019776:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 8019778:	687b      	ldr	r3, [r7, #4]
 801977a:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 801977e:	4a9c      	ldr	r2, [pc, #624]	; (80199f0 <problem_fetch+0x1838c>)
 8019780:	461c      	mov	r4, r3
 8019782:	4613      	mov	r3, r2
 8019784:	cb07      	ldmia	r3!, {r0, r1, r2}
 8019786:	6020      	str	r0, [r4, #0]
 8019788:	6061      	str	r1, [r4, #4]
 801978a:	60a2      	str	r2, [r4, #8]
 801978c:	881b      	ldrh	r3, [r3, #0]
 801978e:	81a3      	strh	r3, [r4, #12]
			break;
 8019790:	f002 be98 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 719 :
			strcpy(p->name,"MY IDEA ?");
 8019794:	687b      	ldr	r3, [r7, #4]
 8019796:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801979a:	4996      	ldr	r1, [pc, #600]	; (80199f4 <problem_fetch+0x18390>)
 801979c:	461a      	mov	r2, r3
 801979e:	460b      	mov	r3, r1
 80197a0:	cb03      	ldmia	r3!, {r0, r1}
 80197a2:	6010      	str	r0, [r2, #0]
 80197a4:	6051      	str	r1, [r2, #4]
 80197a6:	881b      	ldrh	r3, [r3, #0]
 80197a8:	8113      	strh	r3, [r2, #8]
			strcpy(p->grade,"6C");
 80197aa:	687b      	ldr	r3, [r7, #4]
 80197ac:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80197b0:	4a91      	ldr	r2, [pc, #580]	; (80199f8 <problem_fetch+0x18394>)
 80197b2:	8811      	ldrh	r1, [r2, #0]
 80197b4:	7892      	ldrb	r2, [r2, #2]
 80197b6:	8019      	strh	r1, [r3, #0]
 80197b8:	709a      	strb	r2, [r3, #2]
			p->moveSize = 7;
 80197ba:	687b      	ldr	r3, [r7, #4]
 80197bc:	2207      	movs	r2, #7
 80197be:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"E,G,C,H,C,C,A");
 80197c0:	687b      	ldr	r3, [r7, #4]
 80197c2:	33a4      	adds	r3, #164	; 0xa4
 80197c4:	4a8d      	ldr	r2, [pc, #564]	; (80199fc <problem_fetch+0x18398>)
 80197c6:	461c      	mov	r4, r3
 80197c8:	4613      	mov	r3, r2
 80197ca:	cb07      	ldmia	r3!, {r0, r1, r2}
 80197cc:	6020      	str	r0, [r4, #0]
 80197ce:	6061      	str	r1, [r4, #4]
 80197d0:	60a2      	str	r2, [r4, #8]
 80197d2:	881b      	ldrh	r3, [r3, #0]
 80197d4:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"6,6,8,10,13,16,18");
 80197d6:	687b      	ldr	r3, [r7, #4]
 80197d8:	3304      	adds	r3, #4
 80197da:	4a89      	ldr	r2, [pc, #548]	; (8019a00 <problem_fetch+0x1839c>)
 80197dc:	461d      	mov	r5, r3
 80197de:	4614      	mov	r4, r2
 80197e0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80197e2:	6028      	str	r0, [r5, #0]
 80197e4:	6069      	str	r1, [r5, #4]
 80197e6:	60aa      	str	r2, [r5, #8]
 80197e8:	60eb      	str	r3, [r5, #12]
 80197ea:	8823      	ldrh	r3, [r4, #0]
 80197ec:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,s,d,d,d,d,e");
 80197ee:	687b      	ldr	r3, [r7, #4]
 80197f0:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 80197f4:	4a83      	ldr	r2, [pc, #524]	; (8019a04 <problem_fetch+0x183a0>)
 80197f6:	461c      	mov	r4, r3
 80197f8:	4613      	mov	r3, r2
 80197fa:	cb07      	ldmia	r3!, {r0, r1, r2}
 80197fc:	6020      	str	r0, [r4, #0]
 80197fe:	6061      	str	r1, [r4, #4]
 8019800:	60a2      	str	r2, [r4, #8]
 8019802:	881b      	ldrh	r3, [r3, #0]
 8019804:	81a3      	strh	r3, [r4, #12]
			break;
 8019806:	f002 be5d 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 720 :
			strcpy(p->name,"RUSTY MORNING");
 801980a:	687b      	ldr	r3, [r7, #4]
 801980c:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8019810:	4a7d      	ldr	r2, [pc, #500]	; (8019a08 <problem_fetch+0x183a4>)
 8019812:	461c      	mov	r4, r3
 8019814:	4613      	mov	r3, r2
 8019816:	cb07      	ldmia	r3!, {r0, r1, r2}
 8019818:	6020      	str	r0, [r4, #0]
 801981a:	6061      	str	r1, [r4, #4]
 801981c:	60a2      	str	r2, [r4, #8]
 801981e:	881b      	ldrh	r3, [r3, #0]
 8019820:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade,"6B+");
 8019822:	687b      	ldr	r3, [r7, #4]
 8019824:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8019828:	4a78      	ldr	r2, [pc, #480]	; (8019a0c <problem_fetch+0x183a8>)
 801982a:	6810      	ldr	r0, [r2, #0]
 801982c:	6018      	str	r0, [r3, #0]
			p->moveSize = 9;
 801982e:	687b      	ldr	r3, [r7, #4]
 8019830:	2209      	movs	r2, #9
 8019832:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"C,E,E,I,H,I,E,E,A");
 8019834:	687b      	ldr	r3, [r7, #4]
 8019836:	33a4      	adds	r3, #164	; 0xa4
 8019838:	4a75      	ldr	r2, [pc, #468]	; (8019a10 <problem_fetch+0x183ac>)
 801983a:	461d      	mov	r5, r3
 801983c:	4614      	mov	r4, r2
 801983e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8019840:	6028      	str	r0, [r5, #0]
 8019842:	6069      	str	r1, [r5, #4]
 8019844:	60aa      	str	r2, [r5, #8]
 8019846:	60eb      	str	r3, [r5, #12]
 8019848:	8823      	ldrh	r3, [r4, #0]
 801984a:	822b      	strh	r3, [r5, #16]
			strcpy(p->moveNumbers,"5,6,8,10,12,14,14,16,18");
 801984c:	687b      	ldr	r3, [r7, #4]
 801984e:	3304      	adds	r3, #4
 8019850:	4a70      	ldr	r2, [pc, #448]	; (8019a14 <problem_fetch+0x183b0>)
 8019852:	461d      	mov	r5, r3
 8019854:	4614      	mov	r4, r2
 8019856:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8019858:	6028      	str	r0, [r5, #0]
 801985a:	6069      	str	r1, [r5, #4]
 801985c:	60aa      	str	r2, [r5, #8]
 801985e:	60eb      	str	r3, [r5, #12]
 8019860:	cc03      	ldmia	r4!, {r0, r1}
 8019862:	6128      	str	r0, [r5, #16]
 8019864:	6169      	str	r1, [r5, #20]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,d,e");
 8019866:	687b      	ldr	r3, [r7, #4]
 8019868:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 801986c:	4a6a      	ldr	r2, [pc, #424]	; (8019a18 <problem_fetch+0x183b4>)
 801986e:	461d      	mov	r5, r3
 8019870:	4614      	mov	r4, r2
 8019872:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8019874:	6028      	str	r0, [r5, #0]
 8019876:	6069      	str	r1, [r5, #4]
 8019878:	60aa      	str	r2, [r5, #8]
 801987a:	60eb      	str	r3, [r5, #12]
 801987c:	8823      	ldrh	r3, [r4, #0]
 801987e:	822b      	strh	r3, [r5, #16]
			break;
 8019880:	f002 be20 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 721 :
			strcpy(p->name,"POMPOUS POMPADOUR");
 8019884:	687b      	ldr	r3, [r7, #4]
 8019886:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801988a:	4a64      	ldr	r2, [pc, #400]	; (8019a1c <problem_fetch+0x183b8>)
 801988c:	461d      	mov	r5, r3
 801988e:	4614      	mov	r4, r2
 8019890:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8019892:	6028      	str	r0, [r5, #0]
 8019894:	6069      	str	r1, [r5, #4]
 8019896:	60aa      	str	r2, [r5, #8]
 8019898:	60eb      	str	r3, [r5, #12]
 801989a:	8823      	ldrh	r3, [r4, #0]
 801989c:	822b      	strh	r3, [r5, #16]
			strcpy(p->grade,"6C");
 801989e:	687b      	ldr	r3, [r7, #4]
 80198a0:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80198a4:	4a54      	ldr	r2, [pc, #336]	; (80199f8 <problem_fetch+0x18394>)
 80198a6:	8811      	ldrh	r1, [r2, #0]
 80198a8:	7892      	ldrb	r2, [r2, #2]
 80198aa:	8019      	strh	r1, [r3, #0]
 80198ac:	709a      	strb	r2, [r3, #2]
			p->moveSize = 6;
 80198ae:	687b      	ldr	r3, [r7, #4]
 80198b0:	2206      	movs	r2, #6
 80198b2:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,E,G,C,E,A");
 80198b4:	687b      	ldr	r3, [r7, #4]
 80198b6:	33a4      	adds	r3, #164	; 0xa4
 80198b8:	4a59      	ldr	r2, [pc, #356]	; (8019a20 <problem_fetch+0x183bc>)
 80198ba:	461c      	mov	r4, r3
 80198bc:	4613      	mov	r3, r2
 80198be:	cb07      	ldmia	r3!, {r0, r1, r2}
 80198c0:	6020      	str	r0, [r4, #0]
 80198c2:	6061      	str	r1, [r4, #4]
 80198c4:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,8,10,13,16,18");
 80198c6:	687b      	ldr	r3, [r7, #4]
 80198c8:	3304      	adds	r3, #4
 80198ca:	4a56      	ldr	r2, [pc, #344]	; (8019a24 <problem_fetch+0x183c0>)
 80198cc:	461c      	mov	r4, r3
 80198ce:	4615      	mov	r5, r2
 80198d0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80198d2:	6020      	str	r0, [r4, #0]
 80198d4:	6061      	str	r1, [r4, #4]
 80198d6:	60a2      	str	r2, [r4, #8]
 80198d8:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 80198da:	687b      	ldr	r3, [r7, #4]
 80198dc:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 80198e0:	4a51      	ldr	r2, [pc, #324]	; (8019a28 <problem_fetch+0x183c4>)
 80198e2:	461c      	mov	r4, r3
 80198e4:	4613      	mov	r3, r2
 80198e6:	cb07      	ldmia	r3!, {r0, r1, r2}
 80198e8:	6020      	str	r0, [r4, #0]
 80198ea:	6061      	str	r1, [r4, #4]
 80198ec:	60a2      	str	r2, [r4, #8]
			break;
 80198ee:	f002 bde9 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 722 :
			strcpy(p->name,"KEEP YOUR FEET DRY");
 80198f2:	687b      	ldr	r3, [r7, #4]
 80198f4:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80198f8:	4a4c      	ldr	r2, [pc, #304]	; (8019a2c <problem_fetch+0x183c8>)
 80198fa:	461d      	mov	r5, r3
 80198fc:	4614      	mov	r4, r2
 80198fe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8019900:	6028      	str	r0, [r5, #0]
 8019902:	6069      	str	r1, [r5, #4]
 8019904:	60aa      	str	r2, [r5, #8]
 8019906:	60eb      	str	r3, [r5, #12]
 8019908:	8823      	ldrh	r3, [r4, #0]
 801990a:	78a2      	ldrb	r2, [r4, #2]
 801990c:	822b      	strh	r3, [r5, #16]
 801990e:	4613      	mov	r3, r2
 8019910:	74ab      	strb	r3, [r5, #18]
			strcpy(p->grade,"6B+");
 8019912:	687b      	ldr	r3, [r7, #4]
 8019914:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8019918:	4a3c      	ldr	r2, [pc, #240]	; (8019a0c <problem_fetch+0x183a8>)
 801991a:	6810      	ldr	r0, [r2, #0]
 801991c:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 801991e:	687b      	ldr	r3, [r7, #4]
 8019920:	2206      	movs	r2, #6
 8019922:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"C,H,G,D,D,D");
 8019924:	687b      	ldr	r3, [r7, #4]
 8019926:	33a4      	adds	r3, #164	; 0xa4
 8019928:	4a41      	ldr	r2, [pc, #260]	; (8019a30 <problem_fetch+0x183cc>)
 801992a:	461c      	mov	r4, r3
 801992c:	4613      	mov	r3, r2
 801992e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8019930:	6020      	str	r0, [r4, #0]
 8019932:	6061      	str	r1, [r4, #4]
 8019934:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,5,9,11,15,18");
 8019936:	687b      	ldr	r3, [r7, #4]
 8019938:	3304      	adds	r3, #4
 801993a:	4a3e      	ldr	r2, [pc, #248]	; (8019a34 <problem_fetch+0x183d0>)
 801993c:	461c      	mov	r4, r3
 801993e:	4613      	mov	r3, r2
 8019940:	cb07      	ldmia	r3!, {r0, r1, r2}
 8019942:	6020      	str	r0, [r4, #0]
 8019944:	6061      	str	r1, [r4, #4]
 8019946:	60a2      	str	r2, [r4, #8]
 8019948:	881a      	ldrh	r2, [r3, #0]
 801994a:	789b      	ldrb	r3, [r3, #2]
 801994c:	81a2      	strh	r2, [r4, #12]
 801994e:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish,"s,s,d,d,d,e");
 8019950:	687b      	ldr	r3, [r7, #4]
 8019952:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8019956:	4a38      	ldr	r2, [pc, #224]	; (8019a38 <problem_fetch+0x183d4>)
 8019958:	461c      	mov	r4, r3
 801995a:	4613      	mov	r3, r2
 801995c:	cb07      	ldmia	r3!, {r0, r1, r2}
 801995e:	6020      	str	r0, [r4, #0]
 8019960:	6061      	str	r1, [r4, #4]
 8019962:	60a2      	str	r2, [r4, #8]
			break;
 8019964:	f002 bdae 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 723 :
			strcpy(p->name,"WARM UP A5");
 8019968:	687b      	ldr	r3, [r7, #4]
 801996a:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801996e:	4933      	ldr	r1, [pc, #204]	; (8019a3c <problem_fetch+0x183d8>)
 8019970:	461a      	mov	r2, r3
 8019972:	460b      	mov	r3, r1
 8019974:	cb03      	ldmia	r3!, {r0, r1}
 8019976:	6010      	str	r0, [r2, #0]
 8019978:	6051      	str	r1, [r2, #4]
 801997a:	8819      	ldrh	r1, [r3, #0]
 801997c:	789b      	ldrb	r3, [r3, #2]
 801997e:	8111      	strh	r1, [r2, #8]
 8019980:	7293      	strb	r3, [r2, #10]
			strcpy(p->grade,"6B+");
 8019982:	687b      	ldr	r3, [r7, #4]
 8019984:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8019988:	4a20      	ldr	r2, [pc, #128]	; (8019a0c <problem_fetch+0x183a8>)
 801998a:	6810      	ldr	r0, [r2, #0]
 801998c:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 801998e:	687b      	ldr	r3, [r7, #4]
 8019990:	2207      	movs	r2, #7
 8019992:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"B,E,E,F,E,H,I");
 8019994:	687b      	ldr	r3, [r7, #4]
 8019996:	33a4      	adds	r3, #164	; 0xa4
 8019998:	4a29      	ldr	r2, [pc, #164]	; (8019a40 <problem_fetch+0x183dc>)
 801999a:	461c      	mov	r4, r3
 801999c:	4613      	mov	r3, r2
 801999e:	cb07      	ldmia	r3!, {r0, r1, r2}
 80199a0:	6020      	str	r0, [r4, #0]
 80199a2:	6061      	str	r1, [r4, #4]
 80199a4:	60a2      	str	r2, [r4, #8]
 80199a6:	881b      	ldrh	r3, [r3, #0]
 80199a8:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"6,6,8,11,14,16,18");
 80199aa:	687b      	ldr	r3, [r7, #4]
 80199ac:	3304      	adds	r3, #4
 80199ae:	4a25      	ldr	r2, [pc, #148]	; (8019a44 <problem_fetch+0x183e0>)
 80199b0:	461d      	mov	r5, r3
 80199b2:	4614      	mov	r4, r2
 80199b4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80199b6:	6028      	str	r0, [r5, #0]
 80199b8:	6069      	str	r1, [r5, #4]
 80199ba:	60aa      	str	r2, [r5, #8]
 80199bc:	60eb      	str	r3, [r5, #12]
 80199be:	8823      	ldrh	r3, [r4, #0]
 80199c0:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,s,d,d,d,d,e");
 80199c2:	687b      	ldr	r3, [r7, #4]
 80199c4:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 80199c8:	4a0e      	ldr	r2, [pc, #56]	; (8019a04 <problem_fetch+0x183a0>)
 80199ca:	461c      	mov	r4, r3
 80199cc:	4613      	mov	r3, r2
 80199ce:	cb07      	ldmia	r3!, {r0, r1, r2}
 80199d0:	6020      	str	r0, [r4, #0]
 80199d2:	6061      	str	r1, [r4, #4]
 80199d4:	60a2      	str	r2, [r4, #8]
 80199d6:	881b      	ldrh	r3, [r3, #0]
 80199d8:	81a3      	strh	r3, [r4, #12]
			break;
 80199da:	f002 bd73 	b.w	801c4c4 <problem_fetch+0x1ae60>
 80199de:	bf00      	nop
 80199e0:	0802c254 	.word	0x0802c254
 80199e4:	08023cc4 	.word	0x08023cc4
 80199e8:	0802c264 	.word	0x0802c264
 80199ec:	080250b4 	.word	0x080250b4
 80199f0:	08023cac 	.word	0x08023cac
 80199f4:	0802c274 	.word	0x0802c274
 80199f8:	08023bf0 	.word	0x08023bf0
 80199fc:	0802c280 	.word	0x0802c280
 8019a00:	0802c290 	.word	0x0802c290
 8019a04:	08023b9c 	.word	0x08023b9c
 8019a08:	0802c2a4 	.word	0x0802c2a4
 8019a0c:	08023b24 	.word	0x08023b24
 8019a10:	0802c2b4 	.word	0x0802c2b4
 8019a14:	08028300 	.word	0x08028300
 8019a18:	08024b08 	.word	0x08024b08
 8019a1c:	0802c2c8 	.word	0x0802c2c8
 8019a20:	0802c2dc 	.word	0x0802c2dc
 8019a24:	080261f8 	.word	0x080261f8
 8019a28:	08023ec0 	.word	0x08023ec0
 8019a2c:	0802c2e8 	.word	0x0802c2e8
 8019a30:	0802c2fc 	.word	0x0802c2fc
 8019a34:	0802c308 	.word	0x0802c308
 8019a38:	08023b04 	.word	0x08023b04
 8019a3c:	0802c318 	.word	0x0802c318
 8019a40:	0802c324 	.word	0x0802c324
 8019a44:	08024170 	.word	0x08024170
		case 724 :
			strcpy(p->name,"WARM UP A3");
 8019a48:	687b      	ldr	r3, [r7, #4]
 8019a4a:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8019a4e:	49a8      	ldr	r1, [pc, #672]	; (8019cf0 <problem_fetch+0x1868c>)
 8019a50:	461a      	mov	r2, r3
 8019a52:	460b      	mov	r3, r1
 8019a54:	cb03      	ldmia	r3!, {r0, r1}
 8019a56:	6010      	str	r0, [r2, #0]
 8019a58:	6051      	str	r1, [r2, #4]
 8019a5a:	8819      	ldrh	r1, [r3, #0]
 8019a5c:	789b      	ldrb	r3, [r3, #2]
 8019a5e:	8111      	strh	r1, [r2, #8]
 8019a60:	7293      	strb	r3, [r2, #10]
			strcpy(p->grade,"6B+");
 8019a62:	687b      	ldr	r3, [r7, #4]
 8019a64:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8019a68:	4aa2      	ldr	r2, [pc, #648]	; (8019cf4 <problem_fetch+0x18690>)
 8019a6a:	6810      	ldr	r0, [r2, #0]
 8019a6c:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 8019a6e:	687b      	ldr	r3, [r7, #4]
 8019a70:	2206      	movs	r2, #6
 8019a72:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,J,H,G,I,I");
 8019a74:	687b      	ldr	r3, [r7, #4]
 8019a76:	33a4      	adds	r3, #164	; 0xa4
 8019a78:	4a9f      	ldr	r2, [pc, #636]	; (8019cf8 <problem_fetch+0x18694>)
 8019a7a:	461c      	mov	r4, r3
 8019a7c:	4613      	mov	r3, r2
 8019a7e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8019a80:	6020      	str	r0, [r4, #0]
 8019a82:	6061      	str	r1, [r4, #4]
 8019a84:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"6,5,10,14,14,18");
 8019a86:	687b      	ldr	r3, [r7, #4]
 8019a88:	3304      	adds	r3, #4
 8019a8a:	4a9c      	ldr	r2, [pc, #624]	; (8019cfc <problem_fetch+0x18698>)
 8019a8c:	461c      	mov	r4, r3
 8019a8e:	4615      	mov	r5, r2
 8019a90:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8019a92:	6020      	str	r0, [r4, #0]
 8019a94:	6061      	str	r1, [r4, #4]
 8019a96:	60a2      	str	r2, [r4, #8]
 8019a98:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,s,d,d,d,e");
 8019a9a:	687b      	ldr	r3, [r7, #4]
 8019a9c:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8019aa0:	4a97      	ldr	r2, [pc, #604]	; (8019d00 <problem_fetch+0x1869c>)
 8019aa2:	461c      	mov	r4, r3
 8019aa4:	4613      	mov	r3, r2
 8019aa6:	cb07      	ldmia	r3!, {r0, r1, r2}
 8019aa8:	6020      	str	r0, [r4, #0]
 8019aaa:	6061      	str	r1, [r4, #4]
 8019aac:	60a2      	str	r2, [r4, #8]
			break;
 8019aae:	f002 bd09 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 725 :
			strcpy(p->name,"WARM UP A2");
 8019ab2:	687b      	ldr	r3, [r7, #4]
 8019ab4:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8019ab8:	4992      	ldr	r1, [pc, #584]	; (8019d04 <problem_fetch+0x186a0>)
 8019aba:	461a      	mov	r2, r3
 8019abc:	460b      	mov	r3, r1
 8019abe:	cb03      	ldmia	r3!, {r0, r1}
 8019ac0:	6010      	str	r0, [r2, #0]
 8019ac2:	6051      	str	r1, [r2, #4]
 8019ac4:	8819      	ldrh	r1, [r3, #0]
 8019ac6:	789b      	ldrb	r3, [r3, #2]
 8019ac8:	8111      	strh	r1, [r2, #8]
 8019aca:	7293      	strb	r3, [r2, #10]
			strcpy(p->grade,"6B+");
 8019acc:	687b      	ldr	r3, [r7, #4]
 8019ace:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8019ad2:	4a88      	ldr	r2, [pc, #544]	; (8019cf4 <problem_fetch+0x18690>)
 8019ad4:	6810      	ldr	r0, [r2, #0]
 8019ad6:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 8019ad8:	687b      	ldr	r3, [r7, #4]
 8019ada:	2207      	movs	r2, #7
 8019adc:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,G,G,E,D,I,A");
 8019ade:	687b      	ldr	r3, [r7, #4]
 8019ae0:	33a4      	adds	r3, #164	; 0xa4
 8019ae2:	4a89      	ldr	r2, [pc, #548]	; (8019d08 <problem_fetch+0x186a4>)
 8019ae4:	461c      	mov	r4, r3
 8019ae6:	4613      	mov	r3, r2
 8019ae8:	cb07      	ldmia	r3!, {r0, r1, r2}
 8019aea:	6020      	str	r0, [r4, #0]
 8019aec:	6061      	str	r1, [r4, #4]
 8019aee:	60a2      	str	r2, [r4, #8]
 8019af0:	881b      	ldrh	r3, [r3, #0]
 8019af2:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,6,9,12,15,7,18");
 8019af4:	687b      	ldr	r3, [r7, #4]
 8019af6:	3304      	adds	r3, #4
 8019af8:	4a84      	ldr	r2, [pc, #528]	; (8019d0c <problem_fetch+0x186a8>)
 8019afa:	461d      	mov	r5, r3
 8019afc:	4614      	mov	r4, r2
 8019afe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8019b00:	6028      	str	r0, [r5, #0]
 8019b02:	6069      	str	r1, [r5, #4]
 8019b04:	60aa      	str	r2, [r5, #8]
 8019b06:	60eb      	str	r3, [r5, #12]
 8019b08:	7823      	ldrb	r3, [r4, #0]
 8019b0a:	742b      	strb	r3, [r5, #16]
			strcpy(p->startFinish,"s,s,d,d,d,d,e");
 8019b0c:	687b      	ldr	r3, [r7, #4]
 8019b0e:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8019b12:	4a7f      	ldr	r2, [pc, #508]	; (8019d10 <problem_fetch+0x186ac>)
 8019b14:	461c      	mov	r4, r3
 8019b16:	4613      	mov	r3, r2
 8019b18:	cb07      	ldmia	r3!, {r0, r1, r2}
 8019b1a:	6020      	str	r0, [r4, #0]
 8019b1c:	6061      	str	r1, [r4, #4]
 8019b1e:	60a2      	str	r2, [r4, #8]
 8019b20:	881b      	ldrh	r3, [r3, #0]
 8019b22:	81a3      	strh	r3, [r4, #12]
			break;
 8019b24:	f002 bcce 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 726 :
			strcpy(p->name,"WARM UP A1");
 8019b28:	687b      	ldr	r3, [r7, #4]
 8019b2a:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8019b2e:	4979      	ldr	r1, [pc, #484]	; (8019d14 <problem_fetch+0x186b0>)
 8019b30:	461a      	mov	r2, r3
 8019b32:	460b      	mov	r3, r1
 8019b34:	cb03      	ldmia	r3!, {r0, r1}
 8019b36:	6010      	str	r0, [r2, #0]
 8019b38:	6051      	str	r1, [r2, #4]
 8019b3a:	8819      	ldrh	r1, [r3, #0]
 8019b3c:	789b      	ldrb	r3, [r3, #2]
 8019b3e:	8111      	strh	r1, [r2, #8]
 8019b40:	7293      	strb	r3, [r2, #10]
			strcpy(p->grade,"6B+");
 8019b42:	687b      	ldr	r3, [r7, #4]
 8019b44:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8019b48:	4a6a      	ldr	r2, [pc, #424]	; (8019cf4 <problem_fetch+0x18690>)
 8019b4a:	6810      	ldr	r0, [r2, #0]
 8019b4c:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 8019b4e:	687b      	ldr	r3, [r7, #4]
 8019b50:	2206      	movs	r2, #6
 8019b52:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,H,E,F,D,D");
 8019b54:	687b      	ldr	r3, [r7, #4]
 8019b56:	33a4      	adds	r3, #164	; 0xa4
 8019b58:	4a6f      	ldr	r2, [pc, #444]	; (8019d18 <problem_fetch+0x186b4>)
 8019b5a:	461c      	mov	r4, r3
 8019b5c:	4613      	mov	r3, r2
 8019b5e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8019b60:	6020      	str	r0, [r4, #0]
 8019b62:	6061      	str	r1, [r4, #4]
 8019b64:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,8,8,11,15,18");
 8019b66:	687b      	ldr	r3, [r7, #4]
 8019b68:	3304      	adds	r3, #4
 8019b6a:	4a6c      	ldr	r2, [pc, #432]	; (8019d1c <problem_fetch+0x186b8>)
 8019b6c:	461c      	mov	r4, r3
 8019b6e:	4613      	mov	r3, r2
 8019b70:	cb07      	ldmia	r3!, {r0, r1, r2}
 8019b72:	6020      	str	r0, [r4, #0]
 8019b74:	6061      	str	r1, [r4, #4]
 8019b76:	60a2      	str	r2, [r4, #8]
 8019b78:	881a      	ldrh	r2, [r3, #0]
 8019b7a:	789b      	ldrb	r3, [r3, #2]
 8019b7c:	81a2      	strh	r2, [r4, #12]
 8019b7e:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 8019b80:	687b      	ldr	r3, [r7, #4]
 8019b82:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8019b86:	4a66      	ldr	r2, [pc, #408]	; (8019d20 <problem_fetch+0x186bc>)
 8019b88:	461c      	mov	r4, r3
 8019b8a:	4613      	mov	r3, r2
 8019b8c:	cb07      	ldmia	r3!, {r0, r1, r2}
 8019b8e:	6020      	str	r0, [r4, #0]
 8019b90:	6061      	str	r1, [r4, #4]
 8019b92:	60a2      	str	r2, [r4, #8]
			break;
 8019b94:	f002 bc96 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 727 :
			strcpy(p->name,"MARYJANEFIGAROTTA");
 8019b98:	687b      	ldr	r3, [r7, #4]
 8019b9a:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8019b9e:	4a61      	ldr	r2, [pc, #388]	; (8019d24 <problem_fetch+0x186c0>)
 8019ba0:	461d      	mov	r5, r3
 8019ba2:	4614      	mov	r4, r2
 8019ba4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8019ba6:	6028      	str	r0, [r5, #0]
 8019ba8:	6069      	str	r1, [r5, #4]
 8019baa:	60aa      	str	r2, [r5, #8]
 8019bac:	60eb      	str	r3, [r5, #12]
 8019bae:	8823      	ldrh	r3, [r4, #0]
 8019bb0:	822b      	strh	r3, [r5, #16]
			strcpy(p->grade,"7A+");
 8019bb2:	687b      	ldr	r3, [r7, #4]
 8019bb4:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8019bb8:	4a5b      	ldr	r2, [pc, #364]	; (8019d28 <problem_fetch+0x186c4>)
 8019bba:	6810      	ldr	r0, [r2, #0]
 8019bbc:	6018      	str	r0, [r3, #0]
			p->moveSize = 5;
 8019bbe:	687b      	ldr	r3, [r7, #4]
 8019bc0:	2205      	movs	r2, #5
 8019bc2:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"E,H,H,I,I");
 8019bc4:	687b      	ldr	r3, [r7, #4]
 8019bc6:	33a4      	adds	r3, #164	; 0xa4
 8019bc8:	4958      	ldr	r1, [pc, #352]	; (8019d2c <problem_fetch+0x186c8>)
 8019bca:	461a      	mov	r2, r3
 8019bcc:	460b      	mov	r3, r1
 8019bce:	cb03      	ldmia	r3!, {r0, r1}
 8019bd0:	6010      	str	r0, [r2, #0]
 8019bd2:	6051      	str	r1, [r2, #4]
 8019bd4:	881b      	ldrh	r3, [r3, #0]
 8019bd6:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"6,5,10,15,18");
 8019bd8:	687b      	ldr	r3, [r7, #4]
 8019bda:	3304      	adds	r3, #4
 8019bdc:	4a54      	ldr	r2, [pc, #336]	; (8019d30 <problem_fetch+0x186cc>)
 8019bde:	461c      	mov	r4, r3
 8019be0:	4613      	mov	r3, r2
 8019be2:	cb07      	ldmia	r3!, {r0, r1, r2}
 8019be4:	6020      	str	r0, [r4, #0]
 8019be6:	6061      	str	r1, [r4, #4]
 8019be8:	60a2      	str	r2, [r4, #8]
 8019bea:	781b      	ldrb	r3, [r3, #0]
 8019bec:	7323      	strb	r3, [r4, #12]
			strcpy(p->startFinish,"s,s,d,d,e");
 8019bee:	687b      	ldr	r3, [r7, #4]
 8019bf0:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8019bf4:	494f      	ldr	r1, [pc, #316]	; (8019d34 <problem_fetch+0x186d0>)
 8019bf6:	461a      	mov	r2, r3
 8019bf8:	460b      	mov	r3, r1
 8019bfa:	cb03      	ldmia	r3!, {r0, r1}
 8019bfc:	6010      	str	r0, [r2, #0]
 8019bfe:	6051      	str	r1, [r2, #4]
 8019c00:	881b      	ldrh	r3, [r3, #0]
 8019c02:	8113      	strh	r3, [r2, #8]
			break;
 8019c04:	f002 bc5e 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 728 :
			strcpy(p->name,"BROWN FROWN");
 8019c08:	687b      	ldr	r3, [r7, #4]
 8019c0a:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8019c0e:	4a4a      	ldr	r2, [pc, #296]	; (8019d38 <problem_fetch+0x186d4>)
 8019c10:	461c      	mov	r4, r3
 8019c12:	4613      	mov	r3, r2
 8019c14:	cb07      	ldmia	r3!, {r0, r1, r2}
 8019c16:	6020      	str	r0, [r4, #0]
 8019c18:	6061      	str	r1, [r4, #4]
 8019c1a:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade,"6B+");
 8019c1c:	687b      	ldr	r3, [r7, #4]
 8019c1e:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8019c22:	4a34      	ldr	r2, [pc, #208]	; (8019cf4 <problem_fetch+0x18690>)
 8019c24:	6810      	ldr	r0, [r2, #0]
 8019c26:	6018      	str	r0, [r3, #0]
			p->moveSize = 8;
 8019c28:	687b      	ldr	r3, [r7, #4]
 8019c2a:	2208      	movs	r2, #8
 8019c2c:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,E,C,H,F,C,E,D");
 8019c2e:	687b      	ldr	r3, [r7, #4]
 8019c30:	33a4      	adds	r3, #164	; 0xa4
 8019c32:	4a42      	ldr	r2, [pc, #264]	; (8019d3c <problem_fetch+0x186d8>)
 8019c34:	461c      	mov	r4, r3
 8019c36:	4615      	mov	r5, r2
 8019c38:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8019c3a:	6020      	str	r0, [r4, #0]
 8019c3c:	6061      	str	r1, [r4, #4]
 8019c3e:	60a2      	str	r2, [r4, #8]
 8019c40:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,6,8,8,11,13,16,18");
 8019c42:	687b      	ldr	r3, [r7, #4]
 8019c44:	3304      	adds	r3, #4
 8019c46:	4a3e      	ldr	r2, [pc, #248]	; (8019d40 <problem_fetch+0x186dc>)
 8019c48:	461d      	mov	r5, r3
 8019c4a:	4614      	mov	r4, r2
 8019c4c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8019c4e:	6028      	str	r0, [r5, #0]
 8019c50:	6069      	str	r1, [r5, #4]
 8019c52:	60aa      	str	r2, [r5, #8]
 8019c54:	60eb      	str	r3, [r5, #12]
 8019c56:	6820      	ldr	r0, [r4, #0]
 8019c58:	6128      	str	r0, [r5, #16]
			strcpy(p->startFinish,"s,d,d,d,d,d,d,e");
 8019c5a:	687b      	ldr	r3, [r7, #4]
 8019c5c:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8019c60:	4a38      	ldr	r2, [pc, #224]	; (8019d44 <problem_fetch+0x186e0>)
 8019c62:	461c      	mov	r4, r3
 8019c64:	4615      	mov	r5, r2
 8019c66:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8019c68:	6020      	str	r0, [r4, #0]
 8019c6a:	6061      	str	r1, [r4, #4]
 8019c6c:	60a2      	str	r2, [r4, #8]
 8019c6e:	60e3      	str	r3, [r4, #12]
			break;
 8019c70:	f002 bc28 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 729 :
			strcpy(p->name,"LU'S FINEST");
 8019c74:	687b      	ldr	r3, [r7, #4]
 8019c76:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8019c7a:	4a33      	ldr	r2, [pc, #204]	; (8019d48 <problem_fetch+0x186e4>)
 8019c7c:	461c      	mov	r4, r3
 8019c7e:	4613      	mov	r3, r2
 8019c80:	cb07      	ldmia	r3!, {r0, r1, r2}
 8019c82:	6020      	str	r0, [r4, #0]
 8019c84:	6061      	str	r1, [r4, #4]
 8019c86:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade,"7A");
 8019c88:	687b      	ldr	r3, [r7, #4]
 8019c8a:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8019c8e:	4a2f      	ldr	r2, [pc, #188]	; (8019d4c <problem_fetch+0x186e8>)
 8019c90:	8811      	ldrh	r1, [r2, #0]
 8019c92:	7892      	ldrb	r2, [r2, #2]
 8019c94:	8019      	strh	r1, [r3, #0]
 8019c96:	709a      	strb	r2, [r3, #2]
			p->moveSize = 9;
 8019c98:	687b      	ldr	r3, [r7, #4]
 8019c9a:	2209      	movs	r2, #9
 8019c9c:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"B,D,B,G,E,F,J,H,I");
 8019c9e:	687b      	ldr	r3, [r7, #4]
 8019ca0:	33a4      	adds	r3, #164	; 0xa4
 8019ca2:	4a2b      	ldr	r2, [pc, #172]	; (8019d50 <problem_fetch+0x186ec>)
 8019ca4:	461d      	mov	r5, r3
 8019ca6:	4614      	mov	r4, r2
 8019ca8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8019caa:	6028      	str	r0, [r5, #0]
 8019cac:	6069      	str	r1, [r5, #4]
 8019cae:	60aa      	str	r2, [r5, #8]
 8019cb0:	60eb      	str	r3, [r5, #12]
 8019cb2:	8823      	ldrh	r3, [r4, #0]
 8019cb4:	822b      	strh	r3, [r5, #16]
			strcpy(p->moveNumbers,"6,7,10,4,12,13,13,16,18");
 8019cb6:	687b      	ldr	r3, [r7, #4]
 8019cb8:	3304      	adds	r3, #4
 8019cba:	4a26      	ldr	r2, [pc, #152]	; (8019d54 <problem_fetch+0x186f0>)
 8019cbc:	461d      	mov	r5, r3
 8019cbe:	4614      	mov	r4, r2
 8019cc0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8019cc2:	6028      	str	r0, [r5, #0]
 8019cc4:	6069      	str	r1, [r5, #4]
 8019cc6:	60aa      	str	r2, [r5, #8]
 8019cc8:	60eb      	str	r3, [r5, #12]
 8019cca:	cc03      	ldmia	r4!, {r0, r1}
 8019ccc:	6128      	str	r0, [r5, #16]
 8019cce:	6169      	str	r1, [r5, #20]
			strcpy(p->startFinish,"s,d,d,d,d,d,d,d,e");
 8019cd0:	687b      	ldr	r3, [r7, #4]
 8019cd2:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8019cd6:	4a20      	ldr	r2, [pc, #128]	; (8019d58 <problem_fetch+0x186f4>)
 8019cd8:	461d      	mov	r5, r3
 8019cda:	4614      	mov	r4, r2
 8019cdc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8019cde:	6028      	str	r0, [r5, #0]
 8019ce0:	6069      	str	r1, [r5, #4]
 8019ce2:	60aa      	str	r2, [r5, #8]
 8019ce4:	60eb      	str	r3, [r5, #12]
 8019ce6:	8823      	ldrh	r3, [r4, #0]
 8019ce8:	822b      	strh	r3, [r5, #16]
			break;
 8019cea:	f002 bbeb 	b.w	801c4c4 <problem_fetch+0x1ae60>
 8019cee:	bf00      	nop
 8019cf0:	0802c334 	.word	0x0802c334
 8019cf4:	08023b24 	.word	0x08023b24
 8019cf8:	0802c340 	.word	0x0802c340
 8019cfc:	0802c0c4 	.word	0x0802c0c4
 8019d00:	08023b04 	.word	0x08023b04
 8019d04:	0802c34c 	.word	0x0802c34c
 8019d08:	0802c358 	.word	0x0802c358
 8019d0c:	0802c368 	.word	0x0802c368
 8019d10:	08023b9c 	.word	0x08023b9c
 8019d14:	0802c37c 	.word	0x0802c37c
 8019d18:	0802c388 	.word	0x0802c388
 8019d1c:	0802c394 	.word	0x0802c394
 8019d20:	08023ec0 	.word	0x08023ec0
 8019d24:	0802c3a4 	.word	0x0802c3a4
 8019d28:	08023cc4 	.word	0x08023cc4
 8019d2c:	0802c3b8 	.word	0x0802c3b8
 8019d30:	0802c3c4 	.word	0x0802c3c4
 8019d34:	08024204 	.word	0x08024204
 8019d38:	0802c3d4 	.word	0x0802c3d4
 8019d3c:	0802c3e0 	.word	0x0802c3e0
 8019d40:	0802c3f0 	.word	0x0802c3f0
 8019d44:	08023d34 	.word	0x08023d34
 8019d48:	0802c404 	.word	0x0802c404
 8019d4c:	08023ae4 	.word	0x08023ae4
 8019d50:	0802c410 	.word	0x0802c410
 8019d54:	0802c424 	.word	0x0802c424
 8019d58:	080259dc 	.word	0x080259dc
		case 730 :
			strcpy(p->name,"MADDEKÈ");
 8019d5c:	687b      	ldr	r3, [r7, #4]
 8019d5e:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8019d62:	49c0      	ldr	r1, [pc, #768]	; (801a064 <problem_fetch+0x18a00>)
 8019d64:	461a      	mov	r2, r3
 8019d66:	460b      	mov	r3, r1
 8019d68:	cb03      	ldmia	r3!, {r0, r1}
 8019d6a:	6010      	str	r0, [r2, #0]
 8019d6c:	6051      	str	r1, [r2, #4]
 8019d6e:	781b      	ldrb	r3, [r3, #0]
 8019d70:	7213      	strb	r3, [r2, #8]
			strcpy(p->grade,"7B+");
 8019d72:	687b      	ldr	r3, [r7, #4]
 8019d74:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8019d78:	4abb      	ldr	r2, [pc, #748]	; (801a068 <problem_fetch+0x18a04>)
 8019d7a:	6810      	ldr	r0, [r2, #0]
 8019d7c:	6018      	str	r0, [r3, #0]
			p->moveSize = 5;
 8019d7e:	687b      	ldr	r3, [r7, #4]
 8019d80:	2205      	movs	r2, #5
 8019d82:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,I,G,G,D");
 8019d84:	687b      	ldr	r3, [r7, #4]
 8019d86:	33a4      	adds	r3, #164	; 0xa4
 8019d88:	49b8      	ldr	r1, [pc, #736]	; (801a06c <problem_fetch+0x18a08>)
 8019d8a:	461a      	mov	r2, r3
 8019d8c:	460b      	mov	r3, r1
 8019d8e:	cb03      	ldmia	r3!, {r0, r1}
 8019d90:	6010      	str	r0, [r2, #0]
 8019d92:	6051      	str	r1, [r2, #4]
 8019d94:	881b      	ldrh	r3, [r3, #0]
 8019d96:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"5,7,10,14,18");
 8019d98:	687b      	ldr	r3, [r7, #4]
 8019d9a:	3304      	adds	r3, #4
 8019d9c:	4ab4      	ldr	r2, [pc, #720]	; (801a070 <problem_fetch+0x18a0c>)
 8019d9e:	461c      	mov	r4, r3
 8019da0:	4613      	mov	r3, r2
 8019da2:	cb07      	ldmia	r3!, {r0, r1, r2}
 8019da4:	6020      	str	r0, [r4, #0]
 8019da6:	6061      	str	r1, [r4, #4]
 8019da8:	60a2      	str	r2, [r4, #8]
 8019daa:	781b      	ldrb	r3, [r3, #0]
 8019dac:	7323      	strb	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,e");
 8019dae:	687b      	ldr	r3, [r7, #4]
 8019db0:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8019db4:	49af      	ldr	r1, [pc, #700]	; (801a074 <problem_fetch+0x18a10>)
 8019db6:	461a      	mov	r2, r3
 8019db8:	460b      	mov	r3, r1
 8019dba:	cb03      	ldmia	r3!, {r0, r1}
 8019dbc:	6010      	str	r0, [r2, #0]
 8019dbe:	6051      	str	r1, [r2, #4]
 8019dc0:	881b      	ldrh	r3, [r3, #0]
 8019dc2:	8113      	strh	r3, [r2, #8]
			break;
 8019dc4:	f002 bb7e 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 731 :
			strcpy(p->name,"MEZZIF");
 8019dc8:	687b      	ldr	r3, [r7, #4]
 8019dca:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8019dce:	4aaa      	ldr	r2, [pc, #680]	; (801a078 <problem_fetch+0x18a14>)
 8019dd0:	6810      	ldr	r0, [r2, #0]
 8019dd2:	6018      	str	r0, [r3, #0]
 8019dd4:	8891      	ldrh	r1, [r2, #4]
 8019dd6:	7992      	ldrb	r2, [r2, #6]
 8019dd8:	8099      	strh	r1, [r3, #4]
 8019dda:	719a      	strb	r2, [r3, #6]
			strcpy(p->grade,"7C+");
 8019ddc:	687b      	ldr	r3, [r7, #4]
 8019dde:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8019de2:	4aa6      	ldr	r2, [pc, #664]	; (801a07c <problem_fetch+0x18a18>)
 8019de4:	6810      	ldr	r0, [r2, #0]
 8019de6:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 8019de8:	687b      	ldr	r3, [r7, #4]
 8019dea:	2206      	movs	r2, #6
 8019dec:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"B,C,E,F,J,I");
 8019dee:	687b      	ldr	r3, [r7, #4]
 8019df0:	33a4      	adds	r3, #164	; 0xa4
 8019df2:	4aa3      	ldr	r2, [pc, #652]	; (801a080 <problem_fetch+0x18a1c>)
 8019df4:	461c      	mov	r4, r3
 8019df6:	4613      	mov	r3, r2
 8019df8:	cb07      	ldmia	r3!, {r0, r1, r2}
 8019dfa:	6020      	str	r0, [r4, #0]
 8019dfc:	6061      	str	r1, [r4, #4]
 8019dfe:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"6,5,9,13,12,18");
 8019e00:	687b      	ldr	r3, [r7, #4]
 8019e02:	3304      	adds	r3, #4
 8019e04:	4a9f      	ldr	r2, [pc, #636]	; (801a084 <problem_fetch+0x18a20>)
 8019e06:	461c      	mov	r4, r3
 8019e08:	4613      	mov	r3, r2
 8019e0a:	cb07      	ldmia	r3!, {r0, r1, r2}
 8019e0c:	6020      	str	r0, [r4, #0]
 8019e0e:	6061      	str	r1, [r4, #4]
 8019e10:	60a2      	str	r2, [r4, #8]
 8019e12:	881a      	ldrh	r2, [r3, #0]
 8019e14:	789b      	ldrb	r3, [r3, #2]
 8019e16:	81a2      	strh	r2, [r4, #12]
 8019e18:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish,"s,s,d,d,d,e");
 8019e1a:	687b      	ldr	r3, [r7, #4]
 8019e1c:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8019e20:	4a99      	ldr	r2, [pc, #612]	; (801a088 <problem_fetch+0x18a24>)
 8019e22:	461c      	mov	r4, r3
 8019e24:	4613      	mov	r3, r2
 8019e26:	cb07      	ldmia	r3!, {r0, r1, r2}
 8019e28:	6020      	str	r0, [r4, #0]
 8019e2a:	6061      	str	r1, [r4, #4]
 8019e2c:	60a2      	str	r2, [r4, #8]
			break;
 8019e2e:	f002 bb49 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 732 :
			strcpy(p->name,"BIG HOLDZ");
 8019e32:	687b      	ldr	r3, [r7, #4]
 8019e34:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8019e38:	4994      	ldr	r1, [pc, #592]	; (801a08c <problem_fetch+0x18a28>)
 8019e3a:	461a      	mov	r2, r3
 8019e3c:	460b      	mov	r3, r1
 8019e3e:	cb03      	ldmia	r3!, {r0, r1}
 8019e40:	6010      	str	r0, [r2, #0]
 8019e42:	6051      	str	r1, [r2, #4]
 8019e44:	881b      	ldrh	r3, [r3, #0]
 8019e46:	8113      	strh	r3, [r2, #8]
			strcpy(p->grade,"6B+");
 8019e48:	687b      	ldr	r3, [r7, #4]
 8019e4a:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8019e4e:	4a90      	ldr	r2, [pc, #576]	; (801a090 <problem_fetch+0x18a2c>)
 8019e50:	6810      	ldr	r0, [r2, #0]
 8019e52:	6018      	str	r0, [r3, #0]
			p->moveSize = 5;
 8019e54:	687b      	ldr	r3, [r7, #4]
 8019e56:	2205      	movs	r2, #5
 8019e58:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,H,C,E,A");
 8019e5a:	687b      	ldr	r3, [r7, #4]
 8019e5c:	33a4      	adds	r3, #164	; 0xa4
 8019e5e:	498d      	ldr	r1, [pc, #564]	; (801a094 <problem_fetch+0x18a30>)
 8019e60:	461a      	mov	r2, r3
 8019e62:	460b      	mov	r3, r1
 8019e64:	cb03      	ldmia	r3!, {r0, r1}
 8019e66:	6010      	str	r0, [r2, #0]
 8019e68:	6051      	str	r1, [r2, #4]
 8019e6a:	881b      	ldrh	r3, [r3, #0]
 8019e6c:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"4,10,13,16,18");
 8019e6e:	687b      	ldr	r3, [r7, #4]
 8019e70:	3304      	adds	r3, #4
 8019e72:	4a89      	ldr	r2, [pc, #548]	; (801a098 <problem_fetch+0x18a34>)
 8019e74:	461c      	mov	r4, r3
 8019e76:	4613      	mov	r3, r2
 8019e78:	cb07      	ldmia	r3!, {r0, r1, r2}
 8019e7a:	6020      	str	r0, [r4, #0]
 8019e7c:	6061      	str	r1, [r4, #4]
 8019e7e:	60a2      	str	r2, [r4, #8]
 8019e80:	881b      	ldrh	r3, [r3, #0]
 8019e82:	81a3      	strh	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,e");
 8019e84:	687b      	ldr	r3, [r7, #4]
 8019e86:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8019e8a:	497a      	ldr	r1, [pc, #488]	; (801a074 <problem_fetch+0x18a10>)
 8019e8c:	461a      	mov	r2, r3
 8019e8e:	460b      	mov	r3, r1
 8019e90:	cb03      	ldmia	r3!, {r0, r1}
 8019e92:	6010      	str	r0, [r2, #0]
 8019e94:	6051      	str	r1, [r2, #4]
 8019e96:	881b      	ldrh	r3, [r3, #0]
 8019e98:	8113      	strh	r3, [r2, #8]
			break;
 8019e9a:	f002 bb13 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 733 :
			strcpy(p->name,"TIA");
 8019e9e:	687b      	ldr	r3, [r7, #4]
 8019ea0:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8019ea4:	4a7d      	ldr	r2, [pc, #500]	; (801a09c <problem_fetch+0x18a38>)
 8019ea6:	6810      	ldr	r0, [r2, #0]
 8019ea8:	6018      	str	r0, [r3, #0]
			strcpy(p->grade,"6B+");
 8019eaa:	687b      	ldr	r3, [r7, #4]
 8019eac:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8019eb0:	4a77      	ldr	r2, [pc, #476]	; (801a090 <problem_fetch+0x18a2c>)
 8019eb2:	6810      	ldr	r0, [r2, #0]
 8019eb4:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 8019eb6:	687b      	ldr	r3, [r7, #4]
 8019eb8:	2207      	movs	r2, #7
 8019eba:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,E,F,E,I,H,I");
 8019ebc:	687b      	ldr	r3, [r7, #4]
 8019ebe:	33a4      	adds	r3, #164	; 0xa4
 8019ec0:	4a77      	ldr	r2, [pc, #476]	; (801a0a0 <problem_fetch+0x18a3c>)
 8019ec2:	461c      	mov	r4, r3
 8019ec4:	4613      	mov	r3, r2
 8019ec6:	cb07      	ldmia	r3!, {r0, r1, r2}
 8019ec8:	6020      	str	r0, [r4, #0]
 8019eca:	6061      	str	r1, [r4, #4]
 8019ecc:	60a2      	str	r2, [r4, #8]
 8019ece:	881b      	ldrh	r3, [r3, #0]
 8019ed0:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,8,11,12,14,16,18");
 8019ed2:	687b      	ldr	r3, [r7, #4]
 8019ed4:	3304      	adds	r3, #4
 8019ed6:	4a73      	ldr	r2, [pc, #460]	; (801a0a4 <problem_fetch+0x18a40>)
 8019ed8:	461d      	mov	r5, r3
 8019eda:	4614      	mov	r4, r2
 8019edc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8019ede:	6028      	str	r0, [r5, #0]
 8019ee0:	6069      	str	r1, [r5, #4]
 8019ee2:	60aa      	str	r2, [r5, #8]
 8019ee4:	60eb      	str	r3, [r5, #12]
 8019ee6:	8823      	ldrh	r3, [r4, #0]
 8019ee8:	78a2      	ldrb	r2, [r4, #2]
 8019eea:	822b      	strh	r3, [r5, #16]
 8019eec:	4613      	mov	r3, r2
 8019eee:	74ab      	strb	r3, [r5, #18]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 8019ef0:	687b      	ldr	r3, [r7, #4]
 8019ef2:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8019ef6:	4a6c      	ldr	r2, [pc, #432]	; (801a0a8 <problem_fetch+0x18a44>)
 8019ef8:	461c      	mov	r4, r3
 8019efa:	4613      	mov	r3, r2
 8019efc:	cb07      	ldmia	r3!, {r0, r1, r2}
 8019efe:	6020      	str	r0, [r4, #0]
 8019f00:	6061      	str	r1, [r4, #4]
 8019f02:	60a2      	str	r2, [r4, #8]
 8019f04:	881b      	ldrh	r3, [r3, #0]
 8019f06:	81a3      	strh	r3, [r4, #12]
			break;
 8019f08:	f002 badc 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 734 :
			strcpy(p->name,"LEOCREMAFLANDERS");
 8019f0c:	687b      	ldr	r3, [r7, #4]
 8019f0e:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8019f12:	4a66      	ldr	r2, [pc, #408]	; (801a0ac <problem_fetch+0x18a48>)
 8019f14:	461d      	mov	r5, r3
 8019f16:	4614      	mov	r4, r2
 8019f18:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8019f1a:	6028      	str	r0, [r5, #0]
 8019f1c:	6069      	str	r1, [r5, #4]
 8019f1e:	60aa      	str	r2, [r5, #8]
 8019f20:	60eb      	str	r3, [r5, #12]
 8019f22:	7823      	ldrb	r3, [r4, #0]
 8019f24:	742b      	strb	r3, [r5, #16]
			strcpy(p->grade,"7C");
 8019f26:	687b      	ldr	r3, [r7, #4]
 8019f28:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8019f2c:	4a60      	ldr	r2, [pc, #384]	; (801a0b0 <problem_fetch+0x18a4c>)
 8019f2e:	8811      	ldrh	r1, [r2, #0]
 8019f30:	7892      	ldrb	r2, [r2, #2]
 8019f32:	8019      	strh	r1, [r3, #0]
 8019f34:	709a      	strb	r2, [r3, #2]
			p->moveSize = 7;
 8019f36:	687b      	ldr	r3, [r7, #4]
 8019f38:	2207      	movs	r2, #7
 8019f3a:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"B,B,C,E,F,H,I");
 8019f3c:	687b      	ldr	r3, [r7, #4]
 8019f3e:	33a4      	adds	r3, #164	; 0xa4
 8019f40:	4a5c      	ldr	r2, [pc, #368]	; (801a0b4 <problem_fetch+0x18a50>)
 8019f42:	461c      	mov	r4, r3
 8019f44:	4613      	mov	r3, r2
 8019f46:	cb07      	ldmia	r3!, {r0, r1, r2}
 8019f48:	6020      	str	r0, [r4, #0]
 8019f4a:	6061      	str	r1, [r4, #4]
 8019f4c:	60a2      	str	r2, [r4, #8]
 8019f4e:	881b      	ldrh	r3, [r3, #0]
 8019f50:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"12,6,5,9,13,12,18");
 8019f52:	687b      	ldr	r3, [r7, #4]
 8019f54:	3304      	adds	r3, #4
 8019f56:	4a58      	ldr	r2, [pc, #352]	; (801a0b8 <problem_fetch+0x18a54>)
 8019f58:	461d      	mov	r5, r3
 8019f5a:	4614      	mov	r4, r2
 8019f5c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8019f5e:	6028      	str	r0, [r5, #0]
 8019f60:	6069      	str	r1, [r5, #4]
 8019f62:	60aa      	str	r2, [r5, #8]
 8019f64:	60eb      	str	r3, [r5, #12]
 8019f66:	8823      	ldrh	r3, [r4, #0]
 8019f68:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"d,s,s,d,d,d,e");
 8019f6a:	687b      	ldr	r3, [r7, #4]
 8019f6c:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8019f70:	4a52      	ldr	r2, [pc, #328]	; (801a0bc <problem_fetch+0x18a58>)
 8019f72:	461c      	mov	r4, r3
 8019f74:	4613      	mov	r3, r2
 8019f76:	cb07      	ldmia	r3!, {r0, r1, r2}
 8019f78:	6020      	str	r0, [r4, #0]
 8019f7a:	6061      	str	r1, [r4, #4]
 8019f7c:	60a2      	str	r2, [r4, #8]
 8019f7e:	881b      	ldrh	r3, [r3, #0]
 8019f80:	81a3      	strh	r3, [r4, #12]
			break;
 8019f82:	f002 ba9f 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 735 :
			strcpy(p->name,"MAFFEI");
 8019f86:	687b      	ldr	r3, [r7, #4]
 8019f88:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8019f8c:	4a4c      	ldr	r2, [pc, #304]	; (801a0c0 <problem_fetch+0x18a5c>)
 8019f8e:	6810      	ldr	r0, [r2, #0]
 8019f90:	6018      	str	r0, [r3, #0]
 8019f92:	8891      	ldrh	r1, [r2, #4]
 8019f94:	7992      	ldrb	r2, [r2, #6]
 8019f96:	8099      	strh	r1, [r3, #4]
 8019f98:	719a      	strb	r2, [r3, #6]
			strcpy(p->grade,"6C");
 8019f9a:	687b      	ldr	r3, [r7, #4]
 8019f9c:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8019fa0:	4a48      	ldr	r2, [pc, #288]	; (801a0c4 <problem_fetch+0x18a60>)
 8019fa2:	8811      	ldrh	r1, [r2, #0]
 8019fa4:	7892      	ldrb	r2, [r2, #2]
 8019fa6:	8019      	strh	r1, [r3, #0]
 8019fa8:	709a      	strb	r2, [r3, #2]
			p->moveSize = 5;
 8019faa:	687b      	ldr	r3, [r7, #4]
 8019fac:	2205      	movs	r2, #5
 8019fae:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,E,A,E,D");
 8019fb0:	687b      	ldr	r3, [r7, #4]
 8019fb2:	33a4      	adds	r3, #164	; 0xa4
 8019fb4:	4944      	ldr	r1, [pc, #272]	; (801a0c8 <problem_fetch+0x18a64>)
 8019fb6:	461a      	mov	r2, r3
 8019fb8:	460b      	mov	r3, r1
 8019fba:	cb03      	ldmia	r3!, {r0, r1}
 8019fbc:	6010      	str	r0, [r2, #0]
 8019fbe:	6051      	str	r1, [r2, #4]
 8019fc0:	881b      	ldrh	r3, [r3, #0]
 8019fc2:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"5,12,14,8,18");
 8019fc4:	687b      	ldr	r3, [r7, #4]
 8019fc6:	3304      	adds	r3, #4
 8019fc8:	4a40      	ldr	r2, [pc, #256]	; (801a0cc <problem_fetch+0x18a68>)
 8019fca:	461c      	mov	r4, r3
 8019fcc:	4613      	mov	r3, r2
 8019fce:	cb07      	ldmia	r3!, {r0, r1, r2}
 8019fd0:	6020      	str	r0, [r4, #0]
 8019fd2:	6061      	str	r1, [r4, #4]
 8019fd4:	60a2      	str	r2, [r4, #8]
 8019fd6:	781b      	ldrb	r3, [r3, #0]
 8019fd8:	7323      	strb	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,e");
 8019fda:	687b      	ldr	r3, [r7, #4]
 8019fdc:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8019fe0:	4924      	ldr	r1, [pc, #144]	; (801a074 <problem_fetch+0x18a10>)
 8019fe2:	461a      	mov	r2, r3
 8019fe4:	460b      	mov	r3, r1
 8019fe6:	cb03      	ldmia	r3!, {r0, r1}
 8019fe8:	6010      	str	r0, [r2, #0]
 8019fea:	6051      	str	r1, [r2, #4]
 8019fec:	881b      	ldrh	r3, [r3, #0]
 8019fee:	8113      	strh	r3, [r2, #8]
			break;
 8019ff0:	f002 ba68 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 736 :
			strcpy(p->name,"BUIONE");
 8019ff4:	687b      	ldr	r3, [r7, #4]
 8019ff6:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8019ffa:	4a35      	ldr	r2, [pc, #212]	; (801a0d0 <problem_fetch+0x18a6c>)
 8019ffc:	6810      	ldr	r0, [r2, #0]
 8019ffe:	6018      	str	r0, [r3, #0]
 801a000:	8891      	ldrh	r1, [r2, #4]
 801a002:	7992      	ldrb	r2, [r2, #6]
 801a004:	8099      	strh	r1, [r3, #4]
 801a006:	719a      	strb	r2, [r3, #6]
			strcpy(p->grade,"7A");
 801a008:	687b      	ldr	r3, [r7, #4]
 801a00a:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801a00e:	4a31      	ldr	r2, [pc, #196]	; (801a0d4 <problem_fetch+0x18a70>)
 801a010:	8811      	ldrh	r1, [r2, #0]
 801a012:	7892      	ldrb	r2, [r2, #2]
 801a014:	8019      	strh	r1, [r3, #0]
 801a016:	709a      	strb	r2, [r3, #2]
			p->moveSize = 6;
 801a018:	687b      	ldr	r3, [r7, #4]
 801a01a:	2206      	movs	r2, #6
 801a01c:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,H,E,E,B,A");
 801a01e:	687b      	ldr	r3, [r7, #4]
 801a020:	33a4      	adds	r3, #164	; 0xa4
 801a022:	4a2d      	ldr	r2, [pc, #180]	; (801a0d8 <problem_fetch+0x18a74>)
 801a024:	461c      	mov	r4, r3
 801a026:	4613      	mov	r3, r2
 801a028:	cb07      	ldmia	r3!, {r0, r1, r2}
 801a02a:	6020      	str	r0, [r4, #0]
 801a02c:	6061      	str	r1, [r4, #4]
 801a02e:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,8,9,12,15,18");
 801a030:	687b      	ldr	r3, [r7, #4]
 801a032:	3304      	adds	r3, #4
 801a034:	4a29      	ldr	r2, [pc, #164]	; (801a0dc <problem_fetch+0x18a78>)
 801a036:	461c      	mov	r4, r3
 801a038:	4613      	mov	r3, r2
 801a03a:	cb07      	ldmia	r3!, {r0, r1, r2}
 801a03c:	6020      	str	r0, [r4, #0]
 801a03e:	6061      	str	r1, [r4, #4]
 801a040:	60a2      	str	r2, [r4, #8]
 801a042:	881a      	ldrh	r2, [r3, #0]
 801a044:	789b      	ldrb	r3, [r3, #2]
 801a046:	81a2      	strh	r2, [r4, #12]
 801a048:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 801a04a:	687b      	ldr	r3, [r7, #4]
 801a04c:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 801a050:	4a23      	ldr	r2, [pc, #140]	; (801a0e0 <problem_fetch+0x18a7c>)
 801a052:	461c      	mov	r4, r3
 801a054:	4613      	mov	r3, r2
 801a056:	cb07      	ldmia	r3!, {r0, r1, r2}
 801a058:	6020      	str	r0, [r4, #0]
 801a05a:	6061      	str	r1, [r4, #4]
 801a05c:	60a2      	str	r2, [r4, #8]
			break;
 801a05e:	f002 ba31 	b.w	801c4c4 <problem_fetch+0x1ae60>
 801a062:	bf00      	nop
 801a064:	0802c43c 	.word	0x0802c43c
 801a068:	08023c60 	.word	0x08023c60
 801a06c:	0802c448 	.word	0x0802c448
 801a070:	0802c454 	.word	0x0802c454
 801a074:	08023ff0 	.word	0x08023ff0
 801a078:	0802c464 	.word	0x0802c464
 801a07c:	08024130 	.word	0x08024130
 801a080:	0802c46c 	.word	0x0802c46c
 801a084:	0802c478 	.word	0x0802c478
 801a088:	08023b04 	.word	0x08023b04
 801a08c:	0802c488 	.word	0x0802c488
 801a090:	08023b24 	.word	0x08023b24
 801a094:	0802c494 	.word	0x0802c494
 801a098:	0802c4a0 	.word	0x0802c4a0
 801a09c:	0802c4b0 	.word	0x0802c4b0
 801a0a0:	0802c4b4 	.word	0x0802c4b4
 801a0a4:	0802c4c4 	.word	0x0802c4c4
 801a0a8:	08023cac 	.word	0x08023cac
 801a0ac:	0802c4d8 	.word	0x0802c4d8
 801a0b0:	08024358 	.word	0x08024358
 801a0b4:	0802c4ec 	.word	0x0802c4ec
 801a0b8:	0802c4fc 	.word	0x0802c4fc
 801a0bc:	0802c510 	.word	0x0802c510
 801a0c0:	0802c520 	.word	0x0802c520
 801a0c4:	08023bf0 	.word	0x08023bf0
 801a0c8:	0802c528 	.word	0x0802c528
 801a0cc:	0802c534 	.word	0x0802c534
 801a0d0:	0802c544 	.word	0x0802c544
 801a0d4:	08023ae4 	.word	0x08023ae4
 801a0d8:	0802c54c 	.word	0x0802c54c
 801a0dc:	080280a8 	.word	0x080280a8
 801a0e0:	08023ec0 	.word	0x08023ec0
		case 737 :
			strcpy(p->name,"A'TRAZIONE");
 801a0e4:	687b      	ldr	r3, [r7, #4]
 801a0e6:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801a0ea:	49ab      	ldr	r1, [pc, #684]	; (801a398 <problem_fetch+0x18d34>)
 801a0ec:	461a      	mov	r2, r3
 801a0ee:	460b      	mov	r3, r1
 801a0f0:	cb03      	ldmia	r3!, {r0, r1}
 801a0f2:	6010      	str	r0, [r2, #0]
 801a0f4:	6051      	str	r1, [r2, #4]
 801a0f6:	8819      	ldrh	r1, [r3, #0]
 801a0f8:	789b      	ldrb	r3, [r3, #2]
 801a0fa:	8111      	strh	r1, [r2, #8]
 801a0fc:	7293      	strb	r3, [r2, #10]
			strcpy(p->grade,"7B+");
 801a0fe:	687b      	ldr	r3, [r7, #4]
 801a100:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801a104:	4aa5      	ldr	r2, [pc, #660]	; (801a39c <problem_fetch+0x18d38>)
 801a106:	6810      	ldr	r0, [r2, #0]
 801a108:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 801a10a:	687b      	ldr	r3, [r7, #4]
 801a10c:	2206      	movs	r2, #6
 801a10e:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"E,I,J,K,G,D");
 801a110:	687b      	ldr	r3, [r7, #4]
 801a112:	33a4      	adds	r3, #164	; 0xa4
 801a114:	4aa2      	ldr	r2, [pc, #648]	; (801a3a0 <problem_fetch+0x18d3c>)
 801a116:	461c      	mov	r4, r3
 801a118:	4613      	mov	r3, r2
 801a11a:	cb07      	ldmia	r3!, {r0, r1, r2}
 801a11c:	6020      	str	r0, [r4, #0]
 801a11e:	6061      	str	r1, [r4, #4]
 801a120:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"6,10,13,14,17,18");
 801a122:	687b      	ldr	r3, [r7, #4]
 801a124:	3304      	adds	r3, #4
 801a126:	4a9f      	ldr	r2, [pc, #636]	; (801a3a4 <problem_fetch+0x18d40>)
 801a128:	461d      	mov	r5, r3
 801a12a:	4614      	mov	r4, r2
 801a12c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801a12e:	6028      	str	r0, [r5, #0]
 801a130:	6069      	str	r1, [r5, #4]
 801a132:	60aa      	str	r2, [r5, #8]
 801a134:	60eb      	str	r3, [r5, #12]
 801a136:	7823      	ldrb	r3, [r4, #0]
 801a138:	742b      	strb	r3, [r5, #16]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 801a13a:	687b      	ldr	r3, [r7, #4]
 801a13c:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 801a140:	4a99      	ldr	r2, [pc, #612]	; (801a3a8 <problem_fetch+0x18d44>)
 801a142:	461c      	mov	r4, r3
 801a144:	4613      	mov	r3, r2
 801a146:	cb07      	ldmia	r3!, {r0, r1, r2}
 801a148:	6020      	str	r0, [r4, #0]
 801a14a:	6061      	str	r1, [r4, #4]
 801a14c:	60a2      	str	r2, [r4, #8]
			break;
 801a14e:	f002 b9b9 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 738 :
			strcpy(p->name,"FROM VALCHIUSELLAWITHLOVE");
 801a152:	687b      	ldr	r3, [r7, #4]
 801a154:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801a158:	4a94      	ldr	r2, [pc, #592]	; (801a3ac <problem_fetch+0x18d48>)
 801a15a:	461d      	mov	r5, r3
 801a15c:	4614      	mov	r4, r2
 801a15e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801a160:	6028      	str	r0, [r5, #0]
 801a162:	6069      	str	r1, [r5, #4]
 801a164:	60aa      	str	r2, [r5, #8]
 801a166:	60eb      	str	r3, [r5, #12]
 801a168:	cc03      	ldmia	r4!, {r0, r1}
 801a16a:	6128      	str	r0, [r5, #16]
 801a16c:	6169      	str	r1, [r5, #20]
 801a16e:	8823      	ldrh	r3, [r4, #0]
 801a170:	832b      	strh	r3, [r5, #24]
			strcpy(p->grade,"7A+");
 801a172:	687b      	ldr	r3, [r7, #4]
 801a174:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801a178:	4a8d      	ldr	r2, [pc, #564]	; (801a3b0 <problem_fetch+0x18d4c>)
 801a17a:	6810      	ldr	r0, [r2, #0]
 801a17c:	6018      	str	r0, [r3, #0]
			p->moveSize = 5;
 801a17e:	687b      	ldr	r3, [r7, #4]
 801a180:	2205      	movs	r2, #5
 801a182:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"C,C,I,E,D");
 801a184:	687b      	ldr	r3, [r7, #4]
 801a186:	33a4      	adds	r3, #164	; 0xa4
 801a188:	498a      	ldr	r1, [pc, #552]	; (801a3b4 <problem_fetch+0x18d50>)
 801a18a:	461a      	mov	r2, r3
 801a18c:	460b      	mov	r3, r1
 801a18e:	cb03      	ldmia	r3!, {r0, r1}
 801a190:	6010      	str	r0, [r2, #0]
 801a192:	6051      	str	r1, [r2, #4]
 801a194:	881b      	ldrh	r3, [r3, #0]
 801a196:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"5,8,10,14,18");
 801a198:	687b      	ldr	r3, [r7, #4]
 801a19a:	3304      	adds	r3, #4
 801a19c:	4a86      	ldr	r2, [pc, #536]	; (801a3b8 <problem_fetch+0x18d54>)
 801a19e:	461c      	mov	r4, r3
 801a1a0:	4613      	mov	r3, r2
 801a1a2:	cb07      	ldmia	r3!, {r0, r1, r2}
 801a1a4:	6020      	str	r0, [r4, #0]
 801a1a6:	6061      	str	r1, [r4, #4]
 801a1a8:	60a2      	str	r2, [r4, #8]
 801a1aa:	781b      	ldrb	r3, [r3, #0]
 801a1ac:	7323      	strb	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,e");
 801a1ae:	687b      	ldr	r3, [r7, #4]
 801a1b0:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 801a1b4:	4981      	ldr	r1, [pc, #516]	; (801a3bc <problem_fetch+0x18d58>)
 801a1b6:	461a      	mov	r2, r3
 801a1b8:	460b      	mov	r3, r1
 801a1ba:	cb03      	ldmia	r3!, {r0, r1}
 801a1bc:	6010      	str	r0, [r2, #0]
 801a1be:	6051      	str	r1, [r2, #4]
 801a1c0:	881b      	ldrh	r3, [r3, #0]
 801a1c2:	8113      	strh	r3, [r2, #8]
			break;
 801a1c4:	f002 b97e 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 739 :
			strcpy(p->name,"TIME TO PLAY");
 801a1c8:	687b      	ldr	r3, [r7, #4]
 801a1ca:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801a1ce:	4a7c      	ldr	r2, [pc, #496]	; (801a3c0 <problem_fetch+0x18d5c>)
 801a1d0:	461c      	mov	r4, r3
 801a1d2:	4613      	mov	r3, r2
 801a1d4:	cb07      	ldmia	r3!, {r0, r1, r2}
 801a1d6:	6020      	str	r0, [r4, #0]
 801a1d8:	6061      	str	r1, [r4, #4]
 801a1da:	60a2      	str	r2, [r4, #8]
 801a1dc:	781b      	ldrb	r3, [r3, #0]
 801a1de:	7323      	strb	r3, [r4, #12]
			strcpy(p->grade,"6C+");
 801a1e0:	687b      	ldr	r3, [r7, #4]
 801a1e2:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801a1e6:	4a77      	ldr	r2, [pc, #476]	; (801a3c4 <problem_fetch+0x18d60>)
 801a1e8:	6810      	ldr	r0, [r2, #0]
 801a1ea:	6018      	str	r0, [r3, #0]
			p->moveSize = 11;
 801a1ec:	687b      	ldr	r3, [r7, #4]
 801a1ee:	220b      	movs	r2, #11
 801a1f0:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,J,I,H,D,D,B,C,G,H,I");
 801a1f2:	687b      	ldr	r3, [r7, #4]
 801a1f4:	33a4      	adds	r3, #164	; 0xa4
 801a1f6:	4a74      	ldr	r2, [pc, #464]	; (801a3c8 <problem_fetch+0x18d64>)
 801a1f8:	461d      	mov	r5, r3
 801a1fa:	4614      	mov	r4, r2
 801a1fc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801a1fe:	6028      	str	r0, [r5, #0]
 801a200:	6069      	str	r1, [r5, #4]
 801a202:	60aa      	str	r2, [r5, #8]
 801a204:	60eb      	str	r3, [r5, #12]
 801a206:	6820      	ldr	r0, [r4, #0]
 801a208:	6128      	str	r0, [r5, #16]
 801a20a:	88a3      	ldrh	r3, [r4, #4]
 801a20c:	82ab      	strh	r3, [r5, #20]
			strcpy(p->moveNumbers,"4,7,10,12,11,15,6,16,17,16,18");
 801a20e:	687b      	ldr	r3, [r7, #4]
 801a210:	3304      	adds	r3, #4
 801a212:	4a6e      	ldr	r2, [pc, #440]	; (801a3cc <problem_fetch+0x18d68>)
 801a214:	461d      	mov	r5, r3
 801a216:	4614      	mov	r4, r2
 801a218:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801a21a:	6028      	str	r0, [r5, #0]
 801a21c:	6069      	str	r1, [r5, #4]
 801a21e:	60aa      	str	r2, [r5, #8]
 801a220:	60eb      	str	r3, [r5, #12]
 801a222:	cc07      	ldmia	r4!, {r0, r1, r2}
 801a224:	6128      	str	r0, [r5, #16]
 801a226:	6169      	str	r1, [r5, #20]
 801a228:	61aa      	str	r2, [r5, #24]
 801a22a:	8823      	ldrh	r3, [r4, #0]
 801a22c:	83ab      	strh	r3, [r5, #28]
			strcpy(p->startFinish,"s,d,d,d,d,d,d,d,d,d,e");
 801a22e:	687b      	ldr	r3, [r7, #4]
 801a230:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 801a234:	4a66      	ldr	r2, [pc, #408]	; (801a3d0 <problem_fetch+0x18d6c>)
 801a236:	461d      	mov	r5, r3
 801a238:	4614      	mov	r4, r2
 801a23a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801a23c:	6028      	str	r0, [r5, #0]
 801a23e:	6069      	str	r1, [r5, #4]
 801a240:	60aa      	str	r2, [r5, #8]
 801a242:	60eb      	str	r3, [r5, #12]
 801a244:	6820      	ldr	r0, [r4, #0]
 801a246:	6128      	str	r0, [r5, #16]
 801a248:	88a3      	ldrh	r3, [r4, #4]
 801a24a:	82ab      	strh	r3, [r5, #20]
			break;
 801a24c:	f002 b93a 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 740 :
			strcpy(p->name,"KIDSPROBLEM");
 801a250:	687b      	ldr	r3, [r7, #4]
 801a252:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801a256:	4a5f      	ldr	r2, [pc, #380]	; (801a3d4 <problem_fetch+0x18d70>)
 801a258:	461c      	mov	r4, r3
 801a25a:	4613      	mov	r3, r2
 801a25c:	cb07      	ldmia	r3!, {r0, r1, r2}
 801a25e:	6020      	str	r0, [r4, #0]
 801a260:	6061      	str	r1, [r4, #4]
 801a262:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade,"6C");
 801a264:	687b      	ldr	r3, [r7, #4]
 801a266:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801a26a:	4a5b      	ldr	r2, [pc, #364]	; (801a3d8 <problem_fetch+0x18d74>)
 801a26c:	8811      	ldrh	r1, [r2, #0]
 801a26e:	7892      	ldrb	r2, [r2, #2]
 801a270:	8019      	strh	r1, [r3, #0]
 801a272:	709a      	strb	r2, [r3, #2]
			p->moveSize = 8;
 801a274:	687b      	ldr	r3, [r7, #4]
 801a276:	2208      	movs	r2, #8
 801a278:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,J,G,B,C,H,E,D");
 801a27a:	687b      	ldr	r3, [r7, #4]
 801a27c:	33a4      	adds	r3, #164	; 0xa4
 801a27e:	4a57      	ldr	r2, [pc, #348]	; (801a3dc <problem_fetch+0x18d78>)
 801a280:	461c      	mov	r4, r3
 801a282:	4615      	mov	r5, r2
 801a284:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801a286:	6020      	str	r0, [r4, #0]
 801a288:	6061      	str	r1, [r4, #4]
 801a28a:	60a2      	str	r2, [r4, #8]
 801a28c:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,5,9,10,13,13,16,18");
 801a28e:	687b      	ldr	r3, [r7, #4]
 801a290:	3304      	adds	r3, #4
 801a292:	4a53      	ldr	r2, [pc, #332]	; (801a3e0 <problem_fetch+0x18d7c>)
 801a294:	461d      	mov	r5, r3
 801a296:	4614      	mov	r4, r2
 801a298:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801a29a:	6028      	str	r0, [r5, #0]
 801a29c:	6069      	str	r1, [r5, #4]
 801a29e:	60aa      	str	r2, [r5, #8]
 801a2a0:	60eb      	str	r3, [r5, #12]
 801a2a2:	6820      	ldr	r0, [r4, #0]
 801a2a4:	6128      	str	r0, [r5, #16]
 801a2a6:	7923      	ldrb	r3, [r4, #4]
 801a2a8:	752b      	strb	r3, [r5, #20]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,e");
 801a2aa:	687b      	ldr	r3, [r7, #4]
 801a2ac:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 801a2b0:	4a4c      	ldr	r2, [pc, #304]	; (801a3e4 <problem_fetch+0x18d80>)
 801a2b2:	461c      	mov	r4, r3
 801a2b4:	4615      	mov	r5, r2
 801a2b6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801a2b8:	6020      	str	r0, [r4, #0]
 801a2ba:	6061      	str	r1, [r4, #4]
 801a2bc:	60a2      	str	r2, [r4, #8]
 801a2be:	60e3      	str	r3, [r4, #12]
			break;
 801a2c0:	f002 b900 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 741 :
			strcpy(p->name,"DUBUCHI");
 801a2c4:	687b      	ldr	r3, [r7, #4]
 801a2c6:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801a2ca:	4947      	ldr	r1, [pc, #284]	; (801a3e8 <problem_fetch+0x18d84>)
 801a2cc:	461a      	mov	r2, r3
 801a2ce:	460b      	mov	r3, r1
 801a2d0:	cb03      	ldmia	r3!, {r0, r1}
 801a2d2:	6010      	str	r0, [r2, #0]
 801a2d4:	6051      	str	r1, [r2, #4]
			strcpy(p->grade,"7A+");
 801a2d6:	687b      	ldr	r3, [r7, #4]
 801a2d8:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801a2dc:	4a34      	ldr	r2, [pc, #208]	; (801a3b0 <problem_fetch+0x18d4c>)
 801a2de:	6810      	ldr	r0, [r2, #0]
 801a2e0:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 801a2e2:	687b      	ldr	r3, [r7, #4]
 801a2e4:	2206      	movs	r2, #6
 801a2e6:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"C,D,G,C,C,A");
 801a2e8:	687b      	ldr	r3, [r7, #4]
 801a2ea:	33a4      	adds	r3, #164	; 0xa4
 801a2ec:	4a3f      	ldr	r2, [pc, #252]	; (801a3ec <problem_fetch+0x18d88>)
 801a2ee:	461c      	mov	r4, r3
 801a2f0:	4613      	mov	r3, r2
 801a2f2:	cb07      	ldmia	r3!, {r0, r1, r2}
 801a2f4:	6020      	str	r0, [r4, #0]
 801a2f6:	6061      	str	r1, [r4, #4]
 801a2f8:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,7,10,13,16,18");
 801a2fa:	687b      	ldr	r3, [r7, #4]
 801a2fc:	3304      	adds	r3, #4
 801a2fe:	4a3c      	ldr	r2, [pc, #240]	; (801a3f0 <problem_fetch+0x18d8c>)
 801a300:	461c      	mov	r4, r3
 801a302:	4615      	mov	r5, r2
 801a304:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801a306:	6020      	str	r0, [r4, #0]
 801a308:	6061      	str	r1, [r4, #4]
 801a30a:	60a2      	str	r2, [r4, #8]
 801a30c:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 801a30e:	687b      	ldr	r3, [r7, #4]
 801a310:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 801a314:	4a24      	ldr	r2, [pc, #144]	; (801a3a8 <problem_fetch+0x18d44>)
 801a316:	461c      	mov	r4, r3
 801a318:	4613      	mov	r3, r2
 801a31a:	cb07      	ldmia	r3!, {r0, r1, r2}
 801a31c:	6020      	str	r0, [r4, #0]
 801a31e:	6061      	str	r1, [r4, #4]
 801a320:	60a2      	str	r2, [r4, #8]
			break;
 801a322:	f002 b8cf 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 742 :
			strcpy(p->name,"FULCO");
 801a326:	687b      	ldr	r3, [r7, #4]
 801a328:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801a32c:	4a31      	ldr	r2, [pc, #196]	; (801a3f4 <problem_fetch+0x18d90>)
 801a32e:	6810      	ldr	r0, [r2, #0]
 801a330:	6018      	str	r0, [r3, #0]
 801a332:	8892      	ldrh	r2, [r2, #4]
 801a334:	809a      	strh	r2, [r3, #4]
			strcpy(p->grade,"6C");
 801a336:	687b      	ldr	r3, [r7, #4]
 801a338:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801a33c:	4a26      	ldr	r2, [pc, #152]	; (801a3d8 <problem_fetch+0x18d74>)
 801a33e:	8811      	ldrh	r1, [r2, #0]
 801a340:	7892      	ldrb	r2, [r2, #2]
 801a342:	8019      	strh	r1, [r3, #0]
 801a344:	709a      	strb	r2, [r3, #2]
			p->moveSize = 7;
 801a346:	687b      	ldr	r3, [r7, #4]
 801a348:	2207      	movs	r2, #7
 801a34a:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,G,I,D,G,E,D");
 801a34c:	687b      	ldr	r3, [r7, #4]
 801a34e:	33a4      	adds	r3, #164	; 0xa4
 801a350:	4a29      	ldr	r2, [pc, #164]	; (801a3f8 <problem_fetch+0x18d94>)
 801a352:	461c      	mov	r4, r3
 801a354:	4613      	mov	r3, r2
 801a356:	cb07      	ldmia	r3!, {r0, r1, r2}
 801a358:	6020      	str	r0, [r4, #0]
 801a35a:	6061      	str	r1, [r4, #4]
 801a35c:	60a2      	str	r2, [r4, #8]
 801a35e:	881b      	ldrh	r3, [r3, #0]
 801a360:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,6,9,11,14,16,18");
 801a362:	687b      	ldr	r3, [r7, #4]
 801a364:	3304      	adds	r3, #4
 801a366:	4a25      	ldr	r2, [pc, #148]	; (801a3fc <problem_fetch+0x18d98>)
 801a368:	461d      	mov	r5, r3
 801a36a:	4614      	mov	r4, r2
 801a36c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801a36e:	6028      	str	r0, [r5, #0]
 801a370:	6069      	str	r1, [r5, #4]
 801a372:	60aa      	str	r2, [r5, #8]
 801a374:	60eb      	str	r3, [r5, #12]
 801a376:	8823      	ldrh	r3, [r4, #0]
 801a378:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,s,d,d,d,d,e");
 801a37a:	687b      	ldr	r3, [r7, #4]
 801a37c:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 801a380:	4a1f      	ldr	r2, [pc, #124]	; (801a400 <problem_fetch+0x18d9c>)
 801a382:	461c      	mov	r4, r3
 801a384:	4613      	mov	r3, r2
 801a386:	cb07      	ldmia	r3!, {r0, r1, r2}
 801a388:	6020      	str	r0, [r4, #0]
 801a38a:	6061      	str	r1, [r4, #4]
 801a38c:	60a2      	str	r2, [r4, #8]
 801a38e:	881b      	ldrh	r3, [r3, #0]
 801a390:	81a3      	strh	r3, [r4, #12]
			break;
 801a392:	f002 b897 	b.w	801c4c4 <problem_fetch+0x1ae60>
 801a396:	bf00      	nop
 801a398:	0802c558 	.word	0x0802c558
 801a39c:	08023c60 	.word	0x08023c60
 801a3a0:	0802c564 	.word	0x0802c564
 801a3a4:	0802c570 	.word	0x0802c570
 801a3a8:	08023ec0 	.word	0x08023ec0
 801a3ac:	0802c584 	.word	0x0802c584
 801a3b0:	08023cc4 	.word	0x08023cc4
 801a3b4:	0802c5a0 	.word	0x0802c5a0
 801a3b8:	08024e2c 	.word	0x08024e2c
 801a3bc:	08023ff0 	.word	0x08023ff0
 801a3c0:	0802c5ac 	.word	0x0802c5ac
 801a3c4:	08023bbc 	.word	0x08023bbc
 801a3c8:	0802c5bc 	.word	0x0802c5bc
 801a3cc:	0802c5d4 	.word	0x0802c5d4
 801a3d0:	0802c5f4 	.word	0x0802c5f4
 801a3d4:	0802c60c 	.word	0x0802c60c
 801a3d8:	08023bf0 	.word	0x08023bf0
 801a3dc:	0802c618 	.word	0x0802c618
 801a3e0:	0802c628 	.word	0x0802c628
 801a3e4:	08023c48 	.word	0x08023c48
 801a3e8:	0802c640 	.word	0x0802c640
 801a3ec:	0802c648 	.word	0x0802c648
 801a3f0:	0802b4f4 	.word	0x0802b4f4
 801a3f4:	0802c654 	.word	0x0802c654
 801a3f8:	0802c65c 	.word	0x0802c65c
 801a3fc:	08024830 	.word	0x08024830
 801a400:	08023b9c 	.word	0x08023b9c
		case 743 :
			strcpy(p->name,"KICKER 2");
 801a404:	687b      	ldr	r3, [r7, #4]
 801a406:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801a40a:	49c3      	ldr	r1, [pc, #780]	; (801a718 <problem_fetch+0x190b4>)
 801a40c:	461a      	mov	r2, r3
 801a40e:	460b      	mov	r3, r1
 801a410:	cb03      	ldmia	r3!, {r0, r1}
 801a412:	6010      	str	r0, [r2, #0]
 801a414:	6051      	str	r1, [r2, #4]
 801a416:	781b      	ldrb	r3, [r3, #0]
 801a418:	7213      	strb	r3, [r2, #8]
			strcpy(p->grade,"7A");
 801a41a:	687b      	ldr	r3, [r7, #4]
 801a41c:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801a420:	4abe      	ldr	r2, [pc, #760]	; (801a71c <problem_fetch+0x190b8>)
 801a422:	8811      	ldrh	r1, [r2, #0]
 801a424:	7892      	ldrb	r2, [r2, #2]
 801a426:	8019      	strh	r1, [r3, #0]
 801a428:	709a      	strb	r2, [r3, #2]
			p->moveSize = 7;
 801a42a:	687b      	ldr	r3, [r7, #4]
 801a42c:	2207      	movs	r2, #7
 801a42e:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,D,E,B,G,E,I");
 801a430:	687b      	ldr	r3, [r7, #4]
 801a432:	33a4      	adds	r3, #164	; 0xa4
 801a434:	4aba      	ldr	r2, [pc, #744]	; (801a720 <problem_fetch+0x190bc>)
 801a436:	461c      	mov	r4, r3
 801a438:	4613      	mov	r3, r2
 801a43a:	cb07      	ldmia	r3!, {r0, r1, r2}
 801a43c:	6020      	str	r0, [r4, #0]
 801a43e:	6061      	str	r1, [r4, #4]
 801a440:	60a2      	str	r2, [r4, #8]
 801a442:	881b      	ldrh	r3, [r3, #0]
 801a444:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,7,9,12,14,14,18");
 801a446:	687b      	ldr	r3, [r7, #4]
 801a448:	3304      	adds	r3, #4
 801a44a:	4ab6      	ldr	r2, [pc, #728]	; (801a724 <problem_fetch+0x190c0>)
 801a44c:	461d      	mov	r5, r3
 801a44e:	4614      	mov	r4, r2
 801a450:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801a452:	6028      	str	r0, [r5, #0]
 801a454:	6069      	str	r1, [r5, #4]
 801a456:	60aa      	str	r2, [r5, #8]
 801a458:	60eb      	str	r3, [r5, #12]
 801a45a:	8823      	ldrh	r3, [r4, #0]
 801a45c:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 801a45e:	687b      	ldr	r3, [r7, #4]
 801a460:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 801a464:	4ab0      	ldr	r2, [pc, #704]	; (801a728 <problem_fetch+0x190c4>)
 801a466:	461c      	mov	r4, r3
 801a468:	4613      	mov	r3, r2
 801a46a:	cb07      	ldmia	r3!, {r0, r1, r2}
 801a46c:	6020      	str	r0, [r4, #0]
 801a46e:	6061      	str	r1, [r4, #4]
 801a470:	60a2      	str	r2, [r4, #8]
 801a472:	881b      	ldrh	r3, [r3, #0]
 801a474:	81a3      	strh	r3, [r4, #12]
			break;
 801a476:	f002 b825 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 744 :
			strcpy(p->name,"KICKER");
 801a47a:	687b      	ldr	r3, [r7, #4]
 801a47c:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801a480:	4aaa      	ldr	r2, [pc, #680]	; (801a72c <problem_fetch+0x190c8>)
 801a482:	6810      	ldr	r0, [r2, #0]
 801a484:	6018      	str	r0, [r3, #0]
 801a486:	8891      	ldrh	r1, [r2, #4]
 801a488:	7992      	ldrb	r2, [r2, #6]
 801a48a:	8099      	strh	r1, [r3, #4]
 801a48c:	719a      	strb	r2, [r3, #6]
			strcpy(p->grade,"7A+");
 801a48e:	687b      	ldr	r3, [r7, #4]
 801a490:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801a494:	4aa6      	ldr	r2, [pc, #664]	; (801a730 <problem_fetch+0x190cc>)
 801a496:	6810      	ldr	r0, [r2, #0]
 801a498:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 801a49a:	687b      	ldr	r3, [r7, #4]
 801a49c:	2206      	movs	r2, #6
 801a49e:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,D,E,B,E,D");
 801a4a0:	687b      	ldr	r3, [r7, #4]
 801a4a2:	33a4      	adds	r3, #164	; 0xa4
 801a4a4:	4aa3      	ldr	r2, [pc, #652]	; (801a734 <problem_fetch+0x190d0>)
 801a4a6:	461c      	mov	r4, r3
 801a4a8:	4613      	mov	r3, r2
 801a4aa:	cb07      	ldmia	r3!, {r0, r1, r2}
 801a4ac:	6020      	str	r0, [r4, #0]
 801a4ae:	6061      	str	r1, [r4, #4]
 801a4b0:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,7,9,12,14,18");
 801a4b2:	687b      	ldr	r3, [r7, #4]
 801a4b4:	3304      	adds	r3, #4
 801a4b6:	4aa0      	ldr	r2, [pc, #640]	; (801a738 <problem_fetch+0x190d4>)
 801a4b8:	461c      	mov	r4, r3
 801a4ba:	4613      	mov	r3, r2
 801a4bc:	cb07      	ldmia	r3!, {r0, r1, r2}
 801a4be:	6020      	str	r0, [r4, #0]
 801a4c0:	6061      	str	r1, [r4, #4]
 801a4c2:	60a2      	str	r2, [r4, #8]
 801a4c4:	881a      	ldrh	r2, [r3, #0]
 801a4c6:	789b      	ldrb	r3, [r3, #2]
 801a4c8:	81a2      	strh	r2, [r4, #12]
 801a4ca:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 801a4cc:	687b      	ldr	r3, [r7, #4]
 801a4ce:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 801a4d2:	4a9a      	ldr	r2, [pc, #616]	; (801a73c <problem_fetch+0x190d8>)
 801a4d4:	461c      	mov	r4, r3
 801a4d6:	4613      	mov	r3, r2
 801a4d8:	cb07      	ldmia	r3!, {r0, r1, r2}
 801a4da:	6020      	str	r0, [r4, #0]
 801a4dc:	6061      	str	r1, [r4, #4]
 801a4de:	60a2      	str	r2, [r4, #8]
			break;
 801a4e0:	f001 bff0 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 745 :
			strcpy(p->name,"GRÜMPU-TURNIER");
 801a4e4:	687b      	ldr	r3, [r7, #4]
 801a4e6:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801a4ea:	4a95      	ldr	r2, [pc, #596]	; (801a740 <problem_fetch+0x190dc>)
 801a4ec:	461c      	mov	r4, r3
 801a4ee:	4615      	mov	r5, r2
 801a4f0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801a4f2:	6020      	str	r0, [r4, #0]
 801a4f4:	6061      	str	r1, [r4, #4]
 801a4f6:	60a2      	str	r2, [r4, #8]
 801a4f8:	60e3      	str	r3, [r4, #12]
			strcpy(p->grade,"6B+");
 801a4fa:	687b      	ldr	r3, [r7, #4]
 801a4fc:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801a500:	4a90      	ldr	r2, [pc, #576]	; (801a744 <problem_fetch+0x190e0>)
 801a502:	6810      	ldr	r0, [r2, #0]
 801a504:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 801a506:	687b      	ldr	r3, [r7, #4]
 801a508:	2207      	movs	r2, #7
 801a50a:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,G,A,E,A,E,A");
 801a50c:	687b      	ldr	r3, [r7, #4]
 801a50e:	33a4      	adds	r3, #164	; 0xa4
 801a510:	4a8d      	ldr	r2, [pc, #564]	; (801a748 <problem_fetch+0x190e4>)
 801a512:	461c      	mov	r4, r3
 801a514:	4613      	mov	r3, r2
 801a516:	cb07      	ldmia	r3!, {r0, r1, r2}
 801a518:	6020      	str	r0, [r4, #0]
 801a51a:	6061      	str	r1, [r4, #4]
 801a51c:	60a2      	str	r2, [r4, #8]
 801a51e:	881b      	ldrh	r3, [r3, #0]
 801a520:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,9,9,12,14,16,18");
 801a522:	687b      	ldr	r3, [r7, #4]
 801a524:	3304      	adds	r3, #4
 801a526:	4a89      	ldr	r2, [pc, #548]	; (801a74c <problem_fetch+0x190e8>)
 801a528:	461d      	mov	r5, r3
 801a52a:	4614      	mov	r4, r2
 801a52c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801a52e:	6028      	str	r0, [r5, #0]
 801a530:	6069      	str	r1, [r5, #4]
 801a532:	60aa      	str	r2, [r5, #8]
 801a534:	60eb      	str	r3, [r5, #12]
 801a536:	8823      	ldrh	r3, [r4, #0]
 801a538:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 801a53a:	687b      	ldr	r3, [r7, #4]
 801a53c:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 801a540:	4a79      	ldr	r2, [pc, #484]	; (801a728 <problem_fetch+0x190c4>)
 801a542:	461c      	mov	r4, r3
 801a544:	4613      	mov	r3, r2
 801a546:	cb07      	ldmia	r3!, {r0, r1, r2}
 801a548:	6020      	str	r0, [r4, #0]
 801a54a:	6061      	str	r1, [r4, #4]
 801a54c:	60a2      	str	r2, [r4, #8]
 801a54e:	881b      	ldrh	r3, [r3, #0]
 801a550:	81a3      	strh	r3, [r4, #12]
			break;
 801a552:	f001 bfb7 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 746 :
			strcpy(p->name,"LADYBUG RIGHT VAR");
 801a556:	687b      	ldr	r3, [r7, #4]
 801a558:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801a55c:	4a7c      	ldr	r2, [pc, #496]	; (801a750 <problem_fetch+0x190ec>)
 801a55e:	461d      	mov	r5, r3
 801a560:	4614      	mov	r4, r2
 801a562:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801a564:	6028      	str	r0, [r5, #0]
 801a566:	6069      	str	r1, [r5, #4]
 801a568:	60aa      	str	r2, [r5, #8]
 801a56a:	60eb      	str	r3, [r5, #12]
 801a56c:	8823      	ldrh	r3, [r4, #0]
 801a56e:	822b      	strh	r3, [r5, #16]
			strcpy(p->grade,"7A+");
 801a570:	687b      	ldr	r3, [r7, #4]
 801a572:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801a576:	4a6e      	ldr	r2, [pc, #440]	; (801a730 <problem_fetch+0x190cc>)
 801a578:	6810      	ldr	r0, [r2, #0]
 801a57a:	6018      	str	r0, [r3, #0]
			p->moveSize = 8;
 801a57c:	687b      	ldr	r3, [r7, #4]
 801a57e:	2208      	movs	r2, #8
 801a580:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,J,H,C,F,A,E,I");
 801a582:	687b      	ldr	r3, [r7, #4]
 801a584:	33a4      	adds	r3, #164	; 0xa4
 801a586:	4a73      	ldr	r2, [pc, #460]	; (801a754 <problem_fetch+0x190f0>)
 801a588:	461c      	mov	r4, r3
 801a58a:	4615      	mov	r5, r2
 801a58c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801a58e:	6020      	str	r0, [r4, #0]
 801a590:	6061      	str	r1, [r4, #4]
 801a592:	60a2      	str	r2, [r4, #8]
 801a594:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"6,5,10,13,11,9,16,18");
 801a596:	687b      	ldr	r3, [r7, #4]
 801a598:	3304      	adds	r3, #4
 801a59a:	4a6f      	ldr	r2, [pc, #444]	; (801a758 <problem_fetch+0x190f4>)
 801a59c:	461d      	mov	r5, r3
 801a59e:	4614      	mov	r4, r2
 801a5a0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801a5a2:	6028      	str	r0, [r5, #0]
 801a5a4:	6069      	str	r1, [r5, #4]
 801a5a6:	60aa      	str	r2, [r5, #8]
 801a5a8:	60eb      	str	r3, [r5, #12]
 801a5aa:	6820      	ldr	r0, [r4, #0]
 801a5ac:	6128      	str	r0, [r5, #16]
 801a5ae:	7923      	ldrb	r3, [r4, #4]
 801a5b0:	752b      	strb	r3, [r5, #20]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,e");
 801a5b2:	687b      	ldr	r3, [r7, #4]
 801a5b4:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 801a5b8:	4a68      	ldr	r2, [pc, #416]	; (801a75c <problem_fetch+0x190f8>)
 801a5ba:	461c      	mov	r4, r3
 801a5bc:	4615      	mov	r5, r2
 801a5be:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801a5c0:	6020      	str	r0, [r4, #0]
 801a5c2:	6061      	str	r1, [r4, #4]
 801a5c4:	60a2      	str	r2, [r4, #8]
 801a5c6:	60e3      	str	r3, [r4, #12]
			break;
 801a5c8:	f001 bf7c 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 747 :
			strcpy(p->name,"NANO");
 801a5cc:	687b      	ldr	r3, [r7, #4]
 801a5ce:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801a5d2:	4a63      	ldr	r2, [pc, #396]	; (801a760 <problem_fetch+0x190fc>)
 801a5d4:	6810      	ldr	r0, [r2, #0]
 801a5d6:	6018      	str	r0, [r3, #0]
 801a5d8:	7912      	ldrb	r2, [r2, #4]
 801a5da:	711a      	strb	r2, [r3, #4]
			strcpy(p->grade,"7A+");
 801a5dc:	687b      	ldr	r3, [r7, #4]
 801a5de:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801a5e2:	4a53      	ldr	r2, [pc, #332]	; (801a730 <problem_fetch+0x190cc>)
 801a5e4:	6810      	ldr	r0, [r2, #0]
 801a5e6:	6018      	str	r0, [r3, #0]
			p->moveSize = 5;
 801a5e8:	687b      	ldr	r3, [r7, #4]
 801a5ea:	2205      	movs	r2, #5
 801a5ec:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"E,I,H,K,I");
 801a5ee:	687b      	ldr	r3, [r7, #4]
 801a5f0:	33a4      	adds	r3, #164	; 0xa4
 801a5f2:	495c      	ldr	r1, [pc, #368]	; (801a764 <problem_fetch+0x19100>)
 801a5f4:	461a      	mov	r2, r3
 801a5f6:	460b      	mov	r3, r1
 801a5f8:	cb03      	ldmia	r3!, {r0, r1}
 801a5fa:	6010      	str	r0, [r2, #0]
 801a5fc:	6051      	str	r1, [r2, #4]
 801a5fe:	881b      	ldrh	r3, [r3, #0]
 801a600:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"6,10,12,14,18");
 801a602:	687b      	ldr	r3, [r7, #4]
 801a604:	3304      	adds	r3, #4
 801a606:	4a58      	ldr	r2, [pc, #352]	; (801a768 <problem_fetch+0x19104>)
 801a608:	461c      	mov	r4, r3
 801a60a:	4613      	mov	r3, r2
 801a60c:	cb07      	ldmia	r3!, {r0, r1, r2}
 801a60e:	6020      	str	r0, [r4, #0]
 801a610:	6061      	str	r1, [r4, #4]
 801a612:	60a2      	str	r2, [r4, #8]
 801a614:	881b      	ldrh	r3, [r3, #0]
 801a616:	81a3      	strh	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,e");
 801a618:	687b      	ldr	r3, [r7, #4]
 801a61a:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 801a61e:	4953      	ldr	r1, [pc, #332]	; (801a76c <problem_fetch+0x19108>)
 801a620:	461a      	mov	r2, r3
 801a622:	460b      	mov	r3, r1
 801a624:	cb03      	ldmia	r3!, {r0, r1}
 801a626:	6010      	str	r0, [r2, #0]
 801a628:	6051      	str	r1, [r2, #4]
 801a62a:	881b      	ldrh	r3, [r3, #0]
 801a62c:	8113      	strh	r3, [r2, #8]
			break;
 801a62e:	f001 bf49 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 748 :
			strcpy(p->name,"REALE");
 801a632:	687b      	ldr	r3, [r7, #4]
 801a634:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801a638:	4a4d      	ldr	r2, [pc, #308]	; (801a770 <problem_fetch+0x1910c>)
 801a63a:	6810      	ldr	r0, [r2, #0]
 801a63c:	6018      	str	r0, [r3, #0]
 801a63e:	8892      	ldrh	r2, [r2, #4]
 801a640:	809a      	strh	r2, [r3, #4]
			strcpy(p->grade,"6C");
 801a642:	687b      	ldr	r3, [r7, #4]
 801a644:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801a648:	4a4a      	ldr	r2, [pc, #296]	; (801a774 <problem_fetch+0x19110>)
 801a64a:	8811      	ldrh	r1, [r2, #0]
 801a64c:	7892      	ldrb	r2, [r2, #2]
 801a64e:	8019      	strh	r1, [r3, #0]
 801a650:	709a      	strb	r2, [r3, #2]
			p->moveSize = 7;
 801a652:	687b      	ldr	r3, [r7, #4]
 801a654:	2207      	movs	r2, #7
 801a656:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,H,C,F,G,K,I");
 801a658:	687b      	ldr	r3, [r7, #4]
 801a65a:	33a4      	adds	r3, #164	; 0xa4
 801a65c:	4a46      	ldr	r2, [pc, #280]	; (801a778 <problem_fetch+0x19114>)
 801a65e:	461c      	mov	r4, r3
 801a660:	4613      	mov	r3, r2
 801a662:	cb07      	ldmia	r3!, {r0, r1, r2}
 801a664:	6020      	str	r0, [r4, #0]
 801a666:	6061      	str	r1, [r4, #4]
 801a668:	60a2      	str	r2, [r4, #8]
 801a66a:	881b      	ldrh	r3, [r3, #0]
 801a66c:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,5,8,11,14,16,18");
 801a66e:	687b      	ldr	r3, [r7, #4]
 801a670:	3304      	adds	r3, #4
 801a672:	4a42      	ldr	r2, [pc, #264]	; (801a77c <problem_fetch+0x19118>)
 801a674:	461d      	mov	r5, r3
 801a676:	4614      	mov	r4, r2
 801a678:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801a67a:	6028      	str	r0, [r5, #0]
 801a67c:	6069      	str	r1, [r5, #4]
 801a67e:	60aa      	str	r2, [r5, #8]
 801a680:	60eb      	str	r3, [r5, #12]
 801a682:	8823      	ldrh	r3, [r4, #0]
 801a684:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,s,d,d,d,d,e");
 801a686:	687b      	ldr	r3, [r7, #4]
 801a688:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 801a68c:	4a3c      	ldr	r2, [pc, #240]	; (801a780 <problem_fetch+0x1911c>)
 801a68e:	461c      	mov	r4, r3
 801a690:	4613      	mov	r3, r2
 801a692:	cb07      	ldmia	r3!, {r0, r1, r2}
 801a694:	6020      	str	r0, [r4, #0]
 801a696:	6061      	str	r1, [r4, #4]
 801a698:	60a2      	str	r2, [r4, #8]
 801a69a:	881b      	ldrh	r3, [r3, #0]
 801a69c:	81a3      	strh	r3, [r4, #12]
			break;
 801a69e:	f001 bf11 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 749 :
			strcpy(p->name,"UNDERTAKER");
 801a6a2:	687b      	ldr	r3, [r7, #4]
 801a6a4:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801a6a8:	4936      	ldr	r1, [pc, #216]	; (801a784 <problem_fetch+0x19120>)
 801a6aa:	461a      	mov	r2, r3
 801a6ac:	460b      	mov	r3, r1
 801a6ae:	cb03      	ldmia	r3!, {r0, r1}
 801a6b0:	6010      	str	r0, [r2, #0]
 801a6b2:	6051      	str	r1, [r2, #4]
 801a6b4:	8819      	ldrh	r1, [r3, #0]
 801a6b6:	789b      	ldrb	r3, [r3, #2]
 801a6b8:	8111      	strh	r1, [r2, #8]
 801a6ba:	7293      	strb	r3, [r2, #10]
			strcpy(p->grade,"7B");
 801a6bc:	687b      	ldr	r3, [r7, #4]
 801a6be:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801a6c2:	4a31      	ldr	r2, [pc, #196]	; (801a788 <problem_fetch+0x19124>)
 801a6c4:	8811      	ldrh	r1, [r2, #0]
 801a6c6:	7892      	ldrb	r2, [r2, #2]
 801a6c8:	8019      	strh	r1, [r3, #0]
 801a6ca:	709a      	strb	r2, [r3, #2]
			p->moveSize = 5;
 801a6cc:	687b      	ldr	r3, [r7, #4]
 801a6ce:	2205      	movs	r2, #5
 801a6d0:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"C,E,B,E,D");
 801a6d2:	687b      	ldr	r3, [r7, #4]
 801a6d4:	33a4      	adds	r3, #164	; 0xa4
 801a6d6:	492d      	ldr	r1, [pc, #180]	; (801a78c <problem_fetch+0x19128>)
 801a6d8:	461a      	mov	r2, r3
 801a6da:	460b      	mov	r3, r1
 801a6dc:	cb03      	ldmia	r3!, {r0, r1}
 801a6de:	6010      	str	r0, [r2, #0]
 801a6e0:	6051      	str	r1, [r2, #4]
 801a6e2:	881b      	ldrh	r3, [r3, #0]
 801a6e4:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"5,9,12,14,18");
 801a6e6:	687b      	ldr	r3, [r7, #4]
 801a6e8:	3304      	adds	r3, #4
 801a6ea:	4a29      	ldr	r2, [pc, #164]	; (801a790 <problem_fetch+0x1912c>)
 801a6ec:	461c      	mov	r4, r3
 801a6ee:	4613      	mov	r3, r2
 801a6f0:	cb07      	ldmia	r3!, {r0, r1, r2}
 801a6f2:	6020      	str	r0, [r4, #0]
 801a6f4:	6061      	str	r1, [r4, #4]
 801a6f6:	60a2      	str	r2, [r4, #8]
 801a6f8:	781b      	ldrb	r3, [r3, #0]
 801a6fa:	7323      	strb	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,e");
 801a6fc:	687b      	ldr	r3, [r7, #4]
 801a6fe:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 801a702:	491a      	ldr	r1, [pc, #104]	; (801a76c <problem_fetch+0x19108>)
 801a704:	461a      	mov	r2, r3
 801a706:	460b      	mov	r3, r1
 801a708:	cb03      	ldmia	r3!, {r0, r1}
 801a70a:	6010      	str	r0, [r2, #0]
 801a70c:	6051      	str	r1, [r2, #4]
 801a70e:	881b      	ldrh	r3, [r3, #0]
 801a710:	8113      	strh	r3, [r2, #8]
			break;
 801a712:	f001 bed7 	b.w	801c4c4 <problem_fetch+0x1ae60>
 801a716:	bf00      	nop
 801a718:	0802c66c 	.word	0x0802c66c
 801a71c:	08023ae4 	.word	0x08023ae4
 801a720:	0802c678 	.word	0x0802c678
 801a724:	0802c688 	.word	0x0802c688
 801a728:	08023cac 	.word	0x08023cac
 801a72c:	0802c69c 	.word	0x0802c69c
 801a730:	08023cc4 	.word	0x08023cc4
 801a734:	0802c6a4 	.word	0x0802c6a4
 801a738:	0802c6b0 	.word	0x0802c6b0
 801a73c:	08023ec0 	.word	0x08023ec0
 801a740:	0802c6c0 	.word	0x0802c6c0
 801a744:	08023b24 	.word	0x08023b24
 801a748:	0802c6d0 	.word	0x0802c6d0
 801a74c:	0802c6e0 	.word	0x0802c6e0
 801a750:	0802c6f4 	.word	0x0802c6f4
 801a754:	0802c708 	.word	0x0802c708
 801a758:	0802c718 	.word	0x0802c718
 801a75c:	08023c48 	.word	0x08023c48
 801a760:	0802c730 	.word	0x0802c730
 801a764:	0802c738 	.word	0x0802c738
 801a768:	0802c744 	.word	0x0802c744
 801a76c:	08023ff0 	.word	0x08023ff0
 801a770:	0802c754 	.word	0x0802c754
 801a774:	08023bf0 	.word	0x08023bf0
 801a778:	0802c75c 	.word	0x0802c75c
 801a77c:	0802c76c 	.word	0x0802c76c
 801a780:	08023b9c 	.word	0x08023b9c
 801a784:	0802c780 	.word	0x0802c780
 801a788:	0802421c 	.word	0x0802421c
 801a78c:	0802c78c 	.word	0x0802c78c
 801a790:	08024140 	.word	0x08024140
		case 750 :
			strcpy(p->name,"COGUARO");
 801a794:	687b      	ldr	r3, [r7, #4]
 801a796:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801a79a:	49c0      	ldr	r1, [pc, #768]	; (801aa9c <problem_fetch+0x19438>)
 801a79c:	461a      	mov	r2, r3
 801a79e:	460b      	mov	r3, r1
 801a7a0:	cb03      	ldmia	r3!, {r0, r1}
 801a7a2:	6010      	str	r0, [r2, #0]
 801a7a4:	6051      	str	r1, [r2, #4]
			strcpy(p->grade,"7A+");
 801a7a6:	687b      	ldr	r3, [r7, #4]
 801a7a8:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801a7ac:	4abc      	ldr	r2, [pc, #752]	; (801aaa0 <problem_fetch+0x1943c>)
 801a7ae:	6810      	ldr	r0, [r2, #0]
 801a7b0:	6018      	str	r0, [r3, #0]
			p->moveSize = 5;
 801a7b2:	687b      	ldr	r3, [r7, #4]
 801a7b4:	2205      	movs	r2, #5
 801a7b6:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"E,E,H,G,I");
 801a7b8:	687b      	ldr	r3, [r7, #4]
 801a7ba:	33a4      	adds	r3, #164	; 0xa4
 801a7bc:	49b9      	ldr	r1, [pc, #740]	; (801aaa4 <problem_fetch+0x19440>)
 801a7be:	461a      	mov	r2, r3
 801a7c0:	460b      	mov	r3, r1
 801a7c2:	cb03      	ldmia	r3!, {r0, r1}
 801a7c4:	6010      	str	r0, [r2, #0]
 801a7c6:	6051      	str	r1, [r2, #4]
 801a7c8:	881b      	ldrh	r3, [r3, #0]
 801a7ca:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"6,8,8,14,18");
 801a7cc:	687b      	ldr	r3, [r7, #4]
 801a7ce:	3304      	adds	r3, #4
 801a7d0:	4ab5      	ldr	r2, [pc, #724]	; (801aaa8 <problem_fetch+0x19444>)
 801a7d2:	461c      	mov	r4, r3
 801a7d4:	4613      	mov	r3, r2
 801a7d6:	cb07      	ldmia	r3!, {r0, r1, r2}
 801a7d8:	6020      	str	r0, [r4, #0]
 801a7da:	6061      	str	r1, [r4, #4]
 801a7dc:	60a2      	str	r2, [r4, #8]
			strcpy(p->startFinish,"s,d,d,d,e");
 801a7de:	687b      	ldr	r3, [r7, #4]
 801a7e0:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 801a7e4:	49b1      	ldr	r1, [pc, #708]	; (801aaac <problem_fetch+0x19448>)
 801a7e6:	461a      	mov	r2, r3
 801a7e8:	460b      	mov	r3, r1
 801a7ea:	cb03      	ldmia	r3!, {r0, r1}
 801a7ec:	6010      	str	r0, [r2, #0]
 801a7ee:	6051      	str	r1, [r2, #4]
 801a7f0:	881b      	ldrh	r3, [r3, #0]
 801a7f2:	8113      	strh	r3, [r2, #8]
			break;
 801a7f4:	f001 be66 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 751 :
			strcpy(p->name,"SMOKING AREA");
 801a7f8:	687b      	ldr	r3, [r7, #4]
 801a7fa:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801a7fe:	4aac      	ldr	r2, [pc, #688]	; (801aab0 <problem_fetch+0x1944c>)
 801a800:	461c      	mov	r4, r3
 801a802:	4613      	mov	r3, r2
 801a804:	cb07      	ldmia	r3!, {r0, r1, r2}
 801a806:	6020      	str	r0, [r4, #0]
 801a808:	6061      	str	r1, [r4, #4]
 801a80a:	60a2      	str	r2, [r4, #8]
 801a80c:	781b      	ldrb	r3, [r3, #0]
 801a80e:	7323      	strb	r3, [r4, #12]
			strcpy(p->grade,"6C");
 801a810:	687b      	ldr	r3, [r7, #4]
 801a812:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801a816:	4aa7      	ldr	r2, [pc, #668]	; (801aab4 <problem_fetch+0x19450>)
 801a818:	8811      	ldrh	r1, [r2, #0]
 801a81a:	7892      	ldrb	r2, [r2, #2]
 801a81c:	8019      	strh	r1, [r3, #0]
 801a81e:	709a      	strb	r2, [r3, #2]
			p->moveSize = 6;
 801a820:	687b      	ldr	r3, [r7, #4]
 801a822:	2206      	movs	r2, #6
 801a824:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,H,C,E,E,I");
 801a826:	687b      	ldr	r3, [r7, #4]
 801a828:	33a4      	adds	r3, #164	; 0xa4
 801a82a:	4aa3      	ldr	r2, [pc, #652]	; (801aab8 <problem_fetch+0x19454>)
 801a82c:	461c      	mov	r4, r3
 801a82e:	4613      	mov	r3, r2
 801a830:	cb07      	ldmia	r3!, {r0, r1, r2}
 801a832:	6020      	str	r0, [r4, #0]
 801a834:	6061      	str	r1, [r4, #4]
 801a836:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,8,8,12,16,18");
 801a838:	687b      	ldr	r3, [r7, #4]
 801a83a:	3304      	adds	r3, #4
 801a83c:	4a9f      	ldr	r2, [pc, #636]	; (801aabc <problem_fetch+0x19458>)
 801a83e:	461c      	mov	r4, r3
 801a840:	4613      	mov	r3, r2
 801a842:	cb07      	ldmia	r3!, {r0, r1, r2}
 801a844:	6020      	str	r0, [r4, #0]
 801a846:	6061      	str	r1, [r4, #4]
 801a848:	60a2      	str	r2, [r4, #8]
 801a84a:	881a      	ldrh	r2, [r3, #0]
 801a84c:	789b      	ldrb	r3, [r3, #2]
 801a84e:	81a2      	strh	r2, [r4, #12]
 801a850:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 801a852:	687b      	ldr	r3, [r7, #4]
 801a854:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 801a858:	4a99      	ldr	r2, [pc, #612]	; (801aac0 <problem_fetch+0x1945c>)
 801a85a:	461c      	mov	r4, r3
 801a85c:	4613      	mov	r3, r2
 801a85e:	cb07      	ldmia	r3!, {r0, r1, r2}
 801a860:	6020      	str	r0, [r4, #0]
 801a862:	6061      	str	r1, [r4, #4]
 801a864:	60a2      	str	r2, [r4, #8]
			break;
 801a866:	f001 be2d 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 752 :
			strcpy(p->name,"BOGLI FOR PRESIDENT");
 801a86a:	687b      	ldr	r3, [r7, #4]
 801a86c:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801a870:	4a94      	ldr	r2, [pc, #592]	; (801aac4 <problem_fetch+0x19460>)
 801a872:	461d      	mov	r5, r3
 801a874:	4614      	mov	r4, r2
 801a876:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801a878:	6028      	str	r0, [r5, #0]
 801a87a:	6069      	str	r1, [r5, #4]
 801a87c:	60aa      	str	r2, [r5, #8]
 801a87e:	60eb      	str	r3, [r5, #12]
 801a880:	6820      	ldr	r0, [r4, #0]
 801a882:	6128      	str	r0, [r5, #16]
			strcpy(p->grade,"7A+");
 801a884:	687b      	ldr	r3, [r7, #4]
 801a886:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801a88a:	4a85      	ldr	r2, [pc, #532]	; (801aaa0 <problem_fetch+0x1943c>)
 801a88c:	6810      	ldr	r0, [r2, #0]
 801a88e:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 801a890:	687b      	ldr	r3, [r7, #4]
 801a892:	2207      	movs	r2, #7
 801a894:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,J,I,D,D,A,A");
 801a896:	687b      	ldr	r3, [r7, #4]
 801a898:	33a4      	adds	r3, #164	; 0xa4
 801a89a:	4a8b      	ldr	r2, [pc, #556]	; (801aac8 <problem_fetch+0x19464>)
 801a89c:	461c      	mov	r4, r3
 801a89e:	4613      	mov	r3, r2
 801a8a0:	cb07      	ldmia	r3!, {r0, r1, r2}
 801a8a2:	6020      	str	r0, [r4, #0]
 801a8a4:	6061      	str	r1, [r4, #4]
 801a8a6:	60a2      	str	r2, [r4, #8]
 801a8a8:	881b      	ldrh	r3, [r3, #0]
 801a8aa:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"6,5,9,11,15,14,18");
 801a8ac:	687b      	ldr	r3, [r7, #4]
 801a8ae:	3304      	adds	r3, #4
 801a8b0:	4a86      	ldr	r2, [pc, #536]	; (801aacc <problem_fetch+0x19468>)
 801a8b2:	461d      	mov	r5, r3
 801a8b4:	4614      	mov	r4, r2
 801a8b6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801a8b8:	6028      	str	r0, [r5, #0]
 801a8ba:	6069      	str	r1, [r5, #4]
 801a8bc:	60aa      	str	r2, [r5, #8]
 801a8be:	60eb      	str	r3, [r5, #12]
 801a8c0:	8823      	ldrh	r3, [r4, #0]
 801a8c2:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,s,d,d,d,d,e");
 801a8c4:	687b      	ldr	r3, [r7, #4]
 801a8c6:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 801a8ca:	4a81      	ldr	r2, [pc, #516]	; (801aad0 <problem_fetch+0x1946c>)
 801a8cc:	461c      	mov	r4, r3
 801a8ce:	4613      	mov	r3, r2
 801a8d0:	cb07      	ldmia	r3!, {r0, r1, r2}
 801a8d2:	6020      	str	r0, [r4, #0]
 801a8d4:	6061      	str	r1, [r4, #4]
 801a8d6:	60a2      	str	r2, [r4, #8]
 801a8d8:	881b      	ldrh	r3, [r3, #0]
 801a8da:	81a3      	strh	r3, [r4, #12]
			break;
 801a8dc:	f001 bdf2 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 753 :
			strcpy(p->name,"DU SPICCI");
 801a8e0:	687b      	ldr	r3, [r7, #4]
 801a8e2:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801a8e6:	497b      	ldr	r1, [pc, #492]	; (801aad4 <problem_fetch+0x19470>)
 801a8e8:	461a      	mov	r2, r3
 801a8ea:	460b      	mov	r3, r1
 801a8ec:	cb03      	ldmia	r3!, {r0, r1}
 801a8ee:	6010      	str	r0, [r2, #0]
 801a8f0:	6051      	str	r1, [r2, #4]
 801a8f2:	881b      	ldrh	r3, [r3, #0]
 801a8f4:	8113      	strh	r3, [r2, #8]
			strcpy(p->grade,"6C+");
 801a8f6:	687b      	ldr	r3, [r7, #4]
 801a8f8:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801a8fc:	4a76      	ldr	r2, [pc, #472]	; (801aad8 <problem_fetch+0x19474>)
 801a8fe:	6810      	ldr	r0, [r2, #0]
 801a900:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 801a902:	687b      	ldr	r3, [r7, #4]
 801a904:	2206      	movs	r2, #6
 801a906:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"E,J,I,D,E,D");
 801a908:	687b      	ldr	r3, [r7, #4]
 801a90a:	33a4      	adds	r3, #164	; 0xa4
 801a90c:	4a73      	ldr	r2, [pc, #460]	; (801aadc <problem_fetch+0x19478>)
 801a90e:	461c      	mov	r4, r3
 801a910:	4613      	mov	r3, r2
 801a912:	cb07      	ldmia	r3!, {r0, r1, r2}
 801a914:	6020      	str	r0, [r4, #0]
 801a916:	6061      	str	r1, [r4, #4]
 801a918:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"6,5,10,11,14,18");
 801a91a:	687b      	ldr	r3, [r7, #4]
 801a91c:	3304      	adds	r3, #4
 801a91e:	4a70      	ldr	r2, [pc, #448]	; (801aae0 <problem_fetch+0x1947c>)
 801a920:	461c      	mov	r4, r3
 801a922:	4615      	mov	r5, r2
 801a924:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801a926:	6020      	str	r0, [r4, #0]
 801a928:	6061      	str	r1, [r4, #4]
 801a92a:	60a2      	str	r2, [r4, #8]
 801a92c:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,s,d,d,d,e");
 801a92e:	687b      	ldr	r3, [r7, #4]
 801a930:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 801a934:	4a6b      	ldr	r2, [pc, #428]	; (801aae4 <problem_fetch+0x19480>)
 801a936:	461c      	mov	r4, r3
 801a938:	4613      	mov	r3, r2
 801a93a:	cb07      	ldmia	r3!, {r0, r1, r2}
 801a93c:	6020      	str	r0, [r4, #0]
 801a93e:	6061      	str	r1, [r4, #4]
 801a940:	60a2      	str	r2, [r4, #8]
			break;
 801a942:	f001 bdbf 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 754 :
			strcpy(p->name,"CALLA");
 801a946:	687b      	ldr	r3, [r7, #4]
 801a948:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801a94c:	4a66      	ldr	r2, [pc, #408]	; (801aae8 <problem_fetch+0x19484>)
 801a94e:	6810      	ldr	r0, [r2, #0]
 801a950:	6018      	str	r0, [r3, #0]
 801a952:	8892      	ldrh	r2, [r2, #4]
 801a954:	809a      	strh	r2, [r3, #4]
			strcpy(p->grade,"6B+");
 801a956:	687b      	ldr	r3, [r7, #4]
 801a958:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801a95c:	4a63      	ldr	r2, [pc, #396]	; (801aaec <problem_fetch+0x19488>)
 801a95e:	6810      	ldr	r0, [r2, #0]
 801a960:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 801a962:	687b      	ldr	r3, [r7, #4]
 801a964:	2207      	movs	r2, #7
 801a966:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,E,H,F,G,E,I");
 801a968:	687b      	ldr	r3, [r7, #4]
 801a96a:	33a4      	adds	r3, #164	; 0xa4
 801a96c:	4a60      	ldr	r2, [pc, #384]	; (801aaf0 <problem_fetch+0x1948c>)
 801a96e:	461c      	mov	r4, r3
 801a970:	4613      	mov	r3, r2
 801a972:	cb07      	ldmia	r3!, {r0, r1, r2}
 801a974:	6020      	str	r0, [r4, #0]
 801a976:	6061      	str	r1, [r4, #4]
 801a978:	60a2      	str	r2, [r4, #8]
 801a97a:	881b      	ldrh	r3, [r3, #0]
 801a97c:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,8,10,13,14,16,18");
 801a97e:	687b      	ldr	r3, [r7, #4]
 801a980:	3304      	adds	r3, #4
 801a982:	4a5c      	ldr	r2, [pc, #368]	; (801aaf4 <problem_fetch+0x19490>)
 801a984:	461d      	mov	r5, r3
 801a986:	4614      	mov	r4, r2
 801a988:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801a98a:	6028      	str	r0, [r5, #0]
 801a98c:	6069      	str	r1, [r5, #4]
 801a98e:	60aa      	str	r2, [r5, #8]
 801a990:	60eb      	str	r3, [r5, #12]
 801a992:	8823      	ldrh	r3, [r4, #0]
 801a994:	78a2      	ldrb	r2, [r4, #2]
 801a996:	822b      	strh	r3, [r5, #16]
 801a998:	4613      	mov	r3, r2
 801a99a:	74ab      	strb	r3, [r5, #18]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 801a99c:	687b      	ldr	r3, [r7, #4]
 801a99e:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 801a9a2:	4a55      	ldr	r2, [pc, #340]	; (801aaf8 <problem_fetch+0x19494>)
 801a9a4:	461c      	mov	r4, r3
 801a9a6:	4613      	mov	r3, r2
 801a9a8:	cb07      	ldmia	r3!, {r0, r1, r2}
 801a9aa:	6020      	str	r0, [r4, #0]
 801a9ac:	6061      	str	r1, [r4, #4]
 801a9ae:	60a2      	str	r2, [r4, #8]
 801a9b0:	881b      	ldrh	r3, [r3, #0]
 801a9b2:	81a3      	strh	r3, [r4, #12]
			break;
 801a9b4:	f001 bd86 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 755 :
			strcpy(p->name,"FA");
 801a9b8:	687b      	ldr	r3, [r7, #4]
 801a9ba:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801a9be:	4a4f      	ldr	r2, [pc, #316]	; (801aafc <problem_fetch+0x19498>)
 801a9c0:	8811      	ldrh	r1, [r2, #0]
 801a9c2:	7892      	ldrb	r2, [r2, #2]
 801a9c4:	8019      	strh	r1, [r3, #0]
 801a9c6:	709a      	strb	r2, [r3, #2]
			strcpy(p->grade,"6B+");
 801a9c8:	687b      	ldr	r3, [r7, #4]
 801a9ca:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801a9ce:	4a47      	ldr	r2, [pc, #284]	; (801aaec <problem_fetch+0x19488>)
 801a9d0:	6810      	ldr	r0, [r2, #0]
 801a9d2:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 801a9d4:	687b      	ldr	r3, [r7, #4]
 801a9d6:	2206      	movs	r2, #6
 801a9d8:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,E,E,H,E,D");
 801a9da:	687b      	ldr	r3, [r7, #4]
 801a9dc:	33a4      	adds	r3, #164	; 0xa4
 801a9de:	4a48      	ldr	r2, [pc, #288]	; (801ab00 <problem_fetch+0x1949c>)
 801a9e0:	461c      	mov	r4, r3
 801a9e2:	4613      	mov	r3, r2
 801a9e4:	cb07      	ldmia	r3!, {r0, r1, r2}
 801a9e6:	6020      	str	r0, [r4, #0]
 801a9e8:	6061      	str	r1, [r4, #4]
 801a9ea:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,8,9,13,16,18");
 801a9ec:	687b      	ldr	r3, [r7, #4]
 801a9ee:	3304      	adds	r3, #4
 801a9f0:	4a44      	ldr	r2, [pc, #272]	; (801ab04 <problem_fetch+0x194a0>)
 801a9f2:	461c      	mov	r4, r3
 801a9f4:	4613      	mov	r3, r2
 801a9f6:	cb07      	ldmia	r3!, {r0, r1, r2}
 801a9f8:	6020      	str	r0, [r4, #0]
 801a9fa:	6061      	str	r1, [r4, #4]
 801a9fc:	60a2      	str	r2, [r4, #8]
 801a9fe:	881a      	ldrh	r2, [r3, #0]
 801aa00:	789b      	ldrb	r3, [r3, #2]
 801aa02:	81a2      	strh	r2, [r4, #12]
 801aa04:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 801aa06:	687b      	ldr	r3, [r7, #4]
 801aa08:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 801aa0c:	4a2c      	ldr	r2, [pc, #176]	; (801aac0 <problem_fetch+0x1945c>)
 801aa0e:	461c      	mov	r4, r3
 801aa10:	4613      	mov	r3, r2
 801aa12:	cb07      	ldmia	r3!, {r0, r1, r2}
 801aa14:	6020      	str	r0, [r4, #0]
 801aa16:	6061      	str	r1, [r4, #4]
 801aa18:	60a2      	str	r2, [r4, #8]
			break;
 801aa1a:	f001 bd53 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 756 :
			strcpy(p->name,"BLACK HOLE");
 801aa1e:	687b      	ldr	r3, [r7, #4]
 801aa20:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801aa24:	4938      	ldr	r1, [pc, #224]	; (801ab08 <problem_fetch+0x194a4>)
 801aa26:	461a      	mov	r2, r3
 801aa28:	460b      	mov	r3, r1
 801aa2a:	cb03      	ldmia	r3!, {r0, r1}
 801aa2c:	6010      	str	r0, [r2, #0]
 801aa2e:	6051      	str	r1, [r2, #4]
 801aa30:	8819      	ldrh	r1, [r3, #0]
 801aa32:	789b      	ldrb	r3, [r3, #2]
 801aa34:	8111      	strh	r1, [r2, #8]
 801aa36:	7293      	strb	r3, [r2, #10]
			strcpy(p->grade,"6B+");
 801aa38:	687b      	ldr	r3, [r7, #4]
 801aa3a:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801aa3e:	4a2b      	ldr	r2, [pc, #172]	; (801aaec <problem_fetch+0x19488>)
 801aa40:	6810      	ldr	r0, [r2, #0]
 801aa42:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 801aa44:	687b      	ldr	r3, [r7, #4]
 801aa46:	2207      	movs	r2, #7
 801aa48:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,J,I,J,G,G,D");
 801aa4a:	687b      	ldr	r3, [r7, #4]
 801aa4c:	33a4      	adds	r3, #164	; 0xa4
 801aa4e:	4a2f      	ldr	r2, [pc, #188]	; (801ab0c <problem_fetch+0x194a8>)
 801aa50:	461c      	mov	r4, r3
 801aa52:	4613      	mov	r3, r2
 801aa54:	cb07      	ldmia	r3!, {r0, r1, r2}
 801aa56:	6020      	str	r0, [r4, #0]
 801aa58:	6061      	str	r1, [r4, #4]
 801aa5a:	60a2      	str	r2, [r4, #8]
 801aa5c:	881b      	ldrh	r3, [r3, #0]
 801aa5e:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,7,10,13,15,17,18");
 801aa60:	687b      	ldr	r3, [r7, #4]
 801aa62:	3304      	adds	r3, #4
 801aa64:	4a2a      	ldr	r2, [pc, #168]	; (801ab10 <problem_fetch+0x194ac>)
 801aa66:	461d      	mov	r5, r3
 801aa68:	4614      	mov	r4, r2
 801aa6a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801aa6c:	6028      	str	r0, [r5, #0]
 801aa6e:	6069      	str	r1, [r5, #4]
 801aa70:	60aa      	str	r2, [r5, #8]
 801aa72:	60eb      	str	r3, [r5, #12]
 801aa74:	8823      	ldrh	r3, [r4, #0]
 801aa76:	78a2      	ldrb	r2, [r4, #2]
 801aa78:	822b      	strh	r3, [r5, #16]
 801aa7a:	4613      	mov	r3, r2
 801aa7c:	74ab      	strb	r3, [r5, #18]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 801aa7e:	687b      	ldr	r3, [r7, #4]
 801aa80:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 801aa84:	4a1c      	ldr	r2, [pc, #112]	; (801aaf8 <problem_fetch+0x19494>)
 801aa86:	461c      	mov	r4, r3
 801aa88:	4613      	mov	r3, r2
 801aa8a:	cb07      	ldmia	r3!, {r0, r1, r2}
 801aa8c:	6020      	str	r0, [r4, #0]
 801aa8e:	6061      	str	r1, [r4, #4]
 801aa90:	60a2      	str	r2, [r4, #8]
 801aa92:	881b      	ldrh	r3, [r3, #0]
 801aa94:	81a3      	strh	r3, [r4, #12]
			break;
 801aa96:	f001 bd15 	b.w	801c4c4 <problem_fetch+0x1ae60>
 801aa9a:	bf00      	nop
 801aa9c:	0802c798 	.word	0x0802c798
 801aaa0:	08023cc4 	.word	0x08023cc4
 801aaa4:	0802c7a0 	.word	0x0802c7a0
 801aaa8:	0802c7ac 	.word	0x0802c7ac
 801aaac:	08023ff0 	.word	0x08023ff0
 801aab0:	0802c7b8 	.word	0x0802c7b8
 801aab4:	08023bf0 	.word	0x08023bf0
 801aab8:	0802c7c8 	.word	0x0802c7c8
 801aabc:	0802c7d4 	.word	0x0802c7d4
 801aac0:	08023ec0 	.word	0x08023ec0
 801aac4:	0802c7e4 	.word	0x0802c7e4
 801aac8:	0802c7f8 	.word	0x0802c7f8
 801aacc:	0802c808 	.word	0x0802c808
 801aad0:	08023b9c 	.word	0x08023b9c
 801aad4:	0802c81c 	.word	0x0802c81c
 801aad8:	08023bbc 	.word	0x08023bbc
 801aadc:	0802c828 	.word	0x0802c828
 801aae0:	0802c834 	.word	0x0802c834
 801aae4:	08023b04 	.word	0x08023b04
 801aae8:	0802c844 	.word	0x0802c844
 801aaec:	08023b24 	.word	0x08023b24
 801aaf0:	0802c84c 	.word	0x0802c84c
 801aaf4:	08029c98 	.word	0x08029c98
 801aaf8:	08023cac 	.word	0x08023cac
 801aafc:	0802c85c 	.word	0x0802c85c
 801ab00:	0802c860 	.word	0x0802c860
 801ab04:	080285c4 	.word	0x080285c4
 801ab08:	0802c86c 	.word	0x0802c86c
 801ab0c:	0802c878 	.word	0x0802c878
 801ab10:	0802c888 	.word	0x0802c888
		case 757 :
			strcpy(p->name,"MATCH GAME");
 801ab14:	687b      	ldr	r3, [r7, #4]
 801ab16:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801ab1a:	49ad      	ldr	r1, [pc, #692]	; (801add0 <problem_fetch+0x1976c>)
 801ab1c:	461a      	mov	r2, r3
 801ab1e:	460b      	mov	r3, r1
 801ab20:	cb03      	ldmia	r3!, {r0, r1}
 801ab22:	6010      	str	r0, [r2, #0]
 801ab24:	6051      	str	r1, [r2, #4]
 801ab26:	8819      	ldrh	r1, [r3, #0]
 801ab28:	789b      	ldrb	r3, [r3, #2]
 801ab2a:	8111      	strh	r1, [r2, #8]
 801ab2c:	7293      	strb	r3, [r2, #10]
			strcpy(p->grade,"6B+");
 801ab2e:	687b      	ldr	r3, [r7, #4]
 801ab30:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801ab34:	4aa7      	ldr	r2, [pc, #668]	; (801add4 <problem_fetch+0x19770>)
 801ab36:	6810      	ldr	r0, [r2, #0]
 801ab38:	6018      	str	r0, [r3, #0]
			p->moveSize = 5;
 801ab3a:	687b      	ldr	r3, [r7, #4]
 801ab3c:	2205      	movs	r2, #5
 801ab3e:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,G,I,G,I");
 801ab40:	687b      	ldr	r3, [r7, #4]
 801ab42:	33a4      	adds	r3, #164	; 0xa4
 801ab44:	49a4      	ldr	r1, [pc, #656]	; (801add8 <problem_fetch+0x19774>)
 801ab46:	461a      	mov	r2, r3
 801ab48:	460b      	mov	r3, r1
 801ab4a:	cb03      	ldmia	r3!, {r0, r1}
 801ab4c:	6010      	str	r0, [r2, #0]
 801ab4e:	6051      	str	r1, [r2, #4]
 801ab50:	881b      	ldrh	r3, [r3, #0]
 801ab52:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"4,6,10,14,18");
 801ab54:	687b      	ldr	r3, [r7, #4]
 801ab56:	3304      	adds	r3, #4
 801ab58:	4aa0      	ldr	r2, [pc, #640]	; (801addc <problem_fetch+0x19778>)
 801ab5a:	461c      	mov	r4, r3
 801ab5c:	4613      	mov	r3, r2
 801ab5e:	cb07      	ldmia	r3!, {r0, r1, r2}
 801ab60:	6020      	str	r0, [r4, #0]
 801ab62:	6061      	str	r1, [r4, #4]
 801ab64:	60a2      	str	r2, [r4, #8]
 801ab66:	781b      	ldrb	r3, [r3, #0]
 801ab68:	7323      	strb	r3, [r4, #12]
			strcpy(p->startFinish,"s,s,d,d,e");
 801ab6a:	687b      	ldr	r3, [r7, #4]
 801ab6c:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 801ab70:	499b      	ldr	r1, [pc, #620]	; (801ade0 <problem_fetch+0x1977c>)
 801ab72:	461a      	mov	r2, r3
 801ab74:	460b      	mov	r3, r1
 801ab76:	cb03      	ldmia	r3!, {r0, r1}
 801ab78:	6010      	str	r0, [r2, #0]
 801ab7a:	6051      	str	r1, [r2, #4]
 801ab7c:	881b      	ldrh	r3, [r3, #0]
 801ab7e:	8113      	strh	r3, [r2, #8]
			break;
 801ab80:	f001 bca0 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 758 :
			strcpy(p->name,"USE THE BIG ONES");
 801ab84:	687b      	ldr	r3, [r7, #4]
 801ab86:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801ab8a:	4a96      	ldr	r2, [pc, #600]	; (801ade4 <problem_fetch+0x19780>)
 801ab8c:	461d      	mov	r5, r3
 801ab8e:	4614      	mov	r4, r2
 801ab90:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801ab92:	6028      	str	r0, [r5, #0]
 801ab94:	6069      	str	r1, [r5, #4]
 801ab96:	60aa      	str	r2, [r5, #8]
 801ab98:	60eb      	str	r3, [r5, #12]
 801ab9a:	7823      	ldrb	r3, [r4, #0]
 801ab9c:	742b      	strb	r3, [r5, #16]
			strcpy(p->grade,"6B+");
 801ab9e:	687b      	ldr	r3, [r7, #4]
 801aba0:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801aba4:	4a8b      	ldr	r2, [pc, #556]	; (801add4 <problem_fetch+0x19770>)
 801aba6:	6810      	ldr	r0, [r2, #0]
 801aba8:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 801abaa:	687b      	ldr	r3, [r7, #4]
 801abac:	2207      	movs	r2, #7
 801abae:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,E,G,F,C,D,A");
 801abb0:	687b      	ldr	r3, [r7, #4]
 801abb2:	33a4      	adds	r3, #164	; 0xa4
 801abb4:	4a8c      	ldr	r2, [pc, #560]	; (801ade8 <problem_fetch+0x19784>)
 801abb6:	461c      	mov	r4, r3
 801abb8:	4613      	mov	r3, r2
 801abba:	cb07      	ldmia	r3!, {r0, r1, r2}
 801abbc:	6020      	str	r0, [r4, #0]
 801abbe:	6061      	str	r1, [r4, #4]
 801abc0:	60a2      	str	r2, [r4, #8]
 801abc2:	881b      	ldrh	r3, [r3, #0]
 801abc4:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,8,9,11,13,15,18");
 801abc6:	687b      	ldr	r3, [r7, #4]
 801abc8:	3304      	adds	r3, #4
 801abca:	4a88      	ldr	r2, [pc, #544]	; (801adec <problem_fetch+0x19788>)
 801abcc:	461d      	mov	r5, r3
 801abce:	4614      	mov	r4, r2
 801abd0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801abd2:	6028      	str	r0, [r5, #0]
 801abd4:	6069      	str	r1, [r5, #4]
 801abd6:	60aa      	str	r2, [r5, #8]
 801abd8:	60eb      	str	r3, [r5, #12]
 801abda:	8823      	ldrh	r3, [r4, #0]
 801abdc:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 801abde:	687b      	ldr	r3, [r7, #4]
 801abe0:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 801abe4:	4a82      	ldr	r2, [pc, #520]	; (801adf0 <problem_fetch+0x1978c>)
 801abe6:	461c      	mov	r4, r3
 801abe8:	4613      	mov	r3, r2
 801abea:	cb07      	ldmia	r3!, {r0, r1, r2}
 801abec:	6020      	str	r0, [r4, #0]
 801abee:	6061      	str	r1, [r4, #4]
 801abf0:	60a2      	str	r2, [r4, #8]
 801abf2:	881b      	ldrh	r3, [r3, #0]
 801abf4:	81a3      	strh	r3, [r4, #12]
			break;
 801abf6:	f001 bc65 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 759 :
			strcpy(p->name,"KANG MINA IOI");
 801abfa:	687b      	ldr	r3, [r7, #4]
 801abfc:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801ac00:	4a7c      	ldr	r2, [pc, #496]	; (801adf4 <problem_fetch+0x19790>)
 801ac02:	461c      	mov	r4, r3
 801ac04:	4613      	mov	r3, r2
 801ac06:	cb07      	ldmia	r3!, {r0, r1, r2}
 801ac08:	6020      	str	r0, [r4, #0]
 801ac0a:	6061      	str	r1, [r4, #4]
 801ac0c:	60a2      	str	r2, [r4, #8]
 801ac0e:	881b      	ldrh	r3, [r3, #0]
 801ac10:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade,"7A");
 801ac12:	687b      	ldr	r3, [r7, #4]
 801ac14:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801ac18:	4a77      	ldr	r2, [pc, #476]	; (801adf8 <problem_fetch+0x19794>)
 801ac1a:	8811      	ldrh	r1, [r2, #0]
 801ac1c:	7892      	ldrb	r2, [r2, #2]
 801ac1e:	8019      	strh	r1, [r3, #0]
 801ac20:	709a      	strb	r2, [r3, #2]
			p->moveSize = 8;
 801ac22:	687b      	ldr	r3, [r7, #4]
 801ac24:	2208      	movs	r2, #8
 801ac26:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"E,E,B,B,A,D,E,I");
 801ac28:	687b      	ldr	r3, [r7, #4]
 801ac2a:	33a4      	adds	r3, #164	; 0xa4
 801ac2c:	4a73      	ldr	r2, [pc, #460]	; (801adfc <problem_fetch+0x19798>)
 801ac2e:	461c      	mov	r4, r3
 801ac30:	4615      	mov	r5, r2
 801ac32:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801ac34:	6020      	str	r0, [r4, #0]
 801ac36:	6061      	str	r1, [r4, #4]
 801ac38:	60a2      	str	r2, [r4, #8]
 801ac3a:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"6,9,10,12,14,15,16,18");
 801ac3c:	687b      	ldr	r3, [r7, #4]
 801ac3e:	3304      	adds	r3, #4
 801ac40:	4a6f      	ldr	r2, [pc, #444]	; (801ae00 <problem_fetch+0x1979c>)
 801ac42:	461d      	mov	r5, r3
 801ac44:	4614      	mov	r4, r2
 801ac46:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801ac48:	6028      	str	r0, [r5, #0]
 801ac4a:	6069      	str	r1, [r5, #4]
 801ac4c:	60aa      	str	r2, [r5, #8]
 801ac4e:	60eb      	str	r3, [r5, #12]
 801ac50:	6820      	ldr	r0, [r4, #0]
 801ac52:	6128      	str	r0, [r5, #16]
 801ac54:	88a3      	ldrh	r3, [r4, #4]
 801ac56:	82ab      	strh	r3, [r5, #20]
			strcpy(p->startFinish,"s,d,d,d,d,d,d,e");
 801ac58:	687b      	ldr	r3, [r7, #4]
 801ac5a:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 801ac5e:	4a69      	ldr	r2, [pc, #420]	; (801ae04 <problem_fetch+0x197a0>)
 801ac60:	461c      	mov	r4, r3
 801ac62:	4615      	mov	r5, r2
 801ac64:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801ac66:	6020      	str	r0, [r4, #0]
 801ac68:	6061      	str	r1, [r4, #4]
 801ac6a:	60a2      	str	r2, [r4, #8]
 801ac6c:	60e3      	str	r3, [r4, #12]
			break;
 801ac6e:	f001 bc29 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 760 :
			strcpy(p->name,"ACG21");
 801ac72:	687b      	ldr	r3, [r7, #4]
 801ac74:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801ac78:	4a63      	ldr	r2, [pc, #396]	; (801ae08 <problem_fetch+0x197a4>)
 801ac7a:	6810      	ldr	r0, [r2, #0]
 801ac7c:	6018      	str	r0, [r3, #0]
 801ac7e:	8892      	ldrh	r2, [r2, #4]
 801ac80:	809a      	strh	r2, [r3, #4]
			strcpy(p->grade,"7B");
 801ac82:	687b      	ldr	r3, [r7, #4]
 801ac84:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801ac88:	4a60      	ldr	r2, [pc, #384]	; (801ae0c <problem_fetch+0x197a8>)
 801ac8a:	8811      	ldrh	r1, [r2, #0]
 801ac8c:	7892      	ldrb	r2, [r2, #2]
 801ac8e:	8019      	strh	r1, [r3, #0]
 801ac90:	709a      	strb	r2, [r3, #2]
			p->moveSize = 8;
 801ac92:	687b      	ldr	r3, [r7, #4]
 801ac94:	2208      	movs	r2, #8
 801ac96:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,E,I,G,B,E,C,A");
 801ac98:	687b      	ldr	r3, [r7, #4]
 801ac9a:	33a4      	adds	r3, #164	; 0xa4
 801ac9c:	4a5c      	ldr	r2, [pc, #368]	; (801ae10 <problem_fetch+0x197ac>)
 801ac9e:	461c      	mov	r4, r3
 801aca0:	4615      	mov	r5, r2
 801aca2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801aca4:	6020      	str	r0, [r4, #0]
 801aca6:	6061      	str	r1, [r4, #4]
 801aca8:	60a2      	str	r2, [r4, #8]
 801acaa:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,6,10,10,10,14,16,18");
 801acac:	687b      	ldr	r3, [r7, #4]
 801acae:	3304      	adds	r3, #4
 801acb0:	4a58      	ldr	r2, [pc, #352]	; (801ae14 <problem_fetch+0x197b0>)
 801acb2:	461d      	mov	r5, r3
 801acb4:	4614      	mov	r4, r2
 801acb6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801acb8:	6028      	str	r0, [r5, #0]
 801acba:	6069      	str	r1, [r5, #4]
 801acbc:	60aa      	str	r2, [r5, #8]
 801acbe:	60eb      	str	r3, [r5, #12]
 801acc0:	6820      	ldr	r0, [r4, #0]
 801acc2:	6128      	str	r0, [r5, #16]
 801acc4:	88a3      	ldrh	r3, [r4, #4]
 801acc6:	82ab      	strh	r3, [r5, #20]
			strcpy(p->startFinish,"s,d,d,d,d,d,d,e");
 801acc8:	687b      	ldr	r3, [r7, #4]
 801acca:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 801acce:	4a4d      	ldr	r2, [pc, #308]	; (801ae04 <problem_fetch+0x197a0>)
 801acd0:	461c      	mov	r4, r3
 801acd2:	4615      	mov	r5, r2
 801acd4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801acd6:	6020      	str	r0, [r4, #0]
 801acd8:	6061      	str	r1, [r4, #4]
 801acda:	60a2      	str	r2, [r4, #8]
 801acdc:	60e3      	str	r3, [r4, #12]
			break;
 801acde:	f001 bbf1 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 761 :
			strcpy(p->name,"LANKY BASTARD");
 801ace2:	687b      	ldr	r3, [r7, #4]
 801ace4:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801ace8:	4a4b      	ldr	r2, [pc, #300]	; (801ae18 <problem_fetch+0x197b4>)
 801acea:	461c      	mov	r4, r3
 801acec:	4613      	mov	r3, r2
 801acee:	cb07      	ldmia	r3!, {r0, r1, r2}
 801acf0:	6020      	str	r0, [r4, #0]
 801acf2:	6061      	str	r1, [r4, #4]
 801acf4:	60a2      	str	r2, [r4, #8]
 801acf6:	881b      	ldrh	r3, [r3, #0]
 801acf8:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade,"6C");
 801acfa:	687b      	ldr	r3, [r7, #4]
 801acfc:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801ad00:	4a46      	ldr	r2, [pc, #280]	; (801ae1c <problem_fetch+0x197b8>)
 801ad02:	8811      	ldrh	r1, [r2, #0]
 801ad04:	7892      	ldrb	r2, [r2, #2]
 801ad06:	8019      	strh	r1, [r3, #0]
 801ad08:	709a      	strb	r2, [r3, #2]
			p->moveSize = 7;
 801ad0a:	687b      	ldr	r3, [r7, #4]
 801ad0c:	2207      	movs	r2, #7
 801ad0e:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,E,I,H,K,E,D");
 801ad10:	687b      	ldr	r3, [r7, #4]
 801ad12:	33a4      	adds	r3, #164	; 0xa4
 801ad14:	4a42      	ldr	r2, [pc, #264]	; (801ae20 <problem_fetch+0x197bc>)
 801ad16:	461c      	mov	r4, r3
 801ad18:	4613      	mov	r3, r2
 801ad1a:	cb07      	ldmia	r3!, {r0, r1, r2}
 801ad1c:	6020      	str	r0, [r4, #0]
 801ad1e:	6061      	str	r1, [r4, #4]
 801ad20:	60a2      	str	r2, [r4, #8]
 801ad22:	881b      	ldrh	r3, [r3, #0]
 801ad24:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,8,9,12,14,16,18");
 801ad26:	687b      	ldr	r3, [r7, #4]
 801ad28:	3304      	adds	r3, #4
 801ad2a:	4a3e      	ldr	r2, [pc, #248]	; (801ae24 <problem_fetch+0x197c0>)
 801ad2c:	461d      	mov	r5, r3
 801ad2e:	4614      	mov	r4, r2
 801ad30:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801ad32:	6028      	str	r0, [r5, #0]
 801ad34:	6069      	str	r1, [r5, #4]
 801ad36:	60aa      	str	r2, [r5, #8]
 801ad38:	60eb      	str	r3, [r5, #12]
 801ad3a:	8823      	ldrh	r3, [r4, #0]
 801ad3c:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 801ad3e:	687b      	ldr	r3, [r7, #4]
 801ad40:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 801ad44:	4a2a      	ldr	r2, [pc, #168]	; (801adf0 <problem_fetch+0x1978c>)
 801ad46:	461c      	mov	r4, r3
 801ad48:	4613      	mov	r3, r2
 801ad4a:	cb07      	ldmia	r3!, {r0, r1, r2}
 801ad4c:	6020      	str	r0, [r4, #0]
 801ad4e:	6061      	str	r1, [r4, #4]
 801ad50:	60a2      	str	r2, [r4, #8]
 801ad52:	881b      	ldrh	r3, [r3, #0]
 801ad54:	81a3      	strh	r3, [r4, #12]
			break;
 801ad56:	f001 bbb5 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 762 :
			strcpy(p->name,"TESS WIDE");
 801ad5a:	687b      	ldr	r3, [r7, #4]
 801ad5c:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801ad60:	4931      	ldr	r1, [pc, #196]	; (801ae28 <problem_fetch+0x197c4>)
 801ad62:	461a      	mov	r2, r3
 801ad64:	460b      	mov	r3, r1
 801ad66:	cb03      	ldmia	r3!, {r0, r1}
 801ad68:	6010      	str	r0, [r2, #0]
 801ad6a:	6051      	str	r1, [r2, #4]
 801ad6c:	881b      	ldrh	r3, [r3, #0]
 801ad6e:	8113      	strh	r3, [r2, #8]
			strcpy(p->grade,"6C");
 801ad70:	687b      	ldr	r3, [r7, #4]
 801ad72:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801ad76:	4a29      	ldr	r2, [pc, #164]	; (801ae1c <problem_fetch+0x197b8>)
 801ad78:	8811      	ldrh	r1, [r2, #0]
 801ad7a:	7892      	ldrb	r2, [r2, #2]
 801ad7c:	8019      	strh	r1, [r3, #0]
 801ad7e:	709a      	strb	r2, [r3, #2]
			p->moveSize = 7;
 801ad80:	687b      	ldr	r3, [r7, #4]
 801ad82:	2207      	movs	r2, #7
 801ad84:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"C,E,E,H,C,D,D");
 801ad86:	687b      	ldr	r3, [r7, #4]
 801ad88:	33a4      	adds	r3, #164	; 0xa4
 801ad8a:	4a28      	ldr	r2, [pc, #160]	; (801ae2c <problem_fetch+0x197c8>)
 801ad8c:	461c      	mov	r4, r3
 801ad8e:	4613      	mov	r3, r2
 801ad90:	cb07      	ldmia	r3!, {r0, r1, r2}
 801ad92:	6020      	str	r0, [r4, #0]
 801ad94:	6061      	str	r1, [r4, #4]
 801ad96:	60a2      	str	r2, [r4, #8]
 801ad98:	881b      	ldrh	r3, [r3, #0]
 801ad9a:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,6,8,10,13,15,18");
 801ad9c:	687b      	ldr	r3, [r7, #4]
 801ad9e:	3304      	adds	r3, #4
 801ada0:	4a23      	ldr	r2, [pc, #140]	; (801ae30 <problem_fetch+0x197cc>)
 801ada2:	461d      	mov	r5, r3
 801ada4:	4614      	mov	r4, r2
 801ada6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801ada8:	6028      	str	r0, [r5, #0]
 801adaa:	6069      	str	r1, [r5, #4]
 801adac:	60aa      	str	r2, [r5, #8]
 801adae:	60eb      	str	r3, [r5, #12]
 801adb0:	8823      	ldrh	r3, [r4, #0]
 801adb2:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,s,d,d,d,d,e");
 801adb4:	687b      	ldr	r3, [r7, #4]
 801adb6:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 801adba:	4a1e      	ldr	r2, [pc, #120]	; (801ae34 <problem_fetch+0x197d0>)
 801adbc:	461c      	mov	r4, r3
 801adbe:	4613      	mov	r3, r2
 801adc0:	cb07      	ldmia	r3!, {r0, r1, r2}
 801adc2:	6020      	str	r0, [r4, #0]
 801adc4:	6061      	str	r1, [r4, #4]
 801adc6:	60a2      	str	r2, [r4, #8]
 801adc8:	881b      	ldrh	r3, [r3, #0]
 801adca:	81a3      	strh	r3, [r4, #12]
			break;
 801adcc:	f001 bb7a 	b.w	801c4c4 <problem_fetch+0x1ae60>
 801add0:	0802c89c 	.word	0x0802c89c
 801add4:	08023b24 	.word	0x08023b24
 801add8:	0802c8a8 	.word	0x0802c8a8
 801addc:	0802c8b4 	.word	0x0802c8b4
 801ade0:	08024204 	.word	0x08024204
 801ade4:	0802c8c4 	.word	0x0802c8c4
 801ade8:	0802c8d8 	.word	0x0802c8d8
 801adec:	0802c8e8 	.word	0x0802c8e8
 801adf0:	08023cac 	.word	0x08023cac
 801adf4:	0802c8fc 	.word	0x0802c8fc
 801adf8:	08023ae4 	.word	0x08023ae4
 801adfc:	0802c90c 	.word	0x0802c90c
 801ae00:	0802c91c 	.word	0x0802c91c
 801ae04:	08023d34 	.word	0x08023d34
 801ae08:	0802c934 	.word	0x0802c934
 801ae0c:	0802421c 	.word	0x0802421c
 801ae10:	0802c93c 	.word	0x0802c93c
 801ae14:	0802c94c 	.word	0x0802c94c
 801ae18:	0802c964 	.word	0x0802c964
 801ae1c:	08023bf0 	.word	0x08023bf0
 801ae20:	0802c974 	.word	0x0802c974
 801ae24:	0802c984 	.word	0x0802c984
 801ae28:	0802c998 	.word	0x0802c998
 801ae2c:	0802c9a4 	.word	0x0802c9a4
 801ae30:	0802c9b4 	.word	0x0802c9b4
 801ae34:	08023b9c 	.word	0x08023b9c
		case 763 :
			strcpy(p->name,"ACG19");
 801ae38:	687b      	ldr	r3, [r7, #4]
 801ae3a:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801ae3e:	4abb      	ldr	r2, [pc, #748]	; (801b12c <problem_fetch+0x19ac8>)
 801ae40:	6810      	ldr	r0, [r2, #0]
 801ae42:	6018      	str	r0, [r3, #0]
 801ae44:	8892      	ldrh	r2, [r2, #4]
 801ae46:	809a      	strh	r2, [r3, #4]
			strcpy(p->grade,"6B+");
 801ae48:	687b      	ldr	r3, [r7, #4]
 801ae4a:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801ae4e:	4ab8      	ldr	r2, [pc, #736]	; (801b130 <problem_fetch+0x19acc>)
 801ae50:	6810      	ldr	r0, [r2, #0]
 801ae52:	6018      	str	r0, [r3, #0]
			p->moveSize = 8;
 801ae54:	687b      	ldr	r3, [r7, #4]
 801ae56:	2208      	movs	r2, #8
 801ae58:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"E,J,G,B,E,E,I,I");
 801ae5a:	687b      	ldr	r3, [r7, #4]
 801ae5c:	33a4      	adds	r3, #164	; 0xa4
 801ae5e:	4ab5      	ldr	r2, [pc, #724]	; (801b134 <problem_fetch+0x19ad0>)
 801ae60:	461c      	mov	r4, r3
 801ae62:	4615      	mov	r5, r2
 801ae64:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801ae66:	6020      	str	r0, [r4, #0]
 801ae68:	6061      	str	r1, [r4, #4]
 801ae6a:	60a2      	str	r2, [r4, #8]
 801ae6c:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"6,5,9,10,12,14,14,18");
 801ae6e:	687b      	ldr	r3, [r7, #4]
 801ae70:	3304      	adds	r3, #4
 801ae72:	4ab1      	ldr	r2, [pc, #708]	; (801b138 <problem_fetch+0x19ad4>)
 801ae74:	461d      	mov	r5, r3
 801ae76:	4614      	mov	r4, r2
 801ae78:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801ae7a:	6028      	str	r0, [r5, #0]
 801ae7c:	6069      	str	r1, [r5, #4]
 801ae7e:	60aa      	str	r2, [r5, #8]
 801ae80:	60eb      	str	r3, [r5, #12]
 801ae82:	6820      	ldr	r0, [r4, #0]
 801ae84:	6128      	str	r0, [r5, #16]
 801ae86:	7923      	ldrb	r3, [r4, #4]
 801ae88:	752b      	strb	r3, [r5, #20]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,e");
 801ae8a:	687b      	ldr	r3, [r7, #4]
 801ae8c:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 801ae90:	4aaa      	ldr	r2, [pc, #680]	; (801b13c <problem_fetch+0x19ad8>)
 801ae92:	461c      	mov	r4, r3
 801ae94:	4615      	mov	r5, r2
 801ae96:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801ae98:	6020      	str	r0, [r4, #0]
 801ae9a:	6061      	str	r1, [r4, #4]
 801ae9c:	60a2      	str	r2, [r4, #8]
 801ae9e:	60e3      	str	r3, [r4, #12]
			break;
 801aea0:	f001 bb10 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 764 :
			strcpy(p->name,"BLACK CAT'S");
 801aea4:	687b      	ldr	r3, [r7, #4]
 801aea6:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801aeaa:	4aa5      	ldr	r2, [pc, #660]	; (801b140 <problem_fetch+0x19adc>)
 801aeac:	461c      	mov	r4, r3
 801aeae:	4613      	mov	r3, r2
 801aeb0:	cb07      	ldmia	r3!, {r0, r1, r2}
 801aeb2:	6020      	str	r0, [r4, #0]
 801aeb4:	6061      	str	r1, [r4, #4]
 801aeb6:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade,"7C+");
 801aeb8:	687b      	ldr	r3, [r7, #4]
 801aeba:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801aebe:	4aa1      	ldr	r2, [pc, #644]	; (801b144 <problem_fetch+0x19ae0>)
 801aec0:	6810      	ldr	r0, [r2, #0]
 801aec2:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 801aec4:	687b      	ldr	r3, [r7, #4]
 801aec6:	2206      	movs	r2, #6
 801aec8:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"C,E,D,J,I,I");
 801aeca:	687b      	ldr	r3, [r7, #4]
 801aecc:	33a4      	adds	r3, #164	; 0xa4
 801aece:	4a9e      	ldr	r2, [pc, #632]	; (801b148 <problem_fetch+0x19ae4>)
 801aed0:	461c      	mov	r4, r3
 801aed2:	4613      	mov	r3, r2
 801aed4:	cb07      	ldmia	r3!, {r0, r1, r2}
 801aed6:	6020      	str	r0, [r4, #0]
 801aed8:	6061      	str	r1, [r4, #4]
 801aeda:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,9,11,12,15,18");
 801aedc:	687b      	ldr	r3, [r7, #4]
 801aede:	3304      	adds	r3, #4
 801aee0:	4a9a      	ldr	r2, [pc, #616]	; (801b14c <problem_fetch+0x19ae8>)
 801aee2:	461c      	mov	r4, r3
 801aee4:	4615      	mov	r5, r2
 801aee6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801aee8:	6020      	str	r0, [r4, #0]
 801aeea:	6061      	str	r1, [r4, #4]
 801aeec:	60a2      	str	r2, [r4, #8]
 801aeee:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 801aef0:	687b      	ldr	r3, [r7, #4]
 801aef2:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 801aef6:	4a96      	ldr	r2, [pc, #600]	; (801b150 <problem_fetch+0x19aec>)
 801aef8:	461c      	mov	r4, r3
 801aefa:	4613      	mov	r3, r2
 801aefc:	cb07      	ldmia	r3!, {r0, r1, r2}
 801aefe:	6020      	str	r0, [r4, #0]
 801af00:	6061      	str	r1, [r4, #4]
 801af02:	60a2      	str	r2, [r4, #8]
			break;
 801af04:	f001 bade 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 765 :
			strcpy(p->name,"SUBMARINE");
 801af08:	687b      	ldr	r3, [r7, #4]
 801af0a:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801af0e:	4991      	ldr	r1, [pc, #580]	; (801b154 <problem_fetch+0x19af0>)
 801af10:	461a      	mov	r2, r3
 801af12:	460b      	mov	r3, r1
 801af14:	cb03      	ldmia	r3!, {r0, r1}
 801af16:	6010      	str	r0, [r2, #0]
 801af18:	6051      	str	r1, [r2, #4]
 801af1a:	881b      	ldrh	r3, [r3, #0]
 801af1c:	8113      	strh	r3, [r2, #8]
			strcpy(p->grade,"7B+");
 801af1e:	687b      	ldr	r3, [r7, #4]
 801af20:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801af24:	4a8c      	ldr	r2, [pc, #560]	; (801b158 <problem_fetch+0x19af4>)
 801af26:	6810      	ldr	r0, [r2, #0]
 801af28:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 801af2a:	687b      	ldr	r3, [r7, #4]
 801af2c:	2206      	movs	r2, #6
 801af2e:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,C,E,E,I,I");
 801af30:	687b      	ldr	r3, [r7, #4]
 801af32:	33a4      	adds	r3, #164	; 0xa4
 801af34:	4a89      	ldr	r2, [pc, #548]	; (801b15c <problem_fetch+0x19af8>)
 801af36:	461c      	mov	r4, r3
 801af38:	4613      	mov	r3, r2
 801af3a:	cb07      	ldmia	r3!, {r0, r1, r2}
 801af3c:	6020      	str	r0, [r4, #0]
 801af3e:	6061      	str	r1, [r4, #4]
 801af40:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,8,12,14,15,18");
 801af42:	687b      	ldr	r3, [r7, #4]
 801af44:	3304      	adds	r3, #4
 801af46:	4a86      	ldr	r2, [pc, #536]	; (801b160 <problem_fetch+0x19afc>)
 801af48:	461c      	mov	r4, r3
 801af4a:	4615      	mov	r5, r2
 801af4c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801af4e:	6020      	str	r0, [r4, #0]
 801af50:	6061      	str	r1, [r4, #4]
 801af52:	60a2      	str	r2, [r4, #8]
 801af54:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 801af56:	687b      	ldr	r3, [r7, #4]
 801af58:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 801af5c:	4a7c      	ldr	r2, [pc, #496]	; (801b150 <problem_fetch+0x19aec>)
 801af5e:	461c      	mov	r4, r3
 801af60:	4613      	mov	r3, r2
 801af62:	cb07      	ldmia	r3!, {r0, r1, r2}
 801af64:	6020      	str	r0, [r4, #0]
 801af66:	6061      	str	r1, [r4, #4]
 801af68:	60a2      	str	r2, [r4, #8]
			break;
 801af6a:	f001 baab 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 766 :
			strcpy(p->name,"LINK TO THE PAST");
 801af6e:	687b      	ldr	r3, [r7, #4]
 801af70:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801af74:	4a7b      	ldr	r2, [pc, #492]	; (801b164 <problem_fetch+0x19b00>)
 801af76:	461d      	mov	r5, r3
 801af78:	4614      	mov	r4, r2
 801af7a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801af7c:	6028      	str	r0, [r5, #0]
 801af7e:	6069      	str	r1, [r5, #4]
 801af80:	60aa      	str	r2, [r5, #8]
 801af82:	60eb      	str	r3, [r5, #12]
 801af84:	7823      	ldrb	r3, [r4, #0]
 801af86:	742b      	strb	r3, [r5, #16]
			strcpy(p->grade,"7A");
 801af88:	687b      	ldr	r3, [r7, #4]
 801af8a:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801af8e:	4a76      	ldr	r2, [pc, #472]	; (801b168 <problem_fetch+0x19b04>)
 801af90:	8811      	ldrh	r1, [r2, #0]
 801af92:	7892      	ldrb	r2, [r2, #2]
 801af94:	8019      	strh	r1, [r3, #0]
 801af96:	709a      	strb	r2, [r3, #2]
			p->moveSize = 7;
 801af98:	687b      	ldr	r3, [r7, #4]
 801af9a:	2207      	movs	r2, #7
 801af9c:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"C,B,A,E,E,H,D");
 801af9e:	687b      	ldr	r3, [r7, #4]
 801afa0:	33a4      	adds	r3, #164	; 0xa4
 801afa2:	4a72      	ldr	r2, [pc, #456]	; (801b16c <problem_fetch+0x19b08>)
 801afa4:	461c      	mov	r4, r3
 801afa6:	4613      	mov	r3, r2
 801afa8:	cb07      	ldmia	r3!, {r0, r1, r2}
 801afaa:	6020      	str	r0, [r4, #0]
 801afac:	6061      	str	r1, [r4, #4]
 801afae:	60a2      	str	r2, [r4, #8]
 801afb0:	881b      	ldrh	r3, [r3, #0]
 801afb2:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,6,9,12,14,16,18");
 801afb4:	687b      	ldr	r3, [r7, #4]
 801afb6:	3304      	adds	r3, #4
 801afb8:	4a6d      	ldr	r2, [pc, #436]	; (801b170 <problem_fetch+0x19b0c>)
 801afba:	461d      	mov	r5, r3
 801afbc:	4614      	mov	r4, r2
 801afbe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801afc0:	6028      	str	r0, [r5, #0]
 801afc2:	6069      	str	r1, [r5, #4]
 801afc4:	60aa      	str	r2, [r5, #8]
 801afc6:	60eb      	str	r3, [r5, #12]
 801afc8:	8823      	ldrh	r3, [r4, #0]
 801afca:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,s,d,d,d,d,e");
 801afcc:	687b      	ldr	r3, [r7, #4]
 801afce:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 801afd2:	4a68      	ldr	r2, [pc, #416]	; (801b174 <problem_fetch+0x19b10>)
 801afd4:	461c      	mov	r4, r3
 801afd6:	4613      	mov	r3, r2
 801afd8:	cb07      	ldmia	r3!, {r0, r1, r2}
 801afda:	6020      	str	r0, [r4, #0]
 801afdc:	6061      	str	r1, [r4, #4]
 801afde:	60a2      	str	r2, [r4, #8]
 801afe0:	881b      	ldrh	r3, [r3, #0]
 801afe2:	81a3      	strh	r3, [r4, #12]
			break;
 801afe4:	f001 ba6e 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 767 :
			strcpy(p->name,"SALAD NIGHTS");
 801afe8:	687b      	ldr	r3, [r7, #4]
 801afea:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801afee:	4a62      	ldr	r2, [pc, #392]	; (801b178 <problem_fetch+0x19b14>)
 801aff0:	461c      	mov	r4, r3
 801aff2:	4613      	mov	r3, r2
 801aff4:	cb07      	ldmia	r3!, {r0, r1, r2}
 801aff6:	6020      	str	r0, [r4, #0]
 801aff8:	6061      	str	r1, [r4, #4]
 801affa:	60a2      	str	r2, [r4, #8]
 801affc:	781b      	ldrb	r3, [r3, #0]
 801affe:	7323      	strb	r3, [r4, #12]
			strcpy(p->grade,"7A+");
 801b000:	687b      	ldr	r3, [r7, #4]
 801b002:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801b006:	4a5d      	ldr	r2, [pc, #372]	; (801b17c <problem_fetch+0x19b18>)
 801b008:	6810      	ldr	r0, [r2, #0]
 801b00a:	6018      	str	r0, [r3, #0]
			p->moveSize = 8;
 801b00c:	687b      	ldr	r3, [r7, #4]
 801b00e:	2208      	movs	r2, #8
 801b010:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"C,B,E,K,H,I,E,D");
 801b012:	687b      	ldr	r3, [r7, #4]
 801b014:	33a4      	adds	r3, #164	; 0xa4
 801b016:	4a5a      	ldr	r2, [pc, #360]	; (801b180 <problem_fetch+0x19b1c>)
 801b018:	461c      	mov	r4, r3
 801b01a:	4615      	mov	r5, r2
 801b01c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801b01e:	6020      	str	r0, [r4, #0]
 801b020:	6061      	str	r1, [r4, #4]
 801b022:	60a2      	str	r2, [r4, #8]
 801b024:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,6,8,9,12,14,14,18");
 801b026:	687b      	ldr	r3, [r7, #4]
 801b028:	3304      	adds	r3, #4
 801b02a:	4a56      	ldr	r2, [pc, #344]	; (801b184 <problem_fetch+0x19b20>)
 801b02c:	461d      	mov	r5, r3
 801b02e:	4614      	mov	r4, r2
 801b030:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801b032:	6028      	str	r0, [r5, #0]
 801b034:	6069      	str	r1, [r5, #4]
 801b036:	60aa      	str	r2, [r5, #8]
 801b038:	60eb      	str	r3, [r5, #12]
 801b03a:	6820      	ldr	r0, [r4, #0]
 801b03c:	6128      	str	r0, [r5, #16]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,e");
 801b03e:	687b      	ldr	r3, [r7, #4]
 801b040:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 801b044:	4a3d      	ldr	r2, [pc, #244]	; (801b13c <problem_fetch+0x19ad8>)
 801b046:	461c      	mov	r4, r3
 801b048:	4615      	mov	r5, r2
 801b04a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801b04c:	6020      	str	r0, [r4, #0]
 801b04e:	6061      	str	r1, [r4, #4]
 801b050:	60a2      	str	r2, [r4, #8]
 801b052:	60e3      	str	r3, [r4, #12]
			break;
 801b054:	f001 ba36 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 768 :
			strcpy(p->name,"ONE");
 801b058:	687b      	ldr	r3, [r7, #4]
 801b05a:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801b05e:	4a4a      	ldr	r2, [pc, #296]	; (801b188 <problem_fetch+0x19b24>)
 801b060:	6810      	ldr	r0, [r2, #0]
 801b062:	6018      	str	r0, [r3, #0]
			strcpy(p->grade,"6B+");
 801b064:	687b      	ldr	r3, [r7, #4]
 801b066:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801b06a:	4a31      	ldr	r2, [pc, #196]	; (801b130 <problem_fetch+0x19acc>)
 801b06c:	6810      	ldr	r0, [r2, #0]
 801b06e:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 801b070:	687b      	ldr	r3, [r7, #4]
 801b072:	2206      	movs	r2, #6
 801b074:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,E,E,C,E,I");
 801b076:	687b      	ldr	r3, [r7, #4]
 801b078:	33a4      	adds	r3, #164	; 0xa4
 801b07a:	4a44      	ldr	r2, [pc, #272]	; (801b18c <problem_fetch+0x19b28>)
 801b07c:	461c      	mov	r4, r3
 801b07e:	4613      	mov	r3, r2
 801b080:	cb07      	ldmia	r3!, {r0, r1, r2}
 801b082:	6020      	str	r0, [r4, #0]
 801b084:	6061      	str	r1, [r4, #4]
 801b086:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,8,9,13,16,18");
 801b088:	687b      	ldr	r3, [r7, #4]
 801b08a:	3304      	adds	r3, #4
 801b08c:	4a40      	ldr	r2, [pc, #256]	; (801b190 <problem_fetch+0x19b2c>)
 801b08e:	461c      	mov	r4, r3
 801b090:	4613      	mov	r3, r2
 801b092:	cb07      	ldmia	r3!, {r0, r1, r2}
 801b094:	6020      	str	r0, [r4, #0]
 801b096:	6061      	str	r1, [r4, #4]
 801b098:	60a2      	str	r2, [r4, #8]
 801b09a:	881a      	ldrh	r2, [r3, #0]
 801b09c:	789b      	ldrb	r3, [r3, #2]
 801b09e:	81a2      	strh	r2, [r4, #12]
 801b0a0:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 801b0a2:	687b      	ldr	r3, [r7, #4]
 801b0a4:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 801b0a8:	4a29      	ldr	r2, [pc, #164]	; (801b150 <problem_fetch+0x19aec>)
 801b0aa:	461c      	mov	r4, r3
 801b0ac:	4613      	mov	r3, r2
 801b0ae:	cb07      	ldmia	r3!, {r0, r1, r2}
 801b0b0:	6020      	str	r0, [r4, #0]
 801b0b2:	6061      	str	r1, [r4, #4]
 801b0b4:	60a2      	str	r2, [r4, #8]
			break;
 801b0b6:	f001 ba05 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 769 :
			strcpy(p->name,"DRAGONS DEN");
 801b0ba:	687b      	ldr	r3, [r7, #4]
 801b0bc:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801b0c0:	4a34      	ldr	r2, [pc, #208]	; (801b194 <problem_fetch+0x19b30>)
 801b0c2:	461c      	mov	r4, r3
 801b0c4:	4613      	mov	r3, r2
 801b0c6:	cb07      	ldmia	r3!, {r0, r1, r2}
 801b0c8:	6020      	str	r0, [r4, #0]
 801b0ca:	6061      	str	r1, [r4, #4]
 801b0cc:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade,"6B+");
 801b0ce:	687b      	ldr	r3, [r7, #4]
 801b0d0:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801b0d4:	4a16      	ldr	r2, [pc, #88]	; (801b130 <problem_fetch+0x19acc>)
 801b0d6:	6810      	ldr	r0, [r2, #0]
 801b0d8:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 801b0da:	687b      	ldr	r3, [r7, #4]
 801b0dc:	2207      	movs	r2, #7
 801b0de:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,G,K,H,J,G,I");
 801b0e0:	687b      	ldr	r3, [r7, #4]
 801b0e2:	33a4      	adds	r3, #164	; 0xa4
 801b0e4:	4a2c      	ldr	r2, [pc, #176]	; (801b198 <problem_fetch+0x19b34>)
 801b0e6:	461c      	mov	r4, r3
 801b0e8:	4613      	mov	r3, r2
 801b0ea:	cb07      	ldmia	r3!, {r0, r1, r2}
 801b0ec:	6020      	str	r0, [r4, #0]
 801b0ee:	6061      	str	r1, [r4, #4]
 801b0f0:	60a2      	str	r2, [r4, #8]
 801b0f2:	881b      	ldrh	r3, [r3, #0]
 801b0f4:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,6,9,10,13,15,18");
 801b0f6:	687b      	ldr	r3, [r7, #4]
 801b0f8:	3304      	adds	r3, #4
 801b0fa:	4a28      	ldr	r2, [pc, #160]	; (801b19c <problem_fetch+0x19b38>)
 801b0fc:	461d      	mov	r5, r3
 801b0fe:	4614      	mov	r4, r2
 801b100:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801b102:	6028      	str	r0, [r5, #0]
 801b104:	6069      	str	r1, [r5, #4]
 801b106:	60aa      	str	r2, [r5, #8]
 801b108:	60eb      	str	r3, [r5, #12]
 801b10a:	8823      	ldrh	r3, [r4, #0]
 801b10c:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,s,d,d,d,d,e");
 801b10e:	687b      	ldr	r3, [r7, #4]
 801b110:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 801b114:	4a17      	ldr	r2, [pc, #92]	; (801b174 <problem_fetch+0x19b10>)
 801b116:	461c      	mov	r4, r3
 801b118:	4613      	mov	r3, r2
 801b11a:	cb07      	ldmia	r3!, {r0, r1, r2}
 801b11c:	6020      	str	r0, [r4, #0]
 801b11e:	6061      	str	r1, [r4, #4]
 801b120:	60a2      	str	r2, [r4, #8]
 801b122:	881b      	ldrh	r3, [r3, #0]
 801b124:	81a3      	strh	r3, [r4, #12]
			break;
 801b126:	f001 b9cd 	b.w	801c4c4 <problem_fetch+0x1ae60>
 801b12a:	bf00      	nop
 801b12c:	0802c9c8 	.word	0x0802c9c8
 801b130:	08023b24 	.word	0x08023b24
 801b134:	0802c9d0 	.word	0x0802c9d0
 801b138:	0802c9e0 	.word	0x0802c9e0
 801b13c:	08023c48 	.word	0x08023c48
 801b140:	0802c9f8 	.word	0x0802c9f8
 801b144:	08024130 	.word	0x08024130
 801b148:	0802ca04 	.word	0x0802ca04
 801b14c:	08029124 	.word	0x08029124
 801b150:	08023ec0 	.word	0x08023ec0
 801b154:	0802ca10 	.word	0x0802ca10
 801b158:	08023c60 	.word	0x08023c60
 801b15c:	0802b5c0 	.word	0x0802b5c0
 801b160:	0802ca1c 	.word	0x0802ca1c
 801b164:	0802ca2c 	.word	0x0802ca2c
 801b168:	08023ae4 	.word	0x08023ae4
 801b16c:	0802ca40 	.word	0x0802ca40
 801b170:	08024d64 	.word	0x08024d64
 801b174:	08023b9c 	.word	0x08023b9c
 801b178:	0802ca50 	.word	0x0802ca50
 801b17c:	08023cc4 	.word	0x08023cc4
 801b180:	0802ca60 	.word	0x0802ca60
 801b184:	0802ca70 	.word	0x0802ca70
 801b188:	0802ca84 	.word	0x0802ca84
 801b18c:	0802ca88 	.word	0x0802ca88
 801b190:	080285c4 	.word	0x080285c4
 801b194:	0802ca94 	.word	0x0802ca94
 801b198:	0802caa0 	.word	0x0802caa0
 801b19c:	0802cab0 	.word	0x0802cab0
		case 770 :
			strcpy(p->name,"GOOD TIMES");
 801b1a0:	687b      	ldr	r3, [r7, #4]
 801b1a2:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801b1a6:	49c2      	ldr	r1, [pc, #776]	; (801b4b0 <problem_fetch+0x19e4c>)
 801b1a8:	461a      	mov	r2, r3
 801b1aa:	460b      	mov	r3, r1
 801b1ac:	cb03      	ldmia	r3!, {r0, r1}
 801b1ae:	6010      	str	r0, [r2, #0]
 801b1b0:	6051      	str	r1, [r2, #4]
 801b1b2:	8819      	ldrh	r1, [r3, #0]
 801b1b4:	789b      	ldrb	r3, [r3, #2]
 801b1b6:	8111      	strh	r1, [r2, #8]
 801b1b8:	7293      	strb	r3, [r2, #10]
			strcpy(p->grade,"6B+");
 801b1ba:	687b      	ldr	r3, [r7, #4]
 801b1bc:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801b1c0:	4abc      	ldr	r2, [pc, #752]	; (801b4b4 <problem_fetch+0x19e50>)
 801b1c2:	6810      	ldr	r0, [r2, #0]
 801b1c4:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 801b1c6:	687b      	ldr	r3, [r7, #4]
 801b1c8:	2207      	movs	r2, #7
 801b1ca:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,C,E,F,C,D,A");
 801b1cc:	687b      	ldr	r3, [r7, #4]
 801b1ce:	33a4      	adds	r3, #164	; 0xa4
 801b1d0:	4ab9      	ldr	r2, [pc, #740]	; (801b4b8 <problem_fetch+0x19e54>)
 801b1d2:	461c      	mov	r4, r3
 801b1d4:	4613      	mov	r3, r2
 801b1d6:	cb07      	ldmia	r3!, {r0, r1, r2}
 801b1d8:	6020      	str	r0, [r4, #0]
 801b1da:	6061      	str	r1, [r4, #4]
 801b1dc:	60a2      	str	r2, [r4, #8]
 801b1de:	881b      	ldrh	r3, [r3, #0]
 801b1e0:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,5,8,11,13,15,18");
 801b1e2:	687b      	ldr	r3, [r7, #4]
 801b1e4:	3304      	adds	r3, #4
 801b1e6:	4ab5      	ldr	r2, [pc, #724]	; (801b4bc <problem_fetch+0x19e58>)
 801b1e8:	461d      	mov	r5, r3
 801b1ea:	4614      	mov	r4, r2
 801b1ec:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801b1ee:	6028      	str	r0, [r5, #0]
 801b1f0:	6069      	str	r1, [r5, #4]
 801b1f2:	60aa      	str	r2, [r5, #8]
 801b1f4:	60eb      	str	r3, [r5, #12]
 801b1f6:	8823      	ldrh	r3, [r4, #0]
 801b1f8:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,s,d,d,d,d,e");
 801b1fa:	687b      	ldr	r3, [r7, #4]
 801b1fc:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 801b200:	4aaf      	ldr	r2, [pc, #700]	; (801b4c0 <problem_fetch+0x19e5c>)
 801b202:	461c      	mov	r4, r3
 801b204:	4613      	mov	r3, r2
 801b206:	cb07      	ldmia	r3!, {r0, r1, r2}
 801b208:	6020      	str	r0, [r4, #0]
 801b20a:	6061      	str	r1, [r4, #4]
 801b20c:	60a2      	str	r2, [r4, #8]
 801b20e:	881b      	ldrh	r3, [r3, #0]
 801b210:	81a3      	strh	r3, [r4, #12]
			break;
 801b212:	f001 b957 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 771 :
			strcpy(p->name,"NOT TOO BAD");
 801b216:	687b      	ldr	r3, [r7, #4]
 801b218:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801b21c:	4aa9      	ldr	r2, [pc, #676]	; (801b4c4 <problem_fetch+0x19e60>)
 801b21e:	461c      	mov	r4, r3
 801b220:	4613      	mov	r3, r2
 801b222:	cb07      	ldmia	r3!, {r0, r1, r2}
 801b224:	6020      	str	r0, [r4, #0]
 801b226:	6061      	str	r1, [r4, #4]
 801b228:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade,"6B+");
 801b22a:	687b      	ldr	r3, [r7, #4]
 801b22c:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801b230:	4aa0      	ldr	r2, [pc, #640]	; (801b4b4 <problem_fetch+0x19e50>)
 801b232:	6810      	ldr	r0, [r2, #0]
 801b234:	6018      	str	r0, [r3, #0]
			p->moveSize = 8;
 801b236:	687b      	ldr	r3, [r7, #4]
 801b238:	2208      	movs	r2, #8
 801b23a:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,C,E,F,D,I,E,D");
 801b23c:	687b      	ldr	r3, [r7, #4]
 801b23e:	33a4      	adds	r3, #164	; 0xa4
 801b240:	4aa1      	ldr	r2, [pc, #644]	; (801b4c8 <problem_fetch+0x19e64>)
 801b242:	461c      	mov	r4, r3
 801b244:	4615      	mov	r5, r2
 801b246:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801b248:	6020      	str	r0, [r4, #0]
 801b24a:	6061      	str	r1, [r4, #4]
 801b24c:	60a2      	str	r2, [r4, #8]
 801b24e:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,5,8,11,11,14,16,18");
 801b250:	687b      	ldr	r3, [r7, #4]
 801b252:	3304      	adds	r3, #4
 801b254:	4a9d      	ldr	r2, [pc, #628]	; (801b4cc <problem_fetch+0x19e68>)
 801b256:	461d      	mov	r5, r3
 801b258:	4614      	mov	r4, r2
 801b25a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801b25c:	6028      	str	r0, [r5, #0]
 801b25e:	6069      	str	r1, [r5, #4]
 801b260:	60aa      	str	r2, [r5, #8]
 801b262:	60eb      	str	r3, [r5, #12]
 801b264:	6820      	ldr	r0, [r4, #0]
 801b266:	6128      	str	r0, [r5, #16]
 801b268:	7923      	ldrb	r3, [r4, #4]
 801b26a:	752b      	strb	r3, [r5, #20]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,e");
 801b26c:	687b      	ldr	r3, [r7, #4]
 801b26e:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 801b272:	4a97      	ldr	r2, [pc, #604]	; (801b4d0 <problem_fetch+0x19e6c>)
 801b274:	461c      	mov	r4, r3
 801b276:	4615      	mov	r5, r2
 801b278:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801b27a:	6020      	str	r0, [r4, #0]
 801b27c:	6061      	str	r1, [r4, #4]
 801b27e:	60a2      	str	r2, [r4, #8]
 801b280:	60e3      	str	r3, [r4, #12]
			break;
 801b282:	f001 b91f 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 772 :
			strcpy(p->name,"VERITGO");
 801b286:	687b      	ldr	r3, [r7, #4]
 801b288:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801b28c:	4991      	ldr	r1, [pc, #580]	; (801b4d4 <problem_fetch+0x19e70>)
 801b28e:	461a      	mov	r2, r3
 801b290:	460b      	mov	r3, r1
 801b292:	cb03      	ldmia	r3!, {r0, r1}
 801b294:	6010      	str	r0, [r2, #0]
 801b296:	6051      	str	r1, [r2, #4]
			strcpy(p->grade,"6B+");
 801b298:	687b      	ldr	r3, [r7, #4]
 801b29a:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801b29e:	4a85      	ldr	r2, [pc, #532]	; (801b4b4 <problem_fetch+0x19e50>)
 801b2a0:	6810      	ldr	r0, [r2, #0]
 801b2a2:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 801b2a4:	687b      	ldr	r3, [r7, #4]
 801b2a6:	2206      	movs	r2, #6
 801b2a8:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,J,H,F,H,D");
 801b2aa:	687b      	ldr	r3, [r7, #4]
 801b2ac:	33a4      	adds	r3, #164	; 0xa4
 801b2ae:	4a8a      	ldr	r2, [pc, #552]	; (801b4d8 <problem_fetch+0x19e74>)
 801b2b0:	461c      	mov	r4, r3
 801b2b2:	4613      	mov	r3, r2
 801b2b4:	cb07      	ldmia	r3!, {r0, r1, r2}
 801b2b6:	6020      	str	r0, [r4, #0]
 801b2b8:	6061      	str	r1, [r4, #4]
 801b2ba:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"6,5,10,13,16,18");
 801b2bc:	687b      	ldr	r3, [r7, #4]
 801b2be:	3304      	adds	r3, #4
 801b2c0:	4a86      	ldr	r2, [pc, #536]	; (801b4dc <problem_fetch+0x19e78>)
 801b2c2:	461c      	mov	r4, r3
 801b2c4:	4615      	mov	r5, r2
 801b2c6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801b2c8:	6020      	str	r0, [r4, #0]
 801b2ca:	6061      	str	r1, [r4, #4]
 801b2cc:	60a2      	str	r2, [r4, #8]
 801b2ce:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,s,d,d,d,e");
 801b2d0:	687b      	ldr	r3, [r7, #4]
 801b2d2:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 801b2d6:	4a82      	ldr	r2, [pc, #520]	; (801b4e0 <problem_fetch+0x19e7c>)
 801b2d8:	461c      	mov	r4, r3
 801b2da:	4613      	mov	r3, r2
 801b2dc:	cb07      	ldmia	r3!, {r0, r1, r2}
 801b2de:	6020      	str	r0, [r4, #0]
 801b2e0:	6061      	str	r1, [r4, #4]
 801b2e2:	60a2      	str	r2, [r4, #8]
			break;
 801b2e4:	f001 b8ee 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 773 :
			strcpy(p->name,"MASTERFUL GAP");
 801b2e8:	687b      	ldr	r3, [r7, #4]
 801b2ea:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801b2ee:	4a7d      	ldr	r2, [pc, #500]	; (801b4e4 <problem_fetch+0x19e80>)
 801b2f0:	461c      	mov	r4, r3
 801b2f2:	4613      	mov	r3, r2
 801b2f4:	cb07      	ldmia	r3!, {r0, r1, r2}
 801b2f6:	6020      	str	r0, [r4, #0]
 801b2f8:	6061      	str	r1, [r4, #4]
 801b2fa:	60a2      	str	r2, [r4, #8]
 801b2fc:	881b      	ldrh	r3, [r3, #0]
 801b2fe:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade,"7A+");
 801b300:	687b      	ldr	r3, [r7, #4]
 801b302:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801b306:	4a78      	ldr	r2, [pc, #480]	; (801b4e8 <problem_fetch+0x19e84>)
 801b308:	6810      	ldr	r0, [r2, #0]
 801b30a:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 801b30c:	687b      	ldr	r3, [r7, #4]
 801b30e:	2207      	movs	r2, #7
 801b310:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"A,B,C,C,E,F,I");
 801b312:	687b      	ldr	r3, [r7, #4]
 801b314:	33a4      	adds	r3, #164	; 0xa4
 801b316:	4a75      	ldr	r2, [pc, #468]	; (801b4ec <problem_fetch+0x19e88>)
 801b318:	461c      	mov	r4, r3
 801b31a:	4613      	mov	r3, r2
 801b31c:	cb07      	ldmia	r3!, {r0, r1, r2}
 801b31e:	6020      	str	r0, [r4, #0]
 801b320:	6061      	str	r1, [r4, #4]
 801b322:	60a2      	str	r2, [r4, #8]
 801b324:	881b      	ldrh	r3, [r3, #0]
 801b326:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"9,6,5,13,16,11,18");
 801b328:	687b      	ldr	r3, [r7, #4]
 801b32a:	3304      	adds	r3, #4
 801b32c:	4a70      	ldr	r2, [pc, #448]	; (801b4f0 <problem_fetch+0x19e8c>)
 801b32e:	461d      	mov	r5, r3
 801b330:	4614      	mov	r4, r2
 801b332:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801b334:	6028      	str	r0, [r5, #0]
 801b336:	6069      	str	r1, [r5, #4]
 801b338:	60aa      	str	r2, [r5, #8]
 801b33a:	60eb      	str	r3, [r5, #12]
 801b33c:	8823      	ldrh	r3, [r4, #0]
 801b33e:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"d,s,s,d,d,d,e");
 801b340:	687b      	ldr	r3, [r7, #4]
 801b342:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 801b346:	4a6b      	ldr	r2, [pc, #428]	; (801b4f4 <problem_fetch+0x19e90>)
 801b348:	461c      	mov	r4, r3
 801b34a:	4613      	mov	r3, r2
 801b34c:	cb07      	ldmia	r3!, {r0, r1, r2}
 801b34e:	6020      	str	r0, [r4, #0]
 801b350:	6061      	str	r1, [r4, #4]
 801b352:	60a2      	str	r2, [r4, #8]
 801b354:	881b      	ldrh	r3, [r3, #0]
 801b356:	81a3      	strh	r3, [r4, #12]
			break;
 801b358:	f001 b8b4 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 774 :
			strcpy(p->name,"SUPERNOVA");
 801b35c:	687b      	ldr	r3, [r7, #4]
 801b35e:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801b362:	4965      	ldr	r1, [pc, #404]	; (801b4f8 <problem_fetch+0x19e94>)
 801b364:	461a      	mov	r2, r3
 801b366:	460b      	mov	r3, r1
 801b368:	cb03      	ldmia	r3!, {r0, r1}
 801b36a:	6010      	str	r0, [r2, #0]
 801b36c:	6051      	str	r1, [r2, #4]
 801b36e:	881b      	ldrh	r3, [r3, #0]
 801b370:	8113      	strh	r3, [r2, #8]
			strcpy(p->grade,"7A");
 801b372:	687b      	ldr	r3, [r7, #4]
 801b374:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801b378:	4a60      	ldr	r2, [pc, #384]	; (801b4fc <problem_fetch+0x19e98>)
 801b37a:	8811      	ldrh	r1, [r2, #0]
 801b37c:	7892      	ldrb	r2, [r2, #2]
 801b37e:	8019      	strh	r1, [r3, #0]
 801b380:	709a      	strb	r2, [r3, #2]
			p->moveSize = 7;
 801b382:	687b      	ldr	r3, [r7, #4]
 801b384:	2207      	movs	r2, #7
 801b386:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,H,C,F,F,H,D");
 801b388:	687b      	ldr	r3, [r7, #4]
 801b38a:	33a4      	adds	r3, #164	; 0xa4
 801b38c:	4a5c      	ldr	r2, [pc, #368]	; (801b500 <problem_fetch+0x19e9c>)
 801b38e:	461c      	mov	r4, r3
 801b390:	4613      	mov	r3, r2
 801b392:	cb07      	ldmia	r3!, {r0, r1, r2}
 801b394:	6020      	str	r0, [r4, #0]
 801b396:	6061      	str	r1, [r4, #4]
 801b398:	60a2      	str	r2, [r4, #8]
 801b39a:	881b      	ldrh	r3, [r3, #0]
 801b39c:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,8,8,11,13,16,18");
 801b39e:	687b      	ldr	r3, [r7, #4]
 801b3a0:	3304      	adds	r3, #4
 801b3a2:	4a58      	ldr	r2, [pc, #352]	; (801b504 <problem_fetch+0x19ea0>)
 801b3a4:	461d      	mov	r5, r3
 801b3a6:	4614      	mov	r4, r2
 801b3a8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801b3aa:	6028      	str	r0, [r5, #0]
 801b3ac:	6069      	str	r1, [r5, #4]
 801b3ae:	60aa      	str	r2, [r5, #8]
 801b3b0:	60eb      	str	r3, [r5, #12]
 801b3b2:	8823      	ldrh	r3, [r4, #0]
 801b3b4:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 801b3b6:	687b      	ldr	r3, [r7, #4]
 801b3b8:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 801b3bc:	4a52      	ldr	r2, [pc, #328]	; (801b508 <problem_fetch+0x19ea4>)
 801b3be:	461c      	mov	r4, r3
 801b3c0:	4613      	mov	r3, r2
 801b3c2:	cb07      	ldmia	r3!, {r0, r1, r2}
 801b3c4:	6020      	str	r0, [r4, #0]
 801b3c6:	6061      	str	r1, [r4, #4]
 801b3c8:	60a2      	str	r2, [r4, #8]
 801b3ca:	881b      	ldrh	r3, [r3, #0]
 801b3cc:	81a3      	strh	r3, [r4, #12]
			break;
 801b3ce:	f001 b879 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 775 :
			strcpy(p->name,"ACG10");
 801b3d2:	687b      	ldr	r3, [r7, #4]
 801b3d4:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801b3d8:	4a4c      	ldr	r2, [pc, #304]	; (801b50c <problem_fetch+0x19ea8>)
 801b3da:	6810      	ldr	r0, [r2, #0]
 801b3dc:	6018      	str	r0, [r3, #0]
 801b3de:	8892      	ldrh	r2, [r2, #4]
 801b3e0:	809a      	strh	r2, [r3, #4]
			strcpy(p->grade,"6B+");
 801b3e2:	687b      	ldr	r3, [r7, #4]
 801b3e4:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801b3e8:	4a32      	ldr	r2, [pc, #200]	; (801b4b4 <problem_fetch+0x19e50>)
 801b3ea:	6810      	ldr	r0, [r2, #0]
 801b3ec:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 801b3ee:	687b      	ldr	r3, [r7, #4]
 801b3f0:	2207      	movs	r2, #7
 801b3f2:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,E,G,G,E,B,I");
 801b3f4:	687b      	ldr	r3, [r7, #4]
 801b3f6:	33a4      	adds	r3, #164	; 0xa4
 801b3f8:	4a45      	ldr	r2, [pc, #276]	; (801b510 <problem_fetch+0x19eac>)
 801b3fa:	461c      	mov	r4, r3
 801b3fc:	4613      	mov	r3, r2
 801b3fe:	cb07      	ldmia	r3!, {r0, r1, r2}
 801b400:	6020      	str	r0, [r4, #0]
 801b402:	6061      	str	r1, [r4, #4]
 801b404:	60a2      	str	r2, [r4, #8]
 801b406:	881b      	ldrh	r3, [r3, #0]
 801b408:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,8,15,14,12,10,18");
 801b40a:	687b      	ldr	r3, [r7, #4]
 801b40c:	3304      	adds	r3, #4
 801b40e:	4a41      	ldr	r2, [pc, #260]	; (801b514 <problem_fetch+0x19eb0>)
 801b410:	461d      	mov	r5, r3
 801b412:	4614      	mov	r4, r2
 801b414:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801b416:	6028      	str	r0, [r5, #0]
 801b418:	6069      	str	r1, [r5, #4]
 801b41a:	60aa      	str	r2, [r5, #8]
 801b41c:	60eb      	str	r3, [r5, #12]
 801b41e:	8823      	ldrh	r3, [r4, #0]
 801b420:	78a2      	ldrb	r2, [r4, #2]
 801b422:	822b      	strh	r3, [r5, #16]
 801b424:	4613      	mov	r3, r2
 801b426:	74ab      	strb	r3, [r5, #18]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 801b428:	687b      	ldr	r3, [r7, #4]
 801b42a:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 801b42e:	4a36      	ldr	r2, [pc, #216]	; (801b508 <problem_fetch+0x19ea4>)
 801b430:	461c      	mov	r4, r3
 801b432:	4613      	mov	r3, r2
 801b434:	cb07      	ldmia	r3!, {r0, r1, r2}
 801b436:	6020      	str	r0, [r4, #0]
 801b438:	6061      	str	r1, [r4, #4]
 801b43a:	60a2      	str	r2, [r4, #8]
 801b43c:	881b      	ldrh	r3, [r3, #0]
 801b43e:	81a3      	strh	r3, [r4, #12]
			break;
 801b440:	f001 b840 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 776 :
			strcpy(p->name,"ACG8");
 801b444:	687b      	ldr	r3, [r7, #4]
 801b446:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801b44a:	4a33      	ldr	r2, [pc, #204]	; (801b518 <problem_fetch+0x19eb4>)
 801b44c:	6810      	ldr	r0, [r2, #0]
 801b44e:	6018      	str	r0, [r3, #0]
 801b450:	7912      	ldrb	r2, [r2, #4]
 801b452:	711a      	strb	r2, [r3, #4]
			strcpy(p->grade,"6B+");
 801b454:	687b      	ldr	r3, [r7, #4]
 801b456:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801b45a:	4a16      	ldr	r2, [pc, #88]	; (801b4b4 <problem_fetch+0x19e50>)
 801b45c:	6810      	ldr	r0, [r2, #0]
 801b45e:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 801b460:	687b      	ldr	r3, [r7, #4]
 801b462:	2207      	movs	r2, #7
 801b464:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,H,E,E,A,E,D");
 801b466:	687b      	ldr	r3, [r7, #4]
 801b468:	33a4      	adds	r3, #164	; 0xa4
 801b46a:	4a2c      	ldr	r2, [pc, #176]	; (801b51c <problem_fetch+0x19eb8>)
 801b46c:	461c      	mov	r4, r3
 801b46e:	4613      	mov	r3, r2
 801b470:	cb07      	ldmia	r3!, {r0, r1, r2}
 801b472:	6020      	str	r0, [r4, #0]
 801b474:	6061      	str	r1, [r4, #4]
 801b476:	60a2      	str	r2, [r4, #8]
 801b478:	881b      	ldrh	r3, [r3, #0]
 801b47a:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,5,8,12,14,14,18");
 801b47c:	687b      	ldr	r3, [r7, #4]
 801b47e:	3304      	adds	r3, #4
 801b480:	4a27      	ldr	r2, [pc, #156]	; (801b520 <problem_fetch+0x19ebc>)
 801b482:	461d      	mov	r5, r3
 801b484:	4614      	mov	r4, r2
 801b486:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801b488:	6028      	str	r0, [r5, #0]
 801b48a:	6069      	str	r1, [r5, #4]
 801b48c:	60aa      	str	r2, [r5, #8]
 801b48e:	60eb      	str	r3, [r5, #12]
 801b490:	8823      	ldrh	r3, [r4, #0]
 801b492:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,s,d,d,d,d,e");
 801b494:	687b      	ldr	r3, [r7, #4]
 801b496:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 801b49a:	4a09      	ldr	r2, [pc, #36]	; (801b4c0 <problem_fetch+0x19e5c>)
 801b49c:	461c      	mov	r4, r3
 801b49e:	4613      	mov	r3, r2
 801b4a0:	cb07      	ldmia	r3!, {r0, r1, r2}
 801b4a2:	6020      	str	r0, [r4, #0]
 801b4a4:	6061      	str	r1, [r4, #4]
 801b4a6:	60a2      	str	r2, [r4, #8]
 801b4a8:	881b      	ldrh	r3, [r3, #0]
 801b4aa:	81a3      	strh	r3, [r4, #12]
			break;
 801b4ac:	f001 b80a 	b.w	801c4c4 <problem_fetch+0x1ae60>
 801b4b0:	0802cac4 	.word	0x0802cac4
 801b4b4:	08023b24 	.word	0x08023b24
 801b4b8:	0802cad0 	.word	0x0802cad0
 801b4bc:	0802cae0 	.word	0x0802cae0
 801b4c0:	08023b9c 	.word	0x08023b9c
 801b4c4:	0802caf4 	.word	0x0802caf4
 801b4c8:	0802cb00 	.word	0x0802cb00
 801b4cc:	0802cb10 	.word	0x0802cb10
 801b4d0:	08023c48 	.word	0x08023c48
 801b4d4:	0802cb28 	.word	0x0802cb28
 801b4d8:	0802cb30 	.word	0x0802cb30
 801b4dc:	080261d4 	.word	0x080261d4
 801b4e0:	08023b04 	.word	0x08023b04
 801b4e4:	0802cb3c 	.word	0x0802cb3c
 801b4e8:	08023cc4 	.word	0x08023cc4
 801b4ec:	0802cb4c 	.word	0x0802cb4c
 801b4f0:	0802cb5c 	.word	0x0802cb5c
 801b4f4:	0802c510 	.word	0x0802c510
 801b4f8:	0802cb70 	.word	0x0802cb70
 801b4fc:	08023ae4 	.word	0x08023ae4
 801b500:	0802cb7c 	.word	0x0802cb7c
 801b504:	080250b4 	.word	0x080250b4
 801b508:	08023cac 	.word	0x08023cac
 801b50c:	0802cb8c 	.word	0x0802cb8c
 801b510:	0802cb94 	.word	0x0802cb94
 801b514:	0802cba4 	.word	0x0802cba4
 801b518:	0802cbb8 	.word	0x0802cbb8
 801b51c:	0802cbc0 	.word	0x0802cbc0
 801b520:	0802cbd0 	.word	0x0802cbd0
		case 777 :
			strcpy(p->name,"ACG6");
 801b524:	687b      	ldr	r3, [r7, #4]
 801b526:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801b52a:	4ac1      	ldr	r2, [pc, #772]	; (801b830 <problem_fetch+0x1a1cc>)
 801b52c:	6810      	ldr	r0, [r2, #0]
 801b52e:	6018      	str	r0, [r3, #0]
 801b530:	7912      	ldrb	r2, [r2, #4]
 801b532:	711a      	strb	r2, [r3, #4]
			strcpy(p->grade,"7A");
 801b534:	687b      	ldr	r3, [r7, #4]
 801b536:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801b53a:	4abe      	ldr	r2, [pc, #760]	; (801b834 <problem_fetch+0x1a1d0>)
 801b53c:	8811      	ldrh	r1, [r2, #0]
 801b53e:	7892      	ldrb	r2, [r2, #2]
 801b540:	8019      	strh	r1, [r3, #0]
 801b542:	709a      	strb	r2, [r3, #2]
			p->moveSize = 8;
 801b544:	687b      	ldr	r3, [r7, #4]
 801b546:	2208      	movs	r2, #8
 801b548:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,H,G,C,C,C,E,I");
 801b54a:	687b      	ldr	r3, [r7, #4]
 801b54c:	33a4      	adds	r3, #164	; 0xa4
 801b54e:	4aba      	ldr	r2, [pc, #744]	; (801b838 <problem_fetch+0x1a1d4>)
 801b550:	461c      	mov	r4, r3
 801b552:	4615      	mov	r5, r2
 801b554:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801b556:	6020      	str	r0, [r4, #0]
 801b558:	6061      	str	r1, [r4, #4]
 801b55a:	60a2      	str	r2, [r4, #8]
 801b55c:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,10,10,8,13,16,16,18");
 801b55e:	687b      	ldr	r3, [r7, #4]
 801b560:	3304      	adds	r3, #4
 801b562:	4ab6      	ldr	r2, [pc, #728]	; (801b83c <problem_fetch+0x1a1d8>)
 801b564:	461d      	mov	r5, r3
 801b566:	4614      	mov	r4, r2
 801b568:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801b56a:	6028      	str	r0, [r5, #0]
 801b56c:	6069      	str	r1, [r5, #4]
 801b56e:	60aa      	str	r2, [r5, #8]
 801b570:	60eb      	str	r3, [r5, #12]
 801b572:	6820      	ldr	r0, [r4, #0]
 801b574:	6128      	str	r0, [r5, #16]
 801b576:	88a3      	ldrh	r3, [r4, #4]
 801b578:	82ab      	strh	r3, [r5, #20]
			strcpy(p->startFinish,"s,d,d,d,d,d,d,e");
 801b57a:	687b      	ldr	r3, [r7, #4]
 801b57c:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 801b580:	4aaf      	ldr	r2, [pc, #700]	; (801b840 <problem_fetch+0x1a1dc>)
 801b582:	461c      	mov	r4, r3
 801b584:	4615      	mov	r5, r2
 801b586:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801b588:	6020      	str	r0, [r4, #0]
 801b58a:	6061      	str	r1, [r4, #4]
 801b58c:	60a2      	str	r2, [r4, #8]
 801b58e:	60e3      	str	r3, [r4, #12]
			break;
 801b590:	f000 bf98 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 778 :
			strcpy(p->name,"ACG5");
 801b594:	687b      	ldr	r3, [r7, #4]
 801b596:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801b59a:	4aaa      	ldr	r2, [pc, #680]	; (801b844 <problem_fetch+0x1a1e0>)
 801b59c:	6810      	ldr	r0, [r2, #0]
 801b59e:	6018      	str	r0, [r3, #0]
 801b5a0:	7912      	ldrb	r2, [r2, #4]
 801b5a2:	711a      	strb	r2, [r3, #4]
			strcpy(p->grade,"6B+");
 801b5a4:	687b      	ldr	r3, [r7, #4]
 801b5a6:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801b5aa:	4aa7      	ldr	r2, [pc, #668]	; (801b848 <problem_fetch+0x1a1e4>)
 801b5ac:	6810      	ldr	r0, [r2, #0]
 801b5ae:	6018      	str	r0, [r3, #0]
			p->moveSize = 8;
 801b5b0:	687b      	ldr	r3, [r7, #4]
 801b5b2:	2208      	movs	r2, #8
 801b5b4:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"H,C,E,B,E,E,H,D");
 801b5b6:	687b      	ldr	r3, [r7, #4]
 801b5b8:	33a4      	adds	r3, #164	; 0xa4
 801b5ba:	4aa4      	ldr	r2, [pc, #656]	; (801b84c <problem_fetch+0x1a1e8>)
 801b5bc:	461c      	mov	r4, r3
 801b5be:	4615      	mov	r5, r2
 801b5c0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801b5c2:	6020      	str	r0, [r4, #0]
 801b5c4:	6061      	str	r1, [r4, #4]
 801b5c6:	60a2      	str	r2, [r4, #8]
 801b5c8:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,5,8,10,12,14,16,18");
 801b5ca:	687b      	ldr	r3, [r7, #4]
 801b5cc:	3304      	adds	r3, #4
 801b5ce:	4aa0      	ldr	r2, [pc, #640]	; (801b850 <problem_fetch+0x1a1ec>)
 801b5d0:	461d      	mov	r5, r3
 801b5d2:	4614      	mov	r4, r2
 801b5d4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801b5d6:	6028      	str	r0, [r5, #0]
 801b5d8:	6069      	str	r1, [r5, #4]
 801b5da:	60aa      	str	r2, [r5, #8]
 801b5dc:	60eb      	str	r3, [r5, #12]
 801b5de:	6820      	ldr	r0, [r4, #0]
 801b5e0:	6128      	str	r0, [r5, #16]
 801b5e2:	7923      	ldrb	r3, [r4, #4]
 801b5e4:	752b      	strb	r3, [r5, #20]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,e");
 801b5e6:	687b      	ldr	r3, [r7, #4]
 801b5e8:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 801b5ec:	4a99      	ldr	r2, [pc, #612]	; (801b854 <problem_fetch+0x1a1f0>)
 801b5ee:	461c      	mov	r4, r3
 801b5f0:	4615      	mov	r5, r2
 801b5f2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801b5f4:	6020      	str	r0, [r4, #0]
 801b5f6:	6061      	str	r1, [r4, #4]
 801b5f8:	60a2      	str	r2, [r4, #8]
 801b5fa:	60e3      	str	r3, [r4, #12]
			break;
 801b5fc:	f000 bf62 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 779 :
			strcpy(p->name,"E-16");
 801b600:	687b      	ldr	r3, [r7, #4]
 801b602:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801b606:	4a94      	ldr	r2, [pc, #592]	; (801b858 <problem_fetch+0x1a1f4>)
 801b608:	6810      	ldr	r0, [r2, #0]
 801b60a:	6018      	str	r0, [r3, #0]
 801b60c:	7912      	ldrb	r2, [r2, #4]
 801b60e:	711a      	strb	r2, [r3, #4]
			strcpy(p->grade,"6B+");
 801b610:	687b      	ldr	r3, [r7, #4]
 801b612:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801b616:	4a8c      	ldr	r2, [pc, #560]	; (801b848 <problem_fetch+0x1a1e4>)
 801b618:	6810      	ldr	r0, [r2, #0]
 801b61a:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 801b61c:	687b      	ldr	r3, [r7, #4]
 801b61e:	2206      	movs	r2, #6
 801b620:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,C,E,C,E,A");
 801b622:	687b      	ldr	r3, [r7, #4]
 801b624:	33a4      	adds	r3, #164	; 0xa4
 801b626:	4a8d      	ldr	r2, [pc, #564]	; (801b85c <problem_fetch+0x1a1f8>)
 801b628:	461c      	mov	r4, r3
 801b62a:	4613      	mov	r3, r2
 801b62c:	cb07      	ldmia	r3!, {r0, r1, r2}
 801b62e:	6020      	str	r0, [r4, #0]
 801b630:	6061      	str	r1, [r4, #4]
 801b632:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"6,8,9,13,16,18");
 801b634:	687b      	ldr	r3, [r7, #4]
 801b636:	3304      	adds	r3, #4
 801b638:	4a89      	ldr	r2, [pc, #548]	; (801b860 <problem_fetch+0x1a1fc>)
 801b63a:	461c      	mov	r4, r3
 801b63c:	4613      	mov	r3, r2
 801b63e:	cb07      	ldmia	r3!, {r0, r1, r2}
 801b640:	6020      	str	r0, [r4, #0]
 801b642:	6061      	str	r1, [r4, #4]
 801b644:	60a2      	str	r2, [r4, #8]
 801b646:	881a      	ldrh	r2, [r3, #0]
 801b648:	789b      	ldrb	r3, [r3, #2]
 801b64a:	81a2      	strh	r2, [r4, #12]
 801b64c:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 801b64e:	687b      	ldr	r3, [r7, #4]
 801b650:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 801b654:	4a83      	ldr	r2, [pc, #524]	; (801b864 <problem_fetch+0x1a200>)
 801b656:	461c      	mov	r4, r3
 801b658:	4613      	mov	r3, r2
 801b65a:	cb07      	ldmia	r3!, {r0, r1, r2}
 801b65c:	6020      	str	r0, [r4, #0]
 801b65e:	6061      	str	r1, [r4, #4]
 801b660:	60a2      	str	r2, [r4, #8]
			break;
 801b662:	f000 bf2f 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 780 :
			strcpy(p->name,"SCHWARTZ SCHNEIDER");
 801b666:	687b      	ldr	r3, [r7, #4]
 801b668:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801b66c:	4a7e      	ldr	r2, [pc, #504]	; (801b868 <problem_fetch+0x1a204>)
 801b66e:	461d      	mov	r5, r3
 801b670:	4614      	mov	r4, r2
 801b672:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801b674:	6028      	str	r0, [r5, #0]
 801b676:	6069      	str	r1, [r5, #4]
 801b678:	60aa      	str	r2, [r5, #8]
 801b67a:	60eb      	str	r3, [r5, #12]
 801b67c:	8823      	ldrh	r3, [r4, #0]
 801b67e:	78a2      	ldrb	r2, [r4, #2]
 801b680:	822b      	strh	r3, [r5, #16]
 801b682:	4613      	mov	r3, r2
 801b684:	74ab      	strb	r3, [r5, #18]
			strcpy(p->grade,"7A+");
 801b686:	687b      	ldr	r3, [r7, #4]
 801b688:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801b68c:	4a77      	ldr	r2, [pc, #476]	; (801b86c <problem_fetch+0x1a208>)
 801b68e:	6810      	ldr	r0, [r2, #0]
 801b690:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 801b692:	687b      	ldr	r3, [r7, #4]
 801b694:	2207      	movs	r2, #7
 801b696:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,H,D,B,D,E,I");
 801b698:	687b      	ldr	r3, [r7, #4]
 801b69a:	33a4      	adds	r3, #164	; 0xa4
 801b69c:	4a74      	ldr	r2, [pc, #464]	; (801b870 <problem_fetch+0x1a20c>)
 801b69e:	461c      	mov	r4, r3
 801b6a0:	4613      	mov	r3, r2
 801b6a2:	cb07      	ldmia	r3!, {r0, r1, r2}
 801b6a4:	6020      	str	r0, [r4, #0]
 801b6a6:	6061      	str	r1, [r4, #4]
 801b6a8:	60a2      	str	r2, [r4, #8]
 801b6aa:	881b      	ldrh	r3, [r3, #0]
 801b6ac:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,10,11,6,15,16,18");
 801b6ae:	687b      	ldr	r3, [r7, #4]
 801b6b0:	3304      	adds	r3, #4
 801b6b2:	4a70      	ldr	r2, [pc, #448]	; (801b874 <problem_fetch+0x1a210>)
 801b6b4:	461d      	mov	r5, r3
 801b6b6:	4614      	mov	r4, r2
 801b6b8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801b6ba:	6028      	str	r0, [r5, #0]
 801b6bc:	6069      	str	r1, [r5, #4]
 801b6be:	60aa      	str	r2, [r5, #8]
 801b6c0:	60eb      	str	r3, [r5, #12]
 801b6c2:	8823      	ldrh	r3, [r4, #0]
 801b6c4:	78a2      	ldrb	r2, [r4, #2]
 801b6c6:	822b      	strh	r3, [r5, #16]
 801b6c8:	4613      	mov	r3, r2
 801b6ca:	74ab      	strb	r3, [r5, #18]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 801b6cc:	687b      	ldr	r3, [r7, #4]
 801b6ce:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 801b6d2:	4a69      	ldr	r2, [pc, #420]	; (801b878 <problem_fetch+0x1a214>)
 801b6d4:	461c      	mov	r4, r3
 801b6d6:	4613      	mov	r3, r2
 801b6d8:	cb07      	ldmia	r3!, {r0, r1, r2}
 801b6da:	6020      	str	r0, [r4, #0]
 801b6dc:	6061      	str	r1, [r4, #4]
 801b6de:	60a2      	str	r2, [r4, #8]
 801b6e0:	881b      	ldrh	r3, [r3, #0]
 801b6e2:	81a3      	strh	r3, [r4, #12]
			break;
 801b6e4:	f000 beee 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 781 :
			strcpy(p->name,"MELET VAR");
 801b6e8:	687b      	ldr	r3, [r7, #4]
 801b6ea:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801b6ee:	4963      	ldr	r1, [pc, #396]	; (801b87c <problem_fetch+0x1a218>)
 801b6f0:	461a      	mov	r2, r3
 801b6f2:	460b      	mov	r3, r1
 801b6f4:	cb03      	ldmia	r3!, {r0, r1}
 801b6f6:	6010      	str	r0, [r2, #0]
 801b6f8:	6051      	str	r1, [r2, #4]
 801b6fa:	881b      	ldrh	r3, [r3, #0]
 801b6fc:	8113      	strh	r3, [r2, #8]
			strcpy(p->grade,"7B");
 801b6fe:	687b      	ldr	r3, [r7, #4]
 801b700:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801b704:	4a5e      	ldr	r2, [pc, #376]	; (801b880 <problem_fetch+0x1a21c>)
 801b706:	8811      	ldrh	r1, [r2, #0]
 801b708:	7892      	ldrb	r2, [r2, #2]
 801b70a:	8019      	strh	r1, [r3, #0]
 801b70c:	709a      	strb	r2, [r3, #2]
			p->moveSize = 5;
 801b70e:	687b      	ldr	r3, [r7, #4]
 801b710:	2205      	movs	r2, #5
 801b712:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,H,C,G,A");
 801b714:	687b      	ldr	r3, [r7, #4]
 801b716:	33a4      	adds	r3, #164	; 0xa4
 801b718:	495a      	ldr	r1, [pc, #360]	; (801b884 <problem_fetch+0x1a220>)
 801b71a:	461a      	mov	r2, r3
 801b71c:	460b      	mov	r3, r1
 801b71e:	cb03      	ldmia	r3!, {r0, r1}
 801b720:	6010      	str	r0, [r2, #0]
 801b722:	6051      	str	r1, [r2, #4]
 801b724:	881b      	ldrh	r3, [r3, #0]
 801b726:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"5,10,13,17,18");
 801b728:	687b      	ldr	r3, [r7, #4]
 801b72a:	3304      	adds	r3, #4
 801b72c:	4a56      	ldr	r2, [pc, #344]	; (801b888 <problem_fetch+0x1a224>)
 801b72e:	461c      	mov	r4, r3
 801b730:	4613      	mov	r3, r2
 801b732:	cb07      	ldmia	r3!, {r0, r1, r2}
 801b734:	6020      	str	r0, [r4, #0]
 801b736:	6061      	str	r1, [r4, #4]
 801b738:	60a2      	str	r2, [r4, #8]
 801b73a:	881b      	ldrh	r3, [r3, #0]
 801b73c:	81a3      	strh	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,e");
 801b73e:	687b      	ldr	r3, [r7, #4]
 801b740:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 801b744:	4951      	ldr	r1, [pc, #324]	; (801b88c <problem_fetch+0x1a228>)
 801b746:	461a      	mov	r2, r3
 801b748:	460b      	mov	r3, r1
 801b74a:	cb03      	ldmia	r3!, {r0, r1}
 801b74c:	6010      	str	r0, [r2, #0]
 801b74e:	6051      	str	r1, [r2, #4]
 801b750:	881b      	ldrh	r3, [r3, #0]
 801b752:	8113      	strh	r3, [r2, #8]
			break;
 801b754:	f000 beb6 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 782 :
			strcpy(p->name,"MELET");
 801b758:	687b      	ldr	r3, [r7, #4]
 801b75a:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801b75e:	4a4c      	ldr	r2, [pc, #304]	; (801b890 <problem_fetch+0x1a22c>)
 801b760:	6810      	ldr	r0, [r2, #0]
 801b762:	6018      	str	r0, [r3, #0]
 801b764:	8892      	ldrh	r2, [r2, #4]
 801b766:	809a      	strh	r2, [r3, #4]
			strcpy(p->grade,"7A+");
 801b768:	687b      	ldr	r3, [r7, #4]
 801b76a:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801b76e:	4a3f      	ldr	r2, [pc, #252]	; (801b86c <problem_fetch+0x1a208>)
 801b770:	6810      	ldr	r0, [r2, #0]
 801b772:	6018      	str	r0, [r3, #0]
			p->moveSize = 5;
 801b774:	687b      	ldr	r3, [r7, #4]
 801b776:	2205      	movs	r2, #5
 801b778:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"C,H,H,I,J");
 801b77a:	687b      	ldr	r3, [r7, #4]
 801b77c:	33a4      	adds	r3, #164	; 0xa4
 801b77e:	4945      	ldr	r1, [pc, #276]	; (801b894 <problem_fetch+0x1a230>)
 801b780:	461a      	mov	r2, r3
 801b782:	460b      	mov	r3, r1
 801b784:	cb03      	ldmia	r3!, {r0, r1}
 801b786:	6010      	str	r0, [r2, #0]
 801b788:	6051      	str	r1, [r2, #4]
 801b78a:	881b      	ldrh	r3, [r3, #0]
 801b78c:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"13,16,10,18,5");
 801b78e:	687b      	ldr	r3, [r7, #4]
 801b790:	3304      	adds	r3, #4
 801b792:	4a41      	ldr	r2, [pc, #260]	; (801b898 <problem_fetch+0x1a234>)
 801b794:	461c      	mov	r4, r3
 801b796:	4613      	mov	r3, r2
 801b798:	cb07      	ldmia	r3!, {r0, r1, r2}
 801b79a:	6020      	str	r0, [r4, #0]
 801b79c:	6061      	str	r1, [r4, #4]
 801b79e:	60a2      	str	r2, [r4, #8]
 801b7a0:	881b      	ldrh	r3, [r3, #0]
 801b7a2:	81a3      	strh	r3, [r4, #12]
			strcpy(p->startFinish,"d,d,d,e,s");
 801b7a4:	687b      	ldr	r3, [r7, #4]
 801b7a6:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 801b7aa:	493c      	ldr	r1, [pc, #240]	; (801b89c <problem_fetch+0x1a238>)
 801b7ac:	461a      	mov	r2, r3
 801b7ae:	460b      	mov	r3, r1
 801b7b0:	cb03      	ldmia	r3!, {r0, r1}
 801b7b2:	6010      	str	r0, [r2, #0]
 801b7b4:	6051      	str	r1, [r2, #4]
 801b7b6:	881b      	ldrh	r3, [r3, #0]
 801b7b8:	8113      	strh	r3, [r2, #8]
			break;
 801b7ba:	f000 be83 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 783 :
			strcpy(p->name,"LADYBUG'S HEEL");
 801b7be:	687b      	ldr	r3, [r7, #4]
 801b7c0:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801b7c4:	4a36      	ldr	r2, [pc, #216]	; (801b8a0 <problem_fetch+0x1a23c>)
 801b7c6:	461c      	mov	r4, r3
 801b7c8:	4613      	mov	r3, r2
 801b7ca:	cb07      	ldmia	r3!, {r0, r1, r2}
 801b7cc:	6020      	str	r0, [r4, #0]
 801b7ce:	6061      	str	r1, [r4, #4]
 801b7d0:	60a2      	str	r2, [r4, #8]
 801b7d2:	881a      	ldrh	r2, [r3, #0]
 801b7d4:	789b      	ldrb	r3, [r3, #2]
 801b7d6:	81a2      	strh	r2, [r4, #12]
 801b7d8:	73a3      	strb	r3, [r4, #14]
			strcpy(p->grade,"7A");
 801b7da:	687b      	ldr	r3, [r7, #4]
 801b7dc:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801b7e0:	4a14      	ldr	r2, [pc, #80]	; (801b834 <problem_fetch+0x1a1d0>)
 801b7e2:	8811      	ldrh	r1, [r2, #0]
 801b7e4:	7892      	ldrb	r2, [r2, #2]
 801b7e6:	8019      	strh	r1, [r3, #0]
 801b7e8:	709a      	strb	r2, [r3, #2]
			p->moveSize = 6;
 801b7ea:	687b      	ldr	r3, [r7, #4]
 801b7ec:	2206      	movs	r2, #6
 801b7ee:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,G,H,C,H,D");
 801b7f0:	687b      	ldr	r3, [r7, #4]
 801b7f2:	33a4      	adds	r3, #164	; 0xa4
 801b7f4:	4a2b      	ldr	r2, [pc, #172]	; (801b8a4 <problem_fetch+0x1a240>)
 801b7f6:	461c      	mov	r4, r3
 801b7f8:	4613      	mov	r3, r2
 801b7fa:	cb07      	ldmia	r3!, {r0, r1, r2}
 801b7fc:	6020      	str	r0, [r4, #0]
 801b7fe:	6061      	str	r1, [r4, #4]
 801b800:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,6,10,13,16,18");
 801b802:	687b      	ldr	r3, [r7, #4]
 801b804:	3304      	adds	r3, #4
 801b806:	4a28      	ldr	r2, [pc, #160]	; (801b8a8 <problem_fetch+0x1a244>)
 801b808:	461c      	mov	r4, r3
 801b80a:	4615      	mov	r5, r2
 801b80c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801b80e:	6020      	str	r0, [r4, #0]
 801b810:	6061      	str	r1, [r4, #4]
 801b812:	60a2      	str	r2, [r4, #8]
 801b814:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,s,d,d,d,e");
 801b816:	687b      	ldr	r3, [r7, #4]
 801b818:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 801b81c:	4a23      	ldr	r2, [pc, #140]	; (801b8ac <problem_fetch+0x1a248>)
 801b81e:	461c      	mov	r4, r3
 801b820:	4613      	mov	r3, r2
 801b822:	cb07      	ldmia	r3!, {r0, r1, r2}
 801b824:	6020      	str	r0, [r4, #0]
 801b826:	6061      	str	r1, [r4, #4]
 801b828:	60a2      	str	r2, [r4, #8]
			break;
 801b82a:	f000 be4b 	b.w	801c4c4 <problem_fetch+0x1ae60>
 801b82e:	bf00      	nop
 801b830:	0802cbe4 	.word	0x0802cbe4
 801b834:	08023ae4 	.word	0x08023ae4
 801b838:	0802cbec 	.word	0x0802cbec
 801b83c:	0802cbfc 	.word	0x0802cbfc
 801b840:	08023d34 	.word	0x08023d34
 801b844:	0802cc14 	.word	0x0802cc14
 801b848:	08023b24 	.word	0x08023b24
 801b84c:	0802cc1c 	.word	0x0802cc1c
 801b850:	0802cc2c 	.word	0x0802cc2c
 801b854:	08023c48 	.word	0x08023c48
 801b858:	0802cc44 	.word	0x0802cc44
 801b85c:	0802cc4c 	.word	0x0802cc4c
 801b860:	0802cc58 	.word	0x0802cc58
 801b864:	08023ec0 	.word	0x08023ec0
 801b868:	0802cc68 	.word	0x0802cc68
 801b86c:	08023cc4 	.word	0x08023cc4
 801b870:	0802cc7c 	.word	0x0802cc7c
 801b874:	0802cc8c 	.word	0x0802cc8c
 801b878:	08023cac 	.word	0x08023cac
 801b87c:	0802cca0 	.word	0x0802cca0
 801b880:	0802421c 	.word	0x0802421c
 801b884:	0802ccac 	.word	0x0802ccac
 801b888:	08027c98 	.word	0x08027c98
 801b88c:	08023ff0 	.word	0x08023ff0
 801b890:	0802ccb8 	.word	0x0802ccb8
 801b894:	0802ccc0 	.word	0x0802ccc0
 801b898:	0802cccc 	.word	0x0802cccc
 801b89c:	08025230 	.word	0x08025230
 801b8a0:	0802ccdc 	.word	0x0802ccdc
 801b8a4:	0802ccec 	.word	0x0802ccec
 801b8a8:	0802ccf8 	.word	0x0802ccf8
 801b8ac:	08023b04 	.word	0x08023b04
		case 784 :
			strcpy(p->name,"LADYBUG");
 801b8b0:	687b      	ldr	r3, [r7, #4]
 801b8b2:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801b8b6:	49a5      	ldr	r1, [pc, #660]	; (801bb4c <problem_fetch+0x1a4e8>)
 801b8b8:	461a      	mov	r2, r3
 801b8ba:	460b      	mov	r3, r1
 801b8bc:	cb03      	ldmia	r3!, {r0, r1}
 801b8be:	6010      	str	r0, [r2, #0]
 801b8c0:	6051      	str	r1, [r2, #4]
			strcpy(p->grade,"7A+");
 801b8c2:	687b      	ldr	r3, [r7, #4]
 801b8c4:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801b8c8:	4aa1      	ldr	r2, [pc, #644]	; (801bb50 <problem_fetch+0x1a4ec>)
 801b8ca:	6810      	ldr	r0, [r2, #0]
 801b8cc:	6018      	str	r0, [r3, #0]
			p->moveSize = 8;
 801b8ce:	687b      	ldr	r3, [r7, #4]
 801b8d0:	2208      	movs	r2, #8
 801b8d2:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"A,A,C,D,F,G,H,J");
 801b8d4:	687b      	ldr	r3, [r7, #4]
 801b8d6:	33a4      	adds	r3, #164	; 0xa4
 801b8d8:	4a9e      	ldr	r2, [pc, #632]	; (801bb54 <problem_fetch+0x1a4f0>)
 801b8da:	461c      	mov	r4, r3
 801b8dc:	4615      	mov	r5, r2
 801b8de:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801b8e0:	6020      	str	r0, [r4, #0]
 801b8e2:	6061      	str	r1, [r4, #4]
 801b8e4:	60a2      	str	r2, [r4, #8]
 801b8e6:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"9,14,13,18,11,6,10,5");
 801b8e8:	687b      	ldr	r3, [r7, #4]
 801b8ea:	3304      	adds	r3, #4
 801b8ec:	4a9a      	ldr	r2, [pc, #616]	; (801bb58 <problem_fetch+0x1a4f4>)
 801b8ee:	461d      	mov	r5, r3
 801b8f0:	4614      	mov	r4, r2
 801b8f2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801b8f4:	6028      	str	r0, [r5, #0]
 801b8f6:	6069      	str	r1, [r5, #4]
 801b8f8:	60aa      	str	r2, [r5, #8]
 801b8fa:	60eb      	str	r3, [r5, #12]
 801b8fc:	6820      	ldr	r0, [r4, #0]
 801b8fe:	6128      	str	r0, [r5, #16]
 801b900:	7923      	ldrb	r3, [r4, #4]
 801b902:	752b      	strb	r3, [r5, #20]
			strcpy(p->startFinish,"d,d,d,e,d,s,d,s");
 801b904:	687b      	ldr	r3, [r7, #4]
 801b906:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 801b90a:	4a94      	ldr	r2, [pc, #592]	; (801bb5c <problem_fetch+0x1a4f8>)
 801b90c:	461c      	mov	r4, r3
 801b90e:	4615      	mov	r5, r2
 801b910:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801b912:	6020      	str	r0, [r4, #0]
 801b914:	6061      	str	r1, [r4, #4]
 801b916:	60a2      	str	r2, [r4, #8]
 801b918:	60e3      	str	r3, [r4, #12]
			break;
 801b91a:	f000 bdd3 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 785 :
			strcpy(p->name,"ANA");
 801b91e:	687b      	ldr	r3, [r7, #4]
 801b920:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801b924:	4a8e      	ldr	r2, [pc, #568]	; (801bb60 <problem_fetch+0x1a4fc>)
 801b926:	6810      	ldr	r0, [r2, #0]
 801b928:	6018      	str	r0, [r3, #0]
			strcpy(p->grade,"6B+");
 801b92a:	687b      	ldr	r3, [r7, #4]
 801b92c:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801b930:	4a8c      	ldr	r2, [pc, #560]	; (801bb64 <problem_fetch+0x1a500>)
 801b932:	6810      	ldr	r0, [r2, #0]
 801b934:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 801b936:	687b      	ldr	r3, [r7, #4]
 801b938:	2206      	movs	r2, #6
 801b93a:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"H,J,I,H,E,D");
 801b93c:	687b      	ldr	r3, [r7, #4]
 801b93e:	33a4      	adds	r3, #164	; 0xa4
 801b940:	4a89      	ldr	r2, [pc, #548]	; (801bb68 <problem_fetch+0x1a504>)
 801b942:	461c      	mov	r4, r3
 801b944:	4613      	mov	r3, r2
 801b946:	cb07      	ldmia	r3!, {r0, r1, r2}
 801b948:	6020      	str	r0, [r4, #0]
 801b94a:	6061      	str	r1, [r4, #4]
 801b94c:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,7,10,13,16,18");
 801b94e:	687b      	ldr	r3, [r7, #4]
 801b950:	3304      	adds	r3, #4
 801b952:	4a86      	ldr	r2, [pc, #536]	; (801bb6c <problem_fetch+0x1a508>)
 801b954:	461c      	mov	r4, r3
 801b956:	4615      	mov	r5, r2
 801b958:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801b95a:	6020      	str	r0, [r4, #0]
 801b95c:	6061      	str	r1, [r4, #4]
 801b95e:	60a2      	str	r2, [r4, #8]
 801b960:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 801b962:	687b      	ldr	r3, [r7, #4]
 801b964:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 801b968:	4a81      	ldr	r2, [pc, #516]	; (801bb70 <problem_fetch+0x1a50c>)
 801b96a:	461c      	mov	r4, r3
 801b96c:	4613      	mov	r3, r2
 801b96e:	cb07      	ldmia	r3!, {r0, r1, r2}
 801b970:	6020      	str	r0, [r4, #0]
 801b972:	6061      	str	r1, [r4, #4]
 801b974:	60a2      	str	r2, [r4, #8]
			break;
 801b976:	f000 bda5 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 786 :
			strcpy(p->name,"CHEETAHSAURUS");
 801b97a:	687b      	ldr	r3, [r7, #4]
 801b97c:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801b980:	4a7c      	ldr	r2, [pc, #496]	; (801bb74 <problem_fetch+0x1a510>)
 801b982:	461c      	mov	r4, r3
 801b984:	4613      	mov	r3, r2
 801b986:	cb07      	ldmia	r3!, {r0, r1, r2}
 801b988:	6020      	str	r0, [r4, #0]
 801b98a:	6061      	str	r1, [r4, #4]
 801b98c:	60a2      	str	r2, [r4, #8]
 801b98e:	881b      	ldrh	r3, [r3, #0]
 801b990:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade,"6C");
 801b992:	687b      	ldr	r3, [r7, #4]
 801b994:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801b998:	4a77      	ldr	r2, [pc, #476]	; (801bb78 <problem_fetch+0x1a514>)
 801b99a:	8811      	ldrh	r1, [r2, #0]
 801b99c:	7892      	ldrb	r2, [r2, #2]
 801b99e:	8019      	strh	r1, [r3, #0]
 801b9a0:	709a      	strb	r2, [r3, #2]
			p->moveSize = 8;
 801b9a2:	687b      	ldr	r3, [r7, #4]
 801b9a4:	2208      	movs	r2, #8
 801b9a6:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"H,H,E,H,G,I,G,I");
 801b9a8:	687b      	ldr	r3, [r7, #4]
 801b9aa:	33a4      	adds	r3, #164	; 0xa4
 801b9ac:	4a73      	ldr	r2, [pc, #460]	; (801bb7c <problem_fetch+0x1a518>)
 801b9ae:	461c      	mov	r4, r3
 801b9b0:	4615      	mov	r5, r2
 801b9b2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801b9b4:	6020      	str	r0, [r4, #0]
 801b9b6:	6061      	str	r1, [r4, #4]
 801b9b8:	60a2      	str	r2, [r4, #8]
 801b9ba:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,8,9,12,14,15,17,18");
 801b9bc:	687b      	ldr	r3, [r7, #4]
 801b9be:	3304      	adds	r3, #4
 801b9c0:	4a6f      	ldr	r2, [pc, #444]	; (801bb80 <problem_fetch+0x1a51c>)
 801b9c2:	461d      	mov	r5, r3
 801b9c4:	4614      	mov	r4, r2
 801b9c6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801b9c8:	6028      	str	r0, [r5, #0]
 801b9ca:	6069      	str	r1, [r5, #4]
 801b9cc:	60aa      	str	r2, [r5, #8]
 801b9ce:	60eb      	str	r3, [r5, #12]
 801b9d0:	6820      	ldr	r0, [r4, #0]
 801b9d2:	6128      	str	r0, [r5, #16]
 801b9d4:	7923      	ldrb	r3, [r4, #4]
 801b9d6:	752b      	strb	r3, [r5, #20]
			strcpy(p->startFinish,"s,d,d,d,d,d,d,e");
 801b9d8:	687b      	ldr	r3, [r7, #4]
 801b9da:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 801b9de:	4a69      	ldr	r2, [pc, #420]	; (801bb84 <problem_fetch+0x1a520>)
 801b9e0:	461c      	mov	r4, r3
 801b9e2:	4615      	mov	r5, r2
 801b9e4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801b9e6:	6020      	str	r0, [r4, #0]
 801b9e8:	6061      	str	r1, [r4, #4]
 801b9ea:	60a2      	str	r2, [r4, #8]
 801b9ec:	60e3      	str	r3, [r4, #12]
			break;
 801b9ee:	f000 bd69 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 787 :
			strcpy(p->name,"WAR OF THE TODDS");
 801b9f2:	687b      	ldr	r3, [r7, #4]
 801b9f4:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801b9f8:	4a63      	ldr	r2, [pc, #396]	; (801bb88 <problem_fetch+0x1a524>)
 801b9fa:	461d      	mov	r5, r3
 801b9fc:	4614      	mov	r4, r2
 801b9fe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801ba00:	6028      	str	r0, [r5, #0]
 801ba02:	6069      	str	r1, [r5, #4]
 801ba04:	60aa      	str	r2, [r5, #8]
 801ba06:	60eb      	str	r3, [r5, #12]
 801ba08:	7823      	ldrb	r3, [r4, #0]
 801ba0a:	742b      	strb	r3, [r5, #16]
			strcpy(p->grade,"7B+");
 801ba0c:	687b      	ldr	r3, [r7, #4]
 801ba0e:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801ba12:	4a5e      	ldr	r2, [pc, #376]	; (801bb8c <problem_fetch+0x1a528>)
 801ba14:	6810      	ldr	r0, [r2, #0]
 801ba16:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 801ba18:	687b      	ldr	r3, [r7, #4]
 801ba1a:	2206      	movs	r2, #6
 801ba1c:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,G,I,I,H,D");
 801ba1e:	687b      	ldr	r3, [r7, #4]
 801ba20:	33a4      	adds	r3, #164	; 0xa4
 801ba22:	4a5b      	ldr	r2, [pc, #364]	; (801bb90 <problem_fetch+0x1a52c>)
 801ba24:	461c      	mov	r4, r3
 801ba26:	4613      	mov	r3, r2
 801ba28:	cb07      	ldmia	r3!, {r0, r1, r2}
 801ba2a:	6020      	str	r0, [r4, #0]
 801ba2c:	6061      	str	r1, [r4, #4]
 801ba2e:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,9,9,15,16,18");
 801ba30:	687b      	ldr	r3, [r7, #4]
 801ba32:	3304      	adds	r3, #4
 801ba34:	4a57      	ldr	r2, [pc, #348]	; (801bb94 <problem_fetch+0x1a530>)
 801ba36:	461c      	mov	r4, r3
 801ba38:	4613      	mov	r3, r2
 801ba3a:	cb07      	ldmia	r3!, {r0, r1, r2}
 801ba3c:	6020      	str	r0, [r4, #0]
 801ba3e:	6061      	str	r1, [r4, #4]
 801ba40:	60a2      	str	r2, [r4, #8]
 801ba42:	881a      	ldrh	r2, [r3, #0]
 801ba44:	789b      	ldrb	r3, [r3, #2]
 801ba46:	81a2      	strh	r2, [r4, #12]
 801ba48:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 801ba4a:	687b      	ldr	r3, [r7, #4]
 801ba4c:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 801ba50:	4a47      	ldr	r2, [pc, #284]	; (801bb70 <problem_fetch+0x1a50c>)
 801ba52:	461c      	mov	r4, r3
 801ba54:	4613      	mov	r3, r2
 801ba56:	cb07      	ldmia	r3!, {r0, r1, r2}
 801ba58:	6020      	str	r0, [r4, #0]
 801ba5a:	6061      	str	r1, [r4, #4]
 801ba5c:	60a2      	str	r2, [r4, #8]
			break;
 801ba5e:	f000 bd31 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 788 :
			strcpy(p->name,"AMIT 1.1");
 801ba62:	687b      	ldr	r3, [r7, #4]
 801ba64:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801ba68:	494b      	ldr	r1, [pc, #300]	; (801bb98 <problem_fetch+0x1a534>)
 801ba6a:	461a      	mov	r2, r3
 801ba6c:	460b      	mov	r3, r1
 801ba6e:	cb03      	ldmia	r3!, {r0, r1}
 801ba70:	6010      	str	r0, [r2, #0]
 801ba72:	6051      	str	r1, [r2, #4]
 801ba74:	781b      	ldrb	r3, [r3, #0]
 801ba76:	7213      	strb	r3, [r2, #8]
			strcpy(p->grade,"6C");
 801ba78:	687b      	ldr	r3, [r7, #4]
 801ba7a:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801ba7e:	4a3e      	ldr	r2, [pc, #248]	; (801bb78 <problem_fetch+0x1a514>)
 801ba80:	8811      	ldrh	r1, [r2, #0]
 801ba82:	7892      	ldrb	r2, [r2, #2]
 801ba84:	8019      	strh	r1, [r3, #0]
 801ba86:	709a      	strb	r2, [r3, #2]
			p->moveSize = 6;
 801ba88:	687b      	ldr	r3, [r7, #4]
 801ba8a:	2206      	movs	r2, #6
 801ba8c:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,H,C,E,D,D");
 801ba8e:	687b      	ldr	r3, [r7, #4]
 801ba90:	33a4      	adds	r3, #164	; 0xa4
 801ba92:	4a42      	ldr	r2, [pc, #264]	; (801bb9c <problem_fetch+0x1a538>)
 801ba94:	461c      	mov	r4, r3
 801ba96:	4613      	mov	r3, r2
 801ba98:	cb07      	ldmia	r3!, {r0, r1, r2}
 801ba9a:	6020      	str	r0, [r4, #0]
 801ba9c:	6061      	str	r1, [r4, #4]
 801ba9e:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,8,8,12,15,18");
 801baa0:	687b      	ldr	r3, [r7, #4]
 801baa2:	3304      	adds	r3, #4
 801baa4:	4a3e      	ldr	r2, [pc, #248]	; (801bba0 <problem_fetch+0x1a53c>)
 801baa6:	461c      	mov	r4, r3
 801baa8:	4613      	mov	r3, r2
 801baaa:	cb07      	ldmia	r3!, {r0, r1, r2}
 801baac:	6020      	str	r0, [r4, #0]
 801baae:	6061      	str	r1, [r4, #4]
 801bab0:	60a2      	str	r2, [r4, #8]
 801bab2:	881a      	ldrh	r2, [r3, #0]
 801bab4:	789b      	ldrb	r3, [r3, #2]
 801bab6:	81a2      	strh	r2, [r4, #12]
 801bab8:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 801baba:	687b      	ldr	r3, [r7, #4]
 801babc:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 801bac0:	4a2b      	ldr	r2, [pc, #172]	; (801bb70 <problem_fetch+0x1a50c>)
 801bac2:	461c      	mov	r4, r3
 801bac4:	4613      	mov	r3, r2
 801bac6:	cb07      	ldmia	r3!, {r0, r1, r2}
 801bac8:	6020      	str	r0, [r4, #0]
 801baca:	6061      	str	r1, [r4, #4]
 801bacc:	60a2      	str	r2, [r4, #8]
			break;
 801bace:	f000 bcf9 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 789 :
			strcpy(p->name,"CRANKSHAFT");
 801bad2:	687b      	ldr	r3, [r7, #4]
 801bad4:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801bad8:	4932      	ldr	r1, [pc, #200]	; (801bba4 <problem_fetch+0x1a540>)
 801bada:	461a      	mov	r2, r3
 801badc:	460b      	mov	r3, r1
 801bade:	cb03      	ldmia	r3!, {r0, r1}
 801bae0:	6010      	str	r0, [r2, #0]
 801bae2:	6051      	str	r1, [r2, #4]
 801bae4:	8819      	ldrh	r1, [r3, #0]
 801bae6:	789b      	ldrb	r3, [r3, #2]
 801bae8:	8111      	strh	r1, [r2, #8]
 801baea:	7293      	strb	r3, [r2, #10]
			strcpy(p->grade,"6C");
 801baec:	687b      	ldr	r3, [r7, #4]
 801baee:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801baf2:	4a21      	ldr	r2, [pc, #132]	; (801bb78 <problem_fetch+0x1a514>)
 801baf4:	8811      	ldrh	r1, [r2, #0]
 801baf6:	7892      	ldrb	r2, [r2, #2]
 801baf8:	8019      	strh	r1, [r3, #0]
 801bafa:	709a      	strb	r2, [r3, #2]
			p->moveSize = 7;
 801bafc:	687b      	ldr	r3, [r7, #4]
 801bafe:	2207      	movs	r2, #7
 801bb00:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"C,H,G,F,E,B,D");
 801bb02:	687b      	ldr	r3, [r7, #4]
 801bb04:	33a4      	adds	r3, #164	; 0xa4
 801bb06:	4a28      	ldr	r2, [pc, #160]	; (801bba8 <problem_fetch+0x1a544>)
 801bb08:	461c      	mov	r4, r3
 801bb0a:	4613      	mov	r3, r2
 801bb0c:	cb07      	ldmia	r3!, {r0, r1, r2}
 801bb0e:	6020      	str	r0, [r4, #0]
 801bb10:	6061      	str	r1, [r4, #4]
 801bb12:	60a2      	str	r2, [r4, #8]
 801bb14:	881b      	ldrh	r3, [r3, #0]
 801bb16:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,5,9,11,12,15,18");
 801bb18:	687b      	ldr	r3, [r7, #4]
 801bb1a:	3304      	adds	r3, #4
 801bb1c:	4a23      	ldr	r2, [pc, #140]	; (801bbac <problem_fetch+0x1a548>)
 801bb1e:	461d      	mov	r5, r3
 801bb20:	4614      	mov	r4, r2
 801bb22:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801bb24:	6028      	str	r0, [r5, #0]
 801bb26:	6069      	str	r1, [r5, #4]
 801bb28:	60aa      	str	r2, [r5, #8]
 801bb2a:	60eb      	str	r3, [r5, #12]
 801bb2c:	8823      	ldrh	r3, [r4, #0]
 801bb2e:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,s,d,d,d,d,e");
 801bb30:	687b      	ldr	r3, [r7, #4]
 801bb32:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 801bb36:	4a1e      	ldr	r2, [pc, #120]	; (801bbb0 <problem_fetch+0x1a54c>)
 801bb38:	461c      	mov	r4, r3
 801bb3a:	4613      	mov	r3, r2
 801bb3c:	cb07      	ldmia	r3!, {r0, r1, r2}
 801bb3e:	6020      	str	r0, [r4, #0]
 801bb40:	6061      	str	r1, [r4, #4]
 801bb42:	60a2      	str	r2, [r4, #8]
 801bb44:	881b      	ldrh	r3, [r3, #0]
 801bb46:	81a3      	strh	r3, [r4, #12]
			break;
 801bb48:	f000 bcbc 	b.w	801c4c4 <problem_fetch+0x1ae60>
 801bb4c:	0802cd08 	.word	0x0802cd08
 801bb50:	08023cc4 	.word	0x08023cc4
 801bb54:	0802cd10 	.word	0x0802cd10
 801bb58:	0802cd20 	.word	0x0802cd20
 801bb5c:	0802cd38 	.word	0x0802cd38
 801bb60:	0802cd48 	.word	0x0802cd48
 801bb64:	08023b24 	.word	0x08023b24
 801bb68:	0802cd4c 	.word	0x0802cd4c
 801bb6c:	0802b4f4 	.word	0x0802b4f4
 801bb70:	08023ec0 	.word	0x08023ec0
 801bb74:	0802cd58 	.word	0x0802cd58
 801bb78:	08023bf0 	.word	0x08023bf0
 801bb7c:	0802cd68 	.word	0x0802cd68
 801bb80:	0802cd78 	.word	0x0802cd78
 801bb84:	08023d34 	.word	0x08023d34
 801bb88:	0802cd90 	.word	0x0802cd90
 801bb8c:	08023c60 	.word	0x08023c60
 801bb90:	0802cda4 	.word	0x0802cda4
 801bb94:	0802cdb0 	.word	0x0802cdb0
 801bb98:	0802cdc0 	.word	0x0802cdc0
 801bb9c:	0802cdcc 	.word	0x0802cdcc
 801bba0:	08027c34 	.word	0x08027c34
 801bba4:	0802cdd8 	.word	0x0802cdd8
 801bba8:	0802cde4 	.word	0x0802cde4
 801bbac:	0802cdf4 	.word	0x0802cdf4
 801bbb0:	08023b9c 	.word	0x08023b9c
		case 790 :
			strcpy(p->name,"THE LADDER");
 801bbb4:	687b      	ldr	r3, [r7, #4]
 801bbb6:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801bbba:	49b6      	ldr	r1, [pc, #728]	; (801be94 <problem_fetch+0x1a830>)
 801bbbc:	461a      	mov	r2, r3
 801bbbe:	460b      	mov	r3, r1
 801bbc0:	cb03      	ldmia	r3!, {r0, r1}
 801bbc2:	6010      	str	r0, [r2, #0]
 801bbc4:	6051      	str	r1, [r2, #4]
 801bbc6:	8819      	ldrh	r1, [r3, #0]
 801bbc8:	789b      	ldrb	r3, [r3, #2]
 801bbca:	8111      	strh	r1, [r2, #8]
 801bbcc:	7293      	strb	r3, [r2, #10]
			strcpy(p->grade,"6B+");
 801bbce:	687b      	ldr	r3, [r7, #4]
 801bbd0:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801bbd4:	4ab0      	ldr	r2, [pc, #704]	; (801be98 <problem_fetch+0x1a834>)
 801bbd6:	6810      	ldr	r0, [r2, #0]
 801bbd8:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 801bbda:	687b      	ldr	r3, [r7, #4]
 801bbdc:	2207      	movs	r2, #7
 801bbde:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"H,J,I,J,I,K,I");
 801bbe0:	687b      	ldr	r3, [r7, #4]
 801bbe2:	33a4      	adds	r3, #164	; 0xa4
 801bbe4:	4aad      	ldr	r2, [pc, #692]	; (801be9c <problem_fetch+0x1a838>)
 801bbe6:	461c      	mov	r4, r3
 801bbe8:	4613      	mov	r3, r2
 801bbea:	cb07      	ldmia	r3!, {r0, r1, r2}
 801bbec:	6020      	str	r0, [r4, #0]
 801bbee:	6061      	str	r1, [r4, #4]
 801bbf0:	60a2      	str	r2, [r4, #8]
 801bbf2:	881b      	ldrh	r3, [r3, #0]
 801bbf4:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,7,10,13,15,16,18");
 801bbf6:	687b      	ldr	r3, [r7, #4]
 801bbf8:	3304      	adds	r3, #4
 801bbfa:	4aa9      	ldr	r2, [pc, #676]	; (801bea0 <problem_fetch+0x1a83c>)
 801bbfc:	461d      	mov	r5, r3
 801bbfe:	4614      	mov	r4, r2
 801bc00:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801bc02:	6028      	str	r0, [r5, #0]
 801bc04:	6069      	str	r1, [r5, #4]
 801bc06:	60aa      	str	r2, [r5, #8]
 801bc08:	60eb      	str	r3, [r5, #12]
 801bc0a:	8823      	ldrh	r3, [r4, #0]
 801bc0c:	78a2      	ldrb	r2, [r4, #2]
 801bc0e:	822b      	strh	r3, [r5, #16]
 801bc10:	4613      	mov	r3, r2
 801bc12:	74ab      	strb	r3, [r5, #18]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 801bc14:	687b      	ldr	r3, [r7, #4]
 801bc16:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 801bc1a:	4aa2      	ldr	r2, [pc, #648]	; (801bea4 <problem_fetch+0x1a840>)
 801bc1c:	461c      	mov	r4, r3
 801bc1e:	4613      	mov	r3, r2
 801bc20:	cb07      	ldmia	r3!, {r0, r1, r2}
 801bc22:	6020      	str	r0, [r4, #0]
 801bc24:	6061      	str	r1, [r4, #4]
 801bc26:	60a2      	str	r2, [r4, #8]
 801bc28:	881b      	ldrh	r3, [r3, #0]
 801bc2a:	81a3      	strh	r3, [r4, #12]
			break;
 801bc2c:	f000 bc4a 	b.w	801c4c4 <problem_fetch+0x1ae60>
		case 791 :
			strcpy(p->name,"SALAD DAYS");
 801bc30:	687b      	ldr	r3, [r7, #4]
 801bc32:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801bc36:	499c      	ldr	r1, [pc, #624]	; (801bea8 <problem_fetch+0x1a844>)
 801bc38:	461a      	mov	r2, r3
 801bc3a:	460b      	mov	r3, r1
 801bc3c:	cb03      	ldmia	r3!, {r0, r1}
 801bc3e:	6010      	str	r0, [r2, #0]
 801bc40:	6051      	str	r1, [r2, #4]
 801bc42:	8819      	ldrh	r1, [r3, #0]
 801bc44:	789b      	ldrb	r3, [r3, #2]
 801bc46:	8111      	strh	r1, [r2, #8]
 801bc48:	7293      	strb	r3, [r2, #10]
			strcpy(p->grade,"7A");
 801bc4a:	687b      	ldr	r3, [r7, #4]
 801bc4c:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801bc50:	4a96      	ldr	r2, [pc, #600]	; (801beac <problem_fetch+0x1a848>)
 801bc52:	8811      	ldrh	r1, [r2, #0]
 801bc54:	7892      	ldrb	r2, [r2, #2]
 801bc56:	8019      	strh	r1, [r3, #0]
 801bc58:	709a      	strb	r2, [r3, #2]
			p->moveSize = 12;
 801bc5a:	687b      	ldr	r3, [r7, #4]
 801bc5c:	220c      	movs	r2, #12
 801bc5e:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"C,B,E,I,H,K,B,D,H,G,G,A");
 801bc60:	687b      	ldr	r3, [r7, #4]
 801bc62:	33a4      	adds	r3, #164	; 0xa4
 801bc64:	4a92      	ldr	r2, [pc, #584]	; (801beb0 <problem_fetch+0x1a84c>)
 801bc66:	461d      	mov	r5, r3
 801bc68:	4614      	mov	r4, r2
 801bc6a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801bc6c:	6028      	str	r0, [r5, #0]
 801bc6e:	6069      	str	r1, [r5, #4]
 801bc70:	60aa      	str	r2, [r5, #8]
 801bc72:	60eb      	str	r3, [r5, #12]
 801bc74:	cc03      	ldmia	r4!, {r0, r1}
 801bc76:	6128      	str	r0, [r5, #16]
 801bc78:	6169      	str	r1, [r5, #20]
			strcpy(p->moveNumbers,"5,6,8,10,12,14,15,15,16,17,17,18");
 801bc7a:	687b      	ldr	r3, [r7, #4]
 801bc7c:	3304      	adds	r3, #4
 801bc7e:	4a8d      	ldr	r2, [pc, #564]	; (801beb4 <problem_fetch+0x1a850>)
 801bc80:	4614      	mov	r4, r2
 801bc82:	469c      	mov	ip, r3
 801bc84:	f104 0e20 	add.w	lr, r4, #32
 801bc88:	4665      	mov	r5, ip
 801bc8a:	4626      	mov	r6, r4
 801bc8c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 801bc8e:	6028      	str	r0, [r5, #0]
 801bc90:	6069      	str	r1, [r5, #4]
 801bc92:	60aa      	str	r2, [r5, #8]
 801bc94:	60eb      	str	r3, [r5, #12]
 801bc96:	3410      	adds	r4, #16
 801bc98:	f10c 0c10 	add.w	ip, ip, #16
 801bc9c:	4574      	cmp	r4, lr
 801bc9e:	d1f3      	bne.n	801bc88 <problem_fetch+0x1a624>
 801bca0:	4663      	mov	r3, ip
 801bca2:	4622      	mov	r2, r4
 801bca4:	7812      	ldrb	r2, [r2, #0]
 801bca6:	701a      	strb	r2, [r3, #0]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,d,d,d,d,e");
 801bca8:	687b      	ldr	r3, [r7, #4]
 801bcaa:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 801bcae:	4a82      	ldr	r2, [pc, #520]	; (801beb8 <problem_fetch+0x1a854>)
 801bcb0:	461d      	mov	r5, r3
 801bcb2:	4614      	mov	r4, r2
 801bcb4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801bcb6:	6028      	str	r0, [r5, #0]
 801bcb8:	6069      	str	r1, [r5, #4]
 801bcba:	60aa      	str	r2, [r5, #8]
 801bcbc:	60eb      	str	r3, [r5, #12]
 801bcbe:	cc03      	ldmia	r4!, {r0, r1}
 801bcc0:	6128      	str	r0, [r5, #16]
 801bcc2:	6169      	str	r1, [r5, #20]
			break;
 801bcc4:	e3fe      	b.n	801c4c4 <problem_fetch+0x1ae60>
		case 792 :
			strcpy(p->name,"SHAKEN NOT STIRRED");
 801bcc6:	687b      	ldr	r3, [r7, #4]
 801bcc8:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801bccc:	4a7b      	ldr	r2, [pc, #492]	; (801bebc <problem_fetch+0x1a858>)
 801bcce:	461d      	mov	r5, r3
 801bcd0:	4614      	mov	r4, r2
 801bcd2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801bcd4:	6028      	str	r0, [r5, #0]
 801bcd6:	6069      	str	r1, [r5, #4]
 801bcd8:	60aa      	str	r2, [r5, #8]
 801bcda:	60eb      	str	r3, [r5, #12]
 801bcdc:	8823      	ldrh	r3, [r4, #0]
 801bcde:	78a2      	ldrb	r2, [r4, #2]
 801bce0:	822b      	strh	r3, [r5, #16]
 801bce2:	4613      	mov	r3, r2
 801bce4:	74ab      	strb	r3, [r5, #18]
			strcpy(p->grade,"6B+");
 801bce6:	687b      	ldr	r3, [r7, #4]
 801bce8:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801bcec:	4a6a      	ldr	r2, [pc, #424]	; (801be98 <problem_fetch+0x1a834>)
 801bcee:	6810      	ldr	r0, [r2, #0]
 801bcf0:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 801bcf2:	687b      	ldr	r3, [r7, #4]
 801bcf4:	2207      	movs	r2, #7
 801bcf6:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"H,H,F,E,A,D,A");
 801bcf8:	687b      	ldr	r3, [r7, #4]
 801bcfa:	33a4      	adds	r3, #164	; 0xa4
 801bcfc:	4a70      	ldr	r2, [pc, #448]	; (801bec0 <problem_fetch+0x1a85c>)
 801bcfe:	461c      	mov	r4, r3
 801bd00:	4613      	mov	r3, r2
 801bd02:	cb07      	ldmia	r3!, {r0, r1, r2}
 801bd04:	6020      	str	r0, [r4, #0]
 801bd06:	6061      	str	r1, [r4, #4]
 801bd08:	60a2      	str	r2, [r4, #8]
 801bd0a:	881b      	ldrh	r3, [r3, #0]
 801bd0c:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,8,11,12,14,15,18");
 801bd0e:	687b      	ldr	r3, [r7, #4]
 801bd10:	3304      	adds	r3, #4
 801bd12:	4a6c      	ldr	r2, [pc, #432]	; (801bec4 <problem_fetch+0x1a860>)
 801bd14:	461d      	mov	r5, r3
 801bd16:	4614      	mov	r4, r2
 801bd18:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801bd1a:	6028      	str	r0, [r5, #0]
 801bd1c:	6069      	str	r1, [r5, #4]
 801bd1e:	60aa      	str	r2, [r5, #8]
 801bd20:	60eb      	str	r3, [r5, #12]
 801bd22:	8823      	ldrh	r3, [r4, #0]
 801bd24:	78a2      	ldrb	r2, [r4, #2]
 801bd26:	822b      	strh	r3, [r5, #16]
 801bd28:	4613      	mov	r3, r2
 801bd2a:	74ab      	strb	r3, [r5, #18]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 801bd2c:	687b      	ldr	r3, [r7, #4]
 801bd2e:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 801bd32:	4a5c      	ldr	r2, [pc, #368]	; (801bea4 <problem_fetch+0x1a840>)
 801bd34:	461c      	mov	r4, r3
 801bd36:	4613      	mov	r3, r2
 801bd38:	cb07      	ldmia	r3!, {r0, r1, r2}
 801bd3a:	6020      	str	r0, [r4, #0]
 801bd3c:	6061      	str	r1, [r4, #4]
 801bd3e:	60a2      	str	r2, [r4, #8]
 801bd40:	881b      	ldrh	r3, [r3, #0]
 801bd42:	81a3      	strh	r3, [r4, #12]
			break;
 801bd44:	e3be      	b.n	801c4c4 <problem_fetch+0x1ae60>
		case 793 :
			strcpy(p->name,"SNAGGLEPUSS");
 801bd46:	687b      	ldr	r3, [r7, #4]
 801bd48:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801bd4c:	4a5e      	ldr	r2, [pc, #376]	; (801bec8 <problem_fetch+0x1a864>)
 801bd4e:	461c      	mov	r4, r3
 801bd50:	4613      	mov	r3, r2
 801bd52:	cb07      	ldmia	r3!, {r0, r1, r2}
 801bd54:	6020      	str	r0, [r4, #0]
 801bd56:	6061      	str	r1, [r4, #4]
 801bd58:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade,"6B+");
 801bd5a:	687b      	ldr	r3, [r7, #4]
 801bd5c:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801bd60:	4a4d      	ldr	r2, [pc, #308]	; (801be98 <problem_fetch+0x1a834>)
 801bd62:	6810      	ldr	r0, [r2, #0]
 801bd64:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 801bd66:	687b      	ldr	r3, [r7, #4]
 801bd68:	2206      	movs	r2, #6
 801bd6a:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"H,K,H,I,H,I");
 801bd6c:	687b      	ldr	r3, [r7, #4]
 801bd6e:	33a4      	adds	r3, #164	; 0xa4
 801bd70:	4a56      	ldr	r2, [pc, #344]	; (801becc <problem_fetch+0x1a868>)
 801bd72:	461c      	mov	r4, r3
 801bd74:	4613      	mov	r3, r2
 801bd76:	cb07      	ldmia	r3!, {r0, r1, r2}
 801bd78:	6020      	str	r0, [r4, #0]
 801bd7a:	6061      	str	r1, [r4, #4]
 801bd7c:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,9,12,14,16,18");
 801bd7e:	687b      	ldr	r3, [r7, #4]
 801bd80:	3304      	adds	r3, #4
 801bd82:	4a53      	ldr	r2, [pc, #332]	; (801bed0 <problem_fetch+0x1a86c>)
 801bd84:	461c      	mov	r4, r3
 801bd86:	4615      	mov	r5, r2
 801bd88:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801bd8a:	6020      	str	r0, [r4, #0]
 801bd8c:	6061      	str	r1, [r4, #4]
 801bd8e:	60a2      	str	r2, [r4, #8]
 801bd90:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 801bd92:	687b      	ldr	r3, [r7, #4]
 801bd94:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 801bd98:	4a4e      	ldr	r2, [pc, #312]	; (801bed4 <problem_fetch+0x1a870>)
 801bd9a:	461c      	mov	r4, r3
 801bd9c:	4613      	mov	r3, r2
 801bd9e:	cb07      	ldmia	r3!, {r0, r1, r2}
 801bda0:	6020      	str	r0, [r4, #0]
 801bda2:	6061      	str	r1, [r4, #4]
 801bda4:	60a2      	str	r2, [r4, #8]
			break;
 801bda6:	e38d      	b.n	801c4c4 <problem_fetch+0x1ae60>
		case 794 :
			strcpy(p->name,"E-Z CHEESE");
 801bda8:	687b      	ldr	r3, [r7, #4]
 801bdaa:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801bdae:	494a      	ldr	r1, [pc, #296]	; (801bed8 <problem_fetch+0x1a874>)
 801bdb0:	461a      	mov	r2, r3
 801bdb2:	460b      	mov	r3, r1
 801bdb4:	cb03      	ldmia	r3!, {r0, r1}
 801bdb6:	6010      	str	r0, [r2, #0]
 801bdb8:	6051      	str	r1, [r2, #4]
 801bdba:	8819      	ldrh	r1, [r3, #0]
 801bdbc:	789b      	ldrb	r3, [r3, #2]
 801bdbe:	8111      	strh	r1, [r2, #8]
 801bdc0:	7293      	strb	r3, [r2, #10]
			strcpy(p->grade,"6B+");
 801bdc2:	687b      	ldr	r3, [r7, #4]
 801bdc4:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801bdc8:	4a33      	ldr	r2, [pc, #204]	; (801be98 <problem_fetch+0x1a834>)
 801bdca:	6810      	ldr	r0, [r2, #0]
 801bdcc:	6018      	str	r0, [r3, #0]
			p->moveSize = 8;
 801bdce:	687b      	ldr	r3, [r7, #4]
 801bdd0:	2208      	movs	r2, #8
 801bdd2:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,E,H,H,J,G,H,D");
 801bdd4:	687b      	ldr	r3, [r7, #4]
 801bdd6:	33a4      	adds	r3, #164	; 0xa4
 801bdd8:	4a40      	ldr	r2, [pc, #256]	; (801bedc <problem_fetch+0x1a878>)
 801bdda:	461c      	mov	r4, r3
 801bddc:	4615      	mov	r5, r2
 801bdde:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801bde0:	6020      	str	r0, [r4, #0]
 801bde2:	6061      	str	r1, [r4, #4]
 801bde4:	60a2      	str	r2, [r4, #8]
 801bde6:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,8,10,12,13,15,16,18");
 801bde8:	687b      	ldr	r3, [r7, #4]
 801bdea:	3304      	adds	r3, #4
 801bdec:	4a3c      	ldr	r2, [pc, #240]	; (801bee0 <problem_fetch+0x1a87c>)
 801bdee:	461d      	mov	r5, r3
 801bdf0:	4614      	mov	r4, r2
 801bdf2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801bdf4:	6028      	str	r0, [r5, #0]
 801bdf6:	6069      	str	r1, [r5, #4]
 801bdf8:	60aa      	str	r2, [r5, #8]
 801bdfa:	60eb      	str	r3, [r5, #12]
 801bdfc:	6820      	ldr	r0, [r4, #0]
 801bdfe:	6128      	str	r0, [r5, #16]
 801be00:	88a3      	ldrh	r3, [r4, #4]
 801be02:	82ab      	strh	r3, [r5, #20]
			strcpy(p->startFinish,"s,d,d,d,d,d,d,e");
 801be04:	687b      	ldr	r3, [r7, #4]
 801be06:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 801be0a:	4a36      	ldr	r2, [pc, #216]	; (801bee4 <problem_fetch+0x1a880>)
 801be0c:	461c      	mov	r4, r3
 801be0e:	4615      	mov	r5, r2
 801be10:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801be12:	6020      	str	r0, [r4, #0]
 801be14:	6061      	str	r1, [r4, #4]
 801be16:	60a2      	str	r2, [r4, #8]
 801be18:	60e3      	str	r3, [r4, #12]
			break;
 801be1a:	e353      	b.n	801c4c4 <problem_fetch+0x1ae60>
		case 795 :
			strcpy(p->name,"TODD, DARK AND HANDSOME");
 801be1c:	687b      	ldr	r3, [r7, #4]
 801be1e:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801be22:	4a31      	ldr	r2, [pc, #196]	; (801bee8 <problem_fetch+0x1a884>)
 801be24:	461d      	mov	r5, r3
 801be26:	4614      	mov	r4, r2
 801be28:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801be2a:	6028      	str	r0, [r5, #0]
 801be2c:	6069      	str	r1, [r5, #4]
 801be2e:	60aa      	str	r2, [r5, #8]
 801be30:	60eb      	str	r3, [r5, #12]
 801be32:	cc03      	ldmia	r4!, {r0, r1}
 801be34:	6128      	str	r0, [r5, #16]
 801be36:	6169      	str	r1, [r5, #20]
			strcpy(p->grade,"7C");
 801be38:	687b      	ldr	r3, [r7, #4]
 801be3a:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801be3e:	4a2b      	ldr	r2, [pc, #172]	; (801beec <problem_fetch+0x1a888>)
 801be40:	8811      	ldrh	r1, [r2, #0]
 801be42:	7892      	ldrb	r2, [r2, #2]
 801be44:	8019      	strh	r1, [r3, #0]
 801be46:	709a      	strb	r2, [r3, #2]
			p->moveSize = 8;
 801be48:	687b      	ldr	r3, [r7, #4]
 801be4a:	2208      	movs	r2, #8
 801be4c:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,G,H,C,C,H,G,I");
 801be4e:	687b      	ldr	r3, [r7, #4]
 801be50:	33a4      	adds	r3, #164	; 0xa4
 801be52:	4a27      	ldr	r2, [pc, #156]	; (801bef0 <problem_fetch+0x1a88c>)
 801be54:	461c      	mov	r4, r3
 801be56:	4615      	mov	r5, r2
 801be58:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801be5a:	6020      	str	r0, [r4, #0]
 801be5c:	6061      	str	r1, [r4, #4]
 801be5e:	60a2      	str	r2, [r4, #8]
 801be60:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,6,8,8,13,16,17,18");
 801be62:	687b      	ldr	r3, [r7, #4]
 801be64:	3304      	adds	r3, #4
 801be66:	4a23      	ldr	r2, [pc, #140]	; (801bef4 <problem_fetch+0x1a890>)
 801be68:	461d      	mov	r5, r3
 801be6a:	4614      	mov	r4, r2
 801be6c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801be6e:	6028      	str	r0, [r5, #0]
 801be70:	6069      	str	r1, [r5, #4]
 801be72:	60aa      	str	r2, [r5, #8]
 801be74:	60eb      	str	r3, [r5, #12]
 801be76:	6820      	ldr	r0, [r4, #0]
 801be78:	6128      	str	r0, [r5, #16]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,e");
 801be7a:	687b      	ldr	r3, [r7, #4]
 801be7c:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 801be80:	4a1d      	ldr	r2, [pc, #116]	; (801bef8 <problem_fetch+0x1a894>)
 801be82:	461c      	mov	r4, r3
 801be84:	4615      	mov	r5, r2
 801be86:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801be88:	6020      	str	r0, [r4, #0]
 801be8a:	6061      	str	r1, [r4, #4]
 801be8c:	60a2      	str	r2, [r4, #8]
 801be8e:	60e3      	str	r3, [r4, #12]
			break;
 801be90:	e318      	b.n	801c4c4 <problem_fetch+0x1ae60>
 801be92:	bf00      	nop
 801be94:	0802ce08 	.word	0x0802ce08
 801be98:	08023b24 	.word	0x08023b24
 801be9c:	0802ce14 	.word	0x0802ce14
 801bea0:	0802bd88 	.word	0x0802bd88
 801bea4:	08023cac 	.word	0x08023cac
 801bea8:	0802ce24 	.word	0x0802ce24
 801beac:	08023ae4 	.word	0x08023ae4
 801beb0:	0802ce30 	.word	0x0802ce30
 801beb4:	0802ce48 	.word	0x0802ce48
 801beb8:	0802ce6c 	.word	0x0802ce6c
 801bebc:	0802ce84 	.word	0x0802ce84
 801bec0:	0802ce98 	.word	0x0802ce98
 801bec4:	0802cea8 	.word	0x0802cea8
 801bec8:	0802cebc 	.word	0x0802cebc
 801becc:	0802cec8 	.word	0x0802cec8
 801bed0:	08028bf8 	.word	0x08028bf8
 801bed4:	08023ec0 	.word	0x08023ec0
 801bed8:	0802ced4 	.word	0x0802ced4
 801bedc:	0802cee0 	.word	0x0802cee0
 801bee0:	0802cef0 	.word	0x0802cef0
 801bee4:	08023d34 	.word	0x08023d34
 801bee8:	0802cf08 	.word	0x0802cf08
 801beec:	08024358 	.word	0x08024358
 801bef0:	0802cf20 	.word	0x0802cf20
 801bef4:	0802cf30 	.word	0x0802cf30
 801bef8:	08023c48 	.word	0x08023c48
		case 796 :
			strcpy(p->name,"HAN DUO");
 801befc:	687b      	ldr	r3, [r7, #4]
 801befe:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801bf02:	49a4      	ldr	r1, [pc, #656]	; (801c194 <problem_fetch+0x1ab30>)
 801bf04:	461a      	mov	r2, r3
 801bf06:	460b      	mov	r3, r1
 801bf08:	cb03      	ldmia	r3!, {r0, r1}
 801bf0a:	6010      	str	r0, [r2, #0]
 801bf0c:	6051      	str	r1, [r2, #4]
			strcpy(p->grade,"7C");
 801bf0e:	687b      	ldr	r3, [r7, #4]
 801bf10:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801bf14:	4aa0      	ldr	r2, [pc, #640]	; (801c198 <problem_fetch+0x1ab34>)
 801bf16:	8811      	ldrh	r1, [r2, #0]
 801bf18:	7892      	ldrb	r2, [r2, #2]
 801bf1a:	8019      	strh	r1, [r3, #0]
 801bf1c:	709a      	strb	r2, [r3, #2]
			p->moveSize = 5;
 801bf1e:	687b      	ldr	r3, [r7, #4]
 801bf20:	2205      	movs	r2, #5
 801bf22:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"E,F,E,H,I");
 801bf24:	687b      	ldr	r3, [r7, #4]
 801bf26:	33a4      	adds	r3, #164	; 0xa4
 801bf28:	499c      	ldr	r1, [pc, #624]	; (801c19c <problem_fetch+0x1ab38>)
 801bf2a:	461a      	mov	r2, r3
 801bf2c:	460b      	mov	r3, r1
 801bf2e:	cb03      	ldmia	r3!, {r0, r1}
 801bf30:	6010      	str	r0, [r2, #0]
 801bf32:	6051      	str	r1, [r2, #4]
 801bf34:	881b      	ldrh	r3, [r3, #0]
 801bf36:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"6,11,14,13,18");
 801bf38:	687b      	ldr	r3, [r7, #4]
 801bf3a:	3304      	adds	r3, #4
 801bf3c:	4a98      	ldr	r2, [pc, #608]	; (801c1a0 <problem_fetch+0x1ab3c>)
 801bf3e:	461c      	mov	r4, r3
 801bf40:	4613      	mov	r3, r2
 801bf42:	cb07      	ldmia	r3!, {r0, r1, r2}
 801bf44:	6020      	str	r0, [r4, #0]
 801bf46:	6061      	str	r1, [r4, #4]
 801bf48:	60a2      	str	r2, [r4, #8]
 801bf4a:	881b      	ldrh	r3, [r3, #0]
 801bf4c:	81a3      	strh	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,e");
 801bf4e:	687b      	ldr	r3, [r7, #4]
 801bf50:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 801bf54:	4993      	ldr	r1, [pc, #588]	; (801c1a4 <problem_fetch+0x1ab40>)
 801bf56:	461a      	mov	r2, r3
 801bf58:	460b      	mov	r3, r1
 801bf5a:	cb03      	ldmia	r3!, {r0, r1}
 801bf5c:	6010      	str	r0, [r2, #0]
 801bf5e:	6051      	str	r1, [r2, #4]
 801bf60:	881b      	ldrh	r3, [r3, #0]
 801bf62:	8113      	strh	r3, [r2, #8]
			break;
 801bf64:	e2ae      	b.n	801c4c4 <problem_fetch+0x1ae60>
		case 797 :
			strcpy(p->name,"SINGLE DURA");
 801bf66:	687b      	ldr	r3, [r7, #4]
 801bf68:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801bf6c:	4a8e      	ldr	r2, [pc, #568]	; (801c1a8 <problem_fetch+0x1ab44>)
 801bf6e:	461c      	mov	r4, r3
 801bf70:	4613      	mov	r3, r2
 801bf72:	cb07      	ldmia	r3!, {r0, r1, r2}
 801bf74:	6020      	str	r0, [r4, #0]
 801bf76:	6061      	str	r1, [r4, #4]
 801bf78:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade,"7B");
 801bf7a:	687b      	ldr	r3, [r7, #4]
 801bf7c:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801bf80:	4a8a      	ldr	r2, [pc, #552]	; (801c1ac <problem_fetch+0x1ab48>)
 801bf82:	8811      	ldrh	r1, [r2, #0]
 801bf84:	7892      	ldrb	r2, [r2, #2]
 801bf86:	8019      	strh	r1, [r3, #0]
 801bf88:	709a      	strb	r2, [r3, #2]
			p->moveSize = 5;
 801bf8a:	687b      	ldr	r3, [r7, #4]
 801bf8c:	2205      	movs	r2, #5
 801bf8e:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"E,G,D,D,A");
 801bf90:	687b      	ldr	r3, [r7, #4]
 801bf92:	33a4      	adds	r3, #164	; 0xa4
 801bf94:	4986      	ldr	r1, [pc, #536]	; (801c1b0 <problem_fetch+0x1ab4c>)
 801bf96:	461a      	mov	r2, r3
 801bf98:	460b      	mov	r3, r1
 801bf9a:	cb03      	ldmia	r3!, {r0, r1}
 801bf9c:	6010      	str	r0, [r2, #0]
 801bf9e:	6051      	str	r1, [r2, #4]
 801bfa0:	881b      	ldrh	r3, [r3, #0]
 801bfa2:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"6,9,11,15,18");
 801bfa4:	687b      	ldr	r3, [r7, #4]
 801bfa6:	3304      	adds	r3, #4
 801bfa8:	4a82      	ldr	r2, [pc, #520]	; (801c1b4 <problem_fetch+0x1ab50>)
 801bfaa:	461c      	mov	r4, r3
 801bfac:	4613      	mov	r3, r2
 801bfae:	cb07      	ldmia	r3!, {r0, r1, r2}
 801bfb0:	6020      	str	r0, [r4, #0]
 801bfb2:	6061      	str	r1, [r4, #4]
 801bfb4:	60a2      	str	r2, [r4, #8]
 801bfb6:	781b      	ldrb	r3, [r3, #0]
 801bfb8:	7323      	strb	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,e");
 801bfba:	687b      	ldr	r3, [r7, #4]
 801bfbc:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 801bfc0:	4978      	ldr	r1, [pc, #480]	; (801c1a4 <problem_fetch+0x1ab40>)
 801bfc2:	461a      	mov	r2, r3
 801bfc4:	460b      	mov	r3, r1
 801bfc6:	cb03      	ldmia	r3!, {r0, r1}
 801bfc8:	6010      	str	r0, [r2, #0]
 801bfca:	6051      	str	r1, [r2, #4]
 801bfcc:	881b      	ldrh	r3, [r3, #0]
 801bfce:	8113      	strh	r3, [r2, #8]
			break;
 801bfd0:	e278      	b.n	801c4c4 <problem_fetch+0x1ae60>
		case 798 :
			strcpy(p->name,"GUNTER");
 801bfd2:	687b      	ldr	r3, [r7, #4]
 801bfd4:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801bfd8:	4a77      	ldr	r2, [pc, #476]	; (801c1b8 <problem_fetch+0x1ab54>)
 801bfda:	6810      	ldr	r0, [r2, #0]
 801bfdc:	6018      	str	r0, [r3, #0]
 801bfde:	8891      	ldrh	r1, [r2, #4]
 801bfe0:	7992      	ldrb	r2, [r2, #6]
 801bfe2:	8099      	strh	r1, [r3, #4]
 801bfe4:	719a      	strb	r2, [r3, #6]
			strcpy(p->grade,"7A");
 801bfe6:	687b      	ldr	r3, [r7, #4]
 801bfe8:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801bfec:	4a73      	ldr	r2, [pc, #460]	; (801c1bc <problem_fetch+0x1ab58>)
 801bfee:	8811      	ldrh	r1, [r2, #0]
 801bff0:	7892      	ldrb	r2, [r2, #2]
 801bff2:	8019      	strh	r1, [r3, #0]
 801bff4:	709a      	strb	r2, [r3, #2]
			p->moveSize = 6;
 801bff6:	687b      	ldr	r3, [r7, #4]
 801bff8:	2206      	movs	r2, #6
 801bffa:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,K,H,E,B,D");
 801bffc:	687b      	ldr	r3, [r7, #4]
 801bffe:	33a4      	adds	r3, #164	; 0xa4
 801c000:	4a6f      	ldr	r2, [pc, #444]	; (801c1c0 <problem_fetch+0x1ab5c>)
 801c002:	461c      	mov	r4, r3
 801c004:	4613      	mov	r3, r2
 801c006:	cb07      	ldmia	r3!, {r0, r1, r2}
 801c008:	6020      	str	r0, [r4, #0]
 801c00a:	6061      	str	r1, [r4, #4]
 801c00c:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,9,10,12,15,18");
 801c00e:	687b      	ldr	r3, [r7, #4]
 801c010:	3304      	adds	r3, #4
 801c012:	4a6c      	ldr	r2, [pc, #432]	; (801c1c4 <problem_fetch+0x1ab60>)
 801c014:	461c      	mov	r4, r3
 801c016:	4615      	mov	r5, r2
 801c018:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801c01a:	6020      	str	r0, [r4, #0]
 801c01c:	6061      	str	r1, [r4, #4]
 801c01e:	60a2      	str	r2, [r4, #8]
 801c020:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 801c022:	687b      	ldr	r3, [r7, #4]
 801c024:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 801c028:	4a67      	ldr	r2, [pc, #412]	; (801c1c8 <problem_fetch+0x1ab64>)
 801c02a:	461c      	mov	r4, r3
 801c02c:	4613      	mov	r3, r2
 801c02e:	cb07      	ldmia	r3!, {r0, r1, r2}
 801c030:	6020      	str	r0, [r4, #0]
 801c032:	6061      	str	r1, [r4, #4]
 801c034:	60a2      	str	r2, [r4, #8]
			break;
 801c036:	e245      	b.n	801c4c4 <problem_fetch+0x1ae60>
		case 799 :
			strcpy(p->name,"MAN WALKS DOWN THE STREET");
 801c038:	687b      	ldr	r3, [r7, #4]
 801c03a:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801c03e:	4a63      	ldr	r2, [pc, #396]	; (801c1cc <problem_fetch+0x1ab68>)
 801c040:	461d      	mov	r5, r3
 801c042:	4614      	mov	r4, r2
 801c044:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801c046:	6028      	str	r0, [r5, #0]
 801c048:	6069      	str	r1, [r5, #4]
 801c04a:	60aa      	str	r2, [r5, #8]
 801c04c:	60eb      	str	r3, [r5, #12]
 801c04e:	cc03      	ldmia	r4!, {r0, r1}
 801c050:	6128      	str	r0, [r5, #16]
 801c052:	6169      	str	r1, [r5, #20]
 801c054:	8823      	ldrh	r3, [r4, #0]
 801c056:	832b      	strh	r3, [r5, #24]
			strcpy(p->grade,"6B+");
 801c058:	687b      	ldr	r3, [r7, #4]
 801c05a:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801c05e:	4a5c      	ldr	r2, [pc, #368]	; (801c1d0 <problem_fetch+0x1ab6c>)
 801c060:	6810      	ldr	r0, [r2, #0]
 801c062:	6018      	str	r0, [r3, #0]
			p->moveSize = 8;
 801c064:	687b      	ldr	r3, [r7, #4]
 801c066:	2208      	movs	r2, #8
 801c068:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"E,H,E,B,E,B,E,A");
 801c06a:	687b      	ldr	r3, [r7, #4]
 801c06c:	33a4      	adds	r3, #164	; 0xa4
 801c06e:	4a59      	ldr	r2, [pc, #356]	; (801c1d4 <problem_fetch+0x1ab70>)
 801c070:	461c      	mov	r4, r3
 801c072:	4615      	mov	r5, r2
 801c074:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801c076:	6020      	str	r0, [r4, #0]
 801c078:	6061      	str	r1, [r4, #4]
 801c07a:	60a2      	str	r2, [r4, #8]
 801c07c:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"6,5,8,10,12,15,16,18");
 801c07e:	687b      	ldr	r3, [r7, #4]
 801c080:	3304      	adds	r3, #4
 801c082:	4a55      	ldr	r2, [pc, #340]	; (801c1d8 <problem_fetch+0x1ab74>)
 801c084:	461d      	mov	r5, r3
 801c086:	4614      	mov	r4, r2
 801c088:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801c08a:	6028      	str	r0, [r5, #0]
 801c08c:	6069      	str	r1, [r5, #4]
 801c08e:	60aa      	str	r2, [r5, #8]
 801c090:	60eb      	str	r3, [r5, #12]
 801c092:	6820      	ldr	r0, [r4, #0]
 801c094:	6128      	str	r0, [r5, #16]
 801c096:	7923      	ldrb	r3, [r4, #4]
 801c098:	752b      	strb	r3, [r5, #20]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,e");
 801c09a:	687b      	ldr	r3, [r7, #4]
 801c09c:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 801c0a0:	4a4e      	ldr	r2, [pc, #312]	; (801c1dc <problem_fetch+0x1ab78>)
 801c0a2:	461c      	mov	r4, r3
 801c0a4:	4615      	mov	r5, r2
 801c0a6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801c0a8:	6020      	str	r0, [r4, #0]
 801c0aa:	6061      	str	r1, [r4, #4]
 801c0ac:	60a2      	str	r2, [r4, #8]
 801c0ae:	60e3      	str	r3, [r4, #12]
			break;
 801c0b0:	e208      	b.n	801c4c4 <problem_fetch+0x1ae60>
		case 800 :
			strcpy(p->name,"CHAD");
 801c0b2:	687b      	ldr	r3, [r7, #4]
 801c0b4:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801c0b8:	4a49      	ldr	r2, [pc, #292]	; (801c1e0 <problem_fetch+0x1ab7c>)
 801c0ba:	6810      	ldr	r0, [r2, #0]
 801c0bc:	6018      	str	r0, [r3, #0]
 801c0be:	7912      	ldrb	r2, [r2, #4]
 801c0c0:	711a      	strb	r2, [r3, #4]
			strcpy(p->grade,"7B+");
 801c0c2:	687b      	ldr	r3, [r7, #4]
 801c0c4:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801c0c8:	4a46      	ldr	r2, [pc, #280]	; (801c1e4 <problem_fetch+0x1ab80>)
 801c0ca:	6810      	ldr	r0, [r2, #0]
 801c0cc:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 801c0ce:	687b      	ldr	r3, [r7, #4]
 801c0d0:	2207      	movs	r2, #7
 801c0d2:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"C,D,A,F,F,E,D");
 801c0d4:	687b      	ldr	r3, [r7, #4]
 801c0d6:	33a4      	adds	r3, #164	; 0xa4
 801c0d8:	4a43      	ldr	r2, [pc, #268]	; (801c1e8 <problem_fetch+0x1ab84>)
 801c0da:	461c      	mov	r4, r3
 801c0dc:	4613      	mov	r3, r2
 801c0de:	cb07      	ldmia	r3!, {r0, r1, r2}
 801c0e0:	6020      	str	r0, [r4, #0]
 801c0e2:	6061      	str	r1, [r4, #4]
 801c0e4:	60a2      	str	r2, [r4, #8]
 801c0e6:	881b      	ldrh	r3, [r3, #0]
 801c0e8:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,7,9,11,13,16,18");
 801c0ea:	687b      	ldr	r3, [r7, #4]
 801c0ec:	3304      	adds	r3, #4
 801c0ee:	4a3f      	ldr	r2, [pc, #252]	; (801c1ec <problem_fetch+0x1ab88>)
 801c0f0:	461d      	mov	r5, r3
 801c0f2:	4614      	mov	r4, r2
 801c0f4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801c0f6:	6028      	str	r0, [r5, #0]
 801c0f8:	6069      	str	r1, [r5, #4]
 801c0fa:	60aa      	str	r2, [r5, #8]
 801c0fc:	60eb      	str	r3, [r5, #12]
 801c0fe:	8823      	ldrh	r3, [r4, #0]
 801c100:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 801c102:	687b      	ldr	r3, [r7, #4]
 801c104:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 801c108:	4a39      	ldr	r2, [pc, #228]	; (801c1f0 <problem_fetch+0x1ab8c>)
 801c10a:	461c      	mov	r4, r3
 801c10c:	4613      	mov	r3, r2
 801c10e:	cb07      	ldmia	r3!, {r0, r1, r2}
 801c110:	6020      	str	r0, [r4, #0]
 801c112:	6061      	str	r1, [r4, #4]
 801c114:	60a2      	str	r2, [r4, #8]
 801c116:	881b      	ldrh	r3, [r3, #0]
 801c118:	81a3      	strh	r3, [r4, #12]
			break;
 801c11a:	e1d3      	b.n	801c4c4 <problem_fetch+0x1ae60>
		case 801 :
			strcpy(p->name,"PROBLEM 19");
 801c11c:	687b      	ldr	r3, [r7, #4]
 801c11e:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801c122:	4934      	ldr	r1, [pc, #208]	; (801c1f4 <problem_fetch+0x1ab90>)
 801c124:	461a      	mov	r2, r3
 801c126:	460b      	mov	r3, r1
 801c128:	cb03      	ldmia	r3!, {r0, r1}
 801c12a:	6010      	str	r0, [r2, #0]
 801c12c:	6051      	str	r1, [r2, #4]
 801c12e:	8819      	ldrh	r1, [r3, #0]
 801c130:	789b      	ldrb	r3, [r3, #2]
 801c132:	8111      	strh	r1, [r2, #8]
 801c134:	7293      	strb	r3, [r2, #10]
			strcpy(p->grade,"6C");
 801c136:	687b      	ldr	r3, [r7, #4]
 801c138:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801c13c:	4a2e      	ldr	r2, [pc, #184]	; (801c1f8 <problem_fetch+0x1ab94>)
 801c13e:	8811      	ldrh	r1, [r2, #0]
 801c140:	7892      	ldrb	r2, [r2, #2]
 801c142:	8019      	strh	r1, [r3, #0]
 801c144:	709a      	strb	r2, [r3, #2]
			p->moveSize = 7;
 801c146:	687b      	ldr	r3, [r7, #4]
 801c148:	2207      	movs	r2, #7
 801c14a:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,D,E,F,G,H,A");
 801c14c:	687b      	ldr	r3, [r7, #4]
 801c14e:	33a4      	adds	r3, #164	; 0xa4
 801c150:	4a2a      	ldr	r2, [pc, #168]	; (801c1fc <problem_fetch+0x1ab98>)
 801c152:	461c      	mov	r4, r3
 801c154:	4613      	mov	r3, r2
 801c156:	cb07      	ldmia	r3!, {r0, r1, r2}
 801c158:	6020      	str	r0, [r4, #0]
 801c15a:	6061      	str	r1, [r4, #4]
 801c15c:	60a2      	str	r2, [r4, #8]
 801c15e:	881b      	ldrh	r3, [r3, #0]
 801c160:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,15,12,11,9,8,18");
 801c162:	687b      	ldr	r3, [r7, #4]
 801c164:	3304      	adds	r3, #4
 801c166:	4a26      	ldr	r2, [pc, #152]	; (801c200 <problem_fetch+0x1ab9c>)
 801c168:	461d      	mov	r5, r3
 801c16a:	4614      	mov	r4, r2
 801c16c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801c16e:	6028      	str	r0, [r5, #0]
 801c170:	6069      	str	r1, [r5, #4]
 801c172:	60aa      	str	r2, [r5, #8]
 801c174:	60eb      	str	r3, [r5, #12]
 801c176:	8823      	ldrh	r3, [r4, #0]
 801c178:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 801c17a:	687b      	ldr	r3, [r7, #4]
 801c17c:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 801c180:	4a1b      	ldr	r2, [pc, #108]	; (801c1f0 <problem_fetch+0x1ab8c>)
 801c182:	461c      	mov	r4, r3
 801c184:	4613      	mov	r3, r2
 801c186:	cb07      	ldmia	r3!, {r0, r1, r2}
 801c188:	6020      	str	r0, [r4, #0]
 801c18a:	6061      	str	r1, [r4, #4]
 801c18c:	60a2      	str	r2, [r4, #8]
 801c18e:	881b      	ldrh	r3, [r3, #0]
 801c190:	81a3      	strh	r3, [r4, #12]
			break;
 801c192:	e197      	b.n	801c4c4 <problem_fetch+0x1ae60>
 801c194:	0802cf44 	.word	0x0802cf44
 801c198:	08024358 	.word	0x08024358
 801c19c:	0802cf4c 	.word	0x0802cf4c
 801c1a0:	0802cf58 	.word	0x0802cf58
 801c1a4:	08023ff0 	.word	0x08023ff0
 801c1a8:	0802cf68 	.word	0x0802cf68
 801c1ac:	0802421c 	.word	0x0802421c
 801c1b0:	0802cf74 	.word	0x0802cf74
 801c1b4:	0802cf80 	.word	0x0802cf80
 801c1b8:	0802cf90 	.word	0x0802cf90
 801c1bc:	08023ae4 	.word	0x08023ae4
 801c1c0:	0802cf98 	.word	0x0802cf98
 801c1c4:	0802cfa4 	.word	0x0802cfa4
 801c1c8:	08023ec0 	.word	0x08023ec0
 801c1cc:	0802cfb4 	.word	0x0802cfb4
 801c1d0:	08023b24 	.word	0x08023b24
 801c1d4:	0802cfd0 	.word	0x0802cfd0
 801c1d8:	0802cfe0 	.word	0x0802cfe0
 801c1dc:	08023c48 	.word	0x08023c48
 801c1e0:	0802cff8 	.word	0x0802cff8
 801c1e4:	08023c60 	.word	0x08023c60
 801c1e8:	0802d000 	.word	0x0802d000
 801c1ec:	0802d010 	.word	0x0802d010
 801c1f0:	08023cac 	.word	0x08023cac
 801c1f4:	0802d024 	.word	0x0802d024
 801c1f8:	08023bf0 	.word	0x08023bf0
 801c1fc:	0802d030 	.word	0x0802d030
 801c200:	0802d040 	.word	0x0802d040
		case 802 :
			strcpy(p->name,"PROBLEM 17");
 801c204:	687b      	ldr	r3, [r7, #4]
 801c206:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801c20a:	49b0      	ldr	r1, [pc, #704]	; (801c4cc <problem_fetch+0x1ae68>)
 801c20c:	461a      	mov	r2, r3
 801c20e:	460b      	mov	r3, r1
 801c210:	cb03      	ldmia	r3!, {r0, r1}
 801c212:	6010      	str	r0, [r2, #0]
 801c214:	6051      	str	r1, [r2, #4]
 801c216:	8819      	ldrh	r1, [r3, #0]
 801c218:	789b      	ldrb	r3, [r3, #2]
 801c21a:	8111      	strh	r1, [r2, #8]
 801c21c:	7293      	strb	r3, [r2, #10]
			strcpy(p->grade,"7A");
 801c21e:	687b      	ldr	r3, [r7, #4]
 801c220:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801c224:	4aaa      	ldr	r2, [pc, #680]	; (801c4d0 <problem_fetch+0x1ae6c>)
 801c226:	8811      	ldrh	r1, [r2, #0]
 801c228:	7892      	ldrb	r2, [r2, #2]
 801c22a:	8019      	strh	r1, [r3, #0]
 801c22c:	709a      	strb	r2, [r3, #2]
			p->moveSize = 7;
 801c22e:	687b      	ldr	r3, [r7, #4]
 801c230:	2207      	movs	r2, #7
 801c232:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"H,B,E,E,G,C,A");
 801c234:	687b      	ldr	r3, [r7, #4]
 801c236:	33a4      	adds	r3, #164	; 0xa4
 801c238:	4aa6      	ldr	r2, [pc, #664]	; (801c4d4 <problem_fetch+0x1ae70>)
 801c23a:	461c      	mov	r4, r3
 801c23c:	4613      	mov	r3, r2
 801c23e:	cb07      	ldmia	r3!, {r0, r1, r2}
 801c240:	6020      	str	r0, [r4, #0]
 801c242:	6061      	str	r1, [r4, #4]
 801c244:	60a2      	str	r2, [r4, #8]
 801c246:	881b      	ldrh	r3, [r3, #0]
 801c248:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,6,9,12,15,16,18");
 801c24a:	687b      	ldr	r3, [r7, #4]
 801c24c:	3304      	adds	r3, #4
 801c24e:	4aa2      	ldr	r2, [pc, #648]	; (801c4d8 <problem_fetch+0x1ae74>)
 801c250:	461d      	mov	r5, r3
 801c252:	4614      	mov	r4, r2
 801c254:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801c256:	6028      	str	r0, [r5, #0]
 801c258:	6069      	str	r1, [r5, #4]
 801c25a:	60aa      	str	r2, [r5, #8]
 801c25c:	60eb      	str	r3, [r5, #12]
 801c25e:	8823      	ldrh	r3, [r4, #0]
 801c260:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 801c262:	687b      	ldr	r3, [r7, #4]
 801c264:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 801c268:	4a9c      	ldr	r2, [pc, #624]	; (801c4dc <problem_fetch+0x1ae78>)
 801c26a:	461c      	mov	r4, r3
 801c26c:	4613      	mov	r3, r2
 801c26e:	cb07      	ldmia	r3!, {r0, r1, r2}
 801c270:	6020      	str	r0, [r4, #0]
 801c272:	6061      	str	r1, [r4, #4]
 801c274:	60a2      	str	r2, [r4, #8]
 801c276:	881b      	ldrh	r3, [r3, #0]
 801c278:	81a3      	strh	r3, [r4, #12]
			break;
 801c27a:	e123      	b.n	801c4c4 <problem_fetch+0x1ae60>
		case 803 :
			strcpy(p->name,"PROBLEM 12");
 801c27c:	687b      	ldr	r3, [r7, #4]
 801c27e:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801c282:	4997      	ldr	r1, [pc, #604]	; (801c4e0 <problem_fetch+0x1ae7c>)
 801c284:	461a      	mov	r2, r3
 801c286:	460b      	mov	r3, r1
 801c288:	cb03      	ldmia	r3!, {r0, r1}
 801c28a:	6010      	str	r0, [r2, #0]
 801c28c:	6051      	str	r1, [r2, #4]
 801c28e:	8819      	ldrh	r1, [r3, #0]
 801c290:	789b      	ldrb	r3, [r3, #2]
 801c292:	8111      	strh	r1, [r2, #8]
 801c294:	7293      	strb	r3, [r2, #10]
			strcpy(p->grade,"7A+");
 801c296:	687b      	ldr	r3, [r7, #4]
 801c298:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801c29c:	4a91      	ldr	r2, [pc, #580]	; (801c4e4 <problem_fetch+0x1ae80>)
 801c29e:	6810      	ldr	r0, [r2, #0]
 801c2a0:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 801c2a2:	687b      	ldr	r3, [r7, #4]
 801c2a4:	2206      	movs	r2, #6
 801c2a6:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,K,H,G,B,A");
 801c2a8:	687b      	ldr	r3, [r7, #4]
 801c2aa:	33a4      	adds	r3, #164	; 0xa4
 801c2ac:	4a8e      	ldr	r2, [pc, #568]	; (801c4e8 <problem_fetch+0x1ae84>)
 801c2ae:	461c      	mov	r4, r3
 801c2b0:	4613      	mov	r3, r2
 801c2b2:	cb07      	ldmia	r3!, {r0, r1, r2}
 801c2b4:	6020      	str	r0, [r4, #0]
 801c2b6:	6061      	str	r1, [r4, #4]
 801c2b8:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"6,9,12,14,15,18");
 801c2ba:	687b      	ldr	r3, [r7, #4]
 801c2bc:	3304      	adds	r3, #4
 801c2be:	4a8b      	ldr	r2, [pc, #556]	; (801c4ec <problem_fetch+0x1ae88>)
 801c2c0:	461c      	mov	r4, r3
 801c2c2:	4615      	mov	r5, r2
 801c2c4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801c2c6:	6020      	str	r0, [r4, #0]
 801c2c8:	6061      	str	r1, [r4, #4]
 801c2ca:	60a2      	str	r2, [r4, #8]
 801c2cc:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 801c2ce:	687b      	ldr	r3, [r7, #4]
 801c2d0:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 801c2d4:	4a86      	ldr	r2, [pc, #536]	; (801c4f0 <problem_fetch+0x1ae8c>)
 801c2d6:	461c      	mov	r4, r3
 801c2d8:	4613      	mov	r3, r2
 801c2da:	cb07      	ldmia	r3!, {r0, r1, r2}
 801c2dc:	6020      	str	r0, [r4, #0]
 801c2de:	6061      	str	r1, [r4, #4]
 801c2e0:	60a2      	str	r2, [r4, #8]
			break;
 801c2e2:	e0ef      	b.n	801c4c4 <problem_fetch+0x1ae60>
		case 804 :
			strcpy(p->name,"PROBLEM 11");
 801c2e4:	687b      	ldr	r3, [r7, #4]
 801c2e6:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801c2ea:	4982      	ldr	r1, [pc, #520]	; (801c4f4 <problem_fetch+0x1ae90>)
 801c2ec:	461a      	mov	r2, r3
 801c2ee:	460b      	mov	r3, r1
 801c2f0:	cb03      	ldmia	r3!, {r0, r1}
 801c2f2:	6010      	str	r0, [r2, #0]
 801c2f4:	6051      	str	r1, [r2, #4]
 801c2f6:	8819      	ldrh	r1, [r3, #0]
 801c2f8:	789b      	ldrb	r3, [r3, #2]
 801c2fa:	8111      	strh	r1, [r2, #8]
 801c2fc:	7293      	strb	r3, [r2, #10]
			strcpy(p->grade,"7A");
 801c2fe:	687b      	ldr	r3, [r7, #4]
 801c300:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801c304:	4a72      	ldr	r2, [pc, #456]	; (801c4d0 <problem_fetch+0x1ae6c>)
 801c306:	8811      	ldrh	r1, [r2, #0]
 801c308:	7892      	ldrb	r2, [r2, #2]
 801c30a:	8019      	strh	r1, [r3, #0]
 801c30c:	709a      	strb	r2, [r3, #2]
			p->moveSize = 7;
 801c30e:	687b      	ldr	r3, [r7, #4]
 801c310:	2207      	movs	r2, #7
 801c312:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"C,B,E,B,E,E,I");
 801c314:	687b      	ldr	r3, [r7, #4]
 801c316:	33a4      	adds	r3, #164	; 0xa4
 801c318:	4a77      	ldr	r2, [pc, #476]	; (801c4f8 <problem_fetch+0x1ae94>)
 801c31a:	461c      	mov	r4, r3
 801c31c:	4613      	mov	r3, r2
 801c31e:	cb07      	ldmia	r3!, {r0, r1, r2}
 801c320:	6020      	str	r0, [r4, #0]
 801c322:	6061      	str	r1, [r4, #4]
 801c324:	60a2      	str	r2, [r4, #8]
 801c326:	881b      	ldrh	r3, [r3, #0]
 801c328:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,6,8,10,14,16,18");
 801c32a:	687b      	ldr	r3, [r7, #4]
 801c32c:	3304      	adds	r3, #4
 801c32e:	4a73      	ldr	r2, [pc, #460]	; (801c4fc <problem_fetch+0x1ae98>)
 801c330:	461d      	mov	r5, r3
 801c332:	4614      	mov	r4, r2
 801c334:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801c336:	6028      	str	r0, [r5, #0]
 801c338:	6069      	str	r1, [r5, #4]
 801c33a:	60aa      	str	r2, [r5, #8]
 801c33c:	60eb      	str	r3, [r5, #12]
 801c33e:	8823      	ldrh	r3, [r4, #0]
 801c340:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,s,d,d,d,d,e");
 801c342:	687b      	ldr	r3, [r7, #4]
 801c344:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 801c348:	4a6d      	ldr	r2, [pc, #436]	; (801c500 <problem_fetch+0x1ae9c>)
 801c34a:	461c      	mov	r4, r3
 801c34c:	4613      	mov	r3, r2
 801c34e:	cb07      	ldmia	r3!, {r0, r1, r2}
 801c350:	6020      	str	r0, [r4, #0]
 801c352:	6061      	str	r1, [r4, #4]
 801c354:	60a2      	str	r2, [r4, #8]
 801c356:	881b      	ldrh	r3, [r3, #0]
 801c358:	81a3      	strh	r3, [r4, #12]
			break;
 801c35a:	e0b3      	b.n	801c4c4 <problem_fetch+0x1ae60>
		case 805 :
			strcpy(p->name,"PROBLEM 5");
 801c35c:	687b      	ldr	r3, [r7, #4]
 801c35e:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801c362:	4968      	ldr	r1, [pc, #416]	; (801c504 <problem_fetch+0x1aea0>)
 801c364:	461a      	mov	r2, r3
 801c366:	460b      	mov	r3, r1
 801c368:	cb03      	ldmia	r3!, {r0, r1}
 801c36a:	6010      	str	r0, [r2, #0]
 801c36c:	6051      	str	r1, [r2, #4]
 801c36e:	881b      	ldrh	r3, [r3, #0]
 801c370:	8113      	strh	r3, [r2, #8]
			strcpy(p->grade,"7A");
 801c372:	687b      	ldr	r3, [r7, #4]
 801c374:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801c378:	4a55      	ldr	r2, [pc, #340]	; (801c4d0 <problem_fetch+0x1ae6c>)
 801c37a:	8811      	ldrh	r1, [r2, #0]
 801c37c:	7892      	ldrb	r2, [r2, #2]
 801c37e:	8019      	strh	r1, [r3, #0]
 801c380:	709a      	strb	r2, [r3, #2]
			p->moveSize = 8;
 801c382:	687b      	ldr	r3, [r7, #4]
 801c384:	2208      	movs	r2, #8
 801c386:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"C,D,A,F,F,I,E,D");
 801c388:	687b      	ldr	r3, [r7, #4]
 801c38a:	33a4      	adds	r3, #164	; 0xa4
 801c38c:	4a5e      	ldr	r2, [pc, #376]	; (801c508 <problem_fetch+0x1aea4>)
 801c38e:	461c      	mov	r4, r3
 801c390:	4615      	mov	r5, r2
 801c392:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801c394:	6020      	str	r0, [r4, #0]
 801c396:	6061      	str	r1, [r4, #4]
 801c398:	60a2      	str	r2, [r4, #8]
 801c39a:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,7,9,11,13,14,16,18");
 801c39c:	687b      	ldr	r3, [r7, #4]
 801c39e:	3304      	adds	r3, #4
 801c3a0:	4a5a      	ldr	r2, [pc, #360]	; (801c50c <problem_fetch+0x1aea8>)
 801c3a2:	461d      	mov	r5, r3
 801c3a4:	4614      	mov	r4, r2
 801c3a6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801c3a8:	6028      	str	r0, [r5, #0]
 801c3aa:	6069      	str	r1, [r5, #4]
 801c3ac:	60aa      	str	r2, [r5, #8]
 801c3ae:	60eb      	str	r3, [r5, #12]
 801c3b0:	6820      	ldr	r0, [r4, #0]
 801c3b2:	6128      	str	r0, [r5, #16]
 801c3b4:	7923      	ldrb	r3, [r4, #4]
 801c3b6:	752b      	strb	r3, [r5, #20]
			strcpy(p->startFinish,"s,d,d,d,d,d,d,e");
 801c3b8:	687b      	ldr	r3, [r7, #4]
 801c3ba:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 801c3be:	4a54      	ldr	r2, [pc, #336]	; (801c510 <problem_fetch+0x1aeac>)
 801c3c0:	461c      	mov	r4, r3
 801c3c2:	4615      	mov	r5, r2
 801c3c4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801c3c6:	6020      	str	r0, [r4, #0]
 801c3c8:	6061      	str	r1, [r4, #4]
 801c3ca:	60a2      	str	r2, [r4, #8]
 801c3cc:	60e3      	str	r3, [r4, #12]
			break;
 801c3ce:	e079      	b.n	801c4c4 <problem_fetch+0x1ae60>
		case 806 :
			strcpy(p->name,"HARD TIMES");
 801c3d0:	687b      	ldr	r3, [r7, #4]
 801c3d2:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801c3d6:	494f      	ldr	r1, [pc, #316]	; (801c514 <problem_fetch+0x1aeb0>)
 801c3d8:	461a      	mov	r2, r3
 801c3da:	460b      	mov	r3, r1
 801c3dc:	cb03      	ldmia	r3!, {r0, r1}
 801c3de:	6010      	str	r0, [r2, #0]
 801c3e0:	6051      	str	r1, [r2, #4]
 801c3e2:	8819      	ldrh	r1, [r3, #0]
 801c3e4:	789b      	ldrb	r3, [r3, #2]
 801c3e6:	8111      	strh	r1, [r2, #8]
 801c3e8:	7293      	strb	r3, [r2, #10]
			strcpy(p->grade,"7A");
 801c3ea:	687b      	ldr	r3, [r7, #4]
 801c3ec:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801c3f0:	4a37      	ldr	r2, [pc, #220]	; (801c4d0 <problem_fetch+0x1ae6c>)
 801c3f2:	8811      	ldrh	r1, [r2, #0]
 801c3f4:	7892      	ldrb	r2, [r2, #2]
 801c3f6:	8019      	strh	r1, [r3, #0]
 801c3f8:	709a      	strb	r2, [r3, #2]
			p->moveSize = 8;
 801c3fa:	687b      	ldr	r3, [r7, #4]
 801c3fc:	2208      	movs	r2, #8
 801c3fe:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"B,E,E,E,E,G,I,J");
 801c400:	687b      	ldr	r3, [r7, #4]
 801c402:	33a4      	adds	r3, #164	; 0xa4
 801c404:	4a44      	ldr	r2, [pc, #272]	; (801c518 <problem_fetch+0x1aeb4>)
 801c406:	461c      	mov	r4, r3
 801c408:	4615      	mov	r5, r2
 801c40a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801c40c:	6020      	str	r0, [r4, #0]
 801c40e:	6061      	str	r1, [r4, #4]
 801c410:	60a2      	str	r2, [r4, #8]
 801c412:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"10,6,8,12,16,4,18,5");
 801c414:	687b      	ldr	r3, [r7, #4]
 801c416:	3304      	adds	r3, #4
 801c418:	4a40      	ldr	r2, [pc, #256]	; (801c51c <problem_fetch+0x1aeb8>)
 801c41a:	461d      	mov	r5, r3
 801c41c:	4614      	mov	r4, r2
 801c41e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801c420:	6028      	str	r0, [r5, #0]
 801c422:	6069      	str	r1, [r5, #4]
 801c424:	60aa      	str	r2, [r5, #8]
 801c426:	60eb      	str	r3, [r5, #12]
 801c428:	6820      	ldr	r0, [r4, #0]
 801c42a:	6128      	str	r0, [r5, #16]
			strcpy(p->startFinish,"d,d,d,d,d,s,e,s");
 801c42c:	687b      	ldr	r3, [r7, #4]
 801c42e:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 801c432:	4a3b      	ldr	r2, [pc, #236]	; (801c520 <problem_fetch+0x1aebc>)
 801c434:	461c      	mov	r4, r3
 801c436:	4615      	mov	r5, r2
 801c438:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801c43a:	6020      	str	r0, [r4, #0]
 801c43c:	6061      	str	r1, [r4, #4]
 801c43e:	60a2      	str	r2, [r4, #8]
 801c440:	60e3      	str	r3, [r4, #12]
			break;
 801c442:	e03f      	b.n	801c4c4 <problem_fetch+0x1ae60>
		case 807 :
			strcpy(p->name,"FAR FROM THE MADDING CROWD");
 801c444:	687b      	ldr	r3, [r7, #4]
 801c446:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801c44a:	4a36      	ldr	r2, [pc, #216]	; (801c524 <problem_fetch+0x1aec0>)
 801c44c:	461d      	mov	r5, r3
 801c44e:	4614      	mov	r4, r2
 801c450:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801c452:	6028      	str	r0, [r5, #0]
 801c454:	6069      	str	r1, [r5, #4]
 801c456:	60aa      	str	r2, [r5, #8]
 801c458:	60eb      	str	r3, [r5, #12]
 801c45a:	cc03      	ldmia	r4!, {r0, r1}
 801c45c:	6128      	str	r0, [r5, #16]
 801c45e:	6169      	str	r1, [r5, #20]
 801c460:	8823      	ldrh	r3, [r4, #0]
 801c462:	78a2      	ldrb	r2, [r4, #2]
 801c464:	832b      	strh	r3, [r5, #24]
 801c466:	4613      	mov	r3, r2
 801c468:	76ab      	strb	r3, [r5, #26]
			strcpy(p->grade,"6B+");
 801c46a:	687b      	ldr	r3, [r7, #4]
 801c46c:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801c470:	4a2d      	ldr	r2, [pc, #180]	; (801c528 <problem_fetch+0x1aec4>)
 801c472:	6810      	ldr	r0, [r2, #0]
 801c474:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 801c476:	687b      	ldr	r3, [r7, #4]
 801c478:	2207      	movs	r2, #7
 801c47a:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"E,C,E,F,C,D,D");
 801c47c:	687b      	ldr	r3, [r7, #4]
 801c47e:	33a4      	adds	r3, #164	; 0xa4
 801c480:	4a2a      	ldr	r2, [pc, #168]	; (801c52c <problem_fetch+0x1aec8>)
 801c482:	461c      	mov	r4, r3
 801c484:	4613      	mov	r3, r2
 801c486:	cb07      	ldmia	r3!, {r0, r1, r2}
 801c488:	6020      	str	r0, [r4, #0]
 801c48a:	6061      	str	r1, [r4, #4]
 801c48c:	60a2      	str	r2, [r4, #8]
 801c48e:	881b      	ldrh	r3, [r3, #0]
 801c490:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"6,5,8,11,13,15,18");
 801c492:	687b      	ldr	r3, [r7, #4]
 801c494:	3304      	adds	r3, #4
 801c496:	4a26      	ldr	r2, [pc, #152]	; (801c530 <problem_fetch+0x1aecc>)
 801c498:	461d      	mov	r5, r3
 801c49a:	4614      	mov	r4, r2
 801c49c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801c49e:	6028      	str	r0, [r5, #0]
 801c4a0:	6069      	str	r1, [r5, #4]
 801c4a2:	60aa      	str	r2, [r5, #8]
 801c4a4:	60eb      	str	r3, [r5, #12]
 801c4a6:	8823      	ldrh	r3, [r4, #0]
 801c4a8:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,s,d,d,d,d,e");
 801c4aa:	687b      	ldr	r3, [r7, #4]
 801c4ac:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 801c4b0:	4a13      	ldr	r2, [pc, #76]	; (801c500 <problem_fetch+0x1ae9c>)
 801c4b2:	461c      	mov	r4, r3
 801c4b4:	4613      	mov	r3, r2
 801c4b6:	cb07      	ldmia	r3!, {r0, r1, r2}
 801c4b8:	6020      	str	r0, [r4, #0]
 801c4ba:	6061      	str	r1, [r4, #4]
 801c4bc:	60a2      	str	r2, [r4, #8]
 801c4be:	881b      	ldrh	r3, [r3, #0]
 801c4c0:	81a3      	strh	r3, [r4, #12]
			break;
 801c4c2:	bf00      	nop
	}
}
 801c4c4:	bf00      	nop
 801c4c6:	370c      	adds	r7, #12
 801c4c8:	46bd      	mov	sp, r7
 801c4ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801c4cc:	0802d054 	.word	0x0802d054
 801c4d0:	08023ae4 	.word	0x08023ae4
 801c4d4:	0802d060 	.word	0x0802d060
 801c4d8:	0802d070 	.word	0x0802d070
 801c4dc:	08023cac 	.word	0x08023cac
 801c4e0:	0802d084 	.word	0x0802d084
 801c4e4:	08023cc4 	.word	0x08023cc4
 801c4e8:	0802d090 	.word	0x0802d090
 801c4ec:	0802d09c 	.word	0x0802d09c
 801c4f0:	08023ec0 	.word	0x08023ec0
 801c4f4:	0802d0ac 	.word	0x0802d0ac
 801c4f8:	080288f8 	.word	0x080288f8
 801c4fc:	0802d0b8 	.word	0x0802d0b8
 801c500:	08023b9c 	.word	0x08023b9c
 801c504:	0802d0cc 	.word	0x0802d0cc
 801c508:	0802d0d8 	.word	0x0802d0d8
 801c50c:	0802d0e8 	.word	0x0802d0e8
 801c510:	08023d34 	.word	0x08023d34
 801c514:	0802d100 	.word	0x0802d100
 801c518:	0802d10c 	.word	0x0802d10c
 801c51c:	0802d11c 	.word	0x0802d11c
 801c520:	0802d130 	.word	0x0802d130
 801c524:	0802d140 	.word	0x0802d140
 801c528:	08023b24 	.word	0x08023b24
 801c52c:	0802d15c 	.word	0x0802d15c
 801c530:	0802d16c 	.word	0x0802d16c

0801c534 <PRINTF>:
#include <string.h>
#include <stdio.h>



void PRINTF(char str[50]){
 801c534:	b580      	push	{r7, lr}
 801c536:	b090      	sub	sp, #64	; 0x40
 801c538:	af00      	add	r7, sp, #0
 801c53a:	6078      	str	r0, [r7, #4]
  char msg[50];
  int msg_len;
  msg_len = sprintf(msg, str);
 801c53c:	f107 0308 	add.w	r3, r7, #8
 801c540:	6879      	ldr	r1, [r7, #4]
 801c542:	4618      	mov	r0, r3
 801c544:	f005 fe06 	bl	8022154 <siprintf>
 801c548:	63f8      	str	r0, [r7, #60]	; 0x3c
  HAL_UART_Transmit(&huart2, (uint8_t *)msg, msg_len, 5000);
 801c54a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801c54c:	b29a      	uxth	r2, r3
 801c54e:	f107 0108 	add.w	r1, r7, #8
 801c552:	f241 3388 	movw	r3, #5000	; 0x1388
 801c556:	4803      	ldr	r0, [pc, #12]	; (801c564 <PRINTF+0x30>)
 801c558:	f004 fe41 	bl	80211de <HAL_UART_Transmit>
}
 801c55c:	bf00      	nop
 801c55e:	3740      	adds	r7, #64	; 0x40
 801c560:	46bd      	mov	sp, r7
 801c562:	bd80      	pop	{r7, pc}
 801c564:	2000560c 	.word	0x2000560c

0801c568 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 801c568:	b580      	push	{r7, lr}
 801c56a:	b082      	sub	sp, #8
 801c56c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 801c56e:	2300      	movs	r3, #0
 801c570:	607b      	str	r3, [r7, #4]
 801c572:	4b10      	ldr	r3, [pc, #64]	; (801c5b4 <MX_DMA_Init+0x4c>)
 801c574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c576:	4a0f      	ldr	r2, [pc, #60]	; (801c5b4 <MX_DMA_Init+0x4c>)
 801c578:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 801c57c:	6313      	str	r3, [r2, #48]	; 0x30
 801c57e:	4b0d      	ldr	r3, [pc, #52]	; (801c5b4 <MX_DMA_Init+0x4c>)
 801c580:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c582:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 801c586:	607b      	str	r3, [r7, #4]
 801c588:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 801c58a:	2200      	movs	r2, #0
 801c58c:	2100      	movs	r1, #0
 801c58e:	200f      	movs	r0, #15
 801c590:	f001 fbd9 	bl	801dd46 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 801c594:	200f      	movs	r0, #15
 801c596:	f001 fbf2 	bl	801dd7e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 801c59a:	2200      	movs	r2, #0
 801c59c:	2100      	movs	r1, #0
 801c59e:	2010      	movs	r0, #16
 801c5a0:	f001 fbd1 	bl	801dd46 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 801c5a4:	2010      	movs	r0, #16
 801c5a6:	f001 fbea 	bl	801dd7e <HAL_NVIC_EnableIRQ>

}
 801c5aa:	bf00      	nop
 801c5ac:	3708      	adds	r7, #8
 801c5ae:	46bd      	mov	sp, r7
 801c5b0:	bd80      	pop	{r7, pc}
 801c5b2:	bf00      	nop
 801c5b4:	40023800 	.word	0x40023800

0801c5b8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 801c5b8:	b580      	push	{r7, lr}
 801c5ba:	b08a      	sub	sp, #40	; 0x28
 801c5bc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801c5be:	f107 0314 	add.w	r3, r7, #20
 801c5c2:	2200      	movs	r2, #0
 801c5c4:	601a      	str	r2, [r3, #0]
 801c5c6:	605a      	str	r2, [r3, #4]
 801c5c8:	609a      	str	r2, [r3, #8]
 801c5ca:	60da      	str	r2, [r3, #12]
 801c5cc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 801c5ce:	2300      	movs	r3, #0
 801c5d0:	613b      	str	r3, [r7, #16]
 801c5d2:	4b53      	ldr	r3, [pc, #332]	; (801c720 <MX_GPIO_Init+0x168>)
 801c5d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c5d6:	4a52      	ldr	r2, [pc, #328]	; (801c720 <MX_GPIO_Init+0x168>)
 801c5d8:	f043 0304 	orr.w	r3, r3, #4
 801c5dc:	6313      	str	r3, [r2, #48]	; 0x30
 801c5de:	4b50      	ldr	r3, [pc, #320]	; (801c720 <MX_GPIO_Init+0x168>)
 801c5e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c5e2:	f003 0304 	and.w	r3, r3, #4
 801c5e6:	613b      	str	r3, [r7, #16]
 801c5e8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 801c5ea:	2300      	movs	r3, #0
 801c5ec:	60fb      	str	r3, [r7, #12]
 801c5ee:	4b4c      	ldr	r3, [pc, #304]	; (801c720 <MX_GPIO_Init+0x168>)
 801c5f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c5f2:	4a4b      	ldr	r2, [pc, #300]	; (801c720 <MX_GPIO_Init+0x168>)
 801c5f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801c5f8:	6313      	str	r3, [r2, #48]	; 0x30
 801c5fa:	4b49      	ldr	r3, [pc, #292]	; (801c720 <MX_GPIO_Init+0x168>)
 801c5fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c5fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801c602:	60fb      	str	r3, [r7, #12]
 801c604:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 801c606:	2300      	movs	r3, #0
 801c608:	60bb      	str	r3, [r7, #8]
 801c60a:	4b45      	ldr	r3, [pc, #276]	; (801c720 <MX_GPIO_Init+0x168>)
 801c60c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c60e:	4a44      	ldr	r2, [pc, #272]	; (801c720 <MX_GPIO_Init+0x168>)
 801c610:	f043 0301 	orr.w	r3, r3, #1
 801c614:	6313      	str	r3, [r2, #48]	; 0x30
 801c616:	4b42      	ldr	r3, [pc, #264]	; (801c720 <MX_GPIO_Init+0x168>)
 801c618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c61a:	f003 0301 	and.w	r3, r3, #1
 801c61e:	60bb      	str	r3, [r7, #8]
 801c620:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 801c622:	2300      	movs	r3, #0
 801c624:	607b      	str	r3, [r7, #4]
 801c626:	4b3e      	ldr	r3, [pc, #248]	; (801c720 <MX_GPIO_Init+0x168>)
 801c628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c62a:	4a3d      	ldr	r2, [pc, #244]	; (801c720 <MX_GPIO_Init+0x168>)
 801c62c:	f043 0302 	orr.w	r3, r3, #2
 801c630:	6313      	str	r3, [r2, #48]	; 0x30
 801c632:	4b3b      	ldr	r3, [pc, #236]	; (801c720 <MX_GPIO_Init+0x168>)
 801c634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c636:	f003 0302 	and.w	r3, r3, #2
 801c63a:	607b      	str	r3, [r7, #4]
 801c63c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|GPIO_PIN_9, GPIO_PIN_RESET);
 801c63e:	2200      	movs	r2, #0
 801c640:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 801c644:	4837      	ldr	r0, [pc, #220]	; (801c724 <MX_GPIO_Init+0x16c>)
 801c646:	f002 f953 	bl	801e8f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 801c64a:	2200      	movs	r2, #0
 801c64c:	2180      	movs	r1, #128	; 0x80
 801c64e:	4836      	ldr	r0, [pc, #216]	; (801c728 <MX_GPIO_Init+0x170>)
 801c650:	f002 f94e 	bl	801e8f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 801c654:	2200      	movs	r2, #0
 801c656:	f44f 7140 	mov.w	r1, #768	; 0x300
 801c65a:	4834      	ldr	r0, [pc, #208]	; (801c72c <MX_GPIO_Init+0x174>)
 801c65c:	f002 f948 	bl	801e8f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 801c660:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 801c664:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 801c666:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 801c66a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 801c66c:	2300      	movs	r3, #0
 801c66e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 801c670:	f107 0314 	add.w	r3, r7, #20
 801c674:	4619      	mov	r1, r3
 801c676:	482c      	ldr	r0, [pc, #176]	; (801c728 <MX_GPIO_Init+0x170>)
 801c678:	f001 ff9e 	bl	801e5b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_9;
 801c67c:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 801c680:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 801c682:	2301      	movs	r3, #1
 801c684:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 801c686:	2300      	movs	r3, #0
 801c688:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801c68a:	2300      	movs	r3, #0
 801c68c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 801c68e:	f107 0314 	add.w	r3, r7, #20
 801c692:	4619      	mov	r1, r3
 801c694:	4823      	ldr	r0, [pc, #140]	; (801c724 <MX_GPIO_Init+0x16c>)
 801c696:	f001 ff8f 	bl	801e5b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 801c69a:	2380      	movs	r3, #128	; 0x80
 801c69c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 801c69e:	2301      	movs	r3, #1
 801c6a0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 801c6a2:	2300      	movs	r3, #0
 801c6a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801c6a6:	2300      	movs	r3, #0
 801c6a8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 801c6aa:	f107 0314 	add.w	r3, r7, #20
 801c6ae:	4619      	mov	r1, r3
 801c6b0:	481d      	ldr	r0, [pc, #116]	; (801c728 <MX_GPIO_Init+0x170>)
 801c6b2:	f001 ff81 	bl	801e5b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 801c6b6:	f44f 7340 	mov.w	r3, #768	; 0x300
 801c6ba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 801c6bc:	2301      	movs	r3, #1
 801c6be:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 801c6c0:	2300      	movs	r3, #0
 801c6c2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801c6c4:	2300      	movs	r3, #0
 801c6c6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801c6c8:	f107 0314 	add.w	r3, r7, #20
 801c6cc:	4619      	mov	r1, r3
 801c6ce:	4817      	ldr	r0, [pc, #92]	; (801c72c <MX_GPIO_Init+0x174>)
 801c6d0:	f001 ff72 	bl	801e5b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 801c6d4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801c6d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 801c6da:	2300      	movs	r3, #0
 801c6dc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 801c6de:	2301      	movs	r3, #1
 801c6e0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801c6e2:	f107 0314 	add.w	r3, r7, #20
 801c6e6:	4619      	mov	r1, r3
 801c6e8:	4810      	ldr	r0, [pc, #64]	; (801c72c <MX_GPIO_Init+0x174>)
 801c6ea:	f001 ff65 	bl	801e5b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 801c6ee:	2338      	movs	r3, #56	; 0x38
 801c6f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 801c6f2:	2300      	movs	r3, #0
 801c6f4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 801c6f6:	2301      	movs	r3, #1
 801c6f8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 801c6fa:	f107 0314 	add.w	r3, r7, #20
 801c6fe:	4619      	mov	r1, r3
 801c700:	4808      	ldr	r0, [pc, #32]	; (801c724 <MX_GPIO_Init+0x16c>)
 801c702:	f001 ff59 	bl	801e5b8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 801c706:	2200      	movs	r2, #0
 801c708:	2100      	movs	r1, #0
 801c70a:	2028      	movs	r0, #40	; 0x28
 801c70c:	f001 fb1b 	bl	801dd46 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 801c710:	2028      	movs	r0, #40	; 0x28
 801c712:	f001 fb34 	bl	801dd7e <HAL_NVIC_EnableIRQ>

}
 801c716:	bf00      	nop
 801c718:	3728      	adds	r7, #40	; 0x28
 801c71a:	46bd      	mov	sp, r7
 801c71c:	bd80      	pop	{r7, pc}
 801c71e:	bf00      	nop
 801c720:	40023800 	.word	0x40023800
 801c724:	40020400 	.word	0x40020400
 801c728:	40020800 	.word	0x40020800
 801c72c:	40020000 	.word	0x40020000

0801c730 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 801c730:	b580      	push	{r7, lr}
 801c732:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 801c734:	4b12      	ldr	r3, [pc, #72]	; (801c780 <MX_I2C1_Init+0x50>)
 801c736:	4a13      	ldr	r2, [pc, #76]	; (801c784 <MX_I2C1_Init+0x54>)
 801c738:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 801c73a:	4b11      	ldr	r3, [pc, #68]	; (801c780 <MX_I2C1_Init+0x50>)
 801c73c:	4a12      	ldr	r2, [pc, #72]	; (801c788 <MX_I2C1_Init+0x58>)
 801c73e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 801c740:	4b0f      	ldr	r3, [pc, #60]	; (801c780 <MX_I2C1_Init+0x50>)
 801c742:	2200      	movs	r2, #0
 801c744:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 801c746:	4b0e      	ldr	r3, [pc, #56]	; (801c780 <MX_I2C1_Init+0x50>)
 801c748:	2200      	movs	r2, #0
 801c74a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 801c74c:	4b0c      	ldr	r3, [pc, #48]	; (801c780 <MX_I2C1_Init+0x50>)
 801c74e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 801c752:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 801c754:	4b0a      	ldr	r3, [pc, #40]	; (801c780 <MX_I2C1_Init+0x50>)
 801c756:	2200      	movs	r2, #0
 801c758:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 801c75a:	4b09      	ldr	r3, [pc, #36]	; (801c780 <MX_I2C1_Init+0x50>)
 801c75c:	2200      	movs	r2, #0
 801c75e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 801c760:	4b07      	ldr	r3, [pc, #28]	; (801c780 <MX_I2C1_Init+0x50>)
 801c762:	2200      	movs	r2, #0
 801c764:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 801c766:	4b06      	ldr	r3, [pc, #24]	; (801c780 <MX_I2C1_Init+0x50>)
 801c768:	2200      	movs	r2, #0
 801c76a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 801c76c:	4804      	ldr	r0, [pc, #16]	; (801c780 <MX_I2C1_Init+0x50>)
 801c76e:	f002 f8f1 	bl	801e954 <HAL_I2C_Init>
 801c772:	4603      	mov	r3, r0
 801c774:	2b00      	cmp	r3, #0
 801c776:	d001      	beq.n	801c77c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 801c778:	f000 fd7a 	bl	801d270 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 801c77c:	bf00      	nop
 801c77e:	bd80      	pop	{r7, pc}
 801c780:	20005424 	.word	0x20005424
 801c784:	40005400 	.word	0x40005400
 801c788:	000186a0 	.word	0x000186a0

0801c78c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 801c78c:	b580      	push	{r7, lr}
 801c78e:	b08a      	sub	sp, #40	; 0x28
 801c790:	af00      	add	r7, sp, #0
 801c792:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801c794:	f107 0314 	add.w	r3, r7, #20
 801c798:	2200      	movs	r2, #0
 801c79a:	601a      	str	r2, [r3, #0]
 801c79c:	605a      	str	r2, [r3, #4]
 801c79e:	609a      	str	r2, [r3, #8]
 801c7a0:	60da      	str	r2, [r3, #12]
 801c7a2:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 801c7a4:	687b      	ldr	r3, [r7, #4]
 801c7a6:	681b      	ldr	r3, [r3, #0]
 801c7a8:	4a19      	ldr	r2, [pc, #100]	; (801c810 <HAL_I2C_MspInit+0x84>)
 801c7aa:	4293      	cmp	r3, r2
 801c7ac:	d12b      	bne.n	801c806 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 801c7ae:	2300      	movs	r3, #0
 801c7b0:	613b      	str	r3, [r7, #16]
 801c7b2:	4b18      	ldr	r3, [pc, #96]	; (801c814 <HAL_I2C_MspInit+0x88>)
 801c7b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c7b6:	4a17      	ldr	r2, [pc, #92]	; (801c814 <HAL_I2C_MspInit+0x88>)
 801c7b8:	f043 0302 	orr.w	r3, r3, #2
 801c7bc:	6313      	str	r3, [r2, #48]	; 0x30
 801c7be:	4b15      	ldr	r3, [pc, #84]	; (801c814 <HAL_I2C_MspInit+0x88>)
 801c7c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c7c2:	f003 0302 	and.w	r3, r3, #2
 801c7c6:	613b      	str	r3, [r7, #16]
 801c7c8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 801c7ca:	23c0      	movs	r3, #192	; 0xc0
 801c7cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 801c7ce:	2312      	movs	r3, #18
 801c7d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 801c7d2:	2301      	movs	r3, #1
 801c7d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801c7d6:	2303      	movs	r3, #3
 801c7d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 801c7da:	2304      	movs	r3, #4
 801c7dc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 801c7de:	f107 0314 	add.w	r3, r7, #20
 801c7e2:	4619      	mov	r1, r3
 801c7e4:	480c      	ldr	r0, [pc, #48]	; (801c818 <HAL_I2C_MspInit+0x8c>)
 801c7e6:	f001 fee7 	bl	801e5b8 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 801c7ea:	2300      	movs	r3, #0
 801c7ec:	60fb      	str	r3, [r7, #12]
 801c7ee:	4b09      	ldr	r3, [pc, #36]	; (801c814 <HAL_I2C_MspInit+0x88>)
 801c7f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801c7f2:	4a08      	ldr	r2, [pc, #32]	; (801c814 <HAL_I2C_MspInit+0x88>)
 801c7f4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 801c7f8:	6413      	str	r3, [r2, #64]	; 0x40
 801c7fa:	4b06      	ldr	r3, [pc, #24]	; (801c814 <HAL_I2C_MspInit+0x88>)
 801c7fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801c7fe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 801c802:	60fb      	str	r3, [r7, #12]
 801c804:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 801c806:	bf00      	nop
 801c808:	3728      	adds	r7, #40	; 0x28
 801c80a:	46bd      	mov	sp, r7
 801c80c:	bd80      	pop	{r7, pc}
 801c80e:	bf00      	nop
 801c810:	40005400 	.word	0x40005400
 801c814:	40023800 	.word	0x40023800
 801c818:	40020400 	.word	0x40020400

0801c81c <read_GPIO>:

//#define debug_output



uint8_t read_GPIO(){
 801c81c:	b580      	push	{r7, lr}
 801c81e:	af00      	add	r7, sp, #0

	if(!HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_4)){			// if GPIO is low
 801c820:	2110      	movs	r1, #16
 801c822:	4824      	ldr	r0, [pc, #144]	; (801c8b4 <read_GPIO+0x98>)
 801c824:	f002 f84c 	bl	801e8c0 <HAL_GPIO_ReadPin>
 801c828:	4603      	mov	r3, r0
 801c82a:	2b00      	cmp	r3, #0
 801c82c:	d109      	bne.n	801c842 <read_GPIO+0x26>
		while(!HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_4));	// wait till GPIO return high
 801c82e:	bf00      	nop
 801c830:	2110      	movs	r1, #16
 801c832:	4820      	ldr	r0, [pc, #128]	; (801c8b4 <read_GPIO+0x98>)
 801c834:	f002 f844 	bl	801e8c0 <HAL_GPIO_ReadPin>
 801c838:	4603      	mov	r3, r0
 801c83a:	2b00      	cmp	r3, #0
 801c83c:	d0f8      	beq.n	801c830 <read_GPIO+0x14>
		return 1;
 801c83e:	2301      	movs	r3, #1
 801c840:	e035      	b.n	801c8ae <read_GPIO+0x92>
	}
	if(!HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5)){
 801c842:	2120      	movs	r1, #32
 801c844:	481b      	ldr	r0, [pc, #108]	; (801c8b4 <read_GPIO+0x98>)
 801c846:	f002 f83b 	bl	801e8c0 <HAL_GPIO_ReadPin>
 801c84a:	4603      	mov	r3, r0
 801c84c:	2b00      	cmp	r3, #0
 801c84e:	d109      	bne.n	801c864 <read_GPIO+0x48>
		while(!HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5));
 801c850:	bf00      	nop
 801c852:	2120      	movs	r1, #32
 801c854:	4817      	ldr	r0, [pc, #92]	; (801c8b4 <read_GPIO+0x98>)
 801c856:	f002 f833 	bl	801e8c0 <HAL_GPIO_ReadPin>
 801c85a:	4603      	mov	r3, r0
 801c85c:	2b00      	cmp	r3, #0
 801c85e:	d0f8      	beq.n	801c852 <read_GPIO+0x36>
		return 2;
 801c860:	2302      	movs	r3, #2
 801c862:	e024      	b.n	801c8ae <read_GPIO+0x92>
	}
	if(!HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_3)){
 801c864:	2108      	movs	r1, #8
 801c866:	4813      	ldr	r0, [pc, #76]	; (801c8b4 <read_GPIO+0x98>)
 801c868:	f002 f82a 	bl	801e8c0 <HAL_GPIO_ReadPin>
 801c86c:	4603      	mov	r3, r0
 801c86e:	2b00      	cmp	r3, #0
 801c870:	d109      	bne.n	801c886 <read_GPIO+0x6a>
		while(!HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_3));
 801c872:	bf00      	nop
 801c874:	2108      	movs	r1, #8
 801c876:	480f      	ldr	r0, [pc, #60]	; (801c8b4 <read_GPIO+0x98>)
 801c878:	f002 f822 	bl	801e8c0 <HAL_GPIO_ReadPin>
 801c87c:	4603      	mov	r3, r0
 801c87e:	2b00      	cmp	r3, #0
 801c880:	d0f8      	beq.n	801c874 <read_GPIO+0x58>
		return 3;
 801c882:	2303      	movs	r3, #3
 801c884:	e013      	b.n	801c8ae <read_GPIO+0x92>
	}
	if(!HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_10)){
 801c886:	f44f 6180 	mov.w	r1, #1024	; 0x400
 801c88a:	480b      	ldr	r0, [pc, #44]	; (801c8b8 <read_GPIO+0x9c>)
 801c88c:	f002 f818 	bl	801e8c0 <HAL_GPIO_ReadPin>
 801c890:	4603      	mov	r3, r0
 801c892:	2b00      	cmp	r3, #0
 801c894:	d10a      	bne.n	801c8ac <read_GPIO+0x90>
		while(!HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_10));
 801c896:	bf00      	nop
 801c898:	f44f 6180 	mov.w	r1, #1024	; 0x400
 801c89c:	4806      	ldr	r0, [pc, #24]	; (801c8b8 <read_GPIO+0x9c>)
 801c89e:	f002 f80f 	bl	801e8c0 <HAL_GPIO_ReadPin>
 801c8a2:	4603      	mov	r3, r0
 801c8a4:	2b00      	cmp	r3, #0
 801c8a6:	d0f7      	beq.n	801c898 <read_GPIO+0x7c>
		return 4;
 801c8a8:	2304      	movs	r3, #4
 801c8aa:	e000      	b.n	801c8ae <read_GPIO+0x92>
	}

	return 99;
 801c8ac:	2363      	movs	r3, #99	; 0x63
}
 801c8ae:	4618      	mov	r0, r3
 801c8b0:	bd80      	pop	{r7, pc}
 801c8b2:	bf00      	nop
 801c8b4:	40020400 	.word	0x40020400
 801c8b8:	40020000 	.word	0x40020000

0801c8bc <write_GPIO>:



void write_GPIO(uint8_t riga){
 801c8bc:	b580      	push	{r7, lr}
 801c8be:	b084      	sub	sp, #16
 801c8c0:	af00      	add	r7, sp, #0
 801c8c2:	4603      	mov	r3, r0
 801c8c4:	71fb      	strb	r3, [r7, #7]

	GPIO_PinState state_row1 = GPIO_PIN_SET;
 801c8c6:	2301      	movs	r3, #1
 801c8c8:	73fb      	strb	r3, [r7, #15]
	GPIO_PinState state_row2 = GPIO_PIN_SET;
 801c8ca:	2301      	movs	r3, #1
 801c8cc:	73bb      	strb	r3, [r7, #14]
	GPIO_PinState state_row3 = GPIO_PIN_SET;
 801c8ce:	2301      	movs	r3, #1
 801c8d0:	737b      	strb	r3, [r7, #13]
	GPIO_PinState state_row4 = GPIO_PIN_SET;
 801c8d2:	2301      	movs	r3, #1
 801c8d4:	733b      	strb	r3, [r7, #12]

	if(riga==1){
 801c8d6:	79fb      	ldrb	r3, [r7, #7]
 801c8d8:	2b01      	cmp	r3, #1
 801c8da:	d102      	bne.n	801c8e2 <write_GPIO+0x26>
		state_row1 = GPIO_PIN_RESET;
 801c8dc:	2300      	movs	r3, #0
 801c8de:	73fb      	strb	r3, [r7, #15]
 801c8e0:	e010      	b.n	801c904 <write_GPIO+0x48>
	}else if(riga==2){
 801c8e2:	79fb      	ldrb	r3, [r7, #7]
 801c8e4:	2b02      	cmp	r3, #2
 801c8e6:	d102      	bne.n	801c8ee <write_GPIO+0x32>
		state_row2 = GPIO_PIN_RESET;
 801c8e8:	2300      	movs	r3, #0
 801c8ea:	73bb      	strb	r3, [r7, #14]
 801c8ec:	e00a      	b.n	801c904 <write_GPIO+0x48>
	}else if(riga==3){
 801c8ee:	79fb      	ldrb	r3, [r7, #7]
 801c8f0:	2b03      	cmp	r3, #3
 801c8f2:	d102      	bne.n	801c8fa <write_GPIO+0x3e>
		state_row3 = GPIO_PIN_RESET;
 801c8f4:	2300      	movs	r3, #0
 801c8f6:	737b      	strb	r3, [r7, #13]
 801c8f8:	e004      	b.n	801c904 <write_GPIO+0x48>
	}else if(riga==4){
 801c8fa:	79fb      	ldrb	r3, [r7, #7]
 801c8fc:	2b04      	cmp	r3, #4
 801c8fe:	d101      	bne.n	801c904 <write_GPIO+0x48>
		state_row4 = GPIO_PIN_RESET;
 801c900:	2300      	movs	r3, #0
 801c902:	733b      	strb	r3, [r7, #12]
	}

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, state_row1);
 801c904:	7bfb      	ldrb	r3, [r7, #15]
 801c906:	461a      	mov	r2, r3
 801c908:	2180      	movs	r1, #128	; 0x80
 801c90a:	480e      	ldr	r0, [pc, #56]	; (801c944 <write_GPIO+0x88>)
 801c90c:	f001 fff0 	bl	801e8f0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, state_row2);
 801c910:	7bbb      	ldrb	r3, [r7, #14]
 801c912:	461a      	mov	r2, r3
 801c914:	f44f 7100 	mov.w	r1, #512	; 0x200
 801c918:	480b      	ldr	r0, [pc, #44]	; (801c948 <write_GPIO+0x8c>)
 801c91a:	f001 ffe9 	bl	801e8f0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, state_row3);
 801c91e:	7b7b      	ldrb	r3, [r7, #13]
 801c920:	461a      	mov	r2, r3
 801c922:	f44f 7180 	mov.w	r1, #256	; 0x100
 801c926:	4808      	ldr	r0, [pc, #32]	; (801c948 <write_GPIO+0x8c>)
 801c928:	f001 ffe2 	bl	801e8f0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, state_row4);
 801c92c:	7b3b      	ldrb	r3, [r7, #12]
 801c92e:	461a      	mov	r2, r3
 801c930:	f44f 6180 	mov.w	r1, #1024	; 0x400
 801c934:	4805      	ldr	r0, [pc, #20]	; (801c94c <write_GPIO+0x90>)
 801c936:	f001 ffdb 	bl	801e8f0 <HAL_GPIO_WritePin>
}
 801c93a:	bf00      	nop
 801c93c:	3710      	adds	r7, #16
 801c93e:	46bd      	mov	sp, r7
 801c940:	bd80      	pop	{r7, pc}
 801c942:	bf00      	nop
 801c944:	40020800 	.word	0x40020800
 801c948:	40020000 	.word	0x40020000
 801c94c:	40020400 	.word	0x40020400

0801c950 <decode_key>:



uint8_t decode_key(uint8_t row, uint8_t col){
 801c950:	b480      	push	{r7}
 801c952:	b085      	sub	sp, #20
 801c954:	af00      	add	r7, sp, #0
 801c956:	4603      	mov	r3, r0
 801c958:	460a      	mov	r2, r1
 801c95a:	71fb      	strb	r3, [r7, #7]
 801c95c:	4613      	mov	r3, r2
 801c95e:	71bb      	strb	r3, [r7, #6]
	uint8_t key;

	switch(row){
 801c960:	79fb      	ldrb	r3, [r7, #7]
 801c962:	3b01      	subs	r3, #1
 801c964:	2b03      	cmp	r3, #3
 801c966:	d85f      	bhi.n	801ca28 <decode_key+0xd8>
 801c968:	a201      	add	r2, pc, #4	; (adr r2, 801c970 <decode_key+0x20>)
 801c96a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801c96e:	bf00      	nop
 801c970:	0801c981 	.word	0x0801c981
 801c974:	0801c9ab 	.word	0x0801c9ab
 801c978:	0801c9d5 	.word	0x0801c9d5
 801c97c:	0801c9ff 	.word	0x0801c9ff
		case(1):
			if (col==1) key=1;
 801c980:	79bb      	ldrb	r3, [r7, #6]
 801c982:	2b01      	cmp	r3, #1
 801c984:	d101      	bne.n	801c98a <decode_key+0x3a>
 801c986:	2301      	movs	r3, #1
 801c988:	73fb      	strb	r3, [r7, #15]
			if (col==2) key=2;
 801c98a:	79bb      	ldrb	r3, [r7, #6]
 801c98c:	2b02      	cmp	r3, #2
 801c98e:	d101      	bne.n	801c994 <decode_key+0x44>
 801c990:	2302      	movs	r3, #2
 801c992:	73fb      	strb	r3, [r7, #15]
			if (col==3) key=3;
 801c994:	79bb      	ldrb	r3, [r7, #6]
 801c996:	2b03      	cmp	r3, #3
 801c998:	d101      	bne.n	801c99e <decode_key+0x4e>
 801c99a:	2303      	movs	r3, #3
 801c99c:	73fb      	strb	r3, [r7, #15]
			if (col==4) key=10;
 801c99e:	79bb      	ldrb	r3, [r7, #6]
 801c9a0:	2b04      	cmp	r3, #4
 801c9a2:	d144      	bne.n	801ca2e <decode_key+0xde>
 801c9a4:	230a      	movs	r3, #10
 801c9a6:	73fb      	strb	r3, [r7, #15]
			break;
 801c9a8:	e041      	b.n	801ca2e <decode_key+0xde>
		case(2):
			if (col==1) key=4;
 801c9aa:	79bb      	ldrb	r3, [r7, #6]
 801c9ac:	2b01      	cmp	r3, #1
 801c9ae:	d101      	bne.n	801c9b4 <decode_key+0x64>
 801c9b0:	2304      	movs	r3, #4
 801c9b2:	73fb      	strb	r3, [r7, #15]
			if (col==2) key=5;
 801c9b4:	79bb      	ldrb	r3, [r7, #6]
 801c9b6:	2b02      	cmp	r3, #2
 801c9b8:	d101      	bne.n	801c9be <decode_key+0x6e>
 801c9ba:	2305      	movs	r3, #5
 801c9bc:	73fb      	strb	r3, [r7, #15]
			if (col==3) key=6;
 801c9be:	79bb      	ldrb	r3, [r7, #6]
 801c9c0:	2b03      	cmp	r3, #3
 801c9c2:	d101      	bne.n	801c9c8 <decode_key+0x78>
 801c9c4:	2306      	movs	r3, #6
 801c9c6:	73fb      	strb	r3, [r7, #15]
			if (col==4) key=20;
 801c9c8:	79bb      	ldrb	r3, [r7, #6]
 801c9ca:	2b04      	cmp	r3, #4
 801c9cc:	d131      	bne.n	801ca32 <decode_key+0xe2>
 801c9ce:	2314      	movs	r3, #20
 801c9d0:	73fb      	strb	r3, [r7, #15]
			break;
 801c9d2:	e02e      	b.n	801ca32 <decode_key+0xe2>
		case(3):
			if (col==1) key=7;
 801c9d4:	79bb      	ldrb	r3, [r7, #6]
 801c9d6:	2b01      	cmp	r3, #1
 801c9d8:	d101      	bne.n	801c9de <decode_key+0x8e>
 801c9da:	2307      	movs	r3, #7
 801c9dc:	73fb      	strb	r3, [r7, #15]
			if (col==2) key=8;
 801c9de:	79bb      	ldrb	r3, [r7, #6]
 801c9e0:	2b02      	cmp	r3, #2
 801c9e2:	d101      	bne.n	801c9e8 <decode_key+0x98>
 801c9e4:	2308      	movs	r3, #8
 801c9e6:	73fb      	strb	r3, [r7, #15]
			if (col==3) key=9;
 801c9e8:	79bb      	ldrb	r3, [r7, #6]
 801c9ea:	2b03      	cmp	r3, #3
 801c9ec:	d101      	bne.n	801c9f2 <decode_key+0xa2>
 801c9ee:	2309      	movs	r3, #9
 801c9f0:	73fb      	strb	r3, [r7, #15]
			if (col==4) key=30;
 801c9f2:	79bb      	ldrb	r3, [r7, #6]
 801c9f4:	2b04      	cmp	r3, #4
 801c9f6:	d11e      	bne.n	801ca36 <decode_key+0xe6>
 801c9f8:	231e      	movs	r3, #30
 801c9fa:	73fb      	strb	r3, [r7, #15]
			break;
 801c9fc:	e01b      	b.n	801ca36 <decode_key+0xe6>
		case(4):
			if (col==1) key=40;
 801c9fe:	79bb      	ldrb	r3, [r7, #6]
 801ca00:	2b01      	cmp	r3, #1
 801ca02:	d101      	bne.n	801ca08 <decode_key+0xb8>
 801ca04:	2328      	movs	r3, #40	; 0x28
 801ca06:	73fb      	strb	r3, [r7, #15]
			if (col==2) key=0;
 801ca08:	79bb      	ldrb	r3, [r7, #6]
 801ca0a:	2b02      	cmp	r3, #2
 801ca0c:	d101      	bne.n	801ca12 <decode_key+0xc2>
 801ca0e:	2300      	movs	r3, #0
 801ca10:	73fb      	strb	r3, [r7, #15]
			if (col==3) key=50;
 801ca12:	79bb      	ldrb	r3, [r7, #6]
 801ca14:	2b03      	cmp	r3, #3
 801ca16:	d101      	bne.n	801ca1c <decode_key+0xcc>
 801ca18:	2332      	movs	r3, #50	; 0x32
 801ca1a:	73fb      	strb	r3, [r7, #15]
			if (col==4) key=60;
 801ca1c:	79bb      	ldrb	r3, [r7, #6]
 801ca1e:	2b04      	cmp	r3, #4
 801ca20:	d10b      	bne.n	801ca3a <decode_key+0xea>
 801ca22:	233c      	movs	r3, #60	; 0x3c
 801ca24:	73fb      	strb	r3, [r7, #15]
			break;
 801ca26:	e008      	b.n	801ca3a <decode_key+0xea>
		default:
			key=99;
 801ca28:	2363      	movs	r3, #99	; 0x63
 801ca2a:	73fb      	strb	r3, [r7, #15]
			break;
 801ca2c:	e006      	b.n	801ca3c <decode_key+0xec>
			break;
 801ca2e:	bf00      	nop
 801ca30:	e004      	b.n	801ca3c <decode_key+0xec>
			break;
 801ca32:	bf00      	nop
 801ca34:	e002      	b.n	801ca3c <decode_key+0xec>
			break;
 801ca36:	bf00      	nop
 801ca38:	e000      	b.n	801ca3c <decode_key+0xec>
			break;
 801ca3a:	bf00      	nop
	}

	return key;
 801ca3c:	7bfb      	ldrb	r3, [r7, #15]
}
 801ca3e:	4618      	mov	r0, r3
 801ca40:	3714      	adds	r7, #20
 801ca42:	46bd      	mov	sp, r7
 801ca44:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ca48:	4770      	bx	lr
 801ca4a:	bf00      	nop

0801ca4c <read_key>:



// Perform a polling on each row in order to detect the selection of a key
uint8_t read_key(){
 801ca4c:	b580      	push	{r7, lr}
 801ca4e:	b082      	sub	sp, #8
 801ca50:	af00      	add	r7, sp, #0

	uint8_t key = 99;     		// 99 is the DISCARD number
 801ca52:	2363      	movs	r3, #99	; 0x63
 801ca54:	71fb      	strb	r3, [r7, #7]
	uint8_t col_read = 99;
 801ca56:	2363      	movs	r3, #99	; 0x63
 801ca58:	71bb      	strb	r3, [r7, #6]

	// stay in polling and wait for a button to be pressed
	while(true){

		// *** FIRST row
		write_GPIO(1);								// write 4 status of row GPIO (enable GPIO of row1)
 801ca5a:	2001      	movs	r0, #1
 801ca5c:	f7ff ff2e 	bl	801c8bc <write_GPIO>
		col_read = read_GPIO();						// read 4 status of col GPIO
 801ca60:	f7ff fedc 	bl	801c81c <read_GPIO>
 801ca64:	4603      	mov	r3, r0
 801ca66:	71bb      	strb	r3, [r7, #6]
		if(col_read != 99) {
 801ca68:	79bb      	ldrb	r3, [r7, #6]
 801ca6a:	2b63      	cmp	r3, #99	; 0x63
 801ca6c:	d008      	beq.n	801ca80 <read_key+0x34>
			key = decode_key(1, col_read);		// decode which button has been pressed
 801ca6e:	79bb      	ldrb	r3, [r7, #6]
 801ca70:	4619      	mov	r1, r3
 801ca72:	2001      	movs	r0, #1
 801ca74:	f7ff ff6c 	bl	801c950 <decode_key>
 801ca78:	4603      	mov	r3, r0
 801ca7a:	71fb      	strb	r3, [r7, #7]
			return key;
 801ca7c:	79fb      	ldrb	r3, [r7, #7]
 801ca7e:	e037      	b.n	801caf0 <read_key+0xa4>
		}

		// *** SECOND row
		write_GPIO(2);
 801ca80:	2002      	movs	r0, #2
 801ca82:	f7ff ff1b 	bl	801c8bc <write_GPIO>
		col_read = read_GPIO();
 801ca86:	f7ff fec9 	bl	801c81c <read_GPIO>
 801ca8a:	4603      	mov	r3, r0
 801ca8c:	71bb      	strb	r3, [r7, #6]
		if(col_read != 99){
 801ca8e:	79bb      	ldrb	r3, [r7, #6]
 801ca90:	2b63      	cmp	r3, #99	; 0x63
 801ca92:	d008      	beq.n	801caa6 <read_key+0x5a>
			key = decode_key(2, col_read);
 801ca94:	79bb      	ldrb	r3, [r7, #6]
 801ca96:	4619      	mov	r1, r3
 801ca98:	2002      	movs	r0, #2
 801ca9a:	f7ff ff59 	bl	801c950 <decode_key>
 801ca9e:	4603      	mov	r3, r0
 801caa0:	71fb      	strb	r3, [r7, #7]
			return key;
 801caa2:	79fb      	ldrb	r3, [r7, #7]
 801caa4:	e024      	b.n	801caf0 <read_key+0xa4>
		}

		// *** THIRD row
		write_GPIO(3);
 801caa6:	2003      	movs	r0, #3
 801caa8:	f7ff ff08 	bl	801c8bc <write_GPIO>
		col_read = read_GPIO();
 801caac:	f7ff feb6 	bl	801c81c <read_GPIO>
 801cab0:	4603      	mov	r3, r0
 801cab2:	71bb      	strb	r3, [r7, #6]
		if(col_read != 99){
 801cab4:	79bb      	ldrb	r3, [r7, #6]
 801cab6:	2b63      	cmp	r3, #99	; 0x63
 801cab8:	d008      	beq.n	801cacc <read_key+0x80>
			key = decode_key(3, col_read);
 801caba:	79bb      	ldrb	r3, [r7, #6]
 801cabc:	4619      	mov	r1, r3
 801cabe:	2003      	movs	r0, #3
 801cac0:	f7ff ff46 	bl	801c950 <decode_key>
 801cac4:	4603      	mov	r3, r0
 801cac6:	71fb      	strb	r3, [r7, #7]
			return key;
 801cac8:	79fb      	ldrb	r3, [r7, #7]
 801caca:	e011      	b.n	801caf0 <read_key+0xa4>
		}

		// *** FORTH row
		write_GPIO(4);
 801cacc:	2004      	movs	r0, #4
 801cace:	f7ff fef5 	bl	801c8bc <write_GPIO>
		col_read = read_GPIO();
 801cad2:	f7ff fea3 	bl	801c81c <read_GPIO>
 801cad6:	4603      	mov	r3, r0
 801cad8:	71bb      	strb	r3, [r7, #6]
		if(col_read != 99){
 801cada:	79bb      	ldrb	r3, [r7, #6]
 801cadc:	2b63      	cmp	r3, #99	; 0x63
 801cade:	d0bc      	beq.n	801ca5a <read_key+0xe>
			key = decode_key(4, col_read);
 801cae0:	79bb      	ldrb	r3, [r7, #6]
 801cae2:	4619      	mov	r1, r3
 801cae4:	2004      	movs	r0, #4
 801cae6:	f7ff ff33 	bl	801c950 <decode_key>
 801caea:	4603      	mov	r3, r0
 801caec:	71fb      	strb	r3, [r7, #7]
			return key;
 801caee:	79fb      	ldrb	r3, [r7, #7]
		}
	}

	return 99;
}
 801caf0:	4618      	mov	r0, r3
 801caf2:	3708      	adds	r7, #8
 801caf4:	46bd      	mov	sp, r7
 801caf6:	bd80      	pop	{r7, pc}

0801caf8 <keypad_getNumber>:



uint32_t keypad_getNumber(){
 801caf8:	b5b0      	push	{r4, r5, r7, lr}
 801cafa:	b086      	sub	sp, #24
 801cafc:	af00      	add	r7, sp, #0

	uint8_t inputDigit[10];
	uint32_t number=0;
 801cafe:	2300      	movs	r3, #0
 801cb00:	617b      	str	r3, [r7, #20]
	uint8_t key;
	uint8_t i=0;
 801cb02:	2300      	movs	r3, #0
 801cb04:	74fb      	strb	r3, [r7, #19]

#ifdef debug_output
	PRINTF("\n\r The digits selected are: ");
#endif

	lcd16x2_i2c_printf("-> A to select");
 801cb06:	4860      	ldr	r0, [pc, #384]	; (801cc88 <keypad_getNumber+0x190>)
 801cb08:	f000 f9e6 	bl	801ced8 <lcd16x2_i2c_printf>
	lcd16x2_i2c_2ndLine();
 801cb0c:	f000 f9d2 	bl	801ceb4 <lcd16x2_i2c_2ndLine>
	lcd16x2_i2c_printf("ID:  ");
 801cb10:	485e      	ldr	r0, [pc, #376]	; (801cc8c <keypad_getNumber+0x194>)
 801cb12:	f000 f9e1 	bl	801ced8 <lcd16x2_i2c_printf>
	// until I press the ENTER button do:
	while(true){

		key = read_key();		// returns the digit input
 801cb16:	f7ff ff99 	bl	801ca4c <read_key>
 801cb1a:	4603      	mov	r3, r0
 801cb1c:	72fb      	strb	r3, [r7, #11]

		if(key==99){
 801cb1e:	7afb      	ldrb	r3, [r7, #11]
 801cb20:	2b63      	cmp	r3, #99	; 0x63
 801cb22:	d103      	bne.n	801cb2c <keypad_getNumber+0x34>
			lcd16x2_i2c_printf("Error...");
 801cb24:	485a      	ldr	r0, [pc, #360]	; (801cc90 <keypad_getNumber+0x198>)
 801cb26:	f000 f9d7 	bl	801ced8 <lcd16x2_i2c_printf>
 801cb2a:	e04c      	b.n	801cbc6 <keypad_getNumber+0xce>
		}else if(key==10){			// A, exit insertion number
 801cb2c:	7afb      	ldrb	r3, [r7, #11]
 801cb2e:	2b0a      	cmp	r3, #10
 801cb30:	d106      	bne.n	801cb40 <keypad_getNumber+0x48>
			lcd16x2_i2c_printf(";");
 801cb32:	4858      	ldr	r0, [pc, #352]	; (801cc94 <keypad_getNumber+0x19c>)
 801cb34:	f000 f9d0 	bl	801ced8 <lcd16x2_i2c_printf>
			break;
 801cb38:	bf00      	nop

		key=99;
	}

	// Transform the array in number
	for(int j=i; j>0; j--){
 801cb3a:	7cfb      	ldrb	r3, [r7, #19]
 801cb3c:	60fb      	str	r3, [r7, #12]
 801cb3e:	e07d      	b.n	801cc3c <keypad_getNumber+0x144>
		}else if(key==20){		// B, nothing
 801cb40:	7afb      	ldrb	r3, [r7, #11]
 801cb42:	2b14      	cmp	r3, #20
 801cb44:	d103      	bne.n	801cb4e <keypad_getNumber+0x56>
			lcd16x2_i2c_printf("B");
 801cb46:	4854      	ldr	r0, [pc, #336]	; (801cc98 <keypad_getNumber+0x1a0>)
 801cb48:	f000 f9c6 	bl	801ced8 <lcd16x2_i2c_printf>
 801cb4c:	e03b      	b.n	801cbc6 <keypad_getNumber+0xce>
		}else if(key==30){		// C, easter egg
 801cb4e:	7afb      	ldrb	r3, [r7, #11]
 801cb50:	2b1e      	cmp	r3, #30
 801cb52:	d104      	bne.n	801cb5e <keypad_getNumber+0x66>
			lcd16x2_i2c_printf("C");
 801cb54:	4851      	ldr	r0, [pc, #324]	; (801cc9c <keypad_getNumber+0x1a4>)
 801cb56:	f000 f9bf 	bl	801ced8 <lcd16x2_i2c_printf>
			return 0;
 801cb5a:	2300      	movs	r3, #0
 801cb5c:	e089      	b.n	801cc72 <keypad_getNumber+0x17a>
		}else if(key==40){		// *, nothing
 801cb5e:	7afb      	ldrb	r3, [r7, #11]
 801cb60:	2b28      	cmp	r3, #40	; 0x28
 801cb62:	d106      	bne.n	801cb72 <keypad_getNumber+0x7a>
			lcd16x2_i2c_printf("*");
 801cb64:	484e      	ldr	r0, [pc, #312]	; (801cca0 <keypad_getNumber+0x1a8>)
 801cb66:	f000 f9b7 	bl	801ced8 <lcd16x2_i2c_printf>
			PRINTF("* ");
 801cb6a:	484e      	ldr	r0, [pc, #312]	; (801cca4 <keypad_getNumber+0x1ac>)
 801cb6c:	f7ff fce2 	bl	801c534 <PRINTF>
 801cb70:	e029      	b.n	801cbc6 <keypad_getNumber+0xce>
		}else if(key==50){		// #, nothing
 801cb72:	7afb      	ldrb	r3, [r7, #11]
 801cb74:	2b32      	cmp	r3, #50	; 0x32
 801cb76:	d106      	bne.n	801cb86 <keypad_getNumber+0x8e>
			lcd16x2_i2c_printf("#");
 801cb78:	484b      	ldr	r0, [pc, #300]	; (801cca8 <keypad_getNumber+0x1b0>)
 801cb7a:	f000 f9ad 	bl	801ced8 <lcd16x2_i2c_printf>
			PRINTF("# ");
 801cb7e:	484b      	ldr	r0, [pc, #300]	; (801ccac <keypad_getNumber+0x1b4>)
 801cb80:	f7ff fcd8 	bl	801c534 <PRINTF>
 801cb84:	e01f      	b.n	801cbc6 <keypad_getNumber+0xce>
		}else if(key==60){		// D, disco mode
 801cb86:	7afb      	ldrb	r3, [r7, #11]
 801cb88:	2b3c      	cmp	r3, #60	; 0x3c
 801cb8a:	d105      	bne.n	801cb98 <keypad_getNumber+0xa0>
			lcd16x2_i2c_printf("D");
 801cb8c:	4848      	ldr	r0, [pc, #288]	; (801ccb0 <keypad_getNumber+0x1b8>)
 801cb8e:	f000 f9a3 	bl	801ced8 <lcd16x2_i2c_printf>
			return 10000;
 801cb92:	f242 7310 	movw	r3, #10000	; 0x2710
 801cb96:	e06c      	b.n	801cc72 <keypad_getNumber+0x17a>
		}else if(key>=0 && key<=9){	// number keys
 801cb98:	7afb      	ldrb	r3, [r7, #11]
 801cb9a:	2b09      	cmp	r3, #9
 801cb9c:	d813      	bhi.n	801cbc6 <keypad_getNumber+0xce>
			inputDigit[i] = key;
 801cb9e:	7cfb      	ldrb	r3, [r7, #19]
 801cba0:	f107 0218 	add.w	r2, r7, #24
 801cba4:	4413      	add	r3, r2
 801cba6:	7afa      	ldrb	r2, [r7, #11]
 801cba8:	f803 2c18 	strb.w	r2, [r3, #-24]
			lcd16x2_i2c_printf("%d", inputDigit[i]);
 801cbac:	7cfb      	ldrb	r3, [r7, #19]
 801cbae:	f107 0218 	add.w	r2, r7, #24
 801cbb2:	4413      	add	r3, r2
 801cbb4:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 801cbb8:	4619      	mov	r1, r3
 801cbba:	483e      	ldr	r0, [pc, #248]	; (801ccb4 <keypad_getNumber+0x1bc>)
 801cbbc:	f000 f98c 	bl	801ced8 <lcd16x2_i2c_printf>
			i+=1;
 801cbc0:	7cfb      	ldrb	r3, [r7, #19]
 801cbc2:	3301      	adds	r3, #1
 801cbc4:	74fb      	strb	r3, [r7, #19]
		key=99;
 801cbc6:	2363      	movs	r3, #99	; 0x63
 801cbc8:	72fb      	strb	r3, [r7, #11]
		key = read_key();		// returns the digit input
 801cbca:	e7a4      	b.n	801cb16 <keypad_getNumber+0x1e>
		number += pow(10, j-1)*inputDigit[i-j];
 801cbcc:	68fb      	ldr	r3, [r7, #12]
 801cbce:	3b01      	subs	r3, #1
 801cbd0:	4618      	mov	r0, r3
 801cbd2:	f7e3 fcaf 	bl	8000534 <__aeabi_i2d>
 801cbd6:	4602      	mov	r2, r0
 801cbd8:	460b      	mov	r3, r1
 801cbda:	ec43 2b11 	vmov	d1, r2, r3
 801cbde:	ed9f 0b28 	vldr	d0, [pc, #160]	; 801cc80 <keypad_getNumber+0x188>
 801cbe2:	f005 feff 	bl	80229e4 <pow>
 801cbe6:	ec55 4b10 	vmov	r4, r5, d0
 801cbea:	7cfa      	ldrb	r2, [r7, #19]
 801cbec:	68fb      	ldr	r3, [r7, #12]
 801cbee:	1ad3      	subs	r3, r2, r3
 801cbf0:	f107 0218 	add.w	r2, r7, #24
 801cbf4:	4413      	add	r3, r2
 801cbf6:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 801cbfa:	4618      	mov	r0, r3
 801cbfc:	f7e3 fc9a 	bl	8000534 <__aeabi_i2d>
 801cc00:	4602      	mov	r2, r0
 801cc02:	460b      	mov	r3, r1
 801cc04:	4620      	mov	r0, r4
 801cc06:	4629      	mov	r1, r5
 801cc08:	f7e3 fcfe 	bl	8000608 <__aeabi_dmul>
 801cc0c:	4602      	mov	r2, r0
 801cc0e:	460b      	mov	r3, r1
 801cc10:	4614      	mov	r4, r2
 801cc12:	461d      	mov	r5, r3
 801cc14:	6978      	ldr	r0, [r7, #20]
 801cc16:	f7e3 fc7d 	bl	8000514 <__aeabi_ui2d>
 801cc1a:	4602      	mov	r2, r0
 801cc1c:	460b      	mov	r3, r1
 801cc1e:	4620      	mov	r0, r4
 801cc20:	4629      	mov	r1, r5
 801cc22:	f7e3 fb3b 	bl	800029c <__adddf3>
 801cc26:	4602      	mov	r2, r0
 801cc28:	460b      	mov	r3, r1
 801cc2a:	4610      	mov	r0, r2
 801cc2c:	4619      	mov	r1, r3
 801cc2e:	f7e3 ff9b 	bl	8000b68 <__aeabi_d2uiz>
 801cc32:	4603      	mov	r3, r0
 801cc34:	617b      	str	r3, [r7, #20]
	for(int j=i; j>0; j--){
 801cc36:	68fb      	ldr	r3, [r7, #12]
 801cc38:	3b01      	subs	r3, #1
 801cc3a:	60fb      	str	r3, [r7, #12]
 801cc3c:	68fb      	ldr	r3, [r7, #12]
 801cc3e:	2b00      	cmp	r3, #0
 801cc40:	dcc4      	bgt.n	801cbcc <keypad_getNumber+0xd4>
	}

#ifdef debug_output
	PRINTF32("\n\r     Final number obtained is: %d", number);
#endif
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 801cc42:	2200      	movs	r2, #0
 801cc44:	2180      	movs	r1, #128	; 0x80
 801cc46:	481c      	ldr	r0, [pc, #112]	; (801ccb8 <keypad_getNumber+0x1c0>)
 801cc48:	f001 fe52 	bl	801e8f0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 801cc4c:	2200      	movs	r2, #0
 801cc4e:	f44f 7100 	mov.w	r1, #512	; 0x200
 801cc52:	481a      	ldr	r0, [pc, #104]	; (801ccbc <keypad_getNumber+0x1c4>)
 801cc54:	f001 fe4c 	bl	801e8f0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 801cc58:	2200      	movs	r2, #0
 801cc5a:	f44f 7180 	mov.w	r1, #256	; 0x100
 801cc5e:	4817      	ldr	r0, [pc, #92]	; (801ccbc <keypad_getNumber+0x1c4>)
 801cc60:	f001 fe46 	bl	801e8f0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);
 801cc64:	2200      	movs	r2, #0
 801cc66:	f44f 6180 	mov.w	r1, #1024	; 0x400
 801cc6a:	4815      	ldr	r0, [pc, #84]	; (801ccc0 <keypad_getNumber+0x1c8>)
 801cc6c:	f001 fe40 	bl	801e8f0 <HAL_GPIO_WritePin>
	return number;
 801cc70:	697b      	ldr	r3, [r7, #20]
}
 801cc72:	4618      	mov	r0, r3
 801cc74:	3718      	adds	r7, #24
 801cc76:	46bd      	mov	sp, r7
 801cc78:	bdb0      	pop	{r4, r5, r7, pc}
 801cc7a:	bf00      	nop
 801cc7c:	f3af 8000 	nop.w
 801cc80:	00000000 	.word	0x00000000
 801cc84:	40240000 	.word	0x40240000
 801cc88:	0802d180 	.word	0x0802d180
 801cc8c:	0802d190 	.word	0x0802d190
 801cc90:	0802d198 	.word	0x0802d198
 801cc94:	0802d1a4 	.word	0x0802d1a4
 801cc98:	0802d1a8 	.word	0x0802d1a8
 801cc9c:	0802d1ac 	.word	0x0802d1ac
 801cca0:	0802d1b0 	.word	0x0802d1b0
 801cca4:	0802d1b4 	.word	0x0802d1b4
 801cca8:	0802d1b8 	.word	0x0802d1b8
 801ccac:	0802d1bc 	.word	0x0802d1bc
 801ccb0:	0802d1c0 	.word	0x0802d1c0
 801ccb4:	0802d1c4 	.word	0x0802d1c4
 801ccb8:	40020800 	.word	0x40020800
 801ccbc:	40020000 	.word	0x40020000
 801ccc0:	40020400 	.word	0x40020400

0801ccc4 <lcd16x2_i2c_sendCommand>:
#define LCD_I2C_SLAVE_ADDRESS_0  0x4E
#define LCD_I2C_SLAVE_ADDRESS_1  0x7E

/* Private functions */
static void lcd16x2_i2c_sendCommand(uint8_t command)
{
 801ccc4:	b580      	push	{r7, lr}
 801ccc6:	b086      	sub	sp, #24
 801ccc8:	af02      	add	r7, sp, #8
 801ccca:	4603      	mov	r3, r0
 801cccc:	71fb      	strb	r3, [r7, #7]
  const uint8_t command_0_3 = (0xF0 & (command<<4));
 801ccce:	79fb      	ldrb	r3, [r7, #7]
 801ccd0:	011b      	lsls	r3, r3, #4
 801ccd2:	73fb      	strb	r3, [r7, #15]
  const uint8_t command_4_7 = (0xF0 & command);
 801ccd4:	79fb      	ldrb	r3, [r7, #7]
 801ccd6:	f023 030f 	bic.w	r3, r3, #15
 801ccda:	73bb      	strb	r3, [r7, #14]
  uint8_t i2cData[4] =
 801ccdc:	7bbb      	ldrb	r3, [r7, #14]
 801ccde:	f043 030c 	orr.w	r3, r3, #12
 801cce2:	b2db      	uxtb	r3, r3
 801cce4:	723b      	strb	r3, [r7, #8]
 801cce6:	7bbb      	ldrb	r3, [r7, #14]
 801cce8:	f043 0308 	orr.w	r3, r3, #8
 801ccec:	b2db      	uxtb	r3, r3
 801ccee:	727b      	strb	r3, [r7, #9]
 801ccf0:	7bfb      	ldrb	r3, [r7, #15]
 801ccf2:	f043 030c 	orr.w	r3, r3, #12
 801ccf6:	b2db      	uxtb	r3, r3
 801ccf8:	72bb      	strb	r3, [r7, #10]
 801ccfa:	7bfb      	ldrb	r3, [r7, #15]
 801ccfc:	f043 0308 	orr.w	r3, r3, #8
 801cd00:	b2db      	uxtb	r3, r3
 801cd02:	72fb      	strb	r3, [r7, #11]
      command_4_7 | LCD_EN | LCD_BK_LIGHT,
      command_4_7 | LCD_BK_LIGHT,
      command_0_3 | LCD_EN | LCD_BK_LIGHT,
      command_0_3 | LCD_BK_LIGHT,
  };
  HAL_I2C_Master_Transmit(lcd16x2_i2cHandle, LCD_I2C_SLAVE_ADDRESS, i2cData, 4, 200);
 801cd04:	4b07      	ldr	r3, [pc, #28]	; (801cd24 <lcd16x2_i2c_sendCommand+0x60>)
 801cd06:	6818      	ldr	r0, [r3, #0]
 801cd08:	4b07      	ldr	r3, [pc, #28]	; (801cd28 <lcd16x2_i2c_sendCommand+0x64>)
 801cd0a:	781b      	ldrb	r3, [r3, #0]
 801cd0c:	b299      	uxth	r1, r3
 801cd0e:	f107 0208 	add.w	r2, r7, #8
 801cd12:	23c8      	movs	r3, #200	; 0xc8
 801cd14:	9300      	str	r3, [sp, #0]
 801cd16:	2304      	movs	r3, #4
 801cd18:	f001 ff60 	bl	801ebdc <HAL_I2C_Master_Transmit>
}
 801cd1c:	bf00      	nop
 801cd1e:	3710      	adds	r7, #16
 801cd20:	46bd      	mov	sp, r7
 801cd22:	bd80      	pop	{r7, pc}
 801cd24:	20000098 	.word	0x20000098
 801cd28:	2000009c 	.word	0x2000009c

0801cd2c <lcd16x2_i2c_sendData>:

static void lcd16x2_i2c_sendData(uint8_t data)
{
 801cd2c:	b580      	push	{r7, lr}
 801cd2e:	b086      	sub	sp, #24
 801cd30:	af02      	add	r7, sp, #8
 801cd32:	4603      	mov	r3, r0
 801cd34:	71fb      	strb	r3, [r7, #7]
  const uint8_t data_0_3 = (0xF0 & (data<<4));
 801cd36:	79fb      	ldrb	r3, [r7, #7]
 801cd38:	011b      	lsls	r3, r3, #4
 801cd3a:	73fb      	strb	r3, [r7, #15]
  const uint8_t data_4_7 = (0xF0 & data);
 801cd3c:	79fb      	ldrb	r3, [r7, #7]
 801cd3e:	f023 030f 	bic.w	r3, r3, #15
 801cd42:	73bb      	strb	r3, [r7, #14]
  uint8_t i2cData[4] =
 801cd44:	7bbb      	ldrb	r3, [r7, #14]
 801cd46:	f043 030d 	orr.w	r3, r3, #13
 801cd4a:	b2db      	uxtb	r3, r3
 801cd4c:	723b      	strb	r3, [r7, #8]
 801cd4e:	7bbb      	ldrb	r3, [r7, #14]
 801cd50:	f043 0309 	orr.w	r3, r3, #9
 801cd54:	b2db      	uxtb	r3, r3
 801cd56:	727b      	strb	r3, [r7, #9]
 801cd58:	7bfb      	ldrb	r3, [r7, #15]
 801cd5a:	f043 030d 	orr.w	r3, r3, #13
 801cd5e:	b2db      	uxtb	r3, r3
 801cd60:	72bb      	strb	r3, [r7, #10]
 801cd62:	7bfb      	ldrb	r3, [r7, #15]
 801cd64:	f043 0309 	orr.w	r3, r3, #9
 801cd68:	b2db      	uxtb	r3, r3
 801cd6a:	72fb      	strb	r3, [r7, #11]
      data_4_7 | LCD_EN | LCD_BK_LIGHT | LCD_RS,
      data_4_7 | LCD_BK_LIGHT | LCD_RS,
      data_0_3 | LCD_EN | LCD_BK_LIGHT | LCD_RS,
      data_0_3 | LCD_BK_LIGHT | LCD_RS,
  };
  HAL_I2C_Master_Transmit(lcd16x2_i2cHandle, LCD_I2C_SLAVE_ADDRESS, i2cData, 4, 200);
 801cd6c:	4b07      	ldr	r3, [pc, #28]	; (801cd8c <lcd16x2_i2c_sendData+0x60>)
 801cd6e:	6818      	ldr	r0, [r3, #0]
 801cd70:	4b07      	ldr	r3, [pc, #28]	; (801cd90 <lcd16x2_i2c_sendData+0x64>)
 801cd72:	781b      	ldrb	r3, [r3, #0]
 801cd74:	b299      	uxth	r1, r3
 801cd76:	f107 0208 	add.w	r2, r7, #8
 801cd7a:	23c8      	movs	r3, #200	; 0xc8
 801cd7c:	9300      	str	r3, [sp, #0]
 801cd7e:	2304      	movs	r3, #4
 801cd80:	f001 ff2c 	bl	801ebdc <HAL_I2C_Master_Transmit>
}
 801cd84:	bf00      	nop
 801cd86:	3710      	adds	r7, #16
 801cd88:	46bd      	mov	sp, r7
 801cd8a:	bd80      	pop	{r7, pc}
 801cd8c:	20000098 	.word	0x20000098
 801cd90:	2000009c 	.word	0x2000009c

0801cd94 <lcd16x2_i2c_init>:
/**
 * @brief Initialise LCD16x2
 * @param[in] *pI2cHandle - pointer to HAL I2C handle
 */
bool lcd16x2_i2c_init(I2C_HandleTypeDef *pI2cHandle)
{
 801cd94:	b580      	push	{r7, lr}
 801cd96:	b082      	sub	sp, #8
 801cd98:	af00      	add	r7, sp, #0
 801cd9a:	6078      	str	r0, [r7, #4]
  HAL_Delay(50);
 801cd9c:	2032      	movs	r0, #50	; 0x32
 801cd9e:	f000 fed3 	bl	801db48 <HAL_Delay>
  lcd16x2_i2cHandle = pI2cHandle;
 801cda2:	4a30      	ldr	r2, [pc, #192]	; (801ce64 <lcd16x2_i2c_init+0xd0>)
 801cda4:	687b      	ldr	r3, [r7, #4]
 801cda6:	6013      	str	r3, [r2, #0]
  if(HAL_I2C_IsDeviceReady(lcd16x2_i2cHandle, LCD_I2C_SLAVE_ADDRESS_0, 5, 500) != HAL_OK)
 801cda8:	4b2e      	ldr	r3, [pc, #184]	; (801ce64 <lcd16x2_i2c_init+0xd0>)
 801cdaa:	6818      	ldr	r0, [r3, #0]
 801cdac:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 801cdb0:	2205      	movs	r2, #5
 801cdb2:	214e      	movs	r1, #78	; 0x4e
 801cdb4:	f002 f810 	bl	801edd8 <HAL_I2C_IsDeviceReady>
 801cdb8:	4603      	mov	r3, r0
 801cdba:	2b00      	cmp	r3, #0
 801cdbc:	d010      	beq.n	801cde0 <lcd16x2_i2c_init+0x4c>
  {
    if(HAL_I2C_IsDeviceReady(lcd16x2_i2cHandle, LCD_I2C_SLAVE_ADDRESS_1, 5, 500) != HAL_OK)
 801cdbe:	4b29      	ldr	r3, [pc, #164]	; (801ce64 <lcd16x2_i2c_init+0xd0>)
 801cdc0:	6818      	ldr	r0, [r3, #0]
 801cdc2:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 801cdc6:	2205      	movs	r2, #5
 801cdc8:	217e      	movs	r1, #126	; 0x7e
 801cdca:	f002 f805 	bl	801edd8 <HAL_I2C_IsDeviceReady>
 801cdce:	4603      	mov	r3, r0
 801cdd0:	2b00      	cmp	r3, #0
 801cdd2:	d001      	beq.n	801cdd8 <lcd16x2_i2c_init+0x44>
    {
      return false;
 801cdd4:	2300      	movs	r3, #0
 801cdd6:	e040      	b.n	801ce5a <lcd16x2_i2c_init+0xc6>
    }
    else
    {
      LCD_I2C_SLAVE_ADDRESS = LCD_I2C_SLAVE_ADDRESS_1;
 801cdd8:	4b23      	ldr	r3, [pc, #140]	; (801ce68 <lcd16x2_i2c_init+0xd4>)
 801cdda:	227e      	movs	r2, #126	; 0x7e
 801cddc:	701a      	strb	r2, [r3, #0]
 801cdde:	e002      	b.n	801cde6 <lcd16x2_i2c_init+0x52>
    }
  }
  else
  {
    LCD_I2C_SLAVE_ADDRESS = LCD_I2C_SLAVE_ADDRESS_0;
 801cde0:	4b21      	ldr	r3, [pc, #132]	; (801ce68 <lcd16x2_i2c_init+0xd4>)
 801cde2:	224e      	movs	r2, #78	; 0x4e
 801cde4:	701a      	strb	r2, [r3, #0]
  }
  //Initialise LCD for 4-bit operation
  //1. Wait at least 15ms
  HAL_Delay(45);
 801cde6:	202d      	movs	r0, #45	; 0x2d
 801cde8:	f000 feae 	bl	801db48 <HAL_Delay>
  //2. Attentions sequence
  lcd16x2_i2c_sendCommand(0x30);
 801cdec:	2030      	movs	r0, #48	; 0x30
 801cdee:	f7ff ff69 	bl	801ccc4 <lcd16x2_i2c_sendCommand>
  HAL_Delay(5);
 801cdf2:	2005      	movs	r0, #5
 801cdf4:	f000 fea8 	bl	801db48 <HAL_Delay>
  lcd16x2_i2c_sendCommand(0x30);
 801cdf8:	2030      	movs	r0, #48	; 0x30
 801cdfa:	f7ff ff63 	bl	801ccc4 <lcd16x2_i2c_sendCommand>
  HAL_Delay(1);
 801cdfe:	2001      	movs	r0, #1
 801ce00:	f000 fea2 	bl	801db48 <HAL_Delay>
  lcd16x2_i2c_sendCommand(0x30);
 801ce04:	2030      	movs	r0, #48	; 0x30
 801ce06:	f7ff ff5d 	bl	801ccc4 <lcd16x2_i2c_sendCommand>
  HAL_Delay(8);
 801ce0a:	2008      	movs	r0, #8
 801ce0c:	f000 fe9c 	bl	801db48 <HAL_Delay>
  lcd16x2_i2c_sendCommand(0x20);
 801ce10:	2020      	movs	r0, #32
 801ce12:	f7ff ff57 	bl	801ccc4 <lcd16x2_i2c_sendCommand>
  HAL_Delay(8);
 801ce16:	2008      	movs	r0, #8
 801ce18:	f000 fe96 	bl	801db48 <HAL_Delay>

  lcd16x2_i2c_sendCommand(LCD_FUNCTIONSET | LCD_FUNCTION_N);
 801ce1c:	2028      	movs	r0, #40	; 0x28
 801ce1e:	f7ff ff51 	bl	801ccc4 <lcd16x2_i2c_sendCommand>
  HAL_Delay(1);
 801ce22:	2001      	movs	r0, #1
 801ce24:	f000 fe90 	bl	801db48 <HAL_Delay>
  lcd16x2_i2c_sendCommand(LCD_DISPLAYCONTROL);
 801ce28:	2008      	movs	r0, #8
 801ce2a:	f7ff ff4b 	bl	801ccc4 <lcd16x2_i2c_sendCommand>
  HAL_Delay(1);
 801ce2e:	2001      	movs	r0, #1
 801ce30:	f000 fe8a 	bl	801db48 <HAL_Delay>
  lcd16x2_i2c_sendCommand(LCD_CLEARDISPLAY);
 801ce34:	2001      	movs	r0, #1
 801ce36:	f7ff ff45 	bl	801ccc4 <lcd16x2_i2c_sendCommand>
  HAL_Delay(3);
 801ce3a:	2003      	movs	r0, #3
 801ce3c:	f000 fe84 	bl	801db48 <HAL_Delay>
  lcd16x2_i2c_sendCommand(0x04 | LCD_ENTRY_ID);
 801ce40:	2006      	movs	r0, #6
 801ce42:	f7ff ff3f 	bl	801ccc4 <lcd16x2_i2c_sendCommand>
  HAL_Delay(1);
 801ce46:	2001      	movs	r0, #1
 801ce48:	f000 fe7e 	bl	801db48 <HAL_Delay>
  lcd16x2_i2c_sendCommand(LCD_DISPLAYCONTROL | LCD_DISPLAY_D);
 801ce4c:	200c      	movs	r0, #12
 801ce4e:	f7ff ff39 	bl	801ccc4 <lcd16x2_i2c_sendCommand>
  HAL_Delay(3);
 801ce52:	2003      	movs	r0, #3
 801ce54:	f000 fe78 	bl	801db48 <HAL_Delay>

  return true;
 801ce58:	2301      	movs	r3, #1
}
 801ce5a:	4618      	mov	r0, r3
 801ce5c:	3708      	adds	r7, #8
 801ce5e:	46bd      	mov	sp, r7
 801ce60:	bd80      	pop	{r7, pc}
 801ce62:	bf00      	nop
 801ce64:	20000098 	.word	0x20000098
 801ce68:	2000009c 	.word	0x2000009c

0801ce6c <lcd16x2_i2c_setCursor>:
 * @brief Set cursor position
 * @param[in] row - 0 or 1 for line1 or line2
 * @param[in] col - 0 - 15 (16 columns LCD)
 */
void lcd16x2_i2c_setCursor(uint8_t row, uint8_t col)
{
 801ce6c:	b580      	push	{r7, lr}
 801ce6e:	b084      	sub	sp, #16
 801ce70:	af00      	add	r7, sp, #0
 801ce72:	4603      	mov	r3, r0
 801ce74:	460a      	mov	r2, r1
 801ce76:	71fb      	strb	r3, [r7, #7]
 801ce78:	4613      	mov	r3, r2
 801ce7a:	71bb      	strb	r3, [r7, #6]
  uint8_t maskData;
  maskData = (col)&0x0F;
 801ce7c:	79bb      	ldrb	r3, [r7, #6]
 801ce7e:	f003 030f 	and.w	r3, r3, #15
 801ce82:	73fb      	strb	r3, [r7, #15]
  if(row==0)
 801ce84:	79fb      	ldrb	r3, [r7, #7]
 801ce86:	2b00      	cmp	r3, #0
 801ce88:	d108      	bne.n	801ce9c <lcd16x2_i2c_setCursor+0x30>
  {
    maskData |= (0x80);
 801ce8a:	7bfb      	ldrb	r3, [r7, #15]
 801ce8c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 801ce90:	73fb      	strb	r3, [r7, #15]
    lcd16x2_i2c_sendCommand(maskData);
 801ce92:	7bfb      	ldrb	r3, [r7, #15]
 801ce94:	4618      	mov	r0, r3
 801ce96:	f7ff ff15 	bl	801ccc4 <lcd16x2_i2c_sendCommand>
  else
  {
    maskData |= (0xc0);
    lcd16x2_i2c_sendCommand(maskData);
  }
}
 801ce9a:	e007      	b.n	801ceac <lcd16x2_i2c_setCursor+0x40>
    maskData |= (0xc0);
 801ce9c:	7bfb      	ldrb	r3, [r7, #15]
 801ce9e:	f063 033f 	orn	r3, r3, #63	; 0x3f
 801cea2:	73fb      	strb	r3, [r7, #15]
    lcd16x2_i2c_sendCommand(maskData);
 801cea4:	7bfb      	ldrb	r3, [r7, #15]
 801cea6:	4618      	mov	r0, r3
 801cea8:	f7ff ff0c 	bl	801ccc4 <lcd16x2_i2c_sendCommand>
}
 801ceac:	bf00      	nop
 801ceae:	3710      	adds	r7, #16
 801ceb0:	46bd      	mov	sp, r7
 801ceb2:	bd80      	pop	{r7, pc}

0801ceb4 <lcd16x2_i2c_2ndLine>:
}
/**
 * @brief Move to beginning of 2nd line
 */
void lcd16x2_i2c_2ndLine(void)
{
 801ceb4:	b580      	push	{r7, lr}
 801ceb6:	af00      	add	r7, sp, #0
  lcd16x2_i2c_setCursor(1,0);
 801ceb8:	2100      	movs	r1, #0
 801ceba:	2001      	movs	r0, #1
 801cebc:	f7ff ffd6 	bl	801ce6c <lcd16x2_i2c_setCursor>
}
 801cec0:	bf00      	nop
 801cec2:	bd80      	pop	{r7, pc}

0801cec4 <lcd16x2_i2c_clear>:

/**
 * @brief Display clear
 */
void lcd16x2_i2c_clear(void)
{
 801cec4:	b580      	push	{r7, lr}
 801cec6:	af00      	add	r7, sp, #0
  lcd16x2_i2c_sendCommand(LCD_CLEARDISPLAY);
 801cec8:	2001      	movs	r0, #1
 801ceca:	f7ff fefb 	bl	801ccc4 <lcd16x2_i2c_sendCommand>
  HAL_Delay(3);
 801cece:	2003      	movs	r0, #3
 801ced0:	f000 fe3a 	bl	801db48 <HAL_Delay>
}
 801ced4:	bf00      	nop
 801ced6:	bd80      	pop	{r7, pc}

0801ced8 <lcd16x2_i2c_printf>:

/**
 * @brief Print to display
 */
void lcd16x2_i2c_printf(const char* str, ...)
{
 801ced8:	b40f      	push	{r0, r1, r2, r3}
 801ceda:	b590      	push	{r4, r7, lr}
 801cedc:	b089      	sub	sp, #36	; 0x24
 801cede:	af00      	add	r7, sp, #0
  char stringArray[20];
  va_list args;
  va_start(args, str);
 801cee0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 801cee4:	607b      	str	r3, [r7, #4]
  vsprintf(stringArray, str, args);
 801cee6:	f107 0308 	add.w	r3, r7, #8
 801ceea:	687a      	ldr	r2, [r7, #4]
 801ceec:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801ceee:	4618      	mov	r0, r3
 801cef0:	f005 f96e 	bl	80221d0 <vsiprintf>
  va_end(args);
  for(uint8_t i=0;  i<strlen(stringArray) && i<16; i++)
 801cef4:	2300      	movs	r3, #0
 801cef6:	77fb      	strb	r3, [r7, #31]
 801cef8:	e00b      	b.n	801cf12 <lcd16x2_i2c_printf+0x3a>
  {
    lcd16x2_i2c_sendData((uint8_t)stringArray[i]);
 801cefa:	7ffb      	ldrb	r3, [r7, #31]
 801cefc:	f107 0220 	add.w	r2, r7, #32
 801cf00:	4413      	add	r3, r2
 801cf02:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 801cf06:	4618      	mov	r0, r3
 801cf08:	f7ff ff10 	bl	801cd2c <lcd16x2_i2c_sendData>
  for(uint8_t i=0;  i<strlen(stringArray) && i<16; i++)
 801cf0c:	7ffb      	ldrb	r3, [r7, #31]
 801cf0e:	3301      	adds	r3, #1
 801cf10:	77fb      	strb	r3, [r7, #31]
 801cf12:	7ffc      	ldrb	r4, [r7, #31]
 801cf14:	f107 0308 	add.w	r3, r7, #8
 801cf18:	4618      	mov	r0, r3
 801cf1a:	f7e3 f961 	bl	80001e0 <strlen>
 801cf1e:	4603      	mov	r3, r0
 801cf20:	429c      	cmp	r4, r3
 801cf22:	d202      	bcs.n	801cf2a <lcd16x2_i2c_printf+0x52>
 801cf24:	7ffb      	ldrb	r3, [r7, #31]
 801cf26:	2b0f      	cmp	r3, #15
 801cf28:	d9e7      	bls.n	801cefa <lcd16x2_i2c_printf+0x22>
  }
}
 801cf2a:	bf00      	nop
 801cf2c:	3724      	adds	r7, #36	; 0x24
 801cf2e:	46bd      	mov	sp, r7
 801cf30:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 801cf34:	b004      	add	sp, #16
 801cf36:	4770      	bx	lr

0801cf38 <HAL_TIM_PWM_PulseFinishedCallback>:




// When DMA finishes a send triggers a flag and stops the data transfer
void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim){
 801cf38:	b580      	push	{r7, lr}
 801cf3a:	b082      	sub	sp, #8
 801cf3c:	af00      	add	r7, sp, #0
 801cf3e:	6078      	str	r0, [r7, #4]

	if(htim == &htim2){
 801cf40:	687b      	ldr	r3, [r7, #4]
 801cf42:	4a0b      	ldr	r2, [pc, #44]	; (801cf70 <HAL_TIM_PWM_PulseFinishedCallback+0x38>)
 801cf44:	4293      	cmp	r3, r2
 801cf46:	d103      	bne.n	801cf50 <HAL_TIM_PWM_PulseFinishedCallback+0x18>
		HAL_TIM_PWM_Stop_DMA(&htim2, TIM_CHANNEL_1);
 801cf48:	2100      	movs	r1, #0
 801cf4a:	4809      	ldr	r0, [pc, #36]	; (801cf70 <HAL_TIM_PWM_PulseFinishedCallback+0x38>)
 801cf4c:	f003 f948 	bl	80201e0 <HAL_TIM_PWM_Stop_DMA>
	}

	if(htim == &htim3){
 801cf50:	687b      	ldr	r3, [r7, #4]
 801cf52:	4a08      	ldr	r2, [pc, #32]	; (801cf74 <HAL_TIM_PWM_PulseFinishedCallback+0x3c>)
 801cf54:	4293      	cmp	r3, r2
 801cf56:	d103      	bne.n	801cf60 <HAL_TIM_PWM_PulseFinishedCallback+0x28>
		HAL_TIM_PWM_Stop_DMA(&htim3, TIM_CHANNEL_1);
 801cf58:	2100      	movs	r1, #0
 801cf5a:	4806      	ldr	r0, [pc, #24]	; (801cf74 <HAL_TIM_PWM_PulseFinishedCallback+0x3c>)
 801cf5c:	f003 f940 	bl	80201e0 <HAL_TIM_PWM_Stop_DMA>
	}

	datasentflag = 1;
 801cf60:	4b05      	ldr	r3, [pc, #20]	; (801cf78 <HAL_TIM_PWM_PulseFinishedCallback+0x40>)
 801cf62:	2201      	movs	r2, #1
 801cf64:	601a      	str	r2, [r3, #0]
}
 801cf66:	bf00      	nop
 801cf68:	3708      	adds	r7, #8
 801cf6a:	46bd      	mov	sp, r7
 801cf6c:	bd80      	pop	{r7, pc}
 801cf6e:	bf00      	nop
 801cf70:	20005580 	.word	0x20005580
 801cf74:	200054d8 	.word	0x200054d8
 801cf78:	20000094 	.word	0x20000094

0801cf7c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 801cf7c:	b580      	push	{r7, lr}
 801cf7e:	f5ad 7d16 	sub.w	sp, sp, #600	; 0x258
 801cf82:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 801cf84:	f000 fd6e 	bl	801da64 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 801cf88:	f000 f8d8 	bl	801d13c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 801cf8c:	f7ff fb14 	bl	801c5b8 <MX_GPIO_Init>
  MX_DMA_Init();
 801cf90:	f7ff faea 	bl	801c568 <MX_DMA_Init>
  MX_USART2_UART_Init();
 801cf94:	f000 fc44 	bl	801d820 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 801cf98:	f000 fa4e 	bl	801d438 <MX_TIM2_Init>
  MX_I2C1_Init();
 801cf9c:	f7ff fbc8 	bl	801c730 <MX_I2C1_Init>
  MX_TIM3_Init();
 801cfa0:	f000 fabe 	bl	801d520 <MX_TIM3_Init>
  MX_USART6_UART_Init();
 801cfa4:	f000 fc66 	bl	801d874 <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */

  // *********************************************
  // 			LCD initialization
  // *********************************************
  if(lcd16x2_i2c_init(&hi2c1)){
 801cfa8:	4857      	ldr	r0, [pc, #348]	; (801d108 <main+0x18c>)
 801cfaa:	f7ff fef3 	bl	801cd94 <lcd16x2_i2c_init>
 801cfae:	4603      	mov	r3, r0
 801cfb0:	2b00      	cmp	r3, #0
 801cfb2:	d004      	beq.n	801cfbe <main+0x42>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 801cfb4:	2201      	movs	r2, #1
 801cfb6:	2120      	movs	r1, #32
 801cfb8:	4854      	ldr	r0, [pc, #336]	; (801d10c <main+0x190>)
 801cfba:	f001 fc99 	bl	801e8f0 <HAL_GPIO_WritePin>
  }
  lcd16x2_i2c_clear();
 801cfbe:	f7ff ff81 	bl	801cec4 <lcd16x2_i2c_clear>
  lcd16x2_i2c_2ndLine();
 801cfc2:	f7ff ff77 	bl	801ceb4 <lcd16x2_i2c_2ndLine>
  lcd16x2_i2c_clear();
 801cfc6:	f7ff ff7d 	bl	801cec4 <lcd16x2_i2c_clear>
  lcd16x2_i2c_printf("      RESET       ");
 801cfca:	4851      	ldr	r0, [pc, #324]	; (801d110 <main+0x194>)
 801cfcc:	f7ff ff84 	bl	801ced8 <lcd16x2_i2c_printf>

  HAL_Delay(1000);
 801cfd0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 801cfd4:	f000 fdb8 	bl	801db48 <HAL_Delay>

  // Enable HC 05 bluetooth module
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);
 801cfd8:	2201      	movs	r2, #1
 801cfda:	f44f 7100 	mov.w	r1, #512	; 0x200
 801cfde:	484d      	ldr	r0, [pc, #308]	; (801d114 <main+0x198>)
 801cfe0:	f001 fc86 	bl	801e8f0 <HAL_GPIO_WritePin>

  // enable interrupt for the UART
  HAL_UART_Receive_IT(&huart6, buffer, 600);
 801cfe4:	f44f 7216 	mov.w	r2, #600	; 0x258
 801cfe8:	494b      	ldr	r1, [pc, #300]	; (801d118 <main+0x19c>)
 801cfea:	484c      	ldr	r0, [pc, #304]	; (801d11c <main+0x1a0>)
 801cfec:	f004 f989 	bl	8021302 <HAL_UART_Receive_IT>


  // Welcome message
  lcd16x2_i2c_clear();
 801cff0:	f7ff ff68 	bl	801cec4 <lcd16x2_i2c_clear>
  lcd16x2_i2c_2ndLine();
 801cff4:	f7ff ff5e 	bl	801ceb4 <lcd16x2_i2c_2ndLine>
  lcd16x2_i2c_clear();
 801cff8:	f7ff ff64 	bl	801cec4 <lcd16x2_i2c_clear>
  lcd16x2_i2c_printf("><>   FISH   <><");
 801cffc:	4848      	ldr	r0, [pc, #288]	; (801d120 <main+0x1a4>)
 801cffe:	f7ff ff6b 	bl	801ced8 <lcd16x2_i2c_printf>
  lcd16x2_i2c_2ndLine();
 801d002:	f7ff ff57 	bl	801ceb4 <lcd16x2_i2c_2ndLine>
  lcd16x2_i2c_printf("===   BOARD  ===");
 801d006:	4847      	ldr	r0, [pc, #284]	; (801d124 <main+0x1a8>)
 801d008:	f7ff ff66 	bl	801ced8 <lcd16x2_i2c_printf>


  // Struct definition
  Problem p;			    			// struct that contains the info related to the problem
  uint32_t problemID = 0;				// ID that reppresents the number of the problem
 801d00c:	2300      	movs	r3, #0
 801d00e:	f8c7 3254 	str.w	r3, [r7, #596]	; 0x254
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  // If the blue button is pressed
	  if(BLUE_BUTTON){
 801d012:	4b45      	ldr	r3, [pc, #276]	; (801d128 <main+0x1ac>)
 801d014:	781b      	ldrb	r3, [r3, #0]
 801d016:	2b00      	cmp	r3, #0
 801d018:	d035      	beq.n	801d086 <main+0x10a>
		  lcd16x2_i2c_clear();							// clear the LCD display
 801d01a:	f7ff ff53 	bl	801cec4 <lcd16x2_i2c_clear>

		  problemID = keypad_getNumber();				// Listen for the key pressed on the keypad
 801d01e:	f7ff fd6b 	bl	801caf8 <keypad_getNumber>
 801d022:	f8c7 0254 	str.w	r0, [r7, #596]	; 0x254

		  if(problemID==10000){		// If pressed button is disco mode
 801d026:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 801d02a:	f242 7210 	movw	r2, #10000	; 0x2710
 801d02e:	4293      	cmp	r3, r2
 801d030:	d103      	bne.n	801d03a <main+0xbe>

			  DISCO_FLAG = 1;
 801d032:	4b3e      	ldr	r3, [pc, #248]	; (801d12c <main+0x1b0>)
 801d034:	2201      	movs	r2, #1
 801d036:	701a      	strb	r2, [r3, #0]
 801d038:	e025      	b.n	801d086 <main+0x10a>

		  }else{								// Otherwise search correct problem

			  problem_fetch(&p,problemID);		// Update the struct with teh info from the ID
 801d03a:	f8d7 2254 	ldr.w	r2, [r7, #596]	; 0x254
 801d03e:	463b      	mov	r3, r7
 801d040:	4611      	mov	r1, r2
 801d042:	4618      	mov	r0, r3
 801d044:	f7e4 fb0e 	bl	8001664 <problem_fetch>

			  problem_genArray(&p);				// Generate a matrix containing colors for each LED according to problem
 801d048:	463b      	mov	r3, r7
 801d04a:	4618      	mov	r0, r3
 801d04c:	f7e4 f802 	bl	8001054 <problem_genArray>

			  // Display on led boulder info
			  lcd16x2_i2c_clear();
 801d050:	f7ff ff38 	bl	801cec4 <lcd16x2_i2c_clear>
			  lcd16x2_i2c_printf("Name:");
 801d054:	4836      	ldr	r0, [pc, #216]	; (801d130 <main+0x1b4>)
 801d056:	f7ff ff3f 	bl	801ced8 <lcd16x2_i2c_printf>
			  lcd16x2_i2c_printf(p.name);
 801d05a:	463b      	mov	r3, r7
 801d05c:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801d060:	4618      	mov	r0, r3
 801d062:	f7ff ff39 	bl	801ced8 <lcd16x2_i2c_printf>
			  lcd16x2_i2c_2ndLine();
 801d066:	f7ff ff25 	bl	801ceb4 <lcd16x2_i2c_2ndLine>
			  lcd16x2_i2c_printf("Grad:");
 801d06a:	4832      	ldr	r0, [pc, #200]	; (801d134 <main+0x1b8>)
 801d06c:	f7ff ff34 	bl	801ced8 <lcd16x2_i2c_printf>
			  lcd16x2_i2c_printf(p.grade);
 801d070:	463b      	mov	r3, r7
 801d072:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801d076:	4618      	mov	r0, r3
 801d078:	f7ff ff2e 	bl	801ced8 <lcd16x2_i2c_printf>

			  WS2811_Send();					// Sends to LED strip signal
 801d07c:	f7e4 f960 	bl	8001340 <WS2811_Send>

			  BLUE_BUTTON = false;				// Reset blue button flag
 801d080:	4b29      	ldr	r3, [pc, #164]	; (801d128 <main+0x1ac>)
 801d082:	2200      	movs	r2, #0
 801d084:	701a      	strb	r2, [r3, #0]
		  }
	  }


		// If the message is received from bluetooth
	 if(BLUETOOTH_FLAG==1){
 801d086:	4b2c      	ldr	r3, [pc, #176]	; (801d138 <main+0x1bc>)
 801d088:	781b      	ldrb	r3, [r3, #0]
 801d08a:	2b01      	cmp	r3, #1
 801d08c:	d1c1      	bne.n	801d012 <main+0x96>

		 if(buffer[0]=='D' && buffer[1]=='I' && buffer[2]=='S' && buffer[3]=='C' && buffer[4]=='O'){
 801d08e:	4b22      	ldr	r3, [pc, #136]	; (801d118 <main+0x19c>)
 801d090:	781b      	ldrb	r3, [r3, #0]
 801d092:	2b44      	cmp	r3, #68	; 0x44
 801d094:	d10f      	bne.n	801d0b6 <main+0x13a>
 801d096:	4b20      	ldr	r3, [pc, #128]	; (801d118 <main+0x19c>)
 801d098:	785b      	ldrb	r3, [r3, #1]
 801d09a:	2b49      	cmp	r3, #73	; 0x49
 801d09c:	d10b      	bne.n	801d0b6 <main+0x13a>
 801d09e:	4b1e      	ldr	r3, [pc, #120]	; (801d118 <main+0x19c>)
 801d0a0:	789b      	ldrb	r3, [r3, #2]
 801d0a2:	2b53      	cmp	r3, #83	; 0x53
 801d0a4:	d107      	bne.n	801d0b6 <main+0x13a>
 801d0a6:	4b1c      	ldr	r3, [pc, #112]	; (801d118 <main+0x19c>)
 801d0a8:	78db      	ldrb	r3, [r3, #3]
 801d0aa:	2b43      	cmp	r3, #67	; 0x43
 801d0ac:	d103      	bne.n	801d0b6 <main+0x13a>
 801d0ae:	4b1a      	ldr	r3, [pc, #104]	; (801d118 <main+0x19c>)
 801d0b0:	791b      	ldrb	r3, [r3, #4]
 801d0b2:	2b4f      	cmp	r3, #79	; 0x4f
 801d0b4:	d026      	beq.n	801d104 <main+0x188>
			 //DISCO_FLAG     = 1;
			 //BLUETOOTH_FLAG = 0;
		 }else{
			 MessageHandler(&p);					// Save in the struct the correct values from the string received
 801d0b6:	463b      	mov	r3, r7
 801d0b8:	4618      	mov	r0, r3
 801d0ba:	f7e4 f9ff 	bl	80014bc <MessageHandler>

			 problem_genArray(&p);				// Generate matrix of color values from problem
 801d0be:	463b      	mov	r3, r7
 801d0c0:	4618      	mov	r0, r3
 801d0c2:	f7e3 ffc7 	bl	8001054 <problem_genArray>

			 WS2811_Send();						// Send PWM to LEDs
 801d0c6:	f7e4 f93b 	bl	8001340 <WS2811_Send>

			 // Display on led boulder info
			 lcd16x2_i2c_clear();
 801d0ca:	f7ff fefb 	bl	801cec4 <lcd16x2_i2c_clear>
			 lcd16x2_i2c_2ndLine();
 801d0ce:	f7ff fef1 	bl	801ceb4 <lcd16x2_i2c_2ndLine>
			 lcd16x2_i2c_clear();
 801d0d2:	f7ff fef7 	bl	801cec4 <lcd16x2_i2c_clear>
			 lcd16x2_i2c_printf("Name:");
 801d0d6:	4816      	ldr	r0, [pc, #88]	; (801d130 <main+0x1b4>)
 801d0d8:	f7ff fefe 	bl	801ced8 <lcd16x2_i2c_printf>
			 lcd16x2_i2c_printf(p.name);
 801d0dc:	463b      	mov	r3, r7
 801d0de:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801d0e2:	4618      	mov	r0, r3
 801d0e4:	f7ff fef8 	bl	801ced8 <lcd16x2_i2c_printf>
			 lcd16x2_i2c_2ndLine();
 801d0e8:	f7ff fee4 	bl	801ceb4 <lcd16x2_i2c_2ndLine>
			 lcd16x2_i2c_printf("Grad:");
 801d0ec:	4811      	ldr	r0, [pc, #68]	; (801d134 <main+0x1b8>)
 801d0ee:	f7ff fef3 	bl	801ced8 <lcd16x2_i2c_printf>
			 lcd16x2_i2c_printf(p.grade);
 801d0f2:	463b      	mov	r3, r7
 801d0f4:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801d0f8:	4618      	mov	r0, r3
 801d0fa:	f7ff feed 	bl	801ced8 <lcd16x2_i2c_printf>

			 BLUETOOTH_FLAG=0;					// Reset bluetooth flag in order to receive again
 801d0fe:	4b0e      	ldr	r3, [pc, #56]	; (801d138 <main+0x1bc>)
 801d100:	2200      	movs	r2, #0
 801d102:	701a      	strb	r2, [r3, #0]
	  if(BLUE_BUTTON){
 801d104:	e785      	b.n	801d012 <main+0x96>
 801d106:	bf00      	nop
 801d108:	20005424 	.word	0x20005424
 801d10c:	40020000 	.word	0x40020000
 801d110:	0802d1c8 	.word	0x0802d1c8
 801d114:	40020400 	.word	0x40020400
 801d118:	20002b08 	.word	0x20002b08
 801d11c:	200055c8 	.word	0x200055c8
 801d120:	0802d1dc 	.word	0x0802d1dc
 801d124:	0802d1f0 	.word	0x0802d1f0
 801d128:	2000009d 	.word	0x2000009d
 801d12c:	20000091 	.word	0x20000091
 801d130:	0802d204 	.word	0x0802d204
 801d134:	0802d20c 	.word	0x0802d20c
 801d138:	20000090 	.word	0x20000090

0801d13c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 801d13c:	b580      	push	{r7, lr}
 801d13e:	b094      	sub	sp, #80	; 0x50
 801d140:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 801d142:	f107 0320 	add.w	r3, r7, #32
 801d146:	2230      	movs	r2, #48	; 0x30
 801d148:	2100      	movs	r1, #0
 801d14a:	4618      	mov	r0, r3
 801d14c:	f004 fffa 	bl	8022144 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 801d150:	f107 030c 	add.w	r3, r7, #12
 801d154:	2200      	movs	r2, #0
 801d156:	601a      	str	r2, [r3, #0]
 801d158:	605a      	str	r2, [r3, #4]
 801d15a:	609a      	str	r2, [r3, #8]
 801d15c:	60da      	str	r2, [r3, #12]
 801d15e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 801d160:	2300      	movs	r3, #0
 801d162:	60bb      	str	r3, [r7, #8]
 801d164:	4b28      	ldr	r3, [pc, #160]	; (801d208 <SystemClock_Config+0xcc>)
 801d166:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801d168:	4a27      	ldr	r2, [pc, #156]	; (801d208 <SystemClock_Config+0xcc>)
 801d16a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801d16e:	6413      	str	r3, [r2, #64]	; 0x40
 801d170:	4b25      	ldr	r3, [pc, #148]	; (801d208 <SystemClock_Config+0xcc>)
 801d172:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801d174:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801d178:	60bb      	str	r3, [r7, #8]
 801d17a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 801d17c:	2300      	movs	r3, #0
 801d17e:	607b      	str	r3, [r7, #4]
 801d180:	4b22      	ldr	r3, [pc, #136]	; (801d20c <SystemClock_Config+0xd0>)
 801d182:	681b      	ldr	r3, [r3, #0]
 801d184:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 801d188:	4a20      	ldr	r2, [pc, #128]	; (801d20c <SystemClock_Config+0xd0>)
 801d18a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801d18e:	6013      	str	r3, [r2, #0]
 801d190:	4b1e      	ldr	r3, [pc, #120]	; (801d20c <SystemClock_Config+0xd0>)
 801d192:	681b      	ldr	r3, [r3, #0]
 801d194:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 801d198:	607b      	str	r3, [r7, #4]
 801d19a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 801d19c:	2302      	movs	r3, #2
 801d19e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 801d1a0:	2301      	movs	r3, #1
 801d1a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 801d1a4:	2310      	movs	r3, #16
 801d1a6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 801d1a8:	2302      	movs	r3, #2
 801d1aa:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 801d1ac:	2300      	movs	r3, #0
 801d1ae:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 801d1b0:	2308      	movs	r3, #8
 801d1b2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 801d1b4:	2348      	movs	r3, #72	; 0x48
 801d1b6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 801d1b8:	2302      	movs	r3, #2
 801d1ba:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 801d1bc:	2307      	movs	r3, #7
 801d1be:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 801d1c0:	f107 0320 	add.w	r3, r7, #32
 801d1c4:	4618      	mov	r0, r3
 801d1c6:	f002 f93f 	bl	801f448 <HAL_RCC_OscConfig>
 801d1ca:	4603      	mov	r3, r0
 801d1cc:	2b00      	cmp	r3, #0
 801d1ce:	d001      	beq.n	801d1d4 <SystemClock_Config+0x98>
  {
    Error_Handler();
 801d1d0:	f000 f84e 	bl	801d270 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 801d1d4:	230f      	movs	r3, #15
 801d1d6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 801d1d8:	2302      	movs	r3, #2
 801d1da:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 801d1dc:	2300      	movs	r3, #0
 801d1de:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 801d1e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801d1e4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 801d1e6:	2300      	movs	r3, #0
 801d1e8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 801d1ea:	f107 030c 	add.w	r3, r7, #12
 801d1ee:	2102      	movs	r1, #2
 801d1f0:	4618      	mov	r0, r3
 801d1f2:	f002 fba1 	bl	801f938 <HAL_RCC_ClockConfig>
 801d1f6:	4603      	mov	r3, r0
 801d1f8:	2b00      	cmp	r3, #0
 801d1fa:	d001      	beq.n	801d200 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 801d1fc:	f000 f838 	bl	801d270 <Error_Handler>
  }
}
 801d200:	bf00      	nop
 801d202:	3750      	adds	r7, #80	; 0x50
 801d204:	46bd      	mov	sp, r7
 801d206:	bd80      	pop	{r7, pc}
 801d208:	40023800 	.word	0x40023800
 801d20c:	40007000 	.word	0x40007000

0801d210 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 801d210:	b480      	push	{r7}
 801d212:	b083      	sub	sp, #12
 801d214:	af00      	add	r7, sp, #0
 801d216:	4603      	mov	r3, r0
 801d218:	80fb      	strh	r3, [r7, #6]

	// interrupt blue button
	if(GPIO_Pin==B1_Pin){
 801d21a:	88fb      	ldrh	r3, [r7, #6]
 801d21c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801d220:	d102      	bne.n	801d228 <HAL_GPIO_EXTI_Callback+0x18>
		BLUE_BUTTON = true;
 801d222:	4b04      	ldr	r3, [pc, #16]	; (801d234 <HAL_GPIO_EXTI_Callback+0x24>)
 801d224:	2201      	movs	r2, #1
 801d226:	701a      	strb	r2, [r3, #0]
	}
}
 801d228:	bf00      	nop
 801d22a:	370c      	adds	r7, #12
 801d22c:	46bd      	mov	sp, r7
 801d22e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d232:	4770      	bx	lr
 801d234:	2000009d 	.word	0x2000009d

0801d238 <HAL_UART_RxCpltCallback>:



void HAL_UART_RxCpltCallback(UART_HandleTypeDef * huart){
 801d238:	b580      	push	{r7, lr}
 801d23a:	b082      	sub	sp, #8
 801d23c:	af00      	add	r7, sp, #0
 801d23e:	6078      	str	r0, [r7, #4]

	if(BLUETOOTH_FLAG == 0){
 801d240:	4b08      	ldr	r3, [pc, #32]	; (801d264 <HAL_UART_RxCpltCallback+0x2c>)
 801d242:	781b      	ldrb	r3, [r3, #0]
 801d244:	2b00      	cmp	r3, #0
 801d246:	d102      	bne.n	801d24e <HAL_UART_RxCpltCallback+0x16>
		BLUETOOTH_FLAG = 1;
 801d248:	4b06      	ldr	r3, [pc, #24]	; (801d264 <HAL_UART_RxCpltCallback+0x2c>)
 801d24a:	2201      	movs	r2, #1
 801d24c:	701a      	strb	r2, [r3, #0]
	}

	HAL_UART_Receive_IT(&huart6, buffer, 600);
 801d24e:	f44f 7216 	mov.w	r2, #600	; 0x258
 801d252:	4905      	ldr	r1, [pc, #20]	; (801d268 <HAL_UART_RxCpltCallback+0x30>)
 801d254:	4805      	ldr	r0, [pc, #20]	; (801d26c <HAL_UART_RxCpltCallback+0x34>)
 801d256:	f004 f854 	bl	8021302 <HAL_UART_Receive_IT>

}
 801d25a:	bf00      	nop
 801d25c:	3708      	adds	r7, #8
 801d25e:	46bd      	mov	sp, r7
 801d260:	bd80      	pop	{r7, pc}
 801d262:	bf00      	nop
 801d264:	20000090 	.word	0x20000090
 801d268:	20002b08 	.word	0x20002b08
 801d26c:	200055c8 	.word	0x200055c8

0801d270 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 801d270:	b480      	push	{r7}
 801d272:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 801d274:	b672      	cpsid	i
}
 801d276:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 801d278:	e7fe      	b.n	801d278 <Error_Handler+0x8>
	...

0801d27c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 801d27c:	b580      	push	{r7, lr}
 801d27e:	b082      	sub	sp, #8
 801d280:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 801d282:	2300      	movs	r3, #0
 801d284:	607b      	str	r3, [r7, #4]
 801d286:	4b14      	ldr	r3, [pc, #80]	; (801d2d8 <HAL_MspInit+0x5c>)
 801d288:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801d28a:	4a13      	ldr	r2, [pc, #76]	; (801d2d8 <HAL_MspInit+0x5c>)
 801d28c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 801d290:	6453      	str	r3, [r2, #68]	; 0x44
 801d292:	4b11      	ldr	r3, [pc, #68]	; (801d2d8 <HAL_MspInit+0x5c>)
 801d294:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801d296:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801d29a:	607b      	str	r3, [r7, #4]
 801d29c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 801d29e:	2300      	movs	r3, #0
 801d2a0:	603b      	str	r3, [r7, #0]
 801d2a2:	4b0d      	ldr	r3, [pc, #52]	; (801d2d8 <HAL_MspInit+0x5c>)
 801d2a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801d2a6:	4a0c      	ldr	r2, [pc, #48]	; (801d2d8 <HAL_MspInit+0x5c>)
 801d2a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801d2ac:	6413      	str	r3, [r2, #64]	; 0x40
 801d2ae:	4b0a      	ldr	r3, [pc, #40]	; (801d2d8 <HAL_MspInit+0x5c>)
 801d2b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801d2b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801d2b6:	603b      	str	r3, [r7, #0]
 801d2b8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 801d2ba:	2007      	movs	r0, #7
 801d2bc:	f000 fd38 	bl	801dd30 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* FPU_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(FPU_IRQn, 0, 0);
 801d2c0:	2200      	movs	r2, #0
 801d2c2:	2100      	movs	r1, #0
 801d2c4:	2051      	movs	r0, #81	; 0x51
 801d2c6:	f000 fd3e 	bl	801dd46 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FPU_IRQn);
 801d2ca:	2051      	movs	r0, #81	; 0x51
 801d2cc:	f000 fd57 	bl	801dd7e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 801d2d0:	bf00      	nop
 801d2d2:	3708      	adds	r7, #8
 801d2d4:	46bd      	mov	sp, r7
 801d2d6:	bd80      	pop	{r7, pc}
 801d2d8:	40023800 	.word	0x40023800

0801d2dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 801d2dc:	b480      	push	{r7}
 801d2de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 801d2e0:	e7fe      	b.n	801d2e0 <NMI_Handler+0x4>

0801d2e2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 801d2e2:	b480      	push	{r7}
 801d2e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 801d2e6:	e7fe      	b.n	801d2e6 <HardFault_Handler+0x4>

0801d2e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 801d2e8:	b480      	push	{r7}
 801d2ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 801d2ec:	e7fe      	b.n	801d2ec <MemManage_Handler+0x4>

0801d2ee <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 801d2ee:	b480      	push	{r7}
 801d2f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 801d2f2:	e7fe      	b.n	801d2f2 <BusFault_Handler+0x4>

0801d2f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 801d2f4:	b480      	push	{r7}
 801d2f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 801d2f8:	e7fe      	b.n	801d2f8 <UsageFault_Handler+0x4>

0801d2fa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 801d2fa:	b480      	push	{r7}
 801d2fc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 801d2fe:	bf00      	nop
 801d300:	46bd      	mov	sp, r7
 801d302:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d306:	4770      	bx	lr

0801d308 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 801d308:	b480      	push	{r7}
 801d30a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 801d30c:	bf00      	nop
 801d30e:	46bd      	mov	sp, r7
 801d310:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d314:	4770      	bx	lr

0801d316 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 801d316:	b480      	push	{r7}
 801d318:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 801d31a:	bf00      	nop
 801d31c:	46bd      	mov	sp, r7
 801d31e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d322:	4770      	bx	lr

0801d324 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 801d324:	b580      	push	{r7, lr}
 801d326:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 801d328:	f000 fbee 	bl	801db08 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 801d32c:	bf00      	nop
 801d32e:	bd80      	pop	{r7, pc}

0801d330 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 801d330:	b580      	push	{r7, lr}
 801d332:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch1_trig);
 801d334:	4802      	ldr	r0, [pc, #8]	; (801d340 <DMA1_Stream4_IRQHandler+0x10>)
 801d336:	f000 fed5 	bl	801e0e4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 801d33a:	bf00      	nop
 801d33c:	bd80      	pop	{r7, pc}
 801d33e:	bf00      	nop
 801d340:	20005520 	.word	0x20005520

0801d344 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 801d344:	b580      	push	{r7, lr}
 801d346:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */
  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch1);
 801d348:	4802      	ldr	r0, [pc, #8]	; (801d354 <DMA1_Stream5_IRQHandler+0x10>)
 801d34a:	f000 fecb 	bl	801e0e4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 801d34e:	bf00      	nop
 801d350:	bd80      	pop	{r7, pc}
 801d352:	bf00      	nop
 801d354:	20005478 	.word	0x20005478

0801d358 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 801d358:	b580      	push	{r7, lr}
 801d35a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 801d35c:	4802      	ldr	r0, [pc, #8]	; (801d368 <TIM2_IRQHandler+0x10>)
 801d35e:	f003 f805 	bl	802036c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 801d362:	bf00      	nop
 801d364:	bd80      	pop	{r7, pc}
 801d366:	bf00      	nop
 801d368:	20005580 	.word	0x20005580

0801d36c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 801d36c:	b580      	push	{r7, lr}
 801d36e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 801d370:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 801d374:	f001 fad6 	bl	801e924 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 801d378:	bf00      	nop
 801d37a:	bd80      	pop	{r7, pc}

0801d37c <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 801d37c:	b580      	push	{r7, lr}
 801d37e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 801d380:	4802      	ldr	r0, [pc, #8]	; (801d38c <USART6_IRQHandler+0x10>)
 801d382:	f003 ffef 	bl	8021364 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 801d386:	bf00      	nop
 801d388:	bd80      	pop	{r7, pc}
 801d38a:	bf00      	nop
 801d38c:	200055c8 	.word	0x200055c8

0801d390 <FPU_IRQHandler>:

/**
  * @brief This function handles FPU global interrupt.
  */
void FPU_IRQHandler(void)
{
 801d390:	b480      	push	{r7}
 801d392:	af00      	add	r7, sp, #0

  /* USER CODE END FPU_IRQn 0 */
  /* USER CODE BEGIN FPU_IRQn 1 */

  /* USER CODE END FPU_IRQn 1 */
}
 801d394:	bf00      	nop
 801d396:	46bd      	mov	sp, r7
 801d398:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d39c:	4770      	bx	lr
	...

0801d3a0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 801d3a0:	b580      	push	{r7, lr}
 801d3a2:	b086      	sub	sp, #24
 801d3a4:	af00      	add	r7, sp, #0
 801d3a6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 801d3a8:	4a14      	ldr	r2, [pc, #80]	; (801d3fc <_sbrk+0x5c>)
 801d3aa:	4b15      	ldr	r3, [pc, #84]	; (801d400 <_sbrk+0x60>)
 801d3ac:	1ad3      	subs	r3, r2, r3
 801d3ae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 801d3b0:	697b      	ldr	r3, [r7, #20]
 801d3b2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 801d3b4:	4b13      	ldr	r3, [pc, #76]	; (801d404 <_sbrk+0x64>)
 801d3b6:	681b      	ldr	r3, [r3, #0]
 801d3b8:	2b00      	cmp	r3, #0
 801d3ba:	d102      	bne.n	801d3c2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 801d3bc:	4b11      	ldr	r3, [pc, #68]	; (801d404 <_sbrk+0x64>)
 801d3be:	4a12      	ldr	r2, [pc, #72]	; (801d408 <_sbrk+0x68>)
 801d3c0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 801d3c2:	4b10      	ldr	r3, [pc, #64]	; (801d404 <_sbrk+0x64>)
 801d3c4:	681a      	ldr	r2, [r3, #0]
 801d3c6:	687b      	ldr	r3, [r7, #4]
 801d3c8:	4413      	add	r3, r2
 801d3ca:	693a      	ldr	r2, [r7, #16]
 801d3cc:	429a      	cmp	r2, r3
 801d3ce:	d207      	bcs.n	801d3e0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 801d3d0:	f004 fe80 	bl	80220d4 <__errno>
 801d3d4:	4603      	mov	r3, r0
 801d3d6:	220c      	movs	r2, #12
 801d3d8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 801d3da:	f04f 33ff 	mov.w	r3, #4294967295
 801d3de:	e009      	b.n	801d3f4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 801d3e0:	4b08      	ldr	r3, [pc, #32]	; (801d404 <_sbrk+0x64>)
 801d3e2:	681b      	ldr	r3, [r3, #0]
 801d3e4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 801d3e6:	4b07      	ldr	r3, [pc, #28]	; (801d404 <_sbrk+0x64>)
 801d3e8:	681a      	ldr	r2, [r3, #0]
 801d3ea:	687b      	ldr	r3, [r7, #4]
 801d3ec:	4413      	add	r3, r2
 801d3ee:	4a05      	ldr	r2, [pc, #20]	; (801d404 <_sbrk+0x64>)
 801d3f0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 801d3f2:	68fb      	ldr	r3, [r7, #12]
}
 801d3f4:	4618      	mov	r0, r3
 801d3f6:	3718      	adds	r7, #24
 801d3f8:	46bd      	mov	sp, r7
 801d3fa:	bd80      	pop	{r7, pc}
 801d3fc:	20018000 	.word	0x20018000
 801d400:	00000400 	.word	0x00000400
 801d404:	200000a0 	.word	0x200000a0
 801d408:	20005668 	.word	0x20005668

0801d40c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 801d40c:	b480      	push	{r7}
 801d40e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 801d410:	4b08      	ldr	r3, [pc, #32]	; (801d434 <SystemInit+0x28>)
 801d412:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801d416:	4a07      	ldr	r2, [pc, #28]	; (801d434 <SystemInit+0x28>)
 801d418:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 801d41c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 801d420:	4b04      	ldr	r3, [pc, #16]	; (801d434 <SystemInit+0x28>)
 801d422:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 801d426:	609a      	str	r2, [r3, #8]
#endif
}
 801d428:	bf00      	nop
 801d42a:	46bd      	mov	sp, r7
 801d42c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d430:	4770      	bx	lr
 801d432:	bf00      	nop
 801d434:	e000ed00 	.word	0xe000ed00

0801d438 <MX_TIM2_Init>:
DMA_HandleTypeDef hdma_tim2_ch1;
DMA_HandleTypeDef hdma_tim3_ch1_trig;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 801d438:	b580      	push	{r7, lr}
 801d43a:	b08e      	sub	sp, #56	; 0x38
 801d43c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 801d43e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801d442:	2200      	movs	r2, #0
 801d444:	601a      	str	r2, [r3, #0]
 801d446:	605a      	str	r2, [r3, #4]
 801d448:	609a      	str	r2, [r3, #8]
 801d44a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 801d44c:	f107 0320 	add.w	r3, r7, #32
 801d450:	2200      	movs	r2, #0
 801d452:	601a      	str	r2, [r3, #0]
 801d454:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 801d456:	1d3b      	adds	r3, r7, #4
 801d458:	2200      	movs	r2, #0
 801d45a:	601a      	str	r2, [r3, #0]
 801d45c:	605a      	str	r2, [r3, #4]
 801d45e:	609a      	str	r2, [r3, #8]
 801d460:	60da      	str	r2, [r3, #12]
 801d462:	611a      	str	r2, [r3, #16]
 801d464:	615a      	str	r2, [r3, #20]
 801d466:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 801d468:	4b2c      	ldr	r3, [pc, #176]	; (801d51c <MX_TIM2_Init+0xe4>)
 801d46a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 801d46e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1-1;
 801d470:	4b2a      	ldr	r3, [pc, #168]	; (801d51c <MX_TIM2_Init+0xe4>)
 801d472:	2200      	movs	r2, #0
 801d474:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 801d476:	4b29      	ldr	r3, [pc, #164]	; (801d51c <MX_TIM2_Init+0xe4>)
 801d478:	2200      	movs	r2, #0
 801d47a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 90-1;
 801d47c:	4b27      	ldr	r3, [pc, #156]	; (801d51c <MX_TIM2_Init+0xe4>)
 801d47e:	2259      	movs	r2, #89	; 0x59
 801d480:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 801d482:	4b26      	ldr	r3, [pc, #152]	; (801d51c <MX_TIM2_Init+0xe4>)
 801d484:	2200      	movs	r2, #0
 801d486:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 801d488:	4b24      	ldr	r3, [pc, #144]	; (801d51c <MX_TIM2_Init+0xe4>)
 801d48a:	2280      	movs	r2, #128	; 0x80
 801d48c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 801d48e:	4823      	ldr	r0, [pc, #140]	; (801d51c <MX_TIM2_Init+0xe4>)
 801d490:	f002 fc4e 	bl	801fd30 <HAL_TIM_Base_Init>
 801d494:	4603      	mov	r3, r0
 801d496:	2b00      	cmp	r3, #0
 801d498:	d001      	beq.n	801d49e <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 801d49a:	f7ff fee9 	bl	801d270 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 801d49e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801d4a2:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 801d4a4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801d4a8:	4619      	mov	r1, r3
 801d4aa:	481c      	ldr	r0, [pc, #112]	; (801d51c <MX_TIM2_Init+0xe4>)
 801d4ac:	f003 f928 	bl	8020700 <HAL_TIM_ConfigClockSource>
 801d4b0:	4603      	mov	r3, r0
 801d4b2:	2b00      	cmp	r3, #0
 801d4b4:	d001      	beq.n	801d4ba <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 801d4b6:	f7ff fedb 	bl	801d270 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 801d4ba:	4818      	ldr	r0, [pc, #96]	; (801d51c <MX_TIM2_Init+0xe4>)
 801d4bc:	f002 fc87 	bl	801fdce <HAL_TIM_PWM_Init>
 801d4c0:	4603      	mov	r3, r0
 801d4c2:	2b00      	cmp	r3, #0
 801d4c4:	d001      	beq.n	801d4ca <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 801d4c6:	f7ff fed3 	bl	801d270 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 801d4ca:	2300      	movs	r3, #0
 801d4cc:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 801d4ce:	2300      	movs	r3, #0
 801d4d0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 801d4d2:	f107 0320 	add.w	r3, r7, #32
 801d4d6:	4619      	mov	r1, r3
 801d4d8:	4810      	ldr	r0, [pc, #64]	; (801d51c <MX_TIM2_Init+0xe4>)
 801d4da:	f003 fdb1 	bl	8021040 <HAL_TIMEx_MasterConfigSynchronization>
 801d4de:	4603      	mov	r3, r0
 801d4e0:	2b00      	cmp	r3, #0
 801d4e2:	d001      	beq.n	801d4e8 <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 801d4e4:	f7ff fec4 	bl	801d270 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 801d4e8:	2360      	movs	r3, #96	; 0x60
 801d4ea:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1;
 801d4ec:	2301      	movs	r3, #1
 801d4ee:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 801d4f0:	2300      	movs	r3, #0
 801d4f2:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 801d4f4:	2300      	movs	r3, #0
 801d4f6:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 801d4f8:	1d3b      	adds	r3, r7, #4
 801d4fa:	2200      	movs	r2, #0
 801d4fc:	4619      	mov	r1, r3
 801d4fe:	4807      	ldr	r0, [pc, #28]	; (801d51c <MX_TIM2_Init+0xe4>)
 801d500:	f003 f83c 	bl	802057c <HAL_TIM_PWM_ConfigChannel>
 801d504:	4603      	mov	r3, r0
 801d506:	2b00      	cmp	r3, #0
 801d508:	d001      	beq.n	801d50e <MX_TIM2_Init+0xd6>
  {
    Error_Handler();
 801d50a:	f7ff feb1 	bl	801d270 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 801d50e:	4803      	ldr	r0, [pc, #12]	; (801d51c <MX_TIM2_Init+0xe4>)
 801d510:	f000 f928 	bl	801d764 <HAL_TIM_MspPostInit>

}
 801d514:	bf00      	nop
 801d516:	3738      	adds	r7, #56	; 0x38
 801d518:	46bd      	mov	sp, r7
 801d51a:	bd80      	pop	{r7, pc}
 801d51c:	20005580 	.word	0x20005580

0801d520 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 801d520:	b580      	push	{r7, lr}
 801d522:	b08e      	sub	sp, #56	; 0x38
 801d524:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 801d526:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801d52a:	2200      	movs	r2, #0
 801d52c:	601a      	str	r2, [r3, #0]
 801d52e:	605a      	str	r2, [r3, #4]
 801d530:	609a      	str	r2, [r3, #8]
 801d532:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 801d534:	f107 0320 	add.w	r3, r7, #32
 801d538:	2200      	movs	r2, #0
 801d53a:	601a      	str	r2, [r3, #0]
 801d53c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 801d53e:	1d3b      	adds	r3, r7, #4
 801d540:	2200      	movs	r2, #0
 801d542:	601a      	str	r2, [r3, #0]
 801d544:	605a      	str	r2, [r3, #4]
 801d546:	609a      	str	r2, [r3, #8]
 801d548:	60da      	str	r2, [r3, #12]
 801d54a:	611a      	str	r2, [r3, #16]
 801d54c:	615a      	str	r2, [r3, #20]
 801d54e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 801d550:	4b2c      	ldr	r3, [pc, #176]	; (801d604 <MX_TIM3_Init+0xe4>)
 801d552:	4a2d      	ldr	r2, [pc, #180]	; (801d608 <MX_TIM3_Init+0xe8>)
 801d554:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1-1;
 801d556:	4b2b      	ldr	r3, [pc, #172]	; (801d604 <MX_TIM3_Init+0xe4>)
 801d558:	2200      	movs	r2, #0
 801d55a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 801d55c:	4b29      	ldr	r3, [pc, #164]	; (801d604 <MX_TIM3_Init+0xe4>)
 801d55e:	2200      	movs	r2, #0
 801d560:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 90-1;
 801d562:	4b28      	ldr	r3, [pc, #160]	; (801d604 <MX_TIM3_Init+0xe4>)
 801d564:	2259      	movs	r2, #89	; 0x59
 801d566:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 801d568:	4b26      	ldr	r3, [pc, #152]	; (801d604 <MX_TIM3_Init+0xe4>)
 801d56a:	2200      	movs	r2, #0
 801d56c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 801d56e:	4b25      	ldr	r3, [pc, #148]	; (801d604 <MX_TIM3_Init+0xe4>)
 801d570:	2280      	movs	r2, #128	; 0x80
 801d572:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 801d574:	4823      	ldr	r0, [pc, #140]	; (801d604 <MX_TIM3_Init+0xe4>)
 801d576:	f002 fbdb 	bl	801fd30 <HAL_TIM_Base_Init>
 801d57a:	4603      	mov	r3, r0
 801d57c:	2b00      	cmp	r3, #0
 801d57e:	d001      	beq.n	801d584 <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 801d580:	f7ff fe76 	bl	801d270 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 801d584:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801d588:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 801d58a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801d58e:	4619      	mov	r1, r3
 801d590:	481c      	ldr	r0, [pc, #112]	; (801d604 <MX_TIM3_Init+0xe4>)
 801d592:	f003 f8b5 	bl	8020700 <HAL_TIM_ConfigClockSource>
 801d596:	4603      	mov	r3, r0
 801d598:	2b00      	cmp	r3, #0
 801d59a:	d001      	beq.n	801d5a0 <MX_TIM3_Init+0x80>
  {
    Error_Handler();
 801d59c:	f7ff fe68 	bl	801d270 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 801d5a0:	4818      	ldr	r0, [pc, #96]	; (801d604 <MX_TIM3_Init+0xe4>)
 801d5a2:	f002 fc14 	bl	801fdce <HAL_TIM_PWM_Init>
 801d5a6:	4603      	mov	r3, r0
 801d5a8:	2b00      	cmp	r3, #0
 801d5aa:	d001      	beq.n	801d5b0 <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 801d5ac:	f7ff fe60 	bl	801d270 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 801d5b0:	2300      	movs	r3, #0
 801d5b2:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 801d5b4:	2300      	movs	r3, #0
 801d5b6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 801d5b8:	f107 0320 	add.w	r3, r7, #32
 801d5bc:	4619      	mov	r1, r3
 801d5be:	4811      	ldr	r0, [pc, #68]	; (801d604 <MX_TIM3_Init+0xe4>)
 801d5c0:	f003 fd3e 	bl	8021040 <HAL_TIMEx_MasterConfigSynchronization>
 801d5c4:	4603      	mov	r3, r0
 801d5c6:	2b00      	cmp	r3, #0
 801d5c8:	d001      	beq.n	801d5ce <MX_TIM3_Init+0xae>
  {
    Error_Handler();
 801d5ca:	f7ff fe51 	bl	801d270 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 801d5ce:	2360      	movs	r3, #96	; 0x60
 801d5d0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1;
 801d5d2:	2301      	movs	r3, #1
 801d5d4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 801d5d6:	2300      	movs	r3, #0
 801d5d8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 801d5da:	2300      	movs	r3, #0
 801d5dc:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 801d5de:	1d3b      	adds	r3, r7, #4
 801d5e0:	2200      	movs	r2, #0
 801d5e2:	4619      	mov	r1, r3
 801d5e4:	4807      	ldr	r0, [pc, #28]	; (801d604 <MX_TIM3_Init+0xe4>)
 801d5e6:	f002 ffc9 	bl	802057c <HAL_TIM_PWM_ConfigChannel>
 801d5ea:	4603      	mov	r3, r0
 801d5ec:	2b00      	cmp	r3, #0
 801d5ee:	d001      	beq.n	801d5f4 <MX_TIM3_Init+0xd4>
  {
    Error_Handler();
 801d5f0:	f7ff fe3e 	bl	801d270 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 801d5f4:	4803      	ldr	r0, [pc, #12]	; (801d604 <MX_TIM3_Init+0xe4>)
 801d5f6:	f000 f8b5 	bl	801d764 <HAL_TIM_MspPostInit>

}
 801d5fa:	bf00      	nop
 801d5fc:	3738      	adds	r7, #56	; 0x38
 801d5fe:	46bd      	mov	sp, r7
 801d600:	bd80      	pop	{r7, pc}
 801d602:	bf00      	nop
 801d604:	200054d8 	.word	0x200054d8
 801d608:	40000400 	.word	0x40000400

0801d60c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 801d60c:	b580      	push	{r7, lr}
 801d60e:	b084      	sub	sp, #16
 801d610:	af00      	add	r7, sp, #0
 801d612:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 801d614:	687b      	ldr	r3, [r7, #4]
 801d616:	681b      	ldr	r3, [r3, #0]
 801d618:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801d61c:	d147      	bne.n	801d6ae <HAL_TIM_Base_MspInit+0xa2>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 801d61e:	2300      	movs	r3, #0
 801d620:	60fb      	str	r3, [r7, #12]
 801d622:	4b4a      	ldr	r3, [pc, #296]	; (801d74c <HAL_TIM_Base_MspInit+0x140>)
 801d624:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801d626:	4a49      	ldr	r2, [pc, #292]	; (801d74c <HAL_TIM_Base_MspInit+0x140>)
 801d628:	f043 0301 	orr.w	r3, r3, #1
 801d62c:	6413      	str	r3, [r2, #64]	; 0x40
 801d62e:	4b47      	ldr	r3, [pc, #284]	; (801d74c <HAL_TIM_Base_MspInit+0x140>)
 801d630:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801d632:	f003 0301 	and.w	r3, r3, #1
 801d636:	60fb      	str	r3, [r7, #12]
 801d638:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 DMA Init */
    /* TIM2_CH1 Init */
    hdma_tim2_ch1.Instance = DMA1_Stream5;
 801d63a:	4b45      	ldr	r3, [pc, #276]	; (801d750 <HAL_TIM_Base_MspInit+0x144>)
 801d63c:	4a45      	ldr	r2, [pc, #276]	; (801d754 <HAL_TIM_Base_MspInit+0x148>)
 801d63e:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch1.Init.Channel = DMA_CHANNEL_3;
 801d640:	4b43      	ldr	r3, [pc, #268]	; (801d750 <HAL_TIM_Base_MspInit+0x144>)
 801d642:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 801d646:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 801d648:	4b41      	ldr	r3, [pc, #260]	; (801d750 <HAL_TIM_Base_MspInit+0x144>)
 801d64a:	2240      	movs	r2, #64	; 0x40
 801d64c:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 801d64e:	4b40      	ldr	r3, [pc, #256]	; (801d750 <HAL_TIM_Base_MspInit+0x144>)
 801d650:	2200      	movs	r2, #0
 801d652:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch1.Init.MemInc = DMA_MINC_ENABLE;
 801d654:	4b3e      	ldr	r3, [pc, #248]	; (801d750 <HAL_TIM_Base_MspInit+0x144>)
 801d656:	f44f 6280 	mov.w	r2, #1024	; 0x400
 801d65a:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 801d65c:	4b3c      	ldr	r3, [pc, #240]	; (801d750 <HAL_TIM_Base_MspInit+0x144>)
 801d65e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 801d662:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 801d664:	4b3a      	ldr	r3, [pc, #232]	; (801d750 <HAL_TIM_Base_MspInit+0x144>)
 801d666:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 801d66a:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch1.Init.Mode = DMA_CIRCULAR;
 801d66c:	4b38      	ldr	r3, [pc, #224]	; (801d750 <HAL_TIM_Base_MspInit+0x144>)
 801d66e:	f44f 7280 	mov.w	r2, #256	; 0x100
 801d672:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch1.Init.Priority = DMA_PRIORITY_LOW;
 801d674:	4b36      	ldr	r3, [pc, #216]	; (801d750 <HAL_TIM_Base_MspInit+0x144>)
 801d676:	2200      	movs	r2, #0
 801d678:	621a      	str	r2, [r3, #32]
    hdma_tim2_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 801d67a:	4b35      	ldr	r3, [pc, #212]	; (801d750 <HAL_TIM_Base_MspInit+0x144>)
 801d67c:	2200      	movs	r2, #0
 801d67e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim2_ch1) != HAL_OK)
 801d680:	4833      	ldr	r0, [pc, #204]	; (801d750 <HAL_TIM_Base_MspInit+0x144>)
 801d682:	f000 fb97 	bl	801ddb4 <HAL_DMA_Init>
 801d686:	4603      	mov	r3, r0
 801d688:	2b00      	cmp	r3, #0
 801d68a:	d001      	beq.n	801d690 <HAL_TIM_Base_MspInit+0x84>
    {
      Error_Handler();
 801d68c:	f7ff fdf0 	bl	801d270 <Error_Handler>
    }

    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC1],hdma_tim2_ch1);
 801d690:	687b      	ldr	r3, [r7, #4]
 801d692:	4a2f      	ldr	r2, [pc, #188]	; (801d750 <HAL_TIM_Base_MspInit+0x144>)
 801d694:	625a      	str	r2, [r3, #36]	; 0x24
 801d696:	4a2e      	ldr	r2, [pc, #184]	; (801d750 <HAL_TIM_Base_MspInit+0x144>)
 801d698:	687b      	ldr	r3, [r7, #4]
 801d69a:	6393      	str	r3, [r2, #56]	; 0x38

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 801d69c:	2200      	movs	r2, #0
 801d69e:	2100      	movs	r1, #0
 801d6a0:	201c      	movs	r0, #28
 801d6a2:	f000 fb50 	bl	801dd46 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 801d6a6:	201c      	movs	r0, #28
 801d6a8:	f000 fb69 	bl	801dd7e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 801d6ac:	e049      	b.n	801d742 <HAL_TIM_Base_MspInit+0x136>
  else if(tim_baseHandle->Instance==TIM3)
 801d6ae:	687b      	ldr	r3, [r7, #4]
 801d6b0:	681b      	ldr	r3, [r3, #0]
 801d6b2:	4a29      	ldr	r2, [pc, #164]	; (801d758 <HAL_TIM_Base_MspInit+0x14c>)
 801d6b4:	4293      	cmp	r3, r2
 801d6b6:	d144      	bne.n	801d742 <HAL_TIM_Base_MspInit+0x136>
    __HAL_RCC_TIM3_CLK_ENABLE();
 801d6b8:	2300      	movs	r3, #0
 801d6ba:	60bb      	str	r3, [r7, #8]
 801d6bc:	4b23      	ldr	r3, [pc, #140]	; (801d74c <HAL_TIM_Base_MspInit+0x140>)
 801d6be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801d6c0:	4a22      	ldr	r2, [pc, #136]	; (801d74c <HAL_TIM_Base_MspInit+0x140>)
 801d6c2:	f043 0302 	orr.w	r3, r3, #2
 801d6c6:	6413      	str	r3, [r2, #64]	; 0x40
 801d6c8:	4b20      	ldr	r3, [pc, #128]	; (801d74c <HAL_TIM_Base_MspInit+0x140>)
 801d6ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801d6cc:	f003 0302 	and.w	r3, r3, #2
 801d6d0:	60bb      	str	r3, [r7, #8]
 801d6d2:	68bb      	ldr	r3, [r7, #8]
    hdma_tim3_ch1_trig.Instance = DMA1_Stream4;
 801d6d4:	4b21      	ldr	r3, [pc, #132]	; (801d75c <HAL_TIM_Base_MspInit+0x150>)
 801d6d6:	4a22      	ldr	r2, [pc, #136]	; (801d760 <HAL_TIM_Base_MspInit+0x154>)
 801d6d8:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch1_trig.Init.Channel = DMA_CHANNEL_5;
 801d6da:	4b20      	ldr	r3, [pc, #128]	; (801d75c <HAL_TIM_Base_MspInit+0x150>)
 801d6dc:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 801d6e0:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch1_trig.Init.Direction = DMA_MEMORY_TO_PERIPH;
 801d6e2:	4b1e      	ldr	r3, [pc, #120]	; (801d75c <HAL_TIM_Base_MspInit+0x150>)
 801d6e4:	2240      	movs	r2, #64	; 0x40
 801d6e6:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch1_trig.Init.PeriphInc = DMA_PINC_DISABLE;
 801d6e8:	4b1c      	ldr	r3, [pc, #112]	; (801d75c <HAL_TIM_Base_MspInit+0x150>)
 801d6ea:	2200      	movs	r2, #0
 801d6ec:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch1_trig.Init.MemInc = DMA_MINC_ENABLE;
 801d6ee:	4b1b      	ldr	r3, [pc, #108]	; (801d75c <HAL_TIM_Base_MspInit+0x150>)
 801d6f0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 801d6f4:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch1_trig.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 801d6f6:	4b19      	ldr	r3, [pc, #100]	; (801d75c <HAL_TIM_Base_MspInit+0x150>)
 801d6f8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 801d6fc:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch1_trig.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 801d6fe:	4b17      	ldr	r3, [pc, #92]	; (801d75c <HAL_TIM_Base_MspInit+0x150>)
 801d700:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 801d704:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch1_trig.Init.Mode = DMA_CIRCULAR;
 801d706:	4b15      	ldr	r3, [pc, #84]	; (801d75c <HAL_TIM_Base_MspInit+0x150>)
 801d708:	f44f 7280 	mov.w	r2, #256	; 0x100
 801d70c:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch1_trig.Init.Priority = DMA_PRIORITY_LOW;
 801d70e:	4b13      	ldr	r3, [pc, #76]	; (801d75c <HAL_TIM_Base_MspInit+0x150>)
 801d710:	2200      	movs	r2, #0
 801d712:	621a      	str	r2, [r3, #32]
    hdma_tim3_ch1_trig.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 801d714:	4b11      	ldr	r3, [pc, #68]	; (801d75c <HAL_TIM_Base_MspInit+0x150>)
 801d716:	2200      	movs	r2, #0
 801d718:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim3_ch1_trig) != HAL_OK)
 801d71a:	4810      	ldr	r0, [pc, #64]	; (801d75c <HAL_TIM_Base_MspInit+0x150>)
 801d71c:	f000 fb4a 	bl	801ddb4 <HAL_DMA_Init>
 801d720:	4603      	mov	r3, r0
 801d722:	2b00      	cmp	r3, #0
 801d724:	d001      	beq.n	801d72a <HAL_TIM_Base_MspInit+0x11e>
      Error_Handler();
 801d726:	f7ff fda3 	bl	801d270 <Error_Handler>
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC1],hdma_tim3_ch1_trig);
 801d72a:	687b      	ldr	r3, [r7, #4]
 801d72c:	4a0b      	ldr	r2, [pc, #44]	; (801d75c <HAL_TIM_Base_MspInit+0x150>)
 801d72e:	625a      	str	r2, [r3, #36]	; 0x24
 801d730:	4a0a      	ldr	r2, [pc, #40]	; (801d75c <HAL_TIM_Base_MspInit+0x150>)
 801d732:	687b      	ldr	r3, [r7, #4]
 801d734:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_TRIGGER],hdma_tim3_ch1_trig);
 801d736:	687b      	ldr	r3, [r7, #4]
 801d738:	4a08      	ldr	r2, [pc, #32]	; (801d75c <HAL_TIM_Base_MspInit+0x150>)
 801d73a:	639a      	str	r2, [r3, #56]	; 0x38
 801d73c:	4a07      	ldr	r2, [pc, #28]	; (801d75c <HAL_TIM_Base_MspInit+0x150>)
 801d73e:	687b      	ldr	r3, [r7, #4]
 801d740:	6393      	str	r3, [r2, #56]	; 0x38
}
 801d742:	bf00      	nop
 801d744:	3710      	adds	r7, #16
 801d746:	46bd      	mov	sp, r7
 801d748:	bd80      	pop	{r7, pc}
 801d74a:	bf00      	nop
 801d74c:	40023800 	.word	0x40023800
 801d750:	20005478 	.word	0x20005478
 801d754:	40026088 	.word	0x40026088
 801d758:	40000400 	.word	0x40000400
 801d75c:	20005520 	.word	0x20005520
 801d760:	40026070 	.word	0x40026070

0801d764 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 801d764:	b580      	push	{r7, lr}
 801d766:	b08a      	sub	sp, #40	; 0x28
 801d768:	af00      	add	r7, sp, #0
 801d76a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801d76c:	f107 0314 	add.w	r3, r7, #20
 801d770:	2200      	movs	r2, #0
 801d772:	601a      	str	r2, [r3, #0]
 801d774:	605a      	str	r2, [r3, #4]
 801d776:	609a      	str	r2, [r3, #8]
 801d778:	60da      	str	r2, [r3, #12]
 801d77a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 801d77c:	687b      	ldr	r3, [r7, #4]
 801d77e:	681b      	ldr	r3, [r3, #0]
 801d780:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801d784:	d11e      	bne.n	801d7c4 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 801d786:	2300      	movs	r3, #0
 801d788:	613b      	str	r3, [r7, #16]
 801d78a:	4b22      	ldr	r3, [pc, #136]	; (801d814 <HAL_TIM_MspPostInit+0xb0>)
 801d78c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801d78e:	4a21      	ldr	r2, [pc, #132]	; (801d814 <HAL_TIM_MspPostInit+0xb0>)
 801d790:	f043 0301 	orr.w	r3, r3, #1
 801d794:	6313      	str	r3, [r2, #48]	; 0x30
 801d796:	4b1f      	ldr	r3, [pc, #124]	; (801d814 <HAL_TIM_MspPostInit+0xb0>)
 801d798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801d79a:	f003 0301 	and.w	r3, r3, #1
 801d79e:	613b      	str	r3, [r7, #16]
 801d7a0:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 801d7a2:	2301      	movs	r3, #1
 801d7a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801d7a6:	2302      	movs	r3, #2
 801d7a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801d7aa:	2300      	movs	r3, #0
 801d7ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801d7ae:	2300      	movs	r3, #0
 801d7b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 801d7b2:	2301      	movs	r3, #1
 801d7b4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801d7b6:	f107 0314 	add.w	r3, r7, #20
 801d7ba:	4619      	mov	r1, r3
 801d7bc:	4816      	ldr	r0, [pc, #88]	; (801d818 <HAL_TIM_MspPostInit+0xb4>)
 801d7be:	f000 fefb 	bl	801e5b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 801d7c2:	e022      	b.n	801d80a <HAL_TIM_MspPostInit+0xa6>
  else if(timHandle->Instance==TIM3)
 801d7c4:	687b      	ldr	r3, [r7, #4]
 801d7c6:	681b      	ldr	r3, [r3, #0]
 801d7c8:	4a14      	ldr	r2, [pc, #80]	; (801d81c <HAL_TIM_MspPostInit+0xb8>)
 801d7ca:	4293      	cmp	r3, r2
 801d7cc:	d11d      	bne.n	801d80a <HAL_TIM_MspPostInit+0xa6>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 801d7ce:	2300      	movs	r3, #0
 801d7d0:	60fb      	str	r3, [r7, #12]
 801d7d2:	4b10      	ldr	r3, [pc, #64]	; (801d814 <HAL_TIM_MspPostInit+0xb0>)
 801d7d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801d7d6:	4a0f      	ldr	r2, [pc, #60]	; (801d814 <HAL_TIM_MspPostInit+0xb0>)
 801d7d8:	f043 0301 	orr.w	r3, r3, #1
 801d7dc:	6313      	str	r3, [r2, #48]	; 0x30
 801d7de:	4b0d      	ldr	r3, [pc, #52]	; (801d814 <HAL_TIM_MspPostInit+0xb0>)
 801d7e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801d7e2:	f003 0301 	and.w	r3, r3, #1
 801d7e6:	60fb      	str	r3, [r7, #12]
 801d7e8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 801d7ea:	2340      	movs	r3, #64	; 0x40
 801d7ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801d7ee:	2302      	movs	r3, #2
 801d7f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801d7f2:	2300      	movs	r3, #0
 801d7f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801d7f6:	2300      	movs	r3, #0
 801d7f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 801d7fa:	2302      	movs	r3, #2
 801d7fc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801d7fe:	f107 0314 	add.w	r3, r7, #20
 801d802:	4619      	mov	r1, r3
 801d804:	4804      	ldr	r0, [pc, #16]	; (801d818 <HAL_TIM_MspPostInit+0xb4>)
 801d806:	f000 fed7 	bl	801e5b8 <HAL_GPIO_Init>
}
 801d80a:	bf00      	nop
 801d80c:	3728      	adds	r7, #40	; 0x28
 801d80e:	46bd      	mov	sp, r7
 801d810:	bd80      	pop	{r7, pc}
 801d812:	bf00      	nop
 801d814:	40023800 	.word	0x40023800
 801d818:	40020000 	.word	0x40020000
 801d81c:	40000400 	.word	0x40000400

0801d820 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart6;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 801d820:	b580      	push	{r7, lr}
 801d822:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 801d824:	4b11      	ldr	r3, [pc, #68]	; (801d86c <MX_USART2_UART_Init+0x4c>)
 801d826:	4a12      	ldr	r2, [pc, #72]	; (801d870 <MX_USART2_UART_Init+0x50>)
 801d828:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 801d82a:	4b10      	ldr	r3, [pc, #64]	; (801d86c <MX_USART2_UART_Init+0x4c>)
 801d82c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 801d830:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 801d832:	4b0e      	ldr	r3, [pc, #56]	; (801d86c <MX_USART2_UART_Init+0x4c>)
 801d834:	2200      	movs	r2, #0
 801d836:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 801d838:	4b0c      	ldr	r3, [pc, #48]	; (801d86c <MX_USART2_UART_Init+0x4c>)
 801d83a:	2200      	movs	r2, #0
 801d83c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 801d83e:	4b0b      	ldr	r3, [pc, #44]	; (801d86c <MX_USART2_UART_Init+0x4c>)
 801d840:	2200      	movs	r2, #0
 801d842:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 801d844:	4b09      	ldr	r3, [pc, #36]	; (801d86c <MX_USART2_UART_Init+0x4c>)
 801d846:	220c      	movs	r2, #12
 801d848:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 801d84a:	4b08      	ldr	r3, [pc, #32]	; (801d86c <MX_USART2_UART_Init+0x4c>)
 801d84c:	2200      	movs	r2, #0
 801d84e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 801d850:	4b06      	ldr	r3, [pc, #24]	; (801d86c <MX_USART2_UART_Init+0x4c>)
 801d852:	2200      	movs	r2, #0
 801d854:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 801d856:	4805      	ldr	r0, [pc, #20]	; (801d86c <MX_USART2_UART_Init+0x4c>)
 801d858:	f003 fc74 	bl	8021144 <HAL_UART_Init>
 801d85c:	4603      	mov	r3, r0
 801d85e:	2b00      	cmp	r3, #0
 801d860:	d001      	beq.n	801d866 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 801d862:	f7ff fd05 	bl	801d270 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 801d866:	bf00      	nop
 801d868:	bd80      	pop	{r7, pc}
 801d86a:	bf00      	nop
 801d86c:	2000560c 	.word	0x2000560c
 801d870:	40004400 	.word	0x40004400

0801d874 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 801d874:	b580      	push	{r7, lr}
 801d876:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 801d878:	4b11      	ldr	r3, [pc, #68]	; (801d8c0 <MX_USART6_UART_Init+0x4c>)
 801d87a:	4a12      	ldr	r2, [pc, #72]	; (801d8c4 <MX_USART6_UART_Init+0x50>)
 801d87c:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 801d87e:	4b10      	ldr	r3, [pc, #64]	; (801d8c0 <MX_USART6_UART_Init+0x4c>)
 801d880:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 801d884:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 801d886:	4b0e      	ldr	r3, [pc, #56]	; (801d8c0 <MX_USART6_UART_Init+0x4c>)
 801d888:	2200      	movs	r2, #0
 801d88a:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 801d88c:	4b0c      	ldr	r3, [pc, #48]	; (801d8c0 <MX_USART6_UART_Init+0x4c>)
 801d88e:	2200      	movs	r2, #0
 801d890:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 801d892:	4b0b      	ldr	r3, [pc, #44]	; (801d8c0 <MX_USART6_UART_Init+0x4c>)
 801d894:	2200      	movs	r2, #0
 801d896:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 801d898:	4b09      	ldr	r3, [pc, #36]	; (801d8c0 <MX_USART6_UART_Init+0x4c>)
 801d89a:	220c      	movs	r2, #12
 801d89c:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 801d89e:	4b08      	ldr	r3, [pc, #32]	; (801d8c0 <MX_USART6_UART_Init+0x4c>)
 801d8a0:	2200      	movs	r2, #0
 801d8a2:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 801d8a4:	4b06      	ldr	r3, [pc, #24]	; (801d8c0 <MX_USART6_UART_Init+0x4c>)
 801d8a6:	2200      	movs	r2, #0
 801d8a8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 801d8aa:	4805      	ldr	r0, [pc, #20]	; (801d8c0 <MX_USART6_UART_Init+0x4c>)
 801d8ac:	f003 fc4a 	bl	8021144 <HAL_UART_Init>
 801d8b0:	4603      	mov	r3, r0
 801d8b2:	2b00      	cmp	r3, #0
 801d8b4:	d001      	beq.n	801d8ba <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 801d8b6:	f7ff fcdb 	bl	801d270 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 801d8ba:	bf00      	nop
 801d8bc:	bd80      	pop	{r7, pc}
 801d8be:	bf00      	nop
 801d8c0:	200055c8 	.word	0x200055c8
 801d8c4:	40011400 	.word	0x40011400

0801d8c8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 801d8c8:	b580      	push	{r7, lr}
 801d8ca:	b08c      	sub	sp, #48	; 0x30
 801d8cc:	af00      	add	r7, sp, #0
 801d8ce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801d8d0:	f107 031c 	add.w	r3, r7, #28
 801d8d4:	2200      	movs	r2, #0
 801d8d6:	601a      	str	r2, [r3, #0]
 801d8d8:	605a      	str	r2, [r3, #4]
 801d8da:	609a      	str	r2, [r3, #8]
 801d8dc:	60da      	str	r2, [r3, #12]
 801d8de:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 801d8e0:	687b      	ldr	r3, [r7, #4]
 801d8e2:	681b      	ldr	r3, [r3, #0]
 801d8e4:	4a45      	ldr	r2, [pc, #276]	; (801d9fc <HAL_UART_MspInit+0x134>)
 801d8e6:	4293      	cmp	r3, r2
 801d8e8:	d12c      	bne.n	801d944 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 801d8ea:	2300      	movs	r3, #0
 801d8ec:	61bb      	str	r3, [r7, #24]
 801d8ee:	4b44      	ldr	r3, [pc, #272]	; (801da00 <HAL_UART_MspInit+0x138>)
 801d8f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801d8f2:	4a43      	ldr	r2, [pc, #268]	; (801da00 <HAL_UART_MspInit+0x138>)
 801d8f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 801d8f8:	6413      	str	r3, [r2, #64]	; 0x40
 801d8fa:	4b41      	ldr	r3, [pc, #260]	; (801da00 <HAL_UART_MspInit+0x138>)
 801d8fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801d8fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801d902:	61bb      	str	r3, [r7, #24]
 801d904:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 801d906:	2300      	movs	r3, #0
 801d908:	617b      	str	r3, [r7, #20]
 801d90a:	4b3d      	ldr	r3, [pc, #244]	; (801da00 <HAL_UART_MspInit+0x138>)
 801d90c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801d90e:	4a3c      	ldr	r2, [pc, #240]	; (801da00 <HAL_UART_MspInit+0x138>)
 801d910:	f043 0301 	orr.w	r3, r3, #1
 801d914:	6313      	str	r3, [r2, #48]	; 0x30
 801d916:	4b3a      	ldr	r3, [pc, #232]	; (801da00 <HAL_UART_MspInit+0x138>)
 801d918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801d91a:	f003 0301 	and.w	r3, r3, #1
 801d91e:	617b      	str	r3, [r7, #20]
 801d920:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 801d922:	230c      	movs	r3, #12
 801d924:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801d926:	2302      	movs	r3, #2
 801d928:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801d92a:	2300      	movs	r3, #0
 801d92c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801d92e:	2300      	movs	r3, #0
 801d930:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 801d932:	2307      	movs	r3, #7
 801d934:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801d936:	f107 031c 	add.w	r3, r7, #28
 801d93a:	4619      	mov	r1, r3
 801d93c:	4831      	ldr	r0, [pc, #196]	; (801da04 <HAL_UART_MspInit+0x13c>)
 801d93e:	f000 fe3b 	bl	801e5b8 <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 801d942:	e057      	b.n	801d9f4 <HAL_UART_MspInit+0x12c>
  else if(uartHandle->Instance==USART6)
 801d944:	687b      	ldr	r3, [r7, #4]
 801d946:	681b      	ldr	r3, [r3, #0]
 801d948:	4a2f      	ldr	r2, [pc, #188]	; (801da08 <HAL_UART_MspInit+0x140>)
 801d94a:	4293      	cmp	r3, r2
 801d94c:	d152      	bne.n	801d9f4 <HAL_UART_MspInit+0x12c>
    __HAL_RCC_USART6_CLK_ENABLE();
 801d94e:	2300      	movs	r3, #0
 801d950:	613b      	str	r3, [r7, #16]
 801d952:	4b2b      	ldr	r3, [pc, #172]	; (801da00 <HAL_UART_MspInit+0x138>)
 801d954:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801d956:	4a2a      	ldr	r2, [pc, #168]	; (801da00 <HAL_UART_MspInit+0x138>)
 801d958:	f043 0320 	orr.w	r3, r3, #32
 801d95c:	6453      	str	r3, [r2, #68]	; 0x44
 801d95e:	4b28      	ldr	r3, [pc, #160]	; (801da00 <HAL_UART_MspInit+0x138>)
 801d960:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801d962:	f003 0320 	and.w	r3, r3, #32
 801d966:	613b      	str	r3, [r7, #16]
 801d968:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 801d96a:	2300      	movs	r3, #0
 801d96c:	60fb      	str	r3, [r7, #12]
 801d96e:	4b24      	ldr	r3, [pc, #144]	; (801da00 <HAL_UART_MspInit+0x138>)
 801d970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801d972:	4a23      	ldr	r2, [pc, #140]	; (801da00 <HAL_UART_MspInit+0x138>)
 801d974:	f043 0304 	orr.w	r3, r3, #4
 801d978:	6313      	str	r3, [r2, #48]	; 0x30
 801d97a:	4b21      	ldr	r3, [pc, #132]	; (801da00 <HAL_UART_MspInit+0x138>)
 801d97c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801d97e:	f003 0304 	and.w	r3, r3, #4
 801d982:	60fb      	str	r3, [r7, #12]
 801d984:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 801d986:	2300      	movs	r3, #0
 801d988:	60bb      	str	r3, [r7, #8]
 801d98a:	4b1d      	ldr	r3, [pc, #116]	; (801da00 <HAL_UART_MspInit+0x138>)
 801d98c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801d98e:	4a1c      	ldr	r2, [pc, #112]	; (801da00 <HAL_UART_MspInit+0x138>)
 801d990:	f043 0301 	orr.w	r3, r3, #1
 801d994:	6313      	str	r3, [r2, #48]	; 0x30
 801d996:	4b1a      	ldr	r3, [pc, #104]	; (801da00 <HAL_UART_MspInit+0x138>)
 801d998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801d99a:	f003 0301 	and.w	r3, r3, #1
 801d99e:	60bb      	str	r3, [r7, #8]
 801d9a0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 801d9a2:	2340      	movs	r3, #64	; 0x40
 801d9a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801d9a6:	2302      	movs	r3, #2
 801d9a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801d9aa:	2300      	movs	r3, #0
 801d9ac:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 801d9ae:	2301      	movs	r3, #1
 801d9b0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 801d9b2:	2308      	movs	r3, #8
 801d9b4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 801d9b6:	f107 031c 	add.w	r3, r7, #28
 801d9ba:	4619      	mov	r1, r3
 801d9bc:	4813      	ldr	r0, [pc, #76]	; (801da0c <HAL_UART_MspInit+0x144>)
 801d9be:	f000 fdfb 	bl	801e5b8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 801d9c2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801d9c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801d9c8:	2302      	movs	r3, #2
 801d9ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801d9cc:	2300      	movs	r3, #0
 801d9ce:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 801d9d0:	2301      	movs	r3, #1
 801d9d2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 801d9d4:	2308      	movs	r3, #8
 801d9d6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801d9d8:	f107 031c 	add.w	r3, r7, #28
 801d9dc:	4619      	mov	r1, r3
 801d9de:	4809      	ldr	r0, [pc, #36]	; (801da04 <HAL_UART_MspInit+0x13c>)
 801d9e0:	f000 fdea 	bl	801e5b8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 801d9e4:	2200      	movs	r2, #0
 801d9e6:	2100      	movs	r1, #0
 801d9e8:	2047      	movs	r0, #71	; 0x47
 801d9ea:	f000 f9ac 	bl	801dd46 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 801d9ee:	2047      	movs	r0, #71	; 0x47
 801d9f0:	f000 f9c5 	bl	801dd7e <HAL_NVIC_EnableIRQ>
}
 801d9f4:	bf00      	nop
 801d9f6:	3730      	adds	r7, #48	; 0x30
 801d9f8:	46bd      	mov	sp, r7
 801d9fa:	bd80      	pop	{r7, pc}
 801d9fc:	40004400 	.word	0x40004400
 801da00:	40023800 	.word	0x40023800
 801da04:	40020000 	.word	0x40020000
 801da08:	40011400 	.word	0x40011400
 801da0c:	40020800 	.word	0x40020800

0801da10 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 801da10:	f8df d034 	ldr.w	sp, [pc, #52]	; 801da48 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 801da14:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 801da16:	e003      	b.n	801da20 <LoopCopyDataInit>

0801da18 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 801da18:	4b0c      	ldr	r3, [pc, #48]	; (801da4c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 801da1a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 801da1c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 801da1e:	3104      	adds	r1, #4

0801da20 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 801da20:	480b      	ldr	r0, [pc, #44]	; (801da50 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 801da22:	4b0c      	ldr	r3, [pc, #48]	; (801da54 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 801da24:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 801da26:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 801da28:	d3f6      	bcc.n	801da18 <CopyDataInit>
  ldr  r2, =_sbss
 801da2a:	4a0b      	ldr	r2, [pc, #44]	; (801da58 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 801da2c:	e002      	b.n	801da34 <LoopFillZerobss>

0801da2e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 801da2e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 801da30:	f842 3b04 	str.w	r3, [r2], #4

0801da34 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 801da34:	4b09      	ldr	r3, [pc, #36]	; (801da5c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 801da36:	429a      	cmp	r2, r3
  bcc  FillZerobss
 801da38:	d3f9      	bcc.n	801da2e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 801da3a:	f7ff fce7 	bl	801d40c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 801da3e:	f004 fb4f 	bl	80220e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 801da42:	f7ff fa9b 	bl	801cf7c <main>
  bx  lr    
 801da46:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 801da48:	20018000 	.word	0x20018000
  ldr  r3, =_sidata
 801da4c:	0802d318 	.word	0x0802d318
  ldr  r0, =_sdata
 801da50:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 801da54:	20000074 	.word	0x20000074
  ldr  r2, =_sbss
 801da58:	20000074 	.word	0x20000074
  ldr  r3, = _ebss
 801da5c:	20005664 	.word	0x20005664

0801da60 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 801da60:	e7fe      	b.n	801da60 <ADC_IRQHandler>
	...

0801da64 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 801da64:	b580      	push	{r7, lr}
 801da66:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 801da68:	4b0e      	ldr	r3, [pc, #56]	; (801daa4 <HAL_Init+0x40>)
 801da6a:	681b      	ldr	r3, [r3, #0]
 801da6c:	4a0d      	ldr	r2, [pc, #52]	; (801daa4 <HAL_Init+0x40>)
 801da6e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 801da72:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 801da74:	4b0b      	ldr	r3, [pc, #44]	; (801daa4 <HAL_Init+0x40>)
 801da76:	681b      	ldr	r3, [r3, #0]
 801da78:	4a0a      	ldr	r2, [pc, #40]	; (801daa4 <HAL_Init+0x40>)
 801da7a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 801da7e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 801da80:	4b08      	ldr	r3, [pc, #32]	; (801daa4 <HAL_Init+0x40>)
 801da82:	681b      	ldr	r3, [r3, #0]
 801da84:	4a07      	ldr	r2, [pc, #28]	; (801daa4 <HAL_Init+0x40>)
 801da86:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801da8a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 801da8c:	2003      	movs	r0, #3
 801da8e:	f000 f94f 	bl	801dd30 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 801da92:	2000      	movs	r0, #0
 801da94:	f000 f808 	bl	801daa8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 801da98:	f7ff fbf0 	bl	801d27c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 801da9c:	2300      	movs	r3, #0
}
 801da9e:	4618      	mov	r0, r3
 801daa0:	bd80      	pop	{r7, pc}
 801daa2:	bf00      	nop
 801daa4:	40023c00 	.word	0x40023c00

0801daa8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 801daa8:	b580      	push	{r7, lr}
 801daaa:	b082      	sub	sp, #8
 801daac:	af00      	add	r7, sp, #0
 801daae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 801dab0:	4b12      	ldr	r3, [pc, #72]	; (801dafc <HAL_InitTick+0x54>)
 801dab2:	681a      	ldr	r2, [r3, #0]
 801dab4:	4b12      	ldr	r3, [pc, #72]	; (801db00 <HAL_InitTick+0x58>)
 801dab6:	781b      	ldrb	r3, [r3, #0]
 801dab8:	4619      	mov	r1, r3
 801daba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 801dabe:	fbb3 f3f1 	udiv	r3, r3, r1
 801dac2:	fbb2 f3f3 	udiv	r3, r2, r3
 801dac6:	4618      	mov	r0, r3
 801dac8:	f000 f967 	bl	801dd9a <HAL_SYSTICK_Config>
 801dacc:	4603      	mov	r3, r0
 801dace:	2b00      	cmp	r3, #0
 801dad0:	d001      	beq.n	801dad6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 801dad2:	2301      	movs	r3, #1
 801dad4:	e00e      	b.n	801daf4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 801dad6:	687b      	ldr	r3, [r7, #4]
 801dad8:	2b0f      	cmp	r3, #15
 801dada:	d80a      	bhi.n	801daf2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 801dadc:	2200      	movs	r2, #0
 801dade:	6879      	ldr	r1, [r7, #4]
 801dae0:	f04f 30ff 	mov.w	r0, #4294967295
 801dae4:	f000 f92f 	bl	801dd46 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 801dae8:	4a06      	ldr	r2, [pc, #24]	; (801db04 <HAL_InitTick+0x5c>)
 801daea:	687b      	ldr	r3, [r7, #4]
 801daec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 801daee:	2300      	movs	r3, #0
 801daf0:	e000      	b.n	801daf4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 801daf2:	2301      	movs	r3, #1
}
 801daf4:	4618      	mov	r0, r3
 801daf6:	3708      	adds	r7, #8
 801daf8:	46bd      	mov	sp, r7
 801dafa:	bd80      	pop	{r7, pc}
 801dafc:	20000000 	.word	0x20000000
 801db00:	20000008 	.word	0x20000008
 801db04:	20000004 	.word	0x20000004

0801db08 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 801db08:	b480      	push	{r7}
 801db0a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 801db0c:	4b06      	ldr	r3, [pc, #24]	; (801db28 <HAL_IncTick+0x20>)
 801db0e:	781b      	ldrb	r3, [r3, #0]
 801db10:	461a      	mov	r2, r3
 801db12:	4b06      	ldr	r3, [pc, #24]	; (801db2c <HAL_IncTick+0x24>)
 801db14:	681b      	ldr	r3, [r3, #0]
 801db16:	4413      	add	r3, r2
 801db18:	4a04      	ldr	r2, [pc, #16]	; (801db2c <HAL_IncTick+0x24>)
 801db1a:	6013      	str	r3, [r2, #0]
}
 801db1c:	bf00      	nop
 801db1e:	46bd      	mov	sp, r7
 801db20:	f85d 7b04 	ldr.w	r7, [sp], #4
 801db24:	4770      	bx	lr
 801db26:	bf00      	nop
 801db28:	20000008 	.word	0x20000008
 801db2c:	20005650 	.word	0x20005650

0801db30 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 801db30:	b480      	push	{r7}
 801db32:	af00      	add	r7, sp, #0
  return uwTick;
 801db34:	4b03      	ldr	r3, [pc, #12]	; (801db44 <HAL_GetTick+0x14>)
 801db36:	681b      	ldr	r3, [r3, #0]
}
 801db38:	4618      	mov	r0, r3
 801db3a:	46bd      	mov	sp, r7
 801db3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801db40:	4770      	bx	lr
 801db42:	bf00      	nop
 801db44:	20005650 	.word	0x20005650

0801db48 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 801db48:	b580      	push	{r7, lr}
 801db4a:	b084      	sub	sp, #16
 801db4c:	af00      	add	r7, sp, #0
 801db4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 801db50:	f7ff ffee 	bl	801db30 <HAL_GetTick>
 801db54:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 801db56:	687b      	ldr	r3, [r7, #4]
 801db58:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 801db5a:	68fb      	ldr	r3, [r7, #12]
 801db5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 801db60:	d005      	beq.n	801db6e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 801db62:	4b0a      	ldr	r3, [pc, #40]	; (801db8c <HAL_Delay+0x44>)
 801db64:	781b      	ldrb	r3, [r3, #0]
 801db66:	461a      	mov	r2, r3
 801db68:	68fb      	ldr	r3, [r7, #12]
 801db6a:	4413      	add	r3, r2
 801db6c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 801db6e:	bf00      	nop
 801db70:	f7ff ffde 	bl	801db30 <HAL_GetTick>
 801db74:	4602      	mov	r2, r0
 801db76:	68bb      	ldr	r3, [r7, #8]
 801db78:	1ad3      	subs	r3, r2, r3
 801db7a:	68fa      	ldr	r2, [r7, #12]
 801db7c:	429a      	cmp	r2, r3
 801db7e:	d8f7      	bhi.n	801db70 <HAL_Delay+0x28>
  {
  }
}
 801db80:	bf00      	nop
 801db82:	bf00      	nop
 801db84:	3710      	adds	r7, #16
 801db86:	46bd      	mov	sp, r7
 801db88:	bd80      	pop	{r7, pc}
 801db8a:	bf00      	nop
 801db8c:	20000008 	.word	0x20000008

0801db90 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 801db90:	b480      	push	{r7}
 801db92:	b085      	sub	sp, #20
 801db94:	af00      	add	r7, sp, #0
 801db96:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 801db98:	687b      	ldr	r3, [r7, #4]
 801db9a:	f003 0307 	and.w	r3, r3, #7
 801db9e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 801dba0:	4b0c      	ldr	r3, [pc, #48]	; (801dbd4 <__NVIC_SetPriorityGrouping+0x44>)
 801dba2:	68db      	ldr	r3, [r3, #12]
 801dba4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 801dba6:	68ba      	ldr	r2, [r7, #8]
 801dba8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 801dbac:	4013      	ands	r3, r2
 801dbae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 801dbb0:	68fb      	ldr	r3, [r7, #12]
 801dbb2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 801dbb4:	68bb      	ldr	r3, [r7, #8]
 801dbb6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 801dbb8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 801dbbc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 801dbc0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 801dbc2:	4a04      	ldr	r2, [pc, #16]	; (801dbd4 <__NVIC_SetPriorityGrouping+0x44>)
 801dbc4:	68bb      	ldr	r3, [r7, #8]
 801dbc6:	60d3      	str	r3, [r2, #12]
}
 801dbc8:	bf00      	nop
 801dbca:	3714      	adds	r7, #20
 801dbcc:	46bd      	mov	sp, r7
 801dbce:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dbd2:	4770      	bx	lr
 801dbd4:	e000ed00 	.word	0xe000ed00

0801dbd8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 801dbd8:	b480      	push	{r7}
 801dbda:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 801dbdc:	4b04      	ldr	r3, [pc, #16]	; (801dbf0 <__NVIC_GetPriorityGrouping+0x18>)
 801dbde:	68db      	ldr	r3, [r3, #12]
 801dbe0:	0a1b      	lsrs	r3, r3, #8
 801dbe2:	f003 0307 	and.w	r3, r3, #7
}
 801dbe6:	4618      	mov	r0, r3
 801dbe8:	46bd      	mov	sp, r7
 801dbea:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dbee:	4770      	bx	lr
 801dbf0:	e000ed00 	.word	0xe000ed00

0801dbf4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 801dbf4:	b480      	push	{r7}
 801dbf6:	b083      	sub	sp, #12
 801dbf8:	af00      	add	r7, sp, #0
 801dbfa:	4603      	mov	r3, r0
 801dbfc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 801dbfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801dc02:	2b00      	cmp	r3, #0
 801dc04:	db0b      	blt.n	801dc1e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 801dc06:	79fb      	ldrb	r3, [r7, #7]
 801dc08:	f003 021f 	and.w	r2, r3, #31
 801dc0c:	4907      	ldr	r1, [pc, #28]	; (801dc2c <__NVIC_EnableIRQ+0x38>)
 801dc0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801dc12:	095b      	lsrs	r3, r3, #5
 801dc14:	2001      	movs	r0, #1
 801dc16:	fa00 f202 	lsl.w	r2, r0, r2
 801dc1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 801dc1e:	bf00      	nop
 801dc20:	370c      	adds	r7, #12
 801dc22:	46bd      	mov	sp, r7
 801dc24:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dc28:	4770      	bx	lr
 801dc2a:	bf00      	nop
 801dc2c:	e000e100 	.word	0xe000e100

0801dc30 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 801dc30:	b480      	push	{r7}
 801dc32:	b083      	sub	sp, #12
 801dc34:	af00      	add	r7, sp, #0
 801dc36:	4603      	mov	r3, r0
 801dc38:	6039      	str	r1, [r7, #0]
 801dc3a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 801dc3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801dc40:	2b00      	cmp	r3, #0
 801dc42:	db0a      	blt.n	801dc5a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801dc44:	683b      	ldr	r3, [r7, #0]
 801dc46:	b2da      	uxtb	r2, r3
 801dc48:	490c      	ldr	r1, [pc, #48]	; (801dc7c <__NVIC_SetPriority+0x4c>)
 801dc4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801dc4e:	0112      	lsls	r2, r2, #4
 801dc50:	b2d2      	uxtb	r2, r2
 801dc52:	440b      	add	r3, r1
 801dc54:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 801dc58:	e00a      	b.n	801dc70 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801dc5a:	683b      	ldr	r3, [r7, #0]
 801dc5c:	b2da      	uxtb	r2, r3
 801dc5e:	4908      	ldr	r1, [pc, #32]	; (801dc80 <__NVIC_SetPriority+0x50>)
 801dc60:	79fb      	ldrb	r3, [r7, #7]
 801dc62:	f003 030f 	and.w	r3, r3, #15
 801dc66:	3b04      	subs	r3, #4
 801dc68:	0112      	lsls	r2, r2, #4
 801dc6a:	b2d2      	uxtb	r2, r2
 801dc6c:	440b      	add	r3, r1
 801dc6e:	761a      	strb	r2, [r3, #24]
}
 801dc70:	bf00      	nop
 801dc72:	370c      	adds	r7, #12
 801dc74:	46bd      	mov	sp, r7
 801dc76:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dc7a:	4770      	bx	lr
 801dc7c:	e000e100 	.word	0xe000e100
 801dc80:	e000ed00 	.word	0xe000ed00

0801dc84 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 801dc84:	b480      	push	{r7}
 801dc86:	b089      	sub	sp, #36	; 0x24
 801dc88:	af00      	add	r7, sp, #0
 801dc8a:	60f8      	str	r0, [r7, #12]
 801dc8c:	60b9      	str	r1, [r7, #8]
 801dc8e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 801dc90:	68fb      	ldr	r3, [r7, #12]
 801dc92:	f003 0307 	and.w	r3, r3, #7
 801dc96:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 801dc98:	69fb      	ldr	r3, [r7, #28]
 801dc9a:	f1c3 0307 	rsb	r3, r3, #7
 801dc9e:	2b04      	cmp	r3, #4
 801dca0:	bf28      	it	cs
 801dca2:	2304      	movcs	r3, #4
 801dca4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 801dca6:	69fb      	ldr	r3, [r7, #28]
 801dca8:	3304      	adds	r3, #4
 801dcaa:	2b06      	cmp	r3, #6
 801dcac:	d902      	bls.n	801dcb4 <NVIC_EncodePriority+0x30>
 801dcae:	69fb      	ldr	r3, [r7, #28]
 801dcb0:	3b03      	subs	r3, #3
 801dcb2:	e000      	b.n	801dcb6 <NVIC_EncodePriority+0x32>
 801dcb4:	2300      	movs	r3, #0
 801dcb6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 801dcb8:	f04f 32ff 	mov.w	r2, #4294967295
 801dcbc:	69bb      	ldr	r3, [r7, #24]
 801dcbe:	fa02 f303 	lsl.w	r3, r2, r3
 801dcc2:	43da      	mvns	r2, r3
 801dcc4:	68bb      	ldr	r3, [r7, #8]
 801dcc6:	401a      	ands	r2, r3
 801dcc8:	697b      	ldr	r3, [r7, #20]
 801dcca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 801dccc:	f04f 31ff 	mov.w	r1, #4294967295
 801dcd0:	697b      	ldr	r3, [r7, #20]
 801dcd2:	fa01 f303 	lsl.w	r3, r1, r3
 801dcd6:	43d9      	mvns	r1, r3
 801dcd8:	687b      	ldr	r3, [r7, #4]
 801dcda:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 801dcdc:	4313      	orrs	r3, r2
         );
}
 801dcde:	4618      	mov	r0, r3
 801dce0:	3724      	adds	r7, #36	; 0x24
 801dce2:	46bd      	mov	sp, r7
 801dce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dce8:	4770      	bx	lr
	...

0801dcec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 801dcec:	b580      	push	{r7, lr}
 801dcee:	b082      	sub	sp, #8
 801dcf0:	af00      	add	r7, sp, #0
 801dcf2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 801dcf4:	687b      	ldr	r3, [r7, #4]
 801dcf6:	3b01      	subs	r3, #1
 801dcf8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 801dcfc:	d301      	bcc.n	801dd02 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 801dcfe:	2301      	movs	r3, #1
 801dd00:	e00f      	b.n	801dd22 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 801dd02:	4a0a      	ldr	r2, [pc, #40]	; (801dd2c <SysTick_Config+0x40>)
 801dd04:	687b      	ldr	r3, [r7, #4]
 801dd06:	3b01      	subs	r3, #1
 801dd08:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 801dd0a:	210f      	movs	r1, #15
 801dd0c:	f04f 30ff 	mov.w	r0, #4294967295
 801dd10:	f7ff ff8e 	bl	801dc30 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 801dd14:	4b05      	ldr	r3, [pc, #20]	; (801dd2c <SysTick_Config+0x40>)
 801dd16:	2200      	movs	r2, #0
 801dd18:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 801dd1a:	4b04      	ldr	r3, [pc, #16]	; (801dd2c <SysTick_Config+0x40>)
 801dd1c:	2207      	movs	r2, #7
 801dd1e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 801dd20:	2300      	movs	r3, #0
}
 801dd22:	4618      	mov	r0, r3
 801dd24:	3708      	adds	r7, #8
 801dd26:	46bd      	mov	sp, r7
 801dd28:	bd80      	pop	{r7, pc}
 801dd2a:	bf00      	nop
 801dd2c:	e000e010 	.word	0xe000e010

0801dd30 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 801dd30:	b580      	push	{r7, lr}
 801dd32:	b082      	sub	sp, #8
 801dd34:	af00      	add	r7, sp, #0
 801dd36:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 801dd38:	6878      	ldr	r0, [r7, #4]
 801dd3a:	f7ff ff29 	bl	801db90 <__NVIC_SetPriorityGrouping>
}
 801dd3e:	bf00      	nop
 801dd40:	3708      	adds	r7, #8
 801dd42:	46bd      	mov	sp, r7
 801dd44:	bd80      	pop	{r7, pc}

0801dd46 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 801dd46:	b580      	push	{r7, lr}
 801dd48:	b086      	sub	sp, #24
 801dd4a:	af00      	add	r7, sp, #0
 801dd4c:	4603      	mov	r3, r0
 801dd4e:	60b9      	str	r1, [r7, #8]
 801dd50:	607a      	str	r2, [r7, #4]
 801dd52:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 801dd54:	2300      	movs	r3, #0
 801dd56:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 801dd58:	f7ff ff3e 	bl	801dbd8 <__NVIC_GetPriorityGrouping>
 801dd5c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 801dd5e:	687a      	ldr	r2, [r7, #4]
 801dd60:	68b9      	ldr	r1, [r7, #8]
 801dd62:	6978      	ldr	r0, [r7, #20]
 801dd64:	f7ff ff8e 	bl	801dc84 <NVIC_EncodePriority>
 801dd68:	4602      	mov	r2, r0
 801dd6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801dd6e:	4611      	mov	r1, r2
 801dd70:	4618      	mov	r0, r3
 801dd72:	f7ff ff5d 	bl	801dc30 <__NVIC_SetPriority>
}
 801dd76:	bf00      	nop
 801dd78:	3718      	adds	r7, #24
 801dd7a:	46bd      	mov	sp, r7
 801dd7c:	bd80      	pop	{r7, pc}

0801dd7e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 801dd7e:	b580      	push	{r7, lr}
 801dd80:	b082      	sub	sp, #8
 801dd82:	af00      	add	r7, sp, #0
 801dd84:	4603      	mov	r3, r0
 801dd86:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 801dd88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801dd8c:	4618      	mov	r0, r3
 801dd8e:	f7ff ff31 	bl	801dbf4 <__NVIC_EnableIRQ>
}
 801dd92:	bf00      	nop
 801dd94:	3708      	adds	r7, #8
 801dd96:	46bd      	mov	sp, r7
 801dd98:	bd80      	pop	{r7, pc}

0801dd9a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 801dd9a:	b580      	push	{r7, lr}
 801dd9c:	b082      	sub	sp, #8
 801dd9e:	af00      	add	r7, sp, #0
 801dda0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 801dda2:	6878      	ldr	r0, [r7, #4]
 801dda4:	f7ff ffa2 	bl	801dcec <SysTick_Config>
 801dda8:	4603      	mov	r3, r0
}
 801ddaa:	4618      	mov	r0, r3
 801ddac:	3708      	adds	r7, #8
 801ddae:	46bd      	mov	sp, r7
 801ddb0:	bd80      	pop	{r7, pc}
	...

0801ddb4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 801ddb4:	b580      	push	{r7, lr}
 801ddb6:	b086      	sub	sp, #24
 801ddb8:	af00      	add	r7, sp, #0
 801ddba:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 801ddbc:	2300      	movs	r3, #0
 801ddbe:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 801ddc0:	f7ff feb6 	bl	801db30 <HAL_GetTick>
 801ddc4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 801ddc6:	687b      	ldr	r3, [r7, #4]
 801ddc8:	2b00      	cmp	r3, #0
 801ddca:	d101      	bne.n	801ddd0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 801ddcc:	2301      	movs	r3, #1
 801ddce:	e099      	b.n	801df04 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 801ddd0:	687b      	ldr	r3, [r7, #4]
 801ddd2:	2202      	movs	r2, #2
 801ddd4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 801ddd8:	687b      	ldr	r3, [r7, #4]
 801ddda:	2200      	movs	r2, #0
 801dddc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 801dde0:	687b      	ldr	r3, [r7, #4]
 801dde2:	681b      	ldr	r3, [r3, #0]
 801dde4:	681a      	ldr	r2, [r3, #0]
 801dde6:	687b      	ldr	r3, [r7, #4]
 801dde8:	681b      	ldr	r3, [r3, #0]
 801ddea:	f022 0201 	bic.w	r2, r2, #1
 801ddee:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 801ddf0:	e00f      	b.n	801de12 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 801ddf2:	f7ff fe9d 	bl	801db30 <HAL_GetTick>
 801ddf6:	4602      	mov	r2, r0
 801ddf8:	693b      	ldr	r3, [r7, #16]
 801ddfa:	1ad3      	subs	r3, r2, r3
 801ddfc:	2b05      	cmp	r3, #5
 801ddfe:	d908      	bls.n	801de12 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 801de00:	687b      	ldr	r3, [r7, #4]
 801de02:	2220      	movs	r2, #32
 801de04:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 801de06:	687b      	ldr	r3, [r7, #4]
 801de08:	2203      	movs	r2, #3
 801de0a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 801de0e:	2303      	movs	r3, #3
 801de10:	e078      	b.n	801df04 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 801de12:	687b      	ldr	r3, [r7, #4]
 801de14:	681b      	ldr	r3, [r3, #0]
 801de16:	681b      	ldr	r3, [r3, #0]
 801de18:	f003 0301 	and.w	r3, r3, #1
 801de1c:	2b00      	cmp	r3, #0
 801de1e:	d1e8      	bne.n	801ddf2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 801de20:	687b      	ldr	r3, [r7, #4]
 801de22:	681b      	ldr	r3, [r3, #0]
 801de24:	681b      	ldr	r3, [r3, #0]
 801de26:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 801de28:	697a      	ldr	r2, [r7, #20]
 801de2a:	4b38      	ldr	r3, [pc, #224]	; (801df0c <HAL_DMA_Init+0x158>)
 801de2c:	4013      	ands	r3, r2
 801de2e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 801de30:	687b      	ldr	r3, [r7, #4]
 801de32:	685a      	ldr	r2, [r3, #4]
 801de34:	687b      	ldr	r3, [r7, #4]
 801de36:	689b      	ldr	r3, [r3, #8]
 801de38:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 801de3a:	687b      	ldr	r3, [r7, #4]
 801de3c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 801de3e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 801de40:	687b      	ldr	r3, [r7, #4]
 801de42:	691b      	ldr	r3, [r3, #16]
 801de44:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 801de46:	687b      	ldr	r3, [r7, #4]
 801de48:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 801de4a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 801de4c:	687b      	ldr	r3, [r7, #4]
 801de4e:	699b      	ldr	r3, [r3, #24]
 801de50:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 801de52:	687b      	ldr	r3, [r7, #4]
 801de54:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 801de56:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 801de58:	687b      	ldr	r3, [r7, #4]
 801de5a:	6a1b      	ldr	r3, [r3, #32]
 801de5c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 801de5e:	697a      	ldr	r2, [r7, #20]
 801de60:	4313      	orrs	r3, r2
 801de62:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 801de64:	687b      	ldr	r3, [r7, #4]
 801de66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801de68:	2b04      	cmp	r3, #4
 801de6a:	d107      	bne.n	801de7c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 801de6c:	687b      	ldr	r3, [r7, #4]
 801de6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801de70:	687b      	ldr	r3, [r7, #4]
 801de72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801de74:	4313      	orrs	r3, r2
 801de76:	697a      	ldr	r2, [r7, #20]
 801de78:	4313      	orrs	r3, r2
 801de7a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 801de7c:	687b      	ldr	r3, [r7, #4]
 801de7e:	681b      	ldr	r3, [r3, #0]
 801de80:	697a      	ldr	r2, [r7, #20]
 801de82:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 801de84:	687b      	ldr	r3, [r7, #4]
 801de86:	681b      	ldr	r3, [r3, #0]
 801de88:	695b      	ldr	r3, [r3, #20]
 801de8a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 801de8c:	697b      	ldr	r3, [r7, #20]
 801de8e:	f023 0307 	bic.w	r3, r3, #7
 801de92:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 801de94:	687b      	ldr	r3, [r7, #4]
 801de96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801de98:	697a      	ldr	r2, [r7, #20]
 801de9a:	4313      	orrs	r3, r2
 801de9c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 801de9e:	687b      	ldr	r3, [r7, #4]
 801dea0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801dea2:	2b04      	cmp	r3, #4
 801dea4:	d117      	bne.n	801ded6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 801dea6:	687b      	ldr	r3, [r7, #4]
 801dea8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801deaa:	697a      	ldr	r2, [r7, #20]
 801deac:	4313      	orrs	r3, r2
 801deae:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 801deb0:	687b      	ldr	r3, [r7, #4]
 801deb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801deb4:	2b00      	cmp	r3, #0
 801deb6:	d00e      	beq.n	801ded6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 801deb8:	6878      	ldr	r0, [r7, #4]
 801deba:	f000 fb01 	bl	801e4c0 <DMA_CheckFifoParam>
 801debe:	4603      	mov	r3, r0
 801dec0:	2b00      	cmp	r3, #0
 801dec2:	d008      	beq.n	801ded6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 801dec4:	687b      	ldr	r3, [r7, #4]
 801dec6:	2240      	movs	r2, #64	; 0x40
 801dec8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 801deca:	687b      	ldr	r3, [r7, #4]
 801decc:	2201      	movs	r2, #1
 801dece:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 801ded2:	2301      	movs	r3, #1
 801ded4:	e016      	b.n	801df04 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 801ded6:	687b      	ldr	r3, [r7, #4]
 801ded8:	681b      	ldr	r3, [r3, #0]
 801deda:	697a      	ldr	r2, [r7, #20]
 801dedc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 801dede:	6878      	ldr	r0, [r7, #4]
 801dee0:	f000 fab8 	bl	801e454 <DMA_CalcBaseAndBitshift>
 801dee4:	4603      	mov	r3, r0
 801dee6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 801dee8:	687b      	ldr	r3, [r7, #4]
 801deea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801deec:	223f      	movs	r2, #63	; 0x3f
 801deee:	409a      	lsls	r2, r3
 801def0:	68fb      	ldr	r3, [r7, #12]
 801def2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 801def4:	687b      	ldr	r3, [r7, #4]
 801def6:	2200      	movs	r2, #0
 801def8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 801defa:	687b      	ldr	r3, [r7, #4]
 801defc:	2201      	movs	r2, #1
 801defe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 801df02:	2300      	movs	r3, #0
}
 801df04:	4618      	mov	r0, r3
 801df06:	3718      	adds	r7, #24
 801df08:	46bd      	mov	sp, r7
 801df0a:	bd80      	pop	{r7, pc}
 801df0c:	f010803f 	.word	0xf010803f

0801df10 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 801df10:	b580      	push	{r7, lr}
 801df12:	b086      	sub	sp, #24
 801df14:	af00      	add	r7, sp, #0
 801df16:	60f8      	str	r0, [r7, #12]
 801df18:	60b9      	str	r1, [r7, #8]
 801df1a:	607a      	str	r2, [r7, #4]
 801df1c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 801df1e:	2300      	movs	r3, #0
 801df20:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 801df22:	68fb      	ldr	r3, [r7, #12]
 801df24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801df26:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 801df28:	68fb      	ldr	r3, [r7, #12]
 801df2a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801df2e:	2b01      	cmp	r3, #1
 801df30:	d101      	bne.n	801df36 <HAL_DMA_Start_IT+0x26>
 801df32:	2302      	movs	r3, #2
 801df34:	e040      	b.n	801dfb8 <HAL_DMA_Start_IT+0xa8>
 801df36:	68fb      	ldr	r3, [r7, #12]
 801df38:	2201      	movs	r2, #1
 801df3a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 801df3e:	68fb      	ldr	r3, [r7, #12]
 801df40:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 801df44:	b2db      	uxtb	r3, r3
 801df46:	2b01      	cmp	r3, #1
 801df48:	d12f      	bne.n	801dfaa <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 801df4a:	68fb      	ldr	r3, [r7, #12]
 801df4c:	2202      	movs	r2, #2
 801df4e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 801df52:	68fb      	ldr	r3, [r7, #12]
 801df54:	2200      	movs	r2, #0
 801df56:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 801df58:	683b      	ldr	r3, [r7, #0]
 801df5a:	687a      	ldr	r2, [r7, #4]
 801df5c:	68b9      	ldr	r1, [r7, #8]
 801df5e:	68f8      	ldr	r0, [r7, #12]
 801df60:	f000 fa4a 	bl	801e3f8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 801df64:	68fb      	ldr	r3, [r7, #12]
 801df66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801df68:	223f      	movs	r2, #63	; 0x3f
 801df6a:	409a      	lsls	r2, r3
 801df6c:	693b      	ldr	r3, [r7, #16]
 801df6e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 801df70:	68fb      	ldr	r3, [r7, #12]
 801df72:	681b      	ldr	r3, [r3, #0]
 801df74:	681a      	ldr	r2, [r3, #0]
 801df76:	68fb      	ldr	r3, [r7, #12]
 801df78:	681b      	ldr	r3, [r3, #0]
 801df7a:	f042 0216 	orr.w	r2, r2, #22
 801df7e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 801df80:	68fb      	ldr	r3, [r7, #12]
 801df82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801df84:	2b00      	cmp	r3, #0
 801df86:	d007      	beq.n	801df98 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 801df88:	68fb      	ldr	r3, [r7, #12]
 801df8a:	681b      	ldr	r3, [r3, #0]
 801df8c:	681a      	ldr	r2, [r3, #0]
 801df8e:	68fb      	ldr	r3, [r7, #12]
 801df90:	681b      	ldr	r3, [r3, #0]
 801df92:	f042 0208 	orr.w	r2, r2, #8
 801df96:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 801df98:	68fb      	ldr	r3, [r7, #12]
 801df9a:	681b      	ldr	r3, [r3, #0]
 801df9c:	681a      	ldr	r2, [r3, #0]
 801df9e:	68fb      	ldr	r3, [r7, #12]
 801dfa0:	681b      	ldr	r3, [r3, #0]
 801dfa2:	f042 0201 	orr.w	r2, r2, #1
 801dfa6:	601a      	str	r2, [r3, #0]
 801dfa8:	e005      	b.n	801dfb6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 801dfaa:	68fb      	ldr	r3, [r7, #12]
 801dfac:	2200      	movs	r2, #0
 801dfae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 801dfb2:	2302      	movs	r3, #2
 801dfb4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 801dfb6:	7dfb      	ldrb	r3, [r7, #23]
}
 801dfb8:	4618      	mov	r0, r3
 801dfba:	3718      	adds	r7, #24
 801dfbc:	46bd      	mov	sp, r7
 801dfbe:	bd80      	pop	{r7, pc}

0801dfc0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 801dfc0:	b580      	push	{r7, lr}
 801dfc2:	b084      	sub	sp, #16
 801dfc4:	af00      	add	r7, sp, #0
 801dfc6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 801dfc8:	687b      	ldr	r3, [r7, #4]
 801dfca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801dfcc:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 801dfce:	f7ff fdaf 	bl	801db30 <HAL_GetTick>
 801dfd2:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 801dfd4:	687b      	ldr	r3, [r7, #4]
 801dfd6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 801dfda:	b2db      	uxtb	r3, r3
 801dfdc:	2b02      	cmp	r3, #2
 801dfde:	d008      	beq.n	801dff2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 801dfe0:	687b      	ldr	r3, [r7, #4]
 801dfe2:	2280      	movs	r2, #128	; 0x80
 801dfe4:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 801dfe6:	687b      	ldr	r3, [r7, #4]
 801dfe8:	2200      	movs	r2, #0
 801dfea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 801dfee:	2301      	movs	r3, #1
 801dff0:	e052      	b.n	801e098 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 801dff2:	687b      	ldr	r3, [r7, #4]
 801dff4:	681b      	ldr	r3, [r3, #0]
 801dff6:	681a      	ldr	r2, [r3, #0]
 801dff8:	687b      	ldr	r3, [r7, #4]
 801dffa:	681b      	ldr	r3, [r3, #0]
 801dffc:	f022 0216 	bic.w	r2, r2, #22
 801e000:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 801e002:	687b      	ldr	r3, [r7, #4]
 801e004:	681b      	ldr	r3, [r3, #0]
 801e006:	695a      	ldr	r2, [r3, #20]
 801e008:	687b      	ldr	r3, [r7, #4]
 801e00a:	681b      	ldr	r3, [r3, #0]
 801e00c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 801e010:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 801e012:	687b      	ldr	r3, [r7, #4]
 801e014:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801e016:	2b00      	cmp	r3, #0
 801e018:	d103      	bne.n	801e022 <HAL_DMA_Abort+0x62>
 801e01a:	687b      	ldr	r3, [r7, #4]
 801e01c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801e01e:	2b00      	cmp	r3, #0
 801e020:	d007      	beq.n	801e032 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 801e022:	687b      	ldr	r3, [r7, #4]
 801e024:	681b      	ldr	r3, [r3, #0]
 801e026:	681a      	ldr	r2, [r3, #0]
 801e028:	687b      	ldr	r3, [r7, #4]
 801e02a:	681b      	ldr	r3, [r3, #0]
 801e02c:	f022 0208 	bic.w	r2, r2, #8
 801e030:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 801e032:	687b      	ldr	r3, [r7, #4]
 801e034:	681b      	ldr	r3, [r3, #0]
 801e036:	681a      	ldr	r2, [r3, #0]
 801e038:	687b      	ldr	r3, [r7, #4]
 801e03a:	681b      	ldr	r3, [r3, #0]
 801e03c:	f022 0201 	bic.w	r2, r2, #1
 801e040:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 801e042:	e013      	b.n	801e06c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 801e044:	f7ff fd74 	bl	801db30 <HAL_GetTick>
 801e048:	4602      	mov	r2, r0
 801e04a:	68bb      	ldr	r3, [r7, #8]
 801e04c:	1ad3      	subs	r3, r2, r3
 801e04e:	2b05      	cmp	r3, #5
 801e050:	d90c      	bls.n	801e06c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 801e052:	687b      	ldr	r3, [r7, #4]
 801e054:	2220      	movs	r2, #32
 801e056:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 801e058:	687b      	ldr	r3, [r7, #4]
 801e05a:	2203      	movs	r2, #3
 801e05c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 801e060:	687b      	ldr	r3, [r7, #4]
 801e062:	2200      	movs	r2, #0
 801e064:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 801e068:	2303      	movs	r3, #3
 801e06a:	e015      	b.n	801e098 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 801e06c:	687b      	ldr	r3, [r7, #4]
 801e06e:	681b      	ldr	r3, [r3, #0]
 801e070:	681b      	ldr	r3, [r3, #0]
 801e072:	f003 0301 	and.w	r3, r3, #1
 801e076:	2b00      	cmp	r3, #0
 801e078:	d1e4      	bne.n	801e044 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 801e07a:	687b      	ldr	r3, [r7, #4]
 801e07c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801e07e:	223f      	movs	r2, #63	; 0x3f
 801e080:	409a      	lsls	r2, r3
 801e082:	68fb      	ldr	r3, [r7, #12]
 801e084:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 801e086:	687b      	ldr	r3, [r7, #4]
 801e088:	2201      	movs	r2, #1
 801e08a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 801e08e:	687b      	ldr	r3, [r7, #4]
 801e090:	2200      	movs	r2, #0
 801e092:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 801e096:	2300      	movs	r3, #0
}
 801e098:	4618      	mov	r0, r3
 801e09a:	3710      	adds	r7, #16
 801e09c:	46bd      	mov	sp, r7
 801e09e:	bd80      	pop	{r7, pc}

0801e0a0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 801e0a0:	b480      	push	{r7}
 801e0a2:	b083      	sub	sp, #12
 801e0a4:	af00      	add	r7, sp, #0
 801e0a6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 801e0a8:	687b      	ldr	r3, [r7, #4]
 801e0aa:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 801e0ae:	b2db      	uxtb	r3, r3
 801e0b0:	2b02      	cmp	r3, #2
 801e0b2:	d004      	beq.n	801e0be <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 801e0b4:	687b      	ldr	r3, [r7, #4]
 801e0b6:	2280      	movs	r2, #128	; 0x80
 801e0b8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 801e0ba:	2301      	movs	r3, #1
 801e0bc:	e00c      	b.n	801e0d8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 801e0be:	687b      	ldr	r3, [r7, #4]
 801e0c0:	2205      	movs	r2, #5
 801e0c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 801e0c6:	687b      	ldr	r3, [r7, #4]
 801e0c8:	681b      	ldr	r3, [r3, #0]
 801e0ca:	681a      	ldr	r2, [r3, #0]
 801e0cc:	687b      	ldr	r3, [r7, #4]
 801e0ce:	681b      	ldr	r3, [r3, #0]
 801e0d0:	f022 0201 	bic.w	r2, r2, #1
 801e0d4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 801e0d6:	2300      	movs	r3, #0
}
 801e0d8:	4618      	mov	r0, r3
 801e0da:	370c      	adds	r7, #12
 801e0dc:	46bd      	mov	sp, r7
 801e0de:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e0e2:	4770      	bx	lr

0801e0e4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 801e0e4:	b580      	push	{r7, lr}
 801e0e6:	b086      	sub	sp, #24
 801e0e8:	af00      	add	r7, sp, #0
 801e0ea:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 801e0ec:	2300      	movs	r3, #0
 801e0ee:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 801e0f0:	4b92      	ldr	r3, [pc, #584]	; (801e33c <HAL_DMA_IRQHandler+0x258>)
 801e0f2:	681b      	ldr	r3, [r3, #0]
 801e0f4:	4a92      	ldr	r2, [pc, #584]	; (801e340 <HAL_DMA_IRQHandler+0x25c>)
 801e0f6:	fba2 2303 	umull	r2, r3, r2, r3
 801e0fa:	0a9b      	lsrs	r3, r3, #10
 801e0fc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 801e0fe:	687b      	ldr	r3, [r7, #4]
 801e100:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801e102:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 801e104:	693b      	ldr	r3, [r7, #16]
 801e106:	681b      	ldr	r3, [r3, #0]
 801e108:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 801e10a:	687b      	ldr	r3, [r7, #4]
 801e10c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801e10e:	2208      	movs	r2, #8
 801e110:	409a      	lsls	r2, r3
 801e112:	68fb      	ldr	r3, [r7, #12]
 801e114:	4013      	ands	r3, r2
 801e116:	2b00      	cmp	r3, #0
 801e118:	d01a      	beq.n	801e150 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 801e11a:	687b      	ldr	r3, [r7, #4]
 801e11c:	681b      	ldr	r3, [r3, #0]
 801e11e:	681b      	ldr	r3, [r3, #0]
 801e120:	f003 0304 	and.w	r3, r3, #4
 801e124:	2b00      	cmp	r3, #0
 801e126:	d013      	beq.n	801e150 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 801e128:	687b      	ldr	r3, [r7, #4]
 801e12a:	681b      	ldr	r3, [r3, #0]
 801e12c:	681a      	ldr	r2, [r3, #0]
 801e12e:	687b      	ldr	r3, [r7, #4]
 801e130:	681b      	ldr	r3, [r3, #0]
 801e132:	f022 0204 	bic.w	r2, r2, #4
 801e136:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 801e138:	687b      	ldr	r3, [r7, #4]
 801e13a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801e13c:	2208      	movs	r2, #8
 801e13e:	409a      	lsls	r2, r3
 801e140:	693b      	ldr	r3, [r7, #16]
 801e142:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 801e144:	687b      	ldr	r3, [r7, #4]
 801e146:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801e148:	f043 0201 	orr.w	r2, r3, #1
 801e14c:	687b      	ldr	r3, [r7, #4]
 801e14e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 801e150:	687b      	ldr	r3, [r7, #4]
 801e152:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801e154:	2201      	movs	r2, #1
 801e156:	409a      	lsls	r2, r3
 801e158:	68fb      	ldr	r3, [r7, #12]
 801e15a:	4013      	ands	r3, r2
 801e15c:	2b00      	cmp	r3, #0
 801e15e:	d012      	beq.n	801e186 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 801e160:	687b      	ldr	r3, [r7, #4]
 801e162:	681b      	ldr	r3, [r3, #0]
 801e164:	695b      	ldr	r3, [r3, #20]
 801e166:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801e16a:	2b00      	cmp	r3, #0
 801e16c:	d00b      	beq.n	801e186 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 801e16e:	687b      	ldr	r3, [r7, #4]
 801e170:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801e172:	2201      	movs	r2, #1
 801e174:	409a      	lsls	r2, r3
 801e176:	693b      	ldr	r3, [r7, #16]
 801e178:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 801e17a:	687b      	ldr	r3, [r7, #4]
 801e17c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801e17e:	f043 0202 	orr.w	r2, r3, #2
 801e182:	687b      	ldr	r3, [r7, #4]
 801e184:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 801e186:	687b      	ldr	r3, [r7, #4]
 801e188:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801e18a:	2204      	movs	r2, #4
 801e18c:	409a      	lsls	r2, r3
 801e18e:	68fb      	ldr	r3, [r7, #12]
 801e190:	4013      	ands	r3, r2
 801e192:	2b00      	cmp	r3, #0
 801e194:	d012      	beq.n	801e1bc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 801e196:	687b      	ldr	r3, [r7, #4]
 801e198:	681b      	ldr	r3, [r3, #0]
 801e19a:	681b      	ldr	r3, [r3, #0]
 801e19c:	f003 0302 	and.w	r3, r3, #2
 801e1a0:	2b00      	cmp	r3, #0
 801e1a2:	d00b      	beq.n	801e1bc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 801e1a4:	687b      	ldr	r3, [r7, #4]
 801e1a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801e1a8:	2204      	movs	r2, #4
 801e1aa:	409a      	lsls	r2, r3
 801e1ac:	693b      	ldr	r3, [r7, #16]
 801e1ae:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 801e1b0:	687b      	ldr	r3, [r7, #4]
 801e1b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801e1b4:	f043 0204 	orr.w	r2, r3, #4
 801e1b8:	687b      	ldr	r3, [r7, #4]
 801e1ba:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 801e1bc:	687b      	ldr	r3, [r7, #4]
 801e1be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801e1c0:	2210      	movs	r2, #16
 801e1c2:	409a      	lsls	r2, r3
 801e1c4:	68fb      	ldr	r3, [r7, #12]
 801e1c6:	4013      	ands	r3, r2
 801e1c8:	2b00      	cmp	r3, #0
 801e1ca:	d043      	beq.n	801e254 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 801e1cc:	687b      	ldr	r3, [r7, #4]
 801e1ce:	681b      	ldr	r3, [r3, #0]
 801e1d0:	681b      	ldr	r3, [r3, #0]
 801e1d2:	f003 0308 	and.w	r3, r3, #8
 801e1d6:	2b00      	cmp	r3, #0
 801e1d8:	d03c      	beq.n	801e254 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 801e1da:	687b      	ldr	r3, [r7, #4]
 801e1dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801e1de:	2210      	movs	r2, #16
 801e1e0:	409a      	lsls	r2, r3
 801e1e2:	693b      	ldr	r3, [r7, #16]
 801e1e4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 801e1e6:	687b      	ldr	r3, [r7, #4]
 801e1e8:	681b      	ldr	r3, [r3, #0]
 801e1ea:	681b      	ldr	r3, [r3, #0]
 801e1ec:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 801e1f0:	2b00      	cmp	r3, #0
 801e1f2:	d018      	beq.n	801e226 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 801e1f4:	687b      	ldr	r3, [r7, #4]
 801e1f6:	681b      	ldr	r3, [r3, #0]
 801e1f8:	681b      	ldr	r3, [r3, #0]
 801e1fa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 801e1fe:	2b00      	cmp	r3, #0
 801e200:	d108      	bne.n	801e214 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 801e202:	687b      	ldr	r3, [r7, #4]
 801e204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801e206:	2b00      	cmp	r3, #0
 801e208:	d024      	beq.n	801e254 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 801e20a:	687b      	ldr	r3, [r7, #4]
 801e20c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801e20e:	6878      	ldr	r0, [r7, #4]
 801e210:	4798      	blx	r3
 801e212:	e01f      	b.n	801e254 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 801e214:	687b      	ldr	r3, [r7, #4]
 801e216:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801e218:	2b00      	cmp	r3, #0
 801e21a:	d01b      	beq.n	801e254 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 801e21c:	687b      	ldr	r3, [r7, #4]
 801e21e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801e220:	6878      	ldr	r0, [r7, #4]
 801e222:	4798      	blx	r3
 801e224:	e016      	b.n	801e254 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 801e226:	687b      	ldr	r3, [r7, #4]
 801e228:	681b      	ldr	r3, [r3, #0]
 801e22a:	681b      	ldr	r3, [r3, #0]
 801e22c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801e230:	2b00      	cmp	r3, #0
 801e232:	d107      	bne.n	801e244 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 801e234:	687b      	ldr	r3, [r7, #4]
 801e236:	681b      	ldr	r3, [r3, #0]
 801e238:	681a      	ldr	r2, [r3, #0]
 801e23a:	687b      	ldr	r3, [r7, #4]
 801e23c:	681b      	ldr	r3, [r3, #0]
 801e23e:	f022 0208 	bic.w	r2, r2, #8
 801e242:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 801e244:	687b      	ldr	r3, [r7, #4]
 801e246:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801e248:	2b00      	cmp	r3, #0
 801e24a:	d003      	beq.n	801e254 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 801e24c:	687b      	ldr	r3, [r7, #4]
 801e24e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801e250:	6878      	ldr	r0, [r7, #4]
 801e252:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 801e254:	687b      	ldr	r3, [r7, #4]
 801e256:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801e258:	2220      	movs	r2, #32
 801e25a:	409a      	lsls	r2, r3
 801e25c:	68fb      	ldr	r3, [r7, #12]
 801e25e:	4013      	ands	r3, r2
 801e260:	2b00      	cmp	r3, #0
 801e262:	f000 808e 	beq.w	801e382 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 801e266:	687b      	ldr	r3, [r7, #4]
 801e268:	681b      	ldr	r3, [r3, #0]
 801e26a:	681b      	ldr	r3, [r3, #0]
 801e26c:	f003 0310 	and.w	r3, r3, #16
 801e270:	2b00      	cmp	r3, #0
 801e272:	f000 8086 	beq.w	801e382 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 801e276:	687b      	ldr	r3, [r7, #4]
 801e278:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801e27a:	2220      	movs	r2, #32
 801e27c:	409a      	lsls	r2, r3
 801e27e:	693b      	ldr	r3, [r7, #16]
 801e280:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 801e282:	687b      	ldr	r3, [r7, #4]
 801e284:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 801e288:	b2db      	uxtb	r3, r3
 801e28a:	2b05      	cmp	r3, #5
 801e28c:	d136      	bne.n	801e2fc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 801e28e:	687b      	ldr	r3, [r7, #4]
 801e290:	681b      	ldr	r3, [r3, #0]
 801e292:	681a      	ldr	r2, [r3, #0]
 801e294:	687b      	ldr	r3, [r7, #4]
 801e296:	681b      	ldr	r3, [r3, #0]
 801e298:	f022 0216 	bic.w	r2, r2, #22
 801e29c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 801e29e:	687b      	ldr	r3, [r7, #4]
 801e2a0:	681b      	ldr	r3, [r3, #0]
 801e2a2:	695a      	ldr	r2, [r3, #20]
 801e2a4:	687b      	ldr	r3, [r7, #4]
 801e2a6:	681b      	ldr	r3, [r3, #0]
 801e2a8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 801e2ac:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 801e2ae:	687b      	ldr	r3, [r7, #4]
 801e2b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801e2b2:	2b00      	cmp	r3, #0
 801e2b4:	d103      	bne.n	801e2be <HAL_DMA_IRQHandler+0x1da>
 801e2b6:	687b      	ldr	r3, [r7, #4]
 801e2b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801e2ba:	2b00      	cmp	r3, #0
 801e2bc:	d007      	beq.n	801e2ce <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 801e2be:	687b      	ldr	r3, [r7, #4]
 801e2c0:	681b      	ldr	r3, [r3, #0]
 801e2c2:	681a      	ldr	r2, [r3, #0]
 801e2c4:	687b      	ldr	r3, [r7, #4]
 801e2c6:	681b      	ldr	r3, [r3, #0]
 801e2c8:	f022 0208 	bic.w	r2, r2, #8
 801e2cc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 801e2ce:	687b      	ldr	r3, [r7, #4]
 801e2d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801e2d2:	223f      	movs	r2, #63	; 0x3f
 801e2d4:	409a      	lsls	r2, r3
 801e2d6:	693b      	ldr	r3, [r7, #16]
 801e2d8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 801e2da:	687b      	ldr	r3, [r7, #4]
 801e2dc:	2201      	movs	r2, #1
 801e2de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 801e2e2:	687b      	ldr	r3, [r7, #4]
 801e2e4:	2200      	movs	r2, #0
 801e2e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 801e2ea:	687b      	ldr	r3, [r7, #4]
 801e2ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801e2ee:	2b00      	cmp	r3, #0
 801e2f0:	d07d      	beq.n	801e3ee <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 801e2f2:	687b      	ldr	r3, [r7, #4]
 801e2f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801e2f6:	6878      	ldr	r0, [r7, #4]
 801e2f8:	4798      	blx	r3
        }
        return;
 801e2fa:	e078      	b.n	801e3ee <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 801e2fc:	687b      	ldr	r3, [r7, #4]
 801e2fe:	681b      	ldr	r3, [r3, #0]
 801e300:	681b      	ldr	r3, [r3, #0]
 801e302:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 801e306:	2b00      	cmp	r3, #0
 801e308:	d01c      	beq.n	801e344 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 801e30a:	687b      	ldr	r3, [r7, #4]
 801e30c:	681b      	ldr	r3, [r3, #0]
 801e30e:	681b      	ldr	r3, [r3, #0]
 801e310:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 801e314:	2b00      	cmp	r3, #0
 801e316:	d108      	bne.n	801e32a <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 801e318:	687b      	ldr	r3, [r7, #4]
 801e31a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801e31c:	2b00      	cmp	r3, #0
 801e31e:	d030      	beq.n	801e382 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 801e320:	687b      	ldr	r3, [r7, #4]
 801e322:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801e324:	6878      	ldr	r0, [r7, #4]
 801e326:	4798      	blx	r3
 801e328:	e02b      	b.n	801e382 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 801e32a:	687b      	ldr	r3, [r7, #4]
 801e32c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801e32e:	2b00      	cmp	r3, #0
 801e330:	d027      	beq.n	801e382 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 801e332:	687b      	ldr	r3, [r7, #4]
 801e334:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801e336:	6878      	ldr	r0, [r7, #4]
 801e338:	4798      	blx	r3
 801e33a:	e022      	b.n	801e382 <HAL_DMA_IRQHandler+0x29e>
 801e33c:	20000000 	.word	0x20000000
 801e340:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 801e344:	687b      	ldr	r3, [r7, #4]
 801e346:	681b      	ldr	r3, [r3, #0]
 801e348:	681b      	ldr	r3, [r3, #0]
 801e34a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801e34e:	2b00      	cmp	r3, #0
 801e350:	d10f      	bne.n	801e372 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 801e352:	687b      	ldr	r3, [r7, #4]
 801e354:	681b      	ldr	r3, [r3, #0]
 801e356:	681a      	ldr	r2, [r3, #0]
 801e358:	687b      	ldr	r3, [r7, #4]
 801e35a:	681b      	ldr	r3, [r3, #0]
 801e35c:	f022 0210 	bic.w	r2, r2, #16
 801e360:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 801e362:	687b      	ldr	r3, [r7, #4]
 801e364:	2201      	movs	r2, #1
 801e366:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 801e36a:	687b      	ldr	r3, [r7, #4]
 801e36c:	2200      	movs	r2, #0
 801e36e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 801e372:	687b      	ldr	r3, [r7, #4]
 801e374:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801e376:	2b00      	cmp	r3, #0
 801e378:	d003      	beq.n	801e382 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 801e37a:	687b      	ldr	r3, [r7, #4]
 801e37c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801e37e:	6878      	ldr	r0, [r7, #4]
 801e380:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 801e382:	687b      	ldr	r3, [r7, #4]
 801e384:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801e386:	2b00      	cmp	r3, #0
 801e388:	d032      	beq.n	801e3f0 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 801e38a:	687b      	ldr	r3, [r7, #4]
 801e38c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801e38e:	f003 0301 	and.w	r3, r3, #1
 801e392:	2b00      	cmp	r3, #0
 801e394:	d022      	beq.n	801e3dc <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 801e396:	687b      	ldr	r3, [r7, #4]
 801e398:	2205      	movs	r2, #5
 801e39a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 801e39e:	687b      	ldr	r3, [r7, #4]
 801e3a0:	681b      	ldr	r3, [r3, #0]
 801e3a2:	681a      	ldr	r2, [r3, #0]
 801e3a4:	687b      	ldr	r3, [r7, #4]
 801e3a6:	681b      	ldr	r3, [r3, #0]
 801e3a8:	f022 0201 	bic.w	r2, r2, #1
 801e3ac:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 801e3ae:	68bb      	ldr	r3, [r7, #8]
 801e3b0:	3301      	adds	r3, #1
 801e3b2:	60bb      	str	r3, [r7, #8]
 801e3b4:	697a      	ldr	r2, [r7, #20]
 801e3b6:	429a      	cmp	r2, r3
 801e3b8:	d307      	bcc.n	801e3ca <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 801e3ba:	687b      	ldr	r3, [r7, #4]
 801e3bc:	681b      	ldr	r3, [r3, #0]
 801e3be:	681b      	ldr	r3, [r3, #0]
 801e3c0:	f003 0301 	and.w	r3, r3, #1
 801e3c4:	2b00      	cmp	r3, #0
 801e3c6:	d1f2      	bne.n	801e3ae <HAL_DMA_IRQHandler+0x2ca>
 801e3c8:	e000      	b.n	801e3cc <HAL_DMA_IRQHandler+0x2e8>
          break;
 801e3ca:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 801e3cc:	687b      	ldr	r3, [r7, #4]
 801e3ce:	2201      	movs	r2, #1
 801e3d0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 801e3d4:	687b      	ldr	r3, [r7, #4]
 801e3d6:	2200      	movs	r2, #0
 801e3d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 801e3dc:	687b      	ldr	r3, [r7, #4]
 801e3de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801e3e0:	2b00      	cmp	r3, #0
 801e3e2:	d005      	beq.n	801e3f0 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 801e3e4:	687b      	ldr	r3, [r7, #4]
 801e3e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801e3e8:	6878      	ldr	r0, [r7, #4]
 801e3ea:	4798      	blx	r3
 801e3ec:	e000      	b.n	801e3f0 <HAL_DMA_IRQHandler+0x30c>
        return;
 801e3ee:	bf00      	nop
    }
  }
}
 801e3f0:	3718      	adds	r7, #24
 801e3f2:	46bd      	mov	sp, r7
 801e3f4:	bd80      	pop	{r7, pc}
 801e3f6:	bf00      	nop

0801e3f8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 801e3f8:	b480      	push	{r7}
 801e3fa:	b085      	sub	sp, #20
 801e3fc:	af00      	add	r7, sp, #0
 801e3fe:	60f8      	str	r0, [r7, #12]
 801e400:	60b9      	str	r1, [r7, #8]
 801e402:	607a      	str	r2, [r7, #4]
 801e404:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 801e406:	68fb      	ldr	r3, [r7, #12]
 801e408:	681b      	ldr	r3, [r3, #0]
 801e40a:	681a      	ldr	r2, [r3, #0]
 801e40c:	68fb      	ldr	r3, [r7, #12]
 801e40e:	681b      	ldr	r3, [r3, #0]
 801e410:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 801e414:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 801e416:	68fb      	ldr	r3, [r7, #12]
 801e418:	681b      	ldr	r3, [r3, #0]
 801e41a:	683a      	ldr	r2, [r7, #0]
 801e41c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 801e41e:	68fb      	ldr	r3, [r7, #12]
 801e420:	689b      	ldr	r3, [r3, #8]
 801e422:	2b40      	cmp	r3, #64	; 0x40
 801e424:	d108      	bne.n	801e438 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 801e426:	68fb      	ldr	r3, [r7, #12]
 801e428:	681b      	ldr	r3, [r3, #0]
 801e42a:	687a      	ldr	r2, [r7, #4]
 801e42c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 801e42e:	68fb      	ldr	r3, [r7, #12]
 801e430:	681b      	ldr	r3, [r3, #0]
 801e432:	68ba      	ldr	r2, [r7, #8]
 801e434:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 801e436:	e007      	b.n	801e448 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 801e438:	68fb      	ldr	r3, [r7, #12]
 801e43a:	681b      	ldr	r3, [r3, #0]
 801e43c:	68ba      	ldr	r2, [r7, #8]
 801e43e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 801e440:	68fb      	ldr	r3, [r7, #12]
 801e442:	681b      	ldr	r3, [r3, #0]
 801e444:	687a      	ldr	r2, [r7, #4]
 801e446:	60da      	str	r2, [r3, #12]
}
 801e448:	bf00      	nop
 801e44a:	3714      	adds	r7, #20
 801e44c:	46bd      	mov	sp, r7
 801e44e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e452:	4770      	bx	lr

0801e454 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 801e454:	b480      	push	{r7}
 801e456:	b085      	sub	sp, #20
 801e458:	af00      	add	r7, sp, #0
 801e45a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 801e45c:	687b      	ldr	r3, [r7, #4]
 801e45e:	681b      	ldr	r3, [r3, #0]
 801e460:	b2db      	uxtb	r3, r3
 801e462:	3b10      	subs	r3, #16
 801e464:	4a14      	ldr	r2, [pc, #80]	; (801e4b8 <DMA_CalcBaseAndBitshift+0x64>)
 801e466:	fba2 2303 	umull	r2, r3, r2, r3
 801e46a:	091b      	lsrs	r3, r3, #4
 801e46c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 801e46e:	4a13      	ldr	r2, [pc, #76]	; (801e4bc <DMA_CalcBaseAndBitshift+0x68>)
 801e470:	68fb      	ldr	r3, [r7, #12]
 801e472:	4413      	add	r3, r2
 801e474:	781b      	ldrb	r3, [r3, #0]
 801e476:	461a      	mov	r2, r3
 801e478:	687b      	ldr	r3, [r7, #4]
 801e47a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 801e47c:	68fb      	ldr	r3, [r7, #12]
 801e47e:	2b03      	cmp	r3, #3
 801e480:	d909      	bls.n	801e496 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 801e482:	687b      	ldr	r3, [r7, #4]
 801e484:	681b      	ldr	r3, [r3, #0]
 801e486:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 801e48a:	f023 0303 	bic.w	r3, r3, #3
 801e48e:	1d1a      	adds	r2, r3, #4
 801e490:	687b      	ldr	r3, [r7, #4]
 801e492:	659a      	str	r2, [r3, #88]	; 0x58
 801e494:	e007      	b.n	801e4a6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 801e496:	687b      	ldr	r3, [r7, #4]
 801e498:	681b      	ldr	r3, [r3, #0]
 801e49a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 801e49e:	f023 0303 	bic.w	r3, r3, #3
 801e4a2:	687a      	ldr	r2, [r7, #4]
 801e4a4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 801e4a6:	687b      	ldr	r3, [r7, #4]
 801e4a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 801e4aa:	4618      	mov	r0, r3
 801e4ac:	3714      	adds	r7, #20
 801e4ae:	46bd      	mov	sp, r7
 801e4b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e4b4:	4770      	bx	lr
 801e4b6:	bf00      	nop
 801e4b8:	aaaaaaab 	.word	0xaaaaaaab
 801e4bc:	0802d22c 	.word	0x0802d22c

0801e4c0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 801e4c0:	b480      	push	{r7}
 801e4c2:	b085      	sub	sp, #20
 801e4c4:	af00      	add	r7, sp, #0
 801e4c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 801e4c8:	2300      	movs	r3, #0
 801e4ca:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 801e4cc:	687b      	ldr	r3, [r7, #4]
 801e4ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801e4d0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 801e4d2:	687b      	ldr	r3, [r7, #4]
 801e4d4:	699b      	ldr	r3, [r3, #24]
 801e4d6:	2b00      	cmp	r3, #0
 801e4d8:	d11f      	bne.n	801e51a <DMA_CheckFifoParam+0x5a>
 801e4da:	68bb      	ldr	r3, [r7, #8]
 801e4dc:	2b03      	cmp	r3, #3
 801e4de:	d856      	bhi.n	801e58e <DMA_CheckFifoParam+0xce>
 801e4e0:	a201      	add	r2, pc, #4	; (adr r2, 801e4e8 <DMA_CheckFifoParam+0x28>)
 801e4e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801e4e6:	bf00      	nop
 801e4e8:	0801e4f9 	.word	0x0801e4f9
 801e4ec:	0801e50b 	.word	0x0801e50b
 801e4f0:	0801e4f9 	.word	0x0801e4f9
 801e4f4:	0801e58f 	.word	0x0801e58f
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 801e4f8:	687b      	ldr	r3, [r7, #4]
 801e4fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801e4fc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 801e500:	2b00      	cmp	r3, #0
 801e502:	d046      	beq.n	801e592 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 801e504:	2301      	movs	r3, #1
 801e506:	73fb      	strb	r3, [r7, #15]
      }
      break;
 801e508:	e043      	b.n	801e592 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 801e50a:	687b      	ldr	r3, [r7, #4]
 801e50c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801e50e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 801e512:	d140      	bne.n	801e596 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 801e514:	2301      	movs	r3, #1
 801e516:	73fb      	strb	r3, [r7, #15]
      }
      break;
 801e518:	e03d      	b.n	801e596 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 801e51a:	687b      	ldr	r3, [r7, #4]
 801e51c:	699b      	ldr	r3, [r3, #24]
 801e51e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801e522:	d121      	bne.n	801e568 <DMA_CheckFifoParam+0xa8>
 801e524:	68bb      	ldr	r3, [r7, #8]
 801e526:	2b03      	cmp	r3, #3
 801e528:	d837      	bhi.n	801e59a <DMA_CheckFifoParam+0xda>
 801e52a:	a201      	add	r2, pc, #4	; (adr r2, 801e530 <DMA_CheckFifoParam+0x70>)
 801e52c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801e530:	0801e541 	.word	0x0801e541
 801e534:	0801e547 	.word	0x0801e547
 801e538:	0801e541 	.word	0x0801e541
 801e53c:	0801e559 	.word	0x0801e559
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 801e540:	2301      	movs	r3, #1
 801e542:	73fb      	strb	r3, [r7, #15]
      break;
 801e544:	e030      	b.n	801e5a8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 801e546:	687b      	ldr	r3, [r7, #4]
 801e548:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801e54a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 801e54e:	2b00      	cmp	r3, #0
 801e550:	d025      	beq.n	801e59e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 801e552:	2301      	movs	r3, #1
 801e554:	73fb      	strb	r3, [r7, #15]
      }
      break;
 801e556:	e022      	b.n	801e59e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 801e558:	687b      	ldr	r3, [r7, #4]
 801e55a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801e55c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 801e560:	d11f      	bne.n	801e5a2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 801e562:	2301      	movs	r3, #1
 801e564:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 801e566:	e01c      	b.n	801e5a2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 801e568:	68bb      	ldr	r3, [r7, #8]
 801e56a:	2b02      	cmp	r3, #2
 801e56c:	d903      	bls.n	801e576 <DMA_CheckFifoParam+0xb6>
 801e56e:	68bb      	ldr	r3, [r7, #8]
 801e570:	2b03      	cmp	r3, #3
 801e572:	d003      	beq.n	801e57c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 801e574:	e018      	b.n	801e5a8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 801e576:	2301      	movs	r3, #1
 801e578:	73fb      	strb	r3, [r7, #15]
      break;
 801e57a:	e015      	b.n	801e5a8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 801e57c:	687b      	ldr	r3, [r7, #4]
 801e57e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801e580:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 801e584:	2b00      	cmp	r3, #0
 801e586:	d00e      	beq.n	801e5a6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 801e588:	2301      	movs	r3, #1
 801e58a:	73fb      	strb	r3, [r7, #15]
      break;
 801e58c:	e00b      	b.n	801e5a6 <DMA_CheckFifoParam+0xe6>
      break;
 801e58e:	bf00      	nop
 801e590:	e00a      	b.n	801e5a8 <DMA_CheckFifoParam+0xe8>
      break;
 801e592:	bf00      	nop
 801e594:	e008      	b.n	801e5a8 <DMA_CheckFifoParam+0xe8>
      break;
 801e596:	bf00      	nop
 801e598:	e006      	b.n	801e5a8 <DMA_CheckFifoParam+0xe8>
      break;
 801e59a:	bf00      	nop
 801e59c:	e004      	b.n	801e5a8 <DMA_CheckFifoParam+0xe8>
      break;
 801e59e:	bf00      	nop
 801e5a0:	e002      	b.n	801e5a8 <DMA_CheckFifoParam+0xe8>
      break;   
 801e5a2:	bf00      	nop
 801e5a4:	e000      	b.n	801e5a8 <DMA_CheckFifoParam+0xe8>
      break;
 801e5a6:	bf00      	nop
    }
  } 
  
  return status; 
 801e5a8:	7bfb      	ldrb	r3, [r7, #15]
}
 801e5aa:	4618      	mov	r0, r3
 801e5ac:	3714      	adds	r7, #20
 801e5ae:	46bd      	mov	sp, r7
 801e5b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e5b4:	4770      	bx	lr
 801e5b6:	bf00      	nop

0801e5b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 801e5b8:	b480      	push	{r7}
 801e5ba:	b089      	sub	sp, #36	; 0x24
 801e5bc:	af00      	add	r7, sp, #0
 801e5be:	6078      	str	r0, [r7, #4]
 801e5c0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 801e5c2:	2300      	movs	r3, #0
 801e5c4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 801e5c6:	2300      	movs	r3, #0
 801e5c8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 801e5ca:	2300      	movs	r3, #0
 801e5cc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 801e5ce:	2300      	movs	r3, #0
 801e5d0:	61fb      	str	r3, [r7, #28]
 801e5d2:	e159      	b.n	801e888 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 801e5d4:	2201      	movs	r2, #1
 801e5d6:	69fb      	ldr	r3, [r7, #28]
 801e5d8:	fa02 f303 	lsl.w	r3, r2, r3
 801e5dc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 801e5de:	683b      	ldr	r3, [r7, #0]
 801e5e0:	681b      	ldr	r3, [r3, #0]
 801e5e2:	697a      	ldr	r2, [r7, #20]
 801e5e4:	4013      	ands	r3, r2
 801e5e6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 801e5e8:	693a      	ldr	r2, [r7, #16]
 801e5ea:	697b      	ldr	r3, [r7, #20]
 801e5ec:	429a      	cmp	r2, r3
 801e5ee:	f040 8148 	bne.w	801e882 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 801e5f2:	683b      	ldr	r3, [r7, #0]
 801e5f4:	685b      	ldr	r3, [r3, #4]
 801e5f6:	f003 0303 	and.w	r3, r3, #3
 801e5fa:	2b01      	cmp	r3, #1
 801e5fc:	d005      	beq.n	801e60a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 801e5fe:	683b      	ldr	r3, [r7, #0]
 801e600:	685b      	ldr	r3, [r3, #4]
 801e602:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 801e606:	2b02      	cmp	r3, #2
 801e608:	d130      	bne.n	801e66c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 801e60a:	687b      	ldr	r3, [r7, #4]
 801e60c:	689b      	ldr	r3, [r3, #8]
 801e60e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 801e610:	69fb      	ldr	r3, [r7, #28]
 801e612:	005b      	lsls	r3, r3, #1
 801e614:	2203      	movs	r2, #3
 801e616:	fa02 f303 	lsl.w	r3, r2, r3
 801e61a:	43db      	mvns	r3, r3
 801e61c:	69ba      	ldr	r2, [r7, #24]
 801e61e:	4013      	ands	r3, r2
 801e620:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 801e622:	683b      	ldr	r3, [r7, #0]
 801e624:	68da      	ldr	r2, [r3, #12]
 801e626:	69fb      	ldr	r3, [r7, #28]
 801e628:	005b      	lsls	r3, r3, #1
 801e62a:	fa02 f303 	lsl.w	r3, r2, r3
 801e62e:	69ba      	ldr	r2, [r7, #24]
 801e630:	4313      	orrs	r3, r2
 801e632:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 801e634:	687b      	ldr	r3, [r7, #4]
 801e636:	69ba      	ldr	r2, [r7, #24]
 801e638:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 801e63a:	687b      	ldr	r3, [r7, #4]
 801e63c:	685b      	ldr	r3, [r3, #4]
 801e63e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 801e640:	2201      	movs	r2, #1
 801e642:	69fb      	ldr	r3, [r7, #28]
 801e644:	fa02 f303 	lsl.w	r3, r2, r3
 801e648:	43db      	mvns	r3, r3
 801e64a:	69ba      	ldr	r2, [r7, #24]
 801e64c:	4013      	ands	r3, r2
 801e64e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 801e650:	683b      	ldr	r3, [r7, #0]
 801e652:	685b      	ldr	r3, [r3, #4]
 801e654:	091b      	lsrs	r3, r3, #4
 801e656:	f003 0201 	and.w	r2, r3, #1
 801e65a:	69fb      	ldr	r3, [r7, #28]
 801e65c:	fa02 f303 	lsl.w	r3, r2, r3
 801e660:	69ba      	ldr	r2, [r7, #24]
 801e662:	4313      	orrs	r3, r2
 801e664:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 801e666:	687b      	ldr	r3, [r7, #4]
 801e668:	69ba      	ldr	r2, [r7, #24]
 801e66a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 801e66c:	683b      	ldr	r3, [r7, #0]
 801e66e:	685b      	ldr	r3, [r3, #4]
 801e670:	f003 0303 	and.w	r3, r3, #3
 801e674:	2b03      	cmp	r3, #3
 801e676:	d017      	beq.n	801e6a8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 801e678:	687b      	ldr	r3, [r7, #4]
 801e67a:	68db      	ldr	r3, [r3, #12]
 801e67c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 801e67e:	69fb      	ldr	r3, [r7, #28]
 801e680:	005b      	lsls	r3, r3, #1
 801e682:	2203      	movs	r2, #3
 801e684:	fa02 f303 	lsl.w	r3, r2, r3
 801e688:	43db      	mvns	r3, r3
 801e68a:	69ba      	ldr	r2, [r7, #24]
 801e68c:	4013      	ands	r3, r2
 801e68e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 801e690:	683b      	ldr	r3, [r7, #0]
 801e692:	689a      	ldr	r2, [r3, #8]
 801e694:	69fb      	ldr	r3, [r7, #28]
 801e696:	005b      	lsls	r3, r3, #1
 801e698:	fa02 f303 	lsl.w	r3, r2, r3
 801e69c:	69ba      	ldr	r2, [r7, #24]
 801e69e:	4313      	orrs	r3, r2
 801e6a0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 801e6a2:	687b      	ldr	r3, [r7, #4]
 801e6a4:	69ba      	ldr	r2, [r7, #24]
 801e6a6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 801e6a8:	683b      	ldr	r3, [r7, #0]
 801e6aa:	685b      	ldr	r3, [r3, #4]
 801e6ac:	f003 0303 	and.w	r3, r3, #3
 801e6b0:	2b02      	cmp	r3, #2
 801e6b2:	d123      	bne.n	801e6fc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 801e6b4:	69fb      	ldr	r3, [r7, #28]
 801e6b6:	08da      	lsrs	r2, r3, #3
 801e6b8:	687b      	ldr	r3, [r7, #4]
 801e6ba:	3208      	adds	r2, #8
 801e6bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801e6c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 801e6c2:	69fb      	ldr	r3, [r7, #28]
 801e6c4:	f003 0307 	and.w	r3, r3, #7
 801e6c8:	009b      	lsls	r3, r3, #2
 801e6ca:	220f      	movs	r2, #15
 801e6cc:	fa02 f303 	lsl.w	r3, r2, r3
 801e6d0:	43db      	mvns	r3, r3
 801e6d2:	69ba      	ldr	r2, [r7, #24]
 801e6d4:	4013      	ands	r3, r2
 801e6d6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 801e6d8:	683b      	ldr	r3, [r7, #0]
 801e6da:	691a      	ldr	r2, [r3, #16]
 801e6dc:	69fb      	ldr	r3, [r7, #28]
 801e6de:	f003 0307 	and.w	r3, r3, #7
 801e6e2:	009b      	lsls	r3, r3, #2
 801e6e4:	fa02 f303 	lsl.w	r3, r2, r3
 801e6e8:	69ba      	ldr	r2, [r7, #24]
 801e6ea:	4313      	orrs	r3, r2
 801e6ec:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 801e6ee:	69fb      	ldr	r3, [r7, #28]
 801e6f0:	08da      	lsrs	r2, r3, #3
 801e6f2:	687b      	ldr	r3, [r7, #4]
 801e6f4:	3208      	adds	r2, #8
 801e6f6:	69b9      	ldr	r1, [r7, #24]
 801e6f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 801e6fc:	687b      	ldr	r3, [r7, #4]
 801e6fe:	681b      	ldr	r3, [r3, #0]
 801e700:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 801e702:	69fb      	ldr	r3, [r7, #28]
 801e704:	005b      	lsls	r3, r3, #1
 801e706:	2203      	movs	r2, #3
 801e708:	fa02 f303 	lsl.w	r3, r2, r3
 801e70c:	43db      	mvns	r3, r3
 801e70e:	69ba      	ldr	r2, [r7, #24]
 801e710:	4013      	ands	r3, r2
 801e712:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 801e714:	683b      	ldr	r3, [r7, #0]
 801e716:	685b      	ldr	r3, [r3, #4]
 801e718:	f003 0203 	and.w	r2, r3, #3
 801e71c:	69fb      	ldr	r3, [r7, #28]
 801e71e:	005b      	lsls	r3, r3, #1
 801e720:	fa02 f303 	lsl.w	r3, r2, r3
 801e724:	69ba      	ldr	r2, [r7, #24]
 801e726:	4313      	orrs	r3, r2
 801e728:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 801e72a:	687b      	ldr	r3, [r7, #4]
 801e72c:	69ba      	ldr	r2, [r7, #24]
 801e72e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 801e730:	683b      	ldr	r3, [r7, #0]
 801e732:	685b      	ldr	r3, [r3, #4]
 801e734:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 801e738:	2b00      	cmp	r3, #0
 801e73a:	f000 80a2 	beq.w	801e882 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 801e73e:	2300      	movs	r3, #0
 801e740:	60fb      	str	r3, [r7, #12]
 801e742:	4b57      	ldr	r3, [pc, #348]	; (801e8a0 <HAL_GPIO_Init+0x2e8>)
 801e744:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801e746:	4a56      	ldr	r2, [pc, #344]	; (801e8a0 <HAL_GPIO_Init+0x2e8>)
 801e748:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 801e74c:	6453      	str	r3, [r2, #68]	; 0x44
 801e74e:	4b54      	ldr	r3, [pc, #336]	; (801e8a0 <HAL_GPIO_Init+0x2e8>)
 801e750:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801e752:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801e756:	60fb      	str	r3, [r7, #12]
 801e758:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 801e75a:	4a52      	ldr	r2, [pc, #328]	; (801e8a4 <HAL_GPIO_Init+0x2ec>)
 801e75c:	69fb      	ldr	r3, [r7, #28]
 801e75e:	089b      	lsrs	r3, r3, #2
 801e760:	3302      	adds	r3, #2
 801e762:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801e766:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 801e768:	69fb      	ldr	r3, [r7, #28]
 801e76a:	f003 0303 	and.w	r3, r3, #3
 801e76e:	009b      	lsls	r3, r3, #2
 801e770:	220f      	movs	r2, #15
 801e772:	fa02 f303 	lsl.w	r3, r2, r3
 801e776:	43db      	mvns	r3, r3
 801e778:	69ba      	ldr	r2, [r7, #24]
 801e77a:	4013      	ands	r3, r2
 801e77c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 801e77e:	687b      	ldr	r3, [r7, #4]
 801e780:	4a49      	ldr	r2, [pc, #292]	; (801e8a8 <HAL_GPIO_Init+0x2f0>)
 801e782:	4293      	cmp	r3, r2
 801e784:	d019      	beq.n	801e7ba <HAL_GPIO_Init+0x202>
 801e786:	687b      	ldr	r3, [r7, #4]
 801e788:	4a48      	ldr	r2, [pc, #288]	; (801e8ac <HAL_GPIO_Init+0x2f4>)
 801e78a:	4293      	cmp	r3, r2
 801e78c:	d013      	beq.n	801e7b6 <HAL_GPIO_Init+0x1fe>
 801e78e:	687b      	ldr	r3, [r7, #4]
 801e790:	4a47      	ldr	r2, [pc, #284]	; (801e8b0 <HAL_GPIO_Init+0x2f8>)
 801e792:	4293      	cmp	r3, r2
 801e794:	d00d      	beq.n	801e7b2 <HAL_GPIO_Init+0x1fa>
 801e796:	687b      	ldr	r3, [r7, #4]
 801e798:	4a46      	ldr	r2, [pc, #280]	; (801e8b4 <HAL_GPIO_Init+0x2fc>)
 801e79a:	4293      	cmp	r3, r2
 801e79c:	d007      	beq.n	801e7ae <HAL_GPIO_Init+0x1f6>
 801e79e:	687b      	ldr	r3, [r7, #4]
 801e7a0:	4a45      	ldr	r2, [pc, #276]	; (801e8b8 <HAL_GPIO_Init+0x300>)
 801e7a2:	4293      	cmp	r3, r2
 801e7a4:	d101      	bne.n	801e7aa <HAL_GPIO_Init+0x1f2>
 801e7a6:	2304      	movs	r3, #4
 801e7a8:	e008      	b.n	801e7bc <HAL_GPIO_Init+0x204>
 801e7aa:	2307      	movs	r3, #7
 801e7ac:	e006      	b.n	801e7bc <HAL_GPIO_Init+0x204>
 801e7ae:	2303      	movs	r3, #3
 801e7b0:	e004      	b.n	801e7bc <HAL_GPIO_Init+0x204>
 801e7b2:	2302      	movs	r3, #2
 801e7b4:	e002      	b.n	801e7bc <HAL_GPIO_Init+0x204>
 801e7b6:	2301      	movs	r3, #1
 801e7b8:	e000      	b.n	801e7bc <HAL_GPIO_Init+0x204>
 801e7ba:	2300      	movs	r3, #0
 801e7bc:	69fa      	ldr	r2, [r7, #28]
 801e7be:	f002 0203 	and.w	r2, r2, #3
 801e7c2:	0092      	lsls	r2, r2, #2
 801e7c4:	4093      	lsls	r3, r2
 801e7c6:	69ba      	ldr	r2, [r7, #24]
 801e7c8:	4313      	orrs	r3, r2
 801e7ca:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 801e7cc:	4935      	ldr	r1, [pc, #212]	; (801e8a4 <HAL_GPIO_Init+0x2ec>)
 801e7ce:	69fb      	ldr	r3, [r7, #28]
 801e7d0:	089b      	lsrs	r3, r3, #2
 801e7d2:	3302      	adds	r3, #2
 801e7d4:	69ba      	ldr	r2, [r7, #24]
 801e7d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 801e7da:	4b38      	ldr	r3, [pc, #224]	; (801e8bc <HAL_GPIO_Init+0x304>)
 801e7dc:	681b      	ldr	r3, [r3, #0]
 801e7de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 801e7e0:	693b      	ldr	r3, [r7, #16]
 801e7e2:	43db      	mvns	r3, r3
 801e7e4:	69ba      	ldr	r2, [r7, #24]
 801e7e6:	4013      	ands	r3, r2
 801e7e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 801e7ea:	683b      	ldr	r3, [r7, #0]
 801e7ec:	685b      	ldr	r3, [r3, #4]
 801e7ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 801e7f2:	2b00      	cmp	r3, #0
 801e7f4:	d003      	beq.n	801e7fe <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 801e7f6:	69ba      	ldr	r2, [r7, #24]
 801e7f8:	693b      	ldr	r3, [r7, #16]
 801e7fa:	4313      	orrs	r3, r2
 801e7fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 801e7fe:	4a2f      	ldr	r2, [pc, #188]	; (801e8bc <HAL_GPIO_Init+0x304>)
 801e800:	69bb      	ldr	r3, [r7, #24]
 801e802:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 801e804:	4b2d      	ldr	r3, [pc, #180]	; (801e8bc <HAL_GPIO_Init+0x304>)
 801e806:	685b      	ldr	r3, [r3, #4]
 801e808:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 801e80a:	693b      	ldr	r3, [r7, #16]
 801e80c:	43db      	mvns	r3, r3
 801e80e:	69ba      	ldr	r2, [r7, #24]
 801e810:	4013      	ands	r3, r2
 801e812:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 801e814:	683b      	ldr	r3, [r7, #0]
 801e816:	685b      	ldr	r3, [r3, #4]
 801e818:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801e81c:	2b00      	cmp	r3, #0
 801e81e:	d003      	beq.n	801e828 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 801e820:	69ba      	ldr	r2, [r7, #24]
 801e822:	693b      	ldr	r3, [r7, #16]
 801e824:	4313      	orrs	r3, r2
 801e826:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 801e828:	4a24      	ldr	r2, [pc, #144]	; (801e8bc <HAL_GPIO_Init+0x304>)
 801e82a:	69bb      	ldr	r3, [r7, #24]
 801e82c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 801e82e:	4b23      	ldr	r3, [pc, #140]	; (801e8bc <HAL_GPIO_Init+0x304>)
 801e830:	689b      	ldr	r3, [r3, #8]
 801e832:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 801e834:	693b      	ldr	r3, [r7, #16]
 801e836:	43db      	mvns	r3, r3
 801e838:	69ba      	ldr	r2, [r7, #24]
 801e83a:	4013      	ands	r3, r2
 801e83c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 801e83e:	683b      	ldr	r3, [r7, #0]
 801e840:	685b      	ldr	r3, [r3, #4]
 801e842:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 801e846:	2b00      	cmp	r3, #0
 801e848:	d003      	beq.n	801e852 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 801e84a:	69ba      	ldr	r2, [r7, #24]
 801e84c:	693b      	ldr	r3, [r7, #16]
 801e84e:	4313      	orrs	r3, r2
 801e850:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 801e852:	4a1a      	ldr	r2, [pc, #104]	; (801e8bc <HAL_GPIO_Init+0x304>)
 801e854:	69bb      	ldr	r3, [r7, #24]
 801e856:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 801e858:	4b18      	ldr	r3, [pc, #96]	; (801e8bc <HAL_GPIO_Init+0x304>)
 801e85a:	68db      	ldr	r3, [r3, #12]
 801e85c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 801e85e:	693b      	ldr	r3, [r7, #16]
 801e860:	43db      	mvns	r3, r3
 801e862:	69ba      	ldr	r2, [r7, #24]
 801e864:	4013      	ands	r3, r2
 801e866:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 801e868:	683b      	ldr	r3, [r7, #0]
 801e86a:	685b      	ldr	r3, [r3, #4]
 801e86c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 801e870:	2b00      	cmp	r3, #0
 801e872:	d003      	beq.n	801e87c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 801e874:	69ba      	ldr	r2, [r7, #24]
 801e876:	693b      	ldr	r3, [r7, #16]
 801e878:	4313      	orrs	r3, r2
 801e87a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 801e87c:	4a0f      	ldr	r2, [pc, #60]	; (801e8bc <HAL_GPIO_Init+0x304>)
 801e87e:	69bb      	ldr	r3, [r7, #24]
 801e880:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 801e882:	69fb      	ldr	r3, [r7, #28]
 801e884:	3301      	adds	r3, #1
 801e886:	61fb      	str	r3, [r7, #28]
 801e888:	69fb      	ldr	r3, [r7, #28]
 801e88a:	2b0f      	cmp	r3, #15
 801e88c:	f67f aea2 	bls.w	801e5d4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 801e890:	bf00      	nop
 801e892:	bf00      	nop
 801e894:	3724      	adds	r7, #36	; 0x24
 801e896:	46bd      	mov	sp, r7
 801e898:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e89c:	4770      	bx	lr
 801e89e:	bf00      	nop
 801e8a0:	40023800 	.word	0x40023800
 801e8a4:	40013800 	.word	0x40013800
 801e8a8:	40020000 	.word	0x40020000
 801e8ac:	40020400 	.word	0x40020400
 801e8b0:	40020800 	.word	0x40020800
 801e8b4:	40020c00 	.word	0x40020c00
 801e8b8:	40021000 	.word	0x40021000
 801e8bc:	40013c00 	.word	0x40013c00

0801e8c0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 801e8c0:	b480      	push	{r7}
 801e8c2:	b085      	sub	sp, #20
 801e8c4:	af00      	add	r7, sp, #0
 801e8c6:	6078      	str	r0, [r7, #4]
 801e8c8:	460b      	mov	r3, r1
 801e8ca:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 801e8cc:	687b      	ldr	r3, [r7, #4]
 801e8ce:	691a      	ldr	r2, [r3, #16]
 801e8d0:	887b      	ldrh	r3, [r7, #2]
 801e8d2:	4013      	ands	r3, r2
 801e8d4:	2b00      	cmp	r3, #0
 801e8d6:	d002      	beq.n	801e8de <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 801e8d8:	2301      	movs	r3, #1
 801e8da:	73fb      	strb	r3, [r7, #15]
 801e8dc:	e001      	b.n	801e8e2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 801e8de:	2300      	movs	r3, #0
 801e8e0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 801e8e2:	7bfb      	ldrb	r3, [r7, #15]
}
 801e8e4:	4618      	mov	r0, r3
 801e8e6:	3714      	adds	r7, #20
 801e8e8:	46bd      	mov	sp, r7
 801e8ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e8ee:	4770      	bx	lr

0801e8f0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 801e8f0:	b480      	push	{r7}
 801e8f2:	b083      	sub	sp, #12
 801e8f4:	af00      	add	r7, sp, #0
 801e8f6:	6078      	str	r0, [r7, #4]
 801e8f8:	460b      	mov	r3, r1
 801e8fa:	807b      	strh	r3, [r7, #2]
 801e8fc:	4613      	mov	r3, r2
 801e8fe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 801e900:	787b      	ldrb	r3, [r7, #1]
 801e902:	2b00      	cmp	r3, #0
 801e904:	d003      	beq.n	801e90e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 801e906:	887a      	ldrh	r2, [r7, #2]
 801e908:	687b      	ldr	r3, [r7, #4]
 801e90a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 801e90c:	e003      	b.n	801e916 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 801e90e:	887b      	ldrh	r3, [r7, #2]
 801e910:	041a      	lsls	r2, r3, #16
 801e912:	687b      	ldr	r3, [r7, #4]
 801e914:	619a      	str	r2, [r3, #24]
}
 801e916:	bf00      	nop
 801e918:	370c      	adds	r7, #12
 801e91a:	46bd      	mov	sp, r7
 801e91c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e920:	4770      	bx	lr
	...

0801e924 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 801e924:	b580      	push	{r7, lr}
 801e926:	b082      	sub	sp, #8
 801e928:	af00      	add	r7, sp, #0
 801e92a:	4603      	mov	r3, r0
 801e92c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 801e92e:	4b08      	ldr	r3, [pc, #32]	; (801e950 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 801e930:	695a      	ldr	r2, [r3, #20]
 801e932:	88fb      	ldrh	r3, [r7, #6]
 801e934:	4013      	ands	r3, r2
 801e936:	2b00      	cmp	r3, #0
 801e938:	d006      	beq.n	801e948 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 801e93a:	4a05      	ldr	r2, [pc, #20]	; (801e950 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 801e93c:	88fb      	ldrh	r3, [r7, #6]
 801e93e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 801e940:	88fb      	ldrh	r3, [r7, #6]
 801e942:	4618      	mov	r0, r3
 801e944:	f7fe fc64 	bl	801d210 <HAL_GPIO_EXTI_Callback>
  }
}
 801e948:	bf00      	nop
 801e94a:	3708      	adds	r7, #8
 801e94c:	46bd      	mov	sp, r7
 801e94e:	bd80      	pop	{r7, pc}
 801e950:	40013c00 	.word	0x40013c00

0801e954 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 801e954:	b580      	push	{r7, lr}
 801e956:	b084      	sub	sp, #16
 801e958:	af00      	add	r7, sp, #0
 801e95a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 801e95c:	687b      	ldr	r3, [r7, #4]
 801e95e:	2b00      	cmp	r3, #0
 801e960:	d101      	bne.n	801e966 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 801e962:	2301      	movs	r3, #1
 801e964:	e12b      	b.n	801ebbe <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 801e966:	687b      	ldr	r3, [r7, #4]
 801e968:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801e96c:	b2db      	uxtb	r3, r3
 801e96e:	2b00      	cmp	r3, #0
 801e970:	d106      	bne.n	801e980 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 801e972:	687b      	ldr	r3, [r7, #4]
 801e974:	2200      	movs	r2, #0
 801e976:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 801e97a:	6878      	ldr	r0, [r7, #4]
 801e97c:	f7fd ff06 	bl	801c78c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 801e980:	687b      	ldr	r3, [r7, #4]
 801e982:	2224      	movs	r2, #36	; 0x24
 801e984:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 801e988:	687b      	ldr	r3, [r7, #4]
 801e98a:	681b      	ldr	r3, [r3, #0]
 801e98c:	681a      	ldr	r2, [r3, #0]
 801e98e:	687b      	ldr	r3, [r7, #4]
 801e990:	681b      	ldr	r3, [r3, #0]
 801e992:	f022 0201 	bic.w	r2, r2, #1
 801e996:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 801e998:	687b      	ldr	r3, [r7, #4]
 801e99a:	681b      	ldr	r3, [r3, #0]
 801e99c:	681a      	ldr	r2, [r3, #0]
 801e99e:	687b      	ldr	r3, [r7, #4]
 801e9a0:	681b      	ldr	r3, [r3, #0]
 801e9a2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 801e9a6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 801e9a8:	687b      	ldr	r3, [r7, #4]
 801e9aa:	681b      	ldr	r3, [r3, #0]
 801e9ac:	681a      	ldr	r2, [r3, #0]
 801e9ae:	687b      	ldr	r3, [r7, #4]
 801e9b0:	681b      	ldr	r3, [r3, #0]
 801e9b2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 801e9b6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 801e9b8:	f001 f992 	bl	801fce0 <HAL_RCC_GetPCLK1Freq>
 801e9bc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 801e9be:	687b      	ldr	r3, [r7, #4]
 801e9c0:	685b      	ldr	r3, [r3, #4]
 801e9c2:	4a81      	ldr	r2, [pc, #516]	; (801ebc8 <HAL_I2C_Init+0x274>)
 801e9c4:	4293      	cmp	r3, r2
 801e9c6:	d807      	bhi.n	801e9d8 <HAL_I2C_Init+0x84>
 801e9c8:	68fb      	ldr	r3, [r7, #12]
 801e9ca:	4a80      	ldr	r2, [pc, #512]	; (801ebcc <HAL_I2C_Init+0x278>)
 801e9cc:	4293      	cmp	r3, r2
 801e9ce:	bf94      	ite	ls
 801e9d0:	2301      	movls	r3, #1
 801e9d2:	2300      	movhi	r3, #0
 801e9d4:	b2db      	uxtb	r3, r3
 801e9d6:	e006      	b.n	801e9e6 <HAL_I2C_Init+0x92>
 801e9d8:	68fb      	ldr	r3, [r7, #12]
 801e9da:	4a7d      	ldr	r2, [pc, #500]	; (801ebd0 <HAL_I2C_Init+0x27c>)
 801e9dc:	4293      	cmp	r3, r2
 801e9de:	bf94      	ite	ls
 801e9e0:	2301      	movls	r3, #1
 801e9e2:	2300      	movhi	r3, #0
 801e9e4:	b2db      	uxtb	r3, r3
 801e9e6:	2b00      	cmp	r3, #0
 801e9e8:	d001      	beq.n	801e9ee <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 801e9ea:	2301      	movs	r3, #1
 801e9ec:	e0e7      	b.n	801ebbe <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 801e9ee:	68fb      	ldr	r3, [r7, #12]
 801e9f0:	4a78      	ldr	r2, [pc, #480]	; (801ebd4 <HAL_I2C_Init+0x280>)
 801e9f2:	fba2 2303 	umull	r2, r3, r2, r3
 801e9f6:	0c9b      	lsrs	r3, r3, #18
 801e9f8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 801e9fa:	687b      	ldr	r3, [r7, #4]
 801e9fc:	681b      	ldr	r3, [r3, #0]
 801e9fe:	685b      	ldr	r3, [r3, #4]
 801ea00:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 801ea04:	687b      	ldr	r3, [r7, #4]
 801ea06:	681b      	ldr	r3, [r3, #0]
 801ea08:	68ba      	ldr	r2, [r7, #8]
 801ea0a:	430a      	orrs	r2, r1
 801ea0c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 801ea0e:	687b      	ldr	r3, [r7, #4]
 801ea10:	681b      	ldr	r3, [r3, #0]
 801ea12:	6a1b      	ldr	r3, [r3, #32]
 801ea14:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 801ea18:	687b      	ldr	r3, [r7, #4]
 801ea1a:	685b      	ldr	r3, [r3, #4]
 801ea1c:	4a6a      	ldr	r2, [pc, #424]	; (801ebc8 <HAL_I2C_Init+0x274>)
 801ea1e:	4293      	cmp	r3, r2
 801ea20:	d802      	bhi.n	801ea28 <HAL_I2C_Init+0xd4>
 801ea22:	68bb      	ldr	r3, [r7, #8]
 801ea24:	3301      	adds	r3, #1
 801ea26:	e009      	b.n	801ea3c <HAL_I2C_Init+0xe8>
 801ea28:	68bb      	ldr	r3, [r7, #8]
 801ea2a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 801ea2e:	fb02 f303 	mul.w	r3, r2, r3
 801ea32:	4a69      	ldr	r2, [pc, #420]	; (801ebd8 <HAL_I2C_Init+0x284>)
 801ea34:	fba2 2303 	umull	r2, r3, r2, r3
 801ea38:	099b      	lsrs	r3, r3, #6
 801ea3a:	3301      	adds	r3, #1
 801ea3c:	687a      	ldr	r2, [r7, #4]
 801ea3e:	6812      	ldr	r2, [r2, #0]
 801ea40:	430b      	orrs	r3, r1
 801ea42:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 801ea44:	687b      	ldr	r3, [r7, #4]
 801ea46:	681b      	ldr	r3, [r3, #0]
 801ea48:	69db      	ldr	r3, [r3, #28]
 801ea4a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 801ea4e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 801ea52:	687b      	ldr	r3, [r7, #4]
 801ea54:	685b      	ldr	r3, [r3, #4]
 801ea56:	495c      	ldr	r1, [pc, #368]	; (801ebc8 <HAL_I2C_Init+0x274>)
 801ea58:	428b      	cmp	r3, r1
 801ea5a:	d819      	bhi.n	801ea90 <HAL_I2C_Init+0x13c>
 801ea5c:	68fb      	ldr	r3, [r7, #12]
 801ea5e:	1e59      	subs	r1, r3, #1
 801ea60:	687b      	ldr	r3, [r7, #4]
 801ea62:	685b      	ldr	r3, [r3, #4]
 801ea64:	005b      	lsls	r3, r3, #1
 801ea66:	fbb1 f3f3 	udiv	r3, r1, r3
 801ea6a:	1c59      	adds	r1, r3, #1
 801ea6c:	f640 73fc 	movw	r3, #4092	; 0xffc
 801ea70:	400b      	ands	r3, r1
 801ea72:	2b00      	cmp	r3, #0
 801ea74:	d00a      	beq.n	801ea8c <HAL_I2C_Init+0x138>
 801ea76:	68fb      	ldr	r3, [r7, #12]
 801ea78:	1e59      	subs	r1, r3, #1
 801ea7a:	687b      	ldr	r3, [r7, #4]
 801ea7c:	685b      	ldr	r3, [r3, #4]
 801ea7e:	005b      	lsls	r3, r3, #1
 801ea80:	fbb1 f3f3 	udiv	r3, r1, r3
 801ea84:	3301      	adds	r3, #1
 801ea86:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801ea8a:	e051      	b.n	801eb30 <HAL_I2C_Init+0x1dc>
 801ea8c:	2304      	movs	r3, #4
 801ea8e:	e04f      	b.n	801eb30 <HAL_I2C_Init+0x1dc>
 801ea90:	687b      	ldr	r3, [r7, #4]
 801ea92:	689b      	ldr	r3, [r3, #8]
 801ea94:	2b00      	cmp	r3, #0
 801ea96:	d111      	bne.n	801eabc <HAL_I2C_Init+0x168>
 801ea98:	68fb      	ldr	r3, [r7, #12]
 801ea9a:	1e58      	subs	r0, r3, #1
 801ea9c:	687b      	ldr	r3, [r7, #4]
 801ea9e:	6859      	ldr	r1, [r3, #4]
 801eaa0:	460b      	mov	r3, r1
 801eaa2:	005b      	lsls	r3, r3, #1
 801eaa4:	440b      	add	r3, r1
 801eaa6:	fbb0 f3f3 	udiv	r3, r0, r3
 801eaaa:	3301      	adds	r3, #1
 801eaac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801eab0:	2b00      	cmp	r3, #0
 801eab2:	bf0c      	ite	eq
 801eab4:	2301      	moveq	r3, #1
 801eab6:	2300      	movne	r3, #0
 801eab8:	b2db      	uxtb	r3, r3
 801eaba:	e012      	b.n	801eae2 <HAL_I2C_Init+0x18e>
 801eabc:	68fb      	ldr	r3, [r7, #12]
 801eabe:	1e58      	subs	r0, r3, #1
 801eac0:	687b      	ldr	r3, [r7, #4]
 801eac2:	6859      	ldr	r1, [r3, #4]
 801eac4:	460b      	mov	r3, r1
 801eac6:	009b      	lsls	r3, r3, #2
 801eac8:	440b      	add	r3, r1
 801eaca:	0099      	lsls	r1, r3, #2
 801eacc:	440b      	add	r3, r1
 801eace:	fbb0 f3f3 	udiv	r3, r0, r3
 801ead2:	3301      	adds	r3, #1
 801ead4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801ead8:	2b00      	cmp	r3, #0
 801eada:	bf0c      	ite	eq
 801eadc:	2301      	moveq	r3, #1
 801eade:	2300      	movne	r3, #0
 801eae0:	b2db      	uxtb	r3, r3
 801eae2:	2b00      	cmp	r3, #0
 801eae4:	d001      	beq.n	801eaea <HAL_I2C_Init+0x196>
 801eae6:	2301      	movs	r3, #1
 801eae8:	e022      	b.n	801eb30 <HAL_I2C_Init+0x1dc>
 801eaea:	687b      	ldr	r3, [r7, #4]
 801eaec:	689b      	ldr	r3, [r3, #8]
 801eaee:	2b00      	cmp	r3, #0
 801eaf0:	d10e      	bne.n	801eb10 <HAL_I2C_Init+0x1bc>
 801eaf2:	68fb      	ldr	r3, [r7, #12]
 801eaf4:	1e58      	subs	r0, r3, #1
 801eaf6:	687b      	ldr	r3, [r7, #4]
 801eaf8:	6859      	ldr	r1, [r3, #4]
 801eafa:	460b      	mov	r3, r1
 801eafc:	005b      	lsls	r3, r3, #1
 801eafe:	440b      	add	r3, r1
 801eb00:	fbb0 f3f3 	udiv	r3, r0, r3
 801eb04:	3301      	adds	r3, #1
 801eb06:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801eb0a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801eb0e:	e00f      	b.n	801eb30 <HAL_I2C_Init+0x1dc>
 801eb10:	68fb      	ldr	r3, [r7, #12]
 801eb12:	1e58      	subs	r0, r3, #1
 801eb14:	687b      	ldr	r3, [r7, #4]
 801eb16:	6859      	ldr	r1, [r3, #4]
 801eb18:	460b      	mov	r3, r1
 801eb1a:	009b      	lsls	r3, r3, #2
 801eb1c:	440b      	add	r3, r1
 801eb1e:	0099      	lsls	r1, r3, #2
 801eb20:	440b      	add	r3, r1
 801eb22:	fbb0 f3f3 	udiv	r3, r0, r3
 801eb26:	3301      	adds	r3, #1
 801eb28:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801eb2c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 801eb30:	6879      	ldr	r1, [r7, #4]
 801eb32:	6809      	ldr	r1, [r1, #0]
 801eb34:	4313      	orrs	r3, r2
 801eb36:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 801eb38:	687b      	ldr	r3, [r7, #4]
 801eb3a:	681b      	ldr	r3, [r3, #0]
 801eb3c:	681b      	ldr	r3, [r3, #0]
 801eb3e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 801eb42:	687b      	ldr	r3, [r7, #4]
 801eb44:	69da      	ldr	r2, [r3, #28]
 801eb46:	687b      	ldr	r3, [r7, #4]
 801eb48:	6a1b      	ldr	r3, [r3, #32]
 801eb4a:	431a      	orrs	r2, r3
 801eb4c:	687b      	ldr	r3, [r7, #4]
 801eb4e:	681b      	ldr	r3, [r3, #0]
 801eb50:	430a      	orrs	r2, r1
 801eb52:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 801eb54:	687b      	ldr	r3, [r7, #4]
 801eb56:	681b      	ldr	r3, [r3, #0]
 801eb58:	689b      	ldr	r3, [r3, #8]
 801eb5a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 801eb5e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 801eb62:	687a      	ldr	r2, [r7, #4]
 801eb64:	6911      	ldr	r1, [r2, #16]
 801eb66:	687a      	ldr	r2, [r7, #4]
 801eb68:	68d2      	ldr	r2, [r2, #12]
 801eb6a:	4311      	orrs	r1, r2
 801eb6c:	687a      	ldr	r2, [r7, #4]
 801eb6e:	6812      	ldr	r2, [r2, #0]
 801eb70:	430b      	orrs	r3, r1
 801eb72:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 801eb74:	687b      	ldr	r3, [r7, #4]
 801eb76:	681b      	ldr	r3, [r3, #0]
 801eb78:	68db      	ldr	r3, [r3, #12]
 801eb7a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 801eb7e:	687b      	ldr	r3, [r7, #4]
 801eb80:	695a      	ldr	r2, [r3, #20]
 801eb82:	687b      	ldr	r3, [r7, #4]
 801eb84:	699b      	ldr	r3, [r3, #24]
 801eb86:	431a      	orrs	r2, r3
 801eb88:	687b      	ldr	r3, [r7, #4]
 801eb8a:	681b      	ldr	r3, [r3, #0]
 801eb8c:	430a      	orrs	r2, r1
 801eb8e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 801eb90:	687b      	ldr	r3, [r7, #4]
 801eb92:	681b      	ldr	r3, [r3, #0]
 801eb94:	681a      	ldr	r2, [r3, #0]
 801eb96:	687b      	ldr	r3, [r7, #4]
 801eb98:	681b      	ldr	r3, [r3, #0]
 801eb9a:	f042 0201 	orr.w	r2, r2, #1
 801eb9e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 801eba0:	687b      	ldr	r3, [r7, #4]
 801eba2:	2200      	movs	r2, #0
 801eba4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 801eba6:	687b      	ldr	r3, [r7, #4]
 801eba8:	2220      	movs	r2, #32
 801ebaa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 801ebae:	687b      	ldr	r3, [r7, #4]
 801ebb0:	2200      	movs	r2, #0
 801ebb2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 801ebb4:	687b      	ldr	r3, [r7, #4]
 801ebb6:	2200      	movs	r2, #0
 801ebb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 801ebbc:	2300      	movs	r3, #0
}
 801ebbe:	4618      	mov	r0, r3
 801ebc0:	3710      	adds	r7, #16
 801ebc2:	46bd      	mov	sp, r7
 801ebc4:	bd80      	pop	{r7, pc}
 801ebc6:	bf00      	nop
 801ebc8:	000186a0 	.word	0x000186a0
 801ebcc:	001e847f 	.word	0x001e847f
 801ebd0:	003d08ff 	.word	0x003d08ff
 801ebd4:	431bde83 	.word	0x431bde83
 801ebd8:	10624dd3 	.word	0x10624dd3

0801ebdc <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 801ebdc:	b580      	push	{r7, lr}
 801ebde:	b088      	sub	sp, #32
 801ebe0:	af02      	add	r7, sp, #8
 801ebe2:	60f8      	str	r0, [r7, #12]
 801ebe4:	607a      	str	r2, [r7, #4]
 801ebe6:	461a      	mov	r2, r3
 801ebe8:	460b      	mov	r3, r1
 801ebea:	817b      	strh	r3, [r7, #10]
 801ebec:	4613      	mov	r3, r2
 801ebee:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 801ebf0:	f7fe ff9e 	bl	801db30 <HAL_GetTick>
 801ebf4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 801ebf6:	68fb      	ldr	r3, [r7, #12]
 801ebf8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801ebfc:	b2db      	uxtb	r3, r3
 801ebfe:	2b20      	cmp	r3, #32
 801ec00:	f040 80e0 	bne.w	801edc4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 801ec04:	697b      	ldr	r3, [r7, #20]
 801ec06:	9300      	str	r3, [sp, #0]
 801ec08:	2319      	movs	r3, #25
 801ec0a:	2201      	movs	r2, #1
 801ec0c:	4970      	ldr	r1, [pc, #448]	; (801edd0 <HAL_I2C_Master_Transmit+0x1f4>)
 801ec0e:	68f8      	ldr	r0, [r7, #12]
 801ec10:	f000 fa92 	bl	801f138 <I2C_WaitOnFlagUntilTimeout>
 801ec14:	4603      	mov	r3, r0
 801ec16:	2b00      	cmp	r3, #0
 801ec18:	d001      	beq.n	801ec1e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 801ec1a:	2302      	movs	r3, #2
 801ec1c:	e0d3      	b.n	801edc6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 801ec1e:	68fb      	ldr	r3, [r7, #12]
 801ec20:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801ec24:	2b01      	cmp	r3, #1
 801ec26:	d101      	bne.n	801ec2c <HAL_I2C_Master_Transmit+0x50>
 801ec28:	2302      	movs	r3, #2
 801ec2a:	e0cc      	b.n	801edc6 <HAL_I2C_Master_Transmit+0x1ea>
 801ec2c:	68fb      	ldr	r3, [r7, #12]
 801ec2e:	2201      	movs	r2, #1
 801ec30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 801ec34:	68fb      	ldr	r3, [r7, #12]
 801ec36:	681b      	ldr	r3, [r3, #0]
 801ec38:	681b      	ldr	r3, [r3, #0]
 801ec3a:	f003 0301 	and.w	r3, r3, #1
 801ec3e:	2b01      	cmp	r3, #1
 801ec40:	d007      	beq.n	801ec52 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 801ec42:	68fb      	ldr	r3, [r7, #12]
 801ec44:	681b      	ldr	r3, [r3, #0]
 801ec46:	681a      	ldr	r2, [r3, #0]
 801ec48:	68fb      	ldr	r3, [r7, #12]
 801ec4a:	681b      	ldr	r3, [r3, #0]
 801ec4c:	f042 0201 	orr.w	r2, r2, #1
 801ec50:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 801ec52:	68fb      	ldr	r3, [r7, #12]
 801ec54:	681b      	ldr	r3, [r3, #0]
 801ec56:	681a      	ldr	r2, [r3, #0]
 801ec58:	68fb      	ldr	r3, [r7, #12]
 801ec5a:	681b      	ldr	r3, [r3, #0]
 801ec5c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 801ec60:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 801ec62:	68fb      	ldr	r3, [r7, #12]
 801ec64:	2221      	movs	r2, #33	; 0x21
 801ec66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 801ec6a:	68fb      	ldr	r3, [r7, #12]
 801ec6c:	2210      	movs	r2, #16
 801ec6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 801ec72:	68fb      	ldr	r3, [r7, #12]
 801ec74:	2200      	movs	r2, #0
 801ec76:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 801ec78:	68fb      	ldr	r3, [r7, #12]
 801ec7a:	687a      	ldr	r2, [r7, #4]
 801ec7c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 801ec7e:	68fb      	ldr	r3, [r7, #12]
 801ec80:	893a      	ldrh	r2, [r7, #8]
 801ec82:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 801ec84:	68fb      	ldr	r3, [r7, #12]
 801ec86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801ec88:	b29a      	uxth	r2, r3
 801ec8a:	68fb      	ldr	r3, [r7, #12]
 801ec8c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 801ec8e:	68fb      	ldr	r3, [r7, #12]
 801ec90:	4a50      	ldr	r2, [pc, #320]	; (801edd4 <HAL_I2C_Master_Transmit+0x1f8>)
 801ec92:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 801ec94:	8979      	ldrh	r1, [r7, #10]
 801ec96:	697b      	ldr	r3, [r7, #20]
 801ec98:	6a3a      	ldr	r2, [r7, #32]
 801ec9a:	68f8      	ldr	r0, [r7, #12]
 801ec9c:	f000 f9ca 	bl	801f034 <I2C_MasterRequestWrite>
 801eca0:	4603      	mov	r3, r0
 801eca2:	2b00      	cmp	r3, #0
 801eca4:	d001      	beq.n	801ecaa <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 801eca6:	2301      	movs	r3, #1
 801eca8:	e08d      	b.n	801edc6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 801ecaa:	2300      	movs	r3, #0
 801ecac:	613b      	str	r3, [r7, #16]
 801ecae:	68fb      	ldr	r3, [r7, #12]
 801ecb0:	681b      	ldr	r3, [r3, #0]
 801ecb2:	695b      	ldr	r3, [r3, #20]
 801ecb4:	613b      	str	r3, [r7, #16]
 801ecb6:	68fb      	ldr	r3, [r7, #12]
 801ecb8:	681b      	ldr	r3, [r3, #0]
 801ecba:	699b      	ldr	r3, [r3, #24]
 801ecbc:	613b      	str	r3, [r7, #16]
 801ecbe:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 801ecc0:	e066      	b.n	801ed90 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 801ecc2:	697a      	ldr	r2, [r7, #20]
 801ecc4:	6a39      	ldr	r1, [r7, #32]
 801ecc6:	68f8      	ldr	r0, [r7, #12]
 801ecc8:	f000 fb0c 	bl	801f2e4 <I2C_WaitOnTXEFlagUntilTimeout>
 801eccc:	4603      	mov	r3, r0
 801ecce:	2b00      	cmp	r3, #0
 801ecd0:	d00d      	beq.n	801ecee <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 801ecd2:	68fb      	ldr	r3, [r7, #12]
 801ecd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801ecd6:	2b04      	cmp	r3, #4
 801ecd8:	d107      	bne.n	801ecea <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 801ecda:	68fb      	ldr	r3, [r7, #12]
 801ecdc:	681b      	ldr	r3, [r3, #0]
 801ecde:	681a      	ldr	r2, [r3, #0]
 801ece0:	68fb      	ldr	r3, [r7, #12]
 801ece2:	681b      	ldr	r3, [r3, #0]
 801ece4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801ece8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 801ecea:	2301      	movs	r3, #1
 801ecec:	e06b      	b.n	801edc6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 801ecee:	68fb      	ldr	r3, [r7, #12]
 801ecf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ecf2:	781a      	ldrb	r2, [r3, #0]
 801ecf4:	68fb      	ldr	r3, [r7, #12]
 801ecf6:	681b      	ldr	r3, [r3, #0]
 801ecf8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 801ecfa:	68fb      	ldr	r3, [r7, #12]
 801ecfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ecfe:	1c5a      	adds	r2, r3, #1
 801ed00:	68fb      	ldr	r3, [r7, #12]
 801ed02:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 801ed04:	68fb      	ldr	r3, [r7, #12]
 801ed06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801ed08:	b29b      	uxth	r3, r3
 801ed0a:	3b01      	subs	r3, #1
 801ed0c:	b29a      	uxth	r2, r3
 801ed0e:	68fb      	ldr	r3, [r7, #12]
 801ed10:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 801ed12:	68fb      	ldr	r3, [r7, #12]
 801ed14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801ed16:	3b01      	subs	r3, #1
 801ed18:	b29a      	uxth	r2, r3
 801ed1a:	68fb      	ldr	r3, [r7, #12]
 801ed1c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 801ed1e:	68fb      	ldr	r3, [r7, #12]
 801ed20:	681b      	ldr	r3, [r3, #0]
 801ed22:	695b      	ldr	r3, [r3, #20]
 801ed24:	f003 0304 	and.w	r3, r3, #4
 801ed28:	2b04      	cmp	r3, #4
 801ed2a:	d11b      	bne.n	801ed64 <HAL_I2C_Master_Transmit+0x188>
 801ed2c:	68fb      	ldr	r3, [r7, #12]
 801ed2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801ed30:	2b00      	cmp	r3, #0
 801ed32:	d017      	beq.n	801ed64 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 801ed34:	68fb      	ldr	r3, [r7, #12]
 801ed36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ed38:	781a      	ldrb	r2, [r3, #0]
 801ed3a:	68fb      	ldr	r3, [r7, #12]
 801ed3c:	681b      	ldr	r3, [r3, #0]
 801ed3e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 801ed40:	68fb      	ldr	r3, [r7, #12]
 801ed42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ed44:	1c5a      	adds	r2, r3, #1
 801ed46:	68fb      	ldr	r3, [r7, #12]
 801ed48:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 801ed4a:	68fb      	ldr	r3, [r7, #12]
 801ed4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801ed4e:	b29b      	uxth	r3, r3
 801ed50:	3b01      	subs	r3, #1
 801ed52:	b29a      	uxth	r2, r3
 801ed54:	68fb      	ldr	r3, [r7, #12]
 801ed56:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 801ed58:	68fb      	ldr	r3, [r7, #12]
 801ed5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801ed5c:	3b01      	subs	r3, #1
 801ed5e:	b29a      	uxth	r2, r3
 801ed60:	68fb      	ldr	r3, [r7, #12]
 801ed62:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 801ed64:	697a      	ldr	r2, [r7, #20]
 801ed66:	6a39      	ldr	r1, [r7, #32]
 801ed68:	68f8      	ldr	r0, [r7, #12]
 801ed6a:	f000 fafc 	bl	801f366 <I2C_WaitOnBTFFlagUntilTimeout>
 801ed6e:	4603      	mov	r3, r0
 801ed70:	2b00      	cmp	r3, #0
 801ed72:	d00d      	beq.n	801ed90 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 801ed74:	68fb      	ldr	r3, [r7, #12]
 801ed76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801ed78:	2b04      	cmp	r3, #4
 801ed7a:	d107      	bne.n	801ed8c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 801ed7c:	68fb      	ldr	r3, [r7, #12]
 801ed7e:	681b      	ldr	r3, [r3, #0]
 801ed80:	681a      	ldr	r2, [r3, #0]
 801ed82:	68fb      	ldr	r3, [r7, #12]
 801ed84:	681b      	ldr	r3, [r3, #0]
 801ed86:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801ed8a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 801ed8c:	2301      	movs	r3, #1
 801ed8e:	e01a      	b.n	801edc6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 801ed90:	68fb      	ldr	r3, [r7, #12]
 801ed92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801ed94:	2b00      	cmp	r3, #0
 801ed96:	d194      	bne.n	801ecc2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 801ed98:	68fb      	ldr	r3, [r7, #12]
 801ed9a:	681b      	ldr	r3, [r3, #0]
 801ed9c:	681a      	ldr	r2, [r3, #0]
 801ed9e:	68fb      	ldr	r3, [r7, #12]
 801eda0:	681b      	ldr	r3, [r3, #0]
 801eda2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801eda6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 801eda8:	68fb      	ldr	r3, [r7, #12]
 801edaa:	2220      	movs	r2, #32
 801edac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 801edb0:	68fb      	ldr	r3, [r7, #12]
 801edb2:	2200      	movs	r2, #0
 801edb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 801edb8:	68fb      	ldr	r3, [r7, #12]
 801edba:	2200      	movs	r2, #0
 801edbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 801edc0:	2300      	movs	r3, #0
 801edc2:	e000      	b.n	801edc6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 801edc4:	2302      	movs	r3, #2
  }
}
 801edc6:	4618      	mov	r0, r3
 801edc8:	3718      	adds	r7, #24
 801edca:	46bd      	mov	sp, r7
 801edcc:	bd80      	pop	{r7, pc}
 801edce:	bf00      	nop
 801edd0:	00100002 	.word	0x00100002
 801edd4:	ffff0000 	.word	0xffff0000

0801edd8 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 801edd8:	b580      	push	{r7, lr}
 801edda:	b08a      	sub	sp, #40	; 0x28
 801eddc:	af02      	add	r7, sp, #8
 801edde:	60f8      	str	r0, [r7, #12]
 801ede0:	607a      	str	r2, [r7, #4]
 801ede2:	603b      	str	r3, [r7, #0]
 801ede4:	460b      	mov	r3, r1
 801ede6:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 801ede8:	f7fe fea2 	bl	801db30 <HAL_GetTick>
 801edec:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 801edee:	2301      	movs	r3, #1
 801edf0:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 801edf2:	68fb      	ldr	r3, [r7, #12]
 801edf4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801edf8:	b2db      	uxtb	r3, r3
 801edfa:	2b20      	cmp	r3, #32
 801edfc:	f040 8111 	bne.w	801f022 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 801ee00:	69fb      	ldr	r3, [r7, #28]
 801ee02:	9300      	str	r3, [sp, #0]
 801ee04:	2319      	movs	r3, #25
 801ee06:	2201      	movs	r2, #1
 801ee08:	4988      	ldr	r1, [pc, #544]	; (801f02c <HAL_I2C_IsDeviceReady+0x254>)
 801ee0a:	68f8      	ldr	r0, [r7, #12]
 801ee0c:	f000 f994 	bl	801f138 <I2C_WaitOnFlagUntilTimeout>
 801ee10:	4603      	mov	r3, r0
 801ee12:	2b00      	cmp	r3, #0
 801ee14:	d001      	beq.n	801ee1a <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 801ee16:	2302      	movs	r3, #2
 801ee18:	e104      	b.n	801f024 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 801ee1a:	68fb      	ldr	r3, [r7, #12]
 801ee1c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801ee20:	2b01      	cmp	r3, #1
 801ee22:	d101      	bne.n	801ee28 <HAL_I2C_IsDeviceReady+0x50>
 801ee24:	2302      	movs	r3, #2
 801ee26:	e0fd      	b.n	801f024 <HAL_I2C_IsDeviceReady+0x24c>
 801ee28:	68fb      	ldr	r3, [r7, #12]
 801ee2a:	2201      	movs	r2, #1
 801ee2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 801ee30:	68fb      	ldr	r3, [r7, #12]
 801ee32:	681b      	ldr	r3, [r3, #0]
 801ee34:	681b      	ldr	r3, [r3, #0]
 801ee36:	f003 0301 	and.w	r3, r3, #1
 801ee3a:	2b01      	cmp	r3, #1
 801ee3c:	d007      	beq.n	801ee4e <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 801ee3e:	68fb      	ldr	r3, [r7, #12]
 801ee40:	681b      	ldr	r3, [r3, #0]
 801ee42:	681a      	ldr	r2, [r3, #0]
 801ee44:	68fb      	ldr	r3, [r7, #12]
 801ee46:	681b      	ldr	r3, [r3, #0]
 801ee48:	f042 0201 	orr.w	r2, r2, #1
 801ee4c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 801ee4e:	68fb      	ldr	r3, [r7, #12]
 801ee50:	681b      	ldr	r3, [r3, #0]
 801ee52:	681a      	ldr	r2, [r3, #0]
 801ee54:	68fb      	ldr	r3, [r7, #12]
 801ee56:	681b      	ldr	r3, [r3, #0]
 801ee58:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 801ee5c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 801ee5e:	68fb      	ldr	r3, [r7, #12]
 801ee60:	2224      	movs	r2, #36	; 0x24
 801ee62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 801ee66:	68fb      	ldr	r3, [r7, #12]
 801ee68:	2200      	movs	r2, #0
 801ee6a:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 801ee6c:	68fb      	ldr	r3, [r7, #12]
 801ee6e:	4a70      	ldr	r2, [pc, #448]	; (801f030 <HAL_I2C_IsDeviceReady+0x258>)
 801ee70:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 801ee72:	68fb      	ldr	r3, [r7, #12]
 801ee74:	681b      	ldr	r3, [r3, #0]
 801ee76:	681a      	ldr	r2, [r3, #0]
 801ee78:	68fb      	ldr	r3, [r7, #12]
 801ee7a:	681b      	ldr	r3, [r3, #0]
 801ee7c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801ee80:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 801ee82:	69fb      	ldr	r3, [r7, #28]
 801ee84:	9300      	str	r3, [sp, #0]
 801ee86:	683b      	ldr	r3, [r7, #0]
 801ee88:	2200      	movs	r2, #0
 801ee8a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 801ee8e:	68f8      	ldr	r0, [r7, #12]
 801ee90:	f000 f952 	bl	801f138 <I2C_WaitOnFlagUntilTimeout>
 801ee94:	4603      	mov	r3, r0
 801ee96:	2b00      	cmp	r3, #0
 801ee98:	d00d      	beq.n	801eeb6 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 801ee9a:	68fb      	ldr	r3, [r7, #12]
 801ee9c:	681b      	ldr	r3, [r3, #0]
 801ee9e:	681b      	ldr	r3, [r3, #0]
 801eea0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801eea4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801eea8:	d103      	bne.n	801eeb2 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 801eeaa:	68fb      	ldr	r3, [r7, #12]
 801eeac:	f44f 7200 	mov.w	r2, #512	; 0x200
 801eeb0:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 801eeb2:	2303      	movs	r3, #3
 801eeb4:	e0b6      	b.n	801f024 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 801eeb6:	897b      	ldrh	r3, [r7, #10]
 801eeb8:	b2db      	uxtb	r3, r3
 801eeba:	461a      	mov	r2, r3
 801eebc:	68fb      	ldr	r3, [r7, #12]
 801eebe:	681b      	ldr	r3, [r3, #0]
 801eec0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 801eec4:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 801eec6:	f7fe fe33 	bl	801db30 <HAL_GetTick>
 801eeca:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 801eecc:	68fb      	ldr	r3, [r7, #12]
 801eece:	681b      	ldr	r3, [r3, #0]
 801eed0:	695b      	ldr	r3, [r3, #20]
 801eed2:	f003 0302 	and.w	r3, r3, #2
 801eed6:	2b02      	cmp	r3, #2
 801eed8:	bf0c      	ite	eq
 801eeda:	2301      	moveq	r3, #1
 801eedc:	2300      	movne	r3, #0
 801eede:	b2db      	uxtb	r3, r3
 801eee0:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 801eee2:	68fb      	ldr	r3, [r7, #12]
 801eee4:	681b      	ldr	r3, [r3, #0]
 801eee6:	695b      	ldr	r3, [r3, #20]
 801eee8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801eeec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801eef0:	bf0c      	ite	eq
 801eef2:	2301      	moveq	r3, #1
 801eef4:	2300      	movne	r3, #0
 801eef6:	b2db      	uxtb	r3, r3
 801eef8:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 801eefa:	e025      	b.n	801ef48 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 801eefc:	f7fe fe18 	bl	801db30 <HAL_GetTick>
 801ef00:	4602      	mov	r2, r0
 801ef02:	69fb      	ldr	r3, [r7, #28]
 801ef04:	1ad3      	subs	r3, r2, r3
 801ef06:	683a      	ldr	r2, [r7, #0]
 801ef08:	429a      	cmp	r2, r3
 801ef0a:	d302      	bcc.n	801ef12 <HAL_I2C_IsDeviceReady+0x13a>
 801ef0c:	683b      	ldr	r3, [r7, #0]
 801ef0e:	2b00      	cmp	r3, #0
 801ef10:	d103      	bne.n	801ef1a <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 801ef12:	68fb      	ldr	r3, [r7, #12]
 801ef14:	22a0      	movs	r2, #160	; 0xa0
 801ef16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 801ef1a:	68fb      	ldr	r3, [r7, #12]
 801ef1c:	681b      	ldr	r3, [r3, #0]
 801ef1e:	695b      	ldr	r3, [r3, #20]
 801ef20:	f003 0302 	and.w	r3, r3, #2
 801ef24:	2b02      	cmp	r3, #2
 801ef26:	bf0c      	ite	eq
 801ef28:	2301      	moveq	r3, #1
 801ef2a:	2300      	movne	r3, #0
 801ef2c:	b2db      	uxtb	r3, r3
 801ef2e:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 801ef30:	68fb      	ldr	r3, [r7, #12]
 801ef32:	681b      	ldr	r3, [r3, #0]
 801ef34:	695b      	ldr	r3, [r3, #20]
 801ef36:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801ef3a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801ef3e:	bf0c      	ite	eq
 801ef40:	2301      	moveq	r3, #1
 801ef42:	2300      	movne	r3, #0
 801ef44:	b2db      	uxtb	r3, r3
 801ef46:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 801ef48:	68fb      	ldr	r3, [r7, #12]
 801ef4a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801ef4e:	b2db      	uxtb	r3, r3
 801ef50:	2ba0      	cmp	r3, #160	; 0xa0
 801ef52:	d005      	beq.n	801ef60 <HAL_I2C_IsDeviceReady+0x188>
 801ef54:	7dfb      	ldrb	r3, [r7, #23]
 801ef56:	2b00      	cmp	r3, #0
 801ef58:	d102      	bne.n	801ef60 <HAL_I2C_IsDeviceReady+0x188>
 801ef5a:	7dbb      	ldrb	r3, [r7, #22]
 801ef5c:	2b00      	cmp	r3, #0
 801ef5e:	d0cd      	beq.n	801eefc <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 801ef60:	68fb      	ldr	r3, [r7, #12]
 801ef62:	2220      	movs	r2, #32
 801ef64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 801ef68:	68fb      	ldr	r3, [r7, #12]
 801ef6a:	681b      	ldr	r3, [r3, #0]
 801ef6c:	695b      	ldr	r3, [r3, #20]
 801ef6e:	f003 0302 	and.w	r3, r3, #2
 801ef72:	2b02      	cmp	r3, #2
 801ef74:	d129      	bne.n	801efca <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 801ef76:	68fb      	ldr	r3, [r7, #12]
 801ef78:	681b      	ldr	r3, [r3, #0]
 801ef7a:	681a      	ldr	r2, [r3, #0]
 801ef7c:	68fb      	ldr	r3, [r7, #12]
 801ef7e:	681b      	ldr	r3, [r3, #0]
 801ef80:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801ef84:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 801ef86:	2300      	movs	r3, #0
 801ef88:	613b      	str	r3, [r7, #16]
 801ef8a:	68fb      	ldr	r3, [r7, #12]
 801ef8c:	681b      	ldr	r3, [r3, #0]
 801ef8e:	695b      	ldr	r3, [r3, #20]
 801ef90:	613b      	str	r3, [r7, #16]
 801ef92:	68fb      	ldr	r3, [r7, #12]
 801ef94:	681b      	ldr	r3, [r3, #0]
 801ef96:	699b      	ldr	r3, [r3, #24]
 801ef98:	613b      	str	r3, [r7, #16]
 801ef9a:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 801ef9c:	69fb      	ldr	r3, [r7, #28]
 801ef9e:	9300      	str	r3, [sp, #0]
 801efa0:	2319      	movs	r3, #25
 801efa2:	2201      	movs	r2, #1
 801efa4:	4921      	ldr	r1, [pc, #132]	; (801f02c <HAL_I2C_IsDeviceReady+0x254>)
 801efa6:	68f8      	ldr	r0, [r7, #12]
 801efa8:	f000 f8c6 	bl	801f138 <I2C_WaitOnFlagUntilTimeout>
 801efac:	4603      	mov	r3, r0
 801efae:	2b00      	cmp	r3, #0
 801efb0:	d001      	beq.n	801efb6 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 801efb2:	2301      	movs	r3, #1
 801efb4:	e036      	b.n	801f024 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 801efb6:	68fb      	ldr	r3, [r7, #12]
 801efb8:	2220      	movs	r2, #32
 801efba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 801efbe:	68fb      	ldr	r3, [r7, #12]
 801efc0:	2200      	movs	r2, #0
 801efc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 801efc6:	2300      	movs	r3, #0
 801efc8:	e02c      	b.n	801f024 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 801efca:	68fb      	ldr	r3, [r7, #12]
 801efcc:	681b      	ldr	r3, [r3, #0]
 801efce:	681a      	ldr	r2, [r3, #0]
 801efd0:	68fb      	ldr	r3, [r7, #12]
 801efd2:	681b      	ldr	r3, [r3, #0]
 801efd4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801efd8:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 801efda:	68fb      	ldr	r3, [r7, #12]
 801efdc:	681b      	ldr	r3, [r3, #0]
 801efde:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 801efe2:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 801efe4:	69fb      	ldr	r3, [r7, #28]
 801efe6:	9300      	str	r3, [sp, #0]
 801efe8:	2319      	movs	r3, #25
 801efea:	2201      	movs	r2, #1
 801efec:	490f      	ldr	r1, [pc, #60]	; (801f02c <HAL_I2C_IsDeviceReady+0x254>)
 801efee:	68f8      	ldr	r0, [r7, #12]
 801eff0:	f000 f8a2 	bl	801f138 <I2C_WaitOnFlagUntilTimeout>
 801eff4:	4603      	mov	r3, r0
 801eff6:	2b00      	cmp	r3, #0
 801eff8:	d001      	beq.n	801effe <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 801effa:	2301      	movs	r3, #1
 801effc:	e012      	b.n	801f024 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 801effe:	69bb      	ldr	r3, [r7, #24]
 801f000:	3301      	adds	r3, #1
 801f002:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 801f004:	69ba      	ldr	r2, [r7, #24]
 801f006:	687b      	ldr	r3, [r7, #4]
 801f008:	429a      	cmp	r2, r3
 801f00a:	f4ff af32 	bcc.w	801ee72 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 801f00e:	68fb      	ldr	r3, [r7, #12]
 801f010:	2220      	movs	r2, #32
 801f012:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 801f016:	68fb      	ldr	r3, [r7, #12]
 801f018:	2200      	movs	r2, #0
 801f01a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 801f01e:	2301      	movs	r3, #1
 801f020:	e000      	b.n	801f024 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 801f022:	2302      	movs	r3, #2
  }
}
 801f024:	4618      	mov	r0, r3
 801f026:	3720      	adds	r7, #32
 801f028:	46bd      	mov	sp, r7
 801f02a:	bd80      	pop	{r7, pc}
 801f02c:	00100002 	.word	0x00100002
 801f030:	ffff0000 	.word	0xffff0000

0801f034 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 801f034:	b580      	push	{r7, lr}
 801f036:	b088      	sub	sp, #32
 801f038:	af02      	add	r7, sp, #8
 801f03a:	60f8      	str	r0, [r7, #12]
 801f03c:	607a      	str	r2, [r7, #4]
 801f03e:	603b      	str	r3, [r7, #0]
 801f040:	460b      	mov	r3, r1
 801f042:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 801f044:	68fb      	ldr	r3, [r7, #12]
 801f046:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801f048:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 801f04a:	697b      	ldr	r3, [r7, #20]
 801f04c:	2b08      	cmp	r3, #8
 801f04e:	d006      	beq.n	801f05e <I2C_MasterRequestWrite+0x2a>
 801f050:	697b      	ldr	r3, [r7, #20]
 801f052:	2b01      	cmp	r3, #1
 801f054:	d003      	beq.n	801f05e <I2C_MasterRequestWrite+0x2a>
 801f056:	697b      	ldr	r3, [r7, #20]
 801f058:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 801f05c:	d108      	bne.n	801f070 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 801f05e:	68fb      	ldr	r3, [r7, #12]
 801f060:	681b      	ldr	r3, [r3, #0]
 801f062:	681a      	ldr	r2, [r3, #0]
 801f064:	68fb      	ldr	r3, [r7, #12]
 801f066:	681b      	ldr	r3, [r3, #0]
 801f068:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801f06c:	601a      	str	r2, [r3, #0]
 801f06e:	e00b      	b.n	801f088 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 801f070:	68fb      	ldr	r3, [r7, #12]
 801f072:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801f074:	2b12      	cmp	r3, #18
 801f076:	d107      	bne.n	801f088 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 801f078:	68fb      	ldr	r3, [r7, #12]
 801f07a:	681b      	ldr	r3, [r3, #0]
 801f07c:	681a      	ldr	r2, [r3, #0]
 801f07e:	68fb      	ldr	r3, [r7, #12]
 801f080:	681b      	ldr	r3, [r3, #0]
 801f082:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801f086:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 801f088:	683b      	ldr	r3, [r7, #0]
 801f08a:	9300      	str	r3, [sp, #0]
 801f08c:	687b      	ldr	r3, [r7, #4]
 801f08e:	2200      	movs	r2, #0
 801f090:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 801f094:	68f8      	ldr	r0, [r7, #12]
 801f096:	f000 f84f 	bl	801f138 <I2C_WaitOnFlagUntilTimeout>
 801f09a:	4603      	mov	r3, r0
 801f09c:	2b00      	cmp	r3, #0
 801f09e:	d00d      	beq.n	801f0bc <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 801f0a0:	68fb      	ldr	r3, [r7, #12]
 801f0a2:	681b      	ldr	r3, [r3, #0]
 801f0a4:	681b      	ldr	r3, [r3, #0]
 801f0a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801f0aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801f0ae:	d103      	bne.n	801f0b8 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 801f0b0:	68fb      	ldr	r3, [r7, #12]
 801f0b2:	f44f 7200 	mov.w	r2, #512	; 0x200
 801f0b6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 801f0b8:	2303      	movs	r3, #3
 801f0ba:	e035      	b.n	801f128 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 801f0bc:	68fb      	ldr	r3, [r7, #12]
 801f0be:	691b      	ldr	r3, [r3, #16]
 801f0c0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801f0c4:	d108      	bne.n	801f0d8 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 801f0c6:	897b      	ldrh	r3, [r7, #10]
 801f0c8:	b2db      	uxtb	r3, r3
 801f0ca:	461a      	mov	r2, r3
 801f0cc:	68fb      	ldr	r3, [r7, #12]
 801f0ce:	681b      	ldr	r3, [r3, #0]
 801f0d0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 801f0d4:	611a      	str	r2, [r3, #16]
 801f0d6:	e01b      	b.n	801f110 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 801f0d8:	897b      	ldrh	r3, [r7, #10]
 801f0da:	11db      	asrs	r3, r3, #7
 801f0dc:	b2db      	uxtb	r3, r3
 801f0de:	f003 0306 	and.w	r3, r3, #6
 801f0e2:	b2db      	uxtb	r3, r3
 801f0e4:	f063 030f 	orn	r3, r3, #15
 801f0e8:	b2da      	uxtb	r2, r3
 801f0ea:	68fb      	ldr	r3, [r7, #12]
 801f0ec:	681b      	ldr	r3, [r3, #0]
 801f0ee:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 801f0f0:	683b      	ldr	r3, [r7, #0]
 801f0f2:	687a      	ldr	r2, [r7, #4]
 801f0f4:	490e      	ldr	r1, [pc, #56]	; (801f130 <I2C_MasterRequestWrite+0xfc>)
 801f0f6:	68f8      	ldr	r0, [r7, #12]
 801f0f8:	f000 f875 	bl	801f1e6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 801f0fc:	4603      	mov	r3, r0
 801f0fe:	2b00      	cmp	r3, #0
 801f100:	d001      	beq.n	801f106 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 801f102:	2301      	movs	r3, #1
 801f104:	e010      	b.n	801f128 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 801f106:	897b      	ldrh	r3, [r7, #10]
 801f108:	b2da      	uxtb	r2, r3
 801f10a:	68fb      	ldr	r3, [r7, #12]
 801f10c:	681b      	ldr	r3, [r3, #0]
 801f10e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 801f110:	683b      	ldr	r3, [r7, #0]
 801f112:	687a      	ldr	r2, [r7, #4]
 801f114:	4907      	ldr	r1, [pc, #28]	; (801f134 <I2C_MasterRequestWrite+0x100>)
 801f116:	68f8      	ldr	r0, [r7, #12]
 801f118:	f000 f865 	bl	801f1e6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 801f11c:	4603      	mov	r3, r0
 801f11e:	2b00      	cmp	r3, #0
 801f120:	d001      	beq.n	801f126 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 801f122:	2301      	movs	r3, #1
 801f124:	e000      	b.n	801f128 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 801f126:	2300      	movs	r3, #0
}
 801f128:	4618      	mov	r0, r3
 801f12a:	3718      	adds	r7, #24
 801f12c:	46bd      	mov	sp, r7
 801f12e:	bd80      	pop	{r7, pc}
 801f130:	00010008 	.word	0x00010008
 801f134:	00010002 	.word	0x00010002

0801f138 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 801f138:	b580      	push	{r7, lr}
 801f13a:	b084      	sub	sp, #16
 801f13c:	af00      	add	r7, sp, #0
 801f13e:	60f8      	str	r0, [r7, #12]
 801f140:	60b9      	str	r1, [r7, #8]
 801f142:	603b      	str	r3, [r7, #0]
 801f144:	4613      	mov	r3, r2
 801f146:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 801f148:	e025      	b.n	801f196 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801f14a:	683b      	ldr	r3, [r7, #0]
 801f14c:	f1b3 3fff 	cmp.w	r3, #4294967295
 801f150:	d021      	beq.n	801f196 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801f152:	f7fe fced 	bl	801db30 <HAL_GetTick>
 801f156:	4602      	mov	r2, r0
 801f158:	69bb      	ldr	r3, [r7, #24]
 801f15a:	1ad3      	subs	r3, r2, r3
 801f15c:	683a      	ldr	r2, [r7, #0]
 801f15e:	429a      	cmp	r2, r3
 801f160:	d302      	bcc.n	801f168 <I2C_WaitOnFlagUntilTimeout+0x30>
 801f162:	683b      	ldr	r3, [r7, #0]
 801f164:	2b00      	cmp	r3, #0
 801f166:	d116      	bne.n	801f196 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 801f168:	68fb      	ldr	r3, [r7, #12]
 801f16a:	2200      	movs	r2, #0
 801f16c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 801f16e:	68fb      	ldr	r3, [r7, #12]
 801f170:	2220      	movs	r2, #32
 801f172:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 801f176:	68fb      	ldr	r3, [r7, #12]
 801f178:	2200      	movs	r2, #0
 801f17a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 801f17e:	68fb      	ldr	r3, [r7, #12]
 801f180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801f182:	f043 0220 	orr.w	r2, r3, #32
 801f186:	68fb      	ldr	r3, [r7, #12]
 801f188:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 801f18a:	68fb      	ldr	r3, [r7, #12]
 801f18c:	2200      	movs	r2, #0
 801f18e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 801f192:	2301      	movs	r3, #1
 801f194:	e023      	b.n	801f1de <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 801f196:	68bb      	ldr	r3, [r7, #8]
 801f198:	0c1b      	lsrs	r3, r3, #16
 801f19a:	b2db      	uxtb	r3, r3
 801f19c:	2b01      	cmp	r3, #1
 801f19e:	d10d      	bne.n	801f1bc <I2C_WaitOnFlagUntilTimeout+0x84>
 801f1a0:	68fb      	ldr	r3, [r7, #12]
 801f1a2:	681b      	ldr	r3, [r3, #0]
 801f1a4:	695b      	ldr	r3, [r3, #20]
 801f1a6:	43da      	mvns	r2, r3
 801f1a8:	68bb      	ldr	r3, [r7, #8]
 801f1aa:	4013      	ands	r3, r2
 801f1ac:	b29b      	uxth	r3, r3
 801f1ae:	2b00      	cmp	r3, #0
 801f1b0:	bf0c      	ite	eq
 801f1b2:	2301      	moveq	r3, #1
 801f1b4:	2300      	movne	r3, #0
 801f1b6:	b2db      	uxtb	r3, r3
 801f1b8:	461a      	mov	r2, r3
 801f1ba:	e00c      	b.n	801f1d6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 801f1bc:	68fb      	ldr	r3, [r7, #12]
 801f1be:	681b      	ldr	r3, [r3, #0]
 801f1c0:	699b      	ldr	r3, [r3, #24]
 801f1c2:	43da      	mvns	r2, r3
 801f1c4:	68bb      	ldr	r3, [r7, #8]
 801f1c6:	4013      	ands	r3, r2
 801f1c8:	b29b      	uxth	r3, r3
 801f1ca:	2b00      	cmp	r3, #0
 801f1cc:	bf0c      	ite	eq
 801f1ce:	2301      	moveq	r3, #1
 801f1d0:	2300      	movne	r3, #0
 801f1d2:	b2db      	uxtb	r3, r3
 801f1d4:	461a      	mov	r2, r3
 801f1d6:	79fb      	ldrb	r3, [r7, #7]
 801f1d8:	429a      	cmp	r2, r3
 801f1da:	d0b6      	beq.n	801f14a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 801f1dc:	2300      	movs	r3, #0
}
 801f1de:	4618      	mov	r0, r3
 801f1e0:	3710      	adds	r7, #16
 801f1e2:	46bd      	mov	sp, r7
 801f1e4:	bd80      	pop	{r7, pc}

0801f1e6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 801f1e6:	b580      	push	{r7, lr}
 801f1e8:	b084      	sub	sp, #16
 801f1ea:	af00      	add	r7, sp, #0
 801f1ec:	60f8      	str	r0, [r7, #12]
 801f1ee:	60b9      	str	r1, [r7, #8]
 801f1f0:	607a      	str	r2, [r7, #4]
 801f1f2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 801f1f4:	e051      	b.n	801f29a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 801f1f6:	68fb      	ldr	r3, [r7, #12]
 801f1f8:	681b      	ldr	r3, [r3, #0]
 801f1fa:	695b      	ldr	r3, [r3, #20]
 801f1fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801f200:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801f204:	d123      	bne.n	801f24e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 801f206:	68fb      	ldr	r3, [r7, #12]
 801f208:	681b      	ldr	r3, [r3, #0]
 801f20a:	681a      	ldr	r2, [r3, #0]
 801f20c:	68fb      	ldr	r3, [r7, #12]
 801f20e:	681b      	ldr	r3, [r3, #0]
 801f210:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801f214:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 801f216:	68fb      	ldr	r3, [r7, #12]
 801f218:	681b      	ldr	r3, [r3, #0]
 801f21a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 801f21e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 801f220:	68fb      	ldr	r3, [r7, #12]
 801f222:	2200      	movs	r2, #0
 801f224:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 801f226:	68fb      	ldr	r3, [r7, #12]
 801f228:	2220      	movs	r2, #32
 801f22a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 801f22e:	68fb      	ldr	r3, [r7, #12]
 801f230:	2200      	movs	r2, #0
 801f232:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 801f236:	68fb      	ldr	r3, [r7, #12]
 801f238:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801f23a:	f043 0204 	orr.w	r2, r3, #4
 801f23e:	68fb      	ldr	r3, [r7, #12]
 801f240:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 801f242:	68fb      	ldr	r3, [r7, #12]
 801f244:	2200      	movs	r2, #0
 801f246:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 801f24a:	2301      	movs	r3, #1
 801f24c:	e046      	b.n	801f2dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801f24e:	687b      	ldr	r3, [r7, #4]
 801f250:	f1b3 3fff 	cmp.w	r3, #4294967295
 801f254:	d021      	beq.n	801f29a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801f256:	f7fe fc6b 	bl	801db30 <HAL_GetTick>
 801f25a:	4602      	mov	r2, r0
 801f25c:	683b      	ldr	r3, [r7, #0]
 801f25e:	1ad3      	subs	r3, r2, r3
 801f260:	687a      	ldr	r2, [r7, #4]
 801f262:	429a      	cmp	r2, r3
 801f264:	d302      	bcc.n	801f26c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 801f266:	687b      	ldr	r3, [r7, #4]
 801f268:	2b00      	cmp	r3, #0
 801f26a:	d116      	bne.n	801f29a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 801f26c:	68fb      	ldr	r3, [r7, #12]
 801f26e:	2200      	movs	r2, #0
 801f270:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 801f272:	68fb      	ldr	r3, [r7, #12]
 801f274:	2220      	movs	r2, #32
 801f276:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 801f27a:	68fb      	ldr	r3, [r7, #12]
 801f27c:	2200      	movs	r2, #0
 801f27e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 801f282:	68fb      	ldr	r3, [r7, #12]
 801f284:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801f286:	f043 0220 	orr.w	r2, r3, #32
 801f28a:	68fb      	ldr	r3, [r7, #12]
 801f28c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 801f28e:	68fb      	ldr	r3, [r7, #12]
 801f290:	2200      	movs	r2, #0
 801f292:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 801f296:	2301      	movs	r3, #1
 801f298:	e020      	b.n	801f2dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 801f29a:	68bb      	ldr	r3, [r7, #8]
 801f29c:	0c1b      	lsrs	r3, r3, #16
 801f29e:	b2db      	uxtb	r3, r3
 801f2a0:	2b01      	cmp	r3, #1
 801f2a2:	d10c      	bne.n	801f2be <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 801f2a4:	68fb      	ldr	r3, [r7, #12]
 801f2a6:	681b      	ldr	r3, [r3, #0]
 801f2a8:	695b      	ldr	r3, [r3, #20]
 801f2aa:	43da      	mvns	r2, r3
 801f2ac:	68bb      	ldr	r3, [r7, #8]
 801f2ae:	4013      	ands	r3, r2
 801f2b0:	b29b      	uxth	r3, r3
 801f2b2:	2b00      	cmp	r3, #0
 801f2b4:	bf14      	ite	ne
 801f2b6:	2301      	movne	r3, #1
 801f2b8:	2300      	moveq	r3, #0
 801f2ba:	b2db      	uxtb	r3, r3
 801f2bc:	e00b      	b.n	801f2d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 801f2be:	68fb      	ldr	r3, [r7, #12]
 801f2c0:	681b      	ldr	r3, [r3, #0]
 801f2c2:	699b      	ldr	r3, [r3, #24]
 801f2c4:	43da      	mvns	r2, r3
 801f2c6:	68bb      	ldr	r3, [r7, #8]
 801f2c8:	4013      	ands	r3, r2
 801f2ca:	b29b      	uxth	r3, r3
 801f2cc:	2b00      	cmp	r3, #0
 801f2ce:	bf14      	ite	ne
 801f2d0:	2301      	movne	r3, #1
 801f2d2:	2300      	moveq	r3, #0
 801f2d4:	b2db      	uxtb	r3, r3
 801f2d6:	2b00      	cmp	r3, #0
 801f2d8:	d18d      	bne.n	801f1f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 801f2da:	2300      	movs	r3, #0
}
 801f2dc:	4618      	mov	r0, r3
 801f2de:	3710      	adds	r7, #16
 801f2e0:	46bd      	mov	sp, r7
 801f2e2:	bd80      	pop	{r7, pc}

0801f2e4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 801f2e4:	b580      	push	{r7, lr}
 801f2e6:	b084      	sub	sp, #16
 801f2e8:	af00      	add	r7, sp, #0
 801f2ea:	60f8      	str	r0, [r7, #12]
 801f2ec:	60b9      	str	r1, [r7, #8]
 801f2ee:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 801f2f0:	e02d      	b.n	801f34e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 801f2f2:	68f8      	ldr	r0, [r7, #12]
 801f2f4:	f000 f878 	bl	801f3e8 <I2C_IsAcknowledgeFailed>
 801f2f8:	4603      	mov	r3, r0
 801f2fa:	2b00      	cmp	r3, #0
 801f2fc:	d001      	beq.n	801f302 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 801f2fe:	2301      	movs	r3, #1
 801f300:	e02d      	b.n	801f35e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801f302:	68bb      	ldr	r3, [r7, #8]
 801f304:	f1b3 3fff 	cmp.w	r3, #4294967295
 801f308:	d021      	beq.n	801f34e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801f30a:	f7fe fc11 	bl	801db30 <HAL_GetTick>
 801f30e:	4602      	mov	r2, r0
 801f310:	687b      	ldr	r3, [r7, #4]
 801f312:	1ad3      	subs	r3, r2, r3
 801f314:	68ba      	ldr	r2, [r7, #8]
 801f316:	429a      	cmp	r2, r3
 801f318:	d302      	bcc.n	801f320 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 801f31a:	68bb      	ldr	r3, [r7, #8]
 801f31c:	2b00      	cmp	r3, #0
 801f31e:	d116      	bne.n	801f34e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 801f320:	68fb      	ldr	r3, [r7, #12]
 801f322:	2200      	movs	r2, #0
 801f324:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 801f326:	68fb      	ldr	r3, [r7, #12]
 801f328:	2220      	movs	r2, #32
 801f32a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 801f32e:	68fb      	ldr	r3, [r7, #12]
 801f330:	2200      	movs	r2, #0
 801f332:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 801f336:	68fb      	ldr	r3, [r7, #12]
 801f338:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801f33a:	f043 0220 	orr.w	r2, r3, #32
 801f33e:	68fb      	ldr	r3, [r7, #12]
 801f340:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 801f342:	68fb      	ldr	r3, [r7, #12]
 801f344:	2200      	movs	r2, #0
 801f346:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 801f34a:	2301      	movs	r3, #1
 801f34c:	e007      	b.n	801f35e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 801f34e:	68fb      	ldr	r3, [r7, #12]
 801f350:	681b      	ldr	r3, [r3, #0]
 801f352:	695b      	ldr	r3, [r3, #20]
 801f354:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801f358:	2b80      	cmp	r3, #128	; 0x80
 801f35a:	d1ca      	bne.n	801f2f2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 801f35c:	2300      	movs	r3, #0
}
 801f35e:	4618      	mov	r0, r3
 801f360:	3710      	adds	r7, #16
 801f362:	46bd      	mov	sp, r7
 801f364:	bd80      	pop	{r7, pc}

0801f366 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 801f366:	b580      	push	{r7, lr}
 801f368:	b084      	sub	sp, #16
 801f36a:	af00      	add	r7, sp, #0
 801f36c:	60f8      	str	r0, [r7, #12]
 801f36e:	60b9      	str	r1, [r7, #8]
 801f370:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 801f372:	e02d      	b.n	801f3d0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 801f374:	68f8      	ldr	r0, [r7, #12]
 801f376:	f000 f837 	bl	801f3e8 <I2C_IsAcknowledgeFailed>
 801f37a:	4603      	mov	r3, r0
 801f37c:	2b00      	cmp	r3, #0
 801f37e:	d001      	beq.n	801f384 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 801f380:	2301      	movs	r3, #1
 801f382:	e02d      	b.n	801f3e0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801f384:	68bb      	ldr	r3, [r7, #8]
 801f386:	f1b3 3fff 	cmp.w	r3, #4294967295
 801f38a:	d021      	beq.n	801f3d0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801f38c:	f7fe fbd0 	bl	801db30 <HAL_GetTick>
 801f390:	4602      	mov	r2, r0
 801f392:	687b      	ldr	r3, [r7, #4]
 801f394:	1ad3      	subs	r3, r2, r3
 801f396:	68ba      	ldr	r2, [r7, #8]
 801f398:	429a      	cmp	r2, r3
 801f39a:	d302      	bcc.n	801f3a2 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 801f39c:	68bb      	ldr	r3, [r7, #8]
 801f39e:	2b00      	cmp	r3, #0
 801f3a0:	d116      	bne.n	801f3d0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 801f3a2:	68fb      	ldr	r3, [r7, #12]
 801f3a4:	2200      	movs	r2, #0
 801f3a6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 801f3a8:	68fb      	ldr	r3, [r7, #12]
 801f3aa:	2220      	movs	r2, #32
 801f3ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 801f3b0:	68fb      	ldr	r3, [r7, #12]
 801f3b2:	2200      	movs	r2, #0
 801f3b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 801f3b8:	68fb      	ldr	r3, [r7, #12]
 801f3ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801f3bc:	f043 0220 	orr.w	r2, r3, #32
 801f3c0:	68fb      	ldr	r3, [r7, #12]
 801f3c2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 801f3c4:	68fb      	ldr	r3, [r7, #12]
 801f3c6:	2200      	movs	r2, #0
 801f3c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 801f3cc:	2301      	movs	r3, #1
 801f3ce:	e007      	b.n	801f3e0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 801f3d0:	68fb      	ldr	r3, [r7, #12]
 801f3d2:	681b      	ldr	r3, [r3, #0]
 801f3d4:	695b      	ldr	r3, [r3, #20]
 801f3d6:	f003 0304 	and.w	r3, r3, #4
 801f3da:	2b04      	cmp	r3, #4
 801f3dc:	d1ca      	bne.n	801f374 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 801f3de:	2300      	movs	r3, #0
}
 801f3e0:	4618      	mov	r0, r3
 801f3e2:	3710      	adds	r7, #16
 801f3e4:	46bd      	mov	sp, r7
 801f3e6:	bd80      	pop	{r7, pc}

0801f3e8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 801f3e8:	b480      	push	{r7}
 801f3ea:	b083      	sub	sp, #12
 801f3ec:	af00      	add	r7, sp, #0
 801f3ee:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 801f3f0:	687b      	ldr	r3, [r7, #4]
 801f3f2:	681b      	ldr	r3, [r3, #0]
 801f3f4:	695b      	ldr	r3, [r3, #20]
 801f3f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801f3fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801f3fe:	d11b      	bne.n	801f438 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 801f400:	687b      	ldr	r3, [r7, #4]
 801f402:	681b      	ldr	r3, [r3, #0]
 801f404:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 801f408:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 801f40a:	687b      	ldr	r3, [r7, #4]
 801f40c:	2200      	movs	r2, #0
 801f40e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 801f410:	687b      	ldr	r3, [r7, #4]
 801f412:	2220      	movs	r2, #32
 801f414:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 801f418:	687b      	ldr	r3, [r7, #4]
 801f41a:	2200      	movs	r2, #0
 801f41c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 801f420:	687b      	ldr	r3, [r7, #4]
 801f422:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801f424:	f043 0204 	orr.w	r2, r3, #4
 801f428:	687b      	ldr	r3, [r7, #4]
 801f42a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 801f42c:	687b      	ldr	r3, [r7, #4]
 801f42e:	2200      	movs	r2, #0
 801f430:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 801f434:	2301      	movs	r3, #1
 801f436:	e000      	b.n	801f43a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 801f438:	2300      	movs	r3, #0
}
 801f43a:	4618      	mov	r0, r3
 801f43c:	370c      	adds	r7, #12
 801f43e:	46bd      	mov	sp, r7
 801f440:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f444:	4770      	bx	lr
	...

0801f448 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 801f448:	b580      	push	{r7, lr}
 801f44a:	b086      	sub	sp, #24
 801f44c:	af00      	add	r7, sp, #0
 801f44e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 801f450:	687b      	ldr	r3, [r7, #4]
 801f452:	2b00      	cmp	r3, #0
 801f454:	d101      	bne.n	801f45a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 801f456:	2301      	movs	r3, #1
 801f458:	e264      	b.n	801f924 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 801f45a:	687b      	ldr	r3, [r7, #4]
 801f45c:	681b      	ldr	r3, [r3, #0]
 801f45e:	f003 0301 	and.w	r3, r3, #1
 801f462:	2b00      	cmp	r3, #0
 801f464:	d075      	beq.n	801f552 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 801f466:	4ba3      	ldr	r3, [pc, #652]	; (801f6f4 <HAL_RCC_OscConfig+0x2ac>)
 801f468:	689b      	ldr	r3, [r3, #8]
 801f46a:	f003 030c 	and.w	r3, r3, #12
 801f46e:	2b04      	cmp	r3, #4
 801f470:	d00c      	beq.n	801f48c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 801f472:	4ba0      	ldr	r3, [pc, #640]	; (801f6f4 <HAL_RCC_OscConfig+0x2ac>)
 801f474:	689b      	ldr	r3, [r3, #8]
 801f476:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 801f47a:	2b08      	cmp	r3, #8
 801f47c:	d112      	bne.n	801f4a4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 801f47e:	4b9d      	ldr	r3, [pc, #628]	; (801f6f4 <HAL_RCC_OscConfig+0x2ac>)
 801f480:	685b      	ldr	r3, [r3, #4]
 801f482:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801f486:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 801f48a:	d10b      	bne.n	801f4a4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 801f48c:	4b99      	ldr	r3, [pc, #612]	; (801f6f4 <HAL_RCC_OscConfig+0x2ac>)
 801f48e:	681b      	ldr	r3, [r3, #0]
 801f490:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801f494:	2b00      	cmp	r3, #0
 801f496:	d05b      	beq.n	801f550 <HAL_RCC_OscConfig+0x108>
 801f498:	687b      	ldr	r3, [r7, #4]
 801f49a:	685b      	ldr	r3, [r3, #4]
 801f49c:	2b00      	cmp	r3, #0
 801f49e:	d157      	bne.n	801f550 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 801f4a0:	2301      	movs	r3, #1
 801f4a2:	e23f      	b.n	801f924 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 801f4a4:	687b      	ldr	r3, [r7, #4]
 801f4a6:	685b      	ldr	r3, [r3, #4]
 801f4a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801f4ac:	d106      	bne.n	801f4bc <HAL_RCC_OscConfig+0x74>
 801f4ae:	4b91      	ldr	r3, [pc, #580]	; (801f6f4 <HAL_RCC_OscConfig+0x2ac>)
 801f4b0:	681b      	ldr	r3, [r3, #0]
 801f4b2:	4a90      	ldr	r2, [pc, #576]	; (801f6f4 <HAL_RCC_OscConfig+0x2ac>)
 801f4b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801f4b8:	6013      	str	r3, [r2, #0]
 801f4ba:	e01d      	b.n	801f4f8 <HAL_RCC_OscConfig+0xb0>
 801f4bc:	687b      	ldr	r3, [r7, #4]
 801f4be:	685b      	ldr	r3, [r3, #4]
 801f4c0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 801f4c4:	d10c      	bne.n	801f4e0 <HAL_RCC_OscConfig+0x98>
 801f4c6:	4b8b      	ldr	r3, [pc, #556]	; (801f6f4 <HAL_RCC_OscConfig+0x2ac>)
 801f4c8:	681b      	ldr	r3, [r3, #0]
 801f4ca:	4a8a      	ldr	r2, [pc, #552]	; (801f6f4 <HAL_RCC_OscConfig+0x2ac>)
 801f4cc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 801f4d0:	6013      	str	r3, [r2, #0]
 801f4d2:	4b88      	ldr	r3, [pc, #544]	; (801f6f4 <HAL_RCC_OscConfig+0x2ac>)
 801f4d4:	681b      	ldr	r3, [r3, #0]
 801f4d6:	4a87      	ldr	r2, [pc, #540]	; (801f6f4 <HAL_RCC_OscConfig+0x2ac>)
 801f4d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801f4dc:	6013      	str	r3, [r2, #0]
 801f4de:	e00b      	b.n	801f4f8 <HAL_RCC_OscConfig+0xb0>
 801f4e0:	4b84      	ldr	r3, [pc, #528]	; (801f6f4 <HAL_RCC_OscConfig+0x2ac>)
 801f4e2:	681b      	ldr	r3, [r3, #0]
 801f4e4:	4a83      	ldr	r2, [pc, #524]	; (801f6f4 <HAL_RCC_OscConfig+0x2ac>)
 801f4e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801f4ea:	6013      	str	r3, [r2, #0]
 801f4ec:	4b81      	ldr	r3, [pc, #516]	; (801f6f4 <HAL_RCC_OscConfig+0x2ac>)
 801f4ee:	681b      	ldr	r3, [r3, #0]
 801f4f0:	4a80      	ldr	r2, [pc, #512]	; (801f6f4 <HAL_RCC_OscConfig+0x2ac>)
 801f4f2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 801f4f6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 801f4f8:	687b      	ldr	r3, [r7, #4]
 801f4fa:	685b      	ldr	r3, [r3, #4]
 801f4fc:	2b00      	cmp	r3, #0
 801f4fe:	d013      	beq.n	801f528 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801f500:	f7fe fb16 	bl	801db30 <HAL_GetTick>
 801f504:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 801f506:	e008      	b.n	801f51a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 801f508:	f7fe fb12 	bl	801db30 <HAL_GetTick>
 801f50c:	4602      	mov	r2, r0
 801f50e:	693b      	ldr	r3, [r7, #16]
 801f510:	1ad3      	subs	r3, r2, r3
 801f512:	2b64      	cmp	r3, #100	; 0x64
 801f514:	d901      	bls.n	801f51a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 801f516:	2303      	movs	r3, #3
 801f518:	e204      	b.n	801f924 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 801f51a:	4b76      	ldr	r3, [pc, #472]	; (801f6f4 <HAL_RCC_OscConfig+0x2ac>)
 801f51c:	681b      	ldr	r3, [r3, #0]
 801f51e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801f522:	2b00      	cmp	r3, #0
 801f524:	d0f0      	beq.n	801f508 <HAL_RCC_OscConfig+0xc0>
 801f526:	e014      	b.n	801f552 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801f528:	f7fe fb02 	bl	801db30 <HAL_GetTick>
 801f52c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 801f52e:	e008      	b.n	801f542 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 801f530:	f7fe fafe 	bl	801db30 <HAL_GetTick>
 801f534:	4602      	mov	r2, r0
 801f536:	693b      	ldr	r3, [r7, #16]
 801f538:	1ad3      	subs	r3, r2, r3
 801f53a:	2b64      	cmp	r3, #100	; 0x64
 801f53c:	d901      	bls.n	801f542 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 801f53e:	2303      	movs	r3, #3
 801f540:	e1f0      	b.n	801f924 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 801f542:	4b6c      	ldr	r3, [pc, #432]	; (801f6f4 <HAL_RCC_OscConfig+0x2ac>)
 801f544:	681b      	ldr	r3, [r3, #0]
 801f546:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801f54a:	2b00      	cmp	r3, #0
 801f54c:	d1f0      	bne.n	801f530 <HAL_RCC_OscConfig+0xe8>
 801f54e:	e000      	b.n	801f552 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 801f550:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 801f552:	687b      	ldr	r3, [r7, #4]
 801f554:	681b      	ldr	r3, [r3, #0]
 801f556:	f003 0302 	and.w	r3, r3, #2
 801f55a:	2b00      	cmp	r3, #0
 801f55c:	d063      	beq.n	801f626 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 801f55e:	4b65      	ldr	r3, [pc, #404]	; (801f6f4 <HAL_RCC_OscConfig+0x2ac>)
 801f560:	689b      	ldr	r3, [r3, #8]
 801f562:	f003 030c 	and.w	r3, r3, #12
 801f566:	2b00      	cmp	r3, #0
 801f568:	d00b      	beq.n	801f582 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 801f56a:	4b62      	ldr	r3, [pc, #392]	; (801f6f4 <HAL_RCC_OscConfig+0x2ac>)
 801f56c:	689b      	ldr	r3, [r3, #8]
 801f56e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 801f572:	2b08      	cmp	r3, #8
 801f574:	d11c      	bne.n	801f5b0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 801f576:	4b5f      	ldr	r3, [pc, #380]	; (801f6f4 <HAL_RCC_OscConfig+0x2ac>)
 801f578:	685b      	ldr	r3, [r3, #4]
 801f57a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801f57e:	2b00      	cmp	r3, #0
 801f580:	d116      	bne.n	801f5b0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 801f582:	4b5c      	ldr	r3, [pc, #368]	; (801f6f4 <HAL_RCC_OscConfig+0x2ac>)
 801f584:	681b      	ldr	r3, [r3, #0]
 801f586:	f003 0302 	and.w	r3, r3, #2
 801f58a:	2b00      	cmp	r3, #0
 801f58c:	d005      	beq.n	801f59a <HAL_RCC_OscConfig+0x152>
 801f58e:	687b      	ldr	r3, [r7, #4]
 801f590:	68db      	ldr	r3, [r3, #12]
 801f592:	2b01      	cmp	r3, #1
 801f594:	d001      	beq.n	801f59a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 801f596:	2301      	movs	r3, #1
 801f598:	e1c4      	b.n	801f924 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801f59a:	4b56      	ldr	r3, [pc, #344]	; (801f6f4 <HAL_RCC_OscConfig+0x2ac>)
 801f59c:	681b      	ldr	r3, [r3, #0]
 801f59e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 801f5a2:	687b      	ldr	r3, [r7, #4]
 801f5a4:	691b      	ldr	r3, [r3, #16]
 801f5a6:	00db      	lsls	r3, r3, #3
 801f5a8:	4952      	ldr	r1, [pc, #328]	; (801f6f4 <HAL_RCC_OscConfig+0x2ac>)
 801f5aa:	4313      	orrs	r3, r2
 801f5ac:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 801f5ae:	e03a      	b.n	801f626 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 801f5b0:	687b      	ldr	r3, [r7, #4]
 801f5b2:	68db      	ldr	r3, [r3, #12]
 801f5b4:	2b00      	cmp	r3, #0
 801f5b6:	d020      	beq.n	801f5fa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 801f5b8:	4b4f      	ldr	r3, [pc, #316]	; (801f6f8 <HAL_RCC_OscConfig+0x2b0>)
 801f5ba:	2201      	movs	r2, #1
 801f5bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801f5be:	f7fe fab7 	bl	801db30 <HAL_GetTick>
 801f5c2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 801f5c4:	e008      	b.n	801f5d8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 801f5c6:	f7fe fab3 	bl	801db30 <HAL_GetTick>
 801f5ca:	4602      	mov	r2, r0
 801f5cc:	693b      	ldr	r3, [r7, #16]
 801f5ce:	1ad3      	subs	r3, r2, r3
 801f5d0:	2b02      	cmp	r3, #2
 801f5d2:	d901      	bls.n	801f5d8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 801f5d4:	2303      	movs	r3, #3
 801f5d6:	e1a5      	b.n	801f924 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 801f5d8:	4b46      	ldr	r3, [pc, #280]	; (801f6f4 <HAL_RCC_OscConfig+0x2ac>)
 801f5da:	681b      	ldr	r3, [r3, #0]
 801f5dc:	f003 0302 	and.w	r3, r3, #2
 801f5e0:	2b00      	cmp	r3, #0
 801f5e2:	d0f0      	beq.n	801f5c6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801f5e4:	4b43      	ldr	r3, [pc, #268]	; (801f6f4 <HAL_RCC_OscConfig+0x2ac>)
 801f5e6:	681b      	ldr	r3, [r3, #0]
 801f5e8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 801f5ec:	687b      	ldr	r3, [r7, #4]
 801f5ee:	691b      	ldr	r3, [r3, #16]
 801f5f0:	00db      	lsls	r3, r3, #3
 801f5f2:	4940      	ldr	r1, [pc, #256]	; (801f6f4 <HAL_RCC_OscConfig+0x2ac>)
 801f5f4:	4313      	orrs	r3, r2
 801f5f6:	600b      	str	r3, [r1, #0]
 801f5f8:	e015      	b.n	801f626 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 801f5fa:	4b3f      	ldr	r3, [pc, #252]	; (801f6f8 <HAL_RCC_OscConfig+0x2b0>)
 801f5fc:	2200      	movs	r2, #0
 801f5fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801f600:	f7fe fa96 	bl	801db30 <HAL_GetTick>
 801f604:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 801f606:	e008      	b.n	801f61a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 801f608:	f7fe fa92 	bl	801db30 <HAL_GetTick>
 801f60c:	4602      	mov	r2, r0
 801f60e:	693b      	ldr	r3, [r7, #16]
 801f610:	1ad3      	subs	r3, r2, r3
 801f612:	2b02      	cmp	r3, #2
 801f614:	d901      	bls.n	801f61a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 801f616:	2303      	movs	r3, #3
 801f618:	e184      	b.n	801f924 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 801f61a:	4b36      	ldr	r3, [pc, #216]	; (801f6f4 <HAL_RCC_OscConfig+0x2ac>)
 801f61c:	681b      	ldr	r3, [r3, #0]
 801f61e:	f003 0302 	and.w	r3, r3, #2
 801f622:	2b00      	cmp	r3, #0
 801f624:	d1f0      	bne.n	801f608 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 801f626:	687b      	ldr	r3, [r7, #4]
 801f628:	681b      	ldr	r3, [r3, #0]
 801f62a:	f003 0308 	and.w	r3, r3, #8
 801f62e:	2b00      	cmp	r3, #0
 801f630:	d030      	beq.n	801f694 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 801f632:	687b      	ldr	r3, [r7, #4]
 801f634:	695b      	ldr	r3, [r3, #20]
 801f636:	2b00      	cmp	r3, #0
 801f638:	d016      	beq.n	801f668 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 801f63a:	4b30      	ldr	r3, [pc, #192]	; (801f6fc <HAL_RCC_OscConfig+0x2b4>)
 801f63c:	2201      	movs	r2, #1
 801f63e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801f640:	f7fe fa76 	bl	801db30 <HAL_GetTick>
 801f644:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 801f646:	e008      	b.n	801f65a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 801f648:	f7fe fa72 	bl	801db30 <HAL_GetTick>
 801f64c:	4602      	mov	r2, r0
 801f64e:	693b      	ldr	r3, [r7, #16]
 801f650:	1ad3      	subs	r3, r2, r3
 801f652:	2b02      	cmp	r3, #2
 801f654:	d901      	bls.n	801f65a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 801f656:	2303      	movs	r3, #3
 801f658:	e164      	b.n	801f924 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 801f65a:	4b26      	ldr	r3, [pc, #152]	; (801f6f4 <HAL_RCC_OscConfig+0x2ac>)
 801f65c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801f65e:	f003 0302 	and.w	r3, r3, #2
 801f662:	2b00      	cmp	r3, #0
 801f664:	d0f0      	beq.n	801f648 <HAL_RCC_OscConfig+0x200>
 801f666:	e015      	b.n	801f694 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 801f668:	4b24      	ldr	r3, [pc, #144]	; (801f6fc <HAL_RCC_OscConfig+0x2b4>)
 801f66a:	2200      	movs	r2, #0
 801f66c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 801f66e:	f7fe fa5f 	bl	801db30 <HAL_GetTick>
 801f672:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 801f674:	e008      	b.n	801f688 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 801f676:	f7fe fa5b 	bl	801db30 <HAL_GetTick>
 801f67a:	4602      	mov	r2, r0
 801f67c:	693b      	ldr	r3, [r7, #16]
 801f67e:	1ad3      	subs	r3, r2, r3
 801f680:	2b02      	cmp	r3, #2
 801f682:	d901      	bls.n	801f688 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 801f684:	2303      	movs	r3, #3
 801f686:	e14d      	b.n	801f924 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 801f688:	4b1a      	ldr	r3, [pc, #104]	; (801f6f4 <HAL_RCC_OscConfig+0x2ac>)
 801f68a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801f68c:	f003 0302 	and.w	r3, r3, #2
 801f690:	2b00      	cmp	r3, #0
 801f692:	d1f0      	bne.n	801f676 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 801f694:	687b      	ldr	r3, [r7, #4]
 801f696:	681b      	ldr	r3, [r3, #0]
 801f698:	f003 0304 	and.w	r3, r3, #4
 801f69c:	2b00      	cmp	r3, #0
 801f69e:	f000 80a0 	beq.w	801f7e2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 801f6a2:	2300      	movs	r3, #0
 801f6a4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 801f6a6:	4b13      	ldr	r3, [pc, #76]	; (801f6f4 <HAL_RCC_OscConfig+0x2ac>)
 801f6a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801f6aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801f6ae:	2b00      	cmp	r3, #0
 801f6b0:	d10f      	bne.n	801f6d2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 801f6b2:	2300      	movs	r3, #0
 801f6b4:	60bb      	str	r3, [r7, #8]
 801f6b6:	4b0f      	ldr	r3, [pc, #60]	; (801f6f4 <HAL_RCC_OscConfig+0x2ac>)
 801f6b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801f6ba:	4a0e      	ldr	r2, [pc, #56]	; (801f6f4 <HAL_RCC_OscConfig+0x2ac>)
 801f6bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801f6c0:	6413      	str	r3, [r2, #64]	; 0x40
 801f6c2:	4b0c      	ldr	r3, [pc, #48]	; (801f6f4 <HAL_RCC_OscConfig+0x2ac>)
 801f6c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801f6c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801f6ca:	60bb      	str	r3, [r7, #8]
 801f6cc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 801f6ce:	2301      	movs	r3, #1
 801f6d0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 801f6d2:	4b0b      	ldr	r3, [pc, #44]	; (801f700 <HAL_RCC_OscConfig+0x2b8>)
 801f6d4:	681b      	ldr	r3, [r3, #0]
 801f6d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801f6da:	2b00      	cmp	r3, #0
 801f6dc:	d121      	bne.n	801f722 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 801f6de:	4b08      	ldr	r3, [pc, #32]	; (801f700 <HAL_RCC_OscConfig+0x2b8>)
 801f6e0:	681b      	ldr	r3, [r3, #0]
 801f6e2:	4a07      	ldr	r2, [pc, #28]	; (801f700 <HAL_RCC_OscConfig+0x2b8>)
 801f6e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801f6e8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 801f6ea:	f7fe fa21 	bl	801db30 <HAL_GetTick>
 801f6ee:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 801f6f0:	e011      	b.n	801f716 <HAL_RCC_OscConfig+0x2ce>
 801f6f2:	bf00      	nop
 801f6f4:	40023800 	.word	0x40023800
 801f6f8:	42470000 	.word	0x42470000
 801f6fc:	42470e80 	.word	0x42470e80
 801f700:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 801f704:	f7fe fa14 	bl	801db30 <HAL_GetTick>
 801f708:	4602      	mov	r2, r0
 801f70a:	693b      	ldr	r3, [r7, #16]
 801f70c:	1ad3      	subs	r3, r2, r3
 801f70e:	2b02      	cmp	r3, #2
 801f710:	d901      	bls.n	801f716 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 801f712:	2303      	movs	r3, #3
 801f714:	e106      	b.n	801f924 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 801f716:	4b85      	ldr	r3, [pc, #532]	; (801f92c <HAL_RCC_OscConfig+0x4e4>)
 801f718:	681b      	ldr	r3, [r3, #0]
 801f71a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801f71e:	2b00      	cmp	r3, #0
 801f720:	d0f0      	beq.n	801f704 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 801f722:	687b      	ldr	r3, [r7, #4]
 801f724:	689b      	ldr	r3, [r3, #8]
 801f726:	2b01      	cmp	r3, #1
 801f728:	d106      	bne.n	801f738 <HAL_RCC_OscConfig+0x2f0>
 801f72a:	4b81      	ldr	r3, [pc, #516]	; (801f930 <HAL_RCC_OscConfig+0x4e8>)
 801f72c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801f72e:	4a80      	ldr	r2, [pc, #512]	; (801f930 <HAL_RCC_OscConfig+0x4e8>)
 801f730:	f043 0301 	orr.w	r3, r3, #1
 801f734:	6713      	str	r3, [r2, #112]	; 0x70
 801f736:	e01c      	b.n	801f772 <HAL_RCC_OscConfig+0x32a>
 801f738:	687b      	ldr	r3, [r7, #4]
 801f73a:	689b      	ldr	r3, [r3, #8]
 801f73c:	2b05      	cmp	r3, #5
 801f73e:	d10c      	bne.n	801f75a <HAL_RCC_OscConfig+0x312>
 801f740:	4b7b      	ldr	r3, [pc, #492]	; (801f930 <HAL_RCC_OscConfig+0x4e8>)
 801f742:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801f744:	4a7a      	ldr	r2, [pc, #488]	; (801f930 <HAL_RCC_OscConfig+0x4e8>)
 801f746:	f043 0304 	orr.w	r3, r3, #4
 801f74a:	6713      	str	r3, [r2, #112]	; 0x70
 801f74c:	4b78      	ldr	r3, [pc, #480]	; (801f930 <HAL_RCC_OscConfig+0x4e8>)
 801f74e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801f750:	4a77      	ldr	r2, [pc, #476]	; (801f930 <HAL_RCC_OscConfig+0x4e8>)
 801f752:	f043 0301 	orr.w	r3, r3, #1
 801f756:	6713      	str	r3, [r2, #112]	; 0x70
 801f758:	e00b      	b.n	801f772 <HAL_RCC_OscConfig+0x32a>
 801f75a:	4b75      	ldr	r3, [pc, #468]	; (801f930 <HAL_RCC_OscConfig+0x4e8>)
 801f75c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801f75e:	4a74      	ldr	r2, [pc, #464]	; (801f930 <HAL_RCC_OscConfig+0x4e8>)
 801f760:	f023 0301 	bic.w	r3, r3, #1
 801f764:	6713      	str	r3, [r2, #112]	; 0x70
 801f766:	4b72      	ldr	r3, [pc, #456]	; (801f930 <HAL_RCC_OscConfig+0x4e8>)
 801f768:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801f76a:	4a71      	ldr	r2, [pc, #452]	; (801f930 <HAL_RCC_OscConfig+0x4e8>)
 801f76c:	f023 0304 	bic.w	r3, r3, #4
 801f770:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 801f772:	687b      	ldr	r3, [r7, #4]
 801f774:	689b      	ldr	r3, [r3, #8]
 801f776:	2b00      	cmp	r3, #0
 801f778:	d015      	beq.n	801f7a6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801f77a:	f7fe f9d9 	bl	801db30 <HAL_GetTick>
 801f77e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 801f780:	e00a      	b.n	801f798 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 801f782:	f7fe f9d5 	bl	801db30 <HAL_GetTick>
 801f786:	4602      	mov	r2, r0
 801f788:	693b      	ldr	r3, [r7, #16]
 801f78a:	1ad3      	subs	r3, r2, r3
 801f78c:	f241 3288 	movw	r2, #5000	; 0x1388
 801f790:	4293      	cmp	r3, r2
 801f792:	d901      	bls.n	801f798 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 801f794:	2303      	movs	r3, #3
 801f796:	e0c5      	b.n	801f924 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 801f798:	4b65      	ldr	r3, [pc, #404]	; (801f930 <HAL_RCC_OscConfig+0x4e8>)
 801f79a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801f79c:	f003 0302 	and.w	r3, r3, #2
 801f7a0:	2b00      	cmp	r3, #0
 801f7a2:	d0ee      	beq.n	801f782 <HAL_RCC_OscConfig+0x33a>
 801f7a4:	e014      	b.n	801f7d0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 801f7a6:	f7fe f9c3 	bl	801db30 <HAL_GetTick>
 801f7aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 801f7ac:	e00a      	b.n	801f7c4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 801f7ae:	f7fe f9bf 	bl	801db30 <HAL_GetTick>
 801f7b2:	4602      	mov	r2, r0
 801f7b4:	693b      	ldr	r3, [r7, #16]
 801f7b6:	1ad3      	subs	r3, r2, r3
 801f7b8:	f241 3288 	movw	r2, #5000	; 0x1388
 801f7bc:	4293      	cmp	r3, r2
 801f7be:	d901      	bls.n	801f7c4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 801f7c0:	2303      	movs	r3, #3
 801f7c2:	e0af      	b.n	801f924 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 801f7c4:	4b5a      	ldr	r3, [pc, #360]	; (801f930 <HAL_RCC_OscConfig+0x4e8>)
 801f7c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801f7c8:	f003 0302 	and.w	r3, r3, #2
 801f7cc:	2b00      	cmp	r3, #0
 801f7ce:	d1ee      	bne.n	801f7ae <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 801f7d0:	7dfb      	ldrb	r3, [r7, #23]
 801f7d2:	2b01      	cmp	r3, #1
 801f7d4:	d105      	bne.n	801f7e2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 801f7d6:	4b56      	ldr	r3, [pc, #344]	; (801f930 <HAL_RCC_OscConfig+0x4e8>)
 801f7d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801f7da:	4a55      	ldr	r2, [pc, #340]	; (801f930 <HAL_RCC_OscConfig+0x4e8>)
 801f7dc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 801f7e0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 801f7e2:	687b      	ldr	r3, [r7, #4]
 801f7e4:	699b      	ldr	r3, [r3, #24]
 801f7e6:	2b00      	cmp	r3, #0
 801f7e8:	f000 809b 	beq.w	801f922 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 801f7ec:	4b50      	ldr	r3, [pc, #320]	; (801f930 <HAL_RCC_OscConfig+0x4e8>)
 801f7ee:	689b      	ldr	r3, [r3, #8]
 801f7f0:	f003 030c 	and.w	r3, r3, #12
 801f7f4:	2b08      	cmp	r3, #8
 801f7f6:	d05c      	beq.n	801f8b2 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 801f7f8:	687b      	ldr	r3, [r7, #4]
 801f7fa:	699b      	ldr	r3, [r3, #24]
 801f7fc:	2b02      	cmp	r3, #2
 801f7fe:	d141      	bne.n	801f884 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 801f800:	4b4c      	ldr	r3, [pc, #304]	; (801f934 <HAL_RCC_OscConfig+0x4ec>)
 801f802:	2200      	movs	r2, #0
 801f804:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801f806:	f7fe f993 	bl	801db30 <HAL_GetTick>
 801f80a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 801f80c:	e008      	b.n	801f820 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 801f80e:	f7fe f98f 	bl	801db30 <HAL_GetTick>
 801f812:	4602      	mov	r2, r0
 801f814:	693b      	ldr	r3, [r7, #16]
 801f816:	1ad3      	subs	r3, r2, r3
 801f818:	2b02      	cmp	r3, #2
 801f81a:	d901      	bls.n	801f820 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 801f81c:	2303      	movs	r3, #3
 801f81e:	e081      	b.n	801f924 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 801f820:	4b43      	ldr	r3, [pc, #268]	; (801f930 <HAL_RCC_OscConfig+0x4e8>)
 801f822:	681b      	ldr	r3, [r3, #0]
 801f824:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801f828:	2b00      	cmp	r3, #0
 801f82a:	d1f0      	bne.n	801f80e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 801f82c:	687b      	ldr	r3, [r7, #4]
 801f82e:	69da      	ldr	r2, [r3, #28]
 801f830:	687b      	ldr	r3, [r7, #4]
 801f832:	6a1b      	ldr	r3, [r3, #32]
 801f834:	431a      	orrs	r2, r3
 801f836:	687b      	ldr	r3, [r7, #4]
 801f838:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801f83a:	019b      	lsls	r3, r3, #6
 801f83c:	431a      	orrs	r2, r3
 801f83e:	687b      	ldr	r3, [r7, #4]
 801f840:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801f842:	085b      	lsrs	r3, r3, #1
 801f844:	3b01      	subs	r3, #1
 801f846:	041b      	lsls	r3, r3, #16
 801f848:	431a      	orrs	r2, r3
 801f84a:	687b      	ldr	r3, [r7, #4]
 801f84c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801f84e:	061b      	lsls	r3, r3, #24
 801f850:	4937      	ldr	r1, [pc, #220]	; (801f930 <HAL_RCC_OscConfig+0x4e8>)
 801f852:	4313      	orrs	r3, r2
 801f854:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 801f856:	4b37      	ldr	r3, [pc, #220]	; (801f934 <HAL_RCC_OscConfig+0x4ec>)
 801f858:	2201      	movs	r2, #1
 801f85a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801f85c:	f7fe f968 	bl	801db30 <HAL_GetTick>
 801f860:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 801f862:	e008      	b.n	801f876 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 801f864:	f7fe f964 	bl	801db30 <HAL_GetTick>
 801f868:	4602      	mov	r2, r0
 801f86a:	693b      	ldr	r3, [r7, #16]
 801f86c:	1ad3      	subs	r3, r2, r3
 801f86e:	2b02      	cmp	r3, #2
 801f870:	d901      	bls.n	801f876 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 801f872:	2303      	movs	r3, #3
 801f874:	e056      	b.n	801f924 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 801f876:	4b2e      	ldr	r3, [pc, #184]	; (801f930 <HAL_RCC_OscConfig+0x4e8>)
 801f878:	681b      	ldr	r3, [r3, #0]
 801f87a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801f87e:	2b00      	cmp	r3, #0
 801f880:	d0f0      	beq.n	801f864 <HAL_RCC_OscConfig+0x41c>
 801f882:	e04e      	b.n	801f922 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 801f884:	4b2b      	ldr	r3, [pc, #172]	; (801f934 <HAL_RCC_OscConfig+0x4ec>)
 801f886:	2200      	movs	r2, #0
 801f888:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801f88a:	f7fe f951 	bl	801db30 <HAL_GetTick>
 801f88e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 801f890:	e008      	b.n	801f8a4 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 801f892:	f7fe f94d 	bl	801db30 <HAL_GetTick>
 801f896:	4602      	mov	r2, r0
 801f898:	693b      	ldr	r3, [r7, #16]
 801f89a:	1ad3      	subs	r3, r2, r3
 801f89c:	2b02      	cmp	r3, #2
 801f89e:	d901      	bls.n	801f8a4 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 801f8a0:	2303      	movs	r3, #3
 801f8a2:	e03f      	b.n	801f924 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 801f8a4:	4b22      	ldr	r3, [pc, #136]	; (801f930 <HAL_RCC_OscConfig+0x4e8>)
 801f8a6:	681b      	ldr	r3, [r3, #0]
 801f8a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801f8ac:	2b00      	cmp	r3, #0
 801f8ae:	d1f0      	bne.n	801f892 <HAL_RCC_OscConfig+0x44a>
 801f8b0:	e037      	b.n	801f922 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 801f8b2:	687b      	ldr	r3, [r7, #4]
 801f8b4:	699b      	ldr	r3, [r3, #24]
 801f8b6:	2b01      	cmp	r3, #1
 801f8b8:	d101      	bne.n	801f8be <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 801f8ba:	2301      	movs	r3, #1
 801f8bc:	e032      	b.n	801f924 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 801f8be:	4b1c      	ldr	r3, [pc, #112]	; (801f930 <HAL_RCC_OscConfig+0x4e8>)
 801f8c0:	685b      	ldr	r3, [r3, #4]
 801f8c2:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 801f8c4:	687b      	ldr	r3, [r7, #4]
 801f8c6:	699b      	ldr	r3, [r3, #24]
 801f8c8:	2b01      	cmp	r3, #1
 801f8ca:	d028      	beq.n	801f91e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 801f8cc:	68fb      	ldr	r3, [r7, #12]
 801f8ce:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 801f8d2:	687b      	ldr	r3, [r7, #4]
 801f8d4:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 801f8d6:	429a      	cmp	r2, r3
 801f8d8:	d121      	bne.n	801f91e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 801f8da:	68fb      	ldr	r3, [r7, #12]
 801f8dc:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 801f8e0:	687b      	ldr	r3, [r7, #4]
 801f8e2:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 801f8e4:	429a      	cmp	r2, r3
 801f8e6:	d11a      	bne.n	801f91e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 801f8e8:	68fa      	ldr	r2, [r7, #12]
 801f8ea:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 801f8ee:	4013      	ands	r3, r2
 801f8f0:	687a      	ldr	r2, [r7, #4]
 801f8f2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 801f8f4:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 801f8f6:	4293      	cmp	r3, r2
 801f8f8:	d111      	bne.n	801f91e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 801f8fa:	68fb      	ldr	r3, [r7, #12]
 801f8fc:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 801f900:	687b      	ldr	r3, [r7, #4]
 801f902:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801f904:	085b      	lsrs	r3, r3, #1
 801f906:	3b01      	subs	r3, #1
 801f908:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 801f90a:	429a      	cmp	r2, r3
 801f90c:	d107      	bne.n	801f91e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 801f90e:	68fb      	ldr	r3, [r7, #12]
 801f910:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 801f914:	687b      	ldr	r3, [r7, #4]
 801f916:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801f918:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 801f91a:	429a      	cmp	r2, r3
 801f91c:	d001      	beq.n	801f922 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 801f91e:	2301      	movs	r3, #1
 801f920:	e000      	b.n	801f924 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 801f922:	2300      	movs	r3, #0
}
 801f924:	4618      	mov	r0, r3
 801f926:	3718      	adds	r7, #24
 801f928:	46bd      	mov	sp, r7
 801f92a:	bd80      	pop	{r7, pc}
 801f92c:	40007000 	.word	0x40007000
 801f930:	40023800 	.word	0x40023800
 801f934:	42470060 	.word	0x42470060

0801f938 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 801f938:	b580      	push	{r7, lr}
 801f93a:	b084      	sub	sp, #16
 801f93c:	af00      	add	r7, sp, #0
 801f93e:	6078      	str	r0, [r7, #4]
 801f940:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 801f942:	687b      	ldr	r3, [r7, #4]
 801f944:	2b00      	cmp	r3, #0
 801f946:	d101      	bne.n	801f94c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 801f948:	2301      	movs	r3, #1
 801f94a:	e0cc      	b.n	801fae6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 801f94c:	4b68      	ldr	r3, [pc, #416]	; (801faf0 <HAL_RCC_ClockConfig+0x1b8>)
 801f94e:	681b      	ldr	r3, [r3, #0]
 801f950:	f003 0307 	and.w	r3, r3, #7
 801f954:	683a      	ldr	r2, [r7, #0]
 801f956:	429a      	cmp	r2, r3
 801f958:	d90c      	bls.n	801f974 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801f95a:	4b65      	ldr	r3, [pc, #404]	; (801faf0 <HAL_RCC_ClockConfig+0x1b8>)
 801f95c:	683a      	ldr	r2, [r7, #0]
 801f95e:	b2d2      	uxtb	r2, r2
 801f960:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 801f962:	4b63      	ldr	r3, [pc, #396]	; (801faf0 <HAL_RCC_ClockConfig+0x1b8>)
 801f964:	681b      	ldr	r3, [r3, #0]
 801f966:	f003 0307 	and.w	r3, r3, #7
 801f96a:	683a      	ldr	r2, [r7, #0]
 801f96c:	429a      	cmp	r2, r3
 801f96e:	d001      	beq.n	801f974 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 801f970:	2301      	movs	r3, #1
 801f972:	e0b8      	b.n	801fae6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 801f974:	687b      	ldr	r3, [r7, #4]
 801f976:	681b      	ldr	r3, [r3, #0]
 801f978:	f003 0302 	and.w	r3, r3, #2
 801f97c:	2b00      	cmp	r3, #0
 801f97e:	d020      	beq.n	801f9c2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 801f980:	687b      	ldr	r3, [r7, #4]
 801f982:	681b      	ldr	r3, [r3, #0]
 801f984:	f003 0304 	and.w	r3, r3, #4
 801f988:	2b00      	cmp	r3, #0
 801f98a:	d005      	beq.n	801f998 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 801f98c:	4b59      	ldr	r3, [pc, #356]	; (801faf4 <HAL_RCC_ClockConfig+0x1bc>)
 801f98e:	689b      	ldr	r3, [r3, #8]
 801f990:	4a58      	ldr	r2, [pc, #352]	; (801faf4 <HAL_RCC_ClockConfig+0x1bc>)
 801f992:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 801f996:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 801f998:	687b      	ldr	r3, [r7, #4]
 801f99a:	681b      	ldr	r3, [r3, #0]
 801f99c:	f003 0308 	and.w	r3, r3, #8
 801f9a0:	2b00      	cmp	r3, #0
 801f9a2:	d005      	beq.n	801f9b0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 801f9a4:	4b53      	ldr	r3, [pc, #332]	; (801faf4 <HAL_RCC_ClockConfig+0x1bc>)
 801f9a6:	689b      	ldr	r3, [r3, #8]
 801f9a8:	4a52      	ldr	r2, [pc, #328]	; (801faf4 <HAL_RCC_ClockConfig+0x1bc>)
 801f9aa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 801f9ae:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 801f9b0:	4b50      	ldr	r3, [pc, #320]	; (801faf4 <HAL_RCC_ClockConfig+0x1bc>)
 801f9b2:	689b      	ldr	r3, [r3, #8]
 801f9b4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 801f9b8:	687b      	ldr	r3, [r7, #4]
 801f9ba:	689b      	ldr	r3, [r3, #8]
 801f9bc:	494d      	ldr	r1, [pc, #308]	; (801faf4 <HAL_RCC_ClockConfig+0x1bc>)
 801f9be:	4313      	orrs	r3, r2
 801f9c0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 801f9c2:	687b      	ldr	r3, [r7, #4]
 801f9c4:	681b      	ldr	r3, [r3, #0]
 801f9c6:	f003 0301 	and.w	r3, r3, #1
 801f9ca:	2b00      	cmp	r3, #0
 801f9cc:	d044      	beq.n	801fa58 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 801f9ce:	687b      	ldr	r3, [r7, #4]
 801f9d0:	685b      	ldr	r3, [r3, #4]
 801f9d2:	2b01      	cmp	r3, #1
 801f9d4:	d107      	bne.n	801f9e6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 801f9d6:	4b47      	ldr	r3, [pc, #284]	; (801faf4 <HAL_RCC_ClockConfig+0x1bc>)
 801f9d8:	681b      	ldr	r3, [r3, #0]
 801f9da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801f9de:	2b00      	cmp	r3, #0
 801f9e0:	d119      	bne.n	801fa16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 801f9e2:	2301      	movs	r3, #1
 801f9e4:	e07f      	b.n	801fae6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 801f9e6:	687b      	ldr	r3, [r7, #4]
 801f9e8:	685b      	ldr	r3, [r3, #4]
 801f9ea:	2b02      	cmp	r3, #2
 801f9ec:	d003      	beq.n	801f9f6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 801f9ee:	687b      	ldr	r3, [r7, #4]
 801f9f0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 801f9f2:	2b03      	cmp	r3, #3
 801f9f4:	d107      	bne.n	801fa06 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 801f9f6:	4b3f      	ldr	r3, [pc, #252]	; (801faf4 <HAL_RCC_ClockConfig+0x1bc>)
 801f9f8:	681b      	ldr	r3, [r3, #0]
 801f9fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801f9fe:	2b00      	cmp	r3, #0
 801fa00:	d109      	bne.n	801fa16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 801fa02:	2301      	movs	r3, #1
 801fa04:	e06f      	b.n	801fae6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 801fa06:	4b3b      	ldr	r3, [pc, #236]	; (801faf4 <HAL_RCC_ClockConfig+0x1bc>)
 801fa08:	681b      	ldr	r3, [r3, #0]
 801fa0a:	f003 0302 	and.w	r3, r3, #2
 801fa0e:	2b00      	cmp	r3, #0
 801fa10:	d101      	bne.n	801fa16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 801fa12:	2301      	movs	r3, #1
 801fa14:	e067      	b.n	801fae6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 801fa16:	4b37      	ldr	r3, [pc, #220]	; (801faf4 <HAL_RCC_ClockConfig+0x1bc>)
 801fa18:	689b      	ldr	r3, [r3, #8]
 801fa1a:	f023 0203 	bic.w	r2, r3, #3
 801fa1e:	687b      	ldr	r3, [r7, #4]
 801fa20:	685b      	ldr	r3, [r3, #4]
 801fa22:	4934      	ldr	r1, [pc, #208]	; (801faf4 <HAL_RCC_ClockConfig+0x1bc>)
 801fa24:	4313      	orrs	r3, r2
 801fa26:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 801fa28:	f7fe f882 	bl	801db30 <HAL_GetTick>
 801fa2c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 801fa2e:	e00a      	b.n	801fa46 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 801fa30:	f7fe f87e 	bl	801db30 <HAL_GetTick>
 801fa34:	4602      	mov	r2, r0
 801fa36:	68fb      	ldr	r3, [r7, #12]
 801fa38:	1ad3      	subs	r3, r2, r3
 801fa3a:	f241 3288 	movw	r2, #5000	; 0x1388
 801fa3e:	4293      	cmp	r3, r2
 801fa40:	d901      	bls.n	801fa46 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 801fa42:	2303      	movs	r3, #3
 801fa44:	e04f      	b.n	801fae6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 801fa46:	4b2b      	ldr	r3, [pc, #172]	; (801faf4 <HAL_RCC_ClockConfig+0x1bc>)
 801fa48:	689b      	ldr	r3, [r3, #8]
 801fa4a:	f003 020c 	and.w	r2, r3, #12
 801fa4e:	687b      	ldr	r3, [r7, #4]
 801fa50:	685b      	ldr	r3, [r3, #4]
 801fa52:	009b      	lsls	r3, r3, #2
 801fa54:	429a      	cmp	r2, r3
 801fa56:	d1eb      	bne.n	801fa30 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 801fa58:	4b25      	ldr	r3, [pc, #148]	; (801faf0 <HAL_RCC_ClockConfig+0x1b8>)
 801fa5a:	681b      	ldr	r3, [r3, #0]
 801fa5c:	f003 0307 	and.w	r3, r3, #7
 801fa60:	683a      	ldr	r2, [r7, #0]
 801fa62:	429a      	cmp	r2, r3
 801fa64:	d20c      	bcs.n	801fa80 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801fa66:	4b22      	ldr	r3, [pc, #136]	; (801faf0 <HAL_RCC_ClockConfig+0x1b8>)
 801fa68:	683a      	ldr	r2, [r7, #0]
 801fa6a:	b2d2      	uxtb	r2, r2
 801fa6c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 801fa6e:	4b20      	ldr	r3, [pc, #128]	; (801faf0 <HAL_RCC_ClockConfig+0x1b8>)
 801fa70:	681b      	ldr	r3, [r3, #0]
 801fa72:	f003 0307 	and.w	r3, r3, #7
 801fa76:	683a      	ldr	r2, [r7, #0]
 801fa78:	429a      	cmp	r2, r3
 801fa7a:	d001      	beq.n	801fa80 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 801fa7c:	2301      	movs	r3, #1
 801fa7e:	e032      	b.n	801fae6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 801fa80:	687b      	ldr	r3, [r7, #4]
 801fa82:	681b      	ldr	r3, [r3, #0]
 801fa84:	f003 0304 	and.w	r3, r3, #4
 801fa88:	2b00      	cmp	r3, #0
 801fa8a:	d008      	beq.n	801fa9e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 801fa8c:	4b19      	ldr	r3, [pc, #100]	; (801faf4 <HAL_RCC_ClockConfig+0x1bc>)
 801fa8e:	689b      	ldr	r3, [r3, #8]
 801fa90:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 801fa94:	687b      	ldr	r3, [r7, #4]
 801fa96:	68db      	ldr	r3, [r3, #12]
 801fa98:	4916      	ldr	r1, [pc, #88]	; (801faf4 <HAL_RCC_ClockConfig+0x1bc>)
 801fa9a:	4313      	orrs	r3, r2
 801fa9c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 801fa9e:	687b      	ldr	r3, [r7, #4]
 801faa0:	681b      	ldr	r3, [r3, #0]
 801faa2:	f003 0308 	and.w	r3, r3, #8
 801faa6:	2b00      	cmp	r3, #0
 801faa8:	d009      	beq.n	801fabe <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 801faaa:	4b12      	ldr	r3, [pc, #72]	; (801faf4 <HAL_RCC_ClockConfig+0x1bc>)
 801faac:	689b      	ldr	r3, [r3, #8]
 801faae:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 801fab2:	687b      	ldr	r3, [r7, #4]
 801fab4:	691b      	ldr	r3, [r3, #16]
 801fab6:	00db      	lsls	r3, r3, #3
 801fab8:	490e      	ldr	r1, [pc, #56]	; (801faf4 <HAL_RCC_ClockConfig+0x1bc>)
 801faba:	4313      	orrs	r3, r2
 801fabc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 801fabe:	f000 f821 	bl	801fb04 <HAL_RCC_GetSysClockFreq>
 801fac2:	4602      	mov	r2, r0
 801fac4:	4b0b      	ldr	r3, [pc, #44]	; (801faf4 <HAL_RCC_ClockConfig+0x1bc>)
 801fac6:	689b      	ldr	r3, [r3, #8]
 801fac8:	091b      	lsrs	r3, r3, #4
 801faca:	f003 030f 	and.w	r3, r3, #15
 801face:	490a      	ldr	r1, [pc, #40]	; (801faf8 <HAL_RCC_ClockConfig+0x1c0>)
 801fad0:	5ccb      	ldrb	r3, [r1, r3]
 801fad2:	fa22 f303 	lsr.w	r3, r2, r3
 801fad6:	4a09      	ldr	r2, [pc, #36]	; (801fafc <HAL_RCC_ClockConfig+0x1c4>)
 801fad8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 801fada:	4b09      	ldr	r3, [pc, #36]	; (801fb00 <HAL_RCC_ClockConfig+0x1c8>)
 801fadc:	681b      	ldr	r3, [r3, #0]
 801fade:	4618      	mov	r0, r3
 801fae0:	f7fd ffe2 	bl	801daa8 <HAL_InitTick>

  return HAL_OK;
 801fae4:	2300      	movs	r3, #0
}
 801fae6:	4618      	mov	r0, r3
 801fae8:	3710      	adds	r7, #16
 801faea:	46bd      	mov	sp, r7
 801faec:	bd80      	pop	{r7, pc}
 801faee:	bf00      	nop
 801faf0:	40023c00 	.word	0x40023c00
 801faf4:	40023800 	.word	0x40023800
 801faf8:	0802d214 	.word	0x0802d214
 801fafc:	20000000 	.word	0x20000000
 801fb00:	20000004 	.word	0x20000004

0801fb04 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 801fb04:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 801fb08:	b084      	sub	sp, #16
 801fb0a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 801fb0c:	2300      	movs	r3, #0
 801fb0e:	607b      	str	r3, [r7, #4]
 801fb10:	2300      	movs	r3, #0
 801fb12:	60fb      	str	r3, [r7, #12]
 801fb14:	2300      	movs	r3, #0
 801fb16:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 801fb18:	2300      	movs	r3, #0
 801fb1a:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 801fb1c:	4b67      	ldr	r3, [pc, #412]	; (801fcbc <HAL_RCC_GetSysClockFreq+0x1b8>)
 801fb1e:	689b      	ldr	r3, [r3, #8]
 801fb20:	f003 030c 	and.w	r3, r3, #12
 801fb24:	2b08      	cmp	r3, #8
 801fb26:	d00d      	beq.n	801fb44 <HAL_RCC_GetSysClockFreq+0x40>
 801fb28:	2b08      	cmp	r3, #8
 801fb2a:	f200 80bd 	bhi.w	801fca8 <HAL_RCC_GetSysClockFreq+0x1a4>
 801fb2e:	2b00      	cmp	r3, #0
 801fb30:	d002      	beq.n	801fb38 <HAL_RCC_GetSysClockFreq+0x34>
 801fb32:	2b04      	cmp	r3, #4
 801fb34:	d003      	beq.n	801fb3e <HAL_RCC_GetSysClockFreq+0x3a>
 801fb36:	e0b7      	b.n	801fca8 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 801fb38:	4b61      	ldr	r3, [pc, #388]	; (801fcc0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 801fb3a:	60bb      	str	r3, [r7, #8]
       break;
 801fb3c:	e0b7      	b.n	801fcae <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 801fb3e:	4b61      	ldr	r3, [pc, #388]	; (801fcc4 <HAL_RCC_GetSysClockFreq+0x1c0>)
 801fb40:	60bb      	str	r3, [r7, #8]
      break;
 801fb42:	e0b4      	b.n	801fcae <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 801fb44:	4b5d      	ldr	r3, [pc, #372]	; (801fcbc <HAL_RCC_GetSysClockFreq+0x1b8>)
 801fb46:	685b      	ldr	r3, [r3, #4]
 801fb48:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801fb4c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 801fb4e:	4b5b      	ldr	r3, [pc, #364]	; (801fcbc <HAL_RCC_GetSysClockFreq+0x1b8>)
 801fb50:	685b      	ldr	r3, [r3, #4]
 801fb52:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801fb56:	2b00      	cmp	r3, #0
 801fb58:	d04d      	beq.n	801fbf6 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 801fb5a:	4b58      	ldr	r3, [pc, #352]	; (801fcbc <HAL_RCC_GetSysClockFreq+0x1b8>)
 801fb5c:	685b      	ldr	r3, [r3, #4]
 801fb5e:	099b      	lsrs	r3, r3, #6
 801fb60:	461a      	mov	r2, r3
 801fb62:	f04f 0300 	mov.w	r3, #0
 801fb66:	f240 10ff 	movw	r0, #511	; 0x1ff
 801fb6a:	f04f 0100 	mov.w	r1, #0
 801fb6e:	ea02 0800 	and.w	r8, r2, r0
 801fb72:	ea03 0901 	and.w	r9, r3, r1
 801fb76:	4640      	mov	r0, r8
 801fb78:	4649      	mov	r1, r9
 801fb7a:	f04f 0200 	mov.w	r2, #0
 801fb7e:	f04f 0300 	mov.w	r3, #0
 801fb82:	014b      	lsls	r3, r1, #5
 801fb84:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 801fb88:	0142      	lsls	r2, r0, #5
 801fb8a:	4610      	mov	r0, r2
 801fb8c:	4619      	mov	r1, r3
 801fb8e:	ebb0 0008 	subs.w	r0, r0, r8
 801fb92:	eb61 0109 	sbc.w	r1, r1, r9
 801fb96:	f04f 0200 	mov.w	r2, #0
 801fb9a:	f04f 0300 	mov.w	r3, #0
 801fb9e:	018b      	lsls	r3, r1, #6
 801fba0:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 801fba4:	0182      	lsls	r2, r0, #6
 801fba6:	1a12      	subs	r2, r2, r0
 801fba8:	eb63 0301 	sbc.w	r3, r3, r1
 801fbac:	f04f 0000 	mov.w	r0, #0
 801fbb0:	f04f 0100 	mov.w	r1, #0
 801fbb4:	00d9      	lsls	r1, r3, #3
 801fbb6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 801fbba:	00d0      	lsls	r0, r2, #3
 801fbbc:	4602      	mov	r2, r0
 801fbbe:	460b      	mov	r3, r1
 801fbc0:	eb12 0208 	adds.w	r2, r2, r8
 801fbc4:	eb43 0309 	adc.w	r3, r3, r9
 801fbc8:	f04f 0000 	mov.w	r0, #0
 801fbcc:	f04f 0100 	mov.w	r1, #0
 801fbd0:	0259      	lsls	r1, r3, #9
 801fbd2:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 801fbd6:	0250      	lsls	r0, r2, #9
 801fbd8:	4602      	mov	r2, r0
 801fbda:	460b      	mov	r3, r1
 801fbdc:	4610      	mov	r0, r2
 801fbde:	4619      	mov	r1, r3
 801fbe0:	687b      	ldr	r3, [r7, #4]
 801fbe2:	461a      	mov	r2, r3
 801fbe4:	f04f 0300 	mov.w	r3, #0
 801fbe8:	f7e0 ffde 	bl	8000ba8 <__aeabi_uldivmod>
 801fbec:	4602      	mov	r2, r0
 801fbee:	460b      	mov	r3, r1
 801fbf0:	4613      	mov	r3, r2
 801fbf2:	60fb      	str	r3, [r7, #12]
 801fbf4:	e04a      	b.n	801fc8c <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 801fbf6:	4b31      	ldr	r3, [pc, #196]	; (801fcbc <HAL_RCC_GetSysClockFreq+0x1b8>)
 801fbf8:	685b      	ldr	r3, [r3, #4]
 801fbfa:	099b      	lsrs	r3, r3, #6
 801fbfc:	461a      	mov	r2, r3
 801fbfe:	f04f 0300 	mov.w	r3, #0
 801fc02:	f240 10ff 	movw	r0, #511	; 0x1ff
 801fc06:	f04f 0100 	mov.w	r1, #0
 801fc0a:	ea02 0400 	and.w	r4, r2, r0
 801fc0e:	ea03 0501 	and.w	r5, r3, r1
 801fc12:	4620      	mov	r0, r4
 801fc14:	4629      	mov	r1, r5
 801fc16:	f04f 0200 	mov.w	r2, #0
 801fc1a:	f04f 0300 	mov.w	r3, #0
 801fc1e:	014b      	lsls	r3, r1, #5
 801fc20:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 801fc24:	0142      	lsls	r2, r0, #5
 801fc26:	4610      	mov	r0, r2
 801fc28:	4619      	mov	r1, r3
 801fc2a:	1b00      	subs	r0, r0, r4
 801fc2c:	eb61 0105 	sbc.w	r1, r1, r5
 801fc30:	f04f 0200 	mov.w	r2, #0
 801fc34:	f04f 0300 	mov.w	r3, #0
 801fc38:	018b      	lsls	r3, r1, #6
 801fc3a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 801fc3e:	0182      	lsls	r2, r0, #6
 801fc40:	1a12      	subs	r2, r2, r0
 801fc42:	eb63 0301 	sbc.w	r3, r3, r1
 801fc46:	f04f 0000 	mov.w	r0, #0
 801fc4a:	f04f 0100 	mov.w	r1, #0
 801fc4e:	00d9      	lsls	r1, r3, #3
 801fc50:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 801fc54:	00d0      	lsls	r0, r2, #3
 801fc56:	4602      	mov	r2, r0
 801fc58:	460b      	mov	r3, r1
 801fc5a:	1912      	adds	r2, r2, r4
 801fc5c:	eb45 0303 	adc.w	r3, r5, r3
 801fc60:	f04f 0000 	mov.w	r0, #0
 801fc64:	f04f 0100 	mov.w	r1, #0
 801fc68:	0299      	lsls	r1, r3, #10
 801fc6a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 801fc6e:	0290      	lsls	r0, r2, #10
 801fc70:	4602      	mov	r2, r0
 801fc72:	460b      	mov	r3, r1
 801fc74:	4610      	mov	r0, r2
 801fc76:	4619      	mov	r1, r3
 801fc78:	687b      	ldr	r3, [r7, #4]
 801fc7a:	461a      	mov	r2, r3
 801fc7c:	f04f 0300 	mov.w	r3, #0
 801fc80:	f7e0 ff92 	bl	8000ba8 <__aeabi_uldivmod>
 801fc84:	4602      	mov	r2, r0
 801fc86:	460b      	mov	r3, r1
 801fc88:	4613      	mov	r3, r2
 801fc8a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 801fc8c:	4b0b      	ldr	r3, [pc, #44]	; (801fcbc <HAL_RCC_GetSysClockFreq+0x1b8>)
 801fc8e:	685b      	ldr	r3, [r3, #4]
 801fc90:	0c1b      	lsrs	r3, r3, #16
 801fc92:	f003 0303 	and.w	r3, r3, #3
 801fc96:	3301      	adds	r3, #1
 801fc98:	005b      	lsls	r3, r3, #1
 801fc9a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 801fc9c:	68fa      	ldr	r2, [r7, #12]
 801fc9e:	683b      	ldr	r3, [r7, #0]
 801fca0:	fbb2 f3f3 	udiv	r3, r2, r3
 801fca4:	60bb      	str	r3, [r7, #8]
      break;
 801fca6:	e002      	b.n	801fcae <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 801fca8:	4b05      	ldr	r3, [pc, #20]	; (801fcc0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 801fcaa:	60bb      	str	r3, [r7, #8]
      break;
 801fcac:	bf00      	nop
    }
  }
  return sysclockfreq;
 801fcae:	68bb      	ldr	r3, [r7, #8]
}
 801fcb0:	4618      	mov	r0, r3
 801fcb2:	3710      	adds	r7, #16
 801fcb4:	46bd      	mov	sp, r7
 801fcb6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 801fcba:	bf00      	nop
 801fcbc:	40023800 	.word	0x40023800
 801fcc0:	00f42400 	.word	0x00f42400
 801fcc4:	007a1200 	.word	0x007a1200

0801fcc8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 801fcc8:	b480      	push	{r7}
 801fcca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 801fccc:	4b03      	ldr	r3, [pc, #12]	; (801fcdc <HAL_RCC_GetHCLKFreq+0x14>)
 801fcce:	681b      	ldr	r3, [r3, #0]
}
 801fcd0:	4618      	mov	r0, r3
 801fcd2:	46bd      	mov	sp, r7
 801fcd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fcd8:	4770      	bx	lr
 801fcda:	bf00      	nop
 801fcdc:	20000000 	.word	0x20000000

0801fce0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 801fce0:	b580      	push	{r7, lr}
 801fce2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 801fce4:	f7ff fff0 	bl	801fcc8 <HAL_RCC_GetHCLKFreq>
 801fce8:	4602      	mov	r2, r0
 801fcea:	4b05      	ldr	r3, [pc, #20]	; (801fd00 <HAL_RCC_GetPCLK1Freq+0x20>)
 801fcec:	689b      	ldr	r3, [r3, #8]
 801fcee:	0a9b      	lsrs	r3, r3, #10
 801fcf0:	f003 0307 	and.w	r3, r3, #7
 801fcf4:	4903      	ldr	r1, [pc, #12]	; (801fd04 <HAL_RCC_GetPCLK1Freq+0x24>)
 801fcf6:	5ccb      	ldrb	r3, [r1, r3]
 801fcf8:	fa22 f303 	lsr.w	r3, r2, r3
}
 801fcfc:	4618      	mov	r0, r3
 801fcfe:	bd80      	pop	{r7, pc}
 801fd00:	40023800 	.word	0x40023800
 801fd04:	0802d224 	.word	0x0802d224

0801fd08 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 801fd08:	b580      	push	{r7, lr}
 801fd0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 801fd0c:	f7ff ffdc 	bl	801fcc8 <HAL_RCC_GetHCLKFreq>
 801fd10:	4602      	mov	r2, r0
 801fd12:	4b05      	ldr	r3, [pc, #20]	; (801fd28 <HAL_RCC_GetPCLK2Freq+0x20>)
 801fd14:	689b      	ldr	r3, [r3, #8]
 801fd16:	0b5b      	lsrs	r3, r3, #13
 801fd18:	f003 0307 	and.w	r3, r3, #7
 801fd1c:	4903      	ldr	r1, [pc, #12]	; (801fd2c <HAL_RCC_GetPCLK2Freq+0x24>)
 801fd1e:	5ccb      	ldrb	r3, [r1, r3]
 801fd20:	fa22 f303 	lsr.w	r3, r2, r3
}
 801fd24:	4618      	mov	r0, r3
 801fd26:	bd80      	pop	{r7, pc}
 801fd28:	40023800 	.word	0x40023800
 801fd2c:	0802d224 	.word	0x0802d224

0801fd30 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 801fd30:	b580      	push	{r7, lr}
 801fd32:	b082      	sub	sp, #8
 801fd34:	af00      	add	r7, sp, #0
 801fd36:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 801fd38:	687b      	ldr	r3, [r7, #4]
 801fd3a:	2b00      	cmp	r3, #0
 801fd3c:	d101      	bne.n	801fd42 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 801fd3e:	2301      	movs	r3, #1
 801fd40:	e041      	b.n	801fdc6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 801fd42:	687b      	ldr	r3, [r7, #4]
 801fd44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801fd48:	b2db      	uxtb	r3, r3
 801fd4a:	2b00      	cmp	r3, #0
 801fd4c:	d106      	bne.n	801fd5c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 801fd4e:	687b      	ldr	r3, [r7, #4]
 801fd50:	2200      	movs	r2, #0
 801fd52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 801fd56:	6878      	ldr	r0, [r7, #4]
 801fd58:	f7fd fc58 	bl	801d60c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801fd5c:	687b      	ldr	r3, [r7, #4]
 801fd5e:	2202      	movs	r2, #2
 801fd60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 801fd64:	687b      	ldr	r3, [r7, #4]
 801fd66:	681a      	ldr	r2, [r3, #0]
 801fd68:	687b      	ldr	r3, [r7, #4]
 801fd6a:	3304      	adds	r3, #4
 801fd6c:	4619      	mov	r1, r3
 801fd6e:	4610      	mov	r0, r2
 801fd70:	f000 fe9a 	bl	8020aa8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 801fd74:	687b      	ldr	r3, [r7, #4]
 801fd76:	2201      	movs	r2, #1
 801fd78:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801fd7c:	687b      	ldr	r3, [r7, #4]
 801fd7e:	2201      	movs	r2, #1
 801fd80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 801fd84:	687b      	ldr	r3, [r7, #4]
 801fd86:	2201      	movs	r2, #1
 801fd88:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 801fd8c:	687b      	ldr	r3, [r7, #4]
 801fd8e:	2201      	movs	r2, #1
 801fd90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 801fd94:	687b      	ldr	r3, [r7, #4]
 801fd96:	2201      	movs	r2, #1
 801fd98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801fd9c:	687b      	ldr	r3, [r7, #4]
 801fd9e:	2201      	movs	r2, #1
 801fda0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 801fda4:	687b      	ldr	r3, [r7, #4]
 801fda6:	2201      	movs	r2, #1
 801fda8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 801fdac:	687b      	ldr	r3, [r7, #4]
 801fdae:	2201      	movs	r2, #1
 801fdb0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801fdb4:	687b      	ldr	r3, [r7, #4]
 801fdb6:	2201      	movs	r2, #1
 801fdb8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 801fdbc:	687b      	ldr	r3, [r7, #4]
 801fdbe:	2201      	movs	r2, #1
 801fdc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 801fdc4:	2300      	movs	r3, #0
}
 801fdc6:	4618      	mov	r0, r3
 801fdc8:	3708      	adds	r7, #8
 801fdca:	46bd      	mov	sp, r7
 801fdcc:	bd80      	pop	{r7, pc}

0801fdce <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 801fdce:	b580      	push	{r7, lr}
 801fdd0:	b082      	sub	sp, #8
 801fdd2:	af00      	add	r7, sp, #0
 801fdd4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 801fdd6:	687b      	ldr	r3, [r7, #4]
 801fdd8:	2b00      	cmp	r3, #0
 801fdda:	d101      	bne.n	801fde0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 801fddc:	2301      	movs	r3, #1
 801fdde:	e041      	b.n	801fe64 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 801fde0:	687b      	ldr	r3, [r7, #4]
 801fde2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801fde6:	b2db      	uxtb	r3, r3
 801fde8:	2b00      	cmp	r3, #0
 801fdea:	d106      	bne.n	801fdfa <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 801fdec:	687b      	ldr	r3, [r7, #4]
 801fdee:	2200      	movs	r2, #0
 801fdf0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 801fdf4:	6878      	ldr	r0, [r7, #4]
 801fdf6:	f000 f839 	bl	801fe6c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801fdfa:	687b      	ldr	r3, [r7, #4]
 801fdfc:	2202      	movs	r2, #2
 801fdfe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 801fe02:	687b      	ldr	r3, [r7, #4]
 801fe04:	681a      	ldr	r2, [r3, #0]
 801fe06:	687b      	ldr	r3, [r7, #4]
 801fe08:	3304      	adds	r3, #4
 801fe0a:	4619      	mov	r1, r3
 801fe0c:	4610      	mov	r0, r2
 801fe0e:	f000 fe4b 	bl	8020aa8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 801fe12:	687b      	ldr	r3, [r7, #4]
 801fe14:	2201      	movs	r2, #1
 801fe16:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801fe1a:	687b      	ldr	r3, [r7, #4]
 801fe1c:	2201      	movs	r2, #1
 801fe1e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 801fe22:	687b      	ldr	r3, [r7, #4]
 801fe24:	2201      	movs	r2, #1
 801fe26:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 801fe2a:	687b      	ldr	r3, [r7, #4]
 801fe2c:	2201      	movs	r2, #1
 801fe2e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 801fe32:	687b      	ldr	r3, [r7, #4]
 801fe34:	2201      	movs	r2, #1
 801fe36:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801fe3a:	687b      	ldr	r3, [r7, #4]
 801fe3c:	2201      	movs	r2, #1
 801fe3e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 801fe42:	687b      	ldr	r3, [r7, #4]
 801fe44:	2201      	movs	r2, #1
 801fe46:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 801fe4a:	687b      	ldr	r3, [r7, #4]
 801fe4c:	2201      	movs	r2, #1
 801fe4e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801fe52:	687b      	ldr	r3, [r7, #4]
 801fe54:	2201      	movs	r2, #1
 801fe56:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 801fe5a:	687b      	ldr	r3, [r7, #4]
 801fe5c:	2201      	movs	r2, #1
 801fe5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 801fe62:	2300      	movs	r3, #0
}
 801fe64:	4618      	mov	r0, r3
 801fe66:	3708      	adds	r7, #8
 801fe68:	46bd      	mov	sp, r7
 801fe6a:	bd80      	pop	{r7, pc}

0801fe6c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 801fe6c:	b480      	push	{r7}
 801fe6e:	b083      	sub	sp, #12
 801fe70:	af00      	add	r7, sp, #0
 801fe72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 801fe74:	bf00      	nop
 801fe76:	370c      	adds	r7, #12
 801fe78:	46bd      	mov	sp, r7
 801fe7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fe7e:	4770      	bx	lr

0801fe80 <HAL_TIM_PWM_Start_DMA>:
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 801fe80:	b580      	push	{r7, lr}
 801fe82:	b086      	sub	sp, #24
 801fe84:	af00      	add	r7, sp, #0
 801fe86:	60f8      	str	r0, [r7, #12]
 801fe88:	60b9      	str	r1, [r7, #8]
 801fe8a:	607a      	str	r2, [r7, #4]
 801fe8c:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 801fe8e:	2300      	movs	r3, #0
 801fe90:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 801fe92:	68bb      	ldr	r3, [r7, #8]
 801fe94:	2b00      	cmp	r3, #0
 801fe96:	d109      	bne.n	801feac <HAL_TIM_PWM_Start_DMA+0x2c>
 801fe98:	68fb      	ldr	r3, [r7, #12]
 801fe9a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 801fe9e:	b2db      	uxtb	r3, r3
 801fea0:	2b02      	cmp	r3, #2
 801fea2:	bf0c      	ite	eq
 801fea4:	2301      	moveq	r3, #1
 801fea6:	2300      	movne	r3, #0
 801fea8:	b2db      	uxtb	r3, r3
 801feaa:	e022      	b.n	801fef2 <HAL_TIM_PWM_Start_DMA+0x72>
 801feac:	68bb      	ldr	r3, [r7, #8]
 801feae:	2b04      	cmp	r3, #4
 801feb0:	d109      	bne.n	801fec6 <HAL_TIM_PWM_Start_DMA+0x46>
 801feb2:	68fb      	ldr	r3, [r7, #12]
 801feb4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 801feb8:	b2db      	uxtb	r3, r3
 801feba:	2b02      	cmp	r3, #2
 801febc:	bf0c      	ite	eq
 801febe:	2301      	moveq	r3, #1
 801fec0:	2300      	movne	r3, #0
 801fec2:	b2db      	uxtb	r3, r3
 801fec4:	e015      	b.n	801fef2 <HAL_TIM_PWM_Start_DMA+0x72>
 801fec6:	68bb      	ldr	r3, [r7, #8]
 801fec8:	2b08      	cmp	r3, #8
 801feca:	d109      	bne.n	801fee0 <HAL_TIM_PWM_Start_DMA+0x60>
 801fecc:	68fb      	ldr	r3, [r7, #12]
 801fece:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801fed2:	b2db      	uxtb	r3, r3
 801fed4:	2b02      	cmp	r3, #2
 801fed6:	bf0c      	ite	eq
 801fed8:	2301      	moveq	r3, #1
 801feda:	2300      	movne	r3, #0
 801fedc:	b2db      	uxtb	r3, r3
 801fede:	e008      	b.n	801fef2 <HAL_TIM_PWM_Start_DMA+0x72>
 801fee0:	68fb      	ldr	r3, [r7, #12]
 801fee2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 801fee6:	b2db      	uxtb	r3, r3
 801fee8:	2b02      	cmp	r3, #2
 801feea:	bf0c      	ite	eq
 801feec:	2301      	moveq	r3, #1
 801feee:	2300      	movne	r3, #0
 801fef0:	b2db      	uxtb	r3, r3
 801fef2:	2b00      	cmp	r3, #0
 801fef4:	d001      	beq.n	801fefa <HAL_TIM_PWM_Start_DMA+0x7a>
  {
    return HAL_BUSY;
 801fef6:	2302      	movs	r3, #2
 801fef8:	e15d      	b.n	80201b6 <HAL_TIM_PWM_Start_DMA+0x336>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 801fefa:	68bb      	ldr	r3, [r7, #8]
 801fefc:	2b00      	cmp	r3, #0
 801fefe:	d109      	bne.n	801ff14 <HAL_TIM_PWM_Start_DMA+0x94>
 801ff00:	68fb      	ldr	r3, [r7, #12]
 801ff02:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 801ff06:	b2db      	uxtb	r3, r3
 801ff08:	2b01      	cmp	r3, #1
 801ff0a:	bf0c      	ite	eq
 801ff0c:	2301      	moveq	r3, #1
 801ff0e:	2300      	movne	r3, #0
 801ff10:	b2db      	uxtb	r3, r3
 801ff12:	e022      	b.n	801ff5a <HAL_TIM_PWM_Start_DMA+0xda>
 801ff14:	68bb      	ldr	r3, [r7, #8]
 801ff16:	2b04      	cmp	r3, #4
 801ff18:	d109      	bne.n	801ff2e <HAL_TIM_PWM_Start_DMA+0xae>
 801ff1a:	68fb      	ldr	r3, [r7, #12]
 801ff1c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 801ff20:	b2db      	uxtb	r3, r3
 801ff22:	2b01      	cmp	r3, #1
 801ff24:	bf0c      	ite	eq
 801ff26:	2301      	moveq	r3, #1
 801ff28:	2300      	movne	r3, #0
 801ff2a:	b2db      	uxtb	r3, r3
 801ff2c:	e015      	b.n	801ff5a <HAL_TIM_PWM_Start_DMA+0xda>
 801ff2e:	68bb      	ldr	r3, [r7, #8]
 801ff30:	2b08      	cmp	r3, #8
 801ff32:	d109      	bne.n	801ff48 <HAL_TIM_PWM_Start_DMA+0xc8>
 801ff34:	68fb      	ldr	r3, [r7, #12]
 801ff36:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801ff3a:	b2db      	uxtb	r3, r3
 801ff3c:	2b01      	cmp	r3, #1
 801ff3e:	bf0c      	ite	eq
 801ff40:	2301      	moveq	r3, #1
 801ff42:	2300      	movne	r3, #0
 801ff44:	b2db      	uxtb	r3, r3
 801ff46:	e008      	b.n	801ff5a <HAL_TIM_PWM_Start_DMA+0xda>
 801ff48:	68fb      	ldr	r3, [r7, #12]
 801ff4a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 801ff4e:	b2db      	uxtb	r3, r3
 801ff50:	2b01      	cmp	r3, #1
 801ff52:	bf0c      	ite	eq
 801ff54:	2301      	moveq	r3, #1
 801ff56:	2300      	movne	r3, #0
 801ff58:	b2db      	uxtb	r3, r3
 801ff5a:	2b00      	cmp	r3, #0
 801ff5c:	d024      	beq.n	801ffa8 <HAL_TIM_PWM_Start_DMA+0x128>
  {
    if ((pData == NULL) && (Length > 0U))
 801ff5e:	687b      	ldr	r3, [r7, #4]
 801ff60:	2b00      	cmp	r3, #0
 801ff62:	d104      	bne.n	801ff6e <HAL_TIM_PWM_Start_DMA+0xee>
 801ff64:	887b      	ldrh	r3, [r7, #2]
 801ff66:	2b00      	cmp	r3, #0
 801ff68:	d001      	beq.n	801ff6e <HAL_TIM_PWM_Start_DMA+0xee>
    {
      return HAL_ERROR;
 801ff6a:	2301      	movs	r3, #1
 801ff6c:	e123      	b.n	80201b6 <HAL_TIM_PWM_Start_DMA+0x336>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 801ff6e:	68bb      	ldr	r3, [r7, #8]
 801ff70:	2b00      	cmp	r3, #0
 801ff72:	d104      	bne.n	801ff7e <HAL_TIM_PWM_Start_DMA+0xfe>
 801ff74:	68fb      	ldr	r3, [r7, #12]
 801ff76:	2202      	movs	r2, #2
 801ff78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 801ff7c:	e016      	b.n	801ffac <HAL_TIM_PWM_Start_DMA+0x12c>
 801ff7e:	68bb      	ldr	r3, [r7, #8]
 801ff80:	2b04      	cmp	r3, #4
 801ff82:	d104      	bne.n	801ff8e <HAL_TIM_PWM_Start_DMA+0x10e>
 801ff84:	68fb      	ldr	r3, [r7, #12]
 801ff86:	2202      	movs	r2, #2
 801ff88:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 801ff8c:	e00e      	b.n	801ffac <HAL_TIM_PWM_Start_DMA+0x12c>
 801ff8e:	68bb      	ldr	r3, [r7, #8]
 801ff90:	2b08      	cmp	r3, #8
 801ff92:	d104      	bne.n	801ff9e <HAL_TIM_PWM_Start_DMA+0x11e>
 801ff94:	68fb      	ldr	r3, [r7, #12]
 801ff96:	2202      	movs	r2, #2
 801ff98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 801ff9c:	e006      	b.n	801ffac <HAL_TIM_PWM_Start_DMA+0x12c>
 801ff9e:	68fb      	ldr	r3, [r7, #12]
 801ffa0:	2202      	movs	r2, #2
 801ffa2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 801ffa6:	e001      	b.n	801ffac <HAL_TIM_PWM_Start_DMA+0x12c>
    }
  }
  else
  {
    return HAL_ERROR;
 801ffa8:	2301      	movs	r3, #1
 801ffaa:	e104      	b.n	80201b6 <HAL_TIM_PWM_Start_DMA+0x336>
 801ffac:	68bb      	ldr	r3, [r7, #8]
 801ffae:	2b0c      	cmp	r3, #12
 801ffb0:	f200 80ae 	bhi.w	8020110 <HAL_TIM_PWM_Start_DMA+0x290>
 801ffb4:	a201      	add	r2, pc, #4	; (adr r2, 801ffbc <HAL_TIM_PWM_Start_DMA+0x13c>)
 801ffb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801ffba:	bf00      	nop
 801ffbc:	0801fff1 	.word	0x0801fff1
 801ffc0:	08020111 	.word	0x08020111
 801ffc4:	08020111 	.word	0x08020111
 801ffc8:	08020111 	.word	0x08020111
 801ffcc:	08020039 	.word	0x08020039
 801ffd0:	08020111 	.word	0x08020111
 801ffd4:	08020111 	.word	0x08020111
 801ffd8:	08020111 	.word	0x08020111
 801ffdc:	08020081 	.word	0x08020081
 801ffe0:	08020111 	.word	0x08020111
 801ffe4:	08020111 	.word	0x08020111
 801ffe8:	08020111 	.word	0x08020111
 801ffec:	080200c9 	.word	0x080200c9
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 801fff0:	68fb      	ldr	r3, [r7, #12]
 801fff2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801fff4:	4a72      	ldr	r2, [pc, #456]	; (80201c0 <HAL_TIM_PWM_Start_DMA+0x340>)
 801fff6:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 801fff8:	68fb      	ldr	r3, [r7, #12]
 801fffa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801fffc:	4a71      	ldr	r2, [pc, #452]	; (80201c4 <HAL_TIM_PWM_Start_DMA+0x344>)
 801fffe:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8020000:	68fb      	ldr	r3, [r7, #12]
 8020002:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8020004:	4a70      	ldr	r2, [pc, #448]	; (80201c8 <HAL_TIM_PWM_Start_DMA+0x348>)
 8020006:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8020008:	68fb      	ldr	r3, [r7, #12]
 802000a:	6a58      	ldr	r0, [r3, #36]	; 0x24
 802000c:	6879      	ldr	r1, [r7, #4]
 802000e:	68fb      	ldr	r3, [r7, #12]
 8020010:	681b      	ldr	r3, [r3, #0]
 8020012:	3334      	adds	r3, #52	; 0x34
 8020014:	461a      	mov	r2, r3
 8020016:	887b      	ldrh	r3, [r7, #2]
 8020018:	f7fd ff7a 	bl	801df10 <HAL_DMA_Start_IT>
 802001c:	4603      	mov	r3, r0
 802001e:	2b00      	cmp	r3, #0
 8020020:	d001      	beq.n	8020026 <HAL_TIM_PWM_Start_DMA+0x1a6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8020022:	2301      	movs	r3, #1
 8020024:	e0c7      	b.n	80201b6 <HAL_TIM_PWM_Start_DMA+0x336>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8020026:	68fb      	ldr	r3, [r7, #12]
 8020028:	681b      	ldr	r3, [r3, #0]
 802002a:	68da      	ldr	r2, [r3, #12]
 802002c:	68fb      	ldr	r3, [r7, #12]
 802002e:	681b      	ldr	r3, [r3, #0]
 8020030:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8020034:	60da      	str	r2, [r3, #12]
      break;
 8020036:	e06e      	b.n	8020116 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8020038:	68fb      	ldr	r3, [r7, #12]
 802003a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802003c:	4a60      	ldr	r2, [pc, #384]	; (80201c0 <HAL_TIM_PWM_Start_DMA+0x340>)
 802003e:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8020040:	68fb      	ldr	r3, [r7, #12]
 8020042:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8020044:	4a5f      	ldr	r2, [pc, #380]	; (80201c4 <HAL_TIM_PWM_Start_DMA+0x344>)
 8020046:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8020048:	68fb      	ldr	r3, [r7, #12]
 802004a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802004c:	4a5e      	ldr	r2, [pc, #376]	; (80201c8 <HAL_TIM_PWM_Start_DMA+0x348>)
 802004e:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8020050:	68fb      	ldr	r3, [r7, #12]
 8020052:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8020054:	6879      	ldr	r1, [r7, #4]
 8020056:	68fb      	ldr	r3, [r7, #12]
 8020058:	681b      	ldr	r3, [r3, #0]
 802005a:	3338      	adds	r3, #56	; 0x38
 802005c:	461a      	mov	r2, r3
 802005e:	887b      	ldrh	r3, [r7, #2]
 8020060:	f7fd ff56 	bl	801df10 <HAL_DMA_Start_IT>
 8020064:	4603      	mov	r3, r0
 8020066:	2b00      	cmp	r3, #0
 8020068:	d001      	beq.n	802006e <HAL_TIM_PWM_Start_DMA+0x1ee>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 802006a:	2301      	movs	r3, #1
 802006c:	e0a3      	b.n	80201b6 <HAL_TIM_PWM_Start_DMA+0x336>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 802006e:	68fb      	ldr	r3, [r7, #12]
 8020070:	681b      	ldr	r3, [r3, #0]
 8020072:	68da      	ldr	r2, [r3, #12]
 8020074:	68fb      	ldr	r3, [r7, #12]
 8020076:	681b      	ldr	r3, [r3, #0]
 8020078:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 802007c:	60da      	str	r2, [r3, #12]
      break;
 802007e:	e04a      	b.n	8020116 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8020080:	68fb      	ldr	r3, [r7, #12]
 8020082:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8020084:	4a4e      	ldr	r2, [pc, #312]	; (80201c0 <HAL_TIM_PWM_Start_DMA+0x340>)
 8020086:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8020088:	68fb      	ldr	r3, [r7, #12]
 802008a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802008c:	4a4d      	ldr	r2, [pc, #308]	; (80201c4 <HAL_TIM_PWM_Start_DMA+0x344>)
 802008e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8020090:	68fb      	ldr	r3, [r7, #12]
 8020092:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8020094:	4a4c      	ldr	r2, [pc, #304]	; (80201c8 <HAL_TIM_PWM_Start_DMA+0x348>)
 8020096:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8020098:	68fb      	ldr	r3, [r7, #12]
 802009a:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 802009c:	6879      	ldr	r1, [r7, #4]
 802009e:	68fb      	ldr	r3, [r7, #12]
 80200a0:	681b      	ldr	r3, [r3, #0]
 80200a2:	333c      	adds	r3, #60	; 0x3c
 80200a4:	461a      	mov	r2, r3
 80200a6:	887b      	ldrh	r3, [r7, #2]
 80200a8:	f7fd ff32 	bl	801df10 <HAL_DMA_Start_IT>
 80200ac:	4603      	mov	r3, r0
 80200ae:	2b00      	cmp	r3, #0
 80200b0:	d001      	beq.n	80200b6 <HAL_TIM_PWM_Start_DMA+0x236>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80200b2:	2301      	movs	r3, #1
 80200b4:	e07f      	b.n	80201b6 <HAL_TIM_PWM_Start_DMA+0x336>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 80200b6:	68fb      	ldr	r3, [r7, #12]
 80200b8:	681b      	ldr	r3, [r3, #0]
 80200ba:	68da      	ldr	r2, [r3, #12]
 80200bc:	68fb      	ldr	r3, [r7, #12]
 80200be:	681b      	ldr	r3, [r3, #0]
 80200c0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80200c4:	60da      	str	r2, [r3, #12]
      break;
 80200c6:	e026      	b.n	8020116 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80200c8:	68fb      	ldr	r3, [r7, #12]
 80200ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80200cc:	4a3c      	ldr	r2, [pc, #240]	; (80201c0 <HAL_TIM_PWM_Start_DMA+0x340>)
 80200ce:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80200d0:	68fb      	ldr	r3, [r7, #12]
 80200d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80200d4:	4a3b      	ldr	r2, [pc, #236]	; (80201c4 <HAL_TIM_PWM_Start_DMA+0x344>)
 80200d6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 80200d8:	68fb      	ldr	r3, [r7, #12]
 80200da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80200dc:	4a3a      	ldr	r2, [pc, #232]	; (80201c8 <HAL_TIM_PWM_Start_DMA+0x348>)
 80200de:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 80200e0:	68fb      	ldr	r3, [r7, #12]
 80200e2:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80200e4:	6879      	ldr	r1, [r7, #4]
 80200e6:	68fb      	ldr	r3, [r7, #12]
 80200e8:	681b      	ldr	r3, [r3, #0]
 80200ea:	3340      	adds	r3, #64	; 0x40
 80200ec:	461a      	mov	r2, r3
 80200ee:	887b      	ldrh	r3, [r7, #2]
 80200f0:	f7fd ff0e 	bl	801df10 <HAL_DMA_Start_IT>
 80200f4:	4603      	mov	r3, r0
 80200f6:	2b00      	cmp	r3, #0
 80200f8:	d001      	beq.n	80200fe <HAL_TIM_PWM_Start_DMA+0x27e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80200fa:	2301      	movs	r3, #1
 80200fc:	e05b      	b.n	80201b6 <HAL_TIM_PWM_Start_DMA+0x336>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 80200fe:	68fb      	ldr	r3, [r7, #12]
 8020100:	681b      	ldr	r3, [r3, #0]
 8020102:	68da      	ldr	r2, [r3, #12]
 8020104:	68fb      	ldr	r3, [r7, #12]
 8020106:	681b      	ldr	r3, [r3, #0]
 8020108:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 802010c:	60da      	str	r2, [r3, #12]
      break;
 802010e:	e002      	b.n	8020116 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    default:
      status = HAL_ERROR;
 8020110:	2301      	movs	r3, #1
 8020112:	75fb      	strb	r3, [r7, #23]
      break;
 8020114:	bf00      	nop
  }

  if (status == HAL_OK)
 8020116:	7dfb      	ldrb	r3, [r7, #23]
 8020118:	2b00      	cmp	r3, #0
 802011a:	d14b      	bne.n	80201b4 <HAL_TIM_PWM_Start_DMA+0x334>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 802011c:	68fb      	ldr	r3, [r7, #12]
 802011e:	681b      	ldr	r3, [r3, #0]
 8020120:	2201      	movs	r2, #1
 8020122:	68b9      	ldr	r1, [r7, #8]
 8020124:	4618      	mov	r0, r3
 8020126:	f000 ff65 	bl	8020ff4 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 802012a:	68fb      	ldr	r3, [r7, #12]
 802012c:	681b      	ldr	r3, [r3, #0]
 802012e:	4a27      	ldr	r2, [pc, #156]	; (80201cc <HAL_TIM_PWM_Start_DMA+0x34c>)
 8020130:	4293      	cmp	r3, r2
 8020132:	d107      	bne.n	8020144 <HAL_TIM_PWM_Start_DMA+0x2c4>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8020134:	68fb      	ldr	r3, [r7, #12]
 8020136:	681b      	ldr	r3, [r3, #0]
 8020138:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 802013a:	68fb      	ldr	r3, [r7, #12]
 802013c:	681b      	ldr	r3, [r3, #0]
 802013e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8020142:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8020144:	68fb      	ldr	r3, [r7, #12]
 8020146:	681b      	ldr	r3, [r3, #0]
 8020148:	4a20      	ldr	r2, [pc, #128]	; (80201cc <HAL_TIM_PWM_Start_DMA+0x34c>)
 802014a:	4293      	cmp	r3, r2
 802014c:	d018      	beq.n	8020180 <HAL_TIM_PWM_Start_DMA+0x300>
 802014e:	68fb      	ldr	r3, [r7, #12]
 8020150:	681b      	ldr	r3, [r3, #0]
 8020152:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8020156:	d013      	beq.n	8020180 <HAL_TIM_PWM_Start_DMA+0x300>
 8020158:	68fb      	ldr	r3, [r7, #12]
 802015a:	681b      	ldr	r3, [r3, #0]
 802015c:	4a1c      	ldr	r2, [pc, #112]	; (80201d0 <HAL_TIM_PWM_Start_DMA+0x350>)
 802015e:	4293      	cmp	r3, r2
 8020160:	d00e      	beq.n	8020180 <HAL_TIM_PWM_Start_DMA+0x300>
 8020162:	68fb      	ldr	r3, [r7, #12]
 8020164:	681b      	ldr	r3, [r3, #0]
 8020166:	4a1b      	ldr	r2, [pc, #108]	; (80201d4 <HAL_TIM_PWM_Start_DMA+0x354>)
 8020168:	4293      	cmp	r3, r2
 802016a:	d009      	beq.n	8020180 <HAL_TIM_PWM_Start_DMA+0x300>
 802016c:	68fb      	ldr	r3, [r7, #12]
 802016e:	681b      	ldr	r3, [r3, #0]
 8020170:	4a19      	ldr	r2, [pc, #100]	; (80201d8 <HAL_TIM_PWM_Start_DMA+0x358>)
 8020172:	4293      	cmp	r3, r2
 8020174:	d004      	beq.n	8020180 <HAL_TIM_PWM_Start_DMA+0x300>
 8020176:	68fb      	ldr	r3, [r7, #12]
 8020178:	681b      	ldr	r3, [r3, #0]
 802017a:	4a18      	ldr	r2, [pc, #96]	; (80201dc <HAL_TIM_PWM_Start_DMA+0x35c>)
 802017c:	4293      	cmp	r3, r2
 802017e:	d111      	bne.n	80201a4 <HAL_TIM_PWM_Start_DMA+0x324>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8020180:	68fb      	ldr	r3, [r7, #12]
 8020182:	681b      	ldr	r3, [r3, #0]
 8020184:	689b      	ldr	r3, [r3, #8]
 8020186:	f003 0307 	and.w	r3, r3, #7
 802018a:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 802018c:	693b      	ldr	r3, [r7, #16]
 802018e:	2b06      	cmp	r3, #6
 8020190:	d010      	beq.n	80201b4 <HAL_TIM_PWM_Start_DMA+0x334>
      {
        __HAL_TIM_ENABLE(htim);
 8020192:	68fb      	ldr	r3, [r7, #12]
 8020194:	681b      	ldr	r3, [r3, #0]
 8020196:	681a      	ldr	r2, [r3, #0]
 8020198:	68fb      	ldr	r3, [r7, #12]
 802019a:	681b      	ldr	r3, [r3, #0]
 802019c:	f042 0201 	orr.w	r2, r2, #1
 80201a0:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80201a2:	e007      	b.n	80201b4 <HAL_TIM_PWM_Start_DMA+0x334>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80201a4:	68fb      	ldr	r3, [r7, #12]
 80201a6:	681b      	ldr	r3, [r3, #0]
 80201a8:	681a      	ldr	r2, [r3, #0]
 80201aa:	68fb      	ldr	r3, [r7, #12]
 80201ac:	681b      	ldr	r3, [r3, #0]
 80201ae:	f042 0201 	orr.w	r2, r2, #1
 80201b2:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 80201b4:	7dfb      	ldrb	r3, [r7, #23]
}
 80201b6:	4618      	mov	r0, r3
 80201b8:	3718      	adds	r7, #24
 80201ba:	46bd      	mov	sp, r7
 80201bc:	bd80      	pop	{r7, pc}
 80201be:	bf00      	nop
 80201c0:	08020999 	.word	0x08020999
 80201c4:	08020a41 	.word	0x08020a41
 80201c8:	08020907 	.word	0x08020907
 80201cc:	40010000 	.word	0x40010000
 80201d0:	40000400 	.word	0x40000400
 80201d4:	40000800 	.word	0x40000800
 80201d8:	40000c00 	.word	0x40000c00
 80201dc:	40014000 	.word	0x40014000

080201e0 <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80201e0:	b580      	push	{r7, lr}
 80201e2:	b084      	sub	sp, #16
 80201e4:	af00      	add	r7, sp, #0
 80201e6:	6078      	str	r0, [r7, #4]
 80201e8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80201ea:	2300      	movs	r3, #0
 80201ec:	73fb      	strb	r3, [r7, #15]
 80201ee:	683b      	ldr	r3, [r7, #0]
 80201f0:	2b0c      	cmp	r3, #12
 80201f2:	d855      	bhi.n	80202a0 <HAL_TIM_PWM_Stop_DMA+0xc0>
 80201f4:	a201      	add	r2, pc, #4	; (adr r2, 80201fc <HAL_TIM_PWM_Stop_DMA+0x1c>)
 80201f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80201fa:	bf00      	nop
 80201fc:	08020231 	.word	0x08020231
 8020200:	080202a1 	.word	0x080202a1
 8020204:	080202a1 	.word	0x080202a1
 8020208:	080202a1 	.word	0x080202a1
 802020c:	0802024d 	.word	0x0802024d
 8020210:	080202a1 	.word	0x080202a1
 8020214:	080202a1 	.word	0x080202a1
 8020218:	080202a1 	.word	0x080202a1
 802021c:	08020269 	.word	0x08020269
 8020220:	080202a1 	.word	0x080202a1
 8020224:	080202a1 	.word	0x080202a1
 8020228:	080202a1 	.word	0x080202a1
 802022c:	08020285 	.word	0x08020285
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8020230:	687b      	ldr	r3, [r7, #4]
 8020232:	681b      	ldr	r3, [r3, #0]
 8020234:	68da      	ldr	r2, [r3, #12]
 8020236:	687b      	ldr	r3, [r7, #4]
 8020238:	681b      	ldr	r3, [r3, #0]
 802023a:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 802023e:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8020240:	687b      	ldr	r3, [r7, #4]
 8020242:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8020244:	4618      	mov	r0, r3
 8020246:	f7fd ff2b 	bl	801e0a0 <HAL_DMA_Abort_IT>
      break;
 802024a:	e02c      	b.n	80202a6 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 802024c:	687b      	ldr	r3, [r7, #4]
 802024e:	681b      	ldr	r3, [r3, #0]
 8020250:	68da      	ldr	r2, [r3, #12]
 8020252:	687b      	ldr	r3, [r7, #4]
 8020254:	681b      	ldr	r3, [r3, #0]
 8020256:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 802025a:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 802025c:	687b      	ldr	r3, [r7, #4]
 802025e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8020260:	4618      	mov	r0, r3
 8020262:	f7fd ff1d 	bl	801e0a0 <HAL_DMA_Abort_IT>
      break;
 8020266:	e01e      	b.n	80202a6 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8020268:	687b      	ldr	r3, [r7, #4]
 802026a:	681b      	ldr	r3, [r3, #0]
 802026c:	68da      	ldr	r2, [r3, #12]
 802026e:	687b      	ldr	r3, [r7, #4]
 8020270:	681b      	ldr	r3, [r3, #0]
 8020272:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8020276:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8020278:	687b      	ldr	r3, [r7, #4]
 802027a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802027c:	4618      	mov	r0, r3
 802027e:	f7fd ff0f 	bl	801e0a0 <HAL_DMA_Abort_IT>
      break;
 8020282:	e010      	b.n	80202a6 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8020284:	687b      	ldr	r3, [r7, #4]
 8020286:	681b      	ldr	r3, [r3, #0]
 8020288:	68da      	ldr	r2, [r3, #12]
 802028a:	687b      	ldr	r3, [r7, #4]
 802028c:	681b      	ldr	r3, [r3, #0]
 802028e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8020292:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8020294:	687b      	ldr	r3, [r7, #4]
 8020296:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020298:	4618      	mov	r0, r3
 802029a:	f7fd ff01 	bl	801e0a0 <HAL_DMA_Abort_IT>
      break;
 802029e:	e002      	b.n	80202a6 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    default:
      status = HAL_ERROR;
 80202a0:	2301      	movs	r3, #1
 80202a2:	73fb      	strb	r3, [r7, #15]
      break;
 80202a4:	bf00      	nop
  }

  if (status == HAL_OK)
 80202a6:	7bfb      	ldrb	r3, [r7, #15]
 80202a8:	2b00      	cmp	r3, #0
 80202aa:	d157      	bne.n	802035c <HAL_TIM_PWM_Stop_DMA+0x17c>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80202ac:	687b      	ldr	r3, [r7, #4]
 80202ae:	681b      	ldr	r3, [r3, #0]
 80202b0:	2200      	movs	r2, #0
 80202b2:	6839      	ldr	r1, [r7, #0]
 80202b4:	4618      	mov	r0, r3
 80202b6:	f000 fe9d 	bl	8020ff4 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80202ba:	687b      	ldr	r3, [r7, #4]
 80202bc:	681b      	ldr	r3, [r3, #0]
 80202be:	4a2a      	ldr	r2, [pc, #168]	; (8020368 <HAL_TIM_PWM_Stop_DMA+0x188>)
 80202c0:	4293      	cmp	r3, r2
 80202c2:	d117      	bne.n	80202f4 <HAL_TIM_PWM_Stop_DMA+0x114>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 80202c4:	687b      	ldr	r3, [r7, #4]
 80202c6:	681b      	ldr	r3, [r3, #0]
 80202c8:	6a1a      	ldr	r2, [r3, #32]
 80202ca:	f241 1311 	movw	r3, #4369	; 0x1111
 80202ce:	4013      	ands	r3, r2
 80202d0:	2b00      	cmp	r3, #0
 80202d2:	d10f      	bne.n	80202f4 <HAL_TIM_PWM_Stop_DMA+0x114>
 80202d4:	687b      	ldr	r3, [r7, #4]
 80202d6:	681b      	ldr	r3, [r3, #0]
 80202d8:	6a1a      	ldr	r2, [r3, #32]
 80202da:	f240 4344 	movw	r3, #1092	; 0x444
 80202de:	4013      	ands	r3, r2
 80202e0:	2b00      	cmp	r3, #0
 80202e2:	d107      	bne.n	80202f4 <HAL_TIM_PWM_Stop_DMA+0x114>
 80202e4:	687b      	ldr	r3, [r7, #4]
 80202e6:	681b      	ldr	r3, [r3, #0]
 80202e8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80202ea:	687b      	ldr	r3, [r7, #4]
 80202ec:	681b      	ldr	r3, [r3, #0]
 80202ee:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80202f2:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 80202f4:	687b      	ldr	r3, [r7, #4]
 80202f6:	681b      	ldr	r3, [r3, #0]
 80202f8:	6a1a      	ldr	r2, [r3, #32]
 80202fa:	f241 1311 	movw	r3, #4369	; 0x1111
 80202fe:	4013      	ands	r3, r2
 8020300:	2b00      	cmp	r3, #0
 8020302:	d10f      	bne.n	8020324 <HAL_TIM_PWM_Stop_DMA+0x144>
 8020304:	687b      	ldr	r3, [r7, #4]
 8020306:	681b      	ldr	r3, [r3, #0]
 8020308:	6a1a      	ldr	r2, [r3, #32]
 802030a:	f240 4344 	movw	r3, #1092	; 0x444
 802030e:	4013      	ands	r3, r2
 8020310:	2b00      	cmp	r3, #0
 8020312:	d107      	bne.n	8020324 <HAL_TIM_PWM_Stop_DMA+0x144>
 8020314:	687b      	ldr	r3, [r7, #4]
 8020316:	681b      	ldr	r3, [r3, #0]
 8020318:	681a      	ldr	r2, [r3, #0]
 802031a:	687b      	ldr	r3, [r7, #4]
 802031c:	681b      	ldr	r3, [r3, #0]
 802031e:	f022 0201 	bic.w	r2, r2, #1
 8020322:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8020324:	683b      	ldr	r3, [r7, #0]
 8020326:	2b00      	cmp	r3, #0
 8020328:	d104      	bne.n	8020334 <HAL_TIM_PWM_Stop_DMA+0x154>
 802032a:	687b      	ldr	r3, [r7, #4]
 802032c:	2201      	movs	r2, #1
 802032e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8020332:	e013      	b.n	802035c <HAL_TIM_PWM_Stop_DMA+0x17c>
 8020334:	683b      	ldr	r3, [r7, #0]
 8020336:	2b04      	cmp	r3, #4
 8020338:	d104      	bne.n	8020344 <HAL_TIM_PWM_Stop_DMA+0x164>
 802033a:	687b      	ldr	r3, [r7, #4]
 802033c:	2201      	movs	r2, #1
 802033e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8020342:	e00b      	b.n	802035c <HAL_TIM_PWM_Stop_DMA+0x17c>
 8020344:	683b      	ldr	r3, [r7, #0]
 8020346:	2b08      	cmp	r3, #8
 8020348:	d104      	bne.n	8020354 <HAL_TIM_PWM_Stop_DMA+0x174>
 802034a:	687b      	ldr	r3, [r7, #4]
 802034c:	2201      	movs	r2, #1
 802034e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8020352:	e003      	b.n	802035c <HAL_TIM_PWM_Stop_DMA+0x17c>
 8020354:	687b      	ldr	r3, [r7, #4]
 8020356:	2201      	movs	r2, #1
 8020358:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Return function status */
  return status;
 802035c:	7bfb      	ldrb	r3, [r7, #15]
}
 802035e:	4618      	mov	r0, r3
 8020360:	3710      	adds	r7, #16
 8020362:	46bd      	mov	sp, r7
 8020364:	bd80      	pop	{r7, pc}
 8020366:	bf00      	nop
 8020368:	40010000 	.word	0x40010000

0802036c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 802036c:	b580      	push	{r7, lr}
 802036e:	b082      	sub	sp, #8
 8020370:	af00      	add	r7, sp, #0
 8020372:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8020374:	687b      	ldr	r3, [r7, #4]
 8020376:	681b      	ldr	r3, [r3, #0]
 8020378:	691b      	ldr	r3, [r3, #16]
 802037a:	f003 0302 	and.w	r3, r3, #2
 802037e:	2b02      	cmp	r3, #2
 8020380:	d122      	bne.n	80203c8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8020382:	687b      	ldr	r3, [r7, #4]
 8020384:	681b      	ldr	r3, [r3, #0]
 8020386:	68db      	ldr	r3, [r3, #12]
 8020388:	f003 0302 	and.w	r3, r3, #2
 802038c:	2b02      	cmp	r3, #2
 802038e:	d11b      	bne.n	80203c8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8020390:	687b      	ldr	r3, [r7, #4]
 8020392:	681b      	ldr	r3, [r3, #0]
 8020394:	f06f 0202 	mvn.w	r2, #2
 8020398:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 802039a:	687b      	ldr	r3, [r7, #4]
 802039c:	2201      	movs	r2, #1
 802039e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80203a0:	687b      	ldr	r3, [r7, #4]
 80203a2:	681b      	ldr	r3, [r3, #0]
 80203a4:	699b      	ldr	r3, [r3, #24]
 80203a6:	f003 0303 	and.w	r3, r3, #3
 80203aa:	2b00      	cmp	r3, #0
 80203ac:	d003      	beq.n	80203b6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80203ae:	6878      	ldr	r0, [r7, #4]
 80203b0:	f000 fa81 	bl	80208b6 <HAL_TIM_IC_CaptureCallback>
 80203b4:	e005      	b.n	80203c2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80203b6:	6878      	ldr	r0, [r7, #4]
 80203b8:	f000 fa73 	bl	80208a2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80203bc:	6878      	ldr	r0, [r7, #4]
 80203be:	f7fc fdbb 	bl	801cf38 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80203c2:	687b      	ldr	r3, [r7, #4]
 80203c4:	2200      	movs	r2, #0
 80203c6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80203c8:	687b      	ldr	r3, [r7, #4]
 80203ca:	681b      	ldr	r3, [r3, #0]
 80203cc:	691b      	ldr	r3, [r3, #16]
 80203ce:	f003 0304 	and.w	r3, r3, #4
 80203d2:	2b04      	cmp	r3, #4
 80203d4:	d122      	bne.n	802041c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80203d6:	687b      	ldr	r3, [r7, #4]
 80203d8:	681b      	ldr	r3, [r3, #0]
 80203da:	68db      	ldr	r3, [r3, #12]
 80203dc:	f003 0304 	and.w	r3, r3, #4
 80203e0:	2b04      	cmp	r3, #4
 80203e2:	d11b      	bne.n	802041c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80203e4:	687b      	ldr	r3, [r7, #4]
 80203e6:	681b      	ldr	r3, [r3, #0]
 80203e8:	f06f 0204 	mvn.w	r2, #4
 80203ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80203ee:	687b      	ldr	r3, [r7, #4]
 80203f0:	2202      	movs	r2, #2
 80203f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80203f4:	687b      	ldr	r3, [r7, #4]
 80203f6:	681b      	ldr	r3, [r3, #0]
 80203f8:	699b      	ldr	r3, [r3, #24]
 80203fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80203fe:	2b00      	cmp	r3, #0
 8020400:	d003      	beq.n	802040a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8020402:	6878      	ldr	r0, [r7, #4]
 8020404:	f000 fa57 	bl	80208b6 <HAL_TIM_IC_CaptureCallback>
 8020408:	e005      	b.n	8020416 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 802040a:	6878      	ldr	r0, [r7, #4]
 802040c:	f000 fa49 	bl	80208a2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8020410:	6878      	ldr	r0, [r7, #4]
 8020412:	f7fc fd91 	bl	801cf38 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8020416:	687b      	ldr	r3, [r7, #4]
 8020418:	2200      	movs	r2, #0
 802041a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 802041c:	687b      	ldr	r3, [r7, #4]
 802041e:	681b      	ldr	r3, [r3, #0]
 8020420:	691b      	ldr	r3, [r3, #16]
 8020422:	f003 0308 	and.w	r3, r3, #8
 8020426:	2b08      	cmp	r3, #8
 8020428:	d122      	bne.n	8020470 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 802042a:	687b      	ldr	r3, [r7, #4]
 802042c:	681b      	ldr	r3, [r3, #0]
 802042e:	68db      	ldr	r3, [r3, #12]
 8020430:	f003 0308 	and.w	r3, r3, #8
 8020434:	2b08      	cmp	r3, #8
 8020436:	d11b      	bne.n	8020470 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8020438:	687b      	ldr	r3, [r7, #4]
 802043a:	681b      	ldr	r3, [r3, #0]
 802043c:	f06f 0208 	mvn.w	r2, #8
 8020440:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8020442:	687b      	ldr	r3, [r7, #4]
 8020444:	2204      	movs	r2, #4
 8020446:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8020448:	687b      	ldr	r3, [r7, #4]
 802044a:	681b      	ldr	r3, [r3, #0]
 802044c:	69db      	ldr	r3, [r3, #28]
 802044e:	f003 0303 	and.w	r3, r3, #3
 8020452:	2b00      	cmp	r3, #0
 8020454:	d003      	beq.n	802045e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8020456:	6878      	ldr	r0, [r7, #4]
 8020458:	f000 fa2d 	bl	80208b6 <HAL_TIM_IC_CaptureCallback>
 802045c:	e005      	b.n	802046a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 802045e:	6878      	ldr	r0, [r7, #4]
 8020460:	f000 fa1f 	bl	80208a2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8020464:	6878      	ldr	r0, [r7, #4]
 8020466:	f7fc fd67 	bl	801cf38 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 802046a:	687b      	ldr	r3, [r7, #4]
 802046c:	2200      	movs	r2, #0
 802046e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8020470:	687b      	ldr	r3, [r7, #4]
 8020472:	681b      	ldr	r3, [r3, #0]
 8020474:	691b      	ldr	r3, [r3, #16]
 8020476:	f003 0310 	and.w	r3, r3, #16
 802047a:	2b10      	cmp	r3, #16
 802047c:	d122      	bne.n	80204c4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 802047e:	687b      	ldr	r3, [r7, #4]
 8020480:	681b      	ldr	r3, [r3, #0]
 8020482:	68db      	ldr	r3, [r3, #12]
 8020484:	f003 0310 	and.w	r3, r3, #16
 8020488:	2b10      	cmp	r3, #16
 802048a:	d11b      	bne.n	80204c4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 802048c:	687b      	ldr	r3, [r7, #4]
 802048e:	681b      	ldr	r3, [r3, #0]
 8020490:	f06f 0210 	mvn.w	r2, #16
 8020494:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8020496:	687b      	ldr	r3, [r7, #4]
 8020498:	2208      	movs	r2, #8
 802049a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 802049c:	687b      	ldr	r3, [r7, #4]
 802049e:	681b      	ldr	r3, [r3, #0]
 80204a0:	69db      	ldr	r3, [r3, #28]
 80204a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80204a6:	2b00      	cmp	r3, #0
 80204a8:	d003      	beq.n	80204b2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80204aa:	6878      	ldr	r0, [r7, #4]
 80204ac:	f000 fa03 	bl	80208b6 <HAL_TIM_IC_CaptureCallback>
 80204b0:	e005      	b.n	80204be <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80204b2:	6878      	ldr	r0, [r7, #4]
 80204b4:	f000 f9f5 	bl	80208a2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80204b8:	6878      	ldr	r0, [r7, #4]
 80204ba:	f7fc fd3d 	bl	801cf38 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80204be:	687b      	ldr	r3, [r7, #4]
 80204c0:	2200      	movs	r2, #0
 80204c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80204c4:	687b      	ldr	r3, [r7, #4]
 80204c6:	681b      	ldr	r3, [r3, #0]
 80204c8:	691b      	ldr	r3, [r3, #16]
 80204ca:	f003 0301 	and.w	r3, r3, #1
 80204ce:	2b01      	cmp	r3, #1
 80204d0:	d10e      	bne.n	80204f0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80204d2:	687b      	ldr	r3, [r7, #4]
 80204d4:	681b      	ldr	r3, [r3, #0]
 80204d6:	68db      	ldr	r3, [r3, #12]
 80204d8:	f003 0301 	and.w	r3, r3, #1
 80204dc:	2b01      	cmp	r3, #1
 80204de:	d107      	bne.n	80204f0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80204e0:	687b      	ldr	r3, [r7, #4]
 80204e2:	681b      	ldr	r3, [r3, #0]
 80204e4:	f06f 0201 	mvn.w	r2, #1
 80204e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80204ea:	6878      	ldr	r0, [r7, #4]
 80204ec:	f000 f9cf 	bl	802088e <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80204f0:	687b      	ldr	r3, [r7, #4]
 80204f2:	681b      	ldr	r3, [r3, #0]
 80204f4:	691b      	ldr	r3, [r3, #16]
 80204f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80204fa:	2b80      	cmp	r3, #128	; 0x80
 80204fc:	d10e      	bne.n	802051c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80204fe:	687b      	ldr	r3, [r7, #4]
 8020500:	681b      	ldr	r3, [r3, #0]
 8020502:	68db      	ldr	r3, [r3, #12]
 8020504:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8020508:	2b80      	cmp	r3, #128	; 0x80
 802050a:	d107      	bne.n	802051c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 802050c:	687b      	ldr	r3, [r7, #4]
 802050e:	681b      	ldr	r3, [r3, #0]
 8020510:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8020514:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8020516:	6878      	ldr	r0, [r7, #4]
 8020518:	f000 fe0a 	bl	8021130 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 802051c:	687b      	ldr	r3, [r7, #4]
 802051e:	681b      	ldr	r3, [r3, #0]
 8020520:	691b      	ldr	r3, [r3, #16]
 8020522:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8020526:	2b40      	cmp	r3, #64	; 0x40
 8020528:	d10e      	bne.n	8020548 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 802052a:	687b      	ldr	r3, [r7, #4]
 802052c:	681b      	ldr	r3, [r3, #0]
 802052e:	68db      	ldr	r3, [r3, #12]
 8020530:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8020534:	2b40      	cmp	r3, #64	; 0x40
 8020536:	d107      	bne.n	8020548 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8020538:	687b      	ldr	r3, [r7, #4]
 802053a:	681b      	ldr	r3, [r3, #0]
 802053c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8020540:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8020542:	6878      	ldr	r0, [r7, #4]
 8020544:	f000 f9cb 	bl	80208de <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8020548:	687b      	ldr	r3, [r7, #4]
 802054a:	681b      	ldr	r3, [r3, #0]
 802054c:	691b      	ldr	r3, [r3, #16]
 802054e:	f003 0320 	and.w	r3, r3, #32
 8020552:	2b20      	cmp	r3, #32
 8020554:	d10e      	bne.n	8020574 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8020556:	687b      	ldr	r3, [r7, #4]
 8020558:	681b      	ldr	r3, [r3, #0]
 802055a:	68db      	ldr	r3, [r3, #12]
 802055c:	f003 0320 	and.w	r3, r3, #32
 8020560:	2b20      	cmp	r3, #32
 8020562:	d107      	bne.n	8020574 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8020564:	687b      	ldr	r3, [r7, #4]
 8020566:	681b      	ldr	r3, [r3, #0]
 8020568:	f06f 0220 	mvn.w	r2, #32
 802056c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 802056e:	6878      	ldr	r0, [r7, #4]
 8020570:	f000 fdd4 	bl	802111c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8020574:	bf00      	nop
 8020576:	3708      	adds	r7, #8
 8020578:	46bd      	mov	sp, r7
 802057a:	bd80      	pop	{r7, pc}

0802057c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 802057c:	b580      	push	{r7, lr}
 802057e:	b086      	sub	sp, #24
 8020580:	af00      	add	r7, sp, #0
 8020582:	60f8      	str	r0, [r7, #12]
 8020584:	60b9      	str	r1, [r7, #8]
 8020586:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8020588:	2300      	movs	r3, #0
 802058a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 802058c:	68fb      	ldr	r3, [r7, #12]
 802058e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8020592:	2b01      	cmp	r3, #1
 8020594:	d101      	bne.n	802059a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8020596:	2302      	movs	r3, #2
 8020598:	e0ae      	b.n	80206f8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 802059a:	68fb      	ldr	r3, [r7, #12]
 802059c:	2201      	movs	r2, #1
 802059e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80205a2:	687b      	ldr	r3, [r7, #4]
 80205a4:	2b0c      	cmp	r3, #12
 80205a6:	f200 809f 	bhi.w	80206e8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80205aa:	a201      	add	r2, pc, #4	; (adr r2, 80205b0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80205ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80205b0:	080205e5 	.word	0x080205e5
 80205b4:	080206e9 	.word	0x080206e9
 80205b8:	080206e9 	.word	0x080206e9
 80205bc:	080206e9 	.word	0x080206e9
 80205c0:	08020625 	.word	0x08020625
 80205c4:	080206e9 	.word	0x080206e9
 80205c8:	080206e9 	.word	0x080206e9
 80205cc:	080206e9 	.word	0x080206e9
 80205d0:	08020667 	.word	0x08020667
 80205d4:	080206e9 	.word	0x080206e9
 80205d8:	080206e9 	.word	0x080206e9
 80205dc:	080206e9 	.word	0x080206e9
 80205e0:	080206a7 	.word	0x080206a7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80205e4:	68fb      	ldr	r3, [r7, #12]
 80205e6:	681b      	ldr	r3, [r3, #0]
 80205e8:	68b9      	ldr	r1, [r7, #8]
 80205ea:	4618      	mov	r0, r3
 80205ec:	f000 fadc 	bl	8020ba8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80205f0:	68fb      	ldr	r3, [r7, #12]
 80205f2:	681b      	ldr	r3, [r3, #0]
 80205f4:	699a      	ldr	r2, [r3, #24]
 80205f6:	68fb      	ldr	r3, [r7, #12]
 80205f8:	681b      	ldr	r3, [r3, #0]
 80205fa:	f042 0208 	orr.w	r2, r2, #8
 80205fe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8020600:	68fb      	ldr	r3, [r7, #12]
 8020602:	681b      	ldr	r3, [r3, #0]
 8020604:	699a      	ldr	r2, [r3, #24]
 8020606:	68fb      	ldr	r3, [r7, #12]
 8020608:	681b      	ldr	r3, [r3, #0]
 802060a:	f022 0204 	bic.w	r2, r2, #4
 802060e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8020610:	68fb      	ldr	r3, [r7, #12]
 8020612:	681b      	ldr	r3, [r3, #0]
 8020614:	6999      	ldr	r1, [r3, #24]
 8020616:	68bb      	ldr	r3, [r7, #8]
 8020618:	691a      	ldr	r2, [r3, #16]
 802061a:	68fb      	ldr	r3, [r7, #12]
 802061c:	681b      	ldr	r3, [r3, #0]
 802061e:	430a      	orrs	r2, r1
 8020620:	619a      	str	r2, [r3, #24]
      break;
 8020622:	e064      	b.n	80206ee <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8020624:	68fb      	ldr	r3, [r7, #12]
 8020626:	681b      	ldr	r3, [r3, #0]
 8020628:	68b9      	ldr	r1, [r7, #8]
 802062a:	4618      	mov	r0, r3
 802062c:	f000 fb22 	bl	8020c74 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8020630:	68fb      	ldr	r3, [r7, #12]
 8020632:	681b      	ldr	r3, [r3, #0]
 8020634:	699a      	ldr	r2, [r3, #24]
 8020636:	68fb      	ldr	r3, [r7, #12]
 8020638:	681b      	ldr	r3, [r3, #0]
 802063a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 802063e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8020640:	68fb      	ldr	r3, [r7, #12]
 8020642:	681b      	ldr	r3, [r3, #0]
 8020644:	699a      	ldr	r2, [r3, #24]
 8020646:	68fb      	ldr	r3, [r7, #12]
 8020648:	681b      	ldr	r3, [r3, #0]
 802064a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 802064e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8020650:	68fb      	ldr	r3, [r7, #12]
 8020652:	681b      	ldr	r3, [r3, #0]
 8020654:	6999      	ldr	r1, [r3, #24]
 8020656:	68bb      	ldr	r3, [r7, #8]
 8020658:	691b      	ldr	r3, [r3, #16]
 802065a:	021a      	lsls	r2, r3, #8
 802065c:	68fb      	ldr	r3, [r7, #12]
 802065e:	681b      	ldr	r3, [r3, #0]
 8020660:	430a      	orrs	r2, r1
 8020662:	619a      	str	r2, [r3, #24]
      break;
 8020664:	e043      	b.n	80206ee <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8020666:	68fb      	ldr	r3, [r7, #12]
 8020668:	681b      	ldr	r3, [r3, #0]
 802066a:	68b9      	ldr	r1, [r7, #8]
 802066c:	4618      	mov	r0, r3
 802066e:	f000 fb6d 	bl	8020d4c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8020672:	68fb      	ldr	r3, [r7, #12]
 8020674:	681b      	ldr	r3, [r3, #0]
 8020676:	69da      	ldr	r2, [r3, #28]
 8020678:	68fb      	ldr	r3, [r7, #12]
 802067a:	681b      	ldr	r3, [r3, #0]
 802067c:	f042 0208 	orr.w	r2, r2, #8
 8020680:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8020682:	68fb      	ldr	r3, [r7, #12]
 8020684:	681b      	ldr	r3, [r3, #0]
 8020686:	69da      	ldr	r2, [r3, #28]
 8020688:	68fb      	ldr	r3, [r7, #12]
 802068a:	681b      	ldr	r3, [r3, #0]
 802068c:	f022 0204 	bic.w	r2, r2, #4
 8020690:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8020692:	68fb      	ldr	r3, [r7, #12]
 8020694:	681b      	ldr	r3, [r3, #0]
 8020696:	69d9      	ldr	r1, [r3, #28]
 8020698:	68bb      	ldr	r3, [r7, #8]
 802069a:	691a      	ldr	r2, [r3, #16]
 802069c:	68fb      	ldr	r3, [r7, #12]
 802069e:	681b      	ldr	r3, [r3, #0]
 80206a0:	430a      	orrs	r2, r1
 80206a2:	61da      	str	r2, [r3, #28]
      break;
 80206a4:	e023      	b.n	80206ee <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80206a6:	68fb      	ldr	r3, [r7, #12]
 80206a8:	681b      	ldr	r3, [r3, #0]
 80206aa:	68b9      	ldr	r1, [r7, #8]
 80206ac:	4618      	mov	r0, r3
 80206ae:	f000 fbb7 	bl	8020e20 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80206b2:	68fb      	ldr	r3, [r7, #12]
 80206b4:	681b      	ldr	r3, [r3, #0]
 80206b6:	69da      	ldr	r2, [r3, #28]
 80206b8:	68fb      	ldr	r3, [r7, #12]
 80206ba:	681b      	ldr	r3, [r3, #0]
 80206bc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80206c0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80206c2:	68fb      	ldr	r3, [r7, #12]
 80206c4:	681b      	ldr	r3, [r3, #0]
 80206c6:	69da      	ldr	r2, [r3, #28]
 80206c8:	68fb      	ldr	r3, [r7, #12]
 80206ca:	681b      	ldr	r3, [r3, #0]
 80206cc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80206d0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80206d2:	68fb      	ldr	r3, [r7, #12]
 80206d4:	681b      	ldr	r3, [r3, #0]
 80206d6:	69d9      	ldr	r1, [r3, #28]
 80206d8:	68bb      	ldr	r3, [r7, #8]
 80206da:	691b      	ldr	r3, [r3, #16]
 80206dc:	021a      	lsls	r2, r3, #8
 80206de:	68fb      	ldr	r3, [r7, #12]
 80206e0:	681b      	ldr	r3, [r3, #0]
 80206e2:	430a      	orrs	r2, r1
 80206e4:	61da      	str	r2, [r3, #28]
      break;
 80206e6:	e002      	b.n	80206ee <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80206e8:	2301      	movs	r3, #1
 80206ea:	75fb      	strb	r3, [r7, #23]
      break;
 80206ec:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80206ee:	68fb      	ldr	r3, [r7, #12]
 80206f0:	2200      	movs	r2, #0
 80206f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80206f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80206f8:	4618      	mov	r0, r3
 80206fa:	3718      	adds	r7, #24
 80206fc:	46bd      	mov	sp, r7
 80206fe:	bd80      	pop	{r7, pc}

08020700 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8020700:	b580      	push	{r7, lr}
 8020702:	b084      	sub	sp, #16
 8020704:	af00      	add	r7, sp, #0
 8020706:	6078      	str	r0, [r7, #4]
 8020708:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 802070a:	2300      	movs	r3, #0
 802070c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 802070e:	687b      	ldr	r3, [r7, #4]
 8020710:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8020714:	2b01      	cmp	r3, #1
 8020716:	d101      	bne.n	802071c <HAL_TIM_ConfigClockSource+0x1c>
 8020718:	2302      	movs	r3, #2
 802071a:	e0b4      	b.n	8020886 <HAL_TIM_ConfigClockSource+0x186>
 802071c:	687b      	ldr	r3, [r7, #4]
 802071e:	2201      	movs	r2, #1
 8020720:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8020724:	687b      	ldr	r3, [r7, #4]
 8020726:	2202      	movs	r2, #2
 8020728:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 802072c:	687b      	ldr	r3, [r7, #4]
 802072e:	681b      	ldr	r3, [r3, #0]
 8020730:	689b      	ldr	r3, [r3, #8]
 8020732:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8020734:	68bb      	ldr	r3, [r7, #8]
 8020736:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 802073a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 802073c:	68bb      	ldr	r3, [r7, #8]
 802073e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8020742:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8020744:	687b      	ldr	r3, [r7, #4]
 8020746:	681b      	ldr	r3, [r3, #0]
 8020748:	68ba      	ldr	r2, [r7, #8]
 802074a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 802074c:	683b      	ldr	r3, [r7, #0]
 802074e:	681b      	ldr	r3, [r3, #0]
 8020750:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8020754:	d03e      	beq.n	80207d4 <HAL_TIM_ConfigClockSource+0xd4>
 8020756:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 802075a:	f200 8087 	bhi.w	802086c <HAL_TIM_ConfigClockSource+0x16c>
 802075e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8020762:	f000 8086 	beq.w	8020872 <HAL_TIM_ConfigClockSource+0x172>
 8020766:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 802076a:	d87f      	bhi.n	802086c <HAL_TIM_ConfigClockSource+0x16c>
 802076c:	2b70      	cmp	r3, #112	; 0x70
 802076e:	d01a      	beq.n	80207a6 <HAL_TIM_ConfigClockSource+0xa6>
 8020770:	2b70      	cmp	r3, #112	; 0x70
 8020772:	d87b      	bhi.n	802086c <HAL_TIM_ConfigClockSource+0x16c>
 8020774:	2b60      	cmp	r3, #96	; 0x60
 8020776:	d050      	beq.n	802081a <HAL_TIM_ConfigClockSource+0x11a>
 8020778:	2b60      	cmp	r3, #96	; 0x60
 802077a:	d877      	bhi.n	802086c <HAL_TIM_ConfigClockSource+0x16c>
 802077c:	2b50      	cmp	r3, #80	; 0x50
 802077e:	d03c      	beq.n	80207fa <HAL_TIM_ConfigClockSource+0xfa>
 8020780:	2b50      	cmp	r3, #80	; 0x50
 8020782:	d873      	bhi.n	802086c <HAL_TIM_ConfigClockSource+0x16c>
 8020784:	2b40      	cmp	r3, #64	; 0x40
 8020786:	d058      	beq.n	802083a <HAL_TIM_ConfigClockSource+0x13a>
 8020788:	2b40      	cmp	r3, #64	; 0x40
 802078a:	d86f      	bhi.n	802086c <HAL_TIM_ConfigClockSource+0x16c>
 802078c:	2b30      	cmp	r3, #48	; 0x30
 802078e:	d064      	beq.n	802085a <HAL_TIM_ConfigClockSource+0x15a>
 8020790:	2b30      	cmp	r3, #48	; 0x30
 8020792:	d86b      	bhi.n	802086c <HAL_TIM_ConfigClockSource+0x16c>
 8020794:	2b20      	cmp	r3, #32
 8020796:	d060      	beq.n	802085a <HAL_TIM_ConfigClockSource+0x15a>
 8020798:	2b20      	cmp	r3, #32
 802079a:	d867      	bhi.n	802086c <HAL_TIM_ConfigClockSource+0x16c>
 802079c:	2b00      	cmp	r3, #0
 802079e:	d05c      	beq.n	802085a <HAL_TIM_ConfigClockSource+0x15a>
 80207a0:	2b10      	cmp	r3, #16
 80207a2:	d05a      	beq.n	802085a <HAL_TIM_ConfigClockSource+0x15a>
 80207a4:	e062      	b.n	802086c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80207a6:	687b      	ldr	r3, [r7, #4]
 80207a8:	6818      	ldr	r0, [r3, #0]
 80207aa:	683b      	ldr	r3, [r7, #0]
 80207ac:	6899      	ldr	r1, [r3, #8]
 80207ae:	683b      	ldr	r3, [r7, #0]
 80207b0:	685a      	ldr	r2, [r3, #4]
 80207b2:	683b      	ldr	r3, [r7, #0]
 80207b4:	68db      	ldr	r3, [r3, #12]
 80207b6:	f000 fbfd 	bl	8020fb4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80207ba:	687b      	ldr	r3, [r7, #4]
 80207bc:	681b      	ldr	r3, [r3, #0]
 80207be:	689b      	ldr	r3, [r3, #8]
 80207c0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80207c2:	68bb      	ldr	r3, [r7, #8]
 80207c4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80207c8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80207ca:	687b      	ldr	r3, [r7, #4]
 80207cc:	681b      	ldr	r3, [r3, #0]
 80207ce:	68ba      	ldr	r2, [r7, #8]
 80207d0:	609a      	str	r2, [r3, #8]
      break;
 80207d2:	e04f      	b.n	8020874 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80207d4:	687b      	ldr	r3, [r7, #4]
 80207d6:	6818      	ldr	r0, [r3, #0]
 80207d8:	683b      	ldr	r3, [r7, #0]
 80207da:	6899      	ldr	r1, [r3, #8]
 80207dc:	683b      	ldr	r3, [r7, #0]
 80207de:	685a      	ldr	r2, [r3, #4]
 80207e0:	683b      	ldr	r3, [r7, #0]
 80207e2:	68db      	ldr	r3, [r3, #12]
 80207e4:	f000 fbe6 	bl	8020fb4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80207e8:	687b      	ldr	r3, [r7, #4]
 80207ea:	681b      	ldr	r3, [r3, #0]
 80207ec:	689a      	ldr	r2, [r3, #8]
 80207ee:	687b      	ldr	r3, [r7, #4]
 80207f0:	681b      	ldr	r3, [r3, #0]
 80207f2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80207f6:	609a      	str	r2, [r3, #8]
      break;
 80207f8:	e03c      	b.n	8020874 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80207fa:	687b      	ldr	r3, [r7, #4]
 80207fc:	6818      	ldr	r0, [r3, #0]
 80207fe:	683b      	ldr	r3, [r7, #0]
 8020800:	6859      	ldr	r1, [r3, #4]
 8020802:	683b      	ldr	r3, [r7, #0]
 8020804:	68db      	ldr	r3, [r3, #12]
 8020806:	461a      	mov	r2, r3
 8020808:	f000 fb5a 	bl	8020ec0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 802080c:	687b      	ldr	r3, [r7, #4]
 802080e:	681b      	ldr	r3, [r3, #0]
 8020810:	2150      	movs	r1, #80	; 0x50
 8020812:	4618      	mov	r0, r3
 8020814:	f000 fbb3 	bl	8020f7e <TIM_ITRx_SetConfig>
      break;
 8020818:	e02c      	b.n	8020874 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 802081a:	687b      	ldr	r3, [r7, #4]
 802081c:	6818      	ldr	r0, [r3, #0]
 802081e:	683b      	ldr	r3, [r7, #0]
 8020820:	6859      	ldr	r1, [r3, #4]
 8020822:	683b      	ldr	r3, [r7, #0]
 8020824:	68db      	ldr	r3, [r3, #12]
 8020826:	461a      	mov	r2, r3
 8020828:	f000 fb79 	bl	8020f1e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 802082c:	687b      	ldr	r3, [r7, #4]
 802082e:	681b      	ldr	r3, [r3, #0]
 8020830:	2160      	movs	r1, #96	; 0x60
 8020832:	4618      	mov	r0, r3
 8020834:	f000 fba3 	bl	8020f7e <TIM_ITRx_SetConfig>
      break;
 8020838:	e01c      	b.n	8020874 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 802083a:	687b      	ldr	r3, [r7, #4]
 802083c:	6818      	ldr	r0, [r3, #0]
 802083e:	683b      	ldr	r3, [r7, #0]
 8020840:	6859      	ldr	r1, [r3, #4]
 8020842:	683b      	ldr	r3, [r7, #0]
 8020844:	68db      	ldr	r3, [r3, #12]
 8020846:	461a      	mov	r2, r3
 8020848:	f000 fb3a 	bl	8020ec0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 802084c:	687b      	ldr	r3, [r7, #4]
 802084e:	681b      	ldr	r3, [r3, #0]
 8020850:	2140      	movs	r1, #64	; 0x40
 8020852:	4618      	mov	r0, r3
 8020854:	f000 fb93 	bl	8020f7e <TIM_ITRx_SetConfig>
      break;
 8020858:	e00c      	b.n	8020874 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 802085a:	687b      	ldr	r3, [r7, #4]
 802085c:	681a      	ldr	r2, [r3, #0]
 802085e:	683b      	ldr	r3, [r7, #0]
 8020860:	681b      	ldr	r3, [r3, #0]
 8020862:	4619      	mov	r1, r3
 8020864:	4610      	mov	r0, r2
 8020866:	f000 fb8a 	bl	8020f7e <TIM_ITRx_SetConfig>
      break;
 802086a:	e003      	b.n	8020874 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 802086c:	2301      	movs	r3, #1
 802086e:	73fb      	strb	r3, [r7, #15]
      break;
 8020870:	e000      	b.n	8020874 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8020872:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8020874:	687b      	ldr	r3, [r7, #4]
 8020876:	2201      	movs	r2, #1
 8020878:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 802087c:	687b      	ldr	r3, [r7, #4]
 802087e:	2200      	movs	r2, #0
 8020880:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8020884:	7bfb      	ldrb	r3, [r7, #15]
}
 8020886:	4618      	mov	r0, r3
 8020888:	3710      	adds	r7, #16
 802088a:	46bd      	mov	sp, r7
 802088c:	bd80      	pop	{r7, pc}

0802088e <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 802088e:	b480      	push	{r7}
 8020890:	b083      	sub	sp, #12
 8020892:	af00      	add	r7, sp, #0
 8020894:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8020896:	bf00      	nop
 8020898:	370c      	adds	r7, #12
 802089a:	46bd      	mov	sp, r7
 802089c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80208a0:	4770      	bx	lr

080208a2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80208a2:	b480      	push	{r7}
 80208a4:	b083      	sub	sp, #12
 80208a6:	af00      	add	r7, sp, #0
 80208a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80208aa:	bf00      	nop
 80208ac:	370c      	adds	r7, #12
 80208ae:	46bd      	mov	sp, r7
 80208b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80208b4:	4770      	bx	lr

080208b6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80208b6:	b480      	push	{r7}
 80208b8:	b083      	sub	sp, #12
 80208ba:	af00      	add	r7, sp, #0
 80208bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80208be:	bf00      	nop
 80208c0:	370c      	adds	r7, #12
 80208c2:	46bd      	mov	sp, r7
 80208c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80208c8:	4770      	bx	lr

080208ca <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80208ca:	b480      	push	{r7}
 80208cc:	b083      	sub	sp, #12
 80208ce:	af00      	add	r7, sp, #0
 80208d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 80208d2:	bf00      	nop
 80208d4:	370c      	adds	r7, #12
 80208d6:	46bd      	mov	sp, r7
 80208d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80208dc:	4770      	bx	lr

080208de <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80208de:	b480      	push	{r7}
 80208e0:	b083      	sub	sp, #12
 80208e2:	af00      	add	r7, sp, #0
 80208e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80208e6:	bf00      	nop
 80208e8:	370c      	adds	r7, #12
 80208ea:	46bd      	mov	sp, r7
 80208ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80208f0:	4770      	bx	lr

080208f2 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 80208f2:	b480      	push	{r7}
 80208f4:	b083      	sub	sp, #12
 80208f6:	af00      	add	r7, sp, #0
 80208f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 80208fa:	bf00      	nop
 80208fc:	370c      	adds	r7, #12
 80208fe:	46bd      	mov	sp, r7
 8020900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020904:	4770      	bx	lr

08020906 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8020906:	b580      	push	{r7, lr}
 8020908:	b084      	sub	sp, #16
 802090a:	af00      	add	r7, sp, #0
 802090c:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 802090e:	687b      	ldr	r3, [r7, #4]
 8020910:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8020912:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8020914:	68fb      	ldr	r3, [r7, #12]
 8020916:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8020918:	687a      	ldr	r2, [r7, #4]
 802091a:	429a      	cmp	r2, r3
 802091c:	d107      	bne.n	802092e <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 802091e:	68fb      	ldr	r3, [r7, #12]
 8020920:	2201      	movs	r2, #1
 8020922:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8020924:	68fb      	ldr	r3, [r7, #12]
 8020926:	2201      	movs	r2, #1
 8020928:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 802092c:	e02a      	b.n	8020984 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 802092e:	68fb      	ldr	r3, [r7, #12]
 8020930:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8020932:	687a      	ldr	r2, [r7, #4]
 8020934:	429a      	cmp	r2, r3
 8020936:	d107      	bne.n	8020948 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8020938:	68fb      	ldr	r3, [r7, #12]
 802093a:	2202      	movs	r2, #2
 802093c:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 802093e:	68fb      	ldr	r3, [r7, #12]
 8020940:	2201      	movs	r2, #1
 8020942:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8020946:	e01d      	b.n	8020984 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8020948:	68fb      	ldr	r3, [r7, #12]
 802094a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802094c:	687a      	ldr	r2, [r7, #4]
 802094e:	429a      	cmp	r2, r3
 8020950:	d107      	bne.n	8020962 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8020952:	68fb      	ldr	r3, [r7, #12]
 8020954:	2204      	movs	r2, #4
 8020956:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8020958:	68fb      	ldr	r3, [r7, #12]
 802095a:	2201      	movs	r2, #1
 802095c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8020960:	e010      	b.n	8020984 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8020962:	68fb      	ldr	r3, [r7, #12]
 8020964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020966:	687a      	ldr	r2, [r7, #4]
 8020968:	429a      	cmp	r2, r3
 802096a:	d107      	bne.n	802097c <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 802096c:	68fb      	ldr	r3, [r7, #12]
 802096e:	2208      	movs	r2, #8
 8020970:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8020972:	68fb      	ldr	r3, [r7, #12]
 8020974:	2201      	movs	r2, #1
 8020976:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 802097a:	e003      	b.n	8020984 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 802097c:	68fb      	ldr	r3, [r7, #12]
 802097e:	2201      	movs	r2, #1
 8020980:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8020984:	68f8      	ldr	r0, [r7, #12]
 8020986:	f7ff ffb4 	bl	80208f2 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 802098a:	68fb      	ldr	r3, [r7, #12]
 802098c:	2200      	movs	r2, #0
 802098e:	771a      	strb	r2, [r3, #28]
}
 8020990:	bf00      	nop
 8020992:	3710      	adds	r7, #16
 8020994:	46bd      	mov	sp, r7
 8020996:	bd80      	pop	{r7, pc}

08020998 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8020998:	b580      	push	{r7, lr}
 802099a:	b084      	sub	sp, #16
 802099c:	af00      	add	r7, sp, #0
 802099e:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80209a0:	687b      	ldr	r3, [r7, #4]
 80209a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80209a4:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80209a6:	68fb      	ldr	r3, [r7, #12]
 80209a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80209aa:	687a      	ldr	r2, [r7, #4]
 80209ac:	429a      	cmp	r2, r3
 80209ae:	d10b      	bne.n	80209c8 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80209b0:	68fb      	ldr	r3, [r7, #12]
 80209b2:	2201      	movs	r2, #1
 80209b4:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80209b6:	687b      	ldr	r3, [r7, #4]
 80209b8:	69db      	ldr	r3, [r3, #28]
 80209ba:	2b00      	cmp	r3, #0
 80209bc:	d136      	bne.n	8020a2c <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80209be:	68fb      	ldr	r3, [r7, #12]
 80209c0:	2201      	movs	r2, #1
 80209c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80209c6:	e031      	b.n	8020a2c <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80209c8:	68fb      	ldr	r3, [r7, #12]
 80209ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80209cc:	687a      	ldr	r2, [r7, #4]
 80209ce:	429a      	cmp	r2, r3
 80209d0:	d10b      	bne.n	80209ea <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80209d2:	68fb      	ldr	r3, [r7, #12]
 80209d4:	2202      	movs	r2, #2
 80209d6:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80209d8:	687b      	ldr	r3, [r7, #4]
 80209da:	69db      	ldr	r3, [r3, #28]
 80209dc:	2b00      	cmp	r3, #0
 80209de:	d125      	bne.n	8020a2c <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80209e0:	68fb      	ldr	r3, [r7, #12]
 80209e2:	2201      	movs	r2, #1
 80209e4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80209e8:	e020      	b.n	8020a2c <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80209ea:	68fb      	ldr	r3, [r7, #12]
 80209ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80209ee:	687a      	ldr	r2, [r7, #4]
 80209f0:	429a      	cmp	r2, r3
 80209f2:	d10b      	bne.n	8020a0c <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80209f4:	68fb      	ldr	r3, [r7, #12]
 80209f6:	2204      	movs	r2, #4
 80209f8:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80209fa:	687b      	ldr	r3, [r7, #4]
 80209fc:	69db      	ldr	r3, [r3, #28]
 80209fe:	2b00      	cmp	r3, #0
 8020a00:	d114      	bne.n	8020a2c <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8020a02:	68fb      	ldr	r3, [r7, #12]
 8020a04:	2201      	movs	r2, #1
 8020a06:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8020a0a:	e00f      	b.n	8020a2c <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8020a0c:	68fb      	ldr	r3, [r7, #12]
 8020a0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020a10:	687a      	ldr	r2, [r7, #4]
 8020a12:	429a      	cmp	r2, r3
 8020a14:	d10a      	bne.n	8020a2c <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8020a16:	68fb      	ldr	r3, [r7, #12]
 8020a18:	2208      	movs	r2, #8
 8020a1a:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8020a1c:	687b      	ldr	r3, [r7, #4]
 8020a1e:	69db      	ldr	r3, [r3, #28]
 8020a20:	2b00      	cmp	r3, #0
 8020a22:	d103      	bne.n	8020a2c <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8020a24:	68fb      	ldr	r3, [r7, #12]
 8020a26:	2201      	movs	r2, #1
 8020a28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8020a2c:	68f8      	ldr	r0, [r7, #12]
 8020a2e:	f7fc fa83 	bl	801cf38 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8020a32:	68fb      	ldr	r3, [r7, #12]
 8020a34:	2200      	movs	r2, #0
 8020a36:	771a      	strb	r2, [r3, #28]
}
 8020a38:	bf00      	nop
 8020a3a:	3710      	adds	r7, #16
 8020a3c:	46bd      	mov	sp, r7
 8020a3e:	bd80      	pop	{r7, pc}

08020a40 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8020a40:	b580      	push	{r7, lr}
 8020a42:	b084      	sub	sp, #16
 8020a44:	af00      	add	r7, sp, #0
 8020a46:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8020a48:	687b      	ldr	r3, [r7, #4]
 8020a4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8020a4c:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8020a4e:	68fb      	ldr	r3, [r7, #12]
 8020a50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8020a52:	687a      	ldr	r2, [r7, #4]
 8020a54:	429a      	cmp	r2, r3
 8020a56:	d103      	bne.n	8020a60 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8020a58:	68fb      	ldr	r3, [r7, #12]
 8020a5a:	2201      	movs	r2, #1
 8020a5c:	771a      	strb	r2, [r3, #28]
 8020a5e:	e019      	b.n	8020a94 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8020a60:	68fb      	ldr	r3, [r7, #12]
 8020a62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8020a64:	687a      	ldr	r2, [r7, #4]
 8020a66:	429a      	cmp	r2, r3
 8020a68:	d103      	bne.n	8020a72 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8020a6a:	68fb      	ldr	r3, [r7, #12]
 8020a6c:	2202      	movs	r2, #2
 8020a6e:	771a      	strb	r2, [r3, #28]
 8020a70:	e010      	b.n	8020a94 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8020a72:	68fb      	ldr	r3, [r7, #12]
 8020a74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8020a76:	687a      	ldr	r2, [r7, #4]
 8020a78:	429a      	cmp	r2, r3
 8020a7a:	d103      	bne.n	8020a84 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8020a7c:	68fb      	ldr	r3, [r7, #12]
 8020a7e:	2204      	movs	r2, #4
 8020a80:	771a      	strb	r2, [r3, #28]
 8020a82:	e007      	b.n	8020a94 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8020a84:	68fb      	ldr	r3, [r7, #12]
 8020a86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020a88:	687a      	ldr	r2, [r7, #4]
 8020a8a:	429a      	cmp	r2, r3
 8020a8c:	d102      	bne.n	8020a94 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8020a8e:	68fb      	ldr	r3, [r7, #12]
 8020a90:	2208      	movs	r2, #8
 8020a92:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8020a94:	68f8      	ldr	r0, [r7, #12]
 8020a96:	f7ff ff18 	bl	80208ca <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8020a9a:	68fb      	ldr	r3, [r7, #12]
 8020a9c:	2200      	movs	r2, #0
 8020a9e:	771a      	strb	r2, [r3, #28]
}
 8020aa0:	bf00      	nop
 8020aa2:	3710      	adds	r7, #16
 8020aa4:	46bd      	mov	sp, r7
 8020aa6:	bd80      	pop	{r7, pc}

08020aa8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8020aa8:	b480      	push	{r7}
 8020aaa:	b085      	sub	sp, #20
 8020aac:	af00      	add	r7, sp, #0
 8020aae:	6078      	str	r0, [r7, #4]
 8020ab0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8020ab2:	687b      	ldr	r3, [r7, #4]
 8020ab4:	681b      	ldr	r3, [r3, #0]
 8020ab6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8020ab8:	687b      	ldr	r3, [r7, #4]
 8020aba:	4a34      	ldr	r2, [pc, #208]	; (8020b8c <TIM_Base_SetConfig+0xe4>)
 8020abc:	4293      	cmp	r3, r2
 8020abe:	d00f      	beq.n	8020ae0 <TIM_Base_SetConfig+0x38>
 8020ac0:	687b      	ldr	r3, [r7, #4]
 8020ac2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8020ac6:	d00b      	beq.n	8020ae0 <TIM_Base_SetConfig+0x38>
 8020ac8:	687b      	ldr	r3, [r7, #4]
 8020aca:	4a31      	ldr	r2, [pc, #196]	; (8020b90 <TIM_Base_SetConfig+0xe8>)
 8020acc:	4293      	cmp	r3, r2
 8020ace:	d007      	beq.n	8020ae0 <TIM_Base_SetConfig+0x38>
 8020ad0:	687b      	ldr	r3, [r7, #4]
 8020ad2:	4a30      	ldr	r2, [pc, #192]	; (8020b94 <TIM_Base_SetConfig+0xec>)
 8020ad4:	4293      	cmp	r3, r2
 8020ad6:	d003      	beq.n	8020ae0 <TIM_Base_SetConfig+0x38>
 8020ad8:	687b      	ldr	r3, [r7, #4]
 8020ada:	4a2f      	ldr	r2, [pc, #188]	; (8020b98 <TIM_Base_SetConfig+0xf0>)
 8020adc:	4293      	cmp	r3, r2
 8020ade:	d108      	bne.n	8020af2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8020ae0:	68fb      	ldr	r3, [r7, #12]
 8020ae2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8020ae6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8020ae8:	683b      	ldr	r3, [r7, #0]
 8020aea:	685b      	ldr	r3, [r3, #4]
 8020aec:	68fa      	ldr	r2, [r7, #12]
 8020aee:	4313      	orrs	r3, r2
 8020af0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8020af2:	687b      	ldr	r3, [r7, #4]
 8020af4:	4a25      	ldr	r2, [pc, #148]	; (8020b8c <TIM_Base_SetConfig+0xe4>)
 8020af6:	4293      	cmp	r3, r2
 8020af8:	d01b      	beq.n	8020b32 <TIM_Base_SetConfig+0x8a>
 8020afa:	687b      	ldr	r3, [r7, #4]
 8020afc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8020b00:	d017      	beq.n	8020b32 <TIM_Base_SetConfig+0x8a>
 8020b02:	687b      	ldr	r3, [r7, #4]
 8020b04:	4a22      	ldr	r2, [pc, #136]	; (8020b90 <TIM_Base_SetConfig+0xe8>)
 8020b06:	4293      	cmp	r3, r2
 8020b08:	d013      	beq.n	8020b32 <TIM_Base_SetConfig+0x8a>
 8020b0a:	687b      	ldr	r3, [r7, #4]
 8020b0c:	4a21      	ldr	r2, [pc, #132]	; (8020b94 <TIM_Base_SetConfig+0xec>)
 8020b0e:	4293      	cmp	r3, r2
 8020b10:	d00f      	beq.n	8020b32 <TIM_Base_SetConfig+0x8a>
 8020b12:	687b      	ldr	r3, [r7, #4]
 8020b14:	4a20      	ldr	r2, [pc, #128]	; (8020b98 <TIM_Base_SetConfig+0xf0>)
 8020b16:	4293      	cmp	r3, r2
 8020b18:	d00b      	beq.n	8020b32 <TIM_Base_SetConfig+0x8a>
 8020b1a:	687b      	ldr	r3, [r7, #4]
 8020b1c:	4a1f      	ldr	r2, [pc, #124]	; (8020b9c <TIM_Base_SetConfig+0xf4>)
 8020b1e:	4293      	cmp	r3, r2
 8020b20:	d007      	beq.n	8020b32 <TIM_Base_SetConfig+0x8a>
 8020b22:	687b      	ldr	r3, [r7, #4]
 8020b24:	4a1e      	ldr	r2, [pc, #120]	; (8020ba0 <TIM_Base_SetConfig+0xf8>)
 8020b26:	4293      	cmp	r3, r2
 8020b28:	d003      	beq.n	8020b32 <TIM_Base_SetConfig+0x8a>
 8020b2a:	687b      	ldr	r3, [r7, #4]
 8020b2c:	4a1d      	ldr	r2, [pc, #116]	; (8020ba4 <TIM_Base_SetConfig+0xfc>)
 8020b2e:	4293      	cmp	r3, r2
 8020b30:	d108      	bne.n	8020b44 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8020b32:	68fb      	ldr	r3, [r7, #12]
 8020b34:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8020b38:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8020b3a:	683b      	ldr	r3, [r7, #0]
 8020b3c:	68db      	ldr	r3, [r3, #12]
 8020b3e:	68fa      	ldr	r2, [r7, #12]
 8020b40:	4313      	orrs	r3, r2
 8020b42:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8020b44:	68fb      	ldr	r3, [r7, #12]
 8020b46:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8020b4a:	683b      	ldr	r3, [r7, #0]
 8020b4c:	695b      	ldr	r3, [r3, #20]
 8020b4e:	4313      	orrs	r3, r2
 8020b50:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8020b52:	687b      	ldr	r3, [r7, #4]
 8020b54:	68fa      	ldr	r2, [r7, #12]
 8020b56:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8020b58:	683b      	ldr	r3, [r7, #0]
 8020b5a:	689a      	ldr	r2, [r3, #8]
 8020b5c:	687b      	ldr	r3, [r7, #4]
 8020b5e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8020b60:	683b      	ldr	r3, [r7, #0]
 8020b62:	681a      	ldr	r2, [r3, #0]
 8020b64:	687b      	ldr	r3, [r7, #4]
 8020b66:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8020b68:	687b      	ldr	r3, [r7, #4]
 8020b6a:	4a08      	ldr	r2, [pc, #32]	; (8020b8c <TIM_Base_SetConfig+0xe4>)
 8020b6c:	4293      	cmp	r3, r2
 8020b6e:	d103      	bne.n	8020b78 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8020b70:	683b      	ldr	r3, [r7, #0]
 8020b72:	691a      	ldr	r2, [r3, #16]
 8020b74:	687b      	ldr	r3, [r7, #4]
 8020b76:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8020b78:	687b      	ldr	r3, [r7, #4]
 8020b7a:	2201      	movs	r2, #1
 8020b7c:	615a      	str	r2, [r3, #20]
}
 8020b7e:	bf00      	nop
 8020b80:	3714      	adds	r7, #20
 8020b82:	46bd      	mov	sp, r7
 8020b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020b88:	4770      	bx	lr
 8020b8a:	bf00      	nop
 8020b8c:	40010000 	.word	0x40010000
 8020b90:	40000400 	.word	0x40000400
 8020b94:	40000800 	.word	0x40000800
 8020b98:	40000c00 	.word	0x40000c00
 8020b9c:	40014000 	.word	0x40014000
 8020ba0:	40014400 	.word	0x40014400
 8020ba4:	40014800 	.word	0x40014800

08020ba8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8020ba8:	b480      	push	{r7}
 8020baa:	b087      	sub	sp, #28
 8020bac:	af00      	add	r7, sp, #0
 8020bae:	6078      	str	r0, [r7, #4]
 8020bb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8020bb2:	687b      	ldr	r3, [r7, #4]
 8020bb4:	6a1b      	ldr	r3, [r3, #32]
 8020bb6:	f023 0201 	bic.w	r2, r3, #1
 8020bba:	687b      	ldr	r3, [r7, #4]
 8020bbc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8020bbe:	687b      	ldr	r3, [r7, #4]
 8020bc0:	6a1b      	ldr	r3, [r3, #32]
 8020bc2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8020bc4:	687b      	ldr	r3, [r7, #4]
 8020bc6:	685b      	ldr	r3, [r3, #4]
 8020bc8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8020bca:	687b      	ldr	r3, [r7, #4]
 8020bcc:	699b      	ldr	r3, [r3, #24]
 8020bce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8020bd0:	68fb      	ldr	r3, [r7, #12]
 8020bd2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8020bd6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8020bd8:	68fb      	ldr	r3, [r7, #12]
 8020bda:	f023 0303 	bic.w	r3, r3, #3
 8020bde:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8020be0:	683b      	ldr	r3, [r7, #0]
 8020be2:	681b      	ldr	r3, [r3, #0]
 8020be4:	68fa      	ldr	r2, [r7, #12]
 8020be6:	4313      	orrs	r3, r2
 8020be8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8020bea:	697b      	ldr	r3, [r7, #20]
 8020bec:	f023 0302 	bic.w	r3, r3, #2
 8020bf0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8020bf2:	683b      	ldr	r3, [r7, #0]
 8020bf4:	689b      	ldr	r3, [r3, #8]
 8020bf6:	697a      	ldr	r2, [r7, #20]
 8020bf8:	4313      	orrs	r3, r2
 8020bfa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8020bfc:	687b      	ldr	r3, [r7, #4]
 8020bfe:	4a1c      	ldr	r2, [pc, #112]	; (8020c70 <TIM_OC1_SetConfig+0xc8>)
 8020c00:	4293      	cmp	r3, r2
 8020c02:	d10c      	bne.n	8020c1e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8020c04:	697b      	ldr	r3, [r7, #20]
 8020c06:	f023 0308 	bic.w	r3, r3, #8
 8020c0a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8020c0c:	683b      	ldr	r3, [r7, #0]
 8020c0e:	68db      	ldr	r3, [r3, #12]
 8020c10:	697a      	ldr	r2, [r7, #20]
 8020c12:	4313      	orrs	r3, r2
 8020c14:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8020c16:	697b      	ldr	r3, [r7, #20]
 8020c18:	f023 0304 	bic.w	r3, r3, #4
 8020c1c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8020c1e:	687b      	ldr	r3, [r7, #4]
 8020c20:	4a13      	ldr	r2, [pc, #76]	; (8020c70 <TIM_OC1_SetConfig+0xc8>)
 8020c22:	4293      	cmp	r3, r2
 8020c24:	d111      	bne.n	8020c4a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8020c26:	693b      	ldr	r3, [r7, #16]
 8020c28:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8020c2c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8020c2e:	693b      	ldr	r3, [r7, #16]
 8020c30:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8020c34:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8020c36:	683b      	ldr	r3, [r7, #0]
 8020c38:	695b      	ldr	r3, [r3, #20]
 8020c3a:	693a      	ldr	r2, [r7, #16]
 8020c3c:	4313      	orrs	r3, r2
 8020c3e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8020c40:	683b      	ldr	r3, [r7, #0]
 8020c42:	699b      	ldr	r3, [r3, #24]
 8020c44:	693a      	ldr	r2, [r7, #16]
 8020c46:	4313      	orrs	r3, r2
 8020c48:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8020c4a:	687b      	ldr	r3, [r7, #4]
 8020c4c:	693a      	ldr	r2, [r7, #16]
 8020c4e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8020c50:	687b      	ldr	r3, [r7, #4]
 8020c52:	68fa      	ldr	r2, [r7, #12]
 8020c54:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8020c56:	683b      	ldr	r3, [r7, #0]
 8020c58:	685a      	ldr	r2, [r3, #4]
 8020c5a:	687b      	ldr	r3, [r7, #4]
 8020c5c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8020c5e:	687b      	ldr	r3, [r7, #4]
 8020c60:	697a      	ldr	r2, [r7, #20]
 8020c62:	621a      	str	r2, [r3, #32]
}
 8020c64:	bf00      	nop
 8020c66:	371c      	adds	r7, #28
 8020c68:	46bd      	mov	sp, r7
 8020c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020c6e:	4770      	bx	lr
 8020c70:	40010000 	.word	0x40010000

08020c74 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8020c74:	b480      	push	{r7}
 8020c76:	b087      	sub	sp, #28
 8020c78:	af00      	add	r7, sp, #0
 8020c7a:	6078      	str	r0, [r7, #4]
 8020c7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8020c7e:	687b      	ldr	r3, [r7, #4]
 8020c80:	6a1b      	ldr	r3, [r3, #32]
 8020c82:	f023 0210 	bic.w	r2, r3, #16
 8020c86:	687b      	ldr	r3, [r7, #4]
 8020c88:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8020c8a:	687b      	ldr	r3, [r7, #4]
 8020c8c:	6a1b      	ldr	r3, [r3, #32]
 8020c8e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8020c90:	687b      	ldr	r3, [r7, #4]
 8020c92:	685b      	ldr	r3, [r3, #4]
 8020c94:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8020c96:	687b      	ldr	r3, [r7, #4]
 8020c98:	699b      	ldr	r3, [r3, #24]
 8020c9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8020c9c:	68fb      	ldr	r3, [r7, #12]
 8020c9e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8020ca2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8020ca4:	68fb      	ldr	r3, [r7, #12]
 8020ca6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8020caa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8020cac:	683b      	ldr	r3, [r7, #0]
 8020cae:	681b      	ldr	r3, [r3, #0]
 8020cb0:	021b      	lsls	r3, r3, #8
 8020cb2:	68fa      	ldr	r2, [r7, #12]
 8020cb4:	4313      	orrs	r3, r2
 8020cb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8020cb8:	697b      	ldr	r3, [r7, #20]
 8020cba:	f023 0320 	bic.w	r3, r3, #32
 8020cbe:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8020cc0:	683b      	ldr	r3, [r7, #0]
 8020cc2:	689b      	ldr	r3, [r3, #8]
 8020cc4:	011b      	lsls	r3, r3, #4
 8020cc6:	697a      	ldr	r2, [r7, #20]
 8020cc8:	4313      	orrs	r3, r2
 8020cca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8020ccc:	687b      	ldr	r3, [r7, #4]
 8020cce:	4a1e      	ldr	r2, [pc, #120]	; (8020d48 <TIM_OC2_SetConfig+0xd4>)
 8020cd0:	4293      	cmp	r3, r2
 8020cd2:	d10d      	bne.n	8020cf0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8020cd4:	697b      	ldr	r3, [r7, #20]
 8020cd6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8020cda:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8020cdc:	683b      	ldr	r3, [r7, #0]
 8020cde:	68db      	ldr	r3, [r3, #12]
 8020ce0:	011b      	lsls	r3, r3, #4
 8020ce2:	697a      	ldr	r2, [r7, #20]
 8020ce4:	4313      	orrs	r3, r2
 8020ce6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8020ce8:	697b      	ldr	r3, [r7, #20]
 8020cea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8020cee:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8020cf0:	687b      	ldr	r3, [r7, #4]
 8020cf2:	4a15      	ldr	r2, [pc, #84]	; (8020d48 <TIM_OC2_SetConfig+0xd4>)
 8020cf4:	4293      	cmp	r3, r2
 8020cf6:	d113      	bne.n	8020d20 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8020cf8:	693b      	ldr	r3, [r7, #16]
 8020cfa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8020cfe:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8020d00:	693b      	ldr	r3, [r7, #16]
 8020d02:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8020d06:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8020d08:	683b      	ldr	r3, [r7, #0]
 8020d0a:	695b      	ldr	r3, [r3, #20]
 8020d0c:	009b      	lsls	r3, r3, #2
 8020d0e:	693a      	ldr	r2, [r7, #16]
 8020d10:	4313      	orrs	r3, r2
 8020d12:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8020d14:	683b      	ldr	r3, [r7, #0]
 8020d16:	699b      	ldr	r3, [r3, #24]
 8020d18:	009b      	lsls	r3, r3, #2
 8020d1a:	693a      	ldr	r2, [r7, #16]
 8020d1c:	4313      	orrs	r3, r2
 8020d1e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8020d20:	687b      	ldr	r3, [r7, #4]
 8020d22:	693a      	ldr	r2, [r7, #16]
 8020d24:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8020d26:	687b      	ldr	r3, [r7, #4]
 8020d28:	68fa      	ldr	r2, [r7, #12]
 8020d2a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8020d2c:	683b      	ldr	r3, [r7, #0]
 8020d2e:	685a      	ldr	r2, [r3, #4]
 8020d30:	687b      	ldr	r3, [r7, #4]
 8020d32:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8020d34:	687b      	ldr	r3, [r7, #4]
 8020d36:	697a      	ldr	r2, [r7, #20]
 8020d38:	621a      	str	r2, [r3, #32]
}
 8020d3a:	bf00      	nop
 8020d3c:	371c      	adds	r7, #28
 8020d3e:	46bd      	mov	sp, r7
 8020d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020d44:	4770      	bx	lr
 8020d46:	bf00      	nop
 8020d48:	40010000 	.word	0x40010000

08020d4c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8020d4c:	b480      	push	{r7}
 8020d4e:	b087      	sub	sp, #28
 8020d50:	af00      	add	r7, sp, #0
 8020d52:	6078      	str	r0, [r7, #4]
 8020d54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8020d56:	687b      	ldr	r3, [r7, #4]
 8020d58:	6a1b      	ldr	r3, [r3, #32]
 8020d5a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8020d5e:	687b      	ldr	r3, [r7, #4]
 8020d60:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8020d62:	687b      	ldr	r3, [r7, #4]
 8020d64:	6a1b      	ldr	r3, [r3, #32]
 8020d66:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8020d68:	687b      	ldr	r3, [r7, #4]
 8020d6a:	685b      	ldr	r3, [r3, #4]
 8020d6c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8020d6e:	687b      	ldr	r3, [r7, #4]
 8020d70:	69db      	ldr	r3, [r3, #28]
 8020d72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8020d74:	68fb      	ldr	r3, [r7, #12]
 8020d76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8020d7a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8020d7c:	68fb      	ldr	r3, [r7, #12]
 8020d7e:	f023 0303 	bic.w	r3, r3, #3
 8020d82:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8020d84:	683b      	ldr	r3, [r7, #0]
 8020d86:	681b      	ldr	r3, [r3, #0]
 8020d88:	68fa      	ldr	r2, [r7, #12]
 8020d8a:	4313      	orrs	r3, r2
 8020d8c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8020d8e:	697b      	ldr	r3, [r7, #20]
 8020d90:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8020d94:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8020d96:	683b      	ldr	r3, [r7, #0]
 8020d98:	689b      	ldr	r3, [r3, #8]
 8020d9a:	021b      	lsls	r3, r3, #8
 8020d9c:	697a      	ldr	r2, [r7, #20]
 8020d9e:	4313      	orrs	r3, r2
 8020da0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8020da2:	687b      	ldr	r3, [r7, #4]
 8020da4:	4a1d      	ldr	r2, [pc, #116]	; (8020e1c <TIM_OC3_SetConfig+0xd0>)
 8020da6:	4293      	cmp	r3, r2
 8020da8:	d10d      	bne.n	8020dc6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8020daa:	697b      	ldr	r3, [r7, #20]
 8020dac:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8020db0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8020db2:	683b      	ldr	r3, [r7, #0]
 8020db4:	68db      	ldr	r3, [r3, #12]
 8020db6:	021b      	lsls	r3, r3, #8
 8020db8:	697a      	ldr	r2, [r7, #20]
 8020dba:	4313      	orrs	r3, r2
 8020dbc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8020dbe:	697b      	ldr	r3, [r7, #20]
 8020dc0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8020dc4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8020dc6:	687b      	ldr	r3, [r7, #4]
 8020dc8:	4a14      	ldr	r2, [pc, #80]	; (8020e1c <TIM_OC3_SetConfig+0xd0>)
 8020dca:	4293      	cmp	r3, r2
 8020dcc:	d113      	bne.n	8020df6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8020dce:	693b      	ldr	r3, [r7, #16]
 8020dd0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8020dd4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8020dd6:	693b      	ldr	r3, [r7, #16]
 8020dd8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8020ddc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8020dde:	683b      	ldr	r3, [r7, #0]
 8020de0:	695b      	ldr	r3, [r3, #20]
 8020de2:	011b      	lsls	r3, r3, #4
 8020de4:	693a      	ldr	r2, [r7, #16]
 8020de6:	4313      	orrs	r3, r2
 8020de8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8020dea:	683b      	ldr	r3, [r7, #0]
 8020dec:	699b      	ldr	r3, [r3, #24]
 8020dee:	011b      	lsls	r3, r3, #4
 8020df0:	693a      	ldr	r2, [r7, #16]
 8020df2:	4313      	orrs	r3, r2
 8020df4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8020df6:	687b      	ldr	r3, [r7, #4]
 8020df8:	693a      	ldr	r2, [r7, #16]
 8020dfa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8020dfc:	687b      	ldr	r3, [r7, #4]
 8020dfe:	68fa      	ldr	r2, [r7, #12]
 8020e00:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8020e02:	683b      	ldr	r3, [r7, #0]
 8020e04:	685a      	ldr	r2, [r3, #4]
 8020e06:	687b      	ldr	r3, [r7, #4]
 8020e08:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8020e0a:	687b      	ldr	r3, [r7, #4]
 8020e0c:	697a      	ldr	r2, [r7, #20]
 8020e0e:	621a      	str	r2, [r3, #32]
}
 8020e10:	bf00      	nop
 8020e12:	371c      	adds	r7, #28
 8020e14:	46bd      	mov	sp, r7
 8020e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020e1a:	4770      	bx	lr
 8020e1c:	40010000 	.word	0x40010000

08020e20 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8020e20:	b480      	push	{r7}
 8020e22:	b087      	sub	sp, #28
 8020e24:	af00      	add	r7, sp, #0
 8020e26:	6078      	str	r0, [r7, #4]
 8020e28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8020e2a:	687b      	ldr	r3, [r7, #4]
 8020e2c:	6a1b      	ldr	r3, [r3, #32]
 8020e2e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8020e32:	687b      	ldr	r3, [r7, #4]
 8020e34:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8020e36:	687b      	ldr	r3, [r7, #4]
 8020e38:	6a1b      	ldr	r3, [r3, #32]
 8020e3a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8020e3c:	687b      	ldr	r3, [r7, #4]
 8020e3e:	685b      	ldr	r3, [r3, #4]
 8020e40:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8020e42:	687b      	ldr	r3, [r7, #4]
 8020e44:	69db      	ldr	r3, [r3, #28]
 8020e46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8020e48:	68fb      	ldr	r3, [r7, #12]
 8020e4a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8020e4e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8020e50:	68fb      	ldr	r3, [r7, #12]
 8020e52:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8020e56:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8020e58:	683b      	ldr	r3, [r7, #0]
 8020e5a:	681b      	ldr	r3, [r3, #0]
 8020e5c:	021b      	lsls	r3, r3, #8
 8020e5e:	68fa      	ldr	r2, [r7, #12]
 8020e60:	4313      	orrs	r3, r2
 8020e62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8020e64:	693b      	ldr	r3, [r7, #16]
 8020e66:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8020e6a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8020e6c:	683b      	ldr	r3, [r7, #0]
 8020e6e:	689b      	ldr	r3, [r3, #8]
 8020e70:	031b      	lsls	r3, r3, #12
 8020e72:	693a      	ldr	r2, [r7, #16]
 8020e74:	4313      	orrs	r3, r2
 8020e76:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8020e78:	687b      	ldr	r3, [r7, #4]
 8020e7a:	4a10      	ldr	r2, [pc, #64]	; (8020ebc <TIM_OC4_SetConfig+0x9c>)
 8020e7c:	4293      	cmp	r3, r2
 8020e7e:	d109      	bne.n	8020e94 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8020e80:	697b      	ldr	r3, [r7, #20]
 8020e82:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8020e86:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8020e88:	683b      	ldr	r3, [r7, #0]
 8020e8a:	695b      	ldr	r3, [r3, #20]
 8020e8c:	019b      	lsls	r3, r3, #6
 8020e8e:	697a      	ldr	r2, [r7, #20]
 8020e90:	4313      	orrs	r3, r2
 8020e92:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8020e94:	687b      	ldr	r3, [r7, #4]
 8020e96:	697a      	ldr	r2, [r7, #20]
 8020e98:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8020e9a:	687b      	ldr	r3, [r7, #4]
 8020e9c:	68fa      	ldr	r2, [r7, #12]
 8020e9e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8020ea0:	683b      	ldr	r3, [r7, #0]
 8020ea2:	685a      	ldr	r2, [r3, #4]
 8020ea4:	687b      	ldr	r3, [r7, #4]
 8020ea6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8020ea8:	687b      	ldr	r3, [r7, #4]
 8020eaa:	693a      	ldr	r2, [r7, #16]
 8020eac:	621a      	str	r2, [r3, #32]
}
 8020eae:	bf00      	nop
 8020eb0:	371c      	adds	r7, #28
 8020eb2:	46bd      	mov	sp, r7
 8020eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020eb8:	4770      	bx	lr
 8020eba:	bf00      	nop
 8020ebc:	40010000 	.word	0x40010000

08020ec0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8020ec0:	b480      	push	{r7}
 8020ec2:	b087      	sub	sp, #28
 8020ec4:	af00      	add	r7, sp, #0
 8020ec6:	60f8      	str	r0, [r7, #12]
 8020ec8:	60b9      	str	r1, [r7, #8]
 8020eca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8020ecc:	68fb      	ldr	r3, [r7, #12]
 8020ece:	6a1b      	ldr	r3, [r3, #32]
 8020ed0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8020ed2:	68fb      	ldr	r3, [r7, #12]
 8020ed4:	6a1b      	ldr	r3, [r3, #32]
 8020ed6:	f023 0201 	bic.w	r2, r3, #1
 8020eda:	68fb      	ldr	r3, [r7, #12]
 8020edc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8020ede:	68fb      	ldr	r3, [r7, #12]
 8020ee0:	699b      	ldr	r3, [r3, #24]
 8020ee2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8020ee4:	693b      	ldr	r3, [r7, #16]
 8020ee6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8020eea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8020eec:	687b      	ldr	r3, [r7, #4]
 8020eee:	011b      	lsls	r3, r3, #4
 8020ef0:	693a      	ldr	r2, [r7, #16]
 8020ef2:	4313      	orrs	r3, r2
 8020ef4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8020ef6:	697b      	ldr	r3, [r7, #20]
 8020ef8:	f023 030a 	bic.w	r3, r3, #10
 8020efc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8020efe:	697a      	ldr	r2, [r7, #20]
 8020f00:	68bb      	ldr	r3, [r7, #8]
 8020f02:	4313      	orrs	r3, r2
 8020f04:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8020f06:	68fb      	ldr	r3, [r7, #12]
 8020f08:	693a      	ldr	r2, [r7, #16]
 8020f0a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8020f0c:	68fb      	ldr	r3, [r7, #12]
 8020f0e:	697a      	ldr	r2, [r7, #20]
 8020f10:	621a      	str	r2, [r3, #32]
}
 8020f12:	bf00      	nop
 8020f14:	371c      	adds	r7, #28
 8020f16:	46bd      	mov	sp, r7
 8020f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020f1c:	4770      	bx	lr

08020f1e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8020f1e:	b480      	push	{r7}
 8020f20:	b087      	sub	sp, #28
 8020f22:	af00      	add	r7, sp, #0
 8020f24:	60f8      	str	r0, [r7, #12]
 8020f26:	60b9      	str	r1, [r7, #8]
 8020f28:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8020f2a:	68fb      	ldr	r3, [r7, #12]
 8020f2c:	6a1b      	ldr	r3, [r3, #32]
 8020f2e:	f023 0210 	bic.w	r2, r3, #16
 8020f32:	68fb      	ldr	r3, [r7, #12]
 8020f34:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8020f36:	68fb      	ldr	r3, [r7, #12]
 8020f38:	699b      	ldr	r3, [r3, #24]
 8020f3a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8020f3c:	68fb      	ldr	r3, [r7, #12]
 8020f3e:	6a1b      	ldr	r3, [r3, #32]
 8020f40:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8020f42:	697b      	ldr	r3, [r7, #20]
 8020f44:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8020f48:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8020f4a:	687b      	ldr	r3, [r7, #4]
 8020f4c:	031b      	lsls	r3, r3, #12
 8020f4e:	697a      	ldr	r2, [r7, #20]
 8020f50:	4313      	orrs	r3, r2
 8020f52:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8020f54:	693b      	ldr	r3, [r7, #16]
 8020f56:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8020f5a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8020f5c:	68bb      	ldr	r3, [r7, #8]
 8020f5e:	011b      	lsls	r3, r3, #4
 8020f60:	693a      	ldr	r2, [r7, #16]
 8020f62:	4313      	orrs	r3, r2
 8020f64:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8020f66:	68fb      	ldr	r3, [r7, #12]
 8020f68:	697a      	ldr	r2, [r7, #20]
 8020f6a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8020f6c:	68fb      	ldr	r3, [r7, #12]
 8020f6e:	693a      	ldr	r2, [r7, #16]
 8020f70:	621a      	str	r2, [r3, #32]
}
 8020f72:	bf00      	nop
 8020f74:	371c      	adds	r7, #28
 8020f76:	46bd      	mov	sp, r7
 8020f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020f7c:	4770      	bx	lr

08020f7e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8020f7e:	b480      	push	{r7}
 8020f80:	b085      	sub	sp, #20
 8020f82:	af00      	add	r7, sp, #0
 8020f84:	6078      	str	r0, [r7, #4]
 8020f86:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8020f88:	687b      	ldr	r3, [r7, #4]
 8020f8a:	689b      	ldr	r3, [r3, #8]
 8020f8c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8020f8e:	68fb      	ldr	r3, [r7, #12]
 8020f90:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8020f94:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8020f96:	683a      	ldr	r2, [r7, #0]
 8020f98:	68fb      	ldr	r3, [r7, #12]
 8020f9a:	4313      	orrs	r3, r2
 8020f9c:	f043 0307 	orr.w	r3, r3, #7
 8020fa0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8020fa2:	687b      	ldr	r3, [r7, #4]
 8020fa4:	68fa      	ldr	r2, [r7, #12]
 8020fa6:	609a      	str	r2, [r3, #8]
}
 8020fa8:	bf00      	nop
 8020faa:	3714      	adds	r7, #20
 8020fac:	46bd      	mov	sp, r7
 8020fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020fb2:	4770      	bx	lr

08020fb4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8020fb4:	b480      	push	{r7}
 8020fb6:	b087      	sub	sp, #28
 8020fb8:	af00      	add	r7, sp, #0
 8020fba:	60f8      	str	r0, [r7, #12]
 8020fbc:	60b9      	str	r1, [r7, #8]
 8020fbe:	607a      	str	r2, [r7, #4]
 8020fc0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8020fc2:	68fb      	ldr	r3, [r7, #12]
 8020fc4:	689b      	ldr	r3, [r3, #8]
 8020fc6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8020fc8:	697b      	ldr	r3, [r7, #20]
 8020fca:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8020fce:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8020fd0:	683b      	ldr	r3, [r7, #0]
 8020fd2:	021a      	lsls	r2, r3, #8
 8020fd4:	687b      	ldr	r3, [r7, #4]
 8020fd6:	431a      	orrs	r2, r3
 8020fd8:	68bb      	ldr	r3, [r7, #8]
 8020fda:	4313      	orrs	r3, r2
 8020fdc:	697a      	ldr	r2, [r7, #20]
 8020fde:	4313      	orrs	r3, r2
 8020fe0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8020fe2:	68fb      	ldr	r3, [r7, #12]
 8020fe4:	697a      	ldr	r2, [r7, #20]
 8020fe6:	609a      	str	r2, [r3, #8]
}
 8020fe8:	bf00      	nop
 8020fea:	371c      	adds	r7, #28
 8020fec:	46bd      	mov	sp, r7
 8020fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020ff2:	4770      	bx	lr

08020ff4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8020ff4:	b480      	push	{r7}
 8020ff6:	b087      	sub	sp, #28
 8020ff8:	af00      	add	r7, sp, #0
 8020ffa:	60f8      	str	r0, [r7, #12]
 8020ffc:	60b9      	str	r1, [r7, #8]
 8020ffe:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8021000:	68bb      	ldr	r3, [r7, #8]
 8021002:	f003 031f 	and.w	r3, r3, #31
 8021006:	2201      	movs	r2, #1
 8021008:	fa02 f303 	lsl.w	r3, r2, r3
 802100c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 802100e:	68fb      	ldr	r3, [r7, #12]
 8021010:	6a1a      	ldr	r2, [r3, #32]
 8021012:	697b      	ldr	r3, [r7, #20]
 8021014:	43db      	mvns	r3, r3
 8021016:	401a      	ands	r2, r3
 8021018:	68fb      	ldr	r3, [r7, #12]
 802101a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 802101c:	68fb      	ldr	r3, [r7, #12]
 802101e:	6a1a      	ldr	r2, [r3, #32]
 8021020:	68bb      	ldr	r3, [r7, #8]
 8021022:	f003 031f 	and.w	r3, r3, #31
 8021026:	6879      	ldr	r1, [r7, #4]
 8021028:	fa01 f303 	lsl.w	r3, r1, r3
 802102c:	431a      	orrs	r2, r3
 802102e:	68fb      	ldr	r3, [r7, #12]
 8021030:	621a      	str	r2, [r3, #32]
}
 8021032:	bf00      	nop
 8021034:	371c      	adds	r7, #28
 8021036:	46bd      	mov	sp, r7
 8021038:	f85d 7b04 	ldr.w	r7, [sp], #4
 802103c:	4770      	bx	lr
	...

08021040 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8021040:	b480      	push	{r7}
 8021042:	b085      	sub	sp, #20
 8021044:	af00      	add	r7, sp, #0
 8021046:	6078      	str	r0, [r7, #4]
 8021048:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 802104a:	687b      	ldr	r3, [r7, #4]
 802104c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8021050:	2b01      	cmp	r3, #1
 8021052:	d101      	bne.n	8021058 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8021054:	2302      	movs	r3, #2
 8021056:	e050      	b.n	80210fa <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8021058:	687b      	ldr	r3, [r7, #4]
 802105a:	2201      	movs	r2, #1
 802105c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8021060:	687b      	ldr	r3, [r7, #4]
 8021062:	2202      	movs	r2, #2
 8021064:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8021068:	687b      	ldr	r3, [r7, #4]
 802106a:	681b      	ldr	r3, [r3, #0]
 802106c:	685b      	ldr	r3, [r3, #4]
 802106e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8021070:	687b      	ldr	r3, [r7, #4]
 8021072:	681b      	ldr	r3, [r3, #0]
 8021074:	689b      	ldr	r3, [r3, #8]
 8021076:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8021078:	68fb      	ldr	r3, [r7, #12]
 802107a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 802107e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8021080:	683b      	ldr	r3, [r7, #0]
 8021082:	681b      	ldr	r3, [r3, #0]
 8021084:	68fa      	ldr	r2, [r7, #12]
 8021086:	4313      	orrs	r3, r2
 8021088:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 802108a:	687b      	ldr	r3, [r7, #4]
 802108c:	681b      	ldr	r3, [r3, #0]
 802108e:	68fa      	ldr	r2, [r7, #12]
 8021090:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8021092:	687b      	ldr	r3, [r7, #4]
 8021094:	681b      	ldr	r3, [r3, #0]
 8021096:	4a1c      	ldr	r2, [pc, #112]	; (8021108 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8021098:	4293      	cmp	r3, r2
 802109a:	d018      	beq.n	80210ce <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 802109c:	687b      	ldr	r3, [r7, #4]
 802109e:	681b      	ldr	r3, [r3, #0]
 80210a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80210a4:	d013      	beq.n	80210ce <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80210a6:	687b      	ldr	r3, [r7, #4]
 80210a8:	681b      	ldr	r3, [r3, #0]
 80210aa:	4a18      	ldr	r2, [pc, #96]	; (802110c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80210ac:	4293      	cmp	r3, r2
 80210ae:	d00e      	beq.n	80210ce <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80210b0:	687b      	ldr	r3, [r7, #4]
 80210b2:	681b      	ldr	r3, [r3, #0]
 80210b4:	4a16      	ldr	r2, [pc, #88]	; (8021110 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80210b6:	4293      	cmp	r3, r2
 80210b8:	d009      	beq.n	80210ce <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80210ba:	687b      	ldr	r3, [r7, #4]
 80210bc:	681b      	ldr	r3, [r3, #0]
 80210be:	4a15      	ldr	r2, [pc, #84]	; (8021114 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80210c0:	4293      	cmp	r3, r2
 80210c2:	d004      	beq.n	80210ce <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80210c4:	687b      	ldr	r3, [r7, #4]
 80210c6:	681b      	ldr	r3, [r3, #0]
 80210c8:	4a13      	ldr	r2, [pc, #76]	; (8021118 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80210ca:	4293      	cmp	r3, r2
 80210cc:	d10c      	bne.n	80210e8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80210ce:	68bb      	ldr	r3, [r7, #8]
 80210d0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80210d4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80210d6:	683b      	ldr	r3, [r7, #0]
 80210d8:	685b      	ldr	r3, [r3, #4]
 80210da:	68ba      	ldr	r2, [r7, #8]
 80210dc:	4313      	orrs	r3, r2
 80210de:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80210e0:	687b      	ldr	r3, [r7, #4]
 80210e2:	681b      	ldr	r3, [r3, #0]
 80210e4:	68ba      	ldr	r2, [r7, #8]
 80210e6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80210e8:	687b      	ldr	r3, [r7, #4]
 80210ea:	2201      	movs	r2, #1
 80210ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80210f0:	687b      	ldr	r3, [r7, #4]
 80210f2:	2200      	movs	r2, #0
 80210f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80210f8:	2300      	movs	r3, #0
}
 80210fa:	4618      	mov	r0, r3
 80210fc:	3714      	adds	r7, #20
 80210fe:	46bd      	mov	sp, r7
 8021100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021104:	4770      	bx	lr
 8021106:	bf00      	nop
 8021108:	40010000 	.word	0x40010000
 802110c:	40000400 	.word	0x40000400
 8021110:	40000800 	.word	0x40000800
 8021114:	40000c00 	.word	0x40000c00
 8021118:	40014000 	.word	0x40014000

0802111c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 802111c:	b480      	push	{r7}
 802111e:	b083      	sub	sp, #12
 8021120:	af00      	add	r7, sp, #0
 8021122:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8021124:	bf00      	nop
 8021126:	370c      	adds	r7, #12
 8021128:	46bd      	mov	sp, r7
 802112a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802112e:	4770      	bx	lr

08021130 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8021130:	b480      	push	{r7}
 8021132:	b083      	sub	sp, #12
 8021134:	af00      	add	r7, sp, #0
 8021136:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8021138:	bf00      	nop
 802113a:	370c      	adds	r7, #12
 802113c:	46bd      	mov	sp, r7
 802113e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021142:	4770      	bx	lr

08021144 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8021144:	b580      	push	{r7, lr}
 8021146:	b082      	sub	sp, #8
 8021148:	af00      	add	r7, sp, #0
 802114a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 802114c:	687b      	ldr	r3, [r7, #4]
 802114e:	2b00      	cmp	r3, #0
 8021150:	d101      	bne.n	8021156 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8021152:	2301      	movs	r3, #1
 8021154:	e03f      	b.n	80211d6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8021156:	687b      	ldr	r3, [r7, #4]
 8021158:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 802115c:	b2db      	uxtb	r3, r3
 802115e:	2b00      	cmp	r3, #0
 8021160:	d106      	bne.n	8021170 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8021162:	687b      	ldr	r3, [r7, #4]
 8021164:	2200      	movs	r2, #0
 8021166:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 802116a:	6878      	ldr	r0, [r7, #4]
 802116c:	f7fc fbac 	bl	801d8c8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8021170:	687b      	ldr	r3, [r7, #4]
 8021172:	2224      	movs	r2, #36	; 0x24
 8021174:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8021178:	687b      	ldr	r3, [r7, #4]
 802117a:	681b      	ldr	r3, [r3, #0]
 802117c:	68da      	ldr	r2, [r3, #12]
 802117e:	687b      	ldr	r3, [r7, #4]
 8021180:	681b      	ldr	r3, [r3, #0]
 8021182:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8021186:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8021188:	6878      	ldr	r0, [r7, #4]
 802118a:	f000 fddb 	bl	8021d44 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 802118e:	687b      	ldr	r3, [r7, #4]
 8021190:	681b      	ldr	r3, [r3, #0]
 8021192:	691a      	ldr	r2, [r3, #16]
 8021194:	687b      	ldr	r3, [r7, #4]
 8021196:	681b      	ldr	r3, [r3, #0]
 8021198:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 802119c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 802119e:	687b      	ldr	r3, [r7, #4]
 80211a0:	681b      	ldr	r3, [r3, #0]
 80211a2:	695a      	ldr	r2, [r3, #20]
 80211a4:	687b      	ldr	r3, [r7, #4]
 80211a6:	681b      	ldr	r3, [r3, #0]
 80211a8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80211ac:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80211ae:	687b      	ldr	r3, [r7, #4]
 80211b0:	681b      	ldr	r3, [r3, #0]
 80211b2:	68da      	ldr	r2, [r3, #12]
 80211b4:	687b      	ldr	r3, [r7, #4]
 80211b6:	681b      	ldr	r3, [r3, #0]
 80211b8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80211bc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80211be:	687b      	ldr	r3, [r7, #4]
 80211c0:	2200      	movs	r2, #0
 80211c2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80211c4:	687b      	ldr	r3, [r7, #4]
 80211c6:	2220      	movs	r2, #32
 80211c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80211cc:	687b      	ldr	r3, [r7, #4]
 80211ce:	2220      	movs	r2, #32
 80211d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80211d4:	2300      	movs	r3, #0
}
 80211d6:	4618      	mov	r0, r3
 80211d8:	3708      	adds	r7, #8
 80211da:	46bd      	mov	sp, r7
 80211dc:	bd80      	pop	{r7, pc}

080211de <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80211de:	b580      	push	{r7, lr}
 80211e0:	b08a      	sub	sp, #40	; 0x28
 80211e2:	af02      	add	r7, sp, #8
 80211e4:	60f8      	str	r0, [r7, #12]
 80211e6:	60b9      	str	r1, [r7, #8]
 80211e8:	603b      	str	r3, [r7, #0]
 80211ea:	4613      	mov	r3, r2
 80211ec:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80211ee:	2300      	movs	r3, #0
 80211f0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80211f2:	68fb      	ldr	r3, [r7, #12]
 80211f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80211f8:	b2db      	uxtb	r3, r3
 80211fa:	2b20      	cmp	r3, #32
 80211fc:	d17c      	bne.n	80212f8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80211fe:	68bb      	ldr	r3, [r7, #8]
 8021200:	2b00      	cmp	r3, #0
 8021202:	d002      	beq.n	802120a <HAL_UART_Transmit+0x2c>
 8021204:	88fb      	ldrh	r3, [r7, #6]
 8021206:	2b00      	cmp	r3, #0
 8021208:	d101      	bne.n	802120e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 802120a:	2301      	movs	r3, #1
 802120c:	e075      	b.n	80212fa <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 802120e:	68fb      	ldr	r3, [r7, #12]
 8021210:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8021214:	2b01      	cmp	r3, #1
 8021216:	d101      	bne.n	802121c <HAL_UART_Transmit+0x3e>
 8021218:	2302      	movs	r3, #2
 802121a:	e06e      	b.n	80212fa <HAL_UART_Transmit+0x11c>
 802121c:	68fb      	ldr	r3, [r7, #12]
 802121e:	2201      	movs	r2, #1
 8021220:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8021224:	68fb      	ldr	r3, [r7, #12]
 8021226:	2200      	movs	r2, #0
 8021228:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 802122a:	68fb      	ldr	r3, [r7, #12]
 802122c:	2221      	movs	r2, #33	; 0x21
 802122e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8021232:	f7fc fc7d 	bl	801db30 <HAL_GetTick>
 8021236:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8021238:	68fb      	ldr	r3, [r7, #12]
 802123a:	88fa      	ldrh	r2, [r7, #6]
 802123c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 802123e:	68fb      	ldr	r3, [r7, #12]
 8021240:	88fa      	ldrh	r2, [r7, #6]
 8021242:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8021244:	68fb      	ldr	r3, [r7, #12]
 8021246:	689b      	ldr	r3, [r3, #8]
 8021248:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 802124c:	d108      	bne.n	8021260 <HAL_UART_Transmit+0x82>
 802124e:	68fb      	ldr	r3, [r7, #12]
 8021250:	691b      	ldr	r3, [r3, #16]
 8021252:	2b00      	cmp	r3, #0
 8021254:	d104      	bne.n	8021260 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8021256:	2300      	movs	r3, #0
 8021258:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 802125a:	68bb      	ldr	r3, [r7, #8]
 802125c:	61bb      	str	r3, [r7, #24]
 802125e:	e003      	b.n	8021268 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8021260:	68bb      	ldr	r3, [r7, #8]
 8021262:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8021264:	2300      	movs	r3, #0
 8021266:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8021268:	68fb      	ldr	r3, [r7, #12]
 802126a:	2200      	movs	r2, #0
 802126c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8021270:	e02a      	b.n	80212c8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8021272:	683b      	ldr	r3, [r7, #0]
 8021274:	9300      	str	r3, [sp, #0]
 8021276:	697b      	ldr	r3, [r7, #20]
 8021278:	2200      	movs	r2, #0
 802127a:	2180      	movs	r1, #128	; 0x80
 802127c:	68f8      	ldr	r0, [r7, #12]
 802127e:	f000 fb1f 	bl	80218c0 <UART_WaitOnFlagUntilTimeout>
 8021282:	4603      	mov	r3, r0
 8021284:	2b00      	cmp	r3, #0
 8021286:	d001      	beq.n	802128c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8021288:	2303      	movs	r3, #3
 802128a:	e036      	b.n	80212fa <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 802128c:	69fb      	ldr	r3, [r7, #28]
 802128e:	2b00      	cmp	r3, #0
 8021290:	d10b      	bne.n	80212aa <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8021292:	69bb      	ldr	r3, [r7, #24]
 8021294:	881b      	ldrh	r3, [r3, #0]
 8021296:	461a      	mov	r2, r3
 8021298:	68fb      	ldr	r3, [r7, #12]
 802129a:	681b      	ldr	r3, [r3, #0]
 802129c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80212a0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80212a2:	69bb      	ldr	r3, [r7, #24]
 80212a4:	3302      	adds	r3, #2
 80212a6:	61bb      	str	r3, [r7, #24]
 80212a8:	e007      	b.n	80212ba <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80212aa:	69fb      	ldr	r3, [r7, #28]
 80212ac:	781a      	ldrb	r2, [r3, #0]
 80212ae:	68fb      	ldr	r3, [r7, #12]
 80212b0:	681b      	ldr	r3, [r3, #0]
 80212b2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80212b4:	69fb      	ldr	r3, [r7, #28]
 80212b6:	3301      	adds	r3, #1
 80212b8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80212ba:	68fb      	ldr	r3, [r7, #12]
 80212bc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80212be:	b29b      	uxth	r3, r3
 80212c0:	3b01      	subs	r3, #1
 80212c2:	b29a      	uxth	r2, r3
 80212c4:	68fb      	ldr	r3, [r7, #12]
 80212c6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80212c8:	68fb      	ldr	r3, [r7, #12]
 80212ca:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80212cc:	b29b      	uxth	r3, r3
 80212ce:	2b00      	cmp	r3, #0
 80212d0:	d1cf      	bne.n	8021272 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80212d2:	683b      	ldr	r3, [r7, #0]
 80212d4:	9300      	str	r3, [sp, #0]
 80212d6:	697b      	ldr	r3, [r7, #20]
 80212d8:	2200      	movs	r2, #0
 80212da:	2140      	movs	r1, #64	; 0x40
 80212dc:	68f8      	ldr	r0, [r7, #12]
 80212de:	f000 faef 	bl	80218c0 <UART_WaitOnFlagUntilTimeout>
 80212e2:	4603      	mov	r3, r0
 80212e4:	2b00      	cmp	r3, #0
 80212e6:	d001      	beq.n	80212ec <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80212e8:	2303      	movs	r3, #3
 80212ea:	e006      	b.n	80212fa <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80212ec:	68fb      	ldr	r3, [r7, #12]
 80212ee:	2220      	movs	r2, #32
 80212f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80212f4:	2300      	movs	r3, #0
 80212f6:	e000      	b.n	80212fa <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80212f8:	2302      	movs	r3, #2
  }
}
 80212fa:	4618      	mov	r0, r3
 80212fc:	3720      	adds	r7, #32
 80212fe:	46bd      	mov	sp, r7
 8021300:	bd80      	pop	{r7, pc}

08021302 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8021302:	b580      	push	{r7, lr}
 8021304:	b084      	sub	sp, #16
 8021306:	af00      	add	r7, sp, #0
 8021308:	60f8      	str	r0, [r7, #12]
 802130a:	60b9      	str	r1, [r7, #8]
 802130c:	4613      	mov	r3, r2
 802130e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8021310:	68fb      	ldr	r3, [r7, #12]
 8021312:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8021316:	b2db      	uxtb	r3, r3
 8021318:	2b20      	cmp	r3, #32
 802131a:	d11d      	bne.n	8021358 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 802131c:	68bb      	ldr	r3, [r7, #8]
 802131e:	2b00      	cmp	r3, #0
 8021320:	d002      	beq.n	8021328 <HAL_UART_Receive_IT+0x26>
 8021322:	88fb      	ldrh	r3, [r7, #6]
 8021324:	2b00      	cmp	r3, #0
 8021326:	d101      	bne.n	802132c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8021328:	2301      	movs	r3, #1
 802132a:	e016      	b.n	802135a <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 802132c:	68fb      	ldr	r3, [r7, #12]
 802132e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8021332:	2b01      	cmp	r3, #1
 8021334:	d101      	bne.n	802133a <HAL_UART_Receive_IT+0x38>
 8021336:	2302      	movs	r3, #2
 8021338:	e00f      	b.n	802135a <HAL_UART_Receive_IT+0x58>
 802133a:	68fb      	ldr	r3, [r7, #12]
 802133c:	2201      	movs	r2, #1
 802133e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8021342:	68fb      	ldr	r3, [r7, #12]
 8021344:	2200      	movs	r2, #0
 8021346:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8021348:	88fb      	ldrh	r3, [r7, #6]
 802134a:	461a      	mov	r2, r3
 802134c:	68b9      	ldr	r1, [r7, #8]
 802134e:	68f8      	ldr	r0, [r7, #12]
 8021350:	f000 fb24 	bl	802199c <UART_Start_Receive_IT>
 8021354:	4603      	mov	r3, r0
 8021356:	e000      	b.n	802135a <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8021358:	2302      	movs	r3, #2
  }
}
 802135a:	4618      	mov	r0, r3
 802135c:	3710      	adds	r7, #16
 802135e:	46bd      	mov	sp, r7
 8021360:	bd80      	pop	{r7, pc}
	...

08021364 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8021364:	b580      	push	{r7, lr}
 8021366:	b0ba      	sub	sp, #232	; 0xe8
 8021368:	af00      	add	r7, sp, #0
 802136a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 802136c:	687b      	ldr	r3, [r7, #4]
 802136e:	681b      	ldr	r3, [r3, #0]
 8021370:	681b      	ldr	r3, [r3, #0]
 8021372:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8021376:	687b      	ldr	r3, [r7, #4]
 8021378:	681b      	ldr	r3, [r3, #0]
 802137a:	68db      	ldr	r3, [r3, #12]
 802137c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8021380:	687b      	ldr	r3, [r7, #4]
 8021382:	681b      	ldr	r3, [r3, #0]
 8021384:	695b      	ldr	r3, [r3, #20]
 8021386:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 802138a:	2300      	movs	r3, #0
 802138c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8021390:	2300      	movs	r3, #0
 8021392:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8021396:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 802139a:	f003 030f 	and.w	r3, r3, #15
 802139e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80213a2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80213a6:	2b00      	cmp	r3, #0
 80213a8:	d10f      	bne.n	80213ca <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80213aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80213ae:	f003 0320 	and.w	r3, r3, #32
 80213b2:	2b00      	cmp	r3, #0
 80213b4:	d009      	beq.n	80213ca <HAL_UART_IRQHandler+0x66>
 80213b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80213ba:	f003 0320 	and.w	r3, r3, #32
 80213be:	2b00      	cmp	r3, #0
 80213c0:	d003      	beq.n	80213ca <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80213c2:	6878      	ldr	r0, [r7, #4]
 80213c4:	f000 fc03 	bl	8021bce <UART_Receive_IT>
      return;
 80213c8:	e256      	b.n	8021878 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80213ca:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80213ce:	2b00      	cmp	r3, #0
 80213d0:	f000 80de 	beq.w	8021590 <HAL_UART_IRQHandler+0x22c>
 80213d4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80213d8:	f003 0301 	and.w	r3, r3, #1
 80213dc:	2b00      	cmp	r3, #0
 80213de:	d106      	bne.n	80213ee <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80213e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80213e4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80213e8:	2b00      	cmp	r3, #0
 80213ea:	f000 80d1 	beq.w	8021590 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80213ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80213f2:	f003 0301 	and.w	r3, r3, #1
 80213f6:	2b00      	cmp	r3, #0
 80213f8:	d00b      	beq.n	8021412 <HAL_UART_IRQHandler+0xae>
 80213fa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80213fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8021402:	2b00      	cmp	r3, #0
 8021404:	d005      	beq.n	8021412 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8021406:	687b      	ldr	r3, [r7, #4]
 8021408:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802140a:	f043 0201 	orr.w	r2, r3, #1
 802140e:	687b      	ldr	r3, [r7, #4]
 8021410:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8021412:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8021416:	f003 0304 	and.w	r3, r3, #4
 802141a:	2b00      	cmp	r3, #0
 802141c:	d00b      	beq.n	8021436 <HAL_UART_IRQHandler+0xd2>
 802141e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8021422:	f003 0301 	and.w	r3, r3, #1
 8021426:	2b00      	cmp	r3, #0
 8021428:	d005      	beq.n	8021436 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 802142a:	687b      	ldr	r3, [r7, #4]
 802142c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802142e:	f043 0202 	orr.w	r2, r3, #2
 8021432:	687b      	ldr	r3, [r7, #4]
 8021434:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8021436:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 802143a:	f003 0302 	and.w	r3, r3, #2
 802143e:	2b00      	cmp	r3, #0
 8021440:	d00b      	beq.n	802145a <HAL_UART_IRQHandler+0xf6>
 8021442:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8021446:	f003 0301 	and.w	r3, r3, #1
 802144a:	2b00      	cmp	r3, #0
 802144c:	d005      	beq.n	802145a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 802144e:	687b      	ldr	r3, [r7, #4]
 8021450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8021452:	f043 0204 	orr.w	r2, r3, #4
 8021456:	687b      	ldr	r3, [r7, #4]
 8021458:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 802145a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 802145e:	f003 0308 	and.w	r3, r3, #8
 8021462:	2b00      	cmp	r3, #0
 8021464:	d011      	beq.n	802148a <HAL_UART_IRQHandler+0x126>
 8021466:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 802146a:	f003 0320 	and.w	r3, r3, #32
 802146e:	2b00      	cmp	r3, #0
 8021470:	d105      	bne.n	802147e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8021472:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8021476:	f003 0301 	and.w	r3, r3, #1
 802147a:	2b00      	cmp	r3, #0
 802147c:	d005      	beq.n	802148a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 802147e:	687b      	ldr	r3, [r7, #4]
 8021480:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8021482:	f043 0208 	orr.w	r2, r3, #8
 8021486:	687b      	ldr	r3, [r7, #4]
 8021488:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 802148a:	687b      	ldr	r3, [r7, #4]
 802148c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802148e:	2b00      	cmp	r3, #0
 8021490:	f000 81ed 	beq.w	802186e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8021494:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8021498:	f003 0320 	and.w	r3, r3, #32
 802149c:	2b00      	cmp	r3, #0
 802149e:	d008      	beq.n	80214b2 <HAL_UART_IRQHandler+0x14e>
 80214a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80214a4:	f003 0320 	and.w	r3, r3, #32
 80214a8:	2b00      	cmp	r3, #0
 80214aa:	d002      	beq.n	80214b2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80214ac:	6878      	ldr	r0, [r7, #4]
 80214ae:	f000 fb8e 	bl	8021bce <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80214b2:	687b      	ldr	r3, [r7, #4]
 80214b4:	681b      	ldr	r3, [r3, #0]
 80214b6:	695b      	ldr	r3, [r3, #20]
 80214b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80214bc:	2b40      	cmp	r3, #64	; 0x40
 80214be:	bf0c      	ite	eq
 80214c0:	2301      	moveq	r3, #1
 80214c2:	2300      	movne	r3, #0
 80214c4:	b2db      	uxtb	r3, r3
 80214c6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80214ca:	687b      	ldr	r3, [r7, #4]
 80214cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80214ce:	f003 0308 	and.w	r3, r3, #8
 80214d2:	2b00      	cmp	r3, #0
 80214d4:	d103      	bne.n	80214de <HAL_UART_IRQHandler+0x17a>
 80214d6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80214da:	2b00      	cmp	r3, #0
 80214dc:	d04f      	beq.n	802157e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80214de:	6878      	ldr	r0, [r7, #4]
 80214e0:	f000 fa96 	bl	8021a10 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80214e4:	687b      	ldr	r3, [r7, #4]
 80214e6:	681b      	ldr	r3, [r3, #0]
 80214e8:	695b      	ldr	r3, [r3, #20]
 80214ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80214ee:	2b40      	cmp	r3, #64	; 0x40
 80214f0:	d141      	bne.n	8021576 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80214f2:	687b      	ldr	r3, [r7, #4]
 80214f4:	681b      	ldr	r3, [r3, #0]
 80214f6:	3314      	adds	r3, #20
 80214f8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80214fc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8021500:	e853 3f00 	ldrex	r3, [r3]
 8021504:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8021508:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 802150c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8021510:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8021514:	687b      	ldr	r3, [r7, #4]
 8021516:	681b      	ldr	r3, [r3, #0]
 8021518:	3314      	adds	r3, #20
 802151a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 802151e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8021522:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8021526:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 802152a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 802152e:	e841 2300 	strex	r3, r2, [r1]
 8021532:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8021536:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 802153a:	2b00      	cmp	r3, #0
 802153c:	d1d9      	bne.n	80214f2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 802153e:	687b      	ldr	r3, [r7, #4]
 8021540:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8021542:	2b00      	cmp	r3, #0
 8021544:	d013      	beq.n	802156e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8021546:	687b      	ldr	r3, [r7, #4]
 8021548:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802154a:	4a7d      	ldr	r2, [pc, #500]	; (8021740 <HAL_UART_IRQHandler+0x3dc>)
 802154c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 802154e:	687b      	ldr	r3, [r7, #4]
 8021550:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8021552:	4618      	mov	r0, r3
 8021554:	f7fc fda4 	bl	801e0a0 <HAL_DMA_Abort_IT>
 8021558:	4603      	mov	r3, r0
 802155a:	2b00      	cmp	r3, #0
 802155c:	d016      	beq.n	802158c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 802155e:	687b      	ldr	r3, [r7, #4]
 8021560:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8021562:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8021564:	687a      	ldr	r2, [r7, #4]
 8021566:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8021568:	4610      	mov	r0, r2
 802156a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 802156c:	e00e      	b.n	802158c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 802156e:	6878      	ldr	r0, [r7, #4]
 8021570:	f000 f990 	bl	8021894 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8021574:	e00a      	b.n	802158c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8021576:	6878      	ldr	r0, [r7, #4]
 8021578:	f000 f98c 	bl	8021894 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 802157c:	e006      	b.n	802158c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 802157e:	6878      	ldr	r0, [r7, #4]
 8021580:	f000 f988 	bl	8021894 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8021584:	687b      	ldr	r3, [r7, #4]
 8021586:	2200      	movs	r2, #0
 8021588:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 802158a:	e170      	b.n	802186e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 802158c:	bf00      	nop
    return;
 802158e:	e16e      	b.n	802186e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8021590:	687b      	ldr	r3, [r7, #4]
 8021592:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8021594:	2b01      	cmp	r3, #1
 8021596:	f040 814a 	bne.w	802182e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 802159a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 802159e:	f003 0310 	and.w	r3, r3, #16
 80215a2:	2b00      	cmp	r3, #0
 80215a4:	f000 8143 	beq.w	802182e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80215a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80215ac:	f003 0310 	and.w	r3, r3, #16
 80215b0:	2b00      	cmp	r3, #0
 80215b2:	f000 813c 	beq.w	802182e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80215b6:	2300      	movs	r3, #0
 80215b8:	60bb      	str	r3, [r7, #8]
 80215ba:	687b      	ldr	r3, [r7, #4]
 80215bc:	681b      	ldr	r3, [r3, #0]
 80215be:	681b      	ldr	r3, [r3, #0]
 80215c0:	60bb      	str	r3, [r7, #8]
 80215c2:	687b      	ldr	r3, [r7, #4]
 80215c4:	681b      	ldr	r3, [r3, #0]
 80215c6:	685b      	ldr	r3, [r3, #4]
 80215c8:	60bb      	str	r3, [r7, #8]
 80215ca:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80215cc:	687b      	ldr	r3, [r7, #4]
 80215ce:	681b      	ldr	r3, [r3, #0]
 80215d0:	695b      	ldr	r3, [r3, #20]
 80215d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80215d6:	2b40      	cmp	r3, #64	; 0x40
 80215d8:	f040 80b4 	bne.w	8021744 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80215dc:	687b      	ldr	r3, [r7, #4]
 80215de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80215e0:	681b      	ldr	r3, [r3, #0]
 80215e2:	685b      	ldr	r3, [r3, #4]
 80215e4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80215e8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80215ec:	2b00      	cmp	r3, #0
 80215ee:	f000 8140 	beq.w	8021872 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80215f2:	687b      	ldr	r3, [r7, #4]
 80215f4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80215f6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80215fa:	429a      	cmp	r2, r3
 80215fc:	f080 8139 	bcs.w	8021872 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8021600:	687b      	ldr	r3, [r7, #4]
 8021602:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8021606:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8021608:	687b      	ldr	r3, [r7, #4]
 802160a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802160c:	69db      	ldr	r3, [r3, #28]
 802160e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8021612:	f000 8088 	beq.w	8021726 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8021616:	687b      	ldr	r3, [r7, #4]
 8021618:	681b      	ldr	r3, [r3, #0]
 802161a:	330c      	adds	r3, #12
 802161c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8021620:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8021624:	e853 3f00 	ldrex	r3, [r3]
 8021628:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 802162c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8021630:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8021634:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8021638:	687b      	ldr	r3, [r7, #4]
 802163a:	681b      	ldr	r3, [r3, #0]
 802163c:	330c      	adds	r3, #12
 802163e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8021642:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8021646:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 802164a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 802164e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8021652:	e841 2300 	strex	r3, r2, [r1]
 8021656:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 802165a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 802165e:	2b00      	cmp	r3, #0
 8021660:	d1d9      	bne.n	8021616 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8021662:	687b      	ldr	r3, [r7, #4]
 8021664:	681b      	ldr	r3, [r3, #0]
 8021666:	3314      	adds	r3, #20
 8021668:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 802166a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 802166c:	e853 3f00 	ldrex	r3, [r3]
 8021670:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8021672:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8021674:	f023 0301 	bic.w	r3, r3, #1
 8021678:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 802167c:	687b      	ldr	r3, [r7, #4]
 802167e:	681b      	ldr	r3, [r3, #0]
 8021680:	3314      	adds	r3, #20
 8021682:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8021686:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 802168a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 802168c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 802168e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8021692:	e841 2300 	strex	r3, r2, [r1]
 8021696:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8021698:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 802169a:	2b00      	cmp	r3, #0
 802169c:	d1e1      	bne.n	8021662 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 802169e:	687b      	ldr	r3, [r7, #4]
 80216a0:	681b      	ldr	r3, [r3, #0]
 80216a2:	3314      	adds	r3, #20
 80216a4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80216a6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80216a8:	e853 3f00 	ldrex	r3, [r3]
 80216ac:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80216ae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80216b0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80216b4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80216b8:	687b      	ldr	r3, [r7, #4]
 80216ba:	681b      	ldr	r3, [r3, #0]
 80216bc:	3314      	adds	r3, #20
 80216be:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80216c2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80216c4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80216c6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80216c8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80216ca:	e841 2300 	strex	r3, r2, [r1]
 80216ce:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80216d0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80216d2:	2b00      	cmp	r3, #0
 80216d4:	d1e3      	bne.n	802169e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80216d6:	687b      	ldr	r3, [r7, #4]
 80216d8:	2220      	movs	r2, #32
 80216da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80216de:	687b      	ldr	r3, [r7, #4]
 80216e0:	2200      	movs	r2, #0
 80216e2:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80216e4:	687b      	ldr	r3, [r7, #4]
 80216e6:	681b      	ldr	r3, [r3, #0]
 80216e8:	330c      	adds	r3, #12
 80216ea:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80216ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80216ee:	e853 3f00 	ldrex	r3, [r3]
 80216f2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80216f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80216f6:	f023 0310 	bic.w	r3, r3, #16
 80216fa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80216fe:	687b      	ldr	r3, [r7, #4]
 8021700:	681b      	ldr	r3, [r3, #0]
 8021702:	330c      	adds	r3, #12
 8021704:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8021708:	65ba      	str	r2, [r7, #88]	; 0x58
 802170a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 802170c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 802170e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8021710:	e841 2300 	strex	r3, r2, [r1]
 8021714:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8021716:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8021718:	2b00      	cmp	r3, #0
 802171a:	d1e3      	bne.n	80216e4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 802171c:	687b      	ldr	r3, [r7, #4]
 802171e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8021720:	4618      	mov	r0, r3
 8021722:	f7fc fc4d 	bl	801dfc0 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8021726:	687b      	ldr	r3, [r7, #4]
 8021728:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 802172a:	687b      	ldr	r3, [r7, #4]
 802172c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 802172e:	b29b      	uxth	r3, r3
 8021730:	1ad3      	subs	r3, r2, r3
 8021732:	b29b      	uxth	r3, r3
 8021734:	4619      	mov	r1, r3
 8021736:	6878      	ldr	r0, [r7, #4]
 8021738:	f000 f8b6 	bl	80218a8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 802173c:	e099      	b.n	8021872 <HAL_UART_IRQHandler+0x50e>
 802173e:	bf00      	nop
 8021740:	08021ad7 	.word	0x08021ad7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8021744:	687b      	ldr	r3, [r7, #4]
 8021746:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8021748:	687b      	ldr	r3, [r7, #4]
 802174a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 802174c:	b29b      	uxth	r3, r3
 802174e:	1ad3      	subs	r3, r2, r3
 8021750:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8021754:	687b      	ldr	r3, [r7, #4]
 8021756:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8021758:	b29b      	uxth	r3, r3
 802175a:	2b00      	cmp	r3, #0
 802175c:	f000 808b 	beq.w	8021876 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8021760:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8021764:	2b00      	cmp	r3, #0
 8021766:	f000 8086 	beq.w	8021876 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 802176a:	687b      	ldr	r3, [r7, #4]
 802176c:	681b      	ldr	r3, [r3, #0]
 802176e:	330c      	adds	r3, #12
 8021770:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8021772:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8021774:	e853 3f00 	ldrex	r3, [r3]
 8021778:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 802177a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 802177c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8021780:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8021784:	687b      	ldr	r3, [r7, #4]
 8021786:	681b      	ldr	r3, [r3, #0]
 8021788:	330c      	adds	r3, #12
 802178a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 802178e:	647a      	str	r2, [r7, #68]	; 0x44
 8021790:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8021792:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8021794:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8021796:	e841 2300 	strex	r3, r2, [r1]
 802179a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 802179c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 802179e:	2b00      	cmp	r3, #0
 80217a0:	d1e3      	bne.n	802176a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80217a2:	687b      	ldr	r3, [r7, #4]
 80217a4:	681b      	ldr	r3, [r3, #0]
 80217a6:	3314      	adds	r3, #20
 80217a8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80217aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80217ac:	e853 3f00 	ldrex	r3, [r3]
 80217b0:	623b      	str	r3, [r7, #32]
   return(result);
 80217b2:	6a3b      	ldr	r3, [r7, #32]
 80217b4:	f023 0301 	bic.w	r3, r3, #1
 80217b8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80217bc:	687b      	ldr	r3, [r7, #4]
 80217be:	681b      	ldr	r3, [r3, #0]
 80217c0:	3314      	adds	r3, #20
 80217c2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80217c6:	633a      	str	r2, [r7, #48]	; 0x30
 80217c8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80217ca:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80217cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80217ce:	e841 2300 	strex	r3, r2, [r1]
 80217d2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80217d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80217d6:	2b00      	cmp	r3, #0
 80217d8:	d1e3      	bne.n	80217a2 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80217da:	687b      	ldr	r3, [r7, #4]
 80217dc:	2220      	movs	r2, #32
 80217de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80217e2:	687b      	ldr	r3, [r7, #4]
 80217e4:	2200      	movs	r2, #0
 80217e6:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80217e8:	687b      	ldr	r3, [r7, #4]
 80217ea:	681b      	ldr	r3, [r3, #0]
 80217ec:	330c      	adds	r3, #12
 80217ee:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80217f0:	693b      	ldr	r3, [r7, #16]
 80217f2:	e853 3f00 	ldrex	r3, [r3]
 80217f6:	60fb      	str	r3, [r7, #12]
   return(result);
 80217f8:	68fb      	ldr	r3, [r7, #12]
 80217fa:	f023 0310 	bic.w	r3, r3, #16
 80217fe:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8021802:	687b      	ldr	r3, [r7, #4]
 8021804:	681b      	ldr	r3, [r3, #0]
 8021806:	330c      	adds	r3, #12
 8021808:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 802180c:	61fa      	str	r2, [r7, #28]
 802180e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8021810:	69b9      	ldr	r1, [r7, #24]
 8021812:	69fa      	ldr	r2, [r7, #28]
 8021814:	e841 2300 	strex	r3, r2, [r1]
 8021818:	617b      	str	r3, [r7, #20]
   return(result);
 802181a:	697b      	ldr	r3, [r7, #20]
 802181c:	2b00      	cmp	r3, #0
 802181e:	d1e3      	bne.n	80217e8 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8021820:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8021824:	4619      	mov	r1, r3
 8021826:	6878      	ldr	r0, [r7, #4]
 8021828:	f000 f83e 	bl	80218a8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 802182c:	e023      	b.n	8021876 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 802182e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8021832:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8021836:	2b00      	cmp	r3, #0
 8021838:	d009      	beq.n	802184e <HAL_UART_IRQHandler+0x4ea>
 802183a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 802183e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8021842:	2b00      	cmp	r3, #0
 8021844:	d003      	beq.n	802184e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8021846:	6878      	ldr	r0, [r7, #4]
 8021848:	f000 f959 	bl	8021afe <UART_Transmit_IT>
    return;
 802184c:	e014      	b.n	8021878 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 802184e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8021852:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8021856:	2b00      	cmp	r3, #0
 8021858:	d00e      	beq.n	8021878 <HAL_UART_IRQHandler+0x514>
 802185a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 802185e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8021862:	2b00      	cmp	r3, #0
 8021864:	d008      	beq.n	8021878 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8021866:	6878      	ldr	r0, [r7, #4]
 8021868:	f000 f999 	bl	8021b9e <UART_EndTransmit_IT>
    return;
 802186c:	e004      	b.n	8021878 <HAL_UART_IRQHandler+0x514>
    return;
 802186e:	bf00      	nop
 8021870:	e002      	b.n	8021878 <HAL_UART_IRQHandler+0x514>
      return;
 8021872:	bf00      	nop
 8021874:	e000      	b.n	8021878 <HAL_UART_IRQHandler+0x514>
      return;
 8021876:	bf00      	nop
  }
}
 8021878:	37e8      	adds	r7, #232	; 0xe8
 802187a:	46bd      	mov	sp, r7
 802187c:	bd80      	pop	{r7, pc}
 802187e:	bf00      	nop

08021880 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8021880:	b480      	push	{r7}
 8021882:	b083      	sub	sp, #12
 8021884:	af00      	add	r7, sp, #0
 8021886:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8021888:	bf00      	nop
 802188a:	370c      	adds	r7, #12
 802188c:	46bd      	mov	sp, r7
 802188e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021892:	4770      	bx	lr

08021894 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8021894:	b480      	push	{r7}
 8021896:	b083      	sub	sp, #12
 8021898:	af00      	add	r7, sp, #0
 802189a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 802189c:	bf00      	nop
 802189e:	370c      	adds	r7, #12
 80218a0:	46bd      	mov	sp, r7
 80218a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80218a6:	4770      	bx	lr

080218a8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80218a8:	b480      	push	{r7}
 80218aa:	b083      	sub	sp, #12
 80218ac:	af00      	add	r7, sp, #0
 80218ae:	6078      	str	r0, [r7, #4]
 80218b0:	460b      	mov	r3, r1
 80218b2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80218b4:	bf00      	nop
 80218b6:	370c      	adds	r7, #12
 80218b8:	46bd      	mov	sp, r7
 80218ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80218be:	4770      	bx	lr

080218c0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80218c0:	b580      	push	{r7, lr}
 80218c2:	b090      	sub	sp, #64	; 0x40
 80218c4:	af00      	add	r7, sp, #0
 80218c6:	60f8      	str	r0, [r7, #12]
 80218c8:	60b9      	str	r1, [r7, #8]
 80218ca:	603b      	str	r3, [r7, #0]
 80218cc:	4613      	mov	r3, r2
 80218ce:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80218d0:	e050      	b.n	8021974 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80218d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80218d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80218d8:	d04c      	beq.n	8021974 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80218da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80218dc:	2b00      	cmp	r3, #0
 80218de:	d007      	beq.n	80218f0 <UART_WaitOnFlagUntilTimeout+0x30>
 80218e0:	f7fc f926 	bl	801db30 <HAL_GetTick>
 80218e4:	4602      	mov	r2, r0
 80218e6:	683b      	ldr	r3, [r7, #0]
 80218e8:	1ad3      	subs	r3, r2, r3
 80218ea:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80218ec:	429a      	cmp	r2, r3
 80218ee:	d241      	bcs.n	8021974 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80218f0:	68fb      	ldr	r3, [r7, #12]
 80218f2:	681b      	ldr	r3, [r3, #0]
 80218f4:	330c      	adds	r3, #12
 80218f6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80218f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80218fa:	e853 3f00 	ldrex	r3, [r3]
 80218fe:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8021900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021902:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8021906:	63fb      	str	r3, [r7, #60]	; 0x3c
 8021908:	68fb      	ldr	r3, [r7, #12]
 802190a:	681b      	ldr	r3, [r3, #0]
 802190c:	330c      	adds	r3, #12
 802190e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8021910:	637a      	str	r2, [r7, #52]	; 0x34
 8021912:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8021914:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8021916:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8021918:	e841 2300 	strex	r3, r2, [r1]
 802191c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 802191e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021920:	2b00      	cmp	r3, #0
 8021922:	d1e5      	bne.n	80218f0 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8021924:	68fb      	ldr	r3, [r7, #12]
 8021926:	681b      	ldr	r3, [r3, #0]
 8021928:	3314      	adds	r3, #20
 802192a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 802192c:	697b      	ldr	r3, [r7, #20]
 802192e:	e853 3f00 	ldrex	r3, [r3]
 8021932:	613b      	str	r3, [r7, #16]
   return(result);
 8021934:	693b      	ldr	r3, [r7, #16]
 8021936:	f023 0301 	bic.w	r3, r3, #1
 802193a:	63bb      	str	r3, [r7, #56]	; 0x38
 802193c:	68fb      	ldr	r3, [r7, #12]
 802193e:	681b      	ldr	r3, [r3, #0]
 8021940:	3314      	adds	r3, #20
 8021942:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8021944:	623a      	str	r2, [r7, #32]
 8021946:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8021948:	69f9      	ldr	r1, [r7, #28]
 802194a:	6a3a      	ldr	r2, [r7, #32]
 802194c:	e841 2300 	strex	r3, r2, [r1]
 8021950:	61bb      	str	r3, [r7, #24]
   return(result);
 8021952:	69bb      	ldr	r3, [r7, #24]
 8021954:	2b00      	cmp	r3, #0
 8021956:	d1e5      	bne.n	8021924 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8021958:	68fb      	ldr	r3, [r7, #12]
 802195a:	2220      	movs	r2, #32
 802195c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8021960:	68fb      	ldr	r3, [r7, #12]
 8021962:	2220      	movs	r2, #32
 8021964:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8021968:	68fb      	ldr	r3, [r7, #12]
 802196a:	2200      	movs	r2, #0
 802196c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8021970:	2303      	movs	r3, #3
 8021972:	e00f      	b.n	8021994 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8021974:	68fb      	ldr	r3, [r7, #12]
 8021976:	681b      	ldr	r3, [r3, #0]
 8021978:	681a      	ldr	r2, [r3, #0]
 802197a:	68bb      	ldr	r3, [r7, #8]
 802197c:	4013      	ands	r3, r2
 802197e:	68ba      	ldr	r2, [r7, #8]
 8021980:	429a      	cmp	r2, r3
 8021982:	bf0c      	ite	eq
 8021984:	2301      	moveq	r3, #1
 8021986:	2300      	movne	r3, #0
 8021988:	b2db      	uxtb	r3, r3
 802198a:	461a      	mov	r2, r3
 802198c:	79fb      	ldrb	r3, [r7, #7]
 802198e:	429a      	cmp	r2, r3
 8021990:	d09f      	beq.n	80218d2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8021992:	2300      	movs	r3, #0
}
 8021994:	4618      	mov	r0, r3
 8021996:	3740      	adds	r7, #64	; 0x40
 8021998:	46bd      	mov	sp, r7
 802199a:	bd80      	pop	{r7, pc}

0802199c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 802199c:	b480      	push	{r7}
 802199e:	b085      	sub	sp, #20
 80219a0:	af00      	add	r7, sp, #0
 80219a2:	60f8      	str	r0, [r7, #12]
 80219a4:	60b9      	str	r1, [r7, #8]
 80219a6:	4613      	mov	r3, r2
 80219a8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80219aa:	68fb      	ldr	r3, [r7, #12]
 80219ac:	68ba      	ldr	r2, [r7, #8]
 80219ae:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80219b0:	68fb      	ldr	r3, [r7, #12]
 80219b2:	88fa      	ldrh	r2, [r7, #6]
 80219b4:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80219b6:	68fb      	ldr	r3, [r7, #12]
 80219b8:	88fa      	ldrh	r2, [r7, #6]
 80219ba:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80219bc:	68fb      	ldr	r3, [r7, #12]
 80219be:	2200      	movs	r2, #0
 80219c0:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80219c2:	68fb      	ldr	r3, [r7, #12]
 80219c4:	2222      	movs	r2, #34	; 0x22
 80219c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80219ca:	68fb      	ldr	r3, [r7, #12]
 80219cc:	2200      	movs	r2, #0
 80219ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80219d2:	68fb      	ldr	r3, [r7, #12]
 80219d4:	681b      	ldr	r3, [r3, #0]
 80219d6:	68da      	ldr	r2, [r3, #12]
 80219d8:	68fb      	ldr	r3, [r7, #12]
 80219da:	681b      	ldr	r3, [r3, #0]
 80219dc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80219e0:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80219e2:	68fb      	ldr	r3, [r7, #12]
 80219e4:	681b      	ldr	r3, [r3, #0]
 80219e6:	695a      	ldr	r2, [r3, #20]
 80219e8:	68fb      	ldr	r3, [r7, #12]
 80219ea:	681b      	ldr	r3, [r3, #0]
 80219ec:	f042 0201 	orr.w	r2, r2, #1
 80219f0:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80219f2:	68fb      	ldr	r3, [r7, #12]
 80219f4:	681b      	ldr	r3, [r3, #0]
 80219f6:	68da      	ldr	r2, [r3, #12]
 80219f8:	68fb      	ldr	r3, [r7, #12]
 80219fa:	681b      	ldr	r3, [r3, #0]
 80219fc:	f042 0220 	orr.w	r2, r2, #32
 8021a00:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8021a02:	2300      	movs	r3, #0
}
 8021a04:	4618      	mov	r0, r3
 8021a06:	3714      	adds	r7, #20
 8021a08:	46bd      	mov	sp, r7
 8021a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021a0e:	4770      	bx	lr

08021a10 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8021a10:	b480      	push	{r7}
 8021a12:	b095      	sub	sp, #84	; 0x54
 8021a14:	af00      	add	r7, sp, #0
 8021a16:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8021a18:	687b      	ldr	r3, [r7, #4]
 8021a1a:	681b      	ldr	r3, [r3, #0]
 8021a1c:	330c      	adds	r3, #12
 8021a1e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8021a20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8021a22:	e853 3f00 	ldrex	r3, [r3]
 8021a26:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8021a28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021a2a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8021a2e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8021a30:	687b      	ldr	r3, [r7, #4]
 8021a32:	681b      	ldr	r3, [r3, #0]
 8021a34:	330c      	adds	r3, #12
 8021a36:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8021a38:	643a      	str	r2, [r7, #64]	; 0x40
 8021a3a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8021a3c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8021a3e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8021a40:	e841 2300 	strex	r3, r2, [r1]
 8021a44:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8021a46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8021a48:	2b00      	cmp	r3, #0
 8021a4a:	d1e5      	bne.n	8021a18 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8021a4c:	687b      	ldr	r3, [r7, #4]
 8021a4e:	681b      	ldr	r3, [r3, #0]
 8021a50:	3314      	adds	r3, #20
 8021a52:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8021a54:	6a3b      	ldr	r3, [r7, #32]
 8021a56:	e853 3f00 	ldrex	r3, [r3]
 8021a5a:	61fb      	str	r3, [r7, #28]
   return(result);
 8021a5c:	69fb      	ldr	r3, [r7, #28]
 8021a5e:	f023 0301 	bic.w	r3, r3, #1
 8021a62:	64bb      	str	r3, [r7, #72]	; 0x48
 8021a64:	687b      	ldr	r3, [r7, #4]
 8021a66:	681b      	ldr	r3, [r3, #0]
 8021a68:	3314      	adds	r3, #20
 8021a6a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8021a6c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8021a6e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8021a70:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8021a72:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8021a74:	e841 2300 	strex	r3, r2, [r1]
 8021a78:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8021a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021a7c:	2b00      	cmp	r3, #0
 8021a7e:	d1e5      	bne.n	8021a4c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8021a80:	687b      	ldr	r3, [r7, #4]
 8021a82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8021a84:	2b01      	cmp	r3, #1
 8021a86:	d119      	bne.n	8021abc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8021a88:	687b      	ldr	r3, [r7, #4]
 8021a8a:	681b      	ldr	r3, [r3, #0]
 8021a8c:	330c      	adds	r3, #12
 8021a8e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8021a90:	68fb      	ldr	r3, [r7, #12]
 8021a92:	e853 3f00 	ldrex	r3, [r3]
 8021a96:	60bb      	str	r3, [r7, #8]
   return(result);
 8021a98:	68bb      	ldr	r3, [r7, #8]
 8021a9a:	f023 0310 	bic.w	r3, r3, #16
 8021a9e:	647b      	str	r3, [r7, #68]	; 0x44
 8021aa0:	687b      	ldr	r3, [r7, #4]
 8021aa2:	681b      	ldr	r3, [r3, #0]
 8021aa4:	330c      	adds	r3, #12
 8021aa6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8021aa8:	61ba      	str	r2, [r7, #24]
 8021aaa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8021aac:	6979      	ldr	r1, [r7, #20]
 8021aae:	69ba      	ldr	r2, [r7, #24]
 8021ab0:	e841 2300 	strex	r3, r2, [r1]
 8021ab4:	613b      	str	r3, [r7, #16]
   return(result);
 8021ab6:	693b      	ldr	r3, [r7, #16]
 8021ab8:	2b00      	cmp	r3, #0
 8021aba:	d1e5      	bne.n	8021a88 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8021abc:	687b      	ldr	r3, [r7, #4]
 8021abe:	2220      	movs	r2, #32
 8021ac0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8021ac4:	687b      	ldr	r3, [r7, #4]
 8021ac6:	2200      	movs	r2, #0
 8021ac8:	631a      	str	r2, [r3, #48]	; 0x30
}
 8021aca:	bf00      	nop
 8021acc:	3754      	adds	r7, #84	; 0x54
 8021ace:	46bd      	mov	sp, r7
 8021ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021ad4:	4770      	bx	lr

08021ad6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8021ad6:	b580      	push	{r7, lr}
 8021ad8:	b084      	sub	sp, #16
 8021ada:	af00      	add	r7, sp, #0
 8021adc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8021ade:	687b      	ldr	r3, [r7, #4]
 8021ae0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8021ae2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8021ae4:	68fb      	ldr	r3, [r7, #12]
 8021ae6:	2200      	movs	r2, #0
 8021ae8:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8021aea:	68fb      	ldr	r3, [r7, #12]
 8021aec:	2200      	movs	r2, #0
 8021aee:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8021af0:	68f8      	ldr	r0, [r7, #12]
 8021af2:	f7ff fecf 	bl	8021894 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8021af6:	bf00      	nop
 8021af8:	3710      	adds	r7, #16
 8021afa:	46bd      	mov	sp, r7
 8021afc:	bd80      	pop	{r7, pc}

08021afe <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8021afe:	b480      	push	{r7}
 8021b00:	b085      	sub	sp, #20
 8021b02:	af00      	add	r7, sp, #0
 8021b04:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8021b06:	687b      	ldr	r3, [r7, #4]
 8021b08:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8021b0c:	b2db      	uxtb	r3, r3
 8021b0e:	2b21      	cmp	r3, #33	; 0x21
 8021b10:	d13e      	bne.n	8021b90 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8021b12:	687b      	ldr	r3, [r7, #4]
 8021b14:	689b      	ldr	r3, [r3, #8]
 8021b16:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8021b1a:	d114      	bne.n	8021b46 <UART_Transmit_IT+0x48>
 8021b1c:	687b      	ldr	r3, [r7, #4]
 8021b1e:	691b      	ldr	r3, [r3, #16]
 8021b20:	2b00      	cmp	r3, #0
 8021b22:	d110      	bne.n	8021b46 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8021b24:	687b      	ldr	r3, [r7, #4]
 8021b26:	6a1b      	ldr	r3, [r3, #32]
 8021b28:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8021b2a:	68fb      	ldr	r3, [r7, #12]
 8021b2c:	881b      	ldrh	r3, [r3, #0]
 8021b2e:	461a      	mov	r2, r3
 8021b30:	687b      	ldr	r3, [r7, #4]
 8021b32:	681b      	ldr	r3, [r3, #0]
 8021b34:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8021b38:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8021b3a:	687b      	ldr	r3, [r7, #4]
 8021b3c:	6a1b      	ldr	r3, [r3, #32]
 8021b3e:	1c9a      	adds	r2, r3, #2
 8021b40:	687b      	ldr	r3, [r7, #4]
 8021b42:	621a      	str	r2, [r3, #32]
 8021b44:	e008      	b.n	8021b58 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8021b46:	687b      	ldr	r3, [r7, #4]
 8021b48:	6a1b      	ldr	r3, [r3, #32]
 8021b4a:	1c59      	adds	r1, r3, #1
 8021b4c:	687a      	ldr	r2, [r7, #4]
 8021b4e:	6211      	str	r1, [r2, #32]
 8021b50:	781a      	ldrb	r2, [r3, #0]
 8021b52:	687b      	ldr	r3, [r7, #4]
 8021b54:	681b      	ldr	r3, [r3, #0]
 8021b56:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8021b58:	687b      	ldr	r3, [r7, #4]
 8021b5a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8021b5c:	b29b      	uxth	r3, r3
 8021b5e:	3b01      	subs	r3, #1
 8021b60:	b29b      	uxth	r3, r3
 8021b62:	687a      	ldr	r2, [r7, #4]
 8021b64:	4619      	mov	r1, r3
 8021b66:	84d1      	strh	r1, [r2, #38]	; 0x26
 8021b68:	2b00      	cmp	r3, #0
 8021b6a:	d10f      	bne.n	8021b8c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8021b6c:	687b      	ldr	r3, [r7, #4]
 8021b6e:	681b      	ldr	r3, [r3, #0]
 8021b70:	68da      	ldr	r2, [r3, #12]
 8021b72:	687b      	ldr	r3, [r7, #4]
 8021b74:	681b      	ldr	r3, [r3, #0]
 8021b76:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8021b7a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8021b7c:	687b      	ldr	r3, [r7, #4]
 8021b7e:	681b      	ldr	r3, [r3, #0]
 8021b80:	68da      	ldr	r2, [r3, #12]
 8021b82:	687b      	ldr	r3, [r7, #4]
 8021b84:	681b      	ldr	r3, [r3, #0]
 8021b86:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8021b8a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8021b8c:	2300      	movs	r3, #0
 8021b8e:	e000      	b.n	8021b92 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8021b90:	2302      	movs	r3, #2
  }
}
 8021b92:	4618      	mov	r0, r3
 8021b94:	3714      	adds	r7, #20
 8021b96:	46bd      	mov	sp, r7
 8021b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021b9c:	4770      	bx	lr

08021b9e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8021b9e:	b580      	push	{r7, lr}
 8021ba0:	b082      	sub	sp, #8
 8021ba2:	af00      	add	r7, sp, #0
 8021ba4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8021ba6:	687b      	ldr	r3, [r7, #4]
 8021ba8:	681b      	ldr	r3, [r3, #0]
 8021baa:	68da      	ldr	r2, [r3, #12]
 8021bac:	687b      	ldr	r3, [r7, #4]
 8021bae:	681b      	ldr	r3, [r3, #0]
 8021bb0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8021bb4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8021bb6:	687b      	ldr	r3, [r7, #4]
 8021bb8:	2220      	movs	r2, #32
 8021bba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8021bbe:	6878      	ldr	r0, [r7, #4]
 8021bc0:	f7ff fe5e 	bl	8021880 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8021bc4:	2300      	movs	r3, #0
}
 8021bc6:	4618      	mov	r0, r3
 8021bc8:	3708      	adds	r7, #8
 8021bca:	46bd      	mov	sp, r7
 8021bcc:	bd80      	pop	{r7, pc}

08021bce <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8021bce:	b580      	push	{r7, lr}
 8021bd0:	b08c      	sub	sp, #48	; 0x30
 8021bd2:	af00      	add	r7, sp, #0
 8021bd4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8021bd6:	687b      	ldr	r3, [r7, #4]
 8021bd8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8021bdc:	b2db      	uxtb	r3, r3
 8021bde:	2b22      	cmp	r3, #34	; 0x22
 8021be0:	f040 80ab 	bne.w	8021d3a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8021be4:	687b      	ldr	r3, [r7, #4]
 8021be6:	689b      	ldr	r3, [r3, #8]
 8021be8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8021bec:	d117      	bne.n	8021c1e <UART_Receive_IT+0x50>
 8021bee:	687b      	ldr	r3, [r7, #4]
 8021bf0:	691b      	ldr	r3, [r3, #16]
 8021bf2:	2b00      	cmp	r3, #0
 8021bf4:	d113      	bne.n	8021c1e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8021bf6:	2300      	movs	r3, #0
 8021bf8:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8021bfa:	687b      	ldr	r3, [r7, #4]
 8021bfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8021bfe:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8021c00:	687b      	ldr	r3, [r7, #4]
 8021c02:	681b      	ldr	r3, [r3, #0]
 8021c04:	685b      	ldr	r3, [r3, #4]
 8021c06:	b29b      	uxth	r3, r3
 8021c08:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8021c0c:	b29a      	uxth	r2, r3
 8021c0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021c10:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8021c12:	687b      	ldr	r3, [r7, #4]
 8021c14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8021c16:	1c9a      	adds	r2, r3, #2
 8021c18:	687b      	ldr	r3, [r7, #4]
 8021c1a:	629a      	str	r2, [r3, #40]	; 0x28
 8021c1c:	e026      	b.n	8021c6c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8021c1e:	687b      	ldr	r3, [r7, #4]
 8021c20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8021c22:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8021c24:	2300      	movs	r3, #0
 8021c26:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8021c28:	687b      	ldr	r3, [r7, #4]
 8021c2a:	689b      	ldr	r3, [r3, #8]
 8021c2c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8021c30:	d007      	beq.n	8021c42 <UART_Receive_IT+0x74>
 8021c32:	687b      	ldr	r3, [r7, #4]
 8021c34:	689b      	ldr	r3, [r3, #8]
 8021c36:	2b00      	cmp	r3, #0
 8021c38:	d10a      	bne.n	8021c50 <UART_Receive_IT+0x82>
 8021c3a:	687b      	ldr	r3, [r7, #4]
 8021c3c:	691b      	ldr	r3, [r3, #16]
 8021c3e:	2b00      	cmp	r3, #0
 8021c40:	d106      	bne.n	8021c50 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8021c42:	687b      	ldr	r3, [r7, #4]
 8021c44:	681b      	ldr	r3, [r3, #0]
 8021c46:	685b      	ldr	r3, [r3, #4]
 8021c48:	b2da      	uxtb	r2, r3
 8021c4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021c4c:	701a      	strb	r2, [r3, #0]
 8021c4e:	e008      	b.n	8021c62 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8021c50:	687b      	ldr	r3, [r7, #4]
 8021c52:	681b      	ldr	r3, [r3, #0]
 8021c54:	685b      	ldr	r3, [r3, #4]
 8021c56:	b2db      	uxtb	r3, r3
 8021c58:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8021c5c:	b2da      	uxtb	r2, r3
 8021c5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021c60:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8021c62:	687b      	ldr	r3, [r7, #4]
 8021c64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8021c66:	1c5a      	adds	r2, r3, #1
 8021c68:	687b      	ldr	r3, [r7, #4]
 8021c6a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8021c6c:	687b      	ldr	r3, [r7, #4]
 8021c6e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8021c70:	b29b      	uxth	r3, r3
 8021c72:	3b01      	subs	r3, #1
 8021c74:	b29b      	uxth	r3, r3
 8021c76:	687a      	ldr	r2, [r7, #4]
 8021c78:	4619      	mov	r1, r3
 8021c7a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8021c7c:	2b00      	cmp	r3, #0
 8021c7e:	d15a      	bne.n	8021d36 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8021c80:	687b      	ldr	r3, [r7, #4]
 8021c82:	681b      	ldr	r3, [r3, #0]
 8021c84:	68da      	ldr	r2, [r3, #12]
 8021c86:	687b      	ldr	r3, [r7, #4]
 8021c88:	681b      	ldr	r3, [r3, #0]
 8021c8a:	f022 0220 	bic.w	r2, r2, #32
 8021c8e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8021c90:	687b      	ldr	r3, [r7, #4]
 8021c92:	681b      	ldr	r3, [r3, #0]
 8021c94:	68da      	ldr	r2, [r3, #12]
 8021c96:	687b      	ldr	r3, [r7, #4]
 8021c98:	681b      	ldr	r3, [r3, #0]
 8021c9a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8021c9e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8021ca0:	687b      	ldr	r3, [r7, #4]
 8021ca2:	681b      	ldr	r3, [r3, #0]
 8021ca4:	695a      	ldr	r2, [r3, #20]
 8021ca6:	687b      	ldr	r3, [r7, #4]
 8021ca8:	681b      	ldr	r3, [r3, #0]
 8021caa:	f022 0201 	bic.w	r2, r2, #1
 8021cae:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8021cb0:	687b      	ldr	r3, [r7, #4]
 8021cb2:	2220      	movs	r2, #32
 8021cb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8021cb8:	687b      	ldr	r3, [r7, #4]
 8021cba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8021cbc:	2b01      	cmp	r3, #1
 8021cbe:	d135      	bne.n	8021d2c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8021cc0:	687b      	ldr	r3, [r7, #4]
 8021cc2:	2200      	movs	r2, #0
 8021cc4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8021cc6:	687b      	ldr	r3, [r7, #4]
 8021cc8:	681b      	ldr	r3, [r3, #0]
 8021cca:	330c      	adds	r3, #12
 8021ccc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8021cce:	697b      	ldr	r3, [r7, #20]
 8021cd0:	e853 3f00 	ldrex	r3, [r3]
 8021cd4:	613b      	str	r3, [r7, #16]
   return(result);
 8021cd6:	693b      	ldr	r3, [r7, #16]
 8021cd8:	f023 0310 	bic.w	r3, r3, #16
 8021cdc:	627b      	str	r3, [r7, #36]	; 0x24
 8021cde:	687b      	ldr	r3, [r7, #4]
 8021ce0:	681b      	ldr	r3, [r3, #0]
 8021ce2:	330c      	adds	r3, #12
 8021ce4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8021ce6:	623a      	str	r2, [r7, #32]
 8021ce8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8021cea:	69f9      	ldr	r1, [r7, #28]
 8021cec:	6a3a      	ldr	r2, [r7, #32]
 8021cee:	e841 2300 	strex	r3, r2, [r1]
 8021cf2:	61bb      	str	r3, [r7, #24]
   return(result);
 8021cf4:	69bb      	ldr	r3, [r7, #24]
 8021cf6:	2b00      	cmp	r3, #0
 8021cf8:	d1e5      	bne.n	8021cc6 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8021cfa:	687b      	ldr	r3, [r7, #4]
 8021cfc:	681b      	ldr	r3, [r3, #0]
 8021cfe:	681b      	ldr	r3, [r3, #0]
 8021d00:	f003 0310 	and.w	r3, r3, #16
 8021d04:	2b10      	cmp	r3, #16
 8021d06:	d10a      	bne.n	8021d1e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8021d08:	2300      	movs	r3, #0
 8021d0a:	60fb      	str	r3, [r7, #12]
 8021d0c:	687b      	ldr	r3, [r7, #4]
 8021d0e:	681b      	ldr	r3, [r3, #0]
 8021d10:	681b      	ldr	r3, [r3, #0]
 8021d12:	60fb      	str	r3, [r7, #12]
 8021d14:	687b      	ldr	r3, [r7, #4]
 8021d16:	681b      	ldr	r3, [r3, #0]
 8021d18:	685b      	ldr	r3, [r3, #4]
 8021d1a:	60fb      	str	r3, [r7, #12]
 8021d1c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8021d1e:	687b      	ldr	r3, [r7, #4]
 8021d20:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8021d22:	4619      	mov	r1, r3
 8021d24:	6878      	ldr	r0, [r7, #4]
 8021d26:	f7ff fdbf 	bl	80218a8 <HAL_UARTEx_RxEventCallback>
 8021d2a:	e002      	b.n	8021d32 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8021d2c:	6878      	ldr	r0, [r7, #4]
 8021d2e:	f7fb fa83 	bl	801d238 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8021d32:	2300      	movs	r3, #0
 8021d34:	e002      	b.n	8021d3c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8021d36:	2300      	movs	r3, #0
 8021d38:	e000      	b.n	8021d3c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8021d3a:	2302      	movs	r3, #2
  }
}
 8021d3c:	4618      	mov	r0, r3
 8021d3e:	3730      	adds	r7, #48	; 0x30
 8021d40:	46bd      	mov	sp, r7
 8021d42:	bd80      	pop	{r7, pc}

08021d44 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8021d44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021d48:	b09f      	sub	sp, #124	; 0x7c
 8021d4a:	af00      	add	r7, sp, #0
 8021d4c:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8021d4e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8021d50:	681b      	ldr	r3, [r3, #0]
 8021d52:	691b      	ldr	r3, [r3, #16]
 8021d54:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8021d58:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8021d5a:	68d9      	ldr	r1, [r3, #12]
 8021d5c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8021d5e:	681a      	ldr	r2, [r3, #0]
 8021d60:	ea40 0301 	orr.w	r3, r0, r1
 8021d64:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8021d66:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8021d68:	689a      	ldr	r2, [r3, #8]
 8021d6a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8021d6c:	691b      	ldr	r3, [r3, #16]
 8021d6e:	431a      	orrs	r2, r3
 8021d70:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8021d72:	695b      	ldr	r3, [r3, #20]
 8021d74:	431a      	orrs	r2, r3
 8021d76:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8021d78:	69db      	ldr	r3, [r3, #28]
 8021d7a:	4313      	orrs	r3, r2
 8021d7c:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8021d7e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8021d80:	681b      	ldr	r3, [r3, #0]
 8021d82:	68db      	ldr	r3, [r3, #12]
 8021d84:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8021d88:	f021 010c 	bic.w	r1, r1, #12
 8021d8c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8021d8e:	681a      	ldr	r2, [r3, #0]
 8021d90:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8021d92:	430b      	orrs	r3, r1
 8021d94:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8021d96:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8021d98:	681b      	ldr	r3, [r3, #0]
 8021d9a:	695b      	ldr	r3, [r3, #20]
 8021d9c:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8021da0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8021da2:	6999      	ldr	r1, [r3, #24]
 8021da4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8021da6:	681a      	ldr	r2, [r3, #0]
 8021da8:	ea40 0301 	orr.w	r3, r0, r1
 8021dac:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8021dae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8021db0:	681a      	ldr	r2, [r3, #0]
 8021db2:	4bc5      	ldr	r3, [pc, #788]	; (80220c8 <UART_SetConfig+0x384>)
 8021db4:	429a      	cmp	r2, r3
 8021db6:	d004      	beq.n	8021dc2 <UART_SetConfig+0x7e>
 8021db8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8021dba:	681a      	ldr	r2, [r3, #0]
 8021dbc:	4bc3      	ldr	r3, [pc, #780]	; (80220cc <UART_SetConfig+0x388>)
 8021dbe:	429a      	cmp	r2, r3
 8021dc0:	d103      	bne.n	8021dca <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8021dc2:	f7fd ffa1 	bl	801fd08 <HAL_RCC_GetPCLK2Freq>
 8021dc6:	6778      	str	r0, [r7, #116]	; 0x74
 8021dc8:	e002      	b.n	8021dd0 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8021dca:	f7fd ff89 	bl	801fce0 <HAL_RCC_GetPCLK1Freq>
 8021dce:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8021dd0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8021dd2:	69db      	ldr	r3, [r3, #28]
 8021dd4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8021dd8:	f040 80b6 	bne.w	8021f48 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8021ddc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8021dde:	461c      	mov	r4, r3
 8021de0:	f04f 0500 	mov.w	r5, #0
 8021de4:	4622      	mov	r2, r4
 8021de6:	462b      	mov	r3, r5
 8021de8:	1891      	adds	r1, r2, r2
 8021dea:	6439      	str	r1, [r7, #64]	; 0x40
 8021dec:	415b      	adcs	r3, r3
 8021dee:	647b      	str	r3, [r7, #68]	; 0x44
 8021df0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8021df4:	1912      	adds	r2, r2, r4
 8021df6:	eb45 0303 	adc.w	r3, r5, r3
 8021dfa:	f04f 0000 	mov.w	r0, #0
 8021dfe:	f04f 0100 	mov.w	r1, #0
 8021e02:	00d9      	lsls	r1, r3, #3
 8021e04:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8021e08:	00d0      	lsls	r0, r2, #3
 8021e0a:	4602      	mov	r2, r0
 8021e0c:	460b      	mov	r3, r1
 8021e0e:	1911      	adds	r1, r2, r4
 8021e10:	6639      	str	r1, [r7, #96]	; 0x60
 8021e12:	416b      	adcs	r3, r5
 8021e14:	667b      	str	r3, [r7, #100]	; 0x64
 8021e16:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8021e18:	685b      	ldr	r3, [r3, #4]
 8021e1a:	461a      	mov	r2, r3
 8021e1c:	f04f 0300 	mov.w	r3, #0
 8021e20:	1891      	adds	r1, r2, r2
 8021e22:	63b9      	str	r1, [r7, #56]	; 0x38
 8021e24:	415b      	adcs	r3, r3
 8021e26:	63fb      	str	r3, [r7, #60]	; 0x3c
 8021e28:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8021e2c:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8021e30:	f7de feba 	bl	8000ba8 <__aeabi_uldivmod>
 8021e34:	4602      	mov	r2, r0
 8021e36:	460b      	mov	r3, r1
 8021e38:	4ba5      	ldr	r3, [pc, #660]	; (80220d0 <UART_SetConfig+0x38c>)
 8021e3a:	fba3 2302 	umull	r2, r3, r3, r2
 8021e3e:	095b      	lsrs	r3, r3, #5
 8021e40:	011e      	lsls	r6, r3, #4
 8021e42:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8021e44:	461c      	mov	r4, r3
 8021e46:	f04f 0500 	mov.w	r5, #0
 8021e4a:	4622      	mov	r2, r4
 8021e4c:	462b      	mov	r3, r5
 8021e4e:	1891      	adds	r1, r2, r2
 8021e50:	6339      	str	r1, [r7, #48]	; 0x30
 8021e52:	415b      	adcs	r3, r3
 8021e54:	637b      	str	r3, [r7, #52]	; 0x34
 8021e56:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8021e5a:	1912      	adds	r2, r2, r4
 8021e5c:	eb45 0303 	adc.w	r3, r5, r3
 8021e60:	f04f 0000 	mov.w	r0, #0
 8021e64:	f04f 0100 	mov.w	r1, #0
 8021e68:	00d9      	lsls	r1, r3, #3
 8021e6a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8021e6e:	00d0      	lsls	r0, r2, #3
 8021e70:	4602      	mov	r2, r0
 8021e72:	460b      	mov	r3, r1
 8021e74:	1911      	adds	r1, r2, r4
 8021e76:	65b9      	str	r1, [r7, #88]	; 0x58
 8021e78:	416b      	adcs	r3, r5
 8021e7a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8021e7c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8021e7e:	685b      	ldr	r3, [r3, #4]
 8021e80:	461a      	mov	r2, r3
 8021e82:	f04f 0300 	mov.w	r3, #0
 8021e86:	1891      	adds	r1, r2, r2
 8021e88:	62b9      	str	r1, [r7, #40]	; 0x28
 8021e8a:	415b      	adcs	r3, r3
 8021e8c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8021e8e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8021e92:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8021e96:	f7de fe87 	bl	8000ba8 <__aeabi_uldivmod>
 8021e9a:	4602      	mov	r2, r0
 8021e9c:	460b      	mov	r3, r1
 8021e9e:	4b8c      	ldr	r3, [pc, #560]	; (80220d0 <UART_SetConfig+0x38c>)
 8021ea0:	fba3 1302 	umull	r1, r3, r3, r2
 8021ea4:	095b      	lsrs	r3, r3, #5
 8021ea6:	2164      	movs	r1, #100	; 0x64
 8021ea8:	fb01 f303 	mul.w	r3, r1, r3
 8021eac:	1ad3      	subs	r3, r2, r3
 8021eae:	00db      	lsls	r3, r3, #3
 8021eb0:	3332      	adds	r3, #50	; 0x32
 8021eb2:	4a87      	ldr	r2, [pc, #540]	; (80220d0 <UART_SetConfig+0x38c>)
 8021eb4:	fba2 2303 	umull	r2, r3, r2, r3
 8021eb8:	095b      	lsrs	r3, r3, #5
 8021eba:	005b      	lsls	r3, r3, #1
 8021ebc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8021ec0:	441e      	add	r6, r3
 8021ec2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8021ec4:	4618      	mov	r0, r3
 8021ec6:	f04f 0100 	mov.w	r1, #0
 8021eca:	4602      	mov	r2, r0
 8021ecc:	460b      	mov	r3, r1
 8021ece:	1894      	adds	r4, r2, r2
 8021ed0:	623c      	str	r4, [r7, #32]
 8021ed2:	415b      	adcs	r3, r3
 8021ed4:	627b      	str	r3, [r7, #36]	; 0x24
 8021ed6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8021eda:	1812      	adds	r2, r2, r0
 8021edc:	eb41 0303 	adc.w	r3, r1, r3
 8021ee0:	f04f 0400 	mov.w	r4, #0
 8021ee4:	f04f 0500 	mov.w	r5, #0
 8021ee8:	00dd      	lsls	r5, r3, #3
 8021eea:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8021eee:	00d4      	lsls	r4, r2, #3
 8021ef0:	4622      	mov	r2, r4
 8021ef2:	462b      	mov	r3, r5
 8021ef4:	1814      	adds	r4, r2, r0
 8021ef6:	653c      	str	r4, [r7, #80]	; 0x50
 8021ef8:	414b      	adcs	r3, r1
 8021efa:	657b      	str	r3, [r7, #84]	; 0x54
 8021efc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8021efe:	685b      	ldr	r3, [r3, #4]
 8021f00:	461a      	mov	r2, r3
 8021f02:	f04f 0300 	mov.w	r3, #0
 8021f06:	1891      	adds	r1, r2, r2
 8021f08:	61b9      	str	r1, [r7, #24]
 8021f0a:	415b      	adcs	r3, r3
 8021f0c:	61fb      	str	r3, [r7, #28]
 8021f0e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8021f12:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8021f16:	f7de fe47 	bl	8000ba8 <__aeabi_uldivmod>
 8021f1a:	4602      	mov	r2, r0
 8021f1c:	460b      	mov	r3, r1
 8021f1e:	4b6c      	ldr	r3, [pc, #432]	; (80220d0 <UART_SetConfig+0x38c>)
 8021f20:	fba3 1302 	umull	r1, r3, r3, r2
 8021f24:	095b      	lsrs	r3, r3, #5
 8021f26:	2164      	movs	r1, #100	; 0x64
 8021f28:	fb01 f303 	mul.w	r3, r1, r3
 8021f2c:	1ad3      	subs	r3, r2, r3
 8021f2e:	00db      	lsls	r3, r3, #3
 8021f30:	3332      	adds	r3, #50	; 0x32
 8021f32:	4a67      	ldr	r2, [pc, #412]	; (80220d0 <UART_SetConfig+0x38c>)
 8021f34:	fba2 2303 	umull	r2, r3, r2, r3
 8021f38:	095b      	lsrs	r3, r3, #5
 8021f3a:	f003 0207 	and.w	r2, r3, #7
 8021f3e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8021f40:	681b      	ldr	r3, [r3, #0]
 8021f42:	4432      	add	r2, r6
 8021f44:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8021f46:	e0b9      	b.n	80220bc <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8021f48:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8021f4a:	461c      	mov	r4, r3
 8021f4c:	f04f 0500 	mov.w	r5, #0
 8021f50:	4622      	mov	r2, r4
 8021f52:	462b      	mov	r3, r5
 8021f54:	1891      	adds	r1, r2, r2
 8021f56:	6139      	str	r1, [r7, #16]
 8021f58:	415b      	adcs	r3, r3
 8021f5a:	617b      	str	r3, [r7, #20]
 8021f5c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8021f60:	1912      	adds	r2, r2, r4
 8021f62:	eb45 0303 	adc.w	r3, r5, r3
 8021f66:	f04f 0000 	mov.w	r0, #0
 8021f6a:	f04f 0100 	mov.w	r1, #0
 8021f6e:	00d9      	lsls	r1, r3, #3
 8021f70:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8021f74:	00d0      	lsls	r0, r2, #3
 8021f76:	4602      	mov	r2, r0
 8021f78:	460b      	mov	r3, r1
 8021f7a:	eb12 0804 	adds.w	r8, r2, r4
 8021f7e:	eb43 0905 	adc.w	r9, r3, r5
 8021f82:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8021f84:	685b      	ldr	r3, [r3, #4]
 8021f86:	4618      	mov	r0, r3
 8021f88:	f04f 0100 	mov.w	r1, #0
 8021f8c:	f04f 0200 	mov.w	r2, #0
 8021f90:	f04f 0300 	mov.w	r3, #0
 8021f94:	008b      	lsls	r3, r1, #2
 8021f96:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8021f9a:	0082      	lsls	r2, r0, #2
 8021f9c:	4640      	mov	r0, r8
 8021f9e:	4649      	mov	r1, r9
 8021fa0:	f7de fe02 	bl	8000ba8 <__aeabi_uldivmod>
 8021fa4:	4602      	mov	r2, r0
 8021fa6:	460b      	mov	r3, r1
 8021fa8:	4b49      	ldr	r3, [pc, #292]	; (80220d0 <UART_SetConfig+0x38c>)
 8021faa:	fba3 2302 	umull	r2, r3, r3, r2
 8021fae:	095b      	lsrs	r3, r3, #5
 8021fb0:	011e      	lsls	r6, r3, #4
 8021fb2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8021fb4:	4618      	mov	r0, r3
 8021fb6:	f04f 0100 	mov.w	r1, #0
 8021fba:	4602      	mov	r2, r0
 8021fbc:	460b      	mov	r3, r1
 8021fbe:	1894      	adds	r4, r2, r2
 8021fc0:	60bc      	str	r4, [r7, #8]
 8021fc2:	415b      	adcs	r3, r3
 8021fc4:	60fb      	str	r3, [r7, #12]
 8021fc6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8021fca:	1812      	adds	r2, r2, r0
 8021fcc:	eb41 0303 	adc.w	r3, r1, r3
 8021fd0:	f04f 0400 	mov.w	r4, #0
 8021fd4:	f04f 0500 	mov.w	r5, #0
 8021fd8:	00dd      	lsls	r5, r3, #3
 8021fda:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8021fde:	00d4      	lsls	r4, r2, #3
 8021fe0:	4622      	mov	r2, r4
 8021fe2:	462b      	mov	r3, r5
 8021fe4:	1814      	adds	r4, r2, r0
 8021fe6:	64bc      	str	r4, [r7, #72]	; 0x48
 8021fe8:	414b      	adcs	r3, r1
 8021fea:	64fb      	str	r3, [r7, #76]	; 0x4c
 8021fec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8021fee:	685b      	ldr	r3, [r3, #4]
 8021ff0:	4618      	mov	r0, r3
 8021ff2:	f04f 0100 	mov.w	r1, #0
 8021ff6:	f04f 0200 	mov.w	r2, #0
 8021ffa:	f04f 0300 	mov.w	r3, #0
 8021ffe:	008b      	lsls	r3, r1, #2
 8022000:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8022004:	0082      	lsls	r2, r0, #2
 8022006:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 802200a:	f7de fdcd 	bl	8000ba8 <__aeabi_uldivmod>
 802200e:	4602      	mov	r2, r0
 8022010:	460b      	mov	r3, r1
 8022012:	4b2f      	ldr	r3, [pc, #188]	; (80220d0 <UART_SetConfig+0x38c>)
 8022014:	fba3 1302 	umull	r1, r3, r3, r2
 8022018:	095b      	lsrs	r3, r3, #5
 802201a:	2164      	movs	r1, #100	; 0x64
 802201c:	fb01 f303 	mul.w	r3, r1, r3
 8022020:	1ad3      	subs	r3, r2, r3
 8022022:	011b      	lsls	r3, r3, #4
 8022024:	3332      	adds	r3, #50	; 0x32
 8022026:	4a2a      	ldr	r2, [pc, #168]	; (80220d0 <UART_SetConfig+0x38c>)
 8022028:	fba2 2303 	umull	r2, r3, r2, r3
 802202c:	095b      	lsrs	r3, r3, #5
 802202e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8022032:	441e      	add	r6, r3
 8022034:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8022036:	4618      	mov	r0, r3
 8022038:	f04f 0100 	mov.w	r1, #0
 802203c:	4602      	mov	r2, r0
 802203e:	460b      	mov	r3, r1
 8022040:	1894      	adds	r4, r2, r2
 8022042:	603c      	str	r4, [r7, #0]
 8022044:	415b      	adcs	r3, r3
 8022046:	607b      	str	r3, [r7, #4]
 8022048:	e9d7 2300 	ldrd	r2, r3, [r7]
 802204c:	1812      	adds	r2, r2, r0
 802204e:	eb41 0303 	adc.w	r3, r1, r3
 8022052:	f04f 0400 	mov.w	r4, #0
 8022056:	f04f 0500 	mov.w	r5, #0
 802205a:	00dd      	lsls	r5, r3, #3
 802205c:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8022060:	00d4      	lsls	r4, r2, #3
 8022062:	4622      	mov	r2, r4
 8022064:	462b      	mov	r3, r5
 8022066:	eb12 0a00 	adds.w	sl, r2, r0
 802206a:	eb43 0b01 	adc.w	fp, r3, r1
 802206e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8022070:	685b      	ldr	r3, [r3, #4]
 8022072:	4618      	mov	r0, r3
 8022074:	f04f 0100 	mov.w	r1, #0
 8022078:	f04f 0200 	mov.w	r2, #0
 802207c:	f04f 0300 	mov.w	r3, #0
 8022080:	008b      	lsls	r3, r1, #2
 8022082:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8022086:	0082      	lsls	r2, r0, #2
 8022088:	4650      	mov	r0, sl
 802208a:	4659      	mov	r1, fp
 802208c:	f7de fd8c 	bl	8000ba8 <__aeabi_uldivmod>
 8022090:	4602      	mov	r2, r0
 8022092:	460b      	mov	r3, r1
 8022094:	4b0e      	ldr	r3, [pc, #56]	; (80220d0 <UART_SetConfig+0x38c>)
 8022096:	fba3 1302 	umull	r1, r3, r3, r2
 802209a:	095b      	lsrs	r3, r3, #5
 802209c:	2164      	movs	r1, #100	; 0x64
 802209e:	fb01 f303 	mul.w	r3, r1, r3
 80220a2:	1ad3      	subs	r3, r2, r3
 80220a4:	011b      	lsls	r3, r3, #4
 80220a6:	3332      	adds	r3, #50	; 0x32
 80220a8:	4a09      	ldr	r2, [pc, #36]	; (80220d0 <UART_SetConfig+0x38c>)
 80220aa:	fba2 2303 	umull	r2, r3, r2, r3
 80220ae:	095b      	lsrs	r3, r3, #5
 80220b0:	f003 020f 	and.w	r2, r3, #15
 80220b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80220b6:	681b      	ldr	r3, [r3, #0]
 80220b8:	4432      	add	r2, r6
 80220ba:	609a      	str	r2, [r3, #8]
}
 80220bc:	bf00      	nop
 80220be:	377c      	adds	r7, #124	; 0x7c
 80220c0:	46bd      	mov	sp, r7
 80220c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80220c6:	bf00      	nop
 80220c8:	40011000 	.word	0x40011000
 80220cc:	40011400 	.word	0x40011400
 80220d0:	51eb851f 	.word	0x51eb851f

080220d4 <__errno>:
 80220d4:	4b01      	ldr	r3, [pc, #4]	; (80220dc <__errno+0x8>)
 80220d6:	6818      	ldr	r0, [r3, #0]
 80220d8:	4770      	bx	lr
 80220da:	bf00      	nop
 80220dc:	2000000c 	.word	0x2000000c

080220e0 <__libc_init_array>:
 80220e0:	b570      	push	{r4, r5, r6, lr}
 80220e2:	4d0d      	ldr	r5, [pc, #52]	; (8022118 <__libc_init_array+0x38>)
 80220e4:	4c0d      	ldr	r4, [pc, #52]	; (802211c <__libc_init_array+0x3c>)
 80220e6:	1b64      	subs	r4, r4, r5
 80220e8:	10a4      	asrs	r4, r4, #2
 80220ea:	2600      	movs	r6, #0
 80220ec:	42a6      	cmp	r6, r4
 80220ee:	d109      	bne.n	8022104 <__libc_init_array+0x24>
 80220f0:	4d0b      	ldr	r5, [pc, #44]	; (8022120 <__libc_init_array+0x40>)
 80220f2:	4c0c      	ldr	r4, [pc, #48]	; (8022124 <__libc_init_array+0x44>)
 80220f4:	f001 fc2a 	bl	802394c <_init>
 80220f8:	1b64      	subs	r4, r4, r5
 80220fa:	10a4      	asrs	r4, r4, #2
 80220fc:	2600      	movs	r6, #0
 80220fe:	42a6      	cmp	r6, r4
 8022100:	d105      	bne.n	802210e <__libc_init_array+0x2e>
 8022102:	bd70      	pop	{r4, r5, r6, pc}
 8022104:	f855 3b04 	ldr.w	r3, [r5], #4
 8022108:	4798      	blx	r3
 802210a:	3601      	adds	r6, #1
 802210c:	e7ee      	b.n	80220ec <__libc_init_array+0xc>
 802210e:	f855 3b04 	ldr.w	r3, [r5], #4
 8022112:	4798      	blx	r3
 8022114:	3601      	adds	r6, #1
 8022116:	e7f2      	b.n	80220fe <__libc_init_array+0x1e>
 8022118:	0802d310 	.word	0x0802d310
 802211c:	0802d310 	.word	0x0802d310
 8022120:	0802d310 	.word	0x0802d310
 8022124:	0802d314 	.word	0x0802d314

08022128 <memcpy>:
 8022128:	440a      	add	r2, r1
 802212a:	4291      	cmp	r1, r2
 802212c:	f100 33ff 	add.w	r3, r0, #4294967295
 8022130:	d100      	bne.n	8022134 <memcpy+0xc>
 8022132:	4770      	bx	lr
 8022134:	b510      	push	{r4, lr}
 8022136:	f811 4b01 	ldrb.w	r4, [r1], #1
 802213a:	f803 4f01 	strb.w	r4, [r3, #1]!
 802213e:	4291      	cmp	r1, r2
 8022140:	d1f9      	bne.n	8022136 <memcpy+0xe>
 8022142:	bd10      	pop	{r4, pc}

08022144 <memset>:
 8022144:	4402      	add	r2, r0
 8022146:	4603      	mov	r3, r0
 8022148:	4293      	cmp	r3, r2
 802214a:	d100      	bne.n	802214e <memset+0xa>
 802214c:	4770      	bx	lr
 802214e:	f803 1b01 	strb.w	r1, [r3], #1
 8022152:	e7f9      	b.n	8022148 <memset+0x4>

08022154 <siprintf>:
 8022154:	b40e      	push	{r1, r2, r3}
 8022156:	b500      	push	{lr}
 8022158:	b09c      	sub	sp, #112	; 0x70
 802215a:	ab1d      	add	r3, sp, #116	; 0x74
 802215c:	9002      	str	r0, [sp, #8]
 802215e:	9006      	str	r0, [sp, #24]
 8022160:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8022164:	4809      	ldr	r0, [pc, #36]	; (802218c <siprintf+0x38>)
 8022166:	9107      	str	r1, [sp, #28]
 8022168:	9104      	str	r1, [sp, #16]
 802216a:	4909      	ldr	r1, [pc, #36]	; (8022190 <siprintf+0x3c>)
 802216c:	f853 2b04 	ldr.w	r2, [r3], #4
 8022170:	9105      	str	r1, [sp, #20]
 8022172:	6800      	ldr	r0, [r0, #0]
 8022174:	9301      	str	r3, [sp, #4]
 8022176:	a902      	add	r1, sp, #8
 8022178:	f000 f93a 	bl	80223f0 <_svfiprintf_r>
 802217c:	9b02      	ldr	r3, [sp, #8]
 802217e:	2200      	movs	r2, #0
 8022180:	701a      	strb	r2, [r3, #0]
 8022182:	b01c      	add	sp, #112	; 0x70
 8022184:	f85d eb04 	ldr.w	lr, [sp], #4
 8022188:	b003      	add	sp, #12
 802218a:	4770      	bx	lr
 802218c:	2000000c 	.word	0x2000000c
 8022190:	ffff0208 	.word	0xffff0208

08022194 <strcpy>:
 8022194:	4603      	mov	r3, r0
 8022196:	f811 2b01 	ldrb.w	r2, [r1], #1
 802219a:	f803 2b01 	strb.w	r2, [r3], #1
 802219e:	2a00      	cmp	r2, #0
 80221a0:	d1f9      	bne.n	8022196 <strcpy+0x2>
 80221a2:	4770      	bx	lr

080221a4 <_vsiprintf_r>:
 80221a4:	b500      	push	{lr}
 80221a6:	b09b      	sub	sp, #108	; 0x6c
 80221a8:	9100      	str	r1, [sp, #0]
 80221aa:	9104      	str	r1, [sp, #16]
 80221ac:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80221b0:	9105      	str	r1, [sp, #20]
 80221b2:	9102      	str	r1, [sp, #8]
 80221b4:	4905      	ldr	r1, [pc, #20]	; (80221cc <_vsiprintf_r+0x28>)
 80221b6:	9103      	str	r1, [sp, #12]
 80221b8:	4669      	mov	r1, sp
 80221ba:	f000 f919 	bl	80223f0 <_svfiprintf_r>
 80221be:	9b00      	ldr	r3, [sp, #0]
 80221c0:	2200      	movs	r2, #0
 80221c2:	701a      	strb	r2, [r3, #0]
 80221c4:	b01b      	add	sp, #108	; 0x6c
 80221c6:	f85d fb04 	ldr.w	pc, [sp], #4
 80221ca:	bf00      	nop
 80221cc:	ffff0208 	.word	0xffff0208

080221d0 <vsiprintf>:
 80221d0:	4613      	mov	r3, r2
 80221d2:	460a      	mov	r2, r1
 80221d4:	4601      	mov	r1, r0
 80221d6:	4802      	ldr	r0, [pc, #8]	; (80221e0 <vsiprintf+0x10>)
 80221d8:	6800      	ldr	r0, [r0, #0]
 80221da:	f7ff bfe3 	b.w	80221a4 <_vsiprintf_r>
 80221de:	bf00      	nop
 80221e0:	2000000c 	.word	0x2000000c

080221e4 <_free_r>:
 80221e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80221e6:	2900      	cmp	r1, #0
 80221e8:	d048      	beq.n	802227c <_free_r+0x98>
 80221ea:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80221ee:	9001      	str	r0, [sp, #4]
 80221f0:	2b00      	cmp	r3, #0
 80221f2:	f1a1 0404 	sub.w	r4, r1, #4
 80221f6:	bfb8      	it	lt
 80221f8:	18e4      	addlt	r4, r4, r3
 80221fa:	f000 fbb9 	bl	8022970 <__malloc_lock>
 80221fe:	4a20      	ldr	r2, [pc, #128]	; (8022280 <_free_r+0x9c>)
 8022200:	9801      	ldr	r0, [sp, #4]
 8022202:	6813      	ldr	r3, [r2, #0]
 8022204:	4615      	mov	r5, r2
 8022206:	b933      	cbnz	r3, 8022216 <_free_r+0x32>
 8022208:	6063      	str	r3, [r4, #4]
 802220a:	6014      	str	r4, [r2, #0]
 802220c:	b003      	add	sp, #12
 802220e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8022212:	f000 bbb3 	b.w	802297c <__malloc_unlock>
 8022216:	42a3      	cmp	r3, r4
 8022218:	d90b      	bls.n	8022232 <_free_r+0x4e>
 802221a:	6821      	ldr	r1, [r4, #0]
 802221c:	1862      	adds	r2, r4, r1
 802221e:	4293      	cmp	r3, r2
 8022220:	bf04      	itt	eq
 8022222:	681a      	ldreq	r2, [r3, #0]
 8022224:	685b      	ldreq	r3, [r3, #4]
 8022226:	6063      	str	r3, [r4, #4]
 8022228:	bf04      	itt	eq
 802222a:	1852      	addeq	r2, r2, r1
 802222c:	6022      	streq	r2, [r4, #0]
 802222e:	602c      	str	r4, [r5, #0]
 8022230:	e7ec      	b.n	802220c <_free_r+0x28>
 8022232:	461a      	mov	r2, r3
 8022234:	685b      	ldr	r3, [r3, #4]
 8022236:	b10b      	cbz	r3, 802223c <_free_r+0x58>
 8022238:	42a3      	cmp	r3, r4
 802223a:	d9fa      	bls.n	8022232 <_free_r+0x4e>
 802223c:	6811      	ldr	r1, [r2, #0]
 802223e:	1855      	adds	r5, r2, r1
 8022240:	42a5      	cmp	r5, r4
 8022242:	d10b      	bne.n	802225c <_free_r+0x78>
 8022244:	6824      	ldr	r4, [r4, #0]
 8022246:	4421      	add	r1, r4
 8022248:	1854      	adds	r4, r2, r1
 802224a:	42a3      	cmp	r3, r4
 802224c:	6011      	str	r1, [r2, #0]
 802224e:	d1dd      	bne.n	802220c <_free_r+0x28>
 8022250:	681c      	ldr	r4, [r3, #0]
 8022252:	685b      	ldr	r3, [r3, #4]
 8022254:	6053      	str	r3, [r2, #4]
 8022256:	4421      	add	r1, r4
 8022258:	6011      	str	r1, [r2, #0]
 802225a:	e7d7      	b.n	802220c <_free_r+0x28>
 802225c:	d902      	bls.n	8022264 <_free_r+0x80>
 802225e:	230c      	movs	r3, #12
 8022260:	6003      	str	r3, [r0, #0]
 8022262:	e7d3      	b.n	802220c <_free_r+0x28>
 8022264:	6825      	ldr	r5, [r4, #0]
 8022266:	1961      	adds	r1, r4, r5
 8022268:	428b      	cmp	r3, r1
 802226a:	bf04      	itt	eq
 802226c:	6819      	ldreq	r1, [r3, #0]
 802226e:	685b      	ldreq	r3, [r3, #4]
 8022270:	6063      	str	r3, [r4, #4]
 8022272:	bf04      	itt	eq
 8022274:	1949      	addeq	r1, r1, r5
 8022276:	6021      	streq	r1, [r4, #0]
 8022278:	6054      	str	r4, [r2, #4]
 802227a:	e7c7      	b.n	802220c <_free_r+0x28>
 802227c:	b003      	add	sp, #12
 802227e:	bd30      	pop	{r4, r5, pc}
 8022280:	200000a4 	.word	0x200000a4

08022284 <_malloc_r>:
 8022284:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8022286:	1ccd      	adds	r5, r1, #3
 8022288:	f025 0503 	bic.w	r5, r5, #3
 802228c:	3508      	adds	r5, #8
 802228e:	2d0c      	cmp	r5, #12
 8022290:	bf38      	it	cc
 8022292:	250c      	movcc	r5, #12
 8022294:	2d00      	cmp	r5, #0
 8022296:	4606      	mov	r6, r0
 8022298:	db01      	blt.n	802229e <_malloc_r+0x1a>
 802229a:	42a9      	cmp	r1, r5
 802229c:	d903      	bls.n	80222a6 <_malloc_r+0x22>
 802229e:	230c      	movs	r3, #12
 80222a0:	6033      	str	r3, [r6, #0]
 80222a2:	2000      	movs	r0, #0
 80222a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80222a6:	f000 fb63 	bl	8022970 <__malloc_lock>
 80222aa:	4921      	ldr	r1, [pc, #132]	; (8022330 <_malloc_r+0xac>)
 80222ac:	680a      	ldr	r2, [r1, #0]
 80222ae:	4614      	mov	r4, r2
 80222b0:	b99c      	cbnz	r4, 80222da <_malloc_r+0x56>
 80222b2:	4f20      	ldr	r7, [pc, #128]	; (8022334 <_malloc_r+0xb0>)
 80222b4:	683b      	ldr	r3, [r7, #0]
 80222b6:	b923      	cbnz	r3, 80222c2 <_malloc_r+0x3e>
 80222b8:	4621      	mov	r1, r4
 80222ba:	4630      	mov	r0, r6
 80222bc:	f000 fb2c 	bl	8022918 <_sbrk_r>
 80222c0:	6038      	str	r0, [r7, #0]
 80222c2:	4629      	mov	r1, r5
 80222c4:	4630      	mov	r0, r6
 80222c6:	f000 fb27 	bl	8022918 <_sbrk_r>
 80222ca:	1c43      	adds	r3, r0, #1
 80222cc:	d123      	bne.n	8022316 <_malloc_r+0x92>
 80222ce:	230c      	movs	r3, #12
 80222d0:	6033      	str	r3, [r6, #0]
 80222d2:	4630      	mov	r0, r6
 80222d4:	f000 fb52 	bl	802297c <__malloc_unlock>
 80222d8:	e7e3      	b.n	80222a2 <_malloc_r+0x1e>
 80222da:	6823      	ldr	r3, [r4, #0]
 80222dc:	1b5b      	subs	r3, r3, r5
 80222de:	d417      	bmi.n	8022310 <_malloc_r+0x8c>
 80222e0:	2b0b      	cmp	r3, #11
 80222e2:	d903      	bls.n	80222ec <_malloc_r+0x68>
 80222e4:	6023      	str	r3, [r4, #0]
 80222e6:	441c      	add	r4, r3
 80222e8:	6025      	str	r5, [r4, #0]
 80222ea:	e004      	b.n	80222f6 <_malloc_r+0x72>
 80222ec:	6863      	ldr	r3, [r4, #4]
 80222ee:	42a2      	cmp	r2, r4
 80222f0:	bf0c      	ite	eq
 80222f2:	600b      	streq	r3, [r1, #0]
 80222f4:	6053      	strne	r3, [r2, #4]
 80222f6:	4630      	mov	r0, r6
 80222f8:	f000 fb40 	bl	802297c <__malloc_unlock>
 80222fc:	f104 000b 	add.w	r0, r4, #11
 8022300:	1d23      	adds	r3, r4, #4
 8022302:	f020 0007 	bic.w	r0, r0, #7
 8022306:	1ac2      	subs	r2, r0, r3
 8022308:	d0cc      	beq.n	80222a4 <_malloc_r+0x20>
 802230a:	1a1b      	subs	r3, r3, r0
 802230c:	50a3      	str	r3, [r4, r2]
 802230e:	e7c9      	b.n	80222a4 <_malloc_r+0x20>
 8022310:	4622      	mov	r2, r4
 8022312:	6864      	ldr	r4, [r4, #4]
 8022314:	e7cc      	b.n	80222b0 <_malloc_r+0x2c>
 8022316:	1cc4      	adds	r4, r0, #3
 8022318:	f024 0403 	bic.w	r4, r4, #3
 802231c:	42a0      	cmp	r0, r4
 802231e:	d0e3      	beq.n	80222e8 <_malloc_r+0x64>
 8022320:	1a21      	subs	r1, r4, r0
 8022322:	4630      	mov	r0, r6
 8022324:	f000 faf8 	bl	8022918 <_sbrk_r>
 8022328:	3001      	adds	r0, #1
 802232a:	d1dd      	bne.n	80222e8 <_malloc_r+0x64>
 802232c:	e7cf      	b.n	80222ce <_malloc_r+0x4a>
 802232e:	bf00      	nop
 8022330:	200000a4 	.word	0x200000a4
 8022334:	200000a8 	.word	0x200000a8

08022338 <__ssputs_r>:
 8022338:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802233c:	688e      	ldr	r6, [r1, #8]
 802233e:	429e      	cmp	r6, r3
 8022340:	4682      	mov	sl, r0
 8022342:	460c      	mov	r4, r1
 8022344:	4690      	mov	r8, r2
 8022346:	461f      	mov	r7, r3
 8022348:	d838      	bhi.n	80223bc <__ssputs_r+0x84>
 802234a:	898a      	ldrh	r2, [r1, #12]
 802234c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8022350:	d032      	beq.n	80223b8 <__ssputs_r+0x80>
 8022352:	6825      	ldr	r5, [r4, #0]
 8022354:	6909      	ldr	r1, [r1, #16]
 8022356:	eba5 0901 	sub.w	r9, r5, r1
 802235a:	6965      	ldr	r5, [r4, #20]
 802235c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8022360:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8022364:	3301      	adds	r3, #1
 8022366:	444b      	add	r3, r9
 8022368:	106d      	asrs	r5, r5, #1
 802236a:	429d      	cmp	r5, r3
 802236c:	bf38      	it	cc
 802236e:	461d      	movcc	r5, r3
 8022370:	0553      	lsls	r3, r2, #21
 8022372:	d531      	bpl.n	80223d8 <__ssputs_r+0xa0>
 8022374:	4629      	mov	r1, r5
 8022376:	f7ff ff85 	bl	8022284 <_malloc_r>
 802237a:	4606      	mov	r6, r0
 802237c:	b950      	cbnz	r0, 8022394 <__ssputs_r+0x5c>
 802237e:	230c      	movs	r3, #12
 8022380:	f8ca 3000 	str.w	r3, [sl]
 8022384:	89a3      	ldrh	r3, [r4, #12]
 8022386:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802238a:	81a3      	strh	r3, [r4, #12]
 802238c:	f04f 30ff 	mov.w	r0, #4294967295
 8022390:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8022394:	6921      	ldr	r1, [r4, #16]
 8022396:	464a      	mov	r2, r9
 8022398:	f7ff fec6 	bl	8022128 <memcpy>
 802239c:	89a3      	ldrh	r3, [r4, #12]
 802239e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80223a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80223a6:	81a3      	strh	r3, [r4, #12]
 80223a8:	6126      	str	r6, [r4, #16]
 80223aa:	6165      	str	r5, [r4, #20]
 80223ac:	444e      	add	r6, r9
 80223ae:	eba5 0509 	sub.w	r5, r5, r9
 80223b2:	6026      	str	r6, [r4, #0]
 80223b4:	60a5      	str	r5, [r4, #8]
 80223b6:	463e      	mov	r6, r7
 80223b8:	42be      	cmp	r6, r7
 80223ba:	d900      	bls.n	80223be <__ssputs_r+0x86>
 80223bc:	463e      	mov	r6, r7
 80223be:	4632      	mov	r2, r6
 80223c0:	6820      	ldr	r0, [r4, #0]
 80223c2:	4641      	mov	r1, r8
 80223c4:	f000 faba 	bl	802293c <memmove>
 80223c8:	68a3      	ldr	r3, [r4, #8]
 80223ca:	6822      	ldr	r2, [r4, #0]
 80223cc:	1b9b      	subs	r3, r3, r6
 80223ce:	4432      	add	r2, r6
 80223d0:	60a3      	str	r3, [r4, #8]
 80223d2:	6022      	str	r2, [r4, #0]
 80223d4:	2000      	movs	r0, #0
 80223d6:	e7db      	b.n	8022390 <__ssputs_r+0x58>
 80223d8:	462a      	mov	r2, r5
 80223da:	f000 fad5 	bl	8022988 <_realloc_r>
 80223de:	4606      	mov	r6, r0
 80223e0:	2800      	cmp	r0, #0
 80223e2:	d1e1      	bne.n	80223a8 <__ssputs_r+0x70>
 80223e4:	6921      	ldr	r1, [r4, #16]
 80223e6:	4650      	mov	r0, sl
 80223e8:	f7ff fefc 	bl	80221e4 <_free_r>
 80223ec:	e7c7      	b.n	802237e <__ssputs_r+0x46>
	...

080223f0 <_svfiprintf_r>:
 80223f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80223f4:	4698      	mov	r8, r3
 80223f6:	898b      	ldrh	r3, [r1, #12]
 80223f8:	061b      	lsls	r3, r3, #24
 80223fa:	b09d      	sub	sp, #116	; 0x74
 80223fc:	4607      	mov	r7, r0
 80223fe:	460d      	mov	r5, r1
 8022400:	4614      	mov	r4, r2
 8022402:	d50e      	bpl.n	8022422 <_svfiprintf_r+0x32>
 8022404:	690b      	ldr	r3, [r1, #16]
 8022406:	b963      	cbnz	r3, 8022422 <_svfiprintf_r+0x32>
 8022408:	2140      	movs	r1, #64	; 0x40
 802240a:	f7ff ff3b 	bl	8022284 <_malloc_r>
 802240e:	6028      	str	r0, [r5, #0]
 8022410:	6128      	str	r0, [r5, #16]
 8022412:	b920      	cbnz	r0, 802241e <_svfiprintf_r+0x2e>
 8022414:	230c      	movs	r3, #12
 8022416:	603b      	str	r3, [r7, #0]
 8022418:	f04f 30ff 	mov.w	r0, #4294967295
 802241c:	e0d1      	b.n	80225c2 <_svfiprintf_r+0x1d2>
 802241e:	2340      	movs	r3, #64	; 0x40
 8022420:	616b      	str	r3, [r5, #20]
 8022422:	2300      	movs	r3, #0
 8022424:	9309      	str	r3, [sp, #36]	; 0x24
 8022426:	2320      	movs	r3, #32
 8022428:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 802242c:	f8cd 800c 	str.w	r8, [sp, #12]
 8022430:	2330      	movs	r3, #48	; 0x30
 8022432:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80225dc <_svfiprintf_r+0x1ec>
 8022436:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 802243a:	f04f 0901 	mov.w	r9, #1
 802243e:	4623      	mov	r3, r4
 8022440:	469a      	mov	sl, r3
 8022442:	f813 2b01 	ldrb.w	r2, [r3], #1
 8022446:	b10a      	cbz	r2, 802244c <_svfiprintf_r+0x5c>
 8022448:	2a25      	cmp	r2, #37	; 0x25
 802244a:	d1f9      	bne.n	8022440 <_svfiprintf_r+0x50>
 802244c:	ebba 0b04 	subs.w	fp, sl, r4
 8022450:	d00b      	beq.n	802246a <_svfiprintf_r+0x7a>
 8022452:	465b      	mov	r3, fp
 8022454:	4622      	mov	r2, r4
 8022456:	4629      	mov	r1, r5
 8022458:	4638      	mov	r0, r7
 802245a:	f7ff ff6d 	bl	8022338 <__ssputs_r>
 802245e:	3001      	adds	r0, #1
 8022460:	f000 80aa 	beq.w	80225b8 <_svfiprintf_r+0x1c8>
 8022464:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8022466:	445a      	add	r2, fp
 8022468:	9209      	str	r2, [sp, #36]	; 0x24
 802246a:	f89a 3000 	ldrb.w	r3, [sl]
 802246e:	2b00      	cmp	r3, #0
 8022470:	f000 80a2 	beq.w	80225b8 <_svfiprintf_r+0x1c8>
 8022474:	2300      	movs	r3, #0
 8022476:	f04f 32ff 	mov.w	r2, #4294967295
 802247a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 802247e:	f10a 0a01 	add.w	sl, sl, #1
 8022482:	9304      	str	r3, [sp, #16]
 8022484:	9307      	str	r3, [sp, #28]
 8022486:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 802248a:	931a      	str	r3, [sp, #104]	; 0x68
 802248c:	4654      	mov	r4, sl
 802248e:	2205      	movs	r2, #5
 8022490:	f814 1b01 	ldrb.w	r1, [r4], #1
 8022494:	4851      	ldr	r0, [pc, #324]	; (80225dc <_svfiprintf_r+0x1ec>)
 8022496:	f7dd feab 	bl	80001f0 <memchr>
 802249a:	9a04      	ldr	r2, [sp, #16]
 802249c:	b9d8      	cbnz	r0, 80224d6 <_svfiprintf_r+0xe6>
 802249e:	06d0      	lsls	r0, r2, #27
 80224a0:	bf44      	itt	mi
 80224a2:	2320      	movmi	r3, #32
 80224a4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80224a8:	0711      	lsls	r1, r2, #28
 80224aa:	bf44      	itt	mi
 80224ac:	232b      	movmi	r3, #43	; 0x2b
 80224ae:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80224b2:	f89a 3000 	ldrb.w	r3, [sl]
 80224b6:	2b2a      	cmp	r3, #42	; 0x2a
 80224b8:	d015      	beq.n	80224e6 <_svfiprintf_r+0xf6>
 80224ba:	9a07      	ldr	r2, [sp, #28]
 80224bc:	4654      	mov	r4, sl
 80224be:	2000      	movs	r0, #0
 80224c0:	f04f 0c0a 	mov.w	ip, #10
 80224c4:	4621      	mov	r1, r4
 80224c6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80224ca:	3b30      	subs	r3, #48	; 0x30
 80224cc:	2b09      	cmp	r3, #9
 80224ce:	d94e      	bls.n	802256e <_svfiprintf_r+0x17e>
 80224d0:	b1b0      	cbz	r0, 8022500 <_svfiprintf_r+0x110>
 80224d2:	9207      	str	r2, [sp, #28]
 80224d4:	e014      	b.n	8022500 <_svfiprintf_r+0x110>
 80224d6:	eba0 0308 	sub.w	r3, r0, r8
 80224da:	fa09 f303 	lsl.w	r3, r9, r3
 80224de:	4313      	orrs	r3, r2
 80224e0:	9304      	str	r3, [sp, #16]
 80224e2:	46a2      	mov	sl, r4
 80224e4:	e7d2      	b.n	802248c <_svfiprintf_r+0x9c>
 80224e6:	9b03      	ldr	r3, [sp, #12]
 80224e8:	1d19      	adds	r1, r3, #4
 80224ea:	681b      	ldr	r3, [r3, #0]
 80224ec:	9103      	str	r1, [sp, #12]
 80224ee:	2b00      	cmp	r3, #0
 80224f0:	bfbb      	ittet	lt
 80224f2:	425b      	neglt	r3, r3
 80224f4:	f042 0202 	orrlt.w	r2, r2, #2
 80224f8:	9307      	strge	r3, [sp, #28]
 80224fa:	9307      	strlt	r3, [sp, #28]
 80224fc:	bfb8      	it	lt
 80224fe:	9204      	strlt	r2, [sp, #16]
 8022500:	7823      	ldrb	r3, [r4, #0]
 8022502:	2b2e      	cmp	r3, #46	; 0x2e
 8022504:	d10c      	bne.n	8022520 <_svfiprintf_r+0x130>
 8022506:	7863      	ldrb	r3, [r4, #1]
 8022508:	2b2a      	cmp	r3, #42	; 0x2a
 802250a:	d135      	bne.n	8022578 <_svfiprintf_r+0x188>
 802250c:	9b03      	ldr	r3, [sp, #12]
 802250e:	1d1a      	adds	r2, r3, #4
 8022510:	681b      	ldr	r3, [r3, #0]
 8022512:	9203      	str	r2, [sp, #12]
 8022514:	2b00      	cmp	r3, #0
 8022516:	bfb8      	it	lt
 8022518:	f04f 33ff 	movlt.w	r3, #4294967295
 802251c:	3402      	adds	r4, #2
 802251e:	9305      	str	r3, [sp, #20]
 8022520:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80225ec <_svfiprintf_r+0x1fc>
 8022524:	7821      	ldrb	r1, [r4, #0]
 8022526:	2203      	movs	r2, #3
 8022528:	4650      	mov	r0, sl
 802252a:	f7dd fe61 	bl	80001f0 <memchr>
 802252e:	b140      	cbz	r0, 8022542 <_svfiprintf_r+0x152>
 8022530:	2340      	movs	r3, #64	; 0x40
 8022532:	eba0 000a 	sub.w	r0, r0, sl
 8022536:	fa03 f000 	lsl.w	r0, r3, r0
 802253a:	9b04      	ldr	r3, [sp, #16]
 802253c:	4303      	orrs	r3, r0
 802253e:	3401      	adds	r4, #1
 8022540:	9304      	str	r3, [sp, #16]
 8022542:	f814 1b01 	ldrb.w	r1, [r4], #1
 8022546:	4826      	ldr	r0, [pc, #152]	; (80225e0 <_svfiprintf_r+0x1f0>)
 8022548:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 802254c:	2206      	movs	r2, #6
 802254e:	f7dd fe4f 	bl	80001f0 <memchr>
 8022552:	2800      	cmp	r0, #0
 8022554:	d038      	beq.n	80225c8 <_svfiprintf_r+0x1d8>
 8022556:	4b23      	ldr	r3, [pc, #140]	; (80225e4 <_svfiprintf_r+0x1f4>)
 8022558:	bb1b      	cbnz	r3, 80225a2 <_svfiprintf_r+0x1b2>
 802255a:	9b03      	ldr	r3, [sp, #12]
 802255c:	3307      	adds	r3, #7
 802255e:	f023 0307 	bic.w	r3, r3, #7
 8022562:	3308      	adds	r3, #8
 8022564:	9303      	str	r3, [sp, #12]
 8022566:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8022568:	4433      	add	r3, r6
 802256a:	9309      	str	r3, [sp, #36]	; 0x24
 802256c:	e767      	b.n	802243e <_svfiprintf_r+0x4e>
 802256e:	fb0c 3202 	mla	r2, ip, r2, r3
 8022572:	460c      	mov	r4, r1
 8022574:	2001      	movs	r0, #1
 8022576:	e7a5      	b.n	80224c4 <_svfiprintf_r+0xd4>
 8022578:	2300      	movs	r3, #0
 802257a:	3401      	adds	r4, #1
 802257c:	9305      	str	r3, [sp, #20]
 802257e:	4619      	mov	r1, r3
 8022580:	f04f 0c0a 	mov.w	ip, #10
 8022584:	4620      	mov	r0, r4
 8022586:	f810 2b01 	ldrb.w	r2, [r0], #1
 802258a:	3a30      	subs	r2, #48	; 0x30
 802258c:	2a09      	cmp	r2, #9
 802258e:	d903      	bls.n	8022598 <_svfiprintf_r+0x1a8>
 8022590:	2b00      	cmp	r3, #0
 8022592:	d0c5      	beq.n	8022520 <_svfiprintf_r+0x130>
 8022594:	9105      	str	r1, [sp, #20]
 8022596:	e7c3      	b.n	8022520 <_svfiprintf_r+0x130>
 8022598:	fb0c 2101 	mla	r1, ip, r1, r2
 802259c:	4604      	mov	r4, r0
 802259e:	2301      	movs	r3, #1
 80225a0:	e7f0      	b.n	8022584 <_svfiprintf_r+0x194>
 80225a2:	ab03      	add	r3, sp, #12
 80225a4:	9300      	str	r3, [sp, #0]
 80225a6:	462a      	mov	r2, r5
 80225a8:	4b0f      	ldr	r3, [pc, #60]	; (80225e8 <_svfiprintf_r+0x1f8>)
 80225aa:	a904      	add	r1, sp, #16
 80225ac:	4638      	mov	r0, r7
 80225ae:	f3af 8000 	nop.w
 80225b2:	1c42      	adds	r2, r0, #1
 80225b4:	4606      	mov	r6, r0
 80225b6:	d1d6      	bne.n	8022566 <_svfiprintf_r+0x176>
 80225b8:	89ab      	ldrh	r3, [r5, #12]
 80225ba:	065b      	lsls	r3, r3, #25
 80225bc:	f53f af2c 	bmi.w	8022418 <_svfiprintf_r+0x28>
 80225c0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80225c2:	b01d      	add	sp, #116	; 0x74
 80225c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80225c8:	ab03      	add	r3, sp, #12
 80225ca:	9300      	str	r3, [sp, #0]
 80225cc:	462a      	mov	r2, r5
 80225ce:	4b06      	ldr	r3, [pc, #24]	; (80225e8 <_svfiprintf_r+0x1f8>)
 80225d0:	a904      	add	r1, sp, #16
 80225d2:	4638      	mov	r0, r7
 80225d4:	f000 f87a 	bl	80226cc <_printf_i>
 80225d8:	e7eb      	b.n	80225b2 <_svfiprintf_r+0x1c2>
 80225da:	bf00      	nop
 80225dc:	0802d234 	.word	0x0802d234
 80225e0:	0802d23e 	.word	0x0802d23e
 80225e4:	00000000 	.word	0x00000000
 80225e8:	08022339 	.word	0x08022339
 80225ec:	0802d23a 	.word	0x0802d23a

080225f0 <_printf_common>:
 80225f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80225f4:	4616      	mov	r6, r2
 80225f6:	4699      	mov	r9, r3
 80225f8:	688a      	ldr	r2, [r1, #8]
 80225fa:	690b      	ldr	r3, [r1, #16]
 80225fc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8022600:	4293      	cmp	r3, r2
 8022602:	bfb8      	it	lt
 8022604:	4613      	movlt	r3, r2
 8022606:	6033      	str	r3, [r6, #0]
 8022608:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 802260c:	4607      	mov	r7, r0
 802260e:	460c      	mov	r4, r1
 8022610:	b10a      	cbz	r2, 8022616 <_printf_common+0x26>
 8022612:	3301      	adds	r3, #1
 8022614:	6033      	str	r3, [r6, #0]
 8022616:	6823      	ldr	r3, [r4, #0]
 8022618:	0699      	lsls	r1, r3, #26
 802261a:	bf42      	ittt	mi
 802261c:	6833      	ldrmi	r3, [r6, #0]
 802261e:	3302      	addmi	r3, #2
 8022620:	6033      	strmi	r3, [r6, #0]
 8022622:	6825      	ldr	r5, [r4, #0]
 8022624:	f015 0506 	ands.w	r5, r5, #6
 8022628:	d106      	bne.n	8022638 <_printf_common+0x48>
 802262a:	f104 0a19 	add.w	sl, r4, #25
 802262e:	68e3      	ldr	r3, [r4, #12]
 8022630:	6832      	ldr	r2, [r6, #0]
 8022632:	1a9b      	subs	r3, r3, r2
 8022634:	42ab      	cmp	r3, r5
 8022636:	dc26      	bgt.n	8022686 <_printf_common+0x96>
 8022638:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 802263c:	1e13      	subs	r3, r2, #0
 802263e:	6822      	ldr	r2, [r4, #0]
 8022640:	bf18      	it	ne
 8022642:	2301      	movne	r3, #1
 8022644:	0692      	lsls	r2, r2, #26
 8022646:	d42b      	bmi.n	80226a0 <_printf_common+0xb0>
 8022648:	f104 0243 	add.w	r2, r4, #67	; 0x43
 802264c:	4649      	mov	r1, r9
 802264e:	4638      	mov	r0, r7
 8022650:	47c0      	blx	r8
 8022652:	3001      	adds	r0, #1
 8022654:	d01e      	beq.n	8022694 <_printf_common+0xa4>
 8022656:	6823      	ldr	r3, [r4, #0]
 8022658:	68e5      	ldr	r5, [r4, #12]
 802265a:	6832      	ldr	r2, [r6, #0]
 802265c:	f003 0306 	and.w	r3, r3, #6
 8022660:	2b04      	cmp	r3, #4
 8022662:	bf08      	it	eq
 8022664:	1aad      	subeq	r5, r5, r2
 8022666:	68a3      	ldr	r3, [r4, #8]
 8022668:	6922      	ldr	r2, [r4, #16]
 802266a:	bf0c      	ite	eq
 802266c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8022670:	2500      	movne	r5, #0
 8022672:	4293      	cmp	r3, r2
 8022674:	bfc4      	itt	gt
 8022676:	1a9b      	subgt	r3, r3, r2
 8022678:	18ed      	addgt	r5, r5, r3
 802267a:	2600      	movs	r6, #0
 802267c:	341a      	adds	r4, #26
 802267e:	42b5      	cmp	r5, r6
 8022680:	d11a      	bne.n	80226b8 <_printf_common+0xc8>
 8022682:	2000      	movs	r0, #0
 8022684:	e008      	b.n	8022698 <_printf_common+0xa8>
 8022686:	2301      	movs	r3, #1
 8022688:	4652      	mov	r2, sl
 802268a:	4649      	mov	r1, r9
 802268c:	4638      	mov	r0, r7
 802268e:	47c0      	blx	r8
 8022690:	3001      	adds	r0, #1
 8022692:	d103      	bne.n	802269c <_printf_common+0xac>
 8022694:	f04f 30ff 	mov.w	r0, #4294967295
 8022698:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802269c:	3501      	adds	r5, #1
 802269e:	e7c6      	b.n	802262e <_printf_common+0x3e>
 80226a0:	18e1      	adds	r1, r4, r3
 80226a2:	1c5a      	adds	r2, r3, #1
 80226a4:	2030      	movs	r0, #48	; 0x30
 80226a6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80226aa:	4422      	add	r2, r4
 80226ac:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80226b0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80226b4:	3302      	adds	r3, #2
 80226b6:	e7c7      	b.n	8022648 <_printf_common+0x58>
 80226b8:	2301      	movs	r3, #1
 80226ba:	4622      	mov	r2, r4
 80226bc:	4649      	mov	r1, r9
 80226be:	4638      	mov	r0, r7
 80226c0:	47c0      	blx	r8
 80226c2:	3001      	adds	r0, #1
 80226c4:	d0e6      	beq.n	8022694 <_printf_common+0xa4>
 80226c6:	3601      	adds	r6, #1
 80226c8:	e7d9      	b.n	802267e <_printf_common+0x8e>
	...

080226cc <_printf_i>:
 80226cc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80226d0:	460c      	mov	r4, r1
 80226d2:	4691      	mov	r9, r2
 80226d4:	7e27      	ldrb	r7, [r4, #24]
 80226d6:	990c      	ldr	r1, [sp, #48]	; 0x30
 80226d8:	2f78      	cmp	r7, #120	; 0x78
 80226da:	4680      	mov	r8, r0
 80226dc:	469a      	mov	sl, r3
 80226de:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80226e2:	d807      	bhi.n	80226f4 <_printf_i+0x28>
 80226e4:	2f62      	cmp	r7, #98	; 0x62
 80226e6:	d80a      	bhi.n	80226fe <_printf_i+0x32>
 80226e8:	2f00      	cmp	r7, #0
 80226ea:	f000 80d8 	beq.w	802289e <_printf_i+0x1d2>
 80226ee:	2f58      	cmp	r7, #88	; 0x58
 80226f0:	f000 80a3 	beq.w	802283a <_printf_i+0x16e>
 80226f4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80226f8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80226fc:	e03a      	b.n	8022774 <_printf_i+0xa8>
 80226fe:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8022702:	2b15      	cmp	r3, #21
 8022704:	d8f6      	bhi.n	80226f4 <_printf_i+0x28>
 8022706:	a001      	add	r0, pc, #4	; (adr r0, 802270c <_printf_i+0x40>)
 8022708:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 802270c:	08022765 	.word	0x08022765
 8022710:	08022779 	.word	0x08022779
 8022714:	080226f5 	.word	0x080226f5
 8022718:	080226f5 	.word	0x080226f5
 802271c:	080226f5 	.word	0x080226f5
 8022720:	080226f5 	.word	0x080226f5
 8022724:	08022779 	.word	0x08022779
 8022728:	080226f5 	.word	0x080226f5
 802272c:	080226f5 	.word	0x080226f5
 8022730:	080226f5 	.word	0x080226f5
 8022734:	080226f5 	.word	0x080226f5
 8022738:	08022885 	.word	0x08022885
 802273c:	080227a9 	.word	0x080227a9
 8022740:	08022867 	.word	0x08022867
 8022744:	080226f5 	.word	0x080226f5
 8022748:	080226f5 	.word	0x080226f5
 802274c:	080228a7 	.word	0x080228a7
 8022750:	080226f5 	.word	0x080226f5
 8022754:	080227a9 	.word	0x080227a9
 8022758:	080226f5 	.word	0x080226f5
 802275c:	080226f5 	.word	0x080226f5
 8022760:	0802286f 	.word	0x0802286f
 8022764:	680b      	ldr	r3, [r1, #0]
 8022766:	1d1a      	adds	r2, r3, #4
 8022768:	681b      	ldr	r3, [r3, #0]
 802276a:	600a      	str	r2, [r1, #0]
 802276c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8022770:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8022774:	2301      	movs	r3, #1
 8022776:	e0a3      	b.n	80228c0 <_printf_i+0x1f4>
 8022778:	6825      	ldr	r5, [r4, #0]
 802277a:	6808      	ldr	r0, [r1, #0]
 802277c:	062e      	lsls	r6, r5, #24
 802277e:	f100 0304 	add.w	r3, r0, #4
 8022782:	d50a      	bpl.n	802279a <_printf_i+0xce>
 8022784:	6805      	ldr	r5, [r0, #0]
 8022786:	600b      	str	r3, [r1, #0]
 8022788:	2d00      	cmp	r5, #0
 802278a:	da03      	bge.n	8022794 <_printf_i+0xc8>
 802278c:	232d      	movs	r3, #45	; 0x2d
 802278e:	426d      	negs	r5, r5
 8022790:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8022794:	485e      	ldr	r0, [pc, #376]	; (8022910 <_printf_i+0x244>)
 8022796:	230a      	movs	r3, #10
 8022798:	e019      	b.n	80227ce <_printf_i+0x102>
 802279a:	f015 0f40 	tst.w	r5, #64	; 0x40
 802279e:	6805      	ldr	r5, [r0, #0]
 80227a0:	600b      	str	r3, [r1, #0]
 80227a2:	bf18      	it	ne
 80227a4:	b22d      	sxthne	r5, r5
 80227a6:	e7ef      	b.n	8022788 <_printf_i+0xbc>
 80227a8:	680b      	ldr	r3, [r1, #0]
 80227aa:	6825      	ldr	r5, [r4, #0]
 80227ac:	1d18      	adds	r0, r3, #4
 80227ae:	6008      	str	r0, [r1, #0]
 80227b0:	0628      	lsls	r0, r5, #24
 80227b2:	d501      	bpl.n	80227b8 <_printf_i+0xec>
 80227b4:	681d      	ldr	r5, [r3, #0]
 80227b6:	e002      	b.n	80227be <_printf_i+0xf2>
 80227b8:	0669      	lsls	r1, r5, #25
 80227ba:	d5fb      	bpl.n	80227b4 <_printf_i+0xe8>
 80227bc:	881d      	ldrh	r5, [r3, #0]
 80227be:	4854      	ldr	r0, [pc, #336]	; (8022910 <_printf_i+0x244>)
 80227c0:	2f6f      	cmp	r7, #111	; 0x6f
 80227c2:	bf0c      	ite	eq
 80227c4:	2308      	moveq	r3, #8
 80227c6:	230a      	movne	r3, #10
 80227c8:	2100      	movs	r1, #0
 80227ca:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80227ce:	6866      	ldr	r6, [r4, #4]
 80227d0:	60a6      	str	r6, [r4, #8]
 80227d2:	2e00      	cmp	r6, #0
 80227d4:	bfa2      	ittt	ge
 80227d6:	6821      	ldrge	r1, [r4, #0]
 80227d8:	f021 0104 	bicge.w	r1, r1, #4
 80227dc:	6021      	strge	r1, [r4, #0]
 80227de:	b90d      	cbnz	r5, 80227e4 <_printf_i+0x118>
 80227e0:	2e00      	cmp	r6, #0
 80227e2:	d04d      	beq.n	8022880 <_printf_i+0x1b4>
 80227e4:	4616      	mov	r6, r2
 80227e6:	fbb5 f1f3 	udiv	r1, r5, r3
 80227ea:	fb03 5711 	mls	r7, r3, r1, r5
 80227ee:	5dc7      	ldrb	r7, [r0, r7]
 80227f0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80227f4:	462f      	mov	r7, r5
 80227f6:	42bb      	cmp	r3, r7
 80227f8:	460d      	mov	r5, r1
 80227fa:	d9f4      	bls.n	80227e6 <_printf_i+0x11a>
 80227fc:	2b08      	cmp	r3, #8
 80227fe:	d10b      	bne.n	8022818 <_printf_i+0x14c>
 8022800:	6823      	ldr	r3, [r4, #0]
 8022802:	07df      	lsls	r7, r3, #31
 8022804:	d508      	bpl.n	8022818 <_printf_i+0x14c>
 8022806:	6923      	ldr	r3, [r4, #16]
 8022808:	6861      	ldr	r1, [r4, #4]
 802280a:	4299      	cmp	r1, r3
 802280c:	bfde      	ittt	le
 802280e:	2330      	movle	r3, #48	; 0x30
 8022810:	f806 3c01 	strble.w	r3, [r6, #-1]
 8022814:	f106 36ff 	addle.w	r6, r6, #4294967295
 8022818:	1b92      	subs	r2, r2, r6
 802281a:	6122      	str	r2, [r4, #16]
 802281c:	f8cd a000 	str.w	sl, [sp]
 8022820:	464b      	mov	r3, r9
 8022822:	aa03      	add	r2, sp, #12
 8022824:	4621      	mov	r1, r4
 8022826:	4640      	mov	r0, r8
 8022828:	f7ff fee2 	bl	80225f0 <_printf_common>
 802282c:	3001      	adds	r0, #1
 802282e:	d14c      	bne.n	80228ca <_printf_i+0x1fe>
 8022830:	f04f 30ff 	mov.w	r0, #4294967295
 8022834:	b004      	add	sp, #16
 8022836:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802283a:	4835      	ldr	r0, [pc, #212]	; (8022910 <_printf_i+0x244>)
 802283c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8022840:	6823      	ldr	r3, [r4, #0]
 8022842:	680e      	ldr	r6, [r1, #0]
 8022844:	061f      	lsls	r7, r3, #24
 8022846:	f856 5b04 	ldr.w	r5, [r6], #4
 802284a:	600e      	str	r6, [r1, #0]
 802284c:	d514      	bpl.n	8022878 <_printf_i+0x1ac>
 802284e:	07d9      	lsls	r1, r3, #31
 8022850:	bf44      	itt	mi
 8022852:	f043 0320 	orrmi.w	r3, r3, #32
 8022856:	6023      	strmi	r3, [r4, #0]
 8022858:	b91d      	cbnz	r5, 8022862 <_printf_i+0x196>
 802285a:	6823      	ldr	r3, [r4, #0]
 802285c:	f023 0320 	bic.w	r3, r3, #32
 8022860:	6023      	str	r3, [r4, #0]
 8022862:	2310      	movs	r3, #16
 8022864:	e7b0      	b.n	80227c8 <_printf_i+0xfc>
 8022866:	6823      	ldr	r3, [r4, #0]
 8022868:	f043 0320 	orr.w	r3, r3, #32
 802286c:	6023      	str	r3, [r4, #0]
 802286e:	2378      	movs	r3, #120	; 0x78
 8022870:	4828      	ldr	r0, [pc, #160]	; (8022914 <_printf_i+0x248>)
 8022872:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8022876:	e7e3      	b.n	8022840 <_printf_i+0x174>
 8022878:	065e      	lsls	r6, r3, #25
 802287a:	bf48      	it	mi
 802287c:	b2ad      	uxthmi	r5, r5
 802287e:	e7e6      	b.n	802284e <_printf_i+0x182>
 8022880:	4616      	mov	r6, r2
 8022882:	e7bb      	b.n	80227fc <_printf_i+0x130>
 8022884:	680b      	ldr	r3, [r1, #0]
 8022886:	6826      	ldr	r6, [r4, #0]
 8022888:	6960      	ldr	r0, [r4, #20]
 802288a:	1d1d      	adds	r5, r3, #4
 802288c:	600d      	str	r5, [r1, #0]
 802288e:	0635      	lsls	r5, r6, #24
 8022890:	681b      	ldr	r3, [r3, #0]
 8022892:	d501      	bpl.n	8022898 <_printf_i+0x1cc>
 8022894:	6018      	str	r0, [r3, #0]
 8022896:	e002      	b.n	802289e <_printf_i+0x1d2>
 8022898:	0671      	lsls	r1, r6, #25
 802289a:	d5fb      	bpl.n	8022894 <_printf_i+0x1c8>
 802289c:	8018      	strh	r0, [r3, #0]
 802289e:	2300      	movs	r3, #0
 80228a0:	6123      	str	r3, [r4, #16]
 80228a2:	4616      	mov	r6, r2
 80228a4:	e7ba      	b.n	802281c <_printf_i+0x150>
 80228a6:	680b      	ldr	r3, [r1, #0]
 80228a8:	1d1a      	adds	r2, r3, #4
 80228aa:	600a      	str	r2, [r1, #0]
 80228ac:	681e      	ldr	r6, [r3, #0]
 80228ae:	6862      	ldr	r2, [r4, #4]
 80228b0:	2100      	movs	r1, #0
 80228b2:	4630      	mov	r0, r6
 80228b4:	f7dd fc9c 	bl	80001f0 <memchr>
 80228b8:	b108      	cbz	r0, 80228be <_printf_i+0x1f2>
 80228ba:	1b80      	subs	r0, r0, r6
 80228bc:	6060      	str	r0, [r4, #4]
 80228be:	6863      	ldr	r3, [r4, #4]
 80228c0:	6123      	str	r3, [r4, #16]
 80228c2:	2300      	movs	r3, #0
 80228c4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80228c8:	e7a8      	b.n	802281c <_printf_i+0x150>
 80228ca:	6923      	ldr	r3, [r4, #16]
 80228cc:	4632      	mov	r2, r6
 80228ce:	4649      	mov	r1, r9
 80228d0:	4640      	mov	r0, r8
 80228d2:	47d0      	blx	sl
 80228d4:	3001      	adds	r0, #1
 80228d6:	d0ab      	beq.n	8022830 <_printf_i+0x164>
 80228d8:	6823      	ldr	r3, [r4, #0]
 80228da:	079b      	lsls	r3, r3, #30
 80228dc:	d413      	bmi.n	8022906 <_printf_i+0x23a>
 80228de:	68e0      	ldr	r0, [r4, #12]
 80228e0:	9b03      	ldr	r3, [sp, #12]
 80228e2:	4298      	cmp	r0, r3
 80228e4:	bfb8      	it	lt
 80228e6:	4618      	movlt	r0, r3
 80228e8:	e7a4      	b.n	8022834 <_printf_i+0x168>
 80228ea:	2301      	movs	r3, #1
 80228ec:	4632      	mov	r2, r6
 80228ee:	4649      	mov	r1, r9
 80228f0:	4640      	mov	r0, r8
 80228f2:	47d0      	blx	sl
 80228f4:	3001      	adds	r0, #1
 80228f6:	d09b      	beq.n	8022830 <_printf_i+0x164>
 80228f8:	3501      	adds	r5, #1
 80228fa:	68e3      	ldr	r3, [r4, #12]
 80228fc:	9903      	ldr	r1, [sp, #12]
 80228fe:	1a5b      	subs	r3, r3, r1
 8022900:	42ab      	cmp	r3, r5
 8022902:	dcf2      	bgt.n	80228ea <_printf_i+0x21e>
 8022904:	e7eb      	b.n	80228de <_printf_i+0x212>
 8022906:	2500      	movs	r5, #0
 8022908:	f104 0619 	add.w	r6, r4, #25
 802290c:	e7f5      	b.n	80228fa <_printf_i+0x22e>
 802290e:	bf00      	nop
 8022910:	0802d245 	.word	0x0802d245
 8022914:	0802d256 	.word	0x0802d256

08022918 <_sbrk_r>:
 8022918:	b538      	push	{r3, r4, r5, lr}
 802291a:	4d06      	ldr	r5, [pc, #24]	; (8022934 <_sbrk_r+0x1c>)
 802291c:	2300      	movs	r3, #0
 802291e:	4604      	mov	r4, r0
 8022920:	4608      	mov	r0, r1
 8022922:	602b      	str	r3, [r5, #0]
 8022924:	f7fa fd3c 	bl	801d3a0 <_sbrk>
 8022928:	1c43      	adds	r3, r0, #1
 802292a:	d102      	bne.n	8022932 <_sbrk_r+0x1a>
 802292c:	682b      	ldr	r3, [r5, #0]
 802292e:	b103      	cbz	r3, 8022932 <_sbrk_r+0x1a>
 8022930:	6023      	str	r3, [r4, #0]
 8022932:	bd38      	pop	{r3, r4, r5, pc}
 8022934:	20005660 	.word	0x20005660

08022938 <__retarget_lock_acquire_recursive>:
 8022938:	4770      	bx	lr

0802293a <__retarget_lock_release_recursive>:
 802293a:	4770      	bx	lr

0802293c <memmove>:
 802293c:	4288      	cmp	r0, r1
 802293e:	b510      	push	{r4, lr}
 8022940:	eb01 0402 	add.w	r4, r1, r2
 8022944:	d902      	bls.n	802294c <memmove+0x10>
 8022946:	4284      	cmp	r4, r0
 8022948:	4623      	mov	r3, r4
 802294a:	d807      	bhi.n	802295c <memmove+0x20>
 802294c:	1e43      	subs	r3, r0, #1
 802294e:	42a1      	cmp	r1, r4
 8022950:	d008      	beq.n	8022964 <memmove+0x28>
 8022952:	f811 2b01 	ldrb.w	r2, [r1], #1
 8022956:	f803 2f01 	strb.w	r2, [r3, #1]!
 802295a:	e7f8      	b.n	802294e <memmove+0x12>
 802295c:	4402      	add	r2, r0
 802295e:	4601      	mov	r1, r0
 8022960:	428a      	cmp	r2, r1
 8022962:	d100      	bne.n	8022966 <memmove+0x2a>
 8022964:	bd10      	pop	{r4, pc}
 8022966:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 802296a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 802296e:	e7f7      	b.n	8022960 <memmove+0x24>

08022970 <__malloc_lock>:
 8022970:	4801      	ldr	r0, [pc, #4]	; (8022978 <__malloc_lock+0x8>)
 8022972:	f7ff bfe1 	b.w	8022938 <__retarget_lock_acquire_recursive>
 8022976:	bf00      	nop
 8022978:	20005658 	.word	0x20005658

0802297c <__malloc_unlock>:
 802297c:	4801      	ldr	r0, [pc, #4]	; (8022984 <__malloc_unlock+0x8>)
 802297e:	f7ff bfdc 	b.w	802293a <__retarget_lock_release_recursive>
 8022982:	bf00      	nop
 8022984:	20005658 	.word	0x20005658

08022988 <_realloc_r>:
 8022988:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802298a:	4607      	mov	r7, r0
 802298c:	4614      	mov	r4, r2
 802298e:	460e      	mov	r6, r1
 8022990:	b921      	cbnz	r1, 802299c <_realloc_r+0x14>
 8022992:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8022996:	4611      	mov	r1, r2
 8022998:	f7ff bc74 	b.w	8022284 <_malloc_r>
 802299c:	b922      	cbnz	r2, 80229a8 <_realloc_r+0x20>
 802299e:	f7ff fc21 	bl	80221e4 <_free_r>
 80229a2:	4625      	mov	r5, r4
 80229a4:	4628      	mov	r0, r5
 80229a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80229a8:	f000 f814 	bl	80229d4 <_malloc_usable_size_r>
 80229ac:	42a0      	cmp	r0, r4
 80229ae:	d20f      	bcs.n	80229d0 <_realloc_r+0x48>
 80229b0:	4621      	mov	r1, r4
 80229b2:	4638      	mov	r0, r7
 80229b4:	f7ff fc66 	bl	8022284 <_malloc_r>
 80229b8:	4605      	mov	r5, r0
 80229ba:	2800      	cmp	r0, #0
 80229bc:	d0f2      	beq.n	80229a4 <_realloc_r+0x1c>
 80229be:	4631      	mov	r1, r6
 80229c0:	4622      	mov	r2, r4
 80229c2:	f7ff fbb1 	bl	8022128 <memcpy>
 80229c6:	4631      	mov	r1, r6
 80229c8:	4638      	mov	r0, r7
 80229ca:	f7ff fc0b 	bl	80221e4 <_free_r>
 80229ce:	e7e9      	b.n	80229a4 <_realloc_r+0x1c>
 80229d0:	4635      	mov	r5, r6
 80229d2:	e7e7      	b.n	80229a4 <_realloc_r+0x1c>

080229d4 <_malloc_usable_size_r>:
 80229d4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80229d8:	1f18      	subs	r0, r3, #4
 80229da:	2b00      	cmp	r3, #0
 80229dc:	bfbc      	itt	lt
 80229de:	580b      	ldrlt	r3, [r1, r0]
 80229e0:	18c0      	addlt	r0, r0, r3
 80229e2:	4770      	bx	lr

080229e4 <pow>:
 80229e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80229e8:	ec59 8b10 	vmov	r8, r9, d0
 80229ec:	ec57 6b11 	vmov	r6, r7, d1
 80229f0:	f000 f8a6 	bl	8022b40 <__ieee754_pow>
 80229f4:	4b4e      	ldr	r3, [pc, #312]	; (8022b30 <pow+0x14c>)
 80229f6:	f993 3000 	ldrsb.w	r3, [r3]
 80229fa:	3301      	adds	r3, #1
 80229fc:	ec55 4b10 	vmov	r4, r5, d0
 8022a00:	d015      	beq.n	8022a2e <pow+0x4a>
 8022a02:	4632      	mov	r2, r6
 8022a04:	463b      	mov	r3, r7
 8022a06:	4630      	mov	r0, r6
 8022a08:	4639      	mov	r1, r7
 8022a0a:	f7de f897 	bl	8000b3c <__aeabi_dcmpun>
 8022a0e:	b970      	cbnz	r0, 8022a2e <pow+0x4a>
 8022a10:	4642      	mov	r2, r8
 8022a12:	464b      	mov	r3, r9
 8022a14:	4640      	mov	r0, r8
 8022a16:	4649      	mov	r1, r9
 8022a18:	f7de f890 	bl	8000b3c <__aeabi_dcmpun>
 8022a1c:	2200      	movs	r2, #0
 8022a1e:	2300      	movs	r3, #0
 8022a20:	b148      	cbz	r0, 8022a36 <pow+0x52>
 8022a22:	4630      	mov	r0, r6
 8022a24:	4639      	mov	r1, r7
 8022a26:	f7de f857 	bl	8000ad8 <__aeabi_dcmpeq>
 8022a2a:	2800      	cmp	r0, #0
 8022a2c:	d17d      	bne.n	8022b2a <pow+0x146>
 8022a2e:	ec45 4b10 	vmov	d0, r4, r5
 8022a32:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8022a36:	4640      	mov	r0, r8
 8022a38:	4649      	mov	r1, r9
 8022a3a:	f7de f84d 	bl	8000ad8 <__aeabi_dcmpeq>
 8022a3e:	b1e0      	cbz	r0, 8022a7a <pow+0x96>
 8022a40:	2200      	movs	r2, #0
 8022a42:	2300      	movs	r3, #0
 8022a44:	4630      	mov	r0, r6
 8022a46:	4639      	mov	r1, r7
 8022a48:	f7de f846 	bl	8000ad8 <__aeabi_dcmpeq>
 8022a4c:	2800      	cmp	r0, #0
 8022a4e:	d16c      	bne.n	8022b2a <pow+0x146>
 8022a50:	ec47 6b10 	vmov	d0, r6, r7
 8022a54:	f000 fe53 	bl	80236fe <finite>
 8022a58:	2800      	cmp	r0, #0
 8022a5a:	d0e8      	beq.n	8022a2e <pow+0x4a>
 8022a5c:	2200      	movs	r2, #0
 8022a5e:	2300      	movs	r3, #0
 8022a60:	4630      	mov	r0, r6
 8022a62:	4639      	mov	r1, r7
 8022a64:	f7de f842 	bl	8000aec <__aeabi_dcmplt>
 8022a68:	2800      	cmp	r0, #0
 8022a6a:	d0e0      	beq.n	8022a2e <pow+0x4a>
 8022a6c:	f7ff fb32 	bl	80220d4 <__errno>
 8022a70:	2321      	movs	r3, #33	; 0x21
 8022a72:	6003      	str	r3, [r0, #0]
 8022a74:	2400      	movs	r4, #0
 8022a76:	4d2f      	ldr	r5, [pc, #188]	; (8022b34 <pow+0x150>)
 8022a78:	e7d9      	b.n	8022a2e <pow+0x4a>
 8022a7a:	ec45 4b10 	vmov	d0, r4, r5
 8022a7e:	f000 fe3e 	bl	80236fe <finite>
 8022a82:	bbb8      	cbnz	r0, 8022af4 <pow+0x110>
 8022a84:	ec49 8b10 	vmov	d0, r8, r9
 8022a88:	f000 fe39 	bl	80236fe <finite>
 8022a8c:	b390      	cbz	r0, 8022af4 <pow+0x110>
 8022a8e:	ec47 6b10 	vmov	d0, r6, r7
 8022a92:	f000 fe34 	bl	80236fe <finite>
 8022a96:	b368      	cbz	r0, 8022af4 <pow+0x110>
 8022a98:	4622      	mov	r2, r4
 8022a9a:	462b      	mov	r3, r5
 8022a9c:	4620      	mov	r0, r4
 8022a9e:	4629      	mov	r1, r5
 8022aa0:	f7de f84c 	bl	8000b3c <__aeabi_dcmpun>
 8022aa4:	b160      	cbz	r0, 8022ac0 <pow+0xdc>
 8022aa6:	f7ff fb15 	bl	80220d4 <__errno>
 8022aaa:	2321      	movs	r3, #33	; 0x21
 8022aac:	6003      	str	r3, [r0, #0]
 8022aae:	2200      	movs	r2, #0
 8022ab0:	2300      	movs	r3, #0
 8022ab2:	4610      	mov	r0, r2
 8022ab4:	4619      	mov	r1, r3
 8022ab6:	f7dd fed1 	bl	800085c <__aeabi_ddiv>
 8022aba:	4604      	mov	r4, r0
 8022abc:	460d      	mov	r5, r1
 8022abe:	e7b6      	b.n	8022a2e <pow+0x4a>
 8022ac0:	f7ff fb08 	bl	80220d4 <__errno>
 8022ac4:	2322      	movs	r3, #34	; 0x22
 8022ac6:	6003      	str	r3, [r0, #0]
 8022ac8:	2200      	movs	r2, #0
 8022aca:	2300      	movs	r3, #0
 8022acc:	4640      	mov	r0, r8
 8022ace:	4649      	mov	r1, r9
 8022ad0:	f7de f80c 	bl	8000aec <__aeabi_dcmplt>
 8022ad4:	2400      	movs	r4, #0
 8022ad6:	b158      	cbz	r0, 8022af0 <pow+0x10c>
 8022ad8:	ec47 6b10 	vmov	d0, r6, r7
 8022adc:	f000 fe24 	bl	8023728 <rint>
 8022ae0:	4632      	mov	r2, r6
 8022ae2:	ec51 0b10 	vmov	r0, r1, d0
 8022ae6:	463b      	mov	r3, r7
 8022ae8:	f7dd fff6 	bl	8000ad8 <__aeabi_dcmpeq>
 8022aec:	2800      	cmp	r0, #0
 8022aee:	d0c2      	beq.n	8022a76 <pow+0x92>
 8022af0:	4d11      	ldr	r5, [pc, #68]	; (8022b38 <pow+0x154>)
 8022af2:	e79c      	b.n	8022a2e <pow+0x4a>
 8022af4:	2200      	movs	r2, #0
 8022af6:	2300      	movs	r3, #0
 8022af8:	4620      	mov	r0, r4
 8022afa:	4629      	mov	r1, r5
 8022afc:	f7dd ffec 	bl	8000ad8 <__aeabi_dcmpeq>
 8022b00:	2800      	cmp	r0, #0
 8022b02:	d094      	beq.n	8022a2e <pow+0x4a>
 8022b04:	ec49 8b10 	vmov	d0, r8, r9
 8022b08:	f000 fdf9 	bl	80236fe <finite>
 8022b0c:	2800      	cmp	r0, #0
 8022b0e:	d08e      	beq.n	8022a2e <pow+0x4a>
 8022b10:	ec47 6b10 	vmov	d0, r6, r7
 8022b14:	f000 fdf3 	bl	80236fe <finite>
 8022b18:	2800      	cmp	r0, #0
 8022b1a:	d088      	beq.n	8022a2e <pow+0x4a>
 8022b1c:	f7ff fada 	bl	80220d4 <__errno>
 8022b20:	2322      	movs	r3, #34	; 0x22
 8022b22:	6003      	str	r3, [r0, #0]
 8022b24:	2400      	movs	r4, #0
 8022b26:	2500      	movs	r5, #0
 8022b28:	e781      	b.n	8022a2e <pow+0x4a>
 8022b2a:	4d04      	ldr	r5, [pc, #16]	; (8022b3c <pow+0x158>)
 8022b2c:	2400      	movs	r4, #0
 8022b2e:	e77e      	b.n	8022a2e <pow+0x4a>
 8022b30:	20000070 	.word	0x20000070
 8022b34:	fff00000 	.word	0xfff00000
 8022b38:	7ff00000 	.word	0x7ff00000
 8022b3c:	3ff00000 	.word	0x3ff00000

08022b40 <__ieee754_pow>:
 8022b40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022b44:	ed2d 8b06 	vpush	{d8-d10}
 8022b48:	b08d      	sub	sp, #52	; 0x34
 8022b4a:	ed8d 1b02 	vstr	d1, [sp, #8]
 8022b4e:	e9dd 0702 	ldrd	r0, r7, [sp, #8]
 8022b52:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 8022b56:	ea56 0100 	orrs.w	r1, r6, r0
 8022b5a:	ec53 2b10 	vmov	r2, r3, d0
 8022b5e:	f000 84d1 	beq.w	8023504 <__ieee754_pow+0x9c4>
 8022b62:	497f      	ldr	r1, [pc, #508]	; (8022d60 <__ieee754_pow+0x220>)
 8022b64:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 8022b68:	428c      	cmp	r4, r1
 8022b6a:	ee10 8a10 	vmov	r8, s0
 8022b6e:	4699      	mov	r9, r3
 8022b70:	dc09      	bgt.n	8022b86 <__ieee754_pow+0x46>
 8022b72:	d103      	bne.n	8022b7c <__ieee754_pow+0x3c>
 8022b74:	b97a      	cbnz	r2, 8022b96 <__ieee754_pow+0x56>
 8022b76:	42a6      	cmp	r6, r4
 8022b78:	dd02      	ble.n	8022b80 <__ieee754_pow+0x40>
 8022b7a:	e00c      	b.n	8022b96 <__ieee754_pow+0x56>
 8022b7c:	428e      	cmp	r6, r1
 8022b7e:	dc02      	bgt.n	8022b86 <__ieee754_pow+0x46>
 8022b80:	428e      	cmp	r6, r1
 8022b82:	d110      	bne.n	8022ba6 <__ieee754_pow+0x66>
 8022b84:	b178      	cbz	r0, 8022ba6 <__ieee754_pow+0x66>
 8022b86:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8022b8a:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8022b8e:	ea54 0308 	orrs.w	r3, r4, r8
 8022b92:	f000 84b7 	beq.w	8023504 <__ieee754_pow+0x9c4>
 8022b96:	4873      	ldr	r0, [pc, #460]	; (8022d64 <__ieee754_pow+0x224>)
 8022b98:	b00d      	add	sp, #52	; 0x34
 8022b9a:	ecbd 8b06 	vpop	{d8-d10}
 8022b9e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022ba2:	f000 bdb9 	b.w	8023718 <nan>
 8022ba6:	f1b9 0f00 	cmp.w	r9, #0
 8022baa:	da36      	bge.n	8022c1a <__ieee754_pow+0xda>
 8022bac:	496e      	ldr	r1, [pc, #440]	; (8022d68 <__ieee754_pow+0x228>)
 8022bae:	428e      	cmp	r6, r1
 8022bb0:	dc51      	bgt.n	8022c56 <__ieee754_pow+0x116>
 8022bb2:	f1a1 7154 	sub.w	r1, r1, #55574528	; 0x3500000
 8022bb6:	428e      	cmp	r6, r1
 8022bb8:	f340 84af 	ble.w	802351a <__ieee754_pow+0x9da>
 8022bbc:	1531      	asrs	r1, r6, #20
 8022bbe:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8022bc2:	2914      	cmp	r1, #20
 8022bc4:	dd0f      	ble.n	8022be6 <__ieee754_pow+0xa6>
 8022bc6:	f1c1 0134 	rsb	r1, r1, #52	; 0x34
 8022bca:	fa20 fc01 	lsr.w	ip, r0, r1
 8022bce:	fa0c f101 	lsl.w	r1, ip, r1
 8022bd2:	4281      	cmp	r1, r0
 8022bd4:	f040 84a1 	bne.w	802351a <__ieee754_pow+0x9da>
 8022bd8:	f00c 0c01 	and.w	ip, ip, #1
 8022bdc:	f1cc 0102 	rsb	r1, ip, #2
 8022be0:	9100      	str	r1, [sp, #0]
 8022be2:	b180      	cbz	r0, 8022c06 <__ieee754_pow+0xc6>
 8022be4:	e059      	b.n	8022c9a <__ieee754_pow+0x15a>
 8022be6:	2800      	cmp	r0, #0
 8022be8:	d155      	bne.n	8022c96 <__ieee754_pow+0x156>
 8022bea:	f1c1 0114 	rsb	r1, r1, #20
 8022bee:	fa46 fc01 	asr.w	ip, r6, r1
 8022bf2:	fa0c f101 	lsl.w	r1, ip, r1
 8022bf6:	42b1      	cmp	r1, r6
 8022bf8:	f040 848c 	bne.w	8023514 <__ieee754_pow+0x9d4>
 8022bfc:	f00c 0c01 	and.w	ip, ip, #1
 8022c00:	f1cc 0102 	rsb	r1, ip, #2
 8022c04:	9100      	str	r1, [sp, #0]
 8022c06:	4959      	ldr	r1, [pc, #356]	; (8022d6c <__ieee754_pow+0x22c>)
 8022c08:	428e      	cmp	r6, r1
 8022c0a:	d12d      	bne.n	8022c68 <__ieee754_pow+0x128>
 8022c0c:	2f00      	cmp	r7, #0
 8022c0e:	da79      	bge.n	8022d04 <__ieee754_pow+0x1c4>
 8022c10:	4956      	ldr	r1, [pc, #344]	; (8022d6c <__ieee754_pow+0x22c>)
 8022c12:	2000      	movs	r0, #0
 8022c14:	f7dd fe22 	bl	800085c <__aeabi_ddiv>
 8022c18:	e016      	b.n	8022c48 <__ieee754_pow+0x108>
 8022c1a:	2100      	movs	r1, #0
 8022c1c:	9100      	str	r1, [sp, #0]
 8022c1e:	2800      	cmp	r0, #0
 8022c20:	d13b      	bne.n	8022c9a <__ieee754_pow+0x15a>
 8022c22:	494f      	ldr	r1, [pc, #316]	; (8022d60 <__ieee754_pow+0x220>)
 8022c24:	428e      	cmp	r6, r1
 8022c26:	d1ee      	bne.n	8022c06 <__ieee754_pow+0xc6>
 8022c28:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8022c2c:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8022c30:	ea53 0308 	orrs.w	r3, r3, r8
 8022c34:	f000 8466 	beq.w	8023504 <__ieee754_pow+0x9c4>
 8022c38:	4b4d      	ldr	r3, [pc, #308]	; (8022d70 <__ieee754_pow+0x230>)
 8022c3a:	429c      	cmp	r4, r3
 8022c3c:	dd0d      	ble.n	8022c5a <__ieee754_pow+0x11a>
 8022c3e:	2f00      	cmp	r7, #0
 8022c40:	f280 8464 	bge.w	802350c <__ieee754_pow+0x9cc>
 8022c44:	2000      	movs	r0, #0
 8022c46:	2100      	movs	r1, #0
 8022c48:	ec41 0b10 	vmov	d0, r0, r1
 8022c4c:	b00d      	add	sp, #52	; 0x34
 8022c4e:	ecbd 8b06 	vpop	{d8-d10}
 8022c52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022c56:	2102      	movs	r1, #2
 8022c58:	e7e0      	b.n	8022c1c <__ieee754_pow+0xdc>
 8022c5a:	2f00      	cmp	r7, #0
 8022c5c:	daf2      	bge.n	8022c44 <__ieee754_pow+0x104>
 8022c5e:	e9dd 0302 	ldrd	r0, r3, [sp, #8]
 8022c62:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8022c66:	e7ef      	b.n	8022c48 <__ieee754_pow+0x108>
 8022c68:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 8022c6c:	d104      	bne.n	8022c78 <__ieee754_pow+0x138>
 8022c6e:	4610      	mov	r0, r2
 8022c70:	4619      	mov	r1, r3
 8022c72:	f7dd fcc9 	bl	8000608 <__aeabi_dmul>
 8022c76:	e7e7      	b.n	8022c48 <__ieee754_pow+0x108>
 8022c78:	493e      	ldr	r1, [pc, #248]	; (8022d74 <__ieee754_pow+0x234>)
 8022c7a:	428f      	cmp	r7, r1
 8022c7c:	d10d      	bne.n	8022c9a <__ieee754_pow+0x15a>
 8022c7e:	f1b9 0f00 	cmp.w	r9, #0
 8022c82:	db0a      	blt.n	8022c9a <__ieee754_pow+0x15a>
 8022c84:	ec43 2b10 	vmov	d0, r2, r3
 8022c88:	b00d      	add	sp, #52	; 0x34
 8022c8a:	ecbd 8b06 	vpop	{d8-d10}
 8022c8e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022c92:	f000 bc77 	b.w	8023584 <__ieee754_sqrt>
 8022c96:	2100      	movs	r1, #0
 8022c98:	9100      	str	r1, [sp, #0]
 8022c9a:	ec43 2b10 	vmov	d0, r2, r3
 8022c9e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8022ca2:	f000 fd23 	bl	80236ec <fabs>
 8022ca6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8022caa:	ec51 0b10 	vmov	r0, r1, d0
 8022cae:	f1b8 0f00 	cmp.w	r8, #0
 8022cb2:	d12a      	bne.n	8022d0a <__ieee754_pow+0x1ca>
 8022cb4:	b12c      	cbz	r4, 8022cc2 <__ieee754_pow+0x182>
 8022cb6:	f8df c0b4 	ldr.w	ip, [pc, #180]	; 8022d6c <__ieee754_pow+0x22c>
 8022cba:	f029 4e40 	bic.w	lr, r9, #3221225472	; 0xc0000000
 8022cbe:	45e6      	cmp	lr, ip
 8022cc0:	d123      	bne.n	8022d0a <__ieee754_pow+0x1ca>
 8022cc2:	2f00      	cmp	r7, #0
 8022cc4:	da05      	bge.n	8022cd2 <__ieee754_pow+0x192>
 8022cc6:	4602      	mov	r2, r0
 8022cc8:	460b      	mov	r3, r1
 8022cca:	2000      	movs	r0, #0
 8022ccc:	4927      	ldr	r1, [pc, #156]	; (8022d6c <__ieee754_pow+0x22c>)
 8022cce:	f7dd fdc5 	bl	800085c <__aeabi_ddiv>
 8022cd2:	f1b9 0f00 	cmp.w	r9, #0
 8022cd6:	dab7      	bge.n	8022c48 <__ieee754_pow+0x108>
 8022cd8:	9b00      	ldr	r3, [sp, #0]
 8022cda:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8022cde:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8022ce2:	4323      	orrs	r3, r4
 8022ce4:	d108      	bne.n	8022cf8 <__ieee754_pow+0x1b8>
 8022ce6:	4602      	mov	r2, r0
 8022ce8:	460b      	mov	r3, r1
 8022cea:	4610      	mov	r0, r2
 8022cec:	4619      	mov	r1, r3
 8022cee:	f7dd fad3 	bl	8000298 <__aeabi_dsub>
 8022cf2:	4602      	mov	r2, r0
 8022cf4:	460b      	mov	r3, r1
 8022cf6:	e78d      	b.n	8022c14 <__ieee754_pow+0xd4>
 8022cf8:	9b00      	ldr	r3, [sp, #0]
 8022cfa:	2b01      	cmp	r3, #1
 8022cfc:	d1a4      	bne.n	8022c48 <__ieee754_pow+0x108>
 8022cfe:	4602      	mov	r2, r0
 8022d00:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8022d04:	4610      	mov	r0, r2
 8022d06:	4619      	mov	r1, r3
 8022d08:	e79e      	b.n	8022c48 <__ieee754_pow+0x108>
 8022d0a:	ea4f 7cd9 	mov.w	ip, r9, lsr #31
 8022d0e:	f10c 35ff 	add.w	r5, ip, #4294967295
 8022d12:	950a      	str	r5, [sp, #40]	; 0x28
 8022d14:	9d00      	ldr	r5, [sp, #0]
 8022d16:	46ac      	mov	ip, r5
 8022d18:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8022d1a:	ea5c 0505 	orrs.w	r5, ip, r5
 8022d1e:	d0e4      	beq.n	8022cea <__ieee754_pow+0x1aa>
 8022d20:	4b15      	ldr	r3, [pc, #84]	; (8022d78 <__ieee754_pow+0x238>)
 8022d22:	429e      	cmp	r6, r3
 8022d24:	f340 80fc 	ble.w	8022f20 <__ieee754_pow+0x3e0>
 8022d28:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8022d2c:	429e      	cmp	r6, r3
 8022d2e:	4b10      	ldr	r3, [pc, #64]	; (8022d70 <__ieee754_pow+0x230>)
 8022d30:	dd07      	ble.n	8022d42 <__ieee754_pow+0x202>
 8022d32:	429c      	cmp	r4, r3
 8022d34:	dc0a      	bgt.n	8022d4c <__ieee754_pow+0x20c>
 8022d36:	2f00      	cmp	r7, #0
 8022d38:	da84      	bge.n	8022c44 <__ieee754_pow+0x104>
 8022d3a:	a307      	add	r3, pc, #28	; (adr r3, 8022d58 <__ieee754_pow+0x218>)
 8022d3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022d40:	e795      	b.n	8022c6e <__ieee754_pow+0x12e>
 8022d42:	429c      	cmp	r4, r3
 8022d44:	dbf7      	blt.n	8022d36 <__ieee754_pow+0x1f6>
 8022d46:	4b09      	ldr	r3, [pc, #36]	; (8022d6c <__ieee754_pow+0x22c>)
 8022d48:	429c      	cmp	r4, r3
 8022d4a:	dd17      	ble.n	8022d7c <__ieee754_pow+0x23c>
 8022d4c:	2f00      	cmp	r7, #0
 8022d4e:	dcf4      	bgt.n	8022d3a <__ieee754_pow+0x1fa>
 8022d50:	e778      	b.n	8022c44 <__ieee754_pow+0x104>
 8022d52:	bf00      	nop
 8022d54:	f3af 8000 	nop.w
 8022d58:	8800759c 	.word	0x8800759c
 8022d5c:	7e37e43c 	.word	0x7e37e43c
 8022d60:	7ff00000 	.word	0x7ff00000
 8022d64:	0802d239 	.word	0x0802d239
 8022d68:	433fffff 	.word	0x433fffff
 8022d6c:	3ff00000 	.word	0x3ff00000
 8022d70:	3fefffff 	.word	0x3fefffff
 8022d74:	3fe00000 	.word	0x3fe00000
 8022d78:	41e00000 	.word	0x41e00000
 8022d7c:	4b64      	ldr	r3, [pc, #400]	; (8022f10 <__ieee754_pow+0x3d0>)
 8022d7e:	2200      	movs	r2, #0
 8022d80:	f7dd fa8a 	bl	8000298 <__aeabi_dsub>
 8022d84:	a356      	add	r3, pc, #344	; (adr r3, 8022ee0 <__ieee754_pow+0x3a0>)
 8022d86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022d8a:	4604      	mov	r4, r0
 8022d8c:	460d      	mov	r5, r1
 8022d8e:	f7dd fc3b 	bl	8000608 <__aeabi_dmul>
 8022d92:	a355      	add	r3, pc, #340	; (adr r3, 8022ee8 <__ieee754_pow+0x3a8>)
 8022d94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022d98:	4606      	mov	r6, r0
 8022d9a:	460f      	mov	r7, r1
 8022d9c:	4620      	mov	r0, r4
 8022d9e:	4629      	mov	r1, r5
 8022da0:	f7dd fc32 	bl	8000608 <__aeabi_dmul>
 8022da4:	4b5b      	ldr	r3, [pc, #364]	; (8022f14 <__ieee754_pow+0x3d4>)
 8022da6:	4682      	mov	sl, r0
 8022da8:	468b      	mov	fp, r1
 8022daa:	2200      	movs	r2, #0
 8022dac:	4620      	mov	r0, r4
 8022dae:	4629      	mov	r1, r5
 8022db0:	f7dd fc2a 	bl	8000608 <__aeabi_dmul>
 8022db4:	4602      	mov	r2, r0
 8022db6:	460b      	mov	r3, r1
 8022db8:	a14d      	add	r1, pc, #308	; (adr r1, 8022ef0 <__ieee754_pow+0x3b0>)
 8022dba:	e9d1 0100 	ldrd	r0, r1, [r1]
 8022dbe:	f7dd fa6b 	bl	8000298 <__aeabi_dsub>
 8022dc2:	4622      	mov	r2, r4
 8022dc4:	462b      	mov	r3, r5
 8022dc6:	f7dd fc1f 	bl	8000608 <__aeabi_dmul>
 8022dca:	4602      	mov	r2, r0
 8022dcc:	460b      	mov	r3, r1
 8022dce:	2000      	movs	r0, #0
 8022dd0:	4951      	ldr	r1, [pc, #324]	; (8022f18 <__ieee754_pow+0x3d8>)
 8022dd2:	f7dd fa61 	bl	8000298 <__aeabi_dsub>
 8022dd6:	4622      	mov	r2, r4
 8022dd8:	4680      	mov	r8, r0
 8022dda:	4689      	mov	r9, r1
 8022ddc:	462b      	mov	r3, r5
 8022dde:	4620      	mov	r0, r4
 8022de0:	4629      	mov	r1, r5
 8022de2:	f7dd fc11 	bl	8000608 <__aeabi_dmul>
 8022de6:	4602      	mov	r2, r0
 8022de8:	460b      	mov	r3, r1
 8022dea:	4640      	mov	r0, r8
 8022dec:	4649      	mov	r1, r9
 8022dee:	f7dd fc0b 	bl	8000608 <__aeabi_dmul>
 8022df2:	a341      	add	r3, pc, #260	; (adr r3, 8022ef8 <__ieee754_pow+0x3b8>)
 8022df4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022df8:	f7dd fc06 	bl	8000608 <__aeabi_dmul>
 8022dfc:	4602      	mov	r2, r0
 8022dfe:	460b      	mov	r3, r1
 8022e00:	4650      	mov	r0, sl
 8022e02:	4659      	mov	r1, fp
 8022e04:	f7dd fa48 	bl	8000298 <__aeabi_dsub>
 8022e08:	4602      	mov	r2, r0
 8022e0a:	460b      	mov	r3, r1
 8022e0c:	4680      	mov	r8, r0
 8022e0e:	4689      	mov	r9, r1
 8022e10:	4630      	mov	r0, r6
 8022e12:	4639      	mov	r1, r7
 8022e14:	f7dd fa42 	bl	800029c <__adddf3>
 8022e18:	2400      	movs	r4, #0
 8022e1a:	4632      	mov	r2, r6
 8022e1c:	463b      	mov	r3, r7
 8022e1e:	4620      	mov	r0, r4
 8022e20:	460d      	mov	r5, r1
 8022e22:	f7dd fa39 	bl	8000298 <__aeabi_dsub>
 8022e26:	4602      	mov	r2, r0
 8022e28:	460b      	mov	r3, r1
 8022e2a:	4640      	mov	r0, r8
 8022e2c:	4649      	mov	r1, r9
 8022e2e:	f7dd fa33 	bl	8000298 <__aeabi_dsub>
 8022e32:	9b00      	ldr	r3, [sp, #0]
 8022e34:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8022e36:	3b01      	subs	r3, #1
 8022e38:	4313      	orrs	r3, r2
 8022e3a:	4682      	mov	sl, r0
 8022e3c:	468b      	mov	fp, r1
 8022e3e:	f040 81f1 	bne.w	8023224 <__ieee754_pow+0x6e4>
 8022e42:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 8022f00 <__ieee754_pow+0x3c0>
 8022e46:	eeb0 8a47 	vmov.f32	s16, s14
 8022e4a:	eef0 8a67 	vmov.f32	s17, s15
 8022e4e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8022e52:	2600      	movs	r6, #0
 8022e54:	4632      	mov	r2, r6
 8022e56:	463b      	mov	r3, r7
 8022e58:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8022e5c:	f7dd fa1c 	bl	8000298 <__aeabi_dsub>
 8022e60:	4622      	mov	r2, r4
 8022e62:	462b      	mov	r3, r5
 8022e64:	f7dd fbd0 	bl	8000608 <__aeabi_dmul>
 8022e68:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8022e6c:	4680      	mov	r8, r0
 8022e6e:	4689      	mov	r9, r1
 8022e70:	4650      	mov	r0, sl
 8022e72:	4659      	mov	r1, fp
 8022e74:	f7dd fbc8 	bl	8000608 <__aeabi_dmul>
 8022e78:	4602      	mov	r2, r0
 8022e7a:	460b      	mov	r3, r1
 8022e7c:	4640      	mov	r0, r8
 8022e7e:	4649      	mov	r1, r9
 8022e80:	f7dd fa0c 	bl	800029c <__adddf3>
 8022e84:	4632      	mov	r2, r6
 8022e86:	463b      	mov	r3, r7
 8022e88:	4680      	mov	r8, r0
 8022e8a:	4689      	mov	r9, r1
 8022e8c:	4620      	mov	r0, r4
 8022e8e:	4629      	mov	r1, r5
 8022e90:	f7dd fbba 	bl	8000608 <__aeabi_dmul>
 8022e94:	460b      	mov	r3, r1
 8022e96:	4604      	mov	r4, r0
 8022e98:	460d      	mov	r5, r1
 8022e9a:	4602      	mov	r2, r0
 8022e9c:	4649      	mov	r1, r9
 8022e9e:	4640      	mov	r0, r8
 8022ea0:	f7dd f9fc 	bl	800029c <__adddf3>
 8022ea4:	4b1d      	ldr	r3, [pc, #116]	; (8022f1c <__ieee754_pow+0x3dc>)
 8022ea6:	4299      	cmp	r1, r3
 8022ea8:	ec45 4b19 	vmov	d9, r4, r5
 8022eac:	4606      	mov	r6, r0
 8022eae:	460f      	mov	r7, r1
 8022eb0:	468b      	mov	fp, r1
 8022eb2:	f340 82fe 	ble.w	80234b2 <__ieee754_pow+0x972>
 8022eb6:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8022eba:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8022ebe:	4303      	orrs	r3, r0
 8022ec0:	f000 81f0 	beq.w	80232a4 <__ieee754_pow+0x764>
 8022ec4:	a310      	add	r3, pc, #64	; (adr r3, 8022f08 <__ieee754_pow+0x3c8>)
 8022ec6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022eca:	ec51 0b18 	vmov	r0, r1, d8
 8022ece:	f7dd fb9b 	bl	8000608 <__aeabi_dmul>
 8022ed2:	a30d      	add	r3, pc, #52	; (adr r3, 8022f08 <__ieee754_pow+0x3c8>)
 8022ed4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022ed8:	e6cb      	b.n	8022c72 <__ieee754_pow+0x132>
 8022eda:	bf00      	nop
 8022edc:	f3af 8000 	nop.w
 8022ee0:	60000000 	.word	0x60000000
 8022ee4:	3ff71547 	.word	0x3ff71547
 8022ee8:	f85ddf44 	.word	0xf85ddf44
 8022eec:	3e54ae0b 	.word	0x3e54ae0b
 8022ef0:	55555555 	.word	0x55555555
 8022ef4:	3fd55555 	.word	0x3fd55555
 8022ef8:	652b82fe 	.word	0x652b82fe
 8022efc:	3ff71547 	.word	0x3ff71547
 8022f00:	00000000 	.word	0x00000000
 8022f04:	bff00000 	.word	0xbff00000
 8022f08:	8800759c 	.word	0x8800759c
 8022f0c:	7e37e43c 	.word	0x7e37e43c
 8022f10:	3ff00000 	.word	0x3ff00000
 8022f14:	3fd00000 	.word	0x3fd00000
 8022f18:	3fe00000 	.word	0x3fe00000
 8022f1c:	408fffff 	.word	0x408fffff
 8022f20:	4bd7      	ldr	r3, [pc, #860]	; (8023280 <__ieee754_pow+0x740>)
 8022f22:	ea03 0309 	and.w	r3, r3, r9
 8022f26:	2200      	movs	r2, #0
 8022f28:	b92b      	cbnz	r3, 8022f36 <__ieee754_pow+0x3f6>
 8022f2a:	4bd6      	ldr	r3, [pc, #856]	; (8023284 <__ieee754_pow+0x744>)
 8022f2c:	f7dd fb6c 	bl	8000608 <__aeabi_dmul>
 8022f30:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8022f34:	460c      	mov	r4, r1
 8022f36:	1523      	asrs	r3, r4, #20
 8022f38:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8022f3c:	4413      	add	r3, r2
 8022f3e:	9309      	str	r3, [sp, #36]	; 0x24
 8022f40:	4bd1      	ldr	r3, [pc, #836]	; (8023288 <__ieee754_pow+0x748>)
 8022f42:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8022f46:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8022f4a:	429c      	cmp	r4, r3
 8022f4c:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8022f50:	dd08      	ble.n	8022f64 <__ieee754_pow+0x424>
 8022f52:	4bce      	ldr	r3, [pc, #824]	; (802328c <__ieee754_pow+0x74c>)
 8022f54:	429c      	cmp	r4, r3
 8022f56:	f340 8163 	ble.w	8023220 <__ieee754_pow+0x6e0>
 8022f5a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8022f5c:	3301      	adds	r3, #1
 8022f5e:	9309      	str	r3, [sp, #36]	; 0x24
 8022f60:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8022f64:	2400      	movs	r4, #0
 8022f66:	00e3      	lsls	r3, r4, #3
 8022f68:	930b      	str	r3, [sp, #44]	; 0x2c
 8022f6a:	4bc9      	ldr	r3, [pc, #804]	; (8023290 <__ieee754_pow+0x750>)
 8022f6c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8022f70:	ed93 7b00 	vldr	d7, [r3]
 8022f74:	4629      	mov	r1, r5
 8022f76:	ec53 2b17 	vmov	r2, r3, d7
 8022f7a:	eeb0 8a47 	vmov.f32	s16, s14
 8022f7e:	eef0 8a67 	vmov.f32	s17, s15
 8022f82:	4682      	mov	sl, r0
 8022f84:	f7dd f988 	bl	8000298 <__aeabi_dsub>
 8022f88:	4652      	mov	r2, sl
 8022f8a:	4606      	mov	r6, r0
 8022f8c:	460f      	mov	r7, r1
 8022f8e:	462b      	mov	r3, r5
 8022f90:	ec51 0b18 	vmov	r0, r1, d8
 8022f94:	f7dd f982 	bl	800029c <__adddf3>
 8022f98:	4602      	mov	r2, r0
 8022f9a:	460b      	mov	r3, r1
 8022f9c:	2000      	movs	r0, #0
 8022f9e:	49bd      	ldr	r1, [pc, #756]	; (8023294 <__ieee754_pow+0x754>)
 8022fa0:	f7dd fc5c 	bl	800085c <__aeabi_ddiv>
 8022fa4:	ec41 0b19 	vmov	d9, r0, r1
 8022fa8:	4602      	mov	r2, r0
 8022faa:	460b      	mov	r3, r1
 8022fac:	4630      	mov	r0, r6
 8022fae:	4639      	mov	r1, r7
 8022fb0:	f7dd fb2a 	bl	8000608 <__aeabi_dmul>
 8022fb4:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8022fb8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8022fbc:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8022fc0:	2300      	movs	r3, #0
 8022fc2:	9304      	str	r3, [sp, #16]
 8022fc4:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8022fc8:	46ab      	mov	fp, r5
 8022fca:	106d      	asrs	r5, r5, #1
 8022fcc:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8022fd0:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8022fd4:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8022fd8:	2200      	movs	r2, #0
 8022fda:	4640      	mov	r0, r8
 8022fdc:	4649      	mov	r1, r9
 8022fde:	4614      	mov	r4, r2
 8022fe0:	461d      	mov	r5, r3
 8022fe2:	f7dd fb11 	bl	8000608 <__aeabi_dmul>
 8022fe6:	4602      	mov	r2, r0
 8022fe8:	460b      	mov	r3, r1
 8022fea:	4630      	mov	r0, r6
 8022fec:	4639      	mov	r1, r7
 8022fee:	f7dd f953 	bl	8000298 <__aeabi_dsub>
 8022ff2:	ec53 2b18 	vmov	r2, r3, d8
 8022ff6:	4606      	mov	r6, r0
 8022ff8:	460f      	mov	r7, r1
 8022ffa:	4620      	mov	r0, r4
 8022ffc:	4629      	mov	r1, r5
 8022ffe:	f7dd f94b 	bl	8000298 <__aeabi_dsub>
 8023002:	4602      	mov	r2, r0
 8023004:	460b      	mov	r3, r1
 8023006:	4650      	mov	r0, sl
 8023008:	4659      	mov	r1, fp
 802300a:	f7dd f945 	bl	8000298 <__aeabi_dsub>
 802300e:	4642      	mov	r2, r8
 8023010:	464b      	mov	r3, r9
 8023012:	f7dd faf9 	bl	8000608 <__aeabi_dmul>
 8023016:	4602      	mov	r2, r0
 8023018:	460b      	mov	r3, r1
 802301a:	4630      	mov	r0, r6
 802301c:	4639      	mov	r1, r7
 802301e:	f7dd f93b 	bl	8000298 <__aeabi_dsub>
 8023022:	ec53 2b19 	vmov	r2, r3, d9
 8023026:	f7dd faef 	bl	8000608 <__aeabi_dmul>
 802302a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 802302e:	ec41 0b18 	vmov	d8, r0, r1
 8023032:	4610      	mov	r0, r2
 8023034:	4619      	mov	r1, r3
 8023036:	f7dd fae7 	bl	8000608 <__aeabi_dmul>
 802303a:	a37d      	add	r3, pc, #500	; (adr r3, 8023230 <__ieee754_pow+0x6f0>)
 802303c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023040:	4604      	mov	r4, r0
 8023042:	460d      	mov	r5, r1
 8023044:	f7dd fae0 	bl	8000608 <__aeabi_dmul>
 8023048:	a37b      	add	r3, pc, #492	; (adr r3, 8023238 <__ieee754_pow+0x6f8>)
 802304a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802304e:	f7dd f925 	bl	800029c <__adddf3>
 8023052:	4622      	mov	r2, r4
 8023054:	462b      	mov	r3, r5
 8023056:	f7dd fad7 	bl	8000608 <__aeabi_dmul>
 802305a:	a379      	add	r3, pc, #484	; (adr r3, 8023240 <__ieee754_pow+0x700>)
 802305c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023060:	f7dd f91c 	bl	800029c <__adddf3>
 8023064:	4622      	mov	r2, r4
 8023066:	462b      	mov	r3, r5
 8023068:	f7dd face 	bl	8000608 <__aeabi_dmul>
 802306c:	a376      	add	r3, pc, #472	; (adr r3, 8023248 <__ieee754_pow+0x708>)
 802306e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023072:	f7dd f913 	bl	800029c <__adddf3>
 8023076:	4622      	mov	r2, r4
 8023078:	462b      	mov	r3, r5
 802307a:	f7dd fac5 	bl	8000608 <__aeabi_dmul>
 802307e:	a374      	add	r3, pc, #464	; (adr r3, 8023250 <__ieee754_pow+0x710>)
 8023080:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023084:	f7dd f90a 	bl	800029c <__adddf3>
 8023088:	4622      	mov	r2, r4
 802308a:	462b      	mov	r3, r5
 802308c:	f7dd fabc 	bl	8000608 <__aeabi_dmul>
 8023090:	a371      	add	r3, pc, #452	; (adr r3, 8023258 <__ieee754_pow+0x718>)
 8023092:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023096:	f7dd f901 	bl	800029c <__adddf3>
 802309a:	4622      	mov	r2, r4
 802309c:	4606      	mov	r6, r0
 802309e:	460f      	mov	r7, r1
 80230a0:	462b      	mov	r3, r5
 80230a2:	4620      	mov	r0, r4
 80230a4:	4629      	mov	r1, r5
 80230a6:	f7dd faaf 	bl	8000608 <__aeabi_dmul>
 80230aa:	4602      	mov	r2, r0
 80230ac:	460b      	mov	r3, r1
 80230ae:	4630      	mov	r0, r6
 80230b0:	4639      	mov	r1, r7
 80230b2:	f7dd faa9 	bl	8000608 <__aeabi_dmul>
 80230b6:	4642      	mov	r2, r8
 80230b8:	4604      	mov	r4, r0
 80230ba:	460d      	mov	r5, r1
 80230bc:	464b      	mov	r3, r9
 80230be:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80230c2:	f7dd f8eb 	bl	800029c <__adddf3>
 80230c6:	ec53 2b18 	vmov	r2, r3, d8
 80230ca:	f7dd fa9d 	bl	8000608 <__aeabi_dmul>
 80230ce:	4622      	mov	r2, r4
 80230d0:	462b      	mov	r3, r5
 80230d2:	f7dd f8e3 	bl	800029c <__adddf3>
 80230d6:	4642      	mov	r2, r8
 80230d8:	4682      	mov	sl, r0
 80230da:	468b      	mov	fp, r1
 80230dc:	464b      	mov	r3, r9
 80230de:	4640      	mov	r0, r8
 80230e0:	4649      	mov	r1, r9
 80230e2:	f7dd fa91 	bl	8000608 <__aeabi_dmul>
 80230e6:	4b6c      	ldr	r3, [pc, #432]	; (8023298 <__ieee754_pow+0x758>)
 80230e8:	2200      	movs	r2, #0
 80230ea:	4606      	mov	r6, r0
 80230ec:	460f      	mov	r7, r1
 80230ee:	f7dd f8d5 	bl	800029c <__adddf3>
 80230f2:	4652      	mov	r2, sl
 80230f4:	465b      	mov	r3, fp
 80230f6:	f7dd f8d1 	bl	800029c <__adddf3>
 80230fa:	9c04      	ldr	r4, [sp, #16]
 80230fc:	460d      	mov	r5, r1
 80230fe:	4622      	mov	r2, r4
 8023100:	460b      	mov	r3, r1
 8023102:	4640      	mov	r0, r8
 8023104:	4649      	mov	r1, r9
 8023106:	f7dd fa7f 	bl	8000608 <__aeabi_dmul>
 802310a:	4b63      	ldr	r3, [pc, #396]	; (8023298 <__ieee754_pow+0x758>)
 802310c:	4680      	mov	r8, r0
 802310e:	4689      	mov	r9, r1
 8023110:	2200      	movs	r2, #0
 8023112:	4620      	mov	r0, r4
 8023114:	4629      	mov	r1, r5
 8023116:	f7dd f8bf 	bl	8000298 <__aeabi_dsub>
 802311a:	4632      	mov	r2, r6
 802311c:	463b      	mov	r3, r7
 802311e:	f7dd f8bb 	bl	8000298 <__aeabi_dsub>
 8023122:	4602      	mov	r2, r0
 8023124:	460b      	mov	r3, r1
 8023126:	4650      	mov	r0, sl
 8023128:	4659      	mov	r1, fp
 802312a:	f7dd f8b5 	bl	8000298 <__aeabi_dsub>
 802312e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8023132:	f7dd fa69 	bl	8000608 <__aeabi_dmul>
 8023136:	4622      	mov	r2, r4
 8023138:	4606      	mov	r6, r0
 802313a:	460f      	mov	r7, r1
 802313c:	462b      	mov	r3, r5
 802313e:	ec51 0b18 	vmov	r0, r1, d8
 8023142:	f7dd fa61 	bl	8000608 <__aeabi_dmul>
 8023146:	4602      	mov	r2, r0
 8023148:	460b      	mov	r3, r1
 802314a:	4630      	mov	r0, r6
 802314c:	4639      	mov	r1, r7
 802314e:	f7dd f8a5 	bl	800029c <__adddf3>
 8023152:	4606      	mov	r6, r0
 8023154:	460f      	mov	r7, r1
 8023156:	4602      	mov	r2, r0
 8023158:	460b      	mov	r3, r1
 802315a:	4640      	mov	r0, r8
 802315c:	4649      	mov	r1, r9
 802315e:	f7dd f89d 	bl	800029c <__adddf3>
 8023162:	9c04      	ldr	r4, [sp, #16]
 8023164:	a33e      	add	r3, pc, #248	; (adr r3, 8023260 <__ieee754_pow+0x720>)
 8023166:	e9d3 2300 	ldrd	r2, r3, [r3]
 802316a:	4620      	mov	r0, r4
 802316c:	460d      	mov	r5, r1
 802316e:	f7dd fa4b 	bl	8000608 <__aeabi_dmul>
 8023172:	4642      	mov	r2, r8
 8023174:	ec41 0b18 	vmov	d8, r0, r1
 8023178:	464b      	mov	r3, r9
 802317a:	4620      	mov	r0, r4
 802317c:	4629      	mov	r1, r5
 802317e:	f7dd f88b 	bl	8000298 <__aeabi_dsub>
 8023182:	4602      	mov	r2, r0
 8023184:	460b      	mov	r3, r1
 8023186:	4630      	mov	r0, r6
 8023188:	4639      	mov	r1, r7
 802318a:	f7dd f885 	bl	8000298 <__aeabi_dsub>
 802318e:	a336      	add	r3, pc, #216	; (adr r3, 8023268 <__ieee754_pow+0x728>)
 8023190:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023194:	f7dd fa38 	bl	8000608 <__aeabi_dmul>
 8023198:	a335      	add	r3, pc, #212	; (adr r3, 8023270 <__ieee754_pow+0x730>)
 802319a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802319e:	4606      	mov	r6, r0
 80231a0:	460f      	mov	r7, r1
 80231a2:	4620      	mov	r0, r4
 80231a4:	4629      	mov	r1, r5
 80231a6:	f7dd fa2f 	bl	8000608 <__aeabi_dmul>
 80231aa:	4602      	mov	r2, r0
 80231ac:	460b      	mov	r3, r1
 80231ae:	4630      	mov	r0, r6
 80231b0:	4639      	mov	r1, r7
 80231b2:	f7dd f873 	bl	800029c <__adddf3>
 80231b6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80231b8:	4b38      	ldr	r3, [pc, #224]	; (802329c <__ieee754_pow+0x75c>)
 80231ba:	4413      	add	r3, r2
 80231bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80231c0:	f7dd f86c 	bl	800029c <__adddf3>
 80231c4:	4682      	mov	sl, r0
 80231c6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80231c8:	468b      	mov	fp, r1
 80231ca:	f7dd f9b3 	bl	8000534 <__aeabi_i2d>
 80231ce:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80231d0:	4b33      	ldr	r3, [pc, #204]	; (80232a0 <__ieee754_pow+0x760>)
 80231d2:	4413      	add	r3, r2
 80231d4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80231d8:	4606      	mov	r6, r0
 80231da:	460f      	mov	r7, r1
 80231dc:	4652      	mov	r2, sl
 80231de:	465b      	mov	r3, fp
 80231e0:	ec51 0b18 	vmov	r0, r1, d8
 80231e4:	f7dd f85a 	bl	800029c <__adddf3>
 80231e8:	4642      	mov	r2, r8
 80231ea:	464b      	mov	r3, r9
 80231ec:	f7dd f856 	bl	800029c <__adddf3>
 80231f0:	4632      	mov	r2, r6
 80231f2:	463b      	mov	r3, r7
 80231f4:	f7dd f852 	bl	800029c <__adddf3>
 80231f8:	9c04      	ldr	r4, [sp, #16]
 80231fa:	4632      	mov	r2, r6
 80231fc:	463b      	mov	r3, r7
 80231fe:	4620      	mov	r0, r4
 8023200:	460d      	mov	r5, r1
 8023202:	f7dd f849 	bl	8000298 <__aeabi_dsub>
 8023206:	4642      	mov	r2, r8
 8023208:	464b      	mov	r3, r9
 802320a:	f7dd f845 	bl	8000298 <__aeabi_dsub>
 802320e:	ec53 2b18 	vmov	r2, r3, d8
 8023212:	f7dd f841 	bl	8000298 <__aeabi_dsub>
 8023216:	4602      	mov	r2, r0
 8023218:	460b      	mov	r3, r1
 802321a:	4650      	mov	r0, sl
 802321c:	4659      	mov	r1, fp
 802321e:	e606      	b.n	8022e2e <__ieee754_pow+0x2ee>
 8023220:	2401      	movs	r4, #1
 8023222:	e6a0      	b.n	8022f66 <__ieee754_pow+0x426>
 8023224:	ed9f 7b14 	vldr	d7, [pc, #80]	; 8023278 <__ieee754_pow+0x738>
 8023228:	e60d      	b.n	8022e46 <__ieee754_pow+0x306>
 802322a:	bf00      	nop
 802322c:	f3af 8000 	nop.w
 8023230:	4a454eef 	.word	0x4a454eef
 8023234:	3fca7e28 	.word	0x3fca7e28
 8023238:	93c9db65 	.word	0x93c9db65
 802323c:	3fcd864a 	.word	0x3fcd864a
 8023240:	a91d4101 	.word	0xa91d4101
 8023244:	3fd17460 	.word	0x3fd17460
 8023248:	518f264d 	.word	0x518f264d
 802324c:	3fd55555 	.word	0x3fd55555
 8023250:	db6fabff 	.word	0xdb6fabff
 8023254:	3fdb6db6 	.word	0x3fdb6db6
 8023258:	33333303 	.word	0x33333303
 802325c:	3fe33333 	.word	0x3fe33333
 8023260:	e0000000 	.word	0xe0000000
 8023264:	3feec709 	.word	0x3feec709
 8023268:	dc3a03fd 	.word	0xdc3a03fd
 802326c:	3feec709 	.word	0x3feec709
 8023270:	145b01f5 	.word	0x145b01f5
 8023274:	be3e2fe0 	.word	0xbe3e2fe0
 8023278:	00000000 	.word	0x00000000
 802327c:	3ff00000 	.word	0x3ff00000
 8023280:	7ff00000 	.word	0x7ff00000
 8023284:	43400000 	.word	0x43400000
 8023288:	0003988e 	.word	0x0003988e
 802328c:	000bb679 	.word	0x000bb679
 8023290:	0802d2c8 	.word	0x0802d2c8
 8023294:	3ff00000 	.word	0x3ff00000
 8023298:	40080000 	.word	0x40080000
 802329c:	0802d2e8 	.word	0x0802d2e8
 80232a0:	0802d2d8 	.word	0x0802d2d8
 80232a4:	a3b5      	add	r3, pc, #724	; (adr r3, 802357c <__ieee754_pow+0xa3c>)
 80232a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80232aa:	4640      	mov	r0, r8
 80232ac:	4649      	mov	r1, r9
 80232ae:	f7dc fff5 	bl	800029c <__adddf3>
 80232b2:	4622      	mov	r2, r4
 80232b4:	ec41 0b1a 	vmov	d10, r0, r1
 80232b8:	462b      	mov	r3, r5
 80232ba:	4630      	mov	r0, r6
 80232bc:	4639      	mov	r1, r7
 80232be:	f7dc ffeb 	bl	8000298 <__aeabi_dsub>
 80232c2:	4602      	mov	r2, r0
 80232c4:	460b      	mov	r3, r1
 80232c6:	ec51 0b1a 	vmov	r0, r1, d10
 80232ca:	f7dd fc2d 	bl	8000b28 <__aeabi_dcmpgt>
 80232ce:	2800      	cmp	r0, #0
 80232d0:	f47f adf8 	bne.w	8022ec4 <__ieee754_pow+0x384>
 80232d4:	4aa4      	ldr	r2, [pc, #656]	; (8023568 <__ieee754_pow+0xa28>)
 80232d6:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80232da:	4293      	cmp	r3, r2
 80232dc:	f340 810b 	ble.w	80234f6 <__ieee754_pow+0x9b6>
 80232e0:	151b      	asrs	r3, r3, #20
 80232e2:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 80232e6:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 80232ea:	fa4a f303 	asr.w	r3, sl, r3
 80232ee:	445b      	add	r3, fp
 80232f0:	f3c3 520a 	ubfx	r2, r3, #20, #11
 80232f4:	4e9d      	ldr	r6, [pc, #628]	; (802356c <__ieee754_pow+0xa2c>)
 80232f6:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 80232fa:	4116      	asrs	r6, r2
 80232fc:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8023300:	2000      	movs	r0, #0
 8023302:	ea23 0106 	bic.w	r1, r3, r6
 8023306:	f1c2 0214 	rsb	r2, r2, #20
 802330a:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 802330e:	fa4a fa02 	asr.w	sl, sl, r2
 8023312:	f1bb 0f00 	cmp.w	fp, #0
 8023316:	4602      	mov	r2, r0
 8023318:	460b      	mov	r3, r1
 802331a:	4620      	mov	r0, r4
 802331c:	4629      	mov	r1, r5
 802331e:	bfb8      	it	lt
 8023320:	f1ca 0a00 	rsblt	sl, sl, #0
 8023324:	f7dc ffb8 	bl	8000298 <__aeabi_dsub>
 8023328:	ec41 0b19 	vmov	d9, r0, r1
 802332c:	4642      	mov	r2, r8
 802332e:	464b      	mov	r3, r9
 8023330:	ec51 0b19 	vmov	r0, r1, d9
 8023334:	f7dc ffb2 	bl	800029c <__adddf3>
 8023338:	2400      	movs	r4, #0
 802333a:	a379      	add	r3, pc, #484	; (adr r3, 8023520 <__ieee754_pow+0x9e0>)
 802333c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023340:	4620      	mov	r0, r4
 8023342:	460d      	mov	r5, r1
 8023344:	f7dd f960 	bl	8000608 <__aeabi_dmul>
 8023348:	ec53 2b19 	vmov	r2, r3, d9
 802334c:	4606      	mov	r6, r0
 802334e:	460f      	mov	r7, r1
 8023350:	4620      	mov	r0, r4
 8023352:	4629      	mov	r1, r5
 8023354:	f7dc ffa0 	bl	8000298 <__aeabi_dsub>
 8023358:	4602      	mov	r2, r0
 802335a:	460b      	mov	r3, r1
 802335c:	4640      	mov	r0, r8
 802335e:	4649      	mov	r1, r9
 8023360:	f7dc ff9a 	bl	8000298 <__aeabi_dsub>
 8023364:	a370      	add	r3, pc, #448	; (adr r3, 8023528 <__ieee754_pow+0x9e8>)
 8023366:	e9d3 2300 	ldrd	r2, r3, [r3]
 802336a:	f7dd f94d 	bl	8000608 <__aeabi_dmul>
 802336e:	a370      	add	r3, pc, #448	; (adr r3, 8023530 <__ieee754_pow+0x9f0>)
 8023370:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023374:	4680      	mov	r8, r0
 8023376:	4689      	mov	r9, r1
 8023378:	4620      	mov	r0, r4
 802337a:	4629      	mov	r1, r5
 802337c:	f7dd f944 	bl	8000608 <__aeabi_dmul>
 8023380:	4602      	mov	r2, r0
 8023382:	460b      	mov	r3, r1
 8023384:	4640      	mov	r0, r8
 8023386:	4649      	mov	r1, r9
 8023388:	f7dc ff88 	bl	800029c <__adddf3>
 802338c:	4604      	mov	r4, r0
 802338e:	460d      	mov	r5, r1
 8023390:	4602      	mov	r2, r0
 8023392:	460b      	mov	r3, r1
 8023394:	4630      	mov	r0, r6
 8023396:	4639      	mov	r1, r7
 8023398:	f7dc ff80 	bl	800029c <__adddf3>
 802339c:	4632      	mov	r2, r6
 802339e:	463b      	mov	r3, r7
 80233a0:	4680      	mov	r8, r0
 80233a2:	4689      	mov	r9, r1
 80233a4:	f7dc ff78 	bl	8000298 <__aeabi_dsub>
 80233a8:	4602      	mov	r2, r0
 80233aa:	460b      	mov	r3, r1
 80233ac:	4620      	mov	r0, r4
 80233ae:	4629      	mov	r1, r5
 80233b0:	f7dc ff72 	bl	8000298 <__aeabi_dsub>
 80233b4:	4642      	mov	r2, r8
 80233b6:	4606      	mov	r6, r0
 80233b8:	460f      	mov	r7, r1
 80233ba:	464b      	mov	r3, r9
 80233bc:	4640      	mov	r0, r8
 80233be:	4649      	mov	r1, r9
 80233c0:	f7dd f922 	bl	8000608 <__aeabi_dmul>
 80233c4:	a35c      	add	r3, pc, #368	; (adr r3, 8023538 <__ieee754_pow+0x9f8>)
 80233c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80233ca:	4604      	mov	r4, r0
 80233cc:	460d      	mov	r5, r1
 80233ce:	f7dd f91b 	bl	8000608 <__aeabi_dmul>
 80233d2:	a35b      	add	r3, pc, #364	; (adr r3, 8023540 <__ieee754_pow+0xa00>)
 80233d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80233d8:	f7dc ff5e 	bl	8000298 <__aeabi_dsub>
 80233dc:	4622      	mov	r2, r4
 80233de:	462b      	mov	r3, r5
 80233e0:	f7dd f912 	bl	8000608 <__aeabi_dmul>
 80233e4:	a358      	add	r3, pc, #352	; (adr r3, 8023548 <__ieee754_pow+0xa08>)
 80233e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80233ea:	f7dc ff57 	bl	800029c <__adddf3>
 80233ee:	4622      	mov	r2, r4
 80233f0:	462b      	mov	r3, r5
 80233f2:	f7dd f909 	bl	8000608 <__aeabi_dmul>
 80233f6:	a356      	add	r3, pc, #344	; (adr r3, 8023550 <__ieee754_pow+0xa10>)
 80233f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80233fc:	f7dc ff4c 	bl	8000298 <__aeabi_dsub>
 8023400:	4622      	mov	r2, r4
 8023402:	462b      	mov	r3, r5
 8023404:	f7dd f900 	bl	8000608 <__aeabi_dmul>
 8023408:	a353      	add	r3, pc, #332	; (adr r3, 8023558 <__ieee754_pow+0xa18>)
 802340a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802340e:	f7dc ff45 	bl	800029c <__adddf3>
 8023412:	4622      	mov	r2, r4
 8023414:	462b      	mov	r3, r5
 8023416:	f7dd f8f7 	bl	8000608 <__aeabi_dmul>
 802341a:	4602      	mov	r2, r0
 802341c:	460b      	mov	r3, r1
 802341e:	4640      	mov	r0, r8
 8023420:	4649      	mov	r1, r9
 8023422:	f7dc ff39 	bl	8000298 <__aeabi_dsub>
 8023426:	4604      	mov	r4, r0
 8023428:	460d      	mov	r5, r1
 802342a:	4602      	mov	r2, r0
 802342c:	460b      	mov	r3, r1
 802342e:	4640      	mov	r0, r8
 8023430:	4649      	mov	r1, r9
 8023432:	f7dd f8e9 	bl	8000608 <__aeabi_dmul>
 8023436:	2200      	movs	r2, #0
 8023438:	ec41 0b19 	vmov	d9, r0, r1
 802343c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8023440:	4620      	mov	r0, r4
 8023442:	4629      	mov	r1, r5
 8023444:	f7dc ff28 	bl	8000298 <__aeabi_dsub>
 8023448:	4602      	mov	r2, r0
 802344a:	460b      	mov	r3, r1
 802344c:	ec51 0b19 	vmov	r0, r1, d9
 8023450:	f7dd fa04 	bl	800085c <__aeabi_ddiv>
 8023454:	4632      	mov	r2, r6
 8023456:	4604      	mov	r4, r0
 8023458:	460d      	mov	r5, r1
 802345a:	463b      	mov	r3, r7
 802345c:	4640      	mov	r0, r8
 802345e:	4649      	mov	r1, r9
 8023460:	f7dd f8d2 	bl	8000608 <__aeabi_dmul>
 8023464:	4632      	mov	r2, r6
 8023466:	463b      	mov	r3, r7
 8023468:	f7dc ff18 	bl	800029c <__adddf3>
 802346c:	4602      	mov	r2, r0
 802346e:	460b      	mov	r3, r1
 8023470:	4620      	mov	r0, r4
 8023472:	4629      	mov	r1, r5
 8023474:	f7dc ff10 	bl	8000298 <__aeabi_dsub>
 8023478:	4642      	mov	r2, r8
 802347a:	464b      	mov	r3, r9
 802347c:	f7dc ff0c 	bl	8000298 <__aeabi_dsub>
 8023480:	460b      	mov	r3, r1
 8023482:	4602      	mov	r2, r0
 8023484:	493a      	ldr	r1, [pc, #232]	; (8023570 <__ieee754_pow+0xa30>)
 8023486:	2000      	movs	r0, #0
 8023488:	f7dc ff06 	bl	8000298 <__aeabi_dsub>
 802348c:	e9cd 0100 	strd	r0, r1, [sp]
 8023490:	9b01      	ldr	r3, [sp, #4]
 8023492:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8023496:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 802349a:	da2f      	bge.n	80234fc <__ieee754_pow+0x9bc>
 802349c:	4650      	mov	r0, sl
 802349e:	ed9d 0b00 	vldr	d0, [sp]
 80234a2:	f000 f9cd 	bl	8023840 <scalbn>
 80234a6:	ec51 0b10 	vmov	r0, r1, d0
 80234aa:	ec53 2b18 	vmov	r2, r3, d8
 80234ae:	f7ff bbe0 	b.w	8022c72 <__ieee754_pow+0x132>
 80234b2:	4b30      	ldr	r3, [pc, #192]	; (8023574 <__ieee754_pow+0xa34>)
 80234b4:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 80234b8:	429e      	cmp	r6, r3
 80234ba:	f77f af0b 	ble.w	80232d4 <__ieee754_pow+0x794>
 80234be:	4b2e      	ldr	r3, [pc, #184]	; (8023578 <__ieee754_pow+0xa38>)
 80234c0:	440b      	add	r3, r1
 80234c2:	4303      	orrs	r3, r0
 80234c4:	d00b      	beq.n	80234de <__ieee754_pow+0x99e>
 80234c6:	a326      	add	r3, pc, #152	; (adr r3, 8023560 <__ieee754_pow+0xa20>)
 80234c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80234cc:	ec51 0b18 	vmov	r0, r1, d8
 80234d0:	f7dd f89a 	bl	8000608 <__aeabi_dmul>
 80234d4:	a322      	add	r3, pc, #136	; (adr r3, 8023560 <__ieee754_pow+0xa20>)
 80234d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80234da:	f7ff bbca 	b.w	8022c72 <__ieee754_pow+0x132>
 80234de:	4622      	mov	r2, r4
 80234e0:	462b      	mov	r3, r5
 80234e2:	f7dc fed9 	bl	8000298 <__aeabi_dsub>
 80234e6:	4642      	mov	r2, r8
 80234e8:	464b      	mov	r3, r9
 80234ea:	f7dd fb13 	bl	8000b14 <__aeabi_dcmpge>
 80234ee:	2800      	cmp	r0, #0
 80234f0:	f43f aef0 	beq.w	80232d4 <__ieee754_pow+0x794>
 80234f4:	e7e7      	b.n	80234c6 <__ieee754_pow+0x986>
 80234f6:	f04f 0a00 	mov.w	sl, #0
 80234fa:	e717      	b.n	802332c <__ieee754_pow+0x7ec>
 80234fc:	e9dd 0100 	ldrd	r0, r1, [sp]
 8023500:	4619      	mov	r1, r3
 8023502:	e7d2      	b.n	80234aa <__ieee754_pow+0x96a>
 8023504:	491a      	ldr	r1, [pc, #104]	; (8023570 <__ieee754_pow+0xa30>)
 8023506:	2000      	movs	r0, #0
 8023508:	f7ff bb9e 	b.w	8022c48 <__ieee754_pow+0x108>
 802350c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8023510:	f7ff bb9a 	b.w	8022c48 <__ieee754_pow+0x108>
 8023514:	9000      	str	r0, [sp, #0]
 8023516:	f7ff bb76 	b.w	8022c06 <__ieee754_pow+0xc6>
 802351a:	2100      	movs	r1, #0
 802351c:	f7ff bb60 	b.w	8022be0 <__ieee754_pow+0xa0>
 8023520:	00000000 	.word	0x00000000
 8023524:	3fe62e43 	.word	0x3fe62e43
 8023528:	fefa39ef 	.word	0xfefa39ef
 802352c:	3fe62e42 	.word	0x3fe62e42
 8023530:	0ca86c39 	.word	0x0ca86c39
 8023534:	be205c61 	.word	0xbe205c61
 8023538:	72bea4d0 	.word	0x72bea4d0
 802353c:	3e663769 	.word	0x3e663769
 8023540:	c5d26bf1 	.word	0xc5d26bf1
 8023544:	3ebbbd41 	.word	0x3ebbbd41
 8023548:	af25de2c 	.word	0xaf25de2c
 802354c:	3f11566a 	.word	0x3f11566a
 8023550:	16bebd93 	.word	0x16bebd93
 8023554:	3f66c16c 	.word	0x3f66c16c
 8023558:	5555553e 	.word	0x5555553e
 802355c:	3fc55555 	.word	0x3fc55555
 8023560:	c2f8f359 	.word	0xc2f8f359
 8023564:	01a56e1f 	.word	0x01a56e1f
 8023568:	3fe00000 	.word	0x3fe00000
 802356c:	000fffff 	.word	0x000fffff
 8023570:	3ff00000 	.word	0x3ff00000
 8023574:	4090cbff 	.word	0x4090cbff
 8023578:	3f6f3400 	.word	0x3f6f3400
 802357c:	652b82fe 	.word	0x652b82fe
 8023580:	3c971547 	.word	0x3c971547

08023584 <__ieee754_sqrt>:
 8023584:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8023588:	ec55 4b10 	vmov	r4, r5, d0
 802358c:	4e56      	ldr	r6, [pc, #344]	; (80236e8 <__ieee754_sqrt+0x164>)
 802358e:	43ae      	bics	r6, r5
 8023590:	ee10 0a10 	vmov	r0, s0
 8023594:	ee10 3a10 	vmov	r3, s0
 8023598:	4629      	mov	r1, r5
 802359a:	462a      	mov	r2, r5
 802359c:	d110      	bne.n	80235c0 <__ieee754_sqrt+0x3c>
 802359e:	ee10 2a10 	vmov	r2, s0
 80235a2:	462b      	mov	r3, r5
 80235a4:	f7dd f830 	bl	8000608 <__aeabi_dmul>
 80235a8:	4602      	mov	r2, r0
 80235aa:	460b      	mov	r3, r1
 80235ac:	4620      	mov	r0, r4
 80235ae:	4629      	mov	r1, r5
 80235b0:	f7dc fe74 	bl	800029c <__adddf3>
 80235b4:	4604      	mov	r4, r0
 80235b6:	460d      	mov	r5, r1
 80235b8:	ec45 4b10 	vmov	d0, r4, r5
 80235bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80235c0:	2d00      	cmp	r5, #0
 80235c2:	dc10      	bgt.n	80235e6 <__ieee754_sqrt+0x62>
 80235c4:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80235c8:	4330      	orrs	r0, r6
 80235ca:	d0f5      	beq.n	80235b8 <__ieee754_sqrt+0x34>
 80235cc:	b15d      	cbz	r5, 80235e6 <__ieee754_sqrt+0x62>
 80235ce:	ee10 2a10 	vmov	r2, s0
 80235d2:	462b      	mov	r3, r5
 80235d4:	ee10 0a10 	vmov	r0, s0
 80235d8:	f7dc fe5e 	bl	8000298 <__aeabi_dsub>
 80235dc:	4602      	mov	r2, r0
 80235de:	460b      	mov	r3, r1
 80235e0:	f7dd f93c 	bl	800085c <__aeabi_ddiv>
 80235e4:	e7e6      	b.n	80235b4 <__ieee754_sqrt+0x30>
 80235e6:	1509      	asrs	r1, r1, #20
 80235e8:	d076      	beq.n	80236d8 <__ieee754_sqrt+0x154>
 80235ea:	f3c2 0213 	ubfx	r2, r2, #0, #20
 80235ee:	07ce      	lsls	r6, r1, #31
 80235f0:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 80235f4:	bf5e      	ittt	pl
 80235f6:	0fda      	lsrpl	r2, r3, #31
 80235f8:	005b      	lslpl	r3, r3, #1
 80235fa:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 80235fe:	0fda      	lsrs	r2, r3, #31
 8023600:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 8023604:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 8023608:	2000      	movs	r0, #0
 802360a:	106d      	asrs	r5, r5, #1
 802360c:	005b      	lsls	r3, r3, #1
 802360e:	f04f 0e16 	mov.w	lr, #22
 8023612:	4684      	mov	ip, r0
 8023614:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8023618:	eb0c 0401 	add.w	r4, ip, r1
 802361c:	4294      	cmp	r4, r2
 802361e:	bfde      	ittt	le
 8023620:	1b12      	suble	r2, r2, r4
 8023622:	eb04 0c01 	addle.w	ip, r4, r1
 8023626:	1840      	addle	r0, r0, r1
 8023628:	0052      	lsls	r2, r2, #1
 802362a:	f1be 0e01 	subs.w	lr, lr, #1
 802362e:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 8023632:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8023636:	ea4f 0343 	mov.w	r3, r3, lsl #1
 802363a:	d1ed      	bne.n	8023618 <__ieee754_sqrt+0x94>
 802363c:	4671      	mov	r1, lr
 802363e:	2720      	movs	r7, #32
 8023640:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8023644:	4562      	cmp	r2, ip
 8023646:	eb04 060e 	add.w	r6, r4, lr
 802364a:	dc02      	bgt.n	8023652 <__ieee754_sqrt+0xce>
 802364c:	d113      	bne.n	8023676 <__ieee754_sqrt+0xf2>
 802364e:	429e      	cmp	r6, r3
 8023650:	d811      	bhi.n	8023676 <__ieee754_sqrt+0xf2>
 8023652:	2e00      	cmp	r6, #0
 8023654:	eb06 0e04 	add.w	lr, r6, r4
 8023658:	da43      	bge.n	80236e2 <__ieee754_sqrt+0x15e>
 802365a:	f1be 0f00 	cmp.w	lr, #0
 802365e:	db40      	blt.n	80236e2 <__ieee754_sqrt+0x15e>
 8023660:	f10c 0801 	add.w	r8, ip, #1
 8023664:	eba2 020c 	sub.w	r2, r2, ip
 8023668:	429e      	cmp	r6, r3
 802366a:	bf88      	it	hi
 802366c:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8023670:	1b9b      	subs	r3, r3, r6
 8023672:	4421      	add	r1, r4
 8023674:	46c4      	mov	ip, r8
 8023676:	0052      	lsls	r2, r2, #1
 8023678:	3f01      	subs	r7, #1
 802367a:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 802367e:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8023682:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8023686:	d1dd      	bne.n	8023644 <__ieee754_sqrt+0xc0>
 8023688:	4313      	orrs	r3, r2
 802368a:	d006      	beq.n	802369a <__ieee754_sqrt+0x116>
 802368c:	1c4c      	adds	r4, r1, #1
 802368e:	bf13      	iteet	ne
 8023690:	3101      	addne	r1, #1
 8023692:	3001      	addeq	r0, #1
 8023694:	4639      	moveq	r1, r7
 8023696:	f021 0101 	bicne.w	r1, r1, #1
 802369a:	1043      	asrs	r3, r0, #1
 802369c:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 80236a0:	0849      	lsrs	r1, r1, #1
 80236a2:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 80236a6:	07c2      	lsls	r2, r0, #31
 80236a8:	bf48      	it	mi
 80236aa:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 80236ae:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 80236b2:	460c      	mov	r4, r1
 80236b4:	463d      	mov	r5, r7
 80236b6:	e77f      	b.n	80235b8 <__ieee754_sqrt+0x34>
 80236b8:	0ada      	lsrs	r2, r3, #11
 80236ba:	3815      	subs	r0, #21
 80236bc:	055b      	lsls	r3, r3, #21
 80236be:	2a00      	cmp	r2, #0
 80236c0:	d0fa      	beq.n	80236b8 <__ieee754_sqrt+0x134>
 80236c2:	02d7      	lsls	r7, r2, #11
 80236c4:	d50a      	bpl.n	80236dc <__ieee754_sqrt+0x158>
 80236c6:	f1c1 0420 	rsb	r4, r1, #32
 80236ca:	fa23 f404 	lsr.w	r4, r3, r4
 80236ce:	1e4d      	subs	r5, r1, #1
 80236d0:	408b      	lsls	r3, r1
 80236d2:	4322      	orrs	r2, r4
 80236d4:	1b41      	subs	r1, r0, r5
 80236d6:	e788      	b.n	80235ea <__ieee754_sqrt+0x66>
 80236d8:	4608      	mov	r0, r1
 80236da:	e7f0      	b.n	80236be <__ieee754_sqrt+0x13a>
 80236dc:	0052      	lsls	r2, r2, #1
 80236de:	3101      	adds	r1, #1
 80236e0:	e7ef      	b.n	80236c2 <__ieee754_sqrt+0x13e>
 80236e2:	46e0      	mov	r8, ip
 80236e4:	e7be      	b.n	8023664 <__ieee754_sqrt+0xe0>
 80236e6:	bf00      	nop
 80236e8:	7ff00000 	.word	0x7ff00000

080236ec <fabs>:
 80236ec:	ec51 0b10 	vmov	r0, r1, d0
 80236f0:	ee10 2a10 	vmov	r2, s0
 80236f4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80236f8:	ec43 2b10 	vmov	d0, r2, r3
 80236fc:	4770      	bx	lr

080236fe <finite>:
 80236fe:	b082      	sub	sp, #8
 8023700:	ed8d 0b00 	vstr	d0, [sp]
 8023704:	9801      	ldr	r0, [sp, #4]
 8023706:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 802370a:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 802370e:	0fc0      	lsrs	r0, r0, #31
 8023710:	b002      	add	sp, #8
 8023712:	4770      	bx	lr
 8023714:	0000      	movs	r0, r0
	...

08023718 <nan>:
 8023718:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8023720 <nan+0x8>
 802371c:	4770      	bx	lr
 802371e:	bf00      	nop
 8023720:	00000000 	.word	0x00000000
 8023724:	7ff80000 	.word	0x7ff80000

08023728 <rint>:
 8023728:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 802372a:	ec51 0b10 	vmov	r0, r1, d0
 802372e:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8023732:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 8023736:	2e13      	cmp	r6, #19
 8023738:	ee10 4a10 	vmov	r4, s0
 802373c:	460b      	mov	r3, r1
 802373e:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 8023742:	dc58      	bgt.n	80237f6 <rint+0xce>
 8023744:	2e00      	cmp	r6, #0
 8023746:	da2b      	bge.n	80237a0 <rint+0x78>
 8023748:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 802374c:	4302      	orrs	r2, r0
 802374e:	d023      	beq.n	8023798 <rint+0x70>
 8023750:	f3c1 0213 	ubfx	r2, r1, #0, #20
 8023754:	4302      	orrs	r2, r0
 8023756:	4254      	negs	r4, r2
 8023758:	4314      	orrs	r4, r2
 802375a:	0c4b      	lsrs	r3, r1, #17
 802375c:	0b24      	lsrs	r4, r4, #12
 802375e:	045b      	lsls	r3, r3, #17
 8023760:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 8023764:	ea44 0103 	orr.w	r1, r4, r3
 8023768:	4b32      	ldr	r3, [pc, #200]	; (8023834 <rint+0x10c>)
 802376a:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 802376e:	e9d3 6700 	ldrd	r6, r7, [r3]
 8023772:	4602      	mov	r2, r0
 8023774:	460b      	mov	r3, r1
 8023776:	4630      	mov	r0, r6
 8023778:	4639      	mov	r1, r7
 802377a:	f7dc fd8f 	bl	800029c <__adddf3>
 802377e:	e9cd 0100 	strd	r0, r1, [sp]
 8023782:	463b      	mov	r3, r7
 8023784:	e9dd 0100 	ldrd	r0, r1, [sp]
 8023788:	4632      	mov	r2, r6
 802378a:	f7dc fd85 	bl	8000298 <__aeabi_dsub>
 802378e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8023792:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 8023796:	4639      	mov	r1, r7
 8023798:	ec41 0b10 	vmov	d0, r0, r1
 802379c:	b003      	add	sp, #12
 802379e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80237a0:	4a25      	ldr	r2, [pc, #148]	; (8023838 <rint+0x110>)
 80237a2:	4132      	asrs	r2, r6
 80237a4:	ea01 0702 	and.w	r7, r1, r2
 80237a8:	4307      	orrs	r7, r0
 80237aa:	d0f5      	beq.n	8023798 <rint+0x70>
 80237ac:	0851      	lsrs	r1, r2, #1
 80237ae:	ea03 0252 	and.w	r2, r3, r2, lsr #1
 80237b2:	4314      	orrs	r4, r2
 80237b4:	d00c      	beq.n	80237d0 <rint+0xa8>
 80237b6:	ea23 0201 	bic.w	r2, r3, r1
 80237ba:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80237be:	2e13      	cmp	r6, #19
 80237c0:	fa43 f606 	asr.w	r6, r3, r6
 80237c4:	bf0c      	ite	eq
 80237c6:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 80237ca:	2400      	movne	r4, #0
 80237cc:	ea42 0306 	orr.w	r3, r2, r6
 80237d0:	4918      	ldr	r1, [pc, #96]	; (8023834 <rint+0x10c>)
 80237d2:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 80237d6:	4622      	mov	r2, r4
 80237d8:	e9d5 4500 	ldrd	r4, r5, [r5]
 80237dc:	4620      	mov	r0, r4
 80237de:	4629      	mov	r1, r5
 80237e0:	f7dc fd5c 	bl	800029c <__adddf3>
 80237e4:	e9cd 0100 	strd	r0, r1, [sp]
 80237e8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80237ec:	4622      	mov	r2, r4
 80237ee:	462b      	mov	r3, r5
 80237f0:	f7dc fd52 	bl	8000298 <__aeabi_dsub>
 80237f4:	e7d0      	b.n	8023798 <rint+0x70>
 80237f6:	2e33      	cmp	r6, #51	; 0x33
 80237f8:	dd07      	ble.n	802380a <rint+0xe2>
 80237fa:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80237fe:	d1cb      	bne.n	8023798 <rint+0x70>
 8023800:	ee10 2a10 	vmov	r2, s0
 8023804:	f7dc fd4a 	bl	800029c <__adddf3>
 8023808:	e7c6      	b.n	8023798 <rint+0x70>
 802380a:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 802380e:	f04f 36ff 	mov.w	r6, #4294967295
 8023812:	40d6      	lsrs	r6, r2
 8023814:	4230      	tst	r0, r6
 8023816:	d0bf      	beq.n	8023798 <rint+0x70>
 8023818:	ea14 0056 	ands.w	r0, r4, r6, lsr #1
 802381c:	ea4f 0156 	mov.w	r1, r6, lsr #1
 8023820:	bf1f      	itttt	ne
 8023822:	ea24 0101 	bicne.w	r1, r4, r1
 8023826:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 802382a:	fa44 f202 	asrne.w	r2, r4, r2
 802382e:	ea41 0402 	orrne.w	r4, r1, r2
 8023832:	e7cd      	b.n	80237d0 <rint+0xa8>
 8023834:	0802d2f8 	.word	0x0802d2f8
 8023838:	000fffff 	.word	0x000fffff
 802383c:	00000000 	.word	0x00000000

08023840 <scalbn>:
 8023840:	b570      	push	{r4, r5, r6, lr}
 8023842:	ec55 4b10 	vmov	r4, r5, d0
 8023846:	f3c5 520a 	ubfx	r2, r5, #20, #11
 802384a:	4606      	mov	r6, r0
 802384c:	462b      	mov	r3, r5
 802384e:	b99a      	cbnz	r2, 8023878 <scalbn+0x38>
 8023850:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8023854:	4323      	orrs	r3, r4
 8023856:	d036      	beq.n	80238c6 <scalbn+0x86>
 8023858:	4b39      	ldr	r3, [pc, #228]	; (8023940 <scalbn+0x100>)
 802385a:	4629      	mov	r1, r5
 802385c:	ee10 0a10 	vmov	r0, s0
 8023860:	2200      	movs	r2, #0
 8023862:	f7dc fed1 	bl	8000608 <__aeabi_dmul>
 8023866:	4b37      	ldr	r3, [pc, #220]	; (8023944 <scalbn+0x104>)
 8023868:	429e      	cmp	r6, r3
 802386a:	4604      	mov	r4, r0
 802386c:	460d      	mov	r5, r1
 802386e:	da10      	bge.n	8023892 <scalbn+0x52>
 8023870:	a32b      	add	r3, pc, #172	; (adr r3, 8023920 <scalbn+0xe0>)
 8023872:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023876:	e03a      	b.n	80238ee <scalbn+0xae>
 8023878:	f240 71ff 	movw	r1, #2047	; 0x7ff
 802387c:	428a      	cmp	r2, r1
 802387e:	d10c      	bne.n	802389a <scalbn+0x5a>
 8023880:	ee10 2a10 	vmov	r2, s0
 8023884:	4620      	mov	r0, r4
 8023886:	4629      	mov	r1, r5
 8023888:	f7dc fd08 	bl	800029c <__adddf3>
 802388c:	4604      	mov	r4, r0
 802388e:	460d      	mov	r5, r1
 8023890:	e019      	b.n	80238c6 <scalbn+0x86>
 8023892:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8023896:	460b      	mov	r3, r1
 8023898:	3a36      	subs	r2, #54	; 0x36
 802389a:	4432      	add	r2, r6
 802389c:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80238a0:	428a      	cmp	r2, r1
 80238a2:	dd08      	ble.n	80238b6 <scalbn+0x76>
 80238a4:	2d00      	cmp	r5, #0
 80238a6:	a120      	add	r1, pc, #128	; (adr r1, 8023928 <scalbn+0xe8>)
 80238a8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80238ac:	da1c      	bge.n	80238e8 <scalbn+0xa8>
 80238ae:	a120      	add	r1, pc, #128	; (adr r1, 8023930 <scalbn+0xf0>)
 80238b0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80238b4:	e018      	b.n	80238e8 <scalbn+0xa8>
 80238b6:	2a00      	cmp	r2, #0
 80238b8:	dd08      	ble.n	80238cc <scalbn+0x8c>
 80238ba:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80238be:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80238c2:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80238c6:	ec45 4b10 	vmov	d0, r4, r5
 80238ca:	bd70      	pop	{r4, r5, r6, pc}
 80238cc:	f112 0f35 	cmn.w	r2, #53	; 0x35
 80238d0:	da19      	bge.n	8023906 <scalbn+0xc6>
 80238d2:	f24c 3350 	movw	r3, #50000	; 0xc350
 80238d6:	429e      	cmp	r6, r3
 80238d8:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 80238dc:	dd0a      	ble.n	80238f4 <scalbn+0xb4>
 80238de:	a112      	add	r1, pc, #72	; (adr r1, 8023928 <scalbn+0xe8>)
 80238e0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80238e4:	2b00      	cmp	r3, #0
 80238e6:	d1e2      	bne.n	80238ae <scalbn+0x6e>
 80238e8:	a30f      	add	r3, pc, #60	; (adr r3, 8023928 <scalbn+0xe8>)
 80238ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80238ee:	f7dc fe8b 	bl	8000608 <__aeabi_dmul>
 80238f2:	e7cb      	b.n	802388c <scalbn+0x4c>
 80238f4:	a10a      	add	r1, pc, #40	; (adr r1, 8023920 <scalbn+0xe0>)
 80238f6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80238fa:	2b00      	cmp	r3, #0
 80238fc:	d0b8      	beq.n	8023870 <scalbn+0x30>
 80238fe:	a10e      	add	r1, pc, #56	; (adr r1, 8023938 <scalbn+0xf8>)
 8023900:	e9d1 0100 	ldrd	r0, r1, [r1]
 8023904:	e7b4      	b.n	8023870 <scalbn+0x30>
 8023906:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 802390a:	3236      	adds	r2, #54	; 0x36
 802390c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8023910:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8023914:	4620      	mov	r0, r4
 8023916:	4b0c      	ldr	r3, [pc, #48]	; (8023948 <scalbn+0x108>)
 8023918:	2200      	movs	r2, #0
 802391a:	e7e8      	b.n	80238ee <scalbn+0xae>
 802391c:	f3af 8000 	nop.w
 8023920:	c2f8f359 	.word	0xc2f8f359
 8023924:	01a56e1f 	.word	0x01a56e1f
 8023928:	8800759c 	.word	0x8800759c
 802392c:	7e37e43c 	.word	0x7e37e43c
 8023930:	8800759c 	.word	0x8800759c
 8023934:	fe37e43c 	.word	0xfe37e43c
 8023938:	c2f8f359 	.word	0xc2f8f359
 802393c:	81a56e1f 	.word	0x81a56e1f
 8023940:	43500000 	.word	0x43500000
 8023944:	ffff3cb0 	.word	0xffff3cb0
 8023948:	3c900000 	.word	0x3c900000

0802394c <_init>:
 802394c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802394e:	bf00      	nop
 8023950:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8023952:	bc08      	pop	{r3}
 8023954:	469e      	mov	lr, r3
 8023956:	4770      	bx	lr

08023958 <_fini>:
 8023958:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802395a:	bf00      	nop
 802395c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802395e:	bc08      	pop	{r3}
 8023960:	469e      	mov	lr, r3
 8023962:	4770      	bx	lr
