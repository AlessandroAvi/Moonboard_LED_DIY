
STM_Moon_LED.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005450  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000007c  080055f0  080055f0  000155f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800566c  0800566c  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  0800566c  0800566c  0001566c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005674  08005674  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005674  08005674  00015674  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005678  08005678  00015678  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  0800567c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005008  20000070  080056ec  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20005078  080056ec  00025078  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012db0  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002956  00000000  00000000  00032e50  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001008  00000000  00000000  000357a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000ef0  00000000  00000000  000367b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000181be  00000000  00000000  000376a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000e3e8  00000000  00000000  0004f85e  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000903e5  00000000  00000000  0005dc46  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000ee02b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000045c8  00000000  00000000  000ee0a8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000070 	.word	0x20000070
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080055d8 	.word	0x080055d8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000074 	.word	0x20000074
 80001dc:	080055d8 	.word	0x080055d8

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b972 	b.w	800058c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9e08      	ldr	r6, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	4688      	mov	r8, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14b      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4615      	mov	r5, r2
 80002d2:	d967      	bls.n	80003a4 <__udivmoddi4+0xe4>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b14a      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002da:	f1c2 0720 	rsb	r7, r2, #32
 80002de:	fa01 f302 	lsl.w	r3, r1, r2
 80002e2:	fa20 f707 	lsr.w	r7, r0, r7
 80002e6:	4095      	lsls	r5, r2
 80002e8:	ea47 0803 	orr.w	r8, r7, r3
 80002ec:	4094      	lsls	r4, r2
 80002ee:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f2:	0c23      	lsrs	r3, r4, #16
 80002f4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002f8:	fa1f fc85 	uxth.w	ip, r5
 80002fc:	fb0e 8817 	mls	r8, lr, r7, r8
 8000300:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000304:	fb07 f10c 	mul.w	r1, r7, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d909      	bls.n	8000320 <__udivmoddi4+0x60>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000312:	f080 811b 	bcs.w	800054c <__udivmoddi4+0x28c>
 8000316:	4299      	cmp	r1, r3
 8000318:	f240 8118 	bls.w	800054c <__udivmoddi4+0x28c>
 800031c:	3f02      	subs	r7, #2
 800031e:	442b      	add	r3, r5
 8000320:	1a5b      	subs	r3, r3, r1
 8000322:	b2a4      	uxth	r4, r4
 8000324:	fbb3 f0fe 	udiv	r0, r3, lr
 8000328:	fb0e 3310 	mls	r3, lr, r0, r3
 800032c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000330:	fb00 fc0c 	mul.w	ip, r0, ip
 8000334:	45a4      	cmp	ip, r4
 8000336:	d909      	bls.n	800034c <__udivmoddi4+0x8c>
 8000338:	192c      	adds	r4, r5, r4
 800033a:	f100 33ff 	add.w	r3, r0, #4294967295
 800033e:	f080 8107 	bcs.w	8000550 <__udivmoddi4+0x290>
 8000342:	45a4      	cmp	ip, r4
 8000344:	f240 8104 	bls.w	8000550 <__udivmoddi4+0x290>
 8000348:	3802      	subs	r0, #2
 800034a:	442c      	add	r4, r5
 800034c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000350:	eba4 040c 	sub.w	r4, r4, ip
 8000354:	2700      	movs	r7, #0
 8000356:	b11e      	cbz	r6, 8000360 <__udivmoddi4+0xa0>
 8000358:	40d4      	lsrs	r4, r2
 800035a:	2300      	movs	r3, #0
 800035c:	e9c6 4300 	strd	r4, r3, [r6]
 8000360:	4639      	mov	r1, r7
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d909      	bls.n	800037e <__udivmoddi4+0xbe>
 800036a:	2e00      	cmp	r6, #0
 800036c:	f000 80eb 	beq.w	8000546 <__udivmoddi4+0x286>
 8000370:	2700      	movs	r7, #0
 8000372:	e9c6 0100 	strd	r0, r1, [r6]
 8000376:	4638      	mov	r0, r7
 8000378:	4639      	mov	r1, r7
 800037a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037e:	fab3 f783 	clz	r7, r3
 8000382:	2f00      	cmp	r7, #0
 8000384:	d147      	bne.n	8000416 <__udivmoddi4+0x156>
 8000386:	428b      	cmp	r3, r1
 8000388:	d302      	bcc.n	8000390 <__udivmoddi4+0xd0>
 800038a:	4282      	cmp	r2, r0
 800038c:	f200 80fa 	bhi.w	8000584 <__udivmoddi4+0x2c4>
 8000390:	1a84      	subs	r4, r0, r2
 8000392:	eb61 0303 	sbc.w	r3, r1, r3
 8000396:	2001      	movs	r0, #1
 8000398:	4698      	mov	r8, r3
 800039a:	2e00      	cmp	r6, #0
 800039c:	d0e0      	beq.n	8000360 <__udivmoddi4+0xa0>
 800039e:	e9c6 4800 	strd	r4, r8, [r6]
 80003a2:	e7dd      	b.n	8000360 <__udivmoddi4+0xa0>
 80003a4:	b902      	cbnz	r2, 80003a8 <__udivmoddi4+0xe8>
 80003a6:	deff      	udf	#255	; 0xff
 80003a8:	fab2 f282 	clz	r2, r2
 80003ac:	2a00      	cmp	r2, #0
 80003ae:	f040 808f 	bne.w	80004d0 <__udivmoddi4+0x210>
 80003b2:	1b49      	subs	r1, r1, r5
 80003b4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003b8:	fa1f f885 	uxth.w	r8, r5
 80003bc:	2701      	movs	r7, #1
 80003be:	fbb1 fcfe 	udiv	ip, r1, lr
 80003c2:	0c23      	lsrs	r3, r4, #16
 80003c4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003c8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003cc:	fb08 f10c 	mul.w	r1, r8, ip
 80003d0:	4299      	cmp	r1, r3
 80003d2:	d907      	bls.n	80003e4 <__udivmoddi4+0x124>
 80003d4:	18eb      	adds	r3, r5, r3
 80003d6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x122>
 80003dc:	4299      	cmp	r1, r3
 80003de:	f200 80cd 	bhi.w	800057c <__udivmoddi4+0x2bc>
 80003e2:	4684      	mov	ip, r0
 80003e4:	1a59      	subs	r1, r3, r1
 80003e6:	b2a3      	uxth	r3, r4
 80003e8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003ec:	fb0e 1410 	mls	r4, lr, r0, r1
 80003f0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003f4:	fb08 f800 	mul.w	r8, r8, r0
 80003f8:	45a0      	cmp	r8, r4
 80003fa:	d907      	bls.n	800040c <__udivmoddi4+0x14c>
 80003fc:	192c      	adds	r4, r5, r4
 80003fe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x14a>
 8000404:	45a0      	cmp	r8, r4
 8000406:	f200 80b6 	bhi.w	8000576 <__udivmoddi4+0x2b6>
 800040a:	4618      	mov	r0, r3
 800040c:	eba4 0408 	sub.w	r4, r4, r8
 8000410:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000414:	e79f      	b.n	8000356 <__udivmoddi4+0x96>
 8000416:	f1c7 0c20 	rsb	ip, r7, #32
 800041a:	40bb      	lsls	r3, r7
 800041c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000420:	ea4e 0e03 	orr.w	lr, lr, r3
 8000424:	fa01 f407 	lsl.w	r4, r1, r7
 8000428:	fa20 f50c 	lsr.w	r5, r0, ip
 800042c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000430:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000434:	4325      	orrs	r5, r4
 8000436:	fbb3 f9f8 	udiv	r9, r3, r8
 800043a:	0c2c      	lsrs	r4, r5, #16
 800043c:	fb08 3319 	mls	r3, r8, r9, r3
 8000440:	fa1f fa8e 	uxth.w	sl, lr
 8000444:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000448:	fb09 f40a 	mul.w	r4, r9, sl
 800044c:	429c      	cmp	r4, r3
 800044e:	fa02 f207 	lsl.w	r2, r2, r7
 8000452:	fa00 f107 	lsl.w	r1, r0, r7
 8000456:	d90b      	bls.n	8000470 <__udivmoddi4+0x1b0>
 8000458:	eb1e 0303 	adds.w	r3, lr, r3
 800045c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000460:	f080 8087 	bcs.w	8000572 <__udivmoddi4+0x2b2>
 8000464:	429c      	cmp	r4, r3
 8000466:	f240 8084 	bls.w	8000572 <__udivmoddi4+0x2b2>
 800046a:	f1a9 0902 	sub.w	r9, r9, #2
 800046e:	4473      	add	r3, lr
 8000470:	1b1b      	subs	r3, r3, r4
 8000472:	b2ad      	uxth	r5, r5
 8000474:	fbb3 f0f8 	udiv	r0, r3, r8
 8000478:	fb08 3310 	mls	r3, r8, r0, r3
 800047c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000480:	fb00 fa0a 	mul.w	sl, r0, sl
 8000484:	45a2      	cmp	sl, r4
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x1da>
 8000488:	eb1e 0404 	adds.w	r4, lr, r4
 800048c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000490:	d26b      	bcs.n	800056a <__udivmoddi4+0x2aa>
 8000492:	45a2      	cmp	sl, r4
 8000494:	d969      	bls.n	800056a <__udivmoddi4+0x2aa>
 8000496:	3802      	subs	r0, #2
 8000498:	4474      	add	r4, lr
 800049a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800049e:	fba0 8902 	umull	r8, r9, r0, r2
 80004a2:	eba4 040a 	sub.w	r4, r4, sl
 80004a6:	454c      	cmp	r4, r9
 80004a8:	46c2      	mov	sl, r8
 80004aa:	464b      	mov	r3, r9
 80004ac:	d354      	bcc.n	8000558 <__udivmoddi4+0x298>
 80004ae:	d051      	beq.n	8000554 <__udivmoddi4+0x294>
 80004b0:	2e00      	cmp	r6, #0
 80004b2:	d069      	beq.n	8000588 <__udivmoddi4+0x2c8>
 80004b4:	ebb1 050a 	subs.w	r5, r1, sl
 80004b8:	eb64 0403 	sbc.w	r4, r4, r3
 80004bc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004c0:	40fd      	lsrs	r5, r7
 80004c2:	40fc      	lsrs	r4, r7
 80004c4:	ea4c 0505 	orr.w	r5, ip, r5
 80004c8:	e9c6 5400 	strd	r5, r4, [r6]
 80004cc:	2700      	movs	r7, #0
 80004ce:	e747      	b.n	8000360 <__udivmoddi4+0xa0>
 80004d0:	f1c2 0320 	rsb	r3, r2, #32
 80004d4:	fa20 f703 	lsr.w	r7, r0, r3
 80004d8:	4095      	lsls	r5, r2
 80004da:	fa01 f002 	lsl.w	r0, r1, r2
 80004de:	fa21 f303 	lsr.w	r3, r1, r3
 80004e2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004e6:	4338      	orrs	r0, r7
 80004e8:	0c01      	lsrs	r1, r0, #16
 80004ea:	fbb3 f7fe 	udiv	r7, r3, lr
 80004ee:	fa1f f885 	uxth.w	r8, r5
 80004f2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004fa:	fb07 f308 	mul.w	r3, r7, r8
 80004fe:	428b      	cmp	r3, r1
 8000500:	fa04 f402 	lsl.w	r4, r4, r2
 8000504:	d907      	bls.n	8000516 <__udivmoddi4+0x256>
 8000506:	1869      	adds	r1, r5, r1
 8000508:	f107 3cff 	add.w	ip, r7, #4294967295
 800050c:	d22f      	bcs.n	800056e <__udivmoddi4+0x2ae>
 800050e:	428b      	cmp	r3, r1
 8000510:	d92d      	bls.n	800056e <__udivmoddi4+0x2ae>
 8000512:	3f02      	subs	r7, #2
 8000514:	4429      	add	r1, r5
 8000516:	1acb      	subs	r3, r1, r3
 8000518:	b281      	uxth	r1, r0
 800051a:	fbb3 f0fe 	udiv	r0, r3, lr
 800051e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000522:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000526:	fb00 f308 	mul.w	r3, r0, r8
 800052a:	428b      	cmp	r3, r1
 800052c:	d907      	bls.n	800053e <__udivmoddi4+0x27e>
 800052e:	1869      	adds	r1, r5, r1
 8000530:	f100 3cff 	add.w	ip, r0, #4294967295
 8000534:	d217      	bcs.n	8000566 <__udivmoddi4+0x2a6>
 8000536:	428b      	cmp	r3, r1
 8000538:	d915      	bls.n	8000566 <__udivmoddi4+0x2a6>
 800053a:	3802      	subs	r0, #2
 800053c:	4429      	add	r1, r5
 800053e:	1ac9      	subs	r1, r1, r3
 8000540:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000544:	e73b      	b.n	80003be <__udivmoddi4+0xfe>
 8000546:	4637      	mov	r7, r6
 8000548:	4630      	mov	r0, r6
 800054a:	e709      	b.n	8000360 <__udivmoddi4+0xa0>
 800054c:	4607      	mov	r7, r0
 800054e:	e6e7      	b.n	8000320 <__udivmoddi4+0x60>
 8000550:	4618      	mov	r0, r3
 8000552:	e6fb      	b.n	800034c <__udivmoddi4+0x8c>
 8000554:	4541      	cmp	r1, r8
 8000556:	d2ab      	bcs.n	80004b0 <__udivmoddi4+0x1f0>
 8000558:	ebb8 0a02 	subs.w	sl, r8, r2
 800055c:	eb69 020e 	sbc.w	r2, r9, lr
 8000560:	3801      	subs	r0, #1
 8000562:	4613      	mov	r3, r2
 8000564:	e7a4      	b.n	80004b0 <__udivmoddi4+0x1f0>
 8000566:	4660      	mov	r0, ip
 8000568:	e7e9      	b.n	800053e <__udivmoddi4+0x27e>
 800056a:	4618      	mov	r0, r3
 800056c:	e795      	b.n	800049a <__udivmoddi4+0x1da>
 800056e:	4667      	mov	r7, ip
 8000570:	e7d1      	b.n	8000516 <__udivmoddi4+0x256>
 8000572:	4681      	mov	r9, r0
 8000574:	e77c      	b.n	8000470 <__udivmoddi4+0x1b0>
 8000576:	3802      	subs	r0, #2
 8000578:	442c      	add	r4, r5
 800057a:	e747      	b.n	800040c <__udivmoddi4+0x14c>
 800057c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000580:	442b      	add	r3, r5
 8000582:	e72f      	b.n	80003e4 <__udivmoddi4+0x124>
 8000584:	4638      	mov	r0, r7
 8000586:	e708      	b.n	800039a <__udivmoddi4+0xda>
 8000588:	4637      	mov	r7, r6
 800058a:	e6e9      	b.n	8000360 <__udivmoddi4+0xa0>

0800058c <__aeabi_idiv0>:
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop

08000590 <LED_setAllWhite>:

}



void LED_setAllWhite(){
 8000590:	b580      	push	{r7, lr}
 8000592:	b082      	sub	sp, #8
 8000594:	af00      	add	r7, sp, #0

	for(int i=0; i<MAX_LED; i++){
 8000596:	2300      	movs	r3, #0
 8000598:	607b      	str	r3, [r7, #4]
 800059a:	e020      	b.n	80005de <LED_setAllWhite+0x4e>
		LED_Data[i][1]=rand();
 800059c:	f004 fbda 	bl	8004d54 <rand>
 80005a0:	4603      	mov	r3, r0
 80005a2:	b2d9      	uxtb	r1, r3
 80005a4:	4a11      	ldr	r2, [pc, #68]	; (80005ec <LED_setAllWhite+0x5c>)
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	009b      	lsls	r3, r3, #2
 80005aa:	4413      	add	r3, r2
 80005ac:	460a      	mov	r2, r1
 80005ae:	705a      	strb	r2, [r3, #1]
		LED_Data[i][2]=rand();
 80005b0:	f004 fbd0 	bl	8004d54 <rand>
 80005b4:	4603      	mov	r3, r0
 80005b6:	b2d9      	uxtb	r1, r3
 80005b8:	4a0c      	ldr	r2, [pc, #48]	; (80005ec <LED_setAllWhite+0x5c>)
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	009b      	lsls	r3, r3, #2
 80005be:	4413      	add	r3, r2
 80005c0:	460a      	mov	r2, r1
 80005c2:	709a      	strb	r2, [r3, #2]
		LED_Data[i][3]=rand();
 80005c4:	f004 fbc6 	bl	8004d54 <rand>
 80005c8:	4603      	mov	r3, r0
 80005ca:	b2d9      	uxtb	r1, r3
 80005cc:	4a07      	ldr	r2, [pc, #28]	; (80005ec <LED_setAllWhite+0x5c>)
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	009b      	lsls	r3, r3, #2
 80005d2:	4413      	add	r3, r2
 80005d4:	460a      	mov	r2, r1
 80005d6:	70da      	strb	r2, [r3, #3]
	for(int i=0; i<MAX_LED; i++){
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	3301      	adds	r3, #1
 80005dc:	607b      	str	r3, [r7, #4]
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	2bc5      	cmp	r3, #197	; 0xc5
 80005e2:	dddb      	ble.n	800059c <LED_setAllWhite+0xc>
	}


}
 80005e4:	bf00      	nop
 80005e6:	3708      	adds	r7, #8
 80005e8:	46bd      	mov	sp, r7
 80005ea:	bd80      	pop	{r7, pc}
 80005ec:	200000a4 	.word	0x200000a4

080005f0 <WS2811_Send>:





void WS2811_Send(void){
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b086      	sub	sp, #24
 80005f4:	af00      	add	r7, sp, #0

	uint16_t indx = 0;
 80005f6:	2300      	movs	r3, #0
 80005f8:	82fb      	strh	r3, [r7, #22]
	uint32_t color;

	// wait 50 PWM pulses as a RESET before lighting all LED
	for(int i=0; i<40; i++){
 80005fa:	2300      	movs	r3, #0
 80005fc:	613b      	str	r3, [r7, #16]
 80005fe:	e00a      	b.n	8000616 <WS2811_Send+0x26>
		pwmData[indx] = 0;
 8000600:	8afb      	ldrh	r3, [r7, #22]
 8000602:	4a36      	ldr	r2, [pc, #216]	; (80006dc <WS2811_Send+0xec>)
 8000604:	2100      	movs	r1, #0
 8000606:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		indx++;
 800060a:	8afb      	ldrh	r3, [r7, #22]
 800060c:	3301      	adds	r3, #1
 800060e:	82fb      	strh	r3, [r7, #22]
	for(int i=0; i<40; i++){
 8000610:	693b      	ldr	r3, [r7, #16]
 8000612:	3301      	adds	r3, #1
 8000614:	613b      	str	r3, [r7, #16]
 8000616:	693b      	ldr	r3, [r7, #16]
 8000618:	2b27      	cmp	r3, #39	; 0x27
 800061a:	ddf1      	ble.n	8000600 <WS2811_Send+0x10>
	}

	// read from the color matrix each RGB color for each LED
	for(int i=0; i<MAX_LED; i++){
 800061c:	2300      	movs	r3, #0
 800061e:	60fb      	str	r3, [r7, #12]
 8000620:	e036      	b.n	8000690 <WS2811_Send+0xa0>
		color = ((LED_Data[i][1]<<16) | (LED_Data[i][2]<<8) | LED_Data[i][3]);
 8000622:	4a2f      	ldr	r2, [pc, #188]	; (80006e0 <WS2811_Send+0xf0>)
 8000624:	68fb      	ldr	r3, [r7, #12]
 8000626:	009b      	lsls	r3, r3, #2
 8000628:	4413      	add	r3, r2
 800062a:	785b      	ldrb	r3, [r3, #1]
 800062c:	041a      	lsls	r2, r3, #16
 800062e:	492c      	ldr	r1, [pc, #176]	; (80006e0 <WS2811_Send+0xf0>)
 8000630:	68fb      	ldr	r3, [r7, #12]
 8000632:	009b      	lsls	r3, r3, #2
 8000634:	440b      	add	r3, r1
 8000636:	789b      	ldrb	r3, [r3, #2]
 8000638:	021b      	lsls	r3, r3, #8
 800063a:	431a      	orrs	r2, r3
 800063c:	4928      	ldr	r1, [pc, #160]	; (80006e0 <WS2811_Send+0xf0>)
 800063e:	68fb      	ldr	r3, [r7, #12]
 8000640:	009b      	lsls	r3, r3, #2
 8000642:	440b      	add	r3, r1
 8000644:	78db      	ldrb	r3, [r3, #3]
 8000646:	4313      	orrs	r3, r2
 8000648:	603b      	str	r3, [r7, #0]

		// check each bit of the color number and create corresponfing PWM
		for(int i=23; i>=0; i--){
 800064a:	2317      	movs	r3, #23
 800064c:	60bb      	str	r3, [r7, #8]
 800064e:	e019      	b.n	8000684 <WS2811_Send+0x94>
			if(color & (1<<i)){
 8000650:	2201      	movs	r2, #1
 8000652:	68bb      	ldr	r3, [r7, #8]
 8000654:	fa02 f303 	lsl.w	r3, r2, r3
 8000658:	461a      	mov	r2, r3
 800065a:	683b      	ldr	r3, [r7, #0]
 800065c:	4013      	ands	r3, r2
 800065e:	2b00      	cmp	r3, #0
 8000660:	d005      	beq.n	800066e <WS2811_Send+0x7e>
				pwmData[indx]=43;
 8000662:	8afb      	ldrh	r3, [r7, #22]
 8000664:	4a1d      	ldr	r2, [pc, #116]	; (80006dc <WS2811_Send+0xec>)
 8000666:	212b      	movs	r1, #43	; 0x2b
 8000668:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 800066c:	e004      	b.n	8000678 <WS2811_Send+0x88>
			}else{
				pwmData[indx]=18;
 800066e:	8afb      	ldrh	r3, [r7, #22]
 8000670:	4a1a      	ldr	r2, [pc, #104]	; (80006dc <WS2811_Send+0xec>)
 8000672:	2112      	movs	r1, #18
 8000674:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			}
			indx++;
 8000678:	8afb      	ldrh	r3, [r7, #22]
 800067a:	3301      	adds	r3, #1
 800067c:	82fb      	strh	r3, [r7, #22]
		for(int i=23; i>=0; i--){
 800067e:	68bb      	ldr	r3, [r7, #8]
 8000680:	3b01      	subs	r3, #1
 8000682:	60bb      	str	r3, [r7, #8]
 8000684:	68bb      	ldr	r3, [r7, #8]
 8000686:	2b00      	cmp	r3, #0
 8000688:	dae2      	bge.n	8000650 <WS2811_Send+0x60>
	for(int i=0; i<MAX_LED; i++){
 800068a:	68fb      	ldr	r3, [r7, #12]
 800068c:	3301      	adds	r3, #1
 800068e:	60fb      	str	r3, [r7, #12]
 8000690:	68fb      	ldr	r3, [r7, #12]
 8000692:	2bc5      	cmp	r3, #197	; 0xc5
 8000694:	ddc5      	ble.n	8000622 <WS2811_Send+0x32>
		}
	}

	// wait 50 PWM pulses as a RESET after lighting all LED
	for(int i=0; i<40; i++){
 8000696:	2300      	movs	r3, #0
 8000698:	607b      	str	r3, [r7, #4]
 800069a:	e00a      	b.n	80006b2 <WS2811_Send+0xc2>
		pwmData[indx] = 0;
 800069c:	8afb      	ldrh	r3, [r7, #22]
 800069e:	4a0f      	ldr	r2, [pc, #60]	; (80006dc <WS2811_Send+0xec>)
 80006a0:	2100      	movs	r1, #0
 80006a2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		indx++;
 80006a6:	8afb      	ldrh	r3, [r7, #22]
 80006a8:	3301      	adds	r3, #1
 80006aa:	82fb      	strh	r3, [r7, #22]
	for(int i=0; i<40; i++){
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	3301      	adds	r3, #1
 80006b0:	607b      	str	r3, [r7, #4]
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	2b27      	cmp	r3, #39	; 0x27
 80006b6:	ddf1      	ble.n	800069c <WS2811_Send+0xac>
	}

	// start the transmission of the data just created
	HAL_TIM_PWM_Start_DMA(&htim2, TIM_CHANNEL_1, (uint32_t *)pwmData, indx);
 80006b8:	8afb      	ldrh	r3, [r7, #22]
 80006ba:	4a08      	ldr	r2, [pc, #32]	; (80006dc <WS2811_Send+0xec>)
 80006bc:	2100      	movs	r1, #0
 80006be:	4809      	ldr	r0, [pc, #36]	; (80006e4 <WS2811_Send+0xf4>)
 80006c0:	f002 ff0e 	bl	80034e0 <HAL_TIM_PWM_Start_DMA>


	while(!datasentflag){};
 80006c4:	bf00      	nop
 80006c6:	4b08      	ldr	r3, [pc, #32]	; (80006e8 <WS2811_Send+0xf8>)
 80006c8:	681b      	ldr	r3, [r3, #0]
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d0fb      	beq.n	80006c6 <WS2811_Send+0xd6>
	datasentflag=0;
 80006ce:	4b06      	ldr	r3, [pc, #24]	; (80006e8 <WS2811_Send+0xf8>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	601a      	str	r2, [r3, #0]

}
 80006d4:	bf00      	nop
 80006d6:	3718      	adds	r7, #24
 80006d8:	46bd      	mov	sp, r7
 80006da:	bd80      	pop	{r7, pc}
 80006dc:	200003bc 	.word	0x200003bc
 80006e0:	200000a4 	.word	0x200000a4
 80006e4:	20004ff0 	.word	0x20004ff0
 80006e8:	2000008c 	.word	0x2000008c

080006ec <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b082      	sub	sp, #8
 80006f0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80006f2:	2300      	movs	r3, #0
 80006f4:	607b      	str	r3, [r7, #4]
 80006f6:	4b0c      	ldr	r3, [pc, #48]	; (8000728 <MX_DMA_Init+0x3c>)
 80006f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006fa:	4a0b      	ldr	r2, [pc, #44]	; (8000728 <MX_DMA_Init+0x3c>)
 80006fc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000700:	6313      	str	r3, [r2, #48]	; 0x30
 8000702:	4b09      	ldr	r3, [pc, #36]	; (8000728 <MX_DMA_Init+0x3c>)
 8000704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000706:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800070a:	607b      	str	r3, [r7, #4]
 800070c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 800070e:	2200      	movs	r2, #0
 8000710:	2100      	movs	r1, #0
 8000712:	2010      	movs	r0, #16
 8000714:	f000 ff39 	bl	800158a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000718:	2010      	movs	r0, #16
 800071a:	f000 ff52 	bl	80015c2 <HAL_NVIC_EnableIRQ>

}
 800071e:	bf00      	nop
 8000720:	3708      	adds	r7, #8
 8000722:	46bd      	mov	sp, r7
 8000724:	bd80      	pop	{r7, pc}
 8000726:	bf00      	nop
 8000728:	40023800 	.word	0x40023800

0800072c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	b08a      	sub	sp, #40	; 0x28
 8000730:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000732:	f107 0314 	add.w	r3, r7, #20
 8000736:	2200      	movs	r2, #0
 8000738:	601a      	str	r2, [r3, #0]
 800073a:	605a      	str	r2, [r3, #4]
 800073c:	609a      	str	r2, [r3, #8]
 800073e:	60da      	str	r2, [r3, #12]
 8000740:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000742:	2300      	movs	r3, #0
 8000744:	613b      	str	r3, [r7, #16]
 8000746:	4b52      	ldr	r3, [pc, #328]	; (8000890 <MX_GPIO_Init+0x164>)
 8000748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800074a:	4a51      	ldr	r2, [pc, #324]	; (8000890 <MX_GPIO_Init+0x164>)
 800074c:	f043 0304 	orr.w	r3, r3, #4
 8000750:	6313      	str	r3, [r2, #48]	; 0x30
 8000752:	4b4f      	ldr	r3, [pc, #316]	; (8000890 <MX_GPIO_Init+0x164>)
 8000754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000756:	f003 0304 	and.w	r3, r3, #4
 800075a:	613b      	str	r3, [r7, #16]
 800075c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800075e:	2300      	movs	r3, #0
 8000760:	60fb      	str	r3, [r7, #12]
 8000762:	4b4b      	ldr	r3, [pc, #300]	; (8000890 <MX_GPIO_Init+0x164>)
 8000764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000766:	4a4a      	ldr	r2, [pc, #296]	; (8000890 <MX_GPIO_Init+0x164>)
 8000768:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800076c:	6313      	str	r3, [r2, #48]	; 0x30
 800076e:	4b48      	ldr	r3, [pc, #288]	; (8000890 <MX_GPIO_Init+0x164>)
 8000770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000772:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000776:	60fb      	str	r3, [r7, #12]
 8000778:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800077a:	2300      	movs	r3, #0
 800077c:	60bb      	str	r3, [r7, #8]
 800077e:	4b44      	ldr	r3, [pc, #272]	; (8000890 <MX_GPIO_Init+0x164>)
 8000780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000782:	4a43      	ldr	r2, [pc, #268]	; (8000890 <MX_GPIO_Init+0x164>)
 8000784:	f043 0301 	orr.w	r3, r3, #1
 8000788:	6313      	str	r3, [r2, #48]	; 0x30
 800078a:	4b41      	ldr	r3, [pc, #260]	; (8000890 <MX_GPIO_Init+0x164>)
 800078c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078e:	f003 0301 	and.w	r3, r3, #1
 8000792:	60bb      	str	r3, [r7, #8]
 8000794:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000796:	2300      	movs	r3, #0
 8000798:	607b      	str	r3, [r7, #4]
 800079a:	4b3d      	ldr	r3, [pc, #244]	; (8000890 <MX_GPIO_Init+0x164>)
 800079c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079e:	4a3c      	ldr	r2, [pc, #240]	; (8000890 <MX_GPIO_Init+0x164>)
 80007a0:	f043 0302 	orr.w	r3, r3, #2
 80007a4:	6313      	str	r3, [r2, #48]	; 0x30
 80007a6:	4b3a      	ldr	r3, [pc, #232]	; (8000890 <MX_GPIO_Init+0x164>)
 80007a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007aa:	f003 0302 	and.w	r3, r3, #2
 80007ae:	607b      	str	r3, [r7, #4]
 80007b0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);
 80007b2:	2200      	movs	r2, #0
 80007b4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80007b8:	4836      	ldr	r0, [pc, #216]	; (8000894 <MX_GPIO_Init+0x168>)
 80007ba:	f001 fc2f 	bl	800201c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 80007be:	2200      	movs	r2, #0
 80007c0:	2180      	movs	r1, #128	; 0x80
 80007c2:	4835      	ldr	r0, [pc, #212]	; (8000898 <MX_GPIO_Init+0x16c>)
 80007c4:	f001 fc2a 	bl	800201c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 80007c8:	2200      	movs	r2, #0
 80007ca:	f44f 7140 	mov.w	r1, #768	; 0x300
 80007ce:	4833      	ldr	r0, [pc, #204]	; (800089c <MX_GPIO_Init+0x170>)
 80007d0:	f001 fc24 	bl	800201c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80007d4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80007da:	4b31      	ldr	r3, [pc, #196]	; (80008a0 <MX_GPIO_Init+0x174>)
 80007dc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007de:	2300      	movs	r3, #0
 80007e0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80007e2:	f107 0314 	add.w	r3, r7, #20
 80007e6:	4619      	mov	r1, r3
 80007e8:	482b      	ldr	r0, [pc, #172]	; (8000898 <MX_GPIO_Init+0x16c>)
 80007ea:	f001 fa95 	bl	8001d18 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 80007ee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80007f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007f4:	2301      	movs	r3, #1
 80007f6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f8:	2300      	movs	r3, #0
 80007fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007fc:	2300      	movs	r3, #0
 80007fe:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000800:	f107 0314 	add.w	r3, r7, #20
 8000804:	4619      	mov	r1, r3
 8000806:	4823      	ldr	r0, [pc, #140]	; (8000894 <MX_GPIO_Init+0x168>)
 8000808:	f001 fa86 	bl	8001d18 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 800080c:	2380      	movs	r3, #128	; 0x80
 800080e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000810:	2301      	movs	r3, #1
 8000812:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000814:	2300      	movs	r3, #0
 8000816:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000818:	2300      	movs	r3, #0
 800081a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800081c:	f107 0314 	add.w	r3, r7, #20
 8000820:	4619      	mov	r1, r3
 8000822:	481d      	ldr	r0, [pc, #116]	; (8000898 <MX_GPIO_Init+0x16c>)
 8000824:	f001 fa78 	bl	8001d18 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000828:	f44f 7340 	mov.w	r3, #768	; 0x300
 800082c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800082e:	2301      	movs	r3, #1
 8000830:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000832:	2300      	movs	r3, #0
 8000834:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000836:	2300      	movs	r3, #0
 8000838:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800083a:	f107 0314 	add.w	r3, r7, #20
 800083e:	4619      	mov	r1, r3
 8000840:	4816      	ldr	r0, [pc, #88]	; (800089c <MX_GPIO_Init+0x170>)
 8000842:	f001 fa69 	bl	8001d18 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000846:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800084a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800084c:	2300      	movs	r3, #0
 800084e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000850:	2301      	movs	r3, #1
 8000852:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000854:	f107 0314 	add.w	r3, r7, #20
 8000858:	4619      	mov	r1, r3
 800085a:	4810      	ldr	r0, [pc, #64]	; (800089c <MX_GPIO_Init+0x170>)
 800085c:	f001 fa5c 	bl	8001d18 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8000860:	2338      	movs	r3, #56	; 0x38
 8000862:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000864:	2300      	movs	r3, #0
 8000866:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000868:	2301      	movs	r3, #1
 800086a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800086c:	f107 0314 	add.w	r3, r7, #20
 8000870:	4619      	mov	r1, r3
 8000872:	4808      	ldr	r0, [pc, #32]	; (8000894 <MX_GPIO_Init+0x168>)
 8000874:	f001 fa50 	bl	8001d18 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000878:	2200      	movs	r2, #0
 800087a:	2100      	movs	r1, #0
 800087c:	2028      	movs	r0, #40	; 0x28
 800087e:	f000 fe84 	bl	800158a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000882:	2028      	movs	r0, #40	; 0x28
 8000884:	f000 fe9d 	bl	80015c2 <HAL_NVIC_EnableIRQ>

}
 8000888:	bf00      	nop
 800088a:	3728      	adds	r7, #40	; 0x28
 800088c:	46bd      	mov	sp, r7
 800088e:	bd80      	pop	{r7, pc}
 8000890:	40023800 	.word	0x40023800
 8000894:	40020400 	.word	0x40020400
 8000898:	40020800 	.word	0x40020800
 800089c:	40020000 	.word	0x40020000
 80008a0:	10210000 	.word	0x10210000

080008a4 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 80008a8:	4b12      	ldr	r3, [pc, #72]	; (80008f4 <MX_I2C1_Init+0x50>)
 80008aa:	4a13      	ldr	r2, [pc, #76]	; (80008f8 <MX_I2C1_Init+0x54>)
 80008ac:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80008ae:	4b11      	ldr	r3, [pc, #68]	; (80008f4 <MX_I2C1_Init+0x50>)
 80008b0:	4a12      	ldr	r2, [pc, #72]	; (80008fc <MX_I2C1_Init+0x58>)
 80008b2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80008b4:	4b0f      	ldr	r3, [pc, #60]	; (80008f4 <MX_I2C1_Init+0x50>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80008ba:	4b0e      	ldr	r3, [pc, #56]	; (80008f4 <MX_I2C1_Init+0x50>)
 80008bc:	2200      	movs	r2, #0
 80008be:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80008c0:	4b0c      	ldr	r3, [pc, #48]	; (80008f4 <MX_I2C1_Init+0x50>)
 80008c2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80008c6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80008c8:	4b0a      	ldr	r3, [pc, #40]	; (80008f4 <MX_I2C1_Init+0x50>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80008ce:	4b09      	ldr	r3, [pc, #36]	; (80008f4 <MX_I2C1_Init+0x50>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80008d4:	4b07      	ldr	r3, [pc, #28]	; (80008f4 <MX_I2C1_Init+0x50>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80008da:	4b06      	ldr	r3, [pc, #24]	; (80008f4 <MX_I2C1_Init+0x50>)
 80008dc:	2200      	movs	r2, #0
 80008de:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80008e0:	4804      	ldr	r0, [pc, #16]	; (80008f4 <MX_I2C1_Init+0x50>)
 80008e2:	f001 fbcd 	bl	8002080 <HAL_I2C_Init>
 80008e6:	4603      	mov	r3, r0
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d001      	beq.n	80008f0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80008ec:	f000 fa6e 	bl	8000dcc <Error_Handler>
  }

}
 80008f0:	bf00      	nop
 80008f2:	bd80      	pop	{r7, pc}
 80008f4:	20004f3c 	.word	0x20004f3c
 80008f8:	40005400 	.word	0x40005400
 80008fc:	000186a0 	.word	0x000186a0

08000900 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b08a      	sub	sp, #40	; 0x28
 8000904:	af00      	add	r7, sp, #0
 8000906:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000908:	f107 0314 	add.w	r3, r7, #20
 800090c:	2200      	movs	r2, #0
 800090e:	601a      	str	r2, [r3, #0]
 8000910:	605a      	str	r2, [r3, #4]
 8000912:	609a      	str	r2, [r3, #8]
 8000914:	60da      	str	r2, [r3, #12]
 8000916:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	4a19      	ldr	r2, [pc, #100]	; (8000984 <HAL_I2C_MspInit+0x84>)
 800091e:	4293      	cmp	r3, r2
 8000920:	d12b      	bne.n	800097a <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000922:	2300      	movs	r3, #0
 8000924:	613b      	str	r3, [r7, #16]
 8000926:	4b18      	ldr	r3, [pc, #96]	; (8000988 <HAL_I2C_MspInit+0x88>)
 8000928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800092a:	4a17      	ldr	r2, [pc, #92]	; (8000988 <HAL_I2C_MspInit+0x88>)
 800092c:	f043 0302 	orr.w	r3, r3, #2
 8000930:	6313      	str	r3, [r2, #48]	; 0x30
 8000932:	4b15      	ldr	r3, [pc, #84]	; (8000988 <HAL_I2C_MspInit+0x88>)
 8000934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000936:	f003 0302 	and.w	r3, r3, #2
 800093a:	613b      	str	r3, [r7, #16]
 800093c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800093e:	23c0      	movs	r3, #192	; 0xc0
 8000940:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000942:	2312      	movs	r3, #18
 8000944:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000946:	2301      	movs	r3, #1
 8000948:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800094a:	2303      	movs	r3, #3
 800094c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800094e:	2304      	movs	r3, #4
 8000950:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000952:	f107 0314 	add.w	r3, r7, #20
 8000956:	4619      	mov	r1, r3
 8000958:	480c      	ldr	r0, [pc, #48]	; (800098c <HAL_I2C_MspInit+0x8c>)
 800095a:	f001 f9dd 	bl	8001d18 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800095e:	2300      	movs	r3, #0
 8000960:	60fb      	str	r3, [r7, #12]
 8000962:	4b09      	ldr	r3, [pc, #36]	; (8000988 <HAL_I2C_MspInit+0x88>)
 8000964:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000966:	4a08      	ldr	r2, [pc, #32]	; (8000988 <HAL_I2C_MspInit+0x88>)
 8000968:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800096c:	6413      	str	r3, [r2, #64]	; 0x40
 800096e:	4b06      	ldr	r3, [pc, #24]	; (8000988 <HAL_I2C_MspInit+0x88>)
 8000970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000972:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000976:	60fb      	str	r3, [r7, #12]
 8000978:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800097a:	bf00      	nop
 800097c:	3728      	adds	r7, #40	; 0x28
 800097e:	46bd      	mov	sp, r7
 8000980:	bd80      	pop	{r7, pc}
 8000982:	bf00      	nop
 8000984:	40005400 	.word	0x40005400
 8000988:	40023800 	.word	0x40023800
 800098c:	40020400 	.word	0x40020400

08000990 <lcd16x2_i2c_sendCommand>:
#define LCD_I2C_SLAVE_ADDRESS_0  0x4E
#define LCD_I2C_SLAVE_ADDRESS_1  0x7E

/* Private functions */
static void lcd16x2_i2c_sendCommand(uint8_t command)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b086      	sub	sp, #24
 8000994:	af02      	add	r7, sp, #8
 8000996:	4603      	mov	r3, r0
 8000998:	71fb      	strb	r3, [r7, #7]
  const uint8_t command_0_3 = (0xF0 & (command<<4));
 800099a:	79fb      	ldrb	r3, [r7, #7]
 800099c:	011b      	lsls	r3, r3, #4
 800099e:	73fb      	strb	r3, [r7, #15]
  const uint8_t command_4_7 = (0xF0 & command);
 80009a0:	79fb      	ldrb	r3, [r7, #7]
 80009a2:	f023 030f 	bic.w	r3, r3, #15
 80009a6:	73bb      	strb	r3, [r7, #14]
  uint8_t i2cData[4] =
 80009a8:	7bbb      	ldrb	r3, [r7, #14]
 80009aa:	f043 030c 	orr.w	r3, r3, #12
 80009ae:	b2db      	uxtb	r3, r3
 80009b0:	723b      	strb	r3, [r7, #8]
 80009b2:	7bbb      	ldrb	r3, [r7, #14]
 80009b4:	f043 0308 	orr.w	r3, r3, #8
 80009b8:	b2db      	uxtb	r3, r3
 80009ba:	727b      	strb	r3, [r7, #9]
 80009bc:	7bfb      	ldrb	r3, [r7, #15]
 80009be:	f043 030c 	orr.w	r3, r3, #12
 80009c2:	b2db      	uxtb	r3, r3
 80009c4:	72bb      	strb	r3, [r7, #10]
 80009c6:	7bfb      	ldrb	r3, [r7, #15]
 80009c8:	f043 0308 	orr.w	r3, r3, #8
 80009cc:	b2db      	uxtb	r3, r3
 80009ce:	72fb      	strb	r3, [r7, #11]
      command_4_7 | LCD_EN | LCD_BK_LIGHT,
      command_4_7 | LCD_BK_LIGHT,
      command_0_3 | LCD_EN | LCD_BK_LIGHT,
      command_0_3 | LCD_BK_LIGHT,
  };
  HAL_I2C_Master_Transmit(lcd16x2_i2cHandle, LCD_I2C_SLAVE_ADDRESS, i2cData, 4, 200);
 80009d0:	4b07      	ldr	r3, [pc, #28]	; (80009f0 <lcd16x2_i2c_sendCommand+0x60>)
 80009d2:	6818      	ldr	r0, [r3, #0]
 80009d4:	4b07      	ldr	r3, [pc, #28]	; (80009f4 <lcd16x2_i2c_sendCommand+0x64>)
 80009d6:	781b      	ldrb	r3, [r3, #0]
 80009d8:	b299      	uxth	r1, r3
 80009da:	f107 0208 	add.w	r2, r7, #8
 80009de:	23c8      	movs	r3, #200	; 0xc8
 80009e0:	9300      	str	r3, [sp, #0]
 80009e2:	2304      	movs	r3, #4
 80009e4:	f001 fc84 	bl	80022f0 <HAL_I2C_Master_Transmit>
}
 80009e8:	bf00      	nop
 80009ea:	3710      	adds	r7, #16
 80009ec:	46bd      	mov	sp, r7
 80009ee:	bd80      	pop	{r7, pc}
 80009f0:	20000090 	.word	0x20000090
 80009f4:	20000094 	.word	0x20000094

080009f8 <lcd16x2_i2c_sendData>:

static void lcd16x2_i2c_sendData(uint8_t data)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b086      	sub	sp, #24
 80009fc:	af02      	add	r7, sp, #8
 80009fe:	4603      	mov	r3, r0
 8000a00:	71fb      	strb	r3, [r7, #7]
  const uint8_t data_0_3 = (0xF0 & (data<<4));
 8000a02:	79fb      	ldrb	r3, [r7, #7]
 8000a04:	011b      	lsls	r3, r3, #4
 8000a06:	73fb      	strb	r3, [r7, #15]
  const uint8_t data_4_7 = (0xF0 & data);
 8000a08:	79fb      	ldrb	r3, [r7, #7]
 8000a0a:	f023 030f 	bic.w	r3, r3, #15
 8000a0e:	73bb      	strb	r3, [r7, #14]
  uint8_t i2cData[4] =
 8000a10:	7bbb      	ldrb	r3, [r7, #14]
 8000a12:	f043 030d 	orr.w	r3, r3, #13
 8000a16:	b2db      	uxtb	r3, r3
 8000a18:	723b      	strb	r3, [r7, #8]
 8000a1a:	7bbb      	ldrb	r3, [r7, #14]
 8000a1c:	f043 0309 	orr.w	r3, r3, #9
 8000a20:	b2db      	uxtb	r3, r3
 8000a22:	727b      	strb	r3, [r7, #9]
 8000a24:	7bfb      	ldrb	r3, [r7, #15]
 8000a26:	f043 030d 	orr.w	r3, r3, #13
 8000a2a:	b2db      	uxtb	r3, r3
 8000a2c:	72bb      	strb	r3, [r7, #10]
 8000a2e:	7bfb      	ldrb	r3, [r7, #15]
 8000a30:	f043 0309 	orr.w	r3, r3, #9
 8000a34:	b2db      	uxtb	r3, r3
 8000a36:	72fb      	strb	r3, [r7, #11]
      data_4_7 | LCD_EN | LCD_BK_LIGHT | LCD_RS,
      data_4_7 | LCD_BK_LIGHT | LCD_RS,
      data_0_3 | LCD_EN | LCD_BK_LIGHT | LCD_RS,
      data_0_3 | LCD_BK_LIGHT | LCD_RS,
  };
  HAL_I2C_Master_Transmit(lcd16x2_i2cHandle, LCD_I2C_SLAVE_ADDRESS, i2cData, 4, 200);
 8000a38:	4b07      	ldr	r3, [pc, #28]	; (8000a58 <lcd16x2_i2c_sendData+0x60>)
 8000a3a:	6818      	ldr	r0, [r3, #0]
 8000a3c:	4b07      	ldr	r3, [pc, #28]	; (8000a5c <lcd16x2_i2c_sendData+0x64>)
 8000a3e:	781b      	ldrb	r3, [r3, #0]
 8000a40:	b299      	uxth	r1, r3
 8000a42:	f107 0208 	add.w	r2, r7, #8
 8000a46:	23c8      	movs	r3, #200	; 0xc8
 8000a48:	9300      	str	r3, [sp, #0]
 8000a4a:	2304      	movs	r3, #4
 8000a4c:	f001 fc50 	bl	80022f0 <HAL_I2C_Master_Transmit>
}
 8000a50:	bf00      	nop
 8000a52:	3710      	adds	r7, #16
 8000a54:	46bd      	mov	sp, r7
 8000a56:	bd80      	pop	{r7, pc}
 8000a58:	20000090 	.word	0x20000090
 8000a5c:	20000094 	.word	0x20000094

08000a60 <lcd16x2_i2c_init>:
/**
 * @brief Initialise LCD16x2
 * @param[in] *pI2cHandle - pointer to HAL I2C handle
 */
bool lcd16x2_i2c_init(I2C_HandleTypeDef *pI2cHandle)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b082      	sub	sp, #8
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	6078      	str	r0, [r7, #4]
  HAL_Delay(50);
 8000a68:	2032      	movs	r0, #50	; 0x32
 8000a6a:	f000 fc91 	bl	8001390 <HAL_Delay>
  lcd16x2_i2cHandle = pI2cHandle;
 8000a6e:	4a30      	ldr	r2, [pc, #192]	; (8000b30 <lcd16x2_i2c_init+0xd0>)
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	6013      	str	r3, [r2, #0]
  if(HAL_I2C_IsDeviceReady(lcd16x2_i2cHandle, LCD_I2C_SLAVE_ADDRESS_0, 5, 500) != HAL_OK)
 8000a74:	4b2e      	ldr	r3, [pc, #184]	; (8000b30 <lcd16x2_i2c_init+0xd0>)
 8000a76:	6818      	ldr	r0, [r3, #0]
 8000a78:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000a7c:	2205      	movs	r2, #5
 8000a7e:	214e      	movs	r1, #78	; 0x4e
 8000a80:	f001 fd34 	bl	80024ec <HAL_I2C_IsDeviceReady>
 8000a84:	4603      	mov	r3, r0
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d010      	beq.n	8000aac <lcd16x2_i2c_init+0x4c>
  {
    if(HAL_I2C_IsDeviceReady(lcd16x2_i2cHandle, LCD_I2C_SLAVE_ADDRESS_1, 5, 500) != HAL_OK)
 8000a8a:	4b29      	ldr	r3, [pc, #164]	; (8000b30 <lcd16x2_i2c_init+0xd0>)
 8000a8c:	6818      	ldr	r0, [r3, #0]
 8000a8e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000a92:	2205      	movs	r2, #5
 8000a94:	217e      	movs	r1, #126	; 0x7e
 8000a96:	f001 fd29 	bl	80024ec <HAL_I2C_IsDeviceReady>
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d001      	beq.n	8000aa4 <lcd16x2_i2c_init+0x44>
    {
      return false;
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	e040      	b.n	8000b26 <lcd16x2_i2c_init+0xc6>
    }
    else
    {
      LCD_I2C_SLAVE_ADDRESS = LCD_I2C_SLAVE_ADDRESS_1;
 8000aa4:	4b23      	ldr	r3, [pc, #140]	; (8000b34 <lcd16x2_i2c_init+0xd4>)
 8000aa6:	227e      	movs	r2, #126	; 0x7e
 8000aa8:	701a      	strb	r2, [r3, #0]
 8000aaa:	e002      	b.n	8000ab2 <lcd16x2_i2c_init+0x52>
    }
  }
  else
  {
    LCD_I2C_SLAVE_ADDRESS = LCD_I2C_SLAVE_ADDRESS_0;
 8000aac:	4b21      	ldr	r3, [pc, #132]	; (8000b34 <lcd16x2_i2c_init+0xd4>)
 8000aae:	224e      	movs	r2, #78	; 0x4e
 8000ab0:	701a      	strb	r2, [r3, #0]
  }
  //Initialise LCD for 4-bit operation
  //1. Wait at least 15ms
  HAL_Delay(45);
 8000ab2:	202d      	movs	r0, #45	; 0x2d
 8000ab4:	f000 fc6c 	bl	8001390 <HAL_Delay>
  //2. Attentions sequence
  lcd16x2_i2c_sendCommand(0x30);
 8000ab8:	2030      	movs	r0, #48	; 0x30
 8000aba:	f7ff ff69 	bl	8000990 <lcd16x2_i2c_sendCommand>
  HAL_Delay(5);
 8000abe:	2005      	movs	r0, #5
 8000ac0:	f000 fc66 	bl	8001390 <HAL_Delay>
  lcd16x2_i2c_sendCommand(0x30);
 8000ac4:	2030      	movs	r0, #48	; 0x30
 8000ac6:	f7ff ff63 	bl	8000990 <lcd16x2_i2c_sendCommand>
  HAL_Delay(1);
 8000aca:	2001      	movs	r0, #1
 8000acc:	f000 fc60 	bl	8001390 <HAL_Delay>
  lcd16x2_i2c_sendCommand(0x30);
 8000ad0:	2030      	movs	r0, #48	; 0x30
 8000ad2:	f7ff ff5d 	bl	8000990 <lcd16x2_i2c_sendCommand>
  HAL_Delay(8);
 8000ad6:	2008      	movs	r0, #8
 8000ad8:	f000 fc5a 	bl	8001390 <HAL_Delay>
  lcd16x2_i2c_sendCommand(0x20);
 8000adc:	2020      	movs	r0, #32
 8000ade:	f7ff ff57 	bl	8000990 <lcd16x2_i2c_sendCommand>
  HAL_Delay(8);
 8000ae2:	2008      	movs	r0, #8
 8000ae4:	f000 fc54 	bl	8001390 <HAL_Delay>

  lcd16x2_i2c_sendCommand(LCD_FUNCTIONSET | LCD_FUNCTION_N);
 8000ae8:	2028      	movs	r0, #40	; 0x28
 8000aea:	f7ff ff51 	bl	8000990 <lcd16x2_i2c_sendCommand>
  HAL_Delay(1);
 8000aee:	2001      	movs	r0, #1
 8000af0:	f000 fc4e 	bl	8001390 <HAL_Delay>
  lcd16x2_i2c_sendCommand(LCD_DISPLAYCONTROL);
 8000af4:	2008      	movs	r0, #8
 8000af6:	f7ff ff4b 	bl	8000990 <lcd16x2_i2c_sendCommand>
  HAL_Delay(1);
 8000afa:	2001      	movs	r0, #1
 8000afc:	f000 fc48 	bl	8001390 <HAL_Delay>
  lcd16x2_i2c_sendCommand(LCD_CLEARDISPLAY);
 8000b00:	2001      	movs	r0, #1
 8000b02:	f7ff ff45 	bl	8000990 <lcd16x2_i2c_sendCommand>
  HAL_Delay(3);
 8000b06:	2003      	movs	r0, #3
 8000b08:	f000 fc42 	bl	8001390 <HAL_Delay>
  lcd16x2_i2c_sendCommand(0x04 | LCD_ENTRY_ID);
 8000b0c:	2006      	movs	r0, #6
 8000b0e:	f7ff ff3f 	bl	8000990 <lcd16x2_i2c_sendCommand>
  HAL_Delay(1);
 8000b12:	2001      	movs	r0, #1
 8000b14:	f000 fc3c 	bl	8001390 <HAL_Delay>
  lcd16x2_i2c_sendCommand(LCD_DISPLAYCONTROL | LCD_DISPLAY_D);
 8000b18:	200c      	movs	r0, #12
 8000b1a:	f7ff ff39 	bl	8000990 <lcd16x2_i2c_sendCommand>
  HAL_Delay(3);
 8000b1e:	2003      	movs	r0, #3
 8000b20:	f000 fc36 	bl	8001390 <HAL_Delay>

  return true;
 8000b24:	2301      	movs	r3, #1
}
 8000b26:	4618      	mov	r0, r3
 8000b28:	3708      	adds	r7, #8
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	bd80      	pop	{r7, pc}
 8000b2e:	bf00      	nop
 8000b30:	20000090 	.word	0x20000090
 8000b34:	20000094 	.word	0x20000094

08000b38 <lcd16x2_i2c_setCursor>:
 * @brief Set cursor position
 * @param[in] row - 0 or 1 for line1 or line2
 * @param[in] col - 0 - 15 (16 columns LCD)
 */
void lcd16x2_i2c_setCursor(uint8_t row, uint8_t col)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b084      	sub	sp, #16
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	4603      	mov	r3, r0
 8000b40:	460a      	mov	r2, r1
 8000b42:	71fb      	strb	r3, [r7, #7]
 8000b44:	4613      	mov	r3, r2
 8000b46:	71bb      	strb	r3, [r7, #6]
  uint8_t maskData;
  maskData = (col)&0x0F;
 8000b48:	79bb      	ldrb	r3, [r7, #6]
 8000b4a:	f003 030f 	and.w	r3, r3, #15
 8000b4e:	73fb      	strb	r3, [r7, #15]
  if(row==0)
 8000b50:	79fb      	ldrb	r3, [r7, #7]
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d108      	bne.n	8000b68 <lcd16x2_i2c_setCursor+0x30>
  {
    maskData |= (0x80);
 8000b56:	7bfb      	ldrb	r3, [r7, #15]
 8000b58:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000b5c:	73fb      	strb	r3, [r7, #15]
    lcd16x2_i2c_sendCommand(maskData);
 8000b5e:	7bfb      	ldrb	r3, [r7, #15]
 8000b60:	4618      	mov	r0, r3
 8000b62:	f7ff ff15 	bl	8000990 <lcd16x2_i2c_sendCommand>
  else
  {
    maskData |= (0xc0);
    lcd16x2_i2c_sendCommand(maskData);
  }
}
 8000b66:	e007      	b.n	8000b78 <lcd16x2_i2c_setCursor+0x40>
    maskData |= (0xc0);
 8000b68:	7bfb      	ldrb	r3, [r7, #15]
 8000b6a:	f063 033f 	orn	r3, r3, #63	; 0x3f
 8000b6e:	73fb      	strb	r3, [r7, #15]
    lcd16x2_i2c_sendCommand(maskData);
 8000b70:	7bfb      	ldrb	r3, [r7, #15]
 8000b72:	4618      	mov	r0, r3
 8000b74:	f7ff ff0c 	bl	8000990 <lcd16x2_i2c_sendCommand>
}
 8000b78:	bf00      	nop
 8000b7a:	3710      	adds	r7, #16
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	bd80      	pop	{r7, pc}

08000b80 <lcd16x2_i2c_2ndLine>:
}
/**
 * @brief Move to beginning of 2nd line
 */
void lcd16x2_i2c_2ndLine(void)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	af00      	add	r7, sp, #0
  lcd16x2_i2c_setCursor(1,0);
 8000b84:	2100      	movs	r1, #0
 8000b86:	2001      	movs	r0, #1
 8000b88:	f7ff ffd6 	bl	8000b38 <lcd16x2_i2c_setCursor>
}
 8000b8c:	bf00      	nop
 8000b8e:	bd80      	pop	{r7, pc}

08000b90 <lcd16x2_i2c_clear>:

/**
 * @brief Display clear
 */
void lcd16x2_i2c_clear(void)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	af00      	add	r7, sp, #0
  lcd16x2_i2c_sendCommand(LCD_CLEARDISPLAY);
 8000b94:	2001      	movs	r0, #1
 8000b96:	f7ff fefb 	bl	8000990 <lcd16x2_i2c_sendCommand>
  HAL_Delay(3);
 8000b9a:	2003      	movs	r0, #3
 8000b9c:	f000 fbf8 	bl	8001390 <HAL_Delay>
}
 8000ba0:	bf00      	nop
 8000ba2:	bd80      	pop	{r7, pc}

08000ba4 <lcd16x2_i2c_printf>:

/**
 * @brief Print to display
 */
void lcd16x2_i2c_printf(const char* str, ...)
{
 8000ba4:	b40f      	push	{r0, r1, r2, r3}
 8000ba6:	b590      	push	{r4, r7, lr}
 8000ba8:	b089      	sub	sp, #36	; 0x24
 8000baa:	af00      	add	r7, sp, #0
  char stringArray[20];
  va_list args;
  va_start(args, str);
 8000bac:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000bb0:	607b      	str	r3, [r7, #4]
  vsprintf(stringArray, str, args);
 8000bb2:	f107 0308 	add.w	r3, r7, #8
 8000bb6:	687a      	ldr	r2, [r7, #4]
 8000bb8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8000bba:	4618      	mov	r0, r3
 8000bbc:	f004 f914 	bl	8004de8 <vsiprintf>
  va_end(args);
  for(uint8_t i=0;  i<strlen(stringArray) && i<16; i++)
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	77fb      	strb	r3, [r7, #31]
 8000bc4:	e00b      	b.n	8000bde <lcd16x2_i2c_printf+0x3a>
  {
    lcd16x2_i2c_sendData((uint8_t)stringArray[i]);
 8000bc6:	7ffb      	ldrb	r3, [r7, #31]
 8000bc8:	f107 0220 	add.w	r2, r7, #32
 8000bcc:	4413      	add	r3, r2
 8000bce:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8000bd2:	4618      	mov	r0, r3
 8000bd4:	f7ff ff10 	bl	80009f8 <lcd16x2_i2c_sendData>
  for(uint8_t i=0;  i<strlen(stringArray) && i<16; i++)
 8000bd8:	7ffb      	ldrb	r3, [r7, #31]
 8000bda:	3301      	adds	r3, #1
 8000bdc:	77fb      	strb	r3, [r7, #31]
 8000bde:	7ffc      	ldrb	r4, [r7, #31]
 8000be0:	f107 0308 	add.w	r3, r7, #8
 8000be4:	4618      	mov	r0, r3
 8000be6:	f7ff fafb 	bl	80001e0 <strlen>
 8000bea:	4603      	mov	r3, r0
 8000bec:	429c      	cmp	r4, r3
 8000bee:	d202      	bcs.n	8000bf6 <lcd16x2_i2c_printf+0x52>
 8000bf0:	7ffb      	ldrb	r3, [r7, #31]
 8000bf2:	2b0f      	cmp	r3, #15
 8000bf4:	d9e7      	bls.n	8000bc6 <lcd16x2_i2c_printf+0x22>
  }
}
 8000bf6:	bf00      	nop
 8000bf8:	3724      	adds	r7, #36	; 0x24
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8000c00:	b004      	add	sp, #16
 8000c02:	4770      	bx	lr

08000c04 <HAL_TIM_PWM_PulseFinishedCallback>:




// When DMA finishes a send triggers a flag and stops the data transfer
void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim){
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b082      	sub	sp, #8
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Stop_DMA(&htim2, TIM_CHANNEL_1);
 8000c0c:	2100      	movs	r1, #0
 8000c0e:	4805      	ldr	r0, [pc, #20]	; (8000c24 <HAL_TIM_PWM_PulseFinishedCallback+0x20>)
 8000c10:	f002 fd6c 	bl	80036ec <HAL_TIM_PWM_Stop_DMA>
	datasentflag = 1;
 8000c14:	4b04      	ldr	r3, [pc, #16]	; (8000c28 <HAL_TIM_PWM_PulseFinishedCallback+0x24>)
 8000c16:	2201      	movs	r2, #1
 8000c18:	601a      	str	r2, [r3, #0]
}
 8000c1a:	bf00      	nop
 8000c1c:	3708      	adds	r7, #8
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	bd80      	pop	{r7, pc}
 8000c22:	bf00      	nop
 8000c24:	20004ff0 	.word	0x20004ff0
 8000c28:	2000008c 	.word	0x2000008c

08000c2c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b0c8      	sub	sp, #288	; 0x120
 8000c30:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c32:	f000 fb3b 	bl	80012ac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c36:	f000 f84b 	bl	8000cd0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c3a:	f7ff fd77 	bl	800072c <MX_GPIO_Init>
  MX_DMA_Init();
 8000c3e:	f7ff fd55 	bl	80006ec <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000c42:	f000 fa97 	bl	8001174 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8000c46:	f000 f98f 	bl	8000f68 <MX_TIM2_Init>
  MX_I2C1_Init();
 8000c4a:	f7ff fe2b 	bl	80008a4 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */


  // turn on LED if LCD screen is properly connected to i2c
  if(lcd16x2_i2c_init(&hi2c1)){
 8000c4e:	481b      	ldr	r0, [pc, #108]	; (8000cbc <main+0x90>)
 8000c50:	f7ff ff06 	bl	8000a60 <lcd16x2_i2c_init>
 8000c54:	4603      	mov	r3, r0
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d004      	beq.n	8000c64 <main+0x38>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8000c5a:	2201      	movs	r2, #1
 8000c5c:	2120      	movs	r1, #32
 8000c5e:	4818      	ldr	r0, [pc, #96]	; (8000cc0 <main+0x94>)
 8000c60:	f001 f9dc 	bl	800201c <HAL_GPIO_WritePin>
  }
  lcd16x2_i2c_clear();
 8000c64:	f7ff ff94 	bl	8000b90 <lcd16x2_i2c_clear>
  lcd16x2_i2c_2ndLine();
 8000c68:	f7ff ff8a 	bl	8000b80 <lcd16x2_i2c_2ndLine>
  lcd16x2_i2c_clear();
 8000c6c:	f7ff ff90 	bl	8000b90 <lcd16x2_i2c_clear>

  lcd16x2_i2c_printf("><>   FISH.  <><");
 8000c70:	4814      	ldr	r0, [pc, #80]	; (8000cc4 <main+0x98>)
 8000c72:	f7ff ff97 	bl	8000ba4 <lcd16x2_i2c_printf>
  lcd16x2_i2c_2ndLine();
 8000c76:	f7ff ff83 	bl	8000b80 <lcd16x2_i2c_2ndLine>
  lcd16x2_i2c_printf("===   BOARD  ===");
 8000c7a:	4813      	ldr	r0, [pc, #76]	; (8000cc8 <main+0x9c>)
 8000c7c:	f7ff ff92 	bl	8000ba4 <lcd16x2_i2c_printf>

  int i=0;
 8000c80:	2300      	movs	r3, #0
 8000c82:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  // Definition of data
  struct Problem p;			// struct that contains the info related to the problem
  uint32_t problemID = 0;	// ID that reppresents the number of the problem
 8000c86:	2300      	movs	r3, #0
 8000c88:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  if(BLUE_BUTTON){
 8000c8c:	4b0f      	ldr	r3, [pc, #60]	; (8000ccc <main+0xa0>)
 8000c8e:	781b      	ldrb	r3, [r3, #0]
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d0fb      	beq.n	8000c8c <main+0x60>
		  //lcd16x2_i2c_2ndLine();
		  //lcd16x2_i2c_printf("Grad:");
		  //lcd16x2_i2c_printf(p.grade);


		  LED_setAllWhite();
 8000c94:	f7ff fc7c 	bl	8000590 <LED_setAllWhite>

		  //LED_setAllBlack();
		  //LED_setColor(i, 255, 255, 255);
		  i++;
 8000c98:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8000c9c:	3301      	adds	r3, #1
 8000c9e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c

		  WS2811_Send();
 8000ca2:	f7ff fca5 	bl	80005f0 <WS2811_Send>

		  HAL_Delay(50);
 8000ca6:	2032      	movs	r0, #50	; 0x32
 8000ca8:	f000 fb72 	bl	8001390 <HAL_Delay>

		  if(i==200){
 8000cac:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8000cb0:	2bc8      	cmp	r3, #200	; 0xc8
 8000cb2:	d1eb      	bne.n	8000c8c <main+0x60>
			  BLUE_BUTTON=false;
 8000cb4:	4b05      	ldr	r3, [pc, #20]	; (8000ccc <main+0xa0>)
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	701a      	strb	r2, [r3, #0]
	  if(BLUE_BUTTON){
 8000cba:	e7e7      	b.n	8000c8c <main+0x60>
 8000cbc:	20004f3c 	.word	0x20004f3c
 8000cc0:	40020000 	.word	0x40020000
 8000cc4:	080055f0 	.word	0x080055f0
 8000cc8:	08005604 	.word	0x08005604
 8000ccc:	20000095 	.word	0x20000095

08000cd0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b094      	sub	sp, #80	; 0x50
 8000cd4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000cd6:	f107 0320 	add.w	r3, r7, #32
 8000cda:	2230      	movs	r2, #48	; 0x30
 8000cdc:	2100      	movs	r1, #0
 8000cde:	4618      	mov	r0, r3
 8000ce0:	f004 f830 	bl	8004d44 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ce4:	f107 030c 	add.w	r3, r7, #12
 8000ce8:	2200      	movs	r2, #0
 8000cea:	601a      	str	r2, [r3, #0]
 8000cec:	605a      	str	r2, [r3, #4]
 8000cee:	609a      	str	r2, [r3, #8]
 8000cf0:	60da      	str	r2, [r3, #12]
 8000cf2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	60bb      	str	r3, [r7, #8]
 8000cf8:	4b28      	ldr	r3, [pc, #160]	; (8000d9c <SystemClock_Config+0xcc>)
 8000cfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cfc:	4a27      	ldr	r2, [pc, #156]	; (8000d9c <SystemClock_Config+0xcc>)
 8000cfe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d02:	6413      	str	r3, [r2, #64]	; 0x40
 8000d04:	4b25      	ldr	r3, [pc, #148]	; (8000d9c <SystemClock_Config+0xcc>)
 8000d06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d0c:	60bb      	str	r3, [r7, #8]
 8000d0e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000d10:	2300      	movs	r3, #0
 8000d12:	607b      	str	r3, [r7, #4]
 8000d14:	4b22      	ldr	r3, [pc, #136]	; (8000da0 <SystemClock_Config+0xd0>)
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000d1c:	4a20      	ldr	r2, [pc, #128]	; (8000da0 <SystemClock_Config+0xd0>)
 8000d1e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000d22:	6013      	str	r3, [r2, #0]
 8000d24:	4b1e      	ldr	r3, [pc, #120]	; (8000da0 <SystemClock_Config+0xd0>)
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000d2c:	607b      	str	r3, [r7, #4]
 8000d2e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000d30:	2302      	movs	r3, #2
 8000d32:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d34:	2301      	movs	r3, #1
 8000d36:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000d38:	2310      	movs	r3, #16
 8000d3a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d3c:	2302      	movs	r3, #2
 8000d3e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000d40:	2300      	movs	r3, #0
 8000d42:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000d44:	2308      	movs	r3, #8
 8000d46:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000d48:	2348      	movs	r3, #72	; 0x48
 8000d4a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000d4c:	2302      	movs	r3, #2
 8000d4e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000d50:	2307      	movs	r3, #7
 8000d52:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d54:	f107 0320 	add.w	r3, r7, #32
 8000d58:	4618      	mov	r0, r3
 8000d5a:	f001 feff 	bl	8002b5c <HAL_RCC_OscConfig>
 8000d5e:	4603      	mov	r3, r0
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d001      	beq.n	8000d68 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000d64:	f000 f832 	bl	8000dcc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d68:	230f      	movs	r3, #15
 8000d6a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d6c:	2302      	movs	r3, #2
 8000d6e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d70:	2300      	movs	r3, #0
 8000d72:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000d74:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d78:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000d7e:	f107 030c 	add.w	r3, r7, #12
 8000d82:	2102      	movs	r1, #2
 8000d84:	4618      	mov	r0, r3
 8000d86:	f002 f959 	bl	800303c <HAL_RCC_ClockConfig>
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d001      	beq.n	8000d94 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000d90:	f000 f81c 	bl	8000dcc <Error_Handler>
  }
}
 8000d94:	bf00      	nop
 8000d96:	3750      	adds	r7, #80	; 0x50
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	bd80      	pop	{r7, pc}
 8000d9c:	40023800 	.word	0x40023800
 8000da0:	40007000 	.word	0x40007000

08000da4 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8000da4:	b480      	push	{r7}
 8000da6:	b083      	sub	sp, #12
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	4603      	mov	r3, r0
 8000dac:	80fb      	strh	r3, [r7, #6]

	// interrupt blue button
	if(GPIO_Pin==B1_Pin){
 8000dae:	88fb      	ldrh	r3, [r7, #6]
 8000db0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000db4:	d102      	bne.n	8000dbc <HAL_GPIO_EXTI_Callback+0x18>
		BLUE_BUTTON = true;
 8000db6:	4b04      	ldr	r3, [pc, #16]	; (8000dc8 <HAL_GPIO_EXTI_Callback+0x24>)
 8000db8:	2201      	movs	r2, #1
 8000dba:	701a      	strb	r2, [r3, #0]
	}
}
 8000dbc:	bf00      	nop
 8000dbe:	370c      	adds	r7, #12
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc6:	4770      	bx	lr
 8000dc8:	20000095 	.word	0x20000095

08000dcc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000dd0:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000dd2:	e7fe      	b.n	8000dd2 <Error_Handler+0x6>

08000dd4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b082      	sub	sp, #8
 8000dd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dda:	2300      	movs	r3, #0
 8000ddc:	607b      	str	r3, [r7, #4]
 8000dde:	4b14      	ldr	r3, [pc, #80]	; (8000e30 <HAL_MspInit+0x5c>)
 8000de0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000de2:	4a13      	ldr	r2, [pc, #76]	; (8000e30 <HAL_MspInit+0x5c>)
 8000de4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000de8:	6453      	str	r3, [r2, #68]	; 0x44
 8000dea:	4b11      	ldr	r3, [pc, #68]	; (8000e30 <HAL_MspInit+0x5c>)
 8000dec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000df2:	607b      	str	r3, [r7, #4]
 8000df4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000df6:	2300      	movs	r3, #0
 8000df8:	603b      	str	r3, [r7, #0]
 8000dfa:	4b0d      	ldr	r3, [pc, #52]	; (8000e30 <HAL_MspInit+0x5c>)
 8000dfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dfe:	4a0c      	ldr	r2, [pc, #48]	; (8000e30 <HAL_MspInit+0x5c>)
 8000e00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e04:	6413      	str	r3, [r2, #64]	; 0x40
 8000e06:	4b0a      	ldr	r3, [pc, #40]	; (8000e30 <HAL_MspInit+0x5c>)
 8000e08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e0e:	603b      	str	r3, [r7, #0]
 8000e10:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000e12:	2007      	movs	r0, #7
 8000e14:	f000 fbae 	bl	8001574 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* FPU_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(FPU_IRQn, 0, 0);
 8000e18:	2200      	movs	r2, #0
 8000e1a:	2100      	movs	r1, #0
 8000e1c:	2051      	movs	r0, #81	; 0x51
 8000e1e:	f000 fbb4 	bl	800158a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FPU_IRQn);
 8000e22:	2051      	movs	r0, #81	; 0x51
 8000e24:	f000 fbcd 	bl	80015c2 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e28:	bf00      	nop
 8000e2a:	3708      	adds	r7, #8
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	bd80      	pop	{r7, pc}
 8000e30:	40023800 	.word	0x40023800

08000e34 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e34:	b480      	push	{r7}
 8000e36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e38:	e7fe      	b.n	8000e38 <NMI_Handler+0x4>

08000e3a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e3a:	b480      	push	{r7}
 8000e3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e3e:	e7fe      	b.n	8000e3e <HardFault_Handler+0x4>

08000e40 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e40:	b480      	push	{r7}
 8000e42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e44:	e7fe      	b.n	8000e44 <MemManage_Handler+0x4>

08000e46 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e46:	b480      	push	{r7}
 8000e48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e4a:	e7fe      	b.n	8000e4a <BusFault_Handler+0x4>

08000e4c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e50:	e7fe      	b.n	8000e50 <UsageFault_Handler+0x4>

08000e52 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e52:	b480      	push	{r7}
 8000e54:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e56:	bf00      	nop
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5e:	4770      	bx	lr

08000e60 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e60:	b480      	push	{r7}
 8000e62:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e64:	bf00      	nop
 8000e66:	46bd      	mov	sp, r7
 8000e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6c:	4770      	bx	lr

08000e6e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e6e:	b480      	push	{r7}
 8000e70:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e72:	bf00      	nop
 8000e74:	46bd      	mov	sp, r7
 8000e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7a:	4770      	bx	lr

08000e7c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e80:	f000 fa66 	bl	8001350 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e84:	bf00      	nop
 8000e86:	bd80      	pop	{r7, pc}

08000e88 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */
  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch1);
 8000e8c:	4802      	ldr	r0, [pc, #8]	; (8000e98 <DMA1_Stream5_IRQHandler+0x10>)
 8000e8e:	f000 fcdb 	bl	8001848 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8000e92:	bf00      	nop
 8000e94:	bd80      	pop	{r7, pc}
 8000e96:	bf00      	nop
 8000e98:	20004f90 	.word	0x20004f90

08000e9c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000ea0:	4802      	ldr	r0, [pc, #8]	; (8000eac <TIM2_IRQHandler+0x10>)
 8000ea2:	f002 fcc9 	bl	8003838 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000ea6:	bf00      	nop
 8000ea8:	bd80      	pop	{r7, pc}
 8000eaa:	bf00      	nop
 8000eac:	20004ff0 	.word	0x20004ff0

08000eb0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000eb4:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000eb8:	f001 f8ca 	bl	8002050 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000ebc:	bf00      	nop
 8000ebe:	bd80      	pop	{r7, pc}

08000ec0 <FPU_IRQHandler>:

/**
  * @brief This function handles FPU global interrupt.
  */
void FPU_IRQHandler(void)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	af00      	add	r7, sp, #0

  /* USER CODE END FPU_IRQn 0 */
  /* USER CODE BEGIN FPU_IRQn 1 */

  /* USER CODE END FPU_IRQn 1 */
}
 8000ec4:	bf00      	nop
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ecc:	4770      	bx	lr
	...

08000ed0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b086      	sub	sp, #24
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ed8:	4a14      	ldr	r2, [pc, #80]	; (8000f2c <_sbrk+0x5c>)
 8000eda:	4b15      	ldr	r3, [pc, #84]	; (8000f30 <_sbrk+0x60>)
 8000edc:	1ad3      	subs	r3, r2, r3
 8000ede:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ee0:	697b      	ldr	r3, [r7, #20]
 8000ee2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ee4:	4b13      	ldr	r3, [pc, #76]	; (8000f34 <_sbrk+0x64>)
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d102      	bne.n	8000ef2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000eec:	4b11      	ldr	r3, [pc, #68]	; (8000f34 <_sbrk+0x64>)
 8000eee:	4a12      	ldr	r2, [pc, #72]	; (8000f38 <_sbrk+0x68>)
 8000ef0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ef2:	4b10      	ldr	r3, [pc, #64]	; (8000f34 <_sbrk+0x64>)
 8000ef4:	681a      	ldr	r2, [r3, #0]
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	4413      	add	r3, r2
 8000efa:	693a      	ldr	r2, [r7, #16]
 8000efc:	429a      	cmp	r2, r3
 8000efe:	d207      	bcs.n	8000f10 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f00:	f003 fef6 	bl	8004cf0 <__errno>
 8000f04:	4602      	mov	r2, r0
 8000f06:	230c      	movs	r3, #12
 8000f08:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8000f0a:	f04f 33ff 	mov.w	r3, #4294967295
 8000f0e:	e009      	b.n	8000f24 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f10:	4b08      	ldr	r3, [pc, #32]	; (8000f34 <_sbrk+0x64>)
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f16:	4b07      	ldr	r3, [pc, #28]	; (8000f34 <_sbrk+0x64>)
 8000f18:	681a      	ldr	r2, [r3, #0]
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	4413      	add	r3, r2
 8000f1e:	4a05      	ldr	r2, [pc, #20]	; (8000f34 <_sbrk+0x64>)
 8000f20:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f22:	68fb      	ldr	r3, [r7, #12]
}
 8000f24:	4618      	mov	r0, r3
 8000f26:	3718      	adds	r7, #24
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	bd80      	pop	{r7, pc}
 8000f2c:	20018000 	.word	0x20018000
 8000f30:	00000400 	.word	0x00000400
 8000f34:	20000098 	.word	0x20000098
 8000f38:	20005078 	.word	0x20005078

08000f3c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f40:	4b08      	ldr	r3, [pc, #32]	; (8000f64 <SystemInit+0x28>)
 8000f42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f46:	4a07      	ldr	r2, [pc, #28]	; (8000f64 <SystemInit+0x28>)
 8000f48:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f4c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000f50:	4b04      	ldr	r3, [pc, #16]	; (8000f64 <SystemInit+0x28>)
 8000f52:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000f56:	609a      	str	r2, [r3, #8]
#endif
}
 8000f58:	bf00      	nop
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f60:	4770      	bx	lr
 8000f62:	bf00      	nop
 8000f64:	e000ed00 	.word	0xe000ed00

08000f68 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
DMA_HandleTypeDef hdma_tim2_ch1;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b08e      	sub	sp, #56	; 0x38
 8000f6c:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f6e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000f72:	2200      	movs	r2, #0
 8000f74:	601a      	str	r2, [r3, #0]
 8000f76:	605a      	str	r2, [r3, #4]
 8000f78:	609a      	str	r2, [r3, #8]
 8000f7a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f7c:	f107 0320 	add.w	r3, r7, #32
 8000f80:	2200      	movs	r2, #0
 8000f82:	601a      	str	r2, [r3, #0]
 8000f84:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f86:	1d3b      	adds	r3, r7, #4
 8000f88:	2200      	movs	r2, #0
 8000f8a:	601a      	str	r2, [r3, #0]
 8000f8c:	605a      	str	r2, [r3, #4]
 8000f8e:	609a      	str	r2, [r3, #8]
 8000f90:	60da      	str	r2, [r3, #12]
 8000f92:	611a      	str	r2, [r3, #16]
 8000f94:	615a      	str	r2, [r3, #20]
 8000f96:	619a      	str	r2, [r3, #24]

  htim2.Instance = TIM2;
 8000f98:	4b2c      	ldr	r3, [pc, #176]	; (800104c <MX_TIM2_Init+0xe4>)
 8000f9a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000f9e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1-1;
 8000fa0:	4b2a      	ldr	r3, [pc, #168]	; (800104c <MX_TIM2_Init+0xe4>)
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fa6:	4b29      	ldr	r3, [pc, #164]	; (800104c <MX_TIM2_Init+0xe4>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 90-1;
 8000fac:	4b27      	ldr	r3, [pc, #156]	; (800104c <MX_TIM2_Init+0xe4>)
 8000fae:	2259      	movs	r2, #89	; 0x59
 8000fb0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fb2:	4b26      	ldr	r3, [pc, #152]	; (800104c <MX_TIM2_Init+0xe4>)
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000fb8:	4b24      	ldr	r3, [pc, #144]	; (800104c <MX_TIM2_Init+0xe4>)
 8000fba:	2280      	movs	r2, #128	; 0x80
 8000fbc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000fbe:	4823      	ldr	r0, [pc, #140]	; (800104c <MX_TIM2_Init+0xe4>)
 8000fc0:	f002 fa2e 	bl	8003420 <HAL_TIM_Base_Init>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d001      	beq.n	8000fce <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 8000fca:	f7ff feff 	bl	8000dcc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000fce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fd2:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000fd4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000fd8:	4619      	mov	r1, r3
 8000fda:	481c      	ldr	r0, [pc, #112]	; (800104c <MX_TIM2_Init+0xe4>)
 8000fdc:	f002 fdfa 	bl	8003bd4 <HAL_TIM_ConfigClockSource>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d001      	beq.n	8000fea <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 8000fe6:	f7ff fef1 	bl	8000dcc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000fea:	4818      	ldr	r0, [pc, #96]	; (800104c <MX_TIM2_Init+0xe4>)
 8000fec:	f002 fa43 	bl	8003476 <HAL_TIM_PWM_Init>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d001      	beq.n	8000ffa <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 8000ff6:	f7ff fee9 	bl	8000dcc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ffe:	2300      	movs	r3, #0
 8001000:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001002:	f107 0320 	add.w	r3, r7, #32
 8001006:	4619      	mov	r1, r3
 8001008:	4810      	ldr	r0, [pc, #64]	; (800104c <MX_TIM2_Init+0xe4>)
 800100a:	f003 fa25 	bl	8004458 <HAL_TIMEx_MasterConfigSynchronization>
 800100e:	4603      	mov	r3, r0
 8001010:	2b00      	cmp	r3, #0
 8001012:	d001      	beq.n	8001018 <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 8001014:	f7ff feda 	bl	8000dcc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001018:	2360      	movs	r3, #96	; 0x60
 800101a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1;
 800101c:	2301      	movs	r3, #1
 800101e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001020:	2300      	movs	r3, #0
 8001022:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001024:	2300      	movs	r3, #0
 8001026:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001028:	1d3b      	adds	r3, r7, #4
 800102a:	2200      	movs	r2, #0
 800102c:	4619      	mov	r1, r3
 800102e:	4807      	ldr	r0, [pc, #28]	; (800104c <MX_TIM2_Init+0xe4>)
 8001030:	f002 fd0a 	bl	8003a48 <HAL_TIM_PWM_ConfigChannel>
 8001034:	4603      	mov	r3, r0
 8001036:	2b00      	cmp	r3, #0
 8001038:	d001      	beq.n	800103e <MX_TIM2_Init+0xd6>
  {
    Error_Handler();
 800103a:	f7ff fec7 	bl	8000dcc <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim2);
 800103e:	4803      	ldr	r0, [pc, #12]	; (800104c <MX_TIM2_Init+0xe4>)
 8001040:	f000 f860 	bl	8001104 <HAL_TIM_MspPostInit>

}
 8001044:	bf00      	nop
 8001046:	3738      	adds	r7, #56	; 0x38
 8001048:	46bd      	mov	sp, r7
 800104a:	bd80      	pop	{r7, pc}
 800104c:	20004ff0 	.word	0x20004ff0

08001050 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b084      	sub	sp, #16
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001060:	d146      	bne.n	80010f0 <HAL_TIM_Base_MspInit+0xa0>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001062:	2300      	movs	r3, #0
 8001064:	60fb      	str	r3, [r7, #12]
 8001066:	4b24      	ldr	r3, [pc, #144]	; (80010f8 <HAL_TIM_Base_MspInit+0xa8>)
 8001068:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800106a:	4a23      	ldr	r2, [pc, #140]	; (80010f8 <HAL_TIM_Base_MspInit+0xa8>)
 800106c:	f043 0301 	orr.w	r3, r3, #1
 8001070:	6413      	str	r3, [r2, #64]	; 0x40
 8001072:	4b21      	ldr	r3, [pc, #132]	; (80010f8 <HAL_TIM_Base_MspInit+0xa8>)
 8001074:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001076:	f003 0301 	and.w	r3, r3, #1
 800107a:	60fb      	str	r3, [r7, #12]
 800107c:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 DMA Init */
    /* TIM2_CH1 Init */
    hdma_tim2_ch1.Instance = DMA1_Stream5;
 800107e:	4b1f      	ldr	r3, [pc, #124]	; (80010fc <HAL_TIM_Base_MspInit+0xac>)
 8001080:	4a1f      	ldr	r2, [pc, #124]	; (8001100 <HAL_TIM_Base_MspInit+0xb0>)
 8001082:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch1.Init.Channel = DMA_CHANNEL_3;
 8001084:	4b1d      	ldr	r3, [pc, #116]	; (80010fc <HAL_TIM_Base_MspInit+0xac>)
 8001086:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 800108a:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800108c:	4b1b      	ldr	r3, [pc, #108]	; (80010fc <HAL_TIM_Base_MspInit+0xac>)
 800108e:	2240      	movs	r2, #64	; 0x40
 8001090:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001092:	4b1a      	ldr	r3, [pc, #104]	; (80010fc <HAL_TIM_Base_MspInit+0xac>)
 8001094:	2200      	movs	r2, #0
 8001096:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8001098:	4b18      	ldr	r3, [pc, #96]	; (80010fc <HAL_TIM_Base_MspInit+0xac>)
 800109a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800109e:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80010a0:	4b16      	ldr	r3, [pc, #88]	; (80010fc <HAL_TIM_Base_MspInit+0xac>)
 80010a2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80010a6:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80010a8:	4b14      	ldr	r3, [pc, #80]	; (80010fc <HAL_TIM_Base_MspInit+0xac>)
 80010aa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80010ae:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch1.Init.Mode = DMA_CIRCULAR;
 80010b0:	4b12      	ldr	r3, [pc, #72]	; (80010fc <HAL_TIM_Base_MspInit+0xac>)
 80010b2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80010b6:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch1.Init.Priority = DMA_PRIORITY_LOW;
 80010b8:	4b10      	ldr	r3, [pc, #64]	; (80010fc <HAL_TIM_Base_MspInit+0xac>)
 80010ba:	2200      	movs	r2, #0
 80010bc:	621a      	str	r2, [r3, #32]
    hdma_tim2_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80010be:	4b0f      	ldr	r3, [pc, #60]	; (80010fc <HAL_TIM_Base_MspInit+0xac>)
 80010c0:	2200      	movs	r2, #0
 80010c2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim2_ch1) != HAL_OK)
 80010c4:	480d      	ldr	r0, [pc, #52]	; (80010fc <HAL_TIM_Base_MspInit+0xac>)
 80010c6:	f000 fa97 	bl	80015f8 <HAL_DMA_Init>
 80010ca:	4603      	mov	r3, r0
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d001      	beq.n	80010d4 <HAL_TIM_Base_MspInit+0x84>
    {
      Error_Handler();
 80010d0:	f7ff fe7c 	bl	8000dcc <Error_Handler>
    }

    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC1],hdma_tim2_ch1);
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	4a09      	ldr	r2, [pc, #36]	; (80010fc <HAL_TIM_Base_MspInit+0xac>)
 80010d8:	625a      	str	r2, [r3, #36]	; 0x24
 80010da:	4a08      	ldr	r2, [pc, #32]	; (80010fc <HAL_TIM_Base_MspInit+0xac>)
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	6393      	str	r3, [r2, #56]	; 0x38

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80010e0:	2200      	movs	r2, #0
 80010e2:	2100      	movs	r1, #0
 80010e4:	201c      	movs	r0, #28
 80010e6:	f000 fa50 	bl	800158a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80010ea:	201c      	movs	r0, #28
 80010ec:	f000 fa69 	bl	80015c2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 80010f0:	bf00      	nop
 80010f2:	3710      	adds	r7, #16
 80010f4:	46bd      	mov	sp, r7
 80010f6:	bd80      	pop	{r7, pc}
 80010f8:	40023800 	.word	0x40023800
 80010fc:	20004f90 	.word	0x20004f90
 8001100:	40026088 	.word	0x40026088

08001104 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b088      	sub	sp, #32
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800110c:	f107 030c 	add.w	r3, r7, #12
 8001110:	2200      	movs	r2, #0
 8001112:	601a      	str	r2, [r3, #0]
 8001114:	605a      	str	r2, [r3, #4]
 8001116:	609a      	str	r2, [r3, #8]
 8001118:	60da      	str	r2, [r3, #12]
 800111a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001124:	d11d      	bne.n	8001162 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001126:	2300      	movs	r3, #0
 8001128:	60bb      	str	r3, [r7, #8]
 800112a:	4b10      	ldr	r3, [pc, #64]	; (800116c <HAL_TIM_MspPostInit+0x68>)
 800112c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800112e:	4a0f      	ldr	r2, [pc, #60]	; (800116c <HAL_TIM_MspPostInit+0x68>)
 8001130:	f043 0301 	orr.w	r3, r3, #1
 8001134:	6313      	str	r3, [r2, #48]	; 0x30
 8001136:	4b0d      	ldr	r3, [pc, #52]	; (800116c <HAL_TIM_MspPostInit+0x68>)
 8001138:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800113a:	f003 0301 	and.w	r3, r3, #1
 800113e:	60bb      	str	r3, [r7, #8]
 8001140:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001142:	2301      	movs	r3, #1
 8001144:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001146:	2302      	movs	r3, #2
 8001148:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800114a:	2300      	movs	r3, #0
 800114c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800114e:	2300      	movs	r3, #0
 8001150:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001152:	2301      	movs	r3, #1
 8001154:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001156:	f107 030c 	add.w	r3, r7, #12
 800115a:	4619      	mov	r1, r3
 800115c:	4804      	ldr	r0, [pc, #16]	; (8001170 <HAL_TIM_MspPostInit+0x6c>)
 800115e:	f000 fddb 	bl	8001d18 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001162:	bf00      	nop
 8001164:	3720      	adds	r7, #32
 8001166:	46bd      	mov	sp, r7
 8001168:	bd80      	pop	{r7, pc}
 800116a:	bf00      	nop
 800116c:	40023800 	.word	0x40023800
 8001170:	40020000 	.word	0x40020000

08001174 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8001178:	4b11      	ldr	r3, [pc, #68]	; (80011c0 <MX_USART2_UART_Init+0x4c>)
 800117a:	4a12      	ldr	r2, [pc, #72]	; (80011c4 <MX_USART2_UART_Init+0x50>)
 800117c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800117e:	4b10      	ldr	r3, [pc, #64]	; (80011c0 <MX_USART2_UART_Init+0x4c>)
 8001180:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001184:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001186:	4b0e      	ldr	r3, [pc, #56]	; (80011c0 <MX_USART2_UART_Init+0x4c>)
 8001188:	2200      	movs	r2, #0
 800118a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800118c:	4b0c      	ldr	r3, [pc, #48]	; (80011c0 <MX_USART2_UART_Init+0x4c>)
 800118e:	2200      	movs	r2, #0
 8001190:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001192:	4b0b      	ldr	r3, [pc, #44]	; (80011c0 <MX_USART2_UART_Init+0x4c>)
 8001194:	2200      	movs	r2, #0
 8001196:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001198:	4b09      	ldr	r3, [pc, #36]	; (80011c0 <MX_USART2_UART_Init+0x4c>)
 800119a:	220c      	movs	r2, #12
 800119c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800119e:	4b08      	ldr	r3, [pc, #32]	; (80011c0 <MX_USART2_UART_Init+0x4c>)
 80011a0:	2200      	movs	r2, #0
 80011a2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80011a4:	4b06      	ldr	r3, [pc, #24]	; (80011c0 <MX_USART2_UART_Init+0x4c>)
 80011a6:	2200      	movs	r2, #0
 80011a8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80011aa:	4805      	ldr	r0, [pc, #20]	; (80011c0 <MX_USART2_UART_Init+0x4c>)
 80011ac:	f003 f9d6 	bl	800455c <HAL_UART_Init>
 80011b0:	4603      	mov	r3, r0
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d001      	beq.n	80011ba <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80011b6:	f7ff fe09 	bl	8000dcc <Error_Handler>
  }

}
 80011ba:	bf00      	nop
 80011bc:	bd80      	pop	{r7, pc}
 80011be:	bf00      	nop
 80011c0:	20005030 	.word	0x20005030
 80011c4:	40004400 	.word	0x40004400

080011c8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b08a      	sub	sp, #40	; 0x28
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011d0:	f107 0314 	add.w	r3, r7, #20
 80011d4:	2200      	movs	r2, #0
 80011d6:	601a      	str	r2, [r3, #0]
 80011d8:	605a      	str	r2, [r3, #4]
 80011da:	609a      	str	r2, [r3, #8]
 80011dc:	60da      	str	r2, [r3, #12]
 80011de:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	4a19      	ldr	r2, [pc, #100]	; (800124c <HAL_UART_MspInit+0x84>)
 80011e6:	4293      	cmp	r3, r2
 80011e8:	d12b      	bne.n	8001242 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80011ea:	2300      	movs	r3, #0
 80011ec:	613b      	str	r3, [r7, #16]
 80011ee:	4b18      	ldr	r3, [pc, #96]	; (8001250 <HAL_UART_MspInit+0x88>)
 80011f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011f2:	4a17      	ldr	r2, [pc, #92]	; (8001250 <HAL_UART_MspInit+0x88>)
 80011f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011f8:	6413      	str	r3, [r2, #64]	; 0x40
 80011fa:	4b15      	ldr	r3, [pc, #84]	; (8001250 <HAL_UART_MspInit+0x88>)
 80011fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001202:	613b      	str	r3, [r7, #16]
 8001204:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001206:	2300      	movs	r3, #0
 8001208:	60fb      	str	r3, [r7, #12]
 800120a:	4b11      	ldr	r3, [pc, #68]	; (8001250 <HAL_UART_MspInit+0x88>)
 800120c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800120e:	4a10      	ldr	r2, [pc, #64]	; (8001250 <HAL_UART_MspInit+0x88>)
 8001210:	f043 0301 	orr.w	r3, r3, #1
 8001214:	6313      	str	r3, [r2, #48]	; 0x30
 8001216:	4b0e      	ldr	r3, [pc, #56]	; (8001250 <HAL_UART_MspInit+0x88>)
 8001218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800121a:	f003 0301 	and.w	r3, r3, #1
 800121e:	60fb      	str	r3, [r7, #12]
 8001220:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001222:	230c      	movs	r3, #12
 8001224:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001226:	2302      	movs	r3, #2
 8001228:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800122a:	2300      	movs	r3, #0
 800122c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800122e:	2300      	movs	r3, #0
 8001230:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001232:	2307      	movs	r3, #7
 8001234:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001236:	f107 0314 	add.w	r3, r7, #20
 800123a:	4619      	mov	r1, r3
 800123c:	4805      	ldr	r0, [pc, #20]	; (8001254 <HAL_UART_MspInit+0x8c>)
 800123e:	f000 fd6b 	bl	8001d18 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001242:	bf00      	nop
 8001244:	3728      	adds	r7, #40	; 0x28
 8001246:	46bd      	mov	sp, r7
 8001248:	bd80      	pop	{r7, pc}
 800124a:	bf00      	nop
 800124c:	40004400 	.word	0x40004400
 8001250:	40023800 	.word	0x40023800
 8001254:	40020000 	.word	0x40020000

08001258 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001258:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001290 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800125c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800125e:	e003      	b.n	8001268 <LoopCopyDataInit>

08001260 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001260:	4b0c      	ldr	r3, [pc, #48]	; (8001294 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001262:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001264:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001266:	3104      	adds	r1, #4

08001268 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001268:	480b      	ldr	r0, [pc, #44]	; (8001298 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800126a:	4b0c      	ldr	r3, [pc, #48]	; (800129c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800126c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800126e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001270:	d3f6      	bcc.n	8001260 <CopyDataInit>
  ldr  r2, =_sbss
 8001272:	4a0b      	ldr	r2, [pc, #44]	; (80012a0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001274:	e002      	b.n	800127c <LoopFillZerobss>

08001276 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001276:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001278:	f842 3b04 	str.w	r3, [r2], #4

0800127c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800127c:	4b09      	ldr	r3, [pc, #36]	; (80012a4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800127e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001280:	d3f9      	bcc.n	8001276 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001282:	f7ff fe5b 	bl	8000f3c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001286:	f003 fd39 	bl	8004cfc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800128a:	f7ff fccf 	bl	8000c2c <main>
  bx  lr    
 800128e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001290:	20018000 	.word	0x20018000
  ldr  r3, =_sidata
 8001294:	0800567c 	.word	0x0800567c
  ldr  r0, =_sdata
 8001298:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800129c:	20000070 	.word	0x20000070
  ldr  r2, =_sbss
 80012a0:	20000070 	.word	0x20000070
  ldr  r3, = _ebss
 80012a4:	20005078 	.word	0x20005078

080012a8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80012a8:	e7fe      	b.n	80012a8 <ADC_IRQHandler>
	...

080012ac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80012b0:	4b0e      	ldr	r3, [pc, #56]	; (80012ec <HAL_Init+0x40>)
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	4a0d      	ldr	r2, [pc, #52]	; (80012ec <HAL_Init+0x40>)
 80012b6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80012ba:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80012bc:	4b0b      	ldr	r3, [pc, #44]	; (80012ec <HAL_Init+0x40>)
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	4a0a      	ldr	r2, [pc, #40]	; (80012ec <HAL_Init+0x40>)
 80012c2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80012c6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80012c8:	4b08      	ldr	r3, [pc, #32]	; (80012ec <HAL_Init+0x40>)
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	4a07      	ldr	r2, [pc, #28]	; (80012ec <HAL_Init+0x40>)
 80012ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012d2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012d4:	2003      	movs	r0, #3
 80012d6:	f000 f94d 	bl	8001574 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80012da:	2000      	movs	r0, #0
 80012dc:	f000 f808 	bl	80012f0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80012e0:	f7ff fd78 	bl	8000dd4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80012e4:	2300      	movs	r3, #0
}
 80012e6:	4618      	mov	r0, r3
 80012e8:	bd80      	pop	{r7, pc}
 80012ea:	bf00      	nop
 80012ec:	40023c00 	.word	0x40023c00

080012f0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b082      	sub	sp, #8
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80012f8:	4b12      	ldr	r3, [pc, #72]	; (8001344 <HAL_InitTick+0x54>)
 80012fa:	681a      	ldr	r2, [r3, #0]
 80012fc:	4b12      	ldr	r3, [pc, #72]	; (8001348 <HAL_InitTick+0x58>)
 80012fe:	781b      	ldrb	r3, [r3, #0]
 8001300:	4619      	mov	r1, r3
 8001302:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001306:	fbb3 f3f1 	udiv	r3, r3, r1
 800130a:	fbb2 f3f3 	udiv	r3, r2, r3
 800130e:	4618      	mov	r0, r3
 8001310:	f000 f965 	bl	80015de <HAL_SYSTICK_Config>
 8001314:	4603      	mov	r3, r0
 8001316:	2b00      	cmp	r3, #0
 8001318:	d001      	beq.n	800131e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800131a:	2301      	movs	r3, #1
 800131c:	e00e      	b.n	800133c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	2b0f      	cmp	r3, #15
 8001322:	d80a      	bhi.n	800133a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001324:	2200      	movs	r2, #0
 8001326:	6879      	ldr	r1, [r7, #4]
 8001328:	f04f 30ff 	mov.w	r0, #4294967295
 800132c:	f000 f92d 	bl	800158a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001330:	4a06      	ldr	r2, [pc, #24]	; (800134c <HAL_InitTick+0x5c>)
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001336:	2300      	movs	r3, #0
 8001338:	e000      	b.n	800133c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800133a:	2301      	movs	r3, #1
}
 800133c:	4618      	mov	r0, r3
 800133e:	3708      	adds	r7, #8
 8001340:	46bd      	mov	sp, r7
 8001342:	bd80      	pop	{r7, pc}
 8001344:	20000000 	.word	0x20000000
 8001348:	20000008 	.word	0x20000008
 800134c:	20000004 	.word	0x20000004

08001350 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001350:	b480      	push	{r7}
 8001352:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001354:	4b06      	ldr	r3, [pc, #24]	; (8001370 <HAL_IncTick+0x20>)
 8001356:	781b      	ldrb	r3, [r3, #0]
 8001358:	461a      	mov	r2, r3
 800135a:	4b06      	ldr	r3, [pc, #24]	; (8001374 <HAL_IncTick+0x24>)
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	4413      	add	r3, r2
 8001360:	4a04      	ldr	r2, [pc, #16]	; (8001374 <HAL_IncTick+0x24>)
 8001362:	6013      	str	r3, [r2, #0]
}
 8001364:	bf00      	nop
 8001366:	46bd      	mov	sp, r7
 8001368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136c:	4770      	bx	lr
 800136e:	bf00      	nop
 8001370:	20000008 	.word	0x20000008
 8001374:	20005070 	.word	0x20005070

08001378 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001378:	b480      	push	{r7}
 800137a:	af00      	add	r7, sp, #0
  return uwTick;
 800137c:	4b03      	ldr	r3, [pc, #12]	; (800138c <HAL_GetTick+0x14>)
 800137e:	681b      	ldr	r3, [r3, #0]
}
 8001380:	4618      	mov	r0, r3
 8001382:	46bd      	mov	sp, r7
 8001384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001388:	4770      	bx	lr
 800138a:	bf00      	nop
 800138c:	20005070 	.word	0x20005070

08001390 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b084      	sub	sp, #16
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001398:	f7ff ffee 	bl	8001378 <HAL_GetTick>
 800139c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80013a2:	68fb      	ldr	r3, [r7, #12]
 80013a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013a8:	d005      	beq.n	80013b6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80013aa:	4b09      	ldr	r3, [pc, #36]	; (80013d0 <HAL_Delay+0x40>)
 80013ac:	781b      	ldrb	r3, [r3, #0]
 80013ae:	461a      	mov	r2, r3
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	4413      	add	r3, r2
 80013b4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80013b6:	bf00      	nop
 80013b8:	f7ff ffde 	bl	8001378 <HAL_GetTick>
 80013bc:	4602      	mov	r2, r0
 80013be:	68bb      	ldr	r3, [r7, #8]
 80013c0:	1ad3      	subs	r3, r2, r3
 80013c2:	68fa      	ldr	r2, [r7, #12]
 80013c4:	429a      	cmp	r2, r3
 80013c6:	d8f7      	bhi.n	80013b8 <HAL_Delay+0x28>
  {
  }
}
 80013c8:	bf00      	nop
 80013ca:	3710      	adds	r7, #16
 80013cc:	46bd      	mov	sp, r7
 80013ce:	bd80      	pop	{r7, pc}
 80013d0:	20000008 	.word	0x20000008

080013d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013d4:	b480      	push	{r7}
 80013d6:	b085      	sub	sp, #20
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	f003 0307 	and.w	r3, r3, #7
 80013e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80013e4:	4b0c      	ldr	r3, [pc, #48]	; (8001418 <__NVIC_SetPriorityGrouping+0x44>)
 80013e6:	68db      	ldr	r3, [r3, #12]
 80013e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013ea:	68ba      	ldr	r2, [r7, #8]
 80013ec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80013f0:	4013      	ands	r3, r2
 80013f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80013f8:	68bb      	ldr	r3, [r7, #8]
 80013fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80013fc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001400:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001404:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001406:	4a04      	ldr	r2, [pc, #16]	; (8001418 <__NVIC_SetPriorityGrouping+0x44>)
 8001408:	68bb      	ldr	r3, [r7, #8]
 800140a:	60d3      	str	r3, [r2, #12]
}
 800140c:	bf00      	nop
 800140e:	3714      	adds	r7, #20
 8001410:	46bd      	mov	sp, r7
 8001412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001416:	4770      	bx	lr
 8001418:	e000ed00 	.word	0xe000ed00

0800141c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800141c:	b480      	push	{r7}
 800141e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001420:	4b04      	ldr	r3, [pc, #16]	; (8001434 <__NVIC_GetPriorityGrouping+0x18>)
 8001422:	68db      	ldr	r3, [r3, #12]
 8001424:	0a1b      	lsrs	r3, r3, #8
 8001426:	f003 0307 	and.w	r3, r3, #7
}
 800142a:	4618      	mov	r0, r3
 800142c:	46bd      	mov	sp, r7
 800142e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001432:	4770      	bx	lr
 8001434:	e000ed00 	.word	0xe000ed00

08001438 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001438:	b480      	push	{r7}
 800143a:	b083      	sub	sp, #12
 800143c:	af00      	add	r7, sp, #0
 800143e:	4603      	mov	r3, r0
 8001440:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001442:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001446:	2b00      	cmp	r3, #0
 8001448:	db0b      	blt.n	8001462 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800144a:	79fb      	ldrb	r3, [r7, #7]
 800144c:	f003 021f 	and.w	r2, r3, #31
 8001450:	4907      	ldr	r1, [pc, #28]	; (8001470 <__NVIC_EnableIRQ+0x38>)
 8001452:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001456:	095b      	lsrs	r3, r3, #5
 8001458:	2001      	movs	r0, #1
 800145a:	fa00 f202 	lsl.w	r2, r0, r2
 800145e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001462:	bf00      	nop
 8001464:	370c      	adds	r7, #12
 8001466:	46bd      	mov	sp, r7
 8001468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146c:	4770      	bx	lr
 800146e:	bf00      	nop
 8001470:	e000e100 	.word	0xe000e100

08001474 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001474:	b480      	push	{r7}
 8001476:	b083      	sub	sp, #12
 8001478:	af00      	add	r7, sp, #0
 800147a:	4603      	mov	r3, r0
 800147c:	6039      	str	r1, [r7, #0]
 800147e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001480:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001484:	2b00      	cmp	r3, #0
 8001486:	db0a      	blt.n	800149e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001488:	683b      	ldr	r3, [r7, #0]
 800148a:	b2da      	uxtb	r2, r3
 800148c:	490c      	ldr	r1, [pc, #48]	; (80014c0 <__NVIC_SetPriority+0x4c>)
 800148e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001492:	0112      	lsls	r2, r2, #4
 8001494:	b2d2      	uxtb	r2, r2
 8001496:	440b      	add	r3, r1
 8001498:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800149c:	e00a      	b.n	80014b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800149e:	683b      	ldr	r3, [r7, #0]
 80014a0:	b2da      	uxtb	r2, r3
 80014a2:	4908      	ldr	r1, [pc, #32]	; (80014c4 <__NVIC_SetPriority+0x50>)
 80014a4:	79fb      	ldrb	r3, [r7, #7]
 80014a6:	f003 030f 	and.w	r3, r3, #15
 80014aa:	3b04      	subs	r3, #4
 80014ac:	0112      	lsls	r2, r2, #4
 80014ae:	b2d2      	uxtb	r2, r2
 80014b0:	440b      	add	r3, r1
 80014b2:	761a      	strb	r2, [r3, #24]
}
 80014b4:	bf00      	nop
 80014b6:	370c      	adds	r7, #12
 80014b8:	46bd      	mov	sp, r7
 80014ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014be:	4770      	bx	lr
 80014c0:	e000e100 	.word	0xe000e100
 80014c4:	e000ed00 	.word	0xe000ed00

080014c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014c8:	b480      	push	{r7}
 80014ca:	b089      	sub	sp, #36	; 0x24
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	60f8      	str	r0, [r7, #12]
 80014d0:	60b9      	str	r1, [r7, #8]
 80014d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	f003 0307 	and.w	r3, r3, #7
 80014da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014dc:	69fb      	ldr	r3, [r7, #28]
 80014de:	f1c3 0307 	rsb	r3, r3, #7
 80014e2:	2b04      	cmp	r3, #4
 80014e4:	bf28      	it	cs
 80014e6:	2304      	movcs	r3, #4
 80014e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014ea:	69fb      	ldr	r3, [r7, #28]
 80014ec:	3304      	adds	r3, #4
 80014ee:	2b06      	cmp	r3, #6
 80014f0:	d902      	bls.n	80014f8 <NVIC_EncodePriority+0x30>
 80014f2:	69fb      	ldr	r3, [r7, #28]
 80014f4:	3b03      	subs	r3, #3
 80014f6:	e000      	b.n	80014fa <NVIC_EncodePriority+0x32>
 80014f8:	2300      	movs	r3, #0
 80014fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014fc:	f04f 32ff 	mov.w	r2, #4294967295
 8001500:	69bb      	ldr	r3, [r7, #24]
 8001502:	fa02 f303 	lsl.w	r3, r2, r3
 8001506:	43da      	mvns	r2, r3
 8001508:	68bb      	ldr	r3, [r7, #8]
 800150a:	401a      	ands	r2, r3
 800150c:	697b      	ldr	r3, [r7, #20]
 800150e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001510:	f04f 31ff 	mov.w	r1, #4294967295
 8001514:	697b      	ldr	r3, [r7, #20]
 8001516:	fa01 f303 	lsl.w	r3, r1, r3
 800151a:	43d9      	mvns	r1, r3
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001520:	4313      	orrs	r3, r2
         );
}
 8001522:	4618      	mov	r0, r3
 8001524:	3724      	adds	r7, #36	; 0x24
 8001526:	46bd      	mov	sp, r7
 8001528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152c:	4770      	bx	lr
	...

08001530 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b082      	sub	sp, #8
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	3b01      	subs	r3, #1
 800153c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001540:	d301      	bcc.n	8001546 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001542:	2301      	movs	r3, #1
 8001544:	e00f      	b.n	8001566 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001546:	4a0a      	ldr	r2, [pc, #40]	; (8001570 <SysTick_Config+0x40>)
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	3b01      	subs	r3, #1
 800154c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800154e:	210f      	movs	r1, #15
 8001550:	f04f 30ff 	mov.w	r0, #4294967295
 8001554:	f7ff ff8e 	bl	8001474 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001558:	4b05      	ldr	r3, [pc, #20]	; (8001570 <SysTick_Config+0x40>)
 800155a:	2200      	movs	r2, #0
 800155c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800155e:	4b04      	ldr	r3, [pc, #16]	; (8001570 <SysTick_Config+0x40>)
 8001560:	2207      	movs	r2, #7
 8001562:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001564:	2300      	movs	r3, #0
}
 8001566:	4618      	mov	r0, r3
 8001568:	3708      	adds	r7, #8
 800156a:	46bd      	mov	sp, r7
 800156c:	bd80      	pop	{r7, pc}
 800156e:	bf00      	nop
 8001570:	e000e010 	.word	0xe000e010

08001574 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b082      	sub	sp, #8
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800157c:	6878      	ldr	r0, [r7, #4]
 800157e:	f7ff ff29 	bl	80013d4 <__NVIC_SetPriorityGrouping>
}
 8001582:	bf00      	nop
 8001584:	3708      	adds	r7, #8
 8001586:	46bd      	mov	sp, r7
 8001588:	bd80      	pop	{r7, pc}

0800158a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800158a:	b580      	push	{r7, lr}
 800158c:	b086      	sub	sp, #24
 800158e:	af00      	add	r7, sp, #0
 8001590:	4603      	mov	r3, r0
 8001592:	60b9      	str	r1, [r7, #8]
 8001594:	607a      	str	r2, [r7, #4]
 8001596:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001598:	2300      	movs	r3, #0
 800159a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800159c:	f7ff ff3e 	bl	800141c <__NVIC_GetPriorityGrouping>
 80015a0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80015a2:	687a      	ldr	r2, [r7, #4]
 80015a4:	68b9      	ldr	r1, [r7, #8]
 80015a6:	6978      	ldr	r0, [r7, #20]
 80015a8:	f7ff ff8e 	bl	80014c8 <NVIC_EncodePriority>
 80015ac:	4602      	mov	r2, r0
 80015ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015b2:	4611      	mov	r1, r2
 80015b4:	4618      	mov	r0, r3
 80015b6:	f7ff ff5d 	bl	8001474 <__NVIC_SetPriority>
}
 80015ba:	bf00      	nop
 80015bc:	3718      	adds	r7, #24
 80015be:	46bd      	mov	sp, r7
 80015c0:	bd80      	pop	{r7, pc}

080015c2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015c2:	b580      	push	{r7, lr}
 80015c4:	b082      	sub	sp, #8
 80015c6:	af00      	add	r7, sp, #0
 80015c8:	4603      	mov	r3, r0
 80015ca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80015cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015d0:	4618      	mov	r0, r3
 80015d2:	f7ff ff31 	bl	8001438 <__NVIC_EnableIRQ>
}
 80015d6:	bf00      	nop
 80015d8:	3708      	adds	r7, #8
 80015da:	46bd      	mov	sp, r7
 80015dc:	bd80      	pop	{r7, pc}

080015de <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80015de:	b580      	push	{r7, lr}
 80015e0:	b082      	sub	sp, #8
 80015e2:	af00      	add	r7, sp, #0
 80015e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80015e6:	6878      	ldr	r0, [r7, #4]
 80015e8:	f7ff ffa2 	bl	8001530 <SysTick_Config>
 80015ec:	4603      	mov	r3, r0
}
 80015ee:	4618      	mov	r0, r3
 80015f0:	3708      	adds	r7, #8
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bd80      	pop	{r7, pc}
	...

080015f8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b086      	sub	sp, #24
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001600:	2300      	movs	r3, #0
 8001602:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001604:	f7ff feb8 	bl	8001378 <HAL_GetTick>
 8001608:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	2b00      	cmp	r3, #0
 800160e:	d101      	bne.n	8001614 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001610:	2301      	movs	r3, #1
 8001612:	e099      	b.n	8001748 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	2200      	movs	r2, #0
 8001618:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	2202      	movs	r2, #2
 8001620:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	681a      	ldr	r2, [r3, #0]
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	f022 0201 	bic.w	r2, r2, #1
 8001632:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001634:	e00f      	b.n	8001656 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001636:	f7ff fe9f 	bl	8001378 <HAL_GetTick>
 800163a:	4602      	mov	r2, r0
 800163c:	693b      	ldr	r3, [r7, #16]
 800163e:	1ad3      	subs	r3, r2, r3
 8001640:	2b05      	cmp	r3, #5
 8001642:	d908      	bls.n	8001656 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	2220      	movs	r2, #32
 8001648:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	2203      	movs	r2, #3
 800164e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001652:	2303      	movs	r3, #3
 8001654:	e078      	b.n	8001748 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	f003 0301 	and.w	r3, r3, #1
 8001660:	2b00      	cmp	r3, #0
 8001662:	d1e8      	bne.n	8001636 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800166c:	697a      	ldr	r2, [r7, #20]
 800166e:	4b38      	ldr	r3, [pc, #224]	; (8001750 <HAL_DMA_Init+0x158>)
 8001670:	4013      	ands	r3, r2
 8001672:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	685a      	ldr	r2, [r3, #4]
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	689b      	ldr	r3, [r3, #8]
 800167c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001682:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	691b      	ldr	r3, [r3, #16]
 8001688:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800168e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	699b      	ldr	r3, [r3, #24]
 8001694:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800169a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	6a1b      	ldr	r3, [r3, #32]
 80016a0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80016a2:	697a      	ldr	r2, [r7, #20]
 80016a4:	4313      	orrs	r3, r2
 80016a6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016ac:	2b04      	cmp	r3, #4
 80016ae:	d107      	bne.n	80016c0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016b8:	4313      	orrs	r3, r2
 80016ba:	697a      	ldr	r2, [r7, #20]
 80016bc:	4313      	orrs	r3, r2
 80016be:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	697a      	ldr	r2, [r7, #20]
 80016c6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	695b      	ldr	r3, [r3, #20]
 80016ce:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80016d0:	697b      	ldr	r3, [r7, #20]
 80016d2:	f023 0307 	bic.w	r3, r3, #7
 80016d6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016dc:	697a      	ldr	r2, [r7, #20]
 80016de:	4313      	orrs	r3, r2
 80016e0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016e6:	2b04      	cmp	r3, #4
 80016e8:	d117      	bne.n	800171a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016ee:	697a      	ldr	r2, [r7, #20]
 80016f0:	4313      	orrs	r3, r2
 80016f2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d00e      	beq.n	800171a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80016fc:	6878      	ldr	r0, [r7, #4]
 80016fe:	f000 fa91 	bl	8001c24 <DMA_CheckFifoParam>
 8001702:	4603      	mov	r3, r0
 8001704:	2b00      	cmp	r3, #0
 8001706:	d008      	beq.n	800171a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	2240      	movs	r2, #64	; 0x40
 800170c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	2201      	movs	r2, #1
 8001712:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001716:	2301      	movs	r3, #1
 8001718:	e016      	b.n	8001748 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	697a      	ldr	r2, [r7, #20]
 8001720:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001722:	6878      	ldr	r0, [r7, #4]
 8001724:	f000 fa48 	bl	8001bb8 <DMA_CalcBaseAndBitshift>
 8001728:	4603      	mov	r3, r0
 800172a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001730:	223f      	movs	r2, #63	; 0x3f
 8001732:	409a      	lsls	r2, r3
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	2200      	movs	r2, #0
 800173c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	2201      	movs	r2, #1
 8001742:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001746:	2300      	movs	r3, #0
}
 8001748:	4618      	mov	r0, r3
 800174a:	3718      	adds	r7, #24
 800174c:	46bd      	mov	sp, r7
 800174e:	bd80      	pop	{r7, pc}
 8001750:	f010803f 	.word	0xf010803f

08001754 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b086      	sub	sp, #24
 8001758:	af00      	add	r7, sp, #0
 800175a:	60f8      	str	r0, [r7, #12]
 800175c:	60b9      	str	r1, [r7, #8]
 800175e:	607a      	str	r2, [r7, #4]
 8001760:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001762:	2300      	movs	r3, #0
 8001764:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800176a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001772:	2b01      	cmp	r3, #1
 8001774:	d101      	bne.n	800177a <HAL_DMA_Start_IT+0x26>
 8001776:	2302      	movs	r3, #2
 8001778:	e040      	b.n	80017fc <HAL_DMA_Start_IT+0xa8>
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	2201      	movs	r2, #1
 800177e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001788:	b2db      	uxtb	r3, r3
 800178a:	2b01      	cmp	r3, #1
 800178c:	d12f      	bne.n	80017ee <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	2202      	movs	r2, #2
 8001792:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	2200      	movs	r2, #0
 800179a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800179c:	683b      	ldr	r3, [r7, #0]
 800179e:	687a      	ldr	r2, [r7, #4]
 80017a0:	68b9      	ldr	r1, [r7, #8]
 80017a2:	68f8      	ldr	r0, [r7, #12]
 80017a4:	f000 f9da 	bl	8001b5c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017ac:	223f      	movs	r2, #63	; 0x3f
 80017ae:	409a      	lsls	r2, r3
 80017b0:	693b      	ldr	r3, [r7, #16]
 80017b2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	681a      	ldr	r2, [r3, #0]
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	f042 0216 	orr.w	r2, r2, #22
 80017c2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d007      	beq.n	80017dc <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	681a      	ldr	r2, [r3, #0]
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f042 0208 	orr.w	r2, r2, #8
 80017da:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	681a      	ldr	r2, [r3, #0]
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	f042 0201 	orr.w	r2, r2, #1
 80017ea:	601a      	str	r2, [r3, #0]
 80017ec:	e005      	b.n	80017fa <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	2200      	movs	r2, #0
 80017f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80017f6:	2302      	movs	r3, #2
 80017f8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80017fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80017fc:	4618      	mov	r0, r3
 80017fe:	3718      	adds	r7, #24
 8001800:	46bd      	mov	sp, r7
 8001802:	bd80      	pop	{r7, pc}

08001804 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001804:	b480      	push	{r7}
 8001806:	b083      	sub	sp, #12
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001812:	b2db      	uxtb	r3, r3
 8001814:	2b02      	cmp	r3, #2
 8001816:	d004      	beq.n	8001822 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	2280      	movs	r2, #128	; 0x80
 800181c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800181e:	2301      	movs	r3, #1
 8001820:	e00c      	b.n	800183c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	2205      	movs	r2, #5
 8001826:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	681a      	ldr	r2, [r3, #0]
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	f022 0201 	bic.w	r2, r2, #1
 8001838:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800183a:	2300      	movs	r3, #0
}
 800183c:	4618      	mov	r0, r3
 800183e:	370c      	adds	r7, #12
 8001840:	46bd      	mov	sp, r7
 8001842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001846:	4770      	bx	lr

08001848 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b086      	sub	sp, #24
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001850:	2300      	movs	r3, #0
 8001852:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001854:	4b92      	ldr	r3, [pc, #584]	; (8001aa0 <HAL_DMA_IRQHandler+0x258>)
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	4a92      	ldr	r2, [pc, #584]	; (8001aa4 <HAL_DMA_IRQHandler+0x25c>)
 800185a:	fba2 2303 	umull	r2, r3, r2, r3
 800185e:	0a9b      	lsrs	r3, r3, #10
 8001860:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001866:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001868:	693b      	ldr	r3, [r7, #16]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001872:	2208      	movs	r2, #8
 8001874:	409a      	lsls	r2, r3
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	4013      	ands	r3, r2
 800187a:	2b00      	cmp	r3, #0
 800187c:	d01a      	beq.n	80018b4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	f003 0304 	and.w	r3, r3, #4
 8001888:	2b00      	cmp	r3, #0
 800188a:	d013      	beq.n	80018b4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	681a      	ldr	r2, [r3, #0]
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f022 0204 	bic.w	r2, r2, #4
 800189a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018a0:	2208      	movs	r2, #8
 80018a2:	409a      	lsls	r2, r3
 80018a4:	693b      	ldr	r3, [r7, #16]
 80018a6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018ac:	f043 0201 	orr.w	r2, r3, #1
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018b8:	2201      	movs	r2, #1
 80018ba:	409a      	lsls	r2, r3
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	4013      	ands	r3, r2
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d012      	beq.n	80018ea <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	695b      	ldr	r3, [r3, #20]
 80018ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d00b      	beq.n	80018ea <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018d6:	2201      	movs	r2, #1
 80018d8:	409a      	lsls	r2, r3
 80018da:	693b      	ldr	r3, [r7, #16]
 80018dc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018e2:	f043 0202 	orr.w	r2, r3, #2
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018ee:	2204      	movs	r2, #4
 80018f0:	409a      	lsls	r2, r3
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	4013      	ands	r3, r2
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d012      	beq.n	8001920 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	f003 0302 	and.w	r3, r3, #2
 8001904:	2b00      	cmp	r3, #0
 8001906:	d00b      	beq.n	8001920 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800190c:	2204      	movs	r2, #4
 800190e:	409a      	lsls	r2, r3
 8001910:	693b      	ldr	r3, [r7, #16]
 8001912:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001918:	f043 0204 	orr.w	r2, r3, #4
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001924:	2210      	movs	r2, #16
 8001926:	409a      	lsls	r2, r3
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	4013      	ands	r3, r2
 800192c:	2b00      	cmp	r3, #0
 800192e:	d043      	beq.n	80019b8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	f003 0308 	and.w	r3, r3, #8
 800193a:	2b00      	cmp	r3, #0
 800193c:	d03c      	beq.n	80019b8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001942:	2210      	movs	r2, #16
 8001944:	409a      	lsls	r2, r3
 8001946:	693b      	ldr	r3, [r7, #16]
 8001948:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001954:	2b00      	cmp	r3, #0
 8001956:	d018      	beq.n	800198a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001962:	2b00      	cmp	r3, #0
 8001964:	d108      	bne.n	8001978 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800196a:	2b00      	cmp	r3, #0
 800196c:	d024      	beq.n	80019b8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001972:	6878      	ldr	r0, [r7, #4]
 8001974:	4798      	blx	r3
 8001976:	e01f      	b.n	80019b8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800197c:	2b00      	cmp	r3, #0
 800197e:	d01b      	beq.n	80019b8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001984:	6878      	ldr	r0, [r7, #4]
 8001986:	4798      	blx	r3
 8001988:	e016      	b.n	80019b8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001994:	2b00      	cmp	r3, #0
 8001996:	d107      	bne.n	80019a8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	681a      	ldr	r2, [r3, #0]
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f022 0208 	bic.w	r2, r2, #8
 80019a6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d003      	beq.n	80019b8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019b4:	6878      	ldr	r0, [r7, #4]
 80019b6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019bc:	2220      	movs	r2, #32
 80019be:	409a      	lsls	r2, r3
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	4013      	ands	r3, r2
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	f000 808e 	beq.w	8001ae6 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	f003 0310 	and.w	r3, r3, #16
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	f000 8086 	beq.w	8001ae6 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019de:	2220      	movs	r2, #32
 80019e0:	409a      	lsls	r2, r3
 80019e2:	693b      	ldr	r3, [r7, #16]
 80019e4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80019ec:	b2db      	uxtb	r3, r3
 80019ee:	2b05      	cmp	r3, #5
 80019f0:	d136      	bne.n	8001a60 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	681a      	ldr	r2, [r3, #0]
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	f022 0216 	bic.w	r2, r2, #22
 8001a00:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	695a      	ldr	r2, [r3, #20]
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001a10:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d103      	bne.n	8001a22 <HAL_DMA_IRQHandler+0x1da>
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d007      	beq.n	8001a32 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	681a      	ldr	r2, [r3, #0]
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	f022 0208 	bic.w	r2, r2, #8
 8001a30:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a36:	223f      	movs	r2, #63	; 0x3f
 8001a38:	409a      	lsls	r2, r3
 8001a3a:	693b      	ldr	r3, [r7, #16]
 8001a3c:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	2200      	movs	r2, #0
 8001a42:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	2201      	movs	r2, #1
 8001a4a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d07d      	beq.n	8001b52 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001a5a:	6878      	ldr	r0, [r7, #4]
 8001a5c:	4798      	blx	r3
        }
        return;
 8001a5e:	e078      	b.n	8001b52 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d01c      	beq.n	8001aa8 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d108      	bne.n	8001a8e <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d030      	beq.n	8001ae6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a88:	6878      	ldr	r0, [r7, #4]
 8001a8a:	4798      	blx	r3
 8001a8c:	e02b      	b.n	8001ae6 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d027      	beq.n	8001ae6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a9a:	6878      	ldr	r0, [r7, #4]
 8001a9c:	4798      	blx	r3
 8001a9e:	e022      	b.n	8001ae6 <HAL_DMA_IRQHandler+0x29e>
 8001aa0:	20000000 	.word	0x20000000
 8001aa4:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d10f      	bne.n	8001ad6 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	681a      	ldr	r2, [r3, #0]
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f022 0210 	bic.w	r2, r2, #16
 8001ac4:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	2200      	movs	r2, #0
 8001aca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	2201      	movs	r2, #1
 8001ad2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d003      	beq.n	8001ae6 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ae2:	6878      	ldr	r0, [r7, #4]
 8001ae4:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d032      	beq.n	8001b54 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001af2:	f003 0301 	and.w	r3, r3, #1
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d022      	beq.n	8001b40 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	2205      	movs	r2, #5
 8001afe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	681a      	ldr	r2, [r3, #0]
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	f022 0201 	bic.w	r2, r2, #1
 8001b10:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001b12:	68bb      	ldr	r3, [r7, #8]
 8001b14:	3301      	adds	r3, #1
 8001b16:	60bb      	str	r3, [r7, #8]
 8001b18:	697a      	ldr	r2, [r7, #20]
 8001b1a:	429a      	cmp	r2, r3
 8001b1c:	d307      	bcc.n	8001b2e <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	f003 0301 	and.w	r3, r3, #1
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d1f2      	bne.n	8001b12 <HAL_DMA_IRQHandler+0x2ca>
 8001b2c:	e000      	b.n	8001b30 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8001b2e:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	2200      	movs	r2, #0
 8001b34:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	2201      	movs	r2, #1
 8001b3c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d005      	beq.n	8001b54 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b4c:	6878      	ldr	r0, [r7, #4]
 8001b4e:	4798      	blx	r3
 8001b50:	e000      	b.n	8001b54 <HAL_DMA_IRQHandler+0x30c>
        return;
 8001b52:	bf00      	nop
    }
  }
}
 8001b54:	3718      	adds	r7, #24
 8001b56:	46bd      	mov	sp, r7
 8001b58:	bd80      	pop	{r7, pc}
 8001b5a:	bf00      	nop

08001b5c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001b5c:	b480      	push	{r7}
 8001b5e:	b085      	sub	sp, #20
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	60f8      	str	r0, [r7, #12]
 8001b64:	60b9      	str	r1, [r7, #8]
 8001b66:	607a      	str	r2, [r7, #4]
 8001b68:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	681a      	ldr	r2, [r3, #0]
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001b78:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	683a      	ldr	r2, [r7, #0]
 8001b80:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	689b      	ldr	r3, [r3, #8]
 8001b86:	2b40      	cmp	r3, #64	; 0x40
 8001b88:	d108      	bne.n	8001b9c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	687a      	ldr	r2, [r7, #4]
 8001b90:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	68ba      	ldr	r2, [r7, #8]
 8001b98:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001b9a:	e007      	b.n	8001bac <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	68ba      	ldr	r2, [r7, #8]
 8001ba2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	687a      	ldr	r2, [r7, #4]
 8001baa:	60da      	str	r2, [r3, #12]
}
 8001bac:	bf00      	nop
 8001bae:	3714      	adds	r7, #20
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb6:	4770      	bx	lr

08001bb8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001bb8:	b480      	push	{r7}
 8001bba:	b085      	sub	sp, #20
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	b2db      	uxtb	r3, r3
 8001bc6:	3b10      	subs	r3, #16
 8001bc8:	4a14      	ldr	r2, [pc, #80]	; (8001c1c <DMA_CalcBaseAndBitshift+0x64>)
 8001bca:	fba2 2303 	umull	r2, r3, r2, r3
 8001bce:	091b      	lsrs	r3, r3, #4
 8001bd0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001bd2:	4a13      	ldr	r2, [pc, #76]	; (8001c20 <DMA_CalcBaseAndBitshift+0x68>)
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	4413      	add	r3, r2
 8001bd8:	781b      	ldrb	r3, [r3, #0]
 8001bda:	461a      	mov	r2, r3
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	2b03      	cmp	r3, #3
 8001be4:	d909      	bls.n	8001bfa <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001bee:	f023 0303 	bic.w	r3, r3, #3
 8001bf2:	1d1a      	adds	r2, r3, #4
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	659a      	str	r2, [r3, #88]	; 0x58
 8001bf8:	e007      	b.n	8001c0a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001c02:	f023 0303 	bic.w	r3, r3, #3
 8001c06:	687a      	ldr	r2, [r7, #4]
 8001c08:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001c0e:	4618      	mov	r0, r3
 8001c10:	3714      	adds	r7, #20
 8001c12:	46bd      	mov	sp, r7
 8001c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c18:	4770      	bx	lr
 8001c1a:	bf00      	nop
 8001c1c:	aaaaaaab 	.word	0xaaaaaaab
 8001c20:	08005630 	.word	0x08005630

08001c24 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001c24:	b480      	push	{r7}
 8001c26:	b085      	sub	sp, #20
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c34:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	699b      	ldr	r3, [r3, #24]
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d11f      	bne.n	8001c7e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001c3e:	68bb      	ldr	r3, [r7, #8]
 8001c40:	2b03      	cmp	r3, #3
 8001c42:	d855      	bhi.n	8001cf0 <DMA_CheckFifoParam+0xcc>
 8001c44:	a201      	add	r2, pc, #4	; (adr r2, 8001c4c <DMA_CheckFifoParam+0x28>)
 8001c46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c4a:	bf00      	nop
 8001c4c:	08001c5d 	.word	0x08001c5d
 8001c50:	08001c6f 	.word	0x08001c6f
 8001c54:	08001c5d 	.word	0x08001c5d
 8001c58:	08001cf1 	.word	0x08001cf1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c60:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d045      	beq.n	8001cf4 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8001c68:	2301      	movs	r3, #1
 8001c6a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001c6c:	e042      	b.n	8001cf4 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c72:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001c76:	d13f      	bne.n	8001cf8 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8001c78:	2301      	movs	r3, #1
 8001c7a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001c7c:	e03c      	b.n	8001cf8 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	699b      	ldr	r3, [r3, #24]
 8001c82:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001c86:	d121      	bne.n	8001ccc <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001c88:	68bb      	ldr	r3, [r7, #8]
 8001c8a:	2b03      	cmp	r3, #3
 8001c8c:	d836      	bhi.n	8001cfc <DMA_CheckFifoParam+0xd8>
 8001c8e:	a201      	add	r2, pc, #4	; (adr r2, 8001c94 <DMA_CheckFifoParam+0x70>)
 8001c90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c94:	08001ca5 	.word	0x08001ca5
 8001c98:	08001cab 	.word	0x08001cab
 8001c9c:	08001ca5 	.word	0x08001ca5
 8001ca0:	08001cbd 	.word	0x08001cbd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001ca4:	2301      	movs	r3, #1
 8001ca6:	73fb      	strb	r3, [r7, #15]
      break;
 8001ca8:	e02f      	b.n	8001d0a <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cae:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d024      	beq.n	8001d00 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8001cb6:	2301      	movs	r3, #1
 8001cb8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001cba:	e021      	b.n	8001d00 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cc0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001cc4:	d11e      	bne.n	8001d04 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8001cc6:	2301      	movs	r3, #1
 8001cc8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001cca:	e01b      	b.n	8001d04 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001ccc:	68bb      	ldr	r3, [r7, #8]
 8001cce:	2b02      	cmp	r3, #2
 8001cd0:	d902      	bls.n	8001cd8 <DMA_CheckFifoParam+0xb4>
 8001cd2:	2b03      	cmp	r3, #3
 8001cd4:	d003      	beq.n	8001cde <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001cd6:	e018      	b.n	8001d0a <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8001cd8:	2301      	movs	r3, #1
 8001cda:	73fb      	strb	r3, [r7, #15]
      break;
 8001cdc:	e015      	b.n	8001d0a <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ce2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d00e      	beq.n	8001d08 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8001cea:	2301      	movs	r3, #1
 8001cec:	73fb      	strb	r3, [r7, #15]
      break;
 8001cee:	e00b      	b.n	8001d08 <DMA_CheckFifoParam+0xe4>
      break;
 8001cf0:	bf00      	nop
 8001cf2:	e00a      	b.n	8001d0a <DMA_CheckFifoParam+0xe6>
      break;
 8001cf4:	bf00      	nop
 8001cf6:	e008      	b.n	8001d0a <DMA_CheckFifoParam+0xe6>
      break;
 8001cf8:	bf00      	nop
 8001cfa:	e006      	b.n	8001d0a <DMA_CheckFifoParam+0xe6>
      break;
 8001cfc:	bf00      	nop
 8001cfe:	e004      	b.n	8001d0a <DMA_CheckFifoParam+0xe6>
      break;
 8001d00:	bf00      	nop
 8001d02:	e002      	b.n	8001d0a <DMA_CheckFifoParam+0xe6>
      break;   
 8001d04:	bf00      	nop
 8001d06:	e000      	b.n	8001d0a <DMA_CheckFifoParam+0xe6>
      break;
 8001d08:	bf00      	nop
    }
  } 
  
  return status; 
 8001d0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	3714      	adds	r7, #20
 8001d10:	46bd      	mov	sp, r7
 8001d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d16:	4770      	bx	lr

08001d18 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d18:	b480      	push	{r7}
 8001d1a:	b089      	sub	sp, #36	; 0x24
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
 8001d20:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001d22:	2300      	movs	r3, #0
 8001d24:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001d26:	2300      	movs	r3, #0
 8001d28:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d2e:	2300      	movs	r3, #0
 8001d30:	61fb      	str	r3, [r7, #28]
 8001d32:	e159      	b.n	8001fe8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001d34:	2201      	movs	r2, #1
 8001d36:	69fb      	ldr	r3, [r7, #28]
 8001d38:	fa02 f303 	lsl.w	r3, r2, r3
 8001d3c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001d3e:	683b      	ldr	r3, [r7, #0]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	697a      	ldr	r2, [r7, #20]
 8001d44:	4013      	ands	r3, r2
 8001d46:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001d48:	693a      	ldr	r2, [r7, #16]
 8001d4a:	697b      	ldr	r3, [r7, #20]
 8001d4c:	429a      	cmp	r2, r3
 8001d4e:	f040 8148 	bne.w	8001fe2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001d52:	683b      	ldr	r3, [r7, #0]
 8001d54:	685b      	ldr	r3, [r3, #4]
 8001d56:	2b01      	cmp	r3, #1
 8001d58:	d00b      	beq.n	8001d72 <HAL_GPIO_Init+0x5a>
 8001d5a:	683b      	ldr	r3, [r7, #0]
 8001d5c:	685b      	ldr	r3, [r3, #4]
 8001d5e:	2b02      	cmp	r3, #2
 8001d60:	d007      	beq.n	8001d72 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001d62:	683b      	ldr	r3, [r7, #0]
 8001d64:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001d66:	2b11      	cmp	r3, #17
 8001d68:	d003      	beq.n	8001d72 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001d6a:	683b      	ldr	r3, [r7, #0]
 8001d6c:	685b      	ldr	r3, [r3, #4]
 8001d6e:	2b12      	cmp	r3, #18
 8001d70:	d130      	bne.n	8001dd4 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	689b      	ldr	r3, [r3, #8]
 8001d76:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001d78:	69fb      	ldr	r3, [r7, #28]
 8001d7a:	005b      	lsls	r3, r3, #1
 8001d7c:	2203      	movs	r2, #3
 8001d7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d82:	43db      	mvns	r3, r3
 8001d84:	69ba      	ldr	r2, [r7, #24]
 8001d86:	4013      	ands	r3, r2
 8001d88:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001d8a:	683b      	ldr	r3, [r7, #0]
 8001d8c:	68da      	ldr	r2, [r3, #12]
 8001d8e:	69fb      	ldr	r3, [r7, #28]
 8001d90:	005b      	lsls	r3, r3, #1
 8001d92:	fa02 f303 	lsl.w	r3, r2, r3
 8001d96:	69ba      	ldr	r2, [r7, #24]
 8001d98:	4313      	orrs	r3, r2
 8001d9a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	69ba      	ldr	r2, [r7, #24]
 8001da0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	685b      	ldr	r3, [r3, #4]
 8001da6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001da8:	2201      	movs	r2, #1
 8001daa:	69fb      	ldr	r3, [r7, #28]
 8001dac:	fa02 f303 	lsl.w	r3, r2, r3
 8001db0:	43db      	mvns	r3, r3
 8001db2:	69ba      	ldr	r2, [r7, #24]
 8001db4:	4013      	ands	r3, r2
 8001db6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001db8:	683b      	ldr	r3, [r7, #0]
 8001dba:	685b      	ldr	r3, [r3, #4]
 8001dbc:	091b      	lsrs	r3, r3, #4
 8001dbe:	f003 0201 	and.w	r2, r3, #1
 8001dc2:	69fb      	ldr	r3, [r7, #28]
 8001dc4:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc8:	69ba      	ldr	r2, [r7, #24]
 8001dca:	4313      	orrs	r3, r2
 8001dcc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	69ba      	ldr	r2, [r7, #24]
 8001dd2:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	68db      	ldr	r3, [r3, #12]
 8001dd8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001dda:	69fb      	ldr	r3, [r7, #28]
 8001ddc:	005b      	lsls	r3, r3, #1
 8001dde:	2203      	movs	r2, #3
 8001de0:	fa02 f303 	lsl.w	r3, r2, r3
 8001de4:	43db      	mvns	r3, r3
 8001de6:	69ba      	ldr	r2, [r7, #24]
 8001de8:	4013      	ands	r3, r2
 8001dea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001dec:	683b      	ldr	r3, [r7, #0]
 8001dee:	689a      	ldr	r2, [r3, #8]
 8001df0:	69fb      	ldr	r3, [r7, #28]
 8001df2:	005b      	lsls	r3, r3, #1
 8001df4:	fa02 f303 	lsl.w	r3, r2, r3
 8001df8:	69ba      	ldr	r2, [r7, #24]
 8001dfa:	4313      	orrs	r3, r2
 8001dfc:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	69ba      	ldr	r2, [r7, #24]
 8001e02:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001e04:	683b      	ldr	r3, [r7, #0]
 8001e06:	685b      	ldr	r3, [r3, #4]
 8001e08:	2b02      	cmp	r3, #2
 8001e0a:	d003      	beq.n	8001e14 <HAL_GPIO_Init+0xfc>
 8001e0c:	683b      	ldr	r3, [r7, #0]
 8001e0e:	685b      	ldr	r3, [r3, #4]
 8001e10:	2b12      	cmp	r3, #18
 8001e12:	d123      	bne.n	8001e5c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001e14:	69fb      	ldr	r3, [r7, #28]
 8001e16:	08da      	lsrs	r2, r3, #3
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	3208      	adds	r2, #8
 8001e1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e20:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001e22:	69fb      	ldr	r3, [r7, #28]
 8001e24:	f003 0307 	and.w	r3, r3, #7
 8001e28:	009b      	lsls	r3, r3, #2
 8001e2a:	220f      	movs	r2, #15
 8001e2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e30:	43db      	mvns	r3, r3
 8001e32:	69ba      	ldr	r2, [r7, #24]
 8001e34:	4013      	ands	r3, r2
 8001e36:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001e38:	683b      	ldr	r3, [r7, #0]
 8001e3a:	691a      	ldr	r2, [r3, #16]
 8001e3c:	69fb      	ldr	r3, [r7, #28]
 8001e3e:	f003 0307 	and.w	r3, r3, #7
 8001e42:	009b      	lsls	r3, r3, #2
 8001e44:	fa02 f303 	lsl.w	r3, r2, r3
 8001e48:	69ba      	ldr	r2, [r7, #24]
 8001e4a:	4313      	orrs	r3, r2
 8001e4c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001e4e:	69fb      	ldr	r3, [r7, #28]
 8001e50:	08da      	lsrs	r2, r3, #3
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	3208      	adds	r2, #8
 8001e56:	69b9      	ldr	r1, [r7, #24]
 8001e58:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001e62:	69fb      	ldr	r3, [r7, #28]
 8001e64:	005b      	lsls	r3, r3, #1
 8001e66:	2203      	movs	r2, #3
 8001e68:	fa02 f303 	lsl.w	r3, r2, r3
 8001e6c:	43db      	mvns	r3, r3
 8001e6e:	69ba      	ldr	r2, [r7, #24]
 8001e70:	4013      	ands	r3, r2
 8001e72:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001e74:	683b      	ldr	r3, [r7, #0]
 8001e76:	685b      	ldr	r3, [r3, #4]
 8001e78:	f003 0203 	and.w	r2, r3, #3
 8001e7c:	69fb      	ldr	r3, [r7, #28]
 8001e7e:	005b      	lsls	r3, r3, #1
 8001e80:	fa02 f303 	lsl.w	r3, r2, r3
 8001e84:	69ba      	ldr	r2, [r7, #24]
 8001e86:	4313      	orrs	r3, r2
 8001e88:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	69ba      	ldr	r2, [r7, #24]
 8001e8e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001e90:	683b      	ldr	r3, [r7, #0]
 8001e92:	685b      	ldr	r3, [r3, #4]
 8001e94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	f000 80a2 	beq.w	8001fe2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	60fb      	str	r3, [r7, #12]
 8001ea2:	4b56      	ldr	r3, [pc, #344]	; (8001ffc <HAL_GPIO_Init+0x2e4>)
 8001ea4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ea6:	4a55      	ldr	r2, [pc, #340]	; (8001ffc <HAL_GPIO_Init+0x2e4>)
 8001ea8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001eac:	6453      	str	r3, [r2, #68]	; 0x44
 8001eae:	4b53      	ldr	r3, [pc, #332]	; (8001ffc <HAL_GPIO_Init+0x2e4>)
 8001eb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eb2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001eb6:	60fb      	str	r3, [r7, #12]
 8001eb8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001eba:	4a51      	ldr	r2, [pc, #324]	; (8002000 <HAL_GPIO_Init+0x2e8>)
 8001ebc:	69fb      	ldr	r3, [r7, #28]
 8001ebe:	089b      	lsrs	r3, r3, #2
 8001ec0:	3302      	adds	r3, #2
 8001ec2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ec6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001ec8:	69fb      	ldr	r3, [r7, #28]
 8001eca:	f003 0303 	and.w	r3, r3, #3
 8001ece:	009b      	lsls	r3, r3, #2
 8001ed0:	220f      	movs	r2, #15
 8001ed2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed6:	43db      	mvns	r3, r3
 8001ed8:	69ba      	ldr	r2, [r7, #24]
 8001eda:	4013      	ands	r3, r2
 8001edc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	4a48      	ldr	r2, [pc, #288]	; (8002004 <HAL_GPIO_Init+0x2ec>)
 8001ee2:	4293      	cmp	r3, r2
 8001ee4:	d019      	beq.n	8001f1a <HAL_GPIO_Init+0x202>
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	4a47      	ldr	r2, [pc, #284]	; (8002008 <HAL_GPIO_Init+0x2f0>)
 8001eea:	4293      	cmp	r3, r2
 8001eec:	d013      	beq.n	8001f16 <HAL_GPIO_Init+0x1fe>
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	4a46      	ldr	r2, [pc, #280]	; (800200c <HAL_GPIO_Init+0x2f4>)
 8001ef2:	4293      	cmp	r3, r2
 8001ef4:	d00d      	beq.n	8001f12 <HAL_GPIO_Init+0x1fa>
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	4a45      	ldr	r2, [pc, #276]	; (8002010 <HAL_GPIO_Init+0x2f8>)
 8001efa:	4293      	cmp	r3, r2
 8001efc:	d007      	beq.n	8001f0e <HAL_GPIO_Init+0x1f6>
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	4a44      	ldr	r2, [pc, #272]	; (8002014 <HAL_GPIO_Init+0x2fc>)
 8001f02:	4293      	cmp	r3, r2
 8001f04:	d101      	bne.n	8001f0a <HAL_GPIO_Init+0x1f2>
 8001f06:	2304      	movs	r3, #4
 8001f08:	e008      	b.n	8001f1c <HAL_GPIO_Init+0x204>
 8001f0a:	2307      	movs	r3, #7
 8001f0c:	e006      	b.n	8001f1c <HAL_GPIO_Init+0x204>
 8001f0e:	2303      	movs	r3, #3
 8001f10:	e004      	b.n	8001f1c <HAL_GPIO_Init+0x204>
 8001f12:	2302      	movs	r3, #2
 8001f14:	e002      	b.n	8001f1c <HAL_GPIO_Init+0x204>
 8001f16:	2301      	movs	r3, #1
 8001f18:	e000      	b.n	8001f1c <HAL_GPIO_Init+0x204>
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	69fa      	ldr	r2, [r7, #28]
 8001f1e:	f002 0203 	and.w	r2, r2, #3
 8001f22:	0092      	lsls	r2, r2, #2
 8001f24:	4093      	lsls	r3, r2
 8001f26:	69ba      	ldr	r2, [r7, #24]
 8001f28:	4313      	orrs	r3, r2
 8001f2a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001f2c:	4934      	ldr	r1, [pc, #208]	; (8002000 <HAL_GPIO_Init+0x2e8>)
 8001f2e:	69fb      	ldr	r3, [r7, #28]
 8001f30:	089b      	lsrs	r3, r3, #2
 8001f32:	3302      	adds	r3, #2
 8001f34:	69ba      	ldr	r2, [r7, #24]
 8001f36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001f3a:	4b37      	ldr	r3, [pc, #220]	; (8002018 <HAL_GPIO_Init+0x300>)
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f40:	693b      	ldr	r3, [r7, #16]
 8001f42:	43db      	mvns	r3, r3
 8001f44:	69ba      	ldr	r2, [r7, #24]
 8001f46:	4013      	ands	r3, r2
 8001f48:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001f4a:	683b      	ldr	r3, [r7, #0]
 8001f4c:	685b      	ldr	r3, [r3, #4]
 8001f4e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d003      	beq.n	8001f5e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001f56:	69ba      	ldr	r2, [r7, #24]
 8001f58:	693b      	ldr	r3, [r7, #16]
 8001f5a:	4313      	orrs	r3, r2
 8001f5c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001f5e:	4a2e      	ldr	r2, [pc, #184]	; (8002018 <HAL_GPIO_Init+0x300>)
 8001f60:	69bb      	ldr	r3, [r7, #24]
 8001f62:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001f64:	4b2c      	ldr	r3, [pc, #176]	; (8002018 <HAL_GPIO_Init+0x300>)
 8001f66:	685b      	ldr	r3, [r3, #4]
 8001f68:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f6a:	693b      	ldr	r3, [r7, #16]
 8001f6c:	43db      	mvns	r3, r3
 8001f6e:	69ba      	ldr	r2, [r7, #24]
 8001f70:	4013      	ands	r3, r2
 8001f72:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	685b      	ldr	r3, [r3, #4]
 8001f78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d003      	beq.n	8001f88 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001f80:	69ba      	ldr	r2, [r7, #24]
 8001f82:	693b      	ldr	r3, [r7, #16]
 8001f84:	4313      	orrs	r3, r2
 8001f86:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001f88:	4a23      	ldr	r2, [pc, #140]	; (8002018 <HAL_GPIO_Init+0x300>)
 8001f8a:	69bb      	ldr	r3, [r7, #24]
 8001f8c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001f8e:	4b22      	ldr	r3, [pc, #136]	; (8002018 <HAL_GPIO_Init+0x300>)
 8001f90:	689b      	ldr	r3, [r3, #8]
 8001f92:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f94:	693b      	ldr	r3, [r7, #16]
 8001f96:	43db      	mvns	r3, r3
 8001f98:	69ba      	ldr	r2, [r7, #24]
 8001f9a:	4013      	ands	r3, r2
 8001f9c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001f9e:	683b      	ldr	r3, [r7, #0]
 8001fa0:	685b      	ldr	r3, [r3, #4]
 8001fa2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d003      	beq.n	8001fb2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001faa:	69ba      	ldr	r2, [r7, #24]
 8001fac:	693b      	ldr	r3, [r7, #16]
 8001fae:	4313      	orrs	r3, r2
 8001fb0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001fb2:	4a19      	ldr	r2, [pc, #100]	; (8002018 <HAL_GPIO_Init+0x300>)
 8001fb4:	69bb      	ldr	r3, [r7, #24]
 8001fb6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001fb8:	4b17      	ldr	r3, [pc, #92]	; (8002018 <HAL_GPIO_Init+0x300>)
 8001fba:	68db      	ldr	r3, [r3, #12]
 8001fbc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fbe:	693b      	ldr	r3, [r7, #16]
 8001fc0:	43db      	mvns	r3, r3
 8001fc2:	69ba      	ldr	r2, [r7, #24]
 8001fc4:	4013      	ands	r3, r2
 8001fc6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001fc8:	683b      	ldr	r3, [r7, #0]
 8001fca:	685b      	ldr	r3, [r3, #4]
 8001fcc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d003      	beq.n	8001fdc <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001fd4:	69ba      	ldr	r2, [r7, #24]
 8001fd6:	693b      	ldr	r3, [r7, #16]
 8001fd8:	4313      	orrs	r3, r2
 8001fda:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001fdc:	4a0e      	ldr	r2, [pc, #56]	; (8002018 <HAL_GPIO_Init+0x300>)
 8001fde:	69bb      	ldr	r3, [r7, #24]
 8001fe0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001fe2:	69fb      	ldr	r3, [r7, #28]
 8001fe4:	3301      	adds	r3, #1
 8001fe6:	61fb      	str	r3, [r7, #28]
 8001fe8:	69fb      	ldr	r3, [r7, #28]
 8001fea:	2b0f      	cmp	r3, #15
 8001fec:	f67f aea2 	bls.w	8001d34 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001ff0:	bf00      	nop
 8001ff2:	3724      	adds	r7, #36	; 0x24
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffa:	4770      	bx	lr
 8001ffc:	40023800 	.word	0x40023800
 8002000:	40013800 	.word	0x40013800
 8002004:	40020000 	.word	0x40020000
 8002008:	40020400 	.word	0x40020400
 800200c:	40020800 	.word	0x40020800
 8002010:	40020c00 	.word	0x40020c00
 8002014:	40021000 	.word	0x40021000
 8002018:	40013c00 	.word	0x40013c00

0800201c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800201c:	b480      	push	{r7}
 800201e:	b083      	sub	sp, #12
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
 8002024:	460b      	mov	r3, r1
 8002026:	807b      	strh	r3, [r7, #2]
 8002028:	4613      	mov	r3, r2
 800202a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800202c:	787b      	ldrb	r3, [r7, #1]
 800202e:	2b00      	cmp	r3, #0
 8002030:	d003      	beq.n	800203a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002032:	887a      	ldrh	r2, [r7, #2]
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002038:	e003      	b.n	8002042 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800203a:	887b      	ldrh	r3, [r7, #2]
 800203c:	041a      	lsls	r2, r3, #16
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	619a      	str	r2, [r3, #24]
}
 8002042:	bf00      	nop
 8002044:	370c      	adds	r7, #12
 8002046:	46bd      	mov	sp, r7
 8002048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204c:	4770      	bx	lr
	...

08002050 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	b082      	sub	sp, #8
 8002054:	af00      	add	r7, sp, #0
 8002056:	4603      	mov	r3, r0
 8002058:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800205a:	4b08      	ldr	r3, [pc, #32]	; (800207c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800205c:	695a      	ldr	r2, [r3, #20]
 800205e:	88fb      	ldrh	r3, [r7, #6]
 8002060:	4013      	ands	r3, r2
 8002062:	2b00      	cmp	r3, #0
 8002064:	d006      	beq.n	8002074 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002066:	4a05      	ldr	r2, [pc, #20]	; (800207c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002068:	88fb      	ldrh	r3, [r7, #6]
 800206a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800206c:	88fb      	ldrh	r3, [r7, #6]
 800206e:	4618      	mov	r0, r3
 8002070:	f7fe fe98 	bl	8000da4 <HAL_GPIO_EXTI_Callback>
  }
}
 8002074:	bf00      	nop
 8002076:	3708      	adds	r7, #8
 8002078:	46bd      	mov	sp, r7
 800207a:	bd80      	pop	{r7, pc}
 800207c:	40013c00 	.word	0x40013c00

08002080 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	b084      	sub	sp, #16
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	2b00      	cmp	r3, #0
 800208c:	d101      	bne.n	8002092 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800208e:	2301      	movs	r3, #1
 8002090:	e11f      	b.n	80022d2 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002098:	b2db      	uxtb	r3, r3
 800209a:	2b00      	cmp	r3, #0
 800209c:	d106      	bne.n	80020ac <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	2200      	movs	r2, #0
 80020a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80020a6:	6878      	ldr	r0, [r7, #4]
 80020a8:	f7fe fc2a 	bl	8000900 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	2224      	movs	r2, #36	; 0x24
 80020b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	681a      	ldr	r2, [r3, #0]
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f022 0201 	bic.w	r2, r2, #1
 80020c2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	681a      	ldr	r2, [r3, #0]
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80020d2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	681a      	ldr	r2, [r3, #0]
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80020e2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80020e4:	f001 f974 	bl	80033d0 <HAL_RCC_GetPCLK1Freq>
 80020e8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	685b      	ldr	r3, [r3, #4]
 80020ee:	4a7b      	ldr	r2, [pc, #492]	; (80022dc <HAL_I2C_Init+0x25c>)
 80020f0:	4293      	cmp	r3, r2
 80020f2:	d807      	bhi.n	8002104 <HAL_I2C_Init+0x84>
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	4a7a      	ldr	r2, [pc, #488]	; (80022e0 <HAL_I2C_Init+0x260>)
 80020f8:	4293      	cmp	r3, r2
 80020fa:	bf94      	ite	ls
 80020fc:	2301      	movls	r3, #1
 80020fe:	2300      	movhi	r3, #0
 8002100:	b2db      	uxtb	r3, r3
 8002102:	e006      	b.n	8002112 <HAL_I2C_Init+0x92>
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	4a77      	ldr	r2, [pc, #476]	; (80022e4 <HAL_I2C_Init+0x264>)
 8002108:	4293      	cmp	r3, r2
 800210a:	bf94      	ite	ls
 800210c:	2301      	movls	r3, #1
 800210e:	2300      	movhi	r3, #0
 8002110:	b2db      	uxtb	r3, r3
 8002112:	2b00      	cmp	r3, #0
 8002114:	d001      	beq.n	800211a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002116:	2301      	movs	r3, #1
 8002118:	e0db      	b.n	80022d2 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	4a72      	ldr	r2, [pc, #456]	; (80022e8 <HAL_I2C_Init+0x268>)
 800211e:	fba2 2303 	umull	r2, r3, r2, r3
 8002122:	0c9b      	lsrs	r3, r3, #18
 8002124:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	685b      	ldr	r3, [r3, #4]
 800212c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	68ba      	ldr	r2, [r7, #8]
 8002136:	430a      	orrs	r2, r1
 8002138:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	6a1b      	ldr	r3, [r3, #32]
 8002140:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	685b      	ldr	r3, [r3, #4]
 8002148:	4a64      	ldr	r2, [pc, #400]	; (80022dc <HAL_I2C_Init+0x25c>)
 800214a:	4293      	cmp	r3, r2
 800214c:	d802      	bhi.n	8002154 <HAL_I2C_Init+0xd4>
 800214e:	68bb      	ldr	r3, [r7, #8]
 8002150:	3301      	adds	r3, #1
 8002152:	e009      	b.n	8002168 <HAL_I2C_Init+0xe8>
 8002154:	68bb      	ldr	r3, [r7, #8]
 8002156:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800215a:	fb02 f303 	mul.w	r3, r2, r3
 800215e:	4a63      	ldr	r2, [pc, #396]	; (80022ec <HAL_I2C_Init+0x26c>)
 8002160:	fba2 2303 	umull	r2, r3, r2, r3
 8002164:	099b      	lsrs	r3, r3, #6
 8002166:	3301      	adds	r3, #1
 8002168:	687a      	ldr	r2, [r7, #4]
 800216a:	6812      	ldr	r2, [r2, #0]
 800216c:	430b      	orrs	r3, r1
 800216e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	69db      	ldr	r3, [r3, #28]
 8002176:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800217a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	685b      	ldr	r3, [r3, #4]
 8002182:	4956      	ldr	r1, [pc, #344]	; (80022dc <HAL_I2C_Init+0x25c>)
 8002184:	428b      	cmp	r3, r1
 8002186:	d80d      	bhi.n	80021a4 <HAL_I2C_Init+0x124>
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	1e59      	subs	r1, r3, #1
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	685b      	ldr	r3, [r3, #4]
 8002190:	005b      	lsls	r3, r3, #1
 8002192:	fbb1 f3f3 	udiv	r3, r1, r3
 8002196:	3301      	adds	r3, #1
 8002198:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800219c:	2b04      	cmp	r3, #4
 800219e:	bf38      	it	cc
 80021a0:	2304      	movcc	r3, #4
 80021a2:	e04f      	b.n	8002244 <HAL_I2C_Init+0x1c4>
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	689b      	ldr	r3, [r3, #8]
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d111      	bne.n	80021d0 <HAL_I2C_Init+0x150>
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	1e58      	subs	r0, r3, #1
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	6859      	ldr	r1, [r3, #4]
 80021b4:	460b      	mov	r3, r1
 80021b6:	005b      	lsls	r3, r3, #1
 80021b8:	440b      	add	r3, r1
 80021ba:	fbb0 f3f3 	udiv	r3, r0, r3
 80021be:	3301      	adds	r3, #1
 80021c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	bf0c      	ite	eq
 80021c8:	2301      	moveq	r3, #1
 80021ca:	2300      	movne	r3, #0
 80021cc:	b2db      	uxtb	r3, r3
 80021ce:	e012      	b.n	80021f6 <HAL_I2C_Init+0x176>
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	1e58      	subs	r0, r3, #1
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	6859      	ldr	r1, [r3, #4]
 80021d8:	460b      	mov	r3, r1
 80021da:	009b      	lsls	r3, r3, #2
 80021dc:	440b      	add	r3, r1
 80021de:	0099      	lsls	r1, r3, #2
 80021e0:	440b      	add	r3, r1
 80021e2:	fbb0 f3f3 	udiv	r3, r0, r3
 80021e6:	3301      	adds	r3, #1
 80021e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	bf0c      	ite	eq
 80021f0:	2301      	moveq	r3, #1
 80021f2:	2300      	movne	r3, #0
 80021f4:	b2db      	uxtb	r3, r3
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d001      	beq.n	80021fe <HAL_I2C_Init+0x17e>
 80021fa:	2301      	movs	r3, #1
 80021fc:	e022      	b.n	8002244 <HAL_I2C_Init+0x1c4>
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	689b      	ldr	r3, [r3, #8]
 8002202:	2b00      	cmp	r3, #0
 8002204:	d10e      	bne.n	8002224 <HAL_I2C_Init+0x1a4>
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	1e58      	subs	r0, r3, #1
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	6859      	ldr	r1, [r3, #4]
 800220e:	460b      	mov	r3, r1
 8002210:	005b      	lsls	r3, r3, #1
 8002212:	440b      	add	r3, r1
 8002214:	fbb0 f3f3 	udiv	r3, r0, r3
 8002218:	3301      	adds	r3, #1
 800221a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800221e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002222:	e00f      	b.n	8002244 <HAL_I2C_Init+0x1c4>
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	1e58      	subs	r0, r3, #1
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	6859      	ldr	r1, [r3, #4]
 800222c:	460b      	mov	r3, r1
 800222e:	009b      	lsls	r3, r3, #2
 8002230:	440b      	add	r3, r1
 8002232:	0099      	lsls	r1, r3, #2
 8002234:	440b      	add	r3, r1
 8002236:	fbb0 f3f3 	udiv	r3, r0, r3
 800223a:	3301      	adds	r3, #1
 800223c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002240:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002244:	6879      	ldr	r1, [r7, #4]
 8002246:	6809      	ldr	r1, [r1, #0]
 8002248:	4313      	orrs	r3, r2
 800224a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	69da      	ldr	r2, [r3, #28]
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	6a1b      	ldr	r3, [r3, #32]
 800225e:	431a      	orrs	r2, r3
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	430a      	orrs	r2, r1
 8002266:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	689b      	ldr	r3, [r3, #8]
 800226e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002272:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002276:	687a      	ldr	r2, [r7, #4]
 8002278:	6911      	ldr	r1, [r2, #16]
 800227a:	687a      	ldr	r2, [r7, #4]
 800227c:	68d2      	ldr	r2, [r2, #12]
 800227e:	4311      	orrs	r1, r2
 8002280:	687a      	ldr	r2, [r7, #4]
 8002282:	6812      	ldr	r2, [r2, #0]
 8002284:	430b      	orrs	r3, r1
 8002286:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	68db      	ldr	r3, [r3, #12]
 800228e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	695a      	ldr	r2, [r3, #20]
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	699b      	ldr	r3, [r3, #24]
 800229a:	431a      	orrs	r2, r3
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	430a      	orrs	r2, r1
 80022a2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	681a      	ldr	r2, [r3, #0]
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f042 0201 	orr.w	r2, r2, #1
 80022b2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	2200      	movs	r2, #0
 80022b8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	2220      	movs	r2, #32
 80022be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	2200      	movs	r2, #0
 80022c6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	2200      	movs	r2, #0
 80022cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80022d0:	2300      	movs	r3, #0
}
 80022d2:	4618      	mov	r0, r3
 80022d4:	3710      	adds	r7, #16
 80022d6:	46bd      	mov	sp, r7
 80022d8:	bd80      	pop	{r7, pc}
 80022da:	bf00      	nop
 80022dc:	000186a0 	.word	0x000186a0
 80022e0:	001e847f 	.word	0x001e847f
 80022e4:	003d08ff 	.word	0x003d08ff
 80022e8:	431bde83 	.word	0x431bde83
 80022ec:	10624dd3 	.word	0x10624dd3

080022f0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b088      	sub	sp, #32
 80022f4:	af02      	add	r7, sp, #8
 80022f6:	60f8      	str	r0, [r7, #12]
 80022f8:	607a      	str	r2, [r7, #4]
 80022fa:	461a      	mov	r2, r3
 80022fc:	460b      	mov	r3, r1
 80022fe:	817b      	strh	r3, [r7, #10]
 8002300:	4613      	mov	r3, r2
 8002302:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002304:	f7ff f838 	bl	8001378 <HAL_GetTick>
 8002308:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002310:	b2db      	uxtb	r3, r3
 8002312:	2b20      	cmp	r3, #32
 8002314:	f040 80e0 	bne.w	80024d8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002318:	697b      	ldr	r3, [r7, #20]
 800231a:	9300      	str	r3, [sp, #0]
 800231c:	2319      	movs	r3, #25
 800231e:	2201      	movs	r2, #1
 8002320:	4970      	ldr	r1, [pc, #448]	; (80024e4 <HAL_I2C_Master_Transmit+0x1f4>)
 8002322:	68f8      	ldr	r0, [r7, #12]
 8002324:	f000 fa92 	bl	800284c <I2C_WaitOnFlagUntilTimeout>
 8002328:	4603      	mov	r3, r0
 800232a:	2b00      	cmp	r3, #0
 800232c:	d001      	beq.n	8002332 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800232e:	2302      	movs	r3, #2
 8002330:	e0d3      	b.n	80024da <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002338:	2b01      	cmp	r3, #1
 800233a:	d101      	bne.n	8002340 <HAL_I2C_Master_Transmit+0x50>
 800233c:	2302      	movs	r3, #2
 800233e:	e0cc      	b.n	80024da <HAL_I2C_Master_Transmit+0x1ea>
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	2201      	movs	r2, #1
 8002344:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f003 0301 	and.w	r3, r3, #1
 8002352:	2b01      	cmp	r3, #1
 8002354:	d007      	beq.n	8002366 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	681a      	ldr	r2, [r3, #0]
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f042 0201 	orr.w	r2, r2, #1
 8002364:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	681a      	ldr	r2, [r3, #0]
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002374:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	2221      	movs	r2, #33	; 0x21
 800237a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	2210      	movs	r2, #16
 8002382:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	2200      	movs	r2, #0
 800238a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	687a      	ldr	r2, [r7, #4]
 8002390:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	893a      	ldrh	r2, [r7, #8]
 8002396:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800239c:	b29a      	uxth	r2, r3
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	4a50      	ldr	r2, [pc, #320]	; (80024e8 <HAL_I2C_Master_Transmit+0x1f8>)
 80023a6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80023a8:	8979      	ldrh	r1, [r7, #10]
 80023aa:	697b      	ldr	r3, [r7, #20]
 80023ac:	6a3a      	ldr	r2, [r7, #32]
 80023ae:	68f8      	ldr	r0, [r7, #12]
 80023b0:	f000 f9ca 	bl	8002748 <I2C_MasterRequestWrite>
 80023b4:	4603      	mov	r3, r0
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d001      	beq.n	80023be <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80023ba:	2301      	movs	r3, #1
 80023bc:	e08d      	b.n	80024da <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80023be:	2300      	movs	r3, #0
 80023c0:	613b      	str	r3, [r7, #16]
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	695b      	ldr	r3, [r3, #20]
 80023c8:	613b      	str	r3, [r7, #16]
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	699b      	ldr	r3, [r3, #24]
 80023d0:	613b      	str	r3, [r7, #16]
 80023d2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80023d4:	e066      	b.n	80024a4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80023d6:	697a      	ldr	r2, [r7, #20]
 80023d8:	6a39      	ldr	r1, [r7, #32]
 80023da:	68f8      	ldr	r0, [r7, #12]
 80023dc:	f000 fb0c 	bl	80029f8 <I2C_WaitOnTXEFlagUntilTimeout>
 80023e0:	4603      	mov	r3, r0
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d00d      	beq.n	8002402 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ea:	2b04      	cmp	r3, #4
 80023ec:	d107      	bne.n	80023fe <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	681a      	ldr	r2, [r3, #0]
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80023fc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80023fe:	2301      	movs	r3, #1
 8002400:	e06b      	b.n	80024da <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002406:	781a      	ldrb	r2, [r3, #0]
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002412:	1c5a      	adds	r2, r3, #1
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800241c:	b29b      	uxth	r3, r3
 800241e:	3b01      	subs	r3, #1
 8002420:	b29a      	uxth	r2, r3
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800242a:	3b01      	subs	r3, #1
 800242c:	b29a      	uxth	r2, r3
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	695b      	ldr	r3, [r3, #20]
 8002438:	f003 0304 	and.w	r3, r3, #4
 800243c:	2b04      	cmp	r3, #4
 800243e:	d11b      	bne.n	8002478 <HAL_I2C_Master_Transmit+0x188>
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002444:	2b00      	cmp	r3, #0
 8002446:	d017      	beq.n	8002478 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800244c:	781a      	ldrb	r2, [r3, #0]
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002458:	1c5a      	adds	r2, r3, #1
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002462:	b29b      	uxth	r3, r3
 8002464:	3b01      	subs	r3, #1
 8002466:	b29a      	uxth	r2, r3
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002470:	3b01      	subs	r3, #1
 8002472:	b29a      	uxth	r2, r3
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002478:	697a      	ldr	r2, [r7, #20]
 800247a:	6a39      	ldr	r1, [r7, #32]
 800247c:	68f8      	ldr	r0, [r7, #12]
 800247e:	f000 fafc 	bl	8002a7a <I2C_WaitOnBTFFlagUntilTimeout>
 8002482:	4603      	mov	r3, r0
 8002484:	2b00      	cmp	r3, #0
 8002486:	d00d      	beq.n	80024a4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800248c:	2b04      	cmp	r3, #4
 800248e:	d107      	bne.n	80024a0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	681a      	ldr	r2, [r3, #0]
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800249e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80024a0:	2301      	movs	r3, #1
 80024a2:	e01a      	b.n	80024da <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d194      	bne.n	80023d6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	681a      	ldr	r2, [r3, #0]
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80024ba:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	2220      	movs	r2, #32
 80024c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	2200      	movs	r2, #0
 80024c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	2200      	movs	r2, #0
 80024d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80024d4:	2300      	movs	r3, #0
 80024d6:	e000      	b.n	80024da <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80024d8:	2302      	movs	r3, #2
  }
}
 80024da:	4618      	mov	r0, r3
 80024dc:	3718      	adds	r7, #24
 80024de:	46bd      	mov	sp, r7
 80024e0:	bd80      	pop	{r7, pc}
 80024e2:	bf00      	nop
 80024e4:	00100002 	.word	0x00100002
 80024e8:	ffff0000 	.word	0xffff0000

080024ec <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b08a      	sub	sp, #40	; 0x28
 80024f0:	af02      	add	r7, sp, #8
 80024f2:	60f8      	str	r0, [r7, #12]
 80024f4:	607a      	str	r2, [r7, #4]
 80024f6:	603b      	str	r3, [r7, #0]
 80024f8:	460b      	mov	r3, r1
 80024fa:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 80024fc:	f7fe ff3c 	bl	8001378 <HAL_GetTick>
 8002500:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 8002502:	2301      	movs	r3, #1
 8002504:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800250c:	b2db      	uxtb	r3, r3
 800250e:	2b20      	cmp	r3, #32
 8002510:	f040 8111 	bne.w	8002736 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002514:	69fb      	ldr	r3, [r7, #28]
 8002516:	9300      	str	r3, [sp, #0]
 8002518:	2319      	movs	r3, #25
 800251a:	2201      	movs	r2, #1
 800251c:	4988      	ldr	r1, [pc, #544]	; (8002740 <HAL_I2C_IsDeviceReady+0x254>)
 800251e:	68f8      	ldr	r0, [r7, #12]
 8002520:	f000 f994 	bl	800284c <I2C_WaitOnFlagUntilTimeout>
 8002524:	4603      	mov	r3, r0
 8002526:	2b00      	cmp	r3, #0
 8002528:	d001      	beq.n	800252e <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 800252a:	2302      	movs	r3, #2
 800252c:	e104      	b.n	8002738 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002534:	2b01      	cmp	r3, #1
 8002536:	d101      	bne.n	800253c <HAL_I2C_IsDeviceReady+0x50>
 8002538:	2302      	movs	r3, #2
 800253a:	e0fd      	b.n	8002738 <HAL_I2C_IsDeviceReady+0x24c>
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	2201      	movs	r2, #1
 8002540:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f003 0301 	and.w	r3, r3, #1
 800254e:	2b01      	cmp	r3, #1
 8002550:	d007      	beq.n	8002562 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	681a      	ldr	r2, [r3, #0]
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f042 0201 	orr.w	r2, r2, #1
 8002560:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	681a      	ldr	r2, [r3, #0]
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002570:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	2224      	movs	r2, #36	; 0x24
 8002576:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	2200      	movs	r2, #0
 800257e:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	4a70      	ldr	r2, [pc, #448]	; (8002744 <HAL_I2C_IsDeviceReady+0x258>)
 8002584:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	681a      	ldr	r2, [r3, #0]
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002594:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8002596:	69fb      	ldr	r3, [r7, #28]
 8002598:	9300      	str	r3, [sp, #0]
 800259a:	683b      	ldr	r3, [r7, #0]
 800259c:	2200      	movs	r2, #0
 800259e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80025a2:	68f8      	ldr	r0, [r7, #12]
 80025a4:	f000 f952 	bl	800284c <I2C_WaitOnFlagUntilTimeout>
 80025a8:	4603      	mov	r3, r0
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d00d      	beq.n	80025ca <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025b8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80025bc:	d103      	bne.n	80025c6 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80025c4:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 80025c6:	2303      	movs	r3, #3
 80025c8:	e0b6      	b.n	8002738 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80025ca:	897b      	ldrh	r3, [r7, #10]
 80025cc:	b2db      	uxtb	r3, r3
 80025ce:	461a      	mov	r2, r3
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80025d8:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 80025da:	f7fe fecd 	bl	8001378 <HAL_GetTick>
 80025de:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	695b      	ldr	r3, [r3, #20]
 80025e6:	f003 0302 	and.w	r3, r3, #2
 80025ea:	2b02      	cmp	r3, #2
 80025ec:	bf0c      	ite	eq
 80025ee:	2301      	moveq	r3, #1
 80025f0:	2300      	movne	r3, #0
 80025f2:	b2db      	uxtb	r3, r3
 80025f4:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	695b      	ldr	r3, [r3, #20]
 80025fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002600:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002604:	bf0c      	ite	eq
 8002606:	2301      	moveq	r3, #1
 8002608:	2300      	movne	r3, #0
 800260a:	b2db      	uxtb	r3, r3
 800260c:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800260e:	e025      	b.n	800265c <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002610:	f7fe feb2 	bl	8001378 <HAL_GetTick>
 8002614:	4602      	mov	r2, r0
 8002616:	69fb      	ldr	r3, [r7, #28]
 8002618:	1ad3      	subs	r3, r2, r3
 800261a:	683a      	ldr	r2, [r7, #0]
 800261c:	429a      	cmp	r2, r3
 800261e:	d302      	bcc.n	8002626 <HAL_I2C_IsDeviceReady+0x13a>
 8002620:	683b      	ldr	r3, [r7, #0]
 8002622:	2b00      	cmp	r3, #0
 8002624:	d103      	bne.n	800262e <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	22a0      	movs	r2, #160	; 0xa0
 800262a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	695b      	ldr	r3, [r3, #20]
 8002634:	f003 0302 	and.w	r3, r3, #2
 8002638:	2b02      	cmp	r3, #2
 800263a:	bf0c      	ite	eq
 800263c:	2301      	moveq	r3, #1
 800263e:	2300      	movne	r3, #0
 8002640:	b2db      	uxtb	r3, r3
 8002642:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	695b      	ldr	r3, [r3, #20]
 800264a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800264e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002652:	bf0c      	ite	eq
 8002654:	2301      	moveq	r3, #1
 8002656:	2300      	movne	r3, #0
 8002658:	b2db      	uxtb	r3, r3
 800265a:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002662:	b2db      	uxtb	r3, r3
 8002664:	2ba0      	cmp	r3, #160	; 0xa0
 8002666:	d005      	beq.n	8002674 <HAL_I2C_IsDeviceReady+0x188>
 8002668:	7dfb      	ldrb	r3, [r7, #23]
 800266a:	2b00      	cmp	r3, #0
 800266c:	d102      	bne.n	8002674 <HAL_I2C_IsDeviceReady+0x188>
 800266e:	7dbb      	ldrb	r3, [r7, #22]
 8002670:	2b00      	cmp	r3, #0
 8002672:	d0cd      	beq.n	8002610 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	2220      	movs	r2, #32
 8002678:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	695b      	ldr	r3, [r3, #20]
 8002682:	f003 0302 	and.w	r3, r3, #2
 8002686:	2b02      	cmp	r3, #2
 8002688:	d129      	bne.n	80026de <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	681a      	ldr	r2, [r3, #0]
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002698:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800269a:	2300      	movs	r3, #0
 800269c:	613b      	str	r3, [r7, #16]
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	695b      	ldr	r3, [r3, #20]
 80026a4:	613b      	str	r3, [r7, #16]
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	699b      	ldr	r3, [r3, #24]
 80026ac:	613b      	str	r3, [r7, #16]
 80026ae:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80026b0:	69fb      	ldr	r3, [r7, #28]
 80026b2:	9300      	str	r3, [sp, #0]
 80026b4:	2319      	movs	r3, #25
 80026b6:	2201      	movs	r2, #1
 80026b8:	4921      	ldr	r1, [pc, #132]	; (8002740 <HAL_I2C_IsDeviceReady+0x254>)
 80026ba:	68f8      	ldr	r0, [r7, #12]
 80026bc:	f000 f8c6 	bl	800284c <I2C_WaitOnFlagUntilTimeout>
 80026c0:	4603      	mov	r3, r0
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d001      	beq.n	80026ca <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 80026c6:	2301      	movs	r3, #1
 80026c8:	e036      	b.n	8002738 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	2220      	movs	r2, #32
 80026ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	2200      	movs	r2, #0
 80026d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 80026da:	2300      	movs	r3, #0
 80026dc:	e02c      	b.n	8002738 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	681a      	ldr	r2, [r3, #0]
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80026ec:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80026f6:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80026f8:	69fb      	ldr	r3, [r7, #28]
 80026fa:	9300      	str	r3, [sp, #0]
 80026fc:	2319      	movs	r3, #25
 80026fe:	2201      	movs	r2, #1
 8002700:	490f      	ldr	r1, [pc, #60]	; (8002740 <HAL_I2C_IsDeviceReady+0x254>)
 8002702:	68f8      	ldr	r0, [r7, #12]
 8002704:	f000 f8a2 	bl	800284c <I2C_WaitOnFlagUntilTimeout>
 8002708:	4603      	mov	r3, r0
 800270a:	2b00      	cmp	r3, #0
 800270c:	d001      	beq.n	8002712 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 800270e:	2301      	movs	r3, #1
 8002710:	e012      	b.n	8002738 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8002712:	69bb      	ldr	r3, [r7, #24]
 8002714:	3301      	adds	r3, #1
 8002716:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8002718:	69ba      	ldr	r2, [r7, #24]
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	429a      	cmp	r2, r3
 800271e:	f4ff af32 	bcc.w	8002586 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	2220      	movs	r2, #32
 8002726:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	2200      	movs	r2, #0
 800272e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002732:	2301      	movs	r3, #1
 8002734:	e000      	b.n	8002738 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8002736:	2302      	movs	r3, #2
  }
}
 8002738:	4618      	mov	r0, r3
 800273a:	3720      	adds	r7, #32
 800273c:	46bd      	mov	sp, r7
 800273e:	bd80      	pop	{r7, pc}
 8002740:	00100002 	.word	0x00100002
 8002744:	ffff0000 	.word	0xffff0000

08002748 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	b088      	sub	sp, #32
 800274c:	af02      	add	r7, sp, #8
 800274e:	60f8      	str	r0, [r7, #12]
 8002750:	607a      	str	r2, [r7, #4]
 8002752:	603b      	str	r3, [r7, #0]
 8002754:	460b      	mov	r3, r1
 8002756:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800275c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800275e:	697b      	ldr	r3, [r7, #20]
 8002760:	2b08      	cmp	r3, #8
 8002762:	d006      	beq.n	8002772 <I2C_MasterRequestWrite+0x2a>
 8002764:	697b      	ldr	r3, [r7, #20]
 8002766:	2b01      	cmp	r3, #1
 8002768:	d003      	beq.n	8002772 <I2C_MasterRequestWrite+0x2a>
 800276a:	697b      	ldr	r3, [r7, #20]
 800276c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002770:	d108      	bne.n	8002784 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	681a      	ldr	r2, [r3, #0]
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002780:	601a      	str	r2, [r3, #0]
 8002782:	e00b      	b.n	800279c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002788:	2b12      	cmp	r3, #18
 800278a:	d107      	bne.n	800279c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	681a      	ldr	r2, [r3, #0]
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800279a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800279c:	683b      	ldr	r3, [r7, #0]
 800279e:	9300      	str	r3, [sp, #0]
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	2200      	movs	r2, #0
 80027a4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80027a8:	68f8      	ldr	r0, [r7, #12]
 80027aa:	f000 f84f 	bl	800284c <I2C_WaitOnFlagUntilTimeout>
 80027ae:	4603      	mov	r3, r0
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d00d      	beq.n	80027d0 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80027c2:	d103      	bne.n	80027cc <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80027ca:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80027cc:	2303      	movs	r3, #3
 80027ce:	e035      	b.n	800283c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	691b      	ldr	r3, [r3, #16]
 80027d4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80027d8:	d108      	bne.n	80027ec <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80027da:	897b      	ldrh	r3, [r7, #10]
 80027dc:	b2db      	uxtb	r3, r3
 80027de:	461a      	mov	r2, r3
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80027e8:	611a      	str	r2, [r3, #16]
 80027ea:	e01b      	b.n	8002824 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80027ec:	897b      	ldrh	r3, [r7, #10]
 80027ee:	11db      	asrs	r3, r3, #7
 80027f0:	b2db      	uxtb	r3, r3
 80027f2:	f003 0306 	and.w	r3, r3, #6
 80027f6:	b2db      	uxtb	r3, r3
 80027f8:	f063 030f 	orn	r3, r3, #15
 80027fc:	b2da      	uxtb	r2, r3
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	687a      	ldr	r2, [r7, #4]
 8002808:	490e      	ldr	r1, [pc, #56]	; (8002844 <I2C_MasterRequestWrite+0xfc>)
 800280a:	68f8      	ldr	r0, [r7, #12]
 800280c:	f000 f875 	bl	80028fa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002810:	4603      	mov	r3, r0
 8002812:	2b00      	cmp	r3, #0
 8002814:	d001      	beq.n	800281a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002816:	2301      	movs	r3, #1
 8002818:	e010      	b.n	800283c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800281a:	897b      	ldrh	r3, [r7, #10]
 800281c:	b2da      	uxtb	r2, r3
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002824:	683b      	ldr	r3, [r7, #0]
 8002826:	687a      	ldr	r2, [r7, #4]
 8002828:	4907      	ldr	r1, [pc, #28]	; (8002848 <I2C_MasterRequestWrite+0x100>)
 800282a:	68f8      	ldr	r0, [r7, #12]
 800282c:	f000 f865 	bl	80028fa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002830:	4603      	mov	r3, r0
 8002832:	2b00      	cmp	r3, #0
 8002834:	d001      	beq.n	800283a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002836:	2301      	movs	r3, #1
 8002838:	e000      	b.n	800283c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800283a:	2300      	movs	r3, #0
}
 800283c:	4618      	mov	r0, r3
 800283e:	3718      	adds	r7, #24
 8002840:	46bd      	mov	sp, r7
 8002842:	bd80      	pop	{r7, pc}
 8002844:	00010008 	.word	0x00010008
 8002848:	00010002 	.word	0x00010002

0800284c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800284c:	b580      	push	{r7, lr}
 800284e:	b084      	sub	sp, #16
 8002850:	af00      	add	r7, sp, #0
 8002852:	60f8      	str	r0, [r7, #12]
 8002854:	60b9      	str	r1, [r7, #8]
 8002856:	603b      	str	r3, [r7, #0]
 8002858:	4613      	mov	r3, r2
 800285a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800285c:	e025      	b.n	80028aa <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800285e:	683b      	ldr	r3, [r7, #0]
 8002860:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002864:	d021      	beq.n	80028aa <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002866:	f7fe fd87 	bl	8001378 <HAL_GetTick>
 800286a:	4602      	mov	r2, r0
 800286c:	69bb      	ldr	r3, [r7, #24]
 800286e:	1ad3      	subs	r3, r2, r3
 8002870:	683a      	ldr	r2, [r7, #0]
 8002872:	429a      	cmp	r2, r3
 8002874:	d302      	bcc.n	800287c <I2C_WaitOnFlagUntilTimeout+0x30>
 8002876:	683b      	ldr	r3, [r7, #0]
 8002878:	2b00      	cmp	r3, #0
 800287a:	d116      	bne.n	80028aa <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	2200      	movs	r2, #0
 8002880:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	2220      	movs	r2, #32
 8002886:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	2200      	movs	r2, #0
 800288e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002896:	f043 0220 	orr.w	r2, r3, #32
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	2200      	movs	r2, #0
 80028a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80028a6:	2301      	movs	r3, #1
 80028a8:	e023      	b.n	80028f2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80028aa:	68bb      	ldr	r3, [r7, #8]
 80028ac:	0c1b      	lsrs	r3, r3, #16
 80028ae:	b2db      	uxtb	r3, r3
 80028b0:	2b01      	cmp	r3, #1
 80028b2:	d10d      	bne.n	80028d0 <I2C_WaitOnFlagUntilTimeout+0x84>
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	695b      	ldr	r3, [r3, #20]
 80028ba:	43da      	mvns	r2, r3
 80028bc:	68bb      	ldr	r3, [r7, #8]
 80028be:	4013      	ands	r3, r2
 80028c0:	b29b      	uxth	r3, r3
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	bf0c      	ite	eq
 80028c6:	2301      	moveq	r3, #1
 80028c8:	2300      	movne	r3, #0
 80028ca:	b2db      	uxtb	r3, r3
 80028cc:	461a      	mov	r2, r3
 80028ce:	e00c      	b.n	80028ea <I2C_WaitOnFlagUntilTimeout+0x9e>
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	699b      	ldr	r3, [r3, #24]
 80028d6:	43da      	mvns	r2, r3
 80028d8:	68bb      	ldr	r3, [r7, #8]
 80028da:	4013      	ands	r3, r2
 80028dc:	b29b      	uxth	r3, r3
 80028de:	2b00      	cmp	r3, #0
 80028e0:	bf0c      	ite	eq
 80028e2:	2301      	moveq	r3, #1
 80028e4:	2300      	movne	r3, #0
 80028e6:	b2db      	uxtb	r3, r3
 80028e8:	461a      	mov	r2, r3
 80028ea:	79fb      	ldrb	r3, [r7, #7]
 80028ec:	429a      	cmp	r2, r3
 80028ee:	d0b6      	beq.n	800285e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80028f0:	2300      	movs	r3, #0
}
 80028f2:	4618      	mov	r0, r3
 80028f4:	3710      	adds	r7, #16
 80028f6:	46bd      	mov	sp, r7
 80028f8:	bd80      	pop	{r7, pc}

080028fa <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80028fa:	b580      	push	{r7, lr}
 80028fc:	b084      	sub	sp, #16
 80028fe:	af00      	add	r7, sp, #0
 8002900:	60f8      	str	r0, [r7, #12]
 8002902:	60b9      	str	r1, [r7, #8]
 8002904:	607a      	str	r2, [r7, #4]
 8002906:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002908:	e051      	b.n	80029ae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	695b      	ldr	r3, [r3, #20]
 8002910:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002914:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002918:	d123      	bne.n	8002962 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	681a      	ldr	r2, [r3, #0]
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002928:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002932:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	2200      	movs	r2, #0
 8002938:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	2220      	movs	r2, #32
 800293e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	2200      	movs	r2, #0
 8002946:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800294e:	f043 0204 	orr.w	r2, r3, #4
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	2200      	movs	r2, #0
 800295a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800295e:	2301      	movs	r3, #1
 8002960:	e046      	b.n	80029f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002968:	d021      	beq.n	80029ae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800296a:	f7fe fd05 	bl	8001378 <HAL_GetTick>
 800296e:	4602      	mov	r2, r0
 8002970:	683b      	ldr	r3, [r7, #0]
 8002972:	1ad3      	subs	r3, r2, r3
 8002974:	687a      	ldr	r2, [r7, #4]
 8002976:	429a      	cmp	r2, r3
 8002978:	d302      	bcc.n	8002980 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	2b00      	cmp	r3, #0
 800297e:	d116      	bne.n	80029ae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	2200      	movs	r2, #0
 8002984:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	2220      	movs	r2, #32
 800298a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	2200      	movs	r2, #0
 8002992:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800299a:	f043 0220 	orr.w	r2, r3, #32
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	2200      	movs	r2, #0
 80029a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80029aa:	2301      	movs	r3, #1
 80029ac:	e020      	b.n	80029f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80029ae:	68bb      	ldr	r3, [r7, #8]
 80029b0:	0c1b      	lsrs	r3, r3, #16
 80029b2:	b2db      	uxtb	r3, r3
 80029b4:	2b01      	cmp	r3, #1
 80029b6:	d10c      	bne.n	80029d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	695b      	ldr	r3, [r3, #20]
 80029be:	43da      	mvns	r2, r3
 80029c0:	68bb      	ldr	r3, [r7, #8]
 80029c2:	4013      	ands	r3, r2
 80029c4:	b29b      	uxth	r3, r3
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	bf14      	ite	ne
 80029ca:	2301      	movne	r3, #1
 80029cc:	2300      	moveq	r3, #0
 80029ce:	b2db      	uxtb	r3, r3
 80029d0:	e00b      	b.n	80029ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	699b      	ldr	r3, [r3, #24]
 80029d8:	43da      	mvns	r2, r3
 80029da:	68bb      	ldr	r3, [r7, #8]
 80029dc:	4013      	ands	r3, r2
 80029de:	b29b      	uxth	r3, r3
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	bf14      	ite	ne
 80029e4:	2301      	movne	r3, #1
 80029e6:	2300      	moveq	r3, #0
 80029e8:	b2db      	uxtb	r3, r3
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d18d      	bne.n	800290a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80029ee:	2300      	movs	r3, #0
}
 80029f0:	4618      	mov	r0, r3
 80029f2:	3710      	adds	r7, #16
 80029f4:	46bd      	mov	sp, r7
 80029f6:	bd80      	pop	{r7, pc}

080029f8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	b084      	sub	sp, #16
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	60f8      	str	r0, [r7, #12]
 8002a00:	60b9      	str	r1, [r7, #8]
 8002a02:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002a04:	e02d      	b.n	8002a62 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002a06:	68f8      	ldr	r0, [r7, #12]
 8002a08:	f000 f878 	bl	8002afc <I2C_IsAcknowledgeFailed>
 8002a0c:	4603      	mov	r3, r0
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d001      	beq.n	8002a16 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002a12:	2301      	movs	r3, #1
 8002a14:	e02d      	b.n	8002a72 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a16:	68bb      	ldr	r3, [r7, #8]
 8002a18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a1c:	d021      	beq.n	8002a62 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a1e:	f7fe fcab 	bl	8001378 <HAL_GetTick>
 8002a22:	4602      	mov	r2, r0
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	1ad3      	subs	r3, r2, r3
 8002a28:	68ba      	ldr	r2, [r7, #8]
 8002a2a:	429a      	cmp	r2, r3
 8002a2c:	d302      	bcc.n	8002a34 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002a2e:	68bb      	ldr	r3, [r7, #8]
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d116      	bne.n	8002a62 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	2200      	movs	r2, #0
 8002a38:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	2220      	movs	r2, #32
 8002a3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	2200      	movs	r2, #0
 8002a46:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a4e:	f043 0220 	orr.w	r2, r3, #32
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	2200      	movs	r2, #0
 8002a5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002a5e:	2301      	movs	r3, #1
 8002a60:	e007      	b.n	8002a72 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	695b      	ldr	r3, [r3, #20]
 8002a68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a6c:	2b80      	cmp	r3, #128	; 0x80
 8002a6e:	d1ca      	bne.n	8002a06 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002a70:	2300      	movs	r3, #0
}
 8002a72:	4618      	mov	r0, r3
 8002a74:	3710      	adds	r7, #16
 8002a76:	46bd      	mov	sp, r7
 8002a78:	bd80      	pop	{r7, pc}

08002a7a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002a7a:	b580      	push	{r7, lr}
 8002a7c:	b084      	sub	sp, #16
 8002a7e:	af00      	add	r7, sp, #0
 8002a80:	60f8      	str	r0, [r7, #12]
 8002a82:	60b9      	str	r1, [r7, #8]
 8002a84:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002a86:	e02d      	b.n	8002ae4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002a88:	68f8      	ldr	r0, [r7, #12]
 8002a8a:	f000 f837 	bl	8002afc <I2C_IsAcknowledgeFailed>
 8002a8e:	4603      	mov	r3, r0
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d001      	beq.n	8002a98 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002a94:	2301      	movs	r3, #1
 8002a96:	e02d      	b.n	8002af4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a98:	68bb      	ldr	r3, [r7, #8]
 8002a9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a9e:	d021      	beq.n	8002ae4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002aa0:	f7fe fc6a 	bl	8001378 <HAL_GetTick>
 8002aa4:	4602      	mov	r2, r0
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	1ad3      	subs	r3, r2, r3
 8002aaa:	68ba      	ldr	r2, [r7, #8]
 8002aac:	429a      	cmp	r2, r3
 8002aae:	d302      	bcc.n	8002ab6 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002ab0:	68bb      	ldr	r3, [r7, #8]
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d116      	bne.n	8002ae4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	2200      	movs	r2, #0
 8002aba:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	2220      	movs	r2, #32
 8002ac0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ad0:	f043 0220 	orr.w	r2, r3, #32
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	2200      	movs	r2, #0
 8002adc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002ae0:	2301      	movs	r3, #1
 8002ae2:	e007      	b.n	8002af4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	695b      	ldr	r3, [r3, #20]
 8002aea:	f003 0304 	and.w	r3, r3, #4
 8002aee:	2b04      	cmp	r3, #4
 8002af0:	d1ca      	bne.n	8002a88 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002af2:	2300      	movs	r3, #0
}
 8002af4:	4618      	mov	r0, r3
 8002af6:	3710      	adds	r7, #16
 8002af8:	46bd      	mov	sp, r7
 8002afa:	bd80      	pop	{r7, pc}

08002afc <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002afc:	b480      	push	{r7}
 8002afe:	b083      	sub	sp, #12
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	695b      	ldr	r3, [r3, #20]
 8002b0a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b0e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b12:	d11b      	bne.n	8002b4c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002b1c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	2200      	movs	r2, #0
 8002b22:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	2220      	movs	r2, #32
 8002b28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	2200      	movs	r2, #0
 8002b30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b38:	f043 0204 	orr.w	r2, r3, #4
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	2200      	movs	r2, #0
 8002b44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002b48:	2301      	movs	r3, #1
 8002b4a:	e000      	b.n	8002b4e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002b4c:	2300      	movs	r3, #0
}
 8002b4e:	4618      	mov	r0, r3
 8002b50:	370c      	adds	r7, #12
 8002b52:	46bd      	mov	sp, r7
 8002b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b58:	4770      	bx	lr
	...

08002b5c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	b086      	sub	sp, #24
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d101      	bne.n	8002b6e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002b6a:	2301      	movs	r3, #1
 8002b6c:	e25b      	b.n	8003026 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f003 0301 	and.w	r3, r3, #1
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d075      	beq.n	8002c66 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002b7a:	4ba3      	ldr	r3, [pc, #652]	; (8002e08 <HAL_RCC_OscConfig+0x2ac>)
 8002b7c:	689b      	ldr	r3, [r3, #8]
 8002b7e:	f003 030c 	and.w	r3, r3, #12
 8002b82:	2b04      	cmp	r3, #4
 8002b84:	d00c      	beq.n	8002ba0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002b86:	4ba0      	ldr	r3, [pc, #640]	; (8002e08 <HAL_RCC_OscConfig+0x2ac>)
 8002b88:	689b      	ldr	r3, [r3, #8]
 8002b8a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002b8e:	2b08      	cmp	r3, #8
 8002b90:	d112      	bne.n	8002bb8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002b92:	4b9d      	ldr	r3, [pc, #628]	; (8002e08 <HAL_RCC_OscConfig+0x2ac>)
 8002b94:	685b      	ldr	r3, [r3, #4]
 8002b96:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b9a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002b9e:	d10b      	bne.n	8002bb8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ba0:	4b99      	ldr	r3, [pc, #612]	; (8002e08 <HAL_RCC_OscConfig+0x2ac>)
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d05b      	beq.n	8002c64 <HAL_RCC_OscConfig+0x108>
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	685b      	ldr	r3, [r3, #4]
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d157      	bne.n	8002c64 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002bb4:	2301      	movs	r3, #1
 8002bb6:	e236      	b.n	8003026 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	685b      	ldr	r3, [r3, #4]
 8002bbc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002bc0:	d106      	bne.n	8002bd0 <HAL_RCC_OscConfig+0x74>
 8002bc2:	4b91      	ldr	r3, [pc, #580]	; (8002e08 <HAL_RCC_OscConfig+0x2ac>)
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	4a90      	ldr	r2, [pc, #576]	; (8002e08 <HAL_RCC_OscConfig+0x2ac>)
 8002bc8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bcc:	6013      	str	r3, [r2, #0]
 8002bce:	e01d      	b.n	8002c0c <HAL_RCC_OscConfig+0xb0>
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	685b      	ldr	r3, [r3, #4]
 8002bd4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002bd8:	d10c      	bne.n	8002bf4 <HAL_RCC_OscConfig+0x98>
 8002bda:	4b8b      	ldr	r3, [pc, #556]	; (8002e08 <HAL_RCC_OscConfig+0x2ac>)
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	4a8a      	ldr	r2, [pc, #552]	; (8002e08 <HAL_RCC_OscConfig+0x2ac>)
 8002be0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002be4:	6013      	str	r3, [r2, #0]
 8002be6:	4b88      	ldr	r3, [pc, #544]	; (8002e08 <HAL_RCC_OscConfig+0x2ac>)
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	4a87      	ldr	r2, [pc, #540]	; (8002e08 <HAL_RCC_OscConfig+0x2ac>)
 8002bec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bf0:	6013      	str	r3, [r2, #0]
 8002bf2:	e00b      	b.n	8002c0c <HAL_RCC_OscConfig+0xb0>
 8002bf4:	4b84      	ldr	r3, [pc, #528]	; (8002e08 <HAL_RCC_OscConfig+0x2ac>)
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	4a83      	ldr	r2, [pc, #524]	; (8002e08 <HAL_RCC_OscConfig+0x2ac>)
 8002bfa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002bfe:	6013      	str	r3, [r2, #0]
 8002c00:	4b81      	ldr	r3, [pc, #516]	; (8002e08 <HAL_RCC_OscConfig+0x2ac>)
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	4a80      	ldr	r2, [pc, #512]	; (8002e08 <HAL_RCC_OscConfig+0x2ac>)
 8002c06:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c0a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	685b      	ldr	r3, [r3, #4]
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d013      	beq.n	8002c3c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c14:	f7fe fbb0 	bl	8001378 <HAL_GetTick>
 8002c18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c1a:	e008      	b.n	8002c2e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002c1c:	f7fe fbac 	bl	8001378 <HAL_GetTick>
 8002c20:	4602      	mov	r2, r0
 8002c22:	693b      	ldr	r3, [r7, #16]
 8002c24:	1ad3      	subs	r3, r2, r3
 8002c26:	2b64      	cmp	r3, #100	; 0x64
 8002c28:	d901      	bls.n	8002c2e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002c2a:	2303      	movs	r3, #3
 8002c2c:	e1fb      	b.n	8003026 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c2e:	4b76      	ldr	r3, [pc, #472]	; (8002e08 <HAL_RCC_OscConfig+0x2ac>)
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d0f0      	beq.n	8002c1c <HAL_RCC_OscConfig+0xc0>
 8002c3a:	e014      	b.n	8002c66 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c3c:	f7fe fb9c 	bl	8001378 <HAL_GetTick>
 8002c40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c42:	e008      	b.n	8002c56 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002c44:	f7fe fb98 	bl	8001378 <HAL_GetTick>
 8002c48:	4602      	mov	r2, r0
 8002c4a:	693b      	ldr	r3, [r7, #16]
 8002c4c:	1ad3      	subs	r3, r2, r3
 8002c4e:	2b64      	cmp	r3, #100	; 0x64
 8002c50:	d901      	bls.n	8002c56 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002c52:	2303      	movs	r3, #3
 8002c54:	e1e7      	b.n	8003026 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c56:	4b6c      	ldr	r3, [pc, #432]	; (8002e08 <HAL_RCC_OscConfig+0x2ac>)
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d1f0      	bne.n	8002c44 <HAL_RCC_OscConfig+0xe8>
 8002c62:	e000      	b.n	8002c66 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c64:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f003 0302 	and.w	r3, r3, #2
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d063      	beq.n	8002d3a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002c72:	4b65      	ldr	r3, [pc, #404]	; (8002e08 <HAL_RCC_OscConfig+0x2ac>)
 8002c74:	689b      	ldr	r3, [r3, #8]
 8002c76:	f003 030c 	and.w	r3, r3, #12
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d00b      	beq.n	8002c96 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002c7e:	4b62      	ldr	r3, [pc, #392]	; (8002e08 <HAL_RCC_OscConfig+0x2ac>)
 8002c80:	689b      	ldr	r3, [r3, #8]
 8002c82:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002c86:	2b08      	cmp	r3, #8
 8002c88:	d11c      	bne.n	8002cc4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002c8a:	4b5f      	ldr	r3, [pc, #380]	; (8002e08 <HAL_RCC_OscConfig+0x2ac>)
 8002c8c:	685b      	ldr	r3, [r3, #4]
 8002c8e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d116      	bne.n	8002cc4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c96:	4b5c      	ldr	r3, [pc, #368]	; (8002e08 <HAL_RCC_OscConfig+0x2ac>)
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f003 0302 	and.w	r3, r3, #2
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d005      	beq.n	8002cae <HAL_RCC_OscConfig+0x152>
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	68db      	ldr	r3, [r3, #12]
 8002ca6:	2b01      	cmp	r3, #1
 8002ca8:	d001      	beq.n	8002cae <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002caa:	2301      	movs	r3, #1
 8002cac:	e1bb      	b.n	8003026 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cae:	4b56      	ldr	r3, [pc, #344]	; (8002e08 <HAL_RCC_OscConfig+0x2ac>)
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	691b      	ldr	r3, [r3, #16]
 8002cba:	00db      	lsls	r3, r3, #3
 8002cbc:	4952      	ldr	r1, [pc, #328]	; (8002e08 <HAL_RCC_OscConfig+0x2ac>)
 8002cbe:	4313      	orrs	r3, r2
 8002cc0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002cc2:	e03a      	b.n	8002d3a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	68db      	ldr	r3, [r3, #12]
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d020      	beq.n	8002d0e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ccc:	4b4f      	ldr	r3, [pc, #316]	; (8002e0c <HAL_RCC_OscConfig+0x2b0>)
 8002cce:	2201      	movs	r2, #1
 8002cd0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cd2:	f7fe fb51 	bl	8001378 <HAL_GetTick>
 8002cd6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cd8:	e008      	b.n	8002cec <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002cda:	f7fe fb4d 	bl	8001378 <HAL_GetTick>
 8002cde:	4602      	mov	r2, r0
 8002ce0:	693b      	ldr	r3, [r7, #16]
 8002ce2:	1ad3      	subs	r3, r2, r3
 8002ce4:	2b02      	cmp	r3, #2
 8002ce6:	d901      	bls.n	8002cec <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002ce8:	2303      	movs	r3, #3
 8002cea:	e19c      	b.n	8003026 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cec:	4b46      	ldr	r3, [pc, #280]	; (8002e08 <HAL_RCC_OscConfig+0x2ac>)
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f003 0302 	and.w	r3, r3, #2
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d0f0      	beq.n	8002cda <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cf8:	4b43      	ldr	r3, [pc, #268]	; (8002e08 <HAL_RCC_OscConfig+0x2ac>)
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	691b      	ldr	r3, [r3, #16]
 8002d04:	00db      	lsls	r3, r3, #3
 8002d06:	4940      	ldr	r1, [pc, #256]	; (8002e08 <HAL_RCC_OscConfig+0x2ac>)
 8002d08:	4313      	orrs	r3, r2
 8002d0a:	600b      	str	r3, [r1, #0]
 8002d0c:	e015      	b.n	8002d3a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d0e:	4b3f      	ldr	r3, [pc, #252]	; (8002e0c <HAL_RCC_OscConfig+0x2b0>)
 8002d10:	2200      	movs	r2, #0
 8002d12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d14:	f7fe fb30 	bl	8001378 <HAL_GetTick>
 8002d18:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d1a:	e008      	b.n	8002d2e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002d1c:	f7fe fb2c 	bl	8001378 <HAL_GetTick>
 8002d20:	4602      	mov	r2, r0
 8002d22:	693b      	ldr	r3, [r7, #16]
 8002d24:	1ad3      	subs	r3, r2, r3
 8002d26:	2b02      	cmp	r3, #2
 8002d28:	d901      	bls.n	8002d2e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002d2a:	2303      	movs	r3, #3
 8002d2c:	e17b      	b.n	8003026 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d2e:	4b36      	ldr	r3, [pc, #216]	; (8002e08 <HAL_RCC_OscConfig+0x2ac>)
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f003 0302 	and.w	r3, r3, #2
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d1f0      	bne.n	8002d1c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f003 0308 	and.w	r3, r3, #8
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d030      	beq.n	8002da8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	695b      	ldr	r3, [r3, #20]
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d016      	beq.n	8002d7c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d4e:	4b30      	ldr	r3, [pc, #192]	; (8002e10 <HAL_RCC_OscConfig+0x2b4>)
 8002d50:	2201      	movs	r2, #1
 8002d52:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d54:	f7fe fb10 	bl	8001378 <HAL_GetTick>
 8002d58:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d5a:	e008      	b.n	8002d6e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d5c:	f7fe fb0c 	bl	8001378 <HAL_GetTick>
 8002d60:	4602      	mov	r2, r0
 8002d62:	693b      	ldr	r3, [r7, #16]
 8002d64:	1ad3      	subs	r3, r2, r3
 8002d66:	2b02      	cmp	r3, #2
 8002d68:	d901      	bls.n	8002d6e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002d6a:	2303      	movs	r3, #3
 8002d6c:	e15b      	b.n	8003026 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d6e:	4b26      	ldr	r3, [pc, #152]	; (8002e08 <HAL_RCC_OscConfig+0x2ac>)
 8002d70:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d72:	f003 0302 	and.w	r3, r3, #2
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d0f0      	beq.n	8002d5c <HAL_RCC_OscConfig+0x200>
 8002d7a:	e015      	b.n	8002da8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002d7c:	4b24      	ldr	r3, [pc, #144]	; (8002e10 <HAL_RCC_OscConfig+0x2b4>)
 8002d7e:	2200      	movs	r2, #0
 8002d80:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d82:	f7fe faf9 	bl	8001378 <HAL_GetTick>
 8002d86:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d88:	e008      	b.n	8002d9c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d8a:	f7fe faf5 	bl	8001378 <HAL_GetTick>
 8002d8e:	4602      	mov	r2, r0
 8002d90:	693b      	ldr	r3, [r7, #16]
 8002d92:	1ad3      	subs	r3, r2, r3
 8002d94:	2b02      	cmp	r3, #2
 8002d96:	d901      	bls.n	8002d9c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002d98:	2303      	movs	r3, #3
 8002d9a:	e144      	b.n	8003026 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d9c:	4b1a      	ldr	r3, [pc, #104]	; (8002e08 <HAL_RCC_OscConfig+0x2ac>)
 8002d9e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002da0:	f003 0302 	and.w	r3, r3, #2
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d1f0      	bne.n	8002d8a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f003 0304 	and.w	r3, r3, #4
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	f000 80a0 	beq.w	8002ef6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002db6:	2300      	movs	r3, #0
 8002db8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002dba:	4b13      	ldr	r3, [pc, #76]	; (8002e08 <HAL_RCC_OscConfig+0x2ac>)
 8002dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d10f      	bne.n	8002de6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002dc6:	2300      	movs	r3, #0
 8002dc8:	60bb      	str	r3, [r7, #8]
 8002dca:	4b0f      	ldr	r3, [pc, #60]	; (8002e08 <HAL_RCC_OscConfig+0x2ac>)
 8002dcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dce:	4a0e      	ldr	r2, [pc, #56]	; (8002e08 <HAL_RCC_OscConfig+0x2ac>)
 8002dd0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002dd4:	6413      	str	r3, [r2, #64]	; 0x40
 8002dd6:	4b0c      	ldr	r3, [pc, #48]	; (8002e08 <HAL_RCC_OscConfig+0x2ac>)
 8002dd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002dde:	60bb      	str	r3, [r7, #8]
 8002de0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002de2:	2301      	movs	r3, #1
 8002de4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002de6:	4b0b      	ldr	r3, [pc, #44]	; (8002e14 <HAL_RCC_OscConfig+0x2b8>)
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d121      	bne.n	8002e36 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002df2:	4b08      	ldr	r3, [pc, #32]	; (8002e14 <HAL_RCC_OscConfig+0x2b8>)
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	4a07      	ldr	r2, [pc, #28]	; (8002e14 <HAL_RCC_OscConfig+0x2b8>)
 8002df8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002dfc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002dfe:	f7fe fabb 	bl	8001378 <HAL_GetTick>
 8002e02:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e04:	e011      	b.n	8002e2a <HAL_RCC_OscConfig+0x2ce>
 8002e06:	bf00      	nop
 8002e08:	40023800 	.word	0x40023800
 8002e0c:	42470000 	.word	0x42470000
 8002e10:	42470e80 	.word	0x42470e80
 8002e14:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e18:	f7fe faae 	bl	8001378 <HAL_GetTick>
 8002e1c:	4602      	mov	r2, r0
 8002e1e:	693b      	ldr	r3, [r7, #16]
 8002e20:	1ad3      	subs	r3, r2, r3
 8002e22:	2b02      	cmp	r3, #2
 8002e24:	d901      	bls.n	8002e2a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002e26:	2303      	movs	r3, #3
 8002e28:	e0fd      	b.n	8003026 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e2a:	4b81      	ldr	r3, [pc, #516]	; (8003030 <HAL_RCC_OscConfig+0x4d4>)
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d0f0      	beq.n	8002e18 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	689b      	ldr	r3, [r3, #8]
 8002e3a:	2b01      	cmp	r3, #1
 8002e3c:	d106      	bne.n	8002e4c <HAL_RCC_OscConfig+0x2f0>
 8002e3e:	4b7d      	ldr	r3, [pc, #500]	; (8003034 <HAL_RCC_OscConfig+0x4d8>)
 8002e40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e42:	4a7c      	ldr	r2, [pc, #496]	; (8003034 <HAL_RCC_OscConfig+0x4d8>)
 8002e44:	f043 0301 	orr.w	r3, r3, #1
 8002e48:	6713      	str	r3, [r2, #112]	; 0x70
 8002e4a:	e01c      	b.n	8002e86 <HAL_RCC_OscConfig+0x32a>
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	689b      	ldr	r3, [r3, #8]
 8002e50:	2b05      	cmp	r3, #5
 8002e52:	d10c      	bne.n	8002e6e <HAL_RCC_OscConfig+0x312>
 8002e54:	4b77      	ldr	r3, [pc, #476]	; (8003034 <HAL_RCC_OscConfig+0x4d8>)
 8002e56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e58:	4a76      	ldr	r2, [pc, #472]	; (8003034 <HAL_RCC_OscConfig+0x4d8>)
 8002e5a:	f043 0304 	orr.w	r3, r3, #4
 8002e5e:	6713      	str	r3, [r2, #112]	; 0x70
 8002e60:	4b74      	ldr	r3, [pc, #464]	; (8003034 <HAL_RCC_OscConfig+0x4d8>)
 8002e62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e64:	4a73      	ldr	r2, [pc, #460]	; (8003034 <HAL_RCC_OscConfig+0x4d8>)
 8002e66:	f043 0301 	orr.w	r3, r3, #1
 8002e6a:	6713      	str	r3, [r2, #112]	; 0x70
 8002e6c:	e00b      	b.n	8002e86 <HAL_RCC_OscConfig+0x32a>
 8002e6e:	4b71      	ldr	r3, [pc, #452]	; (8003034 <HAL_RCC_OscConfig+0x4d8>)
 8002e70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e72:	4a70      	ldr	r2, [pc, #448]	; (8003034 <HAL_RCC_OscConfig+0x4d8>)
 8002e74:	f023 0301 	bic.w	r3, r3, #1
 8002e78:	6713      	str	r3, [r2, #112]	; 0x70
 8002e7a:	4b6e      	ldr	r3, [pc, #440]	; (8003034 <HAL_RCC_OscConfig+0x4d8>)
 8002e7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e7e:	4a6d      	ldr	r2, [pc, #436]	; (8003034 <HAL_RCC_OscConfig+0x4d8>)
 8002e80:	f023 0304 	bic.w	r3, r3, #4
 8002e84:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	689b      	ldr	r3, [r3, #8]
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d015      	beq.n	8002eba <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e8e:	f7fe fa73 	bl	8001378 <HAL_GetTick>
 8002e92:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e94:	e00a      	b.n	8002eac <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e96:	f7fe fa6f 	bl	8001378 <HAL_GetTick>
 8002e9a:	4602      	mov	r2, r0
 8002e9c:	693b      	ldr	r3, [r7, #16]
 8002e9e:	1ad3      	subs	r3, r2, r3
 8002ea0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ea4:	4293      	cmp	r3, r2
 8002ea6:	d901      	bls.n	8002eac <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002ea8:	2303      	movs	r3, #3
 8002eaa:	e0bc      	b.n	8003026 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002eac:	4b61      	ldr	r3, [pc, #388]	; (8003034 <HAL_RCC_OscConfig+0x4d8>)
 8002eae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002eb0:	f003 0302 	and.w	r3, r3, #2
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d0ee      	beq.n	8002e96 <HAL_RCC_OscConfig+0x33a>
 8002eb8:	e014      	b.n	8002ee4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002eba:	f7fe fa5d 	bl	8001378 <HAL_GetTick>
 8002ebe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ec0:	e00a      	b.n	8002ed8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ec2:	f7fe fa59 	bl	8001378 <HAL_GetTick>
 8002ec6:	4602      	mov	r2, r0
 8002ec8:	693b      	ldr	r3, [r7, #16]
 8002eca:	1ad3      	subs	r3, r2, r3
 8002ecc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ed0:	4293      	cmp	r3, r2
 8002ed2:	d901      	bls.n	8002ed8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002ed4:	2303      	movs	r3, #3
 8002ed6:	e0a6      	b.n	8003026 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ed8:	4b56      	ldr	r3, [pc, #344]	; (8003034 <HAL_RCC_OscConfig+0x4d8>)
 8002eda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002edc:	f003 0302 	and.w	r3, r3, #2
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d1ee      	bne.n	8002ec2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002ee4:	7dfb      	ldrb	r3, [r7, #23]
 8002ee6:	2b01      	cmp	r3, #1
 8002ee8:	d105      	bne.n	8002ef6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002eea:	4b52      	ldr	r3, [pc, #328]	; (8003034 <HAL_RCC_OscConfig+0x4d8>)
 8002eec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eee:	4a51      	ldr	r2, [pc, #324]	; (8003034 <HAL_RCC_OscConfig+0x4d8>)
 8002ef0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ef4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	699b      	ldr	r3, [r3, #24]
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	f000 8092 	beq.w	8003024 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002f00:	4b4c      	ldr	r3, [pc, #304]	; (8003034 <HAL_RCC_OscConfig+0x4d8>)
 8002f02:	689b      	ldr	r3, [r3, #8]
 8002f04:	f003 030c 	and.w	r3, r3, #12
 8002f08:	2b08      	cmp	r3, #8
 8002f0a:	d05c      	beq.n	8002fc6 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	699b      	ldr	r3, [r3, #24]
 8002f10:	2b02      	cmp	r3, #2
 8002f12:	d141      	bne.n	8002f98 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f14:	4b48      	ldr	r3, [pc, #288]	; (8003038 <HAL_RCC_OscConfig+0x4dc>)
 8002f16:	2200      	movs	r2, #0
 8002f18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f1a:	f7fe fa2d 	bl	8001378 <HAL_GetTick>
 8002f1e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f20:	e008      	b.n	8002f34 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f22:	f7fe fa29 	bl	8001378 <HAL_GetTick>
 8002f26:	4602      	mov	r2, r0
 8002f28:	693b      	ldr	r3, [r7, #16]
 8002f2a:	1ad3      	subs	r3, r2, r3
 8002f2c:	2b02      	cmp	r3, #2
 8002f2e:	d901      	bls.n	8002f34 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002f30:	2303      	movs	r3, #3
 8002f32:	e078      	b.n	8003026 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f34:	4b3f      	ldr	r3, [pc, #252]	; (8003034 <HAL_RCC_OscConfig+0x4d8>)
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d1f0      	bne.n	8002f22 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	69da      	ldr	r2, [r3, #28]
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	6a1b      	ldr	r3, [r3, #32]
 8002f48:	431a      	orrs	r2, r3
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f4e:	019b      	lsls	r3, r3, #6
 8002f50:	431a      	orrs	r2, r3
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f56:	085b      	lsrs	r3, r3, #1
 8002f58:	3b01      	subs	r3, #1
 8002f5a:	041b      	lsls	r3, r3, #16
 8002f5c:	431a      	orrs	r2, r3
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f62:	061b      	lsls	r3, r3, #24
 8002f64:	4933      	ldr	r1, [pc, #204]	; (8003034 <HAL_RCC_OscConfig+0x4d8>)
 8002f66:	4313      	orrs	r3, r2
 8002f68:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002f6a:	4b33      	ldr	r3, [pc, #204]	; (8003038 <HAL_RCC_OscConfig+0x4dc>)
 8002f6c:	2201      	movs	r2, #1
 8002f6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f70:	f7fe fa02 	bl	8001378 <HAL_GetTick>
 8002f74:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f76:	e008      	b.n	8002f8a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f78:	f7fe f9fe 	bl	8001378 <HAL_GetTick>
 8002f7c:	4602      	mov	r2, r0
 8002f7e:	693b      	ldr	r3, [r7, #16]
 8002f80:	1ad3      	subs	r3, r2, r3
 8002f82:	2b02      	cmp	r3, #2
 8002f84:	d901      	bls.n	8002f8a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002f86:	2303      	movs	r3, #3
 8002f88:	e04d      	b.n	8003026 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f8a:	4b2a      	ldr	r3, [pc, #168]	; (8003034 <HAL_RCC_OscConfig+0x4d8>)
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d0f0      	beq.n	8002f78 <HAL_RCC_OscConfig+0x41c>
 8002f96:	e045      	b.n	8003024 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f98:	4b27      	ldr	r3, [pc, #156]	; (8003038 <HAL_RCC_OscConfig+0x4dc>)
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f9e:	f7fe f9eb 	bl	8001378 <HAL_GetTick>
 8002fa2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002fa4:	e008      	b.n	8002fb8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002fa6:	f7fe f9e7 	bl	8001378 <HAL_GetTick>
 8002faa:	4602      	mov	r2, r0
 8002fac:	693b      	ldr	r3, [r7, #16]
 8002fae:	1ad3      	subs	r3, r2, r3
 8002fb0:	2b02      	cmp	r3, #2
 8002fb2:	d901      	bls.n	8002fb8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002fb4:	2303      	movs	r3, #3
 8002fb6:	e036      	b.n	8003026 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002fb8:	4b1e      	ldr	r3, [pc, #120]	; (8003034 <HAL_RCC_OscConfig+0x4d8>)
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d1f0      	bne.n	8002fa6 <HAL_RCC_OscConfig+0x44a>
 8002fc4:	e02e      	b.n	8003024 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	699b      	ldr	r3, [r3, #24]
 8002fca:	2b01      	cmp	r3, #1
 8002fcc:	d101      	bne.n	8002fd2 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002fce:	2301      	movs	r3, #1
 8002fd0:	e029      	b.n	8003026 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002fd2:	4b18      	ldr	r3, [pc, #96]	; (8003034 <HAL_RCC_OscConfig+0x4d8>)
 8002fd4:	685b      	ldr	r3, [r3, #4]
 8002fd6:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	69db      	ldr	r3, [r3, #28]
 8002fe2:	429a      	cmp	r2, r3
 8002fe4:	d11c      	bne.n	8003020 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ff0:	429a      	cmp	r2, r3
 8002ff2:	d115      	bne.n	8003020 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002ff4:	68fa      	ldr	r2, [r7, #12]
 8002ff6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002ffa:	4013      	ands	r3, r2
 8002ffc:	687a      	ldr	r2, [r7, #4]
 8002ffe:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003000:	4293      	cmp	r3, r2
 8003002:	d10d      	bne.n	8003020 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800300e:	429a      	cmp	r2, r3
 8003010:	d106      	bne.n	8003020 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800301c:	429a      	cmp	r2, r3
 800301e:	d001      	beq.n	8003024 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8003020:	2301      	movs	r3, #1
 8003022:	e000      	b.n	8003026 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8003024:	2300      	movs	r3, #0
}
 8003026:	4618      	mov	r0, r3
 8003028:	3718      	adds	r7, #24
 800302a:	46bd      	mov	sp, r7
 800302c:	bd80      	pop	{r7, pc}
 800302e:	bf00      	nop
 8003030:	40007000 	.word	0x40007000
 8003034:	40023800 	.word	0x40023800
 8003038:	42470060 	.word	0x42470060

0800303c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800303c:	b580      	push	{r7, lr}
 800303e:	b084      	sub	sp, #16
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
 8003044:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	2b00      	cmp	r3, #0
 800304a:	d101      	bne.n	8003050 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800304c:	2301      	movs	r3, #1
 800304e:	e0cc      	b.n	80031ea <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003050:	4b68      	ldr	r3, [pc, #416]	; (80031f4 <HAL_RCC_ClockConfig+0x1b8>)
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f003 030f 	and.w	r3, r3, #15
 8003058:	683a      	ldr	r2, [r7, #0]
 800305a:	429a      	cmp	r2, r3
 800305c:	d90c      	bls.n	8003078 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800305e:	4b65      	ldr	r3, [pc, #404]	; (80031f4 <HAL_RCC_ClockConfig+0x1b8>)
 8003060:	683a      	ldr	r2, [r7, #0]
 8003062:	b2d2      	uxtb	r2, r2
 8003064:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003066:	4b63      	ldr	r3, [pc, #396]	; (80031f4 <HAL_RCC_ClockConfig+0x1b8>)
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f003 030f 	and.w	r3, r3, #15
 800306e:	683a      	ldr	r2, [r7, #0]
 8003070:	429a      	cmp	r2, r3
 8003072:	d001      	beq.n	8003078 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003074:	2301      	movs	r3, #1
 8003076:	e0b8      	b.n	80031ea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f003 0302 	and.w	r3, r3, #2
 8003080:	2b00      	cmp	r3, #0
 8003082:	d020      	beq.n	80030c6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f003 0304 	and.w	r3, r3, #4
 800308c:	2b00      	cmp	r3, #0
 800308e:	d005      	beq.n	800309c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003090:	4b59      	ldr	r3, [pc, #356]	; (80031f8 <HAL_RCC_ClockConfig+0x1bc>)
 8003092:	689b      	ldr	r3, [r3, #8]
 8003094:	4a58      	ldr	r2, [pc, #352]	; (80031f8 <HAL_RCC_ClockConfig+0x1bc>)
 8003096:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800309a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f003 0308 	and.w	r3, r3, #8
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d005      	beq.n	80030b4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80030a8:	4b53      	ldr	r3, [pc, #332]	; (80031f8 <HAL_RCC_ClockConfig+0x1bc>)
 80030aa:	689b      	ldr	r3, [r3, #8]
 80030ac:	4a52      	ldr	r2, [pc, #328]	; (80031f8 <HAL_RCC_ClockConfig+0x1bc>)
 80030ae:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80030b2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80030b4:	4b50      	ldr	r3, [pc, #320]	; (80031f8 <HAL_RCC_ClockConfig+0x1bc>)
 80030b6:	689b      	ldr	r3, [r3, #8]
 80030b8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	689b      	ldr	r3, [r3, #8]
 80030c0:	494d      	ldr	r1, [pc, #308]	; (80031f8 <HAL_RCC_ClockConfig+0x1bc>)
 80030c2:	4313      	orrs	r3, r2
 80030c4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f003 0301 	and.w	r3, r3, #1
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d044      	beq.n	800315c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	685b      	ldr	r3, [r3, #4]
 80030d6:	2b01      	cmp	r3, #1
 80030d8:	d107      	bne.n	80030ea <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030da:	4b47      	ldr	r3, [pc, #284]	; (80031f8 <HAL_RCC_ClockConfig+0x1bc>)
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d119      	bne.n	800311a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80030e6:	2301      	movs	r3, #1
 80030e8:	e07f      	b.n	80031ea <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	685b      	ldr	r3, [r3, #4]
 80030ee:	2b02      	cmp	r3, #2
 80030f0:	d003      	beq.n	80030fa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80030f6:	2b03      	cmp	r3, #3
 80030f8:	d107      	bne.n	800310a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030fa:	4b3f      	ldr	r3, [pc, #252]	; (80031f8 <HAL_RCC_ClockConfig+0x1bc>)
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003102:	2b00      	cmp	r3, #0
 8003104:	d109      	bne.n	800311a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003106:	2301      	movs	r3, #1
 8003108:	e06f      	b.n	80031ea <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800310a:	4b3b      	ldr	r3, [pc, #236]	; (80031f8 <HAL_RCC_ClockConfig+0x1bc>)
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f003 0302 	and.w	r3, r3, #2
 8003112:	2b00      	cmp	r3, #0
 8003114:	d101      	bne.n	800311a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003116:	2301      	movs	r3, #1
 8003118:	e067      	b.n	80031ea <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800311a:	4b37      	ldr	r3, [pc, #220]	; (80031f8 <HAL_RCC_ClockConfig+0x1bc>)
 800311c:	689b      	ldr	r3, [r3, #8]
 800311e:	f023 0203 	bic.w	r2, r3, #3
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	685b      	ldr	r3, [r3, #4]
 8003126:	4934      	ldr	r1, [pc, #208]	; (80031f8 <HAL_RCC_ClockConfig+0x1bc>)
 8003128:	4313      	orrs	r3, r2
 800312a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800312c:	f7fe f924 	bl	8001378 <HAL_GetTick>
 8003130:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003132:	e00a      	b.n	800314a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003134:	f7fe f920 	bl	8001378 <HAL_GetTick>
 8003138:	4602      	mov	r2, r0
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	1ad3      	subs	r3, r2, r3
 800313e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003142:	4293      	cmp	r3, r2
 8003144:	d901      	bls.n	800314a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003146:	2303      	movs	r3, #3
 8003148:	e04f      	b.n	80031ea <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800314a:	4b2b      	ldr	r3, [pc, #172]	; (80031f8 <HAL_RCC_ClockConfig+0x1bc>)
 800314c:	689b      	ldr	r3, [r3, #8]
 800314e:	f003 020c 	and.w	r2, r3, #12
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	685b      	ldr	r3, [r3, #4]
 8003156:	009b      	lsls	r3, r3, #2
 8003158:	429a      	cmp	r2, r3
 800315a:	d1eb      	bne.n	8003134 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800315c:	4b25      	ldr	r3, [pc, #148]	; (80031f4 <HAL_RCC_ClockConfig+0x1b8>)
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f003 030f 	and.w	r3, r3, #15
 8003164:	683a      	ldr	r2, [r7, #0]
 8003166:	429a      	cmp	r2, r3
 8003168:	d20c      	bcs.n	8003184 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800316a:	4b22      	ldr	r3, [pc, #136]	; (80031f4 <HAL_RCC_ClockConfig+0x1b8>)
 800316c:	683a      	ldr	r2, [r7, #0]
 800316e:	b2d2      	uxtb	r2, r2
 8003170:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003172:	4b20      	ldr	r3, [pc, #128]	; (80031f4 <HAL_RCC_ClockConfig+0x1b8>)
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f003 030f 	and.w	r3, r3, #15
 800317a:	683a      	ldr	r2, [r7, #0]
 800317c:	429a      	cmp	r2, r3
 800317e:	d001      	beq.n	8003184 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003180:	2301      	movs	r3, #1
 8003182:	e032      	b.n	80031ea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f003 0304 	and.w	r3, r3, #4
 800318c:	2b00      	cmp	r3, #0
 800318e:	d008      	beq.n	80031a2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003190:	4b19      	ldr	r3, [pc, #100]	; (80031f8 <HAL_RCC_ClockConfig+0x1bc>)
 8003192:	689b      	ldr	r3, [r3, #8]
 8003194:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	68db      	ldr	r3, [r3, #12]
 800319c:	4916      	ldr	r1, [pc, #88]	; (80031f8 <HAL_RCC_ClockConfig+0x1bc>)
 800319e:	4313      	orrs	r3, r2
 80031a0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f003 0308 	and.w	r3, r3, #8
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d009      	beq.n	80031c2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80031ae:	4b12      	ldr	r3, [pc, #72]	; (80031f8 <HAL_RCC_ClockConfig+0x1bc>)
 80031b0:	689b      	ldr	r3, [r3, #8]
 80031b2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	691b      	ldr	r3, [r3, #16]
 80031ba:	00db      	lsls	r3, r3, #3
 80031bc:	490e      	ldr	r1, [pc, #56]	; (80031f8 <HAL_RCC_ClockConfig+0x1bc>)
 80031be:	4313      	orrs	r3, r2
 80031c0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80031c2:	f000 f821 	bl	8003208 <HAL_RCC_GetSysClockFreq>
 80031c6:	4601      	mov	r1, r0
 80031c8:	4b0b      	ldr	r3, [pc, #44]	; (80031f8 <HAL_RCC_ClockConfig+0x1bc>)
 80031ca:	689b      	ldr	r3, [r3, #8]
 80031cc:	091b      	lsrs	r3, r3, #4
 80031ce:	f003 030f 	and.w	r3, r3, #15
 80031d2:	4a0a      	ldr	r2, [pc, #40]	; (80031fc <HAL_RCC_ClockConfig+0x1c0>)
 80031d4:	5cd3      	ldrb	r3, [r2, r3]
 80031d6:	fa21 f303 	lsr.w	r3, r1, r3
 80031da:	4a09      	ldr	r2, [pc, #36]	; (8003200 <HAL_RCC_ClockConfig+0x1c4>)
 80031dc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80031de:	4b09      	ldr	r3, [pc, #36]	; (8003204 <HAL_RCC_ClockConfig+0x1c8>)
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	4618      	mov	r0, r3
 80031e4:	f7fe f884 	bl	80012f0 <HAL_InitTick>

  return HAL_OK;
 80031e8:	2300      	movs	r3, #0
}
 80031ea:	4618      	mov	r0, r3
 80031ec:	3710      	adds	r7, #16
 80031ee:	46bd      	mov	sp, r7
 80031f0:	bd80      	pop	{r7, pc}
 80031f2:	bf00      	nop
 80031f4:	40023c00 	.word	0x40023c00
 80031f8:	40023800 	.word	0x40023800
 80031fc:	08005618 	.word	0x08005618
 8003200:	20000000 	.word	0x20000000
 8003204:	20000004 	.word	0x20000004

08003208 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003208:	b5f0      	push	{r4, r5, r6, r7, lr}
 800320a:	b085      	sub	sp, #20
 800320c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800320e:	2300      	movs	r3, #0
 8003210:	607b      	str	r3, [r7, #4]
 8003212:	2300      	movs	r3, #0
 8003214:	60fb      	str	r3, [r7, #12]
 8003216:	2300      	movs	r3, #0
 8003218:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800321a:	2300      	movs	r3, #0
 800321c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800321e:	4b63      	ldr	r3, [pc, #396]	; (80033ac <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003220:	689b      	ldr	r3, [r3, #8]
 8003222:	f003 030c 	and.w	r3, r3, #12
 8003226:	2b04      	cmp	r3, #4
 8003228:	d007      	beq.n	800323a <HAL_RCC_GetSysClockFreq+0x32>
 800322a:	2b08      	cmp	r3, #8
 800322c:	d008      	beq.n	8003240 <HAL_RCC_GetSysClockFreq+0x38>
 800322e:	2b00      	cmp	r3, #0
 8003230:	f040 80b4 	bne.w	800339c <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003234:	4b5e      	ldr	r3, [pc, #376]	; (80033b0 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8003236:	60bb      	str	r3, [r7, #8]
       break;
 8003238:	e0b3      	b.n	80033a2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800323a:	4b5e      	ldr	r3, [pc, #376]	; (80033b4 <HAL_RCC_GetSysClockFreq+0x1ac>)
 800323c:	60bb      	str	r3, [r7, #8]
      break;
 800323e:	e0b0      	b.n	80033a2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003240:	4b5a      	ldr	r3, [pc, #360]	; (80033ac <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003242:	685b      	ldr	r3, [r3, #4]
 8003244:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003248:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800324a:	4b58      	ldr	r3, [pc, #352]	; (80033ac <HAL_RCC_GetSysClockFreq+0x1a4>)
 800324c:	685b      	ldr	r3, [r3, #4]
 800324e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003252:	2b00      	cmp	r3, #0
 8003254:	d04a      	beq.n	80032ec <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003256:	4b55      	ldr	r3, [pc, #340]	; (80033ac <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003258:	685b      	ldr	r3, [r3, #4]
 800325a:	099b      	lsrs	r3, r3, #6
 800325c:	f04f 0400 	mov.w	r4, #0
 8003260:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003264:	f04f 0200 	mov.w	r2, #0
 8003268:	ea03 0501 	and.w	r5, r3, r1
 800326c:	ea04 0602 	and.w	r6, r4, r2
 8003270:	4629      	mov	r1, r5
 8003272:	4632      	mov	r2, r6
 8003274:	f04f 0300 	mov.w	r3, #0
 8003278:	f04f 0400 	mov.w	r4, #0
 800327c:	0154      	lsls	r4, r2, #5
 800327e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003282:	014b      	lsls	r3, r1, #5
 8003284:	4619      	mov	r1, r3
 8003286:	4622      	mov	r2, r4
 8003288:	1b49      	subs	r1, r1, r5
 800328a:	eb62 0206 	sbc.w	r2, r2, r6
 800328e:	f04f 0300 	mov.w	r3, #0
 8003292:	f04f 0400 	mov.w	r4, #0
 8003296:	0194      	lsls	r4, r2, #6
 8003298:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800329c:	018b      	lsls	r3, r1, #6
 800329e:	1a5b      	subs	r3, r3, r1
 80032a0:	eb64 0402 	sbc.w	r4, r4, r2
 80032a4:	f04f 0100 	mov.w	r1, #0
 80032a8:	f04f 0200 	mov.w	r2, #0
 80032ac:	00e2      	lsls	r2, r4, #3
 80032ae:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80032b2:	00d9      	lsls	r1, r3, #3
 80032b4:	460b      	mov	r3, r1
 80032b6:	4614      	mov	r4, r2
 80032b8:	195b      	adds	r3, r3, r5
 80032ba:	eb44 0406 	adc.w	r4, r4, r6
 80032be:	f04f 0100 	mov.w	r1, #0
 80032c2:	f04f 0200 	mov.w	r2, #0
 80032c6:	0262      	lsls	r2, r4, #9
 80032c8:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80032cc:	0259      	lsls	r1, r3, #9
 80032ce:	460b      	mov	r3, r1
 80032d0:	4614      	mov	r4, r2
 80032d2:	4618      	mov	r0, r3
 80032d4:	4621      	mov	r1, r4
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	f04f 0400 	mov.w	r4, #0
 80032dc:	461a      	mov	r2, r3
 80032de:	4623      	mov	r3, r4
 80032e0:	f7fc ffd6 	bl	8000290 <__aeabi_uldivmod>
 80032e4:	4603      	mov	r3, r0
 80032e6:	460c      	mov	r4, r1
 80032e8:	60fb      	str	r3, [r7, #12]
 80032ea:	e049      	b.n	8003380 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80032ec:	4b2f      	ldr	r3, [pc, #188]	; (80033ac <HAL_RCC_GetSysClockFreq+0x1a4>)
 80032ee:	685b      	ldr	r3, [r3, #4]
 80032f0:	099b      	lsrs	r3, r3, #6
 80032f2:	f04f 0400 	mov.w	r4, #0
 80032f6:	f240 11ff 	movw	r1, #511	; 0x1ff
 80032fa:	f04f 0200 	mov.w	r2, #0
 80032fe:	ea03 0501 	and.w	r5, r3, r1
 8003302:	ea04 0602 	and.w	r6, r4, r2
 8003306:	4629      	mov	r1, r5
 8003308:	4632      	mov	r2, r6
 800330a:	f04f 0300 	mov.w	r3, #0
 800330e:	f04f 0400 	mov.w	r4, #0
 8003312:	0154      	lsls	r4, r2, #5
 8003314:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003318:	014b      	lsls	r3, r1, #5
 800331a:	4619      	mov	r1, r3
 800331c:	4622      	mov	r2, r4
 800331e:	1b49      	subs	r1, r1, r5
 8003320:	eb62 0206 	sbc.w	r2, r2, r6
 8003324:	f04f 0300 	mov.w	r3, #0
 8003328:	f04f 0400 	mov.w	r4, #0
 800332c:	0194      	lsls	r4, r2, #6
 800332e:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003332:	018b      	lsls	r3, r1, #6
 8003334:	1a5b      	subs	r3, r3, r1
 8003336:	eb64 0402 	sbc.w	r4, r4, r2
 800333a:	f04f 0100 	mov.w	r1, #0
 800333e:	f04f 0200 	mov.w	r2, #0
 8003342:	00e2      	lsls	r2, r4, #3
 8003344:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003348:	00d9      	lsls	r1, r3, #3
 800334a:	460b      	mov	r3, r1
 800334c:	4614      	mov	r4, r2
 800334e:	195b      	adds	r3, r3, r5
 8003350:	eb44 0406 	adc.w	r4, r4, r6
 8003354:	f04f 0100 	mov.w	r1, #0
 8003358:	f04f 0200 	mov.w	r2, #0
 800335c:	02a2      	lsls	r2, r4, #10
 800335e:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8003362:	0299      	lsls	r1, r3, #10
 8003364:	460b      	mov	r3, r1
 8003366:	4614      	mov	r4, r2
 8003368:	4618      	mov	r0, r3
 800336a:	4621      	mov	r1, r4
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	f04f 0400 	mov.w	r4, #0
 8003372:	461a      	mov	r2, r3
 8003374:	4623      	mov	r3, r4
 8003376:	f7fc ff8b 	bl	8000290 <__aeabi_uldivmod>
 800337a:	4603      	mov	r3, r0
 800337c:	460c      	mov	r4, r1
 800337e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003380:	4b0a      	ldr	r3, [pc, #40]	; (80033ac <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003382:	685b      	ldr	r3, [r3, #4]
 8003384:	0c1b      	lsrs	r3, r3, #16
 8003386:	f003 0303 	and.w	r3, r3, #3
 800338a:	3301      	adds	r3, #1
 800338c:	005b      	lsls	r3, r3, #1
 800338e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003390:	68fa      	ldr	r2, [r7, #12]
 8003392:	683b      	ldr	r3, [r7, #0]
 8003394:	fbb2 f3f3 	udiv	r3, r2, r3
 8003398:	60bb      	str	r3, [r7, #8]
      break;
 800339a:	e002      	b.n	80033a2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800339c:	4b04      	ldr	r3, [pc, #16]	; (80033b0 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800339e:	60bb      	str	r3, [r7, #8]
      break;
 80033a0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80033a2:	68bb      	ldr	r3, [r7, #8]
}
 80033a4:	4618      	mov	r0, r3
 80033a6:	3714      	adds	r7, #20
 80033a8:	46bd      	mov	sp, r7
 80033aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80033ac:	40023800 	.word	0x40023800
 80033b0:	00f42400 	.word	0x00f42400
 80033b4:	007a1200 	.word	0x007a1200

080033b8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80033b8:	b480      	push	{r7}
 80033ba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80033bc:	4b03      	ldr	r3, [pc, #12]	; (80033cc <HAL_RCC_GetHCLKFreq+0x14>)
 80033be:	681b      	ldr	r3, [r3, #0]
}
 80033c0:	4618      	mov	r0, r3
 80033c2:	46bd      	mov	sp, r7
 80033c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c8:	4770      	bx	lr
 80033ca:	bf00      	nop
 80033cc:	20000000 	.word	0x20000000

080033d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80033d0:	b580      	push	{r7, lr}
 80033d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80033d4:	f7ff fff0 	bl	80033b8 <HAL_RCC_GetHCLKFreq>
 80033d8:	4601      	mov	r1, r0
 80033da:	4b05      	ldr	r3, [pc, #20]	; (80033f0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80033dc:	689b      	ldr	r3, [r3, #8]
 80033de:	0a9b      	lsrs	r3, r3, #10
 80033e0:	f003 0307 	and.w	r3, r3, #7
 80033e4:	4a03      	ldr	r2, [pc, #12]	; (80033f4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80033e6:	5cd3      	ldrb	r3, [r2, r3]
 80033e8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80033ec:	4618      	mov	r0, r3
 80033ee:	bd80      	pop	{r7, pc}
 80033f0:	40023800 	.word	0x40023800
 80033f4:	08005628 	.word	0x08005628

080033f8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80033f8:	b580      	push	{r7, lr}
 80033fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80033fc:	f7ff ffdc 	bl	80033b8 <HAL_RCC_GetHCLKFreq>
 8003400:	4601      	mov	r1, r0
 8003402:	4b05      	ldr	r3, [pc, #20]	; (8003418 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003404:	689b      	ldr	r3, [r3, #8]
 8003406:	0b5b      	lsrs	r3, r3, #13
 8003408:	f003 0307 	and.w	r3, r3, #7
 800340c:	4a03      	ldr	r2, [pc, #12]	; (800341c <HAL_RCC_GetPCLK2Freq+0x24>)
 800340e:	5cd3      	ldrb	r3, [r2, r3]
 8003410:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003414:	4618      	mov	r0, r3
 8003416:	bd80      	pop	{r7, pc}
 8003418:	40023800 	.word	0x40023800
 800341c:	08005628 	.word	0x08005628

08003420 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003420:	b580      	push	{r7, lr}
 8003422:	b082      	sub	sp, #8
 8003424:	af00      	add	r7, sp, #0
 8003426:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	2b00      	cmp	r3, #0
 800342c:	d101      	bne.n	8003432 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800342e:	2301      	movs	r3, #1
 8003430:	e01d      	b.n	800346e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003438:	b2db      	uxtb	r3, r3
 800343a:	2b00      	cmp	r3, #0
 800343c:	d106      	bne.n	800344c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	2200      	movs	r2, #0
 8003442:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003446:	6878      	ldr	r0, [r7, #4]
 8003448:	f7fd fe02 	bl	8001050 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	2202      	movs	r2, #2
 8003450:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681a      	ldr	r2, [r3, #0]
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	3304      	adds	r3, #4
 800345c:	4619      	mov	r1, r3
 800345e:	4610      	mov	r0, r2
 8003460:	f000 fd2e 	bl	8003ec0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	2201      	movs	r2, #1
 8003468:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800346c:	2300      	movs	r3, #0
}
 800346e:	4618      	mov	r0, r3
 8003470:	3708      	adds	r7, #8
 8003472:	46bd      	mov	sp, r7
 8003474:	bd80      	pop	{r7, pc}

08003476 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003476:	b580      	push	{r7, lr}
 8003478:	b082      	sub	sp, #8
 800347a:	af00      	add	r7, sp, #0
 800347c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	2b00      	cmp	r3, #0
 8003482:	d101      	bne.n	8003488 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003484:	2301      	movs	r3, #1
 8003486:	e01d      	b.n	80034c4 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800348e:	b2db      	uxtb	r3, r3
 8003490:	2b00      	cmp	r3, #0
 8003492:	d106      	bne.n	80034a2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	2200      	movs	r2, #0
 8003498:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800349c:	6878      	ldr	r0, [r7, #4]
 800349e:	f000 f815 	bl	80034cc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	2202      	movs	r2, #2
 80034a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681a      	ldr	r2, [r3, #0]
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	3304      	adds	r3, #4
 80034b2:	4619      	mov	r1, r3
 80034b4:	4610      	mov	r0, r2
 80034b6:	f000 fd03 	bl	8003ec0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	2201      	movs	r2, #1
 80034be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80034c2:	2300      	movs	r3, #0
}
 80034c4:	4618      	mov	r0, r3
 80034c6:	3708      	adds	r7, #8
 80034c8:	46bd      	mov	sp, r7
 80034ca:	bd80      	pop	{r7, pc}

080034cc <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80034cc:	b480      	push	{r7}
 80034ce:	b083      	sub	sp, #12
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80034d4:	bf00      	nop
 80034d6:	370c      	adds	r7, #12
 80034d8:	46bd      	mov	sp, r7
 80034da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034de:	4770      	bx	lr

080034e0 <HAL_TIM_PWM_Start_DMA>:
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 80034e0:	b580      	push	{r7, lr}
 80034e2:	b086      	sub	sp, #24
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	60f8      	str	r0, [r7, #12]
 80034e8:	60b9      	str	r1, [r7, #8]
 80034ea:	607a      	str	r2, [r7, #4]
 80034ec:	807b      	strh	r3, [r7, #2]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  if (htim->State == HAL_TIM_STATE_BUSY)
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034f4:	b2db      	uxtb	r3, r3
 80034f6:	2b02      	cmp	r3, #2
 80034f8:	d101      	bne.n	80034fe <HAL_TIM_PWM_Start_DMA+0x1e>
  {
    return HAL_BUSY;
 80034fa:	2302      	movs	r3, #2
 80034fc:	e0e9      	b.n	80036d2 <HAL_TIM_PWM_Start_DMA+0x1f2>
  }
  else if (htim->State == HAL_TIM_STATE_READY)
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003504:	b2db      	uxtb	r3, r3
 8003506:	2b01      	cmp	r3, #1
 8003508:	d10b      	bne.n	8003522 <HAL_TIM_PWM_Start_DMA+0x42>
  {
    if ((pData == NULL) && (Length > 0U))
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	2b00      	cmp	r3, #0
 800350e:	d104      	bne.n	800351a <HAL_TIM_PWM_Start_DMA+0x3a>
 8003510:	887b      	ldrh	r3, [r7, #2]
 8003512:	2b00      	cmp	r3, #0
 8003514:	d001      	beq.n	800351a <HAL_TIM_PWM_Start_DMA+0x3a>
    {
      return HAL_ERROR;
 8003516:	2301      	movs	r3, #1
 8003518:	e0db      	b.n	80036d2 <HAL_TIM_PWM_Start_DMA+0x1f2>
    }
    else
    {
      htim->State = HAL_TIM_STATE_BUSY;
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	2202      	movs	r2, #2
 800351e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  else
  {
    /* nothing to do */
  }

  switch (Channel)
 8003522:	68bb      	ldr	r3, [r7, #8]
 8003524:	2b0c      	cmp	r3, #12
 8003526:	f200 80ad 	bhi.w	8003684 <HAL_TIM_PWM_Start_DMA+0x1a4>
 800352a:	a201      	add	r2, pc, #4	; (adr r2, 8003530 <HAL_TIM_PWM_Start_DMA+0x50>)
 800352c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003530:	08003565 	.word	0x08003565
 8003534:	08003685 	.word	0x08003685
 8003538:	08003685 	.word	0x08003685
 800353c:	08003685 	.word	0x08003685
 8003540:	080035ad 	.word	0x080035ad
 8003544:	08003685 	.word	0x08003685
 8003548:	08003685 	.word	0x08003685
 800354c:	08003685 	.word	0x08003685
 8003550:	080035f5 	.word	0x080035f5
 8003554:	08003685 	.word	0x08003685
 8003558:	08003685 	.word	0x08003685
 800355c:	08003685 	.word	0x08003685
 8003560:	0800363d 	.word	0x0800363d
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003568:	4a5c      	ldr	r2, [pc, #368]	; (80036dc <HAL_TIM_PWM_Start_DMA+0x1fc>)
 800356a:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003570:	4a5b      	ldr	r2, [pc, #364]	; (80036e0 <HAL_TIM_PWM_Start_DMA+0x200>)
 8003572:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003578:	4a5a      	ldr	r2, [pc, #360]	; (80036e4 <HAL_TIM_PWM_Start_DMA+0x204>)
 800357a:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1, Length) != HAL_OK)
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8003580:	6879      	ldr	r1, [r7, #4]
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	3334      	adds	r3, #52	; 0x34
 8003588:	461a      	mov	r2, r3
 800358a:	887b      	ldrh	r3, [r7, #2]
 800358c:	f7fe f8e2 	bl	8001754 <HAL_DMA_Start_IT>
 8003590:	4603      	mov	r3, r0
 8003592:	2b00      	cmp	r3, #0
 8003594:	d001      	beq.n	800359a <HAL_TIM_PWM_Start_DMA+0xba>
      {
        return HAL_ERROR;
 8003596:	2301      	movs	r3, #1
 8003598:	e09b      	b.n	80036d2 <HAL_TIM_PWM_Start_DMA+0x1f2>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	68da      	ldr	r2, [r3, #12]
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80035a8:	60da      	str	r2, [r3, #12]
      break;
 80035aa:	e06c      	b.n	8003686 <HAL_TIM_PWM_Start_DMA+0x1a6>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035b0:	4a4a      	ldr	r2, [pc, #296]	; (80036dc <HAL_TIM_PWM_Start_DMA+0x1fc>)
 80035b2:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035b8:	4a49      	ldr	r2, [pc, #292]	; (80036e0 <HAL_TIM_PWM_Start_DMA+0x200>)
 80035ba:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035c0:	4a48      	ldr	r2, [pc, #288]	; (80036e4 <HAL_TIM_PWM_Start_DMA+0x204>)
 80035c2:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2, Length) != HAL_OK)
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80035c8:	6879      	ldr	r1, [r7, #4]
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	3338      	adds	r3, #56	; 0x38
 80035d0:	461a      	mov	r2, r3
 80035d2:	887b      	ldrh	r3, [r7, #2]
 80035d4:	f7fe f8be 	bl	8001754 <HAL_DMA_Start_IT>
 80035d8:	4603      	mov	r3, r0
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d001      	beq.n	80035e2 <HAL_TIM_PWM_Start_DMA+0x102>
      {
        return HAL_ERROR;
 80035de:	2301      	movs	r3, #1
 80035e0:	e077      	b.n	80036d2 <HAL_TIM_PWM_Start_DMA+0x1f2>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	68da      	ldr	r2, [r3, #12]
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80035f0:	60da      	str	r2, [r3, #12]
      break;
 80035f2:	e048      	b.n	8003686 <HAL_TIM_PWM_Start_DMA+0x1a6>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035f8:	4a38      	ldr	r2, [pc, #224]	; (80036dc <HAL_TIM_PWM_Start_DMA+0x1fc>)
 80035fa:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003600:	4a37      	ldr	r2, [pc, #220]	; (80036e0 <HAL_TIM_PWM_Start_DMA+0x200>)
 8003602:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003608:	4a36      	ldr	r2, [pc, #216]	; (80036e4 <HAL_TIM_PWM_Start_DMA+0x204>)
 800360a:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3, Length) != HAL_OK)
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8003610:	6879      	ldr	r1, [r7, #4]
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	333c      	adds	r3, #60	; 0x3c
 8003618:	461a      	mov	r2, r3
 800361a:	887b      	ldrh	r3, [r7, #2]
 800361c:	f7fe f89a 	bl	8001754 <HAL_DMA_Start_IT>
 8003620:	4603      	mov	r3, r0
 8003622:	2b00      	cmp	r3, #0
 8003624:	d001      	beq.n	800362a <HAL_TIM_PWM_Start_DMA+0x14a>
      {
        return HAL_ERROR;
 8003626:	2301      	movs	r3, #1
 8003628:	e053      	b.n	80036d2 <HAL_TIM_PWM_Start_DMA+0x1f2>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	68da      	ldr	r2, [r3, #12]
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003638:	60da      	str	r2, [r3, #12]
      break;
 800363a:	e024      	b.n	8003686 <HAL_TIM_PWM_Start_DMA+0x1a6>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003640:	4a26      	ldr	r2, [pc, #152]	; (80036dc <HAL_TIM_PWM_Start_DMA+0x1fc>)
 8003642:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003648:	4a25      	ldr	r2, [pc, #148]	; (80036e0 <HAL_TIM_PWM_Start_DMA+0x200>)
 800364a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003650:	4a24      	ldr	r2, [pc, #144]	; (80036e4 <HAL_TIM_PWM_Start_DMA+0x204>)
 8003652:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4, Length) != HAL_OK)
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003658:	6879      	ldr	r1, [r7, #4]
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	3340      	adds	r3, #64	; 0x40
 8003660:	461a      	mov	r2, r3
 8003662:	887b      	ldrh	r3, [r7, #2]
 8003664:	f7fe f876 	bl	8001754 <HAL_DMA_Start_IT>
 8003668:	4603      	mov	r3, r0
 800366a:	2b00      	cmp	r3, #0
 800366c:	d001      	beq.n	8003672 <HAL_TIM_PWM_Start_DMA+0x192>
      {
        return HAL_ERROR;
 800366e:	2301      	movs	r3, #1
 8003670:	e02f      	b.n	80036d2 <HAL_TIM_PWM_Start_DMA+0x1f2>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	68da      	ldr	r2, [r3, #12]
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003680:	60da      	str	r2, [r3, #12]
      break;
 8003682:	e000      	b.n	8003686 <HAL_TIM_PWM_Start_DMA+0x1a6>
    }

    default:
      break;
 8003684:	bf00      	nop
  }

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	2201      	movs	r2, #1
 800368c:	68b9      	ldr	r1, [r7, #8]
 800368e:	4618      	mov	r0, r3
 8003690:	f000 febc 	bl	800440c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	4a13      	ldr	r2, [pc, #76]	; (80036e8 <HAL_TIM_PWM_Start_DMA+0x208>)
 800369a:	4293      	cmp	r3, r2
 800369c:	d107      	bne.n	80036ae <HAL_TIM_PWM_Start_DMA+0x1ce>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80036ac:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	689b      	ldr	r3, [r3, #8]
 80036b4:	f003 0307 	and.w	r3, r3, #7
 80036b8:	617b      	str	r3, [r7, #20]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80036ba:	697b      	ldr	r3, [r7, #20]
 80036bc:	2b06      	cmp	r3, #6
 80036be:	d007      	beq.n	80036d0 <HAL_TIM_PWM_Start_DMA+0x1f0>
  {
    __HAL_TIM_ENABLE(htim);
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	681a      	ldr	r2, [r3, #0]
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f042 0201 	orr.w	r2, r2, #1
 80036ce:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80036d0:	2300      	movs	r3, #0
}
 80036d2:	4618      	mov	r0, r3
 80036d4:	3718      	adds	r7, #24
 80036d6:	46bd      	mov	sp, r7
 80036d8:	bd80      	pop	{r7, pc}
 80036da:	bf00      	nop
 80036dc:	08003ddf 	.word	0x08003ddf
 80036e0:	08003e4f 	.word	0x08003e4f
 80036e4:	08003dbb 	.word	0x08003dbb
 80036e8:	40010000 	.word	0x40010000

080036ec <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80036ec:	b580      	push	{r7, lr}
 80036ee:	b082      	sub	sp, #8
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	6078      	str	r0, [r7, #4]
 80036f4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 80036f6:	683b      	ldr	r3, [r7, #0]
 80036f8:	2b0c      	cmp	r3, #12
 80036fa:	d855      	bhi.n	80037a8 <HAL_TIM_PWM_Stop_DMA+0xbc>
 80036fc:	a201      	add	r2, pc, #4	; (adr r2, 8003704 <HAL_TIM_PWM_Stop_DMA+0x18>)
 80036fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003702:	bf00      	nop
 8003704:	08003739 	.word	0x08003739
 8003708:	080037a9 	.word	0x080037a9
 800370c:	080037a9 	.word	0x080037a9
 8003710:	080037a9 	.word	0x080037a9
 8003714:	08003755 	.word	0x08003755
 8003718:	080037a9 	.word	0x080037a9
 800371c:	080037a9 	.word	0x080037a9
 8003720:	080037a9 	.word	0x080037a9
 8003724:	08003771 	.word	0x08003771
 8003728:	080037a9 	.word	0x080037a9
 800372c:	080037a9 	.word	0x080037a9
 8003730:	080037a9 	.word	0x080037a9
 8003734:	0800378d 	.word	0x0800378d
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	68da      	ldr	r2, [r3, #12]
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003746:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800374c:	4618      	mov	r0, r3
 800374e:	f7fe f859 	bl	8001804 <HAL_DMA_Abort_IT>
      break;
 8003752:	e02a      	b.n	80037aa <HAL_TIM_PWM_Stop_DMA+0xbe>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	68da      	ldr	r2, [r3, #12]
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003762:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003768:	4618      	mov	r0, r3
 800376a:	f7fe f84b 	bl	8001804 <HAL_DMA_Abort_IT>
      break;
 800376e:	e01c      	b.n	80037aa <HAL_TIM_PWM_Stop_DMA+0xbe>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	68da      	ldr	r2, [r3, #12]
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800377e:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003784:	4618      	mov	r0, r3
 8003786:	f7fe f83d 	bl	8001804 <HAL_DMA_Abort_IT>
      break;
 800378a:	e00e      	b.n	80037aa <HAL_TIM_PWM_Stop_DMA+0xbe>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	68da      	ldr	r2, [r3, #12]
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800379a:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037a0:	4618      	mov	r0, r3
 80037a2:	f7fe f82f 	bl	8001804 <HAL_DMA_Abort_IT>
      break;
 80037a6:	e000      	b.n	80037aa <HAL_TIM_PWM_Stop_DMA+0xbe>
    }

    default:
      break;
 80037a8:	bf00      	nop
  }

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	2200      	movs	r2, #0
 80037b0:	6839      	ldr	r1, [r7, #0]
 80037b2:	4618      	mov	r0, r3
 80037b4:	f000 fe2a 	bl	800440c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	4a1d      	ldr	r2, [pc, #116]	; (8003834 <HAL_TIM_PWM_Stop_DMA+0x148>)
 80037be:	4293      	cmp	r3, r2
 80037c0:	d117      	bne.n	80037f2 <HAL_TIM_PWM_Stop_DMA+0x106>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	6a1a      	ldr	r2, [r3, #32]
 80037c8:	f241 1311 	movw	r3, #4369	; 0x1111
 80037cc:	4013      	ands	r3, r2
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d10f      	bne.n	80037f2 <HAL_TIM_PWM_Stop_DMA+0x106>
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	6a1a      	ldr	r2, [r3, #32]
 80037d8:	f240 4344 	movw	r3, #1092	; 0x444
 80037dc:	4013      	ands	r3, r2
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d107      	bne.n	80037f2 <HAL_TIM_PWM_Stop_DMA+0x106>
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80037f0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	6a1a      	ldr	r2, [r3, #32]
 80037f8:	f241 1311 	movw	r3, #4369	; 0x1111
 80037fc:	4013      	ands	r3, r2
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d10f      	bne.n	8003822 <HAL_TIM_PWM_Stop_DMA+0x136>
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	6a1a      	ldr	r2, [r3, #32]
 8003808:	f240 4344 	movw	r3, #1092	; 0x444
 800380c:	4013      	ands	r3, r2
 800380e:	2b00      	cmp	r3, #0
 8003810:	d107      	bne.n	8003822 <HAL_TIM_PWM_Stop_DMA+0x136>
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	681a      	ldr	r2, [r3, #0]
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f022 0201 	bic.w	r2, r2, #1
 8003820:	601a      	str	r2, [r3, #0]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	2201      	movs	r2, #1
 8003826:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800382a:	2300      	movs	r3, #0
}
 800382c:	4618      	mov	r0, r3
 800382e:	3708      	adds	r7, #8
 8003830:	46bd      	mov	sp, r7
 8003832:	bd80      	pop	{r7, pc}
 8003834:	40010000 	.word	0x40010000

08003838 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003838:	b580      	push	{r7, lr}
 800383a:	b082      	sub	sp, #8
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	691b      	ldr	r3, [r3, #16]
 8003846:	f003 0302 	and.w	r3, r3, #2
 800384a:	2b02      	cmp	r3, #2
 800384c:	d122      	bne.n	8003894 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	68db      	ldr	r3, [r3, #12]
 8003854:	f003 0302 	and.w	r3, r3, #2
 8003858:	2b02      	cmp	r3, #2
 800385a:	d11b      	bne.n	8003894 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f06f 0202 	mvn.w	r2, #2
 8003864:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	2201      	movs	r2, #1
 800386a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	699b      	ldr	r3, [r3, #24]
 8003872:	f003 0303 	and.w	r3, r3, #3
 8003876:	2b00      	cmp	r3, #0
 8003878:	d003      	beq.n	8003882 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800387a:	6878      	ldr	r0, [r7, #4]
 800387c:	f000 fa75 	bl	8003d6a <HAL_TIM_IC_CaptureCallback>
 8003880:	e005      	b.n	800388e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003882:	6878      	ldr	r0, [r7, #4]
 8003884:	f000 fa67 	bl	8003d56 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003888:	6878      	ldr	r0, [r7, #4]
 800388a:	f7fd f9bb 	bl	8000c04 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	2200      	movs	r2, #0
 8003892:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	691b      	ldr	r3, [r3, #16]
 800389a:	f003 0304 	and.w	r3, r3, #4
 800389e:	2b04      	cmp	r3, #4
 80038a0:	d122      	bne.n	80038e8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	68db      	ldr	r3, [r3, #12]
 80038a8:	f003 0304 	and.w	r3, r3, #4
 80038ac:	2b04      	cmp	r3, #4
 80038ae:	d11b      	bne.n	80038e8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f06f 0204 	mvn.w	r2, #4
 80038b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	2202      	movs	r2, #2
 80038be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	699b      	ldr	r3, [r3, #24]
 80038c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d003      	beq.n	80038d6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80038ce:	6878      	ldr	r0, [r7, #4]
 80038d0:	f000 fa4b 	bl	8003d6a <HAL_TIM_IC_CaptureCallback>
 80038d4:	e005      	b.n	80038e2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80038d6:	6878      	ldr	r0, [r7, #4]
 80038d8:	f000 fa3d 	bl	8003d56 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038dc:	6878      	ldr	r0, [r7, #4]
 80038de:	f7fd f991 	bl	8000c04 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	2200      	movs	r2, #0
 80038e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	691b      	ldr	r3, [r3, #16]
 80038ee:	f003 0308 	and.w	r3, r3, #8
 80038f2:	2b08      	cmp	r3, #8
 80038f4:	d122      	bne.n	800393c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	68db      	ldr	r3, [r3, #12]
 80038fc:	f003 0308 	and.w	r3, r3, #8
 8003900:	2b08      	cmp	r3, #8
 8003902:	d11b      	bne.n	800393c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f06f 0208 	mvn.w	r2, #8
 800390c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	2204      	movs	r2, #4
 8003912:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	69db      	ldr	r3, [r3, #28]
 800391a:	f003 0303 	and.w	r3, r3, #3
 800391e:	2b00      	cmp	r3, #0
 8003920:	d003      	beq.n	800392a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003922:	6878      	ldr	r0, [r7, #4]
 8003924:	f000 fa21 	bl	8003d6a <HAL_TIM_IC_CaptureCallback>
 8003928:	e005      	b.n	8003936 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800392a:	6878      	ldr	r0, [r7, #4]
 800392c:	f000 fa13 	bl	8003d56 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003930:	6878      	ldr	r0, [r7, #4]
 8003932:	f7fd f967 	bl	8000c04 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	2200      	movs	r2, #0
 800393a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	691b      	ldr	r3, [r3, #16]
 8003942:	f003 0310 	and.w	r3, r3, #16
 8003946:	2b10      	cmp	r3, #16
 8003948:	d122      	bne.n	8003990 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	68db      	ldr	r3, [r3, #12]
 8003950:	f003 0310 	and.w	r3, r3, #16
 8003954:	2b10      	cmp	r3, #16
 8003956:	d11b      	bne.n	8003990 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f06f 0210 	mvn.w	r2, #16
 8003960:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	2208      	movs	r2, #8
 8003966:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	69db      	ldr	r3, [r3, #28]
 800396e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003972:	2b00      	cmp	r3, #0
 8003974:	d003      	beq.n	800397e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003976:	6878      	ldr	r0, [r7, #4]
 8003978:	f000 f9f7 	bl	8003d6a <HAL_TIM_IC_CaptureCallback>
 800397c:	e005      	b.n	800398a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800397e:	6878      	ldr	r0, [r7, #4]
 8003980:	f000 f9e9 	bl	8003d56 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003984:	6878      	ldr	r0, [r7, #4]
 8003986:	f7fd f93d 	bl	8000c04 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	2200      	movs	r2, #0
 800398e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	691b      	ldr	r3, [r3, #16]
 8003996:	f003 0301 	and.w	r3, r3, #1
 800399a:	2b01      	cmp	r3, #1
 800399c:	d10e      	bne.n	80039bc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	68db      	ldr	r3, [r3, #12]
 80039a4:	f003 0301 	and.w	r3, r3, #1
 80039a8:	2b01      	cmp	r3, #1
 80039aa:	d107      	bne.n	80039bc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f06f 0201 	mvn.w	r2, #1
 80039b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80039b6:	6878      	ldr	r0, [r7, #4]
 80039b8:	f000 f9c3 	bl	8003d42 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	691b      	ldr	r3, [r3, #16]
 80039c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039c6:	2b80      	cmp	r3, #128	; 0x80
 80039c8:	d10e      	bne.n	80039e8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	68db      	ldr	r3, [r3, #12]
 80039d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039d4:	2b80      	cmp	r3, #128	; 0x80
 80039d6:	d107      	bne.n	80039e8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80039e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80039e2:	6878      	ldr	r0, [r7, #4]
 80039e4:	f000 fdb0 	bl	8004548 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	691b      	ldr	r3, [r3, #16]
 80039ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039f2:	2b40      	cmp	r3, #64	; 0x40
 80039f4:	d10e      	bne.n	8003a14 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	68db      	ldr	r3, [r3, #12]
 80039fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a00:	2b40      	cmp	r3, #64	; 0x40
 8003a02:	d107      	bne.n	8003a14 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003a0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003a0e:	6878      	ldr	r0, [r7, #4]
 8003a10:	f000 f9bf 	bl	8003d92 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	691b      	ldr	r3, [r3, #16]
 8003a1a:	f003 0320 	and.w	r3, r3, #32
 8003a1e:	2b20      	cmp	r3, #32
 8003a20:	d10e      	bne.n	8003a40 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	68db      	ldr	r3, [r3, #12]
 8003a28:	f003 0320 	and.w	r3, r3, #32
 8003a2c:	2b20      	cmp	r3, #32
 8003a2e:	d107      	bne.n	8003a40 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f06f 0220 	mvn.w	r2, #32
 8003a38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003a3a:	6878      	ldr	r0, [r7, #4]
 8003a3c:	f000 fd7a 	bl	8004534 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003a40:	bf00      	nop
 8003a42:	3708      	adds	r7, #8
 8003a44:	46bd      	mov	sp, r7
 8003a46:	bd80      	pop	{r7, pc}

08003a48 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003a48:	b580      	push	{r7, lr}
 8003a4a:	b084      	sub	sp, #16
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	60f8      	str	r0, [r7, #12]
 8003a50:	60b9      	str	r1, [r7, #8]
 8003a52:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a5a:	2b01      	cmp	r3, #1
 8003a5c:	d101      	bne.n	8003a62 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8003a5e:	2302      	movs	r3, #2
 8003a60:	e0b4      	b.n	8003bcc <HAL_TIM_PWM_ConfigChannel+0x184>
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	2201      	movs	r2, #1
 8003a66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	2202      	movs	r2, #2
 8003a6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	2b0c      	cmp	r3, #12
 8003a76:	f200 809f 	bhi.w	8003bb8 <HAL_TIM_PWM_ConfigChannel+0x170>
 8003a7a:	a201      	add	r2, pc, #4	; (adr r2, 8003a80 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8003a7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a80:	08003ab5 	.word	0x08003ab5
 8003a84:	08003bb9 	.word	0x08003bb9
 8003a88:	08003bb9 	.word	0x08003bb9
 8003a8c:	08003bb9 	.word	0x08003bb9
 8003a90:	08003af5 	.word	0x08003af5
 8003a94:	08003bb9 	.word	0x08003bb9
 8003a98:	08003bb9 	.word	0x08003bb9
 8003a9c:	08003bb9 	.word	0x08003bb9
 8003aa0:	08003b37 	.word	0x08003b37
 8003aa4:	08003bb9 	.word	0x08003bb9
 8003aa8:	08003bb9 	.word	0x08003bb9
 8003aac:	08003bb9 	.word	0x08003bb9
 8003ab0:	08003b77 	.word	0x08003b77
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	68b9      	ldr	r1, [r7, #8]
 8003aba:	4618      	mov	r0, r3
 8003abc:	f000 fa80 	bl	8003fc0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	699a      	ldr	r2, [r3, #24]
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f042 0208 	orr.w	r2, r2, #8
 8003ace:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	699a      	ldr	r2, [r3, #24]
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f022 0204 	bic.w	r2, r2, #4
 8003ade:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	6999      	ldr	r1, [r3, #24]
 8003ae6:	68bb      	ldr	r3, [r7, #8]
 8003ae8:	691a      	ldr	r2, [r3, #16]
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	430a      	orrs	r2, r1
 8003af0:	619a      	str	r2, [r3, #24]
      break;
 8003af2:	e062      	b.n	8003bba <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	68b9      	ldr	r1, [r7, #8]
 8003afa:	4618      	mov	r0, r3
 8003afc:	f000 fac6 	bl	800408c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	699a      	ldr	r2, [r3, #24]
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003b0e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	699a      	ldr	r2, [r3, #24]
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b1e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	6999      	ldr	r1, [r3, #24]
 8003b26:	68bb      	ldr	r3, [r7, #8]
 8003b28:	691b      	ldr	r3, [r3, #16]
 8003b2a:	021a      	lsls	r2, r3, #8
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	430a      	orrs	r2, r1
 8003b32:	619a      	str	r2, [r3, #24]
      break;
 8003b34:	e041      	b.n	8003bba <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	68b9      	ldr	r1, [r7, #8]
 8003b3c:	4618      	mov	r0, r3
 8003b3e:	f000 fb11 	bl	8004164 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	69da      	ldr	r2, [r3, #28]
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f042 0208 	orr.w	r2, r2, #8
 8003b50:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	69da      	ldr	r2, [r3, #28]
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f022 0204 	bic.w	r2, r2, #4
 8003b60:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	69d9      	ldr	r1, [r3, #28]
 8003b68:	68bb      	ldr	r3, [r7, #8]
 8003b6a:	691a      	ldr	r2, [r3, #16]
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	430a      	orrs	r2, r1
 8003b72:	61da      	str	r2, [r3, #28]
      break;
 8003b74:	e021      	b.n	8003bba <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	68b9      	ldr	r1, [r7, #8]
 8003b7c:	4618      	mov	r0, r3
 8003b7e:	f000 fb5b 	bl	8004238 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	69da      	ldr	r2, [r3, #28]
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003b90:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	69da      	ldr	r2, [r3, #28]
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ba0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	69d9      	ldr	r1, [r3, #28]
 8003ba8:	68bb      	ldr	r3, [r7, #8]
 8003baa:	691b      	ldr	r3, [r3, #16]
 8003bac:	021a      	lsls	r2, r3, #8
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	430a      	orrs	r2, r1
 8003bb4:	61da      	str	r2, [r3, #28]
      break;
 8003bb6:	e000      	b.n	8003bba <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8003bb8:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	2201      	movs	r2, #1
 8003bbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003bca:	2300      	movs	r3, #0
}
 8003bcc:	4618      	mov	r0, r3
 8003bce:	3710      	adds	r7, #16
 8003bd0:	46bd      	mov	sp, r7
 8003bd2:	bd80      	pop	{r7, pc}

08003bd4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003bd4:	b580      	push	{r7, lr}
 8003bd6:	b084      	sub	sp, #16
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	6078      	str	r0, [r7, #4]
 8003bdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003be4:	2b01      	cmp	r3, #1
 8003be6:	d101      	bne.n	8003bec <HAL_TIM_ConfigClockSource+0x18>
 8003be8:	2302      	movs	r3, #2
 8003bea:	e0a6      	b.n	8003d3a <HAL_TIM_ConfigClockSource+0x166>
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	2201      	movs	r2, #1
 8003bf0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	2202      	movs	r2, #2
 8003bf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	689b      	ldr	r3, [r3, #8]
 8003c02:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003c0a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003c12:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	68fa      	ldr	r2, [r7, #12]
 8003c1a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003c1c:	683b      	ldr	r3, [r7, #0]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	2b40      	cmp	r3, #64	; 0x40
 8003c22:	d067      	beq.n	8003cf4 <HAL_TIM_ConfigClockSource+0x120>
 8003c24:	2b40      	cmp	r3, #64	; 0x40
 8003c26:	d80b      	bhi.n	8003c40 <HAL_TIM_ConfigClockSource+0x6c>
 8003c28:	2b10      	cmp	r3, #16
 8003c2a:	d073      	beq.n	8003d14 <HAL_TIM_ConfigClockSource+0x140>
 8003c2c:	2b10      	cmp	r3, #16
 8003c2e:	d802      	bhi.n	8003c36 <HAL_TIM_ConfigClockSource+0x62>
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d06f      	beq.n	8003d14 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8003c34:	e078      	b.n	8003d28 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003c36:	2b20      	cmp	r3, #32
 8003c38:	d06c      	beq.n	8003d14 <HAL_TIM_ConfigClockSource+0x140>
 8003c3a:	2b30      	cmp	r3, #48	; 0x30
 8003c3c:	d06a      	beq.n	8003d14 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8003c3e:	e073      	b.n	8003d28 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003c40:	2b70      	cmp	r3, #112	; 0x70
 8003c42:	d00d      	beq.n	8003c60 <HAL_TIM_ConfigClockSource+0x8c>
 8003c44:	2b70      	cmp	r3, #112	; 0x70
 8003c46:	d804      	bhi.n	8003c52 <HAL_TIM_ConfigClockSource+0x7e>
 8003c48:	2b50      	cmp	r3, #80	; 0x50
 8003c4a:	d033      	beq.n	8003cb4 <HAL_TIM_ConfigClockSource+0xe0>
 8003c4c:	2b60      	cmp	r3, #96	; 0x60
 8003c4e:	d041      	beq.n	8003cd4 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8003c50:	e06a      	b.n	8003d28 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003c52:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c56:	d066      	beq.n	8003d26 <HAL_TIM_ConfigClockSource+0x152>
 8003c58:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003c5c:	d017      	beq.n	8003c8e <HAL_TIM_ConfigClockSource+0xba>
      break;
 8003c5e:	e063      	b.n	8003d28 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	6818      	ldr	r0, [r3, #0]
 8003c64:	683b      	ldr	r3, [r7, #0]
 8003c66:	6899      	ldr	r1, [r3, #8]
 8003c68:	683b      	ldr	r3, [r7, #0]
 8003c6a:	685a      	ldr	r2, [r3, #4]
 8003c6c:	683b      	ldr	r3, [r7, #0]
 8003c6e:	68db      	ldr	r3, [r3, #12]
 8003c70:	f000 fbac 	bl	80043cc <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	689b      	ldr	r3, [r3, #8]
 8003c7a:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003c82:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	68fa      	ldr	r2, [r7, #12]
 8003c8a:	609a      	str	r2, [r3, #8]
      break;
 8003c8c:	e04c      	b.n	8003d28 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	6818      	ldr	r0, [r3, #0]
 8003c92:	683b      	ldr	r3, [r7, #0]
 8003c94:	6899      	ldr	r1, [r3, #8]
 8003c96:	683b      	ldr	r3, [r7, #0]
 8003c98:	685a      	ldr	r2, [r3, #4]
 8003c9a:	683b      	ldr	r3, [r7, #0]
 8003c9c:	68db      	ldr	r3, [r3, #12]
 8003c9e:	f000 fb95 	bl	80043cc <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	689a      	ldr	r2, [r3, #8]
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003cb0:	609a      	str	r2, [r3, #8]
      break;
 8003cb2:	e039      	b.n	8003d28 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	6818      	ldr	r0, [r3, #0]
 8003cb8:	683b      	ldr	r3, [r7, #0]
 8003cba:	6859      	ldr	r1, [r3, #4]
 8003cbc:	683b      	ldr	r3, [r7, #0]
 8003cbe:	68db      	ldr	r3, [r3, #12]
 8003cc0:	461a      	mov	r2, r3
 8003cc2:	f000 fb09 	bl	80042d8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	2150      	movs	r1, #80	; 0x50
 8003ccc:	4618      	mov	r0, r3
 8003cce:	f000 fb62 	bl	8004396 <TIM_ITRx_SetConfig>
      break;
 8003cd2:	e029      	b.n	8003d28 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	6818      	ldr	r0, [r3, #0]
 8003cd8:	683b      	ldr	r3, [r7, #0]
 8003cda:	6859      	ldr	r1, [r3, #4]
 8003cdc:	683b      	ldr	r3, [r7, #0]
 8003cde:	68db      	ldr	r3, [r3, #12]
 8003ce0:	461a      	mov	r2, r3
 8003ce2:	f000 fb28 	bl	8004336 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	2160      	movs	r1, #96	; 0x60
 8003cec:	4618      	mov	r0, r3
 8003cee:	f000 fb52 	bl	8004396 <TIM_ITRx_SetConfig>
      break;
 8003cf2:	e019      	b.n	8003d28 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	6818      	ldr	r0, [r3, #0]
 8003cf8:	683b      	ldr	r3, [r7, #0]
 8003cfa:	6859      	ldr	r1, [r3, #4]
 8003cfc:	683b      	ldr	r3, [r7, #0]
 8003cfe:	68db      	ldr	r3, [r3, #12]
 8003d00:	461a      	mov	r2, r3
 8003d02:	f000 fae9 	bl	80042d8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	2140      	movs	r1, #64	; 0x40
 8003d0c:	4618      	mov	r0, r3
 8003d0e:	f000 fb42 	bl	8004396 <TIM_ITRx_SetConfig>
      break;
 8003d12:	e009      	b.n	8003d28 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681a      	ldr	r2, [r3, #0]
 8003d18:	683b      	ldr	r3, [r7, #0]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	4619      	mov	r1, r3
 8003d1e:	4610      	mov	r0, r2
 8003d20:	f000 fb39 	bl	8004396 <TIM_ITRx_SetConfig>
      break;
 8003d24:	e000      	b.n	8003d28 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8003d26:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	2201      	movs	r2, #1
 8003d2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	2200      	movs	r2, #0
 8003d34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003d38:	2300      	movs	r3, #0
}
 8003d3a:	4618      	mov	r0, r3
 8003d3c:	3710      	adds	r7, #16
 8003d3e:	46bd      	mov	sp, r7
 8003d40:	bd80      	pop	{r7, pc}

08003d42 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003d42:	b480      	push	{r7}
 8003d44:	b083      	sub	sp, #12
 8003d46:	af00      	add	r7, sp, #0
 8003d48:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003d4a:	bf00      	nop
 8003d4c:	370c      	adds	r7, #12
 8003d4e:	46bd      	mov	sp, r7
 8003d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d54:	4770      	bx	lr

08003d56 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003d56:	b480      	push	{r7}
 8003d58:	b083      	sub	sp, #12
 8003d5a:	af00      	add	r7, sp, #0
 8003d5c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003d5e:	bf00      	nop
 8003d60:	370c      	adds	r7, #12
 8003d62:	46bd      	mov	sp, r7
 8003d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d68:	4770      	bx	lr

08003d6a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003d6a:	b480      	push	{r7}
 8003d6c:	b083      	sub	sp, #12
 8003d6e:	af00      	add	r7, sp, #0
 8003d70:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003d72:	bf00      	nop
 8003d74:	370c      	adds	r7, #12
 8003d76:	46bd      	mov	sp, r7
 8003d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d7c:	4770      	bx	lr

08003d7e <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8003d7e:	b480      	push	{r7}
 8003d80:	b083      	sub	sp, #12
 8003d82:	af00      	add	r7, sp, #0
 8003d84:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8003d86:	bf00      	nop
 8003d88:	370c      	adds	r7, #12
 8003d8a:	46bd      	mov	sp, r7
 8003d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d90:	4770      	bx	lr

08003d92 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003d92:	b480      	push	{r7}
 8003d94:	b083      	sub	sp, #12
 8003d96:	af00      	add	r7, sp, #0
 8003d98:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003d9a:	bf00      	nop
 8003d9c:	370c      	adds	r7, #12
 8003d9e:	46bd      	mov	sp, r7
 8003da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da4:	4770      	bx	lr

08003da6 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8003da6:	b480      	push	{r7}
 8003da8:	b083      	sub	sp, #12
 8003daa:	af00      	add	r7, sp, #0
 8003dac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8003dae:	bf00      	nop
 8003db0:	370c      	adds	r7, #12
 8003db2:	46bd      	mov	sp, r7
 8003db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db8:	4770      	bx	lr

08003dba <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8003dba:	b580      	push	{r7, lr}
 8003dbc:	b084      	sub	sp, #16
 8003dbe:	af00      	add	r7, sp, #0
 8003dc0:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dc6:	60fb      	str	r3, [r7, #12]

  htim->State = HAL_TIM_STATE_READY;
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	2201      	movs	r2, #1
 8003dcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8003dd0:	68f8      	ldr	r0, [r7, #12]
 8003dd2:	f7ff ffe8 	bl	8003da6 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
}
 8003dd6:	bf00      	nop
 8003dd8:	3710      	adds	r7, #16
 8003dda:	46bd      	mov	sp, r7
 8003ddc:	bd80      	pop	{r7, pc}

08003dde <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8003dde:	b580      	push	{r7, lr}
 8003de0:	b084      	sub	sp, #16
 8003de2:	af00      	add	r7, sp, #0
 8003de4:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dea:	60fb      	str	r3, [r7, #12]

  htim->State = HAL_TIM_STATE_READY;
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	2201      	movs	r2, #1
 8003df0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003df8:	687a      	ldr	r2, [r7, #4]
 8003dfa:	429a      	cmp	r2, r3
 8003dfc:	d103      	bne.n	8003e06 <TIM_DMADelayPulseCplt+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	2201      	movs	r2, #1
 8003e02:	771a      	strb	r2, [r3, #28]
 8003e04:	e019      	b.n	8003e3a <TIM_DMADelayPulseCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e0a:	687a      	ldr	r2, [r7, #4]
 8003e0c:	429a      	cmp	r2, r3
 8003e0e:	d103      	bne.n	8003e18 <TIM_DMADelayPulseCplt+0x3a>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	2202      	movs	r2, #2
 8003e14:	771a      	strb	r2, [r3, #28]
 8003e16:	e010      	b.n	8003e3a <TIM_DMADelayPulseCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e1c:	687a      	ldr	r2, [r7, #4]
 8003e1e:	429a      	cmp	r2, r3
 8003e20:	d103      	bne.n	8003e2a <TIM_DMADelayPulseCplt+0x4c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	2204      	movs	r2, #4
 8003e26:	771a      	strb	r2, [r3, #28]
 8003e28:	e007      	b.n	8003e3a <TIM_DMADelayPulseCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e2e:	687a      	ldr	r2, [r7, #4]
 8003e30:	429a      	cmp	r2, r3
 8003e32:	d102      	bne.n	8003e3a <TIM_DMADelayPulseCplt+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	2208      	movs	r2, #8
 8003e38:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e3a:	68f8      	ldr	r0, [r7, #12]
 8003e3c:	f7fc fee2 	bl	8000c04 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	2200      	movs	r2, #0
 8003e44:	771a      	strb	r2, [r3, #28]
}
 8003e46:	bf00      	nop
 8003e48:	3710      	adds	r7, #16
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	bd80      	pop	{r7, pc}

08003e4e <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003e4e:	b580      	push	{r7, lr}
 8003e50:	b084      	sub	sp, #16
 8003e52:	af00      	add	r7, sp, #0
 8003e54:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e5a:	60fb      	str	r3, [r7, #12]

  htim->State = HAL_TIM_STATE_READY;
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	2201      	movs	r2, #1
 8003e60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e68:	687a      	ldr	r2, [r7, #4]
 8003e6a:	429a      	cmp	r2, r3
 8003e6c:	d103      	bne.n	8003e76 <TIM_DMADelayPulseHalfCplt+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	2201      	movs	r2, #1
 8003e72:	771a      	strb	r2, [r3, #28]
 8003e74:	e019      	b.n	8003eaa <TIM_DMADelayPulseHalfCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e7a:	687a      	ldr	r2, [r7, #4]
 8003e7c:	429a      	cmp	r2, r3
 8003e7e:	d103      	bne.n	8003e88 <TIM_DMADelayPulseHalfCplt+0x3a>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	2202      	movs	r2, #2
 8003e84:	771a      	strb	r2, [r3, #28]
 8003e86:	e010      	b.n	8003eaa <TIM_DMADelayPulseHalfCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e8c:	687a      	ldr	r2, [r7, #4]
 8003e8e:	429a      	cmp	r2, r3
 8003e90:	d103      	bne.n	8003e9a <TIM_DMADelayPulseHalfCplt+0x4c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	2204      	movs	r2, #4
 8003e96:	771a      	strb	r2, [r3, #28]
 8003e98:	e007      	b.n	8003eaa <TIM_DMADelayPulseHalfCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e9e:	687a      	ldr	r2, [r7, #4]
 8003ea0:	429a      	cmp	r2, r3
 8003ea2:	d102      	bne.n	8003eaa <TIM_DMADelayPulseHalfCplt+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	2208      	movs	r2, #8
 8003ea8:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8003eaa:	68f8      	ldr	r0, [r7, #12]
 8003eac:	f7ff ff67 	bl	8003d7e <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	2200      	movs	r2, #0
 8003eb4:	771a      	strb	r2, [r3, #28]
}
 8003eb6:	bf00      	nop
 8003eb8:	3710      	adds	r7, #16
 8003eba:	46bd      	mov	sp, r7
 8003ebc:	bd80      	pop	{r7, pc}
	...

08003ec0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003ec0:	b480      	push	{r7}
 8003ec2:	b085      	sub	sp, #20
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	6078      	str	r0, [r7, #4]
 8003ec8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	4a34      	ldr	r2, [pc, #208]	; (8003fa4 <TIM_Base_SetConfig+0xe4>)
 8003ed4:	4293      	cmp	r3, r2
 8003ed6:	d00f      	beq.n	8003ef8 <TIM_Base_SetConfig+0x38>
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ede:	d00b      	beq.n	8003ef8 <TIM_Base_SetConfig+0x38>
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	4a31      	ldr	r2, [pc, #196]	; (8003fa8 <TIM_Base_SetConfig+0xe8>)
 8003ee4:	4293      	cmp	r3, r2
 8003ee6:	d007      	beq.n	8003ef8 <TIM_Base_SetConfig+0x38>
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	4a30      	ldr	r2, [pc, #192]	; (8003fac <TIM_Base_SetConfig+0xec>)
 8003eec:	4293      	cmp	r3, r2
 8003eee:	d003      	beq.n	8003ef8 <TIM_Base_SetConfig+0x38>
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	4a2f      	ldr	r2, [pc, #188]	; (8003fb0 <TIM_Base_SetConfig+0xf0>)
 8003ef4:	4293      	cmp	r3, r2
 8003ef6:	d108      	bne.n	8003f0a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003efe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003f00:	683b      	ldr	r3, [r7, #0]
 8003f02:	685b      	ldr	r3, [r3, #4]
 8003f04:	68fa      	ldr	r2, [r7, #12]
 8003f06:	4313      	orrs	r3, r2
 8003f08:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	4a25      	ldr	r2, [pc, #148]	; (8003fa4 <TIM_Base_SetConfig+0xe4>)
 8003f0e:	4293      	cmp	r3, r2
 8003f10:	d01b      	beq.n	8003f4a <TIM_Base_SetConfig+0x8a>
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f18:	d017      	beq.n	8003f4a <TIM_Base_SetConfig+0x8a>
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	4a22      	ldr	r2, [pc, #136]	; (8003fa8 <TIM_Base_SetConfig+0xe8>)
 8003f1e:	4293      	cmp	r3, r2
 8003f20:	d013      	beq.n	8003f4a <TIM_Base_SetConfig+0x8a>
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	4a21      	ldr	r2, [pc, #132]	; (8003fac <TIM_Base_SetConfig+0xec>)
 8003f26:	4293      	cmp	r3, r2
 8003f28:	d00f      	beq.n	8003f4a <TIM_Base_SetConfig+0x8a>
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	4a20      	ldr	r2, [pc, #128]	; (8003fb0 <TIM_Base_SetConfig+0xf0>)
 8003f2e:	4293      	cmp	r3, r2
 8003f30:	d00b      	beq.n	8003f4a <TIM_Base_SetConfig+0x8a>
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	4a1f      	ldr	r2, [pc, #124]	; (8003fb4 <TIM_Base_SetConfig+0xf4>)
 8003f36:	4293      	cmp	r3, r2
 8003f38:	d007      	beq.n	8003f4a <TIM_Base_SetConfig+0x8a>
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	4a1e      	ldr	r2, [pc, #120]	; (8003fb8 <TIM_Base_SetConfig+0xf8>)
 8003f3e:	4293      	cmp	r3, r2
 8003f40:	d003      	beq.n	8003f4a <TIM_Base_SetConfig+0x8a>
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	4a1d      	ldr	r2, [pc, #116]	; (8003fbc <TIM_Base_SetConfig+0xfc>)
 8003f46:	4293      	cmp	r3, r2
 8003f48:	d108      	bne.n	8003f5c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f50:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003f52:	683b      	ldr	r3, [r7, #0]
 8003f54:	68db      	ldr	r3, [r3, #12]
 8003f56:	68fa      	ldr	r2, [r7, #12]
 8003f58:	4313      	orrs	r3, r2
 8003f5a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003f62:	683b      	ldr	r3, [r7, #0]
 8003f64:	695b      	ldr	r3, [r3, #20]
 8003f66:	4313      	orrs	r3, r2
 8003f68:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	68fa      	ldr	r2, [r7, #12]
 8003f6e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003f70:	683b      	ldr	r3, [r7, #0]
 8003f72:	689a      	ldr	r2, [r3, #8]
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003f78:	683b      	ldr	r3, [r7, #0]
 8003f7a:	681a      	ldr	r2, [r3, #0]
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	4a08      	ldr	r2, [pc, #32]	; (8003fa4 <TIM_Base_SetConfig+0xe4>)
 8003f84:	4293      	cmp	r3, r2
 8003f86:	d103      	bne.n	8003f90 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003f88:	683b      	ldr	r3, [r7, #0]
 8003f8a:	691a      	ldr	r2, [r3, #16]
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	2201      	movs	r2, #1
 8003f94:	615a      	str	r2, [r3, #20]
}
 8003f96:	bf00      	nop
 8003f98:	3714      	adds	r7, #20
 8003f9a:	46bd      	mov	sp, r7
 8003f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa0:	4770      	bx	lr
 8003fa2:	bf00      	nop
 8003fa4:	40010000 	.word	0x40010000
 8003fa8:	40000400 	.word	0x40000400
 8003fac:	40000800 	.word	0x40000800
 8003fb0:	40000c00 	.word	0x40000c00
 8003fb4:	40014000 	.word	0x40014000
 8003fb8:	40014400 	.word	0x40014400
 8003fbc:	40014800 	.word	0x40014800

08003fc0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003fc0:	b480      	push	{r7}
 8003fc2:	b087      	sub	sp, #28
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	6078      	str	r0, [r7, #4]
 8003fc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	6a1b      	ldr	r3, [r3, #32]
 8003fce:	f023 0201 	bic.w	r2, r3, #1
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	6a1b      	ldr	r3, [r3, #32]
 8003fda:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	685b      	ldr	r3, [r3, #4]
 8003fe0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	699b      	ldr	r3, [r3, #24]
 8003fe6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003fee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	f023 0303 	bic.w	r3, r3, #3
 8003ff6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003ff8:	683b      	ldr	r3, [r7, #0]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	68fa      	ldr	r2, [r7, #12]
 8003ffe:	4313      	orrs	r3, r2
 8004000:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004002:	697b      	ldr	r3, [r7, #20]
 8004004:	f023 0302 	bic.w	r3, r3, #2
 8004008:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800400a:	683b      	ldr	r3, [r7, #0]
 800400c:	689b      	ldr	r3, [r3, #8]
 800400e:	697a      	ldr	r2, [r7, #20]
 8004010:	4313      	orrs	r3, r2
 8004012:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	4a1c      	ldr	r2, [pc, #112]	; (8004088 <TIM_OC1_SetConfig+0xc8>)
 8004018:	4293      	cmp	r3, r2
 800401a:	d10c      	bne.n	8004036 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800401c:	697b      	ldr	r3, [r7, #20]
 800401e:	f023 0308 	bic.w	r3, r3, #8
 8004022:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004024:	683b      	ldr	r3, [r7, #0]
 8004026:	68db      	ldr	r3, [r3, #12]
 8004028:	697a      	ldr	r2, [r7, #20]
 800402a:	4313      	orrs	r3, r2
 800402c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800402e:	697b      	ldr	r3, [r7, #20]
 8004030:	f023 0304 	bic.w	r3, r3, #4
 8004034:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	4a13      	ldr	r2, [pc, #76]	; (8004088 <TIM_OC1_SetConfig+0xc8>)
 800403a:	4293      	cmp	r3, r2
 800403c:	d111      	bne.n	8004062 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800403e:	693b      	ldr	r3, [r7, #16]
 8004040:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004044:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004046:	693b      	ldr	r3, [r7, #16]
 8004048:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800404c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800404e:	683b      	ldr	r3, [r7, #0]
 8004050:	695b      	ldr	r3, [r3, #20]
 8004052:	693a      	ldr	r2, [r7, #16]
 8004054:	4313      	orrs	r3, r2
 8004056:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004058:	683b      	ldr	r3, [r7, #0]
 800405a:	699b      	ldr	r3, [r3, #24]
 800405c:	693a      	ldr	r2, [r7, #16]
 800405e:	4313      	orrs	r3, r2
 8004060:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	693a      	ldr	r2, [r7, #16]
 8004066:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	68fa      	ldr	r2, [r7, #12]
 800406c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800406e:	683b      	ldr	r3, [r7, #0]
 8004070:	685a      	ldr	r2, [r3, #4]
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	697a      	ldr	r2, [r7, #20]
 800407a:	621a      	str	r2, [r3, #32]
}
 800407c:	bf00      	nop
 800407e:	371c      	adds	r7, #28
 8004080:	46bd      	mov	sp, r7
 8004082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004086:	4770      	bx	lr
 8004088:	40010000 	.word	0x40010000

0800408c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800408c:	b480      	push	{r7}
 800408e:	b087      	sub	sp, #28
 8004090:	af00      	add	r7, sp, #0
 8004092:	6078      	str	r0, [r7, #4]
 8004094:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	6a1b      	ldr	r3, [r3, #32]
 800409a:	f023 0210 	bic.w	r2, r3, #16
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	6a1b      	ldr	r3, [r3, #32]
 80040a6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	685b      	ldr	r3, [r3, #4]
 80040ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	699b      	ldr	r3, [r3, #24]
 80040b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80040ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80040c2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80040c4:	683b      	ldr	r3, [r7, #0]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	021b      	lsls	r3, r3, #8
 80040ca:	68fa      	ldr	r2, [r7, #12]
 80040cc:	4313      	orrs	r3, r2
 80040ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80040d0:	697b      	ldr	r3, [r7, #20]
 80040d2:	f023 0320 	bic.w	r3, r3, #32
 80040d6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80040d8:	683b      	ldr	r3, [r7, #0]
 80040da:	689b      	ldr	r3, [r3, #8]
 80040dc:	011b      	lsls	r3, r3, #4
 80040de:	697a      	ldr	r2, [r7, #20]
 80040e0:	4313      	orrs	r3, r2
 80040e2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	4a1e      	ldr	r2, [pc, #120]	; (8004160 <TIM_OC2_SetConfig+0xd4>)
 80040e8:	4293      	cmp	r3, r2
 80040ea:	d10d      	bne.n	8004108 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80040ec:	697b      	ldr	r3, [r7, #20]
 80040ee:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80040f2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80040f4:	683b      	ldr	r3, [r7, #0]
 80040f6:	68db      	ldr	r3, [r3, #12]
 80040f8:	011b      	lsls	r3, r3, #4
 80040fa:	697a      	ldr	r2, [r7, #20]
 80040fc:	4313      	orrs	r3, r2
 80040fe:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004100:	697b      	ldr	r3, [r7, #20]
 8004102:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004106:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	4a15      	ldr	r2, [pc, #84]	; (8004160 <TIM_OC2_SetConfig+0xd4>)
 800410c:	4293      	cmp	r3, r2
 800410e:	d113      	bne.n	8004138 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004110:	693b      	ldr	r3, [r7, #16]
 8004112:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004116:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004118:	693b      	ldr	r3, [r7, #16]
 800411a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800411e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004120:	683b      	ldr	r3, [r7, #0]
 8004122:	695b      	ldr	r3, [r3, #20]
 8004124:	009b      	lsls	r3, r3, #2
 8004126:	693a      	ldr	r2, [r7, #16]
 8004128:	4313      	orrs	r3, r2
 800412a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800412c:	683b      	ldr	r3, [r7, #0]
 800412e:	699b      	ldr	r3, [r3, #24]
 8004130:	009b      	lsls	r3, r3, #2
 8004132:	693a      	ldr	r2, [r7, #16]
 8004134:	4313      	orrs	r3, r2
 8004136:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	693a      	ldr	r2, [r7, #16]
 800413c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	68fa      	ldr	r2, [r7, #12]
 8004142:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004144:	683b      	ldr	r3, [r7, #0]
 8004146:	685a      	ldr	r2, [r3, #4]
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	697a      	ldr	r2, [r7, #20]
 8004150:	621a      	str	r2, [r3, #32]
}
 8004152:	bf00      	nop
 8004154:	371c      	adds	r7, #28
 8004156:	46bd      	mov	sp, r7
 8004158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800415c:	4770      	bx	lr
 800415e:	bf00      	nop
 8004160:	40010000 	.word	0x40010000

08004164 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004164:	b480      	push	{r7}
 8004166:	b087      	sub	sp, #28
 8004168:	af00      	add	r7, sp, #0
 800416a:	6078      	str	r0, [r7, #4]
 800416c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	6a1b      	ldr	r3, [r3, #32]
 8004172:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	6a1b      	ldr	r3, [r3, #32]
 800417e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	685b      	ldr	r3, [r3, #4]
 8004184:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	69db      	ldr	r3, [r3, #28]
 800418a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004192:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	f023 0303 	bic.w	r3, r3, #3
 800419a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800419c:	683b      	ldr	r3, [r7, #0]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	68fa      	ldr	r2, [r7, #12]
 80041a2:	4313      	orrs	r3, r2
 80041a4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80041a6:	697b      	ldr	r3, [r7, #20]
 80041a8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80041ac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80041ae:	683b      	ldr	r3, [r7, #0]
 80041b0:	689b      	ldr	r3, [r3, #8]
 80041b2:	021b      	lsls	r3, r3, #8
 80041b4:	697a      	ldr	r2, [r7, #20]
 80041b6:	4313      	orrs	r3, r2
 80041b8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	4a1d      	ldr	r2, [pc, #116]	; (8004234 <TIM_OC3_SetConfig+0xd0>)
 80041be:	4293      	cmp	r3, r2
 80041c0:	d10d      	bne.n	80041de <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80041c2:	697b      	ldr	r3, [r7, #20]
 80041c4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80041c8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80041ca:	683b      	ldr	r3, [r7, #0]
 80041cc:	68db      	ldr	r3, [r3, #12]
 80041ce:	021b      	lsls	r3, r3, #8
 80041d0:	697a      	ldr	r2, [r7, #20]
 80041d2:	4313      	orrs	r3, r2
 80041d4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80041d6:	697b      	ldr	r3, [r7, #20]
 80041d8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80041dc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	4a14      	ldr	r2, [pc, #80]	; (8004234 <TIM_OC3_SetConfig+0xd0>)
 80041e2:	4293      	cmp	r3, r2
 80041e4:	d113      	bne.n	800420e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80041e6:	693b      	ldr	r3, [r7, #16]
 80041e8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80041ec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80041ee:	693b      	ldr	r3, [r7, #16]
 80041f0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80041f4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80041f6:	683b      	ldr	r3, [r7, #0]
 80041f8:	695b      	ldr	r3, [r3, #20]
 80041fa:	011b      	lsls	r3, r3, #4
 80041fc:	693a      	ldr	r2, [r7, #16]
 80041fe:	4313      	orrs	r3, r2
 8004200:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004202:	683b      	ldr	r3, [r7, #0]
 8004204:	699b      	ldr	r3, [r3, #24]
 8004206:	011b      	lsls	r3, r3, #4
 8004208:	693a      	ldr	r2, [r7, #16]
 800420a:	4313      	orrs	r3, r2
 800420c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	693a      	ldr	r2, [r7, #16]
 8004212:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	68fa      	ldr	r2, [r7, #12]
 8004218:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800421a:	683b      	ldr	r3, [r7, #0]
 800421c:	685a      	ldr	r2, [r3, #4]
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	697a      	ldr	r2, [r7, #20]
 8004226:	621a      	str	r2, [r3, #32]
}
 8004228:	bf00      	nop
 800422a:	371c      	adds	r7, #28
 800422c:	46bd      	mov	sp, r7
 800422e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004232:	4770      	bx	lr
 8004234:	40010000 	.word	0x40010000

08004238 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004238:	b480      	push	{r7}
 800423a:	b087      	sub	sp, #28
 800423c:	af00      	add	r7, sp, #0
 800423e:	6078      	str	r0, [r7, #4]
 8004240:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	6a1b      	ldr	r3, [r3, #32]
 8004246:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	6a1b      	ldr	r3, [r3, #32]
 8004252:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	685b      	ldr	r3, [r3, #4]
 8004258:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	69db      	ldr	r3, [r3, #28]
 800425e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004266:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800426e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004270:	683b      	ldr	r3, [r7, #0]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	021b      	lsls	r3, r3, #8
 8004276:	68fa      	ldr	r2, [r7, #12]
 8004278:	4313      	orrs	r3, r2
 800427a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800427c:	693b      	ldr	r3, [r7, #16]
 800427e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004282:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004284:	683b      	ldr	r3, [r7, #0]
 8004286:	689b      	ldr	r3, [r3, #8]
 8004288:	031b      	lsls	r3, r3, #12
 800428a:	693a      	ldr	r2, [r7, #16]
 800428c:	4313      	orrs	r3, r2
 800428e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	4a10      	ldr	r2, [pc, #64]	; (80042d4 <TIM_OC4_SetConfig+0x9c>)
 8004294:	4293      	cmp	r3, r2
 8004296:	d109      	bne.n	80042ac <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004298:	697b      	ldr	r3, [r7, #20]
 800429a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800429e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80042a0:	683b      	ldr	r3, [r7, #0]
 80042a2:	695b      	ldr	r3, [r3, #20]
 80042a4:	019b      	lsls	r3, r3, #6
 80042a6:	697a      	ldr	r2, [r7, #20]
 80042a8:	4313      	orrs	r3, r2
 80042aa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	697a      	ldr	r2, [r7, #20]
 80042b0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	68fa      	ldr	r2, [r7, #12]
 80042b6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80042b8:	683b      	ldr	r3, [r7, #0]
 80042ba:	685a      	ldr	r2, [r3, #4]
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	693a      	ldr	r2, [r7, #16]
 80042c4:	621a      	str	r2, [r3, #32]
}
 80042c6:	bf00      	nop
 80042c8:	371c      	adds	r7, #28
 80042ca:	46bd      	mov	sp, r7
 80042cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d0:	4770      	bx	lr
 80042d2:	bf00      	nop
 80042d4:	40010000 	.word	0x40010000

080042d8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80042d8:	b480      	push	{r7}
 80042da:	b087      	sub	sp, #28
 80042dc:	af00      	add	r7, sp, #0
 80042de:	60f8      	str	r0, [r7, #12]
 80042e0:	60b9      	str	r1, [r7, #8]
 80042e2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	6a1b      	ldr	r3, [r3, #32]
 80042e8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	6a1b      	ldr	r3, [r3, #32]
 80042ee:	f023 0201 	bic.w	r2, r3, #1
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	699b      	ldr	r3, [r3, #24]
 80042fa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80042fc:	693b      	ldr	r3, [r7, #16]
 80042fe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004302:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	011b      	lsls	r3, r3, #4
 8004308:	693a      	ldr	r2, [r7, #16]
 800430a:	4313      	orrs	r3, r2
 800430c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800430e:	697b      	ldr	r3, [r7, #20]
 8004310:	f023 030a 	bic.w	r3, r3, #10
 8004314:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004316:	697a      	ldr	r2, [r7, #20]
 8004318:	68bb      	ldr	r3, [r7, #8]
 800431a:	4313      	orrs	r3, r2
 800431c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	693a      	ldr	r2, [r7, #16]
 8004322:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	697a      	ldr	r2, [r7, #20]
 8004328:	621a      	str	r2, [r3, #32]
}
 800432a:	bf00      	nop
 800432c:	371c      	adds	r7, #28
 800432e:	46bd      	mov	sp, r7
 8004330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004334:	4770      	bx	lr

08004336 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004336:	b480      	push	{r7}
 8004338:	b087      	sub	sp, #28
 800433a:	af00      	add	r7, sp, #0
 800433c:	60f8      	str	r0, [r7, #12]
 800433e:	60b9      	str	r1, [r7, #8]
 8004340:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	6a1b      	ldr	r3, [r3, #32]
 8004346:	f023 0210 	bic.w	r2, r3, #16
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	699b      	ldr	r3, [r3, #24]
 8004352:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	6a1b      	ldr	r3, [r3, #32]
 8004358:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800435a:	697b      	ldr	r3, [r7, #20]
 800435c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004360:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	031b      	lsls	r3, r3, #12
 8004366:	697a      	ldr	r2, [r7, #20]
 8004368:	4313      	orrs	r3, r2
 800436a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800436c:	693b      	ldr	r3, [r7, #16]
 800436e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004372:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004374:	68bb      	ldr	r3, [r7, #8]
 8004376:	011b      	lsls	r3, r3, #4
 8004378:	693a      	ldr	r2, [r7, #16]
 800437a:	4313      	orrs	r3, r2
 800437c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	697a      	ldr	r2, [r7, #20]
 8004382:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	693a      	ldr	r2, [r7, #16]
 8004388:	621a      	str	r2, [r3, #32]
}
 800438a:	bf00      	nop
 800438c:	371c      	adds	r7, #28
 800438e:	46bd      	mov	sp, r7
 8004390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004394:	4770      	bx	lr

08004396 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004396:	b480      	push	{r7}
 8004398:	b085      	sub	sp, #20
 800439a:	af00      	add	r7, sp, #0
 800439c:	6078      	str	r0, [r7, #4]
 800439e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	689b      	ldr	r3, [r3, #8]
 80043a4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043ac:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80043ae:	683a      	ldr	r2, [r7, #0]
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	4313      	orrs	r3, r2
 80043b4:	f043 0307 	orr.w	r3, r3, #7
 80043b8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	68fa      	ldr	r2, [r7, #12]
 80043be:	609a      	str	r2, [r3, #8]
}
 80043c0:	bf00      	nop
 80043c2:	3714      	adds	r7, #20
 80043c4:	46bd      	mov	sp, r7
 80043c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ca:	4770      	bx	lr

080043cc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80043cc:	b480      	push	{r7}
 80043ce:	b087      	sub	sp, #28
 80043d0:	af00      	add	r7, sp, #0
 80043d2:	60f8      	str	r0, [r7, #12]
 80043d4:	60b9      	str	r1, [r7, #8]
 80043d6:	607a      	str	r2, [r7, #4]
 80043d8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	689b      	ldr	r3, [r3, #8]
 80043de:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80043e0:	697b      	ldr	r3, [r7, #20]
 80043e2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80043e6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80043e8:	683b      	ldr	r3, [r7, #0]
 80043ea:	021a      	lsls	r2, r3, #8
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	431a      	orrs	r2, r3
 80043f0:	68bb      	ldr	r3, [r7, #8]
 80043f2:	4313      	orrs	r3, r2
 80043f4:	697a      	ldr	r2, [r7, #20]
 80043f6:	4313      	orrs	r3, r2
 80043f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	697a      	ldr	r2, [r7, #20]
 80043fe:	609a      	str	r2, [r3, #8]
}
 8004400:	bf00      	nop
 8004402:	371c      	adds	r7, #28
 8004404:	46bd      	mov	sp, r7
 8004406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800440a:	4770      	bx	lr

0800440c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800440c:	b480      	push	{r7}
 800440e:	b087      	sub	sp, #28
 8004410:	af00      	add	r7, sp, #0
 8004412:	60f8      	str	r0, [r7, #12]
 8004414:	60b9      	str	r1, [r7, #8]
 8004416:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004418:	68bb      	ldr	r3, [r7, #8]
 800441a:	f003 031f 	and.w	r3, r3, #31
 800441e:	2201      	movs	r2, #1
 8004420:	fa02 f303 	lsl.w	r3, r2, r3
 8004424:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	6a1a      	ldr	r2, [r3, #32]
 800442a:	697b      	ldr	r3, [r7, #20]
 800442c:	43db      	mvns	r3, r3
 800442e:	401a      	ands	r2, r3
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	6a1a      	ldr	r2, [r3, #32]
 8004438:	68bb      	ldr	r3, [r7, #8]
 800443a:	f003 031f 	and.w	r3, r3, #31
 800443e:	6879      	ldr	r1, [r7, #4]
 8004440:	fa01 f303 	lsl.w	r3, r1, r3
 8004444:	431a      	orrs	r2, r3
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	621a      	str	r2, [r3, #32]
}
 800444a:	bf00      	nop
 800444c:	371c      	adds	r7, #28
 800444e:	46bd      	mov	sp, r7
 8004450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004454:	4770      	bx	lr
	...

08004458 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004458:	b480      	push	{r7}
 800445a:	b085      	sub	sp, #20
 800445c:	af00      	add	r7, sp, #0
 800445e:	6078      	str	r0, [r7, #4]
 8004460:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004468:	2b01      	cmp	r3, #1
 800446a:	d101      	bne.n	8004470 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800446c:	2302      	movs	r3, #2
 800446e:	e050      	b.n	8004512 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	2201      	movs	r2, #1
 8004474:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	2202      	movs	r2, #2
 800447c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	685b      	ldr	r3, [r3, #4]
 8004486:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	689b      	ldr	r3, [r3, #8]
 800448e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004496:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004498:	683b      	ldr	r3, [r7, #0]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	68fa      	ldr	r2, [r7, #12]
 800449e:	4313      	orrs	r3, r2
 80044a0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	68fa      	ldr	r2, [r7, #12]
 80044a8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	4a1c      	ldr	r2, [pc, #112]	; (8004520 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80044b0:	4293      	cmp	r3, r2
 80044b2:	d018      	beq.n	80044e6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044bc:	d013      	beq.n	80044e6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	4a18      	ldr	r2, [pc, #96]	; (8004524 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80044c4:	4293      	cmp	r3, r2
 80044c6:	d00e      	beq.n	80044e6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	4a16      	ldr	r2, [pc, #88]	; (8004528 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80044ce:	4293      	cmp	r3, r2
 80044d0:	d009      	beq.n	80044e6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	4a15      	ldr	r2, [pc, #84]	; (800452c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80044d8:	4293      	cmp	r3, r2
 80044da:	d004      	beq.n	80044e6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	4a13      	ldr	r2, [pc, #76]	; (8004530 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80044e2:	4293      	cmp	r3, r2
 80044e4:	d10c      	bne.n	8004500 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80044e6:	68bb      	ldr	r3, [r7, #8]
 80044e8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80044ec:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80044ee:	683b      	ldr	r3, [r7, #0]
 80044f0:	685b      	ldr	r3, [r3, #4]
 80044f2:	68ba      	ldr	r2, [r7, #8]
 80044f4:	4313      	orrs	r3, r2
 80044f6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	68ba      	ldr	r2, [r7, #8]
 80044fe:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	2201      	movs	r2, #1
 8004504:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	2200      	movs	r2, #0
 800450c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004510:	2300      	movs	r3, #0
}
 8004512:	4618      	mov	r0, r3
 8004514:	3714      	adds	r7, #20
 8004516:	46bd      	mov	sp, r7
 8004518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800451c:	4770      	bx	lr
 800451e:	bf00      	nop
 8004520:	40010000 	.word	0x40010000
 8004524:	40000400 	.word	0x40000400
 8004528:	40000800 	.word	0x40000800
 800452c:	40000c00 	.word	0x40000c00
 8004530:	40014000 	.word	0x40014000

08004534 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004534:	b480      	push	{r7}
 8004536:	b083      	sub	sp, #12
 8004538:	af00      	add	r7, sp, #0
 800453a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800453c:	bf00      	nop
 800453e:	370c      	adds	r7, #12
 8004540:	46bd      	mov	sp, r7
 8004542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004546:	4770      	bx	lr

08004548 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004548:	b480      	push	{r7}
 800454a:	b083      	sub	sp, #12
 800454c:	af00      	add	r7, sp, #0
 800454e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004550:	bf00      	nop
 8004552:	370c      	adds	r7, #12
 8004554:	46bd      	mov	sp, r7
 8004556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800455a:	4770      	bx	lr

0800455c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800455c:	b580      	push	{r7, lr}
 800455e:	b082      	sub	sp, #8
 8004560:	af00      	add	r7, sp, #0
 8004562:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	2b00      	cmp	r3, #0
 8004568:	d101      	bne.n	800456e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800456a:	2301      	movs	r3, #1
 800456c:	e03f      	b.n	80045ee <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004574:	b2db      	uxtb	r3, r3
 8004576:	2b00      	cmp	r3, #0
 8004578:	d106      	bne.n	8004588 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	2200      	movs	r2, #0
 800457e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004582:	6878      	ldr	r0, [r7, #4]
 8004584:	f7fc fe20 	bl	80011c8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	2224      	movs	r2, #36	; 0x24
 800458c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	68da      	ldr	r2, [r3, #12]
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800459e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80045a0:	6878      	ldr	r0, [r7, #4]
 80045a2:	f000 f829 	bl	80045f8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	691a      	ldr	r2, [r3, #16]
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80045b4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	695a      	ldr	r2, [r3, #20]
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80045c4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	68da      	ldr	r2, [r3, #12]
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80045d4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	2200      	movs	r2, #0
 80045da:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	2220      	movs	r2, #32
 80045e0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	2220      	movs	r2, #32
 80045e8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80045ec:	2300      	movs	r3, #0
}
 80045ee:	4618      	mov	r0, r3
 80045f0:	3708      	adds	r7, #8
 80045f2:	46bd      	mov	sp, r7
 80045f4:	bd80      	pop	{r7, pc}
	...

080045f8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80045f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80045fc:	b085      	sub	sp, #20
 80045fe:	af00      	add	r7, sp, #0
 8004600:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	691b      	ldr	r3, [r3, #16]
 8004608:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	68da      	ldr	r2, [r3, #12]
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	430a      	orrs	r2, r1
 8004616:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	689a      	ldr	r2, [r3, #8]
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	691b      	ldr	r3, [r3, #16]
 8004620:	431a      	orrs	r2, r3
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	695b      	ldr	r3, [r3, #20]
 8004626:	431a      	orrs	r2, r3
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	69db      	ldr	r3, [r3, #28]
 800462c:	4313      	orrs	r3, r2
 800462e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	68db      	ldr	r3, [r3, #12]
 8004636:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800463a:	f023 030c 	bic.w	r3, r3, #12
 800463e:	687a      	ldr	r2, [r7, #4]
 8004640:	6812      	ldr	r2, [r2, #0]
 8004642:	68f9      	ldr	r1, [r7, #12]
 8004644:	430b      	orrs	r3, r1
 8004646:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	695b      	ldr	r3, [r3, #20]
 800464e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	699a      	ldr	r2, [r3, #24]
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	430a      	orrs	r2, r1
 800465c:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	69db      	ldr	r3, [r3, #28]
 8004662:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004666:	f040 818b 	bne.w	8004980 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	4ac1      	ldr	r2, [pc, #772]	; (8004974 <UART_SetConfig+0x37c>)
 8004670:	4293      	cmp	r3, r2
 8004672:	d005      	beq.n	8004680 <UART_SetConfig+0x88>
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	4abf      	ldr	r2, [pc, #764]	; (8004978 <UART_SetConfig+0x380>)
 800467a:	4293      	cmp	r3, r2
 800467c:	f040 80bd 	bne.w	80047fa <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004680:	f7fe feba 	bl	80033f8 <HAL_RCC_GetPCLK2Freq>
 8004684:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004686:	68bb      	ldr	r3, [r7, #8]
 8004688:	461d      	mov	r5, r3
 800468a:	f04f 0600 	mov.w	r6, #0
 800468e:	46a8      	mov	r8, r5
 8004690:	46b1      	mov	r9, r6
 8004692:	eb18 0308 	adds.w	r3, r8, r8
 8004696:	eb49 0409 	adc.w	r4, r9, r9
 800469a:	4698      	mov	r8, r3
 800469c:	46a1      	mov	r9, r4
 800469e:	eb18 0805 	adds.w	r8, r8, r5
 80046a2:	eb49 0906 	adc.w	r9, r9, r6
 80046a6:	f04f 0100 	mov.w	r1, #0
 80046aa:	f04f 0200 	mov.w	r2, #0
 80046ae:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80046b2:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80046b6:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80046ba:	4688      	mov	r8, r1
 80046bc:	4691      	mov	r9, r2
 80046be:	eb18 0005 	adds.w	r0, r8, r5
 80046c2:	eb49 0106 	adc.w	r1, r9, r6
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	685b      	ldr	r3, [r3, #4]
 80046ca:	461d      	mov	r5, r3
 80046cc:	f04f 0600 	mov.w	r6, #0
 80046d0:	196b      	adds	r3, r5, r5
 80046d2:	eb46 0406 	adc.w	r4, r6, r6
 80046d6:	461a      	mov	r2, r3
 80046d8:	4623      	mov	r3, r4
 80046da:	f7fb fdd9 	bl	8000290 <__aeabi_uldivmod>
 80046de:	4603      	mov	r3, r0
 80046e0:	460c      	mov	r4, r1
 80046e2:	461a      	mov	r2, r3
 80046e4:	4ba5      	ldr	r3, [pc, #660]	; (800497c <UART_SetConfig+0x384>)
 80046e6:	fba3 2302 	umull	r2, r3, r3, r2
 80046ea:	095b      	lsrs	r3, r3, #5
 80046ec:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80046f0:	68bb      	ldr	r3, [r7, #8]
 80046f2:	461d      	mov	r5, r3
 80046f4:	f04f 0600 	mov.w	r6, #0
 80046f8:	46a9      	mov	r9, r5
 80046fa:	46b2      	mov	sl, r6
 80046fc:	eb19 0309 	adds.w	r3, r9, r9
 8004700:	eb4a 040a 	adc.w	r4, sl, sl
 8004704:	4699      	mov	r9, r3
 8004706:	46a2      	mov	sl, r4
 8004708:	eb19 0905 	adds.w	r9, r9, r5
 800470c:	eb4a 0a06 	adc.w	sl, sl, r6
 8004710:	f04f 0100 	mov.w	r1, #0
 8004714:	f04f 0200 	mov.w	r2, #0
 8004718:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800471c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004720:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004724:	4689      	mov	r9, r1
 8004726:	4692      	mov	sl, r2
 8004728:	eb19 0005 	adds.w	r0, r9, r5
 800472c:	eb4a 0106 	adc.w	r1, sl, r6
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	685b      	ldr	r3, [r3, #4]
 8004734:	461d      	mov	r5, r3
 8004736:	f04f 0600 	mov.w	r6, #0
 800473a:	196b      	adds	r3, r5, r5
 800473c:	eb46 0406 	adc.w	r4, r6, r6
 8004740:	461a      	mov	r2, r3
 8004742:	4623      	mov	r3, r4
 8004744:	f7fb fda4 	bl	8000290 <__aeabi_uldivmod>
 8004748:	4603      	mov	r3, r0
 800474a:	460c      	mov	r4, r1
 800474c:	461a      	mov	r2, r3
 800474e:	4b8b      	ldr	r3, [pc, #556]	; (800497c <UART_SetConfig+0x384>)
 8004750:	fba3 1302 	umull	r1, r3, r3, r2
 8004754:	095b      	lsrs	r3, r3, #5
 8004756:	2164      	movs	r1, #100	; 0x64
 8004758:	fb01 f303 	mul.w	r3, r1, r3
 800475c:	1ad3      	subs	r3, r2, r3
 800475e:	00db      	lsls	r3, r3, #3
 8004760:	3332      	adds	r3, #50	; 0x32
 8004762:	4a86      	ldr	r2, [pc, #536]	; (800497c <UART_SetConfig+0x384>)
 8004764:	fba2 2303 	umull	r2, r3, r2, r3
 8004768:	095b      	lsrs	r3, r3, #5
 800476a:	005b      	lsls	r3, r3, #1
 800476c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004770:	4498      	add	r8, r3
 8004772:	68bb      	ldr	r3, [r7, #8]
 8004774:	461d      	mov	r5, r3
 8004776:	f04f 0600 	mov.w	r6, #0
 800477a:	46a9      	mov	r9, r5
 800477c:	46b2      	mov	sl, r6
 800477e:	eb19 0309 	adds.w	r3, r9, r9
 8004782:	eb4a 040a 	adc.w	r4, sl, sl
 8004786:	4699      	mov	r9, r3
 8004788:	46a2      	mov	sl, r4
 800478a:	eb19 0905 	adds.w	r9, r9, r5
 800478e:	eb4a 0a06 	adc.w	sl, sl, r6
 8004792:	f04f 0100 	mov.w	r1, #0
 8004796:	f04f 0200 	mov.w	r2, #0
 800479a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800479e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80047a2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80047a6:	4689      	mov	r9, r1
 80047a8:	4692      	mov	sl, r2
 80047aa:	eb19 0005 	adds.w	r0, r9, r5
 80047ae:	eb4a 0106 	adc.w	r1, sl, r6
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	685b      	ldr	r3, [r3, #4]
 80047b6:	461d      	mov	r5, r3
 80047b8:	f04f 0600 	mov.w	r6, #0
 80047bc:	196b      	adds	r3, r5, r5
 80047be:	eb46 0406 	adc.w	r4, r6, r6
 80047c2:	461a      	mov	r2, r3
 80047c4:	4623      	mov	r3, r4
 80047c6:	f7fb fd63 	bl	8000290 <__aeabi_uldivmod>
 80047ca:	4603      	mov	r3, r0
 80047cc:	460c      	mov	r4, r1
 80047ce:	461a      	mov	r2, r3
 80047d0:	4b6a      	ldr	r3, [pc, #424]	; (800497c <UART_SetConfig+0x384>)
 80047d2:	fba3 1302 	umull	r1, r3, r3, r2
 80047d6:	095b      	lsrs	r3, r3, #5
 80047d8:	2164      	movs	r1, #100	; 0x64
 80047da:	fb01 f303 	mul.w	r3, r1, r3
 80047de:	1ad3      	subs	r3, r2, r3
 80047e0:	00db      	lsls	r3, r3, #3
 80047e2:	3332      	adds	r3, #50	; 0x32
 80047e4:	4a65      	ldr	r2, [pc, #404]	; (800497c <UART_SetConfig+0x384>)
 80047e6:	fba2 2303 	umull	r2, r3, r2, r3
 80047ea:	095b      	lsrs	r3, r3, #5
 80047ec:	f003 0207 	and.w	r2, r3, #7
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	4442      	add	r2, r8
 80047f6:	609a      	str	r2, [r3, #8]
 80047f8:	e26f      	b.n	8004cda <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80047fa:	f7fe fde9 	bl	80033d0 <HAL_RCC_GetPCLK1Freq>
 80047fe:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004800:	68bb      	ldr	r3, [r7, #8]
 8004802:	461d      	mov	r5, r3
 8004804:	f04f 0600 	mov.w	r6, #0
 8004808:	46a8      	mov	r8, r5
 800480a:	46b1      	mov	r9, r6
 800480c:	eb18 0308 	adds.w	r3, r8, r8
 8004810:	eb49 0409 	adc.w	r4, r9, r9
 8004814:	4698      	mov	r8, r3
 8004816:	46a1      	mov	r9, r4
 8004818:	eb18 0805 	adds.w	r8, r8, r5
 800481c:	eb49 0906 	adc.w	r9, r9, r6
 8004820:	f04f 0100 	mov.w	r1, #0
 8004824:	f04f 0200 	mov.w	r2, #0
 8004828:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800482c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004830:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004834:	4688      	mov	r8, r1
 8004836:	4691      	mov	r9, r2
 8004838:	eb18 0005 	adds.w	r0, r8, r5
 800483c:	eb49 0106 	adc.w	r1, r9, r6
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	685b      	ldr	r3, [r3, #4]
 8004844:	461d      	mov	r5, r3
 8004846:	f04f 0600 	mov.w	r6, #0
 800484a:	196b      	adds	r3, r5, r5
 800484c:	eb46 0406 	adc.w	r4, r6, r6
 8004850:	461a      	mov	r2, r3
 8004852:	4623      	mov	r3, r4
 8004854:	f7fb fd1c 	bl	8000290 <__aeabi_uldivmod>
 8004858:	4603      	mov	r3, r0
 800485a:	460c      	mov	r4, r1
 800485c:	461a      	mov	r2, r3
 800485e:	4b47      	ldr	r3, [pc, #284]	; (800497c <UART_SetConfig+0x384>)
 8004860:	fba3 2302 	umull	r2, r3, r3, r2
 8004864:	095b      	lsrs	r3, r3, #5
 8004866:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800486a:	68bb      	ldr	r3, [r7, #8]
 800486c:	461d      	mov	r5, r3
 800486e:	f04f 0600 	mov.w	r6, #0
 8004872:	46a9      	mov	r9, r5
 8004874:	46b2      	mov	sl, r6
 8004876:	eb19 0309 	adds.w	r3, r9, r9
 800487a:	eb4a 040a 	adc.w	r4, sl, sl
 800487e:	4699      	mov	r9, r3
 8004880:	46a2      	mov	sl, r4
 8004882:	eb19 0905 	adds.w	r9, r9, r5
 8004886:	eb4a 0a06 	adc.w	sl, sl, r6
 800488a:	f04f 0100 	mov.w	r1, #0
 800488e:	f04f 0200 	mov.w	r2, #0
 8004892:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004896:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800489a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800489e:	4689      	mov	r9, r1
 80048a0:	4692      	mov	sl, r2
 80048a2:	eb19 0005 	adds.w	r0, r9, r5
 80048a6:	eb4a 0106 	adc.w	r1, sl, r6
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	685b      	ldr	r3, [r3, #4]
 80048ae:	461d      	mov	r5, r3
 80048b0:	f04f 0600 	mov.w	r6, #0
 80048b4:	196b      	adds	r3, r5, r5
 80048b6:	eb46 0406 	adc.w	r4, r6, r6
 80048ba:	461a      	mov	r2, r3
 80048bc:	4623      	mov	r3, r4
 80048be:	f7fb fce7 	bl	8000290 <__aeabi_uldivmod>
 80048c2:	4603      	mov	r3, r0
 80048c4:	460c      	mov	r4, r1
 80048c6:	461a      	mov	r2, r3
 80048c8:	4b2c      	ldr	r3, [pc, #176]	; (800497c <UART_SetConfig+0x384>)
 80048ca:	fba3 1302 	umull	r1, r3, r3, r2
 80048ce:	095b      	lsrs	r3, r3, #5
 80048d0:	2164      	movs	r1, #100	; 0x64
 80048d2:	fb01 f303 	mul.w	r3, r1, r3
 80048d6:	1ad3      	subs	r3, r2, r3
 80048d8:	00db      	lsls	r3, r3, #3
 80048da:	3332      	adds	r3, #50	; 0x32
 80048dc:	4a27      	ldr	r2, [pc, #156]	; (800497c <UART_SetConfig+0x384>)
 80048de:	fba2 2303 	umull	r2, r3, r2, r3
 80048e2:	095b      	lsrs	r3, r3, #5
 80048e4:	005b      	lsls	r3, r3, #1
 80048e6:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80048ea:	4498      	add	r8, r3
 80048ec:	68bb      	ldr	r3, [r7, #8]
 80048ee:	461d      	mov	r5, r3
 80048f0:	f04f 0600 	mov.w	r6, #0
 80048f4:	46a9      	mov	r9, r5
 80048f6:	46b2      	mov	sl, r6
 80048f8:	eb19 0309 	adds.w	r3, r9, r9
 80048fc:	eb4a 040a 	adc.w	r4, sl, sl
 8004900:	4699      	mov	r9, r3
 8004902:	46a2      	mov	sl, r4
 8004904:	eb19 0905 	adds.w	r9, r9, r5
 8004908:	eb4a 0a06 	adc.w	sl, sl, r6
 800490c:	f04f 0100 	mov.w	r1, #0
 8004910:	f04f 0200 	mov.w	r2, #0
 8004914:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004918:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800491c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004920:	4689      	mov	r9, r1
 8004922:	4692      	mov	sl, r2
 8004924:	eb19 0005 	adds.w	r0, r9, r5
 8004928:	eb4a 0106 	adc.w	r1, sl, r6
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	685b      	ldr	r3, [r3, #4]
 8004930:	461d      	mov	r5, r3
 8004932:	f04f 0600 	mov.w	r6, #0
 8004936:	196b      	adds	r3, r5, r5
 8004938:	eb46 0406 	adc.w	r4, r6, r6
 800493c:	461a      	mov	r2, r3
 800493e:	4623      	mov	r3, r4
 8004940:	f7fb fca6 	bl	8000290 <__aeabi_uldivmod>
 8004944:	4603      	mov	r3, r0
 8004946:	460c      	mov	r4, r1
 8004948:	461a      	mov	r2, r3
 800494a:	4b0c      	ldr	r3, [pc, #48]	; (800497c <UART_SetConfig+0x384>)
 800494c:	fba3 1302 	umull	r1, r3, r3, r2
 8004950:	095b      	lsrs	r3, r3, #5
 8004952:	2164      	movs	r1, #100	; 0x64
 8004954:	fb01 f303 	mul.w	r3, r1, r3
 8004958:	1ad3      	subs	r3, r2, r3
 800495a:	00db      	lsls	r3, r3, #3
 800495c:	3332      	adds	r3, #50	; 0x32
 800495e:	4a07      	ldr	r2, [pc, #28]	; (800497c <UART_SetConfig+0x384>)
 8004960:	fba2 2303 	umull	r2, r3, r2, r3
 8004964:	095b      	lsrs	r3, r3, #5
 8004966:	f003 0207 	and.w	r2, r3, #7
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	4442      	add	r2, r8
 8004970:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8004972:	e1b2      	b.n	8004cda <UART_SetConfig+0x6e2>
 8004974:	40011000 	.word	0x40011000
 8004978:	40011400 	.word	0x40011400
 800497c:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	4ad7      	ldr	r2, [pc, #860]	; (8004ce4 <UART_SetConfig+0x6ec>)
 8004986:	4293      	cmp	r3, r2
 8004988:	d005      	beq.n	8004996 <UART_SetConfig+0x39e>
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	4ad6      	ldr	r2, [pc, #856]	; (8004ce8 <UART_SetConfig+0x6f0>)
 8004990:	4293      	cmp	r3, r2
 8004992:	f040 80d1 	bne.w	8004b38 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8004996:	f7fe fd2f 	bl	80033f8 <HAL_RCC_GetPCLK2Freq>
 800499a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800499c:	68bb      	ldr	r3, [r7, #8]
 800499e:	469a      	mov	sl, r3
 80049a0:	f04f 0b00 	mov.w	fp, #0
 80049a4:	46d0      	mov	r8, sl
 80049a6:	46d9      	mov	r9, fp
 80049a8:	eb18 0308 	adds.w	r3, r8, r8
 80049ac:	eb49 0409 	adc.w	r4, r9, r9
 80049b0:	4698      	mov	r8, r3
 80049b2:	46a1      	mov	r9, r4
 80049b4:	eb18 080a 	adds.w	r8, r8, sl
 80049b8:	eb49 090b 	adc.w	r9, r9, fp
 80049bc:	f04f 0100 	mov.w	r1, #0
 80049c0:	f04f 0200 	mov.w	r2, #0
 80049c4:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80049c8:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80049cc:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80049d0:	4688      	mov	r8, r1
 80049d2:	4691      	mov	r9, r2
 80049d4:	eb1a 0508 	adds.w	r5, sl, r8
 80049d8:	eb4b 0609 	adc.w	r6, fp, r9
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	685b      	ldr	r3, [r3, #4]
 80049e0:	4619      	mov	r1, r3
 80049e2:	f04f 0200 	mov.w	r2, #0
 80049e6:	f04f 0300 	mov.w	r3, #0
 80049ea:	f04f 0400 	mov.w	r4, #0
 80049ee:	0094      	lsls	r4, r2, #2
 80049f0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80049f4:	008b      	lsls	r3, r1, #2
 80049f6:	461a      	mov	r2, r3
 80049f8:	4623      	mov	r3, r4
 80049fa:	4628      	mov	r0, r5
 80049fc:	4631      	mov	r1, r6
 80049fe:	f7fb fc47 	bl	8000290 <__aeabi_uldivmod>
 8004a02:	4603      	mov	r3, r0
 8004a04:	460c      	mov	r4, r1
 8004a06:	461a      	mov	r2, r3
 8004a08:	4bb8      	ldr	r3, [pc, #736]	; (8004cec <UART_SetConfig+0x6f4>)
 8004a0a:	fba3 2302 	umull	r2, r3, r3, r2
 8004a0e:	095b      	lsrs	r3, r3, #5
 8004a10:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004a14:	68bb      	ldr	r3, [r7, #8]
 8004a16:	469b      	mov	fp, r3
 8004a18:	f04f 0c00 	mov.w	ip, #0
 8004a1c:	46d9      	mov	r9, fp
 8004a1e:	46e2      	mov	sl, ip
 8004a20:	eb19 0309 	adds.w	r3, r9, r9
 8004a24:	eb4a 040a 	adc.w	r4, sl, sl
 8004a28:	4699      	mov	r9, r3
 8004a2a:	46a2      	mov	sl, r4
 8004a2c:	eb19 090b 	adds.w	r9, r9, fp
 8004a30:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004a34:	f04f 0100 	mov.w	r1, #0
 8004a38:	f04f 0200 	mov.w	r2, #0
 8004a3c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004a40:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004a44:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004a48:	4689      	mov	r9, r1
 8004a4a:	4692      	mov	sl, r2
 8004a4c:	eb1b 0509 	adds.w	r5, fp, r9
 8004a50:	eb4c 060a 	adc.w	r6, ip, sl
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	685b      	ldr	r3, [r3, #4]
 8004a58:	4619      	mov	r1, r3
 8004a5a:	f04f 0200 	mov.w	r2, #0
 8004a5e:	f04f 0300 	mov.w	r3, #0
 8004a62:	f04f 0400 	mov.w	r4, #0
 8004a66:	0094      	lsls	r4, r2, #2
 8004a68:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004a6c:	008b      	lsls	r3, r1, #2
 8004a6e:	461a      	mov	r2, r3
 8004a70:	4623      	mov	r3, r4
 8004a72:	4628      	mov	r0, r5
 8004a74:	4631      	mov	r1, r6
 8004a76:	f7fb fc0b 	bl	8000290 <__aeabi_uldivmod>
 8004a7a:	4603      	mov	r3, r0
 8004a7c:	460c      	mov	r4, r1
 8004a7e:	461a      	mov	r2, r3
 8004a80:	4b9a      	ldr	r3, [pc, #616]	; (8004cec <UART_SetConfig+0x6f4>)
 8004a82:	fba3 1302 	umull	r1, r3, r3, r2
 8004a86:	095b      	lsrs	r3, r3, #5
 8004a88:	2164      	movs	r1, #100	; 0x64
 8004a8a:	fb01 f303 	mul.w	r3, r1, r3
 8004a8e:	1ad3      	subs	r3, r2, r3
 8004a90:	011b      	lsls	r3, r3, #4
 8004a92:	3332      	adds	r3, #50	; 0x32
 8004a94:	4a95      	ldr	r2, [pc, #596]	; (8004cec <UART_SetConfig+0x6f4>)
 8004a96:	fba2 2303 	umull	r2, r3, r2, r3
 8004a9a:	095b      	lsrs	r3, r3, #5
 8004a9c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004aa0:	4498      	add	r8, r3
 8004aa2:	68bb      	ldr	r3, [r7, #8]
 8004aa4:	469b      	mov	fp, r3
 8004aa6:	f04f 0c00 	mov.w	ip, #0
 8004aaa:	46d9      	mov	r9, fp
 8004aac:	46e2      	mov	sl, ip
 8004aae:	eb19 0309 	adds.w	r3, r9, r9
 8004ab2:	eb4a 040a 	adc.w	r4, sl, sl
 8004ab6:	4699      	mov	r9, r3
 8004ab8:	46a2      	mov	sl, r4
 8004aba:	eb19 090b 	adds.w	r9, r9, fp
 8004abe:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004ac2:	f04f 0100 	mov.w	r1, #0
 8004ac6:	f04f 0200 	mov.w	r2, #0
 8004aca:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004ace:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004ad2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004ad6:	4689      	mov	r9, r1
 8004ad8:	4692      	mov	sl, r2
 8004ada:	eb1b 0509 	adds.w	r5, fp, r9
 8004ade:	eb4c 060a 	adc.w	r6, ip, sl
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	685b      	ldr	r3, [r3, #4]
 8004ae6:	4619      	mov	r1, r3
 8004ae8:	f04f 0200 	mov.w	r2, #0
 8004aec:	f04f 0300 	mov.w	r3, #0
 8004af0:	f04f 0400 	mov.w	r4, #0
 8004af4:	0094      	lsls	r4, r2, #2
 8004af6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004afa:	008b      	lsls	r3, r1, #2
 8004afc:	461a      	mov	r2, r3
 8004afe:	4623      	mov	r3, r4
 8004b00:	4628      	mov	r0, r5
 8004b02:	4631      	mov	r1, r6
 8004b04:	f7fb fbc4 	bl	8000290 <__aeabi_uldivmod>
 8004b08:	4603      	mov	r3, r0
 8004b0a:	460c      	mov	r4, r1
 8004b0c:	461a      	mov	r2, r3
 8004b0e:	4b77      	ldr	r3, [pc, #476]	; (8004cec <UART_SetConfig+0x6f4>)
 8004b10:	fba3 1302 	umull	r1, r3, r3, r2
 8004b14:	095b      	lsrs	r3, r3, #5
 8004b16:	2164      	movs	r1, #100	; 0x64
 8004b18:	fb01 f303 	mul.w	r3, r1, r3
 8004b1c:	1ad3      	subs	r3, r2, r3
 8004b1e:	011b      	lsls	r3, r3, #4
 8004b20:	3332      	adds	r3, #50	; 0x32
 8004b22:	4a72      	ldr	r2, [pc, #456]	; (8004cec <UART_SetConfig+0x6f4>)
 8004b24:	fba2 2303 	umull	r2, r3, r2, r3
 8004b28:	095b      	lsrs	r3, r3, #5
 8004b2a:	f003 020f 	and.w	r2, r3, #15
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	4442      	add	r2, r8
 8004b34:	609a      	str	r2, [r3, #8]
 8004b36:	e0d0      	b.n	8004cda <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8004b38:	f7fe fc4a 	bl	80033d0 <HAL_RCC_GetPCLK1Freq>
 8004b3c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004b3e:	68bb      	ldr	r3, [r7, #8]
 8004b40:	469a      	mov	sl, r3
 8004b42:	f04f 0b00 	mov.w	fp, #0
 8004b46:	46d0      	mov	r8, sl
 8004b48:	46d9      	mov	r9, fp
 8004b4a:	eb18 0308 	adds.w	r3, r8, r8
 8004b4e:	eb49 0409 	adc.w	r4, r9, r9
 8004b52:	4698      	mov	r8, r3
 8004b54:	46a1      	mov	r9, r4
 8004b56:	eb18 080a 	adds.w	r8, r8, sl
 8004b5a:	eb49 090b 	adc.w	r9, r9, fp
 8004b5e:	f04f 0100 	mov.w	r1, #0
 8004b62:	f04f 0200 	mov.w	r2, #0
 8004b66:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004b6a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004b6e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004b72:	4688      	mov	r8, r1
 8004b74:	4691      	mov	r9, r2
 8004b76:	eb1a 0508 	adds.w	r5, sl, r8
 8004b7a:	eb4b 0609 	adc.w	r6, fp, r9
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	685b      	ldr	r3, [r3, #4]
 8004b82:	4619      	mov	r1, r3
 8004b84:	f04f 0200 	mov.w	r2, #0
 8004b88:	f04f 0300 	mov.w	r3, #0
 8004b8c:	f04f 0400 	mov.w	r4, #0
 8004b90:	0094      	lsls	r4, r2, #2
 8004b92:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004b96:	008b      	lsls	r3, r1, #2
 8004b98:	461a      	mov	r2, r3
 8004b9a:	4623      	mov	r3, r4
 8004b9c:	4628      	mov	r0, r5
 8004b9e:	4631      	mov	r1, r6
 8004ba0:	f7fb fb76 	bl	8000290 <__aeabi_uldivmod>
 8004ba4:	4603      	mov	r3, r0
 8004ba6:	460c      	mov	r4, r1
 8004ba8:	461a      	mov	r2, r3
 8004baa:	4b50      	ldr	r3, [pc, #320]	; (8004cec <UART_SetConfig+0x6f4>)
 8004bac:	fba3 2302 	umull	r2, r3, r3, r2
 8004bb0:	095b      	lsrs	r3, r3, #5
 8004bb2:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004bb6:	68bb      	ldr	r3, [r7, #8]
 8004bb8:	469b      	mov	fp, r3
 8004bba:	f04f 0c00 	mov.w	ip, #0
 8004bbe:	46d9      	mov	r9, fp
 8004bc0:	46e2      	mov	sl, ip
 8004bc2:	eb19 0309 	adds.w	r3, r9, r9
 8004bc6:	eb4a 040a 	adc.w	r4, sl, sl
 8004bca:	4699      	mov	r9, r3
 8004bcc:	46a2      	mov	sl, r4
 8004bce:	eb19 090b 	adds.w	r9, r9, fp
 8004bd2:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004bd6:	f04f 0100 	mov.w	r1, #0
 8004bda:	f04f 0200 	mov.w	r2, #0
 8004bde:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004be2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004be6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004bea:	4689      	mov	r9, r1
 8004bec:	4692      	mov	sl, r2
 8004bee:	eb1b 0509 	adds.w	r5, fp, r9
 8004bf2:	eb4c 060a 	adc.w	r6, ip, sl
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	685b      	ldr	r3, [r3, #4]
 8004bfa:	4619      	mov	r1, r3
 8004bfc:	f04f 0200 	mov.w	r2, #0
 8004c00:	f04f 0300 	mov.w	r3, #0
 8004c04:	f04f 0400 	mov.w	r4, #0
 8004c08:	0094      	lsls	r4, r2, #2
 8004c0a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004c0e:	008b      	lsls	r3, r1, #2
 8004c10:	461a      	mov	r2, r3
 8004c12:	4623      	mov	r3, r4
 8004c14:	4628      	mov	r0, r5
 8004c16:	4631      	mov	r1, r6
 8004c18:	f7fb fb3a 	bl	8000290 <__aeabi_uldivmod>
 8004c1c:	4603      	mov	r3, r0
 8004c1e:	460c      	mov	r4, r1
 8004c20:	461a      	mov	r2, r3
 8004c22:	4b32      	ldr	r3, [pc, #200]	; (8004cec <UART_SetConfig+0x6f4>)
 8004c24:	fba3 1302 	umull	r1, r3, r3, r2
 8004c28:	095b      	lsrs	r3, r3, #5
 8004c2a:	2164      	movs	r1, #100	; 0x64
 8004c2c:	fb01 f303 	mul.w	r3, r1, r3
 8004c30:	1ad3      	subs	r3, r2, r3
 8004c32:	011b      	lsls	r3, r3, #4
 8004c34:	3332      	adds	r3, #50	; 0x32
 8004c36:	4a2d      	ldr	r2, [pc, #180]	; (8004cec <UART_SetConfig+0x6f4>)
 8004c38:	fba2 2303 	umull	r2, r3, r2, r3
 8004c3c:	095b      	lsrs	r3, r3, #5
 8004c3e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004c42:	4498      	add	r8, r3
 8004c44:	68bb      	ldr	r3, [r7, #8]
 8004c46:	469b      	mov	fp, r3
 8004c48:	f04f 0c00 	mov.w	ip, #0
 8004c4c:	46d9      	mov	r9, fp
 8004c4e:	46e2      	mov	sl, ip
 8004c50:	eb19 0309 	adds.w	r3, r9, r9
 8004c54:	eb4a 040a 	adc.w	r4, sl, sl
 8004c58:	4699      	mov	r9, r3
 8004c5a:	46a2      	mov	sl, r4
 8004c5c:	eb19 090b 	adds.w	r9, r9, fp
 8004c60:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004c64:	f04f 0100 	mov.w	r1, #0
 8004c68:	f04f 0200 	mov.w	r2, #0
 8004c6c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004c70:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004c74:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004c78:	4689      	mov	r9, r1
 8004c7a:	4692      	mov	sl, r2
 8004c7c:	eb1b 0509 	adds.w	r5, fp, r9
 8004c80:	eb4c 060a 	adc.w	r6, ip, sl
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	685b      	ldr	r3, [r3, #4]
 8004c88:	4619      	mov	r1, r3
 8004c8a:	f04f 0200 	mov.w	r2, #0
 8004c8e:	f04f 0300 	mov.w	r3, #0
 8004c92:	f04f 0400 	mov.w	r4, #0
 8004c96:	0094      	lsls	r4, r2, #2
 8004c98:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004c9c:	008b      	lsls	r3, r1, #2
 8004c9e:	461a      	mov	r2, r3
 8004ca0:	4623      	mov	r3, r4
 8004ca2:	4628      	mov	r0, r5
 8004ca4:	4631      	mov	r1, r6
 8004ca6:	f7fb faf3 	bl	8000290 <__aeabi_uldivmod>
 8004caa:	4603      	mov	r3, r0
 8004cac:	460c      	mov	r4, r1
 8004cae:	461a      	mov	r2, r3
 8004cb0:	4b0e      	ldr	r3, [pc, #56]	; (8004cec <UART_SetConfig+0x6f4>)
 8004cb2:	fba3 1302 	umull	r1, r3, r3, r2
 8004cb6:	095b      	lsrs	r3, r3, #5
 8004cb8:	2164      	movs	r1, #100	; 0x64
 8004cba:	fb01 f303 	mul.w	r3, r1, r3
 8004cbe:	1ad3      	subs	r3, r2, r3
 8004cc0:	011b      	lsls	r3, r3, #4
 8004cc2:	3332      	adds	r3, #50	; 0x32
 8004cc4:	4a09      	ldr	r2, [pc, #36]	; (8004cec <UART_SetConfig+0x6f4>)
 8004cc6:	fba2 2303 	umull	r2, r3, r2, r3
 8004cca:	095b      	lsrs	r3, r3, #5
 8004ccc:	f003 020f 	and.w	r2, r3, #15
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	4442      	add	r2, r8
 8004cd6:	609a      	str	r2, [r3, #8]
}
 8004cd8:	e7ff      	b.n	8004cda <UART_SetConfig+0x6e2>
 8004cda:	bf00      	nop
 8004cdc:	3714      	adds	r7, #20
 8004cde:	46bd      	mov	sp, r7
 8004ce0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004ce4:	40011000 	.word	0x40011000
 8004ce8:	40011400 	.word	0x40011400
 8004cec:	51eb851f 	.word	0x51eb851f

08004cf0 <__errno>:
 8004cf0:	4b01      	ldr	r3, [pc, #4]	; (8004cf8 <__errno+0x8>)
 8004cf2:	6818      	ldr	r0, [r3, #0]
 8004cf4:	4770      	bx	lr
 8004cf6:	bf00      	nop
 8004cf8:	2000000c 	.word	0x2000000c

08004cfc <__libc_init_array>:
 8004cfc:	b570      	push	{r4, r5, r6, lr}
 8004cfe:	4e0d      	ldr	r6, [pc, #52]	; (8004d34 <__libc_init_array+0x38>)
 8004d00:	4c0d      	ldr	r4, [pc, #52]	; (8004d38 <__libc_init_array+0x3c>)
 8004d02:	1ba4      	subs	r4, r4, r6
 8004d04:	10a4      	asrs	r4, r4, #2
 8004d06:	2500      	movs	r5, #0
 8004d08:	42a5      	cmp	r5, r4
 8004d0a:	d109      	bne.n	8004d20 <__libc_init_array+0x24>
 8004d0c:	4e0b      	ldr	r6, [pc, #44]	; (8004d3c <__libc_init_array+0x40>)
 8004d0e:	4c0c      	ldr	r4, [pc, #48]	; (8004d40 <__libc_init_array+0x44>)
 8004d10:	f000 fc62 	bl	80055d8 <_init>
 8004d14:	1ba4      	subs	r4, r4, r6
 8004d16:	10a4      	asrs	r4, r4, #2
 8004d18:	2500      	movs	r5, #0
 8004d1a:	42a5      	cmp	r5, r4
 8004d1c:	d105      	bne.n	8004d2a <__libc_init_array+0x2e>
 8004d1e:	bd70      	pop	{r4, r5, r6, pc}
 8004d20:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004d24:	4798      	blx	r3
 8004d26:	3501      	adds	r5, #1
 8004d28:	e7ee      	b.n	8004d08 <__libc_init_array+0xc>
 8004d2a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004d2e:	4798      	blx	r3
 8004d30:	3501      	adds	r5, #1
 8004d32:	e7f2      	b.n	8004d1a <__libc_init_array+0x1e>
 8004d34:	08005674 	.word	0x08005674
 8004d38:	08005674 	.word	0x08005674
 8004d3c:	08005674 	.word	0x08005674
 8004d40:	08005678 	.word	0x08005678

08004d44 <memset>:
 8004d44:	4402      	add	r2, r0
 8004d46:	4603      	mov	r3, r0
 8004d48:	4293      	cmp	r3, r2
 8004d4a:	d100      	bne.n	8004d4e <memset+0xa>
 8004d4c:	4770      	bx	lr
 8004d4e:	f803 1b01 	strb.w	r1, [r3], #1
 8004d52:	e7f9      	b.n	8004d48 <memset+0x4>

08004d54 <rand>:
 8004d54:	b538      	push	{r3, r4, r5, lr}
 8004d56:	4b13      	ldr	r3, [pc, #76]	; (8004da4 <rand+0x50>)
 8004d58:	681c      	ldr	r4, [r3, #0]
 8004d5a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004d5c:	b97b      	cbnz	r3, 8004d7e <rand+0x2a>
 8004d5e:	2018      	movs	r0, #24
 8004d60:	f000 f84c 	bl	8004dfc <malloc>
 8004d64:	4a10      	ldr	r2, [pc, #64]	; (8004da8 <rand+0x54>)
 8004d66:	4b11      	ldr	r3, [pc, #68]	; (8004dac <rand+0x58>)
 8004d68:	63a0      	str	r0, [r4, #56]	; 0x38
 8004d6a:	e9c0 2300 	strd	r2, r3, [r0]
 8004d6e:	4b10      	ldr	r3, [pc, #64]	; (8004db0 <rand+0x5c>)
 8004d70:	6083      	str	r3, [r0, #8]
 8004d72:	230b      	movs	r3, #11
 8004d74:	8183      	strh	r3, [r0, #12]
 8004d76:	2201      	movs	r2, #1
 8004d78:	2300      	movs	r3, #0
 8004d7a:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8004d7e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8004d80:	480c      	ldr	r0, [pc, #48]	; (8004db4 <rand+0x60>)
 8004d82:	690a      	ldr	r2, [r1, #16]
 8004d84:	694b      	ldr	r3, [r1, #20]
 8004d86:	4c0c      	ldr	r4, [pc, #48]	; (8004db8 <rand+0x64>)
 8004d88:	4350      	muls	r0, r2
 8004d8a:	fb04 0003 	mla	r0, r4, r3, r0
 8004d8e:	fba2 2304 	umull	r2, r3, r2, r4
 8004d92:	4403      	add	r3, r0
 8004d94:	1c54      	adds	r4, r2, #1
 8004d96:	f143 0500 	adc.w	r5, r3, #0
 8004d9a:	e9c1 4504 	strd	r4, r5, [r1, #16]
 8004d9e:	f025 4000 	bic.w	r0, r5, #2147483648	; 0x80000000
 8004da2:	bd38      	pop	{r3, r4, r5, pc}
 8004da4:	2000000c 	.word	0x2000000c
 8004da8:	abcd330e 	.word	0xabcd330e
 8004dac:	e66d1234 	.word	0xe66d1234
 8004db0:	0005deec 	.word	0x0005deec
 8004db4:	5851f42d 	.word	0x5851f42d
 8004db8:	4c957f2d 	.word	0x4c957f2d

08004dbc <_vsiprintf_r>:
 8004dbc:	b500      	push	{lr}
 8004dbe:	b09b      	sub	sp, #108	; 0x6c
 8004dc0:	9100      	str	r1, [sp, #0]
 8004dc2:	9104      	str	r1, [sp, #16]
 8004dc4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004dc8:	9105      	str	r1, [sp, #20]
 8004dca:	9102      	str	r1, [sp, #8]
 8004dcc:	4905      	ldr	r1, [pc, #20]	; (8004de4 <_vsiprintf_r+0x28>)
 8004dce:	9103      	str	r1, [sp, #12]
 8004dd0:	4669      	mov	r1, sp
 8004dd2:	f000 f91d 	bl	8005010 <_svfiprintf_r>
 8004dd6:	9b00      	ldr	r3, [sp, #0]
 8004dd8:	2200      	movs	r2, #0
 8004dda:	701a      	strb	r2, [r3, #0]
 8004ddc:	b01b      	add	sp, #108	; 0x6c
 8004dde:	f85d fb04 	ldr.w	pc, [sp], #4
 8004de2:	bf00      	nop
 8004de4:	ffff0208 	.word	0xffff0208

08004de8 <vsiprintf>:
 8004de8:	4613      	mov	r3, r2
 8004dea:	460a      	mov	r2, r1
 8004dec:	4601      	mov	r1, r0
 8004dee:	4802      	ldr	r0, [pc, #8]	; (8004df8 <vsiprintf+0x10>)
 8004df0:	6800      	ldr	r0, [r0, #0]
 8004df2:	f7ff bfe3 	b.w	8004dbc <_vsiprintf_r>
 8004df6:	bf00      	nop
 8004df8:	2000000c 	.word	0x2000000c

08004dfc <malloc>:
 8004dfc:	4b02      	ldr	r3, [pc, #8]	; (8004e08 <malloc+0xc>)
 8004dfe:	4601      	mov	r1, r0
 8004e00:	6818      	ldr	r0, [r3, #0]
 8004e02:	f000 b851 	b.w	8004ea8 <_malloc_r>
 8004e06:	bf00      	nop
 8004e08:	2000000c 	.word	0x2000000c

08004e0c <_free_r>:
 8004e0c:	b538      	push	{r3, r4, r5, lr}
 8004e0e:	4605      	mov	r5, r0
 8004e10:	2900      	cmp	r1, #0
 8004e12:	d045      	beq.n	8004ea0 <_free_r+0x94>
 8004e14:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004e18:	1f0c      	subs	r4, r1, #4
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	bfb8      	it	lt
 8004e1e:	18e4      	addlt	r4, r4, r3
 8004e20:	f000 fbaa 	bl	8005578 <__malloc_lock>
 8004e24:	4a1f      	ldr	r2, [pc, #124]	; (8004ea4 <_free_r+0x98>)
 8004e26:	6813      	ldr	r3, [r2, #0]
 8004e28:	4610      	mov	r0, r2
 8004e2a:	b933      	cbnz	r3, 8004e3a <_free_r+0x2e>
 8004e2c:	6063      	str	r3, [r4, #4]
 8004e2e:	6014      	str	r4, [r2, #0]
 8004e30:	4628      	mov	r0, r5
 8004e32:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004e36:	f000 bba0 	b.w	800557a <__malloc_unlock>
 8004e3a:	42a3      	cmp	r3, r4
 8004e3c:	d90c      	bls.n	8004e58 <_free_r+0x4c>
 8004e3e:	6821      	ldr	r1, [r4, #0]
 8004e40:	1862      	adds	r2, r4, r1
 8004e42:	4293      	cmp	r3, r2
 8004e44:	bf04      	itt	eq
 8004e46:	681a      	ldreq	r2, [r3, #0]
 8004e48:	685b      	ldreq	r3, [r3, #4]
 8004e4a:	6063      	str	r3, [r4, #4]
 8004e4c:	bf04      	itt	eq
 8004e4e:	1852      	addeq	r2, r2, r1
 8004e50:	6022      	streq	r2, [r4, #0]
 8004e52:	6004      	str	r4, [r0, #0]
 8004e54:	e7ec      	b.n	8004e30 <_free_r+0x24>
 8004e56:	4613      	mov	r3, r2
 8004e58:	685a      	ldr	r2, [r3, #4]
 8004e5a:	b10a      	cbz	r2, 8004e60 <_free_r+0x54>
 8004e5c:	42a2      	cmp	r2, r4
 8004e5e:	d9fa      	bls.n	8004e56 <_free_r+0x4a>
 8004e60:	6819      	ldr	r1, [r3, #0]
 8004e62:	1858      	adds	r0, r3, r1
 8004e64:	42a0      	cmp	r0, r4
 8004e66:	d10b      	bne.n	8004e80 <_free_r+0x74>
 8004e68:	6820      	ldr	r0, [r4, #0]
 8004e6a:	4401      	add	r1, r0
 8004e6c:	1858      	adds	r0, r3, r1
 8004e6e:	4282      	cmp	r2, r0
 8004e70:	6019      	str	r1, [r3, #0]
 8004e72:	d1dd      	bne.n	8004e30 <_free_r+0x24>
 8004e74:	6810      	ldr	r0, [r2, #0]
 8004e76:	6852      	ldr	r2, [r2, #4]
 8004e78:	605a      	str	r2, [r3, #4]
 8004e7a:	4401      	add	r1, r0
 8004e7c:	6019      	str	r1, [r3, #0]
 8004e7e:	e7d7      	b.n	8004e30 <_free_r+0x24>
 8004e80:	d902      	bls.n	8004e88 <_free_r+0x7c>
 8004e82:	230c      	movs	r3, #12
 8004e84:	602b      	str	r3, [r5, #0]
 8004e86:	e7d3      	b.n	8004e30 <_free_r+0x24>
 8004e88:	6820      	ldr	r0, [r4, #0]
 8004e8a:	1821      	adds	r1, r4, r0
 8004e8c:	428a      	cmp	r2, r1
 8004e8e:	bf04      	itt	eq
 8004e90:	6811      	ldreq	r1, [r2, #0]
 8004e92:	6852      	ldreq	r2, [r2, #4]
 8004e94:	6062      	str	r2, [r4, #4]
 8004e96:	bf04      	itt	eq
 8004e98:	1809      	addeq	r1, r1, r0
 8004e9a:	6021      	streq	r1, [r4, #0]
 8004e9c:	605c      	str	r4, [r3, #4]
 8004e9e:	e7c7      	b.n	8004e30 <_free_r+0x24>
 8004ea0:	bd38      	pop	{r3, r4, r5, pc}
 8004ea2:	bf00      	nop
 8004ea4:	2000009c 	.word	0x2000009c

08004ea8 <_malloc_r>:
 8004ea8:	b570      	push	{r4, r5, r6, lr}
 8004eaa:	1ccd      	adds	r5, r1, #3
 8004eac:	f025 0503 	bic.w	r5, r5, #3
 8004eb0:	3508      	adds	r5, #8
 8004eb2:	2d0c      	cmp	r5, #12
 8004eb4:	bf38      	it	cc
 8004eb6:	250c      	movcc	r5, #12
 8004eb8:	2d00      	cmp	r5, #0
 8004eba:	4606      	mov	r6, r0
 8004ebc:	db01      	blt.n	8004ec2 <_malloc_r+0x1a>
 8004ebe:	42a9      	cmp	r1, r5
 8004ec0:	d903      	bls.n	8004eca <_malloc_r+0x22>
 8004ec2:	230c      	movs	r3, #12
 8004ec4:	6033      	str	r3, [r6, #0]
 8004ec6:	2000      	movs	r0, #0
 8004ec8:	bd70      	pop	{r4, r5, r6, pc}
 8004eca:	f000 fb55 	bl	8005578 <__malloc_lock>
 8004ece:	4a21      	ldr	r2, [pc, #132]	; (8004f54 <_malloc_r+0xac>)
 8004ed0:	6814      	ldr	r4, [r2, #0]
 8004ed2:	4621      	mov	r1, r4
 8004ed4:	b991      	cbnz	r1, 8004efc <_malloc_r+0x54>
 8004ed6:	4c20      	ldr	r4, [pc, #128]	; (8004f58 <_malloc_r+0xb0>)
 8004ed8:	6823      	ldr	r3, [r4, #0]
 8004eda:	b91b      	cbnz	r3, 8004ee4 <_malloc_r+0x3c>
 8004edc:	4630      	mov	r0, r6
 8004ede:	f000 fb17 	bl	8005510 <_sbrk_r>
 8004ee2:	6020      	str	r0, [r4, #0]
 8004ee4:	4629      	mov	r1, r5
 8004ee6:	4630      	mov	r0, r6
 8004ee8:	f000 fb12 	bl	8005510 <_sbrk_r>
 8004eec:	1c43      	adds	r3, r0, #1
 8004eee:	d124      	bne.n	8004f3a <_malloc_r+0x92>
 8004ef0:	230c      	movs	r3, #12
 8004ef2:	6033      	str	r3, [r6, #0]
 8004ef4:	4630      	mov	r0, r6
 8004ef6:	f000 fb40 	bl	800557a <__malloc_unlock>
 8004efa:	e7e4      	b.n	8004ec6 <_malloc_r+0x1e>
 8004efc:	680b      	ldr	r3, [r1, #0]
 8004efe:	1b5b      	subs	r3, r3, r5
 8004f00:	d418      	bmi.n	8004f34 <_malloc_r+0x8c>
 8004f02:	2b0b      	cmp	r3, #11
 8004f04:	d90f      	bls.n	8004f26 <_malloc_r+0x7e>
 8004f06:	600b      	str	r3, [r1, #0]
 8004f08:	50cd      	str	r5, [r1, r3]
 8004f0a:	18cc      	adds	r4, r1, r3
 8004f0c:	4630      	mov	r0, r6
 8004f0e:	f000 fb34 	bl	800557a <__malloc_unlock>
 8004f12:	f104 000b 	add.w	r0, r4, #11
 8004f16:	1d23      	adds	r3, r4, #4
 8004f18:	f020 0007 	bic.w	r0, r0, #7
 8004f1c:	1ac3      	subs	r3, r0, r3
 8004f1e:	d0d3      	beq.n	8004ec8 <_malloc_r+0x20>
 8004f20:	425a      	negs	r2, r3
 8004f22:	50e2      	str	r2, [r4, r3]
 8004f24:	e7d0      	b.n	8004ec8 <_malloc_r+0x20>
 8004f26:	428c      	cmp	r4, r1
 8004f28:	684b      	ldr	r3, [r1, #4]
 8004f2a:	bf16      	itet	ne
 8004f2c:	6063      	strne	r3, [r4, #4]
 8004f2e:	6013      	streq	r3, [r2, #0]
 8004f30:	460c      	movne	r4, r1
 8004f32:	e7eb      	b.n	8004f0c <_malloc_r+0x64>
 8004f34:	460c      	mov	r4, r1
 8004f36:	6849      	ldr	r1, [r1, #4]
 8004f38:	e7cc      	b.n	8004ed4 <_malloc_r+0x2c>
 8004f3a:	1cc4      	adds	r4, r0, #3
 8004f3c:	f024 0403 	bic.w	r4, r4, #3
 8004f40:	42a0      	cmp	r0, r4
 8004f42:	d005      	beq.n	8004f50 <_malloc_r+0xa8>
 8004f44:	1a21      	subs	r1, r4, r0
 8004f46:	4630      	mov	r0, r6
 8004f48:	f000 fae2 	bl	8005510 <_sbrk_r>
 8004f4c:	3001      	adds	r0, #1
 8004f4e:	d0cf      	beq.n	8004ef0 <_malloc_r+0x48>
 8004f50:	6025      	str	r5, [r4, #0]
 8004f52:	e7db      	b.n	8004f0c <_malloc_r+0x64>
 8004f54:	2000009c 	.word	0x2000009c
 8004f58:	200000a0 	.word	0x200000a0

08004f5c <__ssputs_r>:
 8004f5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004f60:	688e      	ldr	r6, [r1, #8]
 8004f62:	429e      	cmp	r6, r3
 8004f64:	4682      	mov	sl, r0
 8004f66:	460c      	mov	r4, r1
 8004f68:	4690      	mov	r8, r2
 8004f6a:	4699      	mov	r9, r3
 8004f6c:	d837      	bhi.n	8004fde <__ssputs_r+0x82>
 8004f6e:	898a      	ldrh	r2, [r1, #12]
 8004f70:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004f74:	d031      	beq.n	8004fda <__ssputs_r+0x7e>
 8004f76:	6825      	ldr	r5, [r4, #0]
 8004f78:	6909      	ldr	r1, [r1, #16]
 8004f7a:	1a6f      	subs	r7, r5, r1
 8004f7c:	6965      	ldr	r5, [r4, #20]
 8004f7e:	2302      	movs	r3, #2
 8004f80:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004f84:	fb95 f5f3 	sdiv	r5, r5, r3
 8004f88:	f109 0301 	add.w	r3, r9, #1
 8004f8c:	443b      	add	r3, r7
 8004f8e:	429d      	cmp	r5, r3
 8004f90:	bf38      	it	cc
 8004f92:	461d      	movcc	r5, r3
 8004f94:	0553      	lsls	r3, r2, #21
 8004f96:	d530      	bpl.n	8004ffa <__ssputs_r+0x9e>
 8004f98:	4629      	mov	r1, r5
 8004f9a:	f7ff ff85 	bl	8004ea8 <_malloc_r>
 8004f9e:	4606      	mov	r6, r0
 8004fa0:	b950      	cbnz	r0, 8004fb8 <__ssputs_r+0x5c>
 8004fa2:	230c      	movs	r3, #12
 8004fa4:	f8ca 3000 	str.w	r3, [sl]
 8004fa8:	89a3      	ldrh	r3, [r4, #12]
 8004faa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004fae:	81a3      	strh	r3, [r4, #12]
 8004fb0:	f04f 30ff 	mov.w	r0, #4294967295
 8004fb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004fb8:	463a      	mov	r2, r7
 8004fba:	6921      	ldr	r1, [r4, #16]
 8004fbc:	f000 fab8 	bl	8005530 <memcpy>
 8004fc0:	89a3      	ldrh	r3, [r4, #12]
 8004fc2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004fc6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004fca:	81a3      	strh	r3, [r4, #12]
 8004fcc:	6126      	str	r6, [r4, #16]
 8004fce:	6165      	str	r5, [r4, #20]
 8004fd0:	443e      	add	r6, r7
 8004fd2:	1bed      	subs	r5, r5, r7
 8004fd4:	6026      	str	r6, [r4, #0]
 8004fd6:	60a5      	str	r5, [r4, #8]
 8004fd8:	464e      	mov	r6, r9
 8004fda:	454e      	cmp	r6, r9
 8004fdc:	d900      	bls.n	8004fe0 <__ssputs_r+0x84>
 8004fde:	464e      	mov	r6, r9
 8004fe0:	4632      	mov	r2, r6
 8004fe2:	4641      	mov	r1, r8
 8004fe4:	6820      	ldr	r0, [r4, #0]
 8004fe6:	f000 faae 	bl	8005546 <memmove>
 8004fea:	68a3      	ldr	r3, [r4, #8]
 8004fec:	1b9b      	subs	r3, r3, r6
 8004fee:	60a3      	str	r3, [r4, #8]
 8004ff0:	6823      	ldr	r3, [r4, #0]
 8004ff2:	441e      	add	r6, r3
 8004ff4:	6026      	str	r6, [r4, #0]
 8004ff6:	2000      	movs	r0, #0
 8004ff8:	e7dc      	b.n	8004fb4 <__ssputs_r+0x58>
 8004ffa:	462a      	mov	r2, r5
 8004ffc:	f000 fabe 	bl	800557c <_realloc_r>
 8005000:	4606      	mov	r6, r0
 8005002:	2800      	cmp	r0, #0
 8005004:	d1e2      	bne.n	8004fcc <__ssputs_r+0x70>
 8005006:	6921      	ldr	r1, [r4, #16]
 8005008:	4650      	mov	r0, sl
 800500a:	f7ff feff 	bl	8004e0c <_free_r>
 800500e:	e7c8      	b.n	8004fa2 <__ssputs_r+0x46>

08005010 <_svfiprintf_r>:
 8005010:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005014:	461d      	mov	r5, r3
 8005016:	898b      	ldrh	r3, [r1, #12]
 8005018:	061f      	lsls	r7, r3, #24
 800501a:	b09d      	sub	sp, #116	; 0x74
 800501c:	4680      	mov	r8, r0
 800501e:	460c      	mov	r4, r1
 8005020:	4616      	mov	r6, r2
 8005022:	d50f      	bpl.n	8005044 <_svfiprintf_r+0x34>
 8005024:	690b      	ldr	r3, [r1, #16]
 8005026:	b96b      	cbnz	r3, 8005044 <_svfiprintf_r+0x34>
 8005028:	2140      	movs	r1, #64	; 0x40
 800502a:	f7ff ff3d 	bl	8004ea8 <_malloc_r>
 800502e:	6020      	str	r0, [r4, #0]
 8005030:	6120      	str	r0, [r4, #16]
 8005032:	b928      	cbnz	r0, 8005040 <_svfiprintf_r+0x30>
 8005034:	230c      	movs	r3, #12
 8005036:	f8c8 3000 	str.w	r3, [r8]
 800503a:	f04f 30ff 	mov.w	r0, #4294967295
 800503e:	e0c8      	b.n	80051d2 <_svfiprintf_r+0x1c2>
 8005040:	2340      	movs	r3, #64	; 0x40
 8005042:	6163      	str	r3, [r4, #20]
 8005044:	2300      	movs	r3, #0
 8005046:	9309      	str	r3, [sp, #36]	; 0x24
 8005048:	2320      	movs	r3, #32
 800504a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800504e:	2330      	movs	r3, #48	; 0x30
 8005050:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005054:	9503      	str	r5, [sp, #12]
 8005056:	f04f 0b01 	mov.w	fp, #1
 800505a:	4637      	mov	r7, r6
 800505c:	463d      	mov	r5, r7
 800505e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8005062:	b10b      	cbz	r3, 8005068 <_svfiprintf_r+0x58>
 8005064:	2b25      	cmp	r3, #37	; 0x25
 8005066:	d13e      	bne.n	80050e6 <_svfiprintf_r+0xd6>
 8005068:	ebb7 0a06 	subs.w	sl, r7, r6
 800506c:	d00b      	beq.n	8005086 <_svfiprintf_r+0x76>
 800506e:	4653      	mov	r3, sl
 8005070:	4632      	mov	r2, r6
 8005072:	4621      	mov	r1, r4
 8005074:	4640      	mov	r0, r8
 8005076:	f7ff ff71 	bl	8004f5c <__ssputs_r>
 800507a:	3001      	adds	r0, #1
 800507c:	f000 80a4 	beq.w	80051c8 <_svfiprintf_r+0x1b8>
 8005080:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005082:	4453      	add	r3, sl
 8005084:	9309      	str	r3, [sp, #36]	; 0x24
 8005086:	783b      	ldrb	r3, [r7, #0]
 8005088:	2b00      	cmp	r3, #0
 800508a:	f000 809d 	beq.w	80051c8 <_svfiprintf_r+0x1b8>
 800508e:	2300      	movs	r3, #0
 8005090:	f04f 32ff 	mov.w	r2, #4294967295
 8005094:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005098:	9304      	str	r3, [sp, #16]
 800509a:	9307      	str	r3, [sp, #28]
 800509c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80050a0:	931a      	str	r3, [sp, #104]	; 0x68
 80050a2:	462f      	mov	r7, r5
 80050a4:	2205      	movs	r2, #5
 80050a6:	f817 1b01 	ldrb.w	r1, [r7], #1
 80050aa:	4850      	ldr	r0, [pc, #320]	; (80051ec <_svfiprintf_r+0x1dc>)
 80050ac:	f7fb f8a0 	bl	80001f0 <memchr>
 80050b0:	9b04      	ldr	r3, [sp, #16]
 80050b2:	b9d0      	cbnz	r0, 80050ea <_svfiprintf_r+0xda>
 80050b4:	06d9      	lsls	r1, r3, #27
 80050b6:	bf44      	itt	mi
 80050b8:	2220      	movmi	r2, #32
 80050ba:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80050be:	071a      	lsls	r2, r3, #28
 80050c0:	bf44      	itt	mi
 80050c2:	222b      	movmi	r2, #43	; 0x2b
 80050c4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80050c8:	782a      	ldrb	r2, [r5, #0]
 80050ca:	2a2a      	cmp	r2, #42	; 0x2a
 80050cc:	d015      	beq.n	80050fa <_svfiprintf_r+0xea>
 80050ce:	9a07      	ldr	r2, [sp, #28]
 80050d0:	462f      	mov	r7, r5
 80050d2:	2000      	movs	r0, #0
 80050d4:	250a      	movs	r5, #10
 80050d6:	4639      	mov	r1, r7
 80050d8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80050dc:	3b30      	subs	r3, #48	; 0x30
 80050de:	2b09      	cmp	r3, #9
 80050e0:	d94d      	bls.n	800517e <_svfiprintf_r+0x16e>
 80050e2:	b1b8      	cbz	r0, 8005114 <_svfiprintf_r+0x104>
 80050e4:	e00f      	b.n	8005106 <_svfiprintf_r+0xf6>
 80050e6:	462f      	mov	r7, r5
 80050e8:	e7b8      	b.n	800505c <_svfiprintf_r+0x4c>
 80050ea:	4a40      	ldr	r2, [pc, #256]	; (80051ec <_svfiprintf_r+0x1dc>)
 80050ec:	1a80      	subs	r0, r0, r2
 80050ee:	fa0b f000 	lsl.w	r0, fp, r0
 80050f2:	4318      	orrs	r0, r3
 80050f4:	9004      	str	r0, [sp, #16]
 80050f6:	463d      	mov	r5, r7
 80050f8:	e7d3      	b.n	80050a2 <_svfiprintf_r+0x92>
 80050fa:	9a03      	ldr	r2, [sp, #12]
 80050fc:	1d11      	adds	r1, r2, #4
 80050fe:	6812      	ldr	r2, [r2, #0]
 8005100:	9103      	str	r1, [sp, #12]
 8005102:	2a00      	cmp	r2, #0
 8005104:	db01      	blt.n	800510a <_svfiprintf_r+0xfa>
 8005106:	9207      	str	r2, [sp, #28]
 8005108:	e004      	b.n	8005114 <_svfiprintf_r+0x104>
 800510a:	4252      	negs	r2, r2
 800510c:	f043 0302 	orr.w	r3, r3, #2
 8005110:	9207      	str	r2, [sp, #28]
 8005112:	9304      	str	r3, [sp, #16]
 8005114:	783b      	ldrb	r3, [r7, #0]
 8005116:	2b2e      	cmp	r3, #46	; 0x2e
 8005118:	d10c      	bne.n	8005134 <_svfiprintf_r+0x124>
 800511a:	787b      	ldrb	r3, [r7, #1]
 800511c:	2b2a      	cmp	r3, #42	; 0x2a
 800511e:	d133      	bne.n	8005188 <_svfiprintf_r+0x178>
 8005120:	9b03      	ldr	r3, [sp, #12]
 8005122:	1d1a      	adds	r2, r3, #4
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	9203      	str	r2, [sp, #12]
 8005128:	2b00      	cmp	r3, #0
 800512a:	bfb8      	it	lt
 800512c:	f04f 33ff 	movlt.w	r3, #4294967295
 8005130:	3702      	adds	r7, #2
 8005132:	9305      	str	r3, [sp, #20]
 8005134:	4d2e      	ldr	r5, [pc, #184]	; (80051f0 <_svfiprintf_r+0x1e0>)
 8005136:	7839      	ldrb	r1, [r7, #0]
 8005138:	2203      	movs	r2, #3
 800513a:	4628      	mov	r0, r5
 800513c:	f7fb f858 	bl	80001f0 <memchr>
 8005140:	b138      	cbz	r0, 8005152 <_svfiprintf_r+0x142>
 8005142:	2340      	movs	r3, #64	; 0x40
 8005144:	1b40      	subs	r0, r0, r5
 8005146:	fa03 f000 	lsl.w	r0, r3, r0
 800514a:	9b04      	ldr	r3, [sp, #16]
 800514c:	4303      	orrs	r3, r0
 800514e:	3701      	adds	r7, #1
 8005150:	9304      	str	r3, [sp, #16]
 8005152:	7839      	ldrb	r1, [r7, #0]
 8005154:	4827      	ldr	r0, [pc, #156]	; (80051f4 <_svfiprintf_r+0x1e4>)
 8005156:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800515a:	2206      	movs	r2, #6
 800515c:	1c7e      	adds	r6, r7, #1
 800515e:	f7fb f847 	bl	80001f0 <memchr>
 8005162:	2800      	cmp	r0, #0
 8005164:	d038      	beq.n	80051d8 <_svfiprintf_r+0x1c8>
 8005166:	4b24      	ldr	r3, [pc, #144]	; (80051f8 <_svfiprintf_r+0x1e8>)
 8005168:	bb13      	cbnz	r3, 80051b0 <_svfiprintf_r+0x1a0>
 800516a:	9b03      	ldr	r3, [sp, #12]
 800516c:	3307      	adds	r3, #7
 800516e:	f023 0307 	bic.w	r3, r3, #7
 8005172:	3308      	adds	r3, #8
 8005174:	9303      	str	r3, [sp, #12]
 8005176:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005178:	444b      	add	r3, r9
 800517a:	9309      	str	r3, [sp, #36]	; 0x24
 800517c:	e76d      	b.n	800505a <_svfiprintf_r+0x4a>
 800517e:	fb05 3202 	mla	r2, r5, r2, r3
 8005182:	2001      	movs	r0, #1
 8005184:	460f      	mov	r7, r1
 8005186:	e7a6      	b.n	80050d6 <_svfiprintf_r+0xc6>
 8005188:	2300      	movs	r3, #0
 800518a:	3701      	adds	r7, #1
 800518c:	9305      	str	r3, [sp, #20]
 800518e:	4619      	mov	r1, r3
 8005190:	250a      	movs	r5, #10
 8005192:	4638      	mov	r0, r7
 8005194:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005198:	3a30      	subs	r2, #48	; 0x30
 800519a:	2a09      	cmp	r2, #9
 800519c:	d903      	bls.n	80051a6 <_svfiprintf_r+0x196>
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d0c8      	beq.n	8005134 <_svfiprintf_r+0x124>
 80051a2:	9105      	str	r1, [sp, #20]
 80051a4:	e7c6      	b.n	8005134 <_svfiprintf_r+0x124>
 80051a6:	fb05 2101 	mla	r1, r5, r1, r2
 80051aa:	2301      	movs	r3, #1
 80051ac:	4607      	mov	r7, r0
 80051ae:	e7f0      	b.n	8005192 <_svfiprintf_r+0x182>
 80051b0:	ab03      	add	r3, sp, #12
 80051b2:	9300      	str	r3, [sp, #0]
 80051b4:	4622      	mov	r2, r4
 80051b6:	4b11      	ldr	r3, [pc, #68]	; (80051fc <_svfiprintf_r+0x1ec>)
 80051b8:	a904      	add	r1, sp, #16
 80051ba:	4640      	mov	r0, r8
 80051bc:	f3af 8000 	nop.w
 80051c0:	f1b0 3fff 	cmp.w	r0, #4294967295
 80051c4:	4681      	mov	r9, r0
 80051c6:	d1d6      	bne.n	8005176 <_svfiprintf_r+0x166>
 80051c8:	89a3      	ldrh	r3, [r4, #12]
 80051ca:	065b      	lsls	r3, r3, #25
 80051cc:	f53f af35 	bmi.w	800503a <_svfiprintf_r+0x2a>
 80051d0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80051d2:	b01d      	add	sp, #116	; 0x74
 80051d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80051d8:	ab03      	add	r3, sp, #12
 80051da:	9300      	str	r3, [sp, #0]
 80051dc:	4622      	mov	r2, r4
 80051de:	4b07      	ldr	r3, [pc, #28]	; (80051fc <_svfiprintf_r+0x1ec>)
 80051e0:	a904      	add	r1, sp, #16
 80051e2:	4640      	mov	r0, r8
 80051e4:	f000 f882 	bl	80052ec <_printf_i>
 80051e8:	e7ea      	b.n	80051c0 <_svfiprintf_r+0x1b0>
 80051ea:	bf00      	nop
 80051ec:	08005638 	.word	0x08005638
 80051f0:	0800563e 	.word	0x0800563e
 80051f4:	08005642 	.word	0x08005642
 80051f8:	00000000 	.word	0x00000000
 80051fc:	08004f5d 	.word	0x08004f5d

08005200 <_printf_common>:
 8005200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005204:	4691      	mov	r9, r2
 8005206:	461f      	mov	r7, r3
 8005208:	688a      	ldr	r2, [r1, #8]
 800520a:	690b      	ldr	r3, [r1, #16]
 800520c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005210:	4293      	cmp	r3, r2
 8005212:	bfb8      	it	lt
 8005214:	4613      	movlt	r3, r2
 8005216:	f8c9 3000 	str.w	r3, [r9]
 800521a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800521e:	4606      	mov	r6, r0
 8005220:	460c      	mov	r4, r1
 8005222:	b112      	cbz	r2, 800522a <_printf_common+0x2a>
 8005224:	3301      	adds	r3, #1
 8005226:	f8c9 3000 	str.w	r3, [r9]
 800522a:	6823      	ldr	r3, [r4, #0]
 800522c:	0699      	lsls	r1, r3, #26
 800522e:	bf42      	ittt	mi
 8005230:	f8d9 3000 	ldrmi.w	r3, [r9]
 8005234:	3302      	addmi	r3, #2
 8005236:	f8c9 3000 	strmi.w	r3, [r9]
 800523a:	6825      	ldr	r5, [r4, #0]
 800523c:	f015 0506 	ands.w	r5, r5, #6
 8005240:	d107      	bne.n	8005252 <_printf_common+0x52>
 8005242:	f104 0a19 	add.w	sl, r4, #25
 8005246:	68e3      	ldr	r3, [r4, #12]
 8005248:	f8d9 2000 	ldr.w	r2, [r9]
 800524c:	1a9b      	subs	r3, r3, r2
 800524e:	42ab      	cmp	r3, r5
 8005250:	dc28      	bgt.n	80052a4 <_printf_common+0xa4>
 8005252:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8005256:	6822      	ldr	r2, [r4, #0]
 8005258:	3300      	adds	r3, #0
 800525a:	bf18      	it	ne
 800525c:	2301      	movne	r3, #1
 800525e:	0692      	lsls	r2, r2, #26
 8005260:	d42d      	bmi.n	80052be <_printf_common+0xbe>
 8005262:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005266:	4639      	mov	r1, r7
 8005268:	4630      	mov	r0, r6
 800526a:	47c0      	blx	r8
 800526c:	3001      	adds	r0, #1
 800526e:	d020      	beq.n	80052b2 <_printf_common+0xb2>
 8005270:	6823      	ldr	r3, [r4, #0]
 8005272:	68e5      	ldr	r5, [r4, #12]
 8005274:	f8d9 2000 	ldr.w	r2, [r9]
 8005278:	f003 0306 	and.w	r3, r3, #6
 800527c:	2b04      	cmp	r3, #4
 800527e:	bf08      	it	eq
 8005280:	1aad      	subeq	r5, r5, r2
 8005282:	68a3      	ldr	r3, [r4, #8]
 8005284:	6922      	ldr	r2, [r4, #16]
 8005286:	bf0c      	ite	eq
 8005288:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800528c:	2500      	movne	r5, #0
 800528e:	4293      	cmp	r3, r2
 8005290:	bfc4      	itt	gt
 8005292:	1a9b      	subgt	r3, r3, r2
 8005294:	18ed      	addgt	r5, r5, r3
 8005296:	f04f 0900 	mov.w	r9, #0
 800529a:	341a      	adds	r4, #26
 800529c:	454d      	cmp	r5, r9
 800529e:	d11a      	bne.n	80052d6 <_printf_common+0xd6>
 80052a0:	2000      	movs	r0, #0
 80052a2:	e008      	b.n	80052b6 <_printf_common+0xb6>
 80052a4:	2301      	movs	r3, #1
 80052a6:	4652      	mov	r2, sl
 80052a8:	4639      	mov	r1, r7
 80052aa:	4630      	mov	r0, r6
 80052ac:	47c0      	blx	r8
 80052ae:	3001      	adds	r0, #1
 80052b0:	d103      	bne.n	80052ba <_printf_common+0xba>
 80052b2:	f04f 30ff 	mov.w	r0, #4294967295
 80052b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80052ba:	3501      	adds	r5, #1
 80052bc:	e7c3      	b.n	8005246 <_printf_common+0x46>
 80052be:	18e1      	adds	r1, r4, r3
 80052c0:	1c5a      	adds	r2, r3, #1
 80052c2:	2030      	movs	r0, #48	; 0x30
 80052c4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80052c8:	4422      	add	r2, r4
 80052ca:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80052ce:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80052d2:	3302      	adds	r3, #2
 80052d4:	e7c5      	b.n	8005262 <_printf_common+0x62>
 80052d6:	2301      	movs	r3, #1
 80052d8:	4622      	mov	r2, r4
 80052da:	4639      	mov	r1, r7
 80052dc:	4630      	mov	r0, r6
 80052de:	47c0      	blx	r8
 80052e0:	3001      	adds	r0, #1
 80052e2:	d0e6      	beq.n	80052b2 <_printf_common+0xb2>
 80052e4:	f109 0901 	add.w	r9, r9, #1
 80052e8:	e7d8      	b.n	800529c <_printf_common+0x9c>
	...

080052ec <_printf_i>:
 80052ec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80052f0:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80052f4:	460c      	mov	r4, r1
 80052f6:	7e09      	ldrb	r1, [r1, #24]
 80052f8:	b085      	sub	sp, #20
 80052fa:	296e      	cmp	r1, #110	; 0x6e
 80052fc:	4617      	mov	r7, r2
 80052fe:	4606      	mov	r6, r0
 8005300:	4698      	mov	r8, r3
 8005302:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005304:	f000 80b3 	beq.w	800546e <_printf_i+0x182>
 8005308:	d822      	bhi.n	8005350 <_printf_i+0x64>
 800530a:	2963      	cmp	r1, #99	; 0x63
 800530c:	d036      	beq.n	800537c <_printf_i+0x90>
 800530e:	d80a      	bhi.n	8005326 <_printf_i+0x3a>
 8005310:	2900      	cmp	r1, #0
 8005312:	f000 80b9 	beq.w	8005488 <_printf_i+0x19c>
 8005316:	2958      	cmp	r1, #88	; 0x58
 8005318:	f000 8083 	beq.w	8005422 <_printf_i+0x136>
 800531c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005320:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8005324:	e032      	b.n	800538c <_printf_i+0xa0>
 8005326:	2964      	cmp	r1, #100	; 0x64
 8005328:	d001      	beq.n	800532e <_printf_i+0x42>
 800532a:	2969      	cmp	r1, #105	; 0x69
 800532c:	d1f6      	bne.n	800531c <_printf_i+0x30>
 800532e:	6820      	ldr	r0, [r4, #0]
 8005330:	6813      	ldr	r3, [r2, #0]
 8005332:	0605      	lsls	r5, r0, #24
 8005334:	f103 0104 	add.w	r1, r3, #4
 8005338:	d52a      	bpl.n	8005390 <_printf_i+0xa4>
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	6011      	str	r1, [r2, #0]
 800533e:	2b00      	cmp	r3, #0
 8005340:	da03      	bge.n	800534a <_printf_i+0x5e>
 8005342:	222d      	movs	r2, #45	; 0x2d
 8005344:	425b      	negs	r3, r3
 8005346:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800534a:	486f      	ldr	r0, [pc, #444]	; (8005508 <_printf_i+0x21c>)
 800534c:	220a      	movs	r2, #10
 800534e:	e039      	b.n	80053c4 <_printf_i+0xd8>
 8005350:	2973      	cmp	r1, #115	; 0x73
 8005352:	f000 809d 	beq.w	8005490 <_printf_i+0x1a4>
 8005356:	d808      	bhi.n	800536a <_printf_i+0x7e>
 8005358:	296f      	cmp	r1, #111	; 0x6f
 800535a:	d020      	beq.n	800539e <_printf_i+0xb2>
 800535c:	2970      	cmp	r1, #112	; 0x70
 800535e:	d1dd      	bne.n	800531c <_printf_i+0x30>
 8005360:	6823      	ldr	r3, [r4, #0]
 8005362:	f043 0320 	orr.w	r3, r3, #32
 8005366:	6023      	str	r3, [r4, #0]
 8005368:	e003      	b.n	8005372 <_printf_i+0x86>
 800536a:	2975      	cmp	r1, #117	; 0x75
 800536c:	d017      	beq.n	800539e <_printf_i+0xb2>
 800536e:	2978      	cmp	r1, #120	; 0x78
 8005370:	d1d4      	bne.n	800531c <_printf_i+0x30>
 8005372:	2378      	movs	r3, #120	; 0x78
 8005374:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005378:	4864      	ldr	r0, [pc, #400]	; (800550c <_printf_i+0x220>)
 800537a:	e055      	b.n	8005428 <_printf_i+0x13c>
 800537c:	6813      	ldr	r3, [r2, #0]
 800537e:	1d19      	adds	r1, r3, #4
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	6011      	str	r1, [r2, #0]
 8005384:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005388:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800538c:	2301      	movs	r3, #1
 800538e:	e08c      	b.n	80054aa <_printf_i+0x1be>
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	6011      	str	r1, [r2, #0]
 8005394:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005398:	bf18      	it	ne
 800539a:	b21b      	sxthne	r3, r3
 800539c:	e7cf      	b.n	800533e <_printf_i+0x52>
 800539e:	6813      	ldr	r3, [r2, #0]
 80053a0:	6825      	ldr	r5, [r4, #0]
 80053a2:	1d18      	adds	r0, r3, #4
 80053a4:	6010      	str	r0, [r2, #0]
 80053a6:	0628      	lsls	r0, r5, #24
 80053a8:	d501      	bpl.n	80053ae <_printf_i+0xc2>
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	e002      	b.n	80053b4 <_printf_i+0xc8>
 80053ae:	0668      	lsls	r0, r5, #25
 80053b0:	d5fb      	bpl.n	80053aa <_printf_i+0xbe>
 80053b2:	881b      	ldrh	r3, [r3, #0]
 80053b4:	4854      	ldr	r0, [pc, #336]	; (8005508 <_printf_i+0x21c>)
 80053b6:	296f      	cmp	r1, #111	; 0x6f
 80053b8:	bf14      	ite	ne
 80053ba:	220a      	movne	r2, #10
 80053bc:	2208      	moveq	r2, #8
 80053be:	2100      	movs	r1, #0
 80053c0:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80053c4:	6865      	ldr	r5, [r4, #4]
 80053c6:	60a5      	str	r5, [r4, #8]
 80053c8:	2d00      	cmp	r5, #0
 80053ca:	f2c0 8095 	blt.w	80054f8 <_printf_i+0x20c>
 80053ce:	6821      	ldr	r1, [r4, #0]
 80053d0:	f021 0104 	bic.w	r1, r1, #4
 80053d4:	6021      	str	r1, [r4, #0]
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d13d      	bne.n	8005456 <_printf_i+0x16a>
 80053da:	2d00      	cmp	r5, #0
 80053dc:	f040 808e 	bne.w	80054fc <_printf_i+0x210>
 80053e0:	4665      	mov	r5, ip
 80053e2:	2a08      	cmp	r2, #8
 80053e4:	d10b      	bne.n	80053fe <_printf_i+0x112>
 80053e6:	6823      	ldr	r3, [r4, #0]
 80053e8:	07db      	lsls	r3, r3, #31
 80053ea:	d508      	bpl.n	80053fe <_printf_i+0x112>
 80053ec:	6923      	ldr	r3, [r4, #16]
 80053ee:	6862      	ldr	r2, [r4, #4]
 80053f0:	429a      	cmp	r2, r3
 80053f2:	bfde      	ittt	le
 80053f4:	2330      	movle	r3, #48	; 0x30
 80053f6:	f805 3c01 	strble.w	r3, [r5, #-1]
 80053fa:	f105 35ff 	addle.w	r5, r5, #4294967295
 80053fe:	ebac 0305 	sub.w	r3, ip, r5
 8005402:	6123      	str	r3, [r4, #16]
 8005404:	f8cd 8000 	str.w	r8, [sp]
 8005408:	463b      	mov	r3, r7
 800540a:	aa03      	add	r2, sp, #12
 800540c:	4621      	mov	r1, r4
 800540e:	4630      	mov	r0, r6
 8005410:	f7ff fef6 	bl	8005200 <_printf_common>
 8005414:	3001      	adds	r0, #1
 8005416:	d14d      	bne.n	80054b4 <_printf_i+0x1c8>
 8005418:	f04f 30ff 	mov.w	r0, #4294967295
 800541c:	b005      	add	sp, #20
 800541e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005422:	4839      	ldr	r0, [pc, #228]	; (8005508 <_printf_i+0x21c>)
 8005424:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8005428:	6813      	ldr	r3, [r2, #0]
 800542a:	6821      	ldr	r1, [r4, #0]
 800542c:	1d1d      	adds	r5, r3, #4
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	6015      	str	r5, [r2, #0]
 8005432:	060a      	lsls	r2, r1, #24
 8005434:	d50b      	bpl.n	800544e <_printf_i+0x162>
 8005436:	07ca      	lsls	r2, r1, #31
 8005438:	bf44      	itt	mi
 800543a:	f041 0120 	orrmi.w	r1, r1, #32
 800543e:	6021      	strmi	r1, [r4, #0]
 8005440:	b91b      	cbnz	r3, 800544a <_printf_i+0x15e>
 8005442:	6822      	ldr	r2, [r4, #0]
 8005444:	f022 0220 	bic.w	r2, r2, #32
 8005448:	6022      	str	r2, [r4, #0]
 800544a:	2210      	movs	r2, #16
 800544c:	e7b7      	b.n	80053be <_printf_i+0xd2>
 800544e:	064d      	lsls	r5, r1, #25
 8005450:	bf48      	it	mi
 8005452:	b29b      	uxthmi	r3, r3
 8005454:	e7ef      	b.n	8005436 <_printf_i+0x14a>
 8005456:	4665      	mov	r5, ip
 8005458:	fbb3 f1f2 	udiv	r1, r3, r2
 800545c:	fb02 3311 	mls	r3, r2, r1, r3
 8005460:	5cc3      	ldrb	r3, [r0, r3]
 8005462:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8005466:	460b      	mov	r3, r1
 8005468:	2900      	cmp	r1, #0
 800546a:	d1f5      	bne.n	8005458 <_printf_i+0x16c>
 800546c:	e7b9      	b.n	80053e2 <_printf_i+0xf6>
 800546e:	6813      	ldr	r3, [r2, #0]
 8005470:	6825      	ldr	r5, [r4, #0]
 8005472:	6961      	ldr	r1, [r4, #20]
 8005474:	1d18      	adds	r0, r3, #4
 8005476:	6010      	str	r0, [r2, #0]
 8005478:	0628      	lsls	r0, r5, #24
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	d501      	bpl.n	8005482 <_printf_i+0x196>
 800547e:	6019      	str	r1, [r3, #0]
 8005480:	e002      	b.n	8005488 <_printf_i+0x19c>
 8005482:	066a      	lsls	r2, r5, #25
 8005484:	d5fb      	bpl.n	800547e <_printf_i+0x192>
 8005486:	8019      	strh	r1, [r3, #0]
 8005488:	2300      	movs	r3, #0
 800548a:	6123      	str	r3, [r4, #16]
 800548c:	4665      	mov	r5, ip
 800548e:	e7b9      	b.n	8005404 <_printf_i+0x118>
 8005490:	6813      	ldr	r3, [r2, #0]
 8005492:	1d19      	adds	r1, r3, #4
 8005494:	6011      	str	r1, [r2, #0]
 8005496:	681d      	ldr	r5, [r3, #0]
 8005498:	6862      	ldr	r2, [r4, #4]
 800549a:	2100      	movs	r1, #0
 800549c:	4628      	mov	r0, r5
 800549e:	f7fa fea7 	bl	80001f0 <memchr>
 80054a2:	b108      	cbz	r0, 80054a8 <_printf_i+0x1bc>
 80054a4:	1b40      	subs	r0, r0, r5
 80054a6:	6060      	str	r0, [r4, #4]
 80054a8:	6863      	ldr	r3, [r4, #4]
 80054aa:	6123      	str	r3, [r4, #16]
 80054ac:	2300      	movs	r3, #0
 80054ae:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80054b2:	e7a7      	b.n	8005404 <_printf_i+0x118>
 80054b4:	6923      	ldr	r3, [r4, #16]
 80054b6:	462a      	mov	r2, r5
 80054b8:	4639      	mov	r1, r7
 80054ba:	4630      	mov	r0, r6
 80054bc:	47c0      	blx	r8
 80054be:	3001      	adds	r0, #1
 80054c0:	d0aa      	beq.n	8005418 <_printf_i+0x12c>
 80054c2:	6823      	ldr	r3, [r4, #0]
 80054c4:	079b      	lsls	r3, r3, #30
 80054c6:	d413      	bmi.n	80054f0 <_printf_i+0x204>
 80054c8:	68e0      	ldr	r0, [r4, #12]
 80054ca:	9b03      	ldr	r3, [sp, #12]
 80054cc:	4298      	cmp	r0, r3
 80054ce:	bfb8      	it	lt
 80054d0:	4618      	movlt	r0, r3
 80054d2:	e7a3      	b.n	800541c <_printf_i+0x130>
 80054d4:	2301      	movs	r3, #1
 80054d6:	464a      	mov	r2, r9
 80054d8:	4639      	mov	r1, r7
 80054da:	4630      	mov	r0, r6
 80054dc:	47c0      	blx	r8
 80054de:	3001      	adds	r0, #1
 80054e0:	d09a      	beq.n	8005418 <_printf_i+0x12c>
 80054e2:	3501      	adds	r5, #1
 80054e4:	68e3      	ldr	r3, [r4, #12]
 80054e6:	9a03      	ldr	r2, [sp, #12]
 80054e8:	1a9b      	subs	r3, r3, r2
 80054ea:	42ab      	cmp	r3, r5
 80054ec:	dcf2      	bgt.n	80054d4 <_printf_i+0x1e8>
 80054ee:	e7eb      	b.n	80054c8 <_printf_i+0x1dc>
 80054f0:	2500      	movs	r5, #0
 80054f2:	f104 0919 	add.w	r9, r4, #25
 80054f6:	e7f5      	b.n	80054e4 <_printf_i+0x1f8>
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d1ac      	bne.n	8005456 <_printf_i+0x16a>
 80054fc:	7803      	ldrb	r3, [r0, #0]
 80054fe:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005502:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005506:	e76c      	b.n	80053e2 <_printf_i+0xf6>
 8005508:	08005649 	.word	0x08005649
 800550c:	0800565a 	.word	0x0800565a

08005510 <_sbrk_r>:
 8005510:	b538      	push	{r3, r4, r5, lr}
 8005512:	4c06      	ldr	r4, [pc, #24]	; (800552c <_sbrk_r+0x1c>)
 8005514:	2300      	movs	r3, #0
 8005516:	4605      	mov	r5, r0
 8005518:	4608      	mov	r0, r1
 800551a:	6023      	str	r3, [r4, #0]
 800551c:	f7fb fcd8 	bl	8000ed0 <_sbrk>
 8005520:	1c43      	adds	r3, r0, #1
 8005522:	d102      	bne.n	800552a <_sbrk_r+0x1a>
 8005524:	6823      	ldr	r3, [r4, #0]
 8005526:	b103      	cbz	r3, 800552a <_sbrk_r+0x1a>
 8005528:	602b      	str	r3, [r5, #0]
 800552a:	bd38      	pop	{r3, r4, r5, pc}
 800552c:	20005074 	.word	0x20005074

08005530 <memcpy>:
 8005530:	b510      	push	{r4, lr}
 8005532:	1e43      	subs	r3, r0, #1
 8005534:	440a      	add	r2, r1
 8005536:	4291      	cmp	r1, r2
 8005538:	d100      	bne.n	800553c <memcpy+0xc>
 800553a:	bd10      	pop	{r4, pc}
 800553c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005540:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005544:	e7f7      	b.n	8005536 <memcpy+0x6>

08005546 <memmove>:
 8005546:	4288      	cmp	r0, r1
 8005548:	b510      	push	{r4, lr}
 800554a:	eb01 0302 	add.w	r3, r1, r2
 800554e:	d807      	bhi.n	8005560 <memmove+0x1a>
 8005550:	1e42      	subs	r2, r0, #1
 8005552:	4299      	cmp	r1, r3
 8005554:	d00a      	beq.n	800556c <memmove+0x26>
 8005556:	f811 4b01 	ldrb.w	r4, [r1], #1
 800555a:	f802 4f01 	strb.w	r4, [r2, #1]!
 800555e:	e7f8      	b.n	8005552 <memmove+0xc>
 8005560:	4283      	cmp	r3, r0
 8005562:	d9f5      	bls.n	8005550 <memmove+0xa>
 8005564:	1881      	adds	r1, r0, r2
 8005566:	1ad2      	subs	r2, r2, r3
 8005568:	42d3      	cmn	r3, r2
 800556a:	d100      	bne.n	800556e <memmove+0x28>
 800556c:	bd10      	pop	{r4, pc}
 800556e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005572:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8005576:	e7f7      	b.n	8005568 <memmove+0x22>

08005578 <__malloc_lock>:
 8005578:	4770      	bx	lr

0800557a <__malloc_unlock>:
 800557a:	4770      	bx	lr

0800557c <_realloc_r>:
 800557c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800557e:	4607      	mov	r7, r0
 8005580:	4614      	mov	r4, r2
 8005582:	460e      	mov	r6, r1
 8005584:	b921      	cbnz	r1, 8005590 <_realloc_r+0x14>
 8005586:	4611      	mov	r1, r2
 8005588:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800558c:	f7ff bc8c 	b.w	8004ea8 <_malloc_r>
 8005590:	b922      	cbnz	r2, 800559c <_realloc_r+0x20>
 8005592:	f7ff fc3b 	bl	8004e0c <_free_r>
 8005596:	4625      	mov	r5, r4
 8005598:	4628      	mov	r0, r5
 800559a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800559c:	f000 f814 	bl	80055c8 <_malloc_usable_size_r>
 80055a0:	42a0      	cmp	r0, r4
 80055a2:	d20f      	bcs.n	80055c4 <_realloc_r+0x48>
 80055a4:	4621      	mov	r1, r4
 80055a6:	4638      	mov	r0, r7
 80055a8:	f7ff fc7e 	bl	8004ea8 <_malloc_r>
 80055ac:	4605      	mov	r5, r0
 80055ae:	2800      	cmp	r0, #0
 80055b0:	d0f2      	beq.n	8005598 <_realloc_r+0x1c>
 80055b2:	4631      	mov	r1, r6
 80055b4:	4622      	mov	r2, r4
 80055b6:	f7ff ffbb 	bl	8005530 <memcpy>
 80055ba:	4631      	mov	r1, r6
 80055bc:	4638      	mov	r0, r7
 80055be:	f7ff fc25 	bl	8004e0c <_free_r>
 80055c2:	e7e9      	b.n	8005598 <_realloc_r+0x1c>
 80055c4:	4635      	mov	r5, r6
 80055c6:	e7e7      	b.n	8005598 <_realloc_r+0x1c>

080055c8 <_malloc_usable_size_r>:
 80055c8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80055cc:	1f18      	subs	r0, r3, #4
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	bfbc      	itt	lt
 80055d2:	580b      	ldrlt	r3, [r1, r0]
 80055d4:	18c0      	addlt	r0, r0, r3
 80055d6:	4770      	bx	lr

080055d8 <_init>:
 80055d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80055da:	bf00      	nop
 80055dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80055de:	bc08      	pop	{r3}
 80055e0:	469e      	mov	lr, r3
 80055e2:	4770      	bx	lr

080055e4 <_fini>:
 80055e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80055e6:	bf00      	nop
 80055e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80055ea:	bc08      	pop	{r3}
 80055ec:	469e      	mov	lr, r3
 80055ee:	4770      	bx	lr
