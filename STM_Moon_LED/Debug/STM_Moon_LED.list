
STM_Moon_LED.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000234f4  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00009970  08023698  08023698  00033698  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0802d008  0802d008  00040074  2**0
                  CONTENTS
  4 .ARM          00000008  0802d008  0802d008  0003d008  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0802d010  0802d010  00040074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0802d010  0802d010  0003d010  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0802d014  0802d014  0003d014  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  0802d018  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000055cc  20000074  0802d08c  00040074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20005640  0802d08c  00045640  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00040074  2**0
                  CONTENTS, READONLY
 12 .debug_info   000166d1  00000000  00000000  000400a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002f6a  00000000  00000000  00056775  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000010c8  00000000  00000000  000596e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000f80  00000000  00000000  0005a7a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001940b  00000000  00000000  0005b728  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000119c0  00000000  00000000  00074b33  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0009067e  00000000  00000000  000864f3  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00116b71  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004c98  00000000  00000000  00116bec  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000074 	.word	0x20000074
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0802367c 	.word	0x0802367c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000078 	.word	0x20000078
 80001dc:	0802367c 	.word	0x0802367c

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ce:	f1a4 0401 	sub.w	r4, r4, #1
 80003d2:	d1e9      	bne.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2uiz>:
 8000b68:	004a      	lsls	r2, r1, #1
 8000b6a:	d211      	bcs.n	8000b90 <__aeabi_d2uiz+0x28>
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d211      	bcs.n	8000b96 <__aeabi_d2uiz+0x2e>
 8000b72:	d50d      	bpl.n	8000b90 <__aeabi_d2uiz+0x28>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d40e      	bmi.n	8000b9c <__aeabi_d2uiz+0x34>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b8e:	4770      	bx	lr
 8000b90:	f04f 0000 	mov.w	r0, #0
 8000b94:	4770      	bx	lr
 8000b96:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_d2uiz+0x3a>
 8000b9c:	f04f 30ff 	mov.w	r0, #4294967295
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0000 	mov.w	r0, #0
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b972 	b.w	8000ea4 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9e08      	ldr	r6, [sp, #32]
 8000bde:	4604      	mov	r4, r0
 8000be0:	4688      	mov	r8, r1
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d14b      	bne.n	8000c7e <__udivmoddi4+0xa6>
 8000be6:	428a      	cmp	r2, r1
 8000be8:	4615      	mov	r5, r2
 8000bea:	d967      	bls.n	8000cbc <__udivmoddi4+0xe4>
 8000bec:	fab2 f282 	clz	r2, r2
 8000bf0:	b14a      	cbz	r2, 8000c06 <__udivmoddi4+0x2e>
 8000bf2:	f1c2 0720 	rsb	r7, r2, #32
 8000bf6:	fa01 f302 	lsl.w	r3, r1, r2
 8000bfa:	fa20 f707 	lsr.w	r7, r0, r7
 8000bfe:	4095      	lsls	r5, r2
 8000c00:	ea47 0803 	orr.w	r8, r7, r3
 8000c04:	4094      	lsls	r4, r2
 8000c06:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c0a:	0c23      	lsrs	r3, r4, #16
 8000c0c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000c10:	fa1f fc85 	uxth.w	ip, r5
 8000c14:	fb0e 8817 	mls	r8, lr, r7, r8
 8000c18:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c1c:	fb07 f10c 	mul.w	r1, r7, ip
 8000c20:	4299      	cmp	r1, r3
 8000c22:	d909      	bls.n	8000c38 <__udivmoddi4+0x60>
 8000c24:	18eb      	adds	r3, r5, r3
 8000c26:	f107 30ff 	add.w	r0, r7, #4294967295
 8000c2a:	f080 811b 	bcs.w	8000e64 <__udivmoddi4+0x28c>
 8000c2e:	4299      	cmp	r1, r3
 8000c30:	f240 8118 	bls.w	8000e64 <__udivmoddi4+0x28c>
 8000c34:	3f02      	subs	r7, #2
 8000c36:	442b      	add	r3, r5
 8000c38:	1a5b      	subs	r3, r3, r1
 8000c3a:	b2a4      	uxth	r4, r4
 8000c3c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c40:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c44:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c48:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c4c:	45a4      	cmp	ip, r4
 8000c4e:	d909      	bls.n	8000c64 <__udivmoddi4+0x8c>
 8000c50:	192c      	adds	r4, r5, r4
 8000c52:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c56:	f080 8107 	bcs.w	8000e68 <__udivmoddi4+0x290>
 8000c5a:	45a4      	cmp	ip, r4
 8000c5c:	f240 8104 	bls.w	8000e68 <__udivmoddi4+0x290>
 8000c60:	3802      	subs	r0, #2
 8000c62:	442c      	add	r4, r5
 8000c64:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000c68:	eba4 040c 	sub.w	r4, r4, ip
 8000c6c:	2700      	movs	r7, #0
 8000c6e:	b11e      	cbz	r6, 8000c78 <__udivmoddi4+0xa0>
 8000c70:	40d4      	lsrs	r4, r2
 8000c72:	2300      	movs	r3, #0
 8000c74:	e9c6 4300 	strd	r4, r3, [r6]
 8000c78:	4639      	mov	r1, r7
 8000c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7e:	428b      	cmp	r3, r1
 8000c80:	d909      	bls.n	8000c96 <__udivmoddi4+0xbe>
 8000c82:	2e00      	cmp	r6, #0
 8000c84:	f000 80eb 	beq.w	8000e5e <__udivmoddi4+0x286>
 8000c88:	2700      	movs	r7, #0
 8000c8a:	e9c6 0100 	strd	r0, r1, [r6]
 8000c8e:	4638      	mov	r0, r7
 8000c90:	4639      	mov	r1, r7
 8000c92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c96:	fab3 f783 	clz	r7, r3
 8000c9a:	2f00      	cmp	r7, #0
 8000c9c:	d147      	bne.n	8000d2e <__udivmoddi4+0x156>
 8000c9e:	428b      	cmp	r3, r1
 8000ca0:	d302      	bcc.n	8000ca8 <__udivmoddi4+0xd0>
 8000ca2:	4282      	cmp	r2, r0
 8000ca4:	f200 80fa 	bhi.w	8000e9c <__udivmoddi4+0x2c4>
 8000ca8:	1a84      	subs	r4, r0, r2
 8000caa:	eb61 0303 	sbc.w	r3, r1, r3
 8000cae:	2001      	movs	r0, #1
 8000cb0:	4698      	mov	r8, r3
 8000cb2:	2e00      	cmp	r6, #0
 8000cb4:	d0e0      	beq.n	8000c78 <__udivmoddi4+0xa0>
 8000cb6:	e9c6 4800 	strd	r4, r8, [r6]
 8000cba:	e7dd      	b.n	8000c78 <__udivmoddi4+0xa0>
 8000cbc:	b902      	cbnz	r2, 8000cc0 <__udivmoddi4+0xe8>
 8000cbe:	deff      	udf	#255	; 0xff
 8000cc0:	fab2 f282 	clz	r2, r2
 8000cc4:	2a00      	cmp	r2, #0
 8000cc6:	f040 808f 	bne.w	8000de8 <__udivmoddi4+0x210>
 8000cca:	1b49      	subs	r1, r1, r5
 8000ccc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cd0:	fa1f f885 	uxth.w	r8, r5
 8000cd4:	2701      	movs	r7, #1
 8000cd6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000cda:	0c23      	lsrs	r3, r4, #16
 8000cdc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000ce0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ce4:	fb08 f10c 	mul.w	r1, r8, ip
 8000ce8:	4299      	cmp	r1, r3
 8000cea:	d907      	bls.n	8000cfc <__udivmoddi4+0x124>
 8000cec:	18eb      	adds	r3, r5, r3
 8000cee:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000cf2:	d202      	bcs.n	8000cfa <__udivmoddi4+0x122>
 8000cf4:	4299      	cmp	r1, r3
 8000cf6:	f200 80cd 	bhi.w	8000e94 <__udivmoddi4+0x2bc>
 8000cfa:	4684      	mov	ip, r0
 8000cfc:	1a59      	subs	r1, r3, r1
 8000cfe:	b2a3      	uxth	r3, r4
 8000d00:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d04:	fb0e 1410 	mls	r4, lr, r0, r1
 8000d08:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000d0c:	fb08 f800 	mul.w	r8, r8, r0
 8000d10:	45a0      	cmp	r8, r4
 8000d12:	d907      	bls.n	8000d24 <__udivmoddi4+0x14c>
 8000d14:	192c      	adds	r4, r5, r4
 8000d16:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d1a:	d202      	bcs.n	8000d22 <__udivmoddi4+0x14a>
 8000d1c:	45a0      	cmp	r8, r4
 8000d1e:	f200 80b6 	bhi.w	8000e8e <__udivmoddi4+0x2b6>
 8000d22:	4618      	mov	r0, r3
 8000d24:	eba4 0408 	sub.w	r4, r4, r8
 8000d28:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d2c:	e79f      	b.n	8000c6e <__udivmoddi4+0x96>
 8000d2e:	f1c7 0c20 	rsb	ip, r7, #32
 8000d32:	40bb      	lsls	r3, r7
 8000d34:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000d38:	ea4e 0e03 	orr.w	lr, lr, r3
 8000d3c:	fa01 f407 	lsl.w	r4, r1, r7
 8000d40:	fa20 f50c 	lsr.w	r5, r0, ip
 8000d44:	fa21 f30c 	lsr.w	r3, r1, ip
 8000d48:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000d4c:	4325      	orrs	r5, r4
 8000d4e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000d52:	0c2c      	lsrs	r4, r5, #16
 8000d54:	fb08 3319 	mls	r3, r8, r9, r3
 8000d58:	fa1f fa8e 	uxth.w	sl, lr
 8000d5c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000d60:	fb09 f40a 	mul.w	r4, r9, sl
 8000d64:	429c      	cmp	r4, r3
 8000d66:	fa02 f207 	lsl.w	r2, r2, r7
 8000d6a:	fa00 f107 	lsl.w	r1, r0, r7
 8000d6e:	d90b      	bls.n	8000d88 <__udivmoddi4+0x1b0>
 8000d70:	eb1e 0303 	adds.w	r3, lr, r3
 8000d74:	f109 30ff 	add.w	r0, r9, #4294967295
 8000d78:	f080 8087 	bcs.w	8000e8a <__udivmoddi4+0x2b2>
 8000d7c:	429c      	cmp	r4, r3
 8000d7e:	f240 8084 	bls.w	8000e8a <__udivmoddi4+0x2b2>
 8000d82:	f1a9 0902 	sub.w	r9, r9, #2
 8000d86:	4473      	add	r3, lr
 8000d88:	1b1b      	subs	r3, r3, r4
 8000d8a:	b2ad      	uxth	r5, r5
 8000d8c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d90:	fb08 3310 	mls	r3, r8, r0, r3
 8000d94:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000d98:	fb00 fa0a 	mul.w	sl, r0, sl
 8000d9c:	45a2      	cmp	sl, r4
 8000d9e:	d908      	bls.n	8000db2 <__udivmoddi4+0x1da>
 8000da0:	eb1e 0404 	adds.w	r4, lr, r4
 8000da4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000da8:	d26b      	bcs.n	8000e82 <__udivmoddi4+0x2aa>
 8000daa:	45a2      	cmp	sl, r4
 8000dac:	d969      	bls.n	8000e82 <__udivmoddi4+0x2aa>
 8000dae:	3802      	subs	r0, #2
 8000db0:	4474      	add	r4, lr
 8000db2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000db6:	fba0 8902 	umull	r8, r9, r0, r2
 8000dba:	eba4 040a 	sub.w	r4, r4, sl
 8000dbe:	454c      	cmp	r4, r9
 8000dc0:	46c2      	mov	sl, r8
 8000dc2:	464b      	mov	r3, r9
 8000dc4:	d354      	bcc.n	8000e70 <__udivmoddi4+0x298>
 8000dc6:	d051      	beq.n	8000e6c <__udivmoddi4+0x294>
 8000dc8:	2e00      	cmp	r6, #0
 8000dca:	d069      	beq.n	8000ea0 <__udivmoddi4+0x2c8>
 8000dcc:	ebb1 050a 	subs.w	r5, r1, sl
 8000dd0:	eb64 0403 	sbc.w	r4, r4, r3
 8000dd4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000dd8:	40fd      	lsrs	r5, r7
 8000dda:	40fc      	lsrs	r4, r7
 8000ddc:	ea4c 0505 	orr.w	r5, ip, r5
 8000de0:	e9c6 5400 	strd	r5, r4, [r6]
 8000de4:	2700      	movs	r7, #0
 8000de6:	e747      	b.n	8000c78 <__udivmoddi4+0xa0>
 8000de8:	f1c2 0320 	rsb	r3, r2, #32
 8000dec:	fa20 f703 	lsr.w	r7, r0, r3
 8000df0:	4095      	lsls	r5, r2
 8000df2:	fa01 f002 	lsl.w	r0, r1, r2
 8000df6:	fa21 f303 	lsr.w	r3, r1, r3
 8000dfa:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000dfe:	4338      	orrs	r0, r7
 8000e00:	0c01      	lsrs	r1, r0, #16
 8000e02:	fbb3 f7fe 	udiv	r7, r3, lr
 8000e06:	fa1f f885 	uxth.w	r8, r5
 8000e0a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000e0e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e12:	fb07 f308 	mul.w	r3, r7, r8
 8000e16:	428b      	cmp	r3, r1
 8000e18:	fa04 f402 	lsl.w	r4, r4, r2
 8000e1c:	d907      	bls.n	8000e2e <__udivmoddi4+0x256>
 8000e1e:	1869      	adds	r1, r5, r1
 8000e20:	f107 3cff 	add.w	ip, r7, #4294967295
 8000e24:	d22f      	bcs.n	8000e86 <__udivmoddi4+0x2ae>
 8000e26:	428b      	cmp	r3, r1
 8000e28:	d92d      	bls.n	8000e86 <__udivmoddi4+0x2ae>
 8000e2a:	3f02      	subs	r7, #2
 8000e2c:	4429      	add	r1, r5
 8000e2e:	1acb      	subs	r3, r1, r3
 8000e30:	b281      	uxth	r1, r0
 8000e32:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e36:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e3a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e3e:	fb00 f308 	mul.w	r3, r0, r8
 8000e42:	428b      	cmp	r3, r1
 8000e44:	d907      	bls.n	8000e56 <__udivmoddi4+0x27e>
 8000e46:	1869      	adds	r1, r5, r1
 8000e48:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e4c:	d217      	bcs.n	8000e7e <__udivmoddi4+0x2a6>
 8000e4e:	428b      	cmp	r3, r1
 8000e50:	d915      	bls.n	8000e7e <__udivmoddi4+0x2a6>
 8000e52:	3802      	subs	r0, #2
 8000e54:	4429      	add	r1, r5
 8000e56:	1ac9      	subs	r1, r1, r3
 8000e58:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000e5c:	e73b      	b.n	8000cd6 <__udivmoddi4+0xfe>
 8000e5e:	4637      	mov	r7, r6
 8000e60:	4630      	mov	r0, r6
 8000e62:	e709      	b.n	8000c78 <__udivmoddi4+0xa0>
 8000e64:	4607      	mov	r7, r0
 8000e66:	e6e7      	b.n	8000c38 <__udivmoddi4+0x60>
 8000e68:	4618      	mov	r0, r3
 8000e6a:	e6fb      	b.n	8000c64 <__udivmoddi4+0x8c>
 8000e6c:	4541      	cmp	r1, r8
 8000e6e:	d2ab      	bcs.n	8000dc8 <__udivmoddi4+0x1f0>
 8000e70:	ebb8 0a02 	subs.w	sl, r8, r2
 8000e74:	eb69 020e 	sbc.w	r2, r9, lr
 8000e78:	3801      	subs	r0, #1
 8000e7a:	4613      	mov	r3, r2
 8000e7c:	e7a4      	b.n	8000dc8 <__udivmoddi4+0x1f0>
 8000e7e:	4660      	mov	r0, ip
 8000e80:	e7e9      	b.n	8000e56 <__udivmoddi4+0x27e>
 8000e82:	4618      	mov	r0, r3
 8000e84:	e795      	b.n	8000db2 <__udivmoddi4+0x1da>
 8000e86:	4667      	mov	r7, ip
 8000e88:	e7d1      	b.n	8000e2e <__udivmoddi4+0x256>
 8000e8a:	4681      	mov	r9, r0
 8000e8c:	e77c      	b.n	8000d88 <__udivmoddi4+0x1b0>
 8000e8e:	3802      	subs	r0, #2
 8000e90:	442c      	add	r4, r5
 8000e92:	e747      	b.n	8000d24 <__udivmoddi4+0x14c>
 8000e94:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e98:	442b      	add	r3, r5
 8000e9a:	e72f      	b.n	8000cfc <__udivmoddi4+0x124>
 8000e9c:	4638      	mov	r0, r7
 8000e9e:	e708      	b.n	8000cb2 <__udivmoddi4+0xda>
 8000ea0:	4637      	mov	r7, r6
 8000ea2:	e6e9      	b.n	8000c78 <__udivmoddi4+0xa0>

08000ea4 <__aeabi_idiv0>:
 8000ea4:	4770      	bx	lr
 8000ea6:	bf00      	nop

08000ea8 <LED_findPos>:
// *******************************************************************
// 					MANIPULATION OF THE LED MATRIX
// *******************************************************************


uint8_t LED_findPos(char letter, uint8_t number){
 8000ea8:	b480      	push	{r7}
 8000eaa:	b085      	sub	sp, #20
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	4603      	mov	r3, r0
 8000eb0:	460a      	mov	r2, r1
 8000eb2:	71fb      	strb	r3, [r7, #7]
 8000eb4:	4613      	mov	r3, r2
 8000eb6:	71bb      	strb	r3, [r7, #6]

	uint8_t position;

	if (number==1){
 8000eb8:	79bb      	ldrb	r3, [r7, #6]
 8000eba:	2b01      	cmp	r3, #1
 8000ebc:	d101      	bne.n	8000ec2 <LED_findPos+0x1a>
		return 0;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	e06d      	b.n	8000f9e <LED_findPos+0xf6>
	}

	switch(letter){
 8000ec2:	79fb      	ldrb	r3, [r7, #7]
 8000ec4:	3b41      	subs	r3, #65	; 0x41
 8000ec6:	2b0a      	cmp	r3, #10
 8000ec8:	d865      	bhi.n	8000f96 <LED_findPos+0xee>
 8000eca:	a201      	add	r2, pc, #4	; (adr r2, 8000ed0 <LED_findPos+0x28>)
 8000ecc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ed0:	08000efd 	.word	0x08000efd
 8000ed4:	08000f05 	.word	0x08000f05
 8000ed8:	08000f0f 	.word	0x08000f0f
 8000edc:	08000f25 	.word	0x08000f25
 8000ee0:	08000f2f 	.word	0x08000f2f
 8000ee4:	08000f37 	.word	0x08000f37
 8000ee8:	08000f51 	.word	0x08000f51
 8000eec:	08000f59 	.word	0x08000f59
 8000ef0:	08000f69 	.word	0x08000f69
 8000ef4:	08000f7f 	.word	0x08000f7f
 8000ef8:	08000f8f 	.word	0x08000f8f
	case('A'):
		position = number-1;
 8000efc:	79bb      	ldrb	r3, [r7, #6]
 8000efe:	3b01      	subs	r3, #1
 8000f00:	73fb      	strb	r3, [r7, #15]
		break;
 8000f02:	e04b      	b.n	8000f9c <LED_findPos+0xf4>
	case('B'):
		position = 36-number;
 8000f04:	79bb      	ldrb	r3, [r7, #6]
 8000f06:	f1c3 0324 	rsb	r3, r3, #36	; 0x24
 8000f0a:	73fb      	strb	r3, [r7, #15]
		break;
 8000f0c:	e046      	b.n	8000f9c <LED_findPos+0xf4>
	case('C'):
		if(number < 17){
 8000f0e:	79bb      	ldrb	r3, [r7, #6]
 8000f10:	2b10      	cmp	r3, #16
 8000f12:	d803      	bhi.n	8000f1c <LED_findPos+0x74>
			position = 34+number-1;
 8000f14:	79bb      	ldrb	r3, [r7, #6]
 8000f16:	3321      	adds	r3, #33	; 0x21
 8000f18:	73fb      	strb	r3, [r7, #15]
		} else {
			position = 34+number;
		}
		break;
 8000f1a:	e03f      	b.n	8000f9c <LED_findPos+0xf4>
			position = 34+number;
 8000f1c:	79bb      	ldrb	r3, [r7, #6]
 8000f1e:	3322      	adds	r3, #34	; 0x22
 8000f20:	73fb      	strb	r3, [r7, #15]
		break;
 8000f22:	e03b      	b.n	8000f9c <LED_findPos+0xf4>
	case('D'):
		position = 71-number;
 8000f24:	79bb      	ldrb	r3, [r7, #6]
 8000f26:	f1c3 0347 	rsb	r3, r3, #71	; 0x47
 8000f2a:	73fb      	strb	r3, [r7, #15]
		break;
 8000f2c:	e036      	b.n	8000f9c <LED_findPos+0xf4>
	case('E'):
		position = 69+number;
 8000f2e:	79bb      	ldrb	r3, [r7, #6]
 8000f30:	3345      	adds	r3, #69	; 0x45
 8000f32:	73fb      	strb	r3, [r7, #15]
		break;
 8000f34:	e032      	b.n	8000f9c <LED_findPos+0xf4>
	case('F'):
		if(number>11){
 8000f36:	79bb      	ldrb	r3, [r7, #6]
 8000f38:	2b0b      	cmp	r3, #11
 8000f3a:	d904      	bls.n	8000f46 <LED_findPos+0x9e>
			position = 106-number;
 8000f3c:	79bb      	ldrb	r3, [r7, #6]
 8000f3e:	f1c3 036a 	rsb	r3, r3, #106	; 0x6a
 8000f42:	73fb      	strb	r3, [r7, #15]
		}else{
			position = 107-number;
		}
		break;
 8000f44:	e02a      	b.n	8000f9c <LED_findPos+0xf4>
			position = 107-number;
 8000f46:	79bb      	ldrb	r3, [r7, #6]
 8000f48:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8000f4c:	73fb      	strb	r3, [r7, #15]
		break;
 8000f4e:	e025      	b.n	8000f9c <LED_findPos+0xf4>
	case('G'):
		position = 104+number;
 8000f50:	79bb      	ldrb	r3, [r7, #6]
 8000f52:	3368      	adds	r3, #104	; 0x68
 8000f54:	73fb      	strb	r3, [r7, #15]
		break;
 8000f56:	e021      	b.n	8000f9c <LED_findPos+0xf4>
	case('H'):
		position = 142-number;
 8000f58:	79bb      	ldrb	r3, [r7, #6]
 8000f5a:	f1c3 23ff 	rsb	r3, r3, #4278255360	; 0xff00ff00
 8000f5e:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 8000f62:	338e      	adds	r3, #142	; 0x8e
 8000f64:	73fb      	strb	r3, [r7, #15]
		break;
 8000f66:	e019      	b.n	8000f9c <LED_findPos+0xf4>
	case('I'):
		if(number>5){
 8000f68:	79bb      	ldrb	r3, [r7, #6]
 8000f6a:	2b05      	cmp	r3, #5
 8000f6c:	d903      	bls.n	8000f76 <LED_findPos+0xce>
			position = 140+number;
 8000f6e:	79bb      	ldrb	r3, [r7, #6]
 8000f70:	3b74      	subs	r3, #116	; 0x74
 8000f72:	73fb      	strb	r3, [r7, #15]
		}else{
			position = 139+number;
		}
		break;
 8000f74:	e012      	b.n	8000f9c <LED_findPos+0xf4>
			position = 139+number;
 8000f76:	79bb      	ldrb	r3, [r7, #6]
 8000f78:	3b75      	subs	r3, #117	; 0x75
 8000f7a:	73fb      	strb	r3, [r7, #15]
		break;
 8000f7c:	e00e      	b.n	8000f9c <LED_findPos+0xf4>
	case('J'):
		position = 177-number;
 8000f7e:	79bb      	ldrb	r3, [r7, #6]
 8000f80:	f1c3 23ff 	rsb	r3, r3, #4278255360	; 0xff00ff00
 8000f84:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 8000f88:	33b1      	adds	r3, #177	; 0xb1
 8000f8a:	73fb      	strb	r3, [r7, #15]
		break;
 8000f8c:	e006      	b.n	8000f9c <LED_findPos+0xf4>
	case('K'):
		position = 174+number;
 8000f8e:	79bb      	ldrb	r3, [r7, #6]
 8000f90:	3b52      	subs	r3, #82	; 0x52
 8000f92:	73fb      	strb	r3, [r7, #15]
		break;
 8000f94:	e002      	b.n	8000f9c <LED_findPos+0xf4>
	default:
		position=0;
 8000f96:	2300      	movs	r3, #0
 8000f98:	73fb      	strb	r3, [r7, #15]
		break;
 8000f9a:	bf00      	nop
	}


	return position;
 8000f9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	3714      	adds	r7, #20
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa8:	4770      	bx	lr
 8000faa:	bf00      	nop

08000fac <convert_digit>:


uint8_t convert_digit(char dig1, char dig2){
 8000fac:	b480      	push	{r7}
 8000fae:	b085      	sub	sp, #20
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	460a      	mov	r2, r1
 8000fb6:	71fb      	strb	r3, [r7, #7]
 8000fb8:	4613      	mov	r3, r2
 8000fba:	71bb      	strb	r3, [r7, #6]

	uint8_t res=0;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	73fb      	strb	r3, [r7, #15]

	if(dig1 == '1'){
 8000fc0:	79fb      	ldrb	r3, [r7, #7]
 8000fc2:	2b31      	cmp	r3, #49	; 0x31
 8000fc4:	d101      	bne.n	8000fca <convert_digit+0x1e>
		res = 10;
 8000fc6:	230a      	movs	r3, #10
 8000fc8:	73fb      	strb	r3, [r7, #15]
	}

	if(dig2 == '1'){
 8000fca:	79bb      	ldrb	r3, [r7, #6]
 8000fcc:	2b31      	cmp	r3, #49	; 0x31
 8000fce:	d103      	bne.n	8000fd8 <convert_digit+0x2c>
		res += 1;
 8000fd0:	7bfb      	ldrb	r3, [r7, #15]
 8000fd2:	3301      	adds	r3, #1
 8000fd4:	73fb      	strb	r3, [r7, #15]
 8000fd6:	e039      	b.n	800104c <convert_digit+0xa0>
	}else if(dig2 == '2'){
 8000fd8:	79bb      	ldrb	r3, [r7, #6]
 8000fda:	2b32      	cmp	r3, #50	; 0x32
 8000fdc:	d103      	bne.n	8000fe6 <convert_digit+0x3a>
		res += 2;
 8000fde:	7bfb      	ldrb	r3, [r7, #15]
 8000fe0:	3302      	adds	r3, #2
 8000fe2:	73fb      	strb	r3, [r7, #15]
 8000fe4:	e032      	b.n	800104c <convert_digit+0xa0>
	}else if(dig2 == '3'){
 8000fe6:	79bb      	ldrb	r3, [r7, #6]
 8000fe8:	2b33      	cmp	r3, #51	; 0x33
 8000fea:	d103      	bne.n	8000ff4 <convert_digit+0x48>
		res += 3;
 8000fec:	7bfb      	ldrb	r3, [r7, #15]
 8000fee:	3303      	adds	r3, #3
 8000ff0:	73fb      	strb	r3, [r7, #15]
 8000ff2:	e02b      	b.n	800104c <convert_digit+0xa0>
	}else if(dig2 == '4'){
 8000ff4:	79bb      	ldrb	r3, [r7, #6]
 8000ff6:	2b34      	cmp	r3, #52	; 0x34
 8000ff8:	d103      	bne.n	8001002 <convert_digit+0x56>
		res += 4;
 8000ffa:	7bfb      	ldrb	r3, [r7, #15]
 8000ffc:	3304      	adds	r3, #4
 8000ffe:	73fb      	strb	r3, [r7, #15]
 8001000:	e024      	b.n	800104c <convert_digit+0xa0>
	}else if(dig2 == '5'){
 8001002:	79bb      	ldrb	r3, [r7, #6]
 8001004:	2b35      	cmp	r3, #53	; 0x35
 8001006:	d103      	bne.n	8001010 <convert_digit+0x64>
		res += 5;
 8001008:	7bfb      	ldrb	r3, [r7, #15]
 800100a:	3305      	adds	r3, #5
 800100c:	73fb      	strb	r3, [r7, #15]
 800100e:	e01d      	b.n	800104c <convert_digit+0xa0>
	}else if(dig2 == '6'){
 8001010:	79bb      	ldrb	r3, [r7, #6]
 8001012:	2b36      	cmp	r3, #54	; 0x36
 8001014:	d103      	bne.n	800101e <convert_digit+0x72>
		res += 6;
 8001016:	7bfb      	ldrb	r3, [r7, #15]
 8001018:	3306      	adds	r3, #6
 800101a:	73fb      	strb	r3, [r7, #15]
 800101c:	e016      	b.n	800104c <convert_digit+0xa0>
	}else if(dig2 == '7'){
 800101e:	79bb      	ldrb	r3, [r7, #6]
 8001020:	2b37      	cmp	r3, #55	; 0x37
 8001022:	d103      	bne.n	800102c <convert_digit+0x80>
		res += 7;
 8001024:	7bfb      	ldrb	r3, [r7, #15]
 8001026:	3307      	adds	r3, #7
 8001028:	73fb      	strb	r3, [r7, #15]
 800102a:	e00f      	b.n	800104c <convert_digit+0xa0>
	}else if(dig2 == '8'){
 800102c:	79bb      	ldrb	r3, [r7, #6]
 800102e:	2b38      	cmp	r3, #56	; 0x38
 8001030:	d103      	bne.n	800103a <convert_digit+0x8e>
		res += 8;
 8001032:	7bfb      	ldrb	r3, [r7, #15]
 8001034:	3308      	adds	r3, #8
 8001036:	73fb      	strb	r3, [r7, #15]
 8001038:	e008      	b.n	800104c <convert_digit+0xa0>
	}else if(dig2 == '9'){
 800103a:	79bb      	ldrb	r3, [r7, #6]
 800103c:	2b39      	cmp	r3, #57	; 0x39
 800103e:	d103      	bne.n	8001048 <convert_digit+0x9c>
		res += 9;
 8001040:	7bfb      	ldrb	r3, [r7, #15]
 8001042:	3309      	adds	r3, #9
 8001044:	73fb      	strb	r3, [r7, #15]
 8001046:	e001      	b.n	800104c <convert_digit+0xa0>
	}else if(dig2 == '0'){
 8001048:	79bb      	ldrb	r3, [r7, #6]
 800104a:	2b30      	cmp	r3, #48	; 0x30
		res += 0;
	}

	return res;
 800104c:	7bfb      	ldrb	r3, [r7, #15]
}
 800104e:	4618      	mov	r0, r3
 8001050:	3714      	adds	r7, #20
 8001052:	46bd      	mov	sp, r7
 8001054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001058:	4770      	bx	lr
	...

0800105c <problem_genArray>:

void problem_genArray(Problem * p){
 800105c:	b5b0      	push	{r4, r5, r7, lr}
 800105e:	b08c      	sub	sp, #48	; 0x30
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
 8001064:	466b      	mov	r3, sp
 8001066:	461d      	mov	r5, r3

	uint16_t LedPos = 0;
 8001068:	2300      	movs	r3, #0
 800106a:	857b      	strh	r3, [r7, #42]	; 0x2a
	char     lettArr[p->moveSize];
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	6818      	ldr	r0, [r3, #0]
 8001070:	1e43      	subs	r3, r0, #1
 8001072:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001074:	4603      	mov	r3, r0
 8001076:	4619      	mov	r1, r3
 8001078:	f04f 0200 	mov.w	r2, #0
 800107c:	f04f 0300 	mov.w	r3, #0
 8001080:	f04f 0400 	mov.w	r4, #0
 8001084:	00d4      	lsls	r4, r2, #3
 8001086:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 800108a:	00cb      	lsls	r3, r1, #3
 800108c:	4603      	mov	r3, r0
 800108e:	4619      	mov	r1, r3
 8001090:	f04f 0200 	mov.w	r2, #0
 8001094:	f04f 0300 	mov.w	r3, #0
 8001098:	f04f 0400 	mov.w	r4, #0
 800109c:	00d4      	lsls	r4, r2, #3
 800109e:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 80010a2:	00cb      	lsls	r3, r1, #3
 80010a4:	4603      	mov	r3, r0
 80010a6:	3307      	adds	r3, #7
 80010a8:	08db      	lsrs	r3, r3, #3
 80010aa:	00db      	lsls	r3, r3, #3
 80010ac:	ebad 0d03 	sub.w	sp, sp, r3
 80010b0:	466b      	mov	r3, sp
 80010b2:	3300      	adds	r3, #0
 80010b4:	61bb      	str	r3, [r7, #24]
	uint8_t  numArr[p->moveSize];
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	6818      	ldr	r0, [r3, #0]
 80010ba:	1e43      	subs	r3, r0, #1
 80010bc:	617b      	str	r3, [r7, #20]
 80010be:	4603      	mov	r3, r0
 80010c0:	4619      	mov	r1, r3
 80010c2:	f04f 0200 	mov.w	r2, #0
 80010c6:	f04f 0300 	mov.w	r3, #0
 80010ca:	f04f 0400 	mov.w	r4, #0
 80010ce:	00d4      	lsls	r4, r2, #3
 80010d0:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 80010d4:	00cb      	lsls	r3, r1, #3
 80010d6:	4603      	mov	r3, r0
 80010d8:	4619      	mov	r1, r3
 80010da:	f04f 0200 	mov.w	r2, #0
 80010de:	f04f 0300 	mov.w	r3, #0
 80010e2:	f04f 0400 	mov.w	r4, #0
 80010e6:	00d4      	lsls	r4, r2, #3
 80010e8:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 80010ec:	00cb      	lsls	r3, r1, #3
 80010ee:	4603      	mov	r3, r0
 80010f0:	3307      	adds	r3, #7
 80010f2:	08db      	lsrs	r3, r3, #3
 80010f4:	00db      	lsls	r3, r3, #3
 80010f6:	ebad 0d03 	sub.w	sp, sp, r3
 80010fa:	466b      	mov	r3, sp
 80010fc:	3300      	adds	r3, #0
 80010fe:	613b      	str	r3, [r7, #16]
	uint8_t  typeArr[p->moveSize];
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	6818      	ldr	r0, [r3, #0]
 8001104:	1e43      	subs	r3, r0, #1
 8001106:	60fb      	str	r3, [r7, #12]
 8001108:	4603      	mov	r3, r0
 800110a:	4619      	mov	r1, r3
 800110c:	f04f 0200 	mov.w	r2, #0
 8001110:	f04f 0300 	mov.w	r3, #0
 8001114:	f04f 0400 	mov.w	r4, #0
 8001118:	00d4      	lsls	r4, r2, #3
 800111a:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 800111e:	00cb      	lsls	r3, r1, #3
 8001120:	4603      	mov	r3, r0
 8001122:	4619      	mov	r1, r3
 8001124:	f04f 0200 	mov.w	r2, #0
 8001128:	f04f 0300 	mov.w	r3, #0
 800112c:	f04f 0400 	mov.w	r4, #0
 8001130:	00d4      	lsls	r4, r2, #3
 8001132:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8001136:	00cb      	lsls	r3, r1, #3
 8001138:	4603      	mov	r3, r0
 800113a:	3307      	adds	r3, #7
 800113c:	08db      	lsrs	r3, r3, #3
 800113e:	00db      	lsls	r3, r3, #3
 8001140:	ebad 0d03 	sub.w	sp, sp, r3
 8001144:	466b      	mov	r3, sp
 8001146:	3300      	adds	r3, #0
 8001148:	60bb      	str	r3, [r7, #8]

	uint8_t number_iter=0;
 800114a:	2300      	movs	r3, #0
 800114c:	77fb      	strb	r3, [r7, #31]

	LED_setAllBlack();	// put to 0 all the colors for each LED
 800114e:	f000 f8d3 	bl	80012f8 <LED_setAllBlack>

	for(int j=0; j<p->moveSize; j++){
 8001152:	2300      	movs	r3, #0
 8001154:	623b      	str	r3, [r7, #32]
 8001156:	e048      	b.n	80011ea <problem_genArray+0x18e>
		lettArr[j] = p->moveLetters[j*2];	// extract letter of hold
 8001158:	6a3b      	ldr	r3, [r7, #32]
 800115a:	005b      	lsls	r3, r3, #1
 800115c:	687a      	ldr	r2, [r7, #4]
 800115e:	4413      	add	r3, r2
 8001160:	f893 10a4 	ldrb.w	r1, [r3, #164]	; 0xa4
 8001164:	69ba      	ldr	r2, [r7, #24]
 8001166:	6a3b      	ldr	r3, [r7, #32]
 8001168:	4413      	add	r3, r2
 800116a:	460a      	mov	r2, r1
 800116c:	701a      	strb	r2, [r3, #0]
		typeArr[j] = p->startFinish[j*2];	// extract type of hold
 800116e:	6a3b      	ldr	r3, [r7, #32]
 8001170:	005b      	lsls	r3, r3, #1
 8001172:	687a      	ldr	r2, [r7, #4]
 8001174:	4413      	add	r3, r2
 8001176:	f893 11b3 	ldrb.w	r1, [r3, #435]	; 0x1b3
 800117a:	68ba      	ldr	r2, [r7, #8]
 800117c:	6a3b      	ldr	r3, [r7, #32]
 800117e:	4413      	add	r3, r2
 8001180:	460a      	mov	r2, r1
 8001182:	701a      	strb	r2, [r3, #0]

		if(p->moveNumbers[number_iter+1] != ','){
 8001184:	7ffb      	ldrb	r3, [r7, #31]
 8001186:	3301      	adds	r3, #1
 8001188:	687a      	ldr	r2, [r7, #4]
 800118a:	4413      	add	r3, r2
 800118c:	791b      	ldrb	r3, [r3, #4]
 800118e:	2b2c      	cmp	r3, #44	; 0x2c
 8001190:	d016      	beq.n	80011c0 <problem_genArray+0x164>
			numArr[j] = convert_digit(p->moveNumbers[number_iter], p->moveNumbers[number_iter+1]);
 8001192:	7ffb      	ldrb	r3, [r7, #31]
 8001194:	687a      	ldr	r2, [r7, #4]
 8001196:	4413      	add	r3, r2
 8001198:	7918      	ldrb	r0, [r3, #4]
 800119a:	7ffb      	ldrb	r3, [r7, #31]
 800119c:	3301      	adds	r3, #1
 800119e:	687a      	ldr	r2, [r7, #4]
 80011a0:	4413      	add	r3, r2
 80011a2:	791b      	ldrb	r3, [r3, #4]
 80011a4:	4619      	mov	r1, r3
 80011a6:	f7ff ff01 	bl	8000fac <convert_digit>
 80011aa:	4603      	mov	r3, r0
 80011ac:	4619      	mov	r1, r3
 80011ae:	693a      	ldr	r2, [r7, #16]
 80011b0:	6a3b      	ldr	r3, [r7, #32]
 80011b2:	4413      	add	r3, r2
 80011b4:	460a      	mov	r2, r1
 80011b6:	701a      	strb	r2, [r3, #0]
			number_iter += 3;
 80011b8:	7ffb      	ldrb	r3, [r7, #31]
 80011ba:	3303      	adds	r3, #3
 80011bc:	77fb      	strb	r3, [r7, #31]
 80011be:	e011      	b.n	80011e4 <problem_genArray+0x188>
		} else {
			numArr[j] = convert_digit('0', p->moveNumbers[number_iter]);
 80011c0:	7ffb      	ldrb	r3, [r7, #31]
 80011c2:	687a      	ldr	r2, [r7, #4]
 80011c4:	4413      	add	r3, r2
 80011c6:	791b      	ldrb	r3, [r3, #4]
 80011c8:	4619      	mov	r1, r3
 80011ca:	2030      	movs	r0, #48	; 0x30
 80011cc:	f7ff feee 	bl	8000fac <convert_digit>
 80011d0:	4603      	mov	r3, r0
 80011d2:	4619      	mov	r1, r3
 80011d4:	693a      	ldr	r2, [r7, #16]
 80011d6:	6a3b      	ldr	r3, [r7, #32]
 80011d8:	4413      	add	r3, r2
 80011da:	460a      	mov	r2, r1
 80011dc:	701a      	strb	r2, [r3, #0]
			number_iter += 2;
 80011de:	7ffb      	ldrb	r3, [r7, #31]
 80011e0:	3302      	adds	r3, #2
 80011e2:	77fb      	strb	r3, [r7, #31]
	for(int j=0; j<p->moveSize; j++){
 80011e4:	6a3b      	ldr	r3, [r7, #32]
 80011e6:	3301      	adds	r3, #1
 80011e8:	623b      	str	r3, [r7, #32]
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	6a3a      	ldr	r2, [r7, #32]
 80011f0:	429a      	cmp	r2, r3
 80011f2:	dbb1      	blt.n	8001158 <problem_genArray+0xfc>
		}
	}


	// for each move define the color of the corresponding LED
	for(int i=0; i<p->moveSize; i++){
 80011f4:	2300      	movs	r3, #0
 80011f6:	627b      	str	r3, [r7, #36]	; 0x24
 80011f8:	e072      	b.n	80012e0 <problem_genArray+0x284>

		// transform letter and number in the led position
		LedPos = LED_findPos(lettArr[i], numArr[i]);
 80011fa:	69ba      	ldr	r2, [r7, #24]
 80011fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011fe:	4413      	add	r3, r2
 8001200:	7818      	ldrb	r0, [r3, #0]
 8001202:	693a      	ldr	r2, [r7, #16]
 8001204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001206:	4413      	add	r3, r2
 8001208:	781b      	ldrb	r3, [r3, #0]
 800120a:	4619      	mov	r1, r3
 800120c:	f7ff fe4c 	bl	8000ea8 <LED_findPos>
 8001210:	4603      	mov	r3, r0
 8001212:	857b      	strh	r3, [r7, #42]	; 0x2a

		// light the led depending if it's start, top or else
		if(typeArr[i]=='s'){			// START, color green
 8001214:	68ba      	ldr	r2, [r7, #8]
 8001216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001218:	4413      	add	r3, r2
 800121a:	781b      	ldrb	r3, [r3, #0]
 800121c:	2b73      	cmp	r3, #115	; 0x73
 800121e:	d112      	bne.n	8001246 <problem_genArray+0x1ea>
			LED_Data[LedPos][1] = 0;
 8001220:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001222:	4a34      	ldr	r2, [pc, #208]	; (80012f4 <problem_genArray+0x298>)
 8001224:	009b      	lsls	r3, r3, #2
 8001226:	4413      	add	r3, r2
 8001228:	2200      	movs	r2, #0
 800122a:	705a      	strb	r2, [r3, #1]
			LED_Data[LedPos][2] = 250;
 800122c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800122e:	4a31      	ldr	r2, [pc, #196]	; (80012f4 <problem_genArray+0x298>)
 8001230:	009b      	lsls	r3, r3, #2
 8001232:	4413      	add	r3, r2
 8001234:	22fa      	movs	r2, #250	; 0xfa
 8001236:	709a      	strb	r2, [r3, #2]
			LED_Data[LedPos][3] = 0;
 8001238:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800123a:	4a2e      	ldr	r2, [pc, #184]	; (80012f4 <problem_genArray+0x298>)
 800123c:	009b      	lsls	r3, r3, #2
 800123e:	4413      	add	r3, r2
 8001240:	2200      	movs	r2, #0
 8001242:	70da      	strb	r2, [r3, #3]
 8001244:	e049      	b.n	80012da <problem_genArray+0x27e>
		}else if(typeArr[i]=='e'){		// TOP, color red
 8001246:	68ba      	ldr	r2, [r7, #8]
 8001248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800124a:	4413      	add	r3, r2
 800124c:	781b      	ldrb	r3, [r3, #0]
 800124e:	2b65      	cmp	r3, #101	; 0x65
 8001250:	d112      	bne.n	8001278 <problem_genArray+0x21c>
			LED_Data[LedPos][1] = 250;
 8001252:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001254:	4a27      	ldr	r2, [pc, #156]	; (80012f4 <problem_genArray+0x298>)
 8001256:	009b      	lsls	r3, r3, #2
 8001258:	4413      	add	r3, r2
 800125a:	22fa      	movs	r2, #250	; 0xfa
 800125c:	705a      	strb	r2, [r3, #1]
			LED_Data[LedPos][2] = 0;
 800125e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001260:	4a24      	ldr	r2, [pc, #144]	; (80012f4 <problem_genArray+0x298>)
 8001262:	009b      	lsls	r3, r3, #2
 8001264:	4413      	add	r3, r2
 8001266:	2200      	movs	r2, #0
 8001268:	709a      	strb	r2, [r3, #2]
			LED_Data[LedPos][3] = 0;
 800126a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800126c:	4a21      	ldr	r2, [pc, #132]	; (80012f4 <problem_genArray+0x298>)
 800126e:	009b      	lsls	r3, r3, #2
 8001270:	4413      	add	r3, r2
 8001272:	2200      	movs	r2, #0
 8001274:	70da      	strb	r2, [r3, #3]
 8001276:	e030      	b.n	80012da <problem_genArray+0x27e>
		}else if(typeArr[i]=='d'){		// DEFAULT, color blue
 8001278:	68ba      	ldr	r2, [r7, #8]
 800127a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800127c:	4413      	add	r3, r2
 800127e:	781b      	ldrb	r3, [r3, #0]
 8001280:	2b64      	cmp	r3, #100	; 0x64
 8001282:	d112      	bne.n	80012aa <problem_genArray+0x24e>
			LED_Data[LedPos][1] = 0;
 8001284:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001286:	4a1b      	ldr	r2, [pc, #108]	; (80012f4 <problem_genArray+0x298>)
 8001288:	009b      	lsls	r3, r3, #2
 800128a:	4413      	add	r3, r2
 800128c:	2200      	movs	r2, #0
 800128e:	705a      	strb	r2, [r3, #1]
			LED_Data[LedPos][2] = 0;
 8001290:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001292:	4a18      	ldr	r2, [pc, #96]	; (80012f4 <problem_genArray+0x298>)
 8001294:	009b      	lsls	r3, r3, #2
 8001296:	4413      	add	r3, r2
 8001298:	2200      	movs	r2, #0
 800129a:	709a      	strb	r2, [r3, #2]
			LED_Data[LedPos][3] = 250;
 800129c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800129e:	4a15      	ldr	r2, [pc, #84]	; (80012f4 <problem_genArray+0x298>)
 80012a0:	009b      	lsls	r3, r3, #2
 80012a2:	4413      	add	r3, r2
 80012a4:	22fa      	movs	r2, #250	; 0xfa
 80012a6:	70da      	strb	r2, [r3, #3]
 80012a8:	e017      	b.n	80012da <problem_genArray+0x27e>
		}else if(typeArr[i]=='c'){		// easter egg, color pink
 80012aa:	68ba      	ldr	r2, [r7, #8]
 80012ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012ae:	4413      	add	r3, r2
 80012b0:	781b      	ldrb	r3, [r3, #0]
 80012b2:	2b63      	cmp	r3, #99	; 0x63
 80012b4:	d111      	bne.n	80012da <problem_genArray+0x27e>
			LED_Data[LedPos][1] = 250;
 80012b6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80012b8:	4a0e      	ldr	r2, [pc, #56]	; (80012f4 <problem_genArray+0x298>)
 80012ba:	009b      	lsls	r3, r3, #2
 80012bc:	4413      	add	r3, r2
 80012be:	22fa      	movs	r2, #250	; 0xfa
 80012c0:	705a      	strb	r2, [r3, #1]
			LED_Data[LedPos][2] = 192;
 80012c2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80012c4:	4a0b      	ldr	r2, [pc, #44]	; (80012f4 <problem_genArray+0x298>)
 80012c6:	009b      	lsls	r3, r3, #2
 80012c8:	4413      	add	r3, r2
 80012ca:	22c0      	movs	r2, #192	; 0xc0
 80012cc:	709a      	strb	r2, [r3, #2]
			LED_Data[LedPos][3] = 203;
 80012ce:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80012d0:	4a08      	ldr	r2, [pc, #32]	; (80012f4 <problem_genArray+0x298>)
 80012d2:	009b      	lsls	r3, r3, #2
 80012d4:	4413      	add	r3, r2
 80012d6:	22cb      	movs	r2, #203	; 0xcb
 80012d8:	70da      	strb	r2, [r3, #3]
	for(int i=0; i<p->moveSize; i++){
 80012da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012dc:	3301      	adds	r3, #1
 80012de:	627b      	str	r3, [r7, #36]	; 0x24
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80012e6:	429a      	cmp	r2, r3
 80012e8:	db87      	blt.n	80011fa <problem_genArray+0x19e>
 80012ea:	46ad      	mov	sp, r5
		}
	}
}
 80012ec:	bf00      	nop
 80012ee:	3730      	adds	r7, #48	; 0x30
 80012f0:	46bd      	mov	sp, r7
 80012f2:	bdb0      	pop	{r4, r5, r7, pc}
 80012f4:	200000ac 	.word	0x200000ac

080012f8 <LED_setAllBlack>:



void LED_setAllBlack(){
 80012f8:	b480      	push	{r7}
 80012fa:	b083      	sub	sp, #12
 80012fc:	af00      	add	r7, sp, #0

	for(int i=0; i<MAX_LED; i++){
 80012fe:	2300      	movs	r3, #0
 8001300:	607b      	str	r3, [r7, #4]
 8001302:	e014      	b.n	800132e <LED_setAllBlack+0x36>
		LED_Data[i][1]=0;
 8001304:	4a0e      	ldr	r2, [pc, #56]	; (8001340 <LED_setAllBlack+0x48>)
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	009b      	lsls	r3, r3, #2
 800130a:	4413      	add	r3, r2
 800130c:	2200      	movs	r2, #0
 800130e:	705a      	strb	r2, [r3, #1]
		LED_Data[i][2]=0;
 8001310:	4a0b      	ldr	r2, [pc, #44]	; (8001340 <LED_setAllBlack+0x48>)
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	009b      	lsls	r3, r3, #2
 8001316:	4413      	add	r3, r2
 8001318:	2200      	movs	r2, #0
 800131a:	709a      	strb	r2, [r3, #2]
		LED_Data[i][3]=0;
 800131c:	4a08      	ldr	r2, [pc, #32]	; (8001340 <LED_setAllBlack+0x48>)
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	009b      	lsls	r3, r3, #2
 8001322:	4413      	add	r3, r2
 8001324:	2200      	movs	r2, #0
 8001326:	70da      	strb	r2, [r3, #3]
	for(int i=0; i<MAX_LED; i++){
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	3301      	adds	r3, #1
 800132c:	607b      	str	r3, [r7, #4]
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	2bc5      	cmp	r3, #197	; 0xc5
 8001332:	dde7      	ble.n	8001304 <LED_setAllBlack+0xc>
	}
}
 8001334:	bf00      	nop
 8001336:	370c      	adds	r7, #12
 8001338:	46bd      	mov	sp, r7
 800133a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133e:	4770      	bx	lr
 8001340:	200000ac 	.word	0x200000ac

08001344 <LED_setAllRand>:
	}
}



void LED_setAllRand(){
 8001344:	b580      	push	{r7, lr}
 8001346:	b082      	sub	sp, #8
 8001348:	af00      	add	r7, sp, #0

	for(int i=0; i<MAX_LED; i++){
 800134a:	2300      	movs	r3, #0
 800134c:	607b      	str	r3, [r7, #4]
 800134e:	e020      	b.n	8001392 <LED_setAllRand+0x4e>
		LED_Data[i][1]=rand();
 8001350:	f020 fcdc 	bl	8021d0c <rand>
 8001354:	4603      	mov	r3, r0
 8001356:	b2d9      	uxtb	r1, r3
 8001358:	4a11      	ldr	r2, [pc, #68]	; (80013a0 <LED_setAllRand+0x5c>)
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	009b      	lsls	r3, r3, #2
 800135e:	4413      	add	r3, r2
 8001360:	460a      	mov	r2, r1
 8001362:	705a      	strb	r2, [r3, #1]
		LED_Data[i][2]=rand();
 8001364:	f020 fcd2 	bl	8021d0c <rand>
 8001368:	4603      	mov	r3, r0
 800136a:	b2d9      	uxtb	r1, r3
 800136c:	4a0c      	ldr	r2, [pc, #48]	; (80013a0 <LED_setAllRand+0x5c>)
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	009b      	lsls	r3, r3, #2
 8001372:	4413      	add	r3, r2
 8001374:	460a      	mov	r2, r1
 8001376:	709a      	strb	r2, [r3, #2]
		LED_Data[i][3]=rand();
 8001378:	f020 fcc8 	bl	8021d0c <rand>
 800137c:	4603      	mov	r3, r0
 800137e:	b2d9      	uxtb	r1, r3
 8001380:	4a07      	ldr	r2, [pc, #28]	; (80013a0 <LED_setAllRand+0x5c>)
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	009b      	lsls	r3, r3, #2
 8001386:	4413      	add	r3, r2
 8001388:	460a      	mov	r2, r1
 800138a:	70da      	strb	r2, [r3, #3]
	for(int i=0; i<MAX_LED; i++){
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	3301      	adds	r3, #1
 8001390:	607b      	str	r3, [r7, #4]
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	2bc5      	cmp	r3, #197	; 0xc5
 8001396:	dddb      	ble.n	8001350 <LED_setAllRand+0xc>
	}
}
 8001398:	bf00      	nop
 800139a:	3708      	adds	r7, #8
 800139c:	46bd      	mov	sp, r7
 800139e:	bd80      	pop	{r7, pc}
 80013a0:	200000ac 	.word	0x200000ac

080013a4 <WS2811_Send>:
// *******************************************************************
// 						GENERATION OF PWM
// *******************************************************************


void WS2811_Send(void){
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b088      	sub	sp, #32
 80013a8:	af00      	add	r7, sp, #0

	uint16_t indx_low = 0;
 80013aa:	2300      	movs	r3, #0
 80013ac:	83fb      	strh	r3, [r7, #30]
	uint16_t indx_high = 0;
 80013ae:	2300      	movs	r3, #0
 80013b0:	83bb      	strh	r3, [r7, #28]
	uint32_t color;

	// wait 50 PWM pulses as a RESET before lighting all LED
	for(int i=0; i<40; i++){
 80013b2:	2300      	movs	r3, #0
 80013b4:	61bb      	str	r3, [r7, #24]
 80013b6:	e012      	b.n	80013de <WS2811_Send+0x3a>
		pwmData_low[indx_low] = 0;
 80013b8:	8bfb      	ldrh	r3, [r7, #30]
 80013ba:	4a53      	ldr	r2, [pc, #332]	; (8001508 <WS2811_Send+0x164>)
 80013bc:	2100      	movs	r1, #0
 80013be:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		pwmData_high[indx_high] = 0;
 80013c2:	8bbb      	ldrh	r3, [r7, #28]
 80013c4:	4a51      	ldr	r2, [pc, #324]	; (800150c <WS2811_Send+0x168>)
 80013c6:	2100      	movs	r1, #0
 80013c8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

		indx_low++;
 80013cc:	8bfb      	ldrh	r3, [r7, #30]
 80013ce:	3301      	adds	r3, #1
 80013d0:	83fb      	strh	r3, [r7, #30]
		indx_high++;
 80013d2:	8bbb      	ldrh	r3, [r7, #28]
 80013d4:	3301      	adds	r3, #1
 80013d6:	83bb      	strh	r3, [r7, #28]
	for(int i=0; i<40; i++){
 80013d8:	69bb      	ldr	r3, [r7, #24]
 80013da:	3301      	adds	r3, #1
 80013dc:	61bb      	str	r3, [r7, #24]
 80013de:	69bb      	ldr	r3, [r7, #24]
 80013e0:	2b27      	cmp	r3, #39	; 0x27
 80013e2:	dde9      	ble.n	80013b8 <WS2811_Send+0x14>
	}

	// read from the color matrix each RGB color for each LED
	for(int i=0; i<MAX_LED; i++){
 80013e4:	2300      	movs	r3, #0
 80013e6:	617b      	str	r3, [r7, #20]
 80013e8:	e05a      	b.n	80014a0 <WS2811_Send+0xfc>
		color = ((LED_Data[i][1]<<16) | (LED_Data[i][2]<<8) | LED_Data[i][3]);
 80013ea:	4a49      	ldr	r2, [pc, #292]	; (8001510 <WS2811_Send+0x16c>)
 80013ec:	697b      	ldr	r3, [r7, #20]
 80013ee:	009b      	lsls	r3, r3, #2
 80013f0:	4413      	add	r3, r2
 80013f2:	785b      	ldrb	r3, [r3, #1]
 80013f4:	041a      	lsls	r2, r3, #16
 80013f6:	4946      	ldr	r1, [pc, #280]	; (8001510 <WS2811_Send+0x16c>)
 80013f8:	697b      	ldr	r3, [r7, #20]
 80013fa:	009b      	lsls	r3, r3, #2
 80013fc:	440b      	add	r3, r1
 80013fe:	789b      	ldrb	r3, [r3, #2]
 8001400:	021b      	lsls	r3, r3, #8
 8001402:	431a      	orrs	r2, r3
 8001404:	4942      	ldr	r1, [pc, #264]	; (8001510 <WS2811_Send+0x16c>)
 8001406:	697b      	ldr	r3, [r7, #20]
 8001408:	009b      	lsls	r3, r3, #2
 800140a:	440b      	add	r3, r1
 800140c:	78db      	ldrb	r3, [r3, #3]
 800140e:	4313      	orrs	r3, r2
 8001410:	607b      	str	r3, [r7, #4]

		if(i <= 94){	// LOW PWM DATA
 8001412:	697b      	ldr	r3, [r7, #20]
 8001414:	2b5e      	cmp	r3, #94	; 0x5e
 8001416:	dc20      	bgt.n	800145a <WS2811_Send+0xb6>

			for(int i=23; i>=0; i--){
 8001418:	2317      	movs	r3, #23
 800141a:	613b      	str	r3, [r7, #16]
 800141c:	e019      	b.n	8001452 <WS2811_Send+0xae>
				if(color & (1<<i)){
 800141e:	2201      	movs	r2, #1
 8001420:	693b      	ldr	r3, [r7, #16]
 8001422:	fa02 f303 	lsl.w	r3, r2, r3
 8001426:	461a      	mov	r2, r3
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	4013      	ands	r3, r2
 800142c:	2b00      	cmp	r3, #0
 800142e:	d005      	beq.n	800143c <WS2811_Send+0x98>
					pwmData_low[indx_low]=43;
 8001430:	8bfb      	ldrh	r3, [r7, #30]
 8001432:	4a35      	ldr	r2, [pc, #212]	; (8001508 <WS2811_Send+0x164>)
 8001434:	212b      	movs	r1, #43	; 0x2b
 8001436:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 800143a:	e004      	b.n	8001446 <WS2811_Send+0xa2>
				}else{
					pwmData_low[indx_low]=18;
 800143c:	8bfb      	ldrh	r3, [r7, #30]
 800143e:	4a32      	ldr	r2, [pc, #200]	; (8001508 <WS2811_Send+0x164>)
 8001440:	2112      	movs	r1, #18
 8001442:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				}
				indx_low++;
 8001446:	8bfb      	ldrh	r3, [r7, #30]
 8001448:	3301      	adds	r3, #1
 800144a:	83fb      	strh	r3, [r7, #30]
			for(int i=23; i>=0; i--){
 800144c:	693b      	ldr	r3, [r7, #16]
 800144e:	3b01      	subs	r3, #1
 8001450:	613b      	str	r3, [r7, #16]
 8001452:	693b      	ldr	r3, [r7, #16]
 8001454:	2b00      	cmp	r3, #0
 8001456:	dae2      	bge.n	800141e <WS2811_Send+0x7a>
 8001458:	e01f      	b.n	800149a <WS2811_Send+0xf6>
			}

		} else {		// HIGH PWM DATA

			for(int i=23; i>=0; i--){
 800145a:	2317      	movs	r3, #23
 800145c:	60fb      	str	r3, [r7, #12]
 800145e:	e019      	b.n	8001494 <WS2811_Send+0xf0>
				if(color & (1<<i)){
 8001460:	2201      	movs	r2, #1
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	fa02 f303 	lsl.w	r3, r2, r3
 8001468:	461a      	mov	r2, r3
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	4013      	ands	r3, r2
 800146e:	2b00      	cmp	r3, #0
 8001470:	d005      	beq.n	800147e <WS2811_Send+0xda>
					pwmData_high[indx_high]=43;
 8001472:	8bbb      	ldrh	r3, [r7, #28]
 8001474:	4a25      	ldr	r2, [pc, #148]	; (800150c <WS2811_Send+0x168>)
 8001476:	212b      	movs	r1, #43	; 0x2b
 8001478:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 800147c:	e004      	b.n	8001488 <WS2811_Send+0xe4>
				}else{
					pwmData_high[indx_high]=18;
 800147e:	8bbb      	ldrh	r3, [r7, #28]
 8001480:	4a22      	ldr	r2, [pc, #136]	; (800150c <WS2811_Send+0x168>)
 8001482:	2112      	movs	r1, #18
 8001484:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				}
				indx_high++;
 8001488:	8bbb      	ldrh	r3, [r7, #28]
 800148a:	3301      	adds	r3, #1
 800148c:	83bb      	strh	r3, [r7, #28]
			for(int i=23; i>=0; i--){
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	3b01      	subs	r3, #1
 8001492:	60fb      	str	r3, [r7, #12]
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	2b00      	cmp	r3, #0
 8001498:	dae2      	bge.n	8001460 <WS2811_Send+0xbc>
	for(int i=0; i<MAX_LED; i++){
 800149a:	697b      	ldr	r3, [r7, #20]
 800149c:	3301      	adds	r3, #1
 800149e:	617b      	str	r3, [r7, #20]
 80014a0:	697b      	ldr	r3, [r7, #20]
 80014a2:	2bc5      	cmp	r3, #197	; 0xc5
 80014a4:	dda1      	ble.n	80013ea <WS2811_Send+0x46>


	}

	// wait 50 PWM pulses as a RESET after lighting all LED
	for(int i=0; i<40; i++){
 80014a6:	2300      	movs	r3, #0
 80014a8:	60bb      	str	r3, [r7, #8]
 80014aa:	e012      	b.n	80014d2 <WS2811_Send+0x12e>
		pwmData_low[indx_low] = 0;
 80014ac:	8bfb      	ldrh	r3, [r7, #30]
 80014ae:	4a16      	ldr	r2, [pc, #88]	; (8001508 <WS2811_Send+0x164>)
 80014b0:	2100      	movs	r1, #0
 80014b2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		pwmData_high[indx_high] = 0;
 80014b6:	8bbb      	ldrh	r3, [r7, #28]
 80014b8:	4a14      	ldr	r2, [pc, #80]	; (800150c <WS2811_Send+0x168>)
 80014ba:	2100      	movs	r1, #0
 80014bc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

		indx_low++;
 80014c0:	8bfb      	ldrh	r3, [r7, #30]
 80014c2:	3301      	adds	r3, #1
 80014c4:	83fb      	strh	r3, [r7, #30]
		indx_high++;
 80014c6:	8bbb      	ldrh	r3, [r7, #28]
 80014c8:	3301      	adds	r3, #1
 80014ca:	83bb      	strh	r3, [r7, #28]
	for(int i=0; i<40; i++){
 80014cc:	68bb      	ldr	r3, [r7, #8]
 80014ce:	3301      	adds	r3, #1
 80014d0:	60bb      	str	r3, [r7, #8]
 80014d2:	68bb      	ldr	r3, [r7, #8]
 80014d4:	2b27      	cmp	r3, #39	; 0x27
 80014d6:	dde9      	ble.n	80014ac <WS2811_Send+0x108>
	}

	// start the transmission of the data just created
	HAL_TIM_PWM_Start_DMA(&htim2, TIM_CHANNEL_1, (uint32_t *)pwmData_low, indx_low);
 80014d8:	8bfb      	ldrh	r3, [r7, #30]
 80014da:	4a0b      	ldr	r2, [pc, #44]	; (8001508 <WS2811_Send+0x164>)
 80014dc:	2100      	movs	r1, #0
 80014de:	480d      	ldr	r0, [pc, #52]	; (8001514 <WS2811_Send+0x170>)
 80014e0:	f01e fc60 	bl	801fda4 <HAL_TIM_PWM_Start_DMA>
	HAL_TIM_PWM_Start_DMA(&htim3, TIM_CHANNEL_1, (uint32_t *)pwmData_high, indx_high);
 80014e4:	8bbb      	ldrh	r3, [r7, #28]
 80014e6:	4a09      	ldr	r2, [pc, #36]	; (800150c <WS2811_Send+0x168>)
 80014e8:	2100      	movs	r1, #0
 80014ea:	480b      	ldr	r0, [pc, #44]	; (8001518 <WS2811_Send+0x174>)
 80014ec:	f01e fc5a 	bl	801fda4 <HAL_TIM_PWM_Start_DMA>


	while(!datasentflag){};
 80014f0:	bf00      	nop
 80014f2:	4b0a      	ldr	r3, [pc, #40]	; (800151c <WS2811_Send+0x178>)
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d0fb      	beq.n	80014f2 <WS2811_Send+0x14e>
	datasentflag=0;
 80014fa:	4b08      	ldr	r3, [pc, #32]	; (800151c <WS2811_Send+0x178>)
 80014fc:	2200      	movs	r2, #0
 80014fe:	601a      	str	r2, [r3, #0]

}
 8001500:	bf00      	nop
 8001502:	3720      	adds	r7, #32
 8001504:	46bd      	mov	sp, r7
 8001506:	bd80      	pop	{r7, pc}
 8001508:	20002d64 	.word	0x20002d64
 800150c:	200003c4 	.word	0x200003c4
 8001510:	200000ac 	.word	0x200000ac
 8001514:	20005578 	.word	0x20005578
 8001518:	200054d8 	.word	0x200054d8
 800151c:	20000094 	.word	0x20000094

08001520 <MessageHandler>:

// *******************************************************************
// 						BLUETOOTH RECEIVER
// *******************************************************************

void MessageHandler(Problem * p){
 8001520:	b590      	push	{r4, r7, lr}
 8001522:	b0a3      	sub	sp, #140	; 0x8c
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]

	char spaces_msg[100];
	for (int i=0; i<100; i++){
 8001528:	2300      	movs	r3, #0
 800152a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800152e:	e00b      	b.n	8001548 <MessageHandler+0x28>
		spaces_msg[i] = ' ';
 8001530:	f107 020c 	add.w	r2, r7, #12
 8001534:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001538:	4413      	add	r3, r2
 800153a:	2220      	movs	r2, #32
 800153c:	701a      	strb	r2, [r3, #0]
	for (int i=0; i<100; i++){
 800153e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001542:	3301      	adds	r3, #1
 8001544:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8001548:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800154c:	2b63      	cmp	r3, #99	; 0x63
 800154e:	ddef      	ble.n	8001530 <MessageHandler+0x10>
	}

	// NAME
	strcpy(p->name,"           ");
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8001556:	4a58      	ldr	r2, [pc, #352]	; (80016b8 <MessageHandler+0x198>)
 8001558:	461c      	mov	r4, r3
 800155a:	4613      	mov	r3, r2
 800155c:	cb07      	ldmia	r3!, {r0, r1, r2}
 800155e:	6020      	str	r0, [r4, #0]
 8001560:	6061      	str	r1, [r4, #4]
 8001562:	60a2      	str	r2, [r4, #8]
	for(int i=0; i<11; i++){
 8001564:	2300      	movs	r3, #0
 8001566:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800156a:	e011      	b.n	8001590 <MessageHandler+0x70>
		p->name[i] = buffer[i+2];
 800156c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001570:	3302      	adds	r3, #2
 8001572:	4a52      	ldr	r2, [pc, #328]	; (80016bc <MessageHandler+0x19c>)
 8001574:	5cd1      	ldrb	r1, [r2, r3]
 8001576:	687a      	ldr	r2, [r7, #4]
 8001578:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800157c:	4413      	add	r3, r2
 800157e:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8001582:	460a      	mov	r2, r1
 8001584:	701a      	strb	r2, [r3, #0]
	for(int i=0; i<11; i++){
 8001586:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800158a:	3301      	adds	r3, #1
 800158c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001590:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001594:	2b0a      	cmp	r3, #10
 8001596:	dde9      	ble.n	800156c <MessageHandler+0x4c>
	}

	// GRADE
	strcpy(p->grade, "          ");
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800159e:	4948      	ldr	r1, [pc, #288]	; (80016c0 <MessageHandler+0x1a0>)
 80015a0:	461a      	mov	r2, r3
 80015a2:	460b      	mov	r3, r1
 80015a4:	cb03      	ldmia	r3!, {r0, r1}
 80015a6:	6010      	str	r0, [r2, #0]
 80015a8:	6051      	str	r1, [r2, #4]
 80015aa:	8819      	ldrh	r1, [r3, #0]
 80015ac:	789b      	ldrb	r3, [r3, #2]
 80015ae:	8111      	strh	r1, [r2, #8]
 80015b0:	7293      	strb	r3, [r2, #10]
	for(int i=0; i<3; i++){
 80015b2:	2300      	movs	r3, #0
 80015b4:	67fb      	str	r3, [r7, #124]	; 0x7c
 80015b6:	e00d      	b.n	80015d4 <MessageHandler+0xb4>
		p->grade[i] = buffer[100+i];
 80015b8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80015ba:	3364      	adds	r3, #100	; 0x64
 80015bc:	4a3f      	ldr	r2, [pc, #252]	; (80016bc <MessageHandler+0x19c>)
 80015be:	5cd1      	ldrb	r1, [r2, r3]
 80015c0:	687a      	ldr	r2, [r7, #4]
 80015c2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80015c4:	4413      	add	r3, r2
 80015c6:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80015ca:	460a      	mov	r2, r1
 80015cc:	701a      	strb	r2, [r3, #0]
	for(int i=0; i<3; i++){
 80015ce:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80015d0:	3301      	adds	r3, #1
 80015d2:	67fb      	str	r3, [r7, #124]	; 0x7c
 80015d4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80015d6:	2b02      	cmp	r3, #2
 80015d8:	ddee      	ble.n	80015b8 <MessageHandler+0x98>
	}

	// N OF HOLDS
	p->moveSize = buffer[200]*10+buffer[201];
 80015da:	4b38      	ldr	r3, [pc, #224]	; (80016bc <MessageHandler+0x19c>)
 80015dc:	f893 30c8 	ldrb.w	r3, [r3, #200]	; 0xc8
 80015e0:	461a      	mov	r2, r3
 80015e2:	4613      	mov	r3, r2
 80015e4:	009b      	lsls	r3, r3, #2
 80015e6:	4413      	add	r3, r2
 80015e8:	005b      	lsls	r3, r3, #1
 80015ea:	461a      	mov	r2, r3
 80015ec:	4b33      	ldr	r3, [pc, #204]	; (80016bc <MessageHandler+0x19c>)
 80015ee:	f893 30c9 	ldrb.w	r3, [r3, #201]	; 0xc9
 80015f2:	441a      	add	r2, r3
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	601a      	str	r2, [r3, #0]

	// LETTERS OF EACH HOLD
	strcpy(p->moveLetters, spaces_msg);
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	33a4      	adds	r3, #164	; 0xa4
 80015fc:	f107 020c 	add.w	r2, r7, #12
 8001600:	4611      	mov	r1, r2
 8001602:	4618      	mov	r0, r3
 8001604:	f020 fbd6 	bl	8021db4 <strcpy>
	for(int i=0; i<p->moveSize*2; i++){
 8001608:	2300      	movs	r3, #0
 800160a:	67bb      	str	r3, [r7, #120]	; 0x78
 800160c:	e00d      	b.n	800162a <MessageHandler+0x10a>
		p->moveLetters[i] = buffer[300+i];
 800160e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001610:	f503 7396 	add.w	r3, r3, #300	; 0x12c
 8001614:	4a29      	ldr	r2, [pc, #164]	; (80016bc <MessageHandler+0x19c>)
 8001616:	5cd1      	ldrb	r1, [r2, r3]
 8001618:	687a      	ldr	r2, [r7, #4]
 800161a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800161c:	4413      	add	r3, r2
 800161e:	33a4      	adds	r3, #164	; 0xa4
 8001620:	460a      	mov	r2, r1
 8001622:	701a      	strb	r2, [r3, #0]
	for(int i=0; i<p->moveSize*2; i++){
 8001624:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001626:	3301      	adds	r3, #1
 8001628:	67bb      	str	r3, [r7, #120]	; 0x78
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	005b      	lsls	r3, r3, #1
 8001630:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8001632:	429a      	cmp	r2, r3
 8001634:	dbeb      	blt.n	800160e <MessageHandler+0xee>
	}

	// NUMBERS OF EACH HOLD
	strcpy(p->moveNumbers, spaces_msg);
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	3304      	adds	r3, #4
 800163a:	f107 020c 	add.w	r2, r7, #12
 800163e:	4611      	mov	r1, r2
 8001640:	4618      	mov	r0, r3
 8001642:	f020 fbb7 	bl	8021db4 <strcpy>
	for(int i=0; i<100; i++){
 8001646:	2300      	movs	r3, #0
 8001648:	677b      	str	r3, [r7, #116]	; 0x74
 800164a:	e00d      	b.n	8001668 <MessageHandler+0x148>
		p->moveNumbers[i] = buffer[400+i];
 800164c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800164e:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 8001652:	4a1a      	ldr	r2, [pc, #104]	; (80016bc <MessageHandler+0x19c>)
 8001654:	5cd1      	ldrb	r1, [r2, r3]
 8001656:	687a      	ldr	r2, [r7, #4]
 8001658:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800165a:	4413      	add	r3, r2
 800165c:	3304      	adds	r3, #4
 800165e:	460a      	mov	r2, r1
 8001660:	701a      	strb	r2, [r3, #0]
	for(int i=0; i<100; i++){
 8001662:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001664:	3301      	adds	r3, #1
 8001666:	677b      	str	r3, [r7, #116]	; 0x74
 8001668:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800166a:	2b63      	cmp	r3, #99	; 0x63
 800166c:	ddee      	ble.n	800164c <MessageHandler+0x12c>
	}

	// TYPE OF EACH HOLD
	strcpy(p->startFinish, spaces_msg);
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8001674:	f107 020c 	add.w	r2, r7, #12
 8001678:	4611      	mov	r1, r2
 800167a:	4618      	mov	r0, r3
 800167c:	f020 fb9a 	bl	8021db4 <strcpy>
	for(int i=0; i<p->moveSize*2; i++){
 8001680:	2300      	movs	r3, #0
 8001682:	673b      	str	r3, [r7, #112]	; 0x70
 8001684:	e00e      	b.n	80016a4 <MessageHandler+0x184>
		p->startFinish[i] = buffer[500+i];
 8001686:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001688:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800168c:	4a0b      	ldr	r2, [pc, #44]	; (80016bc <MessageHandler+0x19c>)
 800168e:	5cd1      	ldrb	r1, [r2, r3]
 8001690:	687a      	ldr	r2, [r7, #4]
 8001692:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001694:	4413      	add	r3, r2
 8001696:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800169a:	460a      	mov	r2, r1
 800169c:	701a      	strb	r2, [r3, #0]
	for(int i=0; i<p->moveSize*2; i++){
 800169e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80016a0:	3301      	adds	r3, #1
 80016a2:	673b      	str	r3, [r7, #112]	; 0x70
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	005b      	lsls	r3, r3, #1
 80016aa:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80016ac:	429a      	cmp	r2, r3
 80016ae:	dbea      	blt.n	8001686 <MessageHandler+0x166>
	}


}
 80016b0:	bf00      	nop
 80016b2:	378c      	adds	r7, #140	; 0x8c
 80016b4:	46bd      	mov	sp, r7
 80016b6:	bd90      	pop	{r4, r7, pc}
 80016b8:	08023698 	.word	0x08023698
 80016bc:	20002b08 	.word	0x20002b08
 80016c0:	080236a4 	.word	0x080236a4

080016c4 <problem_fetch>:
            break;
        default : break;
    }
}
*/
void problem_fetch(Problem* p, int id){
 80016c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80016c6:	b083      	sub	sp, #12
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
 80016cc:	6039      	str	r1, [r7, #0]
	switch(id){
 80016ce:	683b      	ldr	r3, [r7, #0]
 80016d0:	f240 3227 	movw	r2, #807	; 0x327
 80016d4:	4293      	cmp	r3, r2
 80016d6:	f21a 8725 	bhi.w	801c524 <problem_fetch+0x1ae60>
 80016da:	a101      	add	r1, pc, #4	; (adr r1, 80016e0 <problem_fetch+0x1c>)
 80016dc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80016e0:	08002381 	.word	0x08002381
 80016e4:	080023e1 	.word	0x080023e1
 80016e8:	08002447 	.word	0x08002447
 80016ec:	080024bd 	.word	0x080024bd
 80016f0:	0800253d 	.word	0x0800253d
 80016f4:	080025ab 	.word	0x080025ab
 80016f8:	08002625 	.word	0x08002625
 80016fc:	08002711 	.word	0x08002711
 8001700:	08002773 	.word	0x08002773
 8001704:	080027e5 	.word	0x080027e5
 8001708:	0800285f 	.word	0x0800285f
 800170c:	080028cf 	.word	0x080028cf
 8001710:	08002949 	.word	0x08002949
 8001714:	08002a35 	.word	0x08002a35
 8001718:	08002aa7 	.word	0x08002aa7
 800171c:	08002b23 	.word	0x08002b23
 8001720:	08002b95 	.word	0x08002b95
 8001724:	08002bf7 	.word	0x08002bf7
 8001728:	08002c65 	.word	0x08002c65
 800172c:	08002ccf 	.word	0x08002ccf
 8001730:	08002db5 	.word	0x08002db5
 8001734:	08002e1f 	.word	0x08002e1f
 8001738:	08002e97 	.word	0x08002e97
 800173c:	08002f0b 	.word	0x08002f0b
 8001740:	08002f81 	.word	0x08002f81
 8001744:	08002ff1 	.word	0x08002ff1
 8001748:	080030cd 	.word	0x080030cd
 800174c:	08003135 	.word	0x08003135
 8001750:	080031ab 	.word	0x080031ab
 8001754:	08003223 	.word	0x08003223
 8001758:	0800328f 	.word	0x0800328f
 800175c:	080032fd 	.word	0x080032fd
 8001760:	080033d9 	.word	0x080033d9
 8001764:	0800345b 	.word	0x0800345b
 8001768:	080034cd 	.word	0x080034cd
 800176c:	08003539 	.word	0x08003539
 8001770:	080035a9 	.word	0x080035a9
 8001774:	0800362d 	.word	0x0800362d
 8001778:	08003715 	.word	0x08003715
 800177c:	08003791 	.word	0x08003791
 8001780:	08003805 	.word	0x08003805
 8001784:	08003887 	.word	0x08003887
 8001788:	080038fb 	.word	0x080038fb
 800178c:	0800396d 	.word	0x0800396d
 8001790:	08003a51 	.word	0x08003a51
 8001794:	08003abd 	.word	0x08003abd
 8001798:	08003b3b 	.word	0x08003b3b
 800179c:	08003bb5 	.word	0x08003bb5
 80017a0:	08003c33 	.word	0x08003c33
 80017a4:	08003cad 	.word	0x08003cad
 80017a8:	08003d89 	.word	0x08003d89
 80017ac:	08003df3 	.word	0x08003df3
 80017b0:	08003e61 	.word	0x08003e61
 80017b4:	08003ec9 	.word	0x08003ec9
 80017b8:	08003f39 	.word	0x08003f39
 80017bc:	08003fad 	.word	0x08003fad
 80017c0:	08004015 	.word	0x08004015
 80017c4:	08004101 	.word	0x08004101
 80017c8:	08004175 	.word	0x08004175
 80017cc:	080041e9 	.word	0x080041e9
 80017d0:	0800426b 	.word	0x0800426b
 80017d4:	080042df 	.word	0x080042df
 80017d8:	08004349 	.word	0x08004349
 80017dc:	08004429 	.word	0x08004429
 80017e0:	08004497 	.word	0x08004497
 80017e4:	08004509 	.word	0x08004509
 80017e8:	08004569 	.word	0x08004569
 80017ec:	080045e3 	.word	0x080045e3
 80017f0:	0800465d 	.word	0x0800465d
 80017f4:	08004739 	.word	0x08004739
 80017f8:	080047b1 	.word	0x080047b1
 80017fc:	08004819 	.word	0x08004819
 8001800:	08004893 	.word	0x08004893
 8001804:	080048f9 	.word	0x080048f9
 8001808:	0800495d 	.word	0x0800495d
 800180c:	080049d9 	.word	0x080049d9
 8001810:	08004abd 	.word	0x08004abd
 8001814:	08004b2b 	.word	0x08004b2b
 8001818:	08004bab 	.word	0x08004bab
 800181c:	08004c17 	.word	0x08004c17
 8001820:	08004c8f 	.word	0x08004c8f
 8001824:	08004d05 	.word	0x08004d05
 8001828:	08004df5 	.word	0x08004df5
 800182c:	08004e65 	.word	0x08004e65
 8001830:	08004ed9 	.word	0x08004ed9
 8001834:	08004f4f 	.word	0x08004f4f
 8001838:	08004fc5 	.word	0x08004fc5
 800183c:	08005033 	.word	0x08005033
 8001840:	08005125 	.word	0x08005125
 8001844:	08005197 	.word	0x08005197
 8001848:	08005211 	.word	0x08005211
 800184c:	08005285 	.word	0x08005285
 8001850:	080052eb 	.word	0x080052eb
 8001854:	08005365 	.word	0x08005365
 8001858:	08005445 	.word	0x08005445
 800185c:	080054c3 	.word	0x080054c3
 8001860:	08005539 	.word	0x08005539
 8001864:	080055ab 	.word	0x080055ab
 8001868:	08005617 	.word	0x08005617
 800186c:	080056a1 	.word	0x080056a1
 8001870:	08005775 	.word	0x08005775
 8001874:	080057e7 	.word	0x080057e7
 8001878:	08005859 	.word	0x08005859
 800187c:	080058bd 	.word	0x080058bd
 8001880:	08005925 	.word	0x08005925
 8001884:	08005993 	.word	0x08005993
 8001888:	080059fd 	.word	0x080059fd
 800188c:	08005af1 	.word	0x08005af1
 8001890:	08005b6d 	.word	0x08005b6d
 8001894:	08005bdf 	.word	0x08005bdf
 8001898:	08005c55 	.word	0x08005c55
 800189c:	08005ccb 	.word	0x08005ccb
 80018a0:	08005d4d 	.word	0x08005d4d
 80018a4:	08005e2d 	.word	0x08005e2d
 80018a8:	08005e9d 	.word	0x08005e9d
 80018ac:	08005f0d 	.word	0x08005f0d
 80018b0:	08005f7f 	.word	0x08005f7f
 80018b4:	08006001 	.word	0x08006001
 80018b8:	0800607d 	.word	0x0800607d
 80018bc:	0800616d 	.word	0x0800616d
 80018c0:	080061db 	.word	0x080061db
 80018c4:	08006251 	.word	0x08006251
 80018c8:	080062d5 	.word	0x080062d5
 80018cc:	0800634f 	.word	0x0800634f
 80018d0:	080063c3 	.word	0x080063c3
 80018d4:	080064a9 	.word	0x080064a9
 80018d8:	0800650f 	.word	0x0800650f
 80018dc:	0800657d 	.word	0x0800657d
 80018e0:	080065e9 	.word	0x080065e9
 80018e4:	08006655 	.word	0x08006655
 80018e8:	080066bf 	.word	0x080066bf
 80018ec:	08006735 	.word	0x08006735
 80018f0:	08006831 	.word	0x08006831
 80018f4:	080068a5 	.word	0x080068a5
 80018f8:	0800690b 	.word	0x0800690b
 80018fc:	0800697d 	.word	0x0800697d
 8001900:	080069f3 	.word	0x080069f3
 8001904:	08006a63 	.word	0x08006a63
 8001908:	08006ad1 	.word	0x08006ad1
 800190c:	08006bc1 	.word	0x08006bc1
 8001910:	08006c27 	.word	0x08006c27
 8001914:	08006c91 	.word	0x08006c91
 8001918:	08006d05 	.word	0x08006d05
 800191c:	08006d6b 	.word	0x08006d6b
 8001920:	08006de5 	.word	0x08006de5
 8001924:	08006e63 	.word	0x08006e63
 8001928:	08006f59 	.word	0x08006f59
 800192c:	08006fc5 	.word	0x08006fc5
 8001930:	0800703f 	.word	0x0800703f
 8001934:	080070ab 	.word	0x080070ab
 8001938:	0800711f 	.word	0x0800711f
 800193c:	08007193 	.word	0x08007193
 8001940:	08007285 	.word	0x08007285
 8001944:	080072f3 	.word	0x080072f3
 8001948:	0800736f 	.word	0x0800736f
 800194c:	080073e5 	.word	0x080073e5
 8001950:	08007451 	.word	0x08007451
 8001954:	080074c7 	.word	0x080074c7
 8001958:	080075b1 	.word	0x080075b1
 800195c:	08007637 	.word	0x08007637
 8001960:	080076a9 	.word	0x080076a9
 8001964:	08007713 	.word	0x08007713
 8001968:	08007783 	.word	0x08007783
 800196c:	080077ed 	.word	0x080077ed
 8001970:	080078d9 	.word	0x080078d9
 8001974:	0800794b 	.word	0x0800794b
 8001978:	080079ab 	.word	0x080079ab
 800197c:	08007a19 	.word	0x08007a19
 8001980:	08007a8b 	.word	0x08007a8b
 8001984:	08007b0b 	.word	0x08007b0b
 8001988:	08007bed 	.word	0x08007bed
 800198c:	08007c61 	.word	0x08007c61
 8001990:	08007cef 	.word	0x08007cef
 8001994:	08007d59 	.word	0x08007d59
 8001998:	08007dc7 	.word	0x08007dc7
 800199c:	08007e31 	.word	0x08007e31
 80019a0:	08007f1d 	.word	0x08007f1d
 80019a4:	08007f93 	.word	0x08007f93
 80019a8:	08008013 	.word	0x08008013
 80019ac:	08008083 	.word	0x08008083
 80019b0:	080080f5 	.word	0x080080f5
 80019b4:	0800816f 	.word	0x0800816f
 80019b8:	08008249 	.word	0x08008249
 80019bc:	080082b5 	.word	0x080082b5
 80019c0:	08008321 	.word	0x08008321
 80019c4:	0800838b 	.word	0x0800838b
 80019c8:	080083f7 	.word	0x080083f7
 80019cc:	0800845f 	.word	0x0800845f
 80019d0:	080084db 	.word	0x080084db
 80019d4:	080085cd 	.word	0x080085cd
 80019d8:	08008645 	.word	0x08008645
 80019dc:	080086b9 	.word	0x080086b9
 80019e0:	08008723 	.word	0x08008723
 80019e4:	08008783 	.word	0x08008783
 80019e8:	080087e7 	.word	0x080087e7
 80019ec:	08008861 	.word	0x08008861
 80019f0:	08008951 	.word	0x08008951
 80019f4:	080089b9 	.word	0x080089b9
 80019f8:	08008a31 	.word	0x08008a31
 80019fc:	08008aad 	.word	0x08008aad
 8001a00:	08008b1d 	.word	0x08008b1d
 8001a04:	08008b7d 	.word	0x08008b7d
 8001a08:	08008be1 	.word	0x08008be1
 8001a0c:	08008cc1 	.word	0x08008cc1
 8001a10:	08008d2d 	.word	0x08008d2d
 8001a14:	08008dad 	.word	0x08008dad
 8001a18:	08008e1b 	.word	0x08008e1b
 8001a1c:	08008e8b 	.word	0x08008e8b
 8001a20:	08008ef7 	.word	0x08008ef7
 8001a24:	08008fd9 	.word	0x08008fd9
 8001a28:	0800904d 	.word	0x0800904d
 8001a2c:	080090b9 	.word	0x080090b9
 8001a30:	0800912d 	.word	0x0800912d
 8001a34:	080091a9 	.word	0x080091a9
 8001a38:	08009211 	.word	0x08009211
 8001a3c:	080092fd 	.word	0x080092fd
 8001a40:	08009387 	.word	0x08009387
 8001a44:	08009415 	.word	0x08009415
 8001a48:	0800949f 	.word	0x0800949f
 8001a4c:	08009517 	.word	0x08009517
 8001a50:	08009583 	.word	0x08009583
 8001a54:	08009659 	.word	0x08009659
 8001a58:	080096c9 	.word	0x080096c9
 8001a5c:	08009749 	.word	0x08009749
 8001a60:	080097b7 	.word	0x080097b7
 8001a64:	0800982f 	.word	0x0800982f
 8001a68:	080098a9 	.word	0x080098a9
 8001a6c:	08009981 	.word	0x08009981
 8001a70:	080099f7 	.word	0x080099f7
 8001a74:	08009a69 	.word	0x08009a69
 8001a78:	08009ad3 	.word	0x08009ad3
 8001a7c:	08009b41 	.word	0x08009b41
 8001a80:	08009bc1 	.word	0x08009bc1
 8001a84:	08009c9d 	.word	0x08009c9d
 8001a88:	08009d1f 	.word	0x08009d1f
 8001a8c:	08009d97 	.word	0x08009d97
 8001a90:	08009e0d 	.word	0x08009e0d
 8001a94:	08009e9f 	.word	0x08009e9f
 8001a98:	08009f07 	.word	0x08009f07
 8001a9c:	08009fe9 	.word	0x08009fe9
 8001aa0:	0800a05d 	.word	0x0800a05d
 8001aa4:	0800a0d3 	.word	0x0800a0d3
 8001aa8:	0800a153 	.word	0x0800a153
 8001aac:	0800a1cd 	.word	0x0800a1cd
 8001ab0:	0800a243 	.word	0x0800a243
 8001ab4:	0800a329 	.word	0x0800a329
 8001ab8:	0800a3a5 	.word	0x0800a3a5
 8001abc:	0800a423 	.word	0x0800a423
 8001ac0:	0800a499 	.word	0x0800a499
 8001ac4:	0800a501 	.word	0x0800a501
 8001ac8:	0800a569 	.word	0x0800a569
 8001acc:	0800a649 	.word	0x0800a649
 8001ad0:	0800a6c1 	.word	0x0800a6c1
 8001ad4:	0800a72f 	.word	0x0800a72f
 8001ad8:	0800a7a9 	.word	0x0800a7a9
 8001adc:	0800a811 	.word	0x0800a811
 8001ae0:	0800a87d 	.word	0x0800a87d
 8001ae4:	0800a8e7 	.word	0x0800a8e7
 8001ae8:	0800a9d5 	.word	0x0800a9d5
 8001aec:	0800aa47 	.word	0x0800aa47
 8001af0:	0800aabb 	.word	0x0800aabb
 8001af4:	0800ab2b 	.word	0x0800ab2b
 8001af8:	0800ab9d 	.word	0x0800ab9d
 8001afc:	0800ac21 	.word	0x0800ac21
 8001b00:	0800ad11 	.word	0x0800ad11
 8001b04:	0800ad91 	.word	0x0800ad91
 8001b08:	0800adfb 	.word	0x0800adfb
 8001b0c:	0800ae63 	.word	0x0800ae63
 8001b10:	0800aed1 	.word	0x0800aed1
 8001b14:	0800af3d 	.word	0x0800af3d
 8001b18:	0800afbb 	.word	0x0800afbb
 8001b1c:	0800b0a1 	.word	0x0800b0a1
 8001b20:	0800b10f 	.word	0x0800b10f
 8001b24:	0800b189 	.word	0x0800b189
 8001b28:	0800b1f9 	.word	0x0800b1f9
 8001b2c:	0800b26b 	.word	0x0800b26b
 8001b30:	0800b2df 	.word	0x0800b2df
 8001b34:	0800b3b9 	.word	0x0800b3b9
 8001b38:	0800b42f 	.word	0x0800b42f
 8001b3c:	0800b4a9 	.word	0x0800b4a9
 8001b40:	0800b51d 	.word	0x0800b51d
 8001b44:	0800b585 	.word	0x0800b585
 8001b48:	0800b5ef 	.word	0x0800b5ef
 8001b4c:	0800b6dd 	.word	0x0800b6dd
 8001b50:	0800b765 	.word	0x0800b765
 8001b54:	0800b7dd 	.word	0x0800b7dd
 8001b58:	0800b85b 	.word	0x0800b85b
 8001b5c:	0800b8cf 	.word	0x0800b8cf
 8001b60:	0800b947 	.word	0x0800b947
 8001b64:	0800ba19 	.word	0x0800ba19
 8001b68:	0800ba8f 	.word	0x0800ba8f
 8001b6c:	0800bb05 	.word	0x0800bb05
 8001b70:	0800bb6f 	.word	0x0800bb6f
 8001b74:	0800bbd5 	.word	0x0800bbd5
 8001b78:	0800bc2d 	.word	0x0800bc2d
 8001b7c:	0800bca7 	.word	0x0800bca7
 8001b80:	0800bd9d 	.word	0x0800bd9d
 8001b84:	0800be0f 	.word	0x0800be0f
 8001b88:	0800be8f 	.word	0x0800be8f
 8001b8c:	0800beff 	.word	0x0800beff
 8001b90:	0800bf65 	.word	0x0800bf65
 8001b94:	0800bfd5 	.word	0x0800bfd5
 8001b98:	0800c049 	.word	0x0800c049
 8001b9c:	0800c12d 	.word	0x0800c12d
 8001ba0:	0800c195 	.word	0x0800c195
 8001ba4:	0800c205 	.word	0x0800c205
 8001ba8:	0800c273 	.word	0x0800c273
 8001bac:	0800c2e3 	.word	0x0800c2e3
 8001bb0:	0800c34f 	.word	0x0800c34f
 8001bb4:	0800c3c1 	.word	0x0800c3c1
 8001bb8:	0800c4a5 	.word	0x0800c4a5
 8001bbc:	0800c50b 	.word	0x0800c50b
 8001bc0:	0800c571 	.word	0x0800c571
 8001bc4:	0800c5e3 	.word	0x0800c5e3
 8001bc8:	0800c657 	.word	0x0800c657
 8001bcc:	0800c6bd 	.word	0x0800c6bd
 8001bd0:	0800c727 	.word	0x0800c727
 8001bd4:	0800c80d 	.word	0x0800c80d
 8001bd8:	0800c883 	.word	0x0800c883
 8001bdc:	0800c8f3 	.word	0x0800c8f3
 8001be0:	0800c963 	.word	0x0800c963
 8001be4:	0800c9d3 	.word	0x0800c9d3
 8001be8:	0800ca43 	.word	0x0800ca43
 8001bec:	0800cb1d 	.word	0x0800cb1d
 8001bf0:	0800cb91 	.word	0x0800cb91
 8001bf4:	0800cbfb 	.word	0x0800cbfb
 8001bf8:	0800cc67 	.word	0x0800cc67
 8001bfc:	0800ccd3 	.word	0x0800ccd3
 8001c00:	0800cd45 	.word	0x0800cd45
 8001c04:	0800cdb3 	.word	0x0800cdb3
 8001c08:	0800ce9d 	.word	0x0800ce9d
 8001c0c:	0800cf13 	.word	0x0800cf13
 8001c10:	0800cf77 	.word	0x0800cf77
 8001c14:	0800cfdf 	.word	0x0800cfdf
 8001c18:	0800d05f 	.word	0x0800d05f
 8001c1c:	0800d0d5 	.word	0x0800d0d5
 8001c20:	0800d1b9 	.word	0x0800d1b9
 8001c24:	0800d229 	.word	0x0800d229
 8001c28:	0800d2a7 	.word	0x0800d2a7
 8001c2c:	0800d313 	.word	0x0800d313
 8001c30:	0800d389 	.word	0x0800d389
 8001c34:	0800d3f3 	.word	0x0800d3f3
 8001c38:	0800d4dd 	.word	0x0800d4dd
 8001c3c:	0800d557 	.word	0x0800d557
 8001c40:	0800d5c9 	.word	0x0800d5c9
 8001c44:	0800d63b 	.word	0x0800d63b
 8001c48:	0800d6ad 	.word	0x0800d6ad
 8001c4c:	0800d71b 	.word	0x0800d71b
 8001c50:	0800d7f5 	.word	0x0800d7f5
 8001c54:	0800d86d 	.word	0x0800d86d
 8001c58:	0800d8df 	.word	0x0800d8df
 8001c5c:	0800d943 	.word	0x0800d943
 8001c60:	0800d9cf 	.word	0x0800d9cf
 8001c64:	0800da39 	.word	0x0800da39
 8001c68:	0800db21 	.word	0x0800db21
 8001c6c:	0800db85 	.word	0x0800db85
 8001c70:	0800dbf3 	.word	0x0800dbf3
 8001c74:	0800dc61 	.word	0x0800dc61
 8001c78:	0800dcc9 	.word	0x0800dcc9
 8001c7c:	0800dd35 	.word	0x0800dd35
 8001c80:	0800ddaf 	.word	0x0800ddaf
 8001c84:	0800de91 	.word	0x0800de91
 8001c88:	0800df0f 	.word	0x0800df0f
 8001c8c:	0800df83 	.word	0x0800df83
 8001c90:	0800dfe9 	.word	0x0800dfe9
 8001c94:	0800e05b 	.word	0x0800e05b
 8001c98:	0800e0d5 	.word	0x0800e0d5
 8001c9c:	0800e1b1 	.word	0x0800e1b1
 8001ca0:	0800e215 	.word	0x0800e215
 8001ca4:	0800e27b 	.word	0x0800e27b
 8001ca8:	0800e2ef 	.word	0x0800e2ef
 8001cac:	0800e363 	.word	0x0800e363
 8001cb0:	0800e3df 	.word	0x0800e3df
 8001cb4:	0800e4c1 	.word	0x0800e4c1
 8001cb8:	0800e543 	.word	0x0800e543
 8001cbc:	0800e5a7 	.word	0x0800e5a7
 8001cc0:	0800e60f 	.word	0x0800e60f
 8001cc4:	0800e67b 	.word	0x0800e67b
 8001cc8:	0800e6eb 	.word	0x0800e6eb
 8001ccc:	0800e74f 	.word	0x0800e74f
 8001cd0:	0800e84d 	.word	0x0800e84d
 8001cd4:	0800e8bd 	.word	0x0800e8bd
 8001cd8:	0800e92d 	.word	0x0800e92d
 8001cdc:	0800e9c7 	.word	0x0800e9c7
 8001ce0:	0800ea35 	.word	0x0800ea35
 8001ce4:	0800ea9d 	.word	0x0800ea9d
 8001ce8:	0800eb69 	.word	0x0800eb69
 8001cec:	0800ebd9 	.word	0x0800ebd9
 8001cf0:	0800ec3f 	.word	0x0800ec3f
 8001cf4:	0800eca9 	.word	0x0800eca9
 8001cf8:	0800ed09 	.word	0x0800ed09
 8001cfc:	0800ed79 	.word	0x0800ed79
 8001d00:	0800ede1 	.word	0x0800ede1
 8001d04:	0800eec5 	.word	0x0800eec5
 8001d08:	0800ef35 	.word	0x0800ef35
 8001d0c:	0800efaf 	.word	0x0800efaf
 8001d10:	0800f023 	.word	0x0800f023
 8001d14:	0800f097 	.word	0x0800f097
 8001d18:	0800f109 	.word	0x0800f109
 8001d1c:	0800f1e5 	.word	0x0800f1e5
 8001d20:	0800f267 	.word	0x0800f267
 8001d24:	0800f2dd 	.word	0x0800f2dd
 8001d28:	0800f34f 	.word	0x0800f34f
 8001d2c:	0800f3c3 	.word	0x0800f3c3
 8001d30:	0800f42f 	.word	0x0800f42f
 8001d34:	0800f509 	.word	0x0800f509
 8001d38:	0800f581 	.word	0x0800f581
 8001d3c:	0800f5ed 	.word	0x0800f5ed
 8001d40:	0800f657 	.word	0x0800f657
 8001d44:	0800f6c3 	.word	0x0800f6c3
 8001d48:	0800f72f 	.word	0x0800f72f
 8001d4c:	0800f815 	.word	0x0800f815
 8001d50:	0800f885 	.word	0x0800f885
 8001d54:	0800f8fb 	.word	0x0800f8fb
 8001d58:	0800f975 	.word	0x0800f975
 8001d5c:	0800f9f3 	.word	0x0800f9f3
 8001d60:	0800fa67 	.word	0x0800fa67
 8001d64:	0800fb4d 	.word	0x0800fb4d
 8001d68:	0800fbb3 	.word	0x0800fbb3
 8001d6c:	0800fc23 	.word	0x0800fc23
 8001d70:	0800fc9b 	.word	0x0800fc9b
 8001d74:	0800fd05 	.word	0x0800fd05
 8001d78:	0800fd7d 	.word	0x0800fd7d
 8001d7c:	0800fe61 	.word	0x0800fe61
 8001d80:	0800fecb 	.word	0x0800fecb
 8001d84:	0800ff3f 	.word	0x0800ff3f
 8001d88:	0800ffab 	.word	0x0800ffab
 8001d8c:	08010019 	.word	0x08010019
 8001d90:	0801008f 	.word	0x0801008f
 8001d94:	080100f9 	.word	0x080100f9
 8001d98:	080101e1 	.word	0x080101e1
 8001d9c:	0801024d 	.word	0x0801024d
 8001da0:	080102c1 	.word	0x080102c1
 8001da4:	0801032b 	.word	0x0801032b
 8001da8:	08010397 	.word	0x08010397
 8001dac:	08010409 	.word	0x08010409
 8001db0:	08010483 	.word	0x08010483
 8001db4:	08010569 	.word	0x08010569
 8001db8:	080105e1 	.word	0x080105e1
 8001dbc:	0801065d 	.word	0x0801065d
 8001dc0:	080106d1 	.word	0x080106d1
 8001dc4:	0801074d 	.word	0x0801074d
 8001dc8:	080107b3 	.word	0x080107b3
 8001dcc:	08010889 	.word	0x08010889
 8001dd0:	080108fd 	.word	0x080108fd
 8001dd4:	08010973 	.word	0x08010973
 8001dd8:	080109e9 	.word	0x080109e9
 8001ddc:	08010a55 	.word	0x08010a55
 8001de0:	08010ac5 	.word	0x08010ac5
 8001de4:	08010ba5 	.word	0x08010ba5
 8001de8:	08010c19 	.word	0x08010c19
 8001dec:	08010c87 	.word	0x08010c87
 8001df0:	08010cf9 	.word	0x08010cf9
 8001df4:	08010d69 	.word	0x08010d69
 8001df8:	08010ddd 	.word	0x08010ddd
 8001dfc:	08010ec1 	.word	0x08010ec1
 8001e00:	08010f37 	.word	0x08010f37
 8001e04:	08010fbf 	.word	0x08010fbf
 8001e08:	08011035 	.word	0x08011035
 8001e0c:	080110a5 	.word	0x080110a5
 8001e10:	0801110b 	.word	0x0801110b
 8001e14:	080111f1 	.word	0x080111f1
 8001e18:	08011267 	.word	0x08011267
 8001e1c:	080112ed 	.word	0x080112ed
 8001e20:	08011367 	.word	0x08011367
 8001e24:	080113f5 	.word	0x080113f5
 8001e28:	0801146b 	.word	0x0801146b
 8001e2c:	08011549 	.word	0x08011549
 8001e30:	080115b9 	.word	0x080115b9
 8001e34:	08011629 	.word	0x08011629
 8001e38:	080116ad 	.word	0x080116ad
 8001e3c:	0801171f 	.word	0x0801171f
 8001e40:	08011793 	.word	0x08011793
 8001e44:	08011871 	.word	0x08011871
 8001e48:	080118ed 	.word	0x080118ed
 8001e4c:	08011969 	.word	0x08011969
 8001e50:	080119db 	.word	0x080119db
 8001e54:	08011a55 	.word	0x08011a55
 8001e58:	08011ac7 	.word	0x08011ac7
 8001e5c:	08011b99 	.word	0x08011b99
 8001e60:	08011c0d 	.word	0x08011c0d
 8001e64:	08011c7d 	.word	0x08011c7d
 8001e68:	08011cff 	.word	0x08011cff
 8001e6c:	08011d6f 	.word	0x08011d6f
 8001e70:	08011ddd 	.word	0x08011ddd
 8001e74:	08011ec1 	.word	0x08011ec1
 8001e78:	08011f21 	.word	0x08011f21
 8001e7c:	08011f89 	.word	0x08011f89
 8001e80:	08012005 	.word	0x08012005
 8001e84:	0801208b 	.word	0x0801208b
 8001e88:	0801210b 	.word	0x0801210b
 8001e8c:	080121f1 	.word	0x080121f1
 8001e90:	0801226f 	.word	0x0801226f
 8001e94:	080122df 	.word	0x080122df
 8001e98:	0801234b 	.word	0x0801234b
 8001e9c:	080123bb 	.word	0x080123bb
 8001ea0:	08012429 	.word	0x08012429
 8001ea4:	0801250d 	.word	0x0801250d
 8001ea8:	0801258b 	.word	0x0801258b
 8001eac:	08012617 	.word	0x08012617
 8001eb0:	08012697 	.word	0x08012697
 8001eb4:	08012709 	.word	0x08012709
 8001eb8:	0801277d 	.word	0x0801277d
 8001ebc:	0801285d 	.word	0x0801285d
 8001ec0:	080128cb 	.word	0x080128cb
 8001ec4:	08012943 	.word	0x08012943
 8001ec8:	080129cd 	.word	0x080129cd
 8001ecc:	08012a47 	.word	0x08012a47
 8001ed0:	08012abd 	.word	0x08012abd
 8001ed4:	08012b91 	.word	0x08012b91
 8001ed8:	08012c07 	.word	0x08012c07
 8001edc:	08012c71 	.word	0x08012c71
 8001ee0:	08012cdf 	.word	0x08012cdf
 8001ee4:	08012d4d 	.word	0x08012d4d
 8001ee8:	08012dc3 	.word	0x08012dc3
 8001eec:	08012e9d 	.word	0x08012e9d
 8001ef0:	08012f15 	.word	0x08012f15
 8001ef4:	08012f75 	.word	0x08012f75
 8001ef8:	08012fe1 	.word	0x08012fe1
 8001efc:	08013051 	.word	0x08013051
 8001f00:	080130cd 	.word	0x080130cd
 8001f04:	080131b5 	.word	0x080131b5
 8001f08:	0801322f 	.word	0x0801322f
 8001f0c:	080132a3 	.word	0x080132a3
 8001f10:	0801331b 	.word	0x0801331b
 8001f14:	0801338b 	.word	0x0801338b
 8001f18:	080133ef 	.word	0x080133ef
 8001f1c:	08013461 	.word	0x08013461
 8001f20:	0801354d 	.word	0x0801354d
 8001f24:	080135d1 	.word	0x080135d1
 8001f28:	08013643 	.word	0x08013643
 8001f2c:	080136d9 	.word	0x080136d9
 8001f30:	08013771 	.word	0x08013771
 8001f34:	080137db 	.word	0x080137db
 8001f38:	080138c1 	.word	0x080138c1
 8001f3c:	08013943 	.word	0x08013943
 8001f40:	080139bb 	.word	0x080139bb
 8001f44:	08013a31 	.word	0x08013a31
 8001f48:	08013a97 	.word	0x08013a97
 8001f4c:	08013b07 	.word	0x08013b07
 8001f50:	08013bf5 	.word	0x08013bf5
 8001f54:	08013c63 	.word	0x08013c63
 8001f58:	08013cd5 	.word	0x08013cd5
 8001f5c:	08013d4d 	.word	0x08013d4d
 8001f60:	08013dc5 	.word	0x08013dc5
 8001f64:	08013e31 	.word	0x08013e31
 8001f68:	08013f15 	.word	0x08013f15
 8001f6c:	08013f8f 	.word	0x08013f8f
 8001f70:	0801400f 	.word	0x0801400f
 8001f74:	0801407d 	.word	0x0801407d
 8001f78:	080140ed 	.word	0x080140ed
 8001f7c:	0801415d 	.word	0x0801415d
 8001f80:	08014245 	.word	0x08014245
 8001f84:	080142cb 	.word	0x080142cb
 8001f88:	0801433f 	.word	0x0801433f
 8001f8c:	080143c5 	.word	0x080143c5
 8001f90:	08014433 	.word	0x08014433
 8001f94:	080144a9 	.word	0x080144a9
 8001f98:	08014599 	.word	0x08014599
 8001f9c:	08014611 	.word	0x08014611
 8001fa0:	0801467f 	.word	0x0801467f
 8001fa4:	080146fb 	.word	0x080146fb
 8001fa8:	0801476b 	.word	0x0801476b
 8001fac:	080147e1 	.word	0x080147e1
 8001fb0:	080148c1 	.word	0x080148c1
 8001fb4:	0801492f 	.word	0x0801492f
 8001fb8:	0801499b 	.word	0x0801499b
 8001fbc:	08014a2f 	.word	0x08014a2f
 8001fc0:	08014aa3 	.word	0x08014aa3
 8001fc4:	08014b1d 	.word	0x08014b1d
 8001fc8:	08014bfd 	.word	0x08014bfd
 8001fcc:	08014c69 	.word	0x08014c69
 8001fd0:	08014cd7 	.word	0x08014cd7
 8001fd4:	08014d49 	.word	0x08014d49
 8001fd8:	08014db7 	.word	0x08014db7
 8001fdc:	08014e31 	.word	0x08014e31
 8001fe0:	08014f05 	.word	0x08014f05
 8001fe4:	08014f73 	.word	0x08014f73
 8001fe8:	08014fe9 	.word	0x08014fe9
 8001fec:	08015053 	.word	0x08015053
 8001ff0:	080150d7 	.word	0x080150d7
 8001ff4:	0801514f 	.word	0x0801514f
 8001ff8:	08015235 	.word	0x08015235
 8001ffc:	0801529f 	.word	0x0801529f
 8002000:	08015305 	.word	0x08015305
 8002004:	0801536f 	.word	0x0801536f
 8002008:	080153e3 	.word	0x080153e3
 800200c:	08015469 	.word	0x08015469
 8002010:	080154cd 	.word	0x080154cd
 8002014:	080155b9 	.word	0x080155b9
 8002018:	08015627 	.word	0x08015627
 800201c:	0801568b 	.word	0x0801568b
 8002020:	08015705 	.word	0x08015705
 8002024:	08015779 	.word	0x08015779
 8002028:	080157db 	.word	0x080157db
 800202c:	080158cd 	.word	0x080158cd
 8002030:	08015951 	.word	0x08015951
 8002034:	080159bf 	.word	0x080159bf
 8002038:	08015a2f 	.word	0x08015a2f
 800203c:	08015a9f 	.word	0x08015a9f
 8002040:	08015b0f 	.word	0x08015b0f
 8002044:	08015bf9 	.word	0x08015bf9
 8002048:	08015c7f 	.word	0x08015c7f
 800204c:	08015ceb 	.word	0x08015ceb
 8002050:	08015d6d 	.word	0x08015d6d
 8002054:	08015dd5 	.word	0x08015dd5
 8002058:	08015e4b 	.word	0x08015e4b
 800205c:	08015f1d 	.word	0x08015f1d
 8002060:	08015f95 	.word	0x08015f95
 8002064:	08016009 	.word	0x08016009
 8002068:	08016069 	.word	0x08016069
 800206c:	080160df 	.word	0x080160df
 8002070:	0801614f 	.word	0x0801614f
 8002074:	080161bd 	.word	0x080161bd
 8002078:	080162b1 	.word	0x080162b1
 800207c:	0801631d 	.word	0x0801631d
 8002080:	0801638b 	.word	0x0801638b
 8002084:	08016405 	.word	0x08016405
 8002088:	0801646d 	.word	0x0801646d
 800208c:	080164dd 	.word	0x080164dd
 8002090:	08016549 	.word	0x08016549
 8002094:	08016635 	.word	0x08016635
 8002098:	080166a9 	.word	0x080166a9
 800209c:	08016711 	.word	0x08016711
 80020a0:	08016785 	.word	0x08016785
 80020a4:	080167ff 	.word	0x080167ff
 80020a8:	0801687b 	.word	0x0801687b
 80020ac:	0801693d 	.word	0x0801693d
 80020b0:	080169af 	.word	0x080169af
 80020b4:	08016a2f 	.word	0x08016a2f
 80020b8:	08016a9b 	.word	0x08016a9b
 80020bc:	08016b0b 	.word	0x08016b0b
 80020c0:	08016b7b 	.word	0x08016b7b
 80020c4:	08016c55 	.word	0x08016c55
 80020c8:	08016cbd 	.word	0x08016cbd
 80020cc:	08016d39 	.word	0x08016d39
 80020d0:	08016da9 	.word	0x08016da9
 80020d4:	08016e21 	.word	0x08016e21
 80020d8:	08016e83 	.word	0x08016e83
 80020dc:	08016ef5 	.word	0x08016ef5
 80020e0:	08016fdd 	.word	0x08016fdd
 80020e4:	0801704b 	.word	0x0801704b
 80020e8:	080170b7 	.word	0x080170b7
 80020ec:	08017127 	.word	0x08017127
 80020f0:	08017193 	.word	0x08017193
 80020f4:	08017201 	.word	0x08017201
 80020f8:	08017265 	.word	0x08017265
 80020fc:	0801733d 	.word	0x0801733d
 8002100:	080173ad 	.word	0x080173ad
 8002104:	08017417 	.word	0x08017417
 8002108:	08017479 	.word	0x08017479
 800210c:	080174e3 	.word	0x080174e3
 8002110:	08017555 	.word	0x08017555
 8002114:	0801765d 	.word	0x0801765d
 8002118:	080176d9 	.word	0x080176d9
 800211c:	08017751 	.word	0x08017751
 8002120:	080177c7 	.word	0x080177c7
 8002124:	08017837 	.word	0x08017837
 8002128:	080178a1 	.word	0x080178a1
 800212c:	08017975 	.word	0x08017975
 8002130:	080179ed 	.word	0x080179ed
 8002134:	08017a6f 	.word	0x08017a6f
 8002138:	08017ae3 	.word	0x08017ae3
 800213c:	08017b53 	.word	0x08017b53
 8002140:	08017bcf 	.word	0x08017bcf
 8002144:	08017cad 	.word	0x08017cad
 8002148:	08017d1d 	.word	0x08017d1d
 800214c:	08017d8d 	.word	0x08017d8d
 8002150:	08017dff 	.word	0x08017dff
 8002154:	08017e79 	.word	0x08017e79
 8002158:	08017ee7 	.word	0x08017ee7
 800215c:	08017f59 	.word	0x08017f59
 8002160:	0801803d 	.word	0x0801803d
 8002164:	080180a9 	.word	0x080180a9
 8002168:	0801811d 	.word	0x0801811d
 800216c:	08018197 	.word	0x08018197
 8002170:	0801820f 	.word	0x0801820f
 8002174:	08018281 	.word	0x08018281
 8002178:	0801835d 	.word	0x0801835d
 800217c:	080183cd 	.word	0x080183cd
 8002180:	08018449 	.word	0x08018449
 8002184:	080184c5 	.word	0x080184c5
 8002188:	08018521 	.word	0x08018521
 800218c:	08018595 	.word	0x08018595
 8002190:	08018679 	.word	0x08018679
 8002194:	080186e7 	.word	0x080186e7
 8002198:	0801874f 	.word	0x0801874f
 800219c:	080187b9 	.word	0x080187b9
 80021a0:	08018821 	.word	0x08018821
 80021a4:	08018889 	.word	0x08018889
 80021a8:	080188f3 	.word	0x080188f3
 80021ac:	080189dd 	.word	0x080189dd
 80021b0:	08018a57 	.word	0x08018a57
 80021b4:	08018ad1 	.word	0x08018ad1
 80021b8:	08018b47 	.word	0x08018b47
 80021bc:	08018bb7 	.word	0x08018bb7
 80021c0:	08018c21 	.word	0x08018c21
 80021c4:	08018d09 	.word	0x08018d09
 80021c8:	08018d7b 	.word	0x08018d7b
 80021cc:	08018ded 	.word	0x08018ded
 80021d0:	08018e59 	.word	0x08018e59
 80021d4:	08018ec5 	.word	0x08018ec5
 80021d8:	08018f29 	.word	0x08018f29
 80021dc:	08018f9d 	.word	0x08018f9d
 80021e0:	08019085 	.word	0x08019085
 80021e4:	080190fb 	.word	0x080190fb
 80021e8:	0801916b 	.word	0x0801916b
 80021ec:	080191cf 	.word	0x080191cf
 80021f0:	0801923f 	.word	0x0801923f
 80021f4:	080192af 	.word	0x080192af
 80021f8:	08019315 	.word	0x08019315
 80021fc:	080193f5 	.word	0x080193f5
 8002200:	08019459 	.word	0x08019459
 8002204:	080194c1 	.word	0x080194c1
 8002208:	08019531 	.word	0x08019531
 800220c:	080195a7 	.word	0x080195a7
 8002210:	08019617 	.word	0x08019617
 8002214:	08019689 	.word	0x08019689
 8002218:	0801977d 	.word	0x0801977d
 800221c:	080197f5 	.word	0x080197f5
 8002220:	0801986b 	.word	0x0801986b
 8002224:	080198e5 	.word	0x080198e5
 8002228:	08019953 	.word	0x08019953
 800222c:	080199c9 	.word	0x080199c9
 8002230:	08019aa9 	.word	0x08019aa9
 8002234:	08019b13 	.word	0x08019b13
 8002238:	08019b89 	.word	0x08019b89
 800223c:	08019bf9 	.word	0x08019bf9
 8002240:	08019c69 	.word	0x08019c69
 8002244:	08019cd5 	.word	0x08019cd5
 8002248:	08019dbd 	.word	0x08019dbd
 800224c:	08019e29 	.word	0x08019e29
 8002250:	08019e93 	.word	0x08019e93
 8002254:	08019eff 	.word	0x08019eff
 8002258:	08019f6d 	.word	0x08019f6d
 800225c:	08019fe7 	.word	0x08019fe7
 8002260:	0801a055 	.word	0x0801a055
 8002264:	0801a145 	.word	0x0801a145
 8002268:	0801a1b3 	.word	0x0801a1b3
 800226c:	0801a229 	.word	0x0801a229
 8002270:	0801a2b1 	.word	0x0801a2b1
 8002274:	0801a325 	.word	0x0801a325
 8002278:	0801a387 	.word	0x0801a387
 800227c:	0801a465 	.word	0x0801a465
 8002280:	0801a4db 	.word	0x0801a4db
 8002284:	0801a545 	.word	0x0801a545
 8002288:	0801a5b7 	.word	0x0801a5b7
 800228c:	0801a62d 	.word	0x0801a62d
 8002290:	0801a693 	.word	0x0801a693
 8002294:	0801a703 	.word	0x0801a703
 8002298:	0801a7f5 	.word	0x0801a7f5
 800229c:	0801a859 	.word	0x0801a859
 80022a0:	0801a8cb 	.word	0x0801a8cb
 80022a4:	0801a941 	.word	0x0801a941
 80022a8:	0801a9a7 	.word	0x0801a9a7
 80022ac:	0801aa19 	.word	0x0801aa19
 80022b0:	0801aa7f 	.word	0x0801aa7f
 80022b4:	0801ab75 	.word	0x0801ab75
 80022b8:	0801abe5 	.word	0x0801abe5
 80022bc:	0801ac5b 	.word	0x0801ac5b
 80022c0:	0801acd3 	.word	0x0801acd3
 80022c4:	0801ad43 	.word	0x0801ad43
 80022c8:	0801adbb 	.word	0x0801adbb
 80022cc:	0801ae99 	.word	0x0801ae99
 80022d0:	0801af05 	.word	0x0801af05
 80022d4:	0801af69 	.word	0x0801af69
 80022d8:	0801afcf 	.word	0x0801afcf
 80022dc:	0801b049 	.word	0x0801b049
 80022e0:	0801b0b9 	.word	0x0801b0b9
 80022e4:	0801b11b 	.word	0x0801b11b
 80022e8:	0801b201 	.word	0x0801b201
 80022ec:	0801b277 	.word	0x0801b277
 80022f0:	0801b2e7 	.word	0x0801b2e7
 80022f4:	0801b349 	.word	0x0801b349
 80022f8:	0801b3bd 	.word	0x0801b3bd
 80022fc:	0801b433 	.word	0x0801b433
 8002300:	0801b4a5 	.word	0x0801b4a5
 8002304:	0801b585 	.word	0x0801b585
 8002308:	0801b5f5 	.word	0x0801b5f5
 800230c:	0801b661 	.word	0x0801b661
 8002310:	0801b6c7 	.word	0x0801b6c7
 8002314:	0801b749 	.word	0x0801b749
 8002318:	0801b7b9 	.word	0x0801b7b9
 800231c:	0801b81f 	.word	0x0801b81f
 8002320:	0801b911 	.word	0x0801b911
 8002324:	0801b97f 	.word	0x0801b97f
 8002328:	0801b9db 	.word	0x0801b9db
 800232c:	0801ba53 	.word	0x0801ba53
 8002330:	0801bac3 	.word	0x0801bac3
 8002334:	0801bb33 	.word	0x0801bb33
 8002338:	0801bc15 	.word	0x0801bc15
 800233c:	0801bc91 	.word	0x0801bc91
 8002340:	0801bd27 	.word	0x0801bd27
 8002344:	0801bda7 	.word	0x0801bda7
 8002348:	0801be09 	.word	0x0801be09
 800234c:	0801be7d 	.word	0x0801be7d
 8002350:	0801bf5d 	.word	0x0801bf5d
 8002354:	0801bfc7 	.word	0x0801bfc7
 8002358:	0801c033 	.word	0x0801c033
 800235c:	0801c099 	.word	0x0801c099
 8002360:	0801c113 	.word	0x0801c113
 8002364:	0801c17d 	.word	0x0801c17d
 8002368:	0801c265 	.word	0x0801c265
 800236c:	0801c2dd 	.word	0x0801c2dd
 8002370:	0801c345 	.word	0x0801c345
 8002374:	0801c3bd 	.word	0x0801c3bd
 8002378:	0801c431 	.word	0x0801c431
 800237c:	0801c4a5 	.word	0x0801c4a5
		case 0 :
			strcpy(p->name,"CAZZONE");
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8002386:	49c3      	ldr	r1, [pc, #780]	; (8002694 <problem_fetch+0xfd0>)
 8002388:	461a      	mov	r2, r3
 800238a:	460b      	mov	r3, r1
 800238c:	cb03      	ldmia	r3!, {r0, r1}
 800238e:	6010      	str	r0, [r2, #0]
 8002390:	6051      	str	r1, [r2, #4]
			strcpy(p->grade,"8=D");
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8002398:	4abf      	ldr	r2, [pc, #764]	; (8002698 <problem_fetch+0xfd4>)
 800239a:	6810      	ldr	r0, [r2, #0]
 800239c:	6018      	str	r0, [r3, #0]
			p->moveSize = 50;
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	2232      	movs	r2, #50	; 0x32
 80023a2:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"A,A,B,B,B,B,C,C,E,E,E,E,E,E,E,E,E,E,E,E,E,F,F,F,F,G,G,G,G,H,H,H,H,H,H,H,H,H,H,H,H,H,I,I,J,J,J,J,K,K");
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	33a4      	adds	r3, #164	; 0xa4
 80023a8:	4abc      	ldr	r2, [pc, #752]	; (800269c <problem_fetch+0xfd8>)
 80023aa:	4618      	mov	r0, r3
 80023ac:	4611      	mov	r1, r2
 80023ae:	2364      	movs	r3, #100	; 0x64
 80023b0:	461a      	mov	r2, r3
 80023b2:	f01f fc97 	bl	8021ce4 <memcpy>
			strcpy(p->moveNumbers,"16,15,18,17,14,13,18,13,18,17,14,13,12,11,10,9,8,7,6,5,4,16,15,5,3,16,15,5,3,18,17,14,13,12,11,10,9,8,7,6,5,4,18,13,18,17,14,13,16,15");
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	3304      	adds	r3, #4
 80023ba:	4ab9      	ldr	r2, [pc, #740]	; (80026a0 <problem_fetch+0xfdc>)
 80023bc:	4618      	mov	r0, r3
 80023be:	4611      	mov	r1, r2
 80023c0:	2386      	movs	r3, #134	; 0x86
 80023c2:	461a      	mov	r2, r3
 80023c4:	f01f fc8e 	bl	8021ce4 <memcpy>
			strcpy(p->startFinish,"c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c");
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 80023ce:	4ab5      	ldr	r2, [pc, #724]	; (80026a4 <problem_fetch+0xfe0>)
 80023d0:	4618      	mov	r0, r3
 80023d2:	4611      	mov	r1, r2
 80023d4:	2364      	movs	r3, #100	; 0x64
 80023d6:	461a      	mov	r2, r3
 80023d8:	f01f fc84 	bl	8021ce4 <memcpy>
			break;
 80023dc:	f01a b8a2 	b.w	801c524 <problem_fetch+0x1ae60>
		case 1 :
			strcpy(p->name,"JUMPBUG");
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80023e6:	49b0      	ldr	r1, [pc, #704]	; (80026a8 <problem_fetch+0xfe4>)
 80023e8:	461a      	mov	r2, r3
 80023ea:	460b      	mov	r3, r1
 80023ec:	cb03      	ldmia	r3!, {r0, r1}
 80023ee:	6010      	str	r0, [r2, #0]
 80023f0:	6051      	str	r1, [r2, #4]
			strcpy(p->grade,"7A");
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80023f8:	4aac      	ldr	r2, [pc, #688]	; (80026ac <problem_fetch+0xfe8>)
 80023fa:	8811      	ldrh	r1, [r2, #0]
 80023fc:	7892      	ldrb	r2, [r2, #2]
 80023fe:	8019      	strh	r1, [r3, #0]
 8002400:	709a      	strb	r2, [r3, #2]
			p->moveSize = 6;
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	2206      	movs	r2, #6
 8002406:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"E,J,H,F,C,D");
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	33a4      	adds	r3, #164	; 0xa4
 800240c:	4aa8      	ldr	r2, [pc, #672]	; (80026b0 <problem_fetch+0xfec>)
 800240e:	461c      	mov	r4, r3
 8002410:	4613      	mov	r3, r2
 8002412:	cb07      	ldmia	r3!, {r0, r1, r2}
 8002414:	6020      	str	r0, [r4, #0]
 8002416:	6061      	str	r1, [r4, #4]
 8002418:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"6,5,10,11,13,18");
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	3304      	adds	r3, #4
 800241e:	4aa5      	ldr	r2, [pc, #660]	; (80026b4 <problem_fetch+0xff0>)
 8002420:	461c      	mov	r4, r3
 8002422:	4615      	mov	r5, r2
 8002424:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002426:	6020      	str	r0, [r4, #0]
 8002428:	6061      	str	r1, [r4, #4]
 800242a:	60a2      	str	r2, [r4, #8]
 800242c:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,s,d,d,d,e");
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8002434:	4aa0      	ldr	r2, [pc, #640]	; (80026b8 <problem_fetch+0xff4>)
 8002436:	461c      	mov	r4, r3
 8002438:	4613      	mov	r3, r2
 800243a:	cb07      	ldmia	r3!, {r0, r1, r2}
 800243c:	6020      	str	r0, [r4, #0]
 800243e:	6061      	str	r1, [r4, #4]
 8002440:	60a2      	str	r2, [r4, #8]
			break;
 8002442:	f01a b86f 	b.w	801c524 <problem_fetch+0x1ae60>
		case 2 :
			strcpy(p->name,"JINJA TEMPLATE 2");
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800244c:	4a9b      	ldr	r2, [pc, #620]	; (80026bc <problem_fetch+0xff8>)
 800244e:	461d      	mov	r5, r3
 8002450:	4614      	mov	r4, r2
 8002452:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002454:	6028      	str	r0, [r5, #0]
 8002456:	6069      	str	r1, [r5, #4]
 8002458:	60aa      	str	r2, [r5, #8]
 800245a:	60eb      	str	r3, [r5, #12]
 800245c:	7823      	ldrb	r3, [r4, #0]
 800245e:	742b      	strb	r3, [r5, #16]
			strcpy(p->grade,"6B+");
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8002466:	4a96      	ldr	r2, [pc, #600]	; (80026c0 <problem_fetch+0xffc>)
 8002468:	6810      	ldr	r0, [r2, #0]
 800246a:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	2207      	movs	r2, #7
 8002470:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,K,I,J,G,I,G");
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	33a4      	adds	r3, #164	; 0xa4
 8002476:	4a93      	ldr	r2, [pc, #588]	; (80026c4 <problem_fetch+0x1000>)
 8002478:	461c      	mov	r4, r3
 800247a:	4613      	mov	r3, r2
 800247c:	cb07      	ldmia	r3!, {r0, r1, r2}
 800247e:	6020      	str	r0, [r4, #0]
 8002480:	6061      	str	r1, [r4, #4]
 8002482:	60a2      	str	r2, [r4, #8]
 8002484:	881b      	ldrh	r3, [r3, #0]
 8002486:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"6,9,9,13,14,18,4");
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	3304      	adds	r3, #4
 800248c:	4a8e      	ldr	r2, [pc, #568]	; (80026c8 <problem_fetch+0x1004>)
 800248e:	461d      	mov	r5, r3
 8002490:	4614      	mov	r4, r2
 8002492:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002494:	6028      	str	r0, [r5, #0]
 8002496:	6069      	str	r1, [r5, #4]
 8002498:	60aa      	str	r2, [r5, #8]
 800249a:	60eb      	str	r3, [r5, #12]
 800249c:	7823      	ldrb	r3, [r4, #0]
 800249e:	742b      	strb	r3, [r5, #16]
			strcpy(p->startFinish,"s,d,d,d,d,e,s");
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 80024a6:	4a89      	ldr	r2, [pc, #548]	; (80026cc <problem_fetch+0x1008>)
 80024a8:	461c      	mov	r4, r3
 80024aa:	4613      	mov	r3, r2
 80024ac:	cb07      	ldmia	r3!, {r0, r1, r2}
 80024ae:	6020      	str	r0, [r4, #0]
 80024b0:	6061      	str	r1, [r4, #4]
 80024b2:	60a2      	str	r2, [r4, #8]
 80024b4:	881b      	ldrh	r3, [r3, #0]
 80024b6:	81a3      	strh	r3, [r4, #12]
			break;
 80024b8:	f01a b834 	b.w	801c524 <problem_fetch+0x1ae60>
		case 3 :
			strcpy(p->name,"BATTLE OF THE PUDGE SHORT");
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80024c2:	4a83      	ldr	r2, [pc, #524]	; (80026d0 <problem_fetch+0x100c>)
 80024c4:	461d      	mov	r5, r3
 80024c6:	4614      	mov	r4, r2
 80024c8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80024ca:	6028      	str	r0, [r5, #0]
 80024cc:	6069      	str	r1, [r5, #4]
 80024ce:	60aa      	str	r2, [r5, #8]
 80024d0:	60eb      	str	r3, [r5, #12]
 80024d2:	cc03      	ldmia	r4!, {r0, r1}
 80024d4:	6128      	str	r0, [r5, #16]
 80024d6:	6169      	str	r1, [r5, #20]
 80024d8:	8823      	ldrh	r3, [r4, #0]
 80024da:	832b      	strh	r3, [r5, #24]
			strcpy(p->grade,"7A");
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80024e2:	4a72      	ldr	r2, [pc, #456]	; (80026ac <problem_fetch+0xfe8>)
 80024e4:	8811      	ldrh	r1, [r2, #0]
 80024e6:	7892      	ldrb	r2, [r2, #2]
 80024e8:	8019      	strh	r1, [r3, #0]
 80024ea:	709a      	strb	r2, [r3, #2]
			p->moveSize = 7;
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	2207      	movs	r2, #7
 80024f0:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"C,H,E,I,D,D,D");
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	33a4      	adds	r3, #164	; 0xa4
 80024f6:	4a77      	ldr	r2, [pc, #476]	; (80026d4 <problem_fetch+0x1010>)
 80024f8:	461c      	mov	r4, r3
 80024fa:	4613      	mov	r3, r2
 80024fc:	cb07      	ldmia	r3!, {r0, r1, r2}
 80024fe:	6020      	str	r0, [r4, #0]
 8002500:	6061      	str	r1, [r4, #4]
 8002502:	60a2      	str	r2, [r4, #8]
 8002504:	881b      	ldrh	r3, [r3, #0]
 8002506:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,5,8,10,11,15,18");
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	3304      	adds	r3, #4
 800250c:	4a72      	ldr	r2, [pc, #456]	; (80026d8 <problem_fetch+0x1014>)
 800250e:	461d      	mov	r5, r3
 8002510:	4614      	mov	r4, r2
 8002512:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002514:	6028      	str	r0, [r5, #0]
 8002516:	6069      	str	r1, [r5, #4]
 8002518:	60aa      	str	r2, [r5, #8]
 800251a:	60eb      	str	r3, [r5, #12]
 800251c:	8823      	ldrh	r3, [r4, #0]
 800251e:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,s,d,d,d,d,e");
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8002526:	4a6d      	ldr	r2, [pc, #436]	; (80026dc <problem_fetch+0x1018>)
 8002528:	461c      	mov	r4, r3
 800252a:	4613      	mov	r3, r2
 800252c:	cb07      	ldmia	r3!, {r0, r1, r2}
 800252e:	6020      	str	r0, [r4, #0]
 8002530:	6061      	str	r1, [r4, #4]
 8002532:	60a2      	str	r2, [r4, #8]
 8002534:	881b      	ldrh	r3, [r3, #0]
 8002536:	81a3      	strh	r3, [r4, #12]
			break;
 8002538:	f019 bff4 	b.w	801c524 <problem_fetch+0x1ae60>
		case 4 :
			strcpy(p->name,"BLACK PSYCHO");
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8002542:	4a67      	ldr	r2, [pc, #412]	; (80026e0 <problem_fetch+0x101c>)
 8002544:	461c      	mov	r4, r3
 8002546:	4613      	mov	r3, r2
 8002548:	cb07      	ldmia	r3!, {r0, r1, r2}
 800254a:	6020      	str	r0, [r4, #0]
 800254c:	6061      	str	r1, [r4, #4]
 800254e:	60a2      	str	r2, [r4, #8]
 8002550:	781b      	ldrb	r3, [r3, #0]
 8002552:	7323      	strb	r3, [r4, #12]
			strcpy(p->grade,"6C+");
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800255a:	4a62      	ldr	r2, [pc, #392]	; (80026e4 <problem_fetch+0x1020>)
 800255c:	6810      	ldr	r0, [r2, #0]
 800255e:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	2206      	movs	r2, #6
 8002564:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,C,H,D,G,D");
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	33a4      	adds	r3, #164	; 0xa4
 800256a:	4a5f      	ldr	r2, [pc, #380]	; (80026e8 <problem_fetch+0x1024>)
 800256c:	461c      	mov	r4, r3
 800256e:	4613      	mov	r3, r2
 8002570:	cb07      	ldmia	r3!, {r0, r1, r2}
 8002572:	6020      	str	r0, [r4, #0]
 8002574:	6061      	str	r1, [r4, #4]
 8002576:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,5,8,11,14,18");
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	3304      	adds	r3, #4
 800257c:	4a5b      	ldr	r2, [pc, #364]	; (80026ec <problem_fetch+0x1028>)
 800257e:	461c      	mov	r4, r3
 8002580:	4613      	mov	r3, r2
 8002582:	cb07      	ldmia	r3!, {r0, r1, r2}
 8002584:	6020      	str	r0, [r4, #0]
 8002586:	6061      	str	r1, [r4, #4]
 8002588:	60a2      	str	r2, [r4, #8]
 800258a:	881a      	ldrh	r2, [r3, #0]
 800258c:	789b      	ldrb	r3, [r3, #2]
 800258e:	81a2      	strh	r2, [r4, #12]
 8002590:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish,"s,s,d,d,d,e");
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8002598:	4a47      	ldr	r2, [pc, #284]	; (80026b8 <problem_fetch+0xff4>)
 800259a:	461c      	mov	r4, r3
 800259c:	4613      	mov	r3, r2
 800259e:	cb07      	ldmia	r3!, {r0, r1, r2}
 80025a0:	6020      	str	r0, [r4, #0]
 80025a2:	6061      	str	r1, [r4, #4]
 80025a4:	60a2      	str	r2, [r4, #8]
			break;
 80025a6:	f019 bfbd 	b.w	801c524 <problem_fetch+0x1ae60>
		case 5 :
			strcpy(p->name,"TRIAL ‘N’ ERROR");
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80025b0:	4a4f      	ldr	r2, [pc, #316]	; (80026f0 <problem_fetch+0x102c>)
 80025b2:	461d      	mov	r5, r3
 80025b4:	4614      	mov	r4, r2
 80025b6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80025b8:	6028      	str	r0, [r5, #0]
 80025ba:	6069      	str	r1, [r5, #4]
 80025bc:	60aa      	str	r2, [r5, #8]
 80025be:	60eb      	str	r3, [r5, #12]
 80025c0:	6820      	ldr	r0, [r4, #0]
 80025c2:	6128      	str	r0, [r5, #16]
			strcpy(p->grade,"6C");
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80025ca:	4a4a      	ldr	r2, [pc, #296]	; (80026f4 <problem_fetch+0x1030>)
 80025cc:	8811      	ldrh	r1, [r2, #0]
 80025ce:	7892      	ldrb	r2, [r2, #2]
 80025d0:	8019      	strh	r1, [r3, #0]
 80025d2:	709a      	strb	r2, [r3, #2]
			p->moveSize = 7;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	2207      	movs	r2, #7
 80025d8:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,B,E,G,E,J,D");
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	33a4      	adds	r3, #164	; 0xa4
 80025de:	4a46      	ldr	r2, [pc, #280]	; (80026f8 <problem_fetch+0x1034>)
 80025e0:	461c      	mov	r4, r3
 80025e2:	4613      	mov	r3, r2
 80025e4:	cb07      	ldmia	r3!, {r0, r1, r2}
 80025e6:	6020      	str	r0, [r4, #0]
 80025e8:	6061      	str	r1, [r4, #4]
 80025ea:	60a2      	str	r2, [r4, #8]
 80025ec:	881b      	ldrh	r3, [r3, #0]
 80025ee:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"6,6,9,10,14,16,18");
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	3304      	adds	r3, #4
 80025f4:	4a41      	ldr	r2, [pc, #260]	; (80026fc <problem_fetch+0x1038>)
 80025f6:	461d      	mov	r5, r3
 80025f8:	4614      	mov	r4, r2
 80025fa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80025fc:	6028      	str	r0, [r5, #0]
 80025fe:	6069      	str	r1, [r5, #4]
 8002600:	60aa      	str	r2, [r5, #8]
 8002602:	60eb      	str	r3, [r5, #12]
 8002604:	8823      	ldrh	r3, [r4, #0]
 8002606:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,s,d,d,d,d,e");
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800260e:	4a33      	ldr	r2, [pc, #204]	; (80026dc <problem_fetch+0x1018>)
 8002610:	461c      	mov	r4, r3
 8002612:	4613      	mov	r3, r2
 8002614:	cb07      	ldmia	r3!, {r0, r1, r2}
 8002616:	6020      	str	r0, [r4, #0]
 8002618:	6061      	str	r1, [r4, #4]
 800261a:	60a2      	str	r2, [r4, #8]
 800261c:	881b      	ldrh	r3, [r3, #0]
 800261e:	81a3      	strh	r3, [r4, #12]
			break;
 8002620:	f019 bf80 	b.w	801c524 <problem_fetch+0x1ae60>
		case 6 :
			strcpy(p->name,"1985-54");
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800262a:	4935      	ldr	r1, [pc, #212]	; (8002700 <problem_fetch+0x103c>)
 800262c:	461a      	mov	r2, r3
 800262e:	460b      	mov	r3, r1
 8002630:	cb03      	ldmia	r3!, {r0, r1}
 8002632:	6010      	str	r0, [r2, #0]
 8002634:	6051      	str	r1, [r2, #4]
			strcpy(p->grade,"6B+");
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800263c:	4a20      	ldr	r2, [pc, #128]	; (80026c0 <problem_fetch+0xffc>)
 800263e:	6810      	ldr	r0, [r2, #0]
 8002640:	6018      	str	r0, [r3, #0]
			p->moveSize = 8;
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	2208      	movs	r2, #8
 8002646:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"E,H,I,H,J,G,H,D");
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	33a4      	adds	r3, #164	; 0xa4
 800264c:	4a2d      	ldr	r2, [pc, #180]	; (8002704 <problem_fetch+0x1040>)
 800264e:	461c      	mov	r4, r3
 8002650:	4615      	mov	r5, r2
 8002652:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002654:	6020      	str	r0, [r4, #0]
 8002656:	6061      	str	r1, [r4, #4]
 8002658:	60a2      	str	r2, [r4, #8]
 800265a:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"6,5,10,10,13,15,16,18");
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	3304      	adds	r3, #4
 8002660:	4a29      	ldr	r2, [pc, #164]	; (8002708 <problem_fetch+0x1044>)
 8002662:	461d      	mov	r5, r3
 8002664:	4614      	mov	r4, r2
 8002666:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002668:	6028      	str	r0, [r5, #0]
 800266a:	6069      	str	r1, [r5, #4]
 800266c:	60aa      	str	r2, [r5, #8]
 800266e:	60eb      	str	r3, [r5, #12]
 8002670:	6820      	ldr	r0, [r4, #0]
 8002672:	6128      	str	r0, [r5, #16]
 8002674:	88a3      	ldrh	r3, [r4, #4]
 8002676:	82ab      	strh	r3, [r5, #20]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,e");
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800267e:	4a23      	ldr	r2, [pc, #140]	; (800270c <problem_fetch+0x1048>)
 8002680:	461c      	mov	r4, r3
 8002682:	4615      	mov	r5, r2
 8002684:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002686:	6020      	str	r0, [r4, #0]
 8002688:	6061      	str	r1, [r4, #4]
 800268a:	60a2      	str	r2, [r4, #8]
 800268c:	60e3      	str	r3, [r4, #12]
			break;
 800268e:	f019 bf49 	b.w	801c524 <problem_fetch+0x1ae60>
 8002692:	bf00      	nop
 8002694:	080236b0 	.word	0x080236b0
 8002698:	080236b8 	.word	0x080236b8
 800269c:	080236bc 	.word	0x080236bc
 80026a0:	08023720 	.word	0x08023720
 80026a4:	080237a8 	.word	0x080237a8
 80026a8:	0802380c 	.word	0x0802380c
 80026ac:	08023814 	.word	0x08023814
 80026b0:	08023818 	.word	0x08023818
 80026b4:	08023824 	.word	0x08023824
 80026b8:	08023834 	.word	0x08023834
 80026bc:	08023840 	.word	0x08023840
 80026c0:	08023854 	.word	0x08023854
 80026c4:	08023858 	.word	0x08023858
 80026c8:	08023868 	.word	0x08023868
 80026cc:	0802387c 	.word	0x0802387c
 80026d0:	0802388c 	.word	0x0802388c
 80026d4:	080238a8 	.word	0x080238a8
 80026d8:	080238b8 	.word	0x080238b8
 80026dc:	080238cc 	.word	0x080238cc
 80026e0:	080238dc 	.word	0x080238dc
 80026e4:	080238ec 	.word	0x080238ec
 80026e8:	080238f0 	.word	0x080238f0
 80026ec:	080238fc 	.word	0x080238fc
 80026f0:	0802390c 	.word	0x0802390c
 80026f4:	08023920 	.word	0x08023920
 80026f8:	08023924 	.word	0x08023924
 80026fc:	08023934 	.word	0x08023934
 8002700:	08023948 	.word	0x08023948
 8002704:	08023950 	.word	0x08023950
 8002708:	08023960 	.word	0x08023960
 800270c:	08023978 	.word	0x08023978
		case 7 :
			strcpy(p->name,"PANTHER");
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8002716:	49ab      	ldr	r1, [pc, #684]	; (80029c4 <problem_fetch+0x1300>)
 8002718:	461a      	mov	r2, r3
 800271a:	460b      	mov	r3, r1
 800271c:	cb03      	ldmia	r3!, {r0, r1}
 800271e:	6010      	str	r0, [r2, #0]
 8002720:	6051      	str	r1, [r2, #4]
			strcpy(p->grade,"7B+");
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8002728:	4aa7      	ldr	r2, [pc, #668]	; (80029c8 <problem_fetch+0x1304>)
 800272a:	6810      	ldr	r0, [r2, #0]
 800272c:	6018      	str	r0, [r3, #0]
			p->moveSize = 4;
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	2204      	movs	r2, #4
 8002732:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"E,G,G,I");
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	33a4      	adds	r3, #164	; 0xa4
 8002738:	49a4      	ldr	r1, [pc, #656]	; (80029cc <problem_fetch+0x1308>)
 800273a:	461a      	mov	r2, r3
 800273c:	460b      	mov	r3, r1
 800273e:	cb03      	ldmia	r3!, {r0, r1}
 8002740:	6010      	str	r0, [r2, #0]
 8002742:	6051      	str	r1, [r2, #4]
			strcpy(p->moveNumbers,"6,10,14,18");
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	3304      	adds	r3, #4
 8002748:	49a1      	ldr	r1, [pc, #644]	; (80029d0 <problem_fetch+0x130c>)
 800274a:	461a      	mov	r2, r3
 800274c:	460b      	mov	r3, r1
 800274e:	cb03      	ldmia	r3!, {r0, r1}
 8002750:	6010      	str	r0, [r2, #0]
 8002752:	6051      	str	r1, [r2, #4]
 8002754:	8819      	ldrh	r1, [r3, #0]
 8002756:	789b      	ldrb	r3, [r3, #2]
 8002758:	8111      	strh	r1, [r2, #8]
 800275a:	7293      	strb	r3, [r2, #10]
			strcpy(p->startFinish,"s,d,d,e");
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8002762:	499c      	ldr	r1, [pc, #624]	; (80029d4 <problem_fetch+0x1310>)
 8002764:	461a      	mov	r2, r3
 8002766:	460b      	mov	r3, r1
 8002768:	cb03      	ldmia	r3!, {r0, r1}
 800276a:	6010      	str	r0, [r2, #0]
 800276c:	6051      	str	r1, [r2, #4]
			break;
 800276e:	f019 bed9 	b.w	801c524 <problem_fetch+0x1ae60>
		case 8 :
			strcpy(p->name,"CHOSS 7");
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8002778:	4997      	ldr	r1, [pc, #604]	; (80029d8 <problem_fetch+0x1314>)
 800277a:	461a      	mov	r2, r3
 800277c:	460b      	mov	r3, r1
 800277e:	cb03      	ldmia	r3!, {r0, r1}
 8002780:	6010      	str	r0, [r2, #0]
 8002782:	6051      	str	r1, [r2, #4]
			strcpy(p->grade,"7A");
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800278a:	4a94      	ldr	r2, [pc, #592]	; (80029dc <problem_fetch+0x1318>)
 800278c:	8811      	ldrh	r1, [r2, #0]
 800278e:	7892      	ldrb	r2, [r2, #2]
 8002790:	8019      	strh	r1, [r3, #0]
 8002792:	709a      	strb	r2, [r3, #2]
			p->moveSize = 7;
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	2207      	movs	r2, #7
 8002798:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,H,G,C,E,A,D");
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	33a4      	adds	r3, #164	; 0xa4
 800279e:	4a90      	ldr	r2, [pc, #576]	; (80029e0 <problem_fetch+0x131c>)
 80027a0:	461c      	mov	r4, r3
 80027a2:	4613      	mov	r3, r2
 80027a4:	cb07      	ldmia	r3!, {r0, r1, r2}
 80027a6:	6020      	str	r0, [r4, #0]
 80027a8:	6061      	str	r1, [r4, #4]
 80027aa:	60a2      	str	r2, [r4, #8]
 80027ac:	881b      	ldrh	r3, [r3, #0]
 80027ae:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,8,9,8,12,14,18");
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	3304      	adds	r3, #4
 80027b4:	4a8b      	ldr	r2, [pc, #556]	; (80029e4 <problem_fetch+0x1320>)
 80027b6:	461d      	mov	r5, r3
 80027b8:	4614      	mov	r4, r2
 80027ba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80027bc:	6028      	str	r0, [r5, #0]
 80027be:	6069      	str	r1, [r5, #4]
 80027c0:	60aa      	str	r2, [r5, #8]
 80027c2:	60eb      	str	r3, [r5, #12]
 80027c4:	7823      	ldrb	r3, [r4, #0]
 80027c6:	742b      	strb	r3, [r5, #16]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 80027ce:	4a86      	ldr	r2, [pc, #536]	; (80029e8 <problem_fetch+0x1324>)
 80027d0:	461c      	mov	r4, r3
 80027d2:	4613      	mov	r3, r2
 80027d4:	cb07      	ldmia	r3!, {r0, r1, r2}
 80027d6:	6020      	str	r0, [r4, #0]
 80027d8:	6061      	str	r1, [r4, #4]
 80027da:	60a2      	str	r2, [r4, #8]
 80027dc:	881b      	ldrh	r3, [r3, #0]
 80027de:	81a3      	strh	r3, [r4, #12]
			break;
 80027e0:	f019 bea0 	b.w	801c524 <problem_fetch+0x1ae60>
		case 9 :
			strcpy(p->name,"ASHES");
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80027ea:	4a80      	ldr	r2, [pc, #512]	; (80029ec <problem_fetch+0x1328>)
 80027ec:	6810      	ldr	r0, [r2, #0]
 80027ee:	6018      	str	r0, [r3, #0]
 80027f0:	8892      	ldrh	r2, [r2, #4]
 80027f2:	809a      	strh	r2, [r3, #4]
			strcpy(p->grade,"7A+");
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80027fa:	4a7d      	ldr	r2, [pc, #500]	; (80029f0 <problem_fetch+0x132c>)
 80027fc:	6810      	ldr	r0, [r2, #0]
 80027fe:	6018      	str	r0, [r3, #0]
			p->moveSize = 9;
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	2209      	movs	r2, #9
 8002804:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"H,G,C,B,E,E,I,J,D");
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	33a4      	adds	r3, #164	; 0xa4
 800280a:	4a7a      	ldr	r2, [pc, #488]	; (80029f4 <problem_fetch+0x1330>)
 800280c:	461d      	mov	r5, r3
 800280e:	4614      	mov	r4, r2
 8002810:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002812:	6028      	str	r0, [r5, #0]
 8002814:	6069      	str	r1, [r5, #4]
 8002816:	60aa      	str	r2, [r5, #8]
 8002818:	60eb      	str	r3, [r5, #12]
 800281a:	8823      	ldrh	r3, [r4, #0]
 800281c:	822b      	strh	r3, [r5, #16]
			strcpy(p->moveNumbers,"5,6,5,10,14,16,18,13,7");
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	3304      	adds	r3, #4
 8002822:	4a75      	ldr	r2, [pc, #468]	; (80029f8 <problem_fetch+0x1334>)
 8002824:	461c      	mov	r4, r3
 8002826:	4615      	mov	r5, r2
 8002828:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800282a:	6020      	str	r0, [r4, #0]
 800282c:	6061      	str	r1, [r4, #4]
 800282e:	60a2      	str	r2, [r4, #8]
 8002830:	60e3      	str	r3, [r4, #12]
 8002832:	6828      	ldr	r0, [r5, #0]
 8002834:	6120      	str	r0, [r4, #16]
 8002836:	88ab      	ldrh	r3, [r5, #4]
 8002838:	79aa      	ldrb	r2, [r5, #6]
 800283a:	82a3      	strh	r3, [r4, #20]
 800283c:	4613      	mov	r3, r2
 800283e:	75a3      	strb	r3, [r4, #22]
			strcpy(p->startFinish,"s,d,d,d,d,d,e,d,d");
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8002846:	4a6d      	ldr	r2, [pc, #436]	; (80029fc <problem_fetch+0x1338>)
 8002848:	461d      	mov	r5, r3
 800284a:	4614      	mov	r4, r2
 800284c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800284e:	6028      	str	r0, [r5, #0]
 8002850:	6069      	str	r1, [r5, #4]
 8002852:	60aa      	str	r2, [r5, #8]
 8002854:	60eb      	str	r3, [r5, #12]
 8002856:	8823      	ldrh	r3, [r4, #0]
 8002858:	822b      	strh	r3, [r5, #16]
			break;
 800285a:	f019 be63 	b.w	801c524 <problem_fetch+0x1ae60>
		case 10 :
			strcpy(p->name,"BURNED");
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8002864:	4a66      	ldr	r2, [pc, #408]	; (8002a00 <problem_fetch+0x133c>)
 8002866:	6810      	ldr	r0, [r2, #0]
 8002868:	6018      	str	r0, [r3, #0]
 800286a:	8891      	ldrh	r1, [r2, #4]
 800286c:	7992      	ldrb	r2, [r2, #6]
 800286e:	8099      	strh	r1, [r3, #4]
 8002870:	719a      	strb	r2, [r3, #6]
			strcpy(p->grade,"7A");
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8002878:	4a58      	ldr	r2, [pc, #352]	; (80029dc <problem_fetch+0x1318>)
 800287a:	8811      	ldrh	r1, [r2, #0]
 800287c:	7892      	ldrb	r2, [r2, #2]
 800287e:	8019      	strh	r1, [r3, #0]
 8002880:	709a      	strb	r2, [r3, #2]
			p->moveSize = 8;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	2208      	movs	r2, #8
 8002886:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"E,H,G,J,J,G,E,I");
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	33a4      	adds	r3, #164	; 0xa4
 800288c:	4a5d      	ldr	r2, [pc, #372]	; (8002a04 <problem_fetch+0x1340>)
 800288e:	461c      	mov	r4, r3
 8002890:	4615      	mov	r5, r2
 8002892:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002894:	6020      	str	r0, [r4, #0]
 8002896:	6061      	str	r1, [r4, #4]
 8002898:	60a2      	str	r2, [r4, #8]
 800289a:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"6,8,9,5,12,14,16,18");
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	3304      	adds	r3, #4
 80028a0:	4a59      	ldr	r2, [pc, #356]	; (8002a08 <problem_fetch+0x1344>)
 80028a2:	461d      	mov	r5, r3
 80028a4:	4614      	mov	r4, r2
 80028a6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80028a8:	6028      	str	r0, [r5, #0]
 80028aa:	6069      	str	r1, [r5, #4]
 80028ac:	60aa      	str	r2, [r5, #8]
 80028ae:	60eb      	str	r3, [r5, #12]
 80028b0:	6820      	ldr	r0, [r4, #0]
 80028b2:	6128      	str	r0, [r5, #16]
			strcpy(p->startFinish,"s,d,d,d,d,d,d,e");
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 80028ba:	4a54      	ldr	r2, [pc, #336]	; (8002a0c <problem_fetch+0x1348>)
 80028bc:	461c      	mov	r4, r3
 80028be:	4615      	mov	r5, r2
 80028c0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80028c2:	6020      	str	r0, [r4, #0]
 80028c4:	6061      	str	r1, [r4, #4]
 80028c6:	60a2      	str	r2, [r4, #8]
 80028c8:	60e3      	str	r3, [r4, #12]
			break;
 80028ca:	f019 be2b 	b.w	801c524 <problem_fetch+0x1ae60>
		case 11 :
			strcpy(p->name,"DER SCHWÄCHLING");
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80028d4:	4a4e      	ldr	r2, [pc, #312]	; (8002a10 <problem_fetch+0x134c>)
 80028d6:	461d      	mov	r5, r3
 80028d8:	4614      	mov	r4, r2
 80028da:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80028dc:	6028      	str	r0, [r5, #0]
 80028de:	6069      	str	r1, [r5, #4]
 80028e0:	60aa      	str	r2, [r5, #8]
 80028e2:	60eb      	str	r3, [r5, #12]
 80028e4:	7823      	ldrb	r3, [r4, #0]
 80028e6:	742b      	strb	r3, [r5, #16]
			strcpy(p->grade,"6C");
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80028ee:	4a49      	ldr	r2, [pc, #292]	; (8002a14 <problem_fetch+0x1350>)
 80028f0:	8811      	ldrh	r1, [r2, #0]
 80028f2:	7892      	ldrb	r2, [r2, #2]
 80028f4:	8019      	strh	r1, [r3, #0]
 80028f6:	709a      	strb	r2, [r3, #2]
			p->moveSize = 8;
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	2208      	movs	r2, #8
 80028fc:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,J,K,I,J,G,G,D");
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	33a4      	adds	r3, #164	; 0xa4
 8002902:	4a45      	ldr	r2, [pc, #276]	; (8002a18 <problem_fetch+0x1354>)
 8002904:	461c      	mov	r4, r3
 8002906:	4615      	mov	r5, r2
 8002908:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800290a:	6020      	str	r0, [r4, #0]
 800290c:	6061      	str	r1, [r4, #4]
 800290e:	60a2      	str	r2, [r4, #8]
 8002910:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,7,9,10,12,14,17,18");
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	3304      	adds	r3, #4
 8002916:	4a41      	ldr	r2, [pc, #260]	; (8002a1c <problem_fetch+0x1358>)
 8002918:	461d      	mov	r5, r3
 800291a:	4614      	mov	r4, r2
 800291c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800291e:	6028      	str	r0, [r5, #0]
 8002920:	6069      	str	r1, [r5, #4]
 8002922:	60aa      	str	r2, [r5, #8]
 8002924:	60eb      	str	r3, [r5, #12]
 8002926:	6820      	ldr	r0, [r4, #0]
 8002928:	6128      	str	r0, [r5, #16]
 800292a:	7923      	ldrb	r3, [r4, #4]
 800292c:	752b      	strb	r3, [r5, #20]
			strcpy(p->startFinish,"s,d,d,d,d,d,d,e");
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8002934:	4a35      	ldr	r2, [pc, #212]	; (8002a0c <problem_fetch+0x1348>)
 8002936:	461c      	mov	r4, r3
 8002938:	4615      	mov	r5, r2
 800293a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800293c:	6020      	str	r0, [r4, #0]
 800293e:	6061      	str	r1, [r4, #4]
 8002940:	60a2      	str	r2, [r4, #8]
 8002942:	60e3      	str	r3, [r4, #12]
			break;
 8002944:	f019 bdee 	b.w	801c524 <problem_fetch+0x1ae60>
		case 12 :
			strcpy(p->name,"CAMPUSING WITH A BACKPACK");
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800294e:	4a34      	ldr	r2, [pc, #208]	; (8002a20 <problem_fetch+0x135c>)
 8002950:	461d      	mov	r5, r3
 8002952:	4614      	mov	r4, r2
 8002954:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002956:	6028      	str	r0, [r5, #0]
 8002958:	6069      	str	r1, [r5, #4]
 800295a:	60aa      	str	r2, [r5, #8]
 800295c:	60eb      	str	r3, [r5, #12]
 800295e:	cc03      	ldmia	r4!, {r0, r1}
 8002960:	6128      	str	r0, [r5, #16]
 8002962:	6169      	str	r1, [r5, #20]
 8002964:	8823      	ldrh	r3, [r4, #0]
 8002966:	832b      	strh	r3, [r5, #24]
			strcpy(p->grade,"6B+");
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800296e:	4a2d      	ldr	r2, [pc, #180]	; (8002a24 <problem_fetch+0x1360>)
 8002970:	6810      	ldr	r0, [r2, #0]
 8002972:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	2207      	movs	r2, #7
 8002978:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"H,J,E,H,C,D,D");
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	33a4      	adds	r3, #164	; 0xa4
 800297e:	4a2a      	ldr	r2, [pc, #168]	; (8002a28 <problem_fetch+0x1364>)
 8002980:	461c      	mov	r4, r3
 8002982:	4613      	mov	r3, r2
 8002984:	cb07      	ldmia	r3!, {r0, r1, r2}
 8002986:	6020      	str	r0, [r4, #0]
 8002988:	6061      	str	r1, [r4, #4]
 800298a:	60a2      	str	r2, [r4, #8]
 800298c:	881b      	ldrh	r3, [r3, #0]
 800298e:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,5,8,10,13,15,18");
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	3304      	adds	r3, #4
 8002994:	4a25      	ldr	r2, [pc, #148]	; (8002a2c <problem_fetch+0x1368>)
 8002996:	461d      	mov	r5, r3
 8002998:	4614      	mov	r4, r2
 800299a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800299c:	6028      	str	r0, [r5, #0]
 800299e:	6069      	str	r1, [r5, #4]
 80029a0:	60aa      	str	r2, [r5, #8]
 80029a2:	60eb      	str	r3, [r5, #12]
 80029a4:	8823      	ldrh	r3, [r4, #0]
 80029a6:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,s,d,d,d,d,e");
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 80029ae:	4a20      	ldr	r2, [pc, #128]	; (8002a30 <problem_fetch+0x136c>)
 80029b0:	461c      	mov	r4, r3
 80029b2:	4613      	mov	r3, r2
 80029b4:	cb07      	ldmia	r3!, {r0, r1, r2}
 80029b6:	6020      	str	r0, [r4, #0]
 80029b8:	6061      	str	r1, [r4, #4]
 80029ba:	60a2      	str	r2, [r4, #8]
 80029bc:	881b      	ldrh	r3, [r3, #0]
 80029be:	81a3      	strh	r3, [r4, #12]
			break;
 80029c0:	f019 bdb0 	b.w	801c524 <problem_fetch+0x1ae60>
 80029c4:	08023988 	.word	0x08023988
 80029c8:	08023990 	.word	0x08023990
 80029cc:	08023994 	.word	0x08023994
 80029d0:	0802399c 	.word	0x0802399c
 80029d4:	080239a8 	.word	0x080239a8
 80029d8:	080239b0 	.word	0x080239b0
 80029dc:	08023814 	.word	0x08023814
 80029e0:	080239b8 	.word	0x080239b8
 80029e4:	080239c8 	.word	0x080239c8
 80029e8:	080239dc 	.word	0x080239dc
 80029ec:	080239ec 	.word	0x080239ec
 80029f0:	080239f4 	.word	0x080239f4
 80029f4:	080239f8 	.word	0x080239f8
 80029f8:	08023a0c 	.word	0x08023a0c
 80029fc:	08023a24 	.word	0x08023a24
 8002a00:	08023a38 	.word	0x08023a38
 8002a04:	08023a40 	.word	0x08023a40
 8002a08:	08023a50 	.word	0x08023a50
 8002a0c:	08023a64 	.word	0x08023a64
 8002a10:	08023a74 	.word	0x08023a74
 8002a14:	08023920 	.word	0x08023920
 8002a18:	08023a88 	.word	0x08023a88
 8002a1c:	08023a98 	.word	0x08023a98
 8002a20:	08023ab0 	.word	0x08023ab0
 8002a24:	08023854 	.word	0x08023854
 8002a28:	08023acc 	.word	0x08023acc
 8002a2c:	08023adc 	.word	0x08023adc
 8002a30:	080238cc 	.word	0x080238cc
		case 13 :
			strcpy(p->name,"DEAD FISH");
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8002a3a:	49bf      	ldr	r1, [pc, #764]	; (8002d38 <problem_fetch+0x1674>)
 8002a3c:	461a      	mov	r2, r3
 8002a3e:	460b      	mov	r3, r1
 8002a40:	cb03      	ldmia	r3!, {r0, r1}
 8002a42:	6010      	str	r0, [r2, #0]
 8002a44:	6051      	str	r1, [r2, #4]
 8002a46:	881b      	ldrh	r3, [r3, #0]
 8002a48:	8113      	strh	r3, [r2, #8]
			strcpy(p->grade,"6C+");
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8002a50:	4aba      	ldr	r2, [pc, #744]	; (8002d3c <problem_fetch+0x1678>)
 8002a52:	6810      	ldr	r0, [r2, #0]
 8002a54:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	2207      	movs	r2, #7
 8002a5a:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,E,G,F,I,E,D");
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	33a4      	adds	r3, #164	; 0xa4
 8002a60:	4ab7      	ldr	r2, [pc, #732]	; (8002d40 <problem_fetch+0x167c>)
 8002a62:	461c      	mov	r4, r3
 8002a64:	4613      	mov	r3, r2
 8002a66:	cb07      	ldmia	r3!, {r0, r1, r2}
 8002a68:	6020      	str	r0, [r4, #0]
 8002a6a:	6061      	str	r1, [r4, #4]
 8002a6c:	60a2      	str	r2, [r4, #8]
 8002a6e:	881b      	ldrh	r3, [r3, #0]
 8002a70:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,6,9,11,14,16,18");
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	3304      	adds	r3, #4
 8002a76:	4ab3      	ldr	r2, [pc, #716]	; (8002d44 <problem_fetch+0x1680>)
 8002a78:	461d      	mov	r5, r3
 8002a7a:	4614      	mov	r4, r2
 8002a7c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002a7e:	6028      	str	r0, [r5, #0]
 8002a80:	6069      	str	r1, [r5, #4]
 8002a82:	60aa      	str	r2, [r5, #8]
 8002a84:	60eb      	str	r3, [r5, #12]
 8002a86:	8823      	ldrh	r3, [r4, #0]
 8002a88:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,s,d,d,d,d,e");
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8002a90:	4aad      	ldr	r2, [pc, #692]	; (8002d48 <problem_fetch+0x1684>)
 8002a92:	461c      	mov	r4, r3
 8002a94:	4613      	mov	r3, r2
 8002a96:	cb07      	ldmia	r3!, {r0, r1, r2}
 8002a98:	6020      	str	r0, [r4, #0]
 8002a9a:	6061      	str	r1, [r4, #4]
 8002a9c:	60a2      	str	r2, [r4, #8]
 8002a9e:	881b      	ldrh	r3, [r3, #0]
 8002aa0:	81a3      	strh	r3, [r4, #12]
			break;
 8002aa2:	f019 bd3f 	b.w	801c524 <problem_fetch+0x1ae60>
		case 14 :
			strcpy(p->name,"SUSHI ROLL");
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8002aac:	49a7      	ldr	r1, [pc, #668]	; (8002d4c <problem_fetch+0x1688>)
 8002aae:	461a      	mov	r2, r3
 8002ab0:	460b      	mov	r3, r1
 8002ab2:	cb03      	ldmia	r3!, {r0, r1}
 8002ab4:	6010      	str	r0, [r2, #0]
 8002ab6:	6051      	str	r1, [r2, #4]
 8002ab8:	8819      	ldrh	r1, [r3, #0]
 8002aba:	789b      	ldrb	r3, [r3, #2]
 8002abc:	8111      	strh	r1, [r2, #8]
 8002abe:	7293      	strb	r3, [r2, #10]
			strcpy(p->grade,"6B+");
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8002ac6:	4aa2      	ldr	r2, [pc, #648]	; (8002d50 <problem_fetch+0x168c>)
 8002ac8:	6810      	ldr	r0, [r2, #0]
 8002aca:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	2207      	movs	r2, #7
 8002ad0:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,J,H,C,D,A,D");
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	33a4      	adds	r3, #164	; 0xa4
 8002ad6:	4a9f      	ldr	r2, [pc, #636]	; (8002d54 <problem_fetch+0x1690>)
 8002ad8:	461c      	mov	r4, r3
 8002ada:	4613      	mov	r3, r2
 8002adc:	cb07      	ldmia	r3!, {r0, r1, r2}
 8002ade:	6020      	str	r0, [r4, #0]
 8002ae0:	6061      	str	r1, [r4, #4]
 8002ae2:	60a2      	str	r2, [r4, #8]
 8002ae4:	881b      	ldrh	r3, [r3, #0]
 8002ae6:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"6,5,10,13,18,18,15");
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	3304      	adds	r3, #4
 8002aec:	4a9a      	ldr	r2, [pc, #616]	; (8002d58 <problem_fetch+0x1694>)
 8002aee:	461d      	mov	r5, r3
 8002af0:	4614      	mov	r4, r2
 8002af2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002af4:	6028      	str	r0, [r5, #0]
 8002af6:	6069      	str	r1, [r5, #4]
 8002af8:	60aa      	str	r2, [r5, #8]
 8002afa:	60eb      	str	r3, [r5, #12]
 8002afc:	8823      	ldrh	r3, [r4, #0]
 8002afe:	78a2      	ldrb	r2, [r4, #2]
 8002b00:	822b      	strh	r3, [r5, #16]
 8002b02:	4613      	mov	r3, r2
 8002b04:	74ab      	strb	r3, [r5, #18]
			strcpy(p->startFinish,"s,s,d,d,e,e,d");
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8002b0c:	4a93      	ldr	r2, [pc, #588]	; (8002d5c <problem_fetch+0x1698>)
 8002b0e:	461c      	mov	r4, r3
 8002b10:	4613      	mov	r3, r2
 8002b12:	cb07      	ldmia	r3!, {r0, r1, r2}
 8002b14:	6020      	str	r0, [r4, #0]
 8002b16:	6061      	str	r1, [r4, #4]
 8002b18:	60a2      	str	r2, [r4, #8]
 8002b1a:	881b      	ldrh	r3, [r3, #0]
 8002b1c:	81a3      	strh	r3, [r4, #12]
			break;
 8002b1e:	f019 bd01 	b.w	801c524 <problem_fetch+0x1ae60>
		case 15 :
			strcpy(p->name,"INTERNAL ROTATION");
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8002b28:	4a8d      	ldr	r2, [pc, #564]	; (8002d60 <problem_fetch+0x169c>)
 8002b2a:	461d      	mov	r5, r3
 8002b2c:	4614      	mov	r4, r2
 8002b2e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002b30:	6028      	str	r0, [r5, #0]
 8002b32:	6069      	str	r1, [r5, #4]
 8002b34:	60aa      	str	r2, [r5, #8]
 8002b36:	60eb      	str	r3, [r5, #12]
 8002b38:	8823      	ldrh	r3, [r4, #0]
 8002b3a:	822b      	strh	r3, [r5, #16]
			strcpy(p->grade,"7A+");
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8002b42:	4a88      	ldr	r2, [pc, #544]	; (8002d64 <problem_fetch+0x16a0>)
 8002b44:	6810      	ldr	r0, [r2, #0]
 8002b46:	6018      	str	r0, [r3, #0]
			p->moveSize = 8;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	2208      	movs	r2, #8
 8002b4c:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"E,E,H,H,D,G,D,C");
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	33a4      	adds	r3, #164	; 0xa4
 8002b52:	4a85      	ldr	r2, [pc, #532]	; (8002d68 <problem_fetch+0x16a4>)
 8002b54:	461c      	mov	r4, r3
 8002b56:	4615      	mov	r5, r2
 8002b58:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002b5a:	6020      	str	r0, [r4, #0]
 8002b5c:	6061      	str	r1, [r4, #4]
 8002b5e:	60a2      	str	r2, [r4, #8]
 8002b60:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"8,9,12,5,15,15,18,5");
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	3304      	adds	r3, #4
 8002b66:	4a81      	ldr	r2, [pc, #516]	; (8002d6c <problem_fetch+0x16a8>)
 8002b68:	461d      	mov	r5, r3
 8002b6a:	4614      	mov	r4, r2
 8002b6c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002b6e:	6028      	str	r0, [r5, #0]
 8002b70:	6069      	str	r1, [r5, #4]
 8002b72:	60aa      	str	r2, [r5, #8]
 8002b74:	60eb      	str	r3, [r5, #12]
 8002b76:	6820      	ldr	r0, [r4, #0]
 8002b78:	6128      	str	r0, [r5, #16]
			strcpy(p->startFinish,"d,d,d,d,d,d,e,s");
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8002b80:	4a7b      	ldr	r2, [pc, #492]	; (8002d70 <problem_fetch+0x16ac>)
 8002b82:	461c      	mov	r4, r3
 8002b84:	4615      	mov	r5, r2
 8002b86:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002b88:	6020      	str	r0, [r4, #0]
 8002b8a:	6061      	str	r1, [r4, #4]
 8002b8c:	60a2      	str	r2, [r4, #8]
 8002b8e:	60e3      	str	r3, [r4, #12]
			break;
 8002b90:	f019 bcc8 	b.w	801c524 <problem_fetch+0x1ae60>
		case 16 :
			strcpy(p->name,"SIM");
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8002b9a:	4a76      	ldr	r2, [pc, #472]	; (8002d74 <problem_fetch+0x16b0>)
 8002b9c:	6810      	ldr	r0, [r2, #0]
 8002b9e:	6018      	str	r0, [r3, #0]
			strcpy(p->grade,"7A+");
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8002ba6:	4a6f      	ldr	r2, [pc, #444]	; (8002d64 <problem_fetch+0x16a0>)
 8002ba8:	6810      	ldr	r0, [r2, #0]
 8002baa:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	2206      	movs	r2, #6
 8002bb0:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,E,I,D,E,A");
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	33a4      	adds	r3, #164	; 0xa4
 8002bb6:	4a70      	ldr	r2, [pc, #448]	; (8002d78 <problem_fetch+0x16b4>)
 8002bb8:	461c      	mov	r4, r3
 8002bba:	4613      	mov	r3, r2
 8002bbc:	cb07      	ldmia	r3!, {r0, r1, r2}
 8002bbe:	6020      	str	r0, [r4, #0]
 8002bc0:	6061      	str	r1, [r4, #4]
 8002bc2:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,6,9,11,16,18");
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	3304      	adds	r3, #4
 8002bc8:	4a6c      	ldr	r2, [pc, #432]	; (8002d7c <problem_fetch+0x16b8>)
 8002bca:	461c      	mov	r4, r3
 8002bcc:	4613      	mov	r3, r2
 8002bce:	cb07      	ldmia	r3!, {r0, r1, r2}
 8002bd0:	6020      	str	r0, [r4, #0]
 8002bd2:	6061      	str	r1, [r4, #4]
 8002bd4:	60a2      	str	r2, [r4, #8]
 8002bd6:	881a      	ldrh	r2, [r3, #0]
 8002bd8:	789b      	ldrb	r3, [r3, #2]
 8002bda:	81a2      	strh	r2, [r4, #12]
 8002bdc:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish,"s,s,d,d,d,e");
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8002be4:	4a66      	ldr	r2, [pc, #408]	; (8002d80 <problem_fetch+0x16bc>)
 8002be6:	461c      	mov	r4, r3
 8002be8:	4613      	mov	r3, r2
 8002bea:	cb07      	ldmia	r3!, {r0, r1, r2}
 8002bec:	6020      	str	r0, [r4, #0]
 8002bee:	6061      	str	r1, [r4, #4]
 8002bf0:	60a2      	str	r2, [r4, #8]
			break;
 8002bf2:	f019 bc97 	b.w	801c524 <problem_fetch+0x1ae60>
		case 17 :
			strcpy(p->name,"TURBO CALLA");
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8002bfc:	4a61      	ldr	r2, [pc, #388]	; (8002d84 <problem_fetch+0x16c0>)
 8002bfe:	461c      	mov	r4, r3
 8002c00:	4613      	mov	r3, r2
 8002c02:	cb07      	ldmia	r3!, {r0, r1, r2}
 8002c04:	6020      	str	r0, [r4, #0]
 8002c06:	6061      	str	r1, [r4, #4]
 8002c08:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade,"7A");
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8002c10:	4a5d      	ldr	r2, [pc, #372]	; (8002d88 <problem_fetch+0x16c4>)
 8002c12:	8811      	ldrh	r1, [r2, #0]
 8002c14:	7892      	ldrb	r2, [r2, #2]
 8002c16:	8019      	strh	r1, [r3, #0]
 8002c18:	709a      	strb	r2, [r3, #2]
			p->moveSize = 6;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	2206      	movs	r2, #6
 8002c1e:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,H,C,C,D,A");
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	33a4      	adds	r3, #164	; 0xa4
 8002c24:	4a59      	ldr	r2, [pc, #356]	; (8002d8c <problem_fetch+0x16c8>)
 8002c26:	461c      	mov	r4, r3
 8002c28:	4613      	mov	r3, r2
 8002c2a:	cb07      	ldmia	r3!, {r0, r1, r2}
 8002c2c:	6020      	str	r0, [r4, #0]
 8002c2e:	6061      	str	r1, [r4, #4]
 8002c30:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,8,8,13,15,18");
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	3304      	adds	r3, #4
 8002c36:	4a56      	ldr	r2, [pc, #344]	; (8002d90 <problem_fetch+0x16cc>)
 8002c38:	461c      	mov	r4, r3
 8002c3a:	4613      	mov	r3, r2
 8002c3c:	cb07      	ldmia	r3!, {r0, r1, r2}
 8002c3e:	6020      	str	r0, [r4, #0]
 8002c40:	6061      	str	r1, [r4, #4]
 8002c42:	60a2      	str	r2, [r4, #8]
 8002c44:	881a      	ldrh	r2, [r3, #0]
 8002c46:	789b      	ldrb	r3, [r3, #2]
 8002c48:	81a2      	strh	r2, [r4, #12]
 8002c4a:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8002c52:	4a50      	ldr	r2, [pc, #320]	; (8002d94 <problem_fetch+0x16d0>)
 8002c54:	461c      	mov	r4, r3
 8002c56:	4613      	mov	r3, r2
 8002c58:	cb07      	ldmia	r3!, {r0, r1, r2}
 8002c5a:	6020      	str	r0, [r4, #0]
 8002c5c:	6061      	str	r1, [r4, #4]
 8002c5e:	60a2      	str	r2, [r4, #8]
			break;
 8002c60:	f019 bc60 	b.w	801c524 <problem_fetch+0x1ae60>
		case 18 :
			strcpy(p->name,"BARRET");
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8002c6a:	4a4b      	ldr	r2, [pc, #300]	; (8002d98 <problem_fetch+0x16d4>)
 8002c6c:	6810      	ldr	r0, [r2, #0]
 8002c6e:	6018      	str	r0, [r3, #0]
 8002c70:	8891      	ldrh	r1, [r2, #4]
 8002c72:	7992      	ldrb	r2, [r2, #6]
 8002c74:	8099      	strh	r1, [r3, #4]
 8002c76:	719a      	strb	r2, [r3, #6]
			strcpy(p->grade,"6C+");
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8002c7e:	4a2f      	ldr	r2, [pc, #188]	; (8002d3c <problem_fetch+0x1678>)
 8002c80:	6810      	ldr	r0, [r2, #0]
 8002c82:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	2206      	movs	r2, #6
 8002c88:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"E,D,A,B,A,D");
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	33a4      	adds	r3, #164	; 0xa4
 8002c8e:	4a43      	ldr	r2, [pc, #268]	; (8002d9c <problem_fetch+0x16d8>)
 8002c90:	461c      	mov	r4, r3
 8002c92:	4613      	mov	r3, r2
 8002c94:	cb07      	ldmia	r3!, {r0, r1, r2}
 8002c96:	6020      	str	r0, [r4, #0]
 8002c98:	6061      	str	r1, [r4, #4]
 8002c9a:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"6,7,9,12,14,18");
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	3304      	adds	r3, #4
 8002ca0:	4a3f      	ldr	r2, [pc, #252]	; (8002da0 <problem_fetch+0x16dc>)
 8002ca2:	461c      	mov	r4, r3
 8002ca4:	4613      	mov	r3, r2
 8002ca6:	cb07      	ldmia	r3!, {r0, r1, r2}
 8002ca8:	6020      	str	r0, [r4, #0]
 8002caa:	6061      	str	r1, [r4, #4]
 8002cac:	60a2      	str	r2, [r4, #8]
 8002cae:	881a      	ldrh	r2, [r3, #0]
 8002cb0:	789b      	ldrb	r3, [r3, #2]
 8002cb2:	81a2      	strh	r2, [r4, #12]
 8002cb4:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8002cbc:	4a35      	ldr	r2, [pc, #212]	; (8002d94 <problem_fetch+0x16d0>)
 8002cbe:	461c      	mov	r4, r3
 8002cc0:	4613      	mov	r3, r2
 8002cc2:	cb07      	ldmia	r3!, {r0, r1, r2}
 8002cc4:	6020      	str	r0, [r4, #0]
 8002cc6:	6061      	str	r1, [r4, #4]
 8002cc8:	60a2      	str	r2, [r4, #8]
			break;
 8002cca:	f019 bc2b 	b.w	801c524 <problem_fetch+0x1ae60>
		case 19 :
			strcpy(p->name,"BLACK LAMP");
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8002cd4:	4933      	ldr	r1, [pc, #204]	; (8002da4 <problem_fetch+0x16e0>)
 8002cd6:	461a      	mov	r2, r3
 8002cd8:	460b      	mov	r3, r1
 8002cda:	cb03      	ldmia	r3!, {r0, r1}
 8002cdc:	6010      	str	r0, [r2, #0]
 8002cde:	6051      	str	r1, [r2, #4]
 8002ce0:	8819      	ldrh	r1, [r3, #0]
 8002ce2:	789b      	ldrb	r3, [r3, #2]
 8002ce4:	8111      	strh	r1, [r2, #8]
 8002ce6:	7293      	strb	r3, [r2, #10]
			strcpy(p->grade,"6C+");
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8002cee:	4a13      	ldr	r2, [pc, #76]	; (8002d3c <problem_fetch+0x1678>)
 8002cf0:	6810      	ldr	r0, [r2, #0]
 8002cf2:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	2206      	movs	r2, #6
 8002cf8:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"H,E,I,D,J,E");
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	33a4      	adds	r3, #164	; 0xa4
 8002cfe:	4a2a      	ldr	r2, [pc, #168]	; (8002da8 <problem_fetch+0x16e4>)
 8002d00:	461c      	mov	r4, r3
 8002d02:	4613      	mov	r3, r2
 8002d04:	cb07      	ldmia	r3!, {r0, r1, r2}
 8002d06:	6020      	str	r0, [r4, #0]
 8002d08:	6061      	str	r1, [r4, #4]
 8002d0a:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"10,14,14,18,5,6");
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	3304      	adds	r3, #4
 8002d10:	4a26      	ldr	r2, [pc, #152]	; (8002dac <problem_fetch+0x16e8>)
 8002d12:	461c      	mov	r4, r3
 8002d14:	4615      	mov	r5, r2
 8002d16:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002d18:	6020      	str	r0, [r4, #0]
 8002d1a:	6061      	str	r1, [r4, #4]
 8002d1c:	60a2      	str	r2, [r4, #8]
 8002d1e:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"d,d,d,e,s,s");
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8002d26:	4a22      	ldr	r2, [pc, #136]	; (8002db0 <problem_fetch+0x16ec>)
 8002d28:	461c      	mov	r4, r3
 8002d2a:	4613      	mov	r3, r2
 8002d2c:	cb07      	ldmia	r3!, {r0, r1, r2}
 8002d2e:	6020      	str	r0, [r4, #0]
 8002d30:	6061      	str	r1, [r4, #4]
 8002d32:	60a2      	str	r2, [r4, #8]
			break;
 8002d34:	f019 bbf6 	b.w	801c524 <problem_fetch+0x1ae60>
 8002d38:	08023af0 	.word	0x08023af0
 8002d3c:	080238ec 	.word	0x080238ec
 8002d40:	08023afc 	.word	0x08023afc
 8002d44:	08023b0c 	.word	0x08023b0c
 8002d48:	080238cc 	.word	0x080238cc
 8002d4c:	08023b20 	.word	0x08023b20
 8002d50:	08023854 	.word	0x08023854
 8002d54:	08023b2c 	.word	0x08023b2c
 8002d58:	08023b3c 	.word	0x08023b3c
 8002d5c:	08023b50 	.word	0x08023b50
 8002d60:	08023b60 	.word	0x08023b60
 8002d64:	080239f4 	.word	0x080239f4
 8002d68:	08023b74 	.word	0x08023b74
 8002d6c:	08023b84 	.word	0x08023b84
 8002d70:	08023b98 	.word	0x08023b98
 8002d74:	08023ba8 	.word	0x08023ba8
 8002d78:	08023bac 	.word	0x08023bac
 8002d7c:	08023bb8 	.word	0x08023bb8
 8002d80:	08023834 	.word	0x08023834
 8002d84:	08023bc8 	.word	0x08023bc8
 8002d88:	08023814 	.word	0x08023814
 8002d8c:	08023bd4 	.word	0x08023bd4
 8002d90:	08023be0 	.word	0x08023be0
 8002d94:	08023bf0 	.word	0x08023bf0
 8002d98:	08023bfc 	.word	0x08023bfc
 8002d9c:	08023c04 	.word	0x08023c04
 8002da0:	08023c10 	.word	0x08023c10
 8002da4:	08023c20 	.word	0x08023c20
 8002da8:	08023c2c 	.word	0x08023c2c
 8002dac:	08023c38 	.word	0x08023c38
 8002db0:	08023c48 	.word	0x08023c48
		case 20 :
			strcpy(p->name,"ALLBLACKS");
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8002dba:	49a9      	ldr	r1, [pc, #676]	; (8003060 <problem_fetch+0x199c>)
 8002dbc:	461a      	mov	r2, r3
 8002dbe:	460b      	mov	r3, r1
 8002dc0:	cb03      	ldmia	r3!, {r0, r1}
 8002dc2:	6010      	str	r0, [r2, #0]
 8002dc4:	6051      	str	r1, [r2, #4]
 8002dc6:	881b      	ldrh	r3, [r3, #0]
 8002dc8:	8113      	strh	r3, [r2, #8]
			strcpy(p->grade,"7A");
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8002dd0:	4aa4      	ldr	r2, [pc, #656]	; (8003064 <problem_fetch+0x19a0>)
 8002dd2:	8811      	ldrh	r1, [r2, #0]
 8002dd4:	7892      	ldrb	r2, [r2, #2]
 8002dd6:	8019      	strh	r1, [r3, #0]
 8002dd8:	709a      	strb	r2, [r3, #2]
			p->moveSize = 6;
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	2206      	movs	r2, #6
 8002dde:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"E,G,H,C,D,A");
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	33a4      	adds	r3, #164	; 0xa4
 8002de4:	4aa0      	ldr	r2, [pc, #640]	; (8003068 <problem_fetch+0x19a4>)
 8002de6:	461c      	mov	r4, r3
 8002de8:	4613      	mov	r3, r2
 8002dea:	cb07      	ldmia	r3!, {r0, r1, r2}
 8002dec:	6020      	str	r0, [r4, #0]
 8002dee:	6061      	str	r1, [r4, #4]
 8002df0:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"6,4,10,13,15,18");
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	3304      	adds	r3, #4
 8002df6:	4a9d      	ldr	r2, [pc, #628]	; (800306c <problem_fetch+0x19a8>)
 8002df8:	461c      	mov	r4, r3
 8002dfa:	4615      	mov	r5, r2
 8002dfc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002dfe:	6020      	str	r0, [r4, #0]
 8002e00:	6061      	str	r1, [r4, #4]
 8002e02:	60a2      	str	r2, [r4, #8]
 8002e04:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,s,d,d,d,e");
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8002e0c:	4a98      	ldr	r2, [pc, #608]	; (8003070 <problem_fetch+0x19ac>)
 8002e0e:	461c      	mov	r4, r3
 8002e10:	4613      	mov	r3, r2
 8002e12:	cb07      	ldmia	r3!, {r0, r1, r2}
 8002e14:	6020      	str	r0, [r4, #0]
 8002e16:	6061      	str	r1, [r4, #4]
 8002e18:	60a2      	str	r2, [r4, #8]
			break;
 8002e1a:	f019 bb83 	b.w	801c524 <problem_fetch+0x1ae60>
		case 21 :
			strcpy(p->name,"FLEMMING THE BEAST");
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8002e24:	4a93      	ldr	r2, [pc, #588]	; (8003074 <problem_fetch+0x19b0>)
 8002e26:	461d      	mov	r5, r3
 8002e28:	4614      	mov	r4, r2
 8002e2a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002e2c:	6028      	str	r0, [r5, #0]
 8002e2e:	6069      	str	r1, [r5, #4]
 8002e30:	60aa      	str	r2, [r5, #8]
 8002e32:	60eb      	str	r3, [r5, #12]
 8002e34:	8823      	ldrh	r3, [r4, #0]
 8002e36:	78a2      	ldrb	r2, [r4, #2]
 8002e38:	822b      	strh	r3, [r5, #16]
 8002e3a:	4613      	mov	r3, r2
 8002e3c:	74ab      	strb	r3, [r5, #18]
			strcpy(p->grade,"6C+");
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8002e44:	4a8c      	ldr	r2, [pc, #560]	; (8003078 <problem_fetch+0x19b4>)
 8002e46:	6810      	ldr	r0, [r2, #0]
 8002e48:	6018      	str	r0, [r3, #0]
			p->moveSize = 8;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	2208      	movs	r2, #8
 8002e4e:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,J,G,E,H,A,E,D");
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	33a4      	adds	r3, #164	; 0xa4
 8002e54:	4a89      	ldr	r2, [pc, #548]	; (800307c <problem_fetch+0x19b8>)
 8002e56:	461c      	mov	r4, r3
 8002e58:	4615      	mov	r5, r2
 8002e5a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002e5c:	6020      	str	r0, [r4, #0]
 8002e5e:	6061      	str	r1, [r4, #4]
 8002e60:	60a2      	str	r2, [r4, #8]
 8002e62:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,5,9,12,8,14,16,18");
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	3304      	adds	r3, #4
 8002e68:	4a85      	ldr	r2, [pc, #532]	; (8003080 <problem_fetch+0x19bc>)
 8002e6a:	461d      	mov	r5, r3
 8002e6c:	4614      	mov	r4, r2
 8002e6e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002e70:	6028      	str	r0, [r5, #0]
 8002e72:	6069      	str	r1, [r5, #4]
 8002e74:	60aa      	str	r2, [r5, #8]
 8002e76:	60eb      	str	r3, [r5, #12]
 8002e78:	6820      	ldr	r0, [r4, #0]
 8002e7a:	6128      	str	r0, [r5, #16]
			strcpy(p->startFinish,"s,d,d,d,d,d,d,e");
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8002e82:	4a80      	ldr	r2, [pc, #512]	; (8003084 <problem_fetch+0x19c0>)
 8002e84:	461c      	mov	r4, r3
 8002e86:	4615      	mov	r5, r2
 8002e88:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002e8a:	6020      	str	r0, [r4, #0]
 8002e8c:	6061      	str	r1, [r4, #4]
 8002e8e:	60a2      	str	r2, [r4, #8]
 8002e90:	60e3      	str	r3, [r4, #12]
			break;
 8002e92:	f019 bb47 	b.w	801c524 <problem_fetch+0x1ae60>
		case 22 :
			strcpy(p->name,"BIG LE MOVIES");
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8002e9c:	4a7a      	ldr	r2, [pc, #488]	; (8003088 <problem_fetch+0x19c4>)
 8002e9e:	461c      	mov	r4, r3
 8002ea0:	4613      	mov	r3, r2
 8002ea2:	cb07      	ldmia	r3!, {r0, r1, r2}
 8002ea4:	6020      	str	r0, [r4, #0]
 8002ea6:	6061      	str	r1, [r4, #4]
 8002ea8:	60a2      	str	r2, [r4, #8]
 8002eaa:	881b      	ldrh	r3, [r3, #0]
 8002eac:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade,"6B+");
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8002eb4:	4a75      	ldr	r2, [pc, #468]	; (800308c <problem_fetch+0x19c8>)
 8002eb6:	6810      	ldr	r0, [r2, #0]
 8002eb8:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	2207      	movs	r2, #7
 8002ebe:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,G,J,H,G,G,I");
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	33a4      	adds	r3, #164	; 0xa4
 8002ec4:	4a72      	ldr	r2, [pc, #456]	; (8003090 <problem_fetch+0x19cc>)
 8002ec6:	461c      	mov	r4, r3
 8002ec8:	4613      	mov	r3, r2
 8002eca:	cb07      	ldmia	r3!, {r0, r1, r2}
 8002ecc:	6020      	str	r0, [r4, #0]
 8002ece:	6061      	str	r1, [r4, #4]
 8002ed0:	60a2      	str	r2, [r4, #8]
 8002ed2:	881b      	ldrh	r3, [r3, #0]
 8002ed4:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,6,7,10,14,17,18");
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	3304      	adds	r3, #4
 8002eda:	4a6e      	ldr	r2, [pc, #440]	; (8003094 <problem_fetch+0x19d0>)
 8002edc:	461d      	mov	r5, r3
 8002ede:	4614      	mov	r4, r2
 8002ee0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002ee2:	6028      	str	r0, [r5, #0]
 8002ee4:	6069      	str	r1, [r5, #4]
 8002ee6:	60aa      	str	r2, [r5, #8]
 8002ee8:	60eb      	str	r3, [r5, #12]
 8002eea:	8823      	ldrh	r3, [r4, #0]
 8002eec:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8002ef4:	4a68      	ldr	r2, [pc, #416]	; (8003098 <problem_fetch+0x19d4>)
 8002ef6:	461c      	mov	r4, r3
 8002ef8:	4613      	mov	r3, r2
 8002efa:	cb07      	ldmia	r3!, {r0, r1, r2}
 8002efc:	6020      	str	r0, [r4, #0]
 8002efe:	6061      	str	r1, [r4, #4]
 8002f00:	60a2      	str	r2, [r4, #8]
 8002f02:	881b      	ldrh	r3, [r3, #0]
 8002f04:	81a3      	strh	r3, [r4, #12]
			break;
 8002f06:	f019 bb0d 	b.w	801c524 <problem_fetch+0x1ae60>
		case 23 :
			strcpy(p->name,"FIRST COME, FIRST SERVED");
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8002f10:	4a62      	ldr	r2, [pc, #392]	; (800309c <problem_fetch+0x19d8>)
 8002f12:	461d      	mov	r5, r3
 8002f14:	4614      	mov	r4, r2
 8002f16:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002f18:	6028      	str	r0, [r5, #0]
 8002f1a:	6069      	str	r1, [r5, #4]
 8002f1c:	60aa      	str	r2, [r5, #8]
 8002f1e:	60eb      	str	r3, [r5, #12]
 8002f20:	cc03      	ldmia	r4!, {r0, r1}
 8002f22:	6128      	str	r0, [r5, #16]
 8002f24:	6169      	str	r1, [r5, #20]
 8002f26:	7823      	ldrb	r3, [r4, #0]
 8002f28:	762b      	strb	r3, [r5, #24]
			strcpy(p->grade,"7B+");
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8002f30:	4a5b      	ldr	r2, [pc, #364]	; (80030a0 <problem_fetch+0x19dc>)
 8002f32:	6810      	ldr	r0, [r2, #0]
 8002f34:	6018      	str	r0, [r3, #0]
			p->moveSize = 5;
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	2205      	movs	r2, #5
 8002f3a:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,G,F,A,D");
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	33a4      	adds	r3, #164	; 0xa4
 8002f40:	4958      	ldr	r1, [pc, #352]	; (80030a4 <problem_fetch+0x19e0>)
 8002f42:	461a      	mov	r2, r3
 8002f44:	460b      	mov	r3, r1
 8002f46:	cb03      	ldmia	r3!, {r0, r1}
 8002f48:	6010      	str	r0, [r2, #0]
 8002f4a:	6051      	str	r1, [r2, #4]
 8002f4c:	881b      	ldrh	r3, [r3, #0]
 8002f4e:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"5,10,11,14,18");
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	3304      	adds	r3, #4
 8002f54:	4a54      	ldr	r2, [pc, #336]	; (80030a8 <problem_fetch+0x19e4>)
 8002f56:	461c      	mov	r4, r3
 8002f58:	4613      	mov	r3, r2
 8002f5a:	cb07      	ldmia	r3!, {r0, r1, r2}
 8002f5c:	6020      	str	r0, [r4, #0]
 8002f5e:	6061      	str	r1, [r4, #4]
 8002f60:	60a2      	str	r2, [r4, #8]
 8002f62:	881b      	ldrh	r3, [r3, #0]
 8002f64:	81a3      	strh	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,e");
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8002f6c:	494f      	ldr	r1, [pc, #316]	; (80030ac <problem_fetch+0x19e8>)
 8002f6e:	461a      	mov	r2, r3
 8002f70:	460b      	mov	r3, r1
 8002f72:	cb03      	ldmia	r3!, {r0, r1}
 8002f74:	6010      	str	r0, [r2, #0]
 8002f76:	6051      	str	r1, [r2, #4]
 8002f78:	881b      	ldrh	r3, [r3, #0]
 8002f7a:	8113      	strh	r3, [r2, #8]
			break;
 8002f7c:	f019 bad2 	b.w	801c524 <problem_fetch+0x1ae60>
		case 24 :
			strcpy(p->name,"SALAD APOCALYPSE");
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8002f86:	4a4a      	ldr	r2, [pc, #296]	; (80030b0 <problem_fetch+0x19ec>)
 8002f88:	461d      	mov	r5, r3
 8002f8a:	4614      	mov	r4, r2
 8002f8c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002f8e:	6028      	str	r0, [r5, #0]
 8002f90:	6069      	str	r1, [r5, #4]
 8002f92:	60aa      	str	r2, [r5, #8]
 8002f94:	60eb      	str	r3, [r5, #12]
 8002f96:	7823      	ldrb	r3, [r4, #0]
 8002f98:	742b      	strb	r3, [r5, #16]
			strcpy(p->grade,"7B+");
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8002fa0:	4a3f      	ldr	r2, [pc, #252]	; (80030a0 <problem_fetch+0x19dc>)
 8002fa2:	6810      	ldr	r0, [r2, #0]
 8002fa4:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	2206      	movs	r2, #6
 8002faa:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"C,B,E,H,D,A");
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	33a4      	adds	r3, #164	; 0xa4
 8002fb0:	4a40      	ldr	r2, [pc, #256]	; (80030b4 <problem_fetch+0x19f0>)
 8002fb2:	461c      	mov	r4, r3
 8002fb4:	4613      	mov	r3, r2
 8002fb6:	cb07      	ldmia	r3!, {r0, r1, r2}
 8002fb8:	6020      	str	r0, [r4, #0]
 8002fba:	6061      	str	r1, [r4, #4]
 8002fbc:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,6,8,12,15,18");
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	3304      	adds	r3, #4
 8002fc2:	4a3d      	ldr	r2, [pc, #244]	; (80030b8 <problem_fetch+0x19f4>)
 8002fc4:	461c      	mov	r4, r3
 8002fc6:	4613      	mov	r3, r2
 8002fc8:	cb07      	ldmia	r3!, {r0, r1, r2}
 8002fca:	6020      	str	r0, [r4, #0]
 8002fcc:	6061      	str	r1, [r4, #4]
 8002fce:	60a2      	str	r2, [r4, #8]
 8002fd0:	881a      	ldrh	r2, [r3, #0]
 8002fd2:	789b      	ldrb	r3, [r3, #2]
 8002fd4:	81a2      	strh	r2, [r4, #12]
 8002fd6:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish,"s,s,d,d,d,e");
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8002fde:	4a24      	ldr	r2, [pc, #144]	; (8003070 <problem_fetch+0x19ac>)
 8002fe0:	461c      	mov	r4, r3
 8002fe2:	4613      	mov	r3, r2
 8002fe4:	cb07      	ldmia	r3!, {r0, r1, r2}
 8002fe6:	6020      	str	r0, [r4, #0]
 8002fe8:	6061      	str	r1, [r4, #4]
 8002fea:	60a2      	str	r2, [r4, #8]
			break;
 8002fec:	f019 ba9a 	b.w	801c524 <problem_fetch+0x1ae60>
		case 25 :
			strcpy(p->name,"VISUALIZZA VERS2");
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8002ff6:	4a31      	ldr	r2, [pc, #196]	; (80030bc <problem_fetch+0x19f8>)
 8002ff8:	461d      	mov	r5, r3
 8002ffa:	4614      	mov	r4, r2
 8002ffc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002ffe:	6028      	str	r0, [r5, #0]
 8003000:	6069      	str	r1, [r5, #4]
 8003002:	60aa      	str	r2, [r5, #8]
 8003004:	60eb      	str	r3, [r5, #12]
 8003006:	7823      	ldrb	r3, [r4, #0]
 8003008:	742b      	strb	r3, [r5, #16]
			strcpy(p->grade,"7B+");
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8003010:	4a23      	ldr	r2, [pc, #140]	; (80030a0 <problem_fetch+0x19dc>)
 8003012:	6810      	ldr	r0, [r2, #0]
 8003014:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	2206      	movs	r2, #6
 800301a:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,H,E,H,E,D");
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	33a4      	adds	r3, #164	; 0xa4
 8003020:	4a27      	ldr	r2, [pc, #156]	; (80030c0 <problem_fetch+0x19fc>)
 8003022:	461c      	mov	r4, r3
 8003024:	4613      	mov	r3, r2
 8003026:	cb07      	ldmia	r3!, {r0, r1, r2}
 8003028:	6020      	str	r0, [r4, #0]
 800302a:	6061      	str	r1, [r4, #4]
 800302c:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,8,9,12,14,18");
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	3304      	adds	r3, #4
 8003032:	4a24      	ldr	r2, [pc, #144]	; (80030c4 <problem_fetch+0x1a00>)
 8003034:	461c      	mov	r4, r3
 8003036:	4613      	mov	r3, r2
 8003038:	cb07      	ldmia	r3!, {r0, r1, r2}
 800303a:	6020      	str	r0, [r4, #0]
 800303c:	6061      	str	r1, [r4, #4]
 800303e:	60a2      	str	r2, [r4, #8]
 8003040:	881a      	ldrh	r2, [r3, #0]
 8003042:	789b      	ldrb	r3, [r3, #2]
 8003044:	81a2      	strh	r2, [r4, #12]
 8003046:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800304e:	4a1e      	ldr	r2, [pc, #120]	; (80030c8 <problem_fetch+0x1a04>)
 8003050:	461c      	mov	r4, r3
 8003052:	4613      	mov	r3, r2
 8003054:	cb07      	ldmia	r3!, {r0, r1, r2}
 8003056:	6020      	str	r0, [r4, #0]
 8003058:	6061      	str	r1, [r4, #4]
 800305a:	60a2      	str	r2, [r4, #8]
			break;
 800305c:	f019 ba62 	b.w	801c524 <problem_fetch+0x1ae60>
 8003060:	08023c54 	.word	0x08023c54
 8003064:	08023814 	.word	0x08023814
 8003068:	08023c60 	.word	0x08023c60
 800306c:	08023c6c 	.word	0x08023c6c
 8003070:	08023834 	.word	0x08023834
 8003074:	08023c7c 	.word	0x08023c7c
 8003078:	080238ec 	.word	0x080238ec
 800307c:	08023c90 	.word	0x08023c90
 8003080:	08023ca0 	.word	0x08023ca0
 8003084:	08023a64 	.word	0x08023a64
 8003088:	08023cb4 	.word	0x08023cb4
 800308c:	08023854 	.word	0x08023854
 8003090:	08023cc4 	.word	0x08023cc4
 8003094:	08023cd4 	.word	0x08023cd4
 8003098:	080239dc 	.word	0x080239dc
 800309c:	08023ce8 	.word	0x08023ce8
 80030a0:	08023990 	.word	0x08023990
 80030a4:	08023d04 	.word	0x08023d04
 80030a8:	08023d10 	.word	0x08023d10
 80030ac:	08023d20 	.word	0x08023d20
 80030b0:	08023d2c 	.word	0x08023d2c
 80030b4:	08023d40 	.word	0x08023d40
 80030b8:	08023d4c 	.word	0x08023d4c
 80030bc:	08023d5c 	.word	0x08023d5c
 80030c0:	08023d70 	.word	0x08023d70
 80030c4:	08023d7c 	.word	0x08023d7c
 80030c8:	08023bf0 	.word	0x08023bf0
		case 26 :
			strcpy(p->name,"PSYCHO MANTIS");
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80030d2:	4aa7      	ldr	r2, [pc, #668]	; (8003370 <problem_fetch+0x1cac>)
 80030d4:	461c      	mov	r4, r3
 80030d6:	4613      	mov	r3, r2
 80030d8:	cb07      	ldmia	r3!, {r0, r1, r2}
 80030da:	6020      	str	r0, [r4, #0]
 80030dc:	6061      	str	r1, [r4, #4]
 80030de:	60a2      	str	r2, [r4, #8]
 80030e0:	881b      	ldrh	r3, [r3, #0]
 80030e2:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade,"6C+");
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80030ea:	4aa2      	ldr	r2, [pc, #648]	; (8003374 <problem_fetch+0x1cb0>)
 80030ec:	6810      	ldr	r0, [r2, #0]
 80030ee:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	2206      	movs	r2, #6
 80030f4:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"H,D,G,B,E,D");
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	33a4      	adds	r3, #164	; 0xa4
 80030fa:	4a9f      	ldr	r2, [pc, #636]	; (8003378 <problem_fetch+0x1cb4>)
 80030fc:	461c      	mov	r4, r3
 80030fe:	4613      	mov	r3, r2
 8003100:	cb07      	ldmia	r3!, {r0, r1, r2}
 8003102:	6020      	str	r0, [r4, #0]
 8003104:	6061      	str	r1, [r4, #4]
 8003106:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,7,10,10,14,18");
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	3304      	adds	r3, #4
 800310c:	4a9b      	ldr	r2, [pc, #620]	; (800337c <problem_fetch+0x1cb8>)
 800310e:	461c      	mov	r4, r3
 8003110:	4615      	mov	r5, r2
 8003112:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003114:	6020      	str	r0, [r4, #0]
 8003116:	6061      	str	r1, [r4, #4]
 8003118:	60a2      	str	r2, [r4, #8]
 800311a:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8003122:	4a97      	ldr	r2, [pc, #604]	; (8003380 <problem_fetch+0x1cbc>)
 8003124:	461c      	mov	r4, r3
 8003126:	4613      	mov	r3, r2
 8003128:	cb07      	ldmia	r3!, {r0, r1, r2}
 800312a:	6020      	str	r0, [r4, #0]
 800312c:	6061      	str	r1, [r4, #4]
 800312e:	60a2      	str	r2, [r4, #8]
			break;
 8003130:	f019 b9f8 	b.w	801c524 <problem_fetch+0x1ae60>
		case 27 :
			strcpy(p->name,"STOUT LITE");
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800313a:	4992      	ldr	r1, [pc, #584]	; (8003384 <problem_fetch+0x1cc0>)
 800313c:	461a      	mov	r2, r3
 800313e:	460b      	mov	r3, r1
 8003140:	cb03      	ldmia	r3!, {r0, r1}
 8003142:	6010      	str	r0, [r2, #0]
 8003144:	6051      	str	r1, [r2, #4]
 8003146:	8819      	ldrh	r1, [r3, #0]
 8003148:	789b      	ldrb	r3, [r3, #2]
 800314a:	8111      	strh	r1, [r2, #8]
 800314c:	7293      	strb	r3, [r2, #10]
			strcpy(p->grade,"6C+");
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8003154:	4a87      	ldr	r2, [pc, #540]	; (8003374 <problem_fetch+0x1cb0>)
 8003156:	6810      	ldr	r0, [r2, #0]
 8003158:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	2207      	movs	r2, #7
 800315e:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,D,G,D,G,G,I");
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	33a4      	adds	r3, #164	; 0xa4
 8003164:	4a88      	ldr	r2, [pc, #544]	; (8003388 <problem_fetch+0x1cc4>)
 8003166:	461c      	mov	r4, r3
 8003168:	4613      	mov	r3, r2
 800316a:	cb07      	ldmia	r3!, {r0, r1, r2}
 800316c:	6020      	str	r0, [r4, #0]
 800316e:	6061      	str	r1, [r4, #4]
 8003170:	60a2      	str	r2, [r4, #8]
 8003172:	881b      	ldrh	r3, [r3, #0]
 8003174:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,7,9,11,14,15,18");
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	3304      	adds	r3, #4
 800317a:	4a84      	ldr	r2, [pc, #528]	; (800338c <problem_fetch+0x1cc8>)
 800317c:	461d      	mov	r5, r3
 800317e:	4614      	mov	r4, r2
 8003180:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003182:	6028      	str	r0, [r5, #0]
 8003184:	6069      	str	r1, [r5, #4]
 8003186:	60aa      	str	r2, [r5, #8]
 8003188:	60eb      	str	r3, [r5, #12]
 800318a:	8823      	ldrh	r3, [r4, #0]
 800318c:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8003194:	4a7e      	ldr	r2, [pc, #504]	; (8003390 <problem_fetch+0x1ccc>)
 8003196:	461c      	mov	r4, r3
 8003198:	4613      	mov	r3, r2
 800319a:	cb07      	ldmia	r3!, {r0, r1, r2}
 800319c:	6020      	str	r0, [r4, #0]
 800319e:	6061      	str	r1, [r4, #4]
 80031a0:	60a2      	str	r2, [r4, #8]
 80031a2:	881b      	ldrh	r3, [r3, #0]
 80031a4:	81a3      	strh	r3, [r4, #12]
			break;
 80031a6:	f019 b9bd 	b.w	801c524 <problem_fetch+0x1ae60>
		case 28 :
			strcpy(p->name,"BLACKROCK");
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80031b0:	4978      	ldr	r1, [pc, #480]	; (8003394 <problem_fetch+0x1cd0>)
 80031b2:	461a      	mov	r2, r3
 80031b4:	460b      	mov	r3, r1
 80031b6:	cb03      	ldmia	r3!, {r0, r1}
 80031b8:	6010      	str	r0, [r2, #0]
 80031ba:	6051      	str	r1, [r2, #4]
 80031bc:	881b      	ldrh	r3, [r3, #0]
 80031be:	8113      	strh	r3, [r2, #8]
			strcpy(p->grade,"6C+");
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80031c6:	4a6b      	ldr	r2, [pc, #428]	; (8003374 <problem_fetch+0x1cb0>)
 80031c8:	6810      	ldr	r0, [r2, #0]
 80031ca:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	2207      	movs	r2, #7
 80031d0:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,G,I,D,E,B,D");
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	33a4      	adds	r3, #164	; 0xa4
 80031d6:	4a70      	ldr	r2, [pc, #448]	; (8003398 <problem_fetch+0x1cd4>)
 80031d8:	461c      	mov	r4, r3
 80031da:	4613      	mov	r3, r2
 80031dc:	cb07      	ldmia	r3!, {r0, r1, r2}
 80031de:	6020      	str	r0, [r4, #0]
 80031e0:	6061      	str	r1, [r4, #4]
 80031e2:	60a2      	str	r2, [r4, #8]
 80031e4:	881b      	ldrh	r3, [r3, #0]
 80031e6:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,6,10,11,12,15,18");
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	3304      	adds	r3, #4
 80031ec:	4a6b      	ldr	r2, [pc, #428]	; (800339c <problem_fetch+0x1cd8>)
 80031ee:	461d      	mov	r5, r3
 80031f0:	4614      	mov	r4, r2
 80031f2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80031f4:	6028      	str	r0, [r5, #0]
 80031f6:	6069      	str	r1, [r5, #4]
 80031f8:	60aa      	str	r2, [r5, #8]
 80031fa:	60eb      	str	r3, [r5, #12]
 80031fc:	8823      	ldrh	r3, [r4, #0]
 80031fe:	78a2      	ldrb	r2, [r4, #2]
 8003200:	822b      	strh	r3, [r5, #16]
 8003202:	4613      	mov	r3, r2
 8003204:	74ab      	strb	r3, [r5, #18]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800320c:	4a60      	ldr	r2, [pc, #384]	; (8003390 <problem_fetch+0x1ccc>)
 800320e:	461c      	mov	r4, r3
 8003210:	4613      	mov	r3, r2
 8003212:	cb07      	ldmia	r3!, {r0, r1, r2}
 8003214:	6020      	str	r0, [r4, #0]
 8003216:	6061      	str	r1, [r4, #4]
 8003218:	60a2      	str	r2, [r4, #8]
 800321a:	881b      	ldrh	r3, [r3, #0]
 800321c:	81a3      	strh	r3, [r4, #12]
			break;
 800321e:	f019 b981 	b.w	801c524 <problem_fetch+0x1ae60>
		case 29 :
			strcpy(p->name,"BO4");
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8003228:	4a5d      	ldr	r2, [pc, #372]	; (80033a0 <problem_fetch+0x1cdc>)
 800322a:	6810      	ldr	r0, [r2, #0]
 800322c:	6018      	str	r0, [r3, #0]
			strcpy(p->grade,"7A");
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8003234:	4a5b      	ldr	r2, [pc, #364]	; (80033a4 <problem_fetch+0x1ce0>)
 8003236:	8811      	ldrh	r1, [r2, #0]
 8003238:	7892      	ldrb	r2, [r2, #2]
 800323a:	8019      	strh	r1, [r3, #0]
 800323c:	709a      	strb	r2, [r3, #2]
			p->moveSize = 7;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	2207      	movs	r2, #7
 8003242:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"C,E,F,H,G,I,H");
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	33a4      	adds	r3, #164	; 0xa4
 8003248:	4a57      	ldr	r2, [pc, #348]	; (80033a8 <problem_fetch+0x1ce4>)
 800324a:	461c      	mov	r4, r3
 800324c:	4613      	mov	r3, r2
 800324e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8003250:	6020      	str	r0, [r4, #0]
 8003252:	6061      	str	r1, [r4, #4]
 8003254:	60a2      	str	r2, [r4, #8]
 8003256:	881b      	ldrh	r3, [r3, #0]
 8003258:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,9,11,5,15,18,12");
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	3304      	adds	r3, #4
 800325e:	4a53      	ldr	r2, [pc, #332]	; (80033ac <problem_fetch+0x1ce8>)
 8003260:	461d      	mov	r5, r3
 8003262:	4614      	mov	r4, r2
 8003264:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003266:	6028      	str	r0, [r5, #0]
 8003268:	6069      	str	r1, [r5, #4]
 800326a:	60aa      	str	r2, [r5, #8]
 800326c:	60eb      	str	r3, [r5, #12]
 800326e:	8823      	ldrh	r3, [r4, #0]
 8003270:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,d,d,s,d,e,d");
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8003278:	4a4d      	ldr	r2, [pc, #308]	; (80033b0 <problem_fetch+0x1cec>)
 800327a:	461c      	mov	r4, r3
 800327c:	4613      	mov	r3, r2
 800327e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8003280:	6020      	str	r0, [r4, #0]
 8003282:	6061      	str	r1, [r4, #4]
 8003284:	60a2      	str	r2, [r4, #8]
 8003286:	881b      	ldrh	r3, [r3, #0]
 8003288:	81a3      	strh	r3, [r4, #12]
			break;
 800328a:	f019 b94b 	b.w	801c524 <problem_fetch+0x1ae60>
		case 30 :
			strcpy(p->name,"UP MY SLEEVES");
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8003294:	4a47      	ldr	r2, [pc, #284]	; (80033b4 <problem_fetch+0x1cf0>)
 8003296:	461c      	mov	r4, r3
 8003298:	4613      	mov	r3, r2
 800329a:	cb07      	ldmia	r3!, {r0, r1, r2}
 800329c:	6020      	str	r0, [r4, #0]
 800329e:	6061      	str	r1, [r4, #4]
 80032a0:	60a2      	str	r2, [r4, #8]
 80032a2:	881b      	ldrh	r3, [r3, #0]
 80032a4:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade,"7C+");
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80032ac:	4a42      	ldr	r2, [pc, #264]	; (80033b8 <problem_fetch+0x1cf4>)
 80032ae:	6810      	ldr	r0, [r2, #0]
 80032b0:	6018      	str	r0, [r3, #0]
			p->moveSize = 5;
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	2205      	movs	r2, #5
 80032b6:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,G,J,E,A");
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	33a4      	adds	r3, #164	; 0xa4
 80032bc:	493f      	ldr	r1, [pc, #252]	; (80033bc <problem_fetch+0x1cf8>)
 80032be:	461a      	mov	r2, r3
 80032c0:	460b      	mov	r3, r1
 80032c2:	cb03      	ldmia	r3!, {r0, r1}
 80032c4:	6010      	str	r0, [r2, #0]
 80032c6:	6051      	str	r1, [r2, #4]
 80032c8:	881b      	ldrh	r3, [r3, #0]
 80032ca:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"5,9,12,14,18");
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	3304      	adds	r3, #4
 80032d0:	4a3b      	ldr	r2, [pc, #236]	; (80033c0 <problem_fetch+0x1cfc>)
 80032d2:	461c      	mov	r4, r3
 80032d4:	4613      	mov	r3, r2
 80032d6:	cb07      	ldmia	r3!, {r0, r1, r2}
 80032d8:	6020      	str	r0, [r4, #0]
 80032da:	6061      	str	r1, [r4, #4]
 80032dc:	60a2      	str	r2, [r4, #8]
 80032de:	781b      	ldrb	r3, [r3, #0]
 80032e0:	7323      	strb	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,e");
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 80032e8:	4936      	ldr	r1, [pc, #216]	; (80033c4 <problem_fetch+0x1d00>)
 80032ea:	461a      	mov	r2, r3
 80032ec:	460b      	mov	r3, r1
 80032ee:	cb03      	ldmia	r3!, {r0, r1}
 80032f0:	6010      	str	r0, [r2, #0]
 80032f2:	6051      	str	r1, [r2, #4]
 80032f4:	881b      	ldrh	r3, [r3, #0]
 80032f6:	8113      	strh	r3, [r2, #8]
			break;
 80032f8:	f019 b914 	b.w	801c524 <problem_fetch+0x1ae60>
		case 31 :
			strcpy(p->name,"ULTRAVIOLENCE");
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8003302:	4a31      	ldr	r2, [pc, #196]	; (80033c8 <problem_fetch+0x1d04>)
 8003304:	461c      	mov	r4, r3
 8003306:	4613      	mov	r3, r2
 8003308:	cb07      	ldmia	r3!, {r0, r1, r2}
 800330a:	6020      	str	r0, [r4, #0]
 800330c:	6061      	str	r1, [r4, #4]
 800330e:	60a2      	str	r2, [r4, #8]
 8003310:	881b      	ldrh	r3, [r3, #0]
 8003312:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade,"6C+");
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800331a:	4a16      	ldr	r2, [pc, #88]	; (8003374 <problem_fetch+0x1cb0>)
 800331c:	6810      	ldr	r0, [r2, #0]
 800331e:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	2207      	movs	r2, #7
 8003324:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,E,C,F,E,J,D");
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	33a4      	adds	r3, #164	; 0xa4
 800332a:	4a28      	ldr	r2, [pc, #160]	; (80033cc <problem_fetch+0x1d08>)
 800332c:	461c      	mov	r4, r3
 800332e:	4613      	mov	r3, r2
 8003330:	cb07      	ldmia	r3!, {r0, r1, r2}
 8003332:	6020      	str	r0, [r4, #0]
 8003334:	6061      	str	r1, [r4, #4]
 8003336:	60a2      	str	r2, [r4, #8]
 8003338:	881b      	ldrh	r3, [r3, #0]
 800333a:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"6,6,8,11,14,16,18");
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	3304      	adds	r3, #4
 8003340:	4a23      	ldr	r2, [pc, #140]	; (80033d0 <problem_fetch+0x1d0c>)
 8003342:	461d      	mov	r5, r3
 8003344:	4614      	mov	r4, r2
 8003346:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003348:	6028      	str	r0, [r5, #0]
 800334a:	6069      	str	r1, [r5, #4]
 800334c:	60aa      	str	r2, [r5, #8]
 800334e:	60eb      	str	r3, [r5, #12]
 8003350:	8823      	ldrh	r3, [r4, #0]
 8003352:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,s,d,d,d,d,e");
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800335a:	4a1e      	ldr	r2, [pc, #120]	; (80033d4 <problem_fetch+0x1d10>)
 800335c:	461c      	mov	r4, r3
 800335e:	4613      	mov	r3, r2
 8003360:	cb07      	ldmia	r3!, {r0, r1, r2}
 8003362:	6020      	str	r0, [r4, #0]
 8003364:	6061      	str	r1, [r4, #4]
 8003366:	60a2      	str	r2, [r4, #8]
 8003368:	881b      	ldrh	r3, [r3, #0]
 800336a:	81a3      	strh	r3, [r4, #12]
			break;
 800336c:	f019 b8da 	b.w	801c524 <problem_fetch+0x1ae60>
 8003370:	08023d8c 	.word	0x08023d8c
 8003374:	080238ec 	.word	0x080238ec
 8003378:	08023d9c 	.word	0x08023d9c
 800337c:	08023da8 	.word	0x08023da8
 8003380:	08023bf0 	.word	0x08023bf0
 8003384:	08023db8 	.word	0x08023db8
 8003388:	08023dc4 	.word	0x08023dc4
 800338c:	08023dd4 	.word	0x08023dd4
 8003390:	080239dc 	.word	0x080239dc
 8003394:	08023de8 	.word	0x08023de8
 8003398:	08023df4 	.word	0x08023df4
 800339c:	08023e04 	.word	0x08023e04
 80033a0:	08023e18 	.word	0x08023e18
 80033a4:	08023814 	.word	0x08023814
 80033a8:	08023e1c 	.word	0x08023e1c
 80033ac:	08023e2c 	.word	0x08023e2c
 80033b0:	08023e40 	.word	0x08023e40
 80033b4:	08023e50 	.word	0x08023e50
 80033b8:	08023e60 	.word	0x08023e60
 80033bc:	08023e64 	.word	0x08023e64
 80033c0:	08023e70 	.word	0x08023e70
 80033c4:	08023d20 	.word	0x08023d20
 80033c8:	08023e80 	.word	0x08023e80
 80033cc:	08023e90 	.word	0x08023e90
 80033d0:	08023ea0 	.word	0x08023ea0
 80033d4:	080238cc 	.word	0x080238cc
		case 32 :
			strcpy(p->name,"DJWUDHDJWJCJDJE");
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80033de:	4ab0      	ldr	r2, [pc, #704]	; (80036a0 <problem_fetch+0x1fdc>)
 80033e0:	461c      	mov	r4, r3
 80033e2:	4615      	mov	r5, r2
 80033e4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80033e6:	6020      	str	r0, [r4, #0]
 80033e8:	6061      	str	r1, [r4, #4]
 80033ea:	60a2      	str	r2, [r4, #8]
 80033ec:	60e3      	str	r3, [r4, #12]
			strcpy(p->grade,"6B+");
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80033f4:	4aab      	ldr	r2, [pc, #684]	; (80036a4 <problem_fetch+0x1fe0>)
 80033f6:	6810      	ldr	r0, [r2, #0]
 80033f8:	6018      	str	r0, [r3, #0]
			p->moveSize = 10;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	220a      	movs	r2, #10
 80033fe:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,E,C,B,C,E,D,B,A,D");
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	33a4      	adds	r3, #164	; 0xa4
 8003404:	4aa8      	ldr	r2, [pc, #672]	; (80036a8 <problem_fetch+0x1fe4>)
 8003406:	461d      	mov	r5, r3
 8003408:	4614      	mov	r4, r2
 800340a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800340c:	6028      	str	r0, [r5, #0]
 800340e:	6069      	str	r1, [r5, #4]
 8003410:	60aa      	str	r2, [r5, #8]
 8003412:	60eb      	str	r3, [r5, #12]
 8003414:	6820      	ldr	r0, [r4, #0]
 8003416:	6128      	str	r0, [r5, #16]
			strcpy(p->moveNumbers,"4,6,8,10,13,12,15,15,18,18");
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	3304      	adds	r3, #4
 800341c:	4aa3      	ldr	r2, [pc, #652]	; (80036ac <problem_fetch+0x1fe8>)
 800341e:	461d      	mov	r5, r3
 8003420:	4614      	mov	r4, r2
 8003422:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003424:	6028      	str	r0, [r5, #0]
 8003426:	6069      	str	r1, [r5, #4]
 8003428:	60aa      	str	r2, [r5, #8]
 800342a:	60eb      	str	r3, [r5, #12]
 800342c:	cc03      	ldmia	r4!, {r0, r1}
 800342e:	6128      	str	r0, [r5, #16]
 8003430:	6169      	str	r1, [r5, #20]
 8003432:	8823      	ldrh	r3, [r4, #0]
 8003434:	78a2      	ldrb	r2, [r4, #2]
 8003436:	832b      	strh	r3, [r5, #24]
 8003438:	4613      	mov	r3, r2
 800343a:	76ab      	strb	r3, [r5, #26]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,d,e,e");
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8003442:	4a9b      	ldr	r2, [pc, #620]	; (80036b0 <problem_fetch+0x1fec>)
 8003444:	461d      	mov	r5, r3
 8003446:	4614      	mov	r4, r2
 8003448:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800344a:	6028      	str	r0, [r5, #0]
 800344c:	6069      	str	r1, [r5, #4]
 800344e:	60aa      	str	r2, [r5, #8]
 8003450:	60eb      	str	r3, [r5, #12]
 8003452:	6820      	ldr	r0, [r4, #0]
 8003454:	6128      	str	r0, [r5, #16]
			break;
 8003456:	f019 b865 	b.w	801c524 <problem_fetch+0x1ae60>
		case 33 :
			strcpy(p->name,"I ❤️ ELLIA");
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8003460:	4a94      	ldr	r2, [pc, #592]	; (80036b4 <problem_fetch+0x1ff0>)
 8003462:	461c      	mov	r4, r3
 8003464:	4613      	mov	r3, r2
 8003466:	cb07      	ldmia	r3!, {r0, r1, r2}
 8003468:	6020      	str	r0, [r4, #0]
 800346a:	6061      	str	r1, [r4, #4]
 800346c:	60a2      	str	r2, [r4, #8]
 800346e:	881a      	ldrh	r2, [r3, #0]
 8003470:	789b      	ldrb	r3, [r3, #2]
 8003472:	81a2      	strh	r2, [r4, #12]
 8003474:	73a3      	strb	r3, [r4, #14]
			strcpy(p->grade,"7A+");
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800347c:	4a8e      	ldr	r2, [pc, #568]	; (80036b8 <problem_fetch+0x1ff4>)
 800347e:	6810      	ldr	r0, [r2, #0]
 8003480:	6018      	str	r0, [r3, #0]
			p->moveSize = 5;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	2205      	movs	r2, #5
 8003486:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,G,G,C,D");
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	33a4      	adds	r3, #164	; 0xa4
 800348c:	498b      	ldr	r1, [pc, #556]	; (80036bc <problem_fetch+0x1ff8>)
 800348e:	461a      	mov	r2, r3
 8003490:	460b      	mov	r3, r1
 8003492:	cb03      	ldmia	r3!, {r0, r1}
 8003494:	6010      	str	r0, [r2, #0]
 8003496:	6051      	str	r1, [r2, #4]
 8003498:	881b      	ldrh	r3, [r3, #0]
 800349a:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"5,6,10,13,18");
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	3304      	adds	r3, #4
 80034a0:	4a87      	ldr	r2, [pc, #540]	; (80036c0 <problem_fetch+0x1ffc>)
 80034a2:	461c      	mov	r4, r3
 80034a4:	4613      	mov	r3, r2
 80034a6:	cb07      	ldmia	r3!, {r0, r1, r2}
 80034a8:	6020      	str	r0, [r4, #0]
 80034aa:	6061      	str	r1, [r4, #4]
 80034ac:	60a2      	str	r2, [r4, #8]
 80034ae:	781b      	ldrb	r3, [r3, #0]
 80034b0:	7323      	strb	r3, [r4, #12]
			strcpy(p->startFinish,"s,s,d,d,e");
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 80034b8:	4982      	ldr	r1, [pc, #520]	; (80036c4 <problem_fetch+0x2000>)
 80034ba:	461a      	mov	r2, r3
 80034bc:	460b      	mov	r3, r1
 80034be:	cb03      	ldmia	r3!, {r0, r1}
 80034c0:	6010      	str	r0, [r2, #0]
 80034c2:	6051      	str	r1, [r2, #4]
 80034c4:	881b      	ldrh	r3, [r3, #0]
 80034c6:	8113      	strh	r3, [r2, #8]
			break;
 80034c8:	f019 b82c 	b.w	801c524 <problem_fetch+0x1ae60>
		case 34 :
			strcpy(p->name,"LIZZY BLACK");
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80034d2:	4a7d      	ldr	r2, [pc, #500]	; (80036c8 <problem_fetch+0x2004>)
 80034d4:	461c      	mov	r4, r3
 80034d6:	4613      	mov	r3, r2
 80034d8:	cb07      	ldmia	r3!, {r0, r1, r2}
 80034da:	6020      	str	r0, [r4, #0]
 80034dc:	6061      	str	r1, [r4, #4]
 80034de:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade,"7B");
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80034e6:	4a79      	ldr	r2, [pc, #484]	; (80036cc <problem_fetch+0x2008>)
 80034e8:	8811      	ldrh	r1, [r2, #0]
 80034ea:	7892      	ldrb	r2, [r2, #2]
 80034ec:	8019      	strh	r1, [r3, #0]
 80034ee:	709a      	strb	r2, [r3, #2]
			p->moveSize = 6;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2206      	movs	r2, #6
 80034f4:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,I,F,E,D,I");
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	33a4      	adds	r3, #164	; 0xa4
 80034fa:	4a75      	ldr	r2, [pc, #468]	; (80036d0 <problem_fetch+0x200c>)
 80034fc:	461c      	mov	r4, r3
 80034fe:	4613      	mov	r3, r2
 8003500:	cb07      	ldmia	r3!, {r0, r1, r2}
 8003502:	6020      	str	r0, [r4, #0]
 8003504:	6061      	str	r1, [r4, #4]
 8003506:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,10,13,12,15,18");
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	3304      	adds	r3, #4
 800350c:	4a71      	ldr	r2, [pc, #452]	; (80036d4 <problem_fetch+0x2010>)
 800350e:	461d      	mov	r5, r3
 8003510:	4614      	mov	r4, r2
 8003512:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003514:	6028      	str	r0, [r5, #0]
 8003516:	6069      	str	r1, [r5, #4]
 8003518:	60aa      	str	r2, [r5, #8]
 800351a:	60eb      	str	r3, [r5, #12]
 800351c:	7823      	ldrb	r3, [r4, #0]
 800351e:	742b      	strb	r3, [r5, #16]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8003526:	4a6c      	ldr	r2, [pc, #432]	; (80036d8 <problem_fetch+0x2014>)
 8003528:	461c      	mov	r4, r3
 800352a:	4613      	mov	r3, r2
 800352c:	cb07      	ldmia	r3!, {r0, r1, r2}
 800352e:	6020      	str	r0, [r4, #0]
 8003530:	6061      	str	r1, [r4, #4]
 8003532:	60a2      	str	r2, [r4, #8]
			break;
 8003534:	f018 bff6 	b.w	801c524 <problem_fetch+0x1ae60>
		case 35 :
			strcpy(p->name,"NOT FOR HOONY");
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800353e:	4a67      	ldr	r2, [pc, #412]	; (80036dc <problem_fetch+0x2018>)
 8003540:	461c      	mov	r4, r3
 8003542:	4613      	mov	r3, r2
 8003544:	cb07      	ldmia	r3!, {r0, r1, r2}
 8003546:	6020      	str	r0, [r4, #0]
 8003548:	6061      	str	r1, [r4, #4]
 800354a:	60a2      	str	r2, [r4, #8]
 800354c:	881b      	ldrh	r3, [r3, #0]
 800354e:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade,"7A+");
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8003556:	4a58      	ldr	r2, [pc, #352]	; (80036b8 <problem_fetch+0x1ff4>)
 8003558:	6810      	ldr	r0, [r2, #0]
 800355a:	6018      	str	r0, [r3, #0]
			p->moveSize = 8;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	2208      	movs	r2, #8
 8003560:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,E,E,C,G,A,I,H");
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	33a4      	adds	r3, #164	; 0xa4
 8003566:	4a5e      	ldr	r2, [pc, #376]	; (80036e0 <problem_fetch+0x201c>)
 8003568:	461c      	mov	r4, r3
 800356a:	4615      	mov	r5, r2
 800356c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800356e:	6020      	str	r0, [r4, #0]
 8003570:	6061      	str	r1, [r4, #4]
 8003572:	60a2      	str	r2, [r4, #8]
 8003574:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,6,9,13,17,9,18,16");
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	3304      	adds	r3, #4
 800357a:	4a5a      	ldr	r2, [pc, #360]	; (80036e4 <problem_fetch+0x2020>)
 800357c:	461d      	mov	r5, r3
 800357e:	4614      	mov	r4, r2
 8003580:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003582:	6028      	str	r0, [r5, #0]
 8003584:	6069      	str	r1, [r5, #4]
 8003586:	60aa      	str	r2, [r5, #8]
 8003588:	60eb      	str	r3, [r5, #12]
 800358a:	6820      	ldr	r0, [r4, #0]
 800358c:	6128      	str	r0, [r5, #16]
			strcpy(p->startFinish,"s,d,d,d,d,d,e,d");
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8003594:	4a54      	ldr	r2, [pc, #336]	; (80036e8 <problem_fetch+0x2024>)
 8003596:	461c      	mov	r4, r3
 8003598:	4615      	mov	r5, r2
 800359a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800359c:	6020      	str	r0, [r4, #0]
 800359e:	6061      	str	r1, [r4, #4]
 80035a0:	60a2      	str	r2, [r4, #8]
 80035a2:	60e3      	str	r3, [r4, #12]
			break;
 80035a4:	f018 bfbe 	b.w	801c524 <problem_fetch+0x1ae60>
		case 36 :
			strcpy(p->name,"L’HEURE SOMBRE");
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80035ae:	4a4f      	ldr	r2, [pc, #316]	; (80036ec <problem_fetch+0x2028>)
 80035b0:	461d      	mov	r5, r3
 80035b2:	4614      	mov	r4, r2
 80035b4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80035b6:	6028      	str	r0, [r5, #0]
 80035b8:	6069      	str	r1, [r5, #4]
 80035ba:	60aa      	str	r2, [r5, #8]
 80035bc:	60eb      	str	r3, [r5, #12]
 80035be:	7823      	ldrb	r3, [r4, #0]
 80035c0:	742b      	strb	r3, [r5, #16]
			strcpy(p->grade,"7B+");
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80035c8:	4a49      	ldr	r2, [pc, #292]	; (80036f0 <problem_fetch+0x202c>)
 80035ca:	6810      	ldr	r0, [r2, #0]
 80035cc:	6018      	str	r0, [r3, #0]
			p->moveSize = 9;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	2209      	movs	r2, #9
 80035d2:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"C,D,E,D,E,B,C,A,B");
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	33a4      	adds	r3, #164	; 0xa4
 80035d8:	4a46      	ldr	r2, [pc, #280]	; (80036f4 <problem_fetch+0x2030>)
 80035da:	461d      	mov	r5, r3
 80035dc:	4614      	mov	r4, r2
 80035de:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80035e0:	6028      	str	r0, [r5, #0]
 80035e2:	6069      	str	r1, [r5, #4]
 80035e4:	60aa      	str	r2, [r5, #8]
 80035e6:	60eb      	str	r3, [r5, #12]
 80035e8:	8823      	ldrh	r3, [r4, #0]
 80035ea:	822b      	strh	r3, [r5, #16]
			strcpy(p->moveNumbers,"5,7,9,11,14,12,16,18,6");
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	3304      	adds	r3, #4
 80035f0:	4a41      	ldr	r2, [pc, #260]	; (80036f8 <problem_fetch+0x2034>)
 80035f2:	461c      	mov	r4, r3
 80035f4:	4615      	mov	r5, r2
 80035f6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80035f8:	6020      	str	r0, [r4, #0]
 80035fa:	6061      	str	r1, [r4, #4]
 80035fc:	60a2      	str	r2, [r4, #8]
 80035fe:	60e3      	str	r3, [r4, #12]
 8003600:	6828      	ldr	r0, [r5, #0]
 8003602:	6120      	str	r0, [r4, #16]
 8003604:	88ab      	ldrh	r3, [r5, #4]
 8003606:	79aa      	ldrb	r2, [r5, #6]
 8003608:	82a3      	strh	r3, [r4, #20]
 800360a:	4613      	mov	r3, r2
 800360c:	75a3      	strb	r3, [r4, #22]
			strcpy(p->startFinish,"s,d,d,d,d,d,d,e,s");
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8003614:	4a39      	ldr	r2, [pc, #228]	; (80036fc <problem_fetch+0x2038>)
 8003616:	461d      	mov	r5, r3
 8003618:	4614      	mov	r4, r2
 800361a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800361c:	6028      	str	r0, [r5, #0]
 800361e:	6069      	str	r1, [r5, #4]
 8003620:	60aa      	str	r2, [r5, #8]
 8003622:	60eb      	str	r3, [r5, #12]
 8003624:	8823      	ldrh	r3, [r4, #0]
 8003626:	822b      	strh	r3, [r5, #16]
			break;
 8003628:	f018 bf7c 	b.w	801c524 <problem_fetch+0x1ae60>
		case 37 :
			strcpy(p->name,"MOMMSEN'S#2");
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8003632:	4a33      	ldr	r2, [pc, #204]	; (8003700 <problem_fetch+0x203c>)
 8003634:	461c      	mov	r4, r3
 8003636:	4613      	mov	r3, r2
 8003638:	cb07      	ldmia	r3!, {r0, r1, r2}
 800363a:	6020      	str	r0, [r4, #0]
 800363c:	6061      	str	r1, [r4, #4]
 800363e:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade,"6C");
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8003646:	4a2f      	ldr	r2, [pc, #188]	; (8003704 <problem_fetch+0x2040>)
 8003648:	8811      	ldrh	r1, [r2, #0]
 800364a:	7892      	ldrb	r2, [r2, #2]
 800364c:	8019      	strh	r1, [r3, #0]
 800364e:	709a      	strb	r2, [r3, #2]
			p->moveSize = 7;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	2207      	movs	r2, #7
 8003654:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,G,G,E,I,G,I");
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	33a4      	adds	r3, #164	; 0xa4
 800365a:	4a2b      	ldr	r2, [pc, #172]	; (8003708 <problem_fetch+0x2044>)
 800365c:	461c      	mov	r4, r3
 800365e:	4613      	mov	r3, r2
 8003660:	cb07      	ldmia	r3!, {r0, r1, r2}
 8003662:	6020      	str	r0, [r4, #0]
 8003664:	6061      	str	r1, [r4, #4]
 8003666:	60a2      	str	r2, [r4, #8]
 8003668:	881b      	ldrh	r3, [r3, #0]
 800366a:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,6,9,12,14,15,18");
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	3304      	adds	r3, #4
 8003670:	4a26      	ldr	r2, [pc, #152]	; (800370c <problem_fetch+0x2048>)
 8003672:	461d      	mov	r5, r3
 8003674:	4614      	mov	r4, r2
 8003676:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003678:	6028      	str	r0, [r5, #0]
 800367a:	6069      	str	r1, [r5, #4]
 800367c:	60aa      	str	r2, [r5, #8]
 800367e:	60eb      	str	r3, [r5, #12]
 8003680:	8823      	ldrh	r3, [r4, #0]
 8003682:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800368a:	4a21      	ldr	r2, [pc, #132]	; (8003710 <problem_fetch+0x204c>)
 800368c:	461c      	mov	r4, r3
 800368e:	4613      	mov	r3, r2
 8003690:	cb07      	ldmia	r3!, {r0, r1, r2}
 8003692:	6020      	str	r0, [r4, #0]
 8003694:	6061      	str	r1, [r4, #4]
 8003696:	60a2      	str	r2, [r4, #8]
 8003698:	881b      	ldrh	r3, [r3, #0]
 800369a:	81a3      	strh	r3, [r4, #12]
			break;
 800369c:	f018 bf42 	b.w	801c524 <problem_fetch+0x1ae60>
 80036a0:	08023eb4 	.word	0x08023eb4
 80036a4:	08023854 	.word	0x08023854
 80036a8:	08023ec4 	.word	0x08023ec4
 80036ac:	08023ed8 	.word	0x08023ed8
 80036b0:	08023ef4 	.word	0x08023ef4
 80036b4:	08023f08 	.word	0x08023f08
 80036b8:	080239f4 	.word	0x080239f4
 80036bc:	08023f18 	.word	0x08023f18
 80036c0:	08023f24 	.word	0x08023f24
 80036c4:	08023f34 	.word	0x08023f34
 80036c8:	08023f40 	.word	0x08023f40
 80036cc:	08023f4c 	.word	0x08023f4c
 80036d0:	08023f50 	.word	0x08023f50
 80036d4:	08023f5c 	.word	0x08023f5c
 80036d8:	08023bf0 	.word	0x08023bf0
 80036dc:	08023f70 	.word	0x08023f70
 80036e0:	08023f80 	.word	0x08023f80
 80036e4:	08023f90 	.word	0x08023f90
 80036e8:	08023fa4 	.word	0x08023fa4
 80036ec:	08023fb4 	.word	0x08023fb4
 80036f0:	08023990 	.word	0x08023990
 80036f4:	08023fc8 	.word	0x08023fc8
 80036f8:	08023fdc 	.word	0x08023fdc
 80036fc:	08023ff4 	.word	0x08023ff4
 8003700:	08024008 	.word	0x08024008
 8003704:	08023920 	.word	0x08023920
 8003708:	08024014 	.word	0x08024014
 800370c:	08024024 	.word	0x08024024
 8003710:	080239dc 	.word	0x080239dc
		case 38 :
			strcpy(p->name,"GGGGGGH");
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800371a:	49af      	ldr	r1, [pc, #700]	; (80039d8 <problem_fetch+0x2314>)
 800371c:	461a      	mov	r2, r3
 800371e:	460b      	mov	r3, r1
 8003720:	cb03      	ldmia	r3!, {r0, r1}
 8003722:	6010      	str	r0, [r2, #0]
 8003724:	6051      	str	r1, [r2, #4]
			strcpy(p->grade,"6B+");
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800372c:	4aab      	ldr	r2, [pc, #684]	; (80039dc <problem_fetch+0x2318>)
 800372e:	6810      	ldr	r0, [r2, #0]
 8003730:	6018      	str	r0, [r3, #0]
			p->moveSize = 9;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	2209      	movs	r2, #9
 8003736:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,H,I,K,H,J,I,J,K");
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	33a4      	adds	r3, #164	; 0xa4
 800373c:	4aa8      	ldr	r2, [pc, #672]	; (80039e0 <problem_fetch+0x231c>)
 800373e:	461d      	mov	r5, r3
 8003740:	4614      	mov	r4, r2
 8003742:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003744:	6028      	str	r0, [r5, #0]
 8003746:	6069      	str	r1, [r5, #4]
 8003748:	60aa      	str	r2, [r5, #8]
 800374a:	60eb      	str	r3, [r5, #12]
 800374c:	8823      	ldrh	r3, [r4, #0]
 800374e:	822b      	strh	r3, [r5, #16]
			strcpy(p->moveNumbers,"4,5,7,9,10,13,18,16,16");
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	3304      	adds	r3, #4
 8003754:	4aa3      	ldr	r2, [pc, #652]	; (80039e4 <problem_fetch+0x2320>)
 8003756:	461c      	mov	r4, r3
 8003758:	4615      	mov	r5, r2
 800375a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800375c:	6020      	str	r0, [r4, #0]
 800375e:	6061      	str	r1, [r4, #4]
 8003760:	60a2      	str	r2, [r4, #8]
 8003762:	60e3      	str	r3, [r4, #12]
 8003764:	6828      	ldr	r0, [r5, #0]
 8003766:	6120      	str	r0, [r4, #16]
 8003768:	88ab      	ldrh	r3, [r5, #4]
 800376a:	79aa      	ldrb	r2, [r5, #6]
 800376c:	82a3      	strh	r3, [r4, #20]
 800376e:	4613      	mov	r3, r2
 8003770:	75a3      	strb	r3, [r4, #22]
			strcpy(p->startFinish,"s,s,d,d,d,d,e,d,d");
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8003778:	4a9b      	ldr	r2, [pc, #620]	; (80039e8 <problem_fetch+0x2324>)
 800377a:	461d      	mov	r5, r3
 800377c:	4614      	mov	r4, r2
 800377e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003780:	6028      	str	r0, [r5, #0]
 8003782:	6069      	str	r1, [r5, #4]
 8003784:	60aa      	str	r2, [r5, #8]
 8003786:	60eb      	str	r3, [r5, #12]
 8003788:	8823      	ldrh	r3, [r4, #0]
 800378a:	822b      	strh	r3, [r5, #16]
			break;
 800378c:	f018 beca 	b.w	801c524 <problem_fetch+0x1ae60>
		case 39 :
			strcpy(p->name,"19-1.2");
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8003796:	4a95      	ldr	r2, [pc, #596]	; (80039ec <problem_fetch+0x2328>)
 8003798:	6810      	ldr	r0, [r2, #0]
 800379a:	6018      	str	r0, [r3, #0]
 800379c:	8891      	ldrh	r1, [r2, #4]
 800379e:	7992      	ldrb	r2, [r2, #6]
 80037a0:	8099      	strh	r1, [r3, #4]
 80037a2:	719a      	strb	r2, [r3, #6]
			strcpy(p->grade,"7C");
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80037aa:	4a91      	ldr	r2, [pc, #580]	; (80039f0 <problem_fetch+0x232c>)
 80037ac:	8811      	ldrh	r1, [r2, #0]
 80037ae:	7892      	ldrb	r2, [r2, #2]
 80037b0:	8019      	strh	r1, [r3, #0]
 80037b2:	709a      	strb	r2, [r3, #2]
			p->moveSize = 8;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	2208      	movs	r2, #8
 80037b8:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"B,G,D,B,C,G,I,J");
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	33a4      	adds	r3, #164	; 0xa4
 80037be:	4a8d      	ldr	r2, [pc, #564]	; (80039f4 <problem_fetch+0x2330>)
 80037c0:	461c      	mov	r4, r3
 80037c2:	4615      	mov	r5, r2
 80037c4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80037c6:	6020      	str	r0, [r4, #0]
 80037c8:	6061      	str	r1, [r4, #4]
 80037ca:	60a2      	str	r2, [r4, #8]
 80037cc:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"6,6,7,10,13,14,18,16");
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	3304      	adds	r3, #4
 80037d2:	4a89      	ldr	r2, [pc, #548]	; (80039f8 <problem_fetch+0x2334>)
 80037d4:	461d      	mov	r5, r3
 80037d6:	4614      	mov	r4, r2
 80037d8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80037da:	6028      	str	r0, [r5, #0]
 80037dc:	6069      	str	r1, [r5, #4]
 80037de:	60aa      	str	r2, [r5, #8]
 80037e0:	60eb      	str	r3, [r5, #12]
 80037e2:	6820      	ldr	r0, [r4, #0]
 80037e4:	6128      	str	r0, [r5, #16]
 80037e6:	7923      	ldrb	r3, [r4, #4]
 80037e8:	752b      	strb	r3, [r5, #20]
			strcpy(p->startFinish,"s,s,d,d,d,d,e,d");
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 80037f0:	4a82      	ldr	r2, [pc, #520]	; (80039fc <problem_fetch+0x2338>)
 80037f2:	461c      	mov	r4, r3
 80037f4:	4615      	mov	r5, r2
 80037f6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80037f8:	6020      	str	r0, [r4, #0]
 80037fa:	6061      	str	r1, [r4, #4]
 80037fc:	60a2      	str	r2, [r4, #8]
 80037fe:	60e3      	str	r3, [r4, #12]
			break;
 8003800:	f018 be90 	b.w	801c524 <problem_fetch+0x1ae60>
		case 40 :
			strcpy(p->name,"BASTION");
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800380a:	497d      	ldr	r1, [pc, #500]	; (8003a00 <problem_fetch+0x233c>)
 800380c:	461a      	mov	r2, r3
 800380e:	460b      	mov	r3, r1
 8003810:	cb03      	ldmia	r3!, {r0, r1}
 8003812:	6010      	str	r0, [r2, #0]
 8003814:	6051      	str	r1, [r2, #4]
			strcpy(p->grade,"6C");
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800381c:	4a79      	ldr	r2, [pc, #484]	; (8003a04 <problem_fetch+0x2340>)
 800381e:	8811      	ldrh	r1, [r2, #0]
 8003820:	7892      	ldrb	r2, [r2, #2]
 8003822:	8019      	strh	r1, [r3, #0]
 8003824:	709a      	strb	r2, [r3, #2]
			p->moveSize = 10;
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	220a      	movs	r2, #10
 800382a:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"H,J,E,F,B,E,B,G,E,I");
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	33a4      	adds	r3, #164	; 0xa4
 8003830:	4a75      	ldr	r2, [pc, #468]	; (8003a08 <problem_fetch+0x2344>)
 8003832:	461d      	mov	r5, r3
 8003834:	4614      	mov	r4, r2
 8003836:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003838:	6028      	str	r0, [r5, #0]
 800383a:	6069      	str	r1, [r5, #4]
 800383c:	60aa      	str	r2, [r5, #8]
 800383e:	60eb      	str	r3, [r5, #12]
 8003840:	6820      	ldr	r0, [r4, #0]
 8003842:	6128      	str	r0, [r5, #16]
			strcpy(p->moveNumbers,"5,5,8,11,12,12,15,17,16,18");
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	3304      	adds	r3, #4
 8003848:	4a70      	ldr	r2, [pc, #448]	; (8003a0c <problem_fetch+0x2348>)
 800384a:	461d      	mov	r5, r3
 800384c:	4614      	mov	r4, r2
 800384e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003850:	6028      	str	r0, [r5, #0]
 8003852:	6069      	str	r1, [r5, #4]
 8003854:	60aa      	str	r2, [r5, #8]
 8003856:	60eb      	str	r3, [r5, #12]
 8003858:	cc03      	ldmia	r4!, {r0, r1}
 800385a:	6128      	str	r0, [r5, #16]
 800385c:	6169      	str	r1, [r5, #20]
 800385e:	8823      	ldrh	r3, [r4, #0]
 8003860:	78a2      	ldrb	r2, [r4, #2]
 8003862:	832b      	strh	r3, [r5, #24]
 8003864:	4613      	mov	r3, r2
 8003866:	76ab      	strb	r3, [r5, #26]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,d,d,e");
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800386e:	4a68      	ldr	r2, [pc, #416]	; (8003a10 <problem_fetch+0x234c>)
 8003870:	461d      	mov	r5, r3
 8003872:	4614      	mov	r4, r2
 8003874:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003876:	6028      	str	r0, [r5, #0]
 8003878:	6069      	str	r1, [r5, #4]
 800387a:	60aa      	str	r2, [r5, #8]
 800387c:	60eb      	str	r3, [r5, #12]
 800387e:	6820      	ldr	r0, [r4, #0]
 8003880:	6128      	str	r0, [r5, #16]
			break;
 8003882:	f018 be4f 	b.w	801c524 <problem_fetch+0x1ae60>
		case 41 :
			strcpy(p->name,"GOBRIGHT SPECIAL");
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800388c:	4a61      	ldr	r2, [pc, #388]	; (8003a14 <problem_fetch+0x2350>)
 800388e:	461d      	mov	r5, r3
 8003890:	4614      	mov	r4, r2
 8003892:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003894:	6028      	str	r0, [r5, #0]
 8003896:	6069      	str	r1, [r5, #4]
 8003898:	60aa      	str	r2, [r5, #8]
 800389a:	60eb      	str	r3, [r5, #12]
 800389c:	7823      	ldrb	r3, [r4, #0]
 800389e:	742b      	strb	r3, [r5, #16]
			strcpy(p->grade,"7A");
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80038a6:	4a5c      	ldr	r2, [pc, #368]	; (8003a18 <problem_fetch+0x2354>)
 80038a8:	8811      	ldrh	r1, [r2, #0]
 80038aa:	7892      	ldrb	r2, [r2, #2]
 80038ac:	8019      	strh	r1, [r3, #0]
 80038ae:	709a      	strb	r2, [r3, #2]
			p->moveSize = 5;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	2205      	movs	r2, #5
 80038b4:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"B,H,H,C,D");
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	33a4      	adds	r3, #164	; 0xa4
 80038ba:	4958      	ldr	r1, [pc, #352]	; (8003a1c <problem_fetch+0x2358>)
 80038bc:	461a      	mov	r2, r3
 80038be:	460b      	mov	r3, r1
 80038c0:	cb03      	ldmia	r3!, {r0, r1}
 80038c2:	6010      	str	r0, [r2, #0]
 80038c4:	6051      	str	r1, [r2, #4]
 80038c6:	881b      	ldrh	r3, [r3, #0]
 80038c8:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"6,5,10,13,18");
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	3304      	adds	r3, #4
 80038ce:	4a54      	ldr	r2, [pc, #336]	; (8003a20 <problem_fetch+0x235c>)
 80038d0:	461c      	mov	r4, r3
 80038d2:	4613      	mov	r3, r2
 80038d4:	cb07      	ldmia	r3!, {r0, r1, r2}
 80038d6:	6020      	str	r0, [r4, #0]
 80038d8:	6061      	str	r1, [r4, #4]
 80038da:	60a2      	str	r2, [r4, #8]
 80038dc:	781b      	ldrb	r3, [r3, #0]
 80038de:	7323      	strb	r3, [r4, #12]
			strcpy(p->startFinish,"s,s,d,d,e");
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 80038e6:	494f      	ldr	r1, [pc, #316]	; (8003a24 <problem_fetch+0x2360>)
 80038e8:	461a      	mov	r2, r3
 80038ea:	460b      	mov	r3, r1
 80038ec:	cb03      	ldmia	r3!, {r0, r1}
 80038ee:	6010      	str	r0, [r2, #0]
 80038f0:	6051      	str	r1, [r2, #4]
 80038f2:	881b      	ldrh	r3, [r3, #0]
 80038f4:	8113      	strh	r3, [r2, #8]
			break;
 80038f6:	f018 be15 	b.w	801c524 <problem_fetch+0x1ae60>
		case 42 :
			strcpy(p->name,"BLACK CAT");
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8003900:	4949      	ldr	r1, [pc, #292]	; (8003a28 <problem_fetch+0x2364>)
 8003902:	461a      	mov	r2, r3
 8003904:	460b      	mov	r3, r1
 8003906:	cb03      	ldmia	r3!, {r0, r1}
 8003908:	6010      	str	r0, [r2, #0]
 800390a:	6051      	str	r1, [r2, #4]
 800390c:	881b      	ldrh	r3, [r3, #0]
 800390e:	8113      	strh	r3, [r2, #8]
			strcpy(p->grade,"7B+");
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8003916:	4a45      	ldr	r2, [pc, #276]	; (8003a2c <problem_fetch+0x2368>)
 8003918:	6810      	ldr	r0, [r2, #0]
 800391a:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	2207      	movs	r2, #7
 8003920:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,H,I,E,E,J,I");
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	33a4      	adds	r3, #164	; 0xa4
 8003926:	4a42      	ldr	r2, [pc, #264]	; (8003a30 <problem_fetch+0x236c>)
 8003928:	461c      	mov	r4, r3
 800392a:	4613      	mov	r3, r2
 800392c:	cb07      	ldmia	r3!, {r0, r1, r2}
 800392e:	6020      	str	r0, [r4, #0]
 8003930:	6061      	str	r1, [r4, #4]
 8003932:	60a2      	str	r2, [r4, #8]
 8003934:	881b      	ldrh	r3, [r3, #0]
 8003936:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,8,9,12,14,16,18");
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	3304      	adds	r3, #4
 800393c:	4a3d      	ldr	r2, [pc, #244]	; (8003a34 <problem_fetch+0x2370>)
 800393e:	461d      	mov	r5, r3
 8003940:	4614      	mov	r4, r2
 8003942:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003944:	6028      	str	r0, [r5, #0]
 8003946:	6069      	str	r1, [r5, #4]
 8003948:	60aa      	str	r2, [r5, #8]
 800394a:	60eb      	str	r3, [r5, #12]
 800394c:	8823      	ldrh	r3, [r4, #0]
 800394e:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8003956:	4a38      	ldr	r2, [pc, #224]	; (8003a38 <problem_fetch+0x2374>)
 8003958:	461c      	mov	r4, r3
 800395a:	4613      	mov	r3, r2
 800395c:	cb07      	ldmia	r3!, {r0, r1, r2}
 800395e:	6020      	str	r0, [r4, #0]
 8003960:	6061      	str	r1, [r4, #4]
 8003962:	60a2      	str	r2, [r4, #8]
 8003964:	881b      	ldrh	r3, [r3, #0]
 8003966:	81a3      	strh	r3, [r4, #12]
			break;
 8003968:	f018 bddc 	b.w	801c524 <problem_fetch+0x1ae60>
		case 43 :
			strcpy(p->name,"WING SPANDEX");
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8003972:	4a32      	ldr	r2, [pc, #200]	; (8003a3c <problem_fetch+0x2378>)
 8003974:	461c      	mov	r4, r3
 8003976:	4613      	mov	r3, r2
 8003978:	cb07      	ldmia	r3!, {r0, r1, r2}
 800397a:	6020      	str	r0, [r4, #0]
 800397c:	6061      	str	r1, [r4, #4]
 800397e:	60a2      	str	r2, [r4, #8]
 8003980:	781b      	ldrb	r3, [r3, #0]
 8003982:	7323      	strb	r3, [r4, #12]
			strcpy(p->grade,"7B");
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800398a:	4a2d      	ldr	r2, [pc, #180]	; (8003a40 <problem_fetch+0x237c>)
 800398c:	8811      	ldrh	r1, [r2, #0]
 800398e:	7892      	ldrb	r2, [r2, #2]
 8003990:	8019      	strh	r1, [r3, #0]
 8003992:	709a      	strb	r2, [r3, #2]
			p->moveSize = 6;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	2206      	movs	r2, #6
 8003998:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"E,C,F,C,G,A");
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	33a4      	adds	r3, #164	; 0xa4
 800399e:	4a29      	ldr	r2, [pc, #164]	; (8003a44 <problem_fetch+0x2380>)
 80039a0:	461c      	mov	r4, r3
 80039a2:	4613      	mov	r3, r2
 80039a4:	cb07      	ldmia	r3!, {r0, r1, r2}
 80039a6:	6020      	str	r0, [r4, #0]
 80039a8:	6061      	str	r1, [r4, #4]
 80039aa:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"6,8,11,13,17,18");
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	3304      	adds	r3, #4
 80039b0:	4a25      	ldr	r2, [pc, #148]	; (8003a48 <problem_fetch+0x2384>)
 80039b2:	461c      	mov	r4, r3
 80039b4:	4615      	mov	r5, r2
 80039b6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80039b8:	6020      	str	r0, [r4, #0]
 80039ba:	6061      	str	r1, [r4, #4]
 80039bc:	60a2      	str	r2, [r4, #8]
 80039be:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 80039c6:	4a21      	ldr	r2, [pc, #132]	; (8003a4c <problem_fetch+0x2388>)
 80039c8:	461c      	mov	r4, r3
 80039ca:	4613      	mov	r3, r2
 80039cc:	cb07      	ldmia	r3!, {r0, r1, r2}
 80039ce:	6020      	str	r0, [r4, #0]
 80039d0:	6061      	str	r1, [r4, #4]
 80039d2:	60a2      	str	r2, [r4, #8]
			break;
 80039d4:	f018 bda6 	b.w	801c524 <problem_fetch+0x1ae60>
 80039d8:	08024038 	.word	0x08024038
 80039dc:	08023854 	.word	0x08023854
 80039e0:	08024040 	.word	0x08024040
 80039e4:	08024054 	.word	0x08024054
 80039e8:	0802406c 	.word	0x0802406c
 80039ec:	08024080 	.word	0x08024080
 80039f0:	08024088 	.word	0x08024088
 80039f4:	0802408c 	.word	0x0802408c
 80039f8:	0802409c 	.word	0x0802409c
 80039fc:	080240b4 	.word	0x080240b4
 8003a00:	080240c4 	.word	0x080240c4
 8003a04:	08023920 	.word	0x08023920
 8003a08:	080240cc 	.word	0x080240cc
 8003a0c:	080240e0 	.word	0x080240e0
 8003a10:	080240fc 	.word	0x080240fc
 8003a14:	08024110 	.word	0x08024110
 8003a18:	08023814 	.word	0x08023814
 8003a1c:	08024124 	.word	0x08024124
 8003a20:	08024130 	.word	0x08024130
 8003a24:	08023f34 	.word	0x08023f34
 8003a28:	08024140 	.word	0x08024140
 8003a2c:	08023990 	.word	0x08023990
 8003a30:	0802414c 	.word	0x0802414c
 8003a34:	0802415c 	.word	0x0802415c
 8003a38:	080239dc 	.word	0x080239dc
 8003a3c:	08024170 	.word	0x08024170
 8003a40:	08023f4c 	.word	0x08023f4c
 8003a44:	08024180 	.word	0x08024180
 8003a48:	0802418c 	.word	0x0802418c
 8003a4c:	08023bf0 	.word	0x08023bf0
		case 44 :
			strcpy(p->name,"CAVATELLI");
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8003a56:	49b2      	ldr	r1, [pc, #712]	; (8003d20 <problem_fetch+0x265c>)
 8003a58:	461a      	mov	r2, r3
 8003a5a:	460b      	mov	r3, r1
 8003a5c:	cb03      	ldmia	r3!, {r0, r1}
 8003a5e:	6010      	str	r0, [r2, #0]
 8003a60:	6051      	str	r1, [r2, #4]
 8003a62:	881b      	ldrh	r3, [r3, #0]
 8003a64:	8113      	strh	r3, [r2, #8]
			strcpy(p->grade,"6C+");
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8003a6c:	4aad      	ldr	r2, [pc, #692]	; (8003d24 <problem_fetch+0x2660>)
 8003a6e:	6810      	ldr	r0, [r2, #0]
 8003a70:	6018      	str	r0, [r3, #0]
			p->moveSize = 5;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	2205      	movs	r2, #5
 8003a76:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,I,F,J,D");
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	33a4      	adds	r3, #164	; 0xa4
 8003a7c:	49aa      	ldr	r1, [pc, #680]	; (8003d28 <problem_fetch+0x2664>)
 8003a7e:	461a      	mov	r2, r3
 8003a80:	460b      	mov	r3, r1
 8003a82:	cb03      	ldmia	r3!, {r0, r1}
 8003a84:	6010      	str	r0, [r2, #0]
 8003a86:	6051      	str	r1, [r2, #4]
 8003a88:	881b      	ldrh	r3, [r3, #0]
 8003a8a:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"5,10,13,16,18");
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	3304      	adds	r3, #4
 8003a90:	4aa6      	ldr	r2, [pc, #664]	; (8003d2c <problem_fetch+0x2668>)
 8003a92:	461c      	mov	r4, r3
 8003a94:	4613      	mov	r3, r2
 8003a96:	cb07      	ldmia	r3!, {r0, r1, r2}
 8003a98:	6020      	str	r0, [r4, #0]
 8003a9a:	6061      	str	r1, [r4, #4]
 8003a9c:	60a2      	str	r2, [r4, #8]
 8003a9e:	881b      	ldrh	r3, [r3, #0]
 8003aa0:	81a3      	strh	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,e");
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8003aa8:	49a1      	ldr	r1, [pc, #644]	; (8003d30 <problem_fetch+0x266c>)
 8003aaa:	461a      	mov	r2, r3
 8003aac:	460b      	mov	r3, r1
 8003aae:	cb03      	ldmia	r3!, {r0, r1}
 8003ab0:	6010      	str	r0, [r2, #0]
 8003ab2:	6051      	str	r1, [r2, #4]
 8003ab4:	881b      	ldrh	r3, [r3, #0]
 8003ab6:	8113      	strh	r3, [r2, #8]
			break;
 8003ab8:	f018 bd34 	b.w	801c524 <problem_fetch+0x1ae60>
		case 45 :
			strcpy(p->name,"THE BIRTH OF TRAGEDY");
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8003ac2:	4a9c      	ldr	r2, [pc, #624]	; (8003d34 <problem_fetch+0x2670>)
 8003ac4:	461d      	mov	r5, r3
 8003ac6:	4614      	mov	r4, r2
 8003ac8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003aca:	6028      	str	r0, [r5, #0]
 8003acc:	6069      	str	r1, [r5, #4]
 8003ace:	60aa      	str	r2, [r5, #8]
 8003ad0:	60eb      	str	r3, [r5, #12]
 8003ad2:	6820      	ldr	r0, [r4, #0]
 8003ad4:	6128      	str	r0, [r5, #16]
 8003ad6:	7923      	ldrb	r3, [r4, #4]
 8003ad8:	752b      	strb	r3, [r5, #20]
			strcpy(p->grade,"6C");
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8003ae0:	4a95      	ldr	r2, [pc, #596]	; (8003d38 <problem_fetch+0x2674>)
 8003ae2:	8811      	ldrh	r1, [r2, #0]
 8003ae4:	7892      	ldrb	r2, [r2, #2]
 8003ae6:	8019      	strh	r1, [r3, #0]
 8003ae8:	709a      	strb	r2, [r3, #2]
			p->moveSize = 7;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	2207      	movs	r2, #7
 8003aee:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,J,G,G,C,D,A");
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	33a4      	adds	r3, #164	; 0xa4
 8003af4:	4a91      	ldr	r2, [pc, #580]	; (8003d3c <problem_fetch+0x2678>)
 8003af6:	461c      	mov	r4, r3
 8003af8:	4613      	mov	r3, r2
 8003afa:	cb07      	ldmia	r3!, {r0, r1, r2}
 8003afc:	6020      	str	r0, [r4, #0]
 8003afe:	6061      	str	r1, [r4, #4]
 8003b00:	60a2      	str	r2, [r4, #8]
 8003b02:	881b      	ldrh	r3, [r3, #0]
 8003b04:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,7,9,10,13,15,18");
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	3304      	adds	r3, #4
 8003b0a:	4a8d      	ldr	r2, [pc, #564]	; (8003d40 <problem_fetch+0x267c>)
 8003b0c:	461d      	mov	r5, r3
 8003b0e:	4614      	mov	r4, r2
 8003b10:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003b12:	6028      	str	r0, [r5, #0]
 8003b14:	6069      	str	r1, [r5, #4]
 8003b16:	60aa      	str	r2, [r5, #8]
 8003b18:	60eb      	str	r3, [r5, #12]
 8003b1a:	8823      	ldrh	r3, [r4, #0]
 8003b1c:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8003b24:	4a87      	ldr	r2, [pc, #540]	; (8003d44 <problem_fetch+0x2680>)
 8003b26:	461c      	mov	r4, r3
 8003b28:	4613      	mov	r3, r2
 8003b2a:	cb07      	ldmia	r3!, {r0, r1, r2}
 8003b2c:	6020      	str	r0, [r4, #0]
 8003b2e:	6061      	str	r1, [r4, #4]
 8003b30:	60a2      	str	r2, [r4, #8]
 8003b32:	881b      	ldrh	r3, [r3, #0]
 8003b34:	81a3      	strh	r3, [r4, #12]
			break;
 8003b36:	f018 bcf5 	b.w	801c524 <problem_fetch+0x1ae60>
		case 46 :
			strcpy(p->name,"THE WILL TO POWER");
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8003b40:	4a81      	ldr	r2, [pc, #516]	; (8003d48 <problem_fetch+0x2684>)
 8003b42:	461d      	mov	r5, r3
 8003b44:	4614      	mov	r4, r2
 8003b46:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003b48:	6028      	str	r0, [r5, #0]
 8003b4a:	6069      	str	r1, [r5, #4]
 8003b4c:	60aa      	str	r2, [r5, #8]
 8003b4e:	60eb      	str	r3, [r5, #12]
 8003b50:	8823      	ldrh	r3, [r4, #0]
 8003b52:	822b      	strh	r3, [r5, #16]
			strcpy(p->grade,"6C");
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8003b5a:	4a77      	ldr	r2, [pc, #476]	; (8003d38 <problem_fetch+0x2674>)
 8003b5c:	8811      	ldrh	r1, [r2, #0]
 8003b5e:	7892      	ldrb	r2, [r2, #2]
 8003b60:	8019      	strh	r1, [r3, #0]
 8003b62:	709a      	strb	r2, [r3, #2]
			p->moveSize = 8;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	2208      	movs	r2, #8
 8003b68:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"H,E,G,H,K,G,H,D");
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	33a4      	adds	r3, #164	; 0xa4
 8003b6e:	4a77      	ldr	r2, [pc, #476]	; (8003d4c <problem_fetch+0x2688>)
 8003b70:	461c      	mov	r4, r3
 8003b72:	4615      	mov	r5, r2
 8003b74:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003b76:	6020      	str	r0, [r4, #0]
 8003b78:	6061      	str	r1, [r4, #4]
 8003b7a:	60a2      	str	r2, [r4, #8]
 8003b7c:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,6,9,12,14,17,16,18");
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	3304      	adds	r3, #4
 8003b82:	4a73      	ldr	r2, [pc, #460]	; (8003d50 <problem_fetch+0x268c>)
 8003b84:	461d      	mov	r5, r3
 8003b86:	4614      	mov	r4, r2
 8003b88:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003b8a:	6028      	str	r0, [r5, #0]
 8003b8c:	6069      	str	r1, [r5, #4]
 8003b8e:	60aa      	str	r2, [r5, #8]
 8003b90:	60eb      	str	r3, [r5, #12]
 8003b92:	6820      	ldr	r0, [r4, #0]
 8003b94:	6128      	str	r0, [r5, #16]
 8003b96:	7923      	ldrb	r3, [r4, #4]
 8003b98:	752b      	strb	r3, [r5, #20]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,e");
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8003ba0:	4a6c      	ldr	r2, [pc, #432]	; (8003d54 <problem_fetch+0x2690>)
 8003ba2:	461c      	mov	r4, r3
 8003ba4:	4615      	mov	r5, r2
 8003ba6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003ba8:	6020      	str	r0, [r4, #0]
 8003baa:	6061      	str	r1, [r4, #4]
 8003bac:	60a2      	str	r2, [r4, #8]
 8003bae:	60e3      	str	r3, [r4, #12]
			break;
 8003bb0:	f018 bcb8 	b.w	801c524 <problem_fetch+0x1ae60>
		case 47 :
			strcpy(p->name,"BEYOND GOOD AND EVIL");
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8003bba:	4a67      	ldr	r2, [pc, #412]	; (8003d58 <problem_fetch+0x2694>)
 8003bbc:	461d      	mov	r5, r3
 8003bbe:	4614      	mov	r4, r2
 8003bc0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003bc2:	6028      	str	r0, [r5, #0]
 8003bc4:	6069      	str	r1, [r5, #4]
 8003bc6:	60aa      	str	r2, [r5, #8]
 8003bc8:	60eb      	str	r3, [r5, #12]
 8003bca:	6820      	ldr	r0, [r4, #0]
 8003bcc:	6128      	str	r0, [r5, #16]
 8003bce:	7923      	ldrb	r3, [r4, #4]
 8003bd0:	752b      	strb	r3, [r5, #20]
			strcpy(p->grade,"6C");
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8003bd8:	4a57      	ldr	r2, [pc, #348]	; (8003d38 <problem_fetch+0x2674>)
 8003bda:	8811      	ldrh	r1, [r2, #0]
 8003bdc:	7892      	ldrb	r2, [r2, #2]
 8003bde:	8019      	strh	r1, [r3, #0]
 8003be0:	709a      	strb	r2, [r3, #2]
			p->moveSize = 8;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	2208      	movs	r2, #8
 8003be6:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"E,G,G,E,B,G,E,I");
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	33a4      	adds	r3, #164	; 0xa4
 8003bec:	4a5b      	ldr	r2, [pc, #364]	; (8003d5c <problem_fetch+0x2698>)
 8003bee:	461c      	mov	r4, r3
 8003bf0:	4615      	mov	r5, r2
 8003bf2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003bf4:	6020      	str	r0, [r4, #0]
 8003bf6:	6061      	str	r1, [r4, #4]
 8003bf8:	60a2      	str	r2, [r4, #8]
 8003bfa:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"8,4,6,12,15,17,16,18");
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	3304      	adds	r3, #4
 8003c00:	4a57      	ldr	r2, [pc, #348]	; (8003d60 <problem_fetch+0x269c>)
 8003c02:	461d      	mov	r5, r3
 8003c04:	4614      	mov	r4, r2
 8003c06:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003c08:	6028      	str	r0, [r5, #0]
 8003c0a:	6069      	str	r1, [r5, #4]
 8003c0c:	60aa      	str	r2, [r5, #8]
 8003c0e:	60eb      	str	r3, [r5, #12]
 8003c10:	6820      	ldr	r0, [r4, #0]
 8003c12:	6128      	str	r0, [r5, #16]
 8003c14:	7923      	ldrb	r3, [r4, #4]
 8003c16:	752b      	strb	r3, [r5, #20]
			strcpy(p->startFinish,"d,s,s,d,d,d,d,e");
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8003c1e:	4a51      	ldr	r2, [pc, #324]	; (8003d64 <problem_fetch+0x26a0>)
 8003c20:	461c      	mov	r4, r3
 8003c22:	4615      	mov	r5, r2
 8003c24:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003c26:	6020      	str	r0, [r4, #0]
 8003c28:	6061      	str	r1, [r4, #4]
 8003c2a:	60a2      	str	r2, [r4, #8]
 8003c2c:	60e3      	str	r3, [r4, #12]
			break;
 8003c2e:	f018 bc79 	b.w	801c524 <problem_fetch+0x1ae60>
		case 48 :
			strcpy(p->name,"BLACK CHAMBER ORDER");
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8003c38:	4a4b      	ldr	r2, [pc, #300]	; (8003d68 <problem_fetch+0x26a4>)
 8003c3a:	461d      	mov	r5, r3
 8003c3c:	4614      	mov	r4, r2
 8003c3e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003c40:	6028      	str	r0, [r5, #0]
 8003c42:	6069      	str	r1, [r5, #4]
 8003c44:	60aa      	str	r2, [r5, #8]
 8003c46:	60eb      	str	r3, [r5, #12]
 8003c48:	6820      	ldr	r0, [r4, #0]
 8003c4a:	6128      	str	r0, [r5, #16]
			strcpy(p->grade,"7A");
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8003c52:	4a46      	ldr	r2, [pc, #280]	; (8003d6c <problem_fetch+0x26a8>)
 8003c54:	8811      	ldrh	r1, [r2, #0]
 8003c56:	7892      	ldrb	r2, [r2, #2]
 8003c58:	8019      	strh	r1, [r3, #0]
 8003c5a:	709a      	strb	r2, [r3, #2]
			p->moveSize = 7;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	2207      	movs	r2, #7
 8003c60:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"C,E,C,E,B,D,A");
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	33a4      	adds	r3, #164	; 0xa4
 8003c66:	4a42      	ldr	r2, [pc, #264]	; (8003d70 <problem_fetch+0x26ac>)
 8003c68:	461c      	mov	r4, r3
 8003c6a:	4613      	mov	r3, r2
 8003c6c:	cb07      	ldmia	r3!, {r0, r1, r2}
 8003c6e:	6020      	str	r0, [r4, #0]
 8003c70:	6061      	str	r1, [r4, #4]
 8003c72:	60a2      	str	r2, [r4, #8]
 8003c74:	881b      	ldrh	r3, [r3, #0]
 8003c76:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,6,8,9,12,15,18");
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	3304      	adds	r3, #4
 8003c7c:	4a3d      	ldr	r2, [pc, #244]	; (8003d74 <problem_fetch+0x26b0>)
 8003c7e:	461d      	mov	r5, r3
 8003c80:	4614      	mov	r4, r2
 8003c82:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003c84:	6028      	str	r0, [r5, #0]
 8003c86:	6069      	str	r1, [r5, #4]
 8003c88:	60aa      	str	r2, [r5, #8]
 8003c8a:	60eb      	str	r3, [r5, #12]
 8003c8c:	7823      	ldrb	r3, [r4, #0]
 8003c8e:	742b      	strb	r3, [r5, #16]
			strcpy(p->startFinish,"s,s,d,d,d,d,e");
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8003c96:	4a38      	ldr	r2, [pc, #224]	; (8003d78 <problem_fetch+0x26b4>)
 8003c98:	461c      	mov	r4, r3
 8003c9a:	4613      	mov	r3, r2
 8003c9c:	cb07      	ldmia	r3!, {r0, r1, r2}
 8003c9e:	6020      	str	r0, [r4, #0]
 8003ca0:	6061      	str	r1, [r4, #4]
 8003ca2:	60a2      	str	r2, [r4, #8]
 8003ca4:	881b      	ldrh	r3, [r3, #0]
 8003ca6:	81a3      	strh	r3, [r4, #12]
			break;
 8003ca8:	f018 bc3c 	b.w	801c524 <problem_fetch+0x1ae60>
		case 49 :
			strcpy(p->name,"CALCULO");
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8003cb2:	4932      	ldr	r1, [pc, #200]	; (8003d7c <problem_fetch+0x26b8>)
 8003cb4:	461a      	mov	r2, r3
 8003cb6:	460b      	mov	r3, r1
 8003cb8:	cb03      	ldmia	r3!, {r0, r1}
 8003cba:	6010      	str	r0, [r2, #0]
 8003cbc:	6051      	str	r1, [r2, #4]
			strcpy(p->grade,"6C");
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8003cc4:	4a1c      	ldr	r2, [pc, #112]	; (8003d38 <problem_fetch+0x2674>)
 8003cc6:	8811      	ldrh	r1, [r2, #0]
 8003cc8:	7892      	ldrb	r2, [r2, #2]
 8003cca:	8019      	strh	r1, [r3, #0]
 8003ccc:	709a      	strb	r2, [r3, #2]
			p->moveSize = 7;
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	2207      	movs	r2, #7
 8003cd2:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,E,E,E,F,G,I");
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	33a4      	adds	r3, #164	; 0xa4
 8003cd8:	4a29      	ldr	r2, [pc, #164]	; (8003d80 <problem_fetch+0x26bc>)
 8003cda:	461c      	mov	r4, r3
 8003cdc:	4613      	mov	r3, r2
 8003cde:	cb07      	ldmia	r3!, {r0, r1, r2}
 8003ce0:	6020      	str	r0, [r4, #0]
 8003ce2:	6061      	str	r1, [r4, #4]
 8003ce4:	60a2      	str	r2, [r4, #8]
 8003ce6:	881b      	ldrh	r3, [r3, #0]
 8003ce8:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,6,9,12,13,15,18");
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	3304      	adds	r3, #4
 8003cee:	4a25      	ldr	r2, [pc, #148]	; (8003d84 <problem_fetch+0x26c0>)
 8003cf0:	461d      	mov	r5, r3
 8003cf2:	4614      	mov	r4, r2
 8003cf4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003cf6:	6028      	str	r0, [r5, #0]
 8003cf8:	6069      	str	r1, [r5, #4]
 8003cfa:	60aa      	str	r2, [r5, #8]
 8003cfc:	60eb      	str	r3, [r5, #12]
 8003cfe:	8823      	ldrh	r3, [r4, #0]
 8003d00:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8003d08:	4a0e      	ldr	r2, [pc, #56]	; (8003d44 <problem_fetch+0x2680>)
 8003d0a:	461c      	mov	r4, r3
 8003d0c:	4613      	mov	r3, r2
 8003d0e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8003d10:	6020      	str	r0, [r4, #0]
 8003d12:	6061      	str	r1, [r4, #4]
 8003d14:	60a2      	str	r2, [r4, #8]
 8003d16:	881b      	ldrh	r3, [r3, #0]
 8003d18:	81a3      	strh	r3, [r4, #12]
			break;
 8003d1a:	f018 bc03 	b.w	801c524 <problem_fetch+0x1ae60>
 8003d1e:	bf00      	nop
 8003d20:	0802419c 	.word	0x0802419c
 8003d24:	080238ec 	.word	0x080238ec
 8003d28:	080241a8 	.word	0x080241a8
 8003d2c:	080241b4 	.word	0x080241b4
 8003d30:	08023d20 	.word	0x08023d20
 8003d34:	080241c4 	.word	0x080241c4
 8003d38:	08023920 	.word	0x08023920
 8003d3c:	080241dc 	.word	0x080241dc
 8003d40:	080241ec 	.word	0x080241ec
 8003d44:	080239dc 	.word	0x080239dc
 8003d48:	08024200 	.word	0x08024200
 8003d4c:	08024214 	.word	0x08024214
 8003d50:	08024224 	.word	0x08024224
 8003d54:	08023978 	.word	0x08023978
 8003d58:	0802423c 	.word	0x0802423c
 8003d5c:	08024254 	.word	0x08024254
 8003d60:	08024264 	.word	0x08024264
 8003d64:	0802427c 	.word	0x0802427c
 8003d68:	0802428c 	.word	0x0802428c
 8003d6c:	08023814 	.word	0x08023814
 8003d70:	080242a0 	.word	0x080242a0
 8003d74:	080242b0 	.word	0x080242b0
 8003d78:	080238cc 	.word	0x080238cc
 8003d7c:	080242c4 	.word	0x080242c4
 8003d80:	080242cc 	.word	0x080242cc
 8003d84:	080242dc 	.word	0x080242dc
		case 50 :
			strcpy(p->name,"LONG BLACK");
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8003d8e:	49bd      	ldr	r1, [pc, #756]	; (8004084 <problem_fetch+0x29c0>)
 8003d90:	461a      	mov	r2, r3
 8003d92:	460b      	mov	r3, r1
 8003d94:	cb03      	ldmia	r3!, {r0, r1}
 8003d96:	6010      	str	r0, [r2, #0]
 8003d98:	6051      	str	r1, [r2, #4]
 8003d9a:	8819      	ldrh	r1, [r3, #0]
 8003d9c:	789b      	ldrb	r3, [r3, #2]
 8003d9e:	8111      	strh	r1, [r2, #8]
 8003da0:	7293      	strb	r3, [r2, #10]
			strcpy(p->grade,"6B+");
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8003da8:	4ab7      	ldr	r2, [pc, #732]	; (8004088 <problem_fetch+0x29c4>)
 8003daa:	6810      	ldr	r0, [r2, #0]
 8003dac:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	2206      	movs	r2, #6
 8003db2:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,E,H,E,E,D");
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	33a4      	adds	r3, #164	; 0xa4
 8003db8:	4ab4      	ldr	r2, [pc, #720]	; (800408c <problem_fetch+0x29c8>)
 8003dba:	461c      	mov	r4, r3
 8003dbc:	4613      	mov	r3, r2
 8003dbe:	cb07      	ldmia	r3!, {r0, r1, r2}
 8003dc0:	6020      	str	r0, [r4, #0]
 8003dc2:	6061      	str	r1, [r4, #4]
 8003dc4:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,6,10,14,16,18");
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	3304      	adds	r3, #4
 8003dca:	4ab1      	ldr	r2, [pc, #708]	; (8004090 <problem_fetch+0x29cc>)
 8003dcc:	461c      	mov	r4, r3
 8003dce:	4615      	mov	r5, r2
 8003dd0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003dd2:	6020      	str	r0, [r4, #0]
 8003dd4:	6061      	str	r1, [r4, #4]
 8003dd6:	60a2      	str	r2, [r4, #8]
 8003dd8:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,s,d,d,d,e");
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8003de0:	4aac      	ldr	r2, [pc, #688]	; (8004094 <problem_fetch+0x29d0>)
 8003de2:	461c      	mov	r4, r3
 8003de4:	4613      	mov	r3, r2
 8003de6:	cb07      	ldmia	r3!, {r0, r1, r2}
 8003de8:	6020      	str	r0, [r4, #0]
 8003dea:	6061      	str	r1, [r4, #4]
 8003dec:	60a2      	str	r2, [r4, #8]
			break;
 8003dee:	f018 bb99 	b.w	801c524 <problem_fetch+0x1ae60>
		case 51 :
			strcpy(p->name,"BLACK JACK");
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8003df8:	49a7      	ldr	r1, [pc, #668]	; (8004098 <problem_fetch+0x29d4>)
 8003dfa:	461a      	mov	r2, r3
 8003dfc:	460b      	mov	r3, r1
 8003dfe:	cb03      	ldmia	r3!, {r0, r1}
 8003e00:	6010      	str	r0, [r2, #0]
 8003e02:	6051      	str	r1, [r2, #4]
 8003e04:	8819      	ldrh	r1, [r3, #0]
 8003e06:	789b      	ldrb	r3, [r3, #2]
 8003e08:	8111      	strh	r1, [r2, #8]
 8003e0a:	7293      	strb	r3, [r2, #10]
			strcpy(p->grade,"7A");
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8003e12:	4aa2      	ldr	r2, [pc, #648]	; (800409c <problem_fetch+0x29d8>)
 8003e14:	8811      	ldrh	r1, [r2, #0]
 8003e16:	7892      	ldrb	r2, [r2, #2]
 8003e18:	8019      	strh	r1, [r3, #0]
 8003e1a:	709a      	strb	r2, [r3, #2]
			p->moveSize = 6;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	2206      	movs	r2, #6
 8003e20:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"C,G,E,F,A,D");
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	33a4      	adds	r3, #164	; 0xa4
 8003e26:	4a9e      	ldr	r2, [pc, #632]	; (80040a0 <problem_fetch+0x29dc>)
 8003e28:	461c      	mov	r4, r3
 8003e2a:	4613      	mov	r3, r2
 8003e2c:	cb07      	ldmia	r3!, {r0, r1, r2}
 8003e2e:	6020      	str	r0, [r4, #0]
 8003e30:	6061      	str	r1, [r4, #4]
 8003e32:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,9,12,13,14,18");
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	3304      	adds	r3, #4
 8003e38:	4a9a      	ldr	r2, [pc, #616]	; (80040a4 <problem_fetch+0x29e0>)
 8003e3a:	461c      	mov	r4, r3
 8003e3c:	4615      	mov	r5, r2
 8003e3e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003e40:	6020      	str	r0, [r4, #0]
 8003e42:	6061      	str	r1, [r4, #4]
 8003e44:	60a2      	str	r2, [r4, #8]
 8003e46:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8003e4e:	4a96      	ldr	r2, [pc, #600]	; (80040a8 <problem_fetch+0x29e4>)
 8003e50:	461c      	mov	r4, r3
 8003e52:	4613      	mov	r3, r2
 8003e54:	cb07      	ldmia	r3!, {r0, r1, r2}
 8003e56:	6020      	str	r0, [r4, #0]
 8003e58:	6061      	str	r1, [r4, #4]
 8003e5a:	60a2      	str	r2, [r4, #8]
			break;
 8003e5c:	f018 bb62 	b.w	801c524 <problem_fetch+0x1ae60>
		case 52 :
			strcpy(p->name,"DITA DI BURRO");
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8003e66:	4a91      	ldr	r2, [pc, #580]	; (80040ac <problem_fetch+0x29e8>)
 8003e68:	461c      	mov	r4, r3
 8003e6a:	4613      	mov	r3, r2
 8003e6c:	cb07      	ldmia	r3!, {r0, r1, r2}
 8003e6e:	6020      	str	r0, [r4, #0]
 8003e70:	6061      	str	r1, [r4, #4]
 8003e72:	60a2      	str	r2, [r4, #8]
 8003e74:	881b      	ldrh	r3, [r3, #0]
 8003e76:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade,"7A");
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8003e7e:	4a87      	ldr	r2, [pc, #540]	; (800409c <problem_fetch+0x29d8>)
 8003e80:	8811      	ldrh	r1, [r2, #0]
 8003e82:	7892      	ldrb	r2, [r2, #2]
 8003e84:	8019      	strh	r1, [r3, #0]
 8003e86:	709a      	strb	r2, [r3, #2]
			p->moveSize = 4;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	2204      	movs	r2, #4
 8003e8c:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,J,C,D");
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	33a4      	adds	r3, #164	; 0xa4
 8003e92:	4987      	ldr	r1, [pc, #540]	; (80040b0 <problem_fetch+0x29ec>)
 8003e94:	461a      	mov	r2, r3
 8003e96:	460b      	mov	r3, r1
 8003e98:	cb03      	ldmia	r3!, {r0, r1}
 8003e9a:	6010      	str	r0, [r2, #0]
 8003e9c:	6051      	str	r1, [r2, #4]
			strcpy(p->moveNumbers,"9,5,13,18");
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	3304      	adds	r3, #4
 8003ea2:	4984      	ldr	r1, [pc, #528]	; (80040b4 <problem_fetch+0x29f0>)
 8003ea4:	461a      	mov	r2, r3
 8003ea6:	460b      	mov	r3, r1
 8003ea8:	cb03      	ldmia	r3!, {r0, r1}
 8003eaa:	6010      	str	r0, [r2, #0]
 8003eac:	6051      	str	r1, [r2, #4]
 8003eae:	881b      	ldrh	r3, [r3, #0]
 8003eb0:	8113      	strh	r3, [r2, #8]
			strcpy(p->startFinish,"d,s,d,e");
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8003eb8:	497f      	ldr	r1, [pc, #508]	; (80040b8 <problem_fetch+0x29f4>)
 8003eba:	461a      	mov	r2, r3
 8003ebc:	460b      	mov	r3, r1
 8003ebe:	cb03      	ldmia	r3!, {r0, r1}
 8003ec0:	6010      	str	r0, [r2, #0]
 8003ec2:	6051      	str	r1, [r2, #4]
			break;
 8003ec4:	f018 bb2e 	b.w	801c524 <problem_fetch+0x1ae60>
		case 53 :
			strcpy(p->name,"ELBOW GREASE VAR");
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8003ece:	4a7b      	ldr	r2, [pc, #492]	; (80040bc <problem_fetch+0x29f8>)
 8003ed0:	461d      	mov	r5, r3
 8003ed2:	4614      	mov	r4, r2
 8003ed4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003ed6:	6028      	str	r0, [r5, #0]
 8003ed8:	6069      	str	r1, [r5, #4]
 8003eda:	60aa      	str	r2, [r5, #8]
 8003edc:	60eb      	str	r3, [r5, #12]
 8003ede:	7823      	ldrb	r3, [r4, #0]
 8003ee0:	742b      	strb	r3, [r5, #16]
			strcpy(p->grade,"7C+");
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8003ee8:	4a75      	ldr	r2, [pc, #468]	; (80040c0 <problem_fetch+0x29fc>)
 8003eea:	6810      	ldr	r0, [r2, #0]
 8003eec:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	2206      	movs	r2, #6
 8003ef2:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,H,G,D,D,A");
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	33a4      	adds	r3, #164	; 0xa4
 8003ef8:	4a72      	ldr	r2, [pc, #456]	; (80040c4 <problem_fetch+0x2a00>)
 8003efa:	461c      	mov	r4, r3
 8003efc:	4613      	mov	r3, r2
 8003efe:	cb07      	ldmia	r3!, {r0, r1, r2}
 8003f00:	6020      	str	r0, [r4, #0]
 8003f02:	6061      	str	r1, [r4, #4]
 8003f04:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,8,9,11,15,18");
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	3304      	adds	r3, #4
 8003f0a:	4a6f      	ldr	r2, [pc, #444]	; (80040c8 <problem_fetch+0x2a04>)
 8003f0c:	461c      	mov	r4, r3
 8003f0e:	4613      	mov	r3, r2
 8003f10:	cb07      	ldmia	r3!, {r0, r1, r2}
 8003f12:	6020      	str	r0, [r4, #0]
 8003f14:	6061      	str	r1, [r4, #4]
 8003f16:	60a2      	str	r2, [r4, #8]
 8003f18:	881a      	ldrh	r2, [r3, #0]
 8003f1a:	789b      	ldrb	r3, [r3, #2]
 8003f1c:	81a2      	strh	r2, [r4, #12]
 8003f1e:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8003f26:	4a60      	ldr	r2, [pc, #384]	; (80040a8 <problem_fetch+0x29e4>)
 8003f28:	461c      	mov	r4, r3
 8003f2a:	4613      	mov	r3, r2
 8003f2c:	cb07      	ldmia	r3!, {r0, r1, r2}
 8003f2e:	6020      	str	r0, [r4, #0]
 8003f30:	6061      	str	r1, [r4, #4]
 8003f32:	60a2      	str	r2, [r4, #8]
			break;
 8003f34:	f018 baf6 	b.w	801c524 <problem_fetch+0x1ae60>
		case 54 :
			strcpy(p->name,"ELBOW GREASE");
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8003f3e:	4a63      	ldr	r2, [pc, #396]	; (80040cc <problem_fetch+0x2a08>)
 8003f40:	461c      	mov	r4, r3
 8003f42:	4613      	mov	r3, r2
 8003f44:	cb07      	ldmia	r3!, {r0, r1, r2}
 8003f46:	6020      	str	r0, [r4, #0]
 8003f48:	6061      	str	r1, [r4, #4]
 8003f4a:	60a2      	str	r2, [r4, #8]
 8003f4c:	781b      	ldrb	r3, [r3, #0]
 8003f4e:	7323      	strb	r3, [r4, #12]
			strcpy(p->grade,"7B+");
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8003f56:	4a5e      	ldr	r2, [pc, #376]	; (80040d0 <problem_fetch+0x2a0c>)
 8003f58:	6810      	ldr	r0, [r2, #0]
 8003f5a:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	2207      	movs	r2, #7
 8003f60:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,H,G,D,D,C,A");
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	33a4      	adds	r3, #164	; 0xa4
 8003f66:	4a5b      	ldr	r2, [pc, #364]	; (80040d4 <problem_fetch+0x2a10>)
 8003f68:	461c      	mov	r4, r3
 8003f6a:	4613      	mov	r3, r2
 8003f6c:	cb07      	ldmia	r3!, {r0, r1, r2}
 8003f6e:	6020      	str	r0, [r4, #0]
 8003f70:	6061      	str	r1, [r4, #4]
 8003f72:	60a2      	str	r2, [r4, #8]
 8003f74:	881b      	ldrh	r3, [r3, #0]
 8003f76:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,8,9,11,15,5,18");
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	3304      	adds	r3, #4
 8003f7c:	4a56      	ldr	r2, [pc, #344]	; (80040d8 <problem_fetch+0x2a14>)
 8003f7e:	461d      	mov	r5, r3
 8003f80:	4614      	mov	r4, r2
 8003f82:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003f84:	6028      	str	r0, [r5, #0]
 8003f86:	6069      	str	r1, [r5, #4]
 8003f88:	60aa      	str	r2, [r5, #8]
 8003f8a:	60eb      	str	r3, [r5, #12]
 8003f8c:	7823      	ldrb	r3, [r4, #0]
 8003f8e:	742b      	strb	r3, [r5, #16]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8003f96:	4a51      	ldr	r2, [pc, #324]	; (80040dc <problem_fetch+0x2a18>)
 8003f98:	461c      	mov	r4, r3
 8003f9a:	4613      	mov	r3, r2
 8003f9c:	cb07      	ldmia	r3!, {r0, r1, r2}
 8003f9e:	6020      	str	r0, [r4, #0]
 8003fa0:	6061      	str	r1, [r4, #4]
 8003fa2:	60a2      	str	r2, [r4, #8]
 8003fa4:	881b      	ldrh	r3, [r3, #0]
 8003fa6:	81a3      	strh	r3, [r4, #12]
			break;
 8003fa8:	f018 babc 	b.w	801c524 <problem_fetch+0x1ae60>
		case 55 :
			strcpy(p->name,"MY FLOW");
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8003fb2:	494b      	ldr	r1, [pc, #300]	; (80040e0 <problem_fetch+0x2a1c>)
 8003fb4:	461a      	mov	r2, r3
 8003fb6:	460b      	mov	r3, r1
 8003fb8:	cb03      	ldmia	r3!, {r0, r1}
 8003fba:	6010      	str	r0, [r2, #0]
 8003fbc:	6051      	str	r1, [r2, #4]
			strcpy(p->grade,"7A+");
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8003fc4:	4a47      	ldr	r2, [pc, #284]	; (80040e4 <problem_fetch+0x2a20>)
 8003fc6:	6810      	ldr	r0, [r2, #0]
 8003fc8:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	2206      	movs	r2, #6
 8003fce:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,H,E,E,A,D");
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	33a4      	adds	r3, #164	; 0xa4
 8003fd4:	4a44      	ldr	r2, [pc, #272]	; (80040e8 <problem_fetch+0x2a24>)
 8003fd6:	461c      	mov	r4, r3
 8003fd8:	4613      	mov	r3, r2
 8003fda:	cb07      	ldmia	r3!, {r0, r1, r2}
 8003fdc:	6020      	str	r0, [r4, #0]
 8003fde:	6061      	str	r1, [r4, #4]
 8003fe0:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,8,9,12,14,18");
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	3304      	adds	r3, #4
 8003fe6:	4a41      	ldr	r2, [pc, #260]	; (80040ec <problem_fetch+0x2a28>)
 8003fe8:	461c      	mov	r4, r3
 8003fea:	4613      	mov	r3, r2
 8003fec:	cb07      	ldmia	r3!, {r0, r1, r2}
 8003fee:	6020      	str	r0, [r4, #0]
 8003ff0:	6061      	str	r1, [r4, #4]
 8003ff2:	60a2      	str	r2, [r4, #8]
 8003ff4:	881a      	ldrh	r2, [r3, #0]
 8003ff6:	789b      	ldrb	r3, [r3, #2]
 8003ff8:	81a2      	strh	r2, [r4, #12]
 8003ffa:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8004002:	4a29      	ldr	r2, [pc, #164]	; (80040a8 <problem_fetch+0x29e4>)
 8004004:	461c      	mov	r4, r3
 8004006:	4613      	mov	r3, r2
 8004008:	cb07      	ldmia	r3!, {r0, r1, r2}
 800400a:	6020      	str	r0, [r4, #0]
 800400c:	6061      	str	r1, [r4, #4]
 800400e:	60a2      	str	r2, [r4, #8]
			break;
 8004010:	f018 ba88 	b.w	801c524 <problem_fetch+0x1ae60>
		case 56 :
			strcpy(p->name,"BLACK ARE GOOD");
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800401a:	4a35      	ldr	r2, [pc, #212]	; (80040f0 <problem_fetch+0x2a2c>)
 800401c:	461c      	mov	r4, r3
 800401e:	4613      	mov	r3, r2
 8004020:	cb07      	ldmia	r3!, {r0, r1, r2}
 8004022:	6020      	str	r0, [r4, #0]
 8004024:	6061      	str	r1, [r4, #4]
 8004026:	60a2      	str	r2, [r4, #8]
 8004028:	881a      	ldrh	r2, [r3, #0]
 800402a:	789b      	ldrb	r3, [r3, #2]
 800402c:	81a2      	strh	r2, [r4, #12]
 800402e:	73a3      	strb	r3, [r4, #14]
			strcpy(p->grade,"6C");
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8004036:	4a2f      	ldr	r2, [pc, #188]	; (80040f4 <problem_fetch+0x2a30>)
 8004038:	8811      	ldrh	r1, [r2, #0]
 800403a:	7892      	ldrb	r2, [r2, #2]
 800403c:	8019      	strh	r1, [r3, #0]
 800403e:	709a      	strb	r2, [r3, #2]
			p->moveSize = 6;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	2206      	movs	r2, #6
 8004044:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,J,I,J,G,I");
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	33a4      	adds	r3, #164	; 0xa4
 800404a:	4a2b      	ldr	r2, [pc, #172]	; (80040f8 <problem_fetch+0x2a34>)
 800404c:	461c      	mov	r4, r3
 800404e:	4613      	mov	r3, r2
 8004050:	cb07      	ldmia	r3!, {r0, r1, r2}
 8004052:	6020      	str	r0, [r4, #0]
 8004054:	6061      	str	r1, [r4, #4]
 8004056:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,7,10,12,15,18");
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	3304      	adds	r3, #4
 800405c:	4a27      	ldr	r2, [pc, #156]	; (80040fc <problem_fetch+0x2a38>)
 800405e:	461c      	mov	r4, r3
 8004060:	4615      	mov	r5, r2
 8004062:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004064:	6020      	str	r0, [r4, #0]
 8004066:	6061      	str	r1, [r4, #4]
 8004068:	60a2      	str	r2, [r4, #8]
 800406a:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8004072:	4a0d      	ldr	r2, [pc, #52]	; (80040a8 <problem_fetch+0x29e4>)
 8004074:	461c      	mov	r4, r3
 8004076:	4613      	mov	r3, r2
 8004078:	cb07      	ldmia	r3!, {r0, r1, r2}
 800407a:	6020      	str	r0, [r4, #0]
 800407c:	6061      	str	r1, [r4, #4]
 800407e:	60a2      	str	r2, [r4, #8]
			break;
 8004080:	f018 ba50 	b.w	801c524 <problem_fetch+0x1ae60>
 8004084:	080242f0 	.word	0x080242f0
 8004088:	08023854 	.word	0x08023854
 800408c:	080242fc 	.word	0x080242fc
 8004090:	08024308 	.word	0x08024308
 8004094:	08023834 	.word	0x08023834
 8004098:	08024318 	.word	0x08024318
 800409c:	08023814 	.word	0x08023814
 80040a0:	08024324 	.word	0x08024324
 80040a4:	08024330 	.word	0x08024330
 80040a8:	08023bf0 	.word	0x08023bf0
 80040ac:	08024340 	.word	0x08024340
 80040b0:	08024350 	.word	0x08024350
 80040b4:	08024358 	.word	0x08024358
 80040b8:	08024364 	.word	0x08024364
 80040bc:	0802436c 	.word	0x0802436c
 80040c0:	08023e60 	.word	0x08023e60
 80040c4:	08024380 	.word	0x08024380
 80040c8:	0802438c 	.word	0x0802438c
 80040cc:	0802439c 	.word	0x0802439c
 80040d0:	08023990 	.word	0x08023990
 80040d4:	080243ac 	.word	0x080243ac
 80040d8:	080243bc 	.word	0x080243bc
 80040dc:	080239dc 	.word	0x080239dc
 80040e0:	080243d0 	.word	0x080243d0
 80040e4:	080239f4 	.word	0x080239f4
 80040e8:	080243d8 	.word	0x080243d8
 80040ec:	08023d7c 	.word	0x08023d7c
 80040f0:	080243e4 	.word	0x080243e4
 80040f4:	08023920 	.word	0x08023920
 80040f8:	080243f4 	.word	0x080243f4
 80040fc:	08024400 	.word	0x08024400
		case 57 :
			strcpy(p->name,"THE DARK ARTS DIRECT");
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8004106:	4aad      	ldr	r2, [pc, #692]	; (80043bc <problem_fetch+0x2cf8>)
 8004108:	461d      	mov	r5, r3
 800410a:	4614      	mov	r4, r2
 800410c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800410e:	6028      	str	r0, [r5, #0]
 8004110:	6069      	str	r1, [r5, #4]
 8004112:	60aa      	str	r2, [r5, #8]
 8004114:	60eb      	str	r3, [r5, #12]
 8004116:	6820      	ldr	r0, [r4, #0]
 8004118:	6128      	str	r0, [r5, #16]
 800411a:	7923      	ldrb	r3, [r4, #4]
 800411c:	752b      	strb	r3, [r5, #20]
			strcpy(p->grade,"7C+");
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8004124:	4aa6      	ldr	r2, [pc, #664]	; (80043c0 <problem_fetch+0x2cfc>)
 8004126:	6810      	ldr	r0, [r2, #0]
 8004128:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	2206      	movs	r2, #6
 800412e:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,G,H,C,G,I");
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	33a4      	adds	r3, #164	; 0xa4
 8004134:	4aa3      	ldr	r2, [pc, #652]	; (80043c4 <problem_fetch+0x2d00>)
 8004136:	461c      	mov	r4, r3
 8004138:	4613      	mov	r3, r2
 800413a:	cb07      	ldmia	r3!, {r0, r1, r2}
 800413c:	6020      	str	r0, [r4, #0]
 800413e:	6061      	str	r1, [r4, #4]
 8004140:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,6,8,13,17,18");
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	3304      	adds	r3, #4
 8004146:	4aa0      	ldr	r2, [pc, #640]	; (80043c8 <problem_fetch+0x2d04>)
 8004148:	461c      	mov	r4, r3
 800414a:	4613      	mov	r3, r2
 800414c:	cb07      	ldmia	r3!, {r0, r1, r2}
 800414e:	6020      	str	r0, [r4, #0]
 8004150:	6061      	str	r1, [r4, #4]
 8004152:	60a2      	str	r2, [r4, #8]
 8004154:	881a      	ldrh	r2, [r3, #0]
 8004156:	789b      	ldrb	r3, [r3, #2]
 8004158:	81a2      	strh	r2, [r4, #12]
 800415a:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish,"s,s,d,d,d,e");
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8004162:	4a9a      	ldr	r2, [pc, #616]	; (80043cc <problem_fetch+0x2d08>)
 8004164:	461c      	mov	r4, r3
 8004166:	4613      	mov	r3, r2
 8004168:	cb07      	ldmia	r3!, {r0, r1, r2}
 800416a:	6020      	str	r0, [r4, #0]
 800416c:	6061      	str	r1, [r4, #4]
 800416e:	60a2      	str	r2, [r4, #8]
			break;
 8004170:	f018 b9d8 	b.w	801c524 <problem_fetch+0x1ae60>
		case 58 :
			strcpy(p->name,"THE MOST HIGH");
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800417a:	4a95      	ldr	r2, [pc, #596]	; (80043d0 <problem_fetch+0x2d0c>)
 800417c:	461c      	mov	r4, r3
 800417e:	4613      	mov	r3, r2
 8004180:	cb07      	ldmia	r3!, {r0, r1, r2}
 8004182:	6020      	str	r0, [r4, #0]
 8004184:	6061      	str	r1, [r4, #4]
 8004186:	60a2      	str	r2, [r4, #8]
 8004188:	881b      	ldrh	r3, [r3, #0]
 800418a:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade,"6C+");
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8004192:	4a90      	ldr	r2, [pc, #576]	; (80043d4 <problem_fetch+0x2d10>)
 8004194:	6810      	ldr	r0, [r2, #0]
 8004196:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	2207      	movs	r2, #7
 800419c:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"E,H,G,D,G,E,I");
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	33a4      	adds	r3, #164	; 0xa4
 80041a2:	4a8d      	ldr	r2, [pc, #564]	; (80043d8 <problem_fetch+0x2d14>)
 80041a4:	461c      	mov	r4, r3
 80041a6:	4613      	mov	r3, r2
 80041a8:	cb07      	ldmia	r3!, {r0, r1, r2}
 80041aa:	6020      	str	r0, [r4, #0]
 80041ac:	6061      	str	r1, [r4, #4]
 80041ae:	60a2      	str	r2, [r4, #8]
 80041b0:	881b      	ldrh	r3, [r3, #0]
 80041b2:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"6,5,9,11,14,16,18");
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	3304      	adds	r3, #4
 80041b8:	4a88      	ldr	r2, [pc, #544]	; (80043dc <problem_fetch+0x2d18>)
 80041ba:	461d      	mov	r5, r3
 80041bc:	4614      	mov	r4, r2
 80041be:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80041c0:	6028      	str	r0, [r5, #0]
 80041c2:	6069      	str	r1, [r5, #4]
 80041c4:	60aa      	str	r2, [r5, #8]
 80041c6:	60eb      	str	r3, [r5, #12]
 80041c8:	8823      	ldrh	r3, [r4, #0]
 80041ca:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,s,d,d,d,d,e");
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 80041d2:	4a83      	ldr	r2, [pc, #524]	; (80043e0 <problem_fetch+0x2d1c>)
 80041d4:	461c      	mov	r4, r3
 80041d6:	4613      	mov	r3, r2
 80041d8:	cb07      	ldmia	r3!, {r0, r1, r2}
 80041da:	6020      	str	r0, [r4, #0]
 80041dc:	6061      	str	r1, [r4, #4]
 80041de:	60a2      	str	r2, [r4, #8]
 80041e0:	881b      	ldrh	r3, [r3, #0]
 80041e2:	81a3      	strh	r3, [r4, #12]
			break;
 80041e4:	f018 b99e 	b.w	801c524 <problem_fetch+0x1ae60>
		case 59 :
			strcpy(p->name,"MAN IN BLACK");
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80041ee:	4a7d      	ldr	r2, [pc, #500]	; (80043e4 <problem_fetch+0x2d20>)
 80041f0:	461c      	mov	r4, r3
 80041f2:	4613      	mov	r3, r2
 80041f4:	cb07      	ldmia	r3!, {r0, r1, r2}
 80041f6:	6020      	str	r0, [r4, #0]
 80041f8:	6061      	str	r1, [r4, #4]
 80041fa:	60a2      	str	r2, [r4, #8]
 80041fc:	781b      	ldrb	r3, [r3, #0]
 80041fe:	7323      	strb	r3, [r4, #12]
			strcpy(p->grade,"6B+");
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8004206:	4a78      	ldr	r2, [pc, #480]	; (80043e8 <problem_fetch+0x2d24>)
 8004208:	6810      	ldr	r0, [r2, #0]
 800420a:	6018      	str	r0, [r3, #0]
			p->moveSize = 9;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	2209      	movs	r2, #9
 8004210:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,J,K,H,I,I,K,I,G");
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	33a4      	adds	r3, #164	; 0xa4
 8004216:	4a75      	ldr	r2, [pc, #468]	; (80043ec <problem_fetch+0x2d28>)
 8004218:	461d      	mov	r5, r3
 800421a:	4614      	mov	r4, r2
 800421c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800421e:	6028      	str	r0, [r5, #0]
 8004220:	6069      	str	r1, [r5, #4]
 8004222:	60aa      	str	r2, [r5, #8]
 8004224:	60eb      	str	r3, [r5, #12]
 8004226:	8823      	ldrh	r3, [r4, #0]
 8004228:	822b      	strh	r3, [r5, #16]
			strcpy(p->moveNumbers,"5,7,9,12,14,15,16,18,4");
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	3304      	adds	r3, #4
 800422e:	4a70      	ldr	r2, [pc, #448]	; (80043f0 <problem_fetch+0x2d2c>)
 8004230:	461c      	mov	r4, r3
 8004232:	4615      	mov	r5, r2
 8004234:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004236:	6020      	str	r0, [r4, #0]
 8004238:	6061      	str	r1, [r4, #4]
 800423a:	60a2      	str	r2, [r4, #8]
 800423c:	60e3      	str	r3, [r4, #12]
 800423e:	6828      	ldr	r0, [r5, #0]
 8004240:	6120      	str	r0, [r4, #16]
 8004242:	88ab      	ldrh	r3, [r5, #4]
 8004244:	79aa      	ldrb	r2, [r5, #6]
 8004246:	82a3      	strh	r3, [r4, #20]
 8004248:	4613      	mov	r3, r2
 800424a:	75a3      	strb	r3, [r4, #22]
			strcpy(p->startFinish,"s,d,d,d,d,d,d,e,s");
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8004252:	4a68      	ldr	r2, [pc, #416]	; (80043f4 <problem_fetch+0x2d30>)
 8004254:	461d      	mov	r5, r3
 8004256:	4614      	mov	r4, r2
 8004258:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800425a:	6028      	str	r0, [r5, #0]
 800425c:	6069      	str	r1, [r5, #4]
 800425e:	60aa      	str	r2, [r5, #8]
 8004260:	60eb      	str	r3, [r5, #12]
 8004262:	8823      	ldrh	r3, [r4, #0]
 8004264:	822b      	strh	r3, [r5, #16]
			break;
 8004266:	f018 b95d 	b.w	801c524 <problem_fetch+0x1ae60>
		case 60 :
			strcpy(p->name,"STRIZZANGELES");
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8004270:	4a61      	ldr	r2, [pc, #388]	; (80043f8 <problem_fetch+0x2d34>)
 8004272:	461c      	mov	r4, r3
 8004274:	4613      	mov	r3, r2
 8004276:	cb07      	ldmia	r3!, {r0, r1, r2}
 8004278:	6020      	str	r0, [r4, #0]
 800427a:	6061      	str	r1, [r4, #4]
 800427c:	60a2      	str	r2, [r4, #8]
 800427e:	881b      	ldrh	r3, [r3, #0]
 8004280:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade,"6C+");
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8004288:	4a52      	ldr	r2, [pc, #328]	; (80043d4 <problem_fetch+0x2d10>)
 800428a:	6810      	ldr	r0, [r2, #0]
 800428c:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	2207      	movs	r2, #7
 8004292:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,C,F,G,J,E,I");
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	33a4      	adds	r3, #164	; 0xa4
 8004298:	4a58      	ldr	r2, [pc, #352]	; (80043fc <problem_fetch+0x2d38>)
 800429a:	461c      	mov	r4, r3
 800429c:	4613      	mov	r3, r2
 800429e:	cb07      	ldmia	r3!, {r0, r1, r2}
 80042a0:	6020      	str	r0, [r4, #0]
 80042a2:	6061      	str	r1, [r4, #4]
 80042a4:	60a2      	str	r2, [r4, #8]
 80042a6:	881b      	ldrh	r3, [r3, #0]
 80042a8:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,8,11,14,7,16,18");
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	3304      	adds	r3, #4
 80042ae:	4a54      	ldr	r2, [pc, #336]	; (8004400 <problem_fetch+0x2d3c>)
 80042b0:	461d      	mov	r5, r3
 80042b2:	4614      	mov	r4, r2
 80042b4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80042b6:	6028      	str	r0, [r5, #0]
 80042b8:	6069      	str	r1, [r5, #4]
 80042ba:	60aa      	str	r2, [r5, #8]
 80042bc:	60eb      	str	r3, [r5, #12]
 80042be:	8823      	ldrh	r3, [r4, #0]
 80042c0:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 80042c8:	4a4e      	ldr	r2, [pc, #312]	; (8004404 <problem_fetch+0x2d40>)
 80042ca:	461c      	mov	r4, r3
 80042cc:	4613      	mov	r3, r2
 80042ce:	cb07      	ldmia	r3!, {r0, r1, r2}
 80042d0:	6020      	str	r0, [r4, #0]
 80042d2:	6061      	str	r1, [r4, #4]
 80042d4:	60a2      	str	r2, [r4, #8]
 80042d6:	881b      	ldrh	r3, [r3, #0]
 80042d8:	81a3      	strh	r3, [r4, #12]
			break;
 80042da:	f018 b923 	b.w	801c524 <problem_fetch+0x1ae60>
		case 61 :
			strcpy(p->name,"BOARDMEETING 3.0");
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80042e4:	4a48      	ldr	r2, [pc, #288]	; (8004408 <problem_fetch+0x2d44>)
 80042e6:	461d      	mov	r5, r3
 80042e8:	4614      	mov	r4, r2
 80042ea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80042ec:	6028      	str	r0, [r5, #0]
 80042ee:	6069      	str	r1, [r5, #4]
 80042f0:	60aa      	str	r2, [r5, #8]
 80042f2:	60eb      	str	r3, [r5, #12]
 80042f4:	7823      	ldrb	r3, [r4, #0]
 80042f6:	742b      	strb	r3, [r5, #16]
			strcpy(p->grade,"6C+");
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80042fe:	4a35      	ldr	r2, [pc, #212]	; (80043d4 <problem_fetch+0x2d10>)
 8004300:	6810      	ldr	r0, [r2, #0]
 8004302:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	2206      	movs	r2, #6
 8004308:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,H,H,G,H,D");
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	33a4      	adds	r3, #164	; 0xa4
 800430e:	4a3f      	ldr	r2, [pc, #252]	; (800440c <problem_fetch+0x2d48>)
 8004310:	461c      	mov	r4, r3
 8004312:	4613      	mov	r3, r2
 8004314:	cb07      	ldmia	r3!, {r0, r1, r2}
 8004316:	6020      	str	r0, [r4, #0]
 8004318:	6061      	str	r1, [r4, #4]
 800431a:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"6,5,10,14,16,18");
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	3304      	adds	r3, #4
 8004320:	4a3b      	ldr	r2, [pc, #236]	; (8004410 <problem_fetch+0x2d4c>)
 8004322:	461c      	mov	r4, r3
 8004324:	4615      	mov	r5, r2
 8004326:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004328:	6020      	str	r0, [r4, #0]
 800432a:	6061      	str	r1, [r4, #4]
 800432c:	60a2      	str	r2, [r4, #8]
 800432e:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,s,d,d,d,e");
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8004336:	4a25      	ldr	r2, [pc, #148]	; (80043cc <problem_fetch+0x2d08>)
 8004338:	461c      	mov	r4, r3
 800433a:	4613      	mov	r3, r2
 800433c:	cb07      	ldmia	r3!, {r0, r1, r2}
 800433e:	6020      	str	r0, [r4, #0]
 8004340:	6061      	str	r1, [r4, #4]
 8004342:	60a2      	str	r2, [r4, #8]
			break;
 8004344:	f018 b8ee 	b.w	801c524 <problem_fetch+0x1ae60>
		case 62 :
			strcpy(p->name,"CANIGAN");
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800434e:	4931      	ldr	r1, [pc, #196]	; (8004414 <problem_fetch+0x2d50>)
 8004350:	461a      	mov	r2, r3
 8004352:	460b      	mov	r3, r1
 8004354:	cb03      	ldmia	r3!, {r0, r1}
 8004356:	6010      	str	r0, [r2, #0]
 8004358:	6051      	str	r1, [r2, #4]
			strcpy(p->grade,"7A");
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8004360:	4a2d      	ldr	r2, [pc, #180]	; (8004418 <problem_fetch+0x2d54>)
 8004362:	8811      	ldrh	r1, [r2, #0]
 8004364:	7892      	ldrb	r2, [r2, #2]
 8004366:	8019      	strh	r1, [r3, #0]
 8004368:	709a      	strb	r2, [r3, #2]
			p->moveSize = 8;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	2208      	movs	r2, #8
 800436e:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,K,G,I,F,K,H,I");
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	33a4      	adds	r3, #164	; 0xa4
 8004374:	4a29      	ldr	r2, [pc, #164]	; (800441c <problem_fetch+0x2d58>)
 8004376:	461c      	mov	r4, r3
 8004378:	4615      	mov	r5, r2
 800437a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800437c:	6020      	str	r0, [r4, #0]
 800437e:	6061      	str	r1, [r4, #4]
 8004380:	60a2      	str	r2, [r4, #8]
 8004382:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,9,9,10,13,14,16,18");
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	3304      	adds	r3, #4
 8004388:	4a25      	ldr	r2, [pc, #148]	; (8004420 <problem_fetch+0x2d5c>)
 800438a:	461d      	mov	r5, r3
 800438c:	4614      	mov	r4, r2
 800438e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004390:	6028      	str	r0, [r5, #0]
 8004392:	6069      	str	r1, [r5, #4]
 8004394:	60aa      	str	r2, [r5, #8]
 8004396:	60eb      	str	r3, [r5, #12]
 8004398:	6820      	ldr	r0, [r4, #0]
 800439a:	6128      	str	r0, [r5, #16]
 800439c:	7923      	ldrb	r3, [r4, #4]
 800439e:	752b      	strb	r3, [r5, #20]
			strcpy(p->startFinish,"s,d,d,d,d,d,d,e");
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 80043a6:	4a1f      	ldr	r2, [pc, #124]	; (8004424 <problem_fetch+0x2d60>)
 80043a8:	461c      	mov	r4, r3
 80043aa:	4615      	mov	r5, r2
 80043ac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80043ae:	6020      	str	r0, [r4, #0]
 80043b0:	6061      	str	r1, [r4, #4]
 80043b2:	60a2      	str	r2, [r4, #8]
 80043b4:	60e3      	str	r3, [r4, #12]
			break;
 80043b6:	f018 b8b5 	b.w	801c524 <problem_fetch+0x1ae60>
 80043ba:	bf00      	nop
 80043bc:	08024410 	.word	0x08024410
 80043c0:	08023e60 	.word	0x08023e60
 80043c4:	08024428 	.word	0x08024428
 80043c8:	08024434 	.word	0x08024434
 80043cc:	08023834 	.word	0x08023834
 80043d0:	08024444 	.word	0x08024444
 80043d4:	080238ec 	.word	0x080238ec
 80043d8:	08024454 	.word	0x08024454
 80043dc:	08024464 	.word	0x08024464
 80043e0:	080238cc 	.word	0x080238cc
 80043e4:	08024478 	.word	0x08024478
 80043e8:	08023854 	.word	0x08023854
 80043ec:	08024488 	.word	0x08024488
 80043f0:	0802449c 	.word	0x0802449c
 80043f4:	08023ff4 	.word	0x08023ff4
 80043f8:	080244b4 	.word	0x080244b4
 80043fc:	080244c4 	.word	0x080244c4
 8004400:	080244d4 	.word	0x080244d4
 8004404:	080239dc 	.word	0x080239dc
 8004408:	080244e8 	.word	0x080244e8
 800440c:	080244fc 	.word	0x080244fc
 8004410:	08024508 	.word	0x08024508
 8004414:	08024518 	.word	0x08024518
 8004418:	08023814 	.word	0x08023814
 800441c:	08024520 	.word	0x08024520
 8004420:	08024530 	.word	0x08024530
 8004424:	08023a64 	.word	0x08023a64
		case 63 :
			strcpy(p->name,"KOKURYU");
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800442e:	49a6      	ldr	r1, [pc, #664]	; (80046c8 <problem_fetch+0x3004>)
 8004430:	461a      	mov	r2, r3
 8004432:	460b      	mov	r3, r1
 8004434:	cb03      	ldmia	r3!, {r0, r1}
 8004436:	6010      	str	r0, [r2, #0]
 8004438:	6051      	str	r1, [r2, #4]
			strcpy(p->grade,"6B+");
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8004440:	4aa2      	ldr	r2, [pc, #648]	; (80046cc <problem_fetch+0x3008>)
 8004442:	6810      	ldr	r0, [r2, #0]
 8004444:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	2207      	movs	r2, #7
 800444a:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,E,G,D,G,E,I");
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	33a4      	adds	r3, #164	; 0xa4
 8004450:	4a9f      	ldr	r2, [pc, #636]	; (80046d0 <problem_fetch+0x300c>)
 8004452:	461c      	mov	r4, r3
 8004454:	4613      	mov	r3, r2
 8004456:	cb07      	ldmia	r3!, {r0, r1, r2}
 8004458:	6020      	str	r0, [r4, #0]
 800445a:	6061      	str	r1, [r4, #4]
 800445c:	60a2      	str	r2, [r4, #8]
 800445e:	881b      	ldrh	r3, [r3, #0]
 8004460:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,6,9,11,14,16,18");
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	3304      	adds	r3, #4
 8004466:	4a9b      	ldr	r2, [pc, #620]	; (80046d4 <problem_fetch+0x3010>)
 8004468:	461d      	mov	r5, r3
 800446a:	4614      	mov	r4, r2
 800446c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800446e:	6028      	str	r0, [r5, #0]
 8004470:	6069      	str	r1, [r5, #4]
 8004472:	60aa      	str	r2, [r5, #8]
 8004474:	60eb      	str	r3, [r5, #12]
 8004476:	8823      	ldrh	r3, [r4, #0]
 8004478:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,s,d,d,d,d,e");
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8004480:	4a95      	ldr	r2, [pc, #596]	; (80046d8 <problem_fetch+0x3014>)
 8004482:	461c      	mov	r4, r3
 8004484:	4613      	mov	r3, r2
 8004486:	cb07      	ldmia	r3!, {r0, r1, r2}
 8004488:	6020      	str	r0, [r4, #0]
 800448a:	6061      	str	r1, [r4, #4]
 800448c:	60a2      	str	r2, [r4, #8]
 800448e:	881b      	ldrh	r3, [r3, #0]
 8004490:	81a3      	strh	r3, [r4, #12]
			break;
 8004492:	f018 b847 	b.w	801c524 <problem_fetch+0x1ae60>
		case 64 :
			strcpy(p->name,"V7 ANOS DE AEP");
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800449c:	4a8f      	ldr	r2, [pc, #572]	; (80046dc <problem_fetch+0x3018>)
 800449e:	461c      	mov	r4, r3
 80044a0:	4613      	mov	r3, r2
 80044a2:	cb07      	ldmia	r3!, {r0, r1, r2}
 80044a4:	6020      	str	r0, [r4, #0]
 80044a6:	6061      	str	r1, [r4, #4]
 80044a8:	60a2      	str	r2, [r4, #8]
 80044aa:	881a      	ldrh	r2, [r3, #0]
 80044ac:	789b      	ldrb	r3, [r3, #2]
 80044ae:	81a2      	strh	r2, [r4, #12]
 80044b0:	73a3      	strb	r3, [r4, #14]
			strcpy(p->grade,"7A+");
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80044b8:	4a89      	ldr	r2, [pc, #548]	; (80046e0 <problem_fetch+0x301c>)
 80044ba:	6810      	ldr	r0, [r2, #0]
 80044bc:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	2206      	movs	r2, #6
 80044c2:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,G,H,J,G,I");
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	33a4      	adds	r3, #164	; 0xa4
 80044c8:	4a86      	ldr	r2, [pc, #536]	; (80046e4 <problem_fetch+0x3020>)
 80044ca:	461c      	mov	r4, r3
 80044cc:	4613      	mov	r3, r2
 80044ce:	cb07      	ldmia	r3!, {r0, r1, r2}
 80044d0:	6020      	str	r0, [r4, #0]
 80044d2:	6061      	str	r1, [r4, #4]
 80044d4:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,9,8,12,15,18");
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	3304      	adds	r3, #4
 80044da:	4a83      	ldr	r2, [pc, #524]	; (80046e8 <problem_fetch+0x3024>)
 80044dc:	461c      	mov	r4, r3
 80044de:	4613      	mov	r3, r2
 80044e0:	cb07      	ldmia	r3!, {r0, r1, r2}
 80044e2:	6020      	str	r0, [r4, #0]
 80044e4:	6061      	str	r1, [r4, #4]
 80044e6:	60a2      	str	r2, [r4, #8]
 80044e8:	881a      	ldrh	r2, [r3, #0]
 80044ea:	789b      	ldrb	r3, [r3, #2]
 80044ec:	81a2      	strh	r2, [r4, #12]
 80044ee:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 80044f6:	4a7d      	ldr	r2, [pc, #500]	; (80046ec <problem_fetch+0x3028>)
 80044f8:	461c      	mov	r4, r3
 80044fa:	4613      	mov	r3, r2
 80044fc:	cb07      	ldmia	r3!, {r0, r1, r2}
 80044fe:	6020      	str	r0, [r4, #0]
 8004500:	6061      	str	r1, [r4, #4]
 8004502:	60a2      	str	r2, [r4, #8]
			break;
 8004504:	f018 b80e 	b.w	801c524 <problem_fetch+0x1ae60>
		case 65 :
			strcpy(p->name,"YURP");
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800450e:	4a78      	ldr	r2, [pc, #480]	; (80046f0 <problem_fetch+0x302c>)
 8004510:	6810      	ldr	r0, [r2, #0]
 8004512:	6018      	str	r0, [r3, #0]
 8004514:	7912      	ldrb	r2, [r2, #4]
 8004516:	711a      	strb	r2, [r3, #4]
			strcpy(p->grade,"6B+");
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800451e:	4a6b      	ldr	r2, [pc, #428]	; (80046cc <problem_fetch+0x3008>)
 8004520:	6810      	ldr	r0, [r2, #0]
 8004522:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	2206      	movs	r2, #6
 8004528:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,H,G,J,G,I");
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	33a4      	adds	r3, #164	; 0xa4
 800452e:	4a71      	ldr	r2, [pc, #452]	; (80046f4 <problem_fetch+0x3030>)
 8004530:	461c      	mov	r4, r3
 8004532:	4613      	mov	r3, r2
 8004534:	cb07      	ldmia	r3!, {r0, r1, r2}
 8004536:	6020      	str	r0, [r4, #0]
 8004538:	6061      	str	r1, [r4, #4]
 800453a:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,8,10,12,14,18");
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	3304      	adds	r3, #4
 8004540:	4a6d      	ldr	r2, [pc, #436]	; (80046f8 <problem_fetch+0x3034>)
 8004542:	461c      	mov	r4, r3
 8004544:	4615      	mov	r5, r2
 8004546:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004548:	6020      	str	r0, [r4, #0]
 800454a:	6061      	str	r1, [r4, #4]
 800454c:	60a2      	str	r2, [r4, #8]
 800454e:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8004556:	4a65      	ldr	r2, [pc, #404]	; (80046ec <problem_fetch+0x3028>)
 8004558:	461c      	mov	r4, r3
 800455a:	4613      	mov	r3, r2
 800455c:	cb07      	ldmia	r3!, {r0, r1, r2}
 800455e:	6020      	str	r0, [r4, #0]
 8004560:	6061      	str	r1, [r4, #4]
 8004562:	60a2      	str	r2, [r4, #8]
			break;
 8004564:	f017 bfde 	b.w	801c524 <problem_fetch+0x1ae60>
		case 66 :
			strcpy(p->name,"POALET");
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800456e:	4a63      	ldr	r2, [pc, #396]	; (80046fc <problem_fetch+0x3038>)
 8004570:	6810      	ldr	r0, [r2, #0]
 8004572:	6018      	str	r0, [r3, #0]
 8004574:	8891      	ldrh	r1, [r2, #4]
 8004576:	7992      	ldrb	r2, [r2, #6]
 8004578:	8099      	strh	r1, [r3, #4]
 800457a:	719a      	strb	r2, [r3, #6]
			strcpy(p->grade,"6C");
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8004582:	4a5f      	ldr	r2, [pc, #380]	; (8004700 <problem_fetch+0x303c>)
 8004584:	8811      	ldrh	r1, [r2, #0]
 8004586:	7892      	ldrb	r2, [r2, #2]
 8004588:	8019      	strh	r1, [r3, #0]
 800458a:	709a      	strb	r2, [r3, #2]
			p->moveSize = 7;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	2207      	movs	r2, #7
 8004590:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"H,D,I,E,I,J,G");
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	33a4      	adds	r3, #164	; 0xa4
 8004596:	4a5b      	ldr	r2, [pc, #364]	; (8004704 <problem_fetch+0x3040>)
 8004598:	461c      	mov	r4, r3
 800459a:	4613      	mov	r3, r2
 800459c:	cb07      	ldmia	r3!, {r0, r1, r2}
 800459e:	6020      	str	r0, [r4, #0]
 80045a0:	6061      	str	r1, [r4, #4]
 80045a2:	60a2      	str	r2, [r4, #8]
 80045a4:	881b      	ldrh	r3, [r3, #0]
 80045a6:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"10,11,14,16,18,7,6");
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	3304      	adds	r3, #4
 80045ac:	4a56      	ldr	r2, [pc, #344]	; (8004708 <problem_fetch+0x3044>)
 80045ae:	461d      	mov	r5, r3
 80045b0:	4614      	mov	r4, r2
 80045b2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80045b4:	6028      	str	r0, [r5, #0]
 80045b6:	6069      	str	r1, [r5, #4]
 80045b8:	60aa      	str	r2, [r5, #8]
 80045ba:	60eb      	str	r3, [r5, #12]
 80045bc:	8823      	ldrh	r3, [r4, #0]
 80045be:	78a2      	ldrb	r2, [r4, #2]
 80045c0:	822b      	strh	r3, [r5, #16]
 80045c2:	4613      	mov	r3, r2
 80045c4:	74ab      	strb	r3, [r5, #18]
			strcpy(p->startFinish,"d,d,d,d,e,d,s");
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 80045cc:	4a4f      	ldr	r2, [pc, #316]	; (800470c <problem_fetch+0x3048>)
 80045ce:	461c      	mov	r4, r3
 80045d0:	4613      	mov	r3, r2
 80045d2:	cb07      	ldmia	r3!, {r0, r1, r2}
 80045d4:	6020      	str	r0, [r4, #0]
 80045d6:	6061      	str	r1, [r4, #4]
 80045d8:	60a2      	str	r2, [r4, #8]
 80045da:	881b      	ldrh	r3, [r3, #0]
 80045dc:	81a3      	strh	r3, [r4, #12]
			break;
 80045de:	f017 bfa1 	b.w	801c524 <problem_fetch+0x1ae60>
		case 67 :
			strcpy(p->name,"TORCI SPALLA");
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80045e8:	4a49      	ldr	r2, [pc, #292]	; (8004710 <problem_fetch+0x304c>)
 80045ea:	461c      	mov	r4, r3
 80045ec:	4613      	mov	r3, r2
 80045ee:	cb07      	ldmia	r3!, {r0, r1, r2}
 80045f0:	6020      	str	r0, [r4, #0]
 80045f2:	6061      	str	r1, [r4, #4]
 80045f4:	60a2      	str	r2, [r4, #8]
 80045f6:	781b      	ldrb	r3, [r3, #0]
 80045f8:	7323      	strb	r3, [r4, #12]
			strcpy(p->grade,"7B+");
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8004600:	4a44      	ldr	r2, [pc, #272]	; (8004714 <problem_fetch+0x3050>)
 8004602:	6810      	ldr	r0, [r2, #0]
 8004604:	6018      	str	r0, [r3, #0]
			p->moveSize = 8;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	2208      	movs	r2, #8
 800460a:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"E,H,F,E,A,B,G,I");
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	33a4      	adds	r3, #164	; 0xa4
 8004610:	4a41      	ldr	r2, [pc, #260]	; (8004718 <problem_fetch+0x3054>)
 8004612:	461c      	mov	r4, r3
 8004614:	4615      	mov	r5, r2
 8004616:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004618:	6020      	str	r0, [r4, #0]
 800461a:	6061      	str	r1, [r4, #4]
 800461c:	60a2      	str	r2, [r4, #8]
 800461e:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"6,10,11,12,14,15,17,18");
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	3304      	adds	r3, #4
 8004624:	4a3d      	ldr	r2, [pc, #244]	; (800471c <problem_fetch+0x3058>)
 8004626:	461c      	mov	r4, r3
 8004628:	4615      	mov	r5, r2
 800462a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800462c:	6020      	str	r0, [r4, #0]
 800462e:	6061      	str	r1, [r4, #4]
 8004630:	60a2      	str	r2, [r4, #8]
 8004632:	60e3      	str	r3, [r4, #12]
 8004634:	6828      	ldr	r0, [r5, #0]
 8004636:	6120      	str	r0, [r4, #16]
 8004638:	88ab      	ldrh	r3, [r5, #4]
 800463a:	79aa      	ldrb	r2, [r5, #6]
 800463c:	82a3      	strh	r3, [r4, #20]
 800463e:	4613      	mov	r3, r2
 8004640:	75a3      	strb	r3, [r4, #22]
			strcpy(p->startFinish,"s,d,d,d,d,d,d,e");
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8004648:	4a35      	ldr	r2, [pc, #212]	; (8004720 <problem_fetch+0x305c>)
 800464a:	461c      	mov	r4, r3
 800464c:	4615      	mov	r5, r2
 800464e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004650:	6020      	str	r0, [r4, #0]
 8004652:	6061      	str	r1, [r4, #4]
 8004654:	60a2      	str	r2, [r4, #8]
 8004656:	60e3      	str	r3, [r4, #12]
			break;
 8004658:	f017 bf64 	b.w	801c524 <problem_fetch+0x1ae60>
		case 68 :
			strcpy(p->name,"INVERTIDOSO");
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8004662:	4a30      	ldr	r2, [pc, #192]	; (8004724 <problem_fetch+0x3060>)
 8004664:	461c      	mov	r4, r3
 8004666:	4613      	mov	r3, r2
 8004668:	cb07      	ldmia	r3!, {r0, r1, r2}
 800466a:	6020      	str	r0, [r4, #0]
 800466c:	6061      	str	r1, [r4, #4]
 800466e:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade,"7B");
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8004676:	4a2c      	ldr	r2, [pc, #176]	; (8004728 <problem_fetch+0x3064>)
 8004678:	8811      	ldrh	r1, [r2, #0]
 800467a:	7892      	ldrb	r2, [r2, #2]
 800467c:	8019      	strh	r1, [r3, #0]
 800467e:	709a      	strb	r2, [r3, #2]
			p->moveSize = 5;
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	2205      	movs	r2, #5
 8004684:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,C,I,F,I");
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	33a4      	adds	r3, #164	; 0xa4
 800468a:	4928      	ldr	r1, [pc, #160]	; (800472c <problem_fetch+0x3068>)
 800468c:	461a      	mov	r2, r3
 800468e:	460b      	mov	r3, r1
 8004690:	cb03      	ldmia	r3!, {r0, r1}
 8004692:	6010      	str	r0, [r2, #0]
 8004694:	6051      	str	r1, [r2, #4]
 8004696:	881b      	ldrh	r3, [r3, #0]
 8004698:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"4,8,9,13,18");
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	3304      	adds	r3, #4
 800469e:	4a24      	ldr	r2, [pc, #144]	; (8004730 <problem_fetch+0x306c>)
 80046a0:	461c      	mov	r4, r3
 80046a2:	4613      	mov	r3, r2
 80046a4:	cb07      	ldmia	r3!, {r0, r1, r2}
 80046a6:	6020      	str	r0, [r4, #0]
 80046a8:	6061      	str	r1, [r4, #4]
 80046aa:	60a2      	str	r2, [r4, #8]
			strcpy(p->startFinish,"s,d,d,d,e");
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 80046b2:	4920      	ldr	r1, [pc, #128]	; (8004734 <problem_fetch+0x3070>)
 80046b4:	461a      	mov	r2, r3
 80046b6:	460b      	mov	r3, r1
 80046b8:	cb03      	ldmia	r3!, {r0, r1}
 80046ba:	6010      	str	r0, [r2, #0]
 80046bc:	6051      	str	r1, [r2, #4]
 80046be:	881b      	ldrh	r3, [r3, #0]
 80046c0:	8113      	strh	r3, [r2, #8]
			break;
 80046c2:	f017 bf2f 	b.w	801c524 <problem_fetch+0x1ae60>
 80046c6:	bf00      	nop
 80046c8:	08024548 	.word	0x08024548
 80046cc:	08023854 	.word	0x08023854
 80046d0:	08024550 	.word	0x08024550
 80046d4:	08024560 	.word	0x08024560
 80046d8:	080238cc 	.word	0x080238cc
 80046dc:	08024574 	.word	0x08024574
 80046e0:	080239f4 	.word	0x080239f4
 80046e4:	08024584 	.word	0x08024584
 80046e8:	08024590 	.word	0x08024590
 80046ec:	08023bf0 	.word	0x08023bf0
 80046f0:	080245a0 	.word	0x080245a0
 80046f4:	080245a8 	.word	0x080245a8
 80046f8:	080245b4 	.word	0x080245b4
 80046fc:	080245c4 	.word	0x080245c4
 8004700:	08023920 	.word	0x08023920
 8004704:	080245cc 	.word	0x080245cc
 8004708:	080245dc 	.word	0x080245dc
 800470c:	080245f0 	.word	0x080245f0
 8004710:	08024600 	.word	0x08024600
 8004714:	08023990 	.word	0x08023990
 8004718:	08024610 	.word	0x08024610
 800471c:	08024620 	.word	0x08024620
 8004720:	08023a64 	.word	0x08023a64
 8004724:	08024638 	.word	0x08024638
 8004728:	08023f4c 	.word	0x08023f4c
 800472c:	08024644 	.word	0x08024644
 8004730:	08024650 	.word	0x08024650
 8004734:	08023d20 	.word	0x08023d20
		case 69 :
			strcpy(p->name,"BLACK BLOCK X");
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800473e:	4ac0      	ldr	r2, [pc, #768]	; (8004a40 <problem_fetch+0x337c>)
 8004740:	461c      	mov	r4, r3
 8004742:	4613      	mov	r3, r2
 8004744:	cb07      	ldmia	r3!, {r0, r1, r2}
 8004746:	6020      	str	r0, [r4, #0]
 8004748:	6061      	str	r1, [r4, #4]
 800474a:	60a2      	str	r2, [r4, #8]
 800474c:	881b      	ldrh	r3, [r3, #0]
 800474e:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade,"6C");
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8004756:	4abb      	ldr	r2, [pc, #748]	; (8004a44 <problem_fetch+0x3380>)
 8004758:	8811      	ldrh	r1, [r2, #0]
 800475a:	7892      	ldrb	r2, [r2, #2]
 800475c:	8019      	strh	r1, [r3, #0]
 800475e:	709a      	strb	r2, [r3, #2]
			p->moveSize = 8;
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	2208      	movs	r2, #8
 8004764:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,E,H,H,I,G,I,E");
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	33a4      	adds	r3, #164	; 0xa4
 800476a:	4ab7      	ldr	r2, [pc, #732]	; (8004a48 <problem_fetch+0x3384>)
 800476c:	461c      	mov	r4, r3
 800476e:	4615      	mov	r5, r2
 8004770:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004772:	6020      	str	r0, [r4, #0]
 8004774:	6061      	str	r1, [r4, #4]
 8004776:	60a2      	str	r2, [r4, #8]
 8004778:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,8,10,12,14,17,18,6");
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	3304      	adds	r3, #4
 800477e:	4ab3      	ldr	r2, [pc, #716]	; (8004a4c <problem_fetch+0x3388>)
 8004780:	461d      	mov	r5, r3
 8004782:	4614      	mov	r4, r2
 8004784:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004786:	6028      	str	r0, [r5, #0]
 8004788:	6069      	str	r1, [r5, #4]
 800478a:	60aa      	str	r2, [r5, #8]
 800478c:	60eb      	str	r3, [r5, #12]
 800478e:	6820      	ldr	r0, [r4, #0]
 8004790:	6128      	str	r0, [r5, #16]
 8004792:	7923      	ldrb	r3, [r4, #4]
 8004794:	752b      	strb	r3, [r5, #20]
			strcpy(p->startFinish,"s,d,d,d,d,d,e,s");
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800479c:	4aac      	ldr	r2, [pc, #688]	; (8004a50 <problem_fetch+0x338c>)
 800479e:	461c      	mov	r4, r3
 80047a0:	4615      	mov	r5, r2
 80047a2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80047a4:	6020      	str	r0, [r4, #0]
 80047a6:	6061      	str	r1, [r4, #4]
 80047a8:	60a2      	str	r2, [r4, #8]
 80047aa:	60e3      	str	r3, [r4, #12]
			break;
 80047ac:	f017 beba 	b.w	801c524 <problem_fetch+0x1ae60>
		case 70 :
			strcpy(p->name,"LADYBUG CLEAN");
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80047b6:	4aa7      	ldr	r2, [pc, #668]	; (8004a54 <problem_fetch+0x3390>)
 80047b8:	461c      	mov	r4, r3
 80047ba:	4613      	mov	r3, r2
 80047bc:	cb07      	ldmia	r3!, {r0, r1, r2}
 80047be:	6020      	str	r0, [r4, #0]
 80047c0:	6061      	str	r1, [r4, #4]
 80047c2:	60a2      	str	r2, [r4, #8]
 80047c4:	881b      	ldrh	r3, [r3, #0]
 80047c6:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade,"7A+");
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80047ce:	4aa2      	ldr	r2, [pc, #648]	; (8004a58 <problem_fetch+0x3394>)
 80047d0:	6810      	ldr	r0, [r2, #0]
 80047d2:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	2206      	movs	r2, #6
 80047d8:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,G,H,F,C,D");
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	33a4      	adds	r3, #164	; 0xa4
 80047de:	4a9f      	ldr	r2, [pc, #636]	; (8004a5c <problem_fetch+0x3398>)
 80047e0:	461c      	mov	r4, r3
 80047e2:	4613      	mov	r3, r2
 80047e4:	cb07      	ldmia	r3!, {r0, r1, r2}
 80047e6:	6020      	str	r0, [r4, #0]
 80047e8:	6061      	str	r1, [r4, #4]
 80047ea:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,6,10,11,13,18");
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	3304      	adds	r3, #4
 80047f0:	4a9b      	ldr	r2, [pc, #620]	; (8004a60 <problem_fetch+0x339c>)
 80047f2:	461c      	mov	r4, r3
 80047f4:	4615      	mov	r5, r2
 80047f6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80047f8:	6020      	str	r0, [r4, #0]
 80047fa:	6061      	str	r1, [r4, #4]
 80047fc:	60a2      	str	r2, [r4, #8]
 80047fe:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,s,d,d,d,e");
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8004806:	4a97      	ldr	r2, [pc, #604]	; (8004a64 <problem_fetch+0x33a0>)
 8004808:	461c      	mov	r4, r3
 800480a:	4613      	mov	r3, r2
 800480c:	cb07      	ldmia	r3!, {r0, r1, r2}
 800480e:	6020      	str	r0, [r4, #0]
 8004810:	6061      	str	r1, [r4, #4]
 8004812:	60a2      	str	r2, [r4, #8]
			break;
 8004814:	f017 be86 	b.w	801c524 <problem_fetch+0x1ae60>
		case 71 :
			strcpy(p->name,"POCKET FULL OF DREAMS");
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800481e:	4a92      	ldr	r2, [pc, #584]	; (8004a68 <problem_fetch+0x33a4>)
 8004820:	461d      	mov	r5, r3
 8004822:	4614      	mov	r4, r2
 8004824:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004826:	6028      	str	r0, [r5, #0]
 8004828:	6069      	str	r1, [r5, #4]
 800482a:	60aa      	str	r2, [r5, #8]
 800482c:	60eb      	str	r3, [r5, #12]
 800482e:	6820      	ldr	r0, [r4, #0]
 8004830:	6128      	str	r0, [r5, #16]
 8004832:	88a3      	ldrh	r3, [r4, #4]
 8004834:	82ab      	strh	r3, [r5, #20]
			strcpy(p->grade,"6B+");
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800483c:	4a8b      	ldr	r2, [pc, #556]	; (8004a6c <problem_fetch+0x33a8>)
 800483e:	6810      	ldr	r0, [r2, #0]
 8004840:	6018      	str	r0, [r3, #0]
			p->moveSize = 8;
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	2208      	movs	r2, #8
 8004846:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,E,E,B,B,A,E,D");
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	33a4      	adds	r3, #164	; 0xa4
 800484c:	4a88      	ldr	r2, [pc, #544]	; (8004a70 <problem_fetch+0x33ac>)
 800484e:	461c      	mov	r4, r3
 8004850:	4615      	mov	r5, r2
 8004852:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004854:	6020      	str	r0, [r4, #0]
 8004856:	6061      	str	r1, [r4, #4]
 8004858:	60a2      	str	r2, [r4, #8]
 800485a:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,8,9,10,12,14,14,18");
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	3304      	adds	r3, #4
 8004860:	4a84      	ldr	r2, [pc, #528]	; (8004a74 <problem_fetch+0x33b0>)
 8004862:	461d      	mov	r5, r3
 8004864:	4614      	mov	r4, r2
 8004866:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004868:	6028      	str	r0, [r5, #0]
 800486a:	6069      	str	r1, [r5, #4]
 800486c:	60aa      	str	r2, [r5, #8]
 800486e:	60eb      	str	r3, [r5, #12]
 8004870:	6820      	ldr	r0, [r4, #0]
 8004872:	6128      	str	r0, [r5, #16]
 8004874:	7923      	ldrb	r3, [r4, #4]
 8004876:	752b      	strb	r3, [r5, #20]
			strcpy(p->startFinish,"s,d,d,d,d,d,d,e");
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800487e:	4a7e      	ldr	r2, [pc, #504]	; (8004a78 <problem_fetch+0x33b4>)
 8004880:	461c      	mov	r4, r3
 8004882:	4615      	mov	r5, r2
 8004884:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004886:	6020      	str	r0, [r4, #0]
 8004888:	6061      	str	r1, [r4, #4]
 800488a:	60a2      	str	r2, [r4, #8]
 800488c:	60e3      	str	r3, [r4, #12]
			break;
 800488e:	f017 be49 	b.w	801c524 <problem_fetch+0x1ae60>
		case 72 :
			strcpy(p->name,"TAFFO");
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8004898:	4a78      	ldr	r2, [pc, #480]	; (8004a7c <problem_fetch+0x33b8>)
 800489a:	6810      	ldr	r0, [r2, #0]
 800489c:	6018      	str	r0, [r3, #0]
 800489e:	8892      	ldrh	r2, [r2, #4]
 80048a0:	809a      	strh	r2, [r3, #4]
			strcpy(p->grade,"6B+");
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80048a8:	4a70      	ldr	r2, [pc, #448]	; (8004a6c <problem_fetch+0x33a8>)
 80048aa:	6810      	ldr	r0, [r2, #0]
 80048ac:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	2206      	movs	r2, #6
 80048b2:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,G,C,C,D,A");
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	33a4      	adds	r3, #164	; 0xa4
 80048b8:	4a71      	ldr	r2, [pc, #452]	; (8004a80 <problem_fetch+0x33bc>)
 80048ba:	461c      	mov	r4, r3
 80048bc:	4613      	mov	r3, r2
 80048be:	cb07      	ldmia	r3!, {r0, r1, r2}
 80048c0:	6020      	str	r0, [r4, #0]
 80048c2:	6061      	str	r1, [r4, #4]
 80048c4:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,9,8,13,15,18");
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	3304      	adds	r3, #4
 80048ca:	4a6e      	ldr	r2, [pc, #440]	; (8004a84 <problem_fetch+0x33c0>)
 80048cc:	461c      	mov	r4, r3
 80048ce:	4613      	mov	r3, r2
 80048d0:	cb07      	ldmia	r3!, {r0, r1, r2}
 80048d2:	6020      	str	r0, [r4, #0]
 80048d4:	6061      	str	r1, [r4, #4]
 80048d6:	60a2      	str	r2, [r4, #8]
 80048d8:	881a      	ldrh	r2, [r3, #0]
 80048da:	789b      	ldrb	r3, [r3, #2]
 80048dc:	81a2      	strh	r2, [r4, #12]
 80048de:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 80048e6:	4a68      	ldr	r2, [pc, #416]	; (8004a88 <problem_fetch+0x33c4>)
 80048e8:	461c      	mov	r4, r3
 80048ea:	4613      	mov	r3, r2
 80048ec:	cb07      	ldmia	r3!, {r0, r1, r2}
 80048ee:	6020      	str	r0, [r4, #0]
 80048f0:	6061      	str	r1, [r4, #4]
 80048f2:	60a2      	str	r2, [r4, #8]
			break;
 80048f4:	f017 be16 	b.w	801c524 <problem_fetch+0x1ae60>
		case 73 :
			strcpy(p->name,"BLACK GECKO");
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80048fe:	4a63      	ldr	r2, [pc, #396]	; (8004a8c <problem_fetch+0x33c8>)
 8004900:	461c      	mov	r4, r3
 8004902:	4613      	mov	r3, r2
 8004904:	cb07      	ldmia	r3!, {r0, r1, r2}
 8004906:	6020      	str	r0, [r4, #0]
 8004908:	6061      	str	r1, [r4, #4]
 800490a:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade,"6C+");
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8004912:	4a5f      	ldr	r2, [pc, #380]	; (8004a90 <problem_fetch+0x33cc>)
 8004914:	6810      	ldr	r0, [r2, #0]
 8004916:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	2206      	movs	r2, #6
 800491c:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,E,H,C,E,D");
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	33a4      	adds	r3, #164	; 0xa4
 8004922:	4a5c      	ldr	r2, [pc, #368]	; (8004a94 <problem_fetch+0x33d0>)
 8004924:	461c      	mov	r4, r3
 8004926:	4613      	mov	r3, r2
 8004928:	cb07      	ldmia	r3!, {r0, r1, r2}
 800492a:	6020      	str	r0, [r4, #0]
 800492c:	6061      	str	r1, [r4, #4]
 800492e:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,6,10,13,14,18");
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	3304      	adds	r3, #4
 8004934:	4a58      	ldr	r2, [pc, #352]	; (8004a98 <problem_fetch+0x33d4>)
 8004936:	461c      	mov	r4, r3
 8004938:	4615      	mov	r5, r2
 800493a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800493c:	6020      	str	r0, [r4, #0]
 800493e:	6061      	str	r1, [r4, #4]
 8004940:	60a2      	str	r2, [r4, #8]
 8004942:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,s,d,d,d,e");
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800494a:	4a46      	ldr	r2, [pc, #280]	; (8004a64 <problem_fetch+0x33a0>)
 800494c:	461c      	mov	r4, r3
 800494e:	4613      	mov	r3, r2
 8004950:	cb07      	ldmia	r3!, {r0, r1, r2}
 8004952:	6020      	str	r0, [r4, #0]
 8004954:	6061      	str	r1, [r4, #4]
 8004956:	60a2      	str	r2, [r4, #8]
			break;
 8004958:	f017 bde4 	b.w	801c524 <problem_fetch+0x1ae60>
		case 74 :
			strcpy(p->name,"BREATHE");
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8004962:	494e      	ldr	r1, [pc, #312]	; (8004a9c <problem_fetch+0x33d8>)
 8004964:	461a      	mov	r2, r3
 8004966:	460b      	mov	r3, r1
 8004968:	cb03      	ldmia	r3!, {r0, r1}
 800496a:	6010      	str	r0, [r2, #0]
 800496c:	6051      	str	r1, [r2, #4]
			strcpy(p->grade,"7A");
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8004974:	4a4a      	ldr	r2, [pc, #296]	; (8004aa0 <problem_fetch+0x33dc>)
 8004976:	8811      	ldrh	r1, [r2, #0]
 8004978:	7892      	ldrb	r2, [r2, #2]
 800497a:	8019      	strh	r1, [r3, #0]
 800497c:	709a      	strb	r2, [r3, #2]
			p->moveSize = 10;
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	220a      	movs	r2, #10
 8004982:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"E,E,E,H,C,B,F,G,I,J");
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	33a4      	adds	r3, #164	; 0xa4
 8004988:	4a46      	ldr	r2, [pc, #280]	; (8004aa4 <problem_fetch+0x33e0>)
 800498a:	461d      	mov	r5, r3
 800498c:	4614      	mov	r4, r2
 800498e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004990:	6028      	str	r0, [r5, #0]
 8004992:	6069      	str	r1, [r5, #4]
 8004994:	60aa      	str	r2, [r5, #8]
 8004996:	60eb      	str	r3, [r5, #12]
 8004998:	6820      	ldr	r0, [r4, #0]
 800499a:	6128      	str	r0, [r5, #16]
			strcpy(p->moveNumbers,"8,9,12,5,5,6,13,15,18,12");
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	3304      	adds	r3, #4
 80049a0:	4a41      	ldr	r2, [pc, #260]	; (8004aa8 <problem_fetch+0x33e4>)
 80049a2:	461d      	mov	r5, r3
 80049a4:	4614      	mov	r4, r2
 80049a6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80049a8:	6028      	str	r0, [r5, #0]
 80049aa:	6069      	str	r1, [r5, #4]
 80049ac:	60aa      	str	r2, [r5, #8]
 80049ae:	60eb      	str	r3, [r5, #12]
 80049b0:	cc03      	ldmia	r4!, {r0, r1}
 80049b2:	6128      	str	r0, [r5, #16]
 80049b4:	6169      	str	r1, [r5, #20]
 80049b6:	7823      	ldrb	r3, [r4, #0]
 80049b8:	762b      	strb	r3, [r5, #24]
			strcpy(p->startFinish,"d,d,d,d,s,s,d,d,e,d");
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 80049c0:	4a3a      	ldr	r2, [pc, #232]	; (8004aac <problem_fetch+0x33e8>)
 80049c2:	461d      	mov	r5, r3
 80049c4:	4614      	mov	r4, r2
 80049c6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80049c8:	6028      	str	r0, [r5, #0]
 80049ca:	6069      	str	r1, [r5, #4]
 80049cc:	60aa      	str	r2, [r5, #8]
 80049ce:	60eb      	str	r3, [r5, #12]
 80049d0:	6820      	ldr	r0, [r4, #0]
 80049d2:	6128      	str	r0, [r5, #16]
			break;
 80049d4:	f017 bda6 	b.w	801c524 <problem_fetch+0x1ae60>
		case 75 :
			strcpy(p->name,"THE GRANARY");
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80049de:	4a34      	ldr	r2, [pc, #208]	; (8004ab0 <problem_fetch+0x33ec>)
 80049e0:	461c      	mov	r4, r3
 80049e2:	4613      	mov	r3, r2
 80049e4:	cb07      	ldmia	r3!, {r0, r1, r2}
 80049e6:	6020      	str	r0, [r4, #0]
 80049e8:	6061      	str	r1, [r4, #4]
 80049ea:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade,"7A");
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80049f2:	4a2b      	ldr	r2, [pc, #172]	; (8004aa0 <problem_fetch+0x33dc>)
 80049f4:	8811      	ldrh	r1, [r2, #0]
 80049f6:	7892      	ldrb	r2, [r2, #2]
 80049f8:	8019      	strh	r1, [r3, #0]
 80049fa:	709a      	strb	r2, [r3, #2]
			p->moveSize = 6;
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	2206      	movs	r2, #6
 8004a00:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,E,F,C,D,D");
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	33a4      	adds	r3, #164	; 0xa4
 8004a06:	4a2b      	ldr	r2, [pc, #172]	; (8004ab4 <problem_fetch+0x33f0>)
 8004a08:	461c      	mov	r4, r3
 8004a0a:	4613      	mov	r3, r2
 8004a0c:	cb07      	ldmia	r3!, {r0, r1, r2}
 8004a0e:	6020      	str	r0, [r4, #0]
 8004a10:	6061      	str	r1, [r4, #4]
 8004a12:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,6,11,13,15,18");
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	3304      	adds	r3, #4
 8004a18:	4a27      	ldr	r2, [pc, #156]	; (8004ab8 <problem_fetch+0x33f4>)
 8004a1a:	461c      	mov	r4, r3
 8004a1c:	4615      	mov	r5, r2
 8004a1e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004a20:	6020      	str	r0, [r4, #0]
 8004a22:	6061      	str	r1, [r4, #4]
 8004a24:	60a2      	str	r2, [r4, #8]
 8004a26:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,s,d,d,d,e");
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8004a2e:	4a0d      	ldr	r2, [pc, #52]	; (8004a64 <problem_fetch+0x33a0>)
 8004a30:	461c      	mov	r4, r3
 8004a32:	4613      	mov	r3, r2
 8004a34:	cb07      	ldmia	r3!, {r0, r1, r2}
 8004a36:	6020      	str	r0, [r4, #0]
 8004a38:	6061      	str	r1, [r4, #4]
 8004a3a:	60a2      	str	r2, [r4, #8]
			break;
 8004a3c:	f017 bd72 	b.w	801c524 <problem_fetch+0x1ae60>
 8004a40:	0802465c 	.word	0x0802465c
 8004a44:	08023920 	.word	0x08023920
 8004a48:	0802466c 	.word	0x0802466c
 8004a4c:	0802467c 	.word	0x0802467c
 8004a50:	08024694 	.word	0x08024694
 8004a54:	080246a4 	.word	0x080246a4
 8004a58:	080239f4 	.word	0x080239f4
 8004a5c:	080246b4 	.word	0x080246b4
 8004a60:	080246c0 	.word	0x080246c0
 8004a64:	08023834 	.word	0x08023834
 8004a68:	080246d0 	.word	0x080246d0
 8004a6c:	08023854 	.word	0x08023854
 8004a70:	080246e8 	.word	0x080246e8
 8004a74:	080246f8 	.word	0x080246f8
 8004a78:	08023a64 	.word	0x08023a64
 8004a7c:	08024710 	.word	0x08024710
 8004a80:	08024718 	.word	0x08024718
 8004a84:	08024724 	.word	0x08024724
 8004a88:	08023bf0 	.word	0x08023bf0
 8004a8c:	08024734 	.word	0x08024734
 8004a90:	080238ec 	.word	0x080238ec
 8004a94:	08024740 	.word	0x08024740
 8004a98:	0802474c 	.word	0x0802474c
 8004a9c:	0802475c 	.word	0x0802475c
 8004aa0:	08023814 	.word	0x08023814
 8004aa4:	08024764 	.word	0x08024764
 8004aa8:	08024778 	.word	0x08024778
 8004aac:	08024794 	.word	0x08024794
 8004ab0:	080247a8 	.word	0x080247a8
 8004ab4:	080247b4 	.word	0x080247b4
 8004ab8:	080247c0 	.word	0x080247c0
		case 76 :
			strcpy(p->name,"SMALL HOT 3 SPLENDA");
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8004ac2:	4aaf      	ldr	r2, [pc, #700]	; (8004d80 <problem_fetch+0x36bc>)
 8004ac4:	461d      	mov	r5, r3
 8004ac6:	4614      	mov	r4, r2
 8004ac8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004aca:	6028      	str	r0, [r5, #0]
 8004acc:	6069      	str	r1, [r5, #4]
 8004ace:	60aa      	str	r2, [r5, #8]
 8004ad0:	60eb      	str	r3, [r5, #12]
 8004ad2:	6820      	ldr	r0, [r4, #0]
 8004ad4:	6128      	str	r0, [r5, #16]
			strcpy(p->grade,"6B+");
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8004adc:	4aa9      	ldr	r2, [pc, #676]	; (8004d84 <problem_fetch+0x36c0>)
 8004ade:	6810      	ldr	r0, [r2, #0]
 8004ae0:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	2206      	movs	r2, #6
 8004ae6:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"E,H,D,I,E,D");
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	33a4      	adds	r3, #164	; 0xa4
 8004aec:	4aa6      	ldr	r2, [pc, #664]	; (8004d88 <problem_fetch+0x36c4>)
 8004aee:	461c      	mov	r4, r3
 8004af0:	4613      	mov	r3, r2
 8004af2:	cb07      	ldmia	r3!, {r0, r1, r2}
 8004af4:	6020      	str	r0, [r4, #0]
 8004af6:	6061      	str	r1, [r4, #4]
 8004af8:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"6,10,11,14,16,18");
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	3304      	adds	r3, #4
 8004afe:	4aa3      	ldr	r2, [pc, #652]	; (8004d8c <problem_fetch+0x36c8>)
 8004b00:	461d      	mov	r5, r3
 8004b02:	4614      	mov	r4, r2
 8004b04:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004b06:	6028      	str	r0, [r5, #0]
 8004b08:	6069      	str	r1, [r5, #4]
 8004b0a:	60aa      	str	r2, [r5, #8]
 8004b0c:	60eb      	str	r3, [r5, #12]
 8004b0e:	7823      	ldrb	r3, [r4, #0]
 8004b10:	742b      	strb	r3, [r5, #16]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8004b18:	4a9d      	ldr	r2, [pc, #628]	; (8004d90 <problem_fetch+0x36cc>)
 8004b1a:	461c      	mov	r4, r3
 8004b1c:	4613      	mov	r3, r2
 8004b1e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8004b20:	6020      	str	r0, [r4, #0]
 8004b22:	6061      	str	r1, [r4, #4]
 8004b24:	60a2      	str	r2, [r4, #8]
			break;
 8004b26:	f017 bcfd 	b.w	801c524 <problem_fetch+0x1ae60>
		case 77 :
			strcpy(p->name,"WALLABY");
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8004b30:	4998      	ldr	r1, [pc, #608]	; (8004d94 <problem_fetch+0x36d0>)
 8004b32:	461a      	mov	r2, r3
 8004b34:	460b      	mov	r3, r1
 8004b36:	cb03      	ldmia	r3!, {r0, r1}
 8004b38:	6010      	str	r0, [r2, #0]
 8004b3a:	6051      	str	r1, [r2, #4]
			strcpy(p->grade,"6C");
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8004b42:	4a95      	ldr	r2, [pc, #596]	; (8004d98 <problem_fetch+0x36d4>)
 8004b44:	8811      	ldrh	r1, [r2, #0]
 8004b46:	7892      	ldrb	r2, [r2, #2]
 8004b48:	8019      	strh	r1, [r3, #0]
 8004b4a:	709a      	strb	r2, [r3, #2]
			p->moveSize = 9;
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	2209      	movs	r2, #9
 8004b50:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"E,G,E,F,E,J,I,H,I");
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	33a4      	adds	r3, #164	; 0xa4
 8004b56:	4a91      	ldr	r2, [pc, #580]	; (8004d9c <problem_fetch+0x36d8>)
 8004b58:	461d      	mov	r5, r3
 8004b5a:	4614      	mov	r4, r2
 8004b5c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004b5e:	6028      	str	r0, [r5, #0]
 8004b60:	6069      	str	r1, [r5, #4]
 8004b62:	60aa      	str	r2, [r5, #8]
 8004b64:	60eb      	str	r3, [r5, #12]
 8004b66:	8823      	ldrh	r3, [r4, #0]
 8004b68:	822b      	strh	r3, [r5, #16]
			strcpy(p->moveNumbers,"6,6,8,11,12,7,14,16,18");
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	3304      	adds	r3, #4
 8004b6e:	4a8c      	ldr	r2, [pc, #560]	; (8004da0 <problem_fetch+0x36dc>)
 8004b70:	461c      	mov	r4, r3
 8004b72:	4615      	mov	r5, r2
 8004b74:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004b76:	6020      	str	r0, [r4, #0]
 8004b78:	6061      	str	r1, [r4, #4]
 8004b7a:	60a2      	str	r2, [r4, #8]
 8004b7c:	60e3      	str	r3, [r4, #12]
 8004b7e:	6828      	ldr	r0, [r5, #0]
 8004b80:	6120      	str	r0, [r4, #16]
 8004b82:	88ab      	ldrh	r3, [r5, #4]
 8004b84:	79aa      	ldrb	r2, [r5, #6]
 8004b86:	82a3      	strh	r3, [r4, #20]
 8004b88:	4613      	mov	r3, r2
 8004b8a:	75a3      	strb	r3, [r4, #22]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,d,e");
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8004b92:	4a84      	ldr	r2, [pc, #528]	; (8004da4 <problem_fetch+0x36e0>)
 8004b94:	461d      	mov	r5, r3
 8004b96:	4614      	mov	r4, r2
 8004b98:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004b9a:	6028      	str	r0, [r5, #0]
 8004b9c:	6069      	str	r1, [r5, #4]
 8004b9e:	60aa      	str	r2, [r5, #8]
 8004ba0:	60eb      	str	r3, [r5, #12]
 8004ba2:	8823      	ldrh	r3, [r4, #0]
 8004ba4:	822b      	strh	r3, [r5, #16]
			break;
 8004ba6:	f017 bcbd 	b.w	801c524 <problem_fetch+0x1ae60>
		case 78 :
			strcpy(p->name,"ESSEK");
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8004bb0:	4a7d      	ldr	r2, [pc, #500]	; (8004da8 <problem_fetch+0x36e4>)
 8004bb2:	6810      	ldr	r0, [r2, #0]
 8004bb4:	6018      	str	r0, [r3, #0]
 8004bb6:	8892      	ldrh	r2, [r2, #4]
 8004bb8:	809a      	strh	r2, [r3, #4]
			strcpy(p->grade,"6C+");
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8004bc0:	4a7a      	ldr	r2, [pc, #488]	; (8004dac <problem_fetch+0x36e8>)
 8004bc2:	6810      	ldr	r0, [r2, #0]
 8004bc4:	6018      	str	r0, [r3, #0]
			p->moveSize = 8;
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	2208      	movs	r2, #8
 8004bca:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,J,H,E,G,G,G,D");
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	33a4      	adds	r3, #164	; 0xa4
 8004bd0:	4a77      	ldr	r2, [pc, #476]	; (8004db0 <problem_fetch+0x36ec>)
 8004bd2:	461c      	mov	r4, r3
 8004bd4:	4615      	mov	r5, r2
 8004bd6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004bd8:	6020      	str	r0, [r4, #0]
 8004bda:	6061      	str	r1, [r4, #4]
 8004bdc:	60a2      	str	r2, [r4, #8]
 8004bde:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"6,5,10,12,14,15,17,18");
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	3304      	adds	r3, #4
 8004be4:	4a73      	ldr	r2, [pc, #460]	; (8004db4 <problem_fetch+0x36f0>)
 8004be6:	461d      	mov	r5, r3
 8004be8:	4614      	mov	r4, r2
 8004bea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004bec:	6028      	str	r0, [r5, #0]
 8004bee:	6069      	str	r1, [r5, #4]
 8004bf0:	60aa      	str	r2, [r5, #8]
 8004bf2:	60eb      	str	r3, [r5, #12]
 8004bf4:	6820      	ldr	r0, [r4, #0]
 8004bf6:	6128      	str	r0, [r5, #16]
 8004bf8:	88a3      	ldrh	r3, [r4, #4]
 8004bfa:	82ab      	strh	r3, [r5, #20]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,e");
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8004c02:	4a6d      	ldr	r2, [pc, #436]	; (8004db8 <problem_fetch+0x36f4>)
 8004c04:	461c      	mov	r4, r3
 8004c06:	4615      	mov	r5, r2
 8004c08:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004c0a:	6020      	str	r0, [r4, #0]
 8004c0c:	6061      	str	r1, [r4, #4]
 8004c0e:	60a2      	str	r2, [r4, #8]
 8004c10:	60e3      	str	r3, [r4, #12]
			break;
 8004c12:	f017 bc87 	b.w	801c524 <problem_fetch+0x1ae60>
		case 79 :
			strcpy(p->name,"BLACK MIRROR");
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8004c1c:	4a67      	ldr	r2, [pc, #412]	; (8004dbc <problem_fetch+0x36f8>)
 8004c1e:	461c      	mov	r4, r3
 8004c20:	4613      	mov	r3, r2
 8004c22:	cb07      	ldmia	r3!, {r0, r1, r2}
 8004c24:	6020      	str	r0, [r4, #0]
 8004c26:	6061      	str	r1, [r4, #4]
 8004c28:	60a2      	str	r2, [r4, #8]
 8004c2a:	781b      	ldrb	r3, [r3, #0]
 8004c2c:	7323      	strb	r3, [r4, #12]
			strcpy(p->grade,"7C");
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8004c34:	4a62      	ldr	r2, [pc, #392]	; (8004dc0 <problem_fetch+0x36fc>)
 8004c36:	8811      	ldrh	r1, [r2, #0]
 8004c38:	7892      	ldrb	r2, [r2, #2]
 8004c3a:	8019      	strh	r1, [r3, #0]
 8004c3c:	709a      	strb	r2, [r3, #2]
			p->moveSize = 8;
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	2208      	movs	r2, #8
 8004c42:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,H,I,F,E,D,G,I");
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	33a4      	adds	r3, #164	; 0xa4
 8004c48:	4a5e      	ldr	r2, [pc, #376]	; (8004dc4 <problem_fetch+0x3700>)
 8004c4a:	461c      	mov	r4, r3
 8004c4c:	4615      	mov	r5, r2
 8004c4e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004c50:	6020      	str	r0, [r4, #0]
 8004c52:	6061      	str	r1, [r4, #4]
 8004c54:	60a2      	str	r2, [r4, #8]
 8004c56:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,8,9,11,12,15,17,18");
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	3304      	adds	r3, #4
 8004c5c:	4a5a      	ldr	r2, [pc, #360]	; (8004dc8 <problem_fetch+0x3704>)
 8004c5e:	461d      	mov	r5, r3
 8004c60:	4614      	mov	r4, r2
 8004c62:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004c64:	6028      	str	r0, [r5, #0]
 8004c66:	6069      	str	r1, [r5, #4]
 8004c68:	60aa      	str	r2, [r5, #8]
 8004c6a:	60eb      	str	r3, [r5, #12]
 8004c6c:	6820      	ldr	r0, [r4, #0]
 8004c6e:	6128      	str	r0, [r5, #16]
 8004c70:	7923      	ldrb	r3, [r4, #4]
 8004c72:	752b      	strb	r3, [r5, #20]
			strcpy(p->startFinish,"s,d,d,d,d,d,d,e");
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8004c7a:	4a54      	ldr	r2, [pc, #336]	; (8004dcc <problem_fetch+0x3708>)
 8004c7c:	461c      	mov	r4, r3
 8004c7e:	4615      	mov	r5, r2
 8004c80:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004c82:	6020      	str	r0, [r4, #0]
 8004c84:	6061      	str	r1, [r4, #4]
 8004c86:	60a2      	str	r2, [r4, #8]
 8004c88:	60e3      	str	r3, [r4, #12]
			break;
 8004c8a:	f017 bc4b 	b.w	801c524 <problem_fetch+0x1ae60>
		case 80 :
			strcpy(p->name,"Z3GZAG");
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8004c94:	4a4e      	ldr	r2, [pc, #312]	; (8004dd0 <problem_fetch+0x370c>)
 8004c96:	6810      	ldr	r0, [r2, #0]
 8004c98:	6018      	str	r0, [r3, #0]
 8004c9a:	8891      	ldrh	r1, [r2, #4]
 8004c9c:	7992      	ldrb	r2, [r2, #6]
 8004c9e:	8099      	strh	r1, [r3, #4]
 8004ca0:	719a      	strb	r2, [r3, #6]
			strcpy(p->grade,"6B+");
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8004ca8:	4a36      	ldr	r2, [pc, #216]	; (8004d84 <problem_fetch+0x36c0>)
 8004caa:	6810      	ldr	r0, [r2, #0]
 8004cac:	6018      	str	r0, [r3, #0]
			p->moveSize = 9;
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	2209      	movs	r2, #9
 8004cb2:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,H,H,H,I,G,G,D,E");
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	33a4      	adds	r3, #164	; 0xa4
 8004cb8:	4a46      	ldr	r2, [pc, #280]	; (8004dd4 <problem_fetch+0x3710>)
 8004cba:	461d      	mov	r5, r3
 8004cbc:	4614      	mov	r4, r2
 8004cbe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004cc0:	6028      	str	r0, [r5, #0]
 8004cc2:	6069      	str	r1, [r5, #4]
 8004cc4:	60aa      	str	r2, [r5, #8]
 8004cc6:	60eb      	str	r3, [r5, #12]
 8004cc8:	8823      	ldrh	r3, [r4, #0]
 8004cca:	822b      	strh	r3, [r5, #16]
			strcpy(p->moveNumbers,"4,8,10,12,14,15,17,18,6");
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	3304      	adds	r3, #4
 8004cd0:	4a41      	ldr	r2, [pc, #260]	; (8004dd8 <problem_fetch+0x3714>)
 8004cd2:	461d      	mov	r5, r3
 8004cd4:	4614      	mov	r4, r2
 8004cd6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004cd8:	6028      	str	r0, [r5, #0]
 8004cda:	6069      	str	r1, [r5, #4]
 8004cdc:	60aa      	str	r2, [r5, #8]
 8004cde:	60eb      	str	r3, [r5, #12]
 8004ce0:	cc03      	ldmia	r4!, {r0, r1}
 8004ce2:	6128      	str	r0, [r5, #16]
 8004ce4:	6169      	str	r1, [r5, #20]
			strcpy(p->startFinish,"s,d,d,d,d,d,d,e,s");
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8004cec:	4a3b      	ldr	r2, [pc, #236]	; (8004ddc <problem_fetch+0x3718>)
 8004cee:	461d      	mov	r5, r3
 8004cf0:	4614      	mov	r4, r2
 8004cf2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004cf4:	6028      	str	r0, [r5, #0]
 8004cf6:	6069      	str	r1, [r5, #4]
 8004cf8:	60aa      	str	r2, [r5, #8]
 8004cfa:	60eb      	str	r3, [r5, #12]
 8004cfc:	8823      	ldrh	r3, [r4, #0]
 8004cfe:	822b      	strh	r3, [r5, #16]
			break;
 8004d00:	f017 bc10 	b.w	801c524 <problem_fetch+0x1ae60>
		case 81 :
			strcpy(p->name,"WHO NEEDS DR. GREG");
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8004d0a:	4a35      	ldr	r2, [pc, #212]	; (8004de0 <problem_fetch+0x371c>)
 8004d0c:	461d      	mov	r5, r3
 8004d0e:	4614      	mov	r4, r2
 8004d10:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004d12:	6028      	str	r0, [r5, #0]
 8004d14:	6069      	str	r1, [r5, #4]
 8004d16:	60aa      	str	r2, [r5, #8]
 8004d18:	60eb      	str	r3, [r5, #12]
 8004d1a:	8823      	ldrh	r3, [r4, #0]
 8004d1c:	78a2      	ldrb	r2, [r4, #2]
 8004d1e:	822b      	strh	r3, [r5, #16]
 8004d20:	4613      	mov	r3, r2
 8004d22:	74ab      	strb	r3, [r5, #18]
			strcpy(p->grade,"7A+");
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8004d2a:	4a2e      	ldr	r2, [pc, #184]	; (8004de4 <problem_fetch+0x3720>)
 8004d2c:	6810      	ldr	r0, [r2, #0]
 8004d2e:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	2207      	movs	r2, #7
 8004d34:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"E,J,E,D,G,H,D");
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	33a4      	adds	r3, #164	; 0xa4
 8004d3a:	4a2b      	ldr	r2, [pc, #172]	; (8004de8 <problem_fetch+0x3724>)
 8004d3c:	461c      	mov	r4, r3
 8004d3e:	4613      	mov	r3, r2
 8004d40:	cb07      	ldmia	r3!, {r0, r1, r2}
 8004d42:	6020      	str	r0, [r4, #0]
 8004d44:	6061      	str	r1, [r4, #4]
 8004d46:	60a2      	str	r2, [r4, #8]
 8004d48:	881b      	ldrh	r3, [r3, #0]
 8004d4a:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"6,5,14,18,9,12,11");
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	3304      	adds	r3, #4
 8004d50:	4a26      	ldr	r2, [pc, #152]	; (8004dec <problem_fetch+0x3728>)
 8004d52:	461d      	mov	r5, r3
 8004d54:	4614      	mov	r4, r2
 8004d56:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004d58:	6028      	str	r0, [r5, #0]
 8004d5a:	6069      	str	r1, [r5, #4]
 8004d5c:	60aa      	str	r2, [r5, #8]
 8004d5e:	60eb      	str	r3, [r5, #12]
 8004d60:	8823      	ldrh	r3, [r4, #0]
 8004d62:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,s,d,e,d,d,d");
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8004d6a:	4a21      	ldr	r2, [pc, #132]	; (8004df0 <problem_fetch+0x372c>)
 8004d6c:	461c      	mov	r4, r3
 8004d6e:	4613      	mov	r3, r2
 8004d70:	cb07      	ldmia	r3!, {r0, r1, r2}
 8004d72:	6020      	str	r0, [r4, #0]
 8004d74:	6061      	str	r1, [r4, #4]
 8004d76:	60a2      	str	r2, [r4, #8]
 8004d78:	881b      	ldrh	r3, [r3, #0]
 8004d7a:	81a3      	strh	r3, [r4, #12]
			break;
 8004d7c:	f017 bbd2 	b.w	801c524 <problem_fetch+0x1ae60>
 8004d80:	080247d0 	.word	0x080247d0
 8004d84:	08023854 	.word	0x08023854
 8004d88:	080247e4 	.word	0x080247e4
 8004d8c:	080247f0 	.word	0x080247f0
 8004d90:	08023bf0 	.word	0x08023bf0
 8004d94:	08024804 	.word	0x08024804
 8004d98:	08023920 	.word	0x08023920
 8004d9c:	0802480c 	.word	0x0802480c
 8004da0:	08024820 	.word	0x08024820
 8004da4:	08024838 	.word	0x08024838
 8004da8:	0802484c 	.word	0x0802484c
 8004dac:	080238ec 	.word	0x080238ec
 8004db0:	08024854 	.word	0x08024854
 8004db4:	08024864 	.word	0x08024864
 8004db8:	08023978 	.word	0x08023978
 8004dbc:	0802487c 	.word	0x0802487c
 8004dc0:	08024088 	.word	0x08024088
 8004dc4:	0802488c 	.word	0x0802488c
 8004dc8:	0802489c 	.word	0x0802489c
 8004dcc:	08023a64 	.word	0x08023a64
 8004dd0:	080248b4 	.word	0x080248b4
 8004dd4:	080248bc 	.word	0x080248bc
 8004dd8:	080248d0 	.word	0x080248d0
 8004ddc:	08023ff4 	.word	0x08023ff4
 8004de0:	080248e8 	.word	0x080248e8
 8004de4:	080239f4 	.word	0x080239f4
 8004de8:	080248fc 	.word	0x080248fc
 8004dec:	0802490c 	.word	0x0802490c
 8004df0:	08024920 	.word	0x08024920
		case 82 :
			strcpy(p->name,"BLACKTOP");
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8004dfa:	49af      	ldr	r1, [pc, #700]	; (80050b8 <problem_fetch+0x39f4>)
 8004dfc:	461a      	mov	r2, r3
 8004dfe:	460b      	mov	r3, r1
 8004e00:	cb03      	ldmia	r3!, {r0, r1}
 8004e02:	6010      	str	r0, [r2, #0]
 8004e04:	6051      	str	r1, [r2, #4]
 8004e06:	781b      	ldrb	r3, [r3, #0]
 8004e08:	7213      	strb	r3, [r2, #8]
			strcpy(p->grade,"7A");
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8004e10:	4aaa      	ldr	r2, [pc, #680]	; (80050bc <problem_fetch+0x39f8>)
 8004e12:	8811      	ldrh	r1, [r2, #0]
 8004e14:	7892      	ldrb	r2, [r2, #2]
 8004e16:	8019      	strh	r1, [r3, #0]
 8004e18:	709a      	strb	r2, [r3, #2]
			p->moveSize = 6;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	2206      	movs	r2, #6
 8004e1e:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,K,I,I,D,D");
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	33a4      	adds	r3, #164	; 0xa4
 8004e24:	4aa6      	ldr	r2, [pc, #664]	; (80050c0 <problem_fetch+0x39fc>)
 8004e26:	461c      	mov	r4, r3
 8004e28:	4613      	mov	r3, r2
 8004e2a:	cb07      	ldmia	r3!, {r0, r1, r2}
 8004e2c:	6020      	str	r0, [r4, #0]
 8004e2e:	6061      	str	r1, [r4, #4]
 8004e30:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,9,9,14,11,18");
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	3304      	adds	r3, #4
 8004e36:	4aa3      	ldr	r2, [pc, #652]	; (80050c4 <problem_fetch+0x3a00>)
 8004e38:	461c      	mov	r4, r3
 8004e3a:	4613      	mov	r3, r2
 8004e3c:	cb07      	ldmia	r3!, {r0, r1, r2}
 8004e3e:	6020      	str	r0, [r4, #0]
 8004e40:	6061      	str	r1, [r4, #4]
 8004e42:	60a2      	str	r2, [r4, #8]
 8004e44:	881a      	ldrh	r2, [r3, #0]
 8004e46:	789b      	ldrb	r3, [r3, #2]
 8004e48:	81a2      	strh	r2, [r4, #12]
 8004e4a:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8004e52:	4a9d      	ldr	r2, [pc, #628]	; (80050c8 <problem_fetch+0x3a04>)
 8004e54:	461c      	mov	r4, r3
 8004e56:	4613      	mov	r3, r2
 8004e58:	cb07      	ldmia	r3!, {r0, r1, r2}
 8004e5a:	6020      	str	r0, [r4, #0]
 8004e5c:	6061      	str	r1, [r4, #4]
 8004e5e:	60a2      	str	r2, [r4, #8]
			break;
 8004e60:	f017 bb60 	b.w	801c524 <problem_fetch+0x1ae60>
		case 83 :
			strcpy(p->name,"MURPHY STINKS");
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8004e6a:	4a98      	ldr	r2, [pc, #608]	; (80050cc <problem_fetch+0x3a08>)
 8004e6c:	461c      	mov	r4, r3
 8004e6e:	4613      	mov	r3, r2
 8004e70:	cb07      	ldmia	r3!, {r0, r1, r2}
 8004e72:	6020      	str	r0, [r4, #0]
 8004e74:	6061      	str	r1, [r4, #4]
 8004e76:	60a2      	str	r2, [r4, #8]
 8004e78:	881b      	ldrh	r3, [r3, #0]
 8004e7a:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade,"6B+");
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8004e82:	4a93      	ldr	r2, [pc, #588]	; (80050d0 <problem_fetch+0x3a0c>)
 8004e84:	6810      	ldr	r0, [r2, #0]
 8004e86:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	2207      	movs	r2, #7
 8004e8c:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"H,H,I,J,I,J,J");
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	33a4      	adds	r3, #164	; 0xa4
 8004e92:	4a90      	ldr	r2, [pc, #576]	; (80050d4 <problem_fetch+0x3a10>)
 8004e94:	461c      	mov	r4, r3
 8004e96:	4613      	mov	r3, r2
 8004e98:	cb07      	ldmia	r3!, {r0, r1, r2}
 8004e9a:	6020      	str	r0, [r4, #0]
 8004e9c:	6061      	str	r1, [r4, #4]
 8004e9e:	60a2      	str	r2, [r4, #8]
 8004ea0:	881b      	ldrh	r3, [r3, #0]
 8004ea2:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"8,10,14,12,18,7,5");
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	3304      	adds	r3, #4
 8004ea8:	4a8b      	ldr	r2, [pc, #556]	; (80050d8 <problem_fetch+0x3a14>)
 8004eaa:	461d      	mov	r5, r3
 8004eac:	4614      	mov	r4, r2
 8004eae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004eb0:	6028      	str	r0, [r5, #0]
 8004eb2:	6069      	str	r1, [r5, #4]
 8004eb4:	60aa      	str	r2, [r5, #8]
 8004eb6:	60eb      	str	r3, [r5, #12]
 8004eb8:	8823      	ldrh	r3, [r4, #0]
 8004eba:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"d,d,d,d,e,d,s");
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8004ec2:	4a86      	ldr	r2, [pc, #536]	; (80050dc <problem_fetch+0x3a18>)
 8004ec4:	461c      	mov	r4, r3
 8004ec6:	4613      	mov	r3, r2
 8004ec8:	cb07      	ldmia	r3!, {r0, r1, r2}
 8004eca:	6020      	str	r0, [r4, #0]
 8004ecc:	6061      	str	r1, [r4, #4]
 8004ece:	60a2      	str	r2, [r4, #8]
 8004ed0:	881b      	ldrh	r3, [r3, #0]
 8004ed2:	81a3      	strh	r3, [r4, #12]
			break;
 8004ed4:	f017 bb26 	b.w	801c524 <problem_fetch+0x1ae60>
		case 84 :
			strcpy(p->name,"BLACK HORSE");
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8004ede:	4a80      	ldr	r2, [pc, #512]	; (80050e0 <problem_fetch+0x3a1c>)
 8004ee0:	461c      	mov	r4, r3
 8004ee2:	4613      	mov	r3, r2
 8004ee4:	cb07      	ldmia	r3!, {r0, r1, r2}
 8004ee6:	6020      	str	r0, [r4, #0]
 8004ee8:	6061      	str	r1, [r4, #4]
 8004eea:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade,"6C+");
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8004ef2:	4a7c      	ldr	r2, [pc, #496]	; (80050e4 <problem_fetch+0x3a20>)
 8004ef4:	6810      	ldr	r0, [r2, #0]
 8004ef6:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	2207      	movs	r2, #7
 8004efc:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,K,H,D,E,A,I");
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	33a4      	adds	r3, #164	; 0xa4
 8004f02:	4a79      	ldr	r2, [pc, #484]	; (80050e8 <problem_fetch+0x3a24>)
 8004f04:	461c      	mov	r4, r3
 8004f06:	4613      	mov	r3, r2
 8004f08:	cb07      	ldmia	r3!, {r0, r1, r2}
 8004f0a:	6020      	str	r0, [r4, #0]
 8004f0c:	6061      	str	r1, [r4, #4]
 8004f0e:	60a2      	str	r2, [r4, #8]
 8004f10:	881b      	ldrh	r3, [r3, #0]
 8004f12:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,9,12,15,16,18,14");
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	3304      	adds	r3, #4
 8004f18:	4a74      	ldr	r2, [pc, #464]	; (80050ec <problem_fetch+0x3a28>)
 8004f1a:	461d      	mov	r5, r3
 8004f1c:	4614      	mov	r4, r2
 8004f1e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004f20:	6028      	str	r0, [r5, #0]
 8004f22:	6069      	str	r1, [r5, #4]
 8004f24:	60aa      	str	r2, [r5, #8]
 8004f26:	60eb      	str	r3, [r5, #12]
 8004f28:	8823      	ldrh	r3, [r4, #0]
 8004f2a:	78a2      	ldrb	r2, [r4, #2]
 8004f2c:	822b      	strh	r3, [r5, #16]
 8004f2e:	4613      	mov	r3, r2
 8004f30:	74ab      	strb	r3, [r5, #18]
			strcpy(p->startFinish,"s,d,d,d,d,e,d");
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8004f38:	4a6d      	ldr	r2, [pc, #436]	; (80050f0 <problem_fetch+0x3a2c>)
 8004f3a:	461c      	mov	r4, r3
 8004f3c:	4613      	mov	r3, r2
 8004f3e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8004f40:	6020      	str	r0, [r4, #0]
 8004f42:	6061      	str	r1, [r4, #4]
 8004f44:	60a2      	str	r2, [r4, #8]
 8004f46:	881b      	ldrh	r3, [r3, #0]
 8004f48:	81a3      	strh	r3, [r4, #12]
			break;
 8004f4a:	f017 baeb 	b.w	801c524 <problem_fetch+0x1ae60>
		case 85 :
			strcpy(p->name,"BLACK 1.1");
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8004f54:	4967      	ldr	r1, [pc, #412]	; (80050f4 <problem_fetch+0x3a30>)
 8004f56:	461a      	mov	r2, r3
 8004f58:	460b      	mov	r3, r1
 8004f5a:	cb03      	ldmia	r3!, {r0, r1}
 8004f5c:	6010      	str	r0, [r2, #0]
 8004f5e:	6051      	str	r1, [r2, #4]
 8004f60:	881b      	ldrh	r3, [r3, #0]
 8004f62:	8113      	strh	r3, [r2, #8]
			strcpy(p->grade,"7A");
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8004f6a:	4a54      	ldr	r2, [pc, #336]	; (80050bc <problem_fetch+0x39f8>)
 8004f6c:	8811      	ldrh	r1, [r2, #0]
 8004f6e:	7892      	ldrb	r2, [r2, #2]
 8004f70:	8019      	strh	r1, [r3, #0]
 8004f72:	709a      	strb	r2, [r3, #2]
			p->moveSize = 7;
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	2207      	movs	r2, #7
 8004f78:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,J,K,H,I,E,D");
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	33a4      	adds	r3, #164	; 0xa4
 8004f7e:	4a5e      	ldr	r2, [pc, #376]	; (80050f8 <problem_fetch+0x3a34>)
 8004f80:	461c      	mov	r4, r3
 8004f82:	4613      	mov	r3, r2
 8004f84:	cb07      	ldmia	r3!, {r0, r1, r2}
 8004f86:	6020      	str	r0, [r4, #0]
 8004f88:	6061      	str	r1, [r4, #4]
 8004f8a:	60a2      	str	r2, [r4, #8]
 8004f8c:	881b      	ldrh	r3, [r3, #0]
 8004f8e:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"6,5,9,12,14,14,18");
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	3304      	adds	r3, #4
 8004f94:	4a59      	ldr	r2, [pc, #356]	; (80050fc <problem_fetch+0x3a38>)
 8004f96:	461d      	mov	r5, r3
 8004f98:	4614      	mov	r4, r2
 8004f9a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004f9c:	6028      	str	r0, [r5, #0]
 8004f9e:	6069      	str	r1, [r5, #4]
 8004fa0:	60aa      	str	r2, [r5, #8]
 8004fa2:	60eb      	str	r3, [r5, #12]
 8004fa4:	8823      	ldrh	r3, [r4, #0]
 8004fa6:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,s,d,d,d,d,e");
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8004fae:	4a54      	ldr	r2, [pc, #336]	; (8005100 <problem_fetch+0x3a3c>)
 8004fb0:	461c      	mov	r4, r3
 8004fb2:	4613      	mov	r3, r2
 8004fb4:	cb07      	ldmia	r3!, {r0, r1, r2}
 8004fb6:	6020      	str	r0, [r4, #0]
 8004fb8:	6061      	str	r1, [r4, #4]
 8004fba:	60a2      	str	r2, [r4, #8]
 8004fbc:	881b      	ldrh	r3, [r3, #0]
 8004fbe:	81a3      	strh	r3, [r4, #12]
			break;
 8004fc0:	f017 bab0 	b.w	801c524 <problem_fetch+0x1ae60>
		case 86 :
			strcpy(p->name,"BLACK 1");
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8004fca:	494e      	ldr	r1, [pc, #312]	; (8005104 <problem_fetch+0x3a40>)
 8004fcc:	461a      	mov	r2, r3
 8004fce:	460b      	mov	r3, r1
 8004fd0:	cb03      	ldmia	r3!, {r0, r1}
 8004fd2:	6010      	str	r0, [r2, #0]
 8004fd4:	6051      	str	r1, [r2, #4]
			strcpy(p->grade,"6B+");
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8004fdc:	4a3c      	ldr	r2, [pc, #240]	; (80050d0 <problem_fetch+0x3a0c>)
 8004fde:	6810      	ldr	r0, [r2, #0]
 8004fe0:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	2207      	movs	r2, #7
 8004fe6:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"D,E,G,B,B,A,D");
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	33a4      	adds	r3, #164	; 0xa4
 8004fec:	4a46      	ldr	r2, [pc, #280]	; (8005108 <problem_fetch+0x3a44>)
 8004fee:	461c      	mov	r4, r3
 8004ff0:	4613      	mov	r3, r2
 8004ff2:	cb07      	ldmia	r3!, {r0, r1, r2}
 8004ff4:	6020      	str	r0, [r4, #0]
 8004ff6:	6061      	str	r1, [r4, #4]
 8004ff8:	60a2      	str	r2, [r4, #8]
 8004ffa:	881b      	ldrh	r3, [r3, #0]
 8004ffc:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"7,8,4,10,12,14,18");
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	3304      	adds	r3, #4
 8005002:	4a42      	ldr	r2, [pc, #264]	; (800510c <problem_fetch+0x3a48>)
 8005004:	461d      	mov	r5, r3
 8005006:	4614      	mov	r4, r2
 8005008:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800500a:	6028      	str	r0, [r5, #0]
 800500c:	6069      	str	r1, [r5, #4]
 800500e:	60aa      	str	r2, [r5, #8]
 8005010:	60eb      	str	r3, [r5, #12]
 8005012:	8823      	ldrh	r3, [r4, #0]
 8005014:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"d,d,s,d,d,d,e");
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800501c:	4a3c      	ldr	r2, [pc, #240]	; (8005110 <problem_fetch+0x3a4c>)
 800501e:	461c      	mov	r4, r3
 8005020:	4613      	mov	r3, r2
 8005022:	cb07      	ldmia	r3!, {r0, r1, r2}
 8005024:	6020      	str	r0, [r4, #0]
 8005026:	6061      	str	r1, [r4, #4]
 8005028:	60a2      	str	r2, [r4, #8]
 800502a:	881b      	ldrh	r3, [r3, #0]
 800502c:	81a3      	strh	r3, [r4, #12]
			break;
 800502e:	f017 ba79 	b.w	801c524 <problem_fetch+0x1ae60>
		case 87 :
			strcpy(p->name,"BLACKBOARD");
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8005038:	4936      	ldr	r1, [pc, #216]	; (8005114 <problem_fetch+0x3a50>)
 800503a:	461a      	mov	r2, r3
 800503c:	460b      	mov	r3, r1
 800503e:	cb03      	ldmia	r3!, {r0, r1}
 8005040:	6010      	str	r0, [r2, #0]
 8005042:	6051      	str	r1, [r2, #4]
 8005044:	8819      	ldrh	r1, [r3, #0]
 8005046:	789b      	ldrb	r3, [r3, #2]
 8005048:	8111      	strh	r1, [r2, #8]
 800504a:	7293      	strb	r3, [r2, #10]
			strcpy(p->grade,"7A");
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8005052:	4a1a      	ldr	r2, [pc, #104]	; (80050bc <problem_fetch+0x39f8>)
 8005054:	8811      	ldrh	r1, [r2, #0]
 8005056:	7892      	ldrb	r2, [r2, #2]
 8005058:	8019      	strh	r1, [r3, #0]
 800505a:	709a      	strb	r2, [r3, #2]
			p->moveSize = 10;
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	220a      	movs	r2, #10
 8005060:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"B,C,H,G,K,J,K,H,G,D");
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	33a4      	adds	r3, #164	; 0xa4
 8005066:	4a2c      	ldr	r2, [pc, #176]	; (8005118 <problem_fetch+0x3a54>)
 8005068:	461d      	mov	r5, r3
 800506a:	4614      	mov	r4, r2
 800506c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800506e:	6028      	str	r0, [r5, #0]
 8005070:	6069      	str	r1, [r5, #4]
 8005072:	60aa      	str	r2, [r5, #8]
 8005074:	60eb      	str	r3, [r5, #12]
 8005076:	6820      	ldr	r0, [r4, #0]
 8005078:	6128      	str	r0, [r5, #16]
			strcpy(p->moveNumbers,"6,5,5,6,9,13,16,16,17,18");
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	3304      	adds	r3, #4
 800507e:	4a27      	ldr	r2, [pc, #156]	; (800511c <problem_fetch+0x3a58>)
 8005080:	461d      	mov	r5, r3
 8005082:	4614      	mov	r4, r2
 8005084:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005086:	6028      	str	r0, [r5, #0]
 8005088:	6069      	str	r1, [r5, #4]
 800508a:	60aa      	str	r2, [r5, #8]
 800508c:	60eb      	str	r3, [r5, #12]
 800508e:	cc03      	ldmia	r4!, {r0, r1}
 8005090:	6128      	str	r0, [r5, #16]
 8005092:	6169      	str	r1, [r5, #20]
 8005094:	7823      	ldrb	r3, [r4, #0]
 8005096:	762b      	strb	r3, [r5, #24]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,d,d,e");
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800509e:	4a20      	ldr	r2, [pc, #128]	; (8005120 <problem_fetch+0x3a5c>)
 80050a0:	461d      	mov	r5, r3
 80050a2:	4614      	mov	r4, r2
 80050a4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80050a6:	6028      	str	r0, [r5, #0]
 80050a8:	6069      	str	r1, [r5, #4]
 80050aa:	60aa      	str	r2, [r5, #8]
 80050ac:	60eb      	str	r3, [r5, #12]
 80050ae:	6820      	ldr	r0, [r4, #0]
 80050b0:	6128      	str	r0, [r5, #16]
			break;
 80050b2:	f017 ba37 	b.w	801c524 <problem_fetch+0x1ae60>
 80050b6:	bf00      	nop
 80050b8:	08024930 	.word	0x08024930
 80050bc:	08023814 	.word	0x08023814
 80050c0:	0802493c 	.word	0x0802493c
 80050c4:	08024948 	.word	0x08024948
 80050c8:	08023bf0 	.word	0x08023bf0
 80050cc:	08024958 	.word	0x08024958
 80050d0:	08023854 	.word	0x08023854
 80050d4:	08024968 	.word	0x08024968
 80050d8:	08024978 	.word	0x08024978
 80050dc:	080245f0 	.word	0x080245f0
 80050e0:	0802498c 	.word	0x0802498c
 80050e4:	080238ec 	.word	0x080238ec
 80050e8:	08024998 	.word	0x08024998
 80050ec:	080249a8 	.word	0x080249a8
 80050f0:	080249bc 	.word	0x080249bc
 80050f4:	080249cc 	.word	0x080249cc
 80050f8:	080249d8 	.word	0x080249d8
 80050fc:	080249e8 	.word	0x080249e8
 8005100:	080238cc 	.word	0x080238cc
 8005104:	080249fc 	.word	0x080249fc
 8005108:	08024a04 	.word	0x08024a04
 800510c:	08024a14 	.word	0x08024a14
 8005110:	08024a28 	.word	0x08024a28
 8005114:	08024a38 	.word	0x08024a38
 8005118:	08024a44 	.word	0x08024a44
 800511c:	08024a58 	.word	0x08024a58
 8005120:	080240fc 	.word	0x080240fc
		case 88 :
			strcpy(p->name,"JA ICH BIN NOCH");
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800512a:	4aaa      	ldr	r2, [pc, #680]	; (80053d4 <problem_fetch+0x3d10>)
 800512c:	461c      	mov	r4, r3
 800512e:	4615      	mov	r5, r2
 8005130:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005132:	6020      	str	r0, [r4, #0]
 8005134:	6061      	str	r1, [r4, #4]
 8005136:	60a2      	str	r2, [r4, #8]
 8005138:	60e3      	str	r3, [r4, #12]
			strcpy(p->grade,"6B+");
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8005140:	4aa5      	ldr	r2, [pc, #660]	; (80053d8 <problem_fetch+0x3d14>)
 8005142:	6810      	ldr	r0, [r2, #0]
 8005144:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	2207      	movs	r2, #7
 800514a:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"H,E,G,E,E,E,I");
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	33a4      	adds	r3, #164	; 0xa4
 8005150:	4aa2      	ldr	r2, [pc, #648]	; (80053dc <problem_fetch+0x3d18>)
 8005152:	461c      	mov	r4, r3
 8005154:	4613      	mov	r3, r2
 8005156:	cb07      	ldmia	r3!, {r0, r1, r2}
 8005158:	6020      	str	r0, [r4, #0]
 800515a:	6061      	str	r1, [r4, #4]
 800515c:	60a2      	str	r2, [r4, #8]
 800515e:	881b      	ldrh	r3, [r3, #0]
 8005160:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,6,9,12,14,16,18");
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	3304      	adds	r3, #4
 8005166:	4a9e      	ldr	r2, [pc, #632]	; (80053e0 <problem_fetch+0x3d1c>)
 8005168:	461d      	mov	r5, r3
 800516a:	4614      	mov	r4, r2
 800516c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800516e:	6028      	str	r0, [r5, #0]
 8005170:	6069      	str	r1, [r5, #4]
 8005172:	60aa      	str	r2, [r5, #8]
 8005174:	60eb      	str	r3, [r5, #12]
 8005176:	8823      	ldrh	r3, [r4, #0]
 8005178:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,s,d,d,d,d,e");
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8005180:	4a98      	ldr	r2, [pc, #608]	; (80053e4 <problem_fetch+0x3d20>)
 8005182:	461c      	mov	r4, r3
 8005184:	4613      	mov	r3, r2
 8005186:	cb07      	ldmia	r3!, {r0, r1, r2}
 8005188:	6020      	str	r0, [r4, #0]
 800518a:	6061      	str	r1, [r4, #4]
 800518c:	60a2      	str	r2, [r4, #8]
 800518e:	881b      	ldrh	r3, [r3, #0]
 8005190:	81a3      	strh	r3, [r4, #12]
			break;
 8005192:	f017 b9c7 	b.w	801c524 <problem_fetch+0x1ae60>
		case 89 :
			strcpy(p->name,"GORILA");
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800519c:	4a92      	ldr	r2, [pc, #584]	; (80053e8 <problem_fetch+0x3d24>)
 800519e:	6810      	ldr	r0, [r2, #0]
 80051a0:	6018      	str	r0, [r3, #0]
 80051a2:	8891      	ldrh	r1, [r2, #4]
 80051a4:	7992      	ldrb	r2, [r2, #6]
 80051a6:	8099      	strh	r1, [r3, #4]
 80051a8:	719a      	strb	r2, [r3, #6]
			strcpy(p->grade,"7B");
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80051b0:	4a8e      	ldr	r2, [pc, #568]	; (80053ec <problem_fetch+0x3d28>)
 80051b2:	8811      	ldrh	r1, [r2, #0]
 80051b4:	7892      	ldrb	r2, [r2, #2]
 80051b6:	8019      	strh	r1, [r3, #0]
 80051b8:	709a      	strb	r2, [r3, #2]
			p->moveSize = 7;
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	2207      	movs	r2, #7
 80051be:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,J,G,F,C,E,D");
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	33a4      	adds	r3, #164	; 0xa4
 80051c4:	4a8a      	ldr	r2, [pc, #552]	; (80053f0 <problem_fetch+0x3d2c>)
 80051c6:	461c      	mov	r4, r3
 80051c8:	4613      	mov	r3, r2
 80051ca:	cb07      	ldmia	r3!, {r0, r1, r2}
 80051cc:	6020      	str	r0, [r4, #0]
 80051ce:	6061      	str	r1, [r4, #4]
 80051d0:	60a2      	str	r2, [r4, #8]
 80051d2:	881b      	ldrh	r3, [r3, #0]
 80051d4:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,7,10,11,13,14,18");
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	3304      	adds	r3, #4
 80051da:	4a86      	ldr	r2, [pc, #536]	; (80053f4 <problem_fetch+0x3d30>)
 80051dc:	461d      	mov	r5, r3
 80051de:	4614      	mov	r4, r2
 80051e0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80051e2:	6028      	str	r0, [r5, #0]
 80051e4:	6069      	str	r1, [r5, #4]
 80051e6:	60aa      	str	r2, [r5, #8]
 80051e8:	60eb      	str	r3, [r5, #12]
 80051ea:	8823      	ldrh	r3, [r4, #0]
 80051ec:	78a2      	ldrb	r2, [r4, #2]
 80051ee:	822b      	strh	r3, [r5, #16]
 80051f0:	4613      	mov	r3, r2
 80051f2:	74ab      	strb	r3, [r5, #18]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 80051fa:	4a7f      	ldr	r2, [pc, #508]	; (80053f8 <problem_fetch+0x3d34>)
 80051fc:	461c      	mov	r4, r3
 80051fe:	4613      	mov	r3, r2
 8005200:	cb07      	ldmia	r3!, {r0, r1, r2}
 8005202:	6020      	str	r0, [r4, #0]
 8005204:	6061      	str	r1, [r4, #4]
 8005206:	60a2      	str	r2, [r4, #8]
 8005208:	881b      	ldrh	r3, [r3, #0]
 800520a:	81a3      	strh	r3, [r4, #12]
			break;
 800520c:	f017 b98a 	b.w	801c524 <problem_fetch+0x1ae60>
		case 90 :
			strcpy(p->name,"URBAN WALL");
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8005216:	4979      	ldr	r1, [pc, #484]	; (80053fc <problem_fetch+0x3d38>)
 8005218:	461a      	mov	r2, r3
 800521a:	460b      	mov	r3, r1
 800521c:	cb03      	ldmia	r3!, {r0, r1}
 800521e:	6010      	str	r0, [r2, #0]
 8005220:	6051      	str	r1, [r2, #4]
 8005222:	8819      	ldrh	r1, [r3, #0]
 8005224:	789b      	ldrb	r3, [r3, #2]
 8005226:	8111      	strh	r1, [r2, #8]
 8005228:	7293      	strb	r3, [r2, #10]
			strcpy(p->grade,"6C");
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8005230:	4a73      	ldr	r2, [pc, #460]	; (8005400 <problem_fetch+0x3d3c>)
 8005232:	8811      	ldrh	r1, [r2, #0]
 8005234:	7892      	ldrb	r2, [r2, #2]
 8005236:	8019      	strh	r1, [r3, #0]
 8005238:	709a      	strb	r2, [r3, #2]
			p->moveSize = 6;
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	2206      	movs	r2, #6
 800523e:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,J,E,F,A,D");
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	33a4      	adds	r3, #164	; 0xa4
 8005244:	4a6f      	ldr	r2, [pc, #444]	; (8005404 <problem_fetch+0x3d40>)
 8005246:	461c      	mov	r4, r3
 8005248:	4613      	mov	r3, r2
 800524a:	cb07      	ldmia	r3!, {r0, r1, r2}
 800524c:	6020      	str	r0, [r4, #0]
 800524e:	6061      	str	r1, [r4, #4]
 8005250:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,5,8,11,14,18");
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	3304      	adds	r3, #4
 8005256:	4a6c      	ldr	r2, [pc, #432]	; (8005408 <problem_fetch+0x3d44>)
 8005258:	461c      	mov	r4, r3
 800525a:	4613      	mov	r3, r2
 800525c:	cb07      	ldmia	r3!, {r0, r1, r2}
 800525e:	6020      	str	r0, [r4, #0]
 8005260:	6061      	str	r1, [r4, #4]
 8005262:	60a2      	str	r2, [r4, #8]
 8005264:	881a      	ldrh	r2, [r3, #0]
 8005266:	789b      	ldrb	r3, [r3, #2]
 8005268:	81a2      	strh	r2, [r4, #12]
 800526a:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish,"s,s,d,d,d,e");
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8005272:	4a66      	ldr	r2, [pc, #408]	; (800540c <problem_fetch+0x3d48>)
 8005274:	461c      	mov	r4, r3
 8005276:	4613      	mov	r3, r2
 8005278:	cb07      	ldmia	r3!, {r0, r1, r2}
 800527a:	6020      	str	r0, [r4, #0]
 800527c:	6061      	str	r1, [r4, #4]
 800527e:	60a2      	str	r2, [r4, #8]
			break;
 8005280:	f017 b950 	b.w	801c524 <problem_fetch+0x1ae60>
		case 91 :
			strcpy(p->name,"BLACKER");
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800528a:	4961      	ldr	r1, [pc, #388]	; (8005410 <problem_fetch+0x3d4c>)
 800528c:	461a      	mov	r2, r3
 800528e:	460b      	mov	r3, r1
 8005290:	cb03      	ldmia	r3!, {r0, r1}
 8005292:	6010      	str	r0, [r2, #0]
 8005294:	6051      	str	r1, [r2, #4]
			strcpy(p->grade,"7A");
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800529c:	4a5d      	ldr	r2, [pc, #372]	; (8005414 <problem_fetch+0x3d50>)
 800529e:	8811      	ldrh	r1, [r2, #0]
 80052a0:	7892      	ldrb	r2, [r2, #2]
 80052a2:	8019      	strh	r1, [r3, #0]
 80052a4:	709a      	strb	r2, [r3, #2]
			p->moveSize = 6;
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	2206      	movs	r2, #6
 80052aa:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"H,G,H,C,H,D");
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	33a4      	adds	r3, #164	; 0xa4
 80052b0:	4a59      	ldr	r2, [pc, #356]	; (8005418 <problem_fetch+0x3d54>)
 80052b2:	461c      	mov	r4, r3
 80052b4:	4613      	mov	r3, r2
 80052b6:	cb07      	ldmia	r3!, {r0, r1, r2}
 80052b8:	6020      	str	r0, [r4, #0]
 80052ba:	6061      	str	r1, [r4, #4]
 80052bc:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,4,10,13,16,18");
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	3304      	adds	r3, #4
 80052c2:	4a56      	ldr	r2, [pc, #344]	; (800541c <problem_fetch+0x3d58>)
 80052c4:	461c      	mov	r4, r3
 80052c6:	4615      	mov	r5, r2
 80052c8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80052ca:	6020      	str	r0, [r4, #0]
 80052cc:	6061      	str	r1, [r4, #4]
 80052ce:	60a2      	str	r2, [r4, #8]
 80052d0:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,s,d,d,d,e");
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 80052d8:	4a4c      	ldr	r2, [pc, #304]	; (800540c <problem_fetch+0x3d48>)
 80052da:	461c      	mov	r4, r3
 80052dc:	4613      	mov	r3, r2
 80052de:	cb07      	ldmia	r3!, {r0, r1, r2}
 80052e0:	6020      	str	r0, [r4, #0]
 80052e2:	6061      	str	r1, [r4, #4]
 80052e4:	60a2      	str	r2, [r4, #8]
			break;
 80052e6:	f017 b91d 	b.w	801c524 <problem_fetch+0x1ae60>
		case 92 :
			strcpy(p->name,"DURANGO TANGO");
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80052f0:	4a4b      	ldr	r2, [pc, #300]	; (8005420 <problem_fetch+0x3d5c>)
 80052f2:	461c      	mov	r4, r3
 80052f4:	4613      	mov	r3, r2
 80052f6:	cb07      	ldmia	r3!, {r0, r1, r2}
 80052f8:	6020      	str	r0, [r4, #0]
 80052fa:	6061      	str	r1, [r4, #4]
 80052fc:	60a2      	str	r2, [r4, #8]
 80052fe:	881b      	ldrh	r3, [r3, #0]
 8005300:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade,"6C+");
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8005308:	4a46      	ldr	r2, [pc, #280]	; (8005424 <problem_fetch+0x3d60>)
 800530a:	6810      	ldr	r0, [r2, #0]
 800530c:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	2207      	movs	r2, #7
 8005312:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,H,E,E,G,H,I");
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	33a4      	adds	r3, #164	; 0xa4
 8005318:	4a43      	ldr	r2, [pc, #268]	; (8005428 <problem_fetch+0x3d64>)
 800531a:	461c      	mov	r4, r3
 800531c:	4613      	mov	r3, r2
 800531e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8005320:	6020      	str	r0, [r4, #0]
 8005322:	6061      	str	r1, [r4, #4]
 8005324:	60a2      	str	r2, [r4, #8]
 8005326:	881b      	ldrh	r3, [r3, #0]
 8005328:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,10,12,9,15,16,18");
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	3304      	adds	r3, #4
 800532e:	4a3f      	ldr	r2, [pc, #252]	; (800542c <problem_fetch+0x3d68>)
 8005330:	461d      	mov	r5, r3
 8005332:	4614      	mov	r4, r2
 8005334:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005336:	6028      	str	r0, [r5, #0]
 8005338:	6069      	str	r1, [r5, #4]
 800533a:	60aa      	str	r2, [r5, #8]
 800533c:	60eb      	str	r3, [r5, #12]
 800533e:	8823      	ldrh	r3, [r4, #0]
 8005340:	78a2      	ldrb	r2, [r4, #2]
 8005342:	822b      	strh	r3, [r5, #16]
 8005344:	4613      	mov	r3, r2
 8005346:	74ab      	strb	r3, [r5, #18]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800534e:	4a2a      	ldr	r2, [pc, #168]	; (80053f8 <problem_fetch+0x3d34>)
 8005350:	461c      	mov	r4, r3
 8005352:	4613      	mov	r3, r2
 8005354:	cb07      	ldmia	r3!, {r0, r1, r2}
 8005356:	6020      	str	r0, [r4, #0]
 8005358:	6061      	str	r1, [r4, #4]
 800535a:	60a2      	str	r2, [r4, #8]
 800535c:	881b      	ldrh	r3, [r3, #0]
 800535e:	81a3      	strh	r3, [r4, #12]
			break;
 8005360:	f017 b8e0 	b.w	801c524 <problem_fetch+0x1ae60>
		case 93 :
			strcpy(p->name,"DARK MAGIC");
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800536a:	4931      	ldr	r1, [pc, #196]	; (8005430 <problem_fetch+0x3d6c>)
 800536c:	461a      	mov	r2, r3
 800536e:	460b      	mov	r3, r1
 8005370:	cb03      	ldmia	r3!, {r0, r1}
 8005372:	6010      	str	r0, [r2, #0]
 8005374:	6051      	str	r1, [r2, #4]
 8005376:	8819      	ldrh	r1, [r3, #0]
 8005378:	789b      	ldrb	r3, [r3, #2]
 800537a:	8111      	strh	r1, [r2, #8]
 800537c:	7293      	strb	r3, [r2, #10]
			strcpy(p->grade,"7B+");
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8005384:	4a2b      	ldr	r2, [pc, #172]	; (8005434 <problem_fetch+0x3d70>)
 8005386:	6810      	ldr	r0, [r2, #0]
 8005388:	6018      	str	r0, [r3, #0]
			p->moveSize = 5;
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	2205      	movs	r2, #5
 800538e:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"C,C,G,E,I");
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	33a4      	adds	r3, #164	; 0xa4
 8005394:	4928      	ldr	r1, [pc, #160]	; (8005438 <problem_fetch+0x3d74>)
 8005396:	461a      	mov	r2, r3
 8005398:	460b      	mov	r3, r1
 800539a:	cb03      	ldmia	r3!, {r0, r1}
 800539c:	6010      	str	r0, [r2, #0]
 800539e:	6051      	str	r1, [r2, #4]
 80053a0:	881b      	ldrh	r3, [r3, #0]
 80053a2:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"5,8,10,14,18");
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	3304      	adds	r3, #4
 80053a8:	4a24      	ldr	r2, [pc, #144]	; (800543c <problem_fetch+0x3d78>)
 80053aa:	461c      	mov	r4, r3
 80053ac:	4613      	mov	r3, r2
 80053ae:	cb07      	ldmia	r3!, {r0, r1, r2}
 80053b0:	6020      	str	r0, [r4, #0]
 80053b2:	6061      	str	r1, [r4, #4]
 80053b4:	60a2      	str	r2, [r4, #8]
 80053b6:	781b      	ldrb	r3, [r3, #0]
 80053b8:	7323      	strb	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,e");
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 80053c0:	491f      	ldr	r1, [pc, #124]	; (8005440 <problem_fetch+0x3d7c>)
 80053c2:	461a      	mov	r2, r3
 80053c4:	460b      	mov	r3, r1
 80053c6:	cb03      	ldmia	r3!, {r0, r1}
 80053c8:	6010      	str	r0, [r2, #0]
 80053ca:	6051      	str	r1, [r2, #4]
 80053cc:	881b      	ldrh	r3, [r3, #0]
 80053ce:	8113      	strh	r3, [r2, #8]
			break;
 80053d0:	f017 b8a8 	b.w	801c524 <problem_fetch+0x1ae60>
 80053d4:	08024a74 	.word	0x08024a74
 80053d8:	08023854 	.word	0x08023854
 80053dc:	08024a84 	.word	0x08024a84
 80053e0:	08024a94 	.word	0x08024a94
 80053e4:	080238cc 	.word	0x080238cc
 80053e8:	08024aa8 	.word	0x08024aa8
 80053ec:	08023f4c 	.word	0x08023f4c
 80053f0:	08024ab0 	.word	0x08024ab0
 80053f4:	08024ac0 	.word	0x08024ac0
 80053f8:	080239dc 	.word	0x080239dc
 80053fc:	08024ad4 	.word	0x08024ad4
 8005400:	08023920 	.word	0x08023920
 8005404:	08024ae0 	.word	0x08024ae0
 8005408:	080238fc 	.word	0x080238fc
 800540c:	08023834 	.word	0x08023834
 8005410:	08024aec 	.word	0x08024aec
 8005414:	08023814 	.word	0x08023814
 8005418:	08024af4 	.word	0x08024af4
 800541c:	08024b00 	.word	0x08024b00
 8005420:	08024b10 	.word	0x08024b10
 8005424:	080238ec 	.word	0x080238ec
 8005428:	08024b20 	.word	0x08024b20
 800542c:	08024b30 	.word	0x08024b30
 8005430:	08024b44 	.word	0x08024b44
 8005434:	08023990 	.word	0x08023990
 8005438:	08024b50 	.word	0x08024b50
 800543c:	08024b5c 	.word	0x08024b5c
 8005440:	08023d20 	.word	0x08023d20
		case 94 :
			strcpy(p->name,"LITTLE DIDDY");
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800544a:	4ab0      	ldr	r2, [pc, #704]	; (800570c <problem_fetch+0x4048>)
 800544c:	461c      	mov	r4, r3
 800544e:	4613      	mov	r3, r2
 8005450:	cb07      	ldmia	r3!, {r0, r1, r2}
 8005452:	6020      	str	r0, [r4, #0]
 8005454:	6061      	str	r1, [r4, #4]
 8005456:	60a2      	str	r2, [r4, #8]
 8005458:	781b      	ldrb	r3, [r3, #0]
 800545a:	7323      	strb	r3, [r4, #12]
			strcpy(p->grade,"7B+");
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8005462:	4aab      	ldr	r2, [pc, #684]	; (8005710 <problem_fetch+0x404c>)
 8005464:	6810      	ldr	r0, [r2, #0]
 8005466:	6018      	str	r0, [r3, #0]
			p->moveSize = 10;
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	220a      	movs	r2, #10
 800546c:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"C,D,A,D,B,F,J,K,J,I");
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	33a4      	adds	r3, #164	; 0xa4
 8005472:	4aa8      	ldr	r2, [pc, #672]	; (8005714 <problem_fetch+0x4050>)
 8005474:	461d      	mov	r5, r3
 8005476:	4614      	mov	r4, r2
 8005478:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800547a:	6028      	str	r0, [r5, #0]
 800547c:	6069      	str	r1, [r5, #4]
 800547e:	60aa      	str	r2, [r5, #8]
 8005480:	60eb      	str	r3, [r5, #12]
 8005482:	6820      	ldr	r0, [r4, #0]
 8005484:	6128      	str	r0, [r5, #16]
			strcpy(p->moveNumbers,"5,7,9,11,12,13,12,9,16,18");
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	3304      	adds	r3, #4
 800548a:	4aa3      	ldr	r2, [pc, #652]	; (8005718 <problem_fetch+0x4054>)
 800548c:	461d      	mov	r5, r3
 800548e:	4614      	mov	r4, r2
 8005490:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005492:	6028      	str	r0, [r5, #0]
 8005494:	6069      	str	r1, [r5, #4]
 8005496:	60aa      	str	r2, [r5, #8]
 8005498:	60eb      	str	r3, [r5, #12]
 800549a:	cc03      	ldmia	r4!, {r0, r1}
 800549c:	6128      	str	r0, [r5, #16]
 800549e:	6169      	str	r1, [r5, #20]
 80054a0:	8823      	ldrh	r3, [r4, #0]
 80054a2:	832b      	strh	r3, [r5, #24]
			strcpy(p->startFinish,"s,d,d,d,d,d,d,d,d,e");
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 80054aa:	4a9c      	ldr	r2, [pc, #624]	; (800571c <problem_fetch+0x4058>)
 80054ac:	461d      	mov	r5, r3
 80054ae:	4614      	mov	r4, r2
 80054b0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80054b2:	6028      	str	r0, [r5, #0]
 80054b4:	6069      	str	r1, [r5, #4]
 80054b6:	60aa      	str	r2, [r5, #8]
 80054b8:	60eb      	str	r3, [r5, #12]
 80054ba:	6820      	ldr	r0, [r4, #0]
 80054bc:	6128      	str	r0, [r5, #16]
			break;
 80054be:	f017 b831 	b.w	801c524 <problem_fetch+0x1ae60>
		case 95 :
			strcpy(p->name,"MOMOGO");
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80054c8:	4a95      	ldr	r2, [pc, #596]	; (8005720 <problem_fetch+0x405c>)
 80054ca:	6810      	ldr	r0, [r2, #0]
 80054cc:	6018      	str	r0, [r3, #0]
 80054ce:	8891      	ldrh	r1, [r2, #4]
 80054d0:	7992      	ldrb	r2, [r2, #6]
 80054d2:	8099      	strh	r1, [r3, #4]
 80054d4:	719a      	strb	r2, [r3, #6]
			strcpy(p->grade,"6B+");
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80054dc:	4a91      	ldr	r2, [pc, #580]	; (8005724 <problem_fetch+0x4060>)
 80054de:	6810      	ldr	r0, [r2, #0]
 80054e0:	6018      	str	r0, [r3, #0]
			p->moveSize = 9;
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	2209      	movs	r2, #9
 80054e6:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,H,K,I,J,F,I,H,I");
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	33a4      	adds	r3, #164	; 0xa4
 80054ec:	4a8e      	ldr	r2, [pc, #568]	; (8005728 <problem_fetch+0x4064>)
 80054ee:	461d      	mov	r5, r3
 80054f0:	4614      	mov	r4, r2
 80054f2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80054f4:	6028      	str	r0, [r5, #0]
 80054f6:	6069      	str	r1, [r5, #4]
 80054f8:	60aa      	str	r2, [r5, #8]
 80054fa:	60eb      	str	r3, [r5, #12]
 80054fc:	8823      	ldrh	r3, [r4, #0]
 80054fe:	822b      	strh	r3, [r5, #16]
			strcpy(p->moveNumbers,"5,5,9,10,12,13,14,16,18");
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	3304      	adds	r3, #4
 8005504:	4a89      	ldr	r2, [pc, #548]	; (800572c <problem_fetch+0x4068>)
 8005506:	461d      	mov	r5, r3
 8005508:	4614      	mov	r4, r2
 800550a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800550c:	6028      	str	r0, [r5, #0]
 800550e:	6069      	str	r1, [r5, #4]
 8005510:	60aa      	str	r2, [r5, #8]
 8005512:	60eb      	str	r3, [r5, #12]
 8005514:	cc03      	ldmia	r4!, {r0, r1}
 8005516:	6128      	str	r0, [r5, #16]
 8005518:	6169      	str	r1, [r5, #20]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,d,e");
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8005520:	4a83      	ldr	r2, [pc, #524]	; (8005730 <problem_fetch+0x406c>)
 8005522:	461d      	mov	r5, r3
 8005524:	4614      	mov	r4, r2
 8005526:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005528:	6028      	str	r0, [r5, #0]
 800552a:	6069      	str	r1, [r5, #4]
 800552c:	60aa      	str	r2, [r5, #8]
 800552e:	60eb      	str	r3, [r5, #12]
 8005530:	8823      	ldrh	r3, [r4, #0]
 8005532:	822b      	strh	r3, [r5, #16]
			break;
 8005534:	f016 bff6 	b.w	801c524 <problem_fetch+0x1ae60>
		case 96 :
			strcpy(p->name,"COW FUNK");
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800553e:	497d      	ldr	r1, [pc, #500]	; (8005734 <problem_fetch+0x4070>)
 8005540:	461a      	mov	r2, r3
 8005542:	460b      	mov	r3, r1
 8005544:	cb03      	ldmia	r3!, {r0, r1}
 8005546:	6010      	str	r0, [r2, #0]
 8005548:	6051      	str	r1, [r2, #4]
 800554a:	781b      	ldrb	r3, [r3, #0]
 800554c:	7213      	strb	r3, [r2, #8]
			strcpy(p->grade,"6B+");
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8005554:	4a73      	ldr	r2, [pc, #460]	; (8005724 <problem_fetch+0x4060>)
 8005556:	6810      	ldr	r0, [r2, #0]
 8005558:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	2207      	movs	r2, #7
 800555e:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,E,E,A,E,A,D");
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	33a4      	adds	r3, #164	; 0xa4
 8005564:	4a74      	ldr	r2, [pc, #464]	; (8005738 <problem_fetch+0x4074>)
 8005566:	461c      	mov	r4, r3
 8005568:	4613      	mov	r3, r2
 800556a:	cb07      	ldmia	r3!, {r0, r1, r2}
 800556c:	6020      	str	r0, [r4, #0]
 800556e:	6061      	str	r1, [r4, #4]
 8005570:	60a2      	str	r2, [r4, #8]
 8005572:	881b      	ldrh	r3, [r3, #0]
 8005574:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,6,8,9,12,14,18");
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	3304      	adds	r3, #4
 800557a:	4a70      	ldr	r2, [pc, #448]	; (800573c <problem_fetch+0x4078>)
 800557c:	461d      	mov	r5, r3
 800557e:	4614      	mov	r4, r2
 8005580:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005582:	6028      	str	r0, [r5, #0]
 8005584:	6069      	str	r1, [r5, #4]
 8005586:	60aa      	str	r2, [r5, #8]
 8005588:	60eb      	str	r3, [r5, #12]
 800558a:	7823      	ldrb	r3, [r4, #0]
 800558c:	742b      	strb	r3, [r5, #16]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8005594:	4a6a      	ldr	r2, [pc, #424]	; (8005740 <problem_fetch+0x407c>)
 8005596:	461c      	mov	r4, r3
 8005598:	4613      	mov	r3, r2
 800559a:	cb07      	ldmia	r3!, {r0, r1, r2}
 800559c:	6020      	str	r0, [r4, #0]
 800559e:	6061      	str	r1, [r4, #4]
 80055a0:	60a2      	str	r2, [r4, #8]
 80055a2:	881b      	ldrh	r3, [r3, #0]
 80055a4:	81a3      	strh	r3, [r4, #12]
			break;
 80055a6:	f016 bfbd 	b.w	801c524 <problem_fetch+0x1ae60>
		case 97 :
			strcpy(p->name,"CERBERO");
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80055b0:	4964      	ldr	r1, [pc, #400]	; (8005744 <problem_fetch+0x4080>)
 80055b2:	461a      	mov	r2, r3
 80055b4:	460b      	mov	r3, r1
 80055b6:	cb03      	ldmia	r3!, {r0, r1}
 80055b8:	6010      	str	r0, [r2, #0]
 80055ba:	6051      	str	r1, [r2, #4]
			strcpy(p->grade,"7A");
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80055c2:	4a61      	ldr	r2, [pc, #388]	; (8005748 <problem_fetch+0x4084>)
 80055c4:	8811      	ldrh	r1, [r2, #0]
 80055c6:	7892      	ldrb	r2, [r2, #2]
 80055c8:	8019      	strh	r1, [r3, #0]
 80055ca:	709a      	strb	r2, [r3, #2]
			p->moveSize = 5;
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	2205      	movs	r2, #5
 80055d0:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,I,H,K,I");
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	33a4      	adds	r3, #164	; 0xa4
 80055d6:	495d      	ldr	r1, [pc, #372]	; (800574c <problem_fetch+0x4088>)
 80055d8:	461a      	mov	r2, r3
 80055da:	460b      	mov	r3, r1
 80055dc:	cb03      	ldmia	r3!, {r0, r1}
 80055de:	6010      	str	r0, [r2, #0]
 80055e0:	6051      	str	r1, [r2, #4]
 80055e2:	881b      	ldrh	r3, [r3, #0]
 80055e4:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"4,10,12,14,18");
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	3304      	adds	r3, #4
 80055ea:	4a59      	ldr	r2, [pc, #356]	; (8005750 <problem_fetch+0x408c>)
 80055ec:	461c      	mov	r4, r3
 80055ee:	4613      	mov	r3, r2
 80055f0:	cb07      	ldmia	r3!, {r0, r1, r2}
 80055f2:	6020      	str	r0, [r4, #0]
 80055f4:	6061      	str	r1, [r4, #4]
 80055f6:	60a2      	str	r2, [r4, #8]
 80055f8:	881b      	ldrh	r3, [r3, #0]
 80055fa:	81a3      	strh	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,e");
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8005602:	4954      	ldr	r1, [pc, #336]	; (8005754 <problem_fetch+0x4090>)
 8005604:	461a      	mov	r2, r3
 8005606:	460b      	mov	r3, r1
 8005608:	cb03      	ldmia	r3!, {r0, r1}
 800560a:	6010      	str	r0, [r2, #0]
 800560c:	6051      	str	r1, [r2, #4]
 800560e:	881b      	ldrh	r3, [r3, #0]
 8005610:	8113      	strh	r3, [r2, #8]
			break;
 8005612:	f016 bf87 	b.w	801c524 <problem_fetch+0x1ae60>
		case 98 :
			strcpy(p->name,"ZONED IN (H10 FOOT ONLY)");
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800561c:	4a4e      	ldr	r2, [pc, #312]	; (8005758 <problem_fetch+0x4094>)
 800561e:	461d      	mov	r5, r3
 8005620:	4614      	mov	r4, r2
 8005622:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005624:	6028      	str	r0, [r5, #0]
 8005626:	6069      	str	r1, [r5, #4]
 8005628:	60aa      	str	r2, [r5, #8]
 800562a:	60eb      	str	r3, [r5, #12]
 800562c:	cc03      	ldmia	r4!, {r0, r1}
 800562e:	6128      	str	r0, [r5, #16]
 8005630:	6169      	str	r1, [r5, #20]
 8005632:	7823      	ldrb	r3, [r4, #0]
 8005634:	762b      	strb	r3, [r5, #24]
			strcpy(p->grade,"6B+");
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800563c:	4a39      	ldr	r2, [pc, #228]	; (8005724 <problem_fetch+0x4060>)
 800563e:	6810      	ldr	r0, [r2, #0]
 8005640:	6018      	str	r0, [r3, #0]
			p->moveSize = 9;
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	2209      	movs	r2, #9
 8005646:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,E,H,H,C,F,C,E,D");
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	33a4      	adds	r3, #164	; 0xa4
 800564c:	4a43      	ldr	r2, [pc, #268]	; (800575c <problem_fetch+0x4098>)
 800564e:	461d      	mov	r5, r3
 8005650:	4614      	mov	r4, r2
 8005652:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005654:	6028      	str	r0, [r5, #0]
 8005656:	6069      	str	r1, [r5, #4]
 8005658:	60aa      	str	r2, [r5, #8]
 800565a:	60eb      	str	r3, [r5, #12]
 800565c:	8823      	ldrh	r3, [r4, #0]
 800565e:	822b      	strh	r3, [r5, #16]
			strcpy(p->moveNumbers,"4,6,8,10,8,11,13,16,18");
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	3304      	adds	r3, #4
 8005664:	4a3e      	ldr	r2, [pc, #248]	; (8005760 <problem_fetch+0x409c>)
 8005666:	461c      	mov	r4, r3
 8005668:	4615      	mov	r5, r2
 800566a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800566c:	6020      	str	r0, [r4, #0]
 800566e:	6061      	str	r1, [r4, #4]
 8005670:	60a2      	str	r2, [r4, #8]
 8005672:	60e3      	str	r3, [r4, #12]
 8005674:	6828      	ldr	r0, [r5, #0]
 8005676:	6120      	str	r0, [r4, #16]
 8005678:	88ab      	ldrh	r3, [r5, #4]
 800567a:	79aa      	ldrb	r2, [r5, #6]
 800567c:	82a3      	strh	r3, [r4, #20]
 800567e:	4613      	mov	r3, r2
 8005680:	75a3      	strb	r3, [r4, #22]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,d,e");
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8005688:	4a29      	ldr	r2, [pc, #164]	; (8005730 <problem_fetch+0x406c>)
 800568a:	461d      	mov	r5, r3
 800568c:	4614      	mov	r4, r2
 800568e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005690:	6028      	str	r0, [r5, #0]
 8005692:	6069      	str	r1, [r5, #4]
 8005694:	60aa      	str	r2, [r5, #8]
 8005696:	60eb      	str	r3, [r5, #12]
 8005698:	8823      	ldrh	r3, [r4, #0]
 800569a:	822b      	strh	r3, [r5, #16]
			break;
 800569c:	f016 bf42 	b.w	801c524 <problem_fetch+0x1ae60>
		case 99 :
			strcpy(p->name,"FLAPJACKS");
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80056a6:	492f      	ldr	r1, [pc, #188]	; (8005764 <problem_fetch+0x40a0>)
 80056a8:	461a      	mov	r2, r3
 80056aa:	460b      	mov	r3, r1
 80056ac:	cb03      	ldmia	r3!, {r0, r1}
 80056ae:	6010      	str	r0, [r2, #0]
 80056b0:	6051      	str	r1, [r2, #4]
 80056b2:	881b      	ldrh	r3, [r3, #0]
 80056b4:	8113      	strh	r3, [r2, #8]
			strcpy(p->grade,"6B+");
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80056bc:	4a19      	ldr	r2, [pc, #100]	; (8005724 <problem_fetch+0x4060>)
 80056be:	6810      	ldr	r0, [r2, #0]
 80056c0:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	2206      	movs	r2, #6
 80056c6:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,E,H,D,E,A");
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	33a4      	adds	r3, #164	; 0xa4
 80056cc:	4a26      	ldr	r2, [pc, #152]	; (8005768 <problem_fetch+0x40a4>)
 80056ce:	461c      	mov	r4, r3
 80056d0:	4613      	mov	r3, r2
 80056d2:	cb07      	ldmia	r3!, {r0, r1, r2}
 80056d4:	6020      	str	r0, [r4, #0]
 80056d6:	6061      	str	r1, [r4, #4]
 80056d8:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,6,8,11,14,18");
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	3304      	adds	r3, #4
 80056de:	4a23      	ldr	r2, [pc, #140]	; (800576c <problem_fetch+0x40a8>)
 80056e0:	461c      	mov	r4, r3
 80056e2:	4613      	mov	r3, r2
 80056e4:	cb07      	ldmia	r3!, {r0, r1, r2}
 80056e6:	6020      	str	r0, [r4, #0]
 80056e8:	6061      	str	r1, [r4, #4]
 80056ea:	60a2      	str	r2, [r4, #8]
 80056ec:	881a      	ldrh	r2, [r3, #0]
 80056ee:	789b      	ldrb	r3, [r3, #2]
 80056f0:	81a2      	strh	r2, [r4, #12]
 80056f2:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish,"s,s,d,d,d,e");
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 80056fa:	4a1d      	ldr	r2, [pc, #116]	; (8005770 <problem_fetch+0x40ac>)
 80056fc:	461c      	mov	r4, r3
 80056fe:	4613      	mov	r3, r2
 8005700:	cb07      	ldmia	r3!, {r0, r1, r2}
 8005702:	6020      	str	r0, [r4, #0]
 8005704:	6061      	str	r1, [r4, #4]
 8005706:	60a2      	str	r2, [r4, #8]
			break;
 8005708:	f016 bf0c 	b.w	801c524 <problem_fetch+0x1ae60>
 800570c:	08024b6c 	.word	0x08024b6c
 8005710:	08023990 	.word	0x08023990
 8005714:	08024b7c 	.word	0x08024b7c
 8005718:	08024b90 	.word	0x08024b90
 800571c:	08024bac 	.word	0x08024bac
 8005720:	08024bc0 	.word	0x08024bc0
 8005724:	08023854 	.word	0x08023854
 8005728:	08024bc8 	.word	0x08024bc8
 800572c:	08024bdc 	.word	0x08024bdc
 8005730:	08024838 	.word	0x08024838
 8005734:	08024bf4 	.word	0x08024bf4
 8005738:	08024c00 	.word	0x08024c00
 800573c:	08024c10 	.word	0x08024c10
 8005740:	080239dc 	.word	0x080239dc
 8005744:	08024c24 	.word	0x08024c24
 8005748:	08023814 	.word	0x08023814
 800574c:	08024c2c 	.word	0x08024c2c
 8005750:	08024c38 	.word	0x08024c38
 8005754:	08023d20 	.word	0x08023d20
 8005758:	08024c48 	.word	0x08024c48
 800575c:	08024c64 	.word	0x08024c64
 8005760:	08024c78 	.word	0x08024c78
 8005764:	08024c90 	.word	0x08024c90
 8005768:	08024c9c 	.word	0x08024c9c
 800576c:	08024ca8 	.word	0x08024ca8
 8005770:	08023834 	.word	0x08023834
		case 100 :
			strcpy(p->name,"TESTJ");
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800577a:	4abd      	ldr	r2, [pc, #756]	; (8005a70 <problem_fetch+0x43ac>)
 800577c:	6810      	ldr	r0, [r2, #0]
 800577e:	6018      	str	r0, [r3, #0]
 8005780:	8892      	ldrh	r2, [r2, #4]
 8005782:	809a      	strh	r2, [r3, #4]
			strcpy(p->grade,"6B+");
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800578a:	4aba      	ldr	r2, [pc, #744]	; (8005a74 <problem_fetch+0x43b0>)
 800578c:	6810      	ldr	r0, [r2, #0]
 800578e:	6018      	str	r0, [r3, #0]
			p->moveSize = 9;
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	2209      	movs	r2, #9
 8005794:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,J,H,F,H,E,G,D,A");
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	33a4      	adds	r3, #164	; 0xa4
 800579a:	4ab7      	ldr	r2, [pc, #732]	; (8005a78 <problem_fetch+0x43b4>)
 800579c:	461d      	mov	r5, r3
 800579e:	4614      	mov	r4, r2
 80057a0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80057a2:	6028      	str	r0, [r5, #0]
 80057a4:	6069      	str	r1, [r5, #4]
 80057a6:	60aa      	str	r2, [r5, #8]
 80057a8:	60eb      	str	r3, [r5, #12]
 80057aa:	8823      	ldrh	r3, [r4, #0]
 80057ac:	822b      	strh	r3, [r5, #16]
			strcpy(p->moveNumbers,"4,5,8,11,13,14,17,18,14");
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	3304      	adds	r3, #4
 80057b2:	4ab2      	ldr	r2, [pc, #712]	; (8005a7c <problem_fetch+0x43b8>)
 80057b4:	461d      	mov	r5, r3
 80057b6:	4614      	mov	r4, r2
 80057b8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80057ba:	6028      	str	r0, [r5, #0]
 80057bc:	6069      	str	r1, [r5, #4]
 80057be:	60aa      	str	r2, [r5, #8]
 80057c0:	60eb      	str	r3, [r5, #12]
 80057c2:	cc03      	ldmia	r4!, {r0, r1}
 80057c4:	6128      	str	r0, [r5, #16]
 80057c6:	6169      	str	r1, [r5, #20]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,e,d");
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 80057ce:	4aac      	ldr	r2, [pc, #688]	; (8005a80 <problem_fetch+0x43bc>)
 80057d0:	461d      	mov	r5, r3
 80057d2:	4614      	mov	r4, r2
 80057d4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80057d6:	6028      	str	r0, [r5, #0]
 80057d8:	6069      	str	r1, [r5, #4]
 80057da:	60aa      	str	r2, [r5, #8]
 80057dc:	60eb      	str	r3, [r5, #12]
 80057de:	8823      	ldrh	r3, [r4, #0]
 80057e0:	822b      	strh	r3, [r5, #16]
			break;
 80057e2:	f016 be9f 	b.w	801c524 <problem_fetch+0x1ae60>
		case 101 :
			strcpy(p->name,"MISSILE");
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80057ec:	49a5      	ldr	r1, [pc, #660]	; (8005a84 <problem_fetch+0x43c0>)
 80057ee:	461a      	mov	r2, r3
 80057f0:	460b      	mov	r3, r1
 80057f2:	cb03      	ldmia	r3!, {r0, r1}
 80057f4:	6010      	str	r0, [r2, #0]
 80057f6:	6051      	str	r1, [r2, #4]
			strcpy(p->grade,"7A");
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80057fe:	4aa2      	ldr	r2, [pc, #648]	; (8005a88 <problem_fetch+0x43c4>)
 8005800:	8811      	ldrh	r1, [r2, #0]
 8005802:	7892      	ldrb	r2, [r2, #2]
 8005804:	8019      	strh	r1, [r3, #0]
 8005806:	709a      	strb	r2, [r3, #2]
			p->moveSize = 7;
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	2207      	movs	r2, #7
 800580c:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,E,G,B,E,C,D");
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	33a4      	adds	r3, #164	; 0xa4
 8005812:	4a9e      	ldr	r2, [pc, #632]	; (8005a8c <problem_fetch+0x43c8>)
 8005814:	461c      	mov	r4, r3
 8005816:	4613      	mov	r3, r2
 8005818:	cb07      	ldmia	r3!, {r0, r1, r2}
 800581a:	6020      	str	r0, [r4, #0]
 800581c:	6061      	str	r1, [r4, #4]
 800581e:	60a2      	str	r2, [r4, #8]
 8005820:	881b      	ldrh	r3, [r3, #0]
 8005822:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,6,9,10,12,13,18");
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	3304      	adds	r3, #4
 8005828:	4a99      	ldr	r2, [pc, #612]	; (8005a90 <problem_fetch+0x43cc>)
 800582a:	461d      	mov	r5, r3
 800582c:	4614      	mov	r4, r2
 800582e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005830:	6028      	str	r0, [r5, #0]
 8005832:	6069      	str	r1, [r5, #4]
 8005834:	60aa      	str	r2, [r5, #8]
 8005836:	60eb      	str	r3, [r5, #12]
 8005838:	8823      	ldrh	r3, [r4, #0]
 800583a:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8005842:	4a94      	ldr	r2, [pc, #592]	; (8005a94 <problem_fetch+0x43d0>)
 8005844:	461c      	mov	r4, r3
 8005846:	4613      	mov	r3, r2
 8005848:	cb07      	ldmia	r3!, {r0, r1, r2}
 800584a:	6020      	str	r0, [r4, #0]
 800584c:	6061      	str	r1, [r4, #4]
 800584e:	60a2      	str	r2, [r4, #8]
 8005850:	881b      	ldrh	r3, [r3, #0]
 8005852:	81a3      	strh	r3, [r4, #12]
			break;
 8005854:	f016 be66 	b.w	801c524 <problem_fetch+0x1ae60>
		case 102 :
			strcpy(p->name,"MOFOS");
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800585e:	4a8e      	ldr	r2, [pc, #568]	; (8005a98 <problem_fetch+0x43d4>)
 8005860:	6810      	ldr	r0, [r2, #0]
 8005862:	6018      	str	r0, [r3, #0]
 8005864:	8892      	ldrh	r2, [r2, #4]
 8005866:	809a      	strh	r2, [r3, #4]
			strcpy(p->grade,"6C");
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800586e:	4a8b      	ldr	r2, [pc, #556]	; (8005a9c <problem_fetch+0x43d8>)
 8005870:	8811      	ldrh	r1, [r2, #0]
 8005872:	7892      	ldrb	r2, [r2, #2]
 8005874:	8019      	strh	r1, [r3, #0]
 8005876:	709a      	strb	r2, [r3, #2]
			p->moveSize = 6;
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	2206      	movs	r2, #6
 800587c:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"H,J,H,C,D,D");
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	33a4      	adds	r3, #164	; 0xa4
 8005882:	4a87      	ldr	r2, [pc, #540]	; (8005aa0 <problem_fetch+0x43dc>)
 8005884:	461c      	mov	r4, r3
 8005886:	4613      	mov	r3, r2
 8005888:	cb07      	ldmia	r3!, {r0, r1, r2}
 800588a:	6020      	str	r0, [r4, #0]
 800588c:	6061      	str	r1, [r4, #4]
 800588e:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,5,10,13,15,18");
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	3304      	adds	r3, #4
 8005894:	4a83      	ldr	r2, [pc, #524]	; (8005aa4 <problem_fetch+0x43e0>)
 8005896:	461c      	mov	r4, r3
 8005898:	4615      	mov	r5, r2
 800589a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800589c:	6020      	str	r0, [r4, #0]
 800589e:	6061      	str	r1, [r4, #4]
 80058a0:	60a2      	str	r2, [r4, #8]
 80058a2:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,s,d,d,d,e");
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 80058aa:	4a7f      	ldr	r2, [pc, #508]	; (8005aa8 <problem_fetch+0x43e4>)
 80058ac:	461c      	mov	r4, r3
 80058ae:	4613      	mov	r3, r2
 80058b0:	cb07      	ldmia	r3!, {r0, r1, r2}
 80058b2:	6020      	str	r0, [r4, #0]
 80058b4:	6061      	str	r1, [r4, #4]
 80058b6:	60a2      	str	r2, [r4, #8]
			break;
 80058b8:	f016 be34 	b.w	801c524 <problem_fetch+0x1ae60>
		case 103 :
			strcpy(p->name,"LI VARDASCI");
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80058c2:	4a7a      	ldr	r2, [pc, #488]	; (8005aac <problem_fetch+0x43e8>)
 80058c4:	461c      	mov	r4, r3
 80058c6:	4613      	mov	r3, r2
 80058c8:	cb07      	ldmia	r3!, {r0, r1, r2}
 80058ca:	6020      	str	r0, [r4, #0]
 80058cc:	6061      	str	r1, [r4, #4]
 80058ce:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade,"7B");
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80058d6:	4a76      	ldr	r2, [pc, #472]	; (8005ab0 <problem_fetch+0x43ec>)
 80058d8:	8811      	ldrh	r1, [r2, #0]
 80058da:	7892      	ldrb	r2, [r2, #2]
 80058dc:	8019      	strh	r1, [r3, #0]
 80058de:	709a      	strb	r2, [r3, #2]
			p->moveSize = 4;
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	2204      	movs	r2, #4
 80058e4:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,H,G,D");
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	33a4      	adds	r3, #164	; 0xa4
 80058ea:	4972      	ldr	r1, [pc, #456]	; (8005ab4 <problem_fetch+0x43f0>)
 80058ec:	461a      	mov	r2, r3
 80058ee:	460b      	mov	r3, r1
 80058f0:	cb03      	ldmia	r3!, {r0, r1}
 80058f2:	6010      	str	r0, [r2, #0]
 80058f4:	6051      	str	r1, [r2, #4]
			strcpy(p->moveNumbers,"4,10,14,18");
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	3304      	adds	r3, #4
 80058fa:	496f      	ldr	r1, [pc, #444]	; (8005ab8 <problem_fetch+0x43f4>)
 80058fc:	461a      	mov	r2, r3
 80058fe:	460b      	mov	r3, r1
 8005900:	cb03      	ldmia	r3!, {r0, r1}
 8005902:	6010      	str	r0, [r2, #0]
 8005904:	6051      	str	r1, [r2, #4]
 8005906:	8819      	ldrh	r1, [r3, #0]
 8005908:	789b      	ldrb	r3, [r3, #2]
 800590a:	8111      	strh	r1, [r2, #8]
 800590c:	7293      	strb	r3, [r2, #10]
			strcpy(p->startFinish,"s,d,d,e");
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8005914:	4969      	ldr	r1, [pc, #420]	; (8005abc <problem_fetch+0x43f8>)
 8005916:	461a      	mov	r2, r3
 8005918:	460b      	mov	r3, r1
 800591a:	cb03      	ldmia	r3!, {r0, r1}
 800591c:	6010      	str	r0, [r2, #0]
 800591e:	6051      	str	r1, [r2, #4]
			break;
 8005920:	f016 be00 	b.w	801c524 <problem_fetch+0x1ae60>
		case 104 :
			strcpy(p->name,"LA FRICHINA");
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800592a:	4a65      	ldr	r2, [pc, #404]	; (8005ac0 <problem_fetch+0x43fc>)
 800592c:	461c      	mov	r4, r3
 800592e:	4613      	mov	r3, r2
 8005930:	cb07      	ldmia	r3!, {r0, r1, r2}
 8005932:	6020      	str	r0, [r4, #0]
 8005934:	6061      	str	r1, [r4, #4]
 8005936:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade,"7A");
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800593e:	4a52      	ldr	r2, [pc, #328]	; (8005a88 <problem_fetch+0x43c4>)
 8005940:	8811      	ldrh	r1, [r2, #0]
 8005942:	7892      	ldrb	r2, [r2, #2]
 8005944:	8019      	strh	r1, [r3, #0]
 8005946:	709a      	strb	r2, [r3, #2]
			p->moveSize = 5;
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	2205      	movs	r2, #5
 800594c:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,H,G,H,I");
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	33a4      	adds	r3, #164	; 0xa4
 8005952:	495c      	ldr	r1, [pc, #368]	; (8005ac4 <problem_fetch+0x4400>)
 8005954:	461a      	mov	r2, r3
 8005956:	460b      	mov	r3, r1
 8005958:	cb03      	ldmia	r3!, {r0, r1}
 800595a:	6010      	str	r0, [r2, #0]
 800595c:	6051      	str	r1, [r2, #4]
 800595e:	881b      	ldrh	r3, [r3, #0]
 8005960:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"4,10,14,13,18");
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	3304      	adds	r3, #4
 8005966:	4a58      	ldr	r2, [pc, #352]	; (8005ac8 <problem_fetch+0x4404>)
 8005968:	461c      	mov	r4, r3
 800596a:	4613      	mov	r3, r2
 800596c:	cb07      	ldmia	r3!, {r0, r1, r2}
 800596e:	6020      	str	r0, [r4, #0]
 8005970:	6061      	str	r1, [r4, #4]
 8005972:	60a2      	str	r2, [r4, #8]
 8005974:	881b      	ldrh	r3, [r3, #0]
 8005976:	81a3      	strh	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,e");
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800597e:	4953      	ldr	r1, [pc, #332]	; (8005acc <problem_fetch+0x4408>)
 8005980:	461a      	mov	r2, r3
 8005982:	460b      	mov	r3, r1
 8005984:	cb03      	ldmia	r3!, {r0, r1}
 8005986:	6010      	str	r0, [r2, #0]
 8005988:	6051      	str	r1, [r2, #4]
 800598a:	881b      	ldrh	r3, [r3, #0]
 800598c:	8113      	strh	r3, [r2, #8]
			break;
 800598e:	f016 bdc9 	b.w	801c524 <problem_fetch+0x1ae60>
		case 105 :
			strcpy(p->name,"BLACKNANA OLDNANA");
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8005998:	4a4d      	ldr	r2, [pc, #308]	; (8005ad0 <problem_fetch+0x440c>)
 800599a:	461d      	mov	r5, r3
 800599c:	4614      	mov	r4, r2
 800599e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80059a0:	6028      	str	r0, [r5, #0]
 80059a2:	6069      	str	r1, [r5, #4]
 80059a4:	60aa      	str	r2, [r5, #8]
 80059a6:	60eb      	str	r3, [r5, #12]
 80059a8:	8823      	ldrh	r3, [r4, #0]
 80059aa:	822b      	strh	r3, [r5, #16]
			strcpy(p->grade,"7B+");
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80059b2:	4a48      	ldr	r2, [pc, #288]	; (8005ad4 <problem_fetch+0x4410>)
 80059b4:	6810      	ldr	r0, [r2, #0]
 80059b6:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	2206      	movs	r2, #6
 80059bc:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,I,I,H,D,D");
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	33a4      	adds	r3, #164	; 0xa4
 80059c2:	4a45      	ldr	r2, [pc, #276]	; (8005ad8 <problem_fetch+0x4414>)
 80059c4:	461c      	mov	r4, r3
 80059c6:	4613      	mov	r3, r2
 80059c8:	cb07      	ldmia	r3!, {r0, r1, r2}
 80059ca:	6020      	str	r0, [r4, #0]
 80059cc:	6061      	str	r1, [r4, #4]
 80059ce:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,10,9,13,15,18");
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	3304      	adds	r3, #4
 80059d4:	4a41      	ldr	r2, [pc, #260]	; (8005adc <problem_fetch+0x4418>)
 80059d6:	461c      	mov	r4, r3
 80059d8:	4615      	mov	r5, r2
 80059da:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80059dc:	6020      	str	r0, [r4, #0]
 80059de:	6061      	str	r1, [r4, #4]
 80059e0:	60a2      	str	r2, [r4, #8]
 80059e2:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 80059ea:	4a3d      	ldr	r2, [pc, #244]	; (8005ae0 <problem_fetch+0x441c>)
 80059ec:	461c      	mov	r4, r3
 80059ee:	4613      	mov	r3, r2
 80059f0:	cb07      	ldmia	r3!, {r0, r1, r2}
 80059f2:	6020      	str	r0, [r4, #0]
 80059f4:	6061      	str	r1, [r4, #4]
 80059f6:	60a2      	str	r2, [r4, #8]
			break;
 80059f8:	f016 bd94 	b.w	801c524 <problem_fetch+0x1ae60>
		case 106 :
			strcpy(p->name,"MONOLITH");
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8005a02:	4938      	ldr	r1, [pc, #224]	; (8005ae4 <problem_fetch+0x4420>)
 8005a04:	461a      	mov	r2, r3
 8005a06:	460b      	mov	r3, r1
 8005a08:	cb03      	ldmia	r3!, {r0, r1}
 8005a0a:	6010      	str	r0, [r2, #0]
 8005a0c:	6051      	str	r1, [r2, #4]
 8005a0e:	781b      	ldrb	r3, [r3, #0]
 8005a10:	7213      	strb	r3, [r2, #8]
			strcpy(p->grade,"6B+");
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8005a18:	4a16      	ldr	r2, [pc, #88]	; (8005a74 <problem_fetch+0x43b0>)
 8005a1a:	6810      	ldr	r0, [r2, #0]
 8005a1c:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	2207      	movs	r2, #7
 8005a22:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,H,E,F,C,E,D");
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	33a4      	adds	r3, #164	; 0xa4
 8005a28:	4a2f      	ldr	r2, [pc, #188]	; (8005ae8 <problem_fetch+0x4424>)
 8005a2a:	461c      	mov	r4, r3
 8005a2c:	4613      	mov	r3, r2
 8005a2e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8005a30:	6020      	str	r0, [r4, #0]
 8005a32:	6061      	str	r1, [r4, #4]
 8005a34:	60a2      	str	r2, [r4, #8]
 8005a36:	881b      	ldrh	r3, [r3, #0]
 8005a38:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,8,8,11,13,16,18");
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	3304      	adds	r3, #4
 8005a3e:	4a2b      	ldr	r2, [pc, #172]	; (8005aec <problem_fetch+0x4428>)
 8005a40:	461d      	mov	r5, r3
 8005a42:	4614      	mov	r4, r2
 8005a44:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005a46:	6028      	str	r0, [r5, #0]
 8005a48:	6069      	str	r1, [r5, #4]
 8005a4a:	60aa      	str	r2, [r5, #8]
 8005a4c:	60eb      	str	r3, [r5, #12]
 8005a4e:	8823      	ldrh	r3, [r4, #0]
 8005a50:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8005a58:	4a0e      	ldr	r2, [pc, #56]	; (8005a94 <problem_fetch+0x43d0>)
 8005a5a:	461c      	mov	r4, r3
 8005a5c:	4613      	mov	r3, r2
 8005a5e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8005a60:	6020      	str	r0, [r4, #0]
 8005a62:	6061      	str	r1, [r4, #4]
 8005a64:	60a2      	str	r2, [r4, #8]
 8005a66:	881b      	ldrh	r3, [r3, #0]
 8005a68:	81a3      	strh	r3, [r4, #12]
			break;
 8005a6a:	f016 bd5b 	b.w	801c524 <problem_fetch+0x1ae60>
 8005a6e:	bf00      	nop
 8005a70:	08024cb8 	.word	0x08024cb8
 8005a74:	08023854 	.word	0x08023854
 8005a78:	08024cc0 	.word	0x08024cc0
 8005a7c:	08024cd4 	.word	0x08024cd4
 8005a80:	08024cec 	.word	0x08024cec
 8005a84:	08024d00 	.word	0x08024d00
 8005a88:	08023814 	.word	0x08023814
 8005a8c:	08024d08 	.word	0x08024d08
 8005a90:	08024d18 	.word	0x08024d18
 8005a94:	080239dc 	.word	0x080239dc
 8005a98:	08024d2c 	.word	0x08024d2c
 8005a9c:	08023920 	.word	0x08023920
 8005aa0:	08024d34 	.word	0x08024d34
 8005aa4:	08024d40 	.word	0x08024d40
 8005aa8:	08023834 	.word	0x08023834
 8005aac:	08024d50 	.word	0x08024d50
 8005ab0:	08023f4c 	.word	0x08023f4c
 8005ab4:	08024d5c 	.word	0x08024d5c
 8005ab8:	08024d64 	.word	0x08024d64
 8005abc:	080239a8 	.word	0x080239a8
 8005ac0:	08024d70 	.word	0x08024d70
 8005ac4:	08024d7c 	.word	0x08024d7c
 8005ac8:	08024d88 	.word	0x08024d88
 8005acc:	08023d20 	.word	0x08023d20
 8005ad0:	08024d98 	.word	0x08024d98
 8005ad4:	08023990 	.word	0x08023990
 8005ad8:	08024dac 	.word	0x08024dac
 8005adc:	08024db8 	.word	0x08024db8
 8005ae0:	08023bf0 	.word	0x08023bf0
 8005ae4:	08024dc8 	.word	0x08024dc8
 8005ae8:	08024dd4 	.word	0x08024dd4
 8005aec:	08024de4 	.word	0x08024de4
		case 107 :
			strcpy(p->name,"ZONING IN (ALT. START)");
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8005af6:	4ab2      	ldr	r2, [pc, #712]	; (8005dc0 <problem_fetch+0x46fc>)
 8005af8:	461c      	mov	r4, r3
 8005afa:	4615      	mov	r5, r2
 8005afc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005afe:	6020      	str	r0, [r4, #0]
 8005b00:	6061      	str	r1, [r4, #4]
 8005b02:	60a2      	str	r2, [r4, #8]
 8005b04:	60e3      	str	r3, [r4, #12]
 8005b06:	6828      	ldr	r0, [r5, #0]
 8005b08:	6120      	str	r0, [r4, #16]
 8005b0a:	88ab      	ldrh	r3, [r5, #4]
 8005b0c:	79aa      	ldrb	r2, [r5, #6]
 8005b0e:	82a3      	strh	r3, [r4, #20]
 8005b10:	4613      	mov	r3, r2
 8005b12:	75a3      	strb	r3, [r4, #22]
			strcpy(p->grade,"6B+");
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8005b1a:	4aaa      	ldr	r2, [pc, #680]	; (8005dc4 <problem_fetch+0x4700>)
 8005b1c:	6810      	ldr	r0, [r2, #0]
 8005b1e:	6018      	str	r0, [r3, #0]
			p->moveSize = 8;
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	2208      	movs	r2, #8
 8005b24:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"E,G,H,C,E,C,E,D");
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	33a4      	adds	r3, #164	; 0xa4
 8005b2a:	4aa7      	ldr	r2, [pc, #668]	; (8005dc8 <problem_fetch+0x4704>)
 8005b2c:	461c      	mov	r4, r3
 8005b2e:	4615      	mov	r5, r2
 8005b30:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005b32:	6020      	str	r0, [r4, #0]
 8005b34:	6061      	str	r1, [r4, #4]
 8005b36:	60a2      	str	r2, [r4, #8]
 8005b38:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"6,4,8,8,12,13,16,18");
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	3304      	adds	r3, #4
 8005b3e:	4aa3      	ldr	r2, [pc, #652]	; (8005dcc <problem_fetch+0x4708>)
 8005b40:	461d      	mov	r5, r3
 8005b42:	4614      	mov	r4, r2
 8005b44:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005b46:	6028      	str	r0, [r5, #0]
 8005b48:	6069      	str	r1, [r5, #4]
 8005b4a:	60aa      	str	r2, [r5, #8]
 8005b4c:	60eb      	str	r3, [r5, #12]
 8005b4e:	6820      	ldr	r0, [r4, #0]
 8005b50:	6128      	str	r0, [r5, #16]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,e");
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8005b58:	4a9d      	ldr	r2, [pc, #628]	; (8005dd0 <problem_fetch+0x470c>)
 8005b5a:	461c      	mov	r4, r3
 8005b5c:	4615      	mov	r5, r2
 8005b5e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005b60:	6020      	str	r0, [r4, #0]
 8005b62:	6061      	str	r1, [r4, #4]
 8005b64:	60a2      	str	r2, [r4, #8]
 8005b66:	60e3      	str	r3, [r4, #12]
			break;
 8005b68:	f016 bcdc 	b.w	801c524 <problem_fetch+0x1ae60>
		case 108 :
			strcpy(p->name,"ZONING IN");
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8005b72:	4998      	ldr	r1, [pc, #608]	; (8005dd4 <problem_fetch+0x4710>)
 8005b74:	461a      	mov	r2, r3
 8005b76:	460b      	mov	r3, r1
 8005b78:	cb03      	ldmia	r3!, {r0, r1}
 8005b7a:	6010      	str	r0, [r2, #0]
 8005b7c:	6051      	str	r1, [r2, #4]
 8005b7e:	881b      	ldrh	r3, [r3, #0]
 8005b80:	8113      	strh	r3, [r2, #8]
			strcpy(p->grade,"6B+");
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8005b88:	4a8e      	ldr	r2, [pc, #568]	; (8005dc4 <problem_fetch+0x4700>)
 8005b8a:	6810      	ldr	r0, [r2, #0]
 8005b8c:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	2207      	movs	r2, #7
 8005b92:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,C,E,H,C,E,D");
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	33a4      	adds	r3, #164	; 0xa4
 8005b98:	4a8f      	ldr	r2, [pc, #572]	; (8005dd8 <problem_fetch+0x4714>)
 8005b9a:	461c      	mov	r4, r3
 8005b9c:	4613      	mov	r3, r2
 8005b9e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8005ba0:	6020      	str	r0, [r4, #0]
 8005ba2:	6061      	str	r1, [r4, #4]
 8005ba4:	60a2      	str	r2, [r4, #8]
 8005ba6:	881b      	ldrh	r3, [r3, #0]
 8005ba8:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,8,12,8,13,16,18");
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	3304      	adds	r3, #4
 8005bae:	4a8b      	ldr	r2, [pc, #556]	; (8005ddc <problem_fetch+0x4718>)
 8005bb0:	461d      	mov	r5, r3
 8005bb2:	4614      	mov	r4, r2
 8005bb4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005bb6:	6028      	str	r0, [r5, #0]
 8005bb8:	6069      	str	r1, [r5, #4]
 8005bba:	60aa      	str	r2, [r5, #8]
 8005bbc:	60eb      	str	r3, [r5, #12]
 8005bbe:	8823      	ldrh	r3, [r4, #0]
 8005bc0:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8005bc8:	4a85      	ldr	r2, [pc, #532]	; (8005de0 <problem_fetch+0x471c>)
 8005bca:	461c      	mov	r4, r3
 8005bcc:	4613      	mov	r3, r2
 8005bce:	cb07      	ldmia	r3!, {r0, r1, r2}
 8005bd0:	6020      	str	r0, [r4, #0]
 8005bd2:	6061      	str	r1, [r4, #4]
 8005bd4:	60a2      	str	r2, [r4, #8]
 8005bd6:	881b      	ldrh	r3, [r3, #0]
 8005bd8:	81a3      	strh	r3, [r4, #12]
			break;
 8005bda:	f016 bca3 	b.w	801c524 <problem_fetch+0x1ae60>
		case 109 :
			strcpy(p->name,"ORANGE IS THE NEW BLACK");
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8005be4:	4a7f      	ldr	r2, [pc, #508]	; (8005de4 <problem_fetch+0x4720>)
 8005be6:	461d      	mov	r5, r3
 8005be8:	4614      	mov	r4, r2
 8005bea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005bec:	6028      	str	r0, [r5, #0]
 8005bee:	6069      	str	r1, [r5, #4]
 8005bf0:	60aa      	str	r2, [r5, #8]
 8005bf2:	60eb      	str	r3, [r5, #12]
 8005bf4:	cc03      	ldmia	r4!, {r0, r1}
 8005bf6:	6128      	str	r0, [r5, #16]
 8005bf8:	6169      	str	r1, [r5, #20]
			strcpy(p->grade,"7B");
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8005c00:	4a79      	ldr	r2, [pc, #484]	; (8005de8 <problem_fetch+0x4724>)
 8005c02:	8811      	ldrh	r1, [r2, #0]
 8005c04:	7892      	ldrb	r2, [r2, #2]
 8005c06:	8019      	strh	r1, [r3, #0]
 8005c08:	709a      	strb	r2, [r3, #2]
			p->moveSize = 6;
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	2206      	movs	r2, #6
 8005c0e:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,G,F,G,C,D");
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	33a4      	adds	r3, #164	; 0xa4
 8005c14:	4a75      	ldr	r2, [pc, #468]	; (8005dec <problem_fetch+0x4728>)
 8005c16:	461c      	mov	r4, r3
 8005c18:	4613      	mov	r3, r2
 8005c1a:	cb07      	ldmia	r3!, {r0, r1, r2}
 8005c1c:	6020      	str	r0, [r4, #0]
 8005c1e:	6061      	str	r1, [r4, #4]
 8005c20:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,6,11,14,8,18");
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	3304      	adds	r3, #4
 8005c26:	4a72      	ldr	r2, [pc, #456]	; (8005df0 <problem_fetch+0x472c>)
 8005c28:	461c      	mov	r4, r3
 8005c2a:	4613      	mov	r3, r2
 8005c2c:	cb07      	ldmia	r3!, {r0, r1, r2}
 8005c2e:	6020      	str	r0, [r4, #0]
 8005c30:	6061      	str	r1, [r4, #4]
 8005c32:	60a2      	str	r2, [r4, #8]
 8005c34:	881a      	ldrh	r2, [r3, #0]
 8005c36:	789b      	ldrb	r3, [r3, #2]
 8005c38:	81a2      	strh	r2, [r4, #12]
 8005c3a:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8005c42:	4a6c      	ldr	r2, [pc, #432]	; (8005df4 <problem_fetch+0x4730>)
 8005c44:	461c      	mov	r4, r3
 8005c46:	4613      	mov	r3, r2
 8005c48:	cb07      	ldmia	r3!, {r0, r1, r2}
 8005c4a:	6020      	str	r0, [r4, #0]
 8005c4c:	6061      	str	r1, [r4, #4]
 8005c4e:	60a2      	str	r2, [r4, #8]
			break;
 8005c50:	f016 bc68 	b.w	801c524 <problem_fetch+0x1ae60>
		case 110 :
			strcpy(p->name,"COCA COLA");
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8005c5a:	4967      	ldr	r1, [pc, #412]	; (8005df8 <problem_fetch+0x4734>)
 8005c5c:	461a      	mov	r2, r3
 8005c5e:	460b      	mov	r3, r1
 8005c60:	cb03      	ldmia	r3!, {r0, r1}
 8005c62:	6010      	str	r0, [r2, #0]
 8005c64:	6051      	str	r1, [r2, #4]
 8005c66:	881b      	ldrh	r3, [r3, #0]
 8005c68:	8113      	strh	r3, [r2, #8]
			strcpy(p->grade,"7A");
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8005c70:	4a62      	ldr	r2, [pc, #392]	; (8005dfc <problem_fetch+0x4738>)
 8005c72:	8811      	ldrh	r1, [r2, #0]
 8005c74:	7892      	ldrb	r2, [r2, #2]
 8005c76:	8019      	strh	r1, [r3, #0]
 8005c78:	709a      	strb	r2, [r3, #2]
			p->moveSize = 7;
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	2207      	movs	r2, #7
 8005c7e:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,G,F,E,G,D,C");
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	33a4      	adds	r3, #164	; 0xa4
 8005c84:	4a5e      	ldr	r2, [pc, #376]	; (8005e00 <problem_fetch+0x473c>)
 8005c86:	461c      	mov	r4, r3
 8005c88:	4613      	mov	r3, r2
 8005c8a:	cb07      	ldmia	r3!, {r0, r1, r2}
 8005c8c:	6020      	str	r0, [r4, #0]
 8005c8e:	6061      	str	r1, [r4, #4]
 8005c90:	60a2      	str	r2, [r4, #8]
 8005c92:	881b      	ldrh	r3, [r3, #0]
 8005c94:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,6,11,12,15,18,8");
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	3304      	adds	r3, #4
 8005c9a:	4a5a      	ldr	r2, [pc, #360]	; (8005e04 <problem_fetch+0x4740>)
 8005c9c:	461d      	mov	r5, r3
 8005c9e:	4614      	mov	r4, r2
 8005ca0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005ca2:	6028      	str	r0, [r5, #0]
 8005ca4:	6069      	str	r1, [r5, #4]
 8005ca6:	60aa      	str	r2, [r5, #8]
 8005ca8:	60eb      	str	r3, [r5, #12]
 8005caa:	8823      	ldrh	r3, [r4, #0]
 8005cac:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,d,d,d,d,e,d");
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8005cb4:	4a54      	ldr	r2, [pc, #336]	; (8005e08 <problem_fetch+0x4744>)
 8005cb6:	461c      	mov	r4, r3
 8005cb8:	4613      	mov	r3, r2
 8005cba:	cb07      	ldmia	r3!, {r0, r1, r2}
 8005cbc:	6020      	str	r0, [r4, #0]
 8005cbe:	6061      	str	r1, [r4, #4]
 8005cc0:	60a2      	str	r2, [r4, #8]
 8005cc2:	881b      	ldrh	r3, [r3, #0]
 8005cc4:	81a3      	strh	r3, [r4, #12]
			break;
 8005cc6:	f016 bc2d 	b.w	801c524 <problem_fetch+0x1ae60>
		case 111 :
			strcpy(p->name,"OINTMENT 007");
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8005cd0:	4a4e      	ldr	r2, [pc, #312]	; (8005e0c <problem_fetch+0x4748>)
 8005cd2:	461c      	mov	r4, r3
 8005cd4:	4613      	mov	r3, r2
 8005cd6:	cb07      	ldmia	r3!, {r0, r1, r2}
 8005cd8:	6020      	str	r0, [r4, #0]
 8005cda:	6061      	str	r1, [r4, #4]
 8005cdc:	60a2      	str	r2, [r4, #8]
 8005cde:	781b      	ldrb	r3, [r3, #0]
 8005ce0:	7323      	strb	r3, [r4, #12]
			strcpy(p->grade,"6B+");
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8005ce8:	4a36      	ldr	r2, [pc, #216]	; (8005dc4 <problem_fetch+0x4700>)
 8005cea:	6810      	ldr	r0, [r2, #0]
 8005cec:	6018      	str	r0, [r3, #0]
			p->moveSize = 9;
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	2209      	movs	r2, #9
 8005cf2:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,E,E,G,H,G,I,G,I");
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	33a4      	adds	r3, #164	; 0xa4
 8005cf8:	4a45      	ldr	r2, [pc, #276]	; (8005e10 <problem_fetch+0x474c>)
 8005cfa:	461d      	mov	r5, r3
 8005cfc:	4614      	mov	r4, r2
 8005cfe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005d00:	6028      	str	r0, [r5, #0]
 8005d02:	6069      	str	r1, [r5, #4]
 8005d04:	60aa      	str	r2, [r5, #8]
 8005d06:	60eb      	str	r3, [r5, #12]
 8005d08:	8823      	ldrh	r3, [r4, #0]
 8005d0a:	822b      	strh	r3, [r5, #16]
			strcpy(p->moveNumbers,"4,6,8,9,10,14,14,15,18");
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	3304      	adds	r3, #4
 8005d10:	4a40      	ldr	r2, [pc, #256]	; (8005e14 <problem_fetch+0x4750>)
 8005d12:	461c      	mov	r4, r3
 8005d14:	4615      	mov	r5, r2
 8005d16:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005d18:	6020      	str	r0, [r4, #0]
 8005d1a:	6061      	str	r1, [r4, #4]
 8005d1c:	60a2      	str	r2, [r4, #8]
 8005d1e:	60e3      	str	r3, [r4, #12]
 8005d20:	6828      	ldr	r0, [r5, #0]
 8005d22:	6120      	str	r0, [r4, #16]
 8005d24:	88ab      	ldrh	r3, [r5, #4]
 8005d26:	79aa      	ldrb	r2, [r5, #6]
 8005d28:	82a3      	strh	r3, [r4, #20]
 8005d2a:	4613      	mov	r3, r2
 8005d2c:	75a3      	strb	r3, [r4, #22]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,d,e");
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8005d34:	4a38      	ldr	r2, [pc, #224]	; (8005e18 <problem_fetch+0x4754>)
 8005d36:	461d      	mov	r5, r3
 8005d38:	4614      	mov	r4, r2
 8005d3a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005d3c:	6028      	str	r0, [r5, #0]
 8005d3e:	6069      	str	r1, [r5, #4]
 8005d40:	60aa      	str	r2, [r5, #8]
 8005d42:	60eb      	str	r3, [r5, #12]
 8005d44:	8823      	ldrh	r3, [r4, #0]
 8005d46:	822b      	strh	r3, [r5, #16]
			break;
 8005d48:	f016 bbec 	b.w	801c524 <problem_fetch+0x1ae60>
		case 112 :
			strcpy(p->name,"WARM UP STUFF");
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8005d52:	4a32      	ldr	r2, [pc, #200]	; (8005e1c <problem_fetch+0x4758>)
 8005d54:	461c      	mov	r4, r3
 8005d56:	4613      	mov	r3, r2
 8005d58:	cb07      	ldmia	r3!, {r0, r1, r2}
 8005d5a:	6020      	str	r0, [r4, #0]
 8005d5c:	6061      	str	r1, [r4, #4]
 8005d5e:	60a2      	str	r2, [r4, #8]
 8005d60:	881b      	ldrh	r3, [r3, #0]
 8005d62:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade,"6B+");
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8005d6a:	4a16      	ldr	r2, [pc, #88]	; (8005dc4 <problem_fetch+0x4700>)
 8005d6c:	6810      	ldr	r0, [r2, #0]
 8005d6e:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	2207      	movs	r2, #7
 8005d74:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"C,E,E,D,E,A,D");
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	33a4      	adds	r3, #164	; 0xa4
 8005d7a:	4a29      	ldr	r2, [pc, #164]	; (8005e20 <problem_fetch+0x475c>)
 8005d7c:	461c      	mov	r4, r3
 8005d7e:	4613      	mov	r3, r2
 8005d80:	cb07      	ldmia	r3!, {r0, r1, r2}
 8005d82:	6020      	str	r0, [r4, #0]
 8005d84:	6061      	str	r1, [r4, #4]
 8005d86:	60a2      	str	r2, [r4, #8]
 8005d88:	881b      	ldrh	r3, [r3, #0]
 8005d8a:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,6,8,11,12,14,18");
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	3304      	adds	r3, #4
 8005d90:	4a24      	ldr	r2, [pc, #144]	; (8005e24 <problem_fetch+0x4760>)
 8005d92:	461d      	mov	r5, r3
 8005d94:	4614      	mov	r4, r2
 8005d96:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005d98:	6028      	str	r0, [r5, #0]
 8005d9a:	6069      	str	r1, [r5, #4]
 8005d9c:	60aa      	str	r2, [r5, #8]
 8005d9e:	60eb      	str	r3, [r5, #12]
 8005da0:	8823      	ldrh	r3, [r4, #0]
 8005da2:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,s,d,d,d,d,e");
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8005daa:	4a1f      	ldr	r2, [pc, #124]	; (8005e28 <problem_fetch+0x4764>)
 8005dac:	461c      	mov	r4, r3
 8005dae:	4613      	mov	r3, r2
 8005db0:	cb07      	ldmia	r3!, {r0, r1, r2}
 8005db2:	6020      	str	r0, [r4, #0]
 8005db4:	6061      	str	r1, [r4, #4]
 8005db6:	60a2      	str	r2, [r4, #8]
 8005db8:	881b      	ldrh	r3, [r3, #0]
 8005dba:	81a3      	strh	r3, [r4, #12]
			break;
 8005dbc:	f016 bbb2 	b.w	801c524 <problem_fetch+0x1ae60>
 8005dc0:	08024df8 	.word	0x08024df8
 8005dc4:	08023854 	.word	0x08023854
 8005dc8:	08024e10 	.word	0x08024e10
 8005dcc:	08024e20 	.word	0x08024e20
 8005dd0:	08023978 	.word	0x08023978
 8005dd4:	08024e34 	.word	0x08024e34
 8005dd8:	08024e40 	.word	0x08024e40
 8005ddc:	08024e50 	.word	0x08024e50
 8005de0:	080239dc 	.word	0x080239dc
 8005de4:	08024e64 	.word	0x08024e64
 8005de8:	08023f4c 	.word	0x08023f4c
 8005dec:	08024e7c 	.word	0x08024e7c
 8005df0:	08024e88 	.word	0x08024e88
 8005df4:	08023bf0 	.word	0x08023bf0
 8005df8:	08024e98 	.word	0x08024e98
 8005dfc:	08023814 	.word	0x08023814
 8005e00:	08024ea4 	.word	0x08024ea4
 8005e04:	08024eb4 	.word	0x08024eb4
 8005e08:	080249bc 	.word	0x080249bc
 8005e0c:	08024ec8 	.word	0x08024ec8
 8005e10:	08024ed8 	.word	0x08024ed8
 8005e14:	08024eec 	.word	0x08024eec
 8005e18:	08024838 	.word	0x08024838
 8005e1c:	08024f04 	.word	0x08024f04
 8005e20:	08024f14 	.word	0x08024f14
 8005e24:	08024f24 	.word	0x08024f24
 8005e28:	080238cc 	.word	0x080238cc
		case 113 :
			strcpy(p->name,"VANTABLACK");
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8005e32:	49b1      	ldr	r1, [pc, #708]	; (80060f8 <problem_fetch+0x4a34>)
 8005e34:	461a      	mov	r2, r3
 8005e36:	460b      	mov	r3, r1
 8005e38:	cb03      	ldmia	r3!, {r0, r1}
 8005e3a:	6010      	str	r0, [r2, #0]
 8005e3c:	6051      	str	r1, [r2, #4]
 8005e3e:	8819      	ldrh	r1, [r3, #0]
 8005e40:	789b      	ldrb	r3, [r3, #2]
 8005e42:	8111      	strh	r1, [r2, #8]
 8005e44:	7293      	strb	r3, [r2, #10]
			strcpy(p->grade,"7B+");
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8005e4c:	4aab      	ldr	r2, [pc, #684]	; (80060fc <problem_fetch+0x4a38>)
 8005e4e:	6810      	ldr	r0, [r2, #0]
 8005e50:	6018      	str	r0, [r3, #0]
			p->moveSize = 5;
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	2205      	movs	r2, #5
 8005e56:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"H,B,D,A,G");
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	33a4      	adds	r3, #164	; 0xa4
 8005e5c:	49a8      	ldr	r1, [pc, #672]	; (8006100 <problem_fetch+0x4a3c>)
 8005e5e:	461a      	mov	r2, r3
 8005e60:	460b      	mov	r3, r1
 8005e62:	cb03      	ldmia	r3!, {r0, r1}
 8005e64:	6010      	str	r0, [r2, #0]
 8005e66:	6051      	str	r1, [r2, #4]
 8005e68:	881b      	ldrh	r3, [r3, #0]
 8005e6a:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"8,10,15,18,4");
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	3304      	adds	r3, #4
 8005e70:	4aa4      	ldr	r2, [pc, #656]	; (8006104 <problem_fetch+0x4a40>)
 8005e72:	461c      	mov	r4, r3
 8005e74:	4613      	mov	r3, r2
 8005e76:	cb07      	ldmia	r3!, {r0, r1, r2}
 8005e78:	6020      	str	r0, [r4, #0]
 8005e7a:	6061      	str	r1, [r4, #4]
 8005e7c:	60a2      	str	r2, [r4, #8]
 8005e7e:	781b      	ldrb	r3, [r3, #0]
 8005e80:	7323      	strb	r3, [r4, #12]
			strcpy(p->startFinish,"d,d,d,e,s");
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8005e88:	499f      	ldr	r1, [pc, #636]	; (8006108 <problem_fetch+0x4a44>)
 8005e8a:	461a      	mov	r2, r3
 8005e8c:	460b      	mov	r3, r1
 8005e8e:	cb03      	ldmia	r3!, {r0, r1}
 8005e90:	6010      	str	r0, [r2, #0]
 8005e92:	6051      	str	r1, [r2, #4]
 8005e94:	881b      	ldrh	r3, [r3, #0]
 8005e96:	8113      	strh	r3, [r2, #8]
			break;
 8005e98:	f016 bb44 	b.w	801c524 <problem_fetch+0x1ae60>
		case 114 :
			strcpy(p->name,"ORDERLY HOUSING");
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8005ea2:	4a9a      	ldr	r2, [pc, #616]	; (800610c <problem_fetch+0x4a48>)
 8005ea4:	461c      	mov	r4, r3
 8005ea6:	4615      	mov	r5, r2
 8005ea8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005eaa:	6020      	str	r0, [r4, #0]
 8005eac:	6061      	str	r1, [r4, #4]
 8005eae:	60a2      	str	r2, [r4, #8]
 8005eb0:	60e3      	str	r3, [r4, #12]
			strcpy(p->grade,"7C");
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8005eb8:	4a95      	ldr	r2, [pc, #596]	; (8006110 <problem_fetch+0x4a4c>)
 8005eba:	8811      	ldrh	r1, [r2, #0]
 8005ebc:	7892      	ldrb	r2, [r2, #2]
 8005ebe:	8019      	strh	r1, [r3, #0]
 8005ec0:	709a      	strb	r2, [r3, #2]
			p->moveSize = 5;
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	2205      	movs	r2, #5
 8005ec6:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,C,F,E,D");
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	33a4      	adds	r3, #164	; 0xa4
 8005ecc:	4991      	ldr	r1, [pc, #580]	; (8006114 <problem_fetch+0x4a50>)
 8005ece:	461a      	mov	r2, r3
 8005ed0:	460b      	mov	r3, r1
 8005ed2:	cb03      	ldmia	r3!, {r0, r1}
 8005ed4:	6010      	str	r0, [r2, #0]
 8005ed6:	6051      	str	r1, [r2, #4]
 8005ed8:	881b      	ldrh	r3, [r3, #0]
 8005eda:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"4,8,11,14,18");
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	3304      	adds	r3, #4
 8005ee0:	4a8d      	ldr	r2, [pc, #564]	; (8006118 <problem_fetch+0x4a54>)
 8005ee2:	461c      	mov	r4, r3
 8005ee4:	4613      	mov	r3, r2
 8005ee6:	cb07      	ldmia	r3!, {r0, r1, r2}
 8005ee8:	6020      	str	r0, [r4, #0]
 8005eea:	6061      	str	r1, [r4, #4]
 8005eec:	60a2      	str	r2, [r4, #8]
 8005eee:	781b      	ldrb	r3, [r3, #0]
 8005ef0:	7323      	strb	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,e");
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8005ef8:	4988      	ldr	r1, [pc, #544]	; (800611c <problem_fetch+0x4a58>)
 8005efa:	461a      	mov	r2, r3
 8005efc:	460b      	mov	r3, r1
 8005efe:	cb03      	ldmia	r3!, {r0, r1}
 8005f00:	6010      	str	r0, [r2, #0]
 8005f02:	6051      	str	r1, [r2, #4]
 8005f04:	881b      	ldrh	r3, [r3, #0]
 8005f06:	8113      	strh	r3, [r2, #8]
			break;
 8005f08:	f016 bb0c 	b.w	801c524 <problem_fetch+0x1ae60>
		case 115 :
			strcpy(p->name,"CATCH AND PULL");
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8005f12:	4a83      	ldr	r2, [pc, #524]	; (8006120 <problem_fetch+0x4a5c>)
 8005f14:	461c      	mov	r4, r3
 8005f16:	4613      	mov	r3, r2
 8005f18:	cb07      	ldmia	r3!, {r0, r1, r2}
 8005f1a:	6020      	str	r0, [r4, #0]
 8005f1c:	6061      	str	r1, [r4, #4]
 8005f1e:	60a2      	str	r2, [r4, #8]
 8005f20:	881a      	ldrh	r2, [r3, #0]
 8005f22:	789b      	ldrb	r3, [r3, #2]
 8005f24:	81a2      	strh	r2, [r4, #12]
 8005f26:	73a3      	strb	r3, [r4, #14]
			strcpy(p->grade,"7B");
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8005f2e:	4a7d      	ldr	r2, [pc, #500]	; (8006124 <problem_fetch+0x4a60>)
 8005f30:	8811      	ldrh	r1, [r2, #0]
 8005f32:	7892      	ldrb	r2, [r2, #2]
 8005f34:	8019      	strh	r1, [r3, #0]
 8005f36:	709a      	strb	r2, [r3, #2]
			p->moveSize = 5;
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	2205      	movs	r2, #5
 8005f3c:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,E,G,D,I");
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	33a4      	adds	r3, #164	; 0xa4
 8005f42:	4979      	ldr	r1, [pc, #484]	; (8006128 <problem_fetch+0x4a64>)
 8005f44:	461a      	mov	r2, r3
 8005f46:	460b      	mov	r3, r1
 8005f48:	cb03      	ldmia	r3!, {r0, r1}
 8005f4a:	6010      	str	r0, [r2, #0]
 8005f4c:	6051      	str	r1, [r2, #4]
 8005f4e:	881b      	ldrh	r3, [r3, #0]
 8005f50:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"14,8,4,18,9");
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	3304      	adds	r3, #4
 8005f56:	4a75      	ldr	r2, [pc, #468]	; (800612c <problem_fetch+0x4a68>)
 8005f58:	461c      	mov	r4, r3
 8005f5a:	4613      	mov	r3, r2
 8005f5c:	cb07      	ldmia	r3!, {r0, r1, r2}
 8005f5e:	6020      	str	r0, [r4, #0]
 8005f60:	6061      	str	r1, [r4, #4]
 8005f62:	60a2      	str	r2, [r4, #8]
			strcpy(p->startFinish,"d,d,s,e,d");
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8005f6a:	4971      	ldr	r1, [pc, #452]	; (8006130 <problem_fetch+0x4a6c>)
 8005f6c:	461a      	mov	r2, r3
 8005f6e:	460b      	mov	r3, r1
 8005f70:	cb03      	ldmia	r3!, {r0, r1}
 8005f72:	6010      	str	r0, [r2, #0]
 8005f74:	6051      	str	r1, [r2, #4]
 8005f76:	881b      	ldrh	r3, [r3, #0]
 8005f78:	8113      	strh	r3, [r2, #8]
			break;
 8005f7a:	f016 bad3 	b.w	801c524 <problem_fetch+0x1ae60>
		case 116 :
			strcpy(p->name,"WHERE'S YOUR BERRY");
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8005f84:	4a6b      	ldr	r2, [pc, #428]	; (8006134 <problem_fetch+0x4a70>)
 8005f86:	461d      	mov	r5, r3
 8005f88:	4614      	mov	r4, r2
 8005f8a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005f8c:	6028      	str	r0, [r5, #0]
 8005f8e:	6069      	str	r1, [r5, #4]
 8005f90:	60aa      	str	r2, [r5, #8]
 8005f92:	60eb      	str	r3, [r5, #12]
 8005f94:	8823      	ldrh	r3, [r4, #0]
 8005f96:	78a2      	ldrb	r2, [r4, #2]
 8005f98:	822b      	strh	r3, [r5, #16]
 8005f9a:	4613      	mov	r3, r2
 8005f9c:	74ab      	strb	r3, [r5, #18]
			strcpy(p->grade,"6B+");
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8005fa4:	4a64      	ldr	r2, [pc, #400]	; (8006138 <problem_fetch+0x4a74>)
 8005fa6:	6810      	ldr	r0, [r2, #0]
 8005fa8:	6018      	str	r0, [r3, #0]
			p->moveSize = 9;
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	2209      	movs	r2, #9
 8005fae:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"C,D,I,E,F,C,B,E,B");
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	33a4      	adds	r3, #164	; 0xa4
 8005fb4:	4a61      	ldr	r2, [pc, #388]	; (800613c <problem_fetch+0x4a78>)
 8005fb6:	461d      	mov	r5, r3
 8005fb8:	4614      	mov	r4, r2
 8005fba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005fbc:	6028      	str	r0, [r5, #0]
 8005fbe:	6069      	str	r1, [r5, #4]
 8005fc0:	60aa      	str	r2, [r5, #8]
 8005fc2:	60eb      	str	r3, [r5, #12]
 8005fc4:	8823      	ldrh	r3, [r4, #0]
 8005fc6:	822b      	strh	r3, [r5, #16]
			strcpy(p->moveNumbers,"5,15,18,16,11,13,10,8,6");
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	3304      	adds	r3, #4
 8005fcc:	4a5c      	ldr	r2, [pc, #368]	; (8006140 <problem_fetch+0x4a7c>)
 8005fce:	461d      	mov	r5, r3
 8005fd0:	4614      	mov	r4, r2
 8005fd2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005fd4:	6028      	str	r0, [r5, #0]
 8005fd6:	6069      	str	r1, [r5, #4]
 8005fd8:	60aa      	str	r2, [r5, #8]
 8005fda:	60eb      	str	r3, [r5, #12]
 8005fdc:	cc03      	ldmia	r4!, {r0, r1}
 8005fde:	6128      	str	r0, [r5, #16]
 8005fe0:	6169      	str	r1, [r5, #20]
			strcpy(p->startFinish,"s,d,e,d,d,d,d,d,s");
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8005fe8:	4a56      	ldr	r2, [pc, #344]	; (8006144 <problem_fetch+0x4a80>)
 8005fea:	461d      	mov	r5, r3
 8005fec:	4614      	mov	r4, r2
 8005fee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005ff0:	6028      	str	r0, [r5, #0]
 8005ff2:	6069      	str	r1, [r5, #4]
 8005ff4:	60aa      	str	r2, [r5, #8]
 8005ff6:	60eb      	str	r3, [r5, #12]
 8005ff8:	8823      	ldrh	r3, [r4, #0]
 8005ffa:	822b      	strh	r3, [r5, #16]
			break;
 8005ffc:	f016 ba92 	b.w	801c524 <problem_fetch+0x1ae60>
		case 117 :
			strcpy(p->name,"PURPLE NURPLE BOYS");
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8006006:	4a50      	ldr	r2, [pc, #320]	; (8006148 <problem_fetch+0x4a84>)
 8006008:	461d      	mov	r5, r3
 800600a:	4614      	mov	r4, r2
 800600c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800600e:	6028      	str	r0, [r5, #0]
 8006010:	6069      	str	r1, [r5, #4]
 8006012:	60aa      	str	r2, [r5, #8]
 8006014:	60eb      	str	r3, [r5, #12]
 8006016:	8823      	ldrh	r3, [r4, #0]
 8006018:	78a2      	ldrb	r2, [r4, #2]
 800601a:	822b      	strh	r3, [r5, #16]
 800601c:	4613      	mov	r3, r2
 800601e:	74ab      	strb	r3, [r5, #18]
			strcpy(p->grade,"6C+");
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8006026:	4a49      	ldr	r2, [pc, #292]	; (800614c <problem_fetch+0x4a88>)
 8006028:	6810      	ldr	r0, [r2, #0]
 800602a:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	2207      	movs	r2, #7
 8006030:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,G,G,E,I,G,I");
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	33a4      	adds	r3, #164	; 0xa4
 8006036:	4a46      	ldr	r2, [pc, #280]	; (8006150 <problem_fetch+0x4a8c>)
 8006038:	461c      	mov	r4, r3
 800603a:	4613      	mov	r3, r2
 800603c:	cb07      	ldmia	r3!, {r0, r1, r2}
 800603e:	6020      	str	r0, [r4, #0]
 8006040:	6061      	str	r1, [r4, #4]
 8006042:	60a2      	str	r2, [r4, #8]
 8006044:	881b      	ldrh	r3, [r3, #0]
 8006046:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,6,9,12,14,15,18");
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	3304      	adds	r3, #4
 800604c:	4a41      	ldr	r2, [pc, #260]	; (8006154 <problem_fetch+0x4a90>)
 800604e:	461d      	mov	r5, r3
 8006050:	4614      	mov	r4, r2
 8006052:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006054:	6028      	str	r0, [r5, #0]
 8006056:	6069      	str	r1, [r5, #4]
 8006058:	60aa      	str	r2, [r5, #8]
 800605a:	60eb      	str	r3, [r5, #12]
 800605c:	8823      	ldrh	r3, [r4, #0]
 800605e:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,s,d,d,d,d,e");
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8006066:	4a3c      	ldr	r2, [pc, #240]	; (8006158 <problem_fetch+0x4a94>)
 8006068:	461c      	mov	r4, r3
 800606a:	4613      	mov	r3, r2
 800606c:	cb07      	ldmia	r3!, {r0, r1, r2}
 800606e:	6020      	str	r0, [r4, #0]
 8006070:	6061      	str	r1, [r4, #4]
 8006072:	60a2      	str	r2, [r4, #8]
 8006074:	881b      	ldrh	r3, [r3, #0]
 8006076:	81a3      	strh	r3, [r4, #12]
			break;
 8006078:	f016 ba54 	b.w	801c524 <problem_fetch+0x1ae60>
		case 118 :
			strcpy(p->name,"DUMBADUMBA EASY");
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8006082:	4a36      	ldr	r2, [pc, #216]	; (800615c <problem_fetch+0x4a98>)
 8006084:	461c      	mov	r4, r3
 8006086:	4615      	mov	r5, r2
 8006088:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800608a:	6020      	str	r0, [r4, #0]
 800608c:	6061      	str	r1, [r4, #4]
 800608e:	60a2      	str	r2, [r4, #8]
 8006090:	60e3      	str	r3, [r4, #12]
			strcpy(p->grade,"6B+");
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8006098:	4a27      	ldr	r2, [pc, #156]	; (8006138 <problem_fetch+0x4a74>)
 800609a:	6810      	ldr	r0, [r2, #0]
 800609c:	6018      	str	r0, [r3, #0]
			p->moveSize = 9;
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	2209      	movs	r2, #9
 80060a2:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,J,E,F,C,D,D,E,C");
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	33a4      	adds	r3, #164	; 0xa4
 80060a8:	4a2d      	ldr	r2, [pc, #180]	; (8006160 <problem_fetch+0x4a9c>)
 80060aa:	461d      	mov	r5, r3
 80060ac:	4614      	mov	r4, r2
 80060ae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80060b0:	6028      	str	r0, [r5, #0]
 80060b2:	6069      	str	r1, [r5, #4]
 80060b4:	60aa      	str	r2, [r5, #8]
 80060b6:	60eb      	str	r3, [r5, #12]
 80060b8:	8823      	ldrh	r3, [r4, #0]
 80060ba:	822b      	strh	r3, [r5, #16]
			strcpy(p->moveNumbers,"4,5,8,11,13,15,18,6,5");
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	3304      	adds	r3, #4
 80060c0:	4a28      	ldr	r2, [pc, #160]	; (8006164 <problem_fetch+0x4aa0>)
 80060c2:	461d      	mov	r5, r3
 80060c4:	4614      	mov	r4, r2
 80060c6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80060c8:	6028      	str	r0, [r5, #0]
 80060ca:	6069      	str	r1, [r5, #4]
 80060cc:	60aa      	str	r2, [r5, #8]
 80060ce:	60eb      	str	r3, [r5, #12]
 80060d0:	6820      	ldr	r0, [r4, #0]
 80060d2:	6128      	str	r0, [r5, #16]
 80060d4:	88a3      	ldrh	r3, [r4, #4]
 80060d6:	82ab      	strh	r3, [r5, #20]
			strcpy(p->startFinish,"s,d,d,d,d,d,e,s,d");
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 80060de:	4a22      	ldr	r2, [pc, #136]	; (8006168 <problem_fetch+0x4aa4>)
 80060e0:	461d      	mov	r5, r3
 80060e2:	4614      	mov	r4, r2
 80060e4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80060e6:	6028      	str	r0, [r5, #0]
 80060e8:	6069      	str	r1, [r5, #4]
 80060ea:	60aa      	str	r2, [r5, #8]
 80060ec:	60eb      	str	r3, [r5, #12]
 80060ee:	8823      	ldrh	r3, [r4, #0]
 80060f0:	822b      	strh	r3, [r5, #16]
			break;
 80060f2:	f016 ba17 	b.w	801c524 <problem_fetch+0x1ae60>
 80060f6:	bf00      	nop
 80060f8:	08024f38 	.word	0x08024f38
 80060fc:	08023990 	.word	0x08023990
 8006100:	08024f44 	.word	0x08024f44
 8006104:	08024f50 	.word	0x08024f50
 8006108:	08024f60 	.word	0x08024f60
 800610c:	08024f6c 	.word	0x08024f6c
 8006110:	08024088 	.word	0x08024088
 8006114:	08024f7c 	.word	0x08024f7c
 8006118:	08024f88 	.word	0x08024f88
 800611c:	08023d20 	.word	0x08023d20
 8006120:	08024f98 	.word	0x08024f98
 8006124:	08023f4c 	.word	0x08023f4c
 8006128:	08024fa8 	.word	0x08024fa8
 800612c:	08024fb4 	.word	0x08024fb4
 8006130:	08024fc0 	.word	0x08024fc0
 8006134:	08024fcc 	.word	0x08024fcc
 8006138:	08023854 	.word	0x08023854
 800613c:	08024fe0 	.word	0x08024fe0
 8006140:	08024ff4 	.word	0x08024ff4
 8006144:	0802500c 	.word	0x0802500c
 8006148:	08025020 	.word	0x08025020
 800614c:	080238ec 	.word	0x080238ec
 8006150:	08025034 	.word	0x08025034
 8006154:	08025044 	.word	0x08025044
 8006158:	080238cc 	.word	0x080238cc
 800615c:	08025058 	.word	0x08025058
 8006160:	08025068 	.word	0x08025068
 8006164:	0802507c 	.word	0x0802507c
 8006168:	08025094 	.word	0x08025094
		case 119 :
			strcpy(p->name,"ANTI JULIE");
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8006172:	49b0      	ldr	r1, [pc, #704]	; (8006434 <problem_fetch+0x4d70>)
 8006174:	461a      	mov	r2, r3
 8006176:	460b      	mov	r3, r1
 8006178:	cb03      	ldmia	r3!, {r0, r1}
 800617a:	6010      	str	r0, [r2, #0]
 800617c:	6051      	str	r1, [r2, #4]
 800617e:	8819      	ldrh	r1, [r3, #0]
 8006180:	789b      	ldrb	r3, [r3, #2]
 8006182:	8111      	strh	r1, [r2, #8]
 8006184:	7293      	strb	r3, [r2, #10]
			strcpy(p->grade,"7A");
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800618c:	4aaa      	ldr	r2, [pc, #680]	; (8006438 <problem_fetch+0x4d74>)
 800618e:	8811      	ldrh	r1, [r2, #0]
 8006190:	7892      	ldrb	r2, [r2, #2]
 8006192:	8019      	strh	r1, [r3, #0]
 8006194:	709a      	strb	r2, [r3, #2]
			p->moveSize = 6;
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	2206      	movs	r2, #6
 800619a:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,H,C,G,A,B");
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	33a4      	adds	r3, #164	; 0xa4
 80061a0:	4aa6      	ldr	r2, [pc, #664]	; (800643c <problem_fetch+0x4d78>)
 80061a2:	461c      	mov	r4, r3
 80061a4:	4613      	mov	r3, r2
 80061a6:	cb07      	ldmia	r3!, {r0, r1, r2}
 80061a8:	6020      	str	r0, [r4, #0]
 80061aa:	6061      	str	r1, [r4, #4]
 80061ac:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,10,13,17,18,6");
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	3304      	adds	r3, #4
 80061b2:	4aa3      	ldr	r2, [pc, #652]	; (8006440 <problem_fetch+0x4d7c>)
 80061b4:	461c      	mov	r4, r3
 80061b6:	4615      	mov	r5, r2
 80061b8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80061ba:	6020      	str	r0, [r4, #0]
 80061bc:	6061      	str	r1, [r4, #4]
 80061be:	60a2      	str	r2, [r4, #8]
 80061c0:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,e,d");
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 80061c8:	4a9e      	ldr	r2, [pc, #632]	; (8006444 <problem_fetch+0x4d80>)
 80061ca:	461c      	mov	r4, r3
 80061cc:	4613      	mov	r3, r2
 80061ce:	cb07      	ldmia	r3!, {r0, r1, r2}
 80061d0:	6020      	str	r0, [r4, #0]
 80061d2:	6061      	str	r1, [r4, #4]
 80061d4:	60a2      	str	r2, [r4, #8]
			break;
 80061d6:	f016 b9a5 	b.w	801c524 <problem_fetch+0x1ae60>
		case 120 :
			strcpy(p->name,"BROWN DIRTY WATER");
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80061e0:	4a99      	ldr	r2, [pc, #612]	; (8006448 <problem_fetch+0x4d84>)
 80061e2:	461d      	mov	r5, r3
 80061e4:	4614      	mov	r4, r2
 80061e6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80061e8:	6028      	str	r0, [r5, #0]
 80061ea:	6069      	str	r1, [r5, #4]
 80061ec:	60aa      	str	r2, [r5, #8]
 80061ee:	60eb      	str	r3, [r5, #12]
 80061f0:	8823      	ldrh	r3, [r4, #0]
 80061f2:	822b      	strh	r3, [r5, #16]
			strcpy(p->grade,"6C+");
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80061fa:	4a94      	ldr	r2, [pc, #592]	; (800644c <problem_fetch+0x4d88>)
 80061fc:	6810      	ldr	r0, [r2, #0]
 80061fe:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	2207      	movs	r2, #7
 8006204:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,J,H,C,F,A,D");
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	33a4      	adds	r3, #164	; 0xa4
 800620a:	4a91      	ldr	r2, [pc, #580]	; (8006450 <problem_fetch+0x4d8c>)
 800620c:	461c      	mov	r4, r3
 800620e:	4613      	mov	r3, r2
 8006210:	cb07      	ldmia	r3!, {r0, r1, r2}
 8006212:	6020      	str	r0, [r4, #0]
 8006214:	6061      	str	r1, [r4, #4]
 8006216:	60a2      	str	r2, [r4, #8]
 8006218:	881b      	ldrh	r3, [r3, #0]
 800621a:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"6,5,8,8,11,14,18");
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	3304      	adds	r3, #4
 8006220:	4a8c      	ldr	r2, [pc, #560]	; (8006454 <problem_fetch+0x4d90>)
 8006222:	461d      	mov	r5, r3
 8006224:	4614      	mov	r4, r2
 8006226:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006228:	6028      	str	r0, [r5, #0]
 800622a:	6069      	str	r1, [r5, #4]
 800622c:	60aa      	str	r2, [r5, #8]
 800622e:	60eb      	str	r3, [r5, #12]
 8006230:	7823      	ldrb	r3, [r4, #0]
 8006232:	742b      	strb	r3, [r5, #16]
			strcpy(p->startFinish,"s,s,d,d,d,d,e");
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800623a:	4a87      	ldr	r2, [pc, #540]	; (8006458 <problem_fetch+0x4d94>)
 800623c:	461c      	mov	r4, r3
 800623e:	4613      	mov	r3, r2
 8006240:	cb07      	ldmia	r3!, {r0, r1, r2}
 8006242:	6020      	str	r0, [r4, #0]
 8006244:	6061      	str	r1, [r4, #4]
 8006246:	60a2      	str	r2, [r4, #8]
 8006248:	881b      	ldrh	r3, [r3, #0]
 800624a:	81a3      	strh	r3, [r4, #12]
			break;
 800624c:	f016 b96a 	b.w	801c524 <problem_fetch+0x1ae60>
		case 121 :
			strcpy(p->name,"INNSMOUTH HORROR");
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8006256:	4a81      	ldr	r2, [pc, #516]	; (800645c <problem_fetch+0x4d98>)
 8006258:	461d      	mov	r5, r3
 800625a:	4614      	mov	r4, r2
 800625c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800625e:	6028      	str	r0, [r5, #0]
 8006260:	6069      	str	r1, [r5, #4]
 8006262:	60aa      	str	r2, [r5, #8]
 8006264:	60eb      	str	r3, [r5, #12]
 8006266:	7823      	ldrb	r3, [r4, #0]
 8006268:	742b      	strb	r3, [r5, #16]
			strcpy(p->grade,"6B+");
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8006270:	4a7b      	ldr	r2, [pc, #492]	; (8006460 <problem_fetch+0x4d9c>)
 8006272:	6810      	ldr	r0, [r2, #0]
 8006274:	6018      	str	r0, [r3, #0]
			p->moveSize = 9;
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	2209      	movs	r2, #9
 800627a:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"C,E,F,E,G,E,I,I,E");
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	33a4      	adds	r3, #164	; 0xa4
 8006280:	4a78      	ldr	r2, [pc, #480]	; (8006464 <problem_fetch+0x4da0>)
 8006282:	461d      	mov	r5, r3
 8006284:	4614      	mov	r4, r2
 8006286:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006288:	6028      	str	r0, [r5, #0]
 800628a:	6069      	str	r1, [r5, #4]
 800628c:	60aa      	str	r2, [r5, #8]
 800628e:	60eb      	str	r3, [r5, #12]
 8006290:	8823      	ldrh	r3, [r4, #0]
 8006292:	822b      	strh	r3, [r5, #16]
			strcpy(p->moveNumbers,"5,8,11,12,14,16,18,7,6");
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	3304      	adds	r3, #4
 8006298:	4a73      	ldr	r2, [pc, #460]	; (8006468 <problem_fetch+0x4da4>)
 800629a:	461c      	mov	r4, r3
 800629c:	4615      	mov	r5, r2
 800629e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80062a0:	6020      	str	r0, [r4, #0]
 80062a2:	6061      	str	r1, [r4, #4]
 80062a4:	60a2      	str	r2, [r4, #8]
 80062a6:	60e3      	str	r3, [r4, #12]
 80062a8:	6828      	ldr	r0, [r5, #0]
 80062aa:	6120      	str	r0, [r4, #16]
 80062ac:	88ab      	ldrh	r3, [r5, #4]
 80062ae:	79aa      	ldrb	r2, [r5, #6]
 80062b0:	82a3      	strh	r3, [r4, #20]
 80062b2:	4613      	mov	r3, r2
 80062b4:	75a3      	strb	r3, [r4, #22]
			strcpy(p->startFinish,"s,d,d,d,d,d,e,d,s");
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 80062bc:	4a6b      	ldr	r2, [pc, #428]	; (800646c <problem_fetch+0x4da8>)
 80062be:	461d      	mov	r5, r3
 80062c0:	4614      	mov	r4, r2
 80062c2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80062c4:	6028      	str	r0, [r5, #0]
 80062c6:	6069      	str	r1, [r5, #4]
 80062c8:	60aa      	str	r2, [r5, #8]
 80062ca:	60eb      	str	r3, [r5, #12]
 80062cc:	8823      	ldrh	r3, [r4, #0]
 80062ce:	822b      	strh	r3, [r5, #16]
			break;
 80062d0:	f016 b928 	b.w	801c524 <problem_fetch+0x1ae60>
		case 122 :
			strcpy(p->name,"PB AND JELLY");
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80062da:	4a65      	ldr	r2, [pc, #404]	; (8006470 <problem_fetch+0x4dac>)
 80062dc:	461c      	mov	r4, r3
 80062de:	4613      	mov	r3, r2
 80062e0:	cb07      	ldmia	r3!, {r0, r1, r2}
 80062e2:	6020      	str	r0, [r4, #0]
 80062e4:	6061      	str	r1, [r4, #4]
 80062e6:	60a2      	str	r2, [r4, #8]
 80062e8:	781b      	ldrb	r3, [r3, #0]
 80062ea:	7323      	strb	r3, [r4, #12]
			strcpy(p->grade,"6C+");
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80062f2:	4a56      	ldr	r2, [pc, #344]	; (800644c <problem_fetch+0x4d88>)
 80062f4:	6810      	ldr	r0, [r2, #0]
 80062f6:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	2207      	movs	r2, #7
 80062fc:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,E,I,E,H,I,D");
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	33a4      	adds	r3, #164	; 0xa4
 8006302:	4a5c      	ldr	r2, [pc, #368]	; (8006474 <problem_fetch+0x4db0>)
 8006304:	461c      	mov	r4, r3
 8006306:	4613      	mov	r3, r2
 8006308:	cb07      	ldmia	r3!, {r0, r1, r2}
 800630a:	6020      	str	r0, [r4, #0]
 800630c:	6061      	str	r1, [r4, #4]
 800630e:	60a2      	str	r2, [r4, #8]
 8006310:	881b      	ldrh	r3, [r3, #0]
 8006312:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,8,10,14,12,14,18");
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	3304      	adds	r3, #4
 8006318:	4a57      	ldr	r2, [pc, #348]	; (8006478 <problem_fetch+0x4db4>)
 800631a:	461d      	mov	r5, r3
 800631c:	4614      	mov	r4, r2
 800631e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006320:	6028      	str	r0, [r5, #0]
 8006322:	6069      	str	r1, [r5, #4]
 8006324:	60aa      	str	r2, [r5, #8]
 8006326:	60eb      	str	r3, [r5, #12]
 8006328:	8823      	ldrh	r3, [r4, #0]
 800632a:	78a2      	ldrb	r2, [r4, #2]
 800632c:	822b      	strh	r3, [r5, #16]
 800632e:	4613      	mov	r3, r2
 8006330:	74ab      	strb	r3, [r5, #18]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8006338:	4a50      	ldr	r2, [pc, #320]	; (800647c <problem_fetch+0x4db8>)
 800633a:	461c      	mov	r4, r3
 800633c:	4613      	mov	r3, r2
 800633e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8006340:	6020      	str	r0, [r4, #0]
 8006342:	6061      	str	r1, [r4, #4]
 8006344:	60a2      	str	r2, [r4, #8]
 8006346:	881b      	ldrh	r3, [r3, #0]
 8006348:	81a3      	strh	r3, [r4, #12]
			break;
 800634a:	f016 b8eb 	b.w	801c524 <problem_fetch+0x1ae60>
		case 123 :
			strcpy(p->name,"APRITI");
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8006354:	4a4a      	ldr	r2, [pc, #296]	; (8006480 <problem_fetch+0x4dbc>)
 8006356:	6810      	ldr	r0, [r2, #0]
 8006358:	6018      	str	r0, [r3, #0]
 800635a:	8891      	ldrh	r1, [r2, #4]
 800635c:	7992      	ldrb	r2, [r2, #6]
 800635e:	8099      	strh	r1, [r3, #4]
 8006360:	719a      	strb	r2, [r3, #6]
			strcpy(p->grade,"6C");
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8006368:	4a46      	ldr	r2, [pc, #280]	; (8006484 <problem_fetch+0x4dc0>)
 800636a:	8811      	ldrh	r1, [r2, #0]
 800636c:	7892      	ldrb	r2, [r2, #2]
 800636e:	8019      	strh	r1, [r3, #0]
 8006370:	709a      	strb	r2, [r3, #2]
			p->moveSize = 8;
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	2208      	movs	r2, #8
 8006376:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"C,E,E,H,D,C,D,D");
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	33a4      	adds	r3, #164	; 0xa4
 800637c:	4a42      	ldr	r2, [pc, #264]	; (8006488 <problem_fetch+0x4dc4>)
 800637e:	461c      	mov	r4, r3
 8006380:	4615      	mov	r5, r2
 8006382:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006384:	6020      	str	r0, [r4, #0]
 8006386:	6061      	str	r1, [r4, #4]
 8006388:	60a2      	str	r2, [r4, #8]
 800638a:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,6,8,10,11,13,15,18");
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	3304      	adds	r3, #4
 8006390:	4a3e      	ldr	r2, [pc, #248]	; (800648c <problem_fetch+0x4dc8>)
 8006392:	461d      	mov	r5, r3
 8006394:	4614      	mov	r4, r2
 8006396:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006398:	6028      	str	r0, [r5, #0]
 800639a:	6069      	str	r1, [r5, #4]
 800639c:	60aa      	str	r2, [r5, #8]
 800639e:	60eb      	str	r3, [r5, #12]
 80063a0:	6820      	ldr	r0, [r4, #0]
 80063a2:	6128      	str	r0, [r5, #16]
 80063a4:	7923      	ldrb	r3, [r4, #4]
 80063a6:	752b      	strb	r3, [r5, #20]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,e");
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 80063ae:	4a38      	ldr	r2, [pc, #224]	; (8006490 <problem_fetch+0x4dcc>)
 80063b0:	461c      	mov	r4, r3
 80063b2:	4615      	mov	r5, r2
 80063b4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80063b6:	6020      	str	r0, [r4, #0]
 80063b8:	6061      	str	r1, [r4, #4]
 80063ba:	60a2      	str	r2, [r4, #8]
 80063bc:	60e3      	str	r3, [r4, #12]
			break;
 80063be:	f016 b8b1 	b.w	801c524 <problem_fetch+0x1ae60>
		case 124 :
			strcpy(p->name,"LADYBUG DIRECT");
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80063c8:	4a32      	ldr	r2, [pc, #200]	; (8006494 <problem_fetch+0x4dd0>)
 80063ca:	461c      	mov	r4, r3
 80063cc:	4613      	mov	r3, r2
 80063ce:	cb07      	ldmia	r3!, {r0, r1, r2}
 80063d0:	6020      	str	r0, [r4, #0]
 80063d2:	6061      	str	r1, [r4, #4]
 80063d4:	60a2      	str	r2, [r4, #8]
 80063d6:	881a      	ldrh	r2, [r3, #0]
 80063d8:	789b      	ldrb	r3, [r3, #2]
 80063da:	81a2      	strh	r2, [r4, #12]
 80063dc:	73a3      	strb	r3, [r4, #14]
			strcpy(p->grade,"7A+");
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80063e4:	4a2c      	ldr	r2, [pc, #176]	; (8006498 <problem_fetch+0x4dd4>)
 80063e6:	6810      	ldr	r0, [r2, #0]
 80063e8:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	2206      	movs	r2, #6
 80063ee:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,J,H,C,D,A");
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	33a4      	adds	r3, #164	; 0xa4
 80063f4:	4a29      	ldr	r2, [pc, #164]	; (800649c <problem_fetch+0x4dd8>)
 80063f6:	461c      	mov	r4, r3
 80063f8:	4613      	mov	r3, r2
 80063fa:	cb07      	ldmia	r3!, {r0, r1, r2}
 80063fc:	6020      	str	r0, [r4, #0]
 80063fe:	6061      	str	r1, [r4, #4]
 8006400:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"6,5,10,13,18,9");
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	3304      	adds	r3, #4
 8006406:	4a26      	ldr	r2, [pc, #152]	; (80064a0 <problem_fetch+0x4ddc>)
 8006408:	461c      	mov	r4, r3
 800640a:	4613      	mov	r3, r2
 800640c:	cb07      	ldmia	r3!, {r0, r1, r2}
 800640e:	6020      	str	r0, [r4, #0]
 8006410:	6061      	str	r1, [r4, #4]
 8006412:	60a2      	str	r2, [r4, #8]
 8006414:	881a      	ldrh	r2, [r3, #0]
 8006416:	789b      	ldrb	r3, [r3, #2]
 8006418:	81a2      	strh	r2, [r4, #12]
 800641a:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish,"s,s,d,d,e,d");
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8006422:	4a20      	ldr	r2, [pc, #128]	; (80064a4 <problem_fetch+0x4de0>)
 8006424:	461c      	mov	r4, r3
 8006426:	4613      	mov	r3, r2
 8006428:	cb07      	ldmia	r3!, {r0, r1, r2}
 800642a:	6020      	str	r0, [r4, #0]
 800642c:	6061      	str	r1, [r4, #4]
 800642e:	60a2      	str	r2, [r4, #8]
			break;
 8006430:	f016 b878 	b.w	801c524 <problem_fetch+0x1ae60>
 8006434:	080250a8 	.word	0x080250a8
 8006438:	08023814 	.word	0x08023814
 800643c:	080250b4 	.word	0x080250b4
 8006440:	080250c0 	.word	0x080250c0
 8006444:	080250d0 	.word	0x080250d0
 8006448:	080250dc 	.word	0x080250dc
 800644c:	080238ec 	.word	0x080238ec
 8006450:	080250f0 	.word	0x080250f0
 8006454:	08025100 	.word	0x08025100
 8006458:	080238cc 	.word	0x080238cc
 800645c:	08025114 	.word	0x08025114
 8006460:	08023854 	.word	0x08023854
 8006464:	08025128 	.word	0x08025128
 8006468:	0802513c 	.word	0x0802513c
 800646c:	08025154 	.word	0x08025154
 8006470:	08025168 	.word	0x08025168
 8006474:	08025178 	.word	0x08025178
 8006478:	08025188 	.word	0x08025188
 800647c:	080239dc 	.word	0x080239dc
 8006480:	0802519c 	.word	0x0802519c
 8006484:	08023920 	.word	0x08023920
 8006488:	080251a4 	.word	0x080251a4
 800648c:	080251b4 	.word	0x080251b4
 8006490:	08023978 	.word	0x08023978
 8006494:	080251cc 	.word	0x080251cc
 8006498:	080239f4 	.word	0x080239f4
 800649c:	080251dc 	.word	0x080251dc
 80064a0:	080251e8 	.word	0x080251e8
 80064a4:	080251f8 	.word	0x080251f8
		case 125 :
			strcpy(p->name,"CATA");
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80064ae:	4abf      	ldr	r2, [pc, #764]	; (80067ac <problem_fetch+0x50e8>)
 80064b0:	6810      	ldr	r0, [r2, #0]
 80064b2:	6018      	str	r0, [r3, #0]
 80064b4:	7912      	ldrb	r2, [r2, #4]
 80064b6:	711a      	strb	r2, [r3, #4]
			strcpy(p->grade,"7A+");
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80064be:	4abc      	ldr	r2, [pc, #752]	; (80067b0 <problem_fetch+0x50ec>)
 80064c0:	6810      	ldr	r0, [r2, #0]
 80064c2:	6018      	str	r0, [r3, #0]
			p->moveSize = 5;
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	2205      	movs	r2, #5
 80064c8:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,J,F,A,D");
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	33a4      	adds	r3, #164	; 0xa4
 80064ce:	49b9      	ldr	r1, [pc, #740]	; (80067b4 <problem_fetch+0x50f0>)
 80064d0:	461a      	mov	r2, r3
 80064d2:	460b      	mov	r3, r1
 80064d4:	cb03      	ldmia	r3!, {r0, r1}
 80064d6:	6010      	str	r0, [r2, #0]
 80064d8:	6051      	str	r1, [r2, #4]
 80064da:	881b      	ldrh	r3, [r3, #0]
 80064dc:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"6,7,11,14,18");
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	3304      	adds	r3, #4
 80064e2:	4ab5      	ldr	r2, [pc, #724]	; (80067b8 <problem_fetch+0x50f4>)
 80064e4:	461c      	mov	r4, r3
 80064e6:	4613      	mov	r3, r2
 80064e8:	cb07      	ldmia	r3!, {r0, r1, r2}
 80064ea:	6020      	str	r0, [r4, #0]
 80064ec:	6061      	str	r1, [r4, #4]
 80064ee:	60a2      	str	r2, [r4, #8]
 80064f0:	781b      	ldrb	r3, [r3, #0]
 80064f2:	7323      	strb	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,e");
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 80064fa:	49b0      	ldr	r1, [pc, #704]	; (80067bc <problem_fetch+0x50f8>)
 80064fc:	461a      	mov	r2, r3
 80064fe:	460b      	mov	r3, r1
 8006500:	cb03      	ldmia	r3!, {r0, r1}
 8006502:	6010      	str	r0, [r2, #0]
 8006504:	6051      	str	r1, [r2, #4]
 8006506:	881b      	ldrh	r3, [r3, #0]
 8006508:	8113      	strh	r3, [r2, #8]
			break;
 800650a:	f016 b80b 	b.w	801c524 <problem_fetch+0x1ae60>
		case 126 :
			strcpy(p->name,"TRØNDERSPOTT");
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8006514:	4aaa      	ldr	r2, [pc, #680]	; (80067c0 <problem_fetch+0x50fc>)
 8006516:	461c      	mov	r4, r3
 8006518:	4613      	mov	r3, r2
 800651a:	cb07      	ldmia	r3!, {r0, r1, r2}
 800651c:	6020      	str	r0, [r4, #0]
 800651e:	6061      	str	r1, [r4, #4]
 8006520:	60a2      	str	r2, [r4, #8]
 8006522:	881b      	ldrh	r3, [r3, #0]
 8006524:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade,"6B+");
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800652c:	4aa5      	ldr	r2, [pc, #660]	; (80067c4 <problem_fetch+0x5100>)
 800652e:	6810      	ldr	r0, [r2, #0]
 8006530:	6018      	str	r0, [r3, #0]
			p->moveSize = 5;
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	2205      	movs	r2, #5
 8006536:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,E,H,C,D");
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	33a4      	adds	r3, #164	; 0xa4
 800653c:	49a2      	ldr	r1, [pc, #648]	; (80067c8 <problem_fetch+0x5104>)
 800653e:	461a      	mov	r2, r3
 8006540:	460b      	mov	r3, r1
 8006542:	cb03      	ldmia	r3!, {r0, r1}
 8006544:	6010      	str	r0, [r2, #0]
 8006546:	6051      	str	r1, [r2, #4]
 8006548:	881b      	ldrh	r3, [r3, #0]
 800654a:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"4,6,10,13,18");
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	3304      	adds	r3, #4
 8006550:	4a9e      	ldr	r2, [pc, #632]	; (80067cc <problem_fetch+0x5108>)
 8006552:	461c      	mov	r4, r3
 8006554:	4613      	mov	r3, r2
 8006556:	cb07      	ldmia	r3!, {r0, r1, r2}
 8006558:	6020      	str	r0, [r4, #0]
 800655a:	6061      	str	r1, [r4, #4]
 800655c:	60a2      	str	r2, [r4, #8]
 800655e:	781b      	ldrb	r3, [r3, #0]
 8006560:	7323      	strb	r3, [r4, #12]
			strcpy(p->startFinish,"s,s,d,d,e");
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8006568:	4999      	ldr	r1, [pc, #612]	; (80067d0 <problem_fetch+0x510c>)
 800656a:	461a      	mov	r2, r3
 800656c:	460b      	mov	r3, r1
 800656e:	cb03      	ldmia	r3!, {r0, r1}
 8006570:	6010      	str	r0, [r2, #0]
 8006572:	6051      	str	r1, [r2, #4]
 8006574:	881b      	ldrh	r3, [r3, #0]
 8006576:	8113      	strh	r3, [r2, #8]
			break;
 8006578:	f015 bfd4 	b.w	801c524 <problem_fetch+0x1ae60>
		case 127 :
			strcpy(p->name,"RYEBREAD");
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8006582:	4994      	ldr	r1, [pc, #592]	; (80067d4 <problem_fetch+0x5110>)
 8006584:	461a      	mov	r2, r3
 8006586:	460b      	mov	r3, r1
 8006588:	cb03      	ldmia	r3!, {r0, r1}
 800658a:	6010      	str	r0, [r2, #0]
 800658c:	6051      	str	r1, [r2, #4]
 800658e:	781b      	ldrb	r3, [r3, #0]
 8006590:	7213      	strb	r3, [r2, #8]
			strcpy(p->grade,"7C+");
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8006598:	4a8f      	ldr	r2, [pc, #572]	; (80067d8 <problem_fetch+0x5114>)
 800659a:	6810      	ldr	r0, [r2, #0]
 800659c:	6018      	str	r0, [r3, #0]
			p->moveSize = 5;
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	2205      	movs	r2, #5
 80065a2:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,F,C,A,A");
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	33a4      	adds	r3, #164	; 0xa4
 80065a8:	498c      	ldr	r1, [pc, #560]	; (80067dc <problem_fetch+0x5118>)
 80065aa:	461a      	mov	r2, r3
 80065ac:	460b      	mov	r3, r1
 80065ae:	cb03      	ldmia	r3!, {r0, r1}
 80065b0:	6010      	str	r0, [r2, #0]
 80065b2:	6051      	str	r1, [r2, #4]
 80065b4:	881b      	ldrh	r3, [r3, #0]
 80065b6:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"4,11,5,14,18");
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	3304      	adds	r3, #4
 80065bc:	4a88      	ldr	r2, [pc, #544]	; (80067e0 <problem_fetch+0x511c>)
 80065be:	461c      	mov	r4, r3
 80065c0:	4613      	mov	r3, r2
 80065c2:	cb07      	ldmia	r3!, {r0, r1, r2}
 80065c4:	6020      	str	r0, [r4, #0]
 80065c6:	6061      	str	r1, [r4, #4]
 80065c8:	60a2      	str	r2, [r4, #8]
 80065ca:	781b      	ldrb	r3, [r3, #0]
 80065cc:	7323      	strb	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,e");
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 80065d4:	4979      	ldr	r1, [pc, #484]	; (80067bc <problem_fetch+0x50f8>)
 80065d6:	461a      	mov	r2, r3
 80065d8:	460b      	mov	r3, r1
 80065da:	cb03      	ldmia	r3!, {r0, r1}
 80065dc:	6010      	str	r0, [r2, #0]
 80065de:	6051      	str	r1, [r2, #4]
 80065e0:	881b      	ldrh	r3, [r3, #0]
 80065e2:	8113      	strh	r3, [r2, #8]
			break;
 80065e4:	f015 bf9e 	b.w	801c524 <problem_fetch+0x1ae60>
		case 128 :
			strcpy(p->name,"SUPE");
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80065ee:	4a7d      	ldr	r2, [pc, #500]	; (80067e4 <problem_fetch+0x5120>)
 80065f0:	6810      	ldr	r0, [r2, #0]
 80065f2:	6018      	str	r0, [r3, #0]
 80065f4:	7912      	ldrb	r2, [r2, #4]
 80065f6:	711a      	strb	r2, [r3, #4]
			strcpy(p->grade,"6C+");
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80065fe:	4a7a      	ldr	r2, [pc, #488]	; (80067e8 <problem_fetch+0x5124>)
 8006600:	6810      	ldr	r0, [r2, #0]
 8006602:	6018      	str	r0, [r3, #0]
			p->moveSize = 8;
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	2208      	movs	r2, #8
 8006608:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,I,G,G,C,G,E,I");
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	33a4      	adds	r3, #164	; 0xa4
 800660e:	4a77      	ldr	r2, [pc, #476]	; (80067ec <problem_fetch+0x5128>)
 8006610:	461c      	mov	r4, r3
 8006612:	4615      	mov	r5, r2
 8006614:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006616:	6020      	str	r0, [r4, #0]
 8006618:	6061      	str	r1, [r4, #4]
 800661a:	60a2      	str	r2, [r4, #8]
 800661c:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,7,6,10,13,14,16,18");
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	3304      	adds	r3, #4
 8006622:	4a73      	ldr	r2, [pc, #460]	; (80067f0 <problem_fetch+0x512c>)
 8006624:	461d      	mov	r5, r3
 8006626:	4614      	mov	r4, r2
 8006628:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800662a:	6028      	str	r0, [r5, #0]
 800662c:	6069      	str	r1, [r5, #4]
 800662e:	60aa      	str	r2, [r5, #8]
 8006630:	60eb      	str	r3, [r5, #12]
 8006632:	6820      	ldr	r0, [r4, #0]
 8006634:	6128      	str	r0, [r5, #16]
 8006636:	7923      	ldrb	r3, [r4, #4]
 8006638:	752b      	strb	r3, [r5, #20]
			strcpy(p->startFinish,"s,d,d,d,d,d,d,e");
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8006640:	4a6c      	ldr	r2, [pc, #432]	; (80067f4 <problem_fetch+0x5130>)
 8006642:	461c      	mov	r4, r3
 8006644:	4615      	mov	r5, r2
 8006646:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006648:	6020      	str	r0, [r4, #0]
 800664a:	6061      	str	r1, [r4, #4]
 800664c:	60a2      	str	r2, [r4, #8]
 800664e:	60e3      	str	r3, [r4, #12]
			break;
 8006650:	f015 bf68 	b.w	801c524 <problem_fetch+0x1ae60>
		case 129 :
			strcpy(p->name,"LONG BOI 2");
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800665a:	4967      	ldr	r1, [pc, #412]	; (80067f8 <problem_fetch+0x5134>)
 800665c:	461a      	mov	r2, r3
 800665e:	460b      	mov	r3, r1
 8006660:	cb03      	ldmia	r3!, {r0, r1}
 8006662:	6010      	str	r0, [r2, #0]
 8006664:	6051      	str	r1, [r2, #4]
 8006666:	8819      	ldrh	r1, [r3, #0]
 8006668:	789b      	ldrb	r3, [r3, #2]
 800666a:	8111      	strh	r1, [r2, #8]
 800666c:	7293      	strb	r3, [r2, #10]
			strcpy(p->grade,"7A+");
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8006674:	4a4e      	ldr	r2, [pc, #312]	; (80067b0 <problem_fetch+0x50ec>)
 8006676:	6810      	ldr	r0, [r2, #0]
 8006678:	6018      	str	r0, [r3, #0]
			p->moveSize = 4;
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	2204      	movs	r2, #4
 800667e:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"E,H,G,I");
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	33a4      	adds	r3, #164	; 0xa4
 8006684:	495d      	ldr	r1, [pc, #372]	; (80067fc <problem_fetch+0x5138>)
 8006686:	461a      	mov	r2, r3
 8006688:	460b      	mov	r3, r1
 800668a:	cb03      	ldmia	r3!, {r0, r1}
 800668c:	6010      	str	r0, [r2, #0]
 800668e:	6051      	str	r1, [r2, #4]
			strcpy(p->moveNumbers,"6,10,15,18");
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	3304      	adds	r3, #4
 8006694:	495a      	ldr	r1, [pc, #360]	; (8006800 <problem_fetch+0x513c>)
 8006696:	461a      	mov	r2, r3
 8006698:	460b      	mov	r3, r1
 800669a:	cb03      	ldmia	r3!, {r0, r1}
 800669c:	6010      	str	r0, [r2, #0]
 800669e:	6051      	str	r1, [r2, #4]
 80066a0:	8819      	ldrh	r1, [r3, #0]
 80066a2:	789b      	ldrb	r3, [r3, #2]
 80066a4:	8111      	strh	r1, [r2, #8]
 80066a6:	7293      	strb	r3, [r2, #10]
			strcpy(p->startFinish,"s,d,d,e");
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 80066ae:	4955      	ldr	r1, [pc, #340]	; (8006804 <problem_fetch+0x5140>)
 80066b0:	461a      	mov	r2, r3
 80066b2:	460b      	mov	r3, r1
 80066b4:	cb03      	ldmia	r3!, {r0, r1}
 80066b6:	6010      	str	r0, [r2, #0]
 80066b8:	6051      	str	r1, [r2, #4]
			break;
 80066ba:	f015 bf33 	b.w	801c524 <problem_fetch+0x1ae60>
		case 130 :
			strcpy(p->name,"PHILLING SHIFTS");
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80066c4:	4a50      	ldr	r2, [pc, #320]	; (8006808 <problem_fetch+0x5144>)
 80066c6:	461c      	mov	r4, r3
 80066c8:	4615      	mov	r5, r2
 80066ca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80066cc:	6020      	str	r0, [r4, #0]
 80066ce:	6061      	str	r1, [r4, #4]
 80066d0:	60a2      	str	r2, [r4, #8]
 80066d2:	60e3      	str	r3, [r4, #12]
			strcpy(p->grade,"7C");
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80066da:	4a4c      	ldr	r2, [pc, #304]	; (800680c <problem_fetch+0x5148>)
 80066dc:	8811      	ldrh	r1, [r2, #0]
 80066de:	7892      	ldrb	r2, [r2, #2]
 80066e0:	8019      	strh	r1, [r3, #0]
 80066e2:	709a      	strb	r2, [r3, #2]
			p->moveSize = 7;
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	2207      	movs	r2, #7
 80066e8:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"A,D,E,J,H,K,G");
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	33a4      	adds	r3, #164	; 0xa4
 80066ee:	4a48      	ldr	r2, [pc, #288]	; (8006810 <problem_fetch+0x514c>)
 80066f0:	461c      	mov	r4, r3
 80066f2:	4613      	mov	r3, r2
 80066f4:	cb07      	ldmia	r3!, {r0, r1, r2}
 80066f6:	6020      	str	r0, [r4, #0]
 80066f8:	6061      	str	r1, [r4, #4]
 80066fa:	60a2      	str	r2, [r4, #8]
 80066fc:	881b      	ldrh	r3, [r3, #0]
 80066fe:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"18,18,14,12,8,9,4");
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	3304      	adds	r3, #4
 8006704:	4a43      	ldr	r2, [pc, #268]	; (8006814 <problem_fetch+0x5150>)
 8006706:	461d      	mov	r5, r3
 8006708:	4614      	mov	r4, r2
 800670a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800670c:	6028      	str	r0, [r5, #0]
 800670e:	6069      	str	r1, [r5, #4]
 8006710:	60aa      	str	r2, [r5, #8]
 8006712:	60eb      	str	r3, [r5, #12]
 8006714:	8823      	ldrh	r3, [r4, #0]
 8006716:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"e,e,d,d,d,d,s");
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800671e:	4a3e      	ldr	r2, [pc, #248]	; (8006818 <problem_fetch+0x5154>)
 8006720:	461c      	mov	r4, r3
 8006722:	4613      	mov	r3, r2
 8006724:	cb07      	ldmia	r3!, {r0, r1, r2}
 8006726:	6020      	str	r0, [r4, #0]
 8006728:	6061      	str	r1, [r4, #4]
 800672a:	60a2      	str	r2, [r4, #8]
 800672c:	881b      	ldrh	r3, [r3, #0]
 800672e:	81a3      	strh	r3, [r4, #12]
			break;
 8006730:	f015 bef8 	b.w	801c524 <problem_fetch+0x1ae60>
		case 131 :
			strcpy(p->name,"HOJAR KLUBBEN");
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800673a:	4a38      	ldr	r2, [pc, #224]	; (800681c <problem_fetch+0x5158>)
 800673c:	461c      	mov	r4, r3
 800673e:	4613      	mov	r3, r2
 8006740:	cb07      	ldmia	r3!, {r0, r1, r2}
 8006742:	6020      	str	r0, [r4, #0]
 8006744:	6061      	str	r1, [r4, #4]
 8006746:	60a2      	str	r2, [r4, #8]
 8006748:	881b      	ldrh	r3, [r3, #0]
 800674a:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade,"7B");
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8006752:	4a33      	ldr	r2, [pc, #204]	; (8006820 <problem_fetch+0x515c>)
 8006754:	8811      	ldrh	r1, [r2, #0]
 8006756:	7892      	ldrb	r2, [r2, #2]
 8006758:	8019      	strh	r1, [r3, #0]
 800675a:	709a      	strb	r2, [r3, #2]
			p->moveSize = 7;
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	2207      	movs	r2, #7
 8006760:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"E,H,J,G,H,G,I");
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	33a4      	adds	r3, #164	; 0xa4
 8006766:	4a2f      	ldr	r2, [pc, #188]	; (8006824 <problem_fetch+0x5160>)
 8006768:	461c      	mov	r4, r3
 800676a:	4613      	mov	r3, r2
 800676c:	cb07      	ldmia	r3!, {r0, r1, r2}
 800676e:	6020      	str	r0, [r4, #0]
 8006770:	6061      	str	r1, [r4, #4]
 8006772:	60a2      	str	r2, [r4, #8]
 8006774:	881b      	ldrh	r3, [r3, #0]
 8006776:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"6,10,13,15,16,17,18");
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	3304      	adds	r3, #4
 800677c:	4a2a      	ldr	r2, [pc, #168]	; (8006828 <problem_fetch+0x5164>)
 800677e:	461d      	mov	r5, r3
 8006780:	4614      	mov	r4, r2
 8006782:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006784:	6028      	str	r0, [r5, #0]
 8006786:	6069      	str	r1, [r5, #4]
 8006788:	60aa      	str	r2, [r5, #8]
 800678a:	60eb      	str	r3, [r5, #12]
 800678c:	6820      	ldr	r0, [r4, #0]
 800678e:	6128      	str	r0, [r5, #16]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8006796:	4a25      	ldr	r2, [pc, #148]	; (800682c <problem_fetch+0x5168>)
 8006798:	461c      	mov	r4, r3
 800679a:	4613      	mov	r3, r2
 800679c:	cb07      	ldmia	r3!, {r0, r1, r2}
 800679e:	6020      	str	r0, [r4, #0]
 80067a0:	6061      	str	r1, [r4, #4]
 80067a2:	60a2      	str	r2, [r4, #8]
 80067a4:	881b      	ldrh	r3, [r3, #0]
 80067a6:	81a3      	strh	r3, [r4, #12]
			break;
 80067a8:	f015 bebc 	b.w	801c524 <problem_fetch+0x1ae60>
 80067ac:	08025204 	.word	0x08025204
 80067b0:	080239f4 	.word	0x080239f4
 80067b4:	0802520c 	.word	0x0802520c
 80067b8:	08025218 	.word	0x08025218
 80067bc:	08023d20 	.word	0x08023d20
 80067c0:	08025228 	.word	0x08025228
 80067c4:	08023854 	.word	0x08023854
 80067c8:	08025238 	.word	0x08025238
 80067cc:	08025244 	.word	0x08025244
 80067d0:	08023f34 	.word	0x08023f34
 80067d4:	08025254 	.word	0x08025254
 80067d8:	08023e60 	.word	0x08023e60
 80067dc:	08025260 	.word	0x08025260
 80067e0:	0802526c 	.word	0x0802526c
 80067e4:	0802527c 	.word	0x0802527c
 80067e8:	080238ec 	.word	0x080238ec
 80067ec:	08025284 	.word	0x08025284
 80067f0:	08025294 	.word	0x08025294
 80067f4:	08023a64 	.word	0x08023a64
 80067f8:	080252ac 	.word	0x080252ac
 80067fc:	080252b8 	.word	0x080252b8
 8006800:	080252c0 	.word	0x080252c0
 8006804:	080239a8 	.word	0x080239a8
 8006808:	080252cc 	.word	0x080252cc
 800680c:	08024088 	.word	0x08024088
 8006810:	080252dc 	.word	0x080252dc
 8006814:	080252ec 	.word	0x080252ec
 8006818:	08025300 	.word	0x08025300
 800681c:	08025310 	.word	0x08025310
 8006820:	08023f4c 	.word	0x08023f4c
 8006824:	08025320 	.word	0x08025320
 8006828:	08025330 	.word	0x08025330
 800682c:	080239dc 	.word	0x080239dc
		case 132 :
			strcpy(p->name,"TRIP4");
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8006836:	4ac3      	ldr	r2, [pc, #780]	; (8006b44 <problem_fetch+0x5480>)
 8006838:	6810      	ldr	r0, [r2, #0]
 800683a:	6018      	str	r0, [r3, #0]
 800683c:	8892      	ldrh	r2, [r2, #4]
 800683e:	809a      	strh	r2, [r3, #4]
			strcpy(p->grade,"7C+");
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8006846:	4ac0      	ldr	r2, [pc, #768]	; (8006b48 <problem_fetch+0x5484>)
 8006848:	6810      	ldr	r0, [r2, #0]
 800684a:	6018      	str	r0, [r3, #0]
			p->moveSize = 9;
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	2209      	movs	r2, #9
 8006850:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"H,J,K,J,H,D,D,I,D");
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	33a4      	adds	r3, #164	; 0xa4
 8006856:	4abd      	ldr	r2, [pc, #756]	; (8006b4c <problem_fetch+0x5488>)
 8006858:	461d      	mov	r5, r3
 800685a:	4614      	mov	r4, r2
 800685c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800685e:	6028      	str	r0, [r5, #0]
 8006860:	6069      	str	r1, [r5, #4]
 8006862:	60aa      	str	r2, [r5, #8]
 8006864:	60eb      	str	r3, [r5, #12]
 8006866:	8823      	ldrh	r3, [r4, #0]
 8006868:	822b      	strh	r3, [r5, #16]
			strcpy(p->moveNumbers,"5,5,9,13,12,11,7,7,18");
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	3304      	adds	r3, #4
 800686e:	4ab8      	ldr	r2, [pc, #736]	; (8006b50 <problem_fetch+0x548c>)
 8006870:	461d      	mov	r5, r3
 8006872:	4614      	mov	r4, r2
 8006874:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006876:	6028      	str	r0, [r5, #0]
 8006878:	6069      	str	r1, [r5, #4]
 800687a:	60aa      	str	r2, [r5, #8]
 800687c:	60eb      	str	r3, [r5, #12]
 800687e:	6820      	ldr	r0, [r4, #0]
 8006880:	6128      	str	r0, [r5, #16]
 8006882:	88a3      	ldrh	r3, [r4, #4]
 8006884:	82ab      	strh	r3, [r5, #20]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,d,e");
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800688c:	4ab1      	ldr	r2, [pc, #708]	; (8006b54 <problem_fetch+0x5490>)
 800688e:	461d      	mov	r5, r3
 8006890:	4614      	mov	r4, r2
 8006892:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006894:	6028      	str	r0, [r5, #0]
 8006896:	6069      	str	r1, [r5, #4]
 8006898:	60aa      	str	r2, [r5, #8]
 800689a:	60eb      	str	r3, [r5, #12]
 800689c:	8823      	ldrh	r3, [r4, #0]
 800689e:	822b      	strh	r3, [r5, #16]
			break;
 80068a0:	f015 be40 	b.w	801c524 <problem_fetch+0x1ae60>
		case 133 :
			strcpy(p->name,"TRIP3");
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80068aa:	4aab      	ldr	r2, [pc, #684]	; (8006b58 <problem_fetch+0x5494>)
 80068ac:	6810      	ldr	r0, [r2, #0]
 80068ae:	6018      	str	r0, [r3, #0]
 80068b0:	8892      	ldrh	r2, [r2, #4]
 80068b2:	809a      	strh	r2, [r3, #4]
			strcpy(p->grade,"7A+");
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80068ba:	4aa8      	ldr	r2, [pc, #672]	; (8006b5c <problem_fetch+0x5498>)
 80068bc:	6810      	ldr	r0, [r2, #0]
 80068be:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	2206      	movs	r2, #6
 80068c4:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"E,E,B,C,C,D");
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	33a4      	adds	r3, #164	; 0xa4
 80068ca:	4aa5      	ldr	r2, [pc, #660]	; (8006b60 <problem_fetch+0x549c>)
 80068cc:	461c      	mov	r4, r3
 80068ce:	4613      	mov	r3, r2
 80068d0:	cb07      	ldmia	r3!, {r0, r1, r2}
 80068d2:	6020      	str	r0, [r4, #0]
 80068d4:	6061      	str	r1, [r4, #4]
 80068d6:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"12,6,10,8,5,18");
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	3304      	adds	r3, #4
 80068dc:	4aa1      	ldr	r2, [pc, #644]	; (8006b64 <problem_fetch+0x54a0>)
 80068de:	461c      	mov	r4, r3
 80068e0:	4613      	mov	r3, r2
 80068e2:	cb07      	ldmia	r3!, {r0, r1, r2}
 80068e4:	6020      	str	r0, [r4, #0]
 80068e6:	6061      	str	r1, [r4, #4]
 80068e8:	60a2      	str	r2, [r4, #8]
 80068ea:	881a      	ldrh	r2, [r3, #0]
 80068ec:	789b      	ldrb	r3, [r3, #2]
 80068ee:	81a2      	strh	r2, [r4, #12]
 80068f0:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish,"d,s,d,d,s,e");
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 80068f8:	4a9b      	ldr	r2, [pc, #620]	; (8006b68 <problem_fetch+0x54a4>)
 80068fa:	461c      	mov	r4, r3
 80068fc:	4613      	mov	r3, r2
 80068fe:	cb07      	ldmia	r3!, {r0, r1, r2}
 8006900:	6020      	str	r0, [r4, #0]
 8006902:	6061      	str	r1, [r4, #4]
 8006904:	60a2      	str	r2, [r4, #8]
			break;
 8006906:	f015 be0d 	b.w	801c524 <problem_fetch+0x1ae60>
		case 134 :
			strcpy(p->name,"LEVITATOR MUSIC");
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8006910:	4a96      	ldr	r2, [pc, #600]	; (8006b6c <problem_fetch+0x54a8>)
 8006912:	461c      	mov	r4, r3
 8006914:	4615      	mov	r5, r2
 8006916:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006918:	6020      	str	r0, [r4, #0]
 800691a:	6061      	str	r1, [r4, #4]
 800691c:	60a2      	str	r2, [r4, #8]
 800691e:	60e3      	str	r3, [r4, #12]
			strcpy(p->grade,"7A+");
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8006926:	4a8d      	ldr	r2, [pc, #564]	; (8006b5c <problem_fetch+0x5498>)
 8006928:	6810      	ldr	r0, [r2, #0]
 800692a:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	2207      	movs	r2, #7
 8006930:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,A,A,F,K,J,I");
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	33a4      	adds	r3, #164	; 0xa4
 8006936:	4a8e      	ldr	r2, [pc, #568]	; (8006b70 <problem_fetch+0x54ac>)
 8006938:	461c      	mov	r4, r3
 800693a:	4613      	mov	r3, r2
 800693c:	cb07      	ldmia	r3!, {r0, r1, r2}
 800693e:	6020      	str	r0, [r4, #0]
 8006940:	6061      	str	r1, [r4, #4]
 8006942:	60a2      	str	r2, [r4, #8]
 8006944:	881b      	ldrh	r3, [r3, #0]
 8006946:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"14,14,18,11,9,5,7");
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	3304      	adds	r3, #4
 800694c:	4a89      	ldr	r2, [pc, #548]	; (8006b74 <problem_fetch+0x54b0>)
 800694e:	461d      	mov	r5, r3
 8006950:	4614      	mov	r4, r2
 8006952:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006954:	6028      	str	r0, [r5, #0]
 8006956:	6069      	str	r1, [r5, #4]
 8006958:	60aa      	str	r2, [r5, #8]
 800695a:	60eb      	str	r3, [r5, #12]
 800695c:	8823      	ldrh	r3, [r4, #0]
 800695e:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"d,d,e,d,d,s,d");
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8006966:	4a84      	ldr	r2, [pc, #528]	; (8006b78 <problem_fetch+0x54b4>)
 8006968:	461c      	mov	r4, r3
 800696a:	4613      	mov	r3, r2
 800696c:	cb07      	ldmia	r3!, {r0, r1, r2}
 800696e:	6020      	str	r0, [r4, #0]
 8006970:	6061      	str	r1, [r4, #4]
 8006972:	60a2      	str	r2, [r4, #8]
 8006974:	881b      	ldrh	r3, [r3, #0]
 8006976:	81a3      	strh	r3, [r4, #12]
			break;
 8006978:	f015 bdd4 	b.w	801c524 <problem_fetch+0x1ae60>
		case 135 :
			strcpy(p->name,"ELEVATOR MUSIC");
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8006982:	4a7e      	ldr	r2, [pc, #504]	; (8006b7c <problem_fetch+0x54b8>)
 8006984:	461c      	mov	r4, r3
 8006986:	4613      	mov	r3, r2
 8006988:	cb07      	ldmia	r3!, {r0, r1, r2}
 800698a:	6020      	str	r0, [r4, #0]
 800698c:	6061      	str	r1, [r4, #4]
 800698e:	60a2      	str	r2, [r4, #8]
 8006990:	881a      	ldrh	r2, [r3, #0]
 8006992:	789b      	ldrb	r3, [r3, #2]
 8006994:	81a2      	strh	r2, [r4, #12]
 8006996:	73a3      	strb	r3, [r4, #14]
			strcpy(p->grade,"7A");
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800699e:	4a78      	ldr	r2, [pc, #480]	; (8006b80 <problem_fetch+0x54bc>)
 80069a0:	8811      	ldrh	r1, [r2, #0]
 80069a2:	7892      	ldrb	r2, [r2, #2]
 80069a4:	8019      	strh	r1, [r3, #0]
 80069a6:	709a      	strb	r2, [r3, #2]
			p->moveSize = 6;
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	2206      	movs	r2, #6
 80069ac:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"D,G,K,J,F,I");
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	33a4      	adds	r3, #164	; 0xa4
 80069b2:	4a74      	ldr	r2, [pc, #464]	; (8006b84 <problem_fetch+0x54c0>)
 80069b4:	461c      	mov	r4, r3
 80069b6:	4613      	mov	r3, r2
 80069b8:	cb07      	ldmia	r3!, {r0, r1, r2}
 80069ba:	6020      	str	r0, [r4, #0]
 80069bc:	6061      	str	r1, [r4, #4]
 80069be:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"18,14,9,5,11,7");
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	3304      	adds	r3, #4
 80069c4:	4a70      	ldr	r2, [pc, #448]	; (8006b88 <problem_fetch+0x54c4>)
 80069c6:	461c      	mov	r4, r3
 80069c8:	4613      	mov	r3, r2
 80069ca:	cb07      	ldmia	r3!, {r0, r1, r2}
 80069cc:	6020      	str	r0, [r4, #0]
 80069ce:	6061      	str	r1, [r4, #4]
 80069d0:	60a2      	str	r2, [r4, #8]
 80069d2:	881a      	ldrh	r2, [r3, #0]
 80069d4:	789b      	ldrb	r3, [r3, #2]
 80069d6:	81a2      	strh	r2, [r4, #12]
 80069d8:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish,"e,d,d,s,d,d");
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 80069e0:	4a6a      	ldr	r2, [pc, #424]	; (8006b8c <problem_fetch+0x54c8>)
 80069e2:	461c      	mov	r4, r3
 80069e4:	4613      	mov	r3, r2
 80069e6:	cb07      	ldmia	r3!, {r0, r1, r2}
 80069e8:	6020      	str	r0, [r4, #0]
 80069ea:	6061      	str	r1, [r4, #4]
 80069ec:	60a2      	str	r2, [r4, #8]
			break;
 80069ee:	f015 bd99 	b.w	801c524 <problem_fetch+0x1ae60>
		case 136 :
			strcpy(p->name,"POPPED A XAN-DON");
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80069f8:	4a65      	ldr	r2, [pc, #404]	; (8006b90 <problem_fetch+0x54cc>)
 80069fa:	461d      	mov	r5, r3
 80069fc:	4614      	mov	r4, r2
 80069fe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006a00:	6028      	str	r0, [r5, #0]
 8006a02:	6069      	str	r1, [r5, #4]
 8006a04:	60aa      	str	r2, [r5, #8]
 8006a06:	60eb      	str	r3, [r5, #12]
 8006a08:	7823      	ldrb	r3, [r4, #0]
 8006a0a:	742b      	strb	r3, [r5, #16]
			strcpy(p->grade,"7B+");
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8006a12:	4a60      	ldr	r2, [pc, #384]	; (8006b94 <problem_fetch+0x54d0>)
 8006a14:	6810      	ldr	r0, [r2, #0]
 8006a16:	6018      	str	r0, [r3, #0]
			p->moveSize = 5;
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	2205      	movs	r2, #5
 8006a1c:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"C,G,H,K,I");
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	33a4      	adds	r3, #164	; 0xa4
 8006a22:	495d      	ldr	r1, [pc, #372]	; (8006b98 <problem_fetch+0x54d4>)
 8006a24:	461a      	mov	r2, r3
 8006a26:	460b      	mov	r3, r1
 8006a28:	cb03      	ldmia	r3!, {r0, r1}
 8006a2a:	6010      	str	r0, [r2, #0]
 8006a2c:	6051      	str	r1, [r2, #4]
 8006a2e:	881b      	ldrh	r3, [r3, #0]
 8006a30:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"5,9,12,14,18");
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	3304      	adds	r3, #4
 8006a36:	4a59      	ldr	r2, [pc, #356]	; (8006b9c <problem_fetch+0x54d8>)
 8006a38:	461c      	mov	r4, r3
 8006a3a:	4613      	mov	r3, r2
 8006a3c:	cb07      	ldmia	r3!, {r0, r1, r2}
 8006a3e:	6020      	str	r0, [r4, #0]
 8006a40:	6061      	str	r1, [r4, #4]
 8006a42:	60a2      	str	r2, [r4, #8]
 8006a44:	781b      	ldrb	r3, [r3, #0]
 8006a46:	7323      	strb	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,e");
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8006a4e:	4954      	ldr	r1, [pc, #336]	; (8006ba0 <problem_fetch+0x54dc>)
 8006a50:	461a      	mov	r2, r3
 8006a52:	460b      	mov	r3, r1
 8006a54:	cb03      	ldmia	r3!, {r0, r1}
 8006a56:	6010      	str	r0, [r2, #0]
 8006a58:	6051      	str	r1, [r2, #4]
 8006a5a:	881b      	ldrh	r3, [r3, #0]
 8006a5c:	8113      	strh	r3, [r2, #8]
			break;
 8006a5e:	f015 bd61 	b.w	801c524 <problem_fetch+0x1ae60>
		case 137 :
			strcpy(p->name,"DOMINOS PINZA");
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8006a68:	4a4e      	ldr	r2, [pc, #312]	; (8006ba4 <problem_fetch+0x54e0>)
 8006a6a:	461c      	mov	r4, r3
 8006a6c:	4613      	mov	r3, r2
 8006a6e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8006a70:	6020      	str	r0, [r4, #0]
 8006a72:	6061      	str	r1, [r4, #4]
 8006a74:	60a2      	str	r2, [r4, #8]
 8006a76:	881b      	ldrh	r3, [r3, #0]
 8006a78:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade,"7B+");
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8006a80:	4a44      	ldr	r2, [pc, #272]	; (8006b94 <problem_fetch+0x54d0>)
 8006a82:	6810      	ldr	r0, [r2, #0]
 8006a84:	6018      	str	r0, [r3, #0]
			p->moveSize = 5;
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	2205      	movs	r2, #5
 8006a8a:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"B,G,D,I,I");
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	33a4      	adds	r3, #164	; 0xa4
 8006a90:	4945      	ldr	r1, [pc, #276]	; (8006ba8 <problem_fetch+0x54e4>)
 8006a92:	461a      	mov	r2, r3
 8006a94:	460b      	mov	r3, r1
 8006a96:	cb03      	ldmia	r3!, {r0, r1}
 8006a98:	6010      	str	r0, [r2, #0]
 8006a9a:	6051      	str	r1, [r2, #4]
 8006a9c:	881b      	ldrh	r3, [r3, #0]
 8006a9e:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"6,9,11,14,18");
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	3304      	adds	r3, #4
 8006aa4:	4a41      	ldr	r2, [pc, #260]	; (8006bac <problem_fetch+0x54e8>)
 8006aa6:	461c      	mov	r4, r3
 8006aa8:	4613      	mov	r3, r2
 8006aaa:	cb07      	ldmia	r3!, {r0, r1, r2}
 8006aac:	6020      	str	r0, [r4, #0]
 8006aae:	6061      	str	r1, [r4, #4]
 8006ab0:	60a2      	str	r2, [r4, #8]
 8006ab2:	781b      	ldrb	r3, [r3, #0]
 8006ab4:	7323      	strb	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,e");
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8006abc:	4938      	ldr	r1, [pc, #224]	; (8006ba0 <problem_fetch+0x54dc>)
 8006abe:	461a      	mov	r2, r3
 8006ac0:	460b      	mov	r3, r1
 8006ac2:	cb03      	ldmia	r3!, {r0, r1}
 8006ac4:	6010      	str	r0, [r2, #0]
 8006ac6:	6051      	str	r1, [r2, #4]
 8006ac8:	881b      	ldrh	r3, [r3, #0]
 8006aca:	8113      	strh	r3, [r2, #8]
			break;
 8006acc:	f015 bd2a 	b.w	801c524 <problem_fetch+0x1ae60>
		case 138 :
			strcpy(p->name,"HOWARD THE ALIEN");
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8006ad6:	4a36      	ldr	r2, [pc, #216]	; (8006bb0 <problem_fetch+0x54ec>)
 8006ad8:	461d      	mov	r5, r3
 8006ada:	4614      	mov	r4, r2
 8006adc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006ade:	6028      	str	r0, [r5, #0]
 8006ae0:	6069      	str	r1, [r5, #4]
 8006ae2:	60aa      	str	r2, [r5, #8]
 8006ae4:	60eb      	str	r3, [r5, #12]
 8006ae6:	7823      	ldrb	r3, [r4, #0]
 8006ae8:	742b      	strb	r3, [r5, #16]
			strcpy(p->grade,"7C");
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8006af0:	4a30      	ldr	r2, [pc, #192]	; (8006bb4 <problem_fetch+0x54f0>)
 8006af2:	8811      	ldrh	r1, [r2, #0]
 8006af4:	7892      	ldrb	r2, [r2, #2]
 8006af6:	8019      	strh	r1, [r3, #0]
 8006af8:	709a      	strb	r2, [r3, #2]
			p->moveSize = 5;
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	2205      	movs	r2, #5
 8006afe:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,G,C,I,D");
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	33a4      	adds	r3, #164	; 0xa4
 8006b04:	492c      	ldr	r1, [pc, #176]	; (8006bb8 <problem_fetch+0x54f4>)
 8006b06:	461a      	mov	r2, r3
 8006b08:	460b      	mov	r3, r1
 8006b0a:	cb03      	ldmia	r3!, {r0, r1}
 8006b0c:	6010      	str	r0, [r2, #0]
 8006b0e:	6051      	str	r1, [r2, #4]
 8006b10:	881b      	ldrh	r3, [r3, #0]
 8006b12:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"5,9,13,14,18");
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	3304      	adds	r3, #4
 8006b18:	4a28      	ldr	r2, [pc, #160]	; (8006bbc <problem_fetch+0x54f8>)
 8006b1a:	461c      	mov	r4, r3
 8006b1c:	4613      	mov	r3, r2
 8006b1e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8006b20:	6020      	str	r0, [r4, #0]
 8006b22:	6061      	str	r1, [r4, #4]
 8006b24:	60a2      	str	r2, [r4, #8]
 8006b26:	781b      	ldrb	r3, [r3, #0]
 8006b28:	7323      	strb	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,e");
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8006b30:	491b      	ldr	r1, [pc, #108]	; (8006ba0 <problem_fetch+0x54dc>)
 8006b32:	461a      	mov	r2, r3
 8006b34:	460b      	mov	r3, r1
 8006b36:	cb03      	ldmia	r3!, {r0, r1}
 8006b38:	6010      	str	r0, [r2, #0]
 8006b3a:	6051      	str	r1, [r2, #4]
 8006b3c:	881b      	ldrh	r3, [r3, #0]
 8006b3e:	8113      	strh	r3, [r2, #8]
			break;
 8006b40:	f015 bcf0 	b.w	801c524 <problem_fetch+0x1ae60>
 8006b44:	08025344 	.word	0x08025344
 8006b48:	08023e60 	.word	0x08023e60
 8006b4c:	0802534c 	.word	0x0802534c
 8006b50:	08025360 	.word	0x08025360
 8006b54:	08024838 	.word	0x08024838
 8006b58:	08025378 	.word	0x08025378
 8006b5c:	080239f4 	.word	0x080239f4
 8006b60:	08025380 	.word	0x08025380
 8006b64:	0802538c 	.word	0x0802538c
 8006b68:	0802539c 	.word	0x0802539c
 8006b6c:	080253a8 	.word	0x080253a8
 8006b70:	080253b8 	.word	0x080253b8
 8006b74:	080253c8 	.word	0x080253c8
 8006b78:	080253dc 	.word	0x080253dc
 8006b7c:	080253ec 	.word	0x080253ec
 8006b80:	08023814 	.word	0x08023814
 8006b84:	080253fc 	.word	0x080253fc
 8006b88:	08025408 	.word	0x08025408
 8006b8c:	08025418 	.word	0x08025418
 8006b90:	08025424 	.word	0x08025424
 8006b94:	08023990 	.word	0x08023990
 8006b98:	08025438 	.word	0x08025438
 8006b9c:	08023e70 	.word	0x08023e70
 8006ba0:	08023d20 	.word	0x08023d20
 8006ba4:	08025444 	.word	0x08025444
 8006ba8:	08025454 	.word	0x08025454
 8006bac:	08025460 	.word	0x08025460
 8006bb0:	08025470 	.word	0x08025470
 8006bb4:	08024088 	.word	0x08024088
 8006bb8:	08025484 	.word	0x08025484
 8006bbc:	08025490 	.word	0x08025490
		case 139 :
			strcpy(p->name,"EZ CLAP");
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8006bc6:	49c4      	ldr	r1, [pc, #784]	; (8006ed8 <problem_fetch+0x5814>)
 8006bc8:	461a      	mov	r2, r3
 8006bca:	460b      	mov	r3, r1
 8006bcc:	cb03      	ldmia	r3!, {r0, r1}
 8006bce:	6010      	str	r0, [r2, #0]
 8006bd0:	6051      	str	r1, [r2, #4]
			strcpy(p->grade,"7A");
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8006bd8:	4ac0      	ldr	r2, [pc, #768]	; (8006edc <problem_fetch+0x5818>)
 8006bda:	8811      	ldrh	r1, [r2, #0]
 8006bdc:	7892      	ldrb	r2, [r2, #2]
 8006bde:	8019      	strh	r1, [r3, #0]
 8006be0:	709a      	strb	r2, [r3, #2]
			p->moveSize = 6;
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	2206      	movs	r2, #6
 8006be6:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,J,H,C,D,E");
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	33a4      	adds	r3, #164	; 0xa4
 8006bec:	4abc      	ldr	r2, [pc, #752]	; (8006ee0 <problem_fetch+0x581c>)
 8006bee:	461c      	mov	r4, r3
 8006bf0:	4613      	mov	r3, r2
 8006bf2:	cb07      	ldmia	r3!, {r0, r1, r2}
 8006bf4:	6020      	str	r0, [r4, #0]
 8006bf6:	6061      	str	r1, [r4, #4]
 8006bf8:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,5,10,13,18,14");
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	3304      	adds	r3, #4
 8006bfe:	4ab9      	ldr	r2, [pc, #740]	; (8006ee4 <problem_fetch+0x5820>)
 8006c00:	461c      	mov	r4, r3
 8006c02:	4615      	mov	r5, r2
 8006c04:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006c06:	6020      	str	r0, [r4, #0]
 8006c08:	6061      	str	r1, [r4, #4]
 8006c0a:	60a2      	str	r2, [r4, #8]
 8006c0c:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,s,d,d,e,d");
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8006c14:	4ab4      	ldr	r2, [pc, #720]	; (8006ee8 <problem_fetch+0x5824>)
 8006c16:	461c      	mov	r4, r3
 8006c18:	4613      	mov	r3, r2
 8006c1a:	cb07      	ldmia	r3!, {r0, r1, r2}
 8006c1c:	6020      	str	r0, [r4, #0]
 8006c1e:	6061      	str	r1, [r4, #4]
 8006c20:	60a2      	str	r2, [r4, #8]
			break;
 8006c22:	f015 bc7f 	b.w	801c524 <problem_fetch+0x1ae60>
		case 140 :
			strcpy(p->name,"BRUTE");
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8006c2c:	4aaf      	ldr	r2, [pc, #700]	; (8006eec <problem_fetch+0x5828>)
 8006c2e:	6810      	ldr	r0, [r2, #0]
 8006c30:	6018      	str	r0, [r3, #0]
 8006c32:	8892      	ldrh	r2, [r2, #4]
 8006c34:	809a      	strh	r2, [r3, #4]
			strcpy(p->grade,"7C");
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8006c3c:	4aac      	ldr	r2, [pc, #688]	; (8006ef0 <problem_fetch+0x582c>)
 8006c3e:	8811      	ldrh	r1, [r2, #0]
 8006c40:	7892      	ldrb	r2, [r2, #2]
 8006c42:	8019      	strh	r1, [r3, #0]
 8006c44:	709a      	strb	r2, [r3, #2]
			p->moveSize = 5;
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	2205      	movs	r2, #5
 8006c4a:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"C,B,B,G,I");
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	33a4      	adds	r3, #164	; 0xa4
 8006c50:	49a8      	ldr	r1, [pc, #672]	; (8006ef4 <problem_fetch+0x5830>)
 8006c52:	461a      	mov	r2, r3
 8006c54:	460b      	mov	r3, r1
 8006c56:	cb03      	ldmia	r3!, {r0, r1}
 8006c58:	6010      	str	r0, [r2, #0]
 8006c5a:	6051      	str	r1, [r2, #4]
 8006c5c:	881b      	ldrh	r3, [r3, #0]
 8006c5e:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"5,6,10,14,18");
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	3304      	adds	r3, #4
 8006c64:	4aa4      	ldr	r2, [pc, #656]	; (8006ef8 <problem_fetch+0x5834>)
 8006c66:	461c      	mov	r4, r3
 8006c68:	4613      	mov	r3, r2
 8006c6a:	cb07      	ldmia	r3!, {r0, r1, r2}
 8006c6c:	6020      	str	r0, [r4, #0]
 8006c6e:	6061      	str	r1, [r4, #4]
 8006c70:	60a2      	str	r2, [r4, #8]
 8006c72:	781b      	ldrb	r3, [r3, #0]
 8006c74:	7323      	strb	r3, [r4, #12]
			strcpy(p->startFinish,"s,s,d,d,e");
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8006c7c:	499f      	ldr	r1, [pc, #636]	; (8006efc <problem_fetch+0x5838>)
 8006c7e:	461a      	mov	r2, r3
 8006c80:	460b      	mov	r3, r1
 8006c82:	cb03      	ldmia	r3!, {r0, r1}
 8006c84:	6010      	str	r0, [r2, #0]
 8006c86:	6051      	str	r1, [r2, #4]
 8006c88:	881b      	ldrh	r3, [r3, #0]
 8006c8a:	8113      	strh	r3, [r2, #8]
			break;
 8006c8c:	f015 bc4a 	b.w	801c524 <problem_fetch+0x1ae60>
		case 141 :
			strcpy(p->name,"MASTERFUL GAP ALT");
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8006c96:	4a9a      	ldr	r2, [pc, #616]	; (8006f00 <problem_fetch+0x583c>)
 8006c98:	461d      	mov	r5, r3
 8006c9a:	4614      	mov	r4, r2
 8006c9c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006c9e:	6028      	str	r0, [r5, #0]
 8006ca0:	6069      	str	r1, [r5, #4]
 8006ca2:	60aa      	str	r2, [r5, #8]
 8006ca4:	60eb      	str	r3, [r5, #12]
 8006ca6:	8823      	ldrh	r3, [r4, #0]
 8006ca8:	822b      	strh	r3, [r5, #16]
			strcpy(p->grade,"7C");
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8006cb0:	4a8f      	ldr	r2, [pc, #572]	; (8006ef0 <problem_fetch+0x582c>)
 8006cb2:	8811      	ldrh	r1, [r2, #0]
 8006cb4:	7892      	ldrb	r2, [r2, #2]
 8006cb6:	8019      	strh	r1, [r3, #0]
 8006cb8:	709a      	strb	r2, [r3, #2]
			p->moveSize = 6;
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	2206      	movs	r2, #6
 8006cbe:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"A,B,C,E,F,I");
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	33a4      	adds	r3, #164	; 0xa4
 8006cc4:	4a8f      	ldr	r2, [pc, #572]	; (8006f04 <problem_fetch+0x5840>)
 8006cc6:	461c      	mov	r4, r3
 8006cc8:	4613      	mov	r3, r2
 8006cca:	cb07      	ldmia	r3!, {r0, r1, r2}
 8006ccc:	6020      	str	r0, [r4, #0]
 8006cce:	6061      	str	r1, [r4, #4]
 8006cd0:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"9,6,5,16,11,18");
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	3304      	adds	r3, #4
 8006cd6:	4a8c      	ldr	r2, [pc, #560]	; (8006f08 <problem_fetch+0x5844>)
 8006cd8:	461c      	mov	r4, r3
 8006cda:	4613      	mov	r3, r2
 8006cdc:	cb07      	ldmia	r3!, {r0, r1, r2}
 8006cde:	6020      	str	r0, [r4, #0]
 8006ce0:	6061      	str	r1, [r4, #4]
 8006ce2:	60a2      	str	r2, [r4, #8]
 8006ce4:	881a      	ldrh	r2, [r3, #0]
 8006ce6:	789b      	ldrb	r3, [r3, #2]
 8006ce8:	81a2      	strh	r2, [r4, #12]
 8006cea:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish,"d,s,s,d,d,e");
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8006cf2:	4a86      	ldr	r2, [pc, #536]	; (8006f0c <problem_fetch+0x5848>)
 8006cf4:	461c      	mov	r4, r3
 8006cf6:	4613      	mov	r3, r2
 8006cf8:	cb07      	ldmia	r3!, {r0, r1, r2}
 8006cfa:	6020      	str	r0, [r4, #0]
 8006cfc:	6061      	str	r1, [r4, #4]
 8006cfe:	60a2      	str	r2, [r4, #8]
			break;
 8006d00:	f015 bc10 	b.w	801c524 <problem_fetch+0x1ae60>
		case 142 :
			strcpy(p->name,"RIVER RAT");
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8006d0a:	4981      	ldr	r1, [pc, #516]	; (8006f10 <problem_fetch+0x584c>)
 8006d0c:	461a      	mov	r2, r3
 8006d0e:	460b      	mov	r3, r1
 8006d10:	cb03      	ldmia	r3!, {r0, r1}
 8006d12:	6010      	str	r0, [r2, #0]
 8006d14:	6051      	str	r1, [r2, #4]
 8006d16:	881b      	ldrh	r3, [r3, #0]
 8006d18:	8113      	strh	r3, [r2, #8]
			strcpy(p->grade,"7A+");
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8006d20:	4a7c      	ldr	r2, [pc, #496]	; (8006f14 <problem_fetch+0x5850>)
 8006d22:	6810      	ldr	r0, [r2, #0]
 8006d24:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	2206      	movs	r2, #6
 8006d2a:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,C,E,D,E,A");
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	33a4      	adds	r3, #164	; 0xa4
 8006d30:	4a79      	ldr	r2, [pc, #484]	; (8006f18 <problem_fetch+0x5854>)
 8006d32:	461c      	mov	r4, r3
 8006d34:	4613      	mov	r3, r2
 8006d36:	cb07      	ldmia	r3!, {r0, r1, r2}
 8006d38:	6020      	str	r0, [r4, #0]
 8006d3a:	6061      	str	r1, [r4, #4]
 8006d3c:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,8,12,11,16,18");
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	3304      	adds	r3, #4
 8006d42:	4a76      	ldr	r2, [pc, #472]	; (8006f1c <problem_fetch+0x5858>)
 8006d44:	461c      	mov	r4, r3
 8006d46:	4615      	mov	r5, r2
 8006d48:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006d4a:	6020      	str	r0, [r4, #0]
 8006d4c:	6061      	str	r1, [r4, #4]
 8006d4e:	60a2      	str	r2, [r4, #8]
 8006d50:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8006d58:	4a71      	ldr	r2, [pc, #452]	; (8006f20 <problem_fetch+0x585c>)
 8006d5a:	461c      	mov	r4, r3
 8006d5c:	4613      	mov	r3, r2
 8006d5e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8006d60:	6020      	str	r0, [r4, #0]
 8006d62:	6061      	str	r1, [r4, #4]
 8006d64:	60a2      	str	r2, [r4, #8]
			break;
 8006d66:	f015 bbdd 	b.w	801c524 <problem_fetch+0x1ae60>
		case 143 :
			strcpy(p->name,"BIG DAWWWWG");
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8006d70:	4a6c      	ldr	r2, [pc, #432]	; (8006f24 <problem_fetch+0x5860>)
 8006d72:	461c      	mov	r4, r3
 8006d74:	4613      	mov	r3, r2
 8006d76:	cb07      	ldmia	r3!, {r0, r1, r2}
 8006d78:	6020      	str	r0, [r4, #0]
 8006d7a:	6061      	str	r1, [r4, #4]
 8006d7c:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade,"6C");
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8006d84:	4a68      	ldr	r2, [pc, #416]	; (8006f28 <problem_fetch+0x5864>)
 8006d86:	8811      	ldrh	r1, [r2, #0]
 8006d88:	7892      	ldrb	r2, [r2, #2]
 8006d8a:	8019      	strh	r1, [r3, #0]
 8006d8c:	709a      	strb	r2, [r3, #2]
			p->moveSize = 7;
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	2207      	movs	r2, #7
 8006d92:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,D,H,C,H,H,I");
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	33a4      	adds	r3, #164	; 0xa4
 8006d98:	4a64      	ldr	r2, [pc, #400]	; (8006f2c <problem_fetch+0x5868>)
 8006d9a:	461c      	mov	r4, r3
 8006d9c:	4613      	mov	r3, r2
 8006d9e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8006da0:	6020      	str	r0, [r4, #0]
 8006da2:	6061      	str	r1, [r4, #4]
 8006da4:	60a2      	str	r2, [r4, #8]
 8006da6:	881b      	ldrh	r3, [r3, #0]
 8006da8:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,7,10,13,13,16,18");
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	3304      	adds	r3, #4
 8006dae:	4a60      	ldr	r2, [pc, #384]	; (8006f30 <problem_fetch+0x586c>)
 8006db0:	461d      	mov	r5, r3
 8006db2:	4614      	mov	r4, r2
 8006db4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006db6:	6028      	str	r0, [r5, #0]
 8006db8:	6069      	str	r1, [r5, #4]
 8006dba:	60aa      	str	r2, [r5, #8]
 8006dbc:	60eb      	str	r3, [r5, #12]
 8006dbe:	8823      	ldrh	r3, [r4, #0]
 8006dc0:	78a2      	ldrb	r2, [r4, #2]
 8006dc2:	822b      	strh	r3, [r5, #16]
 8006dc4:	4613      	mov	r3, r2
 8006dc6:	74ab      	strb	r3, [r5, #18]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8006dce:	4a59      	ldr	r2, [pc, #356]	; (8006f34 <problem_fetch+0x5870>)
 8006dd0:	461c      	mov	r4, r3
 8006dd2:	4613      	mov	r3, r2
 8006dd4:	cb07      	ldmia	r3!, {r0, r1, r2}
 8006dd6:	6020      	str	r0, [r4, #0]
 8006dd8:	6061      	str	r1, [r4, #4]
 8006dda:	60a2      	str	r2, [r4, #8]
 8006ddc:	881b      	ldrh	r3, [r3, #0]
 8006dde:	81a3      	strh	r3, [r4, #12]
			break;
 8006de0:	f015 bba0 	b.w	801c524 <problem_fetch+0x1ae60>
		case 144 :
			strcpy(p->name,"BACK TO BASICS");
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8006dea:	4a53      	ldr	r2, [pc, #332]	; (8006f38 <problem_fetch+0x5874>)
 8006dec:	461c      	mov	r4, r3
 8006dee:	4613      	mov	r3, r2
 8006df0:	cb07      	ldmia	r3!, {r0, r1, r2}
 8006df2:	6020      	str	r0, [r4, #0]
 8006df4:	6061      	str	r1, [r4, #4]
 8006df6:	60a2      	str	r2, [r4, #8]
 8006df8:	881a      	ldrh	r2, [r3, #0]
 8006dfa:	789b      	ldrb	r3, [r3, #2]
 8006dfc:	81a2      	strh	r2, [r4, #12]
 8006dfe:	73a3      	strb	r3, [r4, #14]
			strcpy(p->grade,"6B+");
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8006e06:	4a4d      	ldr	r2, [pc, #308]	; (8006f3c <problem_fetch+0x5878>)
 8006e08:	6810      	ldr	r0, [r2, #0]
 8006e0a:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	2207      	movs	r2, #7
 8006e10:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"H,K,H,K,G,G,D");
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	33a4      	adds	r3, #164	; 0xa4
 8006e16:	4a4a      	ldr	r2, [pc, #296]	; (8006f40 <problem_fetch+0x587c>)
 8006e18:	461c      	mov	r4, r3
 8006e1a:	4613      	mov	r3, r2
 8006e1c:	cb07      	ldmia	r3!, {r0, r1, r2}
 8006e1e:	6020      	str	r0, [r4, #0]
 8006e20:	6061      	str	r1, [r4, #4]
 8006e22:	60a2      	str	r2, [r4, #8]
 8006e24:	881b      	ldrh	r3, [r3, #0]
 8006e26:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,9,12,14,15,17,18");
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	3304      	adds	r3, #4
 8006e2c:	4a45      	ldr	r2, [pc, #276]	; (8006f44 <problem_fetch+0x5880>)
 8006e2e:	461d      	mov	r5, r3
 8006e30:	4614      	mov	r4, r2
 8006e32:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006e34:	6028      	str	r0, [r5, #0]
 8006e36:	6069      	str	r1, [r5, #4]
 8006e38:	60aa      	str	r2, [r5, #8]
 8006e3a:	60eb      	str	r3, [r5, #12]
 8006e3c:	8823      	ldrh	r3, [r4, #0]
 8006e3e:	78a2      	ldrb	r2, [r4, #2]
 8006e40:	822b      	strh	r3, [r5, #16]
 8006e42:	4613      	mov	r3, r2
 8006e44:	74ab      	strb	r3, [r5, #18]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8006e4c:	4a39      	ldr	r2, [pc, #228]	; (8006f34 <problem_fetch+0x5870>)
 8006e4e:	461c      	mov	r4, r3
 8006e50:	4613      	mov	r3, r2
 8006e52:	cb07      	ldmia	r3!, {r0, r1, r2}
 8006e54:	6020      	str	r0, [r4, #0]
 8006e56:	6061      	str	r1, [r4, #4]
 8006e58:	60a2      	str	r2, [r4, #8]
 8006e5a:	881b      	ldrh	r3, [r3, #0]
 8006e5c:	81a3      	strh	r3, [r4, #12]
			break;
 8006e5e:	f015 bb61 	b.w	801c524 <problem_fetch+0x1ae60>
		case 145 :
			strcpy(p->name,"ROADWAY");
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8006e68:	4937      	ldr	r1, [pc, #220]	; (8006f48 <problem_fetch+0x5884>)
 8006e6a:	461a      	mov	r2, r3
 8006e6c:	460b      	mov	r3, r1
 8006e6e:	cb03      	ldmia	r3!, {r0, r1}
 8006e70:	6010      	str	r0, [r2, #0]
 8006e72:	6051      	str	r1, [r2, #4]
			strcpy(p->grade,"6B+");
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8006e7a:	4a30      	ldr	r2, [pc, #192]	; (8006f3c <problem_fetch+0x5878>)
 8006e7c:	6810      	ldr	r0, [r2, #0]
 8006e7e:	6018      	str	r0, [r3, #0]
			p->moveSize = 9;
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	2209      	movs	r2, #9
 8006e84:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,J,G,F,I,E,G,D,I");
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	33a4      	adds	r3, #164	; 0xa4
 8006e8a:	4a30      	ldr	r2, [pc, #192]	; (8006f4c <problem_fetch+0x5888>)
 8006e8c:	461d      	mov	r5, r3
 8006e8e:	4614      	mov	r4, r2
 8006e90:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006e92:	6028      	str	r0, [r5, #0]
 8006e94:	6069      	str	r1, [r5, #4]
 8006e96:	60aa      	str	r2, [r5, #8]
 8006e98:	60eb      	str	r3, [r5, #12]
 8006e9a:	8823      	ldrh	r3, [r4, #0]
 8006e9c:	822b      	strh	r3, [r5, #16]
			strcpy(p->moveNumbers,"4,5,9,13,14,16,17,18,10");
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	3304      	adds	r3, #4
 8006ea2:	4a2b      	ldr	r2, [pc, #172]	; (8006f50 <problem_fetch+0x588c>)
 8006ea4:	461d      	mov	r5, r3
 8006ea6:	4614      	mov	r4, r2
 8006ea8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006eaa:	6028      	str	r0, [r5, #0]
 8006eac:	6069      	str	r1, [r5, #4]
 8006eae:	60aa      	str	r2, [r5, #8]
 8006eb0:	60eb      	str	r3, [r5, #12]
 8006eb2:	cc03      	ldmia	r4!, {r0, r1}
 8006eb4:	6128      	str	r0, [r5, #16]
 8006eb6:	6169      	str	r1, [r5, #20]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,e,d");
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8006ebe:	4a25      	ldr	r2, [pc, #148]	; (8006f54 <problem_fetch+0x5890>)
 8006ec0:	461d      	mov	r5, r3
 8006ec2:	4614      	mov	r4, r2
 8006ec4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006ec6:	6028      	str	r0, [r5, #0]
 8006ec8:	6069      	str	r1, [r5, #4]
 8006eca:	60aa      	str	r2, [r5, #8]
 8006ecc:	60eb      	str	r3, [r5, #12]
 8006ece:	8823      	ldrh	r3, [r4, #0]
 8006ed0:	822b      	strh	r3, [r5, #16]
			break;
 8006ed2:	f015 bb27 	b.w	801c524 <problem_fetch+0x1ae60>
 8006ed6:	bf00      	nop
 8006ed8:	080254a0 	.word	0x080254a0
 8006edc:	08023814 	.word	0x08023814
 8006ee0:	080254a8 	.word	0x080254a8
 8006ee4:	080254b4 	.word	0x080254b4
 8006ee8:	080251f8 	.word	0x080251f8
 8006eec:	080254c4 	.word	0x080254c4
 8006ef0:	08024088 	.word	0x08024088
 8006ef4:	080254cc 	.word	0x080254cc
 8006ef8:	080254d8 	.word	0x080254d8
 8006efc:	08023f34 	.word	0x08023f34
 8006f00:	080254e8 	.word	0x080254e8
 8006f04:	080254fc 	.word	0x080254fc
 8006f08:	08025508 	.word	0x08025508
 8006f0c:	08025518 	.word	0x08025518
 8006f10:	08025524 	.word	0x08025524
 8006f14:	080239f4 	.word	0x080239f4
 8006f18:	08025530 	.word	0x08025530
 8006f1c:	0802553c 	.word	0x0802553c
 8006f20:	08023bf0 	.word	0x08023bf0
 8006f24:	0802554c 	.word	0x0802554c
 8006f28:	08023920 	.word	0x08023920
 8006f2c:	08025558 	.word	0x08025558
 8006f30:	08025568 	.word	0x08025568
 8006f34:	080239dc 	.word	0x080239dc
 8006f38:	0802557c 	.word	0x0802557c
 8006f3c:	08023854 	.word	0x08023854
 8006f40:	0802558c 	.word	0x0802558c
 8006f44:	0802559c 	.word	0x0802559c
 8006f48:	080255b0 	.word	0x080255b0
 8006f4c:	080255b8 	.word	0x080255b8
 8006f50:	080255cc 	.word	0x080255cc
 8006f54:	08024cec 	.word	0x08024cec
		case 146 :
			strcpy(p->name,"MEN IN BLACK");
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8006f5e:	4aae      	ldr	r2, [pc, #696]	; (8007218 <problem_fetch+0x5b54>)
 8006f60:	461c      	mov	r4, r3
 8006f62:	4613      	mov	r3, r2
 8006f64:	cb07      	ldmia	r3!, {r0, r1, r2}
 8006f66:	6020      	str	r0, [r4, #0]
 8006f68:	6061      	str	r1, [r4, #4]
 8006f6a:	60a2      	str	r2, [r4, #8]
 8006f6c:	781b      	ldrb	r3, [r3, #0]
 8006f6e:	7323      	strb	r3, [r4, #12]
			strcpy(p->grade,"7A");
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8006f76:	4aa9      	ldr	r2, [pc, #676]	; (800721c <problem_fetch+0x5b58>)
 8006f78:	8811      	ldrh	r1, [r2, #0]
 8006f7a:	7892      	ldrb	r2, [r2, #2]
 8006f7c:	8019      	strh	r1, [r3, #0]
 8006f7e:	709a      	strb	r2, [r3, #2]
			p->moveSize = 6;
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	2206      	movs	r2, #6
 8006f84:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,G,H,I,E,D");
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	33a4      	adds	r3, #164	; 0xa4
 8006f8a:	4aa5      	ldr	r2, [pc, #660]	; (8007220 <problem_fetch+0x5b5c>)
 8006f8c:	461c      	mov	r4, r3
 8006f8e:	4613      	mov	r3, r2
 8006f90:	cb07      	ldmia	r3!, {r0, r1, r2}
 8006f92:	6020      	str	r0, [r4, #0]
 8006f94:	6061      	str	r1, [r4, #4]
 8006f96:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,9,12,14,16,18");
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	3304      	adds	r3, #4
 8006f9c:	4aa1      	ldr	r2, [pc, #644]	; (8007224 <problem_fetch+0x5b60>)
 8006f9e:	461c      	mov	r4, r3
 8006fa0:	4615      	mov	r5, r2
 8006fa2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006fa4:	6020      	str	r0, [r4, #0]
 8006fa6:	6061      	str	r1, [r4, #4]
 8006fa8:	60a2      	str	r2, [r4, #8]
 8006faa:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8006fb2:	4a9d      	ldr	r2, [pc, #628]	; (8007228 <problem_fetch+0x5b64>)
 8006fb4:	461c      	mov	r4, r3
 8006fb6:	4613      	mov	r3, r2
 8006fb8:	cb07      	ldmia	r3!, {r0, r1, r2}
 8006fba:	6020      	str	r0, [r4, #0]
 8006fbc:	6061      	str	r1, [r4, #4]
 8006fbe:	60a2      	str	r2, [r4, #8]
			break;
 8006fc0:	f015 bab0 	b.w	801c524 <problem_fetch+0x1ae60>
		case 147 :
			strcpy(p->name,"SET1");
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8006fca:	4a98      	ldr	r2, [pc, #608]	; (800722c <problem_fetch+0x5b68>)
 8006fcc:	6810      	ldr	r0, [r2, #0]
 8006fce:	6018      	str	r0, [r3, #0]
 8006fd0:	7912      	ldrb	r2, [r2, #4]
 8006fd2:	711a      	strb	r2, [r3, #4]
			strcpy(p->grade,"6B+");
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8006fda:	4a95      	ldr	r2, [pc, #596]	; (8007230 <problem_fetch+0x5b6c>)
 8006fdc:	6810      	ldr	r0, [r2, #0]
 8006fde:	6018      	str	r0, [r3, #0]
			p->moveSize = 9;
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	2209      	movs	r2, #9
 8006fe4:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"C,E,E,H,F,I,G,I,J");
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	33a4      	adds	r3, #164	; 0xa4
 8006fea:	4a92      	ldr	r2, [pc, #584]	; (8007234 <problem_fetch+0x5b70>)
 8006fec:	461d      	mov	r5, r3
 8006fee:	4614      	mov	r4, r2
 8006ff0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006ff2:	6028      	str	r0, [r5, #0]
 8006ff4:	6069      	str	r1, [r5, #4]
 8006ff6:	60aa      	str	r2, [r5, #8]
 8006ff8:	60eb      	str	r3, [r5, #12]
 8006ffa:	8823      	ldrh	r3, [r4, #0]
 8006ffc:	822b      	strh	r3, [r5, #16]
			strcpy(p->moveNumbers,"5,6,8,10,13,14,17,18,5");
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	3304      	adds	r3, #4
 8007002:	4a8d      	ldr	r2, [pc, #564]	; (8007238 <problem_fetch+0x5b74>)
 8007004:	461c      	mov	r4, r3
 8007006:	4615      	mov	r5, r2
 8007008:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800700a:	6020      	str	r0, [r4, #0]
 800700c:	6061      	str	r1, [r4, #4]
 800700e:	60a2      	str	r2, [r4, #8]
 8007010:	60e3      	str	r3, [r4, #12]
 8007012:	6828      	ldr	r0, [r5, #0]
 8007014:	6120      	str	r0, [r4, #16]
 8007016:	88ab      	ldrh	r3, [r5, #4]
 8007018:	79aa      	ldrb	r2, [r5, #6]
 800701a:	82a3      	strh	r3, [r4, #20]
 800701c:	4613      	mov	r3, r2
 800701e:	75a3      	strb	r3, [r4, #22]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,e,d");
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8007026:	4a85      	ldr	r2, [pc, #532]	; (800723c <problem_fetch+0x5b78>)
 8007028:	461d      	mov	r5, r3
 800702a:	4614      	mov	r4, r2
 800702c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800702e:	6028      	str	r0, [r5, #0]
 8007030:	6069      	str	r1, [r5, #4]
 8007032:	60aa      	str	r2, [r5, #8]
 8007034:	60eb      	str	r3, [r5, #12]
 8007036:	8823      	ldrh	r3, [r4, #0]
 8007038:	822b      	strh	r3, [r5, #16]
			break;
 800703a:	f015 ba73 	b.w	801c524 <problem_fetch+0x1ae60>
		case 148 :
			strcpy(p->name,"MÁVROS K2");
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8007044:	497e      	ldr	r1, [pc, #504]	; (8007240 <problem_fetch+0x5b7c>)
 8007046:	461a      	mov	r2, r3
 8007048:	460b      	mov	r3, r1
 800704a:	cb03      	ldmia	r3!, {r0, r1}
 800704c:	6010      	str	r0, [r2, #0]
 800704e:	6051      	str	r1, [r2, #4]
 8007050:	8819      	ldrh	r1, [r3, #0]
 8007052:	789b      	ldrb	r3, [r3, #2]
 8007054:	8111      	strh	r1, [r2, #8]
 8007056:	7293      	strb	r3, [r2, #10]
			strcpy(p->grade,"6C+");
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800705e:	4a79      	ldr	r2, [pc, #484]	; (8007244 <problem_fetch+0x5b80>)
 8007060:	6810      	ldr	r0, [r2, #0]
 8007062:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	2206      	movs	r2, #6
 8007068:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,E,G,C,C,D");
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	33a4      	adds	r3, #164	; 0xa4
 800706e:	4a76      	ldr	r2, [pc, #472]	; (8007248 <problem_fetch+0x5b84>)
 8007070:	461c      	mov	r4, r3
 8007072:	4613      	mov	r3, r2
 8007074:	cb07      	ldmia	r3!, {r0, r1, r2}
 8007076:	6020      	str	r0, [r4, #0]
 8007078:	6061      	str	r1, [r4, #4]
 800707a:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,6,9,8,13,18");
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	3304      	adds	r3, #4
 8007080:	4a72      	ldr	r2, [pc, #456]	; (800724c <problem_fetch+0x5b88>)
 8007082:	461c      	mov	r4, r3
 8007084:	4613      	mov	r3, r2
 8007086:	cb07      	ldmia	r3!, {r0, r1, r2}
 8007088:	6020      	str	r0, [r4, #0]
 800708a:	6061      	str	r1, [r4, #4]
 800708c:	60a2      	str	r2, [r4, #8]
 800708e:	881b      	ldrh	r3, [r3, #0]
 8007090:	81a3      	strh	r3, [r4, #12]
			strcpy(p->startFinish,"s,s,d,d,d,e");
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8007098:	4a6d      	ldr	r2, [pc, #436]	; (8007250 <problem_fetch+0x5b8c>)
 800709a:	461c      	mov	r4, r3
 800709c:	4613      	mov	r3, r2
 800709e:	cb07      	ldmia	r3!, {r0, r1, r2}
 80070a0:	6020      	str	r0, [r4, #0]
 80070a2:	6061      	str	r1, [r4, #4]
 80070a4:	60a2      	str	r2, [r4, #8]
			break;
 80070a6:	f015 ba3d 	b.w	801c524 <problem_fetch+0x1ae60>
		case 149 :
			strcpy(p->name,"GARAGE DAYS");
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80070b0:	4a68      	ldr	r2, [pc, #416]	; (8007254 <problem_fetch+0x5b90>)
 80070b2:	461c      	mov	r4, r3
 80070b4:	4613      	mov	r3, r2
 80070b6:	cb07      	ldmia	r3!, {r0, r1, r2}
 80070b8:	6020      	str	r0, [r4, #0]
 80070ba:	6061      	str	r1, [r4, #4]
 80070bc:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade,"6C");
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80070c4:	4a64      	ldr	r2, [pc, #400]	; (8007258 <problem_fetch+0x5b94>)
 80070c6:	8811      	ldrh	r1, [r2, #0]
 80070c8:	7892      	ldrb	r2, [r2, #2]
 80070ca:	8019      	strh	r1, [r3, #0]
 80070cc:	709a      	strb	r2, [r3, #2]
			p->moveSize = 7;
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	2207      	movs	r2, #7
 80070d2:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"E,H,K,H,I,E,D");
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	33a4      	adds	r3, #164	; 0xa4
 80070d8:	4a60      	ldr	r2, [pc, #384]	; (800725c <problem_fetch+0x5b98>)
 80070da:	461c      	mov	r4, r3
 80070dc:	4613      	mov	r3, r2
 80070de:	cb07      	ldmia	r3!, {r0, r1, r2}
 80070e0:	6020      	str	r0, [r4, #0]
 80070e2:	6061      	str	r1, [r4, #4]
 80070e4:	60a2      	str	r2, [r4, #8]
 80070e6:	881b      	ldrh	r3, [r3, #0]
 80070e8:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"6,5,9,12,14,16,18");
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	3304      	adds	r3, #4
 80070ee:	4a5c      	ldr	r2, [pc, #368]	; (8007260 <problem_fetch+0x5b9c>)
 80070f0:	461d      	mov	r5, r3
 80070f2:	4614      	mov	r4, r2
 80070f4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80070f6:	6028      	str	r0, [r5, #0]
 80070f8:	6069      	str	r1, [r5, #4]
 80070fa:	60aa      	str	r2, [r5, #8]
 80070fc:	60eb      	str	r3, [r5, #12]
 80070fe:	8823      	ldrh	r3, [r4, #0]
 8007100:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,s,d,d,d,d,e");
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8007108:	4a56      	ldr	r2, [pc, #344]	; (8007264 <problem_fetch+0x5ba0>)
 800710a:	461c      	mov	r4, r3
 800710c:	4613      	mov	r3, r2
 800710e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8007110:	6020      	str	r0, [r4, #0]
 8007112:	6061      	str	r1, [r4, #4]
 8007114:	60a2      	str	r2, [r4, #8]
 8007116:	881b      	ldrh	r3, [r3, #0]
 8007118:	81a3      	strh	r3, [r4, #12]
			break;
 800711a:	f015 ba03 	b.w	801c524 <problem_fetch+0x1ae60>
		case 150 :
			strcpy(p->name,"ELEMENTS OF STYLE");
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8007124:	4a50      	ldr	r2, [pc, #320]	; (8007268 <problem_fetch+0x5ba4>)
 8007126:	461d      	mov	r5, r3
 8007128:	4614      	mov	r4, r2
 800712a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800712c:	6028      	str	r0, [r5, #0]
 800712e:	6069      	str	r1, [r5, #4]
 8007130:	60aa      	str	r2, [r5, #8]
 8007132:	60eb      	str	r3, [r5, #12]
 8007134:	8823      	ldrh	r3, [r4, #0]
 8007136:	822b      	strh	r3, [r5, #16]
			strcpy(p->grade,"7A");
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800713e:	4a37      	ldr	r2, [pc, #220]	; (800721c <problem_fetch+0x5b58>)
 8007140:	8811      	ldrh	r1, [r2, #0]
 8007142:	7892      	ldrb	r2, [r2, #2]
 8007144:	8019      	strh	r1, [r3, #0]
 8007146:	709a      	strb	r2, [r3, #2]
			p->moveSize = 6;
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	2206      	movs	r2, #6
 800714c:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"H,J,D,F,A,D");
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	33a4      	adds	r3, #164	; 0xa4
 8007152:	4a46      	ldr	r2, [pc, #280]	; (800726c <problem_fetch+0x5ba8>)
 8007154:	461c      	mov	r4, r3
 8007156:	4613      	mov	r3, r2
 8007158:	cb07      	ldmia	r3!, {r0, r1, r2}
 800715a:	6020      	str	r0, [r4, #0]
 800715c:	6061      	str	r1, [r4, #4]
 800715e:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,5,7,11,14,18");
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	3304      	adds	r3, #4
 8007164:	4a42      	ldr	r2, [pc, #264]	; (8007270 <problem_fetch+0x5bac>)
 8007166:	461c      	mov	r4, r3
 8007168:	4613      	mov	r3, r2
 800716a:	cb07      	ldmia	r3!, {r0, r1, r2}
 800716c:	6020      	str	r0, [r4, #0]
 800716e:	6061      	str	r1, [r4, #4]
 8007170:	60a2      	str	r2, [r4, #8]
 8007172:	881a      	ldrh	r2, [r3, #0]
 8007174:	789b      	ldrb	r3, [r3, #2]
 8007176:	81a2      	strh	r2, [r4, #12]
 8007178:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8007180:	4a29      	ldr	r2, [pc, #164]	; (8007228 <problem_fetch+0x5b64>)
 8007182:	461c      	mov	r4, r3
 8007184:	4613      	mov	r3, r2
 8007186:	cb07      	ldmia	r3!, {r0, r1, r2}
 8007188:	6020      	str	r0, [r4, #0]
 800718a:	6061      	str	r1, [r4, #4]
 800718c:	60a2      	str	r2, [r4, #8]
			break;
 800718e:	f015 b9c9 	b.w	801c524 <problem_fetch+0x1ae60>
		case 151 :
			strcpy(p->name,"OLI'S YELLOW FEVA");
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8007198:	4a36      	ldr	r2, [pc, #216]	; (8007274 <problem_fetch+0x5bb0>)
 800719a:	461d      	mov	r5, r3
 800719c:	4614      	mov	r4, r2
 800719e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80071a0:	6028      	str	r0, [r5, #0]
 80071a2:	6069      	str	r1, [r5, #4]
 80071a4:	60aa      	str	r2, [r5, #8]
 80071a6:	60eb      	str	r3, [r5, #12]
 80071a8:	8823      	ldrh	r3, [r4, #0]
 80071aa:	822b      	strh	r3, [r5, #16]
			strcpy(p->grade,"6B+");
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80071b2:	4a1f      	ldr	r2, [pc, #124]	; (8007230 <problem_fetch+0x5b6c>)
 80071b4:	6810      	ldr	r0, [r2, #0]
 80071b6:	6018      	str	r0, [r3, #0]
			p->moveSize = 9;
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	2209      	movs	r2, #9
 80071bc:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,E,E,H,H,F,G,I,I");
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	33a4      	adds	r3, #164	; 0xa4
 80071c2:	4a2d      	ldr	r2, [pc, #180]	; (8007278 <problem_fetch+0x5bb4>)
 80071c4:	461d      	mov	r5, r3
 80071c6:	4614      	mov	r4, r2
 80071c8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80071ca:	6028      	str	r0, [r5, #0]
 80071cc:	6069      	str	r1, [r5, #4]
 80071ce:	60aa      	str	r2, [r5, #8]
 80071d0:	60eb      	str	r3, [r5, #12]
 80071d2:	8823      	ldrh	r3, [r4, #0]
 80071d4:	822b      	strh	r3, [r5, #16]
			strcpy(p->moveNumbers,"4,6,8,5,10,11,14,14,18");
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	3304      	adds	r3, #4
 80071da:	4a28      	ldr	r2, [pc, #160]	; (800727c <problem_fetch+0x5bb8>)
 80071dc:	461c      	mov	r4, r3
 80071de:	4615      	mov	r5, r2
 80071e0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80071e2:	6020      	str	r0, [r4, #0]
 80071e4:	6061      	str	r1, [r4, #4]
 80071e6:	60a2      	str	r2, [r4, #8]
 80071e8:	60e3      	str	r3, [r4, #12]
 80071ea:	6828      	ldr	r0, [r5, #0]
 80071ec:	6120      	str	r0, [r4, #16]
 80071ee:	88ab      	ldrh	r3, [r5, #4]
 80071f0:	79aa      	ldrb	r2, [r5, #6]
 80071f2:	82a3      	strh	r3, [r4, #20]
 80071f4:	4613      	mov	r3, r2
 80071f6:	75a3      	strb	r3, [r4, #22]
			strcpy(p->startFinish,"s,d,d,d,d,d,d,d,e");
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 80071fe:	4a20      	ldr	r2, [pc, #128]	; (8007280 <problem_fetch+0x5bbc>)
 8007200:	461d      	mov	r5, r3
 8007202:	4614      	mov	r4, r2
 8007204:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007206:	6028      	str	r0, [r5, #0]
 8007208:	6069      	str	r1, [r5, #4]
 800720a:	60aa      	str	r2, [r5, #8]
 800720c:	60eb      	str	r3, [r5, #12]
 800720e:	8823      	ldrh	r3, [r4, #0]
 8007210:	822b      	strh	r3, [r5, #16]
			break;
 8007212:	f015 b987 	b.w	801c524 <problem_fetch+0x1ae60>
 8007216:	bf00      	nop
 8007218:	080255e4 	.word	0x080255e4
 800721c:	08023814 	.word	0x08023814
 8007220:	080255f4 	.word	0x080255f4
 8007224:	08025600 	.word	0x08025600
 8007228:	08023bf0 	.word	0x08023bf0
 800722c:	08025610 	.word	0x08025610
 8007230:	08023854 	.word	0x08023854
 8007234:	08025618 	.word	0x08025618
 8007238:	0802562c 	.word	0x0802562c
 800723c:	08024cec 	.word	0x08024cec
 8007240:	08025644 	.word	0x08025644
 8007244:	080238ec 	.word	0x080238ec
 8007248:	08025650 	.word	0x08025650
 800724c:	0802565c 	.word	0x0802565c
 8007250:	08023834 	.word	0x08023834
 8007254:	0802566c 	.word	0x0802566c
 8007258:	08023920 	.word	0x08023920
 800725c:	08025678 	.word	0x08025678
 8007260:	08025688 	.word	0x08025688
 8007264:	080238cc 	.word	0x080238cc
 8007268:	0802569c 	.word	0x0802569c
 800726c:	080256b0 	.word	0x080256b0
 8007270:	080256bc 	.word	0x080256bc
 8007274:	080256cc 	.word	0x080256cc
 8007278:	080256e0 	.word	0x080256e0
 800727c:	080256f4 	.word	0x080256f4
 8007280:	0802570c 	.word	0x0802570c
		case 152 :
			strcpy(p->name,"GAMBIT");
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800728a:	4aac      	ldr	r2, [pc, #688]	; (800753c <problem_fetch+0x5e78>)
 800728c:	6810      	ldr	r0, [r2, #0]
 800728e:	6018      	str	r0, [r3, #0]
 8007290:	8891      	ldrh	r1, [r2, #4]
 8007292:	7992      	ldrb	r2, [r2, #6]
 8007294:	8099      	strh	r1, [r3, #4]
 8007296:	719a      	strb	r2, [r3, #6]
			strcpy(p->grade,"7A");
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800729e:	4aa8      	ldr	r2, [pc, #672]	; (8007540 <problem_fetch+0x5e7c>)
 80072a0:	8811      	ldrh	r1, [r2, #0]
 80072a2:	7892      	ldrb	r2, [r2, #2]
 80072a4:	8019      	strh	r1, [r3, #0]
 80072a6:	709a      	strb	r2, [r3, #2]
			p->moveSize = 5;
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	2205      	movs	r2, #5
 80072ac:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"H,I,E,D,A");
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	33a4      	adds	r3, #164	; 0xa4
 80072b2:	49a4      	ldr	r1, [pc, #656]	; (8007544 <problem_fetch+0x5e80>)
 80072b4:	461a      	mov	r2, r3
 80072b6:	460b      	mov	r3, r1
 80072b8:	cb03      	ldmia	r3!, {r0, r1}
 80072ba:	6010      	str	r0, [r2, #0]
 80072bc:	6051      	str	r1, [r2, #4]
 80072be:	881b      	ldrh	r3, [r3, #0]
 80072c0:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"5,10,12,15,18");
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	3304      	adds	r3, #4
 80072c6:	4aa0      	ldr	r2, [pc, #640]	; (8007548 <problem_fetch+0x5e84>)
 80072c8:	461c      	mov	r4, r3
 80072ca:	4613      	mov	r3, r2
 80072cc:	cb07      	ldmia	r3!, {r0, r1, r2}
 80072ce:	6020      	str	r0, [r4, #0]
 80072d0:	6061      	str	r1, [r4, #4]
 80072d2:	60a2      	str	r2, [r4, #8]
 80072d4:	881b      	ldrh	r3, [r3, #0]
 80072d6:	81a3      	strh	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,e");
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 80072de:	499b      	ldr	r1, [pc, #620]	; (800754c <problem_fetch+0x5e88>)
 80072e0:	461a      	mov	r2, r3
 80072e2:	460b      	mov	r3, r1
 80072e4:	cb03      	ldmia	r3!, {r0, r1}
 80072e6:	6010      	str	r0, [r2, #0]
 80072e8:	6051      	str	r1, [r2, #4]
 80072ea:	881b      	ldrh	r3, [r3, #0]
 80072ec:	8113      	strh	r3, [r2, #8]
			break;
 80072ee:	f015 b919 	b.w	801c524 <problem_fetch+0x1ae60>
		case 153 :
			strcpy(p->name,"THE FORGOTTEN ONES");
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80072f8:	4a95      	ldr	r2, [pc, #596]	; (8007550 <problem_fetch+0x5e8c>)
 80072fa:	461d      	mov	r5, r3
 80072fc:	4614      	mov	r4, r2
 80072fe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007300:	6028      	str	r0, [r5, #0]
 8007302:	6069      	str	r1, [r5, #4]
 8007304:	60aa      	str	r2, [r5, #8]
 8007306:	60eb      	str	r3, [r5, #12]
 8007308:	8823      	ldrh	r3, [r4, #0]
 800730a:	78a2      	ldrb	r2, [r4, #2]
 800730c:	822b      	strh	r3, [r5, #16]
 800730e:	4613      	mov	r3, r2
 8007310:	74ab      	strb	r3, [r5, #18]
			strcpy(p->grade,"7A+");
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8007318:	4a8e      	ldr	r2, [pc, #568]	; (8007554 <problem_fetch+0x5e90>)
 800731a:	6810      	ldr	r0, [r2, #0]
 800731c:	6018      	str	r0, [r3, #0]
			p->moveSize = 8;
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	2208      	movs	r2, #8
 8007322:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"C,B,A,F,F,K,I,I");
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	33a4      	adds	r3, #164	; 0xa4
 8007328:	4a8b      	ldr	r2, [pc, #556]	; (8007558 <problem_fetch+0x5e94>)
 800732a:	461c      	mov	r4, r3
 800732c:	4615      	mov	r5, r2
 800732e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007330:	6020      	str	r0, [r4, #0]
 8007332:	6061      	str	r1, [r4, #4]
 8007334:	60a2      	str	r2, [r4, #8]
 8007336:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,6,9,11,13,14,15,18");
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	3304      	adds	r3, #4
 800733c:	4a87      	ldr	r2, [pc, #540]	; (800755c <problem_fetch+0x5e98>)
 800733e:	461d      	mov	r5, r3
 8007340:	4614      	mov	r4, r2
 8007342:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007344:	6028      	str	r0, [r5, #0]
 8007346:	6069      	str	r1, [r5, #4]
 8007348:	60aa      	str	r2, [r5, #8]
 800734a:	60eb      	str	r3, [r5, #12]
 800734c:	6820      	ldr	r0, [r4, #0]
 800734e:	6128      	str	r0, [r5, #16]
 8007350:	7923      	ldrb	r3, [r4, #4]
 8007352:	752b      	strb	r3, [r5, #20]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,e");
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800735a:	4a81      	ldr	r2, [pc, #516]	; (8007560 <problem_fetch+0x5e9c>)
 800735c:	461c      	mov	r4, r3
 800735e:	4615      	mov	r5, r2
 8007360:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007362:	6020      	str	r0, [r4, #0]
 8007364:	6061      	str	r1, [r4, #4]
 8007366:	60a2      	str	r2, [r4, #8]
 8007368:	60e3      	str	r3, [r4, #12]
			break;
 800736a:	f015 b8db 	b.w	801c524 <problem_fetch+0x1ae60>
		case 154 :
			strcpy(p->name,"BLUE BOWLS");
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8007374:	497b      	ldr	r1, [pc, #492]	; (8007564 <problem_fetch+0x5ea0>)
 8007376:	461a      	mov	r2, r3
 8007378:	460b      	mov	r3, r1
 800737a:	cb03      	ldmia	r3!, {r0, r1}
 800737c:	6010      	str	r0, [r2, #0]
 800737e:	6051      	str	r1, [r2, #4]
 8007380:	8819      	ldrh	r1, [r3, #0]
 8007382:	789b      	ldrb	r3, [r3, #2]
 8007384:	8111      	strh	r1, [r2, #8]
 8007386:	7293      	strb	r3, [r2, #10]
			strcpy(p->grade,"6C+");
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800738e:	4a76      	ldr	r2, [pc, #472]	; (8007568 <problem_fetch+0x5ea4>)
 8007390:	6810      	ldr	r0, [r2, #0]
 8007392:	6018      	str	r0, [r3, #0]
			p->moveSize = 8;
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	2208      	movs	r2, #8
 8007398:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,E,I,H,G,D,H,J");
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	33a4      	adds	r3, #164	; 0xa4
 800739e:	4a73      	ldr	r2, [pc, #460]	; (800756c <problem_fetch+0x5ea8>)
 80073a0:	461c      	mov	r4, r3
 80073a2:	4615      	mov	r5, r2
 80073a4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80073a6:	6020      	str	r0, [r4, #0]
 80073a8:	6061      	str	r1, [r4, #4]
 80073aa:	60a2      	str	r2, [r4, #8]
 80073ac:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"9,12,14,16,17,18,5,5");
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	3304      	adds	r3, #4
 80073b2:	4a6f      	ldr	r2, [pc, #444]	; (8007570 <problem_fetch+0x5eac>)
 80073b4:	461d      	mov	r5, r3
 80073b6:	4614      	mov	r4, r2
 80073b8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80073ba:	6028      	str	r0, [r5, #0]
 80073bc:	6069      	str	r1, [r5, #4]
 80073be:	60aa      	str	r2, [r5, #8]
 80073c0:	60eb      	str	r3, [r5, #12]
 80073c2:	6820      	ldr	r0, [r4, #0]
 80073c4:	6128      	str	r0, [r5, #16]
 80073c6:	7923      	ldrb	r3, [r4, #4]
 80073c8:	752b      	strb	r3, [r5, #20]
			strcpy(p->startFinish,"d,d,d,d,d,e,s,s");
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 80073d0:	4a68      	ldr	r2, [pc, #416]	; (8007574 <problem_fetch+0x5eb0>)
 80073d2:	461c      	mov	r4, r3
 80073d4:	4615      	mov	r5, r2
 80073d6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80073d8:	6020      	str	r0, [r4, #0]
 80073da:	6061      	str	r1, [r4, #4]
 80073dc:	60a2      	str	r2, [r4, #8]
 80073de:	60e3      	str	r3, [r4, #12]
			break;
 80073e0:	f015 b8a0 	b.w	801c524 <problem_fetch+0x1ae60>
		case 155 :
			strcpy(p->name,"GILDA");
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80073ea:	4a63      	ldr	r2, [pc, #396]	; (8007578 <problem_fetch+0x5eb4>)
 80073ec:	6810      	ldr	r0, [r2, #0]
 80073ee:	6018      	str	r0, [r3, #0]
 80073f0:	8892      	ldrh	r2, [r2, #4]
 80073f2:	809a      	strh	r2, [r3, #4]
			strcpy(p->grade,"6C");
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80073fa:	4a60      	ldr	r2, [pc, #384]	; (800757c <problem_fetch+0x5eb8>)
 80073fc:	8811      	ldrh	r1, [r2, #0]
 80073fe:	7892      	ldrb	r2, [r2, #2]
 8007400:	8019      	strh	r1, [r3, #0]
 8007402:	709a      	strb	r2, [r3, #2]
			p->moveSize = 8;
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	2208      	movs	r2, #8
 8007408:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,G,J,G,E,I,H,I");
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	33a4      	adds	r3, #164	; 0xa4
 800740e:	4a5c      	ldr	r2, [pc, #368]	; (8007580 <problem_fetch+0x5ebc>)
 8007410:	461c      	mov	r4, r3
 8007412:	4615      	mov	r5, r2
 8007414:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007416:	6020      	str	r0, [r4, #0]
 8007418:	6061      	str	r1, [r4, #4]
 800741a:	60a2      	str	r2, [r4, #8]
 800741c:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,6,7,9,12,14,16,18");
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	3304      	adds	r3, #4
 8007422:	4a58      	ldr	r2, [pc, #352]	; (8007584 <problem_fetch+0x5ec0>)
 8007424:	461d      	mov	r5, r3
 8007426:	4614      	mov	r4, r2
 8007428:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800742a:	6028      	str	r0, [r5, #0]
 800742c:	6069      	str	r1, [r5, #4]
 800742e:	60aa      	str	r2, [r5, #8]
 8007430:	60eb      	str	r3, [r5, #12]
 8007432:	6820      	ldr	r0, [r4, #0]
 8007434:	6128      	str	r0, [r5, #16]
			strcpy(p->startFinish,"s,d,d,d,d,d,d,e");
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800743c:	4a52      	ldr	r2, [pc, #328]	; (8007588 <problem_fetch+0x5ec4>)
 800743e:	461c      	mov	r4, r3
 8007440:	4615      	mov	r5, r2
 8007442:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007444:	6020      	str	r0, [r4, #0]
 8007446:	6061      	str	r1, [r4, #4]
 8007448:	60a2      	str	r2, [r4, #8]
 800744a:	60e3      	str	r3, [r4, #12]
			break;
 800744c:	f015 b86a 	b.w	801c524 <problem_fetch+0x1ae60>
		case 156 :
			strcpy(p->name,"DARK HORSE");
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8007456:	494d      	ldr	r1, [pc, #308]	; (800758c <problem_fetch+0x5ec8>)
 8007458:	461a      	mov	r2, r3
 800745a:	460b      	mov	r3, r1
 800745c:	cb03      	ldmia	r3!, {r0, r1}
 800745e:	6010      	str	r0, [r2, #0]
 8007460:	6051      	str	r1, [r2, #4]
 8007462:	8819      	ldrh	r1, [r3, #0]
 8007464:	789b      	ldrb	r3, [r3, #2]
 8007466:	8111      	strh	r1, [r2, #8]
 8007468:	7293      	strb	r3, [r2, #10]
			strcpy(p->grade,"7B+");
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8007470:	4a47      	ldr	r2, [pc, #284]	; (8007590 <problem_fetch+0x5ecc>)
 8007472:	6810      	ldr	r0, [r2, #0]
 8007474:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	2207      	movs	r2, #7
 800747a:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"C,G,H,F,I,D,E");
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	33a4      	adds	r3, #164	; 0xa4
 8007480:	4a44      	ldr	r2, [pc, #272]	; (8007594 <problem_fetch+0x5ed0>)
 8007482:	461c      	mov	r4, r3
 8007484:	4613      	mov	r3, r2
 8007486:	cb07      	ldmia	r3!, {r0, r1, r2}
 8007488:	6020      	str	r0, [r4, #0]
 800748a:	6061      	str	r1, [r4, #4]
 800748c:	60a2      	str	r2, [r4, #8]
 800748e:	881b      	ldrh	r3, [r3, #0]
 8007490:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,6,8,13,10,18,16");
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	3304      	adds	r3, #4
 8007496:	4a40      	ldr	r2, [pc, #256]	; (8007598 <problem_fetch+0x5ed4>)
 8007498:	461d      	mov	r5, r3
 800749a:	4614      	mov	r4, r2
 800749c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800749e:	6028      	str	r0, [r5, #0]
 80074a0:	6069      	str	r1, [r5, #4]
 80074a2:	60aa      	str	r2, [r5, #8]
 80074a4:	60eb      	str	r3, [r5, #12]
 80074a6:	8823      	ldrh	r3, [r4, #0]
 80074a8:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,d,d,d,d,e,d");
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 80074b0:	4a3a      	ldr	r2, [pc, #232]	; (800759c <problem_fetch+0x5ed8>)
 80074b2:	461c      	mov	r4, r3
 80074b4:	4613      	mov	r3, r2
 80074b6:	cb07      	ldmia	r3!, {r0, r1, r2}
 80074b8:	6020      	str	r0, [r4, #0]
 80074ba:	6061      	str	r1, [r4, #4]
 80074bc:	60a2      	str	r2, [r4, #8]
 80074be:	881b      	ldrh	r3, [r3, #0]
 80074c0:	81a3      	strh	r3, [r4, #12]
			break;
 80074c2:	f015 b82f 	b.w	801c524 <problem_fetch+0x1ae60>
		case 157 :
			strcpy(p->name,"LAP OF LUXURY");
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80074cc:	4a34      	ldr	r2, [pc, #208]	; (80075a0 <problem_fetch+0x5edc>)
 80074ce:	461c      	mov	r4, r3
 80074d0:	4613      	mov	r3, r2
 80074d2:	cb07      	ldmia	r3!, {r0, r1, r2}
 80074d4:	6020      	str	r0, [r4, #0]
 80074d6:	6061      	str	r1, [r4, #4]
 80074d8:	60a2      	str	r2, [r4, #8]
 80074da:	881b      	ldrh	r3, [r3, #0]
 80074dc:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade,"6C+");
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80074e4:	4a20      	ldr	r2, [pc, #128]	; (8007568 <problem_fetch+0x5ea4>)
 80074e6:	6810      	ldr	r0, [r2, #0]
 80074e8:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	2207      	movs	r2, #7
 80074ee:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"H,D,E,B,E,E,I");
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	33a4      	adds	r3, #164	; 0xa4
 80074f4:	4a2b      	ldr	r2, [pc, #172]	; (80075a4 <problem_fetch+0x5ee0>)
 80074f6:	461c      	mov	r4, r3
 80074f8:	4613      	mov	r3, r2
 80074fa:	cb07      	ldmia	r3!, {r0, r1, r2}
 80074fc:	6020      	str	r0, [r4, #0]
 80074fe:	6061      	str	r1, [r4, #4]
 8007500:	60a2      	str	r2, [r4, #8]
 8007502:	881b      	ldrh	r3, [r3, #0]
 8007504:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,7,9,10,12,16,18");
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	3304      	adds	r3, #4
 800750a:	4a27      	ldr	r2, [pc, #156]	; (80075a8 <problem_fetch+0x5ee4>)
 800750c:	461d      	mov	r5, r3
 800750e:	4614      	mov	r4, r2
 8007510:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007512:	6028      	str	r0, [r5, #0]
 8007514:	6069      	str	r1, [r5, #4]
 8007516:	60aa      	str	r2, [r5, #8]
 8007518:	60eb      	str	r3, [r5, #12]
 800751a:	8823      	ldrh	r3, [r4, #0]
 800751c:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8007524:	4a21      	ldr	r2, [pc, #132]	; (80075ac <problem_fetch+0x5ee8>)
 8007526:	461c      	mov	r4, r3
 8007528:	4613      	mov	r3, r2
 800752a:	cb07      	ldmia	r3!, {r0, r1, r2}
 800752c:	6020      	str	r0, [r4, #0]
 800752e:	6061      	str	r1, [r4, #4]
 8007530:	60a2      	str	r2, [r4, #8]
 8007532:	881b      	ldrh	r3, [r3, #0]
 8007534:	81a3      	strh	r3, [r4, #12]
			break;
 8007536:	f014 bff5 	b.w	801c524 <problem_fetch+0x1ae60>
 800753a:	bf00      	nop
 800753c:	08025720 	.word	0x08025720
 8007540:	08023814 	.word	0x08023814
 8007544:	08025728 	.word	0x08025728
 8007548:	08025734 	.word	0x08025734
 800754c:	08023d20 	.word	0x08023d20
 8007550:	08025744 	.word	0x08025744
 8007554:	080239f4 	.word	0x080239f4
 8007558:	08025758 	.word	0x08025758
 800755c:	08025768 	.word	0x08025768
 8007560:	08023978 	.word	0x08023978
 8007564:	08025780 	.word	0x08025780
 8007568:	080238ec 	.word	0x080238ec
 800756c:	0802578c 	.word	0x0802578c
 8007570:	0802579c 	.word	0x0802579c
 8007574:	080257b4 	.word	0x080257b4
 8007578:	080257c4 	.word	0x080257c4
 800757c:	08023920 	.word	0x08023920
 8007580:	080257cc 	.word	0x080257cc
 8007584:	080257dc 	.word	0x080257dc
 8007588:	08023a64 	.word	0x08023a64
 800758c:	080257f0 	.word	0x080257f0
 8007590:	08023990 	.word	0x08023990
 8007594:	080257fc 	.word	0x080257fc
 8007598:	0802580c 	.word	0x0802580c
 800759c:	080249bc 	.word	0x080249bc
 80075a0:	08025820 	.word	0x08025820
 80075a4:	08025830 	.word	0x08025830
 80075a8:	08025840 	.word	0x08025840
 80075ac:	080239dc 	.word	0x080239dc
		case 158 :
			strcpy(p->name,"EASE OF ACCESS");
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80075b6:	4aab      	ldr	r2, [pc, #684]	; (8007864 <problem_fetch+0x61a0>)
 80075b8:	461c      	mov	r4, r3
 80075ba:	4613      	mov	r3, r2
 80075bc:	cb07      	ldmia	r3!, {r0, r1, r2}
 80075be:	6020      	str	r0, [r4, #0]
 80075c0:	6061      	str	r1, [r4, #4]
 80075c2:	60a2      	str	r2, [r4, #8]
 80075c4:	881a      	ldrh	r2, [r3, #0]
 80075c6:	789b      	ldrb	r3, [r3, #2]
 80075c8:	81a2      	strh	r2, [r4, #12]
 80075ca:	73a3      	strb	r3, [r4, #14]
			strcpy(p->grade,"6C+");
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80075d2:	4aa5      	ldr	r2, [pc, #660]	; (8007868 <problem_fetch+0x61a4>)
 80075d4:	6810      	ldr	r0, [r2, #0]
 80075d6:	6018      	str	r0, [r3, #0]
			p->moveSize = 9;
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	2209      	movs	r2, #9
 80075dc:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"H,K,J,E,J,J,H,E,D");
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	33a4      	adds	r3, #164	; 0xa4
 80075e2:	4aa2      	ldr	r2, [pc, #648]	; (800786c <problem_fetch+0x61a8>)
 80075e4:	461d      	mov	r5, r3
 80075e6:	4614      	mov	r4, r2
 80075e8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80075ea:	6028      	str	r0, [r5, #0]
 80075ec:	6069      	str	r1, [r5, #4]
 80075ee:	60aa      	str	r2, [r5, #8]
 80075f0:	60eb      	str	r3, [r5, #12]
 80075f2:	8823      	ldrh	r3, [r4, #0]
 80075f4:	822b      	strh	r3, [r5, #16]
			strcpy(p->moveNumbers,"5,9,7,9,13,16,16,16,18");
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	3304      	adds	r3, #4
 80075fa:	4a9d      	ldr	r2, [pc, #628]	; (8007870 <problem_fetch+0x61ac>)
 80075fc:	461c      	mov	r4, r3
 80075fe:	4615      	mov	r5, r2
 8007600:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007602:	6020      	str	r0, [r4, #0]
 8007604:	6061      	str	r1, [r4, #4]
 8007606:	60a2      	str	r2, [r4, #8]
 8007608:	60e3      	str	r3, [r4, #12]
 800760a:	6828      	ldr	r0, [r5, #0]
 800760c:	6120      	str	r0, [r4, #16]
 800760e:	88ab      	ldrh	r3, [r5, #4]
 8007610:	79aa      	ldrb	r2, [r5, #6]
 8007612:	82a3      	strh	r3, [r4, #20]
 8007614:	4613      	mov	r3, r2
 8007616:	75a3      	strb	r3, [r4, #22]
			strcpy(p->startFinish,"s,d,d,d,d,d,d,d,e");
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800761e:	4a95      	ldr	r2, [pc, #596]	; (8007874 <problem_fetch+0x61b0>)
 8007620:	461d      	mov	r5, r3
 8007622:	4614      	mov	r4, r2
 8007624:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007626:	6028      	str	r0, [r5, #0]
 8007628:	6069      	str	r1, [r5, #4]
 800762a:	60aa      	str	r2, [r5, #8]
 800762c:	60eb      	str	r3, [r5, #12]
 800762e:	8823      	ldrh	r3, [r4, #0]
 8007630:	822b      	strh	r3, [r5, #16]
			break;
 8007632:	f014 bf77 	b.w	801c524 <problem_fetch+0x1ae60>
		case 159 :
			strcpy(p->name,"OLYMPUS");
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800763c:	498e      	ldr	r1, [pc, #568]	; (8007878 <problem_fetch+0x61b4>)
 800763e:	461a      	mov	r2, r3
 8007640:	460b      	mov	r3, r1
 8007642:	cb03      	ldmia	r3!, {r0, r1}
 8007644:	6010      	str	r0, [r2, #0]
 8007646:	6051      	str	r1, [r2, #4]
			strcpy(p->grade,"7C");
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800764e:	4a8b      	ldr	r2, [pc, #556]	; (800787c <problem_fetch+0x61b8>)
 8007650:	8811      	ldrh	r1, [r2, #0]
 8007652:	7892      	ldrb	r2, [r2, #2]
 8007654:	8019      	strh	r1, [r3, #0]
 8007656:	709a      	strb	r2, [r3, #2]
			p->moveSize = 7;
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	2207      	movs	r2, #7
 800765c:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"H,B,E,D,F,G,I");
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	33a4      	adds	r3, #164	; 0xa4
 8007662:	4a87      	ldr	r2, [pc, #540]	; (8007880 <problem_fetch+0x61bc>)
 8007664:	461c      	mov	r4, r3
 8007666:	4613      	mov	r3, r2
 8007668:	cb07      	ldmia	r3!, {r0, r1, r2}
 800766a:	6020      	str	r0, [r4, #0]
 800766c:	6061      	str	r1, [r4, #4]
 800766e:	60a2      	str	r2, [r4, #8]
 8007670:	881b      	ldrh	r3, [r3, #0]
 8007672:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,6,9,11,13,15,18");
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	3304      	adds	r3, #4
 8007678:	4a82      	ldr	r2, [pc, #520]	; (8007884 <problem_fetch+0x61c0>)
 800767a:	461d      	mov	r5, r3
 800767c:	4614      	mov	r4, r2
 800767e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007680:	6028      	str	r0, [r5, #0]
 8007682:	6069      	str	r1, [r5, #4]
 8007684:	60aa      	str	r2, [r5, #8]
 8007686:	60eb      	str	r3, [r5, #12]
 8007688:	8823      	ldrh	r3, [r4, #0]
 800768a:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8007692:	4a7d      	ldr	r2, [pc, #500]	; (8007888 <problem_fetch+0x61c4>)
 8007694:	461c      	mov	r4, r3
 8007696:	4613      	mov	r3, r2
 8007698:	cb07      	ldmia	r3!, {r0, r1, r2}
 800769a:	6020      	str	r0, [r4, #0]
 800769c:	6061      	str	r1, [r4, #4]
 800769e:	60a2      	str	r2, [r4, #8]
 80076a0:	881b      	ldrh	r3, [r3, #0]
 80076a2:	81a3      	strh	r3, [r4, #12]
			break;
 80076a4:	f014 bf3e 	b.w	801c524 <problem_fetch+0x1ae60>
		case 160 :
			strcpy(p->name,"FRUIT CAKE");
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80076ae:	4977      	ldr	r1, [pc, #476]	; (800788c <problem_fetch+0x61c8>)
 80076b0:	461a      	mov	r2, r3
 80076b2:	460b      	mov	r3, r1
 80076b4:	cb03      	ldmia	r3!, {r0, r1}
 80076b6:	6010      	str	r0, [r2, #0]
 80076b8:	6051      	str	r1, [r2, #4]
 80076ba:	8819      	ldrh	r1, [r3, #0]
 80076bc:	789b      	ldrb	r3, [r3, #2]
 80076be:	8111      	strh	r1, [r2, #8]
 80076c0:	7293      	strb	r3, [r2, #10]
			strcpy(p->grade,"6B+");
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80076c8:	4a71      	ldr	r2, [pc, #452]	; (8007890 <problem_fetch+0x61cc>)
 80076ca:	6810      	ldr	r0, [r2, #0]
 80076cc:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	2206      	movs	r2, #6
 80076d2:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,E,F,E,D,D");
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	33a4      	adds	r3, #164	; 0xa4
 80076d8:	4a6e      	ldr	r2, [pc, #440]	; (8007894 <problem_fetch+0x61d0>)
 80076da:	461c      	mov	r4, r3
 80076dc:	4613      	mov	r3, r2
 80076de:	cb07      	ldmia	r3!, {r0, r1, r2}
 80076e0:	6020      	str	r0, [r4, #0]
 80076e2:	6061      	str	r1, [r4, #4]
 80076e4:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,8,11,12,15,18");
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	3304      	adds	r3, #4
 80076ea:	4a6b      	ldr	r2, [pc, #428]	; (8007898 <problem_fetch+0x61d4>)
 80076ec:	461c      	mov	r4, r3
 80076ee:	4615      	mov	r5, r2
 80076f0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80076f2:	6020      	str	r0, [r4, #0]
 80076f4:	6061      	str	r1, [r4, #4]
 80076f6:	60a2      	str	r2, [r4, #8]
 80076f8:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8007700:	4a66      	ldr	r2, [pc, #408]	; (800789c <problem_fetch+0x61d8>)
 8007702:	461c      	mov	r4, r3
 8007704:	4613      	mov	r3, r2
 8007706:	cb07      	ldmia	r3!, {r0, r1, r2}
 8007708:	6020      	str	r0, [r4, #0]
 800770a:	6061      	str	r1, [r4, #4]
 800770c:	60a2      	str	r2, [r4, #8]
			break;
 800770e:	f014 bf09 	b.w	801c524 <problem_fetch+0x1ae60>
		case 161 :
			strcpy(p->name,"LA MARY ME PAGA");
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8007718:	4a61      	ldr	r2, [pc, #388]	; (80078a0 <problem_fetch+0x61dc>)
 800771a:	461c      	mov	r4, r3
 800771c:	4615      	mov	r5, r2
 800771e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007720:	6020      	str	r0, [r4, #0]
 8007722:	6061      	str	r1, [r4, #4]
 8007724:	60a2      	str	r2, [r4, #8]
 8007726:	60e3      	str	r3, [r4, #12]
			strcpy(p->grade,"7B");
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800772e:	4a5d      	ldr	r2, [pc, #372]	; (80078a4 <problem_fetch+0x61e0>)
 8007730:	8811      	ldrh	r1, [r2, #0]
 8007732:	7892      	ldrb	r2, [r2, #2]
 8007734:	8019      	strh	r1, [r3, #0]
 8007736:	709a      	strb	r2, [r3, #2]
			p->moveSize = 6;
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	2206      	movs	r2, #6
 800773c:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"C,E,E,B,E,D");
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	33a4      	adds	r3, #164	; 0xa4
 8007742:	4a59      	ldr	r2, [pc, #356]	; (80078a8 <problem_fetch+0x61e4>)
 8007744:	461c      	mov	r4, r3
 8007746:	4613      	mov	r3, r2
 8007748:	cb07      	ldmia	r3!, {r0, r1, r2}
 800774a:	6020      	str	r0, [r4, #0]
 800774c:	6061      	str	r1, [r4, #4]
 800774e:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,6,9,10,14,18");
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	3304      	adds	r3, #4
 8007754:	4a55      	ldr	r2, [pc, #340]	; (80078ac <problem_fetch+0x61e8>)
 8007756:	461c      	mov	r4, r3
 8007758:	4613      	mov	r3, r2
 800775a:	cb07      	ldmia	r3!, {r0, r1, r2}
 800775c:	6020      	str	r0, [r4, #0]
 800775e:	6061      	str	r1, [r4, #4]
 8007760:	60a2      	str	r2, [r4, #8]
 8007762:	881a      	ldrh	r2, [r3, #0]
 8007764:	789b      	ldrb	r3, [r3, #2]
 8007766:	81a2      	strh	r2, [r4, #12]
 8007768:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish,"s,s,d,d,d,e");
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8007770:	4a4f      	ldr	r2, [pc, #316]	; (80078b0 <problem_fetch+0x61ec>)
 8007772:	461c      	mov	r4, r3
 8007774:	4613      	mov	r3, r2
 8007776:	cb07      	ldmia	r3!, {r0, r1, r2}
 8007778:	6020      	str	r0, [r4, #0]
 800777a:	6061      	str	r1, [r4, #4]
 800777c:	60a2      	str	r2, [r4, #8]
			break;
 800777e:	f014 bed1 	b.w	801c524 <problem_fetch+0x1ae60>
		case 162 :
			strcpy(p->name,"WILD BILL");
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8007788:	494a      	ldr	r1, [pc, #296]	; (80078b4 <problem_fetch+0x61f0>)
 800778a:	461a      	mov	r2, r3
 800778c:	460b      	mov	r3, r1
 800778e:	cb03      	ldmia	r3!, {r0, r1}
 8007790:	6010      	str	r0, [r2, #0]
 8007792:	6051      	str	r1, [r2, #4]
 8007794:	881b      	ldrh	r3, [r3, #0]
 8007796:	8113      	strh	r3, [r2, #8]
			strcpy(p->grade,"7B");
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800779e:	4a41      	ldr	r2, [pc, #260]	; (80078a4 <problem_fetch+0x61e0>)
 80077a0:	8811      	ldrh	r1, [r2, #0]
 80077a2:	7892      	ldrb	r2, [r2, #2]
 80077a4:	8019      	strh	r1, [r3, #0]
 80077a6:	709a      	strb	r2, [r3, #2]
			p->moveSize = 6;
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	2206      	movs	r2, #6
 80077ac:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"H,K,G,D,D,A");
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	33a4      	adds	r3, #164	; 0xa4
 80077b2:	4a41      	ldr	r2, [pc, #260]	; (80078b8 <problem_fetch+0x61f4>)
 80077b4:	461c      	mov	r4, r3
 80077b6:	4613      	mov	r3, r2
 80077b8:	cb07      	ldmia	r3!, {r0, r1, r2}
 80077ba:	6020      	str	r0, [r4, #0]
 80077bc:	6061      	str	r1, [r4, #4]
 80077be:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,9,14,15,18,18");
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	3304      	adds	r3, #4
 80077c4:	4a3d      	ldr	r2, [pc, #244]	; (80078bc <problem_fetch+0x61f8>)
 80077c6:	461c      	mov	r4, r3
 80077c8:	4615      	mov	r5, r2
 80077ca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80077cc:	6020      	str	r0, [r4, #0]
 80077ce:	6061      	str	r1, [r4, #4]
 80077d0:	60a2      	str	r2, [r4, #8]
 80077d2:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,e,e");
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 80077da:	4a39      	ldr	r2, [pc, #228]	; (80078c0 <problem_fetch+0x61fc>)
 80077dc:	461c      	mov	r4, r3
 80077de:	4613      	mov	r3, r2
 80077e0:	cb07      	ldmia	r3!, {r0, r1, r2}
 80077e2:	6020      	str	r0, [r4, #0]
 80077e4:	6061      	str	r1, [r4, #4]
 80077e6:	60a2      	str	r2, [r4, #8]
			break;
 80077e8:	f014 be9c 	b.w	801c524 <problem_fetch+0x1ae60>
		case 163 :
			strcpy(p->name,"DARK DAYS");
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80077f2:	4934      	ldr	r1, [pc, #208]	; (80078c4 <problem_fetch+0x6200>)
 80077f4:	461a      	mov	r2, r3
 80077f6:	460b      	mov	r3, r1
 80077f8:	cb03      	ldmia	r3!, {r0, r1}
 80077fa:	6010      	str	r0, [r2, #0]
 80077fc:	6051      	str	r1, [r2, #4]
 80077fe:	881b      	ldrh	r3, [r3, #0]
 8007800:	8113      	strh	r3, [r2, #8]
			strcpy(p->grade,"7A+");
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8007808:	4a2f      	ldr	r2, [pc, #188]	; (80078c8 <problem_fetch+0x6204>)
 800780a:	6810      	ldr	r0, [r2, #0]
 800780c:	6018      	str	r0, [r3, #0]
			p->moveSize = 9;
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	2209      	movs	r2, #9
 8007812:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"B,D,B,E,D,I,K,I,I");
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	33a4      	adds	r3, #164	; 0xa4
 8007818:	4a2c      	ldr	r2, [pc, #176]	; (80078cc <problem_fetch+0x6208>)
 800781a:	461d      	mov	r5, r3
 800781c:	4614      	mov	r4, r2
 800781e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007820:	6028      	str	r0, [r5, #0]
 8007822:	6069      	str	r1, [r5, #4]
 8007824:	60aa      	str	r2, [r5, #8]
 8007826:	60eb      	str	r3, [r5, #12]
 8007828:	8823      	ldrh	r3, [r4, #0]
 800782a:	822b      	strh	r3, [r5, #16]
			strcpy(p->moveNumbers,"6,7,10,14,15,15,14,18,7");
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	3304      	adds	r3, #4
 8007830:	4a27      	ldr	r2, [pc, #156]	; (80078d0 <problem_fetch+0x620c>)
 8007832:	461d      	mov	r5, r3
 8007834:	4614      	mov	r4, r2
 8007836:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007838:	6028      	str	r0, [r5, #0]
 800783a:	6069      	str	r1, [r5, #4]
 800783c:	60aa      	str	r2, [r5, #8]
 800783e:	60eb      	str	r3, [r5, #12]
 8007840:	cc03      	ldmia	r4!, {r0, r1}
 8007842:	6128      	str	r0, [r5, #16]
 8007844:	6169      	str	r1, [r5, #20]
			strcpy(p->startFinish,"s,d,d,d,d,d,d,e,d");
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800784c:	4a21      	ldr	r2, [pc, #132]	; (80078d4 <problem_fetch+0x6210>)
 800784e:	461d      	mov	r5, r3
 8007850:	4614      	mov	r4, r2
 8007852:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007854:	6028      	str	r0, [r5, #0]
 8007856:	6069      	str	r1, [r5, #4]
 8007858:	60aa      	str	r2, [r5, #8]
 800785a:	60eb      	str	r3, [r5, #12]
 800785c:	8823      	ldrh	r3, [r4, #0]
 800785e:	822b      	strh	r3, [r5, #16]
			break;
 8007860:	f014 be60 	b.w	801c524 <problem_fetch+0x1ae60>
 8007864:	08025854 	.word	0x08025854
 8007868:	080238ec 	.word	0x080238ec
 800786c:	08025864 	.word	0x08025864
 8007870:	08025878 	.word	0x08025878
 8007874:	0802570c 	.word	0x0802570c
 8007878:	08025890 	.word	0x08025890
 800787c:	08024088 	.word	0x08024088
 8007880:	08025898 	.word	0x08025898
 8007884:	080258a8 	.word	0x080258a8
 8007888:	080239dc 	.word	0x080239dc
 800788c:	080258bc 	.word	0x080258bc
 8007890:	08023854 	.word	0x08023854
 8007894:	080258c8 	.word	0x080258c8
 8007898:	080258d4 	.word	0x080258d4
 800789c:	08023bf0 	.word	0x08023bf0
 80078a0:	080258e4 	.word	0x080258e4
 80078a4:	08023f4c 	.word	0x08023f4c
 80078a8:	080258f4 	.word	0x080258f4
 80078ac:	08025900 	.word	0x08025900
 80078b0:	08023834 	.word	0x08023834
 80078b4:	08025910 	.word	0x08025910
 80078b8:	0802591c 	.word	0x0802591c
 80078bc:	08025928 	.word	0x08025928
 80078c0:	08025938 	.word	0x08025938
 80078c4:	08025944 	.word	0x08025944
 80078c8:	080239f4 	.word	0x080239f4
 80078cc:	08025950 	.word	0x08025950
 80078d0:	08025964 	.word	0x08025964
 80078d4:	0802597c 	.word	0x0802597c
		case 164 :
			strcpy(p->name,"PINPANPUN");
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80078de:	49a8      	ldr	r1, [pc, #672]	; (8007b80 <problem_fetch+0x64bc>)
 80078e0:	461a      	mov	r2, r3
 80078e2:	460b      	mov	r3, r1
 80078e4:	cb03      	ldmia	r3!, {r0, r1}
 80078e6:	6010      	str	r0, [r2, #0]
 80078e8:	6051      	str	r1, [r2, #4]
 80078ea:	881b      	ldrh	r3, [r3, #0]
 80078ec:	8113      	strh	r3, [r2, #8]
			strcpy(p->grade,"7A+");
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80078f4:	4aa3      	ldr	r2, [pc, #652]	; (8007b84 <problem_fetch+0x64c0>)
 80078f6:	6810      	ldr	r0, [r2, #0]
 80078f8:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	2207      	movs	r2, #7
 80078fe:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"B,C,E,A,E,A,D");
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	33a4      	adds	r3, #164	; 0xa4
 8007904:	4aa0      	ldr	r2, [pc, #640]	; (8007b88 <problem_fetch+0x64c4>)
 8007906:	461c      	mov	r4, r3
 8007908:	4613      	mov	r3, r2
 800790a:	cb07      	ldmia	r3!, {r0, r1, r2}
 800790c:	6020      	str	r0, [r4, #0]
 800790e:	6061      	str	r1, [r4, #4]
 8007910:	60a2      	str	r2, [r4, #8]
 8007912:	881b      	ldrh	r3, [r3, #0]
 8007914:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"6,5,9,9,12,14,18");
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	3304      	adds	r3, #4
 800791a:	4a9c      	ldr	r2, [pc, #624]	; (8007b8c <problem_fetch+0x64c8>)
 800791c:	461d      	mov	r5, r3
 800791e:	4614      	mov	r4, r2
 8007920:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007922:	6028      	str	r0, [r5, #0]
 8007924:	6069      	str	r1, [r5, #4]
 8007926:	60aa      	str	r2, [r5, #8]
 8007928:	60eb      	str	r3, [r5, #12]
 800792a:	7823      	ldrb	r3, [r4, #0]
 800792c:	742b      	strb	r3, [r5, #16]
			strcpy(p->startFinish,"s,s,d,d,d,d,e");
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8007934:	4a96      	ldr	r2, [pc, #600]	; (8007b90 <problem_fetch+0x64cc>)
 8007936:	461c      	mov	r4, r3
 8007938:	4613      	mov	r3, r2
 800793a:	cb07      	ldmia	r3!, {r0, r1, r2}
 800793c:	6020      	str	r0, [r4, #0]
 800793e:	6061      	str	r1, [r4, #4]
 8007940:	60a2      	str	r2, [r4, #8]
 8007942:	881b      	ldrh	r3, [r3, #0]
 8007944:	81a3      	strh	r3, [r4, #12]
			break;
 8007946:	f014 bded 	b.w	801c524 <problem_fetch+0x1ae60>
		case 165 :
			strcpy(p->name,"CK");
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8007950:	4a90      	ldr	r2, [pc, #576]	; (8007b94 <problem_fetch+0x64d0>)
 8007952:	8811      	ldrh	r1, [r2, #0]
 8007954:	7892      	ldrb	r2, [r2, #2]
 8007956:	8019      	strh	r1, [r3, #0]
 8007958:	709a      	strb	r2, [r3, #2]
			strcpy(p->grade,"6C+");
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8007960:	4a8d      	ldr	r2, [pc, #564]	; (8007b98 <problem_fetch+0x64d4>)
 8007962:	6810      	ldr	r0, [r2, #0]
 8007964:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	2206      	movs	r2, #6
 800796a:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,H,J,F,G,D");
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	33a4      	adds	r3, #164	; 0xa4
 8007970:	4a8a      	ldr	r2, [pc, #552]	; (8007b9c <problem_fetch+0x64d8>)
 8007972:	461c      	mov	r4, r3
 8007974:	4613      	mov	r3, r2
 8007976:	cb07      	ldmia	r3!, {r0, r1, r2}
 8007978:	6020      	str	r0, [r4, #0]
 800797a:	6061      	str	r1, [r4, #4]
 800797c:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,8,12,13,17,18");
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	3304      	adds	r3, #4
 8007982:	4a87      	ldr	r2, [pc, #540]	; (8007ba0 <problem_fetch+0x64dc>)
 8007984:	461c      	mov	r4, r3
 8007986:	4615      	mov	r5, r2
 8007988:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800798a:	6020      	str	r0, [r4, #0]
 800798c:	6061      	str	r1, [r4, #4]
 800798e:	60a2      	str	r2, [r4, #8]
 8007990:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8007998:	4a82      	ldr	r2, [pc, #520]	; (8007ba4 <problem_fetch+0x64e0>)
 800799a:	461c      	mov	r4, r3
 800799c:	4613      	mov	r3, r2
 800799e:	cb07      	ldmia	r3!, {r0, r1, r2}
 80079a0:	6020      	str	r0, [r4, #0]
 80079a2:	6061      	str	r1, [r4, #4]
 80079a4:	60a2      	str	r2, [r4, #8]
			break;
 80079a6:	f014 bdbd 	b.w	801c524 <problem_fetch+0x1ae60>
		case 166 :
			strcpy(p->name,"TRIO TERNURA");
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80079b0:	4a7d      	ldr	r2, [pc, #500]	; (8007ba8 <problem_fetch+0x64e4>)
 80079b2:	461c      	mov	r4, r3
 80079b4:	4613      	mov	r3, r2
 80079b6:	cb07      	ldmia	r3!, {r0, r1, r2}
 80079b8:	6020      	str	r0, [r4, #0]
 80079ba:	6061      	str	r1, [r4, #4]
 80079bc:	60a2      	str	r2, [r4, #8]
 80079be:	781b      	ldrb	r3, [r3, #0]
 80079c0:	7323      	strb	r3, [r4, #12]
			strcpy(p->grade,"7B+");
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80079c8:	4a78      	ldr	r2, [pc, #480]	; (8007bac <problem_fetch+0x64e8>)
 80079ca:	6810      	ldr	r0, [r2, #0]
 80079cc:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	2206      	movs	r2, #6
 80079d2:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,E,H,E,A,A");
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	33a4      	adds	r3, #164	; 0xa4
 80079d8:	4a75      	ldr	r2, [pc, #468]	; (8007bb0 <problem_fetch+0x64ec>)
 80079da:	461c      	mov	r4, r3
 80079dc:	4613      	mov	r3, r2
 80079de:	cb07      	ldmia	r3!, {r0, r1, r2}
 80079e0:	6020      	str	r0, [r4, #0]
 80079e2:	6061      	str	r1, [r4, #4]
 80079e4:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,6,8,12,14,18");
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	3304      	adds	r3, #4
 80079ea:	4a72      	ldr	r2, [pc, #456]	; (8007bb4 <problem_fetch+0x64f0>)
 80079ec:	461c      	mov	r4, r3
 80079ee:	4613      	mov	r3, r2
 80079f0:	cb07      	ldmia	r3!, {r0, r1, r2}
 80079f2:	6020      	str	r0, [r4, #0]
 80079f4:	6061      	str	r1, [r4, #4]
 80079f6:	60a2      	str	r2, [r4, #8]
 80079f8:	881a      	ldrh	r2, [r3, #0]
 80079fa:	789b      	ldrb	r3, [r3, #2]
 80079fc:	81a2      	strh	r2, [r4, #12]
 80079fe:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8007a06:	4a67      	ldr	r2, [pc, #412]	; (8007ba4 <problem_fetch+0x64e0>)
 8007a08:	461c      	mov	r4, r3
 8007a0a:	4613      	mov	r3, r2
 8007a0c:	cb07      	ldmia	r3!, {r0, r1, r2}
 8007a0e:	6020      	str	r0, [r4, #0]
 8007a10:	6061      	str	r1, [r4, #4]
 8007a12:	60a2      	str	r2, [r4, #8]
			break;
 8007a14:	f014 bd86 	b.w	801c524 <problem_fetch+0x1ae60>
		case 167 :
			strcpy(p->name,"BLACK PROJECT");
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8007a1e:	4a66      	ldr	r2, [pc, #408]	; (8007bb8 <problem_fetch+0x64f4>)
 8007a20:	461c      	mov	r4, r3
 8007a22:	4613      	mov	r3, r2
 8007a24:	cb07      	ldmia	r3!, {r0, r1, r2}
 8007a26:	6020      	str	r0, [r4, #0]
 8007a28:	6061      	str	r1, [r4, #4]
 8007a2a:	60a2      	str	r2, [r4, #8]
 8007a2c:	881b      	ldrh	r3, [r3, #0]
 8007a2e:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade,"7A");
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8007a36:	4a61      	ldr	r2, [pc, #388]	; (8007bbc <problem_fetch+0x64f8>)
 8007a38:	8811      	ldrh	r1, [r2, #0]
 8007a3a:	7892      	ldrb	r2, [r2, #2]
 8007a3c:	8019      	strh	r1, [r3, #0]
 8007a3e:	709a      	strb	r2, [r3, #2]
			p->moveSize = 5;
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	2205      	movs	r2, #5
 8007a44:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"H,H,H,H,I");
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	33a4      	adds	r3, #164	; 0xa4
 8007a4a:	495d      	ldr	r1, [pc, #372]	; (8007bc0 <problem_fetch+0x64fc>)
 8007a4c:	461a      	mov	r2, r3
 8007a4e:	460b      	mov	r3, r1
 8007a50:	cb03      	ldmia	r3!, {r0, r1}
 8007a52:	6010      	str	r0, [r2, #0]
 8007a54:	6051      	str	r1, [r2, #4]
 8007a56:	881b      	ldrh	r3, [r3, #0]
 8007a58:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"5,10,12,16,18");
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	3304      	adds	r3, #4
 8007a5e:	4a59      	ldr	r2, [pc, #356]	; (8007bc4 <problem_fetch+0x6500>)
 8007a60:	461c      	mov	r4, r3
 8007a62:	4613      	mov	r3, r2
 8007a64:	cb07      	ldmia	r3!, {r0, r1, r2}
 8007a66:	6020      	str	r0, [r4, #0]
 8007a68:	6061      	str	r1, [r4, #4]
 8007a6a:	60a2      	str	r2, [r4, #8]
 8007a6c:	881b      	ldrh	r3, [r3, #0]
 8007a6e:	81a3      	strh	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,e");
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8007a76:	4954      	ldr	r1, [pc, #336]	; (8007bc8 <problem_fetch+0x6504>)
 8007a78:	461a      	mov	r2, r3
 8007a7a:	460b      	mov	r3, r1
 8007a7c:	cb03      	ldmia	r3!, {r0, r1}
 8007a7e:	6010      	str	r0, [r2, #0]
 8007a80:	6051      	str	r1, [r2, #4]
 8007a82:	881b      	ldrh	r3, [r3, #0]
 8007a84:	8113      	strh	r3, [r2, #8]
			break;
 8007a86:	f014 bd4d 	b.w	801c524 <problem_fetch+0x1ae60>
		case 168 :
			strcpy(p->name,"BLACK-OUT");
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8007a90:	494e      	ldr	r1, [pc, #312]	; (8007bcc <problem_fetch+0x6508>)
 8007a92:	461a      	mov	r2, r3
 8007a94:	460b      	mov	r3, r1
 8007a96:	cb03      	ldmia	r3!, {r0, r1}
 8007a98:	6010      	str	r0, [r2, #0]
 8007a9a:	6051      	str	r1, [r2, #4]
 8007a9c:	881b      	ldrh	r3, [r3, #0]
 8007a9e:	8113      	strh	r3, [r2, #8]
			strcpy(p->grade,"6B+");
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8007aa6:	4a4a      	ldr	r2, [pc, #296]	; (8007bd0 <problem_fetch+0x650c>)
 8007aa8:	6810      	ldr	r0, [r2, #0]
 8007aaa:	6018      	str	r0, [r3, #0]
			p->moveSize = 9;
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	2209      	movs	r2, #9
 8007ab0:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,E,E,A,F,B,A,E,D");
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	33a4      	adds	r3, #164	; 0xa4
 8007ab6:	4a47      	ldr	r2, [pc, #284]	; (8007bd4 <problem_fetch+0x6510>)
 8007ab8:	461d      	mov	r5, r3
 8007aba:	4614      	mov	r4, r2
 8007abc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007abe:	6028      	str	r0, [r5, #0]
 8007ac0:	6069      	str	r1, [r5, #4]
 8007ac2:	60aa      	str	r2, [r5, #8]
 8007ac4:	60eb      	str	r3, [r5, #12]
 8007ac6:	8823      	ldrh	r3, [r4, #0]
 8007ac8:	822b      	strh	r3, [r5, #16]
			strcpy(p->moveNumbers,"4,6,8,9,11,12,14,16,18");
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	3304      	adds	r3, #4
 8007ace:	4a42      	ldr	r2, [pc, #264]	; (8007bd8 <problem_fetch+0x6514>)
 8007ad0:	461c      	mov	r4, r3
 8007ad2:	4615      	mov	r5, r2
 8007ad4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007ad6:	6020      	str	r0, [r4, #0]
 8007ad8:	6061      	str	r1, [r4, #4]
 8007ada:	60a2      	str	r2, [r4, #8]
 8007adc:	60e3      	str	r3, [r4, #12]
 8007ade:	6828      	ldr	r0, [r5, #0]
 8007ae0:	6120      	str	r0, [r4, #16]
 8007ae2:	88ab      	ldrh	r3, [r5, #4]
 8007ae4:	79aa      	ldrb	r2, [r5, #6]
 8007ae6:	82a3      	strh	r3, [r4, #20]
 8007ae8:	4613      	mov	r3, r2
 8007aea:	75a3      	strb	r3, [r4, #22]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,d,e");
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8007af2:	4a3a      	ldr	r2, [pc, #232]	; (8007bdc <problem_fetch+0x6518>)
 8007af4:	461d      	mov	r5, r3
 8007af6:	4614      	mov	r4, r2
 8007af8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007afa:	6028      	str	r0, [r5, #0]
 8007afc:	6069      	str	r1, [r5, #4]
 8007afe:	60aa      	str	r2, [r5, #8]
 8007b00:	60eb      	str	r3, [r5, #12]
 8007b02:	8823      	ldrh	r3, [r4, #0]
 8007b04:	822b      	strh	r3, [r5, #16]
			break;
 8007b06:	f014 bd0d 	b.w	801c524 <problem_fetch+0x1ae60>
		case 169 :
			strcpy(p->name,"YET ANOTHER WASTE OF SKIN");
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8007b10:	4a33      	ldr	r2, [pc, #204]	; (8007be0 <problem_fetch+0x651c>)
 8007b12:	461d      	mov	r5, r3
 8007b14:	4614      	mov	r4, r2
 8007b16:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007b18:	6028      	str	r0, [r5, #0]
 8007b1a:	6069      	str	r1, [r5, #4]
 8007b1c:	60aa      	str	r2, [r5, #8]
 8007b1e:	60eb      	str	r3, [r5, #12]
 8007b20:	cc03      	ldmia	r4!, {r0, r1}
 8007b22:	6128      	str	r0, [r5, #16]
 8007b24:	6169      	str	r1, [r5, #20]
 8007b26:	8823      	ldrh	r3, [r4, #0]
 8007b28:	832b      	strh	r3, [r5, #24]
			strcpy(p->grade,"7B+");
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8007b30:	4a1e      	ldr	r2, [pc, #120]	; (8007bac <problem_fetch+0x64e8>)
 8007b32:	6810      	ldr	r0, [r2, #0]
 8007b34:	6018      	str	r0, [r3, #0]
			p->moveSize = 5;
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	2205      	movs	r2, #5
 8007b3a:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,I,E,D,A");
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	33a4      	adds	r3, #164	; 0xa4
 8007b40:	4928      	ldr	r1, [pc, #160]	; (8007be4 <problem_fetch+0x6520>)
 8007b42:	461a      	mov	r2, r3
 8007b44:	460b      	mov	r3, r1
 8007b46:	cb03      	ldmia	r3!, {r0, r1}
 8007b48:	6010      	str	r0, [r2, #0]
 8007b4a:	6051      	str	r1, [r2, #4]
 8007b4c:	881b      	ldrh	r3, [r3, #0]
 8007b4e:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"5,10,12,15,18");
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	3304      	adds	r3, #4
 8007b54:	4a24      	ldr	r2, [pc, #144]	; (8007be8 <problem_fetch+0x6524>)
 8007b56:	461c      	mov	r4, r3
 8007b58:	4613      	mov	r3, r2
 8007b5a:	cb07      	ldmia	r3!, {r0, r1, r2}
 8007b5c:	6020      	str	r0, [r4, #0]
 8007b5e:	6061      	str	r1, [r4, #4]
 8007b60:	60a2      	str	r2, [r4, #8]
 8007b62:	881b      	ldrh	r3, [r3, #0]
 8007b64:	81a3      	strh	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,e");
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8007b6c:	4916      	ldr	r1, [pc, #88]	; (8007bc8 <problem_fetch+0x6504>)
 8007b6e:	461a      	mov	r2, r3
 8007b70:	460b      	mov	r3, r1
 8007b72:	cb03      	ldmia	r3!, {r0, r1}
 8007b74:	6010      	str	r0, [r2, #0]
 8007b76:	6051      	str	r1, [r2, #4]
 8007b78:	881b      	ldrh	r3, [r3, #0]
 8007b7a:	8113      	strh	r3, [r2, #8]
			break;
 8007b7c:	f014 bcd2 	b.w	801c524 <problem_fetch+0x1ae60>
 8007b80:	08025990 	.word	0x08025990
 8007b84:	080239f4 	.word	0x080239f4
 8007b88:	0802599c 	.word	0x0802599c
 8007b8c:	080259ac 	.word	0x080259ac
 8007b90:	080238cc 	.word	0x080238cc
 8007b94:	080259c0 	.word	0x080259c0
 8007b98:	080238ec 	.word	0x080238ec
 8007b9c:	080259c4 	.word	0x080259c4
 8007ba0:	080259d0 	.word	0x080259d0
 8007ba4:	08023bf0 	.word	0x08023bf0
 8007ba8:	080259e0 	.word	0x080259e0
 8007bac:	08023990 	.word	0x08023990
 8007bb0:	080259f0 	.word	0x080259f0
 8007bb4:	080259fc 	.word	0x080259fc
 8007bb8:	08025a0c 	.word	0x08025a0c
 8007bbc:	08023814 	.word	0x08023814
 8007bc0:	08025a1c 	.word	0x08025a1c
 8007bc4:	08025a28 	.word	0x08025a28
 8007bc8:	08023d20 	.word	0x08023d20
 8007bcc:	08025a38 	.word	0x08025a38
 8007bd0:	08023854 	.word	0x08023854
 8007bd4:	08025a44 	.word	0x08025a44
 8007bd8:	08025a58 	.word	0x08025a58
 8007bdc:	08024838 	.word	0x08024838
 8007be0:	08025a70 	.word	0x08025a70
 8007be4:	08025a8c 	.word	0x08025a8c
 8007be8:	08025734 	.word	0x08025734
		case 170 :
			strcpy(p->name,"SCIENTIFIC PROGRESS");
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8007bf2:	4aae      	ldr	r2, [pc, #696]	; (8007eac <problem_fetch+0x67e8>)
 8007bf4:	461d      	mov	r5, r3
 8007bf6:	4614      	mov	r4, r2
 8007bf8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007bfa:	6028      	str	r0, [r5, #0]
 8007bfc:	6069      	str	r1, [r5, #4]
 8007bfe:	60aa      	str	r2, [r5, #8]
 8007c00:	60eb      	str	r3, [r5, #12]
 8007c02:	6820      	ldr	r0, [r4, #0]
 8007c04:	6128      	str	r0, [r5, #16]
			strcpy(p->grade,"7A");
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8007c0c:	4aa8      	ldr	r2, [pc, #672]	; (8007eb0 <problem_fetch+0x67ec>)
 8007c0e:	8811      	ldrh	r1, [r2, #0]
 8007c10:	7892      	ldrb	r2, [r2, #2]
 8007c12:	8019      	strh	r1, [r3, #0]
 8007c14:	709a      	strb	r2, [r3, #2]
			p->moveSize = 5;
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	2205      	movs	r2, #5
 8007c1a:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"E,C,F,A,A");
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	33a4      	adds	r3, #164	; 0xa4
 8007c20:	49a4      	ldr	r1, [pc, #656]	; (8007eb4 <problem_fetch+0x67f0>)
 8007c22:	461a      	mov	r2, r3
 8007c24:	460b      	mov	r3, r1
 8007c26:	cb03      	ldmia	r3!, {r0, r1}
 8007c28:	6010      	str	r0, [r2, #0]
 8007c2a:	6051      	str	r1, [r2, #4]
 8007c2c:	881b      	ldrh	r3, [r3, #0]
 8007c2e:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"6,8,11,14,18");
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	3304      	adds	r3, #4
 8007c34:	4aa0      	ldr	r2, [pc, #640]	; (8007eb8 <problem_fetch+0x67f4>)
 8007c36:	461c      	mov	r4, r3
 8007c38:	4613      	mov	r3, r2
 8007c3a:	cb07      	ldmia	r3!, {r0, r1, r2}
 8007c3c:	6020      	str	r0, [r4, #0]
 8007c3e:	6061      	str	r1, [r4, #4]
 8007c40:	60a2      	str	r2, [r4, #8]
 8007c42:	781b      	ldrb	r3, [r3, #0]
 8007c44:	7323      	strb	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,e");
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8007c4c:	499b      	ldr	r1, [pc, #620]	; (8007ebc <problem_fetch+0x67f8>)
 8007c4e:	461a      	mov	r2, r3
 8007c50:	460b      	mov	r3, r1
 8007c52:	cb03      	ldmia	r3!, {r0, r1}
 8007c54:	6010      	str	r0, [r2, #0]
 8007c56:	6051      	str	r1, [r2, #4]
 8007c58:	881b      	ldrh	r3, [r3, #0]
 8007c5a:	8113      	strh	r3, [r2, #8]
			break;
 8007c5c:	f014 bc62 	b.w	801c524 <problem_fetch+0x1ae60>
		case 171 :
			strcpy(p->name,"THE BLACK MAMBA 🐍");
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8007c66:	4a96      	ldr	r2, [pc, #600]	; (8007ec0 <problem_fetch+0x67fc>)
 8007c68:	461d      	mov	r5, r3
 8007c6a:	4614      	mov	r4, r2
 8007c6c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007c6e:	6028      	str	r0, [r5, #0]
 8007c70:	6069      	str	r1, [r5, #4]
 8007c72:	60aa      	str	r2, [r5, #8]
 8007c74:	60eb      	str	r3, [r5, #12]
 8007c76:	6820      	ldr	r0, [r4, #0]
 8007c78:	6128      	str	r0, [r5, #16]
 8007c7a:	7923      	ldrb	r3, [r4, #4]
 8007c7c:	752b      	strb	r3, [r5, #20]
			strcpy(p->grade,"6B+");
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8007c84:	4a8f      	ldr	r2, [pc, #572]	; (8007ec4 <problem_fetch+0x6800>)
 8007c86:	6810      	ldr	r0, [r2, #0]
 8007c88:	6018      	str	r0, [r3, #0]
			p->moveSize = 11;
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	220b      	movs	r2, #11
 8007c8e:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,E,G,C,B,E,C,D,B,D,A");
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	33a4      	adds	r3, #164	; 0xa4
 8007c94:	4a8c      	ldr	r2, [pc, #560]	; (8007ec8 <problem_fetch+0x6804>)
 8007c96:	461d      	mov	r5, r3
 8007c98:	4614      	mov	r4, r2
 8007c9a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007c9c:	6028      	str	r0, [r5, #0]
 8007c9e:	6069      	str	r1, [r5, #4]
 8007ca0:	60aa      	str	r2, [r5, #8]
 8007ca2:	60eb      	str	r3, [r5, #12]
 8007ca4:	6820      	ldr	r0, [r4, #0]
 8007ca6:	6128      	str	r0, [r5, #16]
 8007ca8:	88a3      	ldrh	r3, [r4, #4]
 8007caa:	82ab      	strh	r3, [r5, #20]
			strcpy(p->moveNumbers,"4,6,9,8,10,12,13,15,15,18,18");
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	3304      	adds	r3, #4
 8007cb0:	4a86      	ldr	r2, [pc, #536]	; (8007ecc <problem_fetch+0x6808>)
 8007cb2:	461d      	mov	r5, r3
 8007cb4:	4614      	mov	r4, r2
 8007cb6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007cb8:	6028      	str	r0, [r5, #0]
 8007cba:	6069      	str	r1, [r5, #4]
 8007cbc:	60aa      	str	r2, [r5, #8]
 8007cbe:	60eb      	str	r3, [r5, #12]
 8007cc0:	cc07      	ldmia	r4!, {r0, r1, r2}
 8007cc2:	6128      	str	r0, [r5, #16]
 8007cc4:	6169      	str	r1, [r5, #20]
 8007cc6:	61aa      	str	r2, [r5, #24]
 8007cc8:	7823      	ldrb	r3, [r4, #0]
 8007cca:	772b      	strb	r3, [r5, #28]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,d,d,e,e");
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8007cd2:	4a7f      	ldr	r2, [pc, #508]	; (8007ed0 <problem_fetch+0x680c>)
 8007cd4:	461d      	mov	r5, r3
 8007cd6:	4614      	mov	r4, r2
 8007cd8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007cda:	6028      	str	r0, [r5, #0]
 8007cdc:	6069      	str	r1, [r5, #4]
 8007cde:	60aa      	str	r2, [r5, #8]
 8007ce0:	60eb      	str	r3, [r5, #12]
 8007ce2:	6820      	ldr	r0, [r4, #0]
 8007ce4:	6128      	str	r0, [r5, #16]
 8007ce6:	88a3      	ldrh	r3, [r4, #4]
 8007ce8:	82ab      	strh	r3, [r5, #20]
			break;
 8007cea:	f014 bc1b 	b.w	801c524 <problem_fetch+0x1ae60>
		case 172 :
			strcpy(p->name,"PINCH THE PINCH");
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8007cf4:	4a77      	ldr	r2, [pc, #476]	; (8007ed4 <problem_fetch+0x6810>)
 8007cf6:	461c      	mov	r4, r3
 8007cf8:	4615      	mov	r5, r2
 8007cfa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007cfc:	6020      	str	r0, [r4, #0]
 8007cfe:	6061      	str	r1, [r4, #4]
 8007d00:	60a2      	str	r2, [r4, #8]
 8007d02:	60e3      	str	r3, [r4, #12]
			strcpy(p->grade,"7A");
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8007d0a:	4a69      	ldr	r2, [pc, #420]	; (8007eb0 <problem_fetch+0x67ec>)
 8007d0c:	8811      	ldrh	r1, [r2, #0]
 8007d0e:	7892      	ldrb	r2, [r2, #2]
 8007d10:	8019      	strh	r1, [r3, #0]
 8007d12:	709a      	strb	r2, [r3, #2]
			p->moveSize = 4;
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	2204      	movs	r2, #4
 8007d18:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,H,G,D");
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	33a4      	adds	r3, #164	; 0xa4
 8007d1e:	496e      	ldr	r1, [pc, #440]	; (8007ed8 <problem_fetch+0x6814>)
 8007d20:	461a      	mov	r2, r3
 8007d22:	460b      	mov	r3, r1
 8007d24:	cb03      	ldmia	r3!, {r0, r1}
 8007d26:	6010      	str	r0, [r2, #0]
 8007d28:	6051      	str	r1, [r2, #4]
			strcpy(p->moveNumbers,"5,10,14,18");
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	3304      	adds	r3, #4
 8007d2e:	496b      	ldr	r1, [pc, #428]	; (8007edc <problem_fetch+0x6818>)
 8007d30:	461a      	mov	r2, r3
 8007d32:	460b      	mov	r3, r1
 8007d34:	cb03      	ldmia	r3!, {r0, r1}
 8007d36:	6010      	str	r0, [r2, #0]
 8007d38:	6051      	str	r1, [r2, #4]
 8007d3a:	8819      	ldrh	r1, [r3, #0]
 8007d3c:	789b      	ldrb	r3, [r3, #2]
 8007d3e:	8111      	strh	r1, [r2, #8]
 8007d40:	7293      	strb	r3, [r2, #10]
			strcpy(p->startFinish,"s,d,d,e");
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8007d48:	4965      	ldr	r1, [pc, #404]	; (8007ee0 <problem_fetch+0x681c>)
 8007d4a:	461a      	mov	r2, r3
 8007d4c:	460b      	mov	r3, r1
 8007d4e:	cb03      	ldmia	r3!, {r0, r1}
 8007d50:	6010      	str	r0, [r2, #0]
 8007d52:	6051      	str	r1, [r2, #4]
			break;
 8007d54:	f014 bbe6 	b.w	801c524 <problem_fetch+0x1ae60>
		case 173 :
			strcpy(p->name,"OLD SCHOOL BLACK");
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8007d5e:	4a61      	ldr	r2, [pc, #388]	; (8007ee4 <problem_fetch+0x6820>)
 8007d60:	461d      	mov	r5, r3
 8007d62:	4614      	mov	r4, r2
 8007d64:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007d66:	6028      	str	r0, [r5, #0]
 8007d68:	6069      	str	r1, [r5, #4]
 8007d6a:	60aa      	str	r2, [r5, #8]
 8007d6c:	60eb      	str	r3, [r5, #12]
 8007d6e:	7823      	ldrb	r3, [r4, #0]
 8007d70:	742b      	strb	r3, [r5, #16]
			strcpy(p->grade,"7A");
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8007d78:	4a4d      	ldr	r2, [pc, #308]	; (8007eb0 <problem_fetch+0x67ec>)
 8007d7a:	8811      	ldrh	r1, [r2, #0]
 8007d7c:	7892      	ldrb	r2, [r2, #2]
 8007d7e:	8019      	strh	r1, [r3, #0]
 8007d80:	709a      	strb	r2, [r3, #2]
			p->moveSize = 6;
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	2206      	movs	r2, #6
 8007d86:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,H,I,G,G,D");
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	33a4      	adds	r3, #164	; 0xa4
 8007d8c:	4a56      	ldr	r2, [pc, #344]	; (8007ee8 <problem_fetch+0x6824>)
 8007d8e:	461c      	mov	r4, r3
 8007d90:	4613      	mov	r3, r2
 8007d92:	cb07      	ldmia	r3!, {r0, r1, r2}
 8007d94:	6020      	str	r0, [r4, #0]
 8007d96:	6061      	str	r1, [r4, #4]
 8007d98:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,5,10,14,17,18");
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	3304      	adds	r3, #4
 8007d9e:	4a53      	ldr	r2, [pc, #332]	; (8007eec <problem_fetch+0x6828>)
 8007da0:	461c      	mov	r4, r3
 8007da2:	4615      	mov	r5, r2
 8007da4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007da6:	6020      	str	r0, [r4, #0]
 8007da8:	6061      	str	r1, [r4, #4]
 8007daa:	60a2      	str	r2, [r4, #8]
 8007dac:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,s,d,d,d,e");
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8007db4:	4a4e      	ldr	r2, [pc, #312]	; (8007ef0 <problem_fetch+0x682c>)
 8007db6:	461c      	mov	r4, r3
 8007db8:	4613      	mov	r3, r2
 8007dba:	cb07      	ldmia	r3!, {r0, r1, r2}
 8007dbc:	6020      	str	r0, [r4, #0]
 8007dbe:	6061      	str	r1, [r4, #4]
 8007dc0:	60a2      	str	r2, [r4, #8]
			break;
 8007dc2:	f014 bbaf 	b.w	801c524 <problem_fetch+0x1ae60>
		case 174 :
			strcpy(p->name,"MÖRCSÖG");
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8007dcc:	4949      	ldr	r1, [pc, #292]	; (8007ef4 <problem_fetch+0x6830>)
 8007dce:	461a      	mov	r2, r3
 8007dd0:	460b      	mov	r3, r1
 8007dd2:	cb03      	ldmia	r3!, {r0, r1}
 8007dd4:	6010      	str	r0, [r2, #0]
 8007dd6:	6051      	str	r1, [r2, #4]
 8007dd8:	881b      	ldrh	r3, [r3, #0]
 8007dda:	8113      	strh	r3, [r2, #8]
			strcpy(p->grade,"7B");
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8007de2:	4a45      	ldr	r2, [pc, #276]	; (8007ef8 <problem_fetch+0x6834>)
 8007de4:	8811      	ldrh	r1, [r2, #0]
 8007de6:	7892      	ldrb	r2, [r2, #2]
 8007de8:	8019      	strh	r1, [r3, #0]
 8007dea:	709a      	strb	r2, [r3, #2]
			p->moveSize = 6;
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	2206      	movs	r2, #6
 8007df0:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,E,F,E,G,D");
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	33a4      	adds	r3, #164	; 0xa4
 8007df6:	4a41      	ldr	r2, [pc, #260]	; (8007efc <problem_fetch+0x6838>)
 8007df8:	461c      	mov	r4, r3
 8007dfa:	4613      	mov	r3, r2
 8007dfc:	cb07      	ldmia	r3!, {r0, r1, r2}
 8007dfe:	6020      	str	r0, [r4, #0]
 8007e00:	6061      	str	r1, [r4, #4]
 8007e02:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,8,11,14,15,18");
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	3304      	adds	r3, #4
 8007e08:	4a3d      	ldr	r2, [pc, #244]	; (8007f00 <problem_fetch+0x683c>)
 8007e0a:	461c      	mov	r4, r3
 8007e0c:	4615      	mov	r5, r2
 8007e0e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007e10:	6020      	str	r0, [r4, #0]
 8007e12:	6061      	str	r1, [r4, #4]
 8007e14:	60a2      	str	r2, [r4, #8]
 8007e16:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8007e1e:	4a39      	ldr	r2, [pc, #228]	; (8007f04 <problem_fetch+0x6840>)
 8007e20:	461c      	mov	r4, r3
 8007e22:	4613      	mov	r3, r2
 8007e24:	cb07      	ldmia	r3!, {r0, r1, r2}
 8007e26:	6020      	str	r0, [r4, #0]
 8007e28:	6061      	str	r1, [r4, #4]
 8007e2a:	60a2      	str	r2, [r4, #8]
			break;
 8007e2c:	f014 bb7a 	b.w	801c524 <problem_fetch+0x1ae60>
		case 175 :
			strcpy(p->name,"BLACKSWING");
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8007e36:	4934      	ldr	r1, [pc, #208]	; (8007f08 <problem_fetch+0x6844>)
 8007e38:	461a      	mov	r2, r3
 8007e3a:	460b      	mov	r3, r1
 8007e3c:	cb03      	ldmia	r3!, {r0, r1}
 8007e3e:	6010      	str	r0, [r2, #0]
 8007e40:	6051      	str	r1, [r2, #4]
 8007e42:	8819      	ldrh	r1, [r3, #0]
 8007e44:	789b      	ldrb	r3, [r3, #2]
 8007e46:	8111      	strh	r1, [r2, #8]
 8007e48:	7293      	strb	r3, [r2, #10]
			strcpy(p->grade,"8A");
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8007e50:	4a2e      	ldr	r2, [pc, #184]	; (8007f0c <problem_fetch+0x6848>)
 8007e52:	8811      	ldrh	r1, [r2, #0]
 8007e54:	7892      	ldrb	r2, [r2, #2]
 8007e56:	8019      	strh	r1, [r3, #0]
 8007e58:	709a      	strb	r2, [r3, #2]
			p->moveSize = 7;
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	2207      	movs	r2, #7
 8007e5e:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"C,B,A,D,C,E,D");
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	33a4      	adds	r3, #164	; 0xa4
 8007e64:	4a2a      	ldr	r2, [pc, #168]	; (8007f10 <problem_fetch+0x684c>)
 8007e66:	461c      	mov	r4, r3
 8007e68:	4613      	mov	r3, r2
 8007e6a:	cb07      	ldmia	r3!, {r0, r1, r2}
 8007e6c:	6020      	str	r0, [r4, #0]
 8007e6e:	6061      	str	r1, [r4, #4]
 8007e70:	60a2      	str	r2, [r4, #8]
 8007e72:	881b      	ldrh	r3, [r3, #0]
 8007e74:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,6,9,11,13,14,18");
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	3304      	adds	r3, #4
 8007e7a:	4a26      	ldr	r2, [pc, #152]	; (8007f14 <problem_fetch+0x6850>)
 8007e7c:	461d      	mov	r5, r3
 8007e7e:	4614      	mov	r4, r2
 8007e80:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007e82:	6028      	str	r0, [r5, #0]
 8007e84:	6069      	str	r1, [r5, #4]
 8007e86:	60aa      	str	r2, [r5, #8]
 8007e88:	60eb      	str	r3, [r5, #12]
 8007e8a:	8823      	ldrh	r3, [r4, #0]
 8007e8c:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,s,d,d,d,d,e");
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8007e94:	4a20      	ldr	r2, [pc, #128]	; (8007f18 <problem_fetch+0x6854>)
 8007e96:	461c      	mov	r4, r3
 8007e98:	4613      	mov	r3, r2
 8007e9a:	cb07      	ldmia	r3!, {r0, r1, r2}
 8007e9c:	6020      	str	r0, [r4, #0]
 8007e9e:	6061      	str	r1, [r4, #4]
 8007ea0:	60a2      	str	r2, [r4, #8]
 8007ea2:	881b      	ldrh	r3, [r3, #0]
 8007ea4:	81a3      	strh	r3, [r4, #12]
			break;
 8007ea6:	f014 bb3d 	b.w	801c524 <problem_fetch+0x1ae60>
 8007eaa:	bf00      	nop
 8007eac:	08025a98 	.word	0x08025a98
 8007eb0:	08023814 	.word	0x08023814
 8007eb4:	08025aac 	.word	0x08025aac
 8007eb8:	08025ab8 	.word	0x08025ab8
 8007ebc:	08023d20 	.word	0x08023d20
 8007ec0:	08025ac8 	.word	0x08025ac8
 8007ec4:	08023854 	.word	0x08023854
 8007ec8:	08025ae0 	.word	0x08025ae0
 8007ecc:	08025af8 	.word	0x08025af8
 8007ed0:	08025b18 	.word	0x08025b18
 8007ed4:	08025b30 	.word	0x08025b30
 8007ed8:	08025b40 	.word	0x08025b40
 8007edc:	08025b48 	.word	0x08025b48
 8007ee0:	080239a8 	.word	0x080239a8
 8007ee4:	08025b54 	.word	0x08025b54
 8007ee8:	08025b68 	.word	0x08025b68
 8007eec:	08025b74 	.word	0x08025b74
 8007ef0:	08023834 	.word	0x08023834
 8007ef4:	08025b84 	.word	0x08025b84
 8007ef8:	08023f4c 	.word	0x08023f4c
 8007efc:	08025b90 	.word	0x08025b90
 8007f00:	08025b9c 	.word	0x08025b9c
 8007f04:	08023bf0 	.word	0x08023bf0
 8007f08:	08025bac 	.word	0x08025bac
 8007f0c:	08025bb8 	.word	0x08025bb8
 8007f10:	08025bbc 	.word	0x08025bbc
 8007f14:	08025bcc 	.word	0x08025bcc
 8007f18:	080238cc 	.word	0x080238cc
		case 176 :
			strcpy(p->name,"FREAKING MAIMED");
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8007f22:	4aad      	ldr	r2, [pc, #692]	; (80081d8 <problem_fetch+0x6b14>)
 8007f24:	461c      	mov	r4, r3
 8007f26:	4615      	mov	r5, r2
 8007f28:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007f2a:	6020      	str	r0, [r4, #0]
 8007f2c:	6061      	str	r1, [r4, #4]
 8007f2e:	60a2      	str	r2, [r4, #8]
 8007f30:	60e3      	str	r3, [r4, #12]
			strcpy(p->grade,"7C");
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8007f38:	4aa8      	ldr	r2, [pc, #672]	; (80081dc <problem_fetch+0x6b18>)
 8007f3a:	8811      	ldrh	r1, [r2, #0]
 8007f3c:	7892      	ldrb	r2, [r2, #2]
 8007f3e:	8019      	strh	r1, [r3, #0]
 8007f40:	709a      	strb	r2, [r3, #2]
			p->moveSize = 7;
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	2207      	movs	r2, #7
 8007f46:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,G,E,C,G,H,I");
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	33a4      	adds	r3, #164	; 0xa4
 8007f4c:	4aa4      	ldr	r2, [pc, #656]	; (80081e0 <problem_fetch+0x6b1c>)
 8007f4e:	461c      	mov	r4, r3
 8007f50:	4613      	mov	r3, r2
 8007f52:	cb07      	ldmia	r3!, {r0, r1, r2}
 8007f54:	6020      	str	r0, [r4, #0]
 8007f56:	6061      	str	r1, [r4, #4]
 8007f58:	60a2      	str	r2, [r4, #8]
 8007f5a:	881b      	ldrh	r3, [r3, #0]
 8007f5c:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,9,9,13,17,16,18");
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	3304      	adds	r3, #4
 8007f62:	4aa0      	ldr	r2, [pc, #640]	; (80081e4 <problem_fetch+0x6b20>)
 8007f64:	461d      	mov	r5, r3
 8007f66:	4614      	mov	r4, r2
 8007f68:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007f6a:	6028      	str	r0, [r5, #0]
 8007f6c:	6069      	str	r1, [r5, #4]
 8007f6e:	60aa      	str	r2, [r5, #8]
 8007f70:	60eb      	str	r3, [r5, #12]
 8007f72:	8823      	ldrh	r3, [r4, #0]
 8007f74:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8007f7c:	4a9a      	ldr	r2, [pc, #616]	; (80081e8 <problem_fetch+0x6b24>)
 8007f7e:	461c      	mov	r4, r3
 8007f80:	4613      	mov	r3, r2
 8007f82:	cb07      	ldmia	r3!, {r0, r1, r2}
 8007f84:	6020      	str	r0, [r4, #0]
 8007f86:	6061      	str	r1, [r4, #4]
 8007f88:	60a2      	str	r2, [r4, #8]
 8007f8a:	881b      	ldrh	r3, [r3, #0]
 8007f8c:	81a3      	strh	r3, [r4, #12]
			break;
 8007f8e:	f014 bac9 	b.w	801c524 <problem_fetch+0x1ae60>
		case 177 :
			strcpy(p->name,"CAN’T REMEMBER THE NAME");
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8007f98:	4a94      	ldr	r2, [pc, #592]	; (80081ec <problem_fetch+0x6b28>)
 8007f9a:	461d      	mov	r5, r3
 8007f9c:	4614      	mov	r4, r2
 8007f9e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007fa0:	6028      	str	r0, [r5, #0]
 8007fa2:	6069      	str	r1, [r5, #4]
 8007fa4:	60aa      	str	r2, [r5, #8]
 8007fa6:	60eb      	str	r3, [r5, #12]
 8007fa8:	cc03      	ldmia	r4!, {r0, r1}
 8007faa:	6128      	str	r0, [r5, #16]
 8007fac:	6169      	str	r1, [r5, #20]
 8007fae:	8823      	ldrh	r3, [r4, #0]
 8007fb0:	832b      	strh	r3, [r5, #24]
			strcpy(p->grade,"7A");
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8007fb8:	4a8d      	ldr	r2, [pc, #564]	; (80081f0 <problem_fetch+0x6b2c>)
 8007fba:	8811      	ldrh	r1, [r2, #0]
 8007fbc:	7892      	ldrb	r2, [r2, #2]
 8007fbe:	8019      	strh	r1, [r3, #0]
 8007fc0:	709a      	strb	r2, [r3, #2]
			p->moveSize = 7;
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	2207      	movs	r2, #7
 8007fc6:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"E,E,I,G,D,E,A");
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	33a4      	adds	r3, #164	; 0xa4
 8007fcc:	4a89      	ldr	r2, [pc, #548]	; (80081f4 <problem_fetch+0x6b30>)
 8007fce:	461c      	mov	r4, r3
 8007fd0:	4613      	mov	r3, r2
 8007fd2:	cb07      	ldmia	r3!, {r0, r1, r2}
 8007fd4:	6020      	str	r0, [r4, #0]
 8007fd6:	6061      	str	r1, [r4, #4]
 8007fd8:	60a2      	str	r2, [r4, #8]
 8007fda:	881b      	ldrh	r3, [r3, #0]
 8007fdc:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"6,8,10,6,11,16,18");
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	3304      	adds	r3, #4
 8007fe2:	4a85      	ldr	r2, [pc, #532]	; (80081f8 <problem_fetch+0x6b34>)
 8007fe4:	461d      	mov	r5, r3
 8007fe6:	4614      	mov	r4, r2
 8007fe8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007fea:	6028      	str	r0, [r5, #0]
 8007fec:	6069      	str	r1, [r5, #4]
 8007fee:	60aa      	str	r2, [r5, #8]
 8007ff0:	60eb      	str	r3, [r5, #12]
 8007ff2:	8823      	ldrh	r3, [r4, #0]
 8007ff4:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,d,d,s,d,d,e");
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8007ffc:	4a7f      	ldr	r2, [pc, #508]	; (80081fc <problem_fetch+0x6b38>)
 8007ffe:	461c      	mov	r4, r3
 8008000:	4613      	mov	r3, r2
 8008002:	cb07      	ldmia	r3!, {r0, r1, r2}
 8008004:	6020      	str	r0, [r4, #0]
 8008006:	6061      	str	r1, [r4, #4]
 8008008:	60a2      	str	r2, [r4, #8]
 800800a:	881b      	ldrh	r3, [r3, #0]
 800800c:	81a3      	strh	r3, [r4, #12]
			break;
 800800e:	f014 ba89 	b.w	801c524 <problem_fetch+0x1ae60>
		case 178 :
			strcpy(p->name,"FOUR");
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8008018:	4a79      	ldr	r2, [pc, #484]	; (8008200 <problem_fetch+0x6b3c>)
 800801a:	6810      	ldr	r0, [r2, #0]
 800801c:	6018      	str	r0, [r3, #0]
 800801e:	7912      	ldrb	r2, [r2, #4]
 8008020:	711a      	strb	r2, [r3, #4]
			strcpy(p->grade,"7A");
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8008028:	4a71      	ldr	r2, [pc, #452]	; (80081f0 <problem_fetch+0x6b2c>)
 800802a:	8811      	ldrh	r1, [r2, #0]
 800802c:	7892      	ldrb	r2, [r2, #2]
 800802e:	8019      	strh	r1, [r3, #0]
 8008030:	709a      	strb	r2, [r3, #2]
			p->moveSize = 7;
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	2207      	movs	r2, #7
 8008036:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"C,G,E,D,I,H,I");
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	33a4      	adds	r3, #164	; 0xa4
 800803c:	4a71      	ldr	r2, [pc, #452]	; (8008204 <problem_fetch+0x6b40>)
 800803e:	461c      	mov	r4, r3
 8008040:	4613      	mov	r3, r2
 8008042:	cb07      	ldmia	r3!, {r0, r1, r2}
 8008044:	6020      	str	r0, [r4, #0]
 8008046:	6061      	str	r1, [r4, #4]
 8008048:	60a2      	str	r2, [r4, #8]
 800804a:	881b      	ldrh	r3, [r3, #0]
 800804c:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,4,9,11,14,16,18");
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	3304      	adds	r3, #4
 8008052:	4a6d      	ldr	r2, [pc, #436]	; (8008208 <problem_fetch+0x6b44>)
 8008054:	461d      	mov	r5, r3
 8008056:	4614      	mov	r4, r2
 8008058:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800805a:	6028      	str	r0, [r5, #0]
 800805c:	6069      	str	r1, [r5, #4]
 800805e:	60aa      	str	r2, [r5, #8]
 8008060:	60eb      	str	r3, [r5, #12]
 8008062:	8823      	ldrh	r3, [r4, #0]
 8008064:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,s,d,d,d,d,e");
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800806c:	4a67      	ldr	r2, [pc, #412]	; (800820c <problem_fetch+0x6b48>)
 800806e:	461c      	mov	r4, r3
 8008070:	4613      	mov	r3, r2
 8008072:	cb07      	ldmia	r3!, {r0, r1, r2}
 8008074:	6020      	str	r0, [r4, #0]
 8008076:	6061      	str	r1, [r4, #4]
 8008078:	60a2      	str	r2, [r4, #8]
 800807a:	881b      	ldrh	r3, [r3, #0]
 800807c:	81a3      	strh	r3, [r4, #12]
			break;
 800807e:	f014 ba51 	b.w	801c524 <problem_fetch+0x1ae60>
		case 179 :
			strcpy(p->name,"SALMON SNAKE");
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8008088:	4a61      	ldr	r2, [pc, #388]	; (8008210 <problem_fetch+0x6b4c>)
 800808a:	461c      	mov	r4, r3
 800808c:	4613      	mov	r3, r2
 800808e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8008090:	6020      	str	r0, [r4, #0]
 8008092:	6061      	str	r1, [r4, #4]
 8008094:	60a2      	str	r2, [r4, #8]
 8008096:	781b      	ldrb	r3, [r3, #0]
 8008098:	7323      	strb	r3, [r4, #12]
			strcpy(p->grade,"7A");
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80080a0:	4a53      	ldr	r2, [pc, #332]	; (80081f0 <problem_fetch+0x6b2c>)
 80080a2:	8811      	ldrh	r1, [r2, #0]
 80080a4:	7892      	ldrb	r2, [r2, #2]
 80080a6:	8019      	strh	r1, [r3, #0]
 80080a8:	709a      	strb	r2, [r3, #2]
			p->moveSize = 5;
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	2205      	movs	r2, #5
 80080ae:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,G,F,D,A");
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	33a4      	adds	r3, #164	; 0xa4
 80080b4:	4957      	ldr	r1, [pc, #348]	; (8008214 <problem_fetch+0x6b50>)
 80080b6:	461a      	mov	r2, r3
 80080b8:	460b      	mov	r3, r1
 80080ba:	cb03      	ldmia	r3!, {r0, r1}
 80080bc:	6010      	str	r0, [r2, #0]
 80080be:	6051      	str	r1, [r2, #4]
 80080c0:	881b      	ldrh	r3, [r3, #0]
 80080c2:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"5,9,11,15,18");
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	3304      	adds	r3, #4
 80080c8:	4a53      	ldr	r2, [pc, #332]	; (8008218 <problem_fetch+0x6b54>)
 80080ca:	461c      	mov	r4, r3
 80080cc:	4613      	mov	r3, r2
 80080ce:	cb07      	ldmia	r3!, {r0, r1, r2}
 80080d0:	6020      	str	r0, [r4, #0]
 80080d2:	6061      	str	r1, [r4, #4]
 80080d4:	60a2      	str	r2, [r4, #8]
 80080d6:	781b      	ldrb	r3, [r3, #0]
 80080d8:	7323      	strb	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,e");
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 80080e0:	494e      	ldr	r1, [pc, #312]	; (800821c <problem_fetch+0x6b58>)
 80080e2:	461a      	mov	r2, r3
 80080e4:	460b      	mov	r3, r1
 80080e6:	cb03      	ldmia	r3!, {r0, r1}
 80080e8:	6010      	str	r0, [r2, #0]
 80080ea:	6051      	str	r1, [r2, #4]
 80080ec:	881b      	ldrh	r3, [r3, #0]
 80080ee:	8113      	strh	r3, [r2, #8]
			break;
 80080f0:	f014 ba18 	b.w	801c524 <problem_fetch+0x1ae60>
		case 180 :
			strcpy(p->name,"COSTA NEGRA");
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80080fa:	4a49      	ldr	r2, [pc, #292]	; (8008220 <problem_fetch+0x6b5c>)
 80080fc:	461c      	mov	r4, r3
 80080fe:	4613      	mov	r3, r2
 8008100:	cb07      	ldmia	r3!, {r0, r1, r2}
 8008102:	6020      	str	r0, [r4, #0]
 8008104:	6061      	str	r1, [r4, #4]
 8008106:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade,"6C");
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800810e:	4a45      	ldr	r2, [pc, #276]	; (8008224 <problem_fetch+0x6b60>)
 8008110:	8811      	ldrh	r1, [r2, #0]
 8008112:	7892      	ldrb	r2, [r2, #2]
 8008114:	8019      	strh	r1, [r3, #0]
 8008116:	709a      	strb	r2, [r3, #2]
			p->moveSize = 9;
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	2209      	movs	r2, #9
 800811c:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,E,E,B,E,C,I,G,I");
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	33a4      	adds	r3, #164	; 0xa4
 8008122:	4a41      	ldr	r2, [pc, #260]	; (8008228 <problem_fetch+0x6b64>)
 8008124:	461d      	mov	r5, r3
 8008126:	4614      	mov	r4, r2
 8008128:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800812a:	6028      	str	r0, [r5, #0]
 800812c:	6069      	str	r1, [r5, #4]
 800812e:	60aa      	str	r2, [r5, #8]
 8008130:	60eb      	str	r3, [r5, #12]
 8008132:	8823      	ldrh	r3, [r4, #0]
 8008134:	822b      	strh	r3, [r5, #16]
			strcpy(p->moveNumbers,"4,6,8,10,12,13,14,15,18");
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	3304      	adds	r3, #4
 800813a:	4a3c      	ldr	r2, [pc, #240]	; (800822c <problem_fetch+0x6b68>)
 800813c:	461d      	mov	r5, r3
 800813e:	4614      	mov	r4, r2
 8008140:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008142:	6028      	str	r0, [r5, #0]
 8008144:	6069      	str	r1, [r5, #4]
 8008146:	60aa      	str	r2, [r5, #8]
 8008148:	60eb      	str	r3, [r5, #12]
 800814a:	cc03      	ldmia	r4!, {r0, r1}
 800814c:	6128      	str	r0, [r5, #16]
 800814e:	6169      	str	r1, [r5, #20]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,d,e");
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8008156:	4a36      	ldr	r2, [pc, #216]	; (8008230 <problem_fetch+0x6b6c>)
 8008158:	461d      	mov	r5, r3
 800815a:	4614      	mov	r4, r2
 800815c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800815e:	6028      	str	r0, [r5, #0]
 8008160:	6069      	str	r1, [r5, #4]
 8008162:	60aa      	str	r2, [r5, #8]
 8008164:	60eb      	str	r3, [r5, #12]
 8008166:	8823      	ldrh	r3, [r4, #0]
 8008168:	822b      	strh	r3, [r5, #16]
			break;
 800816a:	f014 b9db 	b.w	801c524 <problem_fetch+0x1ae60>
		case 181 :
			strcpy(p->name,"LOPPULÄMPPÄ");
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8008174:	4a2f      	ldr	r2, [pc, #188]	; (8008234 <problem_fetch+0x6b70>)
 8008176:	461c      	mov	r4, r3
 8008178:	4613      	mov	r3, r2
 800817a:	cb07      	ldmia	r3!, {r0, r1, r2}
 800817c:	6020      	str	r0, [r4, #0]
 800817e:	6061      	str	r1, [r4, #4]
 8008180:	60a2      	str	r2, [r4, #8]
 8008182:	881b      	ldrh	r3, [r3, #0]
 8008184:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade,"7A+");
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800818c:	4a2a      	ldr	r2, [pc, #168]	; (8008238 <problem_fetch+0x6b74>)
 800818e:	6810      	ldr	r0, [r2, #0]
 8008190:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	2206      	movs	r2, #6
 8008196:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,E,E,D,G,I");
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	33a4      	adds	r3, #164	; 0xa4
 800819c:	4a27      	ldr	r2, [pc, #156]	; (800823c <problem_fetch+0x6b78>)
 800819e:	461c      	mov	r4, r3
 80081a0:	4613      	mov	r3, r2
 80081a2:	cb07      	ldmia	r3!, {r0, r1, r2}
 80081a4:	6020      	str	r0, [r4, #0]
 80081a6:	6061      	str	r1, [r4, #4]
 80081a8:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,8,12,11,17,18");
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	3304      	adds	r3, #4
 80081ae:	4a24      	ldr	r2, [pc, #144]	; (8008240 <problem_fetch+0x6b7c>)
 80081b0:	461c      	mov	r4, r3
 80081b2:	4615      	mov	r5, r2
 80081b4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80081b6:	6020      	str	r0, [r4, #0]
 80081b8:	6061      	str	r1, [r4, #4]
 80081ba:	60a2      	str	r2, [r4, #8]
 80081bc:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 80081c4:	4a1f      	ldr	r2, [pc, #124]	; (8008244 <problem_fetch+0x6b80>)
 80081c6:	461c      	mov	r4, r3
 80081c8:	4613      	mov	r3, r2
 80081ca:	cb07      	ldmia	r3!, {r0, r1, r2}
 80081cc:	6020      	str	r0, [r4, #0]
 80081ce:	6061      	str	r1, [r4, #4]
 80081d0:	60a2      	str	r2, [r4, #8]
			break;
 80081d2:	f014 b9a7 	b.w	801c524 <problem_fetch+0x1ae60>
 80081d6:	bf00      	nop
 80081d8:	08025be0 	.word	0x08025be0
 80081dc:	08024088 	.word	0x08024088
 80081e0:	08025bf0 	.word	0x08025bf0
 80081e4:	08025c00 	.word	0x08025c00
 80081e8:	080239dc 	.word	0x080239dc
 80081ec:	08025c14 	.word	0x08025c14
 80081f0:	08023814 	.word	0x08023814
 80081f4:	08025c30 	.word	0x08025c30
 80081f8:	08025c40 	.word	0x08025c40
 80081fc:	08025c54 	.word	0x08025c54
 8008200:	08025c64 	.word	0x08025c64
 8008204:	08025c6c 	.word	0x08025c6c
 8008208:	08025c7c 	.word	0x08025c7c
 800820c:	080238cc 	.word	0x080238cc
 8008210:	08025c90 	.word	0x08025c90
 8008214:	08025ca0 	.word	0x08025ca0
 8008218:	08025cac 	.word	0x08025cac
 800821c:	08023d20 	.word	0x08023d20
 8008220:	08025cbc 	.word	0x08025cbc
 8008224:	08023920 	.word	0x08023920
 8008228:	08025cc8 	.word	0x08025cc8
 800822c:	08025cdc 	.word	0x08025cdc
 8008230:	08024838 	.word	0x08024838
 8008234:	08025cf4 	.word	0x08025cf4
 8008238:	080239f4 	.word	0x080239f4
 800823c:	08025d04 	.word	0x08025d04
 8008240:	08025d10 	.word	0x08025d10
 8008244:	08023bf0 	.word	0x08023bf0
		case 182 :
			strcpy(p->name,"MEK");
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800824e:	4ac1      	ldr	r2, [pc, #772]	; (8008554 <problem_fetch+0x6e90>)
 8008250:	6810      	ldr	r0, [r2, #0]
 8008252:	6018      	str	r0, [r3, #0]
			strcpy(p->grade,"7A");
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800825a:	4abf      	ldr	r2, [pc, #764]	; (8008558 <problem_fetch+0x6e94>)
 800825c:	8811      	ldrh	r1, [r2, #0]
 800825e:	7892      	ldrb	r2, [r2, #2]
 8008260:	8019      	strh	r1, [r3, #0]
 8008262:	709a      	strb	r2, [r3, #2]
			p->moveSize = 8;
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	2208      	movs	r2, #8
 8008268:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,H,D,B,D,G,E,I");
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	33a4      	adds	r3, #164	; 0xa4
 800826e:	4abb      	ldr	r2, [pc, #748]	; (800855c <problem_fetch+0x6e98>)
 8008270:	461c      	mov	r4, r3
 8008272:	4615      	mov	r5, r2
 8008274:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008276:	6020      	str	r0, [r4, #0]
 8008278:	6061      	str	r1, [r4, #4]
 800827a:	60a2      	str	r2, [r4, #8]
 800827c:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"10,13,11,6,7,4,16,18");
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	3304      	adds	r3, #4
 8008282:	4ab7      	ldr	r2, [pc, #732]	; (8008560 <problem_fetch+0x6e9c>)
 8008284:	461d      	mov	r5, r3
 8008286:	4614      	mov	r4, r2
 8008288:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800828a:	6028      	str	r0, [r5, #0]
 800828c:	6069      	str	r1, [r5, #4]
 800828e:	60aa      	str	r2, [r5, #8]
 8008290:	60eb      	str	r3, [r5, #12]
 8008292:	6820      	ldr	r0, [r4, #0]
 8008294:	6128      	str	r0, [r5, #16]
 8008296:	7923      	ldrb	r3, [r4, #4]
 8008298:	752b      	strb	r3, [r5, #20]
			strcpy(p->startFinish,"d,d,d,s,d,s,d,e");
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 80082a0:	4ab0      	ldr	r2, [pc, #704]	; (8008564 <problem_fetch+0x6ea0>)
 80082a2:	461c      	mov	r4, r3
 80082a4:	4615      	mov	r5, r2
 80082a6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80082a8:	6020      	str	r0, [r4, #0]
 80082aa:	6061      	str	r1, [r4, #4]
 80082ac:	60a2      	str	r2, [r4, #8]
 80082ae:	60e3      	str	r3, [r4, #12]
			break;
 80082b0:	f014 b938 	b.w	801c524 <problem_fetch+0x1ae60>
		case 183 :
			strcpy(p->name,"5WL^4/(384EI)");
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80082ba:	4aab      	ldr	r2, [pc, #684]	; (8008568 <problem_fetch+0x6ea4>)
 80082bc:	461c      	mov	r4, r3
 80082be:	4613      	mov	r3, r2
 80082c0:	cb07      	ldmia	r3!, {r0, r1, r2}
 80082c2:	6020      	str	r0, [r4, #0]
 80082c4:	6061      	str	r1, [r4, #4]
 80082c6:	60a2      	str	r2, [r4, #8]
 80082c8:	881b      	ldrh	r3, [r3, #0]
 80082ca:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade,"7C");
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80082d2:	4aa6      	ldr	r2, [pc, #664]	; (800856c <problem_fetch+0x6ea8>)
 80082d4:	8811      	ldrh	r1, [r2, #0]
 80082d6:	7892      	ldrb	r2, [r2, #2]
 80082d8:	8019      	strh	r1, [r3, #0]
 80082da:	709a      	strb	r2, [r3, #2]
			p->moveSize = 6;
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	2206      	movs	r2, #6
 80082e0:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,H,F,A,B,A");
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	33a4      	adds	r3, #164	; 0xa4
 80082e6:	4aa2      	ldr	r2, [pc, #648]	; (8008570 <problem_fetch+0x6eac>)
 80082e8:	461c      	mov	r4, r3
 80082ea:	4613      	mov	r3, r2
 80082ec:	cb07      	ldmia	r3!, {r0, r1, r2}
 80082ee:	6020      	str	r0, [r4, #0]
 80082f0:	6061      	str	r1, [r4, #4]
 80082f2:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,8,11,14,15,18");
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	3304      	adds	r3, #4
 80082f8:	4a9e      	ldr	r2, [pc, #632]	; (8008574 <problem_fetch+0x6eb0>)
 80082fa:	461c      	mov	r4, r3
 80082fc:	4615      	mov	r5, r2
 80082fe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008300:	6020      	str	r0, [r4, #0]
 8008302:	6061      	str	r1, [r4, #4]
 8008304:	60a2      	str	r2, [r4, #8]
 8008306:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800830e:	4a9a      	ldr	r2, [pc, #616]	; (8008578 <problem_fetch+0x6eb4>)
 8008310:	461c      	mov	r4, r3
 8008312:	4613      	mov	r3, r2
 8008314:	cb07      	ldmia	r3!, {r0, r1, r2}
 8008316:	6020      	str	r0, [r4, #0]
 8008318:	6061      	str	r1, [r4, #4]
 800831a:	60a2      	str	r2, [r4, #8]
			break;
 800831c:	f014 b902 	b.w	801c524 <problem_fetch+0x1ae60>
		case 184 :
			strcpy(p->name,"ATLANTIC SEA NETTLE");
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8008326:	4a95      	ldr	r2, [pc, #596]	; (800857c <problem_fetch+0x6eb8>)
 8008328:	461d      	mov	r5, r3
 800832a:	4614      	mov	r4, r2
 800832c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800832e:	6028      	str	r0, [r5, #0]
 8008330:	6069      	str	r1, [r5, #4]
 8008332:	60aa      	str	r2, [r5, #8]
 8008334:	60eb      	str	r3, [r5, #12]
 8008336:	6820      	ldr	r0, [r4, #0]
 8008338:	6128      	str	r0, [r5, #16]
			strcpy(p->grade,"6C+");
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8008340:	4a8f      	ldr	r2, [pc, #572]	; (8008580 <problem_fetch+0x6ebc>)
 8008342:	6810      	ldr	r0, [r2, #0]
 8008344:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	2206      	movs	r2, #6
 800834a:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"E,C,F,B,D,A");
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	33a4      	adds	r3, #164	; 0xa4
 8008350:	4a8c      	ldr	r2, [pc, #560]	; (8008584 <problem_fetch+0x6ec0>)
 8008352:	461c      	mov	r4, r3
 8008354:	4613      	mov	r3, r2
 8008356:	cb07      	ldmia	r3!, {r0, r1, r2}
 8008358:	6020      	str	r0, [r4, #0]
 800835a:	6061      	str	r1, [r4, #4]
 800835c:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"6,8,11,12,15,18");
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	3304      	adds	r3, #4
 8008362:	4a89      	ldr	r2, [pc, #548]	; (8008588 <problem_fetch+0x6ec4>)
 8008364:	461c      	mov	r4, r3
 8008366:	4615      	mov	r5, r2
 8008368:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800836a:	6020      	str	r0, [r4, #0]
 800836c:	6061      	str	r1, [r4, #4]
 800836e:	60a2      	str	r2, [r4, #8]
 8008370:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8008378:	4a7f      	ldr	r2, [pc, #508]	; (8008578 <problem_fetch+0x6eb4>)
 800837a:	461c      	mov	r4, r3
 800837c:	4613      	mov	r3, r2
 800837e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8008380:	6020      	str	r0, [r4, #0]
 8008382:	6061      	str	r1, [r4, #4]
 8008384:	60a2      	str	r2, [r4, #8]
			break;
 8008386:	f014 b8cd 	b.w	801c524 <problem_fetch+0x1ae60>
		case 185 :
			strcpy(p->name,"WOA");
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8008390:	4a7e      	ldr	r2, [pc, #504]	; (800858c <problem_fetch+0x6ec8>)
 8008392:	6810      	ldr	r0, [r2, #0]
 8008394:	6018      	str	r0, [r3, #0]
			strcpy(p->grade,"7A");
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800839c:	4a6e      	ldr	r2, [pc, #440]	; (8008558 <problem_fetch+0x6e94>)
 800839e:	8811      	ldrh	r1, [r2, #0]
 80083a0:	7892      	ldrb	r2, [r2, #2]
 80083a2:	8019      	strh	r1, [r3, #0]
 80083a4:	709a      	strb	r2, [r3, #2]
			p->moveSize = 7;
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	2207      	movs	r2, #7
 80083aa:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,C,E,D,F,G,I");
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	33a4      	adds	r3, #164	; 0xa4
 80083b0:	4a77      	ldr	r2, [pc, #476]	; (8008590 <problem_fetch+0x6ecc>)
 80083b2:	461c      	mov	r4, r3
 80083b4:	4613      	mov	r3, r2
 80083b6:	cb07      	ldmia	r3!, {r0, r1, r2}
 80083b8:	6020      	str	r0, [r4, #0]
 80083ba:	6061      	str	r1, [r4, #4]
 80083bc:	60a2      	str	r2, [r4, #8]
 80083be:	881b      	ldrh	r3, [r3, #0]
 80083c0:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,5,9,11,13,15,18");
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	3304      	adds	r3, #4
 80083c6:	4a73      	ldr	r2, [pc, #460]	; (8008594 <problem_fetch+0x6ed0>)
 80083c8:	461d      	mov	r5, r3
 80083ca:	4614      	mov	r4, r2
 80083cc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80083ce:	6028      	str	r0, [r5, #0]
 80083d0:	6069      	str	r1, [r5, #4]
 80083d2:	60aa      	str	r2, [r5, #8]
 80083d4:	60eb      	str	r3, [r5, #12]
 80083d6:	8823      	ldrh	r3, [r4, #0]
 80083d8:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 80083e0:	4a6d      	ldr	r2, [pc, #436]	; (8008598 <problem_fetch+0x6ed4>)
 80083e2:	461c      	mov	r4, r3
 80083e4:	4613      	mov	r3, r2
 80083e6:	cb07      	ldmia	r3!, {r0, r1, r2}
 80083e8:	6020      	str	r0, [r4, #0]
 80083ea:	6061      	str	r1, [r4, #4]
 80083ec:	60a2      	str	r2, [r4, #8]
 80083ee:	881b      	ldrh	r3, [r3, #0]
 80083f0:	81a3      	strh	r3, [r4, #12]
			break;
 80083f2:	f014 b897 	b.w	801c524 <problem_fetch+0x1ae60>
		case 186 :
			strcpy(p->name,"GJ2");
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80083fc:	4a67      	ldr	r2, [pc, #412]	; (800859c <problem_fetch+0x6ed8>)
 80083fe:	6810      	ldr	r0, [r2, #0]
 8008400:	6018      	str	r0, [r3, #0]
			strcpy(p->grade,"6B+");
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8008408:	4a65      	ldr	r2, [pc, #404]	; (80085a0 <problem_fetch+0x6edc>)
 800840a:	6810      	ldr	r0, [r2, #0]
 800840c:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	2207      	movs	r2, #7
 8008412:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,C,H,F,C,D,A");
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	33a4      	adds	r3, #164	; 0xa4
 8008418:	4a62      	ldr	r2, [pc, #392]	; (80085a4 <problem_fetch+0x6ee0>)
 800841a:	461c      	mov	r4, r3
 800841c:	4613      	mov	r3, r2
 800841e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8008420:	6020      	str	r0, [r4, #0]
 8008422:	6061      	str	r1, [r4, #4]
 8008424:	60a2      	str	r2, [r4, #8]
 8008426:	881b      	ldrh	r3, [r3, #0]
 8008428:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,8,8,11,13,15,18");
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	3304      	adds	r3, #4
 800842e:	4a5e      	ldr	r2, [pc, #376]	; (80085a8 <problem_fetch+0x6ee4>)
 8008430:	461d      	mov	r5, r3
 8008432:	4614      	mov	r4, r2
 8008434:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008436:	6028      	str	r0, [r5, #0]
 8008438:	6069      	str	r1, [r5, #4]
 800843a:	60aa      	str	r2, [r5, #8]
 800843c:	60eb      	str	r3, [r5, #12]
 800843e:	8823      	ldrh	r3, [r4, #0]
 8008440:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8008448:	4a53      	ldr	r2, [pc, #332]	; (8008598 <problem_fetch+0x6ed4>)
 800844a:	461c      	mov	r4, r3
 800844c:	4613      	mov	r3, r2
 800844e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8008450:	6020      	str	r0, [r4, #0]
 8008452:	6061      	str	r1, [r4, #4]
 8008454:	60a2      	str	r2, [r4, #8]
 8008456:	881b      	ldrh	r3, [r3, #0]
 8008458:	81a3      	strh	r3, [r4, #12]
			break;
 800845a:	f014 b863 	b.w	801c524 <problem_fetch+0x1ae60>
		case 187 :
			strcpy(p->name,"CHEESE AND PICKLE");
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8008464:	4a51      	ldr	r2, [pc, #324]	; (80085ac <problem_fetch+0x6ee8>)
 8008466:	461d      	mov	r5, r3
 8008468:	4614      	mov	r4, r2
 800846a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800846c:	6028      	str	r0, [r5, #0]
 800846e:	6069      	str	r1, [r5, #4]
 8008470:	60aa      	str	r2, [r5, #8]
 8008472:	60eb      	str	r3, [r5, #12]
 8008474:	8823      	ldrh	r3, [r4, #0]
 8008476:	822b      	strh	r3, [r5, #16]
			strcpy(p->grade,"6C+");
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800847e:	4a40      	ldr	r2, [pc, #256]	; (8008580 <problem_fetch+0x6ebc>)
 8008480:	6810      	ldr	r0, [r2, #0]
 8008482:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	2207      	movs	r2, #7
 8008488:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"E,E,B,E,A,E,A");
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	33a4      	adds	r3, #164	; 0xa4
 800848e:	4a48      	ldr	r2, [pc, #288]	; (80085b0 <problem_fetch+0x6eec>)
 8008490:	461c      	mov	r4, r3
 8008492:	4613      	mov	r3, r2
 8008494:	cb07      	ldmia	r3!, {r0, r1, r2}
 8008496:	6020      	str	r0, [r4, #0]
 8008498:	6061      	str	r1, [r4, #4]
 800849a:	60a2      	str	r2, [r4, #8]
 800849c:	881b      	ldrh	r3, [r3, #0]
 800849e:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"6,9,10,12,14,16,18");
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	3304      	adds	r3, #4
 80084a4:	4a43      	ldr	r2, [pc, #268]	; (80085b4 <problem_fetch+0x6ef0>)
 80084a6:	461d      	mov	r5, r3
 80084a8:	4614      	mov	r4, r2
 80084aa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80084ac:	6028      	str	r0, [r5, #0]
 80084ae:	6069      	str	r1, [r5, #4]
 80084b0:	60aa      	str	r2, [r5, #8]
 80084b2:	60eb      	str	r3, [r5, #12]
 80084b4:	8823      	ldrh	r3, [r4, #0]
 80084b6:	78a2      	ldrb	r2, [r4, #2]
 80084b8:	822b      	strh	r3, [r5, #16]
 80084ba:	4613      	mov	r3, r2
 80084bc:	74ab      	strb	r3, [r5, #18]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 80084c4:	4a34      	ldr	r2, [pc, #208]	; (8008598 <problem_fetch+0x6ed4>)
 80084c6:	461c      	mov	r4, r3
 80084c8:	4613      	mov	r3, r2
 80084ca:	cb07      	ldmia	r3!, {r0, r1, r2}
 80084cc:	6020      	str	r0, [r4, #0]
 80084ce:	6061      	str	r1, [r4, #4]
 80084d0:	60a2      	str	r2, [r4, #8]
 80084d2:	881b      	ldrh	r3, [r3, #0]
 80084d4:	81a3      	strh	r3, [r4, #12]
			break;
 80084d6:	f014 b825 	b.w	801c524 <problem_fetch+0x1ae60>
		case 188 :
			strcpy(p->name,"A MATCH MADE IN HEAVEN");
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80084e0:	4a35      	ldr	r2, [pc, #212]	; (80085b8 <problem_fetch+0x6ef4>)
 80084e2:	461c      	mov	r4, r3
 80084e4:	4615      	mov	r5, r2
 80084e6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80084e8:	6020      	str	r0, [r4, #0]
 80084ea:	6061      	str	r1, [r4, #4]
 80084ec:	60a2      	str	r2, [r4, #8]
 80084ee:	60e3      	str	r3, [r4, #12]
 80084f0:	6828      	ldr	r0, [r5, #0]
 80084f2:	6120      	str	r0, [r4, #16]
 80084f4:	88ab      	ldrh	r3, [r5, #4]
 80084f6:	79aa      	ldrb	r2, [r5, #6]
 80084f8:	82a3      	strh	r3, [r4, #20]
 80084fa:	4613      	mov	r3, r2
 80084fc:	75a3      	strb	r3, [r4, #22]
			strcpy(p->grade,"7B+");
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8008504:	4a2d      	ldr	r2, [pc, #180]	; (80085bc <problem_fetch+0x6ef8>)
 8008506:	6810      	ldr	r0, [r2, #0]
 8008508:	6018      	str	r0, [r3, #0]
			p->moveSize = 5;
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	2205      	movs	r2, #5
 800850e:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,E,F,D,D");
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	33a4      	adds	r3, #164	; 0xa4
 8008514:	492a      	ldr	r1, [pc, #168]	; (80085c0 <problem_fetch+0x6efc>)
 8008516:	461a      	mov	r2, r3
 8008518:	460b      	mov	r3, r1
 800851a:	cb03      	ldmia	r3!, {r0, r1}
 800851c:	6010      	str	r0, [r2, #0]
 800851e:	6051      	str	r1, [r2, #4]
 8008520:	881b      	ldrh	r3, [r3, #0]
 8008522:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"4,6,11,15,18");
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	3304      	adds	r3, #4
 8008528:	4a26      	ldr	r2, [pc, #152]	; (80085c4 <problem_fetch+0x6f00>)
 800852a:	461c      	mov	r4, r3
 800852c:	4613      	mov	r3, r2
 800852e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8008530:	6020      	str	r0, [r4, #0]
 8008532:	6061      	str	r1, [r4, #4]
 8008534:	60a2      	str	r2, [r4, #8]
 8008536:	781b      	ldrb	r3, [r3, #0]
 8008538:	7323      	strb	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,e");
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8008540:	4921      	ldr	r1, [pc, #132]	; (80085c8 <problem_fetch+0x6f04>)
 8008542:	461a      	mov	r2, r3
 8008544:	460b      	mov	r3, r1
 8008546:	cb03      	ldmia	r3!, {r0, r1}
 8008548:	6010      	str	r0, [r2, #0]
 800854a:	6051      	str	r1, [r2, #4]
 800854c:	881b      	ldrh	r3, [r3, #0]
 800854e:	8113      	strh	r3, [r2, #8]
			break;
 8008550:	f013 bfe8 	b.w	801c524 <problem_fetch+0x1ae60>
 8008554:	08025d20 	.word	0x08025d20
 8008558:	08023814 	.word	0x08023814
 800855c:	08025d24 	.word	0x08025d24
 8008560:	08025d34 	.word	0x08025d34
 8008564:	08025d4c 	.word	0x08025d4c
 8008568:	08025d5c 	.word	0x08025d5c
 800856c:	08024088 	.word	0x08024088
 8008570:	08025d6c 	.word	0x08025d6c
 8008574:	08025b9c 	.word	0x08025b9c
 8008578:	08023bf0 	.word	0x08023bf0
 800857c:	08025d78 	.word	0x08025d78
 8008580:	080238ec 	.word	0x080238ec
 8008584:	08025d8c 	.word	0x08025d8c
 8008588:	08025d98 	.word	0x08025d98
 800858c:	08025da8 	.word	0x08025da8
 8008590:	08025dac 	.word	0x08025dac
 8008594:	08025dbc 	.word	0x08025dbc
 8008598:	080239dc 	.word	0x080239dc
 800859c:	08025dd0 	.word	0x08025dd0
 80085a0:	08023854 	.word	0x08023854
 80085a4:	08025dd4 	.word	0x08025dd4
 80085a8:	08025de4 	.word	0x08025de4
 80085ac:	08025df8 	.word	0x08025df8
 80085b0:	08025e0c 	.word	0x08025e0c
 80085b4:	08025e1c 	.word	0x08025e1c
 80085b8:	08025e30 	.word	0x08025e30
 80085bc:	08023990 	.word	0x08023990
 80085c0:	08025e48 	.word	0x08025e48
 80085c4:	08025e54 	.word	0x08025e54
 80085c8:	08023d20 	.word	0x08023d20
		case 189 :
			strcpy(p->name,"DUDDY QUALIFIED");
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80085d2:	4ac1      	ldr	r2, [pc, #772]	; (80088d8 <problem_fetch+0x7214>)
 80085d4:	461c      	mov	r4, r3
 80085d6:	4615      	mov	r5, r2
 80085d8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80085da:	6020      	str	r0, [r4, #0]
 80085dc:	6061      	str	r1, [r4, #4]
 80085de:	60a2      	str	r2, [r4, #8]
 80085e0:	60e3      	str	r3, [r4, #12]
			strcpy(p->grade,"7A+");
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80085e8:	4abc      	ldr	r2, [pc, #752]	; (80088dc <problem_fetch+0x7218>)
 80085ea:	6810      	ldr	r0, [r2, #0]
 80085ec:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	2207      	movs	r2, #7
 80085f2:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,G,F,A,D,E,I");
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	33a4      	adds	r3, #164	; 0xa4
 80085f8:	4ab9      	ldr	r2, [pc, #740]	; (80088e0 <problem_fetch+0x721c>)
 80085fa:	461c      	mov	r4, r3
 80085fc:	4613      	mov	r3, r2
 80085fe:	cb07      	ldmia	r3!, {r0, r1, r2}
 8008600:	6020      	str	r0, [r4, #0]
 8008602:	6061      	str	r1, [r4, #4]
 8008604:	60a2      	str	r2, [r4, #8]
 8008606:	881b      	ldrh	r3, [r3, #0]
 8008608:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,9,11,14,15,16,18");
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	3304      	adds	r3, #4
 800860e:	4ab5      	ldr	r2, [pc, #724]	; (80088e4 <problem_fetch+0x7220>)
 8008610:	461d      	mov	r5, r3
 8008612:	4614      	mov	r4, r2
 8008614:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008616:	6028      	str	r0, [r5, #0]
 8008618:	6069      	str	r1, [r5, #4]
 800861a:	60aa      	str	r2, [r5, #8]
 800861c:	60eb      	str	r3, [r5, #12]
 800861e:	8823      	ldrh	r3, [r4, #0]
 8008620:	78a2      	ldrb	r2, [r4, #2]
 8008622:	822b      	strh	r3, [r5, #16]
 8008624:	4613      	mov	r3, r2
 8008626:	74ab      	strb	r3, [r5, #18]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800862e:	4aae      	ldr	r2, [pc, #696]	; (80088e8 <problem_fetch+0x7224>)
 8008630:	461c      	mov	r4, r3
 8008632:	4613      	mov	r3, r2
 8008634:	cb07      	ldmia	r3!, {r0, r1, r2}
 8008636:	6020      	str	r0, [r4, #0]
 8008638:	6061      	str	r1, [r4, #4]
 800863a:	60a2      	str	r2, [r4, #8]
 800863c:	881b      	ldrh	r3, [r3, #0]
 800863e:	81a3      	strh	r3, [r4, #12]
			break;
 8008640:	f013 bf70 	b.w	801c524 <problem_fetch+0x1ae60>
		case 190 :
			strcpy(p->name,"EM'S BUNNY");
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800864a:	49a8      	ldr	r1, [pc, #672]	; (80088ec <problem_fetch+0x7228>)
 800864c:	461a      	mov	r2, r3
 800864e:	460b      	mov	r3, r1
 8008650:	cb03      	ldmia	r3!, {r0, r1}
 8008652:	6010      	str	r0, [r2, #0]
 8008654:	6051      	str	r1, [r2, #4]
 8008656:	8819      	ldrh	r1, [r3, #0]
 8008658:	789b      	ldrb	r3, [r3, #2]
 800865a:	8111      	strh	r1, [r2, #8]
 800865c:	7293      	strb	r3, [r2, #10]
			strcpy(p->grade,"6C");
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8008664:	4aa2      	ldr	r2, [pc, #648]	; (80088f0 <problem_fetch+0x722c>)
 8008666:	8811      	ldrh	r1, [r2, #0]
 8008668:	7892      	ldrb	r2, [r2, #2]
 800866a:	8019      	strh	r1, [r3, #0]
 800866c:	709a      	strb	r2, [r3, #2]
			p->moveSize = 6;
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	2206      	movs	r2, #6
 8008672:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,D,H,I,E,I");
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	33a4      	adds	r3, #164	; 0xa4
 8008678:	4a9e      	ldr	r2, [pc, #632]	; (80088f4 <problem_fetch+0x7230>)
 800867a:	461c      	mov	r4, r3
 800867c:	4613      	mov	r3, r2
 800867e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8008680:	6020      	str	r0, [r4, #0]
 8008682:	6061      	str	r1, [r4, #4]
 8008684:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,7,8,10,14,18");
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	3304      	adds	r3, #4
 800868a:	4a9b      	ldr	r2, [pc, #620]	; (80088f8 <problem_fetch+0x7234>)
 800868c:	461c      	mov	r4, r3
 800868e:	4613      	mov	r3, r2
 8008690:	cb07      	ldmia	r3!, {r0, r1, r2}
 8008692:	6020      	str	r0, [r4, #0]
 8008694:	6061      	str	r1, [r4, #4]
 8008696:	60a2      	str	r2, [r4, #8]
 8008698:	881a      	ldrh	r2, [r3, #0]
 800869a:	789b      	ldrb	r3, [r3, #2]
 800869c:	81a2      	strh	r2, [r4, #12]
 800869e:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 80086a6:	4a95      	ldr	r2, [pc, #596]	; (80088fc <problem_fetch+0x7238>)
 80086a8:	461c      	mov	r4, r3
 80086aa:	4613      	mov	r3, r2
 80086ac:	cb07      	ldmia	r3!, {r0, r1, r2}
 80086ae:	6020      	str	r0, [r4, #0]
 80086b0:	6061      	str	r1, [r4, #4]
 80086b2:	60a2      	str	r2, [r4, #8]
			break;
 80086b4:	f013 bf36 	b.w	801c524 <problem_fetch+0x1ae60>
		case 191 :
			strcpy(p->name,"DUST IN THE WIND");
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80086be:	4a90      	ldr	r2, [pc, #576]	; (8008900 <problem_fetch+0x723c>)
 80086c0:	461d      	mov	r5, r3
 80086c2:	4614      	mov	r4, r2
 80086c4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80086c6:	6028      	str	r0, [r5, #0]
 80086c8:	6069      	str	r1, [r5, #4]
 80086ca:	60aa      	str	r2, [r5, #8]
 80086cc:	60eb      	str	r3, [r5, #12]
 80086ce:	7823      	ldrb	r3, [r4, #0]
 80086d0:	742b      	strb	r3, [r5, #16]
			strcpy(p->grade,"6C+");
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80086d8:	4a8a      	ldr	r2, [pc, #552]	; (8008904 <problem_fetch+0x7240>)
 80086da:	6810      	ldr	r0, [r2, #0]
 80086dc:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	2206      	movs	r2, #6
 80086e2:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,E,H,E,G,D");
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	33a4      	adds	r3, #164	; 0xa4
 80086e8:	4a87      	ldr	r2, [pc, #540]	; (8008908 <problem_fetch+0x7244>)
 80086ea:	461c      	mov	r4, r3
 80086ec:	4613      	mov	r3, r2
 80086ee:	cb07      	ldmia	r3!, {r0, r1, r2}
 80086f0:	6020      	str	r0, [r4, #0]
 80086f2:	6061      	str	r1, [r4, #4]
 80086f4:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,6,10,14,17,18");
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	3304      	adds	r3, #4
 80086fa:	4a84      	ldr	r2, [pc, #528]	; (800890c <problem_fetch+0x7248>)
 80086fc:	461c      	mov	r4, r3
 80086fe:	4615      	mov	r5, r2
 8008700:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008702:	6020      	str	r0, [r4, #0]
 8008704:	6061      	str	r1, [r4, #4]
 8008706:	60a2      	str	r2, [r4, #8]
 8008708:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8008710:	4a7a      	ldr	r2, [pc, #488]	; (80088fc <problem_fetch+0x7238>)
 8008712:	461c      	mov	r4, r3
 8008714:	4613      	mov	r3, r2
 8008716:	cb07      	ldmia	r3!, {r0, r1, r2}
 8008718:	6020      	str	r0, [r4, #0]
 800871a:	6061      	str	r1, [r4, #4]
 800871c:	60a2      	str	r2, [r4, #8]
			break;
 800871e:	f013 bf01 	b.w	801c524 <problem_fetch+0x1ae60>
		case 192 :
			strcpy(p->name,"THREE");
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8008728:	4a79      	ldr	r2, [pc, #484]	; (8008910 <problem_fetch+0x724c>)
 800872a:	6810      	ldr	r0, [r2, #0]
 800872c:	6018      	str	r0, [r3, #0]
 800872e:	8892      	ldrh	r2, [r2, #4]
 8008730:	809a      	strh	r2, [r3, #4]
			strcpy(p->grade,"6C+");
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8008738:	4a72      	ldr	r2, [pc, #456]	; (8008904 <problem_fetch+0x7240>)
 800873a:	6810      	ldr	r0, [r2, #0]
 800873c:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	2206      	movs	r2, #6
 8008742:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,J,H,C,E,A");
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	33a4      	adds	r3, #164	; 0xa4
 8008748:	4a72      	ldr	r2, [pc, #456]	; (8008914 <problem_fetch+0x7250>)
 800874a:	461c      	mov	r4, r3
 800874c:	4613      	mov	r3, r2
 800874e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8008750:	6020      	str	r0, [r4, #0]
 8008752:	6061      	str	r1, [r4, #4]
 8008754:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"6,5,10,13,16,18");
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	3304      	adds	r3, #4
 800875a:	4a6f      	ldr	r2, [pc, #444]	; (8008918 <problem_fetch+0x7254>)
 800875c:	461c      	mov	r4, r3
 800875e:	4615      	mov	r5, r2
 8008760:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008762:	6020      	str	r0, [r4, #0]
 8008764:	6061      	str	r1, [r4, #4]
 8008766:	60a2      	str	r2, [r4, #8]
 8008768:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,s,d,d,d,e");
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8008770:	4a6a      	ldr	r2, [pc, #424]	; (800891c <problem_fetch+0x7258>)
 8008772:	461c      	mov	r4, r3
 8008774:	4613      	mov	r3, r2
 8008776:	cb07      	ldmia	r3!, {r0, r1, r2}
 8008778:	6020      	str	r0, [r4, #0]
 800877a:	6061      	str	r1, [r4, #4]
 800877c:	60a2      	str	r2, [r4, #8]
			break;
 800877e:	f013 bed1 	b.w	801c524 <problem_fetch+0x1ae60>
		case 193 :
			strcpy(p->name,"GRO1");
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8008788:	4a65      	ldr	r2, [pc, #404]	; (8008920 <problem_fetch+0x725c>)
 800878a:	6810      	ldr	r0, [r2, #0]
 800878c:	6018      	str	r0, [r3, #0]
 800878e:	7912      	ldrb	r2, [r2, #4]
 8008790:	711a      	strb	r2, [r3, #4]
			strcpy(p->grade,"6C");
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8008798:	4a55      	ldr	r2, [pc, #340]	; (80088f0 <problem_fetch+0x722c>)
 800879a:	8811      	ldrh	r1, [r2, #0]
 800879c:	7892      	ldrb	r2, [r2, #2]
 800879e:	8019      	strh	r1, [r3, #0]
 80087a0:	709a      	strb	r2, [r3, #2]
			p->moveSize = 6;
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	2206      	movs	r2, #6
 80087a6:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,C,H,C,E,D");
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	33a4      	adds	r3, #164	; 0xa4
 80087ac:	4a5d      	ldr	r2, [pc, #372]	; (8008924 <problem_fetch+0x7260>)
 80087ae:	461c      	mov	r4, r3
 80087b0:	4613      	mov	r3, r2
 80087b2:	cb07      	ldmia	r3!, {r0, r1, r2}
 80087b4:	6020      	str	r0, [r4, #0]
 80087b6:	6061      	str	r1, [r4, #4]
 80087b8:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,8,10,13,16,18");
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	3304      	adds	r3, #4
 80087be:	4a5a      	ldr	r2, [pc, #360]	; (8008928 <problem_fetch+0x7264>)
 80087c0:	461c      	mov	r4, r3
 80087c2:	4615      	mov	r5, r2
 80087c4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80087c6:	6020      	str	r0, [r4, #0]
 80087c8:	6061      	str	r1, [r4, #4]
 80087ca:	60a2      	str	r2, [r4, #8]
 80087cc:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 80087d4:	4a49      	ldr	r2, [pc, #292]	; (80088fc <problem_fetch+0x7238>)
 80087d6:	461c      	mov	r4, r3
 80087d8:	4613      	mov	r3, r2
 80087da:	cb07      	ldmia	r3!, {r0, r1, r2}
 80087dc:	6020      	str	r0, [r4, #0]
 80087de:	6061      	str	r1, [r4, #4]
 80087e0:	60a2      	str	r2, [r4, #8]
			break;
 80087e2:	f013 be9f 	b.w	801c524 <problem_fetch+0x1ae60>
		case 194 :
			strcpy(p->name,"INTO THE SHADOW DUST");
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80087ec:	4a4f      	ldr	r2, [pc, #316]	; (800892c <problem_fetch+0x7268>)
 80087ee:	461d      	mov	r5, r3
 80087f0:	4614      	mov	r4, r2
 80087f2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80087f4:	6028      	str	r0, [r5, #0]
 80087f6:	6069      	str	r1, [r5, #4]
 80087f8:	60aa      	str	r2, [r5, #8]
 80087fa:	60eb      	str	r3, [r5, #12]
 80087fc:	6820      	ldr	r0, [r4, #0]
 80087fe:	6128      	str	r0, [r5, #16]
 8008800:	7923      	ldrb	r3, [r4, #4]
 8008802:	752b      	strb	r3, [r5, #20]
			strcpy(p->grade,"6B+");
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800880a:	4a49      	ldr	r2, [pc, #292]	; (8008930 <problem_fetch+0x726c>)
 800880c:	6810      	ldr	r0, [r2, #0]
 800880e:	6018      	str	r0, [r3, #0]
			p->moveSize = 8;
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	2208      	movs	r2, #8
 8008814:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,E,H,F,C,G,G,I");
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	33a4      	adds	r3, #164	; 0xa4
 800881a:	4a46      	ldr	r2, [pc, #280]	; (8008934 <problem_fetch+0x7270>)
 800881c:	461c      	mov	r4, r3
 800881e:	4615      	mov	r5, r2
 8008820:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008822:	6020      	str	r0, [r4, #0]
 8008824:	6061      	str	r1, [r4, #4]
 8008826:	60a2      	str	r2, [r4, #8]
 8008828:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,8,8,11,13,14,17,18");
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	3304      	adds	r3, #4
 800882e:	4a42      	ldr	r2, [pc, #264]	; (8008938 <problem_fetch+0x7274>)
 8008830:	461d      	mov	r5, r3
 8008832:	4614      	mov	r4, r2
 8008834:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008836:	6028      	str	r0, [r5, #0]
 8008838:	6069      	str	r1, [r5, #4]
 800883a:	60aa      	str	r2, [r5, #8]
 800883c:	60eb      	str	r3, [r5, #12]
 800883e:	6820      	ldr	r0, [r4, #0]
 8008840:	6128      	str	r0, [r5, #16]
 8008842:	7923      	ldrb	r3, [r4, #4]
 8008844:	752b      	strb	r3, [r5, #20]
			strcpy(p->startFinish,"s,d,d,d,d,d,d,e");
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800884c:	4a3b      	ldr	r2, [pc, #236]	; (800893c <problem_fetch+0x7278>)
 800884e:	461c      	mov	r4, r3
 8008850:	4615      	mov	r5, r2
 8008852:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008854:	6020      	str	r0, [r4, #0]
 8008856:	6061      	str	r1, [r4, #4]
 8008858:	60a2      	str	r2, [r4, #8]
 800885a:	60e3      	str	r3, [r4, #12]
			break;
 800885c:	f013 be62 	b.w	801c524 <problem_fetch+0x1ae60>
		case 195 :
			strcpy(p->name,"BILLIONS AND BILLIONS");
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8008866:	4a36      	ldr	r2, [pc, #216]	; (8008940 <problem_fetch+0x727c>)
 8008868:	461d      	mov	r5, r3
 800886a:	4614      	mov	r4, r2
 800886c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800886e:	6028      	str	r0, [r5, #0]
 8008870:	6069      	str	r1, [r5, #4]
 8008872:	60aa      	str	r2, [r5, #8]
 8008874:	60eb      	str	r3, [r5, #12]
 8008876:	6820      	ldr	r0, [r4, #0]
 8008878:	6128      	str	r0, [r5, #16]
 800887a:	88a3      	ldrh	r3, [r4, #4]
 800887c:	82ab      	strh	r3, [r5, #20]
			strcpy(p->grade,"7A");
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8008884:	4a2f      	ldr	r2, [pc, #188]	; (8008944 <problem_fetch+0x7280>)
 8008886:	8811      	ldrh	r1, [r2, #0]
 8008888:	7892      	ldrb	r2, [r2, #2]
 800888a:	8019      	strh	r1, [r3, #0]
 800888c:	709a      	strb	r2, [r3, #2]
			p->moveSize = 6;
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	2206      	movs	r2, #6
 8008892:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,H,K,H,G,D");
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	33a4      	adds	r3, #164	; 0xa4
 8008898:	4a2b      	ldr	r2, [pc, #172]	; (8008948 <problem_fetch+0x7284>)
 800889a:	461c      	mov	r4, r3
 800889c:	4613      	mov	r3, r2
 800889e:	cb07      	ldmia	r3!, {r0, r1, r2}
 80088a0:	6020      	str	r0, [r4, #0]
 80088a2:	6061      	str	r1, [r4, #4]
 80088a4:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,5,9,12,14,18");
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	3304      	adds	r3, #4
 80088aa:	4a28      	ldr	r2, [pc, #160]	; (800894c <problem_fetch+0x7288>)
 80088ac:	461c      	mov	r4, r3
 80088ae:	4613      	mov	r3, r2
 80088b0:	cb07      	ldmia	r3!, {r0, r1, r2}
 80088b2:	6020      	str	r0, [r4, #0]
 80088b4:	6061      	str	r1, [r4, #4]
 80088b6:	60a2      	str	r2, [r4, #8]
 80088b8:	881a      	ldrh	r2, [r3, #0]
 80088ba:	789b      	ldrb	r3, [r3, #2]
 80088bc:	81a2      	strh	r2, [r4, #12]
 80088be:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish,"s,s,d,d,d,e");
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 80088c6:	4a15      	ldr	r2, [pc, #84]	; (800891c <problem_fetch+0x7258>)
 80088c8:	461c      	mov	r4, r3
 80088ca:	4613      	mov	r3, r2
 80088cc:	cb07      	ldmia	r3!, {r0, r1, r2}
 80088ce:	6020      	str	r0, [r4, #0]
 80088d0:	6061      	str	r1, [r4, #4]
 80088d2:	60a2      	str	r2, [r4, #8]
			break;
 80088d4:	f013 be26 	b.w	801c524 <problem_fetch+0x1ae60>
 80088d8:	08025e64 	.word	0x08025e64
 80088dc:	080239f4 	.word	0x080239f4
 80088e0:	08025e74 	.word	0x08025e74
 80088e4:	08025e84 	.word	0x08025e84
 80088e8:	080239dc 	.word	0x080239dc
 80088ec:	08025e98 	.word	0x08025e98
 80088f0:	08023920 	.word	0x08023920
 80088f4:	08025ea4 	.word	0x08025ea4
 80088f8:	08025eb0 	.word	0x08025eb0
 80088fc:	08023bf0 	.word	0x08023bf0
 8008900:	08025ec0 	.word	0x08025ec0
 8008904:	080238ec 	.word	0x080238ec
 8008908:	08025ed4 	.word	0x08025ed4
 800890c:	08025ee0 	.word	0x08025ee0
 8008910:	08025ef0 	.word	0x08025ef0
 8008914:	08025ef8 	.word	0x08025ef8
 8008918:	08025f04 	.word	0x08025f04
 800891c:	08023834 	.word	0x08023834
 8008920:	08025f14 	.word	0x08025f14
 8008924:	08025f1c 	.word	0x08025f1c
 8008928:	08025f28 	.word	0x08025f28
 800892c:	08025f38 	.word	0x08025f38
 8008930:	08023854 	.word	0x08023854
 8008934:	08025f50 	.word	0x08025f50
 8008938:	08025f60 	.word	0x08025f60
 800893c:	08023a64 	.word	0x08023a64
 8008940:	08025f78 	.word	0x08025f78
 8008944:	08023814 	.word	0x08023814
 8008948:	08025f90 	.word	0x08025f90
 800894c:	08025f9c 	.word	0x08025f9c
		case 196 :
			strcpy(p->name,"TWO");
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8008956:	4abd      	ldr	r2, [pc, #756]	; (8008c4c <problem_fetch+0x7588>)
 8008958:	6810      	ldr	r0, [r2, #0]
 800895a:	6018      	str	r0, [r3, #0]
			strcpy(p->grade,"6C+");
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8008962:	4abb      	ldr	r2, [pc, #748]	; (8008c50 <problem_fetch+0x758c>)
 8008964:	6810      	ldr	r0, [r2, #0]
 8008966:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	2207      	movs	r2, #7
 800896c:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"C,E,E,F,E,I,I");
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	33a4      	adds	r3, #164	; 0xa4
 8008972:	4ab8      	ldr	r2, [pc, #736]	; (8008c54 <problem_fetch+0x7590>)
 8008974:	461c      	mov	r4, r3
 8008976:	4613      	mov	r3, r2
 8008978:	cb07      	ldmia	r3!, {r0, r1, r2}
 800897a:	6020      	str	r0, [r4, #0]
 800897c:	6061      	str	r1, [r4, #4]
 800897e:	60a2      	str	r2, [r4, #8]
 8008980:	881b      	ldrh	r3, [r3, #0]
 8008982:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,6,8,11,14,14,18");
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	3304      	adds	r3, #4
 8008988:	4ab3      	ldr	r2, [pc, #716]	; (8008c58 <problem_fetch+0x7594>)
 800898a:	461d      	mov	r5, r3
 800898c:	4614      	mov	r4, r2
 800898e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008990:	6028      	str	r0, [r5, #0]
 8008992:	6069      	str	r1, [r5, #4]
 8008994:	60aa      	str	r2, [r5, #8]
 8008996:	60eb      	str	r3, [r5, #12]
 8008998:	8823      	ldrh	r3, [r4, #0]
 800899a:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,s,d,d,d,d,e");
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 80089a2:	4aae      	ldr	r2, [pc, #696]	; (8008c5c <problem_fetch+0x7598>)
 80089a4:	461c      	mov	r4, r3
 80089a6:	4613      	mov	r3, r2
 80089a8:	cb07      	ldmia	r3!, {r0, r1, r2}
 80089aa:	6020      	str	r0, [r4, #0]
 80089ac:	6061      	str	r1, [r4, #4]
 80089ae:	60a2      	str	r2, [r4, #8]
 80089b0:	881b      	ldrh	r3, [r3, #0]
 80089b2:	81a3      	strh	r3, [r4, #12]
			break;
 80089b4:	f013 bdb6 	b.w	801c524 <problem_fetch+0x1ae60>
		case 197 :
			strcpy(p->name,"CHINGA SU ES TO MADRE");
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80089be:	4aa8      	ldr	r2, [pc, #672]	; (8008c60 <problem_fetch+0x759c>)
 80089c0:	461d      	mov	r5, r3
 80089c2:	4614      	mov	r4, r2
 80089c4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80089c6:	6028      	str	r0, [r5, #0]
 80089c8:	6069      	str	r1, [r5, #4]
 80089ca:	60aa      	str	r2, [r5, #8]
 80089cc:	60eb      	str	r3, [r5, #12]
 80089ce:	6820      	ldr	r0, [r4, #0]
 80089d0:	6128      	str	r0, [r5, #16]
 80089d2:	88a3      	ldrh	r3, [r4, #4]
 80089d4:	82ab      	strh	r3, [r5, #20]
			strcpy(p->grade,"7C");
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80089dc:	4aa1      	ldr	r2, [pc, #644]	; (8008c64 <problem_fetch+0x75a0>)
 80089de:	8811      	ldrh	r1, [r2, #0]
 80089e0:	7892      	ldrb	r2, [r2, #2]
 80089e2:	8019      	strh	r1, [r3, #0]
 80089e4:	709a      	strb	r2, [r3, #2]
			p->moveSize = 5;
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	2205      	movs	r2, #5
 80089ea:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"E,F,B,A,B");
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	33a4      	adds	r3, #164	; 0xa4
 80089f0:	499d      	ldr	r1, [pc, #628]	; (8008c68 <problem_fetch+0x75a4>)
 80089f2:	461a      	mov	r2, r3
 80089f4:	460b      	mov	r3, r1
 80089f6:	cb03      	ldmia	r3!, {r0, r1}
 80089f8:	6010      	str	r0, [r2, #0]
 80089fa:	6051      	str	r1, [r2, #4]
 80089fc:	881b      	ldrh	r3, [r3, #0]
 80089fe:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"6,11,12,18,15");
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	3304      	adds	r3, #4
 8008a04:	4a99      	ldr	r2, [pc, #612]	; (8008c6c <problem_fetch+0x75a8>)
 8008a06:	461c      	mov	r4, r3
 8008a08:	4613      	mov	r3, r2
 8008a0a:	cb07      	ldmia	r3!, {r0, r1, r2}
 8008a0c:	6020      	str	r0, [r4, #0]
 8008a0e:	6061      	str	r1, [r4, #4]
 8008a10:	60a2      	str	r2, [r4, #8]
 8008a12:	881b      	ldrh	r3, [r3, #0]
 8008a14:	81a3      	strh	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,e,d");
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8008a1c:	4994      	ldr	r1, [pc, #592]	; (8008c70 <problem_fetch+0x75ac>)
 8008a1e:	461a      	mov	r2, r3
 8008a20:	460b      	mov	r3, r1
 8008a22:	cb03      	ldmia	r3!, {r0, r1}
 8008a24:	6010      	str	r0, [r2, #0]
 8008a26:	6051      	str	r1, [r2, #4]
 8008a28:	881b      	ldrh	r3, [r3, #0]
 8008a2a:	8113      	strh	r3, [r2, #8]
			break;
 8008a2c:	f013 bd7a 	b.w	801c524 <problem_fetch+0x1ae60>
		case 198 :
			strcpy(p->name,"DON'T BLACKOUT");
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8008a36:	4a8f      	ldr	r2, [pc, #572]	; (8008c74 <problem_fetch+0x75b0>)
 8008a38:	461c      	mov	r4, r3
 8008a3a:	4613      	mov	r3, r2
 8008a3c:	cb07      	ldmia	r3!, {r0, r1, r2}
 8008a3e:	6020      	str	r0, [r4, #0]
 8008a40:	6061      	str	r1, [r4, #4]
 8008a42:	60a2      	str	r2, [r4, #8]
 8008a44:	881a      	ldrh	r2, [r3, #0]
 8008a46:	789b      	ldrb	r3, [r3, #2]
 8008a48:	81a2      	strh	r2, [r4, #12]
 8008a4a:	73a3      	strb	r3, [r4, #14]
			strcpy(p->grade,"7A");
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8008a52:	4a89      	ldr	r2, [pc, #548]	; (8008c78 <problem_fetch+0x75b4>)
 8008a54:	8811      	ldrh	r1, [r2, #0]
 8008a56:	7892      	ldrb	r2, [r2, #2]
 8008a58:	8019      	strh	r1, [r3, #0]
 8008a5a:	709a      	strb	r2, [r3, #2]
			p->moveSize = 7;
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	2207      	movs	r2, #7
 8008a60:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,E,F,A,D,H,A");
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	33a4      	adds	r3, #164	; 0xa4
 8008a66:	4a85      	ldr	r2, [pc, #532]	; (8008c7c <problem_fetch+0x75b8>)
 8008a68:	461c      	mov	r4, r3
 8008a6a:	4613      	mov	r3, r2
 8008a6c:	cb07      	ldmia	r3!, {r0, r1, r2}
 8008a6e:	6020      	str	r0, [r4, #0]
 8008a70:	6061      	str	r1, [r4, #4]
 8008a72:	60a2      	str	r2, [r4, #8]
 8008a74:	881b      	ldrh	r3, [r3, #0]
 8008a76:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,6,11,9,15,10,18");
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	3304      	adds	r3, #4
 8008a7c:	4a80      	ldr	r2, [pc, #512]	; (8008c80 <problem_fetch+0x75bc>)
 8008a7e:	461d      	mov	r5, r3
 8008a80:	4614      	mov	r4, r2
 8008a82:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008a84:	6028      	str	r0, [r5, #0]
 8008a86:	6069      	str	r1, [r5, #4]
 8008a88:	60aa      	str	r2, [r5, #8]
 8008a8a:	60eb      	str	r3, [r5, #12]
 8008a8c:	8823      	ldrh	r3, [r4, #0]
 8008a8e:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,s,d,d,d,d,e");
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8008a96:	4a71      	ldr	r2, [pc, #452]	; (8008c5c <problem_fetch+0x7598>)
 8008a98:	461c      	mov	r4, r3
 8008a9a:	4613      	mov	r3, r2
 8008a9c:	cb07      	ldmia	r3!, {r0, r1, r2}
 8008a9e:	6020      	str	r0, [r4, #0]
 8008aa0:	6061      	str	r1, [r4, #4]
 8008aa2:	60a2      	str	r2, [r4, #8]
 8008aa4:	881b      	ldrh	r3, [r3, #0]
 8008aa6:	81a3      	strh	r3, [r4, #12]
			break;
 8008aa8:	f013 bd3c 	b.w	801c524 <problem_fetch+0x1ae60>
		case 199 :
			strcpy(p->name,"LUCID NONSENSE");
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8008ab2:	4a74      	ldr	r2, [pc, #464]	; (8008c84 <problem_fetch+0x75c0>)
 8008ab4:	461c      	mov	r4, r3
 8008ab6:	4613      	mov	r3, r2
 8008ab8:	cb07      	ldmia	r3!, {r0, r1, r2}
 8008aba:	6020      	str	r0, [r4, #0]
 8008abc:	6061      	str	r1, [r4, #4]
 8008abe:	60a2      	str	r2, [r4, #8]
 8008ac0:	881a      	ldrh	r2, [r3, #0]
 8008ac2:	789b      	ldrb	r3, [r3, #2]
 8008ac4:	81a2      	strh	r2, [r4, #12]
 8008ac6:	73a3      	strb	r3, [r4, #14]
			strcpy(p->grade,"7A");
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8008ace:	4a6a      	ldr	r2, [pc, #424]	; (8008c78 <problem_fetch+0x75b4>)
 8008ad0:	8811      	ldrh	r1, [r2, #0]
 8008ad2:	7892      	ldrb	r2, [r2, #2]
 8008ad4:	8019      	strh	r1, [r3, #0]
 8008ad6:	709a      	strb	r2, [r3, #2]
			p->moveSize = 6;
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	2206      	movs	r2, #6
 8008adc:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,E,D,E,B,I");
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	33a4      	adds	r3, #164	; 0xa4
 8008ae2:	4a69      	ldr	r2, [pc, #420]	; (8008c88 <problem_fetch+0x75c4>)
 8008ae4:	461c      	mov	r4, r3
 8008ae6:	4613      	mov	r3, r2
 8008ae8:	cb07      	ldmia	r3!, {r0, r1, r2}
 8008aea:	6020      	str	r0, [r4, #0]
 8008aec:	6061      	str	r1, [r4, #4]
 8008aee:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,8,15,16,10,18");
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	3304      	adds	r3, #4
 8008af4:	4a65      	ldr	r2, [pc, #404]	; (8008c8c <problem_fetch+0x75c8>)
 8008af6:	461c      	mov	r4, r3
 8008af8:	4615      	mov	r5, r2
 8008afa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008afc:	6020      	str	r0, [r4, #0]
 8008afe:	6061      	str	r1, [r4, #4]
 8008b00:	60a2      	str	r2, [r4, #8]
 8008b02:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8008b0a:	4a61      	ldr	r2, [pc, #388]	; (8008c90 <problem_fetch+0x75cc>)
 8008b0c:	461c      	mov	r4, r3
 8008b0e:	4613      	mov	r3, r2
 8008b10:	cb07      	ldmia	r3!, {r0, r1, r2}
 8008b12:	6020      	str	r0, [r4, #0]
 8008b14:	6061      	str	r1, [r4, #4]
 8008b16:	60a2      	str	r2, [r4, #8]
			break;
 8008b18:	f013 bd04 	b.w	801c524 <problem_fetch+0x1ae60>
		case 200 :
			strcpy(p->name,"SNAP");
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8008b22:	4a5c      	ldr	r2, [pc, #368]	; (8008c94 <problem_fetch+0x75d0>)
 8008b24:	6810      	ldr	r0, [r2, #0]
 8008b26:	6018      	str	r0, [r3, #0]
 8008b28:	7912      	ldrb	r2, [r2, #4]
 8008b2a:	711a      	strb	r2, [r3, #4]
			strcpy(p->grade,"7A+");
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8008b32:	4a59      	ldr	r2, [pc, #356]	; (8008c98 <problem_fetch+0x75d4>)
 8008b34:	6810      	ldr	r0, [r2, #0]
 8008b36:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	2206      	movs	r2, #6
 8008b3c:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"B,D,B,E,A,D");
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	33a4      	adds	r3, #164	; 0xa4
 8008b42:	4a56      	ldr	r2, [pc, #344]	; (8008c9c <problem_fetch+0x75d8>)
 8008b44:	461c      	mov	r4, r3
 8008b46:	4613      	mov	r3, r2
 8008b48:	cb07      	ldmia	r3!, {r0, r1, r2}
 8008b4a:	6020      	str	r0, [r4, #0]
 8008b4c:	6061      	str	r1, [r4, #4]
 8008b4e:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"6,7,10,12,14,18");
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	3304      	adds	r3, #4
 8008b54:	4a52      	ldr	r2, [pc, #328]	; (8008ca0 <problem_fetch+0x75dc>)
 8008b56:	461c      	mov	r4, r3
 8008b58:	4615      	mov	r5, r2
 8008b5a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008b5c:	6020      	str	r0, [r4, #0]
 8008b5e:	6061      	str	r1, [r4, #4]
 8008b60:	60a2      	str	r2, [r4, #8]
 8008b62:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8008b6a:	4a49      	ldr	r2, [pc, #292]	; (8008c90 <problem_fetch+0x75cc>)
 8008b6c:	461c      	mov	r4, r3
 8008b6e:	4613      	mov	r3, r2
 8008b70:	cb07      	ldmia	r3!, {r0, r1, r2}
 8008b72:	6020      	str	r0, [r4, #0]
 8008b74:	6061      	str	r1, [r4, #4]
 8008b76:	60a2      	str	r2, [r4, #8]
			break;
 8008b78:	f013 bcd4 	b.w	801c524 <problem_fetch+0x1ae60>
		case 201 :
			strcpy(p->name,"FAT 'N WEAK");
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8008b82:	4a48      	ldr	r2, [pc, #288]	; (8008ca4 <problem_fetch+0x75e0>)
 8008b84:	461c      	mov	r4, r3
 8008b86:	4613      	mov	r3, r2
 8008b88:	cb07      	ldmia	r3!, {r0, r1, r2}
 8008b8a:	6020      	str	r0, [r4, #0]
 8008b8c:	6061      	str	r1, [r4, #4]
 8008b8e:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade,"6C+");
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8008b96:	4a2e      	ldr	r2, [pc, #184]	; (8008c50 <problem_fetch+0x758c>)
 8008b98:	6810      	ldr	r0, [r2, #0]
 8008b9a:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	2206      	movs	r2, #6
 8008ba0:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,E,E,A,E,A");
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	33a4      	adds	r3, #164	; 0xa4
 8008ba6:	4a40      	ldr	r2, [pc, #256]	; (8008ca8 <problem_fetch+0x75e4>)
 8008ba8:	461c      	mov	r4, r3
 8008baa:	4613      	mov	r3, r2
 8008bac:	cb07      	ldmia	r3!, {r0, r1, r2}
 8008bae:	6020      	str	r0, [r4, #0]
 8008bb0:	6061      	str	r1, [r4, #4]
 8008bb2:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,8,12,14,16,18");
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	3304      	adds	r3, #4
 8008bb8:	4a3c      	ldr	r2, [pc, #240]	; (8008cac <problem_fetch+0x75e8>)
 8008bba:	461c      	mov	r4, r3
 8008bbc:	4615      	mov	r5, r2
 8008bbe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008bc0:	6020      	str	r0, [r4, #0]
 8008bc2:	6061      	str	r1, [r4, #4]
 8008bc4:	60a2      	str	r2, [r4, #8]
 8008bc6:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8008bce:	4a30      	ldr	r2, [pc, #192]	; (8008c90 <problem_fetch+0x75cc>)
 8008bd0:	461c      	mov	r4, r3
 8008bd2:	4613      	mov	r3, r2
 8008bd4:	cb07      	ldmia	r3!, {r0, r1, r2}
 8008bd6:	6020      	str	r0, [r4, #0]
 8008bd8:	6061      	str	r1, [r4, #4]
 8008bda:	60a2      	str	r2, [r4, #8]
			break;
 8008bdc:	f013 bca2 	b.w	801c524 <problem_fetch+0x1ae60>
		case 202 :
			strcpy(p->name,"MSFTS");
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8008be6:	4a32      	ldr	r2, [pc, #200]	; (8008cb0 <problem_fetch+0x75ec>)
 8008be8:	6810      	ldr	r0, [r2, #0]
 8008bea:	6018      	str	r0, [r3, #0]
 8008bec:	8892      	ldrh	r2, [r2, #4]
 8008bee:	809a      	strh	r2, [r3, #4]
			strcpy(p->grade,"6C+");
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8008bf6:	4a16      	ldr	r2, [pc, #88]	; (8008c50 <problem_fetch+0x758c>)
 8008bf8:	6810      	ldr	r0, [r2, #0]
 8008bfa:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	2207      	movs	r2, #7
 8008c00:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"H,G,E,J,J,H,I");
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	33a4      	adds	r3, #164	; 0xa4
 8008c06:	4a2b      	ldr	r2, [pc, #172]	; (8008cb4 <problem_fetch+0x75f0>)
 8008c08:	461c      	mov	r4, r3
 8008c0a:	4613      	mov	r3, r2
 8008c0c:	cb07      	ldmia	r3!, {r0, r1, r2}
 8008c0e:	6020      	str	r0, [r4, #0]
 8008c10:	6061      	str	r1, [r4, #4]
 8008c12:	60a2      	str	r2, [r4, #8]
 8008c14:	881b      	ldrh	r3, [r3, #0]
 8008c16:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,9,12,5,13,16,18");
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	3304      	adds	r3, #4
 8008c1c:	4a26      	ldr	r2, [pc, #152]	; (8008cb8 <problem_fetch+0x75f4>)
 8008c1e:	461d      	mov	r5, r3
 8008c20:	4614      	mov	r4, r2
 8008c22:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008c24:	6028      	str	r0, [r5, #0]
 8008c26:	6069      	str	r1, [r5, #4]
 8008c28:	60aa      	str	r2, [r5, #8]
 8008c2a:	60eb      	str	r3, [r5, #12]
 8008c2c:	8823      	ldrh	r3, [r4, #0]
 8008c2e:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,d,d,s,d,d,e");
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8008c36:	4a21      	ldr	r2, [pc, #132]	; (8008cbc <problem_fetch+0x75f8>)
 8008c38:	461c      	mov	r4, r3
 8008c3a:	4613      	mov	r3, r2
 8008c3c:	cb07      	ldmia	r3!, {r0, r1, r2}
 8008c3e:	6020      	str	r0, [r4, #0]
 8008c40:	6061      	str	r1, [r4, #4]
 8008c42:	60a2      	str	r2, [r4, #8]
 8008c44:	881b      	ldrh	r3, [r3, #0]
 8008c46:	81a3      	strh	r3, [r4, #12]
			break;
 8008c48:	f013 bc6c 	b.w	801c524 <problem_fetch+0x1ae60>
 8008c4c:	08025fac 	.word	0x08025fac
 8008c50:	080238ec 	.word	0x080238ec
 8008c54:	08025fb0 	.word	0x08025fb0
 8008c58:	08025fc0 	.word	0x08025fc0
 8008c5c:	080238cc 	.word	0x080238cc
 8008c60:	08025fd4 	.word	0x08025fd4
 8008c64:	08024088 	.word	0x08024088
 8008c68:	08025fec 	.word	0x08025fec
 8008c6c:	08025ff8 	.word	0x08025ff8
 8008c70:	08026008 	.word	0x08026008
 8008c74:	08026014 	.word	0x08026014
 8008c78:	08023814 	.word	0x08023814
 8008c7c:	08026024 	.word	0x08026024
 8008c80:	08026034 	.word	0x08026034
 8008c84:	08026048 	.word	0x08026048
 8008c88:	08026058 	.word	0x08026058
 8008c8c:	08026064 	.word	0x08026064
 8008c90:	08023bf0 	.word	0x08023bf0
 8008c94:	08026074 	.word	0x08026074
 8008c98:	080239f4 	.word	0x080239f4
 8008c9c:	0802607c 	.word	0x0802607c
 8008ca0:	08026088 	.word	0x08026088
 8008ca4:	08026098 	.word	0x08026098
 8008ca8:	080260a4 	.word	0x080260a4
 8008cac:	080260b0 	.word	0x080260b0
 8008cb0:	080260c0 	.word	0x080260c0
 8008cb4:	080260c8 	.word	0x080260c8
 8008cb8:	080260d8 	.word	0x080260d8
 8008cbc:	08025c54 	.word	0x08025c54
		case 203 :
			strcpy(p->name,"ITIM");
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8008cc6:	4aaa      	ldr	r2, [pc, #680]	; (8008f70 <problem_fetch+0x78ac>)
 8008cc8:	6810      	ldr	r0, [r2, #0]
 8008cca:	6018      	str	r0, [r3, #0]
 8008ccc:	7912      	ldrb	r2, [r2, #4]
 8008cce:	711a      	strb	r2, [r3, #4]
			strcpy(p->grade,"7A+");
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8008cd6:	4aa7      	ldr	r2, [pc, #668]	; (8008f74 <problem_fetch+0x78b0>)
 8008cd8:	6810      	ldr	r0, [r2, #0]
 8008cda:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	2207      	movs	r2, #7
 8008ce0:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"C,I,E,E,G,E,G");
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	33a4      	adds	r3, #164	; 0xa4
 8008ce6:	4aa4      	ldr	r2, [pc, #656]	; (8008f78 <problem_fetch+0x78b4>)
 8008ce8:	461c      	mov	r4, r3
 8008cea:	4613      	mov	r3, r2
 8008cec:	cb07      	ldmia	r3!, {r0, r1, r2}
 8008cee:	6020      	str	r0, [r4, #0]
 8008cf0:	6061      	str	r1, [r4, #4]
 8008cf2:	60a2      	str	r2, [r4, #8]
 8008cf4:	881b      	ldrh	r3, [r3, #0]
 8008cf6:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"13,18,9,16,14,8,4");
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	3304      	adds	r3, #4
 8008cfc:	4a9f      	ldr	r2, [pc, #636]	; (8008f7c <problem_fetch+0x78b8>)
 8008cfe:	461d      	mov	r5, r3
 8008d00:	4614      	mov	r4, r2
 8008d02:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008d04:	6028      	str	r0, [r5, #0]
 8008d06:	6069      	str	r1, [r5, #4]
 8008d08:	60aa      	str	r2, [r5, #8]
 8008d0a:	60eb      	str	r3, [r5, #12]
 8008d0c:	8823      	ldrh	r3, [r4, #0]
 8008d0e:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"d,e,d,d,d,d,s");
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8008d16:	4a9a      	ldr	r2, [pc, #616]	; (8008f80 <problem_fetch+0x78bc>)
 8008d18:	461c      	mov	r4, r3
 8008d1a:	4613      	mov	r3, r2
 8008d1c:	cb07      	ldmia	r3!, {r0, r1, r2}
 8008d1e:	6020      	str	r0, [r4, #0]
 8008d20:	6061      	str	r1, [r4, #4]
 8008d22:	60a2      	str	r2, [r4, #8]
 8008d24:	881b      	ldrh	r3, [r3, #0]
 8008d26:	81a3      	strh	r3, [r4, #12]
			break;
 8008d28:	f013 bbfc 	b.w	801c524 <problem_fetch+0x1ae60>
		case 204 :
			strcpy(p->name,"SIDEPULL SIDEWALK");
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8008d32:	4a94      	ldr	r2, [pc, #592]	; (8008f84 <problem_fetch+0x78c0>)
 8008d34:	461d      	mov	r5, r3
 8008d36:	4614      	mov	r4, r2
 8008d38:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008d3a:	6028      	str	r0, [r5, #0]
 8008d3c:	6069      	str	r1, [r5, #4]
 8008d3e:	60aa      	str	r2, [r5, #8]
 8008d40:	60eb      	str	r3, [r5, #12]
 8008d42:	8823      	ldrh	r3, [r4, #0]
 8008d44:	822b      	strh	r3, [r5, #16]
			strcpy(p->grade,"6B+");
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8008d4c:	4a8e      	ldr	r2, [pc, #568]	; (8008f88 <problem_fetch+0x78c4>)
 8008d4e:	6810      	ldr	r0, [r2, #0]
 8008d50:	6018      	str	r0, [r3, #0]
			p->moveSize = 10;
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	220a      	movs	r2, #10
 8008d56:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,J,G,H,G,H,F,I,G,I");
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	33a4      	adds	r3, #164	; 0xa4
 8008d5c:	4a8b      	ldr	r2, [pc, #556]	; (8008f8c <problem_fetch+0x78c8>)
 8008d5e:	461d      	mov	r5, r3
 8008d60:	4614      	mov	r4, r2
 8008d62:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008d64:	6028      	str	r0, [r5, #0]
 8008d66:	6069      	str	r1, [r5, #4]
 8008d68:	60aa      	str	r2, [r5, #8]
 8008d6a:	60eb      	str	r3, [r5, #12]
 8008d6c:	6820      	ldr	r0, [r4, #0]
 8008d6e:	6128      	str	r0, [r5, #16]
			strcpy(p->moveNumbers,"4,5,6,8,9,10,11,14,15,18");
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	3304      	adds	r3, #4
 8008d74:	4a86      	ldr	r2, [pc, #536]	; (8008f90 <problem_fetch+0x78cc>)
 8008d76:	461d      	mov	r5, r3
 8008d78:	4614      	mov	r4, r2
 8008d7a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008d7c:	6028      	str	r0, [r5, #0]
 8008d7e:	6069      	str	r1, [r5, #4]
 8008d80:	60aa      	str	r2, [r5, #8]
 8008d82:	60eb      	str	r3, [r5, #12]
 8008d84:	cc03      	ldmia	r4!, {r0, r1}
 8008d86:	6128      	str	r0, [r5, #16]
 8008d88:	6169      	str	r1, [r5, #20]
 8008d8a:	7823      	ldrb	r3, [r4, #0]
 8008d8c:	762b      	strb	r3, [r5, #24]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,d,d,e");
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8008d94:	4a7f      	ldr	r2, [pc, #508]	; (8008f94 <problem_fetch+0x78d0>)
 8008d96:	461d      	mov	r5, r3
 8008d98:	4614      	mov	r4, r2
 8008d9a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008d9c:	6028      	str	r0, [r5, #0]
 8008d9e:	6069      	str	r1, [r5, #4]
 8008da0:	60aa      	str	r2, [r5, #8]
 8008da2:	60eb      	str	r3, [r5, #12]
 8008da4:	6820      	ldr	r0, [r4, #0]
 8008da6:	6128      	str	r0, [r5, #16]
			break;
 8008da8:	f013 bbbc 	b.w	801c524 <problem_fetch+0x1ae60>
		case 205 :
			strcpy(p->name,"DROPPIN SOAP");
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8008db2:	4a79      	ldr	r2, [pc, #484]	; (8008f98 <problem_fetch+0x78d4>)
 8008db4:	461c      	mov	r4, r3
 8008db6:	4613      	mov	r3, r2
 8008db8:	cb07      	ldmia	r3!, {r0, r1, r2}
 8008dba:	6020      	str	r0, [r4, #0]
 8008dbc:	6061      	str	r1, [r4, #4]
 8008dbe:	60a2      	str	r2, [r4, #8]
 8008dc0:	781b      	ldrb	r3, [r3, #0]
 8008dc2:	7323      	strb	r3, [r4, #12]
			strcpy(p->grade,"7A+");
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8008dca:	4a6a      	ldr	r2, [pc, #424]	; (8008f74 <problem_fetch+0x78b0>)
 8008dcc:	6810      	ldr	r0, [r2, #0]
 8008dce:	6018      	str	r0, [r3, #0]
			p->moveSize = 5;
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	2205      	movs	r2, #5
 8008dd4:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,G,E,H,I");
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	33a4      	adds	r3, #164	; 0xa4
 8008dda:	4970      	ldr	r1, [pc, #448]	; (8008f9c <problem_fetch+0x78d8>)
 8008ddc:	461a      	mov	r2, r3
 8008dde:	460b      	mov	r3, r1
 8008de0:	cb03      	ldmia	r3!, {r0, r1}
 8008de2:	6010      	str	r0, [r2, #0]
 8008de4:	6051      	str	r1, [r2, #4]
 8008de6:	881b      	ldrh	r3, [r3, #0]
 8008de8:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"5,9,14,12,18");
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	3304      	adds	r3, #4
 8008dee:	4a6c      	ldr	r2, [pc, #432]	; (8008fa0 <problem_fetch+0x78dc>)
 8008df0:	461c      	mov	r4, r3
 8008df2:	4613      	mov	r3, r2
 8008df4:	cb07      	ldmia	r3!, {r0, r1, r2}
 8008df6:	6020      	str	r0, [r4, #0]
 8008df8:	6061      	str	r1, [r4, #4]
 8008dfa:	60a2      	str	r2, [r4, #8]
 8008dfc:	781b      	ldrb	r3, [r3, #0]
 8008dfe:	7323      	strb	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,e");
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8008e06:	4967      	ldr	r1, [pc, #412]	; (8008fa4 <problem_fetch+0x78e0>)
 8008e08:	461a      	mov	r2, r3
 8008e0a:	460b      	mov	r3, r1
 8008e0c:	cb03      	ldmia	r3!, {r0, r1}
 8008e0e:	6010      	str	r0, [r2, #0]
 8008e10:	6051      	str	r1, [r2, #4]
 8008e12:	881b      	ldrh	r3, [r3, #0]
 8008e14:	8113      	strh	r3, [r2, #8]
			break;
 8008e16:	f013 bb85 	b.w	801c524 <problem_fetch+0x1ae60>
		case 206 :
			strcpy(p->name,"BLACK #268162639");
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8008e20:	4a61      	ldr	r2, [pc, #388]	; (8008fa8 <problem_fetch+0x78e4>)
 8008e22:	461d      	mov	r5, r3
 8008e24:	4614      	mov	r4, r2
 8008e26:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008e28:	6028      	str	r0, [r5, #0]
 8008e2a:	6069      	str	r1, [r5, #4]
 8008e2c:	60aa      	str	r2, [r5, #8]
 8008e2e:	60eb      	str	r3, [r5, #12]
 8008e30:	7823      	ldrb	r3, [r4, #0]
 8008e32:	742b      	strb	r3, [r5, #16]
			strcpy(p->grade,"7A+");
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8008e3a:	4a4e      	ldr	r2, [pc, #312]	; (8008f74 <problem_fetch+0x78b0>)
 8008e3c:	6810      	ldr	r0, [r2, #0]
 8008e3e:	6018      	str	r0, [r3, #0]
			p->moveSize = 5;
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	2205      	movs	r2, #5
 8008e44:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,I,H,J,D");
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	33a4      	adds	r3, #164	; 0xa4
 8008e4a:	4958      	ldr	r1, [pc, #352]	; (8008fac <problem_fetch+0x78e8>)
 8008e4c:	461a      	mov	r2, r3
 8008e4e:	460b      	mov	r3, r1
 8008e50:	cb03      	ldmia	r3!, {r0, r1}
 8008e52:	6010      	str	r0, [r2, #0]
 8008e54:	6051      	str	r1, [r2, #4]
 8008e56:	881b      	ldrh	r3, [r3, #0]
 8008e58:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"4,10,12,16,18");
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	3304      	adds	r3, #4
 8008e5e:	4a54      	ldr	r2, [pc, #336]	; (8008fb0 <problem_fetch+0x78ec>)
 8008e60:	461c      	mov	r4, r3
 8008e62:	4613      	mov	r3, r2
 8008e64:	cb07      	ldmia	r3!, {r0, r1, r2}
 8008e66:	6020      	str	r0, [r4, #0]
 8008e68:	6061      	str	r1, [r4, #4]
 8008e6a:	60a2      	str	r2, [r4, #8]
 8008e6c:	881b      	ldrh	r3, [r3, #0]
 8008e6e:	81a3      	strh	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,e");
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8008e76:	494b      	ldr	r1, [pc, #300]	; (8008fa4 <problem_fetch+0x78e0>)
 8008e78:	461a      	mov	r2, r3
 8008e7a:	460b      	mov	r3, r1
 8008e7c:	cb03      	ldmia	r3!, {r0, r1}
 8008e7e:	6010      	str	r0, [r2, #0]
 8008e80:	6051      	str	r1, [r2, #4]
 8008e82:	881b      	ldrh	r3, [r3, #0]
 8008e84:	8113      	strh	r3, [r2, #8]
			break;
 8008e86:	f013 bb4d 	b.w	801c524 <problem_fetch+0x1ae60>
		case 207 :
			strcpy(p->name,"MBT1RIGHT");
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8008e90:	4948      	ldr	r1, [pc, #288]	; (8008fb4 <problem_fetch+0x78f0>)
 8008e92:	461a      	mov	r2, r3
 8008e94:	460b      	mov	r3, r1
 8008e96:	cb03      	ldmia	r3!, {r0, r1}
 8008e98:	6010      	str	r0, [r2, #0]
 8008e9a:	6051      	str	r1, [r2, #4]
 8008e9c:	881b      	ldrh	r3, [r3, #0]
 8008e9e:	8113      	strh	r3, [r2, #8]
			strcpy(p->grade,"6C+");
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8008ea6:	4a44      	ldr	r2, [pc, #272]	; (8008fb8 <problem_fetch+0x78f4>)
 8008ea8:	6810      	ldr	r0, [r2, #0]
 8008eaa:	6018      	str	r0, [r3, #0]
			p->moveSize = 5;
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	2205      	movs	r2, #5
 8008eb0:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,G,G,D,I");
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	33a4      	adds	r3, #164	; 0xa4
 8008eb6:	4941      	ldr	r1, [pc, #260]	; (8008fbc <problem_fetch+0x78f8>)
 8008eb8:	461a      	mov	r2, r3
 8008eba:	460b      	mov	r3, r1
 8008ebc:	cb03      	ldmia	r3!, {r0, r1}
 8008ebe:	6010      	str	r0, [r2, #0]
 8008ec0:	6051      	str	r1, [r2, #4]
 8008ec2:	881b      	ldrh	r3, [r3, #0]
 8008ec4:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"4,9,14,11,18");
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	3304      	adds	r3, #4
 8008eca:	4a3d      	ldr	r2, [pc, #244]	; (8008fc0 <problem_fetch+0x78fc>)
 8008ecc:	461c      	mov	r4, r3
 8008ece:	4613      	mov	r3, r2
 8008ed0:	cb07      	ldmia	r3!, {r0, r1, r2}
 8008ed2:	6020      	str	r0, [r4, #0]
 8008ed4:	6061      	str	r1, [r4, #4]
 8008ed6:	60a2      	str	r2, [r4, #8]
 8008ed8:	781b      	ldrb	r3, [r3, #0]
 8008eda:	7323      	strb	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,e");
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8008ee2:	4930      	ldr	r1, [pc, #192]	; (8008fa4 <problem_fetch+0x78e0>)
 8008ee4:	461a      	mov	r2, r3
 8008ee6:	460b      	mov	r3, r1
 8008ee8:	cb03      	ldmia	r3!, {r0, r1}
 8008eea:	6010      	str	r0, [r2, #0]
 8008eec:	6051      	str	r1, [r2, #4]
 8008eee:	881b      	ldrh	r3, [r3, #0]
 8008ef0:	8113      	strh	r3, [r2, #8]
			break;
 8008ef2:	f013 bb17 	b.w	801c524 <problem_fetch+0x1ae60>
		case 208 :
			strcpy(p->name,"BROKEN RECORD");
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8008efc:	4a31      	ldr	r2, [pc, #196]	; (8008fc4 <problem_fetch+0x7900>)
 8008efe:	461c      	mov	r4, r3
 8008f00:	4613      	mov	r3, r2
 8008f02:	cb07      	ldmia	r3!, {r0, r1, r2}
 8008f04:	6020      	str	r0, [r4, #0]
 8008f06:	6061      	str	r1, [r4, #4]
 8008f08:	60a2      	str	r2, [r4, #8]
 8008f0a:	881b      	ldrh	r3, [r3, #0]
 8008f0c:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade,"6C");
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8008f14:	4a2c      	ldr	r2, [pc, #176]	; (8008fc8 <problem_fetch+0x7904>)
 8008f16:	8811      	ldrh	r1, [r2, #0]
 8008f18:	7892      	ldrb	r2, [r2, #2]
 8008f1a:	8019      	strh	r1, [r3, #0]
 8008f1c:	709a      	strb	r2, [r3, #2]
			p->moveSize = 7;
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	2207      	movs	r2, #7
 8008f22:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,H,C,E,A,D,A");
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	33a4      	adds	r3, #164	; 0xa4
 8008f28:	4a28      	ldr	r2, [pc, #160]	; (8008fcc <problem_fetch+0x7908>)
 8008f2a:	461c      	mov	r4, r3
 8008f2c:	4613      	mov	r3, r2
 8008f2e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8008f30:	6020      	str	r0, [r4, #0]
 8008f32:	6061      	str	r1, [r4, #4]
 8008f34:	60a2      	str	r2, [r4, #8]
 8008f36:	881b      	ldrh	r3, [r3, #0]
 8008f38:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,8,8,12,14,15,18");
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	3304      	adds	r3, #4
 8008f3e:	4a24      	ldr	r2, [pc, #144]	; (8008fd0 <problem_fetch+0x790c>)
 8008f40:	461d      	mov	r5, r3
 8008f42:	4614      	mov	r4, r2
 8008f44:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008f46:	6028      	str	r0, [r5, #0]
 8008f48:	6069      	str	r1, [r5, #4]
 8008f4a:	60aa      	str	r2, [r5, #8]
 8008f4c:	60eb      	str	r3, [r5, #12]
 8008f4e:	8823      	ldrh	r3, [r4, #0]
 8008f50:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8008f58:	4a1e      	ldr	r2, [pc, #120]	; (8008fd4 <problem_fetch+0x7910>)
 8008f5a:	461c      	mov	r4, r3
 8008f5c:	4613      	mov	r3, r2
 8008f5e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8008f60:	6020      	str	r0, [r4, #0]
 8008f62:	6061      	str	r1, [r4, #4]
 8008f64:	60a2      	str	r2, [r4, #8]
 8008f66:	881b      	ldrh	r3, [r3, #0]
 8008f68:	81a3      	strh	r3, [r4, #12]
			break;
 8008f6a:	f013 badb 	b.w	801c524 <problem_fetch+0x1ae60>
 8008f6e:	bf00      	nop
 8008f70:	080260ec 	.word	0x080260ec
 8008f74:	080239f4 	.word	0x080239f4
 8008f78:	080260f4 	.word	0x080260f4
 8008f7c:	08026104 	.word	0x08026104
 8008f80:	08026118 	.word	0x08026118
 8008f84:	08026128 	.word	0x08026128
 8008f88:	08023854 	.word	0x08023854
 8008f8c:	0802613c 	.word	0x0802613c
 8008f90:	08026150 	.word	0x08026150
 8008f94:	080240fc 	.word	0x080240fc
 8008f98:	0802616c 	.word	0x0802616c
 8008f9c:	0802617c 	.word	0x0802617c
 8008fa0:	08026188 	.word	0x08026188
 8008fa4:	08023d20 	.word	0x08023d20
 8008fa8:	08026198 	.word	0x08026198
 8008fac:	080261ac 	.word	0x080261ac
 8008fb0:	080261b8 	.word	0x080261b8
 8008fb4:	080261c8 	.word	0x080261c8
 8008fb8:	080238ec 	.word	0x080238ec
 8008fbc:	080261d4 	.word	0x080261d4
 8008fc0:	080261e0 	.word	0x080261e0
 8008fc4:	080261f0 	.word	0x080261f0
 8008fc8:	08023920 	.word	0x08023920
 8008fcc:	08026200 	.word	0x08026200
 8008fd0:	08026210 	.word	0x08026210
 8008fd4:	080239dc 	.word	0x080239dc
		case 209 :
			strcpy(p->name,"BLACK 2");
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8008fde:	49ab      	ldr	r1, [pc, #684]	; (800928c <problem_fetch+0x7bc8>)
 8008fe0:	461a      	mov	r2, r3
 8008fe2:	460b      	mov	r3, r1
 8008fe4:	cb03      	ldmia	r3!, {r0, r1}
 8008fe6:	6010      	str	r0, [r2, #0]
 8008fe8:	6051      	str	r1, [r2, #4]
			strcpy(p->grade,"6C+");
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8008ff0:	4aa7      	ldr	r2, [pc, #668]	; (8009290 <problem_fetch+0x7bcc>)
 8008ff2:	6810      	ldr	r0, [r2, #0]
 8008ff4:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	2207      	movs	r2, #7
 8008ffa:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,D,G,H,E,G,D");
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	33a4      	adds	r3, #164	; 0xa4
 8009000:	4aa4      	ldr	r2, [pc, #656]	; (8009294 <problem_fetch+0x7bd0>)
 8009002:	461c      	mov	r4, r3
 8009004:	4613      	mov	r3, r2
 8009006:	cb07      	ldmia	r3!, {r0, r1, r2}
 8009008:	6020      	str	r0, [r4, #0]
 800900a:	6061      	str	r1, [r4, #4]
 800900c:	60a2      	str	r2, [r4, #8]
 800900e:	881b      	ldrh	r3, [r3, #0]
 8009010:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,7,10,13,14,17,18");
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	3304      	adds	r3, #4
 8009016:	4aa0      	ldr	r2, [pc, #640]	; (8009298 <problem_fetch+0x7bd4>)
 8009018:	461d      	mov	r5, r3
 800901a:	4614      	mov	r4, r2
 800901c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800901e:	6028      	str	r0, [r5, #0]
 8009020:	6069      	str	r1, [r5, #4]
 8009022:	60aa      	str	r2, [r5, #8]
 8009024:	60eb      	str	r3, [r5, #12]
 8009026:	8823      	ldrh	r3, [r4, #0]
 8009028:	78a2      	ldrb	r2, [r4, #2]
 800902a:	822b      	strh	r3, [r5, #16]
 800902c:	4613      	mov	r3, r2
 800902e:	74ab      	strb	r3, [r5, #18]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8009036:	4a99      	ldr	r2, [pc, #612]	; (800929c <problem_fetch+0x7bd8>)
 8009038:	461c      	mov	r4, r3
 800903a:	4613      	mov	r3, r2
 800903c:	cb07      	ldmia	r3!, {r0, r1, r2}
 800903e:	6020      	str	r0, [r4, #0]
 8009040:	6061      	str	r1, [r4, #4]
 8009042:	60a2      	str	r2, [r4, #8]
 8009044:	881b      	ldrh	r3, [r3, #0]
 8009046:	81a3      	strh	r3, [r4, #12]
			break;
 8009048:	f013 ba6c 	b.w	801c524 <problem_fetch+0x1ae60>
		case 210 :
			strcpy(p->name,"ROLLING PEAS");
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8009052:	4a93      	ldr	r2, [pc, #588]	; (80092a0 <problem_fetch+0x7bdc>)
 8009054:	461c      	mov	r4, r3
 8009056:	4613      	mov	r3, r2
 8009058:	cb07      	ldmia	r3!, {r0, r1, r2}
 800905a:	6020      	str	r0, [r4, #0]
 800905c:	6061      	str	r1, [r4, #4]
 800905e:	60a2      	str	r2, [r4, #8]
 8009060:	781b      	ldrb	r3, [r3, #0]
 8009062:	7323      	strb	r3, [r4, #12]
			strcpy(p->grade,"6C");
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800906a:	4a8e      	ldr	r2, [pc, #568]	; (80092a4 <problem_fetch+0x7be0>)
 800906c:	8811      	ldrh	r1, [r2, #0]
 800906e:	7892      	ldrb	r2, [r2, #2]
 8009070:	8019      	strh	r1, [r3, #0]
 8009072:	709a      	strb	r2, [r3, #2]
			p->moveSize = 6;
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	2206      	movs	r2, #6
 8009078:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,E,H,C,D,D");
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	33a4      	adds	r3, #164	; 0xa4
 800907e:	4a8a      	ldr	r2, [pc, #552]	; (80092a8 <problem_fetch+0x7be4>)
 8009080:	461c      	mov	r4, r3
 8009082:	4613      	mov	r3, r2
 8009084:	cb07      	ldmia	r3!, {r0, r1, r2}
 8009086:	6020      	str	r0, [r4, #0]
 8009088:	6061      	str	r1, [r4, #4]
 800908a:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,6,10,13,15,18");
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	3304      	adds	r3, #4
 8009090:	4a86      	ldr	r2, [pc, #536]	; (80092ac <problem_fetch+0x7be8>)
 8009092:	461c      	mov	r4, r3
 8009094:	4615      	mov	r5, r2
 8009096:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009098:	6020      	str	r0, [r4, #0]
 800909a:	6061      	str	r1, [r4, #4]
 800909c:	60a2      	str	r2, [r4, #8]
 800909e:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,s,d,d,d,e");
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 80090a6:	4a82      	ldr	r2, [pc, #520]	; (80092b0 <problem_fetch+0x7bec>)
 80090a8:	461c      	mov	r4, r3
 80090aa:	4613      	mov	r3, r2
 80090ac:	cb07      	ldmia	r3!, {r0, r1, r2}
 80090ae:	6020      	str	r0, [r4, #0]
 80090b0:	6061      	str	r1, [r4, #4]
 80090b2:	60a2      	str	r2, [r4, #8]
			break;
 80090b4:	f013 ba36 	b.w	801c524 <problem_fetch+0x1ae60>
		case 211 :
			strcpy(p->name,"SQUASHED PEAS");
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80090be:	4a7d      	ldr	r2, [pc, #500]	; (80092b4 <problem_fetch+0x7bf0>)
 80090c0:	461c      	mov	r4, r3
 80090c2:	4613      	mov	r3, r2
 80090c4:	cb07      	ldmia	r3!, {r0, r1, r2}
 80090c6:	6020      	str	r0, [r4, #0]
 80090c8:	6061      	str	r1, [r4, #4]
 80090ca:	60a2      	str	r2, [r4, #8]
 80090cc:	881b      	ldrh	r3, [r3, #0]
 80090ce:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade,"6C+");
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80090d6:	4a6e      	ldr	r2, [pc, #440]	; (8009290 <problem_fetch+0x7bcc>)
 80090d8:	6810      	ldr	r0, [r2, #0]
 80090da:	6018      	str	r0, [r3, #0]
			p->moveSize = 8;
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	2208      	movs	r2, #8
 80090e0:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,G,I,H,I,E,G,D");
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	33a4      	adds	r3, #164	; 0xa4
 80090e6:	4a74      	ldr	r2, [pc, #464]	; (80092b8 <problem_fetch+0x7bf4>)
 80090e8:	461c      	mov	r4, r3
 80090ea:	4615      	mov	r5, r2
 80090ec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80090ee:	6020      	str	r0, [r4, #0]
 80090f0:	6061      	str	r1, [r4, #4]
 80090f2:	60a2      	str	r2, [r4, #8]
 80090f4:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,6,10,12,14,14,17,18");
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	3304      	adds	r3, #4
 80090fa:	4a70      	ldr	r2, [pc, #448]	; (80092bc <problem_fetch+0x7bf8>)
 80090fc:	461d      	mov	r5, r3
 80090fe:	4614      	mov	r4, r2
 8009100:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009102:	6028      	str	r0, [r5, #0]
 8009104:	6069      	str	r1, [r5, #4]
 8009106:	60aa      	str	r2, [r5, #8]
 8009108:	60eb      	str	r3, [r5, #12]
 800910a:	6820      	ldr	r0, [r4, #0]
 800910c:	6128      	str	r0, [r5, #16]
 800910e:	88a3      	ldrh	r3, [r4, #4]
 8009110:	82ab      	strh	r3, [r5, #20]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,e");
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8009118:	4a69      	ldr	r2, [pc, #420]	; (80092c0 <problem_fetch+0x7bfc>)
 800911a:	461c      	mov	r4, r3
 800911c:	4615      	mov	r5, r2
 800911e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009120:	6020      	str	r0, [r4, #0]
 8009122:	6061      	str	r1, [r4, #4]
 8009124:	60a2      	str	r2, [r4, #8]
 8009126:	60e3      	str	r3, [r4, #12]
			break;
 8009128:	f013 b9fc 	b.w	801c524 <problem_fetch+0x1ae60>
		case 212 :
			strcpy(p->name,"LAST PEA");
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8009132:	4964      	ldr	r1, [pc, #400]	; (80092c4 <problem_fetch+0x7c00>)
 8009134:	461a      	mov	r2, r3
 8009136:	460b      	mov	r3, r1
 8009138:	cb03      	ldmia	r3!, {r0, r1}
 800913a:	6010      	str	r0, [r2, #0]
 800913c:	6051      	str	r1, [r2, #4]
 800913e:	781b      	ldrb	r3, [r3, #0]
 8009140:	7213      	strb	r3, [r2, #8]
			strcpy(p->grade,"7A");
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8009148:	4a5f      	ldr	r2, [pc, #380]	; (80092c8 <problem_fetch+0x7c04>)
 800914a:	8811      	ldrh	r1, [r2, #0]
 800914c:	7892      	ldrb	r2, [r2, #2]
 800914e:	8019      	strh	r1, [r3, #0]
 8009150:	709a      	strb	r2, [r3, #2]
			p->moveSize = 9;
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	2209      	movs	r2, #9
 8009156:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,B,E,B,E,D,I,E,I");
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	33a4      	adds	r3, #164	; 0xa4
 800915c:	4a5b      	ldr	r2, [pc, #364]	; (80092cc <problem_fetch+0x7c08>)
 800915e:	461d      	mov	r5, r3
 8009160:	4614      	mov	r4, r2
 8009162:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009164:	6028      	str	r0, [r5, #0]
 8009166:	6069      	str	r1, [r5, #4]
 8009168:	60aa      	str	r2, [r5, #8]
 800916a:	60eb      	str	r3, [r5, #12]
 800916c:	8823      	ldrh	r3, [r4, #0]
 800916e:	822b      	strh	r3, [r5, #16]
			strcpy(p->moveNumbers,"4,6,8,10,12,11,14,16,18");
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	3304      	adds	r3, #4
 8009174:	4a56      	ldr	r2, [pc, #344]	; (80092d0 <problem_fetch+0x7c0c>)
 8009176:	461d      	mov	r5, r3
 8009178:	4614      	mov	r4, r2
 800917a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800917c:	6028      	str	r0, [r5, #0]
 800917e:	6069      	str	r1, [r5, #4]
 8009180:	60aa      	str	r2, [r5, #8]
 8009182:	60eb      	str	r3, [r5, #12]
 8009184:	cc03      	ldmia	r4!, {r0, r1}
 8009186:	6128      	str	r0, [r5, #16]
 8009188:	6169      	str	r1, [r5, #20]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,d,e");
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8009190:	4a50      	ldr	r2, [pc, #320]	; (80092d4 <problem_fetch+0x7c10>)
 8009192:	461d      	mov	r5, r3
 8009194:	4614      	mov	r4, r2
 8009196:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009198:	6028      	str	r0, [r5, #0]
 800919a:	6069      	str	r1, [r5, #4]
 800919c:	60aa      	str	r2, [r5, #8]
 800919e:	60eb      	str	r3, [r5, #12]
 80091a0:	8823      	ldrh	r3, [r4, #0]
 80091a2:	822b      	strh	r3, [r5, #16]
			break;
 80091a4:	f013 b9be 	b.w	801c524 <problem_fetch+0x1ae60>
		case 213 :
			strcpy(p->name,"DIAGO");
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80091ae:	4a4a      	ldr	r2, [pc, #296]	; (80092d8 <problem_fetch+0x7c14>)
 80091b0:	6810      	ldr	r0, [r2, #0]
 80091b2:	6018      	str	r0, [r3, #0]
 80091b4:	8892      	ldrh	r2, [r2, #4]
 80091b6:	809a      	strh	r2, [r3, #4]
			strcpy(p->grade,"7B+");
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80091be:	4a47      	ldr	r2, [pc, #284]	; (80092dc <problem_fetch+0x7c18>)
 80091c0:	6810      	ldr	r0, [r2, #0]
 80091c2:	6018      	str	r0, [r3, #0]
			p->moveSize = 8;
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	2208      	movs	r2, #8
 80091c8:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,G,G,H,E,F,D,A");
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	33a4      	adds	r3, #164	; 0xa4
 80091ce:	4a44      	ldr	r2, [pc, #272]	; (80092e0 <problem_fetch+0x7c1c>)
 80091d0:	461c      	mov	r4, r3
 80091d2:	4615      	mov	r5, r2
 80091d4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80091d6:	6020      	str	r0, [r4, #0]
 80091d8:	6061      	str	r1, [r4, #4]
 80091da:	60a2      	str	r2, [r4, #8]
 80091dc:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,4,9,8,12,11,15,18");
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	3304      	adds	r3, #4
 80091e2:	4a40      	ldr	r2, [pc, #256]	; (80092e4 <problem_fetch+0x7c20>)
 80091e4:	461d      	mov	r5, r3
 80091e6:	4614      	mov	r4, r2
 80091e8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80091ea:	6028      	str	r0, [r5, #0]
 80091ec:	6069      	str	r1, [r5, #4]
 80091ee:	60aa      	str	r2, [r5, #8]
 80091f0:	60eb      	str	r3, [r5, #12]
 80091f2:	6820      	ldr	r0, [r4, #0]
 80091f4:	6128      	str	r0, [r5, #16]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,e");
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 80091fc:	4a30      	ldr	r2, [pc, #192]	; (80092c0 <problem_fetch+0x7bfc>)
 80091fe:	461c      	mov	r4, r3
 8009200:	4615      	mov	r5, r2
 8009202:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009204:	6020      	str	r0, [r4, #0]
 8009206:	6061      	str	r1, [r4, #4]
 8009208:	60a2      	str	r2, [r4, #8]
 800920a:	60e3      	str	r3, [r4, #12]
			break;
 800920c:	f013 b98a 	b.w	801c524 <problem_fetch+0x1ae60>
		case 214 :
			strcpy(p->name,"IV");
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8009216:	4a34      	ldr	r2, [pc, #208]	; (80092e8 <problem_fetch+0x7c24>)
 8009218:	8811      	ldrh	r1, [r2, #0]
 800921a:	7892      	ldrb	r2, [r2, #2]
 800921c:	8019      	strh	r1, [r3, #0]
 800921e:	709a      	strb	r2, [r3, #2]
			strcpy(p->grade,"6B+");
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8009226:	4a31      	ldr	r2, [pc, #196]	; (80092ec <problem_fetch+0x7c28>)
 8009228:	6810      	ldr	r0, [r2, #0]
 800922a:	6018      	str	r0, [r3, #0]
			p->moveSize = 12;
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	220c      	movs	r2, #12
 8009230:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"H,C,E,E,A,A,B,A,D,C,J,C");
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	33a4      	adds	r3, #164	; 0xa4
 8009236:	4a2e      	ldr	r2, [pc, #184]	; (80092f0 <problem_fetch+0x7c2c>)
 8009238:	461d      	mov	r5, r3
 800923a:	4614      	mov	r4, r2
 800923c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800923e:	6028      	str	r0, [r5, #0]
 8009240:	6069      	str	r1, [r5, #4]
 8009242:	60aa      	str	r2, [r5, #8]
 8009244:	60eb      	str	r3, [r5, #12]
 8009246:	cc03      	ldmia	r4!, {r0, r1}
 8009248:	6128      	str	r0, [r5, #16]
 800924a:	6169      	str	r1, [r5, #20]
			strcpy(p->moveNumbers,"8,8,6,9,9,14,15,18,11,13,5,5");
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	3304      	adds	r3, #4
 8009250:	4a28      	ldr	r2, [pc, #160]	; (80092f4 <problem_fetch+0x7c30>)
 8009252:	461d      	mov	r5, r3
 8009254:	4614      	mov	r4, r2
 8009256:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009258:	6028      	str	r0, [r5, #0]
 800925a:	6069      	str	r1, [r5, #4]
 800925c:	60aa      	str	r2, [r5, #8]
 800925e:	60eb      	str	r3, [r5, #12]
 8009260:	cc07      	ldmia	r4!, {r0, r1, r2}
 8009262:	6128      	str	r0, [r5, #16]
 8009264:	6169      	str	r1, [r5, #20]
 8009266:	61aa      	str	r2, [r5, #24]
 8009268:	7823      	ldrb	r3, [r4, #0]
 800926a:	772b      	strb	r3, [r5, #28]
			strcpy(p->startFinish,"d,d,s,d,d,d,d,e,d,d,s,d");
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8009272:	4a21      	ldr	r2, [pc, #132]	; (80092f8 <problem_fetch+0x7c34>)
 8009274:	461d      	mov	r5, r3
 8009276:	4614      	mov	r4, r2
 8009278:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800927a:	6028      	str	r0, [r5, #0]
 800927c:	6069      	str	r1, [r5, #4]
 800927e:	60aa      	str	r2, [r5, #8]
 8009280:	60eb      	str	r3, [r5, #12]
 8009282:	cc03      	ldmia	r4!, {r0, r1}
 8009284:	6128      	str	r0, [r5, #16]
 8009286:	6169      	str	r1, [r5, #20]
			break;
 8009288:	f013 b94c 	b.w	801c524 <problem_fetch+0x1ae60>
 800928c:	08026224 	.word	0x08026224
 8009290:	080238ec 	.word	0x080238ec
 8009294:	0802622c 	.word	0x0802622c
 8009298:	0802623c 	.word	0x0802623c
 800929c:	080239dc 	.word	0x080239dc
 80092a0:	08026250 	.word	0x08026250
 80092a4:	08023920 	.word	0x08023920
 80092a8:	08026260 	.word	0x08026260
 80092ac:	0802626c 	.word	0x0802626c
 80092b0:	08023834 	.word	0x08023834
 80092b4:	0802627c 	.word	0x0802627c
 80092b8:	0802628c 	.word	0x0802628c
 80092bc:	0802629c 	.word	0x0802629c
 80092c0:	08023978 	.word	0x08023978
 80092c4:	080262b4 	.word	0x080262b4
 80092c8:	08023814 	.word	0x08023814
 80092cc:	080262c0 	.word	0x080262c0
 80092d0:	080262d4 	.word	0x080262d4
 80092d4:	08024838 	.word	0x08024838
 80092d8:	080262ec 	.word	0x080262ec
 80092dc:	08023990 	.word	0x08023990
 80092e0:	080262f4 	.word	0x080262f4
 80092e4:	08026304 	.word	0x08026304
 80092e8:	08026318 	.word	0x08026318
 80092ec:	08023854 	.word	0x08023854
 80092f0:	0802631c 	.word	0x0802631c
 80092f4:	08026334 	.word	0x08026334
 80092f8:	08026354 	.word	0x08026354
		case 215 :
			strcpy(p->name,"III");
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8009302:	4aba      	ldr	r2, [pc, #744]	; (80095ec <problem_fetch+0x7f28>)
 8009304:	6810      	ldr	r0, [r2, #0]
 8009306:	6018      	str	r0, [r3, #0]
			strcpy(p->grade,"6B+");
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800930e:	4ab8      	ldr	r2, [pc, #736]	; (80095f0 <problem_fetch+0x7f2c>)
 8009310:	6810      	ldr	r0, [r2, #0]
 8009312:	6018      	str	r0, [r3, #0]
			p->moveSize = 14;
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	220e      	movs	r2, #14
 8009318:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,E,D,G,E,C,B,C,H,H,H,K,J,J");
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	33a4      	adds	r3, #164	; 0xa4
 800931e:	4ab5      	ldr	r2, [pc, #724]	; (80095f4 <problem_fetch+0x7f30>)
 8009320:	461d      	mov	r5, r3
 8009322:	4614      	mov	r4, r2
 8009324:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009326:	6028      	str	r0, [r5, #0]
 8009328:	6069      	str	r1, [r5, #4]
 800932a:	60aa      	str	r2, [r5, #8]
 800932c:	60eb      	str	r3, [r5, #12]
 800932e:	cc07      	ldmia	r4!, {r0, r1, r2}
 8009330:	6128      	str	r0, [r5, #16]
 8009332:	6169      	str	r1, [r5, #20]
 8009334:	61aa      	str	r2, [r5, #24]
			strcpy(p->moveNumbers,"16,16,18,9,8,8,6,5,10,16,12,14,12,7");
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	3304      	adds	r3, #4
 800933a:	4aaf      	ldr	r2, [pc, #700]	; (80095f8 <problem_fetch+0x7f34>)
 800933c:	4614      	mov	r4, r2
 800933e:	469c      	mov	ip, r3
 8009340:	f104 0e20 	add.w	lr, r4, #32
 8009344:	4665      	mov	r5, ip
 8009346:	4626      	mov	r6, r4
 8009348:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800934a:	6028      	str	r0, [r5, #0]
 800934c:	6069      	str	r1, [r5, #4]
 800934e:	60aa      	str	r2, [r5, #8]
 8009350:	60eb      	str	r3, [r5, #12]
 8009352:	3410      	adds	r4, #16
 8009354:	f10c 0c10 	add.w	ip, ip, #16
 8009358:	4574      	cmp	r4, lr
 800935a:	d1f3      	bne.n	8009344 <problem_fetch+0x7c80>
 800935c:	4663      	mov	r3, ip
 800935e:	4622      	mov	r2, r4
 8009360:	6810      	ldr	r0, [r2, #0]
 8009362:	6018      	str	r0, [r3, #0]
			strcpy(p->startFinish,"d,d,e,d,d,d,s,s,d,d,d,d,d,d");
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800936a:	4aa4      	ldr	r2, [pc, #656]	; (80095fc <problem_fetch+0x7f38>)
 800936c:	461d      	mov	r5, r3
 800936e:	4614      	mov	r4, r2
 8009370:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009372:	6028      	str	r0, [r5, #0]
 8009374:	6069      	str	r1, [r5, #4]
 8009376:	60aa      	str	r2, [r5, #8]
 8009378:	60eb      	str	r3, [r5, #12]
 800937a:	cc07      	ldmia	r4!, {r0, r1, r2}
 800937c:	6128      	str	r0, [r5, #16]
 800937e:	6169      	str	r1, [r5, #20]
 8009380:	61aa      	str	r2, [r5, #24]
			break;
 8009382:	f013 b8cf 	b.w	801c524 <problem_fetch+0x1ae60>
		case 216 :
			strcpy(p->name,"I");
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800938c:	499c      	ldr	r1, [pc, #624]	; (8009600 <problem_fetch+0x7f3c>)
 800938e:	461a      	mov	r2, r3
 8009390:	460b      	mov	r3, r1
 8009392:	881b      	ldrh	r3, [r3, #0]
 8009394:	8013      	strh	r3, [r2, #0]
			strcpy(p->grade,"6B+");
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800939c:	4a94      	ldr	r2, [pc, #592]	; (80095f0 <problem_fetch+0x7f2c>)
 800939e:	6810      	ldr	r0, [r2, #0]
 80093a0:	6018      	str	r0, [r3, #0]
			p->moveSize = 14;
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	220e      	movs	r2, #14
 80093a6:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,E,H,J,G,G,J,J,I,I,E,H,E,D");
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	33a4      	adds	r3, #164	; 0xa4
 80093ac:	4a95      	ldr	r2, [pc, #596]	; (8009604 <problem_fetch+0x7f40>)
 80093ae:	461d      	mov	r5, r3
 80093b0:	4614      	mov	r4, r2
 80093b2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80093b4:	6028      	str	r0, [r5, #0]
 80093b6:	6069      	str	r1, [r5, #4]
 80093b8:	60aa      	str	r2, [r5, #8]
 80093ba:	60eb      	str	r3, [r5, #12]
 80093bc:	cc07      	ldmia	r4!, {r0, r1, r2}
 80093be:	6128      	str	r0, [r5, #16]
 80093c0:	6169      	str	r1, [r5, #20]
 80093c2:	61aa      	str	r2, [r5, #24]
			strcpy(p->moveNumbers,"14,14,12,12,4,9,7,5,7,9,8,5,16,18");
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	3304      	adds	r3, #4
 80093c8:	4a8f      	ldr	r2, [pc, #572]	; (8009608 <problem_fetch+0x7f44>)
 80093ca:	4614      	mov	r4, r2
 80093cc:	469c      	mov	ip, r3
 80093ce:	f104 0e20 	add.w	lr, r4, #32
 80093d2:	4665      	mov	r5, ip
 80093d4:	4626      	mov	r6, r4
 80093d6:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80093d8:	6028      	str	r0, [r5, #0]
 80093da:	6069      	str	r1, [r5, #4]
 80093dc:	60aa      	str	r2, [r5, #8]
 80093de:	60eb      	str	r3, [r5, #12]
 80093e0:	3410      	adds	r4, #16
 80093e2:	f10c 0c10 	add.w	ip, ip, #16
 80093e6:	4574      	cmp	r4, lr
 80093e8:	d1f3      	bne.n	80093d2 <problem_fetch+0x7d0e>
 80093ea:	4662      	mov	r2, ip
 80093ec:	4623      	mov	r3, r4
 80093ee:	881b      	ldrh	r3, [r3, #0]
 80093f0:	8013      	strh	r3, [r2, #0]
			strcpy(p->startFinish,"d,d,d,d,s,d,d,d,d,d,d,d,d,e");
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 80093f8:	4a84      	ldr	r2, [pc, #528]	; (800960c <problem_fetch+0x7f48>)
 80093fa:	461d      	mov	r5, r3
 80093fc:	4614      	mov	r4, r2
 80093fe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009400:	6028      	str	r0, [r5, #0]
 8009402:	6069      	str	r1, [r5, #4]
 8009404:	60aa      	str	r2, [r5, #8]
 8009406:	60eb      	str	r3, [r5, #12]
 8009408:	cc07      	ldmia	r4!, {r0, r1, r2}
 800940a:	6128      	str	r0, [r5, #16]
 800940c:	6169      	str	r1, [r5, #20]
 800940e:	61aa      	str	r2, [r5, #24]
			break;
 8009410:	f013 b888 	b.w	801c524 <problem_fetch+0x1ae60>
		case 217 :
			strcpy(p->name,"NEW");
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800941a:	4a7d      	ldr	r2, [pc, #500]	; (8009610 <problem_fetch+0x7f4c>)
 800941c:	6810      	ldr	r0, [r2, #0]
 800941e:	6018      	str	r0, [r3, #0]
			strcpy(p->grade,"6B+");
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8009426:	4a72      	ldr	r2, [pc, #456]	; (80095f0 <problem_fetch+0x7f2c>)
 8009428:	6810      	ldr	r0, [r2, #0]
 800942a:	6018      	str	r0, [r3, #0]
			p->moveSize = 14;
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	220e      	movs	r2, #14
 8009430:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,H,G,I,H,G,H,I,H,H,I,I,I,J");
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	33a4      	adds	r3, #164	; 0xa4
 8009436:	4a77      	ldr	r2, [pc, #476]	; (8009614 <problem_fetch+0x7f50>)
 8009438:	461d      	mov	r5, r3
 800943a:	4614      	mov	r4, r2
 800943c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800943e:	6028      	str	r0, [r5, #0]
 8009440:	6069      	str	r1, [r5, #4]
 8009442:	60aa      	str	r2, [r5, #8]
 8009444:	60eb      	str	r3, [r5, #12]
 8009446:	cc07      	ldmia	r4!, {r0, r1, r2}
 8009448:	6128      	str	r0, [r5, #16]
 800944a:	6169      	str	r1, [r5, #20]
 800944c:	61aa      	str	r2, [r5, #24]
			strcpy(p->moveNumbers,"4,5,6,7,8,9,10,10,12,13,14,15,18,16");
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	3304      	adds	r3, #4
 8009452:	4a71      	ldr	r2, [pc, #452]	; (8009618 <problem_fetch+0x7f54>)
 8009454:	4614      	mov	r4, r2
 8009456:	469c      	mov	ip, r3
 8009458:	f104 0e20 	add.w	lr, r4, #32
 800945c:	4665      	mov	r5, ip
 800945e:	4626      	mov	r6, r4
 8009460:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8009462:	6028      	str	r0, [r5, #0]
 8009464:	6069      	str	r1, [r5, #4]
 8009466:	60aa      	str	r2, [r5, #8]
 8009468:	60eb      	str	r3, [r5, #12]
 800946a:	3410      	adds	r4, #16
 800946c:	f10c 0c10 	add.w	ip, ip, #16
 8009470:	4574      	cmp	r4, lr
 8009472:	d1f3      	bne.n	800945c <problem_fetch+0x7d98>
 8009474:	4663      	mov	r3, ip
 8009476:	4622      	mov	r2, r4
 8009478:	6810      	ldr	r0, [r2, #0]
 800947a:	6018      	str	r0, [r3, #0]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,d,d,d,d,d,e,d");
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8009482:	4a66      	ldr	r2, [pc, #408]	; (800961c <problem_fetch+0x7f58>)
 8009484:	461d      	mov	r5, r3
 8009486:	4614      	mov	r4, r2
 8009488:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800948a:	6028      	str	r0, [r5, #0]
 800948c:	6069      	str	r1, [r5, #4]
 800948e:	60aa      	str	r2, [r5, #8]
 8009490:	60eb      	str	r3, [r5, #12]
 8009492:	cc07      	ldmia	r4!, {r0, r1, r2}
 8009494:	6128      	str	r0, [r5, #16]
 8009496:	6169      	str	r1, [r5, #20]
 8009498:	61aa      	str	r2, [r5, #24]
			break;
 800949a:	f013 b843 	b.w	801c524 <problem_fetch+0x1ae60>
		case 218 :
			strcpy(p->name,"THE BLACK");
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80094a4:	495e      	ldr	r1, [pc, #376]	; (8009620 <problem_fetch+0x7f5c>)
 80094a6:	461a      	mov	r2, r3
 80094a8:	460b      	mov	r3, r1
 80094aa:	cb03      	ldmia	r3!, {r0, r1}
 80094ac:	6010      	str	r0, [r2, #0]
 80094ae:	6051      	str	r1, [r2, #4]
 80094b0:	881b      	ldrh	r3, [r3, #0]
 80094b2:	8113      	strh	r3, [r2, #8]
			strcpy(p->grade,"7A+");
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80094ba:	4a5a      	ldr	r2, [pc, #360]	; (8009624 <problem_fetch+0x7f60>)
 80094bc:	6810      	ldr	r0, [r2, #0]
 80094be:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	2207      	movs	r2, #7
 80094c4:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,D,B,C,H,K,I");
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	33a4      	adds	r3, #164	; 0xa4
 80094ca:	4a57      	ldr	r2, [pc, #348]	; (8009628 <problem_fetch+0x7f64>)
 80094cc:	461c      	mov	r4, r3
 80094ce:	4613      	mov	r3, r2
 80094d0:	cb07      	ldmia	r3!, {r0, r1, r2}
 80094d2:	6020      	str	r0, [r4, #0]
 80094d4:	6061      	str	r1, [r4, #4]
 80094d6:	60a2      	str	r2, [r4, #8]
 80094d8:	881b      	ldrh	r3, [r3, #0]
 80094da:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,7,10,13,13,16,18");
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	3304      	adds	r3, #4
 80094e0:	4a52      	ldr	r2, [pc, #328]	; (800962c <problem_fetch+0x7f68>)
 80094e2:	461d      	mov	r5, r3
 80094e4:	4614      	mov	r4, r2
 80094e6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80094e8:	6028      	str	r0, [r5, #0]
 80094ea:	6069      	str	r1, [r5, #4]
 80094ec:	60aa      	str	r2, [r5, #8]
 80094ee:	60eb      	str	r3, [r5, #12]
 80094f0:	8823      	ldrh	r3, [r4, #0]
 80094f2:	78a2      	ldrb	r2, [r4, #2]
 80094f4:	822b      	strh	r3, [r5, #16]
 80094f6:	4613      	mov	r3, r2
 80094f8:	74ab      	strb	r3, [r5, #18]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8009500:	4a4b      	ldr	r2, [pc, #300]	; (8009630 <problem_fetch+0x7f6c>)
 8009502:	461c      	mov	r4, r3
 8009504:	4613      	mov	r3, r2
 8009506:	cb07      	ldmia	r3!, {r0, r1, r2}
 8009508:	6020      	str	r0, [r4, #0]
 800950a:	6061      	str	r1, [r4, #4]
 800950c:	60a2      	str	r2, [r4, #8]
 800950e:	881b      	ldrh	r3, [r3, #0]
 8009510:	81a3      	strh	r3, [r4, #12]
			break;
 8009512:	f013 b807 	b.w	801c524 <problem_fetch+0x1ae60>
		case 219 :
			strcpy(p->name,"KLIK IT");
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800951c:	4945      	ldr	r1, [pc, #276]	; (8009634 <problem_fetch+0x7f70>)
 800951e:	461a      	mov	r2, r3
 8009520:	460b      	mov	r3, r1
 8009522:	cb03      	ldmia	r3!, {r0, r1}
 8009524:	6010      	str	r0, [r2, #0]
 8009526:	6051      	str	r1, [r2, #4]
			strcpy(p->grade,"7C");
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800952e:	4a42      	ldr	r2, [pc, #264]	; (8009638 <problem_fetch+0x7f74>)
 8009530:	8811      	ldrh	r1, [r2, #0]
 8009532:	7892      	ldrb	r2, [r2, #2]
 8009534:	8019      	strh	r1, [r3, #0]
 8009536:	709a      	strb	r2, [r3, #2]
			p->moveSize = 5;
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	2205      	movs	r2, #5
 800953c:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,C,F,A,D");
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	33a4      	adds	r3, #164	; 0xa4
 8009542:	493e      	ldr	r1, [pc, #248]	; (800963c <problem_fetch+0x7f78>)
 8009544:	461a      	mov	r2, r3
 8009546:	460b      	mov	r3, r1
 8009548:	cb03      	ldmia	r3!, {r0, r1}
 800954a:	6010      	str	r0, [r2, #0]
 800954c:	6051      	str	r1, [r2, #4]
 800954e:	881b      	ldrh	r3, [r3, #0]
 8009550:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"4,8,11,14,18");
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	3304      	adds	r3, #4
 8009556:	4a3a      	ldr	r2, [pc, #232]	; (8009640 <problem_fetch+0x7f7c>)
 8009558:	461c      	mov	r4, r3
 800955a:	4613      	mov	r3, r2
 800955c:	cb07      	ldmia	r3!, {r0, r1, r2}
 800955e:	6020      	str	r0, [r4, #0]
 8009560:	6061      	str	r1, [r4, #4]
 8009562:	60a2      	str	r2, [r4, #8]
 8009564:	781b      	ldrb	r3, [r3, #0]
 8009566:	7323      	strb	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,e");
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800956e:	4935      	ldr	r1, [pc, #212]	; (8009644 <problem_fetch+0x7f80>)
 8009570:	461a      	mov	r2, r3
 8009572:	460b      	mov	r3, r1
 8009574:	cb03      	ldmia	r3!, {r0, r1}
 8009576:	6010      	str	r0, [r2, #0]
 8009578:	6051      	str	r1, [r2, #4]
 800957a:	881b      	ldrh	r3, [r3, #0]
 800957c:	8113      	strh	r3, [r2, #8]
			break;
 800957e:	f012 bfd1 	b.w	801c524 <problem_fetch+0x1ae60>
		case 220 :
			strcpy(p->name,"SOFA 3");
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8009588:	4a2f      	ldr	r2, [pc, #188]	; (8009648 <problem_fetch+0x7f84>)
 800958a:	6810      	ldr	r0, [r2, #0]
 800958c:	6018      	str	r0, [r3, #0]
 800958e:	8891      	ldrh	r1, [r2, #4]
 8009590:	7992      	ldrb	r2, [r2, #6]
 8009592:	8099      	strh	r1, [r3, #4]
 8009594:	719a      	strb	r2, [r3, #6]
			strcpy(p->grade,"7B+");
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800959c:	4a2b      	ldr	r2, [pc, #172]	; (800964c <problem_fetch+0x7f88>)
 800959e:	6810      	ldr	r0, [r2, #0]
 80095a0:	6018      	str	r0, [r3, #0]
			p->moveSize = 5;
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	2205      	movs	r2, #5
 80095a6:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"B,G,H,J,I");
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	33a4      	adds	r3, #164	; 0xa4
 80095ac:	4928      	ldr	r1, [pc, #160]	; (8009650 <problem_fetch+0x7f8c>)
 80095ae:	461a      	mov	r2, r3
 80095b0:	460b      	mov	r3, r1
 80095b2:	cb03      	ldmia	r3!, {r0, r1}
 80095b4:	6010      	str	r0, [r2, #0]
 80095b6:	6051      	str	r1, [r2, #4]
 80095b8:	881b      	ldrh	r3, [r3, #0]
 80095ba:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"6,9,12,13,18");
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	3304      	adds	r3, #4
 80095c0:	4a24      	ldr	r2, [pc, #144]	; (8009654 <problem_fetch+0x7f90>)
 80095c2:	461c      	mov	r4, r3
 80095c4:	4613      	mov	r3, r2
 80095c6:	cb07      	ldmia	r3!, {r0, r1, r2}
 80095c8:	6020      	str	r0, [r4, #0]
 80095ca:	6061      	str	r1, [r4, #4]
 80095cc:	60a2      	str	r2, [r4, #8]
 80095ce:	781b      	ldrb	r3, [r3, #0]
 80095d0:	7323      	strb	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,e");
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 80095d8:	491a      	ldr	r1, [pc, #104]	; (8009644 <problem_fetch+0x7f80>)
 80095da:	461a      	mov	r2, r3
 80095dc:	460b      	mov	r3, r1
 80095de:	cb03      	ldmia	r3!, {r0, r1}
 80095e0:	6010      	str	r0, [r2, #0]
 80095e2:	6051      	str	r1, [r2, #4]
 80095e4:	881b      	ldrh	r3, [r3, #0]
 80095e6:	8113      	strh	r3, [r2, #8]
			break;
 80095e8:	f012 bf9c 	b.w	801c524 <problem_fetch+0x1ae60>
 80095ec:	0802636c 	.word	0x0802636c
 80095f0:	08023854 	.word	0x08023854
 80095f4:	08026370 	.word	0x08026370
 80095f8:	0802638c 	.word	0x0802638c
 80095fc:	080263b0 	.word	0x080263b0
 8009600:	080263cc 	.word	0x080263cc
 8009604:	080263d0 	.word	0x080263d0
 8009608:	080263ec 	.word	0x080263ec
 800960c:	08026410 	.word	0x08026410
 8009610:	0802642c 	.word	0x0802642c
 8009614:	08026430 	.word	0x08026430
 8009618:	0802644c 	.word	0x0802644c
 800961c:	08026470 	.word	0x08026470
 8009620:	0802648c 	.word	0x0802648c
 8009624:	080239f4 	.word	0x080239f4
 8009628:	08026498 	.word	0x08026498
 800962c:	08025568 	.word	0x08025568
 8009630:	080239dc 	.word	0x080239dc
 8009634:	080264a8 	.word	0x080264a8
 8009638:	08024088 	.word	0x08024088
 800963c:	080264b0 	.word	0x080264b0
 8009640:	08024f88 	.word	0x08024f88
 8009644:	08023d20 	.word	0x08023d20
 8009648:	080264bc 	.word	0x080264bc
 800964c:	08023990 	.word	0x08023990
 8009650:	080264c4 	.word	0x080264c4
 8009654:	080264d0 	.word	0x080264d0
		case 221 :
			strcpy(p->name,"ET");
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800965e:	4aad      	ldr	r2, [pc, #692]	; (8009914 <problem_fetch+0x8250>)
 8009660:	8811      	ldrh	r1, [r2, #0]
 8009662:	7892      	ldrb	r2, [r2, #2]
 8009664:	8019      	strh	r1, [r3, #0]
 8009666:	709a      	strb	r2, [r3, #2]
			strcpy(p->grade,"6C");
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800966e:	4aaa      	ldr	r2, [pc, #680]	; (8009918 <problem_fetch+0x8254>)
 8009670:	8811      	ldrh	r1, [r2, #0]
 8009672:	7892      	ldrb	r2, [r2, #2]
 8009674:	8019      	strh	r1, [r3, #0]
 8009676:	709a      	strb	r2, [r3, #2]
			p->moveSize = 7;
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	2207      	movs	r2, #7
 800967c:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,E,E,B,E,E,I");
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	33a4      	adds	r3, #164	; 0xa4
 8009682:	4aa6      	ldr	r2, [pc, #664]	; (800991c <problem_fetch+0x8258>)
 8009684:	461c      	mov	r4, r3
 8009686:	4613      	mov	r3, r2
 8009688:	cb07      	ldmia	r3!, {r0, r1, r2}
 800968a:	6020      	str	r0, [r4, #0]
 800968c:	6061      	str	r1, [r4, #4]
 800968e:	60a2      	str	r2, [r4, #8]
 8009690:	881b      	ldrh	r3, [r3, #0]
 8009692:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,6,8,10,12,16,18");
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	3304      	adds	r3, #4
 8009698:	4aa1      	ldr	r2, [pc, #644]	; (8009920 <problem_fetch+0x825c>)
 800969a:	461d      	mov	r5, r3
 800969c:	4614      	mov	r4, r2
 800969e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80096a0:	6028      	str	r0, [r5, #0]
 80096a2:	6069      	str	r1, [r5, #4]
 80096a4:	60aa      	str	r2, [r5, #8]
 80096a6:	60eb      	str	r3, [r5, #12]
 80096a8:	8823      	ldrh	r3, [r4, #0]
 80096aa:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 80096b2:	4a9c      	ldr	r2, [pc, #624]	; (8009924 <problem_fetch+0x8260>)
 80096b4:	461c      	mov	r4, r3
 80096b6:	4613      	mov	r3, r2
 80096b8:	cb07      	ldmia	r3!, {r0, r1, r2}
 80096ba:	6020      	str	r0, [r4, #0]
 80096bc:	6061      	str	r1, [r4, #4]
 80096be:	60a2      	str	r2, [r4, #8]
 80096c0:	881b      	ldrh	r3, [r3, #0]
 80096c2:	81a3      	strh	r3, [r4, #12]
			break;
 80096c4:	f012 bf2e 	b.w	801c524 <problem_fetch+0x1ae60>
		case 222 :
			strcpy(p->name,"THE WALL 1");
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80096ce:	4996      	ldr	r1, [pc, #600]	; (8009928 <problem_fetch+0x8264>)
 80096d0:	461a      	mov	r2, r3
 80096d2:	460b      	mov	r3, r1
 80096d4:	cb03      	ldmia	r3!, {r0, r1}
 80096d6:	6010      	str	r0, [r2, #0]
 80096d8:	6051      	str	r1, [r2, #4]
 80096da:	8819      	ldrh	r1, [r3, #0]
 80096dc:	789b      	ldrb	r3, [r3, #2]
 80096de:	8111      	strh	r1, [r2, #8]
 80096e0:	7293      	strb	r3, [r2, #10]
			strcpy(p->grade,"6C");
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80096e8:	4a8b      	ldr	r2, [pc, #556]	; (8009918 <problem_fetch+0x8254>)
 80096ea:	8811      	ldrh	r1, [r2, #0]
 80096ec:	7892      	ldrb	r2, [r2, #2]
 80096ee:	8019      	strh	r1, [r3, #0]
 80096f0:	709a      	strb	r2, [r3, #2]
			p->moveSize = 9;
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	2209      	movs	r2, #9
 80096f6:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"B,G,G,B,F,F,I,E,I");
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	33a4      	adds	r3, #164	; 0xa4
 80096fc:	4a8b      	ldr	r2, [pc, #556]	; (800992c <problem_fetch+0x8268>)
 80096fe:	461d      	mov	r5, r3
 8009700:	4614      	mov	r4, r2
 8009702:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009704:	6028      	str	r0, [r5, #0]
 8009706:	6069      	str	r1, [r5, #4]
 8009708:	60aa      	str	r2, [r5, #8]
 800970a:	60eb      	str	r3, [r5, #12]
 800970c:	8823      	ldrh	r3, [r4, #0]
 800970e:	822b      	strh	r3, [r5, #16]
			strcpy(p->moveNumbers,"6,4,9,10,11,13,14,16,18");
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	3304      	adds	r3, #4
 8009714:	4a86      	ldr	r2, [pc, #536]	; (8009930 <problem_fetch+0x826c>)
 8009716:	461d      	mov	r5, r3
 8009718:	4614      	mov	r4, r2
 800971a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800971c:	6028      	str	r0, [r5, #0]
 800971e:	6069      	str	r1, [r5, #4]
 8009720:	60aa      	str	r2, [r5, #8]
 8009722:	60eb      	str	r3, [r5, #12]
 8009724:	cc03      	ldmia	r4!, {r0, r1}
 8009726:	6128      	str	r0, [r5, #16]
 8009728:	6169      	str	r1, [r5, #20]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,d,e");
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8009730:	4a80      	ldr	r2, [pc, #512]	; (8009934 <problem_fetch+0x8270>)
 8009732:	461d      	mov	r5, r3
 8009734:	4614      	mov	r4, r2
 8009736:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009738:	6028      	str	r0, [r5, #0]
 800973a:	6069      	str	r1, [r5, #4]
 800973c:	60aa      	str	r2, [r5, #8]
 800973e:	60eb      	str	r3, [r5, #12]
 8009740:	8823      	ldrh	r3, [r4, #0]
 8009742:	822b      	strh	r3, [r5, #16]
			break;
 8009744:	f012 beee 	b.w	801c524 <problem_fetch+0x1ae60>
		case 223 :
			strcpy(p->name,"OACHKAZL");
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800974e:	497a      	ldr	r1, [pc, #488]	; (8009938 <problem_fetch+0x8274>)
 8009750:	461a      	mov	r2, r3
 8009752:	460b      	mov	r3, r1
 8009754:	cb03      	ldmia	r3!, {r0, r1}
 8009756:	6010      	str	r0, [r2, #0]
 8009758:	6051      	str	r1, [r2, #4]
 800975a:	781b      	ldrb	r3, [r3, #0]
 800975c:	7213      	strb	r3, [r2, #8]
			strcpy(p->grade,"7A+");
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8009764:	4a75      	ldr	r2, [pc, #468]	; (800993c <problem_fetch+0x8278>)
 8009766:	6810      	ldr	r0, [r2, #0]
 8009768:	6018      	str	r0, [r3, #0]
			p->moveSize = 8;
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	2208      	movs	r2, #8
 800976e:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,H,G,B,C,D,D,C");
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	33a4      	adds	r3, #164	; 0xa4
 8009774:	4a72      	ldr	r2, [pc, #456]	; (8009940 <problem_fetch+0x827c>)
 8009776:	461c      	mov	r4, r3
 8009778:	4615      	mov	r5, r2
 800977a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800977c:	6020      	str	r0, [r4, #0]
 800977e:	6061      	str	r1, [r4, #4]
 8009780:	60a2      	str	r2, [r4, #8]
 8009782:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,8,9,12,16,18,15,8");
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	3304      	adds	r3, #4
 8009788:	4a6e      	ldr	r2, [pc, #440]	; (8009944 <problem_fetch+0x8280>)
 800978a:	461d      	mov	r5, r3
 800978c:	4614      	mov	r4, r2
 800978e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009790:	6028      	str	r0, [r5, #0]
 8009792:	6069      	str	r1, [r5, #4]
 8009794:	60aa      	str	r2, [r5, #8]
 8009796:	60eb      	str	r3, [r5, #12]
 8009798:	6820      	ldr	r0, [r4, #0]
 800979a:	6128      	str	r0, [r5, #16]
			strcpy(p->startFinish,"s,d,d,d,d,e,d,d");
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 80097a2:	4a69      	ldr	r2, [pc, #420]	; (8009948 <problem_fetch+0x8284>)
 80097a4:	461c      	mov	r4, r3
 80097a6:	4615      	mov	r5, r2
 80097a8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80097aa:	6020      	str	r0, [r4, #0]
 80097ac:	6061      	str	r1, [r4, #4]
 80097ae:	60a2      	str	r2, [r4, #8]
 80097b0:	60e3      	str	r3, [r4, #12]
			break;
 80097b2:	f012 beb7 	b.w	801c524 <problem_fetch+0x1ae60>
		case 224 :
			strcpy(p->name,"LA BANDA DEL PATIO");
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80097bc:	4a63      	ldr	r2, [pc, #396]	; (800994c <problem_fetch+0x8288>)
 80097be:	461d      	mov	r5, r3
 80097c0:	4614      	mov	r4, r2
 80097c2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80097c4:	6028      	str	r0, [r5, #0]
 80097c6:	6069      	str	r1, [r5, #4]
 80097c8:	60aa      	str	r2, [r5, #8]
 80097ca:	60eb      	str	r3, [r5, #12]
 80097cc:	8823      	ldrh	r3, [r4, #0]
 80097ce:	78a2      	ldrb	r2, [r4, #2]
 80097d0:	822b      	strh	r3, [r5, #16]
 80097d2:	4613      	mov	r3, r2
 80097d4:	74ab      	strb	r3, [r5, #18]
			strcpy(p->grade,"6B+");
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80097dc:	4a5c      	ldr	r2, [pc, #368]	; (8009950 <problem_fetch+0x828c>)
 80097de:	6810      	ldr	r0, [r2, #0]
 80097e0:	6018      	str	r0, [r3, #0]
			p->moveSize = 8;
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	2208      	movs	r2, #8
 80097e6:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,J,G,C,B,E,A,D");
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	33a4      	adds	r3, #164	; 0xa4
 80097ec:	4a59      	ldr	r2, [pc, #356]	; (8009954 <problem_fetch+0x8290>)
 80097ee:	461c      	mov	r4, r3
 80097f0:	4615      	mov	r5, r2
 80097f2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80097f4:	6020      	str	r0, [r4, #0]
 80097f6:	6061      	str	r1, [r4, #4]
 80097f8:	60a2      	str	r2, [r4, #8]
 80097fa:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,5,9,8,12,12,14,18");
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	3304      	adds	r3, #4
 8009800:	4a55      	ldr	r2, [pc, #340]	; (8009958 <problem_fetch+0x8294>)
 8009802:	461d      	mov	r5, r3
 8009804:	4614      	mov	r4, r2
 8009806:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009808:	6028      	str	r0, [r5, #0]
 800980a:	6069      	str	r1, [r5, #4]
 800980c:	60aa      	str	r2, [r5, #8]
 800980e:	60eb      	str	r3, [r5, #12]
 8009810:	6820      	ldr	r0, [r4, #0]
 8009812:	6128      	str	r0, [r5, #16]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,e");
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800981a:	4a50      	ldr	r2, [pc, #320]	; (800995c <problem_fetch+0x8298>)
 800981c:	461c      	mov	r4, r3
 800981e:	4615      	mov	r5, r2
 8009820:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009822:	6020      	str	r0, [r4, #0]
 8009824:	6061      	str	r1, [r4, #4]
 8009826:	60a2      	str	r2, [r4, #8]
 8009828:	60e3      	str	r3, [r4, #12]
			break;
 800982a:	f012 be7b 	b.w	801c524 <problem_fetch+0x1ae60>
		case 225 :
			strcpy(p->name,"GLUTAMATO MONOSODICO");
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8009834:	4a4a      	ldr	r2, [pc, #296]	; (8009960 <problem_fetch+0x829c>)
 8009836:	461d      	mov	r5, r3
 8009838:	4614      	mov	r4, r2
 800983a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800983c:	6028      	str	r0, [r5, #0]
 800983e:	6069      	str	r1, [r5, #4]
 8009840:	60aa      	str	r2, [r5, #8]
 8009842:	60eb      	str	r3, [r5, #12]
 8009844:	6820      	ldr	r0, [r4, #0]
 8009846:	6128      	str	r0, [r5, #16]
 8009848:	7923      	ldrb	r3, [r4, #4]
 800984a:	752b      	strb	r3, [r5, #20]
			strcpy(p->grade,"6B+");
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8009852:	4a3f      	ldr	r2, [pc, #252]	; (8009950 <problem_fetch+0x828c>)
 8009854:	6810      	ldr	r0, [r2, #0]
 8009856:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	2207      	movs	r2, #7
 800985c:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,G,G,C,B,E,D");
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	33a4      	adds	r3, #164	; 0xa4
 8009862:	4a40      	ldr	r2, [pc, #256]	; (8009964 <problem_fetch+0x82a0>)
 8009864:	461c      	mov	r4, r3
 8009866:	4613      	mov	r3, r2
 8009868:	cb07      	ldmia	r3!, {r0, r1, r2}
 800986a:	6020      	str	r0, [r4, #0]
 800986c:	6061      	str	r1, [r4, #4]
 800986e:	60a2      	str	r2, [r4, #8]
 8009870:	881b      	ldrh	r3, [r3, #0]
 8009872:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,4,9,8,12,12,18");
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	3304      	adds	r3, #4
 8009878:	4a3b      	ldr	r2, [pc, #236]	; (8009968 <problem_fetch+0x82a4>)
 800987a:	461d      	mov	r5, r3
 800987c:	4614      	mov	r4, r2
 800987e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009880:	6028      	str	r0, [r5, #0]
 8009882:	6069      	str	r1, [r5, #4]
 8009884:	60aa      	str	r2, [r5, #8]
 8009886:	60eb      	str	r3, [r5, #12]
 8009888:	7823      	ldrb	r3, [r4, #0]
 800988a:	742b      	strb	r3, [r5, #16]
			strcpy(p->startFinish,"s,s,d,d,d,d,e");
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8009892:	4a36      	ldr	r2, [pc, #216]	; (800996c <problem_fetch+0x82a8>)
 8009894:	461c      	mov	r4, r3
 8009896:	4613      	mov	r3, r2
 8009898:	cb07      	ldmia	r3!, {r0, r1, r2}
 800989a:	6020      	str	r0, [r4, #0]
 800989c:	6061      	str	r1, [r4, #4]
 800989e:	60a2      	str	r2, [r4, #8]
 80098a0:	881b      	ldrh	r3, [r3, #0]
 80098a2:	81a3      	strh	r3, [r4, #12]
			break;
 80098a4:	f012 be3e 	b.w	801c524 <problem_fetch+0x1ae60>
		case 226 :
			strcpy(p->name,"LOST DAY");
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80098ae:	4930      	ldr	r1, [pc, #192]	; (8009970 <problem_fetch+0x82ac>)
 80098b0:	461a      	mov	r2, r3
 80098b2:	460b      	mov	r3, r1
 80098b4:	cb03      	ldmia	r3!, {r0, r1}
 80098b6:	6010      	str	r0, [r2, #0]
 80098b8:	6051      	str	r1, [r2, #4]
 80098ba:	781b      	ldrb	r3, [r3, #0]
 80098bc:	7213      	strb	r3, [r2, #8]
			strcpy(p->grade,"6C");
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80098c4:	4a14      	ldr	r2, [pc, #80]	; (8009918 <problem_fetch+0x8254>)
 80098c6:	8811      	ldrh	r1, [r2, #0]
 80098c8:	7892      	ldrb	r2, [r2, #2]
 80098ca:	8019      	strh	r1, [r3, #0]
 80098cc:	709a      	strb	r2, [r3, #2]
			p->moveSize = 6;
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	2206      	movs	r2, #6
 80098d2:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"E,J,H,C,D,D");
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	33a4      	adds	r3, #164	; 0xa4
 80098d8:	4a26      	ldr	r2, [pc, #152]	; (8009974 <problem_fetch+0x82b0>)
 80098da:	461c      	mov	r4, r3
 80098dc:	4613      	mov	r3, r2
 80098de:	cb07      	ldmia	r3!, {r0, r1, r2}
 80098e0:	6020      	str	r0, [r4, #0]
 80098e2:	6061      	str	r1, [r4, #4]
 80098e4:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"6,5,10,13,15,18");
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	3304      	adds	r3, #4
 80098ea:	4a23      	ldr	r2, [pc, #140]	; (8009978 <problem_fetch+0x82b4>)
 80098ec:	461c      	mov	r4, r3
 80098ee:	4615      	mov	r5, r2
 80098f0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80098f2:	6020      	str	r0, [r4, #0]
 80098f4:	6061      	str	r1, [r4, #4]
 80098f6:	60a2      	str	r2, [r4, #8]
 80098f8:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,s,d,d,d,e");
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8009900:	4a1e      	ldr	r2, [pc, #120]	; (800997c <problem_fetch+0x82b8>)
 8009902:	461c      	mov	r4, r3
 8009904:	4613      	mov	r3, r2
 8009906:	cb07      	ldmia	r3!, {r0, r1, r2}
 8009908:	6020      	str	r0, [r4, #0]
 800990a:	6061      	str	r1, [r4, #4]
 800990c:	60a2      	str	r2, [r4, #8]
			break;
 800990e:	f012 be09 	b.w	801c524 <problem_fetch+0x1ae60>
 8009912:	bf00      	nop
 8009914:	080264e0 	.word	0x080264e0
 8009918:	08023920 	.word	0x08023920
 800991c:	080264e4 	.word	0x080264e4
 8009920:	080264f4 	.word	0x080264f4
 8009924:	080239dc 	.word	0x080239dc
 8009928:	08026508 	.word	0x08026508
 800992c:	08026514 	.word	0x08026514
 8009930:	08026528 	.word	0x08026528
 8009934:	08024838 	.word	0x08024838
 8009938:	08026540 	.word	0x08026540
 800993c:	080239f4 	.word	0x080239f4
 8009940:	0802654c 	.word	0x0802654c
 8009944:	0802655c 	.word	0x0802655c
 8009948:	08026570 	.word	0x08026570
 800994c:	08026580 	.word	0x08026580
 8009950:	08023854 	.word	0x08023854
 8009954:	08026594 	.word	0x08026594
 8009958:	080265a4 	.word	0x080265a4
 800995c:	08023978 	.word	0x08023978
 8009960:	080265b8 	.word	0x080265b8
 8009964:	080265d0 	.word	0x080265d0
 8009968:	080265e0 	.word	0x080265e0
 800996c:	080238cc 	.word	0x080238cc
 8009970:	080265f4 	.word	0x080265f4
 8009974:	08026600 	.word	0x08026600
 8009978:	0802660c 	.word	0x0802660c
 800997c:	08023834 	.word	0x08023834
		case 227 :
			strcpy(p->name,"FOR BEGINNERS - 3");
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8009986:	4aab      	ldr	r2, [pc, #684]	; (8009c34 <problem_fetch+0x8570>)
 8009988:	461d      	mov	r5, r3
 800998a:	4614      	mov	r4, r2
 800998c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800998e:	6028      	str	r0, [r5, #0]
 8009990:	6069      	str	r1, [r5, #4]
 8009992:	60aa      	str	r2, [r5, #8]
 8009994:	60eb      	str	r3, [r5, #12]
 8009996:	8823      	ldrh	r3, [r4, #0]
 8009998:	822b      	strh	r3, [r5, #16]
			strcpy(p->grade,"6B+");
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80099a0:	4aa5      	ldr	r2, [pc, #660]	; (8009c38 <problem_fetch+0x8574>)
 80099a2:	6810      	ldr	r0, [r2, #0]
 80099a4:	6018      	str	r0, [r3, #0]
			p->moveSize = 8;
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	2208      	movs	r2, #8
 80099aa:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"E,G,I,F,I,H,E,D");
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	33a4      	adds	r3, #164	; 0xa4
 80099b0:	4aa2      	ldr	r2, [pc, #648]	; (8009c3c <problem_fetch+0x8578>)
 80099b2:	461c      	mov	r4, r3
 80099b4:	4615      	mov	r5, r2
 80099b6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80099b8:	6020      	str	r0, [r4, #0]
 80099ba:	6061      	str	r1, [r4, #4]
 80099bc:	60a2      	str	r2, [r4, #8]
 80099be:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"8,4,10,13,14,12,16,18");
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	3304      	adds	r3, #4
 80099c4:	4a9e      	ldr	r2, [pc, #632]	; (8009c40 <problem_fetch+0x857c>)
 80099c6:	461d      	mov	r5, r3
 80099c8:	4614      	mov	r4, r2
 80099ca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80099cc:	6028      	str	r0, [r5, #0]
 80099ce:	6069      	str	r1, [r5, #4]
 80099d0:	60aa      	str	r2, [r5, #8]
 80099d2:	60eb      	str	r3, [r5, #12]
 80099d4:	6820      	ldr	r0, [r4, #0]
 80099d6:	6128      	str	r0, [r5, #16]
 80099d8:	88a3      	ldrh	r3, [r4, #4]
 80099da:	82ab      	strh	r3, [r5, #20]
			strcpy(p->startFinish,"d,s,d,d,d,d,d,e");
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 80099e2:	4a98      	ldr	r2, [pc, #608]	; (8009c44 <problem_fetch+0x8580>)
 80099e4:	461c      	mov	r4, r3
 80099e6:	4615      	mov	r5, r2
 80099e8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80099ea:	6020      	str	r0, [r4, #0]
 80099ec:	6061      	str	r1, [r4, #4]
 80099ee:	60a2      	str	r2, [r4, #8]
 80099f0:	60e3      	str	r3, [r4, #12]
			break;
 80099f2:	f012 bd97 	b.w	801c524 <problem_fetch+0x1ae60>
		case 228 :
			strcpy(p->name,"JUDGEMENT RAINS");
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80099fc:	4a92      	ldr	r2, [pc, #584]	; (8009c48 <problem_fetch+0x8584>)
 80099fe:	461c      	mov	r4, r3
 8009a00:	4615      	mov	r5, r2
 8009a02:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009a04:	6020      	str	r0, [r4, #0]
 8009a06:	6061      	str	r1, [r4, #4]
 8009a08:	60a2      	str	r2, [r4, #8]
 8009a0a:	60e3      	str	r3, [r4, #12]
			strcpy(p->grade,"7A+");
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8009a12:	4a8e      	ldr	r2, [pc, #568]	; (8009c4c <problem_fetch+0x8588>)
 8009a14:	6810      	ldr	r0, [r2, #0]
 8009a16:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	2207      	movs	r2, #7
 8009a1c:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"C,E,E,H,H,K,I");
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	33a4      	adds	r3, #164	; 0xa4
 8009a22:	4a8b      	ldr	r2, [pc, #556]	; (8009c50 <problem_fetch+0x858c>)
 8009a24:	461c      	mov	r4, r3
 8009a26:	4613      	mov	r3, r2
 8009a28:	cb07      	ldmia	r3!, {r0, r1, r2}
 8009a2a:	6020      	str	r0, [r4, #0]
 8009a2c:	6061      	str	r1, [r4, #4]
 8009a2e:	60a2      	str	r2, [r4, #8]
 8009a30:	881b      	ldrh	r3, [r3, #0]
 8009a32:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,6,8,10,12,14,18");
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	3304      	adds	r3, #4
 8009a38:	4a86      	ldr	r2, [pc, #536]	; (8009c54 <problem_fetch+0x8590>)
 8009a3a:	461d      	mov	r5, r3
 8009a3c:	4614      	mov	r4, r2
 8009a3e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009a40:	6028      	str	r0, [r5, #0]
 8009a42:	6069      	str	r1, [r5, #4]
 8009a44:	60aa      	str	r2, [r5, #8]
 8009a46:	60eb      	str	r3, [r5, #12]
 8009a48:	8823      	ldrh	r3, [r4, #0]
 8009a4a:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,s,d,d,d,d,e");
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8009a52:	4a81      	ldr	r2, [pc, #516]	; (8009c58 <problem_fetch+0x8594>)
 8009a54:	461c      	mov	r4, r3
 8009a56:	4613      	mov	r3, r2
 8009a58:	cb07      	ldmia	r3!, {r0, r1, r2}
 8009a5a:	6020      	str	r0, [r4, #0]
 8009a5c:	6061      	str	r1, [r4, #4]
 8009a5e:	60a2      	str	r2, [r4, #8]
 8009a60:	881b      	ldrh	r3, [r3, #0]
 8009a62:	81a3      	strh	r3, [r4, #12]
			break;
 8009a64:	f012 bd5e 	b.w	801c524 <problem_fetch+0x1ae60>
		case 229 :
			strcpy(p->name,"LEAVE OR FOLLOW");
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8009a6e:	4a7b      	ldr	r2, [pc, #492]	; (8009c5c <problem_fetch+0x8598>)
 8009a70:	461c      	mov	r4, r3
 8009a72:	4615      	mov	r5, r2
 8009a74:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009a76:	6020      	str	r0, [r4, #0]
 8009a78:	6061      	str	r1, [r4, #4]
 8009a7a:	60a2      	str	r2, [r4, #8]
 8009a7c:	60e3      	str	r3, [r4, #12]
			strcpy(p->grade,"6C");
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8009a84:	4a76      	ldr	r2, [pc, #472]	; (8009c60 <problem_fetch+0x859c>)
 8009a86:	8811      	ldrh	r1, [r2, #0]
 8009a88:	7892      	ldrb	r2, [r2, #2]
 8009a8a:	8019      	strh	r1, [r3, #0]
 8009a8c:	709a      	strb	r2, [r3, #2]
			p->moveSize = 6;
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	2206      	movs	r2, #6
 8009a92:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"H,J,I,J,G,I");
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	33a4      	adds	r3, #164	; 0xa4
 8009a98:	4a72      	ldr	r2, [pc, #456]	; (8009c64 <problem_fetch+0x85a0>)
 8009a9a:	461c      	mov	r4, r3
 8009a9c:	4613      	mov	r3, r2
 8009a9e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8009aa0:	6020      	str	r0, [r4, #0]
 8009aa2:	6061      	str	r1, [r4, #4]
 8009aa4:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,7,10,13,15,18");
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	3304      	adds	r3, #4
 8009aaa:	4a6f      	ldr	r2, [pc, #444]	; (8009c68 <problem_fetch+0x85a4>)
 8009aac:	461c      	mov	r4, r3
 8009aae:	4615      	mov	r5, r2
 8009ab0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009ab2:	6020      	str	r0, [r4, #0]
 8009ab4:	6061      	str	r1, [r4, #4]
 8009ab6:	60a2      	str	r2, [r4, #8]
 8009ab8:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8009ac0:	4a6a      	ldr	r2, [pc, #424]	; (8009c6c <problem_fetch+0x85a8>)
 8009ac2:	461c      	mov	r4, r3
 8009ac4:	4613      	mov	r3, r2
 8009ac6:	cb07      	ldmia	r3!, {r0, r1, r2}
 8009ac8:	6020      	str	r0, [r4, #0]
 8009aca:	6061      	str	r1, [r4, #4]
 8009acc:	60a2      	str	r2, [r4, #8]
			break;
 8009ace:	f012 bd29 	b.w	801c524 <problem_fetch+0x1ae60>
		case 230 :
			strcpy(p->name,"EASY GO");
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8009ad8:	4965      	ldr	r1, [pc, #404]	; (8009c70 <problem_fetch+0x85ac>)
 8009ada:	461a      	mov	r2, r3
 8009adc:	460b      	mov	r3, r1
 8009ade:	cb03      	ldmia	r3!, {r0, r1}
 8009ae0:	6010      	str	r0, [r2, #0]
 8009ae2:	6051      	str	r1, [r2, #4]
			strcpy(p->grade,"6B+");
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8009aea:	4a53      	ldr	r2, [pc, #332]	; (8009c38 <problem_fetch+0x8574>)
 8009aec:	6810      	ldr	r0, [r2, #0]
 8009aee:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	2207      	movs	r2, #7
 8009af4:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"C,E,E,H,F,C,D");
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	33a4      	adds	r3, #164	; 0xa4
 8009afa:	4a5e      	ldr	r2, [pc, #376]	; (8009c74 <problem_fetch+0x85b0>)
 8009afc:	461c      	mov	r4, r3
 8009afe:	4613      	mov	r3, r2
 8009b00:	cb07      	ldmia	r3!, {r0, r1, r2}
 8009b02:	6020      	str	r0, [r4, #0]
 8009b04:	6061      	str	r1, [r4, #4]
 8009b06:	60a2      	str	r2, [r4, #8]
 8009b08:	881b      	ldrh	r3, [r3, #0]
 8009b0a:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,6,8,8,11,13,18");
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	3304      	adds	r3, #4
 8009b10:	4a59      	ldr	r2, [pc, #356]	; (8009c78 <problem_fetch+0x85b4>)
 8009b12:	461d      	mov	r5, r3
 8009b14:	4614      	mov	r4, r2
 8009b16:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009b18:	6028      	str	r0, [r5, #0]
 8009b1a:	6069      	str	r1, [r5, #4]
 8009b1c:	60aa      	str	r2, [r5, #8]
 8009b1e:	60eb      	str	r3, [r5, #12]
 8009b20:	7823      	ldrb	r3, [r4, #0]
 8009b22:	742b      	strb	r3, [r5, #16]
			strcpy(p->startFinish,"s,s,d,d,d,d,e");
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8009b2a:	4a4b      	ldr	r2, [pc, #300]	; (8009c58 <problem_fetch+0x8594>)
 8009b2c:	461c      	mov	r4, r3
 8009b2e:	4613      	mov	r3, r2
 8009b30:	cb07      	ldmia	r3!, {r0, r1, r2}
 8009b32:	6020      	str	r0, [r4, #0]
 8009b34:	6061      	str	r1, [r4, #4]
 8009b36:	60a2      	str	r2, [r4, #8]
 8009b38:	881b      	ldrh	r3, [r3, #0]
 8009b3a:	81a3      	strh	r3, [r4, #12]
			break;
 8009b3c:	f012 bcf2 	b.w	801c524 <problem_fetch+0x1ae60>
		case 231 :
			strcpy(p->name,"UPRISING");
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8009b46:	494d      	ldr	r1, [pc, #308]	; (8009c7c <problem_fetch+0x85b8>)
 8009b48:	461a      	mov	r2, r3
 8009b4a:	460b      	mov	r3, r1
 8009b4c:	cb03      	ldmia	r3!, {r0, r1}
 8009b4e:	6010      	str	r0, [r2, #0]
 8009b50:	6051      	str	r1, [r2, #4]
 8009b52:	781b      	ldrb	r3, [r3, #0]
 8009b54:	7213      	strb	r3, [r2, #8]
			strcpy(p->grade,"6B+");
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8009b5c:	4a36      	ldr	r2, [pc, #216]	; (8009c38 <problem_fetch+0x8574>)
 8009b5e:	6810      	ldr	r0, [r2, #0]
 8009b60:	6018      	str	r0, [r3, #0]
			p->moveSize = 9;
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	2209      	movs	r2, #9
 8009b66:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,J,H,G,E,F,G,H,I");
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	33a4      	adds	r3, #164	; 0xa4
 8009b6c:	4a44      	ldr	r2, [pc, #272]	; (8009c80 <problem_fetch+0x85bc>)
 8009b6e:	461d      	mov	r5, r3
 8009b70:	4614      	mov	r4, r2
 8009b72:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009b74:	6028      	str	r0, [r5, #0]
 8009b76:	6069      	str	r1, [r5, #4]
 8009b78:	60aa      	str	r2, [r5, #8]
 8009b7a:	60eb      	str	r3, [r5, #12]
 8009b7c:	8823      	ldrh	r3, [r4, #0]
 8009b7e:	822b      	strh	r3, [r5, #16]
			strcpy(p->moveNumbers,"4,5,8,9,12,13,14,16,18");
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	3304      	adds	r3, #4
 8009b84:	4a3f      	ldr	r2, [pc, #252]	; (8009c84 <problem_fetch+0x85c0>)
 8009b86:	461c      	mov	r4, r3
 8009b88:	4615      	mov	r5, r2
 8009b8a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009b8c:	6020      	str	r0, [r4, #0]
 8009b8e:	6061      	str	r1, [r4, #4]
 8009b90:	60a2      	str	r2, [r4, #8]
 8009b92:	60e3      	str	r3, [r4, #12]
 8009b94:	6828      	ldr	r0, [r5, #0]
 8009b96:	6120      	str	r0, [r4, #16]
 8009b98:	88ab      	ldrh	r3, [r5, #4]
 8009b9a:	79aa      	ldrb	r2, [r5, #6]
 8009b9c:	82a3      	strh	r3, [r4, #20]
 8009b9e:	4613      	mov	r3, r2
 8009ba0:	75a3      	strb	r3, [r4, #22]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,d,e");
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8009ba8:	4a37      	ldr	r2, [pc, #220]	; (8009c88 <problem_fetch+0x85c4>)
 8009baa:	461d      	mov	r5, r3
 8009bac:	4614      	mov	r4, r2
 8009bae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009bb0:	6028      	str	r0, [r5, #0]
 8009bb2:	6069      	str	r1, [r5, #4]
 8009bb4:	60aa      	str	r2, [r5, #8]
 8009bb6:	60eb      	str	r3, [r5, #12]
 8009bb8:	8823      	ldrh	r3, [r4, #0]
 8009bba:	822b      	strh	r3, [r5, #16]
			break;
 8009bbc:	f012 bcb2 	b.w	801c524 <problem_fetch+0x1ae60>
		case 232 :
			strcpy(p->name,"SILENT MEDIA");
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8009bc6:	4a31      	ldr	r2, [pc, #196]	; (8009c8c <problem_fetch+0x85c8>)
 8009bc8:	461c      	mov	r4, r3
 8009bca:	4613      	mov	r3, r2
 8009bcc:	cb07      	ldmia	r3!, {r0, r1, r2}
 8009bce:	6020      	str	r0, [r4, #0]
 8009bd0:	6061      	str	r1, [r4, #4]
 8009bd2:	60a2      	str	r2, [r4, #8]
 8009bd4:	781b      	ldrb	r3, [r3, #0]
 8009bd6:	7323      	strb	r3, [r4, #12]
			strcpy(p->grade,"6B+");
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8009bde:	4a16      	ldr	r2, [pc, #88]	; (8009c38 <problem_fetch+0x8574>)
 8009be0:	6810      	ldr	r0, [r2, #0]
 8009be2:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	2207      	movs	r2, #7
 8009be8:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,E,H,G,I,H,I");
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	33a4      	adds	r3, #164	; 0xa4
 8009bee:	4a28      	ldr	r2, [pc, #160]	; (8009c90 <problem_fetch+0x85cc>)
 8009bf0:	461c      	mov	r4, r3
 8009bf2:	4613      	mov	r3, r2
 8009bf4:	cb07      	ldmia	r3!, {r0, r1, r2}
 8009bf6:	6020      	str	r0, [r4, #0]
 8009bf8:	6061      	str	r1, [r4, #4]
 8009bfa:	60a2      	str	r2, [r4, #8]
 8009bfc:	881b      	ldrh	r3, [r3, #0]
 8009bfe:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,6,10,9,14,16,18");
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	3304      	adds	r3, #4
 8009c04:	4a23      	ldr	r2, [pc, #140]	; (8009c94 <problem_fetch+0x85d0>)
 8009c06:	461d      	mov	r5, r3
 8009c08:	4614      	mov	r4, r2
 8009c0a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009c0c:	6028      	str	r0, [r5, #0]
 8009c0e:	6069      	str	r1, [r5, #4]
 8009c10:	60aa      	str	r2, [r5, #8]
 8009c12:	60eb      	str	r3, [r5, #12]
 8009c14:	8823      	ldrh	r3, [r4, #0]
 8009c16:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8009c1e:	4a1e      	ldr	r2, [pc, #120]	; (8009c98 <problem_fetch+0x85d4>)
 8009c20:	461c      	mov	r4, r3
 8009c22:	4613      	mov	r3, r2
 8009c24:	cb07      	ldmia	r3!, {r0, r1, r2}
 8009c26:	6020      	str	r0, [r4, #0]
 8009c28:	6061      	str	r1, [r4, #4]
 8009c2a:	60a2      	str	r2, [r4, #8]
 8009c2c:	881b      	ldrh	r3, [r3, #0]
 8009c2e:	81a3      	strh	r3, [r4, #12]
			break;
 8009c30:	f012 bc78 	b.w	801c524 <problem_fetch+0x1ae60>
 8009c34:	0802661c 	.word	0x0802661c
 8009c38:	08023854 	.word	0x08023854
 8009c3c:	08026630 	.word	0x08026630
 8009c40:	08026640 	.word	0x08026640
 8009c44:	08026658 	.word	0x08026658
 8009c48:	08026668 	.word	0x08026668
 8009c4c:	080239f4 	.word	0x080239f4
 8009c50:	08026678 	.word	0x08026678
 8009c54:	08026688 	.word	0x08026688
 8009c58:	080238cc 	.word	0x080238cc
 8009c5c:	0802669c 	.word	0x0802669c
 8009c60:	08023920 	.word	0x08023920
 8009c64:	080266ac 	.word	0x080266ac
 8009c68:	080266b8 	.word	0x080266b8
 8009c6c:	08023bf0 	.word	0x08023bf0
 8009c70:	080266c8 	.word	0x080266c8
 8009c74:	080266d0 	.word	0x080266d0
 8009c78:	080266e0 	.word	0x080266e0
 8009c7c:	080266f4 	.word	0x080266f4
 8009c80:	08026700 	.word	0x08026700
 8009c84:	08026714 	.word	0x08026714
 8009c88:	08024838 	.word	0x08024838
 8009c8c:	0802672c 	.word	0x0802672c
 8009c90:	0802673c 	.word	0x0802673c
 8009c94:	0802674c 	.word	0x0802674c
 8009c98:	080239dc 	.word	0x080239dc
		case 233 :
			strcpy(p->name,"HOONGA (REMAKE)");
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8009ca2:	4ab5      	ldr	r2, [pc, #724]	; (8009f78 <problem_fetch+0x88b4>)
 8009ca4:	461c      	mov	r4, r3
 8009ca6:	4615      	mov	r5, r2
 8009ca8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009caa:	6020      	str	r0, [r4, #0]
 8009cac:	6061      	str	r1, [r4, #4]
 8009cae:	60a2      	str	r2, [r4, #8]
 8009cb0:	60e3      	str	r3, [r4, #12]
			strcpy(p->grade,"7B+");
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8009cb8:	4ab0      	ldr	r2, [pc, #704]	; (8009f7c <problem_fetch+0x88b8>)
 8009cba:	6810      	ldr	r0, [r2, #0]
 8009cbc:	6018      	str	r0, [r3, #0]
			p->moveSize = 10;
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	220a      	movs	r2, #10
 8009cc2:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"B,C,D,B,E,D,H,G,H,I");
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	33a4      	adds	r3, #164	; 0xa4
 8009cc8:	4aad      	ldr	r2, [pc, #692]	; (8009f80 <problem_fetch+0x88bc>)
 8009cca:	461d      	mov	r5, r3
 8009ccc:	4614      	mov	r4, r2
 8009cce:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009cd0:	6028      	str	r0, [r5, #0]
 8009cd2:	6069      	str	r1, [r5, #4]
 8009cd4:	60aa      	str	r2, [r5, #8]
 8009cd6:	60eb      	str	r3, [r5, #12]
 8009cd8:	6820      	ldr	r0, [r4, #0]
 8009cda:	6128      	str	r0, [r5, #16]
			strcpy(p->moveNumbers,"6,5,7,10,12,11,13,14,16,18");
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	3304      	adds	r3, #4
 8009ce0:	4aa8      	ldr	r2, [pc, #672]	; (8009f84 <problem_fetch+0x88c0>)
 8009ce2:	461d      	mov	r5, r3
 8009ce4:	4614      	mov	r4, r2
 8009ce6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009ce8:	6028      	str	r0, [r5, #0]
 8009cea:	6069      	str	r1, [r5, #4]
 8009cec:	60aa      	str	r2, [r5, #8]
 8009cee:	60eb      	str	r3, [r5, #12]
 8009cf0:	cc03      	ldmia	r4!, {r0, r1}
 8009cf2:	6128      	str	r0, [r5, #16]
 8009cf4:	6169      	str	r1, [r5, #20]
 8009cf6:	8823      	ldrh	r3, [r4, #0]
 8009cf8:	78a2      	ldrb	r2, [r4, #2]
 8009cfa:	832b      	strh	r3, [r5, #24]
 8009cfc:	4613      	mov	r3, r2
 8009cfe:	76ab      	strb	r3, [r5, #26]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,d,d,e");
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8009d06:	4aa0      	ldr	r2, [pc, #640]	; (8009f88 <problem_fetch+0x88c4>)
 8009d08:	461d      	mov	r5, r3
 8009d0a:	4614      	mov	r4, r2
 8009d0c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009d0e:	6028      	str	r0, [r5, #0]
 8009d10:	6069      	str	r1, [r5, #4]
 8009d12:	60aa      	str	r2, [r5, #8]
 8009d14:	60eb      	str	r3, [r5, #12]
 8009d16:	6820      	ldr	r0, [r4, #0]
 8009d18:	6128      	str	r0, [r5, #16]
			break;
 8009d1a:	f012 bc03 	b.w	801c524 <problem_fetch+0x1ae60>
		case 234 :
			strcpy(p->name,"EDITHS BOULDER");
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8009d24:	4a99      	ldr	r2, [pc, #612]	; (8009f8c <problem_fetch+0x88c8>)
 8009d26:	461c      	mov	r4, r3
 8009d28:	4613      	mov	r3, r2
 8009d2a:	cb07      	ldmia	r3!, {r0, r1, r2}
 8009d2c:	6020      	str	r0, [r4, #0]
 8009d2e:	6061      	str	r1, [r4, #4]
 8009d30:	60a2      	str	r2, [r4, #8]
 8009d32:	881a      	ldrh	r2, [r3, #0]
 8009d34:	789b      	ldrb	r3, [r3, #2]
 8009d36:	81a2      	strh	r2, [r4, #12]
 8009d38:	73a3      	strb	r3, [r4, #14]
			strcpy(p->grade,"6C+");
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8009d40:	4a93      	ldr	r2, [pc, #588]	; (8009f90 <problem_fetch+0x88cc>)
 8009d42:	6810      	ldr	r0, [r2, #0]
 8009d44:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	2207      	movs	r2, #7
 8009d4a:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"E,I,E,J,D,E,A");
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	33a4      	adds	r3, #164	; 0xa4
 8009d50:	4a90      	ldr	r2, [pc, #576]	; (8009f94 <problem_fetch+0x88d0>)
 8009d52:	461c      	mov	r4, r3
 8009d54:	4613      	mov	r3, r2
 8009d56:	cb07      	ldmia	r3!, {r0, r1, r2}
 8009d58:	6020      	str	r0, [r4, #0]
 8009d5a:	6061      	str	r1, [r4, #4]
 8009d5c:	60a2      	str	r2, [r4, #8]
 8009d5e:	881b      	ldrh	r3, [r3, #0]
 8009d60:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"12,7,8,5,15,16,18");
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	3304      	adds	r3, #4
 8009d66:	4a8c      	ldr	r2, [pc, #560]	; (8009f98 <problem_fetch+0x88d4>)
 8009d68:	461d      	mov	r5, r3
 8009d6a:	4614      	mov	r4, r2
 8009d6c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009d6e:	6028      	str	r0, [r5, #0]
 8009d70:	6069      	str	r1, [r5, #4]
 8009d72:	60aa      	str	r2, [r5, #8]
 8009d74:	60eb      	str	r3, [r5, #12]
 8009d76:	8823      	ldrh	r3, [r4, #0]
 8009d78:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"d,d,d,s,d,d,e");
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8009d80:	4a86      	ldr	r2, [pc, #536]	; (8009f9c <problem_fetch+0x88d8>)
 8009d82:	461c      	mov	r4, r3
 8009d84:	4613      	mov	r3, r2
 8009d86:	cb07      	ldmia	r3!, {r0, r1, r2}
 8009d88:	6020      	str	r0, [r4, #0]
 8009d8a:	6061      	str	r1, [r4, #4]
 8009d8c:	60a2      	str	r2, [r4, #8]
 8009d8e:	881b      	ldrh	r3, [r3, #0]
 8009d90:	81a3      	strh	r3, [r4, #12]
			break;
 8009d92:	f012 bbc7 	b.w	801c524 <problem_fetch+0x1ae60>
		case 235 :
			strcpy(p->name,"IGNORANT STYLE");
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8009d9c:	4a80      	ldr	r2, [pc, #512]	; (8009fa0 <problem_fetch+0x88dc>)
 8009d9e:	461c      	mov	r4, r3
 8009da0:	4613      	mov	r3, r2
 8009da2:	cb07      	ldmia	r3!, {r0, r1, r2}
 8009da4:	6020      	str	r0, [r4, #0]
 8009da6:	6061      	str	r1, [r4, #4]
 8009da8:	60a2      	str	r2, [r4, #8]
 8009daa:	881a      	ldrh	r2, [r3, #0]
 8009dac:	789b      	ldrb	r3, [r3, #2]
 8009dae:	81a2      	strh	r2, [r4, #12]
 8009db0:	73a3      	strb	r3, [r4, #14]
			strcpy(p->grade,"7A");
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8009db8:	4a7a      	ldr	r2, [pc, #488]	; (8009fa4 <problem_fetch+0x88e0>)
 8009dba:	8811      	ldrh	r1, [r2, #0]
 8009dbc:	7892      	ldrb	r2, [r2, #2]
 8009dbe:	8019      	strh	r1, [r3, #0]
 8009dc0:	709a      	strb	r2, [r3, #2]
			p->moveSize = 6;
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	2206      	movs	r2, #6
 8009dc6:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,G,E,F,I,I");
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	33a4      	adds	r3, #164	; 0xa4
 8009dcc:	4a76      	ldr	r2, [pc, #472]	; (8009fa8 <problem_fetch+0x88e4>)
 8009dce:	461c      	mov	r4, r3
 8009dd0:	4613      	mov	r3, r2
 8009dd2:	cb07      	ldmia	r3!, {r0, r1, r2}
 8009dd4:	6020      	str	r0, [r4, #0]
 8009dd6:	6061      	str	r1, [r4, #4]
 8009dd8:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,6,8,11,14,18");
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	3304      	adds	r3, #4
 8009dde:	4a73      	ldr	r2, [pc, #460]	; (8009fac <problem_fetch+0x88e8>)
 8009de0:	461c      	mov	r4, r3
 8009de2:	4613      	mov	r3, r2
 8009de4:	cb07      	ldmia	r3!, {r0, r1, r2}
 8009de6:	6020      	str	r0, [r4, #0]
 8009de8:	6061      	str	r1, [r4, #4]
 8009dea:	60a2      	str	r2, [r4, #8]
 8009dec:	881a      	ldrh	r2, [r3, #0]
 8009dee:	789b      	ldrb	r3, [r3, #2]
 8009df0:	81a2      	strh	r2, [r4, #12]
 8009df2:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8009dfa:	4a6d      	ldr	r2, [pc, #436]	; (8009fb0 <problem_fetch+0x88ec>)
 8009dfc:	461c      	mov	r4, r3
 8009dfe:	4613      	mov	r3, r2
 8009e00:	cb07      	ldmia	r3!, {r0, r1, r2}
 8009e02:	6020      	str	r0, [r4, #0]
 8009e04:	6061      	str	r1, [r4, #4]
 8009e06:	60a2      	str	r2, [r4, #8]
			break;
 8009e08:	f012 bb8c 	b.w	801c524 <problem_fetch+0x1ae60>
		case 236 :
			strcpy(p->name,"FUN1");
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8009e12:	4a68      	ldr	r2, [pc, #416]	; (8009fb4 <problem_fetch+0x88f0>)
 8009e14:	6810      	ldr	r0, [r2, #0]
 8009e16:	6018      	str	r0, [r3, #0]
 8009e18:	7912      	ldrb	r2, [r2, #4]
 8009e1a:	711a      	strb	r2, [r3, #4]
			strcpy(p->grade,"6B+");
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8009e22:	4a65      	ldr	r2, [pc, #404]	; (8009fb8 <problem_fetch+0x88f4>)
 8009e24:	6810      	ldr	r0, [r2, #0]
 8009e26:	6018      	str	r0, [r3, #0]
			p->moveSize = 14;
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	220e      	movs	r2, #14
 8009e2c:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,C,E,C,E,D,F,H,F,I,I,G,H,I");
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	33a4      	adds	r3, #164	; 0xa4
 8009e32:	4a62      	ldr	r2, [pc, #392]	; (8009fbc <problem_fetch+0x88f8>)
 8009e34:	461d      	mov	r5, r3
 8009e36:	4614      	mov	r4, r2
 8009e38:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009e3a:	6028      	str	r0, [r5, #0]
 8009e3c:	6069      	str	r1, [r5, #4]
 8009e3e:	60aa      	str	r2, [r5, #8]
 8009e40:	60eb      	str	r3, [r5, #12]
 8009e42:	cc07      	ldmia	r4!, {r0, r1, r2}
 8009e44:	6128      	str	r0, [r5, #16]
 8009e46:	6169      	str	r1, [r5, #20]
 8009e48:	61aa      	str	r2, [r5, #24]
			strcpy(p->moveNumbers,"4,5,8,8,9,11,11,12,13,14,15,15,16,18");
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	3304      	adds	r3, #4
 8009e4e:	4a5c      	ldr	r2, [pc, #368]	; (8009fc0 <problem_fetch+0x88fc>)
 8009e50:	4614      	mov	r4, r2
 8009e52:	469c      	mov	ip, r3
 8009e54:	f104 0e20 	add.w	lr, r4, #32
 8009e58:	4665      	mov	r5, ip
 8009e5a:	4626      	mov	r6, r4
 8009e5c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8009e5e:	6028      	str	r0, [r5, #0]
 8009e60:	6069      	str	r1, [r5, #4]
 8009e62:	60aa      	str	r2, [r5, #8]
 8009e64:	60eb      	str	r3, [r5, #12]
 8009e66:	3410      	adds	r4, #16
 8009e68:	f10c 0c10 	add.w	ip, ip, #16
 8009e6c:	4574      	cmp	r4, lr
 8009e6e:	d1f3      	bne.n	8009e58 <problem_fetch+0x8794>
 8009e70:	4663      	mov	r3, ip
 8009e72:	4622      	mov	r2, r4
 8009e74:	6810      	ldr	r0, [r2, #0]
 8009e76:	6018      	str	r0, [r3, #0]
 8009e78:	7912      	ldrb	r2, [r2, #4]
 8009e7a:	711a      	strb	r2, [r3, #4]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,d,d,d,d,d,d,e");
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8009e82:	4a50      	ldr	r2, [pc, #320]	; (8009fc4 <problem_fetch+0x8900>)
 8009e84:	461d      	mov	r5, r3
 8009e86:	4614      	mov	r4, r2
 8009e88:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009e8a:	6028      	str	r0, [r5, #0]
 8009e8c:	6069      	str	r1, [r5, #4]
 8009e8e:	60aa      	str	r2, [r5, #8]
 8009e90:	60eb      	str	r3, [r5, #12]
 8009e92:	cc07      	ldmia	r4!, {r0, r1, r2}
 8009e94:	6128      	str	r0, [r5, #16]
 8009e96:	6169      	str	r1, [r5, #20]
 8009e98:	61aa      	str	r2, [r5, #24]
			break;
 8009e9a:	f012 bb43 	b.w	801c524 <problem_fetch+0x1ae60>
		case 237 :
			strcpy(p->name,"MALEDICTION");
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8009ea4:	4a48      	ldr	r2, [pc, #288]	; (8009fc8 <problem_fetch+0x8904>)
 8009ea6:	461c      	mov	r4, r3
 8009ea8:	4613      	mov	r3, r2
 8009eaa:	cb07      	ldmia	r3!, {r0, r1, r2}
 8009eac:	6020      	str	r0, [r4, #0]
 8009eae:	6061      	str	r1, [r4, #4]
 8009eb0:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade,"7A+");
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8009eb8:	4a44      	ldr	r2, [pc, #272]	; (8009fcc <problem_fetch+0x8908>)
 8009eba:	6810      	ldr	r0, [r2, #0]
 8009ebc:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	2206      	movs	r2, #6
 8009ec2:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"E,F,B,G,I,D");
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	33a4      	adds	r3, #164	; 0xa4
 8009ec8:	4a41      	ldr	r2, [pc, #260]	; (8009fd0 <problem_fetch+0x890c>)
 8009eca:	461c      	mov	r4, r3
 8009ecc:	4613      	mov	r3, r2
 8009ece:	cb07      	ldmia	r3!, {r0, r1, r2}
 8009ed0:	6020      	str	r0, [r4, #0]
 8009ed2:	6061      	str	r1, [r4, #4]
 8009ed4:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"6,11,12,15,15,18");
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	3304      	adds	r3, #4
 8009eda:	4a3e      	ldr	r2, [pc, #248]	; (8009fd4 <problem_fetch+0x8910>)
 8009edc:	461d      	mov	r5, r3
 8009ede:	4614      	mov	r4, r2
 8009ee0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009ee2:	6028      	str	r0, [r5, #0]
 8009ee4:	6069      	str	r1, [r5, #4]
 8009ee6:	60aa      	str	r2, [r5, #8]
 8009ee8:	60eb      	str	r3, [r5, #12]
 8009eea:	7823      	ldrb	r3, [r4, #0]
 8009eec:	742b      	strb	r3, [r5, #16]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8009ef4:	4a2e      	ldr	r2, [pc, #184]	; (8009fb0 <problem_fetch+0x88ec>)
 8009ef6:	461c      	mov	r4, r3
 8009ef8:	4613      	mov	r3, r2
 8009efa:	cb07      	ldmia	r3!, {r0, r1, r2}
 8009efc:	6020      	str	r0, [r4, #0]
 8009efe:	6061      	str	r1, [r4, #4]
 8009f00:	60a2      	str	r2, [r4, #8]
			break;
 8009f02:	f012 bb0f 	b.w	801c524 <problem_fetch+0x1ae60>
		case 238 :
			strcpy(p->name,"KYLO REN");
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8009f0c:	4932      	ldr	r1, [pc, #200]	; (8009fd8 <problem_fetch+0x8914>)
 8009f0e:	461a      	mov	r2, r3
 8009f10:	460b      	mov	r3, r1
 8009f12:	cb03      	ldmia	r3!, {r0, r1}
 8009f14:	6010      	str	r0, [r2, #0]
 8009f16:	6051      	str	r1, [r2, #4]
 8009f18:	781b      	ldrb	r3, [r3, #0]
 8009f1a:	7213      	strb	r3, [r2, #8]
			strcpy(p->grade,"7A");
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8009f22:	4a20      	ldr	r2, [pc, #128]	; (8009fa4 <problem_fetch+0x88e0>)
 8009f24:	8811      	ldrh	r1, [r2, #0]
 8009f26:	7892      	ldrb	r2, [r2, #2]
 8009f28:	8019      	strh	r1, [r3, #0]
 8009f2a:	709a      	strb	r2, [r3, #2]
			p->moveSize = 8;
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	2208      	movs	r2, #8
 8009f30:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,H,E,F,G,E,I,E");
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	33a4      	adds	r3, #164	; 0xa4
 8009f36:	4a29      	ldr	r2, [pc, #164]	; (8009fdc <problem_fetch+0x8918>)
 8009f38:	461c      	mov	r4, r3
 8009f3a:	4615      	mov	r5, r2
 8009f3c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009f3e:	6020      	str	r0, [r4, #0]
 8009f40:	6061      	str	r1, [r4, #4]
 8009f42:	60a2      	str	r2, [r4, #8]
 8009f44:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,5,8,11,14,16,18,9");
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	3304      	adds	r3, #4
 8009f4a:	4a25      	ldr	r2, [pc, #148]	; (8009fe0 <problem_fetch+0x891c>)
 8009f4c:	461d      	mov	r5, r3
 8009f4e:	4614      	mov	r4, r2
 8009f50:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009f52:	6028      	str	r0, [r5, #0]
 8009f54:	6069      	str	r1, [r5, #4]
 8009f56:	60aa      	str	r2, [r5, #8]
 8009f58:	60eb      	str	r3, [r5, #12]
 8009f5a:	6820      	ldr	r0, [r4, #0]
 8009f5c:	6128      	str	r0, [r5, #16]
			strcpy(p->startFinish,"s,s,d,d,d,d,e,d");
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8009f64:	4a1f      	ldr	r2, [pc, #124]	; (8009fe4 <problem_fetch+0x8920>)
 8009f66:	461c      	mov	r4, r3
 8009f68:	4615      	mov	r5, r2
 8009f6a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009f6c:	6020      	str	r0, [r4, #0]
 8009f6e:	6061      	str	r1, [r4, #4]
 8009f70:	60a2      	str	r2, [r4, #8]
 8009f72:	60e3      	str	r3, [r4, #12]
			break;
 8009f74:	f012 bad6 	b.w	801c524 <problem_fetch+0x1ae60>
 8009f78:	08026760 	.word	0x08026760
 8009f7c:	08023990 	.word	0x08023990
 8009f80:	08026770 	.word	0x08026770
 8009f84:	08026784 	.word	0x08026784
 8009f88:	080240fc 	.word	0x080240fc
 8009f8c:	080267a0 	.word	0x080267a0
 8009f90:	080238ec 	.word	0x080238ec
 8009f94:	080267b0 	.word	0x080267b0
 8009f98:	080267c0 	.word	0x080267c0
 8009f9c:	080267d4 	.word	0x080267d4
 8009fa0:	080267e4 	.word	0x080267e4
 8009fa4:	08023814 	.word	0x08023814
 8009fa8:	080267f4 	.word	0x080267f4
 8009fac:	08026800 	.word	0x08026800
 8009fb0:	08023bf0 	.word	0x08023bf0
 8009fb4:	08026810 	.word	0x08026810
 8009fb8:	08023854 	.word	0x08023854
 8009fbc:	08026818 	.word	0x08026818
 8009fc0:	08026834 	.word	0x08026834
 8009fc4:	0802685c 	.word	0x0802685c
 8009fc8:	08026878 	.word	0x08026878
 8009fcc:	080239f4 	.word	0x080239f4
 8009fd0:	08026884 	.word	0x08026884
 8009fd4:	08026890 	.word	0x08026890
 8009fd8:	080268a4 	.word	0x080268a4
 8009fdc:	080268b0 	.word	0x080268b0
 8009fe0:	080268c0 	.word	0x080268c0
 8009fe4:	080240b4 	.word	0x080240b4
		case 239 :
			strcpy(p->name,"STRAIGHTER THAN YOU");
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8009fee:	4ab2      	ldr	r2, [pc, #712]	; (800a2b8 <problem_fetch+0x8bf4>)
 8009ff0:	461d      	mov	r5, r3
 8009ff2:	4614      	mov	r4, r2
 8009ff4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009ff6:	6028      	str	r0, [r5, #0]
 8009ff8:	6069      	str	r1, [r5, #4]
 8009ffa:	60aa      	str	r2, [r5, #8]
 8009ffc:	60eb      	str	r3, [r5, #12]
 8009ffe:	6820      	ldr	r0, [r4, #0]
 800a000:	6128      	str	r0, [r5, #16]
			strcpy(p->grade,"7C");
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800a008:	4aac      	ldr	r2, [pc, #688]	; (800a2bc <problem_fetch+0x8bf8>)
 800a00a:	8811      	ldrh	r1, [r2, #0]
 800a00c:	7892      	ldrb	r2, [r2, #2]
 800a00e:	8019      	strh	r1, [r3, #0]
 800a010:	709a      	strb	r2, [r3, #2]
			p->moveSize = 5;
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	2205      	movs	r2, #5
 800a016:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,I,H,K,I");
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	33a4      	adds	r3, #164	; 0xa4
 800a01c:	49a8      	ldr	r1, [pc, #672]	; (800a2c0 <problem_fetch+0x8bfc>)
 800a01e:	461a      	mov	r2, r3
 800a020:	460b      	mov	r3, r1
 800a022:	cb03      	ldmia	r3!, {r0, r1}
 800a024:	6010      	str	r0, [r2, #0]
 800a026:	6051      	str	r1, [r2, #4]
 800a028:	881b      	ldrh	r3, [r3, #0]
 800a02a:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"5,9,13,16,18");
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	3304      	adds	r3, #4
 800a030:	4aa4      	ldr	r2, [pc, #656]	; (800a2c4 <problem_fetch+0x8c00>)
 800a032:	461c      	mov	r4, r3
 800a034:	4613      	mov	r3, r2
 800a036:	cb07      	ldmia	r3!, {r0, r1, r2}
 800a038:	6020      	str	r0, [r4, #0]
 800a03a:	6061      	str	r1, [r4, #4]
 800a03c:	60a2      	str	r2, [r4, #8]
 800a03e:	781b      	ldrb	r3, [r3, #0]
 800a040:	7323      	strb	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,e");
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800a048:	499f      	ldr	r1, [pc, #636]	; (800a2c8 <problem_fetch+0x8c04>)
 800a04a:	461a      	mov	r2, r3
 800a04c:	460b      	mov	r3, r1
 800a04e:	cb03      	ldmia	r3!, {r0, r1}
 800a050:	6010      	str	r0, [r2, #0]
 800a052:	6051      	str	r1, [r2, #4]
 800a054:	881b      	ldrh	r3, [r3, #0]
 800a056:	8113      	strh	r3, [r2, #8]
			break;
 800a058:	f012 ba64 	b.w	801c524 <problem_fetch+0x1ae60>
		case 240 :
			strcpy(p->name,"JAM FUNK");
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800a062:	499a      	ldr	r1, [pc, #616]	; (800a2cc <problem_fetch+0x8c08>)
 800a064:	461a      	mov	r2, r3
 800a066:	460b      	mov	r3, r1
 800a068:	cb03      	ldmia	r3!, {r0, r1}
 800a06a:	6010      	str	r0, [r2, #0]
 800a06c:	6051      	str	r1, [r2, #4]
 800a06e:	781b      	ldrb	r3, [r3, #0]
 800a070:	7213      	strb	r3, [r2, #8]
			strcpy(p->grade,"8A");
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800a078:	4a95      	ldr	r2, [pc, #596]	; (800a2d0 <problem_fetch+0x8c0c>)
 800a07a:	8811      	ldrh	r1, [r2, #0]
 800a07c:	7892      	ldrb	r2, [r2, #2]
 800a07e:	8019      	strh	r1, [r3, #0]
 800a080:	709a      	strb	r2, [r3, #2]
			p->moveSize = 8;
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	2208      	movs	r2, #8
 800a086:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"B,G,H,B,C,D,B,D");
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	33a4      	adds	r3, #164	; 0xa4
 800a08c:	4a91      	ldr	r2, [pc, #580]	; (800a2d4 <problem_fetch+0x8c10>)
 800a08e:	461c      	mov	r4, r3
 800a090:	4615      	mov	r5, r2
 800a092:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a094:	6020      	str	r0, [r4, #0]
 800a096:	6061      	str	r1, [r4, #4]
 800a098:	60a2      	str	r2, [r4, #8]
 800a09a:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"10,10,13,12,16,18,6,7");
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	3304      	adds	r3, #4
 800a0a0:	4a8d      	ldr	r2, [pc, #564]	; (800a2d8 <problem_fetch+0x8c14>)
 800a0a2:	461d      	mov	r5, r3
 800a0a4:	4614      	mov	r4, r2
 800a0a6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a0a8:	6028      	str	r0, [r5, #0]
 800a0aa:	6069      	str	r1, [r5, #4]
 800a0ac:	60aa      	str	r2, [r5, #8]
 800a0ae:	60eb      	str	r3, [r5, #12]
 800a0b0:	6820      	ldr	r0, [r4, #0]
 800a0b2:	6128      	str	r0, [r5, #16]
 800a0b4:	88a3      	ldrh	r3, [r4, #4]
 800a0b6:	82ab      	strh	r3, [r5, #20]
			strcpy(p->startFinish,"d,d,d,d,d,e,s,d");
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800a0be:	4a87      	ldr	r2, [pc, #540]	; (800a2dc <problem_fetch+0x8c18>)
 800a0c0:	461c      	mov	r4, r3
 800a0c2:	4615      	mov	r5, r2
 800a0c4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a0c6:	6020      	str	r0, [r4, #0]
 800a0c8:	6061      	str	r1, [r4, #4]
 800a0ca:	60a2      	str	r2, [r4, #8]
 800a0cc:	60e3      	str	r3, [r4, #12]
			break;
 800a0ce:	f012 ba29 	b.w	801c524 <problem_fetch+0x1ae60>
		case 241 :
			strcpy(p->name,"PROBLEM#148");
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800a0d8:	4a81      	ldr	r2, [pc, #516]	; (800a2e0 <problem_fetch+0x8c1c>)
 800a0da:	461c      	mov	r4, r3
 800a0dc:	4613      	mov	r3, r2
 800a0de:	cb07      	ldmia	r3!, {r0, r1, r2}
 800a0e0:	6020      	str	r0, [r4, #0]
 800a0e2:	6061      	str	r1, [r4, #4]
 800a0e4:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade,"6B+");
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800a0ec:	4a7d      	ldr	r2, [pc, #500]	; (800a2e4 <problem_fetch+0x8c20>)
 800a0ee:	6810      	ldr	r0, [r2, #0]
 800a0f0:	6018      	str	r0, [r3, #0]
			p->moveSize = 10;
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	220a      	movs	r2, #10
 800a0f6:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"H,I,E,F,E,I,D,E,B,A");
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	33a4      	adds	r3, #164	; 0xa4
 800a0fc:	4a7a      	ldr	r2, [pc, #488]	; (800a2e8 <problem_fetch+0x8c24>)
 800a0fe:	461d      	mov	r5, r3
 800a100:	4614      	mov	r4, r2
 800a102:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a104:	6028      	str	r0, [r5, #0]
 800a106:	6069      	str	r1, [r5, #4]
 800a108:	60aa      	str	r2, [r5, #8]
 800a10a:	60eb      	str	r3, [r5, #12]
 800a10c:	6820      	ldr	r0, [r4, #0]
 800a10e:	6128      	str	r0, [r5, #16]
			strcpy(p->moveNumbers,"5,7,8,11,12,14,15,16,15,18");
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	3304      	adds	r3, #4
 800a114:	4a75      	ldr	r2, [pc, #468]	; (800a2ec <problem_fetch+0x8c28>)
 800a116:	461d      	mov	r5, r3
 800a118:	4614      	mov	r4, r2
 800a11a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a11c:	6028      	str	r0, [r5, #0]
 800a11e:	6069      	str	r1, [r5, #4]
 800a120:	60aa      	str	r2, [r5, #8]
 800a122:	60eb      	str	r3, [r5, #12]
 800a124:	cc03      	ldmia	r4!, {r0, r1}
 800a126:	6128      	str	r0, [r5, #16]
 800a128:	6169      	str	r1, [r5, #20]
 800a12a:	8823      	ldrh	r3, [r4, #0]
 800a12c:	78a2      	ldrb	r2, [r4, #2]
 800a12e:	832b      	strh	r3, [r5, #24]
 800a130:	4613      	mov	r3, r2
 800a132:	76ab      	strb	r3, [r5, #26]
			strcpy(p->startFinish,"s,d,d,d,d,d,d,d,d,e");
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800a13a:	4a6d      	ldr	r2, [pc, #436]	; (800a2f0 <problem_fetch+0x8c2c>)
 800a13c:	461d      	mov	r5, r3
 800a13e:	4614      	mov	r4, r2
 800a140:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a142:	6028      	str	r0, [r5, #0]
 800a144:	6069      	str	r1, [r5, #4]
 800a146:	60aa      	str	r2, [r5, #8]
 800a148:	60eb      	str	r3, [r5, #12]
 800a14a:	6820      	ldr	r0, [r4, #0]
 800a14c:	6128      	str	r0, [r5, #16]
			break;
 800a14e:	f012 b9e9 	b.w	801c524 <problem_fetch+0x1ae60>
		case 242 :
			strcpy(p->name,"HOONGA");
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800a158:	4a66      	ldr	r2, [pc, #408]	; (800a2f4 <problem_fetch+0x8c30>)
 800a15a:	6810      	ldr	r0, [r2, #0]
 800a15c:	6018      	str	r0, [r3, #0]
 800a15e:	8891      	ldrh	r1, [r2, #4]
 800a160:	7992      	ldrb	r2, [r2, #6]
 800a162:	8099      	strh	r1, [r3, #4]
 800a164:	719a      	strb	r2, [r3, #6]
			strcpy(p->grade,"7C");
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800a16c:	4a53      	ldr	r2, [pc, #332]	; (800a2bc <problem_fetch+0x8bf8>)
 800a16e:	8811      	ldrh	r1, [r2, #0]
 800a170:	7892      	ldrb	r2, [r2, #2]
 800a172:	8019      	strh	r1, [r3, #0]
 800a174:	709a      	strb	r2, [r3, #2]
			p->moveSize = 9;
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	2209      	movs	r2, #9
 800a17a:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"B,D,B,C,D,H,G,H,I");
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	33a4      	adds	r3, #164	; 0xa4
 800a180:	4a5d      	ldr	r2, [pc, #372]	; (800a2f8 <problem_fetch+0x8c34>)
 800a182:	461d      	mov	r5, r3
 800a184:	4614      	mov	r4, r2
 800a186:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a188:	6028      	str	r0, [r5, #0]
 800a18a:	6069      	str	r1, [r5, #4]
 800a18c:	60aa      	str	r2, [r5, #8]
 800a18e:	60eb      	str	r3, [r5, #12]
 800a190:	8823      	ldrh	r3, [r4, #0]
 800a192:	822b      	strh	r3, [r5, #16]
			strcpy(p->moveNumbers,"6,7,10,5,11,13,14,16,18");
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	3304      	adds	r3, #4
 800a198:	4a58      	ldr	r2, [pc, #352]	; (800a2fc <problem_fetch+0x8c38>)
 800a19a:	461d      	mov	r5, r3
 800a19c:	4614      	mov	r4, r2
 800a19e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a1a0:	6028      	str	r0, [r5, #0]
 800a1a2:	6069      	str	r1, [r5, #4]
 800a1a4:	60aa      	str	r2, [r5, #8]
 800a1a6:	60eb      	str	r3, [r5, #12]
 800a1a8:	cc03      	ldmia	r4!, {r0, r1}
 800a1aa:	6128      	str	r0, [r5, #16]
 800a1ac:	6169      	str	r1, [r5, #20]
			strcpy(p->startFinish,"s,d,d,s,d,d,d,d,e");
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800a1b4:	4a52      	ldr	r2, [pc, #328]	; (800a300 <problem_fetch+0x8c3c>)
 800a1b6:	461d      	mov	r5, r3
 800a1b8:	4614      	mov	r4, r2
 800a1ba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a1bc:	6028      	str	r0, [r5, #0]
 800a1be:	6069      	str	r1, [r5, #4]
 800a1c0:	60aa      	str	r2, [r5, #8]
 800a1c2:	60eb      	str	r3, [r5, #12]
 800a1c4:	8823      	ldrh	r3, [r4, #0]
 800a1c6:	822b      	strh	r3, [r5, #16]
			break;
 800a1c8:	f012 b9ac 	b.w	801c524 <problem_fetch+0x1ae60>
		case 243 :
			strcpy(p->name,"TAR");
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800a1d2:	4a4c      	ldr	r2, [pc, #304]	; (800a304 <problem_fetch+0x8c40>)
 800a1d4:	6810      	ldr	r0, [r2, #0]
 800a1d6:	6018      	str	r0, [r3, #0]
			strcpy(p->grade,"7A+");
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800a1de:	4a4a      	ldr	r2, [pc, #296]	; (800a308 <problem_fetch+0x8c44>)
 800a1e0:	6810      	ldr	r0, [r2, #0]
 800a1e2:	6018      	str	r0, [r3, #0]
			p->moveSize = 9;
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	2209      	movs	r2, #9
 800a1e8:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,C,D,B,D,I,H,E,F");
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	33a4      	adds	r3, #164	; 0xa4
 800a1ee:	4a47      	ldr	r2, [pc, #284]	; (800a30c <problem_fetch+0x8c48>)
 800a1f0:	461d      	mov	r5, r3
 800a1f2:	4614      	mov	r4, r2
 800a1f4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a1f6:	6028      	str	r0, [r5, #0]
 800a1f8:	6069      	str	r1, [r5, #4]
 800a1fa:	60aa      	str	r2, [r5, #8]
 800a1fc:	60eb      	str	r3, [r5, #12]
 800a1fe:	8823      	ldrh	r3, [r4, #0]
 800a200:	822b      	strh	r3, [r5, #16]
			strcpy(p->moveNumbers,"4,13,15,15,18,7,8,9,11");
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	3304      	adds	r3, #4
 800a206:	4a42      	ldr	r2, [pc, #264]	; (800a310 <problem_fetch+0x8c4c>)
 800a208:	461c      	mov	r4, r3
 800a20a:	4615      	mov	r5, r2
 800a20c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a20e:	6020      	str	r0, [r4, #0]
 800a210:	6061      	str	r1, [r4, #4]
 800a212:	60a2      	str	r2, [r4, #8]
 800a214:	60e3      	str	r3, [r4, #12]
 800a216:	6828      	ldr	r0, [r5, #0]
 800a218:	6120      	str	r0, [r4, #16]
 800a21a:	88ab      	ldrh	r3, [r5, #4]
 800a21c:	79aa      	ldrb	r2, [r5, #6]
 800a21e:	82a3      	strh	r3, [r4, #20]
 800a220:	4613      	mov	r3, r2
 800a222:	75a3      	strb	r3, [r4, #22]
			strcpy(p->startFinish,"s,d,d,d,e,d,d,d,d");
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800a22a:	4a3a      	ldr	r2, [pc, #232]	; (800a314 <problem_fetch+0x8c50>)
 800a22c:	461d      	mov	r5, r3
 800a22e:	4614      	mov	r4, r2
 800a230:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a232:	6028      	str	r0, [r5, #0]
 800a234:	6069      	str	r1, [r5, #4]
 800a236:	60aa      	str	r2, [r5, #8]
 800a238:	60eb      	str	r3, [r5, #12]
 800a23a:	8823      	ldrh	r3, [r4, #0]
 800a23c:	822b      	strh	r3, [r5, #16]
			break;
 800a23e:	f012 b971 	b.w	801c524 <problem_fetch+0x1ae60>
		case 244 :
			strcpy(p->name,"FIRST SNOW");
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800a248:	4933      	ldr	r1, [pc, #204]	; (800a318 <problem_fetch+0x8c54>)
 800a24a:	461a      	mov	r2, r3
 800a24c:	460b      	mov	r3, r1
 800a24e:	cb03      	ldmia	r3!, {r0, r1}
 800a250:	6010      	str	r0, [r2, #0]
 800a252:	6051      	str	r1, [r2, #4]
 800a254:	8819      	ldrh	r1, [r3, #0]
 800a256:	789b      	ldrb	r3, [r3, #2]
 800a258:	8111      	strh	r1, [r2, #8]
 800a25a:	7293      	strb	r3, [r2, #10]
			strcpy(p->grade,"7A");
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800a262:	4a2e      	ldr	r2, [pc, #184]	; (800a31c <problem_fetch+0x8c58>)
 800a264:	8811      	ldrh	r1, [r2, #0]
 800a266:	7892      	ldrb	r2, [r2, #2]
 800a268:	8019      	strh	r1, [r3, #0]
 800a26a:	709a      	strb	r2, [r3, #2]
			p->moveSize = 5;
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	2205      	movs	r2, #5
 800a270:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"B,B,B,B,D");
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	33a4      	adds	r3, #164	; 0xa4
 800a276:	492a      	ldr	r1, [pc, #168]	; (800a320 <problem_fetch+0x8c5c>)
 800a278:	461a      	mov	r2, r3
 800a27a:	460b      	mov	r3, r1
 800a27c:	cb03      	ldmia	r3!, {r0, r1}
 800a27e:	6010      	str	r0, [r2, #0]
 800a280:	6051      	str	r1, [r2, #4]
 800a282:	881b      	ldrh	r3, [r3, #0]
 800a284:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"6,10,12,15,18");
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	3304      	adds	r3, #4
 800a28a:	4a26      	ldr	r2, [pc, #152]	; (800a324 <problem_fetch+0x8c60>)
 800a28c:	461c      	mov	r4, r3
 800a28e:	4613      	mov	r3, r2
 800a290:	cb07      	ldmia	r3!, {r0, r1, r2}
 800a292:	6020      	str	r0, [r4, #0]
 800a294:	6061      	str	r1, [r4, #4]
 800a296:	60a2      	str	r2, [r4, #8]
 800a298:	881b      	ldrh	r3, [r3, #0]
 800a29a:	81a3      	strh	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,e");
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800a2a2:	4909      	ldr	r1, [pc, #36]	; (800a2c8 <problem_fetch+0x8c04>)
 800a2a4:	461a      	mov	r2, r3
 800a2a6:	460b      	mov	r3, r1
 800a2a8:	cb03      	ldmia	r3!, {r0, r1}
 800a2aa:	6010      	str	r0, [r2, #0]
 800a2ac:	6051      	str	r1, [r2, #4]
 800a2ae:	881b      	ldrh	r3, [r3, #0]
 800a2b0:	8113      	strh	r3, [r2, #8]
			break;
 800a2b2:	f012 b937 	b.w	801c524 <problem_fetch+0x1ae60>
 800a2b6:	bf00      	nop
 800a2b8:	080268d4 	.word	0x080268d4
 800a2bc:	08024088 	.word	0x08024088
 800a2c0:	080268e8 	.word	0x080268e8
 800a2c4:	080268f4 	.word	0x080268f4
 800a2c8:	08023d20 	.word	0x08023d20
 800a2cc:	08026904 	.word	0x08026904
 800a2d0:	08025bb8 	.word	0x08025bb8
 800a2d4:	08026910 	.word	0x08026910
 800a2d8:	08026920 	.word	0x08026920
 800a2dc:	08026938 	.word	0x08026938
 800a2e0:	08026948 	.word	0x08026948
 800a2e4:	08023854 	.word	0x08023854
 800a2e8:	08026954 	.word	0x08026954
 800a2ec:	08026968 	.word	0x08026968
 800a2f0:	08024bac 	.word	0x08024bac
 800a2f4:	08026984 	.word	0x08026984
 800a2f8:	0802698c 	.word	0x0802698c
 800a2fc:	080269a0 	.word	0x080269a0
 800a300:	080269b8 	.word	0x080269b8
 800a304:	080269cc 	.word	0x080269cc
 800a308:	080239f4 	.word	0x080239f4
 800a30c:	080269d0 	.word	0x080269d0
 800a310:	080269e4 	.word	0x080269e4
 800a314:	080269fc 	.word	0x080269fc
 800a318:	08026a10 	.word	0x08026a10
 800a31c:	08023814 	.word	0x08023814
 800a320:	08026a1c 	.word	0x08026a1c
 800a324:	08026a28 	.word	0x08026a28
		case 245 :
			strcpy(p->name,"WHAT IS YOUR PROBLEM???");
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800a32e:	4aab      	ldr	r2, [pc, #684]	; (800a5dc <problem_fetch+0x8f18>)
 800a330:	461d      	mov	r5, r3
 800a332:	4614      	mov	r4, r2
 800a334:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a336:	6028      	str	r0, [r5, #0]
 800a338:	6069      	str	r1, [r5, #4]
 800a33a:	60aa      	str	r2, [r5, #8]
 800a33c:	60eb      	str	r3, [r5, #12]
 800a33e:	cc03      	ldmia	r4!, {r0, r1}
 800a340:	6128      	str	r0, [r5, #16]
 800a342:	6169      	str	r1, [r5, #20]
			strcpy(p->grade,"6C");
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800a34a:	4aa5      	ldr	r2, [pc, #660]	; (800a5e0 <problem_fetch+0x8f1c>)
 800a34c:	8811      	ldrh	r1, [r2, #0]
 800a34e:	7892      	ldrb	r2, [r2, #2]
 800a350:	8019      	strh	r1, [r3, #0]
 800a352:	709a      	strb	r2, [r3, #2]
			p->moveSize = 8;
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	2208      	movs	r2, #8
 800a358:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"C,G,E,D,F,I,F,I");
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	33a4      	adds	r3, #164	; 0xa4
 800a35e:	4aa1      	ldr	r2, [pc, #644]	; (800a5e4 <problem_fetch+0x8f20>)
 800a360:	461c      	mov	r4, r3
 800a362:	4615      	mov	r5, r2
 800a364:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a366:	6020      	str	r0, [r4, #0]
 800a368:	6061      	str	r1, [r4, #4]
 800a36a:	60a2      	str	r2, [r4, #8]
 800a36c:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,6,8,11,11,14,13,18");
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	3304      	adds	r3, #4
 800a372:	4a9d      	ldr	r2, [pc, #628]	; (800a5e8 <problem_fetch+0x8f24>)
 800a374:	461d      	mov	r5, r3
 800a376:	4614      	mov	r4, r2
 800a378:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a37a:	6028      	str	r0, [r5, #0]
 800a37c:	6069      	str	r1, [r5, #4]
 800a37e:	60aa      	str	r2, [r5, #8]
 800a380:	60eb      	str	r3, [r5, #12]
 800a382:	6820      	ldr	r0, [r4, #0]
 800a384:	6128      	str	r0, [r5, #16]
 800a386:	7923      	ldrb	r3, [r4, #4]
 800a388:	752b      	strb	r3, [r5, #20]
			strcpy(p->startFinish,"d,s,d,d,d,d,d,e");
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800a390:	4a96      	ldr	r2, [pc, #600]	; (800a5ec <problem_fetch+0x8f28>)
 800a392:	461c      	mov	r4, r3
 800a394:	4615      	mov	r5, r2
 800a396:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a398:	6020      	str	r0, [r4, #0]
 800a39a:	6061      	str	r1, [r4, #4]
 800a39c:	60a2      	str	r2, [r4, #8]
 800a39e:	60e3      	str	r3, [r4, #12]
			break;
 800a3a0:	f012 b8c0 	b.w	801c524 <problem_fetch+0x1ae60>
		case 246 :
			strcpy(p->name,"BLACK IS WHERE YOU AT");
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800a3aa:	4a91      	ldr	r2, [pc, #580]	; (800a5f0 <problem_fetch+0x8f2c>)
 800a3ac:	461d      	mov	r5, r3
 800a3ae:	4614      	mov	r4, r2
 800a3b0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a3b2:	6028      	str	r0, [r5, #0]
 800a3b4:	6069      	str	r1, [r5, #4]
 800a3b6:	60aa      	str	r2, [r5, #8]
 800a3b8:	60eb      	str	r3, [r5, #12]
 800a3ba:	6820      	ldr	r0, [r4, #0]
 800a3bc:	6128      	str	r0, [r5, #16]
 800a3be:	88a3      	ldrh	r3, [r4, #4]
 800a3c0:	82ab      	strh	r3, [r5, #20]
			strcpy(p->grade,"7A");
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800a3c8:	4a8a      	ldr	r2, [pc, #552]	; (800a5f4 <problem_fetch+0x8f30>)
 800a3ca:	8811      	ldrh	r1, [r2, #0]
 800a3cc:	7892      	ldrb	r2, [r2, #2]
 800a3ce:	8019      	strh	r1, [r3, #0]
 800a3d0:	709a      	strb	r2, [r3, #2]
			p->moveSize = 8;
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	2208      	movs	r2, #8
 800a3d6:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"E,G,E,E,B,D,B,E");
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	33a4      	adds	r3, #164	; 0xa4
 800a3dc:	4a86      	ldr	r2, [pc, #536]	; (800a5f8 <problem_fetch+0x8f34>)
 800a3de:	461c      	mov	r4, r3
 800a3e0:	4615      	mov	r5, r2
 800a3e2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a3e4:	6020      	str	r0, [r4, #0]
 800a3e6:	6061      	str	r1, [r4, #4]
 800a3e8:	60a2      	str	r2, [r4, #8]
 800a3ea:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"6,4,9,12,15,18,12,16");
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	3304      	adds	r3, #4
 800a3f0:	4a82      	ldr	r2, [pc, #520]	; (800a5fc <problem_fetch+0x8f38>)
 800a3f2:	461d      	mov	r5, r3
 800a3f4:	4614      	mov	r4, r2
 800a3f6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a3f8:	6028      	str	r0, [r5, #0]
 800a3fa:	6069      	str	r1, [r5, #4]
 800a3fc:	60aa      	str	r2, [r5, #8]
 800a3fe:	60eb      	str	r3, [r5, #12]
 800a400:	6820      	ldr	r0, [r4, #0]
 800a402:	6128      	str	r0, [r5, #16]
 800a404:	7923      	ldrb	r3, [r4, #4]
 800a406:	752b      	strb	r3, [r5, #20]
			strcpy(p->startFinish,"s,s,d,d,d,e,d,d");
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800a40e:	4a7c      	ldr	r2, [pc, #496]	; (800a600 <problem_fetch+0x8f3c>)
 800a410:	461c      	mov	r4, r3
 800a412:	4615      	mov	r5, r2
 800a414:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a416:	6020      	str	r0, [r4, #0]
 800a418:	6061      	str	r1, [r4, #4]
 800a41a:	60a2      	str	r2, [r4, #8]
 800a41c:	60e3      	str	r3, [r4, #12]
			break;
 800a41e:	f012 b881 	b.w	801c524 <problem_fetch+0x1ae60>
		case 247 :
			strcpy(p->name,"LORD VADER");
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800a428:	4976      	ldr	r1, [pc, #472]	; (800a604 <problem_fetch+0x8f40>)
 800a42a:	461a      	mov	r2, r3
 800a42c:	460b      	mov	r3, r1
 800a42e:	cb03      	ldmia	r3!, {r0, r1}
 800a430:	6010      	str	r0, [r2, #0]
 800a432:	6051      	str	r1, [r2, #4]
 800a434:	8819      	ldrh	r1, [r3, #0]
 800a436:	789b      	ldrb	r3, [r3, #2]
 800a438:	8111      	strh	r1, [r2, #8]
 800a43a:	7293      	strb	r3, [r2, #10]
			strcpy(p->grade,"6C+");
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800a442:	4a71      	ldr	r2, [pc, #452]	; (800a608 <problem_fetch+0x8f44>)
 800a444:	6810      	ldr	r0, [r2, #0]
 800a446:	6018      	str	r0, [r3, #0]
			p->moveSize = 8;
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	2208      	movs	r2, #8
 800a44c:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"C,C,H,F,E,G,D,D");
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	33a4      	adds	r3, #164	; 0xa4
 800a452:	4a6e      	ldr	r2, [pc, #440]	; (800a60c <problem_fetch+0x8f48>)
 800a454:	461c      	mov	r4, r3
 800a456:	4615      	mov	r5, r2
 800a458:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a45a:	6020      	str	r0, [r4, #0]
 800a45c:	6061      	str	r1, [r4, #4]
 800a45e:	60a2      	str	r2, [r4, #8]
 800a460:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,8,10,13,6,14,15,18");
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	3304      	adds	r3, #4
 800a466:	4a6a      	ldr	r2, [pc, #424]	; (800a610 <problem_fetch+0x8f4c>)
 800a468:	461d      	mov	r5, r3
 800a46a:	4614      	mov	r4, r2
 800a46c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a46e:	6028      	str	r0, [r5, #0]
 800a470:	6069      	str	r1, [r5, #4]
 800a472:	60aa      	str	r2, [r5, #8]
 800a474:	60eb      	str	r3, [r5, #12]
 800a476:	6820      	ldr	r0, [r4, #0]
 800a478:	6128      	str	r0, [r5, #16]
 800a47a:	7923      	ldrb	r3, [r4, #4]
 800a47c:	752b      	strb	r3, [r5, #20]
			strcpy(p->startFinish,"s,d,d,d,s,d,d,e");
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800a484:	4a63      	ldr	r2, [pc, #396]	; (800a614 <problem_fetch+0x8f50>)
 800a486:	461c      	mov	r4, r3
 800a488:	4615      	mov	r5, r2
 800a48a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a48c:	6020      	str	r0, [r4, #0]
 800a48e:	6061      	str	r1, [r4, #4]
 800a490:	60a2      	str	r2, [r4, #8]
 800a492:	60e3      	str	r3, [r4, #12]
			break;
 800a494:	f012 b846 	b.w	801c524 <problem_fetch+0x1ae60>
		case 248 :
			strcpy(p->name,"WOOO");
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800a49e:	4a5e      	ldr	r2, [pc, #376]	; (800a618 <problem_fetch+0x8f54>)
 800a4a0:	6810      	ldr	r0, [r2, #0]
 800a4a2:	6018      	str	r0, [r3, #0]
 800a4a4:	7912      	ldrb	r2, [r2, #4]
 800a4a6:	711a      	strb	r2, [r3, #4]
			strcpy(p->grade,"6B+");
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800a4ae:	4a5b      	ldr	r2, [pc, #364]	; (800a61c <problem_fetch+0x8f58>)
 800a4b0:	6810      	ldr	r0, [r2, #0]
 800a4b2:	6018      	str	r0, [r3, #0]
			p->moveSize = 8;
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	2208      	movs	r2, #8
 800a4b8:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,J,H,G,F,H,G,I");
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	33a4      	adds	r3, #164	; 0xa4
 800a4be:	4a58      	ldr	r2, [pc, #352]	; (800a620 <problem_fetch+0x8f5c>)
 800a4c0:	461c      	mov	r4, r3
 800a4c2:	4615      	mov	r5, r2
 800a4c4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a4c6:	6020      	str	r0, [r4, #0]
 800a4c8:	6061      	str	r1, [r4, #4]
 800a4ca:	60a2      	str	r2, [r4, #8]
 800a4cc:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,5,8,9,13,16,17,18");
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	3304      	adds	r3, #4
 800a4d2:	4a54      	ldr	r2, [pc, #336]	; (800a624 <problem_fetch+0x8f60>)
 800a4d4:	461d      	mov	r5, r3
 800a4d6:	4614      	mov	r4, r2
 800a4d8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a4da:	6028      	str	r0, [r5, #0]
 800a4dc:	6069      	str	r1, [r5, #4]
 800a4de:	60aa      	str	r2, [r5, #8]
 800a4e0:	60eb      	str	r3, [r5, #12]
 800a4e2:	6820      	ldr	r0, [r4, #0]
 800a4e4:	6128      	str	r0, [r5, #16]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,e");
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800a4ec:	4a4e      	ldr	r2, [pc, #312]	; (800a628 <problem_fetch+0x8f64>)
 800a4ee:	461c      	mov	r4, r3
 800a4f0:	4615      	mov	r5, r2
 800a4f2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a4f4:	6020      	str	r0, [r4, #0]
 800a4f6:	6061      	str	r1, [r4, #4]
 800a4f8:	60a2      	str	r2, [r4, #8]
 800a4fa:	60e3      	str	r3, [r4, #12]
			break;
 800a4fc:	f012 b812 	b.w	801c524 <problem_fetch+0x1ae60>
		case 249 :
			strcpy(p->name,"YAYYY");
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800a506:	4a49      	ldr	r2, [pc, #292]	; (800a62c <problem_fetch+0x8f68>)
 800a508:	6810      	ldr	r0, [r2, #0]
 800a50a:	6018      	str	r0, [r3, #0]
 800a50c:	8892      	ldrh	r2, [r2, #4]
 800a50e:	809a      	strh	r2, [r3, #4]
			strcpy(p->grade,"6B+");
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800a516:	4a41      	ldr	r2, [pc, #260]	; (800a61c <problem_fetch+0x8f58>)
 800a518:	6810      	ldr	r0, [r2, #0]
 800a51a:	6018      	str	r0, [r3, #0]
			p->moveSize = 8;
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	2208      	movs	r2, #8
 800a520:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,J,H,G,H,G,H,I");
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	33a4      	adds	r3, #164	; 0xa4
 800a526:	4a42      	ldr	r2, [pc, #264]	; (800a630 <problem_fetch+0x8f6c>)
 800a528:	461c      	mov	r4, r3
 800a52a:	4615      	mov	r5, r2
 800a52c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a52e:	6020      	str	r0, [r4, #0]
 800a530:	6061      	str	r1, [r4, #4]
 800a532:	60a2      	str	r2, [r4, #8]
 800a534:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,5,8,9,12,15,16,18");
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	3304      	adds	r3, #4
 800a53a:	4a3e      	ldr	r2, [pc, #248]	; (800a634 <problem_fetch+0x8f70>)
 800a53c:	461d      	mov	r5, r3
 800a53e:	4614      	mov	r4, r2
 800a540:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a542:	6028      	str	r0, [r5, #0]
 800a544:	6069      	str	r1, [r5, #4]
 800a546:	60aa      	str	r2, [r5, #8]
 800a548:	60eb      	str	r3, [r5, #12]
 800a54a:	6820      	ldr	r0, [r4, #0]
 800a54c:	6128      	str	r0, [r5, #16]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,e");
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800a554:	4a34      	ldr	r2, [pc, #208]	; (800a628 <problem_fetch+0x8f64>)
 800a556:	461c      	mov	r4, r3
 800a558:	4615      	mov	r5, r2
 800a55a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a55c:	6020      	str	r0, [r4, #0]
 800a55e:	6061      	str	r1, [r4, #4]
 800a560:	60a2      	str	r2, [r4, #8]
 800a562:	60e3      	str	r3, [r4, #12]
			break;
 800a564:	f011 bfde 	b.w	801c524 <problem_fetch+0x1ae60>
		case 250 :
			strcpy(p->name,"BEST PROBLEM 567");
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800a56e:	4a32      	ldr	r2, [pc, #200]	; (800a638 <problem_fetch+0x8f74>)
 800a570:	461d      	mov	r5, r3
 800a572:	4614      	mov	r4, r2
 800a574:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a576:	6028      	str	r0, [r5, #0]
 800a578:	6069      	str	r1, [r5, #4]
 800a57a:	60aa      	str	r2, [r5, #8]
 800a57c:	60eb      	str	r3, [r5, #12]
 800a57e:	7823      	ldrb	r3, [r4, #0]
 800a580:	742b      	strb	r3, [r5, #16]
			strcpy(p->grade,"6C");
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800a588:	4a15      	ldr	r2, [pc, #84]	; (800a5e0 <problem_fetch+0x8f1c>)
 800a58a:	8811      	ldrh	r1, [r2, #0]
 800a58c:	7892      	ldrb	r2, [r2, #2]
 800a58e:	8019      	strh	r1, [r3, #0]
 800a590:	709a      	strb	r2, [r3, #2]
			p->moveSize = 6;
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	2206      	movs	r2, #6
 800a596:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"E,E,H,E,A,G");
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	33a4      	adds	r3, #164	; 0xa4
 800a59c:	4a27      	ldr	r2, [pc, #156]	; (800a63c <problem_fetch+0x8f78>)
 800a59e:	461c      	mov	r4, r3
 800a5a0:	4613      	mov	r3, r2
 800a5a2:	cb07      	ldmia	r3!, {r0, r1, r2}
 800a5a4:	6020      	str	r0, [r4, #0]
 800a5a6:	6061      	str	r1, [r4, #4]
 800a5a8:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"6,8,13,14,18,4");
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	3304      	adds	r3, #4
 800a5ae:	4a24      	ldr	r2, [pc, #144]	; (800a640 <problem_fetch+0x8f7c>)
 800a5b0:	461c      	mov	r4, r3
 800a5b2:	4613      	mov	r3, r2
 800a5b4:	cb07      	ldmia	r3!, {r0, r1, r2}
 800a5b6:	6020      	str	r0, [r4, #0]
 800a5b8:	6061      	str	r1, [r4, #4]
 800a5ba:	60a2      	str	r2, [r4, #8]
 800a5bc:	881a      	ldrh	r2, [r3, #0]
 800a5be:	789b      	ldrb	r3, [r3, #2]
 800a5c0:	81a2      	strh	r2, [r4, #12]
 800a5c2:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish,"d,d,d,d,e,s");
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800a5ca:	4a1e      	ldr	r2, [pc, #120]	; (800a644 <problem_fetch+0x8f80>)
 800a5cc:	461c      	mov	r4, r3
 800a5ce:	4613      	mov	r3, r2
 800a5d0:	cb07      	ldmia	r3!, {r0, r1, r2}
 800a5d2:	6020      	str	r0, [r4, #0]
 800a5d4:	6061      	str	r1, [r4, #4]
 800a5d6:	60a2      	str	r2, [r4, #8]
			break;
 800a5d8:	f011 bfa4 	b.w	801c524 <problem_fetch+0x1ae60>
 800a5dc:	08026a38 	.word	0x08026a38
 800a5e0:	08023920 	.word	0x08023920
 800a5e4:	08026a50 	.word	0x08026a50
 800a5e8:	08026a60 	.word	0x08026a60
 800a5ec:	08026658 	.word	0x08026658
 800a5f0:	08026a78 	.word	0x08026a78
 800a5f4:	08023814 	.word	0x08023814
 800a5f8:	08026a90 	.word	0x08026a90
 800a5fc:	08026aa0 	.word	0x08026aa0
 800a600:	08026ab8 	.word	0x08026ab8
 800a604:	08026ac8 	.word	0x08026ac8
 800a608:	080238ec 	.word	0x080238ec
 800a60c:	08026ad4 	.word	0x08026ad4
 800a610:	08026ae4 	.word	0x08026ae4
 800a614:	08026afc 	.word	0x08026afc
 800a618:	08026b0c 	.word	0x08026b0c
 800a61c:	08023854 	.word	0x08023854
 800a620:	08026b14 	.word	0x08026b14
 800a624:	08026b24 	.word	0x08026b24
 800a628:	08023978 	.word	0x08023978
 800a62c:	08026b38 	.word	0x08026b38
 800a630:	08026b40 	.word	0x08026b40
 800a634:	08026b50 	.word	0x08026b50
 800a638:	08026b64 	.word	0x08026b64
 800a63c:	08026b78 	.word	0x08026b78
 800a640:	08026b84 	.word	0x08026b84
 800a644:	08026b94 	.word	0x08026b94
		case 251 :
			strcpy(p->name,"WORLD CUP");
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800a64e:	49c2      	ldr	r1, [pc, #776]	; (800a958 <problem_fetch+0x9294>)
 800a650:	461a      	mov	r2, r3
 800a652:	460b      	mov	r3, r1
 800a654:	cb03      	ldmia	r3!, {r0, r1}
 800a656:	6010      	str	r0, [r2, #0]
 800a658:	6051      	str	r1, [r2, #4]
 800a65a:	881b      	ldrh	r3, [r3, #0]
 800a65c:	8113      	strh	r3, [r2, #8]
			strcpy(p->grade,"6B+");
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800a664:	4abd      	ldr	r2, [pc, #756]	; (800a95c <problem_fetch+0x9298>)
 800a666:	6810      	ldr	r0, [r2, #0]
 800a668:	6018      	str	r0, [r3, #0]
			p->moveSize = 9;
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	2209      	movs	r2, #9
 800a66e:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,G,H,H,I,J,G,J,I");
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	33a4      	adds	r3, #164	; 0xa4
 800a674:	4aba      	ldr	r2, [pc, #744]	; (800a960 <problem_fetch+0x929c>)
 800a676:	461d      	mov	r5, r3
 800a678:	4614      	mov	r4, r2
 800a67a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a67c:	6028      	str	r0, [r5, #0]
 800a67e:	6069      	str	r1, [r5, #4]
 800a680:	60aa      	str	r2, [r5, #8]
 800a682:	60eb      	str	r3, [r5, #12]
 800a684:	8823      	ldrh	r3, [r4, #0]
 800a686:	822b      	strh	r3, [r5, #16]
			strcpy(p->moveNumbers,"5,6,5,10,10,13,15,16,18");
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	3304      	adds	r3, #4
 800a68c:	4ab5      	ldr	r2, [pc, #724]	; (800a964 <problem_fetch+0x92a0>)
 800a68e:	461d      	mov	r5, r3
 800a690:	4614      	mov	r4, r2
 800a692:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a694:	6028      	str	r0, [r5, #0]
 800a696:	6069      	str	r1, [r5, #4]
 800a698:	60aa      	str	r2, [r5, #8]
 800a69a:	60eb      	str	r3, [r5, #12]
 800a69c:	cc03      	ldmia	r4!, {r0, r1}
 800a69e:	6128      	str	r0, [r5, #16]
 800a6a0:	6169      	str	r1, [r5, #20]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,d,e");
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800a6a8:	4aaf      	ldr	r2, [pc, #700]	; (800a968 <problem_fetch+0x92a4>)
 800a6aa:	461d      	mov	r5, r3
 800a6ac:	4614      	mov	r4, r2
 800a6ae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a6b0:	6028      	str	r0, [r5, #0]
 800a6b2:	6069      	str	r1, [r5, #4]
 800a6b4:	60aa      	str	r2, [r5, #8]
 800a6b6:	60eb      	str	r3, [r5, #12]
 800a6b8:	8823      	ldrh	r3, [r4, #0]
 800a6ba:	822b      	strh	r3, [r5, #16]
			break;
 800a6bc:	f011 bf32 	b.w	801c524 <problem_fetch+0x1ae60>
		case 252 :
			strcpy(p->name,"ALONE IN THE DARK");
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800a6c6:	4aa9      	ldr	r2, [pc, #676]	; (800a96c <problem_fetch+0x92a8>)
 800a6c8:	461d      	mov	r5, r3
 800a6ca:	4614      	mov	r4, r2
 800a6cc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a6ce:	6028      	str	r0, [r5, #0]
 800a6d0:	6069      	str	r1, [r5, #4]
 800a6d2:	60aa      	str	r2, [r5, #8]
 800a6d4:	60eb      	str	r3, [r5, #12]
 800a6d6:	8823      	ldrh	r3, [r4, #0]
 800a6d8:	822b      	strh	r3, [r5, #16]
			strcpy(p->grade,"7A");
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800a6e0:	4aa3      	ldr	r2, [pc, #652]	; (800a970 <problem_fetch+0x92ac>)
 800a6e2:	8811      	ldrh	r1, [r2, #0]
 800a6e4:	7892      	ldrb	r2, [r2, #2]
 800a6e6:	8019      	strh	r1, [r3, #0]
 800a6e8:	709a      	strb	r2, [r3, #2]
			p->moveSize = 6;
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	2206      	movs	r2, #6
 800a6ee:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,E,I,G,I,I");
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	33a4      	adds	r3, #164	; 0xa4
 800a6f4:	4a9f      	ldr	r2, [pc, #636]	; (800a974 <problem_fetch+0x92b0>)
 800a6f6:	461c      	mov	r4, r3
 800a6f8:	4613      	mov	r3, r2
 800a6fa:	cb07      	ldmia	r3!, {r0, r1, r2}
 800a6fc:	6020      	str	r0, [r4, #0]
 800a6fe:	6061      	str	r1, [r4, #4]
 800a700:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,8,10,14,14,18");
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	3304      	adds	r3, #4
 800a706:	4a9c      	ldr	r2, [pc, #624]	; (800a978 <problem_fetch+0x92b4>)
 800a708:	461c      	mov	r4, r3
 800a70a:	4615      	mov	r5, r2
 800a70c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a70e:	6020      	str	r0, [r4, #0]
 800a710:	6061      	str	r1, [r4, #4]
 800a712:	60a2      	str	r2, [r4, #8]
 800a714:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800a71c:	4a97      	ldr	r2, [pc, #604]	; (800a97c <problem_fetch+0x92b8>)
 800a71e:	461c      	mov	r4, r3
 800a720:	4613      	mov	r3, r2
 800a722:	cb07      	ldmia	r3!, {r0, r1, r2}
 800a724:	6020      	str	r0, [r4, #0]
 800a726:	6061      	str	r1, [r4, #4]
 800a728:	60a2      	str	r2, [r4, #8]
			break;
 800a72a:	f011 befb 	b.w	801c524 <problem_fetch+0x1ae60>
		case 253 :
			strcpy(p->name,"JUDEMANDUD");
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800a734:	4992      	ldr	r1, [pc, #584]	; (800a980 <problem_fetch+0x92bc>)
 800a736:	461a      	mov	r2, r3
 800a738:	460b      	mov	r3, r1
 800a73a:	cb03      	ldmia	r3!, {r0, r1}
 800a73c:	6010      	str	r0, [r2, #0]
 800a73e:	6051      	str	r1, [r2, #4]
 800a740:	8819      	ldrh	r1, [r3, #0]
 800a742:	789b      	ldrb	r3, [r3, #2]
 800a744:	8111      	strh	r1, [r2, #8]
 800a746:	7293      	strb	r3, [r2, #10]
			strcpy(p->grade,"7A");
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800a74e:	4a88      	ldr	r2, [pc, #544]	; (800a970 <problem_fetch+0x92ac>)
 800a750:	8811      	ldrh	r1, [r2, #0]
 800a752:	7892      	ldrb	r2, [r2, #2]
 800a754:	8019      	strh	r1, [r3, #0]
 800a756:	709a      	strb	r2, [r3, #2]
			p->moveSize = 7;
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	2207      	movs	r2, #7
 800a75c:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"H,E,E,A,B,B,A");
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	33a4      	adds	r3, #164	; 0xa4
 800a762:	4a88      	ldr	r2, [pc, #544]	; (800a984 <problem_fetch+0x92c0>)
 800a764:	461c      	mov	r4, r3
 800a766:	4613      	mov	r3, r2
 800a768:	cb07      	ldmia	r3!, {r0, r1, r2}
 800a76a:	6020      	str	r0, [r4, #0]
 800a76c:	6061      	str	r1, [r4, #4]
 800a76e:	60a2      	str	r2, [r4, #8]
 800a770:	881b      	ldrh	r3, [r3, #0]
 800a772:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,9,6,9,12,15,18");
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	3304      	adds	r3, #4
 800a778:	4a83      	ldr	r2, [pc, #524]	; (800a988 <problem_fetch+0x92c4>)
 800a77a:	461d      	mov	r5, r3
 800a77c:	4614      	mov	r4, r2
 800a77e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a780:	6028      	str	r0, [r5, #0]
 800a782:	6069      	str	r1, [r5, #4]
 800a784:	60aa      	str	r2, [r5, #8]
 800a786:	60eb      	str	r3, [r5, #12]
 800a788:	7823      	ldrb	r3, [r4, #0]
 800a78a:	742b      	strb	r3, [r5, #16]
			strcpy(p->startFinish,"s,d,s,d,d,d,e");
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800a792:	4a7e      	ldr	r2, [pc, #504]	; (800a98c <problem_fetch+0x92c8>)
 800a794:	461c      	mov	r4, r3
 800a796:	4613      	mov	r3, r2
 800a798:	cb07      	ldmia	r3!, {r0, r1, r2}
 800a79a:	6020      	str	r0, [r4, #0]
 800a79c:	6061      	str	r1, [r4, #4]
 800a79e:	60a2      	str	r2, [r4, #8]
 800a7a0:	881b      	ldrh	r3, [r3, #0]
 800a7a2:	81a3      	strh	r3, [r4, #12]
			break;
 800a7a4:	f011 bebe 	b.w	801c524 <problem_fetch+0x1ae60>
		case 254 :
			strcpy(p->name,"BLACK MARINO");
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800a7ae:	4a78      	ldr	r2, [pc, #480]	; (800a990 <problem_fetch+0x92cc>)
 800a7b0:	461c      	mov	r4, r3
 800a7b2:	4613      	mov	r3, r2
 800a7b4:	cb07      	ldmia	r3!, {r0, r1, r2}
 800a7b6:	6020      	str	r0, [r4, #0]
 800a7b8:	6061      	str	r1, [r4, #4]
 800a7ba:	60a2      	str	r2, [r4, #8]
 800a7bc:	781b      	ldrb	r3, [r3, #0]
 800a7be:	7323      	strb	r3, [r4, #12]
			strcpy(p->grade,"6C+");
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800a7c6:	4a73      	ldr	r2, [pc, #460]	; (800a994 <problem_fetch+0x92d0>)
 800a7c8:	6810      	ldr	r0, [r2, #0]
 800a7ca:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	2206      	movs	r2, #6
 800a7d0:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"E,J,H,C,E,D");
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	33a4      	adds	r3, #164	; 0xa4
 800a7d6:	4a70      	ldr	r2, [pc, #448]	; (800a998 <problem_fetch+0x92d4>)
 800a7d8:	461c      	mov	r4, r3
 800a7da:	4613      	mov	r3, r2
 800a7dc:	cb07      	ldmia	r3!, {r0, r1, r2}
 800a7de:	6020      	str	r0, [r4, #0]
 800a7e0:	6061      	str	r1, [r4, #4]
 800a7e2:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"6,5,10,13,16,18");
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	3304      	adds	r3, #4
 800a7e8:	4a6c      	ldr	r2, [pc, #432]	; (800a99c <problem_fetch+0x92d8>)
 800a7ea:	461c      	mov	r4, r3
 800a7ec:	4615      	mov	r5, r2
 800a7ee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a7f0:	6020      	str	r0, [r4, #0]
 800a7f2:	6061      	str	r1, [r4, #4]
 800a7f4:	60a2      	str	r2, [r4, #8]
 800a7f6:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,s,d,d,d,e");
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800a7fe:	4a68      	ldr	r2, [pc, #416]	; (800a9a0 <problem_fetch+0x92dc>)
 800a800:	461c      	mov	r4, r3
 800a802:	4613      	mov	r3, r2
 800a804:	cb07      	ldmia	r3!, {r0, r1, r2}
 800a806:	6020      	str	r0, [r4, #0]
 800a808:	6061      	str	r1, [r4, #4]
 800a80a:	60a2      	str	r2, [r4, #8]
			break;
 800a80c:	f011 be8a 	b.w	801c524 <problem_fetch+0x1ae60>
		case 255 :
			strcpy(p->name,"KIWAK");
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800a816:	4a63      	ldr	r2, [pc, #396]	; (800a9a4 <problem_fetch+0x92e0>)
 800a818:	6810      	ldr	r0, [r2, #0]
 800a81a:	6018      	str	r0, [r3, #0]
 800a81c:	8892      	ldrh	r2, [r2, #4]
 800a81e:	809a      	strh	r2, [r3, #4]
			strcpy(p->grade,"6B+");
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800a826:	4a4d      	ldr	r2, [pc, #308]	; (800a95c <problem_fetch+0x9298>)
 800a828:	6810      	ldr	r0, [r2, #0]
 800a82a:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	2207      	movs	r2, #7
 800a830:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,G,H,E,G,D,A");
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	33a4      	adds	r3, #164	; 0xa4
 800a836:	4a5c      	ldr	r2, [pc, #368]	; (800a9a8 <problem_fetch+0x92e4>)
 800a838:	461c      	mov	r4, r3
 800a83a:	4613      	mov	r3, r2
 800a83c:	cb07      	ldmia	r3!, {r0, r1, r2}
 800a83e:	6020      	str	r0, [r4, #0]
 800a840:	6061      	str	r1, [r4, #4]
 800a842:	60a2      	str	r2, [r4, #8]
 800a844:	881b      	ldrh	r3, [r3, #0]
 800a846:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,6,12,14,9,15,18");
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	3304      	adds	r3, #4
 800a84c:	4a57      	ldr	r2, [pc, #348]	; (800a9ac <problem_fetch+0x92e8>)
 800a84e:	461d      	mov	r5, r3
 800a850:	4614      	mov	r4, r2
 800a852:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a854:	6028      	str	r0, [r5, #0]
 800a856:	6069      	str	r1, [r5, #4]
 800a858:	60aa      	str	r2, [r5, #8]
 800a85a:	60eb      	str	r3, [r5, #12]
 800a85c:	8823      	ldrh	r3, [r4, #0]
 800a85e:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800a866:	4a52      	ldr	r2, [pc, #328]	; (800a9b0 <problem_fetch+0x92ec>)
 800a868:	461c      	mov	r4, r3
 800a86a:	4613      	mov	r3, r2
 800a86c:	cb07      	ldmia	r3!, {r0, r1, r2}
 800a86e:	6020      	str	r0, [r4, #0]
 800a870:	6061      	str	r1, [r4, #4]
 800a872:	60a2      	str	r2, [r4, #8]
 800a874:	881b      	ldrh	r3, [r3, #0]
 800a876:	81a3      	strh	r3, [r4, #12]
			break;
 800a878:	f011 be54 	b.w	801c524 <problem_fetch+0x1ae60>
		case 256 :
			strcpy(p->name,"RIESKO");
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800a882:	4a4c      	ldr	r2, [pc, #304]	; (800a9b4 <problem_fetch+0x92f0>)
 800a884:	6810      	ldr	r0, [r2, #0]
 800a886:	6018      	str	r0, [r3, #0]
 800a888:	8891      	ldrh	r1, [r2, #4]
 800a88a:	7992      	ldrb	r2, [r2, #6]
 800a88c:	8099      	strh	r1, [r3, #4]
 800a88e:	719a      	strb	r2, [r3, #6]
			strcpy(p->grade,"6B+");
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800a896:	4a31      	ldr	r2, [pc, #196]	; (800a95c <problem_fetch+0x9298>)
 800a898:	6810      	ldr	r0, [r2, #0]
 800a89a:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	2206      	movs	r2, #6
 800a8a0:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,G,K,F,E,A");
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	33a4      	adds	r3, #164	; 0xa4
 800a8a6:	4a44      	ldr	r2, [pc, #272]	; (800a9b8 <problem_fetch+0x92f4>)
 800a8a8:	461c      	mov	r4, r3
 800a8aa:	4613      	mov	r3, r2
 800a8ac:	cb07      	ldmia	r3!, {r0, r1, r2}
 800a8ae:	6020      	str	r0, [r4, #0]
 800a8b0:	6061      	str	r1, [r4, #4]
 800a8b2:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,6,9,11,14,18");
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	3304      	adds	r3, #4
 800a8b8:	4a40      	ldr	r2, [pc, #256]	; (800a9bc <problem_fetch+0x92f8>)
 800a8ba:	461c      	mov	r4, r3
 800a8bc:	4613      	mov	r3, r2
 800a8be:	cb07      	ldmia	r3!, {r0, r1, r2}
 800a8c0:	6020      	str	r0, [r4, #0]
 800a8c2:	6061      	str	r1, [r4, #4]
 800a8c4:	60a2      	str	r2, [r4, #8]
 800a8c6:	881a      	ldrh	r2, [r3, #0]
 800a8c8:	789b      	ldrb	r3, [r3, #2]
 800a8ca:	81a2      	strh	r2, [r4, #12]
 800a8cc:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish,"s,s,d,d,d,e");
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800a8d4:	4a32      	ldr	r2, [pc, #200]	; (800a9a0 <problem_fetch+0x92dc>)
 800a8d6:	461c      	mov	r4, r3
 800a8d8:	4613      	mov	r3, r2
 800a8da:	cb07      	ldmia	r3!, {r0, r1, r2}
 800a8dc:	6020      	str	r0, [r4, #0]
 800a8de:	6061      	str	r1, [r4, #4]
 800a8e0:	60a2      	str	r2, [r4, #8]
			break;
 800a8e2:	f011 be1f 	b.w	801c524 <problem_fetch+0x1ae60>
		case 257 :
			strcpy(p->name,"XCRAG");
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800a8ec:	4a34      	ldr	r2, [pc, #208]	; (800a9c0 <problem_fetch+0x92fc>)
 800a8ee:	6810      	ldr	r0, [r2, #0]
 800a8f0:	6018      	str	r0, [r3, #0]
 800a8f2:	8892      	ldrh	r2, [r2, #4]
 800a8f4:	809a      	strh	r2, [r3, #4]
			strcpy(p->grade,"6C");
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800a8fc:	4a31      	ldr	r2, [pc, #196]	; (800a9c4 <problem_fetch+0x9300>)
 800a8fe:	8811      	ldrh	r1, [r2, #0]
 800a900:	7892      	ldrb	r2, [r2, #2]
 800a902:	8019      	strh	r1, [r3, #0]
 800a904:	709a      	strb	r2, [r3, #2]
			p->moveSize = 7;
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	2207      	movs	r2, #7
 800a90a:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,J,H,G,C,E,I");
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	33a4      	adds	r3, #164	; 0xa4
 800a910:	4a2d      	ldr	r2, [pc, #180]	; (800a9c8 <problem_fetch+0x9304>)
 800a912:	461c      	mov	r4, r3
 800a914:	4613      	mov	r3, r2
 800a916:	cb07      	ldmia	r3!, {r0, r1, r2}
 800a918:	6020      	str	r0, [r4, #0]
 800a91a:	6061      	str	r1, [r4, #4]
 800a91c:	60a2      	str	r2, [r4, #8]
 800a91e:	881b      	ldrh	r3, [r3, #0]
 800a920:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,5,8,10,13,14,18");
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	3304      	adds	r3, #4
 800a926:	4a29      	ldr	r2, [pc, #164]	; (800a9cc <problem_fetch+0x9308>)
 800a928:	461d      	mov	r5, r3
 800a92a:	4614      	mov	r4, r2
 800a92c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a92e:	6028      	str	r0, [r5, #0]
 800a930:	6069      	str	r1, [r5, #4]
 800a932:	60aa      	str	r2, [r5, #8]
 800a934:	60eb      	str	r3, [r5, #12]
 800a936:	8823      	ldrh	r3, [r4, #0]
 800a938:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,s,d,d,d,d,e");
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800a940:	4a23      	ldr	r2, [pc, #140]	; (800a9d0 <problem_fetch+0x930c>)
 800a942:	461c      	mov	r4, r3
 800a944:	4613      	mov	r3, r2
 800a946:	cb07      	ldmia	r3!, {r0, r1, r2}
 800a948:	6020      	str	r0, [r4, #0]
 800a94a:	6061      	str	r1, [r4, #4]
 800a94c:	60a2      	str	r2, [r4, #8]
 800a94e:	881b      	ldrh	r3, [r3, #0]
 800a950:	81a3      	strh	r3, [r4, #12]
			break;
 800a952:	f011 bde7 	b.w	801c524 <problem_fetch+0x1ae60>
 800a956:	bf00      	nop
 800a958:	08026ba0 	.word	0x08026ba0
 800a95c:	08023854 	.word	0x08023854
 800a960:	08026bac 	.word	0x08026bac
 800a964:	08026bc0 	.word	0x08026bc0
 800a968:	08024838 	.word	0x08024838
 800a96c:	08026bd8 	.word	0x08026bd8
 800a970:	08023814 	.word	0x08023814
 800a974:	08026bec 	.word	0x08026bec
 800a978:	08026bf8 	.word	0x08026bf8
 800a97c:	08023bf0 	.word	0x08023bf0
 800a980:	08026c08 	.word	0x08026c08
 800a984:	08026c14 	.word	0x08026c14
 800a988:	08026c24 	.word	0x08026c24
 800a98c:	08026c38 	.word	0x08026c38
 800a990:	08026c48 	.word	0x08026c48
 800a994:	080238ec 	.word	0x080238ec
 800a998:	08026c58 	.word	0x08026c58
 800a99c:	08025f04 	.word	0x08025f04
 800a9a0:	08023834 	.word	0x08023834
 800a9a4:	08026c64 	.word	0x08026c64
 800a9a8:	08026c6c 	.word	0x08026c6c
 800a9ac:	08026c7c 	.word	0x08026c7c
 800a9b0:	080239dc 	.word	0x080239dc
 800a9b4:	08026c90 	.word	0x08026c90
 800a9b8:	08026c98 	.word	0x08026c98
 800a9bc:	08026ca4 	.word	0x08026ca4
 800a9c0:	08026cb4 	.word	0x08026cb4
 800a9c4:	08023920 	.word	0x08023920
 800a9c8:	08026cbc 	.word	0x08026cbc
 800a9cc:	08026ccc 	.word	0x08026ccc
 800a9d0:	080238cc 	.word	0x080238cc
		case 258 :
			strcpy(p->name,"LITTLE MAN ON CAMPUS");
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800a9da:	4ab2      	ldr	r2, [pc, #712]	; (800aca4 <problem_fetch+0x95e0>)
 800a9dc:	461d      	mov	r5, r3
 800a9de:	4614      	mov	r4, r2
 800a9e0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a9e2:	6028      	str	r0, [r5, #0]
 800a9e4:	6069      	str	r1, [r5, #4]
 800a9e6:	60aa      	str	r2, [r5, #8]
 800a9e8:	60eb      	str	r3, [r5, #12]
 800a9ea:	6820      	ldr	r0, [r4, #0]
 800a9ec:	6128      	str	r0, [r5, #16]
 800a9ee:	7923      	ldrb	r3, [r4, #4]
 800a9f0:	752b      	strb	r3, [r5, #20]
			strcpy(p->grade,"7B");
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800a9f8:	4aab      	ldr	r2, [pc, #684]	; (800aca8 <problem_fetch+0x95e4>)
 800a9fa:	8811      	ldrh	r1, [r2, #0]
 800a9fc:	7892      	ldrb	r2, [r2, #2]
 800a9fe:	8019      	strh	r1, [r3, #0]
 800aa00:	709a      	strb	r2, [r3, #2]
			p->moveSize = 6;
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	2206      	movs	r2, #6
 800aa06:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,B,F,H,K,I");
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	33a4      	adds	r3, #164	; 0xa4
 800aa0c:	4aa7      	ldr	r2, [pc, #668]	; (800acac <problem_fetch+0x95e8>)
 800aa0e:	461c      	mov	r4, r3
 800aa10:	4613      	mov	r3, r2
 800aa12:	cb07      	ldmia	r3!, {r0, r1, r2}
 800aa14:	6020      	str	r0, [r4, #0]
 800aa16:	6061      	str	r1, [r4, #4]
 800aa18:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,6,11,12,14,18");
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	3304      	adds	r3, #4
 800aa1e:	4aa4      	ldr	r2, [pc, #656]	; (800acb0 <problem_fetch+0x95ec>)
 800aa20:	461c      	mov	r4, r3
 800aa22:	4615      	mov	r5, r2
 800aa24:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800aa26:	6020      	str	r0, [r4, #0]
 800aa28:	6061      	str	r1, [r4, #4]
 800aa2a:	60a2      	str	r2, [r4, #8]
 800aa2c:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800aa34:	4a9f      	ldr	r2, [pc, #636]	; (800acb4 <problem_fetch+0x95f0>)
 800aa36:	461c      	mov	r4, r3
 800aa38:	4613      	mov	r3, r2
 800aa3a:	cb07      	ldmia	r3!, {r0, r1, r2}
 800aa3c:	6020      	str	r0, [r4, #0]
 800aa3e:	6061      	str	r1, [r4, #4]
 800aa40:	60a2      	str	r2, [r4, #8]
			break;
 800aa42:	f011 bd6f 	b.w	801c524 <problem_fetch+0x1ae60>
		case 259 :
			strcpy(p->name,"KILL HIM YOUR LEGS");
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800aa4c:	4a9a      	ldr	r2, [pc, #616]	; (800acb8 <problem_fetch+0x95f4>)
 800aa4e:	461d      	mov	r5, r3
 800aa50:	4614      	mov	r4, r2
 800aa52:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800aa54:	6028      	str	r0, [r5, #0]
 800aa56:	6069      	str	r1, [r5, #4]
 800aa58:	60aa      	str	r2, [r5, #8]
 800aa5a:	60eb      	str	r3, [r5, #12]
 800aa5c:	8823      	ldrh	r3, [r4, #0]
 800aa5e:	78a2      	ldrb	r2, [r4, #2]
 800aa60:	822b      	strh	r3, [r5, #16]
 800aa62:	4613      	mov	r3, r2
 800aa64:	74ab      	strb	r3, [r5, #18]
			strcpy(p->grade,"7B");
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800aa6c:	4a8e      	ldr	r2, [pc, #568]	; (800aca8 <problem_fetch+0x95e4>)
 800aa6e:	8811      	ldrh	r1, [r2, #0]
 800aa70:	7892      	ldrb	r2, [r2, #2]
 800aa72:	8019      	strh	r1, [r3, #0]
 800aa74:	709a      	strb	r2, [r3, #2]
			p->moveSize = 4;
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	2204      	movs	r2, #4
 800aa7a:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,H,C,I");
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	33a4      	adds	r3, #164	; 0xa4
 800aa80:	498e      	ldr	r1, [pc, #568]	; (800acbc <problem_fetch+0x95f8>)
 800aa82:	461a      	mov	r2, r3
 800aa84:	460b      	mov	r3, r1
 800aa86:	cb03      	ldmia	r3!, {r0, r1}
 800aa88:	6010      	str	r0, [r2, #0]
 800aa8a:	6051      	str	r1, [r2, #4]
			strcpy(p->moveNumbers,"4,10,13,18");
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	3304      	adds	r3, #4
 800aa90:	498b      	ldr	r1, [pc, #556]	; (800acc0 <problem_fetch+0x95fc>)
 800aa92:	461a      	mov	r2, r3
 800aa94:	460b      	mov	r3, r1
 800aa96:	cb03      	ldmia	r3!, {r0, r1}
 800aa98:	6010      	str	r0, [r2, #0]
 800aa9a:	6051      	str	r1, [r2, #4]
 800aa9c:	8819      	ldrh	r1, [r3, #0]
 800aa9e:	789b      	ldrb	r3, [r3, #2]
 800aaa0:	8111      	strh	r1, [r2, #8]
 800aaa2:	7293      	strb	r3, [r2, #10]
			strcpy(p->startFinish,"s,d,d,e");
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800aaaa:	4986      	ldr	r1, [pc, #536]	; (800acc4 <problem_fetch+0x9600>)
 800aaac:	461a      	mov	r2, r3
 800aaae:	460b      	mov	r3, r1
 800aab0:	cb03      	ldmia	r3!, {r0, r1}
 800aab2:	6010      	str	r0, [r2, #0]
 800aab4:	6051      	str	r1, [r2, #4]
			break;
 800aab6:	f011 bd35 	b.w	801c524 <problem_fetch+0x1ae60>
		case 260 :
			strcpy(p->name,"HOG TROUGH");
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800aac0:	4981      	ldr	r1, [pc, #516]	; (800acc8 <problem_fetch+0x9604>)
 800aac2:	461a      	mov	r2, r3
 800aac4:	460b      	mov	r3, r1
 800aac6:	cb03      	ldmia	r3!, {r0, r1}
 800aac8:	6010      	str	r0, [r2, #0]
 800aaca:	6051      	str	r1, [r2, #4]
 800aacc:	8819      	ldrh	r1, [r3, #0]
 800aace:	789b      	ldrb	r3, [r3, #2]
 800aad0:	8111      	strh	r1, [r2, #8]
 800aad2:	7293      	strb	r3, [r2, #10]
			strcpy(p->grade,"6B+");
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800aada:	4a7c      	ldr	r2, [pc, #496]	; (800accc <problem_fetch+0x9608>)
 800aadc:	6810      	ldr	r0, [r2, #0]
 800aade:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	2206      	movs	r2, #6
 800aae4:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,D,G,C,D,D");
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	33a4      	adds	r3, #164	; 0xa4
 800aaea:	4a79      	ldr	r2, [pc, #484]	; (800acd0 <problem_fetch+0x960c>)
 800aaec:	461c      	mov	r4, r3
 800aaee:	4613      	mov	r3, r2
 800aaf0:	cb07      	ldmia	r3!, {r0, r1, r2}
 800aaf2:	6020      	str	r0, [r4, #0]
 800aaf4:	6061      	str	r1, [r4, #4]
 800aaf6:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,7,9,13,15,18");
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	3304      	adds	r3, #4
 800aafc:	4a75      	ldr	r2, [pc, #468]	; (800acd4 <problem_fetch+0x9610>)
 800aafe:	461c      	mov	r4, r3
 800ab00:	4613      	mov	r3, r2
 800ab02:	cb07      	ldmia	r3!, {r0, r1, r2}
 800ab04:	6020      	str	r0, [r4, #0]
 800ab06:	6061      	str	r1, [r4, #4]
 800ab08:	60a2      	str	r2, [r4, #8]
 800ab0a:	881a      	ldrh	r2, [r3, #0]
 800ab0c:	789b      	ldrb	r3, [r3, #2]
 800ab0e:	81a2      	strh	r2, [r4, #12]
 800ab10:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800ab18:	4a66      	ldr	r2, [pc, #408]	; (800acb4 <problem_fetch+0x95f0>)
 800ab1a:	461c      	mov	r4, r3
 800ab1c:	4613      	mov	r3, r2
 800ab1e:	cb07      	ldmia	r3!, {r0, r1, r2}
 800ab20:	6020      	str	r0, [r4, #0]
 800ab22:	6061      	str	r1, [r4, #4]
 800ab24:	60a2      	str	r2, [r4, #8]
			break;
 800ab26:	f011 bcfd 	b.w	801c524 <problem_fetch+0x1ae60>
		case 261 :
			strcpy(p->name,"FLOOZY DOO");
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800ab30:	4969      	ldr	r1, [pc, #420]	; (800acd8 <problem_fetch+0x9614>)
 800ab32:	461a      	mov	r2, r3
 800ab34:	460b      	mov	r3, r1
 800ab36:	cb03      	ldmia	r3!, {r0, r1}
 800ab38:	6010      	str	r0, [r2, #0]
 800ab3a:	6051      	str	r1, [r2, #4]
 800ab3c:	8819      	ldrh	r1, [r3, #0]
 800ab3e:	789b      	ldrb	r3, [r3, #2]
 800ab40:	8111      	strh	r1, [r2, #8]
 800ab42:	7293      	strb	r3, [r2, #10]
			strcpy(p->grade,"7A+");
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800ab4a:	4a64      	ldr	r2, [pc, #400]	; (800acdc <problem_fetch+0x9618>)
 800ab4c:	6810      	ldr	r0, [r2, #0]
 800ab4e:	6018      	str	r0, [r3, #0]
			p->moveSize = 8;
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	2208      	movs	r2, #8
 800ab54:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,H,G,F,A,C,A,D");
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	33a4      	adds	r3, #164	; 0xa4
 800ab5a:	4a61      	ldr	r2, [pc, #388]	; (800ace0 <problem_fetch+0x961c>)
 800ab5c:	461c      	mov	r4, r3
 800ab5e:	4615      	mov	r5, r2
 800ab60:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ab62:	6020      	str	r0, [r4, #0]
 800ab64:	6061      	str	r1, [r4, #4]
 800ab66:	60a2      	str	r2, [r4, #8]
 800ab68:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,8,9,11,9,13,14,18");
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	3304      	adds	r3, #4
 800ab6e:	4a5d      	ldr	r2, [pc, #372]	; (800ace4 <problem_fetch+0x9620>)
 800ab70:	461d      	mov	r5, r3
 800ab72:	4614      	mov	r4, r2
 800ab74:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800ab76:	6028      	str	r0, [r5, #0]
 800ab78:	6069      	str	r1, [r5, #4]
 800ab7a:	60aa      	str	r2, [r5, #8]
 800ab7c:	60eb      	str	r3, [r5, #12]
 800ab7e:	6820      	ldr	r0, [r4, #0]
 800ab80:	6128      	str	r0, [r5, #16]
			strcpy(p->startFinish,"s,d,d,d,d,d,d,e");
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800ab88:	4a57      	ldr	r2, [pc, #348]	; (800ace8 <problem_fetch+0x9624>)
 800ab8a:	461c      	mov	r4, r3
 800ab8c:	4615      	mov	r5, r2
 800ab8e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ab90:	6020      	str	r0, [r4, #0]
 800ab92:	6061      	str	r1, [r4, #4]
 800ab94:	60a2      	str	r2, [r4, #8]
 800ab96:	60e3      	str	r3, [r4, #12]
			break;
 800ab98:	f011 bcc4 	b.w	801c524 <problem_fetch+0x1ae60>
		case 262 :
			strcpy(p->name,"SZECHUAN");
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800aba2:	4952      	ldr	r1, [pc, #328]	; (800acec <problem_fetch+0x9628>)
 800aba4:	461a      	mov	r2, r3
 800aba6:	460b      	mov	r3, r1
 800aba8:	cb03      	ldmia	r3!, {r0, r1}
 800abaa:	6010      	str	r0, [r2, #0]
 800abac:	6051      	str	r1, [r2, #4]
 800abae:	781b      	ldrb	r3, [r3, #0]
 800abb0:	7213      	strb	r3, [r2, #8]
			strcpy(p->grade,"7B");
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800abb8:	4a3b      	ldr	r2, [pc, #236]	; (800aca8 <problem_fetch+0x95e4>)
 800abba:	8811      	ldrh	r1, [r2, #0]
 800abbc:	7892      	ldrb	r2, [r2, #2]
 800abbe:	8019      	strh	r1, [r3, #0]
 800abc0:	709a      	strb	r2, [r3, #2]
			p->moveSize = 9;
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	2209      	movs	r2, #9
 800abc6:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,C,A,C,E,A,D,G,I");
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	33a4      	adds	r3, #164	; 0xa4
 800abcc:	4a48      	ldr	r2, [pc, #288]	; (800acf0 <problem_fetch+0x962c>)
 800abce:	461d      	mov	r5, r3
 800abd0:	4614      	mov	r4, r2
 800abd2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800abd4:	6028      	str	r0, [r5, #0]
 800abd6:	6069      	str	r1, [r5, #4]
 800abd8:	60aa      	str	r2, [r5, #8]
 800abda:	60eb      	str	r3, [r5, #12]
 800abdc:	8823      	ldrh	r3, [r4, #0]
 800abde:	822b      	strh	r3, [r5, #16]
			strcpy(p->moveNumbers,"4,8,9,5,12,14,15,17,18");
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	3304      	adds	r3, #4
 800abe4:	4a43      	ldr	r2, [pc, #268]	; (800acf4 <problem_fetch+0x9630>)
 800abe6:	461c      	mov	r4, r3
 800abe8:	4615      	mov	r5, r2
 800abea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800abec:	6020      	str	r0, [r4, #0]
 800abee:	6061      	str	r1, [r4, #4]
 800abf0:	60a2      	str	r2, [r4, #8]
 800abf2:	60e3      	str	r3, [r4, #12]
 800abf4:	6828      	ldr	r0, [r5, #0]
 800abf6:	6120      	str	r0, [r4, #16]
 800abf8:	88ab      	ldrh	r3, [r5, #4]
 800abfa:	79aa      	ldrb	r2, [r5, #6]
 800abfc:	82a3      	strh	r3, [r4, #20]
 800abfe:	4613      	mov	r3, r2
 800ac00:	75a3      	strb	r3, [r4, #22]
			strcpy(p->startFinish,"s,d,d,d,d,d,d,d,e");
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800ac08:	4a3b      	ldr	r2, [pc, #236]	; (800acf8 <problem_fetch+0x9634>)
 800ac0a:	461d      	mov	r5, r3
 800ac0c:	4614      	mov	r4, r2
 800ac0e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800ac10:	6028      	str	r0, [r5, #0]
 800ac12:	6069      	str	r1, [r5, #4]
 800ac14:	60aa      	str	r2, [r5, #8]
 800ac16:	60eb      	str	r3, [r5, #12]
 800ac18:	8823      	ldrh	r3, [r4, #0]
 800ac1a:	822b      	strh	r3, [r5, #16]
			break;
 800ac1c:	f011 bc82 	b.w	801c524 <problem_fetch+0x1ae60>
		case 263 :
			strcpy(p->name,"BLACK.HO");
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800ac26:	4935      	ldr	r1, [pc, #212]	; (800acfc <problem_fetch+0x9638>)
 800ac28:	461a      	mov	r2, r3
 800ac2a:	460b      	mov	r3, r1
 800ac2c:	cb03      	ldmia	r3!, {r0, r1}
 800ac2e:	6010      	str	r0, [r2, #0]
 800ac30:	6051      	str	r1, [r2, #4]
 800ac32:	781b      	ldrb	r3, [r3, #0]
 800ac34:	7213      	strb	r3, [r2, #8]
			strcpy(p->grade,"7C");
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800ac3c:	4a30      	ldr	r2, [pc, #192]	; (800ad00 <problem_fetch+0x963c>)
 800ac3e:	8811      	ldrh	r1, [r2, #0]
 800ac40:	7892      	ldrb	r2, [r2, #2]
 800ac42:	8019      	strh	r1, [r3, #0]
 800ac44:	709a      	strb	r2, [r3, #2]
			p->moveSize = 9;
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	2209      	movs	r2, #9
 800ac4a:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"H,C,A,E,I,A,E,G,H");
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	33a4      	adds	r3, #164	; 0xa4
 800ac50:	4a2c      	ldr	r2, [pc, #176]	; (800ad04 <problem_fetch+0x9640>)
 800ac52:	461d      	mov	r5, r3
 800ac54:	4614      	mov	r4, r2
 800ac56:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800ac58:	6028      	str	r0, [r5, #0]
 800ac5a:	6069      	str	r1, [r5, #4]
 800ac5c:	60aa      	str	r2, [r5, #8]
 800ac5e:	60eb      	str	r3, [r5, #12]
 800ac60:	8823      	ldrh	r3, [r4, #0]
 800ac62:	822b      	strh	r3, [r5, #16]
			strcpy(p->moveNumbers,"5,5,9,9,18,14,16,17,12");
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	3304      	adds	r3, #4
 800ac68:	4a27      	ldr	r2, [pc, #156]	; (800ad08 <problem_fetch+0x9644>)
 800ac6a:	461c      	mov	r4, r3
 800ac6c:	4615      	mov	r5, r2
 800ac6e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ac70:	6020      	str	r0, [r4, #0]
 800ac72:	6061      	str	r1, [r4, #4]
 800ac74:	60a2      	str	r2, [r4, #8]
 800ac76:	60e3      	str	r3, [r4, #12]
 800ac78:	6828      	ldr	r0, [r5, #0]
 800ac7a:	6120      	str	r0, [r4, #16]
 800ac7c:	88ab      	ldrh	r3, [r5, #4]
 800ac7e:	79aa      	ldrb	r2, [r5, #6]
 800ac80:	82a3      	strh	r3, [r4, #20]
 800ac82:	4613      	mov	r3, r2
 800ac84:	75a3      	strb	r3, [r4, #22]
			strcpy(p->startFinish,"s,d,d,d,e,d,d,d,d");
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800ac8c:	4a1f      	ldr	r2, [pc, #124]	; (800ad0c <problem_fetch+0x9648>)
 800ac8e:	461d      	mov	r5, r3
 800ac90:	4614      	mov	r4, r2
 800ac92:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800ac94:	6028      	str	r0, [r5, #0]
 800ac96:	6069      	str	r1, [r5, #4]
 800ac98:	60aa      	str	r2, [r5, #8]
 800ac9a:	60eb      	str	r3, [r5, #12]
 800ac9c:	8823      	ldrh	r3, [r4, #0]
 800ac9e:	822b      	strh	r3, [r5, #16]
			break;
 800aca0:	f011 bc40 	b.w	801c524 <problem_fetch+0x1ae60>
 800aca4:	08026ce0 	.word	0x08026ce0
 800aca8:	08023f4c 	.word	0x08023f4c
 800acac:	08026cf8 	.word	0x08026cf8
 800acb0:	08026d04 	.word	0x08026d04
 800acb4:	08023bf0 	.word	0x08023bf0
 800acb8:	08026d14 	.word	0x08026d14
 800acbc:	08026d28 	.word	0x08026d28
 800acc0:	08026d30 	.word	0x08026d30
 800acc4:	080239a8 	.word	0x080239a8
 800acc8:	08026d3c 	.word	0x08026d3c
 800accc:	08023854 	.word	0x08023854
 800acd0:	08026d48 	.word	0x08026d48
 800acd4:	08026d54 	.word	0x08026d54
 800acd8:	08026d64 	.word	0x08026d64
 800acdc:	080239f4 	.word	0x080239f4
 800ace0:	08026d70 	.word	0x08026d70
 800ace4:	08026d80 	.word	0x08026d80
 800ace8:	08023a64 	.word	0x08023a64
 800acec:	08026d94 	.word	0x08026d94
 800acf0:	08026da0 	.word	0x08026da0
 800acf4:	08026db4 	.word	0x08026db4
 800acf8:	0802570c 	.word	0x0802570c
 800acfc:	08026dcc 	.word	0x08026dcc
 800ad00:	08024088 	.word	0x08024088
 800ad04:	08026dd8 	.word	0x08026dd8
 800ad08:	08026dec 	.word	0x08026dec
 800ad0c:	080269fc 	.word	0x080269fc
		case 264 :
			strcpy(p->name,"SLIPPERY WHEN WET");
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800ad16:	4ac4      	ldr	r2, [pc, #784]	; (800b028 <problem_fetch+0x9964>)
 800ad18:	461d      	mov	r5, r3
 800ad1a:	4614      	mov	r4, r2
 800ad1c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800ad1e:	6028      	str	r0, [r5, #0]
 800ad20:	6069      	str	r1, [r5, #4]
 800ad22:	60aa      	str	r2, [r5, #8]
 800ad24:	60eb      	str	r3, [r5, #12]
 800ad26:	8823      	ldrh	r3, [r4, #0]
 800ad28:	822b      	strh	r3, [r5, #16]
			strcpy(p->grade,"7A");
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800ad30:	4abe      	ldr	r2, [pc, #760]	; (800b02c <problem_fetch+0x9968>)
 800ad32:	8811      	ldrh	r1, [r2, #0]
 800ad34:	7892      	ldrb	r2, [r2, #2]
 800ad36:	8019      	strh	r1, [r3, #0]
 800ad38:	709a      	strb	r2, [r3, #2]
			p->moveSize = 7;
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	2207      	movs	r2, #7
 800ad3e:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,C,H,G,D,D,A");
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	33a4      	adds	r3, #164	; 0xa4
 800ad44:	4aba      	ldr	r2, [pc, #744]	; (800b030 <problem_fetch+0x996c>)
 800ad46:	461c      	mov	r4, r3
 800ad48:	4613      	mov	r3, r2
 800ad4a:	cb07      	ldmia	r3!, {r0, r1, r2}
 800ad4c:	6020      	str	r0, [r4, #0]
 800ad4e:	6061      	str	r1, [r4, #4]
 800ad50:	60a2      	str	r2, [r4, #8]
 800ad52:	881b      	ldrh	r3, [r3, #0]
 800ad54:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,8,10,14,15,18,18");
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	3304      	adds	r3, #4
 800ad5a:	4ab6      	ldr	r2, [pc, #728]	; (800b034 <problem_fetch+0x9970>)
 800ad5c:	461d      	mov	r5, r3
 800ad5e:	4614      	mov	r4, r2
 800ad60:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800ad62:	6028      	str	r0, [r5, #0]
 800ad64:	6069      	str	r1, [r5, #4]
 800ad66:	60aa      	str	r2, [r5, #8]
 800ad68:	60eb      	str	r3, [r5, #12]
 800ad6a:	8823      	ldrh	r3, [r4, #0]
 800ad6c:	78a2      	ldrb	r2, [r4, #2]
 800ad6e:	822b      	strh	r3, [r5, #16]
 800ad70:	4613      	mov	r3, r2
 800ad72:	74ab      	strb	r3, [r5, #18]
			strcpy(p->startFinish,"s,d,d,d,d,e,e");
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800ad7a:	4aaf      	ldr	r2, [pc, #700]	; (800b038 <problem_fetch+0x9974>)
 800ad7c:	461c      	mov	r4, r3
 800ad7e:	4613      	mov	r3, r2
 800ad80:	cb07      	ldmia	r3!, {r0, r1, r2}
 800ad82:	6020      	str	r0, [r4, #0]
 800ad84:	6061      	str	r1, [r4, #4]
 800ad86:	60a2      	str	r2, [r4, #8]
 800ad88:	881b      	ldrh	r3, [r3, #0]
 800ad8a:	81a3      	strh	r3, [r4, #12]
			break;
 800ad8c:	f011 bbca 	b.w	801c524 <problem_fetch+0x1ae60>
		case 265 :
			strcpy(p->name,"UNSULLIED");
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800ad96:	49a9      	ldr	r1, [pc, #676]	; (800b03c <problem_fetch+0x9978>)
 800ad98:	461a      	mov	r2, r3
 800ad9a:	460b      	mov	r3, r1
 800ad9c:	cb03      	ldmia	r3!, {r0, r1}
 800ad9e:	6010      	str	r0, [r2, #0]
 800ada0:	6051      	str	r1, [r2, #4]
 800ada2:	881b      	ldrh	r3, [r3, #0]
 800ada4:	8113      	strh	r3, [r2, #8]
			strcpy(p->grade,"7A");
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800adac:	4a9f      	ldr	r2, [pc, #636]	; (800b02c <problem_fetch+0x9968>)
 800adae:	8811      	ldrh	r1, [r2, #0]
 800adb0:	7892      	ldrb	r2, [r2, #2]
 800adb2:	8019      	strh	r1, [r3, #0]
 800adb4:	709a      	strb	r2, [r3, #2]
			p->moveSize = 4;
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	2204      	movs	r2, #4
 800adba:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"E,G,C,D");
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	33a4      	adds	r3, #164	; 0xa4
 800adc0:	499f      	ldr	r1, [pc, #636]	; (800b040 <problem_fetch+0x997c>)
 800adc2:	461a      	mov	r2, r3
 800adc4:	460b      	mov	r3, r1
 800adc6:	cb03      	ldmia	r3!, {r0, r1}
 800adc8:	6010      	str	r0, [r2, #0]
 800adca:	6051      	str	r1, [r2, #4]
			strcpy(p->moveNumbers,"6,10,13,18");
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	3304      	adds	r3, #4
 800add0:	499c      	ldr	r1, [pc, #624]	; (800b044 <problem_fetch+0x9980>)
 800add2:	461a      	mov	r2, r3
 800add4:	460b      	mov	r3, r1
 800add6:	cb03      	ldmia	r3!, {r0, r1}
 800add8:	6010      	str	r0, [r2, #0]
 800adda:	6051      	str	r1, [r2, #4]
 800addc:	8819      	ldrh	r1, [r3, #0]
 800adde:	789b      	ldrb	r3, [r3, #2]
 800ade0:	8111      	strh	r1, [r2, #8]
 800ade2:	7293      	strb	r3, [r2, #10]
			strcpy(p->startFinish,"s,d,d,e");
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800adea:	4997      	ldr	r1, [pc, #604]	; (800b048 <problem_fetch+0x9984>)
 800adec:	461a      	mov	r2, r3
 800adee:	460b      	mov	r3, r1
 800adf0:	cb03      	ldmia	r3!, {r0, r1}
 800adf2:	6010      	str	r0, [r2, #0]
 800adf4:	6051      	str	r1, [r2, #4]
			break;
 800adf6:	f011 bb95 	b.w	801c524 <problem_fetch+0x1ae60>
		case 266 :
			strcpy(p->name,"HEAVY LIFTING");
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800ae00:	4a92      	ldr	r2, [pc, #584]	; (800b04c <problem_fetch+0x9988>)
 800ae02:	461c      	mov	r4, r3
 800ae04:	4613      	mov	r3, r2
 800ae06:	cb07      	ldmia	r3!, {r0, r1, r2}
 800ae08:	6020      	str	r0, [r4, #0]
 800ae0a:	6061      	str	r1, [r4, #4]
 800ae0c:	60a2      	str	r2, [r4, #8]
 800ae0e:	881b      	ldrh	r3, [r3, #0]
 800ae10:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade,"7A+");
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800ae18:	4a8d      	ldr	r2, [pc, #564]	; (800b050 <problem_fetch+0x998c>)
 800ae1a:	6810      	ldr	r0, [r2, #0]
 800ae1c:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	2206      	movs	r2, #6
 800ae22:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"E,G,H,G,D,D");
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	33a4      	adds	r3, #164	; 0xa4
 800ae28:	4a8a      	ldr	r2, [pc, #552]	; (800b054 <problem_fetch+0x9990>)
 800ae2a:	461c      	mov	r4, r3
 800ae2c:	4613      	mov	r3, r2
 800ae2e:	cb07      	ldmia	r3!, {r0, r1, r2}
 800ae30:	6020      	str	r0, [r4, #0]
 800ae32:	6061      	str	r1, [r4, #4]
 800ae34:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"6,6,10,14,15,18");
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	3304      	adds	r3, #4
 800ae3a:	4a87      	ldr	r2, [pc, #540]	; (800b058 <problem_fetch+0x9994>)
 800ae3c:	461c      	mov	r4, r3
 800ae3e:	4615      	mov	r5, r2
 800ae40:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ae42:	6020      	str	r0, [r4, #0]
 800ae44:	6061      	str	r1, [r4, #4]
 800ae46:	60a2      	str	r2, [r4, #8]
 800ae48:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,s,d,d,d,e");
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800ae50:	4a82      	ldr	r2, [pc, #520]	; (800b05c <problem_fetch+0x9998>)
 800ae52:	461c      	mov	r4, r3
 800ae54:	4613      	mov	r3, r2
 800ae56:	cb07      	ldmia	r3!, {r0, r1, r2}
 800ae58:	6020      	str	r0, [r4, #0]
 800ae5a:	6061      	str	r1, [r4, #4]
 800ae5c:	60a2      	str	r2, [r4, #8]
			break;
 800ae5e:	f011 bb61 	b.w	801c524 <problem_fetch+0x1ae60>
		case 267 :
			strcpy(p->name,"SOFA KING SNAKED");
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800ae68:	4a7d      	ldr	r2, [pc, #500]	; (800b060 <problem_fetch+0x999c>)
 800ae6a:	461d      	mov	r5, r3
 800ae6c:	4614      	mov	r4, r2
 800ae6e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800ae70:	6028      	str	r0, [r5, #0]
 800ae72:	6069      	str	r1, [r5, #4]
 800ae74:	60aa      	str	r2, [r5, #8]
 800ae76:	60eb      	str	r3, [r5, #12]
 800ae78:	7823      	ldrb	r3, [r4, #0]
 800ae7a:	742b      	strb	r3, [r5, #16]
			strcpy(p->grade,"7B");
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800ae82:	4a78      	ldr	r2, [pc, #480]	; (800b064 <problem_fetch+0x99a0>)
 800ae84:	8811      	ldrh	r1, [r2, #0]
 800ae86:	7892      	ldrb	r2, [r2, #2]
 800ae88:	8019      	strh	r1, [r3, #0]
 800ae8a:	709a      	strb	r2, [r3, #2]
			p->moveSize = 6;
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	2206      	movs	r2, #6
 800ae90:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,E,E,D,I,D");
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	33a4      	adds	r3, #164	; 0xa4
 800ae96:	4a74      	ldr	r2, [pc, #464]	; (800b068 <problem_fetch+0x99a4>)
 800ae98:	461c      	mov	r4, r3
 800ae9a:	4613      	mov	r3, r2
 800ae9c:	cb07      	ldmia	r3!, {r0, r1, r2}
 800ae9e:	6020      	str	r0, [r4, #0]
 800aea0:	6061      	str	r1, [r4, #4]
 800aea2:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,8,12,11,14,18");
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	3304      	adds	r3, #4
 800aea8:	4a70      	ldr	r2, [pc, #448]	; (800b06c <problem_fetch+0x99a8>)
 800aeaa:	461c      	mov	r4, r3
 800aeac:	4615      	mov	r5, r2
 800aeae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800aeb0:	6020      	str	r0, [r4, #0]
 800aeb2:	6061      	str	r1, [r4, #4]
 800aeb4:	60a2      	str	r2, [r4, #8]
 800aeb6:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800aebe:	4a6c      	ldr	r2, [pc, #432]	; (800b070 <problem_fetch+0x99ac>)
 800aec0:	461c      	mov	r4, r3
 800aec2:	4613      	mov	r3, r2
 800aec4:	cb07      	ldmia	r3!, {r0, r1, r2}
 800aec6:	6020      	str	r0, [r4, #0]
 800aec8:	6061      	str	r1, [r4, #4]
 800aeca:	60a2      	str	r2, [r4, #8]
			break;
 800aecc:	f011 bb2a 	b.w	801c524 <problem_fetch+0x1ae60>
		case 268 :
			strcpy(p->name,"SOFA KING JUGGY");
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800aed6:	4a67      	ldr	r2, [pc, #412]	; (800b074 <problem_fetch+0x99b0>)
 800aed8:	461c      	mov	r4, r3
 800aeda:	4615      	mov	r5, r2
 800aedc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800aede:	6020      	str	r0, [r4, #0]
 800aee0:	6061      	str	r1, [r4, #4]
 800aee2:	60a2      	str	r2, [r4, #8]
 800aee4:	60e3      	str	r3, [r4, #12]
			strcpy(p->grade,"7B+");
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800aeec:	4a62      	ldr	r2, [pc, #392]	; (800b078 <problem_fetch+0x99b4>)
 800aeee:	6810      	ldr	r0, [r2, #0]
 800aef0:	6018      	str	r0, [r3, #0]
			p->moveSize = 5;
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	2205      	movs	r2, #5
 800aef6:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,H,H,H,D");
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	33a4      	adds	r3, #164	; 0xa4
 800aefc:	495f      	ldr	r1, [pc, #380]	; (800b07c <problem_fetch+0x99b8>)
 800aefe:	461a      	mov	r2, r3
 800af00:	460b      	mov	r3, r1
 800af02:	cb03      	ldmia	r3!, {r0, r1}
 800af04:	6010      	str	r0, [r2, #0]
 800af06:	6051      	str	r1, [r2, #4]
 800af08:	881b      	ldrh	r3, [r3, #0]
 800af0a:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"4,10,12,16,18");
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	3304      	adds	r3, #4
 800af10:	4a5b      	ldr	r2, [pc, #364]	; (800b080 <problem_fetch+0x99bc>)
 800af12:	461c      	mov	r4, r3
 800af14:	4613      	mov	r3, r2
 800af16:	cb07      	ldmia	r3!, {r0, r1, r2}
 800af18:	6020      	str	r0, [r4, #0]
 800af1a:	6061      	str	r1, [r4, #4]
 800af1c:	60a2      	str	r2, [r4, #8]
 800af1e:	881b      	ldrh	r3, [r3, #0]
 800af20:	81a3      	strh	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,e");
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800af28:	4956      	ldr	r1, [pc, #344]	; (800b084 <problem_fetch+0x99c0>)
 800af2a:	461a      	mov	r2, r3
 800af2c:	460b      	mov	r3, r1
 800af2e:	cb03      	ldmia	r3!, {r0, r1}
 800af30:	6010      	str	r0, [r2, #0]
 800af32:	6051      	str	r1, [r2, #4]
 800af34:	881b      	ldrh	r3, [r3, #0]
 800af36:	8113      	strh	r3, [r2, #8]
			break;
 800af38:	f011 baf4 	b.w	801c524 <problem_fetch+0x1ae60>
		case 269 :
			strcpy(p->name,"THE PEOPLE'S HEEL HOOK");
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800af42:	4a51      	ldr	r2, [pc, #324]	; (800b088 <problem_fetch+0x99c4>)
 800af44:	461c      	mov	r4, r3
 800af46:	4615      	mov	r5, r2
 800af48:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800af4a:	6020      	str	r0, [r4, #0]
 800af4c:	6061      	str	r1, [r4, #4]
 800af4e:	60a2      	str	r2, [r4, #8]
 800af50:	60e3      	str	r3, [r4, #12]
 800af52:	6828      	ldr	r0, [r5, #0]
 800af54:	6120      	str	r0, [r4, #16]
 800af56:	88ab      	ldrh	r3, [r5, #4]
 800af58:	79aa      	ldrb	r2, [r5, #6]
 800af5a:	82a3      	strh	r3, [r4, #20]
 800af5c:	4613      	mov	r3, r2
 800af5e:	75a3      	strb	r3, [r4, #22]
			strcpy(p->grade,"7A");
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800af66:	4a31      	ldr	r2, [pc, #196]	; (800b02c <problem_fetch+0x9968>)
 800af68:	8811      	ldrh	r1, [r2, #0]
 800af6a:	7892      	ldrb	r2, [r2, #2]
 800af6c:	8019      	strh	r1, [r3, #0]
 800af6e:	709a      	strb	r2, [r3, #2]
			p->moveSize = 5;
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	2205      	movs	r2, #5
 800af74:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,C,E,E,I");
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	33a4      	adds	r3, #164	; 0xa4
 800af7a:	4944      	ldr	r1, [pc, #272]	; (800b08c <problem_fetch+0x99c8>)
 800af7c:	461a      	mov	r2, r3
 800af7e:	460b      	mov	r3, r1
 800af80:	cb03      	ldmia	r3!, {r0, r1}
 800af82:	6010      	str	r0, [r2, #0]
 800af84:	6051      	str	r1, [r2, #4]
 800af86:	881b      	ldrh	r3, [r3, #0]
 800af88:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"4,8,12,14,18");
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	3304      	adds	r3, #4
 800af8e:	4a40      	ldr	r2, [pc, #256]	; (800b090 <problem_fetch+0x99cc>)
 800af90:	461c      	mov	r4, r3
 800af92:	4613      	mov	r3, r2
 800af94:	cb07      	ldmia	r3!, {r0, r1, r2}
 800af96:	6020      	str	r0, [r4, #0]
 800af98:	6061      	str	r1, [r4, #4]
 800af9a:	60a2      	str	r2, [r4, #8]
 800af9c:	781b      	ldrb	r3, [r3, #0]
 800af9e:	7323      	strb	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,e");
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800afa6:	4937      	ldr	r1, [pc, #220]	; (800b084 <problem_fetch+0x99c0>)
 800afa8:	461a      	mov	r2, r3
 800afaa:	460b      	mov	r3, r1
 800afac:	cb03      	ldmia	r3!, {r0, r1}
 800afae:	6010      	str	r0, [r2, #0]
 800afb0:	6051      	str	r1, [r2, #4]
 800afb2:	881b      	ldrh	r3, [r3, #0]
 800afb4:	8113      	strh	r3, [r2, #8]
			break;
 800afb6:	f011 bab5 	b.w	801c524 <problem_fetch+0x1ae60>
		case 270 :
			strcpy(p->name,"ZIO BENNY");
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800afc0:	4934      	ldr	r1, [pc, #208]	; (800b094 <problem_fetch+0x99d0>)
 800afc2:	461a      	mov	r2, r3
 800afc4:	460b      	mov	r3, r1
 800afc6:	cb03      	ldmia	r3!, {r0, r1}
 800afc8:	6010      	str	r0, [r2, #0]
 800afca:	6051      	str	r1, [r2, #4]
 800afcc:	881b      	ldrh	r3, [r3, #0]
 800afce:	8113      	strh	r3, [r2, #8]
			strcpy(p->grade,"7A+");
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800afd6:	4a1e      	ldr	r2, [pc, #120]	; (800b050 <problem_fetch+0x998c>)
 800afd8:	6810      	ldr	r0, [r2, #0]
 800afda:	6018      	str	r0, [r3, #0]
			p->moveSize = 5;
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	2205      	movs	r2, #5
 800afe0:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,G,H,E,D");
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	33a4      	adds	r3, #164	; 0xa4
 800afe6:	492c      	ldr	r1, [pc, #176]	; (800b098 <problem_fetch+0x99d4>)
 800afe8:	461a      	mov	r2, r3
 800afea:	460b      	mov	r3, r1
 800afec:	cb03      	ldmia	r3!, {r0, r1}
 800afee:	6010      	str	r0, [r2, #0]
 800aff0:	6051      	str	r1, [r2, #4]
 800aff2:	881b      	ldrh	r3, [r3, #0]
 800aff4:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"5,9,13,14,18");
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	3304      	adds	r3, #4
 800affa:	4a28      	ldr	r2, [pc, #160]	; (800b09c <problem_fetch+0x99d8>)
 800affc:	461c      	mov	r4, r3
 800affe:	4613      	mov	r3, r2
 800b000:	cb07      	ldmia	r3!, {r0, r1, r2}
 800b002:	6020      	str	r0, [r4, #0]
 800b004:	6061      	str	r1, [r4, #4]
 800b006:	60a2      	str	r2, [r4, #8]
 800b008:	781b      	ldrb	r3, [r3, #0]
 800b00a:	7323      	strb	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,e");
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800b012:	491c      	ldr	r1, [pc, #112]	; (800b084 <problem_fetch+0x99c0>)
 800b014:	461a      	mov	r2, r3
 800b016:	460b      	mov	r3, r1
 800b018:	cb03      	ldmia	r3!, {r0, r1}
 800b01a:	6010      	str	r0, [r2, #0]
 800b01c:	6051      	str	r1, [r2, #4]
 800b01e:	881b      	ldrh	r3, [r3, #0]
 800b020:	8113      	strh	r3, [r2, #8]
			break;
 800b022:	f011 ba7f 	b.w	801c524 <problem_fetch+0x1ae60>
 800b026:	bf00      	nop
 800b028:	08026e04 	.word	0x08026e04
 800b02c:	08023814 	.word	0x08023814
 800b030:	08026e18 	.word	0x08026e18
 800b034:	08026e28 	.word	0x08026e28
 800b038:	08026e3c 	.word	0x08026e3c
 800b03c:	08026e4c 	.word	0x08026e4c
 800b040:	08026e58 	.word	0x08026e58
 800b044:	08026e60 	.word	0x08026e60
 800b048:	080239a8 	.word	0x080239a8
 800b04c:	08026e6c 	.word	0x08026e6c
 800b050:	080239f4 	.word	0x080239f4
 800b054:	08026e7c 	.word	0x08026e7c
 800b058:	08026e88 	.word	0x08026e88
 800b05c:	08023834 	.word	0x08023834
 800b060:	08026e98 	.word	0x08026e98
 800b064:	08023f4c 	.word	0x08023f4c
 800b068:	08026eac 	.word	0x08026eac
 800b06c:	08026eb8 	.word	0x08026eb8
 800b070:	08023bf0 	.word	0x08023bf0
 800b074:	08026ec8 	.word	0x08026ec8
 800b078:	08023990 	.word	0x08023990
 800b07c:	08026ed8 	.word	0x08026ed8
 800b080:	080261b8 	.word	0x080261b8
 800b084:	08023d20 	.word	0x08023d20
 800b088:	08026ee4 	.word	0x08026ee4
 800b08c:	08026efc 	.word	0x08026efc
 800b090:	08026f08 	.word	0x08026f08
 800b094:	08026f18 	.word	0x08026f18
 800b098:	08026f24 	.word	0x08026f24
 800b09c:	08025490 	.word	0x08025490
		case 271 :
			strcpy(p->name,"ONE DAY");
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800b0a6:	49a9      	ldr	r1, [pc, #676]	; (800b34c <problem_fetch+0x9c88>)
 800b0a8:	461a      	mov	r2, r3
 800b0aa:	460b      	mov	r3, r1
 800b0ac:	cb03      	ldmia	r3!, {r0, r1}
 800b0ae:	6010      	str	r0, [r2, #0]
 800b0b0:	6051      	str	r1, [r2, #4]
			strcpy(p->grade,"6B+");
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800b0b8:	4aa5      	ldr	r2, [pc, #660]	; (800b350 <problem_fetch+0x9c8c>)
 800b0ba:	6810      	ldr	r0, [r2, #0]
 800b0bc:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	2207      	movs	r2, #7
 800b0c2:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,H,E,B,H,C,I");
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	33a4      	adds	r3, #164	; 0xa4
 800b0c8:	4aa2      	ldr	r2, [pc, #648]	; (800b354 <problem_fetch+0x9c90>)
 800b0ca:	461c      	mov	r4, r3
 800b0cc:	4613      	mov	r3, r2
 800b0ce:	cb07      	ldmia	r3!, {r0, r1, r2}
 800b0d0:	6020      	str	r0, [r4, #0]
 800b0d2:	6061      	str	r1, [r4, #4]
 800b0d4:	60a2      	str	r2, [r4, #8]
 800b0d6:	881b      	ldrh	r3, [r3, #0]
 800b0d8:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,8,9,10,13,13,18");
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	3304      	adds	r3, #4
 800b0de:	4a9e      	ldr	r2, [pc, #632]	; (800b358 <problem_fetch+0x9c94>)
 800b0e0:	461d      	mov	r5, r3
 800b0e2:	4614      	mov	r4, r2
 800b0e4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800b0e6:	6028      	str	r0, [r5, #0]
 800b0e8:	6069      	str	r1, [r5, #4]
 800b0ea:	60aa      	str	r2, [r5, #8]
 800b0ec:	60eb      	str	r3, [r5, #12]
 800b0ee:	8823      	ldrh	r3, [r4, #0]
 800b0f0:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800b0f8:	4a98      	ldr	r2, [pc, #608]	; (800b35c <problem_fetch+0x9c98>)
 800b0fa:	461c      	mov	r4, r3
 800b0fc:	4613      	mov	r3, r2
 800b0fe:	cb07      	ldmia	r3!, {r0, r1, r2}
 800b100:	6020      	str	r0, [r4, #0]
 800b102:	6061      	str	r1, [r4, #4]
 800b104:	60a2      	str	r2, [r4, #8]
 800b106:	881b      	ldrh	r3, [r3, #0]
 800b108:	81a3      	strh	r3, [r4, #12]
			break;
 800b10a:	f011 ba0b 	b.w	801c524 <problem_fetch+0x1ae60>
		case 272 :
			strcpy(p->name,"HEART OF THE SEA");
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800b114:	4a92      	ldr	r2, [pc, #584]	; (800b360 <problem_fetch+0x9c9c>)
 800b116:	461d      	mov	r5, r3
 800b118:	4614      	mov	r4, r2
 800b11a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800b11c:	6028      	str	r0, [r5, #0]
 800b11e:	6069      	str	r1, [r5, #4]
 800b120:	60aa      	str	r2, [r5, #8]
 800b122:	60eb      	str	r3, [r5, #12]
 800b124:	7823      	ldrb	r3, [r4, #0]
 800b126:	742b      	strb	r3, [r5, #16]
			strcpy(p->grade,"7A");
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800b12e:	4a8d      	ldr	r2, [pc, #564]	; (800b364 <problem_fetch+0x9ca0>)
 800b130:	8811      	ldrh	r1, [r2, #0]
 800b132:	7892      	ldrb	r2, [r2, #2]
 800b134:	8019      	strh	r1, [r3, #0]
 800b136:	709a      	strb	r2, [r3, #2]
			p->moveSize = 7;
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	2207      	movs	r2, #7
 800b13c:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"C,A,E,B,F,A,D");
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	33a4      	adds	r3, #164	; 0xa4
 800b142:	4a89      	ldr	r2, [pc, #548]	; (800b368 <problem_fetch+0x9ca4>)
 800b144:	461c      	mov	r4, r3
 800b146:	4613      	mov	r3, r2
 800b148:	cb07      	ldmia	r3!, {r0, r1, r2}
 800b14a:	6020      	str	r0, [r4, #0]
 800b14c:	6061      	str	r1, [r4, #4]
 800b14e:	60a2      	str	r2, [r4, #8]
 800b150:	881b      	ldrh	r3, [r3, #0]
 800b152:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,9,9,6,11,14,18");
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	3304      	adds	r3, #4
 800b158:	4a84      	ldr	r2, [pc, #528]	; (800b36c <problem_fetch+0x9ca8>)
 800b15a:	461d      	mov	r5, r3
 800b15c:	4614      	mov	r4, r2
 800b15e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800b160:	6028      	str	r0, [r5, #0]
 800b162:	6069      	str	r1, [r5, #4]
 800b164:	60aa      	str	r2, [r5, #8]
 800b166:	60eb      	str	r3, [r5, #12]
 800b168:	7823      	ldrb	r3, [r4, #0]
 800b16a:	742b      	strb	r3, [r5, #16]
			strcpy(p->startFinish,"s,d,d,s,d,d,e");
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800b172:	4a7f      	ldr	r2, [pc, #508]	; (800b370 <problem_fetch+0x9cac>)
 800b174:	461c      	mov	r4, r3
 800b176:	4613      	mov	r3, r2
 800b178:	cb07      	ldmia	r3!, {r0, r1, r2}
 800b17a:	6020      	str	r0, [r4, #0]
 800b17c:	6061      	str	r1, [r4, #4]
 800b17e:	60a2      	str	r2, [r4, #8]
 800b180:	881b      	ldrh	r3, [r3, #0]
 800b182:	81a3      	strh	r3, [r4, #12]
			break;
 800b184:	f011 b9ce 	b.w	801c524 <problem_fetch+0x1ae60>
		case 273 :
			strcpy(p->name,"SNEAKER JUICE DEUX");
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800b18e:	4a79      	ldr	r2, [pc, #484]	; (800b374 <problem_fetch+0x9cb0>)
 800b190:	461d      	mov	r5, r3
 800b192:	4614      	mov	r4, r2
 800b194:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800b196:	6028      	str	r0, [r5, #0]
 800b198:	6069      	str	r1, [r5, #4]
 800b19a:	60aa      	str	r2, [r5, #8]
 800b19c:	60eb      	str	r3, [r5, #12]
 800b19e:	8823      	ldrh	r3, [r4, #0]
 800b1a0:	78a2      	ldrb	r2, [r4, #2]
 800b1a2:	822b      	strh	r3, [r5, #16]
 800b1a4:	4613      	mov	r3, r2
 800b1a6:	74ab      	strb	r3, [r5, #18]
			strcpy(p->grade,"6C+");
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800b1ae:	4a72      	ldr	r2, [pc, #456]	; (800b378 <problem_fetch+0x9cb4>)
 800b1b0:	6810      	ldr	r0, [r2, #0]
 800b1b2:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	2206      	movs	r2, #6
 800b1b8:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,E,I,F,K,I");
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	33a4      	adds	r3, #164	; 0xa4
 800b1be:	4a6f      	ldr	r2, [pc, #444]	; (800b37c <problem_fetch+0x9cb8>)
 800b1c0:	461c      	mov	r4, r3
 800b1c2:	4613      	mov	r3, r2
 800b1c4:	cb07      	ldmia	r3!, {r0, r1, r2}
 800b1c6:	6020      	str	r0, [r4, #0]
 800b1c8:	6061      	str	r1, [r4, #4]
 800b1ca:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,8,10,13,14,18");
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	3304      	adds	r3, #4
 800b1d0:	4a6b      	ldr	r2, [pc, #428]	; (800b380 <problem_fetch+0x9cbc>)
 800b1d2:	461c      	mov	r4, r3
 800b1d4:	4615      	mov	r5, r2
 800b1d6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b1d8:	6020      	str	r0, [r4, #0]
 800b1da:	6061      	str	r1, [r4, #4]
 800b1dc:	60a2      	str	r2, [r4, #8]
 800b1de:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800b1e6:	4a67      	ldr	r2, [pc, #412]	; (800b384 <problem_fetch+0x9cc0>)
 800b1e8:	461c      	mov	r4, r3
 800b1ea:	4613      	mov	r3, r2
 800b1ec:	cb07      	ldmia	r3!, {r0, r1, r2}
 800b1ee:	6020      	str	r0, [r4, #0]
 800b1f0:	6061      	str	r1, [r4, #4]
 800b1f2:	60a2      	str	r2, [r4, #8]
			break;
 800b1f4:	f011 b996 	b.w	801c524 <problem_fetch+0x1ae60>
		case 274 :
			strcpy(p->name,"THREE OF CUPS");
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800b1fe:	4a62      	ldr	r2, [pc, #392]	; (800b388 <problem_fetch+0x9cc4>)
 800b200:	461c      	mov	r4, r3
 800b202:	4613      	mov	r3, r2
 800b204:	cb07      	ldmia	r3!, {r0, r1, r2}
 800b206:	6020      	str	r0, [r4, #0]
 800b208:	6061      	str	r1, [r4, #4]
 800b20a:	60a2      	str	r2, [r4, #8]
 800b20c:	881b      	ldrh	r3, [r3, #0]
 800b20e:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade,"7A");
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800b216:	4a53      	ldr	r2, [pc, #332]	; (800b364 <problem_fetch+0x9ca0>)
 800b218:	8811      	ldrh	r1, [r2, #0]
 800b21a:	7892      	ldrb	r2, [r2, #2]
 800b21c:	8019      	strh	r1, [r3, #0]
 800b21e:	709a      	strb	r2, [r3, #2]
			p->moveSize = 5;
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	2205      	movs	r2, #5
 800b224:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"H,C,F,A,D");
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	33a4      	adds	r3, #164	; 0xa4
 800b22a:	4958      	ldr	r1, [pc, #352]	; (800b38c <problem_fetch+0x9cc8>)
 800b22c:	461a      	mov	r2, r3
 800b22e:	460b      	mov	r3, r1
 800b230:	cb03      	ldmia	r3!, {r0, r1}
 800b232:	6010      	str	r0, [r2, #0]
 800b234:	6051      	str	r1, [r2, #4]
 800b236:	881b      	ldrh	r3, [r3, #0]
 800b238:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"5,8,11,14,18");
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	3304      	adds	r3, #4
 800b23e:	4a54      	ldr	r2, [pc, #336]	; (800b390 <problem_fetch+0x9ccc>)
 800b240:	461c      	mov	r4, r3
 800b242:	4613      	mov	r3, r2
 800b244:	cb07      	ldmia	r3!, {r0, r1, r2}
 800b246:	6020      	str	r0, [r4, #0]
 800b248:	6061      	str	r1, [r4, #4]
 800b24a:	60a2      	str	r2, [r4, #8]
 800b24c:	781b      	ldrb	r3, [r3, #0]
 800b24e:	7323      	strb	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,e");
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800b256:	494f      	ldr	r1, [pc, #316]	; (800b394 <problem_fetch+0x9cd0>)
 800b258:	461a      	mov	r2, r3
 800b25a:	460b      	mov	r3, r1
 800b25c:	cb03      	ldmia	r3!, {r0, r1}
 800b25e:	6010      	str	r0, [r2, #0]
 800b260:	6051      	str	r1, [r2, #4]
 800b262:	881b      	ldrh	r3, [r3, #0]
 800b264:	8113      	strh	r3, [r2, #8]
			break;
 800b266:	f011 b95d 	b.w	801c524 <problem_fetch+0x1ae60>
		case 275 :
			strcpy(p->name,"BRICK TAMLAND");
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800b270:	4a49      	ldr	r2, [pc, #292]	; (800b398 <problem_fetch+0x9cd4>)
 800b272:	461c      	mov	r4, r3
 800b274:	4613      	mov	r3, r2
 800b276:	cb07      	ldmia	r3!, {r0, r1, r2}
 800b278:	6020      	str	r0, [r4, #0]
 800b27a:	6061      	str	r1, [r4, #4]
 800b27c:	60a2      	str	r2, [r4, #8]
 800b27e:	881b      	ldrh	r3, [r3, #0]
 800b280:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade,"6C+");
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800b288:	4a3b      	ldr	r2, [pc, #236]	; (800b378 <problem_fetch+0x9cb4>)
 800b28a:	6810      	ldr	r0, [r2, #0]
 800b28c:	6018      	str	r0, [r3, #0]
			p->moveSize = 8;
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	2208      	movs	r2, #8
 800b292:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"E,G,G,J,H,G,D,G");
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	33a4      	adds	r3, #164	; 0xa4
 800b298:	4a40      	ldr	r2, [pc, #256]	; (800b39c <problem_fetch+0x9cd8>)
 800b29a:	461c      	mov	r4, r3
 800b29c:	4615      	mov	r5, r2
 800b29e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b2a0:	6020      	str	r0, [r4, #0]
 800b2a2:	6061      	str	r1, [r4, #4]
 800b2a4:	60a2      	str	r2, [r4, #8]
 800b2a6:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"6,9,10,5,12,17,18,15");
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	3304      	adds	r3, #4
 800b2ac:	4a3c      	ldr	r2, [pc, #240]	; (800b3a0 <problem_fetch+0x9cdc>)
 800b2ae:	461d      	mov	r5, r3
 800b2b0:	4614      	mov	r4, r2
 800b2b2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800b2b4:	6028      	str	r0, [r5, #0]
 800b2b6:	6069      	str	r1, [r5, #4]
 800b2b8:	60aa      	str	r2, [r5, #8]
 800b2ba:	60eb      	str	r3, [r5, #12]
 800b2bc:	6820      	ldr	r0, [r4, #0]
 800b2be:	6128      	str	r0, [r5, #16]
 800b2c0:	7923      	ldrb	r3, [r4, #4]
 800b2c2:	752b      	strb	r3, [r5, #20]
			strcpy(p->startFinish,"s,d,d,d,d,d,e,d");
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800b2ca:	4a36      	ldr	r2, [pc, #216]	; (800b3a4 <problem_fetch+0x9ce0>)
 800b2cc:	461c      	mov	r4, r3
 800b2ce:	4615      	mov	r5, r2
 800b2d0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b2d2:	6020      	str	r0, [r4, #0]
 800b2d4:	6061      	str	r1, [r4, #4]
 800b2d6:	60a2      	str	r2, [r4, #8]
 800b2d8:	60e3      	str	r3, [r4, #12]
			break;
 800b2da:	f011 b923 	b.w	801c524 <problem_fetch+0x1ae60>
		case 276 :
			strcpy(p->name,"GET WITH IT");
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800b2e4:	4a30      	ldr	r2, [pc, #192]	; (800b3a8 <problem_fetch+0x9ce4>)
 800b2e6:	461c      	mov	r4, r3
 800b2e8:	4613      	mov	r3, r2
 800b2ea:	cb07      	ldmia	r3!, {r0, r1, r2}
 800b2ec:	6020      	str	r0, [r4, #0]
 800b2ee:	6061      	str	r1, [r4, #4]
 800b2f0:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade,"7A");
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800b2f8:	4a1a      	ldr	r2, [pc, #104]	; (800b364 <problem_fetch+0x9ca0>)
 800b2fa:	8811      	ldrh	r1, [r2, #0]
 800b2fc:	7892      	ldrb	r2, [r2, #2]
 800b2fe:	8019      	strh	r1, [r3, #0]
 800b300:	709a      	strb	r2, [r3, #2]
			p->moveSize = 6;
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	2206      	movs	r2, #6
 800b306:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"E,B,A,E,D,A");
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	33a4      	adds	r3, #164	; 0xa4
 800b30c:	4a27      	ldr	r2, [pc, #156]	; (800b3ac <problem_fetch+0x9ce8>)
 800b30e:	461c      	mov	r4, r3
 800b310:	4613      	mov	r3, r2
 800b312:	cb07      	ldmia	r3!, {r0, r1, r2}
 800b314:	6020      	str	r0, [r4, #0]
 800b316:	6061      	str	r1, [r4, #4]
 800b318:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"6,12,14,8,18,9");
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	3304      	adds	r3, #4
 800b31e:	4a24      	ldr	r2, [pc, #144]	; (800b3b0 <problem_fetch+0x9cec>)
 800b320:	461c      	mov	r4, r3
 800b322:	4613      	mov	r3, r2
 800b324:	cb07      	ldmia	r3!, {r0, r1, r2}
 800b326:	6020      	str	r0, [r4, #0]
 800b328:	6061      	str	r1, [r4, #4]
 800b32a:	60a2      	str	r2, [r4, #8]
 800b32c:	881a      	ldrh	r2, [r3, #0]
 800b32e:	789b      	ldrb	r3, [r3, #2]
 800b330:	81a2      	strh	r2, [r4, #12]
 800b332:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish,"s,d,d,d,e,d");
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800b33a:	4a1e      	ldr	r2, [pc, #120]	; (800b3b4 <problem_fetch+0x9cf0>)
 800b33c:	461c      	mov	r4, r3
 800b33e:	4613      	mov	r3, r2
 800b340:	cb07      	ldmia	r3!, {r0, r1, r2}
 800b342:	6020      	str	r0, [r4, #0]
 800b344:	6061      	str	r1, [r4, #4]
 800b346:	60a2      	str	r2, [r4, #8]
			break;
 800b348:	f011 b8ec 	b.w	801c524 <problem_fetch+0x1ae60>
 800b34c:	08026f30 	.word	0x08026f30
 800b350:	08023854 	.word	0x08023854
 800b354:	08026f38 	.word	0x08026f38
 800b358:	08026f48 	.word	0x08026f48
 800b35c:	080239dc 	.word	0x080239dc
 800b360:	08026f5c 	.word	0x08026f5c
 800b364:	08023814 	.word	0x08023814
 800b368:	08026f70 	.word	0x08026f70
 800b36c:	08026f80 	.word	0x08026f80
 800b370:	08025c54 	.word	0x08025c54
 800b374:	08026f94 	.word	0x08026f94
 800b378:	080238ec 	.word	0x080238ec
 800b37c:	08026fa8 	.word	0x08026fa8
 800b380:	08026fb4 	.word	0x08026fb4
 800b384:	08023bf0 	.word	0x08023bf0
 800b388:	08026fc4 	.word	0x08026fc4
 800b38c:	08026fd4 	.word	0x08026fd4
 800b390:	08026fe0 	.word	0x08026fe0
 800b394:	08023d20 	.word	0x08023d20
 800b398:	08026ff0 	.word	0x08026ff0
 800b39c:	08027000 	.word	0x08027000
 800b3a0:	08027010 	.word	0x08027010
 800b3a4:	08023fa4 	.word	0x08023fa4
 800b3a8:	08027028 	.word	0x08027028
 800b3ac:	08027034 	.word	0x08027034
 800b3b0:	08027040 	.word	0x08027040
 800b3b4:	080250d0 	.word	0x080250d0
		case 277 :
			strcpy(p->name,"MOTIVATION");
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800b3be:	49ab      	ldr	r1, [pc, #684]	; (800b66c <problem_fetch+0x9fa8>)
 800b3c0:	461a      	mov	r2, r3
 800b3c2:	460b      	mov	r3, r1
 800b3c4:	cb03      	ldmia	r3!, {r0, r1}
 800b3c6:	6010      	str	r0, [r2, #0]
 800b3c8:	6051      	str	r1, [r2, #4]
 800b3ca:	8819      	ldrh	r1, [r3, #0]
 800b3cc:	789b      	ldrb	r3, [r3, #2]
 800b3ce:	8111      	strh	r1, [r2, #8]
 800b3d0:	7293      	strb	r3, [r2, #10]
			strcpy(p->grade,"6C+");
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800b3d8:	4aa5      	ldr	r2, [pc, #660]	; (800b670 <problem_fetch+0x9fac>)
 800b3da:	6810      	ldr	r0, [r2, #0]
 800b3dc:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	2207      	movs	r2, #7
 800b3e2:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"H,J,E,E,B,B,D");
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	33a4      	adds	r3, #164	; 0xa4
 800b3e8:	4aa2      	ldr	r2, [pc, #648]	; (800b674 <problem_fetch+0x9fb0>)
 800b3ea:	461c      	mov	r4, r3
 800b3ec:	4613      	mov	r3, r2
 800b3ee:	cb07      	ldmia	r3!, {r0, r1, r2}
 800b3f0:	6020      	str	r0, [r4, #0]
 800b3f2:	6061      	str	r1, [r4, #4]
 800b3f4:	60a2      	str	r2, [r4, #8]
 800b3f6:	881b      	ldrh	r3, [r3, #0]
 800b3f8:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,5,8,12,12,15,18");
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	3304      	adds	r3, #4
 800b3fe:	4a9e      	ldr	r2, [pc, #632]	; (800b678 <problem_fetch+0x9fb4>)
 800b400:	461d      	mov	r5, r3
 800b402:	4614      	mov	r4, r2
 800b404:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800b406:	6028      	str	r0, [r5, #0]
 800b408:	6069      	str	r1, [r5, #4]
 800b40a:	60aa      	str	r2, [r5, #8]
 800b40c:	60eb      	str	r3, [r5, #12]
 800b40e:	8823      	ldrh	r3, [r4, #0]
 800b410:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,s,d,d,d,d,e");
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800b418:	4a98      	ldr	r2, [pc, #608]	; (800b67c <problem_fetch+0x9fb8>)
 800b41a:	461c      	mov	r4, r3
 800b41c:	4613      	mov	r3, r2
 800b41e:	cb07      	ldmia	r3!, {r0, r1, r2}
 800b420:	6020      	str	r0, [r4, #0]
 800b422:	6061      	str	r1, [r4, #4]
 800b424:	60a2      	str	r2, [r4, #8]
 800b426:	881b      	ldrh	r3, [r3, #0]
 800b428:	81a3      	strh	r3, [r4, #12]
			break;
 800b42a:	f011 b87b 	b.w	801c524 <problem_fetch+0x1ae60>
		case 278 :
			strcpy(p->name,"SNEAKER JUICE");
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800b434:	4a92      	ldr	r2, [pc, #584]	; (800b680 <problem_fetch+0x9fbc>)
 800b436:	461c      	mov	r4, r3
 800b438:	4613      	mov	r3, r2
 800b43a:	cb07      	ldmia	r3!, {r0, r1, r2}
 800b43c:	6020      	str	r0, [r4, #0]
 800b43e:	6061      	str	r1, [r4, #4]
 800b440:	60a2      	str	r2, [r4, #8]
 800b442:	881b      	ldrh	r3, [r3, #0]
 800b444:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade,"6B+");
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800b44c:	4a8d      	ldr	r2, [pc, #564]	; (800b684 <problem_fetch+0x9fc0>)
 800b44e:	6810      	ldr	r0, [r2, #0]
 800b450:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	2207      	movs	r2, #7
 800b456:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,E,K,H,I,F,I");
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	33a4      	adds	r3, #164	; 0xa4
 800b45c:	4a8a      	ldr	r2, [pc, #552]	; (800b688 <problem_fetch+0x9fc4>)
 800b45e:	461c      	mov	r4, r3
 800b460:	4613      	mov	r3, r2
 800b462:	cb07      	ldmia	r3!, {r0, r1, r2}
 800b464:	6020      	str	r0, [r4, #0]
 800b466:	6061      	str	r1, [r4, #4]
 800b468:	60a2      	str	r2, [r4, #8]
 800b46a:	881b      	ldrh	r3, [r3, #0]
 800b46c:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,6,14,16,18,11,10");
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	3304      	adds	r3, #4
 800b472:	4a86      	ldr	r2, [pc, #536]	; (800b68c <problem_fetch+0x9fc8>)
 800b474:	461d      	mov	r5, r3
 800b476:	4614      	mov	r4, r2
 800b478:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800b47a:	6028      	str	r0, [r5, #0]
 800b47c:	6069      	str	r1, [r5, #4]
 800b47e:	60aa      	str	r2, [r5, #8]
 800b480:	60eb      	str	r3, [r5, #12]
 800b482:	8823      	ldrh	r3, [r4, #0]
 800b484:	78a2      	ldrb	r2, [r4, #2]
 800b486:	822b      	strh	r3, [r5, #16]
 800b488:	4613      	mov	r3, r2
 800b48a:	74ab      	strb	r3, [r5, #18]
			strcpy(p->startFinish,"s,d,d,d,e,d,d");
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800b492:	4a7f      	ldr	r2, [pc, #508]	; (800b690 <problem_fetch+0x9fcc>)
 800b494:	461c      	mov	r4, r3
 800b496:	4613      	mov	r3, r2
 800b498:	cb07      	ldmia	r3!, {r0, r1, r2}
 800b49a:	6020      	str	r0, [r4, #0]
 800b49c:	6061      	str	r1, [r4, #4]
 800b49e:	60a2      	str	r2, [r4, #8]
 800b4a0:	881b      	ldrh	r3, [r3, #0]
 800b4a2:	81a3      	strh	r3, [r4, #12]
			break;
 800b4a4:	f011 b83e 	b.w	801c524 <problem_fetch+0x1ae60>
		case 279 :
			strcpy(p->name,"BUNNY GRAHAMS");
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800b4ae:	4a79      	ldr	r2, [pc, #484]	; (800b694 <problem_fetch+0x9fd0>)
 800b4b0:	461c      	mov	r4, r3
 800b4b2:	4613      	mov	r3, r2
 800b4b4:	cb07      	ldmia	r3!, {r0, r1, r2}
 800b4b6:	6020      	str	r0, [r4, #0]
 800b4b8:	6061      	str	r1, [r4, #4]
 800b4ba:	60a2      	str	r2, [r4, #8]
 800b4bc:	881b      	ldrh	r3, [r3, #0]
 800b4be:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade,"6B+");
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800b4c6:	4a6f      	ldr	r2, [pc, #444]	; (800b684 <problem_fetch+0x9fc0>)
 800b4c8:	6810      	ldr	r0, [r2, #0]
 800b4ca:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	2207      	movs	r2, #7
 800b4d0:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,E,H,J,K,I,H");
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	33a4      	adds	r3, #164	; 0xa4
 800b4d6:	4a70      	ldr	r2, [pc, #448]	; (800b698 <problem_fetch+0x9fd4>)
 800b4d8:	461c      	mov	r4, r3
 800b4da:	4613      	mov	r3, r2
 800b4dc:	cb07      	ldmia	r3!, {r0, r1, r2}
 800b4de:	6020      	str	r0, [r4, #0]
 800b4e0:	6061      	str	r1, [r4, #4]
 800b4e2:	60a2      	str	r2, [r4, #8]
 800b4e4:	881b      	ldrh	r3, [r3, #0]
 800b4e6:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,6,12,13,16,18,8");
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	3304      	adds	r3, #4
 800b4ec:	4a6b      	ldr	r2, [pc, #428]	; (800b69c <problem_fetch+0x9fd8>)
 800b4ee:	461d      	mov	r5, r3
 800b4f0:	4614      	mov	r4, r2
 800b4f2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800b4f4:	6028      	str	r0, [r5, #0]
 800b4f6:	6069      	str	r1, [r5, #4]
 800b4f8:	60aa      	str	r2, [r5, #8]
 800b4fa:	60eb      	str	r3, [r5, #12]
 800b4fc:	8823      	ldrh	r3, [r4, #0]
 800b4fe:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,s,d,d,d,e,d");
 800b500:	687b      	ldr	r3, [r7, #4]
 800b502:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800b506:	4a66      	ldr	r2, [pc, #408]	; (800b6a0 <problem_fetch+0x9fdc>)
 800b508:	461c      	mov	r4, r3
 800b50a:	4613      	mov	r3, r2
 800b50c:	cb07      	ldmia	r3!, {r0, r1, r2}
 800b50e:	6020      	str	r0, [r4, #0]
 800b510:	6061      	str	r1, [r4, #4]
 800b512:	60a2      	str	r2, [r4, #8]
 800b514:	881b      	ldrh	r3, [r3, #0]
 800b516:	81a3      	strh	r3, [r4, #12]
			break;
 800b518:	f011 b804 	b.w	801c524 <problem_fetch+0x1ae60>
		case 280 :
			strcpy(p->name,"LOOK UP TO ME");
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800b522:	4a60      	ldr	r2, [pc, #384]	; (800b6a4 <problem_fetch+0x9fe0>)
 800b524:	461c      	mov	r4, r3
 800b526:	4613      	mov	r3, r2
 800b528:	cb07      	ldmia	r3!, {r0, r1, r2}
 800b52a:	6020      	str	r0, [r4, #0]
 800b52c:	6061      	str	r1, [r4, #4]
 800b52e:	60a2      	str	r2, [r4, #8]
 800b530:	881b      	ldrh	r3, [r3, #0]
 800b532:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade,"6C+");
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800b53a:	4a4d      	ldr	r2, [pc, #308]	; (800b670 <problem_fetch+0x9fac>)
 800b53c:	6810      	ldr	r0, [r2, #0]
 800b53e:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	2206      	movs	r2, #6
 800b544:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,G,H,G,G,D");
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	33a4      	adds	r3, #164	; 0xa4
 800b54a:	4a57      	ldr	r2, [pc, #348]	; (800b6a8 <problem_fetch+0x9fe4>)
 800b54c:	461c      	mov	r4, r3
 800b54e:	4613      	mov	r3, r2
 800b550:	cb07      	ldmia	r3!, {r0, r1, r2}
 800b552:	6020      	str	r0, [r4, #0]
 800b554:	6061      	str	r1, [r4, #4]
 800b556:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,6,10,14,17,18");
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	3304      	adds	r3, #4
 800b55c:	4a53      	ldr	r2, [pc, #332]	; (800b6ac <problem_fetch+0x9fe8>)
 800b55e:	461c      	mov	r4, r3
 800b560:	4615      	mov	r5, r2
 800b562:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b564:	6020      	str	r0, [r4, #0]
 800b566:	6061      	str	r1, [r4, #4]
 800b568:	60a2      	str	r2, [r4, #8]
 800b56a:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,s,d,d,d,e");
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800b572:	4a4f      	ldr	r2, [pc, #316]	; (800b6b0 <problem_fetch+0x9fec>)
 800b574:	461c      	mov	r4, r3
 800b576:	4613      	mov	r3, r2
 800b578:	cb07      	ldmia	r3!, {r0, r1, r2}
 800b57a:	6020      	str	r0, [r4, #0]
 800b57c:	6061      	str	r1, [r4, #4]
 800b57e:	60a2      	str	r2, [r4, #8]
			break;
 800b580:	f010 bfd0 	b.w	801c524 <problem_fetch+0x1ae60>
		case 281 :
			strcpy(p->name,"BOOKA");
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800b58a:	4a4a      	ldr	r2, [pc, #296]	; (800b6b4 <problem_fetch+0x9ff0>)
 800b58c:	6810      	ldr	r0, [r2, #0]
 800b58e:	6018      	str	r0, [r3, #0]
 800b590:	8892      	ldrh	r2, [r2, #4]
 800b592:	809a      	strh	r2, [r3, #4]
			strcpy(p->grade,"7A");
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800b59a:	4a47      	ldr	r2, [pc, #284]	; (800b6b8 <problem_fetch+0x9ff4>)
 800b59c:	8811      	ldrh	r1, [r2, #0]
 800b59e:	7892      	ldrb	r2, [r2, #2]
 800b5a0:	8019      	strh	r1, [r3, #0]
 800b5a2:	709a      	strb	r2, [r3, #2]
			p->moveSize = 6;
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	2206      	movs	r2, #6
 800b5a8:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"H,H,E,E,A,D");
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	33a4      	adds	r3, #164	; 0xa4
 800b5ae:	4a43      	ldr	r2, [pc, #268]	; (800b6bc <problem_fetch+0x9ff8>)
 800b5b0:	461c      	mov	r4, r3
 800b5b2:	4613      	mov	r3, r2
 800b5b4:	cb07      	ldmia	r3!, {r0, r1, r2}
 800b5b6:	6020      	str	r0, [r4, #0]
 800b5b8:	6061      	str	r1, [r4, #4]
 800b5ba:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,8,9,12,14,18");
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	3304      	adds	r3, #4
 800b5c0:	4a3f      	ldr	r2, [pc, #252]	; (800b6c0 <problem_fetch+0x9ffc>)
 800b5c2:	461c      	mov	r4, r3
 800b5c4:	4613      	mov	r3, r2
 800b5c6:	cb07      	ldmia	r3!, {r0, r1, r2}
 800b5c8:	6020      	str	r0, [r4, #0]
 800b5ca:	6061      	str	r1, [r4, #4]
 800b5cc:	60a2      	str	r2, [r4, #8]
 800b5ce:	881a      	ldrh	r2, [r3, #0]
 800b5d0:	789b      	ldrb	r3, [r3, #2]
 800b5d2:	81a2      	strh	r2, [r4, #12]
 800b5d4:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800b5dc:	4a39      	ldr	r2, [pc, #228]	; (800b6c4 <problem_fetch+0xa000>)
 800b5de:	461c      	mov	r4, r3
 800b5e0:	4613      	mov	r3, r2
 800b5e2:	cb07      	ldmia	r3!, {r0, r1, r2}
 800b5e4:	6020      	str	r0, [r4, #0]
 800b5e6:	6061      	str	r1, [r4, #4]
 800b5e8:	60a2      	str	r2, [r4, #8]
			break;
 800b5ea:	f010 bf9b 	b.w	801c524 <problem_fetch+0x1ae60>
		case 282 :
			strcpy(p->name,"FIVEB PROJ 2");
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800b5f4:	4a34      	ldr	r2, [pc, #208]	; (800b6c8 <problem_fetch+0xa004>)
 800b5f6:	461c      	mov	r4, r3
 800b5f8:	4613      	mov	r3, r2
 800b5fa:	cb07      	ldmia	r3!, {r0, r1, r2}
 800b5fc:	6020      	str	r0, [r4, #0]
 800b5fe:	6061      	str	r1, [r4, #4]
 800b600:	60a2      	str	r2, [r4, #8]
 800b602:	781b      	ldrb	r3, [r3, #0]
 800b604:	7323      	strb	r3, [r4, #12]
			strcpy(p->grade,"7A+");
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800b60c:	4a2f      	ldr	r2, [pc, #188]	; (800b6cc <problem_fetch+0xa008>)
 800b60e:	6810      	ldr	r0, [r2, #0]
 800b610:	6018      	str	r0, [r3, #0]
			p->moveSize = 10;
 800b612:	687b      	ldr	r3, [r7, #4]
 800b614:	220a      	movs	r2, #10
 800b616:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,J,J,H,H,F,J,G,G,D");
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	33a4      	adds	r3, #164	; 0xa4
 800b61c:	4a2c      	ldr	r2, [pc, #176]	; (800b6d0 <problem_fetch+0xa00c>)
 800b61e:	461d      	mov	r5, r3
 800b620:	4614      	mov	r4, r2
 800b622:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800b624:	6028      	str	r0, [r5, #0]
 800b626:	6069      	str	r1, [r5, #4]
 800b628:	60aa      	str	r2, [r5, #8]
 800b62a:	60eb      	str	r3, [r5, #12]
 800b62c:	6820      	ldr	r0, [r4, #0]
 800b62e:	6128      	str	r0, [r5, #16]
			strcpy(p->moveNumbers,"4,5,7,8,10,11,12,15,17,18");
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	3304      	adds	r3, #4
 800b634:	4a27      	ldr	r2, [pc, #156]	; (800b6d4 <problem_fetch+0xa010>)
 800b636:	461d      	mov	r5, r3
 800b638:	4614      	mov	r4, r2
 800b63a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800b63c:	6028      	str	r0, [r5, #0]
 800b63e:	6069      	str	r1, [r5, #4]
 800b640:	60aa      	str	r2, [r5, #8]
 800b642:	60eb      	str	r3, [r5, #12]
 800b644:	cc03      	ldmia	r4!, {r0, r1}
 800b646:	6128      	str	r0, [r5, #16]
 800b648:	6169      	str	r1, [r5, #20]
 800b64a:	8823      	ldrh	r3, [r4, #0]
 800b64c:	832b      	strh	r3, [r5, #24]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,d,d,e");
 800b64e:	687b      	ldr	r3, [r7, #4]
 800b650:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800b654:	4a20      	ldr	r2, [pc, #128]	; (800b6d8 <problem_fetch+0xa014>)
 800b656:	461d      	mov	r5, r3
 800b658:	4614      	mov	r4, r2
 800b65a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800b65c:	6028      	str	r0, [r5, #0]
 800b65e:	6069      	str	r1, [r5, #4]
 800b660:	60aa      	str	r2, [r5, #8]
 800b662:	60eb      	str	r3, [r5, #12]
 800b664:	6820      	ldr	r0, [r4, #0]
 800b666:	6128      	str	r0, [r5, #16]
			break;
 800b668:	f010 bf5c 	b.w	801c524 <problem_fetch+0x1ae60>
 800b66c:	08027050 	.word	0x08027050
 800b670:	080238ec 	.word	0x080238ec
 800b674:	0802705c 	.word	0x0802705c
 800b678:	0802706c 	.word	0x0802706c
 800b67c:	080238cc 	.word	0x080238cc
 800b680:	08027080 	.word	0x08027080
 800b684:	08023854 	.word	0x08023854
 800b688:	08027090 	.word	0x08027090
 800b68c:	080270a0 	.word	0x080270a0
 800b690:	080270b4 	.word	0x080270b4
 800b694:	080270c4 	.word	0x080270c4
 800b698:	080270d4 	.word	0x080270d4
 800b69c:	080270e4 	.word	0x080270e4
 800b6a0:	080270f8 	.word	0x080270f8
 800b6a4:	08027108 	.word	0x08027108
 800b6a8:	08027118 	.word	0x08027118
 800b6ac:	08025ee0 	.word	0x08025ee0
 800b6b0:	08023834 	.word	0x08023834
 800b6b4:	08027124 	.word	0x08027124
 800b6b8:	08023814 	.word	0x08023814
 800b6bc:	0802712c 	.word	0x0802712c
 800b6c0:	08023d7c 	.word	0x08023d7c
 800b6c4:	08023bf0 	.word	0x08023bf0
 800b6c8:	08027138 	.word	0x08027138
 800b6cc:	080239f4 	.word	0x080239f4
 800b6d0:	08027148 	.word	0x08027148
 800b6d4:	0802715c 	.word	0x0802715c
 800b6d8:	080240fc 	.word	0x080240fc
		case 283 :
			strcpy(p->name,"MÄX 2");
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800b6e2:	4ab5      	ldr	r2, [pc, #724]	; (800b9b8 <problem_fetch+0xa2f4>)
 800b6e4:	6810      	ldr	r0, [r2, #0]
 800b6e6:	6018      	str	r0, [r3, #0]
 800b6e8:	8891      	ldrh	r1, [r2, #4]
 800b6ea:	7992      	ldrb	r2, [r2, #6]
 800b6ec:	8099      	strh	r1, [r3, #4]
 800b6ee:	719a      	strb	r2, [r3, #6]
			strcpy(p->grade,"6B+");
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800b6f6:	4ab1      	ldr	r2, [pc, #708]	; (800b9bc <problem_fetch+0xa2f8>)
 800b6f8:	6810      	ldr	r0, [r2, #0]
 800b6fa:	6018      	str	r0, [r3, #0]
			p->moveSize = 11;
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	220b      	movs	r2, #11
 800b700:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,G,H,G,F,C,D,A,C,A,A");
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	33a4      	adds	r3, #164	; 0xa4
 800b706:	4aae      	ldr	r2, [pc, #696]	; (800b9c0 <problem_fetch+0xa2fc>)
 800b708:	461d      	mov	r5, r3
 800b70a:	4614      	mov	r4, r2
 800b70c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800b70e:	6028      	str	r0, [r5, #0]
 800b710:	6069      	str	r1, [r5, #4]
 800b712:	60aa      	str	r2, [r5, #8]
 800b714:	60eb      	str	r3, [r5, #12]
 800b716:	6820      	ldr	r0, [r4, #0]
 800b718:	6128      	str	r0, [r5, #16]
 800b71a:	88a3      	ldrh	r3, [r4, #4]
 800b71c:	82ab      	strh	r3, [r5, #20]
			strcpy(p->moveNumbers,"5,4,8,9,11,13,15,9,5,14,18");
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	3304      	adds	r3, #4
 800b722:	4aa8      	ldr	r2, [pc, #672]	; (800b9c4 <problem_fetch+0xa300>)
 800b724:	461d      	mov	r5, r3
 800b726:	4614      	mov	r4, r2
 800b728:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800b72a:	6028      	str	r0, [r5, #0]
 800b72c:	6069      	str	r1, [r5, #4]
 800b72e:	60aa      	str	r2, [r5, #8]
 800b730:	60eb      	str	r3, [r5, #12]
 800b732:	cc03      	ldmia	r4!, {r0, r1}
 800b734:	6128      	str	r0, [r5, #16]
 800b736:	6169      	str	r1, [r5, #20]
 800b738:	8823      	ldrh	r3, [r4, #0]
 800b73a:	78a2      	ldrb	r2, [r4, #2]
 800b73c:	832b      	strh	r3, [r5, #24]
 800b73e:	4613      	mov	r3, r2
 800b740:	76ab      	strb	r3, [r5, #26]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,d,d,d,e");
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800b748:	4a9f      	ldr	r2, [pc, #636]	; (800b9c8 <problem_fetch+0xa304>)
 800b74a:	461d      	mov	r5, r3
 800b74c:	4614      	mov	r4, r2
 800b74e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800b750:	6028      	str	r0, [r5, #0]
 800b752:	6069      	str	r1, [r5, #4]
 800b754:	60aa      	str	r2, [r5, #8]
 800b756:	60eb      	str	r3, [r5, #12]
 800b758:	6820      	ldr	r0, [r4, #0]
 800b75a:	6128      	str	r0, [r5, #16]
 800b75c:	88a3      	ldrh	r3, [r4, #4]
 800b75e:	82ab      	strh	r3, [r5, #20]
			break;
 800b760:	f010 bee0 	b.w	801c524 <problem_fetch+0x1ae60>
		case 284 :
			strcpy(p->name,"BACK IN ACTION");
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800b76a:	4a98      	ldr	r2, [pc, #608]	; (800b9cc <problem_fetch+0xa308>)
 800b76c:	461c      	mov	r4, r3
 800b76e:	4613      	mov	r3, r2
 800b770:	cb07      	ldmia	r3!, {r0, r1, r2}
 800b772:	6020      	str	r0, [r4, #0]
 800b774:	6061      	str	r1, [r4, #4]
 800b776:	60a2      	str	r2, [r4, #8]
 800b778:	881a      	ldrh	r2, [r3, #0]
 800b77a:	789b      	ldrb	r3, [r3, #2]
 800b77c:	81a2      	strh	r2, [r4, #12]
 800b77e:	73a3      	strb	r3, [r4, #14]
			strcpy(p->grade,"6B+");
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800b786:	4a8d      	ldr	r2, [pc, #564]	; (800b9bc <problem_fetch+0xa2f8>)
 800b788:	6810      	ldr	r0, [r2, #0]
 800b78a:	6018      	str	r0, [r3, #0]
			p->moveSize = 8;
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	2208      	movs	r2, #8
 800b790:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"C,E,E,B,E,C,E,D");
 800b792:	687b      	ldr	r3, [r7, #4]
 800b794:	33a4      	adds	r3, #164	; 0xa4
 800b796:	4a8e      	ldr	r2, [pc, #568]	; (800b9d0 <problem_fetch+0xa30c>)
 800b798:	461c      	mov	r4, r3
 800b79a:	4615      	mov	r5, r2
 800b79c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b79e:	6020      	str	r0, [r4, #0]
 800b7a0:	6061      	str	r1, [r4, #4]
 800b7a2:	60a2      	str	r2, [r4, #8]
 800b7a4:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,6,8,10,12,13,16,18");
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	3304      	adds	r3, #4
 800b7aa:	4a8a      	ldr	r2, [pc, #552]	; (800b9d4 <problem_fetch+0xa310>)
 800b7ac:	461d      	mov	r5, r3
 800b7ae:	4614      	mov	r4, r2
 800b7b0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800b7b2:	6028      	str	r0, [r5, #0]
 800b7b4:	6069      	str	r1, [r5, #4]
 800b7b6:	60aa      	str	r2, [r5, #8]
 800b7b8:	60eb      	str	r3, [r5, #12]
 800b7ba:	6820      	ldr	r0, [r4, #0]
 800b7bc:	6128      	str	r0, [r5, #16]
 800b7be:	7923      	ldrb	r3, [r4, #4]
 800b7c0:	752b      	strb	r3, [r5, #20]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,e");
 800b7c2:	687b      	ldr	r3, [r7, #4]
 800b7c4:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800b7c8:	4a83      	ldr	r2, [pc, #524]	; (800b9d8 <problem_fetch+0xa314>)
 800b7ca:	461c      	mov	r4, r3
 800b7cc:	4615      	mov	r5, r2
 800b7ce:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b7d0:	6020      	str	r0, [r4, #0]
 800b7d2:	6061      	str	r1, [r4, #4]
 800b7d4:	60a2      	str	r2, [r4, #8]
 800b7d6:	60e3      	str	r3, [r4, #12]
			break;
 800b7d8:	f010 bea4 	b.w	801c524 <problem_fetch+0x1ae60>
		case 285 :
			strcpy(p->name,"THE REAL SIRIUS BLACK");
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800b7e2:	4a7e      	ldr	r2, [pc, #504]	; (800b9dc <problem_fetch+0xa318>)
 800b7e4:	461d      	mov	r5, r3
 800b7e6:	4614      	mov	r4, r2
 800b7e8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800b7ea:	6028      	str	r0, [r5, #0]
 800b7ec:	6069      	str	r1, [r5, #4]
 800b7ee:	60aa      	str	r2, [r5, #8]
 800b7f0:	60eb      	str	r3, [r5, #12]
 800b7f2:	6820      	ldr	r0, [r4, #0]
 800b7f4:	6128      	str	r0, [r5, #16]
 800b7f6:	88a3      	ldrh	r3, [r4, #4]
 800b7f8:	82ab      	strh	r3, [r5, #20]
			strcpy(p->grade,"7A");
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800b800:	4a77      	ldr	r2, [pc, #476]	; (800b9e0 <problem_fetch+0xa31c>)
 800b802:	8811      	ldrh	r1, [r2, #0]
 800b804:	7892      	ldrb	r2, [r2, #2]
 800b806:	8019      	strh	r1, [r3, #0]
 800b808:	709a      	strb	r2, [r3, #2]
			p->moveSize = 7;
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	2207      	movs	r2, #7
 800b80e:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"C,E,J,E,F,C,D");
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	33a4      	adds	r3, #164	; 0xa4
 800b814:	4a73      	ldr	r2, [pc, #460]	; (800b9e4 <problem_fetch+0xa320>)
 800b816:	461c      	mov	r4, r3
 800b818:	4613      	mov	r3, r2
 800b81a:	cb07      	ldmia	r3!, {r0, r1, r2}
 800b81c:	6020      	str	r0, [r4, #0]
 800b81e:	6061      	str	r1, [r4, #4]
 800b820:	60a2      	str	r2, [r4, #8]
 800b822:	881b      	ldrh	r3, [r3, #0]
 800b824:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,6,5,9,11,13,18");
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	3304      	adds	r3, #4
 800b82a:	4a6f      	ldr	r2, [pc, #444]	; (800b9e8 <problem_fetch+0xa324>)
 800b82c:	461d      	mov	r5, r3
 800b82e:	4614      	mov	r4, r2
 800b830:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800b832:	6028      	str	r0, [r5, #0]
 800b834:	6069      	str	r1, [r5, #4]
 800b836:	60aa      	str	r2, [r5, #8]
 800b838:	60eb      	str	r3, [r5, #12]
 800b83a:	7823      	ldrb	r3, [r4, #0]
 800b83c:	742b      	strb	r3, [r5, #16]
			strcpy(p->startFinish,"s,s,d,d,d,d,e");
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800b844:	4a69      	ldr	r2, [pc, #420]	; (800b9ec <problem_fetch+0xa328>)
 800b846:	461c      	mov	r4, r3
 800b848:	4613      	mov	r3, r2
 800b84a:	cb07      	ldmia	r3!, {r0, r1, r2}
 800b84c:	6020      	str	r0, [r4, #0]
 800b84e:	6061      	str	r1, [r4, #4]
 800b850:	60a2      	str	r2, [r4, #8]
 800b852:	881b      	ldrh	r3, [r3, #0]
 800b854:	81a3      	strh	r3, [r4, #12]
			break;
 800b856:	f010 be65 	b.w	801c524 <problem_fetch+0x1ae60>
		case 286 :
			strcpy(p->name,"REAL SIRIUS BLACK");
 800b85a:	687b      	ldr	r3, [r7, #4]
 800b85c:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800b860:	4a63      	ldr	r2, [pc, #396]	; (800b9f0 <problem_fetch+0xa32c>)
 800b862:	461d      	mov	r5, r3
 800b864:	4614      	mov	r4, r2
 800b866:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800b868:	6028      	str	r0, [r5, #0]
 800b86a:	6069      	str	r1, [r5, #4]
 800b86c:	60aa      	str	r2, [r5, #8]
 800b86e:	60eb      	str	r3, [r5, #12]
 800b870:	8823      	ldrh	r3, [r4, #0]
 800b872:	822b      	strh	r3, [r5, #16]
			strcpy(p->grade,"7A");
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800b87a:	4a59      	ldr	r2, [pc, #356]	; (800b9e0 <problem_fetch+0xa31c>)
 800b87c:	8811      	ldrh	r1, [r2, #0]
 800b87e:	7892      	ldrb	r2, [r2, #2]
 800b880:	8019      	strh	r1, [r3, #0]
 800b882:	709a      	strb	r2, [r3, #2]
			p->moveSize = 6;
 800b884:	687b      	ldr	r3, [r7, #4]
 800b886:	2206      	movs	r2, #6
 800b888:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"C,E,E,F,C,D");
 800b88a:	687b      	ldr	r3, [r7, #4]
 800b88c:	33a4      	adds	r3, #164	; 0xa4
 800b88e:	4a59      	ldr	r2, [pc, #356]	; (800b9f4 <problem_fetch+0xa330>)
 800b890:	461c      	mov	r4, r3
 800b892:	4613      	mov	r3, r2
 800b894:	cb07      	ldmia	r3!, {r0, r1, r2}
 800b896:	6020      	str	r0, [r4, #0]
 800b898:	6061      	str	r1, [r4, #4]
 800b89a:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,6,9,11,13,18");
 800b89c:	687b      	ldr	r3, [r7, #4]
 800b89e:	3304      	adds	r3, #4
 800b8a0:	4a55      	ldr	r2, [pc, #340]	; (800b9f8 <problem_fetch+0xa334>)
 800b8a2:	461c      	mov	r4, r3
 800b8a4:	4613      	mov	r3, r2
 800b8a6:	cb07      	ldmia	r3!, {r0, r1, r2}
 800b8a8:	6020      	str	r0, [r4, #0]
 800b8aa:	6061      	str	r1, [r4, #4]
 800b8ac:	60a2      	str	r2, [r4, #8]
 800b8ae:	881a      	ldrh	r2, [r3, #0]
 800b8b0:	789b      	ldrb	r3, [r3, #2]
 800b8b2:	81a2      	strh	r2, [r4, #12]
 800b8b4:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish,"s,s,d,d,d,e");
 800b8b6:	687b      	ldr	r3, [r7, #4]
 800b8b8:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800b8bc:	4a4f      	ldr	r2, [pc, #316]	; (800b9fc <problem_fetch+0xa338>)
 800b8be:	461c      	mov	r4, r3
 800b8c0:	4613      	mov	r3, r2
 800b8c2:	cb07      	ldmia	r3!, {r0, r1, r2}
 800b8c4:	6020      	str	r0, [r4, #0]
 800b8c6:	6061      	str	r1, [r4, #4]
 800b8c8:	60a2      	str	r2, [r4, #8]
			break;
 800b8ca:	f010 be2b 	b.w	801c524 <problem_fetch+0x1ae60>
		case 287 :
			strcpy(p->name,"SIRIUS BLACK");
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800b8d4:	4a4a      	ldr	r2, [pc, #296]	; (800ba00 <problem_fetch+0xa33c>)
 800b8d6:	461c      	mov	r4, r3
 800b8d8:	4613      	mov	r3, r2
 800b8da:	cb07      	ldmia	r3!, {r0, r1, r2}
 800b8dc:	6020      	str	r0, [r4, #0]
 800b8de:	6061      	str	r1, [r4, #4]
 800b8e0:	60a2      	str	r2, [r4, #8]
 800b8e2:	781b      	ldrb	r3, [r3, #0]
 800b8e4:	7323      	strb	r3, [r4, #12]
			strcpy(p->grade,"7A");
 800b8e6:	687b      	ldr	r3, [r7, #4]
 800b8e8:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800b8ec:	4a3c      	ldr	r2, [pc, #240]	; (800b9e0 <problem_fetch+0xa31c>)
 800b8ee:	8811      	ldrh	r1, [r2, #0]
 800b8f0:	7892      	ldrb	r2, [r2, #2]
 800b8f2:	8019      	strh	r1, [r3, #0]
 800b8f4:	709a      	strb	r2, [r3, #2]
			p->moveSize = 7;
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	2207      	movs	r2, #7
 800b8fa:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"C,H,E,F,J,C,D");
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	33a4      	adds	r3, #164	; 0xa4
 800b900:	4a40      	ldr	r2, [pc, #256]	; (800ba04 <problem_fetch+0xa340>)
 800b902:	461c      	mov	r4, r3
 800b904:	4613      	mov	r3, r2
 800b906:	cb07      	ldmia	r3!, {r0, r1, r2}
 800b908:	6020      	str	r0, [r4, #0]
 800b90a:	6061      	str	r1, [r4, #4]
 800b90c:	60a2      	str	r2, [r4, #8]
 800b90e:	881b      	ldrh	r3, [r3, #0]
 800b910:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,5,9,11,5,13,18");
 800b912:	687b      	ldr	r3, [r7, #4]
 800b914:	3304      	adds	r3, #4
 800b916:	4a3c      	ldr	r2, [pc, #240]	; (800ba08 <problem_fetch+0xa344>)
 800b918:	461d      	mov	r5, r3
 800b91a:	4614      	mov	r4, r2
 800b91c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800b91e:	6028      	str	r0, [r5, #0]
 800b920:	6069      	str	r1, [r5, #4]
 800b922:	60aa      	str	r2, [r5, #8]
 800b924:	60eb      	str	r3, [r5, #12]
 800b926:	7823      	ldrb	r3, [r4, #0]
 800b928:	742b      	strb	r3, [r5, #16]
			strcpy(p->startFinish,"s,s,d,d,d,d,e");
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800b930:	4a2e      	ldr	r2, [pc, #184]	; (800b9ec <problem_fetch+0xa328>)
 800b932:	461c      	mov	r4, r3
 800b934:	4613      	mov	r3, r2
 800b936:	cb07      	ldmia	r3!, {r0, r1, r2}
 800b938:	6020      	str	r0, [r4, #0]
 800b93a:	6061      	str	r1, [r4, #4]
 800b93c:	60a2      	str	r2, [r4, #8]
 800b93e:	881b      	ldrh	r3, [r3, #0]
 800b940:	81a3      	strh	r3, [r4, #12]
			break;
 800b942:	f010 bdef 	b.w	801c524 <problem_fetch+0x1ae60>
		case 288 :
			strcpy(p->name,"SUCK IT ELLIOTT");
 800b946:	687b      	ldr	r3, [r7, #4]
 800b948:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800b94c:	4a2f      	ldr	r2, [pc, #188]	; (800ba0c <problem_fetch+0xa348>)
 800b94e:	461c      	mov	r4, r3
 800b950:	4615      	mov	r5, r2
 800b952:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b954:	6020      	str	r0, [r4, #0]
 800b956:	6061      	str	r1, [r4, #4]
 800b958:	60a2      	str	r2, [r4, #8]
 800b95a:	60e3      	str	r3, [r4, #12]
			strcpy(p->grade,"7A");
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800b962:	4a1f      	ldr	r2, [pc, #124]	; (800b9e0 <problem_fetch+0xa31c>)
 800b964:	8811      	ldrh	r1, [r2, #0]
 800b966:	7892      	ldrb	r2, [r2, #2]
 800b968:	8019      	strh	r1, [r3, #0]
 800b96a:	709a      	strb	r2, [r3, #2]
			p->moveSize = 6;
 800b96c:	687b      	ldr	r3, [r7, #4]
 800b96e:	2206      	movs	r2, #6
 800b970:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,E,H,D,D,D");
 800b972:	687b      	ldr	r3, [r7, #4]
 800b974:	33a4      	adds	r3, #164	; 0xa4
 800b976:	4a26      	ldr	r2, [pc, #152]	; (800ba10 <problem_fetch+0xa34c>)
 800b978:	461c      	mov	r4, r3
 800b97a:	4613      	mov	r3, r2
 800b97c:	cb07      	ldmia	r3!, {r0, r1, r2}
 800b97e:	6020      	str	r0, [r4, #0]
 800b980:	6061      	str	r1, [r4, #4]
 800b982:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,6,8,11,15,18");
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	3304      	adds	r3, #4
 800b988:	4a22      	ldr	r2, [pc, #136]	; (800ba14 <problem_fetch+0xa350>)
 800b98a:	461c      	mov	r4, r3
 800b98c:	4613      	mov	r3, r2
 800b98e:	cb07      	ldmia	r3!, {r0, r1, r2}
 800b990:	6020      	str	r0, [r4, #0]
 800b992:	6061      	str	r1, [r4, #4]
 800b994:	60a2      	str	r2, [r4, #8]
 800b996:	881a      	ldrh	r2, [r3, #0]
 800b998:	789b      	ldrb	r3, [r3, #2]
 800b99a:	81a2      	strh	r2, [r4, #12]
 800b99c:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish,"s,s,d,d,d,e");
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800b9a4:	4a15      	ldr	r2, [pc, #84]	; (800b9fc <problem_fetch+0xa338>)
 800b9a6:	461c      	mov	r4, r3
 800b9a8:	4613      	mov	r3, r2
 800b9aa:	cb07      	ldmia	r3!, {r0, r1, r2}
 800b9ac:	6020      	str	r0, [r4, #0]
 800b9ae:	6061      	str	r1, [r4, #4]
 800b9b0:	60a2      	str	r2, [r4, #8]
			break;
 800b9b2:	f010 bdb7 	b.w	801c524 <problem_fetch+0x1ae60>
 800b9b6:	bf00      	nop
 800b9b8:	08027178 	.word	0x08027178
 800b9bc:	08023854 	.word	0x08023854
 800b9c0:	08027180 	.word	0x08027180
 800b9c4:	08027198 	.word	0x08027198
 800b9c8:	080271b4 	.word	0x080271b4
 800b9cc:	080271cc 	.word	0x080271cc
 800b9d0:	080271dc 	.word	0x080271dc
 800b9d4:	080271ec 	.word	0x080271ec
 800b9d8:	08023978 	.word	0x08023978
 800b9dc:	08027204 	.word	0x08027204
 800b9e0:	08023814 	.word	0x08023814
 800b9e4:	0802721c 	.word	0x0802721c
 800b9e8:	0802722c 	.word	0x0802722c
 800b9ec:	080238cc 	.word	0x080238cc
 800b9f0:	08027240 	.word	0x08027240
 800b9f4:	08027254 	.word	0x08027254
 800b9f8:	08027260 	.word	0x08027260
 800b9fc:	08023834 	.word	0x08023834
 800ba00:	08027270 	.word	0x08027270
 800ba04:	08027280 	.word	0x08027280
 800ba08:	08027290 	.word	0x08027290
 800ba0c:	080272a4 	.word	0x080272a4
 800ba10:	080272b4 	.word	0x080272b4
 800ba14:	080272c0 	.word	0x080272c0
		case 289 :
			strcpy(p->name,"SPALLA&AMP;PIATTA");
 800ba18:	687b      	ldr	r3, [r7, #4]
 800ba1a:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800ba1e:	4abe      	ldr	r2, [pc, #760]	; (800bd18 <problem_fetch+0xa654>)
 800ba20:	461d      	mov	r5, r3
 800ba22:	4614      	mov	r4, r2
 800ba24:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800ba26:	6028      	str	r0, [r5, #0]
 800ba28:	6069      	str	r1, [r5, #4]
 800ba2a:	60aa      	str	r2, [r5, #8]
 800ba2c:	60eb      	str	r3, [r5, #12]
 800ba2e:	8823      	ldrh	r3, [r4, #0]
 800ba30:	822b      	strh	r3, [r5, #16]
			strcpy(p->grade,"7A+");
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800ba38:	4ab8      	ldr	r2, [pc, #736]	; (800bd1c <problem_fetch+0xa658>)
 800ba3a:	6810      	ldr	r0, [r2, #0]
 800ba3c:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 800ba3e:	687b      	ldr	r3, [r7, #4]
 800ba40:	2207      	movs	r2, #7
 800ba42:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,H,K,F,G,D,D");
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	33a4      	adds	r3, #164	; 0xa4
 800ba48:	4ab5      	ldr	r2, [pc, #724]	; (800bd20 <problem_fetch+0xa65c>)
 800ba4a:	461c      	mov	r4, r3
 800ba4c:	4613      	mov	r3, r2
 800ba4e:	cb07      	ldmia	r3!, {r0, r1, r2}
 800ba50:	6020      	str	r0, [r4, #0]
 800ba52:	6061      	str	r1, [r4, #4]
 800ba54:	60a2      	str	r2, [r4, #8]
 800ba56:	881b      	ldrh	r3, [r3, #0]
 800ba58:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,5,9,11,14,15,18");
 800ba5a:	687b      	ldr	r3, [r7, #4]
 800ba5c:	3304      	adds	r3, #4
 800ba5e:	4ab1      	ldr	r2, [pc, #708]	; (800bd24 <problem_fetch+0xa660>)
 800ba60:	461d      	mov	r5, r3
 800ba62:	4614      	mov	r4, r2
 800ba64:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800ba66:	6028      	str	r0, [r5, #0]
 800ba68:	6069      	str	r1, [r5, #4]
 800ba6a:	60aa      	str	r2, [r5, #8]
 800ba6c:	60eb      	str	r3, [r5, #12]
 800ba6e:	8823      	ldrh	r3, [r4, #0]
 800ba70:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,s,d,d,d,d,e");
 800ba72:	687b      	ldr	r3, [r7, #4]
 800ba74:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800ba78:	4aab      	ldr	r2, [pc, #684]	; (800bd28 <problem_fetch+0xa664>)
 800ba7a:	461c      	mov	r4, r3
 800ba7c:	4613      	mov	r3, r2
 800ba7e:	cb07      	ldmia	r3!, {r0, r1, r2}
 800ba80:	6020      	str	r0, [r4, #0]
 800ba82:	6061      	str	r1, [r4, #4]
 800ba84:	60a2      	str	r2, [r4, #8]
 800ba86:	881b      	ldrh	r3, [r3, #0]
 800ba88:	81a3      	strh	r3, [r4, #12]
			break;
 800ba8a:	f010 bd4b 	b.w	801c524 <problem_fetch+0x1ae60>
		case 290 :
			strcpy(p->name,"몰라여");
 800ba8e:	687b      	ldr	r3, [r7, #4]
 800ba90:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800ba94:	49a5      	ldr	r1, [pc, #660]	; (800bd2c <problem_fetch+0xa668>)
 800ba96:	461a      	mov	r2, r3
 800ba98:	460b      	mov	r3, r1
 800ba9a:	cb03      	ldmia	r3!, {r0, r1}
 800ba9c:	6010      	str	r0, [r2, #0]
 800ba9e:	6051      	str	r1, [r2, #4]
 800baa0:	881b      	ldrh	r3, [r3, #0]
 800baa2:	8113      	strh	r3, [r2, #8]
			strcpy(p->grade,"7A");
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800baaa:	4aa1      	ldr	r2, [pc, #644]	; (800bd30 <problem_fetch+0xa66c>)
 800baac:	8811      	ldrh	r1, [r2, #0]
 800baae:	7892      	ldrb	r2, [r2, #2]
 800bab0:	8019      	strh	r1, [r3, #0]
 800bab2:	709a      	strb	r2, [r3, #2]
			p->moveSize = 7;
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	2207      	movs	r2, #7
 800bab8:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"B,C,A,G,C,E,I");
 800baba:	687b      	ldr	r3, [r7, #4]
 800babc:	33a4      	adds	r3, #164	; 0xa4
 800babe:	4a9d      	ldr	r2, [pc, #628]	; (800bd34 <problem_fetch+0xa670>)
 800bac0:	461c      	mov	r4, r3
 800bac2:	4613      	mov	r3, r2
 800bac4:	cb07      	ldmia	r3!, {r0, r1, r2}
 800bac6:	6020      	str	r0, [r4, #0]
 800bac8:	6061      	str	r1, [r4, #4]
 800baca:	60a2      	str	r2, [r4, #8]
 800bacc:	881b      	ldrh	r3, [r3, #0]
 800bace:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"6,5,9,9,13,16,18");
 800bad0:	687b      	ldr	r3, [r7, #4]
 800bad2:	3304      	adds	r3, #4
 800bad4:	4a98      	ldr	r2, [pc, #608]	; (800bd38 <problem_fetch+0xa674>)
 800bad6:	461d      	mov	r5, r3
 800bad8:	4614      	mov	r4, r2
 800bada:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800badc:	6028      	str	r0, [r5, #0]
 800bade:	6069      	str	r1, [r5, #4]
 800bae0:	60aa      	str	r2, [r5, #8]
 800bae2:	60eb      	str	r3, [r5, #12]
 800bae4:	7823      	ldrb	r3, [r4, #0]
 800bae6:	742b      	strb	r3, [r5, #16]
			strcpy(p->startFinish,"s,s,d,d,d,d,e");
 800bae8:	687b      	ldr	r3, [r7, #4]
 800baea:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800baee:	4a8e      	ldr	r2, [pc, #568]	; (800bd28 <problem_fetch+0xa664>)
 800baf0:	461c      	mov	r4, r3
 800baf2:	4613      	mov	r3, r2
 800baf4:	cb07      	ldmia	r3!, {r0, r1, r2}
 800baf6:	6020      	str	r0, [r4, #0]
 800baf8:	6061      	str	r1, [r4, #4]
 800bafa:	60a2      	str	r2, [r4, #8]
 800bafc:	881b      	ldrh	r3, [r3, #0]
 800bafe:	81a3      	strh	r3, [r4, #12]
			break;
 800bb00:	f010 bd10 	b.w	801c524 <problem_fetch+0x1ae60>
		case 291 :
			strcpy(p->name,"I'M RON BURGUNDY?");
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800bb0a:	4a8c      	ldr	r2, [pc, #560]	; (800bd3c <problem_fetch+0xa678>)
 800bb0c:	461d      	mov	r5, r3
 800bb0e:	4614      	mov	r4, r2
 800bb10:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800bb12:	6028      	str	r0, [r5, #0]
 800bb14:	6069      	str	r1, [r5, #4]
 800bb16:	60aa      	str	r2, [r5, #8]
 800bb18:	60eb      	str	r3, [r5, #12]
 800bb1a:	8823      	ldrh	r3, [r4, #0]
 800bb1c:	822b      	strh	r3, [r5, #16]
			strcpy(p->grade,"6C+");
 800bb1e:	687b      	ldr	r3, [r7, #4]
 800bb20:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800bb24:	4a86      	ldr	r2, [pc, #536]	; (800bd40 <problem_fetch+0xa67c>)
 800bb26:	6810      	ldr	r0, [r2, #0]
 800bb28:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	2206      	movs	r2, #6
 800bb2e:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,G,E,F,D,A");
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	33a4      	adds	r3, #164	; 0xa4
 800bb34:	4a83      	ldr	r2, [pc, #524]	; (800bd44 <problem_fetch+0xa680>)
 800bb36:	461c      	mov	r4, r3
 800bb38:	4613      	mov	r3, r2
 800bb3a:	cb07      	ldmia	r3!, {r0, r1, r2}
 800bb3c:	6020      	str	r0, [r4, #0]
 800bb3e:	6061      	str	r1, [r4, #4]
 800bb40:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,9,12,13,15,18");
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	3304      	adds	r3, #4
 800bb46:	4a80      	ldr	r2, [pc, #512]	; (800bd48 <problem_fetch+0xa684>)
 800bb48:	461c      	mov	r4, r3
 800bb4a:	4615      	mov	r5, r2
 800bb4c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800bb4e:	6020      	str	r0, [r4, #0]
 800bb50:	6061      	str	r1, [r4, #4]
 800bb52:	60a2      	str	r2, [r4, #8]
 800bb54:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 800bb56:	687b      	ldr	r3, [r7, #4]
 800bb58:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800bb5c:	4a7b      	ldr	r2, [pc, #492]	; (800bd4c <problem_fetch+0xa688>)
 800bb5e:	461c      	mov	r4, r3
 800bb60:	4613      	mov	r3, r2
 800bb62:	cb07      	ldmia	r3!, {r0, r1, r2}
 800bb64:	6020      	str	r0, [r4, #0]
 800bb66:	6061      	str	r1, [r4, #4]
 800bb68:	60a2      	str	r2, [r4, #8]
			break;
 800bb6a:	f010 bcdb 	b.w	801c524 <problem_fetch+0x1ae60>
		case 292 :
			strcpy(p->name,"FUNNY");
 800bb6e:	687b      	ldr	r3, [r7, #4]
 800bb70:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800bb74:	4a76      	ldr	r2, [pc, #472]	; (800bd50 <problem_fetch+0xa68c>)
 800bb76:	6810      	ldr	r0, [r2, #0]
 800bb78:	6018      	str	r0, [r3, #0]
 800bb7a:	8892      	ldrh	r2, [r2, #4]
 800bb7c:	809a      	strh	r2, [r3, #4]
			strcpy(p->grade,"7C");
 800bb7e:	687b      	ldr	r3, [r7, #4]
 800bb80:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800bb84:	4a73      	ldr	r2, [pc, #460]	; (800bd54 <problem_fetch+0xa690>)
 800bb86:	8811      	ldrh	r1, [r2, #0]
 800bb88:	7892      	ldrb	r2, [r2, #2]
 800bb8a:	8019      	strh	r1, [r3, #0]
 800bb8c:	709a      	strb	r2, [r3, #2]
			p->moveSize = 5;
 800bb8e:	687b      	ldr	r3, [r7, #4]
 800bb90:	2205      	movs	r2, #5
 800bb92:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,C,I,G,I");
 800bb94:	687b      	ldr	r3, [r7, #4]
 800bb96:	33a4      	adds	r3, #164	; 0xa4
 800bb98:	496f      	ldr	r1, [pc, #444]	; (800bd58 <problem_fetch+0xa694>)
 800bb9a:	461a      	mov	r2, r3
 800bb9c:	460b      	mov	r3, r1
 800bb9e:	cb03      	ldmia	r3!, {r0, r1}
 800bba0:	6010      	str	r0, [r2, #0]
 800bba2:	6051      	str	r1, [r2, #4]
 800bba4:	881b      	ldrh	r3, [r3, #0]
 800bba6:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"4,8,7,14,18");
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	3304      	adds	r3, #4
 800bbac:	4a6b      	ldr	r2, [pc, #428]	; (800bd5c <problem_fetch+0xa698>)
 800bbae:	461c      	mov	r4, r3
 800bbb0:	4613      	mov	r3, r2
 800bbb2:	cb07      	ldmia	r3!, {r0, r1, r2}
 800bbb4:	6020      	str	r0, [r4, #0]
 800bbb6:	6061      	str	r1, [r4, #4]
 800bbb8:	60a2      	str	r2, [r4, #8]
			strcpy(p->startFinish,"s,d,d,d,e");
 800bbba:	687b      	ldr	r3, [r7, #4]
 800bbbc:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800bbc0:	4967      	ldr	r1, [pc, #412]	; (800bd60 <problem_fetch+0xa69c>)
 800bbc2:	461a      	mov	r2, r3
 800bbc4:	460b      	mov	r3, r1
 800bbc6:	cb03      	ldmia	r3!, {r0, r1}
 800bbc8:	6010      	str	r0, [r2, #0]
 800bbca:	6051      	str	r1, [r2, #4]
 800bbcc:	881b      	ldrh	r3, [r3, #0]
 800bbce:	8113      	strh	r3, [r2, #8]
			break;
 800bbd0:	f010 bca8 	b.w	801c524 <problem_fetch+0x1ae60>
		case 293 :
			strcpy(p->name,"NUN");
 800bbd4:	687b      	ldr	r3, [r7, #4]
 800bbd6:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800bbda:	4a62      	ldr	r2, [pc, #392]	; (800bd64 <problem_fetch+0xa6a0>)
 800bbdc:	6810      	ldr	r0, [r2, #0]
 800bbde:	6018      	str	r0, [r3, #0]
			strcpy(p->grade,"7A+");
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800bbe6:	4a4d      	ldr	r2, [pc, #308]	; (800bd1c <problem_fetch+0xa658>)
 800bbe8:	6810      	ldr	r0, [r2, #0]
 800bbea:	6018      	str	r0, [r3, #0]
			p->moveSize = 4;
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	2204      	movs	r2, #4
 800bbf0:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"C,E,C,D");
 800bbf2:	687b      	ldr	r3, [r7, #4]
 800bbf4:	33a4      	adds	r3, #164	; 0xa4
 800bbf6:	495c      	ldr	r1, [pc, #368]	; (800bd68 <problem_fetch+0xa6a4>)
 800bbf8:	461a      	mov	r2, r3
 800bbfa:	460b      	mov	r3, r1
 800bbfc:	cb03      	ldmia	r3!, {r0, r1}
 800bbfe:	6010      	str	r0, [r2, #0]
 800bc00:	6051      	str	r1, [r2, #4]
			strcpy(p->moveNumbers,"5,8,13,18");
 800bc02:	687b      	ldr	r3, [r7, #4]
 800bc04:	3304      	adds	r3, #4
 800bc06:	4959      	ldr	r1, [pc, #356]	; (800bd6c <problem_fetch+0xa6a8>)
 800bc08:	461a      	mov	r2, r3
 800bc0a:	460b      	mov	r3, r1
 800bc0c:	cb03      	ldmia	r3!, {r0, r1}
 800bc0e:	6010      	str	r0, [r2, #0]
 800bc10:	6051      	str	r1, [r2, #4]
 800bc12:	881b      	ldrh	r3, [r3, #0]
 800bc14:	8113      	strh	r3, [r2, #8]
			strcpy(p->startFinish,"s,d,d,e");
 800bc16:	687b      	ldr	r3, [r7, #4]
 800bc18:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800bc1c:	4954      	ldr	r1, [pc, #336]	; (800bd70 <problem_fetch+0xa6ac>)
 800bc1e:	461a      	mov	r2, r3
 800bc20:	460b      	mov	r3, r1
 800bc22:	cb03      	ldmia	r3!, {r0, r1}
 800bc24:	6010      	str	r0, [r2, #0]
 800bc26:	6051      	str	r1, [r2, #4]
			break;
 800bc28:	f010 bc7c 	b.w	801c524 <problem_fetch+0x1ae60>
		case 294 :
			strcpy(p->name,"THE LAST PEA");
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800bc32:	4a50      	ldr	r2, [pc, #320]	; (800bd74 <problem_fetch+0xa6b0>)
 800bc34:	461c      	mov	r4, r3
 800bc36:	4613      	mov	r3, r2
 800bc38:	cb07      	ldmia	r3!, {r0, r1, r2}
 800bc3a:	6020      	str	r0, [r4, #0]
 800bc3c:	6061      	str	r1, [r4, #4]
 800bc3e:	60a2      	str	r2, [r4, #8]
 800bc40:	781b      	ldrb	r3, [r3, #0]
 800bc42:	7323      	strb	r3, [r4, #12]
			strcpy(p->grade,"6B+");
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800bc4a:	4a4b      	ldr	r2, [pc, #300]	; (800bd78 <problem_fetch+0xa6b4>)
 800bc4c:	6810      	ldr	r0, [r2, #0]
 800bc4e:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 800bc50:	687b      	ldr	r3, [r7, #4]
 800bc52:	2207      	movs	r2, #7
 800bc54:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"E,E,B,E,C,D,A");
 800bc56:	687b      	ldr	r3, [r7, #4]
 800bc58:	33a4      	adds	r3, #164	; 0xa4
 800bc5a:	4a48      	ldr	r2, [pc, #288]	; (800bd7c <problem_fetch+0xa6b8>)
 800bc5c:	461c      	mov	r4, r3
 800bc5e:	4613      	mov	r3, r2
 800bc60:	cb07      	ldmia	r3!, {r0, r1, r2}
 800bc62:	6020      	str	r0, [r4, #0]
 800bc64:	6061      	str	r1, [r4, #4]
 800bc66:	60a2      	str	r2, [r4, #8]
 800bc68:	881b      	ldrh	r3, [r3, #0]
 800bc6a:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"6,8,10,12,13,15,18");
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	3304      	adds	r3, #4
 800bc70:	4a43      	ldr	r2, [pc, #268]	; (800bd80 <problem_fetch+0xa6bc>)
 800bc72:	461d      	mov	r5, r3
 800bc74:	4614      	mov	r4, r2
 800bc76:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800bc78:	6028      	str	r0, [r5, #0]
 800bc7a:	6069      	str	r1, [r5, #4]
 800bc7c:	60aa      	str	r2, [r5, #8]
 800bc7e:	60eb      	str	r3, [r5, #12]
 800bc80:	8823      	ldrh	r3, [r4, #0]
 800bc82:	78a2      	ldrb	r2, [r4, #2]
 800bc84:	822b      	strh	r3, [r5, #16]
 800bc86:	4613      	mov	r3, r2
 800bc88:	74ab      	strb	r3, [r5, #18]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 800bc8a:	687b      	ldr	r3, [r7, #4]
 800bc8c:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800bc90:	4a3c      	ldr	r2, [pc, #240]	; (800bd84 <problem_fetch+0xa6c0>)
 800bc92:	461c      	mov	r4, r3
 800bc94:	4613      	mov	r3, r2
 800bc96:	cb07      	ldmia	r3!, {r0, r1, r2}
 800bc98:	6020      	str	r0, [r4, #0]
 800bc9a:	6061      	str	r1, [r4, #4]
 800bc9c:	60a2      	str	r2, [r4, #8]
 800bc9e:	881b      	ldrh	r3, [r3, #0]
 800bca0:	81a3      	strh	r3, [r4, #12]
			break;
 800bca2:	f010 bc3f 	b.w	801c524 <problem_fetch+0x1ae60>
		case 295 :
			strcpy(p->name,"PEAS AND GRAVY");
 800bca6:	687b      	ldr	r3, [r7, #4]
 800bca8:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800bcac:	4a36      	ldr	r2, [pc, #216]	; (800bd88 <problem_fetch+0xa6c4>)
 800bcae:	461c      	mov	r4, r3
 800bcb0:	4613      	mov	r3, r2
 800bcb2:	cb07      	ldmia	r3!, {r0, r1, r2}
 800bcb4:	6020      	str	r0, [r4, #0]
 800bcb6:	6061      	str	r1, [r4, #4]
 800bcb8:	60a2      	str	r2, [r4, #8]
 800bcba:	881a      	ldrh	r2, [r3, #0]
 800bcbc:	789b      	ldrb	r3, [r3, #2]
 800bcbe:	81a2      	strh	r2, [r4, #12]
 800bcc0:	73a3      	strb	r3, [r4, #14]
			strcpy(p->grade,"6C");
 800bcc2:	687b      	ldr	r3, [r7, #4]
 800bcc4:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800bcc8:	4a30      	ldr	r2, [pc, #192]	; (800bd8c <problem_fetch+0xa6c8>)
 800bcca:	8811      	ldrh	r1, [r2, #0]
 800bccc:	7892      	ldrb	r2, [r2, #2]
 800bcce:	8019      	strh	r1, [r3, #0]
 800bcd0:	709a      	strb	r2, [r3, #2]
			p->moveSize = 6;
 800bcd2:	687b      	ldr	r3, [r7, #4]
 800bcd4:	2206      	movs	r2, #6
 800bcd6:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"E,J,H,C,D,A");
 800bcd8:	687b      	ldr	r3, [r7, #4]
 800bcda:	33a4      	adds	r3, #164	; 0xa4
 800bcdc:	4a2c      	ldr	r2, [pc, #176]	; (800bd90 <problem_fetch+0xa6cc>)
 800bcde:	461c      	mov	r4, r3
 800bce0:	4613      	mov	r3, r2
 800bce2:	cb07      	ldmia	r3!, {r0, r1, r2}
 800bce4:	6020      	str	r0, [r4, #0]
 800bce6:	6061      	str	r1, [r4, #4]
 800bce8:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"6,5,10,13,15,18");
 800bcea:	687b      	ldr	r3, [r7, #4]
 800bcec:	3304      	adds	r3, #4
 800bcee:	4a29      	ldr	r2, [pc, #164]	; (800bd94 <problem_fetch+0xa6d0>)
 800bcf0:	461c      	mov	r4, r3
 800bcf2:	4615      	mov	r5, r2
 800bcf4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800bcf6:	6020      	str	r0, [r4, #0]
 800bcf8:	6061      	str	r1, [r4, #4]
 800bcfa:	60a2      	str	r2, [r4, #8]
 800bcfc:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,s,d,d,d,e");
 800bcfe:	687b      	ldr	r3, [r7, #4]
 800bd00:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800bd04:	4a24      	ldr	r2, [pc, #144]	; (800bd98 <problem_fetch+0xa6d4>)
 800bd06:	461c      	mov	r4, r3
 800bd08:	4613      	mov	r3, r2
 800bd0a:	cb07      	ldmia	r3!, {r0, r1, r2}
 800bd0c:	6020      	str	r0, [r4, #0]
 800bd0e:	6061      	str	r1, [r4, #4]
 800bd10:	60a2      	str	r2, [r4, #8]
			break;
 800bd12:	f010 bc07 	b.w	801c524 <problem_fetch+0x1ae60>
 800bd16:	bf00      	nop
 800bd18:	080272d0 	.word	0x080272d0
 800bd1c:	080239f4 	.word	0x080239f4
 800bd20:	080272e4 	.word	0x080272e4
 800bd24:	080272f4 	.word	0x080272f4
 800bd28:	080238cc 	.word	0x080238cc
 800bd2c:	08027308 	.word	0x08027308
 800bd30:	08023814 	.word	0x08023814
 800bd34:	08027314 	.word	0x08027314
 800bd38:	08027324 	.word	0x08027324
 800bd3c:	08027338 	.word	0x08027338
 800bd40:	080238ec 	.word	0x080238ec
 800bd44:	0802734c 	.word	0x0802734c
 800bd48:	08027358 	.word	0x08027358
 800bd4c:	08023bf0 	.word	0x08023bf0
 800bd50:	08027368 	.word	0x08027368
 800bd54:	08024088 	.word	0x08024088
 800bd58:	08027370 	.word	0x08027370
 800bd5c:	0802737c 	.word	0x0802737c
 800bd60:	08023d20 	.word	0x08023d20
 800bd64:	08027388 	.word	0x08027388
 800bd68:	0802738c 	.word	0x0802738c
 800bd6c:	08027394 	.word	0x08027394
 800bd70:	080239a8 	.word	0x080239a8
 800bd74:	080273a0 	.word	0x080273a0
 800bd78:	08023854 	.word	0x08023854
 800bd7c:	080273b0 	.word	0x080273b0
 800bd80:	080273c0 	.word	0x080273c0
 800bd84:	080239dc 	.word	0x080239dc
 800bd88:	080273d4 	.word	0x080273d4
 800bd8c:	08023920 	.word	0x08023920
 800bd90:	080273e4 	.word	0x080273e4
 800bd94:	0802660c 	.word	0x0802660c
 800bd98:	08023834 	.word	0x08023834
		case 296 :
			strcpy(p->name,"TEST111");
 800bd9c:	687b      	ldr	r3, [r7, #4]
 800bd9e:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800bda2:	49c2      	ldr	r1, [pc, #776]	; (800c0ac <problem_fetch+0xa9e8>)
 800bda4:	461a      	mov	r2, r3
 800bda6:	460b      	mov	r3, r1
 800bda8:	cb03      	ldmia	r3!, {r0, r1}
 800bdaa:	6010      	str	r0, [r2, #0]
 800bdac:	6051      	str	r1, [r2, #4]
			strcpy(p->grade,"6C");
 800bdae:	687b      	ldr	r3, [r7, #4]
 800bdb0:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800bdb4:	4abe      	ldr	r2, [pc, #760]	; (800c0b0 <problem_fetch+0xa9ec>)
 800bdb6:	8811      	ldrh	r1, [r2, #0]
 800bdb8:	7892      	ldrb	r2, [r2, #2]
 800bdba:	8019      	strh	r1, [r3, #0]
 800bdbc:	709a      	strb	r2, [r3, #2]
			p->moveSize = 7;
 800bdbe:	687b      	ldr	r3, [r7, #4]
 800bdc0:	2207      	movs	r2, #7
 800bdc2:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,I,H,F,E,D,A");
 800bdc4:	687b      	ldr	r3, [r7, #4]
 800bdc6:	33a4      	adds	r3, #164	; 0xa4
 800bdc8:	4aba      	ldr	r2, [pc, #744]	; (800c0b4 <problem_fetch+0xa9f0>)
 800bdca:	461c      	mov	r4, r3
 800bdcc:	4613      	mov	r3, r2
 800bdce:	cb07      	ldmia	r3!, {r0, r1, r2}
 800bdd0:	6020      	str	r0, [r4, #0]
 800bdd2:	6061      	str	r1, [r4, #4]
 800bdd4:	60a2      	str	r2, [r4, #8]
 800bdd6:	881b      	ldrh	r3, [r3, #0]
 800bdd8:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,7,8,11,12,15,18");
 800bdda:	687b      	ldr	r3, [r7, #4]
 800bddc:	3304      	adds	r3, #4
 800bdde:	4ab6      	ldr	r2, [pc, #728]	; (800c0b8 <problem_fetch+0xa9f4>)
 800bde0:	461d      	mov	r5, r3
 800bde2:	4614      	mov	r4, r2
 800bde4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800bde6:	6028      	str	r0, [r5, #0]
 800bde8:	6069      	str	r1, [r5, #4]
 800bdea:	60aa      	str	r2, [r5, #8]
 800bdec:	60eb      	str	r3, [r5, #12]
 800bdee:	8823      	ldrh	r3, [r4, #0]
 800bdf0:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 800bdf2:	687b      	ldr	r3, [r7, #4]
 800bdf4:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800bdf8:	4ab0      	ldr	r2, [pc, #704]	; (800c0bc <problem_fetch+0xa9f8>)
 800bdfa:	461c      	mov	r4, r3
 800bdfc:	4613      	mov	r3, r2
 800bdfe:	cb07      	ldmia	r3!, {r0, r1, r2}
 800be00:	6020      	str	r0, [r4, #0]
 800be02:	6061      	str	r1, [r4, #4]
 800be04:	60a2      	str	r2, [r4, #8]
 800be06:	881b      	ldrh	r3, [r3, #0]
 800be08:	81a3      	strh	r3, [r4, #12]
			break;
 800be0a:	f010 bb8b 	b.w	801c524 <problem_fetch+0x1ae60>
		case 297 :
			strcpy(p->name,"FAMILY MAN");
 800be0e:	687b      	ldr	r3, [r7, #4]
 800be10:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800be14:	49aa      	ldr	r1, [pc, #680]	; (800c0c0 <problem_fetch+0xa9fc>)
 800be16:	461a      	mov	r2, r3
 800be18:	460b      	mov	r3, r1
 800be1a:	cb03      	ldmia	r3!, {r0, r1}
 800be1c:	6010      	str	r0, [r2, #0]
 800be1e:	6051      	str	r1, [r2, #4]
 800be20:	8819      	ldrh	r1, [r3, #0]
 800be22:	789b      	ldrb	r3, [r3, #2]
 800be24:	8111      	strh	r1, [r2, #8]
 800be26:	7293      	strb	r3, [r2, #10]
			strcpy(p->grade,"6C");
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800be2e:	4aa0      	ldr	r2, [pc, #640]	; (800c0b0 <problem_fetch+0xa9ec>)
 800be30:	8811      	ldrh	r1, [r2, #0]
 800be32:	7892      	ldrb	r2, [r2, #2]
 800be34:	8019      	strh	r1, [r3, #0]
 800be36:	709a      	strb	r2, [r3, #2]
			p->moveSize = 7;
 800be38:	687b      	ldr	r3, [r7, #4]
 800be3a:	2207      	movs	r2, #7
 800be3c:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"B,D,E,E,H,I,J");
 800be3e:	687b      	ldr	r3, [r7, #4]
 800be40:	33a4      	adds	r3, #164	; 0xa4
 800be42:	4aa0      	ldr	r2, [pc, #640]	; (800c0c4 <problem_fetch+0xaa00>)
 800be44:	461c      	mov	r4, r3
 800be46:	4613      	mov	r3, r2
 800be48:	cb07      	ldmia	r3!, {r0, r1, r2}
 800be4a:	6020      	str	r0, [r4, #0]
 800be4c:	6061      	str	r1, [r4, #4]
 800be4e:	60a2      	str	r2, [r4, #8]
 800be50:	881b      	ldrh	r3, [r3, #0]
 800be52:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"15,18,12,14,5,10,5");
 800be54:	687b      	ldr	r3, [r7, #4]
 800be56:	3304      	adds	r3, #4
 800be58:	4a9b      	ldr	r2, [pc, #620]	; (800c0c8 <problem_fetch+0xaa04>)
 800be5a:	461d      	mov	r5, r3
 800be5c:	4614      	mov	r4, r2
 800be5e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800be60:	6028      	str	r0, [r5, #0]
 800be62:	6069      	str	r1, [r5, #4]
 800be64:	60aa      	str	r2, [r5, #8]
 800be66:	60eb      	str	r3, [r5, #12]
 800be68:	8823      	ldrh	r3, [r4, #0]
 800be6a:	78a2      	ldrb	r2, [r4, #2]
 800be6c:	822b      	strh	r3, [r5, #16]
 800be6e:	4613      	mov	r3, r2
 800be70:	74ab      	strb	r3, [r5, #18]
			strcpy(p->startFinish,"d,e,d,d,s,d,s");
 800be72:	687b      	ldr	r3, [r7, #4]
 800be74:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800be78:	4a94      	ldr	r2, [pc, #592]	; (800c0cc <problem_fetch+0xaa08>)
 800be7a:	461c      	mov	r4, r3
 800be7c:	4613      	mov	r3, r2
 800be7e:	cb07      	ldmia	r3!, {r0, r1, r2}
 800be80:	6020      	str	r0, [r4, #0]
 800be82:	6061      	str	r1, [r4, #4]
 800be84:	60a2      	str	r2, [r4, #8]
 800be86:	881b      	ldrh	r3, [r3, #0]
 800be88:	81a3      	strh	r3, [r4, #12]
			break;
 800be8a:	f010 bb4b 	b.w	801c524 <problem_fetch+0x1ae60>
		case 298 :
			strcpy(p->name,"FROGGERTON GOES TO SCHOOL");
 800be8e:	687b      	ldr	r3, [r7, #4]
 800be90:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800be94:	4a8e      	ldr	r2, [pc, #568]	; (800c0d0 <problem_fetch+0xaa0c>)
 800be96:	461d      	mov	r5, r3
 800be98:	4614      	mov	r4, r2
 800be9a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800be9c:	6028      	str	r0, [r5, #0]
 800be9e:	6069      	str	r1, [r5, #4]
 800bea0:	60aa      	str	r2, [r5, #8]
 800bea2:	60eb      	str	r3, [r5, #12]
 800bea4:	cc03      	ldmia	r4!, {r0, r1}
 800bea6:	6128      	str	r0, [r5, #16]
 800bea8:	6169      	str	r1, [r5, #20]
 800beaa:	8823      	ldrh	r3, [r4, #0]
 800beac:	832b      	strh	r3, [r5, #24]
			strcpy(p->grade,"6B+");
 800beae:	687b      	ldr	r3, [r7, #4]
 800beb0:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800beb4:	4a87      	ldr	r2, [pc, #540]	; (800c0d4 <problem_fetch+0xaa10>)
 800beb6:	6810      	ldr	r0, [r2, #0]
 800beb8:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	2206      	movs	r2, #6
 800bebe:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,E,D,C,A,A");
 800bec0:	687b      	ldr	r3, [r7, #4]
 800bec2:	33a4      	adds	r3, #164	; 0xa4
 800bec4:	4a84      	ldr	r2, [pc, #528]	; (800c0d8 <problem_fetch+0xaa14>)
 800bec6:	461c      	mov	r4, r3
 800bec8:	4613      	mov	r3, r2
 800beca:	cb07      	ldmia	r3!, {r0, r1, r2}
 800becc:	6020      	str	r0, [r4, #0]
 800bece:	6061      	str	r1, [r4, #4]
 800bed0:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,8,11,13,14,18");
 800bed2:	687b      	ldr	r3, [r7, #4]
 800bed4:	3304      	adds	r3, #4
 800bed6:	4a81      	ldr	r2, [pc, #516]	; (800c0dc <problem_fetch+0xaa18>)
 800bed8:	461c      	mov	r4, r3
 800beda:	4615      	mov	r5, r2
 800bedc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800bede:	6020      	str	r0, [r4, #0]
 800bee0:	6061      	str	r1, [r4, #4]
 800bee2:	60a2      	str	r2, [r4, #8]
 800bee4:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 800bee6:	687b      	ldr	r3, [r7, #4]
 800bee8:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800beec:	4a7c      	ldr	r2, [pc, #496]	; (800c0e0 <problem_fetch+0xaa1c>)
 800beee:	461c      	mov	r4, r3
 800bef0:	4613      	mov	r3, r2
 800bef2:	cb07      	ldmia	r3!, {r0, r1, r2}
 800bef4:	6020      	str	r0, [r4, #0]
 800bef6:	6061      	str	r1, [r4, #4]
 800bef8:	60a2      	str	r2, [r4, #8]
			break;
 800befa:	f010 bb13 	b.w	801c524 <problem_fetch+0x1ae60>
		case 299 :
			strcpy(p->name,"BOCHANPOWER");
 800befe:	687b      	ldr	r3, [r7, #4]
 800bf00:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800bf04:	4a77      	ldr	r2, [pc, #476]	; (800c0e4 <problem_fetch+0xaa20>)
 800bf06:	461c      	mov	r4, r3
 800bf08:	4613      	mov	r3, r2
 800bf0a:	cb07      	ldmia	r3!, {r0, r1, r2}
 800bf0c:	6020      	str	r0, [r4, #0]
 800bf0e:	6061      	str	r1, [r4, #4]
 800bf10:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade,"7A+");
 800bf12:	687b      	ldr	r3, [r7, #4]
 800bf14:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800bf18:	4a73      	ldr	r2, [pc, #460]	; (800c0e8 <problem_fetch+0xaa24>)
 800bf1a:	6810      	ldr	r0, [r2, #0]
 800bf1c:	6018      	str	r0, [r3, #0]
			p->moveSize = 5;
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	2205      	movs	r2, #5
 800bf22:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,G,E,G,D");
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	33a4      	adds	r3, #164	; 0xa4
 800bf28:	4970      	ldr	r1, [pc, #448]	; (800c0ec <problem_fetch+0xaa28>)
 800bf2a:	461a      	mov	r2, r3
 800bf2c:	460b      	mov	r3, r1
 800bf2e:	cb03      	ldmia	r3!, {r0, r1}
 800bf30:	6010      	str	r0, [r2, #0]
 800bf32:	6051      	str	r1, [r2, #4]
 800bf34:	881b      	ldrh	r3, [r3, #0]
 800bf36:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"4,9,8,14,18");
 800bf38:	687b      	ldr	r3, [r7, #4]
 800bf3a:	3304      	adds	r3, #4
 800bf3c:	4a6c      	ldr	r2, [pc, #432]	; (800c0f0 <problem_fetch+0xaa2c>)
 800bf3e:	461c      	mov	r4, r3
 800bf40:	4613      	mov	r3, r2
 800bf42:	cb07      	ldmia	r3!, {r0, r1, r2}
 800bf44:	6020      	str	r0, [r4, #0]
 800bf46:	6061      	str	r1, [r4, #4]
 800bf48:	60a2      	str	r2, [r4, #8]
			strcpy(p->startFinish,"s,d,d,d,e");
 800bf4a:	687b      	ldr	r3, [r7, #4]
 800bf4c:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800bf50:	4968      	ldr	r1, [pc, #416]	; (800c0f4 <problem_fetch+0xaa30>)
 800bf52:	461a      	mov	r2, r3
 800bf54:	460b      	mov	r3, r1
 800bf56:	cb03      	ldmia	r3!, {r0, r1}
 800bf58:	6010      	str	r0, [r2, #0]
 800bf5a:	6051      	str	r1, [r2, #4]
 800bf5c:	881b      	ldrh	r3, [r3, #0]
 800bf5e:	8113      	strh	r3, [r2, #8]
			break;
 800bf60:	f010 bae0 	b.w	801c524 <problem_fetch+0x1ae60>
		case 300 :
			strcpy(p->name,"ENRON");
 800bf64:	687b      	ldr	r3, [r7, #4]
 800bf66:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800bf6a:	4a63      	ldr	r2, [pc, #396]	; (800c0f8 <problem_fetch+0xaa34>)
 800bf6c:	6810      	ldr	r0, [r2, #0]
 800bf6e:	6018      	str	r0, [r3, #0]
 800bf70:	8892      	ldrh	r2, [r2, #4]
 800bf72:	809a      	strh	r2, [r3, #4]
			strcpy(p->grade,"7A");
 800bf74:	687b      	ldr	r3, [r7, #4]
 800bf76:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800bf7a:	4a60      	ldr	r2, [pc, #384]	; (800c0fc <problem_fetch+0xaa38>)
 800bf7c:	8811      	ldrh	r1, [r2, #0]
 800bf7e:	7892      	ldrb	r2, [r2, #2]
 800bf80:	8019      	strh	r1, [r3, #0]
 800bf82:	709a      	strb	r2, [r3, #2]
			p->moveSize = 7;
 800bf84:	687b      	ldr	r3, [r7, #4]
 800bf86:	2207      	movs	r2, #7
 800bf88:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,E,E,B,E,B,D");
 800bf8a:	687b      	ldr	r3, [r7, #4]
 800bf8c:	33a4      	adds	r3, #164	; 0xa4
 800bf8e:	4a5c      	ldr	r2, [pc, #368]	; (800c100 <problem_fetch+0xaa3c>)
 800bf90:	461c      	mov	r4, r3
 800bf92:	4613      	mov	r3, r2
 800bf94:	cb07      	ldmia	r3!, {r0, r1, r2}
 800bf96:	6020      	str	r0, [r4, #0]
 800bf98:	6061      	str	r1, [r4, #4]
 800bf9a:	60a2      	str	r2, [r4, #8]
 800bf9c:	881b      	ldrh	r3, [r3, #0]
 800bf9e:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,6,9,12,12,15,18");
 800bfa0:	687b      	ldr	r3, [r7, #4]
 800bfa2:	3304      	adds	r3, #4
 800bfa4:	4a57      	ldr	r2, [pc, #348]	; (800c104 <problem_fetch+0xaa40>)
 800bfa6:	461d      	mov	r5, r3
 800bfa8:	4614      	mov	r4, r2
 800bfaa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800bfac:	6028      	str	r0, [r5, #0]
 800bfae:	6069      	str	r1, [r5, #4]
 800bfb0:	60aa      	str	r2, [r5, #8]
 800bfb2:	60eb      	str	r3, [r5, #12]
 800bfb4:	8823      	ldrh	r3, [r4, #0]
 800bfb6:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,s,d,d,d,d,e");
 800bfb8:	687b      	ldr	r3, [r7, #4]
 800bfba:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800bfbe:	4a52      	ldr	r2, [pc, #328]	; (800c108 <problem_fetch+0xaa44>)
 800bfc0:	461c      	mov	r4, r3
 800bfc2:	4613      	mov	r3, r2
 800bfc4:	cb07      	ldmia	r3!, {r0, r1, r2}
 800bfc6:	6020      	str	r0, [r4, #0]
 800bfc8:	6061      	str	r1, [r4, #4]
 800bfca:	60a2      	str	r2, [r4, #8]
 800bfcc:	881b      	ldrh	r3, [r3, #0]
 800bfce:	81a3      	strh	r3, [r4, #12]
			break;
 800bfd0:	f010 baa8 	b.w	801c524 <problem_fetch+0x1ae60>
		case 301 :
			strcpy(p->name,"RON DUC DONG");
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800bfda:	4a4c      	ldr	r2, [pc, #304]	; (800c10c <problem_fetch+0xaa48>)
 800bfdc:	461c      	mov	r4, r3
 800bfde:	4613      	mov	r3, r2
 800bfe0:	cb07      	ldmia	r3!, {r0, r1, r2}
 800bfe2:	6020      	str	r0, [r4, #0]
 800bfe4:	6061      	str	r1, [r4, #4]
 800bfe6:	60a2      	str	r2, [r4, #8]
 800bfe8:	781b      	ldrb	r3, [r3, #0]
 800bfea:	7323      	strb	r3, [r4, #12]
			strcpy(p->grade,"6C+");
 800bfec:	687b      	ldr	r3, [r7, #4]
 800bfee:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800bff2:	4a47      	ldr	r2, [pc, #284]	; (800c110 <problem_fetch+0xaa4c>)
 800bff4:	6810      	ldr	r0, [r2, #0]
 800bff6:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	2207      	movs	r2, #7
 800bffc:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"H,J,G,E,I,E,D");
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	33a4      	adds	r3, #164	; 0xa4
 800c002:	4a44      	ldr	r2, [pc, #272]	; (800c114 <problem_fetch+0xaa50>)
 800c004:	461c      	mov	r4, r3
 800c006:	4613      	mov	r3, r2
 800c008:	cb07      	ldmia	r3!, {r0, r1, r2}
 800c00a:	6020      	str	r0, [r4, #0]
 800c00c:	6061      	str	r1, [r4, #4]
 800c00e:	60a2      	str	r2, [r4, #8]
 800c010:	881b      	ldrh	r3, [r3, #0]
 800c012:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,5,9,12,14,16,18");
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	3304      	adds	r3, #4
 800c018:	4a3f      	ldr	r2, [pc, #252]	; (800c118 <problem_fetch+0xaa54>)
 800c01a:	461d      	mov	r5, r3
 800c01c:	4614      	mov	r4, r2
 800c01e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800c020:	6028      	str	r0, [r5, #0]
 800c022:	6069      	str	r1, [r5, #4]
 800c024:	60aa      	str	r2, [r5, #8]
 800c026:	60eb      	str	r3, [r5, #12]
 800c028:	8823      	ldrh	r3, [r4, #0]
 800c02a:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,s,d,d,d,d,e");
 800c02c:	687b      	ldr	r3, [r7, #4]
 800c02e:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800c032:	4a35      	ldr	r2, [pc, #212]	; (800c108 <problem_fetch+0xaa44>)
 800c034:	461c      	mov	r4, r3
 800c036:	4613      	mov	r3, r2
 800c038:	cb07      	ldmia	r3!, {r0, r1, r2}
 800c03a:	6020      	str	r0, [r4, #0]
 800c03c:	6061      	str	r1, [r4, #4]
 800c03e:	60a2      	str	r2, [r4, #8]
 800c040:	881b      	ldrh	r3, [r3, #0]
 800c042:	81a3      	strh	r3, [r4, #12]
			break;
 800c044:	f010 ba6e 	b.w	801c524 <problem_fetch+0x1ae60>
		case 302 :
			strcpy(p->name,"OKTRY");
 800c048:	687b      	ldr	r3, [r7, #4]
 800c04a:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800c04e:	4a33      	ldr	r2, [pc, #204]	; (800c11c <problem_fetch+0xaa58>)
 800c050:	6810      	ldr	r0, [r2, #0]
 800c052:	6018      	str	r0, [r3, #0]
 800c054:	8892      	ldrh	r2, [r2, #4]
 800c056:	809a      	strh	r2, [r3, #4]
			strcpy(p->grade,"6B+");
 800c058:	687b      	ldr	r3, [r7, #4]
 800c05a:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800c05e:	4a1d      	ldr	r2, [pc, #116]	; (800c0d4 <problem_fetch+0xaa10>)
 800c060:	6810      	ldr	r0, [r2, #0]
 800c062:	6018      	str	r0, [r3, #0]
			p->moveSize = 5;
 800c064:	687b      	ldr	r3, [r7, #4]
 800c066:	2205      	movs	r2, #5
 800c068:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"C,E,C,C,D");
 800c06a:	687b      	ldr	r3, [r7, #4]
 800c06c:	33a4      	adds	r3, #164	; 0xa4
 800c06e:	492c      	ldr	r1, [pc, #176]	; (800c120 <problem_fetch+0xaa5c>)
 800c070:	461a      	mov	r2, r3
 800c072:	460b      	mov	r3, r1
 800c074:	cb03      	ldmia	r3!, {r0, r1}
 800c076:	6010      	str	r0, [r2, #0]
 800c078:	6051      	str	r1, [r2, #4]
 800c07a:	881b      	ldrh	r3, [r3, #0]
 800c07c:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"5,6,8,13,18");
 800c07e:	687b      	ldr	r3, [r7, #4]
 800c080:	3304      	adds	r3, #4
 800c082:	4a28      	ldr	r2, [pc, #160]	; (800c124 <problem_fetch+0xaa60>)
 800c084:	461c      	mov	r4, r3
 800c086:	4613      	mov	r3, r2
 800c088:	cb07      	ldmia	r3!, {r0, r1, r2}
 800c08a:	6020      	str	r0, [r4, #0]
 800c08c:	6061      	str	r1, [r4, #4]
 800c08e:	60a2      	str	r2, [r4, #8]
			strcpy(p->startFinish,"s,s,d,d,e");
 800c090:	687b      	ldr	r3, [r7, #4]
 800c092:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800c096:	4924      	ldr	r1, [pc, #144]	; (800c128 <problem_fetch+0xaa64>)
 800c098:	461a      	mov	r2, r3
 800c09a:	460b      	mov	r3, r1
 800c09c:	cb03      	ldmia	r3!, {r0, r1}
 800c09e:	6010      	str	r0, [r2, #0]
 800c0a0:	6051      	str	r1, [r2, #4]
 800c0a2:	881b      	ldrh	r3, [r3, #0]
 800c0a4:	8113      	strh	r3, [r2, #8]
			break;
 800c0a6:	f010 ba3d 	b.w	801c524 <problem_fetch+0x1ae60>
 800c0aa:	bf00      	nop
 800c0ac:	080273f0 	.word	0x080273f0
 800c0b0:	08023920 	.word	0x08023920
 800c0b4:	080273f8 	.word	0x080273f8
 800c0b8:	08027408 	.word	0x08027408
 800c0bc:	080239dc 	.word	0x080239dc
 800c0c0:	0802741c 	.word	0x0802741c
 800c0c4:	08027428 	.word	0x08027428
 800c0c8:	08027438 	.word	0x08027438
 800c0cc:	0802744c 	.word	0x0802744c
 800c0d0:	0802745c 	.word	0x0802745c
 800c0d4:	08023854 	.word	0x08023854
 800c0d8:	08027478 	.word	0x08027478
 800c0dc:	08027484 	.word	0x08027484
 800c0e0:	08023bf0 	.word	0x08023bf0
 800c0e4:	08027494 	.word	0x08027494
 800c0e8:	080239f4 	.word	0x080239f4
 800c0ec:	080274a0 	.word	0x080274a0
 800c0f0:	080274ac 	.word	0x080274ac
 800c0f4:	08023d20 	.word	0x08023d20
 800c0f8:	080274b8 	.word	0x080274b8
 800c0fc:	08023814 	.word	0x08023814
 800c100:	080274c0 	.word	0x080274c0
 800c104:	080274d0 	.word	0x080274d0
 800c108:	080238cc 	.word	0x080238cc
 800c10c:	080274e4 	.word	0x080274e4
 800c110:	080238ec 	.word	0x080238ec
 800c114:	080274f4 	.word	0x080274f4
 800c118:	08027504 	.word	0x08027504
 800c11c:	08027518 	.word	0x08027518
 800c120:	08027520 	.word	0x08027520
 800c124:	0802752c 	.word	0x0802752c
 800c128:	08023f34 	.word	0x08023f34
		case 303 :
			strcpy(p->name,"TRYTRYTRY");
 800c12c:	687b      	ldr	r3, [r7, #4]
 800c12e:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800c132:	49be      	ldr	r1, [pc, #760]	; (800c42c <problem_fetch+0xad68>)
 800c134:	461a      	mov	r2, r3
 800c136:	460b      	mov	r3, r1
 800c138:	cb03      	ldmia	r3!, {r0, r1}
 800c13a:	6010      	str	r0, [r2, #0]
 800c13c:	6051      	str	r1, [r2, #4]
 800c13e:	881b      	ldrh	r3, [r3, #0]
 800c140:	8113      	strh	r3, [r2, #8]
			strcpy(p->grade,"6B+");
 800c142:	687b      	ldr	r3, [r7, #4]
 800c144:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800c148:	4ab9      	ldr	r2, [pc, #740]	; (800c430 <problem_fetch+0xad6c>)
 800c14a:	6810      	ldr	r0, [r2, #0]
 800c14c:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 800c14e:	687b      	ldr	r3, [r7, #4]
 800c150:	2206      	movs	r2, #6
 800c152:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"C,E,C,E,G,D");
 800c154:	687b      	ldr	r3, [r7, #4]
 800c156:	33a4      	adds	r3, #164	; 0xa4
 800c158:	4ab6      	ldr	r2, [pc, #728]	; (800c434 <problem_fetch+0xad70>)
 800c15a:	461c      	mov	r4, r3
 800c15c:	4613      	mov	r3, r2
 800c15e:	cb07      	ldmia	r3!, {r0, r1, r2}
 800c160:	6020      	str	r0, [r4, #0]
 800c162:	6061      	str	r1, [r4, #4]
 800c164:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,6,13,8,9,18");
 800c166:	687b      	ldr	r3, [r7, #4]
 800c168:	3304      	adds	r3, #4
 800c16a:	4ab3      	ldr	r2, [pc, #716]	; (800c438 <problem_fetch+0xad74>)
 800c16c:	461c      	mov	r4, r3
 800c16e:	4613      	mov	r3, r2
 800c170:	cb07      	ldmia	r3!, {r0, r1, r2}
 800c172:	6020      	str	r0, [r4, #0]
 800c174:	6061      	str	r1, [r4, #4]
 800c176:	60a2      	str	r2, [r4, #8]
 800c178:	881b      	ldrh	r3, [r3, #0]
 800c17a:	81a3      	strh	r3, [r4, #12]
			strcpy(p->startFinish,"s,s,d,d,d,e");
 800c17c:	687b      	ldr	r3, [r7, #4]
 800c17e:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800c182:	4aae      	ldr	r2, [pc, #696]	; (800c43c <problem_fetch+0xad78>)
 800c184:	461c      	mov	r4, r3
 800c186:	4613      	mov	r3, r2
 800c188:	cb07      	ldmia	r3!, {r0, r1, r2}
 800c18a:	6020      	str	r0, [r4, #0]
 800c18c:	6061      	str	r1, [r4, #4]
 800c18e:	60a2      	str	r2, [r4, #8]
			break;
 800c190:	f010 b9c8 	b.w	801c524 <problem_fetch+0x1ae60>
		case 304 :
			strcpy(p->name,"TRYTRY");
 800c194:	687b      	ldr	r3, [r7, #4]
 800c196:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800c19a:	4aa9      	ldr	r2, [pc, #676]	; (800c440 <problem_fetch+0xad7c>)
 800c19c:	6810      	ldr	r0, [r2, #0]
 800c19e:	6018      	str	r0, [r3, #0]
 800c1a0:	8891      	ldrh	r1, [r2, #4]
 800c1a2:	7992      	ldrb	r2, [r2, #6]
 800c1a4:	8099      	strh	r1, [r3, #4]
 800c1a6:	719a      	strb	r2, [r3, #6]
			strcpy(p->grade,"6B+");
 800c1a8:	687b      	ldr	r3, [r7, #4]
 800c1aa:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800c1ae:	4aa0      	ldr	r2, [pc, #640]	; (800c430 <problem_fetch+0xad6c>)
 800c1b0:	6810      	ldr	r0, [r2, #0]
 800c1b2:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 800c1b4:	687b      	ldr	r3, [r7, #4]
 800c1b6:	2207      	movs	r2, #7
 800c1b8:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,C,C,B,C,C,A");
 800c1ba:	687b      	ldr	r3, [r7, #4]
 800c1bc:	33a4      	adds	r3, #164	; 0xa4
 800c1be:	4aa1      	ldr	r2, [pc, #644]	; (800c444 <problem_fetch+0xad80>)
 800c1c0:	461c      	mov	r4, r3
 800c1c2:	4613      	mov	r3, r2
 800c1c4:	cb07      	ldmia	r3!, {r0, r1, r2}
 800c1c6:	6020      	str	r0, [r4, #0]
 800c1c8:	6061      	str	r1, [r4, #4]
 800c1ca:	60a2      	str	r2, [r4, #8]
 800c1cc:	881b      	ldrh	r3, [r3, #0]
 800c1ce:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,5,8,10,13,16,18");
 800c1d0:	687b      	ldr	r3, [r7, #4]
 800c1d2:	3304      	adds	r3, #4
 800c1d4:	4a9c      	ldr	r2, [pc, #624]	; (800c448 <problem_fetch+0xad84>)
 800c1d6:	461d      	mov	r5, r3
 800c1d8:	4614      	mov	r4, r2
 800c1da:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800c1dc:	6028      	str	r0, [r5, #0]
 800c1de:	6069      	str	r1, [r5, #4]
 800c1e0:	60aa      	str	r2, [r5, #8]
 800c1e2:	60eb      	str	r3, [r5, #12]
 800c1e4:	8823      	ldrh	r3, [r4, #0]
 800c1e6:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,s,d,d,d,d,e");
 800c1e8:	687b      	ldr	r3, [r7, #4]
 800c1ea:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800c1ee:	4a97      	ldr	r2, [pc, #604]	; (800c44c <problem_fetch+0xad88>)
 800c1f0:	461c      	mov	r4, r3
 800c1f2:	4613      	mov	r3, r2
 800c1f4:	cb07      	ldmia	r3!, {r0, r1, r2}
 800c1f6:	6020      	str	r0, [r4, #0]
 800c1f8:	6061      	str	r1, [r4, #4]
 800c1fa:	60a2      	str	r2, [r4, #8]
 800c1fc:	881b      	ldrh	r3, [r3, #0]
 800c1fe:	81a3      	strh	r3, [r4, #12]
			break;
 800c200:	f010 b990 	b.w	801c524 <problem_fetch+0x1ae60>
		case 305 :
			strcpy(p->name,"FOLLIA1");
 800c204:	687b      	ldr	r3, [r7, #4]
 800c206:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800c20a:	4991      	ldr	r1, [pc, #580]	; (800c450 <problem_fetch+0xad8c>)
 800c20c:	461a      	mov	r2, r3
 800c20e:	460b      	mov	r3, r1
 800c210:	cb03      	ldmia	r3!, {r0, r1}
 800c212:	6010      	str	r0, [r2, #0]
 800c214:	6051      	str	r1, [r2, #4]
			strcpy(p->grade,"6B+");
 800c216:	687b      	ldr	r3, [r7, #4]
 800c218:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800c21c:	4a84      	ldr	r2, [pc, #528]	; (800c430 <problem_fetch+0xad6c>)
 800c21e:	6810      	ldr	r0, [r2, #0]
 800c220:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 800c222:	687b      	ldr	r3, [r7, #4]
 800c224:	2207      	movs	r2, #7
 800c226:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,G,H,G,H,G,I");
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	33a4      	adds	r3, #164	; 0xa4
 800c22c:	4a89      	ldr	r2, [pc, #548]	; (800c454 <problem_fetch+0xad90>)
 800c22e:	461c      	mov	r4, r3
 800c230:	4613      	mov	r3, r2
 800c232:	cb07      	ldmia	r3!, {r0, r1, r2}
 800c234:	6020      	str	r0, [r4, #0]
 800c236:	6061      	str	r1, [r4, #4]
 800c238:	60a2      	str	r2, [r4, #8]
 800c23a:	881b      	ldrh	r3, [r3, #0]
 800c23c:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,6,8,10,13,14,18");
 800c23e:	687b      	ldr	r3, [r7, #4]
 800c240:	3304      	adds	r3, #4
 800c242:	4a85      	ldr	r2, [pc, #532]	; (800c458 <problem_fetch+0xad94>)
 800c244:	461d      	mov	r5, r3
 800c246:	4614      	mov	r4, r2
 800c248:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800c24a:	6028      	str	r0, [r5, #0]
 800c24c:	6069      	str	r1, [r5, #4]
 800c24e:	60aa      	str	r2, [r5, #8]
 800c250:	60eb      	str	r3, [r5, #12]
 800c252:	8823      	ldrh	r3, [r4, #0]
 800c254:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,s,d,d,d,d,e");
 800c256:	687b      	ldr	r3, [r7, #4]
 800c258:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800c25c:	4a7b      	ldr	r2, [pc, #492]	; (800c44c <problem_fetch+0xad88>)
 800c25e:	461c      	mov	r4, r3
 800c260:	4613      	mov	r3, r2
 800c262:	cb07      	ldmia	r3!, {r0, r1, r2}
 800c264:	6020      	str	r0, [r4, #0]
 800c266:	6061      	str	r1, [r4, #4]
 800c268:	60a2      	str	r2, [r4, #8]
 800c26a:	881b      	ldrh	r3, [r3, #0]
 800c26c:	81a3      	strh	r3, [r4, #12]
			break;
 800c26e:	f010 b959 	b.w	801c524 <problem_fetch+0x1ae60>
		case 306 :
			strcpy(p->name,"JH 1.0");
 800c272:	687b      	ldr	r3, [r7, #4]
 800c274:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800c278:	4a78      	ldr	r2, [pc, #480]	; (800c45c <problem_fetch+0xad98>)
 800c27a:	6810      	ldr	r0, [r2, #0]
 800c27c:	6018      	str	r0, [r3, #0]
 800c27e:	8891      	ldrh	r1, [r2, #4]
 800c280:	7992      	ldrb	r2, [r2, #6]
 800c282:	8099      	strh	r1, [r3, #4]
 800c284:	719a      	strb	r2, [r3, #6]
			strcpy(p->grade,"7B+");
 800c286:	687b      	ldr	r3, [r7, #4]
 800c288:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800c28c:	4a74      	ldr	r2, [pc, #464]	; (800c460 <problem_fetch+0xad9c>)
 800c28e:	6810      	ldr	r0, [r2, #0]
 800c290:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 800c292:	687b      	ldr	r3, [r7, #4]
 800c294:	2207      	movs	r2, #7
 800c296:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,H,C,E,B,G,I");
 800c298:	687b      	ldr	r3, [r7, #4]
 800c29a:	33a4      	adds	r3, #164	; 0xa4
 800c29c:	4a71      	ldr	r2, [pc, #452]	; (800c464 <problem_fetch+0xada0>)
 800c29e:	461c      	mov	r4, r3
 800c2a0:	4613      	mov	r3, r2
 800c2a2:	cb07      	ldmia	r3!, {r0, r1, r2}
 800c2a4:	6020      	str	r0, [r4, #0]
 800c2a6:	6061      	str	r1, [r4, #4]
 800c2a8:	60a2      	str	r2, [r4, #8]
 800c2aa:	881b      	ldrh	r3, [r3, #0]
 800c2ac:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,8,8,12,15,17,18");
 800c2ae:	687b      	ldr	r3, [r7, #4]
 800c2b0:	3304      	adds	r3, #4
 800c2b2:	4a6d      	ldr	r2, [pc, #436]	; (800c468 <problem_fetch+0xada4>)
 800c2b4:	461d      	mov	r5, r3
 800c2b6:	4614      	mov	r4, r2
 800c2b8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800c2ba:	6028      	str	r0, [r5, #0]
 800c2bc:	6069      	str	r1, [r5, #4]
 800c2be:	60aa      	str	r2, [r5, #8]
 800c2c0:	60eb      	str	r3, [r5, #12]
 800c2c2:	8823      	ldrh	r3, [r4, #0]
 800c2c4:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 800c2c6:	687b      	ldr	r3, [r7, #4]
 800c2c8:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800c2cc:	4a67      	ldr	r2, [pc, #412]	; (800c46c <problem_fetch+0xada8>)
 800c2ce:	461c      	mov	r4, r3
 800c2d0:	4613      	mov	r3, r2
 800c2d2:	cb07      	ldmia	r3!, {r0, r1, r2}
 800c2d4:	6020      	str	r0, [r4, #0]
 800c2d6:	6061      	str	r1, [r4, #4]
 800c2d8:	60a2      	str	r2, [r4, #8]
 800c2da:	881b      	ldrh	r3, [r3, #0]
 800c2dc:	81a3      	strh	r3, [r4, #12]
			break;
 800c2de:	f010 b921 	b.w	801c524 <problem_fetch+0x1ae60>
		case 307 :
			strcpy(p->name,"FROSTED AFRO");
 800c2e2:	687b      	ldr	r3, [r7, #4]
 800c2e4:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800c2e8:	4a61      	ldr	r2, [pc, #388]	; (800c470 <problem_fetch+0xadac>)
 800c2ea:	461c      	mov	r4, r3
 800c2ec:	4613      	mov	r3, r2
 800c2ee:	cb07      	ldmia	r3!, {r0, r1, r2}
 800c2f0:	6020      	str	r0, [r4, #0]
 800c2f2:	6061      	str	r1, [r4, #4]
 800c2f4:	60a2      	str	r2, [r4, #8]
 800c2f6:	781b      	ldrb	r3, [r3, #0]
 800c2f8:	7323      	strb	r3, [r4, #12]
			strcpy(p->grade,"7A");
 800c2fa:	687b      	ldr	r3, [r7, #4]
 800c2fc:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800c300:	4a5c      	ldr	r2, [pc, #368]	; (800c474 <problem_fetch+0xadb0>)
 800c302:	8811      	ldrh	r1, [r2, #0]
 800c304:	7892      	ldrb	r2, [r2, #2]
 800c306:	8019      	strh	r1, [r3, #0]
 800c308:	709a      	strb	r2, [r3, #2]
			p->moveSize = 6;
 800c30a:	687b      	ldr	r3, [r7, #4]
 800c30c:	2206      	movs	r2, #6
 800c30e:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,E,F,E,J,D");
 800c310:	687b      	ldr	r3, [r7, #4]
 800c312:	33a4      	adds	r3, #164	; 0xa4
 800c314:	4a58      	ldr	r2, [pc, #352]	; (800c478 <problem_fetch+0xadb4>)
 800c316:	461c      	mov	r4, r3
 800c318:	4613      	mov	r3, r2
 800c31a:	cb07      	ldmia	r3!, {r0, r1, r2}
 800c31c:	6020      	str	r0, [r4, #0]
 800c31e:	6061      	str	r1, [r4, #4]
 800c320:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,6,11,14,16,18");
 800c322:	687b      	ldr	r3, [r7, #4]
 800c324:	3304      	adds	r3, #4
 800c326:	4a55      	ldr	r2, [pc, #340]	; (800c47c <problem_fetch+0xadb8>)
 800c328:	461c      	mov	r4, r3
 800c32a:	4615      	mov	r5, r2
 800c32c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c32e:	6020      	str	r0, [r4, #0]
 800c330:	6061      	str	r1, [r4, #4]
 800c332:	60a2      	str	r2, [r4, #8]
 800c334:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,s,d,d,d,e");
 800c336:	687b      	ldr	r3, [r7, #4]
 800c338:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800c33c:	4a3f      	ldr	r2, [pc, #252]	; (800c43c <problem_fetch+0xad78>)
 800c33e:	461c      	mov	r4, r3
 800c340:	4613      	mov	r3, r2
 800c342:	cb07      	ldmia	r3!, {r0, r1, r2}
 800c344:	6020      	str	r0, [r4, #0]
 800c346:	6061      	str	r1, [r4, #4]
 800c348:	60a2      	str	r2, [r4, #8]
			break;
 800c34a:	f010 b8eb 	b.w	801c524 <problem_fetch+0x1ae60>
		case 308 :
			strcpy(p->name,"FLYING  BUDDAH");
 800c34e:	687b      	ldr	r3, [r7, #4]
 800c350:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800c354:	4a4a      	ldr	r2, [pc, #296]	; (800c480 <problem_fetch+0xadbc>)
 800c356:	461c      	mov	r4, r3
 800c358:	4613      	mov	r3, r2
 800c35a:	cb07      	ldmia	r3!, {r0, r1, r2}
 800c35c:	6020      	str	r0, [r4, #0]
 800c35e:	6061      	str	r1, [r4, #4]
 800c360:	60a2      	str	r2, [r4, #8]
 800c362:	881a      	ldrh	r2, [r3, #0]
 800c364:	789b      	ldrb	r3, [r3, #2]
 800c366:	81a2      	strh	r2, [r4, #12]
 800c368:	73a3      	strb	r3, [r4, #14]
			strcpy(p->grade,"7A+");
 800c36a:	687b      	ldr	r3, [r7, #4]
 800c36c:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800c370:	4a44      	ldr	r2, [pc, #272]	; (800c484 <problem_fetch+0xadc0>)
 800c372:	6810      	ldr	r0, [r2, #0]
 800c374:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 800c376:	687b      	ldr	r3, [r7, #4]
 800c378:	2206      	movs	r2, #6
 800c37a:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,H,G,F,I,D");
 800c37c:	687b      	ldr	r3, [r7, #4]
 800c37e:	33a4      	adds	r3, #164	; 0xa4
 800c380:	4a41      	ldr	r2, [pc, #260]	; (800c488 <problem_fetch+0xadc4>)
 800c382:	461c      	mov	r4, r3
 800c384:	4613      	mov	r3, r2
 800c386:	cb07      	ldmia	r3!, {r0, r1, r2}
 800c388:	6020      	str	r0, [r4, #0]
 800c38a:	6061      	str	r1, [r4, #4]
 800c38c:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"6,5,9,13,14,18");
 800c38e:	687b      	ldr	r3, [r7, #4]
 800c390:	3304      	adds	r3, #4
 800c392:	4a3e      	ldr	r2, [pc, #248]	; (800c48c <problem_fetch+0xadc8>)
 800c394:	461c      	mov	r4, r3
 800c396:	4613      	mov	r3, r2
 800c398:	cb07      	ldmia	r3!, {r0, r1, r2}
 800c39a:	6020      	str	r0, [r4, #0]
 800c39c:	6061      	str	r1, [r4, #4]
 800c39e:	60a2      	str	r2, [r4, #8]
 800c3a0:	881a      	ldrh	r2, [r3, #0]
 800c3a2:	789b      	ldrb	r3, [r3, #2]
 800c3a4:	81a2      	strh	r2, [r4, #12]
 800c3a6:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish,"s,s,d,d,d,e");
 800c3a8:	687b      	ldr	r3, [r7, #4]
 800c3aa:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800c3ae:	4a23      	ldr	r2, [pc, #140]	; (800c43c <problem_fetch+0xad78>)
 800c3b0:	461c      	mov	r4, r3
 800c3b2:	4613      	mov	r3, r2
 800c3b4:	cb07      	ldmia	r3!, {r0, r1, r2}
 800c3b6:	6020      	str	r0, [r4, #0]
 800c3b8:	6061      	str	r1, [r4, #4]
 800c3ba:	60a2      	str	r2, [r4, #8]
			break;
 800c3bc:	f010 b8b2 	b.w	801c524 <problem_fetch+0x1ae60>
		case 309 :
			strcpy(p->name,"KAKAKAKA");
 800c3c0:	687b      	ldr	r3, [r7, #4]
 800c3c2:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800c3c6:	4932      	ldr	r1, [pc, #200]	; (800c490 <problem_fetch+0xadcc>)
 800c3c8:	461a      	mov	r2, r3
 800c3ca:	460b      	mov	r3, r1
 800c3cc:	cb03      	ldmia	r3!, {r0, r1}
 800c3ce:	6010      	str	r0, [r2, #0]
 800c3d0:	6051      	str	r1, [r2, #4]
 800c3d2:	781b      	ldrb	r3, [r3, #0]
 800c3d4:	7213      	strb	r3, [r2, #8]
			strcpy(p->grade,"6C+");
 800c3d6:	687b      	ldr	r3, [r7, #4]
 800c3d8:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800c3dc:	4a2d      	ldr	r2, [pc, #180]	; (800c494 <problem_fetch+0xadd0>)
 800c3de:	6810      	ldr	r0, [r2, #0]
 800c3e0:	6018      	str	r0, [r3, #0]
			p->moveSize = 5;
 800c3e2:	687b      	ldr	r3, [r7, #4]
 800c3e4:	2205      	movs	r2, #5
 800c3e6:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,I,F,I,D");
 800c3e8:	687b      	ldr	r3, [r7, #4]
 800c3ea:	33a4      	adds	r3, #164	; 0xa4
 800c3ec:	492a      	ldr	r1, [pc, #168]	; (800c498 <problem_fetch+0xadd4>)
 800c3ee:	461a      	mov	r2, r3
 800c3f0:	460b      	mov	r3, r1
 800c3f2:	cb03      	ldmia	r3!, {r0, r1}
 800c3f4:	6010      	str	r0, [r2, #0]
 800c3f6:	6051      	str	r1, [r2, #4]
 800c3f8:	881b      	ldrh	r3, [r3, #0]
 800c3fa:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"5,10,13,14,18");
 800c3fc:	687b      	ldr	r3, [r7, #4]
 800c3fe:	3304      	adds	r3, #4
 800c400:	4a26      	ldr	r2, [pc, #152]	; (800c49c <problem_fetch+0xadd8>)
 800c402:	461c      	mov	r4, r3
 800c404:	4613      	mov	r3, r2
 800c406:	cb07      	ldmia	r3!, {r0, r1, r2}
 800c408:	6020      	str	r0, [r4, #0]
 800c40a:	6061      	str	r1, [r4, #4]
 800c40c:	60a2      	str	r2, [r4, #8]
 800c40e:	881b      	ldrh	r3, [r3, #0]
 800c410:	81a3      	strh	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,e");
 800c412:	687b      	ldr	r3, [r7, #4]
 800c414:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800c418:	4921      	ldr	r1, [pc, #132]	; (800c4a0 <problem_fetch+0xaddc>)
 800c41a:	461a      	mov	r2, r3
 800c41c:	460b      	mov	r3, r1
 800c41e:	cb03      	ldmia	r3!, {r0, r1}
 800c420:	6010      	str	r0, [r2, #0]
 800c422:	6051      	str	r1, [r2, #4]
 800c424:	881b      	ldrh	r3, [r3, #0]
 800c426:	8113      	strh	r3, [r2, #8]
			break;
 800c428:	f010 b87c 	b.w	801c524 <problem_fetch+0x1ae60>
 800c42c:	08027538 	.word	0x08027538
 800c430:	08023854 	.word	0x08023854
 800c434:	08027544 	.word	0x08027544
 800c438:	08027550 	.word	0x08027550
 800c43c:	08023834 	.word	0x08023834
 800c440:	08027560 	.word	0x08027560
 800c444:	08027568 	.word	0x08027568
 800c448:	08027578 	.word	0x08027578
 800c44c:	080238cc 	.word	0x080238cc
 800c450:	0802758c 	.word	0x0802758c
 800c454:	08027594 	.word	0x08027594
 800c458:	080275a4 	.word	0x080275a4
 800c45c:	080275b8 	.word	0x080275b8
 800c460:	08023990 	.word	0x08023990
 800c464:	080275c0 	.word	0x080275c0
 800c468:	080275d0 	.word	0x080275d0
 800c46c:	080239dc 	.word	0x080239dc
 800c470:	080275e4 	.word	0x080275e4
 800c474:	08023814 	.word	0x08023814
 800c478:	080275f4 	.word	0x080275f4
 800c47c:	08027600 	.word	0x08027600
 800c480:	08027610 	.word	0x08027610
 800c484:	080239f4 	.word	0x080239f4
 800c488:	08027620 	.word	0x08027620
 800c48c:	0802762c 	.word	0x0802762c
 800c490:	0802763c 	.word	0x0802763c
 800c494:	080238ec 	.word	0x080238ec
 800c498:	08027648 	.word	0x08027648
 800c49c:	08027654 	.word	0x08027654
 800c4a0:	08023d20 	.word	0x08023d20
		case 310 :
			strcpy(p->name,"FIRSTEASY");
 800c4a4:	687b      	ldr	r3, [r7, #4]
 800c4a6:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800c4aa:	49ba      	ldr	r1, [pc, #744]	; (800c794 <problem_fetch+0xb0d0>)
 800c4ac:	461a      	mov	r2, r3
 800c4ae:	460b      	mov	r3, r1
 800c4b0:	cb03      	ldmia	r3!, {r0, r1}
 800c4b2:	6010      	str	r0, [r2, #0]
 800c4b4:	6051      	str	r1, [r2, #4]
 800c4b6:	881b      	ldrh	r3, [r3, #0]
 800c4b8:	8113      	strh	r3, [r2, #8]
			strcpy(p->grade,"6B+");
 800c4ba:	687b      	ldr	r3, [r7, #4]
 800c4bc:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800c4c0:	4ab5      	ldr	r2, [pc, #724]	; (800c798 <problem_fetch+0xb0d4>)
 800c4c2:	6810      	ldr	r0, [r2, #0]
 800c4c4:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 800c4c6:	687b      	ldr	r3, [r7, #4]
 800c4c8:	2206      	movs	r2, #6
 800c4ca:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,E,H,C,E,D");
 800c4cc:	687b      	ldr	r3, [r7, #4]
 800c4ce:	33a4      	adds	r3, #164	; 0xa4
 800c4d0:	4ab2      	ldr	r2, [pc, #712]	; (800c79c <problem_fetch+0xb0d8>)
 800c4d2:	461c      	mov	r4, r3
 800c4d4:	4613      	mov	r3, r2
 800c4d6:	cb07      	ldmia	r3!, {r0, r1, r2}
 800c4d8:	6020      	str	r0, [r4, #0]
 800c4da:	6061      	str	r1, [r4, #4]
 800c4dc:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,8,10,13,16,18");
 800c4de:	687b      	ldr	r3, [r7, #4]
 800c4e0:	3304      	adds	r3, #4
 800c4e2:	4aaf      	ldr	r2, [pc, #700]	; (800c7a0 <problem_fetch+0xb0dc>)
 800c4e4:	461c      	mov	r4, r3
 800c4e6:	4615      	mov	r5, r2
 800c4e8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c4ea:	6020      	str	r0, [r4, #0]
 800c4ec:	6061      	str	r1, [r4, #4]
 800c4ee:	60a2      	str	r2, [r4, #8]
 800c4f0:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 800c4f2:	687b      	ldr	r3, [r7, #4]
 800c4f4:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800c4f8:	4aaa      	ldr	r2, [pc, #680]	; (800c7a4 <problem_fetch+0xb0e0>)
 800c4fa:	461c      	mov	r4, r3
 800c4fc:	4613      	mov	r3, r2
 800c4fe:	cb07      	ldmia	r3!, {r0, r1, r2}
 800c500:	6020      	str	r0, [r4, #0]
 800c502:	6061      	str	r1, [r4, #4]
 800c504:	60a2      	str	r2, [r4, #8]
			break;
 800c506:	f010 b80d 	b.w	801c524 <problem_fetch+0x1ae60>
		case 311 :
			strcpy(p->name,"MATTS");
 800c50a:	687b      	ldr	r3, [r7, #4]
 800c50c:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800c510:	4aa5      	ldr	r2, [pc, #660]	; (800c7a8 <problem_fetch+0xb0e4>)
 800c512:	6810      	ldr	r0, [r2, #0]
 800c514:	6018      	str	r0, [r3, #0]
 800c516:	8892      	ldrh	r2, [r2, #4]
 800c518:	809a      	strh	r2, [r3, #4]
			strcpy(p->grade,"8B+");
 800c51a:	687b      	ldr	r3, [r7, #4]
 800c51c:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800c520:	4aa2      	ldr	r2, [pc, #648]	; (800c7ac <problem_fetch+0xb0e8>)
 800c522:	6810      	ldr	r0, [r2, #0]
 800c524:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 800c526:	687b      	ldr	r3, [r7, #4]
 800c528:	2206      	movs	r2, #6
 800c52a:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,D,I,K,I,I");
 800c52c:	687b      	ldr	r3, [r7, #4]
 800c52e:	33a4      	adds	r3, #164	; 0xa4
 800c530:	4a9f      	ldr	r2, [pc, #636]	; (800c7b0 <problem_fetch+0xb0ec>)
 800c532:	461c      	mov	r4, r3
 800c534:	4613      	mov	r3, r2
 800c536:	cb07      	ldmia	r3!, {r0, r1, r2}
 800c538:	6020      	str	r0, [r4, #0]
 800c53a:	6061      	str	r1, [r4, #4]
 800c53c:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,11,7,14,9,18");
 800c53e:	687b      	ldr	r3, [r7, #4]
 800c540:	3304      	adds	r3, #4
 800c542:	4a9c      	ldr	r2, [pc, #624]	; (800c7b4 <problem_fetch+0xb0f0>)
 800c544:	461c      	mov	r4, r3
 800c546:	4613      	mov	r3, r2
 800c548:	cb07      	ldmia	r3!, {r0, r1, r2}
 800c54a:	6020      	str	r0, [r4, #0]
 800c54c:	6061      	str	r1, [r4, #4]
 800c54e:	60a2      	str	r2, [r4, #8]
 800c550:	881a      	ldrh	r2, [r3, #0]
 800c552:	789b      	ldrb	r3, [r3, #2]
 800c554:	81a2      	strh	r2, [r4, #12]
 800c556:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 800c558:	687b      	ldr	r3, [r7, #4]
 800c55a:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800c55e:	4a91      	ldr	r2, [pc, #580]	; (800c7a4 <problem_fetch+0xb0e0>)
 800c560:	461c      	mov	r4, r3
 800c562:	4613      	mov	r3, r2
 800c564:	cb07      	ldmia	r3!, {r0, r1, r2}
 800c566:	6020      	str	r0, [r4, #0]
 800c568:	6061      	str	r1, [r4, #4]
 800c56a:	60a2      	str	r2, [r4, #8]
			break;
 800c56c:	f00f bfda 	b.w	801c524 <problem_fetch+0x1ae60>
		case 312 :
			strcpy(p->name,"SO YOU THINK YOU CAN DYNO");
 800c570:	687b      	ldr	r3, [r7, #4]
 800c572:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800c576:	4a90      	ldr	r2, [pc, #576]	; (800c7b8 <problem_fetch+0xb0f4>)
 800c578:	461d      	mov	r5, r3
 800c57a:	4614      	mov	r4, r2
 800c57c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800c57e:	6028      	str	r0, [r5, #0]
 800c580:	6069      	str	r1, [r5, #4]
 800c582:	60aa      	str	r2, [r5, #8]
 800c584:	60eb      	str	r3, [r5, #12]
 800c586:	cc03      	ldmia	r4!, {r0, r1}
 800c588:	6128      	str	r0, [r5, #16]
 800c58a:	6169      	str	r1, [r5, #20]
 800c58c:	8823      	ldrh	r3, [r4, #0]
 800c58e:	832b      	strh	r3, [r5, #24]
			strcpy(p->grade,"7B+");
 800c590:	687b      	ldr	r3, [r7, #4]
 800c592:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800c596:	4a89      	ldr	r2, [pc, #548]	; (800c7bc <problem_fetch+0xb0f8>)
 800c598:	6810      	ldr	r0, [r2, #0]
 800c59a:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 800c59c:	687b      	ldr	r3, [r7, #4]
 800c59e:	2206      	movs	r2, #6
 800c5a0:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,C,C,H,C,I");
 800c5a2:	687b      	ldr	r3, [r7, #4]
 800c5a4:	33a4      	adds	r3, #164	; 0xa4
 800c5a6:	4a86      	ldr	r2, [pc, #536]	; (800c7c0 <problem_fetch+0xb0fc>)
 800c5a8:	461c      	mov	r4, r3
 800c5aa:	4613      	mov	r3, r2
 800c5ac:	cb07      	ldmia	r3!, {r0, r1, r2}
 800c5ae:	6020      	str	r0, [r4, #0]
 800c5b0:	6061      	str	r1, [r4, #4]
 800c5b2:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,5,13,8,8,18");
 800c5b4:	687b      	ldr	r3, [r7, #4]
 800c5b6:	3304      	adds	r3, #4
 800c5b8:	4a82      	ldr	r2, [pc, #520]	; (800c7c4 <problem_fetch+0xb100>)
 800c5ba:	461c      	mov	r4, r3
 800c5bc:	4613      	mov	r3, r2
 800c5be:	cb07      	ldmia	r3!, {r0, r1, r2}
 800c5c0:	6020      	str	r0, [r4, #0]
 800c5c2:	6061      	str	r1, [r4, #4]
 800c5c4:	60a2      	str	r2, [r4, #8]
 800c5c6:	881b      	ldrh	r3, [r3, #0]
 800c5c8:	81a3      	strh	r3, [r4, #12]
			strcpy(p->startFinish,"s,s,d,d,d,e");
 800c5ca:	687b      	ldr	r3, [r7, #4]
 800c5cc:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800c5d0:	4a7d      	ldr	r2, [pc, #500]	; (800c7c8 <problem_fetch+0xb104>)
 800c5d2:	461c      	mov	r4, r3
 800c5d4:	4613      	mov	r3, r2
 800c5d6:	cb07      	ldmia	r3!, {r0, r1, r2}
 800c5d8:	6020      	str	r0, [r4, #0]
 800c5da:	6061      	str	r1, [r4, #4]
 800c5dc:	60a2      	str	r2, [r4, #8]
			break;
 800c5de:	f00f bfa1 	b.w	801c524 <problem_fetch+0x1ae60>
		case 313 :
			strcpy(p->name,"THE TROLLOC WARS");
 800c5e2:	687b      	ldr	r3, [r7, #4]
 800c5e4:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800c5e8:	4a78      	ldr	r2, [pc, #480]	; (800c7cc <problem_fetch+0xb108>)
 800c5ea:	461d      	mov	r5, r3
 800c5ec:	4614      	mov	r4, r2
 800c5ee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800c5f0:	6028      	str	r0, [r5, #0]
 800c5f2:	6069      	str	r1, [r5, #4]
 800c5f4:	60aa      	str	r2, [r5, #8]
 800c5f6:	60eb      	str	r3, [r5, #12]
 800c5f8:	7823      	ldrb	r3, [r4, #0]
 800c5fa:	742b      	strb	r3, [r5, #16]
			strcpy(p->grade,"7A");
 800c5fc:	687b      	ldr	r3, [r7, #4]
 800c5fe:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800c602:	4a73      	ldr	r2, [pc, #460]	; (800c7d0 <problem_fetch+0xb10c>)
 800c604:	8811      	ldrh	r1, [r2, #0]
 800c606:	7892      	ldrb	r2, [r2, #2]
 800c608:	8019      	strh	r1, [r3, #0]
 800c60a:	709a      	strb	r2, [r3, #2]
			p->moveSize = 5;
 800c60c:	687b      	ldr	r3, [r7, #4]
 800c60e:	2205      	movs	r2, #5
 800c610:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"E,J,F,A,D");
 800c612:	687b      	ldr	r3, [r7, #4]
 800c614:	33a4      	adds	r3, #164	; 0xa4
 800c616:	496f      	ldr	r1, [pc, #444]	; (800c7d4 <problem_fetch+0xb110>)
 800c618:	461a      	mov	r2, r3
 800c61a:	460b      	mov	r3, r1
 800c61c:	cb03      	ldmia	r3!, {r0, r1}
 800c61e:	6010      	str	r0, [r2, #0]
 800c620:	6051      	str	r1, [r2, #4]
 800c622:	881b      	ldrh	r3, [r3, #0]
 800c624:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"6,5,11,14,18");
 800c626:	687b      	ldr	r3, [r7, #4]
 800c628:	3304      	adds	r3, #4
 800c62a:	4a6b      	ldr	r2, [pc, #428]	; (800c7d8 <problem_fetch+0xb114>)
 800c62c:	461c      	mov	r4, r3
 800c62e:	4613      	mov	r3, r2
 800c630:	cb07      	ldmia	r3!, {r0, r1, r2}
 800c632:	6020      	str	r0, [r4, #0]
 800c634:	6061      	str	r1, [r4, #4]
 800c636:	60a2      	str	r2, [r4, #8]
 800c638:	781b      	ldrb	r3, [r3, #0]
 800c63a:	7323      	strb	r3, [r4, #12]
			strcpy(p->startFinish,"s,s,d,d,e");
 800c63c:	687b      	ldr	r3, [r7, #4]
 800c63e:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800c642:	4966      	ldr	r1, [pc, #408]	; (800c7dc <problem_fetch+0xb118>)
 800c644:	461a      	mov	r2, r3
 800c646:	460b      	mov	r3, r1
 800c648:	cb03      	ldmia	r3!, {r0, r1}
 800c64a:	6010      	str	r0, [r2, #0]
 800c64c:	6051      	str	r1, [r2, #4]
 800c64e:	881b      	ldrh	r3, [r3, #0]
 800c650:	8113      	strh	r3, [r2, #8]
			break;
 800c652:	f00f bf67 	b.w	801c524 <problem_fetch+0x1ae60>
		case 314 :
			strcpy(p->name,"BRETT'S PROBLEM");
 800c656:	687b      	ldr	r3, [r7, #4]
 800c658:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800c65c:	4a60      	ldr	r2, [pc, #384]	; (800c7e0 <problem_fetch+0xb11c>)
 800c65e:	461c      	mov	r4, r3
 800c660:	4615      	mov	r5, r2
 800c662:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c664:	6020      	str	r0, [r4, #0]
 800c666:	6061      	str	r1, [r4, #4]
 800c668:	60a2      	str	r2, [r4, #8]
 800c66a:	60e3      	str	r3, [r4, #12]
			strcpy(p->grade,"7B+");
 800c66c:	687b      	ldr	r3, [r7, #4]
 800c66e:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800c672:	4a52      	ldr	r2, [pc, #328]	; (800c7bc <problem_fetch+0xb0f8>)
 800c674:	6810      	ldr	r0, [r2, #0]
 800c676:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 800c678:	687b      	ldr	r3, [r7, #4]
 800c67a:	2206      	movs	r2, #6
 800c67c:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,B,G,B,C,D");
 800c67e:	687b      	ldr	r3, [r7, #4]
 800c680:	33a4      	adds	r3, #164	; 0xa4
 800c682:	4a58      	ldr	r2, [pc, #352]	; (800c7e4 <problem_fetch+0xb120>)
 800c684:	461c      	mov	r4, r3
 800c686:	4613      	mov	r3, r2
 800c688:	cb07      	ldmia	r3!, {r0, r1, r2}
 800c68a:	6020      	str	r0, [r4, #0]
 800c68c:	6061      	str	r1, [r4, #4]
 800c68e:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,6,10,10,13,18");
 800c690:	687b      	ldr	r3, [r7, #4]
 800c692:	3304      	adds	r3, #4
 800c694:	4a54      	ldr	r2, [pc, #336]	; (800c7e8 <problem_fetch+0xb124>)
 800c696:	461c      	mov	r4, r3
 800c698:	4615      	mov	r5, r2
 800c69a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c69c:	6020      	str	r0, [r4, #0]
 800c69e:	6061      	str	r1, [r4, #4]
 800c6a0:	60a2      	str	r2, [r4, #8]
 800c6a2:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 800c6a4:	687b      	ldr	r3, [r7, #4]
 800c6a6:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800c6aa:	4a3e      	ldr	r2, [pc, #248]	; (800c7a4 <problem_fetch+0xb0e0>)
 800c6ac:	461c      	mov	r4, r3
 800c6ae:	4613      	mov	r3, r2
 800c6b0:	cb07      	ldmia	r3!, {r0, r1, r2}
 800c6b2:	6020      	str	r0, [r4, #0]
 800c6b4:	6061      	str	r1, [r4, #4]
 800c6b6:	60a2      	str	r2, [r4, #8]
			break;
 800c6b8:	f00f bf34 	b.w	801c524 <problem_fetch+0x1ae60>
		case 315 :
			strcpy(p->name,"GNOCCHE AL RAGÙ");
 800c6bc:	687b      	ldr	r3, [r7, #4]
 800c6be:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800c6c2:	4a4a      	ldr	r2, [pc, #296]	; (800c7ec <problem_fetch+0xb128>)
 800c6c4:	461d      	mov	r5, r3
 800c6c6:	4614      	mov	r4, r2
 800c6c8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800c6ca:	6028      	str	r0, [r5, #0]
 800c6cc:	6069      	str	r1, [r5, #4]
 800c6ce:	60aa      	str	r2, [r5, #8]
 800c6d0:	60eb      	str	r3, [r5, #12]
 800c6d2:	7823      	ldrb	r3, [r4, #0]
 800c6d4:	742b      	strb	r3, [r5, #16]
			strcpy(p->grade,"7A+");
 800c6d6:	687b      	ldr	r3, [r7, #4]
 800c6d8:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800c6dc:	4a44      	ldr	r2, [pc, #272]	; (800c7f0 <problem_fetch+0xb12c>)
 800c6de:	6810      	ldr	r0, [r2, #0]
 800c6e0:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 800c6e2:	687b      	ldr	r3, [r7, #4]
 800c6e4:	2206      	movs	r2, #6
 800c6e6:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,D,G,H,K,I");
 800c6e8:	687b      	ldr	r3, [r7, #4]
 800c6ea:	33a4      	adds	r3, #164	; 0xa4
 800c6ec:	4a41      	ldr	r2, [pc, #260]	; (800c7f4 <problem_fetch+0xb130>)
 800c6ee:	461c      	mov	r4, r3
 800c6f0:	4613      	mov	r3, r2
 800c6f2:	cb07      	ldmia	r3!, {r0, r1, r2}
 800c6f4:	6020      	str	r0, [r4, #0]
 800c6f6:	6061      	str	r1, [r4, #4]
 800c6f8:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,7,10,12,14,18");
 800c6fa:	687b      	ldr	r3, [r7, #4]
 800c6fc:	3304      	adds	r3, #4
 800c6fe:	4a3e      	ldr	r2, [pc, #248]	; (800c7f8 <problem_fetch+0xb134>)
 800c700:	461c      	mov	r4, r3
 800c702:	4615      	mov	r5, r2
 800c704:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c706:	6020      	str	r0, [r4, #0]
 800c708:	6061      	str	r1, [r4, #4]
 800c70a:	60a2      	str	r2, [r4, #8]
 800c70c:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 800c70e:	687b      	ldr	r3, [r7, #4]
 800c710:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800c714:	4a23      	ldr	r2, [pc, #140]	; (800c7a4 <problem_fetch+0xb0e0>)
 800c716:	461c      	mov	r4, r3
 800c718:	4613      	mov	r3, r2
 800c71a:	cb07      	ldmia	r3!, {r0, r1, r2}
 800c71c:	6020      	str	r0, [r4, #0]
 800c71e:	6061      	str	r1, [r4, #4]
 800c720:	60a2      	str	r2, [r4, #8]
			break;
 800c722:	f00f beff 	b.w	801c524 <problem_fetch+0x1ae60>
		case 316 :
			strcpy(p->name,"A SAFE PLACE");
 800c726:	687b      	ldr	r3, [r7, #4]
 800c728:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800c72c:	4a33      	ldr	r2, [pc, #204]	; (800c7fc <problem_fetch+0xb138>)
 800c72e:	461c      	mov	r4, r3
 800c730:	4613      	mov	r3, r2
 800c732:	cb07      	ldmia	r3!, {r0, r1, r2}
 800c734:	6020      	str	r0, [r4, #0]
 800c736:	6061      	str	r1, [r4, #4]
 800c738:	60a2      	str	r2, [r4, #8]
 800c73a:	781b      	ldrb	r3, [r3, #0]
 800c73c:	7323      	strb	r3, [r4, #12]
			strcpy(p->grade,"6C");
 800c73e:	687b      	ldr	r3, [r7, #4]
 800c740:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800c744:	4a2e      	ldr	r2, [pc, #184]	; (800c800 <problem_fetch+0xb13c>)
 800c746:	8811      	ldrh	r1, [r2, #0]
 800c748:	7892      	ldrb	r2, [r2, #2]
 800c74a:	8019      	strh	r1, [r3, #0]
 800c74c:	709a      	strb	r2, [r3, #2]
			p->moveSize = 6;
 800c74e:	687b      	ldr	r3, [r7, #4]
 800c750:	2206      	movs	r2, #6
 800c752:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"H,G,D,G,E,D");
 800c754:	687b      	ldr	r3, [r7, #4]
 800c756:	33a4      	adds	r3, #164	; 0xa4
 800c758:	4a2a      	ldr	r2, [pc, #168]	; (800c804 <problem_fetch+0xb140>)
 800c75a:	461c      	mov	r4, r3
 800c75c:	4613      	mov	r3, r2
 800c75e:	cb07      	ldmia	r3!, {r0, r1, r2}
 800c760:	6020      	str	r0, [r4, #0]
 800c762:	6061      	str	r1, [r4, #4]
 800c764:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,9,11,14,16,18");
 800c766:	687b      	ldr	r3, [r7, #4]
 800c768:	3304      	adds	r3, #4
 800c76a:	4a27      	ldr	r2, [pc, #156]	; (800c808 <problem_fetch+0xb144>)
 800c76c:	461c      	mov	r4, r3
 800c76e:	4615      	mov	r5, r2
 800c770:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c772:	6020      	str	r0, [r4, #0]
 800c774:	6061      	str	r1, [r4, #4]
 800c776:	60a2      	str	r2, [r4, #8]
 800c778:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 800c77a:	687b      	ldr	r3, [r7, #4]
 800c77c:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800c780:	4a08      	ldr	r2, [pc, #32]	; (800c7a4 <problem_fetch+0xb0e0>)
 800c782:	461c      	mov	r4, r3
 800c784:	4613      	mov	r3, r2
 800c786:	cb07      	ldmia	r3!, {r0, r1, r2}
 800c788:	6020      	str	r0, [r4, #0]
 800c78a:	6061      	str	r1, [r4, #4]
 800c78c:	60a2      	str	r2, [r4, #8]
			break;
 800c78e:	f00f bec9 	b.w	801c524 <problem_fetch+0x1ae60>
 800c792:	bf00      	nop
 800c794:	08027664 	.word	0x08027664
 800c798:	08023854 	.word	0x08023854
 800c79c:	08027670 	.word	0x08027670
 800c7a0:	08025f28 	.word	0x08025f28
 800c7a4:	08023bf0 	.word	0x08023bf0
 800c7a8:	0802767c 	.word	0x0802767c
 800c7ac:	08027684 	.word	0x08027684
 800c7b0:	08027688 	.word	0x08027688
 800c7b4:	08027694 	.word	0x08027694
 800c7b8:	080276a4 	.word	0x080276a4
 800c7bc:	08023990 	.word	0x08023990
 800c7c0:	080276c0 	.word	0x080276c0
 800c7c4:	080276cc 	.word	0x080276cc
 800c7c8:	08023834 	.word	0x08023834
 800c7cc:	080276dc 	.word	0x080276dc
 800c7d0:	08023814 	.word	0x08023814
 800c7d4:	080276f0 	.word	0x080276f0
 800c7d8:	080276fc 	.word	0x080276fc
 800c7dc:	08023f34 	.word	0x08023f34
 800c7e0:	0802770c 	.word	0x0802770c
 800c7e4:	0802771c 	.word	0x0802771c
 800c7e8:	08027728 	.word	0x08027728
 800c7ec:	08027738 	.word	0x08027738
 800c7f0:	080239f4 	.word	0x080239f4
 800c7f4:	0802774c 	.word	0x0802774c
 800c7f8:	08027758 	.word	0x08027758
 800c7fc:	08027768 	.word	0x08027768
 800c800:	08023920 	.word	0x08023920
 800c804:	08027778 	.word	0x08027778
 800c808:	08027784 	.word	0x08027784
		case 317 :
			strcpy(p->name,"CRONENBERG");
 800c80c:	687b      	ldr	r3, [r7, #4]
 800c80e:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800c812:	49a8      	ldr	r1, [pc, #672]	; (800cab4 <problem_fetch+0xb3f0>)
 800c814:	461a      	mov	r2, r3
 800c816:	460b      	mov	r3, r1
 800c818:	cb03      	ldmia	r3!, {r0, r1}
 800c81a:	6010      	str	r0, [r2, #0]
 800c81c:	6051      	str	r1, [r2, #4]
 800c81e:	8819      	ldrh	r1, [r3, #0]
 800c820:	789b      	ldrb	r3, [r3, #2]
 800c822:	8111      	strh	r1, [r2, #8]
 800c824:	7293      	strb	r3, [r2, #10]
			strcpy(p->grade,"6C+");
 800c826:	687b      	ldr	r3, [r7, #4]
 800c828:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800c82c:	4aa2      	ldr	r2, [pc, #648]	; (800cab8 <problem_fetch+0xb3f4>)
 800c82e:	6810      	ldr	r0, [r2, #0]
 800c830:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 800c832:	687b      	ldr	r3, [r7, #4]
 800c834:	2207      	movs	r2, #7
 800c836:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,E,E,A,E,E,I");
 800c838:	687b      	ldr	r3, [r7, #4]
 800c83a:	33a4      	adds	r3, #164	; 0xa4
 800c83c:	4a9f      	ldr	r2, [pc, #636]	; (800cabc <problem_fetch+0xb3f8>)
 800c83e:	461c      	mov	r4, r3
 800c840:	4613      	mov	r3, r2
 800c842:	cb07      	ldmia	r3!, {r0, r1, r2}
 800c844:	6020      	str	r0, [r4, #0]
 800c846:	6061      	str	r1, [r4, #4]
 800c848:	60a2      	str	r2, [r4, #8]
 800c84a:	881b      	ldrh	r3, [r3, #0]
 800c84c:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,8,9,9,12,16,18");
 800c84e:	687b      	ldr	r3, [r7, #4]
 800c850:	3304      	adds	r3, #4
 800c852:	4a9b      	ldr	r2, [pc, #620]	; (800cac0 <problem_fetch+0xb3fc>)
 800c854:	461d      	mov	r5, r3
 800c856:	4614      	mov	r4, r2
 800c858:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800c85a:	6028      	str	r0, [r5, #0]
 800c85c:	6069      	str	r1, [r5, #4]
 800c85e:	60aa      	str	r2, [r5, #8]
 800c860:	60eb      	str	r3, [r5, #12]
 800c862:	7823      	ldrb	r3, [r4, #0]
 800c864:	742b      	strb	r3, [r5, #16]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 800c866:	687b      	ldr	r3, [r7, #4]
 800c868:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800c86c:	4a95      	ldr	r2, [pc, #596]	; (800cac4 <problem_fetch+0xb400>)
 800c86e:	461c      	mov	r4, r3
 800c870:	4613      	mov	r3, r2
 800c872:	cb07      	ldmia	r3!, {r0, r1, r2}
 800c874:	6020      	str	r0, [r4, #0]
 800c876:	6061      	str	r1, [r4, #4]
 800c878:	60a2      	str	r2, [r4, #8]
 800c87a:	881b      	ldrh	r3, [r3, #0]
 800c87c:	81a3      	strh	r3, [r4, #12]
			break;
 800c87e:	f00f be51 	b.w	801c524 <problem_fetch+0x1ae60>
		case 318 :
			strcpy(p->name,"ALLES IST MÖGLICH");
 800c882:	687b      	ldr	r3, [r7, #4]
 800c884:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800c888:	4a8f      	ldr	r2, [pc, #572]	; (800cac8 <problem_fetch+0xb404>)
 800c88a:	461d      	mov	r5, r3
 800c88c:	4614      	mov	r4, r2
 800c88e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800c890:	6028      	str	r0, [r5, #0]
 800c892:	6069      	str	r1, [r5, #4]
 800c894:	60aa      	str	r2, [r5, #8]
 800c896:	60eb      	str	r3, [r5, #12]
 800c898:	8823      	ldrh	r3, [r4, #0]
 800c89a:	78a2      	ldrb	r2, [r4, #2]
 800c89c:	822b      	strh	r3, [r5, #16]
 800c89e:	4613      	mov	r3, r2
 800c8a0:	74ab      	strb	r3, [r5, #18]
			strcpy(p->grade,"7B+");
 800c8a2:	687b      	ldr	r3, [r7, #4]
 800c8a4:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800c8a8:	4a88      	ldr	r2, [pc, #544]	; (800cacc <problem_fetch+0xb408>)
 800c8aa:	6810      	ldr	r0, [r2, #0]
 800c8ac:	6018      	str	r0, [r3, #0]
			p->moveSize = 4;
 800c8ae:	687b      	ldr	r3, [r7, #4]
 800c8b0:	2204      	movs	r2, #4
 800c8b2:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"E,F,E,D");
 800c8b4:	687b      	ldr	r3, [r7, #4]
 800c8b6:	33a4      	adds	r3, #164	; 0xa4
 800c8b8:	4985      	ldr	r1, [pc, #532]	; (800cad0 <problem_fetch+0xb40c>)
 800c8ba:	461a      	mov	r2, r3
 800c8bc:	460b      	mov	r3, r1
 800c8be:	cb03      	ldmia	r3!, {r0, r1}
 800c8c0:	6010      	str	r0, [r2, #0]
 800c8c2:	6051      	str	r1, [r2, #4]
			strcpy(p->moveNumbers,"6,11,14,18");
 800c8c4:	687b      	ldr	r3, [r7, #4]
 800c8c6:	3304      	adds	r3, #4
 800c8c8:	4982      	ldr	r1, [pc, #520]	; (800cad4 <problem_fetch+0xb410>)
 800c8ca:	461a      	mov	r2, r3
 800c8cc:	460b      	mov	r3, r1
 800c8ce:	cb03      	ldmia	r3!, {r0, r1}
 800c8d0:	6010      	str	r0, [r2, #0]
 800c8d2:	6051      	str	r1, [r2, #4]
 800c8d4:	8819      	ldrh	r1, [r3, #0]
 800c8d6:	789b      	ldrb	r3, [r3, #2]
 800c8d8:	8111      	strh	r1, [r2, #8]
 800c8da:	7293      	strb	r3, [r2, #10]
			strcpy(p->startFinish,"s,d,d,e");
 800c8dc:	687b      	ldr	r3, [r7, #4]
 800c8de:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800c8e2:	497d      	ldr	r1, [pc, #500]	; (800cad8 <problem_fetch+0xb414>)
 800c8e4:	461a      	mov	r2, r3
 800c8e6:	460b      	mov	r3, r1
 800c8e8:	cb03      	ldmia	r3!, {r0, r1}
 800c8ea:	6010      	str	r0, [r2, #0]
 800c8ec:	6051      	str	r1, [r2, #4]
			break;
 800c8ee:	f00f be19 	b.w	801c524 <problem_fetch+0x1ae60>
		case 319 :
			strcpy(p->name,"KKSBSKAN");
 800c8f2:	687b      	ldr	r3, [r7, #4]
 800c8f4:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800c8f8:	4978      	ldr	r1, [pc, #480]	; (800cadc <problem_fetch+0xb418>)
 800c8fa:	461a      	mov	r2, r3
 800c8fc:	460b      	mov	r3, r1
 800c8fe:	cb03      	ldmia	r3!, {r0, r1}
 800c900:	6010      	str	r0, [r2, #0]
 800c902:	6051      	str	r1, [r2, #4]
 800c904:	781b      	ldrb	r3, [r3, #0]
 800c906:	7213      	strb	r3, [r2, #8]
			strcpy(p->grade,"7C");
 800c908:	687b      	ldr	r3, [r7, #4]
 800c90a:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800c90e:	4a74      	ldr	r2, [pc, #464]	; (800cae0 <problem_fetch+0xb41c>)
 800c910:	8811      	ldrh	r1, [r2, #0]
 800c912:	7892      	ldrb	r2, [r2, #2]
 800c914:	8019      	strh	r1, [r3, #0]
 800c916:	709a      	strb	r2, [r3, #2]
			p->moveSize = 5;
 800c918:	687b      	ldr	r3, [r7, #4]
 800c91a:	2205      	movs	r2, #5
 800c91c:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,C,D,C,I");
 800c91e:	687b      	ldr	r3, [r7, #4]
 800c920:	33a4      	adds	r3, #164	; 0xa4
 800c922:	4970      	ldr	r1, [pc, #448]	; (800cae4 <problem_fetch+0xb420>)
 800c924:	461a      	mov	r2, r3
 800c926:	460b      	mov	r3, r1
 800c928:	cb03      	ldmia	r3!, {r0, r1}
 800c92a:	6010      	str	r0, [r2, #0]
 800c92c:	6051      	str	r1, [r2, #4]
 800c92e:	881b      	ldrh	r3, [r3, #0]
 800c930:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"4,8,11,16,18");
 800c932:	687b      	ldr	r3, [r7, #4]
 800c934:	3304      	adds	r3, #4
 800c936:	4a6c      	ldr	r2, [pc, #432]	; (800cae8 <problem_fetch+0xb424>)
 800c938:	461c      	mov	r4, r3
 800c93a:	4613      	mov	r3, r2
 800c93c:	cb07      	ldmia	r3!, {r0, r1, r2}
 800c93e:	6020      	str	r0, [r4, #0]
 800c940:	6061      	str	r1, [r4, #4]
 800c942:	60a2      	str	r2, [r4, #8]
 800c944:	781b      	ldrb	r3, [r3, #0]
 800c946:	7323      	strb	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,e");
 800c948:	687b      	ldr	r3, [r7, #4]
 800c94a:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800c94e:	4967      	ldr	r1, [pc, #412]	; (800caec <problem_fetch+0xb428>)
 800c950:	461a      	mov	r2, r3
 800c952:	460b      	mov	r3, r1
 800c954:	cb03      	ldmia	r3!, {r0, r1}
 800c956:	6010      	str	r0, [r2, #0]
 800c958:	6051      	str	r1, [r2, #4]
 800c95a:	881b      	ldrh	r3, [r3, #0]
 800c95c:	8113      	strh	r3, [r2, #8]
			break;
 800c95e:	f00f bde1 	b.w	801c524 <problem_fetch+0x1ae60>
		case 320 :
			strcpy(p->name,"MATCHCATCH");
 800c962:	687b      	ldr	r3, [r7, #4]
 800c964:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800c968:	4961      	ldr	r1, [pc, #388]	; (800caf0 <problem_fetch+0xb42c>)
 800c96a:	461a      	mov	r2, r3
 800c96c:	460b      	mov	r3, r1
 800c96e:	cb03      	ldmia	r3!, {r0, r1}
 800c970:	6010      	str	r0, [r2, #0]
 800c972:	6051      	str	r1, [r2, #4]
 800c974:	8819      	ldrh	r1, [r3, #0]
 800c976:	789b      	ldrb	r3, [r3, #2]
 800c978:	8111      	strh	r1, [r2, #8]
 800c97a:	7293      	strb	r3, [r2, #10]
			strcpy(p->grade,"6C+");
 800c97c:	687b      	ldr	r3, [r7, #4]
 800c97e:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800c982:	4a4d      	ldr	r2, [pc, #308]	; (800cab8 <problem_fetch+0xb3f4>)
 800c984:	6810      	ldr	r0, [r2, #0]
 800c986:	6018      	str	r0, [r3, #0]
			p->moveSize = 5;
 800c988:	687b      	ldr	r3, [r7, #4]
 800c98a:	2205      	movs	r2, #5
 800c98c:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"H,I,J,G,I");
 800c98e:	687b      	ldr	r3, [r7, #4]
 800c990:	33a4      	adds	r3, #164	; 0xa4
 800c992:	4958      	ldr	r1, [pc, #352]	; (800caf4 <problem_fetch+0xb430>)
 800c994:	461a      	mov	r2, r3
 800c996:	460b      	mov	r3, r1
 800c998:	cb03      	ldmia	r3!, {r0, r1}
 800c99a:	6010      	str	r0, [r2, #0]
 800c99c:	6051      	str	r1, [r2, #4]
 800c99e:	881b      	ldrh	r3, [r3, #0]
 800c9a0:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"5,10,13,14,18");
 800c9a2:	687b      	ldr	r3, [r7, #4]
 800c9a4:	3304      	adds	r3, #4
 800c9a6:	4a54      	ldr	r2, [pc, #336]	; (800caf8 <problem_fetch+0xb434>)
 800c9a8:	461c      	mov	r4, r3
 800c9aa:	4613      	mov	r3, r2
 800c9ac:	cb07      	ldmia	r3!, {r0, r1, r2}
 800c9ae:	6020      	str	r0, [r4, #0]
 800c9b0:	6061      	str	r1, [r4, #4]
 800c9b2:	60a2      	str	r2, [r4, #8]
 800c9b4:	881b      	ldrh	r3, [r3, #0]
 800c9b6:	81a3      	strh	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,e");
 800c9b8:	687b      	ldr	r3, [r7, #4]
 800c9ba:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800c9be:	494b      	ldr	r1, [pc, #300]	; (800caec <problem_fetch+0xb428>)
 800c9c0:	461a      	mov	r2, r3
 800c9c2:	460b      	mov	r3, r1
 800c9c4:	cb03      	ldmia	r3!, {r0, r1}
 800c9c6:	6010      	str	r0, [r2, #0]
 800c9c8:	6051      	str	r1, [r2, #4]
 800c9ca:	881b      	ldrh	r3, [r3, #0]
 800c9cc:	8113      	strh	r3, [r2, #8]
			break;
 800c9ce:	f00f bda9 	b.w	801c524 <problem_fetch+0x1ae60>
		case 321 :
			strcpy(p->name,"CAPTAIN AUBREY VAR.");
 800c9d2:	687b      	ldr	r3, [r7, #4]
 800c9d4:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800c9d8:	4a48      	ldr	r2, [pc, #288]	; (800cafc <problem_fetch+0xb438>)
 800c9da:	461d      	mov	r5, r3
 800c9dc:	4614      	mov	r4, r2
 800c9de:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800c9e0:	6028      	str	r0, [r5, #0]
 800c9e2:	6069      	str	r1, [r5, #4]
 800c9e4:	60aa      	str	r2, [r5, #8]
 800c9e6:	60eb      	str	r3, [r5, #12]
 800c9e8:	6820      	ldr	r0, [r4, #0]
 800c9ea:	6128      	str	r0, [r5, #16]
			strcpy(p->grade,"7A+");
 800c9ec:	687b      	ldr	r3, [r7, #4]
 800c9ee:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800c9f2:	4a43      	ldr	r2, [pc, #268]	; (800cb00 <problem_fetch+0xb43c>)
 800c9f4:	6810      	ldr	r0, [r2, #0]
 800c9f6:	6018      	str	r0, [r3, #0]
			p->moveSize = 5;
 800c9f8:	687b      	ldr	r3, [r7, #4]
 800c9fa:	2205      	movs	r2, #5
 800c9fc:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,H,E,I,I");
 800c9fe:	687b      	ldr	r3, [r7, #4]
 800ca00:	33a4      	adds	r3, #164	; 0xa4
 800ca02:	4940      	ldr	r1, [pc, #256]	; (800cb04 <problem_fetch+0xb440>)
 800ca04:	461a      	mov	r2, r3
 800ca06:	460b      	mov	r3, r1
 800ca08:	cb03      	ldmia	r3!, {r0, r1}
 800ca0a:	6010      	str	r0, [r2, #0]
 800ca0c:	6051      	str	r1, [r2, #4]
 800ca0e:	881b      	ldrh	r3, [r3, #0]
 800ca10:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"5,8,12,14,18");
 800ca12:	687b      	ldr	r3, [r7, #4]
 800ca14:	3304      	adds	r3, #4
 800ca16:	4a3c      	ldr	r2, [pc, #240]	; (800cb08 <problem_fetch+0xb444>)
 800ca18:	461c      	mov	r4, r3
 800ca1a:	4613      	mov	r3, r2
 800ca1c:	cb07      	ldmia	r3!, {r0, r1, r2}
 800ca1e:	6020      	str	r0, [r4, #0]
 800ca20:	6061      	str	r1, [r4, #4]
 800ca22:	60a2      	str	r2, [r4, #8]
 800ca24:	781b      	ldrb	r3, [r3, #0]
 800ca26:	7323      	strb	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,e");
 800ca28:	687b      	ldr	r3, [r7, #4]
 800ca2a:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800ca2e:	492f      	ldr	r1, [pc, #188]	; (800caec <problem_fetch+0xb428>)
 800ca30:	461a      	mov	r2, r3
 800ca32:	460b      	mov	r3, r1
 800ca34:	cb03      	ldmia	r3!, {r0, r1}
 800ca36:	6010      	str	r0, [r2, #0]
 800ca38:	6051      	str	r1, [r2, #4]
 800ca3a:	881b      	ldrh	r3, [r3, #0]
 800ca3c:	8113      	strh	r3, [r2, #8]
			break;
 800ca3e:	f00f bd71 	b.w	801c524 <problem_fetch+0x1ae60>
		case 322 :
			strcpy(p->name,"OKLAHOMA");
 800ca42:	687b      	ldr	r3, [r7, #4]
 800ca44:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800ca48:	4930      	ldr	r1, [pc, #192]	; (800cb0c <problem_fetch+0xb448>)
 800ca4a:	461a      	mov	r2, r3
 800ca4c:	460b      	mov	r3, r1
 800ca4e:	cb03      	ldmia	r3!, {r0, r1}
 800ca50:	6010      	str	r0, [r2, #0]
 800ca52:	6051      	str	r1, [r2, #4]
 800ca54:	781b      	ldrb	r3, [r3, #0]
 800ca56:	7213      	strb	r3, [r2, #8]
			strcpy(p->grade,"7A");
 800ca58:	687b      	ldr	r3, [r7, #4]
 800ca5a:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800ca5e:	4a2c      	ldr	r2, [pc, #176]	; (800cb10 <problem_fetch+0xb44c>)
 800ca60:	8811      	ldrh	r1, [r2, #0]
 800ca62:	7892      	ldrb	r2, [r2, #2]
 800ca64:	8019      	strh	r1, [r3, #0]
 800ca66:	709a      	strb	r2, [r3, #2]
			p->moveSize = 5;
 800ca68:	687b      	ldr	r3, [r7, #4]
 800ca6a:	2205      	movs	r2, #5
 800ca6c:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,H,G,D,A");
 800ca6e:	687b      	ldr	r3, [r7, #4]
 800ca70:	33a4      	adds	r3, #164	; 0xa4
 800ca72:	4928      	ldr	r1, [pc, #160]	; (800cb14 <problem_fetch+0xb450>)
 800ca74:	461a      	mov	r2, r3
 800ca76:	460b      	mov	r3, r1
 800ca78:	cb03      	ldmia	r3!, {r0, r1}
 800ca7a:	6010      	str	r0, [r2, #0]
 800ca7c:	6051      	str	r1, [r2, #4]
 800ca7e:	881b      	ldrh	r3, [r3, #0]
 800ca80:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"5,10,14,15,18");
 800ca82:	687b      	ldr	r3, [r7, #4]
 800ca84:	3304      	adds	r3, #4
 800ca86:	4a24      	ldr	r2, [pc, #144]	; (800cb18 <problem_fetch+0xb454>)
 800ca88:	461c      	mov	r4, r3
 800ca8a:	4613      	mov	r3, r2
 800ca8c:	cb07      	ldmia	r3!, {r0, r1, r2}
 800ca8e:	6020      	str	r0, [r4, #0]
 800ca90:	6061      	str	r1, [r4, #4]
 800ca92:	60a2      	str	r2, [r4, #8]
 800ca94:	881b      	ldrh	r3, [r3, #0]
 800ca96:	81a3      	strh	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,e");
 800ca98:	687b      	ldr	r3, [r7, #4]
 800ca9a:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800ca9e:	4913      	ldr	r1, [pc, #76]	; (800caec <problem_fetch+0xb428>)
 800caa0:	461a      	mov	r2, r3
 800caa2:	460b      	mov	r3, r1
 800caa4:	cb03      	ldmia	r3!, {r0, r1}
 800caa6:	6010      	str	r0, [r2, #0]
 800caa8:	6051      	str	r1, [r2, #4]
 800caaa:	881b      	ldrh	r3, [r3, #0]
 800caac:	8113      	strh	r3, [r2, #8]
			break;
 800caae:	f00f bd39 	b.w	801c524 <problem_fetch+0x1ae60>
 800cab2:	bf00      	nop
 800cab4:	08027794 	.word	0x08027794
 800cab8:	080238ec 	.word	0x080238ec
 800cabc:	080277a0 	.word	0x080277a0
 800cac0:	080277b0 	.word	0x080277b0
 800cac4:	080239dc 	.word	0x080239dc
 800cac8:	080277c4 	.word	0x080277c4
 800cacc:	08023990 	.word	0x08023990
 800cad0:	080277d8 	.word	0x080277d8
 800cad4:	080277e0 	.word	0x080277e0
 800cad8:	080239a8 	.word	0x080239a8
 800cadc:	080277ec 	.word	0x080277ec
 800cae0:	08024088 	.word	0x08024088
 800cae4:	080277f8 	.word	0x080277f8
 800cae8:	08027804 	.word	0x08027804
 800caec:	08023d20 	.word	0x08023d20
 800caf0:	08027814 	.word	0x08027814
 800caf4:	08027820 	.word	0x08027820
 800caf8:	08027654 	.word	0x08027654
 800cafc:	0802782c 	.word	0x0802782c
 800cb00:	080239f4 	.word	0x080239f4
 800cb04:	08027840 	.word	0x08027840
 800cb08:	0802784c 	.word	0x0802784c
 800cb0c:	0802785c 	.word	0x0802785c
 800cb10:	08023814 	.word	0x08023814
 800cb14:	08027868 	.word	0x08027868
 800cb18:	08027874 	.word	0x08027874
		case 323 :
			strcpy(p->name,"BLACK PHENOMENON");
 800cb1c:	687b      	ldr	r3, [r7, #4]
 800cb1e:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800cb22:	4ac0      	ldr	r2, [pc, #768]	; (800ce24 <problem_fetch+0xb760>)
 800cb24:	461d      	mov	r5, r3
 800cb26:	4614      	mov	r4, r2
 800cb28:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800cb2a:	6028      	str	r0, [r5, #0]
 800cb2c:	6069      	str	r1, [r5, #4]
 800cb2e:	60aa      	str	r2, [r5, #8]
 800cb30:	60eb      	str	r3, [r5, #12]
 800cb32:	7823      	ldrb	r3, [r4, #0]
 800cb34:	742b      	strb	r3, [r5, #16]
			strcpy(p->grade,"8A");
 800cb36:	687b      	ldr	r3, [r7, #4]
 800cb38:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800cb3c:	4aba      	ldr	r2, [pc, #744]	; (800ce28 <problem_fetch+0xb764>)
 800cb3e:	8811      	ldrh	r1, [r2, #0]
 800cb40:	7892      	ldrb	r2, [r2, #2]
 800cb42:	8019      	strh	r1, [r3, #0]
 800cb44:	709a      	strb	r2, [r3, #2]
			p->moveSize = 6;
 800cb46:	687b      	ldr	r3, [r7, #4]
 800cb48:	2206      	movs	r2, #6
 800cb4a:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,G,B,G,B,D");
 800cb4c:	687b      	ldr	r3, [r7, #4]
 800cb4e:	33a4      	adds	r3, #164	; 0xa4
 800cb50:	4ab6      	ldr	r2, [pc, #728]	; (800ce2c <problem_fetch+0xb768>)
 800cb52:	461c      	mov	r4, r3
 800cb54:	4613      	mov	r3, r2
 800cb56:	cb07      	ldmia	r3!, {r0, r1, r2}
 800cb58:	6020      	str	r0, [r4, #0]
 800cb5a:	6061      	str	r1, [r4, #4]
 800cb5c:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,6,6,10,10,18");
 800cb5e:	687b      	ldr	r3, [r7, #4]
 800cb60:	3304      	adds	r3, #4
 800cb62:	4ab3      	ldr	r2, [pc, #716]	; (800ce30 <problem_fetch+0xb76c>)
 800cb64:	461c      	mov	r4, r3
 800cb66:	4613      	mov	r3, r2
 800cb68:	cb07      	ldmia	r3!, {r0, r1, r2}
 800cb6a:	6020      	str	r0, [r4, #0]
 800cb6c:	6061      	str	r1, [r4, #4]
 800cb6e:	60a2      	str	r2, [r4, #8]
 800cb70:	881a      	ldrh	r2, [r3, #0]
 800cb72:	789b      	ldrb	r3, [r3, #2]
 800cb74:	81a2      	strh	r2, [r4, #12]
 800cb76:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 800cb78:	687b      	ldr	r3, [r7, #4]
 800cb7a:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800cb7e:	4aad      	ldr	r2, [pc, #692]	; (800ce34 <problem_fetch+0xb770>)
 800cb80:	461c      	mov	r4, r3
 800cb82:	4613      	mov	r3, r2
 800cb84:	cb07      	ldmia	r3!, {r0, r1, r2}
 800cb86:	6020      	str	r0, [r4, #0]
 800cb88:	6061      	str	r1, [r4, #4]
 800cb8a:	60a2      	str	r2, [r4, #8]
			break;
 800cb8c:	f00f bcca 	b.w	801c524 <problem_fetch+0x1ae60>
		case 324 :
			strcpy(p->name,"KHAZAD DUM");
 800cb90:	687b      	ldr	r3, [r7, #4]
 800cb92:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800cb96:	49a8      	ldr	r1, [pc, #672]	; (800ce38 <problem_fetch+0xb774>)
 800cb98:	461a      	mov	r2, r3
 800cb9a:	460b      	mov	r3, r1
 800cb9c:	cb03      	ldmia	r3!, {r0, r1}
 800cb9e:	6010      	str	r0, [r2, #0]
 800cba0:	6051      	str	r1, [r2, #4]
 800cba2:	8819      	ldrh	r1, [r3, #0]
 800cba4:	789b      	ldrb	r3, [r3, #2]
 800cba6:	8111      	strh	r1, [r2, #8]
 800cba8:	7293      	strb	r3, [r2, #10]
			strcpy(p->grade,"6B+");
 800cbaa:	687b      	ldr	r3, [r7, #4]
 800cbac:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800cbb0:	4aa2      	ldr	r2, [pc, #648]	; (800ce3c <problem_fetch+0xb778>)
 800cbb2:	6810      	ldr	r0, [r2, #0]
 800cbb4:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 800cbb6:	687b      	ldr	r3, [r7, #4]
 800cbb8:	2206      	movs	r2, #6
 800cbba:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,G,F,C,D,A");
 800cbbc:	687b      	ldr	r3, [r7, #4]
 800cbbe:	33a4      	adds	r3, #164	; 0xa4
 800cbc0:	4a9f      	ldr	r2, [pc, #636]	; (800ce40 <problem_fetch+0xb77c>)
 800cbc2:	461c      	mov	r4, r3
 800cbc4:	4613      	mov	r3, r2
 800cbc6:	cb07      	ldmia	r3!, {r0, r1, r2}
 800cbc8:	6020      	str	r0, [r4, #0]
 800cbca:	6061      	str	r1, [r4, #4]
 800cbcc:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,9,11,13,15,18");
 800cbce:	687b      	ldr	r3, [r7, #4]
 800cbd0:	3304      	adds	r3, #4
 800cbd2:	4a9c      	ldr	r2, [pc, #624]	; (800ce44 <problem_fetch+0xb780>)
 800cbd4:	461c      	mov	r4, r3
 800cbd6:	4615      	mov	r5, r2
 800cbd8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800cbda:	6020      	str	r0, [r4, #0]
 800cbdc:	6061      	str	r1, [r4, #4]
 800cbde:	60a2      	str	r2, [r4, #8]
 800cbe0:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 800cbe2:	687b      	ldr	r3, [r7, #4]
 800cbe4:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800cbe8:	4a92      	ldr	r2, [pc, #584]	; (800ce34 <problem_fetch+0xb770>)
 800cbea:	461c      	mov	r4, r3
 800cbec:	4613      	mov	r3, r2
 800cbee:	cb07      	ldmia	r3!, {r0, r1, r2}
 800cbf0:	6020      	str	r0, [r4, #0]
 800cbf2:	6061      	str	r1, [r4, #4]
 800cbf4:	60a2      	str	r2, [r4, #8]
			break;
 800cbf6:	f00f bc95 	b.w	801c524 <problem_fetch+0x1ae60>
		case 325 :
			strcpy(p->name,"TESSME 4");
 800cbfa:	687b      	ldr	r3, [r7, #4]
 800cbfc:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800cc00:	4991      	ldr	r1, [pc, #580]	; (800ce48 <problem_fetch+0xb784>)
 800cc02:	461a      	mov	r2, r3
 800cc04:	460b      	mov	r3, r1
 800cc06:	cb03      	ldmia	r3!, {r0, r1}
 800cc08:	6010      	str	r0, [r2, #0]
 800cc0a:	6051      	str	r1, [r2, #4]
 800cc0c:	781b      	ldrb	r3, [r3, #0]
 800cc0e:	7213      	strb	r3, [r2, #8]
			strcpy(p->grade,"7B+");
 800cc10:	687b      	ldr	r3, [r7, #4]
 800cc12:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800cc16:	4a8d      	ldr	r2, [pc, #564]	; (800ce4c <problem_fetch+0xb788>)
 800cc18:	6810      	ldr	r0, [r2, #0]
 800cc1a:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 800cc1c:	687b      	ldr	r3, [r7, #4]
 800cc1e:	2206      	movs	r2, #6
 800cc20:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,H,E,I,D,I");
 800cc22:	687b      	ldr	r3, [r7, #4]
 800cc24:	33a4      	adds	r3, #164	; 0xa4
 800cc26:	4a8a      	ldr	r2, [pc, #552]	; (800ce50 <problem_fetch+0xb78c>)
 800cc28:	461c      	mov	r4, r3
 800cc2a:	4613      	mov	r3, r2
 800cc2c:	cb07      	ldmia	r3!, {r0, r1, r2}
 800cc2e:	6020      	str	r0, [r4, #0]
 800cc30:	6061      	str	r1, [r4, #4]
 800cc32:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,8,12,14,7,18");
 800cc34:	687b      	ldr	r3, [r7, #4]
 800cc36:	3304      	adds	r3, #4
 800cc38:	4a86      	ldr	r2, [pc, #536]	; (800ce54 <problem_fetch+0xb790>)
 800cc3a:	461c      	mov	r4, r3
 800cc3c:	4613      	mov	r3, r2
 800cc3e:	cb07      	ldmia	r3!, {r0, r1, r2}
 800cc40:	6020      	str	r0, [r4, #0]
 800cc42:	6061      	str	r1, [r4, #4]
 800cc44:	60a2      	str	r2, [r4, #8]
 800cc46:	881a      	ldrh	r2, [r3, #0]
 800cc48:	789b      	ldrb	r3, [r3, #2]
 800cc4a:	81a2      	strh	r2, [r4, #12]
 800cc4c:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 800cc4e:	687b      	ldr	r3, [r7, #4]
 800cc50:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800cc54:	4a77      	ldr	r2, [pc, #476]	; (800ce34 <problem_fetch+0xb770>)
 800cc56:	461c      	mov	r4, r3
 800cc58:	4613      	mov	r3, r2
 800cc5a:	cb07      	ldmia	r3!, {r0, r1, r2}
 800cc5c:	6020      	str	r0, [r4, #0]
 800cc5e:	6061      	str	r1, [r4, #4]
 800cc60:	60a2      	str	r2, [r4, #8]
			break;
 800cc62:	f00f bc5f 	b.w	801c524 <problem_fetch+0x1ae60>
		case 326 :
			strcpy(p->name,"TESSME 3");
 800cc66:	687b      	ldr	r3, [r7, #4]
 800cc68:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800cc6c:	497a      	ldr	r1, [pc, #488]	; (800ce58 <problem_fetch+0xb794>)
 800cc6e:	461a      	mov	r2, r3
 800cc70:	460b      	mov	r3, r1
 800cc72:	cb03      	ldmia	r3!, {r0, r1}
 800cc74:	6010      	str	r0, [r2, #0]
 800cc76:	6051      	str	r1, [r2, #4]
 800cc78:	781b      	ldrb	r3, [r3, #0]
 800cc7a:	7213      	strb	r3, [r2, #8]
			strcpy(p->grade,"7A+");
 800cc7c:	687b      	ldr	r3, [r7, #4]
 800cc7e:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800cc82:	4a76      	ldr	r2, [pc, #472]	; (800ce5c <problem_fetch+0xb798>)
 800cc84:	6810      	ldr	r0, [r2, #0]
 800cc86:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 800cc88:	687b      	ldr	r3, [r7, #4]
 800cc8a:	2206      	movs	r2, #6
 800cc8c:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,H,I,E,E,I");
 800cc8e:	687b      	ldr	r3, [r7, #4]
 800cc90:	33a4      	adds	r3, #164	; 0xa4
 800cc92:	4a73      	ldr	r2, [pc, #460]	; (800ce60 <problem_fetch+0xb79c>)
 800cc94:	461c      	mov	r4, r3
 800cc96:	4613      	mov	r3, r2
 800cc98:	cb07      	ldmia	r3!, {r0, r1, r2}
 800cc9a:	6020      	str	r0, [r4, #0]
 800cc9c:	6061      	str	r1, [r4, #4]
 800cc9e:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,8,14,12,9,18");
 800cca0:	687b      	ldr	r3, [r7, #4]
 800cca2:	3304      	adds	r3, #4
 800cca4:	4a6f      	ldr	r2, [pc, #444]	; (800ce64 <problem_fetch+0xb7a0>)
 800cca6:	461c      	mov	r4, r3
 800cca8:	4613      	mov	r3, r2
 800ccaa:	cb07      	ldmia	r3!, {r0, r1, r2}
 800ccac:	6020      	str	r0, [r4, #0]
 800ccae:	6061      	str	r1, [r4, #4]
 800ccb0:	60a2      	str	r2, [r4, #8]
 800ccb2:	881a      	ldrh	r2, [r3, #0]
 800ccb4:	789b      	ldrb	r3, [r3, #2]
 800ccb6:	81a2      	strh	r2, [r4, #12]
 800ccb8:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 800ccba:	687b      	ldr	r3, [r7, #4]
 800ccbc:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800ccc0:	4a5c      	ldr	r2, [pc, #368]	; (800ce34 <problem_fetch+0xb770>)
 800ccc2:	461c      	mov	r4, r3
 800ccc4:	4613      	mov	r3, r2
 800ccc6:	cb07      	ldmia	r3!, {r0, r1, r2}
 800ccc8:	6020      	str	r0, [r4, #0]
 800ccca:	6061      	str	r1, [r4, #4]
 800cccc:	60a2      	str	r2, [r4, #8]
			break;
 800ccce:	f00f bc29 	b.w	801c524 <problem_fetch+0x1ae60>
		case 327 :
			strcpy(p->name,"TESSME 1");
 800ccd2:	687b      	ldr	r3, [r7, #4]
 800ccd4:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800ccd8:	4963      	ldr	r1, [pc, #396]	; (800ce68 <problem_fetch+0xb7a4>)
 800ccda:	461a      	mov	r2, r3
 800ccdc:	460b      	mov	r3, r1
 800ccde:	cb03      	ldmia	r3!, {r0, r1}
 800cce0:	6010      	str	r0, [r2, #0]
 800cce2:	6051      	str	r1, [r2, #4]
 800cce4:	781b      	ldrb	r3, [r3, #0]
 800cce6:	7213      	strb	r3, [r2, #8]
			strcpy(p->grade,"6B+");
 800cce8:	687b      	ldr	r3, [r7, #4]
 800ccea:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800ccee:	4a53      	ldr	r2, [pc, #332]	; (800ce3c <problem_fetch+0xb778>)
 800ccf0:	6810      	ldr	r0, [r2, #0]
 800ccf2:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 800ccf4:	687b      	ldr	r3, [r7, #4]
 800ccf6:	2207      	movs	r2, #7
 800ccf8:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,H,E,F,J,H,I");
 800ccfa:	687b      	ldr	r3, [r7, #4]
 800ccfc:	33a4      	adds	r3, #164	; 0xa4
 800ccfe:	4a5b      	ldr	r2, [pc, #364]	; (800ce6c <problem_fetch+0xb7a8>)
 800cd00:	461c      	mov	r4, r3
 800cd02:	4613      	mov	r3, r2
 800cd04:	cb07      	ldmia	r3!, {r0, r1, r2}
 800cd06:	6020      	str	r0, [r4, #0]
 800cd08:	6061      	str	r1, [r4, #4]
 800cd0a:	60a2      	str	r2, [r4, #8]
 800cd0c:	881b      	ldrh	r3, [r3, #0]
 800cd0e:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,8,8,11,13,16,18");
 800cd10:	687b      	ldr	r3, [r7, #4]
 800cd12:	3304      	adds	r3, #4
 800cd14:	4a56      	ldr	r2, [pc, #344]	; (800ce70 <problem_fetch+0xb7ac>)
 800cd16:	461d      	mov	r5, r3
 800cd18:	4614      	mov	r4, r2
 800cd1a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800cd1c:	6028      	str	r0, [r5, #0]
 800cd1e:	6069      	str	r1, [r5, #4]
 800cd20:	60aa      	str	r2, [r5, #8]
 800cd22:	60eb      	str	r3, [r5, #12]
 800cd24:	8823      	ldrh	r3, [r4, #0]
 800cd26:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 800cd28:	687b      	ldr	r3, [r7, #4]
 800cd2a:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800cd2e:	4a51      	ldr	r2, [pc, #324]	; (800ce74 <problem_fetch+0xb7b0>)
 800cd30:	461c      	mov	r4, r3
 800cd32:	4613      	mov	r3, r2
 800cd34:	cb07      	ldmia	r3!, {r0, r1, r2}
 800cd36:	6020      	str	r0, [r4, #0]
 800cd38:	6061      	str	r1, [r4, #4]
 800cd3a:	60a2      	str	r2, [r4, #8]
 800cd3c:	881b      	ldrh	r3, [r3, #0]
 800cd3e:	81a3      	strh	r3, [r4, #12]
			break;
 800cd40:	f00f bbf0 	b.w	801c524 <problem_fetch+0x1ae60>
		case 328 :
			strcpy(p->name,"RONSTOPPABLE");
 800cd44:	687b      	ldr	r3, [r7, #4]
 800cd46:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800cd4a:	4a4b      	ldr	r2, [pc, #300]	; (800ce78 <problem_fetch+0xb7b4>)
 800cd4c:	461c      	mov	r4, r3
 800cd4e:	4613      	mov	r3, r2
 800cd50:	cb07      	ldmia	r3!, {r0, r1, r2}
 800cd52:	6020      	str	r0, [r4, #0]
 800cd54:	6061      	str	r1, [r4, #4]
 800cd56:	60a2      	str	r2, [r4, #8]
 800cd58:	781b      	ldrb	r3, [r3, #0]
 800cd5a:	7323      	strb	r3, [r4, #12]
			strcpy(p->grade,"6C+");
 800cd5c:	687b      	ldr	r3, [r7, #4]
 800cd5e:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800cd62:	4a46      	ldr	r2, [pc, #280]	; (800ce7c <problem_fetch+0xb7b8>)
 800cd64:	6810      	ldr	r0, [r2, #0]
 800cd66:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 800cd68:	687b      	ldr	r3, [r7, #4]
 800cd6a:	2206      	movs	r2, #6
 800cd6c:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,H,C,E,B,D");
 800cd6e:	687b      	ldr	r3, [r7, #4]
 800cd70:	33a4      	adds	r3, #164	; 0xa4
 800cd72:	4a43      	ldr	r2, [pc, #268]	; (800ce80 <problem_fetch+0xb7bc>)
 800cd74:	461c      	mov	r4, r3
 800cd76:	4613      	mov	r3, r2
 800cd78:	cb07      	ldmia	r3!, {r0, r1, r2}
 800cd7a:	6020      	str	r0, [r4, #0]
 800cd7c:	6061      	str	r1, [r4, #4]
 800cd7e:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,8,8,12,15,18");
 800cd80:	687b      	ldr	r3, [r7, #4]
 800cd82:	3304      	adds	r3, #4
 800cd84:	4a3f      	ldr	r2, [pc, #252]	; (800ce84 <problem_fetch+0xb7c0>)
 800cd86:	461c      	mov	r4, r3
 800cd88:	4613      	mov	r3, r2
 800cd8a:	cb07      	ldmia	r3!, {r0, r1, r2}
 800cd8c:	6020      	str	r0, [r4, #0]
 800cd8e:	6061      	str	r1, [r4, #4]
 800cd90:	60a2      	str	r2, [r4, #8]
 800cd92:	881a      	ldrh	r2, [r3, #0]
 800cd94:	789b      	ldrb	r3, [r3, #2]
 800cd96:	81a2      	strh	r2, [r4, #12]
 800cd98:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 800cd9a:	687b      	ldr	r3, [r7, #4]
 800cd9c:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800cda0:	4a24      	ldr	r2, [pc, #144]	; (800ce34 <problem_fetch+0xb770>)
 800cda2:	461c      	mov	r4, r3
 800cda4:	4613      	mov	r3, r2
 800cda6:	cb07      	ldmia	r3!, {r0, r1, r2}
 800cda8:	6020      	str	r0, [r4, #0]
 800cdaa:	6061      	str	r1, [r4, #4]
 800cdac:	60a2      	str	r2, [r4, #8]
			break;
 800cdae:	f00f bbb9 	b.w	801c524 <problem_fetch+0x1ae60>
		case 329 :
			strcpy(p->name,"MO'RON");
 800cdb2:	687b      	ldr	r3, [r7, #4]
 800cdb4:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800cdb8:	4a33      	ldr	r2, [pc, #204]	; (800ce88 <problem_fetch+0xb7c4>)
 800cdba:	6810      	ldr	r0, [r2, #0]
 800cdbc:	6018      	str	r0, [r3, #0]
 800cdbe:	8891      	ldrh	r1, [r2, #4]
 800cdc0:	7992      	ldrb	r2, [r2, #6]
 800cdc2:	8099      	strh	r1, [r3, #4]
 800cdc4:	719a      	strb	r2, [r3, #6]
			strcpy(p->grade,"7A");
 800cdc6:	687b      	ldr	r3, [r7, #4]
 800cdc8:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800cdcc:	4a2f      	ldr	r2, [pc, #188]	; (800ce8c <problem_fetch+0xb7c8>)
 800cdce:	8811      	ldrh	r1, [r2, #0]
 800cdd0:	7892      	ldrb	r2, [r2, #2]
 800cdd2:	8019      	strh	r1, [r3, #0]
 800cdd4:	709a      	strb	r2, [r3, #2]
			p->moveSize = 8;
 800cdd6:	687b      	ldr	r3, [r7, #4]
 800cdd8:	2208      	movs	r2, #8
 800cdda:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"E,G,E,A,E,E,G,D");
 800cddc:	687b      	ldr	r3, [r7, #4]
 800cdde:	33a4      	adds	r3, #164	; 0xa4
 800cde0:	4a2b      	ldr	r2, [pc, #172]	; (800ce90 <problem_fetch+0xb7cc>)
 800cde2:	461c      	mov	r4, r3
 800cde4:	4615      	mov	r5, r2
 800cde6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800cde8:	6020      	str	r0, [r4, #0]
 800cdea:	6061      	str	r1, [r4, #4]
 800cdec:	60a2      	str	r2, [r4, #8]
 800cdee:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"6,4,8,9,12,14,17,18");
 800cdf0:	687b      	ldr	r3, [r7, #4]
 800cdf2:	3304      	adds	r3, #4
 800cdf4:	4a27      	ldr	r2, [pc, #156]	; (800ce94 <problem_fetch+0xb7d0>)
 800cdf6:	461d      	mov	r5, r3
 800cdf8:	4614      	mov	r4, r2
 800cdfa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800cdfc:	6028      	str	r0, [r5, #0]
 800cdfe:	6069      	str	r1, [r5, #4]
 800ce00:	60aa      	str	r2, [r5, #8]
 800ce02:	60eb      	str	r3, [r5, #12]
 800ce04:	6820      	ldr	r0, [r4, #0]
 800ce06:	6128      	str	r0, [r5, #16]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,e");
 800ce08:	687b      	ldr	r3, [r7, #4]
 800ce0a:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800ce0e:	4a22      	ldr	r2, [pc, #136]	; (800ce98 <problem_fetch+0xb7d4>)
 800ce10:	461c      	mov	r4, r3
 800ce12:	4615      	mov	r5, r2
 800ce14:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ce16:	6020      	str	r0, [r4, #0]
 800ce18:	6061      	str	r1, [r4, #4]
 800ce1a:	60a2      	str	r2, [r4, #8]
 800ce1c:	60e3      	str	r3, [r4, #12]
			break;
 800ce1e:	f00f bb81 	b.w	801c524 <problem_fetch+0x1ae60>
 800ce22:	bf00      	nop
 800ce24:	08027884 	.word	0x08027884
 800ce28:	08025bb8 	.word	0x08025bb8
 800ce2c:	08027898 	.word	0x08027898
 800ce30:	080278a4 	.word	0x080278a4
 800ce34:	08023bf0 	.word	0x08023bf0
 800ce38:	080278b4 	.word	0x080278b4
 800ce3c:	08023854 	.word	0x08023854
 800ce40:	080278c0 	.word	0x080278c0
 800ce44:	080278cc 	.word	0x080278cc
 800ce48:	080278dc 	.word	0x080278dc
 800ce4c:	08023990 	.word	0x08023990
 800ce50:	080278e8 	.word	0x080278e8
 800ce54:	080278f4 	.word	0x080278f4
 800ce58:	08027904 	.word	0x08027904
 800ce5c:	080239f4 	.word	0x080239f4
 800ce60:	08027910 	.word	0x08027910
 800ce64:	0802791c 	.word	0x0802791c
 800ce68:	0802792c 	.word	0x0802792c
 800ce6c:	08027938 	.word	0x08027938
 800ce70:	08024de4 	.word	0x08024de4
 800ce74:	080239dc 	.word	0x080239dc
 800ce78:	08027948 	.word	0x08027948
 800ce7c:	080238ec 	.word	0x080238ec
 800ce80:	08027958 	.word	0x08027958
 800ce84:	08027964 	.word	0x08027964
 800ce88:	08027974 	.word	0x08027974
 800ce8c:	08023814 	.word	0x08023814
 800ce90:	0802797c 	.word	0x0802797c
 800ce94:	0802798c 	.word	0x0802798c
 800ce98:	08023978 	.word	0x08023978
		case 330 :
			strcpy(p->name,"SLIGHTLY LESS BASIC B*TCH");
 800ce9c:	687b      	ldr	r3, [r7, #4]
 800ce9e:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800cea2:	4aa9      	ldr	r2, [pc, #676]	; (800d148 <problem_fetch+0xba84>)
 800cea4:	461d      	mov	r5, r3
 800cea6:	4614      	mov	r4, r2
 800cea8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800ceaa:	6028      	str	r0, [r5, #0]
 800ceac:	6069      	str	r1, [r5, #4]
 800ceae:	60aa      	str	r2, [r5, #8]
 800ceb0:	60eb      	str	r3, [r5, #12]
 800ceb2:	cc03      	ldmia	r4!, {r0, r1}
 800ceb4:	6128      	str	r0, [r5, #16]
 800ceb6:	6169      	str	r1, [r5, #20]
 800ceb8:	8823      	ldrh	r3, [r4, #0]
 800ceba:	832b      	strh	r3, [r5, #24]
			strcpy(p->grade,"7A+");
 800cebc:	687b      	ldr	r3, [r7, #4]
 800cebe:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800cec2:	4aa2      	ldr	r2, [pc, #648]	; (800d14c <problem_fetch+0xba88>)
 800cec4:	6810      	ldr	r0, [r2, #0]
 800cec6:	6018      	str	r0, [r3, #0]
			p->moveSize = 5;
 800cec8:	687b      	ldr	r3, [r7, #4]
 800ceca:	2205      	movs	r2, #5
 800cecc:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,H,C,G,I");
 800cece:	687b      	ldr	r3, [r7, #4]
 800ced0:	33a4      	adds	r3, #164	; 0xa4
 800ced2:	499f      	ldr	r1, [pc, #636]	; (800d150 <problem_fetch+0xba8c>)
 800ced4:	461a      	mov	r2, r3
 800ced6:	460b      	mov	r3, r1
 800ced8:	cb03      	ldmia	r3!, {r0, r1}
 800ceda:	6010      	str	r0, [r2, #0]
 800cedc:	6051      	str	r1, [r2, #4]
 800cede:	881b      	ldrh	r3, [r3, #0]
 800cee0:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"5,10,13,17,18");
 800cee2:	687b      	ldr	r3, [r7, #4]
 800cee4:	3304      	adds	r3, #4
 800cee6:	4a9b      	ldr	r2, [pc, #620]	; (800d154 <problem_fetch+0xba90>)
 800cee8:	461c      	mov	r4, r3
 800ceea:	4613      	mov	r3, r2
 800ceec:	cb07      	ldmia	r3!, {r0, r1, r2}
 800ceee:	6020      	str	r0, [r4, #0]
 800cef0:	6061      	str	r1, [r4, #4]
 800cef2:	60a2      	str	r2, [r4, #8]
 800cef4:	881b      	ldrh	r3, [r3, #0]
 800cef6:	81a3      	strh	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,e");
 800cef8:	687b      	ldr	r3, [r7, #4]
 800cefa:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800cefe:	4996      	ldr	r1, [pc, #600]	; (800d158 <problem_fetch+0xba94>)
 800cf00:	461a      	mov	r2, r3
 800cf02:	460b      	mov	r3, r1
 800cf04:	cb03      	ldmia	r3!, {r0, r1}
 800cf06:	6010      	str	r0, [r2, #0]
 800cf08:	6051      	str	r1, [r2, #4]
 800cf0a:	881b      	ldrh	r3, [r3, #0]
 800cf0c:	8113      	strh	r3, [r2, #8]
			break;
 800cf0e:	f00f bb09 	b.w	801c524 <problem_fetch+0x1ae60>
		case 331 :
			strcpy(p->name,"BASIC B*TCH");
 800cf12:	687b      	ldr	r3, [r7, #4]
 800cf14:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800cf18:	4a90      	ldr	r2, [pc, #576]	; (800d15c <problem_fetch+0xba98>)
 800cf1a:	461c      	mov	r4, r3
 800cf1c:	4613      	mov	r3, r2
 800cf1e:	cb07      	ldmia	r3!, {r0, r1, r2}
 800cf20:	6020      	str	r0, [r4, #0]
 800cf22:	6061      	str	r1, [r4, #4]
 800cf24:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade,"7A+");
 800cf26:	687b      	ldr	r3, [r7, #4]
 800cf28:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800cf2c:	4a87      	ldr	r2, [pc, #540]	; (800d14c <problem_fetch+0xba88>)
 800cf2e:	6810      	ldr	r0, [r2, #0]
 800cf30:	6018      	str	r0, [r3, #0]
			p->moveSize = 4;
 800cf32:	687b      	ldr	r3, [r7, #4]
 800cf34:	2204      	movs	r2, #4
 800cf36:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,H,C,D");
 800cf38:	687b      	ldr	r3, [r7, #4]
 800cf3a:	33a4      	adds	r3, #164	; 0xa4
 800cf3c:	4988      	ldr	r1, [pc, #544]	; (800d160 <problem_fetch+0xba9c>)
 800cf3e:	461a      	mov	r2, r3
 800cf40:	460b      	mov	r3, r1
 800cf42:	cb03      	ldmia	r3!, {r0, r1}
 800cf44:	6010      	str	r0, [r2, #0]
 800cf46:	6051      	str	r1, [r2, #4]
			strcpy(p->moveNumbers,"5,10,13,18");
 800cf48:	687b      	ldr	r3, [r7, #4]
 800cf4a:	3304      	adds	r3, #4
 800cf4c:	4985      	ldr	r1, [pc, #532]	; (800d164 <problem_fetch+0xbaa0>)
 800cf4e:	461a      	mov	r2, r3
 800cf50:	460b      	mov	r3, r1
 800cf52:	cb03      	ldmia	r3!, {r0, r1}
 800cf54:	6010      	str	r0, [r2, #0]
 800cf56:	6051      	str	r1, [r2, #4]
 800cf58:	8819      	ldrh	r1, [r3, #0]
 800cf5a:	789b      	ldrb	r3, [r3, #2]
 800cf5c:	8111      	strh	r1, [r2, #8]
 800cf5e:	7293      	strb	r3, [r2, #10]
			strcpy(p->startFinish,"s,d,d,e");
 800cf60:	687b      	ldr	r3, [r7, #4]
 800cf62:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800cf66:	4980      	ldr	r1, [pc, #512]	; (800d168 <problem_fetch+0xbaa4>)
 800cf68:	461a      	mov	r2, r3
 800cf6a:	460b      	mov	r3, r1
 800cf6c:	cb03      	ldmia	r3!, {r0, r1}
 800cf6e:	6010      	str	r0, [r2, #0]
 800cf70:	6051      	str	r1, [r2, #4]
			break;
 800cf72:	f00f bad7 	b.w	801c524 <problem_fetch+0x1ae60>
		case 332 :
			strcpy(p->name,"ANY GIVEN DAY");
 800cf76:	687b      	ldr	r3, [r7, #4]
 800cf78:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800cf7c:	4a7b      	ldr	r2, [pc, #492]	; (800d16c <problem_fetch+0xbaa8>)
 800cf7e:	461c      	mov	r4, r3
 800cf80:	4613      	mov	r3, r2
 800cf82:	cb07      	ldmia	r3!, {r0, r1, r2}
 800cf84:	6020      	str	r0, [r4, #0]
 800cf86:	6061      	str	r1, [r4, #4]
 800cf88:	60a2      	str	r2, [r4, #8]
 800cf8a:	881b      	ldrh	r3, [r3, #0]
 800cf8c:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade,"6B+");
 800cf8e:	687b      	ldr	r3, [r7, #4]
 800cf90:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800cf94:	4a76      	ldr	r2, [pc, #472]	; (800d170 <problem_fetch+0xbaac>)
 800cf96:	6810      	ldr	r0, [r2, #0]
 800cf98:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 800cf9a:	687b      	ldr	r3, [r7, #4]
 800cf9c:	2206      	movs	r2, #6
 800cf9e:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,E,H,C,D,D");
 800cfa0:	687b      	ldr	r3, [r7, #4]
 800cfa2:	33a4      	adds	r3, #164	; 0xa4
 800cfa4:	4a73      	ldr	r2, [pc, #460]	; (800d174 <problem_fetch+0xbab0>)
 800cfa6:	461c      	mov	r4, r3
 800cfa8:	4613      	mov	r3, r2
 800cfaa:	cb07      	ldmia	r3!, {r0, r1, r2}
 800cfac:	6020      	str	r0, [r4, #0]
 800cfae:	6061      	str	r1, [r4, #4]
 800cfb0:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,8,10,13,15,18");
 800cfb2:	687b      	ldr	r3, [r7, #4]
 800cfb4:	3304      	adds	r3, #4
 800cfb6:	4a70      	ldr	r2, [pc, #448]	; (800d178 <problem_fetch+0xbab4>)
 800cfb8:	461c      	mov	r4, r3
 800cfba:	4615      	mov	r5, r2
 800cfbc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800cfbe:	6020      	str	r0, [r4, #0]
 800cfc0:	6061      	str	r1, [r4, #4]
 800cfc2:	60a2      	str	r2, [r4, #8]
 800cfc4:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 800cfc6:	687b      	ldr	r3, [r7, #4]
 800cfc8:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800cfcc:	4a6b      	ldr	r2, [pc, #428]	; (800d17c <problem_fetch+0xbab8>)
 800cfce:	461c      	mov	r4, r3
 800cfd0:	4613      	mov	r3, r2
 800cfd2:	cb07      	ldmia	r3!, {r0, r1, r2}
 800cfd4:	6020      	str	r0, [r4, #0]
 800cfd6:	6061      	str	r1, [r4, #4]
 800cfd8:	60a2      	str	r2, [r4, #8]
			break;
 800cfda:	f00f baa3 	b.w	801c524 <problem_fetch+0x1ae60>
		case 333 :
			strcpy(p->name,"GS");
 800cfde:	687b      	ldr	r3, [r7, #4]
 800cfe0:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800cfe4:	4a66      	ldr	r2, [pc, #408]	; (800d180 <problem_fetch+0xbabc>)
 800cfe6:	8811      	ldrh	r1, [r2, #0]
 800cfe8:	7892      	ldrb	r2, [r2, #2]
 800cfea:	8019      	strh	r1, [r3, #0]
 800cfec:	709a      	strb	r2, [r3, #2]
			strcpy(p->grade,"6C");
 800cfee:	687b      	ldr	r3, [r7, #4]
 800cff0:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800cff4:	4a63      	ldr	r2, [pc, #396]	; (800d184 <problem_fetch+0xbac0>)
 800cff6:	8811      	ldrh	r1, [r2, #0]
 800cff8:	7892      	ldrb	r2, [r2, #2]
 800cffa:	8019      	strh	r1, [r3, #0]
 800cffc:	709a      	strb	r2, [r3, #2]
			p->moveSize = 10;
 800cffe:	687b      	ldr	r3, [r7, #4]
 800d000:	220a      	movs	r2, #10
 800d002:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"E,H,H,H,F,C,E,A,E,A");
 800d004:	687b      	ldr	r3, [r7, #4]
 800d006:	33a4      	adds	r3, #164	; 0xa4
 800d008:	4a5f      	ldr	r2, [pc, #380]	; (800d188 <problem_fetch+0xbac4>)
 800d00a:	461d      	mov	r5, r3
 800d00c:	4614      	mov	r4, r2
 800d00e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d010:	6028      	str	r0, [r5, #0]
 800d012:	6069      	str	r1, [r5, #4]
 800d014:	60aa      	str	r2, [r5, #8]
 800d016:	60eb      	str	r3, [r5, #12]
 800d018:	6820      	ldr	r0, [r4, #0]
 800d01a:	6128      	str	r0, [r5, #16]
			strcpy(p->moveNumbers,"6,5,8,10,11,13,14,14,16,18");
 800d01c:	687b      	ldr	r3, [r7, #4]
 800d01e:	3304      	adds	r3, #4
 800d020:	4a5a      	ldr	r2, [pc, #360]	; (800d18c <problem_fetch+0xbac8>)
 800d022:	461d      	mov	r5, r3
 800d024:	4614      	mov	r4, r2
 800d026:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d028:	6028      	str	r0, [r5, #0]
 800d02a:	6069      	str	r1, [r5, #4]
 800d02c:	60aa      	str	r2, [r5, #8]
 800d02e:	60eb      	str	r3, [r5, #12]
 800d030:	cc03      	ldmia	r4!, {r0, r1}
 800d032:	6128      	str	r0, [r5, #16]
 800d034:	6169      	str	r1, [r5, #20]
 800d036:	8823      	ldrh	r3, [r4, #0]
 800d038:	78a2      	ldrb	r2, [r4, #2]
 800d03a:	832b      	strh	r3, [r5, #24]
 800d03c:	4613      	mov	r3, r2
 800d03e:	76ab      	strb	r3, [r5, #26]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,d,d,e");
 800d040:	687b      	ldr	r3, [r7, #4]
 800d042:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800d046:	4a52      	ldr	r2, [pc, #328]	; (800d190 <problem_fetch+0xbacc>)
 800d048:	461d      	mov	r5, r3
 800d04a:	4614      	mov	r4, r2
 800d04c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d04e:	6028      	str	r0, [r5, #0]
 800d050:	6069      	str	r1, [r5, #4]
 800d052:	60aa      	str	r2, [r5, #8]
 800d054:	60eb      	str	r3, [r5, #12]
 800d056:	6820      	ldr	r0, [r4, #0]
 800d058:	6128      	str	r0, [r5, #16]
			break;
 800d05a:	f00f ba63 	b.w	801c524 <problem_fetch+0x1ae60>
		case 334 :
			strcpy(p->name,"VALGULIOUS");
 800d05e:	687b      	ldr	r3, [r7, #4]
 800d060:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800d064:	494b      	ldr	r1, [pc, #300]	; (800d194 <problem_fetch+0xbad0>)
 800d066:	461a      	mov	r2, r3
 800d068:	460b      	mov	r3, r1
 800d06a:	cb03      	ldmia	r3!, {r0, r1}
 800d06c:	6010      	str	r0, [r2, #0]
 800d06e:	6051      	str	r1, [r2, #4]
 800d070:	8819      	ldrh	r1, [r3, #0]
 800d072:	789b      	ldrb	r3, [r3, #2]
 800d074:	8111      	strh	r1, [r2, #8]
 800d076:	7293      	strb	r3, [r2, #10]
			strcpy(p->grade,"7A+");
 800d078:	687b      	ldr	r3, [r7, #4]
 800d07a:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800d07e:	4a33      	ldr	r2, [pc, #204]	; (800d14c <problem_fetch+0xba88>)
 800d080:	6810      	ldr	r0, [r2, #0]
 800d082:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 800d084:	687b      	ldr	r3, [r7, #4]
 800d086:	2207      	movs	r2, #7
 800d088:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"C,C,G,J,J,I,I");
 800d08a:	687b      	ldr	r3, [r7, #4]
 800d08c:	33a4      	adds	r3, #164	; 0xa4
 800d08e:	4a42      	ldr	r2, [pc, #264]	; (800d198 <problem_fetch+0xbad4>)
 800d090:	461c      	mov	r4, r3
 800d092:	4613      	mov	r3, r2
 800d094:	cb07      	ldmia	r3!, {r0, r1, r2}
 800d096:	6020      	str	r0, [r4, #0]
 800d098:	6061      	str	r1, [r4, #4]
 800d09a:	60a2      	str	r2, [r4, #8]
 800d09c:	881b      	ldrh	r3, [r3, #0]
 800d09e:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,8,9,5,12,15,18");
 800d0a0:	687b      	ldr	r3, [r7, #4]
 800d0a2:	3304      	adds	r3, #4
 800d0a4:	4a3d      	ldr	r2, [pc, #244]	; (800d19c <problem_fetch+0xbad8>)
 800d0a6:	461d      	mov	r5, r3
 800d0a8:	4614      	mov	r4, r2
 800d0aa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d0ac:	6028      	str	r0, [r5, #0]
 800d0ae:	6069      	str	r1, [r5, #4]
 800d0b0:	60aa      	str	r2, [r5, #8]
 800d0b2:	60eb      	str	r3, [r5, #12]
 800d0b4:	7823      	ldrb	r3, [r4, #0]
 800d0b6:	742b      	strb	r3, [r5, #16]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 800d0b8:	687b      	ldr	r3, [r7, #4]
 800d0ba:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800d0be:	4a38      	ldr	r2, [pc, #224]	; (800d1a0 <problem_fetch+0xbadc>)
 800d0c0:	461c      	mov	r4, r3
 800d0c2:	4613      	mov	r3, r2
 800d0c4:	cb07      	ldmia	r3!, {r0, r1, r2}
 800d0c6:	6020      	str	r0, [r4, #0]
 800d0c8:	6061      	str	r1, [r4, #4]
 800d0ca:	60a2      	str	r2, [r4, #8]
 800d0cc:	881b      	ldrh	r3, [r3, #0]
 800d0ce:	81a3      	strh	r3, [r4, #12]
			break;
 800d0d0:	f00f ba28 	b.w	801c524 <problem_fetch+0x1ae60>
		case 335 :
			strcpy(p->name,"POWER HUNGRY");
 800d0d4:	687b      	ldr	r3, [r7, #4]
 800d0d6:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800d0da:	4a32      	ldr	r2, [pc, #200]	; (800d1a4 <problem_fetch+0xbae0>)
 800d0dc:	461c      	mov	r4, r3
 800d0de:	4613      	mov	r3, r2
 800d0e0:	cb07      	ldmia	r3!, {r0, r1, r2}
 800d0e2:	6020      	str	r0, [r4, #0]
 800d0e4:	6061      	str	r1, [r4, #4]
 800d0e6:	60a2      	str	r2, [r4, #8]
 800d0e8:	781b      	ldrb	r3, [r3, #0]
 800d0ea:	7323      	strb	r3, [r4, #12]
			strcpy(p->grade,"7C");
 800d0ec:	687b      	ldr	r3, [r7, #4]
 800d0ee:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800d0f2:	4a2d      	ldr	r2, [pc, #180]	; (800d1a8 <problem_fetch+0xbae4>)
 800d0f4:	8811      	ldrh	r1, [r2, #0]
 800d0f6:	7892      	ldrb	r2, [r2, #2]
 800d0f8:	8019      	strh	r1, [r3, #0]
 800d0fa:	709a      	strb	r2, [r3, #2]
			p->moveSize = 6;
 800d0fc:	687b      	ldr	r3, [r7, #4]
 800d0fe:	2206      	movs	r2, #6
 800d100:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"H,G,K,D,I,D");
 800d102:	687b      	ldr	r3, [r7, #4]
 800d104:	33a4      	adds	r3, #164	; 0xa4
 800d106:	4a29      	ldr	r2, [pc, #164]	; (800d1ac <problem_fetch+0xbae8>)
 800d108:	461c      	mov	r4, r3
 800d10a:	4613      	mov	r3, r2
 800d10c:	cb07      	ldmia	r3!, {r0, r1, r2}
 800d10e:	6020      	str	r0, [r4, #0]
 800d110:	6061      	str	r1, [r4, #4]
 800d112:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,4,9,11,14,18");
 800d114:	687b      	ldr	r3, [r7, #4]
 800d116:	3304      	adds	r3, #4
 800d118:	4a25      	ldr	r2, [pc, #148]	; (800d1b0 <problem_fetch+0xbaec>)
 800d11a:	461c      	mov	r4, r3
 800d11c:	4613      	mov	r3, r2
 800d11e:	cb07      	ldmia	r3!, {r0, r1, r2}
 800d120:	6020      	str	r0, [r4, #0]
 800d122:	6061      	str	r1, [r4, #4]
 800d124:	60a2      	str	r2, [r4, #8]
 800d126:	881a      	ldrh	r2, [r3, #0]
 800d128:	789b      	ldrb	r3, [r3, #2]
 800d12a:	81a2      	strh	r2, [r4, #12]
 800d12c:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish,"s,s,d,d,d,e");
 800d12e:	687b      	ldr	r3, [r7, #4]
 800d130:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800d134:	4a1f      	ldr	r2, [pc, #124]	; (800d1b4 <problem_fetch+0xbaf0>)
 800d136:	461c      	mov	r4, r3
 800d138:	4613      	mov	r3, r2
 800d13a:	cb07      	ldmia	r3!, {r0, r1, r2}
 800d13c:	6020      	str	r0, [r4, #0]
 800d13e:	6061      	str	r1, [r4, #4]
 800d140:	60a2      	str	r2, [r4, #8]
			break;
 800d142:	f00f b9ef 	b.w	801c524 <problem_fetch+0x1ae60>
 800d146:	bf00      	nop
 800d148:	080279a0 	.word	0x080279a0
 800d14c:	080239f4 	.word	0x080239f4
 800d150:	080279bc 	.word	0x080279bc
 800d154:	080279c8 	.word	0x080279c8
 800d158:	08023d20 	.word	0x08023d20
 800d15c:	080279d8 	.word	0x080279d8
 800d160:	080279e4 	.word	0x080279e4
 800d164:	080279ec 	.word	0x080279ec
 800d168:	080239a8 	.word	0x080239a8
 800d16c:	080279f8 	.word	0x080279f8
 800d170:	08023854 	.word	0x08023854
 800d174:	08026260 	.word	0x08026260
 800d178:	08027a08 	.word	0x08027a08
 800d17c:	08023bf0 	.word	0x08023bf0
 800d180:	08027a18 	.word	0x08027a18
 800d184:	08023920 	.word	0x08023920
 800d188:	08027a1c 	.word	0x08027a1c
 800d18c:	08027a30 	.word	0x08027a30
 800d190:	080240fc 	.word	0x080240fc
 800d194:	08027a4c 	.word	0x08027a4c
 800d198:	08027a58 	.word	0x08027a58
 800d19c:	08027a68 	.word	0x08027a68
 800d1a0:	080239dc 	.word	0x080239dc
 800d1a4:	08027a7c 	.word	0x08027a7c
 800d1a8:	08024088 	.word	0x08024088
 800d1ac:	08027a8c 	.word	0x08027a8c
 800d1b0:	08027a98 	.word	0x08027a98
 800d1b4:	08023834 	.word	0x08023834
		case 336 :
			strcpy(p->name,"INTERESTING");
 800d1b8:	687b      	ldr	r3, [r7, #4]
 800d1ba:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800d1be:	4aac      	ldr	r2, [pc, #688]	; (800d470 <problem_fetch+0xbdac>)
 800d1c0:	461c      	mov	r4, r3
 800d1c2:	4613      	mov	r3, r2
 800d1c4:	cb07      	ldmia	r3!, {r0, r1, r2}
 800d1c6:	6020      	str	r0, [r4, #0]
 800d1c8:	6061      	str	r1, [r4, #4]
 800d1ca:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade,"6C+");
 800d1cc:	687b      	ldr	r3, [r7, #4]
 800d1ce:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800d1d2:	4aa8      	ldr	r2, [pc, #672]	; (800d474 <problem_fetch+0xbdb0>)
 800d1d4:	6810      	ldr	r0, [r2, #0]
 800d1d6:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 800d1d8:	687b      	ldr	r3, [r7, #4]
 800d1da:	2207      	movs	r2, #7
 800d1dc:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,H,H,G,H,E,I");
 800d1de:	687b      	ldr	r3, [r7, #4]
 800d1e0:	33a4      	adds	r3, #164	; 0xa4
 800d1e2:	4aa5      	ldr	r2, [pc, #660]	; (800d478 <problem_fetch+0xbdb4>)
 800d1e4:	461c      	mov	r4, r3
 800d1e6:	4613      	mov	r3, r2
 800d1e8:	cb07      	ldmia	r3!, {r0, r1, r2}
 800d1ea:	6020      	str	r0, [r4, #0]
 800d1ec:	6061      	str	r1, [r4, #4]
 800d1ee:	60a2      	str	r2, [r4, #8]
 800d1f0:	881b      	ldrh	r3, [r3, #0]
 800d1f2:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,5,8,10,13,16,18");
 800d1f4:	687b      	ldr	r3, [r7, #4]
 800d1f6:	3304      	adds	r3, #4
 800d1f8:	4aa0      	ldr	r2, [pc, #640]	; (800d47c <problem_fetch+0xbdb8>)
 800d1fa:	461d      	mov	r5, r3
 800d1fc:	4614      	mov	r4, r2
 800d1fe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d200:	6028      	str	r0, [r5, #0]
 800d202:	6069      	str	r1, [r5, #4]
 800d204:	60aa      	str	r2, [r5, #8]
 800d206:	60eb      	str	r3, [r5, #12]
 800d208:	8823      	ldrh	r3, [r4, #0]
 800d20a:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,s,d,d,d,d,e");
 800d20c:	687b      	ldr	r3, [r7, #4]
 800d20e:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800d212:	4a9b      	ldr	r2, [pc, #620]	; (800d480 <problem_fetch+0xbdbc>)
 800d214:	461c      	mov	r4, r3
 800d216:	4613      	mov	r3, r2
 800d218:	cb07      	ldmia	r3!, {r0, r1, r2}
 800d21a:	6020      	str	r0, [r4, #0]
 800d21c:	6061      	str	r1, [r4, #4]
 800d21e:	60a2      	str	r2, [r4, #8]
 800d220:	881b      	ldrh	r3, [r3, #0]
 800d222:	81a3      	strh	r3, [r4, #12]
			break;
 800d224:	f00f b97e 	b.w	801c524 <problem_fetch+0x1ae60>
		case 337 :
			strcpy(p->name,"BLACK WINGS");
 800d228:	687b      	ldr	r3, [r7, #4]
 800d22a:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800d22e:	4a95      	ldr	r2, [pc, #596]	; (800d484 <problem_fetch+0xbdc0>)
 800d230:	461c      	mov	r4, r3
 800d232:	4613      	mov	r3, r2
 800d234:	cb07      	ldmia	r3!, {r0, r1, r2}
 800d236:	6020      	str	r0, [r4, #0]
 800d238:	6061      	str	r1, [r4, #4]
 800d23a:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade,"6B+");
 800d23c:	687b      	ldr	r3, [r7, #4]
 800d23e:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800d242:	4a91      	ldr	r2, [pc, #580]	; (800d488 <problem_fetch+0xbdc4>)
 800d244:	6810      	ldr	r0, [r2, #0]
 800d246:	6018      	str	r0, [r3, #0]
			p->moveSize = 9;
 800d248:	687b      	ldr	r3, [r7, #4]
 800d24a:	2209      	movs	r2, #9
 800d24c:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"C,E,D,C,H,C,E,H,I");
 800d24e:	687b      	ldr	r3, [r7, #4]
 800d250:	33a4      	adds	r3, #164	; 0xa4
 800d252:	4a8e      	ldr	r2, [pc, #568]	; (800d48c <problem_fetch+0xbdc8>)
 800d254:	461d      	mov	r5, r3
 800d256:	4614      	mov	r4, r2
 800d258:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d25a:	6028      	str	r0, [r5, #0]
 800d25c:	6069      	str	r1, [r5, #4]
 800d25e:	60aa      	str	r2, [r5, #8]
 800d260:	60eb      	str	r3, [r5, #12]
 800d262:	8823      	ldrh	r3, [r4, #0]
 800d264:	822b      	strh	r3, [r5, #16]
			strcpy(p->moveNumbers,"5,6,15,8,10,13,16,5,18");
 800d266:	687b      	ldr	r3, [r7, #4]
 800d268:	3304      	adds	r3, #4
 800d26a:	4a89      	ldr	r2, [pc, #548]	; (800d490 <problem_fetch+0xbdcc>)
 800d26c:	461c      	mov	r4, r3
 800d26e:	4615      	mov	r5, r2
 800d270:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d272:	6020      	str	r0, [r4, #0]
 800d274:	6061      	str	r1, [r4, #4]
 800d276:	60a2      	str	r2, [r4, #8]
 800d278:	60e3      	str	r3, [r4, #12]
 800d27a:	6828      	ldr	r0, [r5, #0]
 800d27c:	6120      	str	r0, [r4, #16]
 800d27e:	88ab      	ldrh	r3, [r5, #4]
 800d280:	79aa      	ldrb	r2, [r5, #6]
 800d282:	82a3      	strh	r3, [r4, #20]
 800d284:	4613      	mov	r3, r2
 800d286:	75a3      	strb	r3, [r4, #22]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,d,e");
 800d288:	687b      	ldr	r3, [r7, #4]
 800d28a:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800d28e:	4a81      	ldr	r2, [pc, #516]	; (800d494 <problem_fetch+0xbdd0>)
 800d290:	461d      	mov	r5, r3
 800d292:	4614      	mov	r4, r2
 800d294:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d296:	6028      	str	r0, [r5, #0]
 800d298:	6069      	str	r1, [r5, #4]
 800d29a:	60aa      	str	r2, [r5, #8]
 800d29c:	60eb      	str	r3, [r5, #12]
 800d29e:	8823      	ldrh	r3, [r4, #0]
 800d2a0:	822b      	strh	r3, [r5, #16]
			break;
 800d2a2:	f00f b93f 	b.w	801c524 <problem_fetch+0x1ae60>
		case 338 :
			strcpy(p->name,"TVÅ");
 800d2a6:	687b      	ldr	r3, [r7, #4]
 800d2a8:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800d2ac:	4a7a      	ldr	r2, [pc, #488]	; (800d498 <problem_fetch+0xbdd4>)
 800d2ae:	6810      	ldr	r0, [r2, #0]
 800d2b0:	6018      	str	r0, [r3, #0]
 800d2b2:	7912      	ldrb	r2, [r2, #4]
 800d2b4:	711a      	strb	r2, [r3, #4]
			strcpy(p->grade,"6B+");
 800d2b6:	687b      	ldr	r3, [r7, #4]
 800d2b8:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800d2bc:	4a72      	ldr	r2, [pc, #456]	; (800d488 <problem_fetch+0xbdc4>)
 800d2be:	6810      	ldr	r0, [r2, #0]
 800d2c0:	6018      	str	r0, [r3, #0]
			p->moveSize = 8;
 800d2c2:	687b      	ldr	r3, [r7, #4]
 800d2c4:	2208      	movs	r2, #8
 800d2c6:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,H,H,E,E,G,D,D");
 800d2c8:	687b      	ldr	r3, [r7, #4]
 800d2ca:	33a4      	adds	r3, #164	; 0xa4
 800d2cc:	4a73      	ldr	r2, [pc, #460]	; (800d49c <problem_fetch+0xbdd8>)
 800d2ce:	461c      	mov	r4, r3
 800d2d0:	4615      	mov	r5, r2
 800d2d2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d2d4:	6020      	str	r0, [r4, #0]
 800d2d6:	6061      	str	r1, [r4, #4]
 800d2d8:	60a2      	str	r2, [r4, #8]
 800d2da:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,10,8,8,12,14,15,18");
 800d2dc:	687b      	ldr	r3, [r7, #4]
 800d2de:	3304      	adds	r3, #4
 800d2e0:	4a6f      	ldr	r2, [pc, #444]	; (800d4a0 <problem_fetch+0xbddc>)
 800d2e2:	461d      	mov	r5, r3
 800d2e4:	4614      	mov	r4, r2
 800d2e6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d2e8:	6028      	str	r0, [r5, #0]
 800d2ea:	6069      	str	r1, [r5, #4]
 800d2ec:	60aa      	str	r2, [r5, #8]
 800d2ee:	60eb      	str	r3, [r5, #12]
 800d2f0:	6820      	ldr	r0, [r4, #0]
 800d2f2:	6128      	str	r0, [r5, #16]
 800d2f4:	7923      	ldrb	r3, [r4, #4]
 800d2f6:	752b      	strb	r3, [r5, #20]
			strcpy(p->startFinish,"s,d,d,d,d,d,d,e");
 800d2f8:	687b      	ldr	r3, [r7, #4]
 800d2fa:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800d2fe:	4a69      	ldr	r2, [pc, #420]	; (800d4a4 <problem_fetch+0xbde0>)
 800d300:	461c      	mov	r4, r3
 800d302:	4615      	mov	r5, r2
 800d304:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d306:	6020      	str	r0, [r4, #0]
 800d308:	6061      	str	r1, [r4, #4]
 800d30a:	60a2      	str	r2, [r4, #8]
 800d30c:	60e3      	str	r3, [r4, #12]
			break;
 800d30e:	f00f b909 	b.w	801c524 <problem_fetch+0x1ae60>
		case 339 :
			strcpy(p->name,"HIGH STEP IF YOU CAN");
 800d312:	687b      	ldr	r3, [r7, #4]
 800d314:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800d318:	4a63      	ldr	r2, [pc, #396]	; (800d4a8 <problem_fetch+0xbde4>)
 800d31a:	461d      	mov	r5, r3
 800d31c:	4614      	mov	r4, r2
 800d31e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d320:	6028      	str	r0, [r5, #0]
 800d322:	6069      	str	r1, [r5, #4]
 800d324:	60aa      	str	r2, [r5, #8]
 800d326:	60eb      	str	r3, [r5, #12]
 800d328:	6820      	ldr	r0, [r4, #0]
 800d32a:	6128      	str	r0, [r5, #16]
 800d32c:	7923      	ldrb	r3, [r4, #4]
 800d32e:	752b      	strb	r3, [r5, #20]
			strcpy(p->grade,"6B+");
 800d330:	687b      	ldr	r3, [r7, #4]
 800d332:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800d336:	4a54      	ldr	r2, [pc, #336]	; (800d488 <problem_fetch+0xbdc4>)
 800d338:	6810      	ldr	r0, [r2, #0]
 800d33a:	6018      	str	r0, [r3, #0]
			p->moveSize = 8;
 800d33c:	687b      	ldr	r3, [r7, #4]
 800d33e:	2208      	movs	r2, #8
 800d340:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,J,B,E,E,B,E,D");
 800d342:	687b      	ldr	r3, [r7, #4]
 800d344:	33a4      	adds	r3, #164	; 0xa4
 800d346:	4a59      	ldr	r2, [pc, #356]	; (800d4ac <problem_fetch+0xbde8>)
 800d348:	461c      	mov	r4, r3
 800d34a:	4615      	mov	r5, r2
 800d34c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d34e:	6020      	str	r0, [r4, #0]
 800d350:	6061      	str	r1, [r4, #4]
 800d352:	60a2      	str	r2, [r4, #8]
 800d354:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,5,10,8,12,15,6,18");
 800d356:	687b      	ldr	r3, [r7, #4]
 800d358:	3304      	adds	r3, #4
 800d35a:	4a55      	ldr	r2, [pc, #340]	; (800d4b0 <problem_fetch+0xbdec>)
 800d35c:	461d      	mov	r5, r3
 800d35e:	4614      	mov	r4, r2
 800d360:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d362:	6028      	str	r0, [r5, #0]
 800d364:	6069      	str	r1, [r5, #4]
 800d366:	60aa      	str	r2, [r5, #8]
 800d368:	60eb      	str	r3, [r5, #12]
 800d36a:	6820      	ldr	r0, [r4, #0]
 800d36c:	6128      	str	r0, [r5, #16]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,e");
 800d36e:	687b      	ldr	r3, [r7, #4]
 800d370:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800d374:	4a4f      	ldr	r2, [pc, #316]	; (800d4b4 <problem_fetch+0xbdf0>)
 800d376:	461c      	mov	r4, r3
 800d378:	4615      	mov	r5, r2
 800d37a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d37c:	6020      	str	r0, [r4, #0]
 800d37e:	6061      	str	r1, [r4, #4]
 800d380:	60a2      	str	r2, [r4, #8]
 800d382:	60e3      	str	r3, [r4, #12]
			break;
 800d384:	f00f b8ce 	b.w	801c524 <problem_fetch+0x1ae60>
		case 340 :
			strcpy(p->name,"APPLE PIE");
 800d388:	687b      	ldr	r3, [r7, #4]
 800d38a:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800d38e:	494a      	ldr	r1, [pc, #296]	; (800d4b8 <problem_fetch+0xbdf4>)
 800d390:	461a      	mov	r2, r3
 800d392:	460b      	mov	r3, r1
 800d394:	cb03      	ldmia	r3!, {r0, r1}
 800d396:	6010      	str	r0, [r2, #0]
 800d398:	6051      	str	r1, [r2, #4]
 800d39a:	881b      	ldrh	r3, [r3, #0]
 800d39c:	8113      	strh	r3, [r2, #8]
			strcpy(p->grade,"7A");
 800d39e:	687b      	ldr	r3, [r7, #4]
 800d3a0:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800d3a4:	4a45      	ldr	r2, [pc, #276]	; (800d4bc <problem_fetch+0xbdf8>)
 800d3a6:	8811      	ldrh	r1, [r2, #0]
 800d3a8:	7892      	ldrb	r2, [r2, #2]
 800d3aa:	8019      	strh	r1, [r3, #0]
 800d3ac:	709a      	strb	r2, [r3, #2]
			p->moveSize = 6;
 800d3ae:	687b      	ldr	r3, [r7, #4]
 800d3b0:	2206      	movs	r2, #6
 800d3b2:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,E,I,F,J,I");
 800d3b4:	687b      	ldr	r3, [r7, #4]
 800d3b6:	33a4      	adds	r3, #164	; 0xa4
 800d3b8:	4a41      	ldr	r2, [pc, #260]	; (800d4c0 <problem_fetch+0xbdfc>)
 800d3ba:	461c      	mov	r4, r3
 800d3bc:	4613      	mov	r3, r2
 800d3be:	cb07      	ldmia	r3!, {r0, r1, r2}
 800d3c0:	6020      	str	r0, [r4, #0]
 800d3c2:	6061      	str	r1, [r4, #4]
 800d3c4:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,8,10,13,16,18");
 800d3c6:	687b      	ldr	r3, [r7, #4]
 800d3c8:	3304      	adds	r3, #4
 800d3ca:	4a3e      	ldr	r2, [pc, #248]	; (800d4c4 <problem_fetch+0xbe00>)
 800d3cc:	461c      	mov	r4, r3
 800d3ce:	4615      	mov	r5, r2
 800d3d0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d3d2:	6020      	str	r0, [r4, #0]
 800d3d4:	6061      	str	r1, [r4, #4]
 800d3d6:	60a2      	str	r2, [r4, #8]
 800d3d8:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 800d3da:	687b      	ldr	r3, [r7, #4]
 800d3dc:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800d3e0:	4a39      	ldr	r2, [pc, #228]	; (800d4c8 <problem_fetch+0xbe04>)
 800d3e2:	461c      	mov	r4, r3
 800d3e4:	4613      	mov	r3, r2
 800d3e6:	cb07      	ldmia	r3!, {r0, r1, r2}
 800d3e8:	6020      	str	r0, [r4, #0]
 800d3ea:	6061      	str	r1, [r4, #4]
 800d3ec:	60a2      	str	r2, [r4, #8]
			break;
 800d3ee:	f00f b899 	b.w	801c524 <problem_fetch+0x1ae60>
		case 341 :
			strcpy(p->name,"NOT A FIRSTIMER");
 800d3f2:	687b      	ldr	r3, [r7, #4]
 800d3f4:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800d3f8:	4a34      	ldr	r2, [pc, #208]	; (800d4cc <problem_fetch+0xbe08>)
 800d3fa:	461c      	mov	r4, r3
 800d3fc:	4615      	mov	r5, r2
 800d3fe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d400:	6020      	str	r0, [r4, #0]
 800d402:	6061      	str	r1, [r4, #4]
 800d404:	60a2      	str	r2, [r4, #8]
 800d406:	60e3      	str	r3, [r4, #12]
			strcpy(p->grade,"6B+");
 800d408:	687b      	ldr	r3, [r7, #4]
 800d40a:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800d40e:	4a1e      	ldr	r2, [pc, #120]	; (800d488 <problem_fetch+0xbdc4>)
 800d410:	6810      	ldr	r0, [r2, #0]
 800d412:	6018      	str	r0, [r3, #0]
			p->moveSize = 10;
 800d414:	687b      	ldr	r3, [r7, #4]
 800d416:	220a      	movs	r2, #10
 800d418:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,E,H,E,C,I,G,G,J,I");
 800d41a:	687b      	ldr	r3, [r7, #4]
 800d41c:	33a4      	adds	r3, #164	; 0xa4
 800d41e:	4a2c      	ldr	r2, [pc, #176]	; (800d4d0 <problem_fetch+0xbe0c>)
 800d420:	461d      	mov	r5, r3
 800d422:	4614      	mov	r4, r2
 800d424:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d426:	6028      	str	r0, [r5, #0]
 800d428:	6069      	str	r1, [r5, #4]
 800d42a:	60aa      	str	r2, [r5, #8]
 800d42c:	60eb      	str	r3, [r5, #12]
 800d42e:	6820      	ldr	r0, [r4, #0]
 800d430:	6128      	str	r0, [r5, #16]
			strcpy(p->moveNumbers,"5,6,10,8,13,14,15,17,7,18");
 800d432:	687b      	ldr	r3, [r7, #4]
 800d434:	3304      	adds	r3, #4
 800d436:	4a27      	ldr	r2, [pc, #156]	; (800d4d4 <problem_fetch+0xbe10>)
 800d438:	461d      	mov	r5, r3
 800d43a:	4614      	mov	r4, r2
 800d43c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d43e:	6028      	str	r0, [r5, #0]
 800d440:	6069      	str	r1, [r5, #4]
 800d442:	60aa      	str	r2, [r5, #8]
 800d444:	60eb      	str	r3, [r5, #12]
 800d446:	cc03      	ldmia	r4!, {r0, r1}
 800d448:	6128      	str	r0, [r5, #16]
 800d44a:	6169      	str	r1, [r5, #20]
 800d44c:	8823      	ldrh	r3, [r4, #0]
 800d44e:	832b      	strh	r3, [r5, #24]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,d,d,e");
 800d450:	687b      	ldr	r3, [r7, #4]
 800d452:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800d456:	4a20      	ldr	r2, [pc, #128]	; (800d4d8 <problem_fetch+0xbe14>)
 800d458:	461d      	mov	r5, r3
 800d45a:	4614      	mov	r4, r2
 800d45c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d45e:	6028      	str	r0, [r5, #0]
 800d460:	6069      	str	r1, [r5, #4]
 800d462:	60aa      	str	r2, [r5, #8]
 800d464:	60eb      	str	r3, [r5, #12]
 800d466:	6820      	ldr	r0, [r4, #0]
 800d468:	6128      	str	r0, [r5, #16]
			break;
 800d46a:	f00f b85b 	b.w	801c524 <problem_fetch+0x1ae60>
 800d46e:	bf00      	nop
 800d470:	08027aa8 	.word	0x08027aa8
 800d474:	080238ec 	.word	0x080238ec
 800d478:	08027ab4 	.word	0x08027ab4
 800d47c:	08027ac4 	.word	0x08027ac4
 800d480:	080238cc 	.word	0x080238cc
 800d484:	08027ad8 	.word	0x08027ad8
 800d488:	08023854 	.word	0x08023854
 800d48c:	08027ae4 	.word	0x08027ae4
 800d490:	08027af8 	.word	0x08027af8
 800d494:	08024838 	.word	0x08024838
 800d498:	08027b10 	.word	0x08027b10
 800d49c:	08027b18 	.word	0x08027b18
 800d4a0:	08027b28 	.word	0x08027b28
 800d4a4:	08023a64 	.word	0x08023a64
 800d4a8:	08027b40 	.word	0x08027b40
 800d4ac:	08027b58 	.word	0x08027b58
 800d4b0:	08027b68 	.word	0x08027b68
 800d4b4:	08023978 	.word	0x08023978
 800d4b8:	08027b7c 	.word	0x08027b7c
 800d4bc:	08023814 	.word	0x08023814
 800d4c0:	08027b88 	.word	0x08027b88
 800d4c4:	08025f28 	.word	0x08025f28
 800d4c8:	08023bf0 	.word	0x08023bf0
 800d4cc:	08027b94 	.word	0x08027b94
 800d4d0:	08027ba4 	.word	0x08027ba4
 800d4d4:	08027bb8 	.word	0x08027bb8
 800d4d8:	080240fc 	.word	0x080240fc
		case 342 :
			strcpy(p->name,"PICTURES ON MY PHONE");
 800d4dc:	687b      	ldr	r3, [r7, #4]
 800d4de:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800d4e2:	4aa9      	ldr	r2, [pc, #676]	; (800d788 <problem_fetch+0xc0c4>)
 800d4e4:	461d      	mov	r5, r3
 800d4e6:	4614      	mov	r4, r2
 800d4e8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d4ea:	6028      	str	r0, [r5, #0]
 800d4ec:	6069      	str	r1, [r5, #4]
 800d4ee:	60aa      	str	r2, [r5, #8]
 800d4f0:	60eb      	str	r3, [r5, #12]
 800d4f2:	6820      	ldr	r0, [r4, #0]
 800d4f4:	6128      	str	r0, [r5, #16]
 800d4f6:	7923      	ldrb	r3, [r4, #4]
 800d4f8:	752b      	strb	r3, [r5, #20]
			strcpy(p->grade,"6B+");
 800d4fa:	687b      	ldr	r3, [r7, #4]
 800d4fc:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800d500:	4aa2      	ldr	r2, [pc, #648]	; (800d78c <problem_fetch+0xc0c8>)
 800d502:	6810      	ldr	r0, [r2, #0]
 800d504:	6018      	str	r0, [r3, #0]
			p->moveSize = 8;
 800d506:	687b      	ldr	r3, [r7, #4]
 800d508:	2208      	movs	r2, #8
 800d50a:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,H,E,H,C,I,G,I");
 800d50c:	687b      	ldr	r3, [r7, #4]
 800d50e:	33a4      	adds	r3, #164	; 0xa4
 800d510:	4a9f      	ldr	r2, [pc, #636]	; (800d790 <problem_fetch+0xc0cc>)
 800d512:	461c      	mov	r4, r3
 800d514:	4615      	mov	r5, r2
 800d516:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d518:	6020      	str	r0, [r4, #0]
 800d51a:	6061      	str	r1, [r4, #4]
 800d51c:	60a2      	str	r2, [r4, #8]
 800d51e:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,5,8,10,13,14,17,18");
 800d520:	687b      	ldr	r3, [r7, #4]
 800d522:	3304      	adds	r3, #4
 800d524:	4a9b      	ldr	r2, [pc, #620]	; (800d794 <problem_fetch+0xc0d0>)
 800d526:	461d      	mov	r5, r3
 800d528:	4614      	mov	r4, r2
 800d52a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d52c:	6028      	str	r0, [r5, #0]
 800d52e:	6069      	str	r1, [r5, #4]
 800d530:	60aa      	str	r2, [r5, #8]
 800d532:	60eb      	str	r3, [r5, #12]
 800d534:	6820      	ldr	r0, [r4, #0]
 800d536:	6128      	str	r0, [r5, #16]
 800d538:	7923      	ldrb	r3, [r4, #4]
 800d53a:	752b      	strb	r3, [r5, #20]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,e");
 800d53c:	687b      	ldr	r3, [r7, #4]
 800d53e:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800d542:	4a95      	ldr	r2, [pc, #596]	; (800d798 <problem_fetch+0xc0d4>)
 800d544:	461c      	mov	r4, r3
 800d546:	4615      	mov	r5, r2
 800d548:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d54a:	6020      	str	r0, [r4, #0]
 800d54c:	6061      	str	r1, [r4, #4]
 800d54e:	60a2      	str	r2, [r4, #8]
 800d550:	60e3      	str	r3, [r4, #12]
			break;
 800d552:	f00e bfe7 	b.w	801c524 <problem_fetch+0x1ae60>
		case 343 :
			strcpy(p->name,"ONE CRIMP");
 800d556:	687b      	ldr	r3, [r7, #4]
 800d558:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800d55c:	498f      	ldr	r1, [pc, #572]	; (800d79c <problem_fetch+0xc0d8>)
 800d55e:	461a      	mov	r2, r3
 800d560:	460b      	mov	r3, r1
 800d562:	cb03      	ldmia	r3!, {r0, r1}
 800d564:	6010      	str	r0, [r2, #0]
 800d566:	6051      	str	r1, [r2, #4]
 800d568:	881b      	ldrh	r3, [r3, #0]
 800d56a:	8113      	strh	r3, [r2, #8]
			strcpy(p->grade,"7A+");
 800d56c:	687b      	ldr	r3, [r7, #4]
 800d56e:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800d572:	4a8b      	ldr	r2, [pc, #556]	; (800d7a0 <problem_fetch+0xc0dc>)
 800d574:	6810      	ldr	r0, [r2, #0]
 800d576:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 800d578:	687b      	ldr	r3, [r7, #4]
 800d57a:	2207      	movs	r2, #7
 800d57c:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,H,I,H,G,D,D");
 800d57e:	687b      	ldr	r3, [r7, #4]
 800d580:	33a4      	adds	r3, #164	; 0xa4
 800d582:	4a88      	ldr	r2, [pc, #544]	; (800d7a4 <problem_fetch+0xc0e0>)
 800d584:	461c      	mov	r4, r3
 800d586:	4613      	mov	r3, r2
 800d588:	cb07      	ldmia	r3!, {r0, r1, r2}
 800d58a:	6020      	str	r0, [r4, #0]
 800d58c:	6061      	str	r1, [r4, #4]
 800d58e:	60a2      	str	r2, [r4, #8]
 800d590:	881b      	ldrh	r3, [r3, #0]
 800d592:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,8,9,12,15,15,18");
 800d594:	687b      	ldr	r3, [r7, #4]
 800d596:	3304      	adds	r3, #4
 800d598:	4a83      	ldr	r2, [pc, #524]	; (800d7a8 <problem_fetch+0xc0e4>)
 800d59a:	461d      	mov	r5, r3
 800d59c:	4614      	mov	r4, r2
 800d59e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d5a0:	6028      	str	r0, [r5, #0]
 800d5a2:	6069      	str	r1, [r5, #4]
 800d5a4:	60aa      	str	r2, [r5, #8]
 800d5a6:	60eb      	str	r3, [r5, #12]
 800d5a8:	8823      	ldrh	r3, [r4, #0]
 800d5aa:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 800d5ac:	687b      	ldr	r3, [r7, #4]
 800d5ae:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800d5b2:	4a7e      	ldr	r2, [pc, #504]	; (800d7ac <problem_fetch+0xc0e8>)
 800d5b4:	461c      	mov	r4, r3
 800d5b6:	4613      	mov	r3, r2
 800d5b8:	cb07      	ldmia	r3!, {r0, r1, r2}
 800d5ba:	6020      	str	r0, [r4, #0]
 800d5bc:	6061      	str	r1, [r4, #4]
 800d5be:	60a2      	str	r2, [r4, #8]
 800d5c0:	881b      	ldrh	r3, [r3, #0]
 800d5c2:	81a3      	strh	r3, [r4, #12]
			break;
 800d5c4:	f00e bfae 	b.w	801c524 <problem_fetch+0x1ae60>
		case 344 :
			strcpy(p->name,"GHASTLY");
 800d5c8:	687b      	ldr	r3, [r7, #4]
 800d5ca:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800d5ce:	4978      	ldr	r1, [pc, #480]	; (800d7b0 <problem_fetch+0xc0ec>)
 800d5d0:	461a      	mov	r2, r3
 800d5d2:	460b      	mov	r3, r1
 800d5d4:	cb03      	ldmia	r3!, {r0, r1}
 800d5d6:	6010      	str	r0, [r2, #0]
 800d5d8:	6051      	str	r1, [r2, #4]
			strcpy(p->grade,"7A");
 800d5da:	687b      	ldr	r3, [r7, #4]
 800d5dc:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800d5e0:	4a74      	ldr	r2, [pc, #464]	; (800d7b4 <problem_fetch+0xc0f0>)
 800d5e2:	8811      	ldrh	r1, [r2, #0]
 800d5e4:	7892      	ldrb	r2, [r2, #2]
 800d5e6:	8019      	strh	r1, [r3, #0]
 800d5e8:	709a      	strb	r2, [r3, #2]
			p->moveSize = 8;
 800d5ea:	687b      	ldr	r3, [r7, #4]
 800d5ec:	2208      	movs	r2, #8
 800d5ee:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,H,K,J,K,E,G,D");
 800d5f0:	687b      	ldr	r3, [r7, #4]
 800d5f2:	33a4      	adds	r3, #164	; 0xa4
 800d5f4:	4a70      	ldr	r2, [pc, #448]	; (800d7b8 <problem_fetch+0xc0f4>)
 800d5f6:	461c      	mov	r4, r3
 800d5f8:	4615      	mov	r5, r2
 800d5fa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d5fc:	6020      	str	r0, [r4, #0]
 800d5fe:	6061      	str	r1, [r4, #4]
 800d600:	60a2      	str	r2, [r4, #8]
 800d602:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"6,5,9,12,14,14,17,18");
 800d604:	687b      	ldr	r3, [r7, #4]
 800d606:	3304      	adds	r3, #4
 800d608:	4a6c      	ldr	r2, [pc, #432]	; (800d7bc <problem_fetch+0xc0f8>)
 800d60a:	461d      	mov	r5, r3
 800d60c:	4614      	mov	r4, r2
 800d60e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d610:	6028      	str	r0, [r5, #0]
 800d612:	6069      	str	r1, [r5, #4]
 800d614:	60aa      	str	r2, [r5, #8]
 800d616:	60eb      	str	r3, [r5, #12]
 800d618:	6820      	ldr	r0, [r4, #0]
 800d61a:	6128      	str	r0, [r5, #16]
 800d61c:	7923      	ldrb	r3, [r4, #4]
 800d61e:	752b      	strb	r3, [r5, #20]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,e");
 800d620:	687b      	ldr	r3, [r7, #4]
 800d622:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800d626:	4a5c      	ldr	r2, [pc, #368]	; (800d798 <problem_fetch+0xc0d4>)
 800d628:	461c      	mov	r4, r3
 800d62a:	4615      	mov	r5, r2
 800d62c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d62e:	6020      	str	r0, [r4, #0]
 800d630:	6061      	str	r1, [r4, #4]
 800d632:	60a2      	str	r2, [r4, #8]
 800d634:	60e3      	str	r3, [r4, #12]
			break;
 800d636:	f00e bf75 	b.w	801c524 <problem_fetch+0x1ae60>
		case 345 :
			strcpy(p->name,"ELECTRIC HEEL");
 800d63a:	687b      	ldr	r3, [r7, #4]
 800d63c:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800d640:	4a5f      	ldr	r2, [pc, #380]	; (800d7c0 <problem_fetch+0xc0fc>)
 800d642:	461c      	mov	r4, r3
 800d644:	4613      	mov	r3, r2
 800d646:	cb07      	ldmia	r3!, {r0, r1, r2}
 800d648:	6020      	str	r0, [r4, #0]
 800d64a:	6061      	str	r1, [r4, #4]
 800d64c:	60a2      	str	r2, [r4, #8]
 800d64e:	881b      	ldrh	r3, [r3, #0]
 800d650:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade,"7A");
 800d652:	687b      	ldr	r3, [r7, #4]
 800d654:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800d658:	4a56      	ldr	r2, [pc, #344]	; (800d7b4 <problem_fetch+0xc0f0>)
 800d65a:	8811      	ldrh	r1, [r2, #0]
 800d65c:	7892      	ldrb	r2, [r2, #2]
 800d65e:	8019      	strh	r1, [r3, #0]
 800d660:	709a      	strb	r2, [r3, #2]
			p->moveSize = 6;
 800d662:	687b      	ldr	r3, [r7, #4]
 800d664:	2206      	movs	r2, #6
 800d666:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,H,G,E,C,D");
 800d668:	687b      	ldr	r3, [r7, #4]
 800d66a:	33a4      	adds	r3, #164	; 0xa4
 800d66c:	4a55      	ldr	r2, [pc, #340]	; (800d7c4 <problem_fetch+0xc100>)
 800d66e:	461c      	mov	r4, r3
 800d670:	4613      	mov	r3, r2
 800d672:	cb07      	ldmia	r3!, {r0, r1, r2}
 800d674:	6020      	str	r0, [r4, #0]
 800d676:	6061      	str	r1, [r4, #4]
 800d678:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,8,9,12,13,18");
 800d67a:	687b      	ldr	r3, [r7, #4]
 800d67c:	3304      	adds	r3, #4
 800d67e:	4a52      	ldr	r2, [pc, #328]	; (800d7c8 <problem_fetch+0xc104>)
 800d680:	461c      	mov	r4, r3
 800d682:	4613      	mov	r3, r2
 800d684:	cb07      	ldmia	r3!, {r0, r1, r2}
 800d686:	6020      	str	r0, [r4, #0]
 800d688:	6061      	str	r1, [r4, #4]
 800d68a:	60a2      	str	r2, [r4, #8]
 800d68c:	881a      	ldrh	r2, [r3, #0]
 800d68e:	789b      	ldrb	r3, [r3, #2]
 800d690:	81a2      	strh	r2, [r4, #12]
 800d692:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 800d694:	687b      	ldr	r3, [r7, #4]
 800d696:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800d69a:	4a4c      	ldr	r2, [pc, #304]	; (800d7cc <problem_fetch+0xc108>)
 800d69c:	461c      	mov	r4, r3
 800d69e:	4613      	mov	r3, r2
 800d6a0:	cb07      	ldmia	r3!, {r0, r1, r2}
 800d6a2:	6020      	str	r0, [r4, #0]
 800d6a4:	6061      	str	r1, [r4, #4]
 800d6a6:	60a2      	str	r2, [r4, #8]
			break;
 800d6a8:	f00e bf3c 	b.w	801c524 <problem_fetch+0x1ae60>
		case 346 :
			strcpy(p->name,"WIND BENEATH MY WINGS");
 800d6ac:	687b      	ldr	r3, [r7, #4]
 800d6ae:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800d6b2:	4a47      	ldr	r2, [pc, #284]	; (800d7d0 <problem_fetch+0xc10c>)
 800d6b4:	461d      	mov	r5, r3
 800d6b6:	4614      	mov	r4, r2
 800d6b8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d6ba:	6028      	str	r0, [r5, #0]
 800d6bc:	6069      	str	r1, [r5, #4]
 800d6be:	60aa      	str	r2, [r5, #8]
 800d6c0:	60eb      	str	r3, [r5, #12]
 800d6c2:	6820      	ldr	r0, [r4, #0]
 800d6c4:	6128      	str	r0, [r5, #16]
 800d6c6:	88a3      	ldrh	r3, [r4, #4]
 800d6c8:	82ab      	strh	r3, [r5, #20]
			strcpy(p->grade,"7C");
 800d6ca:	687b      	ldr	r3, [r7, #4]
 800d6cc:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800d6d0:	4a40      	ldr	r2, [pc, #256]	; (800d7d4 <problem_fetch+0xc110>)
 800d6d2:	8811      	ldrh	r1, [r2, #0]
 800d6d4:	7892      	ldrb	r2, [r2, #2]
 800d6d6:	8019      	strh	r1, [r3, #0]
 800d6d8:	709a      	strb	r2, [r3, #2]
			p->moveSize = 4;
 800d6da:	687b      	ldr	r3, [r7, #4]
 800d6dc:	2204      	movs	r2, #4
 800d6de:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,I,G,D");
 800d6e0:	687b      	ldr	r3, [r7, #4]
 800d6e2:	33a4      	adds	r3, #164	; 0xa4
 800d6e4:	493c      	ldr	r1, [pc, #240]	; (800d7d8 <problem_fetch+0xc114>)
 800d6e6:	461a      	mov	r2, r3
 800d6e8:	460b      	mov	r3, r1
 800d6ea:	cb03      	ldmia	r3!, {r0, r1}
 800d6ec:	6010      	str	r0, [r2, #0]
 800d6ee:	6051      	str	r1, [r2, #4]
			strcpy(p->moveNumbers,"5,9,14,18");
 800d6f0:	687b      	ldr	r3, [r7, #4]
 800d6f2:	3304      	adds	r3, #4
 800d6f4:	4939      	ldr	r1, [pc, #228]	; (800d7dc <problem_fetch+0xc118>)
 800d6f6:	461a      	mov	r2, r3
 800d6f8:	460b      	mov	r3, r1
 800d6fa:	cb03      	ldmia	r3!, {r0, r1}
 800d6fc:	6010      	str	r0, [r2, #0]
 800d6fe:	6051      	str	r1, [r2, #4]
 800d700:	881b      	ldrh	r3, [r3, #0]
 800d702:	8113      	strh	r3, [r2, #8]
			strcpy(p->startFinish,"s,d,d,e");
 800d704:	687b      	ldr	r3, [r7, #4]
 800d706:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800d70a:	4935      	ldr	r1, [pc, #212]	; (800d7e0 <problem_fetch+0xc11c>)
 800d70c:	461a      	mov	r2, r3
 800d70e:	460b      	mov	r3, r1
 800d710:	cb03      	ldmia	r3!, {r0, r1}
 800d712:	6010      	str	r0, [r2, #0]
 800d714:	6051      	str	r1, [r2, #4]
			break;
 800d716:	f00e bf05 	b.w	801c524 <problem_fetch+0x1ae60>
		case 347 :
			strcpy(p->name,"TAKEOFF");
 800d71a:	687b      	ldr	r3, [r7, #4]
 800d71c:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800d720:	4930      	ldr	r1, [pc, #192]	; (800d7e4 <problem_fetch+0xc120>)
 800d722:	461a      	mov	r2, r3
 800d724:	460b      	mov	r3, r1
 800d726:	cb03      	ldmia	r3!, {r0, r1}
 800d728:	6010      	str	r0, [r2, #0]
 800d72a:	6051      	str	r1, [r2, #4]
			strcpy(p->grade,"7A");
 800d72c:	687b      	ldr	r3, [r7, #4]
 800d72e:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800d732:	4a20      	ldr	r2, [pc, #128]	; (800d7b4 <problem_fetch+0xc0f0>)
 800d734:	8811      	ldrh	r1, [r2, #0]
 800d736:	7892      	ldrb	r2, [r2, #2]
 800d738:	8019      	strh	r1, [r3, #0]
 800d73a:	709a      	strb	r2, [r3, #2]
			p->moveSize = 5;
 800d73c:	687b      	ldr	r3, [r7, #4]
 800d73e:	2205      	movs	r2, #5
 800d740:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,H,H,G,I");
 800d742:	687b      	ldr	r3, [r7, #4]
 800d744:	33a4      	adds	r3, #164	; 0xa4
 800d746:	4928      	ldr	r1, [pc, #160]	; (800d7e8 <problem_fetch+0xc124>)
 800d748:	461a      	mov	r2, r3
 800d74a:	460b      	mov	r3, r1
 800d74c:	cb03      	ldmia	r3!, {r0, r1}
 800d74e:	6010      	str	r0, [r2, #0]
 800d750:	6051      	str	r1, [r2, #4]
 800d752:	881b      	ldrh	r3, [r3, #0]
 800d754:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"5,5,10,14,18");
 800d756:	687b      	ldr	r3, [r7, #4]
 800d758:	3304      	adds	r3, #4
 800d75a:	4a24      	ldr	r2, [pc, #144]	; (800d7ec <problem_fetch+0xc128>)
 800d75c:	461c      	mov	r4, r3
 800d75e:	4613      	mov	r3, r2
 800d760:	cb07      	ldmia	r3!, {r0, r1, r2}
 800d762:	6020      	str	r0, [r4, #0]
 800d764:	6061      	str	r1, [r4, #4]
 800d766:	60a2      	str	r2, [r4, #8]
 800d768:	781b      	ldrb	r3, [r3, #0]
 800d76a:	7323      	strb	r3, [r4, #12]
			strcpy(p->startFinish,"s,s,d,d,e");
 800d76c:	687b      	ldr	r3, [r7, #4]
 800d76e:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800d772:	491f      	ldr	r1, [pc, #124]	; (800d7f0 <problem_fetch+0xc12c>)
 800d774:	461a      	mov	r2, r3
 800d776:	460b      	mov	r3, r1
 800d778:	cb03      	ldmia	r3!, {r0, r1}
 800d77a:	6010      	str	r0, [r2, #0]
 800d77c:	6051      	str	r1, [r2, #4]
 800d77e:	881b      	ldrh	r3, [r3, #0]
 800d780:	8113      	strh	r3, [r2, #8]
			break;
 800d782:	f00e becf 	b.w	801c524 <problem_fetch+0x1ae60>
 800d786:	bf00      	nop
 800d788:	08027bd4 	.word	0x08027bd4
 800d78c:	08023854 	.word	0x08023854
 800d790:	08027bec 	.word	0x08027bec
 800d794:	08027bfc 	.word	0x08027bfc
 800d798:	08023978 	.word	0x08023978
 800d79c:	08027c14 	.word	0x08027c14
 800d7a0:	080239f4 	.word	0x080239f4
 800d7a4:	08027c20 	.word	0x08027c20
 800d7a8:	08027c30 	.word	0x08027c30
 800d7ac:	080239dc 	.word	0x080239dc
 800d7b0:	08027c44 	.word	0x08027c44
 800d7b4:	08023814 	.word	0x08023814
 800d7b8:	08027c4c 	.word	0x08027c4c
 800d7bc:	08027c5c 	.word	0x08027c5c
 800d7c0:	08027c74 	.word	0x08027c74
 800d7c4:	08027c84 	.word	0x08027c84
 800d7c8:	08027c90 	.word	0x08027c90
 800d7cc:	08023bf0 	.word	0x08023bf0
 800d7d0:	08027ca0 	.word	0x08027ca0
 800d7d4:	08024088 	.word	0x08024088
 800d7d8:	08027cb8 	.word	0x08027cb8
 800d7dc:	08027cc0 	.word	0x08027cc0
 800d7e0:	080239a8 	.word	0x080239a8
 800d7e4:	08027ccc 	.word	0x08027ccc
 800d7e8:	08027cd4 	.word	0x08027cd4
 800d7ec:	08027ce0 	.word	0x08027ce0
 800d7f0:	08023f34 	.word	0x08023f34
		case 348 :
			strcpy(p->name,"CREAKY SQUEAKY");
 800d7f4:	687b      	ldr	r3, [r7, #4]
 800d7f6:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800d7fa:	4aae      	ldr	r2, [pc, #696]	; (800dab4 <problem_fetch+0xc3f0>)
 800d7fc:	461c      	mov	r4, r3
 800d7fe:	4613      	mov	r3, r2
 800d800:	cb07      	ldmia	r3!, {r0, r1, r2}
 800d802:	6020      	str	r0, [r4, #0]
 800d804:	6061      	str	r1, [r4, #4]
 800d806:	60a2      	str	r2, [r4, #8]
 800d808:	881a      	ldrh	r2, [r3, #0]
 800d80a:	789b      	ldrb	r3, [r3, #2]
 800d80c:	81a2      	strh	r2, [r4, #12]
 800d80e:	73a3      	strb	r3, [r4, #14]
			strcpy(p->grade,"6C+");
 800d810:	687b      	ldr	r3, [r7, #4]
 800d812:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800d816:	4aa8      	ldr	r2, [pc, #672]	; (800dab8 <problem_fetch+0xc3f4>)
 800d818:	6810      	ldr	r0, [r2, #0]
 800d81a:	6018      	str	r0, [r3, #0]
			p->moveSize = 8;
 800d81c:	687b      	ldr	r3, [r7, #4]
 800d81e:	2208      	movs	r2, #8
 800d820:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"H,B,E,B,E,F,H,D");
 800d822:	687b      	ldr	r3, [r7, #4]
 800d824:	33a4      	adds	r3, #164	; 0xa4
 800d826:	4aa5      	ldr	r2, [pc, #660]	; (800dabc <problem_fetch+0xc3f8>)
 800d828:	461c      	mov	r4, r3
 800d82a:	4615      	mov	r5, r2
 800d82c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d82e:	6020      	str	r0, [r4, #0]
 800d830:	6061      	str	r1, [r4, #4]
 800d832:	60a2      	str	r2, [r4, #8]
 800d834:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,6,9,12,12,13,16,18");
 800d836:	687b      	ldr	r3, [r7, #4]
 800d838:	3304      	adds	r3, #4
 800d83a:	4aa1      	ldr	r2, [pc, #644]	; (800dac0 <problem_fetch+0xc3fc>)
 800d83c:	461d      	mov	r5, r3
 800d83e:	4614      	mov	r4, r2
 800d840:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d842:	6028      	str	r0, [r5, #0]
 800d844:	6069      	str	r1, [r5, #4]
 800d846:	60aa      	str	r2, [r5, #8]
 800d848:	60eb      	str	r3, [r5, #12]
 800d84a:	6820      	ldr	r0, [r4, #0]
 800d84c:	6128      	str	r0, [r5, #16]
 800d84e:	7923      	ldrb	r3, [r4, #4]
 800d850:	752b      	strb	r3, [r5, #20]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,e");
 800d852:	687b      	ldr	r3, [r7, #4]
 800d854:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800d858:	4a9a      	ldr	r2, [pc, #616]	; (800dac4 <problem_fetch+0xc400>)
 800d85a:	461c      	mov	r4, r3
 800d85c:	4615      	mov	r5, r2
 800d85e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d860:	6020      	str	r0, [r4, #0]
 800d862:	6061      	str	r1, [r4, #4]
 800d864:	60a2      	str	r2, [r4, #8]
 800d866:	60e3      	str	r3, [r4, #12]
			break;
 800d868:	f00e be5c 	b.w	801c524 <problem_fetch+0x1ae60>
		case 349 :
			strcpy(p->name,"SLUG TRAIL");
 800d86c:	687b      	ldr	r3, [r7, #4]
 800d86e:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800d872:	4995      	ldr	r1, [pc, #596]	; (800dac8 <problem_fetch+0xc404>)
 800d874:	461a      	mov	r2, r3
 800d876:	460b      	mov	r3, r1
 800d878:	cb03      	ldmia	r3!, {r0, r1}
 800d87a:	6010      	str	r0, [r2, #0]
 800d87c:	6051      	str	r1, [r2, #4]
 800d87e:	8819      	ldrh	r1, [r3, #0]
 800d880:	789b      	ldrb	r3, [r3, #2]
 800d882:	8111      	strh	r1, [r2, #8]
 800d884:	7293      	strb	r3, [r2, #10]
			strcpy(p->grade,"6B+");
 800d886:	687b      	ldr	r3, [r7, #4]
 800d888:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800d88c:	4a8f      	ldr	r2, [pc, #572]	; (800dacc <problem_fetch+0xc408>)
 800d88e:	6810      	ldr	r0, [r2, #0]
 800d890:	6018      	str	r0, [r3, #0]
			p->moveSize = 8;
 800d892:	687b      	ldr	r3, [r7, #4]
 800d894:	2208      	movs	r2, #8
 800d896:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"C,G,E,F,A,A,E,A");
 800d898:	687b      	ldr	r3, [r7, #4]
 800d89a:	33a4      	adds	r3, #164	; 0xa4
 800d89c:	4a8c      	ldr	r2, [pc, #560]	; (800dad0 <problem_fetch+0xc40c>)
 800d89e:	461c      	mov	r4, r3
 800d8a0:	4615      	mov	r5, r2
 800d8a2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d8a4:	6020      	str	r0, [r4, #0]
 800d8a6:	6061      	str	r1, [r4, #4]
 800d8a8:	60a2      	str	r2, [r4, #8]
 800d8aa:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,6,8,11,9,14,14,18");
 800d8ac:	687b      	ldr	r3, [r7, #4]
 800d8ae:	3304      	adds	r3, #4
 800d8b0:	4a88      	ldr	r2, [pc, #544]	; (800dad4 <problem_fetch+0xc410>)
 800d8b2:	461d      	mov	r5, r3
 800d8b4:	4614      	mov	r4, r2
 800d8b6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d8b8:	6028      	str	r0, [r5, #0]
 800d8ba:	6069      	str	r1, [r5, #4]
 800d8bc:	60aa      	str	r2, [r5, #8]
 800d8be:	60eb      	str	r3, [r5, #12]
 800d8c0:	6820      	ldr	r0, [r4, #0]
 800d8c2:	6128      	str	r0, [r5, #16]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,e");
 800d8c4:	687b      	ldr	r3, [r7, #4]
 800d8c6:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800d8ca:	4a7e      	ldr	r2, [pc, #504]	; (800dac4 <problem_fetch+0xc400>)
 800d8cc:	461c      	mov	r4, r3
 800d8ce:	4615      	mov	r5, r2
 800d8d0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d8d2:	6020      	str	r0, [r4, #0]
 800d8d4:	6061      	str	r1, [r4, #4]
 800d8d6:	60a2      	str	r2, [r4, #8]
 800d8d8:	60e3      	str	r3, [r4, #12]
			break;
 800d8da:	f00e be23 	b.w	801c524 <problem_fetch+0x1ae60>
		case 350 :
			strcpy(p->name,"GRAPE THIEF");
 800d8de:	687b      	ldr	r3, [r7, #4]
 800d8e0:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800d8e4:	4a7c      	ldr	r2, [pc, #496]	; (800dad8 <problem_fetch+0xc414>)
 800d8e6:	461c      	mov	r4, r3
 800d8e8:	4613      	mov	r3, r2
 800d8ea:	cb07      	ldmia	r3!, {r0, r1, r2}
 800d8ec:	6020      	str	r0, [r4, #0]
 800d8ee:	6061      	str	r1, [r4, #4]
 800d8f0:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade,"7C");
 800d8f2:	687b      	ldr	r3, [r7, #4]
 800d8f4:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800d8f8:	4a78      	ldr	r2, [pc, #480]	; (800dadc <problem_fetch+0xc418>)
 800d8fa:	8811      	ldrh	r1, [r2, #0]
 800d8fc:	7892      	ldrb	r2, [r2, #2]
 800d8fe:	8019      	strh	r1, [r3, #0]
 800d900:	709a      	strb	r2, [r3, #2]
			p->moveSize = 4;
 800d902:	687b      	ldr	r3, [r7, #4]
 800d904:	2204      	movs	r2, #4
 800d906:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"E,G,G,I");
 800d908:	687b      	ldr	r3, [r7, #4]
 800d90a:	33a4      	adds	r3, #164	; 0xa4
 800d90c:	4974      	ldr	r1, [pc, #464]	; (800dae0 <problem_fetch+0xc41c>)
 800d90e:	461a      	mov	r2, r3
 800d910:	460b      	mov	r3, r1
 800d912:	cb03      	ldmia	r3!, {r0, r1}
 800d914:	6010      	str	r0, [r2, #0]
 800d916:	6051      	str	r1, [r2, #4]
			strcpy(p->moveNumbers,"6,14,9,18");
 800d918:	687b      	ldr	r3, [r7, #4]
 800d91a:	3304      	adds	r3, #4
 800d91c:	4971      	ldr	r1, [pc, #452]	; (800dae4 <problem_fetch+0xc420>)
 800d91e:	461a      	mov	r2, r3
 800d920:	460b      	mov	r3, r1
 800d922:	cb03      	ldmia	r3!, {r0, r1}
 800d924:	6010      	str	r0, [r2, #0]
 800d926:	6051      	str	r1, [r2, #4]
 800d928:	881b      	ldrh	r3, [r3, #0]
 800d92a:	8113      	strh	r3, [r2, #8]
			strcpy(p->startFinish,"s,d,d,e");
 800d92c:	687b      	ldr	r3, [r7, #4]
 800d92e:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800d932:	496d      	ldr	r1, [pc, #436]	; (800dae8 <problem_fetch+0xc424>)
 800d934:	461a      	mov	r2, r3
 800d936:	460b      	mov	r3, r1
 800d938:	cb03      	ldmia	r3!, {r0, r1}
 800d93a:	6010      	str	r0, [r2, #0]
 800d93c:	6051      	str	r1, [r2, #4]
			break;
 800d93e:	f00e bdf1 	b.w	801c524 <problem_fetch+0x1ae60>
		case 351 :
			strcpy(p->name,"CALL ME A FOOL WILL YOU?");
 800d942:	687b      	ldr	r3, [r7, #4]
 800d944:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800d948:	4a68      	ldr	r2, [pc, #416]	; (800daec <problem_fetch+0xc428>)
 800d94a:	461d      	mov	r5, r3
 800d94c:	4614      	mov	r4, r2
 800d94e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d950:	6028      	str	r0, [r5, #0]
 800d952:	6069      	str	r1, [r5, #4]
 800d954:	60aa      	str	r2, [r5, #8]
 800d956:	60eb      	str	r3, [r5, #12]
 800d958:	cc03      	ldmia	r4!, {r0, r1}
 800d95a:	6128      	str	r0, [r5, #16]
 800d95c:	6169      	str	r1, [r5, #20]
 800d95e:	7823      	ldrb	r3, [r4, #0]
 800d960:	762b      	strb	r3, [r5, #24]
			strcpy(p->grade,"6B+");
 800d962:	687b      	ldr	r3, [r7, #4]
 800d964:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800d968:	4a58      	ldr	r2, [pc, #352]	; (800dacc <problem_fetch+0xc408>)
 800d96a:	6810      	ldr	r0, [r2, #0]
 800d96c:	6018      	str	r0, [r3, #0]
			p->moveSize = 11;
 800d96e:	687b      	ldr	r3, [r7, #4]
 800d970:	220b      	movs	r2, #11
 800d972:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,G,J,G,I,J,H,G,F,E,I");
 800d974:	687b      	ldr	r3, [r7, #4]
 800d976:	33a4      	adds	r3, #164	; 0xa4
 800d978:	4a5d      	ldr	r2, [pc, #372]	; (800daf0 <problem_fetch+0xc42c>)
 800d97a:	461d      	mov	r5, r3
 800d97c:	4614      	mov	r4, r2
 800d97e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d980:	6028      	str	r0, [r5, #0]
 800d982:	6069      	str	r1, [r5, #4]
 800d984:	60aa      	str	r2, [r5, #8]
 800d986:	60eb      	str	r3, [r5, #12]
 800d988:	6820      	ldr	r0, [r4, #0]
 800d98a:	6128      	str	r0, [r5, #16]
 800d98c:	88a3      	ldrh	r3, [r4, #4]
 800d98e:	82ab      	strh	r3, [r5, #20]
			strcpy(p->moveNumbers,"6,4,5,15,14,16,8,9,11,12,18");
 800d990:	687b      	ldr	r3, [r7, #4]
 800d992:	3304      	adds	r3, #4
 800d994:	4a57      	ldr	r2, [pc, #348]	; (800daf4 <problem_fetch+0xc430>)
 800d996:	461d      	mov	r5, r3
 800d998:	4614      	mov	r4, r2
 800d99a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d99c:	6028      	str	r0, [r5, #0]
 800d99e:	6069      	str	r1, [r5, #4]
 800d9a0:	60aa      	str	r2, [r5, #8]
 800d9a2:	60eb      	str	r3, [r5, #12]
 800d9a4:	cc07      	ldmia	r4!, {r0, r1, r2}
 800d9a6:	6128      	str	r0, [r5, #16]
 800d9a8:	6169      	str	r1, [r5, #20]
 800d9aa:	61aa      	str	r2, [r5, #24]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,d,d,d,e");
 800d9ac:	687b      	ldr	r3, [r7, #4]
 800d9ae:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800d9b2:	4a51      	ldr	r2, [pc, #324]	; (800daf8 <problem_fetch+0xc434>)
 800d9b4:	461d      	mov	r5, r3
 800d9b6:	4614      	mov	r4, r2
 800d9b8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d9ba:	6028      	str	r0, [r5, #0]
 800d9bc:	6069      	str	r1, [r5, #4]
 800d9be:	60aa      	str	r2, [r5, #8]
 800d9c0:	60eb      	str	r3, [r5, #12]
 800d9c2:	6820      	ldr	r0, [r4, #0]
 800d9c4:	6128      	str	r0, [r5, #16]
 800d9c6:	88a3      	ldrh	r3, [r4, #4]
 800d9c8:	82ab      	strh	r3, [r5, #20]
			break;
 800d9ca:	f00e bdab 	b.w	801c524 <problem_fetch+0x1ae60>
		case 352 :
			strcpy(p->name,"DESERT ROSE");
 800d9ce:	687b      	ldr	r3, [r7, #4]
 800d9d0:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800d9d4:	4a49      	ldr	r2, [pc, #292]	; (800dafc <problem_fetch+0xc438>)
 800d9d6:	461c      	mov	r4, r3
 800d9d8:	4613      	mov	r3, r2
 800d9da:	cb07      	ldmia	r3!, {r0, r1, r2}
 800d9dc:	6020      	str	r0, [r4, #0]
 800d9de:	6061      	str	r1, [r4, #4]
 800d9e0:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade,"6C+");
 800d9e2:	687b      	ldr	r3, [r7, #4]
 800d9e4:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800d9e8:	4a33      	ldr	r2, [pc, #204]	; (800dab8 <problem_fetch+0xc3f4>)
 800d9ea:	6810      	ldr	r0, [r2, #0]
 800d9ec:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 800d9ee:	687b      	ldr	r3, [r7, #4]
 800d9f0:	2206      	movs	r2, #6
 800d9f2:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,H,G,J,G,I");
 800d9f4:	687b      	ldr	r3, [r7, #4]
 800d9f6:	33a4      	adds	r3, #164	; 0xa4
 800d9f8:	4a41      	ldr	r2, [pc, #260]	; (800db00 <problem_fetch+0xc43c>)
 800d9fa:	461c      	mov	r4, r3
 800d9fc:	4613      	mov	r3, r2
 800d9fe:	cb07      	ldmia	r3!, {r0, r1, r2}
 800da00:	6020      	str	r0, [r4, #0]
 800da02:	6061      	str	r1, [r4, #4]
 800da04:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,8,9,12,15,18");
 800da06:	687b      	ldr	r3, [r7, #4]
 800da08:	3304      	adds	r3, #4
 800da0a:	4a3e      	ldr	r2, [pc, #248]	; (800db04 <problem_fetch+0xc440>)
 800da0c:	461c      	mov	r4, r3
 800da0e:	4613      	mov	r3, r2
 800da10:	cb07      	ldmia	r3!, {r0, r1, r2}
 800da12:	6020      	str	r0, [r4, #0]
 800da14:	6061      	str	r1, [r4, #4]
 800da16:	60a2      	str	r2, [r4, #8]
 800da18:	881a      	ldrh	r2, [r3, #0]
 800da1a:	789b      	ldrb	r3, [r3, #2]
 800da1c:	81a2      	strh	r2, [r4, #12]
 800da1e:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 800da20:	687b      	ldr	r3, [r7, #4]
 800da22:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800da26:	4a38      	ldr	r2, [pc, #224]	; (800db08 <problem_fetch+0xc444>)
 800da28:	461c      	mov	r4, r3
 800da2a:	4613      	mov	r3, r2
 800da2c:	cb07      	ldmia	r3!, {r0, r1, r2}
 800da2e:	6020      	str	r0, [r4, #0]
 800da30:	6061      	str	r1, [r4, #4]
 800da32:	60a2      	str	r2, [r4, #8]
			break;
 800da34:	f00e bd76 	b.w	801c524 <problem_fetch+0x1ae60>
		case 353 :
			strcpy(p->name,"BUMPIN GO");
 800da38:	687b      	ldr	r3, [r7, #4]
 800da3a:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800da3e:	4933      	ldr	r1, [pc, #204]	; (800db0c <problem_fetch+0xc448>)
 800da40:	461a      	mov	r2, r3
 800da42:	460b      	mov	r3, r1
 800da44:	cb03      	ldmia	r3!, {r0, r1}
 800da46:	6010      	str	r0, [r2, #0]
 800da48:	6051      	str	r1, [r2, #4]
 800da4a:	881b      	ldrh	r3, [r3, #0]
 800da4c:	8113      	strh	r3, [r2, #8]
			strcpy(p->grade,"7A");
 800da4e:	687b      	ldr	r3, [r7, #4]
 800da50:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800da54:	4a2e      	ldr	r2, [pc, #184]	; (800db10 <problem_fetch+0xc44c>)
 800da56:	8811      	ldrh	r1, [r2, #0]
 800da58:	7892      	ldrb	r2, [r2, #2]
 800da5a:	8019      	strh	r1, [r3, #0]
 800da5c:	709a      	strb	r2, [r3, #2]
			p->moveSize = 7;
 800da5e:	687b      	ldr	r3, [r7, #4]
 800da60:	2207      	movs	r2, #7
 800da62:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,J,H,H,I,G,I");
 800da64:	687b      	ldr	r3, [r7, #4]
 800da66:	33a4      	adds	r3, #164	; 0xa4
 800da68:	4a2a      	ldr	r2, [pc, #168]	; (800db14 <problem_fetch+0xc450>)
 800da6a:	461c      	mov	r4, r3
 800da6c:	4613      	mov	r3, r2
 800da6e:	cb07      	ldmia	r3!, {r0, r1, r2}
 800da70:	6020      	str	r0, [r4, #0]
 800da72:	6061      	str	r1, [r4, #4]
 800da74:	60a2      	str	r2, [r4, #8]
 800da76:	881b      	ldrh	r3, [r3, #0]
 800da78:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,7,10,12,14,17,18");
 800da7a:	687b      	ldr	r3, [r7, #4]
 800da7c:	3304      	adds	r3, #4
 800da7e:	4a26      	ldr	r2, [pc, #152]	; (800db18 <problem_fetch+0xc454>)
 800da80:	461d      	mov	r5, r3
 800da82:	4614      	mov	r4, r2
 800da84:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800da86:	6028      	str	r0, [r5, #0]
 800da88:	6069      	str	r1, [r5, #4]
 800da8a:	60aa      	str	r2, [r5, #8]
 800da8c:	60eb      	str	r3, [r5, #12]
 800da8e:	8823      	ldrh	r3, [r4, #0]
 800da90:	78a2      	ldrb	r2, [r4, #2]
 800da92:	822b      	strh	r3, [r5, #16]
 800da94:	4613      	mov	r3, r2
 800da96:	74ab      	strb	r3, [r5, #18]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 800da98:	687b      	ldr	r3, [r7, #4]
 800da9a:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800da9e:	4a1f      	ldr	r2, [pc, #124]	; (800db1c <problem_fetch+0xc458>)
 800daa0:	461c      	mov	r4, r3
 800daa2:	4613      	mov	r3, r2
 800daa4:	cb07      	ldmia	r3!, {r0, r1, r2}
 800daa6:	6020      	str	r0, [r4, #0]
 800daa8:	6061      	str	r1, [r4, #4]
 800daaa:	60a2      	str	r2, [r4, #8]
 800daac:	881b      	ldrh	r3, [r3, #0]
 800daae:	81a3      	strh	r3, [r4, #12]
			break;
 800dab0:	f00e bd38 	b.w	801c524 <problem_fetch+0x1ae60>
 800dab4:	08027cf0 	.word	0x08027cf0
 800dab8:	080238ec 	.word	0x080238ec
 800dabc:	08027d00 	.word	0x08027d00
 800dac0:	08027d10 	.word	0x08027d10
 800dac4:	08023978 	.word	0x08023978
 800dac8:	08027d28 	.word	0x08027d28
 800dacc:	08023854 	.word	0x08023854
 800dad0:	08027d34 	.word	0x08027d34
 800dad4:	08027d44 	.word	0x08027d44
 800dad8:	08027d58 	.word	0x08027d58
 800dadc:	08024088 	.word	0x08024088
 800dae0:	08023994 	.word	0x08023994
 800dae4:	08027d64 	.word	0x08027d64
 800dae8:	080239a8 	.word	0x080239a8
 800daec:	08027d70 	.word	0x08027d70
 800daf0:	08027d8c 	.word	0x08027d8c
 800daf4:	08027da4 	.word	0x08027da4
 800daf8:	080271b4 	.word	0x080271b4
 800dafc:	08027dc0 	.word	0x08027dc0
 800db00:	08027dcc 	.word	0x08027dcc
 800db04:	08027dd8 	.word	0x08027dd8
 800db08:	08023bf0 	.word	0x08023bf0
 800db0c:	08027de8 	.word	0x08027de8
 800db10:	08023814 	.word	0x08023814
 800db14:	08027df4 	.word	0x08027df4
 800db18:	08027e04 	.word	0x08027e04
 800db1c:	080239dc 	.word	0x080239dc
		case 354 :
			strcpy(p->name,"BLACKLISTED");
 800db20:	687b      	ldr	r3, [r7, #4]
 800db22:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800db26:	4abd      	ldr	r2, [pc, #756]	; (800de1c <problem_fetch+0xc758>)
 800db28:	461c      	mov	r4, r3
 800db2a:	4613      	mov	r3, r2
 800db2c:	cb07      	ldmia	r3!, {r0, r1, r2}
 800db2e:	6020      	str	r0, [r4, #0]
 800db30:	6061      	str	r1, [r4, #4]
 800db32:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade,"6C+");
 800db34:	687b      	ldr	r3, [r7, #4]
 800db36:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800db3a:	4ab9      	ldr	r2, [pc, #740]	; (800de20 <problem_fetch+0xc75c>)
 800db3c:	6810      	ldr	r0, [r2, #0]
 800db3e:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 800db40:	687b      	ldr	r3, [r7, #4]
 800db42:	2206      	movs	r2, #6
 800db44:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,E,G,C,D,A");
 800db46:	687b      	ldr	r3, [r7, #4]
 800db48:	33a4      	adds	r3, #164	; 0xa4
 800db4a:	4ab6      	ldr	r2, [pc, #728]	; (800de24 <problem_fetch+0xc760>)
 800db4c:	461c      	mov	r4, r3
 800db4e:	4613      	mov	r3, r2
 800db50:	cb07      	ldmia	r3!, {r0, r1, r2}
 800db52:	6020      	str	r0, [r4, #0]
 800db54:	6061      	str	r1, [r4, #4]
 800db56:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,8,10,13,15,18");
 800db58:	687b      	ldr	r3, [r7, #4]
 800db5a:	3304      	adds	r3, #4
 800db5c:	4ab2      	ldr	r2, [pc, #712]	; (800de28 <problem_fetch+0xc764>)
 800db5e:	461c      	mov	r4, r3
 800db60:	4615      	mov	r5, r2
 800db62:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800db64:	6020      	str	r0, [r4, #0]
 800db66:	6061      	str	r1, [r4, #4]
 800db68:	60a2      	str	r2, [r4, #8]
 800db6a:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 800db6c:	687b      	ldr	r3, [r7, #4]
 800db6e:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800db72:	4aae      	ldr	r2, [pc, #696]	; (800de2c <problem_fetch+0xc768>)
 800db74:	461c      	mov	r4, r3
 800db76:	4613      	mov	r3, r2
 800db78:	cb07      	ldmia	r3!, {r0, r1, r2}
 800db7a:	6020      	str	r0, [r4, #0]
 800db7c:	6061      	str	r1, [r4, #4]
 800db7e:	60a2      	str	r2, [r4, #8]
			break;
 800db80:	f00e bcd0 	b.w	801c524 <problem_fetch+0x1ae60>
		case 355 :
			strcpy(p->name,"THE EASY EASY");
 800db84:	687b      	ldr	r3, [r7, #4]
 800db86:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800db8a:	4aa9      	ldr	r2, [pc, #676]	; (800de30 <problem_fetch+0xc76c>)
 800db8c:	461c      	mov	r4, r3
 800db8e:	4613      	mov	r3, r2
 800db90:	cb07      	ldmia	r3!, {r0, r1, r2}
 800db92:	6020      	str	r0, [r4, #0]
 800db94:	6061      	str	r1, [r4, #4]
 800db96:	60a2      	str	r2, [r4, #8]
 800db98:	881b      	ldrh	r3, [r3, #0]
 800db9a:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade,"6B+");
 800db9c:	687b      	ldr	r3, [r7, #4]
 800db9e:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800dba2:	4aa4      	ldr	r2, [pc, #656]	; (800de34 <problem_fetch+0xc770>)
 800dba4:	6810      	ldr	r0, [r2, #0]
 800dba6:	6018      	str	r0, [r3, #0]
			p->moveSize = 5;
 800dba8:	687b      	ldr	r3, [r7, #4]
 800dbaa:	2205      	movs	r2, #5
 800dbac:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,H,G,E,I");
 800dbae:	687b      	ldr	r3, [r7, #4]
 800dbb0:	33a4      	adds	r3, #164	; 0xa4
 800dbb2:	49a1      	ldr	r1, [pc, #644]	; (800de38 <problem_fetch+0xc774>)
 800dbb4:	461a      	mov	r2, r3
 800dbb6:	460b      	mov	r3, r1
 800dbb8:	cb03      	ldmia	r3!, {r0, r1}
 800dbba:	6010      	str	r0, [r2, #0]
 800dbbc:	6051      	str	r1, [r2, #4]
 800dbbe:	881b      	ldrh	r3, [r3, #0]
 800dbc0:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"6,10,14,8,18");
 800dbc2:	687b      	ldr	r3, [r7, #4]
 800dbc4:	3304      	adds	r3, #4
 800dbc6:	4a9d      	ldr	r2, [pc, #628]	; (800de3c <problem_fetch+0xc778>)
 800dbc8:	461c      	mov	r4, r3
 800dbca:	4613      	mov	r3, r2
 800dbcc:	cb07      	ldmia	r3!, {r0, r1, r2}
 800dbce:	6020      	str	r0, [r4, #0]
 800dbd0:	6061      	str	r1, [r4, #4]
 800dbd2:	60a2      	str	r2, [r4, #8]
 800dbd4:	781b      	ldrb	r3, [r3, #0]
 800dbd6:	7323      	strb	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,e");
 800dbd8:	687b      	ldr	r3, [r7, #4]
 800dbda:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800dbde:	4998      	ldr	r1, [pc, #608]	; (800de40 <problem_fetch+0xc77c>)
 800dbe0:	461a      	mov	r2, r3
 800dbe2:	460b      	mov	r3, r1
 800dbe4:	cb03      	ldmia	r3!, {r0, r1}
 800dbe6:	6010      	str	r0, [r2, #0]
 800dbe8:	6051      	str	r1, [r2, #4]
 800dbea:	881b      	ldrh	r3, [r3, #0]
 800dbec:	8113      	strh	r3, [r2, #8]
			break;
 800dbee:	f00e bc99 	b.w	801c524 <problem_fetch+0x1ae60>
		case 356 :
			strcpy(p->name,"BOOTHY TOOTHY");
 800dbf2:	687b      	ldr	r3, [r7, #4]
 800dbf4:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800dbf8:	4a92      	ldr	r2, [pc, #584]	; (800de44 <problem_fetch+0xc780>)
 800dbfa:	461c      	mov	r4, r3
 800dbfc:	4613      	mov	r3, r2
 800dbfe:	cb07      	ldmia	r3!, {r0, r1, r2}
 800dc00:	6020      	str	r0, [r4, #0]
 800dc02:	6061      	str	r1, [r4, #4]
 800dc04:	60a2      	str	r2, [r4, #8]
 800dc06:	881b      	ldrh	r3, [r3, #0]
 800dc08:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade,"6B+");
 800dc0a:	687b      	ldr	r3, [r7, #4]
 800dc0c:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800dc10:	4a88      	ldr	r2, [pc, #544]	; (800de34 <problem_fetch+0xc770>)
 800dc12:	6810      	ldr	r0, [r2, #0]
 800dc14:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 800dc16:	687b      	ldr	r3, [r7, #4]
 800dc18:	2206      	movs	r2, #6
 800dc1a:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"B,G,E,J,E,I");
 800dc1c:	687b      	ldr	r3, [r7, #4]
 800dc1e:	33a4      	adds	r3, #164	; 0xa4
 800dc20:	4a89      	ldr	r2, [pc, #548]	; (800de48 <problem_fetch+0xc784>)
 800dc22:	461c      	mov	r4, r3
 800dc24:	4613      	mov	r3, r2
 800dc26:	cb07      	ldmia	r3!, {r0, r1, r2}
 800dc28:	6020      	str	r0, [r4, #0]
 800dc2a:	6061      	str	r1, [r4, #4]
 800dc2c:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"6,6,9,12,14,18");
 800dc2e:	687b      	ldr	r3, [r7, #4]
 800dc30:	3304      	adds	r3, #4
 800dc32:	4a86      	ldr	r2, [pc, #536]	; (800de4c <problem_fetch+0xc788>)
 800dc34:	461c      	mov	r4, r3
 800dc36:	4613      	mov	r3, r2
 800dc38:	cb07      	ldmia	r3!, {r0, r1, r2}
 800dc3a:	6020      	str	r0, [r4, #0]
 800dc3c:	6061      	str	r1, [r4, #4]
 800dc3e:	60a2      	str	r2, [r4, #8]
 800dc40:	881a      	ldrh	r2, [r3, #0]
 800dc42:	789b      	ldrb	r3, [r3, #2]
 800dc44:	81a2      	strh	r2, [r4, #12]
 800dc46:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish,"s,s,d,d,d,e");
 800dc48:	687b      	ldr	r3, [r7, #4]
 800dc4a:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800dc4e:	4a80      	ldr	r2, [pc, #512]	; (800de50 <problem_fetch+0xc78c>)
 800dc50:	461c      	mov	r4, r3
 800dc52:	4613      	mov	r3, r2
 800dc54:	cb07      	ldmia	r3!, {r0, r1, r2}
 800dc56:	6020      	str	r0, [r4, #0]
 800dc58:	6061      	str	r1, [r4, #4]
 800dc5a:	60a2      	str	r2, [r4, #8]
			break;
 800dc5c:	f00e bc62 	b.w	801c524 <problem_fetch+0x1ae60>
		case 357 :
			strcpy(p->name,"LOCK IT DOWN");
 800dc60:	687b      	ldr	r3, [r7, #4]
 800dc62:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800dc66:	4a7b      	ldr	r2, [pc, #492]	; (800de54 <problem_fetch+0xc790>)
 800dc68:	461c      	mov	r4, r3
 800dc6a:	4613      	mov	r3, r2
 800dc6c:	cb07      	ldmia	r3!, {r0, r1, r2}
 800dc6e:	6020      	str	r0, [r4, #0]
 800dc70:	6061      	str	r1, [r4, #4]
 800dc72:	60a2      	str	r2, [r4, #8]
 800dc74:	781b      	ldrb	r3, [r3, #0]
 800dc76:	7323      	strb	r3, [r4, #12]
			strcpy(p->grade,"7A+");
 800dc78:	687b      	ldr	r3, [r7, #4]
 800dc7a:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800dc7e:	4a76      	ldr	r2, [pc, #472]	; (800de58 <problem_fetch+0xc794>)
 800dc80:	6810      	ldr	r0, [r2, #0]
 800dc82:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 800dc84:	687b      	ldr	r3, [r7, #4]
 800dc86:	2206      	movs	r2, #6
 800dc88:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,K,J,E,H,D");
 800dc8a:	687b      	ldr	r3, [r7, #4]
 800dc8c:	33a4      	adds	r3, #164	; 0xa4
 800dc8e:	4a73      	ldr	r2, [pc, #460]	; (800de5c <problem_fetch+0xc798>)
 800dc90:	461c      	mov	r4, r3
 800dc92:	4613      	mov	r3, r2
 800dc94:	cb07      	ldmia	r3!, {r0, r1, r2}
 800dc96:	6020      	str	r0, [r4, #0]
 800dc98:	6061      	str	r1, [r4, #4]
 800dc9a:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,9,12,12,16,18");
 800dc9c:	687b      	ldr	r3, [r7, #4]
 800dc9e:	3304      	adds	r3, #4
 800dca0:	4a6f      	ldr	r2, [pc, #444]	; (800de60 <problem_fetch+0xc79c>)
 800dca2:	461c      	mov	r4, r3
 800dca4:	4615      	mov	r5, r2
 800dca6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800dca8:	6020      	str	r0, [r4, #0]
 800dcaa:	6061      	str	r1, [r4, #4]
 800dcac:	60a2      	str	r2, [r4, #8]
 800dcae:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 800dcb0:	687b      	ldr	r3, [r7, #4]
 800dcb2:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800dcb6:	4a5d      	ldr	r2, [pc, #372]	; (800de2c <problem_fetch+0xc768>)
 800dcb8:	461c      	mov	r4, r3
 800dcba:	4613      	mov	r3, r2
 800dcbc:	cb07      	ldmia	r3!, {r0, r1, r2}
 800dcbe:	6020      	str	r0, [r4, #0]
 800dcc0:	6061      	str	r1, [r4, #4]
 800dcc2:	60a2      	str	r2, [r4, #8]
			break;
 800dcc4:	f00e bc2e 	b.w	801c524 <problem_fetch+0x1ae60>
		case 358 :
			strcpy(p->name,"RECHARGE");
 800dcc8:	687b      	ldr	r3, [r7, #4]
 800dcca:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800dcce:	4965      	ldr	r1, [pc, #404]	; (800de64 <problem_fetch+0xc7a0>)
 800dcd0:	461a      	mov	r2, r3
 800dcd2:	460b      	mov	r3, r1
 800dcd4:	cb03      	ldmia	r3!, {r0, r1}
 800dcd6:	6010      	str	r0, [r2, #0]
 800dcd8:	6051      	str	r1, [r2, #4]
 800dcda:	781b      	ldrb	r3, [r3, #0]
 800dcdc:	7213      	strb	r3, [r2, #8]
			strcpy(p->grade,"7A+");
 800dcde:	687b      	ldr	r3, [r7, #4]
 800dce0:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800dce4:	4a5c      	ldr	r2, [pc, #368]	; (800de58 <problem_fetch+0xc794>)
 800dce6:	6810      	ldr	r0, [r2, #0]
 800dce8:	6018      	str	r0, [r3, #0]
			p->moveSize = 5;
 800dcea:	687b      	ldr	r3, [r7, #4]
 800dcec:	2205      	movs	r2, #5
 800dcee:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"E,H,G,G,A");
 800dcf0:	687b      	ldr	r3, [r7, #4]
 800dcf2:	33a4      	adds	r3, #164	; 0xa4
 800dcf4:	495c      	ldr	r1, [pc, #368]	; (800de68 <problem_fetch+0xc7a4>)
 800dcf6:	461a      	mov	r2, r3
 800dcf8:	460b      	mov	r3, r1
 800dcfa:	cb03      	ldmia	r3!, {r0, r1}
 800dcfc:	6010      	str	r0, [r2, #0]
 800dcfe:	6051      	str	r1, [r2, #4]
 800dd00:	881b      	ldrh	r3, [r3, #0]
 800dd02:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"6,10,14,17,18");
 800dd04:	687b      	ldr	r3, [r7, #4]
 800dd06:	3304      	adds	r3, #4
 800dd08:	4a58      	ldr	r2, [pc, #352]	; (800de6c <problem_fetch+0xc7a8>)
 800dd0a:	461c      	mov	r4, r3
 800dd0c:	4613      	mov	r3, r2
 800dd0e:	cb07      	ldmia	r3!, {r0, r1, r2}
 800dd10:	6020      	str	r0, [r4, #0]
 800dd12:	6061      	str	r1, [r4, #4]
 800dd14:	60a2      	str	r2, [r4, #8]
 800dd16:	881b      	ldrh	r3, [r3, #0]
 800dd18:	81a3      	strh	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,e");
 800dd1a:	687b      	ldr	r3, [r7, #4]
 800dd1c:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800dd20:	4947      	ldr	r1, [pc, #284]	; (800de40 <problem_fetch+0xc77c>)
 800dd22:	461a      	mov	r2, r3
 800dd24:	460b      	mov	r3, r1
 800dd26:	cb03      	ldmia	r3!, {r0, r1}
 800dd28:	6010      	str	r0, [r2, #0]
 800dd2a:	6051      	str	r1, [r2, #4]
 800dd2c:	881b      	ldrh	r3, [r3, #0]
 800dd2e:	8113      	strh	r3, [r2, #8]
			break;
 800dd30:	f00e bbf8 	b.w	801c524 <problem_fetch+0x1ae60>
		case 359 :
			strcpy(p->name,"QUARTER PAST MIDNIGHT");
 800dd34:	687b      	ldr	r3, [r7, #4]
 800dd36:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800dd3a:	4a4d      	ldr	r2, [pc, #308]	; (800de70 <problem_fetch+0xc7ac>)
 800dd3c:	461d      	mov	r5, r3
 800dd3e:	4614      	mov	r4, r2
 800dd40:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800dd42:	6028      	str	r0, [r5, #0]
 800dd44:	6069      	str	r1, [r5, #4]
 800dd46:	60aa      	str	r2, [r5, #8]
 800dd48:	60eb      	str	r3, [r5, #12]
 800dd4a:	6820      	ldr	r0, [r4, #0]
 800dd4c:	6128      	str	r0, [r5, #16]
 800dd4e:	88a3      	ldrh	r3, [r4, #4]
 800dd50:	82ab      	strh	r3, [r5, #20]
			strcpy(p->grade,"6C+");
 800dd52:	687b      	ldr	r3, [r7, #4]
 800dd54:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800dd58:	4a31      	ldr	r2, [pc, #196]	; (800de20 <problem_fetch+0xc75c>)
 800dd5a:	6810      	ldr	r0, [r2, #0]
 800dd5c:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 800dd5e:	687b      	ldr	r3, [r7, #4]
 800dd60:	2207      	movs	r2, #7
 800dd62:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,H,G,F,J,G,I");
 800dd64:	687b      	ldr	r3, [r7, #4]
 800dd66:	33a4      	adds	r3, #164	; 0xa4
 800dd68:	4a42      	ldr	r2, [pc, #264]	; (800de74 <problem_fetch+0xc7b0>)
 800dd6a:	461c      	mov	r4, r3
 800dd6c:	4613      	mov	r3, r2
 800dd6e:	cb07      	ldmia	r3!, {r0, r1, r2}
 800dd70:	6020      	str	r0, [r4, #0]
 800dd72:	6061      	str	r1, [r4, #4]
 800dd74:	60a2      	str	r2, [r4, #8]
 800dd76:	881b      	ldrh	r3, [r3, #0]
 800dd78:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,5,9,11,13,15,18");
 800dd7a:	687b      	ldr	r3, [r7, #4]
 800dd7c:	3304      	adds	r3, #4
 800dd7e:	4a3e      	ldr	r2, [pc, #248]	; (800de78 <problem_fetch+0xc7b4>)
 800dd80:	461d      	mov	r5, r3
 800dd82:	4614      	mov	r4, r2
 800dd84:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800dd86:	6028      	str	r0, [r5, #0]
 800dd88:	6069      	str	r1, [r5, #4]
 800dd8a:	60aa      	str	r2, [r5, #8]
 800dd8c:	60eb      	str	r3, [r5, #12]
 800dd8e:	8823      	ldrh	r3, [r4, #0]
 800dd90:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,s,d,d,d,d,e");
 800dd92:	687b      	ldr	r3, [r7, #4]
 800dd94:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800dd98:	4a38      	ldr	r2, [pc, #224]	; (800de7c <problem_fetch+0xc7b8>)
 800dd9a:	461c      	mov	r4, r3
 800dd9c:	4613      	mov	r3, r2
 800dd9e:	cb07      	ldmia	r3!, {r0, r1, r2}
 800dda0:	6020      	str	r0, [r4, #0]
 800dda2:	6061      	str	r1, [r4, #4]
 800dda4:	60a2      	str	r2, [r4, #8]
 800dda6:	881b      	ldrh	r3, [r3, #0]
 800dda8:	81a3      	strh	r3, [r4, #12]
			break;
 800ddaa:	f00e bbbb 	b.w	801c524 <problem_fetch+0x1ae60>
		case 360 :
			strcpy(p->name,"FINGERY BY NATURE");
 800ddae:	687b      	ldr	r3, [r7, #4]
 800ddb0:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800ddb4:	4a32      	ldr	r2, [pc, #200]	; (800de80 <problem_fetch+0xc7bc>)
 800ddb6:	461d      	mov	r5, r3
 800ddb8:	4614      	mov	r4, r2
 800ddba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800ddbc:	6028      	str	r0, [r5, #0]
 800ddbe:	6069      	str	r1, [r5, #4]
 800ddc0:	60aa      	str	r2, [r5, #8]
 800ddc2:	60eb      	str	r3, [r5, #12]
 800ddc4:	8823      	ldrh	r3, [r4, #0]
 800ddc6:	822b      	strh	r3, [r5, #16]
			strcpy(p->grade,"7A");
 800ddc8:	687b      	ldr	r3, [r7, #4]
 800ddca:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800ddce:	4a2d      	ldr	r2, [pc, #180]	; (800de84 <problem_fetch+0xc7c0>)
 800ddd0:	8811      	ldrh	r1, [r2, #0]
 800ddd2:	7892      	ldrb	r2, [r2, #2]
 800ddd4:	8019      	strh	r1, [r3, #0]
 800ddd6:	709a      	strb	r2, [r3, #2]
			p->moveSize = 6;
 800ddd8:	687b      	ldr	r3, [r7, #4]
 800ddda:	2206      	movs	r2, #6
 800dddc:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,E,G,B,E,D");
 800ddde:	687b      	ldr	r3, [r7, #4]
 800dde0:	33a4      	adds	r3, #164	; 0xa4
 800dde2:	4a29      	ldr	r2, [pc, #164]	; (800de88 <problem_fetch+0xc7c4>)
 800dde4:	461c      	mov	r4, r3
 800dde6:	4613      	mov	r3, r2
 800dde8:	cb07      	ldmia	r3!, {r0, r1, r2}
 800ddea:	6020      	str	r0, [r4, #0]
 800ddec:	6061      	str	r1, [r4, #4]
 800ddee:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,6,10,10,14,18");
 800ddf0:	687b      	ldr	r3, [r7, #4]
 800ddf2:	3304      	adds	r3, #4
 800ddf4:	4a25      	ldr	r2, [pc, #148]	; (800de8c <problem_fetch+0xc7c8>)
 800ddf6:	461c      	mov	r4, r3
 800ddf8:	4615      	mov	r5, r2
 800ddfa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ddfc:	6020      	str	r0, [r4, #0]
 800ddfe:	6061      	str	r1, [r4, #4]
 800de00:	60a2      	str	r2, [r4, #8]
 800de02:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 800de04:	687b      	ldr	r3, [r7, #4]
 800de06:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800de0a:	4a08      	ldr	r2, [pc, #32]	; (800de2c <problem_fetch+0xc768>)
 800de0c:	461c      	mov	r4, r3
 800de0e:	4613      	mov	r3, r2
 800de10:	cb07      	ldmia	r3!, {r0, r1, r2}
 800de12:	6020      	str	r0, [r4, #0]
 800de14:	6061      	str	r1, [r4, #4]
 800de16:	60a2      	str	r2, [r4, #8]
			break;
 800de18:	f00e bb84 	b.w	801c524 <problem_fetch+0x1ae60>
 800de1c:	08027e18 	.word	0x08027e18
 800de20:	080238ec 	.word	0x080238ec
 800de24:	08027e24 	.word	0x08027e24
 800de28:	08027a08 	.word	0x08027a08
 800de2c:	08023bf0 	.word	0x08023bf0
 800de30:	08027e30 	.word	0x08027e30
 800de34:	08023854 	.word	0x08023854
 800de38:	08027e40 	.word	0x08027e40
 800de3c:	08027e4c 	.word	0x08027e4c
 800de40:	08023d20 	.word	0x08023d20
 800de44:	08027e5c 	.word	0x08027e5c
 800de48:	08027e6c 	.word	0x08027e6c
 800de4c:	08027e78 	.word	0x08027e78
 800de50:	08023834 	.word	0x08023834
 800de54:	08027e88 	.word	0x08027e88
 800de58:	080239f4 	.word	0x080239f4
 800de5c:	08027e98 	.word	0x08027e98
 800de60:	08027ea4 	.word	0x08027ea4
 800de64:	08027eb4 	.word	0x08027eb4
 800de68:	08027ec0 	.word	0x08027ec0
 800de6c:	08027ecc 	.word	0x08027ecc
 800de70:	08027edc 	.word	0x08027edc
 800de74:	08027ef4 	.word	0x08027ef4
 800de78:	08027f04 	.word	0x08027f04
 800de7c:	080238cc 	.word	0x080238cc
 800de80:	08027f18 	.word	0x08027f18
 800de84:	08023814 	.word	0x08023814
 800de88:	08027f2c 	.word	0x08027f2c
 800de8c:	08027f38 	.word	0x08027f38
		case 361 :
			strcpy(p->name,"FROCENZO A ROCCAMORICE");
 800de90:	687b      	ldr	r3, [r7, #4]
 800de92:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800de96:	4aae      	ldr	r2, [pc, #696]	; (800e150 <problem_fetch+0xca8c>)
 800de98:	461c      	mov	r4, r3
 800de9a:	4615      	mov	r5, r2
 800de9c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800de9e:	6020      	str	r0, [r4, #0]
 800dea0:	6061      	str	r1, [r4, #4]
 800dea2:	60a2      	str	r2, [r4, #8]
 800dea4:	60e3      	str	r3, [r4, #12]
 800dea6:	6828      	ldr	r0, [r5, #0]
 800dea8:	6120      	str	r0, [r4, #16]
 800deaa:	88ab      	ldrh	r3, [r5, #4]
 800deac:	79aa      	ldrb	r2, [r5, #6]
 800deae:	82a3      	strh	r3, [r4, #20]
 800deb0:	4613      	mov	r3, r2
 800deb2:	75a3      	strb	r3, [r4, #22]
			strcpy(p->grade,"7A");
 800deb4:	687b      	ldr	r3, [r7, #4]
 800deb6:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800deba:	4aa6      	ldr	r2, [pc, #664]	; (800e154 <problem_fetch+0xca90>)
 800debc:	8811      	ldrh	r1, [r2, #0]
 800debe:	7892      	ldrb	r2, [r2, #2]
 800dec0:	8019      	strh	r1, [r3, #0]
 800dec2:	709a      	strb	r2, [r3, #2]
			p->moveSize = 5;
 800dec4:	687b      	ldr	r3, [r7, #4]
 800dec6:	2205      	movs	r2, #5
 800dec8:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"E,E,B,D,A");
 800deca:	687b      	ldr	r3, [r7, #4]
 800decc:	33a4      	adds	r3, #164	; 0xa4
 800dece:	49a2      	ldr	r1, [pc, #648]	; (800e158 <problem_fetch+0xca94>)
 800ded0:	461a      	mov	r2, r3
 800ded2:	460b      	mov	r3, r1
 800ded4:	cb03      	ldmia	r3!, {r0, r1}
 800ded6:	6010      	str	r0, [r2, #0]
 800ded8:	6051      	str	r1, [r2, #4]
 800deda:	881b      	ldrh	r3, [r3, #0]
 800dedc:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"6,8,12,15,18");
 800dede:	687b      	ldr	r3, [r7, #4]
 800dee0:	3304      	adds	r3, #4
 800dee2:	4a9e      	ldr	r2, [pc, #632]	; (800e15c <problem_fetch+0xca98>)
 800dee4:	461c      	mov	r4, r3
 800dee6:	4613      	mov	r3, r2
 800dee8:	cb07      	ldmia	r3!, {r0, r1, r2}
 800deea:	6020      	str	r0, [r4, #0]
 800deec:	6061      	str	r1, [r4, #4]
 800deee:	60a2      	str	r2, [r4, #8]
 800def0:	781b      	ldrb	r3, [r3, #0]
 800def2:	7323      	strb	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,e");
 800def4:	687b      	ldr	r3, [r7, #4]
 800def6:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800defa:	4999      	ldr	r1, [pc, #612]	; (800e160 <problem_fetch+0xca9c>)
 800defc:	461a      	mov	r2, r3
 800defe:	460b      	mov	r3, r1
 800df00:	cb03      	ldmia	r3!, {r0, r1}
 800df02:	6010      	str	r0, [r2, #0]
 800df04:	6051      	str	r1, [r2, #4]
 800df06:	881b      	ldrh	r3, [r3, #0]
 800df08:	8113      	strh	r3, [r2, #8]
			break;
 800df0a:	f00e bb0b 	b.w	801c524 <problem_fetch+0x1ae60>
		case 362 :
			strcpy(p->name,"SLING SHOT");
 800df0e:	687b      	ldr	r3, [r7, #4]
 800df10:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800df14:	4993      	ldr	r1, [pc, #588]	; (800e164 <problem_fetch+0xcaa0>)
 800df16:	461a      	mov	r2, r3
 800df18:	460b      	mov	r3, r1
 800df1a:	cb03      	ldmia	r3!, {r0, r1}
 800df1c:	6010      	str	r0, [r2, #0]
 800df1e:	6051      	str	r1, [r2, #4]
 800df20:	8819      	ldrh	r1, [r3, #0]
 800df22:	789b      	ldrb	r3, [r3, #2]
 800df24:	8111      	strh	r1, [r2, #8]
 800df26:	7293      	strb	r3, [r2, #10]
			strcpy(p->grade,"6C");
 800df28:	687b      	ldr	r3, [r7, #4]
 800df2a:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800df2e:	4a8e      	ldr	r2, [pc, #568]	; (800e168 <problem_fetch+0xcaa4>)
 800df30:	8811      	ldrh	r1, [r2, #0]
 800df32:	7892      	ldrb	r2, [r2, #2]
 800df34:	8019      	strh	r1, [r3, #0]
 800df36:	709a      	strb	r2, [r3, #2]
			p->moveSize = 5;
 800df38:	687b      	ldr	r3, [r7, #4]
 800df3a:	2205      	movs	r2, #5
 800df3c:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,C,F,G,I");
 800df3e:	687b      	ldr	r3, [r7, #4]
 800df40:	33a4      	adds	r3, #164	; 0xa4
 800df42:	498a      	ldr	r1, [pc, #552]	; (800e16c <problem_fetch+0xcaa8>)
 800df44:	461a      	mov	r2, r3
 800df46:	460b      	mov	r3, r1
 800df48:	cb03      	ldmia	r3!, {r0, r1}
 800df4a:	6010      	str	r0, [r2, #0]
 800df4c:	6051      	str	r1, [r2, #4]
 800df4e:	881b      	ldrh	r3, [r3, #0]
 800df50:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"4,8,11,14,18");
 800df52:	687b      	ldr	r3, [r7, #4]
 800df54:	3304      	adds	r3, #4
 800df56:	4a86      	ldr	r2, [pc, #536]	; (800e170 <problem_fetch+0xcaac>)
 800df58:	461c      	mov	r4, r3
 800df5a:	4613      	mov	r3, r2
 800df5c:	cb07      	ldmia	r3!, {r0, r1, r2}
 800df5e:	6020      	str	r0, [r4, #0]
 800df60:	6061      	str	r1, [r4, #4]
 800df62:	60a2      	str	r2, [r4, #8]
 800df64:	781b      	ldrb	r3, [r3, #0]
 800df66:	7323      	strb	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,e");
 800df68:	687b      	ldr	r3, [r7, #4]
 800df6a:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800df6e:	497c      	ldr	r1, [pc, #496]	; (800e160 <problem_fetch+0xca9c>)
 800df70:	461a      	mov	r2, r3
 800df72:	460b      	mov	r3, r1
 800df74:	cb03      	ldmia	r3!, {r0, r1}
 800df76:	6010      	str	r0, [r2, #0]
 800df78:	6051      	str	r1, [r2, #4]
 800df7a:	881b      	ldrh	r3, [r3, #0]
 800df7c:	8113      	strh	r3, [r2, #8]
			break;
 800df7e:	f00e bad1 	b.w	801c524 <problem_fetch+0x1ae60>
		case 363 :
			strcpy(p->name,"VANDO");
 800df82:	687b      	ldr	r3, [r7, #4]
 800df84:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800df88:	4a7a      	ldr	r2, [pc, #488]	; (800e174 <problem_fetch+0xcab0>)
 800df8a:	6810      	ldr	r0, [r2, #0]
 800df8c:	6018      	str	r0, [r3, #0]
 800df8e:	8892      	ldrh	r2, [r2, #4]
 800df90:	809a      	strh	r2, [r3, #4]
			strcpy(p->grade,"6B+");
 800df92:	687b      	ldr	r3, [r7, #4]
 800df94:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800df98:	4a77      	ldr	r2, [pc, #476]	; (800e178 <problem_fetch+0xcab4>)
 800df9a:	6810      	ldr	r0, [r2, #0]
 800df9c:	6018      	str	r0, [r3, #0]
			p->moveSize = 5;
 800df9e:	687b      	ldr	r3, [r7, #4]
 800dfa0:	2205      	movs	r2, #5
 800dfa2:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,I,G,D,D");
 800dfa4:	687b      	ldr	r3, [r7, #4]
 800dfa6:	33a4      	adds	r3, #164	; 0xa4
 800dfa8:	4974      	ldr	r1, [pc, #464]	; (800e17c <problem_fetch+0xcab8>)
 800dfaa:	461a      	mov	r2, r3
 800dfac:	460b      	mov	r3, r1
 800dfae:	cb03      	ldmia	r3!, {r0, r1}
 800dfb0:	6010      	str	r0, [r2, #0]
 800dfb2:	6051      	str	r1, [r2, #4]
 800dfb4:	881b      	ldrh	r3, [r3, #0]
 800dfb6:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"5,10,14,15,18");
 800dfb8:	687b      	ldr	r3, [r7, #4]
 800dfba:	3304      	adds	r3, #4
 800dfbc:	4a70      	ldr	r2, [pc, #448]	; (800e180 <problem_fetch+0xcabc>)
 800dfbe:	461c      	mov	r4, r3
 800dfc0:	4613      	mov	r3, r2
 800dfc2:	cb07      	ldmia	r3!, {r0, r1, r2}
 800dfc4:	6020      	str	r0, [r4, #0]
 800dfc6:	6061      	str	r1, [r4, #4]
 800dfc8:	60a2      	str	r2, [r4, #8]
 800dfca:	881b      	ldrh	r3, [r3, #0]
 800dfcc:	81a3      	strh	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,e");
 800dfce:	687b      	ldr	r3, [r7, #4]
 800dfd0:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800dfd4:	4962      	ldr	r1, [pc, #392]	; (800e160 <problem_fetch+0xca9c>)
 800dfd6:	461a      	mov	r2, r3
 800dfd8:	460b      	mov	r3, r1
 800dfda:	cb03      	ldmia	r3!, {r0, r1}
 800dfdc:	6010      	str	r0, [r2, #0]
 800dfde:	6051      	str	r1, [r2, #4]
 800dfe0:	881b      	ldrh	r3, [r3, #0]
 800dfe2:	8113      	strh	r3, [r2, #8]
			break;
 800dfe4:	f00e ba9e 	b.w	801c524 <problem_fetch+0x1ae60>
		case 364 :
			strcpy(p->name,"WARM UP BB");
 800dfe8:	687b      	ldr	r3, [r7, #4]
 800dfea:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800dfee:	4965      	ldr	r1, [pc, #404]	; (800e184 <problem_fetch+0xcac0>)
 800dff0:	461a      	mov	r2, r3
 800dff2:	460b      	mov	r3, r1
 800dff4:	cb03      	ldmia	r3!, {r0, r1}
 800dff6:	6010      	str	r0, [r2, #0]
 800dff8:	6051      	str	r1, [r2, #4]
 800dffa:	8819      	ldrh	r1, [r3, #0]
 800dffc:	789b      	ldrb	r3, [r3, #2]
 800dffe:	8111      	strh	r1, [r2, #8]
 800e000:	7293      	strb	r3, [r2, #10]
			strcpy(p->grade,"6B+");
 800e002:	687b      	ldr	r3, [r7, #4]
 800e004:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800e008:	4a5b      	ldr	r2, [pc, #364]	; (800e178 <problem_fetch+0xcab4>)
 800e00a:	6810      	ldr	r0, [r2, #0]
 800e00c:	6018      	str	r0, [r3, #0]
			p->moveSize = 8;
 800e00e:	687b      	ldr	r3, [r7, #4]
 800e010:	2208      	movs	r2, #8
 800e012:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"E,G,G,E,G,D,G,D");
 800e014:	687b      	ldr	r3, [r7, #4]
 800e016:	33a4      	adds	r3, #164	; 0xa4
 800e018:	4a5b      	ldr	r2, [pc, #364]	; (800e188 <problem_fetch+0xcac4>)
 800e01a:	461c      	mov	r4, r3
 800e01c:	4615      	mov	r5, r2
 800e01e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e020:	6020      	str	r0, [r4, #0]
 800e022:	6061      	str	r1, [r4, #4]
 800e024:	60a2      	str	r2, [r4, #8]
 800e026:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"6,4,9,8,14,15,17,18");
 800e028:	687b      	ldr	r3, [r7, #4]
 800e02a:	3304      	adds	r3, #4
 800e02c:	4a57      	ldr	r2, [pc, #348]	; (800e18c <problem_fetch+0xcac8>)
 800e02e:	461d      	mov	r5, r3
 800e030:	4614      	mov	r4, r2
 800e032:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800e034:	6028      	str	r0, [r5, #0]
 800e036:	6069      	str	r1, [r5, #4]
 800e038:	60aa      	str	r2, [r5, #8]
 800e03a:	60eb      	str	r3, [r5, #12]
 800e03c:	6820      	ldr	r0, [r4, #0]
 800e03e:	6128      	str	r0, [r5, #16]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,e");
 800e040:	687b      	ldr	r3, [r7, #4]
 800e042:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800e046:	4a52      	ldr	r2, [pc, #328]	; (800e190 <problem_fetch+0xcacc>)
 800e048:	461c      	mov	r4, r3
 800e04a:	4615      	mov	r5, r2
 800e04c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e04e:	6020      	str	r0, [r4, #0]
 800e050:	6061      	str	r1, [r4, #4]
 800e052:	60a2      	str	r2, [r4, #8]
 800e054:	60e3      	str	r3, [r4, #12]
			break;
 800e056:	f00e ba65 	b.w	801c524 <problem_fetch+0x1ae60>
		case 365 :
			strcpy(p->name,"SHARK FIN");
 800e05a:	687b      	ldr	r3, [r7, #4]
 800e05c:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800e060:	494c      	ldr	r1, [pc, #304]	; (800e194 <problem_fetch+0xcad0>)
 800e062:	461a      	mov	r2, r3
 800e064:	460b      	mov	r3, r1
 800e066:	cb03      	ldmia	r3!, {r0, r1}
 800e068:	6010      	str	r0, [r2, #0]
 800e06a:	6051      	str	r1, [r2, #4]
 800e06c:	881b      	ldrh	r3, [r3, #0]
 800e06e:	8113      	strh	r3, [r2, #8]
			strcpy(p->grade,"6B+");
 800e070:	687b      	ldr	r3, [r7, #4]
 800e072:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800e076:	4a40      	ldr	r2, [pc, #256]	; (800e178 <problem_fetch+0xcab4>)
 800e078:	6810      	ldr	r0, [r2, #0]
 800e07a:	6018      	str	r0, [r3, #0]
			p->moveSize = 9;
 800e07c:	687b      	ldr	r3, [r7, #4]
 800e07e:	2209      	movs	r2, #9
 800e080:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,H,C,G,D,H,G,C,I");
 800e082:	687b      	ldr	r3, [r7, #4]
 800e084:	33a4      	adds	r3, #164	; 0xa4
 800e086:	4a44      	ldr	r2, [pc, #272]	; (800e198 <problem_fetch+0xcad4>)
 800e088:	461d      	mov	r5, r3
 800e08a:	4614      	mov	r4, r2
 800e08c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800e08e:	6028      	str	r0, [r5, #0]
 800e090:	6069      	str	r1, [r5, #4]
 800e092:	60aa      	str	r2, [r5, #8]
 800e094:	60eb      	str	r3, [r5, #12]
 800e096:	8823      	ldrh	r3, [r4, #0]
 800e098:	822b      	strh	r3, [r5, #16]
			strcpy(p->moveNumbers,"5,5,8,9,11,13,15,5,18");
 800e09a:	687b      	ldr	r3, [r7, #4]
 800e09c:	3304      	adds	r3, #4
 800e09e:	4a3f      	ldr	r2, [pc, #252]	; (800e19c <problem_fetch+0xcad8>)
 800e0a0:	461d      	mov	r5, r3
 800e0a2:	4614      	mov	r4, r2
 800e0a4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800e0a6:	6028      	str	r0, [r5, #0]
 800e0a8:	6069      	str	r1, [r5, #4]
 800e0aa:	60aa      	str	r2, [r5, #8]
 800e0ac:	60eb      	str	r3, [r5, #12]
 800e0ae:	6820      	ldr	r0, [r4, #0]
 800e0b0:	6128      	str	r0, [r5, #16]
 800e0b2:	88a3      	ldrh	r3, [r4, #4]
 800e0b4:	82ab      	strh	r3, [r5, #20]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,d,e");
 800e0b6:	687b      	ldr	r3, [r7, #4]
 800e0b8:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800e0bc:	4a38      	ldr	r2, [pc, #224]	; (800e1a0 <problem_fetch+0xcadc>)
 800e0be:	461d      	mov	r5, r3
 800e0c0:	4614      	mov	r4, r2
 800e0c2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800e0c4:	6028      	str	r0, [r5, #0]
 800e0c6:	6069      	str	r1, [r5, #4]
 800e0c8:	60aa      	str	r2, [r5, #8]
 800e0ca:	60eb      	str	r3, [r5, #12]
 800e0cc:	8823      	ldrh	r3, [r4, #0]
 800e0ce:	822b      	strh	r3, [r5, #16]
			break;
 800e0d0:	f00e ba28 	b.w	801c524 <problem_fetch+0x1ae60>
		case 366 :
			strcpy(p->name,"FUDGE YEAH");
 800e0d4:	687b      	ldr	r3, [r7, #4]
 800e0d6:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800e0da:	4932      	ldr	r1, [pc, #200]	; (800e1a4 <problem_fetch+0xcae0>)
 800e0dc:	461a      	mov	r2, r3
 800e0de:	460b      	mov	r3, r1
 800e0e0:	cb03      	ldmia	r3!, {r0, r1}
 800e0e2:	6010      	str	r0, [r2, #0]
 800e0e4:	6051      	str	r1, [r2, #4]
 800e0e6:	8819      	ldrh	r1, [r3, #0]
 800e0e8:	789b      	ldrb	r3, [r3, #2]
 800e0ea:	8111      	strh	r1, [r2, #8]
 800e0ec:	7293      	strb	r3, [r2, #10]
			strcpy(p->grade,"6B+");
 800e0ee:	687b      	ldr	r3, [r7, #4]
 800e0f0:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800e0f4:	4a20      	ldr	r2, [pc, #128]	; (800e178 <problem_fetch+0xcab4>)
 800e0f6:	6810      	ldr	r0, [r2, #0]
 800e0f8:	6018      	str	r0, [r3, #0]
			p->moveSize = 9;
 800e0fa:	687b      	ldr	r3, [r7, #4]
 800e0fc:	2209      	movs	r2, #9
 800e0fe:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,G,H,G,H,G,I,H,I");
 800e100:	687b      	ldr	r3, [r7, #4]
 800e102:	33a4      	adds	r3, #164	; 0xa4
 800e104:	4a28      	ldr	r2, [pc, #160]	; (800e1a8 <problem_fetch+0xcae4>)
 800e106:	461d      	mov	r5, r3
 800e108:	4614      	mov	r4, r2
 800e10a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800e10c:	6028      	str	r0, [r5, #0]
 800e10e:	6069      	str	r1, [r5, #4]
 800e110:	60aa      	str	r2, [r5, #8]
 800e112:	60eb      	str	r3, [r5, #12]
 800e114:	8823      	ldrh	r3, [r4, #0]
 800e116:	822b      	strh	r3, [r5, #16]
			strcpy(p->moveNumbers,"5,6,8,10,12,14,14,16,18");
 800e118:	687b      	ldr	r3, [r7, #4]
 800e11a:	3304      	adds	r3, #4
 800e11c:	4a23      	ldr	r2, [pc, #140]	; (800e1ac <problem_fetch+0xcae8>)
 800e11e:	461d      	mov	r5, r3
 800e120:	4614      	mov	r4, r2
 800e122:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800e124:	6028      	str	r0, [r5, #0]
 800e126:	6069      	str	r1, [r5, #4]
 800e128:	60aa      	str	r2, [r5, #8]
 800e12a:	60eb      	str	r3, [r5, #12]
 800e12c:	cc03      	ldmia	r4!, {r0, r1}
 800e12e:	6128      	str	r0, [r5, #16]
 800e130:	6169      	str	r1, [r5, #20]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,d,e");
 800e132:	687b      	ldr	r3, [r7, #4]
 800e134:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800e138:	4a19      	ldr	r2, [pc, #100]	; (800e1a0 <problem_fetch+0xcadc>)
 800e13a:	461d      	mov	r5, r3
 800e13c:	4614      	mov	r4, r2
 800e13e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800e140:	6028      	str	r0, [r5, #0]
 800e142:	6069      	str	r1, [r5, #4]
 800e144:	60aa      	str	r2, [r5, #8]
 800e146:	60eb      	str	r3, [r5, #12]
 800e148:	8823      	ldrh	r3, [r4, #0]
 800e14a:	822b      	strh	r3, [r5, #16]
			break;
 800e14c:	f00e b9ea 	b.w	801c524 <problem_fetch+0x1ae60>
 800e150:	08027f48 	.word	0x08027f48
 800e154:	08023814 	.word	0x08023814
 800e158:	08027f60 	.word	0x08027f60
 800e15c:	08027f6c 	.word	0x08027f6c
 800e160:	08023d20 	.word	0x08023d20
 800e164:	08027f7c 	.word	0x08027f7c
 800e168:	08023920 	.word	0x08023920
 800e16c:	08027f88 	.word	0x08027f88
 800e170:	08024f88 	.word	0x08024f88
 800e174:	08027f94 	.word	0x08027f94
 800e178:	08023854 	.word	0x08023854
 800e17c:	08027f9c 	.word	0x08027f9c
 800e180:	08027874 	.word	0x08027874
 800e184:	08027fa8 	.word	0x08027fa8
 800e188:	08027fb4 	.word	0x08027fb4
 800e18c:	08027fc4 	.word	0x08027fc4
 800e190:	08023978 	.word	0x08023978
 800e194:	08027fd8 	.word	0x08027fd8
 800e198:	08027fe4 	.word	0x08027fe4
 800e19c:	08027ff8 	.word	0x08027ff8
 800e1a0:	08024838 	.word	0x08024838
 800e1a4:	08028010 	.word	0x08028010
 800e1a8:	0802801c 	.word	0x0802801c
 800e1ac:	08028030 	.word	0x08028030
		case 367 :
			strcpy(p->name,"VITAMIN B12");
 800e1b0:	687b      	ldr	r3, [r7, #4]
 800e1b2:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800e1b6:	4aa8      	ldr	r2, [pc, #672]	; (800e458 <problem_fetch+0xcd94>)
 800e1b8:	461c      	mov	r4, r3
 800e1ba:	4613      	mov	r3, r2
 800e1bc:	cb07      	ldmia	r3!, {r0, r1, r2}
 800e1be:	6020      	str	r0, [r4, #0]
 800e1c0:	6061      	str	r1, [r4, #4]
 800e1c2:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade,"7A+");
 800e1c4:	687b      	ldr	r3, [r7, #4]
 800e1c6:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800e1ca:	4aa4      	ldr	r2, [pc, #656]	; (800e45c <problem_fetch+0xcd98>)
 800e1cc:	6810      	ldr	r0, [r2, #0]
 800e1ce:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 800e1d0:	687b      	ldr	r3, [r7, #4]
 800e1d2:	2206      	movs	r2, #6
 800e1d4:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"C,A,F,B,E,I");
 800e1d6:	687b      	ldr	r3, [r7, #4]
 800e1d8:	33a4      	adds	r3, #164	; 0xa4
 800e1da:	4aa1      	ldr	r2, [pc, #644]	; (800e460 <problem_fetch+0xcd9c>)
 800e1dc:	461c      	mov	r4, r3
 800e1de:	4613      	mov	r3, r2
 800e1e0:	cb07      	ldmia	r3!, {r0, r1, r2}
 800e1e2:	6020      	str	r0, [r4, #0]
 800e1e4:	6061      	str	r1, [r4, #4]
 800e1e6:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,9,11,12,16,18");
 800e1e8:	687b      	ldr	r3, [r7, #4]
 800e1ea:	3304      	adds	r3, #4
 800e1ec:	4a9d      	ldr	r2, [pc, #628]	; (800e464 <problem_fetch+0xcda0>)
 800e1ee:	461c      	mov	r4, r3
 800e1f0:	4615      	mov	r5, r2
 800e1f2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e1f4:	6020      	str	r0, [r4, #0]
 800e1f6:	6061      	str	r1, [r4, #4]
 800e1f8:	60a2      	str	r2, [r4, #8]
 800e1fa:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 800e1fc:	687b      	ldr	r3, [r7, #4]
 800e1fe:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800e202:	4a99      	ldr	r2, [pc, #612]	; (800e468 <problem_fetch+0xcda4>)
 800e204:	461c      	mov	r4, r3
 800e206:	4613      	mov	r3, r2
 800e208:	cb07      	ldmia	r3!, {r0, r1, r2}
 800e20a:	6020      	str	r0, [r4, #0]
 800e20c:	6061      	str	r1, [r4, #4]
 800e20e:	60a2      	str	r2, [r4, #8]
			break;
 800e210:	f00e b988 	b.w	801c524 <problem_fetch+0x1ae60>
		case 368 :
			strcpy(p->name,"HUFFING BUBBLES");
 800e214:	687b      	ldr	r3, [r7, #4]
 800e216:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800e21a:	4a94      	ldr	r2, [pc, #592]	; (800e46c <problem_fetch+0xcda8>)
 800e21c:	461c      	mov	r4, r3
 800e21e:	4615      	mov	r5, r2
 800e220:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e222:	6020      	str	r0, [r4, #0]
 800e224:	6061      	str	r1, [r4, #4]
 800e226:	60a2      	str	r2, [r4, #8]
 800e228:	60e3      	str	r3, [r4, #12]
			strcpy(p->grade,"7B+");
 800e22a:	687b      	ldr	r3, [r7, #4]
 800e22c:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800e230:	4a8f      	ldr	r2, [pc, #572]	; (800e470 <problem_fetch+0xcdac>)
 800e232:	6810      	ldr	r0, [r2, #0]
 800e234:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 800e236:	687b      	ldr	r3, [r7, #4]
 800e238:	2206      	movs	r2, #6
 800e23a:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,F,B,D,E,A");
 800e23c:	687b      	ldr	r3, [r7, #4]
 800e23e:	33a4      	adds	r3, #164	; 0xa4
 800e240:	4a8c      	ldr	r2, [pc, #560]	; (800e474 <problem_fetch+0xcdb0>)
 800e242:	461c      	mov	r4, r3
 800e244:	4613      	mov	r3, r2
 800e246:	cb07      	ldmia	r3!, {r0, r1, r2}
 800e248:	6020      	str	r0, [r4, #0]
 800e24a:	6061      	str	r1, [r4, #4]
 800e24c:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,11,10,15,6,18");
 800e24e:	687b      	ldr	r3, [r7, #4]
 800e250:	3304      	adds	r3, #4
 800e252:	4a89      	ldr	r2, [pc, #548]	; (800e478 <problem_fetch+0xcdb4>)
 800e254:	461c      	mov	r4, r3
 800e256:	4615      	mov	r5, r2
 800e258:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e25a:	6020      	str	r0, [r4, #0]
 800e25c:	6061      	str	r1, [r4, #4]
 800e25e:	60a2      	str	r2, [r4, #8]
 800e260:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 800e262:	687b      	ldr	r3, [r7, #4]
 800e264:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800e268:	4a7f      	ldr	r2, [pc, #508]	; (800e468 <problem_fetch+0xcda4>)
 800e26a:	461c      	mov	r4, r3
 800e26c:	4613      	mov	r3, r2
 800e26e:	cb07      	ldmia	r3!, {r0, r1, r2}
 800e270:	6020      	str	r0, [r4, #0]
 800e272:	6061      	str	r1, [r4, #4]
 800e274:	60a2      	str	r2, [r4, #8]
			break;
 800e276:	f00e b955 	b.w	801c524 <problem_fetch+0x1ae60>
		case 369 :
			strcpy(p->name,"A SIDE OF FRIES?");
 800e27a:	687b      	ldr	r3, [r7, #4]
 800e27c:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800e280:	4a7e      	ldr	r2, [pc, #504]	; (800e47c <problem_fetch+0xcdb8>)
 800e282:	461d      	mov	r5, r3
 800e284:	4614      	mov	r4, r2
 800e286:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800e288:	6028      	str	r0, [r5, #0]
 800e28a:	6069      	str	r1, [r5, #4]
 800e28c:	60aa      	str	r2, [r5, #8]
 800e28e:	60eb      	str	r3, [r5, #12]
 800e290:	7823      	ldrb	r3, [r4, #0]
 800e292:	742b      	strb	r3, [r5, #16]
			strcpy(p->grade,"7A");
 800e294:	687b      	ldr	r3, [r7, #4]
 800e296:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800e29a:	4a79      	ldr	r2, [pc, #484]	; (800e480 <problem_fetch+0xcdbc>)
 800e29c:	8811      	ldrh	r1, [r2, #0]
 800e29e:	7892      	ldrb	r2, [r2, #2]
 800e2a0:	8019      	strh	r1, [r3, #0]
 800e2a2:	709a      	strb	r2, [r3, #2]
			p->moveSize = 5;
 800e2a4:	687b      	ldr	r3, [r7, #4]
 800e2a6:	2205      	movs	r2, #5
 800e2a8:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"C,E,E,G,I");
 800e2aa:	687b      	ldr	r3, [r7, #4]
 800e2ac:	33a4      	adds	r3, #164	; 0xa4
 800e2ae:	4975      	ldr	r1, [pc, #468]	; (800e484 <problem_fetch+0xcdc0>)
 800e2b0:	461a      	mov	r2, r3
 800e2b2:	460b      	mov	r3, r1
 800e2b4:	cb03      	ldmia	r3!, {r0, r1}
 800e2b6:	6010      	str	r0, [r2, #0]
 800e2b8:	6051      	str	r1, [r2, #4]
 800e2ba:	881b      	ldrh	r3, [r3, #0]
 800e2bc:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"5,8,12,14,18");
 800e2be:	687b      	ldr	r3, [r7, #4]
 800e2c0:	3304      	adds	r3, #4
 800e2c2:	4a71      	ldr	r2, [pc, #452]	; (800e488 <problem_fetch+0xcdc4>)
 800e2c4:	461c      	mov	r4, r3
 800e2c6:	4613      	mov	r3, r2
 800e2c8:	cb07      	ldmia	r3!, {r0, r1, r2}
 800e2ca:	6020      	str	r0, [r4, #0]
 800e2cc:	6061      	str	r1, [r4, #4]
 800e2ce:	60a2      	str	r2, [r4, #8]
 800e2d0:	781b      	ldrb	r3, [r3, #0]
 800e2d2:	7323      	strb	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,e");
 800e2d4:	687b      	ldr	r3, [r7, #4]
 800e2d6:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800e2da:	496c      	ldr	r1, [pc, #432]	; (800e48c <problem_fetch+0xcdc8>)
 800e2dc:	461a      	mov	r2, r3
 800e2de:	460b      	mov	r3, r1
 800e2e0:	cb03      	ldmia	r3!, {r0, r1}
 800e2e2:	6010      	str	r0, [r2, #0]
 800e2e4:	6051      	str	r1, [r2, #4]
 800e2e6:	881b      	ldrh	r3, [r3, #0]
 800e2e8:	8113      	strh	r3, [r2, #8]
			break;
 800e2ea:	f00e b91b 	b.w	801c524 <problem_fetch+0x1ae60>
		case 370 :
			strcpy(p->name,"PINCH WARM UP");
 800e2ee:	687b      	ldr	r3, [r7, #4]
 800e2f0:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800e2f4:	4a66      	ldr	r2, [pc, #408]	; (800e490 <problem_fetch+0xcdcc>)
 800e2f6:	461c      	mov	r4, r3
 800e2f8:	4613      	mov	r3, r2
 800e2fa:	cb07      	ldmia	r3!, {r0, r1, r2}
 800e2fc:	6020      	str	r0, [r4, #0]
 800e2fe:	6061      	str	r1, [r4, #4]
 800e300:	60a2      	str	r2, [r4, #8]
 800e302:	881b      	ldrh	r3, [r3, #0]
 800e304:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade,"6B+");
 800e306:	687b      	ldr	r3, [r7, #4]
 800e308:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800e30c:	4a61      	ldr	r2, [pc, #388]	; (800e494 <problem_fetch+0xcdd0>)
 800e30e:	6810      	ldr	r0, [r2, #0]
 800e310:	6018      	str	r0, [r3, #0]
			p->moveSize = 8;
 800e312:	687b      	ldr	r3, [r7, #4]
 800e314:	2208      	movs	r2, #8
 800e316:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,E,H,D,C,D,A,D");
 800e318:	687b      	ldr	r3, [r7, #4]
 800e31a:	33a4      	adds	r3, #164	; 0xa4
 800e31c:	4a5e      	ldr	r2, [pc, #376]	; (800e498 <problem_fetch+0xcdd4>)
 800e31e:	461c      	mov	r4, r3
 800e320:	4615      	mov	r5, r2
 800e322:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e324:	6020      	str	r0, [r4, #0]
 800e326:	6061      	str	r1, [r4, #4]
 800e328:	60a2      	str	r2, [r4, #8]
 800e32a:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,6,10,11,13,15,14,18");
 800e32c:	687b      	ldr	r3, [r7, #4]
 800e32e:	3304      	adds	r3, #4
 800e330:	4a5a      	ldr	r2, [pc, #360]	; (800e49c <problem_fetch+0xcdd8>)
 800e332:	461d      	mov	r5, r3
 800e334:	4614      	mov	r4, r2
 800e336:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800e338:	6028      	str	r0, [r5, #0]
 800e33a:	6069      	str	r1, [r5, #4]
 800e33c:	60aa      	str	r2, [r5, #8]
 800e33e:	60eb      	str	r3, [r5, #12]
 800e340:	6820      	ldr	r0, [r4, #0]
 800e342:	6128      	str	r0, [r5, #16]
 800e344:	88a3      	ldrh	r3, [r4, #4]
 800e346:	82ab      	strh	r3, [r5, #20]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,e");
 800e348:	687b      	ldr	r3, [r7, #4]
 800e34a:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800e34e:	4a54      	ldr	r2, [pc, #336]	; (800e4a0 <problem_fetch+0xcddc>)
 800e350:	461c      	mov	r4, r3
 800e352:	4615      	mov	r5, r2
 800e354:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e356:	6020      	str	r0, [r4, #0]
 800e358:	6061      	str	r1, [r4, #4]
 800e35a:	60a2      	str	r2, [r4, #8]
 800e35c:	60e3      	str	r3, [r4, #12]
			break;
 800e35e:	f00e b8e1 	b.w	801c524 <problem_fetch+0x1ae60>
		case 371 :
			strcpy(p->name,"PINCH &AMP; REACH");
 800e362:	687b      	ldr	r3, [r7, #4]
 800e364:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800e368:	4a4e      	ldr	r2, [pc, #312]	; (800e4a4 <problem_fetch+0xcde0>)
 800e36a:	461d      	mov	r5, r3
 800e36c:	4614      	mov	r4, r2
 800e36e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800e370:	6028      	str	r0, [r5, #0]
 800e372:	6069      	str	r1, [r5, #4]
 800e374:	60aa      	str	r2, [r5, #8]
 800e376:	60eb      	str	r3, [r5, #12]
 800e378:	8823      	ldrh	r3, [r4, #0]
 800e37a:	822b      	strh	r3, [r5, #16]
			strcpy(p->grade,"6B+");
 800e37c:	687b      	ldr	r3, [r7, #4]
 800e37e:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800e382:	4a44      	ldr	r2, [pc, #272]	; (800e494 <problem_fetch+0xcdd0>)
 800e384:	6810      	ldr	r0, [r2, #0]
 800e386:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 800e388:	687b      	ldr	r3, [r7, #4]
 800e38a:	2207      	movs	r2, #7
 800e38c:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,E,H,D,C,D,D");
 800e38e:	687b      	ldr	r3, [r7, #4]
 800e390:	33a4      	adds	r3, #164	; 0xa4
 800e392:	4a45      	ldr	r2, [pc, #276]	; (800e4a8 <problem_fetch+0xcde4>)
 800e394:	461c      	mov	r4, r3
 800e396:	4613      	mov	r3, r2
 800e398:	cb07      	ldmia	r3!, {r0, r1, r2}
 800e39a:	6020      	str	r0, [r4, #0]
 800e39c:	6061      	str	r1, [r4, #4]
 800e39e:	60a2      	str	r2, [r4, #8]
 800e3a0:	881b      	ldrh	r3, [r3, #0]
 800e3a2:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,6,10,11,13,15,18");
 800e3a4:	687b      	ldr	r3, [r7, #4]
 800e3a6:	3304      	adds	r3, #4
 800e3a8:	4a40      	ldr	r2, [pc, #256]	; (800e4ac <problem_fetch+0xcde8>)
 800e3aa:	461d      	mov	r5, r3
 800e3ac:	4614      	mov	r4, r2
 800e3ae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800e3b0:	6028      	str	r0, [r5, #0]
 800e3b2:	6069      	str	r1, [r5, #4]
 800e3b4:	60aa      	str	r2, [r5, #8]
 800e3b6:	60eb      	str	r3, [r5, #12]
 800e3b8:	8823      	ldrh	r3, [r4, #0]
 800e3ba:	78a2      	ldrb	r2, [r4, #2]
 800e3bc:	822b      	strh	r3, [r5, #16]
 800e3be:	4613      	mov	r3, r2
 800e3c0:	74ab      	strb	r3, [r5, #18]
			strcpy(p->startFinish,"s,s,d,d,d,d,e");
 800e3c2:	687b      	ldr	r3, [r7, #4]
 800e3c4:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800e3c8:	4a39      	ldr	r2, [pc, #228]	; (800e4b0 <problem_fetch+0xcdec>)
 800e3ca:	461c      	mov	r4, r3
 800e3cc:	4613      	mov	r3, r2
 800e3ce:	cb07      	ldmia	r3!, {r0, r1, r2}
 800e3d0:	6020      	str	r0, [r4, #0]
 800e3d2:	6061      	str	r1, [r4, #4]
 800e3d4:	60a2      	str	r2, [r4, #8]
 800e3d6:	881b      	ldrh	r3, [r3, #0]
 800e3d8:	81a3      	strh	r3, [r4, #12]
			break;
 800e3da:	f00e b8a3 	b.w	801c524 <problem_fetch+0x1ae60>
		case 372 :
			strcpy(p->name,"LAYBACK WARM UP");
 800e3de:	687b      	ldr	r3, [r7, #4]
 800e3e0:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800e3e4:	4a33      	ldr	r2, [pc, #204]	; (800e4b4 <problem_fetch+0xcdf0>)
 800e3e6:	461c      	mov	r4, r3
 800e3e8:	4615      	mov	r5, r2
 800e3ea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e3ec:	6020      	str	r0, [r4, #0]
 800e3ee:	6061      	str	r1, [r4, #4]
 800e3f0:	60a2      	str	r2, [r4, #8]
 800e3f2:	60e3      	str	r3, [r4, #12]
			strcpy(p->grade,"6B+");
 800e3f4:	687b      	ldr	r3, [r7, #4]
 800e3f6:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800e3fa:	4a26      	ldr	r2, [pc, #152]	; (800e494 <problem_fetch+0xcdd0>)
 800e3fc:	6810      	ldr	r0, [r2, #0]
 800e3fe:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 800e400:	687b      	ldr	r3, [r7, #4]
 800e402:	2207      	movs	r2, #7
 800e404:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,E,H,C,D,A,D");
 800e406:	687b      	ldr	r3, [r7, #4]
 800e408:	33a4      	adds	r3, #164	; 0xa4
 800e40a:	4a2b      	ldr	r2, [pc, #172]	; (800e4b8 <problem_fetch+0xcdf4>)
 800e40c:	461c      	mov	r4, r3
 800e40e:	4613      	mov	r3, r2
 800e410:	cb07      	ldmia	r3!, {r0, r1, r2}
 800e412:	6020      	str	r0, [r4, #0]
 800e414:	6061      	str	r1, [r4, #4]
 800e416:	60a2      	str	r2, [r4, #8]
 800e418:	881b      	ldrh	r3, [r3, #0]
 800e41a:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,6,10,13,11,14,18");
 800e41c:	687b      	ldr	r3, [r7, #4]
 800e41e:	3304      	adds	r3, #4
 800e420:	4a26      	ldr	r2, [pc, #152]	; (800e4bc <problem_fetch+0xcdf8>)
 800e422:	461d      	mov	r5, r3
 800e424:	4614      	mov	r4, r2
 800e426:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800e428:	6028      	str	r0, [r5, #0]
 800e42a:	6069      	str	r1, [r5, #4]
 800e42c:	60aa      	str	r2, [r5, #8]
 800e42e:	60eb      	str	r3, [r5, #12]
 800e430:	8823      	ldrh	r3, [r4, #0]
 800e432:	78a2      	ldrb	r2, [r4, #2]
 800e434:	822b      	strh	r3, [r5, #16]
 800e436:	4613      	mov	r3, r2
 800e438:	74ab      	strb	r3, [r5, #18]
			strcpy(p->startFinish,"s,s,d,d,d,d,e");
 800e43a:	687b      	ldr	r3, [r7, #4]
 800e43c:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800e440:	4a1b      	ldr	r2, [pc, #108]	; (800e4b0 <problem_fetch+0xcdec>)
 800e442:	461c      	mov	r4, r3
 800e444:	4613      	mov	r3, r2
 800e446:	cb07      	ldmia	r3!, {r0, r1, r2}
 800e448:	6020      	str	r0, [r4, #0]
 800e44a:	6061      	str	r1, [r4, #4]
 800e44c:	60a2      	str	r2, [r4, #8]
 800e44e:	881b      	ldrh	r3, [r3, #0]
 800e450:	81a3      	strh	r3, [r4, #12]
			break;
 800e452:	f00e b867 	b.w	801c524 <problem_fetch+0x1ae60>
 800e456:	bf00      	nop
 800e458:	08028048 	.word	0x08028048
 800e45c:	080239f4 	.word	0x080239f4
 800e460:	08028054 	.word	0x08028054
 800e464:	08028060 	.word	0x08028060
 800e468:	08023bf0 	.word	0x08023bf0
 800e46c:	08028070 	.word	0x08028070
 800e470:	08023990 	.word	0x08023990
 800e474:	08028080 	.word	0x08028080
 800e478:	0802808c 	.word	0x0802808c
 800e47c:	0802809c 	.word	0x0802809c
 800e480:	08023814 	.word	0x08023814
 800e484:	080280b0 	.word	0x080280b0
 800e488:	0802784c 	.word	0x0802784c
 800e48c:	08023d20 	.word	0x08023d20
 800e490:	080280bc 	.word	0x080280bc
 800e494:	08023854 	.word	0x08023854
 800e498:	080280cc 	.word	0x080280cc
 800e49c:	080280dc 	.word	0x080280dc
 800e4a0:	08023978 	.word	0x08023978
 800e4a4:	080280f4 	.word	0x080280f4
 800e4a8:	08028108 	.word	0x08028108
 800e4ac:	08028118 	.word	0x08028118
 800e4b0:	080238cc 	.word	0x080238cc
 800e4b4:	0802812c 	.word	0x0802812c
 800e4b8:	0802813c 	.word	0x0802813c
 800e4bc:	0802814c 	.word	0x0802814c
		case 373 :
			strcpy(p->name,"COMMITTING WARM UP");
 800e4c0:	687b      	ldr	r3, [r7, #4]
 800e4c2:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800e4c6:	4ac2      	ldr	r2, [pc, #776]	; (800e7d0 <problem_fetch+0xd10c>)
 800e4c8:	461d      	mov	r5, r3
 800e4ca:	4614      	mov	r4, r2
 800e4cc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800e4ce:	6028      	str	r0, [r5, #0]
 800e4d0:	6069      	str	r1, [r5, #4]
 800e4d2:	60aa      	str	r2, [r5, #8]
 800e4d4:	60eb      	str	r3, [r5, #12]
 800e4d6:	8823      	ldrh	r3, [r4, #0]
 800e4d8:	78a2      	ldrb	r2, [r4, #2]
 800e4da:	822b      	strh	r3, [r5, #16]
 800e4dc:	4613      	mov	r3, r2
 800e4de:	74ab      	strb	r3, [r5, #18]
			strcpy(p->grade,"6B+");
 800e4e0:	687b      	ldr	r3, [r7, #4]
 800e4e2:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800e4e6:	4abb      	ldr	r2, [pc, #748]	; (800e7d4 <problem_fetch+0xd110>)
 800e4e8:	6810      	ldr	r0, [r2, #0]
 800e4ea:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 800e4ec:	687b      	ldr	r3, [r7, #4]
 800e4ee:	2207      	movs	r2, #7
 800e4f0:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,E,H,D,C,I,D");
 800e4f2:	687b      	ldr	r3, [r7, #4]
 800e4f4:	33a4      	adds	r3, #164	; 0xa4
 800e4f6:	4ab8      	ldr	r2, [pc, #736]	; (800e7d8 <problem_fetch+0xd114>)
 800e4f8:	461c      	mov	r4, r3
 800e4fa:	4613      	mov	r3, r2
 800e4fc:	cb07      	ldmia	r3!, {r0, r1, r2}
 800e4fe:	6020      	str	r0, [r4, #0]
 800e500:	6061      	str	r1, [r4, #4]
 800e502:	60a2      	str	r2, [r4, #8]
 800e504:	881b      	ldrh	r3, [r3, #0]
 800e506:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,6,10,11,13,14,18");
 800e508:	687b      	ldr	r3, [r7, #4]
 800e50a:	3304      	adds	r3, #4
 800e50c:	4ab3      	ldr	r2, [pc, #716]	; (800e7dc <problem_fetch+0xd118>)
 800e50e:	461d      	mov	r5, r3
 800e510:	4614      	mov	r4, r2
 800e512:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800e514:	6028      	str	r0, [r5, #0]
 800e516:	6069      	str	r1, [r5, #4]
 800e518:	60aa      	str	r2, [r5, #8]
 800e51a:	60eb      	str	r3, [r5, #12]
 800e51c:	8823      	ldrh	r3, [r4, #0]
 800e51e:	78a2      	ldrb	r2, [r4, #2]
 800e520:	822b      	strh	r3, [r5, #16]
 800e522:	4613      	mov	r3, r2
 800e524:	74ab      	strb	r3, [r5, #18]
			strcpy(p->startFinish,"s,s,d,d,d,d,e");
 800e526:	687b      	ldr	r3, [r7, #4]
 800e528:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800e52c:	4aac      	ldr	r2, [pc, #688]	; (800e7e0 <problem_fetch+0xd11c>)
 800e52e:	461c      	mov	r4, r3
 800e530:	4613      	mov	r3, r2
 800e532:	cb07      	ldmia	r3!, {r0, r1, r2}
 800e534:	6020      	str	r0, [r4, #0]
 800e536:	6061      	str	r1, [r4, #4]
 800e538:	60a2      	str	r2, [r4, #8]
 800e53a:	881b      	ldrh	r3, [r3, #0]
 800e53c:	81a3      	strh	r3, [r4, #12]
			break;
 800e53e:	f00d bff1 	b.w	801c524 <problem_fetch+0x1ae60>
		case 374 :
			strcpy(p->name,"APEX");
 800e542:	687b      	ldr	r3, [r7, #4]
 800e544:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800e548:	4aa6      	ldr	r2, [pc, #664]	; (800e7e4 <problem_fetch+0xd120>)
 800e54a:	6810      	ldr	r0, [r2, #0]
 800e54c:	6018      	str	r0, [r3, #0]
 800e54e:	7912      	ldrb	r2, [r2, #4]
 800e550:	711a      	strb	r2, [r3, #4]
			strcpy(p->grade,"7C");
 800e552:	687b      	ldr	r3, [r7, #4]
 800e554:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800e558:	4aa3      	ldr	r2, [pc, #652]	; (800e7e8 <problem_fetch+0xd124>)
 800e55a:	8811      	ldrh	r1, [r2, #0]
 800e55c:	7892      	ldrb	r2, [r2, #2]
 800e55e:	8019      	strh	r1, [r3, #0]
 800e560:	709a      	strb	r2, [r3, #2]
			p->moveSize = 4;
 800e562:	687b      	ldr	r3, [r7, #4]
 800e564:	2204      	movs	r2, #4
 800e566:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"E,F,E,I");
 800e568:	687b      	ldr	r3, [r7, #4]
 800e56a:	33a4      	adds	r3, #164	; 0xa4
 800e56c:	499f      	ldr	r1, [pc, #636]	; (800e7ec <problem_fetch+0xd128>)
 800e56e:	461a      	mov	r2, r3
 800e570:	460b      	mov	r3, r1
 800e572:	cb03      	ldmia	r3!, {r0, r1}
 800e574:	6010      	str	r0, [r2, #0]
 800e576:	6051      	str	r1, [r2, #4]
			strcpy(p->moveNumbers,"6,11,14,18");
 800e578:	687b      	ldr	r3, [r7, #4]
 800e57a:	3304      	adds	r3, #4
 800e57c:	499c      	ldr	r1, [pc, #624]	; (800e7f0 <problem_fetch+0xd12c>)
 800e57e:	461a      	mov	r2, r3
 800e580:	460b      	mov	r3, r1
 800e582:	cb03      	ldmia	r3!, {r0, r1}
 800e584:	6010      	str	r0, [r2, #0]
 800e586:	6051      	str	r1, [r2, #4]
 800e588:	8819      	ldrh	r1, [r3, #0]
 800e58a:	789b      	ldrb	r3, [r3, #2]
 800e58c:	8111      	strh	r1, [r2, #8]
 800e58e:	7293      	strb	r3, [r2, #10]
			strcpy(p->startFinish,"s,d,d,e");
 800e590:	687b      	ldr	r3, [r7, #4]
 800e592:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800e596:	4997      	ldr	r1, [pc, #604]	; (800e7f4 <problem_fetch+0xd130>)
 800e598:	461a      	mov	r2, r3
 800e59a:	460b      	mov	r3, r1
 800e59c:	cb03      	ldmia	r3!, {r0, r1}
 800e59e:	6010      	str	r0, [r2, #0]
 800e5a0:	6051      	str	r1, [r2, #4]
			break;
 800e5a2:	f00d bfbf 	b.w	801c524 <problem_fetch+0x1ae60>
		case 375 :
			strcpy(p->name,"MEH");
 800e5a6:	687b      	ldr	r3, [r7, #4]
 800e5a8:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800e5ac:	4a92      	ldr	r2, [pc, #584]	; (800e7f8 <problem_fetch+0xd134>)
 800e5ae:	6810      	ldr	r0, [r2, #0]
 800e5b0:	6018      	str	r0, [r3, #0]
			strcpy(p->grade,"6B+");
 800e5b2:	687b      	ldr	r3, [r7, #4]
 800e5b4:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800e5b8:	4a86      	ldr	r2, [pc, #536]	; (800e7d4 <problem_fetch+0xd110>)
 800e5ba:	6810      	ldr	r0, [r2, #0]
 800e5bc:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 800e5be:	687b      	ldr	r3, [r7, #4]
 800e5c0:	2207      	movs	r2, #7
 800e5c2:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"C,B,E,D,F,G,I");
 800e5c4:	687b      	ldr	r3, [r7, #4]
 800e5c6:	33a4      	adds	r3, #164	; 0xa4
 800e5c8:	4a8c      	ldr	r2, [pc, #560]	; (800e7fc <problem_fetch+0xd138>)
 800e5ca:	461c      	mov	r4, r3
 800e5cc:	4613      	mov	r3, r2
 800e5ce:	cb07      	ldmia	r3!, {r0, r1, r2}
 800e5d0:	6020      	str	r0, [r4, #0]
 800e5d2:	6061      	str	r1, [r4, #4]
 800e5d4:	60a2      	str	r2, [r4, #8]
 800e5d6:	881b      	ldrh	r3, [r3, #0]
 800e5d8:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,6,8,11,13,15,18");
 800e5da:	687b      	ldr	r3, [r7, #4]
 800e5dc:	3304      	adds	r3, #4
 800e5de:	4a88      	ldr	r2, [pc, #544]	; (800e800 <problem_fetch+0xd13c>)
 800e5e0:	461d      	mov	r5, r3
 800e5e2:	4614      	mov	r4, r2
 800e5e4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800e5e6:	6028      	str	r0, [r5, #0]
 800e5e8:	6069      	str	r1, [r5, #4]
 800e5ea:	60aa      	str	r2, [r5, #8]
 800e5ec:	60eb      	str	r3, [r5, #12]
 800e5ee:	8823      	ldrh	r3, [r4, #0]
 800e5f0:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,s,d,d,d,d,e");
 800e5f2:	687b      	ldr	r3, [r7, #4]
 800e5f4:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800e5f8:	4a79      	ldr	r2, [pc, #484]	; (800e7e0 <problem_fetch+0xd11c>)
 800e5fa:	461c      	mov	r4, r3
 800e5fc:	4613      	mov	r3, r2
 800e5fe:	cb07      	ldmia	r3!, {r0, r1, r2}
 800e600:	6020      	str	r0, [r4, #0]
 800e602:	6061      	str	r1, [r4, #4]
 800e604:	60a2      	str	r2, [r4, #8]
 800e606:	881b      	ldrh	r3, [r3, #0]
 800e608:	81a3      	strh	r3, [r4, #12]
			break;
 800e60a:	f00d bf8b 	b.w	801c524 <problem_fetch+0x1ae60>
		case 376 :
			strcpy(p->name,"TE LA TAMALANCH");
 800e60e:	687b      	ldr	r3, [r7, #4]
 800e610:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800e614:	4a7b      	ldr	r2, [pc, #492]	; (800e804 <problem_fetch+0xd140>)
 800e616:	461c      	mov	r4, r3
 800e618:	4615      	mov	r5, r2
 800e61a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e61c:	6020      	str	r0, [r4, #0]
 800e61e:	6061      	str	r1, [r4, #4]
 800e620:	60a2      	str	r2, [r4, #8]
 800e622:	60e3      	str	r3, [r4, #12]
			strcpy(p->grade,"7A+");
 800e624:	687b      	ldr	r3, [r7, #4]
 800e626:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800e62a:	4a77      	ldr	r2, [pc, #476]	; (800e808 <problem_fetch+0xd144>)
 800e62c:	6810      	ldr	r0, [r2, #0]
 800e62e:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 800e630:	687b      	ldr	r3, [r7, #4]
 800e632:	2206      	movs	r2, #6
 800e634:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,E,G,D,D,A");
 800e636:	687b      	ldr	r3, [r7, #4]
 800e638:	33a4      	adds	r3, #164	; 0xa4
 800e63a:	4a74      	ldr	r2, [pc, #464]	; (800e80c <problem_fetch+0xd148>)
 800e63c:	461c      	mov	r4, r3
 800e63e:	4613      	mov	r3, r2
 800e640:	cb07      	ldmia	r3!, {r0, r1, r2}
 800e642:	6020      	str	r0, [r4, #0]
 800e644:	6061      	str	r1, [r4, #4]
 800e646:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,6,9,11,15,18");
 800e648:	687b      	ldr	r3, [r7, #4]
 800e64a:	3304      	adds	r3, #4
 800e64c:	4a70      	ldr	r2, [pc, #448]	; (800e810 <problem_fetch+0xd14c>)
 800e64e:	461c      	mov	r4, r3
 800e650:	4613      	mov	r3, r2
 800e652:	cb07      	ldmia	r3!, {r0, r1, r2}
 800e654:	6020      	str	r0, [r4, #0]
 800e656:	6061      	str	r1, [r4, #4]
 800e658:	60a2      	str	r2, [r4, #8]
 800e65a:	881a      	ldrh	r2, [r3, #0]
 800e65c:	789b      	ldrb	r3, [r3, #2]
 800e65e:	81a2      	strh	r2, [r4, #12]
 800e660:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 800e662:	687b      	ldr	r3, [r7, #4]
 800e664:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800e668:	4a6a      	ldr	r2, [pc, #424]	; (800e814 <problem_fetch+0xd150>)
 800e66a:	461c      	mov	r4, r3
 800e66c:	4613      	mov	r3, r2
 800e66e:	cb07      	ldmia	r3!, {r0, r1, r2}
 800e670:	6020      	str	r0, [r4, #0]
 800e672:	6061      	str	r1, [r4, #4]
 800e674:	60a2      	str	r2, [r4, #8]
			break;
 800e676:	f00d bf55 	b.w	801c524 <problem_fetch+0x1ae60>
		case 377 :
			strcpy(p->name,"BITE YOUR NAILS");
 800e67a:	687b      	ldr	r3, [r7, #4]
 800e67c:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800e680:	4a65      	ldr	r2, [pc, #404]	; (800e818 <problem_fetch+0xd154>)
 800e682:	461c      	mov	r4, r3
 800e684:	4615      	mov	r5, r2
 800e686:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e688:	6020      	str	r0, [r4, #0]
 800e68a:	6061      	str	r1, [r4, #4]
 800e68c:	60a2      	str	r2, [r4, #8]
 800e68e:	60e3      	str	r3, [r4, #12]
			strcpy(p->grade,"7B");
 800e690:	687b      	ldr	r3, [r7, #4]
 800e692:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800e696:	4a61      	ldr	r2, [pc, #388]	; (800e81c <problem_fetch+0xd158>)
 800e698:	8811      	ldrh	r1, [r2, #0]
 800e69a:	7892      	ldrb	r2, [r2, #2]
 800e69c:	8019      	strh	r1, [r3, #0]
 800e69e:	709a      	strb	r2, [r3, #2]
			p->moveSize = 6;
 800e6a0:	687b      	ldr	r3, [r7, #4]
 800e6a2:	2206      	movs	r2, #6
 800e6a4:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,B,E,C,E,D");
 800e6a6:	687b      	ldr	r3, [r7, #4]
 800e6a8:	33a4      	adds	r3, #164	; 0xa4
 800e6aa:	4a5d      	ldr	r2, [pc, #372]	; (800e820 <problem_fetch+0xd15c>)
 800e6ac:	461c      	mov	r4, r3
 800e6ae:	4613      	mov	r3, r2
 800e6b0:	cb07      	ldmia	r3!, {r0, r1, r2}
 800e6b2:	6020      	str	r0, [r4, #0]
 800e6b4:	6061      	str	r1, [r4, #4]
 800e6b6:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,6,9,13,16,18");
 800e6b8:	687b      	ldr	r3, [r7, #4]
 800e6ba:	3304      	adds	r3, #4
 800e6bc:	4a59      	ldr	r2, [pc, #356]	; (800e824 <problem_fetch+0xd160>)
 800e6be:	461c      	mov	r4, r3
 800e6c0:	4613      	mov	r3, r2
 800e6c2:	cb07      	ldmia	r3!, {r0, r1, r2}
 800e6c4:	6020      	str	r0, [r4, #0]
 800e6c6:	6061      	str	r1, [r4, #4]
 800e6c8:	60a2      	str	r2, [r4, #8]
 800e6ca:	881a      	ldrh	r2, [r3, #0]
 800e6cc:	789b      	ldrb	r3, [r3, #2]
 800e6ce:	81a2      	strh	r2, [r4, #12]
 800e6d0:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish,"s,s,d,d,d,e");
 800e6d2:	687b      	ldr	r3, [r7, #4]
 800e6d4:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800e6d8:	4a53      	ldr	r2, [pc, #332]	; (800e828 <problem_fetch+0xd164>)
 800e6da:	461c      	mov	r4, r3
 800e6dc:	4613      	mov	r3, r2
 800e6de:	cb07      	ldmia	r3!, {r0, r1, r2}
 800e6e0:	6020      	str	r0, [r4, #0]
 800e6e2:	6061      	str	r1, [r4, #4]
 800e6e4:	60a2      	str	r2, [r4, #8]
			break;
 800e6e6:	f00d bf1d 	b.w	801c524 <problem_fetch+0x1ae60>
		case 378 :
			strcpy(p->name,"BIT OF SIDE");
 800e6ea:	687b      	ldr	r3, [r7, #4]
 800e6ec:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800e6f0:	4a4e      	ldr	r2, [pc, #312]	; (800e82c <problem_fetch+0xd168>)
 800e6f2:	461c      	mov	r4, r3
 800e6f4:	4613      	mov	r3, r2
 800e6f6:	cb07      	ldmia	r3!, {r0, r1, r2}
 800e6f8:	6020      	str	r0, [r4, #0]
 800e6fa:	6061      	str	r1, [r4, #4]
 800e6fc:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade,"6B+");
 800e6fe:	687b      	ldr	r3, [r7, #4]
 800e700:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800e704:	4a33      	ldr	r2, [pc, #204]	; (800e7d4 <problem_fetch+0xd110>)
 800e706:	6810      	ldr	r0, [r2, #0]
 800e708:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 800e70a:	687b      	ldr	r3, [r7, #4]
 800e70c:	2206      	movs	r2, #6
 800e70e:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,G,H,C,D,A");
 800e710:	687b      	ldr	r3, [r7, #4]
 800e712:	33a4      	adds	r3, #164	; 0xa4
 800e714:	4a46      	ldr	r2, [pc, #280]	; (800e830 <problem_fetch+0xd16c>)
 800e716:	461c      	mov	r4, r3
 800e718:	4613      	mov	r3, r2
 800e71a:	cb07      	ldmia	r3!, {r0, r1, r2}
 800e71c:	6020      	str	r0, [r4, #0]
 800e71e:	6061      	str	r1, [r4, #4]
 800e720:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,6,10,13,15,18");
 800e722:	687b      	ldr	r3, [r7, #4]
 800e724:	3304      	adds	r3, #4
 800e726:	4a43      	ldr	r2, [pc, #268]	; (800e834 <problem_fetch+0xd170>)
 800e728:	461c      	mov	r4, r3
 800e72a:	4615      	mov	r5, r2
 800e72c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e72e:	6020      	str	r0, [r4, #0]
 800e730:	6061      	str	r1, [r4, #4]
 800e732:	60a2      	str	r2, [r4, #8]
 800e734:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,s,d,d,d,e");
 800e736:	687b      	ldr	r3, [r7, #4]
 800e738:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800e73c:	4a3a      	ldr	r2, [pc, #232]	; (800e828 <problem_fetch+0xd164>)
 800e73e:	461c      	mov	r4, r3
 800e740:	4613      	mov	r3, r2
 800e742:	cb07      	ldmia	r3!, {r0, r1, r2}
 800e744:	6020      	str	r0, [r4, #0]
 800e746:	6061      	str	r1, [r4, #4]
 800e748:	60a2      	str	r2, [r4, #8]
			break;
 800e74a:	f00d beeb 	b.w	801c524 <problem_fetch+0x1ae60>
		case 379 :
			strcpy(p->name,"LIZARD 3");
 800e74e:	687b      	ldr	r3, [r7, #4]
 800e750:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800e754:	4938      	ldr	r1, [pc, #224]	; (800e838 <problem_fetch+0xd174>)
 800e756:	461a      	mov	r2, r3
 800e758:	460b      	mov	r3, r1
 800e75a:	cb03      	ldmia	r3!, {r0, r1}
 800e75c:	6010      	str	r0, [r2, #0]
 800e75e:	6051      	str	r1, [r2, #4]
 800e760:	781b      	ldrb	r3, [r3, #0]
 800e762:	7213      	strb	r3, [r2, #8]
			strcpy(p->grade,"6C+");
 800e764:	687b      	ldr	r3, [r7, #4]
 800e766:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800e76a:	4a34      	ldr	r2, [pc, #208]	; (800e83c <problem_fetch+0xd178>)
 800e76c:	6810      	ldr	r0, [r2, #0]
 800e76e:	6018      	str	r0, [r3, #0]
			p->moveSize = 12;
 800e770:	687b      	ldr	r3, [r7, #4]
 800e772:	220c      	movs	r2, #12
 800e774:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,H,J,I,H,F,E,C,D,B,A,A");
 800e776:	687b      	ldr	r3, [r7, #4]
 800e778:	33a4      	adds	r3, #164	; 0xa4
 800e77a:	4a31      	ldr	r2, [pc, #196]	; (800e840 <problem_fetch+0xd17c>)
 800e77c:	461d      	mov	r5, r3
 800e77e:	4614      	mov	r4, r2
 800e780:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800e782:	6028      	str	r0, [r5, #0]
 800e784:	6069      	str	r1, [r5, #4]
 800e786:	60aa      	str	r2, [r5, #8]
 800e788:	60eb      	str	r3, [r5, #12]
 800e78a:	cc03      	ldmia	r4!, {r0, r1}
 800e78c:	6128      	str	r0, [r5, #16]
 800e78e:	6169      	str	r1, [r5, #20]
			strcpy(p->moveNumbers,"4,5,5,10,10,11,12,13,15,15,9,18");
 800e790:	687b      	ldr	r3, [r7, #4]
 800e792:	3304      	adds	r3, #4
 800e794:	4a2b      	ldr	r2, [pc, #172]	; (800e844 <problem_fetch+0xd180>)
 800e796:	461c      	mov	r4, r3
 800e798:	4615      	mov	r5, r2
 800e79a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e79c:	6020      	str	r0, [r4, #0]
 800e79e:	6061      	str	r1, [r4, #4]
 800e7a0:	60a2      	str	r2, [r4, #8]
 800e7a2:	60e3      	str	r3, [r4, #12]
 800e7a4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e7a6:	6120      	str	r0, [r4, #16]
 800e7a8:	6161      	str	r1, [r4, #20]
 800e7aa:	61a2      	str	r2, [r4, #24]
 800e7ac:	61e3      	str	r3, [r4, #28]
			strcpy(p->startFinish,"s,d,d,d,d,d,d,d,d,d,d,e");
 800e7ae:	687b      	ldr	r3, [r7, #4]
 800e7b0:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800e7b4:	4a24      	ldr	r2, [pc, #144]	; (800e848 <problem_fetch+0xd184>)
 800e7b6:	461d      	mov	r5, r3
 800e7b8:	4614      	mov	r4, r2
 800e7ba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800e7bc:	6028      	str	r0, [r5, #0]
 800e7be:	6069      	str	r1, [r5, #4]
 800e7c0:	60aa      	str	r2, [r5, #8]
 800e7c2:	60eb      	str	r3, [r5, #12]
 800e7c4:	cc03      	ldmia	r4!, {r0, r1}
 800e7c6:	6128      	str	r0, [r5, #16]
 800e7c8:	6169      	str	r1, [r5, #20]
			break;
 800e7ca:	f00d beab 	b.w	801c524 <problem_fetch+0x1ae60>
 800e7ce:	bf00      	nop
 800e7d0:	08028160 	.word	0x08028160
 800e7d4:	08023854 	.word	0x08023854
 800e7d8:	08028174 	.word	0x08028174
 800e7dc:	08028184 	.word	0x08028184
 800e7e0:	080238cc 	.word	0x080238cc
 800e7e4:	08028198 	.word	0x08028198
 800e7e8:	08024088 	.word	0x08024088
 800e7ec:	080281a0 	.word	0x080281a0
 800e7f0:	080277e0 	.word	0x080277e0
 800e7f4:	080239a8 	.word	0x080239a8
 800e7f8:	080281a8 	.word	0x080281a8
 800e7fc:	080281ac 	.word	0x080281ac
 800e800:	080281bc 	.word	0x080281bc
 800e804:	080281d0 	.word	0x080281d0
 800e808:	080239f4 	.word	0x080239f4
 800e80c:	080281e0 	.word	0x080281e0
 800e810:	080281ec 	.word	0x080281ec
 800e814:	08023bf0 	.word	0x08023bf0
 800e818:	080281fc 	.word	0x080281fc
 800e81c:	08023f4c 	.word	0x08023f4c
 800e820:	0802820c 	.word	0x0802820c
 800e824:	08028218 	.word	0x08028218
 800e828:	08023834 	.word	0x08023834
 800e82c:	08028228 	.word	0x08028228
 800e830:	08028234 	.word	0x08028234
 800e834:	08028240 	.word	0x08028240
 800e838:	08028250 	.word	0x08028250
 800e83c:	080238ec 	.word	0x080238ec
 800e840:	0802825c 	.word	0x0802825c
 800e844:	08028274 	.word	0x08028274
 800e848:	08028294 	.word	0x08028294
		case 380 :
			strcpy(p->name,"MOLOTOV COCKTEASE");
 800e84c:	687b      	ldr	r3, [r7, #4]
 800e84e:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800e852:	4aab      	ldr	r2, [pc, #684]	; (800eb00 <problem_fetch+0xd43c>)
 800e854:	461d      	mov	r5, r3
 800e856:	4614      	mov	r4, r2
 800e858:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800e85a:	6028      	str	r0, [r5, #0]
 800e85c:	6069      	str	r1, [r5, #4]
 800e85e:	60aa      	str	r2, [r5, #8]
 800e860:	60eb      	str	r3, [r5, #12]
 800e862:	8823      	ldrh	r3, [r4, #0]
 800e864:	822b      	strh	r3, [r5, #16]
			strcpy(p->grade,"7C+");
 800e866:	687b      	ldr	r3, [r7, #4]
 800e868:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800e86c:	4aa5      	ldr	r2, [pc, #660]	; (800eb04 <problem_fetch+0xd440>)
 800e86e:	6810      	ldr	r0, [r2, #0]
 800e870:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 800e872:	687b      	ldr	r3, [r7, #4]
 800e874:	2206      	movs	r2, #6
 800e876:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"E,G,I,G,K,I");
 800e878:	687b      	ldr	r3, [r7, #4]
 800e87a:	33a4      	adds	r3, #164	; 0xa4
 800e87c:	4aa2      	ldr	r2, [pc, #648]	; (800eb08 <problem_fetch+0xd444>)
 800e87e:	461c      	mov	r4, r3
 800e880:	4613      	mov	r3, r2
 800e882:	cb07      	ldmia	r3!, {r0, r1, r2}
 800e884:	6020      	str	r0, [r4, #0]
 800e886:	6061      	str	r1, [r4, #4]
 800e888:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"6,9,7,14,14,18");
 800e88a:	687b      	ldr	r3, [r7, #4]
 800e88c:	3304      	adds	r3, #4
 800e88e:	4a9f      	ldr	r2, [pc, #636]	; (800eb0c <problem_fetch+0xd448>)
 800e890:	461c      	mov	r4, r3
 800e892:	4613      	mov	r3, r2
 800e894:	cb07      	ldmia	r3!, {r0, r1, r2}
 800e896:	6020      	str	r0, [r4, #0]
 800e898:	6061      	str	r1, [r4, #4]
 800e89a:	60a2      	str	r2, [r4, #8]
 800e89c:	881a      	ldrh	r2, [r3, #0]
 800e89e:	789b      	ldrb	r3, [r3, #2]
 800e8a0:	81a2      	strh	r2, [r4, #12]
 800e8a2:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 800e8a4:	687b      	ldr	r3, [r7, #4]
 800e8a6:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800e8aa:	4a99      	ldr	r2, [pc, #612]	; (800eb10 <problem_fetch+0xd44c>)
 800e8ac:	461c      	mov	r4, r3
 800e8ae:	4613      	mov	r3, r2
 800e8b0:	cb07      	ldmia	r3!, {r0, r1, r2}
 800e8b2:	6020      	str	r0, [r4, #0]
 800e8b4:	6061      	str	r1, [r4, #4]
 800e8b6:	60a2      	str	r2, [r4, #8]
			break;
 800e8b8:	f00d be34 	b.w	801c524 <problem_fetch+0x1ae60>
		case 381 :
			strcpy(p->name,"BIROBIDJAN");
 800e8bc:	687b      	ldr	r3, [r7, #4]
 800e8be:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800e8c2:	4994      	ldr	r1, [pc, #592]	; (800eb14 <problem_fetch+0xd450>)
 800e8c4:	461a      	mov	r2, r3
 800e8c6:	460b      	mov	r3, r1
 800e8c8:	cb03      	ldmia	r3!, {r0, r1}
 800e8ca:	6010      	str	r0, [r2, #0]
 800e8cc:	6051      	str	r1, [r2, #4]
 800e8ce:	8819      	ldrh	r1, [r3, #0]
 800e8d0:	789b      	ldrb	r3, [r3, #2]
 800e8d2:	8111      	strh	r1, [r2, #8]
 800e8d4:	7293      	strb	r3, [r2, #10]
			strcpy(p->grade,"6C+");
 800e8d6:	687b      	ldr	r3, [r7, #4]
 800e8d8:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800e8dc:	4a8e      	ldr	r2, [pc, #568]	; (800eb18 <problem_fetch+0xd454>)
 800e8de:	6810      	ldr	r0, [r2, #0]
 800e8e0:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 800e8e2:	687b      	ldr	r3, [r7, #4]
 800e8e4:	2206      	movs	r2, #6
 800e8e6:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,E,E,C,E,A");
 800e8e8:	687b      	ldr	r3, [r7, #4]
 800e8ea:	33a4      	adds	r3, #164	; 0xa4
 800e8ec:	4a8b      	ldr	r2, [pc, #556]	; (800eb1c <problem_fetch+0xd458>)
 800e8ee:	461c      	mov	r4, r3
 800e8f0:	4613      	mov	r3, r2
 800e8f2:	cb07      	ldmia	r3!, {r0, r1, r2}
 800e8f4:	6020      	str	r0, [r4, #0]
 800e8f6:	6061      	str	r1, [r4, #4]
 800e8f8:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,8,9,13,16,18");
 800e8fa:	687b      	ldr	r3, [r7, #4]
 800e8fc:	3304      	adds	r3, #4
 800e8fe:	4a88      	ldr	r2, [pc, #544]	; (800eb20 <problem_fetch+0xd45c>)
 800e900:	461c      	mov	r4, r3
 800e902:	4613      	mov	r3, r2
 800e904:	cb07      	ldmia	r3!, {r0, r1, r2}
 800e906:	6020      	str	r0, [r4, #0]
 800e908:	6061      	str	r1, [r4, #4]
 800e90a:	60a2      	str	r2, [r4, #8]
 800e90c:	881a      	ldrh	r2, [r3, #0]
 800e90e:	789b      	ldrb	r3, [r3, #2]
 800e910:	81a2      	strh	r2, [r4, #12]
 800e912:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 800e914:	687b      	ldr	r3, [r7, #4]
 800e916:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800e91a:	4a7d      	ldr	r2, [pc, #500]	; (800eb10 <problem_fetch+0xd44c>)
 800e91c:	461c      	mov	r4, r3
 800e91e:	4613      	mov	r3, r2
 800e920:	cb07      	ldmia	r3!, {r0, r1, r2}
 800e922:	6020      	str	r0, [r4, #0]
 800e924:	6061      	str	r1, [r4, #4]
 800e926:	60a2      	str	r2, [r4, #8]
			break;
 800e928:	f00d bdfc 	b.w	801c524 <problem_fetch+0x1ae60>
		case 382 :
			strcpy(p->name,"BLACK PANTHER");
 800e92c:	687b      	ldr	r3, [r7, #4]
 800e92e:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800e932:	4a7c      	ldr	r2, [pc, #496]	; (800eb24 <problem_fetch+0xd460>)
 800e934:	461c      	mov	r4, r3
 800e936:	4613      	mov	r3, r2
 800e938:	cb07      	ldmia	r3!, {r0, r1, r2}
 800e93a:	6020      	str	r0, [r4, #0]
 800e93c:	6061      	str	r1, [r4, #4]
 800e93e:	60a2      	str	r2, [r4, #8]
 800e940:	881b      	ldrh	r3, [r3, #0]
 800e942:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade,"6B+");
 800e944:	687b      	ldr	r3, [r7, #4]
 800e946:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800e94a:	4a77      	ldr	r2, [pc, #476]	; (800eb28 <problem_fetch+0xd464>)
 800e94c:	6810      	ldr	r0, [r2, #0]
 800e94e:	6018      	str	r0, [r3, #0]
			p->moveSize = 13;
 800e950:	687b      	ldr	r3, [r7, #4]
 800e952:	220d      	movs	r2, #13
 800e954:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,H,E,G,C,B,H,C,D,D,F,G,A");
 800e956:	687b      	ldr	r3, [r7, #4]
 800e958:	33a4      	adds	r3, #164	; 0xa4
 800e95a:	4a74      	ldr	r2, [pc, #464]	; (800eb2c <problem_fetch+0xd468>)
 800e95c:	461d      	mov	r5, r3
 800e95e:	4614      	mov	r4, r2
 800e960:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800e962:	6028      	str	r0, [r5, #0]
 800e964:	6069      	str	r1, [r5, #4]
 800e966:	60aa      	str	r2, [r5, #8]
 800e968:	60eb      	str	r3, [r5, #12]
 800e96a:	cc03      	ldmia	r4!, {r0, r1}
 800e96c:	6128      	str	r0, [r5, #16]
 800e96e:	6169      	str	r1, [r5, #20]
 800e970:	8823      	ldrh	r3, [r4, #0]
 800e972:	832b      	strh	r3, [r5, #24]
			strcpy(p->moveNumbers,"4,5,8,9,16,15,8,13,11,15,11,6,18");
 800e974:	687b      	ldr	r3, [r7, #4]
 800e976:	3304      	adds	r3, #4
 800e978:	4a6d      	ldr	r2, [pc, #436]	; (800eb30 <problem_fetch+0xd46c>)
 800e97a:	4614      	mov	r4, r2
 800e97c:	469c      	mov	ip, r3
 800e97e:	f104 0e20 	add.w	lr, r4, #32
 800e982:	4665      	mov	r5, ip
 800e984:	4626      	mov	r6, r4
 800e986:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800e988:	6028      	str	r0, [r5, #0]
 800e98a:	6069      	str	r1, [r5, #4]
 800e98c:	60aa      	str	r2, [r5, #8]
 800e98e:	60eb      	str	r3, [r5, #12]
 800e990:	3410      	adds	r4, #16
 800e992:	f10c 0c10 	add.w	ip, ip, #16
 800e996:	4574      	cmp	r4, lr
 800e998:	d1f3      	bne.n	800e982 <problem_fetch+0xd2be>
 800e99a:	4663      	mov	r3, ip
 800e99c:	4622      	mov	r2, r4
 800e99e:	7812      	ldrb	r2, [r2, #0]
 800e9a0:	701a      	strb	r2, [r3, #0]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,d,d,d,d,d,e");
 800e9a2:	687b      	ldr	r3, [r7, #4]
 800e9a4:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800e9a8:	4a62      	ldr	r2, [pc, #392]	; (800eb34 <problem_fetch+0xd470>)
 800e9aa:	461d      	mov	r5, r3
 800e9ac:	4614      	mov	r4, r2
 800e9ae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800e9b0:	6028      	str	r0, [r5, #0]
 800e9b2:	6069      	str	r1, [r5, #4]
 800e9b4:	60aa      	str	r2, [r5, #8]
 800e9b6:	60eb      	str	r3, [r5, #12]
 800e9b8:	cc03      	ldmia	r4!, {r0, r1}
 800e9ba:	6128      	str	r0, [r5, #16]
 800e9bc:	6169      	str	r1, [r5, #20]
 800e9be:	8823      	ldrh	r3, [r4, #0]
 800e9c0:	832b      	strh	r3, [r5, #24]
			break;
 800e9c2:	f00d bdaf 	b.w	801c524 <problem_fetch+0x1ae60>
		case 383 :
			strcpy(p->name,"HOLE IN FOUR");
 800e9c6:	687b      	ldr	r3, [r7, #4]
 800e9c8:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800e9cc:	4a5a      	ldr	r2, [pc, #360]	; (800eb38 <problem_fetch+0xd474>)
 800e9ce:	461c      	mov	r4, r3
 800e9d0:	4613      	mov	r3, r2
 800e9d2:	cb07      	ldmia	r3!, {r0, r1, r2}
 800e9d4:	6020      	str	r0, [r4, #0]
 800e9d6:	6061      	str	r1, [r4, #4]
 800e9d8:	60a2      	str	r2, [r4, #8]
 800e9da:	781b      	ldrb	r3, [r3, #0]
 800e9dc:	7323      	strb	r3, [r4, #12]
			strcpy(p->grade,"7A+");
 800e9de:	687b      	ldr	r3, [r7, #4]
 800e9e0:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800e9e4:	4a55      	ldr	r2, [pc, #340]	; (800eb3c <problem_fetch+0xd478>)
 800e9e6:	6810      	ldr	r0, [r2, #0]
 800e9e8:	6018      	str	r0, [r3, #0]
			p->moveSize = 5;
 800e9ea:	687b      	ldr	r3, [r7, #4]
 800e9ec:	2205      	movs	r2, #5
 800e9ee:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"E,G,B,D,A");
 800e9f0:	687b      	ldr	r3, [r7, #4]
 800e9f2:	33a4      	adds	r3, #164	; 0xa4
 800e9f4:	4952      	ldr	r1, [pc, #328]	; (800eb40 <problem_fetch+0xd47c>)
 800e9f6:	461a      	mov	r2, r3
 800e9f8:	460b      	mov	r3, r1
 800e9fa:	cb03      	ldmia	r3!, {r0, r1}
 800e9fc:	6010      	str	r0, [r2, #0]
 800e9fe:	6051      	str	r1, [r2, #4]
 800ea00:	881b      	ldrh	r3, [r3, #0]
 800ea02:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"6,10,10,15,18");
 800ea04:	687b      	ldr	r3, [r7, #4]
 800ea06:	3304      	adds	r3, #4
 800ea08:	4a4e      	ldr	r2, [pc, #312]	; (800eb44 <problem_fetch+0xd480>)
 800ea0a:	461c      	mov	r4, r3
 800ea0c:	4613      	mov	r3, r2
 800ea0e:	cb07      	ldmia	r3!, {r0, r1, r2}
 800ea10:	6020      	str	r0, [r4, #0]
 800ea12:	6061      	str	r1, [r4, #4]
 800ea14:	60a2      	str	r2, [r4, #8]
 800ea16:	881b      	ldrh	r3, [r3, #0]
 800ea18:	81a3      	strh	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,e");
 800ea1a:	687b      	ldr	r3, [r7, #4]
 800ea1c:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800ea20:	4949      	ldr	r1, [pc, #292]	; (800eb48 <problem_fetch+0xd484>)
 800ea22:	461a      	mov	r2, r3
 800ea24:	460b      	mov	r3, r1
 800ea26:	cb03      	ldmia	r3!, {r0, r1}
 800ea28:	6010      	str	r0, [r2, #0]
 800ea2a:	6051      	str	r1, [r2, #4]
 800ea2c:	881b      	ldrh	r3, [r3, #0]
 800ea2e:	8113      	strh	r3, [r2, #8]
			break;
 800ea30:	f00d bd78 	b.w	801c524 <problem_fetch+0x1ae60>
		case 384 :
			strcpy(p->name,"POLARIS");
 800ea34:	687b      	ldr	r3, [r7, #4]
 800ea36:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800ea3a:	4944      	ldr	r1, [pc, #272]	; (800eb4c <problem_fetch+0xd488>)
 800ea3c:	461a      	mov	r2, r3
 800ea3e:	460b      	mov	r3, r1
 800ea40:	cb03      	ldmia	r3!, {r0, r1}
 800ea42:	6010      	str	r0, [r2, #0]
 800ea44:	6051      	str	r1, [r2, #4]
			strcpy(p->grade,"7A+");
 800ea46:	687b      	ldr	r3, [r7, #4]
 800ea48:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800ea4c:	4a3b      	ldr	r2, [pc, #236]	; (800eb3c <problem_fetch+0xd478>)
 800ea4e:	6810      	ldr	r0, [r2, #0]
 800ea50:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 800ea52:	687b      	ldr	r3, [r7, #4]
 800ea54:	2206      	movs	r2, #6
 800ea56:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,H,C,F,A,D");
 800ea58:	687b      	ldr	r3, [r7, #4]
 800ea5a:	33a4      	adds	r3, #164	; 0xa4
 800ea5c:	4a3c      	ldr	r2, [pc, #240]	; (800eb50 <problem_fetch+0xd48c>)
 800ea5e:	461c      	mov	r4, r3
 800ea60:	4613      	mov	r3, r2
 800ea62:	cb07      	ldmia	r3!, {r0, r1, r2}
 800ea64:	6020      	str	r0, [r4, #0]
 800ea66:	6061      	str	r1, [r4, #4]
 800ea68:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,8,8,11,14,18");
 800ea6a:	687b      	ldr	r3, [r7, #4]
 800ea6c:	3304      	adds	r3, #4
 800ea6e:	4a39      	ldr	r2, [pc, #228]	; (800eb54 <problem_fetch+0xd490>)
 800ea70:	461c      	mov	r4, r3
 800ea72:	4613      	mov	r3, r2
 800ea74:	cb07      	ldmia	r3!, {r0, r1, r2}
 800ea76:	6020      	str	r0, [r4, #0]
 800ea78:	6061      	str	r1, [r4, #4]
 800ea7a:	60a2      	str	r2, [r4, #8]
 800ea7c:	881a      	ldrh	r2, [r3, #0]
 800ea7e:	789b      	ldrb	r3, [r3, #2]
 800ea80:	81a2      	strh	r2, [r4, #12]
 800ea82:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 800ea84:	687b      	ldr	r3, [r7, #4]
 800ea86:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800ea8a:	4a21      	ldr	r2, [pc, #132]	; (800eb10 <problem_fetch+0xd44c>)
 800ea8c:	461c      	mov	r4, r3
 800ea8e:	4613      	mov	r3, r2
 800ea90:	cb07      	ldmia	r3!, {r0, r1, r2}
 800ea92:	6020      	str	r0, [r4, #0]
 800ea94:	6061      	str	r1, [r4, #4]
 800ea96:	60a2      	str	r2, [r4, #8]
			break;
 800ea98:	f00d bd44 	b.w	801c524 <problem_fetch+0x1ae60>
		case 385 :
			strcpy(p->name,"REACHY");
 800ea9c:	687b      	ldr	r3, [r7, #4]
 800ea9e:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800eaa2:	4a2d      	ldr	r2, [pc, #180]	; (800eb58 <problem_fetch+0xd494>)
 800eaa4:	6810      	ldr	r0, [r2, #0]
 800eaa6:	6018      	str	r0, [r3, #0]
 800eaa8:	8891      	ldrh	r1, [r2, #4]
 800eaaa:	7992      	ldrb	r2, [r2, #6]
 800eaac:	8099      	strh	r1, [r3, #4]
 800eaae:	719a      	strb	r2, [r3, #6]
			strcpy(p->grade,"6B+");
 800eab0:	687b      	ldr	r3, [r7, #4]
 800eab2:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800eab6:	4a1c      	ldr	r2, [pc, #112]	; (800eb28 <problem_fetch+0xd464>)
 800eab8:	6810      	ldr	r0, [r2, #0]
 800eaba:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 800eabc:	687b      	ldr	r3, [r7, #4]
 800eabe:	2206      	movs	r2, #6
 800eac0:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,E,H,D,D,A");
 800eac2:	687b      	ldr	r3, [r7, #4]
 800eac4:	33a4      	adds	r3, #164	; 0xa4
 800eac6:	4a25      	ldr	r2, [pc, #148]	; (800eb5c <problem_fetch+0xd498>)
 800eac8:	461c      	mov	r4, r3
 800eaca:	4613      	mov	r3, r2
 800eacc:	cb07      	ldmia	r3!, {r0, r1, r2}
 800eace:	6020      	str	r0, [r4, #0]
 800ead0:	6061      	str	r1, [r4, #4]
 800ead2:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,6,10,11,15,18");
 800ead4:	687b      	ldr	r3, [r7, #4]
 800ead6:	3304      	adds	r3, #4
 800ead8:	4a21      	ldr	r2, [pc, #132]	; (800eb60 <problem_fetch+0xd49c>)
 800eada:	461c      	mov	r4, r3
 800eadc:	4615      	mov	r5, r2
 800eade:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800eae0:	6020      	str	r0, [r4, #0]
 800eae2:	6061      	str	r1, [r4, #4]
 800eae4:	60a2      	str	r2, [r4, #8]
 800eae6:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,s,d,d,d,e");
 800eae8:	687b      	ldr	r3, [r7, #4]
 800eaea:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800eaee:	4a1d      	ldr	r2, [pc, #116]	; (800eb64 <problem_fetch+0xd4a0>)
 800eaf0:	461c      	mov	r4, r3
 800eaf2:	4613      	mov	r3, r2
 800eaf4:	cb07      	ldmia	r3!, {r0, r1, r2}
 800eaf6:	6020      	str	r0, [r4, #0]
 800eaf8:	6061      	str	r1, [r4, #4]
 800eafa:	60a2      	str	r2, [r4, #8]
			break;
 800eafc:	f00d bd12 	b.w	801c524 <problem_fetch+0x1ae60>
 800eb00:	080282ac 	.word	0x080282ac
 800eb04:	08023e60 	.word	0x08023e60
 800eb08:	080282c0 	.word	0x080282c0
 800eb0c:	080282cc 	.word	0x080282cc
 800eb10:	08023bf0 	.word	0x08023bf0
 800eb14:	080282dc 	.word	0x080282dc
 800eb18:	080238ec 	.word	0x080238ec
 800eb1c:	080282e8 	.word	0x080282e8
 800eb20:	080282f4 	.word	0x080282f4
 800eb24:	08028304 	.word	0x08028304
 800eb28:	08023854 	.word	0x08023854
 800eb2c:	08028314 	.word	0x08028314
 800eb30:	08028330 	.word	0x08028330
 800eb34:	08028354 	.word	0x08028354
 800eb38:	08028370 	.word	0x08028370
 800eb3c:	080239f4 	.word	0x080239f4
 800eb40:	08028380 	.word	0x08028380
 800eb44:	0802838c 	.word	0x0802838c
 800eb48:	08023d20 	.word	0x08023d20
 800eb4c:	0802839c 	.word	0x0802839c
 800eb50:	080283a4 	.word	0x080283a4
 800eb54:	080283b0 	.word	0x080283b0
 800eb58:	080283c0 	.word	0x080283c0
 800eb5c:	080283c8 	.word	0x080283c8
 800eb60:	080283d4 	.word	0x080283d4
 800eb64:	08023834 	.word	0x08023834
		case 386 :
			strcpy(p->name,"JUST JUMP AND PINCH");
 800eb68:	687b      	ldr	r3, [r7, #4]
 800eb6a:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800eb6e:	4ab7      	ldr	r2, [pc, #732]	; (800ee4c <problem_fetch+0xd788>)
 800eb70:	461d      	mov	r5, r3
 800eb72:	4614      	mov	r4, r2
 800eb74:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800eb76:	6028      	str	r0, [r5, #0]
 800eb78:	6069      	str	r1, [r5, #4]
 800eb7a:	60aa      	str	r2, [r5, #8]
 800eb7c:	60eb      	str	r3, [r5, #12]
 800eb7e:	6820      	ldr	r0, [r4, #0]
 800eb80:	6128      	str	r0, [r5, #16]
			strcpy(p->grade,"7B+");
 800eb82:	687b      	ldr	r3, [r7, #4]
 800eb84:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800eb88:	4ab1      	ldr	r2, [pc, #708]	; (800ee50 <problem_fetch+0xd78c>)
 800eb8a:	6810      	ldr	r0, [r2, #0]
 800eb8c:	6018      	str	r0, [r3, #0]
			p->moveSize = 5;
 800eb8e:	687b      	ldr	r3, [r7, #4]
 800eb90:	2205      	movs	r2, #5
 800eb92:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"E,H,F,A,D");
 800eb94:	687b      	ldr	r3, [r7, #4]
 800eb96:	33a4      	adds	r3, #164	; 0xa4
 800eb98:	49ae      	ldr	r1, [pc, #696]	; (800ee54 <problem_fetch+0xd790>)
 800eb9a:	461a      	mov	r2, r3
 800eb9c:	460b      	mov	r3, r1
 800eb9e:	cb03      	ldmia	r3!, {r0, r1}
 800eba0:	6010      	str	r0, [r2, #0]
 800eba2:	6051      	str	r1, [r2, #4]
 800eba4:	881b      	ldrh	r3, [r3, #0]
 800eba6:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"6,5,11,14,18");
 800eba8:	687b      	ldr	r3, [r7, #4]
 800ebaa:	3304      	adds	r3, #4
 800ebac:	4aaa      	ldr	r2, [pc, #680]	; (800ee58 <problem_fetch+0xd794>)
 800ebae:	461c      	mov	r4, r3
 800ebb0:	4613      	mov	r3, r2
 800ebb2:	cb07      	ldmia	r3!, {r0, r1, r2}
 800ebb4:	6020      	str	r0, [r4, #0]
 800ebb6:	6061      	str	r1, [r4, #4]
 800ebb8:	60a2      	str	r2, [r4, #8]
 800ebba:	781b      	ldrb	r3, [r3, #0]
 800ebbc:	7323      	strb	r3, [r4, #12]
			strcpy(p->startFinish,"s,s,d,d,e");
 800ebbe:	687b      	ldr	r3, [r7, #4]
 800ebc0:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800ebc4:	49a5      	ldr	r1, [pc, #660]	; (800ee5c <problem_fetch+0xd798>)
 800ebc6:	461a      	mov	r2, r3
 800ebc8:	460b      	mov	r3, r1
 800ebca:	cb03      	ldmia	r3!, {r0, r1}
 800ebcc:	6010      	str	r0, [r2, #0]
 800ebce:	6051      	str	r1, [r2, #4]
 800ebd0:	881b      	ldrh	r3, [r3, #0]
 800ebd2:	8113      	strh	r3, [r2, #8]
			break;
 800ebd4:	f00d bca6 	b.w	801c524 <problem_fetch+0x1ae60>
		case 387 :
			strcpy(p->name,"JUMP MAN");
 800ebd8:	687b      	ldr	r3, [r7, #4]
 800ebda:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800ebde:	49a0      	ldr	r1, [pc, #640]	; (800ee60 <problem_fetch+0xd79c>)
 800ebe0:	461a      	mov	r2, r3
 800ebe2:	460b      	mov	r3, r1
 800ebe4:	cb03      	ldmia	r3!, {r0, r1}
 800ebe6:	6010      	str	r0, [r2, #0]
 800ebe8:	6051      	str	r1, [r2, #4]
 800ebea:	781b      	ldrb	r3, [r3, #0]
 800ebec:	7213      	strb	r3, [r2, #8]
			strcpy(p->grade,"7B+");
 800ebee:	687b      	ldr	r3, [r7, #4]
 800ebf0:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800ebf4:	4a96      	ldr	r2, [pc, #600]	; (800ee50 <problem_fetch+0xd78c>)
 800ebf6:	6810      	ldr	r0, [r2, #0]
 800ebf8:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 800ebfa:	687b      	ldr	r3, [r7, #4]
 800ebfc:	2206      	movs	r2, #6
 800ebfe:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,I,I,G,D,D");
 800ec00:	687b      	ldr	r3, [r7, #4]
 800ec02:	33a4      	adds	r3, #164	; 0xa4
 800ec04:	4a97      	ldr	r2, [pc, #604]	; (800ee64 <problem_fetch+0xd7a0>)
 800ec06:	461c      	mov	r4, r3
 800ec08:	4613      	mov	r3, r2
 800ec0a:	cb07      	ldmia	r3!, {r0, r1, r2}
 800ec0c:	6020      	str	r0, [r4, #0]
 800ec0e:	6061      	str	r1, [r4, #4]
 800ec10:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,10,9,15,15,18");
 800ec12:	687b      	ldr	r3, [r7, #4]
 800ec14:	3304      	adds	r3, #4
 800ec16:	4a94      	ldr	r2, [pc, #592]	; (800ee68 <problem_fetch+0xd7a4>)
 800ec18:	461c      	mov	r4, r3
 800ec1a:	4615      	mov	r5, r2
 800ec1c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ec1e:	6020      	str	r0, [r4, #0]
 800ec20:	6061      	str	r1, [r4, #4]
 800ec22:	60a2      	str	r2, [r4, #8]
 800ec24:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 800ec26:	687b      	ldr	r3, [r7, #4]
 800ec28:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800ec2c:	4a8f      	ldr	r2, [pc, #572]	; (800ee6c <problem_fetch+0xd7a8>)
 800ec2e:	461c      	mov	r4, r3
 800ec30:	4613      	mov	r3, r2
 800ec32:	cb07      	ldmia	r3!, {r0, r1, r2}
 800ec34:	6020      	str	r0, [r4, #0]
 800ec36:	6061      	str	r1, [r4, #4]
 800ec38:	60a2      	str	r2, [r4, #8]
			break;
 800ec3a:	f00d bc73 	b.w	801c524 <problem_fetch+0x1ae60>
		case 388 :
			strcpy(p->name,"BAMBA");
 800ec3e:	687b      	ldr	r3, [r7, #4]
 800ec40:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800ec44:	4a8a      	ldr	r2, [pc, #552]	; (800ee70 <problem_fetch+0xd7ac>)
 800ec46:	6810      	ldr	r0, [r2, #0]
 800ec48:	6018      	str	r0, [r3, #0]
 800ec4a:	8892      	ldrh	r2, [r2, #4]
 800ec4c:	809a      	strh	r2, [r3, #4]
			strcpy(p->grade,"6C");
 800ec4e:	687b      	ldr	r3, [r7, #4]
 800ec50:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800ec54:	4a87      	ldr	r2, [pc, #540]	; (800ee74 <problem_fetch+0xd7b0>)
 800ec56:	8811      	ldrh	r1, [r2, #0]
 800ec58:	7892      	ldrb	r2, [r2, #2]
 800ec5a:	8019      	strh	r1, [r3, #0]
 800ec5c:	709a      	strb	r2, [r3, #2]
			p->moveSize = 5;
 800ec5e:	687b      	ldr	r3, [r7, #4]
 800ec60:	2205      	movs	r2, #5
 800ec62:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,I,I,E,D");
 800ec64:	687b      	ldr	r3, [r7, #4]
 800ec66:	33a4      	adds	r3, #164	; 0xa4
 800ec68:	4983      	ldr	r1, [pc, #524]	; (800ee78 <problem_fetch+0xd7b4>)
 800ec6a:	461a      	mov	r2, r3
 800ec6c:	460b      	mov	r3, r1
 800ec6e:	cb03      	ldmia	r3!, {r0, r1}
 800ec70:	6010      	str	r0, [r2, #0]
 800ec72:	6051      	str	r1, [r2, #4]
 800ec74:	881b      	ldrh	r3, [r3, #0]
 800ec76:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"5,10,14,16,18");
 800ec78:	687b      	ldr	r3, [r7, #4]
 800ec7a:	3304      	adds	r3, #4
 800ec7c:	4a7f      	ldr	r2, [pc, #508]	; (800ee7c <problem_fetch+0xd7b8>)
 800ec7e:	461c      	mov	r4, r3
 800ec80:	4613      	mov	r3, r2
 800ec82:	cb07      	ldmia	r3!, {r0, r1, r2}
 800ec84:	6020      	str	r0, [r4, #0]
 800ec86:	6061      	str	r1, [r4, #4]
 800ec88:	60a2      	str	r2, [r4, #8]
 800ec8a:	881b      	ldrh	r3, [r3, #0]
 800ec8c:	81a3      	strh	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,e");
 800ec8e:	687b      	ldr	r3, [r7, #4]
 800ec90:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800ec94:	497a      	ldr	r1, [pc, #488]	; (800ee80 <problem_fetch+0xd7bc>)
 800ec96:	461a      	mov	r2, r3
 800ec98:	460b      	mov	r3, r1
 800ec9a:	cb03      	ldmia	r3!, {r0, r1}
 800ec9c:	6010      	str	r0, [r2, #0]
 800ec9e:	6051      	str	r1, [r2, #4]
 800eca0:	881b      	ldrh	r3, [r3, #0]
 800eca2:	8113      	strh	r3, [r2, #8]
			break;
 800eca4:	f00d bc3e 	b.w	801c524 <problem_fetch+0x1ae60>
		case 389 :
			strcpy(p->name,"BO");
 800eca8:	687b      	ldr	r3, [r7, #4]
 800ecaa:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800ecae:	4a75      	ldr	r2, [pc, #468]	; (800ee84 <problem_fetch+0xd7c0>)
 800ecb0:	8811      	ldrh	r1, [r2, #0]
 800ecb2:	7892      	ldrb	r2, [r2, #2]
 800ecb4:	8019      	strh	r1, [r3, #0]
 800ecb6:	709a      	strb	r2, [r3, #2]
			strcpy(p->grade,"6C+");
 800ecb8:	687b      	ldr	r3, [r7, #4]
 800ecba:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800ecbe:	4a72      	ldr	r2, [pc, #456]	; (800ee88 <problem_fetch+0xd7c4>)
 800ecc0:	6810      	ldr	r0, [r2, #0]
 800ecc2:	6018      	str	r0, [r3, #0]
			p->moveSize = 4;
 800ecc4:	687b      	ldr	r3, [r7, #4]
 800ecc6:	2204      	movs	r2, #4
 800ecc8:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"E,I,G,I");
 800ecca:	687b      	ldr	r3, [r7, #4]
 800eccc:	33a4      	adds	r3, #164	; 0xa4
 800ecce:	496f      	ldr	r1, [pc, #444]	; (800ee8c <problem_fetch+0xd7c8>)
 800ecd0:	461a      	mov	r2, r3
 800ecd2:	460b      	mov	r3, r1
 800ecd4:	cb03      	ldmia	r3!, {r0, r1}
 800ecd6:	6010      	str	r0, [r2, #0]
 800ecd8:	6051      	str	r1, [r2, #4]
			strcpy(p->moveNumbers,"6,10,14,18");
 800ecda:	687b      	ldr	r3, [r7, #4]
 800ecdc:	3304      	adds	r3, #4
 800ecde:	496c      	ldr	r1, [pc, #432]	; (800ee90 <problem_fetch+0xd7cc>)
 800ece0:	461a      	mov	r2, r3
 800ece2:	460b      	mov	r3, r1
 800ece4:	cb03      	ldmia	r3!, {r0, r1}
 800ece6:	6010      	str	r0, [r2, #0]
 800ece8:	6051      	str	r1, [r2, #4]
 800ecea:	8819      	ldrh	r1, [r3, #0]
 800ecec:	789b      	ldrb	r3, [r3, #2]
 800ecee:	8111      	strh	r1, [r2, #8]
 800ecf0:	7293      	strb	r3, [r2, #10]
			strcpy(p->startFinish,"s,d,d,e");
 800ecf2:	687b      	ldr	r3, [r7, #4]
 800ecf4:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800ecf8:	4966      	ldr	r1, [pc, #408]	; (800ee94 <problem_fetch+0xd7d0>)
 800ecfa:	461a      	mov	r2, r3
 800ecfc:	460b      	mov	r3, r1
 800ecfe:	cb03      	ldmia	r3!, {r0, r1}
 800ed00:	6010      	str	r0, [r2, #0]
 800ed02:	6051      	str	r1, [r2, #4]
			break;
 800ed04:	f00d bc0e 	b.w	801c524 <problem_fetch+0x1ae60>
		case 390 :
			strcpy(p->name,"REACH FOR THE SKY");
 800ed08:	687b      	ldr	r3, [r7, #4]
 800ed0a:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800ed0e:	4a62      	ldr	r2, [pc, #392]	; (800ee98 <problem_fetch+0xd7d4>)
 800ed10:	461d      	mov	r5, r3
 800ed12:	4614      	mov	r4, r2
 800ed14:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800ed16:	6028      	str	r0, [r5, #0]
 800ed18:	6069      	str	r1, [r5, #4]
 800ed1a:	60aa      	str	r2, [r5, #8]
 800ed1c:	60eb      	str	r3, [r5, #12]
 800ed1e:	8823      	ldrh	r3, [r4, #0]
 800ed20:	822b      	strh	r3, [r5, #16]
			strcpy(p->grade,"7A");
 800ed22:	687b      	ldr	r3, [r7, #4]
 800ed24:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800ed28:	4a5c      	ldr	r2, [pc, #368]	; (800ee9c <problem_fetch+0xd7d8>)
 800ed2a:	8811      	ldrh	r1, [r2, #0]
 800ed2c:	7892      	ldrb	r2, [r2, #2]
 800ed2e:	8019      	strh	r1, [r3, #0]
 800ed30:	709a      	strb	r2, [r3, #2]
			p->moveSize = 5;
 800ed32:	687b      	ldr	r3, [r7, #4]
 800ed34:	2205      	movs	r2, #5
 800ed36:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,E,G,C,D");
 800ed38:	687b      	ldr	r3, [r7, #4]
 800ed3a:	33a4      	adds	r3, #164	; 0xa4
 800ed3c:	4958      	ldr	r1, [pc, #352]	; (800eea0 <problem_fetch+0xd7dc>)
 800ed3e:	461a      	mov	r2, r3
 800ed40:	460b      	mov	r3, r1
 800ed42:	cb03      	ldmia	r3!, {r0, r1}
 800ed44:	6010      	str	r0, [r2, #0]
 800ed46:	6051      	str	r1, [r2, #4]
 800ed48:	881b      	ldrh	r3, [r3, #0]
 800ed4a:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"4,8,9,13,18");
 800ed4c:	687b      	ldr	r3, [r7, #4]
 800ed4e:	3304      	adds	r3, #4
 800ed50:	4a54      	ldr	r2, [pc, #336]	; (800eea4 <problem_fetch+0xd7e0>)
 800ed52:	461c      	mov	r4, r3
 800ed54:	4613      	mov	r3, r2
 800ed56:	cb07      	ldmia	r3!, {r0, r1, r2}
 800ed58:	6020      	str	r0, [r4, #0]
 800ed5a:	6061      	str	r1, [r4, #4]
 800ed5c:	60a2      	str	r2, [r4, #8]
			strcpy(p->startFinish,"s,d,d,d,e");
 800ed5e:	687b      	ldr	r3, [r7, #4]
 800ed60:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800ed64:	4946      	ldr	r1, [pc, #280]	; (800ee80 <problem_fetch+0xd7bc>)
 800ed66:	461a      	mov	r2, r3
 800ed68:	460b      	mov	r3, r1
 800ed6a:	cb03      	ldmia	r3!, {r0, r1}
 800ed6c:	6010      	str	r0, [r2, #0]
 800ed6e:	6051      	str	r1, [r2, #4]
 800ed70:	881b      	ldrh	r3, [r3, #0]
 800ed72:	8113      	strh	r3, [r2, #8]
			break;
 800ed74:	f00d bbd6 	b.w	801c524 <problem_fetch+0x1ae60>
		case 391 :
			strcpy(p->name,"CHIVAS");
 800ed78:	687b      	ldr	r3, [r7, #4]
 800ed7a:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800ed7e:	4a4a      	ldr	r2, [pc, #296]	; (800eea8 <problem_fetch+0xd7e4>)
 800ed80:	6810      	ldr	r0, [r2, #0]
 800ed82:	6018      	str	r0, [r3, #0]
 800ed84:	8891      	ldrh	r1, [r2, #4]
 800ed86:	7992      	ldrb	r2, [r2, #6]
 800ed88:	8099      	strh	r1, [r3, #4]
 800ed8a:	719a      	strb	r2, [r3, #6]
			strcpy(p->grade,"7B");
 800ed8c:	687b      	ldr	r3, [r7, #4]
 800ed8e:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800ed92:	4a46      	ldr	r2, [pc, #280]	; (800eeac <problem_fetch+0xd7e8>)
 800ed94:	8811      	ldrh	r1, [r2, #0]
 800ed96:	7892      	ldrb	r2, [r2, #2]
 800ed98:	8019      	strh	r1, [r3, #0]
 800ed9a:	709a      	strb	r2, [r3, #2]
			p->moveSize = 4;
 800ed9c:	687b      	ldr	r3, [r7, #4]
 800ed9e:	2204      	movs	r2, #4
 800eda0:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,F,A,A");
 800eda2:	687b      	ldr	r3, [r7, #4]
 800eda4:	33a4      	adds	r3, #164	; 0xa4
 800eda6:	4942      	ldr	r1, [pc, #264]	; (800eeb0 <problem_fetch+0xd7ec>)
 800eda8:	461a      	mov	r2, r3
 800edaa:	460b      	mov	r3, r1
 800edac:	cb03      	ldmia	r3!, {r0, r1}
 800edae:	6010      	str	r0, [r2, #0]
 800edb0:	6051      	str	r1, [r2, #4]
			strcpy(p->moveNumbers,"6,11,14,18");
 800edb2:	687b      	ldr	r3, [r7, #4]
 800edb4:	3304      	adds	r3, #4
 800edb6:	493f      	ldr	r1, [pc, #252]	; (800eeb4 <problem_fetch+0xd7f0>)
 800edb8:	461a      	mov	r2, r3
 800edba:	460b      	mov	r3, r1
 800edbc:	cb03      	ldmia	r3!, {r0, r1}
 800edbe:	6010      	str	r0, [r2, #0]
 800edc0:	6051      	str	r1, [r2, #4]
 800edc2:	8819      	ldrh	r1, [r3, #0]
 800edc4:	789b      	ldrb	r3, [r3, #2]
 800edc6:	8111      	strh	r1, [r2, #8]
 800edc8:	7293      	strb	r3, [r2, #10]
			strcpy(p->startFinish,"s,d,d,e");
 800edca:	687b      	ldr	r3, [r7, #4]
 800edcc:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800edd0:	4930      	ldr	r1, [pc, #192]	; (800ee94 <problem_fetch+0xd7d0>)
 800edd2:	461a      	mov	r2, r3
 800edd4:	460b      	mov	r3, r1
 800edd6:	cb03      	ldmia	r3!, {r0, r1}
 800edd8:	6010      	str	r0, [r2, #0]
 800edda:	6051      	str	r1, [r2, #4]
			break;
 800eddc:	f00d bba2 	b.w	801c524 <problem_fetch+0x1ae60>
		case 392 :
			strcpy(p->name,"SPAIN IN VAIN");
 800ede0:	687b      	ldr	r3, [r7, #4]
 800ede2:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800ede6:	4a34      	ldr	r2, [pc, #208]	; (800eeb8 <problem_fetch+0xd7f4>)
 800ede8:	461c      	mov	r4, r3
 800edea:	4613      	mov	r3, r2
 800edec:	cb07      	ldmia	r3!, {r0, r1, r2}
 800edee:	6020      	str	r0, [r4, #0]
 800edf0:	6061      	str	r1, [r4, #4]
 800edf2:	60a2      	str	r2, [r4, #8]
 800edf4:	881b      	ldrh	r3, [r3, #0]
 800edf6:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade,"7A");
 800edf8:	687b      	ldr	r3, [r7, #4]
 800edfa:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800edfe:	4a27      	ldr	r2, [pc, #156]	; (800ee9c <problem_fetch+0xd7d8>)
 800ee00:	8811      	ldrh	r1, [r2, #0]
 800ee02:	7892      	ldrb	r2, [r2, #2]
 800ee04:	8019      	strh	r1, [r3, #0]
 800ee06:	709a      	strb	r2, [r3, #2]
			p->moveSize = 6;
 800ee08:	687b      	ldr	r3, [r7, #4]
 800ee0a:	2206      	movs	r2, #6
 800ee0c:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,H,F,E,A,D");
 800ee0e:	687b      	ldr	r3, [r7, #4]
 800ee10:	33a4      	adds	r3, #164	; 0xa4
 800ee12:	4a2a      	ldr	r2, [pc, #168]	; (800eebc <problem_fetch+0xd7f8>)
 800ee14:	461c      	mov	r4, r3
 800ee16:	4613      	mov	r3, r2
 800ee18:	cb07      	ldmia	r3!, {r0, r1, r2}
 800ee1a:	6020      	str	r0, [r4, #0]
 800ee1c:	6061      	str	r1, [r4, #4]
 800ee1e:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,8,11,12,14,18");
 800ee20:	687b      	ldr	r3, [r7, #4]
 800ee22:	3304      	adds	r3, #4
 800ee24:	4a26      	ldr	r2, [pc, #152]	; (800eec0 <problem_fetch+0xd7fc>)
 800ee26:	461c      	mov	r4, r3
 800ee28:	4615      	mov	r5, r2
 800ee2a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ee2c:	6020      	str	r0, [r4, #0]
 800ee2e:	6061      	str	r1, [r4, #4]
 800ee30:	60a2      	str	r2, [r4, #8]
 800ee32:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 800ee34:	687b      	ldr	r3, [r7, #4]
 800ee36:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800ee3a:	4a0c      	ldr	r2, [pc, #48]	; (800ee6c <problem_fetch+0xd7a8>)
 800ee3c:	461c      	mov	r4, r3
 800ee3e:	4613      	mov	r3, r2
 800ee40:	cb07      	ldmia	r3!, {r0, r1, r2}
 800ee42:	6020      	str	r0, [r4, #0]
 800ee44:	6061      	str	r1, [r4, #4]
 800ee46:	60a2      	str	r2, [r4, #8]
			break;
 800ee48:	f00d bb6c 	b.w	801c524 <problem_fetch+0x1ae60>
 800ee4c:	080283e4 	.word	0x080283e4
 800ee50:	08023990 	.word	0x08023990
 800ee54:	080283f8 	.word	0x080283f8
 800ee58:	080276fc 	.word	0x080276fc
 800ee5c:	08023f34 	.word	0x08023f34
 800ee60:	08028404 	.word	0x08028404
 800ee64:	08028410 	.word	0x08028410
 800ee68:	0802841c 	.word	0x0802841c
 800ee6c:	08023bf0 	.word	0x08023bf0
 800ee70:	0802842c 	.word	0x0802842c
 800ee74:	08023920 	.word	0x08023920
 800ee78:	08028434 	.word	0x08028434
 800ee7c:	08028440 	.word	0x08028440
 800ee80:	08023d20 	.word	0x08023d20
 800ee84:	08028450 	.word	0x08028450
 800ee88:	080238ec 	.word	0x080238ec
 800ee8c:	08028454 	.word	0x08028454
 800ee90:	0802399c 	.word	0x0802399c
 800ee94:	080239a8 	.word	0x080239a8
 800ee98:	0802845c 	.word	0x0802845c
 800ee9c:	08023814 	.word	0x08023814
 800eea0:	08028470 	.word	0x08028470
 800eea4:	08024650 	.word	0x08024650
 800eea8:	0802847c 	.word	0x0802847c
 800eeac:	08023f4c 	.word	0x08023f4c
 800eeb0:	08028484 	.word	0x08028484
 800eeb4:	080277e0 	.word	0x080277e0
 800eeb8:	0802848c 	.word	0x0802848c
 800eebc:	0802849c 	.word	0x0802849c
 800eec0:	080284a8 	.word	0x080284a8
		case 393 :
			strcpy(p->name,"LE VOYAGE");
 800eec4:	687b      	ldr	r3, [r7, #4]
 800eec6:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800eeca:	49ac      	ldr	r1, [pc, #688]	; (800f17c <problem_fetch+0xdab8>)
 800eecc:	461a      	mov	r2, r3
 800eece:	460b      	mov	r3, r1
 800eed0:	cb03      	ldmia	r3!, {r0, r1}
 800eed2:	6010      	str	r0, [r2, #0]
 800eed4:	6051      	str	r1, [r2, #4]
 800eed6:	881b      	ldrh	r3, [r3, #0]
 800eed8:	8113      	strh	r3, [r2, #8]
			strcpy(p->grade,"6C");
 800eeda:	687b      	ldr	r3, [r7, #4]
 800eedc:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800eee0:	4aa7      	ldr	r2, [pc, #668]	; (800f180 <problem_fetch+0xdabc>)
 800eee2:	8811      	ldrh	r1, [r2, #0]
 800eee4:	7892      	ldrb	r2, [r2, #2]
 800eee6:	8019      	strh	r1, [r3, #0]
 800eee8:	709a      	strb	r2, [r3, #2]
			p->moveSize = 6;
 800eeea:	687b      	ldr	r3, [r7, #4]
 800eeec:	2206      	movs	r2, #6
 800eeee:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,H,E,A,C,D");
 800eef0:	687b      	ldr	r3, [r7, #4]
 800eef2:	33a4      	adds	r3, #164	; 0xa4
 800eef4:	4aa3      	ldr	r2, [pc, #652]	; (800f184 <problem_fetch+0xdac0>)
 800eef6:	461c      	mov	r4, r3
 800eef8:	4613      	mov	r3, r2
 800eefa:	cb07      	ldmia	r3!, {r0, r1, r2}
 800eefc:	6020      	str	r0, [r4, #0]
 800eefe:	6061      	str	r1, [r4, #4]
 800ef00:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,8,12,14,8,18");
 800ef02:	687b      	ldr	r3, [r7, #4]
 800ef04:	3304      	adds	r3, #4
 800ef06:	4aa0      	ldr	r2, [pc, #640]	; (800f188 <problem_fetch+0xdac4>)
 800ef08:	461c      	mov	r4, r3
 800ef0a:	4613      	mov	r3, r2
 800ef0c:	cb07      	ldmia	r3!, {r0, r1, r2}
 800ef0e:	6020      	str	r0, [r4, #0]
 800ef10:	6061      	str	r1, [r4, #4]
 800ef12:	60a2      	str	r2, [r4, #8]
 800ef14:	881a      	ldrh	r2, [r3, #0]
 800ef16:	789b      	ldrb	r3, [r3, #2]
 800ef18:	81a2      	strh	r2, [r4, #12]
 800ef1a:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 800ef1c:	687b      	ldr	r3, [r7, #4]
 800ef1e:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800ef22:	4a9a      	ldr	r2, [pc, #616]	; (800f18c <problem_fetch+0xdac8>)
 800ef24:	461c      	mov	r4, r3
 800ef26:	4613      	mov	r3, r2
 800ef28:	cb07      	ldmia	r3!, {r0, r1, r2}
 800ef2a:	6020      	str	r0, [r4, #0]
 800ef2c:	6061      	str	r1, [r4, #4]
 800ef2e:	60a2      	str	r2, [r4, #8]
			break;
 800ef30:	f00d baf8 	b.w	801c524 <problem_fetch+0x1ae60>
		case 394 :
			strcpy(p->name,"SOFT LIKE BUTTER");
 800ef34:	687b      	ldr	r3, [r7, #4]
 800ef36:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800ef3a:	4a95      	ldr	r2, [pc, #596]	; (800f190 <problem_fetch+0xdacc>)
 800ef3c:	461d      	mov	r5, r3
 800ef3e:	4614      	mov	r4, r2
 800ef40:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800ef42:	6028      	str	r0, [r5, #0]
 800ef44:	6069      	str	r1, [r5, #4]
 800ef46:	60aa      	str	r2, [r5, #8]
 800ef48:	60eb      	str	r3, [r5, #12]
 800ef4a:	7823      	ldrb	r3, [r4, #0]
 800ef4c:	742b      	strb	r3, [r5, #16]
			strcpy(p->grade,"6C");
 800ef4e:	687b      	ldr	r3, [r7, #4]
 800ef50:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800ef54:	4a8a      	ldr	r2, [pc, #552]	; (800f180 <problem_fetch+0xdabc>)
 800ef56:	8811      	ldrh	r1, [r2, #0]
 800ef58:	7892      	ldrb	r2, [r2, #2]
 800ef5a:	8019      	strh	r1, [r3, #0]
 800ef5c:	709a      	strb	r2, [r3, #2]
			p->moveSize = 8;
 800ef5e:	687b      	ldr	r3, [r7, #4]
 800ef60:	2208      	movs	r2, #8
 800ef62:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,E,I,H,J,E,G,D");
 800ef64:	687b      	ldr	r3, [r7, #4]
 800ef66:	33a4      	adds	r3, #164	; 0xa4
 800ef68:	4a8a      	ldr	r2, [pc, #552]	; (800f194 <problem_fetch+0xdad0>)
 800ef6a:	461c      	mov	r4, r3
 800ef6c:	4615      	mov	r5, r2
 800ef6e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ef70:	6020      	str	r0, [r4, #0]
 800ef72:	6061      	str	r1, [r4, #4]
 800ef74:	60a2      	str	r2, [r4, #8]
 800ef76:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,8,10,12,13,14,17,18");
 800ef78:	687b      	ldr	r3, [r7, #4]
 800ef7a:	3304      	adds	r3, #4
 800ef7c:	4a86      	ldr	r2, [pc, #536]	; (800f198 <problem_fetch+0xdad4>)
 800ef7e:	461d      	mov	r5, r3
 800ef80:	4614      	mov	r4, r2
 800ef82:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800ef84:	6028      	str	r0, [r5, #0]
 800ef86:	6069      	str	r1, [r5, #4]
 800ef88:	60aa      	str	r2, [r5, #8]
 800ef8a:	60eb      	str	r3, [r5, #12]
 800ef8c:	6820      	ldr	r0, [r4, #0]
 800ef8e:	6128      	str	r0, [r5, #16]
 800ef90:	88a3      	ldrh	r3, [r4, #4]
 800ef92:	82ab      	strh	r3, [r5, #20]
			strcpy(p->startFinish,"s,d,d,d,d,d,d,e");
 800ef94:	687b      	ldr	r3, [r7, #4]
 800ef96:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800ef9a:	4a80      	ldr	r2, [pc, #512]	; (800f19c <problem_fetch+0xdad8>)
 800ef9c:	461c      	mov	r4, r3
 800ef9e:	4615      	mov	r5, r2
 800efa0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800efa2:	6020      	str	r0, [r4, #0]
 800efa4:	6061      	str	r1, [r4, #4]
 800efa6:	60a2      	str	r2, [r4, #8]
 800efa8:	60e3      	str	r3, [r4, #12]
			break;
 800efaa:	f00d babb 	b.w	801c524 <problem_fetch+0x1ae60>
		case 395 :
			strcpy(p->name,"PINCHY PINCH");
 800efae:	687b      	ldr	r3, [r7, #4]
 800efb0:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800efb4:	4a7a      	ldr	r2, [pc, #488]	; (800f1a0 <problem_fetch+0xdadc>)
 800efb6:	461c      	mov	r4, r3
 800efb8:	4613      	mov	r3, r2
 800efba:	cb07      	ldmia	r3!, {r0, r1, r2}
 800efbc:	6020      	str	r0, [r4, #0]
 800efbe:	6061      	str	r1, [r4, #4]
 800efc0:	60a2      	str	r2, [r4, #8]
 800efc2:	781b      	ldrb	r3, [r3, #0]
 800efc4:	7323      	strb	r3, [r4, #12]
			strcpy(p->grade,"6C+");
 800efc6:	687b      	ldr	r3, [r7, #4]
 800efc8:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800efcc:	4a75      	ldr	r2, [pc, #468]	; (800f1a4 <problem_fetch+0xdae0>)
 800efce:	6810      	ldr	r0, [r2, #0]
 800efd0:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 800efd2:	687b      	ldr	r3, [r7, #4]
 800efd4:	2207      	movs	r2, #7
 800efd6:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,H,C,F,C,D,A");
 800efd8:	687b      	ldr	r3, [r7, #4]
 800efda:	33a4      	adds	r3, #164	; 0xa4
 800efdc:	4a72      	ldr	r2, [pc, #456]	; (800f1a8 <problem_fetch+0xdae4>)
 800efde:	461c      	mov	r4, r3
 800efe0:	4613      	mov	r3, r2
 800efe2:	cb07      	ldmia	r3!, {r0, r1, r2}
 800efe4:	6020      	str	r0, [r4, #0]
 800efe6:	6061      	str	r1, [r4, #4]
 800efe8:	60a2      	str	r2, [r4, #8]
 800efea:	881b      	ldrh	r3, [r3, #0]
 800efec:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,8,8,11,13,15,18");
 800efee:	687b      	ldr	r3, [r7, #4]
 800eff0:	3304      	adds	r3, #4
 800eff2:	4a6e      	ldr	r2, [pc, #440]	; (800f1ac <problem_fetch+0xdae8>)
 800eff4:	461d      	mov	r5, r3
 800eff6:	4614      	mov	r4, r2
 800eff8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800effa:	6028      	str	r0, [r5, #0]
 800effc:	6069      	str	r1, [r5, #4]
 800effe:	60aa      	str	r2, [r5, #8]
 800f000:	60eb      	str	r3, [r5, #12]
 800f002:	8823      	ldrh	r3, [r4, #0]
 800f004:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 800f006:	687b      	ldr	r3, [r7, #4]
 800f008:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800f00c:	4a68      	ldr	r2, [pc, #416]	; (800f1b0 <problem_fetch+0xdaec>)
 800f00e:	461c      	mov	r4, r3
 800f010:	4613      	mov	r3, r2
 800f012:	cb07      	ldmia	r3!, {r0, r1, r2}
 800f014:	6020      	str	r0, [r4, #0]
 800f016:	6061      	str	r1, [r4, #4]
 800f018:	60a2      	str	r2, [r4, #8]
 800f01a:	881b      	ldrh	r3, [r3, #0]
 800f01c:	81a3      	strh	r3, [r4, #12]
			break;
 800f01e:	f00d ba81 	b.w	801c524 <problem_fetch+0x1ae60>
		case 396 :
			strcpy(p->name,"ONE LINE");
 800f022:	687b      	ldr	r3, [r7, #4]
 800f024:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800f028:	4962      	ldr	r1, [pc, #392]	; (800f1b4 <problem_fetch+0xdaf0>)
 800f02a:	461a      	mov	r2, r3
 800f02c:	460b      	mov	r3, r1
 800f02e:	cb03      	ldmia	r3!, {r0, r1}
 800f030:	6010      	str	r0, [r2, #0]
 800f032:	6051      	str	r1, [r2, #4]
 800f034:	781b      	ldrb	r3, [r3, #0]
 800f036:	7213      	strb	r3, [r2, #8]
			strcpy(p->grade,"7A+");
 800f038:	687b      	ldr	r3, [r7, #4]
 800f03a:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800f03e:	4a5e      	ldr	r2, [pc, #376]	; (800f1b8 <problem_fetch+0xdaf4>)
 800f040:	6810      	ldr	r0, [r2, #0]
 800f042:	6018      	str	r0, [r3, #0]
			p->moveSize = 8;
 800f044:	687b      	ldr	r3, [r7, #4]
 800f046:	2208      	movs	r2, #8
 800f048:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"C,E,H,K,E,I,J,I");
 800f04a:	687b      	ldr	r3, [r7, #4]
 800f04c:	33a4      	adds	r3, #164	; 0xa4
 800f04e:	4a5b      	ldr	r2, [pc, #364]	; (800f1bc <problem_fetch+0xdaf8>)
 800f050:	461c      	mov	r4, r3
 800f052:	4615      	mov	r5, r2
 800f054:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f056:	6020      	str	r0, [r4, #0]
 800f058:	6061      	str	r1, [r4, #4]
 800f05a:	60a2      	str	r2, [r4, #8]
 800f05c:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,6,12,16,9,9,5,18");
 800f05e:	687b      	ldr	r3, [r7, #4]
 800f060:	3304      	adds	r3, #4
 800f062:	4a57      	ldr	r2, [pc, #348]	; (800f1c0 <problem_fetch+0xdafc>)
 800f064:	461d      	mov	r5, r3
 800f066:	4614      	mov	r4, r2
 800f068:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800f06a:	6028      	str	r0, [r5, #0]
 800f06c:	6069      	str	r1, [r5, #4]
 800f06e:	60aa      	str	r2, [r5, #8]
 800f070:	60eb      	str	r3, [r5, #12]
 800f072:	8823      	ldrh	r3, [r4, #0]
 800f074:	78a2      	ldrb	r2, [r4, #2]
 800f076:	822b      	strh	r3, [r5, #16]
 800f078:	4613      	mov	r3, r2
 800f07a:	74ab      	strb	r3, [r5, #18]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,e");
 800f07c:	687b      	ldr	r3, [r7, #4]
 800f07e:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800f082:	4a50      	ldr	r2, [pc, #320]	; (800f1c4 <problem_fetch+0xdb00>)
 800f084:	461c      	mov	r4, r3
 800f086:	4615      	mov	r5, r2
 800f088:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f08a:	6020      	str	r0, [r4, #0]
 800f08c:	6061      	str	r1, [r4, #4]
 800f08e:	60a2      	str	r2, [r4, #8]
 800f090:	60e3      	str	r3, [r4, #12]
			break;
 800f092:	f00d ba47 	b.w	801c524 <problem_fetch+0x1ae60>
		case 397 :
			strcpy(p->name,"RASTAMAN");
 800f096:	687b      	ldr	r3, [r7, #4]
 800f098:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800f09c:	494a      	ldr	r1, [pc, #296]	; (800f1c8 <problem_fetch+0xdb04>)
 800f09e:	461a      	mov	r2, r3
 800f0a0:	460b      	mov	r3, r1
 800f0a2:	cb03      	ldmia	r3!, {r0, r1}
 800f0a4:	6010      	str	r0, [r2, #0]
 800f0a6:	6051      	str	r1, [r2, #4]
 800f0a8:	781b      	ldrb	r3, [r3, #0]
 800f0aa:	7213      	strb	r3, [r2, #8]
			strcpy(p->grade,"6B+");
 800f0ac:	687b      	ldr	r3, [r7, #4]
 800f0ae:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800f0b2:	4a46      	ldr	r2, [pc, #280]	; (800f1cc <problem_fetch+0xdb08>)
 800f0b4:	6810      	ldr	r0, [r2, #0]
 800f0b6:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 800f0b8:	687b      	ldr	r3, [r7, #4]
 800f0ba:	2207      	movs	r2, #7
 800f0bc:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,H,C,F,C,E,A");
 800f0be:	687b      	ldr	r3, [r7, #4]
 800f0c0:	33a4      	adds	r3, #164	; 0xa4
 800f0c2:	4a43      	ldr	r2, [pc, #268]	; (800f1d0 <problem_fetch+0xdb0c>)
 800f0c4:	461c      	mov	r4, r3
 800f0c6:	4613      	mov	r3, r2
 800f0c8:	cb07      	ldmia	r3!, {r0, r1, r2}
 800f0ca:	6020      	str	r0, [r4, #0]
 800f0cc:	6061      	str	r1, [r4, #4]
 800f0ce:	60a2      	str	r2, [r4, #8]
 800f0d0:	881b      	ldrh	r3, [r3, #0]
 800f0d2:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,8,8,11,13,16,18");
 800f0d4:	687b      	ldr	r3, [r7, #4]
 800f0d6:	3304      	adds	r3, #4
 800f0d8:	4a3e      	ldr	r2, [pc, #248]	; (800f1d4 <problem_fetch+0xdb10>)
 800f0da:	461d      	mov	r5, r3
 800f0dc:	4614      	mov	r4, r2
 800f0de:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800f0e0:	6028      	str	r0, [r5, #0]
 800f0e2:	6069      	str	r1, [r5, #4]
 800f0e4:	60aa      	str	r2, [r5, #8]
 800f0e6:	60eb      	str	r3, [r5, #12]
 800f0e8:	8823      	ldrh	r3, [r4, #0]
 800f0ea:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 800f0ec:	687b      	ldr	r3, [r7, #4]
 800f0ee:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800f0f2:	4a2f      	ldr	r2, [pc, #188]	; (800f1b0 <problem_fetch+0xdaec>)
 800f0f4:	461c      	mov	r4, r3
 800f0f6:	4613      	mov	r3, r2
 800f0f8:	cb07      	ldmia	r3!, {r0, r1, r2}
 800f0fa:	6020      	str	r0, [r4, #0]
 800f0fc:	6061      	str	r1, [r4, #4]
 800f0fe:	60a2      	str	r2, [r4, #8]
 800f100:	881b      	ldrh	r3, [r3, #0]
 800f102:	81a3      	strh	r3, [r4, #12]
			break;
 800f104:	f00d ba0e 	b.w	801c524 <problem_fetch+0x1ae60>
		case 398 :
			strcpy(p->name,"TURKMENISTAN");
 800f108:	687b      	ldr	r3, [r7, #4]
 800f10a:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800f10e:	4a32      	ldr	r2, [pc, #200]	; (800f1d8 <problem_fetch+0xdb14>)
 800f110:	461c      	mov	r4, r3
 800f112:	4613      	mov	r3, r2
 800f114:	cb07      	ldmia	r3!, {r0, r1, r2}
 800f116:	6020      	str	r0, [r4, #0]
 800f118:	6061      	str	r1, [r4, #4]
 800f11a:	60a2      	str	r2, [r4, #8]
 800f11c:	781b      	ldrb	r3, [r3, #0]
 800f11e:	7323      	strb	r3, [r4, #12]
			strcpy(p->grade,"6B+");
 800f120:	687b      	ldr	r3, [r7, #4]
 800f122:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800f126:	4a29      	ldr	r2, [pc, #164]	; (800f1cc <problem_fetch+0xdb08>)
 800f128:	6810      	ldr	r0, [r2, #0]
 800f12a:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 800f12c:	687b      	ldr	r3, [r7, #4]
 800f12e:	2207      	movs	r2, #7
 800f130:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,E,I,J,E,H,D");
 800f132:	687b      	ldr	r3, [r7, #4]
 800f134:	33a4      	adds	r3, #164	; 0xa4
 800f136:	4a29      	ldr	r2, [pc, #164]	; (800f1dc <problem_fetch+0xdb18>)
 800f138:	461c      	mov	r4, r3
 800f13a:	4613      	mov	r3, r2
 800f13c:	cb07      	ldmia	r3!, {r0, r1, r2}
 800f13e:	6020      	str	r0, [r4, #0]
 800f140:	6061      	str	r1, [r4, #4]
 800f142:	60a2      	str	r2, [r4, #8]
 800f144:	881b      	ldrh	r3, [r3, #0]
 800f146:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,8,10,7,12,16,18");
 800f148:	687b      	ldr	r3, [r7, #4]
 800f14a:	3304      	adds	r3, #4
 800f14c:	4a24      	ldr	r2, [pc, #144]	; (800f1e0 <problem_fetch+0xdb1c>)
 800f14e:	461d      	mov	r5, r3
 800f150:	4614      	mov	r4, r2
 800f152:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800f154:	6028      	str	r0, [r5, #0]
 800f156:	6069      	str	r1, [r5, #4]
 800f158:	60aa      	str	r2, [r5, #8]
 800f15a:	60eb      	str	r3, [r5, #12]
 800f15c:	8823      	ldrh	r3, [r4, #0]
 800f15e:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 800f160:	687b      	ldr	r3, [r7, #4]
 800f162:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800f166:	4a12      	ldr	r2, [pc, #72]	; (800f1b0 <problem_fetch+0xdaec>)
 800f168:	461c      	mov	r4, r3
 800f16a:	4613      	mov	r3, r2
 800f16c:	cb07      	ldmia	r3!, {r0, r1, r2}
 800f16e:	6020      	str	r0, [r4, #0]
 800f170:	6061      	str	r1, [r4, #4]
 800f172:	60a2      	str	r2, [r4, #8]
 800f174:	881b      	ldrh	r3, [r3, #0]
 800f176:	81a3      	strh	r3, [r4, #12]
			break;
 800f178:	f00d b9d4 	b.w	801c524 <problem_fetch+0x1ae60>
 800f17c:	080284b8 	.word	0x080284b8
 800f180:	08023920 	.word	0x08023920
 800f184:	080284c4 	.word	0x080284c4
 800f188:	080284d0 	.word	0x080284d0
 800f18c:	08023bf0 	.word	0x08023bf0
 800f190:	080284e0 	.word	0x080284e0
 800f194:	080284f4 	.word	0x080284f4
 800f198:	08028504 	.word	0x08028504
 800f19c:	08023a64 	.word	0x08023a64
 800f1a0:	0802851c 	.word	0x0802851c
 800f1a4:	080238ec 	.word	0x080238ec
 800f1a8:	0802852c 	.word	0x0802852c
 800f1ac:	0802853c 	.word	0x0802853c
 800f1b0:	080239dc 	.word	0x080239dc
 800f1b4:	08028550 	.word	0x08028550
 800f1b8:	080239f4 	.word	0x080239f4
 800f1bc:	0802855c 	.word	0x0802855c
 800f1c0:	0802856c 	.word	0x0802856c
 800f1c4:	08023978 	.word	0x08023978
 800f1c8:	08028580 	.word	0x08028580
 800f1cc:	08023854 	.word	0x08023854
 800f1d0:	0802858c 	.word	0x0802858c
 800f1d4:	0802859c 	.word	0x0802859c
 800f1d8:	080285b0 	.word	0x080285b0
 800f1dc:	080285c0 	.word	0x080285c0
 800f1e0:	080285d0 	.word	0x080285d0
		case 399 :
			strcpy(p->name,"MAIDENATOR2");
 800f1e4:	687b      	ldr	r3, [r7, #4]
 800f1e6:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800f1ea:	4aad      	ldr	r2, [pc, #692]	; (800f4a0 <problem_fetch+0xdddc>)
 800f1ec:	461c      	mov	r4, r3
 800f1ee:	4613      	mov	r3, r2
 800f1f0:	cb07      	ldmia	r3!, {r0, r1, r2}
 800f1f2:	6020      	str	r0, [r4, #0]
 800f1f4:	6061      	str	r1, [r4, #4]
 800f1f6:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade,"6C");
 800f1f8:	687b      	ldr	r3, [r7, #4]
 800f1fa:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800f1fe:	4aa9      	ldr	r2, [pc, #676]	; (800f4a4 <problem_fetch+0xdde0>)
 800f200:	8811      	ldrh	r1, [r2, #0]
 800f202:	7892      	ldrb	r2, [r2, #2]
 800f204:	8019      	strh	r1, [r3, #0]
 800f206:	709a      	strb	r2, [r3, #2]
			p->moveSize = 9;
 800f208:	687b      	ldr	r3, [r7, #4]
 800f20a:	2209      	movs	r2, #9
 800f20c:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,C,C,H,C,F,A,B,A");
 800f20e:	687b      	ldr	r3, [r7, #4]
 800f210:	33a4      	adds	r3, #164	; 0xa4
 800f212:	4aa5      	ldr	r2, [pc, #660]	; (800f4a8 <problem_fetch+0xdde4>)
 800f214:	461d      	mov	r5, r3
 800f216:	4614      	mov	r4, r2
 800f218:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800f21a:	6028      	str	r0, [r5, #0]
 800f21c:	6069      	str	r1, [r5, #4]
 800f21e:	60aa      	str	r2, [r5, #8]
 800f220:	60eb      	str	r3, [r5, #12]
 800f222:	8823      	ldrh	r3, [r4, #0]
 800f224:	822b      	strh	r3, [r5, #16]
			strcpy(p->moveNumbers,"4,5,8,8,13,11,14,15,18");
 800f226:	687b      	ldr	r3, [r7, #4]
 800f228:	3304      	adds	r3, #4
 800f22a:	4aa0      	ldr	r2, [pc, #640]	; (800f4ac <problem_fetch+0xdde8>)
 800f22c:	461c      	mov	r4, r3
 800f22e:	4615      	mov	r5, r2
 800f230:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f232:	6020      	str	r0, [r4, #0]
 800f234:	6061      	str	r1, [r4, #4]
 800f236:	60a2      	str	r2, [r4, #8]
 800f238:	60e3      	str	r3, [r4, #12]
 800f23a:	6828      	ldr	r0, [r5, #0]
 800f23c:	6120      	str	r0, [r4, #16]
 800f23e:	88ab      	ldrh	r3, [r5, #4]
 800f240:	79aa      	ldrb	r2, [r5, #6]
 800f242:	82a3      	strh	r3, [r4, #20]
 800f244:	4613      	mov	r3, r2
 800f246:	75a3      	strb	r3, [r4, #22]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,d,e");
 800f248:	687b      	ldr	r3, [r7, #4]
 800f24a:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800f24e:	4a98      	ldr	r2, [pc, #608]	; (800f4b0 <problem_fetch+0xddec>)
 800f250:	461d      	mov	r5, r3
 800f252:	4614      	mov	r4, r2
 800f254:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800f256:	6028      	str	r0, [r5, #0]
 800f258:	6069      	str	r1, [r5, #4]
 800f25a:	60aa      	str	r2, [r5, #8]
 800f25c:	60eb      	str	r3, [r5, #12]
 800f25e:	8823      	ldrh	r3, [r4, #0]
 800f260:	822b      	strh	r3, [r5, #16]
			break;
 800f262:	f00d b95f 	b.w	801c524 <problem_fetch+0x1ae60>
		case 400 :
			strcpy(p->name,"CHALK DUST");
 800f266:	687b      	ldr	r3, [r7, #4]
 800f268:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800f26c:	4991      	ldr	r1, [pc, #580]	; (800f4b4 <problem_fetch+0xddf0>)
 800f26e:	461a      	mov	r2, r3
 800f270:	460b      	mov	r3, r1
 800f272:	cb03      	ldmia	r3!, {r0, r1}
 800f274:	6010      	str	r0, [r2, #0]
 800f276:	6051      	str	r1, [r2, #4]
 800f278:	8819      	ldrh	r1, [r3, #0]
 800f27a:	789b      	ldrb	r3, [r3, #2]
 800f27c:	8111      	strh	r1, [r2, #8]
 800f27e:	7293      	strb	r3, [r2, #10]
			strcpy(p->grade,"6B+");
 800f280:	687b      	ldr	r3, [r7, #4]
 800f282:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800f286:	4a8c      	ldr	r2, [pc, #560]	; (800f4b8 <problem_fetch+0xddf4>)
 800f288:	6810      	ldr	r0, [r2, #0]
 800f28a:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 800f28c:	687b      	ldr	r3, [r7, #4]
 800f28e:	2207      	movs	r2, #7
 800f290:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"C,B,E,B,E,E,I");
 800f292:	687b      	ldr	r3, [r7, #4]
 800f294:	33a4      	adds	r3, #164	; 0xa4
 800f296:	4a89      	ldr	r2, [pc, #548]	; (800f4bc <problem_fetch+0xddf8>)
 800f298:	461c      	mov	r4, r3
 800f29a:	4613      	mov	r3, r2
 800f29c:	cb07      	ldmia	r3!, {r0, r1, r2}
 800f29e:	6020      	str	r0, [r4, #0]
 800f2a0:	6061      	str	r1, [r4, #4]
 800f2a2:	60a2      	str	r2, [r4, #8]
 800f2a4:	881b      	ldrh	r3, [r3, #0]
 800f2a6:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,6,8,10,12,16,18");
 800f2a8:	687b      	ldr	r3, [r7, #4]
 800f2aa:	3304      	adds	r3, #4
 800f2ac:	4a84      	ldr	r2, [pc, #528]	; (800f4c0 <problem_fetch+0xddfc>)
 800f2ae:	461d      	mov	r5, r3
 800f2b0:	4614      	mov	r4, r2
 800f2b2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800f2b4:	6028      	str	r0, [r5, #0]
 800f2b6:	6069      	str	r1, [r5, #4]
 800f2b8:	60aa      	str	r2, [r5, #8]
 800f2ba:	60eb      	str	r3, [r5, #12]
 800f2bc:	8823      	ldrh	r3, [r4, #0]
 800f2be:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,s,d,d,d,d,e");
 800f2c0:	687b      	ldr	r3, [r7, #4]
 800f2c2:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800f2c6:	4a7f      	ldr	r2, [pc, #508]	; (800f4c4 <problem_fetch+0xde00>)
 800f2c8:	461c      	mov	r4, r3
 800f2ca:	4613      	mov	r3, r2
 800f2cc:	cb07      	ldmia	r3!, {r0, r1, r2}
 800f2ce:	6020      	str	r0, [r4, #0]
 800f2d0:	6061      	str	r1, [r4, #4]
 800f2d2:	60a2      	str	r2, [r4, #8]
 800f2d4:	881b      	ldrh	r3, [r3, #0]
 800f2d6:	81a3      	strh	r3, [r4, #12]
			break;
 800f2d8:	f00d b924 	b.w	801c524 <problem_fetch+0x1ae60>
		case 401 :
			strcpy(p->name,"LAPPNOR");
 800f2dc:	687b      	ldr	r3, [r7, #4]
 800f2de:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800f2e2:	4979      	ldr	r1, [pc, #484]	; (800f4c8 <problem_fetch+0xde04>)
 800f2e4:	461a      	mov	r2, r3
 800f2e6:	460b      	mov	r3, r1
 800f2e8:	cb03      	ldmia	r3!, {r0, r1}
 800f2ea:	6010      	str	r0, [r2, #0]
 800f2ec:	6051      	str	r1, [r2, #4]
			strcpy(p->grade,"7A");
 800f2ee:	687b      	ldr	r3, [r7, #4]
 800f2f0:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800f2f4:	4a75      	ldr	r2, [pc, #468]	; (800f4cc <problem_fetch+0xde08>)
 800f2f6:	8811      	ldrh	r1, [r2, #0]
 800f2f8:	7892      	ldrb	r2, [r2, #2]
 800f2fa:	8019      	strh	r1, [r3, #0]
 800f2fc:	709a      	strb	r2, [r3, #2]
			p->moveSize = 7;
 800f2fe:	687b      	ldr	r3, [r7, #4]
 800f300:	2207      	movs	r2, #7
 800f302:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,E,I,H,J,G,I");
 800f304:	687b      	ldr	r3, [r7, #4]
 800f306:	33a4      	adds	r3, #164	; 0xa4
 800f308:	4a71      	ldr	r2, [pc, #452]	; (800f4d0 <problem_fetch+0xde0c>)
 800f30a:	461c      	mov	r4, r3
 800f30c:	4613      	mov	r3, r2
 800f30e:	cb07      	ldmia	r3!, {r0, r1, r2}
 800f310:	6020      	str	r0, [r4, #0]
 800f312:	6061      	str	r1, [r4, #4]
 800f314:	60a2      	str	r2, [r4, #8]
 800f316:	881b      	ldrh	r3, [r3, #0]
 800f318:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,8,9,12,12,15,18");
 800f31a:	687b      	ldr	r3, [r7, #4]
 800f31c:	3304      	adds	r3, #4
 800f31e:	4a6d      	ldr	r2, [pc, #436]	; (800f4d4 <problem_fetch+0xde10>)
 800f320:	461d      	mov	r5, r3
 800f322:	4614      	mov	r4, r2
 800f324:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800f326:	6028      	str	r0, [r5, #0]
 800f328:	6069      	str	r1, [r5, #4]
 800f32a:	60aa      	str	r2, [r5, #8]
 800f32c:	60eb      	str	r3, [r5, #12]
 800f32e:	8823      	ldrh	r3, [r4, #0]
 800f330:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 800f332:	687b      	ldr	r3, [r7, #4]
 800f334:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800f338:	4a67      	ldr	r2, [pc, #412]	; (800f4d8 <problem_fetch+0xde14>)
 800f33a:	461c      	mov	r4, r3
 800f33c:	4613      	mov	r3, r2
 800f33e:	cb07      	ldmia	r3!, {r0, r1, r2}
 800f340:	6020      	str	r0, [r4, #0]
 800f342:	6061      	str	r1, [r4, #4]
 800f344:	60a2      	str	r2, [r4, #8]
 800f346:	881b      	ldrh	r3, [r3, #0]
 800f348:	81a3      	strh	r3, [r4, #12]
			break;
 800f34a:	f00d b8eb 	b.w	801c524 <problem_fetch+0x1ae60>
		case 402 :
			strcpy(p->name,"CHAMONIX BAD DAY");
 800f34e:	687b      	ldr	r3, [r7, #4]
 800f350:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800f354:	4a61      	ldr	r2, [pc, #388]	; (800f4dc <problem_fetch+0xde18>)
 800f356:	461d      	mov	r5, r3
 800f358:	4614      	mov	r4, r2
 800f35a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800f35c:	6028      	str	r0, [r5, #0]
 800f35e:	6069      	str	r1, [r5, #4]
 800f360:	60aa      	str	r2, [r5, #8]
 800f362:	60eb      	str	r3, [r5, #12]
 800f364:	7823      	ldrb	r3, [r4, #0]
 800f366:	742b      	strb	r3, [r5, #16]
			strcpy(p->grade,"6C");
 800f368:	687b      	ldr	r3, [r7, #4]
 800f36a:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800f36e:	4a4d      	ldr	r2, [pc, #308]	; (800f4a4 <problem_fetch+0xdde0>)
 800f370:	8811      	ldrh	r1, [r2, #0]
 800f372:	7892      	ldrb	r2, [r2, #2]
 800f374:	8019      	strh	r1, [r3, #0]
 800f376:	709a      	strb	r2, [r3, #2]
			p->moveSize = 6;
 800f378:	687b      	ldr	r3, [r7, #4]
 800f37a:	2206      	movs	r2, #6
 800f37c:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,H,E,E,A,D");
 800f37e:	687b      	ldr	r3, [r7, #4]
 800f380:	33a4      	adds	r3, #164	; 0xa4
 800f382:	4a57      	ldr	r2, [pc, #348]	; (800f4e0 <problem_fetch+0xde1c>)
 800f384:	461c      	mov	r4, r3
 800f386:	4613      	mov	r3, r2
 800f388:	cb07      	ldmia	r3!, {r0, r1, r2}
 800f38a:	6020      	str	r0, [r4, #0]
 800f38c:	6061      	str	r1, [r4, #4]
 800f38e:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,8,8,12,14,18");
 800f390:	687b      	ldr	r3, [r7, #4]
 800f392:	3304      	adds	r3, #4
 800f394:	4a53      	ldr	r2, [pc, #332]	; (800f4e4 <problem_fetch+0xde20>)
 800f396:	461c      	mov	r4, r3
 800f398:	4613      	mov	r3, r2
 800f39a:	cb07      	ldmia	r3!, {r0, r1, r2}
 800f39c:	6020      	str	r0, [r4, #0]
 800f39e:	6061      	str	r1, [r4, #4]
 800f3a0:	60a2      	str	r2, [r4, #8]
 800f3a2:	881a      	ldrh	r2, [r3, #0]
 800f3a4:	789b      	ldrb	r3, [r3, #2]
 800f3a6:	81a2      	strh	r2, [r4, #12]
 800f3a8:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 800f3aa:	687b      	ldr	r3, [r7, #4]
 800f3ac:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800f3b0:	4a4d      	ldr	r2, [pc, #308]	; (800f4e8 <problem_fetch+0xde24>)
 800f3b2:	461c      	mov	r4, r3
 800f3b4:	4613      	mov	r3, r2
 800f3b6:	cb07      	ldmia	r3!, {r0, r1, r2}
 800f3b8:	6020      	str	r0, [r4, #0]
 800f3ba:	6061      	str	r1, [r4, #4]
 800f3bc:	60a2      	str	r2, [r4, #8]
			break;
 800f3be:	f00d b8b1 	b.w	801c524 <problem_fetch+0x1ae60>
		case 403 :
			strcpy(p->name,"CHARGER");
 800f3c2:	687b      	ldr	r3, [r7, #4]
 800f3c4:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800f3c8:	4948      	ldr	r1, [pc, #288]	; (800f4ec <problem_fetch+0xde28>)
 800f3ca:	461a      	mov	r2, r3
 800f3cc:	460b      	mov	r3, r1
 800f3ce:	cb03      	ldmia	r3!, {r0, r1}
 800f3d0:	6010      	str	r0, [r2, #0]
 800f3d2:	6051      	str	r1, [r2, #4]
			strcpy(p->grade,"6C");
 800f3d4:	687b      	ldr	r3, [r7, #4]
 800f3d6:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800f3da:	4a32      	ldr	r2, [pc, #200]	; (800f4a4 <problem_fetch+0xdde0>)
 800f3dc:	8811      	ldrh	r1, [r2, #0]
 800f3de:	7892      	ldrb	r2, [r2, #2]
 800f3e0:	8019      	strh	r1, [r3, #0]
 800f3e2:	709a      	strb	r2, [r3, #2]
			p->moveSize = 6;
 800f3e4:	687b      	ldr	r3, [r7, #4]
 800f3e6:	2206      	movs	r2, #6
 800f3e8:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,I,E,E,B,D");
 800f3ea:	687b      	ldr	r3, [r7, #4]
 800f3ec:	33a4      	adds	r3, #164	; 0xa4
 800f3ee:	4a40      	ldr	r2, [pc, #256]	; (800f4f0 <problem_fetch+0xde2c>)
 800f3f0:	461c      	mov	r4, r3
 800f3f2:	4613      	mov	r3, r2
 800f3f4:	cb07      	ldmia	r3!, {r0, r1, r2}
 800f3f6:	6020      	str	r0, [r4, #0]
 800f3f8:	6061      	str	r1, [r4, #4]
 800f3fa:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,7,8,12,15,18");
 800f3fc:	687b      	ldr	r3, [r7, #4]
 800f3fe:	3304      	adds	r3, #4
 800f400:	4a3c      	ldr	r2, [pc, #240]	; (800f4f4 <problem_fetch+0xde30>)
 800f402:	461c      	mov	r4, r3
 800f404:	4613      	mov	r3, r2
 800f406:	cb07      	ldmia	r3!, {r0, r1, r2}
 800f408:	6020      	str	r0, [r4, #0]
 800f40a:	6061      	str	r1, [r4, #4]
 800f40c:	60a2      	str	r2, [r4, #8]
 800f40e:	881a      	ldrh	r2, [r3, #0]
 800f410:	789b      	ldrb	r3, [r3, #2]
 800f412:	81a2      	strh	r2, [r4, #12]
 800f414:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 800f416:	687b      	ldr	r3, [r7, #4]
 800f418:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800f41c:	4a32      	ldr	r2, [pc, #200]	; (800f4e8 <problem_fetch+0xde24>)
 800f41e:	461c      	mov	r4, r3
 800f420:	4613      	mov	r3, r2
 800f422:	cb07      	ldmia	r3!, {r0, r1, r2}
 800f424:	6020      	str	r0, [r4, #0]
 800f426:	6061      	str	r1, [r4, #4]
 800f428:	60a2      	str	r2, [r4, #8]
			break;
 800f42a:	f00d b87b 	b.w	801c524 <problem_fetch+0x1ae60>
		case 404 :
			strcpy(p->name,"(S)ENDING");
 800f42e:	687b      	ldr	r3, [r7, #4]
 800f430:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800f434:	4930      	ldr	r1, [pc, #192]	; (800f4f8 <problem_fetch+0xde34>)
 800f436:	461a      	mov	r2, r3
 800f438:	460b      	mov	r3, r1
 800f43a:	cb03      	ldmia	r3!, {r0, r1}
 800f43c:	6010      	str	r0, [r2, #0]
 800f43e:	6051      	str	r1, [r2, #4]
 800f440:	881b      	ldrh	r3, [r3, #0]
 800f442:	8113      	strh	r3, [r2, #8]
			strcpy(p->grade,"7A+");
 800f444:	687b      	ldr	r3, [r7, #4]
 800f446:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800f44a:	4a2c      	ldr	r2, [pc, #176]	; (800f4fc <problem_fetch+0xde38>)
 800f44c:	6810      	ldr	r0, [r2, #0]
 800f44e:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 800f450:	687b      	ldr	r3, [r7, #4]
 800f452:	2207      	movs	r2, #7
 800f454:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"H,I,E,J,G,G,D");
 800f456:	687b      	ldr	r3, [r7, #4]
 800f458:	33a4      	adds	r3, #164	; 0xa4
 800f45a:	4a29      	ldr	r2, [pc, #164]	; (800f500 <problem_fetch+0xde3c>)
 800f45c:	461c      	mov	r4, r3
 800f45e:	4613      	mov	r3, r2
 800f460:	cb07      	ldmia	r3!, {r0, r1, r2}
 800f462:	6020      	str	r0, [r4, #0]
 800f464:	6061      	str	r1, [r4, #4]
 800f466:	60a2      	str	r2, [r4, #8]
 800f468:	881b      	ldrh	r3, [r3, #0]
 800f46a:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,7,9,12,15,17,18");
 800f46c:	687b      	ldr	r3, [r7, #4]
 800f46e:	3304      	adds	r3, #4
 800f470:	4a24      	ldr	r2, [pc, #144]	; (800f504 <problem_fetch+0xde40>)
 800f472:	461d      	mov	r5, r3
 800f474:	4614      	mov	r4, r2
 800f476:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800f478:	6028      	str	r0, [r5, #0]
 800f47a:	6069      	str	r1, [r5, #4]
 800f47c:	60aa      	str	r2, [r5, #8]
 800f47e:	60eb      	str	r3, [r5, #12]
 800f480:	8823      	ldrh	r3, [r4, #0]
 800f482:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 800f484:	687b      	ldr	r3, [r7, #4]
 800f486:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800f48a:	4a13      	ldr	r2, [pc, #76]	; (800f4d8 <problem_fetch+0xde14>)
 800f48c:	461c      	mov	r4, r3
 800f48e:	4613      	mov	r3, r2
 800f490:	cb07      	ldmia	r3!, {r0, r1, r2}
 800f492:	6020      	str	r0, [r4, #0]
 800f494:	6061      	str	r1, [r4, #4]
 800f496:	60a2      	str	r2, [r4, #8]
 800f498:	881b      	ldrh	r3, [r3, #0]
 800f49a:	81a3      	strh	r3, [r4, #12]
			break;
 800f49c:	f00d b842 	b.w	801c524 <problem_fetch+0x1ae60>
 800f4a0:	080285e4 	.word	0x080285e4
 800f4a4:	08023920 	.word	0x08023920
 800f4a8:	080285f0 	.word	0x080285f0
 800f4ac:	08028604 	.word	0x08028604
 800f4b0:	08024838 	.word	0x08024838
 800f4b4:	0802861c 	.word	0x0802861c
 800f4b8:	08023854 	.word	0x08023854
 800f4bc:	08028628 	.word	0x08028628
 800f4c0:	080264f4 	.word	0x080264f4
 800f4c4:	080238cc 	.word	0x080238cc
 800f4c8:	08028638 	.word	0x08028638
 800f4cc:	08023814 	.word	0x08023814
 800f4d0:	08028640 	.word	0x08028640
 800f4d4:	08028650 	.word	0x08028650
 800f4d8:	080239dc 	.word	0x080239dc
 800f4dc:	08028664 	.word	0x08028664
 800f4e0:	080243d8 	.word	0x080243d8
 800f4e4:	08028678 	.word	0x08028678
 800f4e8:	08023bf0 	.word	0x08023bf0
 800f4ec:	08028688 	.word	0x08028688
 800f4f0:	08028690 	.word	0x08028690
 800f4f4:	0802869c 	.word	0x0802869c
 800f4f8:	080286ac 	.word	0x080286ac
 800f4fc:	080239f4 	.word	0x080239f4
 800f500:	080286b8 	.word	0x080286b8
 800f504:	080286c8 	.word	0x080286c8
		case 405 :
			strcpy(p->name,"WEEL OF WOLVO");
 800f508:	687b      	ldr	r3, [r7, #4]
 800f50a:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800f50e:	4aa8      	ldr	r2, [pc, #672]	; (800f7b0 <problem_fetch+0xe0ec>)
 800f510:	461c      	mov	r4, r3
 800f512:	4613      	mov	r3, r2
 800f514:	cb07      	ldmia	r3!, {r0, r1, r2}
 800f516:	6020      	str	r0, [r4, #0]
 800f518:	6061      	str	r1, [r4, #4]
 800f51a:	60a2      	str	r2, [r4, #8]
 800f51c:	881b      	ldrh	r3, [r3, #0]
 800f51e:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade,"7B");
 800f520:	687b      	ldr	r3, [r7, #4]
 800f522:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800f526:	4aa3      	ldr	r2, [pc, #652]	; (800f7b4 <problem_fetch+0xe0f0>)
 800f528:	8811      	ldrh	r1, [r2, #0]
 800f52a:	7892      	ldrb	r2, [r2, #2]
 800f52c:	8019      	strh	r1, [r3, #0]
 800f52e:	709a      	strb	r2, [r3, #2]
			p->moveSize = 7;
 800f530:	687b      	ldr	r3, [r7, #4]
 800f532:	2207      	movs	r2, #7
 800f534:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"C,E,H,F,H,G,I");
 800f536:	687b      	ldr	r3, [r7, #4]
 800f538:	33a4      	adds	r3, #164	; 0xa4
 800f53a:	4a9f      	ldr	r2, [pc, #636]	; (800f7b8 <problem_fetch+0xe0f4>)
 800f53c:	461c      	mov	r4, r3
 800f53e:	4613      	mov	r3, r2
 800f540:	cb07      	ldmia	r3!, {r0, r1, r2}
 800f542:	6020      	str	r0, [r4, #0]
 800f544:	6061      	str	r1, [r4, #4]
 800f546:	60a2      	str	r2, [r4, #8]
 800f548:	881b      	ldrh	r3, [r3, #0]
 800f54a:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,9,5,11,12,15,18");
 800f54c:	687b      	ldr	r3, [r7, #4]
 800f54e:	3304      	adds	r3, #4
 800f550:	4a9a      	ldr	r2, [pc, #616]	; (800f7bc <problem_fetch+0xe0f8>)
 800f552:	461d      	mov	r5, r3
 800f554:	4614      	mov	r4, r2
 800f556:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800f558:	6028      	str	r0, [r5, #0]
 800f55a:	6069      	str	r1, [r5, #4]
 800f55c:	60aa      	str	r2, [r5, #8]
 800f55e:	60eb      	str	r3, [r5, #12]
 800f560:	8823      	ldrh	r3, [r4, #0]
 800f562:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 800f564:	687b      	ldr	r3, [r7, #4]
 800f566:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800f56a:	4a95      	ldr	r2, [pc, #596]	; (800f7c0 <problem_fetch+0xe0fc>)
 800f56c:	461c      	mov	r4, r3
 800f56e:	4613      	mov	r3, r2
 800f570:	cb07      	ldmia	r3!, {r0, r1, r2}
 800f572:	6020      	str	r0, [r4, #0]
 800f574:	6061      	str	r1, [r4, #4]
 800f576:	60a2      	str	r2, [r4, #8]
 800f578:	881b      	ldrh	r3, [r3, #0]
 800f57a:	81a3      	strh	r3, [r4, #12]
			break;
 800f57c:	f00c bfd2 	b.w	801c524 <problem_fetch+0x1ae60>
		case 406 :
			strcpy(p->name,"IMPACT");
 800f580:	687b      	ldr	r3, [r7, #4]
 800f582:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800f586:	4a8f      	ldr	r2, [pc, #572]	; (800f7c4 <problem_fetch+0xe100>)
 800f588:	6810      	ldr	r0, [r2, #0]
 800f58a:	6018      	str	r0, [r3, #0]
 800f58c:	8891      	ldrh	r1, [r2, #4]
 800f58e:	7992      	ldrb	r2, [r2, #6]
 800f590:	8099      	strh	r1, [r3, #4]
 800f592:	719a      	strb	r2, [r3, #6]
			strcpy(p->grade,"6B+");
 800f594:	687b      	ldr	r3, [r7, #4]
 800f596:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800f59a:	4a8b      	ldr	r2, [pc, #556]	; (800f7c8 <problem_fetch+0xe104>)
 800f59c:	6810      	ldr	r0, [r2, #0]
 800f59e:	6018      	str	r0, [r3, #0]
			p->moveSize = 8;
 800f5a0:	687b      	ldr	r3, [r7, #4]
 800f5a2:	2208      	movs	r2, #8
 800f5a4:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,H,E,J,E,B,E,D");
 800f5a6:	687b      	ldr	r3, [r7, #4]
 800f5a8:	33a4      	adds	r3, #164	; 0xa4
 800f5aa:	4a88      	ldr	r2, [pc, #544]	; (800f7cc <problem_fetch+0xe108>)
 800f5ac:	461c      	mov	r4, r3
 800f5ae:	4615      	mov	r5, r2
 800f5b0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f5b2:	6020      	str	r0, [r4, #0]
 800f5b4:	6061      	str	r1, [r4, #4]
 800f5b6:	60a2      	str	r2, [r4, #8]
 800f5b8:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,8,8,7,12,15,14,18");
 800f5ba:	687b      	ldr	r3, [r7, #4]
 800f5bc:	3304      	adds	r3, #4
 800f5be:	4a84      	ldr	r2, [pc, #528]	; (800f7d0 <problem_fetch+0xe10c>)
 800f5c0:	461d      	mov	r5, r3
 800f5c2:	4614      	mov	r4, r2
 800f5c4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800f5c6:	6028      	str	r0, [r5, #0]
 800f5c8:	6069      	str	r1, [r5, #4]
 800f5ca:	60aa      	str	r2, [r5, #8]
 800f5cc:	60eb      	str	r3, [r5, #12]
 800f5ce:	6820      	ldr	r0, [r4, #0]
 800f5d0:	6128      	str	r0, [r5, #16]
			strcpy(p->startFinish,"s,d,d,d,d,d,d,e");
 800f5d2:	687b      	ldr	r3, [r7, #4]
 800f5d4:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800f5d8:	4a7e      	ldr	r2, [pc, #504]	; (800f7d4 <problem_fetch+0xe110>)
 800f5da:	461c      	mov	r4, r3
 800f5dc:	4615      	mov	r5, r2
 800f5de:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f5e0:	6020      	str	r0, [r4, #0]
 800f5e2:	6061      	str	r1, [r4, #4]
 800f5e4:	60a2      	str	r2, [r4, #8]
 800f5e6:	60e3      	str	r3, [r4, #12]
			break;
 800f5e8:	f00c bf9c 	b.w	801c524 <problem_fetch+0x1ae60>
		case 407 :
			strcpy(p->name,"HUBBLE");
 800f5ec:	687b      	ldr	r3, [r7, #4]
 800f5ee:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800f5f2:	4a79      	ldr	r2, [pc, #484]	; (800f7d8 <problem_fetch+0xe114>)
 800f5f4:	6810      	ldr	r0, [r2, #0]
 800f5f6:	6018      	str	r0, [r3, #0]
 800f5f8:	8891      	ldrh	r1, [r2, #4]
 800f5fa:	7992      	ldrb	r2, [r2, #6]
 800f5fc:	8099      	strh	r1, [r3, #4]
 800f5fe:	719a      	strb	r2, [r3, #6]
			strcpy(p->grade,"7A+");
 800f600:	687b      	ldr	r3, [r7, #4]
 800f602:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800f606:	4a75      	ldr	r2, [pc, #468]	; (800f7dc <problem_fetch+0xe118>)
 800f608:	6810      	ldr	r0, [r2, #0]
 800f60a:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 800f60c:	687b      	ldr	r3, [r7, #4]
 800f60e:	2206      	movs	r2, #6
 800f610:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,G,I,H,K,I");
 800f612:	687b      	ldr	r3, [r7, #4]
 800f614:	33a4      	adds	r3, #164	; 0xa4
 800f616:	4a72      	ldr	r2, [pc, #456]	; (800f7e0 <problem_fetch+0xe11c>)
 800f618:	461c      	mov	r4, r3
 800f61a:	4613      	mov	r3, r2
 800f61c:	cb07      	ldmia	r3!, {r0, r1, r2}
 800f61e:	6020      	str	r0, [r4, #0]
 800f620:	6061      	str	r1, [r4, #4]
 800f622:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,6,9,12,14,18");
 800f624:	687b      	ldr	r3, [r7, #4]
 800f626:	3304      	adds	r3, #4
 800f628:	4a6e      	ldr	r2, [pc, #440]	; (800f7e4 <problem_fetch+0xe120>)
 800f62a:	461c      	mov	r4, r3
 800f62c:	4613      	mov	r3, r2
 800f62e:	cb07      	ldmia	r3!, {r0, r1, r2}
 800f630:	6020      	str	r0, [r4, #0]
 800f632:	6061      	str	r1, [r4, #4]
 800f634:	60a2      	str	r2, [r4, #8]
 800f636:	881a      	ldrh	r2, [r3, #0]
 800f638:	789b      	ldrb	r3, [r3, #2]
 800f63a:	81a2      	strh	r2, [r4, #12]
 800f63c:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish,"s,s,d,d,d,e");
 800f63e:	687b      	ldr	r3, [r7, #4]
 800f640:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800f644:	4a68      	ldr	r2, [pc, #416]	; (800f7e8 <problem_fetch+0xe124>)
 800f646:	461c      	mov	r4, r3
 800f648:	4613      	mov	r3, r2
 800f64a:	cb07      	ldmia	r3!, {r0, r1, r2}
 800f64c:	6020      	str	r0, [r4, #0]
 800f64e:	6061      	str	r1, [r4, #4]
 800f650:	60a2      	str	r2, [r4, #8]
			break;
 800f652:	f00c bf67 	b.w	801c524 <problem_fetch+0x1ae60>
		case 408 :
			strcpy(p->name,"FREERIDER");
 800f656:	687b      	ldr	r3, [r7, #4]
 800f658:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800f65c:	4963      	ldr	r1, [pc, #396]	; (800f7ec <problem_fetch+0xe128>)
 800f65e:	461a      	mov	r2, r3
 800f660:	460b      	mov	r3, r1
 800f662:	cb03      	ldmia	r3!, {r0, r1}
 800f664:	6010      	str	r0, [r2, #0]
 800f666:	6051      	str	r1, [r2, #4]
 800f668:	881b      	ldrh	r3, [r3, #0]
 800f66a:	8113      	strh	r3, [r2, #8]
			strcpy(p->grade,"7A+");
 800f66c:	687b      	ldr	r3, [r7, #4]
 800f66e:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800f672:	4a5a      	ldr	r2, [pc, #360]	; (800f7dc <problem_fetch+0xe118>)
 800f674:	6810      	ldr	r0, [r2, #0]
 800f676:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 800f678:	687b      	ldr	r3, [r7, #4]
 800f67a:	2206      	movs	r2, #6
 800f67c:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,E,I,H,H,D");
 800f67e:	687b      	ldr	r3, [r7, #4]
 800f680:	33a4      	adds	r3, #164	; 0xa4
 800f682:	4a5b      	ldr	r2, [pc, #364]	; (800f7f0 <problem_fetch+0xe12c>)
 800f684:	461c      	mov	r4, r3
 800f686:	4613      	mov	r3, r2
 800f688:	cb07      	ldmia	r3!, {r0, r1, r2}
 800f68a:	6020      	str	r0, [r4, #0]
 800f68c:	6061      	str	r1, [r4, #4]
 800f68e:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,8,9,12,16,18");
 800f690:	687b      	ldr	r3, [r7, #4]
 800f692:	3304      	adds	r3, #4
 800f694:	4a57      	ldr	r2, [pc, #348]	; (800f7f4 <problem_fetch+0xe130>)
 800f696:	461c      	mov	r4, r3
 800f698:	4613      	mov	r3, r2
 800f69a:	cb07      	ldmia	r3!, {r0, r1, r2}
 800f69c:	6020      	str	r0, [r4, #0]
 800f69e:	6061      	str	r1, [r4, #4]
 800f6a0:	60a2      	str	r2, [r4, #8]
 800f6a2:	881a      	ldrh	r2, [r3, #0]
 800f6a4:	789b      	ldrb	r3, [r3, #2]
 800f6a6:	81a2      	strh	r2, [r4, #12]
 800f6a8:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 800f6aa:	687b      	ldr	r3, [r7, #4]
 800f6ac:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800f6b0:	4a51      	ldr	r2, [pc, #324]	; (800f7f8 <problem_fetch+0xe134>)
 800f6b2:	461c      	mov	r4, r3
 800f6b4:	4613      	mov	r3, r2
 800f6b6:	cb07      	ldmia	r3!, {r0, r1, r2}
 800f6b8:	6020      	str	r0, [r4, #0]
 800f6ba:	6061      	str	r1, [r4, #4]
 800f6bc:	60a2      	str	r2, [r4, #8]
			break;
 800f6be:	f00c bf31 	b.w	801c524 <problem_fetch+0x1ae60>
		case 409 :
			strcpy(p->name,"LAST HOPE");
 800f6c2:	687b      	ldr	r3, [r7, #4]
 800f6c4:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800f6c8:	494c      	ldr	r1, [pc, #304]	; (800f7fc <problem_fetch+0xe138>)
 800f6ca:	461a      	mov	r2, r3
 800f6cc:	460b      	mov	r3, r1
 800f6ce:	cb03      	ldmia	r3!, {r0, r1}
 800f6d0:	6010      	str	r0, [r2, #0]
 800f6d2:	6051      	str	r1, [r2, #4]
 800f6d4:	881b      	ldrh	r3, [r3, #0]
 800f6d6:	8113      	strh	r3, [r2, #8]
			strcpy(p->grade,"7A+");
 800f6d8:	687b      	ldr	r3, [r7, #4]
 800f6da:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800f6de:	4a3f      	ldr	r2, [pc, #252]	; (800f7dc <problem_fetch+0xe118>)
 800f6e0:	6810      	ldr	r0, [r2, #0]
 800f6e2:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 800f6e4:	687b      	ldr	r3, [r7, #4]
 800f6e6:	2206      	movs	r2, #6
 800f6e8:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,E,I,H,K,I");
 800f6ea:	687b      	ldr	r3, [r7, #4]
 800f6ec:	33a4      	adds	r3, #164	; 0xa4
 800f6ee:	4a44      	ldr	r2, [pc, #272]	; (800f800 <problem_fetch+0xe13c>)
 800f6f0:	461c      	mov	r4, r3
 800f6f2:	4613      	mov	r3, r2
 800f6f4:	cb07      	ldmia	r3!, {r0, r1, r2}
 800f6f6:	6020      	str	r0, [r4, #0]
 800f6f8:	6061      	str	r1, [r4, #4]
 800f6fa:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,8,9,12,14,18");
 800f6fc:	687b      	ldr	r3, [r7, #4]
 800f6fe:	3304      	adds	r3, #4
 800f700:	4a40      	ldr	r2, [pc, #256]	; (800f804 <problem_fetch+0xe140>)
 800f702:	461c      	mov	r4, r3
 800f704:	4613      	mov	r3, r2
 800f706:	cb07      	ldmia	r3!, {r0, r1, r2}
 800f708:	6020      	str	r0, [r4, #0]
 800f70a:	6061      	str	r1, [r4, #4]
 800f70c:	60a2      	str	r2, [r4, #8]
 800f70e:	881a      	ldrh	r2, [r3, #0]
 800f710:	789b      	ldrb	r3, [r3, #2]
 800f712:	81a2      	strh	r2, [r4, #12]
 800f714:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 800f716:	687b      	ldr	r3, [r7, #4]
 800f718:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800f71c:	4a36      	ldr	r2, [pc, #216]	; (800f7f8 <problem_fetch+0xe134>)
 800f71e:	461c      	mov	r4, r3
 800f720:	4613      	mov	r3, r2
 800f722:	cb07      	ldmia	r3!, {r0, r1, r2}
 800f724:	6020      	str	r0, [r4, #0]
 800f726:	6061      	str	r1, [r4, #4]
 800f728:	60a2      	str	r2, [r4, #8]
			break;
 800f72a:	f00c befb 	b.w	801c524 <problem_fetch+0x1ae60>
		case 410 :
			strcpy(p->name,"RAINING MEANS TRAINING");
 800f72e:	687b      	ldr	r3, [r7, #4]
 800f730:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800f734:	4a34      	ldr	r2, [pc, #208]	; (800f808 <problem_fetch+0xe144>)
 800f736:	461c      	mov	r4, r3
 800f738:	4615      	mov	r5, r2
 800f73a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f73c:	6020      	str	r0, [r4, #0]
 800f73e:	6061      	str	r1, [r4, #4]
 800f740:	60a2      	str	r2, [r4, #8]
 800f742:	60e3      	str	r3, [r4, #12]
 800f744:	6828      	ldr	r0, [r5, #0]
 800f746:	6120      	str	r0, [r4, #16]
 800f748:	88ab      	ldrh	r3, [r5, #4]
 800f74a:	79aa      	ldrb	r2, [r5, #6]
 800f74c:	82a3      	strh	r3, [r4, #20]
 800f74e:	4613      	mov	r3, r2
 800f750:	75a3      	strb	r3, [r4, #22]
			strcpy(p->grade,"7A+");
 800f752:	687b      	ldr	r3, [r7, #4]
 800f754:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800f758:	4a20      	ldr	r2, [pc, #128]	; (800f7dc <problem_fetch+0xe118>)
 800f75a:	6810      	ldr	r0, [r2, #0]
 800f75c:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 800f75e:	687b      	ldr	r3, [r7, #4]
 800f760:	2207      	movs	r2, #7
 800f762:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,E,I,H,H,I,D");
 800f764:	687b      	ldr	r3, [r7, #4]
 800f766:	33a4      	adds	r3, #164	; 0xa4
 800f768:	4a28      	ldr	r2, [pc, #160]	; (800f80c <problem_fetch+0xe148>)
 800f76a:	461c      	mov	r4, r3
 800f76c:	4613      	mov	r3, r2
 800f76e:	cb07      	ldmia	r3!, {r0, r1, r2}
 800f770:	6020      	str	r0, [r4, #0]
 800f772:	6061      	str	r1, [r4, #4]
 800f774:	60a2      	str	r2, [r4, #8]
 800f776:	881b      	ldrh	r3, [r3, #0]
 800f778:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,9,9,12,16,7,18");
 800f77a:	687b      	ldr	r3, [r7, #4]
 800f77c:	3304      	adds	r3, #4
 800f77e:	4a24      	ldr	r2, [pc, #144]	; (800f810 <problem_fetch+0xe14c>)
 800f780:	461d      	mov	r5, r3
 800f782:	4614      	mov	r4, r2
 800f784:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800f786:	6028      	str	r0, [r5, #0]
 800f788:	6069      	str	r1, [r5, #4]
 800f78a:	60aa      	str	r2, [r5, #8]
 800f78c:	60eb      	str	r3, [r5, #12]
 800f78e:	7823      	ldrb	r3, [r4, #0]
 800f790:	742b      	strb	r3, [r5, #16]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 800f792:	687b      	ldr	r3, [r7, #4]
 800f794:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800f798:	4a09      	ldr	r2, [pc, #36]	; (800f7c0 <problem_fetch+0xe0fc>)
 800f79a:	461c      	mov	r4, r3
 800f79c:	4613      	mov	r3, r2
 800f79e:	cb07      	ldmia	r3!, {r0, r1, r2}
 800f7a0:	6020      	str	r0, [r4, #0]
 800f7a2:	6061      	str	r1, [r4, #4]
 800f7a4:	60a2      	str	r2, [r4, #8]
 800f7a6:	881b      	ldrh	r3, [r3, #0]
 800f7a8:	81a3      	strh	r3, [r4, #12]
			break;
 800f7aa:	f00c bebb 	b.w	801c524 <problem_fetch+0x1ae60>
 800f7ae:	bf00      	nop
 800f7b0:	080286dc 	.word	0x080286dc
 800f7b4:	08023f4c 	.word	0x08023f4c
 800f7b8:	080286ec 	.word	0x080286ec
 800f7bc:	080286fc 	.word	0x080286fc
 800f7c0:	080239dc 	.word	0x080239dc
 800f7c4:	08028710 	.word	0x08028710
 800f7c8:	08023854 	.word	0x08023854
 800f7cc:	08028718 	.word	0x08028718
 800f7d0:	08028728 	.word	0x08028728
 800f7d4:	08023a64 	.word	0x08023a64
 800f7d8:	0802873c 	.word	0x0802873c
 800f7dc:	080239f4 	.word	0x080239f4
 800f7e0:	08028744 	.word	0x08028744
 800f7e4:	08028750 	.word	0x08028750
 800f7e8:	08023834 	.word	0x08023834
 800f7ec:	08028760 	.word	0x08028760
 800f7f0:	0802876c 	.word	0x0802876c
 800f7f4:	08028778 	.word	0x08028778
 800f7f8:	08023bf0 	.word	0x08023bf0
 800f7fc:	08028788 	.word	0x08028788
 800f800:	08028794 	.word	0x08028794
 800f804:	08023d7c 	.word	0x08023d7c
 800f808:	080287a0 	.word	0x080287a0
 800f80c:	080287b8 	.word	0x080287b8
 800f810:	080287c8 	.word	0x080287c8
		case 411 :
			strcpy(p->name,"MADISH");
 800f814:	687b      	ldr	r3, [r7, #4]
 800f816:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800f81a:	4ab0      	ldr	r2, [pc, #704]	; (800fadc <problem_fetch+0xe418>)
 800f81c:	6810      	ldr	r0, [r2, #0]
 800f81e:	6018      	str	r0, [r3, #0]
 800f820:	8891      	ldrh	r1, [r2, #4]
 800f822:	7992      	ldrb	r2, [r2, #6]
 800f824:	8099      	strh	r1, [r3, #4]
 800f826:	719a      	strb	r2, [r3, #6]
			strcpy(p->grade,"6B+");
 800f828:	687b      	ldr	r3, [r7, #4]
 800f82a:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800f82e:	4aac      	ldr	r2, [pc, #688]	; (800fae0 <problem_fetch+0xe41c>)
 800f830:	6810      	ldr	r0, [r2, #0]
 800f832:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 800f834:	687b      	ldr	r3, [r7, #4]
 800f836:	2207      	movs	r2, #7
 800f838:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"E,C,E,F,C,E,D");
 800f83a:	687b      	ldr	r3, [r7, #4]
 800f83c:	33a4      	adds	r3, #164	; 0xa4
 800f83e:	4aa9      	ldr	r2, [pc, #676]	; (800fae4 <problem_fetch+0xe420>)
 800f840:	461c      	mov	r4, r3
 800f842:	4613      	mov	r3, r2
 800f844:	cb07      	ldmia	r3!, {r0, r1, r2}
 800f846:	6020      	str	r0, [r4, #0]
 800f848:	6061      	str	r1, [r4, #4]
 800f84a:	60a2      	str	r2, [r4, #8]
 800f84c:	881b      	ldrh	r3, [r3, #0]
 800f84e:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"6,5,8,11,13,16,18");
 800f850:	687b      	ldr	r3, [r7, #4]
 800f852:	3304      	adds	r3, #4
 800f854:	4aa4      	ldr	r2, [pc, #656]	; (800fae8 <problem_fetch+0xe424>)
 800f856:	461d      	mov	r5, r3
 800f858:	4614      	mov	r4, r2
 800f85a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800f85c:	6028      	str	r0, [r5, #0]
 800f85e:	6069      	str	r1, [r5, #4]
 800f860:	60aa      	str	r2, [r5, #8]
 800f862:	60eb      	str	r3, [r5, #12]
 800f864:	8823      	ldrh	r3, [r4, #0]
 800f866:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,s,d,d,d,d,e");
 800f868:	687b      	ldr	r3, [r7, #4]
 800f86a:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800f86e:	4a9f      	ldr	r2, [pc, #636]	; (800faec <problem_fetch+0xe428>)
 800f870:	461c      	mov	r4, r3
 800f872:	4613      	mov	r3, r2
 800f874:	cb07      	ldmia	r3!, {r0, r1, r2}
 800f876:	6020      	str	r0, [r4, #0]
 800f878:	6061      	str	r1, [r4, #4]
 800f87a:	60a2      	str	r2, [r4, #8]
 800f87c:	881b      	ldrh	r3, [r3, #0]
 800f87e:	81a3      	strh	r3, [r4, #12]
			break;
 800f880:	f00c be50 	b.w	801c524 <problem_fetch+0x1ae60>
		case 412 :
			strcpy(p->name,"BAGHEERA");
 800f884:	687b      	ldr	r3, [r7, #4]
 800f886:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800f88a:	4999      	ldr	r1, [pc, #612]	; (800faf0 <problem_fetch+0xe42c>)
 800f88c:	461a      	mov	r2, r3
 800f88e:	460b      	mov	r3, r1
 800f890:	cb03      	ldmia	r3!, {r0, r1}
 800f892:	6010      	str	r0, [r2, #0]
 800f894:	6051      	str	r1, [r2, #4]
 800f896:	781b      	ldrb	r3, [r3, #0]
 800f898:	7213      	strb	r3, [r2, #8]
			strcpy(p->grade,"7A");
 800f89a:	687b      	ldr	r3, [r7, #4]
 800f89c:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800f8a0:	4a94      	ldr	r2, [pc, #592]	; (800faf4 <problem_fetch+0xe430>)
 800f8a2:	8811      	ldrh	r1, [r2, #0]
 800f8a4:	7892      	ldrb	r2, [r2, #2]
 800f8a6:	8019      	strh	r1, [r3, #0]
 800f8a8:	709a      	strb	r2, [r3, #2]
			p->moveSize = 7;
 800f8aa:	687b      	ldr	r3, [r7, #4]
 800f8ac:	2207      	movs	r2, #7
 800f8ae:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"C,D,G,I,G,G,D");
 800f8b0:	687b      	ldr	r3, [r7, #4]
 800f8b2:	33a4      	adds	r3, #164	; 0xa4
 800f8b4:	4a90      	ldr	r2, [pc, #576]	; (800faf8 <problem_fetch+0xe434>)
 800f8b6:	461c      	mov	r4, r3
 800f8b8:	4613      	mov	r3, r2
 800f8ba:	cb07      	ldmia	r3!, {r0, r1, r2}
 800f8bc:	6020      	str	r0, [r4, #0]
 800f8be:	6061      	str	r1, [r4, #4]
 800f8c0:	60a2      	str	r2, [r4, #8]
 800f8c2:	881b      	ldrh	r3, [r3, #0]
 800f8c4:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,7,9,14,14,17,18");
 800f8c6:	687b      	ldr	r3, [r7, #4]
 800f8c8:	3304      	adds	r3, #4
 800f8ca:	4a8c      	ldr	r2, [pc, #560]	; (800fafc <problem_fetch+0xe438>)
 800f8cc:	461d      	mov	r5, r3
 800f8ce:	4614      	mov	r4, r2
 800f8d0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800f8d2:	6028      	str	r0, [r5, #0]
 800f8d4:	6069      	str	r1, [r5, #4]
 800f8d6:	60aa      	str	r2, [r5, #8]
 800f8d8:	60eb      	str	r3, [r5, #12]
 800f8da:	8823      	ldrh	r3, [r4, #0]
 800f8dc:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 800f8de:	687b      	ldr	r3, [r7, #4]
 800f8e0:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800f8e4:	4a86      	ldr	r2, [pc, #536]	; (800fb00 <problem_fetch+0xe43c>)
 800f8e6:	461c      	mov	r4, r3
 800f8e8:	4613      	mov	r3, r2
 800f8ea:	cb07      	ldmia	r3!, {r0, r1, r2}
 800f8ec:	6020      	str	r0, [r4, #0]
 800f8ee:	6061      	str	r1, [r4, #4]
 800f8f0:	60a2      	str	r2, [r4, #8]
 800f8f2:	881b      	ldrh	r3, [r3, #0]
 800f8f4:	81a3      	strh	r3, [r4, #12]
			break;
 800f8f6:	f00c be15 	b.w	801c524 <problem_fetch+0x1ae60>
		case 413 :
			strcpy(p->name,"BLACK CAVIAR");
 800f8fa:	687b      	ldr	r3, [r7, #4]
 800f8fc:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800f900:	4a80      	ldr	r2, [pc, #512]	; (800fb04 <problem_fetch+0xe440>)
 800f902:	461c      	mov	r4, r3
 800f904:	4613      	mov	r3, r2
 800f906:	cb07      	ldmia	r3!, {r0, r1, r2}
 800f908:	6020      	str	r0, [r4, #0]
 800f90a:	6061      	str	r1, [r4, #4]
 800f90c:	60a2      	str	r2, [r4, #8]
 800f90e:	781b      	ldrb	r3, [r3, #0]
 800f910:	7323      	strb	r3, [r4, #12]
			strcpy(p->grade,"6C");
 800f912:	687b      	ldr	r3, [r7, #4]
 800f914:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800f918:	4a7b      	ldr	r2, [pc, #492]	; (800fb08 <problem_fetch+0xe444>)
 800f91a:	8811      	ldrh	r1, [r2, #0]
 800f91c:	7892      	ldrb	r2, [r2, #2]
 800f91e:	8019      	strh	r1, [r3, #0]
 800f920:	709a      	strb	r2, [r3, #2]
			p->moveSize = 8;
 800f922:	687b      	ldr	r3, [r7, #4]
 800f924:	2208      	movs	r2, #8
 800f926:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,J,E,A,A,H,F,D");
 800f928:	687b      	ldr	r3, [r7, #4]
 800f92a:	33a4      	adds	r3, #164	; 0xa4
 800f92c:	4a77      	ldr	r2, [pc, #476]	; (800fb0c <problem_fetch+0xe448>)
 800f92e:	461c      	mov	r4, r3
 800f930:	4615      	mov	r5, r2
 800f932:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f934:	6020      	str	r0, [r4, #0]
 800f936:	6061      	str	r1, [r4, #4]
 800f938:	60a2      	str	r2, [r4, #8]
 800f93a:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,5,6,9,14,8,11,18");
 800f93c:	687b      	ldr	r3, [r7, #4]
 800f93e:	3304      	adds	r3, #4
 800f940:	4a73      	ldr	r2, [pc, #460]	; (800fb10 <problem_fetch+0xe44c>)
 800f942:	461d      	mov	r5, r3
 800f944:	4614      	mov	r4, r2
 800f946:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800f948:	6028      	str	r0, [r5, #0]
 800f94a:	6069      	str	r1, [r5, #4]
 800f94c:	60aa      	str	r2, [r5, #8]
 800f94e:	60eb      	str	r3, [r5, #12]
 800f950:	8823      	ldrh	r3, [r4, #0]
 800f952:	78a2      	ldrb	r2, [r4, #2]
 800f954:	822b      	strh	r3, [r5, #16]
 800f956:	4613      	mov	r3, r2
 800f958:	74ab      	strb	r3, [r5, #18]
			strcpy(p->startFinish,"s,d,d,d,d,d,d,e");
 800f95a:	687b      	ldr	r3, [r7, #4]
 800f95c:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800f960:	4a6c      	ldr	r2, [pc, #432]	; (800fb14 <problem_fetch+0xe450>)
 800f962:	461c      	mov	r4, r3
 800f964:	4615      	mov	r5, r2
 800f966:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f968:	6020      	str	r0, [r4, #0]
 800f96a:	6061      	str	r1, [r4, #4]
 800f96c:	60a2      	str	r2, [r4, #8]
 800f96e:	60e3      	str	r3, [r4, #12]
			break;
 800f970:	f00c bdd8 	b.w	801c524 <problem_fetch+0x1ae60>
		case 414 :
			strcpy(p->name,"HYPNOTIZED MINDS");
 800f974:	687b      	ldr	r3, [r7, #4]
 800f976:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800f97a:	4a67      	ldr	r2, [pc, #412]	; (800fb18 <problem_fetch+0xe454>)
 800f97c:	461d      	mov	r5, r3
 800f97e:	4614      	mov	r4, r2
 800f980:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800f982:	6028      	str	r0, [r5, #0]
 800f984:	6069      	str	r1, [r5, #4]
 800f986:	60aa      	str	r2, [r5, #8]
 800f988:	60eb      	str	r3, [r5, #12]
 800f98a:	7823      	ldrb	r3, [r4, #0]
 800f98c:	742b      	strb	r3, [r5, #16]
			strcpy(p->grade,"6B+");
 800f98e:	687b      	ldr	r3, [r7, #4]
 800f990:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800f994:	4a52      	ldr	r2, [pc, #328]	; (800fae0 <problem_fetch+0xe41c>)
 800f996:	6810      	ldr	r0, [r2, #0]
 800f998:	6018      	str	r0, [r3, #0]
			p->moveSize = 9;
 800f99a:	687b      	ldr	r3, [r7, #4]
 800f99c:	2209      	movs	r2, #9
 800f99e:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"B,C,G,J,I,C,H,J,I");
 800f9a0:	687b      	ldr	r3, [r7, #4]
 800f9a2:	33a4      	adds	r3, #164	; 0xa4
 800f9a4:	4a5d      	ldr	r2, [pc, #372]	; (800fb1c <problem_fetch+0xe458>)
 800f9a6:	461d      	mov	r5, r3
 800f9a8:	4614      	mov	r4, r2
 800f9aa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800f9ac:	6028      	str	r0, [r5, #0]
 800f9ae:	6069      	str	r1, [r5, #4]
 800f9b0:	60aa      	str	r2, [r5, #8]
 800f9b2:	60eb      	str	r3, [r5, #12]
 800f9b4:	8823      	ldrh	r3, [r4, #0]
 800f9b6:	822b      	strh	r3, [r5, #16]
			strcpy(p->moveNumbers,"6,5,9,12,15,8,8,5,18");
 800f9b8:	687b      	ldr	r3, [r7, #4]
 800f9ba:	3304      	adds	r3, #4
 800f9bc:	4a58      	ldr	r2, [pc, #352]	; (800fb20 <problem_fetch+0xe45c>)
 800f9be:	461d      	mov	r5, r3
 800f9c0:	4614      	mov	r4, r2
 800f9c2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800f9c4:	6028      	str	r0, [r5, #0]
 800f9c6:	6069      	str	r1, [r5, #4]
 800f9c8:	60aa      	str	r2, [r5, #8]
 800f9ca:	60eb      	str	r3, [r5, #12]
 800f9cc:	6820      	ldr	r0, [r4, #0]
 800f9ce:	6128      	str	r0, [r5, #16]
 800f9d0:	7923      	ldrb	r3, [r4, #4]
 800f9d2:	752b      	strb	r3, [r5, #20]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,d,e");
 800f9d4:	687b      	ldr	r3, [r7, #4]
 800f9d6:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800f9da:	4a52      	ldr	r2, [pc, #328]	; (800fb24 <problem_fetch+0xe460>)
 800f9dc:	461d      	mov	r5, r3
 800f9de:	4614      	mov	r4, r2
 800f9e0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800f9e2:	6028      	str	r0, [r5, #0]
 800f9e4:	6069      	str	r1, [r5, #4]
 800f9e6:	60aa      	str	r2, [r5, #8]
 800f9e8:	60eb      	str	r3, [r5, #12]
 800f9ea:	8823      	ldrh	r3, [r4, #0]
 800f9ec:	822b      	strh	r3, [r5, #16]
			break;
 800f9ee:	f00c bd99 	b.w	801c524 <problem_fetch+0x1ae60>
		case 415 :
			strcpy(p->name,"CHRIS THE STRONGEST");
 800f9f2:	687b      	ldr	r3, [r7, #4]
 800f9f4:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800f9f8:	4a4b      	ldr	r2, [pc, #300]	; (800fb28 <problem_fetch+0xe464>)
 800f9fa:	461d      	mov	r5, r3
 800f9fc:	4614      	mov	r4, r2
 800f9fe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800fa00:	6028      	str	r0, [r5, #0]
 800fa02:	6069      	str	r1, [r5, #4]
 800fa04:	60aa      	str	r2, [r5, #8]
 800fa06:	60eb      	str	r3, [r5, #12]
 800fa08:	6820      	ldr	r0, [r4, #0]
 800fa0a:	6128      	str	r0, [r5, #16]
			strcpy(p->grade,"7C");
 800fa0c:	687b      	ldr	r3, [r7, #4]
 800fa0e:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800fa12:	4a46      	ldr	r2, [pc, #280]	; (800fb2c <problem_fetch+0xe468>)
 800fa14:	8811      	ldrh	r1, [r2, #0]
 800fa16:	7892      	ldrb	r2, [r2, #2]
 800fa18:	8019      	strh	r1, [r3, #0]
 800fa1a:	709a      	strb	r2, [r3, #2]
			p->moveSize = 5;
 800fa1c:	687b      	ldr	r3, [r7, #4]
 800fa1e:	2205      	movs	r2, #5
 800fa20:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,J,F,G,D");
 800fa22:	687b      	ldr	r3, [r7, #4]
 800fa24:	33a4      	adds	r3, #164	; 0xa4
 800fa26:	4942      	ldr	r1, [pc, #264]	; (800fb30 <problem_fetch+0xe46c>)
 800fa28:	461a      	mov	r2, r3
 800fa2a:	460b      	mov	r3, r1
 800fa2c:	cb03      	ldmia	r3!, {r0, r1}
 800fa2e:	6010      	str	r0, [r2, #0]
 800fa30:	6051      	str	r1, [r2, #4]
 800fa32:	881b      	ldrh	r3, [r3, #0]
 800fa34:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"4,5,11,14,18");
 800fa36:	687b      	ldr	r3, [r7, #4]
 800fa38:	3304      	adds	r3, #4
 800fa3a:	4a3e      	ldr	r2, [pc, #248]	; (800fb34 <problem_fetch+0xe470>)
 800fa3c:	461c      	mov	r4, r3
 800fa3e:	4613      	mov	r3, r2
 800fa40:	cb07      	ldmia	r3!, {r0, r1, r2}
 800fa42:	6020      	str	r0, [r4, #0]
 800fa44:	6061      	str	r1, [r4, #4]
 800fa46:	60a2      	str	r2, [r4, #8]
 800fa48:	781b      	ldrb	r3, [r3, #0]
 800fa4a:	7323      	strb	r3, [r4, #12]
			strcpy(p->startFinish,"s,s,d,d,e");
 800fa4c:	687b      	ldr	r3, [r7, #4]
 800fa4e:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800fa52:	4939      	ldr	r1, [pc, #228]	; (800fb38 <problem_fetch+0xe474>)
 800fa54:	461a      	mov	r2, r3
 800fa56:	460b      	mov	r3, r1
 800fa58:	cb03      	ldmia	r3!, {r0, r1}
 800fa5a:	6010      	str	r0, [r2, #0]
 800fa5c:	6051      	str	r1, [r2, #4]
 800fa5e:	881b      	ldrh	r3, [r3, #0]
 800fa60:	8113      	strh	r3, [r2, #8]
			break;
 800fa62:	f00c bd5f 	b.w	801c524 <problem_fetch+0x1ae60>
		case 416 :
			strcpy(p->name,"LE DOIGHT");
 800fa66:	687b      	ldr	r3, [r7, #4]
 800fa68:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800fa6c:	4933      	ldr	r1, [pc, #204]	; (800fb3c <problem_fetch+0xe478>)
 800fa6e:	461a      	mov	r2, r3
 800fa70:	460b      	mov	r3, r1
 800fa72:	cb03      	ldmia	r3!, {r0, r1}
 800fa74:	6010      	str	r0, [r2, #0]
 800fa76:	6051      	str	r1, [r2, #4]
 800fa78:	881b      	ldrh	r3, [r3, #0]
 800fa7a:	8113      	strh	r3, [r2, #8]
			strcpy(p->grade,"7A");
 800fa7c:	687b      	ldr	r3, [r7, #4]
 800fa7e:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800fa82:	4a1c      	ldr	r2, [pc, #112]	; (800faf4 <problem_fetch+0xe430>)
 800fa84:	8811      	ldrh	r1, [r2, #0]
 800fa86:	7892      	ldrb	r2, [r2, #2]
 800fa88:	8019      	strh	r1, [r3, #0]
 800fa8a:	709a      	strb	r2, [r3, #2]
			p->moveSize = 8;
 800fa8c:	687b      	ldr	r3, [r7, #4]
 800fa8e:	2208      	movs	r2, #8
 800fa90:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"C,B,D,B,E,C,G,I");
 800fa92:	687b      	ldr	r3, [r7, #4]
 800fa94:	33a4      	adds	r3, #164	; 0xa4
 800fa96:	4a2a      	ldr	r2, [pc, #168]	; (800fb40 <problem_fetch+0xe47c>)
 800fa98:	461c      	mov	r4, r3
 800fa9a:	4615      	mov	r5, r2
 800fa9c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800fa9e:	6020      	str	r0, [r4, #0]
 800faa0:	6061      	str	r1, [r4, #4]
 800faa2:	60a2      	str	r2, [r4, #8]
 800faa4:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,6,7,10,12,16,17,18");
 800faa6:	687b      	ldr	r3, [r7, #4]
 800faa8:	3304      	adds	r3, #4
 800faaa:	4a26      	ldr	r2, [pc, #152]	; (800fb44 <problem_fetch+0xe480>)
 800faac:	461d      	mov	r5, r3
 800faae:	4614      	mov	r4, r2
 800fab0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800fab2:	6028      	str	r0, [r5, #0]
 800fab4:	6069      	str	r1, [r5, #4]
 800fab6:	60aa      	str	r2, [r5, #8]
 800fab8:	60eb      	str	r3, [r5, #12]
 800faba:	6820      	ldr	r0, [r4, #0]
 800fabc:	6128      	str	r0, [r5, #16]
 800fabe:	7923      	ldrb	r3, [r4, #4]
 800fac0:	752b      	strb	r3, [r5, #20]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,e");
 800fac2:	687b      	ldr	r3, [r7, #4]
 800fac4:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800fac8:	4a1f      	ldr	r2, [pc, #124]	; (800fb48 <problem_fetch+0xe484>)
 800faca:	461c      	mov	r4, r3
 800facc:	4615      	mov	r5, r2
 800face:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800fad0:	6020      	str	r0, [r4, #0]
 800fad2:	6061      	str	r1, [r4, #4]
 800fad4:	60a2      	str	r2, [r4, #8]
 800fad6:	60e3      	str	r3, [r4, #12]
			break;
 800fad8:	f00c bd24 	b.w	801c524 <problem_fetch+0x1ae60>
 800fadc:	080287dc 	.word	0x080287dc
 800fae0:	08023854 	.word	0x08023854
 800fae4:	080287e4 	.word	0x080287e4
 800fae8:	080287f4 	.word	0x080287f4
 800faec:	080238cc 	.word	0x080238cc
 800faf0:	08028808 	.word	0x08028808
 800faf4:	08023814 	.word	0x08023814
 800faf8:	08028814 	.word	0x08028814
 800fafc:	08028824 	.word	0x08028824
 800fb00:	080239dc 	.word	0x080239dc
 800fb04:	08028838 	.word	0x08028838
 800fb08:	08023920 	.word	0x08023920
 800fb0c:	08028848 	.word	0x08028848
 800fb10:	08028858 	.word	0x08028858
 800fb14:	08023a64 	.word	0x08023a64
 800fb18:	0802886c 	.word	0x0802886c
 800fb1c:	08028880 	.word	0x08028880
 800fb20:	08028894 	.word	0x08028894
 800fb24:	08024838 	.word	0x08024838
 800fb28:	080288ac 	.word	0x080288ac
 800fb2c:	08024088 	.word	0x08024088
 800fb30:	080288c0 	.word	0x080288c0
 800fb34:	080288cc 	.word	0x080288cc
 800fb38:	08023f34 	.word	0x08023f34
 800fb3c:	080288dc 	.word	0x080288dc
 800fb40:	080288e8 	.word	0x080288e8
 800fb44:	080288f8 	.word	0x080288f8
 800fb48:	08023978 	.word	0x08023978
		case 417 :
			strcpy(p->name,"LAPINERIE");
 800fb4c:	687b      	ldr	r3, [r7, #4]
 800fb4e:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800fb52:	49a9      	ldr	r1, [pc, #676]	; (800fdf8 <problem_fetch+0xe734>)
 800fb54:	461a      	mov	r2, r3
 800fb56:	460b      	mov	r3, r1
 800fb58:	cb03      	ldmia	r3!, {r0, r1}
 800fb5a:	6010      	str	r0, [r2, #0]
 800fb5c:	6051      	str	r1, [r2, #4]
 800fb5e:	881b      	ldrh	r3, [r3, #0]
 800fb60:	8113      	strh	r3, [r2, #8]
			strcpy(p->grade,"7B+");
 800fb62:	687b      	ldr	r3, [r7, #4]
 800fb64:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800fb68:	4aa4      	ldr	r2, [pc, #656]	; (800fdfc <problem_fetch+0xe738>)
 800fb6a:	6810      	ldr	r0, [r2, #0]
 800fb6c:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 800fb6e:	687b      	ldr	r3, [r7, #4]
 800fb70:	2206      	movs	r2, #6
 800fb72:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"C,E,B,E,E,I");
 800fb74:	687b      	ldr	r3, [r7, #4]
 800fb76:	33a4      	adds	r3, #164	; 0xa4
 800fb78:	4aa1      	ldr	r2, [pc, #644]	; (800fe00 <problem_fetch+0xe73c>)
 800fb7a:	461c      	mov	r4, r3
 800fb7c:	4613      	mov	r3, r2
 800fb7e:	cb07      	ldmia	r3!, {r0, r1, r2}
 800fb80:	6020      	str	r0, [r4, #0]
 800fb82:	6061      	str	r1, [r4, #4]
 800fb84:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,9,12,14,16,18");
 800fb86:	687b      	ldr	r3, [r7, #4]
 800fb88:	3304      	adds	r3, #4
 800fb8a:	4a9e      	ldr	r2, [pc, #632]	; (800fe04 <problem_fetch+0xe740>)
 800fb8c:	461c      	mov	r4, r3
 800fb8e:	4615      	mov	r5, r2
 800fb90:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800fb92:	6020      	str	r0, [r4, #0]
 800fb94:	6061      	str	r1, [r4, #4]
 800fb96:	60a2      	str	r2, [r4, #8]
 800fb98:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 800fb9a:	687b      	ldr	r3, [r7, #4]
 800fb9c:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800fba0:	4a99      	ldr	r2, [pc, #612]	; (800fe08 <problem_fetch+0xe744>)
 800fba2:	461c      	mov	r4, r3
 800fba4:	4613      	mov	r3, r2
 800fba6:	cb07      	ldmia	r3!, {r0, r1, r2}
 800fba8:	6020      	str	r0, [r4, #0]
 800fbaa:	6061      	str	r1, [r4, #4]
 800fbac:	60a2      	str	r2, [r4, #8]
			break;
 800fbae:	f00c bcb9 	b.w	801c524 <problem_fetch+0x1ae60>
		case 418 :
			strcpy(p->name,"IL DOMANI");
 800fbb2:	687b      	ldr	r3, [r7, #4]
 800fbb4:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800fbb8:	4994      	ldr	r1, [pc, #592]	; (800fe0c <problem_fetch+0xe748>)
 800fbba:	461a      	mov	r2, r3
 800fbbc:	460b      	mov	r3, r1
 800fbbe:	cb03      	ldmia	r3!, {r0, r1}
 800fbc0:	6010      	str	r0, [r2, #0]
 800fbc2:	6051      	str	r1, [r2, #4]
 800fbc4:	881b      	ldrh	r3, [r3, #0]
 800fbc6:	8113      	strh	r3, [r2, #8]
			strcpy(p->grade,"7C");
 800fbc8:	687b      	ldr	r3, [r7, #4]
 800fbca:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800fbce:	4a90      	ldr	r2, [pc, #576]	; (800fe10 <problem_fetch+0xe74c>)
 800fbd0:	8811      	ldrh	r1, [r2, #0]
 800fbd2:	7892      	ldrb	r2, [r2, #2]
 800fbd4:	8019      	strh	r1, [r3, #0]
 800fbd6:	709a      	strb	r2, [r3, #2]
			p->moveSize = 5;
 800fbd8:	687b      	ldr	r3, [r7, #4]
 800fbda:	2205      	movs	r2, #5
 800fbdc:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"H,E,H,E,I");
 800fbde:	687b      	ldr	r3, [r7, #4]
 800fbe0:	33a4      	adds	r3, #164	; 0xa4
 800fbe2:	498c      	ldr	r1, [pc, #560]	; (800fe14 <problem_fetch+0xe750>)
 800fbe4:	461a      	mov	r2, r3
 800fbe6:	460b      	mov	r3, r1
 800fbe8:	cb03      	ldmia	r3!, {r0, r1}
 800fbea:	6010      	str	r0, [r2, #0]
 800fbec:	6051      	str	r1, [r2, #4]
 800fbee:	881b      	ldrh	r3, [r3, #0]
 800fbf0:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"5,9,12,14,18");
 800fbf2:	687b      	ldr	r3, [r7, #4]
 800fbf4:	3304      	adds	r3, #4
 800fbf6:	4a88      	ldr	r2, [pc, #544]	; (800fe18 <problem_fetch+0xe754>)
 800fbf8:	461c      	mov	r4, r3
 800fbfa:	4613      	mov	r3, r2
 800fbfc:	cb07      	ldmia	r3!, {r0, r1, r2}
 800fbfe:	6020      	str	r0, [r4, #0]
 800fc00:	6061      	str	r1, [r4, #4]
 800fc02:	60a2      	str	r2, [r4, #8]
 800fc04:	781b      	ldrb	r3, [r3, #0]
 800fc06:	7323      	strb	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,e");
 800fc08:	687b      	ldr	r3, [r7, #4]
 800fc0a:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800fc0e:	4983      	ldr	r1, [pc, #524]	; (800fe1c <problem_fetch+0xe758>)
 800fc10:	461a      	mov	r2, r3
 800fc12:	460b      	mov	r3, r1
 800fc14:	cb03      	ldmia	r3!, {r0, r1}
 800fc16:	6010      	str	r0, [r2, #0]
 800fc18:	6051      	str	r1, [r2, #4]
 800fc1a:	881b      	ldrh	r3, [r3, #0]
 800fc1c:	8113      	strh	r3, [r2, #8]
			break;
 800fc1e:	f00c bc81 	b.w	801c524 <problem_fetch+0x1ae60>
		case 419 :
			strcpy(p->name,"BLACK BEAN");
 800fc22:	687b      	ldr	r3, [r7, #4]
 800fc24:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800fc28:	497d      	ldr	r1, [pc, #500]	; (800fe20 <problem_fetch+0xe75c>)
 800fc2a:	461a      	mov	r2, r3
 800fc2c:	460b      	mov	r3, r1
 800fc2e:	cb03      	ldmia	r3!, {r0, r1}
 800fc30:	6010      	str	r0, [r2, #0]
 800fc32:	6051      	str	r1, [r2, #4]
 800fc34:	8819      	ldrh	r1, [r3, #0]
 800fc36:	789b      	ldrb	r3, [r3, #2]
 800fc38:	8111      	strh	r1, [r2, #8]
 800fc3a:	7293      	strb	r3, [r2, #10]
			strcpy(p->grade,"7A+");
 800fc3c:	687b      	ldr	r3, [r7, #4]
 800fc3e:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800fc42:	4a78      	ldr	r2, [pc, #480]	; (800fe24 <problem_fetch+0xe760>)
 800fc44:	6810      	ldr	r0, [r2, #0]
 800fc46:	6018      	str	r0, [r3, #0]
			p->moveSize = 8;
 800fc48:	687b      	ldr	r3, [r7, #4]
 800fc4a:	2208      	movs	r2, #8
 800fc4c:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"C,E,H,K,E,I,J,I");
 800fc4e:	687b      	ldr	r3, [r7, #4]
 800fc50:	33a4      	adds	r3, #164	; 0xa4
 800fc52:	4a75      	ldr	r2, [pc, #468]	; (800fe28 <problem_fetch+0xe764>)
 800fc54:	461c      	mov	r4, r3
 800fc56:	4615      	mov	r5, r2
 800fc58:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800fc5a:	6020      	str	r0, [r4, #0]
 800fc5c:	6061      	str	r1, [r4, #4]
 800fc5e:	60a2      	str	r2, [r4, #8]
 800fc60:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,6,12,14,9,9,5,18");
 800fc62:	687b      	ldr	r3, [r7, #4]
 800fc64:	3304      	adds	r3, #4
 800fc66:	4a71      	ldr	r2, [pc, #452]	; (800fe2c <problem_fetch+0xe768>)
 800fc68:	461d      	mov	r5, r3
 800fc6a:	4614      	mov	r4, r2
 800fc6c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800fc6e:	6028      	str	r0, [r5, #0]
 800fc70:	6069      	str	r1, [r5, #4]
 800fc72:	60aa      	str	r2, [r5, #8]
 800fc74:	60eb      	str	r3, [r5, #12]
 800fc76:	8823      	ldrh	r3, [r4, #0]
 800fc78:	78a2      	ldrb	r2, [r4, #2]
 800fc7a:	822b      	strh	r3, [r5, #16]
 800fc7c:	4613      	mov	r3, r2
 800fc7e:	74ab      	strb	r3, [r5, #18]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,e");
 800fc80:	687b      	ldr	r3, [r7, #4]
 800fc82:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800fc86:	4a6a      	ldr	r2, [pc, #424]	; (800fe30 <problem_fetch+0xe76c>)
 800fc88:	461c      	mov	r4, r3
 800fc8a:	4615      	mov	r5, r2
 800fc8c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800fc8e:	6020      	str	r0, [r4, #0]
 800fc90:	6061      	str	r1, [r4, #4]
 800fc92:	60a2      	str	r2, [r4, #8]
 800fc94:	60e3      	str	r3, [r4, #12]
			break;
 800fc96:	f00c bc45 	b.w	801c524 <problem_fetch+0x1ae60>
		case 420 :
			strcpy(p->name,"CLASSY");
 800fc9a:	687b      	ldr	r3, [r7, #4]
 800fc9c:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800fca0:	4a64      	ldr	r2, [pc, #400]	; (800fe34 <problem_fetch+0xe770>)
 800fca2:	6810      	ldr	r0, [r2, #0]
 800fca4:	6018      	str	r0, [r3, #0]
 800fca6:	8891      	ldrh	r1, [r2, #4]
 800fca8:	7992      	ldrb	r2, [r2, #6]
 800fcaa:	8099      	strh	r1, [r3, #4]
 800fcac:	719a      	strb	r2, [r3, #6]
			strcpy(p->grade,"6B+");
 800fcae:	687b      	ldr	r3, [r7, #4]
 800fcb0:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800fcb4:	4a60      	ldr	r2, [pc, #384]	; (800fe38 <problem_fetch+0xe774>)
 800fcb6:	6810      	ldr	r0, [r2, #0]
 800fcb8:	6018      	str	r0, [r3, #0]
			p->moveSize = 5;
 800fcba:	687b      	ldr	r3, [r7, #4]
 800fcbc:	2205      	movs	r2, #5
 800fcbe:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,E,F,C,D");
 800fcc0:	687b      	ldr	r3, [r7, #4]
 800fcc2:	33a4      	adds	r3, #164	; 0xa4
 800fcc4:	495d      	ldr	r1, [pc, #372]	; (800fe3c <problem_fetch+0xe778>)
 800fcc6:	461a      	mov	r2, r3
 800fcc8:	460b      	mov	r3, r1
 800fcca:	cb03      	ldmia	r3!, {r0, r1}
 800fccc:	6010      	str	r0, [r2, #0]
 800fcce:	6051      	str	r1, [r2, #4]
 800fcd0:	881b      	ldrh	r3, [r3, #0]
 800fcd2:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"4,8,11,13,18");
 800fcd4:	687b      	ldr	r3, [r7, #4]
 800fcd6:	3304      	adds	r3, #4
 800fcd8:	4a59      	ldr	r2, [pc, #356]	; (800fe40 <problem_fetch+0xe77c>)
 800fcda:	461c      	mov	r4, r3
 800fcdc:	4613      	mov	r3, r2
 800fcde:	cb07      	ldmia	r3!, {r0, r1, r2}
 800fce0:	6020      	str	r0, [r4, #0]
 800fce2:	6061      	str	r1, [r4, #4]
 800fce4:	60a2      	str	r2, [r4, #8]
 800fce6:	781b      	ldrb	r3, [r3, #0]
 800fce8:	7323      	strb	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,e");
 800fcea:	687b      	ldr	r3, [r7, #4]
 800fcec:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800fcf0:	494a      	ldr	r1, [pc, #296]	; (800fe1c <problem_fetch+0xe758>)
 800fcf2:	461a      	mov	r2, r3
 800fcf4:	460b      	mov	r3, r1
 800fcf6:	cb03      	ldmia	r3!, {r0, r1}
 800fcf8:	6010      	str	r0, [r2, #0]
 800fcfa:	6051      	str	r1, [r2, #4]
 800fcfc:	881b      	ldrh	r3, [r3, #0]
 800fcfe:	8113      	strh	r3, [r2, #8]
			break;
 800fd00:	f00c bc10 	b.w	801c524 <problem_fetch+0x1ae60>
		case 421 :
			strcpy(p->name,"THE 45 SECRETS");
 800fd04:	687b      	ldr	r3, [r7, #4]
 800fd06:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800fd0a:	4a4e      	ldr	r2, [pc, #312]	; (800fe44 <problem_fetch+0xe780>)
 800fd0c:	461c      	mov	r4, r3
 800fd0e:	4613      	mov	r3, r2
 800fd10:	cb07      	ldmia	r3!, {r0, r1, r2}
 800fd12:	6020      	str	r0, [r4, #0]
 800fd14:	6061      	str	r1, [r4, #4]
 800fd16:	60a2      	str	r2, [r4, #8]
 800fd18:	881a      	ldrh	r2, [r3, #0]
 800fd1a:	789b      	ldrb	r3, [r3, #2]
 800fd1c:	81a2      	strh	r2, [r4, #12]
 800fd1e:	73a3      	strb	r3, [r4, #14]
			strcpy(p->grade,"6B+");
 800fd20:	687b      	ldr	r3, [r7, #4]
 800fd22:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800fd26:	4a44      	ldr	r2, [pc, #272]	; (800fe38 <problem_fetch+0xe774>)
 800fd28:	6810      	ldr	r0, [r2, #0]
 800fd2a:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 800fd2c:	687b      	ldr	r3, [r7, #4]
 800fd2e:	2207      	movs	r2, #7
 800fd30:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,H,E,J,E,A,A");
 800fd32:	687b      	ldr	r3, [r7, #4]
 800fd34:	33a4      	adds	r3, #164	; 0xa4
 800fd36:	4a44      	ldr	r2, [pc, #272]	; (800fe48 <problem_fetch+0xe784>)
 800fd38:	461c      	mov	r4, r3
 800fd3a:	4613      	mov	r3, r2
 800fd3c:	cb07      	ldmia	r3!, {r0, r1, r2}
 800fd3e:	6020      	str	r0, [r4, #0]
 800fd40:	6061      	str	r1, [r4, #4]
 800fd42:	60a2      	str	r2, [r4, #8]
 800fd44:	881b      	ldrh	r3, [r3, #0]
 800fd46:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,8,8,7,12,14,18");
 800fd48:	687b      	ldr	r3, [r7, #4]
 800fd4a:	3304      	adds	r3, #4
 800fd4c:	4a3f      	ldr	r2, [pc, #252]	; (800fe4c <problem_fetch+0xe788>)
 800fd4e:	461d      	mov	r5, r3
 800fd50:	4614      	mov	r4, r2
 800fd52:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800fd54:	6028      	str	r0, [r5, #0]
 800fd56:	6069      	str	r1, [r5, #4]
 800fd58:	60aa      	str	r2, [r5, #8]
 800fd5a:	60eb      	str	r3, [r5, #12]
 800fd5c:	7823      	ldrb	r3, [r4, #0]
 800fd5e:	742b      	strb	r3, [r5, #16]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 800fd60:	687b      	ldr	r3, [r7, #4]
 800fd62:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800fd66:	4a3a      	ldr	r2, [pc, #232]	; (800fe50 <problem_fetch+0xe78c>)
 800fd68:	461c      	mov	r4, r3
 800fd6a:	4613      	mov	r3, r2
 800fd6c:	cb07      	ldmia	r3!, {r0, r1, r2}
 800fd6e:	6020      	str	r0, [r4, #0]
 800fd70:	6061      	str	r1, [r4, #4]
 800fd72:	60a2      	str	r2, [r4, #8]
 800fd74:	881b      	ldrh	r3, [r3, #0]
 800fd76:	81a3      	strh	r3, [r4, #12]
			break;
 800fd78:	f00c bbd4 	b.w	801c524 <problem_fetch+0x1ae60>
		case 422 :
			strcpy(p->name,"YOUR LAST PIECE OF CHALK");
 800fd7c:	687b      	ldr	r3, [r7, #4]
 800fd7e:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800fd82:	4a34      	ldr	r2, [pc, #208]	; (800fe54 <problem_fetch+0xe790>)
 800fd84:	461d      	mov	r5, r3
 800fd86:	4614      	mov	r4, r2
 800fd88:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800fd8a:	6028      	str	r0, [r5, #0]
 800fd8c:	6069      	str	r1, [r5, #4]
 800fd8e:	60aa      	str	r2, [r5, #8]
 800fd90:	60eb      	str	r3, [r5, #12]
 800fd92:	cc03      	ldmia	r4!, {r0, r1}
 800fd94:	6128      	str	r0, [r5, #16]
 800fd96:	6169      	str	r1, [r5, #20]
 800fd98:	7823      	ldrb	r3, [r4, #0]
 800fd9a:	762b      	strb	r3, [r5, #24]
			strcpy(p->grade,"6B+");
 800fd9c:	687b      	ldr	r3, [r7, #4]
 800fd9e:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800fda2:	4a25      	ldr	r2, [pc, #148]	; (800fe38 <problem_fetch+0xe774>)
 800fda4:	6810      	ldr	r0, [r2, #0]
 800fda6:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 800fda8:	687b      	ldr	r3, [r7, #4]
 800fdaa:	2207      	movs	r2, #7
 800fdac:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,E,E,K,I,F,I");
 800fdae:	687b      	ldr	r3, [r7, #4]
 800fdb0:	33a4      	adds	r3, #164	; 0xa4
 800fdb2:	4a29      	ldr	r2, [pc, #164]	; (800fe58 <problem_fetch+0xe794>)
 800fdb4:	461c      	mov	r4, r3
 800fdb6:	4613      	mov	r3, r2
 800fdb8:	cb07      	ldmia	r3!, {r0, r1, r2}
 800fdba:	6020      	str	r0, [r4, #0]
 800fdbc:	6061      	str	r1, [r4, #4]
 800fdbe:	60a2      	str	r2, [r4, #8]
 800fdc0:	881b      	ldrh	r3, [r3, #0]
 800fdc2:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,8,12,9,14,11,18");
 800fdc4:	687b      	ldr	r3, [r7, #4]
 800fdc6:	3304      	adds	r3, #4
 800fdc8:	4a24      	ldr	r2, [pc, #144]	; (800fe5c <problem_fetch+0xe798>)
 800fdca:	461d      	mov	r5, r3
 800fdcc:	4614      	mov	r4, r2
 800fdce:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800fdd0:	6028      	str	r0, [r5, #0]
 800fdd2:	6069      	str	r1, [r5, #4]
 800fdd4:	60aa      	str	r2, [r5, #8]
 800fdd6:	60eb      	str	r3, [r5, #12]
 800fdd8:	8823      	ldrh	r3, [r4, #0]
 800fdda:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 800fddc:	687b      	ldr	r3, [r7, #4]
 800fdde:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800fde2:	4a1b      	ldr	r2, [pc, #108]	; (800fe50 <problem_fetch+0xe78c>)
 800fde4:	461c      	mov	r4, r3
 800fde6:	4613      	mov	r3, r2
 800fde8:	cb07      	ldmia	r3!, {r0, r1, r2}
 800fdea:	6020      	str	r0, [r4, #0]
 800fdec:	6061      	str	r1, [r4, #4]
 800fdee:	60a2      	str	r2, [r4, #8]
 800fdf0:	881b      	ldrh	r3, [r3, #0]
 800fdf2:	81a3      	strh	r3, [r4, #12]
			break;
 800fdf4:	f00c bb96 	b.w	801c524 <problem_fetch+0x1ae60>
 800fdf8:	08028910 	.word	0x08028910
 800fdfc:	08023990 	.word	0x08023990
 800fe00:	0802891c 	.word	0x0802891c
 800fe04:	08028928 	.word	0x08028928
 800fe08:	08023bf0 	.word	0x08023bf0
 800fe0c:	08028938 	.word	0x08028938
 800fe10:	08024088 	.word	0x08024088
 800fe14:	08028944 	.word	0x08028944
 800fe18:	08023e70 	.word	0x08023e70
 800fe1c:	08023d20 	.word	0x08023d20
 800fe20:	08028950 	.word	0x08028950
 800fe24:	080239f4 	.word	0x080239f4
 800fe28:	0802855c 	.word	0x0802855c
 800fe2c:	0802895c 	.word	0x0802895c
 800fe30:	08023978 	.word	0x08023978
 800fe34:	08028970 	.word	0x08028970
 800fe38:	08023854 	.word	0x08023854
 800fe3c:	08028978 	.word	0x08028978
 800fe40:	08028984 	.word	0x08028984
 800fe44:	08028994 	.word	0x08028994
 800fe48:	080289a4 	.word	0x080289a4
 800fe4c:	080289b4 	.word	0x080289b4
 800fe50:	080239dc 	.word	0x080239dc
 800fe54:	080289c8 	.word	0x080289c8
 800fe58:	080289e4 	.word	0x080289e4
 800fe5c:	080289f4 	.word	0x080289f4
		case 423 :
			strcpy(p->name,"CASSIN");
 800fe60:	687b      	ldr	r3, [r7, #4]
 800fe62:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800fe66:	4ac0      	ldr	r2, [pc, #768]	; (8010168 <problem_fetch+0xeaa4>)
 800fe68:	6810      	ldr	r0, [r2, #0]
 800fe6a:	6018      	str	r0, [r3, #0]
 800fe6c:	8891      	ldrh	r1, [r2, #4]
 800fe6e:	7992      	ldrb	r2, [r2, #6]
 800fe70:	8099      	strh	r1, [r3, #4]
 800fe72:	719a      	strb	r2, [r3, #6]
			strcpy(p->grade,"7A+");
 800fe74:	687b      	ldr	r3, [r7, #4]
 800fe76:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800fe7a:	4abc      	ldr	r2, [pc, #752]	; (801016c <problem_fetch+0xeaa8>)
 800fe7c:	6810      	ldr	r0, [r2, #0]
 800fe7e:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 800fe80:	687b      	ldr	r3, [r7, #4]
 800fe82:	2206      	movs	r2, #6
 800fe84:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"B,C,E,B,E,A");
 800fe86:	687b      	ldr	r3, [r7, #4]
 800fe88:	33a4      	adds	r3, #164	; 0xa4
 800fe8a:	4ab9      	ldr	r2, [pc, #740]	; (8010170 <problem_fetch+0xeaac>)
 800fe8c:	461c      	mov	r4, r3
 800fe8e:	4613      	mov	r3, r2
 800fe90:	cb07      	ldmia	r3!, {r0, r1, r2}
 800fe92:	6020      	str	r0, [r4, #0]
 800fe94:	6061      	str	r1, [r4, #4]
 800fe96:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"6,5,9,12,14,18");
 800fe98:	687b      	ldr	r3, [r7, #4]
 800fe9a:	3304      	adds	r3, #4
 800fe9c:	4ab5      	ldr	r2, [pc, #724]	; (8010174 <problem_fetch+0xeab0>)
 800fe9e:	461c      	mov	r4, r3
 800fea0:	4613      	mov	r3, r2
 800fea2:	cb07      	ldmia	r3!, {r0, r1, r2}
 800fea4:	6020      	str	r0, [r4, #0]
 800fea6:	6061      	str	r1, [r4, #4]
 800fea8:	60a2      	str	r2, [r4, #8]
 800feaa:	881a      	ldrh	r2, [r3, #0]
 800feac:	789b      	ldrb	r3, [r3, #2]
 800feae:	81a2      	strh	r2, [r4, #12]
 800feb0:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish,"s,s,d,d,d,e");
 800feb2:	687b      	ldr	r3, [r7, #4]
 800feb4:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800feb8:	4aaf      	ldr	r2, [pc, #700]	; (8010178 <problem_fetch+0xeab4>)
 800feba:	461c      	mov	r4, r3
 800febc:	4613      	mov	r3, r2
 800febe:	cb07      	ldmia	r3!, {r0, r1, r2}
 800fec0:	6020      	str	r0, [r4, #0]
 800fec2:	6061      	str	r1, [r4, #4]
 800fec4:	60a2      	str	r2, [r4, #8]
			break;
 800fec6:	f00c bb2d 	b.w	801c524 <problem_fetch+0x1ae60>
		case 424 :
			strcpy(p->name,"HOTEL SOPRAMONTE");
 800feca:	687b      	ldr	r3, [r7, #4]
 800fecc:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800fed0:	4aaa      	ldr	r2, [pc, #680]	; (801017c <problem_fetch+0xeab8>)
 800fed2:	461d      	mov	r5, r3
 800fed4:	4614      	mov	r4, r2
 800fed6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800fed8:	6028      	str	r0, [r5, #0]
 800feda:	6069      	str	r1, [r5, #4]
 800fedc:	60aa      	str	r2, [r5, #8]
 800fede:	60eb      	str	r3, [r5, #12]
 800fee0:	7823      	ldrb	r3, [r4, #0]
 800fee2:	742b      	strb	r3, [r5, #16]
			strcpy(p->grade,"7B");
 800fee4:	687b      	ldr	r3, [r7, #4]
 800fee6:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800feea:	4aa5      	ldr	r2, [pc, #660]	; (8010180 <problem_fetch+0xeabc>)
 800feec:	8811      	ldrh	r1, [r2, #0]
 800feee:	7892      	ldrb	r2, [r2, #2]
 800fef0:	8019      	strh	r1, [r3, #0]
 800fef2:	709a      	strb	r2, [r3, #2]
			p->moveSize = 5;
 800fef4:	687b      	ldr	r3, [r7, #4]
 800fef6:	2205      	movs	r2, #5
 800fef8:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,C,G,G,I");
 800fefa:	687b      	ldr	r3, [r7, #4]
 800fefc:	33a4      	adds	r3, #164	; 0xa4
 800fefe:	49a1      	ldr	r1, [pc, #644]	; (8010184 <problem_fetch+0xeac0>)
 800ff00:	461a      	mov	r2, r3
 800ff02:	460b      	mov	r3, r1
 800ff04:	cb03      	ldmia	r3!, {r0, r1}
 800ff06:	6010      	str	r0, [r2, #0]
 800ff08:	6051      	str	r1, [r2, #4]
 800ff0a:	881b      	ldrh	r3, [r3, #0]
 800ff0c:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"4,8,10,15,18");
 800ff0e:	687b      	ldr	r3, [r7, #4]
 800ff10:	3304      	adds	r3, #4
 800ff12:	4a9d      	ldr	r2, [pc, #628]	; (8010188 <problem_fetch+0xeac4>)
 800ff14:	461c      	mov	r4, r3
 800ff16:	4613      	mov	r3, r2
 800ff18:	cb07      	ldmia	r3!, {r0, r1, r2}
 800ff1a:	6020      	str	r0, [r4, #0]
 800ff1c:	6061      	str	r1, [r4, #4]
 800ff1e:	60a2      	str	r2, [r4, #8]
 800ff20:	781b      	ldrb	r3, [r3, #0]
 800ff22:	7323      	strb	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,e");
 800ff24:	687b      	ldr	r3, [r7, #4]
 800ff26:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800ff2a:	4998      	ldr	r1, [pc, #608]	; (801018c <problem_fetch+0xeac8>)
 800ff2c:	461a      	mov	r2, r3
 800ff2e:	460b      	mov	r3, r1
 800ff30:	cb03      	ldmia	r3!, {r0, r1}
 800ff32:	6010      	str	r0, [r2, #0]
 800ff34:	6051      	str	r1, [r2, #4]
 800ff36:	881b      	ldrh	r3, [r3, #0]
 800ff38:	8113      	strh	r3, [r2, #8]
			break;
 800ff3a:	f00c baf3 	b.w	801c524 <problem_fetch+0x1ae60>
		case 425 :
			strcpy(p->name,"THE GOLDEN GATE");
 800ff3e:	687b      	ldr	r3, [r7, #4]
 800ff40:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800ff44:	4a92      	ldr	r2, [pc, #584]	; (8010190 <problem_fetch+0xeacc>)
 800ff46:	461c      	mov	r4, r3
 800ff48:	4615      	mov	r5, r2
 800ff4a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ff4c:	6020      	str	r0, [r4, #0]
 800ff4e:	6061      	str	r1, [r4, #4]
 800ff50:	60a2      	str	r2, [r4, #8]
 800ff52:	60e3      	str	r3, [r4, #12]
			strcpy(p->grade,"6B+");
 800ff54:	687b      	ldr	r3, [r7, #4]
 800ff56:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800ff5a:	4a8e      	ldr	r2, [pc, #568]	; (8010194 <problem_fetch+0xead0>)
 800ff5c:	6810      	ldr	r0, [r2, #0]
 800ff5e:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 800ff60:	687b      	ldr	r3, [r7, #4]
 800ff62:	2206      	movs	r2, #6
 800ff64:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,H,C,E,B,D");
 800ff66:	687b      	ldr	r3, [r7, #4]
 800ff68:	33a4      	adds	r3, #164	; 0xa4
 800ff6a:	4a8b      	ldr	r2, [pc, #556]	; (8010198 <problem_fetch+0xead4>)
 800ff6c:	461c      	mov	r4, r3
 800ff6e:	4613      	mov	r3, r2
 800ff70:	cb07      	ldmia	r3!, {r0, r1, r2}
 800ff72:	6020      	str	r0, [r4, #0]
 800ff74:	6061      	str	r1, [r4, #4]
 800ff76:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,8,8,12,15,18");
 800ff78:	687b      	ldr	r3, [r7, #4]
 800ff7a:	3304      	adds	r3, #4
 800ff7c:	4a87      	ldr	r2, [pc, #540]	; (801019c <problem_fetch+0xead8>)
 800ff7e:	461c      	mov	r4, r3
 800ff80:	4613      	mov	r3, r2
 800ff82:	cb07      	ldmia	r3!, {r0, r1, r2}
 800ff84:	6020      	str	r0, [r4, #0]
 800ff86:	6061      	str	r1, [r4, #4]
 800ff88:	60a2      	str	r2, [r4, #8]
 800ff8a:	881a      	ldrh	r2, [r3, #0]
 800ff8c:	789b      	ldrb	r3, [r3, #2]
 800ff8e:	81a2      	strh	r2, [r4, #12]
 800ff90:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 800ff92:	687b      	ldr	r3, [r7, #4]
 800ff94:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 800ff98:	4a81      	ldr	r2, [pc, #516]	; (80101a0 <problem_fetch+0xeadc>)
 800ff9a:	461c      	mov	r4, r3
 800ff9c:	4613      	mov	r3, r2
 800ff9e:	cb07      	ldmia	r3!, {r0, r1, r2}
 800ffa0:	6020      	str	r0, [r4, #0]
 800ffa2:	6061      	str	r1, [r4, #4]
 800ffa4:	60a2      	str	r2, [r4, #8]
			break;
 800ffa6:	f00c babd 	b.w	801c524 <problem_fetch+0x1ae60>
		case 426 :
			strcpy(p->name,"VASIL VASIL");
 800ffaa:	687b      	ldr	r3, [r7, #4]
 800ffac:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800ffb0:	4a7c      	ldr	r2, [pc, #496]	; (80101a4 <problem_fetch+0xeae0>)
 800ffb2:	461c      	mov	r4, r3
 800ffb4:	4613      	mov	r3, r2
 800ffb6:	cb07      	ldmia	r3!, {r0, r1, r2}
 800ffb8:	6020      	str	r0, [r4, #0]
 800ffba:	6061      	str	r1, [r4, #4]
 800ffbc:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade,"7B");
 800ffbe:	687b      	ldr	r3, [r7, #4]
 800ffc0:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800ffc4:	4a6e      	ldr	r2, [pc, #440]	; (8010180 <problem_fetch+0xeabc>)
 800ffc6:	8811      	ldrh	r1, [r2, #0]
 800ffc8:	7892      	ldrb	r2, [r2, #2]
 800ffca:	8019      	strh	r1, [r3, #0]
 800ffcc:	709a      	strb	r2, [r3, #2]
			p->moveSize = 6;
 800ffce:	687b      	ldr	r3, [r7, #4]
 800ffd0:	2206      	movs	r2, #6
 800ffd2:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,J,E,J,H,I");
 800ffd4:	687b      	ldr	r3, [r7, #4]
 800ffd6:	33a4      	adds	r3, #164	; 0xa4
 800ffd8:	4a73      	ldr	r2, [pc, #460]	; (80101a8 <problem_fetch+0xeae4>)
 800ffda:	461c      	mov	r4, r3
 800ffdc:	4613      	mov	r3, r2
 800ffde:	cb07      	ldmia	r3!, {r0, r1, r2}
 800ffe0:	6020      	str	r0, [r4, #0]
 800ffe2:	6061      	str	r1, [r4, #4]
 800ffe4:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,7,9,12,16,18");
 800ffe6:	687b      	ldr	r3, [r7, #4]
 800ffe8:	3304      	adds	r3, #4
 800ffea:	4a70      	ldr	r2, [pc, #448]	; (80101ac <problem_fetch+0xeae8>)
 800ffec:	461c      	mov	r4, r3
 800ffee:	4613      	mov	r3, r2
 800fff0:	cb07      	ldmia	r3!, {r0, r1, r2}
 800fff2:	6020      	str	r0, [r4, #0]
 800fff4:	6061      	str	r1, [r4, #4]
 800fff6:	60a2      	str	r2, [r4, #8]
 800fff8:	881a      	ldrh	r2, [r3, #0]
 800fffa:	789b      	ldrb	r3, [r3, #2]
 800fffc:	81a2      	strh	r2, [r4, #12]
 800fffe:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 8010000:	687b      	ldr	r3, [r7, #4]
 8010002:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8010006:	4a66      	ldr	r2, [pc, #408]	; (80101a0 <problem_fetch+0xeadc>)
 8010008:	461c      	mov	r4, r3
 801000a:	4613      	mov	r3, r2
 801000c:	cb07      	ldmia	r3!, {r0, r1, r2}
 801000e:	6020      	str	r0, [r4, #0]
 8010010:	6061      	str	r1, [r4, #4]
 8010012:	60a2      	str	r2, [r4, #8]
			break;
 8010014:	f00c ba86 	b.w	801c524 <problem_fetch+0x1ae60>
		case 427 :
			strcpy(p->name,"WITNESS THE FITNESS");
 8010018:	687b      	ldr	r3, [r7, #4]
 801001a:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801001e:	4a64      	ldr	r2, [pc, #400]	; (80101b0 <problem_fetch+0xeaec>)
 8010020:	461d      	mov	r5, r3
 8010022:	4614      	mov	r4, r2
 8010024:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8010026:	6028      	str	r0, [r5, #0]
 8010028:	6069      	str	r1, [r5, #4]
 801002a:	60aa      	str	r2, [r5, #8]
 801002c:	60eb      	str	r3, [r5, #12]
 801002e:	6820      	ldr	r0, [r4, #0]
 8010030:	6128      	str	r0, [r5, #16]
			strcpy(p->grade,"6B+");
 8010032:	687b      	ldr	r3, [r7, #4]
 8010034:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8010038:	4a56      	ldr	r2, [pc, #344]	; (8010194 <problem_fetch+0xead0>)
 801003a:	6810      	ldr	r0, [r2, #0]
 801003c:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 801003e:	687b      	ldr	r3, [r7, #4]
 8010040:	2207      	movs	r2, #7
 8010042:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,D,B,E,B,E,D");
 8010044:	687b      	ldr	r3, [r7, #4]
 8010046:	33a4      	adds	r3, #164	; 0xa4
 8010048:	4a5a      	ldr	r2, [pc, #360]	; (80101b4 <problem_fetch+0xeaf0>)
 801004a:	461c      	mov	r4, r3
 801004c:	4613      	mov	r3, r2
 801004e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8010050:	6020      	str	r0, [r4, #0]
 8010052:	6061      	str	r1, [r4, #4]
 8010054:	60a2      	str	r2, [r4, #8]
 8010056:	881b      	ldrh	r3, [r3, #0]
 8010058:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,7,10,12,15,6,18");
 801005a:	687b      	ldr	r3, [r7, #4]
 801005c:	3304      	adds	r3, #4
 801005e:	4a56      	ldr	r2, [pc, #344]	; (80101b8 <problem_fetch+0xeaf4>)
 8010060:	461d      	mov	r5, r3
 8010062:	4614      	mov	r4, r2
 8010064:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8010066:	6028      	str	r0, [r5, #0]
 8010068:	6069      	str	r1, [r5, #4]
 801006a:	60aa      	str	r2, [r5, #8]
 801006c:	60eb      	str	r3, [r5, #12]
 801006e:	8823      	ldrh	r3, [r4, #0]
 8010070:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 8010072:	687b      	ldr	r3, [r7, #4]
 8010074:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8010078:	4a50      	ldr	r2, [pc, #320]	; (80101bc <problem_fetch+0xeaf8>)
 801007a:	461c      	mov	r4, r3
 801007c:	4613      	mov	r3, r2
 801007e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8010080:	6020      	str	r0, [r4, #0]
 8010082:	6061      	str	r1, [r4, #4]
 8010084:	60a2      	str	r2, [r4, #8]
 8010086:	881b      	ldrh	r3, [r3, #0]
 8010088:	81a3      	strh	r3, [r4, #12]
			break;
 801008a:	f00c ba4b 	b.w	801c524 <problem_fetch+0x1ae60>
		case 428 :
			strcpy(p->name,"LAST MOMENT");
 801008e:	687b      	ldr	r3, [r7, #4]
 8010090:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8010094:	4a4a      	ldr	r2, [pc, #296]	; (80101c0 <problem_fetch+0xeafc>)
 8010096:	461c      	mov	r4, r3
 8010098:	4613      	mov	r3, r2
 801009a:	cb07      	ldmia	r3!, {r0, r1, r2}
 801009c:	6020      	str	r0, [r4, #0]
 801009e:	6061      	str	r1, [r4, #4]
 80100a0:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade,"6B+");
 80100a2:	687b      	ldr	r3, [r7, #4]
 80100a4:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80100a8:	4a3a      	ldr	r2, [pc, #232]	; (8010194 <problem_fetch+0xead0>)
 80100aa:	6810      	ldr	r0, [r2, #0]
 80100ac:	6018      	str	r0, [r3, #0]
			p->moveSize = 5;
 80100ae:	687b      	ldr	r3, [r7, #4]
 80100b0:	2205      	movs	r2, #5
 80100b2:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,E,I,G,I");
 80100b4:	687b      	ldr	r3, [r7, #4]
 80100b6:	33a4      	adds	r3, #164	; 0xa4
 80100b8:	4942      	ldr	r1, [pc, #264]	; (80101c4 <problem_fetch+0xeb00>)
 80100ba:	461a      	mov	r2, r3
 80100bc:	460b      	mov	r3, r1
 80100be:	cb03      	ldmia	r3!, {r0, r1}
 80100c0:	6010      	str	r0, [r2, #0]
 80100c2:	6051      	str	r1, [r2, #4]
 80100c4:	881b      	ldrh	r3, [r3, #0]
 80100c6:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"4,8,10,14,18");
 80100c8:	687b      	ldr	r3, [r7, #4]
 80100ca:	3304      	adds	r3, #4
 80100cc:	4a3e      	ldr	r2, [pc, #248]	; (80101c8 <problem_fetch+0xeb04>)
 80100ce:	461c      	mov	r4, r3
 80100d0:	4613      	mov	r3, r2
 80100d2:	cb07      	ldmia	r3!, {r0, r1, r2}
 80100d4:	6020      	str	r0, [r4, #0]
 80100d6:	6061      	str	r1, [r4, #4]
 80100d8:	60a2      	str	r2, [r4, #8]
 80100da:	781b      	ldrb	r3, [r3, #0]
 80100dc:	7323      	strb	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,e");
 80100de:	687b      	ldr	r3, [r7, #4]
 80100e0:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 80100e4:	4929      	ldr	r1, [pc, #164]	; (801018c <problem_fetch+0xeac8>)
 80100e6:	461a      	mov	r2, r3
 80100e8:	460b      	mov	r3, r1
 80100ea:	cb03      	ldmia	r3!, {r0, r1}
 80100ec:	6010      	str	r0, [r2, #0]
 80100ee:	6051      	str	r1, [r2, #4]
 80100f0:	881b      	ldrh	r3, [r3, #0]
 80100f2:	8113      	strh	r3, [r2, #8]
			break;
 80100f4:	f00c ba16 	b.w	801c524 <problem_fetch+0x1ae60>
		case 429 :
			strcpy(p->name,"THE PROCESS");
 80100f8:	687b      	ldr	r3, [r7, #4]
 80100fa:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80100fe:	4a33      	ldr	r2, [pc, #204]	; (80101cc <problem_fetch+0xeb08>)
 8010100:	461c      	mov	r4, r3
 8010102:	4613      	mov	r3, r2
 8010104:	cb07      	ldmia	r3!, {r0, r1, r2}
 8010106:	6020      	str	r0, [r4, #0]
 8010108:	6061      	str	r1, [r4, #4]
 801010a:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade,"6C+");
 801010c:	687b      	ldr	r3, [r7, #4]
 801010e:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8010112:	4a2f      	ldr	r2, [pc, #188]	; (80101d0 <problem_fetch+0xeb0c>)
 8010114:	6810      	ldr	r0, [r2, #0]
 8010116:	6018      	str	r0, [r3, #0]
			p->moveSize = 8;
 8010118:	687b      	ldr	r3, [r7, #4]
 801011a:	2208      	movs	r2, #8
 801011c:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,G,K,J,G,K,H,D");
 801011e:	687b      	ldr	r3, [r7, #4]
 8010120:	33a4      	adds	r3, #164	; 0xa4
 8010122:	4a2c      	ldr	r2, [pc, #176]	; (80101d4 <problem_fetch+0xeb10>)
 8010124:	461c      	mov	r4, r3
 8010126:	4615      	mov	r5, r2
 8010128:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801012a:	6020      	str	r0, [r4, #0]
 801012c:	6061      	str	r1, [r4, #4]
 801012e:	60a2      	str	r2, [r4, #8]
 8010130:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,6,9,13,17,16,16,18");
 8010132:	687b      	ldr	r3, [r7, #4]
 8010134:	3304      	adds	r3, #4
 8010136:	4a28      	ldr	r2, [pc, #160]	; (80101d8 <problem_fetch+0xeb14>)
 8010138:	461d      	mov	r5, r3
 801013a:	4614      	mov	r4, r2
 801013c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801013e:	6028      	str	r0, [r5, #0]
 8010140:	6069      	str	r1, [r5, #4]
 8010142:	60aa      	str	r2, [r5, #8]
 8010144:	60eb      	str	r3, [r5, #12]
 8010146:	6820      	ldr	r0, [r4, #0]
 8010148:	6128      	str	r0, [r5, #16]
 801014a:	7923      	ldrb	r3, [r4, #4]
 801014c:	752b      	strb	r3, [r5, #20]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,e");
 801014e:	687b      	ldr	r3, [r7, #4]
 8010150:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8010154:	4a21      	ldr	r2, [pc, #132]	; (80101dc <problem_fetch+0xeb18>)
 8010156:	461c      	mov	r4, r3
 8010158:	4615      	mov	r5, r2
 801015a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801015c:	6020      	str	r0, [r4, #0]
 801015e:	6061      	str	r1, [r4, #4]
 8010160:	60a2      	str	r2, [r4, #8]
 8010162:	60e3      	str	r3, [r4, #12]
			break;
 8010164:	f00c b9de 	b.w	801c524 <problem_fetch+0x1ae60>
 8010168:	08028a08 	.word	0x08028a08
 801016c:	080239f4 	.word	0x080239f4
 8010170:	08028a10 	.word	0x08028a10
 8010174:	08028a1c 	.word	0x08028a1c
 8010178:	08023834 	.word	0x08023834
 801017c:	08028a2c 	.word	0x08028a2c
 8010180:	08023f4c 	.word	0x08023f4c
 8010184:	08028a40 	.word	0x08028a40
 8010188:	08028a4c 	.word	0x08028a4c
 801018c:	08023d20 	.word	0x08023d20
 8010190:	08028a5c 	.word	0x08028a5c
 8010194:	08023854 	.word	0x08023854
 8010198:	08028a6c 	.word	0x08028a6c
 801019c:	08028a78 	.word	0x08028a78
 80101a0:	08023bf0 	.word	0x08023bf0
 80101a4:	08028a88 	.word	0x08028a88
 80101a8:	08028a94 	.word	0x08028a94
 80101ac:	08028aa0 	.word	0x08028aa0
 80101b0:	08028ab0 	.word	0x08028ab0
 80101b4:	08028ac4 	.word	0x08028ac4
 80101b8:	08028ad4 	.word	0x08028ad4
 80101bc:	080239dc 	.word	0x080239dc
 80101c0:	08028ae8 	.word	0x08028ae8
 80101c4:	08028af4 	.word	0x08028af4
 80101c8:	08028b00 	.word	0x08028b00
 80101cc:	08028b10 	.word	0x08028b10
 80101d0:	080238ec 	.word	0x080238ec
 80101d4:	08028b1c 	.word	0x08028b1c
 80101d8:	08028b2c 	.word	0x08028b2c
 80101dc:	08023978 	.word	0x08023978
		case 430 :
			strcpy(p->name,"THE FUNERAL (RIP PINCH)");
 80101e0:	687b      	ldr	r3, [r7, #4]
 80101e2:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80101e6:	4ac3      	ldr	r2, [pc, #780]	; (80104f4 <problem_fetch+0xee30>)
 80101e8:	461d      	mov	r5, r3
 80101ea:	4614      	mov	r4, r2
 80101ec:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80101ee:	6028      	str	r0, [r5, #0]
 80101f0:	6069      	str	r1, [r5, #4]
 80101f2:	60aa      	str	r2, [r5, #8]
 80101f4:	60eb      	str	r3, [r5, #12]
 80101f6:	cc03      	ldmia	r4!, {r0, r1}
 80101f8:	6128      	str	r0, [r5, #16]
 80101fa:	6169      	str	r1, [r5, #20]
			strcpy(p->grade,"6C+");
 80101fc:	687b      	ldr	r3, [r7, #4]
 80101fe:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8010202:	4abd      	ldr	r2, [pc, #756]	; (80104f8 <problem_fetch+0xee34>)
 8010204:	6810      	ldr	r0, [r2, #0]
 8010206:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 8010208:	687b      	ldr	r3, [r7, #4]
 801020a:	2206      	movs	r2, #6
 801020c:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,D,G,D,G,I");
 801020e:	687b      	ldr	r3, [r7, #4]
 8010210:	33a4      	adds	r3, #164	; 0xa4
 8010212:	4aba      	ldr	r2, [pc, #744]	; (80104fc <problem_fetch+0xee38>)
 8010214:	461c      	mov	r4, r3
 8010216:	4613      	mov	r3, r2
 8010218:	cb07      	ldmia	r3!, {r0, r1, r2}
 801021a:	6020      	str	r0, [r4, #0]
 801021c:	6061      	str	r1, [r4, #4]
 801021e:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,7,10,11,15,18");
 8010220:	687b      	ldr	r3, [r7, #4]
 8010222:	3304      	adds	r3, #4
 8010224:	4ab6      	ldr	r2, [pc, #728]	; (8010500 <problem_fetch+0xee3c>)
 8010226:	461c      	mov	r4, r3
 8010228:	4615      	mov	r5, r2
 801022a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801022c:	6020      	str	r0, [r4, #0]
 801022e:	6061      	str	r1, [r4, #4]
 8010230:	60a2      	str	r2, [r4, #8]
 8010232:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 8010234:	687b      	ldr	r3, [r7, #4]
 8010236:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 801023a:	4ab2      	ldr	r2, [pc, #712]	; (8010504 <problem_fetch+0xee40>)
 801023c:	461c      	mov	r4, r3
 801023e:	4613      	mov	r3, r2
 8010240:	cb07      	ldmia	r3!, {r0, r1, r2}
 8010242:	6020      	str	r0, [r4, #0]
 8010244:	6061      	str	r1, [r4, #4]
 8010246:	60a2      	str	r2, [r4, #8]
			break;
 8010248:	f00c b96c 	b.w	801c524 <problem_fetch+0x1ae60>
		case 431 :
			strcpy(p->name,"THE PINCH OF DEATH");
 801024c:	687b      	ldr	r3, [r7, #4]
 801024e:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8010252:	4aad      	ldr	r2, [pc, #692]	; (8010508 <problem_fetch+0xee44>)
 8010254:	461d      	mov	r5, r3
 8010256:	4614      	mov	r4, r2
 8010258:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801025a:	6028      	str	r0, [r5, #0]
 801025c:	6069      	str	r1, [r5, #4]
 801025e:	60aa      	str	r2, [r5, #8]
 8010260:	60eb      	str	r3, [r5, #12]
 8010262:	8823      	ldrh	r3, [r4, #0]
 8010264:	78a2      	ldrb	r2, [r4, #2]
 8010266:	822b      	strh	r3, [r5, #16]
 8010268:	4613      	mov	r3, r2
 801026a:	74ab      	strb	r3, [r5, #18]
			strcpy(p->grade,"6C");
 801026c:	687b      	ldr	r3, [r7, #4]
 801026e:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8010272:	4aa6      	ldr	r2, [pc, #664]	; (801050c <problem_fetch+0xee48>)
 8010274:	8811      	ldrh	r1, [r2, #0]
 8010276:	7892      	ldrb	r2, [r2, #2]
 8010278:	8019      	strh	r1, [r3, #0]
 801027a:	709a      	strb	r2, [r3, #2]
			p->moveSize = 6;
 801027c:	687b      	ldr	r3, [r7, #4]
 801027e:	2206      	movs	r2, #6
 8010280:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,D,G,D,D,A");
 8010282:	687b      	ldr	r3, [r7, #4]
 8010284:	33a4      	adds	r3, #164	; 0xa4
 8010286:	4aa2      	ldr	r2, [pc, #648]	; (8010510 <problem_fetch+0xee4c>)
 8010288:	461c      	mov	r4, r3
 801028a:	4613      	mov	r3, r2
 801028c:	cb07      	ldmia	r3!, {r0, r1, r2}
 801028e:	6020      	str	r0, [r4, #0]
 8010290:	6061      	str	r1, [r4, #4]
 8010292:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,7,10,11,15,18");
 8010294:	687b      	ldr	r3, [r7, #4]
 8010296:	3304      	adds	r3, #4
 8010298:	4a99      	ldr	r2, [pc, #612]	; (8010500 <problem_fetch+0xee3c>)
 801029a:	461c      	mov	r4, r3
 801029c:	4615      	mov	r5, r2
 801029e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80102a0:	6020      	str	r0, [r4, #0]
 80102a2:	6061      	str	r1, [r4, #4]
 80102a4:	60a2      	str	r2, [r4, #8]
 80102a6:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 80102a8:	687b      	ldr	r3, [r7, #4]
 80102aa:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 80102ae:	4a95      	ldr	r2, [pc, #596]	; (8010504 <problem_fetch+0xee40>)
 80102b0:	461c      	mov	r4, r3
 80102b2:	4613      	mov	r3, r2
 80102b4:	cb07      	ldmia	r3!, {r0, r1, r2}
 80102b6:	6020      	str	r0, [r4, #0]
 80102b8:	6061      	str	r1, [r4, #4]
 80102ba:	60a2      	str	r2, [r4, #8]
			break;
 80102bc:	f00c b932 	b.w	801c524 <problem_fetch+0x1ae60>
		case 432 :
			strcpy(p->name,"COBRA REALE");
 80102c0:	687b      	ldr	r3, [r7, #4]
 80102c2:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80102c6:	4a93      	ldr	r2, [pc, #588]	; (8010514 <problem_fetch+0xee50>)
 80102c8:	461c      	mov	r4, r3
 80102ca:	4613      	mov	r3, r2
 80102cc:	cb07      	ldmia	r3!, {r0, r1, r2}
 80102ce:	6020      	str	r0, [r4, #0]
 80102d0:	6061      	str	r1, [r4, #4]
 80102d2:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade,"7A+");
 80102d4:	687b      	ldr	r3, [r7, #4]
 80102d6:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80102da:	4a8f      	ldr	r2, [pc, #572]	; (8010518 <problem_fetch+0xee54>)
 80102dc:	6810      	ldr	r0, [r2, #0]
 80102de:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 80102e0:	687b      	ldr	r3, [r7, #4]
 80102e2:	2206      	movs	r2, #6
 80102e4:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,E,E,B,E,A");
 80102e6:	687b      	ldr	r3, [r7, #4]
 80102e8:	33a4      	adds	r3, #164	; 0xa4
 80102ea:	4a8c      	ldr	r2, [pc, #560]	; (801051c <problem_fetch+0xee58>)
 80102ec:	461c      	mov	r4, r3
 80102ee:	4613      	mov	r3, r2
 80102f0:	cb07      	ldmia	r3!, {r0, r1, r2}
 80102f2:	6020      	str	r0, [r4, #0]
 80102f4:	6061      	str	r1, [r4, #4]
 80102f6:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,6,9,12,14,18");
 80102f8:	687b      	ldr	r3, [r7, #4]
 80102fa:	3304      	adds	r3, #4
 80102fc:	4a88      	ldr	r2, [pc, #544]	; (8010520 <problem_fetch+0xee5c>)
 80102fe:	461c      	mov	r4, r3
 8010300:	4613      	mov	r3, r2
 8010302:	cb07      	ldmia	r3!, {r0, r1, r2}
 8010304:	6020      	str	r0, [r4, #0]
 8010306:	6061      	str	r1, [r4, #4]
 8010308:	60a2      	str	r2, [r4, #8]
 801030a:	881a      	ldrh	r2, [r3, #0]
 801030c:	789b      	ldrb	r3, [r3, #2]
 801030e:	81a2      	strh	r2, [r4, #12]
 8010310:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish,"s,s,d,d,d,e");
 8010312:	687b      	ldr	r3, [r7, #4]
 8010314:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8010318:	4a82      	ldr	r2, [pc, #520]	; (8010524 <problem_fetch+0xee60>)
 801031a:	461c      	mov	r4, r3
 801031c:	4613      	mov	r3, r2
 801031e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8010320:	6020      	str	r0, [r4, #0]
 8010322:	6061      	str	r1, [r4, #4]
 8010324:	60a2      	str	r2, [r4, #8]
			break;
 8010326:	f00c b8fd 	b.w	801c524 <problem_fetch+0x1ae60>
		case 433 :
			strcpy(p->name,"OMBRA");
 801032a:	687b      	ldr	r3, [r7, #4]
 801032c:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8010330:	4a7d      	ldr	r2, [pc, #500]	; (8010528 <problem_fetch+0xee64>)
 8010332:	6810      	ldr	r0, [r2, #0]
 8010334:	6018      	str	r0, [r3, #0]
 8010336:	8892      	ldrh	r2, [r2, #4]
 8010338:	809a      	strh	r2, [r3, #4]
			strcpy(p->grade,"6C+");
 801033a:	687b      	ldr	r3, [r7, #4]
 801033c:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8010340:	4a6d      	ldr	r2, [pc, #436]	; (80104f8 <problem_fetch+0xee34>)
 8010342:	6810      	ldr	r0, [r2, #0]
 8010344:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 8010346:	687b      	ldr	r3, [r7, #4]
 8010348:	2207      	movs	r2, #7
 801034a:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,H,E,F,E,G,D");
 801034c:	687b      	ldr	r3, [r7, #4]
 801034e:	33a4      	adds	r3, #164	; 0xa4
 8010350:	4a76      	ldr	r2, [pc, #472]	; (801052c <problem_fetch+0xee68>)
 8010352:	461c      	mov	r4, r3
 8010354:	4613      	mov	r3, r2
 8010356:	cb07      	ldmia	r3!, {r0, r1, r2}
 8010358:	6020      	str	r0, [r4, #0]
 801035a:	6061      	str	r1, [r4, #4]
 801035c:	60a2      	str	r2, [r4, #8]
 801035e:	881b      	ldrh	r3, [r3, #0]
 8010360:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,8,8,11,14,17,18");
 8010362:	687b      	ldr	r3, [r7, #4]
 8010364:	3304      	adds	r3, #4
 8010366:	4a72      	ldr	r2, [pc, #456]	; (8010530 <problem_fetch+0xee6c>)
 8010368:	461d      	mov	r5, r3
 801036a:	4614      	mov	r4, r2
 801036c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801036e:	6028      	str	r0, [r5, #0]
 8010370:	6069      	str	r1, [r5, #4]
 8010372:	60aa      	str	r2, [r5, #8]
 8010374:	60eb      	str	r3, [r5, #12]
 8010376:	8823      	ldrh	r3, [r4, #0]
 8010378:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 801037a:	687b      	ldr	r3, [r7, #4]
 801037c:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8010380:	4a6c      	ldr	r2, [pc, #432]	; (8010534 <problem_fetch+0xee70>)
 8010382:	461c      	mov	r4, r3
 8010384:	4613      	mov	r3, r2
 8010386:	cb07      	ldmia	r3!, {r0, r1, r2}
 8010388:	6020      	str	r0, [r4, #0]
 801038a:	6061      	str	r1, [r4, #4]
 801038c:	60a2      	str	r2, [r4, #8]
 801038e:	881b      	ldrh	r3, [r3, #0]
 8010390:	81a3      	strh	r3, [r4, #12]
			break;
 8010392:	f00c b8c7 	b.w	801c524 <problem_fetch+0x1ae60>
		case 434 :
			strcpy(p->name,"CORNALBA");
 8010396:	687b      	ldr	r3, [r7, #4]
 8010398:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801039c:	4966      	ldr	r1, [pc, #408]	; (8010538 <problem_fetch+0xee74>)
 801039e:	461a      	mov	r2, r3
 80103a0:	460b      	mov	r3, r1
 80103a2:	cb03      	ldmia	r3!, {r0, r1}
 80103a4:	6010      	str	r0, [r2, #0]
 80103a6:	6051      	str	r1, [r2, #4]
 80103a8:	781b      	ldrb	r3, [r3, #0]
 80103aa:	7213      	strb	r3, [r2, #8]
			strcpy(p->grade,"7A+");
 80103ac:	687b      	ldr	r3, [r7, #4]
 80103ae:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80103b2:	4a59      	ldr	r2, [pc, #356]	; (8010518 <problem_fetch+0xee54>)
 80103b4:	6810      	ldr	r0, [r2, #0]
 80103b6:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 80103b8:	687b      	ldr	r3, [r7, #4]
 80103ba:	2207      	movs	r2, #7
 80103bc:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"C,E,H,H,J,K,I");
 80103be:	687b      	ldr	r3, [r7, #4]
 80103c0:	33a4      	adds	r3, #164	; 0xa4
 80103c2:	4a5e      	ldr	r2, [pc, #376]	; (801053c <problem_fetch+0xee78>)
 80103c4:	461c      	mov	r4, r3
 80103c6:	4613      	mov	r3, r2
 80103c8:	cb07      	ldmia	r3!, {r0, r1, r2}
 80103ca:	6020      	str	r0, [r4, #0]
 80103cc:	6061      	str	r1, [r4, #4]
 80103ce:	60a2      	str	r2, [r4, #8]
 80103d0:	881b      	ldrh	r3, [r3, #0]
 80103d2:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,6,8,12,12,16,18");
 80103d4:	687b      	ldr	r3, [r7, #4]
 80103d6:	3304      	adds	r3, #4
 80103d8:	4a59      	ldr	r2, [pc, #356]	; (8010540 <problem_fetch+0xee7c>)
 80103da:	461d      	mov	r5, r3
 80103dc:	4614      	mov	r4, r2
 80103de:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80103e0:	6028      	str	r0, [r5, #0]
 80103e2:	6069      	str	r1, [r5, #4]
 80103e4:	60aa      	str	r2, [r5, #8]
 80103e6:	60eb      	str	r3, [r5, #12]
 80103e8:	8823      	ldrh	r3, [r4, #0]
 80103ea:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,s,d,d,d,d,e");
 80103ec:	687b      	ldr	r3, [r7, #4]
 80103ee:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 80103f2:	4a54      	ldr	r2, [pc, #336]	; (8010544 <problem_fetch+0xee80>)
 80103f4:	461c      	mov	r4, r3
 80103f6:	4613      	mov	r3, r2
 80103f8:	cb07      	ldmia	r3!, {r0, r1, r2}
 80103fa:	6020      	str	r0, [r4, #0]
 80103fc:	6061      	str	r1, [r4, #4]
 80103fe:	60a2      	str	r2, [r4, #8]
 8010400:	881b      	ldrh	r3, [r3, #0]
 8010402:	81a3      	strh	r3, [r4, #12]
			break;
 8010404:	f00c b88e 	b.w	801c524 <problem_fetch+0x1ae60>
		case 435 :
			strcpy(p->name,"BIOGRAPHIE");
 8010408:	687b      	ldr	r3, [r7, #4]
 801040a:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801040e:	494e      	ldr	r1, [pc, #312]	; (8010548 <problem_fetch+0xee84>)
 8010410:	461a      	mov	r2, r3
 8010412:	460b      	mov	r3, r1
 8010414:	cb03      	ldmia	r3!, {r0, r1}
 8010416:	6010      	str	r0, [r2, #0]
 8010418:	6051      	str	r1, [r2, #4]
 801041a:	8819      	ldrh	r1, [r3, #0]
 801041c:	789b      	ldrb	r3, [r3, #2]
 801041e:	8111      	strh	r1, [r2, #8]
 8010420:	7293      	strb	r3, [r2, #10]
			strcpy(p->grade,"7A");
 8010422:	687b      	ldr	r3, [r7, #4]
 8010424:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8010428:	4a48      	ldr	r2, [pc, #288]	; (801054c <problem_fetch+0xee88>)
 801042a:	8811      	ldrh	r1, [r2, #0]
 801042c:	7892      	ldrb	r2, [r2, #2]
 801042e:	8019      	strh	r1, [r3, #0]
 8010430:	709a      	strb	r2, [r3, #2]
			p->moveSize = 7;
 8010432:	687b      	ldr	r3, [r7, #4]
 8010434:	2207      	movs	r2, #7
 8010436:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,J,K,H,H,E,D");
 8010438:	687b      	ldr	r3, [r7, #4]
 801043a:	33a4      	adds	r3, #164	; 0xa4
 801043c:	4a44      	ldr	r2, [pc, #272]	; (8010550 <problem_fetch+0xee8c>)
 801043e:	461c      	mov	r4, r3
 8010440:	4613      	mov	r3, r2
 8010442:	cb07      	ldmia	r3!, {r0, r1, r2}
 8010444:	6020      	str	r0, [r4, #0]
 8010446:	6061      	str	r1, [r4, #4]
 8010448:	60a2      	str	r2, [r4, #8]
 801044a:	881b      	ldrh	r3, [r3, #0]
 801044c:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"6,5,9,12,16,16,18");
 801044e:	687b      	ldr	r3, [r7, #4]
 8010450:	3304      	adds	r3, #4
 8010452:	4a40      	ldr	r2, [pc, #256]	; (8010554 <problem_fetch+0xee90>)
 8010454:	461d      	mov	r5, r3
 8010456:	4614      	mov	r4, r2
 8010458:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801045a:	6028      	str	r0, [r5, #0]
 801045c:	6069      	str	r1, [r5, #4]
 801045e:	60aa      	str	r2, [r5, #8]
 8010460:	60eb      	str	r3, [r5, #12]
 8010462:	8823      	ldrh	r3, [r4, #0]
 8010464:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,s,d,d,d,d,e");
 8010466:	687b      	ldr	r3, [r7, #4]
 8010468:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 801046c:	4a35      	ldr	r2, [pc, #212]	; (8010544 <problem_fetch+0xee80>)
 801046e:	461c      	mov	r4, r3
 8010470:	4613      	mov	r3, r2
 8010472:	cb07      	ldmia	r3!, {r0, r1, r2}
 8010474:	6020      	str	r0, [r4, #0]
 8010476:	6061      	str	r1, [r4, #4]
 8010478:	60a2      	str	r2, [r4, #8]
 801047a:	881b      	ldrh	r3, [r3, #0]
 801047c:	81a3      	strh	r3, [r4, #12]
			break;
 801047e:	f00c b851 	b.w	801c524 <problem_fetch+0x1ae60>
		case 436 :
			strcpy(p->name,"LITTLEFINGER");
 8010482:	687b      	ldr	r3, [r7, #4]
 8010484:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8010488:	4a33      	ldr	r2, [pc, #204]	; (8010558 <problem_fetch+0xee94>)
 801048a:	461c      	mov	r4, r3
 801048c:	4613      	mov	r3, r2
 801048e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8010490:	6020      	str	r0, [r4, #0]
 8010492:	6061      	str	r1, [r4, #4]
 8010494:	60a2      	str	r2, [r4, #8]
 8010496:	781b      	ldrb	r3, [r3, #0]
 8010498:	7323      	strb	r3, [r4, #12]
			strcpy(p->grade,"6C");
 801049a:	687b      	ldr	r3, [r7, #4]
 801049c:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80104a0:	4a1a      	ldr	r2, [pc, #104]	; (801050c <problem_fetch+0xee48>)
 80104a2:	8811      	ldrh	r1, [r2, #0]
 80104a4:	7892      	ldrb	r2, [r2, #2]
 80104a6:	8019      	strh	r1, [r3, #0]
 80104a8:	709a      	strb	r2, [r3, #2]
			p->moveSize = 5;
 80104aa:	687b      	ldr	r3, [r7, #4]
 80104ac:	2205      	movs	r2, #5
 80104ae:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,E,H,H,I");
 80104b0:	687b      	ldr	r3, [r7, #4]
 80104b2:	33a4      	adds	r3, #164	; 0xa4
 80104b4:	4929      	ldr	r1, [pc, #164]	; (801055c <problem_fetch+0xee98>)
 80104b6:	461a      	mov	r2, r3
 80104b8:	460b      	mov	r3, r1
 80104ba:	cb03      	ldmia	r3!, {r0, r1}
 80104bc:	6010      	str	r0, [r2, #0]
 80104be:	6051      	str	r1, [r2, #4]
 80104c0:	881b      	ldrh	r3, [r3, #0]
 80104c2:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"4,8,13,16,18");
 80104c4:	687b      	ldr	r3, [r7, #4]
 80104c6:	3304      	adds	r3, #4
 80104c8:	4a25      	ldr	r2, [pc, #148]	; (8010560 <problem_fetch+0xee9c>)
 80104ca:	461c      	mov	r4, r3
 80104cc:	4613      	mov	r3, r2
 80104ce:	cb07      	ldmia	r3!, {r0, r1, r2}
 80104d0:	6020      	str	r0, [r4, #0]
 80104d2:	6061      	str	r1, [r4, #4]
 80104d4:	60a2      	str	r2, [r4, #8]
 80104d6:	781b      	ldrb	r3, [r3, #0]
 80104d8:	7323      	strb	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,e");
 80104da:	687b      	ldr	r3, [r7, #4]
 80104dc:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 80104e0:	4920      	ldr	r1, [pc, #128]	; (8010564 <problem_fetch+0xeea0>)
 80104e2:	461a      	mov	r2, r3
 80104e4:	460b      	mov	r3, r1
 80104e6:	cb03      	ldmia	r3!, {r0, r1}
 80104e8:	6010      	str	r0, [r2, #0]
 80104ea:	6051      	str	r1, [r2, #4]
 80104ec:	881b      	ldrh	r3, [r3, #0]
 80104ee:	8113      	strh	r3, [r2, #8]
			break;
 80104f0:	f00c b818 	b.w	801c524 <problem_fetch+0x1ae60>
 80104f4:	08028b44 	.word	0x08028b44
 80104f8:	080238ec 	.word	0x080238ec
 80104fc:	08028b5c 	.word	0x08028b5c
 8010500:	08028b68 	.word	0x08028b68
 8010504:	08023bf0 	.word	0x08023bf0
 8010508:	08028b78 	.word	0x08028b78
 801050c:	08023920 	.word	0x08023920
 8010510:	08028b8c 	.word	0x08028b8c
 8010514:	08028b98 	.word	0x08028b98
 8010518:	080239f4 	.word	0x080239f4
 801051c:	08028ba4 	.word	0x08028ba4
 8010520:	08028bb0 	.word	0x08028bb0
 8010524:	08023834 	.word	0x08023834
 8010528:	08028bc0 	.word	0x08028bc0
 801052c:	08028bc8 	.word	0x08028bc8
 8010530:	08028bd8 	.word	0x08028bd8
 8010534:	080239dc 	.word	0x080239dc
 8010538:	08028bec 	.word	0x08028bec
 801053c:	08028bf8 	.word	0x08028bf8
 8010540:	08028c08 	.word	0x08028c08
 8010544:	080238cc 	.word	0x080238cc
 8010548:	08028c1c 	.word	0x08028c1c
 801054c:	08023814 	.word	0x08023814
 8010550:	08028c28 	.word	0x08028c28
 8010554:	08028c38 	.word	0x08028c38
 8010558:	08028c4c 	.word	0x08028c4c
 801055c:	08028c5c 	.word	0x08028c5c
 8010560:	08028c68 	.word	0x08028c68
 8010564:	08023d20 	.word	0x08023d20
		case 437 :
			strcpy(p->name,"THE POWER OF 9");
 8010568:	687b      	ldr	r3, [r7, #4]
 801056a:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801056e:	4aad      	ldr	r2, [pc, #692]	; (8010824 <problem_fetch+0xf160>)
 8010570:	461c      	mov	r4, r3
 8010572:	4613      	mov	r3, r2
 8010574:	cb07      	ldmia	r3!, {r0, r1, r2}
 8010576:	6020      	str	r0, [r4, #0]
 8010578:	6061      	str	r1, [r4, #4]
 801057a:	60a2      	str	r2, [r4, #8]
 801057c:	881a      	ldrh	r2, [r3, #0]
 801057e:	789b      	ldrb	r3, [r3, #2]
 8010580:	81a2      	strh	r2, [r4, #12]
 8010582:	73a3      	strb	r3, [r4, #14]
			strcpy(p->grade,"6B+");
 8010584:	687b      	ldr	r3, [r7, #4]
 8010586:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801058a:	4aa7      	ldr	r2, [pc, #668]	; (8010828 <problem_fetch+0xf164>)
 801058c:	6810      	ldr	r0, [r2, #0]
 801058e:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 8010590:	687b      	ldr	r3, [r7, #4]
 8010592:	2207      	movs	r2, #7
 8010594:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"H,J,H,E,E,E,I");
 8010596:	687b      	ldr	r3, [r7, #4]
 8010598:	33a4      	adds	r3, #164	; 0xa4
 801059a:	4aa4      	ldr	r2, [pc, #656]	; (801082c <problem_fetch+0xf168>)
 801059c:	461c      	mov	r4, r3
 801059e:	4613      	mov	r3, r2
 80105a0:	cb07      	ldmia	r3!, {r0, r1, r2}
 80105a2:	6020      	str	r0, [r4, #0]
 80105a4:	6061      	str	r1, [r4, #4]
 80105a6:	60a2      	str	r2, [r4, #8]
 80105a8:	881b      	ldrh	r3, [r3, #0]
 80105aa:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,5,8,8,12,16,18");
 80105ac:	687b      	ldr	r3, [r7, #4]
 80105ae:	3304      	adds	r3, #4
 80105b0:	4a9f      	ldr	r2, [pc, #636]	; (8010830 <problem_fetch+0xf16c>)
 80105b2:	461d      	mov	r5, r3
 80105b4:	4614      	mov	r4, r2
 80105b6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80105b8:	6028      	str	r0, [r5, #0]
 80105ba:	6069      	str	r1, [r5, #4]
 80105bc:	60aa      	str	r2, [r5, #8]
 80105be:	60eb      	str	r3, [r5, #12]
 80105c0:	7823      	ldrb	r3, [r4, #0]
 80105c2:	742b      	strb	r3, [r5, #16]
			strcpy(p->startFinish,"s,s,d,d,d,d,e");
 80105c4:	687b      	ldr	r3, [r7, #4]
 80105c6:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 80105ca:	4a9a      	ldr	r2, [pc, #616]	; (8010834 <problem_fetch+0xf170>)
 80105cc:	461c      	mov	r4, r3
 80105ce:	4613      	mov	r3, r2
 80105d0:	cb07      	ldmia	r3!, {r0, r1, r2}
 80105d2:	6020      	str	r0, [r4, #0]
 80105d4:	6061      	str	r1, [r4, #4]
 80105d6:	60a2      	str	r2, [r4, #8]
 80105d8:	881b      	ldrh	r3, [r3, #0]
 80105da:	81a3      	strh	r3, [r4, #12]
			break;
 80105dc:	f00b bfa2 	b.w	801c524 <problem_fetch+0x1ae60>
		case 438 :
			strcpy(p->name,"PUSSY DAVAILLE");
 80105e0:	687b      	ldr	r3, [r7, #4]
 80105e2:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80105e6:	4a94      	ldr	r2, [pc, #592]	; (8010838 <problem_fetch+0xf174>)
 80105e8:	461c      	mov	r4, r3
 80105ea:	4613      	mov	r3, r2
 80105ec:	cb07      	ldmia	r3!, {r0, r1, r2}
 80105ee:	6020      	str	r0, [r4, #0]
 80105f0:	6061      	str	r1, [r4, #4]
 80105f2:	60a2      	str	r2, [r4, #8]
 80105f4:	881a      	ldrh	r2, [r3, #0]
 80105f6:	789b      	ldrb	r3, [r3, #2]
 80105f8:	81a2      	strh	r2, [r4, #12]
 80105fa:	73a3      	strb	r3, [r4, #14]
			strcpy(p->grade,"6C");
 80105fc:	687b      	ldr	r3, [r7, #4]
 80105fe:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8010602:	4a8e      	ldr	r2, [pc, #568]	; (801083c <problem_fetch+0xf178>)
 8010604:	8811      	ldrh	r1, [r2, #0]
 8010606:	7892      	ldrb	r2, [r2, #2]
 8010608:	8019      	strh	r1, [r3, #0]
 801060a:	709a      	strb	r2, [r3, #2]
			p->moveSize = 7;
 801060c:	687b      	ldr	r3, [r7, #4]
 801060e:	2207      	movs	r2, #7
 8010610:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"E,C,C,G,E,B,D");
 8010612:	687b      	ldr	r3, [r7, #4]
 8010614:	33a4      	adds	r3, #164	; 0xa4
 8010616:	4a8a      	ldr	r2, [pc, #552]	; (8010840 <problem_fetch+0xf17c>)
 8010618:	461c      	mov	r4, r3
 801061a:	4613      	mov	r3, r2
 801061c:	cb07      	ldmia	r3!, {r0, r1, r2}
 801061e:	6020      	str	r0, [r4, #0]
 8010620:	6061      	str	r1, [r4, #4]
 8010622:	60a2      	str	r2, [r4, #8]
 8010624:	881b      	ldrh	r3, [r3, #0]
 8010626:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"6,5,8,9,12,15,18");
 8010628:	687b      	ldr	r3, [r7, #4]
 801062a:	3304      	adds	r3, #4
 801062c:	4a85      	ldr	r2, [pc, #532]	; (8010844 <problem_fetch+0xf180>)
 801062e:	461d      	mov	r5, r3
 8010630:	4614      	mov	r4, r2
 8010632:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8010634:	6028      	str	r0, [r5, #0]
 8010636:	6069      	str	r1, [r5, #4]
 8010638:	60aa      	str	r2, [r5, #8]
 801063a:	60eb      	str	r3, [r5, #12]
 801063c:	7823      	ldrb	r3, [r4, #0]
 801063e:	742b      	strb	r3, [r5, #16]
			strcpy(p->startFinish,"s,s,d,d,d,d,e");
 8010640:	687b      	ldr	r3, [r7, #4]
 8010642:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8010646:	4a7b      	ldr	r2, [pc, #492]	; (8010834 <problem_fetch+0xf170>)
 8010648:	461c      	mov	r4, r3
 801064a:	4613      	mov	r3, r2
 801064c:	cb07      	ldmia	r3!, {r0, r1, r2}
 801064e:	6020      	str	r0, [r4, #0]
 8010650:	6061      	str	r1, [r4, #4]
 8010652:	60a2      	str	r2, [r4, #8]
 8010654:	881b      	ldrh	r3, [r3, #0]
 8010656:	81a3      	strh	r3, [r4, #12]
			break;
 8010658:	f00b bf64 	b.w	801c524 <problem_fetch+0x1ae60>
		case 439 :
			strcpy(p->name,"IN THE PINES");
 801065c:	687b      	ldr	r3, [r7, #4]
 801065e:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8010662:	4a79      	ldr	r2, [pc, #484]	; (8010848 <problem_fetch+0xf184>)
 8010664:	461c      	mov	r4, r3
 8010666:	4613      	mov	r3, r2
 8010668:	cb07      	ldmia	r3!, {r0, r1, r2}
 801066a:	6020      	str	r0, [r4, #0]
 801066c:	6061      	str	r1, [r4, #4]
 801066e:	60a2      	str	r2, [r4, #8]
 8010670:	781b      	ldrb	r3, [r3, #0]
 8010672:	7323      	strb	r3, [r4, #12]
			strcpy(p->grade,"6B+");
 8010674:	687b      	ldr	r3, [r7, #4]
 8010676:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801067a:	4a6b      	ldr	r2, [pc, #428]	; (8010828 <problem_fetch+0xf164>)
 801067c:	6810      	ldr	r0, [r2, #0]
 801067e:	6018      	str	r0, [r3, #0]
			p->moveSize = 8;
 8010680:	687b      	ldr	r3, [r7, #4]
 8010682:	2208      	movs	r2, #8
 8010684:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,E,I,H,K,G,G,D");
 8010686:	687b      	ldr	r3, [r7, #4]
 8010688:	33a4      	adds	r3, #164	; 0xa4
 801068a:	4a70      	ldr	r2, [pc, #448]	; (801084c <problem_fetch+0xf188>)
 801068c:	461c      	mov	r4, r3
 801068e:	4615      	mov	r5, r2
 8010690:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010692:	6020      	str	r0, [r4, #0]
 8010694:	6061      	str	r1, [r4, #4]
 8010696:	60a2      	str	r2, [r4, #8]
 8010698:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,8,10,12,14,15,17,18");
 801069a:	687b      	ldr	r3, [r7, #4]
 801069c:	3304      	adds	r3, #4
 801069e:	4a6c      	ldr	r2, [pc, #432]	; (8010850 <problem_fetch+0xf18c>)
 80106a0:	461d      	mov	r5, r3
 80106a2:	4614      	mov	r4, r2
 80106a4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80106a6:	6028      	str	r0, [r5, #0]
 80106a8:	6069      	str	r1, [r5, #4]
 80106aa:	60aa      	str	r2, [r5, #8]
 80106ac:	60eb      	str	r3, [r5, #12]
 80106ae:	6820      	ldr	r0, [r4, #0]
 80106b0:	6128      	str	r0, [r5, #16]
 80106b2:	88a3      	ldrh	r3, [r4, #4]
 80106b4:	82ab      	strh	r3, [r5, #20]
			strcpy(p->startFinish,"s,d,d,d,d,d,d,e");
 80106b6:	687b      	ldr	r3, [r7, #4]
 80106b8:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 80106bc:	4a65      	ldr	r2, [pc, #404]	; (8010854 <problem_fetch+0xf190>)
 80106be:	461c      	mov	r4, r3
 80106c0:	4615      	mov	r5, r2
 80106c2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80106c4:	6020      	str	r0, [r4, #0]
 80106c6:	6061      	str	r1, [r4, #4]
 80106c8:	60a2      	str	r2, [r4, #8]
 80106ca:	60e3      	str	r3, [r4, #12]
			break;
 80106cc:	f00b bf2a 	b.w	801c524 <problem_fetch+0x1ae60>
		case 440 :
			strcpy(p->name,"THE ONLY LIGHT");
 80106d0:	687b      	ldr	r3, [r7, #4]
 80106d2:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80106d6:	4a60      	ldr	r2, [pc, #384]	; (8010858 <problem_fetch+0xf194>)
 80106d8:	461c      	mov	r4, r3
 80106da:	4613      	mov	r3, r2
 80106dc:	cb07      	ldmia	r3!, {r0, r1, r2}
 80106de:	6020      	str	r0, [r4, #0]
 80106e0:	6061      	str	r1, [r4, #4]
 80106e2:	60a2      	str	r2, [r4, #8]
 80106e4:	881a      	ldrh	r2, [r3, #0]
 80106e6:	789b      	ldrb	r3, [r3, #2]
 80106e8:	81a2      	strh	r2, [r4, #12]
 80106ea:	73a3      	strb	r3, [r4, #14]
			strcpy(p->grade,"6C");
 80106ec:	687b      	ldr	r3, [r7, #4]
 80106ee:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80106f2:	4a52      	ldr	r2, [pc, #328]	; (801083c <problem_fetch+0xf178>)
 80106f4:	8811      	ldrh	r1, [r2, #0]
 80106f6:	7892      	ldrb	r2, [r2, #2]
 80106f8:	8019      	strh	r1, [r3, #0]
 80106fa:	709a      	strb	r2, [r3, #2]
			p->moveSize = 7;
 80106fc:	687b      	ldr	r3, [r7, #4]
 80106fe:	2207      	movs	r2, #7
 8010700:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"E,G,H,F,H,E,D");
 8010702:	687b      	ldr	r3, [r7, #4]
 8010704:	33a4      	adds	r3, #164	; 0xa4
 8010706:	4a55      	ldr	r2, [pc, #340]	; (801085c <problem_fetch+0xf198>)
 8010708:	461c      	mov	r4, r3
 801070a:	4613      	mov	r3, r2
 801070c:	cb07      	ldmia	r3!, {r0, r1, r2}
 801070e:	6020      	str	r0, [r4, #0]
 8010710:	6061      	str	r1, [r4, #4]
 8010712:	60a2      	str	r2, [r4, #8]
 8010714:	881b      	ldrh	r3, [r3, #0]
 8010716:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"6,6,8,11,13,16,18");
 8010718:	687b      	ldr	r3, [r7, #4]
 801071a:	3304      	adds	r3, #4
 801071c:	4a50      	ldr	r2, [pc, #320]	; (8010860 <problem_fetch+0xf19c>)
 801071e:	461d      	mov	r5, r3
 8010720:	4614      	mov	r4, r2
 8010722:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8010724:	6028      	str	r0, [r5, #0]
 8010726:	6069      	str	r1, [r5, #4]
 8010728:	60aa      	str	r2, [r5, #8]
 801072a:	60eb      	str	r3, [r5, #12]
 801072c:	8823      	ldrh	r3, [r4, #0]
 801072e:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,s,d,d,d,d,e");
 8010730:	687b      	ldr	r3, [r7, #4]
 8010732:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8010736:	4a3f      	ldr	r2, [pc, #252]	; (8010834 <problem_fetch+0xf170>)
 8010738:	461c      	mov	r4, r3
 801073a:	4613      	mov	r3, r2
 801073c:	cb07      	ldmia	r3!, {r0, r1, r2}
 801073e:	6020      	str	r0, [r4, #0]
 8010740:	6061      	str	r1, [r4, #4]
 8010742:	60a2      	str	r2, [r4, #8]
 8010744:	881b      	ldrh	r3, [r3, #0]
 8010746:	81a3      	strh	r3, [r4, #12]
			break;
 8010748:	f00b beec 	b.w	801c524 <problem_fetch+0x1ae60>
		case 441 :
			strcpy(p->name,"DEFYING GRAVITY");
 801074c:	687b      	ldr	r3, [r7, #4]
 801074e:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8010752:	4a44      	ldr	r2, [pc, #272]	; (8010864 <problem_fetch+0xf1a0>)
 8010754:	461c      	mov	r4, r3
 8010756:	4615      	mov	r5, r2
 8010758:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801075a:	6020      	str	r0, [r4, #0]
 801075c:	6061      	str	r1, [r4, #4]
 801075e:	60a2      	str	r2, [r4, #8]
 8010760:	60e3      	str	r3, [r4, #12]
			strcpy(p->grade,"6C+");
 8010762:	687b      	ldr	r3, [r7, #4]
 8010764:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8010768:	4a3f      	ldr	r2, [pc, #252]	; (8010868 <problem_fetch+0xf1a4>)
 801076a:	6810      	ldr	r0, [r2, #0]
 801076c:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 801076e:	687b      	ldr	r3, [r7, #4]
 8010770:	2206      	movs	r2, #6
 8010772:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,I,F,H,E,D");
 8010774:	687b      	ldr	r3, [r7, #4]
 8010776:	33a4      	adds	r3, #164	; 0xa4
 8010778:	4a3c      	ldr	r2, [pc, #240]	; (801086c <problem_fetch+0xf1a8>)
 801077a:	461c      	mov	r4, r3
 801077c:	4613      	mov	r3, r2
 801077e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8010780:	6020      	str	r0, [r4, #0]
 8010782:	6061      	str	r1, [r4, #4]
 8010784:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,10,13,16,8,18");
 8010786:	687b      	ldr	r3, [r7, #4]
 8010788:	3304      	adds	r3, #4
 801078a:	4a39      	ldr	r2, [pc, #228]	; (8010870 <problem_fetch+0xf1ac>)
 801078c:	461c      	mov	r4, r3
 801078e:	4615      	mov	r5, r2
 8010790:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010792:	6020      	str	r0, [r4, #0]
 8010794:	6061      	str	r1, [r4, #4]
 8010796:	60a2      	str	r2, [r4, #8]
 8010798:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 801079a:	687b      	ldr	r3, [r7, #4]
 801079c:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 80107a0:	4a34      	ldr	r2, [pc, #208]	; (8010874 <problem_fetch+0xf1b0>)
 80107a2:	461c      	mov	r4, r3
 80107a4:	4613      	mov	r3, r2
 80107a6:	cb07      	ldmia	r3!, {r0, r1, r2}
 80107a8:	6020      	str	r0, [r4, #0]
 80107aa:	6061      	str	r1, [r4, #4]
 80107ac:	60a2      	str	r2, [r4, #8]
			break;
 80107ae:	f00b beb9 	b.w	801c524 <problem_fetch+0x1ae60>
		case 442 :
			strcpy(p->name,"BIG PAW");
 80107b2:	687b      	ldr	r3, [r7, #4]
 80107b4:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80107b8:	492f      	ldr	r1, [pc, #188]	; (8010878 <problem_fetch+0xf1b4>)
 80107ba:	461a      	mov	r2, r3
 80107bc:	460b      	mov	r3, r1
 80107be:	cb03      	ldmia	r3!, {r0, r1}
 80107c0:	6010      	str	r0, [r2, #0]
 80107c2:	6051      	str	r1, [r2, #4]
			strcpy(p->grade,"7B");
 80107c4:	687b      	ldr	r3, [r7, #4]
 80107c6:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80107ca:	4a2c      	ldr	r2, [pc, #176]	; (801087c <problem_fetch+0xf1b8>)
 80107cc:	8811      	ldrh	r1, [r2, #0]
 80107ce:	7892      	ldrb	r2, [r2, #2]
 80107d0:	8019      	strh	r1, [r3, #0]
 80107d2:	709a      	strb	r2, [r3, #2]
			p->moveSize = 7;
 80107d4:	687b      	ldr	r3, [r7, #4]
 80107d6:	2207      	movs	r2, #7
 80107d8:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"E,C,I,H,K,E,I");
 80107da:	687b      	ldr	r3, [r7, #4]
 80107dc:	33a4      	adds	r3, #164	; 0xa4
 80107de:	4a28      	ldr	r2, [pc, #160]	; (8010880 <problem_fetch+0xf1bc>)
 80107e0:	461c      	mov	r4, r3
 80107e2:	4613      	mov	r3, r2
 80107e4:	cb07      	ldmia	r3!, {r0, r1, r2}
 80107e6:	6020      	str	r0, [r4, #0]
 80107e8:	6061      	str	r1, [r4, #4]
 80107ea:	60a2      	str	r2, [r4, #8]
 80107ec:	881b      	ldrh	r3, [r3, #0]
 80107ee:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"6,5,9,12,16,9,18");
 80107f0:	687b      	ldr	r3, [r7, #4]
 80107f2:	3304      	adds	r3, #4
 80107f4:	4a23      	ldr	r2, [pc, #140]	; (8010884 <problem_fetch+0xf1c0>)
 80107f6:	461d      	mov	r5, r3
 80107f8:	4614      	mov	r4, r2
 80107fa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80107fc:	6028      	str	r0, [r5, #0]
 80107fe:	6069      	str	r1, [r5, #4]
 8010800:	60aa      	str	r2, [r5, #8]
 8010802:	60eb      	str	r3, [r5, #12]
 8010804:	7823      	ldrb	r3, [r4, #0]
 8010806:	742b      	strb	r3, [r5, #16]
			strcpy(p->startFinish,"s,s,d,d,d,d,e");
 8010808:	687b      	ldr	r3, [r7, #4]
 801080a:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 801080e:	4a09      	ldr	r2, [pc, #36]	; (8010834 <problem_fetch+0xf170>)
 8010810:	461c      	mov	r4, r3
 8010812:	4613      	mov	r3, r2
 8010814:	cb07      	ldmia	r3!, {r0, r1, r2}
 8010816:	6020      	str	r0, [r4, #0]
 8010818:	6061      	str	r1, [r4, #4]
 801081a:	60a2      	str	r2, [r4, #8]
 801081c:	881b      	ldrh	r3, [r3, #0]
 801081e:	81a3      	strh	r3, [r4, #12]
			break;
 8010820:	f00b be80 	b.w	801c524 <problem_fetch+0x1ae60>
 8010824:	08028c78 	.word	0x08028c78
 8010828:	08023854 	.word	0x08023854
 801082c:	08028c88 	.word	0x08028c88
 8010830:	08028c98 	.word	0x08028c98
 8010834:	080238cc 	.word	0x080238cc
 8010838:	08028cac 	.word	0x08028cac
 801083c:	08023920 	.word	0x08023920
 8010840:	08028cbc 	.word	0x08028cbc
 8010844:	08028ccc 	.word	0x08028ccc
 8010848:	08028ce0 	.word	0x08028ce0
 801084c:	08028cf0 	.word	0x08028cf0
 8010850:	08028d00 	.word	0x08028d00
 8010854:	08023a64 	.word	0x08023a64
 8010858:	08028d18 	.word	0x08028d18
 801085c:	08028d28 	.word	0x08028d28
 8010860:	08028d38 	.word	0x08028d38
 8010864:	08028d4c 	.word	0x08028d4c
 8010868:	080238ec 	.word	0x080238ec
 801086c:	08028d5c 	.word	0x08028d5c
 8010870:	08028d68 	.word	0x08028d68
 8010874:	08023bf0 	.word	0x08023bf0
 8010878:	08028d78 	.word	0x08028d78
 801087c:	08023f4c 	.word	0x08023f4c
 8010880:	08028d80 	.word	0x08028d80
 8010884:	08028d90 	.word	0x08028d90
		case 443 :
			strcpy(p->name,"UGLY LITTLE PROBLEM");
 8010888:	687b      	ldr	r3, [r7, #4]
 801088a:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801088e:	4aaa      	ldr	r2, [pc, #680]	; (8010b38 <problem_fetch+0xf474>)
 8010890:	461d      	mov	r5, r3
 8010892:	4614      	mov	r4, r2
 8010894:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8010896:	6028      	str	r0, [r5, #0]
 8010898:	6069      	str	r1, [r5, #4]
 801089a:	60aa      	str	r2, [r5, #8]
 801089c:	60eb      	str	r3, [r5, #12]
 801089e:	6820      	ldr	r0, [r4, #0]
 80108a0:	6128      	str	r0, [r5, #16]
			strcpy(p->grade,"7A");
 80108a2:	687b      	ldr	r3, [r7, #4]
 80108a4:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80108a8:	4aa4      	ldr	r2, [pc, #656]	; (8010b3c <problem_fetch+0xf478>)
 80108aa:	8811      	ldrh	r1, [r2, #0]
 80108ac:	7892      	ldrb	r2, [r2, #2]
 80108ae:	8019      	strh	r1, [r3, #0]
 80108b0:	709a      	strb	r2, [r3, #2]
			p->moveSize = 5;
 80108b2:	687b      	ldr	r3, [r7, #4]
 80108b4:	2205      	movs	r2, #5
 80108b6:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"C,D,B,B,A");
 80108b8:	687b      	ldr	r3, [r7, #4]
 80108ba:	33a4      	adds	r3, #164	; 0xa4
 80108bc:	49a0      	ldr	r1, [pc, #640]	; (8010b40 <problem_fetch+0xf47c>)
 80108be:	461a      	mov	r2, r3
 80108c0:	460b      	mov	r3, r1
 80108c2:	cb03      	ldmia	r3!, {r0, r1}
 80108c4:	6010      	str	r0, [r2, #0]
 80108c6:	6051      	str	r1, [r2, #4]
 80108c8:	881b      	ldrh	r3, [r3, #0]
 80108ca:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"5,7,10,15,18");
 80108cc:	687b      	ldr	r3, [r7, #4]
 80108ce:	3304      	adds	r3, #4
 80108d0:	4a9c      	ldr	r2, [pc, #624]	; (8010b44 <problem_fetch+0xf480>)
 80108d2:	461c      	mov	r4, r3
 80108d4:	4613      	mov	r3, r2
 80108d6:	cb07      	ldmia	r3!, {r0, r1, r2}
 80108d8:	6020      	str	r0, [r4, #0]
 80108da:	6061      	str	r1, [r4, #4]
 80108dc:	60a2      	str	r2, [r4, #8]
 80108de:	781b      	ldrb	r3, [r3, #0]
 80108e0:	7323      	strb	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,e");
 80108e2:	687b      	ldr	r3, [r7, #4]
 80108e4:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 80108e8:	4997      	ldr	r1, [pc, #604]	; (8010b48 <problem_fetch+0xf484>)
 80108ea:	461a      	mov	r2, r3
 80108ec:	460b      	mov	r3, r1
 80108ee:	cb03      	ldmia	r3!, {r0, r1}
 80108f0:	6010      	str	r0, [r2, #0]
 80108f2:	6051      	str	r1, [r2, #4]
 80108f4:	881b      	ldrh	r3, [r3, #0]
 80108f6:	8113      	strh	r3, [r2, #8]
			break;
 80108f8:	f00b be14 	b.w	801c524 <problem_fetch+0x1ae60>
		case 444 :
			strcpy(p->name,"SHOULDER STRIKE");
 80108fc:	687b      	ldr	r3, [r7, #4]
 80108fe:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8010902:	4a92      	ldr	r2, [pc, #584]	; (8010b4c <problem_fetch+0xf488>)
 8010904:	461c      	mov	r4, r3
 8010906:	4615      	mov	r5, r2
 8010908:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801090a:	6020      	str	r0, [r4, #0]
 801090c:	6061      	str	r1, [r4, #4]
 801090e:	60a2      	str	r2, [r4, #8]
 8010910:	60e3      	str	r3, [r4, #12]
			strcpy(p->grade,"7B");
 8010912:	687b      	ldr	r3, [r7, #4]
 8010914:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8010918:	4a8d      	ldr	r2, [pc, #564]	; (8010b50 <problem_fetch+0xf48c>)
 801091a:	8811      	ldrh	r1, [r2, #0]
 801091c:	7892      	ldrb	r2, [r2, #2]
 801091e:	8019      	strh	r1, [r3, #0]
 8010920:	709a      	strb	r2, [r3, #2]
			p->moveSize = 7;
 8010922:	687b      	ldr	r3, [r7, #4]
 8010924:	2207      	movs	r2, #7
 8010926:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,E,H,G,H,I,I");
 8010928:	687b      	ldr	r3, [r7, #4]
 801092a:	33a4      	adds	r3, #164	; 0xa4
 801092c:	4a89      	ldr	r2, [pc, #548]	; (8010b54 <problem_fetch+0xf490>)
 801092e:	461c      	mov	r4, r3
 8010930:	4613      	mov	r3, r2
 8010932:	cb07      	ldmia	r3!, {r0, r1, r2}
 8010934:	6020      	str	r0, [r4, #0]
 8010936:	6061      	str	r1, [r4, #4]
 8010938:	60a2      	str	r2, [r4, #8]
 801093a:	881b      	ldrh	r3, [r3, #0]
 801093c:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,9,12,15,5,7,18");
 801093e:	687b      	ldr	r3, [r7, #4]
 8010940:	3304      	adds	r3, #4
 8010942:	4a85      	ldr	r2, [pc, #532]	; (8010b58 <problem_fetch+0xf494>)
 8010944:	461d      	mov	r5, r3
 8010946:	4614      	mov	r4, r2
 8010948:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801094a:	6028      	str	r0, [r5, #0]
 801094c:	6069      	str	r1, [r5, #4]
 801094e:	60aa      	str	r2, [r5, #8]
 8010950:	60eb      	str	r3, [r5, #12]
 8010952:	7823      	ldrb	r3, [r4, #0]
 8010954:	742b      	strb	r3, [r5, #16]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 8010956:	687b      	ldr	r3, [r7, #4]
 8010958:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 801095c:	4a7f      	ldr	r2, [pc, #508]	; (8010b5c <problem_fetch+0xf498>)
 801095e:	461c      	mov	r4, r3
 8010960:	4613      	mov	r3, r2
 8010962:	cb07      	ldmia	r3!, {r0, r1, r2}
 8010964:	6020      	str	r0, [r4, #0]
 8010966:	6061      	str	r1, [r4, #4]
 8010968:	60a2      	str	r2, [r4, #8]
 801096a:	881b      	ldrh	r3, [r3, #0]
 801096c:	81a3      	strh	r3, [r4, #12]
			break;
 801096e:	f00b bdd9 	b.w	801c524 <problem_fetch+0x1ae60>
		case 445 :
			strcpy(p->name,"CRUXY E9");
 8010972:	687b      	ldr	r3, [r7, #4]
 8010974:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8010978:	4979      	ldr	r1, [pc, #484]	; (8010b60 <problem_fetch+0xf49c>)
 801097a:	461a      	mov	r2, r3
 801097c:	460b      	mov	r3, r1
 801097e:	cb03      	ldmia	r3!, {r0, r1}
 8010980:	6010      	str	r0, [r2, #0]
 8010982:	6051      	str	r1, [r2, #4]
 8010984:	781b      	ldrb	r3, [r3, #0]
 8010986:	7213      	strb	r3, [r2, #8]
			strcpy(p->grade,"7B");
 8010988:	687b      	ldr	r3, [r7, #4]
 801098a:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801098e:	4a70      	ldr	r2, [pc, #448]	; (8010b50 <problem_fetch+0xf48c>)
 8010990:	8811      	ldrh	r1, [r2, #0]
 8010992:	7892      	ldrb	r2, [r2, #2]
 8010994:	8019      	strh	r1, [r3, #0]
 8010996:	709a      	strb	r2, [r3, #2]
			p->moveSize = 7;
 8010998:	687b      	ldr	r3, [r7, #4]
 801099a:	2207      	movs	r2, #7
 801099c:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,I,E,I,E,B,A");
 801099e:	687b      	ldr	r3, [r7, #4]
 80109a0:	33a4      	adds	r3, #164	; 0xa4
 80109a2:	4a70      	ldr	r2, [pc, #448]	; (8010b64 <problem_fetch+0xf4a0>)
 80109a4:	461c      	mov	r4, r3
 80109a6:	4613      	mov	r3, r2
 80109a8:	cb07      	ldmia	r3!, {r0, r1, r2}
 80109aa:	6020      	str	r0, [r4, #0]
 80109ac:	6061      	str	r1, [r4, #4]
 80109ae:	60a2      	str	r2, [r4, #8]
 80109b0:	881b      	ldrh	r3, [r3, #0]
 80109b2:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,9,9,7,12,15,18");
 80109b4:	687b      	ldr	r3, [r7, #4]
 80109b6:	3304      	adds	r3, #4
 80109b8:	4a6b      	ldr	r2, [pc, #428]	; (8010b68 <problem_fetch+0xf4a4>)
 80109ba:	461d      	mov	r5, r3
 80109bc:	4614      	mov	r4, r2
 80109be:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80109c0:	6028      	str	r0, [r5, #0]
 80109c2:	6069      	str	r1, [r5, #4]
 80109c4:	60aa      	str	r2, [r5, #8]
 80109c6:	60eb      	str	r3, [r5, #12]
 80109c8:	7823      	ldrb	r3, [r4, #0]
 80109ca:	742b      	strb	r3, [r5, #16]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 80109cc:	687b      	ldr	r3, [r7, #4]
 80109ce:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 80109d2:	4a62      	ldr	r2, [pc, #392]	; (8010b5c <problem_fetch+0xf498>)
 80109d4:	461c      	mov	r4, r3
 80109d6:	4613      	mov	r3, r2
 80109d8:	cb07      	ldmia	r3!, {r0, r1, r2}
 80109da:	6020      	str	r0, [r4, #0]
 80109dc:	6061      	str	r1, [r4, #4]
 80109de:	60a2      	str	r2, [r4, #8]
 80109e0:	881b      	ldrh	r3, [r3, #0]
 80109e2:	81a3      	strh	r3, [r4, #12]
			break;
 80109e4:	f00b bd9e 	b.w	801c524 <problem_fetch+0x1ae60>
		case 446 :
			strcpy(p->name,"RECOVERY DRINK");
 80109e8:	687b      	ldr	r3, [r7, #4]
 80109ea:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80109ee:	4a5f      	ldr	r2, [pc, #380]	; (8010b6c <problem_fetch+0xf4a8>)
 80109f0:	461c      	mov	r4, r3
 80109f2:	4613      	mov	r3, r2
 80109f4:	cb07      	ldmia	r3!, {r0, r1, r2}
 80109f6:	6020      	str	r0, [r4, #0]
 80109f8:	6061      	str	r1, [r4, #4]
 80109fa:	60a2      	str	r2, [r4, #8]
 80109fc:	881a      	ldrh	r2, [r3, #0]
 80109fe:	789b      	ldrb	r3, [r3, #2]
 8010a00:	81a2      	strh	r2, [r4, #12]
 8010a02:	73a3      	strb	r3, [r4, #14]
			strcpy(p->grade,"7B+");
 8010a04:	687b      	ldr	r3, [r7, #4]
 8010a06:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8010a0a:	4a59      	ldr	r2, [pc, #356]	; (8010b70 <problem_fetch+0xf4ac>)
 8010a0c:	6810      	ldr	r0, [r2, #0]
 8010a0e:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 8010a10:	687b      	ldr	r3, [r7, #4]
 8010a12:	2206      	movs	r2, #6
 8010a14:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"C,E,D,H,I,I");
 8010a16:	687b      	ldr	r3, [r7, #4]
 8010a18:	33a4      	adds	r3, #164	; 0xa4
 8010a1a:	4a56      	ldr	r2, [pc, #344]	; (8010b74 <problem_fetch+0xf4b0>)
 8010a1c:	461c      	mov	r4, r3
 8010a1e:	4613      	mov	r3, r2
 8010a20:	cb07      	ldmia	r3!, {r0, r1, r2}
 8010a22:	6020      	str	r0, [r4, #0]
 8010a24:	6061      	str	r1, [r4, #4]
 8010a26:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,9,11,12,15,18");
 8010a28:	687b      	ldr	r3, [r7, #4]
 8010a2a:	3304      	adds	r3, #4
 8010a2c:	4a52      	ldr	r2, [pc, #328]	; (8010b78 <problem_fetch+0xf4b4>)
 8010a2e:	461c      	mov	r4, r3
 8010a30:	4615      	mov	r5, r2
 8010a32:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010a34:	6020      	str	r0, [r4, #0]
 8010a36:	6061      	str	r1, [r4, #4]
 8010a38:	60a2      	str	r2, [r4, #8]
 8010a3a:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 8010a3c:	687b      	ldr	r3, [r7, #4]
 8010a3e:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8010a42:	4a4e      	ldr	r2, [pc, #312]	; (8010b7c <problem_fetch+0xf4b8>)
 8010a44:	461c      	mov	r4, r3
 8010a46:	4613      	mov	r3, r2
 8010a48:	cb07      	ldmia	r3!, {r0, r1, r2}
 8010a4a:	6020      	str	r0, [r4, #0]
 8010a4c:	6061      	str	r1, [r4, #4]
 8010a4e:	60a2      	str	r2, [r4, #8]
			break;
 8010a50:	f00b bd68 	b.w	801c524 <problem_fetch+0x1ae60>
		case 447 :
			strcpy(p->name,"PACHIMAMA");
 8010a54:	687b      	ldr	r3, [r7, #4]
 8010a56:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8010a5a:	4949      	ldr	r1, [pc, #292]	; (8010b80 <problem_fetch+0xf4bc>)
 8010a5c:	461a      	mov	r2, r3
 8010a5e:	460b      	mov	r3, r1
 8010a60:	cb03      	ldmia	r3!, {r0, r1}
 8010a62:	6010      	str	r0, [r2, #0]
 8010a64:	6051      	str	r1, [r2, #4]
 8010a66:	881b      	ldrh	r3, [r3, #0]
 8010a68:	8113      	strh	r3, [r2, #8]
			strcpy(p->grade,"7A");
 8010a6a:	687b      	ldr	r3, [r7, #4]
 8010a6c:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8010a70:	4a32      	ldr	r2, [pc, #200]	; (8010b3c <problem_fetch+0xf478>)
 8010a72:	8811      	ldrh	r1, [r2, #0]
 8010a74:	7892      	ldrb	r2, [r2, #2]
 8010a76:	8019      	strh	r1, [r3, #0]
 8010a78:	709a      	strb	r2, [r3, #2]
			p->moveSize = 6;
 8010a7a:	687b      	ldr	r3, [r7, #4]
 8010a7c:	2206      	movs	r2, #6
 8010a7e:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,J,K,H,K,I");
 8010a80:	687b      	ldr	r3, [r7, #4]
 8010a82:	33a4      	adds	r3, #164	; 0xa4
 8010a84:	4a3f      	ldr	r2, [pc, #252]	; (8010b84 <problem_fetch+0xf4c0>)
 8010a86:	461c      	mov	r4, r3
 8010a88:	4613      	mov	r3, r2
 8010a8a:	cb07      	ldmia	r3!, {r0, r1, r2}
 8010a8c:	6020      	str	r0, [r4, #0]
 8010a8e:	6061      	str	r1, [r4, #4]
 8010a90:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"6,5,9,12,14,18");
 8010a92:	687b      	ldr	r3, [r7, #4]
 8010a94:	3304      	adds	r3, #4
 8010a96:	4a3c      	ldr	r2, [pc, #240]	; (8010b88 <problem_fetch+0xf4c4>)
 8010a98:	461c      	mov	r4, r3
 8010a9a:	4613      	mov	r3, r2
 8010a9c:	cb07      	ldmia	r3!, {r0, r1, r2}
 8010a9e:	6020      	str	r0, [r4, #0]
 8010aa0:	6061      	str	r1, [r4, #4]
 8010aa2:	60a2      	str	r2, [r4, #8]
 8010aa4:	881a      	ldrh	r2, [r3, #0]
 8010aa6:	789b      	ldrb	r3, [r3, #2]
 8010aa8:	81a2      	strh	r2, [r4, #12]
 8010aaa:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish,"s,s,d,d,d,e");
 8010aac:	687b      	ldr	r3, [r7, #4]
 8010aae:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8010ab2:	4a36      	ldr	r2, [pc, #216]	; (8010b8c <problem_fetch+0xf4c8>)
 8010ab4:	461c      	mov	r4, r3
 8010ab6:	4613      	mov	r3, r2
 8010ab8:	cb07      	ldmia	r3!, {r0, r1, r2}
 8010aba:	6020      	str	r0, [r4, #0]
 8010abc:	6061      	str	r1, [r4, #4]
 8010abe:	60a2      	str	r2, [r4, #8]
			break;
 8010ac0:	f00b bd30 	b.w	801c524 <problem_fetch+0x1ae60>
		case 448 :
			strcpy(p->name,"CRAZYCRACKER");
 8010ac4:	687b      	ldr	r3, [r7, #4]
 8010ac6:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8010aca:	4a31      	ldr	r2, [pc, #196]	; (8010b90 <problem_fetch+0xf4cc>)
 8010acc:	461c      	mov	r4, r3
 8010ace:	4613      	mov	r3, r2
 8010ad0:	cb07      	ldmia	r3!, {r0, r1, r2}
 8010ad2:	6020      	str	r0, [r4, #0]
 8010ad4:	6061      	str	r1, [r4, #4]
 8010ad6:	60a2      	str	r2, [r4, #8]
 8010ad8:	781b      	ldrb	r3, [r3, #0]
 8010ada:	7323      	strb	r3, [r4, #12]
			strcpy(p->grade,"7A+");
 8010adc:	687b      	ldr	r3, [r7, #4]
 8010ade:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8010ae2:	4a2c      	ldr	r2, [pc, #176]	; (8010b94 <problem_fetch+0xf4d0>)
 8010ae4:	6810      	ldr	r0, [r2, #0]
 8010ae6:	6018      	str	r0, [r3, #0]
			p->moveSize = 8;
 8010ae8:	687b      	ldr	r3, [r7, #4]
 8010aea:	2208      	movs	r2, #8
 8010aec:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"C,E,I,G,J,H,G,D");
 8010aee:	687b      	ldr	r3, [r7, #4]
 8010af0:	33a4      	adds	r3, #164	; 0xa4
 8010af2:	4a29      	ldr	r2, [pc, #164]	; (8010b98 <problem_fetch+0xf4d4>)
 8010af4:	461c      	mov	r4, r3
 8010af6:	4615      	mov	r5, r2
 8010af8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010afa:	6020      	str	r0, [r4, #0]
 8010afc:	6061      	str	r1, [r4, #4]
 8010afe:	60a2      	str	r2, [r4, #8]
 8010b00:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,6,7,10,12,16,17,18");
 8010b02:	687b      	ldr	r3, [r7, #4]
 8010b04:	3304      	adds	r3, #4
 8010b06:	4a25      	ldr	r2, [pc, #148]	; (8010b9c <problem_fetch+0xf4d8>)
 8010b08:	461d      	mov	r5, r3
 8010b0a:	4614      	mov	r4, r2
 8010b0c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8010b0e:	6028      	str	r0, [r5, #0]
 8010b10:	6069      	str	r1, [r5, #4]
 8010b12:	60aa      	str	r2, [r5, #8]
 8010b14:	60eb      	str	r3, [r5, #12]
 8010b16:	6820      	ldr	r0, [r4, #0]
 8010b18:	6128      	str	r0, [r5, #16]
 8010b1a:	7923      	ldrb	r3, [r4, #4]
 8010b1c:	752b      	strb	r3, [r5, #20]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,e");
 8010b1e:	687b      	ldr	r3, [r7, #4]
 8010b20:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8010b24:	4a1e      	ldr	r2, [pc, #120]	; (8010ba0 <problem_fetch+0xf4dc>)
 8010b26:	461c      	mov	r4, r3
 8010b28:	4615      	mov	r5, r2
 8010b2a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010b2c:	6020      	str	r0, [r4, #0]
 8010b2e:	6061      	str	r1, [r4, #4]
 8010b30:	60a2      	str	r2, [r4, #8]
 8010b32:	60e3      	str	r3, [r4, #12]
			break;
 8010b34:	f00b bcf6 	b.w	801c524 <problem_fetch+0x1ae60>
 8010b38:	08028da4 	.word	0x08028da4
 8010b3c:	08023814 	.word	0x08023814
 8010b40:	08028db8 	.word	0x08028db8
 8010b44:	08028dc4 	.word	0x08028dc4
 8010b48:	08023d20 	.word	0x08023d20
 8010b4c:	08028dd4 	.word	0x08028dd4
 8010b50:	08023f4c 	.word	0x08023f4c
 8010b54:	08028de4 	.word	0x08028de4
 8010b58:	08028df4 	.word	0x08028df4
 8010b5c:	080239dc 	.word	0x080239dc
 8010b60:	08028e08 	.word	0x08028e08
 8010b64:	08028e14 	.word	0x08028e14
 8010b68:	08028e24 	.word	0x08028e24
 8010b6c:	08028e38 	.word	0x08028e38
 8010b70:	08023990 	.word	0x08023990
 8010b74:	08028e48 	.word	0x08028e48
 8010b78:	08028e54 	.word	0x08028e54
 8010b7c:	08023bf0 	.word	0x08023bf0
 8010b80:	08028e64 	.word	0x08028e64
 8010b84:	08028e70 	.word	0x08028e70
 8010b88:	08028a1c 	.word	0x08028a1c
 8010b8c:	08023834 	.word	0x08023834
 8010b90:	08028e7c 	.word	0x08028e7c
 8010b94:	080239f4 	.word	0x080239f4
 8010b98:	08028e8c 	.word	0x08028e8c
 8010b9c:	080288f8 	.word	0x080288f8
 8010ba0:	08023978 	.word	0x08023978
		case 449 :
			strcpy(p->name,"CLIMBING ON BLANK");
 8010ba4:	687b      	ldr	r3, [r7, #4]
 8010ba6:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8010baa:	4aaa      	ldr	r2, [pc, #680]	; (8010e54 <problem_fetch+0xf790>)
 8010bac:	461d      	mov	r5, r3
 8010bae:	4614      	mov	r4, r2
 8010bb0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8010bb2:	6028      	str	r0, [r5, #0]
 8010bb4:	6069      	str	r1, [r5, #4]
 8010bb6:	60aa      	str	r2, [r5, #8]
 8010bb8:	60eb      	str	r3, [r5, #12]
 8010bba:	8823      	ldrh	r3, [r4, #0]
 8010bbc:	822b      	strh	r3, [r5, #16]
			strcpy(p->grade,"7A");
 8010bbe:	687b      	ldr	r3, [r7, #4]
 8010bc0:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8010bc4:	4aa4      	ldr	r2, [pc, #656]	; (8010e58 <problem_fetch+0xf794>)
 8010bc6:	8811      	ldrh	r1, [r2, #0]
 8010bc8:	7892      	ldrb	r2, [r2, #2]
 8010bca:	8019      	strh	r1, [r3, #0]
 8010bcc:	709a      	strb	r2, [r3, #2]
			p->moveSize = 6;
 8010bce:	687b      	ldr	r3, [r7, #4]
 8010bd0:	2206      	movs	r2, #6
 8010bd2:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"C,D,A,E,E,I");
 8010bd4:	687b      	ldr	r3, [r7, #4]
 8010bd6:	33a4      	adds	r3, #164	; 0xa4
 8010bd8:	4aa0      	ldr	r2, [pc, #640]	; (8010e5c <problem_fetch+0xf798>)
 8010bda:	461c      	mov	r4, r3
 8010bdc:	4613      	mov	r3, r2
 8010bde:	cb07      	ldmia	r3!, {r0, r1, r2}
 8010be0:	6020      	str	r0, [r4, #0]
 8010be2:	6061      	str	r1, [r4, #4]
 8010be4:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,7,9,12,16,18");
 8010be6:	687b      	ldr	r3, [r7, #4]
 8010be8:	3304      	adds	r3, #4
 8010bea:	4a9d      	ldr	r2, [pc, #628]	; (8010e60 <problem_fetch+0xf79c>)
 8010bec:	461c      	mov	r4, r3
 8010bee:	4613      	mov	r3, r2
 8010bf0:	cb07      	ldmia	r3!, {r0, r1, r2}
 8010bf2:	6020      	str	r0, [r4, #0]
 8010bf4:	6061      	str	r1, [r4, #4]
 8010bf6:	60a2      	str	r2, [r4, #8]
 8010bf8:	881a      	ldrh	r2, [r3, #0]
 8010bfa:	789b      	ldrb	r3, [r3, #2]
 8010bfc:	81a2      	strh	r2, [r4, #12]
 8010bfe:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 8010c00:	687b      	ldr	r3, [r7, #4]
 8010c02:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8010c06:	4a97      	ldr	r2, [pc, #604]	; (8010e64 <problem_fetch+0xf7a0>)
 8010c08:	461c      	mov	r4, r3
 8010c0a:	4613      	mov	r3, r2
 8010c0c:	cb07      	ldmia	r3!, {r0, r1, r2}
 8010c0e:	6020      	str	r0, [r4, #0]
 8010c10:	6061      	str	r1, [r4, #4]
 8010c12:	60a2      	str	r2, [r4, #8]
			break;
 8010c14:	f00b bc86 	b.w	801c524 <problem_fetch+0x1ae60>
		case 450 :
			strcpy(p->name,"PHSYCHO");
 8010c18:	687b      	ldr	r3, [r7, #4]
 8010c1a:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8010c1e:	4992      	ldr	r1, [pc, #584]	; (8010e68 <problem_fetch+0xf7a4>)
 8010c20:	461a      	mov	r2, r3
 8010c22:	460b      	mov	r3, r1
 8010c24:	cb03      	ldmia	r3!, {r0, r1}
 8010c26:	6010      	str	r0, [r2, #0]
 8010c28:	6051      	str	r1, [r2, #4]
			strcpy(p->grade,"7A+");
 8010c2a:	687b      	ldr	r3, [r7, #4]
 8010c2c:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8010c30:	4a8e      	ldr	r2, [pc, #568]	; (8010e6c <problem_fetch+0xf7a8>)
 8010c32:	6810      	ldr	r0, [r2, #0]
 8010c34:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 8010c36:	687b      	ldr	r3, [r7, #4]
 8010c38:	2207      	movs	r2, #7
 8010c3a:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"B,E,F,G,D,G,D");
 8010c3c:	687b      	ldr	r3, [r7, #4]
 8010c3e:	33a4      	adds	r3, #164	; 0xa4
 8010c40:	4a8b      	ldr	r2, [pc, #556]	; (8010e70 <problem_fetch+0xf7ac>)
 8010c42:	461c      	mov	r4, r3
 8010c44:	4613      	mov	r3, r2
 8010c46:	cb07      	ldmia	r3!, {r0, r1, r2}
 8010c48:	6020      	str	r0, [r4, #0]
 8010c4a:	6061      	str	r1, [r4, #4]
 8010c4c:	60a2      	str	r2, [r4, #8]
 8010c4e:	881b      	ldrh	r3, [r3, #0]
 8010c50:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"6,6,13,17,7,10,18");
 8010c52:	687b      	ldr	r3, [r7, #4]
 8010c54:	3304      	adds	r3, #4
 8010c56:	4a87      	ldr	r2, [pc, #540]	; (8010e74 <problem_fetch+0xf7b0>)
 8010c58:	461d      	mov	r5, r3
 8010c5a:	4614      	mov	r4, r2
 8010c5c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8010c5e:	6028      	str	r0, [r5, #0]
 8010c60:	6069      	str	r1, [r5, #4]
 8010c62:	60aa      	str	r2, [r5, #8]
 8010c64:	60eb      	str	r3, [r5, #12]
 8010c66:	8823      	ldrh	r3, [r4, #0]
 8010c68:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,s,d,d,d,d,e");
 8010c6a:	687b      	ldr	r3, [r7, #4]
 8010c6c:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8010c70:	4a81      	ldr	r2, [pc, #516]	; (8010e78 <problem_fetch+0xf7b4>)
 8010c72:	461c      	mov	r4, r3
 8010c74:	4613      	mov	r3, r2
 8010c76:	cb07      	ldmia	r3!, {r0, r1, r2}
 8010c78:	6020      	str	r0, [r4, #0]
 8010c7a:	6061      	str	r1, [r4, #4]
 8010c7c:	60a2      	str	r2, [r4, #8]
 8010c7e:	881b      	ldrh	r3, [r3, #0]
 8010c80:	81a3      	strh	r3, [r4, #12]
			break;
 8010c82:	f00b bc4f 	b.w	801c524 <problem_fetch+0x1ae60>
		case 451 :
			strcpy(p->name,"THE UNREAL THING");
 8010c86:	687b      	ldr	r3, [r7, #4]
 8010c88:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8010c8c:	4a7b      	ldr	r2, [pc, #492]	; (8010e7c <problem_fetch+0xf7b8>)
 8010c8e:	461d      	mov	r5, r3
 8010c90:	4614      	mov	r4, r2
 8010c92:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8010c94:	6028      	str	r0, [r5, #0]
 8010c96:	6069      	str	r1, [r5, #4]
 8010c98:	60aa      	str	r2, [r5, #8]
 8010c9a:	60eb      	str	r3, [r5, #12]
 8010c9c:	7823      	ldrb	r3, [r4, #0]
 8010c9e:	742b      	strb	r3, [r5, #16]
			strcpy(p->grade,"6B+");
 8010ca0:	687b      	ldr	r3, [r7, #4]
 8010ca2:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8010ca6:	4a76      	ldr	r2, [pc, #472]	; (8010e80 <problem_fetch+0xf7bc>)
 8010ca8:	6810      	ldr	r0, [r2, #0]
 8010caa:	6018      	str	r0, [r3, #0]
			p->moveSize = 8;
 8010cac:	687b      	ldr	r3, [r7, #4]
 8010cae:	2208      	movs	r2, #8
 8010cb0:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,E,H,J,E,A,D,A");
 8010cb2:	687b      	ldr	r3, [r7, #4]
 8010cb4:	33a4      	adds	r3, #164	; 0xa4
 8010cb6:	4a73      	ldr	r2, [pc, #460]	; (8010e84 <problem_fetch+0xf7c0>)
 8010cb8:	461c      	mov	r4, r3
 8010cba:	4615      	mov	r5, r2
 8010cbc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010cbe:	6020      	str	r0, [r4, #0]
 8010cc0:	6061      	str	r1, [r4, #4]
 8010cc2:	60a2      	str	r2, [r4, #8]
 8010cc4:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,8,8,7,12,14,15,18");
 8010cc6:	687b      	ldr	r3, [r7, #4]
 8010cc8:	3304      	adds	r3, #4
 8010cca:	4a6f      	ldr	r2, [pc, #444]	; (8010e88 <problem_fetch+0xf7c4>)
 8010ccc:	461d      	mov	r5, r3
 8010cce:	4614      	mov	r4, r2
 8010cd0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8010cd2:	6028      	str	r0, [r5, #0]
 8010cd4:	6069      	str	r1, [r5, #4]
 8010cd6:	60aa      	str	r2, [r5, #8]
 8010cd8:	60eb      	str	r3, [r5, #12]
 8010cda:	6820      	ldr	r0, [r4, #0]
 8010cdc:	6128      	str	r0, [r5, #16]
			strcpy(p->startFinish,"s,d,d,d,d,d,d,e");
 8010cde:	687b      	ldr	r3, [r7, #4]
 8010ce0:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8010ce4:	4a69      	ldr	r2, [pc, #420]	; (8010e8c <problem_fetch+0xf7c8>)
 8010ce6:	461c      	mov	r4, r3
 8010ce8:	4615      	mov	r5, r2
 8010cea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010cec:	6020      	str	r0, [r4, #0]
 8010cee:	6061      	str	r1, [r4, #4]
 8010cf0:	60a2      	str	r2, [r4, #8]
 8010cf2:	60e3      	str	r3, [r4, #12]
			break;
 8010cf4:	f00b bc16 	b.w	801c524 <problem_fetch+0x1ae60>
		case 452 :
			strcpy(p->name,"THE NIGHTMARE");
 8010cf8:	687b      	ldr	r3, [r7, #4]
 8010cfa:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8010cfe:	4a64      	ldr	r2, [pc, #400]	; (8010e90 <problem_fetch+0xf7cc>)
 8010d00:	461c      	mov	r4, r3
 8010d02:	4613      	mov	r3, r2
 8010d04:	cb07      	ldmia	r3!, {r0, r1, r2}
 8010d06:	6020      	str	r0, [r4, #0]
 8010d08:	6061      	str	r1, [r4, #4]
 8010d0a:	60a2      	str	r2, [r4, #8]
 8010d0c:	881b      	ldrh	r3, [r3, #0]
 8010d0e:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade,"6C+");
 8010d10:	687b      	ldr	r3, [r7, #4]
 8010d12:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8010d16:	4a5f      	ldr	r2, [pc, #380]	; (8010e94 <problem_fetch+0xf7d0>)
 8010d18:	6810      	ldr	r0, [r2, #0]
 8010d1a:	6018      	str	r0, [r3, #0]
			p->moveSize = 8;
 8010d1c:	687b      	ldr	r3, [r7, #4]
 8010d1e:	2208      	movs	r2, #8
 8010d20:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,J,I,I,B,E,F,D");
 8010d22:	687b      	ldr	r3, [r7, #4]
 8010d24:	33a4      	adds	r3, #164	; 0xa4
 8010d26:	4a5c      	ldr	r2, [pc, #368]	; (8010e98 <problem_fetch+0xf7d4>)
 8010d28:	461c      	mov	r4, r3
 8010d2a:	4615      	mov	r5, r2
 8010d2c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010d2e:	6020      	str	r0, [r4, #0]
 8010d30:	6061      	str	r1, [r4, #4]
 8010d32:	60a2      	str	r2, [r4, #8]
 8010d34:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,5,7,9,15,12,11,18");
 8010d36:	687b      	ldr	r3, [r7, #4]
 8010d38:	3304      	adds	r3, #4
 8010d3a:	4a58      	ldr	r2, [pc, #352]	; (8010e9c <problem_fetch+0xf7d8>)
 8010d3c:	461d      	mov	r5, r3
 8010d3e:	4614      	mov	r4, r2
 8010d40:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8010d42:	6028      	str	r0, [r5, #0]
 8010d44:	6069      	str	r1, [r5, #4]
 8010d46:	60aa      	str	r2, [r5, #8]
 8010d48:	60eb      	str	r3, [r5, #12]
 8010d4a:	6820      	ldr	r0, [r4, #0]
 8010d4c:	6128      	str	r0, [r5, #16]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,e");
 8010d4e:	687b      	ldr	r3, [r7, #4]
 8010d50:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8010d54:	4a52      	ldr	r2, [pc, #328]	; (8010ea0 <problem_fetch+0xf7dc>)
 8010d56:	461c      	mov	r4, r3
 8010d58:	4615      	mov	r5, r2
 8010d5a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010d5c:	6020      	str	r0, [r4, #0]
 8010d5e:	6061      	str	r1, [r4, #4]
 8010d60:	60a2      	str	r2, [r4, #8]
 8010d62:	60e3      	str	r3, [r4, #12]
			break;
 8010d64:	f00b bbde 	b.w	801c524 <problem_fetch+0x1ae60>
		case 453 :
			strcpy(p->name,"THE BIG DREAM");
 8010d68:	687b      	ldr	r3, [r7, #4]
 8010d6a:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8010d6e:	4a4d      	ldr	r2, [pc, #308]	; (8010ea4 <problem_fetch+0xf7e0>)
 8010d70:	461c      	mov	r4, r3
 8010d72:	4613      	mov	r3, r2
 8010d74:	cb07      	ldmia	r3!, {r0, r1, r2}
 8010d76:	6020      	str	r0, [r4, #0]
 8010d78:	6061      	str	r1, [r4, #4]
 8010d7a:	60a2      	str	r2, [r4, #8]
 8010d7c:	881b      	ldrh	r3, [r3, #0]
 8010d7e:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade,"6C");
 8010d80:	687b      	ldr	r3, [r7, #4]
 8010d82:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8010d86:	4a48      	ldr	r2, [pc, #288]	; (8010ea8 <problem_fetch+0xf7e4>)
 8010d88:	8811      	ldrh	r1, [r2, #0]
 8010d8a:	7892      	ldrb	r2, [r2, #2]
 8010d8c:	8019      	strh	r1, [r3, #0]
 8010d8e:	709a      	strb	r2, [r3, #2]
			p->moveSize = 8;
 8010d90:	687b      	ldr	r3, [r7, #4]
 8010d92:	2208      	movs	r2, #8
 8010d94:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,G,H,C,E,F,I,I");
 8010d96:	687b      	ldr	r3, [r7, #4]
 8010d98:	33a4      	adds	r3, #164	; 0xa4
 8010d9a:	4a44      	ldr	r2, [pc, #272]	; (8010eac <problem_fetch+0xf7e8>)
 8010d9c:	461c      	mov	r4, r3
 8010d9e:	4615      	mov	r5, r2
 8010da0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010da2:	6020      	str	r0, [r4, #0]
 8010da4:	6061      	str	r1, [r4, #4]
 8010da6:	60a2      	str	r2, [r4, #8]
 8010da8:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,6,8,8,12,13,14,18");
 8010daa:	687b      	ldr	r3, [r7, #4]
 8010dac:	3304      	adds	r3, #4
 8010dae:	4a40      	ldr	r2, [pc, #256]	; (8010eb0 <problem_fetch+0xf7ec>)
 8010db0:	461d      	mov	r5, r3
 8010db2:	4614      	mov	r4, r2
 8010db4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8010db6:	6028      	str	r0, [r5, #0]
 8010db8:	6069      	str	r1, [r5, #4]
 8010dba:	60aa      	str	r2, [r5, #8]
 8010dbc:	60eb      	str	r3, [r5, #12]
 8010dbe:	6820      	ldr	r0, [r4, #0]
 8010dc0:	6128      	str	r0, [r5, #16]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,e");
 8010dc2:	687b      	ldr	r3, [r7, #4]
 8010dc4:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8010dc8:	4a35      	ldr	r2, [pc, #212]	; (8010ea0 <problem_fetch+0xf7dc>)
 8010dca:	461c      	mov	r4, r3
 8010dcc:	4615      	mov	r5, r2
 8010dce:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010dd0:	6020      	str	r0, [r4, #0]
 8010dd2:	6061      	str	r1, [r4, #4]
 8010dd4:	60a2      	str	r2, [r4, #8]
 8010dd6:	60e3      	str	r3, [r4, #12]
			break;
 8010dd8:	f00b bba4 	b.w	801c524 <problem_fetch+0x1ae60>
		case 454 :
			strcpy(p->name,"THE LAPSUS SISTER");
 8010ddc:	687b      	ldr	r3, [r7, #4]
 8010dde:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8010de2:	4a34      	ldr	r2, [pc, #208]	; (8010eb4 <problem_fetch+0xf7f0>)
 8010de4:	461d      	mov	r5, r3
 8010de6:	4614      	mov	r4, r2
 8010de8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8010dea:	6028      	str	r0, [r5, #0]
 8010dec:	6069      	str	r1, [r5, #4]
 8010dee:	60aa      	str	r2, [r5, #8]
 8010df0:	60eb      	str	r3, [r5, #12]
 8010df2:	8823      	ldrh	r3, [r4, #0]
 8010df4:	822b      	strh	r3, [r5, #16]
			strcpy(p->grade,"6B+");
 8010df6:	687b      	ldr	r3, [r7, #4]
 8010df8:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8010dfc:	4a20      	ldr	r2, [pc, #128]	; (8010e80 <problem_fetch+0xf7bc>)
 8010dfe:	6810      	ldr	r0, [r2, #0]
 8010e00:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 8010e02:	687b      	ldr	r3, [r7, #4]
 8010e04:	2207      	movs	r2, #7
 8010e06:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"B,C,B,E,B,D,D");
 8010e08:	687b      	ldr	r3, [r7, #4]
 8010e0a:	33a4      	adds	r3, #164	; 0xa4
 8010e0c:	4a2a      	ldr	r2, [pc, #168]	; (8010eb8 <problem_fetch+0xf7f4>)
 8010e0e:	461c      	mov	r4, r3
 8010e10:	4613      	mov	r3, r2
 8010e12:	cb07      	ldmia	r3!, {r0, r1, r2}
 8010e14:	6020      	str	r0, [r4, #0]
 8010e16:	6061      	str	r1, [r4, #4]
 8010e18:	60a2      	str	r2, [r4, #8]
 8010e1a:	881b      	ldrh	r3, [r3, #0]
 8010e1c:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"6,5,10,12,15,7,18");
 8010e1e:	687b      	ldr	r3, [r7, #4]
 8010e20:	3304      	adds	r3, #4
 8010e22:	4a26      	ldr	r2, [pc, #152]	; (8010ebc <problem_fetch+0xf7f8>)
 8010e24:	461d      	mov	r5, r3
 8010e26:	4614      	mov	r4, r2
 8010e28:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8010e2a:	6028      	str	r0, [r5, #0]
 8010e2c:	6069      	str	r1, [r5, #4]
 8010e2e:	60aa      	str	r2, [r5, #8]
 8010e30:	60eb      	str	r3, [r5, #12]
 8010e32:	8823      	ldrh	r3, [r4, #0]
 8010e34:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,s,d,d,d,d,e");
 8010e36:	687b      	ldr	r3, [r7, #4]
 8010e38:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8010e3c:	4a0e      	ldr	r2, [pc, #56]	; (8010e78 <problem_fetch+0xf7b4>)
 8010e3e:	461c      	mov	r4, r3
 8010e40:	4613      	mov	r3, r2
 8010e42:	cb07      	ldmia	r3!, {r0, r1, r2}
 8010e44:	6020      	str	r0, [r4, #0]
 8010e46:	6061      	str	r1, [r4, #4]
 8010e48:	60a2      	str	r2, [r4, #8]
 8010e4a:	881b      	ldrh	r3, [r3, #0]
 8010e4c:	81a3      	strh	r3, [r4, #12]
			break;
 8010e4e:	f00b bb69 	b.w	801c524 <problem_fetch+0x1ae60>
 8010e52:	bf00      	nop
 8010e54:	08028e9c 	.word	0x08028e9c
 8010e58:	08023814 	.word	0x08023814
 8010e5c:	08028eb0 	.word	0x08028eb0
 8010e60:	08028ebc 	.word	0x08028ebc
 8010e64:	08023bf0 	.word	0x08023bf0
 8010e68:	08028ecc 	.word	0x08028ecc
 8010e6c:	080239f4 	.word	0x080239f4
 8010e70:	08028ed4 	.word	0x08028ed4
 8010e74:	08028ee4 	.word	0x08028ee4
 8010e78:	080238cc 	.word	0x080238cc
 8010e7c:	08028ef8 	.word	0x08028ef8
 8010e80:	08023854 	.word	0x08023854
 8010e84:	08028f0c 	.word	0x08028f0c
 8010e88:	08028f1c 	.word	0x08028f1c
 8010e8c:	08023a64 	.word	0x08023a64
 8010e90:	08028f30 	.word	0x08028f30
 8010e94:	080238ec 	.word	0x080238ec
 8010e98:	08028f40 	.word	0x08028f40
 8010e9c:	08028f50 	.word	0x08028f50
 8010ea0:	08023978 	.word	0x08023978
 8010ea4:	08028f64 	.word	0x08028f64
 8010ea8:	08023920 	.word	0x08023920
 8010eac:	08028f74 	.word	0x08028f74
 8010eb0:	08028f84 	.word	0x08028f84
 8010eb4:	08028f98 	.word	0x08028f98
 8010eb8:	08028fac 	.word	0x08028fac
 8010ebc:	08028fbc 	.word	0x08028fbc
		case 455 :
			strcpy(p->name,"TENDON DAY");
 8010ec0:	687b      	ldr	r3, [r7, #4]
 8010ec2:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8010ec6:	49b0      	ldr	r1, [pc, #704]	; (8011188 <problem_fetch+0xfac4>)
 8010ec8:	461a      	mov	r2, r3
 8010eca:	460b      	mov	r3, r1
 8010ecc:	cb03      	ldmia	r3!, {r0, r1}
 8010ece:	6010      	str	r0, [r2, #0]
 8010ed0:	6051      	str	r1, [r2, #4]
 8010ed2:	8819      	ldrh	r1, [r3, #0]
 8010ed4:	789b      	ldrb	r3, [r3, #2]
 8010ed6:	8111      	strh	r1, [r2, #8]
 8010ed8:	7293      	strb	r3, [r2, #10]
			strcpy(p->grade,"7A");
 8010eda:	687b      	ldr	r3, [r7, #4]
 8010edc:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8010ee0:	4aaa      	ldr	r2, [pc, #680]	; (801118c <problem_fetch+0xfac8>)
 8010ee2:	8811      	ldrh	r1, [r2, #0]
 8010ee4:	7892      	ldrb	r2, [r2, #2]
 8010ee6:	8019      	strh	r1, [r3, #0]
 8010ee8:	709a      	strb	r2, [r3, #2]
			p->moveSize = 8;
 8010eea:	687b      	ldr	r3, [r7, #4]
 8010eec:	2208      	movs	r2, #8
 8010eee:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,G,G,C,E,A,E,A");
 8010ef0:	687b      	ldr	r3, [r7, #4]
 8010ef2:	33a4      	adds	r3, #164	; 0xa4
 8010ef4:	4aa6      	ldr	r2, [pc, #664]	; (8011190 <problem_fetch+0xfacc>)
 8010ef6:	461c      	mov	r4, r3
 8010ef8:	4615      	mov	r5, r2
 8010efa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010efc:	6020      	str	r0, [r4, #0]
 8010efe:	6061      	str	r1, [r4, #4]
 8010f00:	60a2      	str	r2, [r4, #8]
 8010f02:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,6,9,8,12,14,14,18");
 8010f04:	687b      	ldr	r3, [r7, #4]
 8010f06:	3304      	adds	r3, #4
 8010f08:	4aa2      	ldr	r2, [pc, #648]	; (8011194 <problem_fetch+0xfad0>)
 8010f0a:	461d      	mov	r5, r3
 8010f0c:	4614      	mov	r4, r2
 8010f0e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8010f10:	6028      	str	r0, [r5, #0]
 8010f12:	6069      	str	r1, [r5, #4]
 8010f14:	60aa      	str	r2, [r5, #8]
 8010f16:	60eb      	str	r3, [r5, #12]
 8010f18:	6820      	ldr	r0, [r4, #0]
 8010f1a:	6128      	str	r0, [r5, #16]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,e");
 8010f1c:	687b      	ldr	r3, [r7, #4]
 8010f1e:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8010f22:	4a9d      	ldr	r2, [pc, #628]	; (8011198 <problem_fetch+0xfad4>)
 8010f24:	461c      	mov	r4, r3
 8010f26:	4615      	mov	r5, r2
 8010f28:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010f2a:	6020      	str	r0, [r4, #0]
 8010f2c:	6061      	str	r1, [r4, #4]
 8010f2e:	60a2      	str	r2, [r4, #8]
 8010f30:	60e3      	str	r3, [r4, #12]
			break;
 8010f32:	f00b baf7 	b.w	801c524 <problem_fetch+0x1ae60>
		case 456 :
			strcpy(p->name,"LESS REST MORE INJURY");
 8010f36:	687b      	ldr	r3, [r7, #4]
 8010f38:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8010f3c:	4a97      	ldr	r2, [pc, #604]	; (801119c <problem_fetch+0xfad8>)
 8010f3e:	461d      	mov	r5, r3
 8010f40:	4614      	mov	r4, r2
 8010f42:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8010f44:	6028      	str	r0, [r5, #0]
 8010f46:	6069      	str	r1, [r5, #4]
 8010f48:	60aa      	str	r2, [r5, #8]
 8010f4a:	60eb      	str	r3, [r5, #12]
 8010f4c:	6820      	ldr	r0, [r4, #0]
 8010f4e:	6128      	str	r0, [r5, #16]
 8010f50:	88a3      	ldrh	r3, [r4, #4]
 8010f52:	82ab      	strh	r3, [r5, #20]
			strcpy(p->grade,"6C+");
 8010f54:	687b      	ldr	r3, [r7, #4]
 8010f56:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8010f5a:	4a91      	ldr	r2, [pc, #580]	; (80111a0 <problem_fetch+0xfadc>)
 8010f5c:	6810      	ldr	r0, [r2, #0]
 8010f5e:	6018      	str	r0, [r3, #0]
			p->moveSize = 9;
 8010f60:	687b      	ldr	r3, [r7, #4]
 8010f62:	2209      	movs	r2, #9
 8010f64:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,E,J,G,F,G,J,G,D");
 8010f66:	687b      	ldr	r3, [r7, #4]
 8010f68:	33a4      	adds	r3, #164	; 0xa4
 8010f6a:	4a8e      	ldr	r2, [pc, #568]	; (80111a4 <problem_fetch+0xfae0>)
 8010f6c:	461d      	mov	r5, r3
 8010f6e:	4614      	mov	r4, r2
 8010f70:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8010f72:	6028      	str	r0, [r5, #0]
 8010f74:	6069      	str	r1, [r5, #4]
 8010f76:	60aa      	str	r2, [r5, #8]
 8010f78:	60eb      	str	r3, [r5, #12]
 8010f7a:	8823      	ldrh	r3, [r4, #0]
 8010f7c:	822b      	strh	r3, [r5, #16]
			strcpy(p->moveNumbers,"6,6,7,9,11,17,13,15,18");
 8010f7e:	687b      	ldr	r3, [r7, #4]
 8010f80:	3304      	adds	r3, #4
 8010f82:	4a89      	ldr	r2, [pc, #548]	; (80111a8 <problem_fetch+0xfae4>)
 8010f84:	461c      	mov	r4, r3
 8010f86:	4615      	mov	r5, r2
 8010f88:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010f8a:	6020      	str	r0, [r4, #0]
 8010f8c:	6061      	str	r1, [r4, #4]
 8010f8e:	60a2      	str	r2, [r4, #8]
 8010f90:	60e3      	str	r3, [r4, #12]
 8010f92:	6828      	ldr	r0, [r5, #0]
 8010f94:	6120      	str	r0, [r4, #16]
 8010f96:	88ab      	ldrh	r3, [r5, #4]
 8010f98:	79aa      	ldrb	r2, [r5, #6]
 8010f9a:	82a3      	strh	r3, [r4, #20]
 8010f9c:	4613      	mov	r3, r2
 8010f9e:	75a3      	strb	r3, [r4, #22]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,d,e");
 8010fa0:	687b      	ldr	r3, [r7, #4]
 8010fa2:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8010fa6:	4a81      	ldr	r2, [pc, #516]	; (80111ac <problem_fetch+0xfae8>)
 8010fa8:	461d      	mov	r5, r3
 8010faa:	4614      	mov	r4, r2
 8010fac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8010fae:	6028      	str	r0, [r5, #0]
 8010fb0:	6069      	str	r1, [r5, #4]
 8010fb2:	60aa      	str	r2, [r5, #8]
 8010fb4:	60eb      	str	r3, [r5, #12]
 8010fb6:	8823      	ldrh	r3, [r4, #0]
 8010fb8:	822b      	strh	r3, [r5, #16]
			break;
 8010fba:	f00b bab3 	b.w	801c524 <problem_fetch+0x1ae60>
		case 457 :
			strcpy(p->name,"MORE EFFORT LESS SKIN");
 8010fbe:	687b      	ldr	r3, [r7, #4]
 8010fc0:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8010fc4:	4a7a      	ldr	r2, [pc, #488]	; (80111b0 <problem_fetch+0xfaec>)
 8010fc6:	461d      	mov	r5, r3
 8010fc8:	4614      	mov	r4, r2
 8010fca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8010fcc:	6028      	str	r0, [r5, #0]
 8010fce:	6069      	str	r1, [r5, #4]
 8010fd0:	60aa      	str	r2, [r5, #8]
 8010fd2:	60eb      	str	r3, [r5, #12]
 8010fd4:	6820      	ldr	r0, [r4, #0]
 8010fd6:	6128      	str	r0, [r5, #16]
 8010fd8:	88a3      	ldrh	r3, [r4, #4]
 8010fda:	82ab      	strh	r3, [r5, #20]
			strcpy(p->grade,"6C+");
 8010fdc:	687b      	ldr	r3, [r7, #4]
 8010fde:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8010fe2:	4a6f      	ldr	r2, [pc, #444]	; (80111a0 <problem_fetch+0xfadc>)
 8010fe4:	6810      	ldr	r0, [r2, #0]
 8010fe6:	6018      	str	r0, [r3, #0]
			p->moveSize = 8;
 8010fe8:	687b      	ldr	r3, [r7, #4]
 8010fea:	2208      	movs	r2, #8
 8010fec:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"E,G,H,J,F,G,J,I");
 8010fee:	687b      	ldr	r3, [r7, #4]
 8010ff0:	33a4      	adds	r3, #164	; 0xa4
 8010ff2:	4a70      	ldr	r2, [pc, #448]	; (80111b4 <problem_fetch+0xfaf0>)
 8010ff4:	461c      	mov	r4, r3
 8010ff6:	4615      	mov	r5, r2
 8010ff8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010ffa:	6020      	str	r0, [r4, #0]
 8010ffc:	6061      	str	r1, [r4, #4]
 8010ffe:	60a2      	str	r2, [r4, #8]
 8011000:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"6,6,16,13,11,9,7,18");
 8011002:	687b      	ldr	r3, [r7, #4]
 8011004:	3304      	adds	r3, #4
 8011006:	4a6c      	ldr	r2, [pc, #432]	; (80111b8 <problem_fetch+0xfaf4>)
 8011008:	461d      	mov	r5, r3
 801100a:	4614      	mov	r4, r2
 801100c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801100e:	6028      	str	r0, [r5, #0]
 8011010:	6069      	str	r1, [r5, #4]
 8011012:	60aa      	str	r2, [r5, #8]
 8011014:	60eb      	str	r3, [r5, #12]
 8011016:	6820      	ldr	r0, [r4, #0]
 8011018:	6128      	str	r0, [r5, #16]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,e");
 801101a:	687b      	ldr	r3, [r7, #4]
 801101c:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8011020:	4a5d      	ldr	r2, [pc, #372]	; (8011198 <problem_fetch+0xfad4>)
 8011022:	461c      	mov	r4, r3
 8011024:	4615      	mov	r5, r2
 8011026:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011028:	6020      	str	r0, [r4, #0]
 801102a:	6061      	str	r1, [r4, #4]
 801102c:	60a2      	str	r2, [r4, #8]
 801102e:	60e3      	str	r3, [r4, #12]
			break;
 8011030:	f00b ba78 	b.w	801c524 <problem_fetch+0x1ae60>
		case 458 :
			strcpy(p->name,"SKWAMA");
 8011034:	687b      	ldr	r3, [r7, #4]
 8011036:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801103a:	4a60      	ldr	r2, [pc, #384]	; (80111bc <problem_fetch+0xfaf8>)
 801103c:	6810      	ldr	r0, [r2, #0]
 801103e:	6018      	str	r0, [r3, #0]
 8011040:	8891      	ldrh	r1, [r2, #4]
 8011042:	7992      	ldrb	r2, [r2, #6]
 8011044:	8099      	strh	r1, [r3, #4]
 8011046:	719a      	strb	r2, [r3, #6]
			strcpy(p->grade,"6B+");
 8011048:	687b      	ldr	r3, [r7, #4]
 801104a:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801104e:	4a5c      	ldr	r2, [pc, #368]	; (80111c0 <problem_fetch+0xfafc>)
 8011050:	6810      	ldr	r0, [r2, #0]
 8011052:	6018      	str	r0, [r3, #0]
			p->moveSize = 8;
 8011054:	687b      	ldr	r3, [r7, #4]
 8011056:	2208      	movs	r2, #8
 8011058:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,E,I,J,H,K,G,I");
 801105a:	687b      	ldr	r3, [r7, #4]
 801105c:	33a4      	adds	r3, #164	; 0xa4
 801105e:	4a59      	ldr	r2, [pc, #356]	; (80111c4 <problem_fetch+0xfb00>)
 8011060:	461c      	mov	r4, r3
 8011062:	4615      	mov	r5, r2
 8011064:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011066:	6020      	str	r0, [r4, #0]
 8011068:	6061      	str	r1, [r4, #4]
 801106a:	60a2      	str	r2, [r4, #8]
 801106c:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,8,10,7,12,14,15,18");
 801106e:	687b      	ldr	r3, [r7, #4]
 8011070:	3304      	adds	r3, #4
 8011072:	4a55      	ldr	r2, [pc, #340]	; (80111c8 <problem_fetch+0xfb04>)
 8011074:	461d      	mov	r5, r3
 8011076:	4614      	mov	r4, r2
 8011078:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801107a:	6028      	str	r0, [r5, #0]
 801107c:	6069      	str	r1, [r5, #4]
 801107e:	60aa      	str	r2, [r5, #8]
 8011080:	60eb      	str	r3, [r5, #12]
 8011082:	6820      	ldr	r0, [r4, #0]
 8011084:	6128      	str	r0, [r5, #16]
 8011086:	7923      	ldrb	r3, [r4, #4]
 8011088:	752b      	strb	r3, [r5, #20]
			strcpy(p->startFinish,"s,d,d,d,d,d,d,e");
 801108a:	687b      	ldr	r3, [r7, #4]
 801108c:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8011090:	4a4e      	ldr	r2, [pc, #312]	; (80111cc <problem_fetch+0xfb08>)
 8011092:	461c      	mov	r4, r3
 8011094:	4615      	mov	r5, r2
 8011096:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011098:	6020      	str	r0, [r4, #0]
 801109a:	6061      	str	r1, [r4, #4]
 801109c:	60a2      	str	r2, [r4, #8]
 801109e:	60e3      	str	r3, [r4, #12]
			break;
 80110a0:	f00b ba40 	b.w	801c524 <problem_fetch+0x1ae60>
		case 459 :
			strcpy(p->name,"NOIA");
 80110a4:	687b      	ldr	r3, [r7, #4]
 80110a6:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80110aa:	4a49      	ldr	r2, [pc, #292]	; (80111d0 <problem_fetch+0xfb0c>)
 80110ac:	6810      	ldr	r0, [r2, #0]
 80110ae:	6018      	str	r0, [r3, #0]
 80110b0:	7912      	ldrb	r2, [r2, #4]
 80110b2:	711a      	strb	r2, [r3, #4]
			strcpy(p->grade,"6C+");
 80110b4:	687b      	ldr	r3, [r7, #4]
 80110b6:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80110ba:	4a39      	ldr	r2, [pc, #228]	; (80111a0 <problem_fetch+0xfadc>)
 80110bc:	6810      	ldr	r0, [r2, #0]
 80110be:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 80110c0:	687b      	ldr	r3, [r7, #4]
 80110c2:	2206      	movs	r2, #6
 80110c4:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,G,C,E,A,A");
 80110c6:	687b      	ldr	r3, [r7, #4]
 80110c8:	33a4      	adds	r3, #164	; 0xa4
 80110ca:	4a42      	ldr	r2, [pc, #264]	; (80111d4 <problem_fetch+0xfb10>)
 80110cc:	461c      	mov	r4, r3
 80110ce:	4613      	mov	r3, r2
 80110d0:	cb07      	ldmia	r3!, {r0, r1, r2}
 80110d2:	6020      	str	r0, [r4, #0]
 80110d4:	6061      	str	r1, [r4, #4]
 80110d6:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"6,4,8,12,14,18");
 80110d8:	687b      	ldr	r3, [r7, #4]
 80110da:	3304      	adds	r3, #4
 80110dc:	4a3e      	ldr	r2, [pc, #248]	; (80111d8 <problem_fetch+0xfb14>)
 80110de:	461c      	mov	r4, r3
 80110e0:	4613      	mov	r3, r2
 80110e2:	cb07      	ldmia	r3!, {r0, r1, r2}
 80110e4:	6020      	str	r0, [r4, #0]
 80110e6:	6061      	str	r1, [r4, #4]
 80110e8:	60a2      	str	r2, [r4, #8]
 80110ea:	881a      	ldrh	r2, [r3, #0]
 80110ec:	789b      	ldrb	r3, [r3, #2]
 80110ee:	81a2      	strh	r2, [r4, #12]
 80110f0:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish,"s,s,d,d,d,e");
 80110f2:	687b      	ldr	r3, [r7, #4]
 80110f4:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 80110f8:	4a38      	ldr	r2, [pc, #224]	; (80111dc <problem_fetch+0xfb18>)
 80110fa:	461c      	mov	r4, r3
 80110fc:	4613      	mov	r3, r2
 80110fe:	cb07      	ldmia	r3!, {r0, r1, r2}
 8011100:	6020      	str	r0, [r4, #0]
 8011102:	6061      	str	r1, [r4, #4]
 8011104:	60a2      	str	r2, [r4, #8]
			break;
 8011106:	f00b ba0d 	b.w	801c524 <problem_fetch+0x1ae60>
		case 460 :
			strcpy(p->name,"LES DRUS");
 801110a:	687b      	ldr	r3, [r7, #4]
 801110c:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8011110:	4933      	ldr	r1, [pc, #204]	; (80111e0 <problem_fetch+0xfb1c>)
 8011112:	461a      	mov	r2, r3
 8011114:	460b      	mov	r3, r1
 8011116:	cb03      	ldmia	r3!, {r0, r1}
 8011118:	6010      	str	r0, [r2, #0]
 801111a:	6051      	str	r1, [r2, #4]
 801111c:	781b      	ldrb	r3, [r3, #0]
 801111e:	7213      	strb	r3, [r2, #8]
			strcpy(p->grade,"7A");
 8011120:	687b      	ldr	r3, [r7, #4]
 8011122:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8011126:	4a19      	ldr	r2, [pc, #100]	; (801118c <problem_fetch+0xfac8>)
 8011128:	8811      	ldrh	r1, [r2, #0]
 801112a:	7892      	ldrb	r2, [r2, #2]
 801112c:	8019      	strh	r1, [r3, #0]
 801112e:	709a      	strb	r2, [r3, #2]
			p->moveSize = 7;
 8011130:	687b      	ldr	r3, [r7, #4]
 8011132:	2207      	movs	r2, #7
 8011134:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,G,H,E,I,I,D");
 8011136:	687b      	ldr	r3, [r7, #4]
 8011138:	33a4      	adds	r3, #164	; 0xa4
 801113a:	4a2a      	ldr	r2, [pc, #168]	; (80111e4 <problem_fetch+0xfb20>)
 801113c:	461c      	mov	r4, r3
 801113e:	4613      	mov	r3, r2
 8011140:	cb07      	ldmia	r3!, {r0, r1, r2}
 8011142:	6020      	str	r0, [r4, #0]
 8011144:	6061      	str	r1, [r4, #4]
 8011146:	60a2      	str	r2, [r4, #8]
 8011148:	881b      	ldrh	r3, [r3, #0]
 801114a:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,15,16,12,10,7,18");
 801114c:	687b      	ldr	r3, [r7, #4]
 801114e:	3304      	adds	r3, #4
 8011150:	4a25      	ldr	r2, [pc, #148]	; (80111e8 <problem_fetch+0xfb24>)
 8011152:	461d      	mov	r5, r3
 8011154:	4614      	mov	r4, r2
 8011156:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8011158:	6028      	str	r0, [r5, #0]
 801115a:	6069      	str	r1, [r5, #4]
 801115c:	60aa      	str	r2, [r5, #8]
 801115e:	60eb      	str	r3, [r5, #12]
 8011160:	8823      	ldrh	r3, [r4, #0]
 8011162:	78a2      	ldrb	r2, [r4, #2]
 8011164:	822b      	strh	r3, [r5, #16]
 8011166:	4613      	mov	r3, r2
 8011168:	74ab      	strb	r3, [r5, #18]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 801116a:	687b      	ldr	r3, [r7, #4]
 801116c:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8011170:	4a1e      	ldr	r2, [pc, #120]	; (80111ec <problem_fetch+0xfb28>)
 8011172:	461c      	mov	r4, r3
 8011174:	4613      	mov	r3, r2
 8011176:	cb07      	ldmia	r3!, {r0, r1, r2}
 8011178:	6020      	str	r0, [r4, #0]
 801117a:	6061      	str	r1, [r4, #4]
 801117c:	60a2      	str	r2, [r4, #8]
 801117e:	881b      	ldrh	r3, [r3, #0]
 8011180:	81a3      	strh	r3, [r4, #12]
			break;
 8011182:	f00b b9cf 	b.w	801c524 <problem_fetch+0x1ae60>
 8011186:	bf00      	nop
 8011188:	08028fd0 	.word	0x08028fd0
 801118c:	08023814 	.word	0x08023814
 8011190:	08028fdc 	.word	0x08028fdc
 8011194:	08028fec 	.word	0x08028fec
 8011198:	08023978 	.word	0x08023978
 801119c:	08029000 	.word	0x08029000
 80111a0:	080238ec 	.word	0x080238ec
 80111a4:	08029018 	.word	0x08029018
 80111a8:	0802902c 	.word	0x0802902c
 80111ac:	08024838 	.word	0x08024838
 80111b0:	08029044 	.word	0x08029044
 80111b4:	0802905c 	.word	0x0802905c
 80111b8:	0802906c 	.word	0x0802906c
 80111bc:	08029080 	.word	0x08029080
 80111c0:	08023854 	.word	0x08023854
 80111c4:	08029088 	.word	0x08029088
 80111c8:	08029098 	.word	0x08029098
 80111cc:	08023a64 	.word	0x08023a64
 80111d0:	080290b0 	.word	0x080290b0
 80111d4:	080290b8 	.word	0x080290b8
 80111d8:	080290c4 	.word	0x080290c4
 80111dc:	08023834 	.word	0x08023834
 80111e0:	080290d4 	.word	0x080290d4
 80111e4:	080290e0 	.word	0x080290e0
 80111e8:	080290f0 	.word	0x080290f0
 80111ec:	080239dc 	.word	0x080239dc
		case 461 :
			strcpy(p->name,"GTC&AMP;TCT");
 80111f0:	687b      	ldr	r3, [r7, #4]
 80111f2:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80111f6:	4aba      	ldr	r2, [pc, #744]	; (80114e0 <problem_fetch+0xfe1c>)
 80111f8:	461c      	mov	r4, r3
 80111fa:	4613      	mov	r3, r2
 80111fc:	cb07      	ldmia	r3!, {r0, r1, r2}
 80111fe:	6020      	str	r0, [r4, #0]
 8011200:	6061      	str	r1, [r4, #4]
 8011202:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade,"6C+");
 8011204:	687b      	ldr	r3, [r7, #4]
 8011206:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801120a:	4ab6      	ldr	r2, [pc, #728]	; (80114e4 <problem_fetch+0xfe20>)
 801120c:	6810      	ldr	r0, [r2, #0]
 801120e:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 8011210:	687b      	ldr	r3, [r7, #4]
 8011212:	2207      	movs	r2, #7
 8011214:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,F,G,J,I,J,D");
 8011216:	687b      	ldr	r3, [r7, #4]
 8011218:	33a4      	adds	r3, #164	; 0xa4
 801121a:	4ab3      	ldr	r2, [pc, #716]	; (80114e8 <problem_fetch+0xfe24>)
 801121c:	461c      	mov	r4, r3
 801121e:	4613      	mov	r3, r2
 8011220:	cb07      	ldmia	r3!, {r0, r1, r2}
 8011222:	6020      	str	r0, [r4, #0]
 8011224:	6061      	str	r1, [r4, #4]
 8011226:	60a2      	str	r2, [r4, #8]
 8011228:	881b      	ldrh	r3, [r3, #0]
 801122a:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,13,17,12,10,7,18");
 801122c:	687b      	ldr	r3, [r7, #4]
 801122e:	3304      	adds	r3, #4
 8011230:	4aae      	ldr	r2, [pc, #696]	; (80114ec <problem_fetch+0xfe28>)
 8011232:	461d      	mov	r5, r3
 8011234:	4614      	mov	r4, r2
 8011236:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8011238:	6028      	str	r0, [r5, #0]
 801123a:	6069      	str	r1, [r5, #4]
 801123c:	60aa      	str	r2, [r5, #8]
 801123e:	60eb      	str	r3, [r5, #12]
 8011240:	8823      	ldrh	r3, [r4, #0]
 8011242:	78a2      	ldrb	r2, [r4, #2]
 8011244:	822b      	strh	r3, [r5, #16]
 8011246:	4613      	mov	r3, r2
 8011248:	74ab      	strb	r3, [r5, #18]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 801124a:	687b      	ldr	r3, [r7, #4]
 801124c:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8011250:	4aa7      	ldr	r2, [pc, #668]	; (80114f0 <problem_fetch+0xfe2c>)
 8011252:	461c      	mov	r4, r3
 8011254:	4613      	mov	r3, r2
 8011256:	cb07      	ldmia	r3!, {r0, r1, r2}
 8011258:	6020      	str	r0, [r4, #0]
 801125a:	6061      	str	r1, [r4, #4]
 801125c:	60a2      	str	r2, [r4, #8]
 801125e:	881b      	ldrh	r3, [r3, #0]
 8011260:	81a3      	strh	r3, [r4, #12]
			break;
 8011262:	f00b b95f 	b.w	801c524 <problem_fetch+0x1ae60>
		case 462 :
			strcpy(p->name,"LA COSA NOSTRA");
 8011266:	687b      	ldr	r3, [r7, #4]
 8011268:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801126c:	4aa1      	ldr	r2, [pc, #644]	; (80114f4 <problem_fetch+0xfe30>)
 801126e:	461c      	mov	r4, r3
 8011270:	4613      	mov	r3, r2
 8011272:	cb07      	ldmia	r3!, {r0, r1, r2}
 8011274:	6020      	str	r0, [r4, #0]
 8011276:	6061      	str	r1, [r4, #4]
 8011278:	60a2      	str	r2, [r4, #8]
 801127a:	881a      	ldrh	r2, [r3, #0]
 801127c:	789b      	ldrb	r3, [r3, #2]
 801127e:	81a2      	strh	r2, [r4, #12]
 8011280:	73a3      	strb	r3, [r4, #14]
			strcpy(p->grade,"6C+");
 8011282:	687b      	ldr	r3, [r7, #4]
 8011284:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8011288:	4a96      	ldr	r2, [pc, #600]	; (80114e4 <problem_fetch+0xfe20>)
 801128a:	6810      	ldr	r0, [r2, #0]
 801128c:	6018      	str	r0, [r3, #0]
			p->moveSize = 9;
 801128e:	687b      	ldr	r3, [r7, #4]
 8011290:	2209      	movs	r2, #9
 8011292:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,G,E,F,J,J,H,G,D");
 8011294:	687b      	ldr	r3, [r7, #4]
 8011296:	33a4      	adds	r3, #164	; 0xa4
 8011298:	4a97      	ldr	r2, [pc, #604]	; (80114f8 <problem_fetch+0xfe34>)
 801129a:	461d      	mov	r5, r3
 801129c:	4614      	mov	r4, r2
 801129e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80112a0:	6028      	str	r0, [r5, #0]
 80112a2:	6069      	str	r1, [r5, #4]
 80112a4:	60aa      	str	r2, [r5, #8]
 80112a6:	60eb      	str	r3, [r5, #12]
 80112a8:	8823      	ldrh	r3, [r4, #0]
 80112aa:	822b      	strh	r3, [r5, #16]
			strcpy(p->moveNumbers,"4,9,6,11,7,13,16,17,18");
 80112ac:	687b      	ldr	r3, [r7, #4]
 80112ae:	3304      	adds	r3, #4
 80112b0:	4a92      	ldr	r2, [pc, #584]	; (80114fc <problem_fetch+0xfe38>)
 80112b2:	461c      	mov	r4, r3
 80112b4:	4615      	mov	r5, r2
 80112b6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80112b8:	6020      	str	r0, [r4, #0]
 80112ba:	6061      	str	r1, [r4, #4]
 80112bc:	60a2      	str	r2, [r4, #8]
 80112be:	60e3      	str	r3, [r4, #12]
 80112c0:	6828      	ldr	r0, [r5, #0]
 80112c2:	6120      	str	r0, [r4, #16]
 80112c4:	88ab      	ldrh	r3, [r5, #4]
 80112c6:	79aa      	ldrb	r2, [r5, #6]
 80112c8:	82a3      	strh	r3, [r4, #20]
 80112ca:	4613      	mov	r3, r2
 80112cc:	75a3      	strb	r3, [r4, #22]
			strcpy(p->startFinish,"s,d,d,d,d,d,d,d,e");
 80112ce:	687b      	ldr	r3, [r7, #4]
 80112d0:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 80112d4:	4a8a      	ldr	r2, [pc, #552]	; (8011500 <problem_fetch+0xfe3c>)
 80112d6:	461d      	mov	r5, r3
 80112d8:	4614      	mov	r4, r2
 80112da:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80112dc:	6028      	str	r0, [r5, #0]
 80112de:	6069      	str	r1, [r5, #4]
 80112e0:	60aa      	str	r2, [r5, #8]
 80112e2:	60eb      	str	r3, [r5, #12]
 80112e4:	8823      	ldrh	r3, [r4, #0]
 80112e6:	822b      	strh	r3, [r5, #16]
			break;
 80112e8:	f00b b91c 	b.w	801c524 <problem_fetch+0x1ae60>
		case 463 :
			strcpy(p->name,"SMALL COSA NOSTRA");
 80112ec:	687b      	ldr	r3, [r7, #4]
 80112ee:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80112f2:	4a84      	ldr	r2, [pc, #528]	; (8011504 <problem_fetch+0xfe40>)
 80112f4:	461d      	mov	r5, r3
 80112f6:	4614      	mov	r4, r2
 80112f8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80112fa:	6028      	str	r0, [r5, #0]
 80112fc:	6069      	str	r1, [r5, #4]
 80112fe:	60aa      	str	r2, [r5, #8]
 8011300:	60eb      	str	r3, [r5, #12]
 8011302:	8823      	ldrh	r3, [r4, #0]
 8011304:	822b      	strh	r3, [r5, #16]
			strcpy(p->grade,"6C");
 8011306:	687b      	ldr	r3, [r7, #4]
 8011308:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801130c:	4a7e      	ldr	r2, [pc, #504]	; (8011508 <problem_fetch+0xfe44>)
 801130e:	8811      	ldrh	r1, [r2, #0]
 8011310:	7892      	ldrb	r2, [r2, #2]
 8011312:	8019      	strh	r1, [r3, #0]
 8011314:	709a      	strb	r2, [r3, #2]
			p->moveSize = 8;
 8011316:	687b      	ldr	r3, [r7, #4]
 8011318:	2208      	movs	r2, #8
 801131a:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,E,J,F,E,J,H,I");
 801131c:	687b      	ldr	r3, [r7, #4]
 801131e:	33a4      	adds	r3, #164	; 0xa4
 8011320:	4a7a      	ldr	r2, [pc, #488]	; (801150c <problem_fetch+0xfe48>)
 8011322:	461c      	mov	r4, r3
 8011324:	4615      	mov	r5, r2
 8011326:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011328:	6020      	str	r0, [r4, #0]
 801132a:	6061      	str	r1, [r4, #4]
 801132c:	60a2      	str	r2, [r4, #8]
 801132e:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,8,7,11,12,13,16,18");
 8011330:	687b      	ldr	r3, [r7, #4]
 8011332:	3304      	adds	r3, #4
 8011334:	4a76      	ldr	r2, [pc, #472]	; (8011510 <problem_fetch+0xfe4c>)
 8011336:	461d      	mov	r5, r3
 8011338:	4614      	mov	r4, r2
 801133a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801133c:	6028      	str	r0, [r5, #0]
 801133e:	6069      	str	r1, [r5, #4]
 8011340:	60aa      	str	r2, [r5, #8]
 8011342:	60eb      	str	r3, [r5, #12]
 8011344:	6820      	ldr	r0, [r4, #0]
 8011346:	6128      	str	r0, [r5, #16]
 8011348:	7923      	ldrb	r3, [r4, #4]
 801134a:	752b      	strb	r3, [r5, #20]
			strcpy(p->startFinish,"s,d,d,d,d,d,d,e");
 801134c:	687b      	ldr	r3, [r7, #4]
 801134e:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8011352:	4a70      	ldr	r2, [pc, #448]	; (8011514 <problem_fetch+0xfe50>)
 8011354:	461c      	mov	r4, r3
 8011356:	4615      	mov	r5, r2
 8011358:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801135a:	6020      	str	r0, [r4, #0]
 801135c:	6061      	str	r1, [r4, #4]
 801135e:	60a2      	str	r2, [r4, #8]
 8011360:	60e3      	str	r3, [r4, #12]
			break;
 8011362:	f00b b8df 	b.w	801c524 <problem_fetch+0x1ae60>
		case 464 :
			strcpy(p->name,"LITTLE COSA NOSTRA");
 8011366:	687b      	ldr	r3, [r7, #4]
 8011368:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801136c:	4a6a      	ldr	r2, [pc, #424]	; (8011518 <problem_fetch+0xfe54>)
 801136e:	461d      	mov	r5, r3
 8011370:	4614      	mov	r4, r2
 8011372:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8011374:	6028      	str	r0, [r5, #0]
 8011376:	6069      	str	r1, [r5, #4]
 8011378:	60aa      	str	r2, [r5, #8]
 801137a:	60eb      	str	r3, [r5, #12]
 801137c:	8823      	ldrh	r3, [r4, #0]
 801137e:	78a2      	ldrb	r2, [r4, #2]
 8011380:	822b      	strh	r3, [r5, #16]
 8011382:	4613      	mov	r3, r2
 8011384:	74ab      	strb	r3, [r5, #18]
			strcpy(p->grade,"6C");
 8011386:	687b      	ldr	r3, [r7, #4]
 8011388:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801138c:	4a5e      	ldr	r2, [pc, #376]	; (8011508 <problem_fetch+0xfe44>)
 801138e:	8811      	ldrh	r1, [r2, #0]
 8011390:	7892      	ldrb	r2, [r2, #2]
 8011392:	8019      	strh	r1, [r3, #0]
 8011394:	709a      	strb	r2, [r3, #2]
			p->moveSize = 9;
 8011396:	687b      	ldr	r3, [r7, #4]
 8011398:	2209      	movs	r2, #9
 801139a:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"C,E,C,F,K,G,I,E,D");
 801139c:	687b      	ldr	r3, [r7, #4]
 801139e:	33a4      	adds	r3, #164	; 0xa4
 80113a0:	4a5e      	ldr	r2, [pc, #376]	; (801151c <problem_fetch+0xfe58>)
 80113a2:	461d      	mov	r5, r3
 80113a4:	4614      	mov	r4, r2
 80113a6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80113a8:	6028      	str	r0, [r5, #0]
 80113aa:	6069      	str	r1, [r5, #4]
 80113ac:	60aa      	str	r2, [r5, #8]
 80113ae:	60eb      	str	r3, [r5, #12]
 80113b0:	8823      	ldrh	r3, [r4, #0]
 80113b2:	822b      	strh	r3, [r5, #16]
			strcpy(p->moveNumbers,"5,6,8,11,9,10,14,16,18");
 80113b4:	687b      	ldr	r3, [r7, #4]
 80113b6:	3304      	adds	r3, #4
 80113b8:	4a59      	ldr	r2, [pc, #356]	; (8011520 <problem_fetch+0xfe5c>)
 80113ba:	461c      	mov	r4, r3
 80113bc:	4615      	mov	r5, r2
 80113be:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80113c0:	6020      	str	r0, [r4, #0]
 80113c2:	6061      	str	r1, [r4, #4]
 80113c4:	60a2      	str	r2, [r4, #8]
 80113c6:	60e3      	str	r3, [r4, #12]
 80113c8:	6828      	ldr	r0, [r5, #0]
 80113ca:	6120      	str	r0, [r4, #16]
 80113cc:	88ab      	ldrh	r3, [r5, #4]
 80113ce:	79aa      	ldrb	r2, [r5, #6]
 80113d0:	82a3      	strh	r3, [r4, #20]
 80113d2:	4613      	mov	r3, r2
 80113d4:	75a3      	strb	r3, [r4, #22]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,d,e");
 80113d6:	687b      	ldr	r3, [r7, #4]
 80113d8:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 80113dc:	4a51      	ldr	r2, [pc, #324]	; (8011524 <problem_fetch+0xfe60>)
 80113de:	461d      	mov	r5, r3
 80113e0:	4614      	mov	r4, r2
 80113e2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80113e4:	6028      	str	r0, [r5, #0]
 80113e6:	6069      	str	r1, [r5, #4]
 80113e8:	60aa      	str	r2, [r5, #8]
 80113ea:	60eb      	str	r3, [r5, #12]
 80113ec:	8823      	ldrh	r3, [r4, #0]
 80113ee:	822b      	strh	r3, [r5, #16]
			break;
 80113f0:	f00b b898 	b.w	801c524 <problem_fetch+0x1ae60>
		case 465 :
			strcpy(p->name,"THE MOVE");
 80113f4:	687b      	ldr	r3, [r7, #4]
 80113f6:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80113fa:	494b      	ldr	r1, [pc, #300]	; (8011528 <problem_fetch+0xfe64>)
 80113fc:	461a      	mov	r2, r3
 80113fe:	460b      	mov	r3, r1
 8011400:	cb03      	ldmia	r3!, {r0, r1}
 8011402:	6010      	str	r0, [r2, #0]
 8011404:	6051      	str	r1, [r2, #4]
 8011406:	781b      	ldrb	r3, [r3, #0]
 8011408:	7213      	strb	r3, [r2, #8]
			strcpy(p->grade,"6C");
 801140a:	687b      	ldr	r3, [r7, #4]
 801140c:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8011410:	4a3d      	ldr	r2, [pc, #244]	; (8011508 <problem_fetch+0xfe44>)
 8011412:	8811      	ldrh	r1, [r2, #0]
 8011414:	7892      	ldrb	r2, [r2, #2]
 8011416:	8019      	strh	r1, [r3, #0]
 8011418:	709a      	strb	r2, [r3, #2]
			p->moveSize = 7;
 801141a:	687b      	ldr	r3, [r7, #4]
 801141c:	2207      	movs	r2, #7
 801141e:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,E,E,E,H,H,I");
 8011420:	687b      	ldr	r3, [r7, #4]
 8011422:	33a4      	adds	r3, #164	; 0xa4
 8011424:	4a41      	ldr	r2, [pc, #260]	; (801152c <problem_fetch+0xfe68>)
 8011426:	461c      	mov	r4, r3
 8011428:	4613      	mov	r3, r2
 801142a:	cb07      	ldmia	r3!, {r0, r1, r2}
 801142c:	6020      	str	r0, [r4, #0]
 801142e:	6061      	str	r1, [r4, #4]
 8011430:	60a2      	str	r2, [r4, #8]
 8011432:	881b      	ldrh	r3, [r3, #0]
 8011434:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,6,9,12,12,16,18");
 8011436:	687b      	ldr	r3, [r7, #4]
 8011438:	3304      	adds	r3, #4
 801143a:	4a3d      	ldr	r2, [pc, #244]	; (8011530 <problem_fetch+0xfe6c>)
 801143c:	461d      	mov	r5, r3
 801143e:	4614      	mov	r4, r2
 8011440:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8011442:	6028      	str	r0, [r5, #0]
 8011444:	6069      	str	r1, [r5, #4]
 8011446:	60aa      	str	r2, [r5, #8]
 8011448:	60eb      	str	r3, [r5, #12]
 801144a:	8823      	ldrh	r3, [r4, #0]
 801144c:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 801144e:	687b      	ldr	r3, [r7, #4]
 8011450:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8011454:	4a26      	ldr	r2, [pc, #152]	; (80114f0 <problem_fetch+0xfe2c>)
 8011456:	461c      	mov	r4, r3
 8011458:	4613      	mov	r3, r2
 801145a:	cb07      	ldmia	r3!, {r0, r1, r2}
 801145c:	6020      	str	r0, [r4, #0]
 801145e:	6061      	str	r1, [r4, #4]
 8011460:	60a2      	str	r2, [r4, #8]
 8011462:	881b      	ldrh	r3, [r3, #0]
 8011464:	81a3      	strh	r3, [r4, #12]
			break;
 8011466:	f00b b85d 	b.w	801c524 <problem_fetch+0x1ae60>
		case 466 :
			strcpy(p->name,"THE LITTLE ISLAND");
 801146a:	687b      	ldr	r3, [r7, #4]
 801146c:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8011470:	4a30      	ldr	r2, [pc, #192]	; (8011534 <problem_fetch+0xfe70>)
 8011472:	461d      	mov	r5, r3
 8011474:	4614      	mov	r4, r2
 8011476:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8011478:	6028      	str	r0, [r5, #0]
 801147a:	6069      	str	r1, [r5, #4]
 801147c:	60aa      	str	r2, [r5, #8]
 801147e:	60eb      	str	r3, [r5, #12]
 8011480:	8823      	ldrh	r3, [r4, #0]
 8011482:	822b      	strh	r3, [r5, #16]
			strcpy(p->grade,"7B");
 8011484:	687b      	ldr	r3, [r7, #4]
 8011486:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801148a:	4a2b      	ldr	r2, [pc, #172]	; (8011538 <problem_fetch+0xfe74>)
 801148c:	8811      	ldrh	r1, [r2, #0]
 801148e:	7892      	ldrb	r2, [r2, #2]
 8011490:	8019      	strh	r1, [r3, #0]
 8011492:	709a      	strb	r2, [r3, #2]
			p->moveSize = 6;
 8011494:	687b      	ldr	r3, [r7, #4]
 8011496:	2206      	movs	r2, #6
 8011498:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,G,K,H,G,D");
 801149a:	687b      	ldr	r3, [r7, #4]
 801149c:	33a4      	adds	r3, #164	; 0xa4
 801149e:	4a27      	ldr	r2, [pc, #156]	; (801153c <problem_fetch+0xfe78>)
 80114a0:	461c      	mov	r4, r3
 80114a2:	4613      	mov	r3, r2
 80114a4:	cb07      	ldmia	r3!, {r0, r1, r2}
 80114a6:	6020      	str	r0, [r4, #0]
 80114a8:	6061      	str	r1, [r4, #4]
 80114aa:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,6,9,12,17,18");
 80114ac:	687b      	ldr	r3, [r7, #4]
 80114ae:	3304      	adds	r3, #4
 80114b0:	4a23      	ldr	r2, [pc, #140]	; (8011540 <problem_fetch+0xfe7c>)
 80114b2:	461c      	mov	r4, r3
 80114b4:	4613      	mov	r3, r2
 80114b6:	cb07      	ldmia	r3!, {r0, r1, r2}
 80114b8:	6020      	str	r0, [r4, #0]
 80114ba:	6061      	str	r1, [r4, #4]
 80114bc:	60a2      	str	r2, [r4, #8]
 80114be:	881a      	ldrh	r2, [r3, #0]
 80114c0:	789b      	ldrb	r3, [r3, #2]
 80114c2:	81a2      	strh	r2, [r4, #12]
 80114c4:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 80114c6:	687b      	ldr	r3, [r7, #4]
 80114c8:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 80114cc:	4a1d      	ldr	r2, [pc, #116]	; (8011544 <problem_fetch+0xfe80>)
 80114ce:	461c      	mov	r4, r3
 80114d0:	4613      	mov	r3, r2
 80114d2:	cb07      	ldmia	r3!, {r0, r1, r2}
 80114d4:	6020      	str	r0, [r4, #0]
 80114d6:	6061      	str	r1, [r4, #4]
 80114d8:	60a2      	str	r2, [r4, #8]
			break;
 80114da:	f00b b823 	b.w	801c524 <problem_fetch+0x1ae60>
 80114de:	bf00      	nop
 80114e0:	08029104 	.word	0x08029104
 80114e4:	080238ec 	.word	0x080238ec
 80114e8:	08029110 	.word	0x08029110
 80114ec:	08029120 	.word	0x08029120
 80114f0:	080239dc 	.word	0x080239dc
 80114f4:	08029134 	.word	0x08029134
 80114f8:	08029144 	.word	0x08029144
 80114fc:	08029158 	.word	0x08029158
 8011500:	0802570c 	.word	0x0802570c
 8011504:	08029170 	.word	0x08029170
 8011508:	08023920 	.word	0x08023920
 801150c:	08029184 	.word	0x08029184
 8011510:	08029194 	.word	0x08029194
 8011514:	08023a64 	.word	0x08023a64
 8011518:	080291ac 	.word	0x080291ac
 801151c:	080291c0 	.word	0x080291c0
 8011520:	080291d4 	.word	0x080291d4
 8011524:	08024838 	.word	0x08024838
 8011528:	080291ec 	.word	0x080291ec
 801152c:	080291f8 	.word	0x080291f8
 8011530:	08029208 	.word	0x08029208
 8011534:	0802921c 	.word	0x0802921c
 8011538:	08023f4c 	.word	0x08023f4c
 801153c:	08029230 	.word	0x08029230
 8011540:	0802923c 	.word	0x0802923c
 8011544:	08023bf0 	.word	0x08023bf0
		case 467 :
			strcpy(p->name,"FACE DE RAT");
 8011548:	687b      	ldr	r3, [r7, #4]
 801154a:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801154e:	4aad      	ldr	r2, [pc, #692]	; (8011804 <problem_fetch+0x10140>)
 8011550:	461c      	mov	r4, r3
 8011552:	4613      	mov	r3, r2
 8011554:	cb07      	ldmia	r3!, {r0, r1, r2}
 8011556:	6020      	str	r0, [r4, #0]
 8011558:	6061      	str	r1, [r4, #4]
 801155a:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade,"6C");
 801155c:	687b      	ldr	r3, [r7, #4]
 801155e:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8011562:	4aa9      	ldr	r2, [pc, #676]	; (8011808 <problem_fetch+0x10144>)
 8011564:	8811      	ldrh	r1, [r2, #0]
 8011566:	7892      	ldrb	r2, [r2, #2]
 8011568:	8019      	strh	r1, [r3, #0]
 801156a:	709a      	strb	r2, [r3, #2]
			p->moveSize = 8;
 801156c:	687b      	ldr	r3, [r7, #4]
 801156e:	2208      	movs	r2, #8
 8011570:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,E,E,A,E,F,I,I");
 8011572:	687b      	ldr	r3, [r7, #4]
 8011574:	33a4      	adds	r3, #164	; 0xa4
 8011576:	4aa5      	ldr	r2, [pc, #660]	; (801180c <problem_fetch+0x10148>)
 8011578:	461c      	mov	r4, r3
 801157a:	4615      	mov	r5, r2
 801157c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801157e:	6020      	str	r0, [r4, #0]
 8011580:	6061      	str	r1, [r4, #4]
 8011582:	60a2      	str	r2, [r4, #8]
 8011584:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,6,8,9,12,13,14,18");
 8011586:	687b      	ldr	r3, [r7, #4]
 8011588:	3304      	adds	r3, #4
 801158a:	4aa1      	ldr	r2, [pc, #644]	; (8011810 <problem_fetch+0x1014c>)
 801158c:	461d      	mov	r5, r3
 801158e:	4614      	mov	r4, r2
 8011590:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8011592:	6028      	str	r0, [r5, #0]
 8011594:	6069      	str	r1, [r5, #4]
 8011596:	60aa      	str	r2, [r5, #8]
 8011598:	60eb      	str	r3, [r5, #12]
 801159a:	6820      	ldr	r0, [r4, #0]
 801159c:	6128      	str	r0, [r5, #16]
			strcpy(p->startFinish,"s,d,d,d,d,d,d,e");
 801159e:	687b      	ldr	r3, [r7, #4]
 80115a0:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 80115a4:	4a9b      	ldr	r2, [pc, #620]	; (8011814 <problem_fetch+0x10150>)
 80115a6:	461c      	mov	r4, r3
 80115a8:	4615      	mov	r5, r2
 80115aa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80115ac:	6020      	str	r0, [r4, #0]
 80115ae:	6061      	str	r1, [r4, #4]
 80115b0:	60a2      	str	r2, [r4, #8]
 80115b2:	60e3      	str	r3, [r4, #12]
			break;
 80115b4:	f00a bfb6 	b.w	801c524 <problem_fetch+0x1ae60>
		case 468 :
			strcpy(p->name,"THE F(L)IGHT");
 80115b8:	687b      	ldr	r3, [r7, #4]
 80115ba:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80115be:	4a96      	ldr	r2, [pc, #600]	; (8011818 <problem_fetch+0x10154>)
 80115c0:	461c      	mov	r4, r3
 80115c2:	4613      	mov	r3, r2
 80115c4:	cb07      	ldmia	r3!, {r0, r1, r2}
 80115c6:	6020      	str	r0, [r4, #0]
 80115c8:	6061      	str	r1, [r4, #4]
 80115ca:	60a2      	str	r2, [r4, #8]
 80115cc:	781b      	ldrb	r3, [r3, #0]
 80115ce:	7323      	strb	r3, [r4, #12]
			strcpy(p->grade,"7A+");
 80115d0:	687b      	ldr	r3, [r7, #4]
 80115d2:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80115d6:	4a91      	ldr	r2, [pc, #580]	; (801181c <problem_fetch+0x10158>)
 80115d8:	6810      	ldr	r0, [r2, #0]
 80115da:	6018      	str	r0, [r3, #0]
			p->moveSize = 8;
 80115dc:	687b      	ldr	r3, [r7, #4]
 80115de:	2208      	movs	r2, #8
 80115e0:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"C,B,G,F,J,J,E,I");
 80115e2:	687b      	ldr	r3, [r7, #4]
 80115e4:	33a4      	adds	r3, #164	; 0xa4
 80115e6:	4a8e      	ldr	r2, [pc, #568]	; (8011820 <problem_fetch+0x1015c>)
 80115e8:	461c      	mov	r4, r3
 80115ea:	4615      	mov	r5, r2
 80115ec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80115ee:	6020      	str	r0, [r4, #0]
 80115f0:	6061      	str	r1, [r4, #4]
 80115f2:	60a2      	str	r2, [r4, #8]
 80115f4:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,6,15,11,13,7,9,18");
 80115f6:	687b      	ldr	r3, [r7, #4]
 80115f8:	3304      	adds	r3, #4
 80115fa:	4a8a      	ldr	r2, [pc, #552]	; (8011824 <problem_fetch+0x10160>)
 80115fc:	461d      	mov	r5, r3
 80115fe:	4614      	mov	r4, r2
 8011600:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8011602:	6028      	str	r0, [r5, #0]
 8011604:	6069      	str	r1, [r5, #4]
 8011606:	60aa      	str	r2, [r5, #8]
 8011608:	60eb      	str	r3, [r5, #12]
 801160a:	6820      	ldr	r0, [r4, #0]
 801160c:	6128      	str	r0, [r5, #16]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,e");
 801160e:	687b      	ldr	r3, [r7, #4]
 8011610:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8011614:	4a84      	ldr	r2, [pc, #528]	; (8011828 <problem_fetch+0x10164>)
 8011616:	461c      	mov	r4, r3
 8011618:	4615      	mov	r5, r2
 801161a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801161c:	6020      	str	r0, [r4, #0]
 801161e:	6061      	str	r1, [r4, #4]
 8011620:	60a2      	str	r2, [r4, #8]
 8011622:	60e3      	str	r3, [r4, #12]
			break;
 8011624:	f00a bf7e 	b.w	801c524 <problem_fetch+0x1ae60>
		case 469 :
			strcpy(p->name,"ONE PUNCH");
 8011628:	687b      	ldr	r3, [r7, #4]
 801162a:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801162e:	497f      	ldr	r1, [pc, #508]	; (801182c <problem_fetch+0x10168>)
 8011630:	461a      	mov	r2, r3
 8011632:	460b      	mov	r3, r1
 8011634:	cb03      	ldmia	r3!, {r0, r1}
 8011636:	6010      	str	r0, [r2, #0]
 8011638:	6051      	str	r1, [r2, #4]
 801163a:	881b      	ldrh	r3, [r3, #0]
 801163c:	8113      	strh	r3, [r2, #8]
			strcpy(p->grade,"6C");
 801163e:	687b      	ldr	r3, [r7, #4]
 8011640:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8011644:	4a70      	ldr	r2, [pc, #448]	; (8011808 <problem_fetch+0x10144>)
 8011646:	8811      	ldrh	r1, [r2, #0]
 8011648:	7892      	ldrb	r2, [r2, #2]
 801164a:	8019      	strh	r1, [r3, #0]
 801164c:	709a      	strb	r2, [r3, #2]
			p->moveSize = 9;
 801164e:	687b      	ldr	r3, [r7, #4]
 8011650:	2209      	movs	r2, #9
 8011652:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,J,G,K,H,K,G,I,D");
 8011654:	687b      	ldr	r3, [r7, #4]
 8011656:	33a4      	adds	r3, #164	; 0xa4
 8011658:	4a75      	ldr	r2, [pc, #468]	; (8011830 <problem_fetch+0x1016c>)
 801165a:	461d      	mov	r5, r3
 801165c:	4614      	mov	r4, r2
 801165e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8011660:	6028      	str	r0, [r5, #0]
 8011662:	6069      	str	r1, [r5, #4]
 8011664:	60aa      	str	r2, [r5, #8]
 8011666:	60eb      	str	r3, [r5, #12]
 8011668:	8823      	ldrh	r3, [r4, #0]
 801166a:	822b      	strh	r3, [r5, #16]
			strcpy(p->moveNumbers,"4,5,15,9,12,14,17,7,18");
 801166c:	687b      	ldr	r3, [r7, #4]
 801166e:	3304      	adds	r3, #4
 8011670:	4a70      	ldr	r2, [pc, #448]	; (8011834 <problem_fetch+0x10170>)
 8011672:	461c      	mov	r4, r3
 8011674:	4615      	mov	r5, r2
 8011676:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011678:	6020      	str	r0, [r4, #0]
 801167a:	6061      	str	r1, [r4, #4]
 801167c:	60a2      	str	r2, [r4, #8]
 801167e:	60e3      	str	r3, [r4, #12]
 8011680:	6828      	ldr	r0, [r5, #0]
 8011682:	6120      	str	r0, [r4, #16]
 8011684:	88ab      	ldrh	r3, [r5, #4]
 8011686:	79aa      	ldrb	r2, [r5, #6]
 8011688:	82a3      	strh	r3, [r4, #20]
 801168a:	4613      	mov	r3, r2
 801168c:	75a3      	strb	r3, [r4, #22]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,d,e");
 801168e:	687b      	ldr	r3, [r7, #4]
 8011690:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8011694:	4a68      	ldr	r2, [pc, #416]	; (8011838 <problem_fetch+0x10174>)
 8011696:	461d      	mov	r5, r3
 8011698:	4614      	mov	r4, r2
 801169a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801169c:	6028      	str	r0, [r5, #0]
 801169e:	6069      	str	r1, [r5, #4]
 80116a0:	60aa      	str	r2, [r5, #8]
 80116a2:	60eb      	str	r3, [r5, #12]
 80116a4:	8823      	ldrh	r3, [r4, #0]
 80116a6:	822b      	strh	r3, [r5, #16]
			break;
 80116a8:	f00a bf3c 	b.w	801c524 <problem_fetch+0x1ae60>
		case 470 :
			strcpy(p->name,"PIZZAPUNT");
 80116ac:	687b      	ldr	r3, [r7, #4]
 80116ae:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80116b2:	4962      	ldr	r1, [pc, #392]	; (801183c <problem_fetch+0x10178>)
 80116b4:	461a      	mov	r2, r3
 80116b6:	460b      	mov	r3, r1
 80116b8:	cb03      	ldmia	r3!, {r0, r1}
 80116ba:	6010      	str	r0, [r2, #0]
 80116bc:	6051      	str	r1, [r2, #4]
 80116be:	881b      	ldrh	r3, [r3, #0]
 80116c0:	8113      	strh	r3, [r2, #8]
			strcpy(p->grade,"6B+");
 80116c2:	687b      	ldr	r3, [r7, #4]
 80116c4:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80116c8:	4a5d      	ldr	r2, [pc, #372]	; (8011840 <problem_fetch+0x1017c>)
 80116ca:	6810      	ldr	r0, [r2, #0]
 80116cc:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 80116ce:	687b      	ldr	r3, [r7, #4]
 80116d0:	2207      	movs	r2, #7
 80116d2:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,E,E,A,E,B,D");
 80116d4:	687b      	ldr	r3, [r7, #4]
 80116d6:	33a4      	adds	r3, #164	; 0xa4
 80116d8:	4a5a      	ldr	r2, [pc, #360]	; (8011844 <problem_fetch+0x10180>)
 80116da:	461c      	mov	r4, r3
 80116dc:	4613      	mov	r3, r2
 80116de:	cb07      	ldmia	r3!, {r0, r1, r2}
 80116e0:	6020      	str	r0, [r4, #0]
 80116e2:	6061      	str	r1, [r4, #4]
 80116e4:	60a2      	str	r2, [r4, #8]
 80116e6:	881b      	ldrh	r3, [r3, #0]
 80116e8:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,6,8,9,12,15,18");
 80116ea:	687b      	ldr	r3, [r7, #4]
 80116ec:	3304      	adds	r3, #4
 80116ee:	4a56      	ldr	r2, [pc, #344]	; (8011848 <problem_fetch+0x10184>)
 80116f0:	461d      	mov	r5, r3
 80116f2:	4614      	mov	r4, r2
 80116f4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80116f6:	6028      	str	r0, [r5, #0]
 80116f8:	6069      	str	r1, [r5, #4]
 80116fa:	60aa      	str	r2, [r5, #8]
 80116fc:	60eb      	str	r3, [r5, #12]
 80116fe:	7823      	ldrb	r3, [r4, #0]
 8011700:	742b      	strb	r3, [r5, #16]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 8011702:	687b      	ldr	r3, [r7, #4]
 8011704:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8011708:	4a50      	ldr	r2, [pc, #320]	; (801184c <problem_fetch+0x10188>)
 801170a:	461c      	mov	r4, r3
 801170c:	4613      	mov	r3, r2
 801170e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8011710:	6020      	str	r0, [r4, #0]
 8011712:	6061      	str	r1, [r4, #4]
 8011714:	60a2      	str	r2, [r4, #8]
 8011716:	881b      	ldrh	r3, [r3, #0]
 8011718:	81a3      	strh	r3, [r4, #12]
			break;
 801171a:	f00a bf03 	b.w	801c524 <problem_fetch+0x1ae60>
		case 471 :
			strcpy(p->name,"A BIT REACHY");
 801171e:	687b      	ldr	r3, [r7, #4]
 8011720:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8011724:	4a4a      	ldr	r2, [pc, #296]	; (8011850 <problem_fetch+0x1018c>)
 8011726:	461c      	mov	r4, r3
 8011728:	4613      	mov	r3, r2
 801172a:	cb07      	ldmia	r3!, {r0, r1, r2}
 801172c:	6020      	str	r0, [r4, #0]
 801172e:	6061      	str	r1, [r4, #4]
 8011730:	60a2      	str	r2, [r4, #8]
 8011732:	781b      	ldrb	r3, [r3, #0]
 8011734:	7323      	strb	r3, [r4, #12]
			strcpy(p->grade,"6B+");
 8011736:	687b      	ldr	r3, [r7, #4]
 8011738:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801173c:	4a40      	ldr	r2, [pc, #256]	; (8011840 <problem_fetch+0x1017c>)
 801173e:	6810      	ldr	r0, [r2, #0]
 8011740:	6018      	str	r0, [r3, #0]
			p->moveSize = 8;
 8011742:	687b      	ldr	r3, [r7, #4]
 8011744:	2208      	movs	r2, #8
 8011746:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,G,G,H,G,I,G,I");
 8011748:	687b      	ldr	r3, [r7, #4]
 801174a:	33a4      	adds	r3, #164	; 0xa4
 801174c:	4a41      	ldr	r2, [pc, #260]	; (8011854 <problem_fetch+0x10190>)
 801174e:	461c      	mov	r4, r3
 8011750:	4615      	mov	r5, r2
 8011752:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011754:	6020      	str	r0, [r4, #0]
 8011756:	6061      	str	r1, [r4, #4]
 8011758:	60a2      	str	r2, [r4, #8]
 801175a:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,6,9,10,14,14,15,18");
 801175c:	687b      	ldr	r3, [r7, #4]
 801175e:	3304      	adds	r3, #4
 8011760:	4a3d      	ldr	r2, [pc, #244]	; (8011858 <problem_fetch+0x10194>)
 8011762:	461d      	mov	r5, r3
 8011764:	4614      	mov	r4, r2
 8011766:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8011768:	6028      	str	r0, [r5, #0]
 801176a:	6069      	str	r1, [r5, #4]
 801176c:	60aa      	str	r2, [r5, #8]
 801176e:	60eb      	str	r3, [r5, #12]
 8011770:	6820      	ldr	r0, [r4, #0]
 8011772:	6128      	str	r0, [r5, #16]
 8011774:	7923      	ldrb	r3, [r4, #4]
 8011776:	752b      	strb	r3, [r5, #20]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,e");
 8011778:	687b      	ldr	r3, [r7, #4]
 801177a:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 801177e:	4a2a      	ldr	r2, [pc, #168]	; (8011828 <problem_fetch+0x10164>)
 8011780:	461c      	mov	r4, r3
 8011782:	4615      	mov	r5, r2
 8011784:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011786:	6020      	str	r0, [r4, #0]
 8011788:	6061      	str	r1, [r4, #4]
 801178a:	60a2      	str	r2, [r4, #8]
 801178c:	60e3      	str	r3, [r4, #12]
			break;
 801178e:	f00a bec9 	b.w	801c524 <problem_fetch+0x1ae60>
		case 472 :
			strcpy(p->name,"NIC_LAICALADDER");
 8011792:	687b      	ldr	r3, [r7, #4]
 8011794:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8011798:	4a30      	ldr	r2, [pc, #192]	; (801185c <problem_fetch+0x10198>)
 801179a:	461c      	mov	r4, r3
 801179c:	4615      	mov	r5, r2
 801179e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80117a0:	6020      	str	r0, [r4, #0]
 80117a2:	6061      	str	r1, [r4, #4]
 80117a4:	60a2      	str	r2, [r4, #8]
 80117a6:	60e3      	str	r3, [r4, #12]
			strcpy(p->grade,"7A");
 80117a8:	687b      	ldr	r3, [r7, #4]
 80117aa:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80117ae:	4a2c      	ldr	r2, [pc, #176]	; (8011860 <problem_fetch+0x1019c>)
 80117b0:	8811      	ldrh	r1, [r2, #0]
 80117b2:	7892      	ldrb	r2, [r2, #2]
 80117b4:	8019      	strh	r1, [r3, #0]
 80117b6:	709a      	strb	r2, [r3, #2]
			p->moveSize = 5;
 80117b8:	687b      	ldr	r3, [r7, #4]
 80117ba:	2205      	movs	r2, #5
 80117bc:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"E,I,G,J,I");
 80117be:	687b      	ldr	r3, [r7, #4]
 80117c0:	33a4      	adds	r3, #164	; 0xa4
 80117c2:	4928      	ldr	r1, [pc, #160]	; (8011864 <problem_fetch+0x101a0>)
 80117c4:	461a      	mov	r2, r3
 80117c6:	460b      	mov	r3, r1
 80117c8:	cb03      	ldmia	r3!, {r0, r1}
 80117ca:	6010      	str	r0, [r2, #0]
 80117cc:	6051      	str	r1, [r2, #4]
 80117ce:	881b      	ldrh	r3, [r3, #0]
 80117d0:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"6,10,14,16,18");
 80117d2:	687b      	ldr	r3, [r7, #4]
 80117d4:	3304      	adds	r3, #4
 80117d6:	4a24      	ldr	r2, [pc, #144]	; (8011868 <problem_fetch+0x101a4>)
 80117d8:	461c      	mov	r4, r3
 80117da:	4613      	mov	r3, r2
 80117dc:	cb07      	ldmia	r3!, {r0, r1, r2}
 80117de:	6020      	str	r0, [r4, #0]
 80117e0:	6061      	str	r1, [r4, #4]
 80117e2:	60a2      	str	r2, [r4, #8]
 80117e4:	881b      	ldrh	r3, [r3, #0]
 80117e6:	81a3      	strh	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,e");
 80117e8:	687b      	ldr	r3, [r7, #4]
 80117ea:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 80117ee:	491f      	ldr	r1, [pc, #124]	; (801186c <problem_fetch+0x101a8>)
 80117f0:	461a      	mov	r2, r3
 80117f2:	460b      	mov	r3, r1
 80117f4:	cb03      	ldmia	r3!, {r0, r1}
 80117f6:	6010      	str	r0, [r2, #0]
 80117f8:	6051      	str	r1, [r2, #4]
 80117fa:	881b      	ldrh	r3, [r3, #0]
 80117fc:	8113      	strh	r3, [r2, #8]
			break;
 80117fe:	f00a be91 	b.w	801c524 <problem_fetch+0x1ae60>
 8011802:	bf00      	nop
 8011804:	0802924c 	.word	0x0802924c
 8011808:	08023920 	.word	0x08023920
 801180c:	08029258 	.word	0x08029258
 8011810:	08029268 	.word	0x08029268
 8011814:	08023a64 	.word	0x08023a64
 8011818:	0802927c 	.word	0x0802927c
 801181c:	080239f4 	.word	0x080239f4
 8011820:	0802928c 	.word	0x0802928c
 8011824:	0802929c 	.word	0x0802929c
 8011828:	08023978 	.word	0x08023978
 801182c:	080292b0 	.word	0x080292b0
 8011830:	080292bc 	.word	0x080292bc
 8011834:	080292d0 	.word	0x080292d0
 8011838:	08024838 	.word	0x08024838
 801183c:	080292e8 	.word	0x080292e8
 8011840:	08023854 	.word	0x08023854
 8011844:	080292f4 	.word	0x080292f4
 8011848:	08029304 	.word	0x08029304
 801184c:	080239dc 	.word	0x080239dc
 8011850:	08029318 	.word	0x08029318
 8011854:	08029328 	.word	0x08029328
 8011858:	08029338 	.word	0x08029338
 801185c:	08029350 	.word	0x08029350
 8011860:	08023814 	.word	0x08023814
 8011864:	08029360 	.word	0x08029360
 8011868:	0802936c 	.word	0x0802936c
 801186c:	08023d20 	.word	0x08023d20
		case 473 :
			strcpy(p->name,"GIUDA BALLERINI");
 8011870:	687b      	ldr	r3, [r7, #4]
 8011872:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8011876:	4aae      	ldr	r2, [pc, #696]	; (8011b30 <problem_fetch+0x1046c>)
 8011878:	461c      	mov	r4, r3
 801187a:	4615      	mov	r5, r2
 801187c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801187e:	6020      	str	r0, [r4, #0]
 8011880:	6061      	str	r1, [r4, #4]
 8011882:	60a2      	str	r2, [r4, #8]
 8011884:	60e3      	str	r3, [r4, #12]
			strcpy(p->grade,"7B");
 8011886:	687b      	ldr	r3, [r7, #4]
 8011888:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801188c:	4aa9      	ldr	r2, [pc, #676]	; (8011b34 <problem_fetch+0x10470>)
 801188e:	8811      	ldrh	r1, [r2, #0]
 8011890:	7892      	ldrb	r2, [r2, #2]
 8011892:	8019      	strh	r1, [r3, #0]
 8011894:	709a      	strb	r2, [r3, #2]
			p->moveSize = 7;
 8011896:	687b      	ldr	r3, [r7, #4]
 8011898:	2207      	movs	r2, #7
 801189a:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,D,F,F,I,G,D");
 801189c:	687b      	ldr	r3, [r7, #4]
 801189e:	33a4      	adds	r3, #164	; 0xa4
 80118a0:	4aa5      	ldr	r2, [pc, #660]	; (8011b38 <problem_fetch+0x10474>)
 80118a2:	461c      	mov	r4, r3
 80118a4:	4613      	mov	r3, r2
 80118a6:	cb07      	ldmia	r3!, {r0, r1, r2}
 80118a8:	6020      	str	r0, [r4, #0]
 80118aa:	6061      	str	r1, [r4, #4]
 80118ac:	60a2      	str	r2, [r4, #8]
 80118ae:	881b      	ldrh	r3, [r3, #0]
 80118b0:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,7,11,13,14,17,18");
 80118b2:	687b      	ldr	r3, [r7, #4]
 80118b4:	3304      	adds	r3, #4
 80118b6:	4aa1      	ldr	r2, [pc, #644]	; (8011b3c <problem_fetch+0x10478>)
 80118b8:	461d      	mov	r5, r3
 80118ba:	4614      	mov	r4, r2
 80118bc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80118be:	6028      	str	r0, [r5, #0]
 80118c0:	6069      	str	r1, [r5, #4]
 80118c2:	60aa      	str	r2, [r5, #8]
 80118c4:	60eb      	str	r3, [r5, #12]
 80118c6:	8823      	ldrh	r3, [r4, #0]
 80118c8:	78a2      	ldrb	r2, [r4, #2]
 80118ca:	822b      	strh	r3, [r5, #16]
 80118cc:	4613      	mov	r3, r2
 80118ce:	74ab      	strb	r3, [r5, #18]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 80118d0:	687b      	ldr	r3, [r7, #4]
 80118d2:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 80118d6:	4a9a      	ldr	r2, [pc, #616]	; (8011b40 <problem_fetch+0x1047c>)
 80118d8:	461c      	mov	r4, r3
 80118da:	4613      	mov	r3, r2
 80118dc:	cb07      	ldmia	r3!, {r0, r1, r2}
 80118de:	6020      	str	r0, [r4, #0]
 80118e0:	6061      	str	r1, [r4, #4]
 80118e2:	60a2      	str	r2, [r4, #8]
 80118e4:	881b      	ldrh	r3, [r3, #0]
 80118e6:	81a3      	strh	r3, [r4, #12]
			break;
 80118e8:	f00a be1c 	b.w	801c524 <problem_fetch+0x1ae60>
		case 474 :
			strcpy(p->name,"PINCHINGPANDA");
 80118ec:	687b      	ldr	r3, [r7, #4]
 80118ee:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80118f2:	4a94      	ldr	r2, [pc, #592]	; (8011b44 <problem_fetch+0x10480>)
 80118f4:	461c      	mov	r4, r3
 80118f6:	4613      	mov	r3, r2
 80118f8:	cb07      	ldmia	r3!, {r0, r1, r2}
 80118fa:	6020      	str	r0, [r4, #0]
 80118fc:	6061      	str	r1, [r4, #4]
 80118fe:	60a2      	str	r2, [r4, #8]
 8011900:	881b      	ldrh	r3, [r3, #0]
 8011902:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade,"6B+");
 8011904:	687b      	ldr	r3, [r7, #4]
 8011906:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801190a:	4a8f      	ldr	r2, [pc, #572]	; (8011b48 <problem_fetch+0x10484>)
 801190c:	6810      	ldr	r0, [r2, #0]
 801190e:	6018      	str	r0, [r3, #0]
			p->moveSize = 9;
 8011910:	687b      	ldr	r3, [r7, #4]
 8011912:	2209      	movs	r2, #9
 8011914:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,H,H,C,F,C,D,G,A");
 8011916:	687b      	ldr	r3, [r7, #4]
 8011918:	33a4      	adds	r3, #164	; 0xa4
 801191a:	4a8c      	ldr	r2, [pc, #560]	; (8011b4c <problem_fetch+0x10488>)
 801191c:	461d      	mov	r5, r3
 801191e:	4614      	mov	r4, r2
 8011920:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8011922:	6028      	str	r0, [r5, #0]
 8011924:	6069      	str	r1, [r5, #4]
 8011926:	60aa      	str	r2, [r5, #8]
 8011928:	60eb      	str	r3, [r5, #12]
 801192a:	8823      	ldrh	r3, [r4, #0]
 801192c:	822b      	strh	r3, [r5, #16]
			strcpy(p->moveNumbers,"5,5,8,8,11,13,15,9,18");
 801192e:	687b      	ldr	r3, [r7, #4]
 8011930:	3304      	adds	r3, #4
 8011932:	4a87      	ldr	r2, [pc, #540]	; (8011b50 <problem_fetch+0x1048c>)
 8011934:	461d      	mov	r5, r3
 8011936:	4614      	mov	r4, r2
 8011938:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801193a:	6028      	str	r0, [r5, #0]
 801193c:	6069      	str	r1, [r5, #4]
 801193e:	60aa      	str	r2, [r5, #8]
 8011940:	60eb      	str	r3, [r5, #12]
 8011942:	6820      	ldr	r0, [r4, #0]
 8011944:	6128      	str	r0, [r5, #16]
 8011946:	88a3      	ldrh	r3, [r4, #4]
 8011948:	82ab      	strh	r3, [r5, #20]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,d,e");
 801194a:	687b      	ldr	r3, [r7, #4]
 801194c:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8011950:	4a80      	ldr	r2, [pc, #512]	; (8011b54 <problem_fetch+0x10490>)
 8011952:	461d      	mov	r5, r3
 8011954:	4614      	mov	r4, r2
 8011956:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8011958:	6028      	str	r0, [r5, #0]
 801195a:	6069      	str	r1, [r5, #4]
 801195c:	60aa      	str	r2, [r5, #8]
 801195e:	60eb      	str	r3, [r5, #12]
 8011960:	8823      	ldrh	r3, [r4, #0]
 8011962:	822b      	strh	r3, [r5, #16]
			break;
 8011964:	f00a bdde 	b.w	801c524 <problem_fetch+0x1ae60>
		case 475 :
			strcpy(p->name,"GOT PINCH?");
 8011968:	687b      	ldr	r3, [r7, #4]
 801196a:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801196e:	497a      	ldr	r1, [pc, #488]	; (8011b58 <problem_fetch+0x10494>)
 8011970:	461a      	mov	r2, r3
 8011972:	460b      	mov	r3, r1
 8011974:	cb03      	ldmia	r3!, {r0, r1}
 8011976:	6010      	str	r0, [r2, #0]
 8011978:	6051      	str	r1, [r2, #4]
 801197a:	8819      	ldrh	r1, [r3, #0]
 801197c:	789b      	ldrb	r3, [r3, #2]
 801197e:	8111      	strh	r1, [r2, #8]
 8011980:	7293      	strb	r3, [r2, #10]
			strcpy(p->grade,"6B+");
 8011982:	687b      	ldr	r3, [r7, #4]
 8011984:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8011988:	4a6f      	ldr	r2, [pc, #444]	; (8011b48 <problem_fetch+0x10484>)
 801198a:	6810      	ldr	r0, [r2, #0]
 801198c:	6018      	str	r0, [r3, #0]
			p->moveSize = 8;
 801198e:	687b      	ldr	r3, [r7, #4]
 8011990:	2208      	movs	r2, #8
 8011992:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,H,H,C,F,C,D,A");
 8011994:	687b      	ldr	r3, [r7, #4]
 8011996:	33a4      	adds	r3, #164	; 0xa4
 8011998:	4a70      	ldr	r2, [pc, #448]	; (8011b5c <problem_fetch+0x10498>)
 801199a:	461c      	mov	r4, r3
 801199c:	4615      	mov	r5, r2
 801199e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80119a0:	6020      	str	r0, [r4, #0]
 80119a2:	6061      	str	r1, [r4, #4]
 80119a4:	60a2      	str	r2, [r4, #8]
 80119a6:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,5,8,8,11,13,15,18");
 80119a8:	687b      	ldr	r3, [r7, #4]
 80119aa:	3304      	adds	r3, #4
 80119ac:	4a6c      	ldr	r2, [pc, #432]	; (8011b60 <problem_fetch+0x1049c>)
 80119ae:	461d      	mov	r5, r3
 80119b0:	4614      	mov	r4, r2
 80119b2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80119b4:	6028      	str	r0, [r5, #0]
 80119b6:	6069      	str	r1, [r5, #4]
 80119b8:	60aa      	str	r2, [r5, #8]
 80119ba:	60eb      	str	r3, [r5, #12]
 80119bc:	6820      	ldr	r0, [r4, #0]
 80119be:	6128      	str	r0, [r5, #16]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,e");
 80119c0:	687b      	ldr	r3, [r7, #4]
 80119c2:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 80119c6:	4a67      	ldr	r2, [pc, #412]	; (8011b64 <problem_fetch+0x104a0>)
 80119c8:	461c      	mov	r4, r3
 80119ca:	4615      	mov	r5, r2
 80119cc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80119ce:	6020      	str	r0, [r4, #0]
 80119d0:	6061      	str	r1, [r4, #4]
 80119d2:	60a2      	str	r2, [r4, #8]
 80119d4:	60e3      	str	r3, [r4, #12]
			break;
 80119d6:	f00a bda5 	b.w	801c524 <problem_fetch+0x1ae60>
		case 476 :
			strcpy(p->name,"HUMPA");
 80119da:	687b      	ldr	r3, [r7, #4]
 80119dc:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80119e0:	4a61      	ldr	r2, [pc, #388]	; (8011b68 <problem_fetch+0x104a4>)
 80119e2:	6810      	ldr	r0, [r2, #0]
 80119e4:	6018      	str	r0, [r3, #0]
 80119e6:	8892      	ldrh	r2, [r2, #4]
 80119e8:	809a      	strh	r2, [r3, #4]
			strcpy(p->grade,"6B+");
 80119ea:	687b      	ldr	r3, [r7, #4]
 80119ec:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80119f0:	4a55      	ldr	r2, [pc, #340]	; (8011b48 <problem_fetch+0x10484>)
 80119f2:	6810      	ldr	r0, [r2, #0]
 80119f4:	6018      	str	r0, [r3, #0]
			p->moveSize = 9;
 80119f6:	687b      	ldr	r3, [r7, #4]
 80119f8:	2209      	movs	r2, #9
 80119fa:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,J,H,F,I,G,E,H,I");
 80119fc:	687b      	ldr	r3, [r7, #4]
 80119fe:	33a4      	adds	r3, #164	; 0xa4
 8011a00:	4a5a      	ldr	r2, [pc, #360]	; (8011b6c <problem_fetch+0x104a8>)
 8011a02:	461d      	mov	r5, r3
 8011a04:	4614      	mov	r4, r2
 8011a06:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8011a08:	6028      	str	r0, [r5, #0]
 8011a0a:	6069      	str	r1, [r5, #4]
 8011a0c:	60aa      	str	r2, [r5, #8]
 8011a0e:	60eb      	str	r3, [r5, #12]
 8011a10:	8823      	ldrh	r3, [r4, #0]
 8011a12:	822b      	strh	r3, [r5, #16]
			strcpy(p->moveNumbers,"4,5,8,11,14,15,8,10,18");
 8011a14:	687b      	ldr	r3, [r7, #4]
 8011a16:	3304      	adds	r3, #4
 8011a18:	4a55      	ldr	r2, [pc, #340]	; (8011b70 <problem_fetch+0x104ac>)
 8011a1a:	461c      	mov	r4, r3
 8011a1c:	4615      	mov	r5, r2
 8011a1e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011a20:	6020      	str	r0, [r4, #0]
 8011a22:	6061      	str	r1, [r4, #4]
 8011a24:	60a2      	str	r2, [r4, #8]
 8011a26:	60e3      	str	r3, [r4, #12]
 8011a28:	6828      	ldr	r0, [r5, #0]
 8011a2a:	6120      	str	r0, [r4, #16]
 8011a2c:	88ab      	ldrh	r3, [r5, #4]
 8011a2e:	79aa      	ldrb	r2, [r5, #6]
 8011a30:	82a3      	strh	r3, [r4, #20]
 8011a32:	4613      	mov	r3, r2
 8011a34:	75a3      	strb	r3, [r4, #22]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,d,e");
 8011a36:	687b      	ldr	r3, [r7, #4]
 8011a38:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8011a3c:	4a45      	ldr	r2, [pc, #276]	; (8011b54 <problem_fetch+0x10490>)
 8011a3e:	461d      	mov	r5, r3
 8011a40:	4614      	mov	r4, r2
 8011a42:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8011a44:	6028      	str	r0, [r5, #0]
 8011a46:	6069      	str	r1, [r5, #4]
 8011a48:	60aa      	str	r2, [r5, #8]
 8011a4a:	60eb      	str	r3, [r5, #12]
 8011a4c:	8823      	ldrh	r3, [r4, #0]
 8011a4e:	822b      	strh	r3, [r5, #16]
			break;
 8011a50:	f00a bd68 	b.w	801c524 <problem_fetch+0x1ae60>
		case 477 :
			strcpy(p->name,"OH MY FAT FINGERS...");
 8011a54:	687b      	ldr	r3, [r7, #4]
 8011a56:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8011a5a:	4a46      	ldr	r2, [pc, #280]	; (8011b74 <problem_fetch+0x104b0>)
 8011a5c:	461d      	mov	r5, r3
 8011a5e:	4614      	mov	r4, r2
 8011a60:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8011a62:	6028      	str	r0, [r5, #0]
 8011a64:	6069      	str	r1, [r5, #4]
 8011a66:	60aa      	str	r2, [r5, #8]
 8011a68:	60eb      	str	r3, [r5, #12]
 8011a6a:	6820      	ldr	r0, [r4, #0]
 8011a6c:	6128      	str	r0, [r5, #16]
 8011a6e:	7923      	ldrb	r3, [r4, #4]
 8011a70:	752b      	strb	r3, [r5, #20]
			strcpy(p->grade,"6C");
 8011a72:	687b      	ldr	r3, [r7, #4]
 8011a74:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8011a78:	4a3f      	ldr	r2, [pc, #252]	; (8011b78 <problem_fetch+0x104b4>)
 8011a7a:	8811      	ldrh	r1, [r2, #0]
 8011a7c:	7892      	ldrb	r2, [r2, #2]
 8011a7e:	8019      	strh	r1, [r3, #0]
 8011a80:	709a      	strb	r2, [r3, #2]
			p->moveSize = 6;
 8011a82:	687b      	ldr	r3, [r7, #4]
 8011a84:	2206      	movs	r2, #6
 8011a86:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,G,F,K,E,I");
 8011a88:	687b      	ldr	r3, [r7, #4]
 8011a8a:	33a4      	adds	r3, #164	; 0xa4
 8011a8c:	4a3b      	ldr	r2, [pc, #236]	; (8011b7c <problem_fetch+0x104b8>)
 8011a8e:	461c      	mov	r4, r3
 8011a90:	4613      	mov	r3, r2
 8011a92:	cb07      	ldmia	r3!, {r0, r1, r2}
 8011a94:	6020      	str	r0, [r4, #0]
 8011a96:	6061      	str	r1, [r4, #4]
 8011a98:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,10,13,14,8,18");
 8011a9a:	687b      	ldr	r3, [r7, #4]
 8011a9c:	3304      	adds	r3, #4
 8011a9e:	4a38      	ldr	r2, [pc, #224]	; (8011b80 <problem_fetch+0x104bc>)
 8011aa0:	461c      	mov	r4, r3
 8011aa2:	4615      	mov	r5, r2
 8011aa4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011aa6:	6020      	str	r0, [r4, #0]
 8011aa8:	6061      	str	r1, [r4, #4]
 8011aaa:	60a2      	str	r2, [r4, #8]
 8011aac:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 8011aae:	687b      	ldr	r3, [r7, #4]
 8011ab0:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8011ab4:	4a33      	ldr	r2, [pc, #204]	; (8011b84 <problem_fetch+0x104c0>)
 8011ab6:	461c      	mov	r4, r3
 8011ab8:	4613      	mov	r3, r2
 8011aba:	cb07      	ldmia	r3!, {r0, r1, r2}
 8011abc:	6020      	str	r0, [r4, #0]
 8011abe:	6061      	str	r1, [r4, #4]
 8011ac0:	60a2      	str	r2, [r4, #8]
			break;
 8011ac2:	f00a bd2f 	b.w	801c524 <problem_fetch+0x1ae60>
		case 478 :
			strcpy(p->name,"SOFT SERVE");
 8011ac6:	687b      	ldr	r3, [r7, #4]
 8011ac8:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8011acc:	492e      	ldr	r1, [pc, #184]	; (8011b88 <problem_fetch+0x104c4>)
 8011ace:	461a      	mov	r2, r3
 8011ad0:	460b      	mov	r3, r1
 8011ad2:	cb03      	ldmia	r3!, {r0, r1}
 8011ad4:	6010      	str	r0, [r2, #0]
 8011ad6:	6051      	str	r1, [r2, #4]
 8011ad8:	8819      	ldrh	r1, [r3, #0]
 8011ada:	789b      	ldrb	r3, [r3, #2]
 8011adc:	8111      	strh	r1, [r2, #8]
 8011ade:	7293      	strb	r3, [r2, #10]
			strcpy(p->grade,"7A+");
 8011ae0:	687b      	ldr	r3, [r7, #4]
 8011ae2:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8011ae6:	4a29      	ldr	r2, [pc, #164]	; (8011b8c <problem_fetch+0x104c8>)
 8011ae8:	6810      	ldr	r0, [r2, #0]
 8011aea:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 8011aec:	687b      	ldr	r3, [r7, #4]
 8011aee:	2206      	movs	r2, #6
 8011af0:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,H,D,D,E,I");
 8011af2:	687b      	ldr	r3, [r7, #4]
 8011af4:	33a4      	adds	r3, #164	; 0xa4
 8011af6:	4a26      	ldr	r2, [pc, #152]	; (8011b90 <problem_fetch+0x104cc>)
 8011af8:	461c      	mov	r4, r3
 8011afa:	4613      	mov	r3, r2
 8011afc:	cb07      	ldmia	r3!, {r0, r1, r2}
 8011afe:	6020      	str	r0, [r4, #0]
 8011b00:	6061      	str	r1, [r4, #4]
 8011b02:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"6,8,11,15,16,18");
 8011b04:	687b      	ldr	r3, [r7, #4]
 8011b06:	3304      	adds	r3, #4
 8011b08:	4a22      	ldr	r2, [pc, #136]	; (8011b94 <problem_fetch+0x104d0>)
 8011b0a:	461c      	mov	r4, r3
 8011b0c:	4615      	mov	r5, r2
 8011b0e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011b10:	6020      	str	r0, [r4, #0]
 8011b12:	6061      	str	r1, [r4, #4]
 8011b14:	60a2      	str	r2, [r4, #8]
 8011b16:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 8011b18:	687b      	ldr	r3, [r7, #4]
 8011b1a:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8011b1e:	4a19      	ldr	r2, [pc, #100]	; (8011b84 <problem_fetch+0x104c0>)
 8011b20:	461c      	mov	r4, r3
 8011b22:	4613      	mov	r3, r2
 8011b24:	cb07      	ldmia	r3!, {r0, r1, r2}
 8011b26:	6020      	str	r0, [r4, #0]
 8011b28:	6061      	str	r1, [r4, #4]
 8011b2a:	60a2      	str	r2, [r4, #8]
			break;
 8011b2c:	f00a bcfa 	b.w	801c524 <problem_fetch+0x1ae60>
 8011b30:	0802937c 	.word	0x0802937c
 8011b34:	08023f4c 	.word	0x08023f4c
 8011b38:	0802938c 	.word	0x0802938c
 8011b3c:	0802939c 	.word	0x0802939c
 8011b40:	080239dc 	.word	0x080239dc
 8011b44:	080293b0 	.word	0x080293b0
 8011b48:	08023854 	.word	0x08023854
 8011b4c:	080293c0 	.word	0x080293c0
 8011b50:	080293d4 	.word	0x080293d4
 8011b54:	08024838 	.word	0x08024838
 8011b58:	080293ec 	.word	0x080293ec
 8011b5c:	080293f8 	.word	0x080293f8
 8011b60:	08029408 	.word	0x08029408
 8011b64:	08023978 	.word	0x08023978
 8011b68:	0802941c 	.word	0x0802941c
 8011b6c:	08029424 	.word	0x08029424
 8011b70:	08029438 	.word	0x08029438
 8011b74:	08029450 	.word	0x08029450
 8011b78:	08023920 	.word	0x08023920
 8011b7c:	08029468 	.word	0x08029468
 8011b80:	08029474 	.word	0x08029474
 8011b84:	08023bf0 	.word	0x08023bf0
 8011b88:	08029484 	.word	0x08029484
 8011b8c:	080239f4 	.word	0x080239f4
 8011b90:	08029490 	.word	0x08029490
 8011b94:	0802949c 	.word	0x0802949c
		case 479 :
			strcpy(p->name,"SCRUMPY MCBUTTERBALLS");
 8011b98:	687b      	ldr	r3, [r7, #4]
 8011b9a:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8011b9e:	4aac      	ldr	r2, [pc, #688]	; (8011e50 <problem_fetch+0x1078c>)
 8011ba0:	461d      	mov	r5, r3
 8011ba2:	4614      	mov	r4, r2
 8011ba4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8011ba6:	6028      	str	r0, [r5, #0]
 8011ba8:	6069      	str	r1, [r5, #4]
 8011baa:	60aa      	str	r2, [r5, #8]
 8011bac:	60eb      	str	r3, [r5, #12]
 8011bae:	6820      	ldr	r0, [r4, #0]
 8011bb0:	6128      	str	r0, [r5, #16]
 8011bb2:	88a3      	ldrh	r3, [r4, #4]
 8011bb4:	82ab      	strh	r3, [r5, #20]
			strcpy(p->grade,"7A+");
 8011bb6:	687b      	ldr	r3, [r7, #4]
 8011bb8:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8011bbc:	4aa5      	ldr	r2, [pc, #660]	; (8011e54 <problem_fetch+0x10790>)
 8011bbe:	6810      	ldr	r0, [r2, #0]
 8011bc0:	6018      	str	r0, [r3, #0]
			p->moveSize = 5;
 8011bc2:	687b      	ldr	r3, [r7, #4]
 8011bc4:	2205      	movs	r2, #5
 8011bc6:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"C,C,H,G,D");
 8011bc8:	687b      	ldr	r3, [r7, #4]
 8011bca:	33a4      	adds	r3, #164	; 0xa4
 8011bcc:	49a2      	ldr	r1, [pc, #648]	; (8011e58 <problem_fetch+0x10794>)
 8011bce:	461a      	mov	r2, r3
 8011bd0:	460b      	mov	r3, r1
 8011bd2:	cb03      	ldmia	r3!, {r0, r1}
 8011bd4:	6010      	str	r0, [r2, #0]
 8011bd6:	6051      	str	r1, [r2, #4]
 8011bd8:	881b      	ldrh	r3, [r3, #0]
 8011bda:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"5,8,10,14,18");
 8011bdc:	687b      	ldr	r3, [r7, #4]
 8011bde:	3304      	adds	r3, #4
 8011be0:	4a9e      	ldr	r2, [pc, #632]	; (8011e5c <problem_fetch+0x10798>)
 8011be2:	461c      	mov	r4, r3
 8011be4:	4613      	mov	r3, r2
 8011be6:	cb07      	ldmia	r3!, {r0, r1, r2}
 8011be8:	6020      	str	r0, [r4, #0]
 8011bea:	6061      	str	r1, [r4, #4]
 8011bec:	60a2      	str	r2, [r4, #8]
 8011bee:	781b      	ldrb	r3, [r3, #0]
 8011bf0:	7323      	strb	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,e");
 8011bf2:	687b      	ldr	r3, [r7, #4]
 8011bf4:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8011bf8:	4999      	ldr	r1, [pc, #612]	; (8011e60 <problem_fetch+0x1079c>)
 8011bfa:	461a      	mov	r2, r3
 8011bfc:	460b      	mov	r3, r1
 8011bfe:	cb03      	ldmia	r3!, {r0, r1}
 8011c00:	6010      	str	r0, [r2, #0]
 8011c02:	6051      	str	r1, [r2, #4]
 8011c04:	881b      	ldrh	r3, [r3, #0]
 8011c06:	8113      	strh	r3, [r2, #8]
			break;
 8011c08:	f00a bc8c 	b.w	801c524 <problem_fetch+0x1ae60>
		case 480 :
			strcpy(p->name,"JAB 2017");
 8011c0c:	687b      	ldr	r3, [r7, #4]
 8011c0e:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8011c12:	4994      	ldr	r1, [pc, #592]	; (8011e64 <problem_fetch+0x107a0>)
 8011c14:	461a      	mov	r2, r3
 8011c16:	460b      	mov	r3, r1
 8011c18:	cb03      	ldmia	r3!, {r0, r1}
 8011c1a:	6010      	str	r0, [r2, #0]
 8011c1c:	6051      	str	r1, [r2, #4]
 8011c1e:	781b      	ldrb	r3, [r3, #0]
 8011c20:	7213      	strb	r3, [r2, #8]
			strcpy(p->grade,"7B");
 8011c22:	687b      	ldr	r3, [r7, #4]
 8011c24:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8011c28:	4a8f      	ldr	r2, [pc, #572]	; (8011e68 <problem_fetch+0x107a4>)
 8011c2a:	8811      	ldrh	r1, [r2, #0]
 8011c2c:	7892      	ldrb	r2, [r2, #2]
 8011c2e:	8019      	strh	r1, [r3, #0]
 8011c30:	709a      	strb	r2, [r3, #2]
			p->moveSize = 5;
 8011c32:	687b      	ldr	r3, [r7, #4]
 8011c34:	2205      	movs	r2, #5
 8011c36:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,E,G,G,I");
 8011c38:	687b      	ldr	r3, [r7, #4]
 8011c3a:	33a4      	adds	r3, #164	; 0xa4
 8011c3c:	498b      	ldr	r1, [pc, #556]	; (8011e6c <problem_fetch+0x107a8>)
 8011c3e:	461a      	mov	r2, r3
 8011c40:	460b      	mov	r3, r1
 8011c42:	cb03      	ldmia	r3!, {r0, r1}
 8011c44:	6010      	str	r0, [r2, #0]
 8011c46:	6051      	str	r1, [r2, #4]
 8011c48:	881b      	ldrh	r3, [r3, #0]
 8011c4a:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"4,8,10,15,18");
 8011c4c:	687b      	ldr	r3, [r7, #4]
 8011c4e:	3304      	adds	r3, #4
 8011c50:	4a87      	ldr	r2, [pc, #540]	; (8011e70 <problem_fetch+0x107ac>)
 8011c52:	461c      	mov	r4, r3
 8011c54:	4613      	mov	r3, r2
 8011c56:	cb07      	ldmia	r3!, {r0, r1, r2}
 8011c58:	6020      	str	r0, [r4, #0]
 8011c5a:	6061      	str	r1, [r4, #4]
 8011c5c:	60a2      	str	r2, [r4, #8]
 8011c5e:	781b      	ldrb	r3, [r3, #0]
 8011c60:	7323      	strb	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,e");
 8011c62:	687b      	ldr	r3, [r7, #4]
 8011c64:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8011c68:	497d      	ldr	r1, [pc, #500]	; (8011e60 <problem_fetch+0x1079c>)
 8011c6a:	461a      	mov	r2, r3
 8011c6c:	460b      	mov	r3, r1
 8011c6e:	cb03      	ldmia	r3!, {r0, r1}
 8011c70:	6010      	str	r0, [r2, #0]
 8011c72:	6051      	str	r1, [r2, #4]
 8011c74:	881b      	ldrh	r3, [r3, #0]
 8011c76:	8113      	strh	r3, [r2, #8]
			break;
 8011c78:	f00a bc54 	b.w	801c524 <problem_fetch+0x1ae60>
		case 481 :
			strcpy(p->name,"BADMOTORFINGER");
 8011c7c:	687b      	ldr	r3, [r7, #4]
 8011c7e:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8011c82:	4a7c      	ldr	r2, [pc, #496]	; (8011e74 <problem_fetch+0x107b0>)
 8011c84:	461c      	mov	r4, r3
 8011c86:	4613      	mov	r3, r2
 8011c88:	cb07      	ldmia	r3!, {r0, r1, r2}
 8011c8a:	6020      	str	r0, [r4, #0]
 8011c8c:	6061      	str	r1, [r4, #4]
 8011c8e:	60a2      	str	r2, [r4, #8]
 8011c90:	881a      	ldrh	r2, [r3, #0]
 8011c92:	789b      	ldrb	r3, [r3, #2]
 8011c94:	81a2      	strh	r2, [r4, #12]
 8011c96:	73a3      	strb	r3, [r4, #14]
			strcpy(p->grade,"7A");
 8011c98:	687b      	ldr	r3, [r7, #4]
 8011c9a:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8011c9e:	4a76      	ldr	r2, [pc, #472]	; (8011e78 <problem_fetch+0x107b4>)
 8011ca0:	8811      	ldrh	r1, [r2, #0]
 8011ca2:	7892      	ldrb	r2, [r2, #2]
 8011ca4:	8019      	strh	r1, [r3, #0]
 8011ca6:	709a      	strb	r2, [r3, #2]
			p->moveSize = 7;
 8011ca8:	687b      	ldr	r3, [r7, #4]
 8011caa:	2207      	movs	r2, #7
 8011cac:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"E,C,F,F,J,E,D");
 8011cae:	687b      	ldr	r3, [r7, #4]
 8011cb0:	33a4      	adds	r3, #164	; 0xa4
 8011cb2:	4a72      	ldr	r2, [pc, #456]	; (8011e7c <problem_fetch+0x107b8>)
 8011cb4:	461c      	mov	r4, r3
 8011cb6:	4613      	mov	r3, r2
 8011cb8:	cb07      	ldmia	r3!, {r0, r1, r2}
 8011cba:	6020      	str	r0, [r4, #0]
 8011cbc:	6061      	str	r1, [r4, #4]
 8011cbe:	60a2      	str	r2, [r4, #8]
 8011cc0:	881b      	ldrh	r3, [r3, #0]
 8011cc2:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"6,8,11,13,13,16,18");
 8011cc4:	687b      	ldr	r3, [r7, #4]
 8011cc6:	3304      	adds	r3, #4
 8011cc8:	4a6d      	ldr	r2, [pc, #436]	; (8011e80 <problem_fetch+0x107bc>)
 8011cca:	461d      	mov	r5, r3
 8011ccc:	4614      	mov	r4, r2
 8011cce:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8011cd0:	6028      	str	r0, [r5, #0]
 8011cd2:	6069      	str	r1, [r5, #4]
 8011cd4:	60aa      	str	r2, [r5, #8]
 8011cd6:	60eb      	str	r3, [r5, #12]
 8011cd8:	8823      	ldrh	r3, [r4, #0]
 8011cda:	78a2      	ldrb	r2, [r4, #2]
 8011cdc:	822b      	strh	r3, [r5, #16]
 8011cde:	4613      	mov	r3, r2
 8011ce0:	74ab      	strb	r3, [r5, #18]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 8011ce2:	687b      	ldr	r3, [r7, #4]
 8011ce4:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8011ce8:	4a66      	ldr	r2, [pc, #408]	; (8011e84 <problem_fetch+0x107c0>)
 8011cea:	461c      	mov	r4, r3
 8011cec:	4613      	mov	r3, r2
 8011cee:	cb07      	ldmia	r3!, {r0, r1, r2}
 8011cf0:	6020      	str	r0, [r4, #0]
 8011cf2:	6061      	str	r1, [r4, #4]
 8011cf4:	60a2      	str	r2, [r4, #8]
 8011cf6:	881b      	ldrh	r3, [r3, #0]
 8011cf8:	81a3      	strh	r3, [r4, #12]
			break;
 8011cfa:	f00a bc13 	b.w	801c524 <problem_fetch+0x1ae60>
		case 482 :
			strcpy(p->name,"ACG79");
 8011cfe:	687b      	ldr	r3, [r7, #4]
 8011d00:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8011d04:	4a60      	ldr	r2, [pc, #384]	; (8011e88 <problem_fetch+0x107c4>)
 8011d06:	6810      	ldr	r0, [r2, #0]
 8011d08:	6018      	str	r0, [r3, #0]
 8011d0a:	8892      	ldrh	r2, [r2, #4]
 8011d0c:	809a      	strh	r2, [r3, #4]
			strcpy(p->grade,"7A");
 8011d0e:	687b      	ldr	r3, [r7, #4]
 8011d10:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8011d14:	4a58      	ldr	r2, [pc, #352]	; (8011e78 <problem_fetch+0x107b4>)
 8011d16:	8811      	ldrh	r1, [r2, #0]
 8011d18:	7892      	ldrb	r2, [r2, #2]
 8011d1a:	8019      	strh	r1, [r3, #0]
 8011d1c:	709a      	strb	r2, [r3, #2]
			p->moveSize = 7;
 8011d1e:	687b      	ldr	r3, [r7, #4]
 8011d20:	2207      	movs	r2, #7
 8011d22:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,G,E,I,F,H,D");
 8011d24:	687b      	ldr	r3, [r7, #4]
 8011d26:	33a4      	adds	r3, #164	; 0xa4
 8011d28:	4a58      	ldr	r2, [pc, #352]	; (8011e8c <problem_fetch+0x107c8>)
 8011d2a:	461c      	mov	r4, r3
 8011d2c:	4613      	mov	r3, r2
 8011d2e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8011d30:	6020      	str	r0, [r4, #0]
 8011d32:	6061      	str	r1, [r4, #4]
 8011d34:	60a2      	str	r2, [r4, #8]
 8011d36:	881b      	ldrh	r3, [r3, #0]
 8011d38:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,4,8,9,13,16,18");
 8011d3a:	687b      	ldr	r3, [r7, #4]
 8011d3c:	3304      	adds	r3, #4
 8011d3e:	4a54      	ldr	r2, [pc, #336]	; (8011e90 <problem_fetch+0x107cc>)
 8011d40:	461d      	mov	r5, r3
 8011d42:	4614      	mov	r4, r2
 8011d44:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8011d46:	6028      	str	r0, [r5, #0]
 8011d48:	6069      	str	r1, [r5, #4]
 8011d4a:	60aa      	str	r2, [r5, #8]
 8011d4c:	60eb      	str	r3, [r5, #12]
 8011d4e:	7823      	ldrb	r3, [r4, #0]
 8011d50:	742b      	strb	r3, [r5, #16]
			strcpy(p->startFinish,"s,s,d,d,d,d,e");
 8011d52:	687b      	ldr	r3, [r7, #4]
 8011d54:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8011d58:	4a4e      	ldr	r2, [pc, #312]	; (8011e94 <problem_fetch+0x107d0>)
 8011d5a:	461c      	mov	r4, r3
 8011d5c:	4613      	mov	r3, r2
 8011d5e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8011d60:	6020      	str	r0, [r4, #0]
 8011d62:	6061      	str	r1, [r4, #4]
 8011d64:	60a2      	str	r2, [r4, #8]
 8011d66:	881b      	ldrh	r3, [r3, #0]
 8011d68:	81a3      	strh	r3, [r4, #12]
			break;
 8011d6a:	f00a bbdb 	b.w	801c524 <problem_fetch+0x1ae60>
		case 483 :
			strcpy(p->name,"COMEBACK 4.0");
 8011d6e:	687b      	ldr	r3, [r7, #4]
 8011d70:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8011d74:	4a48      	ldr	r2, [pc, #288]	; (8011e98 <problem_fetch+0x107d4>)
 8011d76:	461c      	mov	r4, r3
 8011d78:	4613      	mov	r3, r2
 8011d7a:	cb07      	ldmia	r3!, {r0, r1, r2}
 8011d7c:	6020      	str	r0, [r4, #0]
 8011d7e:	6061      	str	r1, [r4, #4]
 8011d80:	60a2      	str	r2, [r4, #8]
 8011d82:	781b      	ldrb	r3, [r3, #0]
 8011d84:	7323      	strb	r3, [r4, #12]
			strcpy(p->grade,"6C+");
 8011d86:	687b      	ldr	r3, [r7, #4]
 8011d88:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8011d8c:	4a43      	ldr	r2, [pc, #268]	; (8011e9c <problem_fetch+0x107d8>)
 8011d8e:	6810      	ldr	r0, [r2, #0]
 8011d90:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 8011d92:	687b      	ldr	r3, [r7, #4]
 8011d94:	2206      	movs	r2, #6
 8011d96:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,D,E,B,D,D");
 8011d98:	687b      	ldr	r3, [r7, #4]
 8011d9a:	33a4      	adds	r3, #164	; 0xa4
 8011d9c:	4a40      	ldr	r2, [pc, #256]	; (8011ea0 <problem_fetch+0x107dc>)
 8011d9e:	461c      	mov	r4, r3
 8011da0:	4613      	mov	r3, r2
 8011da2:	cb07      	ldmia	r3!, {r0, r1, r2}
 8011da4:	6020      	str	r0, [r4, #0]
 8011da6:	6061      	str	r1, [r4, #4]
 8011da8:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,7,9,12,15,18");
 8011daa:	687b      	ldr	r3, [r7, #4]
 8011dac:	3304      	adds	r3, #4
 8011dae:	4a3d      	ldr	r2, [pc, #244]	; (8011ea4 <problem_fetch+0x107e0>)
 8011db0:	461c      	mov	r4, r3
 8011db2:	4613      	mov	r3, r2
 8011db4:	cb07      	ldmia	r3!, {r0, r1, r2}
 8011db6:	6020      	str	r0, [r4, #0]
 8011db8:	6061      	str	r1, [r4, #4]
 8011dba:	60a2      	str	r2, [r4, #8]
 8011dbc:	881a      	ldrh	r2, [r3, #0]
 8011dbe:	789b      	ldrb	r3, [r3, #2]
 8011dc0:	81a2      	strh	r2, [r4, #12]
 8011dc2:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 8011dc4:	687b      	ldr	r3, [r7, #4]
 8011dc6:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8011dca:	4a37      	ldr	r2, [pc, #220]	; (8011ea8 <problem_fetch+0x107e4>)
 8011dcc:	461c      	mov	r4, r3
 8011dce:	4613      	mov	r3, r2
 8011dd0:	cb07      	ldmia	r3!, {r0, r1, r2}
 8011dd2:	6020      	str	r0, [r4, #0]
 8011dd4:	6061      	str	r1, [r4, #4]
 8011dd6:	60a2      	str	r2, [r4, #8]
			break;
 8011dd8:	f00a bba4 	b.w	801c524 <problem_fetch+0x1ae60>
		case 484 :
			strcpy(p->name,"COMEBACK 3.5");
 8011ddc:	687b      	ldr	r3, [r7, #4]
 8011dde:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8011de2:	4a32      	ldr	r2, [pc, #200]	; (8011eac <problem_fetch+0x107e8>)
 8011de4:	461c      	mov	r4, r3
 8011de6:	4613      	mov	r3, r2
 8011de8:	cb07      	ldmia	r3!, {r0, r1, r2}
 8011dea:	6020      	str	r0, [r4, #0]
 8011dec:	6061      	str	r1, [r4, #4]
 8011dee:	60a2      	str	r2, [r4, #8]
 8011df0:	781b      	ldrb	r3, [r3, #0]
 8011df2:	7323      	strb	r3, [r4, #12]
			strcpy(p->grade,"6B+");
 8011df4:	687b      	ldr	r3, [r7, #4]
 8011df6:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8011dfa:	4a2d      	ldr	r2, [pc, #180]	; (8011eb0 <problem_fetch+0x107ec>)
 8011dfc:	6810      	ldr	r0, [r2, #0]
 8011dfe:	6018      	str	r0, [r3, #0]
			p->moveSize = 8;
 8011e00:	687b      	ldr	r3, [r7, #4]
 8011e02:	2208      	movs	r2, #8
 8011e04:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,J,G,G,C,D,E,I");
 8011e06:	687b      	ldr	r3, [r7, #4]
 8011e08:	33a4      	adds	r3, #164	; 0xa4
 8011e0a:	4a2a      	ldr	r2, [pc, #168]	; (8011eb4 <problem_fetch+0x107f0>)
 8011e0c:	461c      	mov	r4, r3
 8011e0e:	4615      	mov	r5, r2
 8011e10:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011e12:	6020      	str	r0, [r4, #0]
 8011e14:	6061      	str	r1, [r4, #4]
 8011e16:	60a2      	str	r2, [r4, #8]
 8011e18:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,7,9,10,13,15,16,18");
 8011e1a:	687b      	ldr	r3, [r7, #4]
 8011e1c:	3304      	adds	r3, #4
 8011e1e:	4a26      	ldr	r2, [pc, #152]	; (8011eb8 <problem_fetch+0x107f4>)
 8011e20:	461d      	mov	r5, r3
 8011e22:	4614      	mov	r4, r2
 8011e24:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8011e26:	6028      	str	r0, [r5, #0]
 8011e28:	6069      	str	r1, [r5, #4]
 8011e2a:	60aa      	str	r2, [r5, #8]
 8011e2c:	60eb      	str	r3, [r5, #12]
 8011e2e:	6820      	ldr	r0, [r4, #0]
 8011e30:	6128      	str	r0, [r5, #16]
 8011e32:	7923      	ldrb	r3, [r4, #4]
 8011e34:	752b      	strb	r3, [r5, #20]
			strcpy(p->startFinish,"s,d,d,d,d,d,d,e");
 8011e36:	687b      	ldr	r3, [r7, #4]
 8011e38:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8011e3c:	4a1f      	ldr	r2, [pc, #124]	; (8011ebc <problem_fetch+0x107f8>)
 8011e3e:	461c      	mov	r4, r3
 8011e40:	4615      	mov	r5, r2
 8011e42:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011e44:	6020      	str	r0, [r4, #0]
 8011e46:	6061      	str	r1, [r4, #4]
 8011e48:	60a2      	str	r2, [r4, #8]
 8011e4a:	60e3      	str	r3, [r4, #12]
			break;
 8011e4c:	f00a bb6a 	b.w	801c524 <problem_fetch+0x1ae60>
 8011e50:	080294ac 	.word	0x080294ac
 8011e54:	080239f4 	.word	0x080239f4
 8011e58:	080294c4 	.word	0x080294c4
 8011e5c:	08024b5c 	.word	0x08024b5c
 8011e60:	08023d20 	.word	0x08023d20
 8011e64:	080294d0 	.word	0x080294d0
 8011e68:	08023f4c 	.word	0x08023f4c
 8011e6c:	080294dc 	.word	0x080294dc
 8011e70:	08028a4c 	.word	0x08028a4c
 8011e74:	080294e8 	.word	0x080294e8
 8011e78:	08023814 	.word	0x08023814
 8011e7c:	080294f8 	.word	0x080294f8
 8011e80:	08029508 	.word	0x08029508
 8011e84:	080239dc 	.word	0x080239dc
 8011e88:	0802951c 	.word	0x0802951c
 8011e8c:	08029524 	.word	0x08029524
 8011e90:	08029534 	.word	0x08029534
 8011e94:	080238cc 	.word	0x080238cc
 8011e98:	08029548 	.word	0x08029548
 8011e9c:	080238ec 	.word	0x080238ec
 8011ea0:	08029558 	.word	0x08029558
 8011ea4:	08029564 	.word	0x08029564
 8011ea8:	08023bf0 	.word	0x08023bf0
 8011eac:	08029574 	.word	0x08029574
 8011eb0:	08023854 	.word	0x08023854
 8011eb4:	08029584 	.word	0x08029584
 8011eb8:	08029594 	.word	0x08029594
 8011ebc:	08023a64 	.word	0x08023a64
		case 485 :
			strcpy(p->name,"MUCCA");
 8011ec0:	687b      	ldr	r3, [r7, #4]
 8011ec2:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8011ec6:	4aae      	ldr	r2, [pc, #696]	; (8012180 <problem_fetch+0x10abc>)
 8011ec8:	6810      	ldr	r0, [r2, #0]
 8011eca:	6018      	str	r0, [r3, #0]
 8011ecc:	8892      	ldrh	r2, [r2, #4]
 8011ece:	809a      	strh	r2, [r3, #4]
			strcpy(p->grade,"7A+");
 8011ed0:	687b      	ldr	r3, [r7, #4]
 8011ed2:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8011ed6:	4aab      	ldr	r2, [pc, #684]	; (8012184 <problem_fetch+0x10ac0>)
 8011ed8:	6810      	ldr	r0, [r2, #0]
 8011eda:	6018      	str	r0, [r3, #0]
			p->moveSize = 4;
 8011edc:	687b      	ldr	r3, [r7, #4]
 8011ede:	2204      	movs	r2, #4
 8011ee0:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,H,G,I");
 8011ee2:	687b      	ldr	r3, [r7, #4]
 8011ee4:	33a4      	adds	r3, #164	; 0xa4
 8011ee6:	49a8      	ldr	r1, [pc, #672]	; (8012188 <problem_fetch+0x10ac4>)
 8011ee8:	461a      	mov	r2, r3
 8011eea:	460b      	mov	r3, r1
 8011eec:	cb03      	ldmia	r3!, {r0, r1}
 8011eee:	6010      	str	r0, [r2, #0]
 8011ef0:	6051      	str	r1, [r2, #4]
			strcpy(p->moveNumbers,"4,10,14,18");
 8011ef2:	687b      	ldr	r3, [r7, #4]
 8011ef4:	3304      	adds	r3, #4
 8011ef6:	49a5      	ldr	r1, [pc, #660]	; (801218c <problem_fetch+0x10ac8>)
 8011ef8:	461a      	mov	r2, r3
 8011efa:	460b      	mov	r3, r1
 8011efc:	cb03      	ldmia	r3!, {r0, r1}
 8011efe:	6010      	str	r0, [r2, #0]
 8011f00:	6051      	str	r1, [r2, #4]
 8011f02:	8819      	ldrh	r1, [r3, #0]
 8011f04:	789b      	ldrb	r3, [r3, #2]
 8011f06:	8111      	strh	r1, [r2, #8]
 8011f08:	7293      	strb	r3, [r2, #10]
			strcpy(p->startFinish,"s,d,d,e");
 8011f0a:	687b      	ldr	r3, [r7, #4]
 8011f0c:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8011f10:	499f      	ldr	r1, [pc, #636]	; (8012190 <problem_fetch+0x10acc>)
 8011f12:	461a      	mov	r2, r3
 8011f14:	460b      	mov	r3, r1
 8011f16:	cb03      	ldmia	r3!, {r0, r1}
 8011f18:	6010      	str	r0, [r2, #0]
 8011f1a:	6051      	str	r1, [r2, #4]
			break;
 8011f1c:	f00a bb02 	b.w	801c524 <problem_fetch+0x1ae60>
		case 486 :
			strcpy(p->name,"MR PINCH");
 8011f20:	687b      	ldr	r3, [r7, #4]
 8011f22:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8011f26:	499b      	ldr	r1, [pc, #620]	; (8012194 <problem_fetch+0x10ad0>)
 8011f28:	461a      	mov	r2, r3
 8011f2a:	460b      	mov	r3, r1
 8011f2c:	cb03      	ldmia	r3!, {r0, r1}
 8011f2e:	6010      	str	r0, [r2, #0]
 8011f30:	6051      	str	r1, [r2, #4]
 8011f32:	781b      	ldrb	r3, [r3, #0]
 8011f34:	7213      	strb	r3, [r2, #8]
			strcpy(p->grade,"7B+");
 8011f36:	687b      	ldr	r3, [r7, #4]
 8011f38:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8011f3c:	4a96      	ldr	r2, [pc, #600]	; (8012198 <problem_fetch+0x10ad4>)
 8011f3e:	6810      	ldr	r0, [r2, #0]
 8011f40:	6018      	str	r0, [r3, #0]
			p->moveSize = 5;
 8011f42:	687b      	ldr	r3, [r7, #4]
 8011f44:	2205      	movs	r2, #5
 8011f46:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,C,G,E,D");
 8011f48:	687b      	ldr	r3, [r7, #4]
 8011f4a:	33a4      	adds	r3, #164	; 0xa4
 8011f4c:	4993      	ldr	r1, [pc, #588]	; (801219c <problem_fetch+0x10ad8>)
 8011f4e:	461a      	mov	r2, r3
 8011f50:	460b      	mov	r3, r1
 8011f52:	cb03      	ldmia	r3!, {r0, r1}
 8011f54:	6010      	str	r0, [r2, #0]
 8011f56:	6051      	str	r1, [r2, #4]
 8011f58:	881b      	ldrh	r3, [r3, #0]
 8011f5a:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"4,8,9,14,18");
 8011f5c:	687b      	ldr	r3, [r7, #4]
 8011f5e:	3304      	adds	r3, #4
 8011f60:	4a8f      	ldr	r2, [pc, #572]	; (80121a0 <problem_fetch+0x10adc>)
 8011f62:	461c      	mov	r4, r3
 8011f64:	4613      	mov	r3, r2
 8011f66:	cb07      	ldmia	r3!, {r0, r1, r2}
 8011f68:	6020      	str	r0, [r4, #0]
 8011f6a:	6061      	str	r1, [r4, #4]
 8011f6c:	60a2      	str	r2, [r4, #8]
			strcpy(p->startFinish,"s,d,d,d,e");
 8011f6e:	687b      	ldr	r3, [r7, #4]
 8011f70:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8011f74:	498b      	ldr	r1, [pc, #556]	; (80121a4 <problem_fetch+0x10ae0>)
 8011f76:	461a      	mov	r2, r3
 8011f78:	460b      	mov	r3, r1
 8011f7a:	cb03      	ldmia	r3!, {r0, r1}
 8011f7c:	6010      	str	r0, [r2, #0]
 8011f7e:	6051      	str	r1, [r2, #4]
 8011f80:	881b      	ldrh	r3, [r3, #0]
 8011f82:	8113      	strh	r3, [r2, #8]
			break;
 8011f84:	f00a bace 	b.w	801c524 <problem_fetch+0x1ae60>
		case 487 :
			strcpy(p->name,"PROJECT V1");
 8011f88:	687b      	ldr	r3, [r7, #4]
 8011f8a:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8011f8e:	4986      	ldr	r1, [pc, #536]	; (80121a8 <problem_fetch+0x10ae4>)
 8011f90:	461a      	mov	r2, r3
 8011f92:	460b      	mov	r3, r1
 8011f94:	cb03      	ldmia	r3!, {r0, r1}
 8011f96:	6010      	str	r0, [r2, #0]
 8011f98:	6051      	str	r1, [r2, #4]
 8011f9a:	8819      	ldrh	r1, [r3, #0]
 8011f9c:	789b      	ldrb	r3, [r3, #2]
 8011f9e:	8111      	strh	r1, [r2, #8]
 8011fa0:	7293      	strb	r3, [r2, #10]
			strcpy(p->grade,"7B+");
 8011fa2:	687b      	ldr	r3, [r7, #4]
 8011fa4:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8011fa8:	4a7b      	ldr	r2, [pc, #492]	; (8012198 <problem_fetch+0x10ad4>)
 8011faa:	6810      	ldr	r0, [r2, #0]
 8011fac:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 8011fae:	687b      	ldr	r3, [r7, #4]
 8011fb0:	2207      	movs	r2, #7
 8011fb2:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,C,F,F,I,G,D");
 8011fb4:	687b      	ldr	r3, [r7, #4]
 8011fb6:	33a4      	adds	r3, #164	; 0xa4
 8011fb8:	4a7c      	ldr	r2, [pc, #496]	; (80121ac <problem_fetch+0x10ae8>)
 8011fba:	461c      	mov	r4, r3
 8011fbc:	4613      	mov	r3, r2
 8011fbe:	cb07      	ldmia	r3!, {r0, r1, r2}
 8011fc0:	6020      	str	r0, [r4, #0]
 8011fc2:	6061      	str	r1, [r4, #4]
 8011fc4:	60a2      	str	r2, [r4, #8]
 8011fc6:	881b      	ldrh	r3, [r3, #0]
 8011fc8:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,8,11,13,14,17,18");
 8011fca:	687b      	ldr	r3, [r7, #4]
 8011fcc:	3304      	adds	r3, #4
 8011fce:	4a78      	ldr	r2, [pc, #480]	; (80121b0 <problem_fetch+0x10aec>)
 8011fd0:	461d      	mov	r5, r3
 8011fd2:	4614      	mov	r4, r2
 8011fd4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8011fd6:	6028      	str	r0, [r5, #0]
 8011fd8:	6069      	str	r1, [r5, #4]
 8011fda:	60aa      	str	r2, [r5, #8]
 8011fdc:	60eb      	str	r3, [r5, #12]
 8011fde:	8823      	ldrh	r3, [r4, #0]
 8011fe0:	78a2      	ldrb	r2, [r4, #2]
 8011fe2:	822b      	strh	r3, [r5, #16]
 8011fe4:	4613      	mov	r3, r2
 8011fe6:	74ab      	strb	r3, [r5, #18]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 8011fe8:	687b      	ldr	r3, [r7, #4]
 8011fea:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8011fee:	4a71      	ldr	r2, [pc, #452]	; (80121b4 <problem_fetch+0x10af0>)
 8011ff0:	461c      	mov	r4, r3
 8011ff2:	4613      	mov	r3, r2
 8011ff4:	cb07      	ldmia	r3!, {r0, r1, r2}
 8011ff6:	6020      	str	r0, [r4, #0]
 8011ff8:	6061      	str	r1, [r4, #4]
 8011ffa:	60a2      	str	r2, [r4, #8]
 8011ffc:	881b      	ldrh	r3, [r3, #0]
 8011ffe:	81a3      	strh	r3, [r4, #12]
			break;
 8012000:	f00a ba90 	b.w	801c524 <problem_fetch+0x1ae60>
		case 488 :
			strcpy(p->name,"PAUNCH PINCHER");
 8012004:	687b      	ldr	r3, [r7, #4]
 8012006:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801200a:	4a6b      	ldr	r2, [pc, #428]	; (80121b8 <problem_fetch+0x10af4>)
 801200c:	461c      	mov	r4, r3
 801200e:	4613      	mov	r3, r2
 8012010:	cb07      	ldmia	r3!, {r0, r1, r2}
 8012012:	6020      	str	r0, [r4, #0]
 8012014:	6061      	str	r1, [r4, #4]
 8012016:	60a2      	str	r2, [r4, #8]
 8012018:	881a      	ldrh	r2, [r3, #0]
 801201a:	789b      	ldrb	r3, [r3, #2]
 801201c:	81a2      	strh	r2, [r4, #12]
 801201e:	73a3      	strb	r3, [r4, #14]
			strcpy(p->grade,"6C");
 8012020:	687b      	ldr	r3, [r7, #4]
 8012022:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8012026:	4a65      	ldr	r2, [pc, #404]	; (80121bc <problem_fetch+0x10af8>)
 8012028:	8811      	ldrh	r1, [r2, #0]
 801202a:	7892      	ldrb	r2, [r2, #2]
 801202c:	8019      	strh	r1, [r3, #0]
 801202e:	709a      	strb	r2, [r3, #2]
			p->moveSize = 10;
 8012030:	687b      	ldr	r3, [r7, #4]
 8012032:	220a      	movs	r2, #10
 8012034:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,H,H,F,C,F,G,C,K,I");
 8012036:	687b      	ldr	r3, [r7, #4]
 8012038:	33a4      	adds	r3, #164	; 0xa4
 801203a:	4a61      	ldr	r2, [pc, #388]	; (80121c0 <problem_fetch+0x10afc>)
 801203c:	461d      	mov	r5, r3
 801203e:	4614      	mov	r4, r2
 8012040:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8012042:	6028      	str	r0, [r5, #0]
 8012044:	6069      	str	r1, [r5, #4]
 8012046:	60aa      	str	r2, [r5, #8]
 8012048:	60eb      	str	r3, [r5, #12]
 801204a:	6820      	ldr	r0, [r4, #0]
 801204c:	6128      	str	r0, [r5, #16]
			strcpy(p->moveNumbers,"5,5,8,11,8,13,15,5,14,18");
 801204e:	687b      	ldr	r3, [r7, #4]
 8012050:	3304      	adds	r3, #4
 8012052:	4a5c      	ldr	r2, [pc, #368]	; (80121c4 <problem_fetch+0x10b00>)
 8012054:	461d      	mov	r5, r3
 8012056:	4614      	mov	r4, r2
 8012058:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801205a:	6028      	str	r0, [r5, #0]
 801205c:	6069      	str	r1, [r5, #4]
 801205e:	60aa      	str	r2, [r5, #8]
 8012060:	60eb      	str	r3, [r5, #12]
 8012062:	cc03      	ldmia	r4!, {r0, r1}
 8012064:	6128      	str	r0, [r5, #16]
 8012066:	6169      	str	r1, [r5, #20]
 8012068:	7823      	ldrb	r3, [r4, #0]
 801206a:	762b      	strb	r3, [r5, #24]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,d,d,e");
 801206c:	687b      	ldr	r3, [r7, #4]
 801206e:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8012072:	4a55      	ldr	r2, [pc, #340]	; (80121c8 <problem_fetch+0x10b04>)
 8012074:	461d      	mov	r5, r3
 8012076:	4614      	mov	r4, r2
 8012078:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801207a:	6028      	str	r0, [r5, #0]
 801207c:	6069      	str	r1, [r5, #4]
 801207e:	60aa      	str	r2, [r5, #8]
 8012080:	60eb      	str	r3, [r5, #12]
 8012082:	6820      	ldr	r0, [r4, #0]
 8012084:	6128      	str	r0, [r5, #16]
			break;
 8012086:	f00a ba4d 	b.w	801c524 <problem_fetch+0x1ae60>
		case 489 :
			strcpy(p->name,"CHAKA MAKA");
 801208a:	687b      	ldr	r3, [r7, #4]
 801208c:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8012090:	494e      	ldr	r1, [pc, #312]	; (80121cc <problem_fetch+0x10b08>)
 8012092:	461a      	mov	r2, r3
 8012094:	460b      	mov	r3, r1
 8012096:	cb03      	ldmia	r3!, {r0, r1}
 8012098:	6010      	str	r0, [r2, #0]
 801209a:	6051      	str	r1, [r2, #4]
 801209c:	8819      	ldrh	r1, [r3, #0]
 801209e:	789b      	ldrb	r3, [r3, #2]
 80120a0:	8111      	strh	r1, [r2, #8]
 80120a2:	7293      	strb	r3, [r2, #10]
			strcpy(p->grade,"7B");
 80120a4:	687b      	ldr	r3, [r7, #4]
 80120a6:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80120aa:	4a49      	ldr	r2, [pc, #292]	; (80121d0 <problem_fetch+0x10b0c>)
 80120ac:	8811      	ldrh	r1, [r2, #0]
 80120ae:	7892      	ldrb	r2, [r2, #2]
 80120b0:	8019      	strh	r1, [r3, #0]
 80120b2:	709a      	strb	r2, [r3, #2]
			p->moveSize = 7;
 80120b4:	687b      	ldr	r3, [r7, #4]
 80120b6:	2207      	movs	r2, #7
 80120b8:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"C,B,G,H,I,G,I");
 80120ba:	687b      	ldr	r3, [r7, #4]
 80120bc:	33a4      	adds	r3, #164	; 0xa4
 80120be:	4a45      	ldr	r2, [pc, #276]	; (80121d4 <problem_fetch+0x10b10>)
 80120c0:	461c      	mov	r4, r3
 80120c2:	4613      	mov	r3, r2
 80120c4:	cb07      	ldmia	r3!, {r0, r1, r2}
 80120c6:	6020      	str	r0, [r4, #0]
 80120c8:	6061      	str	r1, [r4, #4]
 80120ca:	60a2      	str	r2, [r4, #8]
 80120cc:	881b      	ldrh	r3, [r3, #0]
 80120ce:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,10,10,13,7,17,18");
 80120d0:	687b      	ldr	r3, [r7, #4]
 80120d2:	3304      	adds	r3, #4
 80120d4:	4a40      	ldr	r2, [pc, #256]	; (80121d8 <problem_fetch+0x10b14>)
 80120d6:	461d      	mov	r5, r3
 80120d8:	4614      	mov	r4, r2
 80120da:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80120dc:	6028      	str	r0, [r5, #0]
 80120de:	6069      	str	r1, [r5, #4]
 80120e0:	60aa      	str	r2, [r5, #8]
 80120e2:	60eb      	str	r3, [r5, #12]
 80120e4:	8823      	ldrh	r3, [r4, #0]
 80120e6:	78a2      	ldrb	r2, [r4, #2]
 80120e8:	822b      	strh	r3, [r5, #16]
 80120ea:	4613      	mov	r3, r2
 80120ec:	74ab      	strb	r3, [r5, #18]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 80120ee:	687b      	ldr	r3, [r7, #4]
 80120f0:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 80120f4:	4a2f      	ldr	r2, [pc, #188]	; (80121b4 <problem_fetch+0x10af0>)
 80120f6:	461c      	mov	r4, r3
 80120f8:	4613      	mov	r3, r2
 80120fa:	cb07      	ldmia	r3!, {r0, r1, r2}
 80120fc:	6020      	str	r0, [r4, #0]
 80120fe:	6061      	str	r1, [r4, #4]
 8012100:	60a2      	str	r2, [r4, #8]
 8012102:	881b      	ldrh	r3, [r3, #0]
 8012104:	81a3      	strh	r3, [r4, #12]
			break;
 8012106:	f00a ba0d 	b.w	801c524 <problem_fetch+0x1ae60>
		case 490 :
			strcpy(p->name,"SHOULDER 'SPLODER");
 801210a:	687b      	ldr	r3, [r7, #4]
 801210c:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8012110:	4a32      	ldr	r2, [pc, #200]	; (80121dc <problem_fetch+0x10b18>)
 8012112:	461d      	mov	r5, r3
 8012114:	4614      	mov	r4, r2
 8012116:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8012118:	6028      	str	r0, [r5, #0]
 801211a:	6069      	str	r1, [r5, #4]
 801211c:	60aa      	str	r2, [r5, #8]
 801211e:	60eb      	str	r3, [r5, #12]
 8012120:	8823      	ldrh	r3, [r4, #0]
 8012122:	822b      	strh	r3, [r5, #16]
			strcpy(p->grade,"7C");
 8012124:	687b      	ldr	r3, [r7, #4]
 8012126:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801212a:	4a2d      	ldr	r2, [pc, #180]	; (80121e0 <problem_fetch+0x10b1c>)
 801212c:	8811      	ldrh	r1, [r2, #0]
 801212e:	7892      	ldrb	r2, [r2, #2]
 8012130:	8019      	strh	r1, [r3, #0]
 8012132:	709a      	strb	r2, [r3, #2]
			p->moveSize = 6;
 8012134:	687b      	ldr	r3, [r7, #4]
 8012136:	2206      	movs	r2, #6
 8012138:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,J,E,J,E,D");
 801213a:	687b      	ldr	r3, [r7, #4]
 801213c:	33a4      	adds	r3, #164	; 0xa4
 801213e:	4a29      	ldr	r2, [pc, #164]	; (80121e4 <problem_fetch+0x10b20>)
 8012140:	461c      	mov	r4, r3
 8012142:	4613      	mov	r3, r2
 8012144:	cb07      	ldmia	r3!, {r0, r1, r2}
 8012146:	6020      	str	r0, [r4, #0]
 8012148:	6061      	str	r1, [r4, #4]
 801214a:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,7,9,12,14,18");
 801214c:	687b      	ldr	r3, [r7, #4]
 801214e:	3304      	adds	r3, #4
 8012150:	4a25      	ldr	r2, [pc, #148]	; (80121e8 <problem_fetch+0x10b24>)
 8012152:	461c      	mov	r4, r3
 8012154:	4613      	mov	r3, r2
 8012156:	cb07      	ldmia	r3!, {r0, r1, r2}
 8012158:	6020      	str	r0, [r4, #0]
 801215a:	6061      	str	r1, [r4, #4]
 801215c:	60a2      	str	r2, [r4, #8]
 801215e:	881a      	ldrh	r2, [r3, #0]
 8012160:	789b      	ldrb	r3, [r3, #2]
 8012162:	81a2      	strh	r2, [r4, #12]
 8012164:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 8012166:	687b      	ldr	r3, [r7, #4]
 8012168:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 801216c:	4a1f      	ldr	r2, [pc, #124]	; (80121ec <problem_fetch+0x10b28>)
 801216e:	461c      	mov	r4, r3
 8012170:	4613      	mov	r3, r2
 8012172:	cb07      	ldmia	r3!, {r0, r1, r2}
 8012174:	6020      	str	r0, [r4, #0]
 8012176:	6061      	str	r1, [r4, #4]
 8012178:	60a2      	str	r2, [r4, #8]
			break;
 801217a:	f00a b9d3 	b.w	801c524 <problem_fetch+0x1ae60>
 801217e:	bf00      	nop
 8012180:	080295ac 	.word	0x080295ac
 8012184:	080239f4 	.word	0x080239f4
 8012188:	080295b4 	.word	0x080295b4
 801218c:	08024d64 	.word	0x08024d64
 8012190:	080239a8 	.word	0x080239a8
 8012194:	080295bc 	.word	0x080295bc
 8012198:	08023990 	.word	0x08023990
 801219c:	080295c8 	.word	0x080295c8
 80121a0:	080295d4 	.word	0x080295d4
 80121a4:	08023d20 	.word	0x08023d20
 80121a8:	080295e0 	.word	0x080295e0
 80121ac:	080295ec 	.word	0x080295ec
 80121b0:	080295fc 	.word	0x080295fc
 80121b4:	080239dc 	.word	0x080239dc
 80121b8:	08029610 	.word	0x08029610
 80121bc:	08023920 	.word	0x08023920
 80121c0:	08029620 	.word	0x08029620
 80121c4:	08029634 	.word	0x08029634
 80121c8:	080240fc 	.word	0x080240fc
 80121cc:	08029650 	.word	0x08029650
 80121d0:	08023f4c 	.word	0x08023f4c
 80121d4:	0802965c 	.word	0x0802965c
 80121d8:	0802966c 	.word	0x0802966c
 80121dc:	08029680 	.word	0x08029680
 80121e0:	08024088 	.word	0x08024088
 80121e4:	08029694 	.word	0x08029694
 80121e8:	080296a0 	.word	0x080296a0
 80121ec:	08023bf0 	.word	0x08023bf0
		case 491 :
			strcpy(p->name,"BIG TIME BRUH");
 80121f0:	687b      	ldr	r3, [r7, #4]
 80121f2:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80121f6:	4aaa      	ldr	r2, [pc, #680]	; (80124a0 <problem_fetch+0x10ddc>)
 80121f8:	461c      	mov	r4, r3
 80121fa:	4613      	mov	r3, r2
 80121fc:	cb07      	ldmia	r3!, {r0, r1, r2}
 80121fe:	6020      	str	r0, [r4, #0]
 8012200:	6061      	str	r1, [r4, #4]
 8012202:	60a2      	str	r2, [r4, #8]
 8012204:	881b      	ldrh	r3, [r3, #0]
 8012206:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade,"6C");
 8012208:	687b      	ldr	r3, [r7, #4]
 801220a:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801220e:	4aa5      	ldr	r2, [pc, #660]	; (80124a4 <problem_fetch+0x10de0>)
 8012210:	8811      	ldrh	r1, [r2, #0]
 8012212:	7892      	ldrb	r2, [r2, #2]
 8012214:	8019      	strh	r1, [r3, #0]
 8012216:	709a      	strb	r2, [r3, #2]
			p->moveSize = 7;
 8012218:	687b      	ldr	r3, [r7, #4]
 801221a:	2207      	movs	r2, #7
 801221c:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,E,H,C,I,E,I");
 801221e:	687b      	ldr	r3, [r7, #4]
 8012220:	33a4      	adds	r3, #164	; 0xa4
 8012222:	4aa1      	ldr	r2, [pc, #644]	; (80124a8 <problem_fetch+0x10de4>)
 8012224:	461c      	mov	r4, r3
 8012226:	4613      	mov	r3, r2
 8012228:	cb07      	ldmia	r3!, {r0, r1, r2}
 801222a:	6020      	str	r0, [r4, #0]
 801222c:	6061      	str	r1, [r4, #4]
 801222e:	60a2      	str	r2, [r4, #8]
 8012230:	881b      	ldrh	r3, [r3, #0]
 8012232:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,6,10,13,14,16,18");
 8012234:	687b      	ldr	r3, [r7, #4]
 8012236:	3304      	adds	r3, #4
 8012238:	4a9c      	ldr	r2, [pc, #624]	; (80124ac <problem_fetch+0x10de8>)
 801223a:	461d      	mov	r5, r3
 801223c:	4614      	mov	r4, r2
 801223e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8012240:	6028      	str	r0, [r5, #0]
 8012242:	6069      	str	r1, [r5, #4]
 8012244:	60aa      	str	r2, [r5, #8]
 8012246:	60eb      	str	r3, [r5, #12]
 8012248:	8823      	ldrh	r3, [r4, #0]
 801224a:	78a2      	ldrb	r2, [r4, #2]
 801224c:	822b      	strh	r3, [r5, #16]
 801224e:	4613      	mov	r3, r2
 8012250:	74ab      	strb	r3, [r5, #18]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 8012252:	687b      	ldr	r3, [r7, #4]
 8012254:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8012258:	4a95      	ldr	r2, [pc, #596]	; (80124b0 <problem_fetch+0x10dec>)
 801225a:	461c      	mov	r4, r3
 801225c:	4613      	mov	r3, r2
 801225e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8012260:	6020      	str	r0, [r4, #0]
 8012262:	6061      	str	r1, [r4, #4]
 8012264:	60a2      	str	r2, [r4, #8]
 8012266:	881b      	ldrh	r3, [r3, #0]
 8012268:	81a3      	strh	r3, [r4, #12]
			break;
 801226a:	f00a b95b 	b.w	801c524 <problem_fetch+0x1ae60>
		case 492 :
			strcpy(p->name,"THE HUMAN FLAG");
 801226e:	687b      	ldr	r3, [r7, #4]
 8012270:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8012274:	4a8f      	ldr	r2, [pc, #572]	; (80124b4 <problem_fetch+0x10df0>)
 8012276:	461c      	mov	r4, r3
 8012278:	4613      	mov	r3, r2
 801227a:	cb07      	ldmia	r3!, {r0, r1, r2}
 801227c:	6020      	str	r0, [r4, #0]
 801227e:	6061      	str	r1, [r4, #4]
 8012280:	60a2      	str	r2, [r4, #8]
 8012282:	881a      	ldrh	r2, [r3, #0]
 8012284:	789b      	ldrb	r3, [r3, #2]
 8012286:	81a2      	strh	r2, [r4, #12]
 8012288:	73a3      	strb	r3, [r4, #14]
			strcpy(p->grade,"7A");
 801228a:	687b      	ldr	r3, [r7, #4]
 801228c:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8012290:	4a89      	ldr	r2, [pc, #548]	; (80124b8 <problem_fetch+0x10df4>)
 8012292:	8811      	ldrh	r1, [r2, #0]
 8012294:	7892      	ldrb	r2, [r2, #2]
 8012296:	8019      	strh	r1, [r3, #0]
 8012298:	709a      	strb	r2, [r3, #2]
			p->moveSize = 4;
 801229a:	687b      	ldr	r3, [r7, #4]
 801229c:	2204      	movs	r2, #4
 801229e:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,H,C,D");
 80122a0:	687b      	ldr	r3, [r7, #4]
 80122a2:	33a4      	adds	r3, #164	; 0xa4
 80122a4:	4985      	ldr	r1, [pc, #532]	; (80124bc <problem_fetch+0x10df8>)
 80122a6:	461a      	mov	r2, r3
 80122a8:	460b      	mov	r3, r1
 80122aa:	cb03      	ldmia	r3!, {r0, r1}
 80122ac:	6010      	str	r0, [r2, #0]
 80122ae:	6051      	str	r1, [r2, #4]
			strcpy(p->moveNumbers,"6,10,13,18");
 80122b0:	687b      	ldr	r3, [r7, #4]
 80122b2:	3304      	adds	r3, #4
 80122b4:	4982      	ldr	r1, [pc, #520]	; (80124c0 <problem_fetch+0x10dfc>)
 80122b6:	461a      	mov	r2, r3
 80122b8:	460b      	mov	r3, r1
 80122ba:	cb03      	ldmia	r3!, {r0, r1}
 80122bc:	6010      	str	r0, [r2, #0]
 80122be:	6051      	str	r1, [r2, #4]
 80122c0:	8819      	ldrh	r1, [r3, #0]
 80122c2:	789b      	ldrb	r3, [r3, #2]
 80122c4:	8111      	strh	r1, [r2, #8]
 80122c6:	7293      	strb	r3, [r2, #10]
			strcpy(p->startFinish,"s,d,d,e");
 80122c8:	687b      	ldr	r3, [r7, #4]
 80122ca:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 80122ce:	497d      	ldr	r1, [pc, #500]	; (80124c4 <problem_fetch+0x10e00>)
 80122d0:	461a      	mov	r2, r3
 80122d2:	460b      	mov	r3, r1
 80122d4:	cb03      	ldmia	r3!, {r0, r1}
 80122d6:	6010      	str	r0, [r2, #0]
 80122d8:	6051      	str	r1, [r2, #4]
			break;
 80122da:	f00a b923 	b.w	801c524 <problem_fetch+0x1ae60>
		case 493 :
			strcpy(p->name,"WINGSPAN");
 80122de:	687b      	ldr	r3, [r7, #4]
 80122e0:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80122e4:	4978      	ldr	r1, [pc, #480]	; (80124c8 <problem_fetch+0x10e04>)
 80122e6:	461a      	mov	r2, r3
 80122e8:	460b      	mov	r3, r1
 80122ea:	cb03      	ldmia	r3!, {r0, r1}
 80122ec:	6010      	str	r0, [r2, #0]
 80122ee:	6051      	str	r1, [r2, #4]
 80122f0:	781b      	ldrb	r3, [r3, #0]
 80122f2:	7213      	strb	r3, [r2, #8]
			strcpy(p->grade,"7A+");
 80122f4:	687b      	ldr	r3, [r7, #4]
 80122f6:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80122fa:	4a74      	ldr	r2, [pc, #464]	; (80124cc <problem_fetch+0x10e08>)
 80122fc:	6810      	ldr	r0, [r2, #0]
 80122fe:	6018      	str	r0, [r3, #0]
			p->moveSize = 5;
 8012300:	687b      	ldr	r3, [r7, #4]
 8012302:	2205      	movs	r2, #5
 8012304:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"C,C,F,A,D");
 8012306:	687b      	ldr	r3, [r7, #4]
 8012308:	33a4      	adds	r3, #164	; 0xa4
 801230a:	4971      	ldr	r1, [pc, #452]	; (80124d0 <problem_fetch+0x10e0c>)
 801230c:	461a      	mov	r2, r3
 801230e:	460b      	mov	r3, r1
 8012310:	cb03      	ldmia	r3!, {r0, r1}
 8012312:	6010      	str	r0, [r2, #0]
 8012314:	6051      	str	r1, [r2, #4]
 8012316:	881b      	ldrh	r3, [r3, #0]
 8012318:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"5,8,11,14,18");
 801231a:	687b      	ldr	r3, [r7, #4]
 801231c:	3304      	adds	r3, #4
 801231e:	4a6d      	ldr	r2, [pc, #436]	; (80124d4 <problem_fetch+0x10e10>)
 8012320:	461c      	mov	r4, r3
 8012322:	4613      	mov	r3, r2
 8012324:	cb07      	ldmia	r3!, {r0, r1, r2}
 8012326:	6020      	str	r0, [r4, #0]
 8012328:	6061      	str	r1, [r4, #4]
 801232a:	60a2      	str	r2, [r4, #8]
 801232c:	781b      	ldrb	r3, [r3, #0]
 801232e:	7323      	strb	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,e");
 8012330:	687b      	ldr	r3, [r7, #4]
 8012332:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8012336:	4968      	ldr	r1, [pc, #416]	; (80124d8 <problem_fetch+0x10e14>)
 8012338:	461a      	mov	r2, r3
 801233a:	460b      	mov	r3, r1
 801233c:	cb03      	ldmia	r3!, {r0, r1}
 801233e:	6010      	str	r0, [r2, #0]
 8012340:	6051      	str	r1, [r2, #4]
 8012342:	881b      	ldrh	r3, [r3, #0]
 8012344:	8113      	strh	r3, [r2, #8]
			break;
 8012346:	f00a b8ed 	b.w	801c524 <problem_fetch+0x1ae60>
		case 494 :
			strcpy(p->name,"BELLE NOIRE");
 801234a:	687b      	ldr	r3, [r7, #4]
 801234c:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8012350:	4a62      	ldr	r2, [pc, #392]	; (80124dc <problem_fetch+0x10e18>)
 8012352:	461c      	mov	r4, r3
 8012354:	4613      	mov	r3, r2
 8012356:	cb07      	ldmia	r3!, {r0, r1, r2}
 8012358:	6020      	str	r0, [r4, #0]
 801235a:	6061      	str	r1, [r4, #4]
 801235c:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade,"7A+");
 801235e:	687b      	ldr	r3, [r7, #4]
 8012360:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8012364:	4a59      	ldr	r2, [pc, #356]	; (80124cc <problem_fetch+0x10e08>)
 8012366:	6810      	ldr	r0, [r2, #0]
 8012368:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 801236a:	687b      	ldr	r3, [r7, #4]
 801236c:	2207      	movs	r2, #7
 801236e:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,E,E,E,J,I,I");
 8012370:	687b      	ldr	r3, [r7, #4]
 8012372:	33a4      	adds	r3, #164	; 0xa4
 8012374:	4a5a      	ldr	r2, [pc, #360]	; (80124e0 <problem_fetch+0x10e1c>)
 8012376:	461c      	mov	r4, r3
 8012378:	4613      	mov	r3, r2
 801237a:	cb07      	ldmia	r3!, {r0, r1, r2}
 801237c:	6020      	str	r0, [r4, #0]
 801237e:	6061      	str	r1, [r4, #4]
 8012380:	60a2      	str	r2, [r4, #8]
 8012382:	881b      	ldrh	r3, [r3, #0]
 8012384:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,8,9,12,13,15,18");
 8012386:	687b      	ldr	r3, [r7, #4]
 8012388:	3304      	adds	r3, #4
 801238a:	4a56      	ldr	r2, [pc, #344]	; (80124e4 <problem_fetch+0x10e20>)
 801238c:	461d      	mov	r5, r3
 801238e:	4614      	mov	r4, r2
 8012390:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8012392:	6028      	str	r0, [r5, #0]
 8012394:	6069      	str	r1, [r5, #4]
 8012396:	60aa      	str	r2, [r5, #8]
 8012398:	60eb      	str	r3, [r5, #12]
 801239a:	8823      	ldrh	r3, [r4, #0]
 801239c:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 801239e:	687b      	ldr	r3, [r7, #4]
 80123a0:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 80123a4:	4a42      	ldr	r2, [pc, #264]	; (80124b0 <problem_fetch+0x10dec>)
 80123a6:	461c      	mov	r4, r3
 80123a8:	4613      	mov	r3, r2
 80123aa:	cb07      	ldmia	r3!, {r0, r1, r2}
 80123ac:	6020      	str	r0, [r4, #0]
 80123ae:	6061      	str	r1, [r4, #4]
 80123b0:	60a2      	str	r2, [r4, #8]
 80123b2:	881b      	ldrh	r3, [r3, #0]
 80123b4:	81a3      	strh	r3, [r4, #12]
			break;
 80123b6:	f00a b8b5 	b.w	801c524 <problem_fetch+0x1ae60>
		case 495 :
			strcpy(p->name,"VORPAL SWORD");
 80123ba:	687b      	ldr	r3, [r7, #4]
 80123bc:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80123c0:	4a49      	ldr	r2, [pc, #292]	; (80124e8 <problem_fetch+0x10e24>)
 80123c2:	461c      	mov	r4, r3
 80123c4:	4613      	mov	r3, r2
 80123c6:	cb07      	ldmia	r3!, {r0, r1, r2}
 80123c8:	6020      	str	r0, [r4, #0]
 80123ca:	6061      	str	r1, [r4, #4]
 80123cc:	60a2      	str	r2, [r4, #8]
 80123ce:	781b      	ldrb	r3, [r3, #0]
 80123d0:	7323      	strb	r3, [r4, #12]
			strcpy(p->grade,"7A+");
 80123d2:	687b      	ldr	r3, [r7, #4]
 80123d4:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80123d8:	4a3c      	ldr	r2, [pc, #240]	; (80124cc <problem_fetch+0x10e08>)
 80123da:	6810      	ldr	r0, [r2, #0]
 80123dc:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 80123de:	687b      	ldr	r3, [r7, #4]
 80123e0:	2206      	movs	r2, #6
 80123e2:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,E,G,H,H,I");
 80123e4:	687b      	ldr	r3, [r7, #4]
 80123e6:	33a4      	adds	r3, #164	; 0xa4
 80123e8:	4a40      	ldr	r2, [pc, #256]	; (80124ec <problem_fetch+0x10e28>)
 80123ea:	461c      	mov	r4, r3
 80123ec:	4613      	mov	r3, r2
 80123ee:	cb07      	ldmia	r3!, {r0, r1, r2}
 80123f0:	6020      	str	r0, [r4, #0]
 80123f2:	6061      	str	r1, [r4, #4]
 80123f4:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,8,9,12,16,18");
 80123f6:	687b      	ldr	r3, [r7, #4]
 80123f8:	3304      	adds	r3, #4
 80123fa:	4a3d      	ldr	r2, [pc, #244]	; (80124f0 <problem_fetch+0x10e2c>)
 80123fc:	461c      	mov	r4, r3
 80123fe:	4613      	mov	r3, r2
 8012400:	cb07      	ldmia	r3!, {r0, r1, r2}
 8012402:	6020      	str	r0, [r4, #0]
 8012404:	6061      	str	r1, [r4, #4]
 8012406:	60a2      	str	r2, [r4, #8]
 8012408:	881a      	ldrh	r2, [r3, #0]
 801240a:	789b      	ldrb	r3, [r3, #2]
 801240c:	81a2      	strh	r2, [r4, #12]
 801240e:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 8012410:	687b      	ldr	r3, [r7, #4]
 8012412:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8012416:	4a37      	ldr	r2, [pc, #220]	; (80124f4 <problem_fetch+0x10e30>)
 8012418:	461c      	mov	r4, r3
 801241a:	4613      	mov	r3, r2
 801241c:	cb07      	ldmia	r3!, {r0, r1, r2}
 801241e:	6020      	str	r0, [r4, #0]
 8012420:	6061      	str	r1, [r4, #4]
 8012422:	60a2      	str	r2, [r4, #8]
			break;
 8012424:	f00a b87e 	b.w	801c524 <problem_fetch+0x1ae60>
		case 496 :
			strcpy(p->name,"INSANE IN THE BRAIN");
 8012428:	687b      	ldr	r3, [r7, #4]
 801242a:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801242e:	4a32      	ldr	r2, [pc, #200]	; (80124f8 <problem_fetch+0x10e34>)
 8012430:	461d      	mov	r5, r3
 8012432:	4614      	mov	r4, r2
 8012434:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8012436:	6028      	str	r0, [r5, #0]
 8012438:	6069      	str	r1, [r5, #4]
 801243a:	60aa      	str	r2, [r5, #8]
 801243c:	60eb      	str	r3, [r5, #12]
 801243e:	6820      	ldr	r0, [r4, #0]
 8012440:	6128      	str	r0, [r5, #16]
			strcpy(p->grade,"6B+");
 8012442:	687b      	ldr	r3, [r7, #4]
 8012444:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8012448:	4a2c      	ldr	r2, [pc, #176]	; (80124fc <problem_fetch+0x10e38>)
 801244a:	6810      	ldr	r0, [r2, #0]
 801244c:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 801244e:	687b      	ldr	r3, [r7, #4]
 8012450:	2207      	movs	r2, #7
 8012452:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,E,E,E,B,A,D");
 8012454:	687b      	ldr	r3, [r7, #4]
 8012456:	33a4      	adds	r3, #164	; 0xa4
 8012458:	4a29      	ldr	r2, [pc, #164]	; (8012500 <problem_fetch+0x10e3c>)
 801245a:	461c      	mov	r4, r3
 801245c:	4613      	mov	r3, r2
 801245e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8012460:	6020      	str	r0, [r4, #0]
 8012462:	6061      	str	r1, [r4, #4]
 8012464:	60a2      	str	r2, [r4, #8]
 8012466:	881b      	ldrh	r3, [r3, #0]
 8012468:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,6,12,8,10,14,18");
 801246a:	687b      	ldr	r3, [r7, #4]
 801246c:	3304      	adds	r3, #4
 801246e:	4a25      	ldr	r2, [pc, #148]	; (8012504 <problem_fetch+0x10e40>)
 8012470:	461d      	mov	r5, r3
 8012472:	4614      	mov	r4, r2
 8012474:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8012476:	6028      	str	r0, [r5, #0]
 8012478:	6069      	str	r1, [r5, #4]
 801247a:	60aa      	str	r2, [r5, #8]
 801247c:	60eb      	str	r3, [r5, #12]
 801247e:	8823      	ldrh	r3, [r4, #0]
 8012480:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,s,d,d,d,d,e");
 8012482:	687b      	ldr	r3, [r7, #4]
 8012484:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8012488:	4a1f      	ldr	r2, [pc, #124]	; (8012508 <problem_fetch+0x10e44>)
 801248a:	461c      	mov	r4, r3
 801248c:	4613      	mov	r3, r2
 801248e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8012490:	6020      	str	r0, [r4, #0]
 8012492:	6061      	str	r1, [r4, #4]
 8012494:	60a2      	str	r2, [r4, #8]
 8012496:	881b      	ldrh	r3, [r3, #0]
 8012498:	81a3      	strh	r3, [r4, #12]
			break;
 801249a:	f00a b843 	b.w	801c524 <problem_fetch+0x1ae60>
 801249e:	bf00      	nop
 80124a0:	080296b0 	.word	0x080296b0
 80124a4:	08023920 	.word	0x08023920
 80124a8:	080296c0 	.word	0x080296c0
 80124ac:	080296d0 	.word	0x080296d0
 80124b0:	080239dc 	.word	0x080239dc
 80124b4:	080296e4 	.word	0x080296e4
 80124b8:	08023814 	.word	0x08023814
 80124bc:	080296f4 	.word	0x080296f4
 80124c0:	08026e60 	.word	0x08026e60
 80124c4:	080239a8 	.word	0x080239a8
 80124c8:	080296fc 	.word	0x080296fc
 80124cc:	080239f4 	.word	0x080239f4
 80124d0:	08029708 	.word	0x08029708
 80124d4:	08026fe0 	.word	0x08026fe0
 80124d8:	08023d20 	.word	0x08023d20
 80124dc:	08029714 	.word	0x08029714
 80124e0:	08029720 	.word	0x08029720
 80124e4:	08029730 	.word	0x08029730
 80124e8:	08029744 	.word	0x08029744
 80124ec:	08029754 	.word	0x08029754
 80124f0:	08028778 	.word	0x08028778
 80124f4:	08023bf0 	.word	0x08023bf0
 80124f8:	08029760 	.word	0x08029760
 80124fc:	08023854 	.word	0x08023854
 8012500:	08029774 	.word	0x08029774
 8012504:	08029784 	.word	0x08029784
 8012508:	080238cc 	.word	0x080238cc
		case 497 :
			strcpy(p->name,"MARCUS IS THE PROBLEM");
 801250c:	687b      	ldr	r3, [r7, #4]
 801250e:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8012512:	4ab6      	ldr	r2, [pc, #728]	; (80127ec <problem_fetch+0x11128>)
 8012514:	461d      	mov	r5, r3
 8012516:	4614      	mov	r4, r2
 8012518:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801251a:	6028      	str	r0, [r5, #0]
 801251c:	6069      	str	r1, [r5, #4]
 801251e:	60aa      	str	r2, [r5, #8]
 8012520:	60eb      	str	r3, [r5, #12]
 8012522:	6820      	ldr	r0, [r4, #0]
 8012524:	6128      	str	r0, [r5, #16]
 8012526:	88a3      	ldrh	r3, [r4, #4]
 8012528:	82ab      	strh	r3, [r5, #20]
			strcpy(p->grade,"6C");
 801252a:	687b      	ldr	r3, [r7, #4]
 801252c:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8012530:	4aaf      	ldr	r2, [pc, #700]	; (80127f0 <problem_fetch+0x1112c>)
 8012532:	8811      	ldrh	r1, [r2, #0]
 8012534:	7892      	ldrb	r2, [r2, #2]
 8012536:	8019      	strh	r1, [r3, #0]
 8012538:	709a      	strb	r2, [r3, #2]
			p->moveSize = 8;
 801253a:	687b      	ldr	r3, [r7, #4]
 801253c:	2208      	movs	r2, #8
 801253e:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"E,H,G,D,E,A,E,D");
 8012540:	687b      	ldr	r3, [r7, #4]
 8012542:	33a4      	adds	r3, #164	; 0xa4
 8012544:	4aab      	ldr	r2, [pc, #684]	; (80127f4 <problem_fetch+0x11130>)
 8012546:	461c      	mov	r4, r3
 8012548:	4615      	mov	r5, r2
 801254a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801254c:	6020      	str	r0, [r4, #0]
 801254e:	6061      	str	r1, [r4, #4]
 8012550:	60a2      	str	r2, [r4, #8]
 8012552:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"6,5,9,11,12,14,16,18");
 8012554:	687b      	ldr	r3, [r7, #4]
 8012556:	3304      	adds	r3, #4
 8012558:	4aa7      	ldr	r2, [pc, #668]	; (80127f8 <problem_fetch+0x11134>)
 801255a:	461d      	mov	r5, r3
 801255c:	4614      	mov	r4, r2
 801255e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8012560:	6028      	str	r0, [r5, #0]
 8012562:	6069      	str	r1, [r5, #4]
 8012564:	60aa      	str	r2, [r5, #8]
 8012566:	60eb      	str	r3, [r5, #12]
 8012568:	6820      	ldr	r0, [r4, #0]
 801256a:	6128      	str	r0, [r5, #16]
 801256c:	7923      	ldrb	r3, [r4, #4]
 801256e:	752b      	strb	r3, [r5, #20]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,e");
 8012570:	687b      	ldr	r3, [r7, #4]
 8012572:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8012576:	4aa1      	ldr	r2, [pc, #644]	; (80127fc <problem_fetch+0x11138>)
 8012578:	461c      	mov	r4, r3
 801257a:	4615      	mov	r5, r2
 801257c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801257e:	6020      	str	r0, [r4, #0]
 8012580:	6061      	str	r1, [r4, #4]
 8012582:	60a2      	str	r2, [r4, #8]
 8012584:	60e3      	str	r3, [r4, #12]
			break;
 8012586:	f009 bfcd 	b.w	801c524 <problem_fetch+0x1ae60>
		case 498 :
			strcpy(p->name,"SACRED COW");
 801258a:	687b      	ldr	r3, [r7, #4]
 801258c:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8012590:	499b      	ldr	r1, [pc, #620]	; (8012800 <problem_fetch+0x1113c>)
 8012592:	461a      	mov	r2, r3
 8012594:	460b      	mov	r3, r1
 8012596:	cb03      	ldmia	r3!, {r0, r1}
 8012598:	6010      	str	r0, [r2, #0]
 801259a:	6051      	str	r1, [r2, #4]
 801259c:	8819      	ldrh	r1, [r3, #0]
 801259e:	789b      	ldrb	r3, [r3, #2]
 80125a0:	8111      	strh	r1, [r2, #8]
 80125a2:	7293      	strb	r3, [r2, #10]
			strcpy(p->grade,"7A");
 80125a4:	687b      	ldr	r3, [r7, #4]
 80125a6:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80125aa:	4a96      	ldr	r2, [pc, #600]	; (8012804 <problem_fetch+0x11140>)
 80125ac:	8811      	ldrh	r1, [r2, #0]
 80125ae:	7892      	ldrb	r2, [r2, #2]
 80125b0:	8019      	strh	r1, [r3, #0]
 80125b2:	709a      	strb	r2, [r3, #2]
			p->moveSize = 11;
 80125b4:	687b      	ldr	r3, [r7, #4]
 80125b6:	220b      	movs	r2, #11
 80125b8:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"E,G,I,C,A,C,H,G,H,I,I");
 80125ba:	687b      	ldr	r3, [r7, #4]
 80125bc:	33a4      	adds	r3, #164	; 0xa4
 80125be:	4a92      	ldr	r2, [pc, #584]	; (8012808 <problem_fetch+0x11144>)
 80125c0:	461d      	mov	r5, r3
 80125c2:	4614      	mov	r4, r2
 80125c4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80125c6:	6028      	str	r0, [r5, #0]
 80125c8:	6069      	str	r1, [r5, #4]
 80125ca:	60aa      	str	r2, [r5, #8]
 80125cc:	60eb      	str	r3, [r5, #12]
 80125ce:	6820      	ldr	r0, [r4, #0]
 80125d0:	6128      	str	r0, [r5, #16]
 80125d2:	88a3      	ldrh	r3, [r4, #4]
 80125d4:	82ab      	strh	r3, [r5, #20]
			strcpy(p->moveNumbers,"6,4,14,13,9,8,10,9,8,7,18");
 80125d6:	687b      	ldr	r3, [r7, #4]
 80125d8:	3304      	adds	r3, #4
 80125da:	4a8c      	ldr	r2, [pc, #560]	; (801280c <problem_fetch+0x11148>)
 80125dc:	461d      	mov	r5, r3
 80125de:	4614      	mov	r4, r2
 80125e0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80125e2:	6028      	str	r0, [r5, #0]
 80125e4:	6069      	str	r1, [r5, #4]
 80125e6:	60aa      	str	r2, [r5, #8]
 80125e8:	60eb      	str	r3, [r5, #12]
 80125ea:	cc03      	ldmia	r4!, {r0, r1}
 80125ec:	6128      	str	r0, [r5, #16]
 80125ee:	6169      	str	r1, [r5, #20]
 80125f0:	8823      	ldrh	r3, [r4, #0]
 80125f2:	832b      	strh	r3, [r5, #24]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,d,d,d,e");
 80125f4:	687b      	ldr	r3, [r7, #4]
 80125f6:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 80125fa:	4a85      	ldr	r2, [pc, #532]	; (8012810 <problem_fetch+0x1114c>)
 80125fc:	461d      	mov	r5, r3
 80125fe:	4614      	mov	r4, r2
 8012600:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8012602:	6028      	str	r0, [r5, #0]
 8012604:	6069      	str	r1, [r5, #4]
 8012606:	60aa      	str	r2, [r5, #8]
 8012608:	60eb      	str	r3, [r5, #12]
 801260a:	6820      	ldr	r0, [r4, #0]
 801260c:	6128      	str	r0, [r5, #16]
 801260e:	88a3      	ldrh	r3, [r4, #4]
 8012610:	82ab      	strh	r3, [r5, #20]
			break;
 8012612:	f009 bf87 	b.w	801c524 <problem_fetch+0x1ae60>
		case 499 :
			strcpy(p->name,"BABA BLACK SHEEP");
 8012616:	687b      	ldr	r3, [r7, #4]
 8012618:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801261c:	4a7d      	ldr	r2, [pc, #500]	; (8012814 <problem_fetch+0x11150>)
 801261e:	461d      	mov	r5, r3
 8012620:	4614      	mov	r4, r2
 8012622:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8012624:	6028      	str	r0, [r5, #0]
 8012626:	6069      	str	r1, [r5, #4]
 8012628:	60aa      	str	r2, [r5, #8]
 801262a:	60eb      	str	r3, [r5, #12]
 801262c:	7823      	ldrb	r3, [r4, #0]
 801262e:	742b      	strb	r3, [r5, #16]
			strcpy(p->grade,"7A");
 8012630:	687b      	ldr	r3, [r7, #4]
 8012632:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8012636:	4a73      	ldr	r2, [pc, #460]	; (8012804 <problem_fetch+0x11140>)
 8012638:	8811      	ldrh	r1, [r2, #0]
 801263a:	7892      	ldrb	r2, [r2, #2]
 801263c:	8019      	strh	r1, [r3, #0]
 801263e:	709a      	strb	r2, [r3, #2]
			p->moveSize = 10;
 8012640:	687b      	ldr	r3, [r7, #4]
 8012642:	220a      	movs	r2, #10
 8012644:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"E,G,C,I,H,G,H,I,C,I");
 8012646:	687b      	ldr	r3, [r7, #4]
 8012648:	33a4      	adds	r3, #164	; 0xa4
 801264a:	4a73      	ldr	r2, [pc, #460]	; (8012818 <problem_fetch+0x11154>)
 801264c:	461d      	mov	r5, r3
 801264e:	4614      	mov	r4, r2
 8012650:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8012652:	6028      	str	r0, [r5, #0]
 8012654:	6069      	str	r1, [r5, #4]
 8012656:	60aa      	str	r2, [r5, #8]
 8012658:	60eb      	str	r3, [r5, #12]
 801265a:	6820      	ldr	r0, [r4, #0]
 801265c:	6128      	str	r0, [r5, #16]
			strcpy(p->moveNumbers,"6,4,13,14,10,9,8,7,8,18");
 801265e:	687b      	ldr	r3, [r7, #4]
 8012660:	3304      	adds	r3, #4
 8012662:	4a6e      	ldr	r2, [pc, #440]	; (801281c <problem_fetch+0x11158>)
 8012664:	461d      	mov	r5, r3
 8012666:	4614      	mov	r4, r2
 8012668:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801266a:	6028      	str	r0, [r5, #0]
 801266c:	6069      	str	r1, [r5, #4]
 801266e:	60aa      	str	r2, [r5, #8]
 8012670:	60eb      	str	r3, [r5, #12]
 8012672:	cc03      	ldmia	r4!, {r0, r1}
 8012674:	6128      	str	r0, [r5, #16]
 8012676:	6169      	str	r1, [r5, #20]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,d,d,e");
 8012678:	687b      	ldr	r3, [r7, #4]
 801267a:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 801267e:	4a68      	ldr	r2, [pc, #416]	; (8012820 <problem_fetch+0x1115c>)
 8012680:	461d      	mov	r5, r3
 8012682:	4614      	mov	r4, r2
 8012684:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8012686:	6028      	str	r0, [r5, #0]
 8012688:	6069      	str	r1, [r5, #4]
 801268a:	60aa      	str	r2, [r5, #8]
 801268c:	60eb      	str	r3, [r5, #12]
 801268e:	6820      	ldr	r0, [r4, #0]
 8012690:	6128      	str	r0, [r5, #16]
			break;
 8012692:	f009 bf47 	b.w	801c524 <problem_fetch+0x1ae60>
		case 500 :
			strcpy(p->name,"BLACK SHEEP");
 8012696:	687b      	ldr	r3, [r7, #4]
 8012698:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801269c:	4a61      	ldr	r2, [pc, #388]	; (8012824 <problem_fetch+0x11160>)
 801269e:	461c      	mov	r4, r3
 80126a0:	4613      	mov	r3, r2
 80126a2:	cb07      	ldmia	r3!, {r0, r1, r2}
 80126a4:	6020      	str	r0, [r4, #0]
 80126a6:	6061      	str	r1, [r4, #4]
 80126a8:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade,"6B+");
 80126aa:	687b      	ldr	r3, [r7, #4]
 80126ac:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80126b0:	4a5d      	ldr	r2, [pc, #372]	; (8012828 <problem_fetch+0x11164>)
 80126b2:	6810      	ldr	r0, [r2, #0]
 80126b4:	6018      	str	r0, [r3, #0]
			p->moveSize = 8;
 80126b6:	687b      	ldr	r3, [r7, #4]
 80126b8:	2208      	movs	r2, #8
 80126ba:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,C,H,G,H,I,C,I");
 80126bc:	687b      	ldr	r3, [r7, #4]
 80126be:	33a4      	adds	r3, #164	; 0xa4
 80126c0:	4a5a      	ldr	r2, [pc, #360]	; (801282c <problem_fetch+0x11168>)
 80126c2:	461c      	mov	r4, r3
 80126c4:	4615      	mov	r5, r2
 80126c6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80126c8:	6020      	str	r0, [r4, #0]
 80126ca:	6061      	str	r1, [r4, #4]
 80126cc:	60a2      	str	r2, [r4, #8]
 80126ce:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,13,10,9,8,7,8,18");
 80126d0:	687b      	ldr	r3, [r7, #4]
 80126d2:	3304      	adds	r3, #4
 80126d4:	4a56      	ldr	r2, [pc, #344]	; (8012830 <problem_fetch+0x1116c>)
 80126d6:	461d      	mov	r5, r3
 80126d8:	4614      	mov	r4, r2
 80126da:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80126dc:	6028      	str	r0, [r5, #0]
 80126de:	6069      	str	r1, [r5, #4]
 80126e0:	60aa      	str	r2, [r5, #8]
 80126e2:	60eb      	str	r3, [r5, #12]
 80126e4:	8823      	ldrh	r3, [r4, #0]
 80126e6:	78a2      	ldrb	r2, [r4, #2]
 80126e8:	822b      	strh	r3, [r5, #16]
 80126ea:	4613      	mov	r3, r2
 80126ec:	74ab      	strb	r3, [r5, #18]
			strcpy(p->startFinish,"s,d,d,d,d,d,d,e");
 80126ee:	687b      	ldr	r3, [r7, #4]
 80126f0:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 80126f4:	4a4f      	ldr	r2, [pc, #316]	; (8012834 <problem_fetch+0x11170>)
 80126f6:	461c      	mov	r4, r3
 80126f8:	4615      	mov	r5, r2
 80126fa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80126fc:	6020      	str	r0, [r4, #0]
 80126fe:	6061      	str	r1, [r4, #4]
 8012700:	60a2      	str	r2, [r4, #8]
 8012702:	60e3      	str	r3, [r4, #12]
			break;
 8012704:	f009 bf0e 	b.w	801c524 <problem_fetch+0x1ae60>
		case 501 :
			strcpy(p->name,"TIGELLA OF DREAM");
 8012708:	687b      	ldr	r3, [r7, #4]
 801270a:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801270e:	4a4a      	ldr	r2, [pc, #296]	; (8012838 <problem_fetch+0x11174>)
 8012710:	461d      	mov	r5, r3
 8012712:	4614      	mov	r4, r2
 8012714:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8012716:	6028      	str	r0, [r5, #0]
 8012718:	6069      	str	r1, [r5, #4]
 801271a:	60aa      	str	r2, [r5, #8]
 801271c:	60eb      	str	r3, [r5, #12]
 801271e:	7823      	ldrb	r3, [r4, #0]
 8012720:	742b      	strb	r3, [r5, #16]
			strcpy(p->grade,"7A");
 8012722:	687b      	ldr	r3, [r7, #4]
 8012724:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8012728:	4a36      	ldr	r2, [pc, #216]	; (8012804 <problem_fetch+0x11140>)
 801272a:	8811      	ldrh	r1, [r2, #0]
 801272c:	7892      	ldrb	r2, [r2, #2]
 801272e:	8019      	strh	r1, [r3, #0]
 8012730:	709a      	strb	r2, [r3, #2]
			p->moveSize = 5;
 8012732:	687b      	ldr	r3, [r7, #4]
 8012734:	2205      	movs	r2, #5
 8012736:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"H,F,C,E,D");
 8012738:	687b      	ldr	r3, [r7, #4]
 801273a:	33a4      	adds	r3, #164	; 0xa4
 801273c:	493f      	ldr	r1, [pc, #252]	; (801283c <problem_fetch+0x11178>)
 801273e:	461a      	mov	r2, r3
 8012740:	460b      	mov	r3, r1
 8012742:	cb03      	ldmia	r3!, {r0, r1}
 8012744:	6010      	str	r0, [r2, #0]
 8012746:	6051      	str	r1, [r2, #4]
 8012748:	881b      	ldrh	r3, [r3, #0]
 801274a:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"5,11,13,6,18");
 801274c:	687b      	ldr	r3, [r7, #4]
 801274e:	3304      	adds	r3, #4
 8012750:	4a3b      	ldr	r2, [pc, #236]	; (8012840 <problem_fetch+0x1117c>)
 8012752:	461c      	mov	r4, r3
 8012754:	4613      	mov	r3, r2
 8012756:	cb07      	ldmia	r3!, {r0, r1, r2}
 8012758:	6020      	str	r0, [r4, #0]
 801275a:	6061      	str	r1, [r4, #4]
 801275c:	60a2      	str	r2, [r4, #8]
 801275e:	781b      	ldrb	r3, [r3, #0]
 8012760:	7323      	strb	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,e");
 8012762:	687b      	ldr	r3, [r7, #4]
 8012764:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8012768:	4936      	ldr	r1, [pc, #216]	; (8012844 <problem_fetch+0x11180>)
 801276a:	461a      	mov	r2, r3
 801276c:	460b      	mov	r3, r1
 801276e:	cb03      	ldmia	r3!, {r0, r1}
 8012770:	6010      	str	r0, [r2, #0]
 8012772:	6051      	str	r1, [r2, #4]
 8012774:	881b      	ldrh	r3, [r3, #0]
 8012776:	8113      	strh	r3, [r2, #8]
			break;
 8012778:	f009 bed4 	b.w	801c524 <problem_fetch+0x1ae60>
		case 502 :
			strcpy(p->name,"AGRO-VATED");
 801277c:	687b      	ldr	r3, [r7, #4]
 801277e:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8012782:	4931      	ldr	r1, [pc, #196]	; (8012848 <problem_fetch+0x11184>)
 8012784:	461a      	mov	r2, r3
 8012786:	460b      	mov	r3, r1
 8012788:	cb03      	ldmia	r3!, {r0, r1}
 801278a:	6010      	str	r0, [r2, #0]
 801278c:	6051      	str	r1, [r2, #4]
 801278e:	8819      	ldrh	r1, [r3, #0]
 8012790:	789b      	ldrb	r3, [r3, #2]
 8012792:	8111      	strh	r1, [r2, #8]
 8012794:	7293      	strb	r3, [r2, #10]
			strcpy(p->grade,"7A+");
 8012796:	687b      	ldr	r3, [r7, #4]
 8012798:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801279c:	4a2b      	ldr	r2, [pc, #172]	; (801284c <problem_fetch+0x11188>)
 801279e:	6810      	ldr	r0, [r2, #0]
 80127a0:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 80127a2:	687b      	ldr	r3, [r7, #4]
 80127a4:	2206      	movs	r2, #6
 80127a6:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,I,E,E,G,I");
 80127a8:	687b      	ldr	r3, [r7, #4]
 80127aa:	33a4      	adds	r3, #164	; 0xa4
 80127ac:	4a28      	ldr	r2, [pc, #160]	; (8012850 <problem_fetch+0x1118c>)
 80127ae:	461c      	mov	r4, r3
 80127b0:	4613      	mov	r3, r2
 80127b2:	cb07      	ldmia	r3!, {r0, r1, r2}
 80127b4:	6020      	str	r0, [r4, #0]
 80127b6:	6061      	str	r1, [r4, #4]
 80127b8:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,7,8,12,14,18");
 80127ba:	687b      	ldr	r3, [r7, #4]
 80127bc:	3304      	adds	r3, #4
 80127be:	4a25      	ldr	r2, [pc, #148]	; (8012854 <problem_fetch+0x11190>)
 80127c0:	461c      	mov	r4, r3
 80127c2:	4613      	mov	r3, r2
 80127c4:	cb07      	ldmia	r3!, {r0, r1, r2}
 80127c6:	6020      	str	r0, [r4, #0]
 80127c8:	6061      	str	r1, [r4, #4]
 80127ca:	60a2      	str	r2, [r4, #8]
 80127cc:	881a      	ldrh	r2, [r3, #0]
 80127ce:	789b      	ldrb	r3, [r3, #2]
 80127d0:	81a2      	strh	r2, [r4, #12]
 80127d2:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 80127d4:	687b      	ldr	r3, [r7, #4]
 80127d6:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 80127da:	4a1f      	ldr	r2, [pc, #124]	; (8012858 <problem_fetch+0x11194>)
 80127dc:	461c      	mov	r4, r3
 80127de:	4613      	mov	r3, r2
 80127e0:	cb07      	ldmia	r3!, {r0, r1, r2}
 80127e2:	6020      	str	r0, [r4, #0]
 80127e4:	6061      	str	r1, [r4, #4]
 80127e6:	60a2      	str	r2, [r4, #8]
			break;
 80127e8:	f009 be9c 	b.w	801c524 <problem_fetch+0x1ae60>
 80127ec:	08029798 	.word	0x08029798
 80127f0:	08023920 	.word	0x08023920
 80127f4:	080297b0 	.word	0x080297b0
 80127f8:	080297c0 	.word	0x080297c0
 80127fc:	08023978 	.word	0x08023978
 8012800:	080297d8 	.word	0x080297d8
 8012804:	08023814 	.word	0x08023814
 8012808:	080297e4 	.word	0x080297e4
 801280c:	080297fc 	.word	0x080297fc
 8012810:	080271b4 	.word	0x080271b4
 8012814:	08029818 	.word	0x08029818
 8012818:	0802982c 	.word	0x0802982c
 801281c:	08029840 	.word	0x08029840
 8012820:	080240fc 	.word	0x080240fc
 8012824:	08029858 	.word	0x08029858
 8012828:	08023854 	.word	0x08023854
 801282c:	08029864 	.word	0x08029864
 8012830:	08029874 	.word	0x08029874
 8012834:	08023a64 	.word	0x08023a64
 8012838:	08029888 	.word	0x08029888
 801283c:	0802989c 	.word	0x0802989c
 8012840:	080298a8 	.word	0x080298a8
 8012844:	08023d20 	.word	0x08023d20
 8012848:	080298b8 	.word	0x080298b8
 801284c:	080239f4 	.word	0x080239f4
 8012850:	080298c4 	.word	0x080298c4
 8012854:	080298d0 	.word	0x080298d0
 8012858:	08023bf0 	.word	0x08023bf0
		case 503 :
			strcpy(p->name,"TONE'S THROW");
 801285c:	687b      	ldr	r3, [r7, #4]
 801285e:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8012862:	4ab1      	ldr	r2, [pc, #708]	; (8012b28 <problem_fetch+0x11464>)
 8012864:	461c      	mov	r4, r3
 8012866:	4613      	mov	r3, r2
 8012868:	cb07      	ldmia	r3!, {r0, r1, r2}
 801286a:	6020      	str	r0, [r4, #0]
 801286c:	6061      	str	r1, [r4, #4]
 801286e:	60a2      	str	r2, [r4, #8]
 8012870:	781b      	ldrb	r3, [r3, #0]
 8012872:	7323      	strb	r3, [r4, #12]
			strcpy(p->grade,"6C+");
 8012874:	687b      	ldr	r3, [r7, #4]
 8012876:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801287a:	4aac      	ldr	r2, [pc, #688]	; (8012b2c <problem_fetch+0x11468>)
 801287c:	6810      	ldr	r0, [r2, #0]
 801287e:	6018      	str	r0, [r3, #0]
			p->moveSize = 5;
 8012880:	687b      	ldr	r3, [r7, #4]
 8012882:	2205      	movs	r2, #5
 8012884:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"C,A,E,A,D");
 8012886:	687b      	ldr	r3, [r7, #4]
 8012888:	33a4      	adds	r3, #164	; 0xa4
 801288a:	49a9      	ldr	r1, [pc, #676]	; (8012b30 <problem_fetch+0x1146c>)
 801288c:	461a      	mov	r2, r3
 801288e:	460b      	mov	r3, r1
 8012890:	cb03      	ldmia	r3!, {r0, r1}
 8012892:	6010      	str	r0, [r2, #0]
 8012894:	6051      	str	r1, [r2, #4]
 8012896:	881b      	ldrh	r3, [r3, #0]
 8012898:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"5,9,12,14,18");
 801289a:	687b      	ldr	r3, [r7, #4]
 801289c:	3304      	adds	r3, #4
 801289e:	4aa5      	ldr	r2, [pc, #660]	; (8012b34 <problem_fetch+0x11470>)
 80128a0:	461c      	mov	r4, r3
 80128a2:	4613      	mov	r3, r2
 80128a4:	cb07      	ldmia	r3!, {r0, r1, r2}
 80128a6:	6020      	str	r0, [r4, #0]
 80128a8:	6061      	str	r1, [r4, #4]
 80128aa:	60a2      	str	r2, [r4, #8]
 80128ac:	781b      	ldrb	r3, [r3, #0]
 80128ae:	7323      	strb	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,e");
 80128b0:	687b      	ldr	r3, [r7, #4]
 80128b2:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 80128b6:	49a0      	ldr	r1, [pc, #640]	; (8012b38 <problem_fetch+0x11474>)
 80128b8:	461a      	mov	r2, r3
 80128ba:	460b      	mov	r3, r1
 80128bc:	cb03      	ldmia	r3!, {r0, r1}
 80128be:	6010      	str	r0, [r2, #0]
 80128c0:	6051      	str	r1, [r2, #4]
 80128c2:	881b      	ldrh	r3, [r3, #0]
 80128c4:	8113      	strh	r3, [r2, #8]
			break;
 80128c6:	f009 be2d 	b.w	801c524 <problem_fetch+0x1ae60>
		case 504 :
			strcpy(p->name,"BLACK PEPPER");
 80128ca:	687b      	ldr	r3, [r7, #4]
 80128cc:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80128d0:	4a9a      	ldr	r2, [pc, #616]	; (8012b3c <problem_fetch+0x11478>)
 80128d2:	461c      	mov	r4, r3
 80128d4:	4613      	mov	r3, r2
 80128d6:	cb07      	ldmia	r3!, {r0, r1, r2}
 80128d8:	6020      	str	r0, [r4, #0]
 80128da:	6061      	str	r1, [r4, #4]
 80128dc:	60a2      	str	r2, [r4, #8]
 80128de:	781b      	ldrb	r3, [r3, #0]
 80128e0:	7323      	strb	r3, [r4, #12]
			strcpy(p->grade,"7A");
 80128e2:	687b      	ldr	r3, [r7, #4]
 80128e4:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80128e8:	4a95      	ldr	r2, [pc, #596]	; (8012b40 <problem_fetch+0x1147c>)
 80128ea:	8811      	ldrh	r1, [r2, #0]
 80128ec:	7892      	ldrb	r2, [r2, #2]
 80128ee:	8019      	strh	r1, [r3, #0]
 80128f0:	709a      	strb	r2, [r3, #2]
			p->moveSize = 7;
 80128f2:	687b      	ldr	r3, [r7, #4]
 80128f4:	2207      	movs	r2, #7
 80128f6:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"H,E,E,A,C,D,D");
 80128f8:	687b      	ldr	r3, [r7, #4]
 80128fa:	33a4      	adds	r3, #164	; 0xa4
 80128fc:	4a91      	ldr	r2, [pc, #580]	; (8012b44 <problem_fetch+0x11480>)
 80128fe:	461c      	mov	r4, r3
 8012900:	4613      	mov	r3, r2
 8012902:	cb07      	ldmia	r3!, {r0, r1, r2}
 8012904:	6020      	str	r0, [r4, #0]
 8012906:	6061      	str	r1, [r4, #4]
 8012908:	60a2      	str	r2, [r4, #8]
 801290a:	881b      	ldrh	r3, [r3, #0]
 801290c:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,8,9,9,13,15,18");
 801290e:	687b      	ldr	r3, [r7, #4]
 8012910:	3304      	adds	r3, #4
 8012912:	4a8d      	ldr	r2, [pc, #564]	; (8012b48 <problem_fetch+0x11484>)
 8012914:	461d      	mov	r5, r3
 8012916:	4614      	mov	r4, r2
 8012918:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801291a:	6028      	str	r0, [r5, #0]
 801291c:	6069      	str	r1, [r5, #4]
 801291e:	60aa      	str	r2, [r5, #8]
 8012920:	60eb      	str	r3, [r5, #12]
 8012922:	7823      	ldrb	r3, [r4, #0]
 8012924:	742b      	strb	r3, [r5, #16]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 8012926:	687b      	ldr	r3, [r7, #4]
 8012928:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 801292c:	4a87      	ldr	r2, [pc, #540]	; (8012b4c <problem_fetch+0x11488>)
 801292e:	461c      	mov	r4, r3
 8012930:	4613      	mov	r3, r2
 8012932:	cb07      	ldmia	r3!, {r0, r1, r2}
 8012934:	6020      	str	r0, [r4, #0]
 8012936:	6061      	str	r1, [r4, #4]
 8012938:	60a2      	str	r2, [r4, #8]
 801293a:	881b      	ldrh	r3, [r3, #0]
 801293c:	81a3      	strh	r3, [r4, #12]
			break;
 801293e:	f009 bdf1 	b.w	801c524 <problem_fetch+0x1ae60>
		case 505 :
			strcpy(p->name,"GASTON GRADE PLEASE");
 8012942:	687b      	ldr	r3, [r7, #4]
 8012944:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8012948:	4a81      	ldr	r2, [pc, #516]	; (8012b50 <problem_fetch+0x1148c>)
 801294a:	461d      	mov	r5, r3
 801294c:	4614      	mov	r4, r2
 801294e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8012950:	6028      	str	r0, [r5, #0]
 8012952:	6069      	str	r1, [r5, #4]
 8012954:	60aa      	str	r2, [r5, #8]
 8012956:	60eb      	str	r3, [r5, #12]
 8012958:	6820      	ldr	r0, [r4, #0]
 801295a:	6128      	str	r0, [r5, #16]
			strcpy(p->grade,"6C+");
 801295c:	687b      	ldr	r3, [r7, #4]
 801295e:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8012962:	4a72      	ldr	r2, [pc, #456]	; (8012b2c <problem_fetch+0x11468>)
 8012964:	6810      	ldr	r0, [r2, #0]
 8012966:	6018      	str	r0, [r3, #0]
			p->moveSize = 11;
 8012968:	687b      	ldr	r3, [r7, #4]
 801296a:	220b      	movs	r2, #11
 801296c:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"H,E,E,G,F,H,G,I,E,G,D");
 801296e:	687b      	ldr	r3, [r7, #4]
 8012970:	33a4      	adds	r3, #164	; 0xa4
 8012972:	4a78      	ldr	r2, [pc, #480]	; (8012b54 <problem_fetch+0x11490>)
 8012974:	461d      	mov	r5, r3
 8012976:	4614      	mov	r4, r2
 8012978:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801297a:	6028      	str	r0, [r5, #0]
 801297c:	6069      	str	r1, [r5, #4]
 801297e:	60aa      	str	r2, [r5, #8]
 8012980:	60eb      	str	r3, [r5, #12]
 8012982:	6820      	ldr	r0, [r4, #0]
 8012984:	6128      	str	r0, [r5, #16]
 8012986:	88a3      	ldrh	r3, [r4, #4]
 8012988:	82ab      	strh	r3, [r5, #20]
			strcpy(p->moveNumbers,"5,6,8,9,11,12,14,14,16,17,18");
 801298a:	687b      	ldr	r3, [r7, #4]
 801298c:	3304      	adds	r3, #4
 801298e:	4a72      	ldr	r2, [pc, #456]	; (8012b58 <problem_fetch+0x11494>)
 8012990:	461d      	mov	r5, r3
 8012992:	4614      	mov	r4, r2
 8012994:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8012996:	6028      	str	r0, [r5, #0]
 8012998:	6069      	str	r1, [r5, #4]
 801299a:	60aa      	str	r2, [r5, #8]
 801299c:	60eb      	str	r3, [r5, #12]
 801299e:	cc07      	ldmia	r4!, {r0, r1, r2}
 80129a0:	6128      	str	r0, [r5, #16]
 80129a2:	6169      	str	r1, [r5, #20]
 80129a4:	61aa      	str	r2, [r5, #24]
 80129a6:	7823      	ldrb	r3, [r4, #0]
 80129a8:	772b      	strb	r3, [r5, #28]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,d,d,d,e");
 80129aa:	687b      	ldr	r3, [r7, #4]
 80129ac:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 80129b0:	4a6a      	ldr	r2, [pc, #424]	; (8012b5c <problem_fetch+0x11498>)
 80129b2:	461d      	mov	r5, r3
 80129b4:	4614      	mov	r4, r2
 80129b6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80129b8:	6028      	str	r0, [r5, #0]
 80129ba:	6069      	str	r1, [r5, #4]
 80129bc:	60aa      	str	r2, [r5, #8]
 80129be:	60eb      	str	r3, [r5, #12]
 80129c0:	6820      	ldr	r0, [r4, #0]
 80129c2:	6128      	str	r0, [r5, #16]
 80129c4:	88a3      	ldrh	r3, [r4, #4]
 80129c6:	82ab      	strh	r3, [r5, #20]
			break;
 80129c8:	f009 bdac 	b.w	801c524 <problem_fetch+0x1ae60>
		case 506 :
			strcpy(p->name,"SALUHALLEN 11");
 80129cc:	687b      	ldr	r3, [r7, #4]
 80129ce:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80129d2:	4a63      	ldr	r2, [pc, #396]	; (8012b60 <problem_fetch+0x1149c>)
 80129d4:	461c      	mov	r4, r3
 80129d6:	4613      	mov	r3, r2
 80129d8:	cb07      	ldmia	r3!, {r0, r1, r2}
 80129da:	6020      	str	r0, [r4, #0]
 80129dc:	6061      	str	r1, [r4, #4]
 80129de:	60a2      	str	r2, [r4, #8]
 80129e0:	881b      	ldrh	r3, [r3, #0]
 80129e2:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade,"6B+");
 80129e4:	687b      	ldr	r3, [r7, #4]
 80129e6:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80129ea:	4a5e      	ldr	r2, [pc, #376]	; (8012b64 <problem_fetch+0x114a0>)
 80129ec:	6810      	ldr	r0, [r2, #0]
 80129ee:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 80129f0:	687b      	ldr	r3, [r7, #4]
 80129f2:	2207      	movs	r2, #7
 80129f4:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,J,H,J,G,G,D");
 80129f6:	687b      	ldr	r3, [r7, #4]
 80129f8:	33a4      	adds	r3, #164	; 0xa4
 80129fa:	4a5b      	ldr	r2, [pc, #364]	; (8012b68 <problem_fetch+0x114a4>)
 80129fc:	461c      	mov	r4, r3
 80129fe:	4613      	mov	r3, r2
 8012a00:	cb07      	ldmia	r3!, {r0, r1, r2}
 8012a02:	6020      	str	r0, [r4, #0]
 8012a04:	6061      	str	r1, [r4, #4]
 8012a06:	60a2      	str	r2, [r4, #8]
 8012a08:	881b      	ldrh	r3, [r3, #0]
 8012a0a:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,7,10,12,14,15,18");
 8012a0c:	687b      	ldr	r3, [r7, #4]
 8012a0e:	3304      	adds	r3, #4
 8012a10:	4a56      	ldr	r2, [pc, #344]	; (8012b6c <problem_fetch+0x114a8>)
 8012a12:	461d      	mov	r5, r3
 8012a14:	4614      	mov	r4, r2
 8012a16:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8012a18:	6028      	str	r0, [r5, #0]
 8012a1a:	6069      	str	r1, [r5, #4]
 8012a1c:	60aa      	str	r2, [r5, #8]
 8012a1e:	60eb      	str	r3, [r5, #12]
 8012a20:	8823      	ldrh	r3, [r4, #0]
 8012a22:	78a2      	ldrb	r2, [r4, #2]
 8012a24:	822b      	strh	r3, [r5, #16]
 8012a26:	4613      	mov	r3, r2
 8012a28:	74ab      	strb	r3, [r5, #18]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 8012a2a:	687b      	ldr	r3, [r7, #4]
 8012a2c:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8012a30:	4a46      	ldr	r2, [pc, #280]	; (8012b4c <problem_fetch+0x11488>)
 8012a32:	461c      	mov	r4, r3
 8012a34:	4613      	mov	r3, r2
 8012a36:	cb07      	ldmia	r3!, {r0, r1, r2}
 8012a38:	6020      	str	r0, [r4, #0]
 8012a3a:	6061      	str	r1, [r4, #4]
 8012a3c:	60a2      	str	r2, [r4, #8]
 8012a3e:	881b      	ldrh	r3, [r3, #0]
 8012a40:	81a3      	strh	r3, [r4, #12]
			break;
 8012a42:	f009 bd6f 	b.w	801c524 <problem_fetch+0x1ae60>
		case 507 :
			strcpy(p->name,"BULA 3");
 8012a46:	687b      	ldr	r3, [r7, #4]
 8012a48:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8012a4c:	4a48      	ldr	r2, [pc, #288]	; (8012b70 <problem_fetch+0x114ac>)
 8012a4e:	6810      	ldr	r0, [r2, #0]
 8012a50:	6018      	str	r0, [r3, #0]
 8012a52:	8891      	ldrh	r1, [r2, #4]
 8012a54:	7992      	ldrb	r2, [r2, #6]
 8012a56:	8099      	strh	r1, [r3, #4]
 8012a58:	719a      	strb	r2, [r3, #6]
			strcpy(p->grade,"6B+");
 8012a5a:	687b      	ldr	r3, [r7, #4]
 8012a5c:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8012a60:	4a40      	ldr	r2, [pc, #256]	; (8012b64 <problem_fetch+0x114a0>)
 8012a62:	6810      	ldr	r0, [r2, #0]
 8012a64:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 8012a66:	687b      	ldr	r3, [r7, #4]
 8012a68:	2207      	movs	r2, #7
 8012a6a:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,E,H,F,I,E,I");
 8012a6c:	687b      	ldr	r3, [r7, #4]
 8012a6e:	33a4      	adds	r3, #164	; 0xa4
 8012a70:	4a40      	ldr	r2, [pc, #256]	; (8012b74 <problem_fetch+0x114b0>)
 8012a72:	461c      	mov	r4, r3
 8012a74:	4613      	mov	r3, r2
 8012a76:	cb07      	ldmia	r3!, {r0, r1, r2}
 8012a78:	6020      	str	r0, [r4, #0]
 8012a7a:	6061      	str	r1, [r4, #4]
 8012a7c:	60a2      	str	r2, [r4, #8]
 8012a7e:	881b      	ldrh	r3, [r3, #0]
 8012a80:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,8,10,13,14,16,18");
 8012a82:	687b      	ldr	r3, [r7, #4]
 8012a84:	3304      	adds	r3, #4
 8012a86:	4a3c      	ldr	r2, [pc, #240]	; (8012b78 <problem_fetch+0x114b4>)
 8012a88:	461d      	mov	r5, r3
 8012a8a:	4614      	mov	r4, r2
 8012a8c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8012a8e:	6028      	str	r0, [r5, #0]
 8012a90:	6069      	str	r1, [r5, #4]
 8012a92:	60aa      	str	r2, [r5, #8]
 8012a94:	60eb      	str	r3, [r5, #12]
 8012a96:	8823      	ldrh	r3, [r4, #0]
 8012a98:	78a2      	ldrb	r2, [r4, #2]
 8012a9a:	822b      	strh	r3, [r5, #16]
 8012a9c:	4613      	mov	r3, r2
 8012a9e:	74ab      	strb	r3, [r5, #18]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 8012aa0:	687b      	ldr	r3, [r7, #4]
 8012aa2:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8012aa6:	4a29      	ldr	r2, [pc, #164]	; (8012b4c <problem_fetch+0x11488>)
 8012aa8:	461c      	mov	r4, r3
 8012aaa:	4613      	mov	r3, r2
 8012aac:	cb07      	ldmia	r3!, {r0, r1, r2}
 8012aae:	6020      	str	r0, [r4, #0]
 8012ab0:	6061      	str	r1, [r4, #4]
 8012ab2:	60a2      	str	r2, [r4, #8]
 8012ab4:	881b      	ldrh	r3, [r3, #0]
 8012ab6:	81a3      	strh	r3, [r4, #12]
			break;
 8012ab8:	f009 bd34 	b.w	801c524 <problem_fetch+0x1ae60>
		case 508 :
			strcpy(p->name,"CHICKUGA");
 8012abc:	687b      	ldr	r3, [r7, #4]
 8012abe:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8012ac2:	492e      	ldr	r1, [pc, #184]	; (8012b7c <problem_fetch+0x114b8>)
 8012ac4:	461a      	mov	r2, r3
 8012ac6:	460b      	mov	r3, r1
 8012ac8:	cb03      	ldmia	r3!, {r0, r1}
 8012aca:	6010      	str	r0, [r2, #0]
 8012acc:	6051      	str	r1, [r2, #4]
 8012ace:	781b      	ldrb	r3, [r3, #0]
 8012ad0:	7213      	strb	r3, [r2, #8]
			strcpy(p->grade,"7B+");
 8012ad2:	687b      	ldr	r3, [r7, #4]
 8012ad4:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8012ad8:	4a29      	ldr	r2, [pc, #164]	; (8012b80 <problem_fetch+0x114bc>)
 8012ada:	6810      	ldr	r0, [r2, #0]
 8012adc:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 8012ade:	687b      	ldr	r3, [r7, #4]
 8012ae0:	2206      	movs	r2, #6
 8012ae2:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,C,E,C,E,D");
 8012ae4:	687b      	ldr	r3, [r7, #4]
 8012ae6:	33a4      	adds	r3, #164	; 0xa4
 8012ae8:	4a26      	ldr	r2, [pc, #152]	; (8012b84 <problem_fetch+0x114c0>)
 8012aea:	461c      	mov	r4, r3
 8012aec:	4613      	mov	r3, r2
 8012aee:	cb07      	ldmia	r3!, {r0, r1, r2}
 8012af0:	6020      	str	r0, [r4, #0]
 8012af2:	6061      	str	r1, [r4, #4]
 8012af4:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,8,9,13,14,18");
 8012af6:	687b      	ldr	r3, [r7, #4]
 8012af8:	3304      	adds	r3, #4
 8012afa:	4a23      	ldr	r2, [pc, #140]	; (8012b88 <problem_fetch+0x114c4>)
 8012afc:	461c      	mov	r4, r3
 8012afe:	4613      	mov	r3, r2
 8012b00:	cb07      	ldmia	r3!, {r0, r1, r2}
 8012b02:	6020      	str	r0, [r4, #0]
 8012b04:	6061      	str	r1, [r4, #4]
 8012b06:	60a2      	str	r2, [r4, #8]
 8012b08:	881a      	ldrh	r2, [r3, #0]
 8012b0a:	789b      	ldrb	r3, [r3, #2]
 8012b0c:	81a2      	strh	r2, [r4, #12]
 8012b0e:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 8012b10:	687b      	ldr	r3, [r7, #4]
 8012b12:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8012b16:	4a1d      	ldr	r2, [pc, #116]	; (8012b8c <problem_fetch+0x114c8>)
 8012b18:	461c      	mov	r4, r3
 8012b1a:	4613      	mov	r3, r2
 8012b1c:	cb07      	ldmia	r3!, {r0, r1, r2}
 8012b1e:	6020      	str	r0, [r4, #0]
 8012b20:	6061      	str	r1, [r4, #4]
 8012b22:	60a2      	str	r2, [r4, #8]
			break;
 8012b24:	f009 bcfe 	b.w	801c524 <problem_fetch+0x1ae60>
 8012b28:	080298e0 	.word	0x080298e0
 8012b2c:	080238ec 	.word	0x080238ec
 8012b30:	080298f0 	.word	0x080298f0
 8012b34:	08023e70 	.word	0x08023e70
 8012b38:	08023d20 	.word	0x08023d20
 8012b3c:	080298fc 	.word	0x080298fc
 8012b40:	08023814 	.word	0x08023814
 8012b44:	0802990c 	.word	0x0802990c
 8012b48:	0802991c 	.word	0x0802991c
 8012b4c:	080239dc 	.word	0x080239dc
 8012b50:	08029930 	.word	0x08029930
 8012b54:	08029944 	.word	0x08029944
 8012b58:	0802995c 	.word	0x0802995c
 8012b5c:	080271b4 	.word	0x080271b4
 8012b60:	0802997c 	.word	0x0802997c
 8012b64:	08023854 	.word	0x08023854
 8012b68:	0802998c 	.word	0x0802998c
 8012b6c:	0802999c 	.word	0x0802999c
 8012b70:	080299b0 	.word	0x080299b0
 8012b74:	080299b8 	.word	0x080299b8
 8012b78:	080299c8 	.word	0x080299c8
 8012b7c:	080299dc 	.word	0x080299dc
 8012b80:	08023990 	.word	0x08023990
 8012b84:	080299e8 	.word	0x080299e8
 8012b88:	080299f4 	.word	0x080299f4
 8012b8c:	08023bf0 	.word	0x08023bf0
		case 509 :
			strcpy(p->name,"MASTERFUL GAP 2.0");
 8012b90:	687b      	ldr	r3, [r7, #4]
 8012b92:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8012b96:	4aa6      	ldr	r2, [pc, #664]	; (8012e30 <problem_fetch+0x1176c>)
 8012b98:	461d      	mov	r5, r3
 8012b9a:	4614      	mov	r4, r2
 8012b9c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8012b9e:	6028      	str	r0, [r5, #0]
 8012ba0:	6069      	str	r1, [r5, #4]
 8012ba2:	60aa      	str	r2, [r5, #8]
 8012ba4:	60eb      	str	r3, [r5, #12]
 8012ba6:	8823      	ldrh	r3, [r4, #0]
 8012ba8:	822b      	strh	r3, [r5, #16]
			strcpy(p->grade,"7B+");
 8012baa:	687b      	ldr	r3, [r7, #4]
 8012bac:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8012bb0:	4aa0      	ldr	r2, [pc, #640]	; (8012e34 <problem_fetch+0x11770>)
 8012bb2:	6810      	ldr	r0, [r2, #0]
 8012bb4:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 8012bb6:	687b      	ldr	r3, [r7, #4]
 8012bb8:	2207      	movs	r2, #7
 8012bba:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"C,B,A,F,E,A,I");
 8012bbc:	687b      	ldr	r3, [r7, #4]
 8012bbe:	33a4      	adds	r3, #164	; 0xa4
 8012bc0:	4a9d      	ldr	r2, [pc, #628]	; (8012e38 <problem_fetch+0x11774>)
 8012bc2:	461c      	mov	r4, r3
 8012bc4:	4613      	mov	r3, r2
 8012bc6:	cb07      	ldmia	r3!, {r0, r1, r2}
 8012bc8:	6020      	str	r0, [r4, #0]
 8012bca:	6061      	str	r1, [r4, #4]
 8012bcc:	60a2      	str	r2, [r4, #8]
 8012bce:	881b      	ldrh	r3, [r3, #0]
 8012bd0:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,6,9,11,16,14,18");
 8012bd2:	687b      	ldr	r3, [r7, #4]
 8012bd4:	3304      	adds	r3, #4
 8012bd6:	4a99      	ldr	r2, [pc, #612]	; (8012e3c <problem_fetch+0x11778>)
 8012bd8:	461d      	mov	r5, r3
 8012bda:	4614      	mov	r4, r2
 8012bdc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8012bde:	6028      	str	r0, [r5, #0]
 8012be0:	6069      	str	r1, [r5, #4]
 8012be2:	60aa      	str	r2, [r5, #8]
 8012be4:	60eb      	str	r3, [r5, #12]
 8012be6:	8823      	ldrh	r3, [r4, #0]
 8012be8:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,s,d,d,d,d,e");
 8012bea:	687b      	ldr	r3, [r7, #4]
 8012bec:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8012bf0:	4a93      	ldr	r2, [pc, #588]	; (8012e40 <problem_fetch+0x1177c>)
 8012bf2:	461c      	mov	r4, r3
 8012bf4:	4613      	mov	r3, r2
 8012bf6:	cb07      	ldmia	r3!, {r0, r1, r2}
 8012bf8:	6020      	str	r0, [r4, #0]
 8012bfa:	6061      	str	r1, [r4, #4]
 8012bfc:	60a2      	str	r2, [r4, #8]
 8012bfe:	881b      	ldrh	r3, [r3, #0]
 8012c00:	81a3      	strh	r3, [r4, #12]
			break;
 8012c02:	f009 bc8f 	b.w	801c524 <problem_fetch+0x1ae60>
		case 510 :
			strcpy(p->name,"BLACK DOJO MINI");
 8012c06:	687b      	ldr	r3, [r7, #4]
 8012c08:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8012c0c:	4a8d      	ldr	r2, [pc, #564]	; (8012e44 <problem_fetch+0x11780>)
 8012c0e:	461c      	mov	r4, r3
 8012c10:	4615      	mov	r5, r2
 8012c12:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8012c14:	6020      	str	r0, [r4, #0]
 8012c16:	6061      	str	r1, [r4, #4]
 8012c18:	60a2      	str	r2, [r4, #8]
 8012c1a:	60e3      	str	r3, [r4, #12]
			strcpy(p->grade,"7A");
 8012c1c:	687b      	ldr	r3, [r7, #4]
 8012c1e:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8012c22:	4a89      	ldr	r2, [pc, #548]	; (8012e48 <problem_fetch+0x11784>)
 8012c24:	8811      	ldrh	r1, [r2, #0]
 8012c26:	7892      	ldrb	r2, [r2, #2]
 8012c28:	8019      	strh	r1, [r3, #0]
 8012c2a:	709a      	strb	r2, [r3, #2]
			p->moveSize = 6;
 8012c2c:	687b      	ldr	r3, [r7, #4]
 8012c2e:	2206      	movs	r2, #6
 8012c30:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,J,F,C,E,A");
 8012c32:	687b      	ldr	r3, [r7, #4]
 8012c34:	33a4      	adds	r3, #164	; 0xa4
 8012c36:	4a85      	ldr	r2, [pc, #532]	; (8012e4c <problem_fetch+0x11788>)
 8012c38:	461c      	mov	r4, r3
 8012c3a:	4613      	mov	r3, r2
 8012c3c:	cb07      	ldmia	r3!, {r0, r1, r2}
 8012c3e:	6020      	str	r0, [r4, #0]
 8012c40:	6061      	str	r1, [r4, #4]
 8012c42:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"6,5,11,13,16,18");
 8012c44:	687b      	ldr	r3, [r7, #4]
 8012c46:	3304      	adds	r3, #4
 8012c48:	4a81      	ldr	r2, [pc, #516]	; (8012e50 <problem_fetch+0x1178c>)
 8012c4a:	461c      	mov	r4, r3
 8012c4c:	4615      	mov	r5, r2
 8012c4e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8012c50:	6020      	str	r0, [r4, #0]
 8012c52:	6061      	str	r1, [r4, #4]
 8012c54:	60a2      	str	r2, [r4, #8]
 8012c56:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,s,d,d,d,e");
 8012c58:	687b      	ldr	r3, [r7, #4]
 8012c5a:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8012c5e:	4a7d      	ldr	r2, [pc, #500]	; (8012e54 <problem_fetch+0x11790>)
 8012c60:	461c      	mov	r4, r3
 8012c62:	4613      	mov	r3, r2
 8012c64:	cb07      	ldmia	r3!, {r0, r1, r2}
 8012c66:	6020      	str	r0, [r4, #0]
 8012c68:	6061      	str	r1, [r4, #4]
 8012c6a:	60a2      	str	r2, [r4, #8]
			break;
 8012c6c:	f009 bc5a 	b.w	801c524 <problem_fetch+0x1ae60>
		case 511 :
			strcpy(p->name,"ANACONDA MALT LIQUOR");
 8012c70:	687b      	ldr	r3, [r7, #4]
 8012c72:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8012c76:	4a78      	ldr	r2, [pc, #480]	; (8012e58 <problem_fetch+0x11794>)
 8012c78:	461d      	mov	r5, r3
 8012c7a:	4614      	mov	r4, r2
 8012c7c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8012c7e:	6028      	str	r0, [r5, #0]
 8012c80:	6069      	str	r1, [r5, #4]
 8012c82:	60aa      	str	r2, [r5, #8]
 8012c84:	60eb      	str	r3, [r5, #12]
 8012c86:	6820      	ldr	r0, [r4, #0]
 8012c88:	6128      	str	r0, [r5, #16]
 8012c8a:	7923      	ldrb	r3, [r4, #4]
 8012c8c:	752b      	strb	r3, [r5, #20]
			strcpy(p->grade,"6B+");
 8012c8e:	687b      	ldr	r3, [r7, #4]
 8012c90:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8012c94:	4a71      	ldr	r2, [pc, #452]	; (8012e5c <problem_fetch+0x11798>)
 8012c96:	6810      	ldr	r0, [r2, #0]
 8012c98:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 8012c9a:	687b      	ldr	r3, [r7, #4]
 8012c9c:	2206      	movs	r2, #6
 8012c9e:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,J,I,H,E,D");
 8012ca0:	687b      	ldr	r3, [r7, #4]
 8012ca2:	33a4      	adds	r3, #164	; 0xa4
 8012ca4:	4a6e      	ldr	r2, [pc, #440]	; (8012e60 <problem_fetch+0x1179c>)
 8012ca6:	461c      	mov	r4, r3
 8012ca8:	4613      	mov	r3, r2
 8012caa:	cb07      	ldmia	r3!, {r0, r1, r2}
 8012cac:	6020      	str	r0, [r4, #0]
 8012cae:	6061      	str	r1, [r4, #4]
 8012cb0:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,5,14,10,16,18");
 8012cb2:	687b      	ldr	r3, [r7, #4]
 8012cb4:	3304      	adds	r3, #4
 8012cb6:	4a6b      	ldr	r2, [pc, #428]	; (8012e64 <problem_fetch+0x117a0>)
 8012cb8:	461c      	mov	r4, r3
 8012cba:	4615      	mov	r5, r2
 8012cbc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8012cbe:	6020      	str	r0, [r4, #0]
 8012cc0:	6061      	str	r1, [r4, #4]
 8012cc2:	60a2      	str	r2, [r4, #8]
 8012cc4:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,s,d,d,d,e");
 8012cc6:	687b      	ldr	r3, [r7, #4]
 8012cc8:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8012ccc:	4a61      	ldr	r2, [pc, #388]	; (8012e54 <problem_fetch+0x11790>)
 8012cce:	461c      	mov	r4, r3
 8012cd0:	4613      	mov	r3, r2
 8012cd2:	cb07      	ldmia	r3!, {r0, r1, r2}
 8012cd4:	6020      	str	r0, [r4, #0]
 8012cd6:	6061      	str	r1, [r4, #4]
 8012cd8:	60a2      	str	r2, [r4, #8]
			break;
 8012cda:	f009 bc23 	b.w	801c524 <problem_fetch+0x1ae60>
		case 512 :
			strcpy(p->name,"GREAT DANE ZANE");
 8012cde:	687b      	ldr	r3, [r7, #4]
 8012ce0:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8012ce4:	4a60      	ldr	r2, [pc, #384]	; (8012e68 <problem_fetch+0x117a4>)
 8012ce6:	461c      	mov	r4, r3
 8012ce8:	4615      	mov	r5, r2
 8012cea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8012cec:	6020      	str	r0, [r4, #0]
 8012cee:	6061      	str	r1, [r4, #4]
 8012cf0:	60a2      	str	r2, [r4, #8]
 8012cf2:	60e3      	str	r3, [r4, #12]
			strcpy(p->grade,"7A+");
 8012cf4:	687b      	ldr	r3, [r7, #4]
 8012cf6:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8012cfa:	4a5c      	ldr	r2, [pc, #368]	; (8012e6c <problem_fetch+0x117a8>)
 8012cfc:	6810      	ldr	r0, [r2, #0]
 8012cfe:	6018      	str	r0, [r3, #0]
			p->moveSize = 8;
 8012d00:	687b      	ldr	r3, [r7, #4]
 8012d02:	2208      	movs	r2, #8
 8012d04:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"C,B,F,G,E,B,G,I");
 8012d06:	687b      	ldr	r3, [r7, #4]
 8012d08:	33a4      	adds	r3, #164	; 0xa4
 8012d0a:	4a59      	ldr	r2, [pc, #356]	; (8012e70 <problem_fetch+0x117ac>)
 8012d0c:	461c      	mov	r4, r3
 8012d0e:	4615      	mov	r5, r2
 8012d10:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8012d12:	6020      	str	r0, [r4, #0]
 8012d14:	6061      	str	r1, [r4, #4]
 8012d16:	60a2      	str	r2, [r4, #8]
 8012d18:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,6,13,15,9,12,4,18");
 8012d1a:	687b      	ldr	r3, [r7, #4]
 8012d1c:	3304      	adds	r3, #4
 8012d1e:	4a55      	ldr	r2, [pc, #340]	; (8012e74 <problem_fetch+0x117b0>)
 8012d20:	461d      	mov	r5, r3
 8012d22:	4614      	mov	r4, r2
 8012d24:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8012d26:	6028      	str	r0, [r5, #0]
 8012d28:	6069      	str	r1, [r5, #4]
 8012d2a:	60aa      	str	r2, [r5, #8]
 8012d2c:	60eb      	str	r3, [r5, #12]
 8012d2e:	6820      	ldr	r0, [r4, #0]
 8012d30:	6128      	str	r0, [r5, #16]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,e");
 8012d32:	687b      	ldr	r3, [r7, #4]
 8012d34:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8012d38:	4a4f      	ldr	r2, [pc, #316]	; (8012e78 <problem_fetch+0x117b4>)
 8012d3a:	461c      	mov	r4, r3
 8012d3c:	4615      	mov	r5, r2
 8012d3e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8012d40:	6020      	str	r0, [r4, #0]
 8012d42:	6061      	str	r1, [r4, #4]
 8012d44:	60a2      	str	r2, [r4, #8]
 8012d46:	60e3      	str	r3, [r4, #12]
			break;
 8012d48:	f009 bbec 	b.w	801c524 <problem_fetch+0x1ae60>
		case 513 :
			strcpy(p->name,"BOULDER AND EMIKO");
 8012d4c:	687b      	ldr	r3, [r7, #4]
 8012d4e:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8012d52:	4a4a      	ldr	r2, [pc, #296]	; (8012e7c <problem_fetch+0x117b8>)
 8012d54:	461d      	mov	r5, r3
 8012d56:	4614      	mov	r4, r2
 8012d58:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8012d5a:	6028      	str	r0, [r5, #0]
 8012d5c:	6069      	str	r1, [r5, #4]
 8012d5e:	60aa      	str	r2, [r5, #8]
 8012d60:	60eb      	str	r3, [r5, #12]
 8012d62:	8823      	ldrh	r3, [r4, #0]
 8012d64:	822b      	strh	r3, [r5, #16]
			strcpy(p->grade,"6C+");
 8012d66:	687b      	ldr	r3, [r7, #4]
 8012d68:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8012d6c:	4a44      	ldr	r2, [pc, #272]	; (8012e80 <problem_fetch+0x117bc>)
 8012d6e:	6810      	ldr	r0, [r2, #0]
 8012d70:	6018      	str	r0, [r3, #0]
			p->moveSize = 8;
 8012d72:	687b      	ldr	r3, [r7, #4]
 8012d74:	2208      	movs	r2, #8
 8012d76:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,G,E,F,D,I,E,I");
 8012d78:	687b      	ldr	r3, [r7, #4]
 8012d7a:	33a4      	adds	r3, #164	; 0xa4
 8012d7c:	4a41      	ldr	r2, [pc, #260]	; (8012e84 <problem_fetch+0x117c0>)
 8012d7e:	461c      	mov	r4, r3
 8012d80:	4615      	mov	r5, r2
 8012d82:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8012d84:	6020      	str	r0, [r4, #0]
 8012d86:	6061      	str	r1, [r4, #4]
 8012d88:	60a2      	str	r2, [r4, #8]
 8012d8a:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,4,8,11,11,14,14,18");
 8012d8c:	687b      	ldr	r3, [r7, #4]
 8012d8e:	3304      	adds	r3, #4
 8012d90:	4a3d      	ldr	r2, [pc, #244]	; (8012e88 <problem_fetch+0x117c4>)
 8012d92:	461d      	mov	r5, r3
 8012d94:	4614      	mov	r4, r2
 8012d96:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8012d98:	6028      	str	r0, [r5, #0]
 8012d9a:	6069      	str	r1, [r5, #4]
 8012d9c:	60aa      	str	r2, [r5, #8]
 8012d9e:	60eb      	str	r3, [r5, #12]
 8012da0:	6820      	ldr	r0, [r4, #0]
 8012da2:	6128      	str	r0, [r5, #16]
 8012da4:	7923      	ldrb	r3, [r4, #4]
 8012da6:	752b      	strb	r3, [r5, #20]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,e");
 8012da8:	687b      	ldr	r3, [r7, #4]
 8012daa:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8012dae:	4a32      	ldr	r2, [pc, #200]	; (8012e78 <problem_fetch+0x117b4>)
 8012db0:	461c      	mov	r4, r3
 8012db2:	4615      	mov	r5, r2
 8012db4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8012db6:	6020      	str	r0, [r4, #0]
 8012db8:	6061      	str	r1, [r4, #4]
 8012dba:	60a2      	str	r2, [r4, #8]
 8012dbc:	60e3      	str	r3, [r4, #12]
			break;
 8012dbe:	f009 bbb1 	b.w	801c524 <problem_fetch+0x1ae60>
		case 514 :
			strcpy(p->name,"MORNING SHAKE");
 8012dc2:	687b      	ldr	r3, [r7, #4]
 8012dc4:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8012dc8:	4a30      	ldr	r2, [pc, #192]	; (8012e8c <problem_fetch+0x117c8>)
 8012dca:	461c      	mov	r4, r3
 8012dcc:	4613      	mov	r3, r2
 8012dce:	cb07      	ldmia	r3!, {r0, r1, r2}
 8012dd0:	6020      	str	r0, [r4, #0]
 8012dd2:	6061      	str	r1, [r4, #4]
 8012dd4:	60a2      	str	r2, [r4, #8]
 8012dd6:	881b      	ldrh	r3, [r3, #0]
 8012dd8:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade,"6C+");
 8012dda:	687b      	ldr	r3, [r7, #4]
 8012ddc:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8012de0:	4a27      	ldr	r2, [pc, #156]	; (8012e80 <problem_fetch+0x117bc>)
 8012de2:	6810      	ldr	r0, [r2, #0]
 8012de4:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 8012de6:	687b      	ldr	r3, [r7, #4]
 8012de8:	2206      	movs	r2, #6
 8012dea:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,E,E,B,D,D");
 8012dec:	687b      	ldr	r3, [r7, #4]
 8012dee:	33a4      	adds	r3, #164	; 0xa4
 8012df0:	4a27      	ldr	r2, [pc, #156]	; (8012e90 <problem_fetch+0x117cc>)
 8012df2:	461c      	mov	r4, r3
 8012df4:	4613      	mov	r3, r2
 8012df6:	cb07      	ldmia	r3!, {r0, r1, r2}
 8012df8:	6020      	str	r0, [r4, #0]
 8012dfa:	6061      	str	r1, [r4, #4]
 8012dfc:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,8,9,12,15,18");
 8012dfe:	687b      	ldr	r3, [r7, #4]
 8012e00:	3304      	adds	r3, #4
 8012e02:	4a24      	ldr	r2, [pc, #144]	; (8012e94 <problem_fetch+0x117d0>)
 8012e04:	461c      	mov	r4, r3
 8012e06:	4613      	mov	r3, r2
 8012e08:	cb07      	ldmia	r3!, {r0, r1, r2}
 8012e0a:	6020      	str	r0, [r4, #0]
 8012e0c:	6061      	str	r1, [r4, #4]
 8012e0e:	60a2      	str	r2, [r4, #8]
 8012e10:	881a      	ldrh	r2, [r3, #0]
 8012e12:	789b      	ldrb	r3, [r3, #2]
 8012e14:	81a2      	strh	r2, [r4, #12]
 8012e16:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 8012e18:	687b      	ldr	r3, [r7, #4]
 8012e1a:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8012e1e:	4a1e      	ldr	r2, [pc, #120]	; (8012e98 <problem_fetch+0x117d4>)
 8012e20:	461c      	mov	r4, r3
 8012e22:	4613      	mov	r3, r2
 8012e24:	cb07      	ldmia	r3!, {r0, r1, r2}
 8012e26:	6020      	str	r0, [r4, #0]
 8012e28:	6061      	str	r1, [r4, #4]
 8012e2a:	60a2      	str	r2, [r4, #8]
			break;
 8012e2c:	f009 bb7a 	b.w	801c524 <problem_fetch+0x1ae60>
 8012e30:	08029a04 	.word	0x08029a04
 8012e34:	08023990 	.word	0x08023990
 8012e38:	08029a18 	.word	0x08029a18
 8012e3c:	08029a28 	.word	0x08029a28
 8012e40:	080238cc 	.word	0x080238cc
 8012e44:	08029a3c 	.word	0x08029a3c
 8012e48:	08023814 	.word	0x08023814
 8012e4c:	08029a4c 	.word	0x08029a4c
 8012e50:	08029a58 	.word	0x08029a58
 8012e54:	08023834 	.word	0x08023834
 8012e58:	08029a68 	.word	0x08029a68
 8012e5c:	08023854 	.word	0x08023854
 8012e60:	08029a80 	.word	0x08029a80
 8012e64:	08029a8c 	.word	0x08029a8c
 8012e68:	08029a9c 	.word	0x08029a9c
 8012e6c:	080239f4 	.word	0x080239f4
 8012e70:	08029aac 	.word	0x08029aac
 8012e74:	08029abc 	.word	0x08029abc
 8012e78:	08023978 	.word	0x08023978
 8012e7c:	08029ad0 	.word	0x08029ad0
 8012e80:	080238ec 	.word	0x080238ec
 8012e84:	08029ae4 	.word	0x08029ae4
 8012e88:	08029af4 	.word	0x08029af4
 8012e8c:	08029b0c 	.word	0x08029b0c
 8012e90:	08029b1c 	.word	0x08029b1c
 8012e94:	08029b28 	.word	0x08029b28
 8012e98:	08023bf0 	.word	0x08023bf0
		case 515 :
			strcpy(p->name,"YAY POCKETS!");
 8012e9c:	687b      	ldr	r3, [r7, #4]
 8012e9e:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8012ea2:	4aa8      	ldr	r2, [pc, #672]	; (8013144 <problem_fetch+0x11a80>)
 8012ea4:	461c      	mov	r4, r3
 8012ea6:	4613      	mov	r3, r2
 8012ea8:	cb07      	ldmia	r3!, {r0, r1, r2}
 8012eaa:	6020      	str	r0, [r4, #0]
 8012eac:	6061      	str	r1, [r4, #4]
 8012eae:	60a2      	str	r2, [r4, #8]
 8012eb0:	781b      	ldrb	r3, [r3, #0]
 8012eb2:	7323      	strb	r3, [r4, #12]
			strcpy(p->grade,"6C");
 8012eb4:	687b      	ldr	r3, [r7, #4]
 8012eb6:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8012eba:	4aa3      	ldr	r2, [pc, #652]	; (8013148 <problem_fetch+0x11a84>)
 8012ebc:	8811      	ldrh	r1, [r2, #0]
 8012ebe:	7892      	ldrb	r2, [r2, #2]
 8012ec0:	8019      	strh	r1, [r3, #0]
 8012ec2:	709a      	strb	r2, [r3, #2]
			p->moveSize = 7;
 8012ec4:	687b      	ldr	r3, [r7, #4]
 8012ec6:	2207      	movs	r2, #7
 8012ec8:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"B,C,E,B,E,B,D");
 8012eca:	687b      	ldr	r3, [r7, #4]
 8012ecc:	33a4      	adds	r3, #164	; 0xa4
 8012ece:	4a9f      	ldr	r2, [pc, #636]	; (801314c <problem_fetch+0x11a88>)
 8012ed0:	461c      	mov	r4, r3
 8012ed2:	4613      	mov	r3, r2
 8012ed4:	cb07      	ldmia	r3!, {r0, r1, r2}
 8012ed6:	6020      	str	r0, [r4, #0]
 8012ed8:	6061      	str	r1, [r4, #4]
 8012eda:	60a2      	str	r2, [r4, #8]
 8012edc:	881b      	ldrh	r3, [r3, #0]
 8012ede:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"6,5,8,10,12,15,18");
 8012ee0:	687b      	ldr	r3, [r7, #4]
 8012ee2:	3304      	adds	r3, #4
 8012ee4:	4a9a      	ldr	r2, [pc, #616]	; (8013150 <problem_fetch+0x11a8c>)
 8012ee6:	461d      	mov	r5, r3
 8012ee8:	4614      	mov	r4, r2
 8012eea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8012eec:	6028      	str	r0, [r5, #0]
 8012eee:	6069      	str	r1, [r5, #4]
 8012ef0:	60aa      	str	r2, [r5, #8]
 8012ef2:	60eb      	str	r3, [r5, #12]
 8012ef4:	8823      	ldrh	r3, [r4, #0]
 8012ef6:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,s,d,d,d,d,e");
 8012ef8:	687b      	ldr	r3, [r7, #4]
 8012efa:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8012efe:	4a95      	ldr	r2, [pc, #596]	; (8013154 <problem_fetch+0x11a90>)
 8012f00:	461c      	mov	r4, r3
 8012f02:	4613      	mov	r3, r2
 8012f04:	cb07      	ldmia	r3!, {r0, r1, r2}
 8012f06:	6020      	str	r0, [r4, #0]
 8012f08:	6061      	str	r1, [r4, #4]
 8012f0a:	60a2      	str	r2, [r4, #8]
 8012f0c:	881b      	ldrh	r3, [r3, #0]
 8012f0e:	81a3      	strh	r3, [r4, #12]
			break;
 8012f10:	f009 bb08 	b.w	801c524 <problem_fetch+0x1ae60>
		case 516 :
			strcpy(p->name,"SEX LANCHEZ");
 8012f14:	687b      	ldr	r3, [r7, #4]
 8012f16:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8012f1a:	4a8f      	ldr	r2, [pc, #572]	; (8013158 <problem_fetch+0x11a94>)
 8012f1c:	461c      	mov	r4, r3
 8012f1e:	4613      	mov	r3, r2
 8012f20:	cb07      	ldmia	r3!, {r0, r1, r2}
 8012f22:	6020      	str	r0, [r4, #0]
 8012f24:	6061      	str	r1, [r4, #4]
 8012f26:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade,"7C+");
 8012f28:	687b      	ldr	r3, [r7, #4]
 8012f2a:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8012f2e:	4a8b      	ldr	r2, [pc, #556]	; (801315c <problem_fetch+0x11a98>)
 8012f30:	6810      	ldr	r0, [r2, #0]
 8012f32:	6018      	str	r0, [r3, #0]
			p->moveSize = 4;
 8012f34:	687b      	ldr	r3, [r7, #4]
 8012f36:	2204      	movs	r2, #4
 8012f38:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,E,G,D");
 8012f3a:	687b      	ldr	r3, [r7, #4]
 8012f3c:	33a4      	adds	r3, #164	; 0xa4
 8012f3e:	4988      	ldr	r1, [pc, #544]	; (8013160 <problem_fetch+0x11a9c>)
 8012f40:	461a      	mov	r2, r3
 8012f42:	460b      	mov	r3, r1
 8012f44:	cb03      	ldmia	r3!, {r0, r1}
 8012f46:	6010      	str	r0, [r2, #0]
 8012f48:	6051      	str	r1, [r2, #4]
			strcpy(p->moveNumbers,"4,8,14,18");
 8012f4a:	687b      	ldr	r3, [r7, #4]
 8012f4c:	3304      	adds	r3, #4
 8012f4e:	4985      	ldr	r1, [pc, #532]	; (8013164 <problem_fetch+0x11aa0>)
 8012f50:	461a      	mov	r2, r3
 8012f52:	460b      	mov	r3, r1
 8012f54:	cb03      	ldmia	r3!, {r0, r1}
 8012f56:	6010      	str	r0, [r2, #0]
 8012f58:	6051      	str	r1, [r2, #4]
 8012f5a:	881b      	ldrh	r3, [r3, #0]
 8012f5c:	8113      	strh	r3, [r2, #8]
			strcpy(p->startFinish,"s,d,d,e");
 8012f5e:	687b      	ldr	r3, [r7, #4]
 8012f60:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8012f64:	4980      	ldr	r1, [pc, #512]	; (8013168 <problem_fetch+0x11aa4>)
 8012f66:	461a      	mov	r2, r3
 8012f68:	460b      	mov	r3, r1
 8012f6a:	cb03      	ldmia	r3!, {r0, r1}
 8012f6c:	6010      	str	r0, [r2, #0]
 8012f6e:	6051      	str	r1, [r2, #4]
			break;
 8012f70:	f009 bad8 	b.w	801c524 <problem_fetch+0x1ae60>
		case 517 :
			strcpy(p->name,"BOUNCE EZ");
 8012f74:	687b      	ldr	r3, [r7, #4]
 8012f76:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8012f7a:	497c      	ldr	r1, [pc, #496]	; (801316c <problem_fetch+0x11aa8>)
 8012f7c:	461a      	mov	r2, r3
 8012f7e:	460b      	mov	r3, r1
 8012f80:	cb03      	ldmia	r3!, {r0, r1}
 8012f82:	6010      	str	r0, [r2, #0]
 8012f84:	6051      	str	r1, [r2, #4]
 8012f86:	881b      	ldrh	r3, [r3, #0]
 8012f88:	8113      	strh	r3, [r2, #8]
			strcpy(p->grade,"6C+");
 8012f8a:	687b      	ldr	r3, [r7, #4]
 8012f8c:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8012f90:	4a77      	ldr	r2, [pc, #476]	; (8013170 <problem_fetch+0x11aac>)
 8012f92:	6810      	ldr	r0, [r2, #0]
 8012f94:	6018      	str	r0, [r3, #0]
			p->moveSize = 5;
 8012f96:	687b      	ldr	r3, [r7, #4]
 8012f98:	2205      	movs	r2, #5
 8012f9a:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"E,J,H,C,D");
 8012f9c:	687b      	ldr	r3, [r7, #4]
 8012f9e:	33a4      	adds	r3, #164	; 0xa4
 8012fa0:	4974      	ldr	r1, [pc, #464]	; (8013174 <problem_fetch+0x11ab0>)
 8012fa2:	461a      	mov	r2, r3
 8012fa4:	460b      	mov	r3, r1
 8012fa6:	cb03      	ldmia	r3!, {r0, r1}
 8012fa8:	6010      	str	r0, [r2, #0]
 8012faa:	6051      	str	r1, [r2, #4]
 8012fac:	881b      	ldrh	r3, [r3, #0]
 8012fae:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"6,5,10,13,18");
 8012fb0:	687b      	ldr	r3, [r7, #4]
 8012fb2:	3304      	adds	r3, #4
 8012fb4:	4a70      	ldr	r2, [pc, #448]	; (8013178 <problem_fetch+0x11ab4>)
 8012fb6:	461c      	mov	r4, r3
 8012fb8:	4613      	mov	r3, r2
 8012fba:	cb07      	ldmia	r3!, {r0, r1, r2}
 8012fbc:	6020      	str	r0, [r4, #0]
 8012fbe:	6061      	str	r1, [r4, #4]
 8012fc0:	60a2      	str	r2, [r4, #8]
 8012fc2:	781b      	ldrb	r3, [r3, #0]
 8012fc4:	7323      	strb	r3, [r4, #12]
			strcpy(p->startFinish,"s,s,d,d,e");
 8012fc6:	687b      	ldr	r3, [r7, #4]
 8012fc8:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8012fcc:	496b      	ldr	r1, [pc, #428]	; (801317c <problem_fetch+0x11ab8>)
 8012fce:	461a      	mov	r2, r3
 8012fd0:	460b      	mov	r3, r1
 8012fd2:	cb03      	ldmia	r3!, {r0, r1}
 8012fd4:	6010      	str	r0, [r2, #0]
 8012fd6:	6051      	str	r1, [r2, #4]
 8012fd8:	881b      	ldrh	r3, [r3, #0]
 8012fda:	8113      	strh	r3, [r2, #8]
			break;
 8012fdc:	f009 baa2 	b.w	801c524 <problem_fetch+0x1ae60>
		case 518 :
			strcpy(p->name,"WARM UP A6");
 8012fe0:	687b      	ldr	r3, [r7, #4]
 8012fe2:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8012fe6:	4966      	ldr	r1, [pc, #408]	; (8013180 <problem_fetch+0x11abc>)
 8012fe8:	461a      	mov	r2, r3
 8012fea:	460b      	mov	r3, r1
 8012fec:	cb03      	ldmia	r3!, {r0, r1}
 8012fee:	6010      	str	r0, [r2, #0]
 8012ff0:	6051      	str	r1, [r2, #4]
 8012ff2:	8819      	ldrh	r1, [r3, #0]
 8012ff4:	789b      	ldrb	r3, [r3, #2]
 8012ff6:	8111      	strh	r1, [r2, #8]
 8012ff8:	7293      	strb	r3, [r2, #10]
			strcpy(p->grade,"6B+");
 8012ffa:	687b      	ldr	r3, [r7, #4]
 8012ffc:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8013000:	4a60      	ldr	r2, [pc, #384]	; (8013184 <problem_fetch+0x11ac0>)
 8013002:	6810      	ldr	r0, [r2, #0]
 8013004:	6018      	str	r0, [r3, #0]
			p->moveSize = 5;
 8013006:	687b      	ldr	r3, [r7, #4]
 8013008:	2205      	movs	r2, #5
 801300a:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,J,I,I,I");
 801300c:	687b      	ldr	r3, [r7, #4]
 801300e:	33a4      	adds	r3, #164	; 0xa4
 8013010:	495d      	ldr	r1, [pc, #372]	; (8013188 <problem_fetch+0x11ac4>)
 8013012:	461a      	mov	r2, r3
 8013014:	460b      	mov	r3, r1
 8013016:	cb03      	ldmia	r3!, {r0, r1}
 8013018:	6010      	str	r0, [r2, #0]
 801301a:	6051      	str	r1, [r2, #4]
 801301c:	881b      	ldrh	r3, [r3, #0]
 801301e:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"4,7,10,14,18");
 8013020:	687b      	ldr	r3, [r7, #4]
 8013022:	3304      	adds	r3, #4
 8013024:	4a59      	ldr	r2, [pc, #356]	; (801318c <problem_fetch+0x11ac8>)
 8013026:	461c      	mov	r4, r3
 8013028:	4613      	mov	r3, r2
 801302a:	cb07      	ldmia	r3!, {r0, r1, r2}
 801302c:	6020      	str	r0, [r4, #0]
 801302e:	6061      	str	r1, [r4, #4]
 8013030:	60a2      	str	r2, [r4, #8]
 8013032:	781b      	ldrb	r3, [r3, #0]
 8013034:	7323      	strb	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,e");
 8013036:	687b      	ldr	r3, [r7, #4]
 8013038:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 801303c:	4954      	ldr	r1, [pc, #336]	; (8013190 <problem_fetch+0x11acc>)
 801303e:	461a      	mov	r2, r3
 8013040:	460b      	mov	r3, r1
 8013042:	cb03      	ldmia	r3!, {r0, r1}
 8013044:	6010      	str	r0, [r2, #0]
 8013046:	6051      	str	r1, [r2, #4]
 8013048:	881b      	ldrh	r3, [r3, #0]
 801304a:	8113      	strh	r3, [r2, #8]
			break;
 801304c:	f009 ba6a 	b.w	801c524 <problem_fetch+0x1ae60>
		case 519 :
			strcpy(p->name,"L'UOMO BISATTA");
 8013050:	687b      	ldr	r3, [r7, #4]
 8013052:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8013056:	4a4f      	ldr	r2, [pc, #316]	; (8013194 <problem_fetch+0x11ad0>)
 8013058:	461c      	mov	r4, r3
 801305a:	4613      	mov	r3, r2
 801305c:	cb07      	ldmia	r3!, {r0, r1, r2}
 801305e:	6020      	str	r0, [r4, #0]
 8013060:	6061      	str	r1, [r4, #4]
 8013062:	60a2      	str	r2, [r4, #8]
 8013064:	881a      	ldrh	r2, [r3, #0]
 8013066:	789b      	ldrb	r3, [r3, #2]
 8013068:	81a2      	strh	r2, [r4, #12]
 801306a:	73a3      	strb	r3, [r4, #14]
			strcpy(p->grade,"7B");
 801306c:	687b      	ldr	r3, [r7, #4]
 801306e:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8013072:	4a49      	ldr	r2, [pc, #292]	; (8013198 <problem_fetch+0x11ad4>)
 8013074:	8811      	ldrh	r1, [r2, #0]
 8013076:	7892      	ldrb	r2, [r2, #2]
 8013078:	8019      	strh	r1, [r3, #0]
 801307a:	709a      	strb	r2, [r3, #2]
			p->moveSize = 7;
 801307c:	687b      	ldr	r3, [r7, #4]
 801307e:	2207      	movs	r2, #7
 8013080:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,G,G,H,C,H,D");
 8013082:	687b      	ldr	r3, [r7, #4]
 8013084:	33a4      	adds	r3, #164	; 0xa4
 8013086:	4a45      	ldr	r2, [pc, #276]	; (801319c <problem_fetch+0x11ad8>)
 8013088:	461c      	mov	r4, r3
 801308a:	4613      	mov	r3, r2
 801308c:	cb07      	ldmia	r3!, {r0, r1, r2}
 801308e:	6020      	str	r0, [r4, #0]
 8013090:	6061      	str	r1, [r4, #4]
 8013092:	60a2      	str	r2, [r4, #8]
 8013094:	881b      	ldrh	r3, [r3, #0]
 8013096:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,6,9,12,8,16,18");
 8013098:	687b      	ldr	r3, [r7, #4]
 801309a:	3304      	adds	r3, #4
 801309c:	4a40      	ldr	r2, [pc, #256]	; (80131a0 <problem_fetch+0x11adc>)
 801309e:	461d      	mov	r5, r3
 80130a0:	4614      	mov	r4, r2
 80130a2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80130a4:	6028      	str	r0, [r5, #0]
 80130a6:	6069      	str	r1, [r5, #4]
 80130a8:	60aa      	str	r2, [r5, #8]
 80130aa:	60eb      	str	r3, [r5, #12]
 80130ac:	7823      	ldrb	r3, [r4, #0]
 80130ae:	742b      	strb	r3, [r5, #16]
			strcpy(p->startFinish,"s,s,d,d,d,d,e");
 80130b0:	687b      	ldr	r3, [r7, #4]
 80130b2:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 80130b6:	4a27      	ldr	r2, [pc, #156]	; (8013154 <problem_fetch+0x11a90>)
 80130b8:	461c      	mov	r4, r3
 80130ba:	4613      	mov	r3, r2
 80130bc:	cb07      	ldmia	r3!, {r0, r1, r2}
 80130be:	6020      	str	r0, [r4, #0]
 80130c0:	6061      	str	r1, [r4, #4]
 80130c2:	60a2      	str	r2, [r4, #8]
 80130c4:	881b      	ldrh	r3, [r3, #0]
 80130c6:	81a3      	strh	r3, [r4, #12]
			break;
 80130c8:	f009 ba2c 	b.w	801c524 <problem_fetch+0x1ae60>
		case 520 :
			strcpy(p->name,"PONTUSBADET 2");
 80130cc:	687b      	ldr	r3, [r7, #4]
 80130ce:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80130d2:	4a34      	ldr	r2, [pc, #208]	; (80131a4 <problem_fetch+0x11ae0>)
 80130d4:	461c      	mov	r4, r3
 80130d6:	4613      	mov	r3, r2
 80130d8:	cb07      	ldmia	r3!, {r0, r1, r2}
 80130da:	6020      	str	r0, [r4, #0]
 80130dc:	6061      	str	r1, [r4, #4]
 80130de:	60a2      	str	r2, [r4, #8]
 80130e0:	881b      	ldrh	r3, [r3, #0]
 80130e2:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade,"6C");
 80130e4:	687b      	ldr	r3, [r7, #4]
 80130e6:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80130ea:	4a17      	ldr	r2, [pc, #92]	; (8013148 <problem_fetch+0x11a84>)
 80130ec:	8811      	ldrh	r1, [r2, #0]
 80130ee:	7892      	ldrb	r2, [r2, #2]
 80130f0:	8019      	strh	r1, [r3, #0]
 80130f2:	709a      	strb	r2, [r3, #2]
			p->moveSize = 8;
 80130f4:	687b      	ldr	r3, [r7, #4]
 80130f6:	2208      	movs	r2, #8
 80130f8:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,E,E,C,I,G,G,D");
 80130fa:	687b      	ldr	r3, [r7, #4]
 80130fc:	33a4      	adds	r3, #164	; 0xa4
 80130fe:	4a2a      	ldr	r2, [pc, #168]	; (80131a8 <problem_fetch+0x11ae4>)
 8013100:	461c      	mov	r4, r3
 8013102:	4615      	mov	r5, r2
 8013104:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8013106:	6020      	str	r0, [r4, #0]
 8013108:	6061      	str	r1, [r4, #4]
 801310a:	60a2      	str	r2, [r4, #8]
 801310c:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,8,12,13,14,15,17,18");
 801310e:	687b      	ldr	r3, [r7, #4]
 8013110:	3304      	adds	r3, #4
 8013112:	4a26      	ldr	r2, [pc, #152]	; (80131ac <problem_fetch+0x11ae8>)
 8013114:	461d      	mov	r5, r3
 8013116:	4614      	mov	r4, r2
 8013118:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801311a:	6028      	str	r0, [r5, #0]
 801311c:	6069      	str	r1, [r5, #4]
 801311e:	60aa      	str	r2, [r5, #8]
 8013120:	60eb      	str	r3, [r5, #12]
 8013122:	6820      	ldr	r0, [r4, #0]
 8013124:	6128      	str	r0, [r5, #16]
 8013126:	88a3      	ldrh	r3, [r4, #4]
 8013128:	82ab      	strh	r3, [r5, #20]
			strcpy(p->startFinish,"s,d,d,d,d,d,d,e");
 801312a:	687b      	ldr	r3, [r7, #4]
 801312c:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8013130:	4a1f      	ldr	r2, [pc, #124]	; (80131b0 <problem_fetch+0x11aec>)
 8013132:	461c      	mov	r4, r3
 8013134:	4615      	mov	r5, r2
 8013136:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8013138:	6020      	str	r0, [r4, #0]
 801313a:	6061      	str	r1, [r4, #4]
 801313c:	60a2      	str	r2, [r4, #8]
 801313e:	60e3      	str	r3, [r4, #12]
			break;
 8013140:	f009 b9f0 	b.w	801c524 <problem_fetch+0x1ae60>
 8013144:	08029b38 	.word	0x08029b38
 8013148:	08023920 	.word	0x08023920
 801314c:	08029b48 	.word	0x08029b48
 8013150:	08029b58 	.word	0x08029b58
 8013154:	080238cc 	.word	0x080238cc
 8013158:	08029b6c 	.word	0x08029b6c
 801315c:	08023e60 	.word	0x08023e60
 8013160:	08029b78 	.word	0x08029b78
 8013164:	08029b80 	.word	0x08029b80
 8013168:	080239a8 	.word	0x080239a8
 801316c:	08029b8c 	.word	0x08029b8c
 8013170:	080238ec 	.word	0x080238ec
 8013174:	08029b98 	.word	0x08029b98
 8013178:	08024130 	.word	0x08024130
 801317c:	08023f34 	.word	0x08023f34
 8013180:	08029ba4 	.word	0x08029ba4
 8013184:	08023854 	.word	0x08023854
 8013188:	08029bb0 	.word	0x08029bb0
 801318c:	08029bbc 	.word	0x08029bbc
 8013190:	08023d20 	.word	0x08023d20
 8013194:	08029bcc 	.word	0x08029bcc
 8013198:	08023f4c 	.word	0x08023f4c
 801319c:	08029bdc 	.word	0x08029bdc
 80131a0:	08029bec 	.word	0x08029bec
 80131a4:	08029c00 	.word	0x08029c00
 80131a8:	08029c10 	.word	0x08029c10
 80131ac:	08029c20 	.word	0x08029c20
 80131b0:	08023a64 	.word	0x08023a64
		case 521 :
			strcpy(p->name,"ROSA PARKS");
 80131b4:	687b      	ldr	r3, [r7, #4]
 80131b6:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80131ba:	49c3      	ldr	r1, [pc, #780]	; (80134c8 <problem_fetch+0x11e04>)
 80131bc:	461a      	mov	r2, r3
 80131be:	460b      	mov	r3, r1
 80131c0:	cb03      	ldmia	r3!, {r0, r1}
 80131c2:	6010      	str	r0, [r2, #0]
 80131c4:	6051      	str	r1, [r2, #4]
 80131c6:	8819      	ldrh	r1, [r3, #0]
 80131c8:	789b      	ldrb	r3, [r3, #2]
 80131ca:	8111      	strh	r1, [r2, #8]
 80131cc:	7293      	strb	r3, [r2, #10]
			strcpy(p->grade,"6C");
 80131ce:	687b      	ldr	r3, [r7, #4]
 80131d0:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80131d4:	4abd      	ldr	r2, [pc, #756]	; (80134cc <problem_fetch+0x11e08>)
 80131d6:	8811      	ldrh	r1, [r2, #0]
 80131d8:	7892      	ldrb	r2, [r2, #2]
 80131da:	8019      	strh	r1, [r3, #0]
 80131dc:	709a      	strb	r2, [r3, #2]
			p->moveSize = 7;
 80131de:	687b      	ldr	r3, [r7, #4]
 80131e0:	2207      	movs	r2, #7
 80131e2:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,J,D,C,H,G,A");
 80131e4:	687b      	ldr	r3, [r7, #4]
 80131e6:	33a4      	adds	r3, #164	; 0xa4
 80131e8:	4ab9      	ldr	r2, [pc, #740]	; (80134d0 <problem_fetch+0x11e0c>)
 80131ea:	461c      	mov	r4, r3
 80131ec:	4613      	mov	r3, r2
 80131ee:	cb07      	ldmia	r3!, {r0, r1, r2}
 80131f0:	6020      	str	r0, [r4, #0]
 80131f2:	6061      	str	r1, [r4, #4]
 80131f4:	60a2      	str	r2, [r4, #8]
 80131f6:	881b      	ldrh	r3, [r3, #0]
 80131f8:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,7,15,13,10,9,18");
 80131fa:	687b      	ldr	r3, [r7, #4]
 80131fc:	3304      	adds	r3, #4
 80131fe:	4ab5      	ldr	r2, [pc, #724]	; (80134d4 <problem_fetch+0x11e10>)
 8013200:	461d      	mov	r5, r3
 8013202:	4614      	mov	r4, r2
 8013204:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8013206:	6028      	str	r0, [r5, #0]
 8013208:	6069      	str	r1, [r5, #4]
 801320a:	60aa      	str	r2, [r5, #8]
 801320c:	60eb      	str	r3, [r5, #12]
 801320e:	8823      	ldrh	r3, [r4, #0]
 8013210:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 8013212:	687b      	ldr	r3, [r7, #4]
 8013214:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8013218:	4aaf      	ldr	r2, [pc, #700]	; (80134d8 <problem_fetch+0x11e14>)
 801321a:	461c      	mov	r4, r3
 801321c:	4613      	mov	r3, r2
 801321e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8013220:	6020      	str	r0, [r4, #0]
 8013222:	6061      	str	r1, [r4, #4]
 8013224:	60a2      	str	r2, [r4, #8]
 8013226:	881b      	ldrh	r3, [r3, #0]
 8013228:	81a3      	strh	r3, [r4, #12]
			break;
 801322a:	f009 b97b 	b.w	801c524 <problem_fetch+0x1ae60>
		case 522 :
			strcpy(p->name,"PONTUSBADET");
 801322e:	687b      	ldr	r3, [r7, #4]
 8013230:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8013234:	4aa9      	ldr	r2, [pc, #676]	; (80134dc <problem_fetch+0x11e18>)
 8013236:	461c      	mov	r4, r3
 8013238:	4613      	mov	r3, r2
 801323a:	cb07      	ldmia	r3!, {r0, r1, r2}
 801323c:	6020      	str	r0, [r4, #0]
 801323e:	6061      	str	r1, [r4, #4]
 8013240:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade,"7A");
 8013242:	687b      	ldr	r3, [r7, #4]
 8013244:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8013248:	4aa5      	ldr	r2, [pc, #660]	; (80134e0 <problem_fetch+0x11e1c>)
 801324a:	8811      	ldrh	r1, [r2, #0]
 801324c:	7892      	ldrb	r2, [r2, #2]
 801324e:	8019      	strh	r1, [r3, #0]
 8013250:	709a      	strb	r2, [r3, #2]
			p->moveSize = 7;
 8013252:	687b      	ldr	r3, [r7, #4]
 8013254:	2207      	movs	r2, #7
 8013256:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,E,I,H,J,H,I");
 8013258:	687b      	ldr	r3, [r7, #4]
 801325a:	33a4      	adds	r3, #164	; 0xa4
 801325c:	4aa1      	ldr	r2, [pc, #644]	; (80134e4 <problem_fetch+0x11e20>)
 801325e:	461c      	mov	r4, r3
 8013260:	4613      	mov	r3, r2
 8013262:	cb07      	ldmia	r3!, {r0, r1, r2}
 8013264:	6020      	str	r0, [r4, #0]
 8013266:	6061      	str	r1, [r4, #4]
 8013268:	60a2      	str	r2, [r4, #8]
 801326a:	881b      	ldrh	r3, [r3, #0]
 801326c:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,8,9,12,12,16,18");
 801326e:	687b      	ldr	r3, [r7, #4]
 8013270:	3304      	adds	r3, #4
 8013272:	4a9d      	ldr	r2, [pc, #628]	; (80134e8 <problem_fetch+0x11e24>)
 8013274:	461d      	mov	r5, r3
 8013276:	4614      	mov	r4, r2
 8013278:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801327a:	6028      	str	r0, [r5, #0]
 801327c:	6069      	str	r1, [r5, #4]
 801327e:	60aa      	str	r2, [r5, #8]
 8013280:	60eb      	str	r3, [r5, #12]
 8013282:	8823      	ldrh	r3, [r4, #0]
 8013284:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 8013286:	687b      	ldr	r3, [r7, #4]
 8013288:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 801328c:	4a92      	ldr	r2, [pc, #584]	; (80134d8 <problem_fetch+0x11e14>)
 801328e:	461c      	mov	r4, r3
 8013290:	4613      	mov	r3, r2
 8013292:	cb07      	ldmia	r3!, {r0, r1, r2}
 8013294:	6020      	str	r0, [r4, #0]
 8013296:	6061      	str	r1, [r4, #4]
 8013298:	60a2      	str	r2, [r4, #8]
 801329a:	881b      	ldrh	r3, [r3, #0]
 801329c:	81a3      	strh	r3, [r4, #12]
			break;
 801329e:	f009 b941 	b.w	801c524 <problem_fetch+0x1ae60>
		case 523 :
			strcpy(p->name,"FORSØK 25");
 80132a2:	687b      	ldr	r3, [r7, #4]
 80132a4:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80132a8:	4990      	ldr	r1, [pc, #576]	; (80134ec <problem_fetch+0x11e28>)
 80132aa:	461a      	mov	r2, r3
 80132ac:	460b      	mov	r3, r1
 80132ae:	cb03      	ldmia	r3!, {r0, r1}
 80132b0:	6010      	str	r0, [r2, #0]
 80132b2:	6051      	str	r1, [r2, #4]
 80132b4:	8819      	ldrh	r1, [r3, #0]
 80132b6:	789b      	ldrb	r3, [r3, #2]
 80132b8:	8111      	strh	r1, [r2, #8]
 80132ba:	7293      	strb	r3, [r2, #10]
			strcpy(p->grade,"6B+");
 80132bc:	687b      	ldr	r3, [r7, #4]
 80132be:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80132c2:	4a8b      	ldr	r2, [pc, #556]	; (80134f0 <problem_fetch+0x11e2c>)
 80132c4:	6810      	ldr	r0, [r2, #0]
 80132c6:	6018      	str	r0, [r3, #0]
			p->moveSize = 8;
 80132c8:	687b      	ldr	r3, [r7, #4]
 80132ca:	2208      	movs	r2, #8
 80132cc:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"A,C,D,E,E,E,H,J");
 80132ce:	687b      	ldr	r3, [r7, #4]
 80132d0:	33a4      	adds	r3, #164	; 0xa4
 80132d2:	4a88      	ldr	r2, [pc, #544]	; (80134f4 <problem_fetch+0x11e30>)
 80132d4:	461c      	mov	r4, r3
 80132d6:	4615      	mov	r5, r2
 80132d8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80132da:	6020      	str	r0, [r4, #0]
 80132dc:	6061      	str	r1, [r4, #4]
 80132de:	60a2      	str	r2, [r4, #8]
 80132e0:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"14,5,18,6,8,12,8,5");
 80132e2:	687b      	ldr	r3, [r7, #4]
 80132e4:	3304      	adds	r3, #4
 80132e6:	4a84      	ldr	r2, [pc, #528]	; (80134f8 <problem_fetch+0x11e34>)
 80132e8:	461d      	mov	r5, r3
 80132ea:	4614      	mov	r4, r2
 80132ec:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80132ee:	6028      	str	r0, [r5, #0]
 80132f0:	6069      	str	r1, [r5, #4]
 80132f2:	60aa      	str	r2, [r5, #8]
 80132f4:	60eb      	str	r3, [r5, #12]
 80132f6:	8823      	ldrh	r3, [r4, #0]
 80132f8:	78a2      	ldrb	r2, [r4, #2]
 80132fa:	822b      	strh	r3, [r5, #16]
 80132fc:	4613      	mov	r3, r2
 80132fe:	74ab      	strb	r3, [r5, #18]
			strcpy(p->startFinish,"d,s,e,s,d,d,d,d");
 8013300:	687b      	ldr	r3, [r7, #4]
 8013302:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8013306:	4a7d      	ldr	r2, [pc, #500]	; (80134fc <problem_fetch+0x11e38>)
 8013308:	461c      	mov	r4, r3
 801330a:	4615      	mov	r5, r2
 801330c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801330e:	6020      	str	r0, [r4, #0]
 8013310:	6061      	str	r1, [r4, #4]
 8013312:	60a2      	str	r2, [r4, #8]
 8013314:	60e3      	str	r3, [r4, #12]
			break;
 8013316:	f009 b905 	b.w	801c524 <problem_fetch+0x1ae60>
		case 524 :
			strcpy(p->name,"S1");
 801331a:	687b      	ldr	r3, [r7, #4]
 801331c:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8013320:	4a77      	ldr	r2, [pc, #476]	; (8013500 <problem_fetch+0x11e3c>)
 8013322:	8811      	ldrh	r1, [r2, #0]
 8013324:	7892      	ldrb	r2, [r2, #2]
 8013326:	8019      	strh	r1, [r3, #0]
 8013328:	709a      	strb	r2, [r3, #2]
			strcpy(p->grade,"7B");
 801332a:	687b      	ldr	r3, [r7, #4]
 801332c:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8013330:	4a74      	ldr	r2, [pc, #464]	; (8013504 <problem_fetch+0x11e40>)
 8013332:	8811      	ldrh	r1, [r2, #0]
 8013334:	7892      	ldrb	r2, [r2, #2]
 8013336:	8019      	strh	r1, [r3, #0]
 8013338:	709a      	strb	r2, [r3, #2]
			p->moveSize = 7;
 801333a:	687b      	ldr	r3, [r7, #4]
 801333c:	2207      	movs	r2, #7
 801333e:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,J,H,D,D,B,A");
 8013340:	687b      	ldr	r3, [r7, #4]
 8013342:	33a4      	adds	r3, #164	; 0xa4
 8013344:	4a70      	ldr	r2, [pc, #448]	; (8013508 <problem_fetch+0x11e44>)
 8013346:	461c      	mov	r4, r3
 8013348:	4613      	mov	r3, r2
 801334a:	cb07      	ldmia	r3!, {r0, r1, r2}
 801334c:	6020      	str	r0, [r4, #0]
 801334e:	6061      	str	r1, [r4, #4]
 8013350:	60a2      	str	r2, [r4, #8]
 8013352:	881b      	ldrh	r3, [r3, #0]
 8013354:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"6,5,8,11,15,6,18");
 8013356:	687b      	ldr	r3, [r7, #4]
 8013358:	3304      	adds	r3, #4
 801335a:	4a6c      	ldr	r2, [pc, #432]	; (801350c <problem_fetch+0x11e48>)
 801335c:	461d      	mov	r5, r3
 801335e:	4614      	mov	r4, r2
 8013360:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8013362:	6028      	str	r0, [r5, #0]
 8013364:	6069      	str	r1, [r5, #4]
 8013366:	60aa      	str	r2, [r5, #8]
 8013368:	60eb      	str	r3, [r5, #12]
 801336a:	7823      	ldrb	r3, [r4, #0]
 801336c:	742b      	strb	r3, [r5, #16]
			strcpy(p->startFinish,"s,s,d,d,d,d,e");
 801336e:	687b      	ldr	r3, [r7, #4]
 8013370:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8013374:	4a66      	ldr	r2, [pc, #408]	; (8013510 <problem_fetch+0x11e4c>)
 8013376:	461c      	mov	r4, r3
 8013378:	4613      	mov	r3, r2
 801337a:	cb07      	ldmia	r3!, {r0, r1, r2}
 801337c:	6020      	str	r0, [r4, #0]
 801337e:	6061      	str	r1, [r4, #4]
 8013380:	60a2      	str	r2, [r4, #8]
 8013382:	881b      	ldrh	r3, [r3, #0]
 8013384:	81a3      	strh	r3, [r4, #12]
			break;
 8013386:	f009 b8cd 	b.w	801c524 <problem_fetch+0x1ae60>
		case 525 :
			strcpy(p->name,"YE BOI");
 801338a:	687b      	ldr	r3, [r7, #4]
 801338c:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8013390:	4a60      	ldr	r2, [pc, #384]	; (8013514 <problem_fetch+0x11e50>)
 8013392:	6810      	ldr	r0, [r2, #0]
 8013394:	6018      	str	r0, [r3, #0]
 8013396:	8891      	ldrh	r1, [r2, #4]
 8013398:	7992      	ldrb	r2, [r2, #6]
 801339a:	8099      	strh	r1, [r3, #4]
 801339c:	719a      	strb	r2, [r3, #6]
			strcpy(p->grade,"6C+");
 801339e:	687b      	ldr	r3, [r7, #4]
 80133a0:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80133a4:	4a5c      	ldr	r2, [pc, #368]	; (8013518 <problem_fetch+0x11e54>)
 80133a6:	6810      	ldr	r0, [r2, #0]
 80133a8:	6018      	str	r0, [r3, #0]
			p->moveSize = 4;
 80133aa:	687b      	ldr	r3, [r7, #4]
 80133ac:	2204      	movs	r2, #4
 80133ae:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,H,C,D");
 80133b0:	687b      	ldr	r3, [r7, #4]
 80133b2:	33a4      	adds	r3, #164	; 0xa4
 80133b4:	4959      	ldr	r1, [pc, #356]	; (801351c <problem_fetch+0x11e58>)
 80133b6:	461a      	mov	r2, r3
 80133b8:	460b      	mov	r3, r1
 80133ba:	cb03      	ldmia	r3!, {r0, r1}
 80133bc:	6010      	str	r0, [r2, #0]
 80133be:	6051      	str	r1, [r2, #4]
			strcpy(p->moveNumbers,"4,10,13,18");
 80133c0:	687b      	ldr	r3, [r7, #4]
 80133c2:	3304      	adds	r3, #4
 80133c4:	4956      	ldr	r1, [pc, #344]	; (8013520 <problem_fetch+0x11e5c>)
 80133c6:	461a      	mov	r2, r3
 80133c8:	460b      	mov	r3, r1
 80133ca:	cb03      	ldmia	r3!, {r0, r1}
 80133cc:	6010      	str	r0, [r2, #0]
 80133ce:	6051      	str	r1, [r2, #4]
 80133d0:	8819      	ldrh	r1, [r3, #0]
 80133d2:	789b      	ldrb	r3, [r3, #2]
 80133d4:	8111      	strh	r1, [r2, #8]
 80133d6:	7293      	strb	r3, [r2, #10]
			strcpy(p->startFinish,"s,d,d,e");
 80133d8:	687b      	ldr	r3, [r7, #4]
 80133da:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 80133de:	4951      	ldr	r1, [pc, #324]	; (8013524 <problem_fetch+0x11e60>)
 80133e0:	461a      	mov	r2, r3
 80133e2:	460b      	mov	r3, r1
 80133e4:	cb03      	ldmia	r3!, {r0, r1}
 80133e6:	6010      	str	r0, [r2, #0]
 80133e8:	6051      	str	r1, [r2, #4]
			break;
 80133ea:	f009 b89b 	b.w	801c524 <problem_fetch+0x1ae60>
		case 526 :
			strcpy(p->name,"PLAYING TINDER");
 80133ee:	687b      	ldr	r3, [r7, #4]
 80133f0:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80133f4:	4a4c      	ldr	r2, [pc, #304]	; (8013528 <problem_fetch+0x11e64>)
 80133f6:	461c      	mov	r4, r3
 80133f8:	4613      	mov	r3, r2
 80133fa:	cb07      	ldmia	r3!, {r0, r1, r2}
 80133fc:	6020      	str	r0, [r4, #0]
 80133fe:	6061      	str	r1, [r4, #4]
 8013400:	60a2      	str	r2, [r4, #8]
 8013402:	881a      	ldrh	r2, [r3, #0]
 8013404:	789b      	ldrb	r3, [r3, #2]
 8013406:	81a2      	strh	r2, [r4, #12]
 8013408:	73a3      	strb	r3, [r4, #14]
			strcpy(p->grade,"7B+");
 801340a:	687b      	ldr	r3, [r7, #4]
 801340c:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8013410:	4a46      	ldr	r2, [pc, #280]	; (801352c <problem_fetch+0x11e68>)
 8013412:	6810      	ldr	r0, [r2, #0]
 8013414:	6018      	str	r0, [r3, #0]
			p->moveSize = 5;
 8013416:	687b      	ldr	r3, [r7, #4]
 8013418:	2205      	movs	r2, #5
 801341a:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"C,E,B,B,A");
 801341c:	687b      	ldr	r3, [r7, #4]
 801341e:	33a4      	adds	r3, #164	; 0xa4
 8013420:	4943      	ldr	r1, [pc, #268]	; (8013530 <problem_fetch+0x11e6c>)
 8013422:	461a      	mov	r2, r3
 8013424:	460b      	mov	r3, r1
 8013426:	cb03      	ldmia	r3!, {r0, r1}
 8013428:	6010      	str	r0, [r2, #0]
 801342a:	6051      	str	r1, [r2, #4]
 801342c:	881b      	ldrh	r3, [r3, #0]
 801342e:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"5,9,10,15,18");
 8013430:	687b      	ldr	r3, [r7, #4]
 8013432:	3304      	adds	r3, #4
 8013434:	4a3f      	ldr	r2, [pc, #252]	; (8013534 <problem_fetch+0x11e70>)
 8013436:	461c      	mov	r4, r3
 8013438:	4613      	mov	r3, r2
 801343a:	cb07      	ldmia	r3!, {r0, r1, r2}
 801343c:	6020      	str	r0, [r4, #0]
 801343e:	6061      	str	r1, [r4, #4]
 8013440:	60a2      	str	r2, [r4, #8]
 8013442:	781b      	ldrb	r3, [r3, #0]
 8013444:	7323      	strb	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,e");
 8013446:	687b      	ldr	r3, [r7, #4]
 8013448:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 801344c:	493a      	ldr	r1, [pc, #232]	; (8013538 <problem_fetch+0x11e74>)
 801344e:	461a      	mov	r2, r3
 8013450:	460b      	mov	r3, r1
 8013452:	cb03      	ldmia	r3!, {r0, r1}
 8013454:	6010      	str	r0, [r2, #0]
 8013456:	6051      	str	r1, [r2, #4]
 8013458:	881b      	ldrh	r3, [r3, #0]
 801345a:	8113      	strh	r3, [r2, #8]
			break;
 801345c:	f009 b862 	b.w	801c524 <problem_fetch+0x1ae60>
		case 527 :
			strcpy(p->name,"EXIT");
 8013460:	687b      	ldr	r3, [r7, #4]
 8013462:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8013466:	4a35      	ldr	r2, [pc, #212]	; (801353c <problem_fetch+0x11e78>)
 8013468:	6810      	ldr	r0, [r2, #0]
 801346a:	6018      	str	r0, [r3, #0]
 801346c:	7912      	ldrb	r2, [r2, #4]
 801346e:	711a      	strb	r2, [r3, #4]
			strcpy(p->grade,"7A+");
 8013470:	687b      	ldr	r3, [r7, #4]
 8013472:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8013476:	4a32      	ldr	r2, [pc, #200]	; (8013540 <problem_fetch+0x11e7c>)
 8013478:	6810      	ldr	r0, [r2, #0]
 801347a:	6018      	str	r0, [r3, #0]
			p->moveSize = 5;
 801347c:	687b      	ldr	r3, [r7, #4]
 801347e:	2205      	movs	r2, #5
 8013480:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,E,E,A,A");
 8013482:	687b      	ldr	r3, [r7, #4]
 8013484:	33a4      	adds	r3, #164	; 0xa4
 8013486:	492f      	ldr	r1, [pc, #188]	; (8013544 <problem_fetch+0x11e80>)
 8013488:	461a      	mov	r2, r3
 801348a:	460b      	mov	r3, r1
 801348c:	cb03      	ldmia	r3!, {r0, r1}
 801348e:	6010      	str	r0, [r2, #0]
 8013490:	6051      	str	r1, [r2, #4]
 8013492:	881b      	ldrh	r3, [r3, #0]
 8013494:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"5,8,12,14,18");
 8013496:	687b      	ldr	r3, [r7, #4]
 8013498:	3304      	adds	r3, #4
 801349a:	4a2b      	ldr	r2, [pc, #172]	; (8013548 <problem_fetch+0x11e84>)
 801349c:	461c      	mov	r4, r3
 801349e:	4613      	mov	r3, r2
 80134a0:	cb07      	ldmia	r3!, {r0, r1, r2}
 80134a2:	6020      	str	r0, [r4, #0]
 80134a4:	6061      	str	r1, [r4, #4]
 80134a6:	60a2      	str	r2, [r4, #8]
 80134a8:	781b      	ldrb	r3, [r3, #0]
 80134aa:	7323      	strb	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,e");
 80134ac:	687b      	ldr	r3, [r7, #4]
 80134ae:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 80134b2:	4921      	ldr	r1, [pc, #132]	; (8013538 <problem_fetch+0x11e74>)
 80134b4:	461a      	mov	r2, r3
 80134b6:	460b      	mov	r3, r1
 80134b8:	cb03      	ldmia	r3!, {r0, r1}
 80134ba:	6010      	str	r0, [r2, #0]
 80134bc:	6051      	str	r1, [r2, #4]
 80134be:	881b      	ldrh	r3, [r3, #0]
 80134c0:	8113      	strh	r3, [r2, #8]
			break;
 80134c2:	f009 b82f 	b.w	801c524 <problem_fetch+0x1ae60>
 80134c6:	bf00      	nop
 80134c8:	08029c38 	.word	0x08029c38
 80134cc:	08023920 	.word	0x08023920
 80134d0:	08029c44 	.word	0x08029c44
 80134d4:	08029c54 	.word	0x08029c54
 80134d8:	080239dc 	.word	0x080239dc
 80134dc:	08029c68 	.word	0x08029c68
 80134e0:	08023814 	.word	0x08023814
 80134e4:	08029c74 	.word	0x08029c74
 80134e8:	08029c84 	.word	0x08029c84
 80134ec:	08029c98 	.word	0x08029c98
 80134f0:	08023854 	.word	0x08023854
 80134f4:	08029ca4 	.word	0x08029ca4
 80134f8:	08029cb4 	.word	0x08029cb4
 80134fc:	08029cc8 	.word	0x08029cc8
 8013500:	08029cd8 	.word	0x08029cd8
 8013504:	08023f4c 	.word	0x08023f4c
 8013508:	08029cdc 	.word	0x08029cdc
 801350c:	08029cec 	.word	0x08029cec
 8013510:	080238cc 	.word	0x080238cc
 8013514:	08029d00 	.word	0x08029d00
 8013518:	080238ec 	.word	0x080238ec
 801351c:	080296f4 	.word	0x080296f4
 8013520:	08026d30 	.word	0x08026d30
 8013524:	080239a8 	.word	0x080239a8
 8013528:	08029d08 	.word	0x08029d08
 801352c:	08023990 	.word	0x08023990
 8013530:	08029d18 	.word	0x08029d18
 8013534:	08029d24 	.word	0x08029d24
 8013538:	08023d20 	.word	0x08023d20
 801353c:	08029d34 	.word	0x08029d34
 8013540:	080239f4 	.word	0x080239f4
 8013544:	08029d3c 	.word	0x08029d3c
 8013548:	0802784c 	.word	0x0802784c
		case 528 :
			strcpy(p->name,"AKAHN N LIL CEASY");
 801354c:	687b      	ldr	r3, [r7, #4]
 801354e:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8013552:	4ac1      	ldr	r2, [pc, #772]	; (8013858 <problem_fetch+0x12194>)
 8013554:	461d      	mov	r5, r3
 8013556:	4614      	mov	r4, r2
 8013558:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801355a:	6028      	str	r0, [r5, #0]
 801355c:	6069      	str	r1, [r5, #4]
 801355e:	60aa      	str	r2, [r5, #8]
 8013560:	60eb      	str	r3, [r5, #12]
 8013562:	8823      	ldrh	r3, [r4, #0]
 8013564:	822b      	strh	r3, [r5, #16]
			strcpy(p->grade,"6B+");
 8013566:	687b      	ldr	r3, [r7, #4]
 8013568:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801356c:	4abb      	ldr	r2, [pc, #748]	; (801385c <problem_fetch+0x12198>)
 801356e:	6810      	ldr	r0, [r2, #0]
 8013570:	6018      	str	r0, [r3, #0]
			p->moveSize = 9;
 8013572:	687b      	ldr	r3, [r7, #4]
 8013574:	2209      	movs	r2, #9
 8013576:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,H,E,F,E,J,I,E,D");
 8013578:	687b      	ldr	r3, [r7, #4]
 801357a:	33a4      	adds	r3, #164	; 0xa4
 801357c:	4ab8      	ldr	r2, [pc, #736]	; (8013860 <problem_fetch+0x1219c>)
 801357e:	461d      	mov	r5, r3
 8013580:	4614      	mov	r4, r2
 8013582:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8013584:	6028      	str	r0, [r5, #0]
 8013586:	6069      	str	r1, [r5, #4]
 8013588:	60aa      	str	r2, [r5, #8]
 801358a:	60eb      	str	r3, [r5, #12]
 801358c:	8823      	ldrh	r3, [r4, #0]
 801358e:	822b      	strh	r3, [r5, #16]
			strcpy(p->moveNumbers,"4,8,8,11,12,7,14,16,18");
 8013590:	687b      	ldr	r3, [r7, #4]
 8013592:	3304      	adds	r3, #4
 8013594:	4ab3      	ldr	r2, [pc, #716]	; (8013864 <problem_fetch+0x121a0>)
 8013596:	461c      	mov	r4, r3
 8013598:	4615      	mov	r5, r2
 801359a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801359c:	6020      	str	r0, [r4, #0]
 801359e:	6061      	str	r1, [r4, #4]
 80135a0:	60a2      	str	r2, [r4, #8]
 80135a2:	60e3      	str	r3, [r4, #12]
 80135a4:	6828      	ldr	r0, [r5, #0]
 80135a6:	6120      	str	r0, [r4, #16]
 80135a8:	88ab      	ldrh	r3, [r5, #4]
 80135aa:	79aa      	ldrb	r2, [r5, #6]
 80135ac:	82a3      	strh	r3, [r4, #20]
 80135ae:	4613      	mov	r3, r2
 80135b0:	75a3      	strb	r3, [r4, #22]
			strcpy(p->startFinish,"s,d,d,d,d,d,d,d,e");
 80135b2:	687b      	ldr	r3, [r7, #4]
 80135b4:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 80135b8:	4aab      	ldr	r2, [pc, #684]	; (8013868 <problem_fetch+0x121a4>)
 80135ba:	461d      	mov	r5, r3
 80135bc:	4614      	mov	r4, r2
 80135be:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80135c0:	6028      	str	r0, [r5, #0]
 80135c2:	6069      	str	r1, [r5, #4]
 80135c4:	60aa      	str	r2, [r5, #8]
 80135c6:	60eb      	str	r3, [r5, #12]
 80135c8:	8823      	ldrh	r3, [r4, #0]
 80135ca:	822b      	strh	r3, [r5, #16]
			break;
 80135cc:	f008 bfaa 	b.w	801c524 <problem_fetch+0x1ae60>
		case 529 :
			strcpy(p->name,"TECH");
 80135d0:	687b      	ldr	r3, [r7, #4]
 80135d2:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80135d6:	4aa5      	ldr	r2, [pc, #660]	; (801386c <problem_fetch+0x121a8>)
 80135d8:	6810      	ldr	r0, [r2, #0]
 80135da:	6018      	str	r0, [r3, #0]
 80135dc:	7912      	ldrb	r2, [r2, #4]
 80135de:	711a      	strb	r2, [r3, #4]
			strcpy(p->grade,"7A+");
 80135e0:	687b      	ldr	r3, [r7, #4]
 80135e2:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80135e6:	4aa2      	ldr	r2, [pc, #648]	; (8013870 <problem_fetch+0x121ac>)
 80135e8:	6810      	ldr	r0, [r2, #0]
 80135ea:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 80135ec:	687b      	ldr	r3, [r7, #4]
 80135ee:	2207      	movs	r2, #7
 80135f0:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,E,F,E,H,G,I");
 80135f2:	687b      	ldr	r3, [r7, #4]
 80135f4:	33a4      	adds	r3, #164	; 0xa4
 80135f6:	4a9f      	ldr	r2, [pc, #636]	; (8013874 <problem_fetch+0x121b0>)
 80135f8:	461c      	mov	r4, r3
 80135fa:	4613      	mov	r3, r2
 80135fc:	cb07      	ldmia	r3!, {r0, r1, r2}
 80135fe:	6020      	str	r0, [r4, #0]
 8013600:	6061      	str	r1, [r4, #4]
 8013602:	60a2      	str	r2, [r4, #8]
 8013604:	881b      	ldrh	r3, [r3, #0]
 8013606:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,8,11,12,12,15,18");
 8013608:	687b      	ldr	r3, [r7, #4]
 801360a:	3304      	adds	r3, #4
 801360c:	4a9a      	ldr	r2, [pc, #616]	; (8013878 <problem_fetch+0x121b4>)
 801360e:	461d      	mov	r5, r3
 8013610:	4614      	mov	r4, r2
 8013612:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8013614:	6028      	str	r0, [r5, #0]
 8013616:	6069      	str	r1, [r5, #4]
 8013618:	60aa      	str	r2, [r5, #8]
 801361a:	60eb      	str	r3, [r5, #12]
 801361c:	8823      	ldrh	r3, [r4, #0]
 801361e:	78a2      	ldrb	r2, [r4, #2]
 8013620:	822b      	strh	r3, [r5, #16]
 8013622:	4613      	mov	r3, r2
 8013624:	74ab      	strb	r3, [r5, #18]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 8013626:	687b      	ldr	r3, [r7, #4]
 8013628:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 801362c:	4a93      	ldr	r2, [pc, #588]	; (801387c <problem_fetch+0x121b8>)
 801362e:	461c      	mov	r4, r3
 8013630:	4613      	mov	r3, r2
 8013632:	cb07      	ldmia	r3!, {r0, r1, r2}
 8013634:	6020      	str	r0, [r4, #0]
 8013636:	6061      	str	r1, [r4, #4]
 8013638:	60a2      	str	r2, [r4, #8]
 801363a:	881b      	ldrh	r3, [r3, #0]
 801363c:	81a3      	strh	r3, [r4, #12]
			break;
 801363e:	f008 bf71 	b.w	801c524 <problem_fetch+0x1ae60>
		case 530 :
			strcpy(p->name,"FIRST PROB.");
 8013642:	687b      	ldr	r3, [r7, #4]
 8013644:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8013648:	4a8d      	ldr	r2, [pc, #564]	; (8013880 <problem_fetch+0x121bc>)
 801364a:	461c      	mov	r4, r3
 801364c:	4613      	mov	r3, r2
 801364e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8013650:	6020      	str	r0, [r4, #0]
 8013652:	6061      	str	r1, [r4, #4]
 8013654:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade,"6B+");
 8013656:	687b      	ldr	r3, [r7, #4]
 8013658:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801365c:	4a7f      	ldr	r2, [pc, #508]	; (801385c <problem_fetch+0x12198>)
 801365e:	6810      	ldr	r0, [r2, #0]
 8013660:	6018      	str	r0, [r3, #0]
			p->moveSize = 13;
 8013662:	687b      	ldr	r3, [r7, #4]
 8013664:	220d      	movs	r2, #13
 8013666:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,C,C,E,G,G,D,C,A,D,C,E,A");
 8013668:	687b      	ldr	r3, [r7, #4]
 801366a:	33a4      	adds	r3, #164	; 0xa4
 801366c:	4a85      	ldr	r2, [pc, #532]	; (8013884 <problem_fetch+0x121c0>)
 801366e:	461d      	mov	r5, r3
 8013670:	4614      	mov	r4, r2
 8013672:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8013674:	6028      	str	r0, [r5, #0]
 8013676:	6069      	str	r1, [r5, #4]
 8013678:	60aa      	str	r2, [r5, #8]
 801367a:	60eb      	str	r3, [r5, #12]
 801367c:	cc03      	ldmia	r4!, {r0, r1}
 801367e:	6128      	str	r0, [r5, #16]
 8013680:	6169      	str	r1, [r5, #20]
 8013682:	8823      	ldrh	r3, [r4, #0]
 8013684:	832b      	strh	r3, [r5, #24]
			strcpy(p->moveNumbers,"4,5,8,9,9,10,11,16,14,15,13,12,18");
 8013686:	687b      	ldr	r3, [r7, #4]
 8013688:	3304      	adds	r3, #4
 801368a:	4a7f      	ldr	r2, [pc, #508]	; (8013888 <problem_fetch+0x121c4>)
 801368c:	4614      	mov	r4, r2
 801368e:	469c      	mov	ip, r3
 8013690:	f104 0e20 	add.w	lr, r4, #32
 8013694:	4665      	mov	r5, ip
 8013696:	4626      	mov	r6, r4
 8013698:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 801369a:	6028      	str	r0, [r5, #0]
 801369c:	6069      	str	r1, [r5, #4]
 801369e:	60aa      	str	r2, [r5, #8]
 80136a0:	60eb      	str	r3, [r5, #12]
 80136a2:	3410      	adds	r4, #16
 80136a4:	f10c 0c10 	add.w	ip, ip, #16
 80136a8:	4574      	cmp	r4, lr
 80136aa:	d1f3      	bne.n	8013694 <problem_fetch+0x11fd0>
 80136ac:	4662      	mov	r2, ip
 80136ae:	4623      	mov	r3, r4
 80136b0:	881b      	ldrh	r3, [r3, #0]
 80136b2:	8013      	strh	r3, [r2, #0]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,d,d,d,d,d,e");
 80136b4:	687b      	ldr	r3, [r7, #4]
 80136b6:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 80136ba:	4a74      	ldr	r2, [pc, #464]	; (801388c <problem_fetch+0x121c8>)
 80136bc:	461d      	mov	r5, r3
 80136be:	4614      	mov	r4, r2
 80136c0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80136c2:	6028      	str	r0, [r5, #0]
 80136c4:	6069      	str	r1, [r5, #4]
 80136c6:	60aa      	str	r2, [r5, #8]
 80136c8:	60eb      	str	r3, [r5, #12]
 80136ca:	cc03      	ldmia	r4!, {r0, r1}
 80136cc:	6128      	str	r0, [r5, #16]
 80136ce:	6169      	str	r1, [r5, #20]
 80136d0:	8823      	ldrh	r3, [r4, #0]
 80136d2:	832b      	strh	r3, [r5, #24]
			break;
 80136d4:	f008 bf26 	b.w	801c524 <problem_fetch+0x1ae60>
		case 531 :
			strcpy(p->name,"NEW PROB");
 80136d8:	687b      	ldr	r3, [r7, #4]
 80136da:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80136de:	496c      	ldr	r1, [pc, #432]	; (8013890 <problem_fetch+0x121cc>)
 80136e0:	461a      	mov	r2, r3
 80136e2:	460b      	mov	r3, r1
 80136e4:	cb03      	ldmia	r3!, {r0, r1}
 80136e6:	6010      	str	r0, [r2, #0]
 80136e8:	6051      	str	r1, [r2, #4]
 80136ea:	781b      	ldrb	r3, [r3, #0]
 80136ec:	7213      	strb	r3, [r2, #8]
			strcpy(p->grade,"6B+");
 80136ee:	687b      	ldr	r3, [r7, #4]
 80136f0:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80136f4:	4a59      	ldr	r2, [pc, #356]	; (801385c <problem_fetch+0x12198>)
 80136f6:	6810      	ldr	r0, [r2, #0]
 80136f8:	6018      	str	r0, [r3, #0]
			p->moveSize = 13;
 80136fa:	687b      	ldr	r3, [r7, #4]
 80136fc:	220d      	movs	r2, #13
 80136fe:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,C,C,A,B,C,B,A,D,C,E,D,A");
 8013700:	687b      	ldr	r3, [r7, #4]
 8013702:	33a4      	adds	r3, #164	; 0xa4
 8013704:	4a63      	ldr	r2, [pc, #396]	; (8013894 <problem_fetch+0x121d0>)
 8013706:	461d      	mov	r5, r3
 8013708:	4614      	mov	r4, r2
 801370a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801370c:	6028      	str	r0, [r5, #0]
 801370e:	6069      	str	r1, [r5, #4]
 8013710:	60aa      	str	r2, [r5, #8]
 8013712:	60eb      	str	r3, [r5, #12]
 8013714:	cc03      	ldmia	r4!, {r0, r1}
 8013716:	6128      	str	r0, [r5, #16]
 8013718:	6169      	str	r1, [r5, #20]
 801371a:	8823      	ldrh	r3, [r4, #0]
 801371c:	832b      	strh	r3, [r5, #24]
			strcpy(p->moveNumbers,"4,5,16,14,15,13,10,9,7,8,8,11,18");
 801371e:	687b      	ldr	r3, [r7, #4]
 8013720:	3304      	adds	r3, #4
 8013722:	4a5d      	ldr	r2, [pc, #372]	; (8013898 <problem_fetch+0x121d4>)
 8013724:	4614      	mov	r4, r2
 8013726:	469c      	mov	ip, r3
 8013728:	f104 0e20 	add.w	lr, r4, #32
 801372c:	4665      	mov	r5, ip
 801372e:	4626      	mov	r6, r4
 8013730:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8013732:	6028      	str	r0, [r5, #0]
 8013734:	6069      	str	r1, [r5, #4]
 8013736:	60aa      	str	r2, [r5, #8]
 8013738:	60eb      	str	r3, [r5, #12]
 801373a:	3410      	adds	r4, #16
 801373c:	f10c 0c10 	add.w	ip, ip, #16
 8013740:	4574      	cmp	r4, lr
 8013742:	d1f3      	bne.n	801372c <problem_fetch+0x12068>
 8013744:	4663      	mov	r3, ip
 8013746:	4622      	mov	r2, r4
 8013748:	7812      	ldrb	r2, [r2, #0]
 801374a:	701a      	strb	r2, [r3, #0]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,d,d,d,d,d,e");
 801374c:	687b      	ldr	r3, [r7, #4]
 801374e:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8013752:	4a4e      	ldr	r2, [pc, #312]	; (801388c <problem_fetch+0x121c8>)
 8013754:	461d      	mov	r5, r3
 8013756:	4614      	mov	r4, r2
 8013758:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801375a:	6028      	str	r0, [r5, #0]
 801375c:	6069      	str	r1, [r5, #4]
 801375e:	60aa      	str	r2, [r5, #8]
 8013760:	60eb      	str	r3, [r5, #12]
 8013762:	cc03      	ldmia	r4!, {r0, r1}
 8013764:	6128      	str	r0, [r5, #16]
 8013766:	6169      	str	r1, [r5, #20]
 8013768:	8823      	ldrh	r3, [r4, #0]
 801376a:	832b      	strh	r3, [r5, #24]
			break;
 801376c:	f008 beda 	b.w	801c524 <problem_fetch+0x1ae60>
		case 532 :
			strcpy(p->name,"BLACK HEART");
 8013770:	687b      	ldr	r3, [r7, #4]
 8013772:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8013776:	4a49      	ldr	r2, [pc, #292]	; (801389c <problem_fetch+0x121d8>)
 8013778:	461c      	mov	r4, r3
 801377a:	4613      	mov	r3, r2
 801377c:	cb07      	ldmia	r3!, {r0, r1, r2}
 801377e:	6020      	str	r0, [r4, #0]
 8013780:	6061      	str	r1, [r4, #4]
 8013782:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade,"6C+");
 8013784:	687b      	ldr	r3, [r7, #4]
 8013786:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801378a:	4a45      	ldr	r2, [pc, #276]	; (80138a0 <problem_fetch+0x121dc>)
 801378c:	6810      	ldr	r0, [r2, #0]
 801378e:	6018      	str	r0, [r3, #0]
			p->moveSize = 5;
 8013790:	687b      	ldr	r3, [r7, #4]
 8013792:	2205      	movs	r2, #5
 8013794:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,I,I,G,I");
 8013796:	687b      	ldr	r3, [r7, #4]
 8013798:	33a4      	adds	r3, #164	; 0xa4
 801379a:	4942      	ldr	r1, [pc, #264]	; (80138a4 <problem_fetch+0x121e0>)
 801379c:	461a      	mov	r2, r3
 801379e:	460b      	mov	r3, r1
 80137a0:	cb03      	ldmia	r3!, {r0, r1}
 80137a2:	6010      	str	r0, [r2, #0]
 80137a4:	6051      	str	r1, [r2, #4]
 80137a6:	881b      	ldrh	r3, [r3, #0]
 80137a8:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"5,10,14,17,18");
 80137aa:	687b      	ldr	r3, [r7, #4]
 80137ac:	3304      	adds	r3, #4
 80137ae:	4a3e      	ldr	r2, [pc, #248]	; (80138a8 <problem_fetch+0x121e4>)
 80137b0:	461c      	mov	r4, r3
 80137b2:	4613      	mov	r3, r2
 80137b4:	cb07      	ldmia	r3!, {r0, r1, r2}
 80137b6:	6020      	str	r0, [r4, #0]
 80137b8:	6061      	str	r1, [r4, #4]
 80137ba:	60a2      	str	r2, [r4, #8]
 80137bc:	881b      	ldrh	r3, [r3, #0]
 80137be:	81a3      	strh	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,e");
 80137c0:	687b      	ldr	r3, [r7, #4]
 80137c2:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 80137c6:	4939      	ldr	r1, [pc, #228]	; (80138ac <problem_fetch+0x121e8>)
 80137c8:	461a      	mov	r2, r3
 80137ca:	460b      	mov	r3, r1
 80137cc:	cb03      	ldmia	r3!, {r0, r1}
 80137ce:	6010      	str	r0, [r2, #0]
 80137d0:	6051      	str	r1, [r2, #4]
 80137d2:	881b      	ldrh	r3, [r3, #0]
 80137d4:	8113      	strh	r3, [r2, #8]
			break;
 80137d6:	f008 bea5 	b.w	801c524 <problem_fetch+0x1ae60>
		case 533 :
			strcpy(p->name,"MONOTHEISM");
 80137da:	687b      	ldr	r3, [r7, #4]
 80137dc:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80137e0:	4933      	ldr	r1, [pc, #204]	; (80138b0 <problem_fetch+0x121ec>)
 80137e2:	461a      	mov	r2, r3
 80137e4:	460b      	mov	r3, r1
 80137e6:	cb03      	ldmia	r3!, {r0, r1}
 80137e8:	6010      	str	r0, [r2, #0]
 80137ea:	6051      	str	r1, [r2, #4]
 80137ec:	8819      	ldrh	r1, [r3, #0]
 80137ee:	789b      	ldrb	r3, [r3, #2]
 80137f0:	8111      	strh	r1, [r2, #8]
 80137f2:	7293      	strb	r3, [r2, #10]
			strcpy(p->grade,"7A+");
 80137f4:	687b      	ldr	r3, [r7, #4]
 80137f6:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80137fa:	4a1d      	ldr	r2, [pc, #116]	; (8013870 <problem_fetch+0x121ac>)
 80137fc:	6810      	ldr	r0, [r2, #0]
 80137fe:	6018      	str	r0, [r3, #0]
			p->moveSize = 9;
 8013800:	687b      	ldr	r3, [r7, #4]
 8013802:	2209      	movs	r2, #9
 8013804:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"E,G,K,H,C,C,I,D,A");
 8013806:	687b      	ldr	r3, [r7, #4]
 8013808:	33a4      	adds	r3, #164	; 0xa4
 801380a:	4a2a      	ldr	r2, [pc, #168]	; (80138b4 <problem_fetch+0x121f0>)
 801380c:	461d      	mov	r5, r3
 801380e:	4614      	mov	r4, r2
 8013810:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8013812:	6028      	str	r0, [r5, #0]
 8013814:	6069      	str	r1, [r5, #4]
 8013816:	60aa      	str	r2, [r5, #8]
 8013818:	60eb      	str	r3, [r5, #12]
 801381a:	8823      	ldrh	r3, [r4, #0]
 801381c:	822b      	strh	r3, [r5, #16]
			strcpy(p->moveNumbers,"6,4,9,13,13,16,14,11,18");
 801381e:	687b      	ldr	r3, [r7, #4]
 8013820:	3304      	adds	r3, #4
 8013822:	4a25      	ldr	r2, [pc, #148]	; (80138b8 <problem_fetch+0x121f4>)
 8013824:	461d      	mov	r5, r3
 8013826:	4614      	mov	r4, r2
 8013828:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801382a:	6028      	str	r0, [r5, #0]
 801382c:	6069      	str	r1, [r5, #4]
 801382e:	60aa      	str	r2, [r5, #8]
 8013830:	60eb      	str	r3, [r5, #12]
 8013832:	cc03      	ldmia	r4!, {r0, r1}
 8013834:	6128      	str	r0, [r5, #16]
 8013836:	6169      	str	r1, [r5, #20]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,d,e");
 8013838:	687b      	ldr	r3, [r7, #4]
 801383a:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 801383e:	4a1f      	ldr	r2, [pc, #124]	; (80138bc <problem_fetch+0x121f8>)
 8013840:	461d      	mov	r5, r3
 8013842:	4614      	mov	r4, r2
 8013844:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8013846:	6028      	str	r0, [r5, #0]
 8013848:	6069      	str	r1, [r5, #4]
 801384a:	60aa      	str	r2, [r5, #8]
 801384c:	60eb      	str	r3, [r5, #12]
 801384e:	8823      	ldrh	r3, [r4, #0]
 8013850:	822b      	strh	r3, [r5, #16]
			break;
 8013852:	f008 be67 	b.w	801c524 <problem_fetch+0x1ae60>
 8013856:	bf00      	nop
 8013858:	08029d48 	.word	0x08029d48
 801385c:	08023854 	.word	0x08023854
 8013860:	08029d5c 	.word	0x08029d5c
 8013864:	08029d70 	.word	0x08029d70
 8013868:	0802570c 	.word	0x0802570c
 801386c:	08029d88 	.word	0x08029d88
 8013870:	080239f4 	.word	0x080239f4
 8013874:	08029d90 	.word	0x08029d90
 8013878:	08029da0 	.word	0x08029da0
 801387c:	080239dc 	.word	0x080239dc
 8013880:	08029db4 	.word	0x08029db4
 8013884:	08029dc0 	.word	0x08029dc0
 8013888:	08029ddc 	.word	0x08029ddc
 801388c:	08028354 	.word	0x08028354
 8013890:	08029e00 	.word	0x08029e00
 8013894:	08029e0c 	.word	0x08029e0c
 8013898:	08029e28 	.word	0x08029e28
 801389c:	08029e4c 	.word	0x08029e4c
 80138a0:	080238ec 	.word	0x080238ec
 80138a4:	08029e58 	.word	0x08029e58
 80138a8:	08029e64 	.word	0x08029e64
 80138ac:	08023d20 	.word	0x08023d20
 80138b0:	08029e74 	.word	0x08029e74
 80138b4:	08029e80 	.word	0x08029e80
 80138b8:	08029e94 	.word	0x08029e94
 80138bc:	08024838 	.word	0x08024838
		case 534 :
			strcpy(p->name,"GIVE ME SOMETHING BETTER");
 80138c0:	687b      	ldr	r3, [r7, #4]
 80138c2:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80138c6:	4aae      	ldr	r2, [pc, #696]	; (8013b80 <problem_fetch+0x124bc>)
 80138c8:	461d      	mov	r5, r3
 80138ca:	4614      	mov	r4, r2
 80138cc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80138ce:	6028      	str	r0, [r5, #0]
 80138d0:	6069      	str	r1, [r5, #4]
 80138d2:	60aa      	str	r2, [r5, #8]
 80138d4:	60eb      	str	r3, [r5, #12]
 80138d6:	cc03      	ldmia	r4!, {r0, r1}
 80138d8:	6128      	str	r0, [r5, #16]
 80138da:	6169      	str	r1, [r5, #20]
 80138dc:	7823      	ldrb	r3, [r4, #0]
 80138de:	762b      	strb	r3, [r5, #24]
			strcpy(p->grade,"6C+");
 80138e0:	687b      	ldr	r3, [r7, #4]
 80138e2:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80138e6:	4aa7      	ldr	r2, [pc, #668]	; (8013b84 <problem_fetch+0x124c0>)
 80138e8:	6810      	ldr	r0, [r2, #0]
 80138ea:	6018      	str	r0, [r3, #0]
			p->moveSize = 9;
 80138ec:	687b      	ldr	r3, [r7, #4]
 80138ee:	2209      	movs	r2, #9
 80138f0:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"E,G,K,H,I,C,D,B,A");
 80138f2:	687b      	ldr	r3, [r7, #4]
 80138f4:	33a4      	adds	r3, #164	; 0xa4
 80138f6:	4aa4      	ldr	r2, [pc, #656]	; (8013b88 <problem_fetch+0x124c4>)
 80138f8:	461d      	mov	r5, r3
 80138fa:	4614      	mov	r4, r2
 80138fc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80138fe:	6028      	str	r0, [r5, #0]
 8013900:	6069      	str	r1, [r5, #4]
 8013902:	60aa      	str	r2, [r5, #8]
 8013904:	60eb      	str	r3, [r5, #12]
 8013906:	8823      	ldrh	r3, [r4, #0]
 8013908:	822b      	strh	r3, [r5, #16]
			strcpy(p->moveNumbers,"6,4,9,13,14,13,15,12,18");
 801390a:	687b      	ldr	r3, [r7, #4]
 801390c:	3304      	adds	r3, #4
 801390e:	4a9f      	ldr	r2, [pc, #636]	; (8013b8c <problem_fetch+0x124c8>)
 8013910:	461d      	mov	r5, r3
 8013912:	4614      	mov	r4, r2
 8013914:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8013916:	6028      	str	r0, [r5, #0]
 8013918:	6069      	str	r1, [r5, #4]
 801391a:	60aa      	str	r2, [r5, #8]
 801391c:	60eb      	str	r3, [r5, #12]
 801391e:	cc03      	ldmia	r4!, {r0, r1}
 8013920:	6128      	str	r0, [r5, #16]
 8013922:	6169      	str	r1, [r5, #20]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,d,e");
 8013924:	687b      	ldr	r3, [r7, #4]
 8013926:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 801392a:	4a99      	ldr	r2, [pc, #612]	; (8013b90 <problem_fetch+0x124cc>)
 801392c:	461d      	mov	r5, r3
 801392e:	4614      	mov	r4, r2
 8013930:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8013932:	6028      	str	r0, [r5, #0]
 8013934:	6069      	str	r1, [r5, #4]
 8013936:	60aa      	str	r2, [r5, #8]
 8013938:	60eb      	str	r3, [r5, #12]
 801393a:	8823      	ldrh	r3, [r4, #0]
 801393c:	822b      	strh	r3, [r5, #16]
			break;
 801393e:	f008 bdf1 	b.w	801c524 <problem_fetch+0x1ae60>
		case 535 :
			strcpy(p->name,"POOP TWISTER");
 8013942:	687b      	ldr	r3, [r7, #4]
 8013944:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8013948:	4a92      	ldr	r2, [pc, #584]	; (8013b94 <problem_fetch+0x124d0>)
 801394a:	461c      	mov	r4, r3
 801394c:	4613      	mov	r3, r2
 801394e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8013950:	6020      	str	r0, [r4, #0]
 8013952:	6061      	str	r1, [r4, #4]
 8013954:	60a2      	str	r2, [r4, #8]
 8013956:	781b      	ldrb	r3, [r3, #0]
 8013958:	7323      	strb	r3, [r4, #12]
			strcpy(p->grade,"6C");
 801395a:	687b      	ldr	r3, [r7, #4]
 801395c:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8013960:	4a8d      	ldr	r2, [pc, #564]	; (8013b98 <problem_fetch+0x124d4>)
 8013962:	8811      	ldrh	r1, [r2, #0]
 8013964:	7892      	ldrb	r2, [r2, #2]
 8013966:	8019      	strh	r1, [r3, #0]
 8013968:	709a      	strb	r2, [r3, #2]
			p->moveSize = 7;
 801396a:	687b      	ldr	r3, [r7, #4]
 801396c:	2207      	movs	r2, #7
 801396e:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"E,J,G,D,G,E,I");
 8013970:	687b      	ldr	r3, [r7, #4]
 8013972:	33a4      	adds	r3, #164	; 0xa4
 8013974:	4a89      	ldr	r2, [pc, #548]	; (8013b9c <problem_fetch+0x124d8>)
 8013976:	461c      	mov	r4, r3
 8013978:	4613      	mov	r3, r2
 801397a:	cb07      	ldmia	r3!, {r0, r1, r2}
 801397c:	6020      	str	r0, [r4, #0]
 801397e:	6061      	str	r1, [r4, #4]
 8013980:	60a2      	str	r2, [r4, #8]
 8013982:	881b      	ldrh	r3, [r3, #0]
 8013984:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"6,5,9,11,14,16,18");
 8013986:	687b      	ldr	r3, [r7, #4]
 8013988:	3304      	adds	r3, #4
 801398a:	4a85      	ldr	r2, [pc, #532]	; (8013ba0 <problem_fetch+0x124dc>)
 801398c:	461d      	mov	r5, r3
 801398e:	4614      	mov	r4, r2
 8013990:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8013992:	6028      	str	r0, [r5, #0]
 8013994:	6069      	str	r1, [r5, #4]
 8013996:	60aa      	str	r2, [r5, #8]
 8013998:	60eb      	str	r3, [r5, #12]
 801399a:	8823      	ldrh	r3, [r4, #0]
 801399c:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,s,d,d,d,d,e");
 801399e:	687b      	ldr	r3, [r7, #4]
 80139a0:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 80139a4:	4a7f      	ldr	r2, [pc, #508]	; (8013ba4 <problem_fetch+0x124e0>)
 80139a6:	461c      	mov	r4, r3
 80139a8:	4613      	mov	r3, r2
 80139aa:	cb07      	ldmia	r3!, {r0, r1, r2}
 80139ac:	6020      	str	r0, [r4, #0]
 80139ae:	6061      	str	r1, [r4, #4]
 80139b0:	60a2      	str	r2, [r4, #8]
 80139b2:	881b      	ldrh	r3, [r3, #0]
 80139b4:	81a3      	strh	r3, [r4, #12]
			break;
 80139b6:	f008 bdb5 	b.w	801c524 <problem_fetch+0x1ae60>
		case 536 :
			strcpy(p->name,"TAMOA NARASAKI BOMB");
 80139ba:	687b      	ldr	r3, [r7, #4]
 80139bc:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80139c0:	4a79      	ldr	r2, [pc, #484]	; (8013ba8 <problem_fetch+0x124e4>)
 80139c2:	461d      	mov	r5, r3
 80139c4:	4614      	mov	r4, r2
 80139c6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80139c8:	6028      	str	r0, [r5, #0]
 80139ca:	6069      	str	r1, [r5, #4]
 80139cc:	60aa      	str	r2, [r5, #8]
 80139ce:	60eb      	str	r3, [r5, #12]
 80139d0:	6820      	ldr	r0, [r4, #0]
 80139d2:	6128      	str	r0, [r5, #16]
			strcpy(p->grade,"7B+");
 80139d4:	687b      	ldr	r3, [r7, #4]
 80139d6:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80139da:	4a74      	ldr	r2, [pc, #464]	; (8013bac <problem_fetch+0x124e8>)
 80139dc:	6810      	ldr	r0, [r2, #0]
 80139de:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 80139e0:	687b      	ldr	r3, [r7, #4]
 80139e2:	2207      	movs	r2, #7
 80139e4:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,H,C,I,E,C,A");
 80139e6:	687b      	ldr	r3, [r7, #4]
 80139e8:	33a4      	adds	r3, #164	; 0xa4
 80139ea:	4a71      	ldr	r2, [pc, #452]	; (8013bb0 <problem_fetch+0x124ec>)
 80139ec:	461c      	mov	r4, r3
 80139ee:	4613      	mov	r3, r2
 80139f0:	cb07      	ldmia	r3!, {r0, r1, r2}
 80139f2:	6020      	str	r0, [r4, #0]
 80139f4:	6061      	str	r1, [r4, #4]
 80139f6:	60a2      	str	r2, [r4, #8]
 80139f8:	881b      	ldrh	r3, [r3, #0]
 80139fa:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,8,8,9,16,13,18");
 80139fc:	687b      	ldr	r3, [r7, #4]
 80139fe:	3304      	adds	r3, #4
 8013a00:	4a6c      	ldr	r2, [pc, #432]	; (8013bb4 <problem_fetch+0x124f0>)
 8013a02:	461d      	mov	r5, r3
 8013a04:	4614      	mov	r4, r2
 8013a06:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8013a08:	6028      	str	r0, [r5, #0]
 8013a0a:	6069      	str	r1, [r5, #4]
 8013a0c:	60aa      	str	r2, [r5, #8]
 8013a0e:	60eb      	str	r3, [r5, #12]
 8013a10:	7823      	ldrb	r3, [r4, #0]
 8013a12:	742b      	strb	r3, [r5, #16]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 8013a14:	687b      	ldr	r3, [r7, #4]
 8013a16:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8013a1a:	4a67      	ldr	r2, [pc, #412]	; (8013bb8 <problem_fetch+0x124f4>)
 8013a1c:	461c      	mov	r4, r3
 8013a1e:	4613      	mov	r3, r2
 8013a20:	cb07      	ldmia	r3!, {r0, r1, r2}
 8013a22:	6020      	str	r0, [r4, #0]
 8013a24:	6061      	str	r1, [r4, #4]
 8013a26:	60a2      	str	r2, [r4, #8]
 8013a28:	881b      	ldrh	r3, [r3, #0]
 8013a2a:	81a3      	strh	r3, [r4, #12]
			break;
 8013a2c:	f008 bd7a 	b.w	801c524 <problem_fetch+0x1ae60>
		case 537 :
			strcpy(p->name,"ON BLACK");
 8013a30:	687b      	ldr	r3, [r7, #4]
 8013a32:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8013a36:	4961      	ldr	r1, [pc, #388]	; (8013bbc <problem_fetch+0x124f8>)
 8013a38:	461a      	mov	r2, r3
 8013a3a:	460b      	mov	r3, r1
 8013a3c:	cb03      	ldmia	r3!, {r0, r1}
 8013a3e:	6010      	str	r0, [r2, #0]
 8013a40:	6051      	str	r1, [r2, #4]
 8013a42:	781b      	ldrb	r3, [r3, #0]
 8013a44:	7213      	strb	r3, [r2, #8]
			strcpy(p->grade,"6B+");
 8013a46:	687b      	ldr	r3, [r7, #4]
 8013a48:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8013a4c:	4a5c      	ldr	r2, [pc, #368]	; (8013bc0 <problem_fetch+0x124fc>)
 8013a4e:	6810      	ldr	r0, [r2, #0]
 8013a50:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 8013a52:	687b      	ldr	r3, [r7, #4]
 8013a54:	2206      	movs	r2, #6
 8013a56:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,E,F,C,D,A");
 8013a58:	687b      	ldr	r3, [r7, #4]
 8013a5a:	33a4      	adds	r3, #164	; 0xa4
 8013a5c:	4a59      	ldr	r2, [pc, #356]	; (8013bc4 <problem_fetch+0x12500>)
 8013a5e:	461c      	mov	r4, r3
 8013a60:	4613      	mov	r3, r2
 8013a62:	cb07      	ldmia	r3!, {r0, r1, r2}
 8013a64:	6020      	str	r0, [r4, #0]
 8013a66:	6061      	str	r1, [r4, #4]
 8013a68:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,8,11,13,15,18");
 8013a6a:	687b      	ldr	r3, [r7, #4]
 8013a6c:	3304      	adds	r3, #4
 8013a6e:	4a56      	ldr	r2, [pc, #344]	; (8013bc8 <problem_fetch+0x12504>)
 8013a70:	461c      	mov	r4, r3
 8013a72:	4615      	mov	r5, r2
 8013a74:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8013a76:	6020      	str	r0, [r4, #0]
 8013a78:	6061      	str	r1, [r4, #4]
 8013a7a:	60a2      	str	r2, [r4, #8]
 8013a7c:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 8013a7e:	687b      	ldr	r3, [r7, #4]
 8013a80:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8013a84:	4a51      	ldr	r2, [pc, #324]	; (8013bcc <problem_fetch+0x12508>)
 8013a86:	461c      	mov	r4, r3
 8013a88:	4613      	mov	r3, r2
 8013a8a:	cb07      	ldmia	r3!, {r0, r1, r2}
 8013a8c:	6020      	str	r0, [r4, #0]
 8013a8e:	6061      	str	r1, [r4, #4]
 8013a90:	60a2      	str	r2, [r4, #8]
			break;
 8013a92:	f008 bd47 	b.w	801c524 <problem_fetch+0x1ae60>
		case 538 :
			strcpy(p->name,"SMOKING AREA HARD");
 8013a96:	687b      	ldr	r3, [r7, #4]
 8013a98:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8013a9c:	4a4c      	ldr	r2, [pc, #304]	; (8013bd0 <problem_fetch+0x1250c>)
 8013a9e:	461d      	mov	r5, r3
 8013aa0:	4614      	mov	r4, r2
 8013aa2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8013aa4:	6028      	str	r0, [r5, #0]
 8013aa6:	6069      	str	r1, [r5, #4]
 8013aa8:	60aa      	str	r2, [r5, #8]
 8013aaa:	60eb      	str	r3, [r5, #12]
 8013aac:	8823      	ldrh	r3, [r4, #0]
 8013aae:	822b      	strh	r3, [r5, #16]
			strcpy(p->grade,"7A+");
 8013ab0:	687b      	ldr	r3, [r7, #4]
 8013ab2:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8013ab6:	4a47      	ldr	r2, [pc, #284]	; (8013bd4 <problem_fetch+0x12510>)
 8013ab8:	6810      	ldr	r0, [r2, #0]
 8013aba:	6018      	str	r0, [r3, #0]
			p->moveSize = 5;
 8013abc:	687b      	ldr	r3, [r7, #4]
 8013abe:	2205      	movs	r2, #5
 8013ac0:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,C,E,E,I");
 8013ac2:	687b      	ldr	r3, [r7, #4]
 8013ac4:	33a4      	adds	r3, #164	; 0xa4
 8013ac6:	4944      	ldr	r1, [pc, #272]	; (8013bd8 <problem_fetch+0x12514>)
 8013ac8:	461a      	mov	r2, r3
 8013aca:	460b      	mov	r3, r1
 8013acc:	cb03      	ldmia	r3!, {r0, r1}
 8013ace:	6010      	str	r0, [r2, #0]
 8013ad0:	6051      	str	r1, [r2, #4]
 8013ad2:	881b      	ldrh	r3, [r3, #0]
 8013ad4:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"4,8,12,16,18");
 8013ad6:	687b      	ldr	r3, [r7, #4]
 8013ad8:	3304      	adds	r3, #4
 8013ada:	4a40      	ldr	r2, [pc, #256]	; (8013bdc <problem_fetch+0x12518>)
 8013adc:	461c      	mov	r4, r3
 8013ade:	4613      	mov	r3, r2
 8013ae0:	cb07      	ldmia	r3!, {r0, r1, r2}
 8013ae2:	6020      	str	r0, [r4, #0]
 8013ae4:	6061      	str	r1, [r4, #4]
 8013ae6:	60a2      	str	r2, [r4, #8]
 8013ae8:	781b      	ldrb	r3, [r3, #0]
 8013aea:	7323      	strb	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,e");
 8013aec:	687b      	ldr	r3, [r7, #4]
 8013aee:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8013af2:	493b      	ldr	r1, [pc, #236]	; (8013be0 <problem_fetch+0x1251c>)
 8013af4:	461a      	mov	r2, r3
 8013af6:	460b      	mov	r3, r1
 8013af8:	cb03      	ldmia	r3!, {r0, r1}
 8013afa:	6010      	str	r0, [r2, #0]
 8013afc:	6051      	str	r1, [r2, #4]
 8013afe:	881b      	ldrh	r3, [r3, #0]
 8013b00:	8113      	strh	r3, [r2, #8]
			break;
 8013b02:	f008 bd0f 	b.w	801c524 <problem_fetch+0x1ae60>
		case 539 :
			strcpy(p->name,"THE WIZARD");
 8013b06:	687b      	ldr	r3, [r7, #4]
 8013b08:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8013b0c:	4935      	ldr	r1, [pc, #212]	; (8013be4 <problem_fetch+0x12520>)
 8013b0e:	461a      	mov	r2, r3
 8013b10:	460b      	mov	r3, r1
 8013b12:	cb03      	ldmia	r3!, {r0, r1}
 8013b14:	6010      	str	r0, [r2, #0]
 8013b16:	6051      	str	r1, [r2, #4]
 8013b18:	8819      	ldrh	r1, [r3, #0]
 8013b1a:	789b      	ldrb	r3, [r3, #2]
 8013b1c:	8111      	strh	r1, [r2, #8]
 8013b1e:	7293      	strb	r3, [r2, #10]
			strcpy(p->grade,"6C");
 8013b20:	687b      	ldr	r3, [r7, #4]
 8013b22:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8013b26:	4a1c      	ldr	r2, [pc, #112]	; (8013b98 <problem_fetch+0x124d4>)
 8013b28:	8811      	ldrh	r1, [r2, #0]
 8013b2a:	7892      	ldrb	r2, [r2, #2]
 8013b2c:	8019      	strh	r1, [r3, #0]
 8013b2e:	709a      	strb	r2, [r3, #2]
			p->moveSize = 8;
 8013b30:	687b      	ldr	r3, [r7, #4]
 8013b32:	2208      	movs	r2, #8
 8013b34:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,J,E,H,F,H,E,I");
 8013b36:	687b      	ldr	r3, [r7, #4]
 8013b38:	33a4      	adds	r3, #164	; 0xa4
 8013b3a:	4a2b      	ldr	r2, [pc, #172]	; (8013be8 <problem_fetch+0x12524>)
 8013b3c:	461c      	mov	r4, r3
 8013b3e:	4615      	mov	r5, r2
 8013b40:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8013b42:	6020      	str	r0, [r4, #0]
 8013b44:	6061      	str	r1, [r4, #4]
 8013b46:	60a2      	str	r2, [r4, #8]
 8013b48:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,7,8,10,11,13,16,18");
 8013b4a:	687b      	ldr	r3, [r7, #4]
 8013b4c:	3304      	adds	r3, #4
 8013b4e:	4a27      	ldr	r2, [pc, #156]	; (8013bec <problem_fetch+0x12528>)
 8013b50:	461d      	mov	r5, r3
 8013b52:	4614      	mov	r4, r2
 8013b54:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8013b56:	6028      	str	r0, [r5, #0]
 8013b58:	6069      	str	r1, [r5, #4]
 8013b5a:	60aa      	str	r2, [r5, #8]
 8013b5c:	60eb      	str	r3, [r5, #12]
 8013b5e:	6820      	ldr	r0, [r4, #0]
 8013b60:	6128      	str	r0, [r5, #16]
 8013b62:	7923      	ldrb	r3, [r4, #4]
 8013b64:	752b      	strb	r3, [r5, #20]
			strcpy(p->startFinish,"s,d,d,d,d,d,d,e");
 8013b66:	687b      	ldr	r3, [r7, #4]
 8013b68:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8013b6c:	4a20      	ldr	r2, [pc, #128]	; (8013bf0 <problem_fetch+0x1252c>)
 8013b6e:	461c      	mov	r4, r3
 8013b70:	4615      	mov	r5, r2
 8013b72:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8013b74:	6020      	str	r0, [r4, #0]
 8013b76:	6061      	str	r1, [r4, #4]
 8013b78:	60a2      	str	r2, [r4, #8]
 8013b7a:	60e3      	str	r3, [r4, #12]
			break;
 8013b7c:	f008 bcd2 	b.w	801c524 <problem_fetch+0x1ae60>
 8013b80:	08029eac 	.word	0x08029eac
 8013b84:	080238ec 	.word	0x080238ec
 8013b88:	08029ec8 	.word	0x08029ec8
 8013b8c:	08029edc 	.word	0x08029edc
 8013b90:	08024838 	.word	0x08024838
 8013b94:	08029ef4 	.word	0x08029ef4
 8013b98:	08023920 	.word	0x08023920
 8013b9c:	08029f04 	.word	0x08029f04
 8013ba0:	08024464 	.word	0x08024464
 8013ba4:	080238cc 	.word	0x080238cc
 8013ba8:	08029f14 	.word	0x08029f14
 8013bac:	08023990 	.word	0x08023990
 8013bb0:	08029f28 	.word	0x08029f28
 8013bb4:	08029f38 	.word	0x08029f38
 8013bb8:	080239dc 	.word	0x080239dc
 8013bbc:	08029f4c 	.word	0x08029f4c
 8013bc0:	08023854 	.word	0x08023854
 8013bc4:	08029f58 	.word	0x08029f58
 8013bc8:	08029f64 	.word	0x08029f64
 8013bcc:	08023bf0 	.word	0x08023bf0
 8013bd0:	08029f74 	.word	0x08029f74
 8013bd4:	080239f4 	.word	0x080239f4
 8013bd8:	08026efc 	.word	0x08026efc
 8013bdc:	08029f88 	.word	0x08029f88
 8013be0:	08023d20 	.word	0x08023d20
 8013be4:	08029f98 	.word	0x08029f98
 8013be8:	08029fa4 	.word	0x08029fa4
 8013bec:	08029fb4 	.word	0x08029fb4
 8013bf0:	08023a64 	.word	0x08023a64
		case 540 :
			strcpy(p->name,"GYUUUUUN");
 8013bf4:	687b      	ldr	r3, [r7, #4]
 8013bf6:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8013bfa:	49ab      	ldr	r1, [pc, #684]	; (8013ea8 <problem_fetch+0x127e4>)
 8013bfc:	461a      	mov	r2, r3
 8013bfe:	460b      	mov	r3, r1
 8013c00:	cb03      	ldmia	r3!, {r0, r1}
 8013c02:	6010      	str	r0, [r2, #0]
 8013c04:	6051      	str	r1, [r2, #4]
 8013c06:	781b      	ldrb	r3, [r3, #0]
 8013c08:	7213      	strb	r3, [r2, #8]
			strcpy(p->grade,"6C");
 8013c0a:	687b      	ldr	r3, [r7, #4]
 8013c0c:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8013c10:	4aa6      	ldr	r2, [pc, #664]	; (8013eac <problem_fetch+0x127e8>)
 8013c12:	8811      	ldrh	r1, [r2, #0]
 8013c14:	7892      	ldrb	r2, [r2, #2]
 8013c16:	8019      	strh	r1, [r3, #0]
 8013c18:	709a      	strb	r2, [r3, #2]
			p->moveSize = 6;
 8013c1a:	687b      	ldr	r3, [r7, #4]
 8013c1c:	2206      	movs	r2, #6
 8013c1e:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"E,H,D,E,E,I");
 8013c20:	687b      	ldr	r3, [r7, #4]
 8013c22:	33a4      	adds	r3, #164	; 0xa4
 8013c24:	4aa2      	ldr	r2, [pc, #648]	; (8013eb0 <problem_fetch+0x127ec>)
 8013c26:	461c      	mov	r4, r3
 8013c28:	4613      	mov	r3, r2
 8013c2a:	cb07      	ldmia	r3!, {r0, r1, r2}
 8013c2c:	6020      	str	r0, [r4, #0]
 8013c2e:	6061      	str	r1, [r4, #4]
 8013c30:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"6,10,11,14,16,18");
 8013c32:	687b      	ldr	r3, [r7, #4]
 8013c34:	3304      	adds	r3, #4
 8013c36:	4a9f      	ldr	r2, [pc, #636]	; (8013eb4 <problem_fetch+0x127f0>)
 8013c38:	461d      	mov	r5, r3
 8013c3a:	4614      	mov	r4, r2
 8013c3c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8013c3e:	6028      	str	r0, [r5, #0]
 8013c40:	6069      	str	r1, [r5, #4]
 8013c42:	60aa      	str	r2, [r5, #8]
 8013c44:	60eb      	str	r3, [r5, #12]
 8013c46:	7823      	ldrb	r3, [r4, #0]
 8013c48:	742b      	strb	r3, [r5, #16]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 8013c4a:	687b      	ldr	r3, [r7, #4]
 8013c4c:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8013c50:	4a99      	ldr	r2, [pc, #612]	; (8013eb8 <problem_fetch+0x127f4>)
 8013c52:	461c      	mov	r4, r3
 8013c54:	4613      	mov	r3, r2
 8013c56:	cb07      	ldmia	r3!, {r0, r1, r2}
 8013c58:	6020      	str	r0, [r4, #0]
 8013c5a:	6061      	str	r1, [r4, #4]
 8013c5c:	60a2      	str	r2, [r4, #8]
			break;
 8013c5e:	f008 bc61 	b.w	801c524 <problem_fetch+0x1ae60>
		case 541 :
			strcpy(p->name,"A LITTLE CROSSING");
 8013c62:	687b      	ldr	r3, [r7, #4]
 8013c64:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8013c68:	4a94      	ldr	r2, [pc, #592]	; (8013ebc <problem_fetch+0x127f8>)
 8013c6a:	461d      	mov	r5, r3
 8013c6c:	4614      	mov	r4, r2
 8013c6e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8013c70:	6028      	str	r0, [r5, #0]
 8013c72:	6069      	str	r1, [r5, #4]
 8013c74:	60aa      	str	r2, [r5, #8]
 8013c76:	60eb      	str	r3, [r5, #12]
 8013c78:	8823      	ldrh	r3, [r4, #0]
 8013c7a:	822b      	strh	r3, [r5, #16]
			strcpy(p->grade,"6C+");
 8013c7c:	687b      	ldr	r3, [r7, #4]
 8013c7e:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8013c82:	4a8f      	ldr	r2, [pc, #572]	; (8013ec0 <problem_fetch+0x127fc>)
 8013c84:	6810      	ldr	r0, [r2, #0]
 8013c86:	6018      	str	r0, [r3, #0]
			p->moveSize = 8;
 8013c88:	687b      	ldr	r3, [r7, #4]
 8013c8a:	2208      	movs	r2, #8
 8013c8c:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,G,E,G,H,K,H,I");
 8013c8e:	687b      	ldr	r3, [r7, #4]
 8013c90:	33a4      	adds	r3, #164	; 0xa4
 8013c92:	4a8c      	ldr	r2, [pc, #560]	; (8013ec4 <problem_fetch+0x12800>)
 8013c94:	461c      	mov	r4, r3
 8013c96:	4615      	mov	r5, r2
 8013c98:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8013c9a:	6020      	str	r0, [r4, #0]
 8013c9c:	6061      	str	r1, [r4, #4]
 8013c9e:	60a2      	str	r2, [r4, #8]
 8013ca0:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,4,8,9,12,14,16,18");
 8013ca2:	687b      	ldr	r3, [r7, #4]
 8013ca4:	3304      	adds	r3, #4
 8013ca6:	4a88      	ldr	r2, [pc, #544]	; (8013ec8 <problem_fetch+0x12804>)
 8013ca8:	461d      	mov	r5, r3
 8013caa:	4614      	mov	r4, r2
 8013cac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8013cae:	6028      	str	r0, [r5, #0]
 8013cb0:	6069      	str	r1, [r5, #4]
 8013cb2:	60aa      	str	r2, [r5, #8]
 8013cb4:	60eb      	str	r3, [r5, #12]
 8013cb6:	6820      	ldr	r0, [r4, #0]
 8013cb8:	6128      	str	r0, [r5, #16]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,e");
 8013cba:	687b      	ldr	r3, [r7, #4]
 8013cbc:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8013cc0:	4a82      	ldr	r2, [pc, #520]	; (8013ecc <problem_fetch+0x12808>)
 8013cc2:	461c      	mov	r4, r3
 8013cc4:	4615      	mov	r5, r2
 8013cc6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8013cc8:	6020      	str	r0, [r4, #0]
 8013cca:	6061      	str	r1, [r4, #4]
 8013ccc:	60a2      	str	r2, [r4, #8]
 8013cce:	60e3      	str	r3, [r4, #12]
			break;
 8013cd0:	f008 bc28 	b.w	801c524 <problem_fetch+0x1ae60>
		case 542 :
			strcpy(p->name,"ZANZARE, NEBBIA E VIN");
 8013cd4:	687b      	ldr	r3, [r7, #4]
 8013cd6:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8013cda:	4a7d      	ldr	r2, [pc, #500]	; (8013ed0 <problem_fetch+0x1280c>)
 8013cdc:	461d      	mov	r5, r3
 8013cde:	4614      	mov	r4, r2
 8013ce0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8013ce2:	6028      	str	r0, [r5, #0]
 8013ce4:	6069      	str	r1, [r5, #4]
 8013ce6:	60aa      	str	r2, [r5, #8]
 8013ce8:	60eb      	str	r3, [r5, #12]
 8013cea:	6820      	ldr	r0, [r4, #0]
 8013cec:	6128      	str	r0, [r5, #16]
 8013cee:	88a3      	ldrh	r3, [r4, #4]
 8013cf0:	82ab      	strh	r3, [r5, #20]
			strcpy(p->grade,"6C");
 8013cf2:	687b      	ldr	r3, [r7, #4]
 8013cf4:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8013cf8:	4a6c      	ldr	r2, [pc, #432]	; (8013eac <problem_fetch+0x127e8>)
 8013cfa:	8811      	ldrh	r1, [r2, #0]
 8013cfc:	7892      	ldrb	r2, [r2, #2]
 8013cfe:	8019      	strh	r1, [r3, #0]
 8013d00:	709a      	strb	r2, [r3, #2]
			p->moveSize = 5;
 8013d02:	687b      	ldr	r3, [r7, #4]
 8013d04:	2205      	movs	r2, #5
 8013d06:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,I,F,H,D");
 8013d08:	687b      	ldr	r3, [r7, #4]
 8013d0a:	33a4      	adds	r3, #164	; 0xa4
 8013d0c:	4971      	ldr	r1, [pc, #452]	; (8013ed4 <problem_fetch+0x12810>)
 8013d0e:	461a      	mov	r2, r3
 8013d10:	460b      	mov	r3, r1
 8013d12:	cb03      	ldmia	r3!, {r0, r1}
 8013d14:	6010      	str	r0, [r2, #0]
 8013d16:	6051      	str	r1, [r2, #4]
 8013d18:	881b      	ldrh	r3, [r3, #0]
 8013d1a:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"6,10,13,16,18");
 8013d1c:	687b      	ldr	r3, [r7, #4]
 8013d1e:	3304      	adds	r3, #4
 8013d20:	4a6d      	ldr	r2, [pc, #436]	; (8013ed8 <problem_fetch+0x12814>)
 8013d22:	461c      	mov	r4, r3
 8013d24:	4613      	mov	r3, r2
 8013d26:	cb07      	ldmia	r3!, {r0, r1, r2}
 8013d28:	6020      	str	r0, [r4, #0]
 8013d2a:	6061      	str	r1, [r4, #4]
 8013d2c:	60a2      	str	r2, [r4, #8]
 8013d2e:	881b      	ldrh	r3, [r3, #0]
 8013d30:	81a3      	strh	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,e");
 8013d32:	687b      	ldr	r3, [r7, #4]
 8013d34:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8013d38:	4968      	ldr	r1, [pc, #416]	; (8013edc <problem_fetch+0x12818>)
 8013d3a:	461a      	mov	r2, r3
 8013d3c:	460b      	mov	r3, r1
 8013d3e:	cb03      	ldmia	r3!, {r0, r1}
 8013d40:	6010      	str	r0, [r2, #0]
 8013d42:	6051      	str	r1, [r2, #4]
 8013d44:	881b      	ldrh	r3, [r3, #0]
 8013d46:	8113      	strh	r3, [r2, #8]
			break;
 8013d48:	f008 bbec 	b.w	801c524 <problem_fetch+0x1ae60>
		case 543 :
			strcpy(p->name,"STRATIFICAZIONI SOCIALI");
 8013d4c:	687b      	ldr	r3, [r7, #4]
 8013d4e:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8013d52:	4a63      	ldr	r2, [pc, #396]	; (8013ee0 <problem_fetch+0x1281c>)
 8013d54:	461d      	mov	r5, r3
 8013d56:	4614      	mov	r4, r2
 8013d58:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8013d5a:	6028      	str	r0, [r5, #0]
 8013d5c:	6069      	str	r1, [r5, #4]
 8013d5e:	60aa      	str	r2, [r5, #8]
 8013d60:	60eb      	str	r3, [r5, #12]
 8013d62:	cc03      	ldmia	r4!, {r0, r1}
 8013d64:	6128      	str	r0, [r5, #16]
 8013d66:	6169      	str	r1, [r5, #20]
			strcpy(p->grade,"6C+");
 8013d68:	687b      	ldr	r3, [r7, #4]
 8013d6a:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8013d6e:	4a54      	ldr	r2, [pc, #336]	; (8013ec0 <problem_fetch+0x127fc>)
 8013d70:	6810      	ldr	r0, [r2, #0]
 8013d72:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 8013d74:	687b      	ldr	r3, [r7, #4]
 8013d76:	2207      	movs	r2, #7
 8013d78:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,K,H,G,C,C,D");
 8013d7a:	687b      	ldr	r3, [r7, #4]
 8013d7c:	33a4      	adds	r3, #164	; 0xa4
 8013d7e:	4a59      	ldr	r2, [pc, #356]	; (8013ee4 <problem_fetch+0x12820>)
 8013d80:	461c      	mov	r4, r3
 8013d82:	4613      	mov	r3, r2
 8013d84:	cb07      	ldmia	r3!, {r0, r1, r2}
 8013d86:	6020      	str	r0, [r4, #0]
 8013d88:	6061      	str	r1, [r4, #4]
 8013d8a:	60a2      	str	r2, [r4, #8]
 8013d8c:	881b      	ldrh	r3, [r3, #0]
 8013d8e:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,9,12,14,8,16,18");
 8013d90:	687b      	ldr	r3, [r7, #4]
 8013d92:	3304      	adds	r3, #4
 8013d94:	4a54      	ldr	r2, [pc, #336]	; (8013ee8 <problem_fetch+0x12824>)
 8013d96:	461d      	mov	r5, r3
 8013d98:	4614      	mov	r4, r2
 8013d9a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8013d9c:	6028      	str	r0, [r5, #0]
 8013d9e:	6069      	str	r1, [r5, #4]
 8013da0:	60aa      	str	r2, [r5, #8]
 8013da2:	60eb      	str	r3, [r5, #12]
 8013da4:	8823      	ldrh	r3, [r4, #0]
 8013da6:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 8013da8:	687b      	ldr	r3, [r7, #4]
 8013daa:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8013dae:	4a4f      	ldr	r2, [pc, #316]	; (8013eec <problem_fetch+0x12828>)
 8013db0:	461c      	mov	r4, r3
 8013db2:	4613      	mov	r3, r2
 8013db4:	cb07      	ldmia	r3!, {r0, r1, r2}
 8013db6:	6020      	str	r0, [r4, #0]
 8013db8:	6061      	str	r1, [r4, #4]
 8013dba:	60a2      	str	r2, [r4, #8]
 8013dbc:	881b      	ldrh	r3, [r3, #0]
 8013dbe:	81a3      	strh	r3, [r4, #12]
			break;
 8013dc0:	f008 bbb0 	b.w	801c524 <problem_fetch+0x1ae60>
		case 544 :
			strcpy(p->name,"CICCIOSPRUZZO");
 8013dc4:	687b      	ldr	r3, [r7, #4]
 8013dc6:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8013dca:	4a49      	ldr	r2, [pc, #292]	; (8013ef0 <problem_fetch+0x1282c>)
 8013dcc:	461c      	mov	r4, r3
 8013dce:	4613      	mov	r3, r2
 8013dd0:	cb07      	ldmia	r3!, {r0, r1, r2}
 8013dd2:	6020      	str	r0, [r4, #0]
 8013dd4:	6061      	str	r1, [r4, #4]
 8013dd6:	60a2      	str	r2, [r4, #8]
 8013dd8:	881b      	ldrh	r3, [r3, #0]
 8013dda:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade,"7A");
 8013ddc:	687b      	ldr	r3, [r7, #4]
 8013dde:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8013de2:	4a44      	ldr	r2, [pc, #272]	; (8013ef4 <problem_fetch+0x12830>)
 8013de4:	8811      	ldrh	r1, [r2, #0]
 8013de6:	7892      	ldrb	r2, [r2, #2]
 8013de8:	8019      	strh	r1, [r3, #0]
 8013dea:	709a      	strb	r2, [r3, #2]
			p->moveSize = 6;
 8013dec:	687b      	ldr	r3, [r7, #4]
 8013dee:	2206      	movs	r2, #6
 8013df0:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"C,A,F,A,E,D");
 8013df2:	687b      	ldr	r3, [r7, #4]
 8013df4:	33a4      	adds	r3, #164	; 0xa4
 8013df6:	4a40      	ldr	r2, [pc, #256]	; (8013ef8 <problem_fetch+0x12834>)
 8013df8:	461c      	mov	r4, r3
 8013dfa:	4613      	mov	r3, r2
 8013dfc:	cb07      	ldmia	r3!, {r0, r1, r2}
 8013dfe:	6020      	str	r0, [r4, #0]
 8013e00:	6061      	str	r1, [r4, #4]
 8013e02:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,9,11,14,16,18");
 8013e04:	687b      	ldr	r3, [r7, #4]
 8013e06:	3304      	adds	r3, #4
 8013e08:	4a3c      	ldr	r2, [pc, #240]	; (8013efc <problem_fetch+0x12838>)
 8013e0a:	461c      	mov	r4, r3
 8013e0c:	4615      	mov	r5, r2
 8013e0e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8013e10:	6020      	str	r0, [r4, #0]
 8013e12:	6061      	str	r1, [r4, #4]
 8013e14:	60a2      	str	r2, [r4, #8]
 8013e16:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 8013e18:	687b      	ldr	r3, [r7, #4]
 8013e1a:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8013e1e:	4a26      	ldr	r2, [pc, #152]	; (8013eb8 <problem_fetch+0x127f4>)
 8013e20:	461c      	mov	r4, r3
 8013e22:	4613      	mov	r3, r2
 8013e24:	cb07      	ldmia	r3!, {r0, r1, r2}
 8013e26:	6020      	str	r0, [r4, #0]
 8013e28:	6061      	str	r1, [r4, #4]
 8013e2a:	60a2      	str	r2, [r4, #8]
			break;
 8013e2c:	f008 bb7a 	b.w	801c524 <problem_fetch+0x1ae60>
		case 545 :
			strcpy(p->name,"DOJO BLACK");
 8013e30:	687b      	ldr	r3, [r7, #4]
 8013e32:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8013e36:	4932      	ldr	r1, [pc, #200]	; (8013f00 <problem_fetch+0x1283c>)
 8013e38:	461a      	mov	r2, r3
 8013e3a:	460b      	mov	r3, r1
 8013e3c:	cb03      	ldmia	r3!, {r0, r1}
 8013e3e:	6010      	str	r0, [r2, #0]
 8013e40:	6051      	str	r1, [r2, #4]
 8013e42:	8819      	ldrh	r1, [r3, #0]
 8013e44:	789b      	ldrb	r3, [r3, #2]
 8013e46:	8111      	strh	r1, [r2, #8]
 8013e48:	7293      	strb	r3, [r2, #10]
			strcpy(p->grade,"7A+");
 8013e4a:	687b      	ldr	r3, [r7, #4]
 8013e4c:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8013e50:	4a2c      	ldr	r2, [pc, #176]	; (8013f04 <problem_fetch+0x12840>)
 8013e52:	6810      	ldr	r0, [r2, #0]
 8013e54:	6018      	str	r0, [r3, #0]
			p->moveSize = 8;
 8013e56:	687b      	ldr	r3, [r7, #4]
 8013e58:	2208      	movs	r2, #8
 8013e5a:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"H,K,I,J,D,G,C,D");
 8013e5c:	687b      	ldr	r3, [r7, #4]
 8013e5e:	33a4      	adds	r3, #164	; 0xa4
 8013e60:	4a29      	ldr	r2, [pc, #164]	; (8013f08 <problem_fetch+0x12844>)
 8013e62:	461c      	mov	r4, r3
 8013e64:	4615      	mov	r5, r2
 8013e66:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8013e68:	6020      	str	r0, [r4, #0]
 8013e6a:	6061      	str	r1, [r4, #4]
 8013e6c:	60a2      	str	r2, [r4, #8]
 8013e6e:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,9,10,13,11,17,5,18");
 8013e70:	687b      	ldr	r3, [r7, #4]
 8013e72:	3304      	adds	r3, #4
 8013e74:	4a25      	ldr	r2, [pc, #148]	; (8013f0c <problem_fetch+0x12848>)
 8013e76:	461d      	mov	r5, r3
 8013e78:	4614      	mov	r4, r2
 8013e7a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8013e7c:	6028      	str	r0, [r5, #0]
 8013e7e:	6069      	str	r1, [r5, #4]
 8013e80:	60aa      	str	r2, [r5, #8]
 8013e82:	60eb      	str	r3, [r5, #12]
 8013e84:	6820      	ldr	r0, [r4, #0]
 8013e86:	6128      	str	r0, [r5, #16]
 8013e88:	7923      	ldrb	r3, [r4, #4]
 8013e8a:	752b      	strb	r3, [r5, #20]
			strcpy(p->startFinish,"s,d,d,d,d,d,d,e");
 8013e8c:	687b      	ldr	r3, [r7, #4]
 8013e8e:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8013e92:	4a1f      	ldr	r2, [pc, #124]	; (8013f10 <problem_fetch+0x1284c>)
 8013e94:	461c      	mov	r4, r3
 8013e96:	4615      	mov	r5, r2
 8013e98:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8013e9a:	6020      	str	r0, [r4, #0]
 8013e9c:	6061      	str	r1, [r4, #4]
 8013e9e:	60a2      	str	r2, [r4, #8]
 8013ea0:	60e3      	str	r3, [r4, #12]
			break;
 8013ea2:	f008 bb3f 	b.w	801c524 <problem_fetch+0x1ae60>
 8013ea6:	bf00      	nop
 8013ea8:	08029fcc 	.word	0x08029fcc
 8013eac:	08023920 	.word	0x08023920
 8013eb0:	08029fd8 	.word	0x08029fd8
 8013eb4:	080247f0 	.word	0x080247f0
 8013eb8:	08023bf0 	.word	0x08023bf0
 8013ebc:	08029fe4 	.word	0x08029fe4
 8013ec0:	080238ec 	.word	0x080238ec
 8013ec4:	08029ff8 	.word	0x08029ff8
 8013ec8:	0802a008 	.word	0x0802a008
 8013ecc:	08023978 	.word	0x08023978
 8013ed0:	0802a01c 	.word	0x0802a01c
 8013ed4:	0802a034 	.word	0x0802a034
 8013ed8:	0802a040 	.word	0x0802a040
 8013edc:	08023d20 	.word	0x08023d20
 8013ee0:	0802a050 	.word	0x0802a050
 8013ee4:	0802a068 	.word	0x0802a068
 8013ee8:	0802a078 	.word	0x0802a078
 8013eec:	080239dc 	.word	0x080239dc
 8013ef0:	0802a08c 	.word	0x0802a08c
 8013ef4:	08023814 	.word	0x08023814
 8013ef8:	0802a09c 	.word	0x0802a09c
 8013efc:	08027784 	.word	0x08027784
 8013f00:	0802a0a8 	.word	0x0802a0a8
 8013f04:	080239f4 	.word	0x080239f4
 8013f08:	0802a0b4 	.word	0x0802a0b4
 8013f0c:	0802a0c4 	.word	0x0802a0c4
 8013f10:	08023a64 	.word	0x08023a64
		case 546 :
			strcpy(p->name,"WOKE UP FEELIN FROGGY");
 8013f14:	687b      	ldr	r3, [r7, #4]
 8013f16:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8013f1a:	4aae      	ldr	r2, [pc, #696]	; (80141d4 <problem_fetch+0x12b10>)
 8013f1c:	461d      	mov	r5, r3
 8013f1e:	4614      	mov	r4, r2
 8013f20:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8013f22:	6028      	str	r0, [r5, #0]
 8013f24:	6069      	str	r1, [r5, #4]
 8013f26:	60aa      	str	r2, [r5, #8]
 8013f28:	60eb      	str	r3, [r5, #12]
 8013f2a:	6820      	ldr	r0, [r4, #0]
 8013f2c:	6128      	str	r0, [r5, #16]
 8013f2e:	88a3      	ldrh	r3, [r4, #4]
 8013f30:	82ab      	strh	r3, [r5, #20]
			strcpy(p->grade,"7B+");
 8013f32:	687b      	ldr	r3, [r7, #4]
 8013f34:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8013f38:	4aa7      	ldr	r2, [pc, #668]	; (80141d8 <problem_fetch+0x12b14>)
 8013f3a:	6810      	ldr	r0, [r2, #0]
 8013f3c:	6018      	str	r0, [r3, #0]
			p->moveSize = 8;
 8013f3e:	687b      	ldr	r3, [r7, #4]
 8013f40:	2208      	movs	r2, #8
 8013f42:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,E,F,E,J,K,I,I");
 8013f44:	687b      	ldr	r3, [r7, #4]
 8013f46:	33a4      	adds	r3, #164	; 0xa4
 8013f48:	4aa4      	ldr	r2, [pc, #656]	; (80141dc <problem_fetch+0x12b18>)
 8013f4a:	461c      	mov	r4, r3
 8013f4c:	4615      	mov	r5, r2
 8013f4e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8013f50:	6020      	str	r0, [r4, #0]
 8013f52:	6061      	str	r1, [r4, #4]
 8013f54:	60a2      	str	r2, [r4, #8]
 8013f56:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,6,11,12,13,14,7,18");
 8013f58:	687b      	ldr	r3, [r7, #4]
 8013f5a:	3304      	adds	r3, #4
 8013f5c:	4aa0      	ldr	r2, [pc, #640]	; (80141e0 <problem_fetch+0x12b1c>)
 8013f5e:	461d      	mov	r5, r3
 8013f60:	4614      	mov	r4, r2
 8013f62:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8013f64:	6028      	str	r0, [r5, #0]
 8013f66:	6069      	str	r1, [r5, #4]
 8013f68:	60aa      	str	r2, [r5, #8]
 8013f6a:	60eb      	str	r3, [r5, #12]
 8013f6c:	6820      	ldr	r0, [r4, #0]
 8013f6e:	6128      	str	r0, [r5, #16]
 8013f70:	7923      	ldrb	r3, [r4, #4]
 8013f72:	752b      	strb	r3, [r5, #20]
			strcpy(p->startFinish,"s,d,d,d,d,d,d,e");
 8013f74:	687b      	ldr	r3, [r7, #4]
 8013f76:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8013f7a:	4a9a      	ldr	r2, [pc, #616]	; (80141e4 <problem_fetch+0x12b20>)
 8013f7c:	461c      	mov	r4, r3
 8013f7e:	4615      	mov	r5, r2
 8013f80:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8013f82:	6020      	str	r0, [r4, #0]
 8013f84:	6061      	str	r1, [r4, #4]
 8013f86:	60a2      	str	r2, [r4, #8]
 8013f88:	60e3      	str	r3, [r4, #12]
			break;
 8013f8a:	f008 bacb 	b.w	801c524 <problem_fetch+0x1ae60>
		case 547 :
			strcpy(p->name,"DDD");
 8013f8e:	687b      	ldr	r3, [r7, #4]
 8013f90:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8013f94:	4a94      	ldr	r2, [pc, #592]	; (80141e8 <problem_fetch+0x12b24>)
 8013f96:	6810      	ldr	r0, [r2, #0]
 8013f98:	6018      	str	r0, [r3, #0]
			strcpy(p->grade,"6C");
 8013f9a:	687b      	ldr	r3, [r7, #4]
 8013f9c:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8013fa0:	4a92      	ldr	r2, [pc, #584]	; (80141ec <problem_fetch+0x12b28>)
 8013fa2:	8811      	ldrh	r1, [r2, #0]
 8013fa4:	7892      	ldrb	r2, [r2, #2]
 8013fa6:	8019      	strh	r1, [r3, #0]
 8013fa8:	709a      	strb	r2, [r3, #2]
			p->moveSize = 11;
 8013faa:	687b      	ldr	r3, [r7, #4]
 8013fac:	220b      	movs	r2, #11
 8013fae:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,G,H,H,G,H,G,G,H,G,I");
 8013fb0:	687b      	ldr	r3, [r7, #4]
 8013fb2:	33a4      	adds	r3, #164	; 0xa4
 8013fb4:	4a8e      	ldr	r2, [pc, #568]	; (80141f0 <problem_fetch+0x12b2c>)
 8013fb6:	461d      	mov	r5, r3
 8013fb8:	4614      	mov	r4, r2
 8013fba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8013fbc:	6028      	str	r0, [r5, #0]
 8013fbe:	6069      	str	r1, [r5, #4]
 8013fc0:	60aa      	str	r2, [r5, #8]
 8013fc2:	60eb      	str	r3, [r5, #12]
 8013fc4:	6820      	ldr	r0, [r4, #0]
 8013fc6:	6128      	str	r0, [r5, #16]
 8013fc8:	88a3      	ldrh	r3, [r4, #4]
 8013fca:	82ab      	strh	r3, [r5, #20]
			strcpy(p->moveNumbers,"4,6,8,10,10,13,14,15,16,17,18");
 8013fcc:	687b      	ldr	r3, [r7, #4]
 8013fce:	3304      	adds	r3, #4
 8013fd0:	4a88      	ldr	r2, [pc, #544]	; (80141f4 <problem_fetch+0x12b30>)
 8013fd2:	461d      	mov	r5, r3
 8013fd4:	4614      	mov	r4, r2
 8013fd6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8013fd8:	6028      	str	r0, [r5, #0]
 8013fda:	6069      	str	r1, [r5, #4]
 8013fdc:	60aa      	str	r2, [r5, #8]
 8013fde:	60eb      	str	r3, [r5, #12]
 8013fe0:	cc07      	ldmia	r4!, {r0, r1, r2}
 8013fe2:	6128      	str	r0, [r5, #16]
 8013fe4:	6169      	str	r1, [r5, #20]
 8013fe6:	61aa      	str	r2, [r5, #24]
 8013fe8:	8823      	ldrh	r3, [r4, #0]
 8013fea:	83ab      	strh	r3, [r5, #28]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,d,d,d,e");
 8013fec:	687b      	ldr	r3, [r7, #4]
 8013fee:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8013ff2:	4a81      	ldr	r2, [pc, #516]	; (80141f8 <problem_fetch+0x12b34>)
 8013ff4:	461d      	mov	r5, r3
 8013ff6:	4614      	mov	r4, r2
 8013ff8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8013ffa:	6028      	str	r0, [r5, #0]
 8013ffc:	6069      	str	r1, [r5, #4]
 8013ffe:	60aa      	str	r2, [r5, #8]
 8014000:	60eb      	str	r3, [r5, #12]
 8014002:	6820      	ldr	r0, [r4, #0]
 8014004:	6128      	str	r0, [r5, #16]
 8014006:	88a3      	ldrh	r3, [r4, #4]
 8014008:	82ab      	strh	r3, [r5, #20]
			break;
 801400a:	f008 ba8b 	b.w	801c524 <problem_fetch+0x1ae60>
		case 548 :
			strcpy(p->name,"CHIAPPO");
 801400e:	687b      	ldr	r3, [r7, #4]
 8014010:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8014014:	4979      	ldr	r1, [pc, #484]	; (80141fc <problem_fetch+0x12b38>)
 8014016:	461a      	mov	r2, r3
 8014018:	460b      	mov	r3, r1
 801401a:	cb03      	ldmia	r3!, {r0, r1}
 801401c:	6010      	str	r0, [r2, #0]
 801401e:	6051      	str	r1, [r2, #4]
			strcpy(p->grade,"6B+");
 8014020:	687b      	ldr	r3, [r7, #4]
 8014022:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8014026:	4a76      	ldr	r2, [pc, #472]	; (8014200 <problem_fetch+0x12b3c>)
 8014028:	6810      	ldr	r0, [r2, #0]
 801402a:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 801402c:	687b      	ldr	r3, [r7, #4]
 801402e:	2207      	movs	r2, #7
 8014030:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,H,C,F,C,E,D");
 8014032:	687b      	ldr	r3, [r7, #4]
 8014034:	33a4      	adds	r3, #164	; 0xa4
 8014036:	4a73      	ldr	r2, [pc, #460]	; (8014204 <problem_fetch+0x12b40>)
 8014038:	461c      	mov	r4, r3
 801403a:	4613      	mov	r3, r2
 801403c:	cb07      	ldmia	r3!, {r0, r1, r2}
 801403e:	6020      	str	r0, [r4, #0]
 8014040:	6061      	str	r1, [r4, #4]
 8014042:	60a2      	str	r2, [r4, #8]
 8014044:	881b      	ldrh	r3, [r3, #0]
 8014046:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,8,8,11,13,16,18");
 8014048:	687b      	ldr	r3, [r7, #4]
 801404a:	3304      	adds	r3, #4
 801404c:	4a6e      	ldr	r2, [pc, #440]	; (8014208 <problem_fetch+0x12b44>)
 801404e:	461d      	mov	r5, r3
 8014050:	4614      	mov	r4, r2
 8014052:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8014054:	6028      	str	r0, [r5, #0]
 8014056:	6069      	str	r1, [r5, #4]
 8014058:	60aa      	str	r2, [r5, #8]
 801405a:	60eb      	str	r3, [r5, #12]
 801405c:	8823      	ldrh	r3, [r4, #0]
 801405e:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 8014060:	687b      	ldr	r3, [r7, #4]
 8014062:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8014066:	4a69      	ldr	r2, [pc, #420]	; (801420c <problem_fetch+0x12b48>)
 8014068:	461c      	mov	r4, r3
 801406a:	4613      	mov	r3, r2
 801406c:	cb07      	ldmia	r3!, {r0, r1, r2}
 801406e:	6020      	str	r0, [r4, #0]
 8014070:	6061      	str	r1, [r4, #4]
 8014072:	60a2      	str	r2, [r4, #8]
 8014074:	881b      	ldrh	r3, [r3, #0]
 8014076:	81a3      	strh	r3, [r4, #12]
			break;
 8014078:	f008 ba54 	b.w	801c524 <problem_fetch+0x1ae60>
		case 549 :
			strcpy(p->name,"BIFFOSMEG");
 801407c:	687b      	ldr	r3, [r7, #4]
 801407e:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8014082:	4963      	ldr	r1, [pc, #396]	; (8014210 <problem_fetch+0x12b4c>)
 8014084:	461a      	mov	r2, r3
 8014086:	460b      	mov	r3, r1
 8014088:	cb03      	ldmia	r3!, {r0, r1}
 801408a:	6010      	str	r0, [r2, #0]
 801408c:	6051      	str	r1, [r2, #4]
 801408e:	881b      	ldrh	r3, [r3, #0]
 8014090:	8113      	strh	r3, [r2, #8]
			strcpy(p->grade,"6C");
 8014092:	687b      	ldr	r3, [r7, #4]
 8014094:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8014098:	4a54      	ldr	r2, [pc, #336]	; (80141ec <problem_fetch+0x12b28>)
 801409a:	8811      	ldrh	r1, [r2, #0]
 801409c:	7892      	ldrb	r2, [r2, #2]
 801409e:	8019      	strh	r1, [r3, #0]
 80140a0:	709a      	strb	r2, [r3, #2]
			p->moveSize = 6;
 80140a2:	687b      	ldr	r3, [r7, #4]
 80140a4:	2206      	movs	r2, #6
 80140a6:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,D,G,C,E,A");
 80140a8:	687b      	ldr	r3, [r7, #4]
 80140aa:	33a4      	adds	r3, #164	; 0xa4
 80140ac:	4a59      	ldr	r2, [pc, #356]	; (8014214 <problem_fetch+0x12b50>)
 80140ae:	461c      	mov	r4, r3
 80140b0:	4613      	mov	r3, r2
 80140b2:	cb07      	ldmia	r3!, {r0, r1, r2}
 80140b4:	6020      	str	r0, [r4, #0]
 80140b6:	6061      	str	r1, [r4, #4]
 80140b8:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,7,9,13,16,18");
 80140ba:	687b      	ldr	r3, [r7, #4]
 80140bc:	3304      	adds	r3, #4
 80140be:	4a56      	ldr	r2, [pc, #344]	; (8014218 <problem_fetch+0x12b54>)
 80140c0:	461c      	mov	r4, r3
 80140c2:	4613      	mov	r3, r2
 80140c4:	cb07      	ldmia	r3!, {r0, r1, r2}
 80140c6:	6020      	str	r0, [r4, #0]
 80140c8:	6061      	str	r1, [r4, #4]
 80140ca:	60a2      	str	r2, [r4, #8]
 80140cc:	881a      	ldrh	r2, [r3, #0]
 80140ce:	789b      	ldrb	r3, [r3, #2]
 80140d0:	81a2      	strh	r2, [r4, #12]
 80140d2:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 80140d4:	687b      	ldr	r3, [r7, #4]
 80140d6:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 80140da:	4a50      	ldr	r2, [pc, #320]	; (801421c <problem_fetch+0x12b58>)
 80140dc:	461c      	mov	r4, r3
 80140de:	4613      	mov	r3, r2
 80140e0:	cb07      	ldmia	r3!, {r0, r1, r2}
 80140e2:	6020      	str	r0, [r4, #0]
 80140e4:	6061      	str	r1, [r4, #4]
 80140e6:	60a2      	str	r2, [r4, #8]
			break;
 80140e8:	f008 ba1c 	b.w	801c524 <problem_fetch+0x1ae60>
		case 550 :
			strcpy(p->name,"HAY IS FOR HORSES");
 80140ec:	687b      	ldr	r3, [r7, #4]
 80140ee:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80140f2:	4a4b      	ldr	r2, [pc, #300]	; (8014220 <problem_fetch+0x12b5c>)
 80140f4:	461d      	mov	r5, r3
 80140f6:	4614      	mov	r4, r2
 80140f8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80140fa:	6028      	str	r0, [r5, #0]
 80140fc:	6069      	str	r1, [r5, #4]
 80140fe:	60aa      	str	r2, [r5, #8]
 8014100:	60eb      	str	r3, [r5, #12]
 8014102:	8823      	ldrh	r3, [r4, #0]
 8014104:	822b      	strh	r3, [r5, #16]
			strcpy(p->grade,"6C+");
 8014106:	687b      	ldr	r3, [r7, #4]
 8014108:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801410c:	4a45      	ldr	r2, [pc, #276]	; (8014224 <problem_fetch+0x12b60>)
 801410e:	6810      	ldr	r0, [r2, #0]
 8014110:	6018      	str	r0, [r3, #0]
			p->moveSize = 5;
 8014112:	687b      	ldr	r3, [r7, #4]
 8014114:	2205      	movs	r2, #5
 8014116:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,H,G,D,D");
 8014118:	687b      	ldr	r3, [r7, #4]
 801411a:	33a4      	adds	r3, #164	; 0xa4
 801411c:	4942      	ldr	r1, [pc, #264]	; (8014228 <problem_fetch+0x12b64>)
 801411e:	461a      	mov	r2, r3
 8014120:	460b      	mov	r3, r1
 8014122:	cb03      	ldmia	r3!, {r0, r1}
 8014124:	6010      	str	r0, [r2, #0]
 8014126:	6051      	str	r1, [r2, #4]
 8014128:	881b      	ldrh	r3, [r3, #0]
 801412a:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"5,10,14,15,18");
 801412c:	687b      	ldr	r3, [r7, #4]
 801412e:	3304      	adds	r3, #4
 8014130:	4a3e      	ldr	r2, [pc, #248]	; (801422c <problem_fetch+0x12b68>)
 8014132:	461c      	mov	r4, r3
 8014134:	4613      	mov	r3, r2
 8014136:	cb07      	ldmia	r3!, {r0, r1, r2}
 8014138:	6020      	str	r0, [r4, #0]
 801413a:	6061      	str	r1, [r4, #4]
 801413c:	60a2      	str	r2, [r4, #8]
 801413e:	881b      	ldrh	r3, [r3, #0]
 8014140:	81a3      	strh	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,e");
 8014142:	687b      	ldr	r3, [r7, #4]
 8014144:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8014148:	4939      	ldr	r1, [pc, #228]	; (8014230 <problem_fetch+0x12b6c>)
 801414a:	461a      	mov	r2, r3
 801414c:	460b      	mov	r3, r1
 801414e:	cb03      	ldmia	r3!, {r0, r1}
 8014150:	6010      	str	r0, [r2, #0]
 8014152:	6051      	str	r1, [r2, #4]
 8014154:	881b      	ldrh	r3, [r3, #0]
 8014156:	8113      	strh	r3, [r2, #8]
			break;
 8014158:	f008 b9e4 	b.w	801c524 <problem_fetch+0x1ae60>
		case 551 :
			strcpy(p->name,"IL LADRO DI POLLI");
 801415c:	687b      	ldr	r3, [r7, #4]
 801415e:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8014162:	4a34      	ldr	r2, [pc, #208]	; (8014234 <problem_fetch+0x12b70>)
 8014164:	461d      	mov	r5, r3
 8014166:	4614      	mov	r4, r2
 8014168:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801416a:	6028      	str	r0, [r5, #0]
 801416c:	6069      	str	r1, [r5, #4]
 801416e:	60aa      	str	r2, [r5, #8]
 8014170:	60eb      	str	r3, [r5, #12]
 8014172:	8823      	ldrh	r3, [r4, #0]
 8014174:	822b      	strh	r3, [r5, #16]
			strcpy(p->grade,"6C+");
 8014176:	687b      	ldr	r3, [r7, #4]
 8014178:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801417c:	4a29      	ldr	r2, [pc, #164]	; (8014224 <problem_fetch+0x12b60>)
 801417e:	6810      	ldr	r0, [r2, #0]
 8014180:	6018      	str	r0, [r3, #0]
			p->moveSize = 8;
 8014182:	687b      	ldr	r3, [r7, #4]
 8014184:	2208      	movs	r2, #8
 8014186:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"C,B,E,E,J,E,E,D");
 8014188:	687b      	ldr	r3, [r7, #4]
 801418a:	33a4      	adds	r3, #164	; 0xa4
 801418c:	4a2a      	ldr	r2, [pc, #168]	; (8014238 <problem_fetch+0x12b74>)
 801418e:	461c      	mov	r4, r3
 8014190:	4615      	mov	r5, r2
 8014192:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8014194:	6020      	str	r0, [r4, #0]
 8014196:	6061      	str	r1, [r4, #4]
 8014198:	60a2      	str	r2, [r4, #8]
 801419a:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,6,8,9,7,12,16,18");
 801419c:	687b      	ldr	r3, [r7, #4]
 801419e:	3304      	adds	r3, #4
 80141a0:	4a26      	ldr	r2, [pc, #152]	; (801423c <problem_fetch+0x12b78>)
 80141a2:	461d      	mov	r5, r3
 80141a4:	4614      	mov	r4, r2
 80141a6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80141a8:	6028      	str	r0, [r5, #0]
 80141aa:	6069      	str	r1, [r5, #4]
 80141ac:	60aa      	str	r2, [r5, #8]
 80141ae:	60eb      	str	r3, [r5, #12]
 80141b0:	8823      	ldrh	r3, [r4, #0]
 80141b2:	78a2      	ldrb	r2, [r4, #2]
 80141b4:	822b      	strh	r3, [r5, #16]
 80141b6:	4613      	mov	r3, r2
 80141b8:	74ab      	strb	r3, [r5, #18]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,e");
 80141ba:	687b      	ldr	r3, [r7, #4]
 80141bc:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 80141c0:	4a1f      	ldr	r2, [pc, #124]	; (8014240 <problem_fetch+0x12b7c>)
 80141c2:	461c      	mov	r4, r3
 80141c4:	4615      	mov	r5, r2
 80141c6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80141c8:	6020      	str	r0, [r4, #0]
 80141ca:	6061      	str	r1, [r4, #4]
 80141cc:	60a2      	str	r2, [r4, #8]
 80141ce:	60e3      	str	r3, [r4, #12]
			break;
 80141d0:	f008 b9a8 	b.w	801c524 <problem_fetch+0x1ae60>
 80141d4:	0802a0dc 	.word	0x0802a0dc
 80141d8:	08023990 	.word	0x08023990
 80141dc:	0802a0f4 	.word	0x0802a0f4
 80141e0:	0802a104 	.word	0x0802a104
 80141e4:	08023a64 	.word	0x08023a64
 80141e8:	0802a11c 	.word	0x0802a11c
 80141ec:	08023920 	.word	0x08023920
 80141f0:	0802a120 	.word	0x0802a120
 80141f4:	0802a138 	.word	0x0802a138
 80141f8:	080271b4 	.word	0x080271b4
 80141fc:	0802a158 	.word	0x0802a158
 8014200:	08023854 	.word	0x08023854
 8014204:	0802a160 	.word	0x0802a160
 8014208:	0802859c 	.word	0x0802859c
 801420c:	080239dc 	.word	0x080239dc
 8014210:	0802a170 	.word	0x0802a170
 8014214:	0802a17c 	.word	0x0802a17c
 8014218:	0802a188 	.word	0x0802a188
 801421c:	08023bf0 	.word	0x08023bf0
 8014220:	0802a198 	.word	0x0802a198
 8014224:	080238ec 	.word	0x080238ec
 8014228:	0802a1ac 	.word	0x0802a1ac
 801422c:	08027874 	.word	0x08027874
 8014230:	08023d20 	.word	0x08023d20
 8014234:	0802a1b8 	.word	0x0802a1b8
 8014238:	0802a1cc 	.word	0x0802a1cc
 801423c:	0802a1dc 	.word	0x0802a1dc
 8014240:	08023978 	.word	0x08023978
		case 552 :
			strcpy(p->name,"EVERY WHICH WAY BUT RIGHT");
 8014244:	687b      	ldr	r3, [r7, #4]
 8014246:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801424a:	4ab6      	ldr	r2, [pc, #728]	; (8014524 <problem_fetch+0x12e60>)
 801424c:	461d      	mov	r5, r3
 801424e:	4614      	mov	r4, r2
 8014250:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8014252:	6028      	str	r0, [r5, #0]
 8014254:	6069      	str	r1, [r5, #4]
 8014256:	60aa      	str	r2, [r5, #8]
 8014258:	60eb      	str	r3, [r5, #12]
 801425a:	cc03      	ldmia	r4!, {r0, r1}
 801425c:	6128      	str	r0, [r5, #16]
 801425e:	6169      	str	r1, [r5, #20]
 8014260:	8823      	ldrh	r3, [r4, #0]
 8014262:	832b      	strh	r3, [r5, #24]
			strcpy(p->grade,"7A+");
 8014264:	687b      	ldr	r3, [r7, #4]
 8014266:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801426a:	4aaf      	ldr	r2, [pc, #700]	; (8014528 <problem_fetch+0x12e64>)
 801426c:	6810      	ldr	r0, [r2, #0]
 801426e:	6018      	str	r0, [r3, #0]
			p->moveSize = 10;
 8014270:	687b      	ldr	r3, [r7, #4]
 8014272:	220a      	movs	r2, #10
 8014274:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,B,C,A,C,B,I,G,G,I");
 8014276:	687b      	ldr	r3, [r7, #4]
 8014278:	33a4      	adds	r3, #164	; 0xa4
 801427a:	4aac      	ldr	r2, [pc, #688]	; (801452c <problem_fetch+0x12e68>)
 801427c:	461d      	mov	r5, r3
 801427e:	4614      	mov	r4, r2
 8014280:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8014282:	6028      	str	r0, [r5, #0]
 8014284:	6069      	str	r1, [r5, #4]
 8014286:	60aa      	str	r2, [r5, #8]
 8014288:	60eb      	str	r3, [r5, #12]
 801428a:	6820      	ldr	r0, [r4, #0]
 801428c:	6128      	str	r0, [r5, #16]
			strcpy(p->moveNumbers,"4,6,8,9,13,15,10,15,17,18");
 801428e:	687b      	ldr	r3, [r7, #4]
 8014290:	3304      	adds	r3, #4
 8014292:	4aa7      	ldr	r2, [pc, #668]	; (8014530 <problem_fetch+0x12e6c>)
 8014294:	461d      	mov	r5, r3
 8014296:	4614      	mov	r4, r2
 8014298:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801429a:	6028      	str	r0, [r5, #0]
 801429c:	6069      	str	r1, [r5, #4]
 801429e:	60aa      	str	r2, [r5, #8]
 80142a0:	60eb      	str	r3, [r5, #12]
 80142a2:	cc03      	ldmia	r4!, {r0, r1}
 80142a4:	6128      	str	r0, [r5, #16]
 80142a6:	6169      	str	r1, [r5, #20]
 80142a8:	8823      	ldrh	r3, [r4, #0]
 80142aa:	832b      	strh	r3, [r5, #24]
			strcpy(p->startFinish,"s,d,d,d,d,d,d,d,d,e");
 80142ac:	687b      	ldr	r3, [r7, #4]
 80142ae:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 80142b2:	4aa0      	ldr	r2, [pc, #640]	; (8014534 <problem_fetch+0x12e70>)
 80142b4:	461d      	mov	r5, r3
 80142b6:	4614      	mov	r4, r2
 80142b8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80142ba:	6028      	str	r0, [r5, #0]
 80142bc:	6069      	str	r1, [r5, #4]
 80142be:	60aa      	str	r2, [r5, #8]
 80142c0:	60eb      	str	r3, [r5, #12]
 80142c2:	6820      	ldr	r0, [r4, #0]
 80142c4:	6128      	str	r0, [r5, #16]
			break;
 80142c6:	f008 b92d 	b.w	801c524 <problem_fetch+0x1ae60>
		case 553 :
			strcpy(p->name,"180 CAMPUS");
 80142ca:	687b      	ldr	r3, [r7, #4]
 80142cc:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80142d0:	4999      	ldr	r1, [pc, #612]	; (8014538 <problem_fetch+0x12e74>)
 80142d2:	461a      	mov	r2, r3
 80142d4:	460b      	mov	r3, r1
 80142d6:	cb03      	ldmia	r3!, {r0, r1}
 80142d8:	6010      	str	r0, [r2, #0]
 80142da:	6051      	str	r1, [r2, #4]
 80142dc:	8819      	ldrh	r1, [r3, #0]
 80142de:	789b      	ldrb	r3, [r3, #2]
 80142e0:	8111      	strh	r1, [r2, #8]
 80142e2:	7293      	strb	r3, [r2, #10]
			strcpy(p->grade,"7A");
 80142e4:	687b      	ldr	r3, [r7, #4]
 80142e6:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80142ea:	4a94      	ldr	r2, [pc, #592]	; (801453c <problem_fetch+0x12e78>)
 80142ec:	8811      	ldrh	r1, [r2, #0]
 80142ee:	7892      	ldrb	r2, [r2, #2]
 80142f0:	8019      	strh	r1, [r3, #0]
 80142f2:	709a      	strb	r2, [r3, #2]
			p->moveSize = 5;
 80142f4:	687b      	ldr	r3, [r7, #4]
 80142f6:	2205      	movs	r2, #5
 80142f8:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,K,H,I,D");
 80142fa:	687b      	ldr	r3, [r7, #4]
 80142fc:	33a4      	adds	r3, #164	; 0xa4
 80142fe:	4990      	ldr	r1, [pc, #576]	; (8014540 <problem_fetch+0x12e7c>)
 8014300:	461a      	mov	r2, r3
 8014302:	460b      	mov	r3, r1
 8014304:	cb03      	ldmia	r3!, {r0, r1}
 8014306:	6010      	str	r0, [r2, #0]
 8014308:	6051      	str	r1, [r2, #4]
 801430a:	881b      	ldrh	r3, [r3, #0]
 801430c:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"5,9,13,14,18");
 801430e:	687b      	ldr	r3, [r7, #4]
 8014310:	3304      	adds	r3, #4
 8014312:	4a8c      	ldr	r2, [pc, #560]	; (8014544 <problem_fetch+0x12e80>)
 8014314:	461c      	mov	r4, r3
 8014316:	4613      	mov	r3, r2
 8014318:	cb07      	ldmia	r3!, {r0, r1, r2}
 801431a:	6020      	str	r0, [r4, #0]
 801431c:	6061      	str	r1, [r4, #4]
 801431e:	60a2      	str	r2, [r4, #8]
 8014320:	781b      	ldrb	r3, [r3, #0]
 8014322:	7323      	strb	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,e");
 8014324:	687b      	ldr	r3, [r7, #4]
 8014326:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 801432a:	4987      	ldr	r1, [pc, #540]	; (8014548 <problem_fetch+0x12e84>)
 801432c:	461a      	mov	r2, r3
 801432e:	460b      	mov	r3, r1
 8014330:	cb03      	ldmia	r3!, {r0, r1}
 8014332:	6010      	str	r0, [r2, #0]
 8014334:	6051      	str	r1, [r2, #4]
 8014336:	881b      	ldrh	r3, [r3, #0]
 8014338:	8113      	strh	r3, [r2, #8]
			break;
 801433a:	f008 b8f3 	b.w	801c524 <problem_fetch+0x1ae60>
		case 554 :
			strcpy(p->name,"JOHNNY REHAB 4");
 801433e:	687b      	ldr	r3, [r7, #4]
 8014340:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8014344:	4a81      	ldr	r2, [pc, #516]	; (801454c <problem_fetch+0x12e88>)
 8014346:	461c      	mov	r4, r3
 8014348:	4613      	mov	r3, r2
 801434a:	cb07      	ldmia	r3!, {r0, r1, r2}
 801434c:	6020      	str	r0, [r4, #0]
 801434e:	6061      	str	r1, [r4, #4]
 8014350:	60a2      	str	r2, [r4, #8]
 8014352:	881a      	ldrh	r2, [r3, #0]
 8014354:	789b      	ldrb	r3, [r3, #2]
 8014356:	81a2      	strh	r2, [r4, #12]
 8014358:	73a3      	strb	r3, [r4, #14]
			strcpy(p->grade,"6C+");
 801435a:	687b      	ldr	r3, [r7, #4]
 801435c:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8014360:	4a7b      	ldr	r2, [pc, #492]	; (8014550 <problem_fetch+0x12e8c>)
 8014362:	6810      	ldr	r0, [r2, #0]
 8014364:	6018      	str	r0, [r3, #0]
			p->moveSize = 9;
 8014366:	687b      	ldr	r3, [r7, #4]
 8014368:	2209      	movs	r2, #9
 801436a:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,J,H,K,J,I,E,J,D");
 801436c:	687b      	ldr	r3, [r7, #4]
 801436e:	33a4      	adds	r3, #164	; 0xa4
 8014370:	4a78      	ldr	r2, [pc, #480]	; (8014554 <problem_fetch+0x12e90>)
 8014372:	461d      	mov	r5, r3
 8014374:	4614      	mov	r4, r2
 8014376:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8014378:	6028      	str	r0, [r5, #0]
 801437a:	6069      	str	r1, [r5, #4]
 801437c:	60aa      	str	r2, [r5, #8]
 801437e:	60eb      	str	r3, [r5, #12]
 8014380:	8823      	ldrh	r3, [r4, #0]
 8014382:	822b      	strh	r3, [r5, #16]
			strcpy(p->moveNumbers,"4,5,10,9,12,14,8,16,18");
 8014384:	687b      	ldr	r3, [r7, #4]
 8014386:	3304      	adds	r3, #4
 8014388:	4a73      	ldr	r2, [pc, #460]	; (8014558 <problem_fetch+0x12e94>)
 801438a:	461c      	mov	r4, r3
 801438c:	4615      	mov	r5, r2
 801438e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8014390:	6020      	str	r0, [r4, #0]
 8014392:	6061      	str	r1, [r4, #4]
 8014394:	60a2      	str	r2, [r4, #8]
 8014396:	60e3      	str	r3, [r4, #12]
 8014398:	6828      	ldr	r0, [r5, #0]
 801439a:	6120      	str	r0, [r4, #16]
 801439c:	88ab      	ldrh	r3, [r5, #4]
 801439e:	79aa      	ldrb	r2, [r5, #6]
 80143a0:	82a3      	strh	r3, [r4, #20]
 80143a2:	4613      	mov	r3, r2
 80143a4:	75a3      	strb	r3, [r4, #22]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,d,e");
 80143a6:	687b      	ldr	r3, [r7, #4]
 80143a8:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 80143ac:	4a6b      	ldr	r2, [pc, #428]	; (801455c <problem_fetch+0x12e98>)
 80143ae:	461d      	mov	r5, r3
 80143b0:	4614      	mov	r4, r2
 80143b2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80143b4:	6028      	str	r0, [r5, #0]
 80143b6:	6069      	str	r1, [r5, #4]
 80143b8:	60aa      	str	r2, [r5, #8]
 80143ba:	60eb      	str	r3, [r5, #12]
 80143bc:	8823      	ldrh	r3, [r4, #0]
 80143be:	822b      	strh	r3, [r5, #16]
			break;
 80143c0:	f008 b8b0 	b.w	801c524 <problem_fetch+0x1ae60>
		case 555 :
			strcpy(p->name,"FULCRO HARD");
 80143c4:	687b      	ldr	r3, [r7, #4]
 80143c6:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80143ca:	4a65      	ldr	r2, [pc, #404]	; (8014560 <problem_fetch+0x12e9c>)
 80143cc:	461c      	mov	r4, r3
 80143ce:	4613      	mov	r3, r2
 80143d0:	cb07      	ldmia	r3!, {r0, r1, r2}
 80143d2:	6020      	str	r0, [r4, #0]
 80143d4:	6061      	str	r1, [r4, #4]
 80143d6:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade,"7C");
 80143d8:	687b      	ldr	r3, [r7, #4]
 80143da:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80143de:	4a61      	ldr	r2, [pc, #388]	; (8014564 <problem_fetch+0x12ea0>)
 80143e0:	8811      	ldrh	r1, [r2, #0]
 80143e2:	7892      	ldrb	r2, [r2, #2]
 80143e4:	8019      	strh	r1, [r3, #0]
 80143e6:	709a      	strb	r2, [r3, #2]
			p->moveSize = 6;
 80143e8:	687b      	ldr	r3, [r7, #4]
 80143ea:	2206      	movs	r2, #6
 80143ec:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,G,I,D,E,D");
 80143ee:	687b      	ldr	r3, [r7, #4]
 80143f0:	33a4      	adds	r3, #164	; 0xa4
 80143f2:	4a5d      	ldr	r2, [pc, #372]	; (8014568 <problem_fetch+0x12ea4>)
 80143f4:	461c      	mov	r4, r3
 80143f6:	4613      	mov	r3, r2
 80143f8:	cb07      	ldmia	r3!, {r0, r1, r2}
 80143fa:	6020      	str	r0, [r4, #0]
 80143fc:	6061      	str	r1, [r4, #4]
 80143fe:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,6,9,11,16,18");
 8014400:	687b      	ldr	r3, [r7, #4]
 8014402:	3304      	adds	r3, #4
 8014404:	4a59      	ldr	r2, [pc, #356]	; (801456c <problem_fetch+0x12ea8>)
 8014406:	461c      	mov	r4, r3
 8014408:	4613      	mov	r3, r2
 801440a:	cb07      	ldmia	r3!, {r0, r1, r2}
 801440c:	6020      	str	r0, [r4, #0]
 801440e:	6061      	str	r1, [r4, #4]
 8014410:	60a2      	str	r2, [r4, #8]
 8014412:	881a      	ldrh	r2, [r3, #0]
 8014414:	789b      	ldrb	r3, [r3, #2]
 8014416:	81a2      	strh	r2, [r4, #12]
 8014418:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish,"s,s,d,d,d,e");
 801441a:	687b      	ldr	r3, [r7, #4]
 801441c:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8014420:	4a53      	ldr	r2, [pc, #332]	; (8014570 <problem_fetch+0x12eac>)
 8014422:	461c      	mov	r4, r3
 8014424:	4613      	mov	r3, r2
 8014426:	cb07      	ldmia	r3!, {r0, r1, r2}
 8014428:	6020      	str	r0, [r4, #0]
 801442a:	6061      	str	r1, [r4, #4]
 801442c:	60a2      	str	r2, [r4, #8]
			break;
 801442e:	f008 b879 	b.w	801c524 <problem_fetch+0x1ae60>
		case 556 :
			strcpy(p->name,"FORSØK 15");
 8014432:	687b      	ldr	r3, [r7, #4]
 8014434:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8014438:	494e      	ldr	r1, [pc, #312]	; (8014574 <problem_fetch+0x12eb0>)
 801443a:	461a      	mov	r2, r3
 801443c:	460b      	mov	r3, r1
 801443e:	cb03      	ldmia	r3!, {r0, r1}
 8014440:	6010      	str	r0, [r2, #0]
 8014442:	6051      	str	r1, [r2, #4]
 8014444:	8819      	ldrh	r1, [r3, #0]
 8014446:	789b      	ldrb	r3, [r3, #2]
 8014448:	8111      	strh	r1, [r2, #8]
 801444a:	7293      	strb	r3, [r2, #10]
			strcpy(p->grade,"6C+");
 801444c:	687b      	ldr	r3, [r7, #4]
 801444e:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8014452:	4a3f      	ldr	r2, [pc, #252]	; (8014550 <problem_fetch+0x12e8c>)
 8014454:	6810      	ldr	r0, [r2, #0]
 8014456:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 8014458:	687b      	ldr	r3, [r7, #4]
 801445a:	2207      	movs	r2, #7
 801445c:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"H,H,C,F,C,D,A");
 801445e:	687b      	ldr	r3, [r7, #4]
 8014460:	33a4      	adds	r3, #164	; 0xa4
 8014462:	4a45      	ldr	r2, [pc, #276]	; (8014578 <problem_fetch+0x12eb4>)
 8014464:	461c      	mov	r4, r3
 8014466:	4613      	mov	r3, r2
 8014468:	cb07      	ldmia	r3!, {r0, r1, r2}
 801446a:	6020      	str	r0, [r4, #0]
 801446c:	6061      	str	r1, [r4, #4]
 801446e:	60a2      	str	r2, [r4, #8]
 8014470:	881b      	ldrh	r3, [r3, #0]
 8014472:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,8,8,11,13,15,18");
 8014474:	687b      	ldr	r3, [r7, #4]
 8014476:	3304      	adds	r3, #4
 8014478:	4a40      	ldr	r2, [pc, #256]	; (801457c <problem_fetch+0x12eb8>)
 801447a:	461d      	mov	r5, r3
 801447c:	4614      	mov	r4, r2
 801447e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8014480:	6028      	str	r0, [r5, #0]
 8014482:	6069      	str	r1, [r5, #4]
 8014484:	60aa      	str	r2, [r5, #8]
 8014486:	60eb      	str	r3, [r5, #12]
 8014488:	8823      	ldrh	r3, [r4, #0]
 801448a:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 801448c:	687b      	ldr	r3, [r7, #4]
 801448e:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8014492:	4a3b      	ldr	r2, [pc, #236]	; (8014580 <problem_fetch+0x12ebc>)
 8014494:	461c      	mov	r4, r3
 8014496:	4613      	mov	r3, r2
 8014498:	cb07      	ldmia	r3!, {r0, r1, r2}
 801449a:	6020      	str	r0, [r4, #0]
 801449c:	6061      	str	r1, [r4, #4]
 801449e:	60a2      	str	r2, [r4, #8]
 80144a0:	881b      	ldrh	r3, [r3, #0]
 80144a2:	81a3      	strh	r3, [r4, #12]
			break;
 80144a4:	f008 b83e 	b.w	801c524 <problem_fetch+0x1ae60>
		case 557 :
			strcpy(p->name,"ALEXS PROBLEM NUMBER ONE");
 80144a8:	687b      	ldr	r3, [r7, #4]
 80144aa:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80144ae:	4a35      	ldr	r2, [pc, #212]	; (8014584 <problem_fetch+0x12ec0>)
 80144b0:	461d      	mov	r5, r3
 80144b2:	4614      	mov	r4, r2
 80144b4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80144b6:	6028      	str	r0, [r5, #0]
 80144b8:	6069      	str	r1, [r5, #4]
 80144ba:	60aa      	str	r2, [r5, #8]
 80144bc:	60eb      	str	r3, [r5, #12]
 80144be:	cc03      	ldmia	r4!, {r0, r1}
 80144c0:	6128      	str	r0, [r5, #16]
 80144c2:	6169      	str	r1, [r5, #20]
 80144c4:	7823      	ldrb	r3, [r4, #0]
 80144c6:	762b      	strb	r3, [r5, #24]
			strcpy(p->grade,"6B+");
 80144c8:	687b      	ldr	r3, [r7, #4]
 80144ca:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80144ce:	4a2e      	ldr	r2, [pc, #184]	; (8014588 <problem_fetch+0x12ec4>)
 80144d0:	6810      	ldr	r0, [r2, #0]
 80144d2:	6018      	str	r0, [r3, #0]
			p->moveSize = 8;
 80144d4:	687b      	ldr	r3, [r7, #4]
 80144d6:	2208      	movs	r2, #8
 80144d8:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"B,E,E,B,E,A,D,D");
 80144da:	687b      	ldr	r3, [r7, #4]
 80144dc:	33a4      	adds	r3, #164	; 0xa4
 80144de:	4a2b      	ldr	r2, [pc, #172]	; (801458c <problem_fetch+0x12ec8>)
 80144e0:	461c      	mov	r4, r3
 80144e2:	4615      	mov	r5, r2
 80144e4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80144e6:	6020      	str	r0, [r4, #0]
 80144e8:	6061      	str	r1, [r4, #4]
 80144ea:	60a2      	str	r2, [r4, #8]
 80144ec:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"6,6,8,10,12,14,15,18");
 80144ee:	687b      	ldr	r3, [r7, #4]
 80144f0:	3304      	adds	r3, #4
 80144f2:	4a27      	ldr	r2, [pc, #156]	; (8014590 <problem_fetch+0x12ecc>)
 80144f4:	461d      	mov	r5, r3
 80144f6:	4614      	mov	r4, r2
 80144f8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80144fa:	6028      	str	r0, [r5, #0]
 80144fc:	6069      	str	r1, [r5, #4]
 80144fe:	60aa      	str	r2, [r5, #8]
 8014500:	60eb      	str	r3, [r5, #12]
 8014502:	6820      	ldr	r0, [r4, #0]
 8014504:	6128      	str	r0, [r5, #16]
 8014506:	7923      	ldrb	r3, [r4, #4]
 8014508:	752b      	strb	r3, [r5, #20]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,e");
 801450a:	687b      	ldr	r3, [r7, #4]
 801450c:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8014510:	4a20      	ldr	r2, [pc, #128]	; (8014594 <problem_fetch+0x12ed0>)
 8014512:	461c      	mov	r4, r3
 8014514:	4615      	mov	r5, r2
 8014516:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8014518:	6020      	str	r0, [r4, #0]
 801451a:	6061      	str	r1, [r4, #4]
 801451c:	60a2      	str	r2, [r4, #8]
 801451e:	60e3      	str	r3, [r4, #12]
			break;
 8014520:	f008 b800 	b.w	801c524 <problem_fetch+0x1ae60>
 8014524:	0802a1f0 	.word	0x0802a1f0
 8014528:	080239f4 	.word	0x080239f4
 801452c:	0802a20c 	.word	0x0802a20c
 8014530:	0802a220 	.word	0x0802a220
 8014534:	08024bac 	.word	0x08024bac
 8014538:	0802a23c 	.word	0x0802a23c
 801453c:	08023814 	.word	0x08023814
 8014540:	0802a248 	.word	0x0802a248
 8014544:	08025490 	.word	0x08025490
 8014548:	08023d20 	.word	0x08023d20
 801454c:	0802a254 	.word	0x0802a254
 8014550:	080238ec 	.word	0x080238ec
 8014554:	0802a264 	.word	0x0802a264
 8014558:	0802a278 	.word	0x0802a278
 801455c:	08024838 	.word	0x08024838
 8014560:	0802a290 	.word	0x0802a290
 8014564:	08024088 	.word	0x08024088
 8014568:	0802a29c 	.word	0x0802a29c
 801456c:	08023bb8 	.word	0x08023bb8
 8014570:	08023834 	.word	0x08023834
 8014574:	0802a2a8 	.word	0x0802a2a8
 8014578:	0802a2b4 	.word	0x0802a2b4
 801457c:	0802853c 	.word	0x0802853c
 8014580:	080239dc 	.word	0x080239dc
 8014584:	0802a2c4 	.word	0x0802a2c4
 8014588:	08023854 	.word	0x08023854
 801458c:	0802a2e0 	.word	0x0802a2e0
 8014590:	0802a2f0 	.word	0x0802a2f0
 8014594:	08023978 	.word	0x08023978
		case 558 :
			strcpy(p->name,"BLABLUB");
 8014598:	687b      	ldr	r3, [r7, #4]
 801459a:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801459e:	49ab      	ldr	r1, [pc, #684]	; (801484c <problem_fetch+0x13188>)
 80145a0:	461a      	mov	r2, r3
 80145a2:	460b      	mov	r3, r1
 80145a4:	cb03      	ldmia	r3!, {r0, r1}
 80145a6:	6010      	str	r0, [r2, #0]
 80145a8:	6051      	str	r1, [r2, #4]
			strcpy(p->grade,"6C");
 80145aa:	687b      	ldr	r3, [r7, #4]
 80145ac:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80145b0:	4aa7      	ldr	r2, [pc, #668]	; (8014850 <problem_fetch+0x1318c>)
 80145b2:	8811      	ldrh	r1, [r2, #0]
 80145b4:	7892      	ldrb	r2, [r2, #2]
 80145b6:	8019      	strh	r1, [r3, #0]
 80145b8:	709a      	strb	r2, [r3, #2]
			p->moveSize = 7;
 80145ba:	687b      	ldr	r3, [r7, #4]
 80145bc:	2207      	movs	r2, #7
 80145be:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"B,E,B,E,A,D,D");
 80145c0:	687b      	ldr	r3, [r7, #4]
 80145c2:	33a4      	adds	r3, #164	; 0xa4
 80145c4:	4aa3      	ldr	r2, [pc, #652]	; (8014854 <problem_fetch+0x13190>)
 80145c6:	461c      	mov	r4, r3
 80145c8:	4613      	mov	r3, r2
 80145ca:	cb07      	ldmia	r3!, {r0, r1, r2}
 80145cc:	6020      	str	r0, [r4, #0]
 80145ce:	6061      	str	r1, [r4, #4]
 80145d0:	60a2      	str	r2, [r4, #8]
 80145d2:	881b      	ldrh	r3, [r3, #0]
 80145d4:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"6,6,10,12,14,15,18");
 80145d6:	687b      	ldr	r3, [r7, #4]
 80145d8:	3304      	adds	r3, #4
 80145da:	4a9f      	ldr	r2, [pc, #636]	; (8014858 <problem_fetch+0x13194>)
 80145dc:	461d      	mov	r5, r3
 80145de:	4614      	mov	r4, r2
 80145e0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80145e2:	6028      	str	r0, [r5, #0]
 80145e4:	6069      	str	r1, [r5, #4]
 80145e6:	60aa      	str	r2, [r5, #8]
 80145e8:	60eb      	str	r3, [r5, #12]
 80145ea:	8823      	ldrh	r3, [r4, #0]
 80145ec:	78a2      	ldrb	r2, [r4, #2]
 80145ee:	822b      	strh	r3, [r5, #16]
 80145f0:	4613      	mov	r3, r2
 80145f2:	74ab      	strb	r3, [r5, #18]
			strcpy(p->startFinish,"s,s,d,d,d,d,e");
 80145f4:	687b      	ldr	r3, [r7, #4]
 80145f6:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 80145fa:	4a98      	ldr	r2, [pc, #608]	; (801485c <problem_fetch+0x13198>)
 80145fc:	461c      	mov	r4, r3
 80145fe:	4613      	mov	r3, r2
 8014600:	cb07      	ldmia	r3!, {r0, r1, r2}
 8014602:	6020      	str	r0, [r4, #0]
 8014604:	6061      	str	r1, [r4, #4]
 8014606:	60a2      	str	r2, [r4, #8]
 8014608:	881b      	ldrh	r3, [r3, #0]
 801460a:	81a3      	strh	r3, [r4, #12]
			break;
 801460c:	f007 bf8a 	b.w	801c524 <problem_fetch+0x1ae60>
		case 559 :
			strcpy(p->name,"CRANK IT UP A NOTCH!");
 8014610:	687b      	ldr	r3, [r7, #4]
 8014612:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8014616:	4a92      	ldr	r2, [pc, #584]	; (8014860 <problem_fetch+0x1319c>)
 8014618:	461d      	mov	r5, r3
 801461a:	4614      	mov	r4, r2
 801461c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801461e:	6028      	str	r0, [r5, #0]
 8014620:	6069      	str	r1, [r5, #4]
 8014622:	60aa      	str	r2, [r5, #8]
 8014624:	60eb      	str	r3, [r5, #12]
 8014626:	6820      	ldr	r0, [r4, #0]
 8014628:	6128      	str	r0, [r5, #16]
 801462a:	7923      	ldrb	r3, [r4, #4]
 801462c:	752b      	strb	r3, [r5, #20]
			strcpy(p->grade,"7A+");
 801462e:	687b      	ldr	r3, [r7, #4]
 8014630:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8014634:	4a8b      	ldr	r2, [pc, #556]	; (8014864 <problem_fetch+0x131a0>)
 8014636:	6810      	ldr	r0, [r2, #0]
 8014638:	6018      	str	r0, [r3, #0]
			p->moveSize = 4;
 801463a:	687b      	ldr	r3, [r7, #4]
 801463c:	2204      	movs	r2, #4
 801463e:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,F,C,D");
 8014640:	687b      	ldr	r3, [r7, #4]
 8014642:	33a4      	adds	r3, #164	; 0xa4
 8014644:	4988      	ldr	r1, [pc, #544]	; (8014868 <problem_fetch+0x131a4>)
 8014646:	461a      	mov	r2, r3
 8014648:	460b      	mov	r3, r1
 801464a:	cb03      	ldmia	r3!, {r0, r1}
 801464c:	6010      	str	r0, [r2, #0]
 801464e:	6051      	str	r1, [r2, #4]
			strcpy(p->moveNumbers,"6,11,13,18");
 8014650:	687b      	ldr	r3, [r7, #4]
 8014652:	3304      	adds	r3, #4
 8014654:	4985      	ldr	r1, [pc, #532]	; (801486c <problem_fetch+0x131a8>)
 8014656:	461a      	mov	r2, r3
 8014658:	460b      	mov	r3, r1
 801465a:	cb03      	ldmia	r3!, {r0, r1}
 801465c:	6010      	str	r0, [r2, #0]
 801465e:	6051      	str	r1, [r2, #4]
 8014660:	8819      	ldrh	r1, [r3, #0]
 8014662:	789b      	ldrb	r3, [r3, #2]
 8014664:	8111      	strh	r1, [r2, #8]
 8014666:	7293      	strb	r3, [r2, #10]
			strcpy(p->startFinish,"s,d,d,e");
 8014668:	687b      	ldr	r3, [r7, #4]
 801466a:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 801466e:	4980      	ldr	r1, [pc, #512]	; (8014870 <problem_fetch+0x131ac>)
 8014670:	461a      	mov	r2, r3
 8014672:	460b      	mov	r3, r1
 8014674:	cb03      	ldmia	r3!, {r0, r1}
 8014676:	6010      	str	r0, [r2, #0]
 8014678:	6051      	str	r1, [r2, #4]
			break;
 801467a:	f007 bf53 	b.w	801c524 <problem_fetch+0x1ae60>
		case 560 :
			strcpy(p->name,"HOLY IWAN");
 801467e:	687b      	ldr	r3, [r7, #4]
 8014680:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8014684:	497b      	ldr	r1, [pc, #492]	; (8014874 <problem_fetch+0x131b0>)
 8014686:	461a      	mov	r2, r3
 8014688:	460b      	mov	r3, r1
 801468a:	cb03      	ldmia	r3!, {r0, r1}
 801468c:	6010      	str	r0, [r2, #0]
 801468e:	6051      	str	r1, [r2, #4]
 8014690:	881b      	ldrh	r3, [r3, #0]
 8014692:	8113      	strh	r3, [r2, #8]
			strcpy(p->grade,"6B+");
 8014694:	687b      	ldr	r3, [r7, #4]
 8014696:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801469a:	4a77      	ldr	r2, [pc, #476]	; (8014878 <problem_fetch+0x131b4>)
 801469c:	6810      	ldr	r0, [r2, #0]
 801469e:	6018      	str	r0, [r3, #0]
			p->moveSize = 10;
 80146a0:	687b      	ldr	r3, [r7, #4]
 80146a2:	220a      	movs	r2, #10
 80146a4:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"B,E,E,C,B,E,C,D,C,D");
 80146a6:	687b      	ldr	r3, [r7, #4]
 80146a8:	33a4      	adds	r3, #164	; 0xa4
 80146aa:	4a74      	ldr	r2, [pc, #464]	; (801487c <problem_fetch+0x131b8>)
 80146ac:	461d      	mov	r5, r3
 80146ae:	4614      	mov	r4, r2
 80146b0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80146b2:	6028      	str	r0, [r5, #0]
 80146b4:	6069      	str	r1, [r5, #4]
 80146b6:	60aa      	str	r2, [r5, #8]
 80146b8:	60eb      	str	r3, [r5, #12]
 80146ba:	6820      	ldr	r0, [r4, #0]
 80146bc:	6128      	str	r0, [r5, #16]
			strcpy(p->moveNumbers,"6,6,8,8,10,12,13,15,16,18");
 80146be:	687b      	ldr	r3, [r7, #4]
 80146c0:	3304      	adds	r3, #4
 80146c2:	4a6f      	ldr	r2, [pc, #444]	; (8014880 <problem_fetch+0x131bc>)
 80146c4:	461d      	mov	r5, r3
 80146c6:	4614      	mov	r4, r2
 80146c8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80146ca:	6028      	str	r0, [r5, #0]
 80146cc:	6069      	str	r1, [r5, #4]
 80146ce:	60aa      	str	r2, [r5, #8]
 80146d0:	60eb      	str	r3, [r5, #12]
 80146d2:	cc03      	ldmia	r4!, {r0, r1}
 80146d4:	6128      	str	r0, [r5, #16]
 80146d6:	6169      	str	r1, [r5, #20]
 80146d8:	8823      	ldrh	r3, [r4, #0]
 80146da:	832b      	strh	r3, [r5, #24]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,d,d,e");
 80146dc:	687b      	ldr	r3, [r7, #4]
 80146de:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 80146e2:	4a68      	ldr	r2, [pc, #416]	; (8014884 <problem_fetch+0x131c0>)
 80146e4:	461d      	mov	r5, r3
 80146e6:	4614      	mov	r4, r2
 80146e8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80146ea:	6028      	str	r0, [r5, #0]
 80146ec:	6069      	str	r1, [r5, #4]
 80146ee:	60aa      	str	r2, [r5, #8]
 80146f0:	60eb      	str	r3, [r5, #12]
 80146f2:	6820      	ldr	r0, [r4, #0]
 80146f4:	6128      	str	r0, [r5, #16]
			break;
 80146f6:	f007 bf15 	b.w	801c524 <problem_fetch+0x1ae60>
		case 561 :
			strcpy(p->name,"BLACK HOLE SUN");
 80146fa:	687b      	ldr	r3, [r7, #4]
 80146fc:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8014700:	4a61      	ldr	r2, [pc, #388]	; (8014888 <problem_fetch+0x131c4>)
 8014702:	461c      	mov	r4, r3
 8014704:	4613      	mov	r3, r2
 8014706:	cb07      	ldmia	r3!, {r0, r1, r2}
 8014708:	6020      	str	r0, [r4, #0]
 801470a:	6061      	str	r1, [r4, #4]
 801470c:	60a2      	str	r2, [r4, #8]
 801470e:	881a      	ldrh	r2, [r3, #0]
 8014710:	789b      	ldrb	r3, [r3, #2]
 8014712:	81a2      	strh	r2, [r4, #12]
 8014714:	73a3      	strb	r3, [r4, #14]
			strcpy(p->grade,"7A");
 8014716:	687b      	ldr	r3, [r7, #4]
 8014718:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801471c:	4a5b      	ldr	r2, [pc, #364]	; (801488c <problem_fetch+0x131c8>)
 801471e:	8811      	ldrh	r1, [r2, #0]
 8014720:	7892      	ldrb	r2, [r2, #2]
 8014722:	8019      	strh	r1, [r3, #0]
 8014724:	709a      	strb	r2, [r3, #2]
			p->moveSize = 6;
 8014726:	687b      	ldr	r3, [r7, #4]
 8014728:	2206      	movs	r2, #6
 801472a:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,D,G,C,B,A");
 801472c:	687b      	ldr	r3, [r7, #4]
 801472e:	33a4      	adds	r3, #164	; 0xa4
 8014730:	4a57      	ldr	r2, [pc, #348]	; (8014890 <problem_fetch+0x131cc>)
 8014732:	461c      	mov	r4, r3
 8014734:	4613      	mov	r3, r2
 8014736:	cb07      	ldmia	r3!, {r0, r1, r2}
 8014738:	6020      	str	r0, [r4, #0]
 801473a:	6061      	str	r1, [r4, #4]
 801473c:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,7,10,13,15,18");
 801473e:	687b      	ldr	r3, [r7, #4]
 8014740:	3304      	adds	r3, #4
 8014742:	4a54      	ldr	r2, [pc, #336]	; (8014894 <problem_fetch+0x131d0>)
 8014744:	461c      	mov	r4, r3
 8014746:	4615      	mov	r5, r2
 8014748:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801474a:	6020      	str	r0, [r4, #0]
 801474c:	6061      	str	r1, [r4, #4]
 801474e:	60a2      	str	r2, [r4, #8]
 8014750:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 8014752:	687b      	ldr	r3, [r7, #4]
 8014754:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8014758:	4a4f      	ldr	r2, [pc, #316]	; (8014898 <problem_fetch+0x131d4>)
 801475a:	461c      	mov	r4, r3
 801475c:	4613      	mov	r3, r2
 801475e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8014760:	6020      	str	r0, [r4, #0]
 8014762:	6061      	str	r1, [r4, #4]
 8014764:	60a2      	str	r2, [r4, #8]
			break;
 8014766:	f007 bedd 	b.w	801c524 <problem_fetch+0x1ae60>
		case 562 :
			strcpy(p->name,"모리");
 801476a:	687b      	ldr	r3, [r7, #4]
 801476c:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8014770:	4a4a      	ldr	r2, [pc, #296]	; (801489c <problem_fetch+0x131d8>)
 8014772:	6810      	ldr	r0, [r2, #0]
 8014774:	6018      	str	r0, [r3, #0]
 8014776:	8891      	ldrh	r1, [r2, #4]
 8014778:	7992      	ldrb	r2, [r2, #6]
 801477a:	8099      	strh	r1, [r3, #4]
 801477c:	719a      	strb	r2, [r3, #6]
			strcpy(p->grade,"6C+");
 801477e:	687b      	ldr	r3, [r7, #4]
 8014780:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8014784:	4a46      	ldr	r2, [pc, #280]	; (80148a0 <problem_fetch+0x131dc>)
 8014786:	6810      	ldr	r0, [r2, #0]
 8014788:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 801478a:	687b      	ldr	r3, [r7, #4]
 801478c:	2207      	movs	r2, #7
 801478e:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,E,F,B,D,E,I");
 8014790:	687b      	ldr	r3, [r7, #4]
 8014792:	33a4      	adds	r3, #164	; 0xa4
 8014794:	4a43      	ldr	r2, [pc, #268]	; (80148a4 <problem_fetch+0x131e0>)
 8014796:	461c      	mov	r4, r3
 8014798:	4613      	mov	r3, r2
 801479a:	cb07      	ldmia	r3!, {r0, r1, r2}
 801479c:	6020      	str	r0, [r4, #0]
 801479e:	6061      	str	r1, [r4, #4]
 80147a0:	60a2      	str	r2, [r4, #8]
 80147a2:	881b      	ldrh	r3, [r3, #0]
 80147a4:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,8,11,12,15,16,18");
 80147a6:	687b      	ldr	r3, [r7, #4]
 80147a8:	3304      	adds	r3, #4
 80147aa:	4a3f      	ldr	r2, [pc, #252]	; (80148a8 <problem_fetch+0x131e4>)
 80147ac:	461d      	mov	r5, r3
 80147ae:	4614      	mov	r4, r2
 80147b0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80147b2:	6028      	str	r0, [r5, #0]
 80147b4:	6069      	str	r1, [r5, #4]
 80147b6:	60aa      	str	r2, [r5, #8]
 80147b8:	60eb      	str	r3, [r5, #12]
 80147ba:	8823      	ldrh	r3, [r4, #0]
 80147bc:	78a2      	ldrb	r2, [r4, #2]
 80147be:	822b      	strh	r3, [r5, #16]
 80147c0:	4613      	mov	r3, r2
 80147c2:	74ab      	strb	r3, [r5, #18]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 80147c4:	687b      	ldr	r3, [r7, #4]
 80147c6:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 80147ca:	4a38      	ldr	r2, [pc, #224]	; (80148ac <problem_fetch+0x131e8>)
 80147cc:	461c      	mov	r4, r3
 80147ce:	4613      	mov	r3, r2
 80147d0:	cb07      	ldmia	r3!, {r0, r1, r2}
 80147d2:	6020      	str	r0, [r4, #0]
 80147d4:	6061      	str	r1, [r4, #4]
 80147d6:	60a2      	str	r2, [r4, #8]
 80147d8:	881b      	ldrh	r3, [r3, #0]
 80147da:	81a3      	strh	r3, [r4, #12]
			break;
 80147dc:	f007 bea2 	b.w	801c524 <problem_fetch+0x1ae60>
		case 563 :
			strcpy(p->name,"DAN1");
 80147e0:	687b      	ldr	r3, [r7, #4]
 80147e2:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80147e6:	4a32      	ldr	r2, [pc, #200]	; (80148b0 <problem_fetch+0x131ec>)
 80147e8:	6810      	ldr	r0, [r2, #0]
 80147ea:	6018      	str	r0, [r3, #0]
 80147ec:	7912      	ldrb	r2, [r2, #4]
 80147ee:	711a      	strb	r2, [r3, #4]
			strcpy(p->grade,"6C+");
 80147f0:	687b      	ldr	r3, [r7, #4]
 80147f2:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80147f6:	4a2a      	ldr	r2, [pc, #168]	; (80148a0 <problem_fetch+0x131dc>)
 80147f8:	6810      	ldr	r0, [r2, #0]
 80147fa:	6018      	str	r0, [r3, #0]
			p->moveSize = 8;
 80147fc:	687b      	ldr	r3, [r7, #4]
 80147fe:	2208      	movs	r2, #8
 8014800:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,H,G,F,E,C,D,D");
 8014802:	687b      	ldr	r3, [r7, #4]
 8014804:	33a4      	adds	r3, #164	; 0xa4
 8014806:	4a2b      	ldr	r2, [pc, #172]	; (80148b4 <problem_fetch+0x131f0>)
 8014808:	461c      	mov	r4, r3
 801480a:	4615      	mov	r5, r2
 801480c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801480e:	6020      	str	r0, [r4, #0]
 8014810:	6061      	str	r1, [r4, #4]
 8014812:	60a2      	str	r2, [r4, #8]
 8014814:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,8,9,11,12,13,15,18");
 8014816:	687b      	ldr	r3, [r7, #4]
 8014818:	3304      	adds	r3, #4
 801481a:	4a27      	ldr	r2, [pc, #156]	; (80148b8 <problem_fetch+0x131f4>)
 801481c:	461d      	mov	r5, r3
 801481e:	4614      	mov	r4, r2
 8014820:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8014822:	6028      	str	r0, [r5, #0]
 8014824:	6069      	str	r1, [r5, #4]
 8014826:	60aa      	str	r2, [r5, #8]
 8014828:	60eb      	str	r3, [r5, #12]
 801482a:	6820      	ldr	r0, [r4, #0]
 801482c:	6128      	str	r0, [r5, #16]
 801482e:	7923      	ldrb	r3, [r4, #4]
 8014830:	752b      	strb	r3, [r5, #20]
			strcpy(p->startFinish,"s,d,d,d,d,d,d,e");
 8014832:	687b      	ldr	r3, [r7, #4]
 8014834:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8014838:	4a20      	ldr	r2, [pc, #128]	; (80148bc <problem_fetch+0x131f8>)
 801483a:	461c      	mov	r4, r3
 801483c:	4615      	mov	r5, r2
 801483e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8014840:	6020      	str	r0, [r4, #0]
 8014842:	6061      	str	r1, [r4, #4]
 8014844:	60a2      	str	r2, [r4, #8]
 8014846:	60e3      	str	r3, [r4, #12]
			break;
 8014848:	f007 be6c 	b.w	801c524 <problem_fetch+0x1ae60>
 801484c:	0802a308 	.word	0x0802a308
 8014850:	08023920 	.word	0x08023920
 8014854:	0802a310 	.word	0x0802a310
 8014858:	0802a320 	.word	0x0802a320
 801485c:	080238cc 	.word	0x080238cc
 8014860:	0802a334 	.word	0x0802a334
 8014864:	080239f4 	.word	0x080239f4
 8014868:	0802a34c 	.word	0x0802a34c
 801486c:	0802a354 	.word	0x0802a354
 8014870:	080239a8 	.word	0x080239a8
 8014874:	0802a360 	.word	0x0802a360
 8014878:	08023854 	.word	0x08023854
 801487c:	0802a36c 	.word	0x0802a36c
 8014880:	0802a380 	.word	0x0802a380
 8014884:	080240fc 	.word	0x080240fc
 8014888:	0802a39c 	.word	0x0802a39c
 801488c:	08023814 	.word	0x08023814
 8014890:	0802a3ac 	.word	0x0802a3ac
 8014894:	0802a3b8 	.word	0x0802a3b8
 8014898:	08023bf0 	.word	0x08023bf0
 801489c:	0802a3c8 	.word	0x0802a3c8
 80148a0:	080238ec 	.word	0x080238ec
 80148a4:	0802a3d0 	.word	0x0802a3d0
 80148a8:	0802a3e0 	.word	0x0802a3e0
 80148ac:	080239dc 	.word	0x080239dc
 80148b0:	0802a3f4 	.word	0x0802a3f4
 80148b4:	0802a3fc 	.word	0x0802a3fc
 80148b8:	0802a40c 	.word	0x0802a40c
 80148bc:	08023a64 	.word	0x08023a64
		case 564 :
			strcpy(p->name,"BLACK DOJO");
 80148c0:	687b      	ldr	r3, [r7, #4]
 80148c2:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80148c6:	49b0      	ldr	r1, [pc, #704]	; (8014b88 <problem_fetch+0x134c4>)
 80148c8:	461a      	mov	r2, r3
 80148ca:	460b      	mov	r3, r1
 80148cc:	cb03      	ldmia	r3!, {r0, r1}
 80148ce:	6010      	str	r0, [r2, #0]
 80148d0:	6051      	str	r1, [r2, #4]
 80148d2:	8819      	ldrh	r1, [r3, #0]
 80148d4:	789b      	ldrb	r3, [r3, #2]
 80148d6:	8111      	strh	r1, [r2, #8]
 80148d8:	7293      	strb	r3, [r2, #10]
			strcpy(p->grade,"7B");
 80148da:	687b      	ldr	r3, [r7, #4]
 80148dc:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80148e0:	4aaa      	ldr	r2, [pc, #680]	; (8014b8c <problem_fetch+0x134c8>)
 80148e2:	8811      	ldrh	r1, [r2, #0]
 80148e4:	7892      	ldrb	r2, [r2, #2]
 80148e6:	8019      	strh	r1, [r3, #0]
 80148e8:	709a      	strb	r2, [r3, #2]
			p->moveSize = 6;
 80148ea:	687b      	ldr	r3, [r7, #4]
 80148ec:	2206      	movs	r2, #6
 80148ee:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,J,E,F,B,A");
 80148f0:	687b      	ldr	r3, [r7, #4]
 80148f2:	33a4      	adds	r3, #164	; 0xa4
 80148f4:	4aa6      	ldr	r2, [pc, #664]	; (8014b90 <problem_fetch+0x134cc>)
 80148f6:	461c      	mov	r4, r3
 80148f8:	4613      	mov	r3, r2
 80148fa:	cb07      	ldmia	r3!, {r0, r1, r2}
 80148fc:	6020      	str	r0, [r4, #0]
 80148fe:	6061      	str	r1, [r4, #4]
 8014900:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"6,5,16,11,10,18");
 8014902:	687b      	ldr	r3, [r7, #4]
 8014904:	3304      	adds	r3, #4
 8014906:	4aa3      	ldr	r2, [pc, #652]	; (8014b94 <problem_fetch+0x134d0>)
 8014908:	461c      	mov	r4, r3
 801490a:	4615      	mov	r5, r2
 801490c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801490e:	6020      	str	r0, [r4, #0]
 8014910:	6061      	str	r1, [r4, #4]
 8014912:	60a2      	str	r2, [r4, #8]
 8014914:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,s,d,d,d,e");
 8014916:	687b      	ldr	r3, [r7, #4]
 8014918:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 801491c:	4a9e      	ldr	r2, [pc, #632]	; (8014b98 <problem_fetch+0x134d4>)
 801491e:	461c      	mov	r4, r3
 8014920:	4613      	mov	r3, r2
 8014922:	cb07      	ldmia	r3!, {r0, r1, r2}
 8014924:	6020      	str	r0, [r4, #0]
 8014926:	6061      	str	r1, [r4, #4]
 8014928:	60a2      	str	r2, [r4, #8]
			break;
 801492a:	f007 bdfb 	b.w	801c524 <problem_fetch+0x1ae60>
		case 565 :
			strcpy(p->name,"SIMON");
 801492e:	687b      	ldr	r3, [r7, #4]
 8014930:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8014934:	4a99      	ldr	r2, [pc, #612]	; (8014b9c <problem_fetch+0x134d8>)
 8014936:	6810      	ldr	r0, [r2, #0]
 8014938:	6018      	str	r0, [r3, #0]
 801493a:	8892      	ldrh	r2, [r2, #4]
 801493c:	809a      	strh	r2, [r3, #4]
			strcpy(p->grade,"7C+");
 801493e:	687b      	ldr	r3, [r7, #4]
 8014940:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8014944:	4a96      	ldr	r2, [pc, #600]	; (8014ba0 <problem_fetch+0x134dc>)
 8014946:	6810      	ldr	r0, [r2, #0]
 8014948:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 801494a:	687b      	ldr	r3, [r7, #4]
 801494c:	2207      	movs	r2, #7
 801494e:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"B,C,I,F,B,G,A");
 8014950:	687b      	ldr	r3, [r7, #4]
 8014952:	33a4      	adds	r3, #164	; 0xa4
 8014954:	4a93      	ldr	r2, [pc, #588]	; (8014ba4 <problem_fetch+0x134e0>)
 8014956:	461c      	mov	r4, r3
 8014958:	4613      	mov	r3, r2
 801495a:	cb07      	ldmia	r3!, {r0, r1, r2}
 801495c:	6020      	str	r0, [r4, #0]
 801495e:	6061      	str	r1, [r4, #4]
 8014960:	60a2      	str	r2, [r4, #8]
 8014962:	881b      	ldrh	r3, [r3, #0]
 8014964:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"6,5,7,11,12,17,18");
 8014966:	687b      	ldr	r3, [r7, #4]
 8014968:	3304      	adds	r3, #4
 801496a:	4a8f      	ldr	r2, [pc, #572]	; (8014ba8 <problem_fetch+0x134e4>)
 801496c:	461d      	mov	r5, r3
 801496e:	4614      	mov	r4, r2
 8014970:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8014972:	6028      	str	r0, [r5, #0]
 8014974:	6069      	str	r1, [r5, #4]
 8014976:	60aa      	str	r2, [r5, #8]
 8014978:	60eb      	str	r3, [r5, #12]
 801497a:	8823      	ldrh	r3, [r4, #0]
 801497c:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,s,d,d,d,d,e");
 801497e:	687b      	ldr	r3, [r7, #4]
 8014980:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8014984:	4a89      	ldr	r2, [pc, #548]	; (8014bac <problem_fetch+0x134e8>)
 8014986:	461c      	mov	r4, r3
 8014988:	4613      	mov	r3, r2
 801498a:	cb07      	ldmia	r3!, {r0, r1, r2}
 801498c:	6020      	str	r0, [r4, #0]
 801498e:	6061      	str	r1, [r4, #4]
 8014990:	60a2      	str	r2, [r4, #8]
 8014992:	881b      	ldrh	r3, [r3, #0]
 8014994:	81a3      	strh	r3, [r4, #12]
			break;
 8014996:	f007 bdc5 	b.w	801c524 <problem_fetch+0x1ae60>
		case 566 :
			strcpy(p->name,"BLACK HOLDS MATTER");
 801499a:	687b      	ldr	r3, [r7, #4]
 801499c:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80149a0:	4a83      	ldr	r2, [pc, #524]	; (8014bb0 <problem_fetch+0x134ec>)
 80149a2:	461d      	mov	r5, r3
 80149a4:	4614      	mov	r4, r2
 80149a6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80149a8:	6028      	str	r0, [r5, #0]
 80149aa:	6069      	str	r1, [r5, #4]
 80149ac:	60aa      	str	r2, [r5, #8]
 80149ae:	60eb      	str	r3, [r5, #12]
 80149b0:	8823      	ldrh	r3, [r4, #0]
 80149b2:	78a2      	ldrb	r2, [r4, #2]
 80149b4:	822b      	strh	r3, [r5, #16]
 80149b6:	4613      	mov	r3, r2
 80149b8:	74ab      	strb	r3, [r5, #18]
			strcpy(p->grade,"6C");
 80149ba:	687b      	ldr	r3, [r7, #4]
 80149bc:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80149c0:	4a7c      	ldr	r2, [pc, #496]	; (8014bb4 <problem_fetch+0x134f0>)
 80149c2:	8811      	ldrh	r1, [r2, #0]
 80149c4:	7892      	ldrb	r2, [r2, #2]
 80149c6:	8019      	strh	r1, [r3, #0]
 80149c8:	709a      	strb	r2, [r3, #2]
			p->moveSize = 11;
 80149ca:	687b      	ldr	r3, [r7, #4]
 80149cc:	220b      	movs	r2, #11
 80149ce:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,J,J,H,H,F,J,K,G,G,I");
 80149d0:	687b      	ldr	r3, [r7, #4]
 80149d2:	33a4      	adds	r3, #164	; 0xa4
 80149d4:	4a78      	ldr	r2, [pc, #480]	; (8014bb8 <problem_fetch+0x134f4>)
 80149d6:	461d      	mov	r5, r3
 80149d8:	4614      	mov	r4, r2
 80149da:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80149dc:	6028      	str	r0, [r5, #0]
 80149de:	6069      	str	r1, [r5, #4]
 80149e0:	60aa      	str	r2, [r5, #8]
 80149e2:	60eb      	str	r3, [r5, #12]
 80149e4:	6820      	ldr	r0, [r4, #0]
 80149e6:	6128      	str	r0, [r5, #16]
 80149e8:	88a3      	ldrh	r3, [r4, #4]
 80149ea:	82ab      	strh	r3, [r5, #20]
			strcpy(p->moveNumbers,"4,5,7,8,10,11,12,14,17,15,18");
 80149ec:	687b      	ldr	r3, [r7, #4]
 80149ee:	3304      	adds	r3, #4
 80149f0:	4a72      	ldr	r2, [pc, #456]	; (8014bbc <problem_fetch+0x134f8>)
 80149f2:	461d      	mov	r5, r3
 80149f4:	4614      	mov	r4, r2
 80149f6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80149f8:	6028      	str	r0, [r5, #0]
 80149fa:	6069      	str	r1, [r5, #4]
 80149fc:	60aa      	str	r2, [r5, #8]
 80149fe:	60eb      	str	r3, [r5, #12]
 8014a00:	cc07      	ldmia	r4!, {r0, r1, r2}
 8014a02:	6128      	str	r0, [r5, #16]
 8014a04:	6169      	str	r1, [r5, #20]
 8014a06:	61aa      	str	r2, [r5, #24]
 8014a08:	7823      	ldrb	r3, [r4, #0]
 8014a0a:	772b      	strb	r3, [r5, #28]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,d,d,d,e");
 8014a0c:	687b      	ldr	r3, [r7, #4]
 8014a0e:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8014a12:	4a6b      	ldr	r2, [pc, #428]	; (8014bc0 <problem_fetch+0x134fc>)
 8014a14:	461d      	mov	r5, r3
 8014a16:	4614      	mov	r4, r2
 8014a18:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8014a1a:	6028      	str	r0, [r5, #0]
 8014a1c:	6069      	str	r1, [r5, #4]
 8014a1e:	60aa      	str	r2, [r5, #8]
 8014a20:	60eb      	str	r3, [r5, #12]
 8014a22:	6820      	ldr	r0, [r4, #0]
 8014a24:	6128      	str	r0, [r5, #16]
 8014a26:	88a3      	ldrh	r3, [r4, #4]
 8014a28:	82ab      	strh	r3, [r5, #20]
			break;
 8014a2a:	f007 bd7b 	b.w	801c524 <problem_fetch+0x1ae60>
		case 567 :
			strcpy(p->name,"SEANN'S START");
 8014a2e:	687b      	ldr	r3, [r7, #4]
 8014a30:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8014a34:	4a63      	ldr	r2, [pc, #396]	; (8014bc4 <problem_fetch+0x13500>)
 8014a36:	461c      	mov	r4, r3
 8014a38:	4613      	mov	r3, r2
 8014a3a:	cb07      	ldmia	r3!, {r0, r1, r2}
 8014a3c:	6020      	str	r0, [r4, #0]
 8014a3e:	6061      	str	r1, [r4, #4]
 8014a40:	60a2      	str	r2, [r4, #8]
 8014a42:	881b      	ldrh	r3, [r3, #0]
 8014a44:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade,"6B+");
 8014a46:	687b      	ldr	r3, [r7, #4]
 8014a48:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8014a4c:	4a5e      	ldr	r2, [pc, #376]	; (8014bc8 <problem_fetch+0x13504>)
 8014a4e:	6810      	ldr	r0, [r2, #0]
 8014a50:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 8014a52:	687b      	ldr	r3, [r7, #4]
 8014a54:	2207      	movs	r2, #7
 8014a56:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,E,C,E,E,G,D");
 8014a58:	687b      	ldr	r3, [r7, #4]
 8014a5a:	33a4      	adds	r3, #164	; 0xa4
 8014a5c:	4a5b      	ldr	r2, [pc, #364]	; (8014bcc <problem_fetch+0x13508>)
 8014a5e:	461c      	mov	r4, r3
 8014a60:	4613      	mov	r3, r2
 8014a62:	cb07      	ldmia	r3!, {r0, r1, r2}
 8014a64:	6020      	str	r0, [r4, #0]
 8014a66:	6061      	str	r1, [r4, #4]
 8014a68:	60a2      	str	r2, [r4, #8]
 8014a6a:	881b      	ldrh	r3, [r3, #0]
 8014a6c:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,8,13,12,16,9,18");
 8014a6e:	687b      	ldr	r3, [r7, #4]
 8014a70:	3304      	adds	r3, #4
 8014a72:	4a57      	ldr	r2, [pc, #348]	; (8014bd0 <problem_fetch+0x1350c>)
 8014a74:	461d      	mov	r5, r3
 8014a76:	4614      	mov	r4, r2
 8014a78:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8014a7a:	6028      	str	r0, [r5, #0]
 8014a7c:	6069      	str	r1, [r5, #4]
 8014a7e:	60aa      	str	r2, [r5, #8]
 8014a80:	60eb      	str	r3, [r5, #12]
 8014a82:	8823      	ldrh	r3, [r4, #0]
 8014a84:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 8014a86:	687b      	ldr	r3, [r7, #4]
 8014a88:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8014a8c:	4a51      	ldr	r2, [pc, #324]	; (8014bd4 <problem_fetch+0x13510>)
 8014a8e:	461c      	mov	r4, r3
 8014a90:	4613      	mov	r3, r2
 8014a92:	cb07      	ldmia	r3!, {r0, r1, r2}
 8014a94:	6020      	str	r0, [r4, #0]
 8014a96:	6061      	str	r1, [r4, #4]
 8014a98:	60a2      	str	r2, [r4, #8]
 8014a9a:	881b      	ldrh	r3, [r3, #0]
 8014a9c:	81a3      	strh	r3, [r4, #12]
			break;
 8014a9e:	f007 bd41 	b.w	801c524 <problem_fetch+0x1ae60>
		case 568 :
			strcpy(p->name,"BLACK POCKETS MATTER");
 8014aa2:	687b      	ldr	r3, [r7, #4]
 8014aa4:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8014aa8:	4a4b      	ldr	r2, [pc, #300]	; (8014bd8 <problem_fetch+0x13514>)
 8014aaa:	461d      	mov	r5, r3
 8014aac:	4614      	mov	r4, r2
 8014aae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8014ab0:	6028      	str	r0, [r5, #0]
 8014ab2:	6069      	str	r1, [r5, #4]
 8014ab4:	60aa      	str	r2, [r5, #8]
 8014ab6:	60eb      	str	r3, [r5, #12]
 8014ab8:	6820      	ldr	r0, [r4, #0]
 8014aba:	6128      	str	r0, [r5, #16]
 8014abc:	7923      	ldrb	r3, [r4, #4]
 8014abe:	752b      	strb	r3, [r5, #20]
			strcpy(p->grade,"7A+");
 8014ac0:	687b      	ldr	r3, [r7, #4]
 8014ac2:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8014ac6:	4a45      	ldr	r2, [pc, #276]	; (8014bdc <problem_fetch+0x13518>)
 8014ac8:	6810      	ldr	r0, [r2, #0]
 8014aca:	6018      	str	r0, [r3, #0]
			p->moveSize = 8;
 8014acc:	687b      	ldr	r3, [r7, #4]
 8014ace:	2208      	movs	r2, #8
 8014ad0:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"C,B,D,B,G,H,C,D");
 8014ad2:	687b      	ldr	r3, [r7, #4]
 8014ad4:	33a4      	adds	r3, #164	; 0xa4
 8014ad6:	4a42      	ldr	r2, [pc, #264]	; (8014be0 <problem_fetch+0x1351c>)
 8014ad8:	461c      	mov	r4, r3
 8014ada:	4615      	mov	r5, r2
 8014adc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8014ade:	6020      	str	r0, [r4, #0]
 8014ae0:	6061      	str	r1, [r4, #4]
 8014ae2:	60a2      	str	r2, [r4, #8]
 8014ae4:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,6,7,10,10,13,16,18");
 8014ae6:	687b      	ldr	r3, [r7, #4]
 8014ae8:	3304      	adds	r3, #4
 8014aea:	4a3e      	ldr	r2, [pc, #248]	; (8014be4 <problem_fetch+0x13520>)
 8014aec:	461d      	mov	r5, r3
 8014aee:	4614      	mov	r4, r2
 8014af0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8014af2:	6028      	str	r0, [r5, #0]
 8014af4:	6069      	str	r1, [r5, #4]
 8014af6:	60aa      	str	r2, [r5, #8]
 8014af8:	60eb      	str	r3, [r5, #12]
 8014afa:	6820      	ldr	r0, [r4, #0]
 8014afc:	6128      	str	r0, [r5, #16]
 8014afe:	7923      	ldrb	r3, [r4, #4]
 8014b00:	752b      	strb	r3, [r5, #20]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,e");
 8014b02:	687b      	ldr	r3, [r7, #4]
 8014b04:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8014b08:	4a37      	ldr	r2, [pc, #220]	; (8014be8 <problem_fetch+0x13524>)
 8014b0a:	461c      	mov	r4, r3
 8014b0c:	4615      	mov	r5, r2
 8014b0e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8014b10:	6020      	str	r0, [r4, #0]
 8014b12:	6061      	str	r1, [r4, #4]
 8014b14:	60a2      	str	r2, [r4, #8]
 8014b16:	60e3      	str	r3, [r4, #12]
			break;
 8014b18:	f007 bd04 	b.w	801c524 <problem_fetch+0x1ae60>
		case 569 :
			strcpy(p->name,"CAD");
 8014b1c:	687b      	ldr	r3, [r7, #4]
 8014b1e:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8014b22:	4a32      	ldr	r2, [pc, #200]	; (8014bec <problem_fetch+0x13528>)
 8014b24:	6810      	ldr	r0, [r2, #0]
 8014b26:	6018      	str	r0, [r3, #0]
			strcpy(p->grade,"7A");
 8014b28:	687b      	ldr	r3, [r7, #4]
 8014b2a:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8014b2e:	4a30      	ldr	r2, [pc, #192]	; (8014bf0 <problem_fetch+0x1352c>)
 8014b30:	8811      	ldrh	r1, [r2, #0]
 8014b32:	7892      	ldrb	r2, [r2, #2]
 8014b34:	8019      	strh	r1, [r3, #0]
 8014b36:	709a      	strb	r2, [r3, #2]
			p->moveSize = 8;
 8014b38:	687b      	ldr	r3, [r7, #4]
 8014b3a:	2208      	movs	r2, #8
 8014b3c:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,H,K,J,H,E,G,D");
 8014b3e:	687b      	ldr	r3, [r7, #4]
 8014b40:	33a4      	adds	r3, #164	; 0xa4
 8014b42:	4a2c      	ldr	r2, [pc, #176]	; (8014bf4 <problem_fetch+0x13530>)
 8014b44:	461c      	mov	r4, r3
 8014b46:	4615      	mov	r5, r2
 8014b48:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8014b4a:	6020      	str	r0, [r4, #0]
 8014b4c:	6061      	str	r1, [r4, #4]
 8014b4e:	60a2      	str	r2, [r4, #8]
 8014b50:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,5,9,12,12,14,17,18");
 8014b52:	687b      	ldr	r3, [r7, #4]
 8014b54:	3304      	adds	r3, #4
 8014b56:	4a28      	ldr	r2, [pc, #160]	; (8014bf8 <problem_fetch+0x13534>)
 8014b58:	461d      	mov	r5, r3
 8014b5a:	4614      	mov	r4, r2
 8014b5c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8014b5e:	6028      	str	r0, [r5, #0]
 8014b60:	6069      	str	r1, [r5, #4]
 8014b62:	60aa      	str	r2, [r5, #8]
 8014b64:	60eb      	str	r3, [r5, #12]
 8014b66:	6820      	ldr	r0, [r4, #0]
 8014b68:	6128      	str	r0, [r5, #16]
 8014b6a:	7923      	ldrb	r3, [r4, #4]
 8014b6c:	752b      	strb	r3, [r5, #20]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,e");
 8014b6e:	687b      	ldr	r3, [r7, #4]
 8014b70:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8014b74:	4a1c      	ldr	r2, [pc, #112]	; (8014be8 <problem_fetch+0x13524>)
 8014b76:	461c      	mov	r4, r3
 8014b78:	4615      	mov	r5, r2
 8014b7a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8014b7c:	6020      	str	r0, [r4, #0]
 8014b7e:	6061      	str	r1, [r4, #4]
 8014b80:	60a2      	str	r2, [r4, #8]
 8014b82:	60e3      	str	r3, [r4, #12]
			break;
 8014b84:	f007 bcce 	b.w	801c524 <problem_fetch+0x1ae60>
 8014b88:	0802a424 	.word	0x0802a424
 8014b8c:	08023f4c 	.word	0x08023f4c
 8014b90:	0802a430 	.word	0x0802a430
 8014b94:	0802a43c 	.word	0x0802a43c
 8014b98:	08023834 	.word	0x08023834
 8014b9c:	0802a44c 	.word	0x0802a44c
 8014ba0:	08023e60 	.word	0x08023e60
 8014ba4:	0802a454 	.word	0x0802a454
 8014ba8:	0802a464 	.word	0x0802a464
 8014bac:	080238cc 	.word	0x080238cc
 8014bb0:	0802a478 	.word	0x0802a478
 8014bb4:	08023920 	.word	0x08023920
 8014bb8:	0802a48c 	.word	0x0802a48c
 8014bbc:	0802a4a4 	.word	0x0802a4a4
 8014bc0:	080271b4 	.word	0x080271b4
 8014bc4:	0802a4c4 	.word	0x0802a4c4
 8014bc8:	08023854 	.word	0x08023854
 8014bcc:	0802a4d4 	.word	0x0802a4d4
 8014bd0:	0802a4e4 	.word	0x0802a4e4
 8014bd4:	080239dc 	.word	0x080239dc
 8014bd8:	0802a4f8 	.word	0x0802a4f8
 8014bdc:	080239f4 	.word	0x080239f4
 8014be0:	0802a510 	.word	0x0802a510
 8014be4:	0802a520 	.word	0x0802a520
 8014be8:	08023978 	.word	0x08023978
 8014bec:	0802a538 	.word	0x0802a538
 8014bf0:	08023814 	.word	0x08023814
 8014bf4:	0802a53c 	.word	0x0802a53c
 8014bf8:	0802a54c 	.word	0x0802a54c
		case 570 :
			strcpy(p->name,"CAD");
 8014bfc:	687b      	ldr	r3, [r7, #4]
 8014bfe:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8014c02:	4aa8      	ldr	r2, [pc, #672]	; (8014ea4 <problem_fetch+0x137e0>)
 8014c04:	6810      	ldr	r0, [r2, #0]
 8014c06:	6018      	str	r0, [r3, #0]
			strcpy(p->grade,"7A");
 8014c08:	687b      	ldr	r3, [r7, #4]
 8014c0a:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8014c0e:	4aa6      	ldr	r2, [pc, #664]	; (8014ea8 <problem_fetch+0x137e4>)
 8014c10:	8811      	ldrh	r1, [r2, #0]
 8014c12:	7892      	ldrb	r2, [r2, #2]
 8014c14:	8019      	strh	r1, [r3, #0]
 8014c16:	709a      	strb	r2, [r3, #2]
			p->moveSize = 8;
 8014c18:	687b      	ldr	r3, [r7, #4]
 8014c1a:	2208      	movs	r2, #8
 8014c1c:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,H,K,J,H,E,G,D");
 8014c1e:	687b      	ldr	r3, [r7, #4]
 8014c20:	33a4      	adds	r3, #164	; 0xa4
 8014c22:	4aa2      	ldr	r2, [pc, #648]	; (8014eac <problem_fetch+0x137e8>)
 8014c24:	461c      	mov	r4, r3
 8014c26:	4615      	mov	r5, r2
 8014c28:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8014c2a:	6020      	str	r0, [r4, #0]
 8014c2c:	6061      	str	r1, [r4, #4]
 8014c2e:	60a2      	str	r2, [r4, #8]
 8014c30:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,5,9,12,12,14,17,18");
 8014c32:	687b      	ldr	r3, [r7, #4]
 8014c34:	3304      	adds	r3, #4
 8014c36:	4a9e      	ldr	r2, [pc, #632]	; (8014eb0 <problem_fetch+0x137ec>)
 8014c38:	461d      	mov	r5, r3
 8014c3a:	4614      	mov	r4, r2
 8014c3c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8014c3e:	6028      	str	r0, [r5, #0]
 8014c40:	6069      	str	r1, [r5, #4]
 8014c42:	60aa      	str	r2, [r5, #8]
 8014c44:	60eb      	str	r3, [r5, #12]
 8014c46:	6820      	ldr	r0, [r4, #0]
 8014c48:	6128      	str	r0, [r5, #16]
 8014c4a:	7923      	ldrb	r3, [r4, #4]
 8014c4c:	752b      	strb	r3, [r5, #20]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,e");
 8014c4e:	687b      	ldr	r3, [r7, #4]
 8014c50:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8014c54:	4a97      	ldr	r2, [pc, #604]	; (8014eb4 <problem_fetch+0x137f0>)
 8014c56:	461c      	mov	r4, r3
 8014c58:	4615      	mov	r5, r2
 8014c5a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8014c5c:	6020      	str	r0, [r4, #0]
 8014c5e:	6061      	str	r1, [r4, #4]
 8014c60:	60a2      	str	r2, [r4, #8]
 8014c62:	60e3      	str	r3, [r4, #12]
			break;
 8014c64:	f007 bc5e 	b.w	801c524 <problem_fetch+0x1ae60>
		case 571 :
			strcpy(p->name,"TIGHT BOX");
 8014c68:	687b      	ldr	r3, [r7, #4]
 8014c6a:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8014c6e:	4992      	ldr	r1, [pc, #584]	; (8014eb8 <problem_fetch+0x137f4>)
 8014c70:	461a      	mov	r2, r3
 8014c72:	460b      	mov	r3, r1
 8014c74:	cb03      	ldmia	r3!, {r0, r1}
 8014c76:	6010      	str	r0, [r2, #0]
 8014c78:	6051      	str	r1, [r2, #4]
 8014c7a:	881b      	ldrh	r3, [r3, #0]
 8014c7c:	8113      	strh	r3, [r2, #8]
			strcpy(p->grade,"6C+");
 8014c7e:	687b      	ldr	r3, [r7, #4]
 8014c80:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8014c84:	4a8d      	ldr	r2, [pc, #564]	; (8014ebc <problem_fetch+0x137f8>)
 8014c86:	6810      	ldr	r0, [r2, #0]
 8014c88:	6018      	str	r0, [r3, #0]
			p->moveSize = 8;
 8014c8a:	687b      	ldr	r3, [r7, #4]
 8014c8c:	2208      	movs	r2, #8
 8014c8e:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"C,B,D,A,D,E,G,D");
 8014c90:	687b      	ldr	r3, [r7, #4]
 8014c92:	33a4      	adds	r3, #164	; 0xa4
 8014c94:	4a8a      	ldr	r2, [pc, #552]	; (8014ec0 <problem_fetch+0x137fc>)
 8014c96:	461c      	mov	r4, r3
 8014c98:	4615      	mov	r5, r2
 8014c9a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8014c9c:	6020      	str	r0, [r4, #0]
 8014c9e:	6061      	str	r1, [r4, #4]
 8014ca0:	60a2      	str	r2, [r4, #8]
 8014ca2:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,6,7,9,11,12,17,18");
 8014ca4:	687b      	ldr	r3, [r7, #4]
 8014ca6:	3304      	adds	r3, #4
 8014ca8:	4a86      	ldr	r2, [pc, #536]	; (8014ec4 <problem_fetch+0x13800>)
 8014caa:	461d      	mov	r5, r3
 8014cac:	4614      	mov	r4, r2
 8014cae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8014cb0:	6028      	str	r0, [r5, #0]
 8014cb2:	6069      	str	r1, [r5, #4]
 8014cb4:	60aa      	str	r2, [r5, #8]
 8014cb6:	60eb      	str	r3, [r5, #12]
 8014cb8:	6820      	ldr	r0, [r4, #0]
 8014cba:	6128      	str	r0, [r5, #16]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,e");
 8014cbc:	687b      	ldr	r3, [r7, #4]
 8014cbe:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8014cc2:	4a7c      	ldr	r2, [pc, #496]	; (8014eb4 <problem_fetch+0x137f0>)
 8014cc4:	461c      	mov	r4, r3
 8014cc6:	4615      	mov	r5, r2
 8014cc8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8014cca:	6020      	str	r0, [r4, #0]
 8014ccc:	6061      	str	r1, [r4, #4]
 8014cce:	60a2      	str	r2, [r4, #8]
 8014cd0:	60e3      	str	r3, [r4, #12]
			break;
 8014cd2:	f007 bc27 	b.w	801c524 <problem_fetch+0x1ae60>
		case 572 :
			strcpy(p->name,"TIGER");
 8014cd6:	687b      	ldr	r3, [r7, #4]
 8014cd8:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8014cdc:	4a7a      	ldr	r2, [pc, #488]	; (8014ec8 <problem_fetch+0x13804>)
 8014cde:	6810      	ldr	r0, [r2, #0]
 8014ce0:	6018      	str	r0, [r3, #0]
 8014ce2:	8892      	ldrh	r2, [r2, #4]
 8014ce4:	809a      	strh	r2, [r3, #4]
			strcpy(p->grade,"6C+");
 8014ce6:	687b      	ldr	r3, [r7, #4]
 8014ce8:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8014cec:	4a73      	ldr	r2, [pc, #460]	; (8014ebc <problem_fetch+0x137f8>)
 8014cee:	6810      	ldr	r0, [r2, #0]
 8014cf0:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 8014cf2:	687b      	ldr	r3, [r7, #4]
 8014cf4:	2207      	movs	r2, #7
 8014cf6:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"B,D,G,H,C,C,A");
 8014cf8:	687b      	ldr	r3, [r7, #4]
 8014cfa:	33a4      	adds	r3, #164	; 0xa4
 8014cfc:	4a73      	ldr	r2, [pc, #460]	; (8014ecc <problem_fetch+0x13808>)
 8014cfe:	461c      	mov	r4, r3
 8014d00:	4613      	mov	r3, r2
 8014d02:	cb07      	ldmia	r3!, {r0, r1, r2}
 8014d04:	6020      	str	r0, [r4, #0]
 8014d06:	6061      	str	r1, [r4, #4]
 8014d08:	60a2      	str	r2, [r4, #8]
 8014d0a:	881b      	ldrh	r3, [r3, #0]
 8014d0c:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"6,7,10,13,16,13,18");
 8014d0e:	687b      	ldr	r3, [r7, #4]
 8014d10:	3304      	adds	r3, #4
 8014d12:	4a6f      	ldr	r2, [pc, #444]	; (8014ed0 <problem_fetch+0x1380c>)
 8014d14:	461d      	mov	r5, r3
 8014d16:	4614      	mov	r4, r2
 8014d18:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8014d1a:	6028      	str	r0, [r5, #0]
 8014d1c:	6069      	str	r1, [r5, #4]
 8014d1e:	60aa      	str	r2, [r5, #8]
 8014d20:	60eb      	str	r3, [r5, #12]
 8014d22:	8823      	ldrh	r3, [r4, #0]
 8014d24:	78a2      	ldrb	r2, [r4, #2]
 8014d26:	822b      	strh	r3, [r5, #16]
 8014d28:	4613      	mov	r3, r2
 8014d2a:	74ab      	strb	r3, [r5, #18]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 8014d2c:	687b      	ldr	r3, [r7, #4]
 8014d2e:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8014d32:	4a68      	ldr	r2, [pc, #416]	; (8014ed4 <problem_fetch+0x13810>)
 8014d34:	461c      	mov	r4, r3
 8014d36:	4613      	mov	r3, r2
 8014d38:	cb07      	ldmia	r3!, {r0, r1, r2}
 8014d3a:	6020      	str	r0, [r4, #0]
 8014d3c:	6061      	str	r1, [r4, #4]
 8014d3e:	60a2      	str	r2, [r4, #8]
 8014d40:	881b      	ldrh	r3, [r3, #0]
 8014d42:	81a3      	strh	r3, [r4, #12]
			break;
 8014d44:	f007 bbee 	b.w	801c524 <problem_fetch+0x1ae60>
		case 573 :
			strcpy(p->name,"V1.");
 8014d48:	687b      	ldr	r3, [r7, #4]
 8014d4a:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8014d4e:	4a62      	ldr	r2, [pc, #392]	; (8014ed8 <problem_fetch+0x13814>)
 8014d50:	6810      	ldr	r0, [r2, #0]
 8014d52:	6018      	str	r0, [r3, #0]
			strcpy(p->grade,"6B+");
 8014d54:	687b      	ldr	r3, [r7, #4]
 8014d56:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8014d5a:	4a60      	ldr	r2, [pc, #384]	; (8014edc <problem_fetch+0x13818>)
 8014d5c:	6810      	ldr	r0, [r2, #0]
 8014d5e:	6018      	str	r0, [r3, #0]
			p->moveSize = 9;
 8014d60:	687b      	ldr	r3, [r7, #4]
 8014d62:	2209      	movs	r2, #9
 8014d64:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"E,H,C,G,C,E,A,C,A");
 8014d66:	687b      	ldr	r3, [r7, #4]
 8014d68:	33a4      	adds	r3, #164	; 0xa4
 8014d6a:	4a5d      	ldr	r2, [pc, #372]	; (8014ee0 <problem_fetch+0x1381c>)
 8014d6c:	461d      	mov	r5, r3
 8014d6e:	4614      	mov	r4, r2
 8014d70:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8014d72:	6028      	str	r0, [r5, #0]
 8014d74:	6069      	str	r1, [r5, #4]
 8014d76:	60aa      	str	r2, [r5, #8]
 8014d78:	60eb      	str	r3, [r5, #12]
 8014d7a:	8823      	ldrh	r3, [r4, #0]
 8014d7c:	822b      	strh	r3, [r5, #16]
			strcpy(p->moveNumbers,"6,5,8,10,13,14,14,16,18");
 8014d7e:	687b      	ldr	r3, [r7, #4]
 8014d80:	3304      	adds	r3, #4
 8014d82:	4a58      	ldr	r2, [pc, #352]	; (8014ee4 <problem_fetch+0x13820>)
 8014d84:	461d      	mov	r5, r3
 8014d86:	4614      	mov	r4, r2
 8014d88:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8014d8a:	6028      	str	r0, [r5, #0]
 8014d8c:	6069      	str	r1, [r5, #4]
 8014d8e:	60aa      	str	r2, [r5, #8]
 8014d90:	60eb      	str	r3, [r5, #12]
 8014d92:	cc03      	ldmia	r4!, {r0, r1}
 8014d94:	6128      	str	r0, [r5, #16]
 8014d96:	6169      	str	r1, [r5, #20]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,d,e");
 8014d98:	687b      	ldr	r3, [r7, #4]
 8014d9a:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8014d9e:	4a52      	ldr	r2, [pc, #328]	; (8014ee8 <problem_fetch+0x13824>)
 8014da0:	461d      	mov	r5, r3
 8014da2:	4614      	mov	r4, r2
 8014da4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8014da6:	6028      	str	r0, [r5, #0]
 8014da8:	6069      	str	r1, [r5, #4]
 8014daa:	60aa      	str	r2, [r5, #8]
 8014dac:	60eb      	str	r3, [r5, #12]
 8014dae:	8823      	ldrh	r3, [r4, #0]
 8014db0:	822b      	strh	r3, [r5, #16]
			break;
 8014db2:	f007 bbb7 	b.w	801c524 <problem_fetch+0x1ae60>
		case 574 :
			strcpy(p->name,"FOUL LANGUAGE");
 8014db6:	687b      	ldr	r3, [r7, #4]
 8014db8:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8014dbc:	4a4b      	ldr	r2, [pc, #300]	; (8014eec <problem_fetch+0x13828>)
 8014dbe:	461c      	mov	r4, r3
 8014dc0:	4613      	mov	r3, r2
 8014dc2:	cb07      	ldmia	r3!, {r0, r1, r2}
 8014dc4:	6020      	str	r0, [r4, #0]
 8014dc6:	6061      	str	r1, [r4, #4]
 8014dc8:	60a2      	str	r2, [r4, #8]
 8014dca:	881b      	ldrh	r3, [r3, #0]
 8014dcc:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade,"6C+");
 8014dce:	687b      	ldr	r3, [r7, #4]
 8014dd0:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8014dd4:	4a39      	ldr	r2, [pc, #228]	; (8014ebc <problem_fetch+0x137f8>)
 8014dd6:	6810      	ldr	r0, [r2, #0]
 8014dd8:	6018      	str	r0, [r3, #0]
			p->moveSize = 9;
 8014dda:	687b      	ldr	r3, [r7, #4]
 8014ddc:	2209      	movs	r2, #9
 8014dde:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,H,K,H,K,G,G,B,D");
 8014de0:	687b      	ldr	r3, [r7, #4]
 8014de2:	33a4      	adds	r3, #164	; 0xa4
 8014de4:	4a42      	ldr	r2, [pc, #264]	; (8014ef0 <problem_fetch+0x1382c>)
 8014de6:	461d      	mov	r5, r3
 8014de8:	4614      	mov	r4, r2
 8014dea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8014dec:	6028      	str	r0, [r5, #0]
 8014dee:	6069      	str	r1, [r5, #4]
 8014df0:	60aa      	str	r2, [r5, #8]
 8014df2:	60eb      	str	r3, [r5, #12]
 8014df4:	8823      	ldrh	r3, [r4, #0]
 8014df6:	822b      	strh	r3, [r5, #16]
			strcpy(p->moveNumbers,"4,5,9,12,14,14,17,12,18");
 8014df8:	687b      	ldr	r3, [r7, #4]
 8014dfa:	3304      	adds	r3, #4
 8014dfc:	4a3d      	ldr	r2, [pc, #244]	; (8014ef4 <problem_fetch+0x13830>)
 8014dfe:	461d      	mov	r5, r3
 8014e00:	4614      	mov	r4, r2
 8014e02:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8014e04:	6028      	str	r0, [r5, #0]
 8014e06:	6069      	str	r1, [r5, #4]
 8014e08:	60aa      	str	r2, [r5, #8]
 8014e0a:	60eb      	str	r3, [r5, #12]
 8014e0c:	cc03      	ldmia	r4!, {r0, r1}
 8014e0e:	6128      	str	r0, [r5, #16]
 8014e10:	6169      	str	r1, [r5, #20]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,d,e");
 8014e12:	687b      	ldr	r3, [r7, #4]
 8014e14:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8014e18:	4a33      	ldr	r2, [pc, #204]	; (8014ee8 <problem_fetch+0x13824>)
 8014e1a:	461d      	mov	r5, r3
 8014e1c:	4614      	mov	r4, r2
 8014e1e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8014e20:	6028      	str	r0, [r5, #0]
 8014e22:	6069      	str	r1, [r5, #4]
 8014e24:	60aa      	str	r2, [r5, #8]
 8014e26:	60eb      	str	r3, [r5, #12]
 8014e28:	8823      	ldrh	r3, [r4, #0]
 8014e2a:	822b      	strh	r3, [r5, #16]
			break;
 8014e2c:	f007 bb7a 	b.w	801c524 <problem_fetch+0x1ae60>
		case 575 :
			strcpy(p->name,"BLACK HAWK DOWN");
 8014e30:	687b      	ldr	r3, [r7, #4]
 8014e32:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8014e36:	4a30      	ldr	r2, [pc, #192]	; (8014ef8 <problem_fetch+0x13834>)
 8014e38:	461c      	mov	r4, r3
 8014e3a:	4615      	mov	r5, r2
 8014e3c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8014e3e:	6020      	str	r0, [r4, #0]
 8014e40:	6061      	str	r1, [r4, #4]
 8014e42:	60a2      	str	r2, [r4, #8]
 8014e44:	60e3      	str	r3, [r4, #12]
			strcpy(p->grade,"6C+");
 8014e46:	687b      	ldr	r3, [r7, #4]
 8014e48:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8014e4c:	4a1b      	ldr	r2, [pc, #108]	; (8014ebc <problem_fetch+0x137f8>)
 8014e4e:	6810      	ldr	r0, [r2, #0]
 8014e50:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 8014e52:	687b      	ldr	r3, [r7, #4]
 8014e54:	2207      	movs	r2, #7
 8014e56:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,H,D,G,D,E,D");
 8014e58:	687b      	ldr	r3, [r7, #4]
 8014e5a:	33a4      	adds	r3, #164	; 0xa4
 8014e5c:	4a27      	ldr	r2, [pc, #156]	; (8014efc <problem_fetch+0x13838>)
 8014e5e:	461c      	mov	r4, r3
 8014e60:	4613      	mov	r3, r2
 8014e62:	cb07      	ldmia	r3!, {r0, r1, r2}
 8014e64:	6020      	str	r0, [r4, #0]
 8014e66:	6061      	str	r1, [r4, #4]
 8014e68:	60a2      	str	r2, [r4, #8]
 8014e6a:	881b      	ldrh	r3, [r3, #0]
 8014e6c:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,8,15,9,11,14,18");
 8014e6e:	687b      	ldr	r3, [r7, #4]
 8014e70:	3304      	adds	r3, #4
 8014e72:	4a23      	ldr	r2, [pc, #140]	; (8014f00 <problem_fetch+0x1383c>)
 8014e74:	461d      	mov	r5, r3
 8014e76:	4614      	mov	r4, r2
 8014e78:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8014e7a:	6028      	str	r0, [r5, #0]
 8014e7c:	6069      	str	r1, [r5, #4]
 8014e7e:	60aa      	str	r2, [r5, #8]
 8014e80:	60eb      	str	r3, [r5, #12]
 8014e82:	8823      	ldrh	r3, [r4, #0]
 8014e84:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 8014e86:	687b      	ldr	r3, [r7, #4]
 8014e88:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8014e8c:	4a11      	ldr	r2, [pc, #68]	; (8014ed4 <problem_fetch+0x13810>)
 8014e8e:	461c      	mov	r4, r3
 8014e90:	4613      	mov	r3, r2
 8014e92:	cb07      	ldmia	r3!, {r0, r1, r2}
 8014e94:	6020      	str	r0, [r4, #0]
 8014e96:	6061      	str	r1, [r4, #4]
 8014e98:	60a2      	str	r2, [r4, #8]
 8014e9a:	881b      	ldrh	r3, [r3, #0]
 8014e9c:	81a3      	strh	r3, [r4, #12]
			break;
 8014e9e:	f007 bb41 	b.w	801c524 <problem_fetch+0x1ae60>
 8014ea2:	bf00      	nop
 8014ea4:	0802a538 	.word	0x0802a538
 8014ea8:	08023814 	.word	0x08023814
 8014eac:	0802a53c 	.word	0x0802a53c
 8014eb0:	0802a54c 	.word	0x0802a54c
 8014eb4:	08023978 	.word	0x08023978
 8014eb8:	0802a564 	.word	0x0802a564
 8014ebc:	080238ec 	.word	0x080238ec
 8014ec0:	0802a570 	.word	0x0802a570
 8014ec4:	0802a580 	.word	0x0802a580
 8014ec8:	0802a594 	.word	0x0802a594
 8014ecc:	0802a59c 	.word	0x0802a59c
 8014ed0:	0802a5ac 	.word	0x0802a5ac
 8014ed4:	080239dc 	.word	0x080239dc
 8014ed8:	0802a5c0 	.word	0x0802a5c0
 8014edc:	08023854 	.word	0x08023854
 8014ee0:	0802a5c4 	.word	0x0802a5c4
 8014ee4:	0802a5d8 	.word	0x0802a5d8
 8014ee8:	08024838 	.word	0x08024838
 8014eec:	0802a5f0 	.word	0x0802a5f0
 8014ef0:	0802a600 	.word	0x0802a600
 8014ef4:	0802a614 	.word	0x0802a614
 8014ef8:	0802a62c 	.word	0x0802a62c
 8014efc:	0802a63c 	.word	0x0802a63c
 8014f00:	0802a64c 	.word	0x0802a64c
		case 576 :
			strcpy(p->name,"2 BLACK 2 HARD");
 8014f04:	687b      	ldr	r3, [r7, #4]
 8014f06:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8014f0a:	4aae      	ldr	r2, [pc, #696]	; (80151c4 <problem_fetch+0x13b00>)
 8014f0c:	461c      	mov	r4, r3
 8014f0e:	4613      	mov	r3, r2
 8014f10:	cb07      	ldmia	r3!, {r0, r1, r2}
 8014f12:	6020      	str	r0, [r4, #0]
 8014f14:	6061      	str	r1, [r4, #4]
 8014f16:	60a2      	str	r2, [r4, #8]
 8014f18:	881a      	ldrh	r2, [r3, #0]
 8014f1a:	789b      	ldrb	r3, [r3, #2]
 8014f1c:	81a2      	strh	r2, [r4, #12]
 8014f1e:	73a3      	strb	r3, [r4, #14]
			strcpy(p->grade,"8A+");
 8014f20:	687b      	ldr	r3, [r7, #4]
 8014f22:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8014f26:	4aa8      	ldr	r2, [pc, #672]	; (80151c8 <problem_fetch+0x13b04>)
 8014f28:	6810      	ldr	r0, [r2, #0]
 8014f2a:	6018      	str	r0, [r3, #0]
			p->moveSize = 5;
 8014f2c:	687b      	ldr	r3, [r7, #4]
 8014f2e:	2205      	movs	r2, #5
 8014f30:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,H,E,D,A");
 8014f32:	687b      	ldr	r3, [r7, #4]
 8014f34:	33a4      	adds	r3, #164	; 0xa4
 8014f36:	49a5      	ldr	r1, [pc, #660]	; (80151cc <problem_fetch+0x13b08>)
 8014f38:	461a      	mov	r2, r3
 8014f3a:	460b      	mov	r3, r1
 8014f3c:	cb03      	ldmia	r3!, {r0, r1}
 8014f3e:	6010      	str	r0, [r2, #0]
 8014f40:	6051      	str	r1, [r2, #4]
 8014f42:	881b      	ldrh	r3, [r3, #0]
 8014f44:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"5,5,9,15,18");
 8014f46:	687b      	ldr	r3, [r7, #4]
 8014f48:	3304      	adds	r3, #4
 8014f4a:	4aa1      	ldr	r2, [pc, #644]	; (80151d0 <problem_fetch+0x13b0c>)
 8014f4c:	461c      	mov	r4, r3
 8014f4e:	4613      	mov	r3, r2
 8014f50:	cb07      	ldmia	r3!, {r0, r1, r2}
 8014f52:	6020      	str	r0, [r4, #0]
 8014f54:	6061      	str	r1, [r4, #4]
 8014f56:	60a2      	str	r2, [r4, #8]
			strcpy(p->startFinish,"s,s,d,d,e");
 8014f58:	687b      	ldr	r3, [r7, #4]
 8014f5a:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8014f5e:	499d      	ldr	r1, [pc, #628]	; (80151d4 <problem_fetch+0x13b10>)
 8014f60:	461a      	mov	r2, r3
 8014f62:	460b      	mov	r3, r1
 8014f64:	cb03      	ldmia	r3!, {r0, r1}
 8014f66:	6010      	str	r0, [r2, #0]
 8014f68:	6051      	str	r1, [r2, #4]
 8014f6a:	881b      	ldrh	r3, [r3, #0]
 8014f6c:	8113      	strh	r3, [r2, #8]
			break;
 8014f6e:	f007 bad9 	b.w	801c524 <problem_fetch+0x1ae60>
		case 577 :
			strcpy(p->name,"カラス");
 8014f72:	687b      	ldr	r3, [r7, #4]
 8014f74:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8014f78:	4997      	ldr	r1, [pc, #604]	; (80151d8 <problem_fetch+0x13b14>)
 8014f7a:	461a      	mov	r2, r3
 8014f7c:	460b      	mov	r3, r1
 8014f7e:	cb03      	ldmia	r3!, {r0, r1}
 8014f80:	6010      	str	r0, [r2, #0]
 8014f82:	6051      	str	r1, [r2, #4]
 8014f84:	881b      	ldrh	r3, [r3, #0]
 8014f86:	8113      	strh	r3, [r2, #8]
			strcpy(p->grade,"7A");
 8014f88:	687b      	ldr	r3, [r7, #4]
 8014f8a:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8014f8e:	4a93      	ldr	r2, [pc, #588]	; (80151dc <problem_fetch+0x13b18>)
 8014f90:	8811      	ldrh	r1, [r2, #0]
 8014f92:	7892      	ldrb	r2, [r2, #2]
 8014f94:	8019      	strh	r1, [r3, #0]
 8014f96:	709a      	strb	r2, [r3, #2]
			p->moveSize = 7;
 8014f98:	687b      	ldr	r3, [r7, #4]
 8014f9a:	2207      	movs	r2, #7
 8014f9c:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"H,J,K,H,I,E,D");
 8014f9e:	687b      	ldr	r3, [r7, #4]
 8014fa0:	33a4      	adds	r3, #164	; 0xa4
 8014fa2:	4a8f      	ldr	r2, [pc, #572]	; (80151e0 <problem_fetch+0x13b1c>)
 8014fa4:	461c      	mov	r4, r3
 8014fa6:	4613      	mov	r3, r2
 8014fa8:	cb07      	ldmia	r3!, {r0, r1, r2}
 8014faa:	6020      	str	r0, [r4, #0]
 8014fac:	6061      	str	r1, [r4, #4]
 8014fae:	60a2      	str	r2, [r4, #8]
 8014fb0:	881b      	ldrh	r3, [r3, #0]
 8014fb2:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,7,9,12,14,16,18");
 8014fb4:	687b      	ldr	r3, [r7, #4]
 8014fb6:	3304      	adds	r3, #4
 8014fb8:	4a8a      	ldr	r2, [pc, #552]	; (80151e4 <problem_fetch+0x13b20>)
 8014fba:	461d      	mov	r5, r3
 8014fbc:	4614      	mov	r4, r2
 8014fbe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8014fc0:	6028      	str	r0, [r5, #0]
 8014fc2:	6069      	str	r1, [r5, #4]
 8014fc4:	60aa      	str	r2, [r5, #8]
 8014fc6:	60eb      	str	r3, [r5, #12]
 8014fc8:	8823      	ldrh	r3, [r4, #0]
 8014fca:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 8014fcc:	687b      	ldr	r3, [r7, #4]
 8014fce:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8014fd2:	4a85      	ldr	r2, [pc, #532]	; (80151e8 <problem_fetch+0x13b24>)
 8014fd4:	461c      	mov	r4, r3
 8014fd6:	4613      	mov	r3, r2
 8014fd8:	cb07      	ldmia	r3!, {r0, r1, r2}
 8014fda:	6020      	str	r0, [r4, #0]
 8014fdc:	6061      	str	r1, [r4, #4]
 8014fde:	60a2      	str	r2, [r4, #8]
 8014fe0:	881b      	ldrh	r3, [r3, #0]
 8014fe2:	81a3      	strh	r3, [r4, #12]
			break;
 8014fe4:	f007 ba9e 	b.w	801c524 <problem_fetch+0x1ae60>
		case 578 :
			strcpy(p->name,"TOMTOM");
 8014fe8:	687b      	ldr	r3, [r7, #4]
 8014fea:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8014fee:	4a7f      	ldr	r2, [pc, #508]	; (80151ec <problem_fetch+0x13b28>)
 8014ff0:	6810      	ldr	r0, [r2, #0]
 8014ff2:	6018      	str	r0, [r3, #0]
 8014ff4:	8891      	ldrh	r1, [r2, #4]
 8014ff6:	7992      	ldrb	r2, [r2, #6]
 8014ff8:	8099      	strh	r1, [r3, #4]
 8014ffa:	719a      	strb	r2, [r3, #6]
			strcpy(p->grade,"6C+");
 8014ffc:	687b      	ldr	r3, [r7, #4]
 8014ffe:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8015002:	4a7b      	ldr	r2, [pc, #492]	; (80151f0 <problem_fetch+0x13b2c>)
 8015004:	6810      	ldr	r0, [r2, #0]
 8015006:	6018      	str	r0, [r3, #0]
			p->moveSize = 5;
 8015008:	687b      	ldr	r3, [r7, #4]
 801500a:	2205      	movs	r2, #5
 801500c:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,H,C,D,A");
 801500e:	687b      	ldr	r3, [r7, #4]
 8015010:	33a4      	adds	r3, #164	; 0xa4
 8015012:	4978      	ldr	r1, [pc, #480]	; (80151f4 <problem_fetch+0x13b30>)
 8015014:	461a      	mov	r2, r3
 8015016:	460b      	mov	r3, r1
 8015018:	cb03      	ldmia	r3!, {r0, r1}
 801501a:	6010      	str	r0, [r2, #0]
 801501c:	6051      	str	r1, [r2, #4]
 801501e:	881b      	ldrh	r3, [r3, #0]
 8015020:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"5,10,13,15,18");
 8015022:	687b      	ldr	r3, [r7, #4]
 8015024:	3304      	adds	r3, #4
 8015026:	4a74      	ldr	r2, [pc, #464]	; (80151f8 <problem_fetch+0x13b34>)
 8015028:	461c      	mov	r4, r3
 801502a:	4613      	mov	r3, r2
 801502c:	cb07      	ldmia	r3!, {r0, r1, r2}
 801502e:	6020      	str	r0, [r4, #0]
 8015030:	6061      	str	r1, [r4, #4]
 8015032:	60a2      	str	r2, [r4, #8]
 8015034:	881b      	ldrh	r3, [r3, #0]
 8015036:	81a3      	strh	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,e");
 8015038:	687b      	ldr	r3, [r7, #4]
 801503a:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 801503e:	496f      	ldr	r1, [pc, #444]	; (80151fc <problem_fetch+0x13b38>)
 8015040:	461a      	mov	r2, r3
 8015042:	460b      	mov	r3, r1
 8015044:	cb03      	ldmia	r3!, {r0, r1}
 8015046:	6010      	str	r0, [r2, #0]
 8015048:	6051      	str	r1, [r2, #4]
 801504a:	881b      	ldrh	r3, [r3, #0]
 801504c:	8113      	strh	r3, [r2, #8]
			break;
 801504e:	f007 ba69 	b.w	801c524 <problem_fetch+0x1ae60>
		case 579 :
			strcpy(p->name,"THE GREAT HAMBINO");
 8015052:	687b      	ldr	r3, [r7, #4]
 8015054:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8015058:	4a69      	ldr	r2, [pc, #420]	; (8015200 <problem_fetch+0x13b3c>)
 801505a:	461d      	mov	r5, r3
 801505c:	4614      	mov	r4, r2
 801505e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8015060:	6028      	str	r0, [r5, #0]
 8015062:	6069      	str	r1, [r5, #4]
 8015064:	60aa      	str	r2, [r5, #8]
 8015066:	60eb      	str	r3, [r5, #12]
 8015068:	8823      	ldrh	r3, [r4, #0]
 801506a:	822b      	strh	r3, [r5, #16]
			strcpy(p->grade,"6B+");
 801506c:	687b      	ldr	r3, [r7, #4]
 801506e:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8015072:	4a64      	ldr	r2, [pc, #400]	; (8015204 <problem_fetch+0x13b40>)
 8015074:	6810      	ldr	r0, [r2, #0]
 8015076:	6018      	str	r0, [r3, #0]
			p->moveSize = 9;
 8015078:	687b      	ldr	r3, [r7, #4]
 801507a:	2209      	movs	r2, #9
 801507c:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,E,H,C,F,E,G,G,I");
 801507e:	687b      	ldr	r3, [r7, #4]
 8015080:	33a4      	adds	r3, #164	; 0xa4
 8015082:	4a61      	ldr	r2, [pc, #388]	; (8015208 <problem_fetch+0x13b44>)
 8015084:	461d      	mov	r5, r3
 8015086:	4614      	mov	r4, r2
 8015088:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801508a:	6028      	str	r0, [r5, #0]
 801508c:	6069      	str	r1, [r5, #4]
 801508e:	60aa      	str	r2, [r5, #8]
 8015090:	60eb      	str	r3, [r5, #12]
 8015092:	8823      	ldrh	r3, [r4, #0]
 8015094:	822b      	strh	r3, [r5, #16]
			strcpy(p->moveNumbers,"4,6,8,8,11,12,14,15,18");
 8015096:	687b      	ldr	r3, [r7, #4]
 8015098:	3304      	adds	r3, #4
 801509a:	4a5c      	ldr	r2, [pc, #368]	; (801520c <problem_fetch+0x13b48>)
 801509c:	461c      	mov	r4, r3
 801509e:	4615      	mov	r5, r2
 80150a0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80150a2:	6020      	str	r0, [r4, #0]
 80150a4:	6061      	str	r1, [r4, #4]
 80150a6:	60a2      	str	r2, [r4, #8]
 80150a8:	60e3      	str	r3, [r4, #12]
 80150aa:	6828      	ldr	r0, [r5, #0]
 80150ac:	6120      	str	r0, [r4, #16]
 80150ae:	88ab      	ldrh	r3, [r5, #4]
 80150b0:	79aa      	ldrb	r2, [r5, #6]
 80150b2:	82a3      	strh	r3, [r4, #20]
 80150b4:	4613      	mov	r3, r2
 80150b6:	75a3      	strb	r3, [r4, #22]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,d,e");
 80150b8:	687b      	ldr	r3, [r7, #4]
 80150ba:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 80150be:	4a54      	ldr	r2, [pc, #336]	; (8015210 <problem_fetch+0x13b4c>)
 80150c0:	461d      	mov	r5, r3
 80150c2:	4614      	mov	r4, r2
 80150c4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80150c6:	6028      	str	r0, [r5, #0]
 80150c8:	6069      	str	r1, [r5, #4]
 80150ca:	60aa      	str	r2, [r5, #8]
 80150cc:	60eb      	str	r3, [r5, #12]
 80150ce:	8823      	ldrh	r3, [r4, #0]
 80150d0:	822b      	strh	r3, [r5, #16]
			break;
 80150d2:	f007 ba27 	b.w	801c524 <problem_fetch+0x1ae60>
		case 580 :
			strcpy(p->name,"OUT THERE");
 80150d6:	687b      	ldr	r3, [r7, #4]
 80150d8:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80150dc:	494d      	ldr	r1, [pc, #308]	; (8015214 <problem_fetch+0x13b50>)
 80150de:	461a      	mov	r2, r3
 80150e0:	460b      	mov	r3, r1
 80150e2:	cb03      	ldmia	r3!, {r0, r1}
 80150e4:	6010      	str	r0, [r2, #0]
 80150e6:	6051      	str	r1, [r2, #4]
 80150e8:	881b      	ldrh	r3, [r3, #0]
 80150ea:	8113      	strh	r3, [r2, #8]
			strcpy(p->grade,"6B+");
 80150ec:	687b      	ldr	r3, [r7, #4]
 80150ee:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80150f2:	4a44      	ldr	r2, [pc, #272]	; (8015204 <problem_fetch+0x13b40>)
 80150f4:	6810      	ldr	r0, [r2, #0]
 80150f6:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 80150f8:	687b      	ldr	r3, [r7, #4]
 80150fa:	2207      	movs	r2, #7
 80150fc:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,G,H,C,D,B,D");
 80150fe:	687b      	ldr	r3, [r7, #4]
 8015100:	33a4      	adds	r3, #164	; 0xa4
 8015102:	4a45      	ldr	r2, [pc, #276]	; (8015218 <problem_fetch+0x13b54>)
 8015104:	461c      	mov	r4, r3
 8015106:	4613      	mov	r3, r2
 8015108:	cb07      	ldmia	r3!, {r0, r1, r2}
 801510a:	6020      	str	r0, [r4, #0]
 801510c:	6061      	str	r1, [r4, #4]
 801510e:	60a2      	str	r2, [r4, #8]
 8015110:	881b      	ldrh	r3, [r3, #0]
 8015112:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,6,10,13,15,15,18");
 8015114:	687b      	ldr	r3, [r7, #4]
 8015116:	3304      	adds	r3, #4
 8015118:	4a40      	ldr	r2, [pc, #256]	; (801521c <problem_fetch+0x13b58>)
 801511a:	461d      	mov	r5, r3
 801511c:	4614      	mov	r4, r2
 801511e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8015120:	6028      	str	r0, [r5, #0]
 8015122:	6069      	str	r1, [r5, #4]
 8015124:	60aa      	str	r2, [r5, #8]
 8015126:	60eb      	str	r3, [r5, #12]
 8015128:	8823      	ldrh	r3, [r4, #0]
 801512a:	78a2      	ldrb	r2, [r4, #2]
 801512c:	822b      	strh	r3, [r5, #16]
 801512e:	4613      	mov	r3, r2
 8015130:	74ab      	strb	r3, [r5, #18]
			strcpy(p->startFinish,"s,s,d,d,d,d,e");
 8015132:	687b      	ldr	r3, [r7, #4]
 8015134:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8015138:	4a39      	ldr	r2, [pc, #228]	; (8015220 <problem_fetch+0x13b5c>)
 801513a:	461c      	mov	r4, r3
 801513c:	4613      	mov	r3, r2
 801513e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8015140:	6020      	str	r0, [r4, #0]
 8015142:	6061      	str	r1, [r4, #4]
 8015144:	60a2      	str	r2, [r4, #8]
 8015146:	881b      	ldrh	r3, [r3, #0]
 8015148:	81a3      	strh	r3, [r4, #12]
			break;
 801514a:	f007 b9eb 	b.w	801c524 <problem_fetch+0x1ae60>
		case 581 :
			strcpy(p->name,"OPPOSITES");
 801514e:	687b      	ldr	r3, [r7, #4]
 8015150:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8015154:	4933      	ldr	r1, [pc, #204]	; (8015224 <problem_fetch+0x13b60>)
 8015156:	461a      	mov	r2, r3
 8015158:	460b      	mov	r3, r1
 801515a:	cb03      	ldmia	r3!, {r0, r1}
 801515c:	6010      	str	r0, [r2, #0]
 801515e:	6051      	str	r1, [r2, #4]
 8015160:	881b      	ldrh	r3, [r3, #0]
 8015162:	8113      	strh	r3, [r2, #8]
			strcpy(p->grade,"7B");
 8015164:	687b      	ldr	r3, [r7, #4]
 8015166:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801516a:	4a2f      	ldr	r2, [pc, #188]	; (8015228 <problem_fetch+0x13b64>)
 801516c:	8811      	ldrh	r1, [r2, #0]
 801516e:	7892      	ldrb	r2, [r2, #2]
 8015170:	8019      	strh	r1, [r3, #0]
 8015172:	709a      	strb	r2, [r3, #2]
			p->moveSize = 7;
 8015174:	687b      	ldr	r3, [r7, #4]
 8015176:	2207      	movs	r2, #7
 8015178:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,G,H,J,F,G,D");
 801517a:	687b      	ldr	r3, [r7, #4]
 801517c:	33a4      	adds	r3, #164	; 0xa4
 801517e:	4a2b      	ldr	r2, [pc, #172]	; (801522c <problem_fetch+0x13b68>)
 8015180:	461c      	mov	r4, r3
 8015182:	4613      	mov	r3, r2
 8015184:	cb07      	ldmia	r3!, {r0, r1, r2}
 8015186:	6020      	str	r0, [r4, #0]
 8015188:	6061      	str	r1, [r4, #4]
 801518a:	60a2      	str	r2, [r4, #8]
 801518c:	881b      	ldrh	r3, [r3, #0]
 801518e:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,9,8,12,13,15,18");
 8015190:	687b      	ldr	r3, [r7, #4]
 8015192:	3304      	adds	r3, #4
 8015194:	4a26      	ldr	r2, [pc, #152]	; (8015230 <problem_fetch+0x13b6c>)
 8015196:	461d      	mov	r5, r3
 8015198:	4614      	mov	r4, r2
 801519a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801519c:	6028      	str	r0, [r5, #0]
 801519e:	6069      	str	r1, [r5, #4]
 80151a0:	60aa      	str	r2, [r5, #8]
 80151a2:	60eb      	str	r3, [r5, #12]
 80151a4:	8823      	ldrh	r3, [r4, #0]
 80151a6:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 80151a8:	687b      	ldr	r3, [r7, #4]
 80151aa:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 80151ae:	4a0e      	ldr	r2, [pc, #56]	; (80151e8 <problem_fetch+0x13b24>)
 80151b0:	461c      	mov	r4, r3
 80151b2:	4613      	mov	r3, r2
 80151b4:	cb07      	ldmia	r3!, {r0, r1, r2}
 80151b6:	6020      	str	r0, [r4, #0]
 80151b8:	6061      	str	r1, [r4, #4]
 80151ba:	60a2      	str	r2, [r4, #8]
 80151bc:	881b      	ldrh	r3, [r3, #0]
 80151be:	81a3      	strh	r3, [r4, #12]
			break;
 80151c0:	f007 b9b0 	b.w	801c524 <problem_fetch+0x1ae60>
 80151c4:	0802a660 	.word	0x0802a660
 80151c8:	0802a670 	.word	0x0802a670
 80151cc:	0802a674 	.word	0x0802a674
 80151d0:	0802a680 	.word	0x0802a680
 80151d4:	08023f34 	.word	0x08023f34
 80151d8:	0802a68c 	.word	0x0802a68c
 80151dc:	08023814 	.word	0x08023814
 80151e0:	0802a698 	.word	0x0802a698
 80151e4:	0802a6a8 	.word	0x0802a6a8
 80151e8:	080239dc 	.word	0x080239dc
 80151ec:	0802a6bc 	.word	0x0802a6bc
 80151f0:	080238ec 	.word	0x080238ec
 80151f4:	0802a6c4 	.word	0x0802a6c4
 80151f8:	0802a6d0 	.word	0x0802a6d0
 80151fc:	08023d20 	.word	0x08023d20
 8015200:	0802a6e0 	.word	0x0802a6e0
 8015204:	08023854 	.word	0x08023854
 8015208:	0802a6f4 	.word	0x0802a6f4
 801520c:	0802a708 	.word	0x0802a708
 8015210:	08024838 	.word	0x08024838
 8015214:	0802a720 	.word	0x0802a720
 8015218:	0802a72c 	.word	0x0802a72c
 801521c:	0802a73c 	.word	0x0802a73c
 8015220:	080238cc 	.word	0x080238cc
 8015224:	0802a750 	.word	0x0802a750
 8015228:	08023f4c 	.word	0x08023f4c
 801522c:	0802a75c 	.word	0x0802a75c
 8015230:	0802a76c 	.word	0x0802a76c
		case 582 :
			strcpy(p->name,"BISCUITS RETURNS");
 8015234:	687b      	ldr	r3, [r7, #4]
 8015236:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801523a:	4ac1      	ldr	r2, [pc, #772]	; (8015540 <problem_fetch+0x13e7c>)
 801523c:	461d      	mov	r5, r3
 801523e:	4614      	mov	r4, r2
 8015240:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8015242:	6028      	str	r0, [r5, #0]
 8015244:	6069      	str	r1, [r5, #4]
 8015246:	60aa      	str	r2, [r5, #8]
 8015248:	60eb      	str	r3, [r5, #12]
 801524a:	7823      	ldrb	r3, [r4, #0]
 801524c:	742b      	strb	r3, [r5, #16]
			strcpy(p->grade,"6B+");
 801524e:	687b      	ldr	r3, [r7, #4]
 8015250:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8015254:	4abb      	ldr	r2, [pc, #748]	; (8015544 <problem_fetch+0x13e80>)
 8015256:	6810      	ldr	r0, [r2, #0]
 8015258:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 801525a:	687b      	ldr	r3, [r7, #4]
 801525c:	2206      	movs	r2, #6
 801525e:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,G,H,C,D,D");
 8015260:	687b      	ldr	r3, [r7, #4]
 8015262:	33a4      	adds	r3, #164	; 0xa4
 8015264:	4ab8      	ldr	r2, [pc, #736]	; (8015548 <problem_fetch+0x13e84>)
 8015266:	461c      	mov	r4, r3
 8015268:	4613      	mov	r3, r2
 801526a:	cb07      	ldmia	r3!, {r0, r1, r2}
 801526c:	6020      	str	r0, [r4, #0]
 801526e:	6061      	str	r1, [r4, #4]
 8015270:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,6,10,13,15,18");
 8015272:	687b      	ldr	r3, [r7, #4]
 8015274:	3304      	adds	r3, #4
 8015276:	4ab5      	ldr	r2, [pc, #724]	; (801554c <problem_fetch+0x13e88>)
 8015278:	461c      	mov	r4, r3
 801527a:	4615      	mov	r5, r2
 801527c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801527e:	6020      	str	r0, [r4, #0]
 8015280:	6061      	str	r1, [r4, #4]
 8015282:	60a2      	str	r2, [r4, #8]
 8015284:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,s,d,d,d,e");
 8015286:	687b      	ldr	r3, [r7, #4]
 8015288:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 801528c:	4ab0      	ldr	r2, [pc, #704]	; (8015550 <problem_fetch+0x13e8c>)
 801528e:	461c      	mov	r4, r3
 8015290:	4613      	mov	r3, r2
 8015292:	cb07      	ldmia	r3!, {r0, r1, r2}
 8015294:	6020      	str	r0, [r4, #0]
 8015296:	6061      	str	r1, [r4, #4]
 8015298:	60a2      	str	r2, [r4, #8]
			break;
 801529a:	f007 b943 	b.w	801c524 <problem_fetch+0x1ae60>
		case 583 :
			strcpy(p->name,"STREETS OF GOLD");
 801529e:	687b      	ldr	r3, [r7, #4]
 80152a0:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80152a4:	4aab      	ldr	r2, [pc, #684]	; (8015554 <problem_fetch+0x13e90>)
 80152a6:	461c      	mov	r4, r3
 80152a8:	4615      	mov	r5, r2
 80152aa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80152ac:	6020      	str	r0, [r4, #0]
 80152ae:	6061      	str	r1, [r4, #4]
 80152b0:	60a2      	str	r2, [r4, #8]
 80152b2:	60e3      	str	r3, [r4, #12]
			strcpy(p->grade,"7B+");
 80152b4:	687b      	ldr	r3, [r7, #4]
 80152b6:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80152ba:	4aa7      	ldr	r2, [pc, #668]	; (8015558 <problem_fetch+0x13e94>)
 80152bc:	6810      	ldr	r0, [r2, #0]
 80152be:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 80152c0:	687b      	ldr	r3, [r7, #4]
 80152c2:	2206      	movs	r2, #6
 80152c4:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"H,C,K,F,B,A");
 80152c6:	687b      	ldr	r3, [r7, #4]
 80152c8:	33a4      	adds	r3, #164	; 0xa4
 80152ca:	4aa4      	ldr	r2, [pc, #656]	; (801555c <problem_fetch+0x13e98>)
 80152cc:	461c      	mov	r4, r3
 80152ce:	4613      	mov	r3, r2
 80152d0:	cb07      	ldmia	r3!, {r0, r1, r2}
 80152d2:	6020      	str	r0, [r4, #0]
 80152d4:	6061      	str	r1, [r4, #4]
 80152d6:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,16,9,11,15,18");
 80152d8:	687b      	ldr	r3, [r7, #4]
 80152da:	3304      	adds	r3, #4
 80152dc:	4aa0      	ldr	r2, [pc, #640]	; (8015560 <problem_fetch+0x13e9c>)
 80152de:	461c      	mov	r4, r3
 80152e0:	4615      	mov	r5, r2
 80152e2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80152e4:	6020      	str	r0, [r4, #0]
 80152e6:	6061      	str	r1, [r4, #4]
 80152e8:	60a2      	str	r2, [r4, #8]
 80152ea:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 80152ec:	687b      	ldr	r3, [r7, #4]
 80152ee:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 80152f2:	4a9c      	ldr	r2, [pc, #624]	; (8015564 <problem_fetch+0x13ea0>)
 80152f4:	461c      	mov	r4, r3
 80152f6:	4613      	mov	r3, r2
 80152f8:	cb07      	ldmia	r3!, {r0, r1, r2}
 80152fa:	6020      	str	r0, [r4, #0]
 80152fc:	6061      	str	r1, [r4, #4]
 80152fe:	60a2      	str	r2, [r4, #8]
			break;
 8015300:	f007 b910 	b.w	801c524 <problem_fetch+0x1ae60>
		case 584 :
			strcpy(p->name,"BLACK TIGER");
 8015304:	687b      	ldr	r3, [r7, #4]
 8015306:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801530a:	4a97      	ldr	r2, [pc, #604]	; (8015568 <problem_fetch+0x13ea4>)
 801530c:	461c      	mov	r4, r3
 801530e:	4613      	mov	r3, r2
 8015310:	cb07      	ldmia	r3!, {r0, r1, r2}
 8015312:	6020      	str	r0, [r4, #0]
 8015314:	6061      	str	r1, [r4, #4]
 8015316:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade,"6C+");
 8015318:	687b      	ldr	r3, [r7, #4]
 801531a:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801531e:	4a93      	ldr	r2, [pc, #588]	; (801556c <problem_fetch+0x13ea8>)
 8015320:	6810      	ldr	r0, [r2, #0]
 8015322:	6018      	str	r0, [r3, #0]
			p->moveSize = 5;
 8015324:	687b      	ldr	r3, [r7, #4]
 8015326:	2205      	movs	r2, #5
 8015328:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"H,K,H,K,I");
 801532a:	687b      	ldr	r3, [r7, #4]
 801532c:	33a4      	adds	r3, #164	; 0xa4
 801532e:	4990      	ldr	r1, [pc, #576]	; (8015570 <problem_fetch+0x13eac>)
 8015330:	461a      	mov	r2, r3
 8015332:	460b      	mov	r3, r1
 8015334:	cb03      	ldmia	r3!, {r0, r1}
 8015336:	6010      	str	r0, [r2, #0]
 8015338:	6051      	str	r1, [r2, #4]
 801533a:	881b      	ldrh	r3, [r3, #0]
 801533c:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"5,9,12,14,18");
 801533e:	687b      	ldr	r3, [r7, #4]
 8015340:	3304      	adds	r3, #4
 8015342:	4a8c      	ldr	r2, [pc, #560]	; (8015574 <problem_fetch+0x13eb0>)
 8015344:	461c      	mov	r4, r3
 8015346:	4613      	mov	r3, r2
 8015348:	cb07      	ldmia	r3!, {r0, r1, r2}
 801534a:	6020      	str	r0, [r4, #0]
 801534c:	6061      	str	r1, [r4, #4]
 801534e:	60a2      	str	r2, [r4, #8]
 8015350:	781b      	ldrb	r3, [r3, #0]
 8015352:	7323      	strb	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,e");
 8015354:	687b      	ldr	r3, [r7, #4]
 8015356:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 801535a:	4987      	ldr	r1, [pc, #540]	; (8015578 <problem_fetch+0x13eb4>)
 801535c:	461a      	mov	r2, r3
 801535e:	460b      	mov	r3, r1
 8015360:	cb03      	ldmia	r3!, {r0, r1}
 8015362:	6010      	str	r0, [r2, #0]
 8015364:	6051      	str	r1, [r2, #4]
 8015366:	881b      	ldrh	r3, [r3, #0]
 8015368:	8113      	strh	r3, [r2, #8]
			break;
 801536a:	f007 b8db 	b.w	801c524 <problem_fetch+0x1ae60>
		case 585 :
			strcpy(p->name,"THE REAL ONE");
 801536e:	687b      	ldr	r3, [r7, #4]
 8015370:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8015374:	4a81      	ldr	r2, [pc, #516]	; (801557c <problem_fetch+0x13eb8>)
 8015376:	461c      	mov	r4, r3
 8015378:	4613      	mov	r3, r2
 801537a:	cb07      	ldmia	r3!, {r0, r1, r2}
 801537c:	6020      	str	r0, [r4, #0]
 801537e:	6061      	str	r1, [r4, #4]
 8015380:	60a2      	str	r2, [r4, #8]
 8015382:	781b      	ldrb	r3, [r3, #0]
 8015384:	7323      	strb	r3, [r4, #12]
			strcpy(p->grade,"6B+");
 8015386:	687b      	ldr	r3, [r7, #4]
 8015388:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801538c:	4a6d      	ldr	r2, [pc, #436]	; (8015544 <problem_fetch+0x13e80>)
 801538e:	6810      	ldr	r0, [r2, #0]
 8015390:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 8015392:	687b      	ldr	r3, [r7, #4]
 8015394:	2207      	movs	r2, #7
 8015396:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,E,E,C,E,E,I");
 8015398:	687b      	ldr	r3, [r7, #4]
 801539a:	33a4      	adds	r3, #164	; 0xa4
 801539c:	4a78      	ldr	r2, [pc, #480]	; (8015580 <problem_fetch+0x13ebc>)
 801539e:	461c      	mov	r4, r3
 80153a0:	4613      	mov	r3, r2
 80153a2:	cb07      	ldmia	r3!, {r0, r1, r2}
 80153a4:	6020      	str	r0, [r4, #0]
 80153a6:	6061      	str	r1, [r4, #4]
 80153a8:	60a2      	str	r2, [r4, #8]
 80153aa:	881b      	ldrh	r3, [r3, #0]
 80153ac:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,8,9,13,14,16,18");
 80153ae:	687b      	ldr	r3, [r7, #4]
 80153b0:	3304      	adds	r3, #4
 80153b2:	4a74      	ldr	r2, [pc, #464]	; (8015584 <problem_fetch+0x13ec0>)
 80153b4:	461d      	mov	r5, r3
 80153b6:	4614      	mov	r4, r2
 80153b8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80153ba:	6028      	str	r0, [r5, #0]
 80153bc:	6069      	str	r1, [r5, #4]
 80153be:	60aa      	str	r2, [r5, #8]
 80153c0:	60eb      	str	r3, [r5, #12]
 80153c2:	8823      	ldrh	r3, [r4, #0]
 80153c4:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 80153c6:	687b      	ldr	r3, [r7, #4]
 80153c8:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 80153cc:	4a6e      	ldr	r2, [pc, #440]	; (8015588 <problem_fetch+0x13ec4>)
 80153ce:	461c      	mov	r4, r3
 80153d0:	4613      	mov	r3, r2
 80153d2:	cb07      	ldmia	r3!, {r0, r1, r2}
 80153d4:	6020      	str	r0, [r4, #0]
 80153d6:	6061      	str	r1, [r4, #4]
 80153d8:	60a2      	str	r2, [r4, #8]
 80153da:	881b      	ldrh	r3, [r3, #0]
 80153dc:	81a3      	strh	r3, [r4, #12]
			break;
 80153de:	f007 b8a1 	b.w	801c524 <problem_fetch+0x1ae60>
		case 586 :
			strcpy(p->name,"PURPLE IN THE OPEN");
 80153e2:	687b      	ldr	r3, [r7, #4]
 80153e4:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80153e8:	4a68      	ldr	r2, [pc, #416]	; (801558c <problem_fetch+0x13ec8>)
 80153ea:	461d      	mov	r5, r3
 80153ec:	4614      	mov	r4, r2
 80153ee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80153f0:	6028      	str	r0, [r5, #0]
 80153f2:	6069      	str	r1, [r5, #4]
 80153f4:	60aa      	str	r2, [r5, #8]
 80153f6:	60eb      	str	r3, [r5, #12]
 80153f8:	8823      	ldrh	r3, [r4, #0]
 80153fa:	78a2      	ldrb	r2, [r4, #2]
 80153fc:	822b      	strh	r3, [r5, #16]
 80153fe:	4613      	mov	r3, r2
 8015400:	74ab      	strb	r3, [r5, #18]
			strcpy(p->grade,"7B");
 8015402:	687b      	ldr	r3, [r7, #4]
 8015404:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8015408:	4a61      	ldr	r2, [pc, #388]	; (8015590 <problem_fetch+0x13ecc>)
 801540a:	8811      	ldrh	r1, [r2, #0]
 801540c:	7892      	ldrb	r2, [r2, #2]
 801540e:	8019      	strh	r1, [r3, #0]
 8015410:	709a      	strb	r2, [r3, #2]
			p->moveSize = 7;
 8015412:	687b      	ldr	r3, [r7, #4]
 8015414:	2207      	movs	r2, #7
 8015416:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"E,C,E,D,I,H,I");
 8015418:	687b      	ldr	r3, [r7, #4]
 801541a:	33a4      	adds	r3, #164	; 0xa4
 801541c:	4a5d      	ldr	r2, [pc, #372]	; (8015594 <problem_fetch+0x13ed0>)
 801541e:	461c      	mov	r4, r3
 8015420:	4613      	mov	r3, r2
 8015422:	cb07      	ldmia	r3!, {r0, r1, r2}
 8015424:	6020      	str	r0, [r4, #0]
 8015426:	6061      	str	r1, [r4, #4]
 8015428:	60a2      	str	r2, [r4, #8]
 801542a:	881b      	ldrh	r3, [r3, #0]
 801542c:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"6,8,12,11,14,16,18");
 801542e:	687b      	ldr	r3, [r7, #4]
 8015430:	3304      	adds	r3, #4
 8015432:	4a59      	ldr	r2, [pc, #356]	; (8015598 <problem_fetch+0x13ed4>)
 8015434:	461d      	mov	r5, r3
 8015436:	4614      	mov	r4, r2
 8015438:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801543a:	6028      	str	r0, [r5, #0]
 801543c:	6069      	str	r1, [r5, #4]
 801543e:	60aa      	str	r2, [r5, #8]
 8015440:	60eb      	str	r3, [r5, #12]
 8015442:	8823      	ldrh	r3, [r4, #0]
 8015444:	78a2      	ldrb	r2, [r4, #2]
 8015446:	822b      	strh	r3, [r5, #16]
 8015448:	4613      	mov	r3, r2
 801544a:	74ab      	strb	r3, [r5, #18]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 801544c:	687b      	ldr	r3, [r7, #4]
 801544e:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8015452:	4a4d      	ldr	r2, [pc, #308]	; (8015588 <problem_fetch+0x13ec4>)
 8015454:	461c      	mov	r4, r3
 8015456:	4613      	mov	r3, r2
 8015458:	cb07      	ldmia	r3!, {r0, r1, r2}
 801545a:	6020      	str	r0, [r4, #0]
 801545c:	6061      	str	r1, [r4, #4]
 801545e:	60a2      	str	r2, [r4, #8]
 8015460:	881b      	ldrh	r3, [r3, #0]
 8015462:	81a3      	strh	r3, [r4, #12]
			break;
 8015464:	f007 b85e 	b.w	801c524 <problem_fetch+0x1ae60>
		case 587 :
			strcpy(p->name,"BOUJEE");
 8015468:	687b      	ldr	r3, [r7, #4]
 801546a:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801546e:	4a4b      	ldr	r2, [pc, #300]	; (801559c <problem_fetch+0x13ed8>)
 8015470:	6810      	ldr	r0, [r2, #0]
 8015472:	6018      	str	r0, [r3, #0]
 8015474:	8891      	ldrh	r1, [r2, #4]
 8015476:	7992      	ldrb	r2, [r2, #6]
 8015478:	8099      	strh	r1, [r3, #4]
 801547a:	719a      	strb	r2, [r3, #6]
			strcpy(p->grade,"7A+");
 801547c:	687b      	ldr	r3, [r7, #4]
 801547e:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8015482:	4a47      	ldr	r2, [pc, #284]	; (80155a0 <problem_fetch+0x13edc>)
 8015484:	6810      	ldr	r0, [r2, #0]
 8015486:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 8015488:	687b      	ldr	r3, [r7, #4]
 801548a:	2206      	movs	r2, #6
 801548c:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,C,D,H,C,D");
 801548e:	687b      	ldr	r3, [r7, #4]
 8015490:	33a4      	adds	r3, #164	; 0xa4
 8015492:	4a44      	ldr	r2, [pc, #272]	; (80155a4 <problem_fetch+0x13ee0>)
 8015494:	461c      	mov	r4, r3
 8015496:	4613      	mov	r3, r2
 8015498:	cb07      	ldmia	r3!, {r0, r1, r2}
 801549a:	6020      	str	r0, [r4, #0]
 801549c:	6061      	str	r1, [r4, #4]
 801549e:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,13,15,10,8,18");
 80154a0:	687b      	ldr	r3, [r7, #4]
 80154a2:	3304      	adds	r3, #4
 80154a4:	4a40      	ldr	r2, [pc, #256]	; (80155a8 <problem_fetch+0x13ee4>)
 80154a6:	461c      	mov	r4, r3
 80154a8:	4615      	mov	r5, r2
 80154aa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80154ac:	6020      	str	r0, [r4, #0]
 80154ae:	6061      	str	r1, [r4, #4]
 80154b0:	60a2      	str	r2, [r4, #8]
 80154b2:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 80154b4:	687b      	ldr	r3, [r7, #4]
 80154b6:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 80154ba:	4a2a      	ldr	r2, [pc, #168]	; (8015564 <problem_fetch+0x13ea0>)
 80154bc:	461c      	mov	r4, r3
 80154be:	4613      	mov	r3, r2
 80154c0:	cb07      	ldmia	r3!, {r0, r1, r2}
 80154c2:	6020      	str	r0, [r4, #0]
 80154c4:	6061      	str	r1, [r4, #4]
 80154c6:	60a2      	str	r2, [r4, #8]
			break;
 80154c8:	f007 b82c 	b.w	801c524 <problem_fetch+0x1ae60>
		case 588 :
			strcpy(p->name,"CAPTAIN AUBREY");
 80154cc:	687b      	ldr	r3, [r7, #4]
 80154ce:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80154d2:	4a36      	ldr	r2, [pc, #216]	; (80155ac <problem_fetch+0x13ee8>)
 80154d4:	461c      	mov	r4, r3
 80154d6:	4613      	mov	r3, r2
 80154d8:	cb07      	ldmia	r3!, {r0, r1, r2}
 80154da:	6020      	str	r0, [r4, #0]
 80154dc:	6061      	str	r1, [r4, #4]
 80154de:	60a2      	str	r2, [r4, #8]
 80154e0:	881a      	ldrh	r2, [r3, #0]
 80154e2:	789b      	ldrb	r3, [r3, #2]
 80154e4:	81a2      	strh	r2, [r4, #12]
 80154e6:	73a3      	strb	r3, [r4, #14]
			strcpy(p->grade,"7A+");
 80154e8:	687b      	ldr	r3, [r7, #4]
 80154ea:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80154ee:	4a2c      	ldr	r2, [pc, #176]	; (80155a0 <problem_fetch+0x13edc>)
 80154f0:	6810      	ldr	r0, [r2, #0]
 80154f2:	6018      	str	r0, [r3, #0]
			p->moveSize = 5;
 80154f4:	687b      	ldr	r3, [r7, #4]
 80154f6:	2205      	movs	r2, #5
 80154f8:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,H,F,I,I");
 80154fa:	687b      	ldr	r3, [r7, #4]
 80154fc:	33a4      	adds	r3, #164	; 0xa4
 80154fe:	492c      	ldr	r1, [pc, #176]	; (80155b0 <problem_fetch+0x13eec>)
 8015500:	461a      	mov	r2, r3
 8015502:	460b      	mov	r3, r1
 8015504:	cb03      	ldmia	r3!, {r0, r1}
 8015506:	6010      	str	r0, [r2, #0]
 8015508:	6051      	str	r1, [r2, #4]
 801550a:	881b      	ldrh	r3, [r3, #0]
 801550c:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"5,8,11,14,18");
 801550e:	687b      	ldr	r3, [r7, #4]
 8015510:	3304      	adds	r3, #4
 8015512:	4a28      	ldr	r2, [pc, #160]	; (80155b4 <problem_fetch+0x13ef0>)
 8015514:	461c      	mov	r4, r3
 8015516:	4613      	mov	r3, r2
 8015518:	cb07      	ldmia	r3!, {r0, r1, r2}
 801551a:	6020      	str	r0, [r4, #0]
 801551c:	6061      	str	r1, [r4, #4]
 801551e:	60a2      	str	r2, [r4, #8]
 8015520:	781b      	ldrb	r3, [r3, #0]
 8015522:	7323      	strb	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,e");
 8015524:	687b      	ldr	r3, [r7, #4]
 8015526:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 801552a:	4913      	ldr	r1, [pc, #76]	; (8015578 <problem_fetch+0x13eb4>)
 801552c:	461a      	mov	r2, r3
 801552e:	460b      	mov	r3, r1
 8015530:	cb03      	ldmia	r3!, {r0, r1}
 8015532:	6010      	str	r0, [r2, #0]
 8015534:	6051      	str	r1, [r2, #4]
 8015536:	881b      	ldrh	r3, [r3, #0]
 8015538:	8113      	strh	r3, [r2, #8]
			break;
 801553a:	f006 bff3 	b.w	801c524 <problem_fetch+0x1ae60>
 801553e:	bf00      	nop
 8015540:	0802a780 	.word	0x0802a780
 8015544:	08023854 	.word	0x08023854
 8015548:	0802a794 	.word	0x0802a794
 801554c:	08028240 	.word	0x08028240
 8015550:	08023834 	.word	0x08023834
 8015554:	0802a7a0 	.word	0x0802a7a0
 8015558:	08023990 	.word	0x08023990
 801555c:	0802a7b0 	.word	0x0802a7b0
 8015560:	0802a7bc 	.word	0x0802a7bc
 8015564:	08023bf0 	.word	0x08023bf0
 8015568:	0802a7cc 	.word	0x0802a7cc
 801556c:	080238ec 	.word	0x080238ec
 8015570:	0802a7d8 	.word	0x0802a7d8
 8015574:	08023e70 	.word	0x08023e70
 8015578:	08023d20 	.word	0x08023d20
 801557c:	0802a7e4 	.word	0x0802a7e4
 8015580:	0802a7f4 	.word	0x0802a7f4
 8015584:	0802a804 	.word	0x0802a804
 8015588:	080239dc 	.word	0x080239dc
 801558c:	0802a818 	.word	0x0802a818
 8015590:	08023f4c 	.word	0x08023f4c
 8015594:	0802a82c 	.word	0x0802a82c
 8015598:	0802a83c 	.word	0x0802a83c
 801559c:	0802a850 	.word	0x0802a850
 80155a0:	080239f4 	.word	0x080239f4
 80155a4:	0802a858 	.word	0x0802a858
 80155a8:	0802a864 	.word	0x0802a864
 80155ac:	0802a874 	.word	0x0802a874
 80155b0:	0802a884 	.word	0x0802a884
 80155b4:	08026fe0 	.word	0x08026fe0
		case 589 :
			strcpy(p->name,"LONDON FROG");
 80155b8:	687b      	ldr	r3, [r7, #4]
 80155ba:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80155be:	4aa8      	ldr	r2, [pc, #672]	; (8015860 <problem_fetch+0x1419c>)
 80155c0:	461c      	mov	r4, r3
 80155c2:	4613      	mov	r3, r2
 80155c4:	cb07      	ldmia	r3!, {r0, r1, r2}
 80155c6:	6020      	str	r0, [r4, #0]
 80155c8:	6061      	str	r1, [r4, #4]
 80155ca:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade,"7A");
 80155cc:	687b      	ldr	r3, [r7, #4]
 80155ce:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80155d2:	4aa4      	ldr	r2, [pc, #656]	; (8015864 <problem_fetch+0x141a0>)
 80155d4:	8811      	ldrh	r1, [r2, #0]
 80155d6:	7892      	ldrb	r2, [r2, #2]
 80155d8:	8019      	strh	r1, [r3, #0]
 80155da:	709a      	strb	r2, [r3, #2]
			p->moveSize = 6;
 80155dc:	687b      	ldr	r3, [r7, #4]
 80155de:	2206      	movs	r2, #6
 80155e0:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,J,G,F,I,I");
 80155e2:	687b      	ldr	r3, [r7, #4]
 80155e4:	33a4      	adds	r3, #164	; 0xa4
 80155e6:	4aa0      	ldr	r2, [pc, #640]	; (8015868 <problem_fetch+0x141a4>)
 80155e8:	461c      	mov	r4, r3
 80155ea:	4613      	mov	r3, r2
 80155ec:	cb07      	ldmia	r3!, {r0, r1, r2}
 80155ee:	6020      	str	r0, [r4, #0]
 80155f0:	6061      	str	r1, [r4, #4]
 80155f2:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,7,9,11,14,18");
 80155f4:	687b      	ldr	r3, [r7, #4]
 80155f6:	3304      	adds	r3, #4
 80155f8:	4a9c      	ldr	r2, [pc, #624]	; (801586c <problem_fetch+0x141a8>)
 80155fa:	461c      	mov	r4, r3
 80155fc:	4613      	mov	r3, r2
 80155fe:	cb07      	ldmia	r3!, {r0, r1, r2}
 8015600:	6020      	str	r0, [r4, #0]
 8015602:	6061      	str	r1, [r4, #4]
 8015604:	60a2      	str	r2, [r4, #8]
 8015606:	881a      	ldrh	r2, [r3, #0]
 8015608:	789b      	ldrb	r3, [r3, #2]
 801560a:	81a2      	strh	r2, [r4, #12]
 801560c:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 801560e:	687b      	ldr	r3, [r7, #4]
 8015610:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8015614:	4a96      	ldr	r2, [pc, #600]	; (8015870 <problem_fetch+0x141ac>)
 8015616:	461c      	mov	r4, r3
 8015618:	4613      	mov	r3, r2
 801561a:	cb07      	ldmia	r3!, {r0, r1, r2}
 801561c:	6020      	str	r0, [r4, #0]
 801561e:	6061      	str	r1, [r4, #4]
 8015620:	60a2      	str	r2, [r4, #8]
			break;
 8015622:	f006 bf7f 	b.w	801c524 <problem_fetch+0x1ae60>
		case 590 :
			strcpy(p->name,"MO6.1");
 8015626:	687b      	ldr	r3, [r7, #4]
 8015628:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801562c:	4a91      	ldr	r2, [pc, #580]	; (8015874 <problem_fetch+0x141b0>)
 801562e:	6810      	ldr	r0, [r2, #0]
 8015630:	6018      	str	r0, [r3, #0]
 8015632:	8892      	ldrh	r2, [r2, #4]
 8015634:	809a      	strh	r2, [r3, #4]
			strcpy(p->grade,"7A");
 8015636:	687b      	ldr	r3, [r7, #4]
 8015638:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801563c:	4a89      	ldr	r2, [pc, #548]	; (8015864 <problem_fetch+0x141a0>)
 801563e:	8811      	ldrh	r1, [r2, #0]
 8015640:	7892      	ldrb	r2, [r2, #2]
 8015642:	8019      	strh	r1, [r3, #0]
 8015644:	709a      	strb	r2, [r3, #2]
			p->moveSize = 6;
 8015646:	687b      	ldr	r3, [r7, #4]
 8015648:	2206      	movs	r2, #6
 801564a:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,H,H,D,D,D");
 801564c:	687b      	ldr	r3, [r7, #4]
 801564e:	33a4      	adds	r3, #164	; 0xa4
 8015650:	4a89      	ldr	r2, [pc, #548]	; (8015878 <problem_fetch+0x141b4>)
 8015652:	461c      	mov	r4, r3
 8015654:	4613      	mov	r3, r2
 8015656:	cb07      	ldmia	r3!, {r0, r1, r2}
 8015658:	6020      	str	r0, [r4, #0]
 801565a:	6061      	str	r1, [r4, #4]
 801565c:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,5,10,15,11,18");
 801565e:	687b      	ldr	r3, [r7, #4]
 8015660:	3304      	adds	r3, #4
 8015662:	4a86      	ldr	r2, [pc, #536]	; (801587c <problem_fetch+0x141b8>)
 8015664:	461c      	mov	r4, r3
 8015666:	4615      	mov	r5, r2
 8015668:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801566a:	6020      	str	r0, [r4, #0]
 801566c:	6061      	str	r1, [r4, #4]
 801566e:	60a2      	str	r2, [r4, #8]
 8015670:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 8015672:	687b      	ldr	r3, [r7, #4]
 8015674:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8015678:	4a7d      	ldr	r2, [pc, #500]	; (8015870 <problem_fetch+0x141ac>)
 801567a:	461c      	mov	r4, r3
 801567c:	4613      	mov	r3, r2
 801567e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8015680:	6020      	str	r0, [r4, #0]
 8015682:	6061      	str	r1, [r4, #4]
 8015684:	60a2      	str	r2, [r4, #8]
			break;
 8015686:	f006 bf4d 	b.w	801c524 <problem_fetch+0x1ae60>
		case 591 :
			strcpy(p->name,"ALL BLACK ERRTHANG");
 801568a:	687b      	ldr	r3, [r7, #4]
 801568c:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8015690:	4a7b      	ldr	r2, [pc, #492]	; (8015880 <problem_fetch+0x141bc>)
 8015692:	461d      	mov	r5, r3
 8015694:	4614      	mov	r4, r2
 8015696:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8015698:	6028      	str	r0, [r5, #0]
 801569a:	6069      	str	r1, [r5, #4]
 801569c:	60aa      	str	r2, [r5, #8]
 801569e:	60eb      	str	r3, [r5, #12]
 80156a0:	8823      	ldrh	r3, [r4, #0]
 80156a2:	78a2      	ldrb	r2, [r4, #2]
 80156a4:	822b      	strh	r3, [r5, #16]
 80156a6:	4613      	mov	r3, r2
 80156a8:	74ab      	strb	r3, [r5, #18]
			strcpy(p->grade,"7C");
 80156aa:	687b      	ldr	r3, [r7, #4]
 80156ac:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80156b0:	4a74      	ldr	r2, [pc, #464]	; (8015884 <problem_fetch+0x141c0>)
 80156b2:	8811      	ldrh	r1, [r2, #0]
 80156b4:	7892      	ldrb	r2, [r2, #2]
 80156b6:	8019      	strh	r1, [r3, #0]
 80156b8:	709a      	strb	r2, [r3, #2]
			p->moveSize = 5;
 80156ba:	687b      	ldr	r3, [r7, #4]
 80156bc:	2205      	movs	r2, #5
 80156be:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,I,E,G,A");
 80156c0:	687b      	ldr	r3, [r7, #4]
 80156c2:	33a4      	adds	r3, #164	; 0xa4
 80156c4:	4970      	ldr	r1, [pc, #448]	; (8015888 <problem_fetch+0x141c4>)
 80156c6:	461a      	mov	r2, r3
 80156c8:	460b      	mov	r3, r1
 80156ca:	cb03      	ldmia	r3!, {r0, r1}
 80156cc:	6010      	str	r0, [r2, #0]
 80156ce:	6051      	str	r1, [r2, #4]
 80156d0:	881b      	ldrh	r3, [r3, #0]
 80156d2:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"5,10,14,17,18");
 80156d4:	687b      	ldr	r3, [r7, #4]
 80156d6:	3304      	adds	r3, #4
 80156d8:	4a6c      	ldr	r2, [pc, #432]	; (801588c <problem_fetch+0x141c8>)
 80156da:	461c      	mov	r4, r3
 80156dc:	4613      	mov	r3, r2
 80156de:	cb07      	ldmia	r3!, {r0, r1, r2}
 80156e0:	6020      	str	r0, [r4, #0]
 80156e2:	6061      	str	r1, [r4, #4]
 80156e4:	60a2      	str	r2, [r4, #8]
 80156e6:	881b      	ldrh	r3, [r3, #0]
 80156e8:	81a3      	strh	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,e");
 80156ea:	687b      	ldr	r3, [r7, #4]
 80156ec:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 80156f0:	4967      	ldr	r1, [pc, #412]	; (8015890 <problem_fetch+0x141cc>)
 80156f2:	461a      	mov	r2, r3
 80156f4:	460b      	mov	r3, r1
 80156f6:	cb03      	ldmia	r3!, {r0, r1}
 80156f8:	6010      	str	r0, [r2, #0]
 80156fa:	6051      	str	r1, [r2, #4]
 80156fc:	881b      	ldrh	r3, [r3, #0]
 80156fe:	8113      	strh	r3, [r2, #8]
			break;
 8015700:	f006 bf10 	b.w	801c524 <problem_fetch+0x1ae60>
		case 592 :
			strcpy(p->name,"BLACK ON RICE");
 8015704:	687b      	ldr	r3, [r7, #4]
 8015706:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801570a:	4a62      	ldr	r2, [pc, #392]	; (8015894 <problem_fetch+0x141d0>)
 801570c:	461c      	mov	r4, r3
 801570e:	4613      	mov	r3, r2
 8015710:	cb07      	ldmia	r3!, {r0, r1, r2}
 8015712:	6020      	str	r0, [r4, #0]
 8015714:	6061      	str	r1, [r4, #4]
 8015716:	60a2      	str	r2, [r4, #8]
 8015718:	881b      	ldrh	r3, [r3, #0]
 801571a:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade,"6C+");
 801571c:	687b      	ldr	r3, [r7, #4]
 801571e:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8015722:	4a5d      	ldr	r2, [pc, #372]	; (8015898 <problem_fetch+0x141d4>)
 8015724:	6810      	ldr	r0, [r2, #0]
 8015726:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 8015728:	687b      	ldr	r3, [r7, #4]
 801572a:	2207      	movs	r2, #7
 801572c:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,G,E,H,E,C,A");
 801572e:	687b      	ldr	r3, [r7, #4]
 8015730:	33a4      	adds	r3, #164	; 0xa4
 8015732:	4a5a      	ldr	r2, [pc, #360]	; (801589c <problem_fetch+0x141d8>)
 8015734:	461c      	mov	r4, r3
 8015736:	4613      	mov	r3, r2
 8015738:	cb07      	ldmia	r3!, {r0, r1, r2}
 801573a:	6020      	str	r0, [r4, #0]
 801573c:	6061      	str	r1, [r4, #4]
 801573e:	60a2      	str	r2, [r4, #8]
 8015740:	881b      	ldrh	r3, [r3, #0]
 8015742:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,4,8,10,16,13,18");
 8015744:	687b      	ldr	r3, [r7, #4]
 8015746:	3304      	adds	r3, #4
 8015748:	4a55      	ldr	r2, [pc, #340]	; (80158a0 <problem_fetch+0x141dc>)
 801574a:	461d      	mov	r5, r3
 801574c:	4614      	mov	r4, r2
 801574e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8015750:	6028      	str	r0, [r5, #0]
 8015752:	6069      	str	r1, [r5, #4]
 8015754:	60aa      	str	r2, [r5, #8]
 8015756:	60eb      	str	r3, [r5, #12]
 8015758:	8823      	ldrh	r3, [r4, #0]
 801575a:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,s,d,d,d,d,e");
 801575c:	687b      	ldr	r3, [r7, #4]
 801575e:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8015762:	4a50      	ldr	r2, [pc, #320]	; (80158a4 <problem_fetch+0x141e0>)
 8015764:	461c      	mov	r4, r3
 8015766:	4613      	mov	r3, r2
 8015768:	cb07      	ldmia	r3!, {r0, r1, r2}
 801576a:	6020      	str	r0, [r4, #0]
 801576c:	6061      	str	r1, [r4, #4]
 801576e:	60a2      	str	r2, [r4, #8]
 8015770:	881b      	ldrh	r3, [r3, #0]
 8015772:	81a3      	strh	r3, [r4, #12]
			break;
 8015774:	f006 bed6 	b.w	801c524 <problem_fetch+0x1ae60>
		case 593 :
			strcpy(p->name,"BAMBINI");
 8015778:	687b      	ldr	r3, [r7, #4]
 801577a:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801577e:	494a      	ldr	r1, [pc, #296]	; (80158a8 <problem_fetch+0x141e4>)
 8015780:	461a      	mov	r2, r3
 8015782:	460b      	mov	r3, r1
 8015784:	cb03      	ldmia	r3!, {r0, r1}
 8015786:	6010      	str	r0, [r2, #0]
 8015788:	6051      	str	r1, [r2, #4]
			strcpy(p->grade,"6B+");
 801578a:	687b      	ldr	r3, [r7, #4]
 801578c:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8015790:	4a46      	ldr	r2, [pc, #280]	; (80158ac <problem_fetch+0x141e8>)
 8015792:	6810      	ldr	r0, [r2, #0]
 8015794:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 8015796:	687b      	ldr	r3, [r7, #4]
 8015798:	2206      	movs	r2, #6
 801579a:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,E,F,C,D,D");
 801579c:	687b      	ldr	r3, [r7, #4]
 801579e:	33a4      	adds	r3, #164	; 0xa4
 80157a0:	4a43      	ldr	r2, [pc, #268]	; (80158b0 <problem_fetch+0x141ec>)
 80157a2:	461c      	mov	r4, r3
 80157a4:	4613      	mov	r3, r2
 80157a6:	cb07      	ldmia	r3!, {r0, r1, r2}
 80157a8:	6020      	str	r0, [r4, #0]
 80157aa:	6061      	str	r1, [r4, #4]
 80157ac:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,8,11,13,15,18");
 80157ae:	687b      	ldr	r3, [r7, #4]
 80157b0:	3304      	adds	r3, #4
 80157b2:	4a40      	ldr	r2, [pc, #256]	; (80158b4 <problem_fetch+0x141f0>)
 80157b4:	461c      	mov	r4, r3
 80157b6:	4615      	mov	r5, r2
 80157b8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80157ba:	6020      	str	r0, [r4, #0]
 80157bc:	6061      	str	r1, [r4, #4]
 80157be:	60a2      	str	r2, [r4, #8]
 80157c0:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 80157c2:	687b      	ldr	r3, [r7, #4]
 80157c4:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 80157c8:	4a29      	ldr	r2, [pc, #164]	; (8015870 <problem_fetch+0x141ac>)
 80157ca:	461c      	mov	r4, r3
 80157cc:	4613      	mov	r3, r2
 80157ce:	cb07      	ldmia	r3!, {r0, r1, r2}
 80157d0:	6020      	str	r0, [r4, #0]
 80157d2:	6061      	str	r1, [r4, #4]
 80157d4:	60a2      	str	r2, [r4, #8]
			break;
 80157d6:	f006 bea5 	b.w	801c524 <problem_fetch+0x1ae60>
		case 594 :
			strcpy(p->name,"TRAVEQUE II");
 80157da:	687b      	ldr	r3, [r7, #4]
 80157dc:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80157e0:	4a35      	ldr	r2, [pc, #212]	; (80158b8 <problem_fetch+0x141f4>)
 80157e2:	461c      	mov	r4, r3
 80157e4:	4613      	mov	r3, r2
 80157e6:	cb07      	ldmia	r3!, {r0, r1, r2}
 80157e8:	6020      	str	r0, [r4, #0]
 80157ea:	6061      	str	r1, [r4, #4]
 80157ec:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade,"6C");
 80157ee:	687b      	ldr	r3, [r7, #4]
 80157f0:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80157f4:	4a31      	ldr	r2, [pc, #196]	; (80158bc <problem_fetch+0x141f8>)
 80157f6:	8811      	ldrh	r1, [r2, #0]
 80157f8:	7892      	ldrb	r2, [r2, #2]
 80157fa:	8019      	strh	r1, [r3, #0]
 80157fc:	709a      	strb	r2, [r3, #2]
			p->moveSize = 11;
 80157fe:	687b      	ldr	r3, [r7, #4]
 8015800:	220b      	movs	r2, #11
 8015802:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"C,B,G,C,D,K,H,H,K,G,I");
 8015804:	687b      	ldr	r3, [r7, #4]
 8015806:	33a4      	adds	r3, #164	; 0xa4
 8015808:	4a2d      	ldr	r2, [pc, #180]	; (80158c0 <problem_fetch+0x141fc>)
 801580a:	461d      	mov	r5, r3
 801580c:	4614      	mov	r4, r2
 801580e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8015810:	6028      	str	r0, [r5, #0]
 8015812:	6069      	str	r1, [r5, #4]
 8015814:	60aa      	str	r2, [r5, #8]
 8015816:	60eb      	str	r3, [r5, #12]
 8015818:	6820      	ldr	r0, [r4, #0]
 801581a:	6128      	str	r0, [r5, #16]
 801581c:	88a3      	ldrh	r3, [r4, #4]
 801581e:	82ab      	strh	r3, [r5, #20]
			strcpy(p->moveNumbers,"5,6,4,8,7,9,8,12,14,15,18");
 8015820:	687b      	ldr	r3, [r7, #4]
 8015822:	3304      	adds	r3, #4
 8015824:	4a27      	ldr	r2, [pc, #156]	; (80158c4 <problem_fetch+0x14200>)
 8015826:	461d      	mov	r5, r3
 8015828:	4614      	mov	r4, r2
 801582a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801582c:	6028      	str	r0, [r5, #0]
 801582e:	6069      	str	r1, [r5, #4]
 8015830:	60aa      	str	r2, [r5, #8]
 8015832:	60eb      	str	r3, [r5, #12]
 8015834:	cc03      	ldmia	r4!, {r0, r1}
 8015836:	6128      	str	r0, [r5, #16]
 8015838:	6169      	str	r1, [r5, #20]
 801583a:	8823      	ldrh	r3, [r4, #0]
 801583c:	832b      	strh	r3, [r5, #24]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,d,d,d,e");
 801583e:	687b      	ldr	r3, [r7, #4]
 8015840:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8015844:	4a20      	ldr	r2, [pc, #128]	; (80158c8 <problem_fetch+0x14204>)
 8015846:	461d      	mov	r5, r3
 8015848:	4614      	mov	r4, r2
 801584a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801584c:	6028      	str	r0, [r5, #0]
 801584e:	6069      	str	r1, [r5, #4]
 8015850:	60aa      	str	r2, [r5, #8]
 8015852:	60eb      	str	r3, [r5, #12]
 8015854:	6820      	ldr	r0, [r4, #0]
 8015856:	6128      	str	r0, [r5, #16]
 8015858:	88a3      	ldrh	r3, [r4, #4]
 801585a:	82ab      	strh	r3, [r5, #20]
			break;
 801585c:	f006 be62 	b.w	801c524 <problem_fetch+0x1ae60>
 8015860:	0802a890 	.word	0x0802a890
 8015864:	08023814 	.word	0x08023814
 8015868:	0802a89c 	.word	0x0802a89c
 801586c:	0802a8a8 	.word	0x0802a8a8
 8015870:	08023bf0 	.word	0x08023bf0
 8015874:	0802a8b8 	.word	0x0802a8b8
 8015878:	0802a8c0 	.word	0x0802a8c0
 801587c:	0802a8cc 	.word	0x0802a8cc
 8015880:	0802a8dc 	.word	0x0802a8dc
 8015884:	08024088 	.word	0x08024088
 8015888:	0802a8f0 	.word	0x0802a8f0
 801588c:	08029e64 	.word	0x08029e64
 8015890:	08023d20 	.word	0x08023d20
 8015894:	0802a8fc 	.word	0x0802a8fc
 8015898:	080238ec 	.word	0x080238ec
 801589c:	0802a90c 	.word	0x0802a90c
 80158a0:	0802a91c 	.word	0x0802a91c
 80158a4:	080238cc 	.word	0x080238cc
 80158a8:	0802a930 	.word	0x0802a930
 80158ac:	08023854 	.word	0x08023854
 80158b0:	0802a938 	.word	0x0802a938
 80158b4:	08029f64 	.word	0x08029f64
 80158b8:	0802a944 	.word	0x0802a944
 80158bc:	08023920 	.word	0x08023920
 80158c0:	0802a950 	.word	0x0802a950
 80158c4:	0802a968 	.word	0x0802a968
 80158c8:	080271b4 	.word	0x080271b4
		case 595 :
			strcpy(p->name,"TRAVEQUE");
 80158cc:	687b      	ldr	r3, [r7, #4]
 80158ce:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80158d2:	49ac      	ldr	r1, [pc, #688]	; (8015b84 <problem_fetch+0x144c0>)
 80158d4:	461a      	mov	r2, r3
 80158d6:	460b      	mov	r3, r1
 80158d8:	cb03      	ldmia	r3!, {r0, r1}
 80158da:	6010      	str	r0, [r2, #0]
 80158dc:	6051      	str	r1, [r2, #4]
 80158de:	781b      	ldrb	r3, [r3, #0]
 80158e0:	7213      	strb	r3, [r2, #8]
			strcpy(p->grade,"6C");
 80158e2:	687b      	ldr	r3, [r7, #4]
 80158e4:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80158e8:	4aa7      	ldr	r2, [pc, #668]	; (8015b88 <problem_fetch+0x144c4>)
 80158ea:	8811      	ldrh	r1, [r2, #0]
 80158ec:	7892      	ldrb	r2, [r2, #2]
 80158ee:	8019      	strh	r1, [r3, #0]
 80158f0:	709a      	strb	r2, [r3, #2]
			p->moveSize = 10;
 80158f2:	687b      	ldr	r3, [r7, #4]
 80158f4:	220a      	movs	r2, #10
 80158f6:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"B,C,J,H,H,H,G,E,H,I");
 80158f8:	687b      	ldr	r3, [r7, #4]
 80158fa:	33a4      	adds	r3, #164	; 0xa4
 80158fc:	4aa3      	ldr	r2, [pc, #652]	; (8015b8c <problem_fetch+0x144c8>)
 80158fe:	461d      	mov	r5, r3
 8015900:	4614      	mov	r4, r2
 8015902:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8015904:	6028      	str	r0, [r5, #0]
 8015906:	6069      	str	r1, [r5, #4]
 8015908:	60aa      	str	r2, [r5, #8]
 801590a:	60eb      	str	r3, [r5, #12]
 801590c:	6820      	ldr	r0, [r4, #0]
 801590e:	6128      	str	r0, [r5, #16]
			strcpy(p->moveNumbers,"6,5,7,16,12,8,4,6,5,18");
 8015910:	687b      	ldr	r3, [r7, #4]
 8015912:	3304      	adds	r3, #4
 8015914:	4a9e      	ldr	r2, [pc, #632]	; (8015b90 <problem_fetch+0x144cc>)
 8015916:	461c      	mov	r4, r3
 8015918:	4615      	mov	r5, r2
 801591a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801591c:	6020      	str	r0, [r4, #0]
 801591e:	6061      	str	r1, [r4, #4]
 8015920:	60a2      	str	r2, [r4, #8]
 8015922:	60e3      	str	r3, [r4, #12]
 8015924:	6828      	ldr	r0, [r5, #0]
 8015926:	6120      	str	r0, [r4, #16]
 8015928:	88ab      	ldrh	r3, [r5, #4]
 801592a:	79aa      	ldrb	r2, [r5, #6]
 801592c:	82a3      	strh	r3, [r4, #20]
 801592e:	4613      	mov	r3, r2
 8015930:	75a3      	strb	r3, [r4, #22]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,d,d,e");
 8015932:	687b      	ldr	r3, [r7, #4]
 8015934:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8015938:	4a96      	ldr	r2, [pc, #600]	; (8015b94 <problem_fetch+0x144d0>)
 801593a:	461d      	mov	r5, r3
 801593c:	4614      	mov	r4, r2
 801593e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8015940:	6028      	str	r0, [r5, #0]
 8015942:	6069      	str	r1, [r5, #4]
 8015944:	60aa      	str	r2, [r5, #8]
 8015946:	60eb      	str	r3, [r5, #12]
 8015948:	6820      	ldr	r0, [r4, #0]
 801594a:	6128      	str	r0, [r5, #16]
			break;
 801594c:	f006 bdea 	b.w	801c524 <problem_fetch+0x1ae60>
		case 596 :
			strcpy(p->name,"YAYABLACK");
 8015950:	687b      	ldr	r3, [r7, #4]
 8015952:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8015956:	4990      	ldr	r1, [pc, #576]	; (8015b98 <problem_fetch+0x144d4>)
 8015958:	461a      	mov	r2, r3
 801595a:	460b      	mov	r3, r1
 801595c:	cb03      	ldmia	r3!, {r0, r1}
 801595e:	6010      	str	r0, [r2, #0]
 8015960:	6051      	str	r1, [r2, #4]
 8015962:	881b      	ldrh	r3, [r3, #0]
 8015964:	8113      	strh	r3, [r2, #8]
			strcpy(p->grade,"6B+");
 8015966:	687b      	ldr	r3, [r7, #4]
 8015968:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801596c:	4a8b      	ldr	r2, [pc, #556]	; (8015b9c <problem_fetch+0x144d8>)
 801596e:	6810      	ldr	r0, [r2, #0]
 8015970:	6018      	str	r0, [r3, #0]
			p->moveSize = 8;
 8015972:	687b      	ldr	r3, [r7, #4]
 8015974:	2208      	movs	r2, #8
 8015976:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"H,J,J,E,H,C,D,D");
 8015978:	687b      	ldr	r3, [r7, #4]
 801597a:	33a4      	adds	r3, #164	; 0xa4
 801597c:	4a88      	ldr	r2, [pc, #544]	; (8015ba0 <problem_fetch+0x144dc>)
 801597e:	461c      	mov	r4, r3
 8015980:	4615      	mov	r5, r2
 8015982:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8015984:	6020      	str	r0, [r4, #0]
 8015986:	6061      	str	r1, [r4, #4]
 8015988:	60a2      	str	r2, [r4, #8]
 801598a:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,5,7,8,10,13,15,18");
 801598c:	687b      	ldr	r3, [r7, #4]
 801598e:	3304      	adds	r3, #4
 8015990:	4a84      	ldr	r2, [pc, #528]	; (8015ba4 <problem_fetch+0x144e0>)
 8015992:	461d      	mov	r5, r3
 8015994:	4614      	mov	r4, r2
 8015996:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8015998:	6028      	str	r0, [r5, #0]
 801599a:	6069      	str	r1, [r5, #4]
 801599c:	60aa      	str	r2, [r5, #8]
 801599e:	60eb      	str	r3, [r5, #12]
 80159a0:	6820      	ldr	r0, [r4, #0]
 80159a2:	6128      	str	r0, [r5, #16]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,e");
 80159a4:	687b      	ldr	r3, [r7, #4]
 80159a6:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 80159aa:	4a7f      	ldr	r2, [pc, #508]	; (8015ba8 <problem_fetch+0x144e4>)
 80159ac:	461c      	mov	r4, r3
 80159ae:	4615      	mov	r5, r2
 80159b0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80159b2:	6020      	str	r0, [r4, #0]
 80159b4:	6061      	str	r1, [r4, #4]
 80159b6:	60a2      	str	r2, [r4, #8]
 80159b8:	60e3      	str	r3, [r4, #12]
			break;
 80159ba:	f006 bdb3 	b.w	801c524 <problem_fetch+0x1ae60>
		case 597 :
			strcpy(p->name,"SPORGASSE, GRAZ");
 80159be:	687b      	ldr	r3, [r7, #4]
 80159c0:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80159c4:	4a79      	ldr	r2, [pc, #484]	; (8015bac <problem_fetch+0x144e8>)
 80159c6:	461c      	mov	r4, r3
 80159c8:	4615      	mov	r5, r2
 80159ca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80159cc:	6020      	str	r0, [r4, #0]
 80159ce:	6061      	str	r1, [r4, #4]
 80159d0:	60a2      	str	r2, [r4, #8]
 80159d2:	60e3      	str	r3, [r4, #12]
			strcpy(p->grade,"7B");
 80159d4:	687b      	ldr	r3, [r7, #4]
 80159d6:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80159da:	4a75      	ldr	r2, [pc, #468]	; (8015bb0 <problem_fetch+0x144ec>)
 80159dc:	8811      	ldrh	r1, [r2, #0]
 80159de:	7892      	ldrb	r2, [r2, #2]
 80159e0:	8019      	strh	r1, [r3, #0]
 80159e2:	709a      	strb	r2, [r3, #2]
			p->moveSize = 5;
 80159e4:	687b      	ldr	r3, [r7, #4]
 80159e6:	2205      	movs	r2, #5
 80159e8:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"E,H,F,E,D");
 80159ea:	687b      	ldr	r3, [r7, #4]
 80159ec:	33a4      	adds	r3, #164	; 0xa4
 80159ee:	4971      	ldr	r1, [pc, #452]	; (8015bb4 <problem_fetch+0x144f0>)
 80159f0:	461a      	mov	r2, r3
 80159f2:	460b      	mov	r3, r1
 80159f4:	cb03      	ldmia	r3!, {r0, r1}
 80159f6:	6010      	str	r0, [r2, #0]
 80159f8:	6051      	str	r1, [r2, #4]
 80159fa:	881b      	ldrh	r3, [r3, #0]
 80159fc:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"6,5,11,16,18");
 80159fe:	687b      	ldr	r3, [r7, #4]
 8015a00:	3304      	adds	r3, #4
 8015a02:	4a6d      	ldr	r2, [pc, #436]	; (8015bb8 <problem_fetch+0x144f4>)
 8015a04:	461c      	mov	r4, r3
 8015a06:	4613      	mov	r3, r2
 8015a08:	cb07      	ldmia	r3!, {r0, r1, r2}
 8015a0a:	6020      	str	r0, [r4, #0]
 8015a0c:	6061      	str	r1, [r4, #4]
 8015a0e:	60a2      	str	r2, [r4, #8]
 8015a10:	781b      	ldrb	r3, [r3, #0]
 8015a12:	7323      	strb	r3, [r4, #12]
			strcpy(p->startFinish,"s,s,d,d,e");
 8015a14:	687b      	ldr	r3, [r7, #4]
 8015a16:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8015a1a:	4968      	ldr	r1, [pc, #416]	; (8015bbc <problem_fetch+0x144f8>)
 8015a1c:	461a      	mov	r2, r3
 8015a1e:	460b      	mov	r3, r1
 8015a20:	cb03      	ldmia	r3!, {r0, r1}
 8015a22:	6010      	str	r0, [r2, #0]
 8015a24:	6051      	str	r1, [r2, #4]
 8015a26:	881b      	ldrh	r3, [r3, #0]
 8015a28:	8113      	strh	r3, [r2, #8]
			break;
 8015a2a:	f006 bd7b 	b.w	801c524 <problem_fetch+0x1ae60>
		case 598 :
			strcpy(p->name,"BACKSLASH");
 8015a2e:	687b      	ldr	r3, [r7, #4]
 8015a30:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8015a34:	4962      	ldr	r1, [pc, #392]	; (8015bc0 <problem_fetch+0x144fc>)
 8015a36:	461a      	mov	r2, r3
 8015a38:	460b      	mov	r3, r1
 8015a3a:	cb03      	ldmia	r3!, {r0, r1}
 8015a3c:	6010      	str	r0, [r2, #0]
 8015a3e:	6051      	str	r1, [r2, #4]
 8015a40:	881b      	ldrh	r3, [r3, #0]
 8015a42:	8113      	strh	r3, [r2, #8]
			strcpy(p->grade,"7A");
 8015a44:	687b      	ldr	r3, [r7, #4]
 8015a46:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8015a4a:	4a5e      	ldr	r2, [pc, #376]	; (8015bc4 <problem_fetch+0x14500>)
 8015a4c:	8811      	ldrh	r1, [r2, #0]
 8015a4e:	7892      	ldrb	r2, [r2, #2]
 8015a50:	8019      	strh	r1, [r3, #0]
 8015a52:	709a      	strb	r2, [r3, #2]
			p->moveSize = 6;
 8015a54:	687b      	ldr	r3, [r7, #4]
 8015a56:	2206      	movs	r2, #6
 8015a58:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,H,G,J,I,I");
 8015a5a:	687b      	ldr	r3, [r7, #4]
 8015a5c:	33a4      	adds	r3, #164	; 0xa4
 8015a5e:	4a5a      	ldr	r2, [pc, #360]	; (8015bc8 <problem_fetch+0x14504>)
 8015a60:	461c      	mov	r4, r3
 8015a62:	4613      	mov	r3, r2
 8015a64:	cb07      	ldmia	r3!, {r0, r1, r2}
 8015a66:	6020      	str	r0, [r4, #0]
 8015a68:	6061      	str	r1, [r4, #4]
 8015a6a:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,8,9,12,14,18");
 8015a6c:	687b      	ldr	r3, [r7, #4]
 8015a6e:	3304      	adds	r3, #4
 8015a70:	4a56      	ldr	r2, [pc, #344]	; (8015bcc <problem_fetch+0x14508>)
 8015a72:	461c      	mov	r4, r3
 8015a74:	4613      	mov	r3, r2
 8015a76:	cb07      	ldmia	r3!, {r0, r1, r2}
 8015a78:	6020      	str	r0, [r4, #0]
 8015a7a:	6061      	str	r1, [r4, #4]
 8015a7c:	60a2      	str	r2, [r4, #8]
 8015a7e:	881a      	ldrh	r2, [r3, #0]
 8015a80:	789b      	ldrb	r3, [r3, #2]
 8015a82:	81a2      	strh	r2, [r4, #12]
 8015a84:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 8015a86:	687b      	ldr	r3, [r7, #4]
 8015a88:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8015a8c:	4a50      	ldr	r2, [pc, #320]	; (8015bd0 <problem_fetch+0x1450c>)
 8015a8e:	461c      	mov	r4, r3
 8015a90:	4613      	mov	r3, r2
 8015a92:	cb07      	ldmia	r3!, {r0, r1, r2}
 8015a94:	6020      	str	r0, [r4, #0]
 8015a96:	6061      	str	r1, [r4, #4]
 8015a98:	60a2      	str	r2, [r4, #8]
			break;
 8015a9a:	f006 bd43 	b.w	801c524 <problem_fetch+0x1ae60>
		case 599 :
			strcpy(p->name,"SLASHSLASH");
 8015a9e:	687b      	ldr	r3, [r7, #4]
 8015aa0:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8015aa4:	494b      	ldr	r1, [pc, #300]	; (8015bd4 <problem_fetch+0x14510>)
 8015aa6:	461a      	mov	r2, r3
 8015aa8:	460b      	mov	r3, r1
 8015aaa:	cb03      	ldmia	r3!, {r0, r1}
 8015aac:	6010      	str	r0, [r2, #0]
 8015aae:	6051      	str	r1, [r2, #4]
 8015ab0:	8819      	ldrh	r1, [r3, #0]
 8015ab2:	789b      	ldrb	r3, [r3, #2]
 8015ab4:	8111      	strh	r1, [r2, #8]
 8015ab6:	7293      	strb	r3, [r2, #10]
			strcpy(p->grade,"7B+");
 8015ab8:	687b      	ldr	r3, [r7, #4]
 8015aba:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8015abe:	4a46      	ldr	r2, [pc, #280]	; (8015bd8 <problem_fetch+0x14514>)
 8015ac0:	6810      	ldr	r0, [r2, #0]
 8015ac2:	6018      	str	r0, [r3, #0]
			p->moveSize = 5;
 8015ac4:	687b      	ldr	r3, [r7, #4]
 8015ac6:	2205      	movs	r2, #5
 8015ac8:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"E,A,C,A,A");
 8015aca:	687b      	ldr	r3, [r7, #4]
 8015acc:	33a4      	adds	r3, #164	; 0xa4
 8015ace:	4943      	ldr	r1, [pc, #268]	; (8015bdc <problem_fetch+0x14518>)
 8015ad0:	461a      	mov	r2, r3
 8015ad2:	460b      	mov	r3, r1
 8015ad4:	cb03      	ldmia	r3!, {r0, r1}
 8015ad6:	6010      	str	r0, [r2, #0]
 8015ad8:	6051      	str	r1, [r2, #4]
 8015ada:	881b      	ldrh	r3, [r3, #0]
 8015adc:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"6,9,13,14,18");
 8015ade:	687b      	ldr	r3, [r7, #4]
 8015ae0:	3304      	adds	r3, #4
 8015ae2:	4a3f      	ldr	r2, [pc, #252]	; (8015be0 <problem_fetch+0x1451c>)
 8015ae4:	461c      	mov	r4, r3
 8015ae6:	4613      	mov	r3, r2
 8015ae8:	cb07      	ldmia	r3!, {r0, r1, r2}
 8015aea:	6020      	str	r0, [r4, #0]
 8015aec:	6061      	str	r1, [r4, #4]
 8015aee:	60a2      	str	r2, [r4, #8]
 8015af0:	781b      	ldrb	r3, [r3, #0]
 8015af2:	7323      	strb	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,e");
 8015af4:	687b      	ldr	r3, [r7, #4]
 8015af6:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8015afa:	493a      	ldr	r1, [pc, #232]	; (8015be4 <problem_fetch+0x14520>)
 8015afc:	461a      	mov	r2, r3
 8015afe:	460b      	mov	r3, r1
 8015b00:	cb03      	ldmia	r3!, {r0, r1}
 8015b02:	6010      	str	r0, [r2, #0]
 8015b04:	6051      	str	r1, [r2, #4]
 8015b06:	881b      	ldrh	r3, [r3, #0]
 8015b08:	8113      	strh	r3, [r2, #8]
			break;
 8015b0a:	f006 bd0b 	b.w	801c524 <problem_fetch+0x1ae60>
		case 600 :
			strcpy(p->name,"WORLDSTAR");
 8015b0e:	687b      	ldr	r3, [r7, #4]
 8015b10:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8015b14:	4934      	ldr	r1, [pc, #208]	; (8015be8 <problem_fetch+0x14524>)
 8015b16:	461a      	mov	r2, r3
 8015b18:	460b      	mov	r3, r1
 8015b1a:	cb03      	ldmia	r3!, {r0, r1}
 8015b1c:	6010      	str	r0, [r2, #0]
 8015b1e:	6051      	str	r1, [r2, #4]
 8015b20:	881b      	ldrh	r3, [r3, #0]
 8015b22:	8113      	strh	r3, [r2, #8]
			strcpy(p->grade,"7A");
 8015b24:	687b      	ldr	r3, [r7, #4]
 8015b26:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8015b2a:	4a26      	ldr	r2, [pc, #152]	; (8015bc4 <problem_fetch+0x14500>)
 8015b2c:	8811      	ldrh	r1, [r2, #0]
 8015b2e:	7892      	ldrb	r2, [r2, #2]
 8015b30:	8019      	strh	r1, [r3, #0]
 8015b32:	709a      	strb	r2, [r3, #2]
			p->moveSize = 7;
 8015b34:	687b      	ldr	r3, [r7, #4]
 8015b36:	2207      	movs	r2, #7
 8015b38:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,H,A,E,A,D,A");
 8015b3a:	687b      	ldr	r3, [r7, #4]
 8015b3c:	33a4      	adds	r3, #164	; 0xa4
 8015b3e:	4a2b      	ldr	r2, [pc, #172]	; (8015bec <problem_fetch+0x14528>)
 8015b40:	461c      	mov	r4, r3
 8015b42:	4613      	mov	r3, r2
 8015b44:	cb07      	ldmia	r3!, {r0, r1, r2}
 8015b46:	6020      	str	r0, [r4, #0]
 8015b48:	6061      	str	r1, [r4, #4]
 8015b4a:	60a2      	str	r2, [r4, #8]
 8015b4c:	881b      	ldrh	r3, [r3, #0]
 8015b4e:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,8,9,12,14,15,18");
 8015b50:	687b      	ldr	r3, [r7, #4]
 8015b52:	3304      	adds	r3, #4
 8015b54:	4a26      	ldr	r2, [pc, #152]	; (8015bf0 <problem_fetch+0x1452c>)
 8015b56:	461d      	mov	r5, r3
 8015b58:	4614      	mov	r4, r2
 8015b5a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8015b5c:	6028      	str	r0, [r5, #0]
 8015b5e:	6069      	str	r1, [r5, #4]
 8015b60:	60aa      	str	r2, [r5, #8]
 8015b62:	60eb      	str	r3, [r5, #12]
 8015b64:	8823      	ldrh	r3, [r4, #0]
 8015b66:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 8015b68:	687b      	ldr	r3, [r7, #4]
 8015b6a:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8015b6e:	4a21      	ldr	r2, [pc, #132]	; (8015bf4 <problem_fetch+0x14530>)
 8015b70:	461c      	mov	r4, r3
 8015b72:	4613      	mov	r3, r2
 8015b74:	cb07      	ldmia	r3!, {r0, r1, r2}
 8015b76:	6020      	str	r0, [r4, #0]
 8015b78:	6061      	str	r1, [r4, #4]
 8015b7a:	60a2      	str	r2, [r4, #8]
 8015b7c:	881b      	ldrh	r3, [r3, #0]
 8015b7e:	81a3      	strh	r3, [r4, #12]
			break;
 8015b80:	f006 bcd0 	b.w	801c524 <problem_fetch+0x1ae60>
 8015b84:	0802a984 	.word	0x0802a984
 8015b88:	08023920 	.word	0x08023920
 8015b8c:	0802a990 	.word	0x0802a990
 8015b90:	0802a9a4 	.word	0x0802a9a4
 8015b94:	080240fc 	.word	0x080240fc
 8015b98:	0802a9bc 	.word	0x0802a9bc
 8015b9c:	08023854 	.word	0x08023854
 8015ba0:	0802a9c8 	.word	0x0802a9c8
 8015ba4:	0802a9d8 	.word	0x0802a9d8
 8015ba8:	08023978 	.word	0x08023978
 8015bac:	0802a9ec 	.word	0x0802a9ec
 8015bb0:	08023f4c 	.word	0x08023f4c
 8015bb4:	0802a9fc 	.word	0x0802a9fc
 8015bb8:	0802aa08 	.word	0x0802aa08
 8015bbc:	08023f34 	.word	0x08023f34
 8015bc0:	0802aa18 	.word	0x0802aa18
 8015bc4:	08023814 	.word	0x08023814
 8015bc8:	0802aa24 	.word	0x0802aa24
 8015bcc:	0802aa30 	.word	0x0802aa30
 8015bd0:	08023bf0 	.word	0x08023bf0
 8015bd4:	0802aa40 	.word	0x0802aa40
 8015bd8:	08023990 	.word	0x08023990
 8015bdc:	0802aa4c 	.word	0x0802aa4c
 8015be0:	0802aa58 	.word	0x0802aa58
 8015be4:	08023d20 	.word	0x08023d20
 8015be8:	0802aa68 	.word	0x0802aa68
 8015bec:	0802aa74 	.word	0x0802aa74
 8015bf0:	0802aa84 	.word	0x0802aa84
 8015bf4:	080239dc 	.word	0x080239dc
		case 601 :
			strcpy(p->name,"NINO LA RONCHIA");
 8015bf8:	687b      	ldr	r3, [r7, #4]
 8015bfa:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8015bfe:	4aac      	ldr	r2, [pc, #688]	; (8015eb0 <problem_fetch+0x147ec>)
 8015c00:	461c      	mov	r4, r3
 8015c02:	4615      	mov	r5, r2
 8015c04:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8015c06:	6020      	str	r0, [r4, #0]
 8015c08:	6061      	str	r1, [r4, #4]
 8015c0a:	60a2      	str	r2, [r4, #8]
 8015c0c:	60e3      	str	r3, [r4, #12]
			strcpy(p->grade,"7A");
 8015c0e:	687b      	ldr	r3, [r7, #4]
 8015c10:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8015c14:	4aa7      	ldr	r2, [pc, #668]	; (8015eb4 <problem_fetch+0x147f0>)
 8015c16:	8811      	ldrh	r1, [r2, #0]
 8015c18:	7892      	ldrb	r2, [r2, #2]
 8015c1a:	8019      	strh	r1, [r3, #0]
 8015c1c:	709a      	strb	r2, [r3, #2]
			p->moveSize = 11;
 8015c1e:	687b      	ldr	r3, [r7, #4]
 8015c20:	220b      	movs	r2, #11
 8015c22:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"B,C,K,H,H,D,B,G,H,J,I");
 8015c24:	687b      	ldr	r3, [r7, #4]
 8015c26:	33a4      	adds	r3, #164	; 0xa4
 8015c28:	4aa3      	ldr	r2, [pc, #652]	; (8015eb8 <problem_fetch+0x147f4>)
 8015c2a:	461d      	mov	r5, r3
 8015c2c:	4614      	mov	r4, r2
 8015c2e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8015c30:	6028      	str	r0, [r5, #0]
 8015c32:	6069      	str	r1, [r5, #4]
 8015c34:	60aa      	str	r2, [r5, #8]
 8015c36:	60eb      	str	r3, [r5, #12]
 8015c38:	6820      	ldr	r0, [r4, #0]
 8015c3a:	6128      	str	r0, [r5, #16]
 8015c3c:	88a3      	ldrh	r3, [r4, #4]
 8015c3e:	82ab      	strh	r3, [r5, #20]
			strcpy(p->moveNumbers,"6,5,9,13,16,7,10,10,10,5,18");
 8015c40:	687b      	ldr	r3, [r7, #4]
 8015c42:	3304      	adds	r3, #4
 8015c44:	4a9d      	ldr	r2, [pc, #628]	; (8015ebc <problem_fetch+0x147f8>)
 8015c46:	461d      	mov	r5, r3
 8015c48:	4614      	mov	r4, r2
 8015c4a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8015c4c:	6028      	str	r0, [r5, #0]
 8015c4e:	6069      	str	r1, [r5, #4]
 8015c50:	60aa      	str	r2, [r5, #8]
 8015c52:	60eb      	str	r3, [r5, #12]
 8015c54:	cc07      	ldmia	r4!, {r0, r1, r2}
 8015c56:	6128      	str	r0, [r5, #16]
 8015c58:	6169      	str	r1, [r5, #20]
 8015c5a:	61aa      	str	r2, [r5, #24]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,d,d,d,e");
 8015c5c:	687b      	ldr	r3, [r7, #4]
 8015c5e:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8015c62:	4a97      	ldr	r2, [pc, #604]	; (8015ec0 <problem_fetch+0x147fc>)
 8015c64:	461d      	mov	r5, r3
 8015c66:	4614      	mov	r4, r2
 8015c68:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8015c6a:	6028      	str	r0, [r5, #0]
 8015c6c:	6069      	str	r1, [r5, #4]
 8015c6e:	60aa      	str	r2, [r5, #8]
 8015c70:	60eb      	str	r3, [r5, #12]
 8015c72:	6820      	ldr	r0, [r4, #0]
 8015c74:	6128      	str	r0, [r5, #16]
 8015c76:	88a3      	ldrh	r3, [r4, #4]
 8015c78:	82ab      	strh	r3, [r5, #20]
			break;
 8015c7a:	f006 bc53 	b.w	801c524 <problem_fetch+0x1ae60>
		case 602 :
			strcpy(p->name,"BOBBI'S STRETCH");
 8015c7e:	687b      	ldr	r3, [r7, #4]
 8015c80:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8015c84:	4a8f      	ldr	r2, [pc, #572]	; (8015ec4 <problem_fetch+0x14800>)
 8015c86:	461c      	mov	r4, r3
 8015c88:	4615      	mov	r5, r2
 8015c8a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8015c8c:	6020      	str	r0, [r4, #0]
 8015c8e:	6061      	str	r1, [r4, #4]
 8015c90:	60a2      	str	r2, [r4, #8]
 8015c92:	60e3      	str	r3, [r4, #12]
			strcpy(p->grade,"7A+");
 8015c94:	687b      	ldr	r3, [r7, #4]
 8015c96:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8015c9a:	4a8b      	ldr	r2, [pc, #556]	; (8015ec8 <problem_fetch+0x14804>)
 8015c9c:	6810      	ldr	r0, [r2, #0]
 8015c9e:	6018      	str	r0, [r3, #0]
			p->moveSize = 5;
 8015ca0:	687b      	ldr	r3, [r7, #4]
 8015ca2:	2205      	movs	r2, #5
 8015ca4:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"E,F,D,E,A");
 8015ca6:	687b      	ldr	r3, [r7, #4]
 8015ca8:	33a4      	adds	r3, #164	; 0xa4
 8015caa:	4988      	ldr	r1, [pc, #544]	; (8015ecc <problem_fetch+0x14808>)
 8015cac:	461a      	mov	r2, r3
 8015cae:	460b      	mov	r3, r1
 8015cb0:	cb03      	ldmia	r3!, {r0, r1}
 8015cb2:	6010      	str	r0, [r2, #0]
 8015cb4:	6051      	str	r1, [r2, #4]
 8015cb6:	881b      	ldrh	r3, [r3, #0]
 8015cb8:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"6,11,15,16,18");
 8015cba:	687b      	ldr	r3, [r7, #4]
 8015cbc:	3304      	adds	r3, #4
 8015cbe:	4a84      	ldr	r2, [pc, #528]	; (8015ed0 <problem_fetch+0x1480c>)
 8015cc0:	461c      	mov	r4, r3
 8015cc2:	4613      	mov	r3, r2
 8015cc4:	cb07      	ldmia	r3!, {r0, r1, r2}
 8015cc6:	6020      	str	r0, [r4, #0]
 8015cc8:	6061      	str	r1, [r4, #4]
 8015cca:	60a2      	str	r2, [r4, #8]
 8015ccc:	881b      	ldrh	r3, [r3, #0]
 8015cce:	81a3      	strh	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,e");
 8015cd0:	687b      	ldr	r3, [r7, #4]
 8015cd2:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8015cd6:	497f      	ldr	r1, [pc, #508]	; (8015ed4 <problem_fetch+0x14810>)
 8015cd8:	461a      	mov	r2, r3
 8015cda:	460b      	mov	r3, r1
 8015cdc:	cb03      	ldmia	r3!, {r0, r1}
 8015cde:	6010      	str	r0, [r2, #0]
 8015ce0:	6051      	str	r1, [r2, #4]
 8015ce2:	881b      	ldrh	r3, [r3, #0]
 8015ce4:	8113      	strh	r3, [r2, #8]
			break;
 8015ce6:	f006 bc1d 	b.w	801c524 <problem_fetch+0x1ae60>
		case 603 :
			strcpy(p->name,"A SPY WHO LOVED ME");
 8015cea:	687b      	ldr	r3, [r7, #4]
 8015cec:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8015cf0:	4a79      	ldr	r2, [pc, #484]	; (8015ed8 <problem_fetch+0x14814>)
 8015cf2:	461d      	mov	r5, r3
 8015cf4:	4614      	mov	r4, r2
 8015cf6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8015cf8:	6028      	str	r0, [r5, #0]
 8015cfa:	6069      	str	r1, [r5, #4]
 8015cfc:	60aa      	str	r2, [r5, #8]
 8015cfe:	60eb      	str	r3, [r5, #12]
 8015d00:	8823      	ldrh	r3, [r4, #0]
 8015d02:	78a2      	ldrb	r2, [r4, #2]
 8015d04:	822b      	strh	r3, [r5, #16]
 8015d06:	4613      	mov	r3, r2
 8015d08:	74ab      	strb	r3, [r5, #18]
			strcpy(p->grade,"7A+");
 8015d0a:	687b      	ldr	r3, [r7, #4]
 8015d0c:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8015d10:	4a6d      	ldr	r2, [pc, #436]	; (8015ec8 <problem_fetch+0x14804>)
 8015d12:	6810      	ldr	r0, [r2, #0]
 8015d14:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 8015d16:	687b      	ldr	r3, [r7, #4]
 8015d18:	2207      	movs	r2, #7
 8015d1a:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"C,C,F,D,G,I,I");
 8015d1c:	687b      	ldr	r3, [r7, #4]
 8015d1e:	33a4      	adds	r3, #164	; 0xa4
 8015d20:	4a6e      	ldr	r2, [pc, #440]	; (8015edc <problem_fetch+0x14818>)
 8015d22:	461c      	mov	r4, r3
 8015d24:	4613      	mov	r3, r2
 8015d26:	cb07      	ldmia	r3!, {r0, r1, r2}
 8015d28:	6020      	str	r0, [r4, #0]
 8015d2a:	6061      	str	r1, [r4, #4]
 8015d2c:	60a2      	str	r2, [r4, #8]
 8015d2e:	881b      	ldrh	r3, [r3, #0]
 8015d30:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,8,11,15,15,10,18");
 8015d32:	687b      	ldr	r3, [r7, #4]
 8015d34:	3304      	adds	r3, #4
 8015d36:	4a6a      	ldr	r2, [pc, #424]	; (8015ee0 <problem_fetch+0x1481c>)
 8015d38:	461d      	mov	r5, r3
 8015d3a:	4614      	mov	r4, r2
 8015d3c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8015d3e:	6028      	str	r0, [r5, #0]
 8015d40:	6069      	str	r1, [r5, #4]
 8015d42:	60aa      	str	r2, [r5, #8]
 8015d44:	60eb      	str	r3, [r5, #12]
 8015d46:	8823      	ldrh	r3, [r4, #0]
 8015d48:	78a2      	ldrb	r2, [r4, #2]
 8015d4a:	822b      	strh	r3, [r5, #16]
 8015d4c:	4613      	mov	r3, r2
 8015d4e:	74ab      	strb	r3, [r5, #18]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 8015d50:	687b      	ldr	r3, [r7, #4]
 8015d52:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8015d56:	4a63      	ldr	r2, [pc, #396]	; (8015ee4 <problem_fetch+0x14820>)
 8015d58:	461c      	mov	r4, r3
 8015d5a:	4613      	mov	r3, r2
 8015d5c:	cb07      	ldmia	r3!, {r0, r1, r2}
 8015d5e:	6020      	str	r0, [r4, #0]
 8015d60:	6061      	str	r1, [r4, #4]
 8015d62:	60a2      	str	r2, [r4, #8]
 8015d64:	881b      	ldrh	r3, [r3, #0]
 8015d66:	81a3      	strh	r3, [r4, #12]
			break;
 8015d68:	f006 bbdc 	b.w	801c524 <problem_fetch+0x1ae60>
		case 604 :
			strcpy(p->name,"ALLIE WARM UP");
 8015d6c:	687b      	ldr	r3, [r7, #4]
 8015d6e:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8015d72:	4a5d      	ldr	r2, [pc, #372]	; (8015ee8 <problem_fetch+0x14824>)
 8015d74:	461c      	mov	r4, r3
 8015d76:	4613      	mov	r3, r2
 8015d78:	cb07      	ldmia	r3!, {r0, r1, r2}
 8015d7a:	6020      	str	r0, [r4, #0]
 8015d7c:	6061      	str	r1, [r4, #4]
 8015d7e:	60a2      	str	r2, [r4, #8]
 8015d80:	881b      	ldrh	r3, [r3, #0]
 8015d82:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade,"6B+");
 8015d84:	687b      	ldr	r3, [r7, #4]
 8015d86:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8015d8a:	4a58      	ldr	r2, [pc, #352]	; (8015eec <problem_fetch+0x14828>)
 8015d8c:	6810      	ldr	r0, [r2, #0]
 8015d8e:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 8015d90:	687b      	ldr	r3, [r7, #4]
 8015d92:	2206      	movs	r2, #6
 8015d94:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"C,E,D,G,J,I");
 8015d96:	687b      	ldr	r3, [r7, #4]
 8015d98:	33a4      	adds	r3, #164	; 0xa4
 8015d9a:	4a55      	ldr	r2, [pc, #340]	; (8015ef0 <problem_fetch+0x1482c>)
 8015d9c:	461c      	mov	r4, r3
 8015d9e:	4613      	mov	r3, r2
 8015da0:	cb07      	ldmia	r3!, {r0, r1, r2}
 8015da2:	6020      	str	r0, [r4, #0]
 8015da4:	6061      	str	r1, [r4, #4]
 8015da6:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,8,11,14,16,18");
 8015da8:	687b      	ldr	r3, [r7, #4]
 8015daa:	3304      	adds	r3, #4
 8015dac:	4a51      	ldr	r2, [pc, #324]	; (8015ef4 <problem_fetch+0x14830>)
 8015dae:	461c      	mov	r4, r3
 8015db0:	4615      	mov	r5, r2
 8015db2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8015db4:	6020      	str	r0, [r4, #0]
 8015db6:	6061      	str	r1, [r4, #4]
 8015db8:	60a2      	str	r2, [r4, #8]
 8015dba:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 8015dbc:	687b      	ldr	r3, [r7, #4]
 8015dbe:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8015dc2:	4a4d      	ldr	r2, [pc, #308]	; (8015ef8 <problem_fetch+0x14834>)
 8015dc4:	461c      	mov	r4, r3
 8015dc6:	4613      	mov	r3, r2
 8015dc8:	cb07      	ldmia	r3!, {r0, r1, r2}
 8015dca:	6020      	str	r0, [r4, #0]
 8015dcc:	6061      	str	r1, [r4, #4]
 8015dce:	60a2      	str	r2, [r4, #8]
			break;
 8015dd0:	f006 bba8 	b.w	801c524 <problem_fetch+0x1ae60>
		case 605 :
			strcpy(p->name,"NEW YEARS DELUSIONS");
 8015dd4:	687b      	ldr	r3, [r7, #4]
 8015dd6:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8015dda:	4a48      	ldr	r2, [pc, #288]	; (8015efc <problem_fetch+0x14838>)
 8015ddc:	461d      	mov	r5, r3
 8015dde:	4614      	mov	r4, r2
 8015de0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8015de2:	6028      	str	r0, [r5, #0]
 8015de4:	6069      	str	r1, [r5, #4]
 8015de6:	60aa      	str	r2, [r5, #8]
 8015de8:	60eb      	str	r3, [r5, #12]
 8015dea:	6820      	ldr	r0, [r4, #0]
 8015dec:	6128      	str	r0, [r5, #16]
			strcpy(p->grade,"7B+");
 8015dee:	687b      	ldr	r3, [r7, #4]
 8015df0:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8015df4:	4a42      	ldr	r2, [pc, #264]	; (8015f00 <problem_fetch+0x1483c>)
 8015df6:	6810      	ldr	r0, [r2, #0]
 8015df8:	6018      	str	r0, [r3, #0]
			p->moveSize = 8;
 8015dfa:	687b      	ldr	r3, [r7, #4]
 8015dfc:	2208      	movs	r2, #8
 8015dfe:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,J,F,G,A,H,D,A");
 8015e00:	687b      	ldr	r3, [r7, #4]
 8015e02:	33a4      	adds	r3, #164	; 0xa4
 8015e04:	4a3f      	ldr	r2, [pc, #252]	; (8015f04 <problem_fetch+0x14840>)
 8015e06:	461c      	mov	r4, r3
 8015e08:	4615      	mov	r5, r2
 8015e0a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8015e0c:	6020      	str	r0, [r4, #0]
 8015e0e:	6061      	str	r1, [r4, #4]
 8015e10:	60a2      	str	r2, [r4, #8]
 8015e12:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,7,11,15,14,8,15,18");
 8015e14:	687b      	ldr	r3, [r7, #4]
 8015e16:	3304      	adds	r3, #4
 8015e18:	4a3b      	ldr	r2, [pc, #236]	; (8015f08 <problem_fetch+0x14844>)
 8015e1a:	461d      	mov	r5, r3
 8015e1c:	4614      	mov	r4, r2
 8015e1e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8015e20:	6028      	str	r0, [r5, #0]
 8015e22:	6069      	str	r1, [r5, #4]
 8015e24:	60aa      	str	r2, [r5, #8]
 8015e26:	60eb      	str	r3, [r5, #12]
 8015e28:	6820      	ldr	r0, [r4, #0]
 8015e2a:	6128      	str	r0, [r5, #16]
 8015e2c:	7923      	ldrb	r3, [r4, #4]
 8015e2e:	752b      	strb	r3, [r5, #20]
			strcpy(p->startFinish,"s,d,d,d,d,d,d,e");
 8015e30:	687b      	ldr	r3, [r7, #4]
 8015e32:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8015e36:	4a35      	ldr	r2, [pc, #212]	; (8015f0c <problem_fetch+0x14848>)
 8015e38:	461c      	mov	r4, r3
 8015e3a:	4615      	mov	r5, r2
 8015e3c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8015e3e:	6020      	str	r0, [r4, #0]
 8015e40:	6061      	str	r1, [r4, #4]
 8015e42:	60a2      	str	r2, [r4, #8]
 8015e44:	60e3      	str	r3, [r4, #12]
			break;
 8015e46:	f006 bb6d 	b.w	801c524 <problem_fetch+0x1ae60>
		case 606 :
			strcpy(p->name,"EAZEEPEAZEE");
 8015e4a:	687b      	ldr	r3, [r7, #4]
 8015e4c:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8015e50:	4a2f      	ldr	r2, [pc, #188]	; (8015f10 <problem_fetch+0x1484c>)
 8015e52:	461c      	mov	r4, r3
 8015e54:	4613      	mov	r3, r2
 8015e56:	cb07      	ldmia	r3!, {r0, r1, r2}
 8015e58:	6020      	str	r0, [r4, #0]
 8015e5a:	6061      	str	r1, [r4, #4]
 8015e5c:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade,"6B+");
 8015e5e:	687b      	ldr	r3, [r7, #4]
 8015e60:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8015e64:	4a21      	ldr	r2, [pc, #132]	; (8015eec <problem_fetch+0x14828>)
 8015e66:	6810      	ldr	r0, [r2, #0]
 8015e68:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 8015e6a:	687b      	ldr	r3, [r7, #4]
 8015e6c:	2206      	movs	r2, #6
 8015e6e:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,J,I,J,H,I");
 8015e70:	687b      	ldr	r3, [r7, #4]
 8015e72:	33a4      	adds	r3, #164	; 0xa4
 8015e74:	4a27      	ldr	r2, [pc, #156]	; (8015f14 <problem_fetch+0x14850>)
 8015e76:	461c      	mov	r4, r3
 8015e78:	4613      	mov	r3, r2
 8015e7a:	cb07      	ldmia	r3!, {r0, r1, r2}
 8015e7c:	6020      	str	r0, [r4, #0]
 8015e7e:	6061      	str	r1, [r4, #4]
 8015e80:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,7,10,13,16,18");
 8015e82:	687b      	ldr	r3, [r7, #4]
 8015e84:	3304      	adds	r3, #4
 8015e86:	4a24      	ldr	r2, [pc, #144]	; (8015f18 <problem_fetch+0x14854>)
 8015e88:	461c      	mov	r4, r3
 8015e8a:	4615      	mov	r5, r2
 8015e8c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8015e8e:	6020      	str	r0, [r4, #0]
 8015e90:	6061      	str	r1, [r4, #4]
 8015e92:	60a2      	str	r2, [r4, #8]
 8015e94:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 8015e96:	687b      	ldr	r3, [r7, #4]
 8015e98:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8015e9c:	4a16      	ldr	r2, [pc, #88]	; (8015ef8 <problem_fetch+0x14834>)
 8015e9e:	461c      	mov	r4, r3
 8015ea0:	4613      	mov	r3, r2
 8015ea2:	cb07      	ldmia	r3!, {r0, r1, r2}
 8015ea4:	6020      	str	r0, [r4, #0]
 8015ea6:	6061      	str	r1, [r4, #4]
 8015ea8:	60a2      	str	r2, [r4, #8]
			break;
 8015eaa:	f006 bb3b 	b.w	801c524 <problem_fetch+0x1ae60>
 8015eae:	bf00      	nop
 8015eb0:	0802aa98 	.word	0x0802aa98
 8015eb4:	08023814 	.word	0x08023814
 8015eb8:	0802aaa8 	.word	0x0802aaa8
 8015ebc:	0802aac0 	.word	0x0802aac0
 8015ec0:	080271b4 	.word	0x080271b4
 8015ec4:	0802aadc 	.word	0x0802aadc
 8015ec8:	080239f4 	.word	0x080239f4
 8015ecc:	0802aaec 	.word	0x0802aaec
 8015ed0:	0802aaf8 	.word	0x0802aaf8
 8015ed4:	08023d20 	.word	0x08023d20
 8015ed8:	0802ab08 	.word	0x0802ab08
 8015edc:	0802ab1c 	.word	0x0802ab1c
 8015ee0:	0802ab2c 	.word	0x0802ab2c
 8015ee4:	080239dc 	.word	0x080239dc
 8015ee8:	0802ab40 	.word	0x0802ab40
 8015eec:	08023854 	.word	0x08023854
 8015ef0:	0802ab50 	.word	0x0802ab50
 8015ef4:	0802ab5c 	.word	0x0802ab5c
 8015ef8:	08023bf0 	.word	0x08023bf0
 8015efc:	0802ab6c 	.word	0x0802ab6c
 8015f00:	08023990 	.word	0x08023990
 8015f04:	0802ab80 	.word	0x0802ab80
 8015f08:	0802ab90 	.word	0x0802ab90
 8015f0c:	08023a64 	.word	0x08023a64
 8015f10:	0802aba8 	.word	0x0802aba8
 8015f14:	0802abb4 	.word	0x0802abb4
 8015f18:	0802abc0 	.word	0x0802abc0
		case 607 :
			strcpy(p->name,"THE YEAR OF THE ROOSTER");
 8015f1c:	687b      	ldr	r3, [r7, #4]
 8015f1e:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8015f22:	4ac3      	ldr	r2, [pc, #780]	; (8016230 <problem_fetch+0x14b6c>)
 8015f24:	461d      	mov	r5, r3
 8015f26:	4614      	mov	r4, r2
 8015f28:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8015f2a:	6028      	str	r0, [r5, #0]
 8015f2c:	6069      	str	r1, [r5, #4]
 8015f2e:	60aa      	str	r2, [r5, #8]
 8015f30:	60eb      	str	r3, [r5, #12]
 8015f32:	cc03      	ldmia	r4!, {r0, r1}
 8015f34:	6128      	str	r0, [r5, #16]
 8015f36:	6169      	str	r1, [r5, #20]
			strcpy(p->grade,"7B+");
 8015f38:	687b      	ldr	r3, [r7, #4]
 8015f3a:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8015f3e:	4abd      	ldr	r2, [pc, #756]	; (8016234 <problem_fetch+0x14b70>)
 8015f40:	6810      	ldr	r0, [r2, #0]
 8015f42:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 8015f44:	687b      	ldr	r3, [r7, #4]
 8015f46:	2207      	movs	r2, #7
 8015f48:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"B,C,E,E,F,G,I");
 8015f4a:	687b      	ldr	r3, [r7, #4]
 8015f4c:	33a4      	adds	r3, #164	; 0xa4
 8015f4e:	4aba      	ldr	r2, [pc, #744]	; (8016238 <problem_fetch+0x14b74>)
 8015f50:	461c      	mov	r4, r3
 8015f52:	4613      	mov	r3, r2
 8015f54:	cb07      	ldmia	r3!, {r0, r1, r2}
 8015f56:	6020      	str	r0, [r4, #0]
 8015f58:	6061      	str	r1, [r4, #4]
 8015f5a:	60a2      	str	r2, [r4, #8]
 8015f5c:	881b      	ldrh	r3, [r3, #0]
 8015f5e:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"12,5,9,14,13,6,18");
 8015f60:	687b      	ldr	r3, [r7, #4]
 8015f62:	3304      	adds	r3, #4
 8015f64:	4ab5      	ldr	r2, [pc, #724]	; (801623c <problem_fetch+0x14b78>)
 8015f66:	461d      	mov	r5, r3
 8015f68:	4614      	mov	r4, r2
 8015f6a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8015f6c:	6028      	str	r0, [r5, #0]
 8015f6e:	6069      	str	r1, [r5, #4]
 8015f70:	60aa      	str	r2, [r5, #8]
 8015f72:	60eb      	str	r3, [r5, #12]
 8015f74:	8823      	ldrh	r3, [r4, #0]
 8015f76:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"d,d,d,d,d,s,e");
 8015f78:	687b      	ldr	r3, [r7, #4]
 8015f7a:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8015f7e:	4ab0      	ldr	r2, [pc, #704]	; (8016240 <problem_fetch+0x14b7c>)
 8015f80:	461c      	mov	r4, r3
 8015f82:	4613      	mov	r3, r2
 8015f84:	cb07      	ldmia	r3!, {r0, r1, r2}
 8015f86:	6020      	str	r0, [r4, #0]
 8015f88:	6061      	str	r1, [r4, #4]
 8015f8a:	60a2      	str	r2, [r4, #8]
 8015f8c:	881b      	ldrh	r3, [r3, #0]
 8015f8e:	81a3      	strh	r3, [r4, #12]
			break;
 8015f90:	f006 bac8 	b.w	801c524 <problem_fetch+0x1ae60>
		case 608 :
			strcpy(p->name,"PEACHY");
 8015f94:	687b      	ldr	r3, [r7, #4]
 8015f96:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8015f9a:	4aaa      	ldr	r2, [pc, #680]	; (8016244 <problem_fetch+0x14b80>)
 8015f9c:	6810      	ldr	r0, [r2, #0]
 8015f9e:	6018      	str	r0, [r3, #0]
 8015fa0:	8891      	ldrh	r1, [r2, #4]
 8015fa2:	7992      	ldrb	r2, [r2, #6]
 8015fa4:	8099      	strh	r1, [r3, #4]
 8015fa6:	719a      	strb	r2, [r3, #6]
			strcpy(p->grade,"6C");
 8015fa8:	687b      	ldr	r3, [r7, #4]
 8015faa:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8015fae:	4aa6      	ldr	r2, [pc, #664]	; (8016248 <problem_fetch+0x14b84>)
 8015fb0:	8811      	ldrh	r1, [r2, #0]
 8015fb2:	7892      	ldrb	r2, [r2, #2]
 8015fb4:	8019      	strh	r1, [r3, #0]
 8015fb6:	709a      	strb	r2, [r3, #2]
			p->moveSize = 7;
 8015fb8:	687b      	ldr	r3, [r7, #4]
 8015fba:	2207      	movs	r2, #7
 8015fbc:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"H,H,C,F,C,D,A");
 8015fbe:	687b      	ldr	r3, [r7, #4]
 8015fc0:	33a4      	adds	r3, #164	; 0xa4
 8015fc2:	4aa2      	ldr	r2, [pc, #648]	; (801624c <problem_fetch+0x14b88>)
 8015fc4:	461c      	mov	r4, r3
 8015fc6:	4613      	mov	r3, r2
 8015fc8:	cb07      	ldmia	r3!, {r0, r1, r2}
 8015fca:	6020      	str	r0, [r4, #0]
 8015fcc:	6061      	str	r1, [r4, #4]
 8015fce:	60a2      	str	r2, [r4, #8]
 8015fd0:	881b      	ldrh	r3, [r3, #0]
 8015fd2:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,8,8,11,13,15,18");
 8015fd4:	687b      	ldr	r3, [r7, #4]
 8015fd6:	3304      	adds	r3, #4
 8015fd8:	4a9d      	ldr	r2, [pc, #628]	; (8016250 <problem_fetch+0x14b8c>)
 8015fda:	461d      	mov	r5, r3
 8015fdc:	4614      	mov	r4, r2
 8015fde:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8015fe0:	6028      	str	r0, [r5, #0]
 8015fe2:	6069      	str	r1, [r5, #4]
 8015fe4:	60aa      	str	r2, [r5, #8]
 8015fe6:	60eb      	str	r3, [r5, #12]
 8015fe8:	8823      	ldrh	r3, [r4, #0]
 8015fea:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 8015fec:	687b      	ldr	r3, [r7, #4]
 8015fee:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8015ff2:	4a98      	ldr	r2, [pc, #608]	; (8016254 <problem_fetch+0x14b90>)
 8015ff4:	461c      	mov	r4, r3
 8015ff6:	4613      	mov	r3, r2
 8015ff8:	cb07      	ldmia	r3!, {r0, r1, r2}
 8015ffa:	6020      	str	r0, [r4, #0]
 8015ffc:	6061      	str	r1, [r4, #4]
 8015ffe:	60a2      	str	r2, [r4, #8]
 8016000:	881b      	ldrh	r3, [r3, #0]
 8016002:	81a3      	strh	r3, [r4, #12]
			break;
 8016004:	f006 ba8e 	b.w	801c524 <problem_fetch+0x1ae60>
		case 609 :
			strcpy(p->name,"UFO@5");
 8016008:	687b      	ldr	r3, [r7, #4]
 801600a:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801600e:	4a92      	ldr	r2, [pc, #584]	; (8016258 <problem_fetch+0x14b94>)
 8016010:	6810      	ldr	r0, [r2, #0]
 8016012:	6018      	str	r0, [r3, #0]
 8016014:	8892      	ldrh	r2, [r2, #4]
 8016016:	809a      	strh	r2, [r3, #4]
			strcpy(p->grade,"6B+");
 8016018:	687b      	ldr	r3, [r7, #4]
 801601a:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801601e:	4a8f      	ldr	r2, [pc, #572]	; (801625c <problem_fetch+0x14b98>)
 8016020:	6810      	ldr	r0, [r2, #0]
 8016022:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 8016024:	687b      	ldr	r3, [r7, #4]
 8016026:	2206      	movs	r2, #6
 8016028:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,K,I,I,E,D");
 801602a:	687b      	ldr	r3, [r7, #4]
 801602c:	33a4      	adds	r3, #164	; 0xa4
 801602e:	4a8c      	ldr	r2, [pc, #560]	; (8016260 <problem_fetch+0x14b9c>)
 8016030:	461c      	mov	r4, r3
 8016032:	4613      	mov	r3, r2
 8016034:	cb07      	ldmia	r3!, {r0, r1, r2}
 8016036:	6020      	str	r0, [r4, #0]
 8016038:	6061      	str	r1, [r4, #4]
 801603a:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,9,10,14,16,18");
 801603c:	687b      	ldr	r3, [r7, #4]
 801603e:	3304      	adds	r3, #4
 8016040:	4a88      	ldr	r2, [pc, #544]	; (8016264 <problem_fetch+0x14ba0>)
 8016042:	461c      	mov	r4, r3
 8016044:	4615      	mov	r5, r2
 8016046:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8016048:	6020      	str	r0, [r4, #0]
 801604a:	6061      	str	r1, [r4, #4]
 801604c:	60a2      	str	r2, [r4, #8]
 801604e:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 8016050:	687b      	ldr	r3, [r7, #4]
 8016052:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8016056:	4a84      	ldr	r2, [pc, #528]	; (8016268 <problem_fetch+0x14ba4>)
 8016058:	461c      	mov	r4, r3
 801605a:	4613      	mov	r3, r2
 801605c:	cb07      	ldmia	r3!, {r0, r1, r2}
 801605e:	6020      	str	r0, [r4, #0]
 8016060:	6061      	str	r1, [r4, #4]
 8016062:	60a2      	str	r2, [r4, #8]
			break;
 8016064:	f006 ba5e 	b.w	801c524 <problem_fetch+0x1ae60>
		case 610 :
			strcpy(p->name,"HUNTED BY GUSTAV");
 8016068:	687b      	ldr	r3, [r7, #4]
 801606a:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801606e:	4a7f      	ldr	r2, [pc, #508]	; (801626c <problem_fetch+0x14ba8>)
 8016070:	461d      	mov	r5, r3
 8016072:	4614      	mov	r4, r2
 8016074:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8016076:	6028      	str	r0, [r5, #0]
 8016078:	6069      	str	r1, [r5, #4]
 801607a:	60aa      	str	r2, [r5, #8]
 801607c:	60eb      	str	r3, [r5, #12]
 801607e:	7823      	ldrb	r3, [r4, #0]
 8016080:	742b      	strb	r3, [r5, #16]
			strcpy(p->grade,"6C+");
 8016082:	687b      	ldr	r3, [r7, #4]
 8016084:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8016088:	4a79      	ldr	r2, [pc, #484]	; (8016270 <problem_fetch+0x14bac>)
 801608a:	6810      	ldr	r0, [r2, #0]
 801608c:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 801608e:	687b      	ldr	r3, [r7, #4]
 8016090:	2207      	movs	r2, #7
 8016092:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,H,C,F,A,D,A");
 8016094:	687b      	ldr	r3, [r7, #4]
 8016096:	33a4      	adds	r3, #164	; 0xa4
 8016098:	4a76      	ldr	r2, [pc, #472]	; (8016274 <problem_fetch+0x14bb0>)
 801609a:	461c      	mov	r4, r3
 801609c:	4613      	mov	r3, r2
 801609e:	cb07      	ldmia	r3!, {r0, r1, r2}
 80160a0:	6020      	str	r0, [r4, #0]
 80160a2:	6061      	str	r1, [r4, #4]
 80160a4:	60a2      	str	r2, [r4, #8]
 80160a6:	881b      	ldrh	r3, [r3, #0]
 80160a8:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,8,8,11,14,15,18");
 80160aa:	687b      	ldr	r3, [r7, #4]
 80160ac:	3304      	adds	r3, #4
 80160ae:	4a72      	ldr	r2, [pc, #456]	; (8016278 <problem_fetch+0x14bb4>)
 80160b0:	461d      	mov	r5, r3
 80160b2:	4614      	mov	r4, r2
 80160b4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80160b6:	6028      	str	r0, [r5, #0]
 80160b8:	6069      	str	r1, [r5, #4]
 80160ba:	60aa      	str	r2, [r5, #8]
 80160bc:	60eb      	str	r3, [r5, #12]
 80160be:	8823      	ldrh	r3, [r4, #0]
 80160c0:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 80160c2:	687b      	ldr	r3, [r7, #4]
 80160c4:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 80160c8:	4a62      	ldr	r2, [pc, #392]	; (8016254 <problem_fetch+0x14b90>)
 80160ca:	461c      	mov	r4, r3
 80160cc:	4613      	mov	r3, r2
 80160ce:	cb07      	ldmia	r3!, {r0, r1, r2}
 80160d0:	6020      	str	r0, [r4, #0]
 80160d2:	6061      	str	r1, [r4, #4]
 80160d4:	60a2      	str	r2, [r4, #8]
 80160d6:	881b      	ldrh	r3, [r3, #0]
 80160d8:	81a3      	strh	r3, [r4, #12]
			break;
 80160da:	f006 ba23 	b.w	801c524 <problem_fetch+0x1ae60>
		case 611 :
			strcpy(p->name,"BOTTLE SERVICE");
 80160de:	687b      	ldr	r3, [r7, #4]
 80160e0:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80160e4:	4a65      	ldr	r2, [pc, #404]	; (801627c <problem_fetch+0x14bb8>)
 80160e6:	461c      	mov	r4, r3
 80160e8:	4613      	mov	r3, r2
 80160ea:	cb07      	ldmia	r3!, {r0, r1, r2}
 80160ec:	6020      	str	r0, [r4, #0]
 80160ee:	6061      	str	r1, [r4, #4]
 80160f0:	60a2      	str	r2, [r4, #8]
 80160f2:	881a      	ldrh	r2, [r3, #0]
 80160f4:	789b      	ldrb	r3, [r3, #2]
 80160f6:	81a2      	strh	r2, [r4, #12]
 80160f8:	73a3      	strb	r3, [r4, #14]
			strcpy(p->grade,"7A");
 80160fa:	687b      	ldr	r3, [r7, #4]
 80160fc:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8016100:	4a5f      	ldr	r2, [pc, #380]	; (8016280 <problem_fetch+0x14bbc>)
 8016102:	8811      	ldrh	r1, [r2, #0]
 8016104:	7892      	ldrb	r2, [r2, #2]
 8016106:	8019      	strh	r1, [r3, #0]
 8016108:	709a      	strb	r2, [r3, #2]
			p->moveSize = 6;
 801610a:	687b      	ldr	r3, [r7, #4]
 801610c:	2206      	movs	r2, #6
 801610e:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,J,I,K,G,I");
 8016110:	687b      	ldr	r3, [r7, #4]
 8016112:	33a4      	adds	r3, #164	; 0xa4
 8016114:	4a5b      	ldr	r2, [pc, #364]	; (8016284 <problem_fetch+0x14bc0>)
 8016116:	461c      	mov	r4, r3
 8016118:	4613      	mov	r3, r2
 801611a:	cb07      	ldmia	r3!, {r0, r1, r2}
 801611c:	6020      	str	r0, [r4, #0]
 801611e:	6061      	str	r1, [r4, #4]
 8016120:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,5,10,14,15,18");
 8016122:	687b      	ldr	r3, [r7, #4]
 8016124:	3304      	adds	r3, #4
 8016126:	4a58      	ldr	r2, [pc, #352]	; (8016288 <problem_fetch+0x14bc4>)
 8016128:	461c      	mov	r4, r3
 801612a:	4615      	mov	r5, r2
 801612c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801612e:	6020      	str	r0, [r4, #0]
 8016130:	6061      	str	r1, [r4, #4]
 8016132:	60a2      	str	r2, [r4, #8]
 8016134:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,s,d,d,d,e");
 8016136:	687b      	ldr	r3, [r7, #4]
 8016138:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 801613c:	4a53      	ldr	r2, [pc, #332]	; (801628c <problem_fetch+0x14bc8>)
 801613e:	461c      	mov	r4, r3
 8016140:	4613      	mov	r3, r2
 8016142:	cb07      	ldmia	r3!, {r0, r1, r2}
 8016144:	6020      	str	r0, [r4, #0]
 8016146:	6061      	str	r1, [r4, #4]
 8016148:	60a2      	str	r2, [r4, #8]
			break;
 801614a:	f006 b9eb 	b.w	801c524 <problem_fetch+0x1ae60>
		case 612 :
			strcpy(p->name,"FOX AND JAX");
 801614e:	687b      	ldr	r3, [r7, #4]
 8016150:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8016154:	4a4e      	ldr	r2, [pc, #312]	; (8016290 <problem_fetch+0x14bcc>)
 8016156:	461c      	mov	r4, r3
 8016158:	4613      	mov	r3, r2
 801615a:	cb07      	ldmia	r3!, {r0, r1, r2}
 801615c:	6020      	str	r0, [r4, #0]
 801615e:	6061      	str	r1, [r4, #4]
 8016160:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade,"6C");
 8016162:	687b      	ldr	r3, [r7, #4]
 8016164:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8016168:	4a37      	ldr	r2, [pc, #220]	; (8016248 <problem_fetch+0x14b84>)
 801616a:	8811      	ldrh	r1, [r2, #0]
 801616c:	7892      	ldrb	r2, [r2, #2]
 801616e:	8019      	strh	r1, [r3, #0]
 8016170:	709a      	strb	r2, [r3, #2]
			p->moveSize = 5;
 8016172:	687b      	ldr	r3, [r7, #4]
 8016174:	2205      	movs	r2, #5
 8016176:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,H,F,I,I");
 8016178:	687b      	ldr	r3, [r7, #4]
 801617a:	33a4      	adds	r3, #164	; 0xa4
 801617c:	4945      	ldr	r1, [pc, #276]	; (8016294 <problem_fetch+0x14bd0>)
 801617e:	461a      	mov	r2, r3
 8016180:	460b      	mov	r3, r1
 8016182:	cb03      	ldmia	r3!, {r0, r1}
 8016184:	6010      	str	r0, [r2, #0]
 8016186:	6051      	str	r1, [r2, #4]
 8016188:	881b      	ldrh	r3, [r3, #0]
 801618a:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"4,8,11,14,18");
 801618c:	687b      	ldr	r3, [r7, #4]
 801618e:	3304      	adds	r3, #4
 8016190:	4a41      	ldr	r2, [pc, #260]	; (8016298 <problem_fetch+0x14bd4>)
 8016192:	461c      	mov	r4, r3
 8016194:	4613      	mov	r3, r2
 8016196:	cb07      	ldmia	r3!, {r0, r1, r2}
 8016198:	6020      	str	r0, [r4, #0]
 801619a:	6061      	str	r1, [r4, #4]
 801619c:	60a2      	str	r2, [r4, #8]
 801619e:	781b      	ldrb	r3, [r3, #0]
 80161a0:	7323      	strb	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,e");
 80161a2:	687b      	ldr	r3, [r7, #4]
 80161a4:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 80161a8:	493c      	ldr	r1, [pc, #240]	; (801629c <problem_fetch+0x14bd8>)
 80161aa:	461a      	mov	r2, r3
 80161ac:	460b      	mov	r3, r1
 80161ae:	cb03      	ldmia	r3!, {r0, r1}
 80161b0:	6010      	str	r0, [r2, #0]
 80161b2:	6051      	str	r1, [r2, #4]
 80161b4:	881b      	ldrh	r3, [r3, #0]
 80161b6:	8113      	strh	r3, [r2, #8]
			break;
 80161b8:	f006 b9b4 	b.w	801c524 <problem_fetch+0x1ae60>
		case 613 :
			strcpy(p->name,"GOT A LICENSE TO KILL");
 80161bc:	687b      	ldr	r3, [r7, #4]
 80161be:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80161c2:	4a37      	ldr	r2, [pc, #220]	; (80162a0 <problem_fetch+0x14bdc>)
 80161c4:	461d      	mov	r5, r3
 80161c6:	4614      	mov	r4, r2
 80161c8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80161ca:	6028      	str	r0, [r5, #0]
 80161cc:	6069      	str	r1, [r5, #4]
 80161ce:	60aa      	str	r2, [r5, #8]
 80161d0:	60eb      	str	r3, [r5, #12]
 80161d2:	6820      	ldr	r0, [r4, #0]
 80161d4:	6128      	str	r0, [r5, #16]
 80161d6:	88a3      	ldrh	r3, [r4, #4]
 80161d8:	82ab      	strh	r3, [r5, #20]
			strcpy(p->grade,"7C");
 80161da:	687b      	ldr	r3, [r7, #4]
 80161dc:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80161e0:	4a30      	ldr	r2, [pc, #192]	; (80162a4 <problem_fetch+0x14be0>)
 80161e2:	8811      	ldrh	r1, [r2, #0]
 80161e4:	7892      	ldrb	r2, [r2, #2]
 80161e6:	8019      	strh	r1, [r3, #0]
 80161e8:	709a      	strb	r2, [r3, #2]
			p->moveSize = 6;
 80161ea:	687b      	ldr	r3, [r7, #4]
 80161ec:	2206      	movs	r2, #6
 80161ee:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,I,G,B,F,A");
 80161f0:	687b      	ldr	r3, [r7, #4]
 80161f2:	33a4      	adds	r3, #164	; 0xa4
 80161f4:	4a2c      	ldr	r2, [pc, #176]	; (80162a8 <problem_fetch+0x14be4>)
 80161f6:	461c      	mov	r4, r3
 80161f8:	4613      	mov	r3, r2
 80161fa:	cb07      	ldmia	r3!, {r0, r1, r2}
 80161fc:	6020      	str	r0, [r4, #0]
 80161fe:	6061      	str	r1, [r4, #4]
 8016200:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,9,14,15,11,18");
 8016202:	687b      	ldr	r3, [r7, #4]
 8016204:	3304      	adds	r3, #4
 8016206:	4a29      	ldr	r2, [pc, #164]	; (80162ac <problem_fetch+0x14be8>)
 8016208:	461c      	mov	r4, r3
 801620a:	4615      	mov	r5, r2
 801620c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801620e:	6020      	str	r0, [r4, #0]
 8016210:	6061      	str	r1, [r4, #4]
 8016212:	60a2      	str	r2, [r4, #8]
 8016214:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 8016216:	687b      	ldr	r3, [r7, #4]
 8016218:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 801621c:	4a12      	ldr	r2, [pc, #72]	; (8016268 <problem_fetch+0x14ba4>)
 801621e:	461c      	mov	r4, r3
 8016220:	4613      	mov	r3, r2
 8016222:	cb07      	ldmia	r3!, {r0, r1, r2}
 8016224:	6020      	str	r0, [r4, #0]
 8016226:	6061      	str	r1, [r4, #4]
 8016228:	60a2      	str	r2, [r4, #8]
			break;
 801622a:	f006 b97b 	b.w	801c524 <problem_fetch+0x1ae60>
 801622e:	bf00      	nop
 8016230:	0802abd0 	.word	0x0802abd0
 8016234:	08023990 	.word	0x08023990
 8016238:	0802abe8 	.word	0x0802abe8
 801623c:	0802abf8 	.word	0x0802abf8
 8016240:	0802ac0c 	.word	0x0802ac0c
 8016244:	0802ac1c 	.word	0x0802ac1c
 8016248:	08023920 	.word	0x08023920
 801624c:	0802a2b4 	.word	0x0802a2b4
 8016250:	0802853c 	.word	0x0802853c
 8016254:	080239dc 	.word	0x080239dc
 8016258:	0802ac24 	.word	0x0802ac24
 801625c:	08023854 	.word	0x08023854
 8016260:	0802ac2c 	.word	0x0802ac2c
 8016264:	0802ac38 	.word	0x0802ac38
 8016268:	08023bf0 	.word	0x08023bf0
 801626c:	0802ac48 	.word	0x0802ac48
 8016270:	080238ec 	.word	0x080238ec
 8016274:	0802ac5c 	.word	0x0802ac5c
 8016278:	0802ac6c 	.word	0x0802ac6c
 801627c:	0802ac80 	.word	0x0802ac80
 8016280:	08023814 	.word	0x08023814
 8016284:	0802ac90 	.word	0x0802ac90
 8016288:	0802ac9c 	.word	0x0802ac9c
 801628c:	08023834 	.word	0x08023834
 8016290:	0802acac 	.word	0x0802acac
 8016294:	0802acb8 	.word	0x0802acb8
 8016298:	08024f88 	.word	0x08024f88
 801629c:	08023d20 	.word	0x08023d20
 80162a0:	0802acc4 	.word	0x0802acc4
 80162a4:	08024088 	.word	0x08024088
 80162a8:	0802acdc 	.word	0x0802acdc
 80162ac:	0802ace8 	.word	0x0802ace8
		case 614 :
			strcpy(p->name,"JET-BLACK HAIR");
 80162b0:	687b      	ldr	r3, [r7, #4]
 80162b2:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80162b6:	4ac1      	ldr	r2, [pc, #772]	; (80165bc <problem_fetch+0x14ef8>)
 80162b8:	461c      	mov	r4, r3
 80162ba:	4613      	mov	r3, r2
 80162bc:	cb07      	ldmia	r3!, {r0, r1, r2}
 80162be:	6020      	str	r0, [r4, #0]
 80162c0:	6061      	str	r1, [r4, #4]
 80162c2:	60a2      	str	r2, [r4, #8]
 80162c4:	881a      	ldrh	r2, [r3, #0]
 80162c6:	789b      	ldrb	r3, [r3, #2]
 80162c8:	81a2      	strh	r2, [r4, #12]
 80162ca:	73a3      	strb	r3, [r4, #14]
			strcpy(p->grade,"7B+");
 80162cc:	687b      	ldr	r3, [r7, #4]
 80162ce:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80162d2:	4abb      	ldr	r2, [pc, #748]	; (80165c0 <problem_fetch+0x14efc>)
 80162d4:	6810      	ldr	r0, [r2, #0]
 80162d6:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 80162d8:	687b      	ldr	r3, [r7, #4]
 80162da:	2206      	movs	r2, #6
 80162dc:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,I,H,G,D,A");
 80162de:	687b      	ldr	r3, [r7, #4]
 80162e0:	33a4      	adds	r3, #164	; 0xa4
 80162e2:	4ab8      	ldr	r2, [pc, #736]	; (80165c4 <problem_fetch+0x14f00>)
 80162e4:	461c      	mov	r4, r3
 80162e6:	4613      	mov	r3, r2
 80162e8:	cb07      	ldmia	r3!, {r0, r1, r2}
 80162ea:	6020      	str	r0, [r4, #0]
 80162ec:	6061      	str	r1, [r4, #4]
 80162ee:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,9,12,14,15,18");
 80162f0:	687b      	ldr	r3, [r7, #4]
 80162f2:	3304      	adds	r3, #4
 80162f4:	4ab4      	ldr	r2, [pc, #720]	; (80165c8 <problem_fetch+0x14f04>)
 80162f6:	461c      	mov	r4, r3
 80162f8:	4615      	mov	r5, r2
 80162fa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80162fc:	6020      	str	r0, [r4, #0]
 80162fe:	6061      	str	r1, [r4, #4]
 8016300:	60a2      	str	r2, [r4, #8]
 8016302:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 8016304:	687b      	ldr	r3, [r7, #4]
 8016306:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 801630a:	4ab0      	ldr	r2, [pc, #704]	; (80165cc <problem_fetch+0x14f08>)
 801630c:	461c      	mov	r4, r3
 801630e:	4613      	mov	r3, r2
 8016310:	cb07      	ldmia	r3!, {r0, r1, r2}
 8016312:	6020      	str	r0, [r4, #0]
 8016314:	6061      	str	r1, [r4, #4]
 8016316:	60a2      	str	r2, [r4, #8]
			break;
 8016318:	f006 b904 	b.w	801c524 <problem_fetch+0x1ae60>
		case 615 :
			strcpy(p->name,"BLACK CRAPPIE");
 801631c:	687b      	ldr	r3, [r7, #4]
 801631e:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8016322:	4aab      	ldr	r2, [pc, #684]	; (80165d0 <problem_fetch+0x14f0c>)
 8016324:	461c      	mov	r4, r3
 8016326:	4613      	mov	r3, r2
 8016328:	cb07      	ldmia	r3!, {r0, r1, r2}
 801632a:	6020      	str	r0, [r4, #0]
 801632c:	6061      	str	r1, [r4, #4]
 801632e:	60a2      	str	r2, [r4, #8]
 8016330:	881b      	ldrh	r3, [r3, #0]
 8016332:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade,"6C+");
 8016334:	687b      	ldr	r3, [r7, #4]
 8016336:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801633a:	4aa6      	ldr	r2, [pc, #664]	; (80165d4 <problem_fetch+0x14f10>)
 801633c:	6810      	ldr	r0, [r2, #0]
 801633e:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 8016340:	687b      	ldr	r3, [r7, #4]
 8016342:	2206      	movs	r2, #6
 8016344:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,G,A,E,A,D");
 8016346:	687b      	ldr	r3, [r7, #4]
 8016348:	33a4      	adds	r3, #164	; 0xa4
 801634a:	4aa3      	ldr	r2, [pc, #652]	; (80165d8 <problem_fetch+0x14f14>)
 801634c:	461c      	mov	r4, r3
 801634e:	4613      	mov	r3, r2
 8016350:	cb07      	ldmia	r3!, {r0, r1, r2}
 8016352:	6020      	str	r0, [r4, #0]
 8016354:	6061      	str	r1, [r4, #4]
 8016356:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,9,9,12,14,18");
 8016358:	687b      	ldr	r3, [r7, #4]
 801635a:	3304      	adds	r3, #4
 801635c:	4a9f      	ldr	r2, [pc, #636]	; (80165dc <problem_fetch+0x14f18>)
 801635e:	461c      	mov	r4, r3
 8016360:	4613      	mov	r3, r2
 8016362:	cb07      	ldmia	r3!, {r0, r1, r2}
 8016364:	6020      	str	r0, [r4, #0]
 8016366:	6061      	str	r1, [r4, #4]
 8016368:	60a2      	str	r2, [r4, #8]
 801636a:	881a      	ldrh	r2, [r3, #0]
 801636c:	789b      	ldrb	r3, [r3, #2]
 801636e:	81a2      	strh	r2, [r4, #12]
 8016370:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 8016372:	687b      	ldr	r3, [r7, #4]
 8016374:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8016378:	4a94      	ldr	r2, [pc, #592]	; (80165cc <problem_fetch+0x14f08>)
 801637a:	461c      	mov	r4, r3
 801637c:	4613      	mov	r3, r2
 801637e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8016380:	6020      	str	r0, [r4, #0]
 8016382:	6061      	str	r1, [r4, #4]
 8016384:	60a2      	str	r2, [r4, #8]
			break;
 8016386:	f006 b8cd 	b.w	801c524 <problem_fetch+0x1ae60>
		case 616 :
			strcpy(p->name,"BLACK KISS BLACK");
 801638a:	687b      	ldr	r3, [r7, #4]
 801638c:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8016390:	4a93      	ldr	r2, [pc, #588]	; (80165e0 <problem_fetch+0x14f1c>)
 8016392:	461d      	mov	r5, r3
 8016394:	4614      	mov	r4, r2
 8016396:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8016398:	6028      	str	r0, [r5, #0]
 801639a:	6069      	str	r1, [r5, #4]
 801639c:	60aa      	str	r2, [r5, #8]
 801639e:	60eb      	str	r3, [r5, #12]
 80163a0:	7823      	ldrb	r3, [r4, #0]
 80163a2:	742b      	strb	r3, [r5, #16]
			strcpy(p->grade,"6C");
 80163a4:	687b      	ldr	r3, [r7, #4]
 80163a6:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80163aa:	4a8e      	ldr	r2, [pc, #568]	; (80165e4 <problem_fetch+0x14f20>)
 80163ac:	8811      	ldrh	r1, [r2, #0]
 80163ae:	7892      	ldrb	r2, [r2, #2]
 80163b0:	8019      	strh	r1, [r3, #0]
 80163b2:	709a      	strb	r2, [r3, #2]
			p->moveSize = 8;
 80163b4:	687b      	ldr	r3, [r7, #4]
 80163b6:	2208      	movs	r2, #8
 80163b8:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,H,C,H,C,G,E,I");
 80163ba:	687b      	ldr	r3, [r7, #4]
 80163bc:	33a4      	adds	r3, #164	; 0xa4
 80163be:	4a8a      	ldr	r2, [pc, #552]	; (80165e8 <problem_fetch+0x14f24>)
 80163c0:	461c      	mov	r4, r3
 80163c2:	4615      	mov	r5, r2
 80163c4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80163c6:	6020      	str	r0, [r4, #0]
 80163c8:	6061      	str	r1, [r4, #4]
 80163ca:	60a2      	str	r2, [r4, #8]
 80163cc:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,8,8,10,13,14,16,18");
 80163ce:	687b      	ldr	r3, [r7, #4]
 80163d0:	3304      	adds	r3, #4
 80163d2:	4a86      	ldr	r2, [pc, #536]	; (80165ec <problem_fetch+0x14f28>)
 80163d4:	461d      	mov	r5, r3
 80163d6:	4614      	mov	r4, r2
 80163d8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80163da:	6028      	str	r0, [r5, #0]
 80163dc:	6069      	str	r1, [r5, #4]
 80163de:	60aa      	str	r2, [r5, #8]
 80163e0:	60eb      	str	r3, [r5, #12]
 80163e2:	6820      	ldr	r0, [r4, #0]
 80163e4:	6128      	str	r0, [r5, #16]
 80163e6:	7923      	ldrb	r3, [r4, #4]
 80163e8:	752b      	strb	r3, [r5, #20]
			strcpy(p->startFinish,"s,d,d,d,d,d,d,e");
 80163ea:	687b      	ldr	r3, [r7, #4]
 80163ec:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 80163f0:	4a7f      	ldr	r2, [pc, #508]	; (80165f0 <problem_fetch+0x14f2c>)
 80163f2:	461c      	mov	r4, r3
 80163f4:	4615      	mov	r5, r2
 80163f6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80163f8:	6020      	str	r0, [r4, #0]
 80163fa:	6061      	str	r1, [r4, #4]
 80163fc:	60a2      	str	r2, [r4, #8]
 80163fe:	60e3      	str	r3, [r4, #12]
			break;
 8016400:	f006 b890 	b.w	801c524 <problem_fetch+0x1ae60>
		case 617 :
			strcpy(p->name,"GORILLA NR.2");
 8016404:	687b      	ldr	r3, [r7, #4]
 8016406:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801640a:	4a7a      	ldr	r2, [pc, #488]	; (80165f4 <problem_fetch+0x14f30>)
 801640c:	461c      	mov	r4, r3
 801640e:	4613      	mov	r3, r2
 8016410:	cb07      	ldmia	r3!, {r0, r1, r2}
 8016412:	6020      	str	r0, [r4, #0]
 8016414:	6061      	str	r1, [r4, #4]
 8016416:	60a2      	str	r2, [r4, #8]
 8016418:	781b      	ldrb	r3, [r3, #0]
 801641a:	7323      	strb	r3, [r4, #12]
			strcpy(p->grade,"7A+");
 801641c:	687b      	ldr	r3, [r7, #4]
 801641e:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8016422:	4a75      	ldr	r2, [pc, #468]	; (80165f8 <problem_fetch+0x14f34>)
 8016424:	6810      	ldr	r0, [r2, #0]
 8016426:	6018      	str	r0, [r3, #0]
			p->moveSize = 4;
 8016428:	687b      	ldr	r3, [r7, #4]
 801642a:	2204      	movs	r2, #4
 801642c:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"E,I,G,D");
 801642e:	687b      	ldr	r3, [r7, #4]
 8016430:	33a4      	adds	r3, #164	; 0xa4
 8016432:	4972      	ldr	r1, [pc, #456]	; (80165fc <problem_fetch+0x14f38>)
 8016434:	461a      	mov	r2, r3
 8016436:	460b      	mov	r3, r1
 8016438:	cb03      	ldmia	r3!, {r0, r1}
 801643a:	6010      	str	r0, [r2, #0]
 801643c:	6051      	str	r1, [r2, #4]
			strcpy(p->moveNumbers,"6,10,14,18");
 801643e:	687b      	ldr	r3, [r7, #4]
 8016440:	3304      	adds	r3, #4
 8016442:	496f      	ldr	r1, [pc, #444]	; (8016600 <problem_fetch+0x14f3c>)
 8016444:	461a      	mov	r2, r3
 8016446:	460b      	mov	r3, r1
 8016448:	cb03      	ldmia	r3!, {r0, r1}
 801644a:	6010      	str	r0, [r2, #0]
 801644c:	6051      	str	r1, [r2, #4]
 801644e:	8819      	ldrh	r1, [r3, #0]
 8016450:	789b      	ldrb	r3, [r3, #2]
 8016452:	8111      	strh	r1, [r2, #8]
 8016454:	7293      	strb	r3, [r2, #10]
			strcpy(p->startFinish,"s,d,d,e");
 8016456:	687b      	ldr	r3, [r7, #4]
 8016458:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 801645c:	4969      	ldr	r1, [pc, #420]	; (8016604 <problem_fetch+0x14f40>)
 801645e:	461a      	mov	r2, r3
 8016460:	460b      	mov	r3, r1
 8016462:	cb03      	ldmia	r3!, {r0, r1}
 8016464:	6010      	str	r0, [r2, #0]
 8016466:	6051      	str	r1, [r2, #4]
			break;
 8016468:	f006 b85c 	b.w	801c524 <problem_fetch+0x1ae60>
		case 618 :
			strcpy(p->name,"BLACK MAGIC");
 801646c:	687b      	ldr	r3, [r7, #4]
 801646e:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8016472:	4a65      	ldr	r2, [pc, #404]	; (8016608 <problem_fetch+0x14f44>)
 8016474:	461c      	mov	r4, r3
 8016476:	4613      	mov	r3, r2
 8016478:	cb07      	ldmia	r3!, {r0, r1, r2}
 801647a:	6020      	str	r0, [r4, #0]
 801647c:	6061      	str	r1, [r4, #4]
 801647e:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade,"7A+");
 8016480:	687b      	ldr	r3, [r7, #4]
 8016482:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8016486:	4a5c      	ldr	r2, [pc, #368]	; (80165f8 <problem_fetch+0x14f34>)
 8016488:	6810      	ldr	r0, [r2, #0]
 801648a:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 801648c:	687b      	ldr	r3, [r7, #4]
 801648e:	2207      	movs	r2, #7
 8016490:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"C,G,C,H,F,H,I");
 8016492:	687b      	ldr	r3, [r7, #4]
 8016494:	33a4      	adds	r3, #164	; 0xa4
 8016496:	4a5d      	ldr	r2, [pc, #372]	; (801660c <problem_fetch+0x14f48>)
 8016498:	461c      	mov	r4, r3
 801649a:	4613      	mov	r3, r2
 801649c:	cb07      	ldmia	r3!, {r0, r1, r2}
 801649e:	6020      	str	r0, [r4, #0]
 80164a0:	6061      	str	r1, [r4, #4]
 80164a2:	60a2      	str	r2, [r4, #8]
 80164a4:	881b      	ldrh	r3, [r3, #0]
 80164a6:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,4,8,10,13,16,18");
 80164a8:	687b      	ldr	r3, [r7, #4]
 80164aa:	3304      	adds	r3, #4
 80164ac:	4a58      	ldr	r2, [pc, #352]	; (8016610 <problem_fetch+0x14f4c>)
 80164ae:	461d      	mov	r5, r3
 80164b0:	4614      	mov	r4, r2
 80164b2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80164b4:	6028      	str	r0, [r5, #0]
 80164b6:	6069      	str	r1, [r5, #4]
 80164b8:	60aa      	str	r2, [r5, #8]
 80164ba:	60eb      	str	r3, [r5, #12]
 80164bc:	8823      	ldrh	r3, [r4, #0]
 80164be:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 80164c0:	687b      	ldr	r3, [r7, #4]
 80164c2:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 80164c6:	4a53      	ldr	r2, [pc, #332]	; (8016614 <problem_fetch+0x14f50>)
 80164c8:	461c      	mov	r4, r3
 80164ca:	4613      	mov	r3, r2
 80164cc:	cb07      	ldmia	r3!, {r0, r1, r2}
 80164ce:	6020      	str	r0, [r4, #0]
 80164d0:	6061      	str	r1, [r4, #4]
 80164d2:	60a2      	str	r2, [r4, #8]
 80164d4:	881b      	ldrh	r3, [r3, #0]
 80164d6:	81a3      	strh	r3, [r4, #12]
			break;
 80164d8:	f006 b824 	b.w	801c524 <problem_fetch+0x1ae60>
		case 619 :
			strcpy(p->name,"GOOD LIFE");
 80164dc:	687b      	ldr	r3, [r7, #4]
 80164de:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80164e2:	494d      	ldr	r1, [pc, #308]	; (8016618 <problem_fetch+0x14f54>)
 80164e4:	461a      	mov	r2, r3
 80164e6:	460b      	mov	r3, r1
 80164e8:	cb03      	ldmia	r3!, {r0, r1}
 80164ea:	6010      	str	r0, [r2, #0]
 80164ec:	6051      	str	r1, [r2, #4]
 80164ee:	881b      	ldrh	r3, [r3, #0]
 80164f0:	8113      	strh	r3, [r2, #8]
			strcpy(p->grade,"7A+");
 80164f2:	687b      	ldr	r3, [r7, #4]
 80164f4:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80164f8:	4a3f      	ldr	r2, [pc, #252]	; (80165f8 <problem_fetch+0x14f34>)
 80164fa:	6810      	ldr	r0, [r2, #0]
 80164fc:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 80164fe:	687b      	ldr	r3, [r7, #4]
 8016500:	2206      	movs	r2, #6
 8016502:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,H,C,D,F,A");
 8016504:	687b      	ldr	r3, [r7, #4]
 8016506:	33a4      	adds	r3, #164	; 0xa4
 8016508:	4a44      	ldr	r2, [pc, #272]	; (801661c <problem_fetch+0x14f58>)
 801650a:	461c      	mov	r4, r3
 801650c:	4613      	mov	r3, r2
 801650e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8016510:	6020      	str	r0, [r4, #0]
 8016512:	6061      	str	r1, [r4, #4]
 8016514:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,8,8,15,11,18");
 8016516:	687b      	ldr	r3, [r7, #4]
 8016518:	3304      	adds	r3, #4
 801651a:	4a41      	ldr	r2, [pc, #260]	; (8016620 <problem_fetch+0x14f5c>)
 801651c:	461c      	mov	r4, r3
 801651e:	4613      	mov	r3, r2
 8016520:	cb07      	ldmia	r3!, {r0, r1, r2}
 8016522:	6020      	str	r0, [r4, #0]
 8016524:	6061      	str	r1, [r4, #4]
 8016526:	60a2      	str	r2, [r4, #8]
 8016528:	881a      	ldrh	r2, [r3, #0]
 801652a:	789b      	ldrb	r3, [r3, #2]
 801652c:	81a2      	strh	r2, [r4, #12]
 801652e:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 8016530:	687b      	ldr	r3, [r7, #4]
 8016532:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8016536:	4a25      	ldr	r2, [pc, #148]	; (80165cc <problem_fetch+0x14f08>)
 8016538:	461c      	mov	r4, r3
 801653a:	4613      	mov	r3, r2
 801653c:	cb07      	ldmia	r3!, {r0, r1, r2}
 801653e:	6020      	str	r0, [r4, #0]
 8016540:	6061      	str	r1, [r4, #4]
 8016542:	60a2      	str	r2, [r4, #8]
			break;
 8016544:	f005 bfee 	b.w	801c524 <problem_fetch+0x1ae60>
		case 620 :
			strcpy(p->name,"CALCIUM20");
 8016548:	687b      	ldr	r3, [r7, #4]
 801654a:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801654e:	4935      	ldr	r1, [pc, #212]	; (8016624 <problem_fetch+0x14f60>)
 8016550:	461a      	mov	r2, r3
 8016552:	460b      	mov	r3, r1
 8016554:	cb03      	ldmia	r3!, {r0, r1}
 8016556:	6010      	str	r0, [r2, #0]
 8016558:	6051      	str	r1, [r2, #4]
 801655a:	881b      	ldrh	r3, [r3, #0]
 801655c:	8113      	strh	r3, [r2, #8]
			strcpy(p->grade,"6C+");
 801655e:	687b      	ldr	r3, [r7, #4]
 8016560:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8016564:	4a1b      	ldr	r2, [pc, #108]	; (80165d4 <problem_fetch+0x14f10>)
 8016566:	6810      	ldr	r0, [r2, #0]
 8016568:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 801656a:	687b      	ldr	r3, [r7, #4]
 801656c:	2207      	movs	r2, #7
 801656e:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"B,G,G,B,D,B,D");
 8016570:	687b      	ldr	r3, [r7, #4]
 8016572:	33a4      	adds	r3, #164	; 0xa4
 8016574:	4a2c      	ldr	r2, [pc, #176]	; (8016628 <problem_fetch+0x14f64>)
 8016576:	461c      	mov	r4, r3
 8016578:	4613      	mov	r3, r2
 801657a:	cb07      	ldmia	r3!, {r0, r1, r2}
 801657c:	6020      	str	r0, [r4, #0]
 801657e:	6061      	str	r1, [r4, #4]
 8016580:	60a2      	str	r2, [r4, #8]
 8016582:	881b      	ldrh	r3, [r3, #0]
 8016584:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"6,4,9,10,15,15,18");
 8016586:	687b      	ldr	r3, [r7, #4]
 8016588:	3304      	adds	r3, #4
 801658a:	4a28      	ldr	r2, [pc, #160]	; (801662c <problem_fetch+0x14f68>)
 801658c:	461d      	mov	r5, r3
 801658e:	4614      	mov	r4, r2
 8016590:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8016592:	6028      	str	r0, [r5, #0]
 8016594:	6069      	str	r1, [r5, #4]
 8016596:	60aa      	str	r2, [r5, #8]
 8016598:	60eb      	str	r3, [r5, #12]
 801659a:	8823      	ldrh	r3, [r4, #0]
 801659c:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,s,d,d,d,d,e");
 801659e:	687b      	ldr	r3, [r7, #4]
 80165a0:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 80165a4:	4a22      	ldr	r2, [pc, #136]	; (8016630 <problem_fetch+0x14f6c>)
 80165a6:	461c      	mov	r4, r3
 80165a8:	4613      	mov	r3, r2
 80165aa:	cb07      	ldmia	r3!, {r0, r1, r2}
 80165ac:	6020      	str	r0, [r4, #0]
 80165ae:	6061      	str	r1, [r4, #4]
 80165b0:	60a2      	str	r2, [r4, #8]
 80165b2:	881b      	ldrh	r3, [r3, #0]
 80165b4:	81a3      	strh	r3, [r4, #12]
			break;
 80165b6:	f005 bfb5 	b.w	801c524 <problem_fetch+0x1ae60>
 80165ba:	bf00      	nop
 80165bc:	0802acf8 	.word	0x0802acf8
 80165c0:	08023990 	.word	0x08023990
 80165c4:	0802ad08 	.word	0x0802ad08
 80165c8:	0802ad14 	.word	0x0802ad14
 80165cc:	08023bf0 	.word	0x08023bf0
 80165d0:	0802ad24 	.word	0x0802ad24
 80165d4:	080238ec 	.word	0x080238ec
 80165d8:	0802ad34 	.word	0x0802ad34
 80165dc:	0802ad40 	.word	0x0802ad40
 80165e0:	0802ad50 	.word	0x0802ad50
 80165e4:	08023920 	.word	0x08023920
 80165e8:	0802ad64 	.word	0x0802ad64
 80165ec:	0802ad74 	.word	0x0802ad74
 80165f0:	08023a64 	.word	0x08023a64
 80165f4:	0802ad8c 	.word	0x0802ad8c
 80165f8:	080239f4 	.word	0x080239f4
 80165fc:	0802ad9c 	.word	0x0802ad9c
 8016600:	0802399c 	.word	0x0802399c
 8016604:	080239a8 	.word	0x080239a8
 8016608:	0802ada4 	.word	0x0802ada4
 801660c:	0802adb0 	.word	0x0802adb0
 8016610:	0802adc0 	.word	0x0802adc0
 8016614:	080239dc 	.word	0x080239dc
 8016618:	0802add4 	.word	0x0802add4
 801661c:	0802ade0 	.word	0x0802ade0
 8016620:	0802adec 	.word	0x0802adec
 8016624:	0802adfc 	.word	0x0802adfc
 8016628:	0802ae08 	.word	0x0802ae08
 801662c:	0802ae18 	.word	0x0802ae18
 8016630:	080238cc 	.word	0x080238cc
		case 621 :
			strcpy(p->name,"BLACK IS BACK");
 8016634:	687b      	ldr	r3, [r7, #4]
 8016636:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801663a:	4aa8      	ldr	r2, [pc, #672]	; (80168dc <problem_fetch+0x15218>)
 801663c:	461c      	mov	r4, r3
 801663e:	4613      	mov	r3, r2
 8016640:	cb07      	ldmia	r3!, {r0, r1, r2}
 8016642:	6020      	str	r0, [r4, #0]
 8016644:	6061      	str	r1, [r4, #4]
 8016646:	60a2      	str	r2, [r4, #8]
 8016648:	881b      	ldrh	r3, [r3, #0]
 801664a:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade,"6C+");
 801664c:	687b      	ldr	r3, [r7, #4]
 801664e:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8016652:	4aa3      	ldr	r2, [pc, #652]	; (80168e0 <problem_fetch+0x1521c>)
 8016654:	6810      	ldr	r0, [r2, #0]
 8016656:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 8016658:	687b      	ldr	r3, [r7, #4]
 801665a:	2207      	movs	r2, #7
 801665c:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,H,G,B,C,I,D");
 801665e:	687b      	ldr	r3, [r7, #4]
 8016660:	33a4      	adds	r3, #164	; 0xa4
 8016662:	4aa0      	ldr	r2, [pc, #640]	; (80168e4 <problem_fetch+0x15220>)
 8016664:	461c      	mov	r4, r3
 8016666:	4613      	mov	r3, r2
 8016668:	cb07      	ldmia	r3!, {r0, r1, r2}
 801666a:	6020      	str	r0, [r4, #0]
 801666c:	6061      	str	r1, [r4, #4]
 801666e:	60a2      	str	r2, [r4, #8]
 8016670:	881b      	ldrh	r3, [r3, #0]
 8016672:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,8,9,10,13,14,18");
 8016674:	687b      	ldr	r3, [r7, #4]
 8016676:	3304      	adds	r3, #4
 8016678:	4a9b      	ldr	r2, [pc, #620]	; (80168e8 <problem_fetch+0x15224>)
 801667a:	461d      	mov	r5, r3
 801667c:	4614      	mov	r4, r2
 801667e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8016680:	6028      	str	r0, [r5, #0]
 8016682:	6069      	str	r1, [r5, #4]
 8016684:	60aa      	str	r2, [r5, #8]
 8016686:	60eb      	str	r3, [r5, #12]
 8016688:	8823      	ldrh	r3, [r4, #0]
 801668a:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 801668c:	687b      	ldr	r3, [r7, #4]
 801668e:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8016692:	4a96      	ldr	r2, [pc, #600]	; (80168ec <problem_fetch+0x15228>)
 8016694:	461c      	mov	r4, r3
 8016696:	4613      	mov	r3, r2
 8016698:	cb07      	ldmia	r3!, {r0, r1, r2}
 801669a:	6020      	str	r0, [r4, #0]
 801669c:	6061      	str	r1, [r4, #4]
 801669e:	60a2      	str	r2, [r4, #8]
 80166a0:	881b      	ldrh	r3, [r3, #0]
 80166a2:	81a3      	strh	r3, [r4, #12]
			break;
 80166a4:	f005 bf3e 	b.w	801c524 <problem_fetch+0x1ae60>
		case 622 :
			strcpy(p->name,"CAPTAIN RILEY");
 80166a8:	687b      	ldr	r3, [r7, #4]
 80166aa:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80166ae:	4a90      	ldr	r2, [pc, #576]	; (80168f0 <problem_fetch+0x1522c>)
 80166b0:	461c      	mov	r4, r3
 80166b2:	4613      	mov	r3, r2
 80166b4:	cb07      	ldmia	r3!, {r0, r1, r2}
 80166b6:	6020      	str	r0, [r4, #0]
 80166b8:	6061      	str	r1, [r4, #4]
 80166ba:	60a2      	str	r2, [r4, #8]
 80166bc:	881b      	ldrh	r3, [r3, #0]
 80166be:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade,"6B+");
 80166c0:	687b      	ldr	r3, [r7, #4]
 80166c2:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80166c6:	4a8b      	ldr	r2, [pc, #556]	; (80168f4 <problem_fetch+0x15230>)
 80166c8:	6810      	ldr	r0, [r2, #0]
 80166ca:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 80166cc:	687b      	ldr	r3, [r7, #4]
 80166ce:	2206      	movs	r2, #6
 80166d0:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,E,F,C,E,A");
 80166d2:	687b      	ldr	r3, [r7, #4]
 80166d4:	33a4      	adds	r3, #164	; 0xa4
 80166d6:	4a88      	ldr	r2, [pc, #544]	; (80168f8 <problem_fetch+0x15234>)
 80166d8:	461c      	mov	r4, r3
 80166da:	4613      	mov	r3, r2
 80166dc:	cb07      	ldmia	r3!, {r0, r1, r2}
 80166de:	6020      	str	r0, [r4, #0]
 80166e0:	6061      	str	r1, [r4, #4]
 80166e2:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,8,11,13,16,18");
 80166e4:	687b      	ldr	r3, [r7, #4]
 80166e6:	3304      	adds	r3, #4
 80166e8:	4a84      	ldr	r2, [pc, #528]	; (80168fc <problem_fetch+0x15238>)
 80166ea:	461c      	mov	r4, r3
 80166ec:	4615      	mov	r5, r2
 80166ee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80166f0:	6020      	str	r0, [r4, #0]
 80166f2:	6061      	str	r1, [r4, #4]
 80166f4:	60a2      	str	r2, [r4, #8]
 80166f6:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 80166f8:	687b      	ldr	r3, [r7, #4]
 80166fa:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 80166fe:	4a80      	ldr	r2, [pc, #512]	; (8016900 <problem_fetch+0x1523c>)
 8016700:	461c      	mov	r4, r3
 8016702:	4613      	mov	r3, r2
 8016704:	cb07      	ldmia	r3!, {r0, r1, r2}
 8016706:	6020      	str	r0, [r4, #0]
 8016708:	6061      	str	r1, [r4, #4]
 801670a:	60a2      	str	r2, [r4, #8]
			break;
 801670c:	f005 bf0a 	b.w	801c524 <problem_fetch+0x1ae60>
		case 623 :
			strcpy(p->name,"WPOLOGIM 2");
 8016710:	687b      	ldr	r3, [r7, #4]
 8016712:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8016716:	497b      	ldr	r1, [pc, #492]	; (8016904 <problem_fetch+0x15240>)
 8016718:	461a      	mov	r2, r3
 801671a:	460b      	mov	r3, r1
 801671c:	cb03      	ldmia	r3!, {r0, r1}
 801671e:	6010      	str	r0, [r2, #0]
 8016720:	6051      	str	r1, [r2, #4]
 8016722:	8819      	ldrh	r1, [r3, #0]
 8016724:	789b      	ldrb	r3, [r3, #2]
 8016726:	8111      	strh	r1, [r2, #8]
 8016728:	7293      	strb	r3, [r2, #10]
			strcpy(p->grade,"7B");
 801672a:	687b      	ldr	r3, [r7, #4]
 801672c:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8016730:	4a75      	ldr	r2, [pc, #468]	; (8016908 <problem_fetch+0x15244>)
 8016732:	8811      	ldrh	r1, [r2, #0]
 8016734:	7892      	ldrb	r2, [r2, #2]
 8016736:	8019      	strh	r1, [r3, #0]
 8016738:	709a      	strb	r2, [r3, #2]
			p->moveSize = 6;
 801673a:	687b      	ldr	r3, [r7, #4]
 801673c:	2206      	movs	r2, #6
 801673e:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,E,I,H,I,D");
 8016740:	687b      	ldr	r3, [r7, #4]
 8016742:	33a4      	adds	r3, #164	; 0xa4
 8016744:	4a71      	ldr	r2, [pc, #452]	; (801690c <problem_fetch+0x15248>)
 8016746:	461c      	mov	r4, r3
 8016748:	4613      	mov	r3, r2
 801674a:	cb07      	ldmia	r3!, {r0, r1, r2}
 801674c:	6020      	str	r0, [r4, #0]
 801674e:	6061      	str	r1, [r4, #4]
 8016750:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,8,9,12,15,18");
 8016752:	687b      	ldr	r3, [r7, #4]
 8016754:	3304      	adds	r3, #4
 8016756:	4a6e      	ldr	r2, [pc, #440]	; (8016910 <problem_fetch+0x1524c>)
 8016758:	461c      	mov	r4, r3
 801675a:	4613      	mov	r3, r2
 801675c:	cb07      	ldmia	r3!, {r0, r1, r2}
 801675e:	6020      	str	r0, [r4, #0]
 8016760:	6061      	str	r1, [r4, #4]
 8016762:	60a2      	str	r2, [r4, #8]
 8016764:	881a      	ldrh	r2, [r3, #0]
 8016766:	789b      	ldrb	r3, [r3, #2]
 8016768:	81a2      	strh	r2, [r4, #12]
 801676a:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 801676c:	687b      	ldr	r3, [r7, #4]
 801676e:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8016772:	4a63      	ldr	r2, [pc, #396]	; (8016900 <problem_fetch+0x1523c>)
 8016774:	461c      	mov	r4, r3
 8016776:	4613      	mov	r3, r2
 8016778:	cb07      	ldmia	r3!, {r0, r1, r2}
 801677a:	6020      	str	r0, [r4, #0]
 801677c:	6061      	str	r1, [r4, #4]
 801677e:	60a2      	str	r2, [r4, #8]
			break;
 8016780:	f005 bed0 	b.w	801c524 <problem_fetch+0x1ae60>
		case 624 :
			strcpy(p->name,"I LOVE ROCK AND ROLL");
 8016784:	687b      	ldr	r3, [r7, #4]
 8016786:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801678a:	4a62      	ldr	r2, [pc, #392]	; (8016914 <problem_fetch+0x15250>)
 801678c:	461d      	mov	r5, r3
 801678e:	4614      	mov	r4, r2
 8016790:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8016792:	6028      	str	r0, [r5, #0]
 8016794:	6069      	str	r1, [r5, #4]
 8016796:	60aa      	str	r2, [r5, #8]
 8016798:	60eb      	str	r3, [r5, #12]
 801679a:	6820      	ldr	r0, [r4, #0]
 801679c:	6128      	str	r0, [r5, #16]
 801679e:	7923      	ldrb	r3, [r4, #4]
 80167a0:	752b      	strb	r3, [r5, #20]
			strcpy(p->grade,"6C+");
 80167a2:	687b      	ldr	r3, [r7, #4]
 80167a4:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80167a8:	4a4d      	ldr	r2, [pc, #308]	; (80168e0 <problem_fetch+0x1521c>)
 80167aa:	6810      	ldr	r0, [r2, #0]
 80167ac:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 80167ae:	687b      	ldr	r3, [r7, #4]
 80167b0:	2207      	movs	r2, #7
 80167b2:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"E,E,F,G,I,I,J");
 80167b4:	687b      	ldr	r3, [r7, #4]
 80167b6:	33a4      	adds	r3, #164	; 0xa4
 80167b8:	4a57      	ldr	r2, [pc, #348]	; (8016918 <problem_fetch+0x15254>)
 80167ba:	461c      	mov	r4, r3
 80167bc:	4613      	mov	r3, r2
 80167be:	cb07      	ldmia	r3!, {r0, r1, r2}
 80167c0:	6020      	str	r0, [r4, #0]
 80167c2:	6061      	str	r1, [r4, #4]
 80167c4:	60a2      	str	r2, [r4, #8]
 80167c6:	881b      	ldrh	r3, [r3, #0]
 80167c8:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"8,16,11,9,14,18,5");
 80167ca:	687b      	ldr	r3, [r7, #4]
 80167cc:	3304      	adds	r3, #4
 80167ce:	4a53      	ldr	r2, [pc, #332]	; (801691c <problem_fetch+0x15258>)
 80167d0:	461d      	mov	r5, r3
 80167d2:	4614      	mov	r4, r2
 80167d4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80167d6:	6028      	str	r0, [r5, #0]
 80167d8:	6069      	str	r1, [r5, #4]
 80167da:	60aa      	str	r2, [r5, #8]
 80167dc:	60eb      	str	r3, [r5, #12]
 80167de:	8823      	ldrh	r3, [r4, #0]
 80167e0:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"d,d,d,d,d,e,s");
 80167e2:	687b      	ldr	r3, [r7, #4]
 80167e4:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 80167e8:	4a4d      	ldr	r2, [pc, #308]	; (8016920 <problem_fetch+0x1525c>)
 80167ea:	461c      	mov	r4, r3
 80167ec:	4613      	mov	r3, r2
 80167ee:	cb07      	ldmia	r3!, {r0, r1, r2}
 80167f0:	6020      	str	r0, [r4, #0]
 80167f2:	6061      	str	r1, [r4, #4]
 80167f4:	60a2      	str	r2, [r4, #8]
 80167f6:	881b      	ldrh	r3, [r3, #0]
 80167f8:	81a3      	strh	r3, [r4, #12]
			break;
 80167fa:	f005 be93 	b.w	801c524 <problem_fetch+0x1ae60>
		case 625 :
			strcpy(p->name,"THE DAILY RATION");
 80167fe:	687b      	ldr	r3, [r7, #4]
 8016800:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8016804:	4a47      	ldr	r2, [pc, #284]	; (8016924 <problem_fetch+0x15260>)
 8016806:	461d      	mov	r5, r3
 8016808:	4614      	mov	r4, r2
 801680a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801680c:	6028      	str	r0, [r5, #0]
 801680e:	6069      	str	r1, [r5, #4]
 8016810:	60aa      	str	r2, [r5, #8]
 8016812:	60eb      	str	r3, [r5, #12]
 8016814:	7823      	ldrb	r3, [r4, #0]
 8016816:	742b      	strb	r3, [r5, #16]
			strcpy(p->grade,"6C+");
 8016818:	687b      	ldr	r3, [r7, #4]
 801681a:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801681e:	4a30      	ldr	r2, [pc, #192]	; (80168e0 <problem_fetch+0x1521c>)
 8016820:	6810      	ldr	r0, [r2, #0]
 8016822:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 8016824:	687b      	ldr	r3, [r7, #4]
 8016826:	2207      	movs	r2, #7
 8016828:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,K,G,G,H,J,D");
 801682a:	687b      	ldr	r3, [r7, #4]
 801682c:	33a4      	adds	r3, #164	; 0xa4
 801682e:	4a3e      	ldr	r2, [pc, #248]	; (8016928 <problem_fetch+0x15264>)
 8016830:	461c      	mov	r4, r3
 8016832:	4613      	mov	r3, r2
 8016834:	cb07      	ldmia	r3!, {r0, r1, r2}
 8016836:	6020      	str	r0, [r4, #0]
 8016838:	6061      	str	r1, [r4, #4]
 801683a:	60a2      	str	r2, [r4, #8]
 801683c:	881b      	ldrh	r3, [r3, #0]
 801683e:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,14,17,15,10,7,18");
 8016840:	687b      	ldr	r3, [r7, #4]
 8016842:	3304      	adds	r3, #4
 8016844:	4a39      	ldr	r2, [pc, #228]	; (801692c <problem_fetch+0x15268>)
 8016846:	461d      	mov	r5, r3
 8016848:	4614      	mov	r4, r2
 801684a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801684c:	6028      	str	r0, [r5, #0]
 801684e:	6069      	str	r1, [r5, #4]
 8016850:	60aa      	str	r2, [r5, #8]
 8016852:	60eb      	str	r3, [r5, #12]
 8016854:	8823      	ldrh	r3, [r4, #0]
 8016856:	78a2      	ldrb	r2, [r4, #2]
 8016858:	822b      	strh	r3, [r5, #16]
 801685a:	4613      	mov	r3, r2
 801685c:	74ab      	strb	r3, [r5, #18]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 801685e:	687b      	ldr	r3, [r7, #4]
 8016860:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8016864:	4a21      	ldr	r2, [pc, #132]	; (80168ec <problem_fetch+0x15228>)
 8016866:	461c      	mov	r4, r3
 8016868:	4613      	mov	r3, r2
 801686a:	cb07      	ldmia	r3!, {r0, r1, r2}
 801686c:	6020      	str	r0, [r4, #0]
 801686e:	6061      	str	r1, [r4, #4]
 8016870:	60a2      	str	r2, [r4, #8]
 8016872:	881b      	ldrh	r3, [r3, #0]
 8016874:	81a3      	strh	r3, [r4, #12]
			break;
 8016876:	f005 be55 	b.w	801c524 <problem_fetch+0x1ae60>
		case 626 :
			strcpy(p->name,"ZLATI");
 801687a:	687b      	ldr	r3, [r7, #4]
 801687c:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8016880:	4a2b      	ldr	r2, [pc, #172]	; (8016930 <problem_fetch+0x1526c>)
 8016882:	6810      	ldr	r0, [r2, #0]
 8016884:	6018      	str	r0, [r3, #0]
 8016886:	8892      	ldrh	r2, [r2, #4]
 8016888:	809a      	strh	r2, [r3, #4]
			strcpy(p->grade,"6C+");
 801688a:	687b      	ldr	r3, [r7, #4]
 801688c:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8016890:	4a13      	ldr	r2, [pc, #76]	; (80168e0 <problem_fetch+0x1521c>)
 8016892:	6810      	ldr	r0, [r2, #0]
 8016894:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 8016896:	687b      	ldr	r3, [r7, #4]
 8016898:	2206      	movs	r2, #6
 801689a:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,G,H,C,E,D");
 801689c:	687b      	ldr	r3, [r7, #4]
 801689e:	33a4      	adds	r3, #164	; 0xa4
 80168a0:	4a24      	ldr	r2, [pc, #144]	; (8016934 <problem_fetch+0x15270>)
 80168a2:	461c      	mov	r4, r3
 80168a4:	4613      	mov	r3, r2
 80168a6:	cb07      	ldmia	r3!, {r0, r1, r2}
 80168a8:	6020      	str	r0, [r4, #0]
 80168aa:	6061      	str	r1, [r4, #4]
 80168ac:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,9,10,13,12,18");
 80168ae:	687b      	ldr	r3, [r7, #4]
 80168b0:	3304      	adds	r3, #4
 80168b2:	4a21      	ldr	r2, [pc, #132]	; (8016938 <problem_fetch+0x15274>)
 80168b4:	461c      	mov	r4, r3
 80168b6:	4615      	mov	r5, r2
 80168b8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80168ba:	6020      	str	r0, [r4, #0]
 80168bc:	6061      	str	r1, [r4, #4]
 80168be:	60a2      	str	r2, [r4, #8]
 80168c0:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 80168c2:	687b      	ldr	r3, [r7, #4]
 80168c4:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 80168c8:	4a0d      	ldr	r2, [pc, #52]	; (8016900 <problem_fetch+0x1523c>)
 80168ca:	461c      	mov	r4, r3
 80168cc:	4613      	mov	r3, r2
 80168ce:	cb07      	ldmia	r3!, {r0, r1, r2}
 80168d0:	6020      	str	r0, [r4, #0]
 80168d2:	6061      	str	r1, [r4, #4]
 80168d4:	60a2      	str	r2, [r4, #8]
			break;
 80168d6:	f005 be25 	b.w	801c524 <problem_fetch+0x1ae60>
 80168da:	bf00      	nop
 80168dc:	0802ae2c 	.word	0x0802ae2c
 80168e0:	080238ec 	.word	0x080238ec
 80168e4:	0802ae3c 	.word	0x0802ae3c
 80168e8:	0802ae4c 	.word	0x0802ae4c
 80168ec:	080239dc 	.word	0x080239dc
 80168f0:	0802ae60 	.word	0x0802ae60
 80168f4:	08023854 	.word	0x08023854
 80168f8:	0802ae70 	.word	0x0802ae70
 80168fc:	0802ae7c 	.word	0x0802ae7c
 8016900:	08023bf0 	.word	0x08023bf0
 8016904:	0802ae8c 	.word	0x0802ae8c
 8016908:	08023f4c 	.word	0x08023f4c
 801690c:	0802ae98 	.word	0x0802ae98
 8016910:	08027dd8 	.word	0x08027dd8
 8016914:	0802aea4 	.word	0x0802aea4
 8016918:	0802aebc 	.word	0x0802aebc
 801691c:	0802aecc 	.word	0x0802aecc
 8016920:	0802aee0 	.word	0x0802aee0
 8016924:	0802aef0 	.word	0x0802aef0
 8016928:	0802af04 	.word	0x0802af04
 801692c:	0802af14 	.word	0x0802af14
 8016930:	0802af28 	.word	0x0802af28
 8016934:	0802af30 	.word	0x0802af30
 8016938:	0802af3c 	.word	0x0802af3c
		case 627 :
			strcpy(p->name,"FISHIN FOR A COMPLIMENT");
 801693c:	687b      	ldr	r3, [r7, #4]
 801693e:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8016942:	4aaa      	ldr	r2, [pc, #680]	; (8016bec <problem_fetch+0x15528>)
 8016944:	461d      	mov	r5, r3
 8016946:	4614      	mov	r4, r2
 8016948:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801694a:	6028      	str	r0, [r5, #0]
 801694c:	6069      	str	r1, [r5, #4]
 801694e:	60aa      	str	r2, [r5, #8]
 8016950:	60eb      	str	r3, [r5, #12]
 8016952:	cc03      	ldmia	r4!, {r0, r1}
 8016954:	6128      	str	r0, [r5, #16]
 8016956:	6169      	str	r1, [r5, #20]
			strcpy(p->grade,"6C+");
 8016958:	687b      	ldr	r3, [r7, #4]
 801695a:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801695e:	4aa4      	ldr	r2, [pc, #656]	; (8016bf0 <problem_fetch+0x1552c>)
 8016960:	6810      	ldr	r0, [r2, #0]
 8016962:	6018      	str	r0, [r3, #0]
			p->moveSize = 5;
 8016964:	687b      	ldr	r3, [r7, #4]
 8016966:	2205      	movs	r2, #5
 8016968:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,E,E,C,D");
 801696a:	687b      	ldr	r3, [r7, #4]
 801696c:	33a4      	adds	r3, #164	; 0xa4
 801696e:	49a1      	ldr	r1, [pc, #644]	; (8016bf4 <problem_fetch+0x15530>)
 8016970:	461a      	mov	r2, r3
 8016972:	460b      	mov	r3, r1
 8016974:	cb03      	ldmia	r3!, {r0, r1}
 8016976:	6010      	str	r0, [r2, #0]
 8016978:	6051      	str	r1, [r2, #4]
 801697a:	881b      	ldrh	r3, [r3, #0]
 801697c:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"4,8,12,13,18");
 801697e:	687b      	ldr	r3, [r7, #4]
 8016980:	3304      	adds	r3, #4
 8016982:	4a9d      	ldr	r2, [pc, #628]	; (8016bf8 <problem_fetch+0x15534>)
 8016984:	461c      	mov	r4, r3
 8016986:	4613      	mov	r3, r2
 8016988:	cb07      	ldmia	r3!, {r0, r1, r2}
 801698a:	6020      	str	r0, [r4, #0]
 801698c:	6061      	str	r1, [r4, #4]
 801698e:	60a2      	str	r2, [r4, #8]
 8016990:	781b      	ldrb	r3, [r3, #0]
 8016992:	7323      	strb	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,e");
 8016994:	687b      	ldr	r3, [r7, #4]
 8016996:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 801699a:	4998      	ldr	r1, [pc, #608]	; (8016bfc <problem_fetch+0x15538>)
 801699c:	461a      	mov	r2, r3
 801699e:	460b      	mov	r3, r1
 80169a0:	cb03      	ldmia	r3!, {r0, r1}
 80169a2:	6010      	str	r0, [r2, #0]
 80169a4:	6051      	str	r1, [r2, #4]
 80169a6:	881b      	ldrh	r3, [r3, #0]
 80169a8:	8113      	strh	r3, [r2, #8]
			break;
 80169aa:	f005 bdbb 	b.w	801c524 <problem_fetch+0x1ae60>
		case 628 :
			strcpy(p->name,"サミシクナイト");
 80169ae:	687b      	ldr	r3, [r7, #4]
 80169b0:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80169b4:	4a92      	ldr	r2, [pc, #584]	; (8016c00 <problem_fetch+0x1553c>)
 80169b6:	461d      	mov	r5, r3
 80169b8:	4614      	mov	r4, r2
 80169ba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80169bc:	6028      	str	r0, [r5, #0]
 80169be:	6069      	str	r1, [r5, #4]
 80169c0:	60aa      	str	r2, [r5, #8]
 80169c2:	60eb      	str	r3, [r5, #12]
 80169c4:	6820      	ldr	r0, [r4, #0]
 80169c6:	6128      	str	r0, [r5, #16]
 80169c8:	88a3      	ldrh	r3, [r4, #4]
 80169ca:	82ab      	strh	r3, [r5, #20]
			strcpy(p->grade,"6B+");
 80169cc:	687b      	ldr	r3, [r7, #4]
 80169ce:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80169d2:	4a8c      	ldr	r2, [pc, #560]	; (8016c04 <problem_fetch+0x15540>)
 80169d4:	6810      	ldr	r0, [r2, #0]
 80169d6:	6018      	str	r0, [r3, #0]
			p->moveSize = 9;
 80169d8:	687b      	ldr	r3, [r7, #4]
 80169da:	2209      	movs	r2, #9
 80169dc:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"E,H,G,B,E,C,G,G,I");
 80169de:	687b      	ldr	r3, [r7, #4]
 80169e0:	33a4      	adds	r3, #164	; 0xa4
 80169e2:	4a89      	ldr	r2, [pc, #548]	; (8016c08 <problem_fetch+0x15544>)
 80169e4:	461d      	mov	r5, r3
 80169e6:	4614      	mov	r4, r2
 80169e8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80169ea:	6028      	str	r0, [r5, #0]
 80169ec:	6069      	str	r1, [r5, #4]
 80169ee:	60aa      	str	r2, [r5, #8]
 80169f0:	60eb      	str	r3, [r5, #12]
 80169f2:	8823      	ldrh	r3, [r4, #0]
 80169f4:	822b      	strh	r3, [r5, #16]
			strcpy(p->moveNumbers,"6,5,9,10,12,13,15,17,18");
 80169f6:	687b      	ldr	r3, [r7, #4]
 80169f8:	3304      	adds	r3, #4
 80169fa:	4a84      	ldr	r2, [pc, #528]	; (8016c0c <problem_fetch+0x15548>)
 80169fc:	461d      	mov	r5, r3
 80169fe:	4614      	mov	r4, r2
 8016a00:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8016a02:	6028      	str	r0, [r5, #0]
 8016a04:	6069      	str	r1, [r5, #4]
 8016a06:	60aa      	str	r2, [r5, #8]
 8016a08:	60eb      	str	r3, [r5, #12]
 8016a0a:	cc03      	ldmia	r4!, {r0, r1}
 8016a0c:	6128      	str	r0, [r5, #16]
 8016a0e:	6169      	str	r1, [r5, #20]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,d,e");
 8016a10:	687b      	ldr	r3, [r7, #4]
 8016a12:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8016a16:	4a7e      	ldr	r2, [pc, #504]	; (8016c10 <problem_fetch+0x1554c>)
 8016a18:	461d      	mov	r5, r3
 8016a1a:	4614      	mov	r4, r2
 8016a1c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8016a1e:	6028      	str	r0, [r5, #0]
 8016a20:	6069      	str	r1, [r5, #4]
 8016a22:	60aa      	str	r2, [r5, #8]
 8016a24:	60eb      	str	r3, [r5, #12]
 8016a26:	8823      	ldrh	r3, [r4, #0]
 8016a28:	822b      	strh	r3, [r5, #16]
			break;
 8016a2a:	f005 bd7b 	b.w	801c524 <problem_fetch+0x1ae60>
		case 629 :
			strcpy(p->name,"NEIL1");
 8016a2e:	687b      	ldr	r3, [r7, #4]
 8016a30:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8016a34:	4a77      	ldr	r2, [pc, #476]	; (8016c14 <problem_fetch+0x15550>)
 8016a36:	6810      	ldr	r0, [r2, #0]
 8016a38:	6018      	str	r0, [r3, #0]
 8016a3a:	8892      	ldrh	r2, [r2, #4]
 8016a3c:	809a      	strh	r2, [r3, #4]
			strcpy(p->grade,"6B+");
 8016a3e:	687b      	ldr	r3, [r7, #4]
 8016a40:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8016a44:	4a6f      	ldr	r2, [pc, #444]	; (8016c04 <problem_fetch+0x15540>)
 8016a46:	6810      	ldr	r0, [r2, #0]
 8016a48:	6018      	str	r0, [r3, #0]
			p->moveSize = 8;
 8016a4a:	687b      	ldr	r3, [r7, #4]
 8016a4c:	2208      	movs	r2, #8
 8016a4e:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,E,C,B,C,D,C,A");
 8016a50:	687b      	ldr	r3, [r7, #4]
 8016a52:	33a4      	adds	r3, #164	; 0xa4
 8016a54:	4a70      	ldr	r2, [pc, #448]	; (8016c18 <problem_fetch+0x15554>)
 8016a56:	461c      	mov	r4, r3
 8016a58:	4615      	mov	r5, r2
 8016a5a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8016a5c:	6020      	str	r0, [r4, #0]
 8016a5e:	6061      	str	r1, [r4, #4]
 8016a60:	60a2      	str	r2, [r4, #8]
 8016a62:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"6,6,8,10,13,11,16,18");
 8016a64:	687b      	ldr	r3, [r7, #4]
 8016a66:	3304      	adds	r3, #4
 8016a68:	4a6c      	ldr	r2, [pc, #432]	; (8016c1c <problem_fetch+0x15558>)
 8016a6a:	461d      	mov	r5, r3
 8016a6c:	4614      	mov	r4, r2
 8016a6e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8016a70:	6028      	str	r0, [r5, #0]
 8016a72:	6069      	str	r1, [r5, #4]
 8016a74:	60aa      	str	r2, [r5, #8]
 8016a76:	60eb      	str	r3, [r5, #12]
 8016a78:	6820      	ldr	r0, [r4, #0]
 8016a7a:	6128      	str	r0, [r5, #16]
 8016a7c:	7923      	ldrb	r3, [r4, #4]
 8016a7e:	752b      	strb	r3, [r5, #20]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,e");
 8016a80:	687b      	ldr	r3, [r7, #4]
 8016a82:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8016a86:	4a66      	ldr	r2, [pc, #408]	; (8016c20 <problem_fetch+0x1555c>)
 8016a88:	461c      	mov	r4, r3
 8016a8a:	4615      	mov	r5, r2
 8016a8c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8016a8e:	6020      	str	r0, [r4, #0]
 8016a90:	6061      	str	r1, [r4, #4]
 8016a92:	60a2      	str	r2, [r4, #8]
 8016a94:	60e3      	str	r3, [r4, #12]
			break;
 8016a96:	f005 bd45 	b.w	801c524 <problem_fetch+0x1ae60>
		case 630 :
			strcpy(p->name,"TIAMAT");
 8016a9a:	687b      	ldr	r3, [r7, #4]
 8016a9c:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8016aa0:	4a60      	ldr	r2, [pc, #384]	; (8016c24 <problem_fetch+0x15560>)
 8016aa2:	6810      	ldr	r0, [r2, #0]
 8016aa4:	6018      	str	r0, [r3, #0]
 8016aa6:	8891      	ldrh	r1, [r2, #4]
 8016aa8:	7992      	ldrb	r2, [r2, #6]
 8016aaa:	8099      	strh	r1, [r3, #4]
 8016aac:	719a      	strb	r2, [r3, #6]
			strcpy(p->grade,"6B+");
 8016aae:	687b      	ldr	r3, [r7, #4]
 8016ab0:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8016ab4:	4a53      	ldr	r2, [pc, #332]	; (8016c04 <problem_fetch+0x15540>)
 8016ab6:	6810      	ldr	r0, [r2, #0]
 8016ab8:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 8016aba:	687b      	ldr	r3, [r7, #4]
 8016abc:	2207      	movs	r2, #7
 8016abe:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"H,E,G,E,I,G,I");
 8016ac0:	687b      	ldr	r3, [r7, #4]
 8016ac2:	33a4      	adds	r3, #164	; 0xa4
 8016ac4:	4a58      	ldr	r2, [pc, #352]	; (8016c28 <problem_fetch+0x15564>)
 8016ac6:	461c      	mov	r4, r3
 8016ac8:	4613      	mov	r3, r2
 8016aca:	cb07      	ldmia	r3!, {r0, r1, r2}
 8016acc:	6020      	str	r0, [r4, #0]
 8016ace:	6061      	str	r1, [r4, #4]
 8016ad0:	60a2      	str	r2, [r4, #8]
 8016ad2:	881b      	ldrh	r3, [r3, #0]
 8016ad4:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,6,9,12,14,15,18");
 8016ad6:	687b      	ldr	r3, [r7, #4]
 8016ad8:	3304      	adds	r3, #4
 8016ada:	4a54      	ldr	r2, [pc, #336]	; (8016c2c <problem_fetch+0x15568>)
 8016adc:	461d      	mov	r5, r3
 8016ade:	4614      	mov	r4, r2
 8016ae0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8016ae2:	6028      	str	r0, [r5, #0]
 8016ae4:	6069      	str	r1, [r5, #4]
 8016ae6:	60aa      	str	r2, [r5, #8]
 8016ae8:	60eb      	str	r3, [r5, #12]
 8016aea:	8823      	ldrh	r3, [r4, #0]
 8016aec:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,s,d,d,d,d,e");
 8016aee:	687b      	ldr	r3, [r7, #4]
 8016af0:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8016af4:	4a4e      	ldr	r2, [pc, #312]	; (8016c30 <problem_fetch+0x1556c>)
 8016af6:	461c      	mov	r4, r3
 8016af8:	4613      	mov	r3, r2
 8016afa:	cb07      	ldmia	r3!, {r0, r1, r2}
 8016afc:	6020      	str	r0, [r4, #0]
 8016afe:	6061      	str	r1, [r4, #4]
 8016b00:	60a2      	str	r2, [r4, #8]
 8016b02:	881b      	ldrh	r3, [r3, #0]
 8016b04:	81a3      	strh	r3, [r4, #12]
			break;
 8016b06:	f005 bd0d 	b.w	801c524 <problem_fetch+0x1ae60>
		case 631 :
			strcpy(p->name,"MOON SHADOW");
 8016b0a:	687b      	ldr	r3, [r7, #4]
 8016b0c:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8016b10:	4a48      	ldr	r2, [pc, #288]	; (8016c34 <problem_fetch+0x15570>)
 8016b12:	461c      	mov	r4, r3
 8016b14:	4613      	mov	r3, r2
 8016b16:	cb07      	ldmia	r3!, {r0, r1, r2}
 8016b18:	6020      	str	r0, [r4, #0]
 8016b1a:	6061      	str	r1, [r4, #4]
 8016b1c:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade,"6C+");
 8016b1e:	687b      	ldr	r3, [r7, #4]
 8016b20:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8016b24:	4a32      	ldr	r2, [pc, #200]	; (8016bf0 <problem_fetch+0x1552c>)
 8016b26:	6810      	ldr	r0, [r2, #0]
 8016b28:	6018      	str	r0, [r3, #0]
			p->moveSize = 8;
 8016b2a:	687b      	ldr	r3, [r7, #4]
 8016b2c:	2208      	movs	r2, #8
 8016b2e:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"C,E,C,F,I,D,G,I");
 8016b30:	687b      	ldr	r3, [r7, #4]
 8016b32:	33a4      	adds	r3, #164	; 0xa4
 8016b34:	4a40      	ldr	r2, [pc, #256]	; (8016c38 <problem_fetch+0x15574>)
 8016b36:	461c      	mov	r4, r3
 8016b38:	4615      	mov	r5, r2
 8016b3a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8016b3c:	6020      	str	r0, [r4, #0]
 8016b3e:	6061      	str	r1, [r4, #4]
 8016b40:	60a2      	str	r2, [r4, #8]
 8016b42:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,6,8,11,14,11,15,18");
 8016b44:	687b      	ldr	r3, [r7, #4]
 8016b46:	3304      	adds	r3, #4
 8016b48:	4a3c      	ldr	r2, [pc, #240]	; (8016c3c <problem_fetch+0x15578>)
 8016b4a:	461d      	mov	r5, r3
 8016b4c:	4614      	mov	r4, r2
 8016b4e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8016b50:	6028      	str	r0, [r5, #0]
 8016b52:	6069      	str	r1, [r5, #4]
 8016b54:	60aa      	str	r2, [r5, #8]
 8016b56:	60eb      	str	r3, [r5, #12]
 8016b58:	6820      	ldr	r0, [r4, #0]
 8016b5a:	6128      	str	r0, [r5, #16]
 8016b5c:	7923      	ldrb	r3, [r4, #4]
 8016b5e:	752b      	strb	r3, [r5, #20]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,e");
 8016b60:	687b      	ldr	r3, [r7, #4]
 8016b62:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8016b66:	4a2e      	ldr	r2, [pc, #184]	; (8016c20 <problem_fetch+0x1555c>)
 8016b68:	461c      	mov	r4, r3
 8016b6a:	4615      	mov	r5, r2
 8016b6c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8016b6e:	6020      	str	r0, [r4, #0]
 8016b70:	6061      	str	r1, [r4, #4]
 8016b72:	60a2      	str	r2, [r4, #8]
 8016b74:	60e3      	str	r3, [r4, #12]
			break;
 8016b76:	f005 bcd5 	b.w	801c524 <problem_fetch+0x1ae60>
		case 632 :
			strcpy(p->name,"DAS SCHNITZEL ALT");
 8016b7a:	687b      	ldr	r3, [r7, #4]
 8016b7c:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8016b80:	4a2f      	ldr	r2, [pc, #188]	; (8016c40 <problem_fetch+0x1557c>)
 8016b82:	461d      	mov	r5, r3
 8016b84:	4614      	mov	r4, r2
 8016b86:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8016b88:	6028      	str	r0, [r5, #0]
 8016b8a:	6069      	str	r1, [r5, #4]
 8016b8c:	60aa      	str	r2, [r5, #8]
 8016b8e:	60eb      	str	r3, [r5, #12]
 8016b90:	8823      	ldrh	r3, [r4, #0]
 8016b92:	822b      	strh	r3, [r5, #16]
			strcpy(p->grade,"7B+");
 8016b94:	687b      	ldr	r3, [r7, #4]
 8016b96:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8016b9a:	4a2a      	ldr	r2, [pc, #168]	; (8016c44 <problem_fetch+0x15580>)
 8016b9c:	6810      	ldr	r0, [r2, #0]
 8016b9e:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 8016ba0:	687b      	ldr	r3, [r7, #4]
 8016ba2:	2206      	movs	r2, #6
 8016ba4:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,G,I,F,G,D");
 8016ba6:	687b      	ldr	r3, [r7, #4]
 8016ba8:	33a4      	adds	r3, #164	; 0xa4
 8016baa:	4a27      	ldr	r2, [pc, #156]	; (8016c48 <problem_fetch+0x15584>)
 8016bac:	461c      	mov	r4, r3
 8016bae:	4613      	mov	r3, r2
 8016bb0:	cb07      	ldmia	r3!, {r0, r1, r2}
 8016bb2:	6020      	str	r0, [r4, #0]
 8016bb4:	6061      	str	r1, [r4, #4]
 8016bb6:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,6,9,13,14,18");
 8016bb8:	687b      	ldr	r3, [r7, #4]
 8016bba:	3304      	adds	r3, #4
 8016bbc:	4a23      	ldr	r2, [pc, #140]	; (8016c4c <problem_fetch+0x15588>)
 8016bbe:	461c      	mov	r4, r3
 8016bc0:	4613      	mov	r3, r2
 8016bc2:	cb07      	ldmia	r3!, {r0, r1, r2}
 8016bc4:	6020      	str	r0, [r4, #0]
 8016bc6:	6061      	str	r1, [r4, #4]
 8016bc8:	60a2      	str	r2, [r4, #8]
 8016bca:	881a      	ldrh	r2, [r3, #0]
 8016bcc:	789b      	ldrb	r3, [r3, #2]
 8016bce:	81a2      	strh	r2, [r4, #12]
 8016bd0:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish,"s,s,d,d,d,e");
 8016bd2:	687b      	ldr	r3, [r7, #4]
 8016bd4:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8016bd8:	4a1d      	ldr	r2, [pc, #116]	; (8016c50 <problem_fetch+0x1558c>)
 8016bda:	461c      	mov	r4, r3
 8016bdc:	4613      	mov	r3, r2
 8016bde:	cb07      	ldmia	r3!, {r0, r1, r2}
 8016be0:	6020      	str	r0, [r4, #0]
 8016be2:	6061      	str	r1, [r4, #4]
 8016be4:	60a2      	str	r2, [r4, #8]
			break;
 8016be6:	f005 bc9d 	b.w	801c524 <problem_fetch+0x1ae60>
 8016bea:	bf00      	nop
 8016bec:	0802af4c 	.word	0x0802af4c
 8016bf0:	080238ec 	.word	0x080238ec
 8016bf4:	0802af64 	.word	0x0802af64
 8016bf8:	0802af70 	.word	0x0802af70
 8016bfc:	08023d20 	.word	0x08023d20
 8016c00:	0802af80 	.word	0x0802af80
 8016c04:	08023854 	.word	0x08023854
 8016c08:	0802af98 	.word	0x0802af98
 8016c0c:	0802afac 	.word	0x0802afac
 8016c10:	08024838 	.word	0x08024838
 8016c14:	0802afc4 	.word	0x0802afc4
 8016c18:	0802afcc 	.word	0x0802afcc
 8016c1c:	0802afdc 	.word	0x0802afdc
 8016c20:	08023978 	.word	0x08023978
 8016c24:	0802aff4 	.word	0x0802aff4
 8016c28:	0802affc 	.word	0x0802affc
 8016c2c:	08024024 	.word	0x08024024
 8016c30:	080238cc 	.word	0x080238cc
 8016c34:	0802b00c 	.word	0x0802b00c
 8016c38:	0802b018 	.word	0x0802b018
 8016c3c:	0802b028 	.word	0x0802b028
 8016c40:	0802b040 	.word	0x0802b040
 8016c44:	08023990 	.word	0x08023990
 8016c48:	0802b054 	.word	0x0802b054
 8016c4c:	0802b060 	.word	0x0802b060
 8016c50:	08023834 	.word	0x08023834
		case 633 :
			strcpy(p->name,"ACG68");
 8016c54:	687b      	ldr	r3, [r7, #4]
 8016c56:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8016c5a:	4ac2      	ldr	r2, [pc, #776]	; (8016f64 <problem_fetch+0x158a0>)
 8016c5c:	6810      	ldr	r0, [r2, #0]
 8016c5e:	6018      	str	r0, [r3, #0]
 8016c60:	8892      	ldrh	r2, [r2, #4]
 8016c62:	809a      	strh	r2, [r3, #4]
			strcpy(p->grade,"6C+");
 8016c64:	687b      	ldr	r3, [r7, #4]
 8016c66:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8016c6a:	4abf      	ldr	r2, [pc, #764]	; (8016f68 <problem_fetch+0x158a4>)
 8016c6c:	6810      	ldr	r0, [r2, #0]
 8016c6e:	6018      	str	r0, [r3, #0]
			p->moveSize = 8;
 8016c70:	687b      	ldr	r3, [r7, #4]
 8016c72:	2208      	movs	r2, #8
 8016c74:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,G,E,F,D,B,E,A");
 8016c76:	687b      	ldr	r3, [r7, #4]
 8016c78:	33a4      	adds	r3, #164	; 0xa4
 8016c7a:	4abc      	ldr	r2, [pc, #752]	; (8016f6c <problem_fetch+0x158a8>)
 8016c7c:	461c      	mov	r4, r3
 8016c7e:	4615      	mov	r5, r2
 8016c80:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8016c82:	6020      	str	r0, [r4, #0]
 8016c84:	6061      	str	r1, [r4, #4]
 8016c86:	60a2      	str	r2, [r4, #8]
 8016c88:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,6,8,11,11,6,16,18");
 8016c8a:	687b      	ldr	r3, [r7, #4]
 8016c8c:	3304      	adds	r3, #4
 8016c8e:	4ab8      	ldr	r2, [pc, #736]	; (8016f70 <problem_fetch+0x158ac>)
 8016c90:	461d      	mov	r5, r3
 8016c92:	4614      	mov	r4, r2
 8016c94:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8016c96:	6028      	str	r0, [r5, #0]
 8016c98:	6069      	str	r1, [r5, #4]
 8016c9a:	60aa      	str	r2, [r5, #8]
 8016c9c:	60eb      	str	r3, [r5, #12]
 8016c9e:	6820      	ldr	r0, [r4, #0]
 8016ca0:	6128      	str	r0, [r5, #16]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,e");
 8016ca2:	687b      	ldr	r3, [r7, #4]
 8016ca4:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8016ca8:	4ab2      	ldr	r2, [pc, #712]	; (8016f74 <problem_fetch+0x158b0>)
 8016caa:	461c      	mov	r4, r3
 8016cac:	4615      	mov	r5, r2
 8016cae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8016cb0:	6020      	str	r0, [r4, #0]
 8016cb2:	6061      	str	r1, [r4, #4]
 8016cb4:	60a2      	str	r2, [r4, #8]
 8016cb6:	60e3      	str	r3, [r4, #12]
			break;
 8016cb8:	f005 bc34 	b.w	801c524 <problem_fetch+0x1ae60>
		case 634 :
			strcpy(p->name,"ROBERTDS#1");
 8016cbc:	687b      	ldr	r3, [r7, #4]
 8016cbe:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8016cc2:	49ad      	ldr	r1, [pc, #692]	; (8016f78 <problem_fetch+0x158b4>)
 8016cc4:	461a      	mov	r2, r3
 8016cc6:	460b      	mov	r3, r1
 8016cc8:	cb03      	ldmia	r3!, {r0, r1}
 8016cca:	6010      	str	r0, [r2, #0]
 8016ccc:	6051      	str	r1, [r2, #4]
 8016cce:	8819      	ldrh	r1, [r3, #0]
 8016cd0:	789b      	ldrb	r3, [r3, #2]
 8016cd2:	8111      	strh	r1, [r2, #8]
 8016cd4:	7293      	strb	r3, [r2, #10]
			strcpy(p->grade,"6B+");
 8016cd6:	687b      	ldr	r3, [r7, #4]
 8016cd8:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8016cdc:	4aa7      	ldr	r2, [pc, #668]	; (8016f7c <problem_fetch+0x158b8>)
 8016cde:	6810      	ldr	r0, [r2, #0]
 8016ce0:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 8016ce2:	687b      	ldr	r3, [r7, #4]
 8016ce4:	2207      	movs	r2, #7
 8016ce6:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"B,E,B,D,B,D,D");
 8016ce8:	687b      	ldr	r3, [r7, #4]
 8016cea:	33a4      	adds	r3, #164	; 0xa4
 8016cec:	4aa4      	ldr	r2, [pc, #656]	; (8016f80 <problem_fetch+0x158bc>)
 8016cee:	461c      	mov	r4, r3
 8016cf0:	4613      	mov	r3, r2
 8016cf2:	cb07      	ldmia	r3!, {r0, r1, r2}
 8016cf4:	6020      	str	r0, [r4, #0]
 8016cf6:	6061      	str	r1, [r4, #4]
 8016cf8:	60a2      	str	r2, [r4, #8]
 8016cfa:	881b      	ldrh	r3, [r3, #0]
 8016cfc:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"6,8,10,11,12,15,18");
 8016cfe:	687b      	ldr	r3, [r7, #4]
 8016d00:	3304      	adds	r3, #4
 8016d02:	4aa0      	ldr	r2, [pc, #640]	; (8016f84 <problem_fetch+0x158c0>)
 8016d04:	461d      	mov	r5, r3
 8016d06:	4614      	mov	r4, r2
 8016d08:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8016d0a:	6028      	str	r0, [r5, #0]
 8016d0c:	6069      	str	r1, [r5, #4]
 8016d0e:	60aa      	str	r2, [r5, #8]
 8016d10:	60eb      	str	r3, [r5, #12]
 8016d12:	8823      	ldrh	r3, [r4, #0]
 8016d14:	78a2      	ldrb	r2, [r4, #2]
 8016d16:	822b      	strh	r3, [r5, #16]
 8016d18:	4613      	mov	r3, r2
 8016d1a:	74ab      	strb	r3, [r5, #18]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 8016d1c:	687b      	ldr	r3, [r7, #4]
 8016d1e:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8016d22:	4a99      	ldr	r2, [pc, #612]	; (8016f88 <problem_fetch+0x158c4>)
 8016d24:	461c      	mov	r4, r3
 8016d26:	4613      	mov	r3, r2
 8016d28:	cb07      	ldmia	r3!, {r0, r1, r2}
 8016d2a:	6020      	str	r0, [r4, #0]
 8016d2c:	6061      	str	r1, [r4, #4]
 8016d2e:	60a2      	str	r2, [r4, #8]
 8016d30:	881b      	ldrh	r3, [r3, #0]
 8016d32:	81a3      	strh	r3, [r4, #12]
			break;
 8016d34:	f005 bbf6 	b.w	801c524 <problem_fetch+0x1ae60>
		case 635 :
			strcpy(p->name,"DEATH EATER");
 8016d38:	687b      	ldr	r3, [r7, #4]
 8016d3a:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8016d3e:	4a93      	ldr	r2, [pc, #588]	; (8016f8c <problem_fetch+0x158c8>)
 8016d40:	461c      	mov	r4, r3
 8016d42:	4613      	mov	r3, r2
 8016d44:	cb07      	ldmia	r3!, {r0, r1, r2}
 8016d46:	6020      	str	r0, [r4, #0]
 8016d48:	6061      	str	r1, [r4, #4]
 8016d4a:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade,"6B+");
 8016d4c:	687b      	ldr	r3, [r7, #4]
 8016d4e:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8016d52:	4a8a      	ldr	r2, [pc, #552]	; (8016f7c <problem_fetch+0x158b8>)
 8016d54:	6810      	ldr	r0, [r2, #0]
 8016d56:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 8016d58:	687b      	ldr	r3, [r7, #4]
 8016d5a:	2207      	movs	r2, #7
 8016d5c:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,E,H,I,J,G,I");
 8016d5e:	687b      	ldr	r3, [r7, #4]
 8016d60:	33a4      	adds	r3, #164	; 0xa4
 8016d62:	4a8b      	ldr	r2, [pc, #556]	; (8016f90 <problem_fetch+0x158cc>)
 8016d64:	461c      	mov	r4, r3
 8016d66:	4613      	mov	r3, r2
 8016d68:	cb07      	ldmia	r3!, {r0, r1, r2}
 8016d6a:	6020      	str	r0, [r4, #0]
 8016d6c:	6061      	str	r1, [r4, #4]
 8016d6e:	60a2      	str	r2, [r4, #8]
 8016d70:	881b      	ldrh	r3, [r3, #0]
 8016d72:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,6,8,10,13,15,18");
 8016d74:	687b      	ldr	r3, [r7, #4]
 8016d76:	3304      	adds	r3, #4
 8016d78:	4a86      	ldr	r2, [pc, #536]	; (8016f94 <problem_fetch+0x158d0>)
 8016d7a:	461d      	mov	r5, r3
 8016d7c:	4614      	mov	r4, r2
 8016d7e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8016d80:	6028      	str	r0, [r5, #0]
 8016d82:	6069      	str	r1, [r5, #4]
 8016d84:	60aa      	str	r2, [r5, #8]
 8016d86:	60eb      	str	r3, [r5, #12]
 8016d88:	8823      	ldrh	r3, [r4, #0]
 8016d8a:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,s,d,d,d,d,e");
 8016d8c:	687b      	ldr	r3, [r7, #4]
 8016d8e:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8016d92:	4a81      	ldr	r2, [pc, #516]	; (8016f98 <problem_fetch+0x158d4>)
 8016d94:	461c      	mov	r4, r3
 8016d96:	4613      	mov	r3, r2
 8016d98:	cb07      	ldmia	r3!, {r0, r1, r2}
 8016d9a:	6020      	str	r0, [r4, #0]
 8016d9c:	6061      	str	r1, [r4, #4]
 8016d9e:	60a2      	str	r2, [r4, #8]
 8016da0:	881b      	ldrh	r3, [r3, #0]
 8016da2:	81a3      	strh	r3, [r4, #12]
			break;
 8016da4:	f005 bbbe 	b.w	801c524 <problem_fetch+0x1ae60>
		case 636 :
			strcpy(p->name,"VISUALIZZA STOC......");
 8016da8:	687b      	ldr	r3, [r7, #4]
 8016daa:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8016dae:	4a7b      	ldr	r2, [pc, #492]	; (8016f9c <problem_fetch+0x158d8>)
 8016db0:	461d      	mov	r5, r3
 8016db2:	4614      	mov	r4, r2
 8016db4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8016db6:	6028      	str	r0, [r5, #0]
 8016db8:	6069      	str	r1, [r5, #4]
 8016dba:	60aa      	str	r2, [r5, #8]
 8016dbc:	60eb      	str	r3, [r5, #12]
 8016dbe:	6820      	ldr	r0, [r4, #0]
 8016dc0:	6128      	str	r0, [r5, #16]
 8016dc2:	88a3      	ldrh	r3, [r4, #4]
 8016dc4:	82ab      	strh	r3, [r5, #20]
			strcpy(p->grade,"7B");
 8016dc6:	687b      	ldr	r3, [r7, #4]
 8016dc8:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8016dcc:	4a74      	ldr	r2, [pc, #464]	; (8016fa0 <problem_fetch+0x158dc>)
 8016dce:	8811      	ldrh	r1, [r2, #0]
 8016dd0:	7892      	ldrb	r2, [r2, #2]
 8016dd2:	8019      	strh	r1, [r3, #0]
 8016dd4:	709a      	strb	r2, [r3, #2]
			p->moveSize = 6;
 8016dd6:	687b      	ldr	r3, [r7, #4]
 8016dd8:	2206      	movs	r2, #6
 8016dda:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,H,E,H,F,I");
 8016ddc:	687b      	ldr	r3, [r7, #4]
 8016dde:	33a4      	adds	r3, #164	; 0xa4
 8016de0:	4a70      	ldr	r2, [pc, #448]	; (8016fa4 <problem_fetch+0x158e0>)
 8016de2:	461c      	mov	r4, r3
 8016de4:	4613      	mov	r3, r2
 8016de6:	cb07      	ldmia	r3!, {r0, r1, r2}
 8016de8:	6020      	str	r0, [r4, #0]
 8016dea:	6061      	str	r1, [r4, #4]
 8016dec:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,8,9,12,13,18");
 8016dee:	687b      	ldr	r3, [r7, #4]
 8016df0:	3304      	adds	r3, #4
 8016df2:	4a6d      	ldr	r2, [pc, #436]	; (8016fa8 <problem_fetch+0x158e4>)
 8016df4:	461c      	mov	r4, r3
 8016df6:	4613      	mov	r3, r2
 8016df8:	cb07      	ldmia	r3!, {r0, r1, r2}
 8016dfa:	6020      	str	r0, [r4, #0]
 8016dfc:	6061      	str	r1, [r4, #4]
 8016dfe:	60a2      	str	r2, [r4, #8]
 8016e00:	881a      	ldrh	r2, [r3, #0]
 8016e02:	789b      	ldrb	r3, [r3, #2]
 8016e04:	81a2      	strh	r2, [r4, #12]
 8016e06:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 8016e08:	687b      	ldr	r3, [r7, #4]
 8016e0a:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8016e0e:	4a67      	ldr	r2, [pc, #412]	; (8016fac <problem_fetch+0x158e8>)
 8016e10:	461c      	mov	r4, r3
 8016e12:	4613      	mov	r3, r2
 8016e14:	cb07      	ldmia	r3!, {r0, r1, r2}
 8016e16:	6020      	str	r0, [r4, #0]
 8016e18:	6061      	str	r1, [r4, #4]
 8016e1a:	60a2      	str	r2, [r4, #8]
			break;
 8016e1c:	f005 bb82 	b.w	801c524 <problem_fetch+0x1ae60>
		case 637 :
			strcpy(p->name,"SHRINE1");
 8016e20:	687b      	ldr	r3, [r7, #4]
 8016e22:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8016e26:	4962      	ldr	r1, [pc, #392]	; (8016fb0 <problem_fetch+0x158ec>)
 8016e28:	461a      	mov	r2, r3
 8016e2a:	460b      	mov	r3, r1
 8016e2c:	cb03      	ldmia	r3!, {r0, r1}
 8016e2e:	6010      	str	r0, [r2, #0]
 8016e30:	6051      	str	r1, [r2, #4]
			strcpy(p->grade,"7B+");
 8016e32:	687b      	ldr	r3, [r7, #4]
 8016e34:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8016e38:	4a5e      	ldr	r2, [pc, #376]	; (8016fb4 <problem_fetch+0x158f0>)
 8016e3a:	6810      	ldr	r0, [r2, #0]
 8016e3c:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 8016e3e:	687b      	ldr	r3, [r7, #4]
 8016e40:	2206      	movs	r2, #6
 8016e42:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"C,C,F,F,J,I");
 8016e44:	687b      	ldr	r3, [r7, #4]
 8016e46:	33a4      	adds	r3, #164	; 0xa4
 8016e48:	4a5b      	ldr	r2, [pc, #364]	; (8016fb8 <problem_fetch+0x158f4>)
 8016e4a:	461c      	mov	r4, r3
 8016e4c:	4613      	mov	r3, r2
 8016e4e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8016e50:	6020      	str	r0, [r4, #0]
 8016e52:	6061      	str	r1, [r4, #4]
 8016e54:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,8,11,13,16,18");
 8016e56:	687b      	ldr	r3, [r7, #4]
 8016e58:	3304      	adds	r3, #4
 8016e5a:	4a58      	ldr	r2, [pc, #352]	; (8016fbc <problem_fetch+0x158f8>)
 8016e5c:	461c      	mov	r4, r3
 8016e5e:	4615      	mov	r5, r2
 8016e60:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8016e62:	6020      	str	r0, [r4, #0]
 8016e64:	6061      	str	r1, [r4, #4]
 8016e66:	60a2      	str	r2, [r4, #8]
 8016e68:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 8016e6a:	687b      	ldr	r3, [r7, #4]
 8016e6c:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8016e70:	4a4e      	ldr	r2, [pc, #312]	; (8016fac <problem_fetch+0x158e8>)
 8016e72:	461c      	mov	r4, r3
 8016e74:	4613      	mov	r3, r2
 8016e76:	cb07      	ldmia	r3!, {r0, r1, r2}
 8016e78:	6020      	str	r0, [r4, #0]
 8016e7a:	6061      	str	r1, [r4, #4]
 8016e7c:	60a2      	str	r2, [r4, #8]
			break;
 8016e7e:	f005 bb51 	b.w	801c524 <problem_fetch+0x1ae60>
		case 638 :
			strcpy(p->name,"SQUINCHER");
 8016e82:	687b      	ldr	r3, [r7, #4]
 8016e84:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8016e88:	494d      	ldr	r1, [pc, #308]	; (8016fc0 <problem_fetch+0x158fc>)
 8016e8a:	461a      	mov	r2, r3
 8016e8c:	460b      	mov	r3, r1
 8016e8e:	cb03      	ldmia	r3!, {r0, r1}
 8016e90:	6010      	str	r0, [r2, #0]
 8016e92:	6051      	str	r1, [r2, #4]
 8016e94:	881b      	ldrh	r3, [r3, #0]
 8016e96:	8113      	strh	r3, [r2, #8]
			strcpy(p->grade,"6B+");
 8016e98:	687b      	ldr	r3, [r7, #4]
 8016e9a:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8016e9e:	4a37      	ldr	r2, [pc, #220]	; (8016f7c <problem_fetch+0x158b8>)
 8016ea0:	6810      	ldr	r0, [r2, #0]
 8016ea2:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 8016ea4:	687b      	ldr	r3, [r7, #4]
 8016ea6:	2207      	movs	r2, #7
 8016ea8:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,H,G,F,C,D,D");
 8016eaa:	687b      	ldr	r3, [r7, #4]
 8016eac:	33a4      	adds	r3, #164	; 0xa4
 8016eae:	4a45      	ldr	r2, [pc, #276]	; (8016fc4 <problem_fetch+0x15900>)
 8016eb0:	461c      	mov	r4, r3
 8016eb2:	4613      	mov	r3, r2
 8016eb4:	cb07      	ldmia	r3!, {r0, r1, r2}
 8016eb6:	6020      	str	r0, [r4, #0]
 8016eb8:	6061      	str	r1, [r4, #4]
 8016eba:	60a2      	str	r2, [r4, #8]
 8016ebc:	881b      	ldrh	r3, [r3, #0]
 8016ebe:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,8,9,11,13,15,18");
 8016ec0:	687b      	ldr	r3, [r7, #4]
 8016ec2:	3304      	adds	r3, #4
 8016ec4:	4a40      	ldr	r2, [pc, #256]	; (8016fc8 <problem_fetch+0x15904>)
 8016ec6:	461d      	mov	r5, r3
 8016ec8:	4614      	mov	r4, r2
 8016eca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8016ecc:	6028      	str	r0, [r5, #0]
 8016ece:	6069      	str	r1, [r5, #4]
 8016ed0:	60aa      	str	r2, [r5, #8]
 8016ed2:	60eb      	str	r3, [r5, #12]
 8016ed4:	8823      	ldrh	r3, [r4, #0]
 8016ed6:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 8016ed8:	687b      	ldr	r3, [r7, #4]
 8016eda:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8016ede:	4a2a      	ldr	r2, [pc, #168]	; (8016f88 <problem_fetch+0x158c4>)
 8016ee0:	461c      	mov	r4, r3
 8016ee2:	4613      	mov	r3, r2
 8016ee4:	cb07      	ldmia	r3!, {r0, r1, r2}
 8016ee6:	6020      	str	r0, [r4, #0]
 8016ee8:	6061      	str	r1, [r4, #4]
 8016eea:	60a2      	str	r2, [r4, #8]
 8016eec:	881b      	ldrh	r3, [r3, #0]
 8016eee:	81a3      	strh	r3, [r4, #12]
			break;
 8016ef0:	f005 bb18 	b.w	801c524 <problem_fetch+0x1ae60>
		case 639 :
			strcpy(p->name,"ACG6 PLUS");
 8016ef4:	687b      	ldr	r3, [r7, #4]
 8016ef6:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8016efa:	4934      	ldr	r1, [pc, #208]	; (8016fcc <problem_fetch+0x15908>)
 8016efc:	461a      	mov	r2, r3
 8016efe:	460b      	mov	r3, r1
 8016f00:	cb03      	ldmia	r3!, {r0, r1}
 8016f02:	6010      	str	r0, [r2, #0]
 8016f04:	6051      	str	r1, [r2, #4]
 8016f06:	881b      	ldrh	r3, [r3, #0]
 8016f08:	8113      	strh	r3, [r2, #8]
			strcpy(p->grade,"7A");
 8016f0a:	687b      	ldr	r3, [r7, #4]
 8016f0c:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8016f10:	4a2f      	ldr	r2, [pc, #188]	; (8016fd0 <problem_fetch+0x1590c>)
 8016f12:	8811      	ldrh	r1, [r2, #0]
 8016f14:	7892      	ldrb	r2, [r2, #2]
 8016f16:	8019      	strh	r1, [r3, #0]
 8016f18:	709a      	strb	r2, [r3, #2]
			p->moveSize = 6;
 8016f1a:	687b      	ldr	r3, [r7, #4]
 8016f1c:	2206      	movs	r2, #6
 8016f1e:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,H,C,E,C,I");
 8016f20:	687b      	ldr	r3, [r7, #4]
 8016f22:	33a4      	adds	r3, #164	; 0xa4
 8016f24:	4a2b      	ldr	r2, [pc, #172]	; (8016fd4 <problem_fetch+0x15910>)
 8016f26:	461c      	mov	r4, r3
 8016f28:	4613      	mov	r3, r2
 8016f2a:	cb07      	ldmia	r3!, {r0, r1, r2}
 8016f2c:	6020      	str	r0, [r4, #0]
 8016f2e:	6061      	str	r1, [r4, #4]
 8016f30:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,10,13,16,16,18");
 8016f32:	687b      	ldr	r3, [r7, #4]
 8016f34:	3304      	adds	r3, #4
 8016f36:	4a28      	ldr	r2, [pc, #160]	; (8016fd8 <problem_fetch+0x15914>)
 8016f38:	461d      	mov	r5, r3
 8016f3a:	4614      	mov	r4, r2
 8016f3c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8016f3e:	6028      	str	r0, [r5, #0]
 8016f40:	6069      	str	r1, [r5, #4]
 8016f42:	60aa      	str	r2, [r5, #8]
 8016f44:	60eb      	str	r3, [r5, #12]
 8016f46:	7823      	ldrb	r3, [r4, #0]
 8016f48:	742b      	strb	r3, [r5, #16]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 8016f4a:	687b      	ldr	r3, [r7, #4]
 8016f4c:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8016f50:	4a16      	ldr	r2, [pc, #88]	; (8016fac <problem_fetch+0x158e8>)
 8016f52:	461c      	mov	r4, r3
 8016f54:	4613      	mov	r3, r2
 8016f56:	cb07      	ldmia	r3!, {r0, r1, r2}
 8016f58:	6020      	str	r0, [r4, #0]
 8016f5a:	6061      	str	r1, [r4, #4]
 8016f5c:	60a2      	str	r2, [r4, #8]
			break;
 8016f5e:	f005 bae1 	b.w	801c524 <problem_fetch+0x1ae60>
 8016f62:	bf00      	nop
 8016f64:	0802b070 	.word	0x0802b070
 8016f68:	080238ec 	.word	0x080238ec
 8016f6c:	0802b078 	.word	0x0802b078
 8016f70:	0802b088 	.word	0x0802b088
 8016f74:	08023978 	.word	0x08023978
 8016f78:	0802b09c 	.word	0x0802b09c
 8016f7c:	08023854 	.word	0x08023854
 8016f80:	0802b0a8 	.word	0x0802b0a8
 8016f84:	0802b0b8 	.word	0x0802b0b8
 8016f88:	080239dc 	.word	0x080239dc
 8016f8c:	0802b0cc 	.word	0x0802b0cc
 8016f90:	0802b0d8 	.word	0x0802b0d8
 8016f94:	0802b0e8 	.word	0x0802b0e8
 8016f98:	080238cc 	.word	0x080238cc
 8016f9c:	0802b0fc 	.word	0x0802b0fc
 8016fa0:	08023f4c 	.word	0x08023f4c
 8016fa4:	0802b114 	.word	0x0802b114
 8016fa8:	08027c90 	.word	0x08027c90
 8016fac:	08023bf0 	.word	0x08023bf0
 8016fb0:	0802b120 	.word	0x0802b120
 8016fb4:	08023990 	.word	0x08023990
 8016fb8:	0802b128 	.word	0x0802b128
 8016fbc:	0802b134 	.word	0x0802b134
 8016fc0:	0802b144 	.word	0x0802b144
 8016fc4:	0802b150 	.word	0x0802b150
 8016fc8:	0802b160 	.word	0x0802b160
 8016fcc:	0802b174 	.word	0x0802b174
 8016fd0:	08023814 	.word	0x08023814
 8016fd4:	0802b180 	.word	0x0802b180
 8016fd8:	0802b18c 	.word	0x0802b18c
		case 640 :
			strcpy(p->name,"ROCKET");
 8016fdc:	687b      	ldr	r3, [r7, #4]
 8016fde:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8016fe2:	4aba      	ldr	r2, [pc, #744]	; (80172cc <problem_fetch+0x15c08>)
 8016fe4:	6810      	ldr	r0, [r2, #0]
 8016fe6:	6018      	str	r0, [r3, #0]
 8016fe8:	8891      	ldrh	r1, [r2, #4]
 8016fea:	7992      	ldrb	r2, [r2, #6]
 8016fec:	8099      	strh	r1, [r3, #4]
 8016fee:	719a      	strb	r2, [r3, #6]
			strcpy(p->grade,"7A");
 8016ff0:	687b      	ldr	r3, [r7, #4]
 8016ff2:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8016ff6:	4ab6      	ldr	r2, [pc, #728]	; (80172d0 <problem_fetch+0x15c0c>)
 8016ff8:	8811      	ldrh	r1, [r2, #0]
 8016ffa:	7892      	ldrb	r2, [r2, #2]
 8016ffc:	8019      	strh	r1, [r3, #0]
 8016ffe:	709a      	strb	r2, [r3, #2]
			p->moveSize = 5;
 8017000:	687b      	ldr	r3, [r7, #4]
 8017002:	2205      	movs	r2, #5
 8017004:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"B,E,H,F,I");
 8017006:	687b      	ldr	r3, [r7, #4]
 8017008:	33a4      	adds	r3, #164	; 0xa4
 801700a:	49b2      	ldr	r1, [pc, #712]	; (80172d4 <problem_fetch+0x15c10>)
 801700c:	461a      	mov	r2, r3
 801700e:	460b      	mov	r3, r1
 8017010:	cb03      	ldmia	r3!, {r0, r1}
 8017012:	6010      	str	r0, [r2, #0]
 8017014:	6051      	str	r1, [r2, #4]
 8017016:	881b      	ldrh	r3, [r3, #0]
 8017018:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"6,6,10,13,18");
 801701a:	687b      	ldr	r3, [r7, #4]
 801701c:	3304      	adds	r3, #4
 801701e:	4aae      	ldr	r2, [pc, #696]	; (80172d8 <problem_fetch+0x15c14>)
 8017020:	461c      	mov	r4, r3
 8017022:	4613      	mov	r3, r2
 8017024:	cb07      	ldmia	r3!, {r0, r1, r2}
 8017026:	6020      	str	r0, [r4, #0]
 8017028:	6061      	str	r1, [r4, #4]
 801702a:	60a2      	str	r2, [r4, #8]
 801702c:	781b      	ldrb	r3, [r3, #0]
 801702e:	7323      	strb	r3, [r4, #12]
			strcpy(p->startFinish,"s,s,d,d,e");
 8017030:	687b      	ldr	r3, [r7, #4]
 8017032:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8017036:	49a9      	ldr	r1, [pc, #676]	; (80172dc <problem_fetch+0x15c18>)
 8017038:	461a      	mov	r2, r3
 801703a:	460b      	mov	r3, r1
 801703c:	cb03      	ldmia	r3!, {r0, r1}
 801703e:	6010      	str	r0, [r2, #0]
 8017040:	6051      	str	r1, [r2, #4]
 8017042:	881b      	ldrh	r3, [r3, #0]
 8017044:	8113      	strh	r3, [r2, #8]
			break;
 8017046:	f005 ba6d 	b.w	801c524 <problem_fetch+0x1ae60>
		case 641 :
			strcpy(p->name,"GAMBERO");
 801704a:	687b      	ldr	r3, [r7, #4]
 801704c:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8017050:	49a3      	ldr	r1, [pc, #652]	; (80172e0 <problem_fetch+0x15c1c>)
 8017052:	461a      	mov	r2, r3
 8017054:	460b      	mov	r3, r1
 8017056:	cb03      	ldmia	r3!, {r0, r1}
 8017058:	6010      	str	r0, [r2, #0]
 801705a:	6051      	str	r1, [r2, #4]
			strcpy(p->grade,"7C");
 801705c:	687b      	ldr	r3, [r7, #4]
 801705e:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8017062:	4aa0      	ldr	r2, [pc, #640]	; (80172e4 <problem_fetch+0x15c20>)
 8017064:	8811      	ldrh	r1, [r2, #0]
 8017066:	7892      	ldrb	r2, [r2, #2]
 8017068:	8019      	strh	r1, [r3, #0]
 801706a:	709a      	strb	r2, [r3, #2]
			p->moveSize = 6;
 801706c:	687b      	ldr	r3, [r7, #4]
 801706e:	2206      	movs	r2, #6
 8017070:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,G,E,B,E,A");
 8017072:	687b      	ldr	r3, [r7, #4]
 8017074:	33a4      	adds	r3, #164	; 0xa4
 8017076:	4a9c      	ldr	r2, [pc, #624]	; (80172e8 <problem_fetch+0x15c24>)
 8017078:	461c      	mov	r4, r3
 801707a:	4613      	mov	r3, r2
 801707c:	cb07      	ldmia	r3!, {r0, r1, r2}
 801707e:	6020      	str	r0, [r4, #0]
 8017080:	6061      	str	r1, [r4, #4]
 8017082:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,6,9,12,14,18");
 8017084:	687b      	ldr	r3, [r7, #4]
 8017086:	3304      	adds	r3, #4
 8017088:	4a98      	ldr	r2, [pc, #608]	; (80172ec <problem_fetch+0x15c28>)
 801708a:	461c      	mov	r4, r3
 801708c:	4613      	mov	r3, r2
 801708e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8017090:	6020      	str	r0, [r4, #0]
 8017092:	6061      	str	r1, [r4, #4]
 8017094:	60a2      	str	r2, [r4, #8]
 8017096:	881a      	ldrh	r2, [r3, #0]
 8017098:	789b      	ldrb	r3, [r3, #2]
 801709a:	81a2      	strh	r2, [r4, #12]
 801709c:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 801709e:	687b      	ldr	r3, [r7, #4]
 80170a0:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 80170a4:	4a92      	ldr	r2, [pc, #584]	; (80172f0 <problem_fetch+0x15c2c>)
 80170a6:	461c      	mov	r4, r3
 80170a8:	4613      	mov	r3, r2
 80170aa:	cb07      	ldmia	r3!, {r0, r1, r2}
 80170ac:	6020      	str	r0, [r4, #0]
 80170ae:	6061      	str	r1, [r4, #4]
 80170b0:	60a2      	str	r2, [r4, #8]
			break;
 80170b2:	f005 ba37 	b.w	801c524 <problem_fetch+0x1ae60>
		case 642 :
			strcpy(p->name,"FIRST WORLD PROBLEM");
 80170b6:	687b      	ldr	r3, [r7, #4]
 80170b8:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80170bc:	4a8d      	ldr	r2, [pc, #564]	; (80172f4 <problem_fetch+0x15c30>)
 80170be:	461d      	mov	r5, r3
 80170c0:	4614      	mov	r4, r2
 80170c2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80170c4:	6028      	str	r0, [r5, #0]
 80170c6:	6069      	str	r1, [r5, #4]
 80170c8:	60aa      	str	r2, [r5, #8]
 80170ca:	60eb      	str	r3, [r5, #12]
 80170cc:	6820      	ldr	r0, [r4, #0]
 80170ce:	6128      	str	r0, [r5, #16]
			strcpy(p->grade,"6C+");
 80170d0:	687b      	ldr	r3, [r7, #4]
 80170d2:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80170d6:	4a88      	ldr	r2, [pc, #544]	; (80172f8 <problem_fetch+0x15c34>)
 80170d8:	6810      	ldr	r0, [r2, #0]
 80170da:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 80170dc:	687b      	ldr	r3, [r7, #4]
 80170de:	2206      	movs	r2, #6
 80170e0:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"E,E,C,E,C,D");
 80170e2:	687b      	ldr	r3, [r7, #4]
 80170e4:	33a4      	adds	r3, #164	; 0xa4
 80170e6:	4a85      	ldr	r2, [pc, #532]	; (80172fc <problem_fetch+0x15c38>)
 80170e8:	461c      	mov	r4, r3
 80170ea:	4613      	mov	r3, r2
 80170ec:	cb07      	ldmia	r3!, {r0, r1, r2}
 80170ee:	6020      	str	r0, [r4, #0]
 80170f0:	6061      	str	r1, [r4, #4]
 80170f2:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"6,9,8,14,13,18");
 80170f4:	687b      	ldr	r3, [r7, #4]
 80170f6:	3304      	adds	r3, #4
 80170f8:	4a81      	ldr	r2, [pc, #516]	; (8017300 <problem_fetch+0x15c3c>)
 80170fa:	461c      	mov	r4, r3
 80170fc:	4613      	mov	r3, r2
 80170fe:	cb07      	ldmia	r3!, {r0, r1, r2}
 8017100:	6020      	str	r0, [r4, #0]
 8017102:	6061      	str	r1, [r4, #4]
 8017104:	60a2      	str	r2, [r4, #8]
 8017106:	881a      	ldrh	r2, [r3, #0]
 8017108:	789b      	ldrb	r3, [r3, #2]
 801710a:	81a2      	strh	r2, [r4, #12]
 801710c:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 801710e:	687b      	ldr	r3, [r7, #4]
 8017110:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8017114:	4a76      	ldr	r2, [pc, #472]	; (80172f0 <problem_fetch+0x15c2c>)
 8017116:	461c      	mov	r4, r3
 8017118:	4613      	mov	r3, r2
 801711a:	cb07      	ldmia	r3!, {r0, r1, r2}
 801711c:	6020      	str	r0, [r4, #0]
 801711e:	6061      	str	r1, [r4, #4]
 8017120:	60a2      	str	r2, [r4, #8]
			break;
 8017122:	f005 b9ff 	b.w	801c524 <problem_fetch+0x1ae60>
		case 643 :
			strcpy(p->name,"POCKETLAND 2");
 8017126:	687b      	ldr	r3, [r7, #4]
 8017128:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801712c:	4a75      	ldr	r2, [pc, #468]	; (8017304 <problem_fetch+0x15c40>)
 801712e:	461c      	mov	r4, r3
 8017130:	4613      	mov	r3, r2
 8017132:	cb07      	ldmia	r3!, {r0, r1, r2}
 8017134:	6020      	str	r0, [r4, #0]
 8017136:	6061      	str	r1, [r4, #4]
 8017138:	60a2      	str	r2, [r4, #8]
 801713a:	781b      	ldrb	r3, [r3, #0]
 801713c:	7323      	strb	r3, [r4, #12]
			strcpy(p->grade,"7C");
 801713e:	687b      	ldr	r3, [r7, #4]
 8017140:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8017144:	4a67      	ldr	r2, [pc, #412]	; (80172e4 <problem_fetch+0x15c20>)
 8017146:	8811      	ldrh	r1, [r2, #0]
 8017148:	7892      	ldrb	r2, [r2, #2]
 801714a:	8019      	strh	r1, [r3, #0]
 801714c:	709a      	strb	r2, [r3, #2]
			p->moveSize = 6;
 801714e:	687b      	ldr	r3, [r7, #4]
 8017150:	2206      	movs	r2, #6
 8017152:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"H,D,G,H,E,I");
 8017154:	687b      	ldr	r3, [r7, #4]
 8017156:	33a4      	adds	r3, #164	; 0xa4
 8017158:	4a6b      	ldr	r2, [pc, #428]	; (8017308 <problem_fetch+0x15c44>)
 801715a:	461c      	mov	r4, r3
 801715c:	4613      	mov	r3, r2
 801715e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8017160:	6020      	str	r0, [r4, #0]
 8017162:	6061      	str	r1, [r4, #4]
 8017164:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,7,10,13,16,18");
 8017166:	687b      	ldr	r3, [r7, #4]
 8017168:	3304      	adds	r3, #4
 801716a:	4a68      	ldr	r2, [pc, #416]	; (801730c <problem_fetch+0x15c48>)
 801716c:	461c      	mov	r4, r3
 801716e:	4615      	mov	r5, r2
 8017170:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8017172:	6020      	str	r0, [r4, #0]
 8017174:	6061      	str	r1, [r4, #4]
 8017176:	60a2      	str	r2, [r4, #8]
 8017178:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 801717a:	687b      	ldr	r3, [r7, #4]
 801717c:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8017180:	4a5b      	ldr	r2, [pc, #364]	; (80172f0 <problem_fetch+0x15c2c>)
 8017182:	461c      	mov	r4, r3
 8017184:	4613      	mov	r3, r2
 8017186:	cb07      	ldmia	r3!, {r0, r1, r2}
 8017188:	6020      	str	r0, [r4, #0]
 801718a:	6061      	str	r1, [r4, #4]
 801718c:	60a2      	str	r2, [r4, #8]
			break;
 801718e:	f005 b9c9 	b.w	801c524 <problem_fetch+0x1ae60>
		case 644 :
			strcpy(p->name,"POCKETLAND");
 8017192:	687b      	ldr	r3, [r7, #4]
 8017194:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8017198:	495d      	ldr	r1, [pc, #372]	; (8017310 <problem_fetch+0x15c4c>)
 801719a:	461a      	mov	r2, r3
 801719c:	460b      	mov	r3, r1
 801719e:	cb03      	ldmia	r3!, {r0, r1}
 80171a0:	6010      	str	r0, [r2, #0]
 80171a2:	6051      	str	r1, [r2, #4]
 80171a4:	8819      	ldrh	r1, [r3, #0]
 80171a6:	789b      	ldrb	r3, [r3, #2]
 80171a8:	8111      	strh	r1, [r2, #8]
 80171aa:	7293      	strb	r3, [r2, #10]
			strcpy(p->grade,"7B");
 80171ac:	687b      	ldr	r3, [r7, #4]
 80171ae:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80171b2:	4a58      	ldr	r2, [pc, #352]	; (8017314 <problem_fetch+0x15c50>)
 80171b4:	8811      	ldrh	r1, [r2, #0]
 80171b6:	7892      	ldrb	r2, [r2, #2]
 80171b8:	8019      	strh	r1, [r3, #0]
 80171ba:	709a      	strb	r2, [r3, #2]
			p->moveSize = 6;
 80171bc:	687b      	ldr	r3, [r7, #4]
 80171be:	2206      	movs	r2, #6
 80171c0:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,D,G,G,G,A");
 80171c2:	687b      	ldr	r3, [r7, #4]
 80171c4:	33a4      	adds	r3, #164	; 0xa4
 80171c6:	4a54      	ldr	r2, [pc, #336]	; (8017318 <problem_fetch+0x15c54>)
 80171c8:	461c      	mov	r4, r3
 80171ca:	4613      	mov	r3, r2
 80171cc:	cb07      	ldmia	r3!, {r0, r1, r2}
 80171ce:	6020      	str	r0, [r4, #0]
 80171d0:	6061      	str	r1, [r4, #4]
 80171d2:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,7,10,14,17,18");
 80171d4:	687b      	ldr	r3, [r7, #4]
 80171d6:	3304      	adds	r3, #4
 80171d8:	4a50      	ldr	r2, [pc, #320]	; (801731c <problem_fetch+0x15c58>)
 80171da:	461c      	mov	r4, r3
 80171dc:	4615      	mov	r5, r2
 80171de:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80171e0:	6020      	str	r0, [r4, #0]
 80171e2:	6061      	str	r1, [r4, #4]
 80171e4:	60a2      	str	r2, [r4, #8]
 80171e6:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 80171e8:	687b      	ldr	r3, [r7, #4]
 80171ea:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 80171ee:	4a40      	ldr	r2, [pc, #256]	; (80172f0 <problem_fetch+0x15c2c>)
 80171f0:	461c      	mov	r4, r3
 80171f2:	4613      	mov	r3, r2
 80171f4:	cb07      	ldmia	r3!, {r0, r1, r2}
 80171f6:	6020      	str	r0, [r4, #0]
 80171f8:	6061      	str	r1, [r4, #4]
 80171fa:	60a2      	str	r2, [r4, #8]
			break;
 80171fc:	f005 b992 	b.w	801c524 <problem_fetch+0x1ae60>
		case 645 :
			strcpy(p->name,"WLF46");
 8017200:	687b      	ldr	r3, [r7, #4]
 8017202:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8017206:	4a46      	ldr	r2, [pc, #280]	; (8017320 <problem_fetch+0x15c5c>)
 8017208:	6810      	ldr	r0, [r2, #0]
 801720a:	6018      	str	r0, [r3, #0]
 801720c:	8892      	ldrh	r2, [r2, #4]
 801720e:	809a      	strh	r2, [r3, #4]
			strcpy(p->grade,"7A");
 8017210:	687b      	ldr	r3, [r7, #4]
 8017212:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8017216:	4a2e      	ldr	r2, [pc, #184]	; (80172d0 <problem_fetch+0x15c0c>)
 8017218:	8811      	ldrh	r1, [r2, #0]
 801721a:	7892      	ldrb	r2, [r2, #2]
 801721c:	8019      	strh	r1, [r3, #0]
 801721e:	709a      	strb	r2, [r3, #2]
			p->moveSize = 6;
 8017220:	687b      	ldr	r3, [r7, #4]
 8017222:	2206      	movs	r2, #6
 8017224:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,J,I,H,G,I");
 8017226:	687b      	ldr	r3, [r7, #4]
 8017228:	33a4      	adds	r3, #164	; 0xa4
 801722a:	4a3e      	ldr	r2, [pc, #248]	; (8017324 <problem_fetch+0x15c60>)
 801722c:	461c      	mov	r4, r3
 801722e:	4613      	mov	r3, r2
 8017230:	cb07      	ldmia	r3!, {r0, r1, r2}
 8017232:	6020      	str	r0, [r4, #0]
 8017234:	6061      	str	r1, [r4, #4]
 8017236:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,7,10,13,17,18");
 8017238:	687b      	ldr	r3, [r7, #4]
 801723a:	3304      	adds	r3, #4
 801723c:	4a3a      	ldr	r2, [pc, #232]	; (8017328 <problem_fetch+0x15c64>)
 801723e:	461c      	mov	r4, r3
 8017240:	4615      	mov	r5, r2
 8017242:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8017244:	6020      	str	r0, [r4, #0]
 8017246:	6061      	str	r1, [r4, #4]
 8017248:	60a2      	str	r2, [r4, #8]
 801724a:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 801724c:	687b      	ldr	r3, [r7, #4]
 801724e:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8017252:	4a27      	ldr	r2, [pc, #156]	; (80172f0 <problem_fetch+0x15c2c>)
 8017254:	461c      	mov	r4, r3
 8017256:	4613      	mov	r3, r2
 8017258:	cb07      	ldmia	r3!, {r0, r1, r2}
 801725a:	6020      	str	r0, [r4, #0]
 801725c:	6061      	str	r1, [r4, #4]
 801725e:	60a2      	str	r2, [r4, #8]
			break;
 8017260:	f005 b960 	b.w	801c524 <problem_fetch+0x1ae60>
		case 646 :
			strcpy(p->name,"HIEROGRIPIC");
 8017264:	687b      	ldr	r3, [r7, #4]
 8017266:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801726a:	4a30      	ldr	r2, [pc, #192]	; (801732c <problem_fetch+0x15c68>)
 801726c:	461c      	mov	r4, r3
 801726e:	4613      	mov	r3, r2
 8017270:	cb07      	ldmia	r3!, {r0, r1, r2}
 8017272:	6020      	str	r0, [r4, #0]
 8017274:	6061      	str	r1, [r4, #4]
 8017276:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade,"7A");
 8017278:	687b      	ldr	r3, [r7, #4]
 801727a:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801727e:	4a14      	ldr	r2, [pc, #80]	; (80172d0 <problem_fetch+0x15c0c>)
 8017280:	8811      	ldrh	r1, [r2, #0]
 8017282:	7892      	ldrb	r2, [r2, #2]
 8017284:	8019      	strh	r1, [r3, #0]
 8017286:	709a      	strb	r2, [r3, #2]
			p->moveSize = 6;
 8017288:	687b      	ldr	r3, [r7, #4]
 801728a:	2206      	movs	r2, #6
 801728c:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,G,F,C,A,A");
 801728e:	687b      	ldr	r3, [r7, #4]
 8017290:	33a4      	adds	r3, #164	; 0xa4
 8017292:	4a27      	ldr	r2, [pc, #156]	; (8017330 <problem_fetch+0x15c6c>)
 8017294:	461c      	mov	r4, r3
 8017296:	4613      	mov	r3, r2
 8017298:	cb07      	ldmia	r3!, {r0, r1, r2}
 801729a:	6020      	str	r0, [r4, #0]
 801729c:	6061      	str	r1, [r4, #4]
 801729e:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,6,11,13,14,18");
 80172a0:	687b      	ldr	r3, [r7, #4]
 80172a2:	3304      	adds	r3, #4
 80172a4:	4a23      	ldr	r2, [pc, #140]	; (8017334 <problem_fetch+0x15c70>)
 80172a6:	461c      	mov	r4, r3
 80172a8:	4615      	mov	r5, r2
 80172aa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80172ac:	6020      	str	r0, [r4, #0]
 80172ae:	6061      	str	r1, [r4, #4]
 80172b0:	60a2      	str	r2, [r4, #8]
 80172b2:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,s,d,d,d,e");
 80172b4:	687b      	ldr	r3, [r7, #4]
 80172b6:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 80172ba:	4a1f      	ldr	r2, [pc, #124]	; (8017338 <problem_fetch+0x15c74>)
 80172bc:	461c      	mov	r4, r3
 80172be:	4613      	mov	r3, r2
 80172c0:	cb07      	ldmia	r3!, {r0, r1, r2}
 80172c2:	6020      	str	r0, [r4, #0]
 80172c4:	6061      	str	r1, [r4, #4]
 80172c6:	60a2      	str	r2, [r4, #8]
			break;
 80172c8:	f005 b92c 	b.w	801c524 <problem_fetch+0x1ae60>
 80172cc:	0802b1a0 	.word	0x0802b1a0
 80172d0:	08023814 	.word	0x08023814
 80172d4:	0802b1a8 	.word	0x0802b1a8
 80172d8:	0802b1b4 	.word	0x0802b1b4
 80172dc:	08023f34 	.word	0x08023f34
 80172e0:	0802b1c4 	.word	0x0802b1c4
 80172e4:	08024088 	.word	0x08024088
 80172e8:	0802b1cc 	.word	0x0802b1cc
 80172ec:	08028750 	.word	0x08028750
 80172f0:	08023bf0 	.word	0x08023bf0
 80172f4:	0802b1d8 	.word	0x0802b1d8
 80172f8:	080238ec 	.word	0x080238ec
 80172fc:	0802b1ec 	.word	0x0802b1ec
 8017300:	0802b1f8 	.word	0x0802b1f8
 8017304:	0802b208 	.word	0x0802b208
 8017308:	0802b218 	.word	0x0802b218
 801730c:	0802b224 	.word	0x0802b224
 8017310:	0802b234 	.word	0x0802b234
 8017314:	08023f4c 	.word	0x08023f4c
 8017318:	0802b240 	.word	0x0802b240
 801731c:	0802b24c 	.word	0x0802b24c
 8017320:	0802b25c 	.word	0x0802b25c
 8017324:	0802b264 	.word	0x0802b264
 8017328:	0802b270 	.word	0x0802b270
 801732c:	0802b280 	.word	0x0802b280
 8017330:	0802b28c 	.word	0x0802b28c
 8017334:	0802b298 	.word	0x0802b298
 8017338:	08023834 	.word	0x08023834
		case 647 :
			strcpy(p->name,"FRENCH INDUCED COMA");
 801733c:	687b      	ldr	r3, [r7, #4]
 801733e:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8017342:	4aab      	ldr	r2, [pc, #684]	; (80175f0 <problem_fetch+0x15f2c>)
 8017344:	461d      	mov	r5, r3
 8017346:	4614      	mov	r4, r2
 8017348:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801734a:	6028      	str	r0, [r5, #0]
 801734c:	6069      	str	r1, [r5, #4]
 801734e:	60aa      	str	r2, [r5, #8]
 8017350:	60eb      	str	r3, [r5, #12]
 8017352:	6820      	ldr	r0, [r4, #0]
 8017354:	6128      	str	r0, [r5, #16]
			strcpy(p->grade,"6B+");
 8017356:	687b      	ldr	r3, [r7, #4]
 8017358:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801735c:	4aa5      	ldr	r2, [pc, #660]	; (80175f4 <problem_fetch+0x15f30>)
 801735e:	6810      	ldr	r0, [r2, #0]
 8017360:	6018      	str	r0, [r3, #0]
			p->moveSize = 5;
 8017362:	687b      	ldr	r3, [r7, #4]
 8017364:	2205      	movs	r2, #5
 8017366:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"E,H,D,D,A");
 8017368:	687b      	ldr	r3, [r7, #4]
 801736a:	33a4      	adds	r3, #164	; 0xa4
 801736c:	49a2      	ldr	r1, [pc, #648]	; (80175f8 <problem_fetch+0x15f34>)
 801736e:	461a      	mov	r2, r3
 8017370:	460b      	mov	r3, r1
 8017372:	cb03      	ldmia	r3!, {r0, r1}
 8017374:	6010      	str	r0, [r2, #0]
 8017376:	6051      	str	r1, [r2, #4]
 8017378:	881b      	ldrh	r3, [r3, #0]
 801737a:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"6,10,11,15,18");
 801737c:	687b      	ldr	r3, [r7, #4]
 801737e:	3304      	adds	r3, #4
 8017380:	4a9e      	ldr	r2, [pc, #632]	; (80175fc <problem_fetch+0x15f38>)
 8017382:	461c      	mov	r4, r3
 8017384:	4613      	mov	r3, r2
 8017386:	cb07      	ldmia	r3!, {r0, r1, r2}
 8017388:	6020      	str	r0, [r4, #0]
 801738a:	6061      	str	r1, [r4, #4]
 801738c:	60a2      	str	r2, [r4, #8]
 801738e:	881b      	ldrh	r3, [r3, #0]
 8017390:	81a3      	strh	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,e");
 8017392:	687b      	ldr	r3, [r7, #4]
 8017394:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8017398:	4999      	ldr	r1, [pc, #612]	; (8017600 <problem_fetch+0x15f3c>)
 801739a:	461a      	mov	r2, r3
 801739c:	460b      	mov	r3, r1
 801739e:	cb03      	ldmia	r3!, {r0, r1}
 80173a0:	6010      	str	r0, [r2, #0]
 80173a2:	6051      	str	r1, [r2, #4]
 80173a4:	881b      	ldrh	r3, [r3, #0]
 80173a6:	8113      	strh	r3, [r2, #8]
			break;
 80173a8:	f005 b8bc 	b.w	801c524 <problem_fetch+0x1ae60>
		case 648 :
			strcpy(p->name,"YEEEEAHHH");
 80173ac:	687b      	ldr	r3, [r7, #4]
 80173ae:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80173b2:	4994      	ldr	r1, [pc, #592]	; (8017604 <problem_fetch+0x15f40>)
 80173b4:	461a      	mov	r2, r3
 80173b6:	460b      	mov	r3, r1
 80173b8:	cb03      	ldmia	r3!, {r0, r1}
 80173ba:	6010      	str	r0, [r2, #0]
 80173bc:	6051      	str	r1, [r2, #4]
 80173be:	881b      	ldrh	r3, [r3, #0]
 80173c0:	8113      	strh	r3, [r2, #8]
			strcpy(p->grade,"7A");
 80173c2:	687b      	ldr	r3, [r7, #4]
 80173c4:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80173c8:	4a8f      	ldr	r2, [pc, #572]	; (8017608 <problem_fetch+0x15f44>)
 80173ca:	8811      	ldrh	r1, [r2, #0]
 80173cc:	7892      	ldrb	r2, [r2, #2]
 80173ce:	8019      	strh	r1, [r3, #0]
 80173d0:	709a      	strb	r2, [r3, #2]
			p->moveSize = 4;
 80173d2:	687b      	ldr	r3, [r7, #4]
 80173d4:	2204      	movs	r2, #4
 80173d6:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,I,G,I");
 80173d8:	687b      	ldr	r3, [r7, #4]
 80173da:	33a4      	adds	r3, #164	; 0xa4
 80173dc:	498b      	ldr	r1, [pc, #556]	; (801760c <problem_fetch+0x15f48>)
 80173de:	461a      	mov	r2, r3
 80173e0:	460b      	mov	r3, r1
 80173e2:	cb03      	ldmia	r3!, {r0, r1}
 80173e4:	6010      	str	r0, [r2, #0]
 80173e6:	6051      	str	r1, [r2, #4]
			strcpy(p->moveNumbers,"4,10,14,18");
 80173e8:	687b      	ldr	r3, [r7, #4]
 80173ea:	3304      	adds	r3, #4
 80173ec:	4988      	ldr	r1, [pc, #544]	; (8017610 <problem_fetch+0x15f4c>)
 80173ee:	461a      	mov	r2, r3
 80173f0:	460b      	mov	r3, r1
 80173f2:	cb03      	ldmia	r3!, {r0, r1}
 80173f4:	6010      	str	r0, [r2, #0]
 80173f6:	6051      	str	r1, [r2, #4]
 80173f8:	8819      	ldrh	r1, [r3, #0]
 80173fa:	789b      	ldrb	r3, [r3, #2]
 80173fc:	8111      	strh	r1, [r2, #8]
 80173fe:	7293      	strb	r3, [r2, #10]
			strcpy(p->startFinish,"s,d,d,e");
 8017400:	687b      	ldr	r3, [r7, #4]
 8017402:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8017406:	4983      	ldr	r1, [pc, #524]	; (8017614 <problem_fetch+0x15f50>)
 8017408:	461a      	mov	r2, r3
 801740a:	460b      	mov	r3, r1
 801740c:	cb03      	ldmia	r3!, {r0, r1}
 801740e:	6010      	str	r0, [r2, #0]
 8017410:	6051      	str	r1, [r2, #4]
			break;
 8017412:	f005 b887 	b.w	801c524 <problem_fetch+0x1ae60>
		case 649 :
			strcpy(p->name,"OFD");
 8017416:	687b      	ldr	r3, [r7, #4]
 8017418:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801741c:	4a7e      	ldr	r2, [pc, #504]	; (8017618 <problem_fetch+0x15f54>)
 801741e:	6810      	ldr	r0, [r2, #0]
 8017420:	6018      	str	r0, [r3, #0]
			strcpy(p->grade,"7A+");
 8017422:	687b      	ldr	r3, [r7, #4]
 8017424:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8017428:	4a7c      	ldr	r2, [pc, #496]	; (801761c <problem_fetch+0x15f58>)
 801742a:	6810      	ldr	r0, [r2, #0]
 801742c:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 801742e:	687b      	ldr	r3, [r7, #4]
 8017430:	2206      	movs	r2, #6
 8017432:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,C,E,E,I,I");
 8017434:	687b      	ldr	r3, [r7, #4]
 8017436:	33a4      	adds	r3, #164	; 0xa4
 8017438:	4a79      	ldr	r2, [pc, #484]	; (8017620 <problem_fetch+0x15f5c>)
 801743a:	461c      	mov	r4, r3
 801743c:	4613      	mov	r3, r2
 801743e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8017440:	6020      	str	r0, [r4, #0]
 8017442:	6061      	str	r1, [r4, #4]
 8017444:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,8,9,12,14,18");
 8017446:	687b      	ldr	r3, [r7, #4]
 8017448:	3304      	adds	r3, #4
 801744a:	4a76      	ldr	r2, [pc, #472]	; (8017624 <problem_fetch+0x15f60>)
 801744c:	461c      	mov	r4, r3
 801744e:	4613      	mov	r3, r2
 8017450:	cb07      	ldmia	r3!, {r0, r1, r2}
 8017452:	6020      	str	r0, [r4, #0]
 8017454:	6061      	str	r1, [r4, #4]
 8017456:	60a2      	str	r2, [r4, #8]
 8017458:	881a      	ldrh	r2, [r3, #0]
 801745a:	789b      	ldrb	r3, [r3, #2]
 801745c:	81a2      	strh	r2, [r4, #12]
 801745e:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 8017460:	687b      	ldr	r3, [r7, #4]
 8017462:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8017466:	4a70      	ldr	r2, [pc, #448]	; (8017628 <problem_fetch+0x15f64>)
 8017468:	461c      	mov	r4, r3
 801746a:	4613      	mov	r3, r2
 801746c:	cb07      	ldmia	r3!, {r0, r1, r2}
 801746e:	6020      	str	r0, [r4, #0]
 8017470:	6061      	str	r1, [r4, #4]
 8017472:	60a2      	str	r2, [r4, #8]
			break;
 8017474:	f005 b856 	b.w	801c524 <problem_fetch+0x1ae60>
		case 650 :
			strcpy(p->name,"GO BIG");
 8017478:	687b      	ldr	r3, [r7, #4]
 801747a:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801747e:	4a6b      	ldr	r2, [pc, #428]	; (801762c <problem_fetch+0x15f68>)
 8017480:	6810      	ldr	r0, [r2, #0]
 8017482:	6018      	str	r0, [r3, #0]
 8017484:	8891      	ldrh	r1, [r2, #4]
 8017486:	7992      	ldrb	r2, [r2, #6]
 8017488:	8099      	strh	r1, [r3, #4]
 801748a:	719a      	strb	r2, [r3, #6]
			strcpy(p->grade,"7B+");
 801748c:	687b      	ldr	r3, [r7, #4]
 801748e:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8017492:	4a67      	ldr	r2, [pc, #412]	; (8017630 <problem_fetch+0x15f6c>)
 8017494:	6810      	ldr	r0, [r2, #0]
 8017496:	6018      	str	r0, [r3, #0]
			p->moveSize = 5;
 8017498:	687b      	ldr	r3, [r7, #4]
 801749a:	2205      	movs	r2, #5
 801749c:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,K,G,A,A");
 801749e:	687b      	ldr	r3, [r7, #4]
 80174a0:	33a4      	adds	r3, #164	; 0xa4
 80174a2:	4964      	ldr	r1, [pc, #400]	; (8017634 <problem_fetch+0x15f70>)
 80174a4:	461a      	mov	r2, r3
 80174a6:	460b      	mov	r3, r1
 80174a8:	cb03      	ldmia	r3!, {r0, r1}
 80174aa:	6010      	str	r0, [r2, #0]
 80174ac:	6051      	str	r1, [r2, #4]
 80174ae:	881b      	ldrh	r3, [r3, #0]
 80174b0:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"6,9,14,14,18");
 80174b2:	687b      	ldr	r3, [r7, #4]
 80174b4:	3304      	adds	r3, #4
 80174b6:	4a60      	ldr	r2, [pc, #384]	; (8017638 <problem_fetch+0x15f74>)
 80174b8:	461c      	mov	r4, r3
 80174ba:	4613      	mov	r3, r2
 80174bc:	cb07      	ldmia	r3!, {r0, r1, r2}
 80174be:	6020      	str	r0, [r4, #0]
 80174c0:	6061      	str	r1, [r4, #4]
 80174c2:	60a2      	str	r2, [r4, #8]
 80174c4:	781b      	ldrb	r3, [r3, #0]
 80174c6:	7323      	strb	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,e");
 80174c8:	687b      	ldr	r3, [r7, #4]
 80174ca:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 80174ce:	494c      	ldr	r1, [pc, #304]	; (8017600 <problem_fetch+0x15f3c>)
 80174d0:	461a      	mov	r2, r3
 80174d2:	460b      	mov	r3, r1
 80174d4:	cb03      	ldmia	r3!, {r0, r1}
 80174d6:	6010      	str	r0, [r2, #0]
 80174d8:	6051      	str	r1, [r2, #4]
 80174da:	881b      	ldrh	r3, [r3, #0]
 80174dc:	8113      	strh	r3, [r2, #8]
			break;
 80174de:	f005 b821 	b.w	801c524 <problem_fetch+0x1ae60>
		case 651 :
			strcpy(p->name,"VARIATION 2 6B+");
 80174e2:	687b      	ldr	r3, [r7, #4]
 80174e4:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80174e8:	4a54      	ldr	r2, [pc, #336]	; (801763c <problem_fetch+0x15f78>)
 80174ea:	461c      	mov	r4, r3
 80174ec:	4615      	mov	r5, r2
 80174ee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80174f0:	6020      	str	r0, [r4, #0]
 80174f2:	6061      	str	r1, [r4, #4]
 80174f4:	60a2      	str	r2, [r4, #8]
 80174f6:	60e3      	str	r3, [r4, #12]
			strcpy(p->grade,"6B+");
 80174f8:	687b      	ldr	r3, [r7, #4]
 80174fa:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80174fe:	4a3d      	ldr	r2, [pc, #244]	; (80175f4 <problem_fetch+0x15f30>)
 8017500:	6810      	ldr	r0, [r2, #0]
 8017502:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 8017504:	687b      	ldr	r3, [r7, #4]
 8017506:	2207      	movs	r2, #7
 8017508:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"E,G,E,B,C,A,A");
 801750a:	687b      	ldr	r3, [r7, #4]
 801750c:	33a4      	adds	r3, #164	; 0xa4
 801750e:	4a4c      	ldr	r2, [pc, #304]	; (8017640 <problem_fetch+0x15f7c>)
 8017510:	461c      	mov	r4, r3
 8017512:	4613      	mov	r3, r2
 8017514:	cb07      	ldmia	r3!, {r0, r1, r2}
 8017516:	6020      	str	r0, [r4, #0]
 8017518:	6061      	str	r1, [r4, #4]
 801751a:	60a2      	str	r2, [r4, #8]
 801751c:	881b      	ldrh	r3, [r3, #0]
 801751e:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"6,6,8,10,13,14,18");
 8017520:	687b      	ldr	r3, [r7, #4]
 8017522:	3304      	adds	r3, #4
 8017524:	4a47      	ldr	r2, [pc, #284]	; (8017644 <problem_fetch+0x15f80>)
 8017526:	461d      	mov	r5, r3
 8017528:	4614      	mov	r4, r2
 801752a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801752c:	6028      	str	r0, [r5, #0]
 801752e:	6069      	str	r1, [r5, #4]
 8017530:	60aa      	str	r2, [r5, #8]
 8017532:	60eb      	str	r3, [r5, #12]
 8017534:	8823      	ldrh	r3, [r4, #0]
 8017536:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,s,d,d,d,d,e");
 8017538:	687b      	ldr	r3, [r7, #4]
 801753a:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 801753e:	4a42      	ldr	r2, [pc, #264]	; (8017648 <problem_fetch+0x15f84>)
 8017540:	461c      	mov	r4, r3
 8017542:	4613      	mov	r3, r2
 8017544:	cb07      	ldmia	r3!, {r0, r1, r2}
 8017546:	6020      	str	r0, [r4, #0]
 8017548:	6061      	str	r1, [r4, #4]
 801754a:	60a2      	str	r2, [r4, #8]
 801754c:	881b      	ldrh	r3, [r3, #0]
 801754e:	81a3      	strh	r3, [r4, #12]
			break;
 8017550:	f004 bfe8 	b.w	801c524 <problem_fetch+0x1ae60>
		case 652 :
			strcpy(p->name,"ENDUROV6");
 8017554:	687b      	ldr	r3, [r7, #4]
 8017556:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801755a:	493c      	ldr	r1, [pc, #240]	; (801764c <problem_fetch+0x15f88>)
 801755c:	461a      	mov	r2, r3
 801755e:	460b      	mov	r3, r1
 8017560:	cb03      	ldmia	r3!, {r0, r1}
 8017562:	6010      	str	r0, [r2, #0]
 8017564:	6051      	str	r1, [r2, #4]
 8017566:	781b      	ldrb	r3, [r3, #0]
 8017568:	7213      	strb	r3, [r2, #8]
			strcpy(p->grade,"7A");
 801756a:	687b      	ldr	r3, [r7, #4]
 801756c:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8017570:	4a25      	ldr	r2, [pc, #148]	; (8017608 <problem_fetch+0x15f44>)
 8017572:	8811      	ldrh	r1, [r2, #0]
 8017574:	7892      	ldrb	r2, [r2, #2]
 8017576:	8019      	strh	r1, [r3, #0]
 8017578:	709a      	strb	r2, [r3, #2]
			p->moveSize = 13;
 801757a:	687b      	ldr	r3, [r7, #4]
 801757c:	220d      	movs	r2, #13
 801757e:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,J,H,G,F,A,D,E,G,C,B,E,I");
 8017580:	687b      	ldr	r3, [r7, #4]
 8017582:	33a4      	adds	r3, #164	; 0xa4
 8017584:	4a32      	ldr	r2, [pc, #200]	; (8017650 <problem_fetch+0x15f8c>)
 8017586:	461d      	mov	r5, r3
 8017588:	4614      	mov	r4, r2
 801758a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801758c:	6028      	str	r0, [r5, #0]
 801758e:	6069      	str	r1, [r5, #4]
 8017590:	60aa      	str	r2, [r5, #8]
 8017592:	60eb      	str	r3, [r5, #12]
 8017594:	cc03      	ldmia	r4!, {r0, r1}
 8017596:	6128      	str	r0, [r5, #16]
 8017598:	6169      	str	r1, [r5, #20]
 801759a:	8823      	ldrh	r3, [r4, #0]
 801759c:	832b      	strh	r3, [r5, #24]
			strcpy(p->moveNumbers,"5,7,8,9,11,14,15,16,17,5,10,8,18");
 801759e:	687b      	ldr	r3, [r7, #4]
 80175a0:	3304      	adds	r3, #4
 80175a2:	4a2c      	ldr	r2, [pc, #176]	; (8017654 <problem_fetch+0x15f90>)
 80175a4:	4614      	mov	r4, r2
 80175a6:	469c      	mov	ip, r3
 80175a8:	f104 0e20 	add.w	lr, r4, #32
 80175ac:	4665      	mov	r5, ip
 80175ae:	4626      	mov	r6, r4
 80175b0:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80175b2:	6028      	str	r0, [r5, #0]
 80175b4:	6069      	str	r1, [r5, #4]
 80175b6:	60aa      	str	r2, [r5, #8]
 80175b8:	60eb      	str	r3, [r5, #12]
 80175ba:	3410      	adds	r4, #16
 80175bc:	f10c 0c10 	add.w	ip, ip, #16
 80175c0:	4574      	cmp	r4, lr
 80175c2:	d1f3      	bne.n	80175ac <problem_fetch+0x15ee8>
 80175c4:	4663      	mov	r3, ip
 80175c6:	4622      	mov	r2, r4
 80175c8:	7812      	ldrb	r2, [r2, #0]
 80175ca:	701a      	strb	r2, [r3, #0]
			strcpy(p->startFinish,"s,d,d,d,d,d,d,d,d,d,d,d,e");
 80175cc:	687b      	ldr	r3, [r7, #4]
 80175ce:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 80175d2:	4a21      	ldr	r2, [pc, #132]	; (8017658 <problem_fetch+0x15f94>)
 80175d4:	461d      	mov	r5, r3
 80175d6:	4614      	mov	r4, r2
 80175d8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80175da:	6028      	str	r0, [r5, #0]
 80175dc:	6069      	str	r1, [r5, #4]
 80175de:	60aa      	str	r2, [r5, #8]
 80175e0:	60eb      	str	r3, [r5, #12]
 80175e2:	cc03      	ldmia	r4!, {r0, r1}
 80175e4:	6128      	str	r0, [r5, #16]
 80175e6:	6169      	str	r1, [r5, #20]
 80175e8:	8823      	ldrh	r3, [r4, #0]
 80175ea:	832b      	strh	r3, [r5, #24]
			break;
 80175ec:	f004 bf9a 	b.w	801c524 <problem_fetch+0x1ae60>
 80175f0:	0802b2a8 	.word	0x0802b2a8
 80175f4:	08023854 	.word	0x08023854
 80175f8:	0802b2bc 	.word	0x0802b2bc
 80175fc:	0802b2c8 	.word	0x0802b2c8
 8017600:	08023d20 	.word	0x08023d20
 8017604:	0802b2d8 	.word	0x0802b2d8
 8017608:	08023814 	.word	0x08023814
 801760c:	0802b2e4 	.word	0x0802b2e4
 8017610:	08024d64 	.word	0x08024d64
 8017614:	080239a8 	.word	0x080239a8
 8017618:	0802b2ec 	.word	0x0802b2ec
 801761c:	080239f4 	.word	0x080239f4
 8017620:	0802b2f0 	.word	0x0802b2f0
 8017624:	0802aa30 	.word	0x0802aa30
 8017628:	08023bf0 	.word	0x08023bf0
 801762c:	0802b2fc 	.word	0x0802b2fc
 8017630:	08023990 	.word	0x08023990
 8017634:	0802b304 	.word	0x0802b304
 8017638:	0802b310 	.word	0x0802b310
 801763c:	0802b320 	.word	0x0802b320
 8017640:	0802b330 	.word	0x0802b330
 8017644:	0802b340 	.word	0x0802b340
 8017648:	080238cc 	.word	0x080238cc
 801764c:	0802b354 	.word	0x0802b354
 8017650:	0802b360 	.word	0x0802b360
 8017654:	0802b37c 	.word	0x0802b37c
 8017658:	0802b3a0 	.word	0x0802b3a0
		case 653 :
			strcpy(p->name,"OLDENBOAD4");
 801765c:	687b      	ldr	r3, [r7, #4]
 801765e:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8017662:	49aa      	ldr	r1, [pc, #680]	; (801790c <problem_fetch+0x16248>)
 8017664:	461a      	mov	r2, r3
 8017666:	460b      	mov	r3, r1
 8017668:	cb03      	ldmia	r3!, {r0, r1}
 801766a:	6010      	str	r0, [r2, #0]
 801766c:	6051      	str	r1, [r2, #4]
 801766e:	8819      	ldrh	r1, [r3, #0]
 8017670:	789b      	ldrb	r3, [r3, #2]
 8017672:	8111      	strh	r1, [r2, #8]
 8017674:	7293      	strb	r3, [r2, #10]
			strcpy(p->grade,"6C+");
 8017676:	687b      	ldr	r3, [r7, #4]
 8017678:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801767c:	4aa4      	ldr	r2, [pc, #656]	; (8017910 <problem_fetch+0x1624c>)
 801767e:	6810      	ldr	r0, [r2, #0]
 8017680:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 8017682:	687b      	ldr	r3, [r7, #4]
 8017684:	2207      	movs	r2, #7
 8017686:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,G,F,C,E,H,D");
 8017688:	687b      	ldr	r3, [r7, #4]
 801768a:	33a4      	adds	r3, #164	; 0xa4
 801768c:	4aa1      	ldr	r2, [pc, #644]	; (8017914 <problem_fetch+0x16250>)
 801768e:	461c      	mov	r4, r3
 8017690:	4613      	mov	r3, r2
 8017692:	cb07      	ldmia	r3!, {r0, r1, r2}
 8017694:	6020      	str	r0, [r4, #0]
 8017696:	6061      	str	r1, [r4, #4]
 8017698:	60a2      	str	r2, [r4, #8]
 801769a:	881b      	ldrh	r3, [r3, #0]
 801769c:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,6,11,13,16,10,18");
 801769e:	687b      	ldr	r3, [r7, #4]
 80176a0:	3304      	adds	r3, #4
 80176a2:	4a9d      	ldr	r2, [pc, #628]	; (8017918 <problem_fetch+0x16254>)
 80176a4:	461d      	mov	r5, r3
 80176a6:	4614      	mov	r4, r2
 80176a8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80176aa:	6028      	str	r0, [r5, #0]
 80176ac:	6069      	str	r1, [r5, #4]
 80176ae:	60aa      	str	r2, [r5, #8]
 80176b0:	60eb      	str	r3, [r5, #12]
 80176b2:	8823      	ldrh	r3, [r4, #0]
 80176b4:	78a2      	ldrb	r2, [r4, #2]
 80176b6:	822b      	strh	r3, [r5, #16]
 80176b8:	4613      	mov	r3, r2
 80176ba:	74ab      	strb	r3, [r5, #18]
			strcpy(p->startFinish,"s,s,d,d,d,d,e");
 80176bc:	687b      	ldr	r3, [r7, #4]
 80176be:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 80176c2:	4a96      	ldr	r2, [pc, #600]	; (801791c <problem_fetch+0x16258>)
 80176c4:	461c      	mov	r4, r3
 80176c6:	4613      	mov	r3, r2
 80176c8:	cb07      	ldmia	r3!, {r0, r1, r2}
 80176ca:	6020      	str	r0, [r4, #0]
 80176cc:	6061      	str	r1, [r4, #4]
 80176ce:	60a2      	str	r2, [r4, #8]
 80176d0:	881b      	ldrh	r3, [r3, #0]
 80176d2:	81a3      	strh	r3, [r4, #12]
			break;
 80176d4:	f004 bf26 	b.w	801c524 <problem_fetch+0x1ae60>
		case 654 :
			strcpy(p->name,"TB SAGA");
 80176d8:	687b      	ldr	r3, [r7, #4]
 80176da:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80176de:	4990      	ldr	r1, [pc, #576]	; (8017920 <problem_fetch+0x1625c>)
 80176e0:	461a      	mov	r2, r3
 80176e2:	460b      	mov	r3, r1
 80176e4:	cb03      	ldmia	r3!, {r0, r1}
 80176e6:	6010      	str	r0, [r2, #0]
 80176e8:	6051      	str	r1, [r2, #4]
			strcpy(p->grade,"6C");
 80176ea:	687b      	ldr	r3, [r7, #4]
 80176ec:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80176f0:	4a8c      	ldr	r2, [pc, #560]	; (8017924 <problem_fetch+0x16260>)
 80176f2:	8811      	ldrh	r1, [r2, #0]
 80176f4:	7892      	ldrb	r2, [r2, #2]
 80176f6:	8019      	strh	r1, [r3, #0]
 80176f8:	709a      	strb	r2, [r3, #2]
			p->moveSize = 7;
 80176fa:	687b      	ldr	r3, [r7, #4]
 80176fc:	2207      	movs	r2, #7
 80176fe:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,J,H,J,G,H,D");
 8017700:	687b      	ldr	r3, [r7, #4]
 8017702:	33a4      	adds	r3, #164	; 0xa4
 8017704:	4a88      	ldr	r2, [pc, #544]	; (8017928 <problem_fetch+0x16264>)
 8017706:	461c      	mov	r4, r3
 8017708:	4613      	mov	r3, r2
 801770a:	cb07      	ldmia	r3!, {r0, r1, r2}
 801770c:	6020      	str	r0, [r4, #0]
 801770e:	6061      	str	r1, [r4, #4]
 8017710:	60a2      	str	r2, [r4, #8]
 8017712:	881b      	ldrh	r3, [r3, #0]
 8017714:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,7,10,13,15,16,18");
 8017716:	687b      	ldr	r3, [r7, #4]
 8017718:	3304      	adds	r3, #4
 801771a:	4a84      	ldr	r2, [pc, #528]	; (801792c <problem_fetch+0x16268>)
 801771c:	461d      	mov	r5, r3
 801771e:	4614      	mov	r4, r2
 8017720:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8017722:	6028      	str	r0, [r5, #0]
 8017724:	6069      	str	r1, [r5, #4]
 8017726:	60aa      	str	r2, [r5, #8]
 8017728:	60eb      	str	r3, [r5, #12]
 801772a:	8823      	ldrh	r3, [r4, #0]
 801772c:	78a2      	ldrb	r2, [r4, #2]
 801772e:	822b      	strh	r3, [r5, #16]
 8017730:	4613      	mov	r3, r2
 8017732:	74ab      	strb	r3, [r5, #18]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 8017734:	687b      	ldr	r3, [r7, #4]
 8017736:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 801773a:	4a7d      	ldr	r2, [pc, #500]	; (8017930 <problem_fetch+0x1626c>)
 801773c:	461c      	mov	r4, r3
 801773e:	4613      	mov	r3, r2
 8017740:	cb07      	ldmia	r3!, {r0, r1, r2}
 8017742:	6020      	str	r0, [r4, #0]
 8017744:	6061      	str	r1, [r4, #4]
 8017746:	60a2      	str	r2, [r4, #8]
 8017748:	881b      	ldrh	r3, [r3, #0]
 801774a:	81a3      	strh	r3, [r4, #12]
			break;
 801774c:	f004 beea 	b.w	801c524 <problem_fetch+0x1ae60>
		case 655 :
			strcpy(p->name,"THE WING");
 8017750:	687b      	ldr	r3, [r7, #4]
 8017752:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8017756:	4977      	ldr	r1, [pc, #476]	; (8017934 <problem_fetch+0x16270>)
 8017758:	461a      	mov	r2, r3
 801775a:	460b      	mov	r3, r1
 801775c:	cb03      	ldmia	r3!, {r0, r1}
 801775e:	6010      	str	r0, [r2, #0]
 8017760:	6051      	str	r1, [r2, #4]
 8017762:	781b      	ldrb	r3, [r3, #0]
 8017764:	7213      	strb	r3, [r2, #8]
			strcpy(p->grade,"6C");
 8017766:	687b      	ldr	r3, [r7, #4]
 8017768:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801776c:	4a6d      	ldr	r2, [pc, #436]	; (8017924 <problem_fetch+0x16260>)
 801776e:	8811      	ldrh	r1, [r2, #0]
 8017770:	7892      	ldrb	r2, [r2, #2]
 8017772:	8019      	strh	r1, [r3, #0]
 8017774:	709a      	strb	r2, [r3, #2]
			p->moveSize = 7;
 8017776:	687b      	ldr	r3, [r7, #4]
 8017778:	2207      	movs	r2, #7
 801777a:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"C,E,C,F,D,D,D");
 801777c:	687b      	ldr	r3, [r7, #4]
 801777e:	33a4      	adds	r3, #164	; 0xa4
 8017780:	4a6d      	ldr	r2, [pc, #436]	; (8017938 <problem_fetch+0x16274>)
 8017782:	461c      	mov	r4, r3
 8017784:	4613      	mov	r3, r2
 8017786:	cb07      	ldmia	r3!, {r0, r1, r2}
 8017788:	6020      	str	r0, [r4, #0]
 801778a:	6061      	str	r1, [r4, #4]
 801778c:	60a2      	str	r2, [r4, #8]
 801778e:	881b      	ldrh	r3, [r3, #0]
 8017790:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,6,8,11,11,15,18");
 8017792:	687b      	ldr	r3, [r7, #4]
 8017794:	3304      	adds	r3, #4
 8017796:	4a69      	ldr	r2, [pc, #420]	; (801793c <problem_fetch+0x16278>)
 8017798:	461d      	mov	r5, r3
 801779a:	4614      	mov	r4, r2
 801779c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801779e:	6028      	str	r0, [r5, #0]
 80177a0:	6069      	str	r1, [r5, #4]
 80177a2:	60aa      	str	r2, [r5, #8]
 80177a4:	60eb      	str	r3, [r5, #12]
 80177a6:	8823      	ldrh	r3, [r4, #0]
 80177a8:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,s,d,d,d,d,e");
 80177aa:	687b      	ldr	r3, [r7, #4]
 80177ac:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 80177b0:	4a5a      	ldr	r2, [pc, #360]	; (801791c <problem_fetch+0x16258>)
 80177b2:	461c      	mov	r4, r3
 80177b4:	4613      	mov	r3, r2
 80177b6:	cb07      	ldmia	r3!, {r0, r1, r2}
 80177b8:	6020      	str	r0, [r4, #0]
 80177ba:	6061      	str	r1, [r4, #4]
 80177bc:	60a2      	str	r2, [r4, #8]
 80177be:	881b      	ldrh	r3, [r3, #0]
 80177c0:	81a3      	strh	r3, [r4, #12]
			break;
 80177c2:	f004 beaf 	b.w	801c524 <problem_fetch+0x1ae60>
		case 656 :
			strcpy(p->name,"HER COMES THE QUEEN");
 80177c6:	687b      	ldr	r3, [r7, #4]
 80177c8:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80177cc:	4a5c      	ldr	r2, [pc, #368]	; (8017940 <problem_fetch+0x1627c>)
 80177ce:	461d      	mov	r5, r3
 80177d0:	4614      	mov	r4, r2
 80177d2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80177d4:	6028      	str	r0, [r5, #0]
 80177d6:	6069      	str	r1, [r5, #4]
 80177d8:	60aa      	str	r2, [r5, #8]
 80177da:	60eb      	str	r3, [r5, #12]
 80177dc:	6820      	ldr	r0, [r4, #0]
 80177de:	6128      	str	r0, [r5, #16]
			strcpy(p->grade,"6C+");
 80177e0:	687b      	ldr	r3, [r7, #4]
 80177e2:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80177e6:	4a4a      	ldr	r2, [pc, #296]	; (8017910 <problem_fetch+0x1624c>)
 80177e8:	6810      	ldr	r0, [r2, #0]
 80177ea:	6018      	str	r0, [r3, #0]
			p->moveSize = 5;
 80177ec:	687b      	ldr	r3, [r7, #4]
 80177ee:	2205      	movs	r2, #5
 80177f0:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,E,F,A,D");
 80177f2:	687b      	ldr	r3, [r7, #4]
 80177f4:	33a4      	adds	r3, #164	; 0xa4
 80177f6:	4953      	ldr	r1, [pc, #332]	; (8017944 <problem_fetch+0x16280>)
 80177f8:	461a      	mov	r2, r3
 80177fa:	460b      	mov	r3, r1
 80177fc:	cb03      	ldmia	r3!, {r0, r1}
 80177fe:	6010      	str	r0, [r2, #0]
 8017800:	6051      	str	r1, [r2, #4]
 8017802:	881b      	ldrh	r3, [r3, #0]
 8017804:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"4,8,11,14,18");
 8017806:	687b      	ldr	r3, [r7, #4]
 8017808:	3304      	adds	r3, #4
 801780a:	4a4f      	ldr	r2, [pc, #316]	; (8017948 <problem_fetch+0x16284>)
 801780c:	461c      	mov	r4, r3
 801780e:	4613      	mov	r3, r2
 8017810:	cb07      	ldmia	r3!, {r0, r1, r2}
 8017812:	6020      	str	r0, [r4, #0]
 8017814:	6061      	str	r1, [r4, #4]
 8017816:	60a2      	str	r2, [r4, #8]
 8017818:	781b      	ldrb	r3, [r3, #0]
 801781a:	7323      	strb	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,e");
 801781c:	687b      	ldr	r3, [r7, #4]
 801781e:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8017822:	494a      	ldr	r1, [pc, #296]	; (801794c <problem_fetch+0x16288>)
 8017824:	461a      	mov	r2, r3
 8017826:	460b      	mov	r3, r1
 8017828:	cb03      	ldmia	r3!, {r0, r1}
 801782a:	6010      	str	r0, [r2, #0]
 801782c:	6051      	str	r1, [r2, #4]
 801782e:	881b      	ldrh	r3, [r3, #0]
 8017830:	8113      	strh	r3, [r2, #8]
			break;
 8017832:	f004 be77 	b.w	801c524 <problem_fetch+0x1ae60>
		case 657 :
			strcpy(p->name,"EASY PINCH");
 8017836:	687b      	ldr	r3, [r7, #4]
 8017838:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801783c:	4944      	ldr	r1, [pc, #272]	; (8017950 <problem_fetch+0x1628c>)
 801783e:	461a      	mov	r2, r3
 8017840:	460b      	mov	r3, r1
 8017842:	cb03      	ldmia	r3!, {r0, r1}
 8017844:	6010      	str	r0, [r2, #0]
 8017846:	6051      	str	r1, [r2, #4]
 8017848:	8819      	ldrh	r1, [r3, #0]
 801784a:	789b      	ldrb	r3, [r3, #2]
 801784c:	8111      	strh	r1, [r2, #8]
 801784e:	7293      	strb	r3, [r2, #10]
			strcpy(p->grade,"7A+");
 8017850:	687b      	ldr	r3, [r7, #4]
 8017852:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8017856:	4a3f      	ldr	r2, [pc, #252]	; (8017954 <problem_fetch+0x16290>)
 8017858:	6810      	ldr	r0, [r2, #0]
 801785a:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 801785c:	687b      	ldr	r3, [r7, #4]
 801785e:	2206      	movs	r2, #6
 8017860:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,D,G,F,E,I");
 8017862:	687b      	ldr	r3, [r7, #4]
 8017864:	33a4      	adds	r3, #164	; 0xa4
 8017866:	4a3c      	ldr	r2, [pc, #240]	; (8017958 <problem_fetch+0x16294>)
 8017868:	461c      	mov	r4, r3
 801786a:	4613      	mov	r3, r2
 801786c:	cb07      	ldmia	r3!, {r0, r1, r2}
 801786e:	6020      	str	r0, [r4, #0]
 8017870:	6061      	str	r1, [r4, #4]
 8017872:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,7,10,13,14,18");
 8017874:	687b      	ldr	r3, [r7, #4]
 8017876:	3304      	adds	r3, #4
 8017878:	4a38      	ldr	r2, [pc, #224]	; (801795c <problem_fetch+0x16298>)
 801787a:	461c      	mov	r4, r3
 801787c:	4615      	mov	r5, r2
 801787e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8017880:	6020      	str	r0, [r4, #0]
 8017882:	6061      	str	r1, [r4, #4]
 8017884:	60a2      	str	r2, [r4, #8]
 8017886:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 8017888:	687b      	ldr	r3, [r7, #4]
 801788a:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 801788e:	4a34      	ldr	r2, [pc, #208]	; (8017960 <problem_fetch+0x1629c>)
 8017890:	461c      	mov	r4, r3
 8017892:	4613      	mov	r3, r2
 8017894:	cb07      	ldmia	r3!, {r0, r1, r2}
 8017896:	6020      	str	r0, [r4, #0]
 8017898:	6061      	str	r1, [r4, #4]
 801789a:	60a2      	str	r2, [r4, #8]
			break;
 801789c:	f004 be42 	b.w	801c524 <problem_fetch+0x1ae60>
		case 658 :
			strcpy(p->name,"TIRARONCHIE");
 80178a0:	687b      	ldr	r3, [r7, #4]
 80178a2:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80178a6:	4a2f      	ldr	r2, [pc, #188]	; (8017964 <problem_fetch+0x162a0>)
 80178a8:	461c      	mov	r4, r3
 80178aa:	4613      	mov	r3, r2
 80178ac:	cb07      	ldmia	r3!, {r0, r1, r2}
 80178ae:	6020      	str	r0, [r4, #0]
 80178b0:	6061      	str	r1, [r4, #4]
 80178b2:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade,"7A+");
 80178b4:	687b      	ldr	r3, [r7, #4]
 80178b6:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80178ba:	4a26      	ldr	r2, [pc, #152]	; (8017954 <problem_fetch+0x16290>)
 80178bc:	6810      	ldr	r0, [r2, #0]
 80178be:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 80178c0:	687b      	ldr	r3, [r7, #4]
 80178c2:	2206      	movs	r2, #6
 80178c4:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,E,I,H,H,D");
 80178c6:	687b      	ldr	r3, [r7, #4]
 80178c8:	33a4      	adds	r3, #164	; 0xa4
 80178ca:	4a27      	ldr	r2, [pc, #156]	; (8017968 <problem_fetch+0x162a4>)
 80178cc:	461c      	mov	r4, r3
 80178ce:	4613      	mov	r3, r2
 80178d0:	cb07      	ldmia	r3!, {r0, r1, r2}
 80178d2:	6020      	str	r0, [r4, #0]
 80178d4:	6061      	str	r1, [r4, #4]
 80178d6:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,6,9,12,16,18");
 80178d8:	687b      	ldr	r3, [r7, #4]
 80178da:	3304      	adds	r3, #4
 80178dc:	4a23      	ldr	r2, [pc, #140]	; (801796c <problem_fetch+0x162a8>)
 80178de:	461c      	mov	r4, r3
 80178e0:	4613      	mov	r3, r2
 80178e2:	cb07      	ldmia	r3!, {r0, r1, r2}
 80178e4:	6020      	str	r0, [r4, #0]
 80178e6:	6061      	str	r1, [r4, #4]
 80178e8:	60a2      	str	r2, [r4, #8]
 80178ea:	881a      	ldrh	r2, [r3, #0]
 80178ec:	789b      	ldrb	r3, [r3, #2]
 80178ee:	81a2      	strh	r2, [r4, #12]
 80178f0:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish,"s,s,d,d,d,e");
 80178f2:	687b      	ldr	r3, [r7, #4]
 80178f4:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 80178f8:	4a1d      	ldr	r2, [pc, #116]	; (8017970 <problem_fetch+0x162ac>)
 80178fa:	461c      	mov	r4, r3
 80178fc:	4613      	mov	r3, r2
 80178fe:	cb07      	ldmia	r3!, {r0, r1, r2}
 8017900:	6020      	str	r0, [r4, #0]
 8017902:	6061      	str	r1, [r4, #4]
 8017904:	60a2      	str	r2, [r4, #8]
			break;
 8017906:	f004 be0d 	b.w	801c524 <problem_fetch+0x1ae60>
 801790a:	bf00      	nop
 801790c:	0802b3bc 	.word	0x0802b3bc
 8017910:	080238ec 	.word	0x080238ec
 8017914:	0802b3c8 	.word	0x0802b3c8
 8017918:	0802b3d8 	.word	0x0802b3d8
 801791c:	080238cc 	.word	0x080238cc
 8017920:	0802b3ec 	.word	0x0802b3ec
 8017924:	08023920 	.word	0x08023920
 8017928:	0802b3f4 	.word	0x0802b3f4
 801792c:	0802b404 	.word	0x0802b404
 8017930:	080239dc 	.word	0x080239dc
 8017934:	0802b418 	.word	0x0802b418
 8017938:	0802b424 	.word	0x0802b424
 801793c:	0802b434 	.word	0x0802b434
 8017940:	0802b448 	.word	0x0802b448
 8017944:	0802b45c 	.word	0x0802b45c
 8017948:	08024f88 	.word	0x08024f88
 801794c:	08023d20 	.word	0x08023d20
 8017950:	0802b468 	.word	0x0802b468
 8017954:	080239f4 	.word	0x080239f4
 8017958:	0802b474 	.word	0x0802b474
 801795c:	0802b480 	.word	0x0802b480
 8017960:	08023bf0 	.word	0x08023bf0
 8017964:	0802b490 	.word	0x0802b490
 8017968:	0802876c 	.word	0x0802876c
 801796c:	0802b49c 	.word	0x0802b49c
 8017970:	08023834 	.word	0x08023834
		case 659 :
			strcpy(p->name,"THE REAL DEAL");
 8017974:	687b      	ldr	r3, [r7, #4]
 8017976:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801797a:	4ab1      	ldr	r2, [pc, #708]	; (8017c40 <problem_fetch+0x1657c>)
 801797c:	461c      	mov	r4, r3
 801797e:	4613      	mov	r3, r2
 8017980:	cb07      	ldmia	r3!, {r0, r1, r2}
 8017982:	6020      	str	r0, [r4, #0]
 8017984:	6061      	str	r1, [r4, #4]
 8017986:	60a2      	str	r2, [r4, #8]
 8017988:	881b      	ldrh	r3, [r3, #0]
 801798a:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade,"8A");
 801798c:	687b      	ldr	r3, [r7, #4]
 801798e:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8017992:	4aac      	ldr	r2, [pc, #688]	; (8017c44 <problem_fetch+0x16580>)
 8017994:	8811      	ldrh	r1, [r2, #0]
 8017996:	7892      	ldrb	r2, [r2, #2]
 8017998:	8019      	strh	r1, [r3, #0]
 801799a:	709a      	strb	r2, [r3, #2]
			p->moveSize = 8;
 801799c:	687b      	ldr	r3, [r7, #4]
 801799e:	2208      	movs	r2, #8
 80179a0:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"C,D,I,H,I,E,B,A");
 80179a2:	687b      	ldr	r3, [r7, #4]
 80179a4:	33a4      	adds	r3, #164	; 0xa4
 80179a6:	4aa8      	ldr	r2, [pc, #672]	; (8017c48 <problem_fetch+0x16584>)
 80179a8:	461c      	mov	r4, r3
 80179aa:	4615      	mov	r5, r2
 80179ac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80179ae:	6020      	str	r0, [r4, #0]
 80179b0:	6061      	str	r1, [r4, #4]
 80179b2:	60a2      	str	r2, [r4, #8]
 80179b4:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,7,7,12,15,14,12,18");
 80179b6:	687b      	ldr	r3, [r7, #4]
 80179b8:	3304      	adds	r3, #4
 80179ba:	4aa4      	ldr	r2, [pc, #656]	; (8017c4c <problem_fetch+0x16588>)
 80179bc:	461d      	mov	r5, r3
 80179be:	4614      	mov	r4, r2
 80179c0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80179c2:	6028      	str	r0, [r5, #0]
 80179c4:	6069      	str	r1, [r5, #4]
 80179c6:	60aa      	str	r2, [r5, #8]
 80179c8:	60eb      	str	r3, [r5, #12]
 80179ca:	6820      	ldr	r0, [r4, #0]
 80179cc:	6128      	str	r0, [r5, #16]
 80179ce:	7923      	ldrb	r3, [r4, #4]
 80179d0:	752b      	strb	r3, [r5, #20]
			strcpy(p->startFinish,"s,d,d,d,d,d,d,e");
 80179d2:	687b      	ldr	r3, [r7, #4]
 80179d4:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 80179d8:	4a9d      	ldr	r2, [pc, #628]	; (8017c50 <problem_fetch+0x1658c>)
 80179da:	461c      	mov	r4, r3
 80179dc:	4615      	mov	r5, r2
 80179de:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80179e0:	6020      	str	r0, [r4, #0]
 80179e2:	6061      	str	r1, [r4, #4]
 80179e4:	60a2      	str	r2, [r4, #8]
 80179e6:	60e3      	str	r3, [r4, #12]
			break;
 80179e8:	f004 bd9c 	b.w	801c524 <problem_fetch+0x1ae60>
		case 660 :
			strcpy(p->name,"AF CHRISTMAS TUBERCULOSIS");
 80179ec:	687b      	ldr	r3, [r7, #4]
 80179ee:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80179f2:	4a98      	ldr	r2, [pc, #608]	; (8017c54 <problem_fetch+0x16590>)
 80179f4:	461d      	mov	r5, r3
 80179f6:	4614      	mov	r4, r2
 80179f8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80179fa:	6028      	str	r0, [r5, #0]
 80179fc:	6069      	str	r1, [r5, #4]
 80179fe:	60aa      	str	r2, [r5, #8]
 8017a00:	60eb      	str	r3, [r5, #12]
 8017a02:	cc03      	ldmia	r4!, {r0, r1}
 8017a04:	6128      	str	r0, [r5, #16]
 8017a06:	6169      	str	r1, [r5, #20]
 8017a08:	8823      	ldrh	r3, [r4, #0]
 8017a0a:	832b      	strh	r3, [r5, #24]
			strcpy(p->grade,"6C+");
 8017a0c:	687b      	ldr	r3, [r7, #4]
 8017a0e:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8017a12:	4a91      	ldr	r2, [pc, #580]	; (8017c58 <problem_fetch+0x16594>)
 8017a14:	6810      	ldr	r0, [r2, #0]
 8017a16:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 8017a18:	687b      	ldr	r3, [r7, #4]
 8017a1a:	2207      	movs	r2, #7
 8017a1c:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,J,H,F,I,I,I");
 8017a1e:	687b      	ldr	r3, [r7, #4]
 8017a20:	33a4      	adds	r3, #164	; 0xa4
 8017a22:	4a8e      	ldr	r2, [pc, #568]	; (8017c5c <problem_fetch+0x16598>)
 8017a24:	461c      	mov	r4, r3
 8017a26:	4613      	mov	r3, r2
 8017a28:	cb07      	ldmia	r3!, {r0, r1, r2}
 8017a2a:	6020      	str	r0, [r4, #0]
 8017a2c:	6061      	str	r1, [r4, #4]
 8017a2e:	60a2      	str	r2, [r4, #8]
 8017a30:	881b      	ldrh	r3, [r3, #0]
 8017a32:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"6,7,10,11,14,15,18");
 8017a34:	687b      	ldr	r3, [r7, #4]
 8017a36:	3304      	adds	r3, #4
 8017a38:	4a89      	ldr	r2, [pc, #548]	; (8017c60 <problem_fetch+0x1659c>)
 8017a3a:	461d      	mov	r5, r3
 8017a3c:	4614      	mov	r4, r2
 8017a3e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8017a40:	6028      	str	r0, [r5, #0]
 8017a42:	6069      	str	r1, [r5, #4]
 8017a44:	60aa      	str	r2, [r5, #8]
 8017a46:	60eb      	str	r3, [r5, #12]
 8017a48:	8823      	ldrh	r3, [r4, #0]
 8017a4a:	78a2      	ldrb	r2, [r4, #2]
 8017a4c:	822b      	strh	r3, [r5, #16]
 8017a4e:	4613      	mov	r3, r2
 8017a50:	74ab      	strb	r3, [r5, #18]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 8017a52:	687b      	ldr	r3, [r7, #4]
 8017a54:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8017a58:	4a82      	ldr	r2, [pc, #520]	; (8017c64 <problem_fetch+0x165a0>)
 8017a5a:	461c      	mov	r4, r3
 8017a5c:	4613      	mov	r3, r2
 8017a5e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8017a60:	6020      	str	r0, [r4, #0]
 8017a62:	6061      	str	r1, [r4, #4]
 8017a64:	60a2      	str	r2, [r4, #8]
 8017a66:	881b      	ldrh	r3, [r3, #0]
 8017a68:	81a3      	strh	r3, [r4, #12]
			break;
 8017a6a:	f004 bd5b 	b.w	801c524 <problem_fetch+0x1ae60>
		case 661 :
			strcpy(p->name,"AF EASY FOUR");
 8017a6e:	687b      	ldr	r3, [r7, #4]
 8017a70:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8017a74:	4a7c      	ldr	r2, [pc, #496]	; (8017c68 <problem_fetch+0x165a4>)
 8017a76:	461c      	mov	r4, r3
 8017a78:	4613      	mov	r3, r2
 8017a7a:	cb07      	ldmia	r3!, {r0, r1, r2}
 8017a7c:	6020      	str	r0, [r4, #0]
 8017a7e:	6061      	str	r1, [r4, #4]
 8017a80:	60a2      	str	r2, [r4, #8]
 8017a82:	781b      	ldrb	r3, [r3, #0]
 8017a84:	7323      	strb	r3, [r4, #12]
			strcpy(p->grade,"6B+");
 8017a86:	687b      	ldr	r3, [r7, #4]
 8017a88:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8017a8c:	4a77      	ldr	r2, [pc, #476]	; (8017c6c <problem_fetch+0x165a8>)
 8017a8e:	6810      	ldr	r0, [r2, #0]
 8017a90:	6018      	str	r0, [r3, #0]
			p->moveSize = 8;
 8017a92:	687b      	ldr	r3, [r7, #4]
 8017a94:	2208      	movs	r2, #8
 8017a96:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,E,H,H,F,I,G,I");
 8017a98:	687b      	ldr	r3, [r7, #4]
 8017a9a:	33a4      	adds	r3, #164	; 0xa4
 8017a9c:	4a74      	ldr	r2, [pc, #464]	; (8017c70 <problem_fetch+0x165ac>)
 8017a9e:	461c      	mov	r4, r3
 8017aa0:	4615      	mov	r5, r2
 8017aa2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8017aa4:	6020      	str	r0, [r4, #0]
 8017aa6:	6061      	str	r1, [r4, #4]
 8017aa8:	60a2      	str	r2, [r4, #8]
 8017aaa:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,6,8,10,13,14,15,18");
 8017aac:	687b      	ldr	r3, [r7, #4]
 8017aae:	3304      	adds	r3, #4
 8017ab0:	4a70      	ldr	r2, [pc, #448]	; (8017c74 <problem_fetch+0x165b0>)
 8017ab2:	461d      	mov	r5, r3
 8017ab4:	4614      	mov	r4, r2
 8017ab6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8017ab8:	6028      	str	r0, [r5, #0]
 8017aba:	6069      	str	r1, [r5, #4]
 8017abc:	60aa      	str	r2, [r5, #8]
 8017abe:	60eb      	str	r3, [r5, #12]
 8017ac0:	6820      	ldr	r0, [r4, #0]
 8017ac2:	6128      	str	r0, [r5, #16]
 8017ac4:	7923      	ldrb	r3, [r4, #4]
 8017ac6:	752b      	strb	r3, [r5, #20]
			strcpy(p->startFinish,"s,d,d,d,d,d,d,e");
 8017ac8:	687b      	ldr	r3, [r7, #4]
 8017aca:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8017ace:	4a60      	ldr	r2, [pc, #384]	; (8017c50 <problem_fetch+0x1658c>)
 8017ad0:	461c      	mov	r4, r3
 8017ad2:	4615      	mov	r5, r2
 8017ad4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8017ad6:	6020      	str	r0, [r4, #0]
 8017ad8:	6061      	str	r1, [r4, #4]
 8017ada:	60a2      	str	r2, [r4, #8]
 8017adc:	60e3      	str	r3, [r4, #12]
			break;
 8017ade:	f004 bd21 	b.w	801c524 <problem_fetch+0x1ae60>
		case 662 :
			strcpy(p->name,"AF EASY ONE");
 8017ae2:	687b      	ldr	r3, [r7, #4]
 8017ae4:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8017ae8:	4a63      	ldr	r2, [pc, #396]	; (8017c78 <problem_fetch+0x165b4>)
 8017aea:	461c      	mov	r4, r3
 8017aec:	4613      	mov	r3, r2
 8017aee:	cb07      	ldmia	r3!, {r0, r1, r2}
 8017af0:	6020      	str	r0, [r4, #0]
 8017af2:	6061      	str	r1, [r4, #4]
 8017af4:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade,"6B+");
 8017af6:	687b      	ldr	r3, [r7, #4]
 8017af8:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8017afc:	4a5b      	ldr	r2, [pc, #364]	; (8017c6c <problem_fetch+0x165a8>)
 8017afe:	6810      	ldr	r0, [r2, #0]
 8017b00:	6018      	str	r0, [r3, #0]
			p->moveSize = 8;
 8017b02:	687b      	ldr	r3, [r7, #4]
 8017b04:	2208      	movs	r2, #8
 8017b06:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,J,K,H,J,G,K,I");
 8017b08:	687b      	ldr	r3, [r7, #4]
 8017b0a:	33a4      	adds	r3, #164	; 0xa4
 8017b0c:	4a5b      	ldr	r2, [pc, #364]	; (8017c7c <problem_fetch+0x165b8>)
 8017b0e:	461c      	mov	r4, r3
 8017b10:	4615      	mov	r5, r2
 8017b12:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8017b14:	6020      	str	r0, [r4, #0]
 8017b16:	6061      	str	r1, [r4, #4]
 8017b18:	60a2      	str	r2, [r4, #8]
 8017b1a:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,7,9,10,12,14,16,18");
 8017b1c:	687b      	ldr	r3, [r7, #4]
 8017b1e:	3304      	adds	r3, #4
 8017b20:	4a57      	ldr	r2, [pc, #348]	; (8017c80 <problem_fetch+0x165bc>)
 8017b22:	461d      	mov	r5, r3
 8017b24:	4614      	mov	r4, r2
 8017b26:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8017b28:	6028      	str	r0, [r5, #0]
 8017b2a:	6069      	str	r1, [r5, #4]
 8017b2c:	60aa      	str	r2, [r5, #8]
 8017b2e:	60eb      	str	r3, [r5, #12]
 8017b30:	6820      	ldr	r0, [r4, #0]
 8017b32:	6128      	str	r0, [r5, #16]
 8017b34:	7923      	ldrb	r3, [r4, #4]
 8017b36:	752b      	strb	r3, [r5, #20]
			strcpy(p->startFinish,"s,d,d,d,d,d,d,e");
 8017b38:	687b      	ldr	r3, [r7, #4]
 8017b3a:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8017b3e:	4a44      	ldr	r2, [pc, #272]	; (8017c50 <problem_fetch+0x1658c>)
 8017b40:	461c      	mov	r4, r3
 8017b42:	4615      	mov	r5, r2
 8017b44:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8017b46:	6020      	str	r0, [r4, #0]
 8017b48:	6061      	str	r1, [r4, #4]
 8017b4a:	60a2      	str	r2, [r4, #8]
 8017b4c:	60e3      	str	r3, [r4, #12]
			break;
 8017b4e:	f004 bce9 	b.w	801c524 <problem_fetch+0x1ae60>
		case 663 :
			strcpy(p->name,"HOLD THE SWING");
 8017b52:	687b      	ldr	r3, [r7, #4]
 8017b54:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8017b58:	4a4a      	ldr	r2, [pc, #296]	; (8017c84 <problem_fetch+0x165c0>)
 8017b5a:	461c      	mov	r4, r3
 8017b5c:	4613      	mov	r3, r2
 8017b5e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8017b60:	6020      	str	r0, [r4, #0]
 8017b62:	6061      	str	r1, [r4, #4]
 8017b64:	60a2      	str	r2, [r4, #8]
 8017b66:	881a      	ldrh	r2, [r3, #0]
 8017b68:	789b      	ldrb	r3, [r3, #2]
 8017b6a:	81a2      	strh	r2, [r4, #12]
 8017b6c:	73a3      	strb	r3, [r4, #14]
			strcpy(p->grade,"6C");
 8017b6e:	687b      	ldr	r3, [r7, #4]
 8017b70:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8017b74:	4a44      	ldr	r2, [pc, #272]	; (8017c88 <problem_fetch+0x165c4>)
 8017b76:	8811      	ldrh	r1, [r2, #0]
 8017b78:	7892      	ldrb	r2, [r2, #2]
 8017b7a:	8019      	strh	r1, [r3, #0]
 8017b7c:	709a      	strb	r2, [r3, #2]
			p->moveSize = 7;
 8017b7e:	687b      	ldr	r3, [r7, #4]
 8017b80:	2207      	movs	r2, #7
 8017b82:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,E,G,E,I,E,I");
 8017b84:	687b      	ldr	r3, [r7, #4]
 8017b86:	33a4      	adds	r3, #164	; 0xa4
 8017b88:	4a40      	ldr	r2, [pc, #256]	; (8017c8c <problem_fetch+0x165c8>)
 8017b8a:	461c      	mov	r4, r3
 8017b8c:	4613      	mov	r3, r2
 8017b8e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8017b90:	6020      	str	r0, [r4, #0]
 8017b92:	6061      	str	r1, [r4, #4]
 8017b94:	60a2      	str	r2, [r4, #8]
 8017b96:	881b      	ldrh	r3, [r3, #0]
 8017b98:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,6,9,12,14,14,18");
 8017b9a:	687b      	ldr	r3, [r7, #4]
 8017b9c:	3304      	adds	r3, #4
 8017b9e:	4a3c      	ldr	r2, [pc, #240]	; (8017c90 <problem_fetch+0x165cc>)
 8017ba0:	461d      	mov	r5, r3
 8017ba2:	4614      	mov	r4, r2
 8017ba4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8017ba6:	6028      	str	r0, [r5, #0]
 8017ba8:	6069      	str	r1, [r5, #4]
 8017baa:	60aa      	str	r2, [r5, #8]
 8017bac:	60eb      	str	r3, [r5, #12]
 8017bae:	8823      	ldrh	r3, [r4, #0]
 8017bb0:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,s,d,d,d,d,e");
 8017bb2:	687b      	ldr	r3, [r7, #4]
 8017bb4:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8017bb8:	4a36      	ldr	r2, [pc, #216]	; (8017c94 <problem_fetch+0x165d0>)
 8017bba:	461c      	mov	r4, r3
 8017bbc:	4613      	mov	r3, r2
 8017bbe:	cb07      	ldmia	r3!, {r0, r1, r2}
 8017bc0:	6020      	str	r0, [r4, #0]
 8017bc2:	6061      	str	r1, [r4, #4]
 8017bc4:	60a2      	str	r2, [r4, #8]
 8017bc6:	881b      	ldrh	r3, [r3, #0]
 8017bc8:	81a3      	strh	r3, [r4, #12]
			break;
 8017bca:	f004 bcab 	b.w	801c524 <problem_fetch+0x1ae60>
		case 664 :
			strcpy(p->name,"DIAGONALE");
 8017bce:	687b      	ldr	r3, [r7, #4]
 8017bd0:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8017bd4:	4930      	ldr	r1, [pc, #192]	; (8017c98 <problem_fetch+0x165d4>)
 8017bd6:	461a      	mov	r2, r3
 8017bd8:	460b      	mov	r3, r1
 8017bda:	cb03      	ldmia	r3!, {r0, r1}
 8017bdc:	6010      	str	r0, [r2, #0]
 8017bde:	6051      	str	r1, [r2, #4]
 8017be0:	881b      	ldrh	r3, [r3, #0]
 8017be2:	8113      	strh	r3, [r2, #8]
			strcpy(p->grade,"7B");
 8017be4:	687b      	ldr	r3, [r7, #4]
 8017be6:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8017bea:	4a2c      	ldr	r2, [pc, #176]	; (8017c9c <problem_fetch+0x165d8>)
 8017bec:	8811      	ldrh	r1, [r2, #0]
 8017bee:	7892      	ldrb	r2, [r2, #2]
 8017bf0:	8019      	strh	r1, [r3, #0]
 8017bf2:	709a      	strb	r2, [r3, #2]
			p->moveSize = 5;
 8017bf4:	687b      	ldr	r3, [r7, #4]
 8017bf6:	2205      	movs	r2, #5
 8017bf8:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,H,F,D,A");
 8017bfa:	687b      	ldr	r3, [r7, #4]
 8017bfc:	33a4      	adds	r3, #164	; 0xa4
 8017bfe:	4928      	ldr	r1, [pc, #160]	; (8017ca0 <problem_fetch+0x165dc>)
 8017c00:	461a      	mov	r2, r3
 8017c02:	460b      	mov	r3, r1
 8017c04:	cb03      	ldmia	r3!, {r0, r1}
 8017c06:	6010      	str	r0, [r2, #0]
 8017c08:	6051      	str	r1, [r2, #4]
 8017c0a:	881b      	ldrh	r3, [r3, #0]
 8017c0c:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"5,8,11,15,18");
 8017c0e:	687b      	ldr	r3, [r7, #4]
 8017c10:	3304      	adds	r3, #4
 8017c12:	4a24      	ldr	r2, [pc, #144]	; (8017ca4 <problem_fetch+0x165e0>)
 8017c14:	461c      	mov	r4, r3
 8017c16:	4613      	mov	r3, r2
 8017c18:	cb07      	ldmia	r3!, {r0, r1, r2}
 8017c1a:	6020      	str	r0, [r4, #0]
 8017c1c:	6061      	str	r1, [r4, #4]
 8017c1e:	60a2      	str	r2, [r4, #8]
 8017c20:	781b      	ldrb	r3, [r3, #0]
 8017c22:	7323      	strb	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,e");
 8017c24:	687b      	ldr	r3, [r7, #4]
 8017c26:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8017c2a:	491f      	ldr	r1, [pc, #124]	; (8017ca8 <problem_fetch+0x165e4>)
 8017c2c:	461a      	mov	r2, r3
 8017c2e:	460b      	mov	r3, r1
 8017c30:	cb03      	ldmia	r3!, {r0, r1}
 8017c32:	6010      	str	r0, [r2, #0]
 8017c34:	6051      	str	r1, [r2, #4]
 8017c36:	881b      	ldrh	r3, [r3, #0]
 8017c38:	8113      	strh	r3, [r2, #8]
			break;
 8017c3a:	f004 bc73 	b.w	801c524 <problem_fetch+0x1ae60>
 8017c3e:	bf00      	nop
 8017c40:	0802b4ac 	.word	0x0802b4ac
 8017c44:	08025bb8 	.word	0x08025bb8
 8017c48:	0802b4bc 	.word	0x0802b4bc
 8017c4c:	0802b4cc 	.word	0x0802b4cc
 8017c50:	08023a64 	.word	0x08023a64
 8017c54:	0802b4e4 	.word	0x0802b4e4
 8017c58:	080238ec 	.word	0x080238ec
 8017c5c:	0802b500 	.word	0x0802b500
 8017c60:	0802b510 	.word	0x0802b510
 8017c64:	080239dc 	.word	0x080239dc
 8017c68:	0802b524 	.word	0x0802b524
 8017c6c:	08023854 	.word	0x08023854
 8017c70:	0802b534 	.word	0x0802b534
 8017c74:	0802b544 	.word	0x0802b544
 8017c78:	0802b55c 	.word	0x0802b55c
 8017c7c:	0802b568 	.word	0x0802b568
 8017c80:	0802b578 	.word	0x0802b578
 8017c84:	0802b590 	.word	0x0802b590
 8017c88:	08023920 	.word	0x08023920
 8017c8c:	0802b5a0 	.word	0x0802b5a0
 8017c90:	0802b5b0 	.word	0x0802b5b0
 8017c94:	080238cc 	.word	0x080238cc
 8017c98:	0802b5c4 	.word	0x0802b5c4
 8017c9c:	08023f4c 	.word	0x08023f4c
 8017ca0:	0802b5d0 	.word	0x0802b5d0
 8017ca4:	0802b5dc 	.word	0x0802b5dc
 8017ca8:	08023d20 	.word	0x08023d20
		case 665 :
			strcpy(p->name,"ACG59");
 8017cac:	687b      	ldr	r3, [r7, #4]
 8017cae:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8017cb2:	4ac3      	ldr	r2, [pc, #780]	; (8017fc0 <problem_fetch+0x168fc>)
 8017cb4:	6810      	ldr	r0, [r2, #0]
 8017cb6:	6018      	str	r0, [r3, #0]
 8017cb8:	8892      	ldrh	r2, [r2, #4]
 8017cba:	809a      	strh	r2, [r3, #4]
			strcpy(p->grade,"6C");
 8017cbc:	687b      	ldr	r3, [r7, #4]
 8017cbe:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8017cc2:	4ac0      	ldr	r2, [pc, #768]	; (8017fc4 <problem_fetch+0x16900>)
 8017cc4:	8811      	ldrh	r1, [r2, #0]
 8017cc6:	7892      	ldrb	r2, [r2, #2]
 8017cc8:	8019      	strh	r1, [r3, #0]
 8017cca:	709a      	strb	r2, [r3, #2]
			p->moveSize = 8;
 8017ccc:	687b      	ldr	r3, [r7, #4]
 8017cce:	2208      	movs	r2, #8
 8017cd0:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"H,C,E,B,D,E,F,I");
 8017cd2:	687b      	ldr	r3, [r7, #4]
 8017cd4:	33a4      	adds	r3, #164	; 0xa4
 8017cd6:	4abc      	ldr	r2, [pc, #752]	; (8017fc8 <problem_fetch+0x16904>)
 8017cd8:	461c      	mov	r4, r3
 8017cda:	4615      	mov	r5, r2
 8017cdc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8017cde:	6020      	str	r0, [r4, #0]
 8017ce0:	6061      	str	r1, [r4, #4]
 8017ce2:	60a2      	str	r2, [r4, #8]
 8017ce4:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,5,8,10,15,16,11,18");
 8017ce6:	687b      	ldr	r3, [r7, #4]
 8017ce8:	3304      	adds	r3, #4
 8017cea:	4ab8      	ldr	r2, [pc, #736]	; (8017fcc <problem_fetch+0x16908>)
 8017cec:	461d      	mov	r5, r3
 8017cee:	4614      	mov	r4, r2
 8017cf0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8017cf2:	6028      	str	r0, [r5, #0]
 8017cf4:	6069      	str	r1, [r5, #4]
 8017cf6:	60aa      	str	r2, [r5, #8]
 8017cf8:	60eb      	str	r3, [r5, #12]
 8017cfa:	6820      	ldr	r0, [r4, #0]
 8017cfc:	6128      	str	r0, [r5, #16]
 8017cfe:	7923      	ldrb	r3, [r4, #4]
 8017d00:	752b      	strb	r3, [r5, #20]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,e");
 8017d02:	687b      	ldr	r3, [r7, #4]
 8017d04:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8017d08:	4ab1      	ldr	r2, [pc, #708]	; (8017fd0 <problem_fetch+0x1690c>)
 8017d0a:	461c      	mov	r4, r3
 8017d0c:	4615      	mov	r5, r2
 8017d0e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8017d10:	6020      	str	r0, [r4, #0]
 8017d12:	6061      	str	r1, [r4, #4]
 8017d14:	60a2      	str	r2, [r4, #8]
 8017d16:	60e3      	str	r3, [r4, #12]
			break;
 8017d18:	f004 bc04 	b.w	801c524 <problem_fetch+0x1ae60>
		case 666 :
			strcpy(p->name,"ACG56");
 8017d1c:	687b      	ldr	r3, [r7, #4]
 8017d1e:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8017d22:	4aac      	ldr	r2, [pc, #688]	; (8017fd4 <problem_fetch+0x16910>)
 8017d24:	6810      	ldr	r0, [r2, #0]
 8017d26:	6018      	str	r0, [r3, #0]
 8017d28:	8892      	ldrh	r2, [r2, #4]
 8017d2a:	809a      	strh	r2, [r3, #4]
			strcpy(p->grade,"7A");
 8017d2c:	687b      	ldr	r3, [r7, #4]
 8017d2e:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8017d32:	4aa9      	ldr	r2, [pc, #676]	; (8017fd8 <problem_fetch+0x16914>)
 8017d34:	8811      	ldrh	r1, [r2, #0]
 8017d36:	7892      	ldrb	r2, [r2, #2]
 8017d38:	8019      	strh	r1, [r3, #0]
 8017d3a:	709a      	strb	r2, [r3, #2]
			p->moveSize = 7;
 8017d3c:	687b      	ldr	r3, [r7, #4]
 8017d3e:	2207      	movs	r2, #7
 8017d40:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,I,H,E,C,B,A");
 8017d42:	687b      	ldr	r3, [r7, #4]
 8017d44:	33a4      	adds	r3, #164	; 0xa4
 8017d46:	4aa5      	ldr	r2, [pc, #660]	; (8017fdc <problem_fetch+0x16918>)
 8017d48:	461c      	mov	r4, r3
 8017d4a:	4613      	mov	r3, r2
 8017d4c:	cb07      	ldmia	r3!, {r0, r1, r2}
 8017d4e:	6020      	str	r0, [r4, #0]
 8017d50:	6061      	str	r1, [r4, #4]
 8017d52:	60a2      	str	r2, [r4, #8]
 8017d54:	881b      	ldrh	r3, [r3, #0]
 8017d56:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,10,13,16,16,10,18");
 8017d58:	687b      	ldr	r3, [r7, #4]
 8017d5a:	3304      	adds	r3, #4
 8017d5c:	4aa0      	ldr	r2, [pc, #640]	; (8017fe0 <problem_fetch+0x1691c>)
 8017d5e:	461d      	mov	r5, r3
 8017d60:	4614      	mov	r4, r2
 8017d62:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8017d64:	6028      	str	r0, [r5, #0]
 8017d66:	6069      	str	r1, [r5, #4]
 8017d68:	60aa      	str	r2, [r5, #8]
 8017d6a:	60eb      	str	r3, [r5, #12]
 8017d6c:	6820      	ldr	r0, [r4, #0]
 8017d6e:	6128      	str	r0, [r5, #16]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 8017d70:	687b      	ldr	r3, [r7, #4]
 8017d72:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8017d76:	4a9b      	ldr	r2, [pc, #620]	; (8017fe4 <problem_fetch+0x16920>)
 8017d78:	461c      	mov	r4, r3
 8017d7a:	4613      	mov	r3, r2
 8017d7c:	cb07      	ldmia	r3!, {r0, r1, r2}
 8017d7e:	6020      	str	r0, [r4, #0]
 8017d80:	6061      	str	r1, [r4, #4]
 8017d82:	60a2      	str	r2, [r4, #8]
 8017d84:	881b      	ldrh	r3, [r3, #0]
 8017d86:	81a3      	strh	r3, [r4, #12]
			break;
 8017d88:	f004 bbcc 	b.w	801c524 <problem_fetch+0x1ae60>
		case 667 :
			strcpy(p->name,"LAGO NERO");
 8017d8c:	687b      	ldr	r3, [r7, #4]
 8017d8e:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8017d92:	4995      	ldr	r1, [pc, #596]	; (8017fe8 <problem_fetch+0x16924>)
 8017d94:	461a      	mov	r2, r3
 8017d96:	460b      	mov	r3, r1
 8017d98:	cb03      	ldmia	r3!, {r0, r1}
 8017d9a:	6010      	str	r0, [r2, #0]
 8017d9c:	6051      	str	r1, [r2, #4]
 8017d9e:	881b      	ldrh	r3, [r3, #0]
 8017da0:	8113      	strh	r3, [r2, #8]
			strcpy(p->grade,"6B+");
 8017da2:	687b      	ldr	r3, [r7, #4]
 8017da4:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8017da8:	4a90      	ldr	r2, [pc, #576]	; (8017fec <problem_fetch+0x16928>)
 8017daa:	6810      	ldr	r0, [r2, #0]
 8017dac:	6018      	str	r0, [r3, #0]
			p->moveSize = 8;
 8017dae:	687b      	ldr	r3, [r7, #4]
 8017db0:	2208      	movs	r2, #8
 8017db2:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,E,E,F,C,D,E,D");
 8017db4:	687b      	ldr	r3, [r7, #4]
 8017db6:	33a4      	adds	r3, #164	; 0xa4
 8017db8:	4a8d      	ldr	r2, [pc, #564]	; (8017ff0 <problem_fetch+0x1692c>)
 8017dba:	461c      	mov	r4, r3
 8017dbc:	4615      	mov	r5, r2
 8017dbe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8017dc0:	6020      	str	r0, [r4, #0]
 8017dc2:	6061      	str	r1, [r4, #4]
 8017dc4:	60a2      	str	r2, [r4, #8]
 8017dc6:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,6,8,11,13,15,16,18");
 8017dc8:	687b      	ldr	r3, [r7, #4]
 8017dca:	3304      	adds	r3, #4
 8017dcc:	4a89      	ldr	r2, [pc, #548]	; (8017ff4 <problem_fetch+0x16930>)
 8017dce:	461d      	mov	r5, r3
 8017dd0:	4614      	mov	r4, r2
 8017dd2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8017dd4:	6028      	str	r0, [r5, #0]
 8017dd6:	6069      	str	r1, [r5, #4]
 8017dd8:	60aa      	str	r2, [r5, #8]
 8017dda:	60eb      	str	r3, [r5, #12]
 8017ddc:	6820      	ldr	r0, [r4, #0]
 8017dde:	6128      	str	r0, [r5, #16]
 8017de0:	7923      	ldrb	r3, [r4, #4]
 8017de2:	752b      	strb	r3, [r5, #20]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,e");
 8017de4:	687b      	ldr	r3, [r7, #4]
 8017de6:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8017dea:	4a79      	ldr	r2, [pc, #484]	; (8017fd0 <problem_fetch+0x1690c>)
 8017dec:	461c      	mov	r4, r3
 8017dee:	4615      	mov	r5, r2
 8017df0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8017df2:	6020      	str	r0, [r4, #0]
 8017df4:	6061      	str	r1, [r4, #4]
 8017df6:	60a2      	str	r2, [r4, #8]
 8017df8:	60e3      	str	r3, [r4, #12]
			break;
 8017dfa:	f004 bb93 	b.w	801c524 <problem_fetch+0x1ae60>
		case 668 :
			strcpy(p->name,"BP");
 8017dfe:	687b      	ldr	r3, [r7, #4]
 8017e00:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8017e04:	4a7c      	ldr	r2, [pc, #496]	; (8017ff8 <problem_fetch+0x16934>)
 8017e06:	8811      	ldrh	r1, [r2, #0]
 8017e08:	7892      	ldrb	r2, [r2, #2]
 8017e0a:	8019      	strh	r1, [r3, #0]
 8017e0c:	709a      	strb	r2, [r3, #2]
			strcpy(p->grade,"6B+");
 8017e0e:	687b      	ldr	r3, [r7, #4]
 8017e10:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8017e14:	4a75      	ldr	r2, [pc, #468]	; (8017fec <problem_fetch+0x16928>)
 8017e16:	6810      	ldr	r0, [r2, #0]
 8017e18:	6018      	str	r0, [r3, #0]
			p->moveSize = 9;
 8017e1a:	687b      	ldr	r3, [r7, #4]
 8017e1c:	2209      	movs	r2, #9
 8017e1e:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"C,B,E,E,I,H,J,H,I");
 8017e20:	687b      	ldr	r3, [r7, #4]
 8017e22:	33a4      	adds	r3, #164	; 0xa4
 8017e24:	4a75      	ldr	r2, [pc, #468]	; (8017ffc <problem_fetch+0x16938>)
 8017e26:	461d      	mov	r5, r3
 8017e28:	4614      	mov	r4, r2
 8017e2a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8017e2c:	6028      	str	r0, [r5, #0]
 8017e2e:	6069      	str	r1, [r5, #4]
 8017e30:	60aa      	str	r2, [r5, #8]
 8017e32:	60eb      	str	r3, [r5, #12]
 8017e34:	8823      	ldrh	r3, [r4, #0]
 8017e36:	822b      	strh	r3, [r5, #16]
			strcpy(p->moveNumbers,"5,6,9,8,10,12,13,16,18");
 8017e38:	687b      	ldr	r3, [r7, #4]
 8017e3a:	3304      	adds	r3, #4
 8017e3c:	4a70      	ldr	r2, [pc, #448]	; (8018000 <problem_fetch+0x1693c>)
 8017e3e:	461c      	mov	r4, r3
 8017e40:	4615      	mov	r5, r2
 8017e42:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8017e44:	6020      	str	r0, [r4, #0]
 8017e46:	6061      	str	r1, [r4, #4]
 8017e48:	60a2      	str	r2, [r4, #8]
 8017e4a:	60e3      	str	r3, [r4, #12]
 8017e4c:	6828      	ldr	r0, [r5, #0]
 8017e4e:	6120      	str	r0, [r4, #16]
 8017e50:	88ab      	ldrh	r3, [r5, #4]
 8017e52:	79aa      	ldrb	r2, [r5, #6]
 8017e54:	82a3      	strh	r3, [r4, #20]
 8017e56:	4613      	mov	r3, r2
 8017e58:	75a3      	strb	r3, [r4, #22]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,d,e");
 8017e5a:	687b      	ldr	r3, [r7, #4]
 8017e5c:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8017e60:	4a68      	ldr	r2, [pc, #416]	; (8018004 <problem_fetch+0x16940>)
 8017e62:	461d      	mov	r5, r3
 8017e64:	4614      	mov	r4, r2
 8017e66:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8017e68:	6028      	str	r0, [r5, #0]
 8017e6a:	6069      	str	r1, [r5, #4]
 8017e6c:	60aa      	str	r2, [r5, #8]
 8017e6e:	60eb      	str	r3, [r5, #12]
 8017e70:	8823      	ldrh	r3, [r4, #0]
 8017e72:	822b      	strh	r3, [r5, #16]
			break;
 8017e74:	f004 bb56 	b.w	801c524 <problem_fetch+0x1ae60>
		case 669 :
			strcpy(p->name,"JAGUAR SHARK HARD");
 8017e78:	687b      	ldr	r3, [r7, #4]
 8017e7a:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8017e7e:	4a62      	ldr	r2, [pc, #392]	; (8018008 <problem_fetch+0x16944>)
 8017e80:	461d      	mov	r5, r3
 8017e82:	4614      	mov	r4, r2
 8017e84:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8017e86:	6028      	str	r0, [r5, #0]
 8017e88:	6069      	str	r1, [r5, #4]
 8017e8a:	60aa      	str	r2, [r5, #8]
 8017e8c:	60eb      	str	r3, [r5, #12]
 8017e8e:	8823      	ldrh	r3, [r4, #0]
 8017e90:	822b      	strh	r3, [r5, #16]
			strcpy(p->grade,"7B+");
 8017e92:	687b      	ldr	r3, [r7, #4]
 8017e94:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8017e98:	4a5c      	ldr	r2, [pc, #368]	; (801800c <problem_fetch+0x16948>)
 8017e9a:	6810      	ldr	r0, [r2, #0]
 8017e9c:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 8017e9e:	687b      	ldr	r3, [r7, #4]
 8017ea0:	2206      	movs	r2, #6
 8017ea2:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,H,E,C,E,I");
 8017ea4:	687b      	ldr	r3, [r7, #4]
 8017ea6:	33a4      	adds	r3, #164	; 0xa4
 8017ea8:	4a59      	ldr	r2, [pc, #356]	; (8018010 <problem_fetch+0x1694c>)
 8017eaa:	461c      	mov	r4, r3
 8017eac:	4613      	mov	r3, r2
 8017eae:	cb07      	ldmia	r3!, {r0, r1, r2}
 8017eb0:	6020      	str	r0, [r4, #0]
 8017eb2:	6061      	str	r1, [r4, #4]
 8017eb4:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,10,12,13,16,18");
 8017eb6:	687b      	ldr	r3, [r7, #4]
 8017eb8:	3304      	adds	r3, #4
 8017eba:	4a56      	ldr	r2, [pc, #344]	; (8018014 <problem_fetch+0x16950>)
 8017ebc:	461d      	mov	r5, r3
 8017ebe:	4614      	mov	r4, r2
 8017ec0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8017ec2:	6028      	str	r0, [r5, #0]
 8017ec4:	6069      	str	r1, [r5, #4]
 8017ec6:	60aa      	str	r2, [r5, #8]
 8017ec8:	60eb      	str	r3, [r5, #12]
 8017eca:	7823      	ldrb	r3, [r4, #0]
 8017ecc:	742b      	strb	r3, [r5, #16]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 8017ece:	687b      	ldr	r3, [r7, #4]
 8017ed0:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8017ed4:	4a50      	ldr	r2, [pc, #320]	; (8018018 <problem_fetch+0x16954>)
 8017ed6:	461c      	mov	r4, r3
 8017ed8:	4613      	mov	r3, r2
 8017eda:	cb07      	ldmia	r3!, {r0, r1, r2}
 8017edc:	6020      	str	r0, [r4, #0]
 8017ede:	6061      	str	r1, [r4, #4]
 8017ee0:	60a2      	str	r2, [r4, #8]
			break;
 8017ee2:	f004 bb1f 	b.w	801c524 <problem_fetch+0x1ae60>
		case 670 :
			strcpy(p->name,"IL MANFRUITO");
 8017ee6:	687b      	ldr	r3, [r7, #4]
 8017ee8:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8017eec:	4a4b      	ldr	r2, [pc, #300]	; (801801c <problem_fetch+0x16958>)
 8017eee:	461c      	mov	r4, r3
 8017ef0:	4613      	mov	r3, r2
 8017ef2:	cb07      	ldmia	r3!, {r0, r1, r2}
 8017ef4:	6020      	str	r0, [r4, #0]
 8017ef6:	6061      	str	r1, [r4, #4]
 8017ef8:	60a2      	str	r2, [r4, #8]
 8017efa:	781b      	ldrb	r3, [r3, #0]
 8017efc:	7323      	strb	r3, [r4, #12]
			strcpy(p->grade,"7C");
 8017efe:	687b      	ldr	r3, [r7, #4]
 8017f00:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8017f04:	4a46      	ldr	r2, [pc, #280]	; (8018020 <problem_fetch+0x1695c>)
 8017f06:	8811      	ldrh	r1, [r2, #0]
 8017f08:	7892      	ldrb	r2, [r2, #2]
 8017f0a:	8019      	strh	r1, [r3, #0]
 8017f0c:	709a      	strb	r2, [r3, #2]
			p->moveSize = 6;
 8017f0e:	687b      	ldr	r3, [r7, #4]
 8017f10:	2206      	movs	r2, #6
 8017f12:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"A,E,E,F,G,G");
 8017f14:	687b      	ldr	r3, [r7, #4]
 8017f16:	33a4      	adds	r3, #164	; 0xa4
 8017f18:	4a42      	ldr	r2, [pc, #264]	; (8018024 <problem_fetch+0x16960>)
 8017f1a:	461c      	mov	r4, r3
 8017f1c:	4613      	mov	r3, r2
 8017f1e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8017f20:	6020      	str	r0, [r4, #0]
 8017f22:	6061      	str	r1, [r4, #4]
 8017f24:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"18,6,9,13,4,17");
 8017f26:	687b      	ldr	r3, [r7, #4]
 8017f28:	3304      	adds	r3, #4
 8017f2a:	4a3f      	ldr	r2, [pc, #252]	; (8018028 <problem_fetch+0x16964>)
 8017f2c:	461c      	mov	r4, r3
 8017f2e:	4613      	mov	r3, r2
 8017f30:	cb07      	ldmia	r3!, {r0, r1, r2}
 8017f32:	6020      	str	r0, [r4, #0]
 8017f34:	6061      	str	r1, [r4, #4]
 8017f36:	60a2      	str	r2, [r4, #8]
 8017f38:	881a      	ldrh	r2, [r3, #0]
 8017f3a:	789b      	ldrb	r3, [r3, #2]
 8017f3c:	81a2      	strh	r2, [r4, #12]
 8017f3e:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish,"e,s,d,d,s,d");
 8017f40:	687b      	ldr	r3, [r7, #4]
 8017f42:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8017f46:	4a39      	ldr	r2, [pc, #228]	; (801802c <problem_fetch+0x16968>)
 8017f48:	461c      	mov	r4, r3
 8017f4a:	4613      	mov	r3, r2
 8017f4c:	cb07      	ldmia	r3!, {r0, r1, r2}
 8017f4e:	6020      	str	r0, [r4, #0]
 8017f50:	6061      	str	r1, [r4, #4]
 8017f52:	60a2      	str	r2, [r4, #8]
			break;
 8017f54:	f004 bae6 	b.w	801c524 <problem_fetch+0x1ae60>
		case 671 :
			strcpy(p->name,"ROCK N LOCK");
 8017f58:	687b      	ldr	r3, [r7, #4]
 8017f5a:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8017f5e:	4a34      	ldr	r2, [pc, #208]	; (8018030 <problem_fetch+0x1696c>)
 8017f60:	461c      	mov	r4, r3
 8017f62:	4613      	mov	r3, r2
 8017f64:	cb07      	ldmia	r3!, {r0, r1, r2}
 8017f66:	6020      	str	r0, [r4, #0]
 8017f68:	6061      	str	r1, [r4, #4]
 8017f6a:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade,"6C");
 8017f6c:	687b      	ldr	r3, [r7, #4]
 8017f6e:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8017f72:	4a14      	ldr	r2, [pc, #80]	; (8017fc4 <problem_fetch+0x16900>)
 8017f74:	8811      	ldrh	r1, [r2, #0]
 8017f76:	7892      	ldrb	r2, [r2, #2]
 8017f78:	8019      	strh	r1, [r3, #0]
 8017f7a:	709a      	strb	r2, [r3, #2]
			p->moveSize = 6;
 8017f7c:	687b      	ldr	r3, [r7, #4]
 8017f7e:	2206      	movs	r2, #6
 8017f80:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,J,H,I,G,I");
 8017f82:	687b      	ldr	r3, [r7, #4]
 8017f84:	33a4      	adds	r3, #164	; 0xa4
 8017f86:	4a2b      	ldr	r2, [pc, #172]	; (8018034 <problem_fetch+0x16970>)
 8017f88:	461c      	mov	r4, r3
 8017f8a:	4613      	mov	r3, r2
 8017f8c:	cb07      	ldmia	r3!, {r0, r1, r2}
 8017f8e:	6020      	str	r0, [r4, #0]
 8017f90:	6061      	str	r1, [r4, #4]
 8017f92:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,7,10,14,17,18");
 8017f94:	687b      	ldr	r3, [r7, #4]
 8017f96:	3304      	adds	r3, #4
 8017f98:	4a27      	ldr	r2, [pc, #156]	; (8018038 <problem_fetch+0x16974>)
 8017f9a:	461c      	mov	r4, r3
 8017f9c:	4615      	mov	r5, r2
 8017f9e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8017fa0:	6020      	str	r0, [r4, #0]
 8017fa2:	6061      	str	r1, [r4, #4]
 8017fa4:	60a2      	str	r2, [r4, #8]
 8017fa6:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 8017fa8:	687b      	ldr	r3, [r7, #4]
 8017faa:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8017fae:	4a1a      	ldr	r2, [pc, #104]	; (8018018 <problem_fetch+0x16954>)
 8017fb0:	461c      	mov	r4, r3
 8017fb2:	4613      	mov	r3, r2
 8017fb4:	cb07      	ldmia	r3!, {r0, r1, r2}
 8017fb6:	6020      	str	r0, [r4, #0]
 8017fb8:	6061      	str	r1, [r4, #4]
 8017fba:	60a2      	str	r2, [r4, #8]
			break;
 8017fbc:	f004 bab2 	b.w	801c524 <problem_fetch+0x1ae60>
 8017fc0:	0802b5ec 	.word	0x0802b5ec
 8017fc4:	08023920 	.word	0x08023920
 8017fc8:	0802b5f4 	.word	0x0802b5f4
 8017fcc:	0802b604 	.word	0x0802b604
 8017fd0:	08023978 	.word	0x08023978
 8017fd4:	0802b61c 	.word	0x0802b61c
 8017fd8:	08023814 	.word	0x08023814
 8017fdc:	0802b624 	.word	0x0802b624
 8017fe0:	0802b634 	.word	0x0802b634
 8017fe4:	080239dc 	.word	0x080239dc
 8017fe8:	0802b648 	.word	0x0802b648
 8017fec:	08023854 	.word	0x08023854
 8017ff0:	0802b654 	.word	0x0802b654
 8017ff4:	0802b664 	.word	0x0802b664
 8017ff8:	0802b67c 	.word	0x0802b67c
 8017ffc:	0802b680 	.word	0x0802b680
 8018000:	0802b694 	.word	0x0802b694
 8018004:	08024838 	.word	0x08024838
 8018008:	0802b6ac 	.word	0x0802b6ac
 801800c:	08023990 	.word	0x08023990
 8018010:	0802b6c0 	.word	0x0802b6c0
 8018014:	0802b6cc 	.word	0x0802b6cc
 8018018:	08023bf0 	.word	0x08023bf0
 801801c:	0802b6e0 	.word	0x0802b6e0
 8018020:	08024088 	.word	0x08024088
 8018024:	0802b6f0 	.word	0x0802b6f0
 8018028:	0802b6fc 	.word	0x0802b6fc
 801802c:	0802b70c 	.word	0x0802b70c
 8018030:	0802b718 	.word	0x0802b718
 8018034:	0802b724 	.word	0x0802b724
 8018038:	0802b24c 	.word	0x0802b24c
		case 672 :
			strcpy(p->name,"CRAYON PONYFISH");
 801803c:	687b      	ldr	r3, [r7, #4]
 801803e:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8018042:	4aab      	ldr	r2, [pc, #684]	; (80182f0 <problem_fetch+0x16c2c>)
 8018044:	461c      	mov	r4, r3
 8018046:	4615      	mov	r5, r2
 8018048:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801804a:	6020      	str	r0, [r4, #0]
 801804c:	6061      	str	r1, [r4, #4]
 801804e:	60a2      	str	r2, [r4, #8]
 8018050:	60e3      	str	r3, [r4, #12]
			strcpy(p->grade,"7A+");
 8018052:	687b      	ldr	r3, [r7, #4]
 8018054:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8018058:	4aa6      	ldr	r2, [pc, #664]	; (80182f4 <problem_fetch+0x16c30>)
 801805a:	6810      	ldr	r0, [r2, #0]
 801805c:	6018      	str	r0, [r3, #0]
			p->moveSize = 5;
 801805e:	687b      	ldr	r3, [r7, #4]
 8018060:	2205      	movs	r2, #5
 8018062:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,H,C,I,D");
 8018064:	687b      	ldr	r3, [r7, #4]
 8018066:	33a4      	adds	r3, #164	; 0xa4
 8018068:	49a3      	ldr	r1, [pc, #652]	; (80182f8 <problem_fetch+0x16c34>)
 801806a:	461a      	mov	r2, r3
 801806c:	460b      	mov	r3, r1
 801806e:	cb03      	ldmia	r3!, {r0, r1}
 8018070:	6010      	str	r0, [r2, #0]
 8018072:	6051      	str	r1, [r2, #4]
 8018074:	881b      	ldrh	r3, [r3, #0]
 8018076:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"5,10,13,14,18");
 8018078:	687b      	ldr	r3, [r7, #4]
 801807a:	3304      	adds	r3, #4
 801807c:	4a9f      	ldr	r2, [pc, #636]	; (80182fc <problem_fetch+0x16c38>)
 801807e:	461c      	mov	r4, r3
 8018080:	4613      	mov	r3, r2
 8018082:	cb07      	ldmia	r3!, {r0, r1, r2}
 8018084:	6020      	str	r0, [r4, #0]
 8018086:	6061      	str	r1, [r4, #4]
 8018088:	60a2      	str	r2, [r4, #8]
 801808a:	881b      	ldrh	r3, [r3, #0]
 801808c:	81a3      	strh	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,e");
 801808e:	687b      	ldr	r3, [r7, #4]
 8018090:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8018094:	499a      	ldr	r1, [pc, #616]	; (8018300 <problem_fetch+0x16c3c>)
 8018096:	461a      	mov	r2, r3
 8018098:	460b      	mov	r3, r1
 801809a:	cb03      	ldmia	r3!, {r0, r1}
 801809c:	6010      	str	r0, [r2, #0]
 801809e:	6051      	str	r1, [r2, #4]
 80180a0:	881b      	ldrh	r3, [r3, #0]
 80180a2:	8113      	strh	r3, [r2, #8]
			break;
 80180a4:	f004 ba3e 	b.w	801c524 <problem_fetch+0x1ae60>
		case 673 :
			strcpy(p->name,"JAGUAR SHARK");
 80180a8:	687b      	ldr	r3, [r7, #4]
 80180aa:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80180ae:	4a95      	ldr	r2, [pc, #596]	; (8018304 <problem_fetch+0x16c40>)
 80180b0:	461c      	mov	r4, r3
 80180b2:	4613      	mov	r3, r2
 80180b4:	cb07      	ldmia	r3!, {r0, r1, r2}
 80180b6:	6020      	str	r0, [r4, #0]
 80180b8:	6061      	str	r1, [r4, #4]
 80180ba:	60a2      	str	r2, [r4, #8]
 80180bc:	781b      	ldrb	r3, [r3, #0]
 80180be:	7323      	strb	r3, [r4, #12]
			strcpy(p->grade,"7A+");
 80180c0:	687b      	ldr	r3, [r7, #4]
 80180c2:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80180c6:	4a8b      	ldr	r2, [pc, #556]	; (80182f4 <problem_fetch+0x16c30>)
 80180c8:	6810      	ldr	r0, [r2, #0]
 80180ca:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 80180cc:	687b      	ldr	r3, [r7, #4]
 80180ce:	2207      	movs	r2, #7
 80180d0:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,H,E,C,D,E,I");
 80180d2:	687b      	ldr	r3, [r7, #4]
 80180d4:	33a4      	adds	r3, #164	; 0xa4
 80180d6:	4a8c      	ldr	r2, [pc, #560]	; (8018308 <problem_fetch+0x16c44>)
 80180d8:	461c      	mov	r4, r3
 80180da:	4613      	mov	r3, r2
 80180dc:	cb07      	ldmia	r3!, {r0, r1, r2}
 80180de:	6020      	str	r0, [r4, #0]
 80180e0:	6061      	str	r1, [r4, #4]
 80180e2:	60a2      	str	r2, [r4, #8]
 80180e4:	881b      	ldrh	r3, [r3, #0]
 80180e6:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,10,12,13,15,16,18");
 80180e8:	687b      	ldr	r3, [r7, #4]
 80180ea:	3304      	adds	r3, #4
 80180ec:	4a87      	ldr	r2, [pc, #540]	; (801830c <problem_fetch+0x16c48>)
 80180ee:	461d      	mov	r5, r3
 80180f0:	4614      	mov	r4, r2
 80180f2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80180f4:	6028      	str	r0, [r5, #0]
 80180f6:	6069      	str	r1, [r5, #4]
 80180f8:	60aa      	str	r2, [r5, #8]
 80180fa:	60eb      	str	r3, [r5, #12]
 80180fc:	6820      	ldr	r0, [r4, #0]
 80180fe:	6128      	str	r0, [r5, #16]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 8018100:	687b      	ldr	r3, [r7, #4]
 8018102:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8018106:	4a82      	ldr	r2, [pc, #520]	; (8018310 <problem_fetch+0x16c4c>)
 8018108:	461c      	mov	r4, r3
 801810a:	4613      	mov	r3, r2
 801810c:	cb07      	ldmia	r3!, {r0, r1, r2}
 801810e:	6020      	str	r0, [r4, #0]
 8018110:	6061      	str	r1, [r4, #4]
 8018112:	60a2      	str	r2, [r4, #8]
 8018114:	881b      	ldrh	r3, [r3, #0]
 8018116:	81a3      	strh	r3, [r4, #12]
			break;
 8018118:	f004 ba04 	b.w	801c524 <problem_fetch+0x1ae60>
		case 674 :
			strcpy(p->name,"CEPPODE...");
 801811c:	687b      	ldr	r3, [r7, #4]
 801811e:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8018122:	497c      	ldr	r1, [pc, #496]	; (8018314 <problem_fetch+0x16c50>)
 8018124:	461a      	mov	r2, r3
 8018126:	460b      	mov	r3, r1
 8018128:	cb03      	ldmia	r3!, {r0, r1}
 801812a:	6010      	str	r0, [r2, #0]
 801812c:	6051      	str	r1, [r2, #4]
 801812e:	8819      	ldrh	r1, [r3, #0]
 8018130:	789b      	ldrb	r3, [r3, #2]
 8018132:	8111      	strh	r1, [r2, #8]
 8018134:	7293      	strb	r3, [r2, #10]
			strcpy(p->grade,"7A");
 8018136:	687b      	ldr	r3, [r7, #4]
 8018138:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801813c:	4a76      	ldr	r2, [pc, #472]	; (8018318 <problem_fetch+0x16c54>)
 801813e:	8811      	ldrh	r1, [r2, #0]
 8018140:	7892      	ldrb	r2, [r2, #2]
 8018142:	8019      	strh	r1, [r3, #0]
 8018144:	709a      	strb	r2, [r3, #2]
			p->moveSize = 7;
 8018146:	687b      	ldr	r3, [r7, #4]
 8018148:	2207      	movs	r2, #7
 801814a:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"C,H,H,E,H,D,D");
 801814c:	687b      	ldr	r3, [r7, #4]
 801814e:	33a4      	adds	r3, #164	; 0xa4
 8018150:	4a72      	ldr	r2, [pc, #456]	; (801831c <problem_fetch+0x16c58>)
 8018152:	461c      	mov	r4, r3
 8018154:	4613      	mov	r3, r2
 8018156:	cb07      	ldmia	r3!, {r0, r1, r2}
 8018158:	6020      	str	r0, [r4, #0]
 801815a:	6061      	str	r1, [r4, #4]
 801815c:	60a2      	str	r2, [r4, #8]
 801815e:	881b      	ldrh	r3, [r3, #0]
 8018160:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,5,8,9,12,15,18");
 8018162:	687b      	ldr	r3, [r7, #4]
 8018164:	3304      	adds	r3, #4
 8018166:	4a6e      	ldr	r2, [pc, #440]	; (8018320 <problem_fetch+0x16c5c>)
 8018168:	461d      	mov	r5, r3
 801816a:	4614      	mov	r4, r2
 801816c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801816e:	6028      	str	r0, [r5, #0]
 8018170:	6069      	str	r1, [r5, #4]
 8018172:	60aa      	str	r2, [r5, #8]
 8018174:	60eb      	str	r3, [r5, #12]
 8018176:	7823      	ldrb	r3, [r4, #0]
 8018178:	742b      	strb	r3, [r5, #16]
			strcpy(p->startFinish,"s,s,d,d,d,d,e");
 801817a:	687b      	ldr	r3, [r7, #4]
 801817c:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8018180:	4a68      	ldr	r2, [pc, #416]	; (8018324 <problem_fetch+0x16c60>)
 8018182:	461c      	mov	r4, r3
 8018184:	4613      	mov	r3, r2
 8018186:	cb07      	ldmia	r3!, {r0, r1, r2}
 8018188:	6020      	str	r0, [r4, #0]
 801818a:	6061      	str	r1, [r4, #4]
 801818c:	60a2      	str	r2, [r4, #8]
 801818e:	881b      	ldrh	r3, [r3, #0]
 8018190:	81a3      	strh	r3, [r4, #12]
			break;
 8018192:	f004 b9c7 	b.w	801c524 <problem_fetch+0x1ae60>
		case 675 :
			strcpy(p->name,"NITERÓI 01");
 8018196:	687b      	ldr	r3, [r7, #4]
 8018198:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801819c:	4a62      	ldr	r2, [pc, #392]	; (8018328 <problem_fetch+0x16c64>)
 801819e:	461c      	mov	r4, r3
 80181a0:	4613      	mov	r3, r2
 80181a2:	cb07      	ldmia	r3!, {r0, r1, r2}
 80181a4:	6020      	str	r0, [r4, #0]
 80181a6:	6061      	str	r1, [r4, #4]
 80181a8:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade,"6C+");
 80181aa:	687b      	ldr	r3, [r7, #4]
 80181ac:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80181b0:	4a5e      	ldr	r2, [pc, #376]	; (801832c <problem_fetch+0x16c68>)
 80181b2:	6810      	ldr	r0, [r2, #0]
 80181b4:	6018      	str	r0, [r3, #0]
			p->moveSize = 9;
 80181b6:	687b      	ldr	r3, [r7, #4]
 80181b8:	2209      	movs	r2, #9
 80181ba:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"C,B,D,C,E,D,G,G,I");
 80181bc:	687b      	ldr	r3, [r7, #4]
 80181be:	33a4      	adds	r3, #164	; 0xa4
 80181c0:	4a5b      	ldr	r2, [pc, #364]	; (8018330 <problem_fetch+0x16c6c>)
 80181c2:	461d      	mov	r5, r3
 80181c4:	4614      	mov	r4, r2
 80181c6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80181c8:	6028      	str	r0, [r5, #0]
 80181ca:	6069      	str	r1, [r5, #4]
 80181cc:	60aa      	str	r2, [r5, #8]
 80181ce:	60eb      	str	r3, [r5, #12]
 80181d0:	8823      	ldrh	r3, [r4, #0]
 80181d2:	822b      	strh	r3, [r5, #16]
			strcpy(p->moveNumbers,"5,6,7,8,9,11,14,15,18");
 80181d4:	687b      	ldr	r3, [r7, #4]
 80181d6:	3304      	adds	r3, #4
 80181d8:	4a56      	ldr	r2, [pc, #344]	; (8018334 <problem_fetch+0x16c70>)
 80181da:	461d      	mov	r5, r3
 80181dc:	4614      	mov	r4, r2
 80181de:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80181e0:	6028      	str	r0, [r5, #0]
 80181e2:	6069      	str	r1, [r5, #4]
 80181e4:	60aa      	str	r2, [r5, #8]
 80181e6:	60eb      	str	r3, [r5, #12]
 80181e8:	6820      	ldr	r0, [r4, #0]
 80181ea:	6128      	str	r0, [r5, #16]
 80181ec:	88a3      	ldrh	r3, [r4, #4]
 80181ee:	82ab      	strh	r3, [r5, #20]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,d,e");
 80181f0:	687b      	ldr	r3, [r7, #4]
 80181f2:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 80181f6:	4a50      	ldr	r2, [pc, #320]	; (8018338 <problem_fetch+0x16c74>)
 80181f8:	461d      	mov	r5, r3
 80181fa:	4614      	mov	r4, r2
 80181fc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80181fe:	6028      	str	r0, [r5, #0]
 8018200:	6069      	str	r1, [r5, #4]
 8018202:	60aa      	str	r2, [r5, #8]
 8018204:	60eb      	str	r3, [r5, #12]
 8018206:	8823      	ldrh	r3, [r4, #0]
 8018208:	822b      	strh	r3, [r5, #16]
			break;
 801820a:	f004 b98b 	b.w	801c524 <problem_fetch+0x1ae60>
		case 676 :
			strcpy(p->name,"HAMPUS NEDERLAG");
 801820e:	687b      	ldr	r3, [r7, #4]
 8018210:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8018214:	4a49      	ldr	r2, [pc, #292]	; (801833c <problem_fetch+0x16c78>)
 8018216:	461c      	mov	r4, r3
 8018218:	4615      	mov	r5, r2
 801821a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801821c:	6020      	str	r0, [r4, #0]
 801821e:	6061      	str	r1, [r4, #4]
 8018220:	60a2      	str	r2, [r4, #8]
 8018222:	60e3      	str	r3, [r4, #12]
			strcpy(p->grade,"6B+");
 8018224:	687b      	ldr	r3, [r7, #4]
 8018226:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801822a:	4a45      	ldr	r2, [pc, #276]	; (8018340 <problem_fetch+0x16c7c>)
 801822c:	6810      	ldr	r0, [r2, #0]
 801822e:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 8018230:	687b      	ldr	r3, [r7, #4]
 8018232:	2207      	movs	r2, #7
 8018234:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"H,E,G,D,E,B,D");
 8018236:	687b      	ldr	r3, [r7, #4]
 8018238:	33a4      	adds	r3, #164	; 0xa4
 801823a:	4a42      	ldr	r2, [pc, #264]	; (8018344 <problem_fetch+0x16c80>)
 801823c:	461c      	mov	r4, r3
 801823e:	4613      	mov	r3, r2
 8018240:	cb07      	ldmia	r3!, {r0, r1, r2}
 8018242:	6020      	str	r0, [r4, #0]
 8018244:	6061      	str	r1, [r4, #4]
 8018246:	60a2      	str	r2, [r4, #8]
 8018248:	881b      	ldrh	r3, [r3, #0]
 801824a:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,6,9,11,12,15,18");
 801824c:	687b      	ldr	r3, [r7, #4]
 801824e:	3304      	adds	r3, #4
 8018250:	4a3d      	ldr	r2, [pc, #244]	; (8018348 <problem_fetch+0x16c84>)
 8018252:	461d      	mov	r5, r3
 8018254:	4614      	mov	r4, r2
 8018256:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8018258:	6028      	str	r0, [r5, #0]
 801825a:	6069      	str	r1, [r5, #4]
 801825c:	60aa      	str	r2, [r5, #8]
 801825e:	60eb      	str	r3, [r5, #12]
 8018260:	8823      	ldrh	r3, [r4, #0]
 8018262:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,s,d,d,d,d,e");
 8018264:	687b      	ldr	r3, [r7, #4]
 8018266:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 801826a:	4a2e      	ldr	r2, [pc, #184]	; (8018324 <problem_fetch+0x16c60>)
 801826c:	461c      	mov	r4, r3
 801826e:	4613      	mov	r3, r2
 8018270:	cb07      	ldmia	r3!, {r0, r1, r2}
 8018272:	6020      	str	r0, [r4, #0]
 8018274:	6061      	str	r1, [r4, #4]
 8018276:	60a2      	str	r2, [r4, #8]
 8018278:	881b      	ldrh	r3, [r3, #0]
 801827a:	81a3      	strh	r3, [r4, #12]
			break;
 801827c:	f004 b952 	b.w	801c524 <problem_fetch+0x1ae60>
		case 677 :
			strcpy(p->name,"GRAYLING");
 8018280:	687b      	ldr	r3, [r7, #4]
 8018282:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8018286:	4931      	ldr	r1, [pc, #196]	; (801834c <problem_fetch+0x16c88>)
 8018288:	461a      	mov	r2, r3
 801828a:	460b      	mov	r3, r1
 801828c:	cb03      	ldmia	r3!, {r0, r1}
 801828e:	6010      	str	r0, [r2, #0]
 8018290:	6051      	str	r1, [r2, #4]
 8018292:	781b      	ldrb	r3, [r3, #0]
 8018294:	7213      	strb	r3, [r2, #8]
			strcpy(p->grade,"6C+");
 8018296:	687b      	ldr	r3, [r7, #4]
 8018298:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801829c:	4a23      	ldr	r2, [pc, #140]	; (801832c <problem_fetch+0x16c68>)
 801829e:	6810      	ldr	r0, [r2, #0]
 80182a0:	6018      	str	r0, [r3, #0]
			p->moveSize = 8;
 80182a2:	687b      	ldr	r3, [r7, #4]
 80182a4:	2208      	movs	r2, #8
 80182a6:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,I,H,G,F,E,D,D");
 80182a8:	687b      	ldr	r3, [r7, #4]
 80182aa:	33a4      	adds	r3, #164	; 0xa4
 80182ac:	4a28      	ldr	r2, [pc, #160]	; (8018350 <problem_fetch+0x16c8c>)
 80182ae:	461c      	mov	r4, r3
 80182b0:	4615      	mov	r5, r2
 80182b2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80182b4:	6020      	str	r0, [r4, #0]
 80182b6:	6061      	str	r1, [r4, #4]
 80182b8:	60a2      	str	r2, [r4, #8]
 80182ba:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,7,8,9,11,12,15,18");
 80182bc:	687b      	ldr	r3, [r7, #4]
 80182be:	3304      	adds	r3, #4
 80182c0:	4a24      	ldr	r2, [pc, #144]	; (8018354 <problem_fetch+0x16c90>)
 80182c2:	461d      	mov	r5, r3
 80182c4:	4614      	mov	r4, r2
 80182c6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80182c8:	6028      	str	r0, [r5, #0]
 80182ca:	6069      	str	r1, [r5, #4]
 80182cc:	60aa      	str	r2, [r5, #8]
 80182ce:	60eb      	str	r3, [r5, #12]
 80182d0:	6820      	ldr	r0, [r4, #0]
 80182d2:	6128      	str	r0, [r5, #16]
			strcpy(p->startFinish,"s,d,d,d,d,d,d,e");
 80182d4:	687b      	ldr	r3, [r7, #4]
 80182d6:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 80182da:	4a1f      	ldr	r2, [pc, #124]	; (8018358 <problem_fetch+0x16c94>)
 80182dc:	461c      	mov	r4, r3
 80182de:	4615      	mov	r5, r2
 80182e0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80182e2:	6020      	str	r0, [r4, #0]
 80182e4:	6061      	str	r1, [r4, #4]
 80182e6:	60a2      	str	r2, [r4, #8]
 80182e8:	60e3      	str	r3, [r4, #12]
			break;
 80182ea:	f004 b91b 	b.w	801c524 <problem_fetch+0x1ae60>
 80182ee:	bf00      	nop
 80182f0:	0802b730 	.word	0x0802b730
 80182f4:	080239f4 	.word	0x080239f4
 80182f8:	0802b740 	.word	0x0802b740
 80182fc:	08027654 	.word	0x08027654
 8018300:	08023d20 	.word	0x08023d20
 8018304:	0802b74c 	.word	0x0802b74c
 8018308:	0802b75c 	.word	0x0802b75c
 801830c:	0802b76c 	.word	0x0802b76c
 8018310:	080239dc 	.word	0x080239dc
 8018314:	0802b780 	.word	0x0802b780
 8018318:	08023814 	.word	0x08023814
 801831c:	0802b78c 	.word	0x0802b78c
 8018320:	0802b79c 	.word	0x0802b79c
 8018324:	080238cc 	.word	0x080238cc
 8018328:	0802b7b0 	.word	0x0802b7b0
 801832c:	080238ec 	.word	0x080238ec
 8018330:	0802b7bc 	.word	0x0802b7bc
 8018334:	0802b7d0 	.word	0x0802b7d0
 8018338:	08024838 	.word	0x08024838
 801833c:	0802b7e8 	.word	0x0802b7e8
 8018340:	08023854 	.word	0x08023854
 8018344:	0802b7f8 	.word	0x0802b7f8
 8018348:	0802b808 	.word	0x0802b808
 801834c:	0802b81c 	.word	0x0802b81c
 8018350:	0802b828 	.word	0x0802b828
 8018354:	0802b838 	.word	0x0802b838
 8018358:	08023a64 	.word	0x08023a64
		case 678 :
			strcpy(p->name,"TAMAS DYNOMITE");
 801835c:	687b      	ldr	r3, [r7, #4]
 801835e:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8018362:	4aaa      	ldr	r2, [pc, #680]	; (801860c <problem_fetch+0x16f48>)
 8018364:	461c      	mov	r4, r3
 8018366:	4613      	mov	r3, r2
 8018368:	cb07      	ldmia	r3!, {r0, r1, r2}
 801836a:	6020      	str	r0, [r4, #0]
 801836c:	6061      	str	r1, [r4, #4]
 801836e:	60a2      	str	r2, [r4, #8]
 8018370:	881a      	ldrh	r2, [r3, #0]
 8018372:	789b      	ldrb	r3, [r3, #2]
 8018374:	81a2      	strh	r2, [r4, #12]
 8018376:	73a3      	strb	r3, [r4, #14]
			strcpy(p->grade,"6C");
 8018378:	687b      	ldr	r3, [r7, #4]
 801837a:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801837e:	4aa4      	ldr	r2, [pc, #656]	; (8018610 <problem_fetch+0x16f4c>)
 8018380:	8811      	ldrh	r1, [r2, #0]
 8018382:	7892      	ldrb	r2, [r2, #2]
 8018384:	8019      	strh	r1, [r3, #0]
 8018386:	709a      	strb	r2, [r3, #2]
			p->moveSize = 6;
 8018388:	687b      	ldr	r3, [r7, #4]
 801838a:	2206      	movs	r2, #6
 801838c:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,J,H,C,D,D");
 801838e:	687b      	ldr	r3, [r7, #4]
 8018390:	33a4      	adds	r3, #164	; 0xa4
 8018392:	4aa0      	ldr	r2, [pc, #640]	; (8018614 <problem_fetch+0x16f50>)
 8018394:	461c      	mov	r4, r3
 8018396:	4613      	mov	r3, r2
 8018398:	cb07      	ldmia	r3!, {r0, r1, r2}
 801839a:	6020      	str	r0, [r4, #0]
 801839c:	6061      	str	r1, [r4, #4]
 801839e:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,5,10,13,15,18");
 80183a0:	687b      	ldr	r3, [r7, #4]
 80183a2:	3304      	adds	r3, #4
 80183a4:	4a9c      	ldr	r2, [pc, #624]	; (8018618 <problem_fetch+0x16f54>)
 80183a6:	461c      	mov	r4, r3
 80183a8:	4615      	mov	r5, r2
 80183aa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80183ac:	6020      	str	r0, [r4, #0]
 80183ae:	6061      	str	r1, [r4, #4]
 80183b0:	60a2      	str	r2, [r4, #8]
 80183b2:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,s,d,d,d,e");
 80183b4:	687b      	ldr	r3, [r7, #4]
 80183b6:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 80183ba:	4a98      	ldr	r2, [pc, #608]	; (801861c <problem_fetch+0x16f58>)
 80183bc:	461c      	mov	r4, r3
 80183be:	4613      	mov	r3, r2
 80183c0:	cb07      	ldmia	r3!, {r0, r1, r2}
 80183c2:	6020      	str	r0, [r4, #0]
 80183c4:	6061      	str	r1, [r4, #4]
 80183c6:	60a2      	str	r2, [r4, #8]
			break;
 80183c8:	f004 b8ac 	b.w	801c524 <problem_fetch+0x1ae60>
		case 679 :
			strcpy(p->name,"SCHWERE LEITER");
 80183cc:	687b      	ldr	r3, [r7, #4]
 80183ce:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80183d2:	4a93      	ldr	r2, [pc, #588]	; (8018620 <problem_fetch+0x16f5c>)
 80183d4:	461c      	mov	r4, r3
 80183d6:	4613      	mov	r3, r2
 80183d8:	cb07      	ldmia	r3!, {r0, r1, r2}
 80183da:	6020      	str	r0, [r4, #0]
 80183dc:	6061      	str	r1, [r4, #4]
 80183de:	60a2      	str	r2, [r4, #8]
 80183e0:	881a      	ldrh	r2, [r3, #0]
 80183e2:	789b      	ldrb	r3, [r3, #2]
 80183e4:	81a2      	strh	r2, [r4, #12]
 80183e6:	73a3      	strb	r3, [r4, #14]
			strcpy(p->grade,"7A");
 80183e8:	687b      	ldr	r3, [r7, #4]
 80183ea:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80183ee:	4a8d      	ldr	r2, [pc, #564]	; (8018624 <problem_fetch+0x16f60>)
 80183f0:	8811      	ldrh	r1, [r2, #0]
 80183f2:	7892      	ldrb	r2, [r2, #2]
 80183f4:	8019      	strh	r1, [r3, #0]
 80183f6:	709a      	strb	r2, [r3, #2]
			p->moveSize = 7;
 80183f8:	687b      	ldr	r3, [r7, #4]
 80183fa:	2207      	movs	r2, #7
 80183fc:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"E,E,E,E,E,E,D");
 80183fe:	687b      	ldr	r3, [r7, #4]
 8018400:	33a4      	adds	r3, #164	; 0xa4
 8018402:	4a89      	ldr	r2, [pc, #548]	; (8018628 <problem_fetch+0x16f64>)
 8018404:	461c      	mov	r4, r3
 8018406:	4613      	mov	r3, r2
 8018408:	cb07      	ldmia	r3!, {r0, r1, r2}
 801840a:	6020      	str	r0, [r4, #0]
 801840c:	6061      	str	r1, [r4, #4]
 801840e:	60a2      	str	r2, [r4, #8]
 8018410:	881b      	ldrh	r3, [r3, #0]
 8018412:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"6,8,9,12,14,16,18");
 8018414:	687b      	ldr	r3, [r7, #4]
 8018416:	3304      	adds	r3, #4
 8018418:	4a84      	ldr	r2, [pc, #528]	; (801862c <problem_fetch+0x16f68>)
 801841a:	461d      	mov	r5, r3
 801841c:	4614      	mov	r4, r2
 801841e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8018420:	6028      	str	r0, [r5, #0]
 8018422:	6069      	str	r1, [r5, #4]
 8018424:	60aa      	str	r2, [r5, #8]
 8018426:	60eb      	str	r3, [r5, #12]
 8018428:	8823      	ldrh	r3, [r4, #0]
 801842a:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 801842c:	687b      	ldr	r3, [r7, #4]
 801842e:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8018432:	4a7f      	ldr	r2, [pc, #508]	; (8018630 <problem_fetch+0x16f6c>)
 8018434:	461c      	mov	r4, r3
 8018436:	4613      	mov	r3, r2
 8018438:	cb07      	ldmia	r3!, {r0, r1, r2}
 801843a:	6020      	str	r0, [r4, #0]
 801843c:	6061      	str	r1, [r4, #4]
 801843e:	60a2      	str	r2, [r4, #8]
 8018440:	881b      	ldrh	r3, [r3, #0]
 8018442:	81a3      	strh	r3, [r4, #12]
			break;
 8018444:	f004 b86e 	b.w	801c524 <problem_fetch+0x1ae60>
		case 680 :
			strcpy(p->name,"MARK'S FAVORITE PROBLEM");
 8018448:	687b      	ldr	r3, [r7, #4]
 801844a:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801844e:	4a79      	ldr	r2, [pc, #484]	; (8018634 <problem_fetch+0x16f70>)
 8018450:	461d      	mov	r5, r3
 8018452:	4614      	mov	r4, r2
 8018454:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8018456:	6028      	str	r0, [r5, #0]
 8018458:	6069      	str	r1, [r5, #4]
 801845a:	60aa      	str	r2, [r5, #8]
 801845c:	60eb      	str	r3, [r5, #12]
 801845e:	cc03      	ldmia	r4!, {r0, r1}
 8018460:	6128      	str	r0, [r5, #16]
 8018462:	6169      	str	r1, [r5, #20]
			strcpy(p->grade,"7B");
 8018464:	687b      	ldr	r3, [r7, #4]
 8018466:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801846a:	4a73      	ldr	r2, [pc, #460]	; (8018638 <problem_fetch+0x16f74>)
 801846c:	8811      	ldrh	r1, [r2, #0]
 801846e:	7892      	ldrb	r2, [r2, #2]
 8018470:	8019      	strh	r1, [r3, #0]
 8018472:	709a      	strb	r2, [r3, #2]
			p->moveSize = 7;
 8018474:	687b      	ldr	r3, [r7, #4]
 8018476:	2207      	movs	r2, #7
 8018478:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"A,C,D,E,F,F,G");
 801847a:	687b      	ldr	r3, [r7, #4]
 801847c:	33a4      	adds	r3, #164	; 0xa4
 801847e:	4a6f      	ldr	r2, [pc, #444]	; (801863c <problem_fetch+0x16f78>)
 8018480:	461c      	mov	r4, r3
 8018482:	4613      	mov	r3, r2
 8018484:	cb07      	ldmia	r3!, {r0, r1, r2}
 8018486:	6020      	str	r0, [r4, #0]
 8018488:	6061      	str	r1, [r4, #4]
 801848a:	60a2      	str	r2, [r4, #8]
 801848c:	881b      	ldrh	r3, [r3, #0]
 801848e:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"9,5,18,6,13,11,15");
 8018490:	687b      	ldr	r3, [r7, #4]
 8018492:	3304      	adds	r3, #4
 8018494:	4a6a      	ldr	r2, [pc, #424]	; (8018640 <problem_fetch+0x16f7c>)
 8018496:	461d      	mov	r5, r3
 8018498:	4614      	mov	r4, r2
 801849a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801849c:	6028      	str	r0, [r5, #0]
 801849e:	6069      	str	r1, [r5, #4]
 80184a0:	60aa      	str	r2, [r5, #8]
 80184a2:	60eb      	str	r3, [r5, #12]
 80184a4:	8823      	ldrh	r3, [r4, #0]
 80184a6:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"d,s,e,s,d,d,d");
 80184a8:	687b      	ldr	r3, [r7, #4]
 80184aa:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 80184ae:	4a65      	ldr	r2, [pc, #404]	; (8018644 <problem_fetch+0x16f80>)
 80184b0:	461c      	mov	r4, r3
 80184b2:	4613      	mov	r3, r2
 80184b4:	cb07      	ldmia	r3!, {r0, r1, r2}
 80184b6:	6020      	str	r0, [r4, #0]
 80184b8:	6061      	str	r1, [r4, #4]
 80184ba:	60a2      	str	r2, [r4, #8]
 80184bc:	881b      	ldrh	r3, [r3, #0]
 80184be:	81a3      	strh	r3, [r4, #12]
			break;
 80184c0:	f004 b830 	b.w	801c524 <problem_fetch+0x1ae60>
		case 681 :
			strcpy(p->name,"SUC");
 80184c4:	687b      	ldr	r3, [r7, #4]
 80184c6:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80184ca:	4a5f      	ldr	r2, [pc, #380]	; (8018648 <problem_fetch+0x16f84>)
 80184cc:	6810      	ldr	r0, [r2, #0]
 80184ce:	6018      	str	r0, [r3, #0]
			strcpy(p->grade,"7A+");
 80184d0:	687b      	ldr	r3, [r7, #4]
 80184d2:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80184d6:	4a5d      	ldr	r2, [pc, #372]	; (801864c <problem_fetch+0x16f88>)
 80184d8:	6810      	ldr	r0, [r2, #0]
 80184da:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 80184dc:	687b      	ldr	r3, [r7, #4]
 80184de:	2206      	movs	r2, #6
 80184e0:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"E,J,F,B,G,I");
 80184e2:	687b      	ldr	r3, [r7, #4]
 80184e4:	33a4      	adds	r3, #164	; 0xa4
 80184e6:	4a5a      	ldr	r2, [pc, #360]	; (8018650 <problem_fetch+0x16f8c>)
 80184e8:	461c      	mov	r4, r3
 80184ea:	4613      	mov	r3, r2
 80184ec:	cb07      	ldmia	r3!, {r0, r1, r2}
 80184ee:	6020      	str	r0, [r4, #0]
 80184f0:	6061      	str	r1, [r4, #4]
 80184f2:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"6,5,11,15,17,18");
 80184f4:	687b      	ldr	r3, [r7, #4]
 80184f6:	3304      	adds	r3, #4
 80184f8:	4a56      	ldr	r2, [pc, #344]	; (8018654 <problem_fetch+0x16f90>)
 80184fa:	461c      	mov	r4, r3
 80184fc:	4615      	mov	r5, r2
 80184fe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8018500:	6020      	str	r0, [r4, #0]
 8018502:	6061      	str	r1, [r4, #4]
 8018504:	60a2      	str	r2, [r4, #8]
 8018506:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,s,d,d,d,e");
 8018508:	687b      	ldr	r3, [r7, #4]
 801850a:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 801850e:	4a43      	ldr	r2, [pc, #268]	; (801861c <problem_fetch+0x16f58>)
 8018510:	461c      	mov	r4, r3
 8018512:	4613      	mov	r3, r2
 8018514:	cb07      	ldmia	r3!, {r0, r1, r2}
 8018516:	6020      	str	r0, [r4, #0]
 8018518:	6061      	str	r1, [r4, #4]
 801851a:	60a2      	str	r2, [r4, #8]
			break;
 801851c:	f004 b802 	b.w	801c524 <problem_fetch+0x1ae60>
		case 682 :
			strcpy(p->name,"ON OUR HEEL");
 8018520:	687b      	ldr	r3, [r7, #4]
 8018522:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8018526:	4a4c      	ldr	r2, [pc, #304]	; (8018658 <problem_fetch+0x16f94>)
 8018528:	461c      	mov	r4, r3
 801852a:	4613      	mov	r3, r2
 801852c:	cb07      	ldmia	r3!, {r0, r1, r2}
 801852e:	6020      	str	r0, [r4, #0]
 8018530:	6061      	str	r1, [r4, #4]
 8018532:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade,"6C");
 8018534:	687b      	ldr	r3, [r7, #4]
 8018536:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801853a:	4a35      	ldr	r2, [pc, #212]	; (8018610 <problem_fetch+0x16f4c>)
 801853c:	8811      	ldrh	r1, [r2, #0]
 801853e:	7892      	ldrb	r2, [r2, #2]
 8018540:	8019      	strh	r1, [r3, #0]
 8018542:	709a      	strb	r2, [r3, #2]
			p->moveSize = 7;
 8018544:	687b      	ldr	r3, [r7, #4]
 8018546:	2207      	movs	r2, #7
 8018548:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,G,K,H,C,E,D");
 801854a:	687b      	ldr	r3, [r7, #4]
 801854c:	33a4      	adds	r3, #164	; 0xa4
 801854e:	4a43      	ldr	r2, [pc, #268]	; (801865c <problem_fetch+0x16f98>)
 8018550:	461c      	mov	r4, r3
 8018552:	4613      	mov	r3, r2
 8018554:	cb07      	ldmia	r3!, {r0, r1, r2}
 8018556:	6020      	str	r0, [r4, #0]
 8018558:	6061      	str	r1, [r4, #4]
 801855a:	60a2      	str	r2, [r4, #8]
 801855c:	881b      	ldrh	r3, [r3, #0]
 801855e:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,6,9,10,13,16,18");
 8018560:	687b      	ldr	r3, [r7, #4]
 8018562:	3304      	adds	r3, #4
 8018564:	4a3e      	ldr	r2, [pc, #248]	; (8018660 <problem_fetch+0x16f9c>)
 8018566:	461d      	mov	r5, r3
 8018568:	4614      	mov	r4, r2
 801856a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801856c:	6028      	str	r0, [r5, #0]
 801856e:	6069      	str	r1, [r5, #4]
 8018570:	60aa      	str	r2, [r5, #8]
 8018572:	60eb      	str	r3, [r5, #12]
 8018574:	8823      	ldrh	r3, [r4, #0]
 8018576:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,s,d,d,d,d,e");
 8018578:	687b      	ldr	r3, [r7, #4]
 801857a:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 801857e:	4a39      	ldr	r2, [pc, #228]	; (8018664 <problem_fetch+0x16fa0>)
 8018580:	461c      	mov	r4, r3
 8018582:	4613      	mov	r3, r2
 8018584:	cb07      	ldmia	r3!, {r0, r1, r2}
 8018586:	6020      	str	r0, [r4, #0]
 8018588:	6061      	str	r1, [r4, #4]
 801858a:	60a2      	str	r2, [r4, #8]
 801858c:	881b      	ldrh	r3, [r3, #0]
 801858e:	81a3      	strh	r3, [r4, #12]
			break;
 8018590:	f003 bfc8 	b.w	801c524 <problem_fetch+0x1ae60>
		case 683 :
			strcpy(p->name,"LOUDREIGN");
 8018594:	687b      	ldr	r3, [r7, #4]
 8018596:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801859a:	4933      	ldr	r1, [pc, #204]	; (8018668 <problem_fetch+0x16fa4>)
 801859c:	461a      	mov	r2, r3
 801859e:	460b      	mov	r3, r1
 80185a0:	cb03      	ldmia	r3!, {r0, r1}
 80185a2:	6010      	str	r0, [r2, #0]
 80185a4:	6051      	str	r1, [r2, #4]
 80185a6:	881b      	ldrh	r3, [r3, #0]
 80185a8:	8113      	strh	r3, [r2, #8]
			strcpy(p->grade,"6B+");
 80185aa:	687b      	ldr	r3, [r7, #4]
 80185ac:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80185b0:	4a2e      	ldr	r2, [pc, #184]	; (801866c <problem_fetch+0x16fa8>)
 80185b2:	6810      	ldr	r0, [r2, #0]
 80185b4:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 80185b6:	687b      	ldr	r3, [r7, #4]
 80185b8:	2207      	movs	r2, #7
 80185ba:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,H,I,J,E,E,A");
 80185bc:	687b      	ldr	r3, [r7, #4]
 80185be:	33a4      	adds	r3, #164	; 0xa4
 80185c0:	4a2b      	ldr	r2, [pc, #172]	; (8018670 <problem_fetch+0x16fac>)
 80185c2:	461c      	mov	r4, r3
 80185c4:	4613      	mov	r3, r2
 80185c6:	cb07      	ldmia	r3!, {r0, r1, r2}
 80185c8:	6020      	str	r0, [r4, #0]
 80185ca:	6061      	str	r1, [r4, #4]
 80185cc:	60a2      	str	r2, [r4, #8]
 80185ce:	881b      	ldrh	r3, [r3, #0]
 80185d0:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,8,10,12,14,16,18");
 80185d2:	687b      	ldr	r3, [r7, #4]
 80185d4:	3304      	adds	r3, #4
 80185d6:	4a27      	ldr	r2, [pc, #156]	; (8018674 <problem_fetch+0x16fb0>)
 80185d8:	461d      	mov	r5, r3
 80185da:	4614      	mov	r4, r2
 80185dc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80185de:	6028      	str	r0, [r5, #0]
 80185e0:	6069      	str	r1, [r5, #4]
 80185e2:	60aa      	str	r2, [r5, #8]
 80185e4:	60eb      	str	r3, [r5, #12]
 80185e6:	8823      	ldrh	r3, [r4, #0]
 80185e8:	78a2      	ldrb	r2, [r4, #2]
 80185ea:	822b      	strh	r3, [r5, #16]
 80185ec:	4613      	mov	r3, r2
 80185ee:	74ab      	strb	r3, [r5, #18]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 80185f0:	687b      	ldr	r3, [r7, #4]
 80185f2:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 80185f6:	4a0e      	ldr	r2, [pc, #56]	; (8018630 <problem_fetch+0x16f6c>)
 80185f8:	461c      	mov	r4, r3
 80185fa:	4613      	mov	r3, r2
 80185fc:	cb07      	ldmia	r3!, {r0, r1, r2}
 80185fe:	6020      	str	r0, [r4, #0]
 8018600:	6061      	str	r1, [r4, #4]
 8018602:	60a2      	str	r2, [r4, #8]
 8018604:	881b      	ldrh	r3, [r3, #0]
 8018606:	81a3      	strh	r3, [r4, #12]
			break;
 8018608:	f003 bf8c 	b.w	801c524 <problem_fetch+0x1ae60>
 801860c:	0802b84c 	.word	0x0802b84c
 8018610:	08023920 	.word	0x08023920
 8018614:	0802b85c 	.word	0x0802b85c
 8018618:	0802b868 	.word	0x0802b868
 801861c:	08023834 	.word	0x08023834
 8018620:	0802b878 	.word	0x0802b878
 8018624:	08023814 	.word	0x08023814
 8018628:	0802b888 	.word	0x0802b888
 801862c:	0802b898 	.word	0x0802b898
 8018630:	080239dc 	.word	0x080239dc
 8018634:	0802b8ac 	.word	0x0802b8ac
 8018638:	08023f4c 	.word	0x08023f4c
 801863c:	0802b8c4 	.word	0x0802b8c4
 8018640:	0802b8d4 	.word	0x0802b8d4
 8018644:	0802b8e8 	.word	0x0802b8e8
 8018648:	0802b8f8 	.word	0x0802b8f8
 801864c:	080239f4 	.word	0x080239f4
 8018650:	0802b8fc 	.word	0x0802b8fc
 8018654:	0802b908 	.word	0x0802b908
 8018658:	0802b918 	.word	0x0802b918
 801865c:	0802b924 	.word	0x0802b924
 8018660:	0802b934 	.word	0x0802b934
 8018664:	080238cc 	.word	0x080238cc
 8018668:	0802b948 	.word	0x0802b948
 801866c:	08023854 	.word	0x08023854
 8018670:	0802b954 	.word	0x0802b954
 8018674:	0802b964 	.word	0x0802b964
		case 684 :
			strcpy(p->name,"AB4");
 8018678:	687b      	ldr	r3, [r7, #4]
 801867a:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801867e:	4ab8      	ldr	r2, [pc, #736]	; (8018960 <problem_fetch+0x1729c>)
 8018680:	6810      	ldr	r0, [r2, #0]
 8018682:	6018      	str	r0, [r3, #0]
			strcpy(p->grade,"6B+");
 8018684:	687b      	ldr	r3, [r7, #4]
 8018686:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801868a:	4ab6      	ldr	r2, [pc, #728]	; (8018964 <problem_fetch+0x172a0>)
 801868c:	6810      	ldr	r0, [r2, #0]
 801868e:	6018      	str	r0, [r3, #0]
			p->moveSize = 9;
 8018690:	687b      	ldr	r3, [r7, #4]
 8018692:	2209      	movs	r2, #9
 8018694:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"C,E,E,F,F,I,I,K,I");
 8018696:	687b      	ldr	r3, [r7, #4]
 8018698:	33a4      	adds	r3, #164	; 0xa4
 801869a:	4ab3      	ldr	r2, [pc, #716]	; (8018968 <problem_fetch+0x172a4>)
 801869c:	461d      	mov	r5, r3
 801869e:	4614      	mov	r4, r2
 80186a0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80186a2:	6028      	str	r0, [r5, #0]
 80186a4:	6069      	str	r1, [r5, #4]
 80186a6:	60aa      	str	r2, [r5, #8]
 80186a8:	60eb      	str	r3, [r5, #12]
 80186aa:	8823      	ldrh	r3, [r4, #0]
 80186ac:	822b      	strh	r3, [r5, #16]
			strcpy(p->moveNumbers,"5,6,8,11,13,14,15,16,18");
 80186ae:	687b      	ldr	r3, [r7, #4]
 80186b0:	3304      	adds	r3, #4
 80186b2:	4aae      	ldr	r2, [pc, #696]	; (801896c <problem_fetch+0x172a8>)
 80186b4:	461d      	mov	r5, r3
 80186b6:	4614      	mov	r4, r2
 80186b8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80186ba:	6028      	str	r0, [r5, #0]
 80186bc:	6069      	str	r1, [r5, #4]
 80186be:	60aa      	str	r2, [r5, #8]
 80186c0:	60eb      	str	r3, [r5, #12]
 80186c2:	cc03      	ldmia	r4!, {r0, r1}
 80186c4:	6128      	str	r0, [r5, #16]
 80186c6:	6169      	str	r1, [r5, #20]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,d,e");
 80186c8:	687b      	ldr	r3, [r7, #4]
 80186ca:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 80186ce:	4aa8      	ldr	r2, [pc, #672]	; (8018970 <problem_fetch+0x172ac>)
 80186d0:	461d      	mov	r5, r3
 80186d2:	4614      	mov	r4, r2
 80186d4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80186d6:	6028      	str	r0, [r5, #0]
 80186d8:	6069      	str	r1, [r5, #4]
 80186da:	60aa      	str	r2, [r5, #8]
 80186dc:	60eb      	str	r3, [r5, #12]
 80186de:	8823      	ldrh	r3, [r4, #0]
 80186e0:	822b      	strh	r3, [r5, #16]
			break;
 80186e2:	f003 bf1f 	b.w	801c524 <problem_fetch+0x1ae60>
		case 685 :
			strcpy(p->name,"LACERQUA");
 80186e6:	687b      	ldr	r3, [r7, #4]
 80186e8:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80186ec:	49a1      	ldr	r1, [pc, #644]	; (8018974 <problem_fetch+0x172b0>)
 80186ee:	461a      	mov	r2, r3
 80186f0:	460b      	mov	r3, r1
 80186f2:	cb03      	ldmia	r3!, {r0, r1}
 80186f4:	6010      	str	r0, [r2, #0]
 80186f6:	6051      	str	r1, [r2, #4]
 80186f8:	781b      	ldrb	r3, [r3, #0]
 80186fa:	7213      	strb	r3, [r2, #8]
			strcpy(p->grade,"7B+");
 80186fc:	687b      	ldr	r3, [r7, #4]
 80186fe:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8018702:	4a9d      	ldr	r2, [pc, #628]	; (8018978 <problem_fetch+0x172b4>)
 8018704:	6810      	ldr	r0, [r2, #0]
 8018706:	6018      	str	r0, [r3, #0]
			p->moveSize = 5;
 8018708:	687b      	ldr	r3, [r7, #4]
 801870a:	2205      	movs	r2, #5
 801870c:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,H,E,G,D");
 801870e:	687b      	ldr	r3, [r7, #4]
 8018710:	33a4      	adds	r3, #164	; 0xa4
 8018712:	499a      	ldr	r1, [pc, #616]	; (801897c <problem_fetch+0x172b8>)
 8018714:	461a      	mov	r2, r3
 8018716:	460b      	mov	r3, r1
 8018718:	cb03      	ldmia	r3!, {r0, r1}
 801871a:	6010      	str	r0, [r2, #0]
 801871c:	6051      	str	r1, [r2, #4]
 801871e:	881b      	ldrh	r3, [r3, #0]
 8018720:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"5,8,9,14,18");
 8018722:	687b      	ldr	r3, [r7, #4]
 8018724:	3304      	adds	r3, #4
 8018726:	4a96      	ldr	r2, [pc, #600]	; (8018980 <problem_fetch+0x172bc>)
 8018728:	461c      	mov	r4, r3
 801872a:	4613      	mov	r3, r2
 801872c:	cb07      	ldmia	r3!, {r0, r1, r2}
 801872e:	6020      	str	r0, [r4, #0]
 8018730:	6061      	str	r1, [r4, #4]
 8018732:	60a2      	str	r2, [r4, #8]
			strcpy(p->startFinish,"s,d,d,d,e");
 8018734:	687b      	ldr	r3, [r7, #4]
 8018736:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 801873a:	4992      	ldr	r1, [pc, #584]	; (8018984 <problem_fetch+0x172c0>)
 801873c:	461a      	mov	r2, r3
 801873e:	460b      	mov	r3, r1
 8018740:	cb03      	ldmia	r3!, {r0, r1}
 8018742:	6010      	str	r0, [r2, #0]
 8018744:	6051      	str	r1, [r2, #4]
 8018746:	881b      	ldrh	r3, [r3, #0]
 8018748:	8113      	strh	r3, [r2, #8]
			break;
 801874a:	f003 beeb 	b.w	801c524 <problem_fetch+0x1ae60>
		case 686 :
			strcpy(p->name,"ZEUS");
 801874e:	687b      	ldr	r3, [r7, #4]
 8018750:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8018754:	4a8c      	ldr	r2, [pc, #560]	; (8018988 <problem_fetch+0x172c4>)
 8018756:	6810      	ldr	r0, [r2, #0]
 8018758:	6018      	str	r0, [r3, #0]
 801875a:	7912      	ldrb	r2, [r2, #4]
 801875c:	711a      	strb	r2, [r3, #4]
			strcpy(p->grade,"6C");
 801875e:	687b      	ldr	r3, [r7, #4]
 8018760:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8018764:	4a89      	ldr	r2, [pc, #548]	; (801898c <problem_fetch+0x172c8>)
 8018766:	8811      	ldrh	r1, [r2, #0]
 8018768:	7892      	ldrb	r2, [r2, #2]
 801876a:	8019      	strh	r1, [r3, #0]
 801876c:	709a      	strb	r2, [r3, #2]
			p->moveSize = 5;
 801876e:	687b      	ldr	r3, [r7, #4]
 8018770:	2205      	movs	r2, #5
 8018772:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"E,H,B,D,D");
 8018774:	687b      	ldr	r3, [r7, #4]
 8018776:	33a4      	adds	r3, #164	; 0xa4
 8018778:	4985      	ldr	r1, [pc, #532]	; (8018990 <problem_fetch+0x172cc>)
 801877a:	461a      	mov	r2, r3
 801877c:	460b      	mov	r3, r1
 801877e:	cb03      	ldmia	r3!, {r0, r1}
 8018780:	6010      	str	r0, [r2, #0]
 8018782:	6051      	str	r1, [r2, #4]
 8018784:	881b      	ldrh	r3, [r3, #0]
 8018786:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"6,10,10,15,18");
 8018788:	687b      	ldr	r3, [r7, #4]
 801878a:	3304      	adds	r3, #4
 801878c:	4a81      	ldr	r2, [pc, #516]	; (8018994 <problem_fetch+0x172d0>)
 801878e:	461c      	mov	r4, r3
 8018790:	4613      	mov	r3, r2
 8018792:	cb07      	ldmia	r3!, {r0, r1, r2}
 8018794:	6020      	str	r0, [r4, #0]
 8018796:	6061      	str	r1, [r4, #4]
 8018798:	60a2      	str	r2, [r4, #8]
 801879a:	881b      	ldrh	r3, [r3, #0]
 801879c:	81a3      	strh	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,e");
 801879e:	687b      	ldr	r3, [r7, #4]
 80187a0:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 80187a4:	4977      	ldr	r1, [pc, #476]	; (8018984 <problem_fetch+0x172c0>)
 80187a6:	461a      	mov	r2, r3
 80187a8:	460b      	mov	r3, r1
 80187aa:	cb03      	ldmia	r3!, {r0, r1}
 80187ac:	6010      	str	r0, [r2, #0]
 80187ae:	6051      	str	r1, [r2, #4]
 80187b0:	881b      	ldrh	r3, [r3, #0]
 80187b2:	8113      	strh	r3, [r2, #8]
			break;
 80187b4:	f003 beb6 	b.w	801c524 <problem_fetch+0x1ae60>
		case 687 :
			strcpy(p->name,"AB3");
 80187b8:	687b      	ldr	r3, [r7, #4]
 80187ba:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80187be:	4a76      	ldr	r2, [pc, #472]	; (8018998 <problem_fetch+0x172d4>)
 80187c0:	6810      	ldr	r0, [r2, #0]
 80187c2:	6018      	str	r0, [r3, #0]
			strcpy(p->grade,"6B+");
 80187c4:	687b      	ldr	r3, [r7, #4]
 80187c6:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80187ca:	4a66      	ldr	r2, [pc, #408]	; (8018964 <problem_fetch+0x172a0>)
 80187cc:	6810      	ldr	r0, [r2, #0]
 80187ce:	6018      	str	r0, [r3, #0]
			p->moveSize = 8;
 80187d0:	687b      	ldr	r3, [r7, #4]
 80187d2:	2208      	movs	r2, #8
 80187d4:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"C,E,E,H,F,G,E,I");
 80187d6:	687b      	ldr	r3, [r7, #4]
 80187d8:	33a4      	adds	r3, #164	; 0xa4
 80187da:	4a70      	ldr	r2, [pc, #448]	; (801899c <problem_fetch+0x172d8>)
 80187dc:	461c      	mov	r4, r3
 80187de:	4615      	mov	r5, r2
 80187e0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80187e2:	6020      	str	r0, [r4, #0]
 80187e4:	6061      	str	r1, [r4, #4]
 80187e6:	60a2      	str	r2, [r4, #8]
 80187e8:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,6,8,10,13,14,16,18");
 80187ea:	687b      	ldr	r3, [r7, #4]
 80187ec:	3304      	adds	r3, #4
 80187ee:	4a6c      	ldr	r2, [pc, #432]	; (80189a0 <problem_fetch+0x172dc>)
 80187f0:	461d      	mov	r5, r3
 80187f2:	4614      	mov	r4, r2
 80187f4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80187f6:	6028      	str	r0, [r5, #0]
 80187f8:	6069      	str	r1, [r5, #4]
 80187fa:	60aa      	str	r2, [r5, #8]
 80187fc:	60eb      	str	r3, [r5, #12]
 80187fe:	6820      	ldr	r0, [r4, #0]
 8018800:	6128      	str	r0, [r5, #16]
 8018802:	7923      	ldrb	r3, [r4, #4]
 8018804:	752b      	strb	r3, [r5, #20]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,e");
 8018806:	687b      	ldr	r3, [r7, #4]
 8018808:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 801880c:	4a65      	ldr	r2, [pc, #404]	; (80189a4 <problem_fetch+0x172e0>)
 801880e:	461c      	mov	r4, r3
 8018810:	4615      	mov	r5, r2
 8018812:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8018814:	6020      	str	r0, [r4, #0]
 8018816:	6061      	str	r1, [r4, #4]
 8018818:	60a2      	str	r2, [r4, #8]
 801881a:	60e3      	str	r3, [r4, #12]
			break;
 801881c:	f003 be82 	b.w	801c524 <problem_fetch+0x1ae60>
		case 688 :
			strcpy(p->name,"SAREVOK");
 8018820:	687b      	ldr	r3, [r7, #4]
 8018822:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8018826:	4960      	ldr	r1, [pc, #384]	; (80189a8 <problem_fetch+0x172e4>)
 8018828:	461a      	mov	r2, r3
 801882a:	460b      	mov	r3, r1
 801882c:	cb03      	ldmia	r3!, {r0, r1}
 801882e:	6010      	str	r0, [r2, #0]
 8018830:	6051      	str	r1, [r2, #4]
			strcpy(p->grade,"7C");
 8018832:	687b      	ldr	r3, [r7, #4]
 8018834:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8018838:	4a5c      	ldr	r2, [pc, #368]	; (80189ac <problem_fetch+0x172e8>)
 801883a:	8811      	ldrh	r1, [r2, #0]
 801883c:	7892      	ldrb	r2, [r2, #2]
 801883e:	8019      	strh	r1, [r3, #0]
 8018840:	709a      	strb	r2, [r3, #2]
			p->moveSize = 5;
 8018842:	687b      	ldr	r3, [r7, #4]
 8018844:	2205      	movs	r2, #5
 8018846:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,C,I,G,I");
 8018848:	687b      	ldr	r3, [r7, #4]
 801884a:	33a4      	adds	r3, #164	; 0xa4
 801884c:	4958      	ldr	r1, [pc, #352]	; (80189b0 <problem_fetch+0x172ec>)
 801884e:	461a      	mov	r2, r3
 8018850:	460b      	mov	r3, r1
 8018852:	cb03      	ldmia	r3!, {r0, r1}
 8018854:	6010      	str	r0, [r2, #0]
 8018856:	6051      	str	r1, [r2, #4]
 8018858:	881b      	ldrh	r3, [r3, #0]
 801885a:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"4,8,9,14,18");
 801885c:	687b      	ldr	r3, [r7, #4]
 801885e:	3304      	adds	r3, #4
 8018860:	4a54      	ldr	r2, [pc, #336]	; (80189b4 <problem_fetch+0x172f0>)
 8018862:	461c      	mov	r4, r3
 8018864:	4613      	mov	r3, r2
 8018866:	cb07      	ldmia	r3!, {r0, r1, r2}
 8018868:	6020      	str	r0, [r4, #0]
 801886a:	6061      	str	r1, [r4, #4]
 801886c:	60a2      	str	r2, [r4, #8]
			strcpy(p->startFinish,"s,d,d,d,e");
 801886e:	687b      	ldr	r3, [r7, #4]
 8018870:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8018874:	4943      	ldr	r1, [pc, #268]	; (8018984 <problem_fetch+0x172c0>)
 8018876:	461a      	mov	r2, r3
 8018878:	460b      	mov	r3, r1
 801887a:	cb03      	ldmia	r3!, {r0, r1}
 801887c:	6010      	str	r0, [r2, #0]
 801887e:	6051      	str	r1, [r2, #4]
 8018880:	881b      	ldrh	r3, [r3, #0]
 8018882:	8113      	strh	r3, [r2, #8]
			break;
 8018884:	f003 be4e 	b.w	801c524 <problem_fetch+0x1ae60>
		case 689 :
			strcpy(p->name,"KEEP IT TIGHT, YO");
 8018888:	687b      	ldr	r3, [r7, #4]
 801888a:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801888e:	4a4a      	ldr	r2, [pc, #296]	; (80189b8 <problem_fetch+0x172f4>)
 8018890:	461d      	mov	r5, r3
 8018892:	4614      	mov	r4, r2
 8018894:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8018896:	6028      	str	r0, [r5, #0]
 8018898:	6069      	str	r1, [r5, #4]
 801889a:	60aa      	str	r2, [r5, #8]
 801889c:	60eb      	str	r3, [r5, #12]
 801889e:	8823      	ldrh	r3, [r4, #0]
 80188a0:	822b      	strh	r3, [r5, #16]
			strcpy(p->grade,"7A+");
 80188a2:	687b      	ldr	r3, [r7, #4]
 80188a4:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80188a8:	4a44      	ldr	r2, [pc, #272]	; (80189bc <problem_fetch+0x172f8>)
 80188aa:	6810      	ldr	r0, [r2, #0]
 80188ac:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 80188ae:	687b      	ldr	r3, [r7, #4]
 80188b0:	2206      	movs	r2, #6
 80188b2:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,E,G,F,G,D");
 80188b4:	687b      	ldr	r3, [r7, #4]
 80188b6:	33a4      	adds	r3, #164	; 0xa4
 80188b8:	4a41      	ldr	r2, [pc, #260]	; (80189c0 <problem_fetch+0x172fc>)
 80188ba:	461c      	mov	r4, r3
 80188bc:	4613      	mov	r3, r2
 80188be:	cb07      	ldmia	r3!, {r0, r1, r2}
 80188c0:	6020      	str	r0, [r4, #0]
 80188c2:	6061      	str	r1, [r4, #4]
 80188c4:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,8,10,13,15,18");
 80188c6:	687b      	ldr	r3, [r7, #4]
 80188c8:	3304      	adds	r3, #4
 80188ca:	4a3e      	ldr	r2, [pc, #248]	; (80189c4 <problem_fetch+0x17300>)
 80188cc:	461c      	mov	r4, r3
 80188ce:	4615      	mov	r5, r2
 80188d0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80188d2:	6020      	str	r0, [r4, #0]
 80188d4:	6061      	str	r1, [r4, #4]
 80188d6:	60a2      	str	r2, [r4, #8]
 80188d8:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 80188da:	687b      	ldr	r3, [r7, #4]
 80188dc:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 80188e0:	4a39      	ldr	r2, [pc, #228]	; (80189c8 <problem_fetch+0x17304>)
 80188e2:	461c      	mov	r4, r3
 80188e4:	4613      	mov	r3, r2
 80188e6:	cb07      	ldmia	r3!, {r0, r1, r2}
 80188e8:	6020      	str	r0, [r4, #0]
 80188ea:	6061      	str	r1, [r4, #4]
 80188ec:	60a2      	str	r2, [r4, #8]
			break;
 80188ee:	f003 be19 	b.w	801c524 <problem_fetch+0x1ae60>
		case 690 :
			strcpy(p->name,"ACG49");
 80188f2:	687b      	ldr	r3, [r7, #4]
 80188f4:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80188f8:	4a34      	ldr	r2, [pc, #208]	; (80189cc <problem_fetch+0x17308>)
 80188fa:	6810      	ldr	r0, [r2, #0]
 80188fc:	6018      	str	r0, [r3, #0]
 80188fe:	8892      	ldrh	r2, [r2, #4]
 8018900:	809a      	strh	r2, [r3, #4]
			strcpy(p->grade,"6C+");
 8018902:	687b      	ldr	r3, [r7, #4]
 8018904:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8018908:	4a31      	ldr	r2, [pc, #196]	; (80189d0 <problem_fetch+0x1730c>)
 801890a:	6810      	ldr	r0, [r2, #0]
 801890c:	6018      	str	r0, [r3, #0]
			p->moveSize = 8;
 801890e:	687b      	ldr	r3, [r7, #4]
 8018910:	2208      	movs	r2, #8
 8018912:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,G,D,E,I,D,B,I");
 8018914:	687b      	ldr	r3, [r7, #4]
 8018916:	33a4      	adds	r3, #164	; 0xa4
 8018918:	4a2e      	ldr	r2, [pc, #184]	; (80189d4 <problem_fetch+0x17310>)
 801891a:	461c      	mov	r4, r3
 801891c:	4615      	mov	r5, r2
 801891e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8018920:	6020      	str	r0, [r4, #0]
 8018922:	6061      	str	r1, [r4, #4]
 8018924:	60a2      	str	r2, [r4, #8]
 8018926:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,6,15,16,10,11,6,18");
 8018928:	687b      	ldr	r3, [r7, #4]
 801892a:	3304      	adds	r3, #4
 801892c:	4a2a      	ldr	r2, [pc, #168]	; (80189d8 <problem_fetch+0x17314>)
 801892e:	461d      	mov	r5, r3
 8018930:	4614      	mov	r4, r2
 8018932:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8018934:	6028      	str	r0, [r5, #0]
 8018936:	6069      	str	r1, [r5, #4]
 8018938:	60aa      	str	r2, [r5, #8]
 801893a:	60eb      	str	r3, [r5, #12]
 801893c:	6820      	ldr	r0, [r4, #0]
 801893e:	6128      	str	r0, [r5, #16]
 8018940:	7923      	ldrb	r3, [r4, #4]
 8018942:	752b      	strb	r3, [r5, #20]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,e");
 8018944:	687b      	ldr	r3, [r7, #4]
 8018946:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 801894a:	4a16      	ldr	r2, [pc, #88]	; (80189a4 <problem_fetch+0x172e0>)
 801894c:	461c      	mov	r4, r3
 801894e:	4615      	mov	r5, r2
 8018950:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8018952:	6020      	str	r0, [r4, #0]
 8018954:	6061      	str	r1, [r4, #4]
 8018956:	60a2      	str	r2, [r4, #8]
 8018958:	60e3      	str	r3, [r4, #12]
			break;
 801895a:	f003 bde3 	b.w	801c524 <problem_fetch+0x1ae60>
 801895e:	bf00      	nop
 8018960:	0802b978 	.word	0x0802b978
 8018964:	08023854 	.word	0x08023854
 8018968:	0802b97c 	.word	0x0802b97c
 801896c:	0802b990 	.word	0x0802b990
 8018970:	08024838 	.word	0x08024838
 8018974:	0802b9a8 	.word	0x0802b9a8
 8018978:	08023990 	.word	0x08023990
 801897c:	0802b9b4 	.word	0x0802b9b4
 8018980:	0802b9c0 	.word	0x0802b9c0
 8018984:	08023d20 	.word	0x08023d20
 8018988:	0802b9cc 	.word	0x0802b9cc
 801898c:	08023920 	.word	0x08023920
 8018990:	0802b9d4 	.word	0x0802b9d4
 8018994:	0802838c 	.word	0x0802838c
 8018998:	0802b9e0 	.word	0x0802b9e0
 801899c:	0802b9e4 	.word	0x0802b9e4
 80189a0:	0802b9f4 	.word	0x0802b9f4
 80189a4:	08023978 	.word	0x08023978
 80189a8:	0802ba0c 	.word	0x0802ba0c
 80189ac:	08024088 	.word	0x08024088
 80189b0:	08027370 	.word	0x08027370
 80189b4:	080295d4 	.word	0x080295d4
 80189b8:	0802ba14 	.word	0x0802ba14
 80189bc:	080239f4 	.word	0x080239f4
 80189c0:	0802ba28 	.word	0x0802ba28
 80189c4:	08027a08 	.word	0x08027a08
 80189c8:	08023bf0 	.word	0x08023bf0
 80189cc:	0802ba34 	.word	0x0802ba34
 80189d0:	080238ec 	.word	0x080238ec
 80189d4:	0802ba3c 	.word	0x0802ba3c
 80189d8:	0802ba4c 	.word	0x0802ba4c
		case 691 :
			strcpy(p->name,"FUNKED JAM");
 80189dc:	687b      	ldr	r3, [r7, #4]
 80189de:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80189e2:	49ae      	ldr	r1, [pc, #696]	; (8018c9c <problem_fetch+0x175d8>)
 80189e4:	461a      	mov	r2, r3
 80189e6:	460b      	mov	r3, r1
 80189e8:	cb03      	ldmia	r3!, {r0, r1}
 80189ea:	6010      	str	r0, [r2, #0]
 80189ec:	6051      	str	r1, [r2, #4]
 80189ee:	8819      	ldrh	r1, [r3, #0]
 80189f0:	789b      	ldrb	r3, [r3, #2]
 80189f2:	8111      	strh	r1, [r2, #8]
 80189f4:	7293      	strb	r3, [r2, #10]
			strcpy(p->grade,"8A");
 80189f6:	687b      	ldr	r3, [r7, #4]
 80189f8:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80189fc:	4aa8      	ldr	r2, [pc, #672]	; (8018ca0 <problem_fetch+0x175dc>)
 80189fe:	8811      	ldrh	r1, [r2, #0]
 8018a00:	7892      	ldrb	r2, [r2, #2]
 8018a02:	8019      	strh	r1, [r3, #0]
 8018a04:	709a      	strb	r2, [r3, #2]
			p->moveSize = 8;
 8018a06:	687b      	ldr	r3, [r7, #4]
 8018a08:	2208      	movs	r2, #8
 8018a0a:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"B,C,D,B,G,H,C,D");
 8018a0c:	687b      	ldr	r3, [r7, #4]
 8018a0e:	33a4      	adds	r3, #164	; 0xa4
 8018a10:	4aa4      	ldr	r2, [pc, #656]	; (8018ca4 <problem_fetch+0x175e0>)
 8018a12:	461c      	mov	r4, r3
 8018a14:	4615      	mov	r5, r2
 8018a16:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8018a18:	6020      	str	r0, [r4, #0]
 8018a1a:	6061      	str	r1, [r4, #4]
 8018a1c:	60a2      	str	r2, [r4, #8]
 8018a1e:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"6,5,7,10,10,13,16,18");
 8018a20:	687b      	ldr	r3, [r7, #4]
 8018a22:	3304      	adds	r3, #4
 8018a24:	4aa0      	ldr	r2, [pc, #640]	; (8018ca8 <problem_fetch+0x175e4>)
 8018a26:	461d      	mov	r5, r3
 8018a28:	4614      	mov	r4, r2
 8018a2a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8018a2c:	6028      	str	r0, [r5, #0]
 8018a2e:	6069      	str	r1, [r5, #4]
 8018a30:	60aa      	str	r2, [r5, #8]
 8018a32:	60eb      	str	r3, [r5, #12]
 8018a34:	6820      	ldr	r0, [r4, #0]
 8018a36:	6128      	str	r0, [r5, #16]
 8018a38:	7923      	ldrb	r3, [r4, #4]
 8018a3a:	752b      	strb	r3, [r5, #20]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,e");
 8018a3c:	687b      	ldr	r3, [r7, #4]
 8018a3e:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8018a42:	4a9a      	ldr	r2, [pc, #616]	; (8018cac <problem_fetch+0x175e8>)
 8018a44:	461c      	mov	r4, r3
 8018a46:	4615      	mov	r5, r2
 8018a48:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8018a4a:	6020      	str	r0, [r4, #0]
 8018a4c:	6061      	str	r1, [r4, #4]
 8018a4e:	60a2      	str	r2, [r4, #8]
 8018a50:	60e3      	str	r3, [r4, #12]
			break;
 8018a52:	f003 bd67 	b.w	801c524 <problem_fetch+0x1ae60>
		case 692 :
			strcpy(p->name,"SNIFFING DOG");
 8018a56:	687b      	ldr	r3, [r7, #4]
 8018a58:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8018a5c:	4a94      	ldr	r2, [pc, #592]	; (8018cb0 <problem_fetch+0x175ec>)
 8018a5e:	461c      	mov	r4, r3
 8018a60:	4613      	mov	r3, r2
 8018a62:	cb07      	ldmia	r3!, {r0, r1, r2}
 8018a64:	6020      	str	r0, [r4, #0]
 8018a66:	6061      	str	r1, [r4, #4]
 8018a68:	60a2      	str	r2, [r4, #8]
 8018a6a:	781b      	ldrb	r3, [r3, #0]
 8018a6c:	7323      	strb	r3, [r4, #12]
			strcpy(p->grade,"6B+");
 8018a6e:	687b      	ldr	r3, [r7, #4]
 8018a70:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8018a74:	4a8f      	ldr	r2, [pc, #572]	; (8018cb4 <problem_fetch+0x175f0>)
 8018a76:	6810      	ldr	r0, [r2, #0]
 8018a78:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 8018a7a:	687b      	ldr	r3, [r7, #4]
 8018a7c:	2207      	movs	r2, #7
 8018a7e:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"H,J,I,J,I,J,I");
 8018a80:	687b      	ldr	r3, [r7, #4]
 8018a82:	33a4      	adds	r3, #164	; 0xa4
 8018a84:	4a8c      	ldr	r2, [pc, #560]	; (8018cb8 <problem_fetch+0x175f4>)
 8018a86:	461c      	mov	r4, r3
 8018a88:	4613      	mov	r3, r2
 8018a8a:	cb07      	ldmia	r3!, {r0, r1, r2}
 8018a8c:	6020      	str	r0, [r4, #0]
 8018a8e:	6061      	str	r1, [r4, #4]
 8018a90:	60a2      	str	r2, [r4, #8]
 8018a92:	881b      	ldrh	r3, [r3, #0]
 8018a94:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,7,10,13,15,16,18");
 8018a96:	687b      	ldr	r3, [r7, #4]
 8018a98:	3304      	adds	r3, #4
 8018a9a:	4a88      	ldr	r2, [pc, #544]	; (8018cbc <problem_fetch+0x175f8>)
 8018a9c:	461d      	mov	r5, r3
 8018a9e:	4614      	mov	r4, r2
 8018aa0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8018aa2:	6028      	str	r0, [r5, #0]
 8018aa4:	6069      	str	r1, [r5, #4]
 8018aa6:	60aa      	str	r2, [r5, #8]
 8018aa8:	60eb      	str	r3, [r5, #12]
 8018aaa:	8823      	ldrh	r3, [r4, #0]
 8018aac:	78a2      	ldrb	r2, [r4, #2]
 8018aae:	822b      	strh	r3, [r5, #16]
 8018ab0:	4613      	mov	r3, r2
 8018ab2:	74ab      	strb	r3, [r5, #18]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 8018ab4:	687b      	ldr	r3, [r7, #4]
 8018ab6:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8018aba:	4a81      	ldr	r2, [pc, #516]	; (8018cc0 <problem_fetch+0x175fc>)
 8018abc:	461c      	mov	r4, r3
 8018abe:	4613      	mov	r3, r2
 8018ac0:	cb07      	ldmia	r3!, {r0, r1, r2}
 8018ac2:	6020      	str	r0, [r4, #0]
 8018ac4:	6061      	str	r1, [r4, #4]
 8018ac6:	60a2      	str	r2, [r4, #8]
 8018ac8:	881b      	ldrh	r3, [r3, #0]
 8018aca:	81a3      	strh	r3, [r4, #12]
			break;
 8018acc:	f003 bd2a 	b.w	801c524 <problem_fetch+0x1ae60>
		case 693 :
			strcpy(p->name,"ACG48");
 8018ad0:	687b      	ldr	r3, [r7, #4]
 8018ad2:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8018ad6:	4a7b      	ldr	r2, [pc, #492]	; (8018cc4 <problem_fetch+0x17600>)
 8018ad8:	6810      	ldr	r0, [r2, #0]
 8018ada:	6018      	str	r0, [r3, #0]
 8018adc:	8892      	ldrh	r2, [r2, #4]
 8018ade:	809a      	strh	r2, [r3, #4]
			strcpy(p->grade,"7A");
 8018ae0:	687b      	ldr	r3, [r7, #4]
 8018ae2:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8018ae6:	4a78      	ldr	r2, [pc, #480]	; (8018cc8 <problem_fetch+0x17604>)
 8018ae8:	8811      	ldrh	r1, [r2, #0]
 8018aea:	7892      	ldrb	r2, [r2, #2]
 8018aec:	8019      	strh	r1, [r3, #0]
 8018aee:	709a      	strb	r2, [r3, #2]
			p->moveSize = 7;
 8018af0:	687b      	ldr	r3, [r7, #4]
 8018af2:	2207      	movs	r2, #7
 8018af4:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,K,H,F,B,D,A");
 8018af6:	687b      	ldr	r3, [r7, #4]
 8018af8:	33a4      	adds	r3, #164	; 0xa4
 8018afa:	4a74      	ldr	r2, [pc, #464]	; (8018ccc <problem_fetch+0x17608>)
 8018afc:	461c      	mov	r4, r3
 8018afe:	4613      	mov	r3, r2
 8018b00:	cb07      	ldmia	r3!, {r0, r1, r2}
 8018b02:	6020      	str	r0, [r4, #0]
 8018b04:	6061      	str	r1, [r4, #4]
 8018b06:	60a2      	str	r2, [r4, #8]
 8018b08:	881b      	ldrh	r3, [r3, #0]
 8018b0a:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,9,10,11,12,15,18");
 8018b0c:	687b      	ldr	r3, [r7, #4]
 8018b0e:	3304      	adds	r3, #4
 8018b10:	4a6f      	ldr	r2, [pc, #444]	; (8018cd0 <problem_fetch+0x1760c>)
 8018b12:	461d      	mov	r5, r3
 8018b14:	4614      	mov	r4, r2
 8018b16:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8018b18:	6028      	str	r0, [r5, #0]
 8018b1a:	6069      	str	r1, [r5, #4]
 8018b1c:	60aa      	str	r2, [r5, #8]
 8018b1e:	60eb      	str	r3, [r5, #12]
 8018b20:	8823      	ldrh	r3, [r4, #0]
 8018b22:	78a2      	ldrb	r2, [r4, #2]
 8018b24:	822b      	strh	r3, [r5, #16]
 8018b26:	4613      	mov	r3, r2
 8018b28:	74ab      	strb	r3, [r5, #18]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 8018b2a:	687b      	ldr	r3, [r7, #4]
 8018b2c:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8018b30:	4a63      	ldr	r2, [pc, #396]	; (8018cc0 <problem_fetch+0x175fc>)
 8018b32:	461c      	mov	r4, r3
 8018b34:	4613      	mov	r3, r2
 8018b36:	cb07      	ldmia	r3!, {r0, r1, r2}
 8018b38:	6020      	str	r0, [r4, #0]
 8018b3a:	6061      	str	r1, [r4, #4]
 8018b3c:	60a2      	str	r2, [r4, #8]
 8018b3e:	881b      	ldrh	r3, [r3, #0]
 8018b40:	81a3      	strh	r3, [r4, #12]
			break;
 8018b42:	f003 bcef 	b.w	801c524 <problem_fetch+0x1ae60>
		case 694 :
			strcpy(p->name,"ROCK LOBSTER");
 8018b46:	687b      	ldr	r3, [r7, #4]
 8018b48:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8018b4c:	4a61      	ldr	r2, [pc, #388]	; (8018cd4 <problem_fetch+0x17610>)
 8018b4e:	461c      	mov	r4, r3
 8018b50:	4613      	mov	r3, r2
 8018b52:	cb07      	ldmia	r3!, {r0, r1, r2}
 8018b54:	6020      	str	r0, [r4, #0]
 8018b56:	6061      	str	r1, [r4, #4]
 8018b58:	60a2      	str	r2, [r4, #8]
 8018b5a:	781b      	ldrb	r3, [r3, #0]
 8018b5c:	7323      	strb	r3, [r4, #12]
			strcpy(p->grade,"6C+");
 8018b5e:	687b      	ldr	r3, [r7, #4]
 8018b60:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8018b64:	4a5c      	ldr	r2, [pc, #368]	; (8018cd8 <problem_fetch+0x17614>)
 8018b66:	6810      	ldr	r0, [r2, #0]
 8018b68:	6018      	str	r0, [r3, #0]
			p->moveSize = 8;
 8018b6a:	687b      	ldr	r3, [r7, #4]
 8018b6c:	2208      	movs	r2, #8
 8018b6e:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"H,E,E,A,E,A,E,I");
 8018b70:	687b      	ldr	r3, [r7, #4]
 8018b72:	33a4      	adds	r3, #164	; 0xa4
 8018b74:	4a59      	ldr	r2, [pc, #356]	; (8018cdc <problem_fetch+0x17618>)
 8018b76:	461c      	mov	r4, r3
 8018b78:	4615      	mov	r5, r2
 8018b7a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8018b7c:	6020      	str	r0, [r4, #0]
 8018b7e:	6061      	str	r1, [r4, #4]
 8018b80:	60a2      	str	r2, [r4, #8]
 8018b82:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,6,8,9,12,14,16,18");
 8018b84:	687b      	ldr	r3, [r7, #4]
 8018b86:	3304      	adds	r3, #4
 8018b88:	4a55      	ldr	r2, [pc, #340]	; (8018ce0 <problem_fetch+0x1761c>)
 8018b8a:	461d      	mov	r5, r3
 8018b8c:	4614      	mov	r4, r2
 8018b8e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8018b90:	6028      	str	r0, [r5, #0]
 8018b92:	6069      	str	r1, [r5, #4]
 8018b94:	60aa      	str	r2, [r5, #8]
 8018b96:	60eb      	str	r3, [r5, #12]
 8018b98:	6820      	ldr	r0, [r4, #0]
 8018b9a:	6128      	str	r0, [r5, #16]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,e");
 8018b9c:	687b      	ldr	r3, [r7, #4]
 8018b9e:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8018ba2:	4a42      	ldr	r2, [pc, #264]	; (8018cac <problem_fetch+0x175e8>)
 8018ba4:	461c      	mov	r4, r3
 8018ba6:	4615      	mov	r5, r2
 8018ba8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8018baa:	6020      	str	r0, [r4, #0]
 8018bac:	6061      	str	r1, [r4, #4]
 8018bae:	60a2      	str	r2, [r4, #8]
 8018bb0:	60e3      	str	r3, [r4, #12]
			break;
 8018bb2:	f003 bcb7 	b.w	801c524 <problem_fetch+0x1ae60>
		case 695 :
			strcpy(p->name,"UNKNOWN");
 8018bb6:	687b      	ldr	r3, [r7, #4]
 8018bb8:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8018bbc:	4949      	ldr	r1, [pc, #292]	; (8018ce4 <problem_fetch+0x17620>)
 8018bbe:	461a      	mov	r2, r3
 8018bc0:	460b      	mov	r3, r1
 8018bc2:	cb03      	ldmia	r3!, {r0, r1}
 8018bc4:	6010      	str	r0, [r2, #0]
 8018bc6:	6051      	str	r1, [r2, #4]
			strcpy(p->grade,"6C+");
 8018bc8:	687b      	ldr	r3, [r7, #4]
 8018bca:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8018bce:	4a42      	ldr	r2, [pc, #264]	; (8018cd8 <problem_fetch+0x17614>)
 8018bd0:	6810      	ldr	r0, [r2, #0]
 8018bd2:	6018      	str	r0, [r3, #0]
			p->moveSize = 8;
 8018bd4:	687b      	ldr	r3, [r7, #4]
 8018bd6:	2208      	movs	r2, #8
 8018bd8:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,D,H,J,E,I,D,I");
 8018bda:	687b      	ldr	r3, [r7, #4]
 8018bdc:	33a4      	adds	r3, #164	; 0xa4
 8018bde:	4a42      	ldr	r2, [pc, #264]	; (8018ce8 <problem_fetch+0x17624>)
 8018be0:	461c      	mov	r4, r3
 8018be2:	4615      	mov	r5, r2
 8018be4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8018be6:	6020      	str	r0, [r4, #0]
 8018be8:	6061      	str	r1, [r4, #4]
 8018bea:	60a2      	str	r2, [r4, #8]
 8018bec:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,7,8,7,12,15,18,18");
 8018bee:	687b      	ldr	r3, [r7, #4]
 8018bf0:	3304      	adds	r3, #4
 8018bf2:	4a3e      	ldr	r2, [pc, #248]	; (8018cec <problem_fetch+0x17628>)
 8018bf4:	461d      	mov	r5, r3
 8018bf6:	4614      	mov	r4, r2
 8018bf8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8018bfa:	6028      	str	r0, [r5, #0]
 8018bfc:	6069      	str	r1, [r5, #4]
 8018bfe:	60aa      	str	r2, [r5, #8]
 8018c00:	60eb      	str	r3, [r5, #12]
 8018c02:	6820      	ldr	r0, [r4, #0]
 8018c04:	6128      	str	r0, [r5, #16]
			strcpy(p->startFinish,"s,d,d,d,d,d,e,e");
 8018c06:	687b      	ldr	r3, [r7, #4]
 8018c08:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8018c0c:	4a38      	ldr	r2, [pc, #224]	; (8018cf0 <problem_fetch+0x1762c>)
 8018c0e:	461c      	mov	r4, r3
 8018c10:	4615      	mov	r5, r2
 8018c12:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8018c14:	6020      	str	r0, [r4, #0]
 8018c16:	6061      	str	r1, [r4, #4]
 8018c18:	60a2      	str	r2, [r4, #8]
 8018c1a:	60e3      	str	r3, [r4, #12]
			break;
 8018c1c:	f003 bc82 	b.w	801c524 <problem_fetch+0x1ae60>
		case 696 :
			strcpy(p->name,"ACG46");
 8018c20:	687b      	ldr	r3, [r7, #4]
 8018c22:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8018c26:	4a33      	ldr	r2, [pc, #204]	; (8018cf4 <problem_fetch+0x17630>)
 8018c28:	6810      	ldr	r0, [r2, #0]
 8018c2a:	6018      	str	r0, [r3, #0]
 8018c2c:	8892      	ldrh	r2, [r2, #4]
 8018c2e:	809a      	strh	r2, [r3, #4]
			strcpy(p->grade,"6C");
 8018c30:	687b      	ldr	r3, [r7, #4]
 8018c32:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8018c36:	4a30      	ldr	r2, [pc, #192]	; (8018cf8 <problem_fetch+0x17634>)
 8018c38:	8811      	ldrh	r1, [r2, #0]
 8018c3a:	7892      	ldrb	r2, [r2, #2]
 8018c3c:	8019      	strh	r1, [r3, #0]
 8018c3e:	709a      	strb	r2, [r3, #2]
			p->moveSize = 10;
 8018c40:	687b      	ldr	r3, [r7, #4]
 8018c42:	220a      	movs	r2, #10
 8018c44:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"C,B,A,B,G,F,I,E,I,D");
 8018c46:	687b      	ldr	r3, [r7, #4]
 8018c48:	33a4      	adds	r3, #164	; 0xa4
 8018c4a:	4a2c      	ldr	r2, [pc, #176]	; (8018cfc <problem_fetch+0x17638>)
 8018c4c:	461d      	mov	r5, r3
 8018c4e:	4614      	mov	r4, r2
 8018c50:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8018c52:	6028      	str	r0, [r5, #0]
 8018c54:	6069      	str	r1, [r5, #4]
 8018c56:	60aa      	str	r2, [r5, #8]
 8018c58:	60eb      	str	r3, [r5, #12]
 8018c5a:	6820      	ldr	r0, [r4, #0]
 8018c5c:	6128      	str	r0, [r5, #16]
			strcpy(p->moveNumbers,"5,6,9,10,10,13,14,16,7,18");
 8018c5e:	687b      	ldr	r3, [r7, #4]
 8018c60:	3304      	adds	r3, #4
 8018c62:	4a27      	ldr	r2, [pc, #156]	; (8018d00 <problem_fetch+0x1763c>)
 8018c64:	461d      	mov	r5, r3
 8018c66:	4614      	mov	r4, r2
 8018c68:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8018c6a:	6028      	str	r0, [r5, #0]
 8018c6c:	6069      	str	r1, [r5, #4]
 8018c6e:	60aa      	str	r2, [r5, #8]
 8018c70:	60eb      	str	r3, [r5, #12]
 8018c72:	cc03      	ldmia	r4!, {r0, r1}
 8018c74:	6128      	str	r0, [r5, #16]
 8018c76:	6169      	str	r1, [r5, #20]
 8018c78:	8823      	ldrh	r3, [r4, #0]
 8018c7a:	832b      	strh	r3, [r5, #24]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,d,d,e");
 8018c7c:	687b      	ldr	r3, [r7, #4]
 8018c7e:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8018c82:	4a20      	ldr	r2, [pc, #128]	; (8018d04 <problem_fetch+0x17640>)
 8018c84:	461d      	mov	r5, r3
 8018c86:	4614      	mov	r4, r2
 8018c88:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8018c8a:	6028      	str	r0, [r5, #0]
 8018c8c:	6069      	str	r1, [r5, #4]
 8018c8e:	60aa      	str	r2, [r5, #8]
 8018c90:	60eb      	str	r3, [r5, #12]
 8018c92:	6820      	ldr	r0, [r4, #0]
 8018c94:	6128      	str	r0, [r5, #16]
			break;
 8018c96:	f003 bc45 	b.w	801c524 <problem_fetch+0x1ae60>
 8018c9a:	bf00      	nop
 8018c9c:	0802ba64 	.word	0x0802ba64
 8018ca0:	08025bb8 	.word	0x08025bb8
 8018ca4:	0802ba70 	.word	0x0802ba70
 8018ca8:	0802ba80 	.word	0x0802ba80
 8018cac:	08023978 	.word	0x08023978
 8018cb0:	0802ba98 	.word	0x0802ba98
 8018cb4:	08023854 	.word	0x08023854
 8018cb8:	0802baa8 	.word	0x0802baa8
 8018cbc:	0802bab8 	.word	0x0802bab8
 8018cc0:	080239dc 	.word	0x080239dc
 8018cc4:	0802bacc 	.word	0x0802bacc
 8018cc8:	08023814 	.word	0x08023814
 8018ccc:	0802bad4 	.word	0x0802bad4
 8018cd0:	0802bae4 	.word	0x0802bae4
 8018cd4:	0802baf8 	.word	0x0802baf8
 8018cd8:	080238ec 	.word	0x080238ec
 8018cdc:	0802bb08 	.word	0x0802bb08
 8018ce0:	0802bb18 	.word	0x0802bb18
 8018ce4:	0802bb2c 	.word	0x0802bb2c
 8018ce8:	0802bb34 	.word	0x0802bb34
 8018cec:	0802bb44 	.word	0x0802bb44
 8018cf0:	0802bb58 	.word	0x0802bb58
 8018cf4:	0802bb68 	.word	0x0802bb68
 8018cf8:	08023920 	.word	0x08023920
 8018cfc:	0802bb70 	.word	0x0802bb70
 8018d00:	0802bb84 	.word	0x0802bb84
 8018d04:	080240fc 	.word	0x080240fc
		case 697 :
			strcpy(p->name,"GS VR #1");
 8018d08:	687b      	ldr	r3, [r7, #4]
 8018d0a:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8018d0e:	49bf      	ldr	r1, [pc, #764]	; (801900c <problem_fetch+0x17948>)
 8018d10:	461a      	mov	r2, r3
 8018d12:	460b      	mov	r3, r1
 8018d14:	cb03      	ldmia	r3!, {r0, r1}
 8018d16:	6010      	str	r0, [r2, #0]
 8018d18:	6051      	str	r1, [r2, #4]
 8018d1a:	781b      	ldrb	r3, [r3, #0]
 8018d1c:	7213      	strb	r3, [r2, #8]
			strcpy(p->grade,"6B+");
 8018d1e:	687b      	ldr	r3, [r7, #4]
 8018d20:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8018d24:	4aba      	ldr	r2, [pc, #744]	; (8019010 <problem_fetch+0x1794c>)
 8018d26:	6810      	ldr	r0, [r2, #0]
 8018d28:	6018      	str	r0, [r3, #0]
			p->moveSize = 8;
 8018d2a:	687b      	ldr	r3, [r7, #4]
 8018d2c:	2208      	movs	r2, #8
 8018d2e:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,E,E,B,E,C,E,D");
 8018d30:	687b      	ldr	r3, [r7, #4]
 8018d32:	33a4      	adds	r3, #164	; 0xa4
 8018d34:	4ab7      	ldr	r2, [pc, #732]	; (8019014 <problem_fetch+0x17950>)
 8018d36:	461c      	mov	r4, r3
 8018d38:	4615      	mov	r5, r2
 8018d3a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8018d3c:	6020      	str	r0, [r4, #0]
 8018d3e:	6061      	str	r1, [r4, #4]
 8018d40:	60a2      	str	r2, [r4, #8]
 8018d42:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,6,8,10,12,13,16,18");
 8018d44:	687b      	ldr	r3, [r7, #4]
 8018d46:	3304      	adds	r3, #4
 8018d48:	4ab3      	ldr	r2, [pc, #716]	; (8019018 <problem_fetch+0x17954>)
 8018d4a:	461d      	mov	r5, r3
 8018d4c:	4614      	mov	r4, r2
 8018d4e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8018d50:	6028      	str	r0, [r5, #0]
 8018d52:	6069      	str	r1, [r5, #4]
 8018d54:	60aa      	str	r2, [r5, #8]
 8018d56:	60eb      	str	r3, [r5, #12]
 8018d58:	6820      	ldr	r0, [r4, #0]
 8018d5a:	6128      	str	r0, [r5, #16]
 8018d5c:	7923      	ldrb	r3, [r4, #4]
 8018d5e:	752b      	strb	r3, [r5, #20]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,e");
 8018d60:	687b      	ldr	r3, [r7, #4]
 8018d62:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8018d66:	4aad      	ldr	r2, [pc, #692]	; (801901c <problem_fetch+0x17958>)
 8018d68:	461c      	mov	r4, r3
 8018d6a:	4615      	mov	r5, r2
 8018d6c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8018d6e:	6020      	str	r0, [r4, #0]
 8018d70:	6061      	str	r1, [r4, #4]
 8018d72:	60a2      	str	r2, [r4, #8]
 8018d74:	60e3      	str	r3, [r4, #12]
			break;
 8018d76:	f003 bbd5 	b.w	801c524 <problem_fetch+0x1ae60>
		case 698 :
			strcpy(p->name,"COLPA DEL NONNO");
 8018d7a:	687b      	ldr	r3, [r7, #4]
 8018d7c:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8018d80:	4aa7      	ldr	r2, [pc, #668]	; (8019020 <problem_fetch+0x1795c>)
 8018d82:	461c      	mov	r4, r3
 8018d84:	4615      	mov	r5, r2
 8018d86:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8018d88:	6020      	str	r0, [r4, #0]
 8018d8a:	6061      	str	r1, [r4, #4]
 8018d8c:	60a2      	str	r2, [r4, #8]
 8018d8e:	60e3      	str	r3, [r4, #12]
			strcpy(p->grade,"6B+");
 8018d90:	687b      	ldr	r3, [r7, #4]
 8018d92:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8018d96:	4a9e      	ldr	r2, [pc, #632]	; (8019010 <problem_fetch+0x1794c>)
 8018d98:	6810      	ldr	r0, [r2, #0]
 8018d9a:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 8018d9c:	687b      	ldr	r3, [r7, #4]
 8018d9e:	2207      	movs	r2, #7
 8018da0:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"B,C,E,B,E,B,D");
 8018da2:	687b      	ldr	r3, [r7, #4]
 8018da4:	33a4      	adds	r3, #164	; 0xa4
 8018da6:	4a9f      	ldr	r2, [pc, #636]	; (8019024 <problem_fetch+0x17960>)
 8018da8:	461c      	mov	r4, r3
 8018daa:	4613      	mov	r3, r2
 8018dac:	cb07      	ldmia	r3!, {r0, r1, r2}
 8018dae:	6020      	str	r0, [r4, #0]
 8018db0:	6061      	str	r1, [r4, #4]
 8018db2:	60a2      	str	r2, [r4, #8]
 8018db4:	881b      	ldrh	r3, [r3, #0]
 8018db6:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"6,5,9,10,14,15,18");
 8018db8:	687b      	ldr	r3, [r7, #4]
 8018dba:	3304      	adds	r3, #4
 8018dbc:	4a9a      	ldr	r2, [pc, #616]	; (8019028 <problem_fetch+0x17964>)
 8018dbe:	461d      	mov	r5, r3
 8018dc0:	4614      	mov	r4, r2
 8018dc2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8018dc4:	6028      	str	r0, [r5, #0]
 8018dc6:	6069      	str	r1, [r5, #4]
 8018dc8:	60aa      	str	r2, [r5, #8]
 8018dca:	60eb      	str	r3, [r5, #12]
 8018dcc:	8823      	ldrh	r3, [r4, #0]
 8018dce:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,s,d,d,d,d,e");
 8018dd0:	687b      	ldr	r3, [r7, #4]
 8018dd2:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8018dd6:	4a95      	ldr	r2, [pc, #596]	; (801902c <problem_fetch+0x17968>)
 8018dd8:	461c      	mov	r4, r3
 8018dda:	4613      	mov	r3, r2
 8018ddc:	cb07      	ldmia	r3!, {r0, r1, r2}
 8018dde:	6020      	str	r0, [r4, #0]
 8018de0:	6061      	str	r1, [r4, #4]
 8018de2:	60a2      	str	r2, [r4, #8]
 8018de4:	881b      	ldrh	r3, [r3, #0]
 8018de6:	81a3      	strh	r3, [r4, #12]
			break;
 8018de8:	f003 bb9c 	b.w	801c524 <problem_fetch+0x1ae60>
		case 699 :
			strcpy(p->name,"LIP GRIP");
 8018dec:	687b      	ldr	r3, [r7, #4]
 8018dee:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8018df2:	498f      	ldr	r1, [pc, #572]	; (8019030 <problem_fetch+0x1796c>)
 8018df4:	461a      	mov	r2, r3
 8018df6:	460b      	mov	r3, r1
 8018df8:	cb03      	ldmia	r3!, {r0, r1}
 8018dfa:	6010      	str	r0, [r2, #0]
 8018dfc:	6051      	str	r1, [r2, #4]
 8018dfe:	781b      	ldrb	r3, [r3, #0]
 8018e00:	7213      	strb	r3, [r2, #8]
			strcpy(p->grade,"7A+");
 8018e02:	687b      	ldr	r3, [r7, #4]
 8018e04:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8018e08:	4a8a      	ldr	r2, [pc, #552]	; (8019034 <problem_fetch+0x17970>)
 8018e0a:	6810      	ldr	r0, [r2, #0]
 8018e0c:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 8018e0e:	687b      	ldr	r3, [r7, #4]
 8018e10:	2206      	movs	r2, #6
 8018e12:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,G,K,H,K,I");
 8018e14:	687b      	ldr	r3, [r7, #4]
 8018e16:	33a4      	adds	r3, #164	; 0xa4
 8018e18:	4a87      	ldr	r2, [pc, #540]	; (8019038 <problem_fetch+0x17974>)
 8018e1a:	461c      	mov	r4, r3
 8018e1c:	4613      	mov	r3, r2
 8018e1e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8018e20:	6020      	str	r0, [r4, #0]
 8018e22:	6061      	str	r1, [r4, #4]
 8018e24:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,4,9,13,14,18");
 8018e26:	687b      	ldr	r3, [r7, #4]
 8018e28:	3304      	adds	r3, #4
 8018e2a:	4a84      	ldr	r2, [pc, #528]	; (801903c <problem_fetch+0x17978>)
 8018e2c:	461c      	mov	r4, r3
 8018e2e:	4613      	mov	r3, r2
 8018e30:	cb07      	ldmia	r3!, {r0, r1, r2}
 8018e32:	6020      	str	r0, [r4, #0]
 8018e34:	6061      	str	r1, [r4, #4]
 8018e36:	60a2      	str	r2, [r4, #8]
 8018e38:	881a      	ldrh	r2, [r3, #0]
 8018e3a:	789b      	ldrb	r3, [r3, #2]
 8018e3c:	81a2      	strh	r2, [r4, #12]
 8018e3e:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 8018e40:	687b      	ldr	r3, [r7, #4]
 8018e42:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8018e46:	4a7e      	ldr	r2, [pc, #504]	; (8019040 <problem_fetch+0x1797c>)
 8018e48:	461c      	mov	r4, r3
 8018e4a:	4613      	mov	r3, r2
 8018e4c:	cb07      	ldmia	r3!, {r0, r1, r2}
 8018e4e:	6020      	str	r0, [r4, #0]
 8018e50:	6061      	str	r1, [r4, #4]
 8018e52:	60a2      	str	r2, [r4, #8]
			break;
 8018e54:	f003 bb66 	b.w	801c524 <problem_fetch+0x1ae60>
		case 700 :
			strcpy(p->name,"ACG43");
 8018e58:	687b      	ldr	r3, [r7, #4]
 8018e5a:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8018e5e:	4a79      	ldr	r2, [pc, #484]	; (8019044 <problem_fetch+0x17980>)
 8018e60:	6810      	ldr	r0, [r2, #0]
 8018e62:	6018      	str	r0, [r3, #0]
 8018e64:	8892      	ldrh	r2, [r2, #4]
 8018e66:	809a      	strh	r2, [r3, #4]
			strcpy(p->grade,"6C+");
 8018e68:	687b      	ldr	r3, [r7, #4]
 8018e6a:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8018e6e:	4a76      	ldr	r2, [pc, #472]	; (8019048 <problem_fetch+0x17984>)
 8018e70:	6810      	ldr	r0, [r2, #0]
 8018e72:	6018      	str	r0, [r3, #0]
			p->moveSize = 8;
 8018e74:	687b      	ldr	r3, [r7, #4]
 8018e76:	2208      	movs	r2, #8
 8018e78:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,I,D,E,A,A,B,D");
 8018e7a:	687b      	ldr	r3, [r7, #4]
 8018e7c:	33a4      	adds	r3, #164	; 0xa4
 8018e7e:	4a73      	ldr	r2, [pc, #460]	; (801904c <problem_fetch+0x17988>)
 8018e80:	461c      	mov	r4, r3
 8018e82:	4615      	mov	r5, r2
 8018e84:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8018e86:	6020      	str	r0, [r4, #0]
 8018e88:	6061      	str	r1, [r4, #4]
 8018e8a:	60a2      	str	r2, [r4, #8]
 8018e8c:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,10,11,14,14,9,6,18");
 8018e8e:	687b      	ldr	r3, [r7, #4]
 8018e90:	3304      	adds	r3, #4
 8018e92:	4a6f      	ldr	r2, [pc, #444]	; (8019050 <problem_fetch+0x1798c>)
 8018e94:	461d      	mov	r5, r3
 8018e96:	4614      	mov	r4, r2
 8018e98:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8018e9a:	6028      	str	r0, [r5, #0]
 8018e9c:	6069      	str	r1, [r5, #4]
 8018e9e:	60aa      	str	r2, [r5, #8]
 8018ea0:	60eb      	str	r3, [r5, #12]
 8018ea2:	6820      	ldr	r0, [r4, #0]
 8018ea4:	6128      	str	r0, [r5, #16]
 8018ea6:	7923      	ldrb	r3, [r4, #4]
 8018ea8:	752b      	strb	r3, [r5, #20]
			strcpy(p->startFinish,"s,d,d,d,d,d,d,e");
 8018eaa:	687b      	ldr	r3, [r7, #4]
 8018eac:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8018eb0:	4a68      	ldr	r2, [pc, #416]	; (8019054 <problem_fetch+0x17990>)
 8018eb2:	461c      	mov	r4, r3
 8018eb4:	4615      	mov	r5, r2
 8018eb6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8018eb8:	6020      	str	r0, [r4, #0]
 8018eba:	6061      	str	r1, [r4, #4]
 8018ebc:	60a2      	str	r2, [r4, #8]
 8018ebe:	60e3      	str	r3, [r4, #12]
			break;
 8018ec0:	f003 bb30 	b.w	801c524 <problem_fetch+0x1ae60>
		case 701 :
			strcpy(p->name,"AB1");
 8018ec4:	687b      	ldr	r3, [r7, #4]
 8018ec6:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8018eca:	4a63      	ldr	r2, [pc, #396]	; (8019058 <problem_fetch+0x17994>)
 8018ecc:	6810      	ldr	r0, [r2, #0]
 8018ece:	6018      	str	r0, [r3, #0]
			strcpy(p->grade,"6B+");
 8018ed0:	687b      	ldr	r3, [r7, #4]
 8018ed2:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8018ed6:	4a4e      	ldr	r2, [pc, #312]	; (8019010 <problem_fetch+0x1794c>)
 8018ed8:	6810      	ldr	r0, [r2, #0]
 8018eda:	6018      	str	r0, [r3, #0]
			p->moveSize = 8;
 8018edc:	687b      	ldr	r3, [r7, #4]
 8018ede:	2208      	movs	r2, #8
 8018ee0:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,E,E,A,E,A,D,A");
 8018ee2:	687b      	ldr	r3, [r7, #4]
 8018ee4:	33a4      	adds	r3, #164	; 0xa4
 8018ee6:	4a5d      	ldr	r2, [pc, #372]	; (801905c <problem_fetch+0x17998>)
 8018ee8:	461c      	mov	r4, r3
 8018eea:	4615      	mov	r5, r2
 8018eec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8018eee:	6020      	str	r0, [r4, #0]
 8018ef0:	6061      	str	r1, [r4, #4]
 8018ef2:	60a2      	str	r2, [r4, #8]
 8018ef4:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,6,8,9,12,14,15,18");
 8018ef6:	687b      	ldr	r3, [r7, #4]
 8018ef8:	3304      	adds	r3, #4
 8018efa:	4a59      	ldr	r2, [pc, #356]	; (8019060 <problem_fetch+0x1799c>)
 8018efc:	461d      	mov	r5, r3
 8018efe:	4614      	mov	r4, r2
 8018f00:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8018f02:	6028      	str	r0, [r5, #0]
 8018f04:	6069      	str	r1, [r5, #4]
 8018f06:	60aa      	str	r2, [r5, #8]
 8018f08:	60eb      	str	r3, [r5, #12]
 8018f0a:	6820      	ldr	r0, [r4, #0]
 8018f0c:	6128      	str	r0, [r5, #16]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,e");
 8018f0e:	687b      	ldr	r3, [r7, #4]
 8018f10:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8018f14:	4a41      	ldr	r2, [pc, #260]	; (801901c <problem_fetch+0x17958>)
 8018f16:	461c      	mov	r4, r3
 8018f18:	4615      	mov	r5, r2
 8018f1a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8018f1c:	6020      	str	r0, [r4, #0]
 8018f1e:	6061      	str	r1, [r4, #4]
 8018f20:	60a2      	str	r2, [r4, #8]
 8018f22:	60e3      	str	r3, [r4, #12]
			break;
 8018f24:	f003 bafe 	b.w	801c524 <problem_fetch+0x1ae60>
		case 702 :
			strcpy(p->name,"CAROLYN");
 8018f28:	687b      	ldr	r3, [r7, #4]
 8018f2a:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8018f2e:	494d      	ldr	r1, [pc, #308]	; (8019064 <problem_fetch+0x179a0>)
 8018f30:	461a      	mov	r2, r3
 8018f32:	460b      	mov	r3, r1
 8018f34:	cb03      	ldmia	r3!, {r0, r1}
 8018f36:	6010      	str	r0, [r2, #0]
 8018f38:	6051      	str	r1, [r2, #4]
			strcpy(p->grade,"6B+");
 8018f3a:	687b      	ldr	r3, [r7, #4]
 8018f3c:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8018f40:	4a33      	ldr	r2, [pc, #204]	; (8019010 <problem_fetch+0x1794c>)
 8018f42:	6810      	ldr	r0, [r2, #0]
 8018f44:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 8018f46:	687b      	ldr	r3, [r7, #4]
 8018f48:	2207      	movs	r2, #7
 8018f4a:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,J,H,C,I,G,I");
 8018f4c:	687b      	ldr	r3, [r7, #4]
 8018f4e:	33a4      	adds	r3, #164	; 0xa4
 8018f50:	4a45      	ldr	r2, [pc, #276]	; (8019068 <problem_fetch+0x179a4>)
 8018f52:	461c      	mov	r4, r3
 8018f54:	4613      	mov	r3, r2
 8018f56:	cb07      	ldmia	r3!, {r0, r1, r2}
 8018f58:	6020      	str	r0, [r4, #0]
 8018f5a:	6061      	str	r1, [r4, #4]
 8018f5c:	60a2      	str	r2, [r4, #8]
 8018f5e:	881b      	ldrh	r3, [r3, #0]
 8018f60:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,7,10,13,14,17,18");
 8018f62:	687b      	ldr	r3, [r7, #4]
 8018f64:	3304      	adds	r3, #4
 8018f66:	4a41      	ldr	r2, [pc, #260]	; (801906c <problem_fetch+0x179a8>)
 8018f68:	461d      	mov	r5, r3
 8018f6a:	4614      	mov	r4, r2
 8018f6c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8018f6e:	6028      	str	r0, [r5, #0]
 8018f70:	6069      	str	r1, [r5, #4]
 8018f72:	60aa      	str	r2, [r5, #8]
 8018f74:	60eb      	str	r3, [r5, #12]
 8018f76:	8823      	ldrh	r3, [r4, #0]
 8018f78:	78a2      	ldrb	r2, [r4, #2]
 8018f7a:	822b      	strh	r3, [r5, #16]
 8018f7c:	4613      	mov	r3, r2
 8018f7e:	74ab      	strb	r3, [r5, #18]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 8018f80:	687b      	ldr	r3, [r7, #4]
 8018f82:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8018f86:	4a3a      	ldr	r2, [pc, #232]	; (8019070 <problem_fetch+0x179ac>)
 8018f88:	461c      	mov	r4, r3
 8018f8a:	4613      	mov	r3, r2
 8018f8c:	cb07      	ldmia	r3!, {r0, r1, r2}
 8018f8e:	6020      	str	r0, [r4, #0]
 8018f90:	6061      	str	r1, [r4, #4]
 8018f92:	60a2      	str	r2, [r4, #8]
 8018f94:	881b      	ldrh	r3, [r3, #0]
 8018f96:	81a3      	strh	r3, [r4, #12]
			break;
 8018f98:	f003 bac4 	b.w	801c524 <problem_fetch+0x1ae60>
		case 703 :
			strcpy(p->name,"ACG37");
 8018f9c:	687b      	ldr	r3, [r7, #4]
 8018f9e:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8018fa2:	4a34      	ldr	r2, [pc, #208]	; (8019074 <problem_fetch+0x179b0>)
 8018fa4:	6810      	ldr	r0, [r2, #0]
 8018fa6:	6018      	str	r0, [r3, #0]
 8018fa8:	8892      	ldrh	r2, [r2, #4]
 8018faa:	809a      	strh	r2, [r3, #4]
			strcpy(p->grade,"7A");
 8018fac:	687b      	ldr	r3, [r7, #4]
 8018fae:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8018fb2:	4a31      	ldr	r2, [pc, #196]	; (8019078 <problem_fetch+0x179b4>)
 8018fb4:	8811      	ldrh	r1, [r2, #0]
 8018fb6:	7892      	ldrb	r2, [r2, #2]
 8018fb8:	8019      	strh	r1, [r3, #0]
 8018fba:	709a      	strb	r2, [r3, #2]
			p->moveSize = 8;
 8018fbc:	687b      	ldr	r3, [r7, #4]
 8018fbe:	2208      	movs	r2, #8
 8018fc0:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"H,J,I,J,G,C,C,A");
 8018fc2:	687b      	ldr	r3, [r7, #4]
 8018fc4:	33a4      	adds	r3, #164	; 0xa4
 8018fc6:	4a2d      	ldr	r2, [pc, #180]	; (801907c <problem_fetch+0x179b8>)
 8018fc8:	461c      	mov	r4, r3
 8018fca:	4615      	mov	r5, r2
 8018fcc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8018fce:	6020      	str	r0, [r4, #0]
 8018fd0:	6061      	str	r1, [r4, #4]
 8018fd2:	60a2      	str	r2, [r4, #8]
 8018fd4:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,7,10,13,14,16,13,18");
 8018fd6:	687b      	ldr	r3, [r7, #4]
 8018fd8:	3304      	adds	r3, #4
 8018fda:	4a29      	ldr	r2, [pc, #164]	; (8019080 <problem_fetch+0x179bc>)
 8018fdc:	461d      	mov	r5, r3
 8018fde:	4614      	mov	r4, r2
 8018fe0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8018fe2:	6028      	str	r0, [r5, #0]
 8018fe4:	6069      	str	r1, [r5, #4]
 8018fe6:	60aa      	str	r2, [r5, #8]
 8018fe8:	60eb      	str	r3, [r5, #12]
 8018fea:	6820      	ldr	r0, [r4, #0]
 8018fec:	6128      	str	r0, [r5, #16]
 8018fee:	88a3      	ldrh	r3, [r4, #4]
 8018ff0:	82ab      	strh	r3, [r5, #20]
			strcpy(p->startFinish,"s,d,d,d,d,d,d,e");
 8018ff2:	687b      	ldr	r3, [r7, #4]
 8018ff4:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8018ff8:	4a16      	ldr	r2, [pc, #88]	; (8019054 <problem_fetch+0x17990>)
 8018ffa:	461c      	mov	r4, r3
 8018ffc:	4615      	mov	r5, r2
 8018ffe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8019000:	6020      	str	r0, [r4, #0]
 8019002:	6061      	str	r1, [r4, #4]
 8019004:	60a2      	str	r2, [r4, #8]
 8019006:	60e3      	str	r3, [r4, #12]
			break;
 8019008:	f003 ba8c 	b.w	801c524 <problem_fetch+0x1ae60>
 801900c:	0802bba0 	.word	0x0802bba0
 8019010:	08023854 	.word	0x08023854
 8019014:	0802bbac 	.word	0x0802bbac
 8019018:	0802bbbc 	.word	0x0802bbbc
 801901c:	08023978 	.word	0x08023978
 8019020:	0802bbd4 	.word	0x0802bbd4
 8019024:	08029b48 	.word	0x08029b48
 8019028:	0802bbe4 	.word	0x0802bbe4
 801902c:	080238cc 	.word	0x080238cc
 8019030:	0802bbf8 	.word	0x0802bbf8
 8019034:	080239f4 	.word	0x080239f4
 8019038:	0802bc04 	.word	0x0802bc04
 801903c:	0802bc10 	.word	0x0802bc10
 8019040:	08023bf0 	.word	0x08023bf0
 8019044:	0802bc20 	.word	0x0802bc20
 8019048:	080238ec 	.word	0x080238ec
 801904c:	0802bc28 	.word	0x0802bc28
 8019050:	0802bc38 	.word	0x0802bc38
 8019054:	08023a64 	.word	0x08023a64
 8019058:	0802bc50 	.word	0x0802bc50
 801905c:	0802bc54 	.word	0x0802bc54
 8019060:	0802bc64 	.word	0x0802bc64
 8019064:	0802bc78 	.word	0x0802bc78
 8019068:	0802bc80 	.word	0x0802bc80
 801906c:	0802623c 	.word	0x0802623c
 8019070:	080239dc 	.word	0x080239dc
 8019074:	0802bc90 	.word	0x0802bc90
 8019078:	08023814 	.word	0x08023814
 801907c:	0802bc98 	.word	0x0802bc98
 8019080:	0802bca8 	.word	0x0802bca8
		case 704 :
			strcpy(p->name,"BATTLE OF THE PUDGE");
 8019084:	687b      	ldr	r3, [r7, #4]
 8019086:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801908a:	4abc      	ldr	r2, [pc, #752]	; (801937c <problem_fetch+0x17cb8>)
 801908c:	461d      	mov	r5, r3
 801908e:	4614      	mov	r4, r2
 8019090:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8019092:	6028      	str	r0, [r5, #0]
 8019094:	6069      	str	r1, [r5, #4]
 8019096:	60aa      	str	r2, [r5, #8]
 8019098:	60eb      	str	r3, [r5, #12]
 801909a:	6820      	ldr	r0, [r4, #0]
 801909c:	6128      	str	r0, [r5, #16]
			strcpy(p->grade,"7A+");
 801909e:	687b      	ldr	r3, [r7, #4]
 80190a0:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80190a4:	4ab6      	ldr	r2, [pc, #728]	; (8019380 <problem_fetch+0x17cbc>)
 80190a6:	6810      	ldr	r0, [r2, #0]
 80190a8:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 80190aa:	687b      	ldr	r3, [r7, #4]
 80190ac:	2207      	movs	r2, #7
 80190ae:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"A,C,D,E,E,H,I");
 80190b0:	687b      	ldr	r3, [r7, #4]
 80190b2:	33a4      	adds	r3, #164	; 0xa4
 80190b4:	4ab3      	ldr	r2, [pc, #716]	; (8019384 <problem_fetch+0x17cc0>)
 80190b6:	461c      	mov	r4, r3
 80190b8:	4613      	mov	r3, r2
 80190ba:	cb07      	ldmia	r3!, {r0, r1, r2}
 80190bc:	6020      	str	r0, [r4, #0]
 80190be:	6061      	str	r1, [r4, #4]
 80190c0:	60a2      	str	r2, [r4, #8]
 80190c2:	881b      	ldrh	r3, [r3, #0]
 80190c4:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"18,5,11,8,16,5,10");
 80190c6:	687b      	ldr	r3, [r7, #4]
 80190c8:	3304      	adds	r3, #4
 80190ca:	4aaf      	ldr	r2, [pc, #700]	; (8019388 <problem_fetch+0x17cc4>)
 80190cc:	461d      	mov	r5, r3
 80190ce:	4614      	mov	r4, r2
 80190d0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80190d2:	6028      	str	r0, [r5, #0]
 80190d4:	6069      	str	r1, [r5, #4]
 80190d6:	60aa      	str	r2, [r5, #8]
 80190d8:	60eb      	str	r3, [r5, #12]
 80190da:	8823      	ldrh	r3, [r4, #0]
 80190dc:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"e,s,d,d,d,s,d");
 80190de:	687b      	ldr	r3, [r7, #4]
 80190e0:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 80190e4:	4aa9      	ldr	r2, [pc, #676]	; (801938c <problem_fetch+0x17cc8>)
 80190e6:	461c      	mov	r4, r3
 80190e8:	4613      	mov	r3, r2
 80190ea:	cb07      	ldmia	r3!, {r0, r1, r2}
 80190ec:	6020      	str	r0, [r4, #0]
 80190ee:	6061      	str	r1, [r4, #4]
 80190f0:	60a2      	str	r2, [r4, #8]
 80190f2:	881b      	ldrh	r3, [r3, #0]
 80190f4:	81a3      	strh	r3, [r4, #12]
			break;
 80190f6:	f003 ba15 	b.w	801c524 <problem_fetch+0x1ae60>
		case 705 :
			strcpy(p->name,"THIS IS NOW...");
 80190fa:	687b      	ldr	r3, [r7, #4]
 80190fc:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8019100:	4aa3      	ldr	r2, [pc, #652]	; (8019390 <problem_fetch+0x17ccc>)
 8019102:	461c      	mov	r4, r3
 8019104:	4613      	mov	r3, r2
 8019106:	cb07      	ldmia	r3!, {r0, r1, r2}
 8019108:	6020      	str	r0, [r4, #0]
 801910a:	6061      	str	r1, [r4, #4]
 801910c:	60a2      	str	r2, [r4, #8]
 801910e:	881a      	ldrh	r2, [r3, #0]
 8019110:	789b      	ldrb	r3, [r3, #2]
 8019112:	81a2      	strh	r2, [r4, #12]
 8019114:	73a3      	strb	r3, [r4, #14]
			strcpy(p->grade,"6C+");
 8019116:	687b      	ldr	r3, [r7, #4]
 8019118:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801911c:	4a9d      	ldr	r2, [pc, #628]	; (8019394 <problem_fetch+0x17cd0>)
 801911e:	6810      	ldr	r0, [r2, #0]
 8019120:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 8019122:	687b      	ldr	r3, [r7, #4]
 8019124:	2206      	movs	r2, #6
 8019126:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"H,I,E,D,B,D");
 8019128:	687b      	ldr	r3, [r7, #4]
 801912a:	33a4      	adds	r3, #164	; 0xa4
 801912c:	4a9a      	ldr	r2, [pc, #616]	; (8019398 <problem_fetch+0x17cd4>)
 801912e:	461c      	mov	r4, r3
 8019130:	4613      	mov	r3, r2
 8019132:	cb07      	ldmia	r3!, {r0, r1, r2}
 8019134:	6020      	str	r0, [r4, #0]
 8019136:	6061      	str	r1, [r4, #4]
 8019138:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,10,12,15,15,18");
 801913a:	687b      	ldr	r3, [r7, #4]
 801913c:	3304      	adds	r3, #4
 801913e:	4a97      	ldr	r2, [pc, #604]	; (801939c <problem_fetch+0x17cd8>)
 8019140:	461d      	mov	r5, r3
 8019142:	4614      	mov	r4, r2
 8019144:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8019146:	6028      	str	r0, [r5, #0]
 8019148:	6069      	str	r1, [r5, #4]
 801914a:	60aa      	str	r2, [r5, #8]
 801914c:	60eb      	str	r3, [r5, #12]
 801914e:	7823      	ldrb	r3, [r4, #0]
 8019150:	742b      	strb	r3, [r5, #16]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 8019152:	687b      	ldr	r3, [r7, #4]
 8019154:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8019158:	4a91      	ldr	r2, [pc, #580]	; (80193a0 <problem_fetch+0x17cdc>)
 801915a:	461c      	mov	r4, r3
 801915c:	4613      	mov	r3, r2
 801915e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8019160:	6020      	str	r0, [r4, #0]
 8019162:	6061      	str	r1, [r4, #4]
 8019164:	60a2      	str	r2, [r4, #8]
			break;
 8019166:	f003 b9dd 	b.w	801c524 <problem_fetch+0x1ae60>
		case 706 :
			strcpy(p->name,"ACG31");
 801916a:	687b      	ldr	r3, [r7, #4]
 801916c:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8019170:	4a8c      	ldr	r2, [pc, #560]	; (80193a4 <problem_fetch+0x17ce0>)
 8019172:	6810      	ldr	r0, [r2, #0]
 8019174:	6018      	str	r0, [r3, #0]
 8019176:	8892      	ldrh	r2, [r2, #4]
 8019178:	809a      	strh	r2, [r3, #4]
			strcpy(p->grade,"6C+");
 801917a:	687b      	ldr	r3, [r7, #4]
 801917c:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8019180:	4a84      	ldr	r2, [pc, #528]	; (8019394 <problem_fetch+0x17cd0>)
 8019182:	6810      	ldr	r0, [r2, #0]
 8019184:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 8019186:	687b      	ldr	r3, [r7, #4]
 8019188:	2206      	movs	r2, #6
 801918a:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,I,H,C,E,A");
 801918c:	687b      	ldr	r3, [r7, #4]
 801918e:	33a4      	adds	r3, #164	; 0xa4
 8019190:	4a85      	ldr	r2, [pc, #532]	; (80193a8 <problem_fetch+0x17ce4>)
 8019192:	461c      	mov	r4, r3
 8019194:	4613      	mov	r3, r2
 8019196:	cb07      	ldmia	r3!, {r0, r1, r2}
 8019198:	6020      	str	r0, [r4, #0]
 801919a:	6061      	str	r1, [r4, #4]
 801919c:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,10,13,13,16,18");
 801919e:	687b      	ldr	r3, [r7, #4]
 80191a0:	3304      	adds	r3, #4
 80191a2:	4a82      	ldr	r2, [pc, #520]	; (80193ac <problem_fetch+0x17ce8>)
 80191a4:	461d      	mov	r5, r3
 80191a6:	4614      	mov	r4, r2
 80191a8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80191aa:	6028      	str	r0, [r5, #0]
 80191ac:	6069      	str	r1, [r5, #4]
 80191ae:	60aa      	str	r2, [r5, #8]
 80191b0:	60eb      	str	r3, [r5, #12]
 80191b2:	7823      	ldrb	r3, [r4, #0]
 80191b4:	742b      	strb	r3, [r5, #16]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 80191b6:	687b      	ldr	r3, [r7, #4]
 80191b8:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 80191bc:	4a78      	ldr	r2, [pc, #480]	; (80193a0 <problem_fetch+0x17cdc>)
 80191be:	461c      	mov	r4, r3
 80191c0:	4613      	mov	r3, r2
 80191c2:	cb07      	ldmia	r3!, {r0, r1, r2}
 80191c4:	6020      	str	r0, [r4, #0]
 80191c6:	6061      	str	r1, [r4, #4]
 80191c8:	60a2      	str	r2, [r4, #8]
			break;
 80191ca:	f003 b9ab 	b.w	801c524 <problem_fetch+0x1ae60>
		case 707 :
			strcpy(p->name,"ACG30");
 80191ce:	687b      	ldr	r3, [r7, #4]
 80191d0:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80191d4:	4a76      	ldr	r2, [pc, #472]	; (80193b0 <problem_fetch+0x17cec>)
 80191d6:	6810      	ldr	r0, [r2, #0]
 80191d8:	6018      	str	r0, [r3, #0]
 80191da:	8892      	ldrh	r2, [r2, #4]
 80191dc:	809a      	strh	r2, [r3, #4]
			strcpy(p->grade,"6C");
 80191de:	687b      	ldr	r3, [r7, #4]
 80191e0:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80191e4:	4a73      	ldr	r2, [pc, #460]	; (80193b4 <problem_fetch+0x17cf0>)
 80191e6:	8811      	ldrh	r1, [r2, #0]
 80191e8:	7892      	ldrb	r2, [r2, #2]
 80191ea:	8019      	strh	r1, [r3, #0]
 80191ec:	709a      	strb	r2, [r3, #2]
			p->moveSize = 8;
 80191ee:	687b      	ldr	r3, [r7, #4]
 80191f0:	2208      	movs	r2, #8
 80191f2:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"C,D,E,F,G,G,I,I");
 80191f4:	687b      	ldr	r3, [r7, #4]
 80191f6:	33a4      	adds	r3, #164	; 0xa4
 80191f8:	4a6f      	ldr	r2, [pc, #444]	; (80193b8 <problem_fetch+0x17cf4>)
 80191fa:	461c      	mov	r4, r3
 80191fc:	4615      	mov	r5, r2
 80191fe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8019200:	6020      	str	r0, [r4, #0]
 8019202:	6061      	str	r1, [r4, #4]
 8019204:	60a2      	str	r2, [r4, #8]
 8019206:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,11,8,11,6,15,14,18");
 8019208:	687b      	ldr	r3, [r7, #4]
 801920a:	3304      	adds	r3, #4
 801920c:	4a6b      	ldr	r2, [pc, #428]	; (80193bc <problem_fetch+0x17cf8>)
 801920e:	461d      	mov	r5, r3
 8019210:	4614      	mov	r4, r2
 8019212:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8019214:	6028      	str	r0, [r5, #0]
 8019216:	6069      	str	r1, [r5, #4]
 8019218:	60aa      	str	r2, [r5, #8]
 801921a:	60eb      	str	r3, [r5, #12]
 801921c:	6820      	ldr	r0, [r4, #0]
 801921e:	6128      	str	r0, [r5, #16]
 8019220:	7923      	ldrb	r3, [r4, #4]
 8019222:	752b      	strb	r3, [r5, #20]
			strcpy(p->startFinish,"s,d,d,d,s,d,d,e");
 8019224:	687b      	ldr	r3, [r7, #4]
 8019226:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 801922a:	4a65      	ldr	r2, [pc, #404]	; (80193c0 <problem_fetch+0x17cfc>)
 801922c:	461c      	mov	r4, r3
 801922e:	4615      	mov	r5, r2
 8019230:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8019232:	6020      	str	r0, [r4, #0]
 8019234:	6061      	str	r1, [r4, #4]
 8019236:	60a2      	str	r2, [r4, #8]
 8019238:	60e3      	str	r3, [r4, #12]
			break;
 801923a:	f003 b973 	b.w	801c524 <problem_fetch+0x1ae60>
		case 708 :
			strcpy(p->name,"ACG29");
 801923e:	687b      	ldr	r3, [r7, #4]
 8019240:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8019244:	4a5f      	ldr	r2, [pc, #380]	; (80193c4 <problem_fetch+0x17d00>)
 8019246:	6810      	ldr	r0, [r2, #0]
 8019248:	6018      	str	r0, [r3, #0]
 801924a:	8892      	ldrh	r2, [r2, #4]
 801924c:	809a      	strh	r2, [r3, #4]
			strcpy(p->grade,"6C");
 801924e:	687b      	ldr	r3, [r7, #4]
 8019250:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8019254:	4a57      	ldr	r2, [pc, #348]	; (80193b4 <problem_fetch+0x17cf0>)
 8019256:	8811      	ldrh	r1, [r2, #0]
 8019258:	7892      	ldrb	r2, [r2, #2]
 801925a:	8019      	strh	r1, [r3, #0]
 801925c:	709a      	strb	r2, [r3, #2]
			p->moveSize = 7;
 801925e:	687b      	ldr	r3, [r7, #4]
 8019260:	2207      	movs	r2, #7
 8019262:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,H,E,F,E,H,D");
 8019264:	687b      	ldr	r3, [r7, #4]
 8019266:	33a4      	adds	r3, #164	; 0xa4
 8019268:	4a57      	ldr	r2, [pc, #348]	; (80193c8 <problem_fetch+0x17d04>)
 801926a:	461c      	mov	r4, r3
 801926c:	4613      	mov	r3, r2
 801926e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8019270:	6020      	str	r0, [r4, #0]
 8019272:	6061      	str	r1, [r4, #4]
 8019274:	60a2      	str	r2, [r4, #8]
 8019276:	881b      	ldrh	r3, [r3, #0]
 8019278:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,5,8,11,14,16,18");
 801927a:	687b      	ldr	r3, [r7, #4]
 801927c:	3304      	adds	r3, #4
 801927e:	4a53      	ldr	r2, [pc, #332]	; (80193cc <problem_fetch+0x17d08>)
 8019280:	461d      	mov	r5, r3
 8019282:	4614      	mov	r4, r2
 8019284:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8019286:	6028      	str	r0, [r5, #0]
 8019288:	6069      	str	r1, [r5, #4]
 801928a:	60aa      	str	r2, [r5, #8]
 801928c:	60eb      	str	r3, [r5, #12]
 801928e:	8823      	ldrh	r3, [r4, #0]
 8019290:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,s,d,d,d,d,e");
 8019292:	687b      	ldr	r3, [r7, #4]
 8019294:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8019298:	4a4d      	ldr	r2, [pc, #308]	; (80193d0 <problem_fetch+0x17d0c>)
 801929a:	461c      	mov	r4, r3
 801929c:	4613      	mov	r3, r2
 801929e:	cb07      	ldmia	r3!, {r0, r1, r2}
 80192a0:	6020      	str	r0, [r4, #0]
 80192a2:	6061      	str	r1, [r4, #4]
 80192a4:	60a2      	str	r2, [r4, #8]
 80192a6:	881b      	ldrh	r3, [r3, #0]
 80192a8:	81a3      	strh	r3, [r4, #12]
			break;
 80192aa:	f003 b93b 	b.w	801c524 <problem_fetch+0x1ae60>
		case 709 :
			strcpy(p->name,"L9");
 80192ae:	687b      	ldr	r3, [r7, #4]
 80192b0:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80192b4:	4a47      	ldr	r2, [pc, #284]	; (80193d4 <problem_fetch+0x17d10>)
 80192b6:	8811      	ldrh	r1, [r2, #0]
 80192b8:	7892      	ldrb	r2, [r2, #2]
 80192ba:	8019      	strh	r1, [r3, #0]
 80192bc:	709a      	strb	r2, [r3, #2]
			strcpy(p->grade,"6B+");
 80192be:	687b      	ldr	r3, [r7, #4]
 80192c0:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80192c4:	4a44      	ldr	r2, [pc, #272]	; (80193d8 <problem_fetch+0x17d14>)
 80192c6:	6810      	ldr	r0, [r2, #0]
 80192c8:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 80192ca:	687b      	ldr	r3, [r7, #4]
 80192cc:	2206      	movs	r2, #6
 80192ce:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,E,C,E,C,D");
 80192d0:	687b      	ldr	r3, [r7, #4]
 80192d2:	33a4      	adds	r3, #164	; 0xa4
 80192d4:	4a41      	ldr	r2, [pc, #260]	; (80193dc <problem_fetch+0x17d18>)
 80192d6:	461c      	mov	r4, r3
 80192d8:	4613      	mov	r3, r2
 80192da:	cb07      	ldmia	r3!, {r0, r1, r2}
 80192dc:	6020      	str	r0, [r4, #0]
 80192de:	6061      	str	r1, [r4, #4]
 80192e0:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,8,8,12,13,18");
 80192e2:	687b      	ldr	r3, [r7, #4]
 80192e4:	3304      	adds	r3, #4
 80192e6:	4a3e      	ldr	r2, [pc, #248]	; (80193e0 <problem_fetch+0x17d1c>)
 80192e8:	461c      	mov	r4, r3
 80192ea:	4613      	mov	r3, r2
 80192ec:	cb07      	ldmia	r3!, {r0, r1, r2}
 80192ee:	6020      	str	r0, [r4, #0]
 80192f0:	6061      	str	r1, [r4, #4]
 80192f2:	60a2      	str	r2, [r4, #8]
 80192f4:	881a      	ldrh	r2, [r3, #0]
 80192f6:	789b      	ldrb	r3, [r3, #2]
 80192f8:	81a2      	strh	r2, [r4, #12]
 80192fa:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 80192fc:	687b      	ldr	r3, [r7, #4]
 80192fe:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8019302:	4a27      	ldr	r2, [pc, #156]	; (80193a0 <problem_fetch+0x17cdc>)
 8019304:	461c      	mov	r4, r3
 8019306:	4613      	mov	r3, r2
 8019308:	cb07      	ldmia	r3!, {r0, r1, r2}
 801930a:	6020      	str	r0, [r4, #0]
 801930c:	6061      	str	r1, [r4, #4]
 801930e:	60a2      	str	r2, [r4, #8]
			break;
 8019310:	f003 b908 	b.w	801c524 <problem_fetch+0x1ae60>
		case 710 :
			strcpy(p->name,"FLAPODROM");
 8019314:	687b      	ldr	r3, [r7, #4]
 8019316:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801931a:	4932      	ldr	r1, [pc, #200]	; (80193e4 <problem_fetch+0x17d20>)
 801931c:	461a      	mov	r2, r3
 801931e:	460b      	mov	r3, r1
 8019320:	cb03      	ldmia	r3!, {r0, r1}
 8019322:	6010      	str	r0, [r2, #0]
 8019324:	6051      	str	r1, [r2, #4]
 8019326:	881b      	ldrh	r3, [r3, #0]
 8019328:	8113      	strh	r3, [r2, #8]
			strcpy(p->grade,"6C+");
 801932a:	687b      	ldr	r3, [r7, #4]
 801932c:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8019330:	4a18      	ldr	r2, [pc, #96]	; (8019394 <problem_fetch+0x17cd0>)
 8019332:	6810      	ldr	r0, [r2, #0]
 8019334:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 8019336:	687b      	ldr	r3, [r7, #4]
 8019338:	2206      	movs	r2, #6
 801933a:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"E,J,H,E,I,I");
 801933c:	687b      	ldr	r3, [r7, #4]
 801933e:	33a4      	adds	r3, #164	; 0xa4
 8019340:	4a29      	ldr	r2, [pc, #164]	; (80193e8 <problem_fetch+0x17d24>)
 8019342:	461c      	mov	r4, r3
 8019344:	4613      	mov	r3, r2
 8019346:	cb07      	ldmia	r3!, {r0, r1, r2}
 8019348:	6020      	str	r0, [r4, #0]
 801934a:	6061      	str	r1, [r4, #4]
 801934c:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"6,5,10,14,14,18");
 801934e:	687b      	ldr	r3, [r7, #4]
 8019350:	3304      	adds	r3, #4
 8019352:	4a26      	ldr	r2, [pc, #152]	; (80193ec <problem_fetch+0x17d28>)
 8019354:	461c      	mov	r4, r3
 8019356:	4615      	mov	r5, r2
 8019358:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801935a:	6020      	str	r0, [r4, #0]
 801935c:	6061      	str	r1, [r4, #4]
 801935e:	60a2      	str	r2, [r4, #8]
 8019360:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,s,d,d,d,e");
 8019362:	687b      	ldr	r3, [r7, #4]
 8019364:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8019368:	4a21      	ldr	r2, [pc, #132]	; (80193f0 <problem_fetch+0x17d2c>)
 801936a:	461c      	mov	r4, r3
 801936c:	4613      	mov	r3, r2
 801936e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8019370:	6020      	str	r0, [r4, #0]
 8019372:	6061      	str	r1, [r4, #4]
 8019374:	60a2      	str	r2, [r4, #8]
			break;
 8019376:	f003 b8d5 	b.w	801c524 <problem_fetch+0x1ae60>
 801937a:	bf00      	nop
 801937c:	0802bcc0 	.word	0x0802bcc0
 8019380:	080239f4 	.word	0x080239f4
 8019384:	0802bcd4 	.word	0x0802bcd4
 8019388:	0802bce4 	.word	0x0802bce4
 801938c:	0802bcf8 	.word	0x0802bcf8
 8019390:	0802bd08 	.word	0x0802bd08
 8019394:	080238ec 	.word	0x080238ec
 8019398:	0802bd18 	.word	0x0802bd18
 801939c:	0802bd24 	.word	0x0802bd24
 80193a0:	08023bf0 	.word	0x08023bf0
 80193a4:	0802bd38 	.word	0x0802bd38
 80193a8:	0802bd40 	.word	0x0802bd40
 80193ac:	0802bd4c 	.word	0x0802bd4c
 80193b0:	0802bd60 	.word	0x0802bd60
 80193b4:	08023920 	.word	0x08023920
 80193b8:	0802bd68 	.word	0x0802bd68
 80193bc:	0802bd78 	.word	0x0802bd78
 80193c0:	08026afc 	.word	0x08026afc
 80193c4:	0802bd90 	.word	0x0802bd90
 80193c8:	0802bd98 	.word	0x0802bd98
 80193cc:	0802bda8 	.word	0x0802bda8
 80193d0:	080238cc 	.word	0x080238cc
 80193d4:	0802bdbc 	.word	0x0802bdbc
 80193d8:	08023854 	.word	0x08023854
 80193dc:	0802bdc0 	.word	0x0802bdc0
 80193e0:	0802bdcc 	.word	0x0802bdcc
 80193e4:	0802bddc 	.word	0x0802bddc
 80193e8:	0802bde8 	.word	0x0802bde8
 80193ec:	0802bdf4 	.word	0x0802bdf4
 80193f0:	08023834 	.word	0x08023834
		case 711 :
			strcpy(p->name,"SWIM AND GO");
 80193f4:	687b      	ldr	r3, [r7, #4]
 80193f6:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80193fa:	4ac0      	ldr	r2, [pc, #768]	; (80196fc <problem_fetch+0x18038>)
 80193fc:	461c      	mov	r4, r3
 80193fe:	4613      	mov	r3, r2
 8019400:	cb07      	ldmia	r3!, {r0, r1, r2}
 8019402:	6020      	str	r0, [r4, #0]
 8019404:	6061      	str	r1, [r4, #4]
 8019406:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade,"6B+");
 8019408:	687b      	ldr	r3, [r7, #4]
 801940a:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801940e:	4abc      	ldr	r2, [pc, #752]	; (8019700 <problem_fetch+0x1803c>)
 8019410:	6810      	ldr	r0, [r2, #0]
 8019412:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 8019414:	687b      	ldr	r3, [r7, #4]
 8019416:	2206      	movs	r2, #6
 8019418:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,E,H,C,I,D");
 801941a:	687b      	ldr	r3, [r7, #4]
 801941c:	33a4      	adds	r3, #164	; 0xa4
 801941e:	4ab9      	ldr	r2, [pc, #740]	; (8019704 <problem_fetch+0x18040>)
 8019420:	461c      	mov	r4, r3
 8019422:	4613      	mov	r3, r2
 8019424:	cb07      	ldmia	r3!, {r0, r1, r2}
 8019426:	6020      	str	r0, [r4, #0]
 8019428:	6061      	str	r1, [r4, #4]
 801942a:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,6,10,13,14,18");
 801942c:	687b      	ldr	r3, [r7, #4]
 801942e:	3304      	adds	r3, #4
 8019430:	4ab5      	ldr	r2, [pc, #724]	; (8019708 <problem_fetch+0x18044>)
 8019432:	461c      	mov	r4, r3
 8019434:	4615      	mov	r5, r2
 8019436:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8019438:	6020      	str	r0, [r4, #0]
 801943a:	6061      	str	r1, [r4, #4]
 801943c:	60a2      	str	r2, [r4, #8]
 801943e:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,s,d,d,d,e");
 8019440:	687b      	ldr	r3, [r7, #4]
 8019442:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8019446:	4ab1      	ldr	r2, [pc, #708]	; (801970c <problem_fetch+0x18048>)
 8019448:	461c      	mov	r4, r3
 801944a:	4613      	mov	r3, r2
 801944c:	cb07      	ldmia	r3!, {r0, r1, r2}
 801944e:	6020      	str	r0, [r4, #0]
 8019450:	6061      	str	r1, [r4, #4]
 8019452:	60a2      	str	r2, [r4, #8]
			break;
 8019454:	f003 b866 	b.w	801c524 <problem_fetch+0x1ae60>
		case 712 :
			strcpy(p->name,"SWIMMING GOAT");
 8019458:	687b      	ldr	r3, [r7, #4]
 801945a:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801945e:	4aac      	ldr	r2, [pc, #688]	; (8019710 <problem_fetch+0x1804c>)
 8019460:	461c      	mov	r4, r3
 8019462:	4613      	mov	r3, r2
 8019464:	cb07      	ldmia	r3!, {r0, r1, r2}
 8019466:	6020      	str	r0, [r4, #0]
 8019468:	6061      	str	r1, [r4, #4]
 801946a:	60a2      	str	r2, [r4, #8]
 801946c:	881b      	ldrh	r3, [r3, #0]
 801946e:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade,"6B+");
 8019470:	687b      	ldr	r3, [r7, #4]
 8019472:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8019476:	4aa2      	ldr	r2, [pc, #648]	; (8019700 <problem_fetch+0x1803c>)
 8019478:	6810      	ldr	r0, [r2, #0]
 801947a:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 801947c:	687b      	ldr	r3, [r7, #4]
 801947e:	2206      	movs	r2, #6
 8019480:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,H,C,I,I,D");
 8019482:	687b      	ldr	r3, [r7, #4]
 8019484:	33a4      	adds	r3, #164	; 0xa4
 8019486:	4aa3      	ldr	r2, [pc, #652]	; (8019714 <problem_fetch+0x18050>)
 8019488:	461c      	mov	r4, r3
 801948a:	4613      	mov	r3, r2
 801948c:	cb07      	ldmia	r3!, {r0, r1, r2}
 801948e:	6020      	str	r0, [r4, #0]
 8019490:	6061      	str	r1, [r4, #4]
 8019492:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,10,13,14,7,18");
 8019494:	687b      	ldr	r3, [r7, #4]
 8019496:	3304      	adds	r3, #4
 8019498:	4a9f      	ldr	r2, [pc, #636]	; (8019718 <problem_fetch+0x18054>)
 801949a:	461c      	mov	r4, r3
 801949c:	4615      	mov	r5, r2
 801949e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80194a0:	6020      	str	r0, [r4, #0]
 80194a2:	6061      	str	r1, [r4, #4]
 80194a4:	60a2      	str	r2, [r4, #8]
 80194a6:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 80194a8:	687b      	ldr	r3, [r7, #4]
 80194aa:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 80194ae:	4a9b      	ldr	r2, [pc, #620]	; (801971c <problem_fetch+0x18058>)
 80194b0:	461c      	mov	r4, r3
 80194b2:	4613      	mov	r3, r2
 80194b4:	cb07      	ldmia	r3!, {r0, r1, r2}
 80194b6:	6020      	str	r0, [r4, #0]
 80194b8:	6061      	str	r1, [r4, #4]
 80194ba:	60a2      	str	r2, [r4, #8]
			break;
 80194bc:	f003 b832 	b.w	801c524 <problem_fetch+0x1ae60>
		case 713 :
			strcpy(p->name,"NORTHSIDE");
 80194c0:	687b      	ldr	r3, [r7, #4]
 80194c2:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80194c6:	4996      	ldr	r1, [pc, #600]	; (8019720 <problem_fetch+0x1805c>)
 80194c8:	461a      	mov	r2, r3
 80194ca:	460b      	mov	r3, r1
 80194cc:	cb03      	ldmia	r3!, {r0, r1}
 80194ce:	6010      	str	r0, [r2, #0]
 80194d0:	6051      	str	r1, [r2, #4]
 80194d2:	881b      	ldrh	r3, [r3, #0]
 80194d4:	8113      	strh	r3, [r2, #8]
			strcpy(p->grade,"7A");
 80194d6:	687b      	ldr	r3, [r7, #4]
 80194d8:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80194dc:	4a91      	ldr	r2, [pc, #580]	; (8019724 <problem_fetch+0x18060>)
 80194de:	8811      	ldrh	r1, [r2, #0]
 80194e0:	7892      	ldrb	r2, [r2, #2]
 80194e2:	8019      	strh	r1, [r3, #0]
 80194e4:	709a      	strb	r2, [r3, #2]
			p->moveSize = 6;
 80194e6:	687b      	ldr	r3, [r7, #4]
 80194e8:	2206      	movs	r2, #6
 80194ea:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"B,D,E,E,H,J");
 80194ec:	687b      	ldr	r3, [r7, #4]
 80194ee:	33a4      	adds	r3, #164	; 0xa4
 80194f0:	4a8d      	ldr	r2, [pc, #564]	; (8019728 <problem_fetch+0x18064>)
 80194f2:	461c      	mov	r4, r3
 80194f4:	4613      	mov	r3, r2
 80194f6:	cb07      	ldmia	r3!, {r0, r1, r2}
 80194f8:	6020      	str	r0, [r4, #0]
 80194fa:	6061      	str	r1, [r4, #4]
 80194fc:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"15,18,8,12,5,5");
 80194fe:	687b      	ldr	r3, [r7, #4]
 8019500:	3304      	adds	r3, #4
 8019502:	4a8a      	ldr	r2, [pc, #552]	; (801972c <problem_fetch+0x18068>)
 8019504:	461c      	mov	r4, r3
 8019506:	4613      	mov	r3, r2
 8019508:	cb07      	ldmia	r3!, {r0, r1, r2}
 801950a:	6020      	str	r0, [r4, #0]
 801950c:	6061      	str	r1, [r4, #4]
 801950e:	60a2      	str	r2, [r4, #8]
 8019510:	881a      	ldrh	r2, [r3, #0]
 8019512:	789b      	ldrb	r3, [r3, #2]
 8019514:	81a2      	strh	r2, [r4, #12]
 8019516:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish,"d,e,d,d,s,s");
 8019518:	687b      	ldr	r3, [r7, #4]
 801951a:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 801951e:	4a84      	ldr	r2, [pc, #528]	; (8019730 <problem_fetch+0x1806c>)
 8019520:	461c      	mov	r4, r3
 8019522:	4613      	mov	r3, r2
 8019524:	cb07      	ldmia	r3!, {r0, r1, r2}
 8019526:	6020      	str	r0, [r4, #0]
 8019528:	6061      	str	r1, [r4, #4]
 801952a:	60a2      	str	r2, [r4, #8]
			break;
 801952c:	f002 bffa 	b.w	801c524 <problem_fetch+0x1ae60>
		case 714 :
			strcpy(p->name,"DESTINY'S GRANDMA");
 8019530:	687b      	ldr	r3, [r7, #4]
 8019532:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8019536:	4a7f      	ldr	r2, [pc, #508]	; (8019734 <problem_fetch+0x18070>)
 8019538:	461d      	mov	r5, r3
 801953a:	4614      	mov	r4, r2
 801953c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801953e:	6028      	str	r0, [r5, #0]
 8019540:	6069      	str	r1, [r5, #4]
 8019542:	60aa      	str	r2, [r5, #8]
 8019544:	60eb      	str	r3, [r5, #12]
 8019546:	8823      	ldrh	r3, [r4, #0]
 8019548:	822b      	strh	r3, [r5, #16]
			strcpy(p->grade,"6B+");
 801954a:	687b      	ldr	r3, [r7, #4]
 801954c:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8019550:	4a6b      	ldr	r2, [pc, #428]	; (8019700 <problem_fetch+0x1803c>)
 8019552:	6810      	ldr	r0, [r2, #0]
 8019554:	6018      	str	r0, [r3, #0]
			p->moveSize = 8;
 8019556:	687b      	ldr	r3, [r7, #4]
 8019558:	2208      	movs	r2, #8
 801955a:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,J,G,H,G,I,G,I");
 801955c:	687b      	ldr	r3, [r7, #4]
 801955e:	33a4      	adds	r3, #164	; 0xa4
 8019560:	4a75      	ldr	r2, [pc, #468]	; (8019738 <problem_fetch+0x18074>)
 8019562:	461c      	mov	r4, r3
 8019564:	4615      	mov	r5, r2
 8019566:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8019568:	6020      	str	r0, [r4, #0]
 801956a:	6061      	str	r1, [r4, #4]
 801956c:	60a2      	str	r2, [r4, #8]
 801956e:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,7,9,10,14,14,17,18");
 8019570:	687b      	ldr	r3, [r7, #4]
 8019572:	3304      	adds	r3, #4
 8019574:	4a71      	ldr	r2, [pc, #452]	; (801973c <problem_fetch+0x18078>)
 8019576:	461d      	mov	r5, r3
 8019578:	4614      	mov	r4, r2
 801957a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801957c:	6028      	str	r0, [r5, #0]
 801957e:	6069      	str	r1, [r5, #4]
 8019580:	60aa      	str	r2, [r5, #8]
 8019582:	60eb      	str	r3, [r5, #12]
 8019584:	6820      	ldr	r0, [r4, #0]
 8019586:	6128      	str	r0, [r5, #16]
 8019588:	7923      	ldrb	r3, [r4, #4]
 801958a:	752b      	strb	r3, [r5, #20]
			strcpy(p->startFinish,"s,d,d,d,d,d,d,e");
 801958c:	687b      	ldr	r3, [r7, #4]
 801958e:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8019592:	4a6b      	ldr	r2, [pc, #428]	; (8019740 <problem_fetch+0x1807c>)
 8019594:	461c      	mov	r4, r3
 8019596:	4615      	mov	r5, r2
 8019598:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801959a:	6020      	str	r0, [r4, #0]
 801959c:	6061      	str	r1, [r4, #4]
 801959e:	60a2      	str	r2, [r4, #8]
 80195a0:	60e3      	str	r3, [r4, #12]
			break;
 80195a2:	f002 bfbf 	b.w	801c524 <problem_fetch+0x1ae60>
		case 715 :
			strcpy(p->name,"3/5TH A MAN");
 80195a6:	687b      	ldr	r3, [r7, #4]
 80195a8:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80195ac:	4a65      	ldr	r2, [pc, #404]	; (8019744 <problem_fetch+0x18080>)
 80195ae:	461c      	mov	r4, r3
 80195b0:	4613      	mov	r3, r2
 80195b2:	cb07      	ldmia	r3!, {r0, r1, r2}
 80195b4:	6020      	str	r0, [r4, #0]
 80195b6:	6061      	str	r1, [r4, #4]
 80195b8:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade,"7A+");
 80195ba:	687b      	ldr	r3, [r7, #4]
 80195bc:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80195c0:	4a61      	ldr	r2, [pc, #388]	; (8019748 <problem_fetch+0x18084>)
 80195c2:	6810      	ldr	r0, [r2, #0]
 80195c4:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 80195c6:	687b      	ldr	r3, [r7, #4]
 80195c8:	2207      	movs	r2, #7
 80195ca:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,H,K,E,I,H,I");
 80195cc:	687b      	ldr	r3, [r7, #4]
 80195ce:	33a4      	adds	r3, #164	; 0xa4
 80195d0:	4a5e      	ldr	r2, [pc, #376]	; (801974c <problem_fetch+0x18088>)
 80195d2:	461c      	mov	r4, r3
 80195d4:	4613      	mov	r3, r2
 80195d6:	cb07      	ldmia	r3!, {r0, r1, r2}
 80195d8:	6020      	str	r0, [r4, #0]
 80195da:	6061      	str	r1, [r4, #4]
 80195dc:	60a2      	str	r2, [r4, #8]
 80195de:	881b      	ldrh	r3, [r3, #0]
 80195e0:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,12,14,8,9,16,18");
 80195e2:	687b      	ldr	r3, [r7, #4]
 80195e4:	3304      	adds	r3, #4
 80195e6:	4a5a      	ldr	r2, [pc, #360]	; (8019750 <problem_fetch+0x1808c>)
 80195e8:	461d      	mov	r5, r3
 80195ea:	4614      	mov	r4, r2
 80195ec:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80195ee:	6028      	str	r0, [r5, #0]
 80195f0:	6069      	str	r1, [r5, #4]
 80195f2:	60aa      	str	r2, [r5, #8]
 80195f4:	60eb      	str	r3, [r5, #12]
 80195f6:	8823      	ldrh	r3, [r4, #0]
 80195f8:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 80195fa:	687b      	ldr	r3, [r7, #4]
 80195fc:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8019600:	4a54      	ldr	r2, [pc, #336]	; (8019754 <problem_fetch+0x18090>)
 8019602:	461c      	mov	r4, r3
 8019604:	4613      	mov	r3, r2
 8019606:	cb07      	ldmia	r3!, {r0, r1, r2}
 8019608:	6020      	str	r0, [r4, #0]
 801960a:	6061      	str	r1, [r4, #4]
 801960c:	60a2      	str	r2, [r4, #8]
 801960e:	881b      	ldrh	r3, [r3, #0]
 8019610:	81a3      	strh	r3, [r4, #12]
			break;
 8019612:	f002 bf87 	b.w	801c524 <problem_fetch+0x1ae60>
		case 716 :
			strcpy(p->name,"5 FINGER DISCOUNT");
 8019616:	687b      	ldr	r3, [r7, #4]
 8019618:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801961c:	4a4e      	ldr	r2, [pc, #312]	; (8019758 <problem_fetch+0x18094>)
 801961e:	461d      	mov	r5, r3
 8019620:	4614      	mov	r4, r2
 8019622:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8019624:	6028      	str	r0, [r5, #0]
 8019626:	6069      	str	r1, [r5, #4]
 8019628:	60aa      	str	r2, [r5, #8]
 801962a:	60eb      	str	r3, [r5, #12]
 801962c:	8823      	ldrh	r3, [r4, #0]
 801962e:	822b      	strh	r3, [r5, #16]
			strcpy(p->grade,"7A+");
 8019630:	687b      	ldr	r3, [r7, #4]
 8019632:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8019636:	4a44      	ldr	r2, [pc, #272]	; (8019748 <problem_fetch+0x18084>)
 8019638:	6810      	ldr	r0, [r2, #0]
 801963a:	6018      	str	r0, [r3, #0]
			p->moveSize = 8;
 801963c:	687b      	ldr	r3, [r7, #4]
 801963e:	2208      	movs	r2, #8
 8019640:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"A,A,B,D,E,E,E,G");
 8019642:	687b      	ldr	r3, [r7, #4]
 8019644:	33a4      	adds	r3, #164	; 0xa4
 8019646:	4a45      	ldr	r2, [pc, #276]	; (801975c <problem_fetch+0x18098>)
 8019648:	461c      	mov	r4, r3
 801964a:	4615      	mov	r5, r2
 801964c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801964e:	6020      	str	r0, [r4, #0]
 8019650:	6061      	str	r1, [r4, #4]
 8019652:	60a2      	str	r2, [r4, #8]
 8019654:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"9,14,12,18,6,8,14,4");
 8019656:	687b      	ldr	r3, [r7, #4]
 8019658:	3304      	adds	r3, #4
 801965a:	4a41      	ldr	r2, [pc, #260]	; (8019760 <problem_fetch+0x1809c>)
 801965c:	461d      	mov	r5, r3
 801965e:	4614      	mov	r4, r2
 8019660:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8019662:	6028      	str	r0, [r5, #0]
 8019664:	6069      	str	r1, [r5, #4]
 8019666:	60aa      	str	r2, [r5, #8]
 8019668:	60eb      	str	r3, [r5, #12]
 801966a:	6820      	ldr	r0, [r4, #0]
 801966c:	6128      	str	r0, [r5, #16]
			strcpy(p->startFinish,"d,d,d,e,d,d,d,s");
 801966e:	687b      	ldr	r3, [r7, #4]
 8019670:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8019674:	4a3b      	ldr	r2, [pc, #236]	; (8019764 <problem_fetch+0x180a0>)
 8019676:	461c      	mov	r4, r3
 8019678:	4615      	mov	r5, r2
 801967a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801967c:	6020      	str	r0, [r4, #0]
 801967e:	6061      	str	r1, [r4, #4]
 8019680:	60a2      	str	r2, [r4, #8]
 8019682:	60e3      	str	r3, [r4, #12]
			break;
 8019684:	f002 bf4e 	b.w	801c524 <problem_fetch+0x1ae60>
		case 717 :
			strcpy(p->name,"THE SENDTRAIN");
 8019688:	687b      	ldr	r3, [r7, #4]
 801968a:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801968e:	4a36      	ldr	r2, [pc, #216]	; (8019768 <problem_fetch+0x180a4>)
 8019690:	461c      	mov	r4, r3
 8019692:	4613      	mov	r3, r2
 8019694:	cb07      	ldmia	r3!, {r0, r1, r2}
 8019696:	6020      	str	r0, [r4, #0]
 8019698:	6061      	str	r1, [r4, #4]
 801969a:	60a2      	str	r2, [r4, #8]
 801969c:	881b      	ldrh	r3, [r3, #0]
 801969e:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade,"6C");
 80196a0:	687b      	ldr	r3, [r7, #4]
 80196a2:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80196a6:	4a31      	ldr	r2, [pc, #196]	; (801976c <problem_fetch+0x180a8>)
 80196a8:	8811      	ldrh	r1, [r2, #0]
 80196aa:	7892      	ldrb	r2, [r2, #2]
 80196ac:	8019      	strh	r1, [r3, #0]
 80196ae:	709a      	strb	r2, [r3, #2]
			p->moveSize = 8;
 80196b0:	687b      	ldr	r3, [r7, #4]
 80196b2:	2208      	movs	r2, #8
 80196b4:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"E,G,G,G,G,I,I,J");
 80196b6:	687b      	ldr	r3, [r7, #4]
 80196b8:	33a4      	adds	r3, #164	; 0xa4
 80196ba:	4a2d      	ldr	r2, [pc, #180]	; (8019770 <problem_fetch+0x180ac>)
 80196bc:	461c      	mov	r4, r3
 80196be:	4615      	mov	r5, r2
 80196c0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80196c2:	6020      	str	r0, [r4, #0]
 80196c4:	6061      	str	r1, [r4, #4]
 80196c6:	60a2      	str	r2, [r4, #8]
 80196c8:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"12,4,6,9,15,14,18,7");
 80196ca:	687b      	ldr	r3, [r7, #4]
 80196cc:	3304      	adds	r3, #4
 80196ce:	4a29      	ldr	r2, [pc, #164]	; (8019774 <problem_fetch+0x180b0>)
 80196d0:	461d      	mov	r5, r3
 80196d2:	4614      	mov	r4, r2
 80196d4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80196d6:	6028      	str	r0, [r5, #0]
 80196d8:	6069      	str	r1, [r5, #4]
 80196da:	60aa      	str	r2, [r5, #8]
 80196dc:	60eb      	str	r3, [r5, #12]
 80196de:	6820      	ldr	r0, [r4, #0]
 80196e0:	6128      	str	r0, [r5, #16]
			strcpy(p->startFinish,"d,s,d,d,d,d,e,d");
 80196e2:	687b      	ldr	r3, [r7, #4]
 80196e4:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 80196e8:	4a23      	ldr	r2, [pc, #140]	; (8019778 <problem_fetch+0x180b4>)
 80196ea:	461c      	mov	r4, r3
 80196ec:	4615      	mov	r5, r2
 80196ee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80196f0:	6020      	str	r0, [r4, #0]
 80196f2:	6061      	str	r1, [r4, #4]
 80196f4:	60a2      	str	r2, [r4, #8]
 80196f6:	60e3      	str	r3, [r4, #12]
			break;
 80196f8:	f002 bf14 	b.w	801c524 <problem_fetch+0x1ae60>
 80196fc:	0802be04 	.word	0x0802be04
 8019700:	08023854 	.word	0x08023854
 8019704:	0802be10 	.word	0x0802be10
 8019708:	0802be1c 	.word	0x0802be1c
 801970c:	08023834 	.word	0x08023834
 8019710:	0802be2c 	.word	0x0802be2c
 8019714:	0802be3c 	.word	0x0802be3c
 8019718:	0802be48 	.word	0x0802be48
 801971c:	08023bf0 	.word	0x08023bf0
 8019720:	0802be58 	.word	0x0802be58
 8019724:	08023814 	.word	0x08023814
 8019728:	0802be64 	.word	0x0802be64
 801972c:	0802be70 	.word	0x0802be70
 8019730:	0802be80 	.word	0x0802be80
 8019734:	0802be8c 	.word	0x0802be8c
 8019738:	0802bea0 	.word	0x0802bea0
 801973c:	0802beb0 	.word	0x0802beb0
 8019740:	08023a64 	.word	0x08023a64
 8019744:	0802bec8 	.word	0x0802bec8
 8019748:	080239f4 	.word	0x080239f4
 801974c:	0802bed4 	.word	0x0802bed4
 8019750:	0802bee4 	.word	0x0802bee4
 8019754:	080239dc 	.word	0x080239dc
 8019758:	0802bef8 	.word	0x0802bef8
 801975c:	0802bf0c 	.word	0x0802bf0c
 8019760:	0802bf1c 	.word	0x0802bf1c
 8019764:	0802bf30 	.word	0x0802bf30
 8019768:	0802bf40 	.word	0x0802bf40
 801976c:	08023920 	.word	0x08023920
 8019770:	0802bf50 	.word	0x0802bf50
 8019774:	0802bf60 	.word	0x0802bf60
 8019778:	0802bf74 	.word	0x0802bf74
		case 718 :
			strcpy(p->name,"SANTOKU SNATCH");
 801977c:	687b      	ldr	r3, [r7, #4]
 801977e:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8019782:	4aaf      	ldr	r2, [pc, #700]	; (8019a40 <problem_fetch+0x1837c>)
 8019784:	461c      	mov	r4, r3
 8019786:	4613      	mov	r3, r2
 8019788:	cb07      	ldmia	r3!, {r0, r1, r2}
 801978a:	6020      	str	r0, [r4, #0]
 801978c:	6061      	str	r1, [r4, #4]
 801978e:	60a2      	str	r2, [r4, #8]
 8019790:	881a      	ldrh	r2, [r3, #0]
 8019792:	789b      	ldrb	r3, [r3, #2]
 8019794:	81a2      	strh	r2, [r4, #12]
 8019796:	73a3      	strb	r3, [r4, #14]
			strcpy(p->grade,"7A+");
 8019798:	687b      	ldr	r3, [r7, #4]
 801979a:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801979e:	4aa9      	ldr	r2, [pc, #676]	; (8019a44 <problem_fetch+0x18380>)
 80197a0:	6810      	ldr	r0, [r2, #0]
 80197a2:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 80197a4:	687b      	ldr	r3, [r7, #4]
 80197a6:	2207      	movs	r2, #7
 80197a8:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"H,H,C,F,F,J,I");
 80197aa:	687b      	ldr	r3, [r7, #4]
 80197ac:	33a4      	adds	r3, #164	; 0xa4
 80197ae:	4aa6      	ldr	r2, [pc, #664]	; (8019a48 <problem_fetch+0x18384>)
 80197b0:	461c      	mov	r4, r3
 80197b2:	4613      	mov	r3, r2
 80197b4:	cb07      	ldmia	r3!, {r0, r1, r2}
 80197b6:	6020      	str	r0, [r4, #0]
 80197b8:	6061      	str	r1, [r4, #4]
 80197ba:	60a2      	str	r2, [r4, #8]
 80197bc:	881b      	ldrh	r3, [r3, #0]
 80197be:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,8,8,11,13,16,18");
 80197c0:	687b      	ldr	r3, [r7, #4]
 80197c2:	3304      	adds	r3, #4
 80197c4:	4aa1      	ldr	r2, [pc, #644]	; (8019a4c <problem_fetch+0x18388>)
 80197c6:	461d      	mov	r5, r3
 80197c8:	4614      	mov	r4, r2
 80197ca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80197cc:	6028      	str	r0, [r5, #0]
 80197ce:	6069      	str	r1, [r5, #4]
 80197d0:	60aa      	str	r2, [r5, #8]
 80197d2:	60eb      	str	r3, [r5, #12]
 80197d4:	8823      	ldrh	r3, [r4, #0]
 80197d6:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 80197d8:	687b      	ldr	r3, [r7, #4]
 80197da:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 80197de:	4a9c      	ldr	r2, [pc, #624]	; (8019a50 <problem_fetch+0x1838c>)
 80197e0:	461c      	mov	r4, r3
 80197e2:	4613      	mov	r3, r2
 80197e4:	cb07      	ldmia	r3!, {r0, r1, r2}
 80197e6:	6020      	str	r0, [r4, #0]
 80197e8:	6061      	str	r1, [r4, #4]
 80197ea:	60a2      	str	r2, [r4, #8]
 80197ec:	881b      	ldrh	r3, [r3, #0]
 80197ee:	81a3      	strh	r3, [r4, #12]
			break;
 80197f0:	f002 be98 	b.w	801c524 <problem_fetch+0x1ae60>
		case 719 :
			strcpy(p->name,"MY IDEA ?");
 80197f4:	687b      	ldr	r3, [r7, #4]
 80197f6:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80197fa:	4996      	ldr	r1, [pc, #600]	; (8019a54 <problem_fetch+0x18390>)
 80197fc:	461a      	mov	r2, r3
 80197fe:	460b      	mov	r3, r1
 8019800:	cb03      	ldmia	r3!, {r0, r1}
 8019802:	6010      	str	r0, [r2, #0]
 8019804:	6051      	str	r1, [r2, #4]
 8019806:	881b      	ldrh	r3, [r3, #0]
 8019808:	8113      	strh	r3, [r2, #8]
			strcpy(p->grade,"6C");
 801980a:	687b      	ldr	r3, [r7, #4]
 801980c:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8019810:	4a91      	ldr	r2, [pc, #580]	; (8019a58 <problem_fetch+0x18394>)
 8019812:	8811      	ldrh	r1, [r2, #0]
 8019814:	7892      	ldrb	r2, [r2, #2]
 8019816:	8019      	strh	r1, [r3, #0]
 8019818:	709a      	strb	r2, [r3, #2]
			p->moveSize = 7;
 801981a:	687b      	ldr	r3, [r7, #4]
 801981c:	2207      	movs	r2, #7
 801981e:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"E,G,C,H,C,C,A");
 8019820:	687b      	ldr	r3, [r7, #4]
 8019822:	33a4      	adds	r3, #164	; 0xa4
 8019824:	4a8d      	ldr	r2, [pc, #564]	; (8019a5c <problem_fetch+0x18398>)
 8019826:	461c      	mov	r4, r3
 8019828:	4613      	mov	r3, r2
 801982a:	cb07      	ldmia	r3!, {r0, r1, r2}
 801982c:	6020      	str	r0, [r4, #0]
 801982e:	6061      	str	r1, [r4, #4]
 8019830:	60a2      	str	r2, [r4, #8]
 8019832:	881b      	ldrh	r3, [r3, #0]
 8019834:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"6,6,8,10,13,16,18");
 8019836:	687b      	ldr	r3, [r7, #4]
 8019838:	3304      	adds	r3, #4
 801983a:	4a89      	ldr	r2, [pc, #548]	; (8019a60 <problem_fetch+0x1839c>)
 801983c:	461d      	mov	r5, r3
 801983e:	4614      	mov	r4, r2
 8019840:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8019842:	6028      	str	r0, [r5, #0]
 8019844:	6069      	str	r1, [r5, #4]
 8019846:	60aa      	str	r2, [r5, #8]
 8019848:	60eb      	str	r3, [r5, #12]
 801984a:	8823      	ldrh	r3, [r4, #0]
 801984c:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,s,d,d,d,d,e");
 801984e:	687b      	ldr	r3, [r7, #4]
 8019850:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8019854:	4a83      	ldr	r2, [pc, #524]	; (8019a64 <problem_fetch+0x183a0>)
 8019856:	461c      	mov	r4, r3
 8019858:	4613      	mov	r3, r2
 801985a:	cb07      	ldmia	r3!, {r0, r1, r2}
 801985c:	6020      	str	r0, [r4, #0]
 801985e:	6061      	str	r1, [r4, #4]
 8019860:	60a2      	str	r2, [r4, #8]
 8019862:	881b      	ldrh	r3, [r3, #0]
 8019864:	81a3      	strh	r3, [r4, #12]
			break;
 8019866:	f002 be5d 	b.w	801c524 <problem_fetch+0x1ae60>
		case 720 :
			strcpy(p->name,"RUSTY MORNING");
 801986a:	687b      	ldr	r3, [r7, #4]
 801986c:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8019870:	4a7d      	ldr	r2, [pc, #500]	; (8019a68 <problem_fetch+0x183a4>)
 8019872:	461c      	mov	r4, r3
 8019874:	4613      	mov	r3, r2
 8019876:	cb07      	ldmia	r3!, {r0, r1, r2}
 8019878:	6020      	str	r0, [r4, #0]
 801987a:	6061      	str	r1, [r4, #4]
 801987c:	60a2      	str	r2, [r4, #8]
 801987e:	881b      	ldrh	r3, [r3, #0]
 8019880:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade,"6B+");
 8019882:	687b      	ldr	r3, [r7, #4]
 8019884:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8019888:	4a78      	ldr	r2, [pc, #480]	; (8019a6c <problem_fetch+0x183a8>)
 801988a:	6810      	ldr	r0, [r2, #0]
 801988c:	6018      	str	r0, [r3, #0]
			p->moveSize = 9;
 801988e:	687b      	ldr	r3, [r7, #4]
 8019890:	2209      	movs	r2, #9
 8019892:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"C,E,E,I,H,I,E,E,A");
 8019894:	687b      	ldr	r3, [r7, #4]
 8019896:	33a4      	adds	r3, #164	; 0xa4
 8019898:	4a75      	ldr	r2, [pc, #468]	; (8019a70 <problem_fetch+0x183ac>)
 801989a:	461d      	mov	r5, r3
 801989c:	4614      	mov	r4, r2
 801989e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80198a0:	6028      	str	r0, [r5, #0]
 80198a2:	6069      	str	r1, [r5, #4]
 80198a4:	60aa      	str	r2, [r5, #8]
 80198a6:	60eb      	str	r3, [r5, #12]
 80198a8:	8823      	ldrh	r3, [r4, #0]
 80198aa:	822b      	strh	r3, [r5, #16]
			strcpy(p->moveNumbers,"5,6,8,10,12,14,14,16,18");
 80198ac:	687b      	ldr	r3, [r7, #4]
 80198ae:	3304      	adds	r3, #4
 80198b0:	4a70      	ldr	r2, [pc, #448]	; (8019a74 <problem_fetch+0x183b0>)
 80198b2:	461d      	mov	r5, r3
 80198b4:	4614      	mov	r4, r2
 80198b6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80198b8:	6028      	str	r0, [r5, #0]
 80198ba:	6069      	str	r1, [r5, #4]
 80198bc:	60aa      	str	r2, [r5, #8]
 80198be:	60eb      	str	r3, [r5, #12]
 80198c0:	cc03      	ldmia	r4!, {r0, r1}
 80198c2:	6128      	str	r0, [r5, #16]
 80198c4:	6169      	str	r1, [r5, #20]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,d,e");
 80198c6:	687b      	ldr	r3, [r7, #4]
 80198c8:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 80198cc:	4a6a      	ldr	r2, [pc, #424]	; (8019a78 <problem_fetch+0x183b4>)
 80198ce:	461d      	mov	r5, r3
 80198d0:	4614      	mov	r4, r2
 80198d2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80198d4:	6028      	str	r0, [r5, #0]
 80198d6:	6069      	str	r1, [r5, #4]
 80198d8:	60aa      	str	r2, [r5, #8]
 80198da:	60eb      	str	r3, [r5, #12]
 80198dc:	8823      	ldrh	r3, [r4, #0]
 80198de:	822b      	strh	r3, [r5, #16]
			break;
 80198e0:	f002 be20 	b.w	801c524 <problem_fetch+0x1ae60>
		case 721 :
			strcpy(p->name,"POMPOUS POMPADOUR");
 80198e4:	687b      	ldr	r3, [r7, #4]
 80198e6:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80198ea:	4a64      	ldr	r2, [pc, #400]	; (8019a7c <problem_fetch+0x183b8>)
 80198ec:	461d      	mov	r5, r3
 80198ee:	4614      	mov	r4, r2
 80198f0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80198f2:	6028      	str	r0, [r5, #0]
 80198f4:	6069      	str	r1, [r5, #4]
 80198f6:	60aa      	str	r2, [r5, #8]
 80198f8:	60eb      	str	r3, [r5, #12]
 80198fa:	8823      	ldrh	r3, [r4, #0]
 80198fc:	822b      	strh	r3, [r5, #16]
			strcpy(p->grade,"6C");
 80198fe:	687b      	ldr	r3, [r7, #4]
 8019900:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8019904:	4a54      	ldr	r2, [pc, #336]	; (8019a58 <problem_fetch+0x18394>)
 8019906:	8811      	ldrh	r1, [r2, #0]
 8019908:	7892      	ldrb	r2, [r2, #2]
 801990a:	8019      	strh	r1, [r3, #0]
 801990c:	709a      	strb	r2, [r3, #2]
			p->moveSize = 6;
 801990e:	687b      	ldr	r3, [r7, #4]
 8019910:	2206      	movs	r2, #6
 8019912:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,E,G,C,E,A");
 8019914:	687b      	ldr	r3, [r7, #4]
 8019916:	33a4      	adds	r3, #164	; 0xa4
 8019918:	4a59      	ldr	r2, [pc, #356]	; (8019a80 <problem_fetch+0x183bc>)
 801991a:	461c      	mov	r4, r3
 801991c:	4613      	mov	r3, r2
 801991e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8019920:	6020      	str	r0, [r4, #0]
 8019922:	6061      	str	r1, [r4, #4]
 8019924:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,8,10,13,16,18");
 8019926:	687b      	ldr	r3, [r7, #4]
 8019928:	3304      	adds	r3, #4
 801992a:	4a56      	ldr	r2, [pc, #344]	; (8019a84 <problem_fetch+0x183c0>)
 801992c:	461c      	mov	r4, r3
 801992e:	4615      	mov	r5, r2
 8019930:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8019932:	6020      	str	r0, [r4, #0]
 8019934:	6061      	str	r1, [r4, #4]
 8019936:	60a2      	str	r2, [r4, #8]
 8019938:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 801993a:	687b      	ldr	r3, [r7, #4]
 801993c:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8019940:	4a51      	ldr	r2, [pc, #324]	; (8019a88 <problem_fetch+0x183c4>)
 8019942:	461c      	mov	r4, r3
 8019944:	4613      	mov	r3, r2
 8019946:	cb07      	ldmia	r3!, {r0, r1, r2}
 8019948:	6020      	str	r0, [r4, #0]
 801994a:	6061      	str	r1, [r4, #4]
 801994c:	60a2      	str	r2, [r4, #8]
			break;
 801994e:	f002 bde9 	b.w	801c524 <problem_fetch+0x1ae60>
		case 722 :
			strcpy(p->name,"KEEP YOUR FEET DRY");
 8019952:	687b      	ldr	r3, [r7, #4]
 8019954:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8019958:	4a4c      	ldr	r2, [pc, #304]	; (8019a8c <problem_fetch+0x183c8>)
 801995a:	461d      	mov	r5, r3
 801995c:	4614      	mov	r4, r2
 801995e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8019960:	6028      	str	r0, [r5, #0]
 8019962:	6069      	str	r1, [r5, #4]
 8019964:	60aa      	str	r2, [r5, #8]
 8019966:	60eb      	str	r3, [r5, #12]
 8019968:	8823      	ldrh	r3, [r4, #0]
 801996a:	78a2      	ldrb	r2, [r4, #2]
 801996c:	822b      	strh	r3, [r5, #16]
 801996e:	4613      	mov	r3, r2
 8019970:	74ab      	strb	r3, [r5, #18]
			strcpy(p->grade,"6B+");
 8019972:	687b      	ldr	r3, [r7, #4]
 8019974:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8019978:	4a3c      	ldr	r2, [pc, #240]	; (8019a6c <problem_fetch+0x183a8>)
 801997a:	6810      	ldr	r0, [r2, #0]
 801997c:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 801997e:	687b      	ldr	r3, [r7, #4]
 8019980:	2206      	movs	r2, #6
 8019982:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"C,H,G,D,D,D");
 8019984:	687b      	ldr	r3, [r7, #4]
 8019986:	33a4      	adds	r3, #164	; 0xa4
 8019988:	4a41      	ldr	r2, [pc, #260]	; (8019a90 <problem_fetch+0x183cc>)
 801998a:	461c      	mov	r4, r3
 801998c:	4613      	mov	r3, r2
 801998e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8019990:	6020      	str	r0, [r4, #0]
 8019992:	6061      	str	r1, [r4, #4]
 8019994:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,5,9,11,15,18");
 8019996:	687b      	ldr	r3, [r7, #4]
 8019998:	3304      	adds	r3, #4
 801999a:	4a3e      	ldr	r2, [pc, #248]	; (8019a94 <problem_fetch+0x183d0>)
 801999c:	461c      	mov	r4, r3
 801999e:	4613      	mov	r3, r2
 80199a0:	cb07      	ldmia	r3!, {r0, r1, r2}
 80199a2:	6020      	str	r0, [r4, #0]
 80199a4:	6061      	str	r1, [r4, #4]
 80199a6:	60a2      	str	r2, [r4, #8]
 80199a8:	881a      	ldrh	r2, [r3, #0]
 80199aa:	789b      	ldrb	r3, [r3, #2]
 80199ac:	81a2      	strh	r2, [r4, #12]
 80199ae:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish,"s,s,d,d,d,e");
 80199b0:	687b      	ldr	r3, [r7, #4]
 80199b2:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 80199b6:	4a38      	ldr	r2, [pc, #224]	; (8019a98 <problem_fetch+0x183d4>)
 80199b8:	461c      	mov	r4, r3
 80199ba:	4613      	mov	r3, r2
 80199bc:	cb07      	ldmia	r3!, {r0, r1, r2}
 80199be:	6020      	str	r0, [r4, #0]
 80199c0:	6061      	str	r1, [r4, #4]
 80199c2:	60a2      	str	r2, [r4, #8]
			break;
 80199c4:	f002 bdae 	b.w	801c524 <problem_fetch+0x1ae60>
		case 723 :
			strcpy(p->name,"WARM UP A5");
 80199c8:	687b      	ldr	r3, [r7, #4]
 80199ca:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80199ce:	4933      	ldr	r1, [pc, #204]	; (8019a9c <problem_fetch+0x183d8>)
 80199d0:	461a      	mov	r2, r3
 80199d2:	460b      	mov	r3, r1
 80199d4:	cb03      	ldmia	r3!, {r0, r1}
 80199d6:	6010      	str	r0, [r2, #0]
 80199d8:	6051      	str	r1, [r2, #4]
 80199da:	8819      	ldrh	r1, [r3, #0]
 80199dc:	789b      	ldrb	r3, [r3, #2]
 80199de:	8111      	strh	r1, [r2, #8]
 80199e0:	7293      	strb	r3, [r2, #10]
			strcpy(p->grade,"6B+");
 80199e2:	687b      	ldr	r3, [r7, #4]
 80199e4:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80199e8:	4a20      	ldr	r2, [pc, #128]	; (8019a6c <problem_fetch+0x183a8>)
 80199ea:	6810      	ldr	r0, [r2, #0]
 80199ec:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 80199ee:	687b      	ldr	r3, [r7, #4]
 80199f0:	2207      	movs	r2, #7
 80199f2:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"B,E,E,F,E,H,I");
 80199f4:	687b      	ldr	r3, [r7, #4]
 80199f6:	33a4      	adds	r3, #164	; 0xa4
 80199f8:	4a29      	ldr	r2, [pc, #164]	; (8019aa0 <problem_fetch+0x183dc>)
 80199fa:	461c      	mov	r4, r3
 80199fc:	4613      	mov	r3, r2
 80199fe:	cb07      	ldmia	r3!, {r0, r1, r2}
 8019a00:	6020      	str	r0, [r4, #0]
 8019a02:	6061      	str	r1, [r4, #4]
 8019a04:	60a2      	str	r2, [r4, #8]
 8019a06:	881b      	ldrh	r3, [r3, #0]
 8019a08:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"6,6,8,11,14,16,18");
 8019a0a:	687b      	ldr	r3, [r7, #4]
 8019a0c:	3304      	adds	r3, #4
 8019a0e:	4a25      	ldr	r2, [pc, #148]	; (8019aa4 <problem_fetch+0x183e0>)
 8019a10:	461d      	mov	r5, r3
 8019a12:	4614      	mov	r4, r2
 8019a14:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8019a16:	6028      	str	r0, [r5, #0]
 8019a18:	6069      	str	r1, [r5, #4]
 8019a1a:	60aa      	str	r2, [r5, #8]
 8019a1c:	60eb      	str	r3, [r5, #12]
 8019a1e:	8823      	ldrh	r3, [r4, #0]
 8019a20:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,s,d,d,d,d,e");
 8019a22:	687b      	ldr	r3, [r7, #4]
 8019a24:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8019a28:	4a0e      	ldr	r2, [pc, #56]	; (8019a64 <problem_fetch+0x183a0>)
 8019a2a:	461c      	mov	r4, r3
 8019a2c:	4613      	mov	r3, r2
 8019a2e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8019a30:	6020      	str	r0, [r4, #0]
 8019a32:	6061      	str	r1, [r4, #4]
 8019a34:	60a2      	str	r2, [r4, #8]
 8019a36:	881b      	ldrh	r3, [r3, #0]
 8019a38:	81a3      	strh	r3, [r4, #12]
			break;
 8019a3a:	f002 bd73 	b.w	801c524 <problem_fetch+0x1ae60>
 8019a3e:	bf00      	nop
 8019a40:	0802bf84 	.word	0x0802bf84
 8019a44:	080239f4 	.word	0x080239f4
 8019a48:	0802bf94 	.word	0x0802bf94
 8019a4c:	08024de4 	.word	0x08024de4
 8019a50:	080239dc 	.word	0x080239dc
 8019a54:	0802bfa4 	.word	0x0802bfa4
 8019a58:	08023920 	.word	0x08023920
 8019a5c:	0802bfb0 	.word	0x0802bfb0
 8019a60:	0802bfc0 	.word	0x0802bfc0
 8019a64:	080238cc 	.word	0x080238cc
 8019a68:	0802bfd4 	.word	0x0802bfd4
 8019a6c:	08023854 	.word	0x08023854
 8019a70:	0802bfe4 	.word	0x0802bfe4
 8019a74:	08028030 	.word	0x08028030
 8019a78:	08024838 	.word	0x08024838
 8019a7c:	0802bff8 	.word	0x0802bff8
 8019a80:	0802c00c 	.word	0x0802c00c
 8019a84:	08025f28 	.word	0x08025f28
 8019a88:	08023bf0 	.word	0x08023bf0
 8019a8c:	0802c018 	.word	0x0802c018
 8019a90:	0802c02c 	.word	0x0802c02c
 8019a94:	0802c038 	.word	0x0802c038
 8019a98:	08023834 	.word	0x08023834
 8019a9c:	0802c048 	.word	0x0802c048
 8019aa0:	0802c054 	.word	0x0802c054
 8019aa4:	08023ea0 	.word	0x08023ea0
		case 724 :
			strcpy(p->name,"WARM UP A3");
 8019aa8:	687b      	ldr	r3, [r7, #4]
 8019aaa:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8019aae:	49a8      	ldr	r1, [pc, #672]	; (8019d50 <problem_fetch+0x1868c>)
 8019ab0:	461a      	mov	r2, r3
 8019ab2:	460b      	mov	r3, r1
 8019ab4:	cb03      	ldmia	r3!, {r0, r1}
 8019ab6:	6010      	str	r0, [r2, #0]
 8019ab8:	6051      	str	r1, [r2, #4]
 8019aba:	8819      	ldrh	r1, [r3, #0]
 8019abc:	789b      	ldrb	r3, [r3, #2]
 8019abe:	8111      	strh	r1, [r2, #8]
 8019ac0:	7293      	strb	r3, [r2, #10]
			strcpy(p->grade,"6B+");
 8019ac2:	687b      	ldr	r3, [r7, #4]
 8019ac4:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8019ac8:	4aa2      	ldr	r2, [pc, #648]	; (8019d54 <problem_fetch+0x18690>)
 8019aca:	6810      	ldr	r0, [r2, #0]
 8019acc:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 8019ace:	687b      	ldr	r3, [r7, #4]
 8019ad0:	2206      	movs	r2, #6
 8019ad2:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,J,H,G,I,I");
 8019ad4:	687b      	ldr	r3, [r7, #4]
 8019ad6:	33a4      	adds	r3, #164	; 0xa4
 8019ad8:	4a9f      	ldr	r2, [pc, #636]	; (8019d58 <problem_fetch+0x18694>)
 8019ada:	461c      	mov	r4, r3
 8019adc:	4613      	mov	r3, r2
 8019ade:	cb07      	ldmia	r3!, {r0, r1, r2}
 8019ae0:	6020      	str	r0, [r4, #0]
 8019ae2:	6061      	str	r1, [r4, #4]
 8019ae4:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"6,5,10,14,14,18");
 8019ae6:	687b      	ldr	r3, [r7, #4]
 8019ae8:	3304      	adds	r3, #4
 8019aea:	4a9c      	ldr	r2, [pc, #624]	; (8019d5c <problem_fetch+0x18698>)
 8019aec:	461c      	mov	r4, r3
 8019aee:	4615      	mov	r5, r2
 8019af0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8019af2:	6020      	str	r0, [r4, #0]
 8019af4:	6061      	str	r1, [r4, #4]
 8019af6:	60a2      	str	r2, [r4, #8]
 8019af8:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,s,d,d,d,e");
 8019afa:	687b      	ldr	r3, [r7, #4]
 8019afc:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8019b00:	4a97      	ldr	r2, [pc, #604]	; (8019d60 <problem_fetch+0x1869c>)
 8019b02:	461c      	mov	r4, r3
 8019b04:	4613      	mov	r3, r2
 8019b06:	cb07      	ldmia	r3!, {r0, r1, r2}
 8019b08:	6020      	str	r0, [r4, #0]
 8019b0a:	6061      	str	r1, [r4, #4]
 8019b0c:	60a2      	str	r2, [r4, #8]
			break;
 8019b0e:	f002 bd09 	b.w	801c524 <problem_fetch+0x1ae60>
		case 725 :
			strcpy(p->name,"WARM UP A2");
 8019b12:	687b      	ldr	r3, [r7, #4]
 8019b14:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8019b18:	4992      	ldr	r1, [pc, #584]	; (8019d64 <problem_fetch+0x186a0>)
 8019b1a:	461a      	mov	r2, r3
 8019b1c:	460b      	mov	r3, r1
 8019b1e:	cb03      	ldmia	r3!, {r0, r1}
 8019b20:	6010      	str	r0, [r2, #0]
 8019b22:	6051      	str	r1, [r2, #4]
 8019b24:	8819      	ldrh	r1, [r3, #0]
 8019b26:	789b      	ldrb	r3, [r3, #2]
 8019b28:	8111      	strh	r1, [r2, #8]
 8019b2a:	7293      	strb	r3, [r2, #10]
			strcpy(p->grade,"6B+");
 8019b2c:	687b      	ldr	r3, [r7, #4]
 8019b2e:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8019b32:	4a88      	ldr	r2, [pc, #544]	; (8019d54 <problem_fetch+0x18690>)
 8019b34:	6810      	ldr	r0, [r2, #0]
 8019b36:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 8019b38:	687b      	ldr	r3, [r7, #4]
 8019b3a:	2207      	movs	r2, #7
 8019b3c:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,G,G,E,D,I,A");
 8019b3e:	687b      	ldr	r3, [r7, #4]
 8019b40:	33a4      	adds	r3, #164	; 0xa4
 8019b42:	4a89      	ldr	r2, [pc, #548]	; (8019d68 <problem_fetch+0x186a4>)
 8019b44:	461c      	mov	r4, r3
 8019b46:	4613      	mov	r3, r2
 8019b48:	cb07      	ldmia	r3!, {r0, r1, r2}
 8019b4a:	6020      	str	r0, [r4, #0]
 8019b4c:	6061      	str	r1, [r4, #4]
 8019b4e:	60a2      	str	r2, [r4, #8]
 8019b50:	881b      	ldrh	r3, [r3, #0]
 8019b52:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,6,9,12,15,7,18");
 8019b54:	687b      	ldr	r3, [r7, #4]
 8019b56:	3304      	adds	r3, #4
 8019b58:	4a84      	ldr	r2, [pc, #528]	; (8019d6c <problem_fetch+0x186a8>)
 8019b5a:	461d      	mov	r5, r3
 8019b5c:	4614      	mov	r4, r2
 8019b5e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8019b60:	6028      	str	r0, [r5, #0]
 8019b62:	6069      	str	r1, [r5, #4]
 8019b64:	60aa      	str	r2, [r5, #8]
 8019b66:	60eb      	str	r3, [r5, #12]
 8019b68:	7823      	ldrb	r3, [r4, #0]
 8019b6a:	742b      	strb	r3, [r5, #16]
			strcpy(p->startFinish,"s,s,d,d,d,d,e");
 8019b6c:	687b      	ldr	r3, [r7, #4]
 8019b6e:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8019b72:	4a7f      	ldr	r2, [pc, #508]	; (8019d70 <problem_fetch+0x186ac>)
 8019b74:	461c      	mov	r4, r3
 8019b76:	4613      	mov	r3, r2
 8019b78:	cb07      	ldmia	r3!, {r0, r1, r2}
 8019b7a:	6020      	str	r0, [r4, #0]
 8019b7c:	6061      	str	r1, [r4, #4]
 8019b7e:	60a2      	str	r2, [r4, #8]
 8019b80:	881b      	ldrh	r3, [r3, #0]
 8019b82:	81a3      	strh	r3, [r4, #12]
			break;
 8019b84:	f002 bcce 	b.w	801c524 <problem_fetch+0x1ae60>
		case 726 :
			strcpy(p->name,"WARM UP A1");
 8019b88:	687b      	ldr	r3, [r7, #4]
 8019b8a:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8019b8e:	4979      	ldr	r1, [pc, #484]	; (8019d74 <problem_fetch+0x186b0>)
 8019b90:	461a      	mov	r2, r3
 8019b92:	460b      	mov	r3, r1
 8019b94:	cb03      	ldmia	r3!, {r0, r1}
 8019b96:	6010      	str	r0, [r2, #0]
 8019b98:	6051      	str	r1, [r2, #4]
 8019b9a:	8819      	ldrh	r1, [r3, #0]
 8019b9c:	789b      	ldrb	r3, [r3, #2]
 8019b9e:	8111      	strh	r1, [r2, #8]
 8019ba0:	7293      	strb	r3, [r2, #10]
			strcpy(p->grade,"6B+");
 8019ba2:	687b      	ldr	r3, [r7, #4]
 8019ba4:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8019ba8:	4a6a      	ldr	r2, [pc, #424]	; (8019d54 <problem_fetch+0x18690>)
 8019baa:	6810      	ldr	r0, [r2, #0]
 8019bac:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 8019bae:	687b      	ldr	r3, [r7, #4]
 8019bb0:	2206      	movs	r2, #6
 8019bb2:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,H,E,F,D,D");
 8019bb4:	687b      	ldr	r3, [r7, #4]
 8019bb6:	33a4      	adds	r3, #164	; 0xa4
 8019bb8:	4a6f      	ldr	r2, [pc, #444]	; (8019d78 <problem_fetch+0x186b4>)
 8019bba:	461c      	mov	r4, r3
 8019bbc:	4613      	mov	r3, r2
 8019bbe:	cb07      	ldmia	r3!, {r0, r1, r2}
 8019bc0:	6020      	str	r0, [r4, #0]
 8019bc2:	6061      	str	r1, [r4, #4]
 8019bc4:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,8,8,11,15,18");
 8019bc6:	687b      	ldr	r3, [r7, #4]
 8019bc8:	3304      	adds	r3, #4
 8019bca:	4a6c      	ldr	r2, [pc, #432]	; (8019d7c <problem_fetch+0x186b8>)
 8019bcc:	461c      	mov	r4, r3
 8019bce:	4613      	mov	r3, r2
 8019bd0:	cb07      	ldmia	r3!, {r0, r1, r2}
 8019bd2:	6020      	str	r0, [r4, #0]
 8019bd4:	6061      	str	r1, [r4, #4]
 8019bd6:	60a2      	str	r2, [r4, #8]
 8019bd8:	881a      	ldrh	r2, [r3, #0]
 8019bda:	789b      	ldrb	r3, [r3, #2]
 8019bdc:	81a2      	strh	r2, [r4, #12]
 8019bde:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 8019be0:	687b      	ldr	r3, [r7, #4]
 8019be2:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8019be6:	4a66      	ldr	r2, [pc, #408]	; (8019d80 <problem_fetch+0x186bc>)
 8019be8:	461c      	mov	r4, r3
 8019bea:	4613      	mov	r3, r2
 8019bec:	cb07      	ldmia	r3!, {r0, r1, r2}
 8019bee:	6020      	str	r0, [r4, #0]
 8019bf0:	6061      	str	r1, [r4, #4]
 8019bf2:	60a2      	str	r2, [r4, #8]
			break;
 8019bf4:	f002 bc96 	b.w	801c524 <problem_fetch+0x1ae60>
		case 727 :
			strcpy(p->name,"MARYJANEFIGAROTTA");
 8019bf8:	687b      	ldr	r3, [r7, #4]
 8019bfa:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8019bfe:	4a61      	ldr	r2, [pc, #388]	; (8019d84 <problem_fetch+0x186c0>)
 8019c00:	461d      	mov	r5, r3
 8019c02:	4614      	mov	r4, r2
 8019c04:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8019c06:	6028      	str	r0, [r5, #0]
 8019c08:	6069      	str	r1, [r5, #4]
 8019c0a:	60aa      	str	r2, [r5, #8]
 8019c0c:	60eb      	str	r3, [r5, #12]
 8019c0e:	8823      	ldrh	r3, [r4, #0]
 8019c10:	822b      	strh	r3, [r5, #16]
			strcpy(p->grade,"7A+");
 8019c12:	687b      	ldr	r3, [r7, #4]
 8019c14:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8019c18:	4a5b      	ldr	r2, [pc, #364]	; (8019d88 <problem_fetch+0x186c4>)
 8019c1a:	6810      	ldr	r0, [r2, #0]
 8019c1c:	6018      	str	r0, [r3, #0]
			p->moveSize = 5;
 8019c1e:	687b      	ldr	r3, [r7, #4]
 8019c20:	2205      	movs	r2, #5
 8019c22:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"E,H,H,I,I");
 8019c24:	687b      	ldr	r3, [r7, #4]
 8019c26:	33a4      	adds	r3, #164	; 0xa4
 8019c28:	4958      	ldr	r1, [pc, #352]	; (8019d8c <problem_fetch+0x186c8>)
 8019c2a:	461a      	mov	r2, r3
 8019c2c:	460b      	mov	r3, r1
 8019c2e:	cb03      	ldmia	r3!, {r0, r1}
 8019c30:	6010      	str	r0, [r2, #0]
 8019c32:	6051      	str	r1, [r2, #4]
 8019c34:	881b      	ldrh	r3, [r3, #0]
 8019c36:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"6,5,10,15,18");
 8019c38:	687b      	ldr	r3, [r7, #4]
 8019c3a:	3304      	adds	r3, #4
 8019c3c:	4a54      	ldr	r2, [pc, #336]	; (8019d90 <problem_fetch+0x186cc>)
 8019c3e:	461c      	mov	r4, r3
 8019c40:	4613      	mov	r3, r2
 8019c42:	cb07      	ldmia	r3!, {r0, r1, r2}
 8019c44:	6020      	str	r0, [r4, #0]
 8019c46:	6061      	str	r1, [r4, #4]
 8019c48:	60a2      	str	r2, [r4, #8]
 8019c4a:	781b      	ldrb	r3, [r3, #0]
 8019c4c:	7323      	strb	r3, [r4, #12]
			strcpy(p->startFinish,"s,s,d,d,e");
 8019c4e:	687b      	ldr	r3, [r7, #4]
 8019c50:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8019c54:	494f      	ldr	r1, [pc, #316]	; (8019d94 <problem_fetch+0x186d0>)
 8019c56:	461a      	mov	r2, r3
 8019c58:	460b      	mov	r3, r1
 8019c5a:	cb03      	ldmia	r3!, {r0, r1}
 8019c5c:	6010      	str	r0, [r2, #0]
 8019c5e:	6051      	str	r1, [r2, #4]
 8019c60:	881b      	ldrh	r3, [r3, #0]
 8019c62:	8113      	strh	r3, [r2, #8]
			break;
 8019c64:	f002 bc5e 	b.w	801c524 <problem_fetch+0x1ae60>
		case 728 :
			strcpy(p->name,"BROWN FROWN");
 8019c68:	687b      	ldr	r3, [r7, #4]
 8019c6a:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8019c6e:	4a4a      	ldr	r2, [pc, #296]	; (8019d98 <problem_fetch+0x186d4>)
 8019c70:	461c      	mov	r4, r3
 8019c72:	4613      	mov	r3, r2
 8019c74:	cb07      	ldmia	r3!, {r0, r1, r2}
 8019c76:	6020      	str	r0, [r4, #0]
 8019c78:	6061      	str	r1, [r4, #4]
 8019c7a:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade,"6B+");
 8019c7c:	687b      	ldr	r3, [r7, #4]
 8019c7e:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8019c82:	4a34      	ldr	r2, [pc, #208]	; (8019d54 <problem_fetch+0x18690>)
 8019c84:	6810      	ldr	r0, [r2, #0]
 8019c86:	6018      	str	r0, [r3, #0]
			p->moveSize = 8;
 8019c88:	687b      	ldr	r3, [r7, #4]
 8019c8a:	2208      	movs	r2, #8
 8019c8c:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,E,C,H,F,C,E,D");
 8019c8e:	687b      	ldr	r3, [r7, #4]
 8019c90:	33a4      	adds	r3, #164	; 0xa4
 8019c92:	4a42      	ldr	r2, [pc, #264]	; (8019d9c <problem_fetch+0x186d8>)
 8019c94:	461c      	mov	r4, r3
 8019c96:	4615      	mov	r5, r2
 8019c98:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8019c9a:	6020      	str	r0, [r4, #0]
 8019c9c:	6061      	str	r1, [r4, #4]
 8019c9e:	60a2      	str	r2, [r4, #8]
 8019ca0:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,6,8,8,11,13,16,18");
 8019ca2:	687b      	ldr	r3, [r7, #4]
 8019ca4:	3304      	adds	r3, #4
 8019ca6:	4a3e      	ldr	r2, [pc, #248]	; (8019da0 <problem_fetch+0x186dc>)
 8019ca8:	461d      	mov	r5, r3
 8019caa:	4614      	mov	r4, r2
 8019cac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8019cae:	6028      	str	r0, [r5, #0]
 8019cb0:	6069      	str	r1, [r5, #4]
 8019cb2:	60aa      	str	r2, [r5, #8]
 8019cb4:	60eb      	str	r3, [r5, #12]
 8019cb6:	6820      	ldr	r0, [r4, #0]
 8019cb8:	6128      	str	r0, [r5, #16]
			strcpy(p->startFinish,"s,d,d,d,d,d,d,e");
 8019cba:	687b      	ldr	r3, [r7, #4]
 8019cbc:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8019cc0:	4a38      	ldr	r2, [pc, #224]	; (8019da4 <problem_fetch+0x186e0>)
 8019cc2:	461c      	mov	r4, r3
 8019cc4:	4615      	mov	r5, r2
 8019cc6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8019cc8:	6020      	str	r0, [r4, #0]
 8019cca:	6061      	str	r1, [r4, #4]
 8019ccc:	60a2      	str	r2, [r4, #8]
 8019cce:	60e3      	str	r3, [r4, #12]
			break;
 8019cd0:	f002 bc28 	b.w	801c524 <problem_fetch+0x1ae60>
		case 729 :
			strcpy(p->name,"LU'S FINEST");
 8019cd4:	687b      	ldr	r3, [r7, #4]
 8019cd6:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8019cda:	4a33      	ldr	r2, [pc, #204]	; (8019da8 <problem_fetch+0x186e4>)
 8019cdc:	461c      	mov	r4, r3
 8019cde:	4613      	mov	r3, r2
 8019ce0:	cb07      	ldmia	r3!, {r0, r1, r2}
 8019ce2:	6020      	str	r0, [r4, #0]
 8019ce4:	6061      	str	r1, [r4, #4]
 8019ce6:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade,"7A");
 8019ce8:	687b      	ldr	r3, [r7, #4]
 8019cea:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8019cee:	4a2f      	ldr	r2, [pc, #188]	; (8019dac <problem_fetch+0x186e8>)
 8019cf0:	8811      	ldrh	r1, [r2, #0]
 8019cf2:	7892      	ldrb	r2, [r2, #2]
 8019cf4:	8019      	strh	r1, [r3, #0]
 8019cf6:	709a      	strb	r2, [r3, #2]
			p->moveSize = 9;
 8019cf8:	687b      	ldr	r3, [r7, #4]
 8019cfa:	2209      	movs	r2, #9
 8019cfc:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"B,D,B,G,E,F,J,H,I");
 8019cfe:	687b      	ldr	r3, [r7, #4]
 8019d00:	33a4      	adds	r3, #164	; 0xa4
 8019d02:	4a2b      	ldr	r2, [pc, #172]	; (8019db0 <problem_fetch+0x186ec>)
 8019d04:	461d      	mov	r5, r3
 8019d06:	4614      	mov	r4, r2
 8019d08:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8019d0a:	6028      	str	r0, [r5, #0]
 8019d0c:	6069      	str	r1, [r5, #4]
 8019d0e:	60aa      	str	r2, [r5, #8]
 8019d10:	60eb      	str	r3, [r5, #12]
 8019d12:	8823      	ldrh	r3, [r4, #0]
 8019d14:	822b      	strh	r3, [r5, #16]
			strcpy(p->moveNumbers,"6,7,10,4,12,13,13,16,18");
 8019d16:	687b      	ldr	r3, [r7, #4]
 8019d18:	3304      	adds	r3, #4
 8019d1a:	4a26      	ldr	r2, [pc, #152]	; (8019db4 <problem_fetch+0x186f0>)
 8019d1c:	461d      	mov	r5, r3
 8019d1e:	4614      	mov	r4, r2
 8019d20:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8019d22:	6028      	str	r0, [r5, #0]
 8019d24:	6069      	str	r1, [r5, #4]
 8019d26:	60aa      	str	r2, [r5, #8]
 8019d28:	60eb      	str	r3, [r5, #12]
 8019d2a:	cc03      	ldmia	r4!, {r0, r1}
 8019d2c:	6128      	str	r0, [r5, #16]
 8019d2e:	6169      	str	r1, [r5, #20]
			strcpy(p->startFinish,"s,d,d,d,d,d,d,d,e");
 8019d30:	687b      	ldr	r3, [r7, #4]
 8019d32:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8019d36:	4a20      	ldr	r2, [pc, #128]	; (8019db8 <problem_fetch+0x186f4>)
 8019d38:	461d      	mov	r5, r3
 8019d3a:	4614      	mov	r4, r2
 8019d3c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8019d3e:	6028      	str	r0, [r5, #0]
 8019d40:	6069      	str	r1, [r5, #4]
 8019d42:	60aa      	str	r2, [r5, #8]
 8019d44:	60eb      	str	r3, [r5, #12]
 8019d46:	8823      	ldrh	r3, [r4, #0]
 8019d48:	822b      	strh	r3, [r5, #16]
			break;
 8019d4a:	f002 bbeb 	b.w	801c524 <problem_fetch+0x1ae60>
 8019d4e:	bf00      	nop
 8019d50:	0802c064 	.word	0x0802c064
 8019d54:	08023854 	.word	0x08023854
 8019d58:	0802c070 	.word	0x0802c070
 8019d5c:	0802bdf4 	.word	0x0802bdf4
 8019d60:	08023834 	.word	0x08023834
 8019d64:	0802c07c 	.word	0x0802c07c
 8019d68:	0802c088 	.word	0x0802c088
 8019d6c:	0802c098 	.word	0x0802c098
 8019d70:	080238cc 	.word	0x080238cc
 8019d74:	0802c0ac 	.word	0x0802c0ac
 8019d78:	0802c0b8 	.word	0x0802c0b8
 8019d7c:	0802c0c4 	.word	0x0802c0c4
 8019d80:	08023bf0 	.word	0x08023bf0
 8019d84:	0802c0d4 	.word	0x0802c0d4
 8019d88:	080239f4 	.word	0x080239f4
 8019d8c:	0802c0e8 	.word	0x0802c0e8
 8019d90:	0802c0f4 	.word	0x0802c0f4
 8019d94:	08023f34 	.word	0x08023f34
 8019d98:	0802c104 	.word	0x0802c104
 8019d9c:	0802c110 	.word	0x0802c110
 8019da0:	0802c120 	.word	0x0802c120
 8019da4:	08023a64 	.word	0x08023a64
 8019da8:	0802c134 	.word	0x0802c134
 8019dac:	08023814 	.word	0x08023814
 8019db0:	0802c140 	.word	0x0802c140
 8019db4:	0802c154 	.word	0x0802c154
 8019db8:	0802570c 	.word	0x0802570c
		case 730 :
			strcpy(p->name,"MADDEKÈ");
 8019dbc:	687b      	ldr	r3, [r7, #4]
 8019dbe:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8019dc2:	49c0      	ldr	r1, [pc, #768]	; (801a0c4 <problem_fetch+0x18a00>)
 8019dc4:	461a      	mov	r2, r3
 8019dc6:	460b      	mov	r3, r1
 8019dc8:	cb03      	ldmia	r3!, {r0, r1}
 8019dca:	6010      	str	r0, [r2, #0]
 8019dcc:	6051      	str	r1, [r2, #4]
 8019dce:	781b      	ldrb	r3, [r3, #0]
 8019dd0:	7213      	strb	r3, [r2, #8]
			strcpy(p->grade,"7B+");
 8019dd2:	687b      	ldr	r3, [r7, #4]
 8019dd4:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8019dd8:	4abb      	ldr	r2, [pc, #748]	; (801a0c8 <problem_fetch+0x18a04>)
 8019dda:	6810      	ldr	r0, [r2, #0]
 8019ddc:	6018      	str	r0, [r3, #0]
			p->moveSize = 5;
 8019dde:	687b      	ldr	r3, [r7, #4]
 8019de0:	2205      	movs	r2, #5
 8019de2:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,I,G,G,D");
 8019de4:	687b      	ldr	r3, [r7, #4]
 8019de6:	33a4      	adds	r3, #164	; 0xa4
 8019de8:	49b8      	ldr	r1, [pc, #736]	; (801a0cc <problem_fetch+0x18a08>)
 8019dea:	461a      	mov	r2, r3
 8019dec:	460b      	mov	r3, r1
 8019dee:	cb03      	ldmia	r3!, {r0, r1}
 8019df0:	6010      	str	r0, [r2, #0]
 8019df2:	6051      	str	r1, [r2, #4]
 8019df4:	881b      	ldrh	r3, [r3, #0]
 8019df6:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"5,7,10,14,18");
 8019df8:	687b      	ldr	r3, [r7, #4]
 8019dfa:	3304      	adds	r3, #4
 8019dfc:	4ab4      	ldr	r2, [pc, #720]	; (801a0d0 <problem_fetch+0x18a0c>)
 8019dfe:	461c      	mov	r4, r3
 8019e00:	4613      	mov	r3, r2
 8019e02:	cb07      	ldmia	r3!, {r0, r1, r2}
 8019e04:	6020      	str	r0, [r4, #0]
 8019e06:	6061      	str	r1, [r4, #4]
 8019e08:	60a2      	str	r2, [r4, #8]
 8019e0a:	781b      	ldrb	r3, [r3, #0]
 8019e0c:	7323      	strb	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,e");
 8019e0e:	687b      	ldr	r3, [r7, #4]
 8019e10:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8019e14:	49af      	ldr	r1, [pc, #700]	; (801a0d4 <problem_fetch+0x18a10>)
 8019e16:	461a      	mov	r2, r3
 8019e18:	460b      	mov	r3, r1
 8019e1a:	cb03      	ldmia	r3!, {r0, r1}
 8019e1c:	6010      	str	r0, [r2, #0]
 8019e1e:	6051      	str	r1, [r2, #4]
 8019e20:	881b      	ldrh	r3, [r3, #0]
 8019e22:	8113      	strh	r3, [r2, #8]
			break;
 8019e24:	f002 bb7e 	b.w	801c524 <problem_fetch+0x1ae60>
		case 731 :
			strcpy(p->name,"MEZZIF");
 8019e28:	687b      	ldr	r3, [r7, #4]
 8019e2a:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8019e2e:	4aaa      	ldr	r2, [pc, #680]	; (801a0d8 <problem_fetch+0x18a14>)
 8019e30:	6810      	ldr	r0, [r2, #0]
 8019e32:	6018      	str	r0, [r3, #0]
 8019e34:	8891      	ldrh	r1, [r2, #4]
 8019e36:	7992      	ldrb	r2, [r2, #6]
 8019e38:	8099      	strh	r1, [r3, #4]
 8019e3a:	719a      	strb	r2, [r3, #6]
			strcpy(p->grade,"7C+");
 8019e3c:	687b      	ldr	r3, [r7, #4]
 8019e3e:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8019e42:	4aa6      	ldr	r2, [pc, #664]	; (801a0dc <problem_fetch+0x18a18>)
 8019e44:	6810      	ldr	r0, [r2, #0]
 8019e46:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 8019e48:	687b      	ldr	r3, [r7, #4]
 8019e4a:	2206      	movs	r2, #6
 8019e4c:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"B,C,E,F,J,I");
 8019e4e:	687b      	ldr	r3, [r7, #4]
 8019e50:	33a4      	adds	r3, #164	; 0xa4
 8019e52:	4aa3      	ldr	r2, [pc, #652]	; (801a0e0 <problem_fetch+0x18a1c>)
 8019e54:	461c      	mov	r4, r3
 8019e56:	4613      	mov	r3, r2
 8019e58:	cb07      	ldmia	r3!, {r0, r1, r2}
 8019e5a:	6020      	str	r0, [r4, #0]
 8019e5c:	6061      	str	r1, [r4, #4]
 8019e5e:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"6,5,9,13,12,18");
 8019e60:	687b      	ldr	r3, [r7, #4]
 8019e62:	3304      	adds	r3, #4
 8019e64:	4a9f      	ldr	r2, [pc, #636]	; (801a0e4 <problem_fetch+0x18a20>)
 8019e66:	461c      	mov	r4, r3
 8019e68:	4613      	mov	r3, r2
 8019e6a:	cb07      	ldmia	r3!, {r0, r1, r2}
 8019e6c:	6020      	str	r0, [r4, #0]
 8019e6e:	6061      	str	r1, [r4, #4]
 8019e70:	60a2      	str	r2, [r4, #8]
 8019e72:	881a      	ldrh	r2, [r3, #0]
 8019e74:	789b      	ldrb	r3, [r3, #2]
 8019e76:	81a2      	strh	r2, [r4, #12]
 8019e78:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish,"s,s,d,d,d,e");
 8019e7a:	687b      	ldr	r3, [r7, #4]
 8019e7c:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8019e80:	4a99      	ldr	r2, [pc, #612]	; (801a0e8 <problem_fetch+0x18a24>)
 8019e82:	461c      	mov	r4, r3
 8019e84:	4613      	mov	r3, r2
 8019e86:	cb07      	ldmia	r3!, {r0, r1, r2}
 8019e88:	6020      	str	r0, [r4, #0]
 8019e8a:	6061      	str	r1, [r4, #4]
 8019e8c:	60a2      	str	r2, [r4, #8]
			break;
 8019e8e:	f002 bb49 	b.w	801c524 <problem_fetch+0x1ae60>
		case 732 :
			strcpy(p->name,"BIG HOLDZ");
 8019e92:	687b      	ldr	r3, [r7, #4]
 8019e94:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8019e98:	4994      	ldr	r1, [pc, #592]	; (801a0ec <problem_fetch+0x18a28>)
 8019e9a:	461a      	mov	r2, r3
 8019e9c:	460b      	mov	r3, r1
 8019e9e:	cb03      	ldmia	r3!, {r0, r1}
 8019ea0:	6010      	str	r0, [r2, #0]
 8019ea2:	6051      	str	r1, [r2, #4]
 8019ea4:	881b      	ldrh	r3, [r3, #0]
 8019ea6:	8113      	strh	r3, [r2, #8]
			strcpy(p->grade,"6B+");
 8019ea8:	687b      	ldr	r3, [r7, #4]
 8019eaa:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8019eae:	4a90      	ldr	r2, [pc, #576]	; (801a0f0 <problem_fetch+0x18a2c>)
 8019eb0:	6810      	ldr	r0, [r2, #0]
 8019eb2:	6018      	str	r0, [r3, #0]
			p->moveSize = 5;
 8019eb4:	687b      	ldr	r3, [r7, #4]
 8019eb6:	2205      	movs	r2, #5
 8019eb8:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,H,C,E,A");
 8019eba:	687b      	ldr	r3, [r7, #4]
 8019ebc:	33a4      	adds	r3, #164	; 0xa4
 8019ebe:	498d      	ldr	r1, [pc, #564]	; (801a0f4 <problem_fetch+0x18a30>)
 8019ec0:	461a      	mov	r2, r3
 8019ec2:	460b      	mov	r3, r1
 8019ec4:	cb03      	ldmia	r3!, {r0, r1}
 8019ec6:	6010      	str	r0, [r2, #0]
 8019ec8:	6051      	str	r1, [r2, #4]
 8019eca:	881b      	ldrh	r3, [r3, #0]
 8019ecc:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"4,10,13,16,18");
 8019ece:	687b      	ldr	r3, [r7, #4]
 8019ed0:	3304      	adds	r3, #4
 8019ed2:	4a89      	ldr	r2, [pc, #548]	; (801a0f8 <problem_fetch+0x18a34>)
 8019ed4:	461c      	mov	r4, r3
 8019ed6:	4613      	mov	r3, r2
 8019ed8:	cb07      	ldmia	r3!, {r0, r1, r2}
 8019eda:	6020      	str	r0, [r4, #0]
 8019edc:	6061      	str	r1, [r4, #4]
 8019ede:	60a2      	str	r2, [r4, #8]
 8019ee0:	881b      	ldrh	r3, [r3, #0]
 8019ee2:	81a3      	strh	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,e");
 8019ee4:	687b      	ldr	r3, [r7, #4]
 8019ee6:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8019eea:	497a      	ldr	r1, [pc, #488]	; (801a0d4 <problem_fetch+0x18a10>)
 8019eec:	461a      	mov	r2, r3
 8019eee:	460b      	mov	r3, r1
 8019ef0:	cb03      	ldmia	r3!, {r0, r1}
 8019ef2:	6010      	str	r0, [r2, #0]
 8019ef4:	6051      	str	r1, [r2, #4]
 8019ef6:	881b      	ldrh	r3, [r3, #0]
 8019ef8:	8113      	strh	r3, [r2, #8]
			break;
 8019efa:	f002 bb13 	b.w	801c524 <problem_fetch+0x1ae60>
		case 733 :
			strcpy(p->name,"TIA");
 8019efe:	687b      	ldr	r3, [r7, #4]
 8019f00:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8019f04:	4a7d      	ldr	r2, [pc, #500]	; (801a0fc <problem_fetch+0x18a38>)
 8019f06:	6810      	ldr	r0, [r2, #0]
 8019f08:	6018      	str	r0, [r3, #0]
			strcpy(p->grade,"6B+");
 8019f0a:	687b      	ldr	r3, [r7, #4]
 8019f0c:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8019f10:	4a77      	ldr	r2, [pc, #476]	; (801a0f0 <problem_fetch+0x18a2c>)
 8019f12:	6810      	ldr	r0, [r2, #0]
 8019f14:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 8019f16:	687b      	ldr	r3, [r7, #4]
 8019f18:	2207      	movs	r2, #7
 8019f1a:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,E,F,E,I,H,I");
 8019f1c:	687b      	ldr	r3, [r7, #4]
 8019f1e:	33a4      	adds	r3, #164	; 0xa4
 8019f20:	4a77      	ldr	r2, [pc, #476]	; (801a100 <problem_fetch+0x18a3c>)
 8019f22:	461c      	mov	r4, r3
 8019f24:	4613      	mov	r3, r2
 8019f26:	cb07      	ldmia	r3!, {r0, r1, r2}
 8019f28:	6020      	str	r0, [r4, #0]
 8019f2a:	6061      	str	r1, [r4, #4]
 8019f2c:	60a2      	str	r2, [r4, #8]
 8019f2e:	881b      	ldrh	r3, [r3, #0]
 8019f30:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,8,11,12,14,16,18");
 8019f32:	687b      	ldr	r3, [r7, #4]
 8019f34:	3304      	adds	r3, #4
 8019f36:	4a73      	ldr	r2, [pc, #460]	; (801a104 <problem_fetch+0x18a40>)
 8019f38:	461d      	mov	r5, r3
 8019f3a:	4614      	mov	r4, r2
 8019f3c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8019f3e:	6028      	str	r0, [r5, #0]
 8019f40:	6069      	str	r1, [r5, #4]
 8019f42:	60aa      	str	r2, [r5, #8]
 8019f44:	60eb      	str	r3, [r5, #12]
 8019f46:	8823      	ldrh	r3, [r4, #0]
 8019f48:	78a2      	ldrb	r2, [r4, #2]
 8019f4a:	822b      	strh	r3, [r5, #16]
 8019f4c:	4613      	mov	r3, r2
 8019f4e:	74ab      	strb	r3, [r5, #18]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 8019f50:	687b      	ldr	r3, [r7, #4]
 8019f52:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8019f56:	4a6c      	ldr	r2, [pc, #432]	; (801a108 <problem_fetch+0x18a44>)
 8019f58:	461c      	mov	r4, r3
 8019f5a:	4613      	mov	r3, r2
 8019f5c:	cb07      	ldmia	r3!, {r0, r1, r2}
 8019f5e:	6020      	str	r0, [r4, #0]
 8019f60:	6061      	str	r1, [r4, #4]
 8019f62:	60a2      	str	r2, [r4, #8]
 8019f64:	881b      	ldrh	r3, [r3, #0]
 8019f66:	81a3      	strh	r3, [r4, #12]
			break;
 8019f68:	f002 badc 	b.w	801c524 <problem_fetch+0x1ae60>
		case 734 :
			strcpy(p->name,"LEOCREMAFLANDERS");
 8019f6c:	687b      	ldr	r3, [r7, #4]
 8019f6e:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8019f72:	4a66      	ldr	r2, [pc, #408]	; (801a10c <problem_fetch+0x18a48>)
 8019f74:	461d      	mov	r5, r3
 8019f76:	4614      	mov	r4, r2
 8019f78:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8019f7a:	6028      	str	r0, [r5, #0]
 8019f7c:	6069      	str	r1, [r5, #4]
 8019f7e:	60aa      	str	r2, [r5, #8]
 8019f80:	60eb      	str	r3, [r5, #12]
 8019f82:	7823      	ldrb	r3, [r4, #0]
 8019f84:	742b      	strb	r3, [r5, #16]
			strcpy(p->grade,"7C");
 8019f86:	687b      	ldr	r3, [r7, #4]
 8019f88:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8019f8c:	4a60      	ldr	r2, [pc, #384]	; (801a110 <problem_fetch+0x18a4c>)
 8019f8e:	8811      	ldrh	r1, [r2, #0]
 8019f90:	7892      	ldrb	r2, [r2, #2]
 8019f92:	8019      	strh	r1, [r3, #0]
 8019f94:	709a      	strb	r2, [r3, #2]
			p->moveSize = 7;
 8019f96:	687b      	ldr	r3, [r7, #4]
 8019f98:	2207      	movs	r2, #7
 8019f9a:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"B,B,C,E,F,H,I");
 8019f9c:	687b      	ldr	r3, [r7, #4]
 8019f9e:	33a4      	adds	r3, #164	; 0xa4
 8019fa0:	4a5c      	ldr	r2, [pc, #368]	; (801a114 <problem_fetch+0x18a50>)
 8019fa2:	461c      	mov	r4, r3
 8019fa4:	4613      	mov	r3, r2
 8019fa6:	cb07      	ldmia	r3!, {r0, r1, r2}
 8019fa8:	6020      	str	r0, [r4, #0]
 8019faa:	6061      	str	r1, [r4, #4]
 8019fac:	60a2      	str	r2, [r4, #8]
 8019fae:	881b      	ldrh	r3, [r3, #0]
 8019fb0:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"12,6,5,9,13,12,18");
 8019fb2:	687b      	ldr	r3, [r7, #4]
 8019fb4:	3304      	adds	r3, #4
 8019fb6:	4a58      	ldr	r2, [pc, #352]	; (801a118 <problem_fetch+0x18a54>)
 8019fb8:	461d      	mov	r5, r3
 8019fba:	4614      	mov	r4, r2
 8019fbc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8019fbe:	6028      	str	r0, [r5, #0]
 8019fc0:	6069      	str	r1, [r5, #4]
 8019fc2:	60aa      	str	r2, [r5, #8]
 8019fc4:	60eb      	str	r3, [r5, #12]
 8019fc6:	8823      	ldrh	r3, [r4, #0]
 8019fc8:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"d,s,s,d,d,d,e");
 8019fca:	687b      	ldr	r3, [r7, #4]
 8019fcc:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 8019fd0:	4a52      	ldr	r2, [pc, #328]	; (801a11c <problem_fetch+0x18a58>)
 8019fd2:	461c      	mov	r4, r3
 8019fd4:	4613      	mov	r3, r2
 8019fd6:	cb07      	ldmia	r3!, {r0, r1, r2}
 8019fd8:	6020      	str	r0, [r4, #0]
 8019fda:	6061      	str	r1, [r4, #4]
 8019fdc:	60a2      	str	r2, [r4, #8]
 8019fde:	881b      	ldrh	r3, [r3, #0]
 8019fe0:	81a3      	strh	r3, [r4, #12]
			break;
 8019fe2:	f002 ba9f 	b.w	801c524 <problem_fetch+0x1ae60>
		case 735 :
			strcpy(p->name,"MAFFEI");
 8019fe6:	687b      	ldr	r3, [r7, #4]
 8019fe8:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8019fec:	4a4c      	ldr	r2, [pc, #304]	; (801a120 <problem_fetch+0x18a5c>)
 8019fee:	6810      	ldr	r0, [r2, #0]
 8019ff0:	6018      	str	r0, [r3, #0]
 8019ff2:	8891      	ldrh	r1, [r2, #4]
 8019ff4:	7992      	ldrb	r2, [r2, #6]
 8019ff6:	8099      	strh	r1, [r3, #4]
 8019ff8:	719a      	strb	r2, [r3, #6]
			strcpy(p->grade,"6C");
 8019ffa:	687b      	ldr	r3, [r7, #4]
 8019ffc:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801a000:	4a48      	ldr	r2, [pc, #288]	; (801a124 <problem_fetch+0x18a60>)
 801a002:	8811      	ldrh	r1, [r2, #0]
 801a004:	7892      	ldrb	r2, [r2, #2]
 801a006:	8019      	strh	r1, [r3, #0]
 801a008:	709a      	strb	r2, [r3, #2]
			p->moveSize = 5;
 801a00a:	687b      	ldr	r3, [r7, #4]
 801a00c:	2205      	movs	r2, #5
 801a00e:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,E,A,E,D");
 801a010:	687b      	ldr	r3, [r7, #4]
 801a012:	33a4      	adds	r3, #164	; 0xa4
 801a014:	4944      	ldr	r1, [pc, #272]	; (801a128 <problem_fetch+0x18a64>)
 801a016:	461a      	mov	r2, r3
 801a018:	460b      	mov	r3, r1
 801a01a:	cb03      	ldmia	r3!, {r0, r1}
 801a01c:	6010      	str	r0, [r2, #0]
 801a01e:	6051      	str	r1, [r2, #4]
 801a020:	881b      	ldrh	r3, [r3, #0]
 801a022:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"5,12,14,8,18");
 801a024:	687b      	ldr	r3, [r7, #4]
 801a026:	3304      	adds	r3, #4
 801a028:	4a40      	ldr	r2, [pc, #256]	; (801a12c <problem_fetch+0x18a68>)
 801a02a:	461c      	mov	r4, r3
 801a02c:	4613      	mov	r3, r2
 801a02e:	cb07      	ldmia	r3!, {r0, r1, r2}
 801a030:	6020      	str	r0, [r4, #0]
 801a032:	6061      	str	r1, [r4, #4]
 801a034:	60a2      	str	r2, [r4, #8]
 801a036:	781b      	ldrb	r3, [r3, #0]
 801a038:	7323      	strb	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,e");
 801a03a:	687b      	ldr	r3, [r7, #4]
 801a03c:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 801a040:	4924      	ldr	r1, [pc, #144]	; (801a0d4 <problem_fetch+0x18a10>)
 801a042:	461a      	mov	r2, r3
 801a044:	460b      	mov	r3, r1
 801a046:	cb03      	ldmia	r3!, {r0, r1}
 801a048:	6010      	str	r0, [r2, #0]
 801a04a:	6051      	str	r1, [r2, #4]
 801a04c:	881b      	ldrh	r3, [r3, #0]
 801a04e:	8113      	strh	r3, [r2, #8]
			break;
 801a050:	f002 ba68 	b.w	801c524 <problem_fetch+0x1ae60>
		case 736 :
			strcpy(p->name,"BUIONE");
 801a054:	687b      	ldr	r3, [r7, #4]
 801a056:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801a05a:	4a35      	ldr	r2, [pc, #212]	; (801a130 <problem_fetch+0x18a6c>)
 801a05c:	6810      	ldr	r0, [r2, #0]
 801a05e:	6018      	str	r0, [r3, #0]
 801a060:	8891      	ldrh	r1, [r2, #4]
 801a062:	7992      	ldrb	r2, [r2, #6]
 801a064:	8099      	strh	r1, [r3, #4]
 801a066:	719a      	strb	r2, [r3, #6]
			strcpy(p->grade,"7A");
 801a068:	687b      	ldr	r3, [r7, #4]
 801a06a:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801a06e:	4a31      	ldr	r2, [pc, #196]	; (801a134 <problem_fetch+0x18a70>)
 801a070:	8811      	ldrh	r1, [r2, #0]
 801a072:	7892      	ldrb	r2, [r2, #2]
 801a074:	8019      	strh	r1, [r3, #0]
 801a076:	709a      	strb	r2, [r3, #2]
			p->moveSize = 6;
 801a078:	687b      	ldr	r3, [r7, #4]
 801a07a:	2206      	movs	r2, #6
 801a07c:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,H,E,E,B,A");
 801a07e:	687b      	ldr	r3, [r7, #4]
 801a080:	33a4      	adds	r3, #164	; 0xa4
 801a082:	4a2d      	ldr	r2, [pc, #180]	; (801a138 <problem_fetch+0x18a74>)
 801a084:	461c      	mov	r4, r3
 801a086:	4613      	mov	r3, r2
 801a088:	cb07      	ldmia	r3!, {r0, r1, r2}
 801a08a:	6020      	str	r0, [r4, #0]
 801a08c:	6061      	str	r1, [r4, #4]
 801a08e:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,8,9,12,15,18");
 801a090:	687b      	ldr	r3, [r7, #4]
 801a092:	3304      	adds	r3, #4
 801a094:	4a29      	ldr	r2, [pc, #164]	; (801a13c <problem_fetch+0x18a78>)
 801a096:	461c      	mov	r4, r3
 801a098:	4613      	mov	r3, r2
 801a09a:	cb07      	ldmia	r3!, {r0, r1, r2}
 801a09c:	6020      	str	r0, [r4, #0]
 801a09e:	6061      	str	r1, [r4, #4]
 801a0a0:	60a2      	str	r2, [r4, #8]
 801a0a2:	881a      	ldrh	r2, [r3, #0]
 801a0a4:	789b      	ldrb	r3, [r3, #2]
 801a0a6:	81a2      	strh	r2, [r4, #12]
 801a0a8:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 801a0aa:	687b      	ldr	r3, [r7, #4]
 801a0ac:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 801a0b0:	4a23      	ldr	r2, [pc, #140]	; (801a140 <problem_fetch+0x18a7c>)
 801a0b2:	461c      	mov	r4, r3
 801a0b4:	4613      	mov	r3, r2
 801a0b6:	cb07      	ldmia	r3!, {r0, r1, r2}
 801a0b8:	6020      	str	r0, [r4, #0]
 801a0ba:	6061      	str	r1, [r4, #4]
 801a0bc:	60a2      	str	r2, [r4, #8]
			break;
 801a0be:	f002 ba31 	b.w	801c524 <problem_fetch+0x1ae60>
 801a0c2:	bf00      	nop
 801a0c4:	0802c16c 	.word	0x0802c16c
 801a0c8:	08023990 	.word	0x08023990
 801a0cc:	0802c178 	.word	0x0802c178
 801a0d0:	0802c184 	.word	0x0802c184
 801a0d4:	08023d20 	.word	0x08023d20
 801a0d8:	0802c194 	.word	0x0802c194
 801a0dc:	08023e60 	.word	0x08023e60
 801a0e0:	0802c19c 	.word	0x0802c19c
 801a0e4:	0802c1a8 	.word	0x0802c1a8
 801a0e8:	08023834 	.word	0x08023834
 801a0ec:	0802c1b8 	.word	0x0802c1b8
 801a0f0:	08023854 	.word	0x08023854
 801a0f4:	0802c1c4 	.word	0x0802c1c4
 801a0f8:	0802c1d0 	.word	0x0802c1d0
 801a0fc:	0802c1e0 	.word	0x0802c1e0
 801a100:	0802c1e4 	.word	0x0802c1e4
 801a104:	0802c1f4 	.word	0x0802c1f4
 801a108:	080239dc 	.word	0x080239dc
 801a10c:	0802c208 	.word	0x0802c208
 801a110:	08024088 	.word	0x08024088
 801a114:	0802c21c 	.word	0x0802c21c
 801a118:	0802c22c 	.word	0x0802c22c
 801a11c:	0802c240 	.word	0x0802c240
 801a120:	0802c250 	.word	0x0802c250
 801a124:	08023920 	.word	0x08023920
 801a128:	0802c258 	.word	0x0802c258
 801a12c:	0802c264 	.word	0x0802c264
 801a130:	0802c274 	.word	0x0802c274
 801a134:	08023814 	.word	0x08023814
 801a138:	0802c27c 	.word	0x0802c27c
 801a13c:	08027dd8 	.word	0x08027dd8
 801a140:	08023bf0 	.word	0x08023bf0
		case 737 :
			strcpy(p->name,"A'TRAZIONE");
 801a144:	687b      	ldr	r3, [r7, #4]
 801a146:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801a14a:	49ab      	ldr	r1, [pc, #684]	; (801a3f8 <problem_fetch+0x18d34>)
 801a14c:	461a      	mov	r2, r3
 801a14e:	460b      	mov	r3, r1
 801a150:	cb03      	ldmia	r3!, {r0, r1}
 801a152:	6010      	str	r0, [r2, #0]
 801a154:	6051      	str	r1, [r2, #4]
 801a156:	8819      	ldrh	r1, [r3, #0]
 801a158:	789b      	ldrb	r3, [r3, #2]
 801a15a:	8111      	strh	r1, [r2, #8]
 801a15c:	7293      	strb	r3, [r2, #10]
			strcpy(p->grade,"7B+");
 801a15e:	687b      	ldr	r3, [r7, #4]
 801a160:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801a164:	4aa5      	ldr	r2, [pc, #660]	; (801a3fc <problem_fetch+0x18d38>)
 801a166:	6810      	ldr	r0, [r2, #0]
 801a168:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 801a16a:	687b      	ldr	r3, [r7, #4]
 801a16c:	2206      	movs	r2, #6
 801a16e:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"E,I,J,K,G,D");
 801a170:	687b      	ldr	r3, [r7, #4]
 801a172:	33a4      	adds	r3, #164	; 0xa4
 801a174:	4aa2      	ldr	r2, [pc, #648]	; (801a400 <problem_fetch+0x18d3c>)
 801a176:	461c      	mov	r4, r3
 801a178:	4613      	mov	r3, r2
 801a17a:	cb07      	ldmia	r3!, {r0, r1, r2}
 801a17c:	6020      	str	r0, [r4, #0]
 801a17e:	6061      	str	r1, [r4, #4]
 801a180:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"6,10,13,14,17,18");
 801a182:	687b      	ldr	r3, [r7, #4]
 801a184:	3304      	adds	r3, #4
 801a186:	4a9f      	ldr	r2, [pc, #636]	; (801a404 <problem_fetch+0x18d40>)
 801a188:	461d      	mov	r5, r3
 801a18a:	4614      	mov	r4, r2
 801a18c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801a18e:	6028      	str	r0, [r5, #0]
 801a190:	6069      	str	r1, [r5, #4]
 801a192:	60aa      	str	r2, [r5, #8]
 801a194:	60eb      	str	r3, [r5, #12]
 801a196:	7823      	ldrb	r3, [r4, #0]
 801a198:	742b      	strb	r3, [r5, #16]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 801a19a:	687b      	ldr	r3, [r7, #4]
 801a19c:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 801a1a0:	4a99      	ldr	r2, [pc, #612]	; (801a408 <problem_fetch+0x18d44>)
 801a1a2:	461c      	mov	r4, r3
 801a1a4:	4613      	mov	r3, r2
 801a1a6:	cb07      	ldmia	r3!, {r0, r1, r2}
 801a1a8:	6020      	str	r0, [r4, #0]
 801a1aa:	6061      	str	r1, [r4, #4]
 801a1ac:	60a2      	str	r2, [r4, #8]
			break;
 801a1ae:	f002 b9b9 	b.w	801c524 <problem_fetch+0x1ae60>
		case 738 :
			strcpy(p->name,"FROM VALCHIUSELLAWITHLOVE");
 801a1b2:	687b      	ldr	r3, [r7, #4]
 801a1b4:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801a1b8:	4a94      	ldr	r2, [pc, #592]	; (801a40c <problem_fetch+0x18d48>)
 801a1ba:	461d      	mov	r5, r3
 801a1bc:	4614      	mov	r4, r2
 801a1be:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801a1c0:	6028      	str	r0, [r5, #0]
 801a1c2:	6069      	str	r1, [r5, #4]
 801a1c4:	60aa      	str	r2, [r5, #8]
 801a1c6:	60eb      	str	r3, [r5, #12]
 801a1c8:	cc03      	ldmia	r4!, {r0, r1}
 801a1ca:	6128      	str	r0, [r5, #16]
 801a1cc:	6169      	str	r1, [r5, #20]
 801a1ce:	8823      	ldrh	r3, [r4, #0]
 801a1d0:	832b      	strh	r3, [r5, #24]
			strcpy(p->grade,"7A+");
 801a1d2:	687b      	ldr	r3, [r7, #4]
 801a1d4:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801a1d8:	4a8d      	ldr	r2, [pc, #564]	; (801a410 <problem_fetch+0x18d4c>)
 801a1da:	6810      	ldr	r0, [r2, #0]
 801a1dc:	6018      	str	r0, [r3, #0]
			p->moveSize = 5;
 801a1de:	687b      	ldr	r3, [r7, #4]
 801a1e0:	2205      	movs	r2, #5
 801a1e2:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"C,C,I,E,D");
 801a1e4:	687b      	ldr	r3, [r7, #4]
 801a1e6:	33a4      	adds	r3, #164	; 0xa4
 801a1e8:	498a      	ldr	r1, [pc, #552]	; (801a414 <problem_fetch+0x18d50>)
 801a1ea:	461a      	mov	r2, r3
 801a1ec:	460b      	mov	r3, r1
 801a1ee:	cb03      	ldmia	r3!, {r0, r1}
 801a1f0:	6010      	str	r0, [r2, #0]
 801a1f2:	6051      	str	r1, [r2, #4]
 801a1f4:	881b      	ldrh	r3, [r3, #0]
 801a1f6:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"5,8,10,14,18");
 801a1f8:	687b      	ldr	r3, [r7, #4]
 801a1fa:	3304      	adds	r3, #4
 801a1fc:	4a86      	ldr	r2, [pc, #536]	; (801a418 <problem_fetch+0x18d54>)
 801a1fe:	461c      	mov	r4, r3
 801a200:	4613      	mov	r3, r2
 801a202:	cb07      	ldmia	r3!, {r0, r1, r2}
 801a204:	6020      	str	r0, [r4, #0]
 801a206:	6061      	str	r1, [r4, #4]
 801a208:	60a2      	str	r2, [r4, #8]
 801a20a:	781b      	ldrb	r3, [r3, #0]
 801a20c:	7323      	strb	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,e");
 801a20e:	687b      	ldr	r3, [r7, #4]
 801a210:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 801a214:	4981      	ldr	r1, [pc, #516]	; (801a41c <problem_fetch+0x18d58>)
 801a216:	461a      	mov	r2, r3
 801a218:	460b      	mov	r3, r1
 801a21a:	cb03      	ldmia	r3!, {r0, r1}
 801a21c:	6010      	str	r0, [r2, #0]
 801a21e:	6051      	str	r1, [r2, #4]
 801a220:	881b      	ldrh	r3, [r3, #0]
 801a222:	8113      	strh	r3, [r2, #8]
			break;
 801a224:	f002 b97e 	b.w	801c524 <problem_fetch+0x1ae60>
		case 739 :
			strcpy(p->name,"TIME TO PLAY");
 801a228:	687b      	ldr	r3, [r7, #4]
 801a22a:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801a22e:	4a7c      	ldr	r2, [pc, #496]	; (801a420 <problem_fetch+0x18d5c>)
 801a230:	461c      	mov	r4, r3
 801a232:	4613      	mov	r3, r2
 801a234:	cb07      	ldmia	r3!, {r0, r1, r2}
 801a236:	6020      	str	r0, [r4, #0]
 801a238:	6061      	str	r1, [r4, #4]
 801a23a:	60a2      	str	r2, [r4, #8]
 801a23c:	781b      	ldrb	r3, [r3, #0]
 801a23e:	7323      	strb	r3, [r4, #12]
			strcpy(p->grade,"6C+");
 801a240:	687b      	ldr	r3, [r7, #4]
 801a242:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801a246:	4a77      	ldr	r2, [pc, #476]	; (801a424 <problem_fetch+0x18d60>)
 801a248:	6810      	ldr	r0, [r2, #0]
 801a24a:	6018      	str	r0, [r3, #0]
			p->moveSize = 11;
 801a24c:	687b      	ldr	r3, [r7, #4]
 801a24e:	220b      	movs	r2, #11
 801a250:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,J,I,H,D,D,B,C,G,H,I");
 801a252:	687b      	ldr	r3, [r7, #4]
 801a254:	33a4      	adds	r3, #164	; 0xa4
 801a256:	4a74      	ldr	r2, [pc, #464]	; (801a428 <problem_fetch+0x18d64>)
 801a258:	461d      	mov	r5, r3
 801a25a:	4614      	mov	r4, r2
 801a25c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801a25e:	6028      	str	r0, [r5, #0]
 801a260:	6069      	str	r1, [r5, #4]
 801a262:	60aa      	str	r2, [r5, #8]
 801a264:	60eb      	str	r3, [r5, #12]
 801a266:	6820      	ldr	r0, [r4, #0]
 801a268:	6128      	str	r0, [r5, #16]
 801a26a:	88a3      	ldrh	r3, [r4, #4]
 801a26c:	82ab      	strh	r3, [r5, #20]
			strcpy(p->moveNumbers,"4,7,10,12,11,15,6,16,17,16,18");
 801a26e:	687b      	ldr	r3, [r7, #4]
 801a270:	3304      	adds	r3, #4
 801a272:	4a6e      	ldr	r2, [pc, #440]	; (801a42c <problem_fetch+0x18d68>)
 801a274:	461d      	mov	r5, r3
 801a276:	4614      	mov	r4, r2
 801a278:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801a27a:	6028      	str	r0, [r5, #0]
 801a27c:	6069      	str	r1, [r5, #4]
 801a27e:	60aa      	str	r2, [r5, #8]
 801a280:	60eb      	str	r3, [r5, #12]
 801a282:	cc07      	ldmia	r4!, {r0, r1, r2}
 801a284:	6128      	str	r0, [r5, #16]
 801a286:	6169      	str	r1, [r5, #20]
 801a288:	61aa      	str	r2, [r5, #24]
 801a28a:	8823      	ldrh	r3, [r4, #0]
 801a28c:	83ab      	strh	r3, [r5, #28]
			strcpy(p->startFinish,"s,d,d,d,d,d,d,d,d,d,e");
 801a28e:	687b      	ldr	r3, [r7, #4]
 801a290:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 801a294:	4a66      	ldr	r2, [pc, #408]	; (801a430 <problem_fetch+0x18d6c>)
 801a296:	461d      	mov	r5, r3
 801a298:	4614      	mov	r4, r2
 801a29a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801a29c:	6028      	str	r0, [r5, #0]
 801a29e:	6069      	str	r1, [r5, #4]
 801a2a0:	60aa      	str	r2, [r5, #8]
 801a2a2:	60eb      	str	r3, [r5, #12]
 801a2a4:	6820      	ldr	r0, [r4, #0]
 801a2a6:	6128      	str	r0, [r5, #16]
 801a2a8:	88a3      	ldrh	r3, [r4, #4]
 801a2aa:	82ab      	strh	r3, [r5, #20]
			break;
 801a2ac:	f002 b93a 	b.w	801c524 <problem_fetch+0x1ae60>
		case 740 :
			strcpy(p->name,"KIDSPROBLEM");
 801a2b0:	687b      	ldr	r3, [r7, #4]
 801a2b2:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801a2b6:	4a5f      	ldr	r2, [pc, #380]	; (801a434 <problem_fetch+0x18d70>)
 801a2b8:	461c      	mov	r4, r3
 801a2ba:	4613      	mov	r3, r2
 801a2bc:	cb07      	ldmia	r3!, {r0, r1, r2}
 801a2be:	6020      	str	r0, [r4, #0]
 801a2c0:	6061      	str	r1, [r4, #4]
 801a2c2:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade,"6C");
 801a2c4:	687b      	ldr	r3, [r7, #4]
 801a2c6:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801a2ca:	4a5b      	ldr	r2, [pc, #364]	; (801a438 <problem_fetch+0x18d74>)
 801a2cc:	8811      	ldrh	r1, [r2, #0]
 801a2ce:	7892      	ldrb	r2, [r2, #2]
 801a2d0:	8019      	strh	r1, [r3, #0]
 801a2d2:	709a      	strb	r2, [r3, #2]
			p->moveSize = 8;
 801a2d4:	687b      	ldr	r3, [r7, #4]
 801a2d6:	2208      	movs	r2, #8
 801a2d8:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,J,G,B,C,H,E,D");
 801a2da:	687b      	ldr	r3, [r7, #4]
 801a2dc:	33a4      	adds	r3, #164	; 0xa4
 801a2de:	4a57      	ldr	r2, [pc, #348]	; (801a43c <problem_fetch+0x18d78>)
 801a2e0:	461c      	mov	r4, r3
 801a2e2:	4615      	mov	r5, r2
 801a2e4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801a2e6:	6020      	str	r0, [r4, #0]
 801a2e8:	6061      	str	r1, [r4, #4]
 801a2ea:	60a2      	str	r2, [r4, #8]
 801a2ec:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,5,9,10,13,13,16,18");
 801a2ee:	687b      	ldr	r3, [r7, #4]
 801a2f0:	3304      	adds	r3, #4
 801a2f2:	4a53      	ldr	r2, [pc, #332]	; (801a440 <problem_fetch+0x18d7c>)
 801a2f4:	461d      	mov	r5, r3
 801a2f6:	4614      	mov	r4, r2
 801a2f8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801a2fa:	6028      	str	r0, [r5, #0]
 801a2fc:	6069      	str	r1, [r5, #4]
 801a2fe:	60aa      	str	r2, [r5, #8]
 801a300:	60eb      	str	r3, [r5, #12]
 801a302:	6820      	ldr	r0, [r4, #0]
 801a304:	6128      	str	r0, [r5, #16]
 801a306:	7923      	ldrb	r3, [r4, #4]
 801a308:	752b      	strb	r3, [r5, #20]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,e");
 801a30a:	687b      	ldr	r3, [r7, #4]
 801a30c:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 801a310:	4a4c      	ldr	r2, [pc, #304]	; (801a444 <problem_fetch+0x18d80>)
 801a312:	461c      	mov	r4, r3
 801a314:	4615      	mov	r5, r2
 801a316:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801a318:	6020      	str	r0, [r4, #0]
 801a31a:	6061      	str	r1, [r4, #4]
 801a31c:	60a2      	str	r2, [r4, #8]
 801a31e:	60e3      	str	r3, [r4, #12]
			break;
 801a320:	f002 b900 	b.w	801c524 <problem_fetch+0x1ae60>
		case 741 :
			strcpy(p->name,"DUBUCHI");
 801a324:	687b      	ldr	r3, [r7, #4]
 801a326:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801a32a:	4947      	ldr	r1, [pc, #284]	; (801a448 <problem_fetch+0x18d84>)
 801a32c:	461a      	mov	r2, r3
 801a32e:	460b      	mov	r3, r1
 801a330:	cb03      	ldmia	r3!, {r0, r1}
 801a332:	6010      	str	r0, [r2, #0]
 801a334:	6051      	str	r1, [r2, #4]
			strcpy(p->grade,"7A+");
 801a336:	687b      	ldr	r3, [r7, #4]
 801a338:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801a33c:	4a34      	ldr	r2, [pc, #208]	; (801a410 <problem_fetch+0x18d4c>)
 801a33e:	6810      	ldr	r0, [r2, #0]
 801a340:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 801a342:	687b      	ldr	r3, [r7, #4]
 801a344:	2206      	movs	r2, #6
 801a346:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"C,D,G,C,C,A");
 801a348:	687b      	ldr	r3, [r7, #4]
 801a34a:	33a4      	adds	r3, #164	; 0xa4
 801a34c:	4a3f      	ldr	r2, [pc, #252]	; (801a44c <problem_fetch+0x18d88>)
 801a34e:	461c      	mov	r4, r3
 801a350:	4613      	mov	r3, r2
 801a352:	cb07      	ldmia	r3!, {r0, r1, r2}
 801a354:	6020      	str	r0, [r4, #0]
 801a356:	6061      	str	r1, [r4, #4]
 801a358:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,7,10,13,16,18");
 801a35a:	687b      	ldr	r3, [r7, #4]
 801a35c:	3304      	adds	r3, #4
 801a35e:	4a3c      	ldr	r2, [pc, #240]	; (801a450 <problem_fetch+0x18d8c>)
 801a360:	461c      	mov	r4, r3
 801a362:	4615      	mov	r5, r2
 801a364:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801a366:	6020      	str	r0, [r4, #0]
 801a368:	6061      	str	r1, [r4, #4]
 801a36a:	60a2      	str	r2, [r4, #8]
 801a36c:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 801a36e:	687b      	ldr	r3, [r7, #4]
 801a370:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 801a374:	4a24      	ldr	r2, [pc, #144]	; (801a408 <problem_fetch+0x18d44>)
 801a376:	461c      	mov	r4, r3
 801a378:	4613      	mov	r3, r2
 801a37a:	cb07      	ldmia	r3!, {r0, r1, r2}
 801a37c:	6020      	str	r0, [r4, #0]
 801a37e:	6061      	str	r1, [r4, #4]
 801a380:	60a2      	str	r2, [r4, #8]
			break;
 801a382:	f002 b8cf 	b.w	801c524 <problem_fetch+0x1ae60>
		case 742 :
			strcpy(p->name,"FULCO");
 801a386:	687b      	ldr	r3, [r7, #4]
 801a388:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801a38c:	4a31      	ldr	r2, [pc, #196]	; (801a454 <problem_fetch+0x18d90>)
 801a38e:	6810      	ldr	r0, [r2, #0]
 801a390:	6018      	str	r0, [r3, #0]
 801a392:	8892      	ldrh	r2, [r2, #4]
 801a394:	809a      	strh	r2, [r3, #4]
			strcpy(p->grade,"6C");
 801a396:	687b      	ldr	r3, [r7, #4]
 801a398:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801a39c:	4a26      	ldr	r2, [pc, #152]	; (801a438 <problem_fetch+0x18d74>)
 801a39e:	8811      	ldrh	r1, [r2, #0]
 801a3a0:	7892      	ldrb	r2, [r2, #2]
 801a3a2:	8019      	strh	r1, [r3, #0]
 801a3a4:	709a      	strb	r2, [r3, #2]
			p->moveSize = 7;
 801a3a6:	687b      	ldr	r3, [r7, #4]
 801a3a8:	2207      	movs	r2, #7
 801a3aa:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,G,I,D,G,E,D");
 801a3ac:	687b      	ldr	r3, [r7, #4]
 801a3ae:	33a4      	adds	r3, #164	; 0xa4
 801a3b0:	4a29      	ldr	r2, [pc, #164]	; (801a458 <problem_fetch+0x18d94>)
 801a3b2:	461c      	mov	r4, r3
 801a3b4:	4613      	mov	r3, r2
 801a3b6:	cb07      	ldmia	r3!, {r0, r1, r2}
 801a3b8:	6020      	str	r0, [r4, #0]
 801a3ba:	6061      	str	r1, [r4, #4]
 801a3bc:	60a2      	str	r2, [r4, #8]
 801a3be:	881b      	ldrh	r3, [r3, #0]
 801a3c0:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,6,9,11,14,16,18");
 801a3c2:	687b      	ldr	r3, [r7, #4]
 801a3c4:	3304      	adds	r3, #4
 801a3c6:	4a25      	ldr	r2, [pc, #148]	; (801a45c <problem_fetch+0x18d98>)
 801a3c8:	461d      	mov	r5, r3
 801a3ca:	4614      	mov	r4, r2
 801a3cc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801a3ce:	6028      	str	r0, [r5, #0]
 801a3d0:	6069      	str	r1, [r5, #4]
 801a3d2:	60aa      	str	r2, [r5, #8]
 801a3d4:	60eb      	str	r3, [r5, #12]
 801a3d6:	8823      	ldrh	r3, [r4, #0]
 801a3d8:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,s,d,d,d,d,e");
 801a3da:	687b      	ldr	r3, [r7, #4]
 801a3dc:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 801a3e0:	4a1f      	ldr	r2, [pc, #124]	; (801a460 <problem_fetch+0x18d9c>)
 801a3e2:	461c      	mov	r4, r3
 801a3e4:	4613      	mov	r3, r2
 801a3e6:	cb07      	ldmia	r3!, {r0, r1, r2}
 801a3e8:	6020      	str	r0, [r4, #0]
 801a3ea:	6061      	str	r1, [r4, #4]
 801a3ec:	60a2      	str	r2, [r4, #8]
 801a3ee:	881b      	ldrh	r3, [r3, #0]
 801a3f0:	81a3      	strh	r3, [r4, #12]
			break;
 801a3f2:	f002 b897 	b.w	801c524 <problem_fetch+0x1ae60>
 801a3f6:	bf00      	nop
 801a3f8:	0802c288 	.word	0x0802c288
 801a3fc:	08023990 	.word	0x08023990
 801a400:	0802c294 	.word	0x0802c294
 801a404:	0802c2a0 	.word	0x0802c2a0
 801a408:	08023bf0 	.word	0x08023bf0
 801a40c:	0802c2b4 	.word	0x0802c2b4
 801a410:	080239f4 	.word	0x080239f4
 801a414:	0802c2d0 	.word	0x0802c2d0
 801a418:	08024b5c 	.word	0x08024b5c
 801a41c:	08023d20 	.word	0x08023d20
 801a420:	0802c2dc 	.word	0x0802c2dc
 801a424:	080238ec 	.word	0x080238ec
 801a428:	0802c2ec 	.word	0x0802c2ec
 801a42c:	0802c304 	.word	0x0802c304
 801a430:	0802c324 	.word	0x0802c324
 801a434:	0802c33c 	.word	0x0802c33c
 801a438:	08023920 	.word	0x08023920
 801a43c:	0802c348 	.word	0x0802c348
 801a440:	0802c358 	.word	0x0802c358
 801a444:	08023978 	.word	0x08023978
 801a448:	0802c370 	.word	0x0802c370
 801a44c:	0802c378 	.word	0x0802c378
 801a450:	0802b224 	.word	0x0802b224
 801a454:	0802c384 	.word	0x0802c384
 801a458:	0802c38c 	.word	0x0802c38c
 801a45c:	08024560 	.word	0x08024560
 801a460:	080238cc 	.word	0x080238cc
		case 743 :
			strcpy(p->name,"KICKER 2");
 801a464:	687b      	ldr	r3, [r7, #4]
 801a466:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801a46a:	49c3      	ldr	r1, [pc, #780]	; (801a778 <problem_fetch+0x190b4>)
 801a46c:	461a      	mov	r2, r3
 801a46e:	460b      	mov	r3, r1
 801a470:	cb03      	ldmia	r3!, {r0, r1}
 801a472:	6010      	str	r0, [r2, #0]
 801a474:	6051      	str	r1, [r2, #4]
 801a476:	781b      	ldrb	r3, [r3, #0]
 801a478:	7213      	strb	r3, [r2, #8]
			strcpy(p->grade,"7A");
 801a47a:	687b      	ldr	r3, [r7, #4]
 801a47c:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801a480:	4abe      	ldr	r2, [pc, #760]	; (801a77c <problem_fetch+0x190b8>)
 801a482:	8811      	ldrh	r1, [r2, #0]
 801a484:	7892      	ldrb	r2, [r2, #2]
 801a486:	8019      	strh	r1, [r3, #0]
 801a488:	709a      	strb	r2, [r3, #2]
			p->moveSize = 7;
 801a48a:	687b      	ldr	r3, [r7, #4]
 801a48c:	2207      	movs	r2, #7
 801a48e:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,D,E,B,G,E,I");
 801a490:	687b      	ldr	r3, [r7, #4]
 801a492:	33a4      	adds	r3, #164	; 0xa4
 801a494:	4aba      	ldr	r2, [pc, #744]	; (801a780 <problem_fetch+0x190bc>)
 801a496:	461c      	mov	r4, r3
 801a498:	4613      	mov	r3, r2
 801a49a:	cb07      	ldmia	r3!, {r0, r1, r2}
 801a49c:	6020      	str	r0, [r4, #0]
 801a49e:	6061      	str	r1, [r4, #4]
 801a4a0:	60a2      	str	r2, [r4, #8]
 801a4a2:	881b      	ldrh	r3, [r3, #0]
 801a4a4:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,7,9,12,14,14,18");
 801a4a6:	687b      	ldr	r3, [r7, #4]
 801a4a8:	3304      	adds	r3, #4
 801a4aa:	4ab6      	ldr	r2, [pc, #728]	; (801a784 <problem_fetch+0x190c0>)
 801a4ac:	461d      	mov	r5, r3
 801a4ae:	4614      	mov	r4, r2
 801a4b0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801a4b2:	6028      	str	r0, [r5, #0]
 801a4b4:	6069      	str	r1, [r5, #4]
 801a4b6:	60aa      	str	r2, [r5, #8]
 801a4b8:	60eb      	str	r3, [r5, #12]
 801a4ba:	8823      	ldrh	r3, [r4, #0]
 801a4bc:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 801a4be:	687b      	ldr	r3, [r7, #4]
 801a4c0:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 801a4c4:	4ab0      	ldr	r2, [pc, #704]	; (801a788 <problem_fetch+0x190c4>)
 801a4c6:	461c      	mov	r4, r3
 801a4c8:	4613      	mov	r3, r2
 801a4ca:	cb07      	ldmia	r3!, {r0, r1, r2}
 801a4cc:	6020      	str	r0, [r4, #0]
 801a4ce:	6061      	str	r1, [r4, #4]
 801a4d0:	60a2      	str	r2, [r4, #8]
 801a4d2:	881b      	ldrh	r3, [r3, #0]
 801a4d4:	81a3      	strh	r3, [r4, #12]
			break;
 801a4d6:	f002 b825 	b.w	801c524 <problem_fetch+0x1ae60>
		case 744 :
			strcpy(p->name,"KICKER");
 801a4da:	687b      	ldr	r3, [r7, #4]
 801a4dc:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801a4e0:	4aaa      	ldr	r2, [pc, #680]	; (801a78c <problem_fetch+0x190c8>)
 801a4e2:	6810      	ldr	r0, [r2, #0]
 801a4e4:	6018      	str	r0, [r3, #0]
 801a4e6:	8891      	ldrh	r1, [r2, #4]
 801a4e8:	7992      	ldrb	r2, [r2, #6]
 801a4ea:	8099      	strh	r1, [r3, #4]
 801a4ec:	719a      	strb	r2, [r3, #6]
			strcpy(p->grade,"7A+");
 801a4ee:	687b      	ldr	r3, [r7, #4]
 801a4f0:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801a4f4:	4aa6      	ldr	r2, [pc, #664]	; (801a790 <problem_fetch+0x190cc>)
 801a4f6:	6810      	ldr	r0, [r2, #0]
 801a4f8:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 801a4fa:	687b      	ldr	r3, [r7, #4]
 801a4fc:	2206      	movs	r2, #6
 801a4fe:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,D,E,B,E,D");
 801a500:	687b      	ldr	r3, [r7, #4]
 801a502:	33a4      	adds	r3, #164	; 0xa4
 801a504:	4aa3      	ldr	r2, [pc, #652]	; (801a794 <problem_fetch+0x190d0>)
 801a506:	461c      	mov	r4, r3
 801a508:	4613      	mov	r3, r2
 801a50a:	cb07      	ldmia	r3!, {r0, r1, r2}
 801a50c:	6020      	str	r0, [r4, #0]
 801a50e:	6061      	str	r1, [r4, #4]
 801a510:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,7,9,12,14,18");
 801a512:	687b      	ldr	r3, [r7, #4]
 801a514:	3304      	adds	r3, #4
 801a516:	4aa0      	ldr	r2, [pc, #640]	; (801a798 <problem_fetch+0x190d4>)
 801a518:	461c      	mov	r4, r3
 801a51a:	4613      	mov	r3, r2
 801a51c:	cb07      	ldmia	r3!, {r0, r1, r2}
 801a51e:	6020      	str	r0, [r4, #0]
 801a520:	6061      	str	r1, [r4, #4]
 801a522:	60a2      	str	r2, [r4, #8]
 801a524:	881a      	ldrh	r2, [r3, #0]
 801a526:	789b      	ldrb	r3, [r3, #2]
 801a528:	81a2      	strh	r2, [r4, #12]
 801a52a:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 801a52c:	687b      	ldr	r3, [r7, #4]
 801a52e:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 801a532:	4a9a      	ldr	r2, [pc, #616]	; (801a79c <problem_fetch+0x190d8>)
 801a534:	461c      	mov	r4, r3
 801a536:	4613      	mov	r3, r2
 801a538:	cb07      	ldmia	r3!, {r0, r1, r2}
 801a53a:	6020      	str	r0, [r4, #0]
 801a53c:	6061      	str	r1, [r4, #4]
 801a53e:	60a2      	str	r2, [r4, #8]
			break;
 801a540:	f001 bff0 	b.w	801c524 <problem_fetch+0x1ae60>
		case 745 :
			strcpy(p->name,"GRÜMPU-TURNIER");
 801a544:	687b      	ldr	r3, [r7, #4]
 801a546:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801a54a:	4a95      	ldr	r2, [pc, #596]	; (801a7a0 <problem_fetch+0x190dc>)
 801a54c:	461c      	mov	r4, r3
 801a54e:	4615      	mov	r5, r2
 801a550:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801a552:	6020      	str	r0, [r4, #0]
 801a554:	6061      	str	r1, [r4, #4]
 801a556:	60a2      	str	r2, [r4, #8]
 801a558:	60e3      	str	r3, [r4, #12]
			strcpy(p->grade,"6B+");
 801a55a:	687b      	ldr	r3, [r7, #4]
 801a55c:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801a560:	4a90      	ldr	r2, [pc, #576]	; (801a7a4 <problem_fetch+0x190e0>)
 801a562:	6810      	ldr	r0, [r2, #0]
 801a564:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 801a566:	687b      	ldr	r3, [r7, #4]
 801a568:	2207      	movs	r2, #7
 801a56a:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,G,A,E,A,E,A");
 801a56c:	687b      	ldr	r3, [r7, #4]
 801a56e:	33a4      	adds	r3, #164	; 0xa4
 801a570:	4a8d      	ldr	r2, [pc, #564]	; (801a7a8 <problem_fetch+0x190e4>)
 801a572:	461c      	mov	r4, r3
 801a574:	4613      	mov	r3, r2
 801a576:	cb07      	ldmia	r3!, {r0, r1, r2}
 801a578:	6020      	str	r0, [r4, #0]
 801a57a:	6061      	str	r1, [r4, #4]
 801a57c:	60a2      	str	r2, [r4, #8]
 801a57e:	881b      	ldrh	r3, [r3, #0]
 801a580:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,9,9,12,14,16,18");
 801a582:	687b      	ldr	r3, [r7, #4]
 801a584:	3304      	adds	r3, #4
 801a586:	4a89      	ldr	r2, [pc, #548]	; (801a7ac <problem_fetch+0x190e8>)
 801a588:	461d      	mov	r5, r3
 801a58a:	4614      	mov	r4, r2
 801a58c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801a58e:	6028      	str	r0, [r5, #0]
 801a590:	6069      	str	r1, [r5, #4]
 801a592:	60aa      	str	r2, [r5, #8]
 801a594:	60eb      	str	r3, [r5, #12]
 801a596:	8823      	ldrh	r3, [r4, #0]
 801a598:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 801a59a:	687b      	ldr	r3, [r7, #4]
 801a59c:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 801a5a0:	4a79      	ldr	r2, [pc, #484]	; (801a788 <problem_fetch+0x190c4>)
 801a5a2:	461c      	mov	r4, r3
 801a5a4:	4613      	mov	r3, r2
 801a5a6:	cb07      	ldmia	r3!, {r0, r1, r2}
 801a5a8:	6020      	str	r0, [r4, #0]
 801a5aa:	6061      	str	r1, [r4, #4]
 801a5ac:	60a2      	str	r2, [r4, #8]
 801a5ae:	881b      	ldrh	r3, [r3, #0]
 801a5b0:	81a3      	strh	r3, [r4, #12]
			break;
 801a5b2:	f001 bfb7 	b.w	801c524 <problem_fetch+0x1ae60>
		case 746 :
			strcpy(p->name,"LADYBUG RIGHT VAR");
 801a5b6:	687b      	ldr	r3, [r7, #4]
 801a5b8:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801a5bc:	4a7c      	ldr	r2, [pc, #496]	; (801a7b0 <problem_fetch+0x190ec>)
 801a5be:	461d      	mov	r5, r3
 801a5c0:	4614      	mov	r4, r2
 801a5c2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801a5c4:	6028      	str	r0, [r5, #0]
 801a5c6:	6069      	str	r1, [r5, #4]
 801a5c8:	60aa      	str	r2, [r5, #8]
 801a5ca:	60eb      	str	r3, [r5, #12]
 801a5cc:	8823      	ldrh	r3, [r4, #0]
 801a5ce:	822b      	strh	r3, [r5, #16]
			strcpy(p->grade,"7A+");
 801a5d0:	687b      	ldr	r3, [r7, #4]
 801a5d2:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801a5d6:	4a6e      	ldr	r2, [pc, #440]	; (801a790 <problem_fetch+0x190cc>)
 801a5d8:	6810      	ldr	r0, [r2, #0]
 801a5da:	6018      	str	r0, [r3, #0]
			p->moveSize = 8;
 801a5dc:	687b      	ldr	r3, [r7, #4]
 801a5de:	2208      	movs	r2, #8
 801a5e0:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,J,H,C,F,A,E,I");
 801a5e2:	687b      	ldr	r3, [r7, #4]
 801a5e4:	33a4      	adds	r3, #164	; 0xa4
 801a5e6:	4a73      	ldr	r2, [pc, #460]	; (801a7b4 <problem_fetch+0x190f0>)
 801a5e8:	461c      	mov	r4, r3
 801a5ea:	4615      	mov	r5, r2
 801a5ec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801a5ee:	6020      	str	r0, [r4, #0]
 801a5f0:	6061      	str	r1, [r4, #4]
 801a5f2:	60a2      	str	r2, [r4, #8]
 801a5f4:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"6,5,10,13,11,9,16,18");
 801a5f6:	687b      	ldr	r3, [r7, #4]
 801a5f8:	3304      	adds	r3, #4
 801a5fa:	4a6f      	ldr	r2, [pc, #444]	; (801a7b8 <problem_fetch+0x190f4>)
 801a5fc:	461d      	mov	r5, r3
 801a5fe:	4614      	mov	r4, r2
 801a600:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801a602:	6028      	str	r0, [r5, #0]
 801a604:	6069      	str	r1, [r5, #4]
 801a606:	60aa      	str	r2, [r5, #8]
 801a608:	60eb      	str	r3, [r5, #12]
 801a60a:	6820      	ldr	r0, [r4, #0]
 801a60c:	6128      	str	r0, [r5, #16]
 801a60e:	7923      	ldrb	r3, [r4, #4]
 801a610:	752b      	strb	r3, [r5, #20]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,e");
 801a612:	687b      	ldr	r3, [r7, #4]
 801a614:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 801a618:	4a68      	ldr	r2, [pc, #416]	; (801a7bc <problem_fetch+0x190f8>)
 801a61a:	461c      	mov	r4, r3
 801a61c:	4615      	mov	r5, r2
 801a61e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801a620:	6020      	str	r0, [r4, #0]
 801a622:	6061      	str	r1, [r4, #4]
 801a624:	60a2      	str	r2, [r4, #8]
 801a626:	60e3      	str	r3, [r4, #12]
			break;
 801a628:	f001 bf7c 	b.w	801c524 <problem_fetch+0x1ae60>
		case 747 :
			strcpy(p->name,"NANO");
 801a62c:	687b      	ldr	r3, [r7, #4]
 801a62e:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801a632:	4a63      	ldr	r2, [pc, #396]	; (801a7c0 <problem_fetch+0x190fc>)
 801a634:	6810      	ldr	r0, [r2, #0]
 801a636:	6018      	str	r0, [r3, #0]
 801a638:	7912      	ldrb	r2, [r2, #4]
 801a63a:	711a      	strb	r2, [r3, #4]
			strcpy(p->grade,"7A+");
 801a63c:	687b      	ldr	r3, [r7, #4]
 801a63e:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801a642:	4a53      	ldr	r2, [pc, #332]	; (801a790 <problem_fetch+0x190cc>)
 801a644:	6810      	ldr	r0, [r2, #0]
 801a646:	6018      	str	r0, [r3, #0]
			p->moveSize = 5;
 801a648:	687b      	ldr	r3, [r7, #4]
 801a64a:	2205      	movs	r2, #5
 801a64c:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"E,I,H,K,I");
 801a64e:	687b      	ldr	r3, [r7, #4]
 801a650:	33a4      	adds	r3, #164	; 0xa4
 801a652:	495c      	ldr	r1, [pc, #368]	; (801a7c4 <problem_fetch+0x19100>)
 801a654:	461a      	mov	r2, r3
 801a656:	460b      	mov	r3, r1
 801a658:	cb03      	ldmia	r3!, {r0, r1}
 801a65a:	6010      	str	r0, [r2, #0]
 801a65c:	6051      	str	r1, [r2, #4]
 801a65e:	881b      	ldrh	r3, [r3, #0]
 801a660:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"6,10,12,14,18");
 801a662:	687b      	ldr	r3, [r7, #4]
 801a664:	3304      	adds	r3, #4
 801a666:	4a58      	ldr	r2, [pc, #352]	; (801a7c8 <problem_fetch+0x19104>)
 801a668:	461c      	mov	r4, r3
 801a66a:	4613      	mov	r3, r2
 801a66c:	cb07      	ldmia	r3!, {r0, r1, r2}
 801a66e:	6020      	str	r0, [r4, #0]
 801a670:	6061      	str	r1, [r4, #4]
 801a672:	60a2      	str	r2, [r4, #8]
 801a674:	881b      	ldrh	r3, [r3, #0]
 801a676:	81a3      	strh	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,e");
 801a678:	687b      	ldr	r3, [r7, #4]
 801a67a:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 801a67e:	4953      	ldr	r1, [pc, #332]	; (801a7cc <problem_fetch+0x19108>)
 801a680:	461a      	mov	r2, r3
 801a682:	460b      	mov	r3, r1
 801a684:	cb03      	ldmia	r3!, {r0, r1}
 801a686:	6010      	str	r0, [r2, #0]
 801a688:	6051      	str	r1, [r2, #4]
 801a68a:	881b      	ldrh	r3, [r3, #0]
 801a68c:	8113      	strh	r3, [r2, #8]
			break;
 801a68e:	f001 bf49 	b.w	801c524 <problem_fetch+0x1ae60>
		case 748 :
			strcpy(p->name,"REALE");
 801a692:	687b      	ldr	r3, [r7, #4]
 801a694:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801a698:	4a4d      	ldr	r2, [pc, #308]	; (801a7d0 <problem_fetch+0x1910c>)
 801a69a:	6810      	ldr	r0, [r2, #0]
 801a69c:	6018      	str	r0, [r3, #0]
 801a69e:	8892      	ldrh	r2, [r2, #4]
 801a6a0:	809a      	strh	r2, [r3, #4]
			strcpy(p->grade,"6C");
 801a6a2:	687b      	ldr	r3, [r7, #4]
 801a6a4:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801a6a8:	4a4a      	ldr	r2, [pc, #296]	; (801a7d4 <problem_fetch+0x19110>)
 801a6aa:	8811      	ldrh	r1, [r2, #0]
 801a6ac:	7892      	ldrb	r2, [r2, #2]
 801a6ae:	8019      	strh	r1, [r3, #0]
 801a6b0:	709a      	strb	r2, [r3, #2]
			p->moveSize = 7;
 801a6b2:	687b      	ldr	r3, [r7, #4]
 801a6b4:	2207      	movs	r2, #7
 801a6b6:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,H,C,F,G,K,I");
 801a6b8:	687b      	ldr	r3, [r7, #4]
 801a6ba:	33a4      	adds	r3, #164	; 0xa4
 801a6bc:	4a46      	ldr	r2, [pc, #280]	; (801a7d8 <problem_fetch+0x19114>)
 801a6be:	461c      	mov	r4, r3
 801a6c0:	4613      	mov	r3, r2
 801a6c2:	cb07      	ldmia	r3!, {r0, r1, r2}
 801a6c4:	6020      	str	r0, [r4, #0]
 801a6c6:	6061      	str	r1, [r4, #4]
 801a6c8:	60a2      	str	r2, [r4, #8]
 801a6ca:	881b      	ldrh	r3, [r3, #0]
 801a6cc:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,5,8,11,14,16,18");
 801a6ce:	687b      	ldr	r3, [r7, #4]
 801a6d0:	3304      	adds	r3, #4
 801a6d2:	4a42      	ldr	r2, [pc, #264]	; (801a7dc <problem_fetch+0x19118>)
 801a6d4:	461d      	mov	r5, r3
 801a6d6:	4614      	mov	r4, r2
 801a6d8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801a6da:	6028      	str	r0, [r5, #0]
 801a6dc:	6069      	str	r1, [r5, #4]
 801a6de:	60aa      	str	r2, [r5, #8]
 801a6e0:	60eb      	str	r3, [r5, #12]
 801a6e2:	8823      	ldrh	r3, [r4, #0]
 801a6e4:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,s,d,d,d,d,e");
 801a6e6:	687b      	ldr	r3, [r7, #4]
 801a6e8:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 801a6ec:	4a3c      	ldr	r2, [pc, #240]	; (801a7e0 <problem_fetch+0x1911c>)
 801a6ee:	461c      	mov	r4, r3
 801a6f0:	4613      	mov	r3, r2
 801a6f2:	cb07      	ldmia	r3!, {r0, r1, r2}
 801a6f4:	6020      	str	r0, [r4, #0]
 801a6f6:	6061      	str	r1, [r4, #4]
 801a6f8:	60a2      	str	r2, [r4, #8]
 801a6fa:	881b      	ldrh	r3, [r3, #0]
 801a6fc:	81a3      	strh	r3, [r4, #12]
			break;
 801a6fe:	f001 bf11 	b.w	801c524 <problem_fetch+0x1ae60>
		case 749 :
			strcpy(p->name,"UNDERTAKER");
 801a702:	687b      	ldr	r3, [r7, #4]
 801a704:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801a708:	4936      	ldr	r1, [pc, #216]	; (801a7e4 <problem_fetch+0x19120>)
 801a70a:	461a      	mov	r2, r3
 801a70c:	460b      	mov	r3, r1
 801a70e:	cb03      	ldmia	r3!, {r0, r1}
 801a710:	6010      	str	r0, [r2, #0]
 801a712:	6051      	str	r1, [r2, #4]
 801a714:	8819      	ldrh	r1, [r3, #0]
 801a716:	789b      	ldrb	r3, [r3, #2]
 801a718:	8111      	strh	r1, [r2, #8]
 801a71a:	7293      	strb	r3, [r2, #10]
			strcpy(p->grade,"7B");
 801a71c:	687b      	ldr	r3, [r7, #4]
 801a71e:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801a722:	4a31      	ldr	r2, [pc, #196]	; (801a7e8 <problem_fetch+0x19124>)
 801a724:	8811      	ldrh	r1, [r2, #0]
 801a726:	7892      	ldrb	r2, [r2, #2]
 801a728:	8019      	strh	r1, [r3, #0]
 801a72a:	709a      	strb	r2, [r3, #2]
			p->moveSize = 5;
 801a72c:	687b      	ldr	r3, [r7, #4]
 801a72e:	2205      	movs	r2, #5
 801a730:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"C,E,B,E,D");
 801a732:	687b      	ldr	r3, [r7, #4]
 801a734:	33a4      	adds	r3, #164	; 0xa4
 801a736:	492d      	ldr	r1, [pc, #180]	; (801a7ec <problem_fetch+0x19128>)
 801a738:	461a      	mov	r2, r3
 801a73a:	460b      	mov	r3, r1
 801a73c:	cb03      	ldmia	r3!, {r0, r1}
 801a73e:	6010      	str	r0, [r2, #0]
 801a740:	6051      	str	r1, [r2, #4]
 801a742:	881b      	ldrh	r3, [r3, #0]
 801a744:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"5,9,12,14,18");
 801a746:	687b      	ldr	r3, [r7, #4]
 801a748:	3304      	adds	r3, #4
 801a74a:	4a29      	ldr	r2, [pc, #164]	; (801a7f0 <problem_fetch+0x1912c>)
 801a74c:	461c      	mov	r4, r3
 801a74e:	4613      	mov	r3, r2
 801a750:	cb07      	ldmia	r3!, {r0, r1, r2}
 801a752:	6020      	str	r0, [r4, #0]
 801a754:	6061      	str	r1, [r4, #4]
 801a756:	60a2      	str	r2, [r4, #8]
 801a758:	781b      	ldrb	r3, [r3, #0]
 801a75a:	7323      	strb	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,e");
 801a75c:	687b      	ldr	r3, [r7, #4]
 801a75e:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 801a762:	491a      	ldr	r1, [pc, #104]	; (801a7cc <problem_fetch+0x19108>)
 801a764:	461a      	mov	r2, r3
 801a766:	460b      	mov	r3, r1
 801a768:	cb03      	ldmia	r3!, {r0, r1}
 801a76a:	6010      	str	r0, [r2, #0]
 801a76c:	6051      	str	r1, [r2, #4]
 801a76e:	881b      	ldrh	r3, [r3, #0]
 801a770:	8113      	strh	r3, [r2, #8]
			break;
 801a772:	f001 bed7 	b.w	801c524 <problem_fetch+0x1ae60>
 801a776:	bf00      	nop
 801a778:	0802c39c 	.word	0x0802c39c
 801a77c:	08023814 	.word	0x08023814
 801a780:	0802c3a8 	.word	0x0802c3a8
 801a784:	0802c3b8 	.word	0x0802c3b8
 801a788:	080239dc 	.word	0x080239dc
 801a78c:	0802c3cc 	.word	0x0802c3cc
 801a790:	080239f4 	.word	0x080239f4
 801a794:	0802c3d4 	.word	0x0802c3d4
 801a798:	0802c3e0 	.word	0x0802c3e0
 801a79c:	08023bf0 	.word	0x08023bf0
 801a7a0:	0802c3f0 	.word	0x0802c3f0
 801a7a4:	08023854 	.word	0x08023854
 801a7a8:	0802c400 	.word	0x0802c400
 801a7ac:	0802c410 	.word	0x0802c410
 801a7b0:	0802c424 	.word	0x0802c424
 801a7b4:	0802c438 	.word	0x0802c438
 801a7b8:	0802c448 	.word	0x0802c448
 801a7bc:	08023978 	.word	0x08023978
 801a7c0:	0802c460 	.word	0x0802c460
 801a7c4:	0802c468 	.word	0x0802c468
 801a7c8:	0802c474 	.word	0x0802c474
 801a7cc:	08023d20 	.word	0x08023d20
 801a7d0:	0802c484 	.word	0x0802c484
 801a7d4:	08023920 	.word	0x08023920
 801a7d8:	0802c48c 	.word	0x0802c48c
 801a7dc:	0802c49c 	.word	0x0802c49c
 801a7e0:	080238cc 	.word	0x080238cc
 801a7e4:	0802c4b0 	.word	0x0802c4b0
 801a7e8:	08023f4c 	.word	0x08023f4c
 801a7ec:	0802c4bc 	.word	0x0802c4bc
 801a7f0:	08023e70 	.word	0x08023e70
		case 750 :
			strcpy(p->name,"COGUARO");
 801a7f4:	687b      	ldr	r3, [r7, #4]
 801a7f6:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801a7fa:	49c0      	ldr	r1, [pc, #768]	; (801aafc <problem_fetch+0x19438>)
 801a7fc:	461a      	mov	r2, r3
 801a7fe:	460b      	mov	r3, r1
 801a800:	cb03      	ldmia	r3!, {r0, r1}
 801a802:	6010      	str	r0, [r2, #0]
 801a804:	6051      	str	r1, [r2, #4]
			strcpy(p->grade,"7A+");
 801a806:	687b      	ldr	r3, [r7, #4]
 801a808:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801a80c:	4abc      	ldr	r2, [pc, #752]	; (801ab00 <problem_fetch+0x1943c>)
 801a80e:	6810      	ldr	r0, [r2, #0]
 801a810:	6018      	str	r0, [r3, #0]
			p->moveSize = 5;
 801a812:	687b      	ldr	r3, [r7, #4]
 801a814:	2205      	movs	r2, #5
 801a816:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"E,E,H,G,I");
 801a818:	687b      	ldr	r3, [r7, #4]
 801a81a:	33a4      	adds	r3, #164	; 0xa4
 801a81c:	49b9      	ldr	r1, [pc, #740]	; (801ab04 <problem_fetch+0x19440>)
 801a81e:	461a      	mov	r2, r3
 801a820:	460b      	mov	r3, r1
 801a822:	cb03      	ldmia	r3!, {r0, r1}
 801a824:	6010      	str	r0, [r2, #0]
 801a826:	6051      	str	r1, [r2, #4]
 801a828:	881b      	ldrh	r3, [r3, #0]
 801a82a:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"6,8,8,14,18");
 801a82c:	687b      	ldr	r3, [r7, #4]
 801a82e:	3304      	adds	r3, #4
 801a830:	4ab5      	ldr	r2, [pc, #724]	; (801ab08 <problem_fetch+0x19444>)
 801a832:	461c      	mov	r4, r3
 801a834:	4613      	mov	r3, r2
 801a836:	cb07      	ldmia	r3!, {r0, r1, r2}
 801a838:	6020      	str	r0, [r4, #0]
 801a83a:	6061      	str	r1, [r4, #4]
 801a83c:	60a2      	str	r2, [r4, #8]
			strcpy(p->startFinish,"s,d,d,d,e");
 801a83e:	687b      	ldr	r3, [r7, #4]
 801a840:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 801a844:	49b1      	ldr	r1, [pc, #708]	; (801ab0c <problem_fetch+0x19448>)
 801a846:	461a      	mov	r2, r3
 801a848:	460b      	mov	r3, r1
 801a84a:	cb03      	ldmia	r3!, {r0, r1}
 801a84c:	6010      	str	r0, [r2, #0]
 801a84e:	6051      	str	r1, [r2, #4]
 801a850:	881b      	ldrh	r3, [r3, #0]
 801a852:	8113      	strh	r3, [r2, #8]
			break;
 801a854:	f001 be66 	b.w	801c524 <problem_fetch+0x1ae60>
		case 751 :
			strcpy(p->name,"SMOKING AREA");
 801a858:	687b      	ldr	r3, [r7, #4]
 801a85a:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801a85e:	4aac      	ldr	r2, [pc, #688]	; (801ab10 <problem_fetch+0x1944c>)
 801a860:	461c      	mov	r4, r3
 801a862:	4613      	mov	r3, r2
 801a864:	cb07      	ldmia	r3!, {r0, r1, r2}
 801a866:	6020      	str	r0, [r4, #0]
 801a868:	6061      	str	r1, [r4, #4]
 801a86a:	60a2      	str	r2, [r4, #8]
 801a86c:	781b      	ldrb	r3, [r3, #0]
 801a86e:	7323      	strb	r3, [r4, #12]
			strcpy(p->grade,"6C");
 801a870:	687b      	ldr	r3, [r7, #4]
 801a872:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801a876:	4aa7      	ldr	r2, [pc, #668]	; (801ab14 <problem_fetch+0x19450>)
 801a878:	8811      	ldrh	r1, [r2, #0]
 801a87a:	7892      	ldrb	r2, [r2, #2]
 801a87c:	8019      	strh	r1, [r3, #0]
 801a87e:	709a      	strb	r2, [r3, #2]
			p->moveSize = 6;
 801a880:	687b      	ldr	r3, [r7, #4]
 801a882:	2206      	movs	r2, #6
 801a884:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,H,C,E,E,I");
 801a886:	687b      	ldr	r3, [r7, #4]
 801a888:	33a4      	adds	r3, #164	; 0xa4
 801a88a:	4aa3      	ldr	r2, [pc, #652]	; (801ab18 <problem_fetch+0x19454>)
 801a88c:	461c      	mov	r4, r3
 801a88e:	4613      	mov	r3, r2
 801a890:	cb07      	ldmia	r3!, {r0, r1, r2}
 801a892:	6020      	str	r0, [r4, #0]
 801a894:	6061      	str	r1, [r4, #4]
 801a896:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,8,8,12,16,18");
 801a898:	687b      	ldr	r3, [r7, #4]
 801a89a:	3304      	adds	r3, #4
 801a89c:	4a9f      	ldr	r2, [pc, #636]	; (801ab1c <problem_fetch+0x19458>)
 801a89e:	461c      	mov	r4, r3
 801a8a0:	4613      	mov	r3, r2
 801a8a2:	cb07      	ldmia	r3!, {r0, r1, r2}
 801a8a4:	6020      	str	r0, [r4, #0]
 801a8a6:	6061      	str	r1, [r4, #4]
 801a8a8:	60a2      	str	r2, [r4, #8]
 801a8aa:	881a      	ldrh	r2, [r3, #0]
 801a8ac:	789b      	ldrb	r3, [r3, #2]
 801a8ae:	81a2      	strh	r2, [r4, #12]
 801a8b0:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 801a8b2:	687b      	ldr	r3, [r7, #4]
 801a8b4:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 801a8b8:	4a99      	ldr	r2, [pc, #612]	; (801ab20 <problem_fetch+0x1945c>)
 801a8ba:	461c      	mov	r4, r3
 801a8bc:	4613      	mov	r3, r2
 801a8be:	cb07      	ldmia	r3!, {r0, r1, r2}
 801a8c0:	6020      	str	r0, [r4, #0]
 801a8c2:	6061      	str	r1, [r4, #4]
 801a8c4:	60a2      	str	r2, [r4, #8]
			break;
 801a8c6:	f001 be2d 	b.w	801c524 <problem_fetch+0x1ae60>
		case 752 :
			strcpy(p->name,"BOGLI FOR PRESIDENT");
 801a8ca:	687b      	ldr	r3, [r7, #4]
 801a8cc:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801a8d0:	4a94      	ldr	r2, [pc, #592]	; (801ab24 <problem_fetch+0x19460>)
 801a8d2:	461d      	mov	r5, r3
 801a8d4:	4614      	mov	r4, r2
 801a8d6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801a8d8:	6028      	str	r0, [r5, #0]
 801a8da:	6069      	str	r1, [r5, #4]
 801a8dc:	60aa      	str	r2, [r5, #8]
 801a8de:	60eb      	str	r3, [r5, #12]
 801a8e0:	6820      	ldr	r0, [r4, #0]
 801a8e2:	6128      	str	r0, [r5, #16]
			strcpy(p->grade,"7A+");
 801a8e4:	687b      	ldr	r3, [r7, #4]
 801a8e6:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801a8ea:	4a85      	ldr	r2, [pc, #532]	; (801ab00 <problem_fetch+0x1943c>)
 801a8ec:	6810      	ldr	r0, [r2, #0]
 801a8ee:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 801a8f0:	687b      	ldr	r3, [r7, #4]
 801a8f2:	2207      	movs	r2, #7
 801a8f4:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,J,I,D,D,A,A");
 801a8f6:	687b      	ldr	r3, [r7, #4]
 801a8f8:	33a4      	adds	r3, #164	; 0xa4
 801a8fa:	4a8b      	ldr	r2, [pc, #556]	; (801ab28 <problem_fetch+0x19464>)
 801a8fc:	461c      	mov	r4, r3
 801a8fe:	4613      	mov	r3, r2
 801a900:	cb07      	ldmia	r3!, {r0, r1, r2}
 801a902:	6020      	str	r0, [r4, #0]
 801a904:	6061      	str	r1, [r4, #4]
 801a906:	60a2      	str	r2, [r4, #8]
 801a908:	881b      	ldrh	r3, [r3, #0]
 801a90a:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"6,5,9,11,15,14,18");
 801a90c:	687b      	ldr	r3, [r7, #4]
 801a90e:	3304      	adds	r3, #4
 801a910:	4a86      	ldr	r2, [pc, #536]	; (801ab2c <problem_fetch+0x19468>)
 801a912:	461d      	mov	r5, r3
 801a914:	4614      	mov	r4, r2
 801a916:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801a918:	6028      	str	r0, [r5, #0]
 801a91a:	6069      	str	r1, [r5, #4]
 801a91c:	60aa      	str	r2, [r5, #8]
 801a91e:	60eb      	str	r3, [r5, #12]
 801a920:	8823      	ldrh	r3, [r4, #0]
 801a922:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,s,d,d,d,d,e");
 801a924:	687b      	ldr	r3, [r7, #4]
 801a926:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 801a92a:	4a81      	ldr	r2, [pc, #516]	; (801ab30 <problem_fetch+0x1946c>)
 801a92c:	461c      	mov	r4, r3
 801a92e:	4613      	mov	r3, r2
 801a930:	cb07      	ldmia	r3!, {r0, r1, r2}
 801a932:	6020      	str	r0, [r4, #0]
 801a934:	6061      	str	r1, [r4, #4]
 801a936:	60a2      	str	r2, [r4, #8]
 801a938:	881b      	ldrh	r3, [r3, #0]
 801a93a:	81a3      	strh	r3, [r4, #12]
			break;
 801a93c:	f001 bdf2 	b.w	801c524 <problem_fetch+0x1ae60>
		case 753 :
			strcpy(p->name,"DU SPICCI");
 801a940:	687b      	ldr	r3, [r7, #4]
 801a942:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801a946:	497b      	ldr	r1, [pc, #492]	; (801ab34 <problem_fetch+0x19470>)
 801a948:	461a      	mov	r2, r3
 801a94a:	460b      	mov	r3, r1
 801a94c:	cb03      	ldmia	r3!, {r0, r1}
 801a94e:	6010      	str	r0, [r2, #0]
 801a950:	6051      	str	r1, [r2, #4]
 801a952:	881b      	ldrh	r3, [r3, #0]
 801a954:	8113      	strh	r3, [r2, #8]
			strcpy(p->grade,"6C+");
 801a956:	687b      	ldr	r3, [r7, #4]
 801a958:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801a95c:	4a76      	ldr	r2, [pc, #472]	; (801ab38 <problem_fetch+0x19474>)
 801a95e:	6810      	ldr	r0, [r2, #0]
 801a960:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 801a962:	687b      	ldr	r3, [r7, #4]
 801a964:	2206      	movs	r2, #6
 801a966:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"E,J,I,D,E,D");
 801a968:	687b      	ldr	r3, [r7, #4]
 801a96a:	33a4      	adds	r3, #164	; 0xa4
 801a96c:	4a73      	ldr	r2, [pc, #460]	; (801ab3c <problem_fetch+0x19478>)
 801a96e:	461c      	mov	r4, r3
 801a970:	4613      	mov	r3, r2
 801a972:	cb07      	ldmia	r3!, {r0, r1, r2}
 801a974:	6020      	str	r0, [r4, #0]
 801a976:	6061      	str	r1, [r4, #4]
 801a978:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"6,5,10,11,14,18");
 801a97a:	687b      	ldr	r3, [r7, #4]
 801a97c:	3304      	adds	r3, #4
 801a97e:	4a70      	ldr	r2, [pc, #448]	; (801ab40 <problem_fetch+0x1947c>)
 801a980:	461c      	mov	r4, r3
 801a982:	4615      	mov	r5, r2
 801a984:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801a986:	6020      	str	r0, [r4, #0]
 801a988:	6061      	str	r1, [r4, #4]
 801a98a:	60a2      	str	r2, [r4, #8]
 801a98c:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,s,d,d,d,e");
 801a98e:	687b      	ldr	r3, [r7, #4]
 801a990:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 801a994:	4a6b      	ldr	r2, [pc, #428]	; (801ab44 <problem_fetch+0x19480>)
 801a996:	461c      	mov	r4, r3
 801a998:	4613      	mov	r3, r2
 801a99a:	cb07      	ldmia	r3!, {r0, r1, r2}
 801a99c:	6020      	str	r0, [r4, #0]
 801a99e:	6061      	str	r1, [r4, #4]
 801a9a0:	60a2      	str	r2, [r4, #8]
			break;
 801a9a2:	f001 bdbf 	b.w	801c524 <problem_fetch+0x1ae60>
		case 754 :
			strcpy(p->name,"CALLA");
 801a9a6:	687b      	ldr	r3, [r7, #4]
 801a9a8:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801a9ac:	4a66      	ldr	r2, [pc, #408]	; (801ab48 <problem_fetch+0x19484>)
 801a9ae:	6810      	ldr	r0, [r2, #0]
 801a9b0:	6018      	str	r0, [r3, #0]
 801a9b2:	8892      	ldrh	r2, [r2, #4]
 801a9b4:	809a      	strh	r2, [r3, #4]
			strcpy(p->grade,"6B+");
 801a9b6:	687b      	ldr	r3, [r7, #4]
 801a9b8:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801a9bc:	4a63      	ldr	r2, [pc, #396]	; (801ab4c <problem_fetch+0x19488>)
 801a9be:	6810      	ldr	r0, [r2, #0]
 801a9c0:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 801a9c2:	687b      	ldr	r3, [r7, #4]
 801a9c4:	2207      	movs	r2, #7
 801a9c6:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,E,H,F,G,E,I");
 801a9c8:	687b      	ldr	r3, [r7, #4]
 801a9ca:	33a4      	adds	r3, #164	; 0xa4
 801a9cc:	4a60      	ldr	r2, [pc, #384]	; (801ab50 <problem_fetch+0x1948c>)
 801a9ce:	461c      	mov	r4, r3
 801a9d0:	4613      	mov	r3, r2
 801a9d2:	cb07      	ldmia	r3!, {r0, r1, r2}
 801a9d4:	6020      	str	r0, [r4, #0]
 801a9d6:	6061      	str	r1, [r4, #4]
 801a9d8:	60a2      	str	r2, [r4, #8]
 801a9da:	881b      	ldrh	r3, [r3, #0]
 801a9dc:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,8,10,13,14,16,18");
 801a9de:	687b      	ldr	r3, [r7, #4]
 801a9e0:	3304      	adds	r3, #4
 801a9e2:	4a5c      	ldr	r2, [pc, #368]	; (801ab54 <problem_fetch+0x19490>)
 801a9e4:	461d      	mov	r5, r3
 801a9e6:	4614      	mov	r4, r2
 801a9e8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801a9ea:	6028      	str	r0, [r5, #0]
 801a9ec:	6069      	str	r1, [r5, #4]
 801a9ee:	60aa      	str	r2, [r5, #8]
 801a9f0:	60eb      	str	r3, [r5, #12]
 801a9f2:	8823      	ldrh	r3, [r4, #0]
 801a9f4:	78a2      	ldrb	r2, [r4, #2]
 801a9f6:	822b      	strh	r3, [r5, #16]
 801a9f8:	4613      	mov	r3, r2
 801a9fa:	74ab      	strb	r3, [r5, #18]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 801a9fc:	687b      	ldr	r3, [r7, #4]
 801a9fe:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 801aa02:	4a55      	ldr	r2, [pc, #340]	; (801ab58 <problem_fetch+0x19494>)
 801aa04:	461c      	mov	r4, r3
 801aa06:	4613      	mov	r3, r2
 801aa08:	cb07      	ldmia	r3!, {r0, r1, r2}
 801aa0a:	6020      	str	r0, [r4, #0]
 801aa0c:	6061      	str	r1, [r4, #4]
 801aa0e:	60a2      	str	r2, [r4, #8]
 801aa10:	881b      	ldrh	r3, [r3, #0]
 801aa12:	81a3      	strh	r3, [r4, #12]
			break;
 801aa14:	f001 bd86 	b.w	801c524 <problem_fetch+0x1ae60>
		case 755 :
			strcpy(p->name,"FA");
 801aa18:	687b      	ldr	r3, [r7, #4]
 801aa1a:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801aa1e:	4a4f      	ldr	r2, [pc, #316]	; (801ab5c <problem_fetch+0x19498>)
 801aa20:	8811      	ldrh	r1, [r2, #0]
 801aa22:	7892      	ldrb	r2, [r2, #2]
 801aa24:	8019      	strh	r1, [r3, #0]
 801aa26:	709a      	strb	r2, [r3, #2]
			strcpy(p->grade,"6B+");
 801aa28:	687b      	ldr	r3, [r7, #4]
 801aa2a:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801aa2e:	4a47      	ldr	r2, [pc, #284]	; (801ab4c <problem_fetch+0x19488>)
 801aa30:	6810      	ldr	r0, [r2, #0]
 801aa32:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 801aa34:	687b      	ldr	r3, [r7, #4]
 801aa36:	2206      	movs	r2, #6
 801aa38:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,E,E,H,E,D");
 801aa3a:	687b      	ldr	r3, [r7, #4]
 801aa3c:	33a4      	adds	r3, #164	; 0xa4
 801aa3e:	4a48      	ldr	r2, [pc, #288]	; (801ab60 <problem_fetch+0x1949c>)
 801aa40:	461c      	mov	r4, r3
 801aa42:	4613      	mov	r3, r2
 801aa44:	cb07      	ldmia	r3!, {r0, r1, r2}
 801aa46:	6020      	str	r0, [r4, #0]
 801aa48:	6061      	str	r1, [r4, #4]
 801aa4a:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,8,9,13,16,18");
 801aa4c:	687b      	ldr	r3, [r7, #4]
 801aa4e:	3304      	adds	r3, #4
 801aa50:	4a44      	ldr	r2, [pc, #272]	; (801ab64 <problem_fetch+0x194a0>)
 801aa52:	461c      	mov	r4, r3
 801aa54:	4613      	mov	r3, r2
 801aa56:	cb07      	ldmia	r3!, {r0, r1, r2}
 801aa58:	6020      	str	r0, [r4, #0]
 801aa5a:	6061      	str	r1, [r4, #4]
 801aa5c:	60a2      	str	r2, [r4, #8]
 801aa5e:	881a      	ldrh	r2, [r3, #0]
 801aa60:	789b      	ldrb	r3, [r3, #2]
 801aa62:	81a2      	strh	r2, [r4, #12]
 801aa64:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 801aa66:	687b      	ldr	r3, [r7, #4]
 801aa68:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 801aa6c:	4a2c      	ldr	r2, [pc, #176]	; (801ab20 <problem_fetch+0x1945c>)
 801aa6e:	461c      	mov	r4, r3
 801aa70:	4613      	mov	r3, r2
 801aa72:	cb07      	ldmia	r3!, {r0, r1, r2}
 801aa74:	6020      	str	r0, [r4, #0]
 801aa76:	6061      	str	r1, [r4, #4]
 801aa78:	60a2      	str	r2, [r4, #8]
			break;
 801aa7a:	f001 bd53 	b.w	801c524 <problem_fetch+0x1ae60>
		case 756 :
			strcpy(p->name,"BLACK HOLE");
 801aa7e:	687b      	ldr	r3, [r7, #4]
 801aa80:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801aa84:	4938      	ldr	r1, [pc, #224]	; (801ab68 <problem_fetch+0x194a4>)
 801aa86:	461a      	mov	r2, r3
 801aa88:	460b      	mov	r3, r1
 801aa8a:	cb03      	ldmia	r3!, {r0, r1}
 801aa8c:	6010      	str	r0, [r2, #0]
 801aa8e:	6051      	str	r1, [r2, #4]
 801aa90:	8819      	ldrh	r1, [r3, #0]
 801aa92:	789b      	ldrb	r3, [r3, #2]
 801aa94:	8111      	strh	r1, [r2, #8]
 801aa96:	7293      	strb	r3, [r2, #10]
			strcpy(p->grade,"6B+");
 801aa98:	687b      	ldr	r3, [r7, #4]
 801aa9a:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801aa9e:	4a2b      	ldr	r2, [pc, #172]	; (801ab4c <problem_fetch+0x19488>)
 801aaa0:	6810      	ldr	r0, [r2, #0]
 801aaa2:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 801aaa4:	687b      	ldr	r3, [r7, #4]
 801aaa6:	2207      	movs	r2, #7
 801aaa8:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,J,I,J,G,G,D");
 801aaaa:	687b      	ldr	r3, [r7, #4]
 801aaac:	33a4      	adds	r3, #164	; 0xa4
 801aaae:	4a2f      	ldr	r2, [pc, #188]	; (801ab6c <problem_fetch+0x194a8>)
 801aab0:	461c      	mov	r4, r3
 801aab2:	4613      	mov	r3, r2
 801aab4:	cb07      	ldmia	r3!, {r0, r1, r2}
 801aab6:	6020      	str	r0, [r4, #0]
 801aab8:	6061      	str	r1, [r4, #4]
 801aaba:	60a2      	str	r2, [r4, #8]
 801aabc:	881b      	ldrh	r3, [r3, #0]
 801aabe:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,7,10,13,15,17,18");
 801aac0:	687b      	ldr	r3, [r7, #4]
 801aac2:	3304      	adds	r3, #4
 801aac4:	4a2a      	ldr	r2, [pc, #168]	; (801ab70 <problem_fetch+0x194ac>)
 801aac6:	461d      	mov	r5, r3
 801aac8:	4614      	mov	r4, r2
 801aaca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801aacc:	6028      	str	r0, [r5, #0]
 801aace:	6069      	str	r1, [r5, #4]
 801aad0:	60aa      	str	r2, [r5, #8]
 801aad2:	60eb      	str	r3, [r5, #12]
 801aad4:	8823      	ldrh	r3, [r4, #0]
 801aad6:	78a2      	ldrb	r2, [r4, #2]
 801aad8:	822b      	strh	r3, [r5, #16]
 801aada:	4613      	mov	r3, r2
 801aadc:	74ab      	strb	r3, [r5, #18]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 801aade:	687b      	ldr	r3, [r7, #4]
 801aae0:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 801aae4:	4a1c      	ldr	r2, [pc, #112]	; (801ab58 <problem_fetch+0x19494>)
 801aae6:	461c      	mov	r4, r3
 801aae8:	4613      	mov	r3, r2
 801aaea:	cb07      	ldmia	r3!, {r0, r1, r2}
 801aaec:	6020      	str	r0, [r4, #0]
 801aaee:	6061      	str	r1, [r4, #4]
 801aaf0:	60a2      	str	r2, [r4, #8]
 801aaf2:	881b      	ldrh	r3, [r3, #0]
 801aaf4:	81a3      	strh	r3, [r4, #12]
			break;
 801aaf6:	f001 bd15 	b.w	801c524 <problem_fetch+0x1ae60>
 801aafa:	bf00      	nop
 801aafc:	0802c4c8 	.word	0x0802c4c8
 801ab00:	080239f4 	.word	0x080239f4
 801ab04:	0802c4d0 	.word	0x0802c4d0
 801ab08:	0802c4dc 	.word	0x0802c4dc
 801ab0c:	08023d20 	.word	0x08023d20
 801ab10:	0802c4e8 	.word	0x0802c4e8
 801ab14:	08023920 	.word	0x08023920
 801ab18:	0802c4f8 	.word	0x0802c4f8
 801ab1c:	0802c504 	.word	0x0802c504
 801ab20:	08023bf0 	.word	0x08023bf0
 801ab24:	0802c514 	.word	0x0802c514
 801ab28:	0802c528 	.word	0x0802c528
 801ab2c:	0802c538 	.word	0x0802c538
 801ab30:	080238cc 	.word	0x080238cc
 801ab34:	0802c54c 	.word	0x0802c54c
 801ab38:	080238ec 	.word	0x080238ec
 801ab3c:	0802c558 	.word	0x0802c558
 801ab40:	0802c564 	.word	0x0802c564
 801ab44:	08023834 	.word	0x08023834
 801ab48:	0802c574 	.word	0x0802c574
 801ab4c:	08023854 	.word	0x08023854
 801ab50:	0802c57c 	.word	0x0802c57c
 801ab54:	080299c8 	.word	0x080299c8
 801ab58:	080239dc 	.word	0x080239dc
 801ab5c:	0802c58c 	.word	0x0802c58c
 801ab60:	0802c590 	.word	0x0802c590
 801ab64:	080282f4 	.word	0x080282f4
 801ab68:	0802c59c 	.word	0x0802c59c
 801ab6c:	0802c5a8 	.word	0x0802c5a8
 801ab70:	0802c5b8 	.word	0x0802c5b8
		case 757 :
			strcpy(p->name,"MATCH GAME");
 801ab74:	687b      	ldr	r3, [r7, #4]
 801ab76:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801ab7a:	49ad      	ldr	r1, [pc, #692]	; (801ae30 <problem_fetch+0x1976c>)
 801ab7c:	461a      	mov	r2, r3
 801ab7e:	460b      	mov	r3, r1
 801ab80:	cb03      	ldmia	r3!, {r0, r1}
 801ab82:	6010      	str	r0, [r2, #0]
 801ab84:	6051      	str	r1, [r2, #4]
 801ab86:	8819      	ldrh	r1, [r3, #0]
 801ab88:	789b      	ldrb	r3, [r3, #2]
 801ab8a:	8111      	strh	r1, [r2, #8]
 801ab8c:	7293      	strb	r3, [r2, #10]
			strcpy(p->grade,"6B+");
 801ab8e:	687b      	ldr	r3, [r7, #4]
 801ab90:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801ab94:	4aa7      	ldr	r2, [pc, #668]	; (801ae34 <problem_fetch+0x19770>)
 801ab96:	6810      	ldr	r0, [r2, #0]
 801ab98:	6018      	str	r0, [r3, #0]
			p->moveSize = 5;
 801ab9a:	687b      	ldr	r3, [r7, #4]
 801ab9c:	2205      	movs	r2, #5
 801ab9e:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,G,I,G,I");
 801aba0:	687b      	ldr	r3, [r7, #4]
 801aba2:	33a4      	adds	r3, #164	; 0xa4
 801aba4:	49a4      	ldr	r1, [pc, #656]	; (801ae38 <problem_fetch+0x19774>)
 801aba6:	461a      	mov	r2, r3
 801aba8:	460b      	mov	r3, r1
 801abaa:	cb03      	ldmia	r3!, {r0, r1}
 801abac:	6010      	str	r0, [r2, #0]
 801abae:	6051      	str	r1, [r2, #4]
 801abb0:	881b      	ldrh	r3, [r3, #0]
 801abb2:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"4,6,10,14,18");
 801abb4:	687b      	ldr	r3, [r7, #4]
 801abb6:	3304      	adds	r3, #4
 801abb8:	4aa0      	ldr	r2, [pc, #640]	; (801ae3c <problem_fetch+0x19778>)
 801abba:	461c      	mov	r4, r3
 801abbc:	4613      	mov	r3, r2
 801abbe:	cb07      	ldmia	r3!, {r0, r1, r2}
 801abc0:	6020      	str	r0, [r4, #0]
 801abc2:	6061      	str	r1, [r4, #4]
 801abc4:	60a2      	str	r2, [r4, #8]
 801abc6:	781b      	ldrb	r3, [r3, #0]
 801abc8:	7323      	strb	r3, [r4, #12]
			strcpy(p->startFinish,"s,s,d,d,e");
 801abca:	687b      	ldr	r3, [r7, #4]
 801abcc:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 801abd0:	499b      	ldr	r1, [pc, #620]	; (801ae40 <problem_fetch+0x1977c>)
 801abd2:	461a      	mov	r2, r3
 801abd4:	460b      	mov	r3, r1
 801abd6:	cb03      	ldmia	r3!, {r0, r1}
 801abd8:	6010      	str	r0, [r2, #0]
 801abda:	6051      	str	r1, [r2, #4]
 801abdc:	881b      	ldrh	r3, [r3, #0]
 801abde:	8113      	strh	r3, [r2, #8]
			break;
 801abe0:	f001 bca0 	b.w	801c524 <problem_fetch+0x1ae60>
		case 758 :
			strcpy(p->name,"USE THE BIG ONES");
 801abe4:	687b      	ldr	r3, [r7, #4]
 801abe6:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801abea:	4a96      	ldr	r2, [pc, #600]	; (801ae44 <problem_fetch+0x19780>)
 801abec:	461d      	mov	r5, r3
 801abee:	4614      	mov	r4, r2
 801abf0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801abf2:	6028      	str	r0, [r5, #0]
 801abf4:	6069      	str	r1, [r5, #4]
 801abf6:	60aa      	str	r2, [r5, #8]
 801abf8:	60eb      	str	r3, [r5, #12]
 801abfa:	7823      	ldrb	r3, [r4, #0]
 801abfc:	742b      	strb	r3, [r5, #16]
			strcpy(p->grade,"6B+");
 801abfe:	687b      	ldr	r3, [r7, #4]
 801ac00:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801ac04:	4a8b      	ldr	r2, [pc, #556]	; (801ae34 <problem_fetch+0x19770>)
 801ac06:	6810      	ldr	r0, [r2, #0]
 801ac08:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 801ac0a:	687b      	ldr	r3, [r7, #4]
 801ac0c:	2207      	movs	r2, #7
 801ac0e:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,E,G,F,C,D,A");
 801ac10:	687b      	ldr	r3, [r7, #4]
 801ac12:	33a4      	adds	r3, #164	; 0xa4
 801ac14:	4a8c      	ldr	r2, [pc, #560]	; (801ae48 <problem_fetch+0x19784>)
 801ac16:	461c      	mov	r4, r3
 801ac18:	4613      	mov	r3, r2
 801ac1a:	cb07      	ldmia	r3!, {r0, r1, r2}
 801ac1c:	6020      	str	r0, [r4, #0]
 801ac1e:	6061      	str	r1, [r4, #4]
 801ac20:	60a2      	str	r2, [r4, #8]
 801ac22:	881b      	ldrh	r3, [r3, #0]
 801ac24:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,8,9,11,13,15,18");
 801ac26:	687b      	ldr	r3, [r7, #4]
 801ac28:	3304      	adds	r3, #4
 801ac2a:	4a88      	ldr	r2, [pc, #544]	; (801ae4c <problem_fetch+0x19788>)
 801ac2c:	461d      	mov	r5, r3
 801ac2e:	4614      	mov	r4, r2
 801ac30:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801ac32:	6028      	str	r0, [r5, #0]
 801ac34:	6069      	str	r1, [r5, #4]
 801ac36:	60aa      	str	r2, [r5, #8]
 801ac38:	60eb      	str	r3, [r5, #12]
 801ac3a:	8823      	ldrh	r3, [r4, #0]
 801ac3c:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 801ac3e:	687b      	ldr	r3, [r7, #4]
 801ac40:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 801ac44:	4a82      	ldr	r2, [pc, #520]	; (801ae50 <problem_fetch+0x1978c>)
 801ac46:	461c      	mov	r4, r3
 801ac48:	4613      	mov	r3, r2
 801ac4a:	cb07      	ldmia	r3!, {r0, r1, r2}
 801ac4c:	6020      	str	r0, [r4, #0]
 801ac4e:	6061      	str	r1, [r4, #4]
 801ac50:	60a2      	str	r2, [r4, #8]
 801ac52:	881b      	ldrh	r3, [r3, #0]
 801ac54:	81a3      	strh	r3, [r4, #12]
			break;
 801ac56:	f001 bc65 	b.w	801c524 <problem_fetch+0x1ae60>
		case 759 :
			strcpy(p->name,"KANG MINA IOI");
 801ac5a:	687b      	ldr	r3, [r7, #4]
 801ac5c:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801ac60:	4a7c      	ldr	r2, [pc, #496]	; (801ae54 <problem_fetch+0x19790>)
 801ac62:	461c      	mov	r4, r3
 801ac64:	4613      	mov	r3, r2
 801ac66:	cb07      	ldmia	r3!, {r0, r1, r2}
 801ac68:	6020      	str	r0, [r4, #0]
 801ac6a:	6061      	str	r1, [r4, #4]
 801ac6c:	60a2      	str	r2, [r4, #8]
 801ac6e:	881b      	ldrh	r3, [r3, #0]
 801ac70:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade,"7A");
 801ac72:	687b      	ldr	r3, [r7, #4]
 801ac74:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801ac78:	4a77      	ldr	r2, [pc, #476]	; (801ae58 <problem_fetch+0x19794>)
 801ac7a:	8811      	ldrh	r1, [r2, #0]
 801ac7c:	7892      	ldrb	r2, [r2, #2]
 801ac7e:	8019      	strh	r1, [r3, #0]
 801ac80:	709a      	strb	r2, [r3, #2]
			p->moveSize = 8;
 801ac82:	687b      	ldr	r3, [r7, #4]
 801ac84:	2208      	movs	r2, #8
 801ac86:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"E,E,B,B,A,D,E,I");
 801ac88:	687b      	ldr	r3, [r7, #4]
 801ac8a:	33a4      	adds	r3, #164	; 0xa4
 801ac8c:	4a73      	ldr	r2, [pc, #460]	; (801ae5c <problem_fetch+0x19798>)
 801ac8e:	461c      	mov	r4, r3
 801ac90:	4615      	mov	r5, r2
 801ac92:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801ac94:	6020      	str	r0, [r4, #0]
 801ac96:	6061      	str	r1, [r4, #4]
 801ac98:	60a2      	str	r2, [r4, #8]
 801ac9a:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"6,9,10,12,14,15,16,18");
 801ac9c:	687b      	ldr	r3, [r7, #4]
 801ac9e:	3304      	adds	r3, #4
 801aca0:	4a6f      	ldr	r2, [pc, #444]	; (801ae60 <problem_fetch+0x1979c>)
 801aca2:	461d      	mov	r5, r3
 801aca4:	4614      	mov	r4, r2
 801aca6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801aca8:	6028      	str	r0, [r5, #0]
 801acaa:	6069      	str	r1, [r5, #4]
 801acac:	60aa      	str	r2, [r5, #8]
 801acae:	60eb      	str	r3, [r5, #12]
 801acb0:	6820      	ldr	r0, [r4, #0]
 801acb2:	6128      	str	r0, [r5, #16]
 801acb4:	88a3      	ldrh	r3, [r4, #4]
 801acb6:	82ab      	strh	r3, [r5, #20]
			strcpy(p->startFinish,"s,d,d,d,d,d,d,e");
 801acb8:	687b      	ldr	r3, [r7, #4]
 801acba:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 801acbe:	4a69      	ldr	r2, [pc, #420]	; (801ae64 <problem_fetch+0x197a0>)
 801acc0:	461c      	mov	r4, r3
 801acc2:	4615      	mov	r5, r2
 801acc4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801acc6:	6020      	str	r0, [r4, #0]
 801acc8:	6061      	str	r1, [r4, #4]
 801acca:	60a2      	str	r2, [r4, #8]
 801accc:	60e3      	str	r3, [r4, #12]
			break;
 801acce:	f001 bc29 	b.w	801c524 <problem_fetch+0x1ae60>
		case 760 :
			strcpy(p->name,"ACG21");
 801acd2:	687b      	ldr	r3, [r7, #4]
 801acd4:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801acd8:	4a63      	ldr	r2, [pc, #396]	; (801ae68 <problem_fetch+0x197a4>)
 801acda:	6810      	ldr	r0, [r2, #0]
 801acdc:	6018      	str	r0, [r3, #0]
 801acde:	8892      	ldrh	r2, [r2, #4]
 801ace0:	809a      	strh	r2, [r3, #4]
			strcpy(p->grade,"7B");
 801ace2:	687b      	ldr	r3, [r7, #4]
 801ace4:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801ace8:	4a60      	ldr	r2, [pc, #384]	; (801ae6c <problem_fetch+0x197a8>)
 801acea:	8811      	ldrh	r1, [r2, #0]
 801acec:	7892      	ldrb	r2, [r2, #2]
 801acee:	8019      	strh	r1, [r3, #0]
 801acf0:	709a      	strb	r2, [r3, #2]
			p->moveSize = 8;
 801acf2:	687b      	ldr	r3, [r7, #4]
 801acf4:	2208      	movs	r2, #8
 801acf6:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,E,I,G,B,E,C,A");
 801acf8:	687b      	ldr	r3, [r7, #4]
 801acfa:	33a4      	adds	r3, #164	; 0xa4
 801acfc:	4a5c      	ldr	r2, [pc, #368]	; (801ae70 <problem_fetch+0x197ac>)
 801acfe:	461c      	mov	r4, r3
 801ad00:	4615      	mov	r5, r2
 801ad02:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801ad04:	6020      	str	r0, [r4, #0]
 801ad06:	6061      	str	r1, [r4, #4]
 801ad08:	60a2      	str	r2, [r4, #8]
 801ad0a:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,6,10,10,10,14,16,18");
 801ad0c:	687b      	ldr	r3, [r7, #4]
 801ad0e:	3304      	adds	r3, #4
 801ad10:	4a58      	ldr	r2, [pc, #352]	; (801ae74 <problem_fetch+0x197b0>)
 801ad12:	461d      	mov	r5, r3
 801ad14:	4614      	mov	r4, r2
 801ad16:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801ad18:	6028      	str	r0, [r5, #0]
 801ad1a:	6069      	str	r1, [r5, #4]
 801ad1c:	60aa      	str	r2, [r5, #8]
 801ad1e:	60eb      	str	r3, [r5, #12]
 801ad20:	6820      	ldr	r0, [r4, #0]
 801ad22:	6128      	str	r0, [r5, #16]
 801ad24:	88a3      	ldrh	r3, [r4, #4]
 801ad26:	82ab      	strh	r3, [r5, #20]
			strcpy(p->startFinish,"s,d,d,d,d,d,d,e");
 801ad28:	687b      	ldr	r3, [r7, #4]
 801ad2a:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 801ad2e:	4a4d      	ldr	r2, [pc, #308]	; (801ae64 <problem_fetch+0x197a0>)
 801ad30:	461c      	mov	r4, r3
 801ad32:	4615      	mov	r5, r2
 801ad34:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801ad36:	6020      	str	r0, [r4, #0]
 801ad38:	6061      	str	r1, [r4, #4]
 801ad3a:	60a2      	str	r2, [r4, #8]
 801ad3c:	60e3      	str	r3, [r4, #12]
			break;
 801ad3e:	f001 bbf1 	b.w	801c524 <problem_fetch+0x1ae60>
		case 761 :
			strcpy(p->name,"LANKY BASTARD");
 801ad42:	687b      	ldr	r3, [r7, #4]
 801ad44:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801ad48:	4a4b      	ldr	r2, [pc, #300]	; (801ae78 <problem_fetch+0x197b4>)
 801ad4a:	461c      	mov	r4, r3
 801ad4c:	4613      	mov	r3, r2
 801ad4e:	cb07      	ldmia	r3!, {r0, r1, r2}
 801ad50:	6020      	str	r0, [r4, #0]
 801ad52:	6061      	str	r1, [r4, #4]
 801ad54:	60a2      	str	r2, [r4, #8]
 801ad56:	881b      	ldrh	r3, [r3, #0]
 801ad58:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade,"6C");
 801ad5a:	687b      	ldr	r3, [r7, #4]
 801ad5c:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801ad60:	4a46      	ldr	r2, [pc, #280]	; (801ae7c <problem_fetch+0x197b8>)
 801ad62:	8811      	ldrh	r1, [r2, #0]
 801ad64:	7892      	ldrb	r2, [r2, #2]
 801ad66:	8019      	strh	r1, [r3, #0]
 801ad68:	709a      	strb	r2, [r3, #2]
			p->moveSize = 7;
 801ad6a:	687b      	ldr	r3, [r7, #4]
 801ad6c:	2207      	movs	r2, #7
 801ad6e:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,E,I,H,K,E,D");
 801ad70:	687b      	ldr	r3, [r7, #4]
 801ad72:	33a4      	adds	r3, #164	; 0xa4
 801ad74:	4a42      	ldr	r2, [pc, #264]	; (801ae80 <problem_fetch+0x197bc>)
 801ad76:	461c      	mov	r4, r3
 801ad78:	4613      	mov	r3, r2
 801ad7a:	cb07      	ldmia	r3!, {r0, r1, r2}
 801ad7c:	6020      	str	r0, [r4, #0]
 801ad7e:	6061      	str	r1, [r4, #4]
 801ad80:	60a2      	str	r2, [r4, #8]
 801ad82:	881b      	ldrh	r3, [r3, #0]
 801ad84:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,8,9,12,14,16,18");
 801ad86:	687b      	ldr	r3, [r7, #4]
 801ad88:	3304      	adds	r3, #4
 801ad8a:	4a3e      	ldr	r2, [pc, #248]	; (801ae84 <problem_fetch+0x197c0>)
 801ad8c:	461d      	mov	r5, r3
 801ad8e:	4614      	mov	r4, r2
 801ad90:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801ad92:	6028      	str	r0, [r5, #0]
 801ad94:	6069      	str	r1, [r5, #4]
 801ad96:	60aa      	str	r2, [r5, #8]
 801ad98:	60eb      	str	r3, [r5, #12]
 801ad9a:	8823      	ldrh	r3, [r4, #0]
 801ad9c:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 801ad9e:	687b      	ldr	r3, [r7, #4]
 801ada0:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 801ada4:	4a2a      	ldr	r2, [pc, #168]	; (801ae50 <problem_fetch+0x1978c>)
 801ada6:	461c      	mov	r4, r3
 801ada8:	4613      	mov	r3, r2
 801adaa:	cb07      	ldmia	r3!, {r0, r1, r2}
 801adac:	6020      	str	r0, [r4, #0]
 801adae:	6061      	str	r1, [r4, #4]
 801adb0:	60a2      	str	r2, [r4, #8]
 801adb2:	881b      	ldrh	r3, [r3, #0]
 801adb4:	81a3      	strh	r3, [r4, #12]
			break;
 801adb6:	f001 bbb5 	b.w	801c524 <problem_fetch+0x1ae60>
		case 762 :
			strcpy(p->name,"TESS WIDE");
 801adba:	687b      	ldr	r3, [r7, #4]
 801adbc:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801adc0:	4931      	ldr	r1, [pc, #196]	; (801ae88 <problem_fetch+0x197c4>)
 801adc2:	461a      	mov	r2, r3
 801adc4:	460b      	mov	r3, r1
 801adc6:	cb03      	ldmia	r3!, {r0, r1}
 801adc8:	6010      	str	r0, [r2, #0]
 801adca:	6051      	str	r1, [r2, #4]
 801adcc:	881b      	ldrh	r3, [r3, #0]
 801adce:	8113      	strh	r3, [r2, #8]
			strcpy(p->grade,"6C");
 801add0:	687b      	ldr	r3, [r7, #4]
 801add2:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801add6:	4a29      	ldr	r2, [pc, #164]	; (801ae7c <problem_fetch+0x197b8>)
 801add8:	8811      	ldrh	r1, [r2, #0]
 801adda:	7892      	ldrb	r2, [r2, #2]
 801addc:	8019      	strh	r1, [r3, #0]
 801adde:	709a      	strb	r2, [r3, #2]
			p->moveSize = 7;
 801ade0:	687b      	ldr	r3, [r7, #4]
 801ade2:	2207      	movs	r2, #7
 801ade4:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"C,E,E,H,C,D,D");
 801ade6:	687b      	ldr	r3, [r7, #4]
 801ade8:	33a4      	adds	r3, #164	; 0xa4
 801adea:	4a28      	ldr	r2, [pc, #160]	; (801ae8c <problem_fetch+0x197c8>)
 801adec:	461c      	mov	r4, r3
 801adee:	4613      	mov	r3, r2
 801adf0:	cb07      	ldmia	r3!, {r0, r1, r2}
 801adf2:	6020      	str	r0, [r4, #0]
 801adf4:	6061      	str	r1, [r4, #4]
 801adf6:	60a2      	str	r2, [r4, #8]
 801adf8:	881b      	ldrh	r3, [r3, #0]
 801adfa:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,6,8,10,13,15,18");
 801adfc:	687b      	ldr	r3, [r7, #4]
 801adfe:	3304      	adds	r3, #4
 801ae00:	4a23      	ldr	r2, [pc, #140]	; (801ae90 <problem_fetch+0x197cc>)
 801ae02:	461d      	mov	r5, r3
 801ae04:	4614      	mov	r4, r2
 801ae06:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801ae08:	6028      	str	r0, [r5, #0]
 801ae0a:	6069      	str	r1, [r5, #4]
 801ae0c:	60aa      	str	r2, [r5, #8]
 801ae0e:	60eb      	str	r3, [r5, #12]
 801ae10:	8823      	ldrh	r3, [r4, #0]
 801ae12:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,s,d,d,d,d,e");
 801ae14:	687b      	ldr	r3, [r7, #4]
 801ae16:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 801ae1a:	4a1e      	ldr	r2, [pc, #120]	; (801ae94 <problem_fetch+0x197d0>)
 801ae1c:	461c      	mov	r4, r3
 801ae1e:	4613      	mov	r3, r2
 801ae20:	cb07      	ldmia	r3!, {r0, r1, r2}
 801ae22:	6020      	str	r0, [r4, #0]
 801ae24:	6061      	str	r1, [r4, #4]
 801ae26:	60a2      	str	r2, [r4, #8]
 801ae28:	881b      	ldrh	r3, [r3, #0]
 801ae2a:	81a3      	strh	r3, [r4, #12]
			break;
 801ae2c:	f001 bb7a 	b.w	801c524 <problem_fetch+0x1ae60>
 801ae30:	0802c5cc 	.word	0x0802c5cc
 801ae34:	08023854 	.word	0x08023854
 801ae38:	0802c5d8 	.word	0x0802c5d8
 801ae3c:	0802c5e4 	.word	0x0802c5e4
 801ae40:	08023f34 	.word	0x08023f34
 801ae44:	0802c5f4 	.word	0x0802c5f4
 801ae48:	0802c608 	.word	0x0802c608
 801ae4c:	0802c618 	.word	0x0802c618
 801ae50:	080239dc 	.word	0x080239dc
 801ae54:	0802c62c 	.word	0x0802c62c
 801ae58:	08023814 	.word	0x08023814
 801ae5c:	0802c63c 	.word	0x0802c63c
 801ae60:	0802c64c 	.word	0x0802c64c
 801ae64:	08023a64 	.word	0x08023a64
 801ae68:	0802c664 	.word	0x0802c664
 801ae6c:	08023f4c 	.word	0x08023f4c
 801ae70:	0802c66c 	.word	0x0802c66c
 801ae74:	0802c67c 	.word	0x0802c67c
 801ae78:	0802c694 	.word	0x0802c694
 801ae7c:	08023920 	.word	0x08023920
 801ae80:	0802c6a4 	.word	0x0802c6a4
 801ae84:	0802c6b4 	.word	0x0802c6b4
 801ae88:	0802c6c8 	.word	0x0802c6c8
 801ae8c:	0802c6d4 	.word	0x0802c6d4
 801ae90:	0802c6e4 	.word	0x0802c6e4
 801ae94:	080238cc 	.word	0x080238cc
		case 763 :
			strcpy(p->name,"ACG19");
 801ae98:	687b      	ldr	r3, [r7, #4]
 801ae9a:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801ae9e:	4abb      	ldr	r2, [pc, #748]	; (801b18c <problem_fetch+0x19ac8>)
 801aea0:	6810      	ldr	r0, [r2, #0]
 801aea2:	6018      	str	r0, [r3, #0]
 801aea4:	8892      	ldrh	r2, [r2, #4]
 801aea6:	809a      	strh	r2, [r3, #4]
			strcpy(p->grade,"6B+");
 801aea8:	687b      	ldr	r3, [r7, #4]
 801aeaa:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801aeae:	4ab8      	ldr	r2, [pc, #736]	; (801b190 <problem_fetch+0x19acc>)
 801aeb0:	6810      	ldr	r0, [r2, #0]
 801aeb2:	6018      	str	r0, [r3, #0]
			p->moveSize = 8;
 801aeb4:	687b      	ldr	r3, [r7, #4]
 801aeb6:	2208      	movs	r2, #8
 801aeb8:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"E,J,G,B,E,E,I,I");
 801aeba:	687b      	ldr	r3, [r7, #4]
 801aebc:	33a4      	adds	r3, #164	; 0xa4
 801aebe:	4ab5      	ldr	r2, [pc, #724]	; (801b194 <problem_fetch+0x19ad0>)
 801aec0:	461c      	mov	r4, r3
 801aec2:	4615      	mov	r5, r2
 801aec4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801aec6:	6020      	str	r0, [r4, #0]
 801aec8:	6061      	str	r1, [r4, #4]
 801aeca:	60a2      	str	r2, [r4, #8]
 801aecc:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"6,5,9,10,12,14,14,18");
 801aece:	687b      	ldr	r3, [r7, #4]
 801aed0:	3304      	adds	r3, #4
 801aed2:	4ab1      	ldr	r2, [pc, #708]	; (801b198 <problem_fetch+0x19ad4>)
 801aed4:	461d      	mov	r5, r3
 801aed6:	4614      	mov	r4, r2
 801aed8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801aeda:	6028      	str	r0, [r5, #0]
 801aedc:	6069      	str	r1, [r5, #4]
 801aede:	60aa      	str	r2, [r5, #8]
 801aee0:	60eb      	str	r3, [r5, #12]
 801aee2:	6820      	ldr	r0, [r4, #0]
 801aee4:	6128      	str	r0, [r5, #16]
 801aee6:	7923      	ldrb	r3, [r4, #4]
 801aee8:	752b      	strb	r3, [r5, #20]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,e");
 801aeea:	687b      	ldr	r3, [r7, #4]
 801aeec:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 801aef0:	4aaa      	ldr	r2, [pc, #680]	; (801b19c <problem_fetch+0x19ad8>)
 801aef2:	461c      	mov	r4, r3
 801aef4:	4615      	mov	r5, r2
 801aef6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801aef8:	6020      	str	r0, [r4, #0]
 801aefa:	6061      	str	r1, [r4, #4]
 801aefc:	60a2      	str	r2, [r4, #8]
 801aefe:	60e3      	str	r3, [r4, #12]
			break;
 801af00:	f001 bb10 	b.w	801c524 <problem_fetch+0x1ae60>
		case 764 :
			strcpy(p->name,"BLACK CAT'S");
 801af04:	687b      	ldr	r3, [r7, #4]
 801af06:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801af0a:	4aa5      	ldr	r2, [pc, #660]	; (801b1a0 <problem_fetch+0x19adc>)
 801af0c:	461c      	mov	r4, r3
 801af0e:	4613      	mov	r3, r2
 801af10:	cb07      	ldmia	r3!, {r0, r1, r2}
 801af12:	6020      	str	r0, [r4, #0]
 801af14:	6061      	str	r1, [r4, #4]
 801af16:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade,"7C+");
 801af18:	687b      	ldr	r3, [r7, #4]
 801af1a:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801af1e:	4aa1      	ldr	r2, [pc, #644]	; (801b1a4 <problem_fetch+0x19ae0>)
 801af20:	6810      	ldr	r0, [r2, #0]
 801af22:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 801af24:	687b      	ldr	r3, [r7, #4]
 801af26:	2206      	movs	r2, #6
 801af28:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"C,E,D,J,I,I");
 801af2a:	687b      	ldr	r3, [r7, #4]
 801af2c:	33a4      	adds	r3, #164	; 0xa4
 801af2e:	4a9e      	ldr	r2, [pc, #632]	; (801b1a8 <problem_fetch+0x19ae4>)
 801af30:	461c      	mov	r4, r3
 801af32:	4613      	mov	r3, r2
 801af34:	cb07      	ldmia	r3!, {r0, r1, r2}
 801af36:	6020      	str	r0, [r4, #0]
 801af38:	6061      	str	r1, [r4, #4]
 801af3a:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,9,11,12,15,18");
 801af3c:	687b      	ldr	r3, [r7, #4]
 801af3e:	3304      	adds	r3, #4
 801af40:	4a9a      	ldr	r2, [pc, #616]	; (801b1ac <problem_fetch+0x19ae8>)
 801af42:	461c      	mov	r4, r3
 801af44:	4615      	mov	r5, r2
 801af46:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801af48:	6020      	str	r0, [r4, #0]
 801af4a:	6061      	str	r1, [r4, #4]
 801af4c:	60a2      	str	r2, [r4, #8]
 801af4e:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 801af50:	687b      	ldr	r3, [r7, #4]
 801af52:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 801af56:	4a96      	ldr	r2, [pc, #600]	; (801b1b0 <problem_fetch+0x19aec>)
 801af58:	461c      	mov	r4, r3
 801af5a:	4613      	mov	r3, r2
 801af5c:	cb07      	ldmia	r3!, {r0, r1, r2}
 801af5e:	6020      	str	r0, [r4, #0]
 801af60:	6061      	str	r1, [r4, #4]
 801af62:	60a2      	str	r2, [r4, #8]
			break;
 801af64:	f001 bade 	b.w	801c524 <problem_fetch+0x1ae60>
		case 765 :
			strcpy(p->name,"SUBMARINE");
 801af68:	687b      	ldr	r3, [r7, #4]
 801af6a:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801af6e:	4991      	ldr	r1, [pc, #580]	; (801b1b4 <problem_fetch+0x19af0>)
 801af70:	461a      	mov	r2, r3
 801af72:	460b      	mov	r3, r1
 801af74:	cb03      	ldmia	r3!, {r0, r1}
 801af76:	6010      	str	r0, [r2, #0]
 801af78:	6051      	str	r1, [r2, #4]
 801af7a:	881b      	ldrh	r3, [r3, #0]
 801af7c:	8113      	strh	r3, [r2, #8]
			strcpy(p->grade,"7B+");
 801af7e:	687b      	ldr	r3, [r7, #4]
 801af80:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801af84:	4a8c      	ldr	r2, [pc, #560]	; (801b1b8 <problem_fetch+0x19af4>)
 801af86:	6810      	ldr	r0, [r2, #0]
 801af88:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 801af8a:	687b      	ldr	r3, [r7, #4]
 801af8c:	2206      	movs	r2, #6
 801af8e:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,C,E,E,I,I");
 801af90:	687b      	ldr	r3, [r7, #4]
 801af92:	33a4      	adds	r3, #164	; 0xa4
 801af94:	4a89      	ldr	r2, [pc, #548]	; (801b1bc <problem_fetch+0x19af8>)
 801af96:	461c      	mov	r4, r3
 801af98:	4613      	mov	r3, r2
 801af9a:	cb07      	ldmia	r3!, {r0, r1, r2}
 801af9c:	6020      	str	r0, [r4, #0]
 801af9e:	6061      	str	r1, [r4, #4]
 801afa0:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,8,12,14,15,18");
 801afa2:	687b      	ldr	r3, [r7, #4]
 801afa4:	3304      	adds	r3, #4
 801afa6:	4a86      	ldr	r2, [pc, #536]	; (801b1c0 <problem_fetch+0x19afc>)
 801afa8:	461c      	mov	r4, r3
 801afaa:	4615      	mov	r5, r2
 801afac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801afae:	6020      	str	r0, [r4, #0]
 801afb0:	6061      	str	r1, [r4, #4]
 801afb2:	60a2      	str	r2, [r4, #8]
 801afb4:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 801afb6:	687b      	ldr	r3, [r7, #4]
 801afb8:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 801afbc:	4a7c      	ldr	r2, [pc, #496]	; (801b1b0 <problem_fetch+0x19aec>)
 801afbe:	461c      	mov	r4, r3
 801afc0:	4613      	mov	r3, r2
 801afc2:	cb07      	ldmia	r3!, {r0, r1, r2}
 801afc4:	6020      	str	r0, [r4, #0]
 801afc6:	6061      	str	r1, [r4, #4]
 801afc8:	60a2      	str	r2, [r4, #8]
			break;
 801afca:	f001 baab 	b.w	801c524 <problem_fetch+0x1ae60>
		case 766 :
			strcpy(p->name,"LINK TO THE PAST");
 801afce:	687b      	ldr	r3, [r7, #4]
 801afd0:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801afd4:	4a7b      	ldr	r2, [pc, #492]	; (801b1c4 <problem_fetch+0x19b00>)
 801afd6:	461d      	mov	r5, r3
 801afd8:	4614      	mov	r4, r2
 801afda:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801afdc:	6028      	str	r0, [r5, #0]
 801afde:	6069      	str	r1, [r5, #4]
 801afe0:	60aa      	str	r2, [r5, #8]
 801afe2:	60eb      	str	r3, [r5, #12]
 801afe4:	7823      	ldrb	r3, [r4, #0]
 801afe6:	742b      	strb	r3, [r5, #16]
			strcpy(p->grade,"7A");
 801afe8:	687b      	ldr	r3, [r7, #4]
 801afea:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801afee:	4a76      	ldr	r2, [pc, #472]	; (801b1c8 <problem_fetch+0x19b04>)
 801aff0:	8811      	ldrh	r1, [r2, #0]
 801aff2:	7892      	ldrb	r2, [r2, #2]
 801aff4:	8019      	strh	r1, [r3, #0]
 801aff6:	709a      	strb	r2, [r3, #2]
			p->moveSize = 7;
 801aff8:	687b      	ldr	r3, [r7, #4]
 801affa:	2207      	movs	r2, #7
 801affc:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"C,B,A,E,E,H,D");
 801affe:	687b      	ldr	r3, [r7, #4]
 801b000:	33a4      	adds	r3, #164	; 0xa4
 801b002:	4a72      	ldr	r2, [pc, #456]	; (801b1cc <problem_fetch+0x19b08>)
 801b004:	461c      	mov	r4, r3
 801b006:	4613      	mov	r3, r2
 801b008:	cb07      	ldmia	r3!, {r0, r1, r2}
 801b00a:	6020      	str	r0, [r4, #0]
 801b00c:	6061      	str	r1, [r4, #4]
 801b00e:	60a2      	str	r2, [r4, #8]
 801b010:	881b      	ldrh	r3, [r3, #0]
 801b012:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,6,9,12,14,16,18");
 801b014:	687b      	ldr	r3, [r7, #4]
 801b016:	3304      	adds	r3, #4
 801b018:	4a6d      	ldr	r2, [pc, #436]	; (801b1d0 <problem_fetch+0x19b0c>)
 801b01a:	461d      	mov	r5, r3
 801b01c:	4614      	mov	r4, r2
 801b01e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801b020:	6028      	str	r0, [r5, #0]
 801b022:	6069      	str	r1, [r5, #4]
 801b024:	60aa      	str	r2, [r5, #8]
 801b026:	60eb      	str	r3, [r5, #12]
 801b028:	8823      	ldrh	r3, [r4, #0]
 801b02a:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,s,d,d,d,d,e");
 801b02c:	687b      	ldr	r3, [r7, #4]
 801b02e:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 801b032:	4a68      	ldr	r2, [pc, #416]	; (801b1d4 <problem_fetch+0x19b10>)
 801b034:	461c      	mov	r4, r3
 801b036:	4613      	mov	r3, r2
 801b038:	cb07      	ldmia	r3!, {r0, r1, r2}
 801b03a:	6020      	str	r0, [r4, #0]
 801b03c:	6061      	str	r1, [r4, #4]
 801b03e:	60a2      	str	r2, [r4, #8]
 801b040:	881b      	ldrh	r3, [r3, #0]
 801b042:	81a3      	strh	r3, [r4, #12]
			break;
 801b044:	f001 ba6e 	b.w	801c524 <problem_fetch+0x1ae60>
		case 767 :
			strcpy(p->name,"SALAD NIGHTS");
 801b048:	687b      	ldr	r3, [r7, #4]
 801b04a:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801b04e:	4a62      	ldr	r2, [pc, #392]	; (801b1d8 <problem_fetch+0x19b14>)
 801b050:	461c      	mov	r4, r3
 801b052:	4613      	mov	r3, r2
 801b054:	cb07      	ldmia	r3!, {r0, r1, r2}
 801b056:	6020      	str	r0, [r4, #0]
 801b058:	6061      	str	r1, [r4, #4]
 801b05a:	60a2      	str	r2, [r4, #8]
 801b05c:	781b      	ldrb	r3, [r3, #0]
 801b05e:	7323      	strb	r3, [r4, #12]
			strcpy(p->grade,"7A+");
 801b060:	687b      	ldr	r3, [r7, #4]
 801b062:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801b066:	4a5d      	ldr	r2, [pc, #372]	; (801b1dc <problem_fetch+0x19b18>)
 801b068:	6810      	ldr	r0, [r2, #0]
 801b06a:	6018      	str	r0, [r3, #0]
			p->moveSize = 8;
 801b06c:	687b      	ldr	r3, [r7, #4]
 801b06e:	2208      	movs	r2, #8
 801b070:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"C,B,E,K,H,I,E,D");
 801b072:	687b      	ldr	r3, [r7, #4]
 801b074:	33a4      	adds	r3, #164	; 0xa4
 801b076:	4a5a      	ldr	r2, [pc, #360]	; (801b1e0 <problem_fetch+0x19b1c>)
 801b078:	461c      	mov	r4, r3
 801b07a:	4615      	mov	r5, r2
 801b07c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801b07e:	6020      	str	r0, [r4, #0]
 801b080:	6061      	str	r1, [r4, #4]
 801b082:	60a2      	str	r2, [r4, #8]
 801b084:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,6,8,9,12,14,14,18");
 801b086:	687b      	ldr	r3, [r7, #4]
 801b088:	3304      	adds	r3, #4
 801b08a:	4a56      	ldr	r2, [pc, #344]	; (801b1e4 <problem_fetch+0x19b20>)
 801b08c:	461d      	mov	r5, r3
 801b08e:	4614      	mov	r4, r2
 801b090:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801b092:	6028      	str	r0, [r5, #0]
 801b094:	6069      	str	r1, [r5, #4]
 801b096:	60aa      	str	r2, [r5, #8]
 801b098:	60eb      	str	r3, [r5, #12]
 801b09a:	6820      	ldr	r0, [r4, #0]
 801b09c:	6128      	str	r0, [r5, #16]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,e");
 801b09e:	687b      	ldr	r3, [r7, #4]
 801b0a0:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 801b0a4:	4a3d      	ldr	r2, [pc, #244]	; (801b19c <problem_fetch+0x19ad8>)
 801b0a6:	461c      	mov	r4, r3
 801b0a8:	4615      	mov	r5, r2
 801b0aa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801b0ac:	6020      	str	r0, [r4, #0]
 801b0ae:	6061      	str	r1, [r4, #4]
 801b0b0:	60a2      	str	r2, [r4, #8]
 801b0b2:	60e3      	str	r3, [r4, #12]
			break;
 801b0b4:	f001 ba36 	b.w	801c524 <problem_fetch+0x1ae60>
		case 768 :
			strcpy(p->name,"ONE");
 801b0b8:	687b      	ldr	r3, [r7, #4]
 801b0ba:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801b0be:	4a4a      	ldr	r2, [pc, #296]	; (801b1e8 <problem_fetch+0x19b24>)
 801b0c0:	6810      	ldr	r0, [r2, #0]
 801b0c2:	6018      	str	r0, [r3, #0]
			strcpy(p->grade,"6B+");
 801b0c4:	687b      	ldr	r3, [r7, #4]
 801b0c6:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801b0ca:	4a31      	ldr	r2, [pc, #196]	; (801b190 <problem_fetch+0x19acc>)
 801b0cc:	6810      	ldr	r0, [r2, #0]
 801b0ce:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 801b0d0:	687b      	ldr	r3, [r7, #4]
 801b0d2:	2206      	movs	r2, #6
 801b0d4:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,E,E,C,E,I");
 801b0d6:	687b      	ldr	r3, [r7, #4]
 801b0d8:	33a4      	adds	r3, #164	; 0xa4
 801b0da:	4a44      	ldr	r2, [pc, #272]	; (801b1ec <problem_fetch+0x19b28>)
 801b0dc:	461c      	mov	r4, r3
 801b0de:	4613      	mov	r3, r2
 801b0e0:	cb07      	ldmia	r3!, {r0, r1, r2}
 801b0e2:	6020      	str	r0, [r4, #0]
 801b0e4:	6061      	str	r1, [r4, #4]
 801b0e6:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,8,9,13,16,18");
 801b0e8:	687b      	ldr	r3, [r7, #4]
 801b0ea:	3304      	adds	r3, #4
 801b0ec:	4a40      	ldr	r2, [pc, #256]	; (801b1f0 <problem_fetch+0x19b2c>)
 801b0ee:	461c      	mov	r4, r3
 801b0f0:	4613      	mov	r3, r2
 801b0f2:	cb07      	ldmia	r3!, {r0, r1, r2}
 801b0f4:	6020      	str	r0, [r4, #0]
 801b0f6:	6061      	str	r1, [r4, #4]
 801b0f8:	60a2      	str	r2, [r4, #8]
 801b0fa:	881a      	ldrh	r2, [r3, #0]
 801b0fc:	789b      	ldrb	r3, [r3, #2]
 801b0fe:	81a2      	strh	r2, [r4, #12]
 801b100:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 801b102:	687b      	ldr	r3, [r7, #4]
 801b104:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 801b108:	4a29      	ldr	r2, [pc, #164]	; (801b1b0 <problem_fetch+0x19aec>)
 801b10a:	461c      	mov	r4, r3
 801b10c:	4613      	mov	r3, r2
 801b10e:	cb07      	ldmia	r3!, {r0, r1, r2}
 801b110:	6020      	str	r0, [r4, #0]
 801b112:	6061      	str	r1, [r4, #4]
 801b114:	60a2      	str	r2, [r4, #8]
			break;
 801b116:	f001 ba05 	b.w	801c524 <problem_fetch+0x1ae60>
		case 769 :
			strcpy(p->name,"DRAGONS DEN");
 801b11a:	687b      	ldr	r3, [r7, #4]
 801b11c:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801b120:	4a34      	ldr	r2, [pc, #208]	; (801b1f4 <problem_fetch+0x19b30>)
 801b122:	461c      	mov	r4, r3
 801b124:	4613      	mov	r3, r2
 801b126:	cb07      	ldmia	r3!, {r0, r1, r2}
 801b128:	6020      	str	r0, [r4, #0]
 801b12a:	6061      	str	r1, [r4, #4]
 801b12c:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade,"6B+");
 801b12e:	687b      	ldr	r3, [r7, #4]
 801b130:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801b134:	4a16      	ldr	r2, [pc, #88]	; (801b190 <problem_fetch+0x19acc>)
 801b136:	6810      	ldr	r0, [r2, #0]
 801b138:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 801b13a:	687b      	ldr	r3, [r7, #4]
 801b13c:	2207      	movs	r2, #7
 801b13e:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,G,K,H,J,G,I");
 801b140:	687b      	ldr	r3, [r7, #4]
 801b142:	33a4      	adds	r3, #164	; 0xa4
 801b144:	4a2c      	ldr	r2, [pc, #176]	; (801b1f8 <problem_fetch+0x19b34>)
 801b146:	461c      	mov	r4, r3
 801b148:	4613      	mov	r3, r2
 801b14a:	cb07      	ldmia	r3!, {r0, r1, r2}
 801b14c:	6020      	str	r0, [r4, #0]
 801b14e:	6061      	str	r1, [r4, #4]
 801b150:	60a2      	str	r2, [r4, #8]
 801b152:	881b      	ldrh	r3, [r3, #0]
 801b154:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,6,9,10,13,15,18");
 801b156:	687b      	ldr	r3, [r7, #4]
 801b158:	3304      	adds	r3, #4
 801b15a:	4a28      	ldr	r2, [pc, #160]	; (801b1fc <problem_fetch+0x19b38>)
 801b15c:	461d      	mov	r5, r3
 801b15e:	4614      	mov	r4, r2
 801b160:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801b162:	6028      	str	r0, [r5, #0]
 801b164:	6069      	str	r1, [r5, #4]
 801b166:	60aa      	str	r2, [r5, #8]
 801b168:	60eb      	str	r3, [r5, #12]
 801b16a:	8823      	ldrh	r3, [r4, #0]
 801b16c:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,s,d,d,d,d,e");
 801b16e:	687b      	ldr	r3, [r7, #4]
 801b170:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 801b174:	4a17      	ldr	r2, [pc, #92]	; (801b1d4 <problem_fetch+0x19b10>)
 801b176:	461c      	mov	r4, r3
 801b178:	4613      	mov	r3, r2
 801b17a:	cb07      	ldmia	r3!, {r0, r1, r2}
 801b17c:	6020      	str	r0, [r4, #0]
 801b17e:	6061      	str	r1, [r4, #4]
 801b180:	60a2      	str	r2, [r4, #8]
 801b182:	881b      	ldrh	r3, [r3, #0]
 801b184:	81a3      	strh	r3, [r4, #12]
			break;
 801b186:	f001 b9cd 	b.w	801c524 <problem_fetch+0x1ae60>
 801b18a:	bf00      	nop
 801b18c:	0802c6f8 	.word	0x0802c6f8
 801b190:	08023854 	.word	0x08023854
 801b194:	0802c700 	.word	0x0802c700
 801b198:	0802c710 	.word	0x0802c710
 801b19c:	08023978 	.word	0x08023978
 801b1a0:	0802c728 	.word	0x0802c728
 801b1a4:	08023e60 	.word	0x08023e60
 801b1a8:	0802c734 	.word	0x0802c734
 801b1ac:	08028e54 	.word	0x08028e54
 801b1b0:	08023bf0 	.word	0x08023bf0
 801b1b4:	0802c740 	.word	0x0802c740
 801b1b8:	08023990 	.word	0x08023990
 801b1bc:	0802b2f0 	.word	0x0802b2f0
 801b1c0:	0802c74c 	.word	0x0802c74c
 801b1c4:	0802c75c 	.word	0x0802c75c
 801b1c8:	08023814 	.word	0x08023814
 801b1cc:	0802c770 	.word	0x0802c770
 801b1d0:	08024a94 	.word	0x08024a94
 801b1d4:	080238cc 	.word	0x080238cc
 801b1d8:	0802c780 	.word	0x0802c780
 801b1dc:	080239f4 	.word	0x080239f4
 801b1e0:	0802c790 	.word	0x0802c790
 801b1e4:	0802c7a0 	.word	0x0802c7a0
 801b1e8:	0802c7b4 	.word	0x0802c7b4
 801b1ec:	0802c7b8 	.word	0x0802c7b8
 801b1f0:	080282f4 	.word	0x080282f4
 801b1f4:	0802c7c4 	.word	0x0802c7c4
 801b1f8:	0802c7d0 	.word	0x0802c7d0
 801b1fc:	0802c7e0 	.word	0x0802c7e0
		case 770 :
			strcpy(p->name,"GOOD TIMES");
 801b200:	687b      	ldr	r3, [r7, #4]
 801b202:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801b206:	49c2      	ldr	r1, [pc, #776]	; (801b510 <problem_fetch+0x19e4c>)
 801b208:	461a      	mov	r2, r3
 801b20a:	460b      	mov	r3, r1
 801b20c:	cb03      	ldmia	r3!, {r0, r1}
 801b20e:	6010      	str	r0, [r2, #0]
 801b210:	6051      	str	r1, [r2, #4]
 801b212:	8819      	ldrh	r1, [r3, #0]
 801b214:	789b      	ldrb	r3, [r3, #2]
 801b216:	8111      	strh	r1, [r2, #8]
 801b218:	7293      	strb	r3, [r2, #10]
			strcpy(p->grade,"6B+");
 801b21a:	687b      	ldr	r3, [r7, #4]
 801b21c:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801b220:	4abc      	ldr	r2, [pc, #752]	; (801b514 <problem_fetch+0x19e50>)
 801b222:	6810      	ldr	r0, [r2, #0]
 801b224:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 801b226:	687b      	ldr	r3, [r7, #4]
 801b228:	2207      	movs	r2, #7
 801b22a:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,C,E,F,C,D,A");
 801b22c:	687b      	ldr	r3, [r7, #4]
 801b22e:	33a4      	adds	r3, #164	; 0xa4
 801b230:	4ab9      	ldr	r2, [pc, #740]	; (801b518 <problem_fetch+0x19e54>)
 801b232:	461c      	mov	r4, r3
 801b234:	4613      	mov	r3, r2
 801b236:	cb07      	ldmia	r3!, {r0, r1, r2}
 801b238:	6020      	str	r0, [r4, #0]
 801b23a:	6061      	str	r1, [r4, #4]
 801b23c:	60a2      	str	r2, [r4, #8]
 801b23e:	881b      	ldrh	r3, [r3, #0]
 801b240:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,5,8,11,13,15,18");
 801b242:	687b      	ldr	r3, [r7, #4]
 801b244:	3304      	adds	r3, #4
 801b246:	4ab5      	ldr	r2, [pc, #724]	; (801b51c <problem_fetch+0x19e58>)
 801b248:	461d      	mov	r5, r3
 801b24a:	4614      	mov	r4, r2
 801b24c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801b24e:	6028      	str	r0, [r5, #0]
 801b250:	6069      	str	r1, [r5, #4]
 801b252:	60aa      	str	r2, [r5, #8]
 801b254:	60eb      	str	r3, [r5, #12]
 801b256:	8823      	ldrh	r3, [r4, #0]
 801b258:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,s,d,d,d,d,e");
 801b25a:	687b      	ldr	r3, [r7, #4]
 801b25c:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 801b260:	4aaf      	ldr	r2, [pc, #700]	; (801b520 <problem_fetch+0x19e5c>)
 801b262:	461c      	mov	r4, r3
 801b264:	4613      	mov	r3, r2
 801b266:	cb07      	ldmia	r3!, {r0, r1, r2}
 801b268:	6020      	str	r0, [r4, #0]
 801b26a:	6061      	str	r1, [r4, #4]
 801b26c:	60a2      	str	r2, [r4, #8]
 801b26e:	881b      	ldrh	r3, [r3, #0]
 801b270:	81a3      	strh	r3, [r4, #12]
			break;
 801b272:	f001 b957 	b.w	801c524 <problem_fetch+0x1ae60>
		case 771 :
			strcpy(p->name,"NOT TOO BAD");
 801b276:	687b      	ldr	r3, [r7, #4]
 801b278:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801b27c:	4aa9      	ldr	r2, [pc, #676]	; (801b524 <problem_fetch+0x19e60>)
 801b27e:	461c      	mov	r4, r3
 801b280:	4613      	mov	r3, r2
 801b282:	cb07      	ldmia	r3!, {r0, r1, r2}
 801b284:	6020      	str	r0, [r4, #0]
 801b286:	6061      	str	r1, [r4, #4]
 801b288:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade,"6B+");
 801b28a:	687b      	ldr	r3, [r7, #4]
 801b28c:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801b290:	4aa0      	ldr	r2, [pc, #640]	; (801b514 <problem_fetch+0x19e50>)
 801b292:	6810      	ldr	r0, [r2, #0]
 801b294:	6018      	str	r0, [r3, #0]
			p->moveSize = 8;
 801b296:	687b      	ldr	r3, [r7, #4]
 801b298:	2208      	movs	r2, #8
 801b29a:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,C,E,F,D,I,E,D");
 801b29c:	687b      	ldr	r3, [r7, #4]
 801b29e:	33a4      	adds	r3, #164	; 0xa4
 801b2a0:	4aa1      	ldr	r2, [pc, #644]	; (801b528 <problem_fetch+0x19e64>)
 801b2a2:	461c      	mov	r4, r3
 801b2a4:	4615      	mov	r5, r2
 801b2a6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801b2a8:	6020      	str	r0, [r4, #0]
 801b2aa:	6061      	str	r1, [r4, #4]
 801b2ac:	60a2      	str	r2, [r4, #8]
 801b2ae:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,5,8,11,11,14,16,18");
 801b2b0:	687b      	ldr	r3, [r7, #4]
 801b2b2:	3304      	adds	r3, #4
 801b2b4:	4a9d      	ldr	r2, [pc, #628]	; (801b52c <problem_fetch+0x19e68>)
 801b2b6:	461d      	mov	r5, r3
 801b2b8:	4614      	mov	r4, r2
 801b2ba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801b2bc:	6028      	str	r0, [r5, #0]
 801b2be:	6069      	str	r1, [r5, #4]
 801b2c0:	60aa      	str	r2, [r5, #8]
 801b2c2:	60eb      	str	r3, [r5, #12]
 801b2c4:	6820      	ldr	r0, [r4, #0]
 801b2c6:	6128      	str	r0, [r5, #16]
 801b2c8:	7923      	ldrb	r3, [r4, #4]
 801b2ca:	752b      	strb	r3, [r5, #20]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,e");
 801b2cc:	687b      	ldr	r3, [r7, #4]
 801b2ce:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 801b2d2:	4a97      	ldr	r2, [pc, #604]	; (801b530 <problem_fetch+0x19e6c>)
 801b2d4:	461c      	mov	r4, r3
 801b2d6:	4615      	mov	r5, r2
 801b2d8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801b2da:	6020      	str	r0, [r4, #0]
 801b2dc:	6061      	str	r1, [r4, #4]
 801b2de:	60a2      	str	r2, [r4, #8]
 801b2e0:	60e3      	str	r3, [r4, #12]
			break;
 801b2e2:	f001 b91f 	b.w	801c524 <problem_fetch+0x1ae60>
		case 772 :
			strcpy(p->name,"VERITGO");
 801b2e6:	687b      	ldr	r3, [r7, #4]
 801b2e8:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801b2ec:	4991      	ldr	r1, [pc, #580]	; (801b534 <problem_fetch+0x19e70>)
 801b2ee:	461a      	mov	r2, r3
 801b2f0:	460b      	mov	r3, r1
 801b2f2:	cb03      	ldmia	r3!, {r0, r1}
 801b2f4:	6010      	str	r0, [r2, #0]
 801b2f6:	6051      	str	r1, [r2, #4]
			strcpy(p->grade,"6B+");
 801b2f8:	687b      	ldr	r3, [r7, #4]
 801b2fa:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801b2fe:	4a85      	ldr	r2, [pc, #532]	; (801b514 <problem_fetch+0x19e50>)
 801b300:	6810      	ldr	r0, [r2, #0]
 801b302:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 801b304:	687b      	ldr	r3, [r7, #4]
 801b306:	2206      	movs	r2, #6
 801b308:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,J,H,F,H,D");
 801b30a:	687b      	ldr	r3, [r7, #4]
 801b30c:	33a4      	adds	r3, #164	; 0xa4
 801b30e:	4a8a      	ldr	r2, [pc, #552]	; (801b538 <problem_fetch+0x19e74>)
 801b310:	461c      	mov	r4, r3
 801b312:	4613      	mov	r3, r2
 801b314:	cb07      	ldmia	r3!, {r0, r1, r2}
 801b316:	6020      	str	r0, [r4, #0]
 801b318:	6061      	str	r1, [r4, #4]
 801b31a:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"6,5,10,13,16,18");
 801b31c:	687b      	ldr	r3, [r7, #4]
 801b31e:	3304      	adds	r3, #4
 801b320:	4a86      	ldr	r2, [pc, #536]	; (801b53c <problem_fetch+0x19e78>)
 801b322:	461c      	mov	r4, r3
 801b324:	4615      	mov	r5, r2
 801b326:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801b328:	6020      	str	r0, [r4, #0]
 801b32a:	6061      	str	r1, [r4, #4]
 801b32c:	60a2      	str	r2, [r4, #8]
 801b32e:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,s,d,d,d,e");
 801b330:	687b      	ldr	r3, [r7, #4]
 801b332:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 801b336:	4a82      	ldr	r2, [pc, #520]	; (801b540 <problem_fetch+0x19e7c>)
 801b338:	461c      	mov	r4, r3
 801b33a:	4613      	mov	r3, r2
 801b33c:	cb07      	ldmia	r3!, {r0, r1, r2}
 801b33e:	6020      	str	r0, [r4, #0]
 801b340:	6061      	str	r1, [r4, #4]
 801b342:	60a2      	str	r2, [r4, #8]
			break;
 801b344:	f001 b8ee 	b.w	801c524 <problem_fetch+0x1ae60>
		case 773 :
			strcpy(p->name,"MASTERFUL GAP");
 801b348:	687b      	ldr	r3, [r7, #4]
 801b34a:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801b34e:	4a7d      	ldr	r2, [pc, #500]	; (801b544 <problem_fetch+0x19e80>)
 801b350:	461c      	mov	r4, r3
 801b352:	4613      	mov	r3, r2
 801b354:	cb07      	ldmia	r3!, {r0, r1, r2}
 801b356:	6020      	str	r0, [r4, #0]
 801b358:	6061      	str	r1, [r4, #4]
 801b35a:	60a2      	str	r2, [r4, #8]
 801b35c:	881b      	ldrh	r3, [r3, #0]
 801b35e:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade,"7A+");
 801b360:	687b      	ldr	r3, [r7, #4]
 801b362:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801b366:	4a78      	ldr	r2, [pc, #480]	; (801b548 <problem_fetch+0x19e84>)
 801b368:	6810      	ldr	r0, [r2, #0]
 801b36a:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 801b36c:	687b      	ldr	r3, [r7, #4]
 801b36e:	2207      	movs	r2, #7
 801b370:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"A,B,C,C,E,F,I");
 801b372:	687b      	ldr	r3, [r7, #4]
 801b374:	33a4      	adds	r3, #164	; 0xa4
 801b376:	4a75      	ldr	r2, [pc, #468]	; (801b54c <problem_fetch+0x19e88>)
 801b378:	461c      	mov	r4, r3
 801b37a:	4613      	mov	r3, r2
 801b37c:	cb07      	ldmia	r3!, {r0, r1, r2}
 801b37e:	6020      	str	r0, [r4, #0]
 801b380:	6061      	str	r1, [r4, #4]
 801b382:	60a2      	str	r2, [r4, #8]
 801b384:	881b      	ldrh	r3, [r3, #0]
 801b386:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"9,6,5,13,16,11,18");
 801b388:	687b      	ldr	r3, [r7, #4]
 801b38a:	3304      	adds	r3, #4
 801b38c:	4a70      	ldr	r2, [pc, #448]	; (801b550 <problem_fetch+0x19e8c>)
 801b38e:	461d      	mov	r5, r3
 801b390:	4614      	mov	r4, r2
 801b392:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801b394:	6028      	str	r0, [r5, #0]
 801b396:	6069      	str	r1, [r5, #4]
 801b398:	60aa      	str	r2, [r5, #8]
 801b39a:	60eb      	str	r3, [r5, #12]
 801b39c:	8823      	ldrh	r3, [r4, #0]
 801b39e:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"d,s,s,d,d,d,e");
 801b3a0:	687b      	ldr	r3, [r7, #4]
 801b3a2:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 801b3a6:	4a6b      	ldr	r2, [pc, #428]	; (801b554 <problem_fetch+0x19e90>)
 801b3a8:	461c      	mov	r4, r3
 801b3aa:	4613      	mov	r3, r2
 801b3ac:	cb07      	ldmia	r3!, {r0, r1, r2}
 801b3ae:	6020      	str	r0, [r4, #0]
 801b3b0:	6061      	str	r1, [r4, #4]
 801b3b2:	60a2      	str	r2, [r4, #8]
 801b3b4:	881b      	ldrh	r3, [r3, #0]
 801b3b6:	81a3      	strh	r3, [r4, #12]
			break;
 801b3b8:	f001 b8b4 	b.w	801c524 <problem_fetch+0x1ae60>
		case 774 :
			strcpy(p->name,"SUPERNOVA");
 801b3bc:	687b      	ldr	r3, [r7, #4]
 801b3be:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801b3c2:	4965      	ldr	r1, [pc, #404]	; (801b558 <problem_fetch+0x19e94>)
 801b3c4:	461a      	mov	r2, r3
 801b3c6:	460b      	mov	r3, r1
 801b3c8:	cb03      	ldmia	r3!, {r0, r1}
 801b3ca:	6010      	str	r0, [r2, #0]
 801b3cc:	6051      	str	r1, [r2, #4]
 801b3ce:	881b      	ldrh	r3, [r3, #0]
 801b3d0:	8113      	strh	r3, [r2, #8]
			strcpy(p->grade,"7A");
 801b3d2:	687b      	ldr	r3, [r7, #4]
 801b3d4:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801b3d8:	4a60      	ldr	r2, [pc, #384]	; (801b55c <problem_fetch+0x19e98>)
 801b3da:	8811      	ldrh	r1, [r2, #0]
 801b3dc:	7892      	ldrb	r2, [r2, #2]
 801b3de:	8019      	strh	r1, [r3, #0]
 801b3e0:	709a      	strb	r2, [r3, #2]
			p->moveSize = 7;
 801b3e2:	687b      	ldr	r3, [r7, #4]
 801b3e4:	2207      	movs	r2, #7
 801b3e6:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,H,C,F,F,H,D");
 801b3e8:	687b      	ldr	r3, [r7, #4]
 801b3ea:	33a4      	adds	r3, #164	; 0xa4
 801b3ec:	4a5c      	ldr	r2, [pc, #368]	; (801b560 <problem_fetch+0x19e9c>)
 801b3ee:	461c      	mov	r4, r3
 801b3f0:	4613      	mov	r3, r2
 801b3f2:	cb07      	ldmia	r3!, {r0, r1, r2}
 801b3f4:	6020      	str	r0, [r4, #0]
 801b3f6:	6061      	str	r1, [r4, #4]
 801b3f8:	60a2      	str	r2, [r4, #8]
 801b3fa:	881b      	ldrh	r3, [r3, #0]
 801b3fc:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,8,8,11,13,16,18");
 801b3fe:	687b      	ldr	r3, [r7, #4]
 801b400:	3304      	adds	r3, #4
 801b402:	4a58      	ldr	r2, [pc, #352]	; (801b564 <problem_fetch+0x19ea0>)
 801b404:	461d      	mov	r5, r3
 801b406:	4614      	mov	r4, r2
 801b408:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801b40a:	6028      	str	r0, [r5, #0]
 801b40c:	6069      	str	r1, [r5, #4]
 801b40e:	60aa      	str	r2, [r5, #8]
 801b410:	60eb      	str	r3, [r5, #12]
 801b412:	8823      	ldrh	r3, [r4, #0]
 801b414:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 801b416:	687b      	ldr	r3, [r7, #4]
 801b418:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 801b41c:	4a52      	ldr	r2, [pc, #328]	; (801b568 <problem_fetch+0x19ea4>)
 801b41e:	461c      	mov	r4, r3
 801b420:	4613      	mov	r3, r2
 801b422:	cb07      	ldmia	r3!, {r0, r1, r2}
 801b424:	6020      	str	r0, [r4, #0]
 801b426:	6061      	str	r1, [r4, #4]
 801b428:	60a2      	str	r2, [r4, #8]
 801b42a:	881b      	ldrh	r3, [r3, #0]
 801b42c:	81a3      	strh	r3, [r4, #12]
			break;
 801b42e:	f001 b879 	b.w	801c524 <problem_fetch+0x1ae60>
		case 775 :
			strcpy(p->name,"ACG10");
 801b432:	687b      	ldr	r3, [r7, #4]
 801b434:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801b438:	4a4c      	ldr	r2, [pc, #304]	; (801b56c <problem_fetch+0x19ea8>)
 801b43a:	6810      	ldr	r0, [r2, #0]
 801b43c:	6018      	str	r0, [r3, #0]
 801b43e:	8892      	ldrh	r2, [r2, #4]
 801b440:	809a      	strh	r2, [r3, #4]
			strcpy(p->grade,"6B+");
 801b442:	687b      	ldr	r3, [r7, #4]
 801b444:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801b448:	4a32      	ldr	r2, [pc, #200]	; (801b514 <problem_fetch+0x19e50>)
 801b44a:	6810      	ldr	r0, [r2, #0]
 801b44c:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 801b44e:	687b      	ldr	r3, [r7, #4]
 801b450:	2207      	movs	r2, #7
 801b452:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,E,G,G,E,B,I");
 801b454:	687b      	ldr	r3, [r7, #4]
 801b456:	33a4      	adds	r3, #164	; 0xa4
 801b458:	4a45      	ldr	r2, [pc, #276]	; (801b570 <problem_fetch+0x19eac>)
 801b45a:	461c      	mov	r4, r3
 801b45c:	4613      	mov	r3, r2
 801b45e:	cb07      	ldmia	r3!, {r0, r1, r2}
 801b460:	6020      	str	r0, [r4, #0]
 801b462:	6061      	str	r1, [r4, #4]
 801b464:	60a2      	str	r2, [r4, #8]
 801b466:	881b      	ldrh	r3, [r3, #0]
 801b468:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,8,15,14,12,10,18");
 801b46a:	687b      	ldr	r3, [r7, #4]
 801b46c:	3304      	adds	r3, #4
 801b46e:	4a41      	ldr	r2, [pc, #260]	; (801b574 <problem_fetch+0x19eb0>)
 801b470:	461d      	mov	r5, r3
 801b472:	4614      	mov	r4, r2
 801b474:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801b476:	6028      	str	r0, [r5, #0]
 801b478:	6069      	str	r1, [r5, #4]
 801b47a:	60aa      	str	r2, [r5, #8]
 801b47c:	60eb      	str	r3, [r5, #12]
 801b47e:	8823      	ldrh	r3, [r4, #0]
 801b480:	78a2      	ldrb	r2, [r4, #2]
 801b482:	822b      	strh	r3, [r5, #16]
 801b484:	4613      	mov	r3, r2
 801b486:	74ab      	strb	r3, [r5, #18]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 801b488:	687b      	ldr	r3, [r7, #4]
 801b48a:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 801b48e:	4a36      	ldr	r2, [pc, #216]	; (801b568 <problem_fetch+0x19ea4>)
 801b490:	461c      	mov	r4, r3
 801b492:	4613      	mov	r3, r2
 801b494:	cb07      	ldmia	r3!, {r0, r1, r2}
 801b496:	6020      	str	r0, [r4, #0]
 801b498:	6061      	str	r1, [r4, #4]
 801b49a:	60a2      	str	r2, [r4, #8]
 801b49c:	881b      	ldrh	r3, [r3, #0]
 801b49e:	81a3      	strh	r3, [r4, #12]
			break;
 801b4a0:	f001 b840 	b.w	801c524 <problem_fetch+0x1ae60>
		case 776 :
			strcpy(p->name,"ACG8");
 801b4a4:	687b      	ldr	r3, [r7, #4]
 801b4a6:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801b4aa:	4a33      	ldr	r2, [pc, #204]	; (801b578 <problem_fetch+0x19eb4>)
 801b4ac:	6810      	ldr	r0, [r2, #0]
 801b4ae:	6018      	str	r0, [r3, #0]
 801b4b0:	7912      	ldrb	r2, [r2, #4]
 801b4b2:	711a      	strb	r2, [r3, #4]
			strcpy(p->grade,"6B+");
 801b4b4:	687b      	ldr	r3, [r7, #4]
 801b4b6:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801b4ba:	4a16      	ldr	r2, [pc, #88]	; (801b514 <problem_fetch+0x19e50>)
 801b4bc:	6810      	ldr	r0, [r2, #0]
 801b4be:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 801b4c0:	687b      	ldr	r3, [r7, #4]
 801b4c2:	2207      	movs	r2, #7
 801b4c4:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,H,E,E,A,E,D");
 801b4c6:	687b      	ldr	r3, [r7, #4]
 801b4c8:	33a4      	adds	r3, #164	; 0xa4
 801b4ca:	4a2c      	ldr	r2, [pc, #176]	; (801b57c <problem_fetch+0x19eb8>)
 801b4cc:	461c      	mov	r4, r3
 801b4ce:	4613      	mov	r3, r2
 801b4d0:	cb07      	ldmia	r3!, {r0, r1, r2}
 801b4d2:	6020      	str	r0, [r4, #0]
 801b4d4:	6061      	str	r1, [r4, #4]
 801b4d6:	60a2      	str	r2, [r4, #8]
 801b4d8:	881b      	ldrh	r3, [r3, #0]
 801b4da:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,5,8,12,14,14,18");
 801b4dc:	687b      	ldr	r3, [r7, #4]
 801b4de:	3304      	adds	r3, #4
 801b4e0:	4a27      	ldr	r2, [pc, #156]	; (801b580 <problem_fetch+0x19ebc>)
 801b4e2:	461d      	mov	r5, r3
 801b4e4:	4614      	mov	r4, r2
 801b4e6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801b4e8:	6028      	str	r0, [r5, #0]
 801b4ea:	6069      	str	r1, [r5, #4]
 801b4ec:	60aa      	str	r2, [r5, #8]
 801b4ee:	60eb      	str	r3, [r5, #12]
 801b4f0:	8823      	ldrh	r3, [r4, #0]
 801b4f2:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,s,d,d,d,d,e");
 801b4f4:	687b      	ldr	r3, [r7, #4]
 801b4f6:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 801b4fa:	4a09      	ldr	r2, [pc, #36]	; (801b520 <problem_fetch+0x19e5c>)
 801b4fc:	461c      	mov	r4, r3
 801b4fe:	4613      	mov	r3, r2
 801b500:	cb07      	ldmia	r3!, {r0, r1, r2}
 801b502:	6020      	str	r0, [r4, #0]
 801b504:	6061      	str	r1, [r4, #4]
 801b506:	60a2      	str	r2, [r4, #8]
 801b508:	881b      	ldrh	r3, [r3, #0]
 801b50a:	81a3      	strh	r3, [r4, #12]
			break;
 801b50c:	f001 b80a 	b.w	801c524 <problem_fetch+0x1ae60>
 801b510:	0802c7f4 	.word	0x0802c7f4
 801b514:	08023854 	.word	0x08023854
 801b518:	0802c800 	.word	0x0802c800
 801b51c:	0802c810 	.word	0x0802c810
 801b520:	080238cc 	.word	0x080238cc
 801b524:	0802c824 	.word	0x0802c824
 801b528:	0802c830 	.word	0x0802c830
 801b52c:	0802c840 	.word	0x0802c840
 801b530:	08023978 	.word	0x08023978
 801b534:	0802c858 	.word	0x0802c858
 801b538:	0802c860 	.word	0x0802c860
 801b53c:	08025f04 	.word	0x08025f04
 801b540:	08023834 	.word	0x08023834
 801b544:	0802c86c 	.word	0x0802c86c
 801b548:	080239f4 	.word	0x080239f4
 801b54c:	0802c87c 	.word	0x0802c87c
 801b550:	0802c88c 	.word	0x0802c88c
 801b554:	0802c240 	.word	0x0802c240
 801b558:	0802c8a0 	.word	0x0802c8a0
 801b55c:	08023814 	.word	0x08023814
 801b560:	0802c8ac 	.word	0x0802c8ac
 801b564:	08024de4 	.word	0x08024de4
 801b568:	080239dc 	.word	0x080239dc
 801b56c:	0802c8bc 	.word	0x0802c8bc
 801b570:	0802c8c4 	.word	0x0802c8c4
 801b574:	0802c8d4 	.word	0x0802c8d4
 801b578:	0802c8e8 	.word	0x0802c8e8
 801b57c:	0802c8f0 	.word	0x0802c8f0
 801b580:	0802c900 	.word	0x0802c900
		case 777 :
			strcpy(p->name,"ACG6");
 801b584:	687b      	ldr	r3, [r7, #4]
 801b586:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801b58a:	4ac1      	ldr	r2, [pc, #772]	; (801b890 <problem_fetch+0x1a1cc>)
 801b58c:	6810      	ldr	r0, [r2, #0]
 801b58e:	6018      	str	r0, [r3, #0]
 801b590:	7912      	ldrb	r2, [r2, #4]
 801b592:	711a      	strb	r2, [r3, #4]
			strcpy(p->grade,"7A");
 801b594:	687b      	ldr	r3, [r7, #4]
 801b596:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801b59a:	4abe      	ldr	r2, [pc, #760]	; (801b894 <problem_fetch+0x1a1d0>)
 801b59c:	8811      	ldrh	r1, [r2, #0]
 801b59e:	7892      	ldrb	r2, [r2, #2]
 801b5a0:	8019      	strh	r1, [r3, #0]
 801b5a2:	709a      	strb	r2, [r3, #2]
			p->moveSize = 8;
 801b5a4:	687b      	ldr	r3, [r7, #4]
 801b5a6:	2208      	movs	r2, #8
 801b5a8:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,H,G,C,C,C,E,I");
 801b5aa:	687b      	ldr	r3, [r7, #4]
 801b5ac:	33a4      	adds	r3, #164	; 0xa4
 801b5ae:	4aba      	ldr	r2, [pc, #744]	; (801b898 <problem_fetch+0x1a1d4>)
 801b5b0:	461c      	mov	r4, r3
 801b5b2:	4615      	mov	r5, r2
 801b5b4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801b5b6:	6020      	str	r0, [r4, #0]
 801b5b8:	6061      	str	r1, [r4, #4]
 801b5ba:	60a2      	str	r2, [r4, #8]
 801b5bc:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,10,10,8,13,16,16,18");
 801b5be:	687b      	ldr	r3, [r7, #4]
 801b5c0:	3304      	adds	r3, #4
 801b5c2:	4ab6      	ldr	r2, [pc, #728]	; (801b89c <problem_fetch+0x1a1d8>)
 801b5c4:	461d      	mov	r5, r3
 801b5c6:	4614      	mov	r4, r2
 801b5c8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801b5ca:	6028      	str	r0, [r5, #0]
 801b5cc:	6069      	str	r1, [r5, #4]
 801b5ce:	60aa      	str	r2, [r5, #8]
 801b5d0:	60eb      	str	r3, [r5, #12]
 801b5d2:	6820      	ldr	r0, [r4, #0]
 801b5d4:	6128      	str	r0, [r5, #16]
 801b5d6:	88a3      	ldrh	r3, [r4, #4]
 801b5d8:	82ab      	strh	r3, [r5, #20]
			strcpy(p->startFinish,"s,d,d,d,d,d,d,e");
 801b5da:	687b      	ldr	r3, [r7, #4]
 801b5dc:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 801b5e0:	4aaf      	ldr	r2, [pc, #700]	; (801b8a0 <problem_fetch+0x1a1dc>)
 801b5e2:	461c      	mov	r4, r3
 801b5e4:	4615      	mov	r5, r2
 801b5e6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801b5e8:	6020      	str	r0, [r4, #0]
 801b5ea:	6061      	str	r1, [r4, #4]
 801b5ec:	60a2      	str	r2, [r4, #8]
 801b5ee:	60e3      	str	r3, [r4, #12]
			break;
 801b5f0:	f000 bf98 	b.w	801c524 <problem_fetch+0x1ae60>
		case 778 :
			strcpy(p->name,"ACG5");
 801b5f4:	687b      	ldr	r3, [r7, #4]
 801b5f6:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801b5fa:	4aaa      	ldr	r2, [pc, #680]	; (801b8a4 <problem_fetch+0x1a1e0>)
 801b5fc:	6810      	ldr	r0, [r2, #0]
 801b5fe:	6018      	str	r0, [r3, #0]
 801b600:	7912      	ldrb	r2, [r2, #4]
 801b602:	711a      	strb	r2, [r3, #4]
			strcpy(p->grade,"6B+");
 801b604:	687b      	ldr	r3, [r7, #4]
 801b606:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801b60a:	4aa7      	ldr	r2, [pc, #668]	; (801b8a8 <problem_fetch+0x1a1e4>)
 801b60c:	6810      	ldr	r0, [r2, #0]
 801b60e:	6018      	str	r0, [r3, #0]
			p->moveSize = 8;
 801b610:	687b      	ldr	r3, [r7, #4]
 801b612:	2208      	movs	r2, #8
 801b614:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"H,C,E,B,E,E,H,D");
 801b616:	687b      	ldr	r3, [r7, #4]
 801b618:	33a4      	adds	r3, #164	; 0xa4
 801b61a:	4aa4      	ldr	r2, [pc, #656]	; (801b8ac <problem_fetch+0x1a1e8>)
 801b61c:	461c      	mov	r4, r3
 801b61e:	4615      	mov	r5, r2
 801b620:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801b622:	6020      	str	r0, [r4, #0]
 801b624:	6061      	str	r1, [r4, #4]
 801b626:	60a2      	str	r2, [r4, #8]
 801b628:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,5,8,10,12,14,16,18");
 801b62a:	687b      	ldr	r3, [r7, #4]
 801b62c:	3304      	adds	r3, #4
 801b62e:	4aa0      	ldr	r2, [pc, #640]	; (801b8b0 <problem_fetch+0x1a1ec>)
 801b630:	461d      	mov	r5, r3
 801b632:	4614      	mov	r4, r2
 801b634:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801b636:	6028      	str	r0, [r5, #0]
 801b638:	6069      	str	r1, [r5, #4]
 801b63a:	60aa      	str	r2, [r5, #8]
 801b63c:	60eb      	str	r3, [r5, #12]
 801b63e:	6820      	ldr	r0, [r4, #0]
 801b640:	6128      	str	r0, [r5, #16]
 801b642:	7923      	ldrb	r3, [r4, #4]
 801b644:	752b      	strb	r3, [r5, #20]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,e");
 801b646:	687b      	ldr	r3, [r7, #4]
 801b648:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 801b64c:	4a99      	ldr	r2, [pc, #612]	; (801b8b4 <problem_fetch+0x1a1f0>)
 801b64e:	461c      	mov	r4, r3
 801b650:	4615      	mov	r5, r2
 801b652:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801b654:	6020      	str	r0, [r4, #0]
 801b656:	6061      	str	r1, [r4, #4]
 801b658:	60a2      	str	r2, [r4, #8]
 801b65a:	60e3      	str	r3, [r4, #12]
			break;
 801b65c:	f000 bf62 	b.w	801c524 <problem_fetch+0x1ae60>
		case 779 :
			strcpy(p->name,"E-16");
 801b660:	687b      	ldr	r3, [r7, #4]
 801b662:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801b666:	4a94      	ldr	r2, [pc, #592]	; (801b8b8 <problem_fetch+0x1a1f4>)
 801b668:	6810      	ldr	r0, [r2, #0]
 801b66a:	6018      	str	r0, [r3, #0]
 801b66c:	7912      	ldrb	r2, [r2, #4]
 801b66e:	711a      	strb	r2, [r3, #4]
			strcpy(p->grade,"6B+");
 801b670:	687b      	ldr	r3, [r7, #4]
 801b672:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801b676:	4a8c      	ldr	r2, [pc, #560]	; (801b8a8 <problem_fetch+0x1a1e4>)
 801b678:	6810      	ldr	r0, [r2, #0]
 801b67a:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 801b67c:	687b      	ldr	r3, [r7, #4]
 801b67e:	2206      	movs	r2, #6
 801b680:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,C,E,C,E,A");
 801b682:	687b      	ldr	r3, [r7, #4]
 801b684:	33a4      	adds	r3, #164	; 0xa4
 801b686:	4a8d      	ldr	r2, [pc, #564]	; (801b8bc <problem_fetch+0x1a1f8>)
 801b688:	461c      	mov	r4, r3
 801b68a:	4613      	mov	r3, r2
 801b68c:	cb07      	ldmia	r3!, {r0, r1, r2}
 801b68e:	6020      	str	r0, [r4, #0]
 801b690:	6061      	str	r1, [r4, #4]
 801b692:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"6,8,9,13,16,18");
 801b694:	687b      	ldr	r3, [r7, #4]
 801b696:	3304      	adds	r3, #4
 801b698:	4a89      	ldr	r2, [pc, #548]	; (801b8c0 <problem_fetch+0x1a1fc>)
 801b69a:	461c      	mov	r4, r3
 801b69c:	4613      	mov	r3, r2
 801b69e:	cb07      	ldmia	r3!, {r0, r1, r2}
 801b6a0:	6020      	str	r0, [r4, #0]
 801b6a2:	6061      	str	r1, [r4, #4]
 801b6a4:	60a2      	str	r2, [r4, #8]
 801b6a6:	881a      	ldrh	r2, [r3, #0]
 801b6a8:	789b      	ldrb	r3, [r3, #2]
 801b6aa:	81a2      	strh	r2, [r4, #12]
 801b6ac:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 801b6ae:	687b      	ldr	r3, [r7, #4]
 801b6b0:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 801b6b4:	4a83      	ldr	r2, [pc, #524]	; (801b8c4 <problem_fetch+0x1a200>)
 801b6b6:	461c      	mov	r4, r3
 801b6b8:	4613      	mov	r3, r2
 801b6ba:	cb07      	ldmia	r3!, {r0, r1, r2}
 801b6bc:	6020      	str	r0, [r4, #0]
 801b6be:	6061      	str	r1, [r4, #4]
 801b6c0:	60a2      	str	r2, [r4, #8]
			break;
 801b6c2:	f000 bf2f 	b.w	801c524 <problem_fetch+0x1ae60>
		case 780 :
			strcpy(p->name,"SCHWARTZ SCHNEIDER");
 801b6c6:	687b      	ldr	r3, [r7, #4]
 801b6c8:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801b6cc:	4a7e      	ldr	r2, [pc, #504]	; (801b8c8 <problem_fetch+0x1a204>)
 801b6ce:	461d      	mov	r5, r3
 801b6d0:	4614      	mov	r4, r2
 801b6d2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801b6d4:	6028      	str	r0, [r5, #0]
 801b6d6:	6069      	str	r1, [r5, #4]
 801b6d8:	60aa      	str	r2, [r5, #8]
 801b6da:	60eb      	str	r3, [r5, #12]
 801b6dc:	8823      	ldrh	r3, [r4, #0]
 801b6de:	78a2      	ldrb	r2, [r4, #2]
 801b6e0:	822b      	strh	r3, [r5, #16]
 801b6e2:	4613      	mov	r3, r2
 801b6e4:	74ab      	strb	r3, [r5, #18]
			strcpy(p->grade,"7A+");
 801b6e6:	687b      	ldr	r3, [r7, #4]
 801b6e8:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801b6ec:	4a77      	ldr	r2, [pc, #476]	; (801b8cc <problem_fetch+0x1a208>)
 801b6ee:	6810      	ldr	r0, [r2, #0]
 801b6f0:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 801b6f2:	687b      	ldr	r3, [r7, #4]
 801b6f4:	2207      	movs	r2, #7
 801b6f6:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,H,D,B,D,E,I");
 801b6f8:	687b      	ldr	r3, [r7, #4]
 801b6fa:	33a4      	adds	r3, #164	; 0xa4
 801b6fc:	4a74      	ldr	r2, [pc, #464]	; (801b8d0 <problem_fetch+0x1a20c>)
 801b6fe:	461c      	mov	r4, r3
 801b700:	4613      	mov	r3, r2
 801b702:	cb07      	ldmia	r3!, {r0, r1, r2}
 801b704:	6020      	str	r0, [r4, #0]
 801b706:	6061      	str	r1, [r4, #4]
 801b708:	60a2      	str	r2, [r4, #8]
 801b70a:	881b      	ldrh	r3, [r3, #0]
 801b70c:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,10,11,6,15,16,18");
 801b70e:	687b      	ldr	r3, [r7, #4]
 801b710:	3304      	adds	r3, #4
 801b712:	4a70      	ldr	r2, [pc, #448]	; (801b8d4 <problem_fetch+0x1a210>)
 801b714:	461d      	mov	r5, r3
 801b716:	4614      	mov	r4, r2
 801b718:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801b71a:	6028      	str	r0, [r5, #0]
 801b71c:	6069      	str	r1, [r5, #4]
 801b71e:	60aa      	str	r2, [r5, #8]
 801b720:	60eb      	str	r3, [r5, #12]
 801b722:	8823      	ldrh	r3, [r4, #0]
 801b724:	78a2      	ldrb	r2, [r4, #2]
 801b726:	822b      	strh	r3, [r5, #16]
 801b728:	4613      	mov	r3, r2
 801b72a:	74ab      	strb	r3, [r5, #18]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 801b72c:	687b      	ldr	r3, [r7, #4]
 801b72e:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 801b732:	4a69      	ldr	r2, [pc, #420]	; (801b8d8 <problem_fetch+0x1a214>)
 801b734:	461c      	mov	r4, r3
 801b736:	4613      	mov	r3, r2
 801b738:	cb07      	ldmia	r3!, {r0, r1, r2}
 801b73a:	6020      	str	r0, [r4, #0]
 801b73c:	6061      	str	r1, [r4, #4]
 801b73e:	60a2      	str	r2, [r4, #8]
 801b740:	881b      	ldrh	r3, [r3, #0]
 801b742:	81a3      	strh	r3, [r4, #12]
			break;
 801b744:	f000 beee 	b.w	801c524 <problem_fetch+0x1ae60>
		case 781 :
			strcpy(p->name,"MELET VAR");
 801b748:	687b      	ldr	r3, [r7, #4]
 801b74a:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801b74e:	4963      	ldr	r1, [pc, #396]	; (801b8dc <problem_fetch+0x1a218>)
 801b750:	461a      	mov	r2, r3
 801b752:	460b      	mov	r3, r1
 801b754:	cb03      	ldmia	r3!, {r0, r1}
 801b756:	6010      	str	r0, [r2, #0]
 801b758:	6051      	str	r1, [r2, #4]
 801b75a:	881b      	ldrh	r3, [r3, #0]
 801b75c:	8113      	strh	r3, [r2, #8]
			strcpy(p->grade,"7B");
 801b75e:	687b      	ldr	r3, [r7, #4]
 801b760:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801b764:	4a5e      	ldr	r2, [pc, #376]	; (801b8e0 <problem_fetch+0x1a21c>)
 801b766:	8811      	ldrh	r1, [r2, #0]
 801b768:	7892      	ldrb	r2, [r2, #2]
 801b76a:	8019      	strh	r1, [r3, #0]
 801b76c:	709a      	strb	r2, [r3, #2]
			p->moveSize = 5;
 801b76e:	687b      	ldr	r3, [r7, #4]
 801b770:	2205      	movs	r2, #5
 801b772:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,H,C,G,A");
 801b774:	687b      	ldr	r3, [r7, #4]
 801b776:	33a4      	adds	r3, #164	; 0xa4
 801b778:	495a      	ldr	r1, [pc, #360]	; (801b8e4 <problem_fetch+0x1a220>)
 801b77a:	461a      	mov	r2, r3
 801b77c:	460b      	mov	r3, r1
 801b77e:	cb03      	ldmia	r3!, {r0, r1}
 801b780:	6010      	str	r0, [r2, #0]
 801b782:	6051      	str	r1, [r2, #4]
 801b784:	881b      	ldrh	r3, [r3, #0]
 801b786:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"5,10,13,17,18");
 801b788:	687b      	ldr	r3, [r7, #4]
 801b78a:	3304      	adds	r3, #4
 801b78c:	4a56      	ldr	r2, [pc, #344]	; (801b8e8 <problem_fetch+0x1a224>)
 801b78e:	461c      	mov	r4, r3
 801b790:	4613      	mov	r3, r2
 801b792:	cb07      	ldmia	r3!, {r0, r1, r2}
 801b794:	6020      	str	r0, [r4, #0]
 801b796:	6061      	str	r1, [r4, #4]
 801b798:	60a2      	str	r2, [r4, #8]
 801b79a:	881b      	ldrh	r3, [r3, #0]
 801b79c:	81a3      	strh	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,e");
 801b79e:	687b      	ldr	r3, [r7, #4]
 801b7a0:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 801b7a4:	4951      	ldr	r1, [pc, #324]	; (801b8ec <problem_fetch+0x1a228>)
 801b7a6:	461a      	mov	r2, r3
 801b7a8:	460b      	mov	r3, r1
 801b7aa:	cb03      	ldmia	r3!, {r0, r1}
 801b7ac:	6010      	str	r0, [r2, #0]
 801b7ae:	6051      	str	r1, [r2, #4]
 801b7b0:	881b      	ldrh	r3, [r3, #0]
 801b7b2:	8113      	strh	r3, [r2, #8]
			break;
 801b7b4:	f000 beb6 	b.w	801c524 <problem_fetch+0x1ae60>
		case 782 :
			strcpy(p->name,"MELET");
 801b7b8:	687b      	ldr	r3, [r7, #4]
 801b7ba:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801b7be:	4a4c      	ldr	r2, [pc, #304]	; (801b8f0 <problem_fetch+0x1a22c>)
 801b7c0:	6810      	ldr	r0, [r2, #0]
 801b7c2:	6018      	str	r0, [r3, #0]
 801b7c4:	8892      	ldrh	r2, [r2, #4]
 801b7c6:	809a      	strh	r2, [r3, #4]
			strcpy(p->grade,"7A+");
 801b7c8:	687b      	ldr	r3, [r7, #4]
 801b7ca:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801b7ce:	4a3f      	ldr	r2, [pc, #252]	; (801b8cc <problem_fetch+0x1a208>)
 801b7d0:	6810      	ldr	r0, [r2, #0]
 801b7d2:	6018      	str	r0, [r3, #0]
			p->moveSize = 5;
 801b7d4:	687b      	ldr	r3, [r7, #4]
 801b7d6:	2205      	movs	r2, #5
 801b7d8:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"C,H,H,I,J");
 801b7da:	687b      	ldr	r3, [r7, #4]
 801b7dc:	33a4      	adds	r3, #164	; 0xa4
 801b7de:	4945      	ldr	r1, [pc, #276]	; (801b8f4 <problem_fetch+0x1a230>)
 801b7e0:	461a      	mov	r2, r3
 801b7e2:	460b      	mov	r3, r1
 801b7e4:	cb03      	ldmia	r3!, {r0, r1}
 801b7e6:	6010      	str	r0, [r2, #0]
 801b7e8:	6051      	str	r1, [r2, #4]
 801b7ea:	881b      	ldrh	r3, [r3, #0]
 801b7ec:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"13,16,10,18,5");
 801b7ee:	687b      	ldr	r3, [r7, #4]
 801b7f0:	3304      	adds	r3, #4
 801b7f2:	4a41      	ldr	r2, [pc, #260]	; (801b8f8 <problem_fetch+0x1a234>)
 801b7f4:	461c      	mov	r4, r3
 801b7f6:	4613      	mov	r3, r2
 801b7f8:	cb07      	ldmia	r3!, {r0, r1, r2}
 801b7fa:	6020      	str	r0, [r4, #0]
 801b7fc:	6061      	str	r1, [r4, #4]
 801b7fe:	60a2      	str	r2, [r4, #8]
 801b800:	881b      	ldrh	r3, [r3, #0]
 801b802:	81a3      	strh	r3, [r4, #12]
			strcpy(p->startFinish,"d,d,d,e,s");
 801b804:	687b      	ldr	r3, [r7, #4]
 801b806:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 801b80a:	493c      	ldr	r1, [pc, #240]	; (801b8fc <problem_fetch+0x1a238>)
 801b80c:	461a      	mov	r2, r3
 801b80e:	460b      	mov	r3, r1
 801b810:	cb03      	ldmia	r3!, {r0, r1}
 801b812:	6010      	str	r0, [r2, #0]
 801b814:	6051      	str	r1, [r2, #4]
 801b816:	881b      	ldrh	r3, [r3, #0]
 801b818:	8113      	strh	r3, [r2, #8]
			break;
 801b81a:	f000 be83 	b.w	801c524 <problem_fetch+0x1ae60>
		case 783 :
			strcpy(p->name,"LADYBUG'S HEEL");
 801b81e:	687b      	ldr	r3, [r7, #4]
 801b820:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801b824:	4a36      	ldr	r2, [pc, #216]	; (801b900 <problem_fetch+0x1a23c>)
 801b826:	461c      	mov	r4, r3
 801b828:	4613      	mov	r3, r2
 801b82a:	cb07      	ldmia	r3!, {r0, r1, r2}
 801b82c:	6020      	str	r0, [r4, #0]
 801b82e:	6061      	str	r1, [r4, #4]
 801b830:	60a2      	str	r2, [r4, #8]
 801b832:	881a      	ldrh	r2, [r3, #0]
 801b834:	789b      	ldrb	r3, [r3, #2]
 801b836:	81a2      	strh	r2, [r4, #12]
 801b838:	73a3      	strb	r3, [r4, #14]
			strcpy(p->grade,"7A");
 801b83a:	687b      	ldr	r3, [r7, #4]
 801b83c:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801b840:	4a14      	ldr	r2, [pc, #80]	; (801b894 <problem_fetch+0x1a1d0>)
 801b842:	8811      	ldrh	r1, [r2, #0]
 801b844:	7892      	ldrb	r2, [r2, #2]
 801b846:	8019      	strh	r1, [r3, #0]
 801b848:	709a      	strb	r2, [r3, #2]
			p->moveSize = 6;
 801b84a:	687b      	ldr	r3, [r7, #4]
 801b84c:	2206      	movs	r2, #6
 801b84e:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,G,H,C,H,D");
 801b850:	687b      	ldr	r3, [r7, #4]
 801b852:	33a4      	adds	r3, #164	; 0xa4
 801b854:	4a2b      	ldr	r2, [pc, #172]	; (801b904 <problem_fetch+0x1a240>)
 801b856:	461c      	mov	r4, r3
 801b858:	4613      	mov	r3, r2
 801b85a:	cb07      	ldmia	r3!, {r0, r1, r2}
 801b85c:	6020      	str	r0, [r4, #0]
 801b85e:	6061      	str	r1, [r4, #4]
 801b860:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,6,10,13,16,18");
 801b862:	687b      	ldr	r3, [r7, #4]
 801b864:	3304      	adds	r3, #4
 801b866:	4a28      	ldr	r2, [pc, #160]	; (801b908 <problem_fetch+0x1a244>)
 801b868:	461c      	mov	r4, r3
 801b86a:	4615      	mov	r5, r2
 801b86c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801b86e:	6020      	str	r0, [r4, #0]
 801b870:	6061      	str	r1, [r4, #4]
 801b872:	60a2      	str	r2, [r4, #8]
 801b874:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,s,d,d,d,e");
 801b876:	687b      	ldr	r3, [r7, #4]
 801b878:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 801b87c:	4a23      	ldr	r2, [pc, #140]	; (801b90c <problem_fetch+0x1a248>)
 801b87e:	461c      	mov	r4, r3
 801b880:	4613      	mov	r3, r2
 801b882:	cb07      	ldmia	r3!, {r0, r1, r2}
 801b884:	6020      	str	r0, [r4, #0]
 801b886:	6061      	str	r1, [r4, #4]
 801b888:	60a2      	str	r2, [r4, #8]
			break;
 801b88a:	f000 be4b 	b.w	801c524 <problem_fetch+0x1ae60>
 801b88e:	bf00      	nop
 801b890:	0802c914 	.word	0x0802c914
 801b894:	08023814 	.word	0x08023814
 801b898:	0802c91c 	.word	0x0802c91c
 801b89c:	0802c92c 	.word	0x0802c92c
 801b8a0:	08023a64 	.word	0x08023a64
 801b8a4:	0802c944 	.word	0x0802c944
 801b8a8:	08023854 	.word	0x08023854
 801b8ac:	0802c94c 	.word	0x0802c94c
 801b8b0:	0802c95c 	.word	0x0802c95c
 801b8b4:	08023978 	.word	0x08023978
 801b8b8:	0802c974 	.word	0x0802c974
 801b8bc:	0802c97c 	.word	0x0802c97c
 801b8c0:	0802c988 	.word	0x0802c988
 801b8c4:	08023bf0 	.word	0x08023bf0
 801b8c8:	0802c998 	.word	0x0802c998
 801b8cc:	080239f4 	.word	0x080239f4
 801b8d0:	0802c9ac 	.word	0x0802c9ac
 801b8d4:	0802c9bc 	.word	0x0802c9bc
 801b8d8:	080239dc 	.word	0x080239dc
 801b8dc:	0802c9d0 	.word	0x0802c9d0
 801b8e0:	08023f4c 	.word	0x08023f4c
 801b8e4:	0802c9dc 	.word	0x0802c9dc
 801b8e8:	080279c8 	.word	0x080279c8
 801b8ec:	08023d20 	.word	0x08023d20
 801b8f0:	0802c9e8 	.word	0x0802c9e8
 801b8f4:	0802c9f0 	.word	0x0802c9f0
 801b8f8:	0802c9fc 	.word	0x0802c9fc
 801b8fc:	08024f60 	.word	0x08024f60
 801b900:	0802ca0c 	.word	0x0802ca0c
 801b904:	0802ca1c 	.word	0x0802ca1c
 801b908:	0802ca28 	.word	0x0802ca28
 801b90c:	08023834 	.word	0x08023834
		case 784 :
			strcpy(p->name,"LADYBUG");
 801b910:	687b      	ldr	r3, [r7, #4]
 801b912:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801b916:	49a5      	ldr	r1, [pc, #660]	; (801bbac <problem_fetch+0x1a4e8>)
 801b918:	461a      	mov	r2, r3
 801b91a:	460b      	mov	r3, r1
 801b91c:	cb03      	ldmia	r3!, {r0, r1}
 801b91e:	6010      	str	r0, [r2, #0]
 801b920:	6051      	str	r1, [r2, #4]
			strcpy(p->grade,"7A+");
 801b922:	687b      	ldr	r3, [r7, #4]
 801b924:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801b928:	4aa1      	ldr	r2, [pc, #644]	; (801bbb0 <problem_fetch+0x1a4ec>)
 801b92a:	6810      	ldr	r0, [r2, #0]
 801b92c:	6018      	str	r0, [r3, #0]
			p->moveSize = 8;
 801b92e:	687b      	ldr	r3, [r7, #4]
 801b930:	2208      	movs	r2, #8
 801b932:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"A,A,C,D,F,G,H,J");
 801b934:	687b      	ldr	r3, [r7, #4]
 801b936:	33a4      	adds	r3, #164	; 0xa4
 801b938:	4a9e      	ldr	r2, [pc, #632]	; (801bbb4 <problem_fetch+0x1a4f0>)
 801b93a:	461c      	mov	r4, r3
 801b93c:	4615      	mov	r5, r2
 801b93e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801b940:	6020      	str	r0, [r4, #0]
 801b942:	6061      	str	r1, [r4, #4]
 801b944:	60a2      	str	r2, [r4, #8]
 801b946:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"9,14,13,18,11,6,10,5");
 801b948:	687b      	ldr	r3, [r7, #4]
 801b94a:	3304      	adds	r3, #4
 801b94c:	4a9a      	ldr	r2, [pc, #616]	; (801bbb8 <problem_fetch+0x1a4f4>)
 801b94e:	461d      	mov	r5, r3
 801b950:	4614      	mov	r4, r2
 801b952:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801b954:	6028      	str	r0, [r5, #0]
 801b956:	6069      	str	r1, [r5, #4]
 801b958:	60aa      	str	r2, [r5, #8]
 801b95a:	60eb      	str	r3, [r5, #12]
 801b95c:	6820      	ldr	r0, [r4, #0]
 801b95e:	6128      	str	r0, [r5, #16]
 801b960:	7923      	ldrb	r3, [r4, #4]
 801b962:	752b      	strb	r3, [r5, #20]
			strcpy(p->startFinish,"d,d,d,e,d,s,d,s");
 801b964:	687b      	ldr	r3, [r7, #4]
 801b966:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 801b96a:	4a94      	ldr	r2, [pc, #592]	; (801bbbc <problem_fetch+0x1a4f8>)
 801b96c:	461c      	mov	r4, r3
 801b96e:	4615      	mov	r5, r2
 801b970:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801b972:	6020      	str	r0, [r4, #0]
 801b974:	6061      	str	r1, [r4, #4]
 801b976:	60a2      	str	r2, [r4, #8]
 801b978:	60e3      	str	r3, [r4, #12]
			break;
 801b97a:	f000 bdd3 	b.w	801c524 <problem_fetch+0x1ae60>
		case 785 :
			strcpy(p->name,"ANA");
 801b97e:	687b      	ldr	r3, [r7, #4]
 801b980:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801b984:	4a8e      	ldr	r2, [pc, #568]	; (801bbc0 <problem_fetch+0x1a4fc>)
 801b986:	6810      	ldr	r0, [r2, #0]
 801b988:	6018      	str	r0, [r3, #0]
			strcpy(p->grade,"6B+");
 801b98a:	687b      	ldr	r3, [r7, #4]
 801b98c:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801b990:	4a8c      	ldr	r2, [pc, #560]	; (801bbc4 <problem_fetch+0x1a500>)
 801b992:	6810      	ldr	r0, [r2, #0]
 801b994:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 801b996:	687b      	ldr	r3, [r7, #4]
 801b998:	2206      	movs	r2, #6
 801b99a:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"H,J,I,H,E,D");
 801b99c:	687b      	ldr	r3, [r7, #4]
 801b99e:	33a4      	adds	r3, #164	; 0xa4
 801b9a0:	4a89      	ldr	r2, [pc, #548]	; (801bbc8 <problem_fetch+0x1a504>)
 801b9a2:	461c      	mov	r4, r3
 801b9a4:	4613      	mov	r3, r2
 801b9a6:	cb07      	ldmia	r3!, {r0, r1, r2}
 801b9a8:	6020      	str	r0, [r4, #0]
 801b9aa:	6061      	str	r1, [r4, #4]
 801b9ac:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,7,10,13,16,18");
 801b9ae:	687b      	ldr	r3, [r7, #4]
 801b9b0:	3304      	adds	r3, #4
 801b9b2:	4a86      	ldr	r2, [pc, #536]	; (801bbcc <problem_fetch+0x1a508>)
 801b9b4:	461c      	mov	r4, r3
 801b9b6:	4615      	mov	r5, r2
 801b9b8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801b9ba:	6020      	str	r0, [r4, #0]
 801b9bc:	6061      	str	r1, [r4, #4]
 801b9be:	60a2      	str	r2, [r4, #8]
 801b9c0:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 801b9c2:	687b      	ldr	r3, [r7, #4]
 801b9c4:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 801b9c8:	4a81      	ldr	r2, [pc, #516]	; (801bbd0 <problem_fetch+0x1a50c>)
 801b9ca:	461c      	mov	r4, r3
 801b9cc:	4613      	mov	r3, r2
 801b9ce:	cb07      	ldmia	r3!, {r0, r1, r2}
 801b9d0:	6020      	str	r0, [r4, #0]
 801b9d2:	6061      	str	r1, [r4, #4]
 801b9d4:	60a2      	str	r2, [r4, #8]
			break;
 801b9d6:	f000 bda5 	b.w	801c524 <problem_fetch+0x1ae60>
		case 786 :
			strcpy(p->name,"CHEETAHSAURUS");
 801b9da:	687b      	ldr	r3, [r7, #4]
 801b9dc:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801b9e0:	4a7c      	ldr	r2, [pc, #496]	; (801bbd4 <problem_fetch+0x1a510>)
 801b9e2:	461c      	mov	r4, r3
 801b9e4:	4613      	mov	r3, r2
 801b9e6:	cb07      	ldmia	r3!, {r0, r1, r2}
 801b9e8:	6020      	str	r0, [r4, #0]
 801b9ea:	6061      	str	r1, [r4, #4]
 801b9ec:	60a2      	str	r2, [r4, #8]
 801b9ee:	881b      	ldrh	r3, [r3, #0]
 801b9f0:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade,"6C");
 801b9f2:	687b      	ldr	r3, [r7, #4]
 801b9f4:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801b9f8:	4a77      	ldr	r2, [pc, #476]	; (801bbd8 <problem_fetch+0x1a514>)
 801b9fa:	8811      	ldrh	r1, [r2, #0]
 801b9fc:	7892      	ldrb	r2, [r2, #2]
 801b9fe:	8019      	strh	r1, [r3, #0]
 801ba00:	709a      	strb	r2, [r3, #2]
			p->moveSize = 8;
 801ba02:	687b      	ldr	r3, [r7, #4]
 801ba04:	2208      	movs	r2, #8
 801ba06:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"H,H,E,H,G,I,G,I");
 801ba08:	687b      	ldr	r3, [r7, #4]
 801ba0a:	33a4      	adds	r3, #164	; 0xa4
 801ba0c:	4a73      	ldr	r2, [pc, #460]	; (801bbdc <problem_fetch+0x1a518>)
 801ba0e:	461c      	mov	r4, r3
 801ba10:	4615      	mov	r5, r2
 801ba12:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801ba14:	6020      	str	r0, [r4, #0]
 801ba16:	6061      	str	r1, [r4, #4]
 801ba18:	60a2      	str	r2, [r4, #8]
 801ba1a:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,8,9,12,14,15,17,18");
 801ba1c:	687b      	ldr	r3, [r7, #4]
 801ba1e:	3304      	adds	r3, #4
 801ba20:	4a6f      	ldr	r2, [pc, #444]	; (801bbe0 <problem_fetch+0x1a51c>)
 801ba22:	461d      	mov	r5, r3
 801ba24:	4614      	mov	r4, r2
 801ba26:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801ba28:	6028      	str	r0, [r5, #0]
 801ba2a:	6069      	str	r1, [r5, #4]
 801ba2c:	60aa      	str	r2, [r5, #8]
 801ba2e:	60eb      	str	r3, [r5, #12]
 801ba30:	6820      	ldr	r0, [r4, #0]
 801ba32:	6128      	str	r0, [r5, #16]
 801ba34:	7923      	ldrb	r3, [r4, #4]
 801ba36:	752b      	strb	r3, [r5, #20]
			strcpy(p->startFinish,"s,d,d,d,d,d,d,e");
 801ba38:	687b      	ldr	r3, [r7, #4]
 801ba3a:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 801ba3e:	4a69      	ldr	r2, [pc, #420]	; (801bbe4 <problem_fetch+0x1a520>)
 801ba40:	461c      	mov	r4, r3
 801ba42:	4615      	mov	r5, r2
 801ba44:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801ba46:	6020      	str	r0, [r4, #0]
 801ba48:	6061      	str	r1, [r4, #4]
 801ba4a:	60a2      	str	r2, [r4, #8]
 801ba4c:	60e3      	str	r3, [r4, #12]
			break;
 801ba4e:	f000 bd69 	b.w	801c524 <problem_fetch+0x1ae60>
		case 787 :
			strcpy(p->name,"WAR OF THE TODDS");
 801ba52:	687b      	ldr	r3, [r7, #4]
 801ba54:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801ba58:	4a63      	ldr	r2, [pc, #396]	; (801bbe8 <problem_fetch+0x1a524>)
 801ba5a:	461d      	mov	r5, r3
 801ba5c:	4614      	mov	r4, r2
 801ba5e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801ba60:	6028      	str	r0, [r5, #0]
 801ba62:	6069      	str	r1, [r5, #4]
 801ba64:	60aa      	str	r2, [r5, #8]
 801ba66:	60eb      	str	r3, [r5, #12]
 801ba68:	7823      	ldrb	r3, [r4, #0]
 801ba6a:	742b      	strb	r3, [r5, #16]
			strcpy(p->grade,"7B+");
 801ba6c:	687b      	ldr	r3, [r7, #4]
 801ba6e:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801ba72:	4a5e      	ldr	r2, [pc, #376]	; (801bbec <problem_fetch+0x1a528>)
 801ba74:	6810      	ldr	r0, [r2, #0]
 801ba76:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 801ba78:	687b      	ldr	r3, [r7, #4]
 801ba7a:	2206      	movs	r2, #6
 801ba7c:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,G,I,I,H,D");
 801ba7e:	687b      	ldr	r3, [r7, #4]
 801ba80:	33a4      	adds	r3, #164	; 0xa4
 801ba82:	4a5b      	ldr	r2, [pc, #364]	; (801bbf0 <problem_fetch+0x1a52c>)
 801ba84:	461c      	mov	r4, r3
 801ba86:	4613      	mov	r3, r2
 801ba88:	cb07      	ldmia	r3!, {r0, r1, r2}
 801ba8a:	6020      	str	r0, [r4, #0]
 801ba8c:	6061      	str	r1, [r4, #4]
 801ba8e:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,9,9,15,16,18");
 801ba90:	687b      	ldr	r3, [r7, #4]
 801ba92:	3304      	adds	r3, #4
 801ba94:	4a57      	ldr	r2, [pc, #348]	; (801bbf4 <problem_fetch+0x1a530>)
 801ba96:	461c      	mov	r4, r3
 801ba98:	4613      	mov	r3, r2
 801ba9a:	cb07      	ldmia	r3!, {r0, r1, r2}
 801ba9c:	6020      	str	r0, [r4, #0]
 801ba9e:	6061      	str	r1, [r4, #4]
 801baa0:	60a2      	str	r2, [r4, #8]
 801baa2:	881a      	ldrh	r2, [r3, #0]
 801baa4:	789b      	ldrb	r3, [r3, #2]
 801baa6:	81a2      	strh	r2, [r4, #12]
 801baa8:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 801baaa:	687b      	ldr	r3, [r7, #4]
 801baac:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 801bab0:	4a47      	ldr	r2, [pc, #284]	; (801bbd0 <problem_fetch+0x1a50c>)
 801bab2:	461c      	mov	r4, r3
 801bab4:	4613      	mov	r3, r2
 801bab6:	cb07      	ldmia	r3!, {r0, r1, r2}
 801bab8:	6020      	str	r0, [r4, #0]
 801baba:	6061      	str	r1, [r4, #4]
 801babc:	60a2      	str	r2, [r4, #8]
			break;
 801babe:	f000 bd31 	b.w	801c524 <problem_fetch+0x1ae60>
		case 788 :
			strcpy(p->name,"AMIT 1.1");
 801bac2:	687b      	ldr	r3, [r7, #4]
 801bac4:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801bac8:	494b      	ldr	r1, [pc, #300]	; (801bbf8 <problem_fetch+0x1a534>)
 801baca:	461a      	mov	r2, r3
 801bacc:	460b      	mov	r3, r1
 801bace:	cb03      	ldmia	r3!, {r0, r1}
 801bad0:	6010      	str	r0, [r2, #0]
 801bad2:	6051      	str	r1, [r2, #4]
 801bad4:	781b      	ldrb	r3, [r3, #0]
 801bad6:	7213      	strb	r3, [r2, #8]
			strcpy(p->grade,"6C");
 801bad8:	687b      	ldr	r3, [r7, #4]
 801bada:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801bade:	4a3e      	ldr	r2, [pc, #248]	; (801bbd8 <problem_fetch+0x1a514>)
 801bae0:	8811      	ldrh	r1, [r2, #0]
 801bae2:	7892      	ldrb	r2, [r2, #2]
 801bae4:	8019      	strh	r1, [r3, #0]
 801bae6:	709a      	strb	r2, [r3, #2]
			p->moveSize = 6;
 801bae8:	687b      	ldr	r3, [r7, #4]
 801baea:	2206      	movs	r2, #6
 801baec:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,H,C,E,D,D");
 801baee:	687b      	ldr	r3, [r7, #4]
 801baf0:	33a4      	adds	r3, #164	; 0xa4
 801baf2:	4a42      	ldr	r2, [pc, #264]	; (801bbfc <problem_fetch+0x1a538>)
 801baf4:	461c      	mov	r4, r3
 801baf6:	4613      	mov	r3, r2
 801baf8:	cb07      	ldmia	r3!, {r0, r1, r2}
 801bafa:	6020      	str	r0, [r4, #0]
 801bafc:	6061      	str	r1, [r4, #4]
 801bafe:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,8,8,12,15,18");
 801bb00:	687b      	ldr	r3, [r7, #4]
 801bb02:	3304      	adds	r3, #4
 801bb04:	4a3e      	ldr	r2, [pc, #248]	; (801bc00 <problem_fetch+0x1a53c>)
 801bb06:	461c      	mov	r4, r3
 801bb08:	4613      	mov	r3, r2
 801bb0a:	cb07      	ldmia	r3!, {r0, r1, r2}
 801bb0c:	6020      	str	r0, [r4, #0]
 801bb0e:	6061      	str	r1, [r4, #4]
 801bb10:	60a2      	str	r2, [r4, #8]
 801bb12:	881a      	ldrh	r2, [r3, #0]
 801bb14:	789b      	ldrb	r3, [r3, #2]
 801bb16:	81a2      	strh	r2, [r4, #12]
 801bb18:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 801bb1a:	687b      	ldr	r3, [r7, #4]
 801bb1c:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 801bb20:	4a2b      	ldr	r2, [pc, #172]	; (801bbd0 <problem_fetch+0x1a50c>)
 801bb22:	461c      	mov	r4, r3
 801bb24:	4613      	mov	r3, r2
 801bb26:	cb07      	ldmia	r3!, {r0, r1, r2}
 801bb28:	6020      	str	r0, [r4, #0]
 801bb2a:	6061      	str	r1, [r4, #4]
 801bb2c:	60a2      	str	r2, [r4, #8]
			break;
 801bb2e:	f000 bcf9 	b.w	801c524 <problem_fetch+0x1ae60>
		case 789 :
			strcpy(p->name,"CRANKSHAFT");
 801bb32:	687b      	ldr	r3, [r7, #4]
 801bb34:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801bb38:	4932      	ldr	r1, [pc, #200]	; (801bc04 <problem_fetch+0x1a540>)
 801bb3a:	461a      	mov	r2, r3
 801bb3c:	460b      	mov	r3, r1
 801bb3e:	cb03      	ldmia	r3!, {r0, r1}
 801bb40:	6010      	str	r0, [r2, #0]
 801bb42:	6051      	str	r1, [r2, #4]
 801bb44:	8819      	ldrh	r1, [r3, #0]
 801bb46:	789b      	ldrb	r3, [r3, #2]
 801bb48:	8111      	strh	r1, [r2, #8]
 801bb4a:	7293      	strb	r3, [r2, #10]
			strcpy(p->grade,"6C");
 801bb4c:	687b      	ldr	r3, [r7, #4]
 801bb4e:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801bb52:	4a21      	ldr	r2, [pc, #132]	; (801bbd8 <problem_fetch+0x1a514>)
 801bb54:	8811      	ldrh	r1, [r2, #0]
 801bb56:	7892      	ldrb	r2, [r2, #2]
 801bb58:	8019      	strh	r1, [r3, #0]
 801bb5a:	709a      	strb	r2, [r3, #2]
			p->moveSize = 7;
 801bb5c:	687b      	ldr	r3, [r7, #4]
 801bb5e:	2207      	movs	r2, #7
 801bb60:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"C,H,G,F,E,B,D");
 801bb62:	687b      	ldr	r3, [r7, #4]
 801bb64:	33a4      	adds	r3, #164	; 0xa4
 801bb66:	4a28      	ldr	r2, [pc, #160]	; (801bc08 <problem_fetch+0x1a544>)
 801bb68:	461c      	mov	r4, r3
 801bb6a:	4613      	mov	r3, r2
 801bb6c:	cb07      	ldmia	r3!, {r0, r1, r2}
 801bb6e:	6020      	str	r0, [r4, #0]
 801bb70:	6061      	str	r1, [r4, #4]
 801bb72:	60a2      	str	r2, [r4, #8]
 801bb74:	881b      	ldrh	r3, [r3, #0]
 801bb76:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,5,9,11,12,15,18");
 801bb78:	687b      	ldr	r3, [r7, #4]
 801bb7a:	3304      	adds	r3, #4
 801bb7c:	4a23      	ldr	r2, [pc, #140]	; (801bc0c <problem_fetch+0x1a548>)
 801bb7e:	461d      	mov	r5, r3
 801bb80:	4614      	mov	r4, r2
 801bb82:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801bb84:	6028      	str	r0, [r5, #0]
 801bb86:	6069      	str	r1, [r5, #4]
 801bb88:	60aa      	str	r2, [r5, #8]
 801bb8a:	60eb      	str	r3, [r5, #12]
 801bb8c:	8823      	ldrh	r3, [r4, #0]
 801bb8e:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,s,d,d,d,d,e");
 801bb90:	687b      	ldr	r3, [r7, #4]
 801bb92:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 801bb96:	4a1e      	ldr	r2, [pc, #120]	; (801bc10 <problem_fetch+0x1a54c>)
 801bb98:	461c      	mov	r4, r3
 801bb9a:	4613      	mov	r3, r2
 801bb9c:	cb07      	ldmia	r3!, {r0, r1, r2}
 801bb9e:	6020      	str	r0, [r4, #0]
 801bba0:	6061      	str	r1, [r4, #4]
 801bba2:	60a2      	str	r2, [r4, #8]
 801bba4:	881b      	ldrh	r3, [r3, #0]
 801bba6:	81a3      	strh	r3, [r4, #12]
			break;
 801bba8:	f000 bcbc 	b.w	801c524 <problem_fetch+0x1ae60>
 801bbac:	0802ca38 	.word	0x0802ca38
 801bbb0:	080239f4 	.word	0x080239f4
 801bbb4:	0802ca40 	.word	0x0802ca40
 801bbb8:	0802ca50 	.word	0x0802ca50
 801bbbc:	0802ca68 	.word	0x0802ca68
 801bbc0:	0802ca78 	.word	0x0802ca78
 801bbc4:	08023854 	.word	0x08023854
 801bbc8:	0802ca7c 	.word	0x0802ca7c
 801bbcc:	0802b224 	.word	0x0802b224
 801bbd0:	08023bf0 	.word	0x08023bf0
 801bbd4:	0802ca88 	.word	0x0802ca88
 801bbd8:	08023920 	.word	0x08023920
 801bbdc:	0802ca98 	.word	0x0802ca98
 801bbe0:	0802caa8 	.word	0x0802caa8
 801bbe4:	08023a64 	.word	0x08023a64
 801bbe8:	0802cac0 	.word	0x0802cac0
 801bbec:	08023990 	.word	0x08023990
 801bbf0:	0802cad4 	.word	0x0802cad4
 801bbf4:	0802cae0 	.word	0x0802cae0
 801bbf8:	0802caf0 	.word	0x0802caf0
 801bbfc:	0802cafc 	.word	0x0802cafc
 801bc00:	08027964 	.word	0x08027964
 801bc04:	0802cb08 	.word	0x0802cb08
 801bc08:	0802cb14 	.word	0x0802cb14
 801bc0c:	0802cb24 	.word	0x0802cb24
 801bc10:	080238cc 	.word	0x080238cc
		case 790 :
			strcpy(p->name,"THE LADDER");
 801bc14:	687b      	ldr	r3, [r7, #4]
 801bc16:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801bc1a:	49b6      	ldr	r1, [pc, #728]	; (801bef4 <problem_fetch+0x1a830>)
 801bc1c:	461a      	mov	r2, r3
 801bc1e:	460b      	mov	r3, r1
 801bc20:	cb03      	ldmia	r3!, {r0, r1}
 801bc22:	6010      	str	r0, [r2, #0]
 801bc24:	6051      	str	r1, [r2, #4]
 801bc26:	8819      	ldrh	r1, [r3, #0]
 801bc28:	789b      	ldrb	r3, [r3, #2]
 801bc2a:	8111      	strh	r1, [r2, #8]
 801bc2c:	7293      	strb	r3, [r2, #10]
			strcpy(p->grade,"6B+");
 801bc2e:	687b      	ldr	r3, [r7, #4]
 801bc30:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801bc34:	4ab0      	ldr	r2, [pc, #704]	; (801bef8 <problem_fetch+0x1a834>)
 801bc36:	6810      	ldr	r0, [r2, #0]
 801bc38:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 801bc3a:	687b      	ldr	r3, [r7, #4]
 801bc3c:	2207      	movs	r2, #7
 801bc3e:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"H,J,I,J,I,K,I");
 801bc40:	687b      	ldr	r3, [r7, #4]
 801bc42:	33a4      	adds	r3, #164	; 0xa4
 801bc44:	4aad      	ldr	r2, [pc, #692]	; (801befc <problem_fetch+0x1a838>)
 801bc46:	461c      	mov	r4, r3
 801bc48:	4613      	mov	r3, r2
 801bc4a:	cb07      	ldmia	r3!, {r0, r1, r2}
 801bc4c:	6020      	str	r0, [r4, #0]
 801bc4e:	6061      	str	r1, [r4, #4]
 801bc50:	60a2      	str	r2, [r4, #8]
 801bc52:	881b      	ldrh	r3, [r3, #0]
 801bc54:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,7,10,13,15,16,18");
 801bc56:	687b      	ldr	r3, [r7, #4]
 801bc58:	3304      	adds	r3, #4
 801bc5a:	4aa9      	ldr	r2, [pc, #676]	; (801bf00 <problem_fetch+0x1a83c>)
 801bc5c:	461d      	mov	r5, r3
 801bc5e:	4614      	mov	r4, r2
 801bc60:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801bc62:	6028      	str	r0, [r5, #0]
 801bc64:	6069      	str	r1, [r5, #4]
 801bc66:	60aa      	str	r2, [r5, #8]
 801bc68:	60eb      	str	r3, [r5, #12]
 801bc6a:	8823      	ldrh	r3, [r4, #0]
 801bc6c:	78a2      	ldrb	r2, [r4, #2]
 801bc6e:	822b      	strh	r3, [r5, #16]
 801bc70:	4613      	mov	r3, r2
 801bc72:	74ab      	strb	r3, [r5, #18]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 801bc74:	687b      	ldr	r3, [r7, #4]
 801bc76:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 801bc7a:	4aa2      	ldr	r2, [pc, #648]	; (801bf04 <problem_fetch+0x1a840>)
 801bc7c:	461c      	mov	r4, r3
 801bc7e:	4613      	mov	r3, r2
 801bc80:	cb07      	ldmia	r3!, {r0, r1, r2}
 801bc82:	6020      	str	r0, [r4, #0]
 801bc84:	6061      	str	r1, [r4, #4]
 801bc86:	60a2      	str	r2, [r4, #8]
 801bc88:	881b      	ldrh	r3, [r3, #0]
 801bc8a:	81a3      	strh	r3, [r4, #12]
			break;
 801bc8c:	f000 bc4a 	b.w	801c524 <problem_fetch+0x1ae60>
		case 791 :
			strcpy(p->name,"SALAD DAYS");
 801bc90:	687b      	ldr	r3, [r7, #4]
 801bc92:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801bc96:	499c      	ldr	r1, [pc, #624]	; (801bf08 <problem_fetch+0x1a844>)
 801bc98:	461a      	mov	r2, r3
 801bc9a:	460b      	mov	r3, r1
 801bc9c:	cb03      	ldmia	r3!, {r0, r1}
 801bc9e:	6010      	str	r0, [r2, #0]
 801bca0:	6051      	str	r1, [r2, #4]
 801bca2:	8819      	ldrh	r1, [r3, #0]
 801bca4:	789b      	ldrb	r3, [r3, #2]
 801bca6:	8111      	strh	r1, [r2, #8]
 801bca8:	7293      	strb	r3, [r2, #10]
			strcpy(p->grade,"7A");
 801bcaa:	687b      	ldr	r3, [r7, #4]
 801bcac:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801bcb0:	4a96      	ldr	r2, [pc, #600]	; (801bf0c <problem_fetch+0x1a848>)
 801bcb2:	8811      	ldrh	r1, [r2, #0]
 801bcb4:	7892      	ldrb	r2, [r2, #2]
 801bcb6:	8019      	strh	r1, [r3, #0]
 801bcb8:	709a      	strb	r2, [r3, #2]
			p->moveSize = 12;
 801bcba:	687b      	ldr	r3, [r7, #4]
 801bcbc:	220c      	movs	r2, #12
 801bcbe:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"C,B,E,I,H,K,B,D,H,G,G,A");
 801bcc0:	687b      	ldr	r3, [r7, #4]
 801bcc2:	33a4      	adds	r3, #164	; 0xa4
 801bcc4:	4a92      	ldr	r2, [pc, #584]	; (801bf10 <problem_fetch+0x1a84c>)
 801bcc6:	461d      	mov	r5, r3
 801bcc8:	4614      	mov	r4, r2
 801bcca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801bccc:	6028      	str	r0, [r5, #0]
 801bcce:	6069      	str	r1, [r5, #4]
 801bcd0:	60aa      	str	r2, [r5, #8]
 801bcd2:	60eb      	str	r3, [r5, #12]
 801bcd4:	cc03      	ldmia	r4!, {r0, r1}
 801bcd6:	6128      	str	r0, [r5, #16]
 801bcd8:	6169      	str	r1, [r5, #20]
			strcpy(p->moveNumbers,"5,6,8,10,12,14,15,15,16,17,17,18");
 801bcda:	687b      	ldr	r3, [r7, #4]
 801bcdc:	3304      	adds	r3, #4
 801bcde:	4a8d      	ldr	r2, [pc, #564]	; (801bf14 <problem_fetch+0x1a850>)
 801bce0:	4614      	mov	r4, r2
 801bce2:	469c      	mov	ip, r3
 801bce4:	f104 0e20 	add.w	lr, r4, #32
 801bce8:	4665      	mov	r5, ip
 801bcea:	4626      	mov	r6, r4
 801bcec:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 801bcee:	6028      	str	r0, [r5, #0]
 801bcf0:	6069      	str	r1, [r5, #4]
 801bcf2:	60aa      	str	r2, [r5, #8]
 801bcf4:	60eb      	str	r3, [r5, #12]
 801bcf6:	3410      	adds	r4, #16
 801bcf8:	f10c 0c10 	add.w	ip, ip, #16
 801bcfc:	4574      	cmp	r4, lr
 801bcfe:	d1f3      	bne.n	801bce8 <problem_fetch+0x1a624>
 801bd00:	4663      	mov	r3, ip
 801bd02:	4622      	mov	r2, r4
 801bd04:	7812      	ldrb	r2, [r2, #0]
 801bd06:	701a      	strb	r2, [r3, #0]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,d,d,d,d,e");
 801bd08:	687b      	ldr	r3, [r7, #4]
 801bd0a:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 801bd0e:	4a82      	ldr	r2, [pc, #520]	; (801bf18 <problem_fetch+0x1a854>)
 801bd10:	461d      	mov	r5, r3
 801bd12:	4614      	mov	r4, r2
 801bd14:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801bd16:	6028      	str	r0, [r5, #0]
 801bd18:	6069      	str	r1, [r5, #4]
 801bd1a:	60aa      	str	r2, [r5, #8]
 801bd1c:	60eb      	str	r3, [r5, #12]
 801bd1e:	cc03      	ldmia	r4!, {r0, r1}
 801bd20:	6128      	str	r0, [r5, #16]
 801bd22:	6169      	str	r1, [r5, #20]
			break;
 801bd24:	e3fe      	b.n	801c524 <problem_fetch+0x1ae60>
		case 792 :
			strcpy(p->name,"SHAKEN NOT STIRRED");
 801bd26:	687b      	ldr	r3, [r7, #4]
 801bd28:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801bd2c:	4a7b      	ldr	r2, [pc, #492]	; (801bf1c <problem_fetch+0x1a858>)
 801bd2e:	461d      	mov	r5, r3
 801bd30:	4614      	mov	r4, r2
 801bd32:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801bd34:	6028      	str	r0, [r5, #0]
 801bd36:	6069      	str	r1, [r5, #4]
 801bd38:	60aa      	str	r2, [r5, #8]
 801bd3a:	60eb      	str	r3, [r5, #12]
 801bd3c:	8823      	ldrh	r3, [r4, #0]
 801bd3e:	78a2      	ldrb	r2, [r4, #2]
 801bd40:	822b      	strh	r3, [r5, #16]
 801bd42:	4613      	mov	r3, r2
 801bd44:	74ab      	strb	r3, [r5, #18]
			strcpy(p->grade,"6B+");
 801bd46:	687b      	ldr	r3, [r7, #4]
 801bd48:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801bd4c:	4a6a      	ldr	r2, [pc, #424]	; (801bef8 <problem_fetch+0x1a834>)
 801bd4e:	6810      	ldr	r0, [r2, #0]
 801bd50:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 801bd52:	687b      	ldr	r3, [r7, #4]
 801bd54:	2207      	movs	r2, #7
 801bd56:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"H,H,F,E,A,D,A");
 801bd58:	687b      	ldr	r3, [r7, #4]
 801bd5a:	33a4      	adds	r3, #164	; 0xa4
 801bd5c:	4a70      	ldr	r2, [pc, #448]	; (801bf20 <problem_fetch+0x1a85c>)
 801bd5e:	461c      	mov	r4, r3
 801bd60:	4613      	mov	r3, r2
 801bd62:	cb07      	ldmia	r3!, {r0, r1, r2}
 801bd64:	6020      	str	r0, [r4, #0]
 801bd66:	6061      	str	r1, [r4, #4]
 801bd68:	60a2      	str	r2, [r4, #8]
 801bd6a:	881b      	ldrh	r3, [r3, #0]
 801bd6c:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,8,11,12,14,15,18");
 801bd6e:	687b      	ldr	r3, [r7, #4]
 801bd70:	3304      	adds	r3, #4
 801bd72:	4a6c      	ldr	r2, [pc, #432]	; (801bf24 <problem_fetch+0x1a860>)
 801bd74:	461d      	mov	r5, r3
 801bd76:	4614      	mov	r4, r2
 801bd78:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801bd7a:	6028      	str	r0, [r5, #0]
 801bd7c:	6069      	str	r1, [r5, #4]
 801bd7e:	60aa      	str	r2, [r5, #8]
 801bd80:	60eb      	str	r3, [r5, #12]
 801bd82:	8823      	ldrh	r3, [r4, #0]
 801bd84:	78a2      	ldrb	r2, [r4, #2]
 801bd86:	822b      	strh	r3, [r5, #16]
 801bd88:	4613      	mov	r3, r2
 801bd8a:	74ab      	strb	r3, [r5, #18]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 801bd8c:	687b      	ldr	r3, [r7, #4]
 801bd8e:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 801bd92:	4a5c      	ldr	r2, [pc, #368]	; (801bf04 <problem_fetch+0x1a840>)
 801bd94:	461c      	mov	r4, r3
 801bd96:	4613      	mov	r3, r2
 801bd98:	cb07      	ldmia	r3!, {r0, r1, r2}
 801bd9a:	6020      	str	r0, [r4, #0]
 801bd9c:	6061      	str	r1, [r4, #4]
 801bd9e:	60a2      	str	r2, [r4, #8]
 801bda0:	881b      	ldrh	r3, [r3, #0]
 801bda2:	81a3      	strh	r3, [r4, #12]
			break;
 801bda4:	e3be      	b.n	801c524 <problem_fetch+0x1ae60>
		case 793 :
			strcpy(p->name,"SNAGGLEPUSS");
 801bda6:	687b      	ldr	r3, [r7, #4]
 801bda8:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801bdac:	4a5e      	ldr	r2, [pc, #376]	; (801bf28 <problem_fetch+0x1a864>)
 801bdae:	461c      	mov	r4, r3
 801bdb0:	4613      	mov	r3, r2
 801bdb2:	cb07      	ldmia	r3!, {r0, r1, r2}
 801bdb4:	6020      	str	r0, [r4, #0]
 801bdb6:	6061      	str	r1, [r4, #4]
 801bdb8:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade,"6B+");
 801bdba:	687b      	ldr	r3, [r7, #4]
 801bdbc:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801bdc0:	4a4d      	ldr	r2, [pc, #308]	; (801bef8 <problem_fetch+0x1a834>)
 801bdc2:	6810      	ldr	r0, [r2, #0]
 801bdc4:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 801bdc6:	687b      	ldr	r3, [r7, #4]
 801bdc8:	2206      	movs	r2, #6
 801bdca:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"H,K,H,I,H,I");
 801bdcc:	687b      	ldr	r3, [r7, #4]
 801bdce:	33a4      	adds	r3, #164	; 0xa4
 801bdd0:	4a56      	ldr	r2, [pc, #344]	; (801bf2c <problem_fetch+0x1a868>)
 801bdd2:	461c      	mov	r4, r3
 801bdd4:	4613      	mov	r3, r2
 801bdd6:	cb07      	ldmia	r3!, {r0, r1, r2}
 801bdd8:	6020      	str	r0, [r4, #0]
 801bdda:	6061      	str	r1, [r4, #4]
 801bddc:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,9,12,14,16,18");
 801bdde:	687b      	ldr	r3, [r7, #4]
 801bde0:	3304      	adds	r3, #4
 801bde2:	4a53      	ldr	r2, [pc, #332]	; (801bf30 <problem_fetch+0x1a86c>)
 801bde4:	461c      	mov	r4, r3
 801bde6:	4615      	mov	r5, r2
 801bde8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801bdea:	6020      	str	r0, [r4, #0]
 801bdec:	6061      	str	r1, [r4, #4]
 801bdee:	60a2      	str	r2, [r4, #8]
 801bdf0:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 801bdf2:	687b      	ldr	r3, [r7, #4]
 801bdf4:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 801bdf8:	4a4e      	ldr	r2, [pc, #312]	; (801bf34 <problem_fetch+0x1a870>)
 801bdfa:	461c      	mov	r4, r3
 801bdfc:	4613      	mov	r3, r2
 801bdfe:	cb07      	ldmia	r3!, {r0, r1, r2}
 801be00:	6020      	str	r0, [r4, #0]
 801be02:	6061      	str	r1, [r4, #4]
 801be04:	60a2      	str	r2, [r4, #8]
			break;
 801be06:	e38d      	b.n	801c524 <problem_fetch+0x1ae60>
		case 794 :
			strcpy(p->name,"E-Z CHEESE");
 801be08:	687b      	ldr	r3, [r7, #4]
 801be0a:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801be0e:	494a      	ldr	r1, [pc, #296]	; (801bf38 <problem_fetch+0x1a874>)
 801be10:	461a      	mov	r2, r3
 801be12:	460b      	mov	r3, r1
 801be14:	cb03      	ldmia	r3!, {r0, r1}
 801be16:	6010      	str	r0, [r2, #0]
 801be18:	6051      	str	r1, [r2, #4]
 801be1a:	8819      	ldrh	r1, [r3, #0]
 801be1c:	789b      	ldrb	r3, [r3, #2]
 801be1e:	8111      	strh	r1, [r2, #8]
 801be20:	7293      	strb	r3, [r2, #10]
			strcpy(p->grade,"6B+");
 801be22:	687b      	ldr	r3, [r7, #4]
 801be24:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801be28:	4a33      	ldr	r2, [pc, #204]	; (801bef8 <problem_fetch+0x1a834>)
 801be2a:	6810      	ldr	r0, [r2, #0]
 801be2c:	6018      	str	r0, [r3, #0]
			p->moveSize = 8;
 801be2e:	687b      	ldr	r3, [r7, #4]
 801be30:	2208      	movs	r2, #8
 801be32:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,E,H,H,J,G,H,D");
 801be34:	687b      	ldr	r3, [r7, #4]
 801be36:	33a4      	adds	r3, #164	; 0xa4
 801be38:	4a40      	ldr	r2, [pc, #256]	; (801bf3c <problem_fetch+0x1a878>)
 801be3a:	461c      	mov	r4, r3
 801be3c:	4615      	mov	r5, r2
 801be3e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801be40:	6020      	str	r0, [r4, #0]
 801be42:	6061      	str	r1, [r4, #4]
 801be44:	60a2      	str	r2, [r4, #8]
 801be46:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,8,10,12,13,15,16,18");
 801be48:	687b      	ldr	r3, [r7, #4]
 801be4a:	3304      	adds	r3, #4
 801be4c:	4a3c      	ldr	r2, [pc, #240]	; (801bf40 <problem_fetch+0x1a87c>)
 801be4e:	461d      	mov	r5, r3
 801be50:	4614      	mov	r4, r2
 801be52:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801be54:	6028      	str	r0, [r5, #0]
 801be56:	6069      	str	r1, [r5, #4]
 801be58:	60aa      	str	r2, [r5, #8]
 801be5a:	60eb      	str	r3, [r5, #12]
 801be5c:	6820      	ldr	r0, [r4, #0]
 801be5e:	6128      	str	r0, [r5, #16]
 801be60:	88a3      	ldrh	r3, [r4, #4]
 801be62:	82ab      	strh	r3, [r5, #20]
			strcpy(p->startFinish,"s,d,d,d,d,d,d,e");
 801be64:	687b      	ldr	r3, [r7, #4]
 801be66:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 801be6a:	4a36      	ldr	r2, [pc, #216]	; (801bf44 <problem_fetch+0x1a880>)
 801be6c:	461c      	mov	r4, r3
 801be6e:	4615      	mov	r5, r2
 801be70:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801be72:	6020      	str	r0, [r4, #0]
 801be74:	6061      	str	r1, [r4, #4]
 801be76:	60a2      	str	r2, [r4, #8]
 801be78:	60e3      	str	r3, [r4, #12]
			break;
 801be7a:	e353      	b.n	801c524 <problem_fetch+0x1ae60>
		case 795 :
			strcpy(p->name,"TODD, DARK AND HANDSOME");
 801be7c:	687b      	ldr	r3, [r7, #4]
 801be7e:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801be82:	4a31      	ldr	r2, [pc, #196]	; (801bf48 <problem_fetch+0x1a884>)
 801be84:	461d      	mov	r5, r3
 801be86:	4614      	mov	r4, r2
 801be88:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801be8a:	6028      	str	r0, [r5, #0]
 801be8c:	6069      	str	r1, [r5, #4]
 801be8e:	60aa      	str	r2, [r5, #8]
 801be90:	60eb      	str	r3, [r5, #12]
 801be92:	cc03      	ldmia	r4!, {r0, r1}
 801be94:	6128      	str	r0, [r5, #16]
 801be96:	6169      	str	r1, [r5, #20]
			strcpy(p->grade,"7C");
 801be98:	687b      	ldr	r3, [r7, #4]
 801be9a:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801be9e:	4a2b      	ldr	r2, [pc, #172]	; (801bf4c <problem_fetch+0x1a888>)
 801bea0:	8811      	ldrh	r1, [r2, #0]
 801bea2:	7892      	ldrb	r2, [r2, #2]
 801bea4:	8019      	strh	r1, [r3, #0]
 801bea6:	709a      	strb	r2, [r3, #2]
			p->moveSize = 8;
 801bea8:	687b      	ldr	r3, [r7, #4]
 801beaa:	2208      	movs	r2, #8
 801beac:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,G,H,C,C,H,G,I");
 801beae:	687b      	ldr	r3, [r7, #4]
 801beb0:	33a4      	adds	r3, #164	; 0xa4
 801beb2:	4a27      	ldr	r2, [pc, #156]	; (801bf50 <problem_fetch+0x1a88c>)
 801beb4:	461c      	mov	r4, r3
 801beb6:	4615      	mov	r5, r2
 801beb8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801beba:	6020      	str	r0, [r4, #0]
 801bebc:	6061      	str	r1, [r4, #4]
 801bebe:	60a2      	str	r2, [r4, #8]
 801bec0:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,6,8,8,13,16,17,18");
 801bec2:	687b      	ldr	r3, [r7, #4]
 801bec4:	3304      	adds	r3, #4
 801bec6:	4a23      	ldr	r2, [pc, #140]	; (801bf54 <problem_fetch+0x1a890>)
 801bec8:	461d      	mov	r5, r3
 801beca:	4614      	mov	r4, r2
 801becc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801bece:	6028      	str	r0, [r5, #0]
 801bed0:	6069      	str	r1, [r5, #4]
 801bed2:	60aa      	str	r2, [r5, #8]
 801bed4:	60eb      	str	r3, [r5, #12]
 801bed6:	6820      	ldr	r0, [r4, #0]
 801bed8:	6128      	str	r0, [r5, #16]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,e");
 801beda:	687b      	ldr	r3, [r7, #4]
 801bedc:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 801bee0:	4a1d      	ldr	r2, [pc, #116]	; (801bf58 <problem_fetch+0x1a894>)
 801bee2:	461c      	mov	r4, r3
 801bee4:	4615      	mov	r5, r2
 801bee6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801bee8:	6020      	str	r0, [r4, #0]
 801beea:	6061      	str	r1, [r4, #4]
 801beec:	60a2      	str	r2, [r4, #8]
 801beee:	60e3      	str	r3, [r4, #12]
			break;
 801bef0:	e318      	b.n	801c524 <problem_fetch+0x1ae60>
 801bef2:	bf00      	nop
 801bef4:	0802cb38 	.word	0x0802cb38
 801bef8:	08023854 	.word	0x08023854
 801befc:	0802cb44 	.word	0x0802cb44
 801bf00:	0802bab8 	.word	0x0802bab8
 801bf04:	080239dc 	.word	0x080239dc
 801bf08:	0802cb54 	.word	0x0802cb54
 801bf0c:	08023814 	.word	0x08023814
 801bf10:	0802cb60 	.word	0x0802cb60
 801bf14:	0802cb78 	.word	0x0802cb78
 801bf18:	0802cb9c 	.word	0x0802cb9c
 801bf1c:	0802cbb4 	.word	0x0802cbb4
 801bf20:	0802cbc8 	.word	0x0802cbc8
 801bf24:	0802cbd8 	.word	0x0802cbd8
 801bf28:	0802cbec 	.word	0x0802cbec
 801bf2c:	0802cbf8 	.word	0x0802cbf8
 801bf30:	08028928 	.word	0x08028928
 801bf34:	08023bf0 	.word	0x08023bf0
 801bf38:	0802cc04 	.word	0x0802cc04
 801bf3c:	0802cc10 	.word	0x0802cc10
 801bf40:	0802cc20 	.word	0x0802cc20
 801bf44:	08023a64 	.word	0x08023a64
 801bf48:	0802cc38 	.word	0x0802cc38
 801bf4c:	08024088 	.word	0x08024088
 801bf50:	0802cc50 	.word	0x0802cc50
 801bf54:	0802cc60 	.word	0x0802cc60
 801bf58:	08023978 	.word	0x08023978
		case 796 :
			strcpy(p->name,"HAN DUO");
 801bf5c:	687b      	ldr	r3, [r7, #4]
 801bf5e:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801bf62:	49a4      	ldr	r1, [pc, #656]	; (801c1f4 <problem_fetch+0x1ab30>)
 801bf64:	461a      	mov	r2, r3
 801bf66:	460b      	mov	r3, r1
 801bf68:	cb03      	ldmia	r3!, {r0, r1}
 801bf6a:	6010      	str	r0, [r2, #0]
 801bf6c:	6051      	str	r1, [r2, #4]
			strcpy(p->grade,"7C");
 801bf6e:	687b      	ldr	r3, [r7, #4]
 801bf70:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801bf74:	4aa0      	ldr	r2, [pc, #640]	; (801c1f8 <problem_fetch+0x1ab34>)
 801bf76:	8811      	ldrh	r1, [r2, #0]
 801bf78:	7892      	ldrb	r2, [r2, #2]
 801bf7a:	8019      	strh	r1, [r3, #0]
 801bf7c:	709a      	strb	r2, [r3, #2]
			p->moveSize = 5;
 801bf7e:	687b      	ldr	r3, [r7, #4]
 801bf80:	2205      	movs	r2, #5
 801bf82:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"E,F,E,H,I");
 801bf84:	687b      	ldr	r3, [r7, #4]
 801bf86:	33a4      	adds	r3, #164	; 0xa4
 801bf88:	499c      	ldr	r1, [pc, #624]	; (801c1fc <problem_fetch+0x1ab38>)
 801bf8a:	461a      	mov	r2, r3
 801bf8c:	460b      	mov	r3, r1
 801bf8e:	cb03      	ldmia	r3!, {r0, r1}
 801bf90:	6010      	str	r0, [r2, #0]
 801bf92:	6051      	str	r1, [r2, #4]
 801bf94:	881b      	ldrh	r3, [r3, #0]
 801bf96:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"6,11,14,13,18");
 801bf98:	687b      	ldr	r3, [r7, #4]
 801bf9a:	3304      	adds	r3, #4
 801bf9c:	4a98      	ldr	r2, [pc, #608]	; (801c200 <problem_fetch+0x1ab3c>)
 801bf9e:	461c      	mov	r4, r3
 801bfa0:	4613      	mov	r3, r2
 801bfa2:	cb07      	ldmia	r3!, {r0, r1, r2}
 801bfa4:	6020      	str	r0, [r4, #0]
 801bfa6:	6061      	str	r1, [r4, #4]
 801bfa8:	60a2      	str	r2, [r4, #8]
 801bfaa:	881b      	ldrh	r3, [r3, #0]
 801bfac:	81a3      	strh	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,e");
 801bfae:	687b      	ldr	r3, [r7, #4]
 801bfb0:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 801bfb4:	4993      	ldr	r1, [pc, #588]	; (801c204 <problem_fetch+0x1ab40>)
 801bfb6:	461a      	mov	r2, r3
 801bfb8:	460b      	mov	r3, r1
 801bfba:	cb03      	ldmia	r3!, {r0, r1}
 801bfbc:	6010      	str	r0, [r2, #0]
 801bfbe:	6051      	str	r1, [r2, #4]
 801bfc0:	881b      	ldrh	r3, [r3, #0]
 801bfc2:	8113      	strh	r3, [r2, #8]
			break;
 801bfc4:	e2ae      	b.n	801c524 <problem_fetch+0x1ae60>
		case 797 :
			strcpy(p->name,"SINGLE DURA");
 801bfc6:	687b      	ldr	r3, [r7, #4]
 801bfc8:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801bfcc:	4a8e      	ldr	r2, [pc, #568]	; (801c208 <problem_fetch+0x1ab44>)
 801bfce:	461c      	mov	r4, r3
 801bfd0:	4613      	mov	r3, r2
 801bfd2:	cb07      	ldmia	r3!, {r0, r1, r2}
 801bfd4:	6020      	str	r0, [r4, #0]
 801bfd6:	6061      	str	r1, [r4, #4]
 801bfd8:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade,"7B");
 801bfda:	687b      	ldr	r3, [r7, #4]
 801bfdc:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801bfe0:	4a8a      	ldr	r2, [pc, #552]	; (801c20c <problem_fetch+0x1ab48>)
 801bfe2:	8811      	ldrh	r1, [r2, #0]
 801bfe4:	7892      	ldrb	r2, [r2, #2]
 801bfe6:	8019      	strh	r1, [r3, #0]
 801bfe8:	709a      	strb	r2, [r3, #2]
			p->moveSize = 5;
 801bfea:	687b      	ldr	r3, [r7, #4]
 801bfec:	2205      	movs	r2, #5
 801bfee:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"E,G,D,D,A");
 801bff0:	687b      	ldr	r3, [r7, #4]
 801bff2:	33a4      	adds	r3, #164	; 0xa4
 801bff4:	4986      	ldr	r1, [pc, #536]	; (801c210 <problem_fetch+0x1ab4c>)
 801bff6:	461a      	mov	r2, r3
 801bff8:	460b      	mov	r3, r1
 801bffa:	cb03      	ldmia	r3!, {r0, r1}
 801bffc:	6010      	str	r0, [r2, #0]
 801bffe:	6051      	str	r1, [r2, #4]
 801c000:	881b      	ldrh	r3, [r3, #0]
 801c002:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"6,9,11,15,18");
 801c004:	687b      	ldr	r3, [r7, #4]
 801c006:	3304      	adds	r3, #4
 801c008:	4a82      	ldr	r2, [pc, #520]	; (801c214 <problem_fetch+0x1ab50>)
 801c00a:	461c      	mov	r4, r3
 801c00c:	4613      	mov	r3, r2
 801c00e:	cb07      	ldmia	r3!, {r0, r1, r2}
 801c010:	6020      	str	r0, [r4, #0]
 801c012:	6061      	str	r1, [r4, #4]
 801c014:	60a2      	str	r2, [r4, #8]
 801c016:	781b      	ldrb	r3, [r3, #0]
 801c018:	7323      	strb	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,e");
 801c01a:	687b      	ldr	r3, [r7, #4]
 801c01c:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 801c020:	4978      	ldr	r1, [pc, #480]	; (801c204 <problem_fetch+0x1ab40>)
 801c022:	461a      	mov	r2, r3
 801c024:	460b      	mov	r3, r1
 801c026:	cb03      	ldmia	r3!, {r0, r1}
 801c028:	6010      	str	r0, [r2, #0]
 801c02a:	6051      	str	r1, [r2, #4]
 801c02c:	881b      	ldrh	r3, [r3, #0]
 801c02e:	8113      	strh	r3, [r2, #8]
			break;
 801c030:	e278      	b.n	801c524 <problem_fetch+0x1ae60>
		case 798 :
			strcpy(p->name,"GUNTER");
 801c032:	687b      	ldr	r3, [r7, #4]
 801c034:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801c038:	4a77      	ldr	r2, [pc, #476]	; (801c218 <problem_fetch+0x1ab54>)
 801c03a:	6810      	ldr	r0, [r2, #0]
 801c03c:	6018      	str	r0, [r3, #0]
 801c03e:	8891      	ldrh	r1, [r2, #4]
 801c040:	7992      	ldrb	r2, [r2, #6]
 801c042:	8099      	strh	r1, [r3, #4]
 801c044:	719a      	strb	r2, [r3, #6]
			strcpy(p->grade,"7A");
 801c046:	687b      	ldr	r3, [r7, #4]
 801c048:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801c04c:	4a73      	ldr	r2, [pc, #460]	; (801c21c <problem_fetch+0x1ab58>)
 801c04e:	8811      	ldrh	r1, [r2, #0]
 801c050:	7892      	ldrb	r2, [r2, #2]
 801c052:	8019      	strh	r1, [r3, #0]
 801c054:	709a      	strb	r2, [r3, #2]
			p->moveSize = 6;
 801c056:	687b      	ldr	r3, [r7, #4]
 801c058:	2206      	movs	r2, #6
 801c05a:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,K,H,E,B,D");
 801c05c:	687b      	ldr	r3, [r7, #4]
 801c05e:	33a4      	adds	r3, #164	; 0xa4
 801c060:	4a6f      	ldr	r2, [pc, #444]	; (801c220 <problem_fetch+0x1ab5c>)
 801c062:	461c      	mov	r4, r3
 801c064:	4613      	mov	r3, r2
 801c066:	cb07      	ldmia	r3!, {r0, r1, r2}
 801c068:	6020      	str	r0, [r4, #0]
 801c06a:	6061      	str	r1, [r4, #4]
 801c06c:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,9,10,12,15,18");
 801c06e:	687b      	ldr	r3, [r7, #4]
 801c070:	3304      	adds	r3, #4
 801c072:	4a6c      	ldr	r2, [pc, #432]	; (801c224 <problem_fetch+0x1ab60>)
 801c074:	461c      	mov	r4, r3
 801c076:	4615      	mov	r5, r2
 801c078:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801c07a:	6020      	str	r0, [r4, #0]
 801c07c:	6061      	str	r1, [r4, #4]
 801c07e:	60a2      	str	r2, [r4, #8]
 801c080:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 801c082:	687b      	ldr	r3, [r7, #4]
 801c084:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 801c088:	4a67      	ldr	r2, [pc, #412]	; (801c228 <problem_fetch+0x1ab64>)
 801c08a:	461c      	mov	r4, r3
 801c08c:	4613      	mov	r3, r2
 801c08e:	cb07      	ldmia	r3!, {r0, r1, r2}
 801c090:	6020      	str	r0, [r4, #0]
 801c092:	6061      	str	r1, [r4, #4]
 801c094:	60a2      	str	r2, [r4, #8]
			break;
 801c096:	e245      	b.n	801c524 <problem_fetch+0x1ae60>
		case 799 :
			strcpy(p->name,"MAN WALKS DOWN THE STREET");
 801c098:	687b      	ldr	r3, [r7, #4]
 801c09a:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801c09e:	4a63      	ldr	r2, [pc, #396]	; (801c22c <problem_fetch+0x1ab68>)
 801c0a0:	461d      	mov	r5, r3
 801c0a2:	4614      	mov	r4, r2
 801c0a4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801c0a6:	6028      	str	r0, [r5, #0]
 801c0a8:	6069      	str	r1, [r5, #4]
 801c0aa:	60aa      	str	r2, [r5, #8]
 801c0ac:	60eb      	str	r3, [r5, #12]
 801c0ae:	cc03      	ldmia	r4!, {r0, r1}
 801c0b0:	6128      	str	r0, [r5, #16]
 801c0b2:	6169      	str	r1, [r5, #20]
 801c0b4:	8823      	ldrh	r3, [r4, #0]
 801c0b6:	832b      	strh	r3, [r5, #24]
			strcpy(p->grade,"6B+");
 801c0b8:	687b      	ldr	r3, [r7, #4]
 801c0ba:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801c0be:	4a5c      	ldr	r2, [pc, #368]	; (801c230 <problem_fetch+0x1ab6c>)
 801c0c0:	6810      	ldr	r0, [r2, #0]
 801c0c2:	6018      	str	r0, [r3, #0]
			p->moveSize = 8;
 801c0c4:	687b      	ldr	r3, [r7, #4]
 801c0c6:	2208      	movs	r2, #8
 801c0c8:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"E,H,E,B,E,B,E,A");
 801c0ca:	687b      	ldr	r3, [r7, #4]
 801c0cc:	33a4      	adds	r3, #164	; 0xa4
 801c0ce:	4a59      	ldr	r2, [pc, #356]	; (801c234 <problem_fetch+0x1ab70>)
 801c0d0:	461c      	mov	r4, r3
 801c0d2:	4615      	mov	r5, r2
 801c0d4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801c0d6:	6020      	str	r0, [r4, #0]
 801c0d8:	6061      	str	r1, [r4, #4]
 801c0da:	60a2      	str	r2, [r4, #8]
 801c0dc:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"6,5,8,10,12,15,16,18");
 801c0de:	687b      	ldr	r3, [r7, #4]
 801c0e0:	3304      	adds	r3, #4
 801c0e2:	4a55      	ldr	r2, [pc, #340]	; (801c238 <problem_fetch+0x1ab74>)
 801c0e4:	461d      	mov	r5, r3
 801c0e6:	4614      	mov	r4, r2
 801c0e8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801c0ea:	6028      	str	r0, [r5, #0]
 801c0ec:	6069      	str	r1, [r5, #4]
 801c0ee:	60aa      	str	r2, [r5, #8]
 801c0f0:	60eb      	str	r3, [r5, #12]
 801c0f2:	6820      	ldr	r0, [r4, #0]
 801c0f4:	6128      	str	r0, [r5, #16]
 801c0f6:	7923      	ldrb	r3, [r4, #4]
 801c0f8:	752b      	strb	r3, [r5, #20]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,e");
 801c0fa:	687b      	ldr	r3, [r7, #4]
 801c0fc:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 801c100:	4a4e      	ldr	r2, [pc, #312]	; (801c23c <problem_fetch+0x1ab78>)
 801c102:	461c      	mov	r4, r3
 801c104:	4615      	mov	r5, r2
 801c106:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801c108:	6020      	str	r0, [r4, #0]
 801c10a:	6061      	str	r1, [r4, #4]
 801c10c:	60a2      	str	r2, [r4, #8]
 801c10e:	60e3      	str	r3, [r4, #12]
			break;
 801c110:	e208      	b.n	801c524 <problem_fetch+0x1ae60>
		case 800 :
			strcpy(p->name,"CHAD");
 801c112:	687b      	ldr	r3, [r7, #4]
 801c114:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801c118:	4a49      	ldr	r2, [pc, #292]	; (801c240 <problem_fetch+0x1ab7c>)
 801c11a:	6810      	ldr	r0, [r2, #0]
 801c11c:	6018      	str	r0, [r3, #0]
 801c11e:	7912      	ldrb	r2, [r2, #4]
 801c120:	711a      	strb	r2, [r3, #4]
			strcpy(p->grade,"7B+");
 801c122:	687b      	ldr	r3, [r7, #4]
 801c124:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801c128:	4a46      	ldr	r2, [pc, #280]	; (801c244 <problem_fetch+0x1ab80>)
 801c12a:	6810      	ldr	r0, [r2, #0]
 801c12c:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 801c12e:	687b      	ldr	r3, [r7, #4]
 801c130:	2207      	movs	r2, #7
 801c132:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"C,D,A,F,F,E,D");
 801c134:	687b      	ldr	r3, [r7, #4]
 801c136:	33a4      	adds	r3, #164	; 0xa4
 801c138:	4a43      	ldr	r2, [pc, #268]	; (801c248 <problem_fetch+0x1ab84>)
 801c13a:	461c      	mov	r4, r3
 801c13c:	4613      	mov	r3, r2
 801c13e:	cb07      	ldmia	r3!, {r0, r1, r2}
 801c140:	6020      	str	r0, [r4, #0]
 801c142:	6061      	str	r1, [r4, #4]
 801c144:	60a2      	str	r2, [r4, #8]
 801c146:	881b      	ldrh	r3, [r3, #0]
 801c148:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,7,9,11,13,16,18");
 801c14a:	687b      	ldr	r3, [r7, #4]
 801c14c:	3304      	adds	r3, #4
 801c14e:	4a3f      	ldr	r2, [pc, #252]	; (801c24c <problem_fetch+0x1ab88>)
 801c150:	461d      	mov	r5, r3
 801c152:	4614      	mov	r4, r2
 801c154:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801c156:	6028      	str	r0, [r5, #0]
 801c158:	6069      	str	r1, [r5, #4]
 801c15a:	60aa      	str	r2, [r5, #8]
 801c15c:	60eb      	str	r3, [r5, #12]
 801c15e:	8823      	ldrh	r3, [r4, #0]
 801c160:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 801c162:	687b      	ldr	r3, [r7, #4]
 801c164:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 801c168:	4a39      	ldr	r2, [pc, #228]	; (801c250 <problem_fetch+0x1ab8c>)
 801c16a:	461c      	mov	r4, r3
 801c16c:	4613      	mov	r3, r2
 801c16e:	cb07      	ldmia	r3!, {r0, r1, r2}
 801c170:	6020      	str	r0, [r4, #0]
 801c172:	6061      	str	r1, [r4, #4]
 801c174:	60a2      	str	r2, [r4, #8]
 801c176:	881b      	ldrh	r3, [r3, #0]
 801c178:	81a3      	strh	r3, [r4, #12]
			break;
 801c17a:	e1d3      	b.n	801c524 <problem_fetch+0x1ae60>
		case 801 :
			strcpy(p->name,"PROBLEM 19");
 801c17c:	687b      	ldr	r3, [r7, #4]
 801c17e:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801c182:	4934      	ldr	r1, [pc, #208]	; (801c254 <problem_fetch+0x1ab90>)
 801c184:	461a      	mov	r2, r3
 801c186:	460b      	mov	r3, r1
 801c188:	cb03      	ldmia	r3!, {r0, r1}
 801c18a:	6010      	str	r0, [r2, #0]
 801c18c:	6051      	str	r1, [r2, #4]
 801c18e:	8819      	ldrh	r1, [r3, #0]
 801c190:	789b      	ldrb	r3, [r3, #2]
 801c192:	8111      	strh	r1, [r2, #8]
 801c194:	7293      	strb	r3, [r2, #10]
			strcpy(p->grade,"6C");
 801c196:	687b      	ldr	r3, [r7, #4]
 801c198:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801c19c:	4a2e      	ldr	r2, [pc, #184]	; (801c258 <problem_fetch+0x1ab94>)
 801c19e:	8811      	ldrh	r1, [r2, #0]
 801c1a0:	7892      	ldrb	r2, [r2, #2]
 801c1a2:	8019      	strh	r1, [r3, #0]
 801c1a4:	709a      	strb	r2, [r3, #2]
			p->moveSize = 7;
 801c1a6:	687b      	ldr	r3, [r7, #4]
 801c1a8:	2207      	movs	r2, #7
 801c1aa:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,D,E,F,G,H,A");
 801c1ac:	687b      	ldr	r3, [r7, #4]
 801c1ae:	33a4      	adds	r3, #164	; 0xa4
 801c1b0:	4a2a      	ldr	r2, [pc, #168]	; (801c25c <problem_fetch+0x1ab98>)
 801c1b2:	461c      	mov	r4, r3
 801c1b4:	4613      	mov	r3, r2
 801c1b6:	cb07      	ldmia	r3!, {r0, r1, r2}
 801c1b8:	6020      	str	r0, [r4, #0]
 801c1ba:	6061      	str	r1, [r4, #4]
 801c1bc:	60a2      	str	r2, [r4, #8]
 801c1be:	881b      	ldrh	r3, [r3, #0]
 801c1c0:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,15,12,11,9,8,18");
 801c1c2:	687b      	ldr	r3, [r7, #4]
 801c1c4:	3304      	adds	r3, #4
 801c1c6:	4a26      	ldr	r2, [pc, #152]	; (801c260 <problem_fetch+0x1ab9c>)
 801c1c8:	461d      	mov	r5, r3
 801c1ca:	4614      	mov	r4, r2
 801c1cc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801c1ce:	6028      	str	r0, [r5, #0]
 801c1d0:	6069      	str	r1, [r5, #4]
 801c1d2:	60aa      	str	r2, [r5, #8]
 801c1d4:	60eb      	str	r3, [r5, #12]
 801c1d6:	8823      	ldrh	r3, [r4, #0]
 801c1d8:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 801c1da:	687b      	ldr	r3, [r7, #4]
 801c1dc:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 801c1e0:	4a1b      	ldr	r2, [pc, #108]	; (801c250 <problem_fetch+0x1ab8c>)
 801c1e2:	461c      	mov	r4, r3
 801c1e4:	4613      	mov	r3, r2
 801c1e6:	cb07      	ldmia	r3!, {r0, r1, r2}
 801c1e8:	6020      	str	r0, [r4, #0]
 801c1ea:	6061      	str	r1, [r4, #4]
 801c1ec:	60a2      	str	r2, [r4, #8]
 801c1ee:	881b      	ldrh	r3, [r3, #0]
 801c1f0:	81a3      	strh	r3, [r4, #12]
			break;
 801c1f2:	e197      	b.n	801c524 <problem_fetch+0x1ae60>
 801c1f4:	0802cc74 	.word	0x0802cc74
 801c1f8:	08024088 	.word	0x08024088
 801c1fc:	0802cc7c 	.word	0x0802cc7c
 801c200:	0802cc88 	.word	0x0802cc88
 801c204:	08023d20 	.word	0x08023d20
 801c208:	0802cc98 	.word	0x0802cc98
 801c20c:	08023f4c 	.word	0x08023f4c
 801c210:	0802cca4 	.word	0x0802cca4
 801c214:	0802ccb0 	.word	0x0802ccb0
 801c218:	0802ccc0 	.word	0x0802ccc0
 801c21c:	08023814 	.word	0x08023814
 801c220:	0802ccc8 	.word	0x0802ccc8
 801c224:	0802ccd4 	.word	0x0802ccd4
 801c228:	08023bf0 	.word	0x08023bf0
 801c22c:	0802cce4 	.word	0x0802cce4
 801c230:	08023854 	.word	0x08023854
 801c234:	0802cd00 	.word	0x0802cd00
 801c238:	0802cd10 	.word	0x0802cd10
 801c23c:	08023978 	.word	0x08023978
 801c240:	0802cd28 	.word	0x0802cd28
 801c244:	08023990 	.word	0x08023990
 801c248:	0802cd30 	.word	0x0802cd30
 801c24c:	0802cd40 	.word	0x0802cd40
 801c250:	080239dc 	.word	0x080239dc
 801c254:	0802cd54 	.word	0x0802cd54
 801c258:	08023920 	.word	0x08023920
 801c25c:	0802cd60 	.word	0x0802cd60
 801c260:	0802cd70 	.word	0x0802cd70
		case 802 :
			strcpy(p->name,"PROBLEM 17");
 801c264:	687b      	ldr	r3, [r7, #4]
 801c266:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801c26a:	49b0      	ldr	r1, [pc, #704]	; (801c52c <problem_fetch+0x1ae68>)
 801c26c:	461a      	mov	r2, r3
 801c26e:	460b      	mov	r3, r1
 801c270:	cb03      	ldmia	r3!, {r0, r1}
 801c272:	6010      	str	r0, [r2, #0]
 801c274:	6051      	str	r1, [r2, #4]
 801c276:	8819      	ldrh	r1, [r3, #0]
 801c278:	789b      	ldrb	r3, [r3, #2]
 801c27a:	8111      	strh	r1, [r2, #8]
 801c27c:	7293      	strb	r3, [r2, #10]
			strcpy(p->grade,"7A");
 801c27e:	687b      	ldr	r3, [r7, #4]
 801c280:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801c284:	4aaa      	ldr	r2, [pc, #680]	; (801c530 <problem_fetch+0x1ae6c>)
 801c286:	8811      	ldrh	r1, [r2, #0]
 801c288:	7892      	ldrb	r2, [r2, #2]
 801c28a:	8019      	strh	r1, [r3, #0]
 801c28c:	709a      	strb	r2, [r3, #2]
			p->moveSize = 7;
 801c28e:	687b      	ldr	r3, [r7, #4]
 801c290:	2207      	movs	r2, #7
 801c292:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"H,B,E,E,G,C,A");
 801c294:	687b      	ldr	r3, [r7, #4]
 801c296:	33a4      	adds	r3, #164	; 0xa4
 801c298:	4aa6      	ldr	r2, [pc, #664]	; (801c534 <problem_fetch+0x1ae70>)
 801c29a:	461c      	mov	r4, r3
 801c29c:	4613      	mov	r3, r2
 801c29e:	cb07      	ldmia	r3!, {r0, r1, r2}
 801c2a0:	6020      	str	r0, [r4, #0]
 801c2a2:	6061      	str	r1, [r4, #4]
 801c2a4:	60a2      	str	r2, [r4, #8]
 801c2a6:	881b      	ldrh	r3, [r3, #0]
 801c2a8:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,6,9,12,15,16,18");
 801c2aa:	687b      	ldr	r3, [r7, #4]
 801c2ac:	3304      	adds	r3, #4
 801c2ae:	4aa2      	ldr	r2, [pc, #648]	; (801c538 <problem_fetch+0x1ae74>)
 801c2b0:	461d      	mov	r5, r3
 801c2b2:	4614      	mov	r4, r2
 801c2b4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801c2b6:	6028      	str	r0, [r5, #0]
 801c2b8:	6069      	str	r1, [r5, #4]
 801c2ba:	60aa      	str	r2, [r5, #8]
 801c2bc:	60eb      	str	r3, [r5, #12]
 801c2be:	8823      	ldrh	r3, [r4, #0]
 801c2c0:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 801c2c2:	687b      	ldr	r3, [r7, #4]
 801c2c4:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 801c2c8:	4a9c      	ldr	r2, [pc, #624]	; (801c53c <problem_fetch+0x1ae78>)
 801c2ca:	461c      	mov	r4, r3
 801c2cc:	4613      	mov	r3, r2
 801c2ce:	cb07      	ldmia	r3!, {r0, r1, r2}
 801c2d0:	6020      	str	r0, [r4, #0]
 801c2d2:	6061      	str	r1, [r4, #4]
 801c2d4:	60a2      	str	r2, [r4, #8]
 801c2d6:	881b      	ldrh	r3, [r3, #0]
 801c2d8:	81a3      	strh	r3, [r4, #12]
			break;
 801c2da:	e123      	b.n	801c524 <problem_fetch+0x1ae60>
		case 803 :
			strcpy(p->name,"PROBLEM 12");
 801c2dc:	687b      	ldr	r3, [r7, #4]
 801c2de:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801c2e2:	4997      	ldr	r1, [pc, #604]	; (801c540 <problem_fetch+0x1ae7c>)
 801c2e4:	461a      	mov	r2, r3
 801c2e6:	460b      	mov	r3, r1
 801c2e8:	cb03      	ldmia	r3!, {r0, r1}
 801c2ea:	6010      	str	r0, [r2, #0]
 801c2ec:	6051      	str	r1, [r2, #4]
 801c2ee:	8819      	ldrh	r1, [r3, #0]
 801c2f0:	789b      	ldrb	r3, [r3, #2]
 801c2f2:	8111      	strh	r1, [r2, #8]
 801c2f4:	7293      	strb	r3, [r2, #10]
			strcpy(p->grade,"7A+");
 801c2f6:	687b      	ldr	r3, [r7, #4]
 801c2f8:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801c2fc:	4a91      	ldr	r2, [pc, #580]	; (801c544 <problem_fetch+0x1ae80>)
 801c2fe:	6810      	ldr	r0, [r2, #0]
 801c300:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 801c302:	687b      	ldr	r3, [r7, #4]
 801c304:	2206      	movs	r2, #6
 801c306:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,K,H,G,B,A");
 801c308:	687b      	ldr	r3, [r7, #4]
 801c30a:	33a4      	adds	r3, #164	; 0xa4
 801c30c:	4a8e      	ldr	r2, [pc, #568]	; (801c548 <problem_fetch+0x1ae84>)
 801c30e:	461c      	mov	r4, r3
 801c310:	4613      	mov	r3, r2
 801c312:	cb07      	ldmia	r3!, {r0, r1, r2}
 801c314:	6020      	str	r0, [r4, #0]
 801c316:	6061      	str	r1, [r4, #4]
 801c318:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"6,9,12,14,15,18");
 801c31a:	687b      	ldr	r3, [r7, #4]
 801c31c:	3304      	adds	r3, #4
 801c31e:	4a8b      	ldr	r2, [pc, #556]	; (801c54c <problem_fetch+0x1ae88>)
 801c320:	461c      	mov	r4, r3
 801c322:	4615      	mov	r5, r2
 801c324:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801c326:	6020      	str	r0, [r4, #0]
 801c328:	6061      	str	r1, [r4, #4]
 801c32a:	60a2      	str	r2, [r4, #8]
 801c32c:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 801c32e:	687b      	ldr	r3, [r7, #4]
 801c330:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 801c334:	4a86      	ldr	r2, [pc, #536]	; (801c550 <problem_fetch+0x1ae8c>)
 801c336:	461c      	mov	r4, r3
 801c338:	4613      	mov	r3, r2
 801c33a:	cb07      	ldmia	r3!, {r0, r1, r2}
 801c33c:	6020      	str	r0, [r4, #0]
 801c33e:	6061      	str	r1, [r4, #4]
 801c340:	60a2      	str	r2, [r4, #8]
			break;
 801c342:	e0ef      	b.n	801c524 <problem_fetch+0x1ae60>
		case 804 :
			strcpy(p->name,"PROBLEM 11");
 801c344:	687b      	ldr	r3, [r7, #4]
 801c346:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801c34a:	4982      	ldr	r1, [pc, #520]	; (801c554 <problem_fetch+0x1ae90>)
 801c34c:	461a      	mov	r2, r3
 801c34e:	460b      	mov	r3, r1
 801c350:	cb03      	ldmia	r3!, {r0, r1}
 801c352:	6010      	str	r0, [r2, #0]
 801c354:	6051      	str	r1, [r2, #4]
 801c356:	8819      	ldrh	r1, [r3, #0]
 801c358:	789b      	ldrb	r3, [r3, #2]
 801c35a:	8111      	strh	r1, [r2, #8]
 801c35c:	7293      	strb	r3, [r2, #10]
			strcpy(p->grade,"7A");
 801c35e:	687b      	ldr	r3, [r7, #4]
 801c360:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801c364:	4a72      	ldr	r2, [pc, #456]	; (801c530 <problem_fetch+0x1ae6c>)
 801c366:	8811      	ldrh	r1, [r2, #0]
 801c368:	7892      	ldrb	r2, [r2, #2]
 801c36a:	8019      	strh	r1, [r3, #0]
 801c36c:	709a      	strb	r2, [r3, #2]
			p->moveSize = 7;
 801c36e:	687b      	ldr	r3, [r7, #4]
 801c370:	2207      	movs	r2, #7
 801c372:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"C,B,E,B,E,E,I");
 801c374:	687b      	ldr	r3, [r7, #4]
 801c376:	33a4      	adds	r3, #164	; 0xa4
 801c378:	4a77      	ldr	r2, [pc, #476]	; (801c558 <problem_fetch+0x1ae94>)
 801c37a:	461c      	mov	r4, r3
 801c37c:	4613      	mov	r3, r2
 801c37e:	cb07      	ldmia	r3!, {r0, r1, r2}
 801c380:	6020      	str	r0, [r4, #0]
 801c382:	6061      	str	r1, [r4, #4]
 801c384:	60a2      	str	r2, [r4, #8]
 801c386:	881b      	ldrh	r3, [r3, #0]
 801c388:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,6,8,10,14,16,18");
 801c38a:	687b      	ldr	r3, [r7, #4]
 801c38c:	3304      	adds	r3, #4
 801c38e:	4a73      	ldr	r2, [pc, #460]	; (801c55c <problem_fetch+0x1ae98>)
 801c390:	461d      	mov	r5, r3
 801c392:	4614      	mov	r4, r2
 801c394:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801c396:	6028      	str	r0, [r5, #0]
 801c398:	6069      	str	r1, [r5, #4]
 801c39a:	60aa      	str	r2, [r5, #8]
 801c39c:	60eb      	str	r3, [r5, #12]
 801c39e:	8823      	ldrh	r3, [r4, #0]
 801c3a0:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,s,d,d,d,d,e");
 801c3a2:	687b      	ldr	r3, [r7, #4]
 801c3a4:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 801c3a8:	4a6d      	ldr	r2, [pc, #436]	; (801c560 <problem_fetch+0x1ae9c>)
 801c3aa:	461c      	mov	r4, r3
 801c3ac:	4613      	mov	r3, r2
 801c3ae:	cb07      	ldmia	r3!, {r0, r1, r2}
 801c3b0:	6020      	str	r0, [r4, #0]
 801c3b2:	6061      	str	r1, [r4, #4]
 801c3b4:	60a2      	str	r2, [r4, #8]
 801c3b6:	881b      	ldrh	r3, [r3, #0]
 801c3b8:	81a3      	strh	r3, [r4, #12]
			break;
 801c3ba:	e0b3      	b.n	801c524 <problem_fetch+0x1ae60>
		case 805 :
			strcpy(p->name,"PROBLEM 5");
 801c3bc:	687b      	ldr	r3, [r7, #4]
 801c3be:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801c3c2:	4968      	ldr	r1, [pc, #416]	; (801c564 <problem_fetch+0x1aea0>)
 801c3c4:	461a      	mov	r2, r3
 801c3c6:	460b      	mov	r3, r1
 801c3c8:	cb03      	ldmia	r3!, {r0, r1}
 801c3ca:	6010      	str	r0, [r2, #0]
 801c3cc:	6051      	str	r1, [r2, #4]
 801c3ce:	881b      	ldrh	r3, [r3, #0]
 801c3d0:	8113      	strh	r3, [r2, #8]
			strcpy(p->grade,"7A");
 801c3d2:	687b      	ldr	r3, [r7, #4]
 801c3d4:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801c3d8:	4a55      	ldr	r2, [pc, #340]	; (801c530 <problem_fetch+0x1ae6c>)
 801c3da:	8811      	ldrh	r1, [r2, #0]
 801c3dc:	7892      	ldrb	r2, [r2, #2]
 801c3de:	8019      	strh	r1, [r3, #0]
 801c3e0:	709a      	strb	r2, [r3, #2]
			p->moveSize = 8;
 801c3e2:	687b      	ldr	r3, [r7, #4]
 801c3e4:	2208      	movs	r2, #8
 801c3e6:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"C,D,A,F,F,I,E,D");
 801c3e8:	687b      	ldr	r3, [r7, #4]
 801c3ea:	33a4      	adds	r3, #164	; 0xa4
 801c3ec:	4a5e      	ldr	r2, [pc, #376]	; (801c568 <problem_fetch+0x1aea4>)
 801c3ee:	461c      	mov	r4, r3
 801c3f0:	4615      	mov	r5, r2
 801c3f2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801c3f4:	6020      	str	r0, [r4, #0]
 801c3f6:	6061      	str	r1, [r4, #4]
 801c3f8:	60a2      	str	r2, [r4, #8]
 801c3fa:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,7,9,11,13,14,16,18");
 801c3fc:	687b      	ldr	r3, [r7, #4]
 801c3fe:	3304      	adds	r3, #4
 801c400:	4a5a      	ldr	r2, [pc, #360]	; (801c56c <problem_fetch+0x1aea8>)
 801c402:	461d      	mov	r5, r3
 801c404:	4614      	mov	r4, r2
 801c406:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801c408:	6028      	str	r0, [r5, #0]
 801c40a:	6069      	str	r1, [r5, #4]
 801c40c:	60aa      	str	r2, [r5, #8]
 801c40e:	60eb      	str	r3, [r5, #12]
 801c410:	6820      	ldr	r0, [r4, #0]
 801c412:	6128      	str	r0, [r5, #16]
 801c414:	7923      	ldrb	r3, [r4, #4]
 801c416:	752b      	strb	r3, [r5, #20]
			strcpy(p->startFinish,"s,d,d,d,d,d,d,e");
 801c418:	687b      	ldr	r3, [r7, #4]
 801c41a:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 801c41e:	4a54      	ldr	r2, [pc, #336]	; (801c570 <problem_fetch+0x1aeac>)
 801c420:	461c      	mov	r4, r3
 801c422:	4615      	mov	r5, r2
 801c424:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801c426:	6020      	str	r0, [r4, #0]
 801c428:	6061      	str	r1, [r4, #4]
 801c42a:	60a2      	str	r2, [r4, #8]
 801c42c:	60e3      	str	r3, [r4, #12]
			break;
 801c42e:	e079      	b.n	801c524 <problem_fetch+0x1ae60>
		case 806 :
			strcpy(p->name,"HARD TIMES");
 801c430:	687b      	ldr	r3, [r7, #4]
 801c432:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801c436:	494f      	ldr	r1, [pc, #316]	; (801c574 <problem_fetch+0x1aeb0>)
 801c438:	461a      	mov	r2, r3
 801c43a:	460b      	mov	r3, r1
 801c43c:	cb03      	ldmia	r3!, {r0, r1}
 801c43e:	6010      	str	r0, [r2, #0]
 801c440:	6051      	str	r1, [r2, #4]
 801c442:	8819      	ldrh	r1, [r3, #0]
 801c444:	789b      	ldrb	r3, [r3, #2]
 801c446:	8111      	strh	r1, [r2, #8]
 801c448:	7293      	strb	r3, [r2, #10]
			strcpy(p->grade,"7A");
 801c44a:	687b      	ldr	r3, [r7, #4]
 801c44c:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801c450:	4a37      	ldr	r2, [pc, #220]	; (801c530 <problem_fetch+0x1ae6c>)
 801c452:	8811      	ldrh	r1, [r2, #0]
 801c454:	7892      	ldrb	r2, [r2, #2]
 801c456:	8019      	strh	r1, [r3, #0]
 801c458:	709a      	strb	r2, [r3, #2]
			p->moveSize = 8;
 801c45a:	687b      	ldr	r3, [r7, #4]
 801c45c:	2208      	movs	r2, #8
 801c45e:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"B,E,E,E,E,G,I,J");
 801c460:	687b      	ldr	r3, [r7, #4]
 801c462:	33a4      	adds	r3, #164	; 0xa4
 801c464:	4a44      	ldr	r2, [pc, #272]	; (801c578 <problem_fetch+0x1aeb4>)
 801c466:	461c      	mov	r4, r3
 801c468:	4615      	mov	r5, r2
 801c46a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801c46c:	6020      	str	r0, [r4, #0]
 801c46e:	6061      	str	r1, [r4, #4]
 801c470:	60a2      	str	r2, [r4, #8]
 801c472:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"10,6,8,12,16,4,18,5");
 801c474:	687b      	ldr	r3, [r7, #4]
 801c476:	3304      	adds	r3, #4
 801c478:	4a40      	ldr	r2, [pc, #256]	; (801c57c <problem_fetch+0x1aeb8>)
 801c47a:	461d      	mov	r5, r3
 801c47c:	4614      	mov	r4, r2
 801c47e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801c480:	6028      	str	r0, [r5, #0]
 801c482:	6069      	str	r1, [r5, #4]
 801c484:	60aa      	str	r2, [r5, #8]
 801c486:	60eb      	str	r3, [r5, #12]
 801c488:	6820      	ldr	r0, [r4, #0]
 801c48a:	6128      	str	r0, [r5, #16]
			strcpy(p->startFinish,"d,d,d,d,d,s,e,s");
 801c48c:	687b      	ldr	r3, [r7, #4]
 801c48e:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 801c492:	4a3b      	ldr	r2, [pc, #236]	; (801c580 <problem_fetch+0x1aebc>)
 801c494:	461c      	mov	r4, r3
 801c496:	4615      	mov	r5, r2
 801c498:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801c49a:	6020      	str	r0, [r4, #0]
 801c49c:	6061      	str	r1, [r4, #4]
 801c49e:	60a2      	str	r2, [r4, #8]
 801c4a0:	60e3      	str	r3, [r4, #12]
			break;
 801c4a2:	e03f      	b.n	801c524 <problem_fetch+0x1ae60>
		case 807 :
			strcpy(p->name,"FAR FROM THE MADDING CROWD");
 801c4a4:	687b      	ldr	r3, [r7, #4]
 801c4a6:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801c4aa:	4a36      	ldr	r2, [pc, #216]	; (801c584 <problem_fetch+0x1aec0>)
 801c4ac:	461d      	mov	r5, r3
 801c4ae:	4614      	mov	r4, r2
 801c4b0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801c4b2:	6028      	str	r0, [r5, #0]
 801c4b4:	6069      	str	r1, [r5, #4]
 801c4b6:	60aa      	str	r2, [r5, #8]
 801c4b8:	60eb      	str	r3, [r5, #12]
 801c4ba:	cc03      	ldmia	r4!, {r0, r1}
 801c4bc:	6128      	str	r0, [r5, #16]
 801c4be:	6169      	str	r1, [r5, #20]
 801c4c0:	8823      	ldrh	r3, [r4, #0]
 801c4c2:	78a2      	ldrb	r2, [r4, #2]
 801c4c4:	832b      	strh	r3, [r5, #24]
 801c4c6:	4613      	mov	r3, r2
 801c4c8:	76ab      	strb	r3, [r5, #26]
			strcpy(p->grade,"6B+");
 801c4ca:	687b      	ldr	r3, [r7, #4]
 801c4cc:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801c4d0:	4a2d      	ldr	r2, [pc, #180]	; (801c588 <problem_fetch+0x1aec4>)
 801c4d2:	6810      	ldr	r0, [r2, #0]
 801c4d4:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 801c4d6:	687b      	ldr	r3, [r7, #4]
 801c4d8:	2207      	movs	r2, #7
 801c4da:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"E,C,E,F,C,D,D");
 801c4dc:	687b      	ldr	r3, [r7, #4]
 801c4de:	33a4      	adds	r3, #164	; 0xa4
 801c4e0:	4a2a      	ldr	r2, [pc, #168]	; (801c58c <problem_fetch+0x1aec8>)
 801c4e2:	461c      	mov	r4, r3
 801c4e4:	4613      	mov	r3, r2
 801c4e6:	cb07      	ldmia	r3!, {r0, r1, r2}
 801c4e8:	6020      	str	r0, [r4, #0]
 801c4ea:	6061      	str	r1, [r4, #4]
 801c4ec:	60a2      	str	r2, [r4, #8]
 801c4ee:	881b      	ldrh	r3, [r3, #0]
 801c4f0:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"6,5,8,11,13,15,18");
 801c4f2:	687b      	ldr	r3, [r7, #4]
 801c4f4:	3304      	adds	r3, #4
 801c4f6:	4a26      	ldr	r2, [pc, #152]	; (801c590 <problem_fetch+0x1aecc>)
 801c4f8:	461d      	mov	r5, r3
 801c4fa:	4614      	mov	r4, r2
 801c4fc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801c4fe:	6028      	str	r0, [r5, #0]
 801c500:	6069      	str	r1, [r5, #4]
 801c502:	60aa      	str	r2, [r5, #8]
 801c504:	60eb      	str	r3, [r5, #12]
 801c506:	8823      	ldrh	r3, [r4, #0]
 801c508:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,s,d,d,d,d,e");
 801c50a:	687b      	ldr	r3, [r7, #4]
 801c50c:	f203 13b3 	addw	r3, r3, #435	; 0x1b3
 801c510:	4a13      	ldr	r2, [pc, #76]	; (801c560 <problem_fetch+0x1ae9c>)
 801c512:	461c      	mov	r4, r3
 801c514:	4613      	mov	r3, r2
 801c516:	cb07      	ldmia	r3!, {r0, r1, r2}
 801c518:	6020      	str	r0, [r4, #0]
 801c51a:	6061      	str	r1, [r4, #4]
 801c51c:	60a2      	str	r2, [r4, #8]
 801c51e:	881b      	ldrh	r3, [r3, #0]
 801c520:	81a3      	strh	r3, [r4, #12]
			break;
 801c522:	bf00      	nop
	}
}
 801c524:	bf00      	nop
 801c526:	370c      	adds	r7, #12
 801c528:	46bd      	mov	sp, r7
 801c52a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801c52c:	0802cd84 	.word	0x0802cd84
 801c530:	08023814 	.word	0x08023814
 801c534:	0802cd90 	.word	0x0802cd90
 801c538:	0802cda0 	.word	0x0802cda0
 801c53c:	080239dc 	.word	0x080239dc
 801c540:	0802cdb4 	.word	0x0802cdb4
 801c544:	080239f4 	.word	0x080239f4
 801c548:	0802cdc0 	.word	0x0802cdc0
 801c54c:	0802cdcc 	.word	0x0802cdcc
 801c550:	08023bf0 	.word	0x08023bf0
 801c554:	0802cddc 	.word	0x0802cddc
 801c558:	08028628 	.word	0x08028628
 801c55c:	0802cde8 	.word	0x0802cde8
 801c560:	080238cc 	.word	0x080238cc
 801c564:	0802cdfc 	.word	0x0802cdfc
 801c568:	0802ce08 	.word	0x0802ce08
 801c56c:	0802ce18 	.word	0x0802ce18
 801c570:	08023a64 	.word	0x08023a64
 801c574:	0802ce30 	.word	0x0802ce30
 801c578:	0802ce3c 	.word	0x0802ce3c
 801c57c:	0802ce4c 	.word	0x0802ce4c
 801c580:	0802ce60 	.word	0x0802ce60
 801c584:	0802ce70 	.word	0x0802ce70
 801c588:	08023854 	.word	0x08023854
 801c58c:	0802ce8c 	.word	0x0802ce8c
 801c590:	0802ce9c 	.word	0x0802ce9c

0801c594 <PRINTF>:
#include <string.h>
#include <stdio.h>



void PRINTF(char str[50]){
 801c594:	b580      	push	{r7, lr}
 801c596:	b090      	sub	sp, #64	; 0x40
 801c598:	af00      	add	r7, sp, #0
 801c59a:	6078      	str	r0, [r7, #4]
  char msg[50];
  int msg_len;
  msg_len = sprintf(msg, str);
 801c59c:	f107 0308 	add.w	r3, r7, #8
 801c5a0:	6879      	ldr	r1, [r7, #4]
 801c5a2:	4618      	mov	r0, r3
 801c5a4:	f005 fbe6 	bl	8021d74 <siprintf>
 801c5a8:	63f8      	str	r0, [r7, #60]	; 0x3c
  HAL_UART_Transmit(&huart2, (uint8_t *)msg, msg_len, 5000);
 801c5aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801c5ac:	b29a      	uxth	r2, r3
 801c5ae:	f107 0108 	add.w	r1, r7, #8
 801c5b2:	f241 3388 	movw	r3, #5000	; 0x1388
 801c5b6:	4803      	ldr	r0, [pc, #12]	; (801c5c4 <PRINTF+0x30>)
 801c5b8:	f004 fc7f 	bl	8020eba <HAL_UART_Transmit>
}
 801c5bc:	bf00      	nop
 801c5be:	3740      	adds	r7, #64	; 0x40
 801c5c0:	46bd      	mov	sp, r7
 801c5c2:	bd80      	pop	{r7, pc}
 801c5c4:	200055f8 	.word	0x200055f8

0801c5c8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 801c5c8:	b580      	push	{r7, lr}
 801c5ca:	b082      	sub	sp, #8
 801c5cc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 801c5ce:	2300      	movs	r3, #0
 801c5d0:	607b      	str	r3, [r7, #4]
 801c5d2:	4b10      	ldr	r3, [pc, #64]	; (801c614 <MX_DMA_Init+0x4c>)
 801c5d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c5d6:	4a0f      	ldr	r2, [pc, #60]	; (801c614 <MX_DMA_Init+0x4c>)
 801c5d8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 801c5dc:	6313      	str	r3, [r2, #48]	; 0x30
 801c5de:	4b0d      	ldr	r3, [pc, #52]	; (801c614 <MX_DMA_Init+0x4c>)
 801c5e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c5e2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 801c5e6:	607b      	str	r3, [r7, #4]
 801c5e8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 801c5ea:	2200      	movs	r2, #0
 801c5ec:	2100      	movs	r1, #0
 801c5ee:	200f      	movs	r0, #15
 801c5f0:	f001 fc15 	bl	801de1e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 801c5f4:	200f      	movs	r0, #15
 801c5f6:	f001 fc2e 	bl	801de56 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 801c5fa:	2200      	movs	r2, #0
 801c5fc:	2100      	movs	r1, #0
 801c5fe:	2010      	movs	r0, #16
 801c600:	f001 fc0d 	bl	801de1e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 801c604:	2010      	movs	r0, #16
 801c606:	f001 fc26 	bl	801de56 <HAL_NVIC_EnableIRQ>

}
 801c60a:	bf00      	nop
 801c60c:	3708      	adds	r7, #8
 801c60e:	46bd      	mov	sp, r7
 801c610:	bd80      	pop	{r7, pc}
 801c612:	bf00      	nop
 801c614:	40023800 	.word	0x40023800

0801c618 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 801c618:	b580      	push	{r7, lr}
 801c61a:	b08a      	sub	sp, #40	; 0x28
 801c61c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801c61e:	f107 0314 	add.w	r3, r7, #20
 801c622:	2200      	movs	r2, #0
 801c624:	601a      	str	r2, [r3, #0]
 801c626:	605a      	str	r2, [r3, #4]
 801c628:	609a      	str	r2, [r3, #8]
 801c62a:	60da      	str	r2, [r3, #12]
 801c62c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 801c62e:	2300      	movs	r3, #0
 801c630:	613b      	str	r3, [r7, #16]
 801c632:	4b52      	ldr	r3, [pc, #328]	; (801c77c <MX_GPIO_Init+0x164>)
 801c634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c636:	4a51      	ldr	r2, [pc, #324]	; (801c77c <MX_GPIO_Init+0x164>)
 801c638:	f043 0304 	orr.w	r3, r3, #4
 801c63c:	6313      	str	r3, [r2, #48]	; 0x30
 801c63e:	4b4f      	ldr	r3, [pc, #316]	; (801c77c <MX_GPIO_Init+0x164>)
 801c640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c642:	f003 0304 	and.w	r3, r3, #4
 801c646:	613b      	str	r3, [r7, #16]
 801c648:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 801c64a:	2300      	movs	r3, #0
 801c64c:	60fb      	str	r3, [r7, #12]
 801c64e:	4b4b      	ldr	r3, [pc, #300]	; (801c77c <MX_GPIO_Init+0x164>)
 801c650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c652:	4a4a      	ldr	r2, [pc, #296]	; (801c77c <MX_GPIO_Init+0x164>)
 801c654:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801c658:	6313      	str	r3, [r2, #48]	; 0x30
 801c65a:	4b48      	ldr	r3, [pc, #288]	; (801c77c <MX_GPIO_Init+0x164>)
 801c65c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c65e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801c662:	60fb      	str	r3, [r7, #12]
 801c664:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 801c666:	2300      	movs	r3, #0
 801c668:	60bb      	str	r3, [r7, #8]
 801c66a:	4b44      	ldr	r3, [pc, #272]	; (801c77c <MX_GPIO_Init+0x164>)
 801c66c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c66e:	4a43      	ldr	r2, [pc, #268]	; (801c77c <MX_GPIO_Init+0x164>)
 801c670:	f043 0301 	orr.w	r3, r3, #1
 801c674:	6313      	str	r3, [r2, #48]	; 0x30
 801c676:	4b41      	ldr	r3, [pc, #260]	; (801c77c <MX_GPIO_Init+0x164>)
 801c678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c67a:	f003 0301 	and.w	r3, r3, #1
 801c67e:	60bb      	str	r3, [r7, #8]
 801c680:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 801c682:	2300      	movs	r3, #0
 801c684:	607b      	str	r3, [r7, #4]
 801c686:	4b3d      	ldr	r3, [pc, #244]	; (801c77c <MX_GPIO_Init+0x164>)
 801c688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c68a:	4a3c      	ldr	r2, [pc, #240]	; (801c77c <MX_GPIO_Init+0x164>)
 801c68c:	f043 0302 	orr.w	r3, r3, #2
 801c690:	6313      	str	r3, [r2, #48]	; 0x30
 801c692:	4b3a      	ldr	r3, [pc, #232]	; (801c77c <MX_GPIO_Init+0x164>)
 801c694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c696:	f003 0302 	and.w	r3, r3, #2
 801c69a:	607b      	str	r3, [r7, #4]
 801c69c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|GPIO_PIN_9, GPIO_PIN_RESET);
 801c69e:	2200      	movs	r2, #0
 801c6a0:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 801c6a4:	4836      	ldr	r0, [pc, #216]	; (801c780 <MX_GPIO_Init+0x168>)
 801c6a6:	f002 f91b 	bl	801e8e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 801c6aa:	2200      	movs	r2, #0
 801c6ac:	2180      	movs	r1, #128	; 0x80
 801c6ae:	4835      	ldr	r0, [pc, #212]	; (801c784 <MX_GPIO_Init+0x16c>)
 801c6b0:	f002 f916 	bl	801e8e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 801c6b4:	2200      	movs	r2, #0
 801c6b6:	f44f 7140 	mov.w	r1, #768	; 0x300
 801c6ba:	4833      	ldr	r0, [pc, #204]	; (801c788 <MX_GPIO_Init+0x170>)
 801c6bc:	f002 f910 	bl	801e8e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 801c6c0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 801c6c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 801c6c6:	4b31      	ldr	r3, [pc, #196]	; (801c78c <MX_GPIO_Init+0x174>)
 801c6c8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 801c6ca:	2300      	movs	r3, #0
 801c6cc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 801c6ce:	f107 0314 	add.w	r3, r7, #20
 801c6d2:	4619      	mov	r1, r3
 801c6d4:	482b      	ldr	r0, [pc, #172]	; (801c784 <MX_GPIO_Init+0x16c>)
 801c6d6:	f001 ff69 	bl	801e5ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_9;
 801c6da:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 801c6de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 801c6e0:	2301      	movs	r3, #1
 801c6e2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 801c6e4:	2300      	movs	r3, #0
 801c6e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801c6e8:	2300      	movs	r3, #0
 801c6ea:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 801c6ec:	f107 0314 	add.w	r3, r7, #20
 801c6f0:	4619      	mov	r1, r3
 801c6f2:	4823      	ldr	r0, [pc, #140]	; (801c780 <MX_GPIO_Init+0x168>)
 801c6f4:	f001 ff5a 	bl	801e5ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 801c6f8:	2380      	movs	r3, #128	; 0x80
 801c6fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 801c6fc:	2301      	movs	r3, #1
 801c6fe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 801c700:	2300      	movs	r3, #0
 801c702:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801c704:	2300      	movs	r3, #0
 801c706:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 801c708:	f107 0314 	add.w	r3, r7, #20
 801c70c:	4619      	mov	r1, r3
 801c70e:	481d      	ldr	r0, [pc, #116]	; (801c784 <MX_GPIO_Init+0x16c>)
 801c710:	f001 ff4c 	bl	801e5ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 801c714:	f44f 7340 	mov.w	r3, #768	; 0x300
 801c718:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 801c71a:	2301      	movs	r3, #1
 801c71c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 801c71e:	2300      	movs	r3, #0
 801c720:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801c722:	2300      	movs	r3, #0
 801c724:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801c726:	f107 0314 	add.w	r3, r7, #20
 801c72a:	4619      	mov	r1, r3
 801c72c:	4816      	ldr	r0, [pc, #88]	; (801c788 <MX_GPIO_Init+0x170>)
 801c72e:	f001 ff3d 	bl	801e5ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 801c732:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801c736:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 801c738:	2300      	movs	r3, #0
 801c73a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 801c73c:	2301      	movs	r3, #1
 801c73e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801c740:	f107 0314 	add.w	r3, r7, #20
 801c744:	4619      	mov	r1, r3
 801c746:	4810      	ldr	r0, [pc, #64]	; (801c788 <MX_GPIO_Init+0x170>)
 801c748:	f001 ff30 	bl	801e5ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 801c74c:	2338      	movs	r3, #56	; 0x38
 801c74e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 801c750:	2300      	movs	r3, #0
 801c752:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 801c754:	2301      	movs	r3, #1
 801c756:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 801c758:	f107 0314 	add.w	r3, r7, #20
 801c75c:	4619      	mov	r1, r3
 801c75e:	4808      	ldr	r0, [pc, #32]	; (801c780 <MX_GPIO_Init+0x168>)
 801c760:	f001 ff24 	bl	801e5ac <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 801c764:	2200      	movs	r2, #0
 801c766:	2100      	movs	r1, #0
 801c768:	2028      	movs	r0, #40	; 0x28
 801c76a:	f001 fb58 	bl	801de1e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 801c76e:	2028      	movs	r0, #40	; 0x28
 801c770:	f001 fb71 	bl	801de56 <HAL_NVIC_EnableIRQ>

}
 801c774:	bf00      	nop
 801c776:	3728      	adds	r7, #40	; 0x28
 801c778:	46bd      	mov	sp, r7
 801c77a:	bd80      	pop	{r7, pc}
 801c77c:	40023800 	.word	0x40023800
 801c780:	40020400 	.word	0x40020400
 801c784:	40020800 	.word	0x40020800
 801c788:	40020000 	.word	0x40020000
 801c78c:	10210000 	.word	0x10210000

0801c790 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 801c790:	b580      	push	{r7, lr}
 801c792:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 801c794:	4b12      	ldr	r3, [pc, #72]	; (801c7e0 <MX_I2C1_Init+0x50>)
 801c796:	4a13      	ldr	r2, [pc, #76]	; (801c7e4 <MX_I2C1_Init+0x54>)
 801c798:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 801c79a:	4b11      	ldr	r3, [pc, #68]	; (801c7e0 <MX_I2C1_Init+0x50>)
 801c79c:	4a12      	ldr	r2, [pc, #72]	; (801c7e8 <MX_I2C1_Init+0x58>)
 801c79e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 801c7a0:	4b0f      	ldr	r3, [pc, #60]	; (801c7e0 <MX_I2C1_Init+0x50>)
 801c7a2:	2200      	movs	r2, #0
 801c7a4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 801c7a6:	4b0e      	ldr	r3, [pc, #56]	; (801c7e0 <MX_I2C1_Init+0x50>)
 801c7a8:	2200      	movs	r2, #0
 801c7aa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 801c7ac:	4b0c      	ldr	r3, [pc, #48]	; (801c7e0 <MX_I2C1_Init+0x50>)
 801c7ae:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 801c7b2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 801c7b4:	4b0a      	ldr	r3, [pc, #40]	; (801c7e0 <MX_I2C1_Init+0x50>)
 801c7b6:	2200      	movs	r2, #0
 801c7b8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 801c7ba:	4b09      	ldr	r3, [pc, #36]	; (801c7e0 <MX_I2C1_Init+0x50>)
 801c7bc:	2200      	movs	r2, #0
 801c7be:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 801c7c0:	4b07      	ldr	r3, [pc, #28]	; (801c7e0 <MX_I2C1_Init+0x50>)
 801c7c2:	2200      	movs	r2, #0
 801c7c4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 801c7c6:	4b06      	ldr	r3, [pc, #24]	; (801c7e0 <MX_I2C1_Init+0x50>)
 801c7c8:	2200      	movs	r2, #0
 801c7ca:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 801c7cc:	4804      	ldr	r0, [pc, #16]	; (801c7e0 <MX_I2C1_Init+0x50>)
 801c7ce:	f002 f8b9 	bl	801e944 <HAL_I2C_Init>
 801c7d2:	4603      	mov	r3, r0
 801c7d4:	2b00      	cmp	r3, #0
 801c7d6:	d001      	beq.n	801c7dc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 801c7d8:	f000 fdba 	bl	801d350 <Error_Handler>
  }

}
 801c7dc:	bf00      	nop
 801c7de:	bd80      	pop	{r7, pc}
 801c7e0:	20005424 	.word	0x20005424
 801c7e4:	40005400 	.word	0x40005400
 801c7e8:	000186a0 	.word	0x000186a0

0801c7ec <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 801c7ec:	b580      	push	{r7, lr}
 801c7ee:	b08a      	sub	sp, #40	; 0x28
 801c7f0:	af00      	add	r7, sp, #0
 801c7f2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801c7f4:	f107 0314 	add.w	r3, r7, #20
 801c7f8:	2200      	movs	r2, #0
 801c7fa:	601a      	str	r2, [r3, #0]
 801c7fc:	605a      	str	r2, [r3, #4]
 801c7fe:	609a      	str	r2, [r3, #8]
 801c800:	60da      	str	r2, [r3, #12]
 801c802:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 801c804:	687b      	ldr	r3, [r7, #4]
 801c806:	681b      	ldr	r3, [r3, #0]
 801c808:	4a19      	ldr	r2, [pc, #100]	; (801c870 <HAL_I2C_MspInit+0x84>)
 801c80a:	4293      	cmp	r3, r2
 801c80c:	d12b      	bne.n	801c866 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 801c80e:	2300      	movs	r3, #0
 801c810:	613b      	str	r3, [r7, #16]
 801c812:	4b18      	ldr	r3, [pc, #96]	; (801c874 <HAL_I2C_MspInit+0x88>)
 801c814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c816:	4a17      	ldr	r2, [pc, #92]	; (801c874 <HAL_I2C_MspInit+0x88>)
 801c818:	f043 0302 	orr.w	r3, r3, #2
 801c81c:	6313      	str	r3, [r2, #48]	; 0x30
 801c81e:	4b15      	ldr	r3, [pc, #84]	; (801c874 <HAL_I2C_MspInit+0x88>)
 801c820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c822:	f003 0302 	and.w	r3, r3, #2
 801c826:	613b      	str	r3, [r7, #16]
 801c828:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 801c82a:	23c0      	movs	r3, #192	; 0xc0
 801c82c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 801c82e:	2312      	movs	r3, #18
 801c830:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 801c832:	2301      	movs	r3, #1
 801c834:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801c836:	2303      	movs	r3, #3
 801c838:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 801c83a:	2304      	movs	r3, #4
 801c83c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 801c83e:	f107 0314 	add.w	r3, r7, #20
 801c842:	4619      	mov	r1, r3
 801c844:	480c      	ldr	r0, [pc, #48]	; (801c878 <HAL_I2C_MspInit+0x8c>)
 801c846:	f001 feb1 	bl	801e5ac <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 801c84a:	2300      	movs	r3, #0
 801c84c:	60fb      	str	r3, [r7, #12]
 801c84e:	4b09      	ldr	r3, [pc, #36]	; (801c874 <HAL_I2C_MspInit+0x88>)
 801c850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801c852:	4a08      	ldr	r2, [pc, #32]	; (801c874 <HAL_I2C_MspInit+0x88>)
 801c854:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 801c858:	6413      	str	r3, [r2, #64]	; 0x40
 801c85a:	4b06      	ldr	r3, [pc, #24]	; (801c874 <HAL_I2C_MspInit+0x88>)
 801c85c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801c85e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 801c862:	60fb      	str	r3, [r7, #12]
 801c864:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 801c866:	bf00      	nop
 801c868:	3728      	adds	r7, #40	; 0x28
 801c86a:	46bd      	mov	sp, r7
 801c86c:	bd80      	pop	{r7, pc}
 801c86e:	bf00      	nop
 801c870:	40005400 	.word	0x40005400
 801c874:	40023800 	.word	0x40023800
 801c878:	40020400 	.word	0x40020400

0801c87c <read_GPIO>:

//#define debug_output



uint8_t read_GPIO(){
 801c87c:	b580      	push	{r7, lr}
 801c87e:	af00      	add	r7, sp, #0

	if(!HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_4)){			// if GPIO is low
 801c880:	2110      	movs	r1, #16
 801c882:	4824      	ldr	r0, [pc, #144]	; (801c914 <read_GPIO+0x98>)
 801c884:	f002 f814 	bl	801e8b0 <HAL_GPIO_ReadPin>
 801c888:	4603      	mov	r3, r0
 801c88a:	2b00      	cmp	r3, #0
 801c88c:	d109      	bne.n	801c8a2 <read_GPIO+0x26>
		while(!HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_4));	// wait till GPIO return high
 801c88e:	bf00      	nop
 801c890:	2110      	movs	r1, #16
 801c892:	4820      	ldr	r0, [pc, #128]	; (801c914 <read_GPIO+0x98>)
 801c894:	f002 f80c 	bl	801e8b0 <HAL_GPIO_ReadPin>
 801c898:	4603      	mov	r3, r0
 801c89a:	2b00      	cmp	r3, #0
 801c89c:	d0f8      	beq.n	801c890 <read_GPIO+0x14>
		return 1;
 801c89e:	2301      	movs	r3, #1
 801c8a0:	e035      	b.n	801c90e <read_GPIO+0x92>
	}
	if(!HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5)){
 801c8a2:	2120      	movs	r1, #32
 801c8a4:	481b      	ldr	r0, [pc, #108]	; (801c914 <read_GPIO+0x98>)
 801c8a6:	f002 f803 	bl	801e8b0 <HAL_GPIO_ReadPin>
 801c8aa:	4603      	mov	r3, r0
 801c8ac:	2b00      	cmp	r3, #0
 801c8ae:	d109      	bne.n	801c8c4 <read_GPIO+0x48>
		while(!HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5));
 801c8b0:	bf00      	nop
 801c8b2:	2120      	movs	r1, #32
 801c8b4:	4817      	ldr	r0, [pc, #92]	; (801c914 <read_GPIO+0x98>)
 801c8b6:	f001 fffb 	bl	801e8b0 <HAL_GPIO_ReadPin>
 801c8ba:	4603      	mov	r3, r0
 801c8bc:	2b00      	cmp	r3, #0
 801c8be:	d0f8      	beq.n	801c8b2 <read_GPIO+0x36>
		return 2;
 801c8c0:	2302      	movs	r3, #2
 801c8c2:	e024      	b.n	801c90e <read_GPIO+0x92>
	}
	if(!HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_3)){
 801c8c4:	2108      	movs	r1, #8
 801c8c6:	4813      	ldr	r0, [pc, #76]	; (801c914 <read_GPIO+0x98>)
 801c8c8:	f001 fff2 	bl	801e8b0 <HAL_GPIO_ReadPin>
 801c8cc:	4603      	mov	r3, r0
 801c8ce:	2b00      	cmp	r3, #0
 801c8d0:	d109      	bne.n	801c8e6 <read_GPIO+0x6a>
		while(!HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_3));
 801c8d2:	bf00      	nop
 801c8d4:	2108      	movs	r1, #8
 801c8d6:	480f      	ldr	r0, [pc, #60]	; (801c914 <read_GPIO+0x98>)
 801c8d8:	f001 ffea 	bl	801e8b0 <HAL_GPIO_ReadPin>
 801c8dc:	4603      	mov	r3, r0
 801c8de:	2b00      	cmp	r3, #0
 801c8e0:	d0f8      	beq.n	801c8d4 <read_GPIO+0x58>
		return 3;
 801c8e2:	2303      	movs	r3, #3
 801c8e4:	e013      	b.n	801c90e <read_GPIO+0x92>
	}
	if(!HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_10)){
 801c8e6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 801c8ea:	480b      	ldr	r0, [pc, #44]	; (801c918 <read_GPIO+0x9c>)
 801c8ec:	f001 ffe0 	bl	801e8b0 <HAL_GPIO_ReadPin>
 801c8f0:	4603      	mov	r3, r0
 801c8f2:	2b00      	cmp	r3, #0
 801c8f4:	d10a      	bne.n	801c90c <read_GPIO+0x90>
		while(!HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_10));
 801c8f6:	bf00      	nop
 801c8f8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 801c8fc:	4806      	ldr	r0, [pc, #24]	; (801c918 <read_GPIO+0x9c>)
 801c8fe:	f001 ffd7 	bl	801e8b0 <HAL_GPIO_ReadPin>
 801c902:	4603      	mov	r3, r0
 801c904:	2b00      	cmp	r3, #0
 801c906:	d0f7      	beq.n	801c8f8 <read_GPIO+0x7c>
		return 4;
 801c908:	2304      	movs	r3, #4
 801c90a:	e000      	b.n	801c90e <read_GPIO+0x92>
	}

	return 99;
 801c90c:	2363      	movs	r3, #99	; 0x63
}
 801c90e:	4618      	mov	r0, r3
 801c910:	bd80      	pop	{r7, pc}
 801c912:	bf00      	nop
 801c914:	40020400 	.word	0x40020400
 801c918:	40020000 	.word	0x40020000

0801c91c <write_GPIO>:



void write_GPIO(uint8_t riga){
 801c91c:	b580      	push	{r7, lr}
 801c91e:	b084      	sub	sp, #16
 801c920:	af00      	add	r7, sp, #0
 801c922:	4603      	mov	r3, r0
 801c924:	71fb      	strb	r3, [r7, #7]

	GPIO_PinState state_row1 = GPIO_PIN_SET;
 801c926:	2301      	movs	r3, #1
 801c928:	73fb      	strb	r3, [r7, #15]
	GPIO_PinState state_row2 = GPIO_PIN_SET;
 801c92a:	2301      	movs	r3, #1
 801c92c:	73bb      	strb	r3, [r7, #14]
	GPIO_PinState state_row3 = GPIO_PIN_SET;
 801c92e:	2301      	movs	r3, #1
 801c930:	737b      	strb	r3, [r7, #13]
	GPIO_PinState state_row4 = GPIO_PIN_SET;
 801c932:	2301      	movs	r3, #1
 801c934:	733b      	strb	r3, [r7, #12]

	if(riga==1){
 801c936:	79fb      	ldrb	r3, [r7, #7]
 801c938:	2b01      	cmp	r3, #1
 801c93a:	d102      	bne.n	801c942 <write_GPIO+0x26>
		state_row1 = GPIO_PIN_RESET;
 801c93c:	2300      	movs	r3, #0
 801c93e:	73fb      	strb	r3, [r7, #15]
 801c940:	e010      	b.n	801c964 <write_GPIO+0x48>
	}else if(riga==2){
 801c942:	79fb      	ldrb	r3, [r7, #7]
 801c944:	2b02      	cmp	r3, #2
 801c946:	d102      	bne.n	801c94e <write_GPIO+0x32>
		state_row2 = GPIO_PIN_RESET;
 801c948:	2300      	movs	r3, #0
 801c94a:	73bb      	strb	r3, [r7, #14]
 801c94c:	e00a      	b.n	801c964 <write_GPIO+0x48>
	}else if(riga==3){
 801c94e:	79fb      	ldrb	r3, [r7, #7]
 801c950:	2b03      	cmp	r3, #3
 801c952:	d102      	bne.n	801c95a <write_GPIO+0x3e>
		state_row3 = GPIO_PIN_RESET;
 801c954:	2300      	movs	r3, #0
 801c956:	737b      	strb	r3, [r7, #13]
 801c958:	e004      	b.n	801c964 <write_GPIO+0x48>
	}else if(riga==4){
 801c95a:	79fb      	ldrb	r3, [r7, #7]
 801c95c:	2b04      	cmp	r3, #4
 801c95e:	d101      	bne.n	801c964 <write_GPIO+0x48>
		state_row4 = GPIO_PIN_RESET;
 801c960:	2300      	movs	r3, #0
 801c962:	733b      	strb	r3, [r7, #12]
	}

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, state_row1);
 801c964:	7bfb      	ldrb	r3, [r7, #15]
 801c966:	461a      	mov	r2, r3
 801c968:	2180      	movs	r1, #128	; 0x80
 801c96a:	480e      	ldr	r0, [pc, #56]	; (801c9a4 <write_GPIO+0x88>)
 801c96c:	f001 ffb8 	bl	801e8e0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, state_row2);
 801c970:	7bbb      	ldrb	r3, [r7, #14]
 801c972:	461a      	mov	r2, r3
 801c974:	f44f 7100 	mov.w	r1, #512	; 0x200
 801c978:	480b      	ldr	r0, [pc, #44]	; (801c9a8 <write_GPIO+0x8c>)
 801c97a:	f001 ffb1 	bl	801e8e0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, state_row3);
 801c97e:	7b7b      	ldrb	r3, [r7, #13]
 801c980:	461a      	mov	r2, r3
 801c982:	f44f 7180 	mov.w	r1, #256	; 0x100
 801c986:	4808      	ldr	r0, [pc, #32]	; (801c9a8 <write_GPIO+0x8c>)
 801c988:	f001 ffaa 	bl	801e8e0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, state_row4);
 801c98c:	7b3b      	ldrb	r3, [r7, #12]
 801c98e:	461a      	mov	r2, r3
 801c990:	f44f 6180 	mov.w	r1, #1024	; 0x400
 801c994:	4805      	ldr	r0, [pc, #20]	; (801c9ac <write_GPIO+0x90>)
 801c996:	f001 ffa3 	bl	801e8e0 <HAL_GPIO_WritePin>
}
 801c99a:	bf00      	nop
 801c99c:	3710      	adds	r7, #16
 801c99e:	46bd      	mov	sp, r7
 801c9a0:	bd80      	pop	{r7, pc}
 801c9a2:	bf00      	nop
 801c9a4:	40020800 	.word	0x40020800
 801c9a8:	40020000 	.word	0x40020000
 801c9ac:	40020400 	.word	0x40020400

0801c9b0 <decode_key>:



uint8_t decode_key(uint8_t row, uint8_t col){
 801c9b0:	b480      	push	{r7}
 801c9b2:	b085      	sub	sp, #20
 801c9b4:	af00      	add	r7, sp, #0
 801c9b6:	4603      	mov	r3, r0
 801c9b8:	460a      	mov	r2, r1
 801c9ba:	71fb      	strb	r3, [r7, #7]
 801c9bc:	4613      	mov	r3, r2
 801c9be:	71bb      	strb	r3, [r7, #6]
	uint8_t key;

	switch(row){
 801c9c0:	79fb      	ldrb	r3, [r7, #7]
 801c9c2:	3b01      	subs	r3, #1
 801c9c4:	2b03      	cmp	r3, #3
 801c9c6:	d85f      	bhi.n	801ca88 <decode_key+0xd8>
 801c9c8:	a201      	add	r2, pc, #4	; (adr r2, 801c9d0 <decode_key+0x20>)
 801c9ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801c9ce:	bf00      	nop
 801c9d0:	0801c9e1 	.word	0x0801c9e1
 801c9d4:	0801ca0b 	.word	0x0801ca0b
 801c9d8:	0801ca35 	.word	0x0801ca35
 801c9dc:	0801ca5f 	.word	0x0801ca5f
		case(1):
			if (col==1) key=1;
 801c9e0:	79bb      	ldrb	r3, [r7, #6]
 801c9e2:	2b01      	cmp	r3, #1
 801c9e4:	d101      	bne.n	801c9ea <decode_key+0x3a>
 801c9e6:	2301      	movs	r3, #1
 801c9e8:	73fb      	strb	r3, [r7, #15]
			if (col==2) key=2;
 801c9ea:	79bb      	ldrb	r3, [r7, #6]
 801c9ec:	2b02      	cmp	r3, #2
 801c9ee:	d101      	bne.n	801c9f4 <decode_key+0x44>
 801c9f0:	2302      	movs	r3, #2
 801c9f2:	73fb      	strb	r3, [r7, #15]
			if (col==3) key=3;
 801c9f4:	79bb      	ldrb	r3, [r7, #6]
 801c9f6:	2b03      	cmp	r3, #3
 801c9f8:	d101      	bne.n	801c9fe <decode_key+0x4e>
 801c9fa:	2303      	movs	r3, #3
 801c9fc:	73fb      	strb	r3, [r7, #15]
			if (col==4) key=10;
 801c9fe:	79bb      	ldrb	r3, [r7, #6]
 801ca00:	2b04      	cmp	r3, #4
 801ca02:	d144      	bne.n	801ca8e <decode_key+0xde>
 801ca04:	230a      	movs	r3, #10
 801ca06:	73fb      	strb	r3, [r7, #15]
			break;
 801ca08:	e041      	b.n	801ca8e <decode_key+0xde>
		case(2):
			if (col==1) key=4;
 801ca0a:	79bb      	ldrb	r3, [r7, #6]
 801ca0c:	2b01      	cmp	r3, #1
 801ca0e:	d101      	bne.n	801ca14 <decode_key+0x64>
 801ca10:	2304      	movs	r3, #4
 801ca12:	73fb      	strb	r3, [r7, #15]
			if (col==2) key=5;
 801ca14:	79bb      	ldrb	r3, [r7, #6]
 801ca16:	2b02      	cmp	r3, #2
 801ca18:	d101      	bne.n	801ca1e <decode_key+0x6e>
 801ca1a:	2305      	movs	r3, #5
 801ca1c:	73fb      	strb	r3, [r7, #15]
			if (col==3) key=6;
 801ca1e:	79bb      	ldrb	r3, [r7, #6]
 801ca20:	2b03      	cmp	r3, #3
 801ca22:	d101      	bne.n	801ca28 <decode_key+0x78>
 801ca24:	2306      	movs	r3, #6
 801ca26:	73fb      	strb	r3, [r7, #15]
			if (col==4) key=20;
 801ca28:	79bb      	ldrb	r3, [r7, #6]
 801ca2a:	2b04      	cmp	r3, #4
 801ca2c:	d131      	bne.n	801ca92 <decode_key+0xe2>
 801ca2e:	2314      	movs	r3, #20
 801ca30:	73fb      	strb	r3, [r7, #15]
			break;
 801ca32:	e02e      	b.n	801ca92 <decode_key+0xe2>
		case(3):
			if (col==1) key=7;
 801ca34:	79bb      	ldrb	r3, [r7, #6]
 801ca36:	2b01      	cmp	r3, #1
 801ca38:	d101      	bne.n	801ca3e <decode_key+0x8e>
 801ca3a:	2307      	movs	r3, #7
 801ca3c:	73fb      	strb	r3, [r7, #15]
			if (col==2) key=8;
 801ca3e:	79bb      	ldrb	r3, [r7, #6]
 801ca40:	2b02      	cmp	r3, #2
 801ca42:	d101      	bne.n	801ca48 <decode_key+0x98>
 801ca44:	2308      	movs	r3, #8
 801ca46:	73fb      	strb	r3, [r7, #15]
			if (col==3) key=9;
 801ca48:	79bb      	ldrb	r3, [r7, #6]
 801ca4a:	2b03      	cmp	r3, #3
 801ca4c:	d101      	bne.n	801ca52 <decode_key+0xa2>
 801ca4e:	2309      	movs	r3, #9
 801ca50:	73fb      	strb	r3, [r7, #15]
			if (col==4) key=30;
 801ca52:	79bb      	ldrb	r3, [r7, #6]
 801ca54:	2b04      	cmp	r3, #4
 801ca56:	d11e      	bne.n	801ca96 <decode_key+0xe6>
 801ca58:	231e      	movs	r3, #30
 801ca5a:	73fb      	strb	r3, [r7, #15]
			break;
 801ca5c:	e01b      	b.n	801ca96 <decode_key+0xe6>
		case(4):
			if (col==1) key=40;
 801ca5e:	79bb      	ldrb	r3, [r7, #6]
 801ca60:	2b01      	cmp	r3, #1
 801ca62:	d101      	bne.n	801ca68 <decode_key+0xb8>
 801ca64:	2328      	movs	r3, #40	; 0x28
 801ca66:	73fb      	strb	r3, [r7, #15]
			if (col==2) key=0;
 801ca68:	79bb      	ldrb	r3, [r7, #6]
 801ca6a:	2b02      	cmp	r3, #2
 801ca6c:	d101      	bne.n	801ca72 <decode_key+0xc2>
 801ca6e:	2300      	movs	r3, #0
 801ca70:	73fb      	strb	r3, [r7, #15]
			if (col==3) key=50;
 801ca72:	79bb      	ldrb	r3, [r7, #6]
 801ca74:	2b03      	cmp	r3, #3
 801ca76:	d101      	bne.n	801ca7c <decode_key+0xcc>
 801ca78:	2332      	movs	r3, #50	; 0x32
 801ca7a:	73fb      	strb	r3, [r7, #15]
			if (col==4) key=60;
 801ca7c:	79bb      	ldrb	r3, [r7, #6]
 801ca7e:	2b04      	cmp	r3, #4
 801ca80:	d10b      	bne.n	801ca9a <decode_key+0xea>
 801ca82:	233c      	movs	r3, #60	; 0x3c
 801ca84:	73fb      	strb	r3, [r7, #15]
			break;
 801ca86:	e008      	b.n	801ca9a <decode_key+0xea>
		default:
			key=99;
 801ca88:	2363      	movs	r3, #99	; 0x63
 801ca8a:	73fb      	strb	r3, [r7, #15]
			break;
 801ca8c:	e006      	b.n	801ca9c <decode_key+0xec>
			break;
 801ca8e:	bf00      	nop
 801ca90:	e004      	b.n	801ca9c <decode_key+0xec>
			break;
 801ca92:	bf00      	nop
 801ca94:	e002      	b.n	801ca9c <decode_key+0xec>
			break;
 801ca96:	bf00      	nop
 801ca98:	e000      	b.n	801ca9c <decode_key+0xec>
			break;
 801ca9a:	bf00      	nop
	}

	return key;
 801ca9c:	7bfb      	ldrb	r3, [r7, #15]
}
 801ca9e:	4618      	mov	r0, r3
 801caa0:	3714      	adds	r7, #20
 801caa2:	46bd      	mov	sp, r7
 801caa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801caa8:	4770      	bx	lr
 801caaa:	bf00      	nop

0801caac <read_key>:



// Perform a polling on each row in order to detect the selection of a key
uint8_t read_key(){
 801caac:	b580      	push	{r7, lr}
 801caae:	b082      	sub	sp, #8
 801cab0:	af00      	add	r7, sp, #0

	uint8_t key = 99;     		// 99 is the DISCARD number
 801cab2:	2363      	movs	r3, #99	; 0x63
 801cab4:	71fb      	strb	r3, [r7, #7]
	uint8_t col_read = 99;
 801cab6:	2363      	movs	r3, #99	; 0x63
 801cab8:	71bb      	strb	r3, [r7, #6]

	// stay in polling and wait for a button to be pressed
	while(true){

		// *** FIRST row
		write_GPIO(1);								// write 4 status of row GPIO (enable GPIO of row1)
 801caba:	2001      	movs	r0, #1
 801cabc:	f7ff ff2e 	bl	801c91c <write_GPIO>
		col_read = read_GPIO();						// read 4 status of col GPIO
 801cac0:	f7ff fedc 	bl	801c87c <read_GPIO>
 801cac4:	4603      	mov	r3, r0
 801cac6:	71bb      	strb	r3, [r7, #6]
		if(col_read != 99) {
 801cac8:	79bb      	ldrb	r3, [r7, #6]
 801caca:	2b63      	cmp	r3, #99	; 0x63
 801cacc:	d008      	beq.n	801cae0 <read_key+0x34>
			key = decode_key(1, col_read);		// decode which button has been pressed
 801cace:	79bb      	ldrb	r3, [r7, #6]
 801cad0:	4619      	mov	r1, r3
 801cad2:	2001      	movs	r0, #1
 801cad4:	f7ff ff6c 	bl	801c9b0 <decode_key>
 801cad8:	4603      	mov	r3, r0
 801cada:	71fb      	strb	r3, [r7, #7]
			return key;
 801cadc:	79fb      	ldrb	r3, [r7, #7]
 801cade:	e037      	b.n	801cb50 <read_key+0xa4>
		}

		// *** SECOND row
		write_GPIO(2);
 801cae0:	2002      	movs	r0, #2
 801cae2:	f7ff ff1b 	bl	801c91c <write_GPIO>
		col_read = read_GPIO();
 801cae6:	f7ff fec9 	bl	801c87c <read_GPIO>
 801caea:	4603      	mov	r3, r0
 801caec:	71bb      	strb	r3, [r7, #6]
		if(col_read != 99){
 801caee:	79bb      	ldrb	r3, [r7, #6]
 801caf0:	2b63      	cmp	r3, #99	; 0x63
 801caf2:	d008      	beq.n	801cb06 <read_key+0x5a>
			key = decode_key(2, col_read);
 801caf4:	79bb      	ldrb	r3, [r7, #6]
 801caf6:	4619      	mov	r1, r3
 801caf8:	2002      	movs	r0, #2
 801cafa:	f7ff ff59 	bl	801c9b0 <decode_key>
 801cafe:	4603      	mov	r3, r0
 801cb00:	71fb      	strb	r3, [r7, #7]
			return key;
 801cb02:	79fb      	ldrb	r3, [r7, #7]
 801cb04:	e024      	b.n	801cb50 <read_key+0xa4>
		}

		// *** THIRD row
		write_GPIO(3);
 801cb06:	2003      	movs	r0, #3
 801cb08:	f7ff ff08 	bl	801c91c <write_GPIO>
		col_read = read_GPIO();
 801cb0c:	f7ff feb6 	bl	801c87c <read_GPIO>
 801cb10:	4603      	mov	r3, r0
 801cb12:	71bb      	strb	r3, [r7, #6]
		if(col_read != 99){
 801cb14:	79bb      	ldrb	r3, [r7, #6]
 801cb16:	2b63      	cmp	r3, #99	; 0x63
 801cb18:	d008      	beq.n	801cb2c <read_key+0x80>
			key = decode_key(3, col_read);
 801cb1a:	79bb      	ldrb	r3, [r7, #6]
 801cb1c:	4619      	mov	r1, r3
 801cb1e:	2003      	movs	r0, #3
 801cb20:	f7ff ff46 	bl	801c9b0 <decode_key>
 801cb24:	4603      	mov	r3, r0
 801cb26:	71fb      	strb	r3, [r7, #7]
			return key;
 801cb28:	79fb      	ldrb	r3, [r7, #7]
 801cb2a:	e011      	b.n	801cb50 <read_key+0xa4>
		}

		// *** FORTH row
		write_GPIO(4);
 801cb2c:	2004      	movs	r0, #4
 801cb2e:	f7ff fef5 	bl	801c91c <write_GPIO>
		col_read = read_GPIO();
 801cb32:	f7ff fea3 	bl	801c87c <read_GPIO>
 801cb36:	4603      	mov	r3, r0
 801cb38:	71bb      	strb	r3, [r7, #6]
		if(col_read != 99){
 801cb3a:	79bb      	ldrb	r3, [r7, #6]
 801cb3c:	2b63      	cmp	r3, #99	; 0x63
 801cb3e:	d0bc      	beq.n	801caba <read_key+0xe>
			key = decode_key(4, col_read);
 801cb40:	79bb      	ldrb	r3, [r7, #6]
 801cb42:	4619      	mov	r1, r3
 801cb44:	2004      	movs	r0, #4
 801cb46:	f7ff ff33 	bl	801c9b0 <decode_key>
 801cb4a:	4603      	mov	r3, r0
 801cb4c:	71fb      	strb	r3, [r7, #7]
			return key;
 801cb4e:	79fb      	ldrb	r3, [r7, #7]
		}
	}

	return 99;
}
 801cb50:	4618      	mov	r0, r3
 801cb52:	3708      	adds	r7, #8
 801cb54:	46bd      	mov	sp, r7
 801cb56:	bd80      	pop	{r7, pc}

0801cb58 <keypad_getNumber>:



uint32_t keypad_getNumber(){
 801cb58:	b5f0      	push	{r4, r5, r6, r7, lr}
 801cb5a:	b087      	sub	sp, #28
 801cb5c:	af00      	add	r7, sp, #0

	uint8_t inputDigit[10];
	uint32_t number=0;
 801cb5e:	2300      	movs	r3, #0
 801cb60:	617b      	str	r3, [r7, #20]
	uint8_t key;
	uint8_t i=0;
 801cb62:	2300      	movs	r3, #0
 801cb64:	74fb      	strb	r3, [r7, #19]

#ifdef debug_output
	PRINTF("\n\r The digits selected are: ");
#endif

	lcd16x2_i2c_printf("-> A to select");
 801cb66:	4860      	ldr	r0, [pc, #384]	; (801cce8 <keypad_getNumber+0x190>)
 801cb68:	f000 f9e6 	bl	801cf38 <lcd16x2_i2c_printf>
	lcd16x2_i2c_2ndLine();
 801cb6c:	f000 f9d2 	bl	801cf14 <lcd16x2_i2c_2ndLine>
	lcd16x2_i2c_printf("ID:  ");
 801cb70:	485e      	ldr	r0, [pc, #376]	; (801ccec <keypad_getNumber+0x194>)
 801cb72:	f000 f9e1 	bl	801cf38 <lcd16x2_i2c_printf>
	// until I press the ENTER button do:
	while(true){

		key = read_key();		// returns the digit input
 801cb76:	f7ff ff99 	bl	801caac <read_key>
 801cb7a:	4603      	mov	r3, r0
 801cb7c:	72fb      	strb	r3, [r7, #11]

		if(key==99){
 801cb7e:	7afb      	ldrb	r3, [r7, #11]
 801cb80:	2b63      	cmp	r3, #99	; 0x63
 801cb82:	d103      	bne.n	801cb8c <keypad_getNumber+0x34>
			lcd16x2_i2c_printf("Error...");
 801cb84:	485a      	ldr	r0, [pc, #360]	; (801ccf0 <keypad_getNumber+0x198>)
 801cb86:	f000 f9d7 	bl	801cf38 <lcd16x2_i2c_printf>
 801cb8a:	e04c      	b.n	801cc26 <keypad_getNumber+0xce>
		}else if(key==10){			// A, exit insertion number
 801cb8c:	7afb      	ldrb	r3, [r7, #11]
 801cb8e:	2b0a      	cmp	r3, #10
 801cb90:	d106      	bne.n	801cba0 <keypad_getNumber+0x48>
			lcd16x2_i2c_printf(";");
 801cb92:	4858      	ldr	r0, [pc, #352]	; (801ccf4 <keypad_getNumber+0x19c>)
 801cb94:	f000 f9d0 	bl	801cf38 <lcd16x2_i2c_printf>
			break;
 801cb98:	bf00      	nop

		key=99;
	}

	// Transform the array in number
	for(int j=i; j>0; j--){
 801cb9a:	7cfb      	ldrb	r3, [r7, #19]
 801cb9c:	60fb      	str	r3, [r7, #12]
 801cb9e:	e07f      	b.n	801cca0 <keypad_getNumber+0x148>
		}else if(key==20){		// B, nothing
 801cba0:	7afb      	ldrb	r3, [r7, #11]
 801cba2:	2b14      	cmp	r3, #20
 801cba4:	d103      	bne.n	801cbae <keypad_getNumber+0x56>
			lcd16x2_i2c_printf("B");
 801cba6:	4854      	ldr	r0, [pc, #336]	; (801ccf8 <keypad_getNumber+0x1a0>)
 801cba8:	f000 f9c6 	bl	801cf38 <lcd16x2_i2c_printf>
 801cbac:	e03b      	b.n	801cc26 <keypad_getNumber+0xce>
		}else if(key==30){		// C, easter egg
 801cbae:	7afb      	ldrb	r3, [r7, #11]
 801cbb0:	2b1e      	cmp	r3, #30
 801cbb2:	d104      	bne.n	801cbbe <keypad_getNumber+0x66>
			lcd16x2_i2c_printf("C");
 801cbb4:	4851      	ldr	r0, [pc, #324]	; (801ccfc <keypad_getNumber+0x1a4>)
 801cbb6:	f000 f9bf 	bl	801cf38 <lcd16x2_i2c_printf>
			return 0;
 801cbba:	2300      	movs	r3, #0
 801cbbc:	e08b      	b.n	801ccd6 <keypad_getNumber+0x17e>
		}else if(key==40){		// *, nothing
 801cbbe:	7afb      	ldrb	r3, [r7, #11]
 801cbc0:	2b28      	cmp	r3, #40	; 0x28
 801cbc2:	d106      	bne.n	801cbd2 <keypad_getNumber+0x7a>
			lcd16x2_i2c_printf("*");
 801cbc4:	484e      	ldr	r0, [pc, #312]	; (801cd00 <keypad_getNumber+0x1a8>)
 801cbc6:	f000 f9b7 	bl	801cf38 <lcd16x2_i2c_printf>
			PRINTF("* ");
 801cbca:	484e      	ldr	r0, [pc, #312]	; (801cd04 <keypad_getNumber+0x1ac>)
 801cbcc:	f7ff fce2 	bl	801c594 <PRINTF>
 801cbd0:	e029      	b.n	801cc26 <keypad_getNumber+0xce>
		}else if(key==50){		// #, nothing
 801cbd2:	7afb      	ldrb	r3, [r7, #11]
 801cbd4:	2b32      	cmp	r3, #50	; 0x32
 801cbd6:	d106      	bne.n	801cbe6 <keypad_getNumber+0x8e>
			lcd16x2_i2c_printf("#");
 801cbd8:	484b      	ldr	r0, [pc, #300]	; (801cd08 <keypad_getNumber+0x1b0>)
 801cbda:	f000 f9ad 	bl	801cf38 <lcd16x2_i2c_printf>
			PRINTF("# ");
 801cbde:	484b      	ldr	r0, [pc, #300]	; (801cd0c <keypad_getNumber+0x1b4>)
 801cbe0:	f7ff fcd8 	bl	801c594 <PRINTF>
 801cbe4:	e01f      	b.n	801cc26 <keypad_getNumber+0xce>
		}else if(key==60){		// D, disco mode
 801cbe6:	7afb      	ldrb	r3, [r7, #11]
 801cbe8:	2b3c      	cmp	r3, #60	; 0x3c
 801cbea:	d105      	bne.n	801cbf8 <keypad_getNumber+0xa0>
			lcd16x2_i2c_printf("D");
 801cbec:	4848      	ldr	r0, [pc, #288]	; (801cd10 <keypad_getNumber+0x1b8>)
 801cbee:	f000 f9a3 	bl	801cf38 <lcd16x2_i2c_printf>
			return 10000;
 801cbf2:	f242 7310 	movw	r3, #10000	; 0x2710
 801cbf6:	e06e      	b.n	801ccd6 <keypad_getNumber+0x17e>
		}else if(key>=0 && key<=9){	// number keys
 801cbf8:	7afb      	ldrb	r3, [r7, #11]
 801cbfa:	2b09      	cmp	r3, #9
 801cbfc:	d813      	bhi.n	801cc26 <keypad_getNumber+0xce>
			inputDigit[i] = key;
 801cbfe:	7cfb      	ldrb	r3, [r7, #19]
 801cc00:	f107 0218 	add.w	r2, r7, #24
 801cc04:	4413      	add	r3, r2
 801cc06:	7afa      	ldrb	r2, [r7, #11]
 801cc08:	f803 2c18 	strb.w	r2, [r3, #-24]
			lcd16x2_i2c_printf("%d", inputDigit[i]);
 801cc0c:	7cfb      	ldrb	r3, [r7, #19]
 801cc0e:	f107 0218 	add.w	r2, r7, #24
 801cc12:	4413      	add	r3, r2
 801cc14:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 801cc18:	4619      	mov	r1, r3
 801cc1a:	483e      	ldr	r0, [pc, #248]	; (801cd14 <keypad_getNumber+0x1bc>)
 801cc1c:	f000 f98c 	bl	801cf38 <lcd16x2_i2c_printf>
			i+=1;
 801cc20:	7cfb      	ldrb	r3, [r7, #19]
 801cc22:	3301      	adds	r3, #1
 801cc24:	74fb      	strb	r3, [r7, #19]
		key=99;
 801cc26:	2363      	movs	r3, #99	; 0x63
 801cc28:	72fb      	strb	r3, [r7, #11]
		key = read_key();		// returns the digit input
 801cc2a:	e7a4      	b.n	801cb76 <keypad_getNumber+0x1e>
		number += pow(10, j-1)*inputDigit[i-j];
 801cc2c:	68fb      	ldr	r3, [r7, #12]
 801cc2e:	3b01      	subs	r3, #1
 801cc30:	4618      	mov	r0, r3
 801cc32:	f7e3 fc7f 	bl	8000534 <__aeabi_i2d>
 801cc36:	4603      	mov	r3, r0
 801cc38:	460c      	mov	r4, r1
 801cc3a:	ec44 3b11 	vmov	d1, r3, r4
 801cc3e:	ed9f 0b28 	vldr	d0, [pc, #160]	; 801cce0 <keypad_getNumber+0x188>
 801cc42:	f005 fcc3 	bl	80225cc <pow>
 801cc46:	ec56 5b10 	vmov	r5, r6, d0
 801cc4a:	7cfa      	ldrb	r2, [r7, #19]
 801cc4c:	68fb      	ldr	r3, [r7, #12]
 801cc4e:	1ad3      	subs	r3, r2, r3
 801cc50:	f107 0218 	add.w	r2, r7, #24
 801cc54:	4413      	add	r3, r2
 801cc56:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 801cc5a:	4618      	mov	r0, r3
 801cc5c:	f7e3 fc6a 	bl	8000534 <__aeabi_i2d>
 801cc60:	4603      	mov	r3, r0
 801cc62:	460c      	mov	r4, r1
 801cc64:	461a      	mov	r2, r3
 801cc66:	4623      	mov	r3, r4
 801cc68:	4628      	mov	r0, r5
 801cc6a:	4631      	mov	r1, r6
 801cc6c:	f7e3 fccc 	bl	8000608 <__aeabi_dmul>
 801cc70:	4603      	mov	r3, r0
 801cc72:	460c      	mov	r4, r1
 801cc74:	4625      	mov	r5, r4
 801cc76:	461c      	mov	r4, r3
 801cc78:	6978      	ldr	r0, [r7, #20]
 801cc7a:	f7e3 fc4b 	bl	8000514 <__aeabi_ui2d>
 801cc7e:	4602      	mov	r2, r0
 801cc80:	460b      	mov	r3, r1
 801cc82:	4620      	mov	r0, r4
 801cc84:	4629      	mov	r1, r5
 801cc86:	f7e3 fb09 	bl	800029c <__adddf3>
 801cc8a:	4603      	mov	r3, r0
 801cc8c:	460c      	mov	r4, r1
 801cc8e:	4618      	mov	r0, r3
 801cc90:	4621      	mov	r1, r4
 801cc92:	f7e3 ff69 	bl	8000b68 <__aeabi_d2uiz>
 801cc96:	4603      	mov	r3, r0
 801cc98:	617b      	str	r3, [r7, #20]
	for(int j=i; j>0; j--){
 801cc9a:	68fb      	ldr	r3, [r7, #12]
 801cc9c:	3b01      	subs	r3, #1
 801cc9e:	60fb      	str	r3, [r7, #12]
 801cca0:	68fb      	ldr	r3, [r7, #12]
 801cca2:	2b00      	cmp	r3, #0
 801cca4:	dcc2      	bgt.n	801cc2c <keypad_getNumber+0xd4>
	}

#ifdef debug_output
	PRINTF32("\n\r     Final number obtained is: %d", number);
#endif
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 801cca6:	2200      	movs	r2, #0
 801cca8:	2180      	movs	r1, #128	; 0x80
 801ccaa:	481b      	ldr	r0, [pc, #108]	; (801cd18 <keypad_getNumber+0x1c0>)
 801ccac:	f001 fe18 	bl	801e8e0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 801ccb0:	2200      	movs	r2, #0
 801ccb2:	f44f 7100 	mov.w	r1, #512	; 0x200
 801ccb6:	4819      	ldr	r0, [pc, #100]	; (801cd1c <keypad_getNumber+0x1c4>)
 801ccb8:	f001 fe12 	bl	801e8e0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 801ccbc:	2200      	movs	r2, #0
 801ccbe:	f44f 7180 	mov.w	r1, #256	; 0x100
 801ccc2:	4816      	ldr	r0, [pc, #88]	; (801cd1c <keypad_getNumber+0x1c4>)
 801ccc4:	f001 fe0c 	bl	801e8e0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);
 801ccc8:	2200      	movs	r2, #0
 801ccca:	f44f 6180 	mov.w	r1, #1024	; 0x400
 801ccce:	4814      	ldr	r0, [pc, #80]	; (801cd20 <keypad_getNumber+0x1c8>)
 801ccd0:	f001 fe06 	bl	801e8e0 <HAL_GPIO_WritePin>
	return number;
 801ccd4:	697b      	ldr	r3, [r7, #20]
}
 801ccd6:	4618      	mov	r0, r3
 801ccd8:	371c      	adds	r7, #28
 801ccda:	46bd      	mov	sp, r7
 801ccdc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801ccde:	bf00      	nop
 801cce0:	00000000 	.word	0x00000000
 801cce4:	40240000 	.word	0x40240000
 801cce8:	0802ceb0 	.word	0x0802ceb0
 801ccec:	0802cec0 	.word	0x0802cec0
 801ccf0:	0802cec8 	.word	0x0802cec8
 801ccf4:	0802ced4 	.word	0x0802ced4
 801ccf8:	0802ced8 	.word	0x0802ced8
 801ccfc:	0802cedc 	.word	0x0802cedc
 801cd00:	0802cee0 	.word	0x0802cee0
 801cd04:	0802cee4 	.word	0x0802cee4
 801cd08:	0802cee8 	.word	0x0802cee8
 801cd0c:	0802ceec 	.word	0x0802ceec
 801cd10:	0802cef0 	.word	0x0802cef0
 801cd14:	0802cef4 	.word	0x0802cef4
 801cd18:	40020800 	.word	0x40020800
 801cd1c:	40020000 	.word	0x40020000
 801cd20:	40020400 	.word	0x40020400

0801cd24 <lcd16x2_i2c_sendCommand>:
#define LCD_I2C_SLAVE_ADDRESS_0  0x4E
#define LCD_I2C_SLAVE_ADDRESS_1  0x7E

/* Private functions */
static void lcd16x2_i2c_sendCommand(uint8_t command)
{
 801cd24:	b580      	push	{r7, lr}
 801cd26:	b086      	sub	sp, #24
 801cd28:	af02      	add	r7, sp, #8
 801cd2a:	4603      	mov	r3, r0
 801cd2c:	71fb      	strb	r3, [r7, #7]
  const uint8_t command_0_3 = (0xF0 & (command<<4));
 801cd2e:	79fb      	ldrb	r3, [r7, #7]
 801cd30:	011b      	lsls	r3, r3, #4
 801cd32:	73fb      	strb	r3, [r7, #15]
  const uint8_t command_4_7 = (0xF0 & command);
 801cd34:	79fb      	ldrb	r3, [r7, #7]
 801cd36:	f023 030f 	bic.w	r3, r3, #15
 801cd3a:	73bb      	strb	r3, [r7, #14]
  uint8_t i2cData[4] =
 801cd3c:	7bbb      	ldrb	r3, [r7, #14]
 801cd3e:	f043 030c 	orr.w	r3, r3, #12
 801cd42:	b2db      	uxtb	r3, r3
 801cd44:	723b      	strb	r3, [r7, #8]
 801cd46:	7bbb      	ldrb	r3, [r7, #14]
 801cd48:	f043 0308 	orr.w	r3, r3, #8
 801cd4c:	b2db      	uxtb	r3, r3
 801cd4e:	727b      	strb	r3, [r7, #9]
 801cd50:	7bfb      	ldrb	r3, [r7, #15]
 801cd52:	f043 030c 	orr.w	r3, r3, #12
 801cd56:	b2db      	uxtb	r3, r3
 801cd58:	72bb      	strb	r3, [r7, #10]
 801cd5a:	7bfb      	ldrb	r3, [r7, #15]
 801cd5c:	f043 0308 	orr.w	r3, r3, #8
 801cd60:	b2db      	uxtb	r3, r3
 801cd62:	72fb      	strb	r3, [r7, #11]
      command_4_7 | LCD_EN | LCD_BK_LIGHT,
      command_4_7 | LCD_BK_LIGHT,
      command_0_3 | LCD_EN | LCD_BK_LIGHT,
      command_0_3 | LCD_BK_LIGHT,
  };
  HAL_I2C_Master_Transmit(lcd16x2_i2cHandle, LCD_I2C_SLAVE_ADDRESS, i2cData, 4, 200);
 801cd64:	4b07      	ldr	r3, [pc, #28]	; (801cd84 <lcd16x2_i2c_sendCommand+0x60>)
 801cd66:	6818      	ldr	r0, [r3, #0]
 801cd68:	4b07      	ldr	r3, [pc, #28]	; (801cd88 <lcd16x2_i2c_sendCommand+0x64>)
 801cd6a:	781b      	ldrb	r3, [r3, #0]
 801cd6c:	b299      	uxth	r1, r3
 801cd6e:	f107 0208 	add.w	r2, r7, #8
 801cd72:	23c8      	movs	r3, #200	; 0xc8
 801cd74:	9300      	str	r3, [sp, #0]
 801cd76:	2304      	movs	r3, #4
 801cd78:	f001 ff1c 	bl	801ebb4 <HAL_I2C_Master_Transmit>
}
 801cd7c:	bf00      	nop
 801cd7e:	3710      	adds	r7, #16
 801cd80:	46bd      	mov	sp, r7
 801cd82:	bd80      	pop	{r7, pc}
 801cd84:	20000098 	.word	0x20000098
 801cd88:	2000009c 	.word	0x2000009c

0801cd8c <lcd16x2_i2c_sendData>:

static void lcd16x2_i2c_sendData(uint8_t data)
{
 801cd8c:	b580      	push	{r7, lr}
 801cd8e:	b086      	sub	sp, #24
 801cd90:	af02      	add	r7, sp, #8
 801cd92:	4603      	mov	r3, r0
 801cd94:	71fb      	strb	r3, [r7, #7]
  const uint8_t data_0_3 = (0xF0 & (data<<4));
 801cd96:	79fb      	ldrb	r3, [r7, #7]
 801cd98:	011b      	lsls	r3, r3, #4
 801cd9a:	73fb      	strb	r3, [r7, #15]
  const uint8_t data_4_7 = (0xF0 & data);
 801cd9c:	79fb      	ldrb	r3, [r7, #7]
 801cd9e:	f023 030f 	bic.w	r3, r3, #15
 801cda2:	73bb      	strb	r3, [r7, #14]
  uint8_t i2cData[4] =
 801cda4:	7bbb      	ldrb	r3, [r7, #14]
 801cda6:	f043 030d 	orr.w	r3, r3, #13
 801cdaa:	b2db      	uxtb	r3, r3
 801cdac:	723b      	strb	r3, [r7, #8]
 801cdae:	7bbb      	ldrb	r3, [r7, #14]
 801cdb0:	f043 0309 	orr.w	r3, r3, #9
 801cdb4:	b2db      	uxtb	r3, r3
 801cdb6:	727b      	strb	r3, [r7, #9]
 801cdb8:	7bfb      	ldrb	r3, [r7, #15]
 801cdba:	f043 030d 	orr.w	r3, r3, #13
 801cdbe:	b2db      	uxtb	r3, r3
 801cdc0:	72bb      	strb	r3, [r7, #10]
 801cdc2:	7bfb      	ldrb	r3, [r7, #15]
 801cdc4:	f043 0309 	orr.w	r3, r3, #9
 801cdc8:	b2db      	uxtb	r3, r3
 801cdca:	72fb      	strb	r3, [r7, #11]
      data_4_7 | LCD_EN | LCD_BK_LIGHT | LCD_RS,
      data_4_7 | LCD_BK_LIGHT | LCD_RS,
      data_0_3 | LCD_EN | LCD_BK_LIGHT | LCD_RS,
      data_0_3 | LCD_BK_LIGHT | LCD_RS,
  };
  HAL_I2C_Master_Transmit(lcd16x2_i2cHandle, LCD_I2C_SLAVE_ADDRESS, i2cData, 4, 200);
 801cdcc:	4b07      	ldr	r3, [pc, #28]	; (801cdec <lcd16x2_i2c_sendData+0x60>)
 801cdce:	6818      	ldr	r0, [r3, #0]
 801cdd0:	4b07      	ldr	r3, [pc, #28]	; (801cdf0 <lcd16x2_i2c_sendData+0x64>)
 801cdd2:	781b      	ldrb	r3, [r3, #0]
 801cdd4:	b299      	uxth	r1, r3
 801cdd6:	f107 0208 	add.w	r2, r7, #8
 801cdda:	23c8      	movs	r3, #200	; 0xc8
 801cddc:	9300      	str	r3, [sp, #0]
 801cdde:	2304      	movs	r3, #4
 801cde0:	f001 fee8 	bl	801ebb4 <HAL_I2C_Master_Transmit>
}
 801cde4:	bf00      	nop
 801cde6:	3710      	adds	r7, #16
 801cde8:	46bd      	mov	sp, r7
 801cdea:	bd80      	pop	{r7, pc}
 801cdec:	20000098 	.word	0x20000098
 801cdf0:	2000009c 	.word	0x2000009c

0801cdf4 <lcd16x2_i2c_init>:
/**
 * @brief Initialise LCD16x2
 * @param[in] *pI2cHandle - pointer to HAL I2C handle
 */
bool lcd16x2_i2c_init(I2C_HandleTypeDef *pI2cHandle)
{
 801cdf4:	b580      	push	{r7, lr}
 801cdf6:	b082      	sub	sp, #8
 801cdf8:	af00      	add	r7, sp, #0
 801cdfa:	6078      	str	r0, [r7, #4]
  HAL_Delay(50);
 801cdfc:	2032      	movs	r0, #50	; 0x32
 801cdfe:	f000 ff11 	bl	801dc24 <HAL_Delay>
  lcd16x2_i2cHandle = pI2cHandle;
 801ce02:	4a30      	ldr	r2, [pc, #192]	; (801cec4 <lcd16x2_i2c_init+0xd0>)
 801ce04:	687b      	ldr	r3, [r7, #4]
 801ce06:	6013      	str	r3, [r2, #0]
  if(HAL_I2C_IsDeviceReady(lcd16x2_i2cHandle, LCD_I2C_SLAVE_ADDRESS_0, 5, 500) != HAL_OK)
 801ce08:	4b2e      	ldr	r3, [pc, #184]	; (801cec4 <lcd16x2_i2c_init+0xd0>)
 801ce0a:	6818      	ldr	r0, [r3, #0]
 801ce0c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 801ce10:	2205      	movs	r2, #5
 801ce12:	214e      	movs	r1, #78	; 0x4e
 801ce14:	f001 ffcc 	bl	801edb0 <HAL_I2C_IsDeviceReady>
 801ce18:	4603      	mov	r3, r0
 801ce1a:	2b00      	cmp	r3, #0
 801ce1c:	d010      	beq.n	801ce40 <lcd16x2_i2c_init+0x4c>
  {
    if(HAL_I2C_IsDeviceReady(lcd16x2_i2cHandle, LCD_I2C_SLAVE_ADDRESS_1, 5, 500) != HAL_OK)
 801ce1e:	4b29      	ldr	r3, [pc, #164]	; (801cec4 <lcd16x2_i2c_init+0xd0>)
 801ce20:	6818      	ldr	r0, [r3, #0]
 801ce22:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 801ce26:	2205      	movs	r2, #5
 801ce28:	217e      	movs	r1, #126	; 0x7e
 801ce2a:	f001 ffc1 	bl	801edb0 <HAL_I2C_IsDeviceReady>
 801ce2e:	4603      	mov	r3, r0
 801ce30:	2b00      	cmp	r3, #0
 801ce32:	d001      	beq.n	801ce38 <lcd16x2_i2c_init+0x44>
    {
      return false;
 801ce34:	2300      	movs	r3, #0
 801ce36:	e040      	b.n	801ceba <lcd16x2_i2c_init+0xc6>
    }
    else
    {
      LCD_I2C_SLAVE_ADDRESS = LCD_I2C_SLAVE_ADDRESS_1;
 801ce38:	4b23      	ldr	r3, [pc, #140]	; (801cec8 <lcd16x2_i2c_init+0xd4>)
 801ce3a:	227e      	movs	r2, #126	; 0x7e
 801ce3c:	701a      	strb	r2, [r3, #0]
 801ce3e:	e002      	b.n	801ce46 <lcd16x2_i2c_init+0x52>
    }
  }
  else
  {
    LCD_I2C_SLAVE_ADDRESS = LCD_I2C_SLAVE_ADDRESS_0;
 801ce40:	4b21      	ldr	r3, [pc, #132]	; (801cec8 <lcd16x2_i2c_init+0xd4>)
 801ce42:	224e      	movs	r2, #78	; 0x4e
 801ce44:	701a      	strb	r2, [r3, #0]
  }
  //Initialise LCD for 4-bit operation
  //1. Wait at least 15ms
  HAL_Delay(45);
 801ce46:	202d      	movs	r0, #45	; 0x2d
 801ce48:	f000 feec 	bl	801dc24 <HAL_Delay>
  //2. Attentions sequence
  lcd16x2_i2c_sendCommand(0x30);
 801ce4c:	2030      	movs	r0, #48	; 0x30
 801ce4e:	f7ff ff69 	bl	801cd24 <lcd16x2_i2c_sendCommand>
  HAL_Delay(5);
 801ce52:	2005      	movs	r0, #5
 801ce54:	f000 fee6 	bl	801dc24 <HAL_Delay>
  lcd16x2_i2c_sendCommand(0x30);
 801ce58:	2030      	movs	r0, #48	; 0x30
 801ce5a:	f7ff ff63 	bl	801cd24 <lcd16x2_i2c_sendCommand>
  HAL_Delay(1);
 801ce5e:	2001      	movs	r0, #1
 801ce60:	f000 fee0 	bl	801dc24 <HAL_Delay>
  lcd16x2_i2c_sendCommand(0x30);
 801ce64:	2030      	movs	r0, #48	; 0x30
 801ce66:	f7ff ff5d 	bl	801cd24 <lcd16x2_i2c_sendCommand>
  HAL_Delay(8);
 801ce6a:	2008      	movs	r0, #8
 801ce6c:	f000 feda 	bl	801dc24 <HAL_Delay>
  lcd16x2_i2c_sendCommand(0x20);
 801ce70:	2020      	movs	r0, #32
 801ce72:	f7ff ff57 	bl	801cd24 <lcd16x2_i2c_sendCommand>
  HAL_Delay(8);
 801ce76:	2008      	movs	r0, #8
 801ce78:	f000 fed4 	bl	801dc24 <HAL_Delay>

  lcd16x2_i2c_sendCommand(LCD_FUNCTIONSET | LCD_FUNCTION_N);
 801ce7c:	2028      	movs	r0, #40	; 0x28
 801ce7e:	f7ff ff51 	bl	801cd24 <lcd16x2_i2c_sendCommand>
  HAL_Delay(1);
 801ce82:	2001      	movs	r0, #1
 801ce84:	f000 fece 	bl	801dc24 <HAL_Delay>
  lcd16x2_i2c_sendCommand(LCD_DISPLAYCONTROL);
 801ce88:	2008      	movs	r0, #8
 801ce8a:	f7ff ff4b 	bl	801cd24 <lcd16x2_i2c_sendCommand>
  HAL_Delay(1);
 801ce8e:	2001      	movs	r0, #1
 801ce90:	f000 fec8 	bl	801dc24 <HAL_Delay>
  lcd16x2_i2c_sendCommand(LCD_CLEARDISPLAY);
 801ce94:	2001      	movs	r0, #1
 801ce96:	f7ff ff45 	bl	801cd24 <lcd16x2_i2c_sendCommand>
  HAL_Delay(3);
 801ce9a:	2003      	movs	r0, #3
 801ce9c:	f000 fec2 	bl	801dc24 <HAL_Delay>
  lcd16x2_i2c_sendCommand(0x04 | LCD_ENTRY_ID);
 801cea0:	2006      	movs	r0, #6
 801cea2:	f7ff ff3f 	bl	801cd24 <lcd16x2_i2c_sendCommand>
  HAL_Delay(1);
 801cea6:	2001      	movs	r0, #1
 801cea8:	f000 febc 	bl	801dc24 <HAL_Delay>
  lcd16x2_i2c_sendCommand(LCD_DISPLAYCONTROL | LCD_DISPLAY_D);
 801ceac:	200c      	movs	r0, #12
 801ceae:	f7ff ff39 	bl	801cd24 <lcd16x2_i2c_sendCommand>
  HAL_Delay(3);
 801ceb2:	2003      	movs	r0, #3
 801ceb4:	f000 feb6 	bl	801dc24 <HAL_Delay>

  return true;
 801ceb8:	2301      	movs	r3, #1
}
 801ceba:	4618      	mov	r0, r3
 801cebc:	3708      	adds	r7, #8
 801cebe:	46bd      	mov	sp, r7
 801cec0:	bd80      	pop	{r7, pc}
 801cec2:	bf00      	nop
 801cec4:	20000098 	.word	0x20000098
 801cec8:	2000009c 	.word	0x2000009c

0801cecc <lcd16x2_i2c_setCursor>:
 * @brief Set cursor position
 * @param[in] row - 0 or 1 for line1 or line2
 * @param[in] col - 0 - 15 (16 columns LCD)
 */
void lcd16x2_i2c_setCursor(uint8_t row, uint8_t col)
{
 801cecc:	b580      	push	{r7, lr}
 801cece:	b084      	sub	sp, #16
 801ced0:	af00      	add	r7, sp, #0
 801ced2:	4603      	mov	r3, r0
 801ced4:	460a      	mov	r2, r1
 801ced6:	71fb      	strb	r3, [r7, #7]
 801ced8:	4613      	mov	r3, r2
 801ceda:	71bb      	strb	r3, [r7, #6]
  uint8_t maskData;
  maskData = (col)&0x0F;
 801cedc:	79bb      	ldrb	r3, [r7, #6]
 801cede:	f003 030f 	and.w	r3, r3, #15
 801cee2:	73fb      	strb	r3, [r7, #15]
  if(row==0)
 801cee4:	79fb      	ldrb	r3, [r7, #7]
 801cee6:	2b00      	cmp	r3, #0
 801cee8:	d108      	bne.n	801cefc <lcd16x2_i2c_setCursor+0x30>
  {
    maskData |= (0x80);
 801ceea:	7bfb      	ldrb	r3, [r7, #15]
 801ceec:	f063 037f 	orn	r3, r3, #127	; 0x7f
 801cef0:	73fb      	strb	r3, [r7, #15]
    lcd16x2_i2c_sendCommand(maskData);
 801cef2:	7bfb      	ldrb	r3, [r7, #15]
 801cef4:	4618      	mov	r0, r3
 801cef6:	f7ff ff15 	bl	801cd24 <lcd16x2_i2c_sendCommand>
  else
  {
    maskData |= (0xc0);
    lcd16x2_i2c_sendCommand(maskData);
  }
}
 801cefa:	e007      	b.n	801cf0c <lcd16x2_i2c_setCursor+0x40>
    maskData |= (0xc0);
 801cefc:	7bfb      	ldrb	r3, [r7, #15]
 801cefe:	f063 033f 	orn	r3, r3, #63	; 0x3f
 801cf02:	73fb      	strb	r3, [r7, #15]
    lcd16x2_i2c_sendCommand(maskData);
 801cf04:	7bfb      	ldrb	r3, [r7, #15]
 801cf06:	4618      	mov	r0, r3
 801cf08:	f7ff ff0c 	bl	801cd24 <lcd16x2_i2c_sendCommand>
}
 801cf0c:	bf00      	nop
 801cf0e:	3710      	adds	r7, #16
 801cf10:	46bd      	mov	sp, r7
 801cf12:	bd80      	pop	{r7, pc}

0801cf14 <lcd16x2_i2c_2ndLine>:
}
/**
 * @brief Move to beginning of 2nd line
 */
void lcd16x2_i2c_2ndLine(void)
{
 801cf14:	b580      	push	{r7, lr}
 801cf16:	af00      	add	r7, sp, #0
  lcd16x2_i2c_setCursor(1,0);
 801cf18:	2100      	movs	r1, #0
 801cf1a:	2001      	movs	r0, #1
 801cf1c:	f7ff ffd6 	bl	801cecc <lcd16x2_i2c_setCursor>
}
 801cf20:	bf00      	nop
 801cf22:	bd80      	pop	{r7, pc}

0801cf24 <lcd16x2_i2c_clear>:

/**
 * @brief Display clear
 */
void lcd16x2_i2c_clear(void)
{
 801cf24:	b580      	push	{r7, lr}
 801cf26:	af00      	add	r7, sp, #0
  lcd16x2_i2c_sendCommand(LCD_CLEARDISPLAY);
 801cf28:	2001      	movs	r0, #1
 801cf2a:	f7ff fefb 	bl	801cd24 <lcd16x2_i2c_sendCommand>
  HAL_Delay(3);
 801cf2e:	2003      	movs	r0, #3
 801cf30:	f000 fe78 	bl	801dc24 <HAL_Delay>
}
 801cf34:	bf00      	nop
 801cf36:	bd80      	pop	{r7, pc}

0801cf38 <lcd16x2_i2c_printf>:

/**
 * @brief Print to display
 */
void lcd16x2_i2c_printf(const char* str, ...)
{
 801cf38:	b40f      	push	{r0, r1, r2, r3}
 801cf3a:	b590      	push	{r4, r7, lr}
 801cf3c:	b089      	sub	sp, #36	; 0x24
 801cf3e:	af00      	add	r7, sp, #0
  char stringArray[20];
  va_list args;
  va_start(args, str);
 801cf40:	f107 0334 	add.w	r3, r7, #52	; 0x34
 801cf44:	607b      	str	r3, [r7, #4]
  vsprintf(stringArray, str, args);
 801cf46:	f107 0308 	add.w	r3, r7, #8
 801cf4a:	687a      	ldr	r2, [r7, #4]
 801cf4c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801cf4e:	4618      	mov	r0, r3
 801cf50:	f004 ff4e 	bl	8021df0 <vsiprintf>
  va_end(args);
  for(uint8_t i=0;  i<strlen(stringArray) && i<16; i++)
 801cf54:	2300      	movs	r3, #0
 801cf56:	77fb      	strb	r3, [r7, #31]
 801cf58:	e00b      	b.n	801cf72 <lcd16x2_i2c_printf+0x3a>
  {
    lcd16x2_i2c_sendData((uint8_t)stringArray[i]);
 801cf5a:	7ffb      	ldrb	r3, [r7, #31]
 801cf5c:	f107 0220 	add.w	r2, r7, #32
 801cf60:	4413      	add	r3, r2
 801cf62:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 801cf66:	4618      	mov	r0, r3
 801cf68:	f7ff ff10 	bl	801cd8c <lcd16x2_i2c_sendData>
  for(uint8_t i=0;  i<strlen(stringArray) && i<16; i++)
 801cf6c:	7ffb      	ldrb	r3, [r7, #31]
 801cf6e:	3301      	adds	r3, #1
 801cf70:	77fb      	strb	r3, [r7, #31]
 801cf72:	7ffc      	ldrb	r4, [r7, #31]
 801cf74:	f107 0308 	add.w	r3, r7, #8
 801cf78:	4618      	mov	r0, r3
 801cf7a:	f7e3 f931 	bl	80001e0 <strlen>
 801cf7e:	4603      	mov	r3, r0
 801cf80:	429c      	cmp	r4, r3
 801cf82:	d202      	bcs.n	801cf8a <lcd16x2_i2c_printf+0x52>
 801cf84:	7ffb      	ldrb	r3, [r7, #31]
 801cf86:	2b0f      	cmp	r3, #15
 801cf88:	d9e7      	bls.n	801cf5a <lcd16x2_i2c_printf+0x22>
  }
}
 801cf8a:	bf00      	nop
 801cf8c:	3724      	adds	r7, #36	; 0x24
 801cf8e:	46bd      	mov	sp, r7
 801cf90:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 801cf94:	b004      	add	sp, #16
 801cf96:	4770      	bx	lr

0801cf98 <HAL_TIM_PWM_PulseFinishedCallback>:




// When DMA finishes a send triggers a flag and stops the data transfer
void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim){
 801cf98:	b580      	push	{r7, lr}
 801cf9a:	b082      	sub	sp, #8
 801cf9c:	af00      	add	r7, sp, #0
 801cf9e:	6078      	str	r0, [r7, #4]

	if(htim == &htim2){
 801cfa0:	687b      	ldr	r3, [r7, #4]
 801cfa2:	4a0b      	ldr	r2, [pc, #44]	; (801cfd0 <HAL_TIM_PWM_PulseFinishedCallback+0x38>)
 801cfa4:	4293      	cmp	r3, r2
 801cfa6:	d103      	bne.n	801cfb0 <HAL_TIM_PWM_PulseFinishedCallback+0x18>
		HAL_TIM_PWM_Stop_DMA(&htim2, TIM_CHANNEL_1);
 801cfa8:	2100      	movs	r1, #0
 801cfaa:	4809      	ldr	r0, [pc, #36]	; (801cfd0 <HAL_TIM_PWM_PulseFinishedCallback+0x38>)
 801cfac:	f003 f800 	bl	801ffb0 <HAL_TIM_PWM_Stop_DMA>
	}

	if(htim == &htim3){
 801cfb0:	687b      	ldr	r3, [r7, #4]
 801cfb2:	4a08      	ldr	r2, [pc, #32]	; (801cfd4 <HAL_TIM_PWM_PulseFinishedCallback+0x3c>)
 801cfb4:	4293      	cmp	r3, r2
 801cfb6:	d103      	bne.n	801cfc0 <HAL_TIM_PWM_PulseFinishedCallback+0x28>
		HAL_TIM_PWM_Stop_DMA(&htim3, TIM_CHANNEL_1);
 801cfb8:	2100      	movs	r1, #0
 801cfba:	4806      	ldr	r0, [pc, #24]	; (801cfd4 <HAL_TIM_PWM_PulseFinishedCallback+0x3c>)
 801cfbc:	f002 fff8 	bl	801ffb0 <HAL_TIM_PWM_Stop_DMA>
	}

	datasentflag = 1;
 801cfc0:	4b05      	ldr	r3, [pc, #20]	; (801cfd8 <HAL_TIM_PWM_PulseFinishedCallback+0x40>)
 801cfc2:	2201      	movs	r2, #1
 801cfc4:	601a      	str	r2, [r3, #0]
}
 801cfc6:	bf00      	nop
 801cfc8:	3708      	adds	r7, #8
 801cfca:	46bd      	mov	sp, r7
 801cfcc:	bd80      	pop	{r7, pc}
 801cfce:	bf00      	nop
 801cfd0:	20005578 	.word	0x20005578
 801cfd4:	200054d8 	.word	0x200054d8
 801cfd8:	20000094 	.word	0x20000094

0801cfdc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 801cfdc:	b580      	push	{r7, lr}
 801cfde:	f5ad 7d18 	sub.w	sp, sp, #608	; 0x260
 801cfe2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 801cfe4:	f000 fdac 	bl	801db40 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 801cfe8:	f000 f920 	bl	801d22c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 801cfec:	f7ff fb14 	bl	801c618 <MX_GPIO_Init>
  MX_DMA_Init();
 801cff0:	f7ff faea 	bl	801c5c8 <MX_DMA_Init>
  MX_USART2_UART_Init();
 801cff4:	f000 fc82 	bl	801d8fc <MX_USART2_UART_Init>
  MX_TIM2_Init();
 801cff8:	f000 fa8c 	bl	801d514 <MX_TIM2_Init>
  MX_I2C1_Init();
 801cffc:	f7ff fbc8 	bl	801c790 <MX_I2C1_Init>
  MX_TIM3_Init();
 801d000:	f000 fafc 	bl	801d5fc <MX_TIM3_Init>
  MX_USART6_UART_Init();
 801d004:	f000 fca4 	bl	801d950 <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */

  // *********************************************
  // 			LCD initialization
  // *********************************************
  if(lcd16x2_i2c_init(&hi2c1)){
 801d008:	4878      	ldr	r0, [pc, #480]	; (801d1ec <main+0x210>)
 801d00a:	f7ff fef3 	bl	801cdf4 <lcd16x2_i2c_init>
 801d00e:	4603      	mov	r3, r0
 801d010:	2b00      	cmp	r3, #0
 801d012:	d004      	beq.n	801d01e <main+0x42>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 801d014:	2201      	movs	r2, #1
 801d016:	2120      	movs	r1, #32
 801d018:	4875      	ldr	r0, [pc, #468]	; (801d1f0 <main+0x214>)
 801d01a:	f001 fc61 	bl	801e8e0 <HAL_GPIO_WritePin>
  }
  lcd16x2_i2c_clear();
 801d01e:	f7ff ff81 	bl	801cf24 <lcd16x2_i2c_clear>
  lcd16x2_i2c_2ndLine();
 801d022:	f7ff ff77 	bl	801cf14 <lcd16x2_i2c_2ndLine>
  lcd16x2_i2c_clear();
 801d026:	f7ff ff7d 	bl	801cf24 <lcd16x2_i2c_clear>
  lcd16x2_i2c_printf("      RESET       ");
 801d02a:	4872      	ldr	r0, [pc, #456]	; (801d1f4 <main+0x218>)
 801d02c:	f7ff ff84 	bl	801cf38 <lcd16x2_i2c_printf>

  HAL_Delay(1000);
 801d030:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 801d034:	f000 fdf6 	bl	801dc24 <HAL_Delay>

  // Enable HC 05 bluetooth module
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);
 801d038:	2201      	movs	r2, #1
 801d03a:	f44f 7100 	mov.w	r1, #512	; 0x200
 801d03e:	486e      	ldr	r0, [pc, #440]	; (801d1f8 <main+0x21c>)
 801d040:	f001 fc4e 	bl	801e8e0 <HAL_GPIO_WritePin>

  // enable interrupt for the UART
  HAL_UART_Receive_IT(&huart6, buffer, 600);
 801d044:	f44f 7216 	mov.w	r2, #600	; 0x258
 801d048:	496c      	ldr	r1, [pc, #432]	; (801d1fc <main+0x220>)
 801d04a:	486d      	ldr	r0, [pc, #436]	; (801d200 <main+0x224>)
 801d04c:	f003 ffce 	bl	8020fec <HAL_UART_Receive_IT>


  // Welcome message
  lcd16x2_i2c_clear();
 801d050:	f7ff ff68 	bl	801cf24 <lcd16x2_i2c_clear>
  lcd16x2_i2c_2ndLine();
 801d054:	f7ff ff5e 	bl	801cf14 <lcd16x2_i2c_2ndLine>
  lcd16x2_i2c_clear();
 801d058:	f7ff ff64 	bl	801cf24 <lcd16x2_i2c_clear>
  lcd16x2_i2c_printf("><>   FISH   <><");
 801d05c:	4869      	ldr	r0, [pc, #420]	; (801d204 <main+0x228>)
 801d05e:	f7ff ff6b 	bl	801cf38 <lcd16x2_i2c_printf>
  lcd16x2_i2c_2ndLine();
 801d062:	f7ff ff57 	bl	801cf14 <lcd16x2_i2c_2ndLine>
  lcd16x2_i2c_printf("===   BOARD  ===");
 801d066:	4868      	ldr	r0, [pc, #416]	; (801d208 <main+0x22c>)
 801d068:	f7ff ff66 	bl	801cf38 <lcd16x2_i2c_printf>


  // Struct definition
  Problem p;			    			// struct that contains the info related to the problem
  uint32_t problemID = 0;				// ID that reppresents the number of the problem
 801d06c:	2300      	movs	r3, #0
 801d06e:	f8c7 3258 	str.w	r3, [r7, #600]	; 0x258
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  // If the blue button is pressed
	  if(BLUE_BUTTON){
 801d072:	4b66      	ldr	r3, [pc, #408]	; (801d20c <main+0x230>)
 801d074:	781b      	ldrb	r3, [r3, #0]
 801d076:	2b00      	cmp	r3, #0
 801d078:	d074      	beq.n	801d164 <main+0x188>
		  lcd16x2_i2c_clear();							// clear the LCD display
 801d07a:	f7ff ff53 	bl	801cf24 <lcd16x2_i2c_clear>

		  problemID = keypad_getNumber();				// Listen for the key pressed on the keypad
 801d07e:	f7ff fd6b 	bl	801cb58 <keypad_getNumber>
 801d082:	f8c7 0258 	str.w	r0, [r7, #600]	; 0x258

		  if(problemID==10000 || DISCO_FLAG==1){		// If pressed button is disco mode
 801d086:	f8d7 3258 	ldr.w	r3, [r7, #600]	; 0x258
 801d08a:	f242 7210 	movw	r2, #10000	; 0x2710
 801d08e:	4293      	cmp	r3, r2
 801d090:	d003      	beq.n	801d09a <main+0xbe>
 801d092:	4b5f      	ldr	r3, [pc, #380]	; (801d210 <main+0x234>)
 801d094:	781b      	ldrb	r3, [r3, #0]
 801d096:	2b01      	cmp	r3, #1
 801d098:	d13e      	bne.n	801d118 <main+0x13c>
			  uint8_t mode=0;
 801d09a:	2300      	movs	r3, #0
 801d09c:	f887 325f 	strb.w	r3, [r7, #607]	; 0x25f

			  while(1){

				  if(mode==0){
 801d0a0:	f897 325f 	ldrb.w	r3, [r7, #607]	; 0x25f
 801d0a4:	2b00      	cmp	r3, #0
 801d0a6:	d10f      	bne.n	801d0c8 <main+0xec>
					  lcd16x2_i2c_clear();
 801d0a8:	f7ff ff3c 	bl	801cf24 <lcd16x2_i2c_clear>
					  lcd16x2_i2c_printf("DISCO MODE");
 801d0ac:	4859      	ldr	r0, [pc, #356]	; (801d214 <main+0x238>)
 801d0ae:	f7ff ff43 	bl	801cf38 <lcd16x2_i2c_printf>
					  lcd16x2_i2c_2ndLine();
 801d0b2:	f7ff ff2f 	bl	801cf14 <lcd16x2_i2c_2ndLine>
					  lcd16x2_i2c_printf("    /(^-^)/ ");
 801d0b6:	4858      	ldr	r0, [pc, #352]	; (801d218 <main+0x23c>)
 801d0b8:	f7ff ff3e 	bl	801cf38 <lcd16x2_i2c_printf>
					  mode +=1;
 801d0bc:	f897 325f 	ldrb.w	r3, [r7, #607]	; 0x25f
 801d0c0:	3301      	adds	r3, #1
 801d0c2:	f887 325f 	strb.w	r3, [r7, #607]	; 0x25f
 801d0c6:	e01f      	b.n	801d108 <main+0x12c>
				  }else if(mode==2){
 801d0c8:	f897 325f 	ldrb.w	r3, [r7, #607]	; 0x25f
 801d0cc:	2b02      	cmp	r3, #2
 801d0ce:	d10f      	bne.n	801d0f0 <main+0x114>
					  lcd16x2_i2c_clear();
 801d0d0:	f7ff ff28 	bl	801cf24 <lcd16x2_i2c_clear>
					  lcd16x2_i2c_printf("DISCO MODE");
 801d0d4:	484f      	ldr	r0, [pc, #316]	; (801d214 <main+0x238>)
 801d0d6:	f7ff ff2f 	bl	801cf38 <lcd16x2_i2c_printf>
					  lcd16x2_i2c_2ndLine();
 801d0da:	f7ff ff1b 	bl	801cf14 <lcd16x2_i2c_2ndLine>
					  lcd16x2_i2c_printf("    -(^-^)-  ");
 801d0de:	484f      	ldr	r0, [pc, #316]	; (801d21c <main+0x240>)
 801d0e0:	f7ff ff2a 	bl	801cf38 <lcd16x2_i2c_printf>
					  mode +=1;
 801d0e4:	f897 325f 	ldrb.w	r3, [r7, #607]	; 0x25f
 801d0e8:	3301      	adds	r3, #1
 801d0ea:	f887 325f 	strb.w	r3, [r7, #607]	; 0x25f
 801d0ee:	e00b      	b.n	801d108 <main+0x12c>
				  }else{
					  mode +=1;
 801d0f0:	f897 325f 	ldrb.w	r3, [r7, #607]	; 0x25f
 801d0f4:	3301      	adds	r3, #1
 801d0f6:	f887 325f 	strb.w	r3, [r7, #607]	; 0x25f
					  if(mode==4) mode=0;
 801d0fa:	f897 325f 	ldrb.w	r3, [r7, #607]	; 0x25f
 801d0fe:	2b04      	cmp	r3, #4
 801d100:	d102      	bne.n	801d108 <main+0x12c>
 801d102:	2300      	movs	r3, #0
 801d104:	f887 325f 	strb.w	r3, [r7, #607]	; 0x25f
				  }
				  LED_setAllRand();
 801d108:	f7e4 f91c 	bl	8001344 <LED_setAllRand>

				  // Sends to LED strip signal
				  WS2811_Send();
 801d10c:	f7e4 f94a 	bl	80013a4 <WS2811_Send>

				  HAL_Delay(250);
 801d110:	20fa      	movs	r0, #250	; 0xfa
 801d112:	f000 fd87 	bl	801dc24 <HAL_Delay>
				  if(mode==0){
 801d116:	e7c3      	b.n	801d0a0 <main+0xc4>


		  }else{								// Otherwise search correct problem


			  problem_fetch(&p,problemID);		// Update the struct with teh info from the ID
 801d118:	f8d7 2258 	ldr.w	r2, [r7, #600]	; 0x258
 801d11c:	1d3b      	adds	r3, r7, #4
 801d11e:	4611      	mov	r1, r2
 801d120:	4618      	mov	r0, r3
 801d122:	f7e4 facf 	bl	80016c4 <problem_fetch>

			  problem_genArray(&p);				// Generate a matrix containing colors for each LED according to problem
 801d126:	1d3b      	adds	r3, r7, #4
 801d128:	4618      	mov	r0, r3
 801d12a:	f7e3 ff97 	bl	800105c <problem_genArray>

			  // Display on led boulder info
			  lcd16x2_i2c_clear();
 801d12e:	f7ff fef9 	bl	801cf24 <lcd16x2_i2c_clear>
			  lcd16x2_i2c_printf("Name:");
 801d132:	483b      	ldr	r0, [pc, #236]	; (801d220 <main+0x244>)
 801d134:	f7ff ff00 	bl	801cf38 <lcd16x2_i2c_printf>
			  lcd16x2_i2c_printf(p.name);
 801d138:	1d3b      	adds	r3, r7, #4
 801d13a:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801d13e:	4618      	mov	r0, r3
 801d140:	f7ff fefa 	bl	801cf38 <lcd16x2_i2c_printf>
			  lcd16x2_i2c_2ndLine();
 801d144:	f7ff fee6 	bl	801cf14 <lcd16x2_i2c_2ndLine>
			  lcd16x2_i2c_printf("Grad:");
 801d148:	4836      	ldr	r0, [pc, #216]	; (801d224 <main+0x248>)
 801d14a:	f7ff fef5 	bl	801cf38 <lcd16x2_i2c_printf>
			  lcd16x2_i2c_printf(p.grade);
 801d14e:	1d3b      	adds	r3, r7, #4
 801d150:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801d154:	4618      	mov	r0, r3
 801d156:	f7ff feef 	bl	801cf38 <lcd16x2_i2c_printf>

			  WS2811_Send();					// Sends to LED strip signal
 801d15a:	f7e4 f923 	bl	80013a4 <WS2811_Send>

			  BLUE_BUTTON = false;				// Reset blue button flag
 801d15e:	4b2b      	ldr	r3, [pc, #172]	; (801d20c <main+0x230>)
 801d160:	2200      	movs	r2, #0
 801d162:	701a      	strb	r2, [r3, #0]
		  }
	  }


		// If the message is received from bluetooth
	 if(BLUETOOTH_FLAG==1){
 801d164:	4b30      	ldr	r3, [pc, #192]	; (801d228 <main+0x24c>)
 801d166:	781b      	ldrb	r3, [r3, #0]
 801d168:	2b01      	cmp	r3, #1
 801d16a:	d182      	bne.n	801d072 <main+0x96>

		 if(buffer[0]=='D' && buffer[1]=='I' && buffer[2]=='S' && buffer[3]=='C' && buffer[4]=='O'){
 801d16c:	4b23      	ldr	r3, [pc, #140]	; (801d1fc <main+0x220>)
 801d16e:	781b      	ldrb	r3, [r3, #0]
 801d170:	2b44      	cmp	r3, #68	; 0x44
 801d172:	d113      	bne.n	801d19c <main+0x1c0>
 801d174:	4b21      	ldr	r3, [pc, #132]	; (801d1fc <main+0x220>)
 801d176:	785b      	ldrb	r3, [r3, #1]
 801d178:	2b49      	cmp	r3, #73	; 0x49
 801d17a:	d10f      	bne.n	801d19c <main+0x1c0>
 801d17c:	4b1f      	ldr	r3, [pc, #124]	; (801d1fc <main+0x220>)
 801d17e:	789b      	ldrb	r3, [r3, #2]
 801d180:	2b53      	cmp	r3, #83	; 0x53
 801d182:	d10b      	bne.n	801d19c <main+0x1c0>
 801d184:	4b1d      	ldr	r3, [pc, #116]	; (801d1fc <main+0x220>)
 801d186:	78db      	ldrb	r3, [r3, #3]
 801d188:	2b43      	cmp	r3, #67	; 0x43
 801d18a:	d107      	bne.n	801d19c <main+0x1c0>
 801d18c:	4b1b      	ldr	r3, [pc, #108]	; (801d1fc <main+0x220>)
 801d18e:	791b      	ldrb	r3, [r3, #4]
 801d190:	2b4f      	cmp	r3, #79	; 0x4f
 801d192:	d103      	bne.n	801d19c <main+0x1c0>
			 DISCO_FLAG = 1;
 801d194:	4b1e      	ldr	r3, [pc, #120]	; (801d210 <main+0x234>)
 801d196:	2201      	movs	r2, #1
 801d198:	701a      	strb	r2, [r3, #0]
			 continue;
 801d19a:	e026      	b.n	801d1ea <main+0x20e>
		 }

		MessageHandler(&p);					// Save in the struct the correct values from the string received
 801d19c:	1d3b      	adds	r3, r7, #4
 801d19e:	4618      	mov	r0, r3
 801d1a0:	f7e4 f9be 	bl	8001520 <MessageHandler>

		problem_genArray(&p);				// Generate matrix of color values from problem
 801d1a4:	1d3b      	adds	r3, r7, #4
 801d1a6:	4618      	mov	r0, r3
 801d1a8:	f7e3 ff58 	bl	800105c <problem_genArray>

		WS2811_Send();						// Send PWM to LEDs
 801d1ac:	f7e4 f8fa 	bl	80013a4 <WS2811_Send>

		// Display on led boulder info
		lcd16x2_i2c_clear();
 801d1b0:	f7ff feb8 	bl	801cf24 <lcd16x2_i2c_clear>
		lcd16x2_i2c_2ndLine();
 801d1b4:	f7ff feae 	bl	801cf14 <lcd16x2_i2c_2ndLine>
		lcd16x2_i2c_clear();
 801d1b8:	f7ff feb4 	bl	801cf24 <lcd16x2_i2c_clear>
		lcd16x2_i2c_printf("Name:");
 801d1bc:	4818      	ldr	r0, [pc, #96]	; (801d220 <main+0x244>)
 801d1be:	f7ff febb 	bl	801cf38 <lcd16x2_i2c_printf>
		lcd16x2_i2c_printf(p.name);
 801d1c2:	1d3b      	adds	r3, r7, #4
 801d1c4:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801d1c8:	4618      	mov	r0, r3
 801d1ca:	f7ff feb5 	bl	801cf38 <lcd16x2_i2c_printf>
		lcd16x2_i2c_2ndLine();
 801d1ce:	f7ff fea1 	bl	801cf14 <lcd16x2_i2c_2ndLine>
		lcd16x2_i2c_printf("Grad:");
 801d1d2:	4814      	ldr	r0, [pc, #80]	; (801d224 <main+0x248>)
 801d1d4:	f7ff feb0 	bl	801cf38 <lcd16x2_i2c_printf>
		lcd16x2_i2c_printf(p.grade);
 801d1d8:	1d3b      	adds	r3, r7, #4
 801d1da:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801d1de:	4618      	mov	r0, r3
 801d1e0:	f7ff feaa 	bl	801cf38 <lcd16x2_i2c_printf>

		BLUETOOTH_FLAG=0;					// Reset bluetooth flag in order to receive again
 801d1e4:	4b10      	ldr	r3, [pc, #64]	; (801d228 <main+0x24c>)
 801d1e6:	2200      	movs	r2, #0
 801d1e8:	701a      	strb	r2, [r3, #0]
	  if(BLUE_BUTTON){
 801d1ea:	e742      	b.n	801d072 <main+0x96>
 801d1ec:	20005424 	.word	0x20005424
 801d1f0:	40020000 	.word	0x40020000
 801d1f4:	0802cef8 	.word	0x0802cef8
 801d1f8:	40020400 	.word	0x40020400
 801d1fc:	20002b08 	.word	0x20002b08
 801d200:	200055b8 	.word	0x200055b8
 801d204:	0802cf0c 	.word	0x0802cf0c
 801d208:	0802cf20 	.word	0x0802cf20
 801d20c:	2000009d 	.word	0x2000009d
 801d210:	20000091 	.word	0x20000091
 801d214:	0802cf34 	.word	0x0802cf34
 801d218:	0802cf40 	.word	0x0802cf40
 801d21c:	0802cf50 	.word	0x0802cf50
 801d220:	0802cf60 	.word	0x0802cf60
 801d224:	0802cf68 	.word	0x0802cf68
 801d228:	20000090 	.word	0x20000090

0801d22c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 801d22c:	b580      	push	{r7, lr}
 801d22e:	b094      	sub	sp, #80	; 0x50
 801d230:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 801d232:	f107 0320 	add.w	r3, r7, #32
 801d236:	2230      	movs	r2, #48	; 0x30
 801d238:	2100      	movs	r1, #0
 801d23a:	4618      	mov	r0, r3
 801d23c:	f004 fd5d 	bl	8021cfa <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 801d240:	f107 030c 	add.w	r3, r7, #12
 801d244:	2200      	movs	r2, #0
 801d246:	601a      	str	r2, [r3, #0]
 801d248:	605a      	str	r2, [r3, #4]
 801d24a:	609a      	str	r2, [r3, #8]
 801d24c:	60da      	str	r2, [r3, #12]
 801d24e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 801d250:	2300      	movs	r3, #0
 801d252:	60bb      	str	r3, [r7, #8]
 801d254:	4b28      	ldr	r3, [pc, #160]	; (801d2f8 <SystemClock_Config+0xcc>)
 801d256:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801d258:	4a27      	ldr	r2, [pc, #156]	; (801d2f8 <SystemClock_Config+0xcc>)
 801d25a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801d25e:	6413      	str	r3, [r2, #64]	; 0x40
 801d260:	4b25      	ldr	r3, [pc, #148]	; (801d2f8 <SystemClock_Config+0xcc>)
 801d262:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801d264:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801d268:	60bb      	str	r3, [r7, #8]
 801d26a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 801d26c:	2300      	movs	r3, #0
 801d26e:	607b      	str	r3, [r7, #4]
 801d270:	4b22      	ldr	r3, [pc, #136]	; (801d2fc <SystemClock_Config+0xd0>)
 801d272:	681b      	ldr	r3, [r3, #0]
 801d274:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 801d278:	4a20      	ldr	r2, [pc, #128]	; (801d2fc <SystemClock_Config+0xd0>)
 801d27a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801d27e:	6013      	str	r3, [r2, #0]
 801d280:	4b1e      	ldr	r3, [pc, #120]	; (801d2fc <SystemClock_Config+0xd0>)
 801d282:	681b      	ldr	r3, [r3, #0]
 801d284:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 801d288:	607b      	str	r3, [r7, #4]
 801d28a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 801d28c:	2302      	movs	r3, #2
 801d28e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 801d290:	2301      	movs	r3, #1
 801d292:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 801d294:	2310      	movs	r3, #16
 801d296:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 801d298:	2302      	movs	r3, #2
 801d29a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 801d29c:	2300      	movs	r3, #0
 801d29e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 801d2a0:	2308      	movs	r3, #8
 801d2a2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 801d2a4:	2348      	movs	r3, #72	; 0x48
 801d2a6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 801d2a8:	2302      	movs	r3, #2
 801d2aa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 801d2ac:	2307      	movs	r3, #7
 801d2ae:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 801d2b0:	f107 0320 	add.w	r3, r7, #32
 801d2b4:	4618      	mov	r0, r3
 801d2b6:	f002 f8b3 	bl	801f420 <HAL_RCC_OscConfig>
 801d2ba:	4603      	mov	r3, r0
 801d2bc:	2b00      	cmp	r3, #0
 801d2be:	d001      	beq.n	801d2c4 <SystemClock_Config+0x98>
  {
    Error_Handler();
 801d2c0:	f000 f846 	bl	801d350 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 801d2c4:	230f      	movs	r3, #15
 801d2c6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 801d2c8:	2302      	movs	r3, #2
 801d2ca:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 801d2cc:	2300      	movs	r3, #0
 801d2ce:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 801d2d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801d2d4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 801d2d6:	2300      	movs	r3, #0
 801d2d8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 801d2da:	f107 030c 	add.w	r3, r7, #12
 801d2de:	2102      	movs	r1, #2
 801d2e0:	4618      	mov	r0, r3
 801d2e2:	f002 fb0d 	bl	801f900 <HAL_RCC_ClockConfig>
 801d2e6:	4603      	mov	r3, r0
 801d2e8:	2b00      	cmp	r3, #0
 801d2ea:	d001      	beq.n	801d2f0 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 801d2ec:	f000 f830 	bl	801d350 <Error_Handler>
  }
}
 801d2f0:	bf00      	nop
 801d2f2:	3750      	adds	r7, #80	; 0x50
 801d2f4:	46bd      	mov	sp, r7
 801d2f6:	bd80      	pop	{r7, pc}
 801d2f8:	40023800 	.word	0x40023800
 801d2fc:	40007000 	.word	0x40007000

0801d300 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 801d300:	b480      	push	{r7}
 801d302:	b083      	sub	sp, #12
 801d304:	af00      	add	r7, sp, #0
 801d306:	4603      	mov	r3, r0
 801d308:	80fb      	strh	r3, [r7, #6]

	// interrupt blue button
	if(GPIO_Pin==B1_Pin){
 801d30a:	88fb      	ldrh	r3, [r7, #6]
 801d30c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801d310:	d102      	bne.n	801d318 <HAL_GPIO_EXTI_Callback+0x18>
		BLUE_BUTTON = true;
 801d312:	4b04      	ldr	r3, [pc, #16]	; (801d324 <HAL_GPIO_EXTI_Callback+0x24>)
 801d314:	2201      	movs	r2, #1
 801d316:	701a      	strb	r2, [r3, #0]
	}
}
 801d318:	bf00      	nop
 801d31a:	370c      	adds	r7, #12
 801d31c:	46bd      	mov	sp, r7
 801d31e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d322:	4770      	bx	lr
 801d324:	2000009d 	.word	0x2000009d

0801d328 <HAL_UART_RxCpltCallback>:



void HAL_UART_RxCpltCallback(UART_HandleTypeDef * huart){
 801d328:	b480      	push	{r7}
 801d32a:	b083      	sub	sp, #12
 801d32c:	af00      	add	r7, sp, #0
 801d32e:	6078      	str	r0, [r7, #4]

	if(BLUETOOTH_FLAG == 0){
 801d330:	4b06      	ldr	r3, [pc, #24]	; (801d34c <HAL_UART_RxCpltCallback+0x24>)
 801d332:	781b      	ldrb	r3, [r3, #0]
 801d334:	2b00      	cmp	r3, #0
 801d336:	d102      	bne.n	801d33e <HAL_UART_RxCpltCallback+0x16>
		BLUETOOTH_FLAG = 1;
 801d338:	4b04      	ldr	r3, [pc, #16]	; (801d34c <HAL_UART_RxCpltCallback+0x24>)
 801d33a:	2201      	movs	r2, #1
 801d33c:	701a      	strb	r2, [r3, #0]
	}


}
 801d33e:	bf00      	nop
 801d340:	370c      	adds	r7, #12
 801d342:	46bd      	mov	sp, r7
 801d344:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d348:	4770      	bx	lr
 801d34a:	bf00      	nop
 801d34c:	20000090 	.word	0x20000090

0801d350 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 801d350:	b480      	push	{r7}
 801d352:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 801d354:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 801d356:	e7fe      	b.n	801d356 <Error_Handler+0x6>

0801d358 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 801d358:	b580      	push	{r7, lr}
 801d35a:	b082      	sub	sp, #8
 801d35c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 801d35e:	2300      	movs	r3, #0
 801d360:	607b      	str	r3, [r7, #4]
 801d362:	4b14      	ldr	r3, [pc, #80]	; (801d3b4 <HAL_MspInit+0x5c>)
 801d364:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801d366:	4a13      	ldr	r2, [pc, #76]	; (801d3b4 <HAL_MspInit+0x5c>)
 801d368:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 801d36c:	6453      	str	r3, [r2, #68]	; 0x44
 801d36e:	4b11      	ldr	r3, [pc, #68]	; (801d3b4 <HAL_MspInit+0x5c>)
 801d370:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801d372:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801d376:	607b      	str	r3, [r7, #4]
 801d378:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 801d37a:	2300      	movs	r3, #0
 801d37c:	603b      	str	r3, [r7, #0]
 801d37e:	4b0d      	ldr	r3, [pc, #52]	; (801d3b4 <HAL_MspInit+0x5c>)
 801d380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801d382:	4a0c      	ldr	r2, [pc, #48]	; (801d3b4 <HAL_MspInit+0x5c>)
 801d384:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801d388:	6413      	str	r3, [r2, #64]	; 0x40
 801d38a:	4b0a      	ldr	r3, [pc, #40]	; (801d3b4 <HAL_MspInit+0x5c>)
 801d38c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801d38e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801d392:	603b      	str	r3, [r7, #0]
 801d394:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 801d396:	2007      	movs	r0, #7
 801d398:	f000 fd36 	bl	801de08 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* FPU_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(FPU_IRQn, 0, 0);
 801d39c:	2200      	movs	r2, #0
 801d39e:	2100      	movs	r1, #0
 801d3a0:	2051      	movs	r0, #81	; 0x51
 801d3a2:	f000 fd3c 	bl	801de1e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FPU_IRQn);
 801d3a6:	2051      	movs	r0, #81	; 0x51
 801d3a8:	f000 fd55 	bl	801de56 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 801d3ac:	bf00      	nop
 801d3ae:	3708      	adds	r7, #8
 801d3b0:	46bd      	mov	sp, r7
 801d3b2:	bd80      	pop	{r7, pc}
 801d3b4:	40023800 	.word	0x40023800

0801d3b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 801d3b8:	b480      	push	{r7}
 801d3ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 801d3bc:	e7fe      	b.n	801d3bc <NMI_Handler+0x4>

0801d3be <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 801d3be:	b480      	push	{r7}
 801d3c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 801d3c2:	e7fe      	b.n	801d3c2 <HardFault_Handler+0x4>

0801d3c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 801d3c4:	b480      	push	{r7}
 801d3c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 801d3c8:	e7fe      	b.n	801d3c8 <MemManage_Handler+0x4>

0801d3ca <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 801d3ca:	b480      	push	{r7}
 801d3cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 801d3ce:	e7fe      	b.n	801d3ce <BusFault_Handler+0x4>

0801d3d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 801d3d0:	b480      	push	{r7}
 801d3d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 801d3d4:	e7fe      	b.n	801d3d4 <UsageFault_Handler+0x4>

0801d3d6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 801d3d6:	b480      	push	{r7}
 801d3d8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 801d3da:	bf00      	nop
 801d3dc:	46bd      	mov	sp, r7
 801d3de:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d3e2:	4770      	bx	lr

0801d3e4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 801d3e4:	b480      	push	{r7}
 801d3e6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 801d3e8:	bf00      	nop
 801d3ea:	46bd      	mov	sp, r7
 801d3ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d3f0:	4770      	bx	lr

0801d3f2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 801d3f2:	b480      	push	{r7}
 801d3f4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 801d3f6:	bf00      	nop
 801d3f8:	46bd      	mov	sp, r7
 801d3fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d3fe:	4770      	bx	lr

0801d400 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 801d400:	b580      	push	{r7, lr}
 801d402:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 801d404:	f000 fbee 	bl	801dbe4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 801d408:	bf00      	nop
 801d40a:	bd80      	pop	{r7, pc}

0801d40c <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 801d40c:	b580      	push	{r7, lr}
 801d40e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch1_trig);
 801d410:	4802      	ldr	r0, [pc, #8]	; (801d41c <DMA1_Stream4_IRQHandler+0x10>)
 801d412:	f000 fe63 	bl	801e0dc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 801d416:	bf00      	nop
 801d418:	bd80      	pop	{r7, pc}
 801d41a:	bf00      	nop
 801d41c:	20005518 	.word	0x20005518

0801d420 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 801d420:	b580      	push	{r7, lr}
 801d422:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */
  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch1);
 801d424:	4802      	ldr	r0, [pc, #8]	; (801d430 <DMA1_Stream5_IRQHandler+0x10>)
 801d426:	f000 fe59 	bl	801e0dc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 801d42a:	bf00      	nop
 801d42c:	bd80      	pop	{r7, pc}
 801d42e:	bf00      	nop
 801d430:	20005478 	.word	0x20005478

0801d434 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 801d434:	b580      	push	{r7, lr}
 801d436:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 801d438:	4802      	ldr	r0, [pc, #8]	; (801d444 <TIM2_IRQHandler+0x10>)
 801d43a:	f002 fe5f 	bl	80200fc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 801d43e:	bf00      	nop
 801d440:	bd80      	pop	{r7, pc}
 801d442:	bf00      	nop
 801d444:	20005578 	.word	0x20005578

0801d448 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 801d448:	b580      	push	{r7, lr}
 801d44a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 801d44c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 801d450:	f001 fa60 	bl	801e914 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 801d454:	bf00      	nop
 801d456:	bd80      	pop	{r7, pc}

0801d458 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 801d458:	b580      	push	{r7, lr}
 801d45a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 801d45c:	4802      	ldr	r0, [pc, #8]	; (801d468 <USART6_IRQHandler+0x10>)
 801d45e:	f003 fe1b 	bl	8021098 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 801d462:	bf00      	nop
 801d464:	bd80      	pop	{r7, pc}
 801d466:	bf00      	nop
 801d468:	200055b8 	.word	0x200055b8

0801d46c <FPU_IRQHandler>:

/**
  * @brief This function handles FPU global interrupt.
  */
void FPU_IRQHandler(void)
{
 801d46c:	b480      	push	{r7}
 801d46e:	af00      	add	r7, sp, #0

  /* USER CODE END FPU_IRQn 0 */
  /* USER CODE BEGIN FPU_IRQn 1 */

  /* USER CODE END FPU_IRQn 1 */
}
 801d470:	bf00      	nop
 801d472:	46bd      	mov	sp, r7
 801d474:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d478:	4770      	bx	lr
	...

0801d47c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 801d47c:	b580      	push	{r7, lr}
 801d47e:	b086      	sub	sp, #24
 801d480:	af00      	add	r7, sp, #0
 801d482:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 801d484:	4a14      	ldr	r2, [pc, #80]	; (801d4d8 <_sbrk+0x5c>)
 801d486:	4b15      	ldr	r3, [pc, #84]	; (801d4dc <_sbrk+0x60>)
 801d488:	1ad3      	subs	r3, r2, r3
 801d48a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 801d48c:	697b      	ldr	r3, [r7, #20]
 801d48e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 801d490:	4b13      	ldr	r3, [pc, #76]	; (801d4e0 <_sbrk+0x64>)
 801d492:	681b      	ldr	r3, [r3, #0]
 801d494:	2b00      	cmp	r3, #0
 801d496:	d102      	bne.n	801d49e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 801d498:	4b11      	ldr	r3, [pc, #68]	; (801d4e0 <_sbrk+0x64>)
 801d49a:	4a12      	ldr	r2, [pc, #72]	; (801d4e4 <_sbrk+0x68>)
 801d49c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 801d49e:	4b10      	ldr	r3, [pc, #64]	; (801d4e0 <_sbrk+0x64>)
 801d4a0:	681a      	ldr	r2, [r3, #0]
 801d4a2:	687b      	ldr	r3, [r7, #4]
 801d4a4:	4413      	add	r3, r2
 801d4a6:	693a      	ldr	r2, [r7, #16]
 801d4a8:	429a      	cmp	r2, r3
 801d4aa:	d207      	bcs.n	801d4bc <_sbrk+0x40>
  {
    errno = ENOMEM;
 801d4ac:	f004 fbf0 	bl	8021c90 <__errno>
 801d4b0:	4602      	mov	r2, r0
 801d4b2:	230c      	movs	r3, #12
 801d4b4:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 801d4b6:	f04f 33ff 	mov.w	r3, #4294967295
 801d4ba:	e009      	b.n	801d4d0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 801d4bc:	4b08      	ldr	r3, [pc, #32]	; (801d4e0 <_sbrk+0x64>)
 801d4be:	681b      	ldr	r3, [r3, #0]
 801d4c0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 801d4c2:	4b07      	ldr	r3, [pc, #28]	; (801d4e0 <_sbrk+0x64>)
 801d4c4:	681a      	ldr	r2, [r3, #0]
 801d4c6:	687b      	ldr	r3, [r7, #4]
 801d4c8:	4413      	add	r3, r2
 801d4ca:	4a05      	ldr	r2, [pc, #20]	; (801d4e0 <_sbrk+0x64>)
 801d4cc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 801d4ce:	68fb      	ldr	r3, [r7, #12]
}
 801d4d0:	4618      	mov	r0, r3
 801d4d2:	3718      	adds	r7, #24
 801d4d4:	46bd      	mov	sp, r7
 801d4d6:	bd80      	pop	{r7, pc}
 801d4d8:	20018000 	.word	0x20018000
 801d4dc:	00000400 	.word	0x00000400
 801d4e0:	200000a0 	.word	0x200000a0
 801d4e4:	20005640 	.word	0x20005640

0801d4e8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 801d4e8:	b480      	push	{r7}
 801d4ea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 801d4ec:	4b08      	ldr	r3, [pc, #32]	; (801d510 <SystemInit+0x28>)
 801d4ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801d4f2:	4a07      	ldr	r2, [pc, #28]	; (801d510 <SystemInit+0x28>)
 801d4f4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 801d4f8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 801d4fc:	4b04      	ldr	r3, [pc, #16]	; (801d510 <SystemInit+0x28>)
 801d4fe:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 801d502:	609a      	str	r2, [r3, #8]
#endif
}
 801d504:	bf00      	nop
 801d506:	46bd      	mov	sp, r7
 801d508:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d50c:	4770      	bx	lr
 801d50e:	bf00      	nop
 801d510:	e000ed00 	.word	0xe000ed00

0801d514 <MX_TIM2_Init>:
DMA_HandleTypeDef hdma_tim2_ch1;
DMA_HandleTypeDef hdma_tim3_ch1_trig;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 801d514:	b580      	push	{r7, lr}
 801d516:	b08e      	sub	sp, #56	; 0x38
 801d518:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 801d51a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801d51e:	2200      	movs	r2, #0
 801d520:	601a      	str	r2, [r3, #0]
 801d522:	605a      	str	r2, [r3, #4]
 801d524:	609a      	str	r2, [r3, #8]
 801d526:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 801d528:	f107 0320 	add.w	r3, r7, #32
 801d52c:	2200      	movs	r2, #0
 801d52e:	601a      	str	r2, [r3, #0]
 801d530:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 801d532:	1d3b      	adds	r3, r7, #4
 801d534:	2200      	movs	r2, #0
 801d536:	601a      	str	r2, [r3, #0]
 801d538:	605a      	str	r2, [r3, #4]
 801d53a:	609a      	str	r2, [r3, #8]
 801d53c:	60da      	str	r2, [r3, #12]
 801d53e:	611a      	str	r2, [r3, #16]
 801d540:	615a      	str	r2, [r3, #20]
 801d542:	619a      	str	r2, [r3, #24]

  htim2.Instance = TIM2;
 801d544:	4b2c      	ldr	r3, [pc, #176]	; (801d5f8 <MX_TIM2_Init+0xe4>)
 801d546:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 801d54a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1-1;
 801d54c:	4b2a      	ldr	r3, [pc, #168]	; (801d5f8 <MX_TIM2_Init+0xe4>)
 801d54e:	2200      	movs	r2, #0
 801d550:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 801d552:	4b29      	ldr	r3, [pc, #164]	; (801d5f8 <MX_TIM2_Init+0xe4>)
 801d554:	2200      	movs	r2, #0
 801d556:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 90-1;
 801d558:	4b27      	ldr	r3, [pc, #156]	; (801d5f8 <MX_TIM2_Init+0xe4>)
 801d55a:	2259      	movs	r2, #89	; 0x59
 801d55c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 801d55e:	4b26      	ldr	r3, [pc, #152]	; (801d5f8 <MX_TIM2_Init+0xe4>)
 801d560:	2200      	movs	r2, #0
 801d562:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 801d564:	4b24      	ldr	r3, [pc, #144]	; (801d5f8 <MX_TIM2_Init+0xe4>)
 801d566:	2280      	movs	r2, #128	; 0x80
 801d568:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 801d56a:	4823      	ldr	r0, [pc, #140]	; (801d5f8 <MX_TIM2_Init+0xe4>)
 801d56c:	f002 fbba 	bl	801fce4 <HAL_TIM_Base_Init>
 801d570:	4603      	mov	r3, r0
 801d572:	2b00      	cmp	r3, #0
 801d574:	d001      	beq.n	801d57a <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 801d576:	f7ff feeb 	bl	801d350 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 801d57a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801d57e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 801d580:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801d584:	4619      	mov	r1, r3
 801d586:	481c      	ldr	r0, [pc, #112]	; (801d5f8 <MX_TIM2_Init+0xe4>)
 801d588:	f002 ff86 	bl	8020498 <HAL_TIM_ConfigClockSource>
 801d58c:	4603      	mov	r3, r0
 801d58e:	2b00      	cmp	r3, #0
 801d590:	d001      	beq.n	801d596 <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 801d592:	f7ff fedd 	bl	801d350 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 801d596:	4818      	ldr	r0, [pc, #96]	; (801d5f8 <MX_TIM2_Init+0xe4>)
 801d598:	f002 fbcf 	bl	801fd3a <HAL_TIM_PWM_Init>
 801d59c:	4603      	mov	r3, r0
 801d59e:	2b00      	cmp	r3, #0
 801d5a0:	d001      	beq.n	801d5a6 <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 801d5a2:	f7ff fed5 	bl	801d350 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 801d5a6:	2300      	movs	r3, #0
 801d5a8:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 801d5aa:	2300      	movs	r3, #0
 801d5ac:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 801d5ae:	f107 0320 	add.w	r3, r7, #32
 801d5b2:	4619      	mov	r1, r3
 801d5b4:	4810      	ldr	r0, [pc, #64]	; (801d5f8 <MX_TIM2_Init+0xe4>)
 801d5b6:	f003 fbb1 	bl	8020d1c <HAL_TIMEx_MasterConfigSynchronization>
 801d5ba:	4603      	mov	r3, r0
 801d5bc:	2b00      	cmp	r3, #0
 801d5be:	d001      	beq.n	801d5c4 <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 801d5c0:	f7ff fec6 	bl	801d350 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 801d5c4:	2360      	movs	r3, #96	; 0x60
 801d5c6:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1;
 801d5c8:	2301      	movs	r3, #1
 801d5ca:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 801d5cc:	2300      	movs	r3, #0
 801d5ce:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 801d5d0:	2300      	movs	r3, #0
 801d5d2:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 801d5d4:	1d3b      	adds	r3, r7, #4
 801d5d6:	2200      	movs	r2, #0
 801d5d8:	4619      	mov	r1, r3
 801d5da:	4807      	ldr	r0, [pc, #28]	; (801d5f8 <MX_TIM2_Init+0xe4>)
 801d5dc:	f002 fe96 	bl	802030c <HAL_TIM_PWM_ConfigChannel>
 801d5e0:	4603      	mov	r3, r0
 801d5e2:	2b00      	cmp	r3, #0
 801d5e4:	d001      	beq.n	801d5ea <MX_TIM2_Init+0xd6>
  {
    Error_Handler();
 801d5e6:	f7ff feb3 	bl	801d350 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim2);
 801d5ea:	4803      	ldr	r0, [pc, #12]	; (801d5f8 <MX_TIM2_Init+0xe4>)
 801d5ec:	f000 f928 	bl	801d840 <HAL_TIM_MspPostInit>

}
 801d5f0:	bf00      	nop
 801d5f2:	3738      	adds	r7, #56	; 0x38
 801d5f4:	46bd      	mov	sp, r7
 801d5f6:	bd80      	pop	{r7, pc}
 801d5f8:	20005578 	.word	0x20005578

0801d5fc <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 801d5fc:	b580      	push	{r7, lr}
 801d5fe:	b08e      	sub	sp, #56	; 0x38
 801d600:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 801d602:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801d606:	2200      	movs	r2, #0
 801d608:	601a      	str	r2, [r3, #0]
 801d60a:	605a      	str	r2, [r3, #4]
 801d60c:	609a      	str	r2, [r3, #8]
 801d60e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 801d610:	f107 0320 	add.w	r3, r7, #32
 801d614:	2200      	movs	r2, #0
 801d616:	601a      	str	r2, [r3, #0]
 801d618:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 801d61a:	1d3b      	adds	r3, r7, #4
 801d61c:	2200      	movs	r2, #0
 801d61e:	601a      	str	r2, [r3, #0]
 801d620:	605a      	str	r2, [r3, #4]
 801d622:	609a      	str	r2, [r3, #8]
 801d624:	60da      	str	r2, [r3, #12]
 801d626:	611a      	str	r2, [r3, #16]
 801d628:	615a      	str	r2, [r3, #20]
 801d62a:	619a      	str	r2, [r3, #24]

  htim3.Instance = TIM3;
 801d62c:	4b2c      	ldr	r3, [pc, #176]	; (801d6e0 <MX_TIM3_Init+0xe4>)
 801d62e:	4a2d      	ldr	r2, [pc, #180]	; (801d6e4 <MX_TIM3_Init+0xe8>)
 801d630:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1-1;
 801d632:	4b2b      	ldr	r3, [pc, #172]	; (801d6e0 <MX_TIM3_Init+0xe4>)
 801d634:	2200      	movs	r2, #0
 801d636:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 801d638:	4b29      	ldr	r3, [pc, #164]	; (801d6e0 <MX_TIM3_Init+0xe4>)
 801d63a:	2200      	movs	r2, #0
 801d63c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 90-1;
 801d63e:	4b28      	ldr	r3, [pc, #160]	; (801d6e0 <MX_TIM3_Init+0xe4>)
 801d640:	2259      	movs	r2, #89	; 0x59
 801d642:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 801d644:	4b26      	ldr	r3, [pc, #152]	; (801d6e0 <MX_TIM3_Init+0xe4>)
 801d646:	2200      	movs	r2, #0
 801d648:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 801d64a:	4b25      	ldr	r3, [pc, #148]	; (801d6e0 <MX_TIM3_Init+0xe4>)
 801d64c:	2280      	movs	r2, #128	; 0x80
 801d64e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 801d650:	4823      	ldr	r0, [pc, #140]	; (801d6e0 <MX_TIM3_Init+0xe4>)
 801d652:	f002 fb47 	bl	801fce4 <HAL_TIM_Base_Init>
 801d656:	4603      	mov	r3, r0
 801d658:	2b00      	cmp	r3, #0
 801d65a:	d001      	beq.n	801d660 <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 801d65c:	f7ff fe78 	bl	801d350 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 801d660:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801d664:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 801d666:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801d66a:	4619      	mov	r1, r3
 801d66c:	481c      	ldr	r0, [pc, #112]	; (801d6e0 <MX_TIM3_Init+0xe4>)
 801d66e:	f002 ff13 	bl	8020498 <HAL_TIM_ConfigClockSource>
 801d672:	4603      	mov	r3, r0
 801d674:	2b00      	cmp	r3, #0
 801d676:	d001      	beq.n	801d67c <MX_TIM3_Init+0x80>
  {
    Error_Handler();
 801d678:	f7ff fe6a 	bl	801d350 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 801d67c:	4818      	ldr	r0, [pc, #96]	; (801d6e0 <MX_TIM3_Init+0xe4>)
 801d67e:	f002 fb5c 	bl	801fd3a <HAL_TIM_PWM_Init>
 801d682:	4603      	mov	r3, r0
 801d684:	2b00      	cmp	r3, #0
 801d686:	d001      	beq.n	801d68c <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 801d688:	f7ff fe62 	bl	801d350 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 801d68c:	2300      	movs	r3, #0
 801d68e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 801d690:	2300      	movs	r3, #0
 801d692:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 801d694:	f107 0320 	add.w	r3, r7, #32
 801d698:	4619      	mov	r1, r3
 801d69a:	4811      	ldr	r0, [pc, #68]	; (801d6e0 <MX_TIM3_Init+0xe4>)
 801d69c:	f003 fb3e 	bl	8020d1c <HAL_TIMEx_MasterConfigSynchronization>
 801d6a0:	4603      	mov	r3, r0
 801d6a2:	2b00      	cmp	r3, #0
 801d6a4:	d001      	beq.n	801d6aa <MX_TIM3_Init+0xae>
  {
    Error_Handler();
 801d6a6:	f7ff fe53 	bl	801d350 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 801d6aa:	2360      	movs	r3, #96	; 0x60
 801d6ac:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1;
 801d6ae:	2301      	movs	r3, #1
 801d6b0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 801d6b2:	2300      	movs	r3, #0
 801d6b4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 801d6b6:	2300      	movs	r3, #0
 801d6b8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 801d6ba:	1d3b      	adds	r3, r7, #4
 801d6bc:	2200      	movs	r2, #0
 801d6be:	4619      	mov	r1, r3
 801d6c0:	4807      	ldr	r0, [pc, #28]	; (801d6e0 <MX_TIM3_Init+0xe4>)
 801d6c2:	f002 fe23 	bl	802030c <HAL_TIM_PWM_ConfigChannel>
 801d6c6:	4603      	mov	r3, r0
 801d6c8:	2b00      	cmp	r3, #0
 801d6ca:	d001      	beq.n	801d6d0 <MX_TIM3_Init+0xd4>
  {
    Error_Handler();
 801d6cc:	f7ff fe40 	bl	801d350 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim3);
 801d6d0:	4803      	ldr	r0, [pc, #12]	; (801d6e0 <MX_TIM3_Init+0xe4>)
 801d6d2:	f000 f8b5 	bl	801d840 <HAL_TIM_MspPostInit>

}
 801d6d6:	bf00      	nop
 801d6d8:	3738      	adds	r7, #56	; 0x38
 801d6da:	46bd      	mov	sp, r7
 801d6dc:	bd80      	pop	{r7, pc}
 801d6de:	bf00      	nop
 801d6e0:	200054d8 	.word	0x200054d8
 801d6e4:	40000400 	.word	0x40000400

0801d6e8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 801d6e8:	b580      	push	{r7, lr}
 801d6ea:	b084      	sub	sp, #16
 801d6ec:	af00      	add	r7, sp, #0
 801d6ee:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 801d6f0:	687b      	ldr	r3, [r7, #4]
 801d6f2:	681b      	ldr	r3, [r3, #0]
 801d6f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801d6f8:	d147      	bne.n	801d78a <HAL_TIM_Base_MspInit+0xa2>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 801d6fa:	2300      	movs	r3, #0
 801d6fc:	60fb      	str	r3, [r7, #12]
 801d6fe:	4b4a      	ldr	r3, [pc, #296]	; (801d828 <HAL_TIM_Base_MspInit+0x140>)
 801d700:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801d702:	4a49      	ldr	r2, [pc, #292]	; (801d828 <HAL_TIM_Base_MspInit+0x140>)
 801d704:	f043 0301 	orr.w	r3, r3, #1
 801d708:	6413      	str	r3, [r2, #64]	; 0x40
 801d70a:	4b47      	ldr	r3, [pc, #284]	; (801d828 <HAL_TIM_Base_MspInit+0x140>)
 801d70c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801d70e:	f003 0301 	and.w	r3, r3, #1
 801d712:	60fb      	str	r3, [r7, #12]
 801d714:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 DMA Init */
    /* TIM2_CH1 Init */
    hdma_tim2_ch1.Instance = DMA1_Stream5;
 801d716:	4b45      	ldr	r3, [pc, #276]	; (801d82c <HAL_TIM_Base_MspInit+0x144>)
 801d718:	4a45      	ldr	r2, [pc, #276]	; (801d830 <HAL_TIM_Base_MspInit+0x148>)
 801d71a:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch1.Init.Channel = DMA_CHANNEL_3;
 801d71c:	4b43      	ldr	r3, [pc, #268]	; (801d82c <HAL_TIM_Base_MspInit+0x144>)
 801d71e:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 801d722:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 801d724:	4b41      	ldr	r3, [pc, #260]	; (801d82c <HAL_TIM_Base_MspInit+0x144>)
 801d726:	2240      	movs	r2, #64	; 0x40
 801d728:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 801d72a:	4b40      	ldr	r3, [pc, #256]	; (801d82c <HAL_TIM_Base_MspInit+0x144>)
 801d72c:	2200      	movs	r2, #0
 801d72e:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch1.Init.MemInc = DMA_MINC_ENABLE;
 801d730:	4b3e      	ldr	r3, [pc, #248]	; (801d82c <HAL_TIM_Base_MspInit+0x144>)
 801d732:	f44f 6280 	mov.w	r2, #1024	; 0x400
 801d736:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 801d738:	4b3c      	ldr	r3, [pc, #240]	; (801d82c <HAL_TIM_Base_MspInit+0x144>)
 801d73a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 801d73e:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 801d740:	4b3a      	ldr	r3, [pc, #232]	; (801d82c <HAL_TIM_Base_MspInit+0x144>)
 801d742:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 801d746:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch1.Init.Mode = DMA_CIRCULAR;
 801d748:	4b38      	ldr	r3, [pc, #224]	; (801d82c <HAL_TIM_Base_MspInit+0x144>)
 801d74a:	f44f 7280 	mov.w	r2, #256	; 0x100
 801d74e:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch1.Init.Priority = DMA_PRIORITY_LOW;
 801d750:	4b36      	ldr	r3, [pc, #216]	; (801d82c <HAL_TIM_Base_MspInit+0x144>)
 801d752:	2200      	movs	r2, #0
 801d754:	621a      	str	r2, [r3, #32]
    hdma_tim2_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 801d756:	4b35      	ldr	r3, [pc, #212]	; (801d82c <HAL_TIM_Base_MspInit+0x144>)
 801d758:	2200      	movs	r2, #0
 801d75a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim2_ch1) != HAL_OK)
 801d75c:	4833      	ldr	r0, [pc, #204]	; (801d82c <HAL_TIM_Base_MspInit+0x144>)
 801d75e:	f000 fb95 	bl	801de8c <HAL_DMA_Init>
 801d762:	4603      	mov	r3, r0
 801d764:	2b00      	cmp	r3, #0
 801d766:	d001      	beq.n	801d76c <HAL_TIM_Base_MspInit+0x84>
    {
      Error_Handler();
 801d768:	f7ff fdf2 	bl	801d350 <Error_Handler>
    }

    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC1],hdma_tim2_ch1);
 801d76c:	687b      	ldr	r3, [r7, #4]
 801d76e:	4a2f      	ldr	r2, [pc, #188]	; (801d82c <HAL_TIM_Base_MspInit+0x144>)
 801d770:	625a      	str	r2, [r3, #36]	; 0x24
 801d772:	4a2e      	ldr	r2, [pc, #184]	; (801d82c <HAL_TIM_Base_MspInit+0x144>)
 801d774:	687b      	ldr	r3, [r7, #4]
 801d776:	6393      	str	r3, [r2, #56]	; 0x38

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 801d778:	2200      	movs	r2, #0
 801d77a:	2100      	movs	r1, #0
 801d77c:	201c      	movs	r0, #28
 801d77e:	f000 fb4e 	bl	801de1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 801d782:	201c      	movs	r0, #28
 801d784:	f000 fb67 	bl	801de56 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 801d788:	e049      	b.n	801d81e <HAL_TIM_Base_MspInit+0x136>
  else if(tim_baseHandle->Instance==TIM3)
 801d78a:	687b      	ldr	r3, [r7, #4]
 801d78c:	681b      	ldr	r3, [r3, #0]
 801d78e:	4a29      	ldr	r2, [pc, #164]	; (801d834 <HAL_TIM_Base_MspInit+0x14c>)
 801d790:	4293      	cmp	r3, r2
 801d792:	d144      	bne.n	801d81e <HAL_TIM_Base_MspInit+0x136>
    __HAL_RCC_TIM3_CLK_ENABLE();
 801d794:	2300      	movs	r3, #0
 801d796:	60bb      	str	r3, [r7, #8]
 801d798:	4b23      	ldr	r3, [pc, #140]	; (801d828 <HAL_TIM_Base_MspInit+0x140>)
 801d79a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801d79c:	4a22      	ldr	r2, [pc, #136]	; (801d828 <HAL_TIM_Base_MspInit+0x140>)
 801d79e:	f043 0302 	orr.w	r3, r3, #2
 801d7a2:	6413      	str	r3, [r2, #64]	; 0x40
 801d7a4:	4b20      	ldr	r3, [pc, #128]	; (801d828 <HAL_TIM_Base_MspInit+0x140>)
 801d7a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801d7a8:	f003 0302 	and.w	r3, r3, #2
 801d7ac:	60bb      	str	r3, [r7, #8]
 801d7ae:	68bb      	ldr	r3, [r7, #8]
    hdma_tim3_ch1_trig.Instance = DMA1_Stream4;
 801d7b0:	4b21      	ldr	r3, [pc, #132]	; (801d838 <HAL_TIM_Base_MspInit+0x150>)
 801d7b2:	4a22      	ldr	r2, [pc, #136]	; (801d83c <HAL_TIM_Base_MspInit+0x154>)
 801d7b4:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch1_trig.Init.Channel = DMA_CHANNEL_5;
 801d7b6:	4b20      	ldr	r3, [pc, #128]	; (801d838 <HAL_TIM_Base_MspInit+0x150>)
 801d7b8:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 801d7bc:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch1_trig.Init.Direction = DMA_MEMORY_TO_PERIPH;
 801d7be:	4b1e      	ldr	r3, [pc, #120]	; (801d838 <HAL_TIM_Base_MspInit+0x150>)
 801d7c0:	2240      	movs	r2, #64	; 0x40
 801d7c2:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch1_trig.Init.PeriphInc = DMA_PINC_DISABLE;
 801d7c4:	4b1c      	ldr	r3, [pc, #112]	; (801d838 <HAL_TIM_Base_MspInit+0x150>)
 801d7c6:	2200      	movs	r2, #0
 801d7c8:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch1_trig.Init.MemInc = DMA_MINC_ENABLE;
 801d7ca:	4b1b      	ldr	r3, [pc, #108]	; (801d838 <HAL_TIM_Base_MspInit+0x150>)
 801d7cc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 801d7d0:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch1_trig.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 801d7d2:	4b19      	ldr	r3, [pc, #100]	; (801d838 <HAL_TIM_Base_MspInit+0x150>)
 801d7d4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 801d7d8:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch1_trig.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 801d7da:	4b17      	ldr	r3, [pc, #92]	; (801d838 <HAL_TIM_Base_MspInit+0x150>)
 801d7dc:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 801d7e0:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch1_trig.Init.Mode = DMA_CIRCULAR;
 801d7e2:	4b15      	ldr	r3, [pc, #84]	; (801d838 <HAL_TIM_Base_MspInit+0x150>)
 801d7e4:	f44f 7280 	mov.w	r2, #256	; 0x100
 801d7e8:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch1_trig.Init.Priority = DMA_PRIORITY_LOW;
 801d7ea:	4b13      	ldr	r3, [pc, #76]	; (801d838 <HAL_TIM_Base_MspInit+0x150>)
 801d7ec:	2200      	movs	r2, #0
 801d7ee:	621a      	str	r2, [r3, #32]
    hdma_tim3_ch1_trig.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 801d7f0:	4b11      	ldr	r3, [pc, #68]	; (801d838 <HAL_TIM_Base_MspInit+0x150>)
 801d7f2:	2200      	movs	r2, #0
 801d7f4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim3_ch1_trig) != HAL_OK)
 801d7f6:	4810      	ldr	r0, [pc, #64]	; (801d838 <HAL_TIM_Base_MspInit+0x150>)
 801d7f8:	f000 fb48 	bl	801de8c <HAL_DMA_Init>
 801d7fc:	4603      	mov	r3, r0
 801d7fe:	2b00      	cmp	r3, #0
 801d800:	d001      	beq.n	801d806 <HAL_TIM_Base_MspInit+0x11e>
      Error_Handler();
 801d802:	f7ff fda5 	bl	801d350 <Error_Handler>
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC1],hdma_tim3_ch1_trig);
 801d806:	687b      	ldr	r3, [r7, #4]
 801d808:	4a0b      	ldr	r2, [pc, #44]	; (801d838 <HAL_TIM_Base_MspInit+0x150>)
 801d80a:	625a      	str	r2, [r3, #36]	; 0x24
 801d80c:	4a0a      	ldr	r2, [pc, #40]	; (801d838 <HAL_TIM_Base_MspInit+0x150>)
 801d80e:	687b      	ldr	r3, [r7, #4]
 801d810:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_TRIGGER],hdma_tim3_ch1_trig);
 801d812:	687b      	ldr	r3, [r7, #4]
 801d814:	4a08      	ldr	r2, [pc, #32]	; (801d838 <HAL_TIM_Base_MspInit+0x150>)
 801d816:	639a      	str	r2, [r3, #56]	; 0x38
 801d818:	4a07      	ldr	r2, [pc, #28]	; (801d838 <HAL_TIM_Base_MspInit+0x150>)
 801d81a:	687b      	ldr	r3, [r7, #4]
 801d81c:	6393      	str	r3, [r2, #56]	; 0x38
}
 801d81e:	bf00      	nop
 801d820:	3710      	adds	r7, #16
 801d822:	46bd      	mov	sp, r7
 801d824:	bd80      	pop	{r7, pc}
 801d826:	bf00      	nop
 801d828:	40023800 	.word	0x40023800
 801d82c:	20005478 	.word	0x20005478
 801d830:	40026088 	.word	0x40026088
 801d834:	40000400 	.word	0x40000400
 801d838:	20005518 	.word	0x20005518
 801d83c:	40026070 	.word	0x40026070

0801d840 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 801d840:	b580      	push	{r7, lr}
 801d842:	b08a      	sub	sp, #40	; 0x28
 801d844:	af00      	add	r7, sp, #0
 801d846:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801d848:	f107 0314 	add.w	r3, r7, #20
 801d84c:	2200      	movs	r2, #0
 801d84e:	601a      	str	r2, [r3, #0]
 801d850:	605a      	str	r2, [r3, #4]
 801d852:	609a      	str	r2, [r3, #8]
 801d854:	60da      	str	r2, [r3, #12]
 801d856:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 801d858:	687b      	ldr	r3, [r7, #4]
 801d85a:	681b      	ldr	r3, [r3, #0]
 801d85c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801d860:	d11e      	bne.n	801d8a0 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 801d862:	2300      	movs	r3, #0
 801d864:	613b      	str	r3, [r7, #16]
 801d866:	4b22      	ldr	r3, [pc, #136]	; (801d8f0 <HAL_TIM_MspPostInit+0xb0>)
 801d868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801d86a:	4a21      	ldr	r2, [pc, #132]	; (801d8f0 <HAL_TIM_MspPostInit+0xb0>)
 801d86c:	f043 0301 	orr.w	r3, r3, #1
 801d870:	6313      	str	r3, [r2, #48]	; 0x30
 801d872:	4b1f      	ldr	r3, [pc, #124]	; (801d8f0 <HAL_TIM_MspPostInit+0xb0>)
 801d874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801d876:	f003 0301 	and.w	r3, r3, #1
 801d87a:	613b      	str	r3, [r7, #16]
 801d87c:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 801d87e:	2301      	movs	r3, #1
 801d880:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801d882:	2302      	movs	r3, #2
 801d884:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801d886:	2300      	movs	r3, #0
 801d888:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801d88a:	2300      	movs	r3, #0
 801d88c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 801d88e:	2301      	movs	r3, #1
 801d890:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801d892:	f107 0314 	add.w	r3, r7, #20
 801d896:	4619      	mov	r1, r3
 801d898:	4816      	ldr	r0, [pc, #88]	; (801d8f4 <HAL_TIM_MspPostInit+0xb4>)
 801d89a:	f000 fe87 	bl	801e5ac <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 801d89e:	e022      	b.n	801d8e6 <HAL_TIM_MspPostInit+0xa6>
  else if(timHandle->Instance==TIM3)
 801d8a0:	687b      	ldr	r3, [r7, #4]
 801d8a2:	681b      	ldr	r3, [r3, #0]
 801d8a4:	4a14      	ldr	r2, [pc, #80]	; (801d8f8 <HAL_TIM_MspPostInit+0xb8>)
 801d8a6:	4293      	cmp	r3, r2
 801d8a8:	d11d      	bne.n	801d8e6 <HAL_TIM_MspPostInit+0xa6>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 801d8aa:	2300      	movs	r3, #0
 801d8ac:	60fb      	str	r3, [r7, #12]
 801d8ae:	4b10      	ldr	r3, [pc, #64]	; (801d8f0 <HAL_TIM_MspPostInit+0xb0>)
 801d8b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801d8b2:	4a0f      	ldr	r2, [pc, #60]	; (801d8f0 <HAL_TIM_MspPostInit+0xb0>)
 801d8b4:	f043 0301 	orr.w	r3, r3, #1
 801d8b8:	6313      	str	r3, [r2, #48]	; 0x30
 801d8ba:	4b0d      	ldr	r3, [pc, #52]	; (801d8f0 <HAL_TIM_MspPostInit+0xb0>)
 801d8bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801d8be:	f003 0301 	and.w	r3, r3, #1
 801d8c2:	60fb      	str	r3, [r7, #12]
 801d8c4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 801d8c6:	2340      	movs	r3, #64	; 0x40
 801d8c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801d8ca:	2302      	movs	r3, #2
 801d8cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801d8ce:	2300      	movs	r3, #0
 801d8d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801d8d2:	2300      	movs	r3, #0
 801d8d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 801d8d6:	2302      	movs	r3, #2
 801d8d8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801d8da:	f107 0314 	add.w	r3, r7, #20
 801d8de:	4619      	mov	r1, r3
 801d8e0:	4804      	ldr	r0, [pc, #16]	; (801d8f4 <HAL_TIM_MspPostInit+0xb4>)
 801d8e2:	f000 fe63 	bl	801e5ac <HAL_GPIO_Init>
}
 801d8e6:	bf00      	nop
 801d8e8:	3728      	adds	r7, #40	; 0x28
 801d8ea:	46bd      	mov	sp, r7
 801d8ec:	bd80      	pop	{r7, pc}
 801d8ee:	bf00      	nop
 801d8f0:	40023800 	.word	0x40023800
 801d8f4:	40020000 	.word	0x40020000
 801d8f8:	40000400 	.word	0x40000400

0801d8fc <MX_USART2_UART_Init>:
UART_HandleTypeDef huart6;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 801d8fc:	b580      	push	{r7, lr}
 801d8fe:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 801d900:	4b11      	ldr	r3, [pc, #68]	; (801d948 <MX_USART2_UART_Init+0x4c>)
 801d902:	4a12      	ldr	r2, [pc, #72]	; (801d94c <MX_USART2_UART_Init+0x50>)
 801d904:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 801d906:	4b10      	ldr	r3, [pc, #64]	; (801d948 <MX_USART2_UART_Init+0x4c>)
 801d908:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 801d90c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 801d90e:	4b0e      	ldr	r3, [pc, #56]	; (801d948 <MX_USART2_UART_Init+0x4c>)
 801d910:	2200      	movs	r2, #0
 801d912:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 801d914:	4b0c      	ldr	r3, [pc, #48]	; (801d948 <MX_USART2_UART_Init+0x4c>)
 801d916:	2200      	movs	r2, #0
 801d918:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 801d91a:	4b0b      	ldr	r3, [pc, #44]	; (801d948 <MX_USART2_UART_Init+0x4c>)
 801d91c:	2200      	movs	r2, #0
 801d91e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 801d920:	4b09      	ldr	r3, [pc, #36]	; (801d948 <MX_USART2_UART_Init+0x4c>)
 801d922:	220c      	movs	r2, #12
 801d924:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 801d926:	4b08      	ldr	r3, [pc, #32]	; (801d948 <MX_USART2_UART_Init+0x4c>)
 801d928:	2200      	movs	r2, #0
 801d92a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 801d92c:	4b06      	ldr	r3, [pc, #24]	; (801d948 <MX_USART2_UART_Init+0x4c>)
 801d92e:	2200      	movs	r2, #0
 801d930:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 801d932:	4805      	ldr	r0, [pc, #20]	; (801d948 <MX_USART2_UART_Init+0x4c>)
 801d934:	f003 fa74 	bl	8020e20 <HAL_UART_Init>
 801d938:	4603      	mov	r3, r0
 801d93a:	2b00      	cmp	r3, #0
 801d93c:	d001      	beq.n	801d942 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 801d93e:	f7ff fd07 	bl	801d350 <Error_Handler>
  }

}
 801d942:	bf00      	nop
 801d944:	bd80      	pop	{r7, pc}
 801d946:	bf00      	nop
 801d948:	200055f8 	.word	0x200055f8
 801d94c:	40004400 	.word	0x40004400

0801d950 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 801d950:	b580      	push	{r7, lr}
 801d952:	af00      	add	r7, sp, #0

  huart6.Instance = USART6;
 801d954:	4b11      	ldr	r3, [pc, #68]	; (801d99c <MX_USART6_UART_Init+0x4c>)
 801d956:	4a12      	ldr	r2, [pc, #72]	; (801d9a0 <MX_USART6_UART_Init+0x50>)
 801d958:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 801d95a:	4b10      	ldr	r3, [pc, #64]	; (801d99c <MX_USART6_UART_Init+0x4c>)
 801d95c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 801d960:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 801d962:	4b0e      	ldr	r3, [pc, #56]	; (801d99c <MX_USART6_UART_Init+0x4c>)
 801d964:	2200      	movs	r2, #0
 801d966:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 801d968:	4b0c      	ldr	r3, [pc, #48]	; (801d99c <MX_USART6_UART_Init+0x4c>)
 801d96a:	2200      	movs	r2, #0
 801d96c:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 801d96e:	4b0b      	ldr	r3, [pc, #44]	; (801d99c <MX_USART6_UART_Init+0x4c>)
 801d970:	2200      	movs	r2, #0
 801d972:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 801d974:	4b09      	ldr	r3, [pc, #36]	; (801d99c <MX_USART6_UART_Init+0x4c>)
 801d976:	220c      	movs	r2, #12
 801d978:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 801d97a:	4b08      	ldr	r3, [pc, #32]	; (801d99c <MX_USART6_UART_Init+0x4c>)
 801d97c:	2200      	movs	r2, #0
 801d97e:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 801d980:	4b06      	ldr	r3, [pc, #24]	; (801d99c <MX_USART6_UART_Init+0x4c>)
 801d982:	2200      	movs	r2, #0
 801d984:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 801d986:	4805      	ldr	r0, [pc, #20]	; (801d99c <MX_USART6_UART_Init+0x4c>)
 801d988:	f003 fa4a 	bl	8020e20 <HAL_UART_Init>
 801d98c:	4603      	mov	r3, r0
 801d98e:	2b00      	cmp	r3, #0
 801d990:	d001      	beq.n	801d996 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 801d992:	f7ff fcdd 	bl	801d350 <Error_Handler>
  }

}
 801d996:	bf00      	nop
 801d998:	bd80      	pop	{r7, pc}
 801d99a:	bf00      	nop
 801d99c:	200055b8 	.word	0x200055b8
 801d9a0:	40011400 	.word	0x40011400

0801d9a4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 801d9a4:	b580      	push	{r7, lr}
 801d9a6:	b08c      	sub	sp, #48	; 0x30
 801d9a8:	af00      	add	r7, sp, #0
 801d9aa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801d9ac:	f107 031c 	add.w	r3, r7, #28
 801d9b0:	2200      	movs	r2, #0
 801d9b2:	601a      	str	r2, [r3, #0]
 801d9b4:	605a      	str	r2, [r3, #4]
 801d9b6:	609a      	str	r2, [r3, #8]
 801d9b8:	60da      	str	r2, [r3, #12]
 801d9ba:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 801d9bc:	687b      	ldr	r3, [r7, #4]
 801d9be:	681b      	ldr	r3, [r3, #0]
 801d9c0:	4a45      	ldr	r2, [pc, #276]	; (801dad8 <HAL_UART_MspInit+0x134>)
 801d9c2:	4293      	cmp	r3, r2
 801d9c4:	d12c      	bne.n	801da20 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 801d9c6:	2300      	movs	r3, #0
 801d9c8:	61bb      	str	r3, [r7, #24]
 801d9ca:	4b44      	ldr	r3, [pc, #272]	; (801dadc <HAL_UART_MspInit+0x138>)
 801d9cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801d9ce:	4a43      	ldr	r2, [pc, #268]	; (801dadc <HAL_UART_MspInit+0x138>)
 801d9d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 801d9d4:	6413      	str	r3, [r2, #64]	; 0x40
 801d9d6:	4b41      	ldr	r3, [pc, #260]	; (801dadc <HAL_UART_MspInit+0x138>)
 801d9d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801d9da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801d9de:	61bb      	str	r3, [r7, #24]
 801d9e0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 801d9e2:	2300      	movs	r3, #0
 801d9e4:	617b      	str	r3, [r7, #20]
 801d9e6:	4b3d      	ldr	r3, [pc, #244]	; (801dadc <HAL_UART_MspInit+0x138>)
 801d9e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801d9ea:	4a3c      	ldr	r2, [pc, #240]	; (801dadc <HAL_UART_MspInit+0x138>)
 801d9ec:	f043 0301 	orr.w	r3, r3, #1
 801d9f0:	6313      	str	r3, [r2, #48]	; 0x30
 801d9f2:	4b3a      	ldr	r3, [pc, #232]	; (801dadc <HAL_UART_MspInit+0x138>)
 801d9f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801d9f6:	f003 0301 	and.w	r3, r3, #1
 801d9fa:	617b      	str	r3, [r7, #20]
 801d9fc:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 801d9fe:	230c      	movs	r3, #12
 801da00:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801da02:	2302      	movs	r3, #2
 801da04:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801da06:	2300      	movs	r3, #0
 801da08:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801da0a:	2300      	movs	r3, #0
 801da0c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 801da0e:	2307      	movs	r3, #7
 801da10:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801da12:	f107 031c 	add.w	r3, r7, #28
 801da16:	4619      	mov	r1, r3
 801da18:	4831      	ldr	r0, [pc, #196]	; (801dae0 <HAL_UART_MspInit+0x13c>)
 801da1a:	f000 fdc7 	bl	801e5ac <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 801da1e:	e057      	b.n	801dad0 <HAL_UART_MspInit+0x12c>
  else if(uartHandle->Instance==USART6)
 801da20:	687b      	ldr	r3, [r7, #4]
 801da22:	681b      	ldr	r3, [r3, #0]
 801da24:	4a2f      	ldr	r2, [pc, #188]	; (801dae4 <HAL_UART_MspInit+0x140>)
 801da26:	4293      	cmp	r3, r2
 801da28:	d152      	bne.n	801dad0 <HAL_UART_MspInit+0x12c>
    __HAL_RCC_USART6_CLK_ENABLE();
 801da2a:	2300      	movs	r3, #0
 801da2c:	613b      	str	r3, [r7, #16]
 801da2e:	4b2b      	ldr	r3, [pc, #172]	; (801dadc <HAL_UART_MspInit+0x138>)
 801da30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801da32:	4a2a      	ldr	r2, [pc, #168]	; (801dadc <HAL_UART_MspInit+0x138>)
 801da34:	f043 0320 	orr.w	r3, r3, #32
 801da38:	6453      	str	r3, [r2, #68]	; 0x44
 801da3a:	4b28      	ldr	r3, [pc, #160]	; (801dadc <HAL_UART_MspInit+0x138>)
 801da3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801da3e:	f003 0320 	and.w	r3, r3, #32
 801da42:	613b      	str	r3, [r7, #16]
 801da44:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 801da46:	2300      	movs	r3, #0
 801da48:	60fb      	str	r3, [r7, #12]
 801da4a:	4b24      	ldr	r3, [pc, #144]	; (801dadc <HAL_UART_MspInit+0x138>)
 801da4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801da4e:	4a23      	ldr	r2, [pc, #140]	; (801dadc <HAL_UART_MspInit+0x138>)
 801da50:	f043 0304 	orr.w	r3, r3, #4
 801da54:	6313      	str	r3, [r2, #48]	; 0x30
 801da56:	4b21      	ldr	r3, [pc, #132]	; (801dadc <HAL_UART_MspInit+0x138>)
 801da58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801da5a:	f003 0304 	and.w	r3, r3, #4
 801da5e:	60fb      	str	r3, [r7, #12]
 801da60:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 801da62:	2300      	movs	r3, #0
 801da64:	60bb      	str	r3, [r7, #8]
 801da66:	4b1d      	ldr	r3, [pc, #116]	; (801dadc <HAL_UART_MspInit+0x138>)
 801da68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801da6a:	4a1c      	ldr	r2, [pc, #112]	; (801dadc <HAL_UART_MspInit+0x138>)
 801da6c:	f043 0301 	orr.w	r3, r3, #1
 801da70:	6313      	str	r3, [r2, #48]	; 0x30
 801da72:	4b1a      	ldr	r3, [pc, #104]	; (801dadc <HAL_UART_MspInit+0x138>)
 801da74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801da76:	f003 0301 	and.w	r3, r3, #1
 801da7a:	60bb      	str	r3, [r7, #8]
 801da7c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 801da7e:	2340      	movs	r3, #64	; 0x40
 801da80:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801da82:	2302      	movs	r3, #2
 801da84:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801da86:	2300      	movs	r3, #0
 801da88:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 801da8a:	2301      	movs	r3, #1
 801da8c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 801da8e:	2308      	movs	r3, #8
 801da90:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 801da92:	f107 031c 	add.w	r3, r7, #28
 801da96:	4619      	mov	r1, r3
 801da98:	4813      	ldr	r0, [pc, #76]	; (801dae8 <HAL_UART_MspInit+0x144>)
 801da9a:	f000 fd87 	bl	801e5ac <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 801da9e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801daa2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801daa4:	2302      	movs	r3, #2
 801daa6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801daa8:	2300      	movs	r3, #0
 801daaa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 801daac:	2301      	movs	r3, #1
 801daae:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 801dab0:	2308      	movs	r3, #8
 801dab2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801dab4:	f107 031c 	add.w	r3, r7, #28
 801dab8:	4619      	mov	r1, r3
 801daba:	4809      	ldr	r0, [pc, #36]	; (801dae0 <HAL_UART_MspInit+0x13c>)
 801dabc:	f000 fd76 	bl	801e5ac <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 801dac0:	2200      	movs	r2, #0
 801dac2:	2100      	movs	r1, #0
 801dac4:	2047      	movs	r0, #71	; 0x47
 801dac6:	f000 f9aa 	bl	801de1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 801daca:	2047      	movs	r0, #71	; 0x47
 801dacc:	f000 f9c3 	bl	801de56 <HAL_NVIC_EnableIRQ>
}
 801dad0:	bf00      	nop
 801dad2:	3730      	adds	r7, #48	; 0x30
 801dad4:	46bd      	mov	sp, r7
 801dad6:	bd80      	pop	{r7, pc}
 801dad8:	40004400 	.word	0x40004400
 801dadc:	40023800 	.word	0x40023800
 801dae0:	40020000 	.word	0x40020000
 801dae4:	40011400 	.word	0x40011400
 801dae8:	40020800 	.word	0x40020800

0801daec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 801daec:	f8df d034 	ldr.w	sp, [pc, #52]	; 801db24 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 801daf0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 801daf2:	e003      	b.n	801dafc <LoopCopyDataInit>

0801daf4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 801daf4:	4b0c      	ldr	r3, [pc, #48]	; (801db28 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 801daf6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 801daf8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 801dafa:	3104      	adds	r1, #4

0801dafc <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 801dafc:	480b      	ldr	r0, [pc, #44]	; (801db2c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 801dafe:	4b0c      	ldr	r3, [pc, #48]	; (801db30 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 801db00:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 801db02:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 801db04:	d3f6      	bcc.n	801daf4 <CopyDataInit>
  ldr  r2, =_sbss
 801db06:	4a0b      	ldr	r2, [pc, #44]	; (801db34 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 801db08:	e002      	b.n	801db10 <LoopFillZerobss>

0801db0a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 801db0a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 801db0c:	f842 3b04 	str.w	r3, [r2], #4

0801db10 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 801db10:	4b09      	ldr	r3, [pc, #36]	; (801db38 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 801db12:	429a      	cmp	r2, r3
  bcc  FillZerobss
 801db14:	d3f9      	bcc.n	801db0a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 801db16:	f7ff fce7 	bl	801d4e8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 801db1a:	f004 f8bf 	bl	8021c9c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 801db1e:	f7ff fa5d 	bl	801cfdc <main>
  bx  lr    
 801db22:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 801db24:	20018000 	.word	0x20018000
  ldr  r3, =_sidata
 801db28:	0802d018 	.word	0x0802d018
  ldr  r0, =_sdata
 801db2c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 801db30:	20000074 	.word	0x20000074
  ldr  r2, =_sbss
 801db34:	20000074 	.word	0x20000074
  ldr  r3, = _ebss
 801db38:	20005640 	.word	0x20005640

0801db3c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 801db3c:	e7fe      	b.n	801db3c <ADC_IRQHandler>
	...

0801db40 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 801db40:	b580      	push	{r7, lr}
 801db42:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 801db44:	4b0e      	ldr	r3, [pc, #56]	; (801db80 <HAL_Init+0x40>)
 801db46:	681b      	ldr	r3, [r3, #0]
 801db48:	4a0d      	ldr	r2, [pc, #52]	; (801db80 <HAL_Init+0x40>)
 801db4a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 801db4e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 801db50:	4b0b      	ldr	r3, [pc, #44]	; (801db80 <HAL_Init+0x40>)
 801db52:	681b      	ldr	r3, [r3, #0]
 801db54:	4a0a      	ldr	r2, [pc, #40]	; (801db80 <HAL_Init+0x40>)
 801db56:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 801db5a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 801db5c:	4b08      	ldr	r3, [pc, #32]	; (801db80 <HAL_Init+0x40>)
 801db5e:	681b      	ldr	r3, [r3, #0]
 801db60:	4a07      	ldr	r2, [pc, #28]	; (801db80 <HAL_Init+0x40>)
 801db62:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801db66:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 801db68:	2003      	movs	r0, #3
 801db6a:	f000 f94d 	bl	801de08 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 801db6e:	2000      	movs	r0, #0
 801db70:	f000 f808 	bl	801db84 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 801db74:	f7ff fbf0 	bl	801d358 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 801db78:	2300      	movs	r3, #0
}
 801db7a:	4618      	mov	r0, r3
 801db7c:	bd80      	pop	{r7, pc}
 801db7e:	bf00      	nop
 801db80:	40023c00 	.word	0x40023c00

0801db84 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 801db84:	b580      	push	{r7, lr}
 801db86:	b082      	sub	sp, #8
 801db88:	af00      	add	r7, sp, #0
 801db8a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 801db8c:	4b12      	ldr	r3, [pc, #72]	; (801dbd8 <HAL_InitTick+0x54>)
 801db8e:	681a      	ldr	r2, [r3, #0]
 801db90:	4b12      	ldr	r3, [pc, #72]	; (801dbdc <HAL_InitTick+0x58>)
 801db92:	781b      	ldrb	r3, [r3, #0]
 801db94:	4619      	mov	r1, r3
 801db96:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 801db9a:	fbb3 f3f1 	udiv	r3, r3, r1
 801db9e:	fbb2 f3f3 	udiv	r3, r2, r3
 801dba2:	4618      	mov	r0, r3
 801dba4:	f000 f965 	bl	801de72 <HAL_SYSTICK_Config>
 801dba8:	4603      	mov	r3, r0
 801dbaa:	2b00      	cmp	r3, #0
 801dbac:	d001      	beq.n	801dbb2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 801dbae:	2301      	movs	r3, #1
 801dbb0:	e00e      	b.n	801dbd0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 801dbb2:	687b      	ldr	r3, [r7, #4]
 801dbb4:	2b0f      	cmp	r3, #15
 801dbb6:	d80a      	bhi.n	801dbce <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 801dbb8:	2200      	movs	r2, #0
 801dbba:	6879      	ldr	r1, [r7, #4]
 801dbbc:	f04f 30ff 	mov.w	r0, #4294967295
 801dbc0:	f000 f92d 	bl	801de1e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 801dbc4:	4a06      	ldr	r2, [pc, #24]	; (801dbe0 <HAL_InitTick+0x5c>)
 801dbc6:	687b      	ldr	r3, [r7, #4]
 801dbc8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 801dbca:	2300      	movs	r3, #0
 801dbcc:	e000      	b.n	801dbd0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 801dbce:	2301      	movs	r3, #1
}
 801dbd0:	4618      	mov	r0, r3
 801dbd2:	3708      	adds	r7, #8
 801dbd4:	46bd      	mov	sp, r7
 801dbd6:	bd80      	pop	{r7, pc}
 801dbd8:	20000000 	.word	0x20000000
 801dbdc:	20000008 	.word	0x20000008
 801dbe0:	20000004 	.word	0x20000004

0801dbe4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 801dbe4:	b480      	push	{r7}
 801dbe6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 801dbe8:	4b06      	ldr	r3, [pc, #24]	; (801dc04 <HAL_IncTick+0x20>)
 801dbea:	781b      	ldrb	r3, [r3, #0]
 801dbec:	461a      	mov	r2, r3
 801dbee:	4b06      	ldr	r3, [pc, #24]	; (801dc08 <HAL_IncTick+0x24>)
 801dbf0:	681b      	ldr	r3, [r3, #0]
 801dbf2:	4413      	add	r3, r2
 801dbf4:	4a04      	ldr	r2, [pc, #16]	; (801dc08 <HAL_IncTick+0x24>)
 801dbf6:	6013      	str	r3, [r2, #0]
}
 801dbf8:	bf00      	nop
 801dbfa:	46bd      	mov	sp, r7
 801dbfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dc00:	4770      	bx	lr
 801dc02:	bf00      	nop
 801dc04:	20000008 	.word	0x20000008
 801dc08:	20005638 	.word	0x20005638

0801dc0c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 801dc0c:	b480      	push	{r7}
 801dc0e:	af00      	add	r7, sp, #0
  return uwTick;
 801dc10:	4b03      	ldr	r3, [pc, #12]	; (801dc20 <HAL_GetTick+0x14>)
 801dc12:	681b      	ldr	r3, [r3, #0]
}
 801dc14:	4618      	mov	r0, r3
 801dc16:	46bd      	mov	sp, r7
 801dc18:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dc1c:	4770      	bx	lr
 801dc1e:	bf00      	nop
 801dc20:	20005638 	.word	0x20005638

0801dc24 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 801dc24:	b580      	push	{r7, lr}
 801dc26:	b084      	sub	sp, #16
 801dc28:	af00      	add	r7, sp, #0
 801dc2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 801dc2c:	f7ff ffee 	bl	801dc0c <HAL_GetTick>
 801dc30:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 801dc32:	687b      	ldr	r3, [r7, #4]
 801dc34:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 801dc36:	68fb      	ldr	r3, [r7, #12]
 801dc38:	f1b3 3fff 	cmp.w	r3, #4294967295
 801dc3c:	d005      	beq.n	801dc4a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 801dc3e:	4b09      	ldr	r3, [pc, #36]	; (801dc64 <HAL_Delay+0x40>)
 801dc40:	781b      	ldrb	r3, [r3, #0]
 801dc42:	461a      	mov	r2, r3
 801dc44:	68fb      	ldr	r3, [r7, #12]
 801dc46:	4413      	add	r3, r2
 801dc48:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 801dc4a:	bf00      	nop
 801dc4c:	f7ff ffde 	bl	801dc0c <HAL_GetTick>
 801dc50:	4602      	mov	r2, r0
 801dc52:	68bb      	ldr	r3, [r7, #8]
 801dc54:	1ad3      	subs	r3, r2, r3
 801dc56:	68fa      	ldr	r2, [r7, #12]
 801dc58:	429a      	cmp	r2, r3
 801dc5a:	d8f7      	bhi.n	801dc4c <HAL_Delay+0x28>
  {
  }
}
 801dc5c:	bf00      	nop
 801dc5e:	3710      	adds	r7, #16
 801dc60:	46bd      	mov	sp, r7
 801dc62:	bd80      	pop	{r7, pc}
 801dc64:	20000008 	.word	0x20000008

0801dc68 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 801dc68:	b480      	push	{r7}
 801dc6a:	b085      	sub	sp, #20
 801dc6c:	af00      	add	r7, sp, #0
 801dc6e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 801dc70:	687b      	ldr	r3, [r7, #4]
 801dc72:	f003 0307 	and.w	r3, r3, #7
 801dc76:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 801dc78:	4b0c      	ldr	r3, [pc, #48]	; (801dcac <__NVIC_SetPriorityGrouping+0x44>)
 801dc7a:	68db      	ldr	r3, [r3, #12]
 801dc7c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 801dc7e:	68ba      	ldr	r2, [r7, #8]
 801dc80:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 801dc84:	4013      	ands	r3, r2
 801dc86:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 801dc88:	68fb      	ldr	r3, [r7, #12]
 801dc8a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 801dc8c:	68bb      	ldr	r3, [r7, #8]
 801dc8e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 801dc90:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 801dc94:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 801dc98:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 801dc9a:	4a04      	ldr	r2, [pc, #16]	; (801dcac <__NVIC_SetPriorityGrouping+0x44>)
 801dc9c:	68bb      	ldr	r3, [r7, #8]
 801dc9e:	60d3      	str	r3, [r2, #12]
}
 801dca0:	bf00      	nop
 801dca2:	3714      	adds	r7, #20
 801dca4:	46bd      	mov	sp, r7
 801dca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dcaa:	4770      	bx	lr
 801dcac:	e000ed00 	.word	0xe000ed00

0801dcb0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 801dcb0:	b480      	push	{r7}
 801dcb2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 801dcb4:	4b04      	ldr	r3, [pc, #16]	; (801dcc8 <__NVIC_GetPriorityGrouping+0x18>)
 801dcb6:	68db      	ldr	r3, [r3, #12]
 801dcb8:	0a1b      	lsrs	r3, r3, #8
 801dcba:	f003 0307 	and.w	r3, r3, #7
}
 801dcbe:	4618      	mov	r0, r3
 801dcc0:	46bd      	mov	sp, r7
 801dcc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dcc6:	4770      	bx	lr
 801dcc8:	e000ed00 	.word	0xe000ed00

0801dccc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 801dccc:	b480      	push	{r7}
 801dcce:	b083      	sub	sp, #12
 801dcd0:	af00      	add	r7, sp, #0
 801dcd2:	4603      	mov	r3, r0
 801dcd4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 801dcd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801dcda:	2b00      	cmp	r3, #0
 801dcdc:	db0b      	blt.n	801dcf6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 801dcde:	79fb      	ldrb	r3, [r7, #7]
 801dce0:	f003 021f 	and.w	r2, r3, #31
 801dce4:	4907      	ldr	r1, [pc, #28]	; (801dd04 <__NVIC_EnableIRQ+0x38>)
 801dce6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801dcea:	095b      	lsrs	r3, r3, #5
 801dcec:	2001      	movs	r0, #1
 801dcee:	fa00 f202 	lsl.w	r2, r0, r2
 801dcf2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 801dcf6:	bf00      	nop
 801dcf8:	370c      	adds	r7, #12
 801dcfa:	46bd      	mov	sp, r7
 801dcfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dd00:	4770      	bx	lr
 801dd02:	bf00      	nop
 801dd04:	e000e100 	.word	0xe000e100

0801dd08 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 801dd08:	b480      	push	{r7}
 801dd0a:	b083      	sub	sp, #12
 801dd0c:	af00      	add	r7, sp, #0
 801dd0e:	4603      	mov	r3, r0
 801dd10:	6039      	str	r1, [r7, #0]
 801dd12:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 801dd14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801dd18:	2b00      	cmp	r3, #0
 801dd1a:	db0a      	blt.n	801dd32 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801dd1c:	683b      	ldr	r3, [r7, #0]
 801dd1e:	b2da      	uxtb	r2, r3
 801dd20:	490c      	ldr	r1, [pc, #48]	; (801dd54 <__NVIC_SetPriority+0x4c>)
 801dd22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801dd26:	0112      	lsls	r2, r2, #4
 801dd28:	b2d2      	uxtb	r2, r2
 801dd2a:	440b      	add	r3, r1
 801dd2c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 801dd30:	e00a      	b.n	801dd48 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801dd32:	683b      	ldr	r3, [r7, #0]
 801dd34:	b2da      	uxtb	r2, r3
 801dd36:	4908      	ldr	r1, [pc, #32]	; (801dd58 <__NVIC_SetPriority+0x50>)
 801dd38:	79fb      	ldrb	r3, [r7, #7]
 801dd3a:	f003 030f 	and.w	r3, r3, #15
 801dd3e:	3b04      	subs	r3, #4
 801dd40:	0112      	lsls	r2, r2, #4
 801dd42:	b2d2      	uxtb	r2, r2
 801dd44:	440b      	add	r3, r1
 801dd46:	761a      	strb	r2, [r3, #24]
}
 801dd48:	bf00      	nop
 801dd4a:	370c      	adds	r7, #12
 801dd4c:	46bd      	mov	sp, r7
 801dd4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dd52:	4770      	bx	lr
 801dd54:	e000e100 	.word	0xe000e100
 801dd58:	e000ed00 	.word	0xe000ed00

0801dd5c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 801dd5c:	b480      	push	{r7}
 801dd5e:	b089      	sub	sp, #36	; 0x24
 801dd60:	af00      	add	r7, sp, #0
 801dd62:	60f8      	str	r0, [r7, #12]
 801dd64:	60b9      	str	r1, [r7, #8]
 801dd66:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 801dd68:	68fb      	ldr	r3, [r7, #12]
 801dd6a:	f003 0307 	and.w	r3, r3, #7
 801dd6e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 801dd70:	69fb      	ldr	r3, [r7, #28]
 801dd72:	f1c3 0307 	rsb	r3, r3, #7
 801dd76:	2b04      	cmp	r3, #4
 801dd78:	bf28      	it	cs
 801dd7a:	2304      	movcs	r3, #4
 801dd7c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 801dd7e:	69fb      	ldr	r3, [r7, #28]
 801dd80:	3304      	adds	r3, #4
 801dd82:	2b06      	cmp	r3, #6
 801dd84:	d902      	bls.n	801dd8c <NVIC_EncodePriority+0x30>
 801dd86:	69fb      	ldr	r3, [r7, #28]
 801dd88:	3b03      	subs	r3, #3
 801dd8a:	e000      	b.n	801dd8e <NVIC_EncodePriority+0x32>
 801dd8c:	2300      	movs	r3, #0
 801dd8e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 801dd90:	f04f 32ff 	mov.w	r2, #4294967295
 801dd94:	69bb      	ldr	r3, [r7, #24]
 801dd96:	fa02 f303 	lsl.w	r3, r2, r3
 801dd9a:	43da      	mvns	r2, r3
 801dd9c:	68bb      	ldr	r3, [r7, #8]
 801dd9e:	401a      	ands	r2, r3
 801dda0:	697b      	ldr	r3, [r7, #20]
 801dda2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 801dda4:	f04f 31ff 	mov.w	r1, #4294967295
 801dda8:	697b      	ldr	r3, [r7, #20]
 801ddaa:	fa01 f303 	lsl.w	r3, r1, r3
 801ddae:	43d9      	mvns	r1, r3
 801ddb0:	687b      	ldr	r3, [r7, #4]
 801ddb2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 801ddb4:	4313      	orrs	r3, r2
         );
}
 801ddb6:	4618      	mov	r0, r3
 801ddb8:	3724      	adds	r7, #36	; 0x24
 801ddba:	46bd      	mov	sp, r7
 801ddbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ddc0:	4770      	bx	lr
	...

0801ddc4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 801ddc4:	b580      	push	{r7, lr}
 801ddc6:	b082      	sub	sp, #8
 801ddc8:	af00      	add	r7, sp, #0
 801ddca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 801ddcc:	687b      	ldr	r3, [r7, #4]
 801ddce:	3b01      	subs	r3, #1
 801ddd0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 801ddd4:	d301      	bcc.n	801ddda <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 801ddd6:	2301      	movs	r3, #1
 801ddd8:	e00f      	b.n	801ddfa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 801ddda:	4a0a      	ldr	r2, [pc, #40]	; (801de04 <SysTick_Config+0x40>)
 801dddc:	687b      	ldr	r3, [r7, #4]
 801ddde:	3b01      	subs	r3, #1
 801dde0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 801dde2:	210f      	movs	r1, #15
 801dde4:	f04f 30ff 	mov.w	r0, #4294967295
 801dde8:	f7ff ff8e 	bl	801dd08 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 801ddec:	4b05      	ldr	r3, [pc, #20]	; (801de04 <SysTick_Config+0x40>)
 801ddee:	2200      	movs	r2, #0
 801ddf0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 801ddf2:	4b04      	ldr	r3, [pc, #16]	; (801de04 <SysTick_Config+0x40>)
 801ddf4:	2207      	movs	r2, #7
 801ddf6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 801ddf8:	2300      	movs	r3, #0
}
 801ddfa:	4618      	mov	r0, r3
 801ddfc:	3708      	adds	r7, #8
 801ddfe:	46bd      	mov	sp, r7
 801de00:	bd80      	pop	{r7, pc}
 801de02:	bf00      	nop
 801de04:	e000e010 	.word	0xe000e010

0801de08 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 801de08:	b580      	push	{r7, lr}
 801de0a:	b082      	sub	sp, #8
 801de0c:	af00      	add	r7, sp, #0
 801de0e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 801de10:	6878      	ldr	r0, [r7, #4]
 801de12:	f7ff ff29 	bl	801dc68 <__NVIC_SetPriorityGrouping>
}
 801de16:	bf00      	nop
 801de18:	3708      	adds	r7, #8
 801de1a:	46bd      	mov	sp, r7
 801de1c:	bd80      	pop	{r7, pc}

0801de1e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 801de1e:	b580      	push	{r7, lr}
 801de20:	b086      	sub	sp, #24
 801de22:	af00      	add	r7, sp, #0
 801de24:	4603      	mov	r3, r0
 801de26:	60b9      	str	r1, [r7, #8]
 801de28:	607a      	str	r2, [r7, #4]
 801de2a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 801de2c:	2300      	movs	r3, #0
 801de2e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 801de30:	f7ff ff3e 	bl	801dcb0 <__NVIC_GetPriorityGrouping>
 801de34:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 801de36:	687a      	ldr	r2, [r7, #4]
 801de38:	68b9      	ldr	r1, [r7, #8]
 801de3a:	6978      	ldr	r0, [r7, #20]
 801de3c:	f7ff ff8e 	bl	801dd5c <NVIC_EncodePriority>
 801de40:	4602      	mov	r2, r0
 801de42:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801de46:	4611      	mov	r1, r2
 801de48:	4618      	mov	r0, r3
 801de4a:	f7ff ff5d 	bl	801dd08 <__NVIC_SetPriority>
}
 801de4e:	bf00      	nop
 801de50:	3718      	adds	r7, #24
 801de52:	46bd      	mov	sp, r7
 801de54:	bd80      	pop	{r7, pc}

0801de56 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 801de56:	b580      	push	{r7, lr}
 801de58:	b082      	sub	sp, #8
 801de5a:	af00      	add	r7, sp, #0
 801de5c:	4603      	mov	r3, r0
 801de5e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 801de60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801de64:	4618      	mov	r0, r3
 801de66:	f7ff ff31 	bl	801dccc <__NVIC_EnableIRQ>
}
 801de6a:	bf00      	nop
 801de6c:	3708      	adds	r7, #8
 801de6e:	46bd      	mov	sp, r7
 801de70:	bd80      	pop	{r7, pc}

0801de72 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 801de72:	b580      	push	{r7, lr}
 801de74:	b082      	sub	sp, #8
 801de76:	af00      	add	r7, sp, #0
 801de78:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 801de7a:	6878      	ldr	r0, [r7, #4]
 801de7c:	f7ff ffa2 	bl	801ddc4 <SysTick_Config>
 801de80:	4603      	mov	r3, r0
}
 801de82:	4618      	mov	r0, r3
 801de84:	3708      	adds	r7, #8
 801de86:	46bd      	mov	sp, r7
 801de88:	bd80      	pop	{r7, pc}
	...

0801de8c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 801de8c:	b580      	push	{r7, lr}
 801de8e:	b086      	sub	sp, #24
 801de90:	af00      	add	r7, sp, #0
 801de92:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 801de94:	2300      	movs	r3, #0
 801de96:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 801de98:	f7ff feb8 	bl	801dc0c <HAL_GetTick>
 801de9c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 801de9e:	687b      	ldr	r3, [r7, #4]
 801dea0:	2b00      	cmp	r3, #0
 801dea2:	d101      	bne.n	801dea8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 801dea4:	2301      	movs	r3, #1
 801dea6:	e099      	b.n	801dfdc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 801dea8:	687b      	ldr	r3, [r7, #4]
 801deaa:	2200      	movs	r2, #0
 801deac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 801deb0:	687b      	ldr	r3, [r7, #4]
 801deb2:	2202      	movs	r2, #2
 801deb4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 801deb8:	687b      	ldr	r3, [r7, #4]
 801deba:	681b      	ldr	r3, [r3, #0]
 801debc:	681a      	ldr	r2, [r3, #0]
 801debe:	687b      	ldr	r3, [r7, #4]
 801dec0:	681b      	ldr	r3, [r3, #0]
 801dec2:	f022 0201 	bic.w	r2, r2, #1
 801dec6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 801dec8:	e00f      	b.n	801deea <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 801deca:	f7ff fe9f 	bl	801dc0c <HAL_GetTick>
 801dece:	4602      	mov	r2, r0
 801ded0:	693b      	ldr	r3, [r7, #16]
 801ded2:	1ad3      	subs	r3, r2, r3
 801ded4:	2b05      	cmp	r3, #5
 801ded6:	d908      	bls.n	801deea <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 801ded8:	687b      	ldr	r3, [r7, #4]
 801deda:	2220      	movs	r2, #32
 801dedc:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 801dede:	687b      	ldr	r3, [r7, #4]
 801dee0:	2203      	movs	r2, #3
 801dee2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 801dee6:	2303      	movs	r3, #3
 801dee8:	e078      	b.n	801dfdc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 801deea:	687b      	ldr	r3, [r7, #4]
 801deec:	681b      	ldr	r3, [r3, #0]
 801deee:	681b      	ldr	r3, [r3, #0]
 801def0:	f003 0301 	and.w	r3, r3, #1
 801def4:	2b00      	cmp	r3, #0
 801def6:	d1e8      	bne.n	801deca <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 801def8:	687b      	ldr	r3, [r7, #4]
 801defa:	681b      	ldr	r3, [r3, #0]
 801defc:	681b      	ldr	r3, [r3, #0]
 801defe:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 801df00:	697a      	ldr	r2, [r7, #20]
 801df02:	4b38      	ldr	r3, [pc, #224]	; (801dfe4 <HAL_DMA_Init+0x158>)
 801df04:	4013      	ands	r3, r2
 801df06:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 801df08:	687b      	ldr	r3, [r7, #4]
 801df0a:	685a      	ldr	r2, [r3, #4]
 801df0c:	687b      	ldr	r3, [r7, #4]
 801df0e:	689b      	ldr	r3, [r3, #8]
 801df10:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 801df12:	687b      	ldr	r3, [r7, #4]
 801df14:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 801df16:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 801df18:	687b      	ldr	r3, [r7, #4]
 801df1a:	691b      	ldr	r3, [r3, #16]
 801df1c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 801df1e:	687b      	ldr	r3, [r7, #4]
 801df20:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 801df22:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 801df24:	687b      	ldr	r3, [r7, #4]
 801df26:	699b      	ldr	r3, [r3, #24]
 801df28:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 801df2a:	687b      	ldr	r3, [r7, #4]
 801df2c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 801df2e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 801df30:	687b      	ldr	r3, [r7, #4]
 801df32:	6a1b      	ldr	r3, [r3, #32]
 801df34:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 801df36:	697a      	ldr	r2, [r7, #20]
 801df38:	4313      	orrs	r3, r2
 801df3a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 801df3c:	687b      	ldr	r3, [r7, #4]
 801df3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801df40:	2b04      	cmp	r3, #4
 801df42:	d107      	bne.n	801df54 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 801df44:	687b      	ldr	r3, [r7, #4]
 801df46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801df48:	687b      	ldr	r3, [r7, #4]
 801df4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801df4c:	4313      	orrs	r3, r2
 801df4e:	697a      	ldr	r2, [r7, #20]
 801df50:	4313      	orrs	r3, r2
 801df52:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 801df54:	687b      	ldr	r3, [r7, #4]
 801df56:	681b      	ldr	r3, [r3, #0]
 801df58:	697a      	ldr	r2, [r7, #20]
 801df5a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 801df5c:	687b      	ldr	r3, [r7, #4]
 801df5e:	681b      	ldr	r3, [r3, #0]
 801df60:	695b      	ldr	r3, [r3, #20]
 801df62:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 801df64:	697b      	ldr	r3, [r7, #20]
 801df66:	f023 0307 	bic.w	r3, r3, #7
 801df6a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 801df6c:	687b      	ldr	r3, [r7, #4]
 801df6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801df70:	697a      	ldr	r2, [r7, #20]
 801df72:	4313      	orrs	r3, r2
 801df74:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 801df76:	687b      	ldr	r3, [r7, #4]
 801df78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801df7a:	2b04      	cmp	r3, #4
 801df7c:	d117      	bne.n	801dfae <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 801df7e:	687b      	ldr	r3, [r7, #4]
 801df80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801df82:	697a      	ldr	r2, [r7, #20]
 801df84:	4313      	orrs	r3, r2
 801df86:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 801df88:	687b      	ldr	r3, [r7, #4]
 801df8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801df8c:	2b00      	cmp	r3, #0
 801df8e:	d00e      	beq.n	801dfae <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 801df90:	6878      	ldr	r0, [r7, #4]
 801df92:	f000 fa91 	bl	801e4b8 <DMA_CheckFifoParam>
 801df96:	4603      	mov	r3, r0
 801df98:	2b00      	cmp	r3, #0
 801df9a:	d008      	beq.n	801dfae <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 801df9c:	687b      	ldr	r3, [r7, #4]
 801df9e:	2240      	movs	r2, #64	; 0x40
 801dfa0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 801dfa2:	687b      	ldr	r3, [r7, #4]
 801dfa4:	2201      	movs	r2, #1
 801dfa6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 801dfaa:	2301      	movs	r3, #1
 801dfac:	e016      	b.n	801dfdc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 801dfae:	687b      	ldr	r3, [r7, #4]
 801dfb0:	681b      	ldr	r3, [r3, #0]
 801dfb2:	697a      	ldr	r2, [r7, #20]
 801dfb4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 801dfb6:	6878      	ldr	r0, [r7, #4]
 801dfb8:	f000 fa48 	bl	801e44c <DMA_CalcBaseAndBitshift>
 801dfbc:	4603      	mov	r3, r0
 801dfbe:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 801dfc0:	687b      	ldr	r3, [r7, #4]
 801dfc2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801dfc4:	223f      	movs	r2, #63	; 0x3f
 801dfc6:	409a      	lsls	r2, r3
 801dfc8:	68fb      	ldr	r3, [r7, #12]
 801dfca:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 801dfcc:	687b      	ldr	r3, [r7, #4]
 801dfce:	2200      	movs	r2, #0
 801dfd0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 801dfd2:	687b      	ldr	r3, [r7, #4]
 801dfd4:	2201      	movs	r2, #1
 801dfd6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 801dfda:	2300      	movs	r3, #0
}
 801dfdc:	4618      	mov	r0, r3
 801dfde:	3718      	adds	r7, #24
 801dfe0:	46bd      	mov	sp, r7
 801dfe2:	bd80      	pop	{r7, pc}
 801dfe4:	f010803f 	.word	0xf010803f

0801dfe8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 801dfe8:	b580      	push	{r7, lr}
 801dfea:	b086      	sub	sp, #24
 801dfec:	af00      	add	r7, sp, #0
 801dfee:	60f8      	str	r0, [r7, #12]
 801dff0:	60b9      	str	r1, [r7, #8]
 801dff2:	607a      	str	r2, [r7, #4]
 801dff4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 801dff6:	2300      	movs	r3, #0
 801dff8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 801dffa:	68fb      	ldr	r3, [r7, #12]
 801dffc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801dffe:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 801e000:	68fb      	ldr	r3, [r7, #12]
 801e002:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801e006:	2b01      	cmp	r3, #1
 801e008:	d101      	bne.n	801e00e <HAL_DMA_Start_IT+0x26>
 801e00a:	2302      	movs	r3, #2
 801e00c:	e040      	b.n	801e090 <HAL_DMA_Start_IT+0xa8>
 801e00e:	68fb      	ldr	r3, [r7, #12]
 801e010:	2201      	movs	r2, #1
 801e012:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 801e016:	68fb      	ldr	r3, [r7, #12]
 801e018:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 801e01c:	b2db      	uxtb	r3, r3
 801e01e:	2b01      	cmp	r3, #1
 801e020:	d12f      	bne.n	801e082 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 801e022:	68fb      	ldr	r3, [r7, #12]
 801e024:	2202      	movs	r2, #2
 801e026:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 801e02a:	68fb      	ldr	r3, [r7, #12]
 801e02c:	2200      	movs	r2, #0
 801e02e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 801e030:	683b      	ldr	r3, [r7, #0]
 801e032:	687a      	ldr	r2, [r7, #4]
 801e034:	68b9      	ldr	r1, [r7, #8]
 801e036:	68f8      	ldr	r0, [r7, #12]
 801e038:	f000 f9da 	bl	801e3f0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 801e03c:	68fb      	ldr	r3, [r7, #12]
 801e03e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801e040:	223f      	movs	r2, #63	; 0x3f
 801e042:	409a      	lsls	r2, r3
 801e044:	693b      	ldr	r3, [r7, #16]
 801e046:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 801e048:	68fb      	ldr	r3, [r7, #12]
 801e04a:	681b      	ldr	r3, [r3, #0]
 801e04c:	681a      	ldr	r2, [r3, #0]
 801e04e:	68fb      	ldr	r3, [r7, #12]
 801e050:	681b      	ldr	r3, [r3, #0]
 801e052:	f042 0216 	orr.w	r2, r2, #22
 801e056:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 801e058:	68fb      	ldr	r3, [r7, #12]
 801e05a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801e05c:	2b00      	cmp	r3, #0
 801e05e:	d007      	beq.n	801e070 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 801e060:	68fb      	ldr	r3, [r7, #12]
 801e062:	681b      	ldr	r3, [r3, #0]
 801e064:	681a      	ldr	r2, [r3, #0]
 801e066:	68fb      	ldr	r3, [r7, #12]
 801e068:	681b      	ldr	r3, [r3, #0]
 801e06a:	f042 0208 	orr.w	r2, r2, #8
 801e06e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 801e070:	68fb      	ldr	r3, [r7, #12]
 801e072:	681b      	ldr	r3, [r3, #0]
 801e074:	681a      	ldr	r2, [r3, #0]
 801e076:	68fb      	ldr	r3, [r7, #12]
 801e078:	681b      	ldr	r3, [r3, #0]
 801e07a:	f042 0201 	orr.w	r2, r2, #1
 801e07e:	601a      	str	r2, [r3, #0]
 801e080:	e005      	b.n	801e08e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 801e082:	68fb      	ldr	r3, [r7, #12]
 801e084:	2200      	movs	r2, #0
 801e086:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 801e08a:	2302      	movs	r3, #2
 801e08c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 801e08e:	7dfb      	ldrb	r3, [r7, #23]
}
 801e090:	4618      	mov	r0, r3
 801e092:	3718      	adds	r7, #24
 801e094:	46bd      	mov	sp, r7
 801e096:	bd80      	pop	{r7, pc}

0801e098 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 801e098:	b480      	push	{r7}
 801e09a:	b083      	sub	sp, #12
 801e09c:	af00      	add	r7, sp, #0
 801e09e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 801e0a0:	687b      	ldr	r3, [r7, #4]
 801e0a2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 801e0a6:	b2db      	uxtb	r3, r3
 801e0a8:	2b02      	cmp	r3, #2
 801e0aa:	d004      	beq.n	801e0b6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 801e0ac:	687b      	ldr	r3, [r7, #4]
 801e0ae:	2280      	movs	r2, #128	; 0x80
 801e0b0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 801e0b2:	2301      	movs	r3, #1
 801e0b4:	e00c      	b.n	801e0d0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 801e0b6:	687b      	ldr	r3, [r7, #4]
 801e0b8:	2205      	movs	r2, #5
 801e0ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 801e0be:	687b      	ldr	r3, [r7, #4]
 801e0c0:	681b      	ldr	r3, [r3, #0]
 801e0c2:	681a      	ldr	r2, [r3, #0]
 801e0c4:	687b      	ldr	r3, [r7, #4]
 801e0c6:	681b      	ldr	r3, [r3, #0]
 801e0c8:	f022 0201 	bic.w	r2, r2, #1
 801e0cc:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 801e0ce:	2300      	movs	r3, #0
}
 801e0d0:	4618      	mov	r0, r3
 801e0d2:	370c      	adds	r7, #12
 801e0d4:	46bd      	mov	sp, r7
 801e0d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e0da:	4770      	bx	lr

0801e0dc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 801e0dc:	b580      	push	{r7, lr}
 801e0de:	b086      	sub	sp, #24
 801e0e0:	af00      	add	r7, sp, #0
 801e0e2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 801e0e4:	2300      	movs	r3, #0
 801e0e6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 801e0e8:	4b92      	ldr	r3, [pc, #584]	; (801e334 <HAL_DMA_IRQHandler+0x258>)
 801e0ea:	681b      	ldr	r3, [r3, #0]
 801e0ec:	4a92      	ldr	r2, [pc, #584]	; (801e338 <HAL_DMA_IRQHandler+0x25c>)
 801e0ee:	fba2 2303 	umull	r2, r3, r2, r3
 801e0f2:	0a9b      	lsrs	r3, r3, #10
 801e0f4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 801e0f6:	687b      	ldr	r3, [r7, #4]
 801e0f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801e0fa:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 801e0fc:	693b      	ldr	r3, [r7, #16]
 801e0fe:	681b      	ldr	r3, [r3, #0]
 801e100:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 801e102:	687b      	ldr	r3, [r7, #4]
 801e104:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801e106:	2208      	movs	r2, #8
 801e108:	409a      	lsls	r2, r3
 801e10a:	68fb      	ldr	r3, [r7, #12]
 801e10c:	4013      	ands	r3, r2
 801e10e:	2b00      	cmp	r3, #0
 801e110:	d01a      	beq.n	801e148 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 801e112:	687b      	ldr	r3, [r7, #4]
 801e114:	681b      	ldr	r3, [r3, #0]
 801e116:	681b      	ldr	r3, [r3, #0]
 801e118:	f003 0304 	and.w	r3, r3, #4
 801e11c:	2b00      	cmp	r3, #0
 801e11e:	d013      	beq.n	801e148 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 801e120:	687b      	ldr	r3, [r7, #4]
 801e122:	681b      	ldr	r3, [r3, #0]
 801e124:	681a      	ldr	r2, [r3, #0]
 801e126:	687b      	ldr	r3, [r7, #4]
 801e128:	681b      	ldr	r3, [r3, #0]
 801e12a:	f022 0204 	bic.w	r2, r2, #4
 801e12e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 801e130:	687b      	ldr	r3, [r7, #4]
 801e132:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801e134:	2208      	movs	r2, #8
 801e136:	409a      	lsls	r2, r3
 801e138:	693b      	ldr	r3, [r7, #16]
 801e13a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 801e13c:	687b      	ldr	r3, [r7, #4]
 801e13e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801e140:	f043 0201 	orr.w	r2, r3, #1
 801e144:	687b      	ldr	r3, [r7, #4]
 801e146:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 801e148:	687b      	ldr	r3, [r7, #4]
 801e14a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801e14c:	2201      	movs	r2, #1
 801e14e:	409a      	lsls	r2, r3
 801e150:	68fb      	ldr	r3, [r7, #12]
 801e152:	4013      	ands	r3, r2
 801e154:	2b00      	cmp	r3, #0
 801e156:	d012      	beq.n	801e17e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 801e158:	687b      	ldr	r3, [r7, #4]
 801e15a:	681b      	ldr	r3, [r3, #0]
 801e15c:	695b      	ldr	r3, [r3, #20]
 801e15e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801e162:	2b00      	cmp	r3, #0
 801e164:	d00b      	beq.n	801e17e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 801e166:	687b      	ldr	r3, [r7, #4]
 801e168:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801e16a:	2201      	movs	r2, #1
 801e16c:	409a      	lsls	r2, r3
 801e16e:	693b      	ldr	r3, [r7, #16]
 801e170:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 801e172:	687b      	ldr	r3, [r7, #4]
 801e174:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801e176:	f043 0202 	orr.w	r2, r3, #2
 801e17a:	687b      	ldr	r3, [r7, #4]
 801e17c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 801e17e:	687b      	ldr	r3, [r7, #4]
 801e180:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801e182:	2204      	movs	r2, #4
 801e184:	409a      	lsls	r2, r3
 801e186:	68fb      	ldr	r3, [r7, #12]
 801e188:	4013      	ands	r3, r2
 801e18a:	2b00      	cmp	r3, #0
 801e18c:	d012      	beq.n	801e1b4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 801e18e:	687b      	ldr	r3, [r7, #4]
 801e190:	681b      	ldr	r3, [r3, #0]
 801e192:	681b      	ldr	r3, [r3, #0]
 801e194:	f003 0302 	and.w	r3, r3, #2
 801e198:	2b00      	cmp	r3, #0
 801e19a:	d00b      	beq.n	801e1b4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 801e19c:	687b      	ldr	r3, [r7, #4]
 801e19e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801e1a0:	2204      	movs	r2, #4
 801e1a2:	409a      	lsls	r2, r3
 801e1a4:	693b      	ldr	r3, [r7, #16]
 801e1a6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 801e1a8:	687b      	ldr	r3, [r7, #4]
 801e1aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801e1ac:	f043 0204 	orr.w	r2, r3, #4
 801e1b0:	687b      	ldr	r3, [r7, #4]
 801e1b2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 801e1b4:	687b      	ldr	r3, [r7, #4]
 801e1b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801e1b8:	2210      	movs	r2, #16
 801e1ba:	409a      	lsls	r2, r3
 801e1bc:	68fb      	ldr	r3, [r7, #12]
 801e1be:	4013      	ands	r3, r2
 801e1c0:	2b00      	cmp	r3, #0
 801e1c2:	d043      	beq.n	801e24c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 801e1c4:	687b      	ldr	r3, [r7, #4]
 801e1c6:	681b      	ldr	r3, [r3, #0]
 801e1c8:	681b      	ldr	r3, [r3, #0]
 801e1ca:	f003 0308 	and.w	r3, r3, #8
 801e1ce:	2b00      	cmp	r3, #0
 801e1d0:	d03c      	beq.n	801e24c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 801e1d2:	687b      	ldr	r3, [r7, #4]
 801e1d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801e1d6:	2210      	movs	r2, #16
 801e1d8:	409a      	lsls	r2, r3
 801e1da:	693b      	ldr	r3, [r7, #16]
 801e1dc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 801e1de:	687b      	ldr	r3, [r7, #4]
 801e1e0:	681b      	ldr	r3, [r3, #0]
 801e1e2:	681b      	ldr	r3, [r3, #0]
 801e1e4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 801e1e8:	2b00      	cmp	r3, #0
 801e1ea:	d018      	beq.n	801e21e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 801e1ec:	687b      	ldr	r3, [r7, #4]
 801e1ee:	681b      	ldr	r3, [r3, #0]
 801e1f0:	681b      	ldr	r3, [r3, #0]
 801e1f2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 801e1f6:	2b00      	cmp	r3, #0
 801e1f8:	d108      	bne.n	801e20c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 801e1fa:	687b      	ldr	r3, [r7, #4]
 801e1fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801e1fe:	2b00      	cmp	r3, #0
 801e200:	d024      	beq.n	801e24c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 801e202:	687b      	ldr	r3, [r7, #4]
 801e204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801e206:	6878      	ldr	r0, [r7, #4]
 801e208:	4798      	blx	r3
 801e20a:	e01f      	b.n	801e24c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 801e20c:	687b      	ldr	r3, [r7, #4]
 801e20e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801e210:	2b00      	cmp	r3, #0
 801e212:	d01b      	beq.n	801e24c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 801e214:	687b      	ldr	r3, [r7, #4]
 801e216:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801e218:	6878      	ldr	r0, [r7, #4]
 801e21a:	4798      	blx	r3
 801e21c:	e016      	b.n	801e24c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 801e21e:	687b      	ldr	r3, [r7, #4]
 801e220:	681b      	ldr	r3, [r3, #0]
 801e222:	681b      	ldr	r3, [r3, #0]
 801e224:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801e228:	2b00      	cmp	r3, #0
 801e22a:	d107      	bne.n	801e23c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 801e22c:	687b      	ldr	r3, [r7, #4]
 801e22e:	681b      	ldr	r3, [r3, #0]
 801e230:	681a      	ldr	r2, [r3, #0]
 801e232:	687b      	ldr	r3, [r7, #4]
 801e234:	681b      	ldr	r3, [r3, #0]
 801e236:	f022 0208 	bic.w	r2, r2, #8
 801e23a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 801e23c:	687b      	ldr	r3, [r7, #4]
 801e23e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801e240:	2b00      	cmp	r3, #0
 801e242:	d003      	beq.n	801e24c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 801e244:	687b      	ldr	r3, [r7, #4]
 801e246:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801e248:	6878      	ldr	r0, [r7, #4]
 801e24a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 801e24c:	687b      	ldr	r3, [r7, #4]
 801e24e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801e250:	2220      	movs	r2, #32
 801e252:	409a      	lsls	r2, r3
 801e254:	68fb      	ldr	r3, [r7, #12]
 801e256:	4013      	ands	r3, r2
 801e258:	2b00      	cmp	r3, #0
 801e25a:	f000 808e 	beq.w	801e37a <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 801e25e:	687b      	ldr	r3, [r7, #4]
 801e260:	681b      	ldr	r3, [r3, #0]
 801e262:	681b      	ldr	r3, [r3, #0]
 801e264:	f003 0310 	and.w	r3, r3, #16
 801e268:	2b00      	cmp	r3, #0
 801e26a:	f000 8086 	beq.w	801e37a <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 801e26e:	687b      	ldr	r3, [r7, #4]
 801e270:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801e272:	2220      	movs	r2, #32
 801e274:	409a      	lsls	r2, r3
 801e276:	693b      	ldr	r3, [r7, #16]
 801e278:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 801e27a:	687b      	ldr	r3, [r7, #4]
 801e27c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 801e280:	b2db      	uxtb	r3, r3
 801e282:	2b05      	cmp	r3, #5
 801e284:	d136      	bne.n	801e2f4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 801e286:	687b      	ldr	r3, [r7, #4]
 801e288:	681b      	ldr	r3, [r3, #0]
 801e28a:	681a      	ldr	r2, [r3, #0]
 801e28c:	687b      	ldr	r3, [r7, #4]
 801e28e:	681b      	ldr	r3, [r3, #0]
 801e290:	f022 0216 	bic.w	r2, r2, #22
 801e294:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 801e296:	687b      	ldr	r3, [r7, #4]
 801e298:	681b      	ldr	r3, [r3, #0]
 801e29a:	695a      	ldr	r2, [r3, #20]
 801e29c:	687b      	ldr	r3, [r7, #4]
 801e29e:	681b      	ldr	r3, [r3, #0]
 801e2a0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 801e2a4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 801e2a6:	687b      	ldr	r3, [r7, #4]
 801e2a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801e2aa:	2b00      	cmp	r3, #0
 801e2ac:	d103      	bne.n	801e2b6 <HAL_DMA_IRQHandler+0x1da>
 801e2ae:	687b      	ldr	r3, [r7, #4]
 801e2b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801e2b2:	2b00      	cmp	r3, #0
 801e2b4:	d007      	beq.n	801e2c6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 801e2b6:	687b      	ldr	r3, [r7, #4]
 801e2b8:	681b      	ldr	r3, [r3, #0]
 801e2ba:	681a      	ldr	r2, [r3, #0]
 801e2bc:	687b      	ldr	r3, [r7, #4]
 801e2be:	681b      	ldr	r3, [r3, #0]
 801e2c0:	f022 0208 	bic.w	r2, r2, #8
 801e2c4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 801e2c6:	687b      	ldr	r3, [r7, #4]
 801e2c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801e2ca:	223f      	movs	r2, #63	; 0x3f
 801e2cc:	409a      	lsls	r2, r3
 801e2ce:	693b      	ldr	r3, [r7, #16]
 801e2d0:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 801e2d2:	687b      	ldr	r3, [r7, #4]
 801e2d4:	2200      	movs	r2, #0
 801e2d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 801e2da:	687b      	ldr	r3, [r7, #4]
 801e2dc:	2201      	movs	r2, #1
 801e2de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 801e2e2:	687b      	ldr	r3, [r7, #4]
 801e2e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801e2e6:	2b00      	cmp	r3, #0
 801e2e8:	d07d      	beq.n	801e3e6 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 801e2ea:	687b      	ldr	r3, [r7, #4]
 801e2ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801e2ee:	6878      	ldr	r0, [r7, #4]
 801e2f0:	4798      	blx	r3
        }
        return;
 801e2f2:	e078      	b.n	801e3e6 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 801e2f4:	687b      	ldr	r3, [r7, #4]
 801e2f6:	681b      	ldr	r3, [r3, #0]
 801e2f8:	681b      	ldr	r3, [r3, #0]
 801e2fa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 801e2fe:	2b00      	cmp	r3, #0
 801e300:	d01c      	beq.n	801e33c <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 801e302:	687b      	ldr	r3, [r7, #4]
 801e304:	681b      	ldr	r3, [r3, #0]
 801e306:	681b      	ldr	r3, [r3, #0]
 801e308:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 801e30c:	2b00      	cmp	r3, #0
 801e30e:	d108      	bne.n	801e322 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 801e310:	687b      	ldr	r3, [r7, #4]
 801e312:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801e314:	2b00      	cmp	r3, #0
 801e316:	d030      	beq.n	801e37a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 801e318:	687b      	ldr	r3, [r7, #4]
 801e31a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801e31c:	6878      	ldr	r0, [r7, #4]
 801e31e:	4798      	blx	r3
 801e320:	e02b      	b.n	801e37a <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 801e322:	687b      	ldr	r3, [r7, #4]
 801e324:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801e326:	2b00      	cmp	r3, #0
 801e328:	d027      	beq.n	801e37a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 801e32a:	687b      	ldr	r3, [r7, #4]
 801e32c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801e32e:	6878      	ldr	r0, [r7, #4]
 801e330:	4798      	blx	r3
 801e332:	e022      	b.n	801e37a <HAL_DMA_IRQHandler+0x29e>
 801e334:	20000000 	.word	0x20000000
 801e338:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 801e33c:	687b      	ldr	r3, [r7, #4]
 801e33e:	681b      	ldr	r3, [r3, #0]
 801e340:	681b      	ldr	r3, [r3, #0]
 801e342:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801e346:	2b00      	cmp	r3, #0
 801e348:	d10f      	bne.n	801e36a <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 801e34a:	687b      	ldr	r3, [r7, #4]
 801e34c:	681b      	ldr	r3, [r3, #0]
 801e34e:	681a      	ldr	r2, [r3, #0]
 801e350:	687b      	ldr	r3, [r7, #4]
 801e352:	681b      	ldr	r3, [r3, #0]
 801e354:	f022 0210 	bic.w	r2, r2, #16
 801e358:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 801e35a:	687b      	ldr	r3, [r7, #4]
 801e35c:	2200      	movs	r2, #0
 801e35e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 801e362:	687b      	ldr	r3, [r7, #4]
 801e364:	2201      	movs	r2, #1
 801e366:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 801e36a:	687b      	ldr	r3, [r7, #4]
 801e36c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801e36e:	2b00      	cmp	r3, #0
 801e370:	d003      	beq.n	801e37a <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 801e372:	687b      	ldr	r3, [r7, #4]
 801e374:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801e376:	6878      	ldr	r0, [r7, #4]
 801e378:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 801e37a:	687b      	ldr	r3, [r7, #4]
 801e37c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801e37e:	2b00      	cmp	r3, #0
 801e380:	d032      	beq.n	801e3e8 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 801e382:	687b      	ldr	r3, [r7, #4]
 801e384:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801e386:	f003 0301 	and.w	r3, r3, #1
 801e38a:	2b00      	cmp	r3, #0
 801e38c:	d022      	beq.n	801e3d4 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 801e38e:	687b      	ldr	r3, [r7, #4]
 801e390:	2205      	movs	r2, #5
 801e392:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 801e396:	687b      	ldr	r3, [r7, #4]
 801e398:	681b      	ldr	r3, [r3, #0]
 801e39a:	681a      	ldr	r2, [r3, #0]
 801e39c:	687b      	ldr	r3, [r7, #4]
 801e39e:	681b      	ldr	r3, [r3, #0]
 801e3a0:	f022 0201 	bic.w	r2, r2, #1
 801e3a4:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 801e3a6:	68bb      	ldr	r3, [r7, #8]
 801e3a8:	3301      	adds	r3, #1
 801e3aa:	60bb      	str	r3, [r7, #8]
 801e3ac:	697a      	ldr	r2, [r7, #20]
 801e3ae:	429a      	cmp	r2, r3
 801e3b0:	d307      	bcc.n	801e3c2 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 801e3b2:	687b      	ldr	r3, [r7, #4]
 801e3b4:	681b      	ldr	r3, [r3, #0]
 801e3b6:	681b      	ldr	r3, [r3, #0]
 801e3b8:	f003 0301 	and.w	r3, r3, #1
 801e3bc:	2b00      	cmp	r3, #0
 801e3be:	d1f2      	bne.n	801e3a6 <HAL_DMA_IRQHandler+0x2ca>
 801e3c0:	e000      	b.n	801e3c4 <HAL_DMA_IRQHandler+0x2e8>
          break;
 801e3c2:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 801e3c4:	687b      	ldr	r3, [r7, #4]
 801e3c6:	2200      	movs	r2, #0
 801e3c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 801e3cc:	687b      	ldr	r3, [r7, #4]
 801e3ce:	2201      	movs	r2, #1
 801e3d0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 801e3d4:	687b      	ldr	r3, [r7, #4]
 801e3d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801e3d8:	2b00      	cmp	r3, #0
 801e3da:	d005      	beq.n	801e3e8 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 801e3dc:	687b      	ldr	r3, [r7, #4]
 801e3de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801e3e0:	6878      	ldr	r0, [r7, #4]
 801e3e2:	4798      	blx	r3
 801e3e4:	e000      	b.n	801e3e8 <HAL_DMA_IRQHandler+0x30c>
        return;
 801e3e6:	bf00      	nop
    }
  }
}
 801e3e8:	3718      	adds	r7, #24
 801e3ea:	46bd      	mov	sp, r7
 801e3ec:	bd80      	pop	{r7, pc}
 801e3ee:	bf00      	nop

0801e3f0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 801e3f0:	b480      	push	{r7}
 801e3f2:	b085      	sub	sp, #20
 801e3f4:	af00      	add	r7, sp, #0
 801e3f6:	60f8      	str	r0, [r7, #12]
 801e3f8:	60b9      	str	r1, [r7, #8]
 801e3fa:	607a      	str	r2, [r7, #4]
 801e3fc:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 801e3fe:	68fb      	ldr	r3, [r7, #12]
 801e400:	681b      	ldr	r3, [r3, #0]
 801e402:	681a      	ldr	r2, [r3, #0]
 801e404:	68fb      	ldr	r3, [r7, #12]
 801e406:	681b      	ldr	r3, [r3, #0]
 801e408:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 801e40c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 801e40e:	68fb      	ldr	r3, [r7, #12]
 801e410:	681b      	ldr	r3, [r3, #0]
 801e412:	683a      	ldr	r2, [r7, #0]
 801e414:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 801e416:	68fb      	ldr	r3, [r7, #12]
 801e418:	689b      	ldr	r3, [r3, #8]
 801e41a:	2b40      	cmp	r3, #64	; 0x40
 801e41c:	d108      	bne.n	801e430 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 801e41e:	68fb      	ldr	r3, [r7, #12]
 801e420:	681b      	ldr	r3, [r3, #0]
 801e422:	687a      	ldr	r2, [r7, #4]
 801e424:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 801e426:	68fb      	ldr	r3, [r7, #12]
 801e428:	681b      	ldr	r3, [r3, #0]
 801e42a:	68ba      	ldr	r2, [r7, #8]
 801e42c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 801e42e:	e007      	b.n	801e440 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 801e430:	68fb      	ldr	r3, [r7, #12]
 801e432:	681b      	ldr	r3, [r3, #0]
 801e434:	68ba      	ldr	r2, [r7, #8]
 801e436:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 801e438:	68fb      	ldr	r3, [r7, #12]
 801e43a:	681b      	ldr	r3, [r3, #0]
 801e43c:	687a      	ldr	r2, [r7, #4]
 801e43e:	60da      	str	r2, [r3, #12]
}
 801e440:	bf00      	nop
 801e442:	3714      	adds	r7, #20
 801e444:	46bd      	mov	sp, r7
 801e446:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e44a:	4770      	bx	lr

0801e44c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 801e44c:	b480      	push	{r7}
 801e44e:	b085      	sub	sp, #20
 801e450:	af00      	add	r7, sp, #0
 801e452:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 801e454:	687b      	ldr	r3, [r7, #4]
 801e456:	681b      	ldr	r3, [r3, #0]
 801e458:	b2db      	uxtb	r3, r3
 801e45a:	3b10      	subs	r3, #16
 801e45c:	4a14      	ldr	r2, [pc, #80]	; (801e4b0 <DMA_CalcBaseAndBitshift+0x64>)
 801e45e:	fba2 2303 	umull	r2, r3, r2, r3
 801e462:	091b      	lsrs	r3, r3, #4
 801e464:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 801e466:	4a13      	ldr	r2, [pc, #76]	; (801e4b4 <DMA_CalcBaseAndBitshift+0x68>)
 801e468:	68fb      	ldr	r3, [r7, #12]
 801e46a:	4413      	add	r3, r2
 801e46c:	781b      	ldrb	r3, [r3, #0]
 801e46e:	461a      	mov	r2, r3
 801e470:	687b      	ldr	r3, [r7, #4]
 801e472:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 801e474:	68fb      	ldr	r3, [r7, #12]
 801e476:	2b03      	cmp	r3, #3
 801e478:	d909      	bls.n	801e48e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 801e47a:	687b      	ldr	r3, [r7, #4]
 801e47c:	681b      	ldr	r3, [r3, #0]
 801e47e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 801e482:	f023 0303 	bic.w	r3, r3, #3
 801e486:	1d1a      	adds	r2, r3, #4
 801e488:	687b      	ldr	r3, [r7, #4]
 801e48a:	659a      	str	r2, [r3, #88]	; 0x58
 801e48c:	e007      	b.n	801e49e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 801e48e:	687b      	ldr	r3, [r7, #4]
 801e490:	681b      	ldr	r3, [r3, #0]
 801e492:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 801e496:	f023 0303 	bic.w	r3, r3, #3
 801e49a:	687a      	ldr	r2, [r7, #4]
 801e49c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 801e49e:	687b      	ldr	r3, [r7, #4]
 801e4a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 801e4a2:	4618      	mov	r0, r3
 801e4a4:	3714      	adds	r7, #20
 801e4a6:	46bd      	mov	sp, r7
 801e4a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e4ac:	4770      	bx	lr
 801e4ae:	bf00      	nop
 801e4b0:	aaaaaaab 	.word	0xaaaaaaab
 801e4b4:	0802cf88 	.word	0x0802cf88

0801e4b8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 801e4b8:	b480      	push	{r7}
 801e4ba:	b085      	sub	sp, #20
 801e4bc:	af00      	add	r7, sp, #0
 801e4be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 801e4c0:	2300      	movs	r3, #0
 801e4c2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 801e4c4:	687b      	ldr	r3, [r7, #4]
 801e4c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801e4c8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 801e4ca:	687b      	ldr	r3, [r7, #4]
 801e4cc:	699b      	ldr	r3, [r3, #24]
 801e4ce:	2b00      	cmp	r3, #0
 801e4d0:	d11f      	bne.n	801e512 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 801e4d2:	68bb      	ldr	r3, [r7, #8]
 801e4d4:	2b03      	cmp	r3, #3
 801e4d6:	d855      	bhi.n	801e584 <DMA_CheckFifoParam+0xcc>
 801e4d8:	a201      	add	r2, pc, #4	; (adr r2, 801e4e0 <DMA_CheckFifoParam+0x28>)
 801e4da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801e4de:	bf00      	nop
 801e4e0:	0801e4f1 	.word	0x0801e4f1
 801e4e4:	0801e503 	.word	0x0801e503
 801e4e8:	0801e4f1 	.word	0x0801e4f1
 801e4ec:	0801e585 	.word	0x0801e585
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 801e4f0:	687b      	ldr	r3, [r7, #4]
 801e4f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801e4f4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 801e4f8:	2b00      	cmp	r3, #0
 801e4fa:	d045      	beq.n	801e588 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 801e4fc:	2301      	movs	r3, #1
 801e4fe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 801e500:	e042      	b.n	801e588 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 801e502:	687b      	ldr	r3, [r7, #4]
 801e504:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801e506:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 801e50a:	d13f      	bne.n	801e58c <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 801e50c:	2301      	movs	r3, #1
 801e50e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 801e510:	e03c      	b.n	801e58c <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 801e512:	687b      	ldr	r3, [r7, #4]
 801e514:	699b      	ldr	r3, [r3, #24]
 801e516:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801e51a:	d121      	bne.n	801e560 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 801e51c:	68bb      	ldr	r3, [r7, #8]
 801e51e:	2b03      	cmp	r3, #3
 801e520:	d836      	bhi.n	801e590 <DMA_CheckFifoParam+0xd8>
 801e522:	a201      	add	r2, pc, #4	; (adr r2, 801e528 <DMA_CheckFifoParam+0x70>)
 801e524:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801e528:	0801e539 	.word	0x0801e539
 801e52c:	0801e53f 	.word	0x0801e53f
 801e530:	0801e539 	.word	0x0801e539
 801e534:	0801e551 	.word	0x0801e551
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 801e538:	2301      	movs	r3, #1
 801e53a:	73fb      	strb	r3, [r7, #15]
      break;
 801e53c:	e02f      	b.n	801e59e <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 801e53e:	687b      	ldr	r3, [r7, #4]
 801e540:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801e542:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 801e546:	2b00      	cmp	r3, #0
 801e548:	d024      	beq.n	801e594 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 801e54a:	2301      	movs	r3, #1
 801e54c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 801e54e:	e021      	b.n	801e594 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 801e550:	687b      	ldr	r3, [r7, #4]
 801e552:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801e554:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 801e558:	d11e      	bne.n	801e598 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 801e55a:	2301      	movs	r3, #1
 801e55c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 801e55e:	e01b      	b.n	801e598 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 801e560:	68bb      	ldr	r3, [r7, #8]
 801e562:	2b02      	cmp	r3, #2
 801e564:	d902      	bls.n	801e56c <DMA_CheckFifoParam+0xb4>
 801e566:	2b03      	cmp	r3, #3
 801e568:	d003      	beq.n	801e572 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 801e56a:	e018      	b.n	801e59e <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 801e56c:	2301      	movs	r3, #1
 801e56e:	73fb      	strb	r3, [r7, #15]
      break;
 801e570:	e015      	b.n	801e59e <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 801e572:	687b      	ldr	r3, [r7, #4]
 801e574:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801e576:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 801e57a:	2b00      	cmp	r3, #0
 801e57c:	d00e      	beq.n	801e59c <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 801e57e:	2301      	movs	r3, #1
 801e580:	73fb      	strb	r3, [r7, #15]
      break;
 801e582:	e00b      	b.n	801e59c <DMA_CheckFifoParam+0xe4>
      break;
 801e584:	bf00      	nop
 801e586:	e00a      	b.n	801e59e <DMA_CheckFifoParam+0xe6>
      break;
 801e588:	bf00      	nop
 801e58a:	e008      	b.n	801e59e <DMA_CheckFifoParam+0xe6>
      break;
 801e58c:	bf00      	nop
 801e58e:	e006      	b.n	801e59e <DMA_CheckFifoParam+0xe6>
      break;
 801e590:	bf00      	nop
 801e592:	e004      	b.n	801e59e <DMA_CheckFifoParam+0xe6>
      break;
 801e594:	bf00      	nop
 801e596:	e002      	b.n	801e59e <DMA_CheckFifoParam+0xe6>
      break;   
 801e598:	bf00      	nop
 801e59a:	e000      	b.n	801e59e <DMA_CheckFifoParam+0xe6>
      break;
 801e59c:	bf00      	nop
    }
  } 
  
  return status; 
 801e59e:	7bfb      	ldrb	r3, [r7, #15]
}
 801e5a0:	4618      	mov	r0, r3
 801e5a2:	3714      	adds	r7, #20
 801e5a4:	46bd      	mov	sp, r7
 801e5a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e5aa:	4770      	bx	lr

0801e5ac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 801e5ac:	b480      	push	{r7}
 801e5ae:	b089      	sub	sp, #36	; 0x24
 801e5b0:	af00      	add	r7, sp, #0
 801e5b2:	6078      	str	r0, [r7, #4]
 801e5b4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 801e5b6:	2300      	movs	r3, #0
 801e5b8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 801e5ba:	2300      	movs	r3, #0
 801e5bc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 801e5be:	2300      	movs	r3, #0
 801e5c0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 801e5c2:	2300      	movs	r3, #0
 801e5c4:	61fb      	str	r3, [r7, #28]
 801e5c6:	e159      	b.n	801e87c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 801e5c8:	2201      	movs	r2, #1
 801e5ca:	69fb      	ldr	r3, [r7, #28]
 801e5cc:	fa02 f303 	lsl.w	r3, r2, r3
 801e5d0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 801e5d2:	683b      	ldr	r3, [r7, #0]
 801e5d4:	681b      	ldr	r3, [r3, #0]
 801e5d6:	697a      	ldr	r2, [r7, #20]
 801e5d8:	4013      	ands	r3, r2
 801e5da:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 801e5dc:	693a      	ldr	r2, [r7, #16]
 801e5de:	697b      	ldr	r3, [r7, #20]
 801e5e0:	429a      	cmp	r2, r3
 801e5e2:	f040 8148 	bne.w	801e876 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 801e5e6:	683b      	ldr	r3, [r7, #0]
 801e5e8:	685b      	ldr	r3, [r3, #4]
 801e5ea:	2b01      	cmp	r3, #1
 801e5ec:	d00b      	beq.n	801e606 <HAL_GPIO_Init+0x5a>
 801e5ee:	683b      	ldr	r3, [r7, #0]
 801e5f0:	685b      	ldr	r3, [r3, #4]
 801e5f2:	2b02      	cmp	r3, #2
 801e5f4:	d007      	beq.n	801e606 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 801e5f6:	683b      	ldr	r3, [r7, #0]
 801e5f8:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 801e5fa:	2b11      	cmp	r3, #17
 801e5fc:	d003      	beq.n	801e606 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 801e5fe:	683b      	ldr	r3, [r7, #0]
 801e600:	685b      	ldr	r3, [r3, #4]
 801e602:	2b12      	cmp	r3, #18
 801e604:	d130      	bne.n	801e668 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 801e606:	687b      	ldr	r3, [r7, #4]
 801e608:	689b      	ldr	r3, [r3, #8]
 801e60a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 801e60c:	69fb      	ldr	r3, [r7, #28]
 801e60e:	005b      	lsls	r3, r3, #1
 801e610:	2203      	movs	r2, #3
 801e612:	fa02 f303 	lsl.w	r3, r2, r3
 801e616:	43db      	mvns	r3, r3
 801e618:	69ba      	ldr	r2, [r7, #24]
 801e61a:	4013      	ands	r3, r2
 801e61c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 801e61e:	683b      	ldr	r3, [r7, #0]
 801e620:	68da      	ldr	r2, [r3, #12]
 801e622:	69fb      	ldr	r3, [r7, #28]
 801e624:	005b      	lsls	r3, r3, #1
 801e626:	fa02 f303 	lsl.w	r3, r2, r3
 801e62a:	69ba      	ldr	r2, [r7, #24]
 801e62c:	4313      	orrs	r3, r2
 801e62e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 801e630:	687b      	ldr	r3, [r7, #4]
 801e632:	69ba      	ldr	r2, [r7, #24]
 801e634:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 801e636:	687b      	ldr	r3, [r7, #4]
 801e638:	685b      	ldr	r3, [r3, #4]
 801e63a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 801e63c:	2201      	movs	r2, #1
 801e63e:	69fb      	ldr	r3, [r7, #28]
 801e640:	fa02 f303 	lsl.w	r3, r2, r3
 801e644:	43db      	mvns	r3, r3
 801e646:	69ba      	ldr	r2, [r7, #24]
 801e648:	4013      	ands	r3, r2
 801e64a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 801e64c:	683b      	ldr	r3, [r7, #0]
 801e64e:	685b      	ldr	r3, [r3, #4]
 801e650:	091b      	lsrs	r3, r3, #4
 801e652:	f003 0201 	and.w	r2, r3, #1
 801e656:	69fb      	ldr	r3, [r7, #28]
 801e658:	fa02 f303 	lsl.w	r3, r2, r3
 801e65c:	69ba      	ldr	r2, [r7, #24]
 801e65e:	4313      	orrs	r3, r2
 801e660:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 801e662:	687b      	ldr	r3, [r7, #4]
 801e664:	69ba      	ldr	r2, [r7, #24]
 801e666:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 801e668:	687b      	ldr	r3, [r7, #4]
 801e66a:	68db      	ldr	r3, [r3, #12]
 801e66c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 801e66e:	69fb      	ldr	r3, [r7, #28]
 801e670:	005b      	lsls	r3, r3, #1
 801e672:	2203      	movs	r2, #3
 801e674:	fa02 f303 	lsl.w	r3, r2, r3
 801e678:	43db      	mvns	r3, r3
 801e67a:	69ba      	ldr	r2, [r7, #24]
 801e67c:	4013      	ands	r3, r2
 801e67e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 801e680:	683b      	ldr	r3, [r7, #0]
 801e682:	689a      	ldr	r2, [r3, #8]
 801e684:	69fb      	ldr	r3, [r7, #28]
 801e686:	005b      	lsls	r3, r3, #1
 801e688:	fa02 f303 	lsl.w	r3, r2, r3
 801e68c:	69ba      	ldr	r2, [r7, #24]
 801e68e:	4313      	orrs	r3, r2
 801e690:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 801e692:	687b      	ldr	r3, [r7, #4]
 801e694:	69ba      	ldr	r2, [r7, #24]
 801e696:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 801e698:	683b      	ldr	r3, [r7, #0]
 801e69a:	685b      	ldr	r3, [r3, #4]
 801e69c:	2b02      	cmp	r3, #2
 801e69e:	d003      	beq.n	801e6a8 <HAL_GPIO_Init+0xfc>
 801e6a0:	683b      	ldr	r3, [r7, #0]
 801e6a2:	685b      	ldr	r3, [r3, #4]
 801e6a4:	2b12      	cmp	r3, #18
 801e6a6:	d123      	bne.n	801e6f0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 801e6a8:	69fb      	ldr	r3, [r7, #28]
 801e6aa:	08da      	lsrs	r2, r3, #3
 801e6ac:	687b      	ldr	r3, [r7, #4]
 801e6ae:	3208      	adds	r2, #8
 801e6b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801e6b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 801e6b6:	69fb      	ldr	r3, [r7, #28]
 801e6b8:	f003 0307 	and.w	r3, r3, #7
 801e6bc:	009b      	lsls	r3, r3, #2
 801e6be:	220f      	movs	r2, #15
 801e6c0:	fa02 f303 	lsl.w	r3, r2, r3
 801e6c4:	43db      	mvns	r3, r3
 801e6c6:	69ba      	ldr	r2, [r7, #24]
 801e6c8:	4013      	ands	r3, r2
 801e6ca:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 801e6cc:	683b      	ldr	r3, [r7, #0]
 801e6ce:	691a      	ldr	r2, [r3, #16]
 801e6d0:	69fb      	ldr	r3, [r7, #28]
 801e6d2:	f003 0307 	and.w	r3, r3, #7
 801e6d6:	009b      	lsls	r3, r3, #2
 801e6d8:	fa02 f303 	lsl.w	r3, r2, r3
 801e6dc:	69ba      	ldr	r2, [r7, #24]
 801e6de:	4313      	orrs	r3, r2
 801e6e0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 801e6e2:	69fb      	ldr	r3, [r7, #28]
 801e6e4:	08da      	lsrs	r2, r3, #3
 801e6e6:	687b      	ldr	r3, [r7, #4]
 801e6e8:	3208      	adds	r2, #8
 801e6ea:	69b9      	ldr	r1, [r7, #24]
 801e6ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 801e6f0:	687b      	ldr	r3, [r7, #4]
 801e6f2:	681b      	ldr	r3, [r3, #0]
 801e6f4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 801e6f6:	69fb      	ldr	r3, [r7, #28]
 801e6f8:	005b      	lsls	r3, r3, #1
 801e6fa:	2203      	movs	r2, #3
 801e6fc:	fa02 f303 	lsl.w	r3, r2, r3
 801e700:	43db      	mvns	r3, r3
 801e702:	69ba      	ldr	r2, [r7, #24]
 801e704:	4013      	ands	r3, r2
 801e706:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 801e708:	683b      	ldr	r3, [r7, #0]
 801e70a:	685b      	ldr	r3, [r3, #4]
 801e70c:	f003 0203 	and.w	r2, r3, #3
 801e710:	69fb      	ldr	r3, [r7, #28]
 801e712:	005b      	lsls	r3, r3, #1
 801e714:	fa02 f303 	lsl.w	r3, r2, r3
 801e718:	69ba      	ldr	r2, [r7, #24]
 801e71a:	4313      	orrs	r3, r2
 801e71c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 801e71e:	687b      	ldr	r3, [r7, #4]
 801e720:	69ba      	ldr	r2, [r7, #24]
 801e722:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 801e724:	683b      	ldr	r3, [r7, #0]
 801e726:	685b      	ldr	r3, [r3, #4]
 801e728:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801e72c:	2b00      	cmp	r3, #0
 801e72e:	f000 80a2 	beq.w	801e876 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 801e732:	2300      	movs	r3, #0
 801e734:	60fb      	str	r3, [r7, #12]
 801e736:	4b56      	ldr	r3, [pc, #344]	; (801e890 <HAL_GPIO_Init+0x2e4>)
 801e738:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801e73a:	4a55      	ldr	r2, [pc, #340]	; (801e890 <HAL_GPIO_Init+0x2e4>)
 801e73c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 801e740:	6453      	str	r3, [r2, #68]	; 0x44
 801e742:	4b53      	ldr	r3, [pc, #332]	; (801e890 <HAL_GPIO_Init+0x2e4>)
 801e744:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801e746:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801e74a:	60fb      	str	r3, [r7, #12]
 801e74c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 801e74e:	4a51      	ldr	r2, [pc, #324]	; (801e894 <HAL_GPIO_Init+0x2e8>)
 801e750:	69fb      	ldr	r3, [r7, #28]
 801e752:	089b      	lsrs	r3, r3, #2
 801e754:	3302      	adds	r3, #2
 801e756:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801e75a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 801e75c:	69fb      	ldr	r3, [r7, #28]
 801e75e:	f003 0303 	and.w	r3, r3, #3
 801e762:	009b      	lsls	r3, r3, #2
 801e764:	220f      	movs	r2, #15
 801e766:	fa02 f303 	lsl.w	r3, r2, r3
 801e76a:	43db      	mvns	r3, r3
 801e76c:	69ba      	ldr	r2, [r7, #24]
 801e76e:	4013      	ands	r3, r2
 801e770:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 801e772:	687b      	ldr	r3, [r7, #4]
 801e774:	4a48      	ldr	r2, [pc, #288]	; (801e898 <HAL_GPIO_Init+0x2ec>)
 801e776:	4293      	cmp	r3, r2
 801e778:	d019      	beq.n	801e7ae <HAL_GPIO_Init+0x202>
 801e77a:	687b      	ldr	r3, [r7, #4]
 801e77c:	4a47      	ldr	r2, [pc, #284]	; (801e89c <HAL_GPIO_Init+0x2f0>)
 801e77e:	4293      	cmp	r3, r2
 801e780:	d013      	beq.n	801e7aa <HAL_GPIO_Init+0x1fe>
 801e782:	687b      	ldr	r3, [r7, #4]
 801e784:	4a46      	ldr	r2, [pc, #280]	; (801e8a0 <HAL_GPIO_Init+0x2f4>)
 801e786:	4293      	cmp	r3, r2
 801e788:	d00d      	beq.n	801e7a6 <HAL_GPIO_Init+0x1fa>
 801e78a:	687b      	ldr	r3, [r7, #4]
 801e78c:	4a45      	ldr	r2, [pc, #276]	; (801e8a4 <HAL_GPIO_Init+0x2f8>)
 801e78e:	4293      	cmp	r3, r2
 801e790:	d007      	beq.n	801e7a2 <HAL_GPIO_Init+0x1f6>
 801e792:	687b      	ldr	r3, [r7, #4]
 801e794:	4a44      	ldr	r2, [pc, #272]	; (801e8a8 <HAL_GPIO_Init+0x2fc>)
 801e796:	4293      	cmp	r3, r2
 801e798:	d101      	bne.n	801e79e <HAL_GPIO_Init+0x1f2>
 801e79a:	2304      	movs	r3, #4
 801e79c:	e008      	b.n	801e7b0 <HAL_GPIO_Init+0x204>
 801e79e:	2307      	movs	r3, #7
 801e7a0:	e006      	b.n	801e7b0 <HAL_GPIO_Init+0x204>
 801e7a2:	2303      	movs	r3, #3
 801e7a4:	e004      	b.n	801e7b0 <HAL_GPIO_Init+0x204>
 801e7a6:	2302      	movs	r3, #2
 801e7a8:	e002      	b.n	801e7b0 <HAL_GPIO_Init+0x204>
 801e7aa:	2301      	movs	r3, #1
 801e7ac:	e000      	b.n	801e7b0 <HAL_GPIO_Init+0x204>
 801e7ae:	2300      	movs	r3, #0
 801e7b0:	69fa      	ldr	r2, [r7, #28]
 801e7b2:	f002 0203 	and.w	r2, r2, #3
 801e7b6:	0092      	lsls	r2, r2, #2
 801e7b8:	4093      	lsls	r3, r2
 801e7ba:	69ba      	ldr	r2, [r7, #24]
 801e7bc:	4313      	orrs	r3, r2
 801e7be:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 801e7c0:	4934      	ldr	r1, [pc, #208]	; (801e894 <HAL_GPIO_Init+0x2e8>)
 801e7c2:	69fb      	ldr	r3, [r7, #28]
 801e7c4:	089b      	lsrs	r3, r3, #2
 801e7c6:	3302      	adds	r3, #2
 801e7c8:	69ba      	ldr	r2, [r7, #24]
 801e7ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 801e7ce:	4b37      	ldr	r3, [pc, #220]	; (801e8ac <HAL_GPIO_Init+0x300>)
 801e7d0:	681b      	ldr	r3, [r3, #0]
 801e7d2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 801e7d4:	693b      	ldr	r3, [r7, #16]
 801e7d6:	43db      	mvns	r3, r3
 801e7d8:	69ba      	ldr	r2, [r7, #24]
 801e7da:	4013      	ands	r3, r2
 801e7dc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 801e7de:	683b      	ldr	r3, [r7, #0]
 801e7e0:	685b      	ldr	r3, [r3, #4]
 801e7e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 801e7e6:	2b00      	cmp	r3, #0
 801e7e8:	d003      	beq.n	801e7f2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 801e7ea:	69ba      	ldr	r2, [r7, #24]
 801e7ec:	693b      	ldr	r3, [r7, #16]
 801e7ee:	4313      	orrs	r3, r2
 801e7f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 801e7f2:	4a2e      	ldr	r2, [pc, #184]	; (801e8ac <HAL_GPIO_Init+0x300>)
 801e7f4:	69bb      	ldr	r3, [r7, #24]
 801e7f6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 801e7f8:	4b2c      	ldr	r3, [pc, #176]	; (801e8ac <HAL_GPIO_Init+0x300>)
 801e7fa:	685b      	ldr	r3, [r3, #4]
 801e7fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 801e7fe:	693b      	ldr	r3, [r7, #16]
 801e800:	43db      	mvns	r3, r3
 801e802:	69ba      	ldr	r2, [r7, #24]
 801e804:	4013      	ands	r3, r2
 801e806:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 801e808:	683b      	ldr	r3, [r7, #0]
 801e80a:	685b      	ldr	r3, [r3, #4]
 801e80c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801e810:	2b00      	cmp	r3, #0
 801e812:	d003      	beq.n	801e81c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 801e814:	69ba      	ldr	r2, [r7, #24]
 801e816:	693b      	ldr	r3, [r7, #16]
 801e818:	4313      	orrs	r3, r2
 801e81a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 801e81c:	4a23      	ldr	r2, [pc, #140]	; (801e8ac <HAL_GPIO_Init+0x300>)
 801e81e:	69bb      	ldr	r3, [r7, #24]
 801e820:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 801e822:	4b22      	ldr	r3, [pc, #136]	; (801e8ac <HAL_GPIO_Init+0x300>)
 801e824:	689b      	ldr	r3, [r3, #8]
 801e826:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 801e828:	693b      	ldr	r3, [r7, #16]
 801e82a:	43db      	mvns	r3, r3
 801e82c:	69ba      	ldr	r2, [r7, #24]
 801e82e:	4013      	ands	r3, r2
 801e830:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 801e832:	683b      	ldr	r3, [r7, #0]
 801e834:	685b      	ldr	r3, [r3, #4]
 801e836:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 801e83a:	2b00      	cmp	r3, #0
 801e83c:	d003      	beq.n	801e846 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 801e83e:	69ba      	ldr	r2, [r7, #24]
 801e840:	693b      	ldr	r3, [r7, #16]
 801e842:	4313      	orrs	r3, r2
 801e844:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 801e846:	4a19      	ldr	r2, [pc, #100]	; (801e8ac <HAL_GPIO_Init+0x300>)
 801e848:	69bb      	ldr	r3, [r7, #24]
 801e84a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 801e84c:	4b17      	ldr	r3, [pc, #92]	; (801e8ac <HAL_GPIO_Init+0x300>)
 801e84e:	68db      	ldr	r3, [r3, #12]
 801e850:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 801e852:	693b      	ldr	r3, [r7, #16]
 801e854:	43db      	mvns	r3, r3
 801e856:	69ba      	ldr	r2, [r7, #24]
 801e858:	4013      	ands	r3, r2
 801e85a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 801e85c:	683b      	ldr	r3, [r7, #0]
 801e85e:	685b      	ldr	r3, [r3, #4]
 801e860:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 801e864:	2b00      	cmp	r3, #0
 801e866:	d003      	beq.n	801e870 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 801e868:	69ba      	ldr	r2, [r7, #24]
 801e86a:	693b      	ldr	r3, [r7, #16]
 801e86c:	4313      	orrs	r3, r2
 801e86e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 801e870:	4a0e      	ldr	r2, [pc, #56]	; (801e8ac <HAL_GPIO_Init+0x300>)
 801e872:	69bb      	ldr	r3, [r7, #24]
 801e874:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 801e876:	69fb      	ldr	r3, [r7, #28]
 801e878:	3301      	adds	r3, #1
 801e87a:	61fb      	str	r3, [r7, #28]
 801e87c:	69fb      	ldr	r3, [r7, #28]
 801e87e:	2b0f      	cmp	r3, #15
 801e880:	f67f aea2 	bls.w	801e5c8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 801e884:	bf00      	nop
 801e886:	3724      	adds	r7, #36	; 0x24
 801e888:	46bd      	mov	sp, r7
 801e88a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e88e:	4770      	bx	lr
 801e890:	40023800 	.word	0x40023800
 801e894:	40013800 	.word	0x40013800
 801e898:	40020000 	.word	0x40020000
 801e89c:	40020400 	.word	0x40020400
 801e8a0:	40020800 	.word	0x40020800
 801e8a4:	40020c00 	.word	0x40020c00
 801e8a8:	40021000 	.word	0x40021000
 801e8ac:	40013c00 	.word	0x40013c00

0801e8b0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 801e8b0:	b480      	push	{r7}
 801e8b2:	b085      	sub	sp, #20
 801e8b4:	af00      	add	r7, sp, #0
 801e8b6:	6078      	str	r0, [r7, #4]
 801e8b8:	460b      	mov	r3, r1
 801e8ba:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 801e8bc:	687b      	ldr	r3, [r7, #4]
 801e8be:	691a      	ldr	r2, [r3, #16]
 801e8c0:	887b      	ldrh	r3, [r7, #2]
 801e8c2:	4013      	ands	r3, r2
 801e8c4:	2b00      	cmp	r3, #0
 801e8c6:	d002      	beq.n	801e8ce <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 801e8c8:	2301      	movs	r3, #1
 801e8ca:	73fb      	strb	r3, [r7, #15]
 801e8cc:	e001      	b.n	801e8d2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 801e8ce:	2300      	movs	r3, #0
 801e8d0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 801e8d2:	7bfb      	ldrb	r3, [r7, #15]
}
 801e8d4:	4618      	mov	r0, r3
 801e8d6:	3714      	adds	r7, #20
 801e8d8:	46bd      	mov	sp, r7
 801e8da:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e8de:	4770      	bx	lr

0801e8e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 801e8e0:	b480      	push	{r7}
 801e8e2:	b083      	sub	sp, #12
 801e8e4:	af00      	add	r7, sp, #0
 801e8e6:	6078      	str	r0, [r7, #4]
 801e8e8:	460b      	mov	r3, r1
 801e8ea:	807b      	strh	r3, [r7, #2]
 801e8ec:	4613      	mov	r3, r2
 801e8ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 801e8f0:	787b      	ldrb	r3, [r7, #1]
 801e8f2:	2b00      	cmp	r3, #0
 801e8f4:	d003      	beq.n	801e8fe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 801e8f6:	887a      	ldrh	r2, [r7, #2]
 801e8f8:	687b      	ldr	r3, [r7, #4]
 801e8fa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 801e8fc:	e003      	b.n	801e906 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 801e8fe:	887b      	ldrh	r3, [r7, #2]
 801e900:	041a      	lsls	r2, r3, #16
 801e902:	687b      	ldr	r3, [r7, #4]
 801e904:	619a      	str	r2, [r3, #24]
}
 801e906:	bf00      	nop
 801e908:	370c      	adds	r7, #12
 801e90a:	46bd      	mov	sp, r7
 801e90c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e910:	4770      	bx	lr
	...

0801e914 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 801e914:	b580      	push	{r7, lr}
 801e916:	b082      	sub	sp, #8
 801e918:	af00      	add	r7, sp, #0
 801e91a:	4603      	mov	r3, r0
 801e91c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 801e91e:	4b08      	ldr	r3, [pc, #32]	; (801e940 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 801e920:	695a      	ldr	r2, [r3, #20]
 801e922:	88fb      	ldrh	r3, [r7, #6]
 801e924:	4013      	ands	r3, r2
 801e926:	2b00      	cmp	r3, #0
 801e928:	d006      	beq.n	801e938 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 801e92a:	4a05      	ldr	r2, [pc, #20]	; (801e940 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 801e92c:	88fb      	ldrh	r3, [r7, #6]
 801e92e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 801e930:	88fb      	ldrh	r3, [r7, #6]
 801e932:	4618      	mov	r0, r3
 801e934:	f7fe fce4 	bl	801d300 <HAL_GPIO_EXTI_Callback>
  }
}
 801e938:	bf00      	nop
 801e93a:	3708      	adds	r7, #8
 801e93c:	46bd      	mov	sp, r7
 801e93e:	bd80      	pop	{r7, pc}
 801e940:	40013c00 	.word	0x40013c00

0801e944 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 801e944:	b580      	push	{r7, lr}
 801e946:	b084      	sub	sp, #16
 801e948:	af00      	add	r7, sp, #0
 801e94a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 801e94c:	687b      	ldr	r3, [r7, #4]
 801e94e:	2b00      	cmp	r3, #0
 801e950:	d101      	bne.n	801e956 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 801e952:	2301      	movs	r3, #1
 801e954:	e11f      	b.n	801eb96 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 801e956:	687b      	ldr	r3, [r7, #4]
 801e958:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801e95c:	b2db      	uxtb	r3, r3
 801e95e:	2b00      	cmp	r3, #0
 801e960:	d106      	bne.n	801e970 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 801e962:	687b      	ldr	r3, [r7, #4]
 801e964:	2200      	movs	r2, #0
 801e966:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 801e96a:	6878      	ldr	r0, [r7, #4]
 801e96c:	f7fd ff3e 	bl	801c7ec <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 801e970:	687b      	ldr	r3, [r7, #4]
 801e972:	2224      	movs	r2, #36	; 0x24
 801e974:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 801e978:	687b      	ldr	r3, [r7, #4]
 801e97a:	681b      	ldr	r3, [r3, #0]
 801e97c:	681a      	ldr	r2, [r3, #0]
 801e97e:	687b      	ldr	r3, [r7, #4]
 801e980:	681b      	ldr	r3, [r3, #0]
 801e982:	f022 0201 	bic.w	r2, r2, #1
 801e986:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 801e988:	687b      	ldr	r3, [r7, #4]
 801e98a:	681b      	ldr	r3, [r3, #0]
 801e98c:	681a      	ldr	r2, [r3, #0]
 801e98e:	687b      	ldr	r3, [r7, #4]
 801e990:	681b      	ldr	r3, [r3, #0]
 801e992:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 801e996:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 801e998:	687b      	ldr	r3, [r7, #4]
 801e99a:	681b      	ldr	r3, [r3, #0]
 801e99c:	681a      	ldr	r2, [r3, #0]
 801e99e:	687b      	ldr	r3, [r7, #4]
 801e9a0:	681b      	ldr	r3, [r3, #0]
 801e9a2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 801e9a6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 801e9a8:	f001 f974 	bl	801fc94 <HAL_RCC_GetPCLK1Freq>
 801e9ac:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 801e9ae:	687b      	ldr	r3, [r7, #4]
 801e9b0:	685b      	ldr	r3, [r3, #4]
 801e9b2:	4a7b      	ldr	r2, [pc, #492]	; (801eba0 <HAL_I2C_Init+0x25c>)
 801e9b4:	4293      	cmp	r3, r2
 801e9b6:	d807      	bhi.n	801e9c8 <HAL_I2C_Init+0x84>
 801e9b8:	68fb      	ldr	r3, [r7, #12]
 801e9ba:	4a7a      	ldr	r2, [pc, #488]	; (801eba4 <HAL_I2C_Init+0x260>)
 801e9bc:	4293      	cmp	r3, r2
 801e9be:	bf94      	ite	ls
 801e9c0:	2301      	movls	r3, #1
 801e9c2:	2300      	movhi	r3, #0
 801e9c4:	b2db      	uxtb	r3, r3
 801e9c6:	e006      	b.n	801e9d6 <HAL_I2C_Init+0x92>
 801e9c8:	68fb      	ldr	r3, [r7, #12]
 801e9ca:	4a77      	ldr	r2, [pc, #476]	; (801eba8 <HAL_I2C_Init+0x264>)
 801e9cc:	4293      	cmp	r3, r2
 801e9ce:	bf94      	ite	ls
 801e9d0:	2301      	movls	r3, #1
 801e9d2:	2300      	movhi	r3, #0
 801e9d4:	b2db      	uxtb	r3, r3
 801e9d6:	2b00      	cmp	r3, #0
 801e9d8:	d001      	beq.n	801e9de <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 801e9da:	2301      	movs	r3, #1
 801e9dc:	e0db      	b.n	801eb96 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 801e9de:	68fb      	ldr	r3, [r7, #12]
 801e9e0:	4a72      	ldr	r2, [pc, #456]	; (801ebac <HAL_I2C_Init+0x268>)
 801e9e2:	fba2 2303 	umull	r2, r3, r2, r3
 801e9e6:	0c9b      	lsrs	r3, r3, #18
 801e9e8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 801e9ea:	687b      	ldr	r3, [r7, #4]
 801e9ec:	681b      	ldr	r3, [r3, #0]
 801e9ee:	685b      	ldr	r3, [r3, #4]
 801e9f0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 801e9f4:	687b      	ldr	r3, [r7, #4]
 801e9f6:	681b      	ldr	r3, [r3, #0]
 801e9f8:	68ba      	ldr	r2, [r7, #8]
 801e9fa:	430a      	orrs	r2, r1
 801e9fc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 801e9fe:	687b      	ldr	r3, [r7, #4]
 801ea00:	681b      	ldr	r3, [r3, #0]
 801ea02:	6a1b      	ldr	r3, [r3, #32]
 801ea04:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 801ea08:	687b      	ldr	r3, [r7, #4]
 801ea0a:	685b      	ldr	r3, [r3, #4]
 801ea0c:	4a64      	ldr	r2, [pc, #400]	; (801eba0 <HAL_I2C_Init+0x25c>)
 801ea0e:	4293      	cmp	r3, r2
 801ea10:	d802      	bhi.n	801ea18 <HAL_I2C_Init+0xd4>
 801ea12:	68bb      	ldr	r3, [r7, #8]
 801ea14:	3301      	adds	r3, #1
 801ea16:	e009      	b.n	801ea2c <HAL_I2C_Init+0xe8>
 801ea18:	68bb      	ldr	r3, [r7, #8]
 801ea1a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 801ea1e:	fb02 f303 	mul.w	r3, r2, r3
 801ea22:	4a63      	ldr	r2, [pc, #396]	; (801ebb0 <HAL_I2C_Init+0x26c>)
 801ea24:	fba2 2303 	umull	r2, r3, r2, r3
 801ea28:	099b      	lsrs	r3, r3, #6
 801ea2a:	3301      	adds	r3, #1
 801ea2c:	687a      	ldr	r2, [r7, #4]
 801ea2e:	6812      	ldr	r2, [r2, #0]
 801ea30:	430b      	orrs	r3, r1
 801ea32:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 801ea34:	687b      	ldr	r3, [r7, #4]
 801ea36:	681b      	ldr	r3, [r3, #0]
 801ea38:	69db      	ldr	r3, [r3, #28]
 801ea3a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 801ea3e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 801ea42:	687b      	ldr	r3, [r7, #4]
 801ea44:	685b      	ldr	r3, [r3, #4]
 801ea46:	4956      	ldr	r1, [pc, #344]	; (801eba0 <HAL_I2C_Init+0x25c>)
 801ea48:	428b      	cmp	r3, r1
 801ea4a:	d80d      	bhi.n	801ea68 <HAL_I2C_Init+0x124>
 801ea4c:	68fb      	ldr	r3, [r7, #12]
 801ea4e:	1e59      	subs	r1, r3, #1
 801ea50:	687b      	ldr	r3, [r7, #4]
 801ea52:	685b      	ldr	r3, [r3, #4]
 801ea54:	005b      	lsls	r3, r3, #1
 801ea56:	fbb1 f3f3 	udiv	r3, r1, r3
 801ea5a:	3301      	adds	r3, #1
 801ea5c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801ea60:	2b04      	cmp	r3, #4
 801ea62:	bf38      	it	cc
 801ea64:	2304      	movcc	r3, #4
 801ea66:	e04f      	b.n	801eb08 <HAL_I2C_Init+0x1c4>
 801ea68:	687b      	ldr	r3, [r7, #4]
 801ea6a:	689b      	ldr	r3, [r3, #8]
 801ea6c:	2b00      	cmp	r3, #0
 801ea6e:	d111      	bne.n	801ea94 <HAL_I2C_Init+0x150>
 801ea70:	68fb      	ldr	r3, [r7, #12]
 801ea72:	1e58      	subs	r0, r3, #1
 801ea74:	687b      	ldr	r3, [r7, #4]
 801ea76:	6859      	ldr	r1, [r3, #4]
 801ea78:	460b      	mov	r3, r1
 801ea7a:	005b      	lsls	r3, r3, #1
 801ea7c:	440b      	add	r3, r1
 801ea7e:	fbb0 f3f3 	udiv	r3, r0, r3
 801ea82:	3301      	adds	r3, #1
 801ea84:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801ea88:	2b00      	cmp	r3, #0
 801ea8a:	bf0c      	ite	eq
 801ea8c:	2301      	moveq	r3, #1
 801ea8e:	2300      	movne	r3, #0
 801ea90:	b2db      	uxtb	r3, r3
 801ea92:	e012      	b.n	801eaba <HAL_I2C_Init+0x176>
 801ea94:	68fb      	ldr	r3, [r7, #12]
 801ea96:	1e58      	subs	r0, r3, #1
 801ea98:	687b      	ldr	r3, [r7, #4]
 801ea9a:	6859      	ldr	r1, [r3, #4]
 801ea9c:	460b      	mov	r3, r1
 801ea9e:	009b      	lsls	r3, r3, #2
 801eaa0:	440b      	add	r3, r1
 801eaa2:	0099      	lsls	r1, r3, #2
 801eaa4:	440b      	add	r3, r1
 801eaa6:	fbb0 f3f3 	udiv	r3, r0, r3
 801eaaa:	3301      	adds	r3, #1
 801eaac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801eab0:	2b00      	cmp	r3, #0
 801eab2:	bf0c      	ite	eq
 801eab4:	2301      	moveq	r3, #1
 801eab6:	2300      	movne	r3, #0
 801eab8:	b2db      	uxtb	r3, r3
 801eaba:	2b00      	cmp	r3, #0
 801eabc:	d001      	beq.n	801eac2 <HAL_I2C_Init+0x17e>
 801eabe:	2301      	movs	r3, #1
 801eac0:	e022      	b.n	801eb08 <HAL_I2C_Init+0x1c4>
 801eac2:	687b      	ldr	r3, [r7, #4]
 801eac4:	689b      	ldr	r3, [r3, #8]
 801eac6:	2b00      	cmp	r3, #0
 801eac8:	d10e      	bne.n	801eae8 <HAL_I2C_Init+0x1a4>
 801eaca:	68fb      	ldr	r3, [r7, #12]
 801eacc:	1e58      	subs	r0, r3, #1
 801eace:	687b      	ldr	r3, [r7, #4]
 801ead0:	6859      	ldr	r1, [r3, #4]
 801ead2:	460b      	mov	r3, r1
 801ead4:	005b      	lsls	r3, r3, #1
 801ead6:	440b      	add	r3, r1
 801ead8:	fbb0 f3f3 	udiv	r3, r0, r3
 801eadc:	3301      	adds	r3, #1
 801eade:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801eae2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801eae6:	e00f      	b.n	801eb08 <HAL_I2C_Init+0x1c4>
 801eae8:	68fb      	ldr	r3, [r7, #12]
 801eaea:	1e58      	subs	r0, r3, #1
 801eaec:	687b      	ldr	r3, [r7, #4]
 801eaee:	6859      	ldr	r1, [r3, #4]
 801eaf0:	460b      	mov	r3, r1
 801eaf2:	009b      	lsls	r3, r3, #2
 801eaf4:	440b      	add	r3, r1
 801eaf6:	0099      	lsls	r1, r3, #2
 801eaf8:	440b      	add	r3, r1
 801eafa:	fbb0 f3f3 	udiv	r3, r0, r3
 801eafe:	3301      	adds	r3, #1
 801eb00:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801eb04:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 801eb08:	6879      	ldr	r1, [r7, #4]
 801eb0a:	6809      	ldr	r1, [r1, #0]
 801eb0c:	4313      	orrs	r3, r2
 801eb0e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 801eb10:	687b      	ldr	r3, [r7, #4]
 801eb12:	681b      	ldr	r3, [r3, #0]
 801eb14:	681b      	ldr	r3, [r3, #0]
 801eb16:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 801eb1a:	687b      	ldr	r3, [r7, #4]
 801eb1c:	69da      	ldr	r2, [r3, #28]
 801eb1e:	687b      	ldr	r3, [r7, #4]
 801eb20:	6a1b      	ldr	r3, [r3, #32]
 801eb22:	431a      	orrs	r2, r3
 801eb24:	687b      	ldr	r3, [r7, #4]
 801eb26:	681b      	ldr	r3, [r3, #0]
 801eb28:	430a      	orrs	r2, r1
 801eb2a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 801eb2c:	687b      	ldr	r3, [r7, #4]
 801eb2e:	681b      	ldr	r3, [r3, #0]
 801eb30:	689b      	ldr	r3, [r3, #8]
 801eb32:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 801eb36:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 801eb3a:	687a      	ldr	r2, [r7, #4]
 801eb3c:	6911      	ldr	r1, [r2, #16]
 801eb3e:	687a      	ldr	r2, [r7, #4]
 801eb40:	68d2      	ldr	r2, [r2, #12]
 801eb42:	4311      	orrs	r1, r2
 801eb44:	687a      	ldr	r2, [r7, #4]
 801eb46:	6812      	ldr	r2, [r2, #0]
 801eb48:	430b      	orrs	r3, r1
 801eb4a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 801eb4c:	687b      	ldr	r3, [r7, #4]
 801eb4e:	681b      	ldr	r3, [r3, #0]
 801eb50:	68db      	ldr	r3, [r3, #12]
 801eb52:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 801eb56:	687b      	ldr	r3, [r7, #4]
 801eb58:	695a      	ldr	r2, [r3, #20]
 801eb5a:	687b      	ldr	r3, [r7, #4]
 801eb5c:	699b      	ldr	r3, [r3, #24]
 801eb5e:	431a      	orrs	r2, r3
 801eb60:	687b      	ldr	r3, [r7, #4]
 801eb62:	681b      	ldr	r3, [r3, #0]
 801eb64:	430a      	orrs	r2, r1
 801eb66:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 801eb68:	687b      	ldr	r3, [r7, #4]
 801eb6a:	681b      	ldr	r3, [r3, #0]
 801eb6c:	681a      	ldr	r2, [r3, #0]
 801eb6e:	687b      	ldr	r3, [r7, #4]
 801eb70:	681b      	ldr	r3, [r3, #0]
 801eb72:	f042 0201 	orr.w	r2, r2, #1
 801eb76:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 801eb78:	687b      	ldr	r3, [r7, #4]
 801eb7a:	2200      	movs	r2, #0
 801eb7c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 801eb7e:	687b      	ldr	r3, [r7, #4]
 801eb80:	2220      	movs	r2, #32
 801eb82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 801eb86:	687b      	ldr	r3, [r7, #4]
 801eb88:	2200      	movs	r2, #0
 801eb8a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 801eb8c:	687b      	ldr	r3, [r7, #4]
 801eb8e:	2200      	movs	r2, #0
 801eb90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 801eb94:	2300      	movs	r3, #0
}
 801eb96:	4618      	mov	r0, r3
 801eb98:	3710      	adds	r7, #16
 801eb9a:	46bd      	mov	sp, r7
 801eb9c:	bd80      	pop	{r7, pc}
 801eb9e:	bf00      	nop
 801eba0:	000186a0 	.word	0x000186a0
 801eba4:	001e847f 	.word	0x001e847f
 801eba8:	003d08ff 	.word	0x003d08ff
 801ebac:	431bde83 	.word	0x431bde83
 801ebb0:	10624dd3 	.word	0x10624dd3

0801ebb4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 801ebb4:	b580      	push	{r7, lr}
 801ebb6:	b088      	sub	sp, #32
 801ebb8:	af02      	add	r7, sp, #8
 801ebba:	60f8      	str	r0, [r7, #12]
 801ebbc:	607a      	str	r2, [r7, #4]
 801ebbe:	461a      	mov	r2, r3
 801ebc0:	460b      	mov	r3, r1
 801ebc2:	817b      	strh	r3, [r7, #10]
 801ebc4:	4613      	mov	r3, r2
 801ebc6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 801ebc8:	f7ff f820 	bl	801dc0c <HAL_GetTick>
 801ebcc:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 801ebce:	68fb      	ldr	r3, [r7, #12]
 801ebd0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801ebd4:	b2db      	uxtb	r3, r3
 801ebd6:	2b20      	cmp	r3, #32
 801ebd8:	f040 80e0 	bne.w	801ed9c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 801ebdc:	697b      	ldr	r3, [r7, #20]
 801ebde:	9300      	str	r3, [sp, #0]
 801ebe0:	2319      	movs	r3, #25
 801ebe2:	2201      	movs	r2, #1
 801ebe4:	4970      	ldr	r1, [pc, #448]	; (801eda8 <HAL_I2C_Master_Transmit+0x1f4>)
 801ebe6:	68f8      	ldr	r0, [r7, #12]
 801ebe8:	f000 fa92 	bl	801f110 <I2C_WaitOnFlagUntilTimeout>
 801ebec:	4603      	mov	r3, r0
 801ebee:	2b00      	cmp	r3, #0
 801ebf0:	d001      	beq.n	801ebf6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 801ebf2:	2302      	movs	r3, #2
 801ebf4:	e0d3      	b.n	801ed9e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 801ebf6:	68fb      	ldr	r3, [r7, #12]
 801ebf8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801ebfc:	2b01      	cmp	r3, #1
 801ebfe:	d101      	bne.n	801ec04 <HAL_I2C_Master_Transmit+0x50>
 801ec00:	2302      	movs	r3, #2
 801ec02:	e0cc      	b.n	801ed9e <HAL_I2C_Master_Transmit+0x1ea>
 801ec04:	68fb      	ldr	r3, [r7, #12]
 801ec06:	2201      	movs	r2, #1
 801ec08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 801ec0c:	68fb      	ldr	r3, [r7, #12]
 801ec0e:	681b      	ldr	r3, [r3, #0]
 801ec10:	681b      	ldr	r3, [r3, #0]
 801ec12:	f003 0301 	and.w	r3, r3, #1
 801ec16:	2b01      	cmp	r3, #1
 801ec18:	d007      	beq.n	801ec2a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 801ec1a:	68fb      	ldr	r3, [r7, #12]
 801ec1c:	681b      	ldr	r3, [r3, #0]
 801ec1e:	681a      	ldr	r2, [r3, #0]
 801ec20:	68fb      	ldr	r3, [r7, #12]
 801ec22:	681b      	ldr	r3, [r3, #0]
 801ec24:	f042 0201 	orr.w	r2, r2, #1
 801ec28:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 801ec2a:	68fb      	ldr	r3, [r7, #12]
 801ec2c:	681b      	ldr	r3, [r3, #0]
 801ec2e:	681a      	ldr	r2, [r3, #0]
 801ec30:	68fb      	ldr	r3, [r7, #12]
 801ec32:	681b      	ldr	r3, [r3, #0]
 801ec34:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 801ec38:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 801ec3a:	68fb      	ldr	r3, [r7, #12]
 801ec3c:	2221      	movs	r2, #33	; 0x21
 801ec3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 801ec42:	68fb      	ldr	r3, [r7, #12]
 801ec44:	2210      	movs	r2, #16
 801ec46:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 801ec4a:	68fb      	ldr	r3, [r7, #12]
 801ec4c:	2200      	movs	r2, #0
 801ec4e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 801ec50:	68fb      	ldr	r3, [r7, #12]
 801ec52:	687a      	ldr	r2, [r7, #4]
 801ec54:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 801ec56:	68fb      	ldr	r3, [r7, #12]
 801ec58:	893a      	ldrh	r2, [r7, #8]
 801ec5a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 801ec5c:	68fb      	ldr	r3, [r7, #12]
 801ec5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801ec60:	b29a      	uxth	r2, r3
 801ec62:	68fb      	ldr	r3, [r7, #12]
 801ec64:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 801ec66:	68fb      	ldr	r3, [r7, #12]
 801ec68:	4a50      	ldr	r2, [pc, #320]	; (801edac <HAL_I2C_Master_Transmit+0x1f8>)
 801ec6a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 801ec6c:	8979      	ldrh	r1, [r7, #10]
 801ec6e:	697b      	ldr	r3, [r7, #20]
 801ec70:	6a3a      	ldr	r2, [r7, #32]
 801ec72:	68f8      	ldr	r0, [r7, #12]
 801ec74:	f000 f9ca 	bl	801f00c <I2C_MasterRequestWrite>
 801ec78:	4603      	mov	r3, r0
 801ec7a:	2b00      	cmp	r3, #0
 801ec7c:	d001      	beq.n	801ec82 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 801ec7e:	2301      	movs	r3, #1
 801ec80:	e08d      	b.n	801ed9e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 801ec82:	2300      	movs	r3, #0
 801ec84:	613b      	str	r3, [r7, #16]
 801ec86:	68fb      	ldr	r3, [r7, #12]
 801ec88:	681b      	ldr	r3, [r3, #0]
 801ec8a:	695b      	ldr	r3, [r3, #20]
 801ec8c:	613b      	str	r3, [r7, #16]
 801ec8e:	68fb      	ldr	r3, [r7, #12]
 801ec90:	681b      	ldr	r3, [r3, #0]
 801ec92:	699b      	ldr	r3, [r3, #24]
 801ec94:	613b      	str	r3, [r7, #16]
 801ec96:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 801ec98:	e066      	b.n	801ed68 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 801ec9a:	697a      	ldr	r2, [r7, #20]
 801ec9c:	6a39      	ldr	r1, [r7, #32]
 801ec9e:	68f8      	ldr	r0, [r7, #12]
 801eca0:	f000 fb0c 	bl	801f2bc <I2C_WaitOnTXEFlagUntilTimeout>
 801eca4:	4603      	mov	r3, r0
 801eca6:	2b00      	cmp	r3, #0
 801eca8:	d00d      	beq.n	801ecc6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 801ecaa:	68fb      	ldr	r3, [r7, #12]
 801ecac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801ecae:	2b04      	cmp	r3, #4
 801ecb0:	d107      	bne.n	801ecc2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 801ecb2:	68fb      	ldr	r3, [r7, #12]
 801ecb4:	681b      	ldr	r3, [r3, #0]
 801ecb6:	681a      	ldr	r2, [r3, #0]
 801ecb8:	68fb      	ldr	r3, [r7, #12]
 801ecba:	681b      	ldr	r3, [r3, #0]
 801ecbc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801ecc0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 801ecc2:	2301      	movs	r3, #1
 801ecc4:	e06b      	b.n	801ed9e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 801ecc6:	68fb      	ldr	r3, [r7, #12]
 801ecc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ecca:	781a      	ldrb	r2, [r3, #0]
 801eccc:	68fb      	ldr	r3, [r7, #12]
 801ecce:	681b      	ldr	r3, [r3, #0]
 801ecd0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 801ecd2:	68fb      	ldr	r3, [r7, #12]
 801ecd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ecd6:	1c5a      	adds	r2, r3, #1
 801ecd8:	68fb      	ldr	r3, [r7, #12]
 801ecda:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 801ecdc:	68fb      	ldr	r3, [r7, #12]
 801ecde:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801ece0:	b29b      	uxth	r3, r3
 801ece2:	3b01      	subs	r3, #1
 801ece4:	b29a      	uxth	r2, r3
 801ece6:	68fb      	ldr	r3, [r7, #12]
 801ece8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 801ecea:	68fb      	ldr	r3, [r7, #12]
 801ecec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801ecee:	3b01      	subs	r3, #1
 801ecf0:	b29a      	uxth	r2, r3
 801ecf2:	68fb      	ldr	r3, [r7, #12]
 801ecf4:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 801ecf6:	68fb      	ldr	r3, [r7, #12]
 801ecf8:	681b      	ldr	r3, [r3, #0]
 801ecfa:	695b      	ldr	r3, [r3, #20]
 801ecfc:	f003 0304 	and.w	r3, r3, #4
 801ed00:	2b04      	cmp	r3, #4
 801ed02:	d11b      	bne.n	801ed3c <HAL_I2C_Master_Transmit+0x188>
 801ed04:	68fb      	ldr	r3, [r7, #12]
 801ed06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801ed08:	2b00      	cmp	r3, #0
 801ed0a:	d017      	beq.n	801ed3c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 801ed0c:	68fb      	ldr	r3, [r7, #12]
 801ed0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ed10:	781a      	ldrb	r2, [r3, #0]
 801ed12:	68fb      	ldr	r3, [r7, #12]
 801ed14:	681b      	ldr	r3, [r3, #0]
 801ed16:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 801ed18:	68fb      	ldr	r3, [r7, #12]
 801ed1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ed1c:	1c5a      	adds	r2, r3, #1
 801ed1e:	68fb      	ldr	r3, [r7, #12]
 801ed20:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 801ed22:	68fb      	ldr	r3, [r7, #12]
 801ed24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801ed26:	b29b      	uxth	r3, r3
 801ed28:	3b01      	subs	r3, #1
 801ed2a:	b29a      	uxth	r2, r3
 801ed2c:	68fb      	ldr	r3, [r7, #12]
 801ed2e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 801ed30:	68fb      	ldr	r3, [r7, #12]
 801ed32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801ed34:	3b01      	subs	r3, #1
 801ed36:	b29a      	uxth	r2, r3
 801ed38:	68fb      	ldr	r3, [r7, #12]
 801ed3a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 801ed3c:	697a      	ldr	r2, [r7, #20]
 801ed3e:	6a39      	ldr	r1, [r7, #32]
 801ed40:	68f8      	ldr	r0, [r7, #12]
 801ed42:	f000 fafc 	bl	801f33e <I2C_WaitOnBTFFlagUntilTimeout>
 801ed46:	4603      	mov	r3, r0
 801ed48:	2b00      	cmp	r3, #0
 801ed4a:	d00d      	beq.n	801ed68 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 801ed4c:	68fb      	ldr	r3, [r7, #12]
 801ed4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801ed50:	2b04      	cmp	r3, #4
 801ed52:	d107      	bne.n	801ed64 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 801ed54:	68fb      	ldr	r3, [r7, #12]
 801ed56:	681b      	ldr	r3, [r3, #0]
 801ed58:	681a      	ldr	r2, [r3, #0]
 801ed5a:	68fb      	ldr	r3, [r7, #12]
 801ed5c:	681b      	ldr	r3, [r3, #0]
 801ed5e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801ed62:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 801ed64:	2301      	movs	r3, #1
 801ed66:	e01a      	b.n	801ed9e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 801ed68:	68fb      	ldr	r3, [r7, #12]
 801ed6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801ed6c:	2b00      	cmp	r3, #0
 801ed6e:	d194      	bne.n	801ec9a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 801ed70:	68fb      	ldr	r3, [r7, #12]
 801ed72:	681b      	ldr	r3, [r3, #0]
 801ed74:	681a      	ldr	r2, [r3, #0]
 801ed76:	68fb      	ldr	r3, [r7, #12]
 801ed78:	681b      	ldr	r3, [r3, #0]
 801ed7a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801ed7e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 801ed80:	68fb      	ldr	r3, [r7, #12]
 801ed82:	2220      	movs	r2, #32
 801ed84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 801ed88:	68fb      	ldr	r3, [r7, #12]
 801ed8a:	2200      	movs	r2, #0
 801ed8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 801ed90:	68fb      	ldr	r3, [r7, #12]
 801ed92:	2200      	movs	r2, #0
 801ed94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 801ed98:	2300      	movs	r3, #0
 801ed9a:	e000      	b.n	801ed9e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 801ed9c:	2302      	movs	r3, #2
  }
}
 801ed9e:	4618      	mov	r0, r3
 801eda0:	3718      	adds	r7, #24
 801eda2:	46bd      	mov	sp, r7
 801eda4:	bd80      	pop	{r7, pc}
 801eda6:	bf00      	nop
 801eda8:	00100002 	.word	0x00100002
 801edac:	ffff0000 	.word	0xffff0000

0801edb0 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 801edb0:	b580      	push	{r7, lr}
 801edb2:	b08a      	sub	sp, #40	; 0x28
 801edb4:	af02      	add	r7, sp, #8
 801edb6:	60f8      	str	r0, [r7, #12]
 801edb8:	607a      	str	r2, [r7, #4]
 801edba:	603b      	str	r3, [r7, #0]
 801edbc:	460b      	mov	r3, r1
 801edbe:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 801edc0:	f7fe ff24 	bl	801dc0c <HAL_GetTick>
 801edc4:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 801edc6:	2301      	movs	r3, #1
 801edc8:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 801edca:	68fb      	ldr	r3, [r7, #12]
 801edcc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801edd0:	b2db      	uxtb	r3, r3
 801edd2:	2b20      	cmp	r3, #32
 801edd4:	f040 8111 	bne.w	801effa <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 801edd8:	69fb      	ldr	r3, [r7, #28]
 801edda:	9300      	str	r3, [sp, #0]
 801eddc:	2319      	movs	r3, #25
 801edde:	2201      	movs	r2, #1
 801ede0:	4988      	ldr	r1, [pc, #544]	; (801f004 <HAL_I2C_IsDeviceReady+0x254>)
 801ede2:	68f8      	ldr	r0, [r7, #12]
 801ede4:	f000 f994 	bl	801f110 <I2C_WaitOnFlagUntilTimeout>
 801ede8:	4603      	mov	r3, r0
 801edea:	2b00      	cmp	r3, #0
 801edec:	d001      	beq.n	801edf2 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 801edee:	2302      	movs	r3, #2
 801edf0:	e104      	b.n	801effc <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 801edf2:	68fb      	ldr	r3, [r7, #12]
 801edf4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801edf8:	2b01      	cmp	r3, #1
 801edfa:	d101      	bne.n	801ee00 <HAL_I2C_IsDeviceReady+0x50>
 801edfc:	2302      	movs	r3, #2
 801edfe:	e0fd      	b.n	801effc <HAL_I2C_IsDeviceReady+0x24c>
 801ee00:	68fb      	ldr	r3, [r7, #12]
 801ee02:	2201      	movs	r2, #1
 801ee04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 801ee08:	68fb      	ldr	r3, [r7, #12]
 801ee0a:	681b      	ldr	r3, [r3, #0]
 801ee0c:	681b      	ldr	r3, [r3, #0]
 801ee0e:	f003 0301 	and.w	r3, r3, #1
 801ee12:	2b01      	cmp	r3, #1
 801ee14:	d007      	beq.n	801ee26 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 801ee16:	68fb      	ldr	r3, [r7, #12]
 801ee18:	681b      	ldr	r3, [r3, #0]
 801ee1a:	681a      	ldr	r2, [r3, #0]
 801ee1c:	68fb      	ldr	r3, [r7, #12]
 801ee1e:	681b      	ldr	r3, [r3, #0]
 801ee20:	f042 0201 	orr.w	r2, r2, #1
 801ee24:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 801ee26:	68fb      	ldr	r3, [r7, #12]
 801ee28:	681b      	ldr	r3, [r3, #0]
 801ee2a:	681a      	ldr	r2, [r3, #0]
 801ee2c:	68fb      	ldr	r3, [r7, #12]
 801ee2e:	681b      	ldr	r3, [r3, #0]
 801ee30:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 801ee34:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 801ee36:	68fb      	ldr	r3, [r7, #12]
 801ee38:	2224      	movs	r2, #36	; 0x24
 801ee3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 801ee3e:	68fb      	ldr	r3, [r7, #12]
 801ee40:	2200      	movs	r2, #0
 801ee42:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 801ee44:	68fb      	ldr	r3, [r7, #12]
 801ee46:	4a70      	ldr	r2, [pc, #448]	; (801f008 <HAL_I2C_IsDeviceReady+0x258>)
 801ee48:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 801ee4a:	68fb      	ldr	r3, [r7, #12]
 801ee4c:	681b      	ldr	r3, [r3, #0]
 801ee4e:	681a      	ldr	r2, [r3, #0]
 801ee50:	68fb      	ldr	r3, [r7, #12]
 801ee52:	681b      	ldr	r3, [r3, #0]
 801ee54:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801ee58:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 801ee5a:	69fb      	ldr	r3, [r7, #28]
 801ee5c:	9300      	str	r3, [sp, #0]
 801ee5e:	683b      	ldr	r3, [r7, #0]
 801ee60:	2200      	movs	r2, #0
 801ee62:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 801ee66:	68f8      	ldr	r0, [r7, #12]
 801ee68:	f000 f952 	bl	801f110 <I2C_WaitOnFlagUntilTimeout>
 801ee6c:	4603      	mov	r3, r0
 801ee6e:	2b00      	cmp	r3, #0
 801ee70:	d00d      	beq.n	801ee8e <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 801ee72:	68fb      	ldr	r3, [r7, #12]
 801ee74:	681b      	ldr	r3, [r3, #0]
 801ee76:	681b      	ldr	r3, [r3, #0]
 801ee78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801ee7c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801ee80:	d103      	bne.n	801ee8a <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 801ee82:	68fb      	ldr	r3, [r7, #12]
 801ee84:	f44f 7200 	mov.w	r2, #512	; 0x200
 801ee88:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 801ee8a:	2303      	movs	r3, #3
 801ee8c:	e0b6      	b.n	801effc <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 801ee8e:	897b      	ldrh	r3, [r7, #10]
 801ee90:	b2db      	uxtb	r3, r3
 801ee92:	461a      	mov	r2, r3
 801ee94:	68fb      	ldr	r3, [r7, #12]
 801ee96:	681b      	ldr	r3, [r3, #0]
 801ee98:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 801ee9c:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 801ee9e:	f7fe feb5 	bl	801dc0c <HAL_GetTick>
 801eea2:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 801eea4:	68fb      	ldr	r3, [r7, #12]
 801eea6:	681b      	ldr	r3, [r3, #0]
 801eea8:	695b      	ldr	r3, [r3, #20]
 801eeaa:	f003 0302 	and.w	r3, r3, #2
 801eeae:	2b02      	cmp	r3, #2
 801eeb0:	bf0c      	ite	eq
 801eeb2:	2301      	moveq	r3, #1
 801eeb4:	2300      	movne	r3, #0
 801eeb6:	b2db      	uxtb	r3, r3
 801eeb8:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 801eeba:	68fb      	ldr	r3, [r7, #12]
 801eebc:	681b      	ldr	r3, [r3, #0]
 801eebe:	695b      	ldr	r3, [r3, #20]
 801eec0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801eec4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801eec8:	bf0c      	ite	eq
 801eeca:	2301      	moveq	r3, #1
 801eecc:	2300      	movne	r3, #0
 801eece:	b2db      	uxtb	r3, r3
 801eed0:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 801eed2:	e025      	b.n	801ef20 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 801eed4:	f7fe fe9a 	bl	801dc0c <HAL_GetTick>
 801eed8:	4602      	mov	r2, r0
 801eeda:	69fb      	ldr	r3, [r7, #28]
 801eedc:	1ad3      	subs	r3, r2, r3
 801eede:	683a      	ldr	r2, [r7, #0]
 801eee0:	429a      	cmp	r2, r3
 801eee2:	d302      	bcc.n	801eeea <HAL_I2C_IsDeviceReady+0x13a>
 801eee4:	683b      	ldr	r3, [r7, #0]
 801eee6:	2b00      	cmp	r3, #0
 801eee8:	d103      	bne.n	801eef2 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 801eeea:	68fb      	ldr	r3, [r7, #12]
 801eeec:	22a0      	movs	r2, #160	; 0xa0
 801eeee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 801eef2:	68fb      	ldr	r3, [r7, #12]
 801eef4:	681b      	ldr	r3, [r3, #0]
 801eef6:	695b      	ldr	r3, [r3, #20]
 801eef8:	f003 0302 	and.w	r3, r3, #2
 801eefc:	2b02      	cmp	r3, #2
 801eefe:	bf0c      	ite	eq
 801ef00:	2301      	moveq	r3, #1
 801ef02:	2300      	movne	r3, #0
 801ef04:	b2db      	uxtb	r3, r3
 801ef06:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 801ef08:	68fb      	ldr	r3, [r7, #12]
 801ef0a:	681b      	ldr	r3, [r3, #0]
 801ef0c:	695b      	ldr	r3, [r3, #20]
 801ef0e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801ef12:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801ef16:	bf0c      	ite	eq
 801ef18:	2301      	moveq	r3, #1
 801ef1a:	2300      	movne	r3, #0
 801ef1c:	b2db      	uxtb	r3, r3
 801ef1e:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 801ef20:	68fb      	ldr	r3, [r7, #12]
 801ef22:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801ef26:	b2db      	uxtb	r3, r3
 801ef28:	2ba0      	cmp	r3, #160	; 0xa0
 801ef2a:	d005      	beq.n	801ef38 <HAL_I2C_IsDeviceReady+0x188>
 801ef2c:	7dfb      	ldrb	r3, [r7, #23]
 801ef2e:	2b00      	cmp	r3, #0
 801ef30:	d102      	bne.n	801ef38 <HAL_I2C_IsDeviceReady+0x188>
 801ef32:	7dbb      	ldrb	r3, [r7, #22]
 801ef34:	2b00      	cmp	r3, #0
 801ef36:	d0cd      	beq.n	801eed4 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 801ef38:	68fb      	ldr	r3, [r7, #12]
 801ef3a:	2220      	movs	r2, #32
 801ef3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 801ef40:	68fb      	ldr	r3, [r7, #12]
 801ef42:	681b      	ldr	r3, [r3, #0]
 801ef44:	695b      	ldr	r3, [r3, #20]
 801ef46:	f003 0302 	and.w	r3, r3, #2
 801ef4a:	2b02      	cmp	r3, #2
 801ef4c:	d129      	bne.n	801efa2 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 801ef4e:	68fb      	ldr	r3, [r7, #12]
 801ef50:	681b      	ldr	r3, [r3, #0]
 801ef52:	681a      	ldr	r2, [r3, #0]
 801ef54:	68fb      	ldr	r3, [r7, #12]
 801ef56:	681b      	ldr	r3, [r3, #0]
 801ef58:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801ef5c:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 801ef5e:	2300      	movs	r3, #0
 801ef60:	613b      	str	r3, [r7, #16]
 801ef62:	68fb      	ldr	r3, [r7, #12]
 801ef64:	681b      	ldr	r3, [r3, #0]
 801ef66:	695b      	ldr	r3, [r3, #20]
 801ef68:	613b      	str	r3, [r7, #16]
 801ef6a:	68fb      	ldr	r3, [r7, #12]
 801ef6c:	681b      	ldr	r3, [r3, #0]
 801ef6e:	699b      	ldr	r3, [r3, #24]
 801ef70:	613b      	str	r3, [r7, #16]
 801ef72:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 801ef74:	69fb      	ldr	r3, [r7, #28]
 801ef76:	9300      	str	r3, [sp, #0]
 801ef78:	2319      	movs	r3, #25
 801ef7a:	2201      	movs	r2, #1
 801ef7c:	4921      	ldr	r1, [pc, #132]	; (801f004 <HAL_I2C_IsDeviceReady+0x254>)
 801ef7e:	68f8      	ldr	r0, [r7, #12]
 801ef80:	f000 f8c6 	bl	801f110 <I2C_WaitOnFlagUntilTimeout>
 801ef84:	4603      	mov	r3, r0
 801ef86:	2b00      	cmp	r3, #0
 801ef88:	d001      	beq.n	801ef8e <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 801ef8a:	2301      	movs	r3, #1
 801ef8c:	e036      	b.n	801effc <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 801ef8e:	68fb      	ldr	r3, [r7, #12]
 801ef90:	2220      	movs	r2, #32
 801ef92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 801ef96:	68fb      	ldr	r3, [r7, #12]
 801ef98:	2200      	movs	r2, #0
 801ef9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 801ef9e:	2300      	movs	r3, #0
 801efa0:	e02c      	b.n	801effc <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 801efa2:	68fb      	ldr	r3, [r7, #12]
 801efa4:	681b      	ldr	r3, [r3, #0]
 801efa6:	681a      	ldr	r2, [r3, #0]
 801efa8:	68fb      	ldr	r3, [r7, #12]
 801efaa:	681b      	ldr	r3, [r3, #0]
 801efac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801efb0:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 801efb2:	68fb      	ldr	r3, [r7, #12]
 801efb4:	681b      	ldr	r3, [r3, #0]
 801efb6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 801efba:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 801efbc:	69fb      	ldr	r3, [r7, #28]
 801efbe:	9300      	str	r3, [sp, #0]
 801efc0:	2319      	movs	r3, #25
 801efc2:	2201      	movs	r2, #1
 801efc4:	490f      	ldr	r1, [pc, #60]	; (801f004 <HAL_I2C_IsDeviceReady+0x254>)
 801efc6:	68f8      	ldr	r0, [r7, #12]
 801efc8:	f000 f8a2 	bl	801f110 <I2C_WaitOnFlagUntilTimeout>
 801efcc:	4603      	mov	r3, r0
 801efce:	2b00      	cmp	r3, #0
 801efd0:	d001      	beq.n	801efd6 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 801efd2:	2301      	movs	r3, #1
 801efd4:	e012      	b.n	801effc <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 801efd6:	69bb      	ldr	r3, [r7, #24]
 801efd8:	3301      	adds	r3, #1
 801efda:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 801efdc:	69ba      	ldr	r2, [r7, #24]
 801efde:	687b      	ldr	r3, [r7, #4]
 801efe0:	429a      	cmp	r2, r3
 801efe2:	f4ff af32 	bcc.w	801ee4a <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 801efe6:	68fb      	ldr	r3, [r7, #12]
 801efe8:	2220      	movs	r2, #32
 801efea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 801efee:	68fb      	ldr	r3, [r7, #12]
 801eff0:	2200      	movs	r2, #0
 801eff2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 801eff6:	2301      	movs	r3, #1
 801eff8:	e000      	b.n	801effc <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 801effa:	2302      	movs	r3, #2
  }
}
 801effc:	4618      	mov	r0, r3
 801effe:	3720      	adds	r7, #32
 801f000:	46bd      	mov	sp, r7
 801f002:	bd80      	pop	{r7, pc}
 801f004:	00100002 	.word	0x00100002
 801f008:	ffff0000 	.word	0xffff0000

0801f00c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 801f00c:	b580      	push	{r7, lr}
 801f00e:	b088      	sub	sp, #32
 801f010:	af02      	add	r7, sp, #8
 801f012:	60f8      	str	r0, [r7, #12]
 801f014:	607a      	str	r2, [r7, #4]
 801f016:	603b      	str	r3, [r7, #0]
 801f018:	460b      	mov	r3, r1
 801f01a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 801f01c:	68fb      	ldr	r3, [r7, #12]
 801f01e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801f020:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 801f022:	697b      	ldr	r3, [r7, #20]
 801f024:	2b08      	cmp	r3, #8
 801f026:	d006      	beq.n	801f036 <I2C_MasterRequestWrite+0x2a>
 801f028:	697b      	ldr	r3, [r7, #20]
 801f02a:	2b01      	cmp	r3, #1
 801f02c:	d003      	beq.n	801f036 <I2C_MasterRequestWrite+0x2a>
 801f02e:	697b      	ldr	r3, [r7, #20]
 801f030:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 801f034:	d108      	bne.n	801f048 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 801f036:	68fb      	ldr	r3, [r7, #12]
 801f038:	681b      	ldr	r3, [r3, #0]
 801f03a:	681a      	ldr	r2, [r3, #0]
 801f03c:	68fb      	ldr	r3, [r7, #12]
 801f03e:	681b      	ldr	r3, [r3, #0]
 801f040:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801f044:	601a      	str	r2, [r3, #0]
 801f046:	e00b      	b.n	801f060 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 801f048:	68fb      	ldr	r3, [r7, #12]
 801f04a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801f04c:	2b12      	cmp	r3, #18
 801f04e:	d107      	bne.n	801f060 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 801f050:	68fb      	ldr	r3, [r7, #12]
 801f052:	681b      	ldr	r3, [r3, #0]
 801f054:	681a      	ldr	r2, [r3, #0]
 801f056:	68fb      	ldr	r3, [r7, #12]
 801f058:	681b      	ldr	r3, [r3, #0]
 801f05a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801f05e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 801f060:	683b      	ldr	r3, [r7, #0]
 801f062:	9300      	str	r3, [sp, #0]
 801f064:	687b      	ldr	r3, [r7, #4]
 801f066:	2200      	movs	r2, #0
 801f068:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 801f06c:	68f8      	ldr	r0, [r7, #12]
 801f06e:	f000 f84f 	bl	801f110 <I2C_WaitOnFlagUntilTimeout>
 801f072:	4603      	mov	r3, r0
 801f074:	2b00      	cmp	r3, #0
 801f076:	d00d      	beq.n	801f094 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 801f078:	68fb      	ldr	r3, [r7, #12]
 801f07a:	681b      	ldr	r3, [r3, #0]
 801f07c:	681b      	ldr	r3, [r3, #0]
 801f07e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801f082:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801f086:	d103      	bne.n	801f090 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 801f088:	68fb      	ldr	r3, [r7, #12]
 801f08a:	f44f 7200 	mov.w	r2, #512	; 0x200
 801f08e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 801f090:	2303      	movs	r3, #3
 801f092:	e035      	b.n	801f100 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 801f094:	68fb      	ldr	r3, [r7, #12]
 801f096:	691b      	ldr	r3, [r3, #16]
 801f098:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801f09c:	d108      	bne.n	801f0b0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 801f09e:	897b      	ldrh	r3, [r7, #10]
 801f0a0:	b2db      	uxtb	r3, r3
 801f0a2:	461a      	mov	r2, r3
 801f0a4:	68fb      	ldr	r3, [r7, #12]
 801f0a6:	681b      	ldr	r3, [r3, #0]
 801f0a8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 801f0ac:	611a      	str	r2, [r3, #16]
 801f0ae:	e01b      	b.n	801f0e8 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 801f0b0:	897b      	ldrh	r3, [r7, #10]
 801f0b2:	11db      	asrs	r3, r3, #7
 801f0b4:	b2db      	uxtb	r3, r3
 801f0b6:	f003 0306 	and.w	r3, r3, #6
 801f0ba:	b2db      	uxtb	r3, r3
 801f0bc:	f063 030f 	orn	r3, r3, #15
 801f0c0:	b2da      	uxtb	r2, r3
 801f0c2:	68fb      	ldr	r3, [r7, #12]
 801f0c4:	681b      	ldr	r3, [r3, #0]
 801f0c6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 801f0c8:	683b      	ldr	r3, [r7, #0]
 801f0ca:	687a      	ldr	r2, [r7, #4]
 801f0cc:	490e      	ldr	r1, [pc, #56]	; (801f108 <I2C_MasterRequestWrite+0xfc>)
 801f0ce:	68f8      	ldr	r0, [r7, #12]
 801f0d0:	f000 f875 	bl	801f1be <I2C_WaitOnMasterAddressFlagUntilTimeout>
 801f0d4:	4603      	mov	r3, r0
 801f0d6:	2b00      	cmp	r3, #0
 801f0d8:	d001      	beq.n	801f0de <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 801f0da:	2301      	movs	r3, #1
 801f0dc:	e010      	b.n	801f100 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 801f0de:	897b      	ldrh	r3, [r7, #10]
 801f0e0:	b2da      	uxtb	r2, r3
 801f0e2:	68fb      	ldr	r3, [r7, #12]
 801f0e4:	681b      	ldr	r3, [r3, #0]
 801f0e6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 801f0e8:	683b      	ldr	r3, [r7, #0]
 801f0ea:	687a      	ldr	r2, [r7, #4]
 801f0ec:	4907      	ldr	r1, [pc, #28]	; (801f10c <I2C_MasterRequestWrite+0x100>)
 801f0ee:	68f8      	ldr	r0, [r7, #12]
 801f0f0:	f000 f865 	bl	801f1be <I2C_WaitOnMasterAddressFlagUntilTimeout>
 801f0f4:	4603      	mov	r3, r0
 801f0f6:	2b00      	cmp	r3, #0
 801f0f8:	d001      	beq.n	801f0fe <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 801f0fa:	2301      	movs	r3, #1
 801f0fc:	e000      	b.n	801f100 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 801f0fe:	2300      	movs	r3, #0
}
 801f100:	4618      	mov	r0, r3
 801f102:	3718      	adds	r7, #24
 801f104:	46bd      	mov	sp, r7
 801f106:	bd80      	pop	{r7, pc}
 801f108:	00010008 	.word	0x00010008
 801f10c:	00010002 	.word	0x00010002

0801f110 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 801f110:	b580      	push	{r7, lr}
 801f112:	b084      	sub	sp, #16
 801f114:	af00      	add	r7, sp, #0
 801f116:	60f8      	str	r0, [r7, #12]
 801f118:	60b9      	str	r1, [r7, #8]
 801f11a:	603b      	str	r3, [r7, #0]
 801f11c:	4613      	mov	r3, r2
 801f11e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 801f120:	e025      	b.n	801f16e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801f122:	683b      	ldr	r3, [r7, #0]
 801f124:	f1b3 3fff 	cmp.w	r3, #4294967295
 801f128:	d021      	beq.n	801f16e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801f12a:	f7fe fd6f 	bl	801dc0c <HAL_GetTick>
 801f12e:	4602      	mov	r2, r0
 801f130:	69bb      	ldr	r3, [r7, #24]
 801f132:	1ad3      	subs	r3, r2, r3
 801f134:	683a      	ldr	r2, [r7, #0]
 801f136:	429a      	cmp	r2, r3
 801f138:	d302      	bcc.n	801f140 <I2C_WaitOnFlagUntilTimeout+0x30>
 801f13a:	683b      	ldr	r3, [r7, #0]
 801f13c:	2b00      	cmp	r3, #0
 801f13e:	d116      	bne.n	801f16e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 801f140:	68fb      	ldr	r3, [r7, #12]
 801f142:	2200      	movs	r2, #0
 801f144:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 801f146:	68fb      	ldr	r3, [r7, #12]
 801f148:	2220      	movs	r2, #32
 801f14a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 801f14e:	68fb      	ldr	r3, [r7, #12]
 801f150:	2200      	movs	r2, #0
 801f152:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 801f156:	68fb      	ldr	r3, [r7, #12]
 801f158:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801f15a:	f043 0220 	orr.w	r2, r3, #32
 801f15e:	68fb      	ldr	r3, [r7, #12]
 801f160:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 801f162:	68fb      	ldr	r3, [r7, #12]
 801f164:	2200      	movs	r2, #0
 801f166:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 801f16a:	2301      	movs	r3, #1
 801f16c:	e023      	b.n	801f1b6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 801f16e:	68bb      	ldr	r3, [r7, #8]
 801f170:	0c1b      	lsrs	r3, r3, #16
 801f172:	b2db      	uxtb	r3, r3
 801f174:	2b01      	cmp	r3, #1
 801f176:	d10d      	bne.n	801f194 <I2C_WaitOnFlagUntilTimeout+0x84>
 801f178:	68fb      	ldr	r3, [r7, #12]
 801f17a:	681b      	ldr	r3, [r3, #0]
 801f17c:	695b      	ldr	r3, [r3, #20]
 801f17e:	43da      	mvns	r2, r3
 801f180:	68bb      	ldr	r3, [r7, #8]
 801f182:	4013      	ands	r3, r2
 801f184:	b29b      	uxth	r3, r3
 801f186:	2b00      	cmp	r3, #0
 801f188:	bf0c      	ite	eq
 801f18a:	2301      	moveq	r3, #1
 801f18c:	2300      	movne	r3, #0
 801f18e:	b2db      	uxtb	r3, r3
 801f190:	461a      	mov	r2, r3
 801f192:	e00c      	b.n	801f1ae <I2C_WaitOnFlagUntilTimeout+0x9e>
 801f194:	68fb      	ldr	r3, [r7, #12]
 801f196:	681b      	ldr	r3, [r3, #0]
 801f198:	699b      	ldr	r3, [r3, #24]
 801f19a:	43da      	mvns	r2, r3
 801f19c:	68bb      	ldr	r3, [r7, #8]
 801f19e:	4013      	ands	r3, r2
 801f1a0:	b29b      	uxth	r3, r3
 801f1a2:	2b00      	cmp	r3, #0
 801f1a4:	bf0c      	ite	eq
 801f1a6:	2301      	moveq	r3, #1
 801f1a8:	2300      	movne	r3, #0
 801f1aa:	b2db      	uxtb	r3, r3
 801f1ac:	461a      	mov	r2, r3
 801f1ae:	79fb      	ldrb	r3, [r7, #7]
 801f1b0:	429a      	cmp	r2, r3
 801f1b2:	d0b6      	beq.n	801f122 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 801f1b4:	2300      	movs	r3, #0
}
 801f1b6:	4618      	mov	r0, r3
 801f1b8:	3710      	adds	r7, #16
 801f1ba:	46bd      	mov	sp, r7
 801f1bc:	bd80      	pop	{r7, pc}

0801f1be <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 801f1be:	b580      	push	{r7, lr}
 801f1c0:	b084      	sub	sp, #16
 801f1c2:	af00      	add	r7, sp, #0
 801f1c4:	60f8      	str	r0, [r7, #12]
 801f1c6:	60b9      	str	r1, [r7, #8]
 801f1c8:	607a      	str	r2, [r7, #4]
 801f1ca:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 801f1cc:	e051      	b.n	801f272 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 801f1ce:	68fb      	ldr	r3, [r7, #12]
 801f1d0:	681b      	ldr	r3, [r3, #0]
 801f1d2:	695b      	ldr	r3, [r3, #20]
 801f1d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801f1d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801f1dc:	d123      	bne.n	801f226 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 801f1de:	68fb      	ldr	r3, [r7, #12]
 801f1e0:	681b      	ldr	r3, [r3, #0]
 801f1e2:	681a      	ldr	r2, [r3, #0]
 801f1e4:	68fb      	ldr	r3, [r7, #12]
 801f1e6:	681b      	ldr	r3, [r3, #0]
 801f1e8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801f1ec:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 801f1ee:	68fb      	ldr	r3, [r7, #12]
 801f1f0:	681b      	ldr	r3, [r3, #0]
 801f1f2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 801f1f6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 801f1f8:	68fb      	ldr	r3, [r7, #12]
 801f1fa:	2200      	movs	r2, #0
 801f1fc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 801f1fe:	68fb      	ldr	r3, [r7, #12]
 801f200:	2220      	movs	r2, #32
 801f202:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 801f206:	68fb      	ldr	r3, [r7, #12]
 801f208:	2200      	movs	r2, #0
 801f20a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 801f20e:	68fb      	ldr	r3, [r7, #12]
 801f210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801f212:	f043 0204 	orr.w	r2, r3, #4
 801f216:	68fb      	ldr	r3, [r7, #12]
 801f218:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 801f21a:	68fb      	ldr	r3, [r7, #12]
 801f21c:	2200      	movs	r2, #0
 801f21e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 801f222:	2301      	movs	r3, #1
 801f224:	e046      	b.n	801f2b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801f226:	687b      	ldr	r3, [r7, #4]
 801f228:	f1b3 3fff 	cmp.w	r3, #4294967295
 801f22c:	d021      	beq.n	801f272 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801f22e:	f7fe fced 	bl	801dc0c <HAL_GetTick>
 801f232:	4602      	mov	r2, r0
 801f234:	683b      	ldr	r3, [r7, #0]
 801f236:	1ad3      	subs	r3, r2, r3
 801f238:	687a      	ldr	r2, [r7, #4]
 801f23a:	429a      	cmp	r2, r3
 801f23c:	d302      	bcc.n	801f244 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 801f23e:	687b      	ldr	r3, [r7, #4]
 801f240:	2b00      	cmp	r3, #0
 801f242:	d116      	bne.n	801f272 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 801f244:	68fb      	ldr	r3, [r7, #12]
 801f246:	2200      	movs	r2, #0
 801f248:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 801f24a:	68fb      	ldr	r3, [r7, #12]
 801f24c:	2220      	movs	r2, #32
 801f24e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 801f252:	68fb      	ldr	r3, [r7, #12]
 801f254:	2200      	movs	r2, #0
 801f256:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 801f25a:	68fb      	ldr	r3, [r7, #12]
 801f25c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801f25e:	f043 0220 	orr.w	r2, r3, #32
 801f262:	68fb      	ldr	r3, [r7, #12]
 801f264:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 801f266:	68fb      	ldr	r3, [r7, #12]
 801f268:	2200      	movs	r2, #0
 801f26a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 801f26e:	2301      	movs	r3, #1
 801f270:	e020      	b.n	801f2b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 801f272:	68bb      	ldr	r3, [r7, #8]
 801f274:	0c1b      	lsrs	r3, r3, #16
 801f276:	b2db      	uxtb	r3, r3
 801f278:	2b01      	cmp	r3, #1
 801f27a:	d10c      	bne.n	801f296 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 801f27c:	68fb      	ldr	r3, [r7, #12]
 801f27e:	681b      	ldr	r3, [r3, #0]
 801f280:	695b      	ldr	r3, [r3, #20]
 801f282:	43da      	mvns	r2, r3
 801f284:	68bb      	ldr	r3, [r7, #8]
 801f286:	4013      	ands	r3, r2
 801f288:	b29b      	uxth	r3, r3
 801f28a:	2b00      	cmp	r3, #0
 801f28c:	bf14      	ite	ne
 801f28e:	2301      	movne	r3, #1
 801f290:	2300      	moveq	r3, #0
 801f292:	b2db      	uxtb	r3, r3
 801f294:	e00b      	b.n	801f2ae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 801f296:	68fb      	ldr	r3, [r7, #12]
 801f298:	681b      	ldr	r3, [r3, #0]
 801f29a:	699b      	ldr	r3, [r3, #24]
 801f29c:	43da      	mvns	r2, r3
 801f29e:	68bb      	ldr	r3, [r7, #8]
 801f2a0:	4013      	ands	r3, r2
 801f2a2:	b29b      	uxth	r3, r3
 801f2a4:	2b00      	cmp	r3, #0
 801f2a6:	bf14      	ite	ne
 801f2a8:	2301      	movne	r3, #1
 801f2aa:	2300      	moveq	r3, #0
 801f2ac:	b2db      	uxtb	r3, r3
 801f2ae:	2b00      	cmp	r3, #0
 801f2b0:	d18d      	bne.n	801f1ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 801f2b2:	2300      	movs	r3, #0
}
 801f2b4:	4618      	mov	r0, r3
 801f2b6:	3710      	adds	r7, #16
 801f2b8:	46bd      	mov	sp, r7
 801f2ba:	bd80      	pop	{r7, pc}

0801f2bc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 801f2bc:	b580      	push	{r7, lr}
 801f2be:	b084      	sub	sp, #16
 801f2c0:	af00      	add	r7, sp, #0
 801f2c2:	60f8      	str	r0, [r7, #12]
 801f2c4:	60b9      	str	r1, [r7, #8]
 801f2c6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 801f2c8:	e02d      	b.n	801f326 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 801f2ca:	68f8      	ldr	r0, [r7, #12]
 801f2cc:	f000 f878 	bl	801f3c0 <I2C_IsAcknowledgeFailed>
 801f2d0:	4603      	mov	r3, r0
 801f2d2:	2b00      	cmp	r3, #0
 801f2d4:	d001      	beq.n	801f2da <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 801f2d6:	2301      	movs	r3, #1
 801f2d8:	e02d      	b.n	801f336 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801f2da:	68bb      	ldr	r3, [r7, #8]
 801f2dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 801f2e0:	d021      	beq.n	801f326 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801f2e2:	f7fe fc93 	bl	801dc0c <HAL_GetTick>
 801f2e6:	4602      	mov	r2, r0
 801f2e8:	687b      	ldr	r3, [r7, #4]
 801f2ea:	1ad3      	subs	r3, r2, r3
 801f2ec:	68ba      	ldr	r2, [r7, #8]
 801f2ee:	429a      	cmp	r2, r3
 801f2f0:	d302      	bcc.n	801f2f8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 801f2f2:	68bb      	ldr	r3, [r7, #8]
 801f2f4:	2b00      	cmp	r3, #0
 801f2f6:	d116      	bne.n	801f326 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 801f2f8:	68fb      	ldr	r3, [r7, #12]
 801f2fa:	2200      	movs	r2, #0
 801f2fc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 801f2fe:	68fb      	ldr	r3, [r7, #12]
 801f300:	2220      	movs	r2, #32
 801f302:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 801f306:	68fb      	ldr	r3, [r7, #12]
 801f308:	2200      	movs	r2, #0
 801f30a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 801f30e:	68fb      	ldr	r3, [r7, #12]
 801f310:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801f312:	f043 0220 	orr.w	r2, r3, #32
 801f316:	68fb      	ldr	r3, [r7, #12]
 801f318:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 801f31a:	68fb      	ldr	r3, [r7, #12]
 801f31c:	2200      	movs	r2, #0
 801f31e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 801f322:	2301      	movs	r3, #1
 801f324:	e007      	b.n	801f336 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 801f326:	68fb      	ldr	r3, [r7, #12]
 801f328:	681b      	ldr	r3, [r3, #0]
 801f32a:	695b      	ldr	r3, [r3, #20]
 801f32c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801f330:	2b80      	cmp	r3, #128	; 0x80
 801f332:	d1ca      	bne.n	801f2ca <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 801f334:	2300      	movs	r3, #0
}
 801f336:	4618      	mov	r0, r3
 801f338:	3710      	adds	r7, #16
 801f33a:	46bd      	mov	sp, r7
 801f33c:	bd80      	pop	{r7, pc}

0801f33e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 801f33e:	b580      	push	{r7, lr}
 801f340:	b084      	sub	sp, #16
 801f342:	af00      	add	r7, sp, #0
 801f344:	60f8      	str	r0, [r7, #12]
 801f346:	60b9      	str	r1, [r7, #8]
 801f348:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 801f34a:	e02d      	b.n	801f3a8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 801f34c:	68f8      	ldr	r0, [r7, #12]
 801f34e:	f000 f837 	bl	801f3c0 <I2C_IsAcknowledgeFailed>
 801f352:	4603      	mov	r3, r0
 801f354:	2b00      	cmp	r3, #0
 801f356:	d001      	beq.n	801f35c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 801f358:	2301      	movs	r3, #1
 801f35a:	e02d      	b.n	801f3b8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801f35c:	68bb      	ldr	r3, [r7, #8]
 801f35e:	f1b3 3fff 	cmp.w	r3, #4294967295
 801f362:	d021      	beq.n	801f3a8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801f364:	f7fe fc52 	bl	801dc0c <HAL_GetTick>
 801f368:	4602      	mov	r2, r0
 801f36a:	687b      	ldr	r3, [r7, #4]
 801f36c:	1ad3      	subs	r3, r2, r3
 801f36e:	68ba      	ldr	r2, [r7, #8]
 801f370:	429a      	cmp	r2, r3
 801f372:	d302      	bcc.n	801f37a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 801f374:	68bb      	ldr	r3, [r7, #8]
 801f376:	2b00      	cmp	r3, #0
 801f378:	d116      	bne.n	801f3a8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 801f37a:	68fb      	ldr	r3, [r7, #12]
 801f37c:	2200      	movs	r2, #0
 801f37e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 801f380:	68fb      	ldr	r3, [r7, #12]
 801f382:	2220      	movs	r2, #32
 801f384:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 801f388:	68fb      	ldr	r3, [r7, #12]
 801f38a:	2200      	movs	r2, #0
 801f38c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 801f390:	68fb      	ldr	r3, [r7, #12]
 801f392:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801f394:	f043 0220 	orr.w	r2, r3, #32
 801f398:	68fb      	ldr	r3, [r7, #12]
 801f39a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 801f39c:	68fb      	ldr	r3, [r7, #12]
 801f39e:	2200      	movs	r2, #0
 801f3a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 801f3a4:	2301      	movs	r3, #1
 801f3a6:	e007      	b.n	801f3b8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 801f3a8:	68fb      	ldr	r3, [r7, #12]
 801f3aa:	681b      	ldr	r3, [r3, #0]
 801f3ac:	695b      	ldr	r3, [r3, #20]
 801f3ae:	f003 0304 	and.w	r3, r3, #4
 801f3b2:	2b04      	cmp	r3, #4
 801f3b4:	d1ca      	bne.n	801f34c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 801f3b6:	2300      	movs	r3, #0
}
 801f3b8:	4618      	mov	r0, r3
 801f3ba:	3710      	adds	r7, #16
 801f3bc:	46bd      	mov	sp, r7
 801f3be:	bd80      	pop	{r7, pc}

0801f3c0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 801f3c0:	b480      	push	{r7}
 801f3c2:	b083      	sub	sp, #12
 801f3c4:	af00      	add	r7, sp, #0
 801f3c6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 801f3c8:	687b      	ldr	r3, [r7, #4]
 801f3ca:	681b      	ldr	r3, [r3, #0]
 801f3cc:	695b      	ldr	r3, [r3, #20]
 801f3ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801f3d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801f3d6:	d11b      	bne.n	801f410 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 801f3d8:	687b      	ldr	r3, [r7, #4]
 801f3da:	681b      	ldr	r3, [r3, #0]
 801f3dc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 801f3e0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 801f3e2:	687b      	ldr	r3, [r7, #4]
 801f3e4:	2200      	movs	r2, #0
 801f3e6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 801f3e8:	687b      	ldr	r3, [r7, #4]
 801f3ea:	2220      	movs	r2, #32
 801f3ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 801f3f0:	687b      	ldr	r3, [r7, #4]
 801f3f2:	2200      	movs	r2, #0
 801f3f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 801f3f8:	687b      	ldr	r3, [r7, #4]
 801f3fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801f3fc:	f043 0204 	orr.w	r2, r3, #4
 801f400:	687b      	ldr	r3, [r7, #4]
 801f402:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 801f404:	687b      	ldr	r3, [r7, #4]
 801f406:	2200      	movs	r2, #0
 801f408:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 801f40c:	2301      	movs	r3, #1
 801f40e:	e000      	b.n	801f412 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 801f410:	2300      	movs	r3, #0
}
 801f412:	4618      	mov	r0, r3
 801f414:	370c      	adds	r7, #12
 801f416:	46bd      	mov	sp, r7
 801f418:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f41c:	4770      	bx	lr
	...

0801f420 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 801f420:	b580      	push	{r7, lr}
 801f422:	b086      	sub	sp, #24
 801f424:	af00      	add	r7, sp, #0
 801f426:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 801f428:	687b      	ldr	r3, [r7, #4]
 801f42a:	2b00      	cmp	r3, #0
 801f42c:	d101      	bne.n	801f432 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 801f42e:	2301      	movs	r3, #1
 801f430:	e25b      	b.n	801f8ea <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 801f432:	687b      	ldr	r3, [r7, #4]
 801f434:	681b      	ldr	r3, [r3, #0]
 801f436:	f003 0301 	and.w	r3, r3, #1
 801f43a:	2b00      	cmp	r3, #0
 801f43c:	d075      	beq.n	801f52a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 801f43e:	4ba3      	ldr	r3, [pc, #652]	; (801f6cc <HAL_RCC_OscConfig+0x2ac>)
 801f440:	689b      	ldr	r3, [r3, #8]
 801f442:	f003 030c 	and.w	r3, r3, #12
 801f446:	2b04      	cmp	r3, #4
 801f448:	d00c      	beq.n	801f464 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 801f44a:	4ba0      	ldr	r3, [pc, #640]	; (801f6cc <HAL_RCC_OscConfig+0x2ac>)
 801f44c:	689b      	ldr	r3, [r3, #8]
 801f44e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 801f452:	2b08      	cmp	r3, #8
 801f454:	d112      	bne.n	801f47c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 801f456:	4b9d      	ldr	r3, [pc, #628]	; (801f6cc <HAL_RCC_OscConfig+0x2ac>)
 801f458:	685b      	ldr	r3, [r3, #4]
 801f45a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801f45e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 801f462:	d10b      	bne.n	801f47c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 801f464:	4b99      	ldr	r3, [pc, #612]	; (801f6cc <HAL_RCC_OscConfig+0x2ac>)
 801f466:	681b      	ldr	r3, [r3, #0]
 801f468:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801f46c:	2b00      	cmp	r3, #0
 801f46e:	d05b      	beq.n	801f528 <HAL_RCC_OscConfig+0x108>
 801f470:	687b      	ldr	r3, [r7, #4]
 801f472:	685b      	ldr	r3, [r3, #4]
 801f474:	2b00      	cmp	r3, #0
 801f476:	d157      	bne.n	801f528 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 801f478:	2301      	movs	r3, #1
 801f47a:	e236      	b.n	801f8ea <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 801f47c:	687b      	ldr	r3, [r7, #4]
 801f47e:	685b      	ldr	r3, [r3, #4]
 801f480:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801f484:	d106      	bne.n	801f494 <HAL_RCC_OscConfig+0x74>
 801f486:	4b91      	ldr	r3, [pc, #580]	; (801f6cc <HAL_RCC_OscConfig+0x2ac>)
 801f488:	681b      	ldr	r3, [r3, #0]
 801f48a:	4a90      	ldr	r2, [pc, #576]	; (801f6cc <HAL_RCC_OscConfig+0x2ac>)
 801f48c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801f490:	6013      	str	r3, [r2, #0]
 801f492:	e01d      	b.n	801f4d0 <HAL_RCC_OscConfig+0xb0>
 801f494:	687b      	ldr	r3, [r7, #4]
 801f496:	685b      	ldr	r3, [r3, #4]
 801f498:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 801f49c:	d10c      	bne.n	801f4b8 <HAL_RCC_OscConfig+0x98>
 801f49e:	4b8b      	ldr	r3, [pc, #556]	; (801f6cc <HAL_RCC_OscConfig+0x2ac>)
 801f4a0:	681b      	ldr	r3, [r3, #0]
 801f4a2:	4a8a      	ldr	r2, [pc, #552]	; (801f6cc <HAL_RCC_OscConfig+0x2ac>)
 801f4a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 801f4a8:	6013      	str	r3, [r2, #0]
 801f4aa:	4b88      	ldr	r3, [pc, #544]	; (801f6cc <HAL_RCC_OscConfig+0x2ac>)
 801f4ac:	681b      	ldr	r3, [r3, #0]
 801f4ae:	4a87      	ldr	r2, [pc, #540]	; (801f6cc <HAL_RCC_OscConfig+0x2ac>)
 801f4b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801f4b4:	6013      	str	r3, [r2, #0]
 801f4b6:	e00b      	b.n	801f4d0 <HAL_RCC_OscConfig+0xb0>
 801f4b8:	4b84      	ldr	r3, [pc, #528]	; (801f6cc <HAL_RCC_OscConfig+0x2ac>)
 801f4ba:	681b      	ldr	r3, [r3, #0]
 801f4bc:	4a83      	ldr	r2, [pc, #524]	; (801f6cc <HAL_RCC_OscConfig+0x2ac>)
 801f4be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801f4c2:	6013      	str	r3, [r2, #0]
 801f4c4:	4b81      	ldr	r3, [pc, #516]	; (801f6cc <HAL_RCC_OscConfig+0x2ac>)
 801f4c6:	681b      	ldr	r3, [r3, #0]
 801f4c8:	4a80      	ldr	r2, [pc, #512]	; (801f6cc <HAL_RCC_OscConfig+0x2ac>)
 801f4ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 801f4ce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 801f4d0:	687b      	ldr	r3, [r7, #4]
 801f4d2:	685b      	ldr	r3, [r3, #4]
 801f4d4:	2b00      	cmp	r3, #0
 801f4d6:	d013      	beq.n	801f500 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801f4d8:	f7fe fb98 	bl	801dc0c <HAL_GetTick>
 801f4dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 801f4de:	e008      	b.n	801f4f2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 801f4e0:	f7fe fb94 	bl	801dc0c <HAL_GetTick>
 801f4e4:	4602      	mov	r2, r0
 801f4e6:	693b      	ldr	r3, [r7, #16]
 801f4e8:	1ad3      	subs	r3, r2, r3
 801f4ea:	2b64      	cmp	r3, #100	; 0x64
 801f4ec:	d901      	bls.n	801f4f2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 801f4ee:	2303      	movs	r3, #3
 801f4f0:	e1fb      	b.n	801f8ea <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 801f4f2:	4b76      	ldr	r3, [pc, #472]	; (801f6cc <HAL_RCC_OscConfig+0x2ac>)
 801f4f4:	681b      	ldr	r3, [r3, #0]
 801f4f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801f4fa:	2b00      	cmp	r3, #0
 801f4fc:	d0f0      	beq.n	801f4e0 <HAL_RCC_OscConfig+0xc0>
 801f4fe:	e014      	b.n	801f52a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801f500:	f7fe fb84 	bl	801dc0c <HAL_GetTick>
 801f504:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 801f506:	e008      	b.n	801f51a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 801f508:	f7fe fb80 	bl	801dc0c <HAL_GetTick>
 801f50c:	4602      	mov	r2, r0
 801f50e:	693b      	ldr	r3, [r7, #16]
 801f510:	1ad3      	subs	r3, r2, r3
 801f512:	2b64      	cmp	r3, #100	; 0x64
 801f514:	d901      	bls.n	801f51a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 801f516:	2303      	movs	r3, #3
 801f518:	e1e7      	b.n	801f8ea <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 801f51a:	4b6c      	ldr	r3, [pc, #432]	; (801f6cc <HAL_RCC_OscConfig+0x2ac>)
 801f51c:	681b      	ldr	r3, [r3, #0]
 801f51e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801f522:	2b00      	cmp	r3, #0
 801f524:	d1f0      	bne.n	801f508 <HAL_RCC_OscConfig+0xe8>
 801f526:	e000      	b.n	801f52a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 801f528:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 801f52a:	687b      	ldr	r3, [r7, #4]
 801f52c:	681b      	ldr	r3, [r3, #0]
 801f52e:	f003 0302 	and.w	r3, r3, #2
 801f532:	2b00      	cmp	r3, #0
 801f534:	d063      	beq.n	801f5fe <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 801f536:	4b65      	ldr	r3, [pc, #404]	; (801f6cc <HAL_RCC_OscConfig+0x2ac>)
 801f538:	689b      	ldr	r3, [r3, #8]
 801f53a:	f003 030c 	and.w	r3, r3, #12
 801f53e:	2b00      	cmp	r3, #0
 801f540:	d00b      	beq.n	801f55a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 801f542:	4b62      	ldr	r3, [pc, #392]	; (801f6cc <HAL_RCC_OscConfig+0x2ac>)
 801f544:	689b      	ldr	r3, [r3, #8]
 801f546:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 801f54a:	2b08      	cmp	r3, #8
 801f54c:	d11c      	bne.n	801f588 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 801f54e:	4b5f      	ldr	r3, [pc, #380]	; (801f6cc <HAL_RCC_OscConfig+0x2ac>)
 801f550:	685b      	ldr	r3, [r3, #4]
 801f552:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801f556:	2b00      	cmp	r3, #0
 801f558:	d116      	bne.n	801f588 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 801f55a:	4b5c      	ldr	r3, [pc, #368]	; (801f6cc <HAL_RCC_OscConfig+0x2ac>)
 801f55c:	681b      	ldr	r3, [r3, #0]
 801f55e:	f003 0302 	and.w	r3, r3, #2
 801f562:	2b00      	cmp	r3, #0
 801f564:	d005      	beq.n	801f572 <HAL_RCC_OscConfig+0x152>
 801f566:	687b      	ldr	r3, [r7, #4]
 801f568:	68db      	ldr	r3, [r3, #12]
 801f56a:	2b01      	cmp	r3, #1
 801f56c:	d001      	beq.n	801f572 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 801f56e:	2301      	movs	r3, #1
 801f570:	e1bb      	b.n	801f8ea <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801f572:	4b56      	ldr	r3, [pc, #344]	; (801f6cc <HAL_RCC_OscConfig+0x2ac>)
 801f574:	681b      	ldr	r3, [r3, #0]
 801f576:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 801f57a:	687b      	ldr	r3, [r7, #4]
 801f57c:	691b      	ldr	r3, [r3, #16]
 801f57e:	00db      	lsls	r3, r3, #3
 801f580:	4952      	ldr	r1, [pc, #328]	; (801f6cc <HAL_RCC_OscConfig+0x2ac>)
 801f582:	4313      	orrs	r3, r2
 801f584:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 801f586:	e03a      	b.n	801f5fe <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 801f588:	687b      	ldr	r3, [r7, #4]
 801f58a:	68db      	ldr	r3, [r3, #12]
 801f58c:	2b00      	cmp	r3, #0
 801f58e:	d020      	beq.n	801f5d2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 801f590:	4b4f      	ldr	r3, [pc, #316]	; (801f6d0 <HAL_RCC_OscConfig+0x2b0>)
 801f592:	2201      	movs	r2, #1
 801f594:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801f596:	f7fe fb39 	bl	801dc0c <HAL_GetTick>
 801f59a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 801f59c:	e008      	b.n	801f5b0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 801f59e:	f7fe fb35 	bl	801dc0c <HAL_GetTick>
 801f5a2:	4602      	mov	r2, r0
 801f5a4:	693b      	ldr	r3, [r7, #16]
 801f5a6:	1ad3      	subs	r3, r2, r3
 801f5a8:	2b02      	cmp	r3, #2
 801f5aa:	d901      	bls.n	801f5b0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 801f5ac:	2303      	movs	r3, #3
 801f5ae:	e19c      	b.n	801f8ea <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 801f5b0:	4b46      	ldr	r3, [pc, #280]	; (801f6cc <HAL_RCC_OscConfig+0x2ac>)
 801f5b2:	681b      	ldr	r3, [r3, #0]
 801f5b4:	f003 0302 	and.w	r3, r3, #2
 801f5b8:	2b00      	cmp	r3, #0
 801f5ba:	d0f0      	beq.n	801f59e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801f5bc:	4b43      	ldr	r3, [pc, #268]	; (801f6cc <HAL_RCC_OscConfig+0x2ac>)
 801f5be:	681b      	ldr	r3, [r3, #0]
 801f5c0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 801f5c4:	687b      	ldr	r3, [r7, #4]
 801f5c6:	691b      	ldr	r3, [r3, #16]
 801f5c8:	00db      	lsls	r3, r3, #3
 801f5ca:	4940      	ldr	r1, [pc, #256]	; (801f6cc <HAL_RCC_OscConfig+0x2ac>)
 801f5cc:	4313      	orrs	r3, r2
 801f5ce:	600b      	str	r3, [r1, #0]
 801f5d0:	e015      	b.n	801f5fe <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 801f5d2:	4b3f      	ldr	r3, [pc, #252]	; (801f6d0 <HAL_RCC_OscConfig+0x2b0>)
 801f5d4:	2200      	movs	r2, #0
 801f5d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801f5d8:	f7fe fb18 	bl	801dc0c <HAL_GetTick>
 801f5dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 801f5de:	e008      	b.n	801f5f2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 801f5e0:	f7fe fb14 	bl	801dc0c <HAL_GetTick>
 801f5e4:	4602      	mov	r2, r0
 801f5e6:	693b      	ldr	r3, [r7, #16]
 801f5e8:	1ad3      	subs	r3, r2, r3
 801f5ea:	2b02      	cmp	r3, #2
 801f5ec:	d901      	bls.n	801f5f2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 801f5ee:	2303      	movs	r3, #3
 801f5f0:	e17b      	b.n	801f8ea <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 801f5f2:	4b36      	ldr	r3, [pc, #216]	; (801f6cc <HAL_RCC_OscConfig+0x2ac>)
 801f5f4:	681b      	ldr	r3, [r3, #0]
 801f5f6:	f003 0302 	and.w	r3, r3, #2
 801f5fa:	2b00      	cmp	r3, #0
 801f5fc:	d1f0      	bne.n	801f5e0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 801f5fe:	687b      	ldr	r3, [r7, #4]
 801f600:	681b      	ldr	r3, [r3, #0]
 801f602:	f003 0308 	and.w	r3, r3, #8
 801f606:	2b00      	cmp	r3, #0
 801f608:	d030      	beq.n	801f66c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 801f60a:	687b      	ldr	r3, [r7, #4]
 801f60c:	695b      	ldr	r3, [r3, #20]
 801f60e:	2b00      	cmp	r3, #0
 801f610:	d016      	beq.n	801f640 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 801f612:	4b30      	ldr	r3, [pc, #192]	; (801f6d4 <HAL_RCC_OscConfig+0x2b4>)
 801f614:	2201      	movs	r2, #1
 801f616:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801f618:	f7fe faf8 	bl	801dc0c <HAL_GetTick>
 801f61c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 801f61e:	e008      	b.n	801f632 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 801f620:	f7fe faf4 	bl	801dc0c <HAL_GetTick>
 801f624:	4602      	mov	r2, r0
 801f626:	693b      	ldr	r3, [r7, #16]
 801f628:	1ad3      	subs	r3, r2, r3
 801f62a:	2b02      	cmp	r3, #2
 801f62c:	d901      	bls.n	801f632 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 801f62e:	2303      	movs	r3, #3
 801f630:	e15b      	b.n	801f8ea <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 801f632:	4b26      	ldr	r3, [pc, #152]	; (801f6cc <HAL_RCC_OscConfig+0x2ac>)
 801f634:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801f636:	f003 0302 	and.w	r3, r3, #2
 801f63a:	2b00      	cmp	r3, #0
 801f63c:	d0f0      	beq.n	801f620 <HAL_RCC_OscConfig+0x200>
 801f63e:	e015      	b.n	801f66c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 801f640:	4b24      	ldr	r3, [pc, #144]	; (801f6d4 <HAL_RCC_OscConfig+0x2b4>)
 801f642:	2200      	movs	r2, #0
 801f644:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 801f646:	f7fe fae1 	bl	801dc0c <HAL_GetTick>
 801f64a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 801f64c:	e008      	b.n	801f660 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 801f64e:	f7fe fadd 	bl	801dc0c <HAL_GetTick>
 801f652:	4602      	mov	r2, r0
 801f654:	693b      	ldr	r3, [r7, #16]
 801f656:	1ad3      	subs	r3, r2, r3
 801f658:	2b02      	cmp	r3, #2
 801f65a:	d901      	bls.n	801f660 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 801f65c:	2303      	movs	r3, #3
 801f65e:	e144      	b.n	801f8ea <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 801f660:	4b1a      	ldr	r3, [pc, #104]	; (801f6cc <HAL_RCC_OscConfig+0x2ac>)
 801f662:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801f664:	f003 0302 	and.w	r3, r3, #2
 801f668:	2b00      	cmp	r3, #0
 801f66a:	d1f0      	bne.n	801f64e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 801f66c:	687b      	ldr	r3, [r7, #4]
 801f66e:	681b      	ldr	r3, [r3, #0]
 801f670:	f003 0304 	and.w	r3, r3, #4
 801f674:	2b00      	cmp	r3, #0
 801f676:	f000 80a0 	beq.w	801f7ba <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 801f67a:	2300      	movs	r3, #0
 801f67c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 801f67e:	4b13      	ldr	r3, [pc, #76]	; (801f6cc <HAL_RCC_OscConfig+0x2ac>)
 801f680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801f682:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801f686:	2b00      	cmp	r3, #0
 801f688:	d10f      	bne.n	801f6aa <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 801f68a:	2300      	movs	r3, #0
 801f68c:	60bb      	str	r3, [r7, #8]
 801f68e:	4b0f      	ldr	r3, [pc, #60]	; (801f6cc <HAL_RCC_OscConfig+0x2ac>)
 801f690:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801f692:	4a0e      	ldr	r2, [pc, #56]	; (801f6cc <HAL_RCC_OscConfig+0x2ac>)
 801f694:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801f698:	6413      	str	r3, [r2, #64]	; 0x40
 801f69a:	4b0c      	ldr	r3, [pc, #48]	; (801f6cc <HAL_RCC_OscConfig+0x2ac>)
 801f69c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801f69e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801f6a2:	60bb      	str	r3, [r7, #8]
 801f6a4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 801f6a6:	2301      	movs	r3, #1
 801f6a8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 801f6aa:	4b0b      	ldr	r3, [pc, #44]	; (801f6d8 <HAL_RCC_OscConfig+0x2b8>)
 801f6ac:	681b      	ldr	r3, [r3, #0]
 801f6ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801f6b2:	2b00      	cmp	r3, #0
 801f6b4:	d121      	bne.n	801f6fa <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 801f6b6:	4b08      	ldr	r3, [pc, #32]	; (801f6d8 <HAL_RCC_OscConfig+0x2b8>)
 801f6b8:	681b      	ldr	r3, [r3, #0]
 801f6ba:	4a07      	ldr	r2, [pc, #28]	; (801f6d8 <HAL_RCC_OscConfig+0x2b8>)
 801f6bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801f6c0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 801f6c2:	f7fe faa3 	bl	801dc0c <HAL_GetTick>
 801f6c6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 801f6c8:	e011      	b.n	801f6ee <HAL_RCC_OscConfig+0x2ce>
 801f6ca:	bf00      	nop
 801f6cc:	40023800 	.word	0x40023800
 801f6d0:	42470000 	.word	0x42470000
 801f6d4:	42470e80 	.word	0x42470e80
 801f6d8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 801f6dc:	f7fe fa96 	bl	801dc0c <HAL_GetTick>
 801f6e0:	4602      	mov	r2, r0
 801f6e2:	693b      	ldr	r3, [r7, #16]
 801f6e4:	1ad3      	subs	r3, r2, r3
 801f6e6:	2b02      	cmp	r3, #2
 801f6e8:	d901      	bls.n	801f6ee <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 801f6ea:	2303      	movs	r3, #3
 801f6ec:	e0fd      	b.n	801f8ea <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 801f6ee:	4b81      	ldr	r3, [pc, #516]	; (801f8f4 <HAL_RCC_OscConfig+0x4d4>)
 801f6f0:	681b      	ldr	r3, [r3, #0]
 801f6f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801f6f6:	2b00      	cmp	r3, #0
 801f6f8:	d0f0      	beq.n	801f6dc <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 801f6fa:	687b      	ldr	r3, [r7, #4]
 801f6fc:	689b      	ldr	r3, [r3, #8]
 801f6fe:	2b01      	cmp	r3, #1
 801f700:	d106      	bne.n	801f710 <HAL_RCC_OscConfig+0x2f0>
 801f702:	4b7d      	ldr	r3, [pc, #500]	; (801f8f8 <HAL_RCC_OscConfig+0x4d8>)
 801f704:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801f706:	4a7c      	ldr	r2, [pc, #496]	; (801f8f8 <HAL_RCC_OscConfig+0x4d8>)
 801f708:	f043 0301 	orr.w	r3, r3, #1
 801f70c:	6713      	str	r3, [r2, #112]	; 0x70
 801f70e:	e01c      	b.n	801f74a <HAL_RCC_OscConfig+0x32a>
 801f710:	687b      	ldr	r3, [r7, #4]
 801f712:	689b      	ldr	r3, [r3, #8]
 801f714:	2b05      	cmp	r3, #5
 801f716:	d10c      	bne.n	801f732 <HAL_RCC_OscConfig+0x312>
 801f718:	4b77      	ldr	r3, [pc, #476]	; (801f8f8 <HAL_RCC_OscConfig+0x4d8>)
 801f71a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801f71c:	4a76      	ldr	r2, [pc, #472]	; (801f8f8 <HAL_RCC_OscConfig+0x4d8>)
 801f71e:	f043 0304 	orr.w	r3, r3, #4
 801f722:	6713      	str	r3, [r2, #112]	; 0x70
 801f724:	4b74      	ldr	r3, [pc, #464]	; (801f8f8 <HAL_RCC_OscConfig+0x4d8>)
 801f726:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801f728:	4a73      	ldr	r2, [pc, #460]	; (801f8f8 <HAL_RCC_OscConfig+0x4d8>)
 801f72a:	f043 0301 	orr.w	r3, r3, #1
 801f72e:	6713      	str	r3, [r2, #112]	; 0x70
 801f730:	e00b      	b.n	801f74a <HAL_RCC_OscConfig+0x32a>
 801f732:	4b71      	ldr	r3, [pc, #452]	; (801f8f8 <HAL_RCC_OscConfig+0x4d8>)
 801f734:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801f736:	4a70      	ldr	r2, [pc, #448]	; (801f8f8 <HAL_RCC_OscConfig+0x4d8>)
 801f738:	f023 0301 	bic.w	r3, r3, #1
 801f73c:	6713      	str	r3, [r2, #112]	; 0x70
 801f73e:	4b6e      	ldr	r3, [pc, #440]	; (801f8f8 <HAL_RCC_OscConfig+0x4d8>)
 801f740:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801f742:	4a6d      	ldr	r2, [pc, #436]	; (801f8f8 <HAL_RCC_OscConfig+0x4d8>)
 801f744:	f023 0304 	bic.w	r3, r3, #4
 801f748:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 801f74a:	687b      	ldr	r3, [r7, #4]
 801f74c:	689b      	ldr	r3, [r3, #8]
 801f74e:	2b00      	cmp	r3, #0
 801f750:	d015      	beq.n	801f77e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801f752:	f7fe fa5b 	bl	801dc0c <HAL_GetTick>
 801f756:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 801f758:	e00a      	b.n	801f770 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 801f75a:	f7fe fa57 	bl	801dc0c <HAL_GetTick>
 801f75e:	4602      	mov	r2, r0
 801f760:	693b      	ldr	r3, [r7, #16]
 801f762:	1ad3      	subs	r3, r2, r3
 801f764:	f241 3288 	movw	r2, #5000	; 0x1388
 801f768:	4293      	cmp	r3, r2
 801f76a:	d901      	bls.n	801f770 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 801f76c:	2303      	movs	r3, #3
 801f76e:	e0bc      	b.n	801f8ea <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 801f770:	4b61      	ldr	r3, [pc, #388]	; (801f8f8 <HAL_RCC_OscConfig+0x4d8>)
 801f772:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801f774:	f003 0302 	and.w	r3, r3, #2
 801f778:	2b00      	cmp	r3, #0
 801f77a:	d0ee      	beq.n	801f75a <HAL_RCC_OscConfig+0x33a>
 801f77c:	e014      	b.n	801f7a8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 801f77e:	f7fe fa45 	bl	801dc0c <HAL_GetTick>
 801f782:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 801f784:	e00a      	b.n	801f79c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 801f786:	f7fe fa41 	bl	801dc0c <HAL_GetTick>
 801f78a:	4602      	mov	r2, r0
 801f78c:	693b      	ldr	r3, [r7, #16]
 801f78e:	1ad3      	subs	r3, r2, r3
 801f790:	f241 3288 	movw	r2, #5000	; 0x1388
 801f794:	4293      	cmp	r3, r2
 801f796:	d901      	bls.n	801f79c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 801f798:	2303      	movs	r3, #3
 801f79a:	e0a6      	b.n	801f8ea <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 801f79c:	4b56      	ldr	r3, [pc, #344]	; (801f8f8 <HAL_RCC_OscConfig+0x4d8>)
 801f79e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801f7a0:	f003 0302 	and.w	r3, r3, #2
 801f7a4:	2b00      	cmp	r3, #0
 801f7a6:	d1ee      	bne.n	801f786 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 801f7a8:	7dfb      	ldrb	r3, [r7, #23]
 801f7aa:	2b01      	cmp	r3, #1
 801f7ac:	d105      	bne.n	801f7ba <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 801f7ae:	4b52      	ldr	r3, [pc, #328]	; (801f8f8 <HAL_RCC_OscConfig+0x4d8>)
 801f7b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801f7b2:	4a51      	ldr	r2, [pc, #324]	; (801f8f8 <HAL_RCC_OscConfig+0x4d8>)
 801f7b4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 801f7b8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 801f7ba:	687b      	ldr	r3, [r7, #4]
 801f7bc:	699b      	ldr	r3, [r3, #24]
 801f7be:	2b00      	cmp	r3, #0
 801f7c0:	f000 8092 	beq.w	801f8e8 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 801f7c4:	4b4c      	ldr	r3, [pc, #304]	; (801f8f8 <HAL_RCC_OscConfig+0x4d8>)
 801f7c6:	689b      	ldr	r3, [r3, #8]
 801f7c8:	f003 030c 	and.w	r3, r3, #12
 801f7cc:	2b08      	cmp	r3, #8
 801f7ce:	d05c      	beq.n	801f88a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 801f7d0:	687b      	ldr	r3, [r7, #4]
 801f7d2:	699b      	ldr	r3, [r3, #24]
 801f7d4:	2b02      	cmp	r3, #2
 801f7d6:	d141      	bne.n	801f85c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 801f7d8:	4b48      	ldr	r3, [pc, #288]	; (801f8fc <HAL_RCC_OscConfig+0x4dc>)
 801f7da:	2200      	movs	r2, #0
 801f7dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801f7de:	f7fe fa15 	bl	801dc0c <HAL_GetTick>
 801f7e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 801f7e4:	e008      	b.n	801f7f8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 801f7e6:	f7fe fa11 	bl	801dc0c <HAL_GetTick>
 801f7ea:	4602      	mov	r2, r0
 801f7ec:	693b      	ldr	r3, [r7, #16]
 801f7ee:	1ad3      	subs	r3, r2, r3
 801f7f0:	2b02      	cmp	r3, #2
 801f7f2:	d901      	bls.n	801f7f8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 801f7f4:	2303      	movs	r3, #3
 801f7f6:	e078      	b.n	801f8ea <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 801f7f8:	4b3f      	ldr	r3, [pc, #252]	; (801f8f8 <HAL_RCC_OscConfig+0x4d8>)
 801f7fa:	681b      	ldr	r3, [r3, #0]
 801f7fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801f800:	2b00      	cmp	r3, #0
 801f802:	d1f0      	bne.n	801f7e6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 801f804:	687b      	ldr	r3, [r7, #4]
 801f806:	69da      	ldr	r2, [r3, #28]
 801f808:	687b      	ldr	r3, [r7, #4]
 801f80a:	6a1b      	ldr	r3, [r3, #32]
 801f80c:	431a      	orrs	r2, r3
 801f80e:	687b      	ldr	r3, [r7, #4]
 801f810:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801f812:	019b      	lsls	r3, r3, #6
 801f814:	431a      	orrs	r2, r3
 801f816:	687b      	ldr	r3, [r7, #4]
 801f818:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801f81a:	085b      	lsrs	r3, r3, #1
 801f81c:	3b01      	subs	r3, #1
 801f81e:	041b      	lsls	r3, r3, #16
 801f820:	431a      	orrs	r2, r3
 801f822:	687b      	ldr	r3, [r7, #4]
 801f824:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801f826:	061b      	lsls	r3, r3, #24
 801f828:	4933      	ldr	r1, [pc, #204]	; (801f8f8 <HAL_RCC_OscConfig+0x4d8>)
 801f82a:	4313      	orrs	r3, r2
 801f82c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 801f82e:	4b33      	ldr	r3, [pc, #204]	; (801f8fc <HAL_RCC_OscConfig+0x4dc>)
 801f830:	2201      	movs	r2, #1
 801f832:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801f834:	f7fe f9ea 	bl	801dc0c <HAL_GetTick>
 801f838:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 801f83a:	e008      	b.n	801f84e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 801f83c:	f7fe f9e6 	bl	801dc0c <HAL_GetTick>
 801f840:	4602      	mov	r2, r0
 801f842:	693b      	ldr	r3, [r7, #16]
 801f844:	1ad3      	subs	r3, r2, r3
 801f846:	2b02      	cmp	r3, #2
 801f848:	d901      	bls.n	801f84e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 801f84a:	2303      	movs	r3, #3
 801f84c:	e04d      	b.n	801f8ea <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 801f84e:	4b2a      	ldr	r3, [pc, #168]	; (801f8f8 <HAL_RCC_OscConfig+0x4d8>)
 801f850:	681b      	ldr	r3, [r3, #0]
 801f852:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801f856:	2b00      	cmp	r3, #0
 801f858:	d0f0      	beq.n	801f83c <HAL_RCC_OscConfig+0x41c>
 801f85a:	e045      	b.n	801f8e8 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 801f85c:	4b27      	ldr	r3, [pc, #156]	; (801f8fc <HAL_RCC_OscConfig+0x4dc>)
 801f85e:	2200      	movs	r2, #0
 801f860:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801f862:	f7fe f9d3 	bl	801dc0c <HAL_GetTick>
 801f866:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 801f868:	e008      	b.n	801f87c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 801f86a:	f7fe f9cf 	bl	801dc0c <HAL_GetTick>
 801f86e:	4602      	mov	r2, r0
 801f870:	693b      	ldr	r3, [r7, #16]
 801f872:	1ad3      	subs	r3, r2, r3
 801f874:	2b02      	cmp	r3, #2
 801f876:	d901      	bls.n	801f87c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 801f878:	2303      	movs	r3, #3
 801f87a:	e036      	b.n	801f8ea <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 801f87c:	4b1e      	ldr	r3, [pc, #120]	; (801f8f8 <HAL_RCC_OscConfig+0x4d8>)
 801f87e:	681b      	ldr	r3, [r3, #0]
 801f880:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801f884:	2b00      	cmp	r3, #0
 801f886:	d1f0      	bne.n	801f86a <HAL_RCC_OscConfig+0x44a>
 801f888:	e02e      	b.n	801f8e8 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 801f88a:	687b      	ldr	r3, [r7, #4]
 801f88c:	699b      	ldr	r3, [r3, #24]
 801f88e:	2b01      	cmp	r3, #1
 801f890:	d101      	bne.n	801f896 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 801f892:	2301      	movs	r3, #1
 801f894:	e029      	b.n	801f8ea <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 801f896:	4b18      	ldr	r3, [pc, #96]	; (801f8f8 <HAL_RCC_OscConfig+0x4d8>)
 801f898:	685b      	ldr	r3, [r3, #4]
 801f89a:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 801f89c:	68fb      	ldr	r3, [r7, #12]
 801f89e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 801f8a2:	687b      	ldr	r3, [r7, #4]
 801f8a4:	69db      	ldr	r3, [r3, #28]
 801f8a6:	429a      	cmp	r2, r3
 801f8a8:	d11c      	bne.n	801f8e4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 801f8aa:	68fb      	ldr	r3, [r7, #12]
 801f8ac:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 801f8b0:	687b      	ldr	r3, [r7, #4]
 801f8b2:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 801f8b4:	429a      	cmp	r2, r3
 801f8b6:	d115      	bne.n	801f8e4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 801f8b8:	68fa      	ldr	r2, [r7, #12]
 801f8ba:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 801f8be:	4013      	ands	r3, r2
 801f8c0:	687a      	ldr	r2, [r7, #4]
 801f8c2:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 801f8c4:	4293      	cmp	r3, r2
 801f8c6:	d10d      	bne.n	801f8e4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 801f8c8:	68fb      	ldr	r3, [r7, #12]
 801f8ca:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 801f8ce:	687b      	ldr	r3, [r7, #4]
 801f8d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 801f8d2:	429a      	cmp	r2, r3
 801f8d4:	d106      	bne.n	801f8e4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 801f8d6:	68fb      	ldr	r3, [r7, #12]
 801f8d8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 801f8dc:	687b      	ldr	r3, [r7, #4]
 801f8de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 801f8e0:	429a      	cmp	r2, r3
 801f8e2:	d001      	beq.n	801f8e8 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 801f8e4:	2301      	movs	r3, #1
 801f8e6:	e000      	b.n	801f8ea <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 801f8e8:	2300      	movs	r3, #0
}
 801f8ea:	4618      	mov	r0, r3
 801f8ec:	3718      	adds	r7, #24
 801f8ee:	46bd      	mov	sp, r7
 801f8f0:	bd80      	pop	{r7, pc}
 801f8f2:	bf00      	nop
 801f8f4:	40007000 	.word	0x40007000
 801f8f8:	40023800 	.word	0x40023800
 801f8fc:	42470060 	.word	0x42470060

0801f900 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 801f900:	b580      	push	{r7, lr}
 801f902:	b084      	sub	sp, #16
 801f904:	af00      	add	r7, sp, #0
 801f906:	6078      	str	r0, [r7, #4]
 801f908:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 801f90a:	687b      	ldr	r3, [r7, #4]
 801f90c:	2b00      	cmp	r3, #0
 801f90e:	d101      	bne.n	801f914 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 801f910:	2301      	movs	r3, #1
 801f912:	e0cc      	b.n	801faae <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 801f914:	4b68      	ldr	r3, [pc, #416]	; (801fab8 <HAL_RCC_ClockConfig+0x1b8>)
 801f916:	681b      	ldr	r3, [r3, #0]
 801f918:	f003 030f 	and.w	r3, r3, #15
 801f91c:	683a      	ldr	r2, [r7, #0]
 801f91e:	429a      	cmp	r2, r3
 801f920:	d90c      	bls.n	801f93c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801f922:	4b65      	ldr	r3, [pc, #404]	; (801fab8 <HAL_RCC_ClockConfig+0x1b8>)
 801f924:	683a      	ldr	r2, [r7, #0]
 801f926:	b2d2      	uxtb	r2, r2
 801f928:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 801f92a:	4b63      	ldr	r3, [pc, #396]	; (801fab8 <HAL_RCC_ClockConfig+0x1b8>)
 801f92c:	681b      	ldr	r3, [r3, #0]
 801f92e:	f003 030f 	and.w	r3, r3, #15
 801f932:	683a      	ldr	r2, [r7, #0]
 801f934:	429a      	cmp	r2, r3
 801f936:	d001      	beq.n	801f93c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 801f938:	2301      	movs	r3, #1
 801f93a:	e0b8      	b.n	801faae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 801f93c:	687b      	ldr	r3, [r7, #4]
 801f93e:	681b      	ldr	r3, [r3, #0]
 801f940:	f003 0302 	and.w	r3, r3, #2
 801f944:	2b00      	cmp	r3, #0
 801f946:	d020      	beq.n	801f98a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 801f948:	687b      	ldr	r3, [r7, #4]
 801f94a:	681b      	ldr	r3, [r3, #0]
 801f94c:	f003 0304 	and.w	r3, r3, #4
 801f950:	2b00      	cmp	r3, #0
 801f952:	d005      	beq.n	801f960 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 801f954:	4b59      	ldr	r3, [pc, #356]	; (801fabc <HAL_RCC_ClockConfig+0x1bc>)
 801f956:	689b      	ldr	r3, [r3, #8]
 801f958:	4a58      	ldr	r2, [pc, #352]	; (801fabc <HAL_RCC_ClockConfig+0x1bc>)
 801f95a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 801f95e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 801f960:	687b      	ldr	r3, [r7, #4]
 801f962:	681b      	ldr	r3, [r3, #0]
 801f964:	f003 0308 	and.w	r3, r3, #8
 801f968:	2b00      	cmp	r3, #0
 801f96a:	d005      	beq.n	801f978 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 801f96c:	4b53      	ldr	r3, [pc, #332]	; (801fabc <HAL_RCC_ClockConfig+0x1bc>)
 801f96e:	689b      	ldr	r3, [r3, #8]
 801f970:	4a52      	ldr	r2, [pc, #328]	; (801fabc <HAL_RCC_ClockConfig+0x1bc>)
 801f972:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 801f976:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 801f978:	4b50      	ldr	r3, [pc, #320]	; (801fabc <HAL_RCC_ClockConfig+0x1bc>)
 801f97a:	689b      	ldr	r3, [r3, #8]
 801f97c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 801f980:	687b      	ldr	r3, [r7, #4]
 801f982:	689b      	ldr	r3, [r3, #8]
 801f984:	494d      	ldr	r1, [pc, #308]	; (801fabc <HAL_RCC_ClockConfig+0x1bc>)
 801f986:	4313      	orrs	r3, r2
 801f988:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 801f98a:	687b      	ldr	r3, [r7, #4]
 801f98c:	681b      	ldr	r3, [r3, #0]
 801f98e:	f003 0301 	and.w	r3, r3, #1
 801f992:	2b00      	cmp	r3, #0
 801f994:	d044      	beq.n	801fa20 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 801f996:	687b      	ldr	r3, [r7, #4]
 801f998:	685b      	ldr	r3, [r3, #4]
 801f99a:	2b01      	cmp	r3, #1
 801f99c:	d107      	bne.n	801f9ae <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 801f99e:	4b47      	ldr	r3, [pc, #284]	; (801fabc <HAL_RCC_ClockConfig+0x1bc>)
 801f9a0:	681b      	ldr	r3, [r3, #0]
 801f9a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801f9a6:	2b00      	cmp	r3, #0
 801f9a8:	d119      	bne.n	801f9de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 801f9aa:	2301      	movs	r3, #1
 801f9ac:	e07f      	b.n	801faae <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 801f9ae:	687b      	ldr	r3, [r7, #4]
 801f9b0:	685b      	ldr	r3, [r3, #4]
 801f9b2:	2b02      	cmp	r3, #2
 801f9b4:	d003      	beq.n	801f9be <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 801f9b6:	687b      	ldr	r3, [r7, #4]
 801f9b8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 801f9ba:	2b03      	cmp	r3, #3
 801f9bc:	d107      	bne.n	801f9ce <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 801f9be:	4b3f      	ldr	r3, [pc, #252]	; (801fabc <HAL_RCC_ClockConfig+0x1bc>)
 801f9c0:	681b      	ldr	r3, [r3, #0]
 801f9c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801f9c6:	2b00      	cmp	r3, #0
 801f9c8:	d109      	bne.n	801f9de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 801f9ca:	2301      	movs	r3, #1
 801f9cc:	e06f      	b.n	801faae <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 801f9ce:	4b3b      	ldr	r3, [pc, #236]	; (801fabc <HAL_RCC_ClockConfig+0x1bc>)
 801f9d0:	681b      	ldr	r3, [r3, #0]
 801f9d2:	f003 0302 	and.w	r3, r3, #2
 801f9d6:	2b00      	cmp	r3, #0
 801f9d8:	d101      	bne.n	801f9de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 801f9da:	2301      	movs	r3, #1
 801f9dc:	e067      	b.n	801faae <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 801f9de:	4b37      	ldr	r3, [pc, #220]	; (801fabc <HAL_RCC_ClockConfig+0x1bc>)
 801f9e0:	689b      	ldr	r3, [r3, #8]
 801f9e2:	f023 0203 	bic.w	r2, r3, #3
 801f9e6:	687b      	ldr	r3, [r7, #4]
 801f9e8:	685b      	ldr	r3, [r3, #4]
 801f9ea:	4934      	ldr	r1, [pc, #208]	; (801fabc <HAL_RCC_ClockConfig+0x1bc>)
 801f9ec:	4313      	orrs	r3, r2
 801f9ee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 801f9f0:	f7fe f90c 	bl	801dc0c <HAL_GetTick>
 801f9f4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 801f9f6:	e00a      	b.n	801fa0e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 801f9f8:	f7fe f908 	bl	801dc0c <HAL_GetTick>
 801f9fc:	4602      	mov	r2, r0
 801f9fe:	68fb      	ldr	r3, [r7, #12]
 801fa00:	1ad3      	subs	r3, r2, r3
 801fa02:	f241 3288 	movw	r2, #5000	; 0x1388
 801fa06:	4293      	cmp	r3, r2
 801fa08:	d901      	bls.n	801fa0e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 801fa0a:	2303      	movs	r3, #3
 801fa0c:	e04f      	b.n	801faae <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 801fa0e:	4b2b      	ldr	r3, [pc, #172]	; (801fabc <HAL_RCC_ClockConfig+0x1bc>)
 801fa10:	689b      	ldr	r3, [r3, #8]
 801fa12:	f003 020c 	and.w	r2, r3, #12
 801fa16:	687b      	ldr	r3, [r7, #4]
 801fa18:	685b      	ldr	r3, [r3, #4]
 801fa1a:	009b      	lsls	r3, r3, #2
 801fa1c:	429a      	cmp	r2, r3
 801fa1e:	d1eb      	bne.n	801f9f8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 801fa20:	4b25      	ldr	r3, [pc, #148]	; (801fab8 <HAL_RCC_ClockConfig+0x1b8>)
 801fa22:	681b      	ldr	r3, [r3, #0]
 801fa24:	f003 030f 	and.w	r3, r3, #15
 801fa28:	683a      	ldr	r2, [r7, #0]
 801fa2a:	429a      	cmp	r2, r3
 801fa2c:	d20c      	bcs.n	801fa48 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801fa2e:	4b22      	ldr	r3, [pc, #136]	; (801fab8 <HAL_RCC_ClockConfig+0x1b8>)
 801fa30:	683a      	ldr	r2, [r7, #0]
 801fa32:	b2d2      	uxtb	r2, r2
 801fa34:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 801fa36:	4b20      	ldr	r3, [pc, #128]	; (801fab8 <HAL_RCC_ClockConfig+0x1b8>)
 801fa38:	681b      	ldr	r3, [r3, #0]
 801fa3a:	f003 030f 	and.w	r3, r3, #15
 801fa3e:	683a      	ldr	r2, [r7, #0]
 801fa40:	429a      	cmp	r2, r3
 801fa42:	d001      	beq.n	801fa48 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 801fa44:	2301      	movs	r3, #1
 801fa46:	e032      	b.n	801faae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 801fa48:	687b      	ldr	r3, [r7, #4]
 801fa4a:	681b      	ldr	r3, [r3, #0]
 801fa4c:	f003 0304 	and.w	r3, r3, #4
 801fa50:	2b00      	cmp	r3, #0
 801fa52:	d008      	beq.n	801fa66 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 801fa54:	4b19      	ldr	r3, [pc, #100]	; (801fabc <HAL_RCC_ClockConfig+0x1bc>)
 801fa56:	689b      	ldr	r3, [r3, #8]
 801fa58:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 801fa5c:	687b      	ldr	r3, [r7, #4]
 801fa5e:	68db      	ldr	r3, [r3, #12]
 801fa60:	4916      	ldr	r1, [pc, #88]	; (801fabc <HAL_RCC_ClockConfig+0x1bc>)
 801fa62:	4313      	orrs	r3, r2
 801fa64:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 801fa66:	687b      	ldr	r3, [r7, #4]
 801fa68:	681b      	ldr	r3, [r3, #0]
 801fa6a:	f003 0308 	and.w	r3, r3, #8
 801fa6e:	2b00      	cmp	r3, #0
 801fa70:	d009      	beq.n	801fa86 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 801fa72:	4b12      	ldr	r3, [pc, #72]	; (801fabc <HAL_RCC_ClockConfig+0x1bc>)
 801fa74:	689b      	ldr	r3, [r3, #8]
 801fa76:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 801fa7a:	687b      	ldr	r3, [r7, #4]
 801fa7c:	691b      	ldr	r3, [r3, #16]
 801fa7e:	00db      	lsls	r3, r3, #3
 801fa80:	490e      	ldr	r1, [pc, #56]	; (801fabc <HAL_RCC_ClockConfig+0x1bc>)
 801fa82:	4313      	orrs	r3, r2
 801fa84:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 801fa86:	f000 f821 	bl	801facc <HAL_RCC_GetSysClockFreq>
 801fa8a:	4601      	mov	r1, r0
 801fa8c:	4b0b      	ldr	r3, [pc, #44]	; (801fabc <HAL_RCC_ClockConfig+0x1bc>)
 801fa8e:	689b      	ldr	r3, [r3, #8]
 801fa90:	091b      	lsrs	r3, r3, #4
 801fa92:	f003 030f 	and.w	r3, r3, #15
 801fa96:	4a0a      	ldr	r2, [pc, #40]	; (801fac0 <HAL_RCC_ClockConfig+0x1c0>)
 801fa98:	5cd3      	ldrb	r3, [r2, r3]
 801fa9a:	fa21 f303 	lsr.w	r3, r1, r3
 801fa9e:	4a09      	ldr	r2, [pc, #36]	; (801fac4 <HAL_RCC_ClockConfig+0x1c4>)
 801faa0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 801faa2:	4b09      	ldr	r3, [pc, #36]	; (801fac8 <HAL_RCC_ClockConfig+0x1c8>)
 801faa4:	681b      	ldr	r3, [r3, #0]
 801faa6:	4618      	mov	r0, r3
 801faa8:	f7fe f86c 	bl	801db84 <HAL_InitTick>

  return HAL_OK;
 801faac:	2300      	movs	r3, #0
}
 801faae:	4618      	mov	r0, r3
 801fab0:	3710      	adds	r7, #16
 801fab2:	46bd      	mov	sp, r7
 801fab4:	bd80      	pop	{r7, pc}
 801fab6:	bf00      	nop
 801fab8:	40023c00 	.word	0x40023c00
 801fabc:	40023800 	.word	0x40023800
 801fac0:	0802cf70 	.word	0x0802cf70
 801fac4:	20000000 	.word	0x20000000
 801fac8:	20000004 	.word	0x20000004

0801facc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 801facc:	b5f0      	push	{r4, r5, r6, r7, lr}
 801face:	b085      	sub	sp, #20
 801fad0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 801fad2:	2300      	movs	r3, #0
 801fad4:	607b      	str	r3, [r7, #4]
 801fad6:	2300      	movs	r3, #0
 801fad8:	60fb      	str	r3, [r7, #12]
 801fada:	2300      	movs	r3, #0
 801fadc:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 801fade:	2300      	movs	r3, #0
 801fae0:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 801fae2:	4b63      	ldr	r3, [pc, #396]	; (801fc70 <HAL_RCC_GetSysClockFreq+0x1a4>)
 801fae4:	689b      	ldr	r3, [r3, #8]
 801fae6:	f003 030c 	and.w	r3, r3, #12
 801faea:	2b04      	cmp	r3, #4
 801faec:	d007      	beq.n	801fafe <HAL_RCC_GetSysClockFreq+0x32>
 801faee:	2b08      	cmp	r3, #8
 801faf0:	d008      	beq.n	801fb04 <HAL_RCC_GetSysClockFreq+0x38>
 801faf2:	2b00      	cmp	r3, #0
 801faf4:	f040 80b4 	bne.w	801fc60 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 801faf8:	4b5e      	ldr	r3, [pc, #376]	; (801fc74 <HAL_RCC_GetSysClockFreq+0x1a8>)
 801fafa:	60bb      	str	r3, [r7, #8]
       break;
 801fafc:	e0b3      	b.n	801fc66 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 801fafe:	4b5e      	ldr	r3, [pc, #376]	; (801fc78 <HAL_RCC_GetSysClockFreq+0x1ac>)
 801fb00:	60bb      	str	r3, [r7, #8]
      break;
 801fb02:	e0b0      	b.n	801fc66 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 801fb04:	4b5a      	ldr	r3, [pc, #360]	; (801fc70 <HAL_RCC_GetSysClockFreq+0x1a4>)
 801fb06:	685b      	ldr	r3, [r3, #4]
 801fb08:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801fb0c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 801fb0e:	4b58      	ldr	r3, [pc, #352]	; (801fc70 <HAL_RCC_GetSysClockFreq+0x1a4>)
 801fb10:	685b      	ldr	r3, [r3, #4]
 801fb12:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801fb16:	2b00      	cmp	r3, #0
 801fb18:	d04a      	beq.n	801fbb0 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 801fb1a:	4b55      	ldr	r3, [pc, #340]	; (801fc70 <HAL_RCC_GetSysClockFreq+0x1a4>)
 801fb1c:	685b      	ldr	r3, [r3, #4]
 801fb1e:	099b      	lsrs	r3, r3, #6
 801fb20:	f04f 0400 	mov.w	r4, #0
 801fb24:	f240 11ff 	movw	r1, #511	; 0x1ff
 801fb28:	f04f 0200 	mov.w	r2, #0
 801fb2c:	ea03 0501 	and.w	r5, r3, r1
 801fb30:	ea04 0602 	and.w	r6, r4, r2
 801fb34:	4629      	mov	r1, r5
 801fb36:	4632      	mov	r2, r6
 801fb38:	f04f 0300 	mov.w	r3, #0
 801fb3c:	f04f 0400 	mov.w	r4, #0
 801fb40:	0154      	lsls	r4, r2, #5
 801fb42:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 801fb46:	014b      	lsls	r3, r1, #5
 801fb48:	4619      	mov	r1, r3
 801fb4a:	4622      	mov	r2, r4
 801fb4c:	1b49      	subs	r1, r1, r5
 801fb4e:	eb62 0206 	sbc.w	r2, r2, r6
 801fb52:	f04f 0300 	mov.w	r3, #0
 801fb56:	f04f 0400 	mov.w	r4, #0
 801fb5a:	0194      	lsls	r4, r2, #6
 801fb5c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 801fb60:	018b      	lsls	r3, r1, #6
 801fb62:	1a5b      	subs	r3, r3, r1
 801fb64:	eb64 0402 	sbc.w	r4, r4, r2
 801fb68:	f04f 0100 	mov.w	r1, #0
 801fb6c:	f04f 0200 	mov.w	r2, #0
 801fb70:	00e2      	lsls	r2, r4, #3
 801fb72:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 801fb76:	00d9      	lsls	r1, r3, #3
 801fb78:	460b      	mov	r3, r1
 801fb7a:	4614      	mov	r4, r2
 801fb7c:	195b      	adds	r3, r3, r5
 801fb7e:	eb44 0406 	adc.w	r4, r4, r6
 801fb82:	f04f 0100 	mov.w	r1, #0
 801fb86:	f04f 0200 	mov.w	r2, #0
 801fb8a:	0262      	lsls	r2, r4, #9
 801fb8c:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 801fb90:	0259      	lsls	r1, r3, #9
 801fb92:	460b      	mov	r3, r1
 801fb94:	4614      	mov	r4, r2
 801fb96:	4618      	mov	r0, r3
 801fb98:	4621      	mov	r1, r4
 801fb9a:	687b      	ldr	r3, [r7, #4]
 801fb9c:	f04f 0400 	mov.w	r4, #0
 801fba0:	461a      	mov	r2, r3
 801fba2:	4623      	mov	r3, r4
 801fba4:	f7e1 f800 	bl	8000ba8 <__aeabi_uldivmod>
 801fba8:	4603      	mov	r3, r0
 801fbaa:	460c      	mov	r4, r1
 801fbac:	60fb      	str	r3, [r7, #12]
 801fbae:	e049      	b.n	801fc44 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 801fbb0:	4b2f      	ldr	r3, [pc, #188]	; (801fc70 <HAL_RCC_GetSysClockFreq+0x1a4>)
 801fbb2:	685b      	ldr	r3, [r3, #4]
 801fbb4:	099b      	lsrs	r3, r3, #6
 801fbb6:	f04f 0400 	mov.w	r4, #0
 801fbba:	f240 11ff 	movw	r1, #511	; 0x1ff
 801fbbe:	f04f 0200 	mov.w	r2, #0
 801fbc2:	ea03 0501 	and.w	r5, r3, r1
 801fbc6:	ea04 0602 	and.w	r6, r4, r2
 801fbca:	4629      	mov	r1, r5
 801fbcc:	4632      	mov	r2, r6
 801fbce:	f04f 0300 	mov.w	r3, #0
 801fbd2:	f04f 0400 	mov.w	r4, #0
 801fbd6:	0154      	lsls	r4, r2, #5
 801fbd8:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 801fbdc:	014b      	lsls	r3, r1, #5
 801fbde:	4619      	mov	r1, r3
 801fbe0:	4622      	mov	r2, r4
 801fbe2:	1b49      	subs	r1, r1, r5
 801fbe4:	eb62 0206 	sbc.w	r2, r2, r6
 801fbe8:	f04f 0300 	mov.w	r3, #0
 801fbec:	f04f 0400 	mov.w	r4, #0
 801fbf0:	0194      	lsls	r4, r2, #6
 801fbf2:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 801fbf6:	018b      	lsls	r3, r1, #6
 801fbf8:	1a5b      	subs	r3, r3, r1
 801fbfa:	eb64 0402 	sbc.w	r4, r4, r2
 801fbfe:	f04f 0100 	mov.w	r1, #0
 801fc02:	f04f 0200 	mov.w	r2, #0
 801fc06:	00e2      	lsls	r2, r4, #3
 801fc08:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 801fc0c:	00d9      	lsls	r1, r3, #3
 801fc0e:	460b      	mov	r3, r1
 801fc10:	4614      	mov	r4, r2
 801fc12:	195b      	adds	r3, r3, r5
 801fc14:	eb44 0406 	adc.w	r4, r4, r6
 801fc18:	f04f 0100 	mov.w	r1, #0
 801fc1c:	f04f 0200 	mov.w	r2, #0
 801fc20:	02a2      	lsls	r2, r4, #10
 801fc22:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 801fc26:	0299      	lsls	r1, r3, #10
 801fc28:	460b      	mov	r3, r1
 801fc2a:	4614      	mov	r4, r2
 801fc2c:	4618      	mov	r0, r3
 801fc2e:	4621      	mov	r1, r4
 801fc30:	687b      	ldr	r3, [r7, #4]
 801fc32:	f04f 0400 	mov.w	r4, #0
 801fc36:	461a      	mov	r2, r3
 801fc38:	4623      	mov	r3, r4
 801fc3a:	f7e0 ffb5 	bl	8000ba8 <__aeabi_uldivmod>
 801fc3e:	4603      	mov	r3, r0
 801fc40:	460c      	mov	r4, r1
 801fc42:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 801fc44:	4b0a      	ldr	r3, [pc, #40]	; (801fc70 <HAL_RCC_GetSysClockFreq+0x1a4>)
 801fc46:	685b      	ldr	r3, [r3, #4]
 801fc48:	0c1b      	lsrs	r3, r3, #16
 801fc4a:	f003 0303 	and.w	r3, r3, #3
 801fc4e:	3301      	adds	r3, #1
 801fc50:	005b      	lsls	r3, r3, #1
 801fc52:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 801fc54:	68fa      	ldr	r2, [r7, #12]
 801fc56:	683b      	ldr	r3, [r7, #0]
 801fc58:	fbb2 f3f3 	udiv	r3, r2, r3
 801fc5c:	60bb      	str	r3, [r7, #8]
      break;
 801fc5e:	e002      	b.n	801fc66 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 801fc60:	4b04      	ldr	r3, [pc, #16]	; (801fc74 <HAL_RCC_GetSysClockFreq+0x1a8>)
 801fc62:	60bb      	str	r3, [r7, #8]
      break;
 801fc64:	bf00      	nop
    }
  }
  return sysclockfreq;
 801fc66:	68bb      	ldr	r3, [r7, #8]
}
 801fc68:	4618      	mov	r0, r3
 801fc6a:	3714      	adds	r7, #20
 801fc6c:	46bd      	mov	sp, r7
 801fc6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801fc70:	40023800 	.word	0x40023800
 801fc74:	00f42400 	.word	0x00f42400
 801fc78:	007a1200 	.word	0x007a1200

0801fc7c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 801fc7c:	b480      	push	{r7}
 801fc7e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 801fc80:	4b03      	ldr	r3, [pc, #12]	; (801fc90 <HAL_RCC_GetHCLKFreq+0x14>)
 801fc82:	681b      	ldr	r3, [r3, #0]
}
 801fc84:	4618      	mov	r0, r3
 801fc86:	46bd      	mov	sp, r7
 801fc88:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fc8c:	4770      	bx	lr
 801fc8e:	bf00      	nop
 801fc90:	20000000 	.word	0x20000000

0801fc94 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 801fc94:	b580      	push	{r7, lr}
 801fc96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 801fc98:	f7ff fff0 	bl	801fc7c <HAL_RCC_GetHCLKFreq>
 801fc9c:	4601      	mov	r1, r0
 801fc9e:	4b05      	ldr	r3, [pc, #20]	; (801fcb4 <HAL_RCC_GetPCLK1Freq+0x20>)
 801fca0:	689b      	ldr	r3, [r3, #8]
 801fca2:	0a9b      	lsrs	r3, r3, #10
 801fca4:	f003 0307 	and.w	r3, r3, #7
 801fca8:	4a03      	ldr	r2, [pc, #12]	; (801fcb8 <HAL_RCC_GetPCLK1Freq+0x24>)
 801fcaa:	5cd3      	ldrb	r3, [r2, r3]
 801fcac:	fa21 f303 	lsr.w	r3, r1, r3
}
 801fcb0:	4618      	mov	r0, r3
 801fcb2:	bd80      	pop	{r7, pc}
 801fcb4:	40023800 	.word	0x40023800
 801fcb8:	0802cf80 	.word	0x0802cf80

0801fcbc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 801fcbc:	b580      	push	{r7, lr}
 801fcbe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 801fcc0:	f7ff ffdc 	bl	801fc7c <HAL_RCC_GetHCLKFreq>
 801fcc4:	4601      	mov	r1, r0
 801fcc6:	4b05      	ldr	r3, [pc, #20]	; (801fcdc <HAL_RCC_GetPCLK2Freq+0x20>)
 801fcc8:	689b      	ldr	r3, [r3, #8]
 801fcca:	0b5b      	lsrs	r3, r3, #13
 801fccc:	f003 0307 	and.w	r3, r3, #7
 801fcd0:	4a03      	ldr	r2, [pc, #12]	; (801fce0 <HAL_RCC_GetPCLK2Freq+0x24>)
 801fcd2:	5cd3      	ldrb	r3, [r2, r3]
 801fcd4:	fa21 f303 	lsr.w	r3, r1, r3
}
 801fcd8:	4618      	mov	r0, r3
 801fcda:	bd80      	pop	{r7, pc}
 801fcdc:	40023800 	.word	0x40023800
 801fce0:	0802cf80 	.word	0x0802cf80

0801fce4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 801fce4:	b580      	push	{r7, lr}
 801fce6:	b082      	sub	sp, #8
 801fce8:	af00      	add	r7, sp, #0
 801fcea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 801fcec:	687b      	ldr	r3, [r7, #4]
 801fcee:	2b00      	cmp	r3, #0
 801fcf0:	d101      	bne.n	801fcf6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 801fcf2:	2301      	movs	r3, #1
 801fcf4:	e01d      	b.n	801fd32 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 801fcf6:	687b      	ldr	r3, [r7, #4]
 801fcf8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801fcfc:	b2db      	uxtb	r3, r3
 801fcfe:	2b00      	cmp	r3, #0
 801fd00:	d106      	bne.n	801fd10 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 801fd02:	687b      	ldr	r3, [r7, #4]
 801fd04:	2200      	movs	r2, #0
 801fd06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 801fd0a:	6878      	ldr	r0, [r7, #4]
 801fd0c:	f7fd fcec 	bl	801d6e8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801fd10:	687b      	ldr	r3, [r7, #4]
 801fd12:	2202      	movs	r2, #2
 801fd14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 801fd18:	687b      	ldr	r3, [r7, #4]
 801fd1a:	681a      	ldr	r2, [r3, #0]
 801fd1c:	687b      	ldr	r3, [r7, #4]
 801fd1e:	3304      	adds	r3, #4
 801fd20:	4619      	mov	r1, r3
 801fd22:	4610      	mov	r0, r2
 801fd24:	f000 fd2e 	bl	8020784 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 801fd28:	687b      	ldr	r3, [r7, #4]
 801fd2a:	2201      	movs	r2, #1
 801fd2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 801fd30:	2300      	movs	r3, #0
}
 801fd32:	4618      	mov	r0, r3
 801fd34:	3708      	adds	r7, #8
 801fd36:	46bd      	mov	sp, r7
 801fd38:	bd80      	pop	{r7, pc}

0801fd3a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 801fd3a:	b580      	push	{r7, lr}
 801fd3c:	b082      	sub	sp, #8
 801fd3e:	af00      	add	r7, sp, #0
 801fd40:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 801fd42:	687b      	ldr	r3, [r7, #4]
 801fd44:	2b00      	cmp	r3, #0
 801fd46:	d101      	bne.n	801fd4c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 801fd48:	2301      	movs	r3, #1
 801fd4a:	e01d      	b.n	801fd88 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 801fd4c:	687b      	ldr	r3, [r7, #4]
 801fd4e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801fd52:	b2db      	uxtb	r3, r3
 801fd54:	2b00      	cmp	r3, #0
 801fd56:	d106      	bne.n	801fd66 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 801fd58:	687b      	ldr	r3, [r7, #4]
 801fd5a:	2200      	movs	r2, #0
 801fd5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 801fd60:	6878      	ldr	r0, [r7, #4]
 801fd62:	f000 f815 	bl	801fd90 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801fd66:	687b      	ldr	r3, [r7, #4]
 801fd68:	2202      	movs	r2, #2
 801fd6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 801fd6e:	687b      	ldr	r3, [r7, #4]
 801fd70:	681a      	ldr	r2, [r3, #0]
 801fd72:	687b      	ldr	r3, [r7, #4]
 801fd74:	3304      	adds	r3, #4
 801fd76:	4619      	mov	r1, r3
 801fd78:	4610      	mov	r0, r2
 801fd7a:	f000 fd03 	bl	8020784 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 801fd7e:	687b      	ldr	r3, [r7, #4]
 801fd80:	2201      	movs	r2, #1
 801fd82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 801fd86:	2300      	movs	r3, #0
}
 801fd88:	4618      	mov	r0, r3
 801fd8a:	3708      	adds	r7, #8
 801fd8c:	46bd      	mov	sp, r7
 801fd8e:	bd80      	pop	{r7, pc}

0801fd90 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 801fd90:	b480      	push	{r7}
 801fd92:	b083      	sub	sp, #12
 801fd94:	af00      	add	r7, sp, #0
 801fd96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 801fd98:	bf00      	nop
 801fd9a:	370c      	adds	r7, #12
 801fd9c:	46bd      	mov	sp, r7
 801fd9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fda2:	4770      	bx	lr

0801fda4 <HAL_TIM_PWM_Start_DMA>:
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 801fda4:	b580      	push	{r7, lr}
 801fda6:	b086      	sub	sp, #24
 801fda8:	af00      	add	r7, sp, #0
 801fdaa:	60f8      	str	r0, [r7, #12]
 801fdac:	60b9      	str	r1, [r7, #8]
 801fdae:	607a      	str	r2, [r7, #4]
 801fdb0:	807b      	strh	r3, [r7, #2]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  if (htim->State == HAL_TIM_STATE_BUSY)
 801fdb2:	68fb      	ldr	r3, [r7, #12]
 801fdb4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801fdb8:	b2db      	uxtb	r3, r3
 801fdba:	2b02      	cmp	r3, #2
 801fdbc:	d101      	bne.n	801fdc2 <HAL_TIM_PWM_Start_DMA+0x1e>
  {
    return HAL_BUSY;
 801fdbe:	2302      	movs	r3, #2
 801fdc0:	e0e9      	b.n	801ff96 <HAL_TIM_PWM_Start_DMA+0x1f2>
  }
  else if (htim->State == HAL_TIM_STATE_READY)
 801fdc2:	68fb      	ldr	r3, [r7, #12]
 801fdc4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801fdc8:	b2db      	uxtb	r3, r3
 801fdca:	2b01      	cmp	r3, #1
 801fdcc:	d10b      	bne.n	801fde6 <HAL_TIM_PWM_Start_DMA+0x42>
  {
    if ((pData == NULL) && (Length > 0U))
 801fdce:	687b      	ldr	r3, [r7, #4]
 801fdd0:	2b00      	cmp	r3, #0
 801fdd2:	d104      	bne.n	801fdde <HAL_TIM_PWM_Start_DMA+0x3a>
 801fdd4:	887b      	ldrh	r3, [r7, #2]
 801fdd6:	2b00      	cmp	r3, #0
 801fdd8:	d001      	beq.n	801fdde <HAL_TIM_PWM_Start_DMA+0x3a>
    {
      return HAL_ERROR;
 801fdda:	2301      	movs	r3, #1
 801fddc:	e0db      	b.n	801ff96 <HAL_TIM_PWM_Start_DMA+0x1f2>
    }
    else
    {
      htim->State = HAL_TIM_STATE_BUSY;
 801fdde:	68fb      	ldr	r3, [r7, #12]
 801fde0:	2202      	movs	r2, #2
 801fde2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  else
  {
    /* nothing to do */
  }

  switch (Channel)
 801fde6:	68bb      	ldr	r3, [r7, #8]
 801fde8:	2b0c      	cmp	r3, #12
 801fdea:	f200 80ad 	bhi.w	801ff48 <HAL_TIM_PWM_Start_DMA+0x1a4>
 801fdee:	a201      	add	r2, pc, #4	; (adr r2, 801fdf4 <HAL_TIM_PWM_Start_DMA+0x50>)
 801fdf0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801fdf4:	0801fe29 	.word	0x0801fe29
 801fdf8:	0801ff49 	.word	0x0801ff49
 801fdfc:	0801ff49 	.word	0x0801ff49
 801fe00:	0801ff49 	.word	0x0801ff49
 801fe04:	0801fe71 	.word	0x0801fe71
 801fe08:	0801ff49 	.word	0x0801ff49
 801fe0c:	0801ff49 	.word	0x0801ff49
 801fe10:	0801ff49 	.word	0x0801ff49
 801fe14:	0801feb9 	.word	0x0801feb9
 801fe18:	0801ff49 	.word	0x0801ff49
 801fe1c:	0801ff49 	.word	0x0801ff49
 801fe20:	0801ff49 	.word	0x0801ff49
 801fe24:	0801ff01 	.word	0x0801ff01
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 801fe28:	68fb      	ldr	r3, [r7, #12]
 801fe2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801fe2c:	4a5c      	ldr	r2, [pc, #368]	; (801ffa0 <HAL_TIM_PWM_Start_DMA+0x1fc>)
 801fe2e:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 801fe30:	68fb      	ldr	r3, [r7, #12]
 801fe32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801fe34:	4a5b      	ldr	r2, [pc, #364]	; (801ffa4 <HAL_TIM_PWM_Start_DMA+0x200>)
 801fe36:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 801fe38:	68fb      	ldr	r3, [r7, #12]
 801fe3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801fe3c:	4a5a      	ldr	r2, [pc, #360]	; (801ffa8 <HAL_TIM_PWM_Start_DMA+0x204>)
 801fe3e:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1, Length) != HAL_OK)
 801fe40:	68fb      	ldr	r3, [r7, #12]
 801fe42:	6a58      	ldr	r0, [r3, #36]	; 0x24
 801fe44:	6879      	ldr	r1, [r7, #4]
 801fe46:	68fb      	ldr	r3, [r7, #12]
 801fe48:	681b      	ldr	r3, [r3, #0]
 801fe4a:	3334      	adds	r3, #52	; 0x34
 801fe4c:	461a      	mov	r2, r3
 801fe4e:	887b      	ldrh	r3, [r7, #2]
 801fe50:	f7fe f8ca 	bl	801dfe8 <HAL_DMA_Start_IT>
 801fe54:	4603      	mov	r3, r0
 801fe56:	2b00      	cmp	r3, #0
 801fe58:	d001      	beq.n	801fe5e <HAL_TIM_PWM_Start_DMA+0xba>
      {
        return HAL_ERROR;
 801fe5a:	2301      	movs	r3, #1
 801fe5c:	e09b      	b.n	801ff96 <HAL_TIM_PWM_Start_DMA+0x1f2>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 801fe5e:	68fb      	ldr	r3, [r7, #12]
 801fe60:	681b      	ldr	r3, [r3, #0]
 801fe62:	68da      	ldr	r2, [r3, #12]
 801fe64:	68fb      	ldr	r3, [r7, #12]
 801fe66:	681b      	ldr	r3, [r3, #0]
 801fe68:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801fe6c:	60da      	str	r2, [r3, #12]
      break;
 801fe6e:	e06c      	b.n	801ff4a <HAL_TIM_PWM_Start_DMA+0x1a6>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 801fe70:	68fb      	ldr	r3, [r7, #12]
 801fe72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801fe74:	4a4a      	ldr	r2, [pc, #296]	; (801ffa0 <HAL_TIM_PWM_Start_DMA+0x1fc>)
 801fe76:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 801fe78:	68fb      	ldr	r3, [r7, #12]
 801fe7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801fe7c:	4a49      	ldr	r2, [pc, #292]	; (801ffa4 <HAL_TIM_PWM_Start_DMA+0x200>)
 801fe7e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 801fe80:	68fb      	ldr	r3, [r7, #12]
 801fe82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801fe84:	4a48      	ldr	r2, [pc, #288]	; (801ffa8 <HAL_TIM_PWM_Start_DMA+0x204>)
 801fe86:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2, Length) != HAL_OK)
 801fe88:	68fb      	ldr	r3, [r7, #12]
 801fe8a:	6a98      	ldr	r0, [r3, #40]	; 0x28
 801fe8c:	6879      	ldr	r1, [r7, #4]
 801fe8e:	68fb      	ldr	r3, [r7, #12]
 801fe90:	681b      	ldr	r3, [r3, #0]
 801fe92:	3338      	adds	r3, #56	; 0x38
 801fe94:	461a      	mov	r2, r3
 801fe96:	887b      	ldrh	r3, [r7, #2]
 801fe98:	f7fe f8a6 	bl	801dfe8 <HAL_DMA_Start_IT>
 801fe9c:	4603      	mov	r3, r0
 801fe9e:	2b00      	cmp	r3, #0
 801fea0:	d001      	beq.n	801fea6 <HAL_TIM_PWM_Start_DMA+0x102>
      {
        return HAL_ERROR;
 801fea2:	2301      	movs	r3, #1
 801fea4:	e077      	b.n	801ff96 <HAL_TIM_PWM_Start_DMA+0x1f2>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 801fea6:	68fb      	ldr	r3, [r7, #12]
 801fea8:	681b      	ldr	r3, [r3, #0]
 801feaa:	68da      	ldr	r2, [r3, #12]
 801feac:	68fb      	ldr	r3, [r7, #12]
 801feae:	681b      	ldr	r3, [r3, #0]
 801feb0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 801feb4:	60da      	str	r2, [r3, #12]
      break;
 801feb6:	e048      	b.n	801ff4a <HAL_TIM_PWM_Start_DMA+0x1a6>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 801feb8:	68fb      	ldr	r3, [r7, #12]
 801feba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801febc:	4a38      	ldr	r2, [pc, #224]	; (801ffa0 <HAL_TIM_PWM_Start_DMA+0x1fc>)
 801febe:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 801fec0:	68fb      	ldr	r3, [r7, #12]
 801fec2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801fec4:	4a37      	ldr	r2, [pc, #220]	; (801ffa4 <HAL_TIM_PWM_Start_DMA+0x200>)
 801fec6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 801fec8:	68fb      	ldr	r3, [r7, #12]
 801feca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801fecc:	4a36      	ldr	r2, [pc, #216]	; (801ffa8 <HAL_TIM_PWM_Start_DMA+0x204>)
 801fece:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3, Length) != HAL_OK)
 801fed0:	68fb      	ldr	r3, [r7, #12]
 801fed2:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 801fed4:	6879      	ldr	r1, [r7, #4]
 801fed6:	68fb      	ldr	r3, [r7, #12]
 801fed8:	681b      	ldr	r3, [r3, #0]
 801feda:	333c      	adds	r3, #60	; 0x3c
 801fedc:	461a      	mov	r2, r3
 801fede:	887b      	ldrh	r3, [r7, #2]
 801fee0:	f7fe f882 	bl	801dfe8 <HAL_DMA_Start_IT>
 801fee4:	4603      	mov	r3, r0
 801fee6:	2b00      	cmp	r3, #0
 801fee8:	d001      	beq.n	801feee <HAL_TIM_PWM_Start_DMA+0x14a>
      {
        return HAL_ERROR;
 801feea:	2301      	movs	r3, #1
 801feec:	e053      	b.n	801ff96 <HAL_TIM_PWM_Start_DMA+0x1f2>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 801feee:	68fb      	ldr	r3, [r7, #12]
 801fef0:	681b      	ldr	r3, [r3, #0]
 801fef2:	68da      	ldr	r2, [r3, #12]
 801fef4:	68fb      	ldr	r3, [r7, #12]
 801fef6:	681b      	ldr	r3, [r3, #0]
 801fef8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 801fefc:	60da      	str	r2, [r3, #12]
      break;
 801fefe:	e024      	b.n	801ff4a <HAL_TIM_PWM_Start_DMA+0x1a6>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 801ff00:	68fb      	ldr	r3, [r7, #12]
 801ff02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801ff04:	4a26      	ldr	r2, [pc, #152]	; (801ffa0 <HAL_TIM_PWM_Start_DMA+0x1fc>)
 801ff06:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 801ff08:	68fb      	ldr	r3, [r7, #12]
 801ff0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801ff0c:	4a25      	ldr	r2, [pc, #148]	; (801ffa4 <HAL_TIM_PWM_Start_DMA+0x200>)
 801ff0e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 801ff10:	68fb      	ldr	r3, [r7, #12]
 801ff12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801ff14:	4a24      	ldr	r2, [pc, #144]	; (801ffa8 <HAL_TIM_PWM_Start_DMA+0x204>)
 801ff16:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4, Length) != HAL_OK)
 801ff18:	68fb      	ldr	r3, [r7, #12]
 801ff1a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 801ff1c:	6879      	ldr	r1, [r7, #4]
 801ff1e:	68fb      	ldr	r3, [r7, #12]
 801ff20:	681b      	ldr	r3, [r3, #0]
 801ff22:	3340      	adds	r3, #64	; 0x40
 801ff24:	461a      	mov	r2, r3
 801ff26:	887b      	ldrh	r3, [r7, #2]
 801ff28:	f7fe f85e 	bl	801dfe8 <HAL_DMA_Start_IT>
 801ff2c:	4603      	mov	r3, r0
 801ff2e:	2b00      	cmp	r3, #0
 801ff30:	d001      	beq.n	801ff36 <HAL_TIM_PWM_Start_DMA+0x192>
      {
        return HAL_ERROR;
 801ff32:	2301      	movs	r3, #1
 801ff34:	e02f      	b.n	801ff96 <HAL_TIM_PWM_Start_DMA+0x1f2>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 801ff36:	68fb      	ldr	r3, [r7, #12]
 801ff38:	681b      	ldr	r3, [r3, #0]
 801ff3a:	68da      	ldr	r2, [r3, #12]
 801ff3c:	68fb      	ldr	r3, [r7, #12]
 801ff3e:	681b      	ldr	r3, [r3, #0]
 801ff40:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 801ff44:	60da      	str	r2, [r3, #12]
      break;
 801ff46:	e000      	b.n	801ff4a <HAL_TIM_PWM_Start_DMA+0x1a6>
    }

    default:
      break;
 801ff48:	bf00      	nop
  }

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 801ff4a:	68fb      	ldr	r3, [r7, #12]
 801ff4c:	681b      	ldr	r3, [r3, #0]
 801ff4e:	2201      	movs	r2, #1
 801ff50:	68b9      	ldr	r1, [r7, #8]
 801ff52:	4618      	mov	r0, r3
 801ff54:	f000 febc 	bl	8020cd0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 801ff58:	68fb      	ldr	r3, [r7, #12]
 801ff5a:	681b      	ldr	r3, [r3, #0]
 801ff5c:	4a13      	ldr	r2, [pc, #76]	; (801ffac <HAL_TIM_PWM_Start_DMA+0x208>)
 801ff5e:	4293      	cmp	r3, r2
 801ff60:	d107      	bne.n	801ff72 <HAL_TIM_PWM_Start_DMA+0x1ce>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 801ff62:	68fb      	ldr	r3, [r7, #12]
 801ff64:	681b      	ldr	r3, [r3, #0]
 801ff66:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801ff68:	68fb      	ldr	r3, [r7, #12]
 801ff6a:	681b      	ldr	r3, [r3, #0]
 801ff6c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 801ff70:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 801ff72:	68fb      	ldr	r3, [r7, #12]
 801ff74:	681b      	ldr	r3, [r3, #0]
 801ff76:	689b      	ldr	r3, [r3, #8]
 801ff78:	f003 0307 	and.w	r3, r3, #7
 801ff7c:	617b      	str	r3, [r7, #20]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801ff7e:	697b      	ldr	r3, [r7, #20]
 801ff80:	2b06      	cmp	r3, #6
 801ff82:	d007      	beq.n	801ff94 <HAL_TIM_PWM_Start_DMA+0x1f0>
  {
    __HAL_TIM_ENABLE(htim);
 801ff84:	68fb      	ldr	r3, [r7, #12]
 801ff86:	681b      	ldr	r3, [r3, #0]
 801ff88:	681a      	ldr	r2, [r3, #0]
 801ff8a:	68fb      	ldr	r3, [r7, #12]
 801ff8c:	681b      	ldr	r3, [r3, #0]
 801ff8e:	f042 0201 	orr.w	r2, r2, #1
 801ff92:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 801ff94:	2300      	movs	r3, #0
}
 801ff96:	4618      	mov	r0, r3
 801ff98:	3718      	adds	r7, #24
 801ff9a:	46bd      	mov	sp, r7
 801ff9c:	bd80      	pop	{r7, pc}
 801ff9e:	bf00      	nop
 801ffa0:	080206a3 	.word	0x080206a3
 801ffa4:	08020713 	.word	0x08020713
 801ffa8:	0802067f 	.word	0x0802067f
 801ffac:	40010000 	.word	0x40010000

0801ffb0 <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 801ffb0:	b580      	push	{r7, lr}
 801ffb2:	b082      	sub	sp, #8
 801ffb4:	af00      	add	r7, sp, #0
 801ffb6:	6078      	str	r0, [r7, #4]
 801ffb8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 801ffba:	683b      	ldr	r3, [r7, #0]
 801ffbc:	2b0c      	cmp	r3, #12
 801ffbe:	d855      	bhi.n	802006c <HAL_TIM_PWM_Stop_DMA+0xbc>
 801ffc0:	a201      	add	r2, pc, #4	; (adr r2, 801ffc8 <HAL_TIM_PWM_Stop_DMA+0x18>)
 801ffc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801ffc6:	bf00      	nop
 801ffc8:	0801fffd 	.word	0x0801fffd
 801ffcc:	0802006d 	.word	0x0802006d
 801ffd0:	0802006d 	.word	0x0802006d
 801ffd4:	0802006d 	.word	0x0802006d
 801ffd8:	08020019 	.word	0x08020019
 801ffdc:	0802006d 	.word	0x0802006d
 801ffe0:	0802006d 	.word	0x0802006d
 801ffe4:	0802006d 	.word	0x0802006d
 801ffe8:	08020035 	.word	0x08020035
 801ffec:	0802006d 	.word	0x0802006d
 801fff0:	0802006d 	.word	0x0802006d
 801fff4:	0802006d 	.word	0x0802006d
 801fff8:	08020051 	.word	0x08020051
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 801fffc:	687b      	ldr	r3, [r7, #4]
 801fffe:	681b      	ldr	r3, [r3, #0]
 8020000:	68da      	ldr	r2, [r3, #12]
 8020002:	687b      	ldr	r3, [r7, #4]
 8020004:	681b      	ldr	r3, [r3, #0]
 8020006:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 802000a:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 802000c:	687b      	ldr	r3, [r7, #4]
 802000e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8020010:	4618      	mov	r0, r3
 8020012:	f7fe f841 	bl	801e098 <HAL_DMA_Abort_IT>
      break;
 8020016:	e02a      	b.n	802006e <HAL_TIM_PWM_Stop_DMA+0xbe>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8020018:	687b      	ldr	r3, [r7, #4]
 802001a:	681b      	ldr	r3, [r3, #0]
 802001c:	68da      	ldr	r2, [r3, #12]
 802001e:	687b      	ldr	r3, [r7, #4]
 8020020:	681b      	ldr	r3, [r3, #0]
 8020022:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8020026:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8020028:	687b      	ldr	r3, [r7, #4]
 802002a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802002c:	4618      	mov	r0, r3
 802002e:	f7fe f833 	bl	801e098 <HAL_DMA_Abort_IT>
      break;
 8020032:	e01c      	b.n	802006e <HAL_TIM_PWM_Stop_DMA+0xbe>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8020034:	687b      	ldr	r3, [r7, #4]
 8020036:	681b      	ldr	r3, [r3, #0]
 8020038:	68da      	ldr	r2, [r3, #12]
 802003a:	687b      	ldr	r3, [r7, #4]
 802003c:	681b      	ldr	r3, [r3, #0]
 802003e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8020042:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8020044:	687b      	ldr	r3, [r7, #4]
 8020046:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8020048:	4618      	mov	r0, r3
 802004a:	f7fe f825 	bl	801e098 <HAL_DMA_Abort_IT>
      break;
 802004e:	e00e      	b.n	802006e <HAL_TIM_PWM_Stop_DMA+0xbe>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8020050:	687b      	ldr	r3, [r7, #4]
 8020052:	681b      	ldr	r3, [r3, #0]
 8020054:	68da      	ldr	r2, [r3, #12]
 8020056:	687b      	ldr	r3, [r7, #4]
 8020058:	681b      	ldr	r3, [r3, #0]
 802005a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 802005e:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8020060:	687b      	ldr	r3, [r7, #4]
 8020062:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020064:	4618      	mov	r0, r3
 8020066:	f7fe f817 	bl	801e098 <HAL_DMA_Abort_IT>
      break;
 802006a:	e000      	b.n	802006e <HAL_TIM_PWM_Stop_DMA+0xbe>
    }

    default:
      break;
 802006c:	bf00      	nop
  }

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 802006e:	687b      	ldr	r3, [r7, #4]
 8020070:	681b      	ldr	r3, [r3, #0]
 8020072:	2200      	movs	r2, #0
 8020074:	6839      	ldr	r1, [r7, #0]
 8020076:	4618      	mov	r0, r3
 8020078:	f000 fe2a 	bl	8020cd0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 802007c:	687b      	ldr	r3, [r7, #4]
 802007e:	681b      	ldr	r3, [r3, #0]
 8020080:	4a1d      	ldr	r2, [pc, #116]	; (80200f8 <HAL_TIM_PWM_Stop_DMA+0x148>)
 8020082:	4293      	cmp	r3, r2
 8020084:	d117      	bne.n	80200b6 <HAL_TIM_PWM_Stop_DMA+0x106>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8020086:	687b      	ldr	r3, [r7, #4]
 8020088:	681b      	ldr	r3, [r3, #0]
 802008a:	6a1a      	ldr	r2, [r3, #32]
 802008c:	f241 1311 	movw	r3, #4369	; 0x1111
 8020090:	4013      	ands	r3, r2
 8020092:	2b00      	cmp	r3, #0
 8020094:	d10f      	bne.n	80200b6 <HAL_TIM_PWM_Stop_DMA+0x106>
 8020096:	687b      	ldr	r3, [r7, #4]
 8020098:	681b      	ldr	r3, [r3, #0]
 802009a:	6a1a      	ldr	r2, [r3, #32]
 802009c:	f240 4344 	movw	r3, #1092	; 0x444
 80200a0:	4013      	ands	r3, r2
 80200a2:	2b00      	cmp	r3, #0
 80200a4:	d107      	bne.n	80200b6 <HAL_TIM_PWM_Stop_DMA+0x106>
 80200a6:	687b      	ldr	r3, [r7, #4]
 80200a8:	681b      	ldr	r3, [r3, #0]
 80200aa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80200ac:	687b      	ldr	r3, [r7, #4]
 80200ae:	681b      	ldr	r3, [r3, #0]
 80200b0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80200b4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80200b6:	687b      	ldr	r3, [r7, #4]
 80200b8:	681b      	ldr	r3, [r3, #0]
 80200ba:	6a1a      	ldr	r2, [r3, #32]
 80200bc:	f241 1311 	movw	r3, #4369	; 0x1111
 80200c0:	4013      	ands	r3, r2
 80200c2:	2b00      	cmp	r3, #0
 80200c4:	d10f      	bne.n	80200e6 <HAL_TIM_PWM_Stop_DMA+0x136>
 80200c6:	687b      	ldr	r3, [r7, #4]
 80200c8:	681b      	ldr	r3, [r3, #0]
 80200ca:	6a1a      	ldr	r2, [r3, #32]
 80200cc:	f240 4344 	movw	r3, #1092	; 0x444
 80200d0:	4013      	ands	r3, r2
 80200d2:	2b00      	cmp	r3, #0
 80200d4:	d107      	bne.n	80200e6 <HAL_TIM_PWM_Stop_DMA+0x136>
 80200d6:	687b      	ldr	r3, [r7, #4]
 80200d8:	681b      	ldr	r3, [r3, #0]
 80200da:	681a      	ldr	r2, [r3, #0]
 80200dc:	687b      	ldr	r3, [r7, #4]
 80200de:	681b      	ldr	r3, [r3, #0]
 80200e0:	f022 0201 	bic.w	r2, r2, #1
 80200e4:	601a      	str	r2, [r3, #0]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80200e6:	687b      	ldr	r3, [r7, #4]
 80200e8:	2201      	movs	r2, #1
 80200ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80200ee:	2300      	movs	r3, #0
}
 80200f0:	4618      	mov	r0, r3
 80200f2:	3708      	adds	r7, #8
 80200f4:	46bd      	mov	sp, r7
 80200f6:	bd80      	pop	{r7, pc}
 80200f8:	40010000 	.word	0x40010000

080200fc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80200fc:	b580      	push	{r7, lr}
 80200fe:	b082      	sub	sp, #8
 8020100:	af00      	add	r7, sp, #0
 8020102:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8020104:	687b      	ldr	r3, [r7, #4]
 8020106:	681b      	ldr	r3, [r3, #0]
 8020108:	691b      	ldr	r3, [r3, #16]
 802010a:	f003 0302 	and.w	r3, r3, #2
 802010e:	2b02      	cmp	r3, #2
 8020110:	d122      	bne.n	8020158 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8020112:	687b      	ldr	r3, [r7, #4]
 8020114:	681b      	ldr	r3, [r3, #0]
 8020116:	68db      	ldr	r3, [r3, #12]
 8020118:	f003 0302 	and.w	r3, r3, #2
 802011c:	2b02      	cmp	r3, #2
 802011e:	d11b      	bne.n	8020158 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8020120:	687b      	ldr	r3, [r7, #4]
 8020122:	681b      	ldr	r3, [r3, #0]
 8020124:	f06f 0202 	mvn.w	r2, #2
 8020128:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 802012a:	687b      	ldr	r3, [r7, #4]
 802012c:	2201      	movs	r2, #1
 802012e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8020130:	687b      	ldr	r3, [r7, #4]
 8020132:	681b      	ldr	r3, [r3, #0]
 8020134:	699b      	ldr	r3, [r3, #24]
 8020136:	f003 0303 	and.w	r3, r3, #3
 802013a:	2b00      	cmp	r3, #0
 802013c:	d003      	beq.n	8020146 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 802013e:	6878      	ldr	r0, [r7, #4]
 8020140:	f000 fa75 	bl	802062e <HAL_TIM_IC_CaptureCallback>
 8020144:	e005      	b.n	8020152 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8020146:	6878      	ldr	r0, [r7, #4]
 8020148:	f000 fa67 	bl	802061a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 802014c:	6878      	ldr	r0, [r7, #4]
 802014e:	f7fc ff23 	bl	801cf98 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8020152:	687b      	ldr	r3, [r7, #4]
 8020154:	2200      	movs	r2, #0
 8020156:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8020158:	687b      	ldr	r3, [r7, #4]
 802015a:	681b      	ldr	r3, [r3, #0]
 802015c:	691b      	ldr	r3, [r3, #16]
 802015e:	f003 0304 	and.w	r3, r3, #4
 8020162:	2b04      	cmp	r3, #4
 8020164:	d122      	bne.n	80201ac <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8020166:	687b      	ldr	r3, [r7, #4]
 8020168:	681b      	ldr	r3, [r3, #0]
 802016a:	68db      	ldr	r3, [r3, #12]
 802016c:	f003 0304 	and.w	r3, r3, #4
 8020170:	2b04      	cmp	r3, #4
 8020172:	d11b      	bne.n	80201ac <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8020174:	687b      	ldr	r3, [r7, #4]
 8020176:	681b      	ldr	r3, [r3, #0]
 8020178:	f06f 0204 	mvn.w	r2, #4
 802017c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 802017e:	687b      	ldr	r3, [r7, #4]
 8020180:	2202      	movs	r2, #2
 8020182:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8020184:	687b      	ldr	r3, [r7, #4]
 8020186:	681b      	ldr	r3, [r3, #0]
 8020188:	699b      	ldr	r3, [r3, #24]
 802018a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 802018e:	2b00      	cmp	r3, #0
 8020190:	d003      	beq.n	802019a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8020192:	6878      	ldr	r0, [r7, #4]
 8020194:	f000 fa4b 	bl	802062e <HAL_TIM_IC_CaptureCallback>
 8020198:	e005      	b.n	80201a6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 802019a:	6878      	ldr	r0, [r7, #4]
 802019c:	f000 fa3d 	bl	802061a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80201a0:	6878      	ldr	r0, [r7, #4]
 80201a2:	f7fc fef9 	bl	801cf98 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80201a6:	687b      	ldr	r3, [r7, #4]
 80201a8:	2200      	movs	r2, #0
 80201aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80201ac:	687b      	ldr	r3, [r7, #4]
 80201ae:	681b      	ldr	r3, [r3, #0]
 80201b0:	691b      	ldr	r3, [r3, #16]
 80201b2:	f003 0308 	and.w	r3, r3, #8
 80201b6:	2b08      	cmp	r3, #8
 80201b8:	d122      	bne.n	8020200 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80201ba:	687b      	ldr	r3, [r7, #4]
 80201bc:	681b      	ldr	r3, [r3, #0]
 80201be:	68db      	ldr	r3, [r3, #12]
 80201c0:	f003 0308 	and.w	r3, r3, #8
 80201c4:	2b08      	cmp	r3, #8
 80201c6:	d11b      	bne.n	8020200 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80201c8:	687b      	ldr	r3, [r7, #4]
 80201ca:	681b      	ldr	r3, [r3, #0]
 80201cc:	f06f 0208 	mvn.w	r2, #8
 80201d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80201d2:	687b      	ldr	r3, [r7, #4]
 80201d4:	2204      	movs	r2, #4
 80201d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80201d8:	687b      	ldr	r3, [r7, #4]
 80201da:	681b      	ldr	r3, [r3, #0]
 80201dc:	69db      	ldr	r3, [r3, #28]
 80201de:	f003 0303 	and.w	r3, r3, #3
 80201e2:	2b00      	cmp	r3, #0
 80201e4:	d003      	beq.n	80201ee <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80201e6:	6878      	ldr	r0, [r7, #4]
 80201e8:	f000 fa21 	bl	802062e <HAL_TIM_IC_CaptureCallback>
 80201ec:	e005      	b.n	80201fa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80201ee:	6878      	ldr	r0, [r7, #4]
 80201f0:	f000 fa13 	bl	802061a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80201f4:	6878      	ldr	r0, [r7, #4]
 80201f6:	f7fc fecf 	bl	801cf98 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80201fa:	687b      	ldr	r3, [r7, #4]
 80201fc:	2200      	movs	r2, #0
 80201fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8020200:	687b      	ldr	r3, [r7, #4]
 8020202:	681b      	ldr	r3, [r3, #0]
 8020204:	691b      	ldr	r3, [r3, #16]
 8020206:	f003 0310 	and.w	r3, r3, #16
 802020a:	2b10      	cmp	r3, #16
 802020c:	d122      	bne.n	8020254 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 802020e:	687b      	ldr	r3, [r7, #4]
 8020210:	681b      	ldr	r3, [r3, #0]
 8020212:	68db      	ldr	r3, [r3, #12]
 8020214:	f003 0310 	and.w	r3, r3, #16
 8020218:	2b10      	cmp	r3, #16
 802021a:	d11b      	bne.n	8020254 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 802021c:	687b      	ldr	r3, [r7, #4]
 802021e:	681b      	ldr	r3, [r3, #0]
 8020220:	f06f 0210 	mvn.w	r2, #16
 8020224:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8020226:	687b      	ldr	r3, [r7, #4]
 8020228:	2208      	movs	r2, #8
 802022a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 802022c:	687b      	ldr	r3, [r7, #4]
 802022e:	681b      	ldr	r3, [r3, #0]
 8020230:	69db      	ldr	r3, [r3, #28]
 8020232:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8020236:	2b00      	cmp	r3, #0
 8020238:	d003      	beq.n	8020242 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 802023a:	6878      	ldr	r0, [r7, #4]
 802023c:	f000 f9f7 	bl	802062e <HAL_TIM_IC_CaptureCallback>
 8020240:	e005      	b.n	802024e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8020242:	6878      	ldr	r0, [r7, #4]
 8020244:	f000 f9e9 	bl	802061a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8020248:	6878      	ldr	r0, [r7, #4]
 802024a:	f7fc fea5 	bl	801cf98 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 802024e:	687b      	ldr	r3, [r7, #4]
 8020250:	2200      	movs	r2, #0
 8020252:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8020254:	687b      	ldr	r3, [r7, #4]
 8020256:	681b      	ldr	r3, [r3, #0]
 8020258:	691b      	ldr	r3, [r3, #16]
 802025a:	f003 0301 	and.w	r3, r3, #1
 802025e:	2b01      	cmp	r3, #1
 8020260:	d10e      	bne.n	8020280 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8020262:	687b      	ldr	r3, [r7, #4]
 8020264:	681b      	ldr	r3, [r3, #0]
 8020266:	68db      	ldr	r3, [r3, #12]
 8020268:	f003 0301 	and.w	r3, r3, #1
 802026c:	2b01      	cmp	r3, #1
 802026e:	d107      	bne.n	8020280 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8020270:	687b      	ldr	r3, [r7, #4]
 8020272:	681b      	ldr	r3, [r3, #0]
 8020274:	f06f 0201 	mvn.w	r2, #1
 8020278:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 802027a:	6878      	ldr	r0, [r7, #4]
 802027c:	f000 f9c3 	bl	8020606 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8020280:	687b      	ldr	r3, [r7, #4]
 8020282:	681b      	ldr	r3, [r3, #0]
 8020284:	691b      	ldr	r3, [r3, #16]
 8020286:	f003 0380 	and.w	r3, r3, #128	; 0x80
 802028a:	2b80      	cmp	r3, #128	; 0x80
 802028c:	d10e      	bne.n	80202ac <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 802028e:	687b      	ldr	r3, [r7, #4]
 8020290:	681b      	ldr	r3, [r3, #0]
 8020292:	68db      	ldr	r3, [r3, #12]
 8020294:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8020298:	2b80      	cmp	r3, #128	; 0x80
 802029a:	d107      	bne.n	80202ac <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 802029c:	687b      	ldr	r3, [r7, #4]
 802029e:	681b      	ldr	r3, [r3, #0]
 80202a0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80202a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80202a6:	6878      	ldr	r0, [r7, #4]
 80202a8:	f000 fdb0 	bl	8020e0c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80202ac:	687b      	ldr	r3, [r7, #4]
 80202ae:	681b      	ldr	r3, [r3, #0]
 80202b0:	691b      	ldr	r3, [r3, #16]
 80202b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80202b6:	2b40      	cmp	r3, #64	; 0x40
 80202b8:	d10e      	bne.n	80202d8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80202ba:	687b      	ldr	r3, [r7, #4]
 80202bc:	681b      	ldr	r3, [r3, #0]
 80202be:	68db      	ldr	r3, [r3, #12]
 80202c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80202c4:	2b40      	cmp	r3, #64	; 0x40
 80202c6:	d107      	bne.n	80202d8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80202c8:	687b      	ldr	r3, [r7, #4]
 80202ca:	681b      	ldr	r3, [r3, #0]
 80202cc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80202d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80202d2:	6878      	ldr	r0, [r7, #4]
 80202d4:	f000 f9bf 	bl	8020656 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80202d8:	687b      	ldr	r3, [r7, #4]
 80202da:	681b      	ldr	r3, [r3, #0]
 80202dc:	691b      	ldr	r3, [r3, #16]
 80202de:	f003 0320 	and.w	r3, r3, #32
 80202e2:	2b20      	cmp	r3, #32
 80202e4:	d10e      	bne.n	8020304 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80202e6:	687b      	ldr	r3, [r7, #4]
 80202e8:	681b      	ldr	r3, [r3, #0]
 80202ea:	68db      	ldr	r3, [r3, #12]
 80202ec:	f003 0320 	and.w	r3, r3, #32
 80202f0:	2b20      	cmp	r3, #32
 80202f2:	d107      	bne.n	8020304 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80202f4:	687b      	ldr	r3, [r7, #4]
 80202f6:	681b      	ldr	r3, [r3, #0]
 80202f8:	f06f 0220 	mvn.w	r2, #32
 80202fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80202fe:	6878      	ldr	r0, [r7, #4]
 8020300:	f000 fd7a 	bl	8020df8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8020304:	bf00      	nop
 8020306:	3708      	adds	r7, #8
 8020308:	46bd      	mov	sp, r7
 802030a:	bd80      	pop	{r7, pc}

0802030c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 802030c:	b580      	push	{r7, lr}
 802030e:	b084      	sub	sp, #16
 8020310:	af00      	add	r7, sp, #0
 8020312:	60f8      	str	r0, [r7, #12]
 8020314:	60b9      	str	r1, [r7, #8]
 8020316:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8020318:	68fb      	ldr	r3, [r7, #12]
 802031a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 802031e:	2b01      	cmp	r3, #1
 8020320:	d101      	bne.n	8020326 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8020322:	2302      	movs	r3, #2
 8020324:	e0b4      	b.n	8020490 <HAL_TIM_PWM_ConfigChannel+0x184>
 8020326:	68fb      	ldr	r3, [r7, #12]
 8020328:	2201      	movs	r2, #1
 802032a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 802032e:	68fb      	ldr	r3, [r7, #12]
 8020330:	2202      	movs	r2, #2
 8020332:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8020336:	687b      	ldr	r3, [r7, #4]
 8020338:	2b0c      	cmp	r3, #12
 802033a:	f200 809f 	bhi.w	802047c <HAL_TIM_PWM_ConfigChannel+0x170>
 802033e:	a201      	add	r2, pc, #4	; (adr r2, 8020344 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8020340:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8020344:	08020379 	.word	0x08020379
 8020348:	0802047d 	.word	0x0802047d
 802034c:	0802047d 	.word	0x0802047d
 8020350:	0802047d 	.word	0x0802047d
 8020354:	080203b9 	.word	0x080203b9
 8020358:	0802047d 	.word	0x0802047d
 802035c:	0802047d 	.word	0x0802047d
 8020360:	0802047d 	.word	0x0802047d
 8020364:	080203fb 	.word	0x080203fb
 8020368:	0802047d 	.word	0x0802047d
 802036c:	0802047d 	.word	0x0802047d
 8020370:	0802047d 	.word	0x0802047d
 8020374:	0802043b 	.word	0x0802043b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8020378:	68fb      	ldr	r3, [r7, #12]
 802037a:	681b      	ldr	r3, [r3, #0]
 802037c:	68b9      	ldr	r1, [r7, #8]
 802037e:	4618      	mov	r0, r3
 8020380:	f000 fa80 	bl	8020884 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8020384:	68fb      	ldr	r3, [r7, #12]
 8020386:	681b      	ldr	r3, [r3, #0]
 8020388:	699a      	ldr	r2, [r3, #24]
 802038a:	68fb      	ldr	r3, [r7, #12]
 802038c:	681b      	ldr	r3, [r3, #0]
 802038e:	f042 0208 	orr.w	r2, r2, #8
 8020392:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8020394:	68fb      	ldr	r3, [r7, #12]
 8020396:	681b      	ldr	r3, [r3, #0]
 8020398:	699a      	ldr	r2, [r3, #24]
 802039a:	68fb      	ldr	r3, [r7, #12]
 802039c:	681b      	ldr	r3, [r3, #0]
 802039e:	f022 0204 	bic.w	r2, r2, #4
 80203a2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80203a4:	68fb      	ldr	r3, [r7, #12]
 80203a6:	681b      	ldr	r3, [r3, #0]
 80203a8:	6999      	ldr	r1, [r3, #24]
 80203aa:	68bb      	ldr	r3, [r7, #8]
 80203ac:	691a      	ldr	r2, [r3, #16]
 80203ae:	68fb      	ldr	r3, [r7, #12]
 80203b0:	681b      	ldr	r3, [r3, #0]
 80203b2:	430a      	orrs	r2, r1
 80203b4:	619a      	str	r2, [r3, #24]
      break;
 80203b6:	e062      	b.n	802047e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80203b8:	68fb      	ldr	r3, [r7, #12]
 80203ba:	681b      	ldr	r3, [r3, #0]
 80203bc:	68b9      	ldr	r1, [r7, #8]
 80203be:	4618      	mov	r0, r3
 80203c0:	f000 fac6 	bl	8020950 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80203c4:	68fb      	ldr	r3, [r7, #12]
 80203c6:	681b      	ldr	r3, [r3, #0]
 80203c8:	699a      	ldr	r2, [r3, #24]
 80203ca:	68fb      	ldr	r3, [r7, #12]
 80203cc:	681b      	ldr	r3, [r3, #0]
 80203ce:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80203d2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80203d4:	68fb      	ldr	r3, [r7, #12]
 80203d6:	681b      	ldr	r3, [r3, #0]
 80203d8:	699a      	ldr	r2, [r3, #24]
 80203da:	68fb      	ldr	r3, [r7, #12]
 80203dc:	681b      	ldr	r3, [r3, #0]
 80203de:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80203e2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80203e4:	68fb      	ldr	r3, [r7, #12]
 80203e6:	681b      	ldr	r3, [r3, #0]
 80203e8:	6999      	ldr	r1, [r3, #24]
 80203ea:	68bb      	ldr	r3, [r7, #8]
 80203ec:	691b      	ldr	r3, [r3, #16]
 80203ee:	021a      	lsls	r2, r3, #8
 80203f0:	68fb      	ldr	r3, [r7, #12]
 80203f2:	681b      	ldr	r3, [r3, #0]
 80203f4:	430a      	orrs	r2, r1
 80203f6:	619a      	str	r2, [r3, #24]
      break;
 80203f8:	e041      	b.n	802047e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80203fa:	68fb      	ldr	r3, [r7, #12]
 80203fc:	681b      	ldr	r3, [r3, #0]
 80203fe:	68b9      	ldr	r1, [r7, #8]
 8020400:	4618      	mov	r0, r3
 8020402:	f000 fb11 	bl	8020a28 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8020406:	68fb      	ldr	r3, [r7, #12]
 8020408:	681b      	ldr	r3, [r3, #0]
 802040a:	69da      	ldr	r2, [r3, #28]
 802040c:	68fb      	ldr	r3, [r7, #12]
 802040e:	681b      	ldr	r3, [r3, #0]
 8020410:	f042 0208 	orr.w	r2, r2, #8
 8020414:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8020416:	68fb      	ldr	r3, [r7, #12]
 8020418:	681b      	ldr	r3, [r3, #0]
 802041a:	69da      	ldr	r2, [r3, #28]
 802041c:	68fb      	ldr	r3, [r7, #12]
 802041e:	681b      	ldr	r3, [r3, #0]
 8020420:	f022 0204 	bic.w	r2, r2, #4
 8020424:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8020426:	68fb      	ldr	r3, [r7, #12]
 8020428:	681b      	ldr	r3, [r3, #0]
 802042a:	69d9      	ldr	r1, [r3, #28]
 802042c:	68bb      	ldr	r3, [r7, #8]
 802042e:	691a      	ldr	r2, [r3, #16]
 8020430:	68fb      	ldr	r3, [r7, #12]
 8020432:	681b      	ldr	r3, [r3, #0]
 8020434:	430a      	orrs	r2, r1
 8020436:	61da      	str	r2, [r3, #28]
      break;
 8020438:	e021      	b.n	802047e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 802043a:	68fb      	ldr	r3, [r7, #12]
 802043c:	681b      	ldr	r3, [r3, #0]
 802043e:	68b9      	ldr	r1, [r7, #8]
 8020440:	4618      	mov	r0, r3
 8020442:	f000 fb5b 	bl	8020afc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8020446:	68fb      	ldr	r3, [r7, #12]
 8020448:	681b      	ldr	r3, [r3, #0]
 802044a:	69da      	ldr	r2, [r3, #28]
 802044c:	68fb      	ldr	r3, [r7, #12]
 802044e:	681b      	ldr	r3, [r3, #0]
 8020450:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8020454:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8020456:	68fb      	ldr	r3, [r7, #12]
 8020458:	681b      	ldr	r3, [r3, #0]
 802045a:	69da      	ldr	r2, [r3, #28]
 802045c:	68fb      	ldr	r3, [r7, #12]
 802045e:	681b      	ldr	r3, [r3, #0]
 8020460:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8020464:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8020466:	68fb      	ldr	r3, [r7, #12]
 8020468:	681b      	ldr	r3, [r3, #0]
 802046a:	69d9      	ldr	r1, [r3, #28]
 802046c:	68bb      	ldr	r3, [r7, #8]
 802046e:	691b      	ldr	r3, [r3, #16]
 8020470:	021a      	lsls	r2, r3, #8
 8020472:	68fb      	ldr	r3, [r7, #12]
 8020474:	681b      	ldr	r3, [r3, #0]
 8020476:	430a      	orrs	r2, r1
 8020478:	61da      	str	r2, [r3, #28]
      break;
 802047a:	e000      	b.n	802047e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 802047c:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 802047e:	68fb      	ldr	r3, [r7, #12]
 8020480:	2201      	movs	r2, #1
 8020482:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8020486:	68fb      	ldr	r3, [r7, #12]
 8020488:	2200      	movs	r2, #0
 802048a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 802048e:	2300      	movs	r3, #0
}
 8020490:	4618      	mov	r0, r3
 8020492:	3710      	adds	r7, #16
 8020494:	46bd      	mov	sp, r7
 8020496:	bd80      	pop	{r7, pc}

08020498 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8020498:	b580      	push	{r7, lr}
 802049a:	b084      	sub	sp, #16
 802049c:	af00      	add	r7, sp, #0
 802049e:	6078      	str	r0, [r7, #4]
 80204a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80204a2:	687b      	ldr	r3, [r7, #4]
 80204a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80204a8:	2b01      	cmp	r3, #1
 80204aa:	d101      	bne.n	80204b0 <HAL_TIM_ConfigClockSource+0x18>
 80204ac:	2302      	movs	r3, #2
 80204ae:	e0a6      	b.n	80205fe <HAL_TIM_ConfigClockSource+0x166>
 80204b0:	687b      	ldr	r3, [r7, #4]
 80204b2:	2201      	movs	r2, #1
 80204b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80204b8:	687b      	ldr	r3, [r7, #4]
 80204ba:	2202      	movs	r2, #2
 80204bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80204c0:	687b      	ldr	r3, [r7, #4]
 80204c2:	681b      	ldr	r3, [r3, #0]
 80204c4:	689b      	ldr	r3, [r3, #8]
 80204c6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80204c8:	68fb      	ldr	r3, [r7, #12]
 80204ca:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80204ce:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80204d0:	68fb      	ldr	r3, [r7, #12]
 80204d2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80204d6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80204d8:	687b      	ldr	r3, [r7, #4]
 80204da:	681b      	ldr	r3, [r3, #0]
 80204dc:	68fa      	ldr	r2, [r7, #12]
 80204de:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80204e0:	683b      	ldr	r3, [r7, #0]
 80204e2:	681b      	ldr	r3, [r3, #0]
 80204e4:	2b40      	cmp	r3, #64	; 0x40
 80204e6:	d067      	beq.n	80205b8 <HAL_TIM_ConfigClockSource+0x120>
 80204e8:	2b40      	cmp	r3, #64	; 0x40
 80204ea:	d80b      	bhi.n	8020504 <HAL_TIM_ConfigClockSource+0x6c>
 80204ec:	2b10      	cmp	r3, #16
 80204ee:	d073      	beq.n	80205d8 <HAL_TIM_ConfigClockSource+0x140>
 80204f0:	2b10      	cmp	r3, #16
 80204f2:	d802      	bhi.n	80204fa <HAL_TIM_ConfigClockSource+0x62>
 80204f4:	2b00      	cmp	r3, #0
 80204f6:	d06f      	beq.n	80205d8 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80204f8:	e078      	b.n	80205ec <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80204fa:	2b20      	cmp	r3, #32
 80204fc:	d06c      	beq.n	80205d8 <HAL_TIM_ConfigClockSource+0x140>
 80204fe:	2b30      	cmp	r3, #48	; 0x30
 8020500:	d06a      	beq.n	80205d8 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8020502:	e073      	b.n	80205ec <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8020504:	2b70      	cmp	r3, #112	; 0x70
 8020506:	d00d      	beq.n	8020524 <HAL_TIM_ConfigClockSource+0x8c>
 8020508:	2b70      	cmp	r3, #112	; 0x70
 802050a:	d804      	bhi.n	8020516 <HAL_TIM_ConfigClockSource+0x7e>
 802050c:	2b50      	cmp	r3, #80	; 0x50
 802050e:	d033      	beq.n	8020578 <HAL_TIM_ConfigClockSource+0xe0>
 8020510:	2b60      	cmp	r3, #96	; 0x60
 8020512:	d041      	beq.n	8020598 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8020514:	e06a      	b.n	80205ec <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8020516:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 802051a:	d066      	beq.n	80205ea <HAL_TIM_ConfigClockSource+0x152>
 802051c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8020520:	d017      	beq.n	8020552 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8020522:	e063      	b.n	80205ec <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8020524:	687b      	ldr	r3, [r7, #4]
 8020526:	6818      	ldr	r0, [r3, #0]
 8020528:	683b      	ldr	r3, [r7, #0]
 802052a:	6899      	ldr	r1, [r3, #8]
 802052c:	683b      	ldr	r3, [r7, #0]
 802052e:	685a      	ldr	r2, [r3, #4]
 8020530:	683b      	ldr	r3, [r7, #0]
 8020532:	68db      	ldr	r3, [r3, #12]
 8020534:	f000 fbac 	bl	8020c90 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8020538:	687b      	ldr	r3, [r7, #4]
 802053a:	681b      	ldr	r3, [r3, #0]
 802053c:	689b      	ldr	r3, [r3, #8]
 802053e:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8020540:	68fb      	ldr	r3, [r7, #12]
 8020542:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8020546:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8020548:	687b      	ldr	r3, [r7, #4]
 802054a:	681b      	ldr	r3, [r3, #0]
 802054c:	68fa      	ldr	r2, [r7, #12]
 802054e:	609a      	str	r2, [r3, #8]
      break;
 8020550:	e04c      	b.n	80205ec <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8020552:	687b      	ldr	r3, [r7, #4]
 8020554:	6818      	ldr	r0, [r3, #0]
 8020556:	683b      	ldr	r3, [r7, #0]
 8020558:	6899      	ldr	r1, [r3, #8]
 802055a:	683b      	ldr	r3, [r7, #0]
 802055c:	685a      	ldr	r2, [r3, #4]
 802055e:	683b      	ldr	r3, [r7, #0]
 8020560:	68db      	ldr	r3, [r3, #12]
 8020562:	f000 fb95 	bl	8020c90 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8020566:	687b      	ldr	r3, [r7, #4]
 8020568:	681b      	ldr	r3, [r3, #0]
 802056a:	689a      	ldr	r2, [r3, #8]
 802056c:	687b      	ldr	r3, [r7, #4]
 802056e:	681b      	ldr	r3, [r3, #0]
 8020570:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8020574:	609a      	str	r2, [r3, #8]
      break;
 8020576:	e039      	b.n	80205ec <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8020578:	687b      	ldr	r3, [r7, #4]
 802057a:	6818      	ldr	r0, [r3, #0]
 802057c:	683b      	ldr	r3, [r7, #0]
 802057e:	6859      	ldr	r1, [r3, #4]
 8020580:	683b      	ldr	r3, [r7, #0]
 8020582:	68db      	ldr	r3, [r3, #12]
 8020584:	461a      	mov	r2, r3
 8020586:	f000 fb09 	bl	8020b9c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 802058a:	687b      	ldr	r3, [r7, #4]
 802058c:	681b      	ldr	r3, [r3, #0]
 802058e:	2150      	movs	r1, #80	; 0x50
 8020590:	4618      	mov	r0, r3
 8020592:	f000 fb62 	bl	8020c5a <TIM_ITRx_SetConfig>
      break;
 8020596:	e029      	b.n	80205ec <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8020598:	687b      	ldr	r3, [r7, #4]
 802059a:	6818      	ldr	r0, [r3, #0]
 802059c:	683b      	ldr	r3, [r7, #0]
 802059e:	6859      	ldr	r1, [r3, #4]
 80205a0:	683b      	ldr	r3, [r7, #0]
 80205a2:	68db      	ldr	r3, [r3, #12]
 80205a4:	461a      	mov	r2, r3
 80205a6:	f000 fb28 	bl	8020bfa <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80205aa:	687b      	ldr	r3, [r7, #4]
 80205ac:	681b      	ldr	r3, [r3, #0]
 80205ae:	2160      	movs	r1, #96	; 0x60
 80205b0:	4618      	mov	r0, r3
 80205b2:	f000 fb52 	bl	8020c5a <TIM_ITRx_SetConfig>
      break;
 80205b6:	e019      	b.n	80205ec <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80205b8:	687b      	ldr	r3, [r7, #4]
 80205ba:	6818      	ldr	r0, [r3, #0]
 80205bc:	683b      	ldr	r3, [r7, #0]
 80205be:	6859      	ldr	r1, [r3, #4]
 80205c0:	683b      	ldr	r3, [r7, #0]
 80205c2:	68db      	ldr	r3, [r3, #12]
 80205c4:	461a      	mov	r2, r3
 80205c6:	f000 fae9 	bl	8020b9c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80205ca:	687b      	ldr	r3, [r7, #4]
 80205cc:	681b      	ldr	r3, [r3, #0]
 80205ce:	2140      	movs	r1, #64	; 0x40
 80205d0:	4618      	mov	r0, r3
 80205d2:	f000 fb42 	bl	8020c5a <TIM_ITRx_SetConfig>
      break;
 80205d6:	e009      	b.n	80205ec <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80205d8:	687b      	ldr	r3, [r7, #4]
 80205da:	681a      	ldr	r2, [r3, #0]
 80205dc:	683b      	ldr	r3, [r7, #0]
 80205de:	681b      	ldr	r3, [r3, #0]
 80205e0:	4619      	mov	r1, r3
 80205e2:	4610      	mov	r0, r2
 80205e4:	f000 fb39 	bl	8020c5a <TIM_ITRx_SetConfig>
      break;
 80205e8:	e000      	b.n	80205ec <HAL_TIM_ConfigClockSource+0x154>
      break;
 80205ea:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80205ec:	687b      	ldr	r3, [r7, #4]
 80205ee:	2201      	movs	r2, #1
 80205f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80205f4:	687b      	ldr	r3, [r7, #4]
 80205f6:	2200      	movs	r2, #0
 80205f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80205fc:	2300      	movs	r3, #0
}
 80205fe:	4618      	mov	r0, r3
 8020600:	3710      	adds	r7, #16
 8020602:	46bd      	mov	sp, r7
 8020604:	bd80      	pop	{r7, pc}

08020606 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8020606:	b480      	push	{r7}
 8020608:	b083      	sub	sp, #12
 802060a:	af00      	add	r7, sp, #0
 802060c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 802060e:	bf00      	nop
 8020610:	370c      	adds	r7, #12
 8020612:	46bd      	mov	sp, r7
 8020614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020618:	4770      	bx	lr

0802061a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 802061a:	b480      	push	{r7}
 802061c:	b083      	sub	sp, #12
 802061e:	af00      	add	r7, sp, #0
 8020620:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8020622:	bf00      	nop
 8020624:	370c      	adds	r7, #12
 8020626:	46bd      	mov	sp, r7
 8020628:	f85d 7b04 	ldr.w	r7, [sp], #4
 802062c:	4770      	bx	lr

0802062e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 802062e:	b480      	push	{r7}
 8020630:	b083      	sub	sp, #12
 8020632:	af00      	add	r7, sp, #0
 8020634:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8020636:	bf00      	nop
 8020638:	370c      	adds	r7, #12
 802063a:	46bd      	mov	sp, r7
 802063c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020640:	4770      	bx	lr

08020642 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8020642:	b480      	push	{r7}
 8020644:	b083      	sub	sp, #12
 8020646:	af00      	add	r7, sp, #0
 8020648:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 802064a:	bf00      	nop
 802064c:	370c      	adds	r7, #12
 802064e:	46bd      	mov	sp, r7
 8020650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020654:	4770      	bx	lr

08020656 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8020656:	b480      	push	{r7}
 8020658:	b083      	sub	sp, #12
 802065a:	af00      	add	r7, sp, #0
 802065c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 802065e:	bf00      	nop
 8020660:	370c      	adds	r7, #12
 8020662:	46bd      	mov	sp, r7
 8020664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020668:	4770      	bx	lr

0802066a <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 802066a:	b480      	push	{r7}
 802066c:	b083      	sub	sp, #12
 802066e:	af00      	add	r7, sp, #0
 8020670:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8020672:	bf00      	nop
 8020674:	370c      	adds	r7, #12
 8020676:	46bd      	mov	sp, r7
 8020678:	f85d 7b04 	ldr.w	r7, [sp], #4
 802067c:	4770      	bx	lr

0802067e <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 802067e:	b580      	push	{r7, lr}
 8020680:	b084      	sub	sp, #16
 8020682:	af00      	add	r7, sp, #0
 8020684:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8020686:	687b      	ldr	r3, [r7, #4]
 8020688:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802068a:	60fb      	str	r3, [r7, #12]

  htim->State = HAL_TIM_STATE_READY;
 802068c:	68fb      	ldr	r3, [r7, #12]
 802068e:	2201      	movs	r2, #1
 8020690:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8020694:	68f8      	ldr	r0, [r7, #12]
 8020696:	f7ff ffe8 	bl	802066a <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
}
 802069a:	bf00      	nop
 802069c:	3710      	adds	r7, #16
 802069e:	46bd      	mov	sp, r7
 80206a0:	bd80      	pop	{r7, pc}

080206a2 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 80206a2:	b580      	push	{r7, lr}
 80206a4:	b084      	sub	sp, #16
 80206a6:	af00      	add	r7, sp, #0
 80206a8:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80206aa:	687b      	ldr	r3, [r7, #4]
 80206ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80206ae:	60fb      	str	r3, [r7, #12]

  htim->State = HAL_TIM_STATE_READY;
 80206b0:	68fb      	ldr	r3, [r7, #12]
 80206b2:	2201      	movs	r2, #1
 80206b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80206b8:	68fb      	ldr	r3, [r7, #12]
 80206ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80206bc:	687a      	ldr	r2, [r7, #4]
 80206be:	429a      	cmp	r2, r3
 80206c0:	d103      	bne.n	80206ca <TIM_DMADelayPulseCplt+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80206c2:	68fb      	ldr	r3, [r7, #12]
 80206c4:	2201      	movs	r2, #1
 80206c6:	771a      	strb	r2, [r3, #28]
 80206c8:	e019      	b.n	80206fe <TIM_DMADelayPulseCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80206ca:	68fb      	ldr	r3, [r7, #12]
 80206cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80206ce:	687a      	ldr	r2, [r7, #4]
 80206d0:	429a      	cmp	r2, r3
 80206d2:	d103      	bne.n	80206dc <TIM_DMADelayPulseCplt+0x3a>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80206d4:	68fb      	ldr	r3, [r7, #12]
 80206d6:	2202      	movs	r2, #2
 80206d8:	771a      	strb	r2, [r3, #28]
 80206da:	e010      	b.n	80206fe <TIM_DMADelayPulseCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80206dc:	68fb      	ldr	r3, [r7, #12]
 80206de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80206e0:	687a      	ldr	r2, [r7, #4]
 80206e2:	429a      	cmp	r2, r3
 80206e4:	d103      	bne.n	80206ee <TIM_DMADelayPulseCplt+0x4c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80206e6:	68fb      	ldr	r3, [r7, #12]
 80206e8:	2204      	movs	r2, #4
 80206ea:	771a      	strb	r2, [r3, #28]
 80206ec:	e007      	b.n	80206fe <TIM_DMADelayPulseCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80206ee:	68fb      	ldr	r3, [r7, #12]
 80206f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80206f2:	687a      	ldr	r2, [r7, #4]
 80206f4:	429a      	cmp	r2, r3
 80206f6:	d102      	bne.n	80206fe <TIM_DMADelayPulseCplt+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80206f8:	68fb      	ldr	r3, [r7, #12]
 80206fa:	2208      	movs	r2, #8
 80206fc:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 80206fe:	68f8      	ldr	r0, [r7, #12]
 8020700:	f7fc fc4a 	bl	801cf98 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8020704:	68fb      	ldr	r3, [r7, #12]
 8020706:	2200      	movs	r2, #0
 8020708:	771a      	strb	r2, [r3, #28]
}
 802070a:	bf00      	nop
 802070c:	3710      	adds	r7, #16
 802070e:	46bd      	mov	sp, r7
 8020710:	bd80      	pop	{r7, pc}

08020712 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8020712:	b580      	push	{r7, lr}
 8020714:	b084      	sub	sp, #16
 8020716:	af00      	add	r7, sp, #0
 8020718:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 802071a:	687b      	ldr	r3, [r7, #4]
 802071c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802071e:	60fb      	str	r3, [r7, #12]

  htim->State = HAL_TIM_STATE_READY;
 8020720:	68fb      	ldr	r3, [r7, #12]
 8020722:	2201      	movs	r2, #1
 8020724:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8020728:	68fb      	ldr	r3, [r7, #12]
 802072a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802072c:	687a      	ldr	r2, [r7, #4]
 802072e:	429a      	cmp	r2, r3
 8020730:	d103      	bne.n	802073a <TIM_DMADelayPulseHalfCplt+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8020732:	68fb      	ldr	r3, [r7, #12]
 8020734:	2201      	movs	r2, #1
 8020736:	771a      	strb	r2, [r3, #28]
 8020738:	e019      	b.n	802076e <TIM_DMADelayPulseHalfCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 802073a:	68fb      	ldr	r3, [r7, #12]
 802073c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802073e:	687a      	ldr	r2, [r7, #4]
 8020740:	429a      	cmp	r2, r3
 8020742:	d103      	bne.n	802074c <TIM_DMADelayPulseHalfCplt+0x3a>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8020744:	68fb      	ldr	r3, [r7, #12]
 8020746:	2202      	movs	r2, #2
 8020748:	771a      	strb	r2, [r3, #28]
 802074a:	e010      	b.n	802076e <TIM_DMADelayPulseHalfCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 802074c:	68fb      	ldr	r3, [r7, #12]
 802074e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8020750:	687a      	ldr	r2, [r7, #4]
 8020752:	429a      	cmp	r2, r3
 8020754:	d103      	bne.n	802075e <TIM_DMADelayPulseHalfCplt+0x4c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8020756:	68fb      	ldr	r3, [r7, #12]
 8020758:	2204      	movs	r2, #4
 802075a:	771a      	strb	r2, [r3, #28]
 802075c:	e007      	b.n	802076e <TIM_DMADelayPulseHalfCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 802075e:	68fb      	ldr	r3, [r7, #12]
 8020760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020762:	687a      	ldr	r2, [r7, #4]
 8020764:	429a      	cmp	r2, r3
 8020766:	d102      	bne.n	802076e <TIM_DMADelayPulseHalfCplt+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8020768:	68fb      	ldr	r3, [r7, #12]
 802076a:	2208      	movs	r2, #8
 802076c:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 802076e:	68f8      	ldr	r0, [r7, #12]
 8020770:	f7ff ff67 	bl	8020642 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8020774:	68fb      	ldr	r3, [r7, #12]
 8020776:	2200      	movs	r2, #0
 8020778:	771a      	strb	r2, [r3, #28]
}
 802077a:	bf00      	nop
 802077c:	3710      	adds	r7, #16
 802077e:	46bd      	mov	sp, r7
 8020780:	bd80      	pop	{r7, pc}
	...

08020784 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8020784:	b480      	push	{r7}
 8020786:	b085      	sub	sp, #20
 8020788:	af00      	add	r7, sp, #0
 802078a:	6078      	str	r0, [r7, #4]
 802078c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 802078e:	687b      	ldr	r3, [r7, #4]
 8020790:	681b      	ldr	r3, [r3, #0]
 8020792:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8020794:	687b      	ldr	r3, [r7, #4]
 8020796:	4a34      	ldr	r2, [pc, #208]	; (8020868 <TIM_Base_SetConfig+0xe4>)
 8020798:	4293      	cmp	r3, r2
 802079a:	d00f      	beq.n	80207bc <TIM_Base_SetConfig+0x38>
 802079c:	687b      	ldr	r3, [r7, #4]
 802079e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80207a2:	d00b      	beq.n	80207bc <TIM_Base_SetConfig+0x38>
 80207a4:	687b      	ldr	r3, [r7, #4]
 80207a6:	4a31      	ldr	r2, [pc, #196]	; (802086c <TIM_Base_SetConfig+0xe8>)
 80207a8:	4293      	cmp	r3, r2
 80207aa:	d007      	beq.n	80207bc <TIM_Base_SetConfig+0x38>
 80207ac:	687b      	ldr	r3, [r7, #4]
 80207ae:	4a30      	ldr	r2, [pc, #192]	; (8020870 <TIM_Base_SetConfig+0xec>)
 80207b0:	4293      	cmp	r3, r2
 80207b2:	d003      	beq.n	80207bc <TIM_Base_SetConfig+0x38>
 80207b4:	687b      	ldr	r3, [r7, #4]
 80207b6:	4a2f      	ldr	r2, [pc, #188]	; (8020874 <TIM_Base_SetConfig+0xf0>)
 80207b8:	4293      	cmp	r3, r2
 80207ba:	d108      	bne.n	80207ce <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80207bc:	68fb      	ldr	r3, [r7, #12]
 80207be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80207c2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80207c4:	683b      	ldr	r3, [r7, #0]
 80207c6:	685b      	ldr	r3, [r3, #4]
 80207c8:	68fa      	ldr	r2, [r7, #12]
 80207ca:	4313      	orrs	r3, r2
 80207cc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80207ce:	687b      	ldr	r3, [r7, #4]
 80207d0:	4a25      	ldr	r2, [pc, #148]	; (8020868 <TIM_Base_SetConfig+0xe4>)
 80207d2:	4293      	cmp	r3, r2
 80207d4:	d01b      	beq.n	802080e <TIM_Base_SetConfig+0x8a>
 80207d6:	687b      	ldr	r3, [r7, #4]
 80207d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80207dc:	d017      	beq.n	802080e <TIM_Base_SetConfig+0x8a>
 80207de:	687b      	ldr	r3, [r7, #4]
 80207e0:	4a22      	ldr	r2, [pc, #136]	; (802086c <TIM_Base_SetConfig+0xe8>)
 80207e2:	4293      	cmp	r3, r2
 80207e4:	d013      	beq.n	802080e <TIM_Base_SetConfig+0x8a>
 80207e6:	687b      	ldr	r3, [r7, #4]
 80207e8:	4a21      	ldr	r2, [pc, #132]	; (8020870 <TIM_Base_SetConfig+0xec>)
 80207ea:	4293      	cmp	r3, r2
 80207ec:	d00f      	beq.n	802080e <TIM_Base_SetConfig+0x8a>
 80207ee:	687b      	ldr	r3, [r7, #4]
 80207f0:	4a20      	ldr	r2, [pc, #128]	; (8020874 <TIM_Base_SetConfig+0xf0>)
 80207f2:	4293      	cmp	r3, r2
 80207f4:	d00b      	beq.n	802080e <TIM_Base_SetConfig+0x8a>
 80207f6:	687b      	ldr	r3, [r7, #4]
 80207f8:	4a1f      	ldr	r2, [pc, #124]	; (8020878 <TIM_Base_SetConfig+0xf4>)
 80207fa:	4293      	cmp	r3, r2
 80207fc:	d007      	beq.n	802080e <TIM_Base_SetConfig+0x8a>
 80207fe:	687b      	ldr	r3, [r7, #4]
 8020800:	4a1e      	ldr	r2, [pc, #120]	; (802087c <TIM_Base_SetConfig+0xf8>)
 8020802:	4293      	cmp	r3, r2
 8020804:	d003      	beq.n	802080e <TIM_Base_SetConfig+0x8a>
 8020806:	687b      	ldr	r3, [r7, #4]
 8020808:	4a1d      	ldr	r2, [pc, #116]	; (8020880 <TIM_Base_SetConfig+0xfc>)
 802080a:	4293      	cmp	r3, r2
 802080c:	d108      	bne.n	8020820 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 802080e:	68fb      	ldr	r3, [r7, #12]
 8020810:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8020814:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8020816:	683b      	ldr	r3, [r7, #0]
 8020818:	68db      	ldr	r3, [r3, #12]
 802081a:	68fa      	ldr	r2, [r7, #12]
 802081c:	4313      	orrs	r3, r2
 802081e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8020820:	68fb      	ldr	r3, [r7, #12]
 8020822:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8020826:	683b      	ldr	r3, [r7, #0]
 8020828:	695b      	ldr	r3, [r3, #20]
 802082a:	4313      	orrs	r3, r2
 802082c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 802082e:	687b      	ldr	r3, [r7, #4]
 8020830:	68fa      	ldr	r2, [r7, #12]
 8020832:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8020834:	683b      	ldr	r3, [r7, #0]
 8020836:	689a      	ldr	r2, [r3, #8]
 8020838:	687b      	ldr	r3, [r7, #4]
 802083a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 802083c:	683b      	ldr	r3, [r7, #0]
 802083e:	681a      	ldr	r2, [r3, #0]
 8020840:	687b      	ldr	r3, [r7, #4]
 8020842:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8020844:	687b      	ldr	r3, [r7, #4]
 8020846:	4a08      	ldr	r2, [pc, #32]	; (8020868 <TIM_Base_SetConfig+0xe4>)
 8020848:	4293      	cmp	r3, r2
 802084a:	d103      	bne.n	8020854 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 802084c:	683b      	ldr	r3, [r7, #0]
 802084e:	691a      	ldr	r2, [r3, #16]
 8020850:	687b      	ldr	r3, [r7, #4]
 8020852:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8020854:	687b      	ldr	r3, [r7, #4]
 8020856:	2201      	movs	r2, #1
 8020858:	615a      	str	r2, [r3, #20]
}
 802085a:	bf00      	nop
 802085c:	3714      	adds	r7, #20
 802085e:	46bd      	mov	sp, r7
 8020860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020864:	4770      	bx	lr
 8020866:	bf00      	nop
 8020868:	40010000 	.word	0x40010000
 802086c:	40000400 	.word	0x40000400
 8020870:	40000800 	.word	0x40000800
 8020874:	40000c00 	.word	0x40000c00
 8020878:	40014000 	.word	0x40014000
 802087c:	40014400 	.word	0x40014400
 8020880:	40014800 	.word	0x40014800

08020884 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8020884:	b480      	push	{r7}
 8020886:	b087      	sub	sp, #28
 8020888:	af00      	add	r7, sp, #0
 802088a:	6078      	str	r0, [r7, #4]
 802088c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 802088e:	687b      	ldr	r3, [r7, #4]
 8020890:	6a1b      	ldr	r3, [r3, #32]
 8020892:	f023 0201 	bic.w	r2, r3, #1
 8020896:	687b      	ldr	r3, [r7, #4]
 8020898:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 802089a:	687b      	ldr	r3, [r7, #4]
 802089c:	6a1b      	ldr	r3, [r3, #32]
 802089e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80208a0:	687b      	ldr	r3, [r7, #4]
 80208a2:	685b      	ldr	r3, [r3, #4]
 80208a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80208a6:	687b      	ldr	r3, [r7, #4]
 80208a8:	699b      	ldr	r3, [r3, #24]
 80208aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80208ac:	68fb      	ldr	r3, [r7, #12]
 80208ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80208b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80208b4:	68fb      	ldr	r3, [r7, #12]
 80208b6:	f023 0303 	bic.w	r3, r3, #3
 80208ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80208bc:	683b      	ldr	r3, [r7, #0]
 80208be:	681b      	ldr	r3, [r3, #0]
 80208c0:	68fa      	ldr	r2, [r7, #12]
 80208c2:	4313      	orrs	r3, r2
 80208c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80208c6:	697b      	ldr	r3, [r7, #20]
 80208c8:	f023 0302 	bic.w	r3, r3, #2
 80208cc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80208ce:	683b      	ldr	r3, [r7, #0]
 80208d0:	689b      	ldr	r3, [r3, #8]
 80208d2:	697a      	ldr	r2, [r7, #20]
 80208d4:	4313      	orrs	r3, r2
 80208d6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80208d8:	687b      	ldr	r3, [r7, #4]
 80208da:	4a1c      	ldr	r2, [pc, #112]	; (802094c <TIM_OC1_SetConfig+0xc8>)
 80208dc:	4293      	cmp	r3, r2
 80208de:	d10c      	bne.n	80208fa <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80208e0:	697b      	ldr	r3, [r7, #20]
 80208e2:	f023 0308 	bic.w	r3, r3, #8
 80208e6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80208e8:	683b      	ldr	r3, [r7, #0]
 80208ea:	68db      	ldr	r3, [r3, #12]
 80208ec:	697a      	ldr	r2, [r7, #20]
 80208ee:	4313      	orrs	r3, r2
 80208f0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80208f2:	697b      	ldr	r3, [r7, #20]
 80208f4:	f023 0304 	bic.w	r3, r3, #4
 80208f8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80208fa:	687b      	ldr	r3, [r7, #4]
 80208fc:	4a13      	ldr	r2, [pc, #76]	; (802094c <TIM_OC1_SetConfig+0xc8>)
 80208fe:	4293      	cmp	r3, r2
 8020900:	d111      	bne.n	8020926 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8020902:	693b      	ldr	r3, [r7, #16]
 8020904:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8020908:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 802090a:	693b      	ldr	r3, [r7, #16]
 802090c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8020910:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8020912:	683b      	ldr	r3, [r7, #0]
 8020914:	695b      	ldr	r3, [r3, #20]
 8020916:	693a      	ldr	r2, [r7, #16]
 8020918:	4313      	orrs	r3, r2
 802091a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 802091c:	683b      	ldr	r3, [r7, #0]
 802091e:	699b      	ldr	r3, [r3, #24]
 8020920:	693a      	ldr	r2, [r7, #16]
 8020922:	4313      	orrs	r3, r2
 8020924:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8020926:	687b      	ldr	r3, [r7, #4]
 8020928:	693a      	ldr	r2, [r7, #16]
 802092a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 802092c:	687b      	ldr	r3, [r7, #4]
 802092e:	68fa      	ldr	r2, [r7, #12]
 8020930:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8020932:	683b      	ldr	r3, [r7, #0]
 8020934:	685a      	ldr	r2, [r3, #4]
 8020936:	687b      	ldr	r3, [r7, #4]
 8020938:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 802093a:	687b      	ldr	r3, [r7, #4]
 802093c:	697a      	ldr	r2, [r7, #20]
 802093e:	621a      	str	r2, [r3, #32]
}
 8020940:	bf00      	nop
 8020942:	371c      	adds	r7, #28
 8020944:	46bd      	mov	sp, r7
 8020946:	f85d 7b04 	ldr.w	r7, [sp], #4
 802094a:	4770      	bx	lr
 802094c:	40010000 	.word	0x40010000

08020950 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8020950:	b480      	push	{r7}
 8020952:	b087      	sub	sp, #28
 8020954:	af00      	add	r7, sp, #0
 8020956:	6078      	str	r0, [r7, #4]
 8020958:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 802095a:	687b      	ldr	r3, [r7, #4]
 802095c:	6a1b      	ldr	r3, [r3, #32]
 802095e:	f023 0210 	bic.w	r2, r3, #16
 8020962:	687b      	ldr	r3, [r7, #4]
 8020964:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8020966:	687b      	ldr	r3, [r7, #4]
 8020968:	6a1b      	ldr	r3, [r3, #32]
 802096a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 802096c:	687b      	ldr	r3, [r7, #4]
 802096e:	685b      	ldr	r3, [r3, #4]
 8020970:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8020972:	687b      	ldr	r3, [r7, #4]
 8020974:	699b      	ldr	r3, [r3, #24]
 8020976:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8020978:	68fb      	ldr	r3, [r7, #12]
 802097a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 802097e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8020980:	68fb      	ldr	r3, [r7, #12]
 8020982:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8020986:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8020988:	683b      	ldr	r3, [r7, #0]
 802098a:	681b      	ldr	r3, [r3, #0]
 802098c:	021b      	lsls	r3, r3, #8
 802098e:	68fa      	ldr	r2, [r7, #12]
 8020990:	4313      	orrs	r3, r2
 8020992:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8020994:	697b      	ldr	r3, [r7, #20]
 8020996:	f023 0320 	bic.w	r3, r3, #32
 802099a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 802099c:	683b      	ldr	r3, [r7, #0]
 802099e:	689b      	ldr	r3, [r3, #8]
 80209a0:	011b      	lsls	r3, r3, #4
 80209a2:	697a      	ldr	r2, [r7, #20]
 80209a4:	4313      	orrs	r3, r2
 80209a6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80209a8:	687b      	ldr	r3, [r7, #4]
 80209aa:	4a1e      	ldr	r2, [pc, #120]	; (8020a24 <TIM_OC2_SetConfig+0xd4>)
 80209ac:	4293      	cmp	r3, r2
 80209ae:	d10d      	bne.n	80209cc <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80209b0:	697b      	ldr	r3, [r7, #20]
 80209b2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80209b6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80209b8:	683b      	ldr	r3, [r7, #0]
 80209ba:	68db      	ldr	r3, [r3, #12]
 80209bc:	011b      	lsls	r3, r3, #4
 80209be:	697a      	ldr	r2, [r7, #20]
 80209c0:	4313      	orrs	r3, r2
 80209c2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80209c4:	697b      	ldr	r3, [r7, #20]
 80209c6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80209ca:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80209cc:	687b      	ldr	r3, [r7, #4]
 80209ce:	4a15      	ldr	r2, [pc, #84]	; (8020a24 <TIM_OC2_SetConfig+0xd4>)
 80209d0:	4293      	cmp	r3, r2
 80209d2:	d113      	bne.n	80209fc <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80209d4:	693b      	ldr	r3, [r7, #16]
 80209d6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80209da:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80209dc:	693b      	ldr	r3, [r7, #16]
 80209de:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80209e2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80209e4:	683b      	ldr	r3, [r7, #0]
 80209e6:	695b      	ldr	r3, [r3, #20]
 80209e8:	009b      	lsls	r3, r3, #2
 80209ea:	693a      	ldr	r2, [r7, #16]
 80209ec:	4313      	orrs	r3, r2
 80209ee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80209f0:	683b      	ldr	r3, [r7, #0]
 80209f2:	699b      	ldr	r3, [r3, #24]
 80209f4:	009b      	lsls	r3, r3, #2
 80209f6:	693a      	ldr	r2, [r7, #16]
 80209f8:	4313      	orrs	r3, r2
 80209fa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80209fc:	687b      	ldr	r3, [r7, #4]
 80209fe:	693a      	ldr	r2, [r7, #16]
 8020a00:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8020a02:	687b      	ldr	r3, [r7, #4]
 8020a04:	68fa      	ldr	r2, [r7, #12]
 8020a06:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8020a08:	683b      	ldr	r3, [r7, #0]
 8020a0a:	685a      	ldr	r2, [r3, #4]
 8020a0c:	687b      	ldr	r3, [r7, #4]
 8020a0e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8020a10:	687b      	ldr	r3, [r7, #4]
 8020a12:	697a      	ldr	r2, [r7, #20]
 8020a14:	621a      	str	r2, [r3, #32]
}
 8020a16:	bf00      	nop
 8020a18:	371c      	adds	r7, #28
 8020a1a:	46bd      	mov	sp, r7
 8020a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020a20:	4770      	bx	lr
 8020a22:	bf00      	nop
 8020a24:	40010000 	.word	0x40010000

08020a28 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8020a28:	b480      	push	{r7}
 8020a2a:	b087      	sub	sp, #28
 8020a2c:	af00      	add	r7, sp, #0
 8020a2e:	6078      	str	r0, [r7, #4]
 8020a30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8020a32:	687b      	ldr	r3, [r7, #4]
 8020a34:	6a1b      	ldr	r3, [r3, #32]
 8020a36:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8020a3a:	687b      	ldr	r3, [r7, #4]
 8020a3c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8020a3e:	687b      	ldr	r3, [r7, #4]
 8020a40:	6a1b      	ldr	r3, [r3, #32]
 8020a42:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8020a44:	687b      	ldr	r3, [r7, #4]
 8020a46:	685b      	ldr	r3, [r3, #4]
 8020a48:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8020a4a:	687b      	ldr	r3, [r7, #4]
 8020a4c:	69db      	ldr	r3, [r3, #28]
 8020a4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8020a50:	68fb      	ldr	r3, [r7, #12]
 8020a52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8020a56:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8020a58:	68fb      	ldr	r3, [r7, #12]
 8020a5a:	f023 0303 	bic.w	r3, r3, #3
 8020a5e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8020a60:	683b      	ldr	r3, [r7, #0]
 8020a62:	681b      	ldr	r3, [r3, #0]
 8020a64:	68fa      	ldr	r2, [r7, #12]
 8020a66:	4313      	orrs	r3, r2
 8020a68:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8020a6a:	697b      	ldr	r3, [r7, #20]
 8020a6c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8020a70:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8020a72:	683b      	ldr	r3, [r7, #0]
 8020a74:	689b      	ldr	r3, [r3, #8]
 8020a76:	021b      	lsls	r3, r3, #8
 8020a78:	697a      	ldr	r2, [r7, #20]
 8020a7a:	4313      	orrs	r3, r2
 8020a7c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8020a7e:	687b      	ldr	r3, [r7, #4]
 8020a80:	4a1d      	ldr	r2, [pc, #116]	; (8020af8 <TIM_OC3_SetConfig+0xd0>)
 8020a82:	4293      	cmp	r3, r2
 8020a84:	d10d      	bne.n	8020aa2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8020a86:	697b      	ldr	r3, [r7, #20]
 8020a88:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8020a8c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8020a8e:	683b      	ldr	r3, [r7, #0]
 8020a90:	68db      	ldr	r3, [r3, #12]
 8020a92:	021b      	lsls	r3, r3, #8
 8020a94:	697a      	ldr	r2, [r7, #20]
 8020a96:	4313      	orrs	r3, r2
 8020a98:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8020a9a:	697b      	ldr	r3, [r7, #20]
 8020a9c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8020aa0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8020aa2:	687b      	ldr	r3, [r7, #4]
 8020aa4:	4a14      	ldr	r2, [pc, #80]	; (8020af8 <TIM_OC3_SetConfig+0xd0>)
 8020aa6:	4293      	cmp	r3, r2
 8020aa8:	d113      	bne.n	8020ad2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8020aaa:	693b      	ldr	r3, [r7, #16]
 8020aac:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8020ab0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8020ab2:	693b      	ldr	r3, [r7, #16]
 8020ab4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8020ab8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8020aba:	683b      	ldr	r3, [r7, #0]
 8020abc:	695b      	ldr	r3, [r3, #20]
 8020abe:	011b      	lsls	r3, r3, #4
 8020ac0:	693a      	ldr	r2, [r7, #16]
 8020ac2:	4313      	orrs	r3, r2
 8020ac4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8020ac6:	683b      	ldr	r3, [r7, #0]
 8020ac8:	699b      	ldr	r3, [r3, #24]
 8020aca:	011b      	lsls	r3, r3, #4
 8020acc:	693a      	ldr	r2, [r7, #16]
 8020ace:	4313      	orrs	r3, r2
 8020ad0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8020ad2:	687b      	ldr	r3, [r7, #4]
 8020ad4:	693a      	ldr	r2, [r7, #16]
 8020ad6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8020ad8:	687b      	ldr	r3, [r7, #4]
 8020ada:	68fa      	ldr	r2, [r7, #12]
 8020adc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8020ade:	683b      	ldr	r3, [r7, #0]
 8020ae0:	685a      	ldr	r2, [r3, #4]
 8020ae2:	687b      	ldr	r3, [r7, #4]
 8020ae4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8020ae6:	687b      	ldr	r3, [r7, #4]
 8020ae8:	697a      	ldr	r2, [r7, #20]
 8020aea:	621a      	str	r2, [r3, #32]
}
 8020aec:	bf00      	nop
 8020aee:	371c      	adds	r7, #28
 8020af0:	46bd      	mov	sp, r7
 8020af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020af6:	4770      	bx	lr
 8020af8:	40010000 	.word	0x40010000

08020afc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8020afc:	b480      	push	{r7}
 8020afe:	b087      	sub	sp, #28
 8020b00:	af00      	add	r7, sp, #0
 8020b02:	6078      	str	r0, [r7, #4]
 8020b04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8020b06:	687b      	ldr	r3, [r7, #4]
 8020b08:	6a1b      	ldr	r3, [r3, #32]
 8020b0a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8020b0e:	687b      	ldr	r3, [r7, #4]
 8020b10:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8020b12:	687b      	ldr	r3, [r7, #4]
 8020b14:	6a1b      	ldr	r3, [r3, #32]
 8020b16:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8020b18:	687b      	ldr	r3, [r7, #4]
 8020b1a:	685b      	ldr	r3, [r3, #4]
 8020b1c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8020b1e:	687b      	ldr	r3, [r7, #4]
 8020b20:	69db      	ldr	r3, [r3, #28]
 8020b22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8020b24:	68fb      	ldr	r3, [r7, #12]
 8020b26:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8020b2a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8020b2c:	68fb      	ldr	r3, [r7, #12]
 8020b2e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8020b32:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8020b34:	683b      	ldr	r3, [r7, #0]
 8020b36:	681b      	ldr	r3, [r3, #0]
 8020b38:	021b      	lsls	r3, r3, #8
 8020b3a:	68fa      	ldr	r2, [r7, #12]
 8020b3c:	4313      	orrs	r3, r2
 8020b3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8020b40:	693b      	ldr	r3, [r7, #16]
 8020b42:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8020b46:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8020b48:	683b      	ldr	r3, [r7, #0]
 8020b4a:	689b      	ldr	r3, [r3, #8]
 8020b4c:	031b      	lsls	r3, r3, #12
 8020b4e:	693a      	ldr	r2, [r7, #16]
 8020b50:	4313      	orrs	r3, r2
 8020b52:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8020b54:	687b      	ldr	r3, [r7, #4]
 8020b56:	4a10      	ldr	r2, [pc, #64]	; (8020b98 <TIM_OC4_SetConfig+0x9c>)
 8020b58:	4293      	cmp	r3, r2
 8020b5a:	d109      	bne.n	8020b70 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8020b5c:	697b      	ldr	r3, [r7, #20]
 8020b5e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8020b62:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8020b64:	683b      	ldr	r3, [r7, #0]
 8020b66:	695b      	ldr	r3, [r3, #20]
 8020b68:	019b      	lsls	r3, r3, #6
 8020b6a:	697a      	ldr	r2, [r7, #20]
 8020b6c:	4313      	orrs	r3, r2
 8020b6e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8020b70:	687b      	ldr	r3, [r7, #4]
 8020b72:	697a      	ldr	r2, [r7, #20]
 8020b74:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8020b76:	687b      	ldr	r3, [r7, #4]
 8020b78:	68fa      	ldr	r2, [r7, #12]
 8020b7a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8020b7c:	683b      	ldr	r3, [r7, #0]
 8020b7e:	685a      	ldr	r2, [r3, #4]
 8020b80:	687b      	ldr	r3, [r7, #4]
 8020b82:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8020b84:	687b      	ldr	r3, [r7, #4]
 8020b86:	693a      	ldr	r2, [r7, #16]
 8020b88:	621a      	str	r2, [r3, #32]
}
 8020b8a:	bf00      	nop
 8020b8c:	371c      	adds	r7, #28
 8020b8e:	46bd      	mov	sp, r7
 8020b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020b94:	4770      	bx	lr
 8020b96:	bf00      	nop
 8020b98:	40010000 	.word	0x40010000

08020b9c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8020b9c:	b480      	push	{r7}
 8020b9e:	b087      	sub	sp, #28
 8020ba0:	af00      	add	r7, sp, #0
 8020ba2:	60f8      	str	r0, [r7, #12]
 8020ba4:	60b9      	str	r1, [r7, #8]
 8020ba6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8020ba8:	68fb      	ldr	r3, [r7, #12]
 8020baa:	6a1b      	ldr	r3, [r3, #32]
 8020bac:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8020bae:	68fb      	ldr	r3, [r7, #12]
 8020bb0:	6a1b      	ldr	r3, [r3, #32]
 8020bb2:	f023 0201 	bic.w	r2, r3, #1
 8020bb6:	68fb      	ldr	r3, [r7, #12]
 8020bb8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8020bba:	68fb      	ldr	r3, [r7, #12]
 8020bbc:	699b      	ldr	r3, [r3, #24]
 8020bbe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8020bc0:	693b      	ldr	r3, [r7, #16]
 8020bc2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8020bc6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8020bc8:	687b      	ldr	r3, [r7, #4]
 8020bca:	011b      	lsls	r3, r3, #4
 8020bcc:	693a      	ldr	r2, [r7, #16]
 8020bce:	4313      	orrs	r3, r2
 8020bd0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8020bd2:	697b      	ldr	r3, [r7, #20]
 8020bd4:	f023 030a 	bic.w	r3, r3, #10
 8020bd8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8020bda:	697a      	ldr	r2, [r7, #20]
 8020bdc:	68bb      	ldr	r3, [r7, #8]
 8020bde:	4313      	orrs	r3, r2
 8020be0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8020be2:	68fb      	ldr	r3, [r7, #12]
 8020be4:	693a      	ldr	r2, [r7, #16]
 8020be6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8020be8:	68fb      	ldr	r3, [r7, #12]
 8020bea:	697a      	ldr	r2, [r7, #20]
 8020bec:	621a      	str	r2, [r3, #32]
}
 8020bee:	bf00      	nop
 8020bf0:	371c      	adds	r7, #28
 8020bf2:	46bd      	mov	sp, r7
 8020bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020bf8:	4770      	bx	lr

08020bfa <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8020bfa:	b480      	push	{r7}
 8020bfc:	b087      	sub	sp, #28
 8020bfe:	af00      	add	r7, sp, #0
 8020c00:	60f8      	str	r0, [r7, #12]
 8020c02:	60b9      	str	r1, [r7, #8]
 8020c04:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8020c06:	68fb      	ldr	r3, [r7, #12]
 8020c08:	6a1b      	ldr	r3, [r3, #32]
 8020c0a:	f023 0210 	bic.w	r2, r3, #16
 8020c0e:	68fb      	ldr	r3, [r7, #12]
 8020c10:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8020c12:	68fb      	ldr	r3, [r7, #12]
 8020c14:	699b      	ldr	r3, [r3, #24]
 8020c16:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8020c18:	68fb      	ldr	r3, [r7, #12]
 8020c1a:	6a1b      	ldr	r3, [r3, #32]
 8020c1c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8020c1e:	697b      	ldr	r3, [r7, #20]
 8020c20:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8020c24:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8020c26:	687b      	ldr	r3, [r7, #4]
 8020c28:	031b      	lsls	r3, r3, #12
 8020c2a:	697a      	ldr	r2, [r7, #20]
 8020c2c:	4313      	orrs	r3, r2
 8020c2e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8020c30:	693b      	ldr	r3, [r7, #16]
 8020c32:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8020c36:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8020c38:	68bb      	ldr	r3, [r7, #8]
 8020c3a:	011b      	lsls	r3, r3, #4
 8020c3c:	693a      	ldr	r2, [r7, #16]
 8020c3e:	4313      	orrs	r3, r2
 8020c40:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8020c42:	68fb      	ldr	r3, [r7, #12]
 8020c44:	697a      	ldr	r2, [r7, #20]
 8020c46:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8020c48:	68fb      	ldr	r3, [r7, #12]
 8020c4a:	693a      	ldr	r2, [r7, #16]
 8020c4c:	621a      	str	r2, [r3, #32]
}
 8020c4e:	bf00      	nop
 8020c50:	371c      	adds	r7, #28
 8020c52:	46bd      	mov	sp, r7
 8020c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020c58:	4770      	bx	lr

08020c5a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8020c5a:	b480      	push	{r7}
 8020c5c:	b085      	sub	sp, #20
 8020c5e:	af00      	add	r7, sp, #0
 8020c60:	6078      	str	r0, [r7, #4]
 8020c62:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8020c64:	687b      	ldr	r3, [r7, #4]
 8020c66:	689b      	ldr	r3, [r3, #8]
 8020c68:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8020c6a:	68fb      	ldr	r3, [r7, #12]
 8020c6c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8020c70:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8020c72:	683a      	ldr	r2, [r7, #0]
 8020c74:	68fb      	ldr	r3, [r7, #12]
 8020c76:	4313      	orrs	r3, r2
 8020c78:	f043 0307 	orr.w	r3, r3, #7
 8020c7c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8020c7e:	687b      	ldr	r3, [r7, #4]
 8020c80:	68fa      	ldr	r2, [r7, #12]
 8020c82:	609a      	str	r2, [r3, #8]
}
 8020c84:	bf00      	nop
 8020c86:	3714      	adds	r7, #20
 8020c88:	46bd      	mov	sp, r7
 8020c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020c8e:	4770      	bx	lr

08020c90 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8020c90:	b480      	push	{r7}
 8020c92:	b087      	sub	sp, #28
 8020c94:	af00      	add	r7, sp, #0
 8020c96:	60f8      	str	r0, [r7, #12]
 8020c98:	60b9      	str	r1, [r7, #8]
 8020c9a:	607a      	str	r2, [r7, #4]
 8020c9c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8020c9e:	68fb      	ldr	r3, [r7, #12]
 8020ca0:	689b      	ldr	r3, [r3, #8]
 8020ca2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8020ca4:	697b      	ldr	r3, [r7, #20]
 8020ca6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8020caa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8020cac:	683b      	ldr	r3, [r7, #0]
 8020cae:	021a      	lsls	r2, r3, #8
 8020cb0:	687b      	ldr	r3, [r7, #4]
 8020cb2:	431a      	orrs	r2, r3
 8020cb4:	68bb      	ldr	r3, [r7, #8]
 8020cb6:	4313      	orrs	r3, r2
 8020cb8:	697a      	ldr	r2, [r7, #20]
 8020cba:	4313      	orrs	r3, r2
 8020cbc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8020cbe:	68fb      	ldr	r3, [r7, #12]
 8020cc0:	697a      	ldr	r2, [r7, #20]
 8020cc2:	609a      	str	r2, [r3, #8]
}
 8020cc4:	bf00      	nop
 8020cc6:	371c      	adds	r7, #28
 8020cc8:	46bd      	mov	sp, r7
 8020cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020cce:	4770      	bx	lr

08020cd0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8020cd0:	b480      	push	{r7}
 8020cd2:	b087      	sub	sp, #28
 8020cd4:	af00      	add	r7, sp, #0
 8020cd6:	60f8      	str	r0, [r7, #12]
 8020cd8:	60b9      	str	r1, [r7, #8]
 8020cda:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8020cdc:	68bb      	ldr	r3, [r7, #8]
 8020cde:	f003 031f 	and.w	r3, r3, #31
 8020ce2:	2201      	movs	r2, #1
 8020ce4:	fa02 f303 	lsl.w	r3, r2, r3
 8020ce8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8020cea:	68fb      	ldr	r3, [r7, #12]
 8020cec:	6a1a      	ldr	r2, [r3, #32]
 8020cee:	697b      	ldr	r3, [r7, #20]
 8020cf0:	43db      	mvns	r3, r3
 8020cf2:	401a      	ands	r2, r3
 8020cf4:	68fb      	ldr	r3, [r7, #12]
 8020cf6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8020cf8:	68fb      	ldr	r3, [r7, #12]
 8020cfa:	6a1a      	ldr	r2, [r3, #32]
 8020cfc:	68bb      	ldr	r3, [r7, #8]
 8020cfe:	f003 031f 	and.w	r3, r3, #31
 8020d02:	6879      	ldr	r1, [r7, #4]
 8020d04:	fa01 f303 	lsl.w	r3, r1, r3
 8020d08:	431a      	orrs	r2, r3
 8020d0a:	68fb      	ldr	r3, [r7, #12]
 8020d0c:	621a      	str	r2, [r3, #32]
}
 8020d0e:	bf00      	nop
 8020d10:	371c      	adds	r7, #28
 8020d12:	46bd      	mov	sp, r7
 8020d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020d18:	4770      	bx	lr
	...

08020d1c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8020d1c:	b480      	push	{r7}
 8020d1e:	b085      	sub	sp, #20
 8020d20:	af00      	add	r7, sp, #0
 8020d22:	6078      	str	r0, [r7, #4]
 8020d24:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8020d26:	687b      	ldr	r3, [r7, #4]
 8020d28:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8020d2c:	2b01      	cmp	r3, #1
 8020d2e:	d101      	bne.n	8020d34 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8020d30:	2302      	movs	r3, #2
 8020d32:	e050      	b.n	8020dd6 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8020d34:	687b      	ldr	r3, [r7, #4]
 8020d36:	2201      	movs	r2, #1
 8020d38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8020d3c:	687b      	ldr	r3, [r7, #4]
 8020d3e:	2202      	movs	r2, #2
 8020d40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8020d44:	687b      	ldr	r3, [r7, #4]
 8020d46:	681b      	ldr	r3, [r3, #0]
 8020d48:	685b      	ldr	r3, [r3, #4]
 8020d4a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8020d4c:	687b      	ldr	r3, [r7, #4]
 8020d4e:	681b      	ldr	r3, [r3, #0]
 8020d50:	689b      	ldr	r3, [r3, #8]
 8020d52:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8020d54:	68fb      	ldr	r3, [r7, #12]
 8020d56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8020d5a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8020d5c:	683b      	ldr	r3, [r7, #0]
 8020d5e:	681b      	ldr	r3, [r3, #0]
 8020d60:	68fa      	ldr	r2, [r7, #12]
 8020d62:	4313      	orrs	r3, r2
 8020d64:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8020d66:	687b      	ldr	r3, [r7, #4]
 8020d68:	681b      	ldr	r3, [r3, #0]
 8020d6a:	68fa      	ldr	r2, [r7, #12]
 8020d6c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8020d6e:	687b      	ldr	r3, [r7, #4]
 8020d70:	681b      	ldr	r3, [r3, #0]
 8020d72:	4a1c      	ldr	r2, [pc, #112]	; (8020de4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8020d74:	4293      	cmp	r3, r2
 8020d76:	d018      	beq.n	8020daa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8020d78:	687b      	ldr	r3, [r7, #4]
 8020d7a:	681b      	ldr	r3, [r3, #0]
 8020d7c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8020d80:	d013      	beq.n	8020daa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8020d82:	687b      	ldr	r3, [r7, #4]
 8020d84:	681b      	ldr	r3, [r3, #0]
 8020d86:	4a18      	ldr	r2, [pc, #96]	; (8020de8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8020d88:	4293      	cmp	r3, r2
 8020d8a:	d00e      	beq.n	8020daa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8020d8c:	687b      	ldr	r3, [r7, #4]
 8020d8e:	681b      	ldr	r3, [r3, #0]
 8020d90:	4a16      	ldr	r2, [pc, #88]	; (8020dec <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8020d92:	4293      	cmp	r3, r2
 8020d94:	d009      	beq.n	8020daa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8020d96:	687b      	ldr	r3, [r7, #4]
 8020d98:	681b      	ldr	r3, [r3, #0]
 8020d9a:	4a15      	ldr	r2, [pc, #84]	; (8020df0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8020d9c:	4293      	cmp	r3, r2
 8020d9e:	d004      	beq.n	8020daa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8020da0:	687b      	ldr	r3, [r7, #4]
 8020da2:	681b      	ldr	r3, [r3, #0]
 8020da4:	4a13      	ldr	r2, [pc, #76]	; (8020df4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8020da6:	4293      	cmp	r3, r2
 8020da8:	d10c      	bne.n	8020dc4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8020daa:	68bb      	ldr	r3, [r7, #8]
 8020dac:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8020db0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8020db2:	683b      	ldr	r3, [r7, #0]
 8020db4:	685b      	ldr	r3, [r3, #4]
 8020db6:	68ba      	ldr	r2, [r7, #8]
 8020db8:	4313      	orrs	r3, r2
 8020dba:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8020dbc:	687b      	ldr	r3, [r7, #4]
 8020dbe:	681b      	ldr	r3, [r3, #0]
 8020dc0:	68ba      	ldr	r2, [r7, #8]
 8020dc2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8020dc4:	687b      	ldr	r3, [r7, #4]
 8020dc6:	2201      	movs	r2, #1
 8020dc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8020dcc:	687b      	ldr	r3, [r7, #4]
 8020dce:	2200      	movs	r2, #0
 8020dd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8020dd4:	2300      	movs	r3, #0
}
 8020dd6:	4618      	mov	r0, r3
 8020dd8:	3714      	adds	r7, #20
 8020dda:	46bd      	mov	sp, r7
 8020ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020de0:	4770      	bx	lr
 8020de2:	bf00      	nop
 8020de4:	40010000 	.word	0x40010000
 8020de8:	40000400 	.word	0x40000400
 8020dec:	40000800 	.word	0x40000800
 8020df0:	40000c00 	.word	0x40000c00
 8020df4:	40014000 	.word	0x40014000

08020df8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8020df8:	b480      	push	{r7}
 8020dfa:	b083      	sub	sp, #12
 8020dfc:	af00      	add	r7, sp, #0
 8020dfe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8020e00:	bf00      	nop
 8020e02:	370c      	adds	r7, #12
 8020e04:	46bd      	mov	sp, r7
 8020e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020e0a:	4770      	bx	lr

08020e0c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8020e0c:	b480      	push	{r7}
 8020e0e:	b083      	sub	sp, #12
 8020e10:	af00      	add	r7, sp, #0
 8020e12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8020e14:	bf00      	nop
 8020e16:	370c      	adds	r7, #12
 8020e18:	46bd      	mov	sp, r7
 8020e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020e1e:	4770      	bx	lr

08020e20 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8020e20:	b580      	push	{r7, lr}
 8020e22:	b082      	sub	sp, #8
 8020e24:	af00      	add	r7, sp, #0
 8020e26:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8020e28:	687b      	ldr	r3, [r7, #4]
 8020e2a:	2b00      	cmp	r3, #0
 8020e2c:	d101      	bne.n	8020e32 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8020e2e:	2301      	movs	r3, #1
 8020e30:	e03f      	b.n	8020eb2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8020e32:	687b      	ldr	r3, [r7, #4]
 8020e34:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8020e38:	b2db      	uxtb	r3, r3
 8020e3a:	2b00      	cmp	r3, #0
 8020e3c:	d106      	bne.n	8020e4c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8020e3e:	687b      	ldr	r3, [r7, #4]
 8020e40:	2200      	movs	r2, #0
 8020e42:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8020e46:	6878      	ldr	r0, [r7, #4]
 8020e48:	f7fc fdac 	bl	801d9a4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8020e4c:	687b      	ldr	r3, [r7, #4]
 8020e4e:	2224      	movs	r2, #36	; 0x24
 8020e50:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8020e54:	687b      	ldr	r3, [r7, #4]
 8020e56:	681b      	ldr	r3, [r3, #0]
 8020e58:	68da      	ldr	r2, [r3, #12]
 8020e5a:	687b      	ldr	r3, [r7, #4]
 8020e5c:	681b      	ldr	r3, [r3, #0]
 8020e5e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8020e62:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8020e64:	6878      	ldr	r0, [r7, #4]
 8020e66:	f000 fb97 	bl	8021598 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8020e6a:	687b      	ldr	r3, [r7, #4]
 8020e6c:	681b      	ldr	r3, [r3, #0]
 8020e6e:	691a      	ldr	r2, [r3, #16]
 8020e70:	687b      	ldr	r3, [r7, #4]
 8020e72:	681b      	ldr	r3, [r3, #0]
 8020e74:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8020e78:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8020e7a:	687b      	ldr	r3, [r7, #4]
 8020e7c:	681b      	ldr	r3, [r3, #0]
 8020e7e:	695a      	ldr	r2, [r3, #20]
 8020e80:	687b      	ldr	r3, [r7, #4]
 8020e82:	681b      	ldr	r3, [r3, #0]
 8020e84:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8020e88:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8020e8a:	687b      	ldr	r3, [r7, #4]
 8020e8c:	681b      	ldr	r3, [r3, #0]
 8020e8e:	68da      	ldr	r2, [r3, #12]
 8020e90:	687b      	ldr	r3, [r7, #4]
 8020e92:	681b      	ldr	r3, [r3, #0]
 8020e94:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8020e98:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8020e9a:	687b      	ldr	r3, [r7, #4]
 8020e9c:	2200      	movs	r2, #0
 8020e9e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8020ea0:	687b      	ldr	r3, [r7, #4]
 8020ea2:	2220      	movs	r2, #32
 8020ea4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8020ea8:	687b      	ldr	r3, [r7, #4]
 8020eaa:	2220      	movs	r2, #32
 8020eac:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8020eb0:	2300      	movs	r3, #0
}
 8020eb2:	4618      	mov	r0, r3
 8020eb4:	3708      	adds	r7, #8
 8020eb6:	46bd      	mov	sp, r7
 8020eb8:	bd80      	pop	{r7, pc}

08020eba <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8020eba:	b580      	push	{r7, lr}
 8020ebc:	b088      	sub	sp, #32
 8020ebe:	af02      	add	r7, sp, #8
 8020ec0:	60f8      	str	r0, [r7, #12]
 8020ec2:	60b9      	str	r1, [r7, #8]
 8020ec4:	603b      	str	r3, [r7, #0]
 8020ec6:	4613      	mov	r3, r2
 8020ec8:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8020eca:	2300      	movs	r3, #0
 8020ecc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8020ece:	68fb      	ldr	r3, [r7, #12]
 8020ed0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8020ed4:	b2db      	uxtb	r3, r3
 8020ed6:	2b20      	cmp	r3, #32
 8020ed8:	f040 8083 	bne.w	8020fe2 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8020edc:	68bb      	ldr	r3, [r7, #8]
 8020ede:	2b00      	cmp	r3, #0
 8020ee0:	d002      	beq.n	8020ee8 <HAL_UART_Transmit+0x2e>
 8020ee2:	88fb      	ldrh	r3, [r7, #6]
 8020ee4:	2b00      	cmp	r3, #0
 8020ee6:	d101      	bne.n	8020eec <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8020ee8:	2301      	movs	r3, #1
 8020eea:	e07b      	b.n	8020fe4 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8020eec:	68fb      	ldr	r3, [r7, #12]
 8020eee:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8020ef2:	2b01      	cmp	r3, #1
 8020ef4:	d101      	bne.n	8020efa <HAL_UART_Transmit+0x40>
 8020ef6:	2302      	movs	r3, #2
 8020ef8:	e074      	b.n	8020fe4 <HAL_UART_Transmit+0x12a>
 8020efa:	68fb      	ldr	r3, [r7, #12]
 8020efc:	2201      	movs	r2, #1
 8020efe:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8020f02:	68fb      	ldr	r3, [r7, #12]
 8020f04:	2200      	movs	r2, #0
 8020f06:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8020f08:	68fb      	ldr	r3, [r7, #12]
 8020f0a:	2221      	movs	r2, #33	; 0x21
 8020f0c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8020f10:	f7fc fe7c 	bl	801dc0c <HAL_GetTick>
 8020f14:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8020f16:	68fb      	ldr	r3, [r7, #12]
 8020f18:	88fa      	ldrh	r2, [r7, #6]
 8020f1a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8020f1c:	68fb      	ldr	r3, [r7, #12]
 8020f1e:	88fa      	ldrh	r2, [r7, #6]
 8020f20:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8020f22:	68fb      	ldr	r3, [r7, #12]
 8020f24:	2200      	movs	r2, #0
 8020f26:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8020f2a:	e042      	b.n	8020fb2 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8020f2c:	68fb      	ldr	r3, [r7, #12]
 8020f2e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8020f30:	b29b      	uxth	r3, r3
 8020f32:	3b01      	subs	r3, #1
 8020f34:	b29a      	uxth	r2, r3
 8020f36:	68fb      	ldr	r3, [r7, #12]
 8020f38:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8020f3a:	68fb      	ldr	r3, [r7, #12]
 8020f3c:	689b      	ldr	r3, [r3, #8]
 8020f3e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8020f42:	d122      	bne.n	8020f8a <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8020f44:	683b      	ldr	r3, [r7, #0]
 8020f46:	9300      	str	r3, [sp, #0]
 8020f48:	697b      	ldr	r3, [r7, #20]
 8020f4a:	2200      	movs	r2, #0
 8020f4c:	2180      	movs	r1, #128	; 0x80
 8020f4e:	68f8      	ldr	r0, [r7, #12]
 8020f50:	f000 f9b6 	bl	80212c0 <UART_WaitOnFlagUntilTimeout>
 8020f54:	4603      	mov	r3, r0
 8020f56:	2b00      	cmp	r3, #0
 8020f58:	d001      	beq.n	8020f5e <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8020f5a:	2303      	movs	r3, #3
 8020f5c:	e042      	b.n	8020fe4 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8020f5e:	68bb      	ldr	r3, [r7, #8]
 8020f60:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8020f62:	693b      	ldr	r3, [r7, #16]
 8020f64:	881b      	ldrh	r3, [r3, #0]
 8020f66:	461a      	mov	r2, r3
 8020f68:	68fb      	ldr	r3, [r7, #12]
 8020f6a:	681b      	ldr	r3, [r3, #0]
 8020f6c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8020f70:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8020f72:	68fb      	ldr	r3, [r7, #12]
 8020f74:	691b      	ldr	r3, [r3, #16]
 8020f76:	2b00      	cmp	r3, #0
 8020f78:	d103      	bne.n	8020f82 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8020f7a:	68bb      	ldr	r3, [r7, #8]
 8020f7c:	3302      	adds	r3, #2
 8020f7e:	60bb      	str	r3, [r7, #8]
 8020f80:	e017      	b.n	8020fb2 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8020f82:	68bb      	ldr	r3, [r7, #8]
 8020f84:	3301      	adds	r3, #1
 8020f86:	60bb      	str	r3, [r7, #8]
 8020f88:	e013      	b.n	8020fb2 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8020f8a:	683b      	ldr	r3, [r7, #0]
 8020f8c:	9300      	str	r3, [sp, #0]
 8020f8e:	697b      	ldr	r3, [r7, #20]
 8020f90:	2200      	movs	r2, #0
 8020f92:	2180      	movs	r1, #128	; 0x80
 8020f94:	68f8      	ldr	r0, [r7, #12]
 8020f96:	f000 f993 	bl	80212c0 <UART_WaitOnFlagUntilTimeout>
 8020f9a:	4603      	mov	r3, r0
 8020f9c:	2b00      	cmp	r3, #0
 8020f9e:	d001      	beq.n	8020fa4 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8020fa0:	2303      	movs	r3, #3
 8020fa2:	e01f      	b.n	8020fe4 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8020fa4:	68bb      	ldr	r3, [r7, #8]
 8020fa6:	1c5a      	adds	r2, r3, #1
 8020fa8:	60ba      	str	r2, [r7, #8]
 8020faa:	781a      	ldrb	r2, [r3, #0]
 8020fac:	68fb      	ldr	r3, [r7, #12]
 8020fae:	681b      	ldr	r3, [r3, #0]
 8020fb0:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8020fb2:	68fb      	ldr	r3, [r7, #12]
 8020fb4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8020fb6:	b29b      	uxth	r3, r3
 8020fb8:	2b00      	cmp	r3, #0
 8020fba:	d1b7      	bne.n	8020f2c <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8020fbc:	683b      	ldr	r3, [r7, #0]
 8020fbe:	9300      	str	r3, [sp, #0]
 8020fc0:	697b      	ldr	r3, [r7, #20]
 8020fc2:	2200      	movs	r2, #0
 8020fc4:	2140      	movs	r1, #64	; 0x40
 8020fc6:	68f8      	ldr	r0, [r7, #12]
 8020fc8:	f000 f97a 	bl	80212c0 <UART_WaitOnFlagUntilTimeout>
 8020fcc:	4603      	mov	r3, r0
 8020fce:	2b00      	cmp	r3, #0
 8020fd0:	d001      	beq.n	8020fd6 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8020fd2:	2303      	movs	r3, #3
 8020fd4:	e006      	b.n	8020fe4 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8020fd6:	68fb      	ldr	r3, [r7, #12]
 8020fd8:	2220      	movs	r2, #32
 8020fda:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8020fde:	2300      	movs	r3, #0
 8020fe0:	e000      	b.n	8020fe4 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8020fe2:	2302      	movs	r3, #2
  }
}
 8020fe4:	4618      	mov	r0, r3
 8020fe6:	3718      	adds	r7, #24
 8020fe8:	46bd      	mov	sp, r7
 8020fea:	bd80      	pop	{r7, pc}

08020fec <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8020fec:	b480      	push	{r7}
 8020fee:	b085      	sub	sp, #20
 8020ff0:	af00      	add	r7, sp, #0
 8020ff2:	60f8      	str	r0, [r7, #12]
 8020ff4:	60b9      	str	r1, [r7, #8]
 8020ff6:	4613      	mov	r3, r2
 8020ff8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8020ffa:	68fb      	ldr	r3, [r7, #12]
 8020ffc:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8021000:	b2db      	uxtb	r3, r3
 8021002:	2b20      	cmp	r3, #32
 8021004:	d140      	bne.n	8021088 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8021006:	68bb      	ldr	r3, [r7, #8]
 8021008:	2b00      	cmp	r3, #0
 802100a:	d002      	beq.n	8021012 <HAL_UART_Receive_IT+0x26>
 802100c:	88fb      	ldrh	r3, [r7, #6]
 802100e:	2b00      	cmp	r3, #0
 8021010:	d101      	bne.n	8021016 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8021012:	2301      	movs	r3, #1
 8021014:	e039      	b.n	802108a <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8021016:	68fb      	ldr	r3, [r7, #12]
 8021018:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 802101c:	2b01      	cmp	r3, #1
 802101e:	d101      	bne.n	8021024 <HAL_UART_Receive_IT+0x38>
 8021020:	2302      	movs	r3, #2
 8021022:	e032      	b.n	802108a <HAL_UART_Receive_IT+0x9e>
 8021024:	68fb      	ldr	r3, [r7, #12]
 8021026:	2201      	movs	r2, #1
 8021028:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 802102c:	68fb      	ldr	r3, [r7, #12]
 802102e:	68ba      	ldr	r2, [r7, #8]
 8021030:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8021032:	68fb      	ldr	r3, [r7, #12]
 8021034:	88fa      	ldrh	r2, [r7, #6]
 8021036:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8021038:	68fb      	ldr	r3, [r7, #12]
 802103a:	88fa      	ldrh	r2, [r7, #6]
 802103c:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 802103e:	68fb      	ldr	r3, [r7, #12]
 8021040:	2200      	movs	r2, #0
 8021042:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8021044:	68fb      	ldr	r3, [r7, #12]
 8021046:	2222      	movs	r2, #34	; 0x22
 8021048:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 802104c:	68fb      	ldr	r3, [r7, #12]
 802104e:	2200      	movs	r2, #0
 8021050:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8021054:	68fb      	ldr	r3, [r7, #12]
 8021056:	681b      	ldr	r3, [r3, #0]
 8021058:	68da      	ldr	r2, [r3, #12]
 802105a:	68fb      	ldr	r3, [r7, #12]
 802105c:	681b      	ldr	r3, [r3, #0]
 802105e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8021062:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8021064:	68fb      	ldr	r3, [r7, #12]
 8021066:	681b      	ldr	r3, [r3, #0]
 8021068:	695a      	ldr	r2, [r3, #20]
 802106a:	68fb      	ldr	r3, [r7, #12]
 802106c:	681b      	ldr	r3, [r3, #0]
 802106e:	f042 0201 	orr.w	r2, r2, #1
 8021072:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8021074:	68fb      	ldr	r3, [r7, #12]
 8021076:	681b      	ldr	r3, [r3, #0]
 8021078:	68da      	ldr	r2, [r3, #12]
 802107a:	68fb      	ldr	r3, [r7, #12]
 802107c:	681b      	ldr	r3, [r3, #0]
 802107e:	f042 0220 	orr.w	r2, r2, #32
 8021082:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8021084:	2300      	movs	r3, #0
 8021086:	e000      	b.n	802108a <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8021088:	2302      	movs	r3, #2
  }
}
 802108a:	4618      	mov	r0, r3
 802108c:	3714      	adds	r7, #20
 802108e:	46bd      	mov	sp, r7
 8021090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021094:	4770      	bx	lr
	...

08021098 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8021098:	b580      	push	{r7, lr}
 802109a:	b088      	sub	sp, #32
 802109c:	af00      	add	r7, sp, #0
 802109e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80210a0:	687b      	ldr	r3, [r7, #4]
 80210a2:	681b      	ldr	r3, [r3, #0]
 80210a4:	681b      	ldr	r3, [r3, #0]
 80210a6:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80210a8:	687b      	ldr	r3, [r7, #4]
 80210aa:	681b      	ldr	r3, [r3, #0]
 80210ac:	68db      	ldr	r3, [r3, #12]
 80210ae:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80210b0:	687b      	ldr	r3, [r7, #4]
 80210b2:	681b      	ldr	r3, [r3, #0]
 80210b4:	695b      	ldr	r3, [r3, #20]
 80210b6:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 80210b8:	2300      	movs	r3, #0
 80210ba:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 80210bc:	2300      	movs	r3, #0
 80210be:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80210c0:	69fb      	ldr	r3, [r7, #28]
 80210c2:	f003 030f 	and.w	r3, r3, #15
 80210c6:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 80210c8:	693b      	ldr	r3, [r7, #16]
 80210ca:	2b00      	cmp	r3, #0
 80210cc:	d10d      	bne.n	80210ea <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80210ce:	69fb      	ldr	r3, [r7, #28]
 80210d0:	f003 0320 	and.w	r3, r3, #32
 80210d4:	2b00      	cmp	r3, #0
 80210d6:	d008      	beq.n	80210ea <HAL_UART_IRQHandler+0x52>
 80210d8:	69bb      	ldr	r3, [r7, #24]
 80210da:	f003 0320 	and.w	r3, r3, #32
 80210de:	2b00      	cmp	r3, #0
 80210e0:	d003      	beq.n	80210ea <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80210e2:	6878      	ldr	r0, [r7, #4]
 80210e4:	f000 f9d6 	bl	8021494 <UART_Receive_IT>
      return;
 80210e8:	e0d1      	b.n	802128e <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80210ea:	693b      	ldr	r3, [r7, #16]
 80210ec:	2b00      	cmp	r3, #0
 80210ee:	f000 80b0 	beq.w	8021252 <HAL_UART_IRQHandler+0x1ba>
 80210f2:	697b      	ldr	r3, [r7, #20]
 80210f4:	f003 0301 	and.w	r3, r3, #1
 80210f8:	2b00      	cmp	r3, #0
 80210fa:	d105      	bne.n	8021108 <HAL_UART_IRQHandler+0x70>
 80210fc:	69bb      	ldr	r3, [r7, #24]
 80210fe:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8021102:	2b00      	cmp	r3, #0
 8021104:	f000 80a5 	beq.w	8021252 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8021108:	69fb      	ldr	r3, [r7, #28]
 802110a:	f003 0301 	and.w	r3, r3, #1
 802110e:	2b00      	cmp	r3, #0
 8021110:	d00a      	beq.n	8021128 <HAL_UART_IRQHandler+0x90>
 8021112:	69bb      	ldr	r3, [r7, #24]
 8021114:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8021118:	2b00      	cmp	r3, #0
 802111a:	d005      	beq.n	8021128 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 802111c:	687b      	ldr	r3, [r7, #4]
 802111e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8021120:	f043 0201 	orr.w	r2, r3, #1
 8021124:	687b      	ldr	r3, [r7, #4]
 8021126:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8021128:	69fb      	ldr	r3, [r7, #28]
 802112a:	f003 0304 	and.w	r3, r3, #4
 802112e:	2b00      	cmp	r3, #0
 8021130:	d00a      	beq.n	8021148 <HAL_UART_IRQHandler+0xb0>
 8021132:	697b      	ldr	r3, [r7, #20]
 8021134:	f003 0301 	and.w	r3, r3, #1
 8021138:	2b00      	cmp	r3, #0
 802113a:	d005      	beq.n	8021148 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 802113c:	687b      	ldr	r3, [r7, #4]
 802113e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8021140:	f043 0202 	orr.w	r2, r3, #2
 8021144:	687b      	ldr	r3, [r7, #4]
 8021146:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8021148:	69fb      	ldr	r3, [r7, #28]
 802114a:	f003 0302 	and.w	r3, r3, #2
 802114e:	2b00      	cmp	r3, #0
 8021150:	d00a      	beq.n	8021168 <HAL_UART_IRQHandler+0xd0>
 8021152:	697b      	ldr	r3, [r7, #20]
 8021154:	f003 0301 	and.w	r3, r3, #1
 8021158:	2b00      	cmp	r3, #0
 802115a:	d005      	beq.n	8021168 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 802115c:	687b      	ldr	r3, [r7, #4]
 802115e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8021160:	f043 0204 	orr.w	r2, r3, #4
 8021164:	687b      	ldr	r3, [r7, #4]
 8021166:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8021168:	69fb      	ldr	r3, [r7, #28]
 802116a:	f003 0308 	and.w	r3, r3, #8
 802116e:	2b00      	cmp	r3, #0
 8021170:	d00f      	beq.n	8021192 <HAL_UART_IRQHandler+0xfa>
 8021172:	69bb      	ldr	r3, [r7, #24]
 8021174:	f003 0320 	and.w	r3, r3, #32
 8021178:	2b00      	cmp	r3, #0
 802117a:	d104      	bne.n	8021186 <HAL_UART_IRQHandler+0xee>
 802117c:	697b      	ldr	r3, [r7, #20]
 802117e:	f003 0301 	and.w	r3, r3, #1
 8021182:	2b00      	cmp	r3, #0
 8021184:	d005      	beq.n	8021192 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8021186:	687b      	ldr	r3, [r7, #4]
 8021188:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802118a:	f043 0208 	orr.w	r2, r3, #8
 802118e:	687b      	ldr	r3, [r7, #4]
 8021190:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8021192:	687b      	ldr	r3, [r7, #4]
 8021194:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8021196:	2b00      	cmp	r3, #0
 8021198:	d078      	beq.n	802128c <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 802119a:	69fb      	ldr	r3, [r7, #28]
 802119c:	f003 0320 	and.w	r3, r3, #32
 80211a0:	2b00      	cmp	r3, #0
 80211a2:	d007      	beq.n	80211b4 <HAL_UART_IRQHandler+0x11c>
 80211a4:	69bb      	ldr	r3, [r7, #24]
 80211a6:	f003 0320 	and.w	r3, r3, #32
 80211aa:	2b00      	cmp	r3, #0
 80211ac:	d002      	beq.n	80211b4 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 80211ae:	6878      	ldr	r0, [r7, #4]
 80211b0:	f000 f970 	bl	8021494 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80211b4:	687b      	ldr	r3, [r7, #4]
 80211b6:	681b      	ldr	r3, [r3, #0]
 80211b8:	695b      	ldr	r3, [r3, #20]
 80211ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80211be:	2b40      	cmp	r3, #64	; 0x40
 80211c0:	bf0c      	ite	eq
 80211c2:	2301      	moveq	r3, #1
 80211c4:	2300      	movne	r3, #0
 80211c6:	b2db      	uxtb	r3, r3
 80211c8:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80211ca:	687b      	ldr	r3, [r7, #4]
 80211cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80211ce:	f003 0308 	and.w	r3, r3, #8
 80211d2:	2b00      	cmp	r3, #0
 80211d4:	d102      	bne.n	80211dc <HAL_UART_IRQHandler+0x144>
 80211d6:	68fb      	ldr	r3, [r7, #12]
 80211d8:	2b00      	cmp	r3, #0
 80211da:	d031      	beq.n	8021240 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80211dc:	6878      	ldr	r0, [r7, #4]
 80211de:	f000 f8b9 	bl	8021354 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80211e2:	687b      	ldr	r3, [r7, #4]
 80211e4:	681b      	ldr	r3, [r3, #0]
 80211e6:	695b      	ldr	r3, [r3, #20]
 80211e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80211ec:	2b40      	cmp	r3, #64	; 0x40
 80211ee:	d123      	bne.n	8021238 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80211f0:	687b      	ldr	r3, [r7, #4]
 80211f2:	681b      	ldr	r3, [r3, #0]
 80211f4:	695a      	ldr	r2, [r3, #20]
 80211f6:	687b      	ldr	r3, [r7, #4]
 80211f8:	681b      	ldr	r3, [r3, #0]
 80211fa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80211fe:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8021200:	687b      	ldr	r3, [r7, #4]
 8021202:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8021204:	2b00      	cmp	r3, #0
 8021206:	d013      	beq.n	8021230 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8021208:	687b      	ldr	r3, [r7, #4]
 802120a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 802120c:	4a21      	ldr	r2, [pc, #132]	; (8021294 <HAL_UART_IRQHandler+0x1fc>)
 802120e:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8021210:	687b      	ldr	r3, [r7, #4]
 8021212:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8021214:	4618      	mov	r0, r3
 8021216:	f7fc ff3f 	bl	801e098 <HAL_DMA_Abort_IT>
 802121a:	4603      	mov	r3, r0
 802121c:	2b00      	cmp	r3, #0
 802121e:	d016      	beq.n	802124e <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8021220:	687b      	ldr	r3, [r7, #4]
 8021222:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8021224:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8021226:	687a      	ldr	r2, [r7, #4]
 8021228:	6b52      	ldr	r2, [r2, #52]	; 0x34
 802122a:	4610      	mov	r0, r2
 802122c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 802122e:	e00e      	b.n	802124e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8021230:	6878      	ldr	r0, [r7, #4]
 8021232:	f000 f83b 	bl	80212ac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8021236:	e00a      	b.n	802124e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8021238:	6878      	ldr	r0, [r7, #4]
 802123a:	f000 f837 	bl	80212ac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 802123e:	e006      	b.n	802124e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8021240:	6878      	ldr	r0, [r7, #4]
 8021242:	f000 f833 	bl	80212ac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8021246:	687b      	ldr	r3, [r7, #4]
 8021248:	2200      	movs	r2, #0
 802124a:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 802124c:	e01e      	b.n	802128c <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 802124e:	bf00      	nop
    return;
 8021250:	e01c      	b.n	802128c <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8021252:	69fb      	ldr	r3, [r7, #28]
 8021254:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8021258:	2b00      	cmp	r3, #0
 802125a:	d008      	beq.n	802126e <HAL_UART_IRQHandler+0x1d6>
 802125c:	69bb      	ldr	r3, [r7, #24]
 802125e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8021262:	2b00      	cmp	r3, #0
 8021264:	d003      	beq.n	802126e <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8021266:	6878      	ldr	r0, [r7, #4]
 8021268:	f000 f8a6 	bl	80213b8 <UART_Transmit_IT>
    return;
 802126c:	e00f      	b.n	802128e <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 802126e:	69fb      	ldr	r3, [r7, #28]
 8021270:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8021274:	2b00      	cmp	r3, #0
 8021276:	d00a      	beq.n	802128e <HAL_UART_IRQHandler+0x1f6>
 8021278:	69bb      	ldr	r3, [r7, #24]
 802127a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 802127e:	2b00      	cmp	r3, #0
 8021280:	d005      	beq.n	802128e <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8021282:	6878      	ldr	r0, [r7, #4]
 8021284:	f000 f8ee 	bl	8021464 <UART_EndTransmit_IT>
    return;
 8021288:	bf00      	nop
 802128a:	e000      	b.n	802128e <HAL_UART_IRQHandler+0x1f6>
    return;
 802128c:	bf00      	nop
  }
}
 802128e:	3720      	adds	r7, #32
 8021290:	46bd      	mov	sp, r7
 8021292:	bd80      	pop	{r7, pc}
 8021294:	08021391 	.word	0x08021391

08021298 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8021298:	b480      	push	{r7}
 802129a:	b083      	sub	sp, #12
 802129c:	af00      	add	r7, sp, #0
 802129e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80212a0:	bf00      	nop
 80212a2:	370c      	adds	r7, #12
 80212a4:	46bd      	mov	sp, r7
 80212a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80212aa:	4770      	bx	lr

080212ac <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80212ac:	b480      	push	{r7}
 80212ae:	b083      	sub	sp, #12
 80212b0:	af00      	add	r7, sp, #0
 80212b2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80212b4:	bf00      	nop
 80212b6:	370c      	adds	r7, #12
 80212b8:	46bd      	mov	sp, r7
 80212ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80212be:	4770      	bx	lr

080212c0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80212c0:	b580      	push	{r7, lr}
 80212c2:	b084      	sub	sp, #16
 80212c4:	af00      	add	r7, sp, #0
 80212c6:	60f8      	str	r0, [r7, #12]
 80212c8:	60b9      	str	r1, [r7, #8]
 80212ca:	603b      	str	r3, [r7, #0]
 80212cc:	4613      	mov	r3, r2
 80212ce:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80212d0:	e02c      	b.n	802132c <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80212d2:	69bb      	ldr	r3, [r7, #24]
 80212d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80212d8:	d028      	beq.n	802132c <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80212da:	69bb      	ldr	r3, [r7, #24]
 80212dc:	2b00      	cmp	r3, #0
 80212de:	d007      	beq.n	80212f0 <UART_WaitOnFlagUntilTimeout+0x30>
 80212e0:	f7fc fc94 	bl	801dc0c <HAL_GetTick>
 80212e4:	4602      	mov	r2, r0
 80212e6:	683b      	ldr	r3, [r7, #0]
 80212e8:	1ad3      	subs	r3, r2, r3
 80212ea:	69ba      	ldr	r2, [r7, #24]
 80212ec:	429a      	cmp	r2, r3
 80212ee:	d21d      	bcs.n	802132c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80212f0:	68fb      	ldr	r3, [r7, #12]
 80212f2:	681b      	ldr	r3, [r3, #0]
 80212f4:	68da      	ldr	r2, [r3, #12]
 80212f6:	68fb      	ldr	r3, [r7, #12]
 80212f8:	681b      	ldr	r3, [r3, #0]
 80212fa:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80212fe:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8021300:	68fb      	ldr	r3, [r7, #12]
 8021302:	681b      	ldr	r3, [r3, #0]
 8021304:	695a      	ldr	r2, [r3, #20]
 8021306:	68fb      	ldr	r3, [r7, #12]
 8021308:	681b      	ldr	r3, [r3, #0]
 802130a:	f022 0201 	bic.w	r2, r2, #1
 802130e:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8021310:	68fb      	ldr	r3, [r7, #12]
 8021312:	2220      	movs	r2, #32
 8021314:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8021318:	68fb      	ldr	r3, [r7, #12]
 802131a:	2220      	movs	r2, #32
 802131c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8021320:	68fb      	ldr	r3, [r7, #12]
 8021322:	2200      	movs	r2, #0
 8021324:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8021328:	2303      	movs	r3, #3
 802132a:	e00f      	b.n	802134c <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 802132c:	68fb      	ldr	r3, [r7, #12]
 802132e:	681b      	ldr	r3, [r3, #0]
 8021330:	681a      	ldr	r2, [r3, #0]
 8021332:	68bb      	ldr	r3, [r7, #8]
 8021334:	4013      	ands	r3, r2
 8021336:	68ba      	ldr	r2, [r7, #8]
 8021338:	429a      	cmp	r2, r3
 802133a:	bf0c      	ite	eq
 802133c:	2301      	moveq	r3, #1
 802133e:	2300      	movne	r3, #0
 8021340:	b2db      	uxtb	r3, r3
 8021342:	461a      	mov	r2, r3
 8021344:	79fb      	ldrb	r3, [r7, #7]
 8021346:	429a      	cmp	r2, r3
 8021348:	d0c3      	beq.n	80212d2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 802134a:	2300      	movs	r3, #0
}
 802134c:	4618      	mov	r0, r3
 802134e:	3710      	adds	r7, #16
 8021350:	46bd      	mov	sp, r7
 8021352:	bd80      	pop	{r7, pc}

08021354 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8021354:	b480      	push	{r7}
 8021356:	b083      	sub	sp, #12
 8021358:	af00      	add	r7, sp, #0
 802135a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 802135c:	687b      	ldr	r3, [r7, #4]
 802135e:	681b      	ldr	r3, [r3, #0]
 8021360:	68da      	ldr	r2, [r3, #12]
 8021362:	687b      	ldr	r3, [r7, #4]
 8021364:	681b      	ldr	r3, [r3, #0]
 8021366:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 802136a:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 802136c:	687b      	ldr	r3, [r7, #4]
 802136e:	681b      	ldr	r3, [r3, #0]
 8021370:	695a      	ldr	r2, [r3, #20]
 8021372:	687b      	ldr	r3, [r7, #4]
 8021374:	681b      	ldr	r3, [r3, #0]
 8021376:	f022 0201 	bic.w	r2, r2, #1
 802137a:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 802137c:	687b      	ldr	r3, [r7, #4]
 802137e:	2220      	movs	r2, #32
 8021380:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8021384:	bf00      	nop
 8021386:	370c      	adds	r7, #12
 8021388:	46bd      	mov	sp, r7
 802138a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802138e:	4770      	bx	lr

08021390 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8021390:	b580      	push	{r7, lr}
 8021392:	b084      	sub	sp, #16
 8021394:	af00      	add	r7, sp, #0
 8021396:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8021398:	687b      	ldr	r3, [r7, #4]
 802139a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802139c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 802139e:	68fb      	ldr	r3, [r7, #12]
 80213a0:	2200      	movs	r2, #0
 80213a2:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80213a4:	68fb      	ldr	r3, [r7, #12]
 80213a6:	2200      	movs	r2, #0
 80213a8:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80213aa:	68f8      	ldr	r0, [r7, #12]
 80213ac:	f7ff ff7e 	bl	80212ac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80213b0:	bf00      	nop
 80213b2:	3710      	adds	r7, #16
 80213b4:	46bd      	mov	sp, r7
 80213b6:	bd80      	pop	{r7, pc}

080213b8 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80213b8:	b480      	push	{r7}
 80213ba:	b085      	sub	sp, #20
 80213bc:	af00      	add	r7, sp, #0
 80213be:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80213c0:	687b      	ldr	r3, [r7, #4]
 80213c2:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80213c6:	b2db      	uxtb	r3, r3
 80213c8:	2b21      	cmp	r3, #33	; 0x21
 80213ca:	d144      	bne.n	8021456 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80213cc:	687b      	ldr	r3, [r7, #4]
 80213ce:	689b      	ldr	r3, [r3, #8]
 80213d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80213d4:	d11a      	bne.n	802140c <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80213d6:	687b      	ldr	r3, [r7, #4]
 80213d8:	6a1b      	ldr	r3, [r3, #32]
 80213da:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80213dc:	68fb      	ldr	r3, [r7, #12]
 80213de:	881b      	ldrh	r3, [r3, #0]
 80213e0:	461a      	mov	r2, r3
 80213e2:	687b      	ldr	r3, [r7, #4]
 80213e4:	681b      	ldr	r3, [r3, #0]
 80213e6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80213ea:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80213ec:	687b      	ldr	r3, [r7, #4]
 80213ee:	691b      	ldr	r3, [r3, #16]
 80213f0:	2b00      	cmp	r3, #0
 80213f2:	d105      	bne.n	8021400 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 80213f4:	687b      	ldr	r3, [r7, #4]
 80213f6:	6a1b      	ldr	r3, [r3, #32]
 80213f8:	1c9a      	adds	r2, r3, #2
 80213fa:	687b      	ldr	r3, [r7, #4]
 80213fc:	621a      	str	r2, [r3, #32]
 80213fe:	e00e      	b.n	802141e <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8021400:	687b      	ldr	r3, [r7, #4]
 8021402:	6a1b      	ldr	r3, [r3, #32]
 8021404:	1c5a      	adds	r2, r3, #1
 8021406:	687b      	ldr	r3, [r7, #4]
 8021408:	621a      	str	r2, [r3, #32]
 802140a:	e008      	b.n	802141e <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 802140c:	687b      	ldr	r3, [r7, #4]
 802140e:	6a1b      	ldr	r3, [r3, #32]
 8021410:	1c59      	adds	r1, r3, #1
 8021412:	687a      	ldr	r2, [r7, #4]
 8021414:	6211      	str	r1, [r2, #32]
 8021416:	781a      	ldrb	r2, [r3, #0]
 8021418:	687b      	ldr	r3, [r7, #4]
 802141a:	681b      	ldr	r3, [r3, #0]
 802141c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 802141e:	687b      	ldr	r3, [r7, #4]
 8021420:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8021422:	b29b      	uxth	r3, r3
 8021424:	3b01      	subs	r3, #1
 8021426:	b29b      	uxth	r3, r3
 8021428:	687a      	ldr	r2, [r7, #4]
 802142a:	4619      	mov	r1, r3
 802142c:	84d1      	strh	r1, [r2, #38]	; 0x26
 802142e:	2b00      	cmp	r3, #0
 8021430:	d10f      	bne.n	8021452 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8021432:	687b      	ldr	r3, [r7, #4]
 8021434:	681b      	ldr	r3, [r3, #0]
 8021436:	68da      	ldr	r2, [r3, #12]
 8021438:	687b      	ldr	r3, [r7, #4]
 802143a:	681b      	ldr	r3, [r3, #0]
 802143c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8021440:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8021442:	687b      	ldr	r3, [r7, #4]
 8021444:	681b      	ldr	r3, [r3, #0]
 8021446:	68da      	ldr	r2, [r3, #12]
 8021448:	687b      	ldr	r3, [r7, #4]
 802144a:	681b      	ldr	r3, [r3, #0]
 802144c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8021450:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8021452:	2300      	movs	r3, #0
 8021454:	e000      	b.n	8021458 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8021456:	2302      	movs	r3, #2
  }
}
 8021458:	4618      	mov	r0, r3
 802145a:	3714      	adds	r7, #20
 802145c:	46bd      	mov	sp, r7
 802145e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021462:	4770      	bx	lr

08021464 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8021464:	b580      	push	{r7, lr}
 8021466:	b082      	sub	sp, #8
 8021468:	af00      	add	r7, sp, #0
 802146a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 802146c:	687b      	ldr	r3, [r7, #4]
 802146e:	681b      	ldr	r3, [r3, #0]
 8021470:	68da      	ldr	r2, [r3, #12]
 8021472:	687b      	ldr	r3, [r7, #4]
 8021474:	681b      	ldr	r3, [r3, #0]
 8021476:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 802147a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 802147c:	687b      	ldr	r3, [r7, #4]
 802147e:	2220      	movs	r2, #32
 8021480:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8021484:	6878      	ldr	r0, [r7, #4]
 8021486:	f7ff ff07 	bl	8021298 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 802148a:	2300      	movs	r3, #0
}
 802148c:	4618      	mov	r0, r3
 802148e:	3708      	adds	r7, #8
 8021490:	46bd      	mov	sp, r7
 8021492:	bd80      	pop	{r7, pc}

08021494 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8021494:	b580      	push	{r7, lr}
 8021496:	b084      	sub	sp, #16
 8021498:	af00      	add	r7, sp, #0
 802149a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 802149c:	687b      	ldr	r3, [r7, #4]
 802149e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80214a2:	b2db      	uxtb	r3, r3
 80214a4:	2b22      	cmp	r3, #34	; 0x22
 80214a6:	d171      	bne.n	802158c <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80214a8:	687b      	ldr	r3, [r7, #4]
 80214aa:	689b      	ldr	r3, [r3, #8]
 80214ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80214b0:	d123      	bne.n	80214fa <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 80214b2:	687b      	ldr	r3, [r7, #4]
 80214b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80214b6:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80214b8:	687b      	ldr	r3, [r7, #4]
 80214ba:	691b      	ldr	r3, [r3, #16]
 80214bc:	2b00      	cmp	r3, #0
 80214be:	d10e      	bne.n	80214de <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80214c0:	687b      	ldr	r3, [r7, #4]
 80214c2:	681b      	ldr	r3, [r3, #0]
 80214c4:	685b      	ldr	r3, [r3, #4]
 80214c6:	b29b      	uxth	r3, r3
 80214c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80214cc:	b29a      	uxth	r2, r3
 80214ce:	68fb      	ldr	r3, [r7, #12]
 80214d0:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 80214d2:	687b      	ldr	r3, [r7, #4]
 80214d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80214d6:	1c9a      	adds	r2, r3, #2
 80214d8:	687b      	ldr	r3, [r7, #4]
 80214da:	629a      	str	r2, [r3, #40]	; 0x28
 80214dc:	e029      	b.n	8021532 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 80214de:	687b      	ldr	r3, [r7, #4]
 80214e0:	681b      	ldr	r3, [r3, #0]
 80214e2:	685b      	ldr	r3, [r3, #4]
 80214e4:	b29b      	uxth	r3, r3
 80214e6:	b2db      	uxtb	r3, r3
 80214e8:	b29a      	uxth	r2, r3
 80214ea:	68fb      	ldr	r3, [r7, #12]
 80214ec:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 80214ee:	687b      	ldr	r3, [r7, #4]
 80214f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80214f2:	1c5a      	adds	r2, r3, #1
 80214f4:	687b      	ldr	r3, [r7, #4]
 80214f6:	629a      	str	r2, [r3, #40]	; 0x28
 80214f8:	e01b      	b.n	8021532 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 80214fa:	687b      	ldr	r3, [r7, #4]
 80214fc:	691b      	ldr	r3, [r3, #16]
 80214fe:	2b00      	cmp	r3, #0
 8021500:	d10a      	bne.n	8021518 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8021502:	687b      	ldr	r3, [r7, #4]
 8021504:	681b      	ldr	r3, [r3, #0]
 8021506:	6858      	ldr	r0, [r3, #4]
 8021508:	687b      	ldr	r3, [r7, #4]
 802150a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802150c:	1c59      	adds	r1, r3, #1
 802150e:	687a      	ldr	r2, [r7, #4]
 8021510:	6291      	str	r1, [r2, #40]	; 0x28
 8021512:	b2c2      	uxtb	r2, r0
 8021514:	701a      	strb	r2, [r3, #0]
 8021516:	e00c      	b.n	8021532 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8021518:	687b      	ldr	r3, [r7, #4]
 802151a:	681b      	ldr	r3, [r3, #0]
 802151c:	685b      	ldr	r3, [r3, #4]
 802151e:	b2da      	uxtb	r2, r3
 8021520:	687b      	ldr	r3, [r7, #4]
 8021522:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8021524:	1c58      	adds	r0, r3, #1
 8021526:	6879      	ldr	r1, [r7, #4]
 8021528:	6288      	str	r0, [r1, #40]	; 0x28
 802152a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 802152e:	b2d2      	uxtb	r2, r2
 8021530:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8021532:	687b      	ldr	r3, [r7, #4]
 8021534:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8021536:	b29b      	uxth	r3, r3
 8021538:	3b01      	subs	r3, #1
 802153a:	b29b      	uxth	r3, r3
 802153c:	687a      	ldr	r2, [r7, #4]
 802153e:	4619      	mov	r1, r3
 8021540:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8021542:	2b00      	cmp	r3, #0
 8021544:	d120      	bne.n	8021588 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8021546:	687b      	ldr	r3, [r7, #4]
 8021548:	681b      	ldr	r3, [r3, #0]
 802154a:	68da      	ldr	r2, [r3, #12]
 802154c:	687b      	ldr	r3, [r7, #4]
 802154e:	681b      	ldr	r3, [r3, #0]
 8021550:	f022 0220 	bic.w	r2, r2, #32
 8021554:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8021556:	687b      	ldr	r3, [r7, #4]
 8021558:	681b      	ldr	r3, [r3, #0]
 802155a:	68da      	ldr	r2, [r3, #12]
 802155c:	687b      	ldr	r3, [r7, #4]
 802155e:	681b      	ldr	r3, [r3, #0]
 8021560:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8021564:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8021566:	687b      	ldr	r3, [r7, #4]
 8021568:	681b      	ldr	r3, [r3, #0]
 802156a:	695a      	ldr	r2, [r3, #20]
 802156c:	687b      	ldr	r3, [r7, #4]
 802156e:	681b      	ldr	r3, [r3, #0]
 8021570:	f022 0201 	bic.w	r2, r2, #1
 8021574:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8021576:	687b      	ldr	r3, [r7, #4]
 8021578:	2220      	movs	r2, #32
 802157a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 802157e:	6878      	ldr	r0, [r7, #4]
 8021580:	f7fb fed2 	bl	801d328 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8021584:	2300      	movs	r3, #0
 8021586:	e002      	b.n	802158e <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8021588:	2300      	movs	r3, #0
 802158a:	e000      	b.n	802158e <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 802158c:	2302      	movs	r3, #2
  }
}
 802158e:	4618      	mov	r0, r3
 8021590:	3710      	adds	r7, #16
 8021592:	46bd      	mov	sp, r7
 8021594:	bd80      	pop	{r7, pc}
	...

08021598 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8021598:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802159c:	b085      	sub	sp, #20
 802159e:	af00      	add	r7, sp, #0
 80215a0:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80215a2:	687b      	ldr	r3, [r7, #4]
 80215a4:	681b      	ldr	r3, [r3, #0]
 80215a6:	691b      	ldr	r3, [r3, #16]
 80215a8:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80215ac:	687b      	ldr	r3, [r7, #4]
 80215ae:	68da      	ldr	r2, [r3, #12]
 80215b0:	687b      	ldr	r3, [r7, #4]
 80215b2:	681b      	ldr	r3, [r3, #0]
 80215b4:	430a      	orrs	r2, r1
 80215b6:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80215b8:	687b      	ldr	r3, [r7, #4]
 80215ba:	689a      	ldr	r2, [r3, #8]
 80215bc:	687b      	ldr	r3, [r7, #4]
 80215be:	691b      	ldr	r3, [r3, #16]
 80215c0:	431a      	orrs	r2, r3
 80215c2:	687b      	ldr	r3, [r7, #4]
 80215c4:	695b      	ldr	r3, [r3, #20]
 80215c6:	431a      	orrs	r2, r3
 80215c8:	687b      	ldr	r3, [r7, #4]
 80215ca:	69db      	ldr	r3, [r3, #28]
 80215cc:	4313      	orrs	r3, r2
 80215ce:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80215d0:	687b      	ldr	r3, [r7, #4]
 80215d2:	681b      	ldr	r3, [r3, #0]
 80215d4:	68db      	ldr	r3, [r3, #12]
 80215d6:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80215da:	f023 030c 	bic.w	r3, r3, #12
 80215de:	687a      	ldr	r2, [r7, #4]
 80215e0:	6812      	ldr	r2, [r2, #0]
 80215e2:	68f9      	ldr	r1, [r7, #12]
 80215e4:	430b      	orrs	r3, r1
 80215e6:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80215e8:	687b      	ldr	r3, [r7, #4]
 80215ea:	681b      	ldr	r3, [r3, #0]
 80215ec:	695b      	ldr	r3, [r3, #20]
 80215ee:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80215f2:	687b      	ldr	r3, [r7, #4]
 80215f4:	699a      	ldr	r2, [r3, #24]
 80215f6:	687b      	ldr	r3, [r7, #4]
 80215f8:	681b      	ldr	r3, [r3, #0]
 80215fa:	430a      	orrs	r2, r1
 80215fc:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80215fe:	687b      	ldr	r3, [r7, #4]
 8021600:	69db      	ldr	r3, [r3, #28]
 8021602:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8021606:	f040 818b 	bne.w	8021920 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 802160a:	687b      	ldr	r3, [r7, #4]
 802160c:	681b      	ldr	r3, [r3, #0]
 802160e:	4ac1      	ldr	r2, [pc, #772]	; (8021914 <UART_SetConfig+0x37c>)
 8021610:	4293      	cmp	r3, r2
 8021612:	d005      	beq.n	8021620 <UART_SetConfig+0x88>
 8021614:	687b      	ldr	r3, [r7, #4]
 8021616:	681b      	ldr	r3, [r3, #0]
 8021618:	4abf      	ldr	r2, [pc, #764]	; (8021918 <UART_SetConfig+0x380>)
 802161a:	4293      	cmp	r3, r2
 802161c:	f040 80bd 	bne.w	802179a <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8021620:	f7fe fb4c 	bl	801fcbc <HAL_RCC_GetPCLK2Freq>
 8021624:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8021626:	68bb      	ldr	r3, [r7, #8]
 8021628:	461d      	mov	r5, r3
 802162a:	f04f 0600 	mov.w	r6, #0
 802162e:	46a8      	mov	r8, r5
 8021630:	46b1      	mov	r9, r6
 8021632:	eb18 0308 	adds.w	r3, r8, r8
 8021636:	eb49 0409 	adc.w	r4, r9, r9
 802163a:	4698      	mov	r8, r3
 802163c:	46a1      	mov	r9, r4
 802163e:	eb18 0805 	adds.w	r8, r8, r5
 8021642:	eb49 0906 	adc.w	r9, r9, r6
 8021646:	f04f 0100 	mov.w	r1, #0
 802164a:	f04f 0200 	mov.w	r2, #0
 802164e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8021652:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8021656:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 802165a:	4688      	mov	r8, r1
 802165c:	4691      	mov	r9, r2
 802165e:	eb18 0005 	adds.w	r0, r8, r5
 8021662:	eb49 0106 	adc.w	r1, r9, r6
 8021666:	687b      	ldr	r3, [r7, #4]
 8021668:	685b      	ldr	r3, [r3, #4]
 802166a:	461d      	mov	r5, r3
 802166c:	f04f 0600 	mov.w	r6, #0
 8021670:	196b      	adds	r3, r5, r5
 8021672:	eb46 0406 	adc.w	r4, r6, r6
 8021676:	461a      	mov	r2, r3
 8021678:	4623      	mov	r3, r4
 802167a:	f7df fa95 	bl	8000ba8 <__aeabi_uldivmod>
 802167e:	4603      	mov	r3, r0
 8021680:	460c      	mov	r4, r1
 8021682:	461a      	mov	r2, r3
 8021684:	4ba5      	ldr	r3, [pc, #660]	; (802191c <UART_SetConfig+0x384>)
 8021686:	fba3 2302 	umull	r2, r3, r3, r2
 802168a:	095b      	lsrs	r3, r3, #5
 802168c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8021690:	68bb      	ldr	r3, [r7, #8]
 8021692:	461d      	mov	r5, r3
 8021694:	f04f 0600 	mov.w	r6, #0
 8021698:	46a9      	mov	r9, r5
 802169a:	46b2      	mov	sl, r6
 802169c:	eb19 0309 	adds.w	r3, r9, r9
 80216a0:	eb4a 040a 	adc.w	r4, sl, sl
 80216a4:	4699      	mov	r9, r3
 80216a6:	46a2      	mov	sl, r4
 80216a8:	eb19 0905 	adds.w	r9, r9, r5
 80216ac:	eb4a 0a06 	adc.w	sl, sl, r6
 80216b0:	f04f 0100 	mov.w	r1, #0
 80216b4:	f04f 0200 	mov.w	r2, #0
 80216b8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80216bc:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80216c0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80216c4:	4689      	mov	r9, r1
 80216c6:	4692      	mov	sl, r2
 80216c8:	eb19 0005 	adds.w	r0, r9, r5
 80216cc:	eb4a 0106 	adc.w	r1, sl, r6
 80216d0:	687b      	ldr	r3, [r7, #4]
 80216d2:	685b      	ldr	r3, [r3, #4]
 80216d4:	461d      	mov	r5, r3
 80216d6:	f04f 0600 	mov.w	r6, #0
 80216da:	196b      	adds	r3, r5, r5
 80216dc:	eb46 0406 	adc.w	r4, r6, r6
 80216e0:	461a      	mov	r2, r3
 80216e2:	4623      	mov	r3, r4
 80216e4:	f7df fa60 	bl	8000ba8 <__aeabi_uldivmod>
 80216e8:	4603      	mov	r3, r0
 80216ea:	460c      	mov	r4, r1
 80216ec:	461a      	mov	r2, r3
 80216ee:	4b8b      	ldr	r3, [pc, #556]	; (802191c <UART_SetConfig+0x384>)
 80216f0:	fba3 1302 	umull	r1, r3, r3, r2
 80216f4:	095b      	lsrs	r3, r3, #5
 80216f6:	2164      	movs	r1, #100	; 0x64
 80216f8:	fb01 f303 	mul.w	r3, r1, r3
 80216fc:	1ad3      	subs	r3, r2, r3
 80216fe:	00db      	lsls	r3, r3, #3
 8021700:	3332      	adds	r3, #50	; 0x32
 8021702:	4a86      	ldr	r2, [pc, #536]	; (802191c <UART_SetConfig+0x384>)
 8021704:	fba2 2303 	umull	r2, r3, r2, r3
 8021708:	095b      	lsrs	r3, r3, #5
 802170a:	005b      	lsls	r3, r3, #1
 802170c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8021710:	4498      	add	r8, r3
 8021712:	68bb      	ldr	r3, [r7, #8]
 8021714:	461d      	mov	r5, r3
 8021716:	f04f 0600 	mov.w	r6, #0
 802171a:	46a9      	mov	r9, r5
 802171c:	46b2      	mov	sl, r6
 802171e:	eb19 0309 	adds.w	r3, r9, r9
 8021722:	eb4a 040a 	adc.w	r4, sl, sl
 8021726:	4699      	mov	r9, r3
 8021728:	46a2      	mov	sl, r4
 802172a:	eb19 0905 	adds.w	r9, r9, r5
 802172e:	eb4a 0a06 	adc.w	sl, sl, r6
 8021732:	f04f 0100 	mov.w	r1, #0
 8021736:	f04f 0200 	mov.w	r2, #0
 802173a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 802173e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8021742:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8021746:	4689      	mov	r9, r1
 8021748:	4692      	mov	sl, r2
 802174a:	eb19 0005 	adds.w	r0, r9, r5
 802174e:	eb4a 0106 	adc.w	r1, sl, r6
 8021752:	687b      	ldr	r3, [r7, #4]
 8021754:	685b      	ldr	r3, [r3, #4]
 8021756:	461d      	mov	r5, r3
 8021758:	f04f 0600 	mov.w	r6, #0
 802175c:	196b      	adds	r3, r5, r5
 802175e:	eb46 0406 	adc.w	r4, r6, r6
 8021762:	461a      	mov	r2, r3
 8021764:	4623      	mov	r3, r4
 8021766:	f7df fa1f 	bl	8000ba8 <__aeabi_uldivmod>
 802176a:	4603      	mov	r3, r0
 802176c:	460c      	mov	r4, r1
 802176e:	461a      	mov	r2, r3
 8021770:	4b6a      	ldr	r3, [pc, #424]	; (802191c <UART_SetConfig+0x384>)
 8021772:	fba3 1302 	umull	r1, r3, r3, r2
 8021776:	095b      	lsrs	r3, r3, #5
 8021778:	2164      	movs	r1, #100	; 0x64
 802177a:	fb01 f303 	mul.w	r3, r1, r3
 802177e:	1ad3      	subs	r3, r2, r3
 8021780:	00db      	lsls	r3, r3, #3
 8021782:	3332      	adds	r3, #50	; 0x32
 8021784:	4a65      	ldr	r2, [pc, #404]	; (802191c <UART_SetConfig+0x384>)
 8021786:	fba2 2303 	umull	r2, r3, r2, r3
 802178a:	095b      	lsrs	r3, r3, #5
 802178c:	f003 0207 	and.w	r2, r3, #7
 8021790:	687b      	ldr	r3, [r7, #4]
 8021792:	681b      	ldr	r3, [r3, #0]
 8021794:	4442      	add	r2, r8
 8021796:	609a      	str	r2, [r3, #8]
 8021798:	e26f      	b.n	8021c7a <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 802179a:	f7fe fa7b 	bl	801fc94 <HAL_RCC_GetPCLK1Freq>
 802179e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80217a0:	68bb      	ldr	r3, [r7, #8]
 80217a2:	461d      	mov	r5, r3
 80217a4:	f04f 0600 	mov.w	r6, #0
 80217a8:	46a8      	mov	r8, r5
 80217aa:	46b1      	mov	r9, r6
 80217ac:	eb18 0308 	adds.w	r3, r8, r8
 80217b0:	eb49 0409 	adc.w	r4, r9, r9
 80217b4:	4698      	mov	r8, r3
 80217b6:	46a1      	mov	r9, r4
 80217b8:	eb18 0805 	adds.w	r8, r8, r5
 80217bc:	eb49 0906 	adc.w	r9, r9, r6
 80217c0:	f04f 0100 	mov.w	r1, #0
 80217c4:	f04f 0200 	mov.w	r2, #0
 80217c8:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80217cc:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80217d0:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80217d4:	4688      	mov	r8, r1
 80217d6:	4691      	mov	r9, r2
 80217d8:	eb18 0005 	adds.w	r0, r8, r5
 80217dc:	eb49 0106 	adc.w	r1, r9, r6
 80217e0:	687b      	ldr	r3, [r7, #4]
 80217e2:	685b      	ldr	r3, [r3, #4]
 80217e4:	461d      	mov	r5, r3
 80217e6:	f04f 0600 	mov.w	r6, #0
 80217ea:	196b      	adds	r3, r5, r5
 80217ec:	eb46 0406 	adc.w	r4, r6, r6
 80217f0:	461a      	mov	r2, r3
 80217f2:	4623      	mov	r3, r4
 80217f4:	f7df f9d8 	bl	8000ba8 <__aeabi_uldivmod>
 80217f8:	4603      	mov	r3, r0
 80217fa:	460c      	mov	r4, r1
 80217fc:	461a      	mov	r2, r3
 80217fe:	4b47      	ldr	r3, [pc, #284]	; (802191c <UART_SetConfig+0x384>)
 8021800:	fba3 2302 	umull	r2, r3, r3, r2
 8021804:	095b      	lsrs	r3, r3, #5
 8021806:	ea4f 1803 	mov.w	r8, r3, lsl #4
 802180a:	68bb      	ldr	r3, [r7, #8]
 802180c:	461d      	mov	r5, r3
 802180e:	f04f 0600 	mov.w	r6, #0
 8021812:	46a9      	mov	r9, r5
 8021814:	46b2      	mov	sl, r6
 8021816:	eb19 0309 	adds.w	r3, r9, r9
 802181a:	eb4a 040a 	adc.w	r4, sl, sl
 802181e:	4699      	mov	r9, r3
 8021820:	46a2      	mov	sl, r4
 8021822:	eb19 0905 	adds.w	r9, r9, r5
 8021826:	eb4a 0a06 	adc.w	sl, sl, r6
 802182a:	f04f 0100 	mov.w	r1, #0
 802182e:	f04f 0200 	mov.w	r2, #0
 8021832:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8021836:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 802183a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 802183e:	4689      	mov	r9, r1
 8021840:	4692      	mov	sl, r2
 8021842:	eb19 0005 	adds.w	r0, r9, r5
 8021846:	eb4a 0106 	adc.w	r1, sl, r6
 802184a:	687b      	ldr	r3, [r7, #4]
 802184c:	685b      	ldr	r3, [r3, #4]
 802184e:	461d      	mov	r5, r3
 8021850:	f04f 0600 	mov.w	r6, #0
 8021854:	196b      	adds	r3, r5, r5
 8021856:	eb46 0406 	adc.w	r4, r6, r6
 802185a:	461a      	mov	r2, r3
 802185c:	4623      	mov	r3, r4
 802185e:	f7df f9a3 	bl	8000ba8 <__aeabi_uldivmod>
 8021862:	4603      	mov	r3, r0
 8021864:	460c      	mov	r4, r1
 8021866:	461a      	mov	r2, r3
 8021868:	4b2c      	ldr	r3, [pc, #176]	; (802191c <UART_SetConfig+0x384>)
 802186a:	fba3 1302 	umull	r1, r3, r3, r2
 802186e:	095b      	lsrs	r3, r3, #5
 8021870:	2164      	movs	r1, #100	; 0x64
 8021872:	fb01 f303 	mul.w	r3, r1, r3
 8021876:	1ad3      	subs	r3, r2, r3
 8021878:	00db      	lsls	r3, r3, #3
 802187a:	3332      	adds	r3, #50	; 0x32
 802187c:	4a27      	ldr	r2, [pc, #156]	; (802191c <UART_SetConfig+0x384>)
 802187e:	fba2 2303 	umull	r2, r3, r2, r3
 8021882:	095b      	lsrs	r3, r3, #5
 8021884:	005b      	lsls	r3, r3, #1
 8021886:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 802188a:	4498      	add	r8, r3
 802188c:	68bb      	ldr	r3, [r7, #8]
 802188e:	461d      	mov	r5, r3
 8021890:	f04f 0600 	mov.w	r6, #0
 8021894:	46a9      	mov	r9, r5
 8021896:	46b2      	mov	sl, r6
 8021898:	eb19 0309 	adds.w	r3, r9, r9
 802189c:	eb4a 040a 	adc.w	r4, sl, sl
 80218a0:	4699      	mov	r9, r3
 80218a2:	46a2      	mov	sl, r4
 80218a4:	eb19 0905 	adds.w	r9, r9, r5
 80218a8:	eb4a 0a06 	adc.w	sl, sl, r6
 80218ac:	f04f 0100 	mov.w	r1, #0
 80218b0:	f04f 0200 	mov.w	r2, #0
 80218b4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80218b8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80218bc:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80218c0:	4689      	mov	r9, r1
 80218c2:	4692      	mov	sl, r2
 80218c4:	eb19 0005 	adds.w	r0, r9, r5
 80218c8:	eb4a 0106 	adc.w	r1, sl, r6
 80218cc:	687b      	ldr	r3, [r7, #4]
 80218ce:	685b      	ldr	r3, [r3, #4]
 80218d0:	461d      	mov	r5, r3
 80218d2:	f04f 0600 	mov.w	r6, #0
 80218d6:	196b      	adds	r3, r5, r5
 80218d8:	eb46 0406 	adc.w	r4, r6, r6
 80218dc:	461a      	mov	r2, r3
 80218de:	4623      	mov	r3, r4
 80218e0:	f7df f962 	bl	8000ba8 <__aeabi_uldivmod>
 80218e4:	4603      	mov	r3, r0
 80218e6:	460c      	mov	r4, r1
 80218e8:	461a      	mov	r2, r3
 80218ea:	4b0c      	ldr	r3, [pc, #48]	; (802191c <UART_SetConfig+0x384>)
 80218ec:	fba3 1302 	umull	r1, r3, r3, r2
 80218f0:	095b      	lsrs	r3, r3, #5
 80218f2:	2164      	movs	r1, #100	; 0x64
 80218f4:	fb01 f303 	mul.w	r3, r1, r3
 80218f8:	1ad3      	subs	r3, r2, r3
 80218fa:	00db      	lsls	r3, r3, #3
 80218fc:	3332      	adds	r3, #50	; 0x32
 80218fe:	4a07      	ldr	r2, [pc, #28]	; (802191c <UART_SetConfig+0x384>)
 8021900:	fba2 2303 	umull	r2, r3, r2, r3
 8021904:	095b      	lsrs	r3, r3, #5
 8021906:	f003 0207 	and.w	r2, r3, #7
 802190a:	687b      	ldr	r3, [r7, #4]
 802190c:	681b      	ldr	r3, [r3, #0]
 802190e:	4442      	add	r2, r8
 8021910:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8021912:	e1b2      	b.n	8021c7a <UART_SetConfig+0x6e2>
 8021914:	40011000 	.word	0x40011000
 8021918:	40011400 	.word	0x40011400
 802191c:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8021920:	687b      	ldr	r3, [r7, #4]
 8021922:	681b      	ldr	r3, [r3, #0]
 8021924:	4ad7      	ldr	r2, [pc, #860]	; (8021c84 <UART_SetConfig+0x6ec>)
 8021926:	4293      	cmp	r3, r2
 8021928:	d005      	beq.n	8021936 <UART_SetConfig+0x39e>
 802192a:	687b      	ldr	r3, [r7, #4]
 802192c:	681b      	ldr	r3, [r3, #0]
 802192e:	4ad6      	ldr	r2, [pc, #856]	; (8021c88 <UART_SetConfig+0x6f0>)
 8021930:	4293      	cmp	r3, r2
 8021932:	f040 80d1 	bne.w	8021ad8 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8021936:	f7fe f9c1 	bl	801fcbc <HAL_RCC_GetPCLK2Freq>
 802193a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 802193c:	68bb      	ldr	r3, [r7, #8]
 802193e:	469a      	mov	sl, r3
 8021940:	f04f 0b00 	mov.w	fp, #0
 8021944:	46d0      	mov	r8, sl
 8021946:	46d9      	mov	r9, fp
 8021948:	eb18 0308 	adds.w	r3, r8, r8
 802194c:	eb49 0409 	adc.w	r4, r9, r9
 8021950:	4698      	mov	r8, r3
 8021952:	46a1      	mov	r9, r4
 8021954:	eb18 080a 	adds.w	r8, r8, sl
 8021958:	eb49 090b 	adc.w	r9, r9, fp
 802195c:	f04f 0100 	mov.w	r1, #0
 8021960:	f04f 0200 	mov.w	r2, #0
 8021964:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8021968:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 802196c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8021970:	4688      	mov	r8, r1
 8021972:	4691      	mov	r9, r2
 8021974:	eb1a 0508 	adds.w	r5, sl, r8
 8021978:	eb4b 0609 	adc.w	r6, fp, r9
 802197c:	687b      	ldr	r3, [r7, #4]
 802197e:	685b      	ldr	r3, [r3, #4]
 8021980:	4619      	mov	r1, r3
 8021982:	f04f 0200 	mov.w	r2, #0
 8021986:	f04f 0300 	mov.w	r3, #0
 802198a:	f04f 0400 	mov.w	r4, #0
 802198e:	0094      	lsls	r4, r2, #2
 8021990:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8021994:	008b      	lsls	r3, r1, #2
 8021996:	461a      	mov	r2, r3
 8021998:	4623      	mov	r3, r4
 802199a:	4628      	mov	r0, r5
 802199c:	4631      	mov	r1, r6
 802199e:	f7df f903 	bl	8000ba8 <__aeabi_uldivmod>
 80219a2:	4603      	mov	r3, r0
 80219a4:	460c      	mov	r4, r1
 80219a6:	461a      	mov	r2, r3
 80219a8:	4bb8      	ldr	r3, [pc, #736]	; (8021c8c <UART_SetConfig+0x6f4>)
 80219aa:	fba3 2302 	umull	r2, r3, r3, r2
 80219ae:	095b      	lsrs	r3, r3, #5
 80219b0:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80219b4:	68bb      	ldr	r3, [r7, #8]
 80219b6:	469b      	mov	fp, r3
 80219b8:	f04f 0c00 	mov.w	ip, #0
 80219bc:	46d9      	mov	r9, fp
 80219be:	46e2      	mov	sl, ip
 80219c0:	eb19 0309 	adds.w	r3, r9, r9
 80219c4:	eb4a 040a 	adc.w	r4, sl, sl
 80219c8:	4699      	mov	r9, r3
 80219ca:	46a2      	mov	sl, r4
 80219cc:	eb19 090b 	adds.w	r9, r9, fp
 80219d0:	eb4a 0a0c 	adc.w	sl, sl, ip
 80219d4:	f04f 0100 	mov.w	r1, #0
 80219d8:	f04f 0200 	mov.w	r2, #0
 80219dc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80219e0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80219e4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80219e8:	4689      	mov	r9, r1
 80219ea:	4692      	mov	sl, r2
 80219ec:	eb1b 0509 	adds.w	r5, fp, r9
 80219f0:	eb4c 060a 	adc.w	r6, ip, sl
 80219f4:	687b      	ldr	r3, [r7, #4]
 80219f6:	685b      	ldr	r3, [r3, #4]
 80219f8:	4619      	mov	r1, r3
 80219fa:	f04f 0200 	mov.w	r2, #0
 80219fe:	f04f 0300 	mov.w	r3, #0
 8021a02:	f04f 0400 	mov.w	r4, #0
 8021a06:	0094      	lsls	r4, r2, #2
 8021a08:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8021a0c:	008b      	lsls	r3, r1, #2
 8021a0e:	461a      	mov	r2, r3
 8021a10:	4623      	mov	r3, r4
 8021a12:	4628      	mov	r0, r5
 8021a14:	4631      	mov	r1, r6
 8021a16:	f7df f8c7 	bl	8000ba8 <__aeabi_uldivmod>
 8021a1a:	4603      	mov	r3, r0
 8021a1c:	460c      	mov	r4, r1
 8021a1e:	461a      	mov	r2, r3
 8021a20:	4b9a      	ldr	r3, [pc, #616]	; (8021c8c <UART_SetConfig+0x6f4>)
 8021a22:	fba3 1302 	umull	r1, r3, r3, r2
 8021a26:	095b      	lsrs	r3, r3, #5
 8021a28:	2164      	movs	r1, #100	; 0x64
 8021a2a:	fb01 f303 	mul.w	r3, r1, r3
 8021a2e:	1ad3      	subs	r3, r2, r3
 8021a30:	011b      	lsls	r3, r3, #4
 8021a32:	3332      	adds	r3, #50	; 0x32
 8021a34:	4a95      	ldr	r2, [pc, #596]	; (8021c8c <UART_SetConfig+0x6f4>)
 8021a36:	fba2 2303 	umull	r2, r3, r2, r3
 8021a3a:	095b      	lsrs	r3, r3, #5
 8021a3c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8021a40:	4498      	add	r8, r3
 8021a42:	68bb      	ldr	r3, [r7, #8]
 8021a44:	469b      	mov	fp, r3
 8021a46:	f04f 0c00 	mov.w	ip, #0
 8021a4a:	46d9      	mov	r9, fp
 8021a4c:	46e2      	mov	sl, ip
 8021a4e:	eb19 0309 	adds.w	r3, r9, r9
 8021a52:	eb4a 040a 	adc.w	r4, sl, sl
 8021a56:	4699      	mov	r9, r3
 8021a58:	46a2      	mov	sl, r4
 8021a5a:	eb19 090b 	adds.w	r9, r9, fp
 8021a5e:	eb4a 0a0c 	adc.w	sl, sl, ip
 8021a62:	f04f 0100 	mov.w	r1, #0
 8021a66:	f04f 0200 	mov.w	r2, #0
 8021a6a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8021a6e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8021a72:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8021a76:	4689      	mov	r9, r1
 8021a78:	4692      	mov	sl, r2
 8021a7a:	eb1b 0509 	adds.w	r5, fp, r9
 8021a7e:	eb4c 060a 	adc.w	r6, ip, sl
 8021a82:	687b      	ldr	r3, [r7, #4]
 8021a84:	685b      	ldr	r3, [r3, #4]
 8021a86:	4619      	mov	r1, r3
 8021a88:	f04f 0200 	mov.w	r2, #0
 8021a8c:	f04f 0300 	mov.w	r3, #0
 8021a90:	f04f 0400 	mov.w	r4, #0
 8021a94:	0094      	lsls	r4, r2, #2
 8021a96:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8021a9a:	008b      	lsls	r3, r1, #2
 8021a9c:	461a      	mov	r2, r3
 8021a9e:	4623      	mov	r3, r4
 8021aa0:	4628      	mov	r0, r5
 8021aa2:	4631      	mov	r1, r6
 8021aa4:	f7df f880 	bl	8000ba8 <__aeabi_uldivmod>
 8021aa8:	4603      	mov	r3, r0
 8021aaa:	460c      	mov	r4, r1
 8021aac:	461a      	mov	r2, r3
 8021aae:	4b77      	ldr	r3, [pc, #476]	; (8021c8c <UART_SetConfig+0x6f4>)
 8021ab0:	fba3 1302 	umull	r1, r3, r3, r2
 8021ab4:	095b      	lsrs	r3, r3, #5
 8021ab6:	2164      	movs	r1, #100	; 0x64
 8021ab8:	fb01 f303 	mul.w	r3, r1, r3
 8021abc:	1ad3      	subs	r3, r2, r3
 8021abe:	011b      	lsls	r3, r3, #4
 8021ac0:	3332      	adds	r3, #50	; 0x32
 8021ac2:	4a72      	ldr	r2, [pc, #456]	; (8021c8c <UART_SetConfig+0x6f4>)
 8021ac4:	fba2 2303 	umull	r2, r3, r2, r3
 8021ac8:	095b      	lsrs	r3, r3, #5
 8021aca:	f003 020f 	and.w	r2, r3, #15
 8021ace:	687b      	ldr	r3, [r7, #4]
 8021ad0:	681b      	ldr	r3, [r3, #0]
 8021ad2:	4442      	add	r2, r8
 8021ad4:	609a      	str	r2, [r3, #8]
 8021ad6:	e0d0      	b.n	8021c7a <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8021ad8:	f7fe f8dc 	bl	801fc94 <HAL_RCC_GetPCLK1Freq>
 8021adc:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8021ade:	68bb      	ldr	r3, [r7, #8]
 8021ae0:	469a      	mov	sl, r3
 8021ae2:	f04f 0b00 	mov.w	fp, #0
 8021ae6:	46d0      	mov	r8, sl
 8021ae8:	46d9      	mov	r9, fp
 8021aea:	eb18 0308 	adds.w	r3, r8, r8
 8021aee:	eb49 0409 	adc.w	r4, r9, r9
 8021af2:	4698      	mov	r8, r3
 8021af4:	46a1      	mov	r9, r4
 8021af6:	eb18 080a 	adds.w	r8, r8, sl
 8021afa:	eb49 090b 	adc.w	r9, r9, fp
 8021afe:	f04f 0100 	mov.w	r1, #0
 8021b02:	f04f 0200 	mov.w	r2, #0
 8021b06:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8021b0a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8021b0e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8021b12:	4688      	mov	r8, r1
 8021b14:	4691      	mov	r9, r2
 8021b16:	eb1a 0508 	adds.w	r5, sl, r8
 8021b1a:	eb4b 0609 	adc.w	r6, fp, r9
 8021b1e:	687b      	ldr	r3, [r7, #4]
 8021b20:	685b      	ldr	r3, [r3, #4]
 8021b22:	4619      	mov	r1, r3
 8021b24:	f04f 0200 	mov.w	r2, #0
 8021b28:	f04f 0300 	mov.w	r3, #0
 8021b2c:	f04f 0400 	mov.w	r4, #0
 8021b30:	0094      	lsls	r4, r2, #2
 8021b32:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8021b36:	008b      	lsls	r3, r1, #2
 8021b38:	461a      	mov	r2, r3
 8021b3a:	4623      	mov	r3, r4
 8021b3c:	4628      	mov	r0, r5
 8021b3e:	4631      	mov	r1, r6
 8021b40:	f7df f832 	bl	8000ba8 <__aeabi_uldivmod>
 8021b44:	4603      	mov	r3, r0
 8021b46:	460c      	mov	r4, r1
 8021b48:	461a      	mov	r2, r3
 8021b4a:	4b50      	ldr	r3, [pc, #320]	; (8021c8c <UART_SetConfig+0x6f4>)
 8021b4c:	fba3 2302 	umull	r2, r3, r3, r2
 8021b50:	095b      	lsrs	r3, r3, #5
 8021b52:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8021b56:	68bb      	ldr	r3, [r7, #8]
 8021b58:	469b      	mov	fp, r3
 8021b5a:	f04f 0c00 	mov.w	ip, #0
 8021b5e:	46d9      	mov	r9, fp
 8021b60:	46e2      	mov	sl, ip
 8021b62:	eb19 0309 	adds.w	r3, r9, r9
 8021b66:	eb4a 040a 	adc.w	r4, sl, sl
 8021b6a:	4699      	mov	r9, r3
 8021b6c:	46a2      	mov	sl, r4
 8021b6e:	eb19 090b 	adds.w	r9, r9, fp
 8021b72:	eb4a 0a0c 	adc.w	sl, sl, ip
 8021b76:	f04f 0100 	mov.w	r1, #0
 8021b7a:	f04f 0200 	mov.w	r2, #0
 8021b7e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8021b82:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8021b86:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8021b8a:	4689      	mov	r9, r1
 8021b8c:	4692      	mov	sl, r2
 8021b8e:	eb1b 0509 	adds.w	r5, fp, r9
 8021b92:	eb4c 060a 	adc.w	r6, ip, sl
 8021b96:	687b      	ldr	r3, [r7, #4]
 8021b98:	685b      	ldr	r3, [r3, #4]
 8021b9a:	4619      	mov	r1, r3
 8021b9c:	f04f 0200 	mov.w	r2, #0
 8021ba0:	f04f 0300 	mov.w	r3, #0
 8021ba4:	f04f 0400 	mov.w	r4, #0
 8021ba8:	0094      	lsls	r4, r2, #2
 8021baa:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8021bae:	008b      	lsls	r3, r1, #2
 8021bb0:	461a      	mov	r2, r3
 8021bb2:	4623      	mov	r3, r4
 8021bb4:	4628      	mov	r0, r5
 8021bb6:	4631      	mov	r1, r6
 8021bb8:	f7de fff6 	bl	8000ba8 <__aeabi_uldivmod>
 8021bbc:	4603      	mov	r3, r0
 8021bbe:	460c      	mov	r4, r1
 8021bc0:	461a      	mov	r2, r3
 8021bc2:	4b32      	ldr	r3, [pc, #200]	; (8021c8c <UART_SetConfig+0x6f4>)
 8021bc4:	fba3 1302 	umull	r1, r3, r3, r2
 8021bc8:	095b      	lsrs	r3, r3, #5
 8021bca:	2164      	movs	r1, #100	; 0x64
 8021bcc:	fb01 f303 	mul.w	r3, r1, r3
 8021bd0:	1ad3      	subs	r3, r2, r3
 8021bd2:	011b      	lsls	r3, r3, #4
 8021bd4:	3332      	adds	r3, #50	; 0x32
 8021bd6:	4a2d      	ldr	r2, [pc, #180]	; (8021c8c <UART_SetConfig+0x6f4>)
 8021bd8:	fba2 2303 	umull	r2, r3, r2, r3
 8021bdc:	095b      	lsrs	r3, r3, #5
 8021bde:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8021be2:	4498      	add	r8, r3
 8021be4:	68bb      	ldr	r3, [r7, #8]
 8021be6:	469b      	mov	fp, r3
 8021be8:	f04f 0c00 	mov.w	ip, #0
 8021bec:	46d9      	mov	r9, fp
 8021bee:	46e2      	mov	sl, ip
 8021bf0:	eb19 0309 	adds.w	r3, r9, r9
 8021bf4:	eb4a 040a 	adc.w	r4, sl, sl
 8021bf8:	4699      	mov	r9, r3
 8021bfa:	46a2      	mov	sl, r4
 8021bfc:	eb19 090b 	adds.w	r9, r9, fp
 8021c00:	eb4a 0a0c 	adc.w	sl, sl, ip
 8021c04:	f04f 0100 	mov.w	r1, #0
 8021c08:	f04f 0200 	mov.w	r2, #0
 8021c0c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8021c10:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8021c14:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8021c18:	4689      	mov	r9, r1
 8021c1a:	4692      	mov	sl, r2
 8021c1c:	eb1b 0509 	adds.w	r5, fp, r9
 8021c20:	eb4c 060a 	adc.w	r6, ip, sl
 8021c24:	687b      	ldr	r3, [r7, #4]
 8021c26:	685b      	ldr	r3, [r3, #4]
 8021c28:	4619      	mov	r1, r3
 8021c2a:	f04f 0200 	mov.w	r2, #0
 8021c2e:	f04f 0300 	mov.w	r3, #0
 8021c32:	f04f 0400 	mov.w	r4, #0
 8021c36:	0094      	lsls	r4, r2, #2
 8021c38:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8021c3c:	008b      	lsls	r3, r1, #2
 8021c3e:	461a      	mov	r2, r3
 8021c40:	4623      	mov	r3, r4
 8021c42:	4628      	mov	r0, r5
 8021c44:	4631      	mov	r1, r6
 8021c46:	f7de ffaf 	bl	8000ba8 <__aeabi_uldivmod>
 8021c4a:	4603      	mov	r3, r0
 8021c4c:	460c      	mov	r4, r1
 8021c4e:	461a      	mov	r2, r3
 8021c50:	4b0e      	ldr	r3, [pc, #56]	; (8021c8c <UART_SetConfig+0x6f4>)
 8021c52:	fba3 1302 	umull	r1, r3, r3, r2
 8021c56:	095b      	lsrs	r3, r3, #5
 8021c58:	2164      	movs	r1, #100	; 0x64
 8021c5a:	fb01 f303 	mul.w	r3, r1, r3
 8021c5e:	1ad3      	subs	r3, r2, r3
 8021c60:	011b      	lsls	r3, r3, #4
 8021c62:	3332      	adds	r3, #50	; 0x32
 8021c64:	4a09      	ldr	r2, [pc, #36]	; (8021c8c <UART_SetConfig+0x6f4>)
 8021c66:	fba2 2303 	umull	r2, r3, r2, r3
 8021c6a:	095b      	lsrs	r3, r3, #5
 8021c6c:	f003 020f 	and.w	r2, r3, #15
 8021c70:	687b      	ldr	r3, [r7, #4]
 8021c72:	681b      	ldr	r3, [r3, #0]
 8021c74:	4442      	add	r2, r8
 8021c76:	609a      	str	r2, [r3, #8]
}
 8021c78:	e7ff      	b.n	8021c7a <UART_SetConfig+0x6e2>
 8021c7a:	bf00      	nop
 8021c7c:	3714      	adds	r7, #20
 8021c7e:	46bd      	mov	sp, r7
 8021c80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021c84:	40011000 	.word	0x40011000
 8021c88:	40011400 	.word	0x40011400
 8021c8c:	51eb851f 	.word	0x51eb851f

08021c90 <__errno>:
 8021c90:	4b01      	ldr	r3, [pc, #4]	; (8021c98 <__errno+0x8>)
 8021c92:	6818      	ldr	r0, [r3, #0]
 8021c94:	4770      	bx	lr
 8021c96:	bf00      	nop
 8021c98:	2000000c 	.word	0x2000000c

08021c9c <__libc_init_array>:
 8021c9c:	b570      	push	{r4, r5, r6, lr}
 8021c9e:	4e0d      	ldr	r6, [pc, #52]	; (8021cd4 <__libc_init_array+0x38>)
 8021ca0:	4c0d      	ldr	r4, [pc, #52]	; (8021cd8 <__libc_init_array+0x3c>)
 8021ca2:	1ba4      	subs	r4, r4, r6
 8021ca4:	10a4      	asrs	r4, r4, #2
 8021ca6:	2500      	movs	r5, #0
 8021ca8:	42a5      	cmp	r5, r4
 8021caa:	d109      	bne.n	8021cc0 <__libc_init_array+0x24>
 8021cac:	4e0b      	ldr	r6, [pc, #44]	; (8021cdc <__libc_init_array+0x40>)
 8021cae:	4c0c      	ldr	r4, [pc, #48]	; (8021ce0 <__libc_init_array+0x44>)
 8021cb0:	f001 fce4 	bl	802367c <_init>
 8021cb4:	1ba4      	subs	r4, r4, r6
 8021cb6:	10a4      	asrs	r4, r4, #2
 8021cb8:	2500      	movs	r5, #0
 8021cba:	42a5      	cmp	r5, r4
 8021cbc:	d105      	bne.n	8021cca <__libc_init_array+0x2e>
 8021cbe:	bd70      	pop	{r4, r5, r6, pc}
 8021cc0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8021cc4:	4798      	blx	r3
 8021cc6:	3501      	adds	r5, #1
 8021cc8:	e7ee      	b.n	8021ca8 <__libc_init_array+0xc>
 8021cca:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8021cce:	4798      	blx	r3
 8021cd0:	3501      	adds	r5, #1
 8021cd2:	e7f2      	b.n	8021cba <__libc_init_array+0x1e>
 8021cd4:	0802d010 	.word	0x0802d010
 8021cd8:	0802d010 	.word	0x0802d010
 8021cdc:	0802d010 	.word	0x0802d010
 8021ce0:	0802d014 	.word	0x0802d014

08021ce4 <memcpy>:
 8021ce4:	b510      	push	{r4, lr}
 8021ce6:	1e43      	subs	r3, r0, #1
 8021ce8:	440a      	add	r2, r1
 8021cea:	4291      	cmp	r1, r2
 8021cec:	d100      	bne.n	8021cf0 <memcpy+0xc>
 8021cee:	bd10      	pop	{r4, pc}
 8021cf0:	f811 4b01 	ldrb.w	r4, [r1], #1
 8021cf4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8021cf8:	e7f7      	b.n	8021cea <memcpy+0x6>

08021cfa <memset>:
 8021cfa:	4402      	add	r2, r0
 8021cfc:	4603      	mov	r3, r0
 8021cfe:	4293      	cmp	r3, r2
 8021d00:	d100      	bne.n	8021d04 <memset+0xa>
 8021d02:	4770      	bx	lr
 8021d04:	f803 1b01 	strb.w	r1, [r3], #1
 8021d08:	e7f9      	b.n	8021cfe <memset+0x4>
	...

08021d0c <rand>:
 8021d0c:	b538      	push	{r3, r4, r5, lr}
 8021d0e:	4b13      	ldr	r3, [pc, #76]	; (8021d5c <rand+0x50>)
 8021d10:	681c      	ldr	r4, [r3, #0]
 8021d12:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8021d14:	b97b      	cbnz	r3, 8021d36 <rand+0x2a>
 8021d16:	2018      	movs	r0, #24
 8021d18:	f000 f874 	bl	8021e04 <malloc>
 8021d1c:	4a10      	ldr	r2, [pc, #64]	; (8021d60 <rand+0x54>)
 8021d1e:	4b11      	ldr	r3, [pc, #68]	; (8021d64 <rand+0x58>)
 8021d20:	63a0      	str	r0, [r4, #56]	; 0x38
 8021d22:	e9c0 2300 	strd	r2, r3, [r0]
 8021d26:	4b10      	ldr	r3, [pc, #64]	; (8021d68 <rand+0x5c>)
 8021d28:	6083      	str	r3, [r0, #8]
 8021d2a:	230b      	movs	r3, #11
 8021d2c:	8183      	strh	r3, [r0, #12]
 8021d2e:	2201      	movs	r2, #1
 8021d30:	2300      	movs	r3, #0
 8021d32:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8021d36:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8021d38:	480c      	ldr	r0, [pc, #48]	; (8021d6c <rand+0x60>)
 8021d3a:	690a      	ldr	r2, [r1, #16]
 8021d3c:	694b      	ldr	r3, [r1, #20]
 8021d3e:	4c0c      	ldr	r4, [pc, #48]	; (8021d70 <rand+0x64>)
 8021d40:	4350      	muls	r0, r2
 8021d42:	fb04 0003 	mla	r0, r4, r3, r0
 8021d46:	fba2 2304 	umull	r2, r3, r2, r4
 8021d4a:	4403      	add	r3, r0
 8021d4c:	1c54      	adds	r4, r2, #1
 8021d4e:	f143 0500 	adc.w	r5, r3, #0
 8021d52:	e9c1 4504 	strd	r4, r5, [r1, #16]
 8021d56:	f025 4000 	bic.w	r0, r5, #2147483648	; 0x80000000
 8021d5a:	bd38      	pop	{r3, r4, r5, pc}
 8021d5c:	2000000c 	.word	0x2000000c
 8021d60:	abcd330e 	.word	0xabcd330e
 8021d64:	e66d1234 	.word	0xe66d1234
 8021d68:	0005deec 	.word	0x0005deec
 8021d6c:	5851f42d 	.word	0x5851f42d
 8021d70:	4c957f2d 	.word	0x4c957f2d

08021d74 <siprintf>:
 8021d74:	b40e      	push	{r1, r2, r3}
 8021d76:	b500      	push	{lr}
 8021d78:	b09c      	sub	sp, #112	; 0x70
 8021d7a:	ab1d      	add	r3, sp, #116	; 0x74
 8021d7c:	9002      	str	r0, [sp, #8]
 8021d7e:	9006      	str	r0, [sp, #24]
 8021d80:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8021d84:	4809      	ldr	r0, [pc, #36]	; (8021dac <siprintf+0x38>)
 8021d86:	9107      	str	r1, [sp, #28]
 8021d88:	9104      	str	r1, [sp, #16]
 8021d8a:	4909      	ldr	r1, [pc, #36]	; (8021db0 <siprintf+0x3c>)
 8021d8c:	f853 2b04 	ldr.w	r2, [r3], #4
 8021d90:	9105      	str	r1, [sp, #20]
 8021d92:	6800      	ldr	r0, [r0, #0]
 8021d94:	9301      	str	r3, [sp, #4]
 8021d96:	a902      	add	r1, sp, #8
 8021d98:	f000 f93e 	bl	8022018 <_svfiprintf_r>
 8021d9c:	9b02      	ldr	r3, [sp, #8]
 8021d9e:	2200      	movs	r2, #0
 8021da0:	701a      	strb	r2, [r3, #0]
 8021da2:	b01c      	add	sp, #112	; 0x70
 8021da4:	f85d eb04 	ldr.w	lr, [sp], #4
 8021da8:	b003      	add	sp, #12
 8021daa:	4770      	bx	lr
 8021dac:	2000000c 	.word	0x2000000c
 8021db0:	ffff0208 	.word	0xffff0208

08021db4 <strcpy>:
 8021db4:	4603      	mov	r3, r0
 8021db6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8021dba:	f803 2b01 	strb.w	r2, [r3], #1
 8021dbe:	2a00      	cmp	r2, #0
 8021dc0:	d1f9      	bne.n	8021db6 <strcpy+0x2>
 8021dc2:	4770      	bx	lr

08021dc4 <_vsiprintf_r>:
 8021dc4:	b500      	push	{lr}
 8021dc6:	b09b      	sub	sp, #108	; 0x6c
 8021dc8:	9100      	str	r1, [sp, #0]
 8021dca:	9104      	str	r1, [sp, #16]
 8021dcc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8021dd0:	9105      	str	r1, [sp, #20]
 8021dd2:	9102      	str	r1, [sp, #8]
 8021dd4:	4905      	ldr	r1, [pc, #20]	; (8021dec <_vsiprintf_r+0x28>)
 8021dd6:	9103      	str	r1, [sp, #12]
 8021dd8:	4669      	mov	r1, sp
 8021dda:	f000 f91d 	bl	8022018 <_svfiprintf_r>
 8021dde:	9b00      	ldr	r3, [sp, #0]
 8021de0:	2200      	movs	r2, #0
 8021de2:	701a      	strb	r2, [r3, #0]
 8021de4:	b01b      	add	sp, #108	; 0x6c
 8021de6:	f85d fb04 	ldr.w	pc, [sp], #4
 8021dea:	bf00      	nop
 8021dec:	ffff0208 	.word	0xffff0208

08021df0 <vsiprintf>:
 8021df0:	4613      	mov	r3, r2
 8021df2:	460a      	mov	r2, r1
 8021df4:	4601      	mov	r1, r0
 8021df6:	4802      	ldr	r0, [pc, #8]	; (8021e00 <vsiprintf+0x10>)
 8021df8:	6800      	ldr	r0, [r0, #0]
 8021dfa:	f7ff bfe3 	b.w	8021dc4 <_vsiprintf_r>
 8021dfe:	bf00      	nop
 8021e00:	2000000c 	.word	0x2000000c

08021e04 <malloc>:
 8021e04:	4b02      	ldr	r3, [pc, #8]	; (8021e10 <malloc+0xc>)
 8021e06:	4601      	mov	r1, r0
 8021e08:	6818      	ldr	r0, [r3, #0]
 8021e0a:	f000 b851 	b.w	8021eb0 <_malloc_r>
 8021e0e:	bf00      	nop
 8021e10:	2000000c 	.word	0x2000000c

08021e14 <_free_r>:
 8021e14:	b538      	push	{r3, r4, r5, lr}
 8021e16:	4605      	mov	r5, r0
 8021e18:	2900      	cmp	r1, #0
 8021e1a:	d045      	beq.n	8021ea8 <_free_r+0x94>
 8021e1c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8021e20:	1f0c      	subs	r4, r1, #4
 8021e22:	2b00      	cmp	r3, #0
 8021e24:	bfb8      	it	lt
 8021e26:	18e4      	addlt	r4, r4, r3
 8021e28:	f000 fb9f 	bl	802256a <__malloc_lock>
 8021e2c:	4a1f      	ldr	r2, [pc, #124]	; (8021eac <_free_r+0x98>)
 8021e2e:	6813      	ldr	r3, [r2, #0]
 8021e30:	4610      	mov	r0, r2
 8021e32:	b933      	cbnz	r3, 8021e42 <_free_r+0x2e>
 8021e34:	6063      	str	r3, [r4, #4]
 8021e36:	6014      	str	r4, [r2, #0]
 8021e38:	4628      	mov	r0, r5
 8021e3a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8021e3e:	f000 bb95 	b.w	802256c <__malloc_unlock>
 8021e42:	42a3      	cmp	r3, r4
 8021e44:	d90c      	bls.n	8021e60 <_free_r+0x4c>
 8021e46:	6821      	ldr	r1, [r4, #0]
 8021e48:	1862      	adds	r2, r4, r1
 8021e4a:	4293      	cmp	r3, r2
 8021e4c:	bf04      	itt	eq
 8021e4e:	681a      	ldreq	r2, [r3, #0]
 8021e50:	685b      	ldreq	r3, [r3, #4]
 8021e52:	6063      	str	r3, [r4, #4]
 8021e54:	bf04      	itt	eq
 8021e56:	1852      	addeq	r2, r2, r1
 8021e58:	6022      	streq	r2, [r4, #0]
 8021e5a:	6004      	str	r4, [r0, #0]
 8021e5c:	e7ec      	b.n	8021e38 <_free_r+0x24>
 8021e5e:	4613      	mov	r3, r2
 8021e60:	685a      	ldr	r2, [r3, #4]
 8021e62:	b10a      	cbz	r2, 8021e68 <_free_r+0x54>
 8021e64:	42a2      	cmp	r2, r4
 8021e66:	d9fa      	bls.n	8021e5e <_free_r+0x4a>
 8021e68:	6819      	ldr	r1, [r3, #0]
 8021e6a:	1858      	adds	r0, r3, r1
 8021e6c:	42a0      	cmp	r0, r4
 8021e6e:	d10b      	bne.n	8021e88 <_free_r+0x74>
 8021e70:	6820      	ldr	r0, [r4, #0]
 8021e72:	4401      	add	r1, r0
 8021e74:	1858      	adds	r0, r3, r1
 8021e76:	4282      	cmp	r2, r0
 8021e78:	6019      	str	r1, [r3, #0]
 8021e7a:	d1dd      	bne.n	8021e38 <_free_r+0x24>
 8021e7c:	6810      	ldr	r0, [r2, #0]
 8021e7e:	6852      	ldr	r2, [r2, #4]
 8021e80:	605a      	str	r2, [r3, #4]
 8021e82:	4401      	add	r1, r0
 8021e84:	6019      	str	r1, [r3, #0]
 8021e86:	e7d7      	b.n	8021e38 <_free_r+0x24>
 8021e88:	d902      	bls.n	8021e90 <_free_r+0x7c>
 8021e8a:	230c      	movs	r3, #12
 8021e8c:	602b      	str	r3, [r5, #0]
 8021e8e:	e7d3      	b.n	8021e38 <_free_r+0x24>
 8021e90:	6820      	ldr	r0, [r4, #0]
 8021e92:	1821      	adds	r1, r4, r0
 8021e94:	428a      	cmp	r2, r1
 8021e96:	bf04      	itt	eq
 8021e98:	6811      	ldreq	r1, [r2, #0]
 8021e9a:	6852      	ldreq	r2, [r2, #4]
 8021e9c:	6062      	str	r2, [r4, #4]
 8021e9e:	bf04      	itt	eq
 8021ea0:	1809      	addeq	r1, r1, r0
 8021ea2:	6021      	streq	r1, [r4, #0]
 8021ea4:	605c      	str	r4, [r3, #4]
 8021ea6:	e7c7      	b.n	8021e38 <_free_r+0x24>
 8021ea8:	bd38      	pop	{r3, r4, r5, pc}
 8021eaa:	bf00      	nop
 8021eac:	200000a4 	.word	0x200000a4

08021eb0 <_malloc_r>:
 8021eb0:	b570      	push	{r4, r5, r6, lr}
 8021eb2:	1ccd      	adds	r5, r1, #3
 8021eb4:	f025 0503 	bic.w	r5, r5, #3
 8021eb8:	3508      	adds	r5, #8
 8021eba:	2d0c      	cmp	r5, #12
 8021ebc:	bf38      	it	cc
 8021ebe:	250c      	movcc	r5, #12
 8021ec0:	2d00      	cmp	r5, #0
 8021ec2:	4606      	mov	r6, r0
 8021ec4:	db01      	blt.n	8021eca <_malloc_r+0x1a>
 8021ec6:	42a9      	cmp	r1, r5
 8021ec8:	d903      	bls.n	8021ed2 <_malloc_r+0x22>
 8021eca:	230c      	movs	r3, #12
 8021ecc:	6033      	str	r3, [r6, #0]
 8021ece:	2000      	movs	r0, #0
 8021ed0:	bd70      	pop	{r4, r5, r6, pc}
 8021ed2:	f000 fb4a 	bl	802256a <__malloc_lock>
 8021ed6:	4a21      	ldr	r2, [pc, #132]	; (8021f5c <_malloc_r+0xac>)
 8021ed8:	6814      	ldr	r4, [r2, #0]
 8021eda:	4621      	mov	r1, r4
 8021edc:	b991      	cbnz	r1, 8021f04 <_malloc_r+0x54>
 8021ede:	4c20      	ldr	r4, [pc, #128]	; (8021f60 <_malloc_r+0xb0>)
 8021ee0:	6823      	ldr	r3, [r4, #0]
 8021ee2:	b91b      	cbnz	r3, 8021eec <_malloc_r+0x3c>
 8021ee4:	4630      	mov	r0, r6
 8021ee6:	f000 fb17 	bl	8022518 <_sbrk_r>
 8021eea:	6020      	str	r0, [r4, #0]
 8021eec:	4629      	mov	r1, r5
 8021eee:	4630      	mov	r0, r6
 8021ef0:	f000 fb12 	bl	8022518 <_sbrk_r>
 8021ef4:	1c43      	adds	r3, r0, #1
 8021ef6:	d124      	bne.n	8021f42 <_malloc_r+0x92>
 8021ef8:	230c      	movs	r3, #12
 8021efa:	6033      	str	r3, [r6, #0]
 8021efc:	4630      	mov	r0, r6
 8021efe:	f000 fb35 	bl	802256c <__malloc_unlock>
 8021f02:	e7e4      	b.n	8021ece <_malloc_r+0x1e>
 8021f04:	680b      	ldr	r3, [r1, #0]
 8021f06:	1b5b      	subs	r3, r3, r5
 8021f08:	d418      	bmi.n	8021f3c <_malloc_r+0x8c>
 8021f0a:	2b0b      	cmp	r3, #11
 8021f0c:	d90f      	bls.n	8021f2e <_malloc_r+0x7e>
 8021f0e:	600b      	str	r3, [r1, #0]
 8021f10:	50cd      	str	r5, [r1, r3]
 8021f12:	18cc      	adds	r4, r1, r3
 8021f14:	4630      	mov	r0, r6
 8021f16:	f000 fb29 	bl	802256c <__malloc_unlock>
 8021f1a:	f104 000b 	add.w	r0, r4, #11
 8021f1e:	1d23      	adds	r3, r4, #4
 8021f20:	f020 0007 	bic.w	r0, r0, #7
 8021f24:	1ac3      	subs	r3, r0, r3
 8021f26:	d0d3      	beq.n	8021ed0 <_malloc_r+0x20>
 8021f28:	425a      	negs	r2, r3
 8021f2a:	50e2      	str	r2, [r4, r3]
 8021f2c:	e7d0      	b.n	8021ed0 <_malloc_r+0x20>
 8021f2e:	428c      	cmp	r4, r1
 8021f30:	684b      	ldr	r3, [r1, #4]
 8021f32:	bf16      	itet	ne
 8021f34:	6063      	strne	r3, [r4, #4]
 8021f36:	6013      	streq	r3, [r2, #0]
 8021f38:	460c      	movne	r4, r1
 8021f3a:	e7eb      	b.n	8021f14 <_malloc_r+0x64>
 8021f3c:	460c      	mov	r4, r1
 8021f3e:	6849      	ldr	r1, [r1, #4]
 8021f40:	e7cc      	b.n	8021edc <_malloc_r+0x2c>
 8021f42:	1cc4      	adds	r4, r0, #3
 8021f44:	f024 0403 	bic.w	r4, r4, #3
 8021f48:	42a0      	cmp	r0, r4
 8021f4a:	d005      	beq.n	8021f58 <_malloc_r+0xa8>
 8021f4c:	1a21      	subs	r1, r4, r0
 8021f4e:	4630      	mov	r0, r6
 8021f50:	f000 fae2 	bl	8022518 <_sbrk_r>
 8021f54:	3001      	adds	r0, #1
 8021f56:	d0cf      	beq.n	8021ef8 <_malloc_r+0x48>
 8021f58:	6025      	str	r5, [r4, #0]
 8021f5a:	e7db      	b.n	8021f14 <_malloc_r+0x64>
 8021f5c:	200000a4 	.word	0x200000a4
 8021f60:	200000a8 	.word	0x200000a8

08021f64 <__ssputs_r>:
 8021f64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8021f68:	688e      	ldr	r6, [r1, #8]
 8021f6a:	429e      	cmp	r6, r3
 8021f6c:	4682      	mov	sl, r0
 8021f6e:	460c      	mov	r4, r1
 8021f70:	4690      	mov	r8, r2
 8021f72:	4699      	mov	r9, r3
 8021f74:	d837      	bhi.n	8021fe6 <__ssputs_r+0x82>
 8021f76:	898a      	ldrh	r2, [r1, #12]
 8021f78:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8021f7c:	d031      	beq.n	8021fe2 <__ssputs_r+0x7e>
 8021f7e:	6825      	ldr	r5, [r4, #0]
 8021f80:	6909      	ldr	r1, [r1, #16]
 8021f82:	1a6f      	subs	r7, r5, r1
 8021f84:	6965      	ldr	r5, [r4, #20]
 8021f86:	2302      	movs	r3, #2
 8021f88:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8021f8c:	fb95 f5f3 	sdiv	r5, r5, r3
 8021f90:	f109 0301 	add.w	r3, r9, #1
 8021f94:	443b      	add	r3, r7
 8021f96:	429d      	cmp	r5, r3
 8021f98:	bf38      	it	cc
 8021f9a:	461d      	movcc	r5, r3
 8021f9c:	0553      	lsls	r3, r2, #21
 8021f9e:	d530      	bpl.n	8022002 <__ssputs_r+0x9e>
 8021fa0:	4629      	mov	r1, r5
 8021fa2:	f7ff ff85 	bl	8021eb0 <_malloc_r>
 8021fa6:	4606      	mov	r6, r0
 8021fa8:	b950      	cbnz	r0, 8021fc0 <__ssputs_r+0x5c>
 8021faa:	230c      	movs	r3, #12
 8021fac:	f8ca 3000 	str.w	r3, [sl]
 8021fb0:	89a3      	ldrh	r3, [r4, #12]
 8021fb2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8021fb6:	81a3      	strh	r3, [r4, #12]
 8021fb8:	f04f 30ff 	mov.w	r0, #4294967295
 8021fbc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8021fc0:	463a      	mov	r2, r7
 8021fc2:	6921      	ldr	r1, [r4, #16]
 8021fc4:	f7ff fe8e 	bl	8021ce4 <memcpy>
 8021fc8:	89a3      	ldrh	r3, [r4, #12]
 8021fca:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8021fce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8021fd2:	81a3      	strh	r3, [r4, #12]
 8021fd4:	6126      	str	r6, [r4, #16]
 8021fd6:	6165      	str	r5, [r4, #20]
 8021fd8:	443e      	add	r6, r7
 8021fda:	1bed      	subs	r5, r5, r7
 8021fdc:	6026      	str	r6, [r4, #0]
 8021fde:	60a5      	str	r5, [r4, #8]
 8021fe0:	464e      	mov	r6, r9
 8021fe2:	454e      	cmp	r6, r9
 8021fe4:	d900      	bls.n	8021fe8 <__ssputs_r+0x84>
 8021fe6:	464e      	mov	r6, r9
 8021fe8:	4632      	mov	r2, r6
 8021fea:	4641      	mov	r1, r8
 8021fec:	6820      	ldr	r0, [r4, #0]
 8021fee:	f000 faa3 	bl	8022538 <memmove>
 8021ff2:	68a3      	ldr	r3, [r4, #8]
 8021ff4:	1b9b      	subs	r3, r3, r6
 8021ff6:	60a3      	str	r3, [r4, #8]
 8021ff8:	6823      	ldr	r3, [r4, #0]
 8021ffa:	441e      	add	r6, r3
 8021ffc:	6026      	str	r6, [r4, #0]
 8021ffe:	2000      	movs	r0, #0
 8022000:	e7dc      	b.n	8021fbc <__ssputs_r+0x58>
 8022002:	462a      	mov	r2, r5
 8022004:	f000 fab3 	bl	802256e <_realloc_r>
 8022008:	4606      	mov	r6, r0
 802200a:	2800      	cmp	r0, #0
 802200c:	d1e2      	bne.n	8021fd4 <__ssputs_r+0x70>
 802200e:	6921      	ldr	r1, [r4, #16]
 8022010:	4650      	mov	r0, sl
 8022012:	f7ff feff 	bl	8021e14 <_free_r>
 8022016:	e7c8      	b.n	8021faa <__ssputs_r+0x46>

08022018 <_svfiprintf_r>:
 8022018:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802201c:	461d      	mov	r5, r3
 802201e:	898b      	ldrh	r3, [r1, #12]
 8022020:	061f      	lsls	r7, r3, #24
 8022022:	b09d      	sub	sp, #116	; 0x74
 8022024:	4680      	mov	r8, r0
 8022026:	460c      	mov	r4, r1
 8022028:	4616      	mov	r6, r2
 802202a:	d50f      	bpl.n	802204c <_svfiprintf_r+0x34>
 802202c:	690b      	ldr	r3, [r1, #16]
 802202e:	b96b      	cbnz	r3, 802204c <_svfiprintf_r+0x34>
 8022030:	2140      	movs	r1, #64	; 0x40
 8022032:	f7ff ff3d 	bl	8021eb0 <_malloc_r>
 8022036:	6020      	str	r0, [r4, #0]
 8022038:	6120      	str	r0, [r4, #16]
 802203a:	b928      	cbnz	r0, 8022048 <_svfiprintf_r+0x30>
 802203c:	230c      	movs	r3, #12
 802203e:	f8c8 3000 	str.w	r3, [r8]
 8022042:	f04f 30ff 	mov.w	r0, #4294967295
 8022046:	e0c8      	b.n	80221da <_svfiprintf_r+0x1c2>
 8022048:	2340      	movs	r3, #64	; 0x40
 802204a:	6163      	str	r3, [r4, #20]
 802204c:	2300      	movs	r3, #0
 802204e:	9309      	str	r3, [sp, #36]	; 0x24
 8022050:	2320      	movs	r3, #32
 8022052:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8022056:	2330      	movs	r3, #48	; 0x30
 8022058:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 802205c:	9503      	str	r5, [sp, #12]
 802205e:	f04f 0b01 	mov.w	fp, #1
 8022062:	4637      	mov	r7, r6
 8022064:	463d      	mov	r5, r7
 8022066:	f815 3b01 	ldrb.w	r3, [r5], #1
 802206a:	b10b      	cbz	r3, 8022070 <_svfiprintf_r+0x58>
 802206c:	2b25      	cmp	r3, #37	; 0x25
 802206e:	d13e      	bne.n	80220ee <_svfiprintf_r+0xd6>
 8022070:	ebb7 0a06 	subs.w	sl, r7, r6
 8022074:	d00b      	beq.n	802208e <_svfiprintf_r+0x76>
 8022076:	4653      	mov	r3, sl
 8022078:	4632      	mov	r2, r6
 802207a:	4621      	mov	r1, r4
 802207c:	4640      	mov	r0, r8
 802207e:	f7ff ff71 	bl	8021f64 <__ssputs_r>
 8022082:	3001      	adds	r0, #1
 8022084:	f000 80a4 	beq.w	80221d0 <_svfiprintf_r+0x1b8>
 8022088:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802208a:	4453      	add	r3, sl
 802208c:	9309      	str	r3, [sp, #36]	; 0x24
 802208e:	783b      	ldrb	r3, [r7, #0]
 8022090:	2b00      	cmp	r3, #0
 8022092:	f000 809d 	beq.w	80221d0 <_svfiprintf_r+0x1b8>
 8022096:	2300      	movs	r3, #0
 8022098:	f04f 32ff 	mov.w	r2, #4294967295
 802209c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80220a0:	9304      	str	r3, [sp, #16]
 80220a2:	9307      	str	r3, [sp, #28]
 80220a4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80220a8:	931a      	str	r3, [sp, #104]	; 0x68
 80220aa:	462f      	mov	r7, r5
 80220ac:	2205      	movs	r2, #5
 80220ae:	f817 1b01 	ldrb.w	r1, [r7], #1
 80220b2:	4850      	ldr	r0, [pc, #320]	; (80221f4 <_svfiprintf_r+0x1dc>)
 80220b4:	f7de f89c 	bl	80001f0 <memchr>
 80220b8:	9b04      	ldr	r3, [sp, #16]
 80220ba:	b9d0      	cbnz	r0, 80220f2 <_svfiprintf_r+0xda>
 80220bc:	06d9      	lsls	r1, r3, #27
 80220be:	bf44      	itt	mi
 80220c0:	2220      	movmi	r2, #32
 80220c2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80220c6:	071a      	lsls	r2, r3, #28
 80220c8:	bf44      	itt	mi
 80220ca:	222b      	movmi	r2, #43	; 0x2b
 80220cc:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80220d0:	782a      	ldrb	r2, [r5, #0]
 80220d2:	2a2a      	cmp	r2, #42	; 0x2a
 80220d4:	d015      	beq.n	8022102 <_svfiprintf_r+0xea>
 80220d6:	9a07      	ldr	r2, [sp, #28]
 80220d8:	462f      	mov	r7, r5
 80220da:	2000      	movs	r0, #0
 80220dc:	250a      	movs	r5, #10
 80220de:	4639      	mov	r1, r7
 80220e0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80220e4:	3b30      	subs	r3, #48	; 0x30
 80220e6:	2b09      	cmp	r3, #9
 80220e8:	d94d      	bls.n	8022186 <_svfiprintf_r+0x16e>
 80220ea:	b1b8      	cbz	r0, 802211c <_svfiprintf_r+0x104>
 80220ec:	e00f      	b.n	802210e <_svfiprintf_r+0xf6>
 80220ee:	462f      	mov	r7, r5
 80220f0:	e7b8      	b.n	8022064 <_svfiprintf_r+0x4c>
 80220f2:	4a40      	ldr	r2, [pc, #256]	; (80221f4 <_svfiprintf_r+0x1dc>)
 80220f4:	1a80      	subs	r0, r0, r2
 80220f6:	fa0b f000 	lsl.w	r0, fp, r0
 80220fa:	4318      	orrs	r0, r3
 80220fc:	9004      	str	r0, [sp, #16]
 80220fe:	463d      	mov	r5, r7
 8022100:	e7d3      	b.n	80220aa <_svfiprintf_r+0x92>
 8022102:	9a03      	ldr	r2, [sp, #12]
 8022104:	1d11      	adds	r1, r2, #4
 8022106:	6812      	ldr	r2, [r2, #0]
 8022108:	9103      	str	r1, [sp, #12]
 802210a:	2a00      	cmp	r2, #0
 802210c:	db01      	blt.n	8022112 <_svfiprintf_r+0xfa>
 802210e:	9207      	str	r2, [sp, #28]
 8022110:	e004      	b.n	802211c <_svfiprintf_r+0x104>
 8022112:	4252      	negs	r2, r2
 8022114:	f043 0302 	orr.w	r3, r3, #2
 8022118:	9207      	str	r2, [sp, #28]
 802211a:	9304      	str	r3, [sp, #16]
 802211c:	783b      	ldrb	r3, [r7, #0]
 802211e:	2b2e      	cmp	r3, #46	; 0x2e
 8022120:	d10c      	bne.n	802213c <_svfiprintf_r+0x124>
 8022122:	787b      	ldrb	r3, [r7, #1]
 8022124:	2b2a      	cmp	r3, #42	; 0x2a
 8022126:	d133      	bne.n	8022190 <_svfiprintf_r+0x178>
 8022128:	9b03      	ldr	r3, [sp, #12]
 802212a:	1d1a      	adds	r2, r3, #4
 802212c:	681b      	ldr	r3, [r3, #0]
 802212e:	9203      	str	r2, [sp, #12]
 8022130:	2b00      	cmp	r3, #0
 8022132:	bfb8      	it	lt
 8022134:	f04f 33ff 	movlt.w	r3, #4294967295
 8022138:	3702      	adds	r7, #2
 802213a:	9305      	str	r3, [sp, #20]
 802213c:	4d2e      	ldr	r5, [pc, #184]	; (80221f8 <_svfiprintf_r+0x1e0>)
 802213e:	7839      	ldrb	r1, [r7, #0]
 8022140:	2203      	movs	r2, #3
 8022142:	4628      	mov	r0, r5
 8022144:	f7de f854 	bl	80001f0 <memchr>
 8022148:	b138      	cbz	r0, 802215a <_svfiprintf_r+0x142>
 802214a:	2340      	movs	r3, #64	; 0x40
 802214c:	1b40      	subs	r0, r0, r5
 802214e:	fa03 f000 	lsl.w	r0, r3, r0
 8022152:	9b04      	ldr	r3, [sp, #16]
 8022154:	4303      	orrs	r3, r0
 8022156:	3701      	adds	r7, #1
 8022158:	9304      	str	r3, [sp, #16]
 802215a:	7839      	ldrb	r1, [r7, #0]
 802215c:	4827      	ldr	r0, [pc, #156]	; (80221fc <_svfiprintf_r+0x1e4>)
 802215e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8022162:	2206      	movs	r2, #6
 8022164:	1c7e      	adds	r6, r7, #1
 8022166:	f7de f843 	bl	80001f0 <memchr>
 802216a:	2800      	cmp	r0, #0
 802216c:	d038      	beq.n	80221e0 <_svfiprintf_r+0x1c8>
 802216e:	4b24      	ldr	r3, [pc, #144]	; (8022200 <_svfiprintf_r+0x1e8>)
 8022170:	bb13      	cbnz	r3, 80221b8 <_svfiprintf_r+0x1a0>
 8022172:	9b03      	ldr	r3, [sp, #12]
 8022174:	3307      	adds	r3, #7
 8022176:	f023 0307 	bic.w	r3, r3, #7
 802217a:	3308      	adds	r3, #8
 802217c:	9303      	str	r3, [sp, #12]
 802217e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8022180:	444b      	add	r3, r9
 8022182:	9309      	str	r3, [sp, #36]	; 0x24
 8022184:	e76d      	b.n	8022062 <_svfiprintf_r+0x4a>
 8022186:	fb05 3202 	mla	r2, r5, r2, r3
 802218a:	2001      	movs	r0, #1
 802218c:	460f      	mov	r7, r1
 802218e:	e7a6      	b.n	80220de <_svfiprintf_r+0xc6>
 8022190:	2300      	movs	r3, #0
 8022192:	3701      	adds	r7, #1
 8022194:	9305      	str	r3, [sp, #20]
 8022196:	4619      	mov	r1, r3
 8022198:	250a      	movs	r5, #10
 802219a:	4638      	mov	r0, r7
 802219c:	f810 2b01 	ldrb.w	r2, [r0], #1
 80221a0:	3a30      	subs	r2, #48	; 0x30
 80221a2:	2a09      	cmp	r2, #9
 80221a4:	d903      	bls.n	80221ae <_svfiprintf_r+0x196>
 80221a6:	2b00      	cmp	r3, #0
 80221a8:	d0c8      	beq.n	802213c <_svfiprintf_r+0x124>
 80221aa:	9105      	str	r1, [sp, #20]
 80221ac:	e7c6      	b.n	802213c <_svfiprintf_r+0x124>
 80221ae:	fb05 2101 	mla	r1, r5, r1, r2
 80221b2:	2301      	movs	r3, #1
 80221b4:	4607      	mov	r7, r0
 80221b6:	e7f0      	b.n	802219a <_svfiprintf_r+0x182>
 80221b8:	ab03      	add	r3, sp, #12
 80221ba:	9300      	str	r3, [sp, #0]
 80221bc:	4622      	mov	r2, r4
 80221be:	4b11      	ldr	r3, [pc, #68]	; (8022204 <_svfiprintf_r+0x1ec>)
 80221c0:	a904      	add	r1, sp, #16
 80221c2:	4640      	mov	r0, r8
 80221c4:	f3af 8000 	nop.w
 80221c8:	f1b0 3fff 	cmp.w	r0, #4294967295
 80221cc:	4681      	mov	r9, r0
 80221ce:	d1d6      	bne.n	802217e <_svfiprintf_r+0x166>
 80221d0:	89a3      	ldrh	r3, [r4, #12]
 80221d2:	065b      	lsls	r3, r3, #25
 80221d4:	f53f af35 	bmi.w	8022042 <_svfiprintf_r+0x2a>
 80221d8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80221da:	b01d      	add	sp, #116	; 0x74
 80221dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80221e0:	ab03      	add	r3, sp, #12
 80221e2:	9300      	str	r3, [sp, #0]
 80221e4:	4622      	mov	r2, r4
 80221e6:	4b07      	ldr	r3, [pc, #28]	; (8022204 <_svfiprintf_r+0x1ec>)
 80221e8:	a904      	add	r1, sp, #16
 80221ea:	4640      	mov	r0, r8
 80221ec:	f000 f882 	bl	80222f4 <_printf_i>
 80221f0:	e7ea      	b.n	80221c8 <_svfiprintf_r+0x1b0>
 80221f2:	bf00      	nop
 80221f4:	0802cf90 	.word	0x0802cf90
 80221f8:	0802cf96 	.word	0x0802cf96
 80221fc:	0802cf9a 	.word	0x0802cf9a
 8022200:	00000000 	.word	0x00000000
 8022204:	08021f65 	.word	0x08021f65

08022208 <_printf_common>:
 8022208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802220c:	4691      	mov	r9, r2
 802220e:	461f      	mov	r7, r3
 8022210:	688a      	ldr	r2, [r1, #8]
 8022212:	690b      	ldr	r3, [r1, #16]
 8022214:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8022218:	4293      	cmp	r3, r2
 802221a:	bfb8      	it	lt
 802221c:	4613      	movlt	r3, r2
 802221e:	f8c9 3000 	str.w	r3, [r9]
 8022222:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8022226:	4606      	mov	r6, r0
 8022228:	460c      	mov	r4, r1
 802222a:	b112      	cbz	r2, 8022232 <_printf_common+0x2a>
 802222c:	3301      	adds	r3, #1
 802222e:	f8c9 3000 	str.w	r3, [r9]
 8022232:	6823      	ldr	r3, [r4, #0]
 8022234:	0699      	lsls	r1, r3, #26
 8022236:	bf42      	ittt	mi
 8022238:	f8d9 3000 	ldrmi.w	r3, [r9]
 802223c:	3302      	addmi	r3, #2
 802223e:	f8c9 3000 	strmi.w	r3, [r9]
 8022242:	6825      	ldr	r5, [r4, #0]
 8022244:	f015 0506 	ands.w	r5, r5, #6
 8022248:	d107      	bne.n	802225a <_printf_common+0x52>
 802224a:	f104 0a19 	add.w	sl, r4, #25
 802224e:	68e3      	ldr	r3, [r4, #12]
 8022250:	f8d9 2000 	ldr.w	r2, [r9]
 8022254:	1a9b      	subs	r3, r3, r2
 8022256:	42ab      	cmp	r3, r5
 8022258:	dc28      	bgt.n	80222ac <_printf_common+0xa4>
 802225a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 802225e:	6822      	ldr	r2, [r4, #0]
 8022260:	3300      	adds	r3, #0
 8022262:	bf18      	it	ne
 8022264:	2301      	movne	r3, #1
 8022266:	0692      	lsls	r2, r2, #26
 8022268:	d42d      	bmi.n	80222c6 <_printf_common+0xbe>
 802226a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 802226e:	4639      	mov	r1, r7
 8022270:	4630      	mov	r0, r6
 8022272:	47c0      	blx	r8
 8022274:	3001      	adds	r0, #1
 8022276:	d020      	beq.n	80222ba <_printf_common+0xb2>
 8022278:	6823      	ldr	r3, [r4, #0]
 802227a:	68e5      	ldr	r5, [r4, #12]
 802227c:	f8d9 2000 	ldr.w	r2, [r9]
 8022280:	f003 0306 	and.w	r3, r3, #6
 8022284:	2b04      	cmp	r3, #4
 8022286:	bf08      	it	eq
 8022288:	1aad      	subeq	r5, r5, r2
 802228a:	68a3      	ldr	r3, [r4, #8]
 802228c:	6922      	ldr	r2, [r4, #16]
 802228e:	bf0c      	ite	eq
 8022290:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8022294:	2500      	movne	r5, #0
 8022296:	4293      	cmp	r3, r2
 8022298:	bfc4      	itt	gt
 802229a:	1a9b      	subgt	r3, r3, r2
 802229c:	18ed      	addgt	r5, r5, r3
 802229e:	f04f 0900 	mov.w	r9, #0
 80222a2:	341a      	adds	r4, #26
 80222a4:	454d      	cmp	r5, r9
 80222a6:	d11a      	bne.n	80222de <_printf_common+0xd6>
 80222a8:	2000      	movs	r0, #0
 80222aa:	e008      	b.n	80222be <_printf_common+0xb6>
 80222ac:	2301      	movs	r3, #1
 80222ae:	4652      	mov	r2, sl
 80222b0:	4639      	mov	r1, r7
 80222b2:	4630      	mov	r0, r6
 80222b4:	47c0      	blx	r8
 80222b6:	3001      	adds	r0, #1
 80222b8:	d103      	bne.n	80222c2 <_printf_common+0xba>
 80222ba:	f04f 30ff 	mov.w	r0, #4294967295
 80222be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80222c2:	3501      	adds	r5, #1
 80222c4:	e7c3      	b.n	802224e <_printf_common+0x46>
 80222c6:	18e1      	adds	r1, r4, r3
 80222c8:	1c5a      	adds	r2, r3, #1
 80222ca:	2030      	movs	r0, #48	; 0x30
 80222cc:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80222d0:	4422      	add	r2, r4
 80222d2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80222d6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80222da:	3302      	adds	r3, #2
 80222dc:	e7c5      	b.n	802226a <_printf_common+0x62>
 80222de:	2301      	movs	r3, #1
 80222e0:	4622      	mov	r2, r4
 80222e2:	4639      	mov	r1, r7
 80222e4:	4630      	mov	r0, r6
 80222e6:	47c0      	blx	r8
 80222e8:	3001      	adds	r0, #1
 80222ea:	d0e6      	beq.n	80222ba <_printf_common+0xb2>
 80222ec:	f109 0901 	add.w	r9, r9, #1
 80222f0:	e7d8      	b.n	80222a4 <_printf_common+0x9c>
	...

080222f4 <_printf_i>:
 80222f4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80222f8:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80222fc:	460c      	mov	r4, r1
 80222fe:	7e09      	ldrb	r1, [r1, #24]
 8022300:	b085      	sub	sp, #20
 8022302:	296e      	cmp	r1, #110	; 0x6e
 8022304:	4617      	mov	r7, r2
 8022306:	4606      	mov	r6, r0
 8022308:	4698      	mov	r8, r3
 802230a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 802230c:	f000 80b3 	beq.w	8022476 <_printf_i+0x182>
 8022310:	d822      	bhi.n	8022358 <_printf_i+0x64>
 8022312:	2963      	cmp	r1, #99	; 0x63
 8022314:	d036      	beq.n	8022384 <_printf_i+0x90>
 8022316:	d80a      	bhi.n	802232e <_printf_i+0x3a>
 8022318:	2900      	cmp	r1, #0
 802231a:	f000 80b9 	beq.w	8022490 <_printf_i+0x19c>
 802231e:	2958      	cmp	r1, #88	; 0x58
 8022320:	f000 8083 	beq.w	802242a <_printf_i+0x136>
 8022324:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8022328:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 802232c:	e032      	b.n	8022394 <_printf_i+0xa0>
 802232e:	2964      	cmp	r1, #100	; 0x64
 8022330:	d001      	beq.n	8022336 <_printf_i+0x42>
 8022332:	2969      	cmp	r1, #105	; 0x69
 8022334:	d1f6      	bne.n	8022324 <_printf_i+0x30>
 8022336:	6820      	ldr	r0, [r4, #0]
 8022338:	6813      	ldr	r3, [r2, #0]
 802233a:	0605      	lsls	r5, r0, #24
 802233c:	f103 0104 	add.w	r1, r3, #4
 8022340:	d52a      	bpl.n	8022398 <_printf_i+0xa4>
 8022342:	681b      	ldr	r3, [r3, #0]
 8022344:	6011      	str	r1, [r2, #0]
 8022346:	2b00      	cmp	r3, #0
 8022348:	da03      	bge.n	8022352 <_printf_i+0x5e>
 802234a:	222d      	movs	r2, #45	; 0x2d
 802234c:	425b      	negs	r3, r3
 802234e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8022352:	486f      	ldr	r0, [pc, #444]	; (8022510 <_printf_i+0x21c>)
 8022354:	220a      	movs	r2, #10
 8022356:	e039      	b.n	80223cc <_printf_i+0xd8>
 8022358:	2973      	cmp	r1, #115	; 0x73
 802235a:	f000 809d 	beq.w	8022498 <_printf_i+0x1a4>
 802235e:	d808      	bhi.n	8022372 <_printf_i+0x7e>
 8022360:	296f      	cmp	r1, #111	; 0x6f
 8022362:	d020      	beq.n	80223a6 <_printf_i+0xb2>
 8022364:	2970      	cmp	r1, #112	; 0x70
 8022366:	d1dd      	bne.n	8022324 <_printf_i+0x30>
 8022368:	6823      	ldr	r3, [r4, #0]
 802236a:	f043 0320 	orr.w	r3, r3, #32
 802236e:	6023      	str	r3, [r4, #0]
 8022370:	e003      	b.n	802237a <_printf_i+0x86>
 8022372:	2975      	cmp	r1, #117	; 0x75
 8022374:	d017      	beq.n	80223a6 <_printf_i+0xb2>
 8022376:	2978      	cmp	r1, #120	; 0x78
 8022378:	d1d4      	bne.n	8022324 <_printf_i+0x30>
 802237a:	2378      	movs	r3, #120	; 0x78
 802237c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8022380:	4864      	ldr	r0, [pc, #400]	; (8022514 <_printf_i+0x220>)
 8022382:	e055      	b.n	8022430 <_printf_i+0x13c>
 8022384:	6813      	ldr	r3, [r2, #0]
 8022386:	1d19      	adds	r1, r3, #4
 8022388:	681b      	ldr	r3, [r3, #0]
 802238a:	6011      	str	r1, [r2, #0]
 802238c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8022390:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8022394:	2301      	movs	r3, #1
 8022396:	e08c      	b.n	80224b2 <_printf_i+0x1be>
 8022398:	681b      	ldr	r3, [r3, #0]
 802239a:	6011      	str	r1, [r2, #0]
 802239c:	f010 0f40 	tst.w	r0, #64	; 0x40
 80223a0:	bf18      	it	ne
 80223a2:	b21b      	sxthne	r3, r3
 80223a4:	e7cf      	b.n	8022346 <_printf_i+0x52>
 80223a6:	6813      	ldr	r3, [r2, #0]
 80223a8:	6825      	ldr	r5, [r4, #0]
 80223aa:	1d18      	adds	r0, r3, #4
 80223ac:	6010      	str	r0, [r2, #0]
 80223ae:	0628      	lsls	r0, r5, #24
 80223b0:	d501      	bpl.n	80223b6 <_printf_i+0xc2>
 80223b2:	681b      	ldr	r3, [r3, #0]
 80223b4:	e002      	b.n	80223bc <_printf_i+0xc8>
 80223b6:	0668      	lsls	r0, r5, #25
 80223b8:	d5fb      	bpl.n	80223b2 <_printf_i+0xbe>
 80223ba:	881b      	ldrh	r3, [r3, #0]
 80223bc:	4854      	ldr	r0, [pc, #336]	; (8022510 <_printf_i+0x21c>)
 80223be:	296f      	cmp	r1, #111	; 0x6f
 80223c0:	bf14      	ite	ne
 80223c2:	220a      	movne	r2, #10
 80223c4:	2208      	moveq	r2, #8
 80223c6:	2100      	movs	r1, #0
 80223c8:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80223cc:	6865      	ldr	r5, [r4, #4]
 80223ce:	60a5      	str	r5, [r4, #8]
 80223d0:	2d00      	cmp	r5, #0
 80223d2:	f2c0 8095 	blt.w	8022500 <_printf_i+0x20c>
 80223d6:	6821      	ldr	r1, [r4, #0]
 80223d8:	f021 0104 	bic.w	r1, r1, #4
 80223dc:	6021      	str	r1, [r4, #0]
 80223de:	2b00      	cmp	r3, #0
 80223e0:	d13d      	bne.n	802245e <_printf_i+0x16a>
 80223e2:	2d00      	cmp	r5, #0
 80223e4:	f040 808e 	bne.w	8022504 <_printf_i+0x210>
 80223e8:	4665      	mov	r5, ip
 80223ea:	2a08      	cmp	r2, #8
 80223ec:	d10b      	bne.n	8022406 <_printf_i+0x112>
 80223ee:	6823      	ldr	r3, [r4, #0]
 80223f0:	07db      	lsls	r3, r3, #31
 80223f2:	d508      	bpl.n	8022406 <_printf_i+0x112>
 80223f4:	6923      	ldr	r3, [r4, #16]
 80223f6:	6862      	ldr	r2, [r4, #4]
 80223f8:	429a      	cmp	r2, r3
 80223fa:	bfde      	ittt	le
 80223fc:	2330      	movle	r3, #48	; 0x30
 80223fe:	f805 3c01 	strble.w	r3, [r5, #-1]
 8022402:	f105 35ff 	addle.w	r5, r5, #4294967295
 8022406:	ebac 0305 	sub.w	r3, ip, r5
 802240a:	6123      	str	r3, [r4, #16]
 802240c:	f8cd 8000 	str.w	r8, [sp]
 8022410:	463b      	mov	r3, r7
 8022412:	aa03      	add	r2, sp, #12
 8022414:	4621      	mov	r1, r4
 8022416:	4630      	mov	r0, r6
 8022418:	f7ff fef6 	bl	8022208 <_printf_common>
 802241c:	3001      	adds	r0, #1
 802241e:	d14d      	bne.n	80224bc <_printf_i+0x1c8>
 8022420:	f04f 30ff 	mov.w	r0, #4294967295
 8022424:	b005      	add	sp, #20
 8022426:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 802242a:	4839      	ldr	r0, [pc, #228]	; (8022510 <_printf_i+0x21c>)
 802242c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8022430:	6813      	ldr	r3, [r2, #0]
 8022432:	6821      	ldr	r1, [r4, #0]
 8022434:	1d1d      	adds	r5, r3, #4
 8022436:	681b      	ldr	r3, [r3, #0]
 8022438:	6015      	str	r5, [r2, #0]
 802243a:	060a      	lsls	r2, r1, #24
 802243c:	d50b      	bpl.n	8022456 <_printf_i+0x162>
 802243e:	07ca      	lsls	r2, r1, #31
 8022440:	bf44      	itt	mi
 8022442:	f041 0120 	orrmi.w	r1, r1, #32
 8022446:	6021      	strmi	r1, [r4, #0]
 8022448:	b91b      	cbnz	r3, 8022452 <_printf_i+0x15e>
 802244a:	6822      	ldr	r2, [r4, #0]
 802244c:	f022 0220 	bic.w	r2, r2, #32
 8022450:	6022      	str	r2, [r4, #0]
 8022452:	2210      	movs	r2, #16
 8022454:	e7b7      	b.n	80223c6 <_printf_i+0xd2>
 8022456:	064d      	lsls	r5, r1, #25
 8022458:	bf48      	it	mi
 802245a:	b29b      	uxthmi	r3, r3
 802245c:	e7ef      	b.n	802243e <_printf_i+0x14a>
 802245e:	4665      	mov	r5, ip
 8022460:	fbb3 f1f2 	udiv	r1, r3, r2
 8022464:	fb02 3311 	mls	r3, r2, r1, r3
 8022468:	5cc3      	ldrb	r3, [r0, r3]
 802246a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 802246e:	460b      	mov	r3, r1
 8022470:	2900      	cmp	r1, #0
 8022472:	d1f5      	bne.n	8022460 <_printf_i+0x16c>
 8022474:	e7b9      	b.n	80223ea <_printf_i+0xf6>
 8022476:	6813      	ldr	r3, [r2, #0]
 8022478:	6825      	ldr	r5, [r4, #0]
 802247a:	6961      	ldr	r1, [r4, #20]
 802247c:	1d18      	adds	r0, r3, #4
 802247e:	6010      	str	r0, [r2, #0]
 8022480:	0628      	lsls	r0, r5, #24
 8022482:	681b      	ldr	r3, [r3, #0]
 8022484:	d501      	bpl.n	802248a <_printf_i+0x196>
 8022486:	6019      	str	r1, [r3, #0]
 8022488:	e002      	b.n	8022490 <_printf_i+0x19c>
 802248a:	066a      	lsls	r2, r5, #25
 802248c:	d5fb      	bpl.n	8022486 <_printf_i+0x192>
 802248e:	8019      	strh	r1, [r3, #0]
 8022490:	2300      	movs	r3, #0
 8022492:	6123      	str	r3, [r4, #16]
 8022494:	4665      	mov	r5, ip
 8022496:	e7b9      	b.n	802240c <_printf_i+0x118>
 8022498:	6813      	ldr	r3, [r2, #0]
 802249a:	1d19      	adds	r1, r3, #4
 802249c:	6011      	str	r1, [r2, #0]
 802249e:	681d      	ldr	r5, [r3, #0]
 80224a0:	6862      	ldr	r2, [r4, #4]
 80224a2:	2100      	movs	r1, #0
 80224a4:	4628      	mov	r0, r5
 80224a6:	f7dd fea3 	bl	80001f0 <memchr>
 80224aa:	b108      	cbz	r0, 80224b0 <_printf_i+0x1bc>
 80224ac:	1b40      	subs	r0, r0, r5
 80224ae:	6060      	str	r0, [r4, #4]
 80224b0:	6863      	ldr	r3, [r4, #4]
 80224b2:	6123      	str	r3, [r4, #16]
 80224b4:	2300      	movs	r3, #0
 80224b6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80224ba:	e7a7      	b.n	802240c <_printf_i+0x118>
 80224bc:	6923      	ldr	r3, [r4, #16]
 80224be:	462a      	mov	r2, r5
 80224c0:	4639      	mov	r1, r7
 80224c2:	4630      	mov	r0, r6
 80224c4:	47c0      	blx	r8
 80224c6:	3001      	adds	r0, #1
 80224c8:	d0aa      	beq.n	8022420 <_printf_i+0x12c>
 80224ca:	6823      	ldr	r3, [r4, #0]
 80224cc:	079b      	lsls	r3, r3, #30
 80224ce:	d413      	bmi.n	80224f8 <_printf_i+0x204>
 80224d0:	68e0      	ldr	r0, [r4, #12]
 80224d2:	9b03      	ldr	r3, [sp, #12]
 80224d4:	4298      	cmp	r0, r3
 80224d6:	bfb8      	it	lt
 80224d8:	4618      	movlt	r0, r3
 80224da:	e7a3      	b.n	8022424 <_printf_i+0x130>
 80224dc:	2301      	movs	r3, #1
 80224de:	464a      	mov	r2, r9
 80224e0:	4639      	mov	r1, r7
 80224e2:	4630      	mov	r0, r6
 80224e4:	47c0      	blx	r8
 80224e6:	3001      	adds	r0, #1
 80224e8:	d09a      	beq.n	8022420 <_printf_i+0x12c>
 80224ea:	3501      	adds	r5, #1
 80224ec:	68e3      	ldr	r3, [r4, #12]
 80224ee:	9a03      	ldr	r2, [sp, #12]
 80224f0:	1a9b      	subs	r3, r3, r2
 80224f2:	42ab      	cmp	r3, r5
 80224f4:	dcf2      	bgt.n	80224dc <_printf_i+0x1e8>
 80224f6:	e7eb      	b.n	80224d0 <_printf_i+0x1dc>
 80224f8:	2500      	movs	r5, #0
 80224fa:	f104 0919 	add.w	r9, r4, #25
 80224fe:	e7f5      	b.n	80224ec <_printf_i+0x1f8>
 8022500:	2b00      	cmp	r3, #0
 8022502:	d1ac      	bne.n	802245e <_printf_i+0x16a>
 8022504:	7803      	ldrb	r3, [r0, #0]
 8022506:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 802250a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 802250e:	e76c      	b.n	80223ea <_printf_i+0xf6>
 8022510:	0802cfa1 	.word	0x0802cfa1
 8022514:	0802cfb2 	.word	0x0802cfb2

08022518 <_sbrk_r>:
 8022518:	b538      	push	{r3, r4, r5, lr}
 802251a:	4c06      	ldr	r4, [pc, #24]	; (8022534 <_sbrk_r+0x1c>)
 802251c:	2300      	movs	r3, #0
 802251e:	4605      	mov	r5, r0
 8022520:	4608      	mov	r0, r1
 8022522:	6023      	str	r3, [r4, #0]
 8022524:	f7fa ffaa 	bl	801d47c <_sbrk>
 8022528:	1c43      	adds	r3, r0, #1
 802252a:	d102      	bne.n	8022532 <_sbrk_r+0x1a>
 802252c:	6823      	ldr	r3, [r4, #0]
 802252e:	b103      	cbz	r3, 8022532 <_sbrk_r+0x1a>
 8022530:	602b      	str	r3, [r5, #0]
 8022532:	bd38      	pop	{r3, r4, r5, pc}
 8022534:	2000563c 	.word	0x2000563c

08022538 <memmove>:
 8022538:	4288      	cmp	r0, r1
 802253a:	b510      	push	{r4, lr}
 802253c:	eb01 0302 	add.w	r3, r1, r2
 8022540:	d807      	bhi.n	8022552 <memmove+0x1a>
 8022542:	1e42      	subs	r2, r0, #1
 8022544:	4299      	cmp	r1, r3
 8022546:	d00a      	beq.n	802255e <memmove+0x26>
 8022548:	f811 4b01 	ldrb.w	r4, [r1], #1
 802254c:	f802 4f01 	strb.w	r4, [r2, #1]!
 8022550:	e7f8      	b.n	8022544 <memmove+0xc>
 8022552:	4283      	cmp	r3, r0
 8022554:	d9f5      	bls.n	8022542 <memmove+0xa>
 8022556:	1881      	adds	r1, r0, r2
 8022558:	1ad2      	subs	r2, r2, r3
 802255a:	42d3      	cmn	r3, r2
 802255c:	d100      	bne.n	8022560 <memmove+0x28>
 802255e:	bd10      	pop	{r4, pc}
 8022560:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8022564:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8022568:	e7f7      	b.n	802255a <memmove+0x22>

0802256a <__malloc_lock>:
 802256a:	4770      	bx	lr

0802256c <__malloc_unlock>:
 802256c:	4770      	bx	lr

0802256e <_realloc_r>:
 802256e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8022570:	4607      	mov	r7, r0
 8022572:	4614      	mov	r4, r2
 8022574:	460e      	mov	r6, r1
 8022576:	b921      	cbnz	r1, 8022582 <_realloc_r+0x14>
 8022578:	4611      	mov	r1, r2
 802257a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 802257e:	f7ff bc97 	b.w	8021eb0 <_malloc_r>
 8022582:	b922      	cbnz	r2, 802258e <_realloc_r+0x20>
 8022584:	f7ff fc46 	bl	8021e14 <_free_r>
 8022588:	4625      	mov	r5, r4
 802258a:	4628      	mov	r0, r5
 802258c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802258e:	f000 f814 	bl	80225ba <_malloc_usable_size_r>
 8022592:	42a0      	cmp	r0, r4
 8022594:	d20f      	bcs.n	80225b6 <_realloc_r+0x48>
 8022596:	4621      	mov	r1, r4
 8022598:	4638      	mov	r0, r7
 802259a:	f7ff fc89 	bl	8021eb0 <_malloc_r>
 802259e:	4605      	mov	r5, r0
 80225a0:	2800      	cmp	r0, #0
 80225a2:	d0f2      	beq.n	802258a <_realloc_r+0x1c>
 80225a4:	4631      	mov	r1, r6
 80225a6:	4622      	mov	r2, r4
 80225a8:	f7ff fb9c 	bl	8021ce4 <memcpy>
 80225ac:	4631      	mov	r1, r6
 80225ae:	4638      	mov	r0, r7
 80225b0:	f7ff fc30 	bl	8021e14 <_free_r>
 80225b4:	e7e9      	b.n	802258a <_realloc_r+0x1c>
 80225b6:	4635      	mov	r5, r6
 80225b8:	e7e7      	b.n	802258a <_realloc_r+0x1c>

080225ba <_malloc_usable_size_r>:
 80225ba:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80225be:	1f18      	subs	r0, r3, #4
 80225c0:	2b00      	cmp	r3, #0
 80225c2:	bfbc      	itt	lt
 80225c4:	580b      	ldrlt	r3, [r1, r0]
 80225c6:	18c0      	addlt	r0, r0, r3
 80225c8:	4770      	bx	lr
	...

080225cc <pow>:
 80225cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80225d0:	ed2d 8b04 	vpush	{d8-d9}
 80225d4:	f8df 92d0 	ldr.w	r9, [pc, #720]	; 80228a8 <pow+0x2dc>
 80225d8:	b08d      	sub	sp, #52	; 0x34
 80225da:	ec57 6b10 	vmov	r6, r7, d0
 80225de:	ec55 4b11 	vmov	r4, r5, d1
 80225e2:	f000 f965 	bl	80228b0 <__ieee754_pow>
 80225e6:	f999 3000 	ldrsb.w	r3, [r9]
 80225ea:	9300      	str	r3, [sp, #0]
 80225ec:	3301      	adds	r3, #1
 80225ee:	eeb0 8a40 	vmov.f32	s16, s0
 80225f2:	eef0 8a60 	vmov.f32	s17, s1
 80225f6:	46c8      	mov	r8, r9
 80225f8:	d05f      	beq.n	80226ba <pow+0xee>
 80225fa:	4622      	mov	r2, r4
 80225fc:	462b      	mov	r3, r5
 80225fe:	4620      	mov	r0, r4
 8022600:	4629      	mov	r1, r5
 8022602:	f7de fa9b 	bl	8000b3c <__aeabi_dcmpun>
 8022606:	4683      	mov	fp, r0
 8022608:	2800      	cmp	r0, #0
 802260a:	d156      	bne.n	80226ba <pow+0xee>
 802260c:	4632      	mov	r2, r6
 802260e:	463b      	mov	r3, r7
 8022610:	4630      	mov	r0, r6
 8022612:	4639      	mov	r1, r7
 8022614:	f7de fa92 	bl	8000b3c <__aeabi_dcmpun>
 8022618:	9001      	str	r0, [sp, #4]
 802261a:	b1e8      	cbz	r0, 8022658 <pow+0x8c>
 802261c:	2200      	movs	r2, #0
 802261e:	2300      	movs	r3, #0
 8022620:	4620      	mov	r0, r4
 8022622:	4629      	mov	r1, r5
 8022624:	f7de fa58 	bl	8000ad8 <__aeabi_dcmpeq>
 8022628:	2800      	cmp	r0, #0
 802262a:	d046      	beq.n	80226ba <pow+0xee>
 802262c:	2301      	movs	r3, #1
 802262e:	9302      	str	r3, [sp, #8]
 8022630:	4b96      	ldr	r3, [pc, #600]	; (802288c <pow+0x2c0>)
 8022632:	9303      	str	r3, [sp, #12]
 8022634:	4b96      	ldr	r3, [pc, #600]	; (8022890 <pow+0x2c4>)
 8022636:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 802263a:	2200      	movs	r2, #0
 802263c:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8022640:	9b00      	ldr	r3, [sp, #0]
 8022642:	2b02      	cmp	r3, #2
 8022644:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8022648:	e9cd 4506 	strd	r4, r5, [sp, #24]
 802264c:	d033      	beq.n	80226b6 <pow+0xea>
 802264e:	a802      	add	r0, sp, #8
 8022650:	f000 fefd 	bl	802344e <matherr>
 8022654:	bb48      	cbnz	r0, 80226aa <pow+0xde>
 8022656:	e05d      	b.n	8022714 <pow+0x148>
 8022658:	f04f 0a00 	mov.w	sl, #0
 802265c:	f04f 0b00 	mov.w	fp, #0
 8022660:	4652      	mov	r2, sl
 8022662:	465b      	mov	r3, fp
 8022664:	4630      	mov	r0, r6
 8022666:	4639      	mov	r1, r7
 8022668:	f7de fa36 	bl	8000ad8 <__aeabi_dcmpeq>
 802266c:	ec4b ab19 	vmov	d9, sl, fp
 8022670:	2800      	cmp	r0, #0
 8022672:	d054      	beq.n	802271e <pow+0x152>
 8022674:	4652      	mov	r2, sl
 8022676:	465b      	mov	r3, fp
 8022678:	4620      	mov	r0, r4
 802267a:	4629      	mov	r1, r5
 802267c:	f7de fa2c 	bl	8000ad8 <__aeabi_dcmpeq>
 8022680:	4680      	mov	r8, r0
 8022682:	b318      	cbz	r0, 80226cc <pow+0x100>
 8022684:	2301      	movs	r3, #1
 8022686:	9302      	str	r3, [sp, #8]
 8022688:	4b80      	ldr	r3, [pc, #512]	; (802288c <pow+0x2c0>)
 802268a:	9303      	str	r3, [sp, #12]
 802268c:	9b01      	ldr	r3, [sp, #4]
 802268e:	930a      	str	r3, [sp, #40]	; 0x28
 8022690:	9b00      	ldr	r3, [sp, #0]
 8022692:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8022696:	e9cd 4506 	strd	r4, r5, [sp, #24]
 802269a:	e9cd ab08 	strd	sl, fp, [sp, #32]
 802269e:	2b00      	cmp	r3, #0
 80226a0:	d0d5      	beq.n	802264e <pow+0x82>
 80226a2:	4b7b      	ldr	r3, [pc, #492]	; (8022890 <pow+0x2c4>)
 80226a4:	2200      	movs	r2, #0
 80226a6:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80226aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80226ac:	b11b      	cbz	r3, 80226b6 <pow+0xea>
 80226ae:	f7ff faef 	bl	8021c90 <__errno>
 80226b2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80226b4:	6003      	str	r3, [r0, #0]
 80226b6:	ed9d 8b08 	vldr	d8, [sp, #32]
 80226ba:	eeb0 0a48 	vmov.f32	s0, s16
 80226be:	eef0 0a68 	vmov.f32	s1, s17
 80226c2:	b00d      	add	sp, #52	; 0x34
 80226c4:	ecbd 8b04 	vpop	{d8-d9}
 80226c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80226cc:	ec45 4b10 	vmov	d0, r4, r5
 80226d0:	f000 feb5 	bl	802343e <finite>
 80226d4:	2800      	cmp	r0, #0
 80226d6:	d0f0      	beq.n	80226ba <pow+0xee>
 80226d8:	4652      	mov	r2, sl
 80226da:	465b      	mov	r3, fp
 80226dc:	4620      	mov	r0, r4
 80226de:	4629      	mov	r1, r5
 80226e0:	f7de fa04 	bl	8000aec <__aeabi_dcmplt>
 80226e4:	2800      	cmp	r0, #0
 80226e6:	d0e8      	beq.n	80226ba <pow+0xee>
 80226e8:	2301      	movs	r3, #1
 80226ea:	9302      	str	r3, [sp, #8]
 80226ec:	4b67      	ldr	r3, [pc, #412]	; (802288c <pow+0x2c0>)
 80226ee:	9303      	str	r3, [sp, #12]
 80226f0:	f999 3000 	ldrsb.w	r3, [r9]
 80226f4:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 80226f8:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80226fc:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8022700:	b913      	cbnz	r3, 8022708 <pow+0x13c>
 8022702:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8022706:	e7a2      	b.n	802264e <pow+0x82>
 8022708:	4962      	ldr	r1, [pc, #392]	; (8022894 <pow+0x2c8>)
 802270a:	2000      	movs	r0, #0
 802270c:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8022710:	2b02      	cmp	r3, #2
 8022712:	d19c      	bne.n	802264e <pow+0x82>
 8022714:	f7ff fabc 	bl	8021c90 <__errno>
 8022718:	2321      	movs	r3, #33	; 0x21
 802271a:	6003      	str	r3, [r0, #0]
 802271c:	e7c5      	b.n	80226aa <pow+0xde>
 802271e:	eeb0 0a48 	vmov.f32	s0, s16
 8022722:	eef0 0a68 	vmov.f32	s1, s17
 8022726:	f000 fe8a 	bl	802343e <finite>
 802272a:	9000      	str	r0, [sp, #0]
 802272c:	2800      	cmp	r0, #0
 802272e:	f040 8081 	bne.w	8022834 <pow+0x268>
 8022732:	ec47 6b10 	vmov	d0, r6, r7
 8022736:	f000 fe82 	bl	802343e <finite>
 802273a:	2800      	cmp	r0, #0
 802273c:	d07a      	beq.n	8022834 <pow+0x268>
 802273e:	ec45 4b10 	vmov	d0, r4, r5
 8022742:	f000 fe7c 	bl	802343e <finite>
 8022746:	2800      	cmp	r0, #0
 8022748:	d074      	beq.n	8022834 <pow+0x268>
 802274a:	ec53 2b18 	vmov	r2, r3, d8
 802274e:	ee18 0a10 	vmov	r0, s16
 8022752:	4619      	mov	r1, r3
 8022754:	f7de f9f2 	bl	8000b3c <__aeabi_dcmpun>
 8022758:	f999 9000 	ldrsb.w	r9, [r9]
 802275c:	4b4b      	ldr	r3, [pc, #300]	; (802288c <pow+0x2c0>)
 802275e:	b1b0      	cbz	r0, 802278e <pow+0x1c2>
 8022760:	2201      	movs	r2, #1
 8022762:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8022766:	9b00      	ldr	r3, [sp, #0]
 8022768:	930a      	str	r3, [sp, #40]	; 0x28
 802276a:	e9cd 6704 	strd	r6, r7, [sp, #16]
 802276e:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8022772:	f1b9 0f00 	cmp.w	r9, #0
 8022776:	d0c4      	beq.n	8022702 <pow+0x136>
 8022778:	4652      	mov	r2, sl
 802277a:	465b      	mov	r3, fp
 802277c:	4650      	mov	r0, sl
 802277e:	4659      	mov	r1, fp
 8022780:	f7de f86c 	bl	800085c <__aeabi_ddiv>
 8022784:	f1b9 0f02 	cmp.w	r9, #2
 8022788:	e9cd 0108 	strd	r0, r1, [sp, #32]
 802278c:	e7c1      	b.n	8022712 <pow+0x146>
 802278e:	2203      	movs	r2, #3
 8022790:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8022794:	900a      	str	r0, [sp, #40]	; 0x28
 8022796:	4629      	mov	r1, r5
 8022798:	4620      	mov	r0, r4
 802279a:	2200      	movs	r2, #0
 802279c:	4b3e      	ldr	r3, [pc, #248]	; (8022898 <pow+0x2cc>)
 802279e:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80227a2:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80227a6:	f7dd ff2f 	bl	8000608 <__aeabi_dmul>
 80227aa:	4604      	mov	r4, r0
 80227ac:	460d      	mov	r5, r1
 80227ae:	f1b9 0f00 	cmp.w	r9, #0
 80227b2:	d124      	bne.n	80227fe <pow+0x232>
 80227b4:	4b39      	ldr	r3, [pc, #228]	; (802289c <pow+0x2d0>)
 80227b6:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80227ba:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80227be:	4630      	mov	r0, r6
 80227c0:	4652      	mov	r2, sl
 80227c2:	465b      	mov	r3, fp
 80227c4:	4639      	mov	r1, r7
 80227c6:	f7de f991 	bl	8000aec <__aeabi_dcmplt>
 80227ca:	2800      	cmp	r0, #0
 80227cc:	d056      	beq.n	802287c <pow+0x2b0>
 80227ce:	ec45 4b10 	vmov	d0, r4, r5
 80227d2:	f000 fe49 	bl	8023468 <rint>
 80227d6:	4622      	mov	r2, r4
 80227d8:	462b      	mov	r3, r5
 80227da:	ec51 0b10 	vmov	r0, r1, d0
 80227de:	f7de f97b 	bl	8000ad8 <__aeabi_dcmpeq>
 80227e2:	b920      	cbnz	r0, 80227ee <pow+0x222>
 80227e4:	4b2e      	ldr	r3, [pc, #184]	; (80228a0 <pow+0x2d4>)
 80227e6:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80227ea:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80227ee:	f998 3000 	ldrsb.w	r3, [r8]
 80227f2:	2b02      	cmp	r3, #2
 80227f4:	d142      	bne.n	802287c <pow+0x2b0>
 80227f6:	f7ff fa4b 	bl	8021c90 <__errno>
 80227fa:	2322      	movs	r3, #34	; 0x22
 80227fc:	e78d      	b.n	802271a <pow+0x14e>
 80227fe:	4b29      	ldr	r3, [pc, #164]	; (80228a4 <pow+0x2d8>)
 8022800:	2200      	movs	r2, #0
 8022802:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8022806:	4630      	mov	r0, r6
 8022808:	4652      	mov	r2, sl
 802280a:	465b      	mov	r3, fp
 802280c:	4639      	mov	r1, r7
 802280e:	f7de f96d 	bl	8000aec <__aeabi_dcmplt>
 8022812:	2800      	cmp	r0, #0
 8022814:	d0eb      	beq.n	80227ee <pow+0x222>
 8022816:	ec45 4b10 	vmov	d0, r4, r5
 802281a:	f000 fe25 	bl	8023468 <rint>
 802281e:	4622      	mov	r2, r4
 8022820:	462b      	mov	r3, r5
 8022822:	ec51 0b10 	vmov	r0, r1, d0
 8022826:	f7de f957 	bl	8000ad8 <__aeabi_dcmpeq>
 802282a:	2800      	cmp	r0, #0
 802282c:	d1df      	bne.n	80227ee <pow+0x222>
 802282e:	2200      	movs	r2, #0
 8022830:	4b18      	ldr	r3, [pc, #96]	; (8022894 <pow+0x2c8>)
 8022832:	e7da      	b.n	80227ea <pow+0x21e>
 8022834:	2200      	movs	r2, #0
 8022836:	2300      	movs	r3, #0
 8022838:	ec51 0b18 	vmov	r0, r1, d8
 802283c:	f7de f94c 	bl	8000ad8 <__aeabi_dcmpeq>
 8022840:	2800      	cmp	r0, #0
 8022842:	f43f af3a 	beq.w	80226ba <pow+0xee>
 8022846:	ec47 6b10 	vmov	d0, r6, r7
 802284a:	f000 fdf8 	bl	802343e <finite>
 802284e:	2800      	cmp	r0, #0
 8022850:	f43f af33 	beq.w	80226ba <pow+0xee>
 8022854:	ec45 4b10 	vmov	d0, r4, r5
 8022858:	f000 fdf1 	bl	802343e <finite>
 802285c:	2800      	cmp	r0, #0
 802285e:	f43f af2c 	beq.w	80226ba <pow+0xee>
 8022862:	2304      	movs	r3, #4
 8022864:	9302      	str	r3, [sp, #8]
 8022866:	4b09      	ldr	r3, [pc, #36]	; (802288c <pow+0x2c0>)
 8022868:	9303      	str	r3, [sp, #12]
 802286a:	2300      	movs	r3, #0
 802286c:	930a      	str	r3, [sp, #40]	; 0x28
 802286e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8022872:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8022876:	ed8d 9b08 	vstr	d9, [sp, #32]
 802287a:	e7b8      	b.n	80227ee <pow+0x222>
 802287c:	a802      	add	r0, sp, #8
 802287e:	f000 fde6 	bl	802344e <matherr>
 8022882:	2800      	cmp	r0, #0
 8022884:	f47f af11 	bne.w	80226aa <pow+0xde>
 8022888:	e7b5      	b.n	80227f6 <pow+0x22a>
 802288a:	bf00      	nop
 802288c:	0802cfc3 	.word	0x0802cfc3
 8022890:	3ff00000 	.word	0x3ff00000
 8022894:	fff00000 	.word	0xfff00000
 8022898:	3fe00000 	.word	0x3fe00000
 802289c:	47efffff 	.word	0x47efffff
 80228a0:	c7efffff 	.word	0xc7efffff
 80228a4:	7ff00000 	.word	0x7ff00000
 80228a8:	20000070 	.word	0x20000070
 80228ac:	00000000 	.word	0x00000000

080228b0 <__ieee754_pow>:
 80228b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80228b4:	b091      	sub	sp, #68	; 0x44
 80228b6:	ed8d 1b00 	vstr	d1, [sp]
 80228ba:	e9dd 2900 	ldrd	r2, r9, [sp]
 80228be:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 80228c2:	ea58 0302 	orrs.w	r3, r8, r2
 80228c6:	ec57 6b10 	vmov	r6, r7, d0
 80228ca:	f000 84be 	beq.w	802324a <__ieee754_pow+0x99a>
 80228ce:	4b7a      	ldr	r3, [pc, #488]	; (8022ab8 <__ieee754_pow+0x208>)
 80228d0:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 80228d4:	429c      	cmp	r4, r3
 80228d6:	463d      	mov	r5, r7
 80228d8:	ee10 aa10 	vmov	sl, s0
 80228dc:	dc09      	bgt.n	80228f2 <__ieee754_pow+0x42>
 80228de:	d103      	bne.n	80228e8 <__ieee754_pow+0x38>
 80228e0:	b93e      	cbnz	r6, 80228f2 <__ieee754_pow+0x42>
 80228e2:	45a0      	cmp	r8, r4
 80228e4:	dc0d      	bgt.n	8022902 <__ieee754_pow+0x52>
 80228e6:	e001      	b.n	80228ec <__ieee754_pow+0x3c>
 80228e8:	4598      	cmp	r8, r3
 80228ea:	dc02      	bgt.n	80228f2 <__ieee754_pow+0x42>
 80228ec:	4598      	cmp	r8, r3
 80228ee:	d10e      	bne.n	802290e <__ieee754_pow+0x5e>
 80228f0:	b16a      	cbz	r2, 802290e <__ieee754_pow+0x5e>
 80228f2:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80228f6:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80228fa:	ea54 030a 	orrs.w	r3, r4, sl
 80228fe:	f000 84a4 	beq.w	802324a <__ieee754_pow+0x99a>
 8022902:	486e      	ldr	r0, [pc, #440]	; (8022abc <__ieee754_pow+0x20c>)
 8022904:	b011      	add	sp, #68	; 0x44
 8022906:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802290a:	f000 bda5 	b.w	8023458 <nan>
 802290e:	2d00      	cmp	r5, #0
 8022910:	da53      	bge.n	80229ba <__ieee754_pow+0x10a>
 8022912:	4b6b      	ldr	r3, [pc, #428]	; (8022ac0 <__ieee754_pow+0x210>)
 8022914:	4598      	cmp	r8, r3
 8022916:	dc4d      	bgt.n	80229b4 <__ieee754_pow+0x104>
 8022918:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 802291c:	4598      	cmp	r8, r3
 802291e:	dd4c      	ble.n	80229ba <__ieee754_pow+0x10a>
 8022920:	ea4f 5328 	mov.w	r3, r8, asr #20
 8022924:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8022928:	2b14      	cmp	r3, #20
 802292a:	dd26      	ble.n	802297a <__ieee754_pow+0xca>
 802292c:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8022930:	fa22 f103 	lsr.w	r1, r2, r3
 8022934:	fa01 f303 	lsl.w	r3, r1, r3
 8022938:	4293      	cmp	r3, r2
 802293a:	d13e      	bne.n	80229ba <__ieee754_pow+0x10a>
 802293c:	f001 0101 	and.w	r1, r1, #1
 8022940:	f1c1 0b02 	rsb	fp, r1, #2
 8022944:	2a00      	cmp	r2, #0
 8022946:	d15b      	bne.n	8022a00 <__ieee754_pow+0x150>
 8022948:	4b5b      	ldr	r3, [pc, #364]	; (8022ab8 <__ieee754_pow+0x208>)
 802294a:	4598      	cmp	r8, r3
 802294c:	d124      	bne.n	8022998 <__ieee754_pow+0xe8>
 802294e:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8022952:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8022956:	ea53 030a 	orrs.w	r3, r3, sl
 802295a:	f000 8476 	beq.w	802324a <__ieee754_pow+0x99a>
 802295e:	4b59      	ldr	r3, [pc, #356]	; (8022ac4 <__ieee754_pow+0x214>)
 8022960:	429c      	cmp	r4, r3
 8022962:	dd2d      	ble.n	80229c0 <__ieee754_pow+0x110>
 8022964:	f1b9 0f00 	cmp.w	r9, #0
 8022968:	f280 8473 	bge.w	8023252 <__ieee754_pow+0x9a2>
 802296c:	2000      	movs	r0, #0
 802296e:	2100      	movs	r1, #0
 8022970:	ec41 0b10 	vmov	d0, r0, r1
 8022974:	b011      	add	sp, #68	; 0x44
 8022976:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802297a:	2a00      	cmp	r2, #0
 802297c:	d13e      	bne.n	80229fc <__ieee754_pow+0x14c>
 802297e:	f1c3 0314 	rsb	r3, r3, #20
 8022982:	fa48 f103 	asr.w	r1, r8, r3
 8022986:	fa01 f303 	lsl.w	r3, r1, r3
 802298a:	4543      	cmp	r3, r8
 802298c:	f040 8469 	bne.w	8023262 <__ieee754_pow+0x9b2>
 8022990:	f001 0101 	and.w	r1, r1, #1
 8022994:	f1c1 0b02 	rsb	fp, r1, #2
 8022998:	4b4b      	ldr	r3, [pc, #300]	; (8022ac8 <__ieee754_pow+0x218>)
 802299a:	4598      	cmp	r8, r3
 802299c:	d118      	bne.n	80229d0 <__ieee754_pow+0x120>
 802299e:	f1b9 0f00 	cmp.w	r9, #0
 80229a2:	f280 845a 	bge.w	802325a <__ieee754_pow+0x9aa>
 80229a6:	4948      	ldr	r1, [pc, #288]	; (8022ac8 <__ieee754_pow+0x218>)
 80229a8:	4632      	mov	r2, r6
 80229aa:	463b      	mov	r3, r7
 80229ac:	2000      	movs	r0, #0
 80229ae:	f7dd ff55 	bl	800085c <__aeabi_ddiv>
 80229b2:	e7dd      	b.n	8022970 <__ieee754_pow+0xc0>
 80229b4:	f04f 0b02 	mov.w	fp, #2
 80229b8:	e7c4      	b.n	8022944 <__ieee754_pow+0x94>
 80229ba:	f04f 0b00 	mov.w	fp, #0
 80229be:	e7c1      	b.n	8022944 <__ieee754_pow+0x94>
 80229c0:	f1b9 0f00 	cmp.w	r9, #0
 80229c4:	dad2      	bge.n	802296c <__ieee754_pow+0xbc>
 80229c6:	e9dd 0300 	ldrd	r0, r3, [sp]
 80229ca:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80229ce:	e7cf      	b.n	8022970 <__ieee754_pow+0xc0>
 80229d0:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 80229d4:	d106      	bne.n	80229e4 <__ieee754_pow+0x134>
 80229d6:	4632      	mov	r2, r6
 80229d8:	463b      	mov	r3, r7
 80229da:	4610      	mov	r0, r2
 80229dc:	4619      	mov	r1, r3
 80229de:	f7dd fe13 	bl	8000608 <__aeabi_dmul>
 80229e2:	e7c5      	b.n	8022970 <__ieee754_pow+0xc0>
 80229e4:	4b39      	ldr	r3, [pc, #228]	; (8022acc <__ieee754_pow+0x21c>)
 80229e6:	4599      	cmp	r9, r3
 80229e8:	d10a      	bne.n	8022a00 <__ieee754_pow+0x150>
 80229ea:	2d00      	cmp	r5, #0
 80229ec:	db08      	blt.n	8022a00 <__ieee754_pow+0x150>
 80229ee:	ec47 6b10 	vmov	d0, r6, r7
 80229f2:	b011      	add	sp, #68	; 0x44
 80229f4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80229f8:	f000 bc68 	b.w	80232cc <__ieee754_sqrt>
 80229fc:	f04f 0b00 	mov.w	fp, #0
 8022a00:	ec47 6b10 	vmov	d0, r6, r7
 8022a04:	f000 fd12 	bl	802342c <fabs>
 8022a08:	ec51 0b10 	vmov	r0, r1, d0
 8022a0c:	f1ba 0f00 	cmp.w	sl, #0
 8022a10:	d127      	bne.n	8022a62 <__ieee754_pow+0x1b2>
 8022a12:	b124      	cbz	r4, 8022a1e <__ieee754_pow+0x16e>
 8022a14:	4b2c      	ldr	r3, [pc, #176]	; (8022ac8 <__ieee754_pow+0x218>)
 8022a16:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8022a1a:	429a      	cmp	r2, r3
 8022a1c:	d121      	bne.n	8022a62 <__ieee754_pow+0x1b2>
 8022a1e:	f1b9 0f00 	cmp.w	r9, #0
 8022a22:	da05      	bge.n	8022a30 <__ieee754_pow+0x180>
 8022a24:	4602      	mov	r2, r0
 8022a26:	460b      	mov	r3, r1
 8022a28:	2000      	movs	r0, #0
 8022a2a:	4927      	ldr	r1, [pc, #156]	; (8022ac8 <__ieee754_pow+0x218>)
 8022a2c:	f7dd ff16 	bl	800085c <__aeabi_ddiv>
 8022a30:	2d00      	cmp	r5, #0
 8022a32:	da9d      	bge.n	8022970 <__ieee754_pow+0xc0>
 8022a34:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8022a38:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8022a3c:	ea54 030b 	orrs.w	r3, r4, fp
 8022a40:	d108      	bne.n	8022a54 <__ieee754_pow+0x1a4>
 8022a42:	4602      	mov	r2, r0
 8022a44:	460b      	mov	r3, r1
 8022a46:	4610      	mov	r0, r2
 8022a48:	4619      	mov	r1, r3
 8022a4a:	f7dd fc25 	bl	8000298 <__aeabi_dsub>
 8022a4e:	4602      	mov	r2, r0
 8022a50:	460b      	mov	r3, r1
 8022a52:	e7ac      	b.n	80229ae <__ieee754_pow+0xfe>
 8022a54:	f1bb 0f01 	cmp.w	fp, #1
 8022a58:	d18a      	bne.n	8022970 <__ieee754_pow+0xc0>
 8022a5a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8022a5e:	4619      	mov	r1, r3
 8022a60:	e786      	b.n	8022970 <__ieee754_pow+0xc0>
 8022a62:	0fed      	lsrs	r5, r5, #31
 8022a64:	1e6b      	subs	r3, r5, #1
 8022a66:	930d      	str	r3, [sp, #52]	; 0x34
 8022a68:	ea5b 0303 	orrs.w	r3, fp, r3
 8022a6c:	d102      	bne.n	8022a74 <__ieee754_pow+0x1c4>
 8022a6e:	4632      	mov	r2, r6
 8022a70:	463b      	mov	r3, r7
 8022a72:	e7e8      	b.n	8022a46 <__ieee754_pow+0x196>
 8022a74:	4b16      	ldr	r3, [pc, #88]	; (8022ad0 <__ieee754_pow+0x220>)
 8022a76:	4598      	cmp	r8, r3
 8022a78:	f340 80fe 	ble.w	8022c78 <__ieee754_pow+0x3c8>
 8022a7c:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8022a80:	4598      	cmp	r8, r3
 8022a82:	dd0a      	ble.n	8022a9a <__ieee754_pow+0x1ea>
 8022a84:	4b0f      	ldr	r3, [pc, #60]	; (8022ac4 <__ieee754_pow+0x214>)
 8022a86:	429c      	cmp	r4, r3
 8022a88:	dc0d      	bgt.n	8022aa6 <__ieee754_pow+0x1f6>
 8022a8a:	f1b9 0f00 	cmp.w	r9, #0
 8022a8e:	f6bf af6d 	bge.w	802296c <__ieee754_pow+0xbc>
 8022a92:	a307      	add	r3, pc, #28	; (adr r3, 8022ab0 <__ieee754_pow+0x200>)
 8022a94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022a98:	e79f      	b.n	80229da <__ieee754_pow+0x12a>
 8022a9a:	4b0e      	ldr	r3, [pc, #56]	; (8022ad4 <__ieee754_pow+0x224>)
 8022a9c:	429c      	cmp	r4, r3
 8022a9e:	ddf4      	ble.n	8022a8a <__ieee754_pow+0x1da>
 8022aa0:	4b09      	ldr	r3, [pc, #36]	; (8022ac8 <__ieee754_pow+0x218>)
 8022aa2:	429c      	cmp	r4, r3
 8022aa4:	dd18      	ble.n	8022ad8 <__ieee754_pow+0x228>
 8022aa6:	f1b9 0f00 	cmp.w	r9, #0
 8022aaa:	dcf2      	bgt.n	8022a92 <__ieee754_pow+0x1e2>
 8022aac:	e75e      	b.n	802296c <__ieee754_pow+0xbc>
 8022aae:	bf00      	nop
 8022ab0:	8800759c 	.word	0x8800759c
 8022ab4:	7e37e43c 	.word	0x7e37e43c
 8022ab8:	7ff00000 	.word	0x7ff00000
 8022abc:	0802cf95 	.word	0x0802cf95
 8022ac0:	433fffff 	.word	0x433fffff
 8022ac4:	3fefffff 	.word	0x3fefffff
 8022ac8:	3ff00000 	.word	0x3ff00000
 8022acc:	3fe00000 	.word	0x3fe00000
 8022ad0:	41e00000 	.word	0x41e00000
 8022ad4:	3feffffe 	.word	0x3feffffe
 8022ad8:	2200      	movs	r2, #0
 8022ada:	4b63      	ldr	r3, [pc, #396]	; (8022c68 <__ieee754_pow+0x3b8>)
 8022adc:	f7dd fbdc 	bl	8000298 <__aeabi_dsub>
 8022ae0:	a355      	add	r3, pc, #340	; (adr r3, 8022c38 <__ieee754_pow+0x388>)
 8022ae2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022ae6:	4604      	mov	r4, r0
 8022ae8:	460d      	mov	r5, r1
 8022aea:	f7dd fd8d 	bl	8000608 <__aeabi_dmul>
 8022aee:	a354      	add	r3, pc, #336	; (adr r3, 8022c40 <__ieee754_pow+0x390>)
 8022af0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022af4:	4606      	mov	r6, r0
 8022af6:	460f      	mov	r7, r1
 8022af8:	4620      	mov	r0, r4
 8022afa:	4629      	mov	r1, r5
 8022afc:	f7dd fd84 	bl	8000608 <__aeabi_dmul>
 8022b00:	2200      	movs	r2, #0
 8022b02:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8022b06:	4b59      	ldr	r3, [pc, #356]	; (8022c6c <__ieee754_pow+0x3bc>)
 8022b08:	4620      	mov	r0, r4
 8022b0a:	4629      	mov	r1, r5
 8022b0c:	f7dd fd7c 	bl	8000608 <__aeabi_dmul>
 8022b10:	4602      	mov	r2, r0
 8022b12:	460b      	mov	r3, r1
 8022b14:	a14c      	add	r1, pc, #304	; (adr r1, 8022c48 <__ieee754_pow+0x398>)
 8022b16:	e9d1 0100 	ldrd	r0, r1, [r1]
 8022b1a:	f7dd fbbd 	bl	8000298 <__aeabi_dsub>
 8022b1e:	4622      	mov	r2, r4
 8022b20:	462b      	mov	r3, r5
 8022b22:	f7dd fd71 	bl	8000608 <__aeabi_dmul>
 8022b26:	4602      	mov	r2, r0
 8022b28:	460b      	mov	r3, r1
 8022b2a:	2000      	movs	r0, #0
 8022b2c:	4950      	ldr	r1, [pc, #320]	; (8022c70 <__ieee754_pow+0x3c0>)
 8022b2e:	f7dd fbb3 	bl	8000298 <__aeabi_dsub>
 8022b32:	4622      	mov	r2, r4
 8022b34:	462b      	mov	r3, r5
 8022b36:	4680      	mov	r8, r0
 8022b38:	4689      	mov	r9, r1
 8022b3a:	4620      	mov	r0, r4
 8022b3c:	4629      	mov	r1, r5
 8022b3e:	f7dd fd63 	bl	8000608 <__aeabi_dmul>
 8022b42:	4602      	mov	r2, r0
 8022b44:	460b      	mov	r3, r1
 8022b46:	4640      	mov	r0, r8
 8022b48:	4649      	mov	r1, r9
 8022b4a:	f7dd fd5d 	bl	8000608 <__aeabi_dmul>
 8022b4e:	a340      	add	r3, pc, #256	; (adr r3, 8022c50 <__ieee754_pow+0x3a0>)
 8022b50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022b54:	f7dd fd58 	bl	8000608 <__aeabi_dmul>
 8022b58:	4602      	mov	r2, r0
 8022b5a:	460b      	mov	r3, r1
 8022b5c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8022b60:	f7dd fb9a 	bl	8000298 <__aeabi_dsub>
 8022b64:	4602      	mov	r2, r0
 8022b66:	460b      	mov	r3, r1
 8022b68:	4604      	mov	r4, r0
 8022b6a:	460d      	mov	r5, r1
 8022b6c:	4630      	mov	r0, r6
 8022b6e:	4639      	mov	r1, r7
 8022b70:	f7dd fb94 	bl	800029c <__adddf3>
 8022b74:	2000      	movs	r0, #0
 8022b76:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8022b7a:	4632      	mov	r2, r6
 8022b7c:	463b      	mov	r3, r7
 8022b7e:	f7dd fb8b 	bl	8000298 <__aeabi_dsub>
 8022b82:	4602      	mov	r2, r0
 8022b84:	460b      	mov	r3, r1
 8022b86:	4620      	mov	r0, r4
 8022b88:	4629      	mov	r1, r5
 8022b8a:	f7dd fb85 	bl	8000298 <__aeabi_dsub>
 8022b8e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8022b90:	f10b 33ff 	add.w	r3, fp, #4294967295
 8022b94:	4313      	orrs	r3, r2
 8022b96:	4606      	mov	r6, r0
 8022b98:	460f      	mov	r7, r1
 8022b9a:	f040 81eb 	bne.w	8022f74 <__ieee754_pow+0x6c4>
 8022b9e:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 8022c58 <__ieee754_pow+0x3a8>
 8022ba2:	e9dd 4500 	ldrd	r4, r5, [sp]
 8022ba6:	2400      	movs	r4, #0
 8022ba8:	4622      	mov	r2, r4
 8022baa:	462b      	mov	r3, r5
 8022bac:	e9dd 0100 	ldrd	r0, r1, [sp]
 8022bb0:	ed8d 7b02 	vstr	d7, [sp, #8]
 8022bb4:	f7dd fb70 	bl	8000298 <__aeabi_dsub>
 8022bb8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8022bbc:	f7dd fd24 	bl	8000608 <__aeabi_dmul>
 8022bc0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8022bc4:	4680      	mov	r8, r0
 8022bc6:	4689      	mov	r9, r1
 8022bc8:	4630      	mov	r0, r6
 8022bca:	4639      	mov	r1, r7
 8022bcc:	f7dd fd1c 	bl	8000608 <__aeabi_dmul>
 8022bd0:	4602      	mov	r2, r0
 8022bd2:	460b      	mov	r3, r1
 8022bd4:	4640      	mov	r0, r8
 8022bd6:	4649      	mov	r1, r9
 8022bd8:	f7dd fb60 	bl	800029c <__adddf3>
 8022bdc:	4622      	mov	r2, r4
 8022bde:	462b      	mov	r3, r5
 8022be0:	4680      	mov	r8, r0
 8022be2:	4689      	mov	r9, r1
 8022be4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8022be8:	f7dd fd0e 	bl	8000608 <__aeabi_dmul>
 8022bec:	460b      	mov	r3, r1
 8022bee:	4604      	mov	r4, r0
 8022bf0:	460d      	mov	r5, r1
 8022bf2:	4602      	mov	r2, r0
 8022bf4:	4649      	mov	r1, r9
 8022bf6:	4640      	mov	r0, r8
 8022bf8:	e9cd 4500 	strd	r4, r5, [sp]
 8022bfc:	f7dd fb4e 	bl	800029c <__adddf3>
 8022c00:	4b1c      	ldr	r3, [pc, #112]	; (8022c74 <__ieee754_pow+0x3c4>)
 8022c02:	4299      	cmp	r1, r3
 8022c04:	4606      	mov	r6, r0
 8022c06:	460f      	mov	r7, r1
 8022c08:	468b      	mov	fp, r1
 8022c0a:	f340 82f7 	ble.w	80231fc <__ieee754_pow+0x94c>
 8022c0e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8022c12:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8022c16:	4303      	orrs	r3, r0
 8022c18:	f000 81ea 	beq.w	8022ff0 <__ieee754_pow+0x740>
 8022c1c:	a310      	add	r3, pc, #64	; (adr r3, 8022c60 <__ieee754_pow+0x3b0>)
 8022c1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022c22:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8022c26:	f7dd fcef 	bl	8000608 <__aeabi_dmul>
 8022c2a:	a30d      	add	r3, pc, #52	; (adr r3, 8022c60 <__ieee754_pow+0x3b0>)
 8022c2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022c30:	e6d5      	b.n	80229de <__ieee754_pow+0x12e>
 8022c32:	bf00      	nop
 8022c34:	f3af 8000 	nop.w
 8022c38:	60000000 	.word	0x60000000
 8022c3c:	3ff71547 	.word	0x3ff71547
 8022c40:	f85ddf44 	.word	0xf85ddf44
 8022c44:	3e54ae0b 	.word	0x3e54ae0b
 8022c48:	55555555 	.word	0x55555555
 8022c4c:	3fd55555 	.word	0x3fd55555
 8022c50:	652b82fe 	.word	0x652b82fe
 8022c54:	3ff71547 	.word	0x3ff71547
 8022c58:	00000000 	.word	0x00000000
 8022c5c:	bff00000 	.word	0xbff00000
 8022c60:	8800759c 	.word	0x8800759c
 8022c64:	7e37e43c 	.word	0x7e37e43c
 8022c68:	3ff00000 	.word	0x3ff00000
 8022c6c:	3fd00000 	.word	0x3fd00000
 8022c70:	3fe00000 	.word	0x3fe00000
 8022c74:	408fffff 	.word	0x408fffff
 8022c78:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8022c7c:	f04f 0200 	mov.w	r2, #0
 8022c80:	da05      	bge.n	8022c8e <__ieee754_pow+0x3de>
 8022c82:	4bd3      	ldr	r3, [pc, #844]	; (8022fd0 <__ieee754_pow+0x720>)
 8022c84:	f7dd fcc0 	bl	8000608 <__aeabi_dmul>
 8022c88:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8022c8c:	460c      	mov	r4, r1
 8022c8e:	1523      	asrs	r3, r4, #20
 8022c90:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8022c94:	4413      	add	r3, r2
 8022c96:	9309      	str	r3, [sp, #36]	; 0x24
 8022c98:	4bce      	ldr	r3, [pc, #824]	; (8022fd4 <__ieee754_pow+0x724>)
 8022c9a:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8022c9e:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8022ca2:	429c      	cmp	r4, r3
 8022ca4:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8022ca8:	dd08      	ble.n	8022cbc <__ieee754_pow+0x40c>
 8022caa:	4bcb      	ldr	r3, [pc, #812]	; (8022fd8 <__ieee754_pow+0x728>)
 8022cac:	429c      	cmp	r4, r3
 8022cae:	f340 815e 	ble.w	8022f6e <__ieee754_pow+0x6be>
 8022cb2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8022cb4:	3301      	adds	r3, #1
 8022cb6:	9309      	str	r3, [sp, #36]	; 0x24
 8022cb8:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8022cbc:	f04f 0a00 	mov.w	sl, #0
 8022cc0:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 8022cc4:	930c      	str	r3, [sp, #48]	; 0x30
 8022cc6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8022cc8:	4bc4      	ldr	r3, [pc, #784]	; (8022fdc <__ieee754_pow+0x72c>)
 8022cca:	4413      	add	r3, r2
 8022ccc:	ed93 7b00 	vldr	d7, [r3]
 8022cd0:	4629      	mov	r1, r5
 8022cd2:	ec53 2b17 	vmov	r2, r3, d7
 8022cd6:	ed8d 7b06 	vstr	d7, [sp, #24]
 8022cda:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8022cde:	f7dd fadb 	bl	8000298 <__aeabi_dsub>
 8022ce2:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8022ce6:	4606      	mov	r6, r0
 8022ce8:	460f      	mov	r7, r1
 8022cea:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8022cee:	f7dd fad5 	bl	800029c <__adddf3>
 8022cf2:	4602      	mov	r2, r0
 8022cf4:	460b      	mov	r3, r1
 8022cf6:	2000      	movs	r0, #0
 8022cf8:	49b9      	ldr	r1, [pc, #740]	; (8022fe0 <__ieee754_pow+0x730>)
 8022cfa:	f7dd fdaf 	bl	800085c <__aeabi_ddiv>
 8022cfe:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8022d02:	4602      	mov	r2, r0
 8022d04:	460b      	mov	r3, r1
 8022d06:	4630      	mov	r0, r6
 8022d08:	4639      	mov	r1, r7
 8022d0a:	f7dd fc7d 	bl	8000608 <__aeabi_dmul>
 8022d0e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8022d12:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8022d16:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8022d1a:	2300      	movs	r3, #0
 8022d1c:	9302      	str	r3, [sp, #8]
 8022d1e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8022d22:	106d      	asrs	r5, r5, #1
 8022d24:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8022d28:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8022d2c:	2200      	movs	r2, #0
 8022d2e:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 8022d32:	4640      	mov	r0, r8
 8022d34:	4649      	mov	r1, r9
 8022d36:	4614      	mov	r4, r2
 8022d38:	461d      	mov	r5, r3
 8022d3a:	f7dd fc65 	bl	8000608 <__aeabi_dmul>
 8022d3e:	4602      	mov	r2, r0
 8022d40:	460b      	mov	r3, r1
 8022d42:	4630      	mov	r0, r6
 8022d44:	4639      	mov	r1, r7
 8022d46:	f7dd faa7 	bl	8000298 <__aeabi_dsub>
 8022d4a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8022d4e:	4606      	mov	r6, r0
 8022d50:	460f      	mov	r7, r1
 8022d52:	4620      	mov	r0, r4
 8022d54:	4629      	mov	r1, r5
 8022d56:	f7dd fa9f 	bl	8000298 <__aeabi_dsub>
 8022d5a:	4602      	mov	r2, r0
 8022d5c:	460b      	mov	r3, r1
 8022d5e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8022d62:	f7dd fa99 	bl	8000298 <__aeabi_dsub>
 8022d66:	4642      	mov	r2, r8
 8022d68:	464b      	mov	r3, r9
 8022d6a:	f7dd fc4d 	bl	8000608 <__aeabi_dmul>
 8022d6e:	4602      	mov	r2, r0
 8022d70:	460b      	mov	r3, r1
 8022d72:	4630      	mov	r0, r6
 8022d74:	4639      	mov	r1, r7
 8022d76:	f7dd fa8f 	bl	8000298 <__aeabi_dsub>
 8022d7a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8022d7e:	f7dd fc43 	bl	8000608 <__aeabi_dmul>
 8022d82:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8022d86:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8022d8a:	4610      	mov	r0, r2
 8022d8c:	4619      	mov	r1, r3
 8022d8e:	f7dd fc3b 	bl	8000608 <__aeabi_dmul>
 8022d92:	a37b      	add	r3, pc, #492	; (adr r3, 8022f80 <__ieee754_pow+0x6d0>)
 8022d94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022d98:	4604      	mov	r4, r0
 8022d9a:	460d      	mov	r5, r1
 8022d9c:	f7dd fc34 	bl	8000608 <__aeabi_dmul>
 8022da0:	a379      	add	r3, pc, #484	; (adr r3, 8022f88 <__ieee754_pow+0x6d8>)
 8022da2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022da6:	f7dd fa79 	bl	800029c <__adddf3>
 8022daa:	4622      	mov	r2, r4
 8022dac:	462b      	mov	r3, r5
 8022dae:	f7dd fc2b 	bl	8000608 <__aeabi_dmul>
 8022db2:	a377      	add	r3, pc, #476	; (adr r3, 8022f90 <__ieee754_pow+0x6e0>)
 8022db4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022db8:	f7dd fa70 	bl	800029c <__adddf3>
 8022dbc:	4622      	mov	r2, r4
 8022dbe:	462b      	mov	r3, r5
 8022dc0:	f7dd fc22 	bl	8000608 <__aeabi_dmul>
 8022dc4:	a374      	add	r3, pc, #464	; (adr r3, 8022f98 <__ieee754_pow+0x6e8>)
 8022dc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022dca:	f7dd fa67 	bl	800029c <__adddf3>
 8022dce:	4622      	mov	r2, r4
 8022dd0:	462b      	mov	r3, r5
 8022dd2:	f7dd fc19 	bl	8000608 <__aeabi_dmul>
 8022dd6:	a372      	add	r3, pc, #456	; (adr r3, 8022fa0 <__ieee754_pow+0x6f0>)
 8022dd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022ddc:	f7dd fa5e 	bl	800029c <__adddf3>
 8022de0:	4622      	mov	r2, r4
 8022de2:	462b      	mov	r3, r5
 8022de4:	f7dd fc10 	bl	8000608 <__aeabi_dmul>
 8022de8:	a36f      	add	r3, pc, #444	; (adr r3, 8022fa8 <__ieee754_pow+0x6f8>)
 8022dea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022dee:	f7dd fa55 	bl	800029c <__adddf3>
 8022df2:	4622      	mov	r2, r4
 8022df4:	4606      	mov	r6, r0
 8022df6:	460f      	mov	r7, r1
 8022df8:	462b      	mov	r3, r5
 8022dfa:	4620      	mov	r0, r4
 8022dfc:	4629      	mov	r1, r5
 8022dfe:	f7dd fc03 	bl	8000608 <__aeabi_dmul>
 8022e02:	4602      	mov	r2, r0
 8022e04:	460b      	mov	r3, r1
 8022e06:	4630      	mov	r0, r6
 8022e08:	4639      	mov	r1, r7
 8022e0a:	f7dd fbfd 	bl	8000608 <__aeabi_dmul>
 8022e0e:	4642      	mov	r2, r8
 8022e10:	4604      	mov	r4, r0
 8022e12:	460d      	mov	r5, r1
 8022e14:	464b      	mov	r3, r9
 8022e16:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8022e1a:	f7dd fa3f 	bl	800029c <__adddf3>
 8022e1e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8022e22:	f7dd fbf1 	bl	8000608 <__aeabi_dmul>
 8022e26:	4622      	mov	r2, r4
 8022e28:	462b      	mov	r3, r5
 8022e2a:	f7dd fa37 	bl	800029c <__adddf3>
 8022e2e:	4642      	mov	r2, r8
 8022e30:	4606      	mov	r6, r0
 8022e32:	460f      	mov	r7, r1
 8022e34:	464b      	mov	r3, r9
 8022e36:	4640      	mov	r0, r8
 8022e38:	4649      	mov	r1, r9
 8022e3a:	f7dd fbe5 	bl	8000608 <__aeabi_dmul>
 8022e3e:	2200      	movs	r2, #0
 8022e40:	4b68      	ldr	r3, [pc, #416]	; (8022fe4 <__ieee754_pow+0x734>)
 8022e42:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8022e46:	f7dd fa29 	bl	800029c <__adddf3>
 8022e4a:	4632      	mov	r2, r6
 8022e4c:	463b      	mov	r3, r7
 8022e4e:	f7dd fa25 	bl	800029c <__adddf3>
 8022e52:	9802      	ldr	r0, [sp, #8]
 8022e54:	460d      	mov	r5, r1
 8022e56:	4604      	mov	r4, r0
 8022e58:	4602      	mov	r2, r0
 8022e5a:	460b      	mov	r3, r1
 8022e5c:	4640      	mov	r0, r8
 8022e5e:	4649      	mov	r1, r9
 8022e60:	f7dd fbd2 	bl	8000608 <__aeabi_dmul>
 8022e64:	2200      	movs	r2, #0
 8022e66:	4680      	mov	r8, r0
 8022e68:	4689      	mov	r9, r1
 8022e6a:	4b5e      	ldr	r3, [pc, #376]	; (8022fe4 <__ieee754_pow+0x734>)
 8022e6c:	4620      	mov	r0, r4
 8022e6e:	4629      	mov	r1, r5
 8022e70:	f7dd fa12 	bl	8000298 <__aeabi_dsub>
 8022e74:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8022e78:	f7dd fa0e 	bl	8000298 <__aeabi_dsub>
 8022e7c:	4602      	mov	r2, r0
 8022e7e:	460b      	mov	r3, r1
 8022e80:	4630      	mov	r0, r6
 8022e82:	4639      	mov	r1, r7
 8022e84:	f7dd fa08 	bl	8000298 <__aeabi_dsub>
 8022e88:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8022e8c:	f7dd fbbc 	bl	8000608 <__aeabi_dmul>
 8022e90:	4622      	mov	r2, r4
 8022e92:	4606      	mov	r6, r0
 8022e94:	460f      	mov	r7, r1
 8022e96:	462b      	mov	r3, r5
 8022e98:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8022e9c:	f7dd fbb4 	bl	8000608 <__aeabi_dmul>
 8022ea0:	4602      	mov	r2, r0
 8022ea2:	460b      	mov	r3, r1
 8022ea4:	4630      	mov	r0, r6
 8022ea6:	4639      	mov	r1, r7
 8022ea8:	f7dd f9f8 	bl	800029c <__adddf3>
 8022eac:	4606      	mov	r6, r0
 8022eae:	460f      	mov	r7, r1
 8022eb0:	4602      	mov	r2, r0
 8022eb2:	460b      	mov	r3, r1
 8022eb4:	4640      	mov	r0, r8
 8022eb6:	4649      	mov	r1, r9
 8022eb8:	f7dd f9f0 	bl	800029c <__adddf3>
 8022ebc:	9802      	ldr	r0, [sp, #8]
 8022ebe:	a33c      	add	r3, pc, #240	; (adr r3, 8022fb0 <__ieee754_pow+0x700>)
 8022ec0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022ec4:	4604      	mov	r4, r0
 8022ec6:	460d      	mov	r5, r1
 8022ec8:	f7dd fb9e 	bl	8000608 <__aeabi_dmul>
 8022ecc:	4642      	mov	r2, r8
 8022ece:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8022ed2:	464b      	mov	r3, r9
 8022ed4:	4620      	mov	r0, r4
 8022ed6:	4629      	mov	r1, r5
 8022ed8:	f7dd f9de 	bl	8000298 <__aeabi_dsub>
 8022edc:	4602      	mov	r2, r0
 8022ede:	460b      	mov	r3, r1
 8022ee0:	4630      	mov	r0, r6
 8022ee2:	4639      	mov	r1, r7
 8022ee4:	f7dd f9d8 	bl	8000298 <__aeabi_dsub>
 8022ee8:	a333      	add	r3, pc, #204	; (adr r3, 8022fb8 <__ieee754_pow+0x708>)
 8022eea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022eee:	f7dd fb8b 	bl	8000608 <__aeabi_dmul>
 8022ef2:	a333      	add	r3, pc, #204	; (adr r3, 8022fc0 <__ieee754_pow+0x710>)
 8022ef4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022ef8:	4606      	mov	r6, r0
 8022efa:	460f      	mov	r7, r1
 8022efc:	4620      	mov	r0, r4
 8022efe:	4629      	mov	r1, r5
 8022f00:	f7dd fb82 	bl	8000608 <__aeabi_dmul>
 8022f04:	4602      	mov	r2, r0
 8022f06:	460b      	mov	r3, r1
 8022f08:	4630      	mov	r0, r6
 8022f0a:	4639      	mov	r1, r7
 8022f0c:	f7dd f9c6 	bl	800029c <__adddf3>
 8022f10:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8022f12:	4b35      	ldr	r3, [pc, #212]	; (8022fe8 <__ieee754_pow+0x738>)
 8022f14:	4413      	add	r3, r2
 8022f16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022f1a:	f7dd f9bf 	bl	800029c <__adddf3>
 8022f1e:	4604      	mov	r4, r0
 8022f20:	9809      	ldr	r0, [sp, #36]	; 0x24
 8022f22:	460d      	mov	r5, r1
 8022f24:	f7dd fb06 	bl	8000534 <__aeabi_i2d>
 8022f28:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8022f2a:	4b30      	ldr	r3, [pc, #192]	; (8022fec <__ieee754_pow+0x73c>)
 8022f2c:	4413      	add	r3, r2
 8022f2e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8022f32:	4606      	mov	r6, r0
 8022f34:	460f      	mov	r7, r1
 8022f36:	4622      	mov	r2, r4
 8022f38:	462b      	mov	r3, r5
 8022f3a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8022f3e:	f7dd f9ad 	bl	800029c <__adddf3>
 8022f42:	4642      	mov	r2, r8
 8022f44:	464b      	mov	r3, r9
 8022f46:	f7dd f9a9 	bl	800029c <__adddf3>
 8022f4a:	4632      	mov	r2, r6
 8022f4c:	463b      	mov	r3, r7
 8022f4e:	f7dd f9a5 	bl	800029c <__adddf3>
 8022f52:	9802      	ldr	r0, [sp, #8]
 8022f54:	4632      	mov	r2, r6
 8022f56:	463b      	mov	r3, r7
 8022f58:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8022f5c:	f7dd f99c 	bl	8000298 <__aeabi_dsub>
 8022f60:	4642      	mov	r2, r8
 8022f62:	464b      	mov	r3, r9
 8022f64:	f7dd f998 	bl	8000298 <__aeabi_dsub>
 8022f68:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8022f6c:	e607      	b.n	8022b7e <__ieee754_pow+0x2ce>
 8022f6e:	f04f 0a01 	mov.w	sl, #1
 8022f72:	e6a5      	b.n	8022cc0 <__ieee754_pow+0x410>
 8022f74:	ed9f 7b14 	vldr	d7, [pc, #80]	; 8022fc8 <__ieee754_pow+0x718>
 8022f78:	e613      	b.n	8022ba2 <__ieee754_pow+0x2f2>
 8022f7a:	bf00      	nop
 8022f7c:	f3af 8000 	nop.w
 8022f80:	4a454eef 	.word	0x4a454eef
 8022f84:	3fca7e28 	.word	0x3fca7e28
 8022f88:	93c9db65 	.word	0x93c9db65
 8022f8c:	3fcd864a 	.word	0x3fcd864a
 8022f90:	a91d4101 	.word	0xa91d4101
 8022f94:	3fd17460 	.word	0x3fd17460
 8022f98:	518f264d 	.word	0x518f264d
 8022f9c:	3fd55555 	.word	0x3fd55555
 8022fa0:	db6fabff 	.word	0xdb6fabff
 8022fa4:	3fdb6db6 	.word	0x3fdb6db6
 8022fa8:	33333303 	.word	0x33333303
 8022fac:	3fe33333 	.word	0x3fe33333
 8022fb0:	e0000000 	.word	0xe0000000
 8022fb4:	3feec709 	.word	0x3feec709
 8022fb8:	dc3a03fd 	.word	0xdc3a03fd
 8022fbc:	3feec709 	.word	0x3feec709
 8022fc0:	145b01f5 	.word	0x145b01f5
 8022fc4:	be3e2fe0 	.word	0xbe3e2fe0
 8022fc8:	00000000 	.word	0x00000000
 8022fcc:	3ff00000 	.word	0x3ff00000
 8022fd0:	43400000 	.word	0x43400000
 8022fd4:	0003988e 	.word	0x0003988e
 8022fd8:	000bb679 	.word	0x000bb679
 8022fdc:	0802cfc8 	.word	0x0802cfc8
 8022fe0:	3ff00000 	.word	0x3ff00000
 8022fe4:	40080000 	.word	0x40080000
 8022fe8:	0802cfe8 	.word	0x0802cfe8
 8022fec:	0802cfd8 	.word	0x0802cfd8
 8022ff0:	a3b4      	add	r3, pc, #720	; (adr r3, 80232c4 <__ieee754_pow+0xa14>)
 8022ff2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022ff6:	4640      	mov	r0, r8
 8022ff8:	4649      	mov	r1, r9
 8022ffa:	f7dd f94f 	bl	800029c <__adddf3>
 8022ffe:	4622      	mov	r2, r4
 8023000:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8023004:	462b      	mov	r3, r5
 8023006:	4630      	mov	r0, r6
 8023008:	4639      	mov	r1, r7
 802300a:	f7dd f945 	bl	8000298 <__aeabi_dsub>
 802300e:	4602      	mov	r2, r0
 8023010:	460b      	mov	r3, r1
 8023012:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8023016:	f7dd fd87 	bl	8000b28 <__aeabi_dcmpgt>
 802301a:	2800      	cmp	r0, #0
 802301c:	f47f adfe 	bne.w	8022c1c <__ieee754_pow+0x36c>
 8023020:	4aa3      	ldr	r2, [pc, #652]	; (80232b0 <__ieee754_pow+0xa00>)
 8023022:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8023026:	4293      	cmp	r3, r2
 8023028:	f340 810a 	ble.w	8023240 <__ieee754_pow+0x990>
 802302c:	151b      	asrs	r3, r3, #20
 802302e:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8023032:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8023036:	fa4a f303 	asr.w	r3, sl, r3
 802303a:	445b      	add	r3, fp
 802303c:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8023040:	4e9c      	ldr	r6, [pc, #624]	; (80232b4 <__ieee754_pow+0xa04>)
 8023042:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8023046:	4116      	asrs	r6, r2
 8023048:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 802304c:	2000      	movs	r0, #0
 802304e:	ea23 0106 	bic.w	r1, r3, r6
 8023052:	f1c2 0214 	rsb	r2, r2, #20
 8023056:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 802305a:	fa4a fa02 	asr.w	sl, sl, r2
 802305e:	f1bb 0f00 	cmp.w	fp, #0
 8023062:	4602      	mov	r2, r0
 8023064:	460b      	mov	r3, r1
 8023066:	4620      	mov	r0, r4
 8023068:	4629      	mov	r1, r5
 802306a:	bfb8      	it	lt
 802306c:	f1ca 0a00 	rsblt	sl, sl, #0
 8023070:	f7dd f912 	bl	8000298 <__aeabi_dsub>
 8023074:	e9cd 0100 	strd	r0, r1, [sp]
 8023078:	4642      	mov	r2, r8
 802307a:	464b      	mov	r3, r9
 802307c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8023080:	f7dd f90c 	bl	800029c <__adddf3>
 8023084:	2000      	movs	r0, #0
 8023086:	a378      	add	r3, pc, #480	; (adr r3, 8023268 <__ieee754_pow+0x9b8>)
 8023088:	e9d3 2300 	ldrd	r2, r3, [r3]
 802308c:	4604      	mov	r4, r0
 802308e:	460d      	mov	r5, r1
 8023090:	f7dd faba 	bl	8000608 <__aeabi_dmul>
 8023094:	e9dd 2300 	ldrd	r2, r3, [sp]
 8023098:	4606      	mov	r6, r0
 802309a:	460f      	mov	r7, r1
 802309c:	4620      	mov	r0, r4
 802309e:	4629      	mov	r1, r5
 80230a0:	f7dd f8fa 	bl	8000298 <__aeabi_dsub>
 80230a4:	4602      	mov	r2, r0
 80230a6:	460b      	mov	r3, r1
 80230a8:	4640      	mov	r0, r8
 80230aa:	4649      	mov	r1, r9
 80230ac:	f7dd f8f4 	bl	8000298 <__aeabi_dsub>
 80230b0:	a36f      	add	r3, pc, #444	; (adr r3, 8023270 <__ieee754_pow+0x9c0>)
 80230b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80230b6:	f7dd faa7 	bl	8000608 <__aeabi_dmul>
 80230ba:	a36f      	add	r3, pc, #444	; (adr r3, 8023278 <__ieee754_pow+0x9c8>)
 80230bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80230c0:	4680      	mov	r8, r0
 80230c2:	4689      	mov	r9, r1
 80230c4:	4620      	mov	r0, r4
 80230c6:	4629      	mov	r1, r5
 80230c8:	f7dd fa9e 	bl	8000608 <__aeabi_dmul>
 80230cc:	4602      	mov	r2, r0
 80230ce:	460b      	mov	r3, r1
 80230d0:	4640      	mov	r0, r8
 80230d2:	4649      	mov	r1, r9
 80230d4:	f7dd f8e2 	bl	800029c <__adddf3>
 80230d8:	4604      	mov	r4, r0
 80230da:	460d      	mov	r5, r1
 80230dc:	4602      	mov	r2, r0
 80230de:	460b      	mov	r3, r1
 80230e0:	4630      	mov	r0, r6
 80230e2:	4639      	mov	r1, r7
 80230e4:	f7dd f8da 	bl	800029c <__adddf3>
 80230e8:	4632      	mov	r2, r6
 80230ea:	463b      	mov	r3, r7
 80230ec:	4680      	mov	r8, r0
 80230ee:	4689      	mov	r9, r1
 80230f0:	f7dd f8d2 	bl	8000298 <__aeabi_dsub>
 80230f4:	4602      	mov	r2, r0
 80230f6:	460b      	mov	r3, r1
 80230f8:	4620      	mov	r0, r4
 80230fa:	4629      	mov	r1, r5
 80230fc:	f7dd f8cc 	bl	8000298 <__aeabi_dsub>
 8023100:	4642      	mov	r2, r8
 8023102:	4606      	mov	r6, r0
 8023104:	460f      	mov	r7, r1
 8023106:	464b      	mov	r3, r9
 8023108:	4640      	mov	r0, r8
 802310a:	4649      	mov	r1, r9
 802310c:	f7dd fa7c 	bl	8000608 <__aeabi_dmul>
 8023110:	a35b      	add	r3, pc, #364	; (adr r3, 8023280 <__ieee754_pow+0x9d0>)
 8023112:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023116:	4604      	mov	r4, r0
 8023118:	460d      	mov	r5, r1
 802311a:	f7dd fa75 	bl	8000608 <__aeabi_dmul>
 802311e:	a35a      	add	r3, pc, #360	; (adr r3, 8023288 <__ieee754_pow+0x9d8>)
 8023120:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023124:	f7dd f8b8 	bl	8000298 <__aeabi_dsub>
 8023128:	4622      	mov	r2, r4
 802312a:	462b      	mov	r3, r5
 802312c:	f7dd fa6c 	bl	8000608 <__aeabi_dmul>
 8023130:	a357      	add	r3, pc, #348	; (adr r3, 8023290 <__ieee754_pow+0x9e0>)
 8023132:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023136:	f7dd f8b1 	bl	800029c <__adddf3>
 802313a:	4622      	mov	r2, r4
 802313c:	462b      	mov	r3, r5
 802313e:	f7dd fa63 	bl	8000608 <__aeabi_dmul>
 8023142:	a355      	add	r3, pc, #340	; (adr r3, 8023298 <__ieee754_pow+0x9e8>)
 8023144:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023148:	f7dd f8a6 	bl	8000298 <__aeabi_dsub>
 802314c:	4622      	mov	r2, r4
 802314e:	462b      	mov	r3, r5
 8023150:	f7dd fa5a 	bl	8000608 <__aeabi_dmul>
 8023154:	a352      	add	r3, pc, #328	; (adr r3, 80232a0 <__ieee754_pow+0x9f0>)
 8023156:	e9d3 2300 	ldrd	r2, r3, [r3]
 802315a:	f7dd f89f 	bl	800029c <__adddf3>
 802315e:	4622      	mov	r2, r4
 8023160:	462b      	mov	r3, r5
 8023162:	f7dd fa51 	bl	8000608 <__aeabi_dmul>
 8023166:	4602      	mov	r2, r0
 8023168:	460b      	mov	r3, r1
 802316a:	4640      	mov	r0, r8
 802316c:	4649      	mov	r1, r9
 802316e:	f7dd f893 	bl	8000298 <__aeabi_dsub>
 8023172:	4604      	mov	r4, r0
 8023174:	460d      	mov	r5, r1
 8023176:	4602      	mov	r2, r0
 8023178:	460b      	mov	r3, r1
 802317a:	4640      	mov	r0, r8
 802317c:	4649      	mov	r1, r9
 802317e:	f7dd fa43 	bl	8000608 <__aeabi_dmul>
 8023182:	2200      	movs	r2, #0
 8023184:	e9cd 0100 	strd	r0, r1, [sp]
 8023188:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 802318c:	4620      	mov	r0, r4
 802318e:	4629      	mov	r1, r5
 8023190:	f7dd f882 	bl	8000298 <__aeabi_dsub>
 8023194:	4602      	mov	r2, r0
 8023196:	460b      	mov	r3, r1
 8023198:	e9dd 0100 	ldrd	r0, r1, [sp]
 802319c:	f7dd fb5e 	bl	800085c <__aeabi_ddiv>
 80231a0:	4632      	mov	r2, r6
 80231a2:	4604      	mov	r4, r0
 80231a4:	460d      	mov	r5, r1
 80231a6:	463b      	mov	r3, r7
 80231a8:	4640      	mov	r0, r8
 80231aa:	4649      	mov	r1, r9
 80231ac:	f7dd fa2c 	bl	8000608 <__aeabi_dmul>
 80231b0:	4632      	mov	r2, r6
 80231b2:	463b      	mov	r3, r7
 80231b4:	f7dd f872 	bl	800029c <__adddf3>
 80231b8:	4602      	mov	r2, r0
 80231ba:	460b      	mov	r3, r1
 80231bc:	4620      	mov	r0, r4
 80231be:	4629      	mov	r1, r5
 80231c0:	f7dd f86a 	bl	8000298 <__aeabi_dsub>
 80231c4:	4642      	mov	r2, r8
 80231c6:	464b      	mov	r3, r9
 80231c8:	f7dd f866 	bl	8000298 <__aeabi_dsub>
 80231cc:	4602      	mov	r2, r0
 80231ce:	460b      	mov	r3, r1
 80231d0:	2000      	movs	r0, #0
 80231d2:	4939      	ldr	r1, [pc, #228]	; (80232b8 <__ieee754_pow+0xa08>)
 80231d4:	f7dd f860 	bl	8000298 <__aeabi_dsub>
 80231d8:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 80231dc:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 80231e0:	4602      	mov	r2, r0
 80231e2:	460b      	mov	r3, r1
 80231e4:	da2f      	bge.n	8023246 <__ieee754_pow+0x996>
 80231e6:	4650      	mov	r0, sl
 80231e8:	ec43 2b10 	vmov	d0, r2, r3
 80231ec:	f000 f9c0 	bl	8023570 <scalbn>
 80231f0:	ec51 0b10 	vmov	r0, r1, d0
 80231f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80231f8:	f7ff bbf1 	b.w	80229de <__ieee754_pow+0x12e>
 80231fc:	4b2f      	ldr	r3, [pc, #188]	; (80232bc <__ieee754_pow+0xa0c>)
 80231fe:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8023202:	429e      	cmp	r6, r3
 8023204:	f77f af0c 	ble.w	8023020 <__ieee754_pow+0x770>
 8023208:	4b2d      	ldr	r3, [pc, #180]	; (80232c0 <__ieee754_pow+0xa10>)
 802320a:	440b      	add	r3, r1
 802320c:	4303      	orrs	r3, r0
 802320e:	d00b      	beq.n	8023228 <__ieee754_pow+0x978>
 8023210:	a325      	add	r3, pc, #148	; (adr r3, 80232a8 <__ieee754_pow+0x9f8>)
 8023212:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023216:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 802321a:	f7dd f9f5 	bl	8000608 <__aeabi_dmul>
 802321e:	a322      	add	r3, pc, #136	; (adr r3, 80232a8 <__ieee754_pow+0x9f8>)
 8023220:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023224:	f7ff bbdb 	b.w	80229de <__ieee754_pow+0x12e>
 8023228:	4622      	mov	r2, r4
 802322a:	462b      	mov	r3, r5
 802322c:	f7dd f834 	bl	8000298 <__aeabi_dsub>
 8023230:	4642      	mov	r2, r8
 8023232:	464b      	mov	r3, r9
 8023234:	f7dd fc6e 	bl	8000b14 <__aeabi_dcmpge>
 8023238:	2800      	cmp	r0, #0
 802323a:	f43f aef1 	beq.w	8023020 <__ieee754_pow+0x770>
 802323e:	e7e7      	b.n	8023210 <__ieee754_pow+0x960>
 8023240:	f04f 0a00 	mov.w	sl, #0
 8023244:	e718      	b.n	8023078 <__ieee754_pow+0x7c8>
 8023246:	4621      	mov	r1, r4
 8023248:	e7d4      	b.n	80231f4 <__ieee754_pow+0x944>
 802324a:	2000      	movs	r0, #0
 802324c:	491a      	ldr	r1, [pc, #104]	; (80232b8 <__ieee754_pow+0xa08>)
 802324e:	f7ff bb8f 	b.w	8022970 <__ieee754_pow+0xc0>
 8023252:	e9dd 0100 	ldrd	r0, r1, [sp]
 8023256:	f7ff bb8b 	b.w	8022970 <__ieee754_pow+0xc0>
 802325a:	4630      	mov	r0, r6
 802325c:	4639      	mov	r1, r7
 802325e:	f7ff bb87 	b.w	8022970 <__ieee754_pow+0xc0>
 8023262:	4693      	mov	fp, r2
 8023264:	f7ff bb98 	b.w	8022998 <__ieee754_pow+0xe8>
 8023268:	00000000 	.word	0x00000000
 802326c:	3fe62e43 	.word	0x3fe62e43
 8023270:	fefa39ef 	.word	0xfefa39ef
 8023274:	3fe62e42 	.word	0x3fe62e42
 8023278:	0ca86c39 	.word	0x0ca86c39
 802327c:	be205c61 	.word	0xbe205c61
 8023280:	72bea4d0 	.word	0x72bea4d0
 8023284:	3e663769 	.word	0x3e663769
 8023288:	c5d26bf1 	.word	0xc5d26bf1
 802328c:	3ebbbd41 	.word	0x3ebbbd41
 8023290:	af25de2c 	.word	0xaf25de2c
 8023294:	3f11566a 	.word	0x3f11566a
 8023298:	16bebd93 	.word	0x16bebd93
 802329c:	3f66c16c 	.word	0x3f66c16c
 80232a0:	5555553e 	.word	0x5555553e
 80232a4:	3fc55555 	.word	0x3fc55555
 80232a8:	c2f8f359 	.word	0xc2f8f359
 80232ac:	01a56e1f 	.word	0x01a56e1f
 80232b0:	3fe00000 	.word	0x3fe00000
 80232b4:	000fffff 	.word	0x000fffff
 80232b8:	3ff00000 	.word	0x3ff00000
 80232bc:	4090cbff 	.word	0x4090cbff
 80232c0:	3f6f3400 	.word	0x3f6f3400
 80232c4:	652b82fe 	.word	0x652b82fe
 80232c8:	3c971547 	.word	0x3c971547

080232cc <__ieee754_sqrt>:
 80232cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80232d0:	4955      	ldr	r1, [pc, #340]	; (8023428 <__ieee754_sqrt+0x15c>)
 80232d2:	ec55 4b10 	vmov	r4, r5, d0
 80232d6:	43a9      	bics	r1, r5
 80232d8:	462b      	mov	r3, r5
 80232da:	462a      	mov	r2, r5
 80232dc:	d112      	bne.n	8023304 <__ieee754_sqrt+0x38>
 80232de:	ee10 2a10 	vmov	r2, s0
 80232e2:	ee10 0a10 	vmov	r0, s0
 80232e6:	4629      	mov	r1, r5
 80232e8:	f7dd f98e 	bl	8000608 <__aeabi_dmul>
 80232ec:	4602      	mov	r2, r0
 80232ee:	460b      	mov	r3, r1
 80232f0:	4620      	mov	r0, r4
 80232f2:	4629      	mov	r1, r5
 80232f4:	f7dc ffd2 	bl	800029c <__adddf3>
 80232f8:	4604      	mov	r4, r0
 80232fa:	460d      	mov	r5, r1
 80232fc:	ec45 4b10 	vmov	d0, r4, r5
 8023300:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8023304:	2d00      	cmp	r5, #0
 8023306:	ee10 0a10 	vmov	r0, s0
 802330a:	4621      	mov	r1, r4
 802330c:	dc0f      	bgt.n	802332e <__ieee754_sqrt+0x62>
 802330e:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8023312:	4330      	orrs	r0, r6
 8023314:	d0f2      	beq.n	80232fc <__ieee754_sqrt+0x30>
 8023316:	b155      	cbz	r5, 802332e <__ieee754_sqrt+0x62>
 8023318:	ee10 2a10 	vmov	r2, s0
 802331c:	4620      	mov	r0, r4
 802331e:	4629      	mov	r1, r5
 8023320:	f7dc ffba 	bl	8000298 <__aeabi_dsub>
 8023324:	4602      	mov	r2, r0
 8023326:	460b      	mov	r3, r1
 8023328:	f7dd fa98 	bl	800085c <__aeabi_ddiv>
 802332c:	e7e4      	b.n	80232f8 <__ieee754_sqrt+0x2c>
 802332e:	151b      	asrs	r3, r3, #20
 8023330:	d073      	beq.n	802341a <__ieee754_sqrt+0x14e>
 8023332:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8023336:	07dd      	lsls	r5, r3, #31
 8023338:	f3c2 0213 	ubfx	r2, r2, #0, #20
 802333c:	bf48      	it	mi
 802333e:	0fc8      	lsrmi	r0, r1, #31
 8023340:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8023344:	bf44      	itt	mi
 8023346:	0049      	lslmi	r1, r1, #1
 8023348:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 802334c:	2500      	movs	r5, #0
 802334e:	1058      	asrs	r0, r3, #1
 8023350:	0fcb      	lsrs	r3, r1, #31
 8023352:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 8023356:	0049      	lsls	r1, r1, #1
 8023358:	2316      	movs	r3, #22
 802335a:	462c      	mov	r4, r5
 802335c:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 8023360:	19a7      	adds	r7, r4, r6
 8023362:	4297      	cmp	r7, r2
 8023364:	bfde      	ittt	le
 8023366:	19bc      	addle	r4, r7, r6
 8023368:	1bd2      	suble	r2, r2, r7
 802336a:	19ad      	addle	r5, r5, r6
 802336c:	0fcf      	lsrs	r7, r1, #31
 802336e:	3b01      	subs	r3, #1
 8023370:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 8023374:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8023378:	ea4f 0656 	mov.w	r6, r6, lsr #1
 802337c:	d1f0      	bne.n	8023360 <__ieee754_sqrt+0x94>
 802337e:	f04f 0c20 	mov.w	ip, #32
 8023382:	469e      	mov	lr, r3
 8023384:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8023388:	42a2      	cmp	r2, r4
 802338a:	eb06 070e 	add.w	r7, r6, lr
 802338e:	dc02      	bgt.n	8023396 <__ieee754_sqrt+0xca>
 8023390:	d112      	bne.n	80233b8 <__ieee754_sqrt+0xec>
 8023392:	428f      	cmp	r7, r1
 8023394:	d810      	bhi.n	80233b8 <__ieee754_sqrt+0xec>
 8023396:	2f00      	cmp	r7, #0
 8023398:	eb07 0e06 	add.w	lr, r7, r6
 802339c:	da42      	bge.n	8023424 <__ieee754_sqrt+0x158>
 802339e:	f1be 0f00 	cmp.w	lr, #0
 80233a2:	db3f      	blt.n	8023424 <__ieee754_sqrt+0x158>
 80233a4:	f104 0801 	add.w	r8, r4, #1
 80233a8:	1b12      	subs	r2, r2, r4
 80233aa:	428f      	cmp	r7, r1
 80233ac:	bf88      	it	hi
 80233ae:	f102 32ff 	addhi.w	r2, r2, #4294967295
 80233b2:	1bc9      	subs	r1, r1, r7
 80233b4:	4433      	add	r3, r6
 80233b6:	4644      	mov	r4, r8
 80233b8:	0052      	lsls	r2, r2, #1
 80233ba:	f1bc 0c01 	subs.w	ip, ip, #1
 80233be:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 80233c2:	ea4f 0656 	mov.w	r6, r6, lsr #1
 80233c6:	ea4f 0141 	mov.w	r1, r1, lsl #1
 80233ca:	d1dd      	bne.n	8023388 <__ieee754_sqrt+0xbc>
 80233cc:	430a      	orrs	r2, r1
 80233ce:	d006      	beq.n	80233de <__ieee754_sqrt+0x112>
 80233d0:	1c5c      	adds	r4, r3, #1
 80233d2:	bf13      	iteet	ne
 80233d4:	3301      	addne	r3, #1
 80233d6:	3501      	addeq	r5, #1
 80233d8:	4663      	moveq	r3, ip
 80233da:	f023 0301 	bicne.w	r3, r3, #1
 80233de:	106a      	asrs	r2, r5, #1
 80233e0:	085b      	lsrs	r3, r3, #1
 80233e2:	07e9      	lsls	r1, r5, #31
 80233e4:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 80233e8:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 80233ec:	bf48      	it	mi
 80233ee:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 80233f2:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 80233f6:	461c      	mov	r4, r3
 80233f8:	e780      	b.n	80232fc <__ieee754_sqrt+0x30>
 80233fa:	0aca      	lsrs	r2, r1, #11
 80233fc:	3815      	subs	r0, #21
 80233fe:	0549      	lsls	r1, r1, #21
 8023400:	2a00      	cmp	r2, #0
 8023402:	d0fa      	beq.n	80233fa <__ieee754_sqrt+0x12e>
 8023404:	02d6      	lsls	r6, r2, #11
 8023406:	d50a      	bpl.n	802341e <__ieee754_sqrt+0x152>
 8023408:	f1c3 0420 	rsb	r4, r3, #32
 802340c:	fa21 f404 	lsr.w	r4, r1, r4
 8023410:	1e5d      	subs	r5, r3, #1
 8023412:	4099      	lsls	r1, r3
 8023414:	4322      	orrs	r2, r4
 8023416:	1b43      	subs	r3, r0, r5
 8023418:	e78b      	b.n	8023332 <__ieee754_sqrt+0x66>
 802341a:	4618      	mov	r0, r3
 802341c:	e7f0      	b.n	8023400 <__ieee754_sqrt+0x134>
 802341e:	0052      	lsls	r2, r2, #1
 8023420:	3301      	adds	r3, #1
 8023422:	e7ef      	b.n	8023404 <__ieee754_sqrt+0x138>
 8023424:	46a0      	mov	r8, r4
 8023426:	e7bf      	b.n	80233a8 <__ieee754_sqrt+0xdc>
 8023428:	7ff00000 	.word	0x7ff00000

0802342c <fabs>:
 802342c:	ec51 0b10 	vmov	r0, r1, d0
 8023430:	ee10 2a10 	vmov	r2, s0
 8023434:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8023438:	ec43 2b10 	vmov	d0, r2, r3
 802343c:	4770      	bx	lr

0802343e <finite>:
 802343e:	ee10 3a90 	vmov	r3, s1
 8023442:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
 8023446:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 802344a:	0fc0      	lsrs	r0, r0, #31
 802344c:	4770      	bx	lr

0802344e <matherr>:
 802344e:	2000      	movs	r0, #0
 8023450:	4770      	bx	lr
 8023452:	0000      	movs	r0, r0
 8023454:	0000      	movs	r0, r0
	...

08023458 <nan>:
 8023458:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8023460 <nan+0x8>
 802345c:	4770      	bx	lr
 802345e:	bf00      	nop
 8023460:	00000000 	.word	0x00000000
 8023464:	7ff80000 	.word	0x7ff80000

08023468 <rint>:
 8023468:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 802346a:	ec51 0b10 	vmov	r0, r1, d0
 802346e:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8023472:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 8023476:	2e13      	cmp	r6, #19
 8023478:	460b      	mov	r3, r1
 802347a:	ee10 4a10 	vmov	r4, s0
 802347e:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 8023482:	dc56      	bgt.n	8023532 <rint+0xca>
 8023484:	2e00      	cmp	r6, #0
 8023486:	da2b      	bge.n	80234e0 <rint+0x78>
 8023488:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 802348c:	4302      	orrs	r2, r0
 802348e:	d023      	beq.n	80234d8 <rint+0x70>
 8023490:	f3c1 0213 	ubfx	r2, r1, #0, #20
 8023494:	4302      	orrs	r2, r0
 8023496:	4254      	negs	r4, r2
 8023498:	4314      	orrs	r4, r2
 802349a:	0c4b      	lsrs	r3, r1, #17
 802349c:	0b24      	lsrs	r4, r4, #12
 802349e:	045b      	lsls	r3, r3, #17
 80234a0:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 80234a4:	ea44 0103 	orr.w	r1, r4, r3
 80234a8:	460b      	mov	r3, r1
 80234aa:	492f      	ldr	r1, [pc, #188]	; (8023568 <rint+0x100>)
 80234ac:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
 80234b0:	e9d1 6700 	ldrd	r6, r7, [r1]
 80234b4:	4602      	mov	r2, r0
 80234b6:	4639      	mov	r1, r7
 80234b8:	4630      	mov	r0, r6
 80234ba:	f7dc feef 	bl	800029c <__adddf3>
 80234be:	e9cd 0100 	strd	r0, r1, [sp]
 80234c2:	463b      	mov	r3, r7
 80234c4:	4632      	mov	r2, r6
 80234c6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80234ca:	f7dc fee5 	bl	8000298 <__aeabi_dsub>
 80234ce:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80234d2:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 80234d6:	4639      	mov	r1, r7
 80234d8:	ec41 0b10 	vmov	d0, r0, r1
 80234dc:	b003      	add	sp, #12
 80234de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80234e0:	4a22      	ldr	r2, [pc, #136]	; (802356c <rint+0x104>)
 80234e2:	4132      	asrs	r2, r6
 80234e4:	ea01 0702 	and.w	r7, r1, r2
 80234e8:	4307      	orrs	r7, r0
 80234ea:	d0f5      	beq.n	80234d8 <rint+0x70>
 80234ec:	0852      	lsrs	r2, r2, #1
 80234ee:	4011      	ands	r1, r2
 80234f0:	430c      	orrs	r4, r1
 80234f2:	d00b      	beq.n	802350c <rint+0xa4>
 80234f4:	ea23 0202 	bic.w	r2, r3, r2
 80234f8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80234fc:	2e13      	cmp	r6, #19
 80234fe:	fa43 f306 	asr.w	r3, r3, r6
 8023502:	bf0c      	ite	eq
 8023504:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 8023508:	2400      	movne	r4, #0
 802350a:	4313      	orrs	r3, r2
 802350c:	4916      	ldr	r1, [pc, #88]	; (8023568 <rint+0x100>)
 802350e:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 8023512:	4622      	mov	r2, r4
 8023514:	e9d5 4500 	ldrd	r4, r5, [r5]
 8023518:	4620      	mov	r0, r4
 802351a:	4629      	mov	r1, r5
 802351c:	f7dc febe 	bl	800029c <__adddf3>
 8023520:	e9cd 0100 	strd	r0, r1, [sp]
 8023524:	4622      	mov	r2, r4
 8023526:	462b      	mov	r3, r5
 8023528:	e9dd 0100 	ldrd	r0, r1, [sp]
 802352c:	f7dc feb4 	bl	8000298 <__aeabi_dsub>
 8023530:	e7d2      	b.n	80234d8 <rint+0x70>
 8023532:	2e33      	cmp	r6, #51	; 0x33
 8023534:	dd07      	ble.n	8023546 <rint+0xde>
 8023536:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 802353a:	d1cd      	bne.n	80234d8 <rint+0x70>
 802353c:	ee10 2a10 	vmov	r2, s0
 8023540:	f7dc feac 	bl	800029c <__adddf3>
 8023544:	e7c8      	b.n	80234d8 <rint+0x70>
 8023546:	f2a2 4613 	subw	r6, r2, #1043	; 0x413
 802354a:	f04f 32ff 	mov.w	r2, #4294967295
 802354e:	40f2      	lsrs	r2, r6
 8023550:	4210      	tst	r0, r2
 8023552:	d0c1      	beq.n	80234d8 <rint+0x70>
 8023554:	0852      	lsrs	r2, r2, #1
 8023556:	4210      	tst	r0, r2
 8023558:	bf1f      	itttt	ne
 802355a:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 802355e:	ea20 0202 	bicne.w	r2, r0, r2
 8023562:	4134      	asrne	r4, r6
 8023564:	4314      	orrne	r4, r2
 8023566:	e7d1      	b.n	802350c <rint+0xa4>
 8023568:	0802cff8 	.word	0x0802cff8
 802356c:	000fffff 	.word	0x000fffff

08023570 <scalbn>:
 8023570:	b570      	push	{r4, r5, r6, lr}
 8023572:	ec55 4b10 	vmov	r4, r5, d0
 8023576:	f3c5 520a 	ubfx	r2, r5, #20, #11
 802357a:	4606      	mov	r6, r0
 802357c:	462b      	mov	r3, r5
 802357e:	b9aa      	cbnz	r2, 80235ac <scalbn+0x3c>
 8023580:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8023584:	4323      	orrs	r3, r4
 8023586:	d03b      	beq.n	8023600 <scalbn+0x90>
 8023588:	4b31      	ldr	r3, [pc, #196]	; (8023650 <scalbn+0xe0>)
 802358a:	4629      	mov	r1, r5
 802358c:	2200      	movs	r2, #0
 802358e:	ee10 0a10 	vmov	r0, s0
 8023592:	f7dd f839 	bl	8000608 <__aeabi_dmul>
 8023596:	4b2f      	ldr	r3, [pc, #188]	; (8023654 <scalbn+0xe4>)
 8023598:	429e      	cmp	r6, r3
 802359a:	4604      	mov	r4, r0
 802359c:	460d      	mov	r5, r1
 802359e:	da12      	bge.n	80235c6 <scalbn+0x56>
 80235a0:	a327      	add	r3, pc, #156	; (adr r3, 8023640 <scalbn+0xd0>)
 80235a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80235a6:	f7dd f82f 	bl	8000608 <__aeabi_dmul>
 80235aa:	e009      	b.n	80235c0 <scalbn+0x50>
 80235ac:	f240 71ff 	movw	r1, #2047	; 0x7ff
 80235b0:	428a      	cmp	r2, r1
 80235b2:	d10c      	bne.n	80235ce <scalbn+0x5e>
 80235b4:	ee10 2a10 	vmov	r2, s0
 80235b8:	4620      	mov	r0, r4
 80235ba:	4629      	mov	r1, r5
 80235bc:	f7dc fe6e 	bl	800029c <__adddf3>
 80235c0:	4604      	mov	r4, r0
 80235c2:	460d      	mov	r5, r1
 80235c4:	e01c      	b.n	8023600 <scalbn+0x90>
 80235c6:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80235ca:	460b      	mov	r3, r1
 80235cc:	3a36      	subs	r2, #54	; 0x36
 80235ce:	4432      	add	r2, r6
 80235d0:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80235d4:	428a      	cmp	r2, r1
 80235d6:	dd0b      	ble.n	80235f0 <scalbn+0x80>
 80235d8:	ec45 4b11 	vmov	d1, r4, r5
 80235dc:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 8023648 <scalbn+0xd8>
 80235e0:	f000 f83c 	bl	802365c <copysign>
 80235e4:	a318      	add	r3, pc, #96	; (adr r3, 8023648 <scalbn+0xd8>)
 80235e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80235ea:	ec51 0b10 	vmov	r0, r1, d0
 80235ee:	e7da      	b.n	80235a6 <scalbn+0x36>
 80235f0:	2a00      	cmp	r2, #0
 80235f2:	dd08      	ble.n	8023606 <scalbn+0x96>
 80235f4:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80235f8:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80235fc:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8023600:	ec45 4b10 	vmov	d0, r4, r5
 8023604:	bd70      	pop	{r4, r5, r6, pc}
 8023606:	f112 0f35 	cmn.w	r2, #53	; 0x35
 802360a:	da0d      	bge.n	8023628 <scalbn+0xb8>
 802360c:	f24c 3350 	movw	r3, #50000	; 0xc350
 8023610:	429e      	cmp	r6, r3
 8023612:	ec45 4b11 	vmov	d1, r4, r5
 8023616:	dce1      	bgt.n	80235dc <scalbn+0x6c>
 8023618:	ed9f 0b09 	vldr	d0, [pc, #36]	; 8023640 <scalbn+0xd0>
 802361c:	f000 f81e 	bl	802365c <copysign>
 8023620:	a307      	add	r3, pc, #28	; (adr r3, 8023640 <scalbn+0xd0>)
 8023622:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023626:	e7e0      	b.n	80235ea <scalbn+0x7a>
 8023628:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 802362c:	3236      	adds	r2, #54	; 0x36
 802362e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8023632:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8023636:	4620      	mov	r0, r4
 8023638:	4629      	mov	r1, r5
 802363a:	2200      	movs	r2, #0
 802363c:	4b06      	ldr	r3, [pc, #24]	; (8023658 <scalbn+0xe8>)
 802363e:	e7b2      	b.n	80235a6 <scalbn+0x36>
 8023640:	c2f8f359 	.word	0xc2f8f359
 8023644:	01a56e1f 	.word	0x01a56e1f
 8023648:	8800759c 	.word	0x8800759c
 802364c:	7e37e43c 	.word	0x7e37e43c
 8023650:	43500000 	.word	0x43500000
 8023654:	ffff3cb0 	.word	0xffff3cb0
 8023658:	3c900000 	.word	0x3c900000

0802365c <copysign>:
 802365c:	ec51 0b10 	vmov	r0, r1, d0
 8023660:	ee11 0a90 	vmov	r0, s3
 8023664:	ee10 2a10 	vmov	r2, s0
 8023668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 802366c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8023670:	ea41 0300 	orr.w	r3, r1, r0
 8023674:	ec43 2b10 	vmov	d0, r2, r3
 8023678:	4770      	bx	lr
	...

0802367c <_init>:
 802367c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802367e:	bf00      	nop
 8023680:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8023682:	bc08      	pop	{r3}
 8023684:	469e      	mov	lr, r3
 8023686:	4770      	bx	lr

08023688 <_fini>:
 8023688:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802368a:	bf00      	nop
 802368c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802368e:	bc08      	pop	{r3}
 8023690:	469e      	mov	lr, r3
 8023692:	4770      	bx	lr
